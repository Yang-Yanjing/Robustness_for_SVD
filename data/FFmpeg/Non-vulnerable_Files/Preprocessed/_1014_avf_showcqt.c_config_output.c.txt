func	1:0	187:0	0	static int	config_output
params	1:24	0:0	1	
param	1:25	1:46	2	AVFilterLink *	outlink
stmnts	0:0	186:14	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	outlink
op	3:34	0:0	2	->
water	3:36	0:0	2	src
decl	4:4	4:41	2	AVFilterLink	*inlink
op	4:25	0:0	2	=
water	4:27	0:0	2	ctx
op	4:30	0:0	2	->
water	4:32	0:0	2	inputs
op	4:38	0:0	2	[
water	4:39	0:0	2	0
op	4:40	0:0	2	]
decl	5:4	5:33	2	ShowCQTContext	*s
op	5:22	0:0	2	=
water	5:24	0:0	2	ctx
op	5:27	0:0	2	->
water	5:29	0:0	2	priv
decl	6:4	6:76	2	AVExpr	*tlength_expr
op	6:25	0:0	2	=
water	6:27	0:0	2	NULL
water	6:31	0:0	2	,
decl	6:4	6:76	2	AVExpr	*volume_expr
op	6:46	0:0	2	=
water	6:48	0:0	2	NULL
water	6:52	0:0	2	,
decl	6:4	6:76	2	AVExpr	*fontcolor_expr
op	6:70	0:0	2	=
water	6:72	0:0	2	NULL
decl	7:4	7:49	2	uint8_t	*fontcolor_value
op	7:29	0:0	2	=
water	7:31	0:0	2	s
op	7:32	0:0	2	->
water	7:34	0:0	2	fontcolor_value
water	8:4	0:0	2	static
water	8:11	0:0	2	const
water	8:17	0:0	2	char
op	8:22	0:0	2	*
water	8:24	0:0	2	const
water	8:30	0:0	2	expr_vars
op	8:39	0:0	2	[
op	8:40	0:0	2	]
op	8:42	0:0	2	=
water	8:44	0:0	2	{
water	8:46	0:0	2	"timeclamp"
water	8:57	0:0	2	,
water	8:59	0:0	2	"tc"
water	8:63	0:0	2	,
water	8:65	0:0	2	"frequency"
water	8:76	0:0	2	,
water	8:78	0:0	2	"freq"
water	8:84	0:0	2	,
water	8:86	0:0	2	"f"
water	8:89	0:0	2	,
water	8:91	0:0	2	NULL
water	8:96	0:0	2	}
water	8:97	0:0	2	;
water	9:4	0:0	2	static
water	9:11	0:0	2	const
water	9:17	0:0	2	char
op	9:22	0:0	2	*
water	9:24	0:0	2	const
water	9:30	0:0	2	expr_func_names
op	9:45	0:0	2	[
op	9:46	0:0	2	]
op	9:48	0:0	2	=
water	9:50	0:0	2	{
water	9:52	0:0	2	"a_weighting"
water	9:65	0:0	2	,
water	9:67	0:0	2	"b_weighting"
water	9:80	0:0	2	,
water	9:82	0:0	2	"c_weighting"
water	9:95	0:0	2	,
water	9:97	0:0	2	NULL
water	9:102	0:0	2	}
water	9:103	0:0	2	;
water	10:4	0:0	2	static
water	10:11	0:0	2	const
water	10:17	0:0	2	char
op	10:22	0:0	2	*
water	10:24	0:0	2	const
water	10:30	0:0	2	expr_fontcolor_func_names
op	10:55	0:0	2	[
op	10:56	0:0	2	]
op	10:58	0:0	2	=
water	10:60	0:0	2	{
water	10:62	0:0	2	"midi"
water	10:68	0:0	2	,
water	10:70	0:0	2	"r"
water	10:73	0:0	2	,
water	10:75	0:0	2	"g"
water	10:78	0:0	2	,
water	10:80	0:0	2	"b"
water	10:83	0:0	2	,
water	10:85	0:0	2	NULL
water	10:90	0:0	2	}
water	10:91	0:0	2	;
water	11:4	0:0	2	static
call	11:11	11:39	2	double
arg	11:19	11:39	3	*constexpr_funcs[]
op	11:19	0:0	4	*
water	11:21	0:0	4	const
water	11:27	0:0	4	expr_funcs
op	11:37	0:0	4	[
op	11:38	0:0	4	]
water	11:40	0:0	2	(
water	11:41	0:0	2	void
op	11:46	0:0	2	*
water	11:47	0:0	2	,
water	11:49	0:0	2	double
water	11:55	0:0	2	)
op	11:57	0:0	2	=
water	11:59	0:0	2	{
water	11:61	0:0	2	a_weighting
water	11:72	0:0	2	,
water	11:74	0:0	2	b_weighting
water	11:85	0:0	2	,
water	11:87	0:0	2	c_weighting
water	11:98	0:0	2	,
water	11:100	0:0	2	NULL
water	11:105	0:0	2	}
water	11:106	0:0	2	;
water	12:4	0:0	2	static
call	12:11	12:49	2	double
arg	12:19	12:49	3	*constexpr_fontcolor_funcs[]
op	12:19	0:0	4	*
water	12:21	0:0	4	const
water	12:27	0:0	4	expr_fontcolor_funcs
op	12:47	0:0	4	[
op	12:48	0:0	4	]
water	12:50	0:0	2	(
water	12:51	0:0	2	void
op	12:56	0:0	2	*
water	12:57	0:0	2	,
water	12:59	0:0	2	double
water	12:65	0:0	2	)
op	12:67	0:0	2	=
water	12:69	0:0	2	{
water	12:71	0:0	2	midi
water	12:75	0:0	2	,
water	12:77	0:0	2	r_func
water	12:83	0:0	2	,
water	12:85	0:0	2	g_func
water	12:91	0:0	2	,
water	12:93	0:0	2	b_func
water	12:99	0:0	2	,
water	12:101	0:0	2	NULL
water	12:106	0:0	2	}
water	12:107	0:0	2	;
decl	13:4	13:29	2	int	fft_len
water	13:15	0:0	2	,
decl	13:4	13:29	2	int	k
water	13:18	0:0	2	,
decl	13:4	13:29	2	int	x
water	13:21	0:0	2	,
decl	13:4	13:29	2	int	y
water	13:24	0:0	2	,
decl	13:4	13:29	2	int	ret
decl	14:4	14:22	2	int	num_coeffs
op	14:19	0:0	2	=
water	14:21	0:0	2	0
decl	15:4	15:34	2	int	rate
op	15:13	0:0	2	=
water	15:15	0:0	2	inlink
op	15:21	0:0	2	->
water	15:23	0:0	2	sample_rate
decl	16:4	16:49	2	double	max_len
op	16:19	0:0	2	=
water	16:21	0:0	2	rate
op	16:26	0:0	2	*
water	16:28	0:0	2	(
water	16:29	0:0	2	double
water	16:35	0:0	2	)
water	16:37	0:0	2	s
op	16:38	0:0	2	->
water	16:40	0:0	2	timeclamp
decl	17:4	17:32	2	int64_t	start_time
water	17:22	0:0	2	,
decl	17:4	17:32	2	int64_t	end_time
decl	18:4	18:39	2	int	video_scale
op	18:20	0:0	2	=
water	18:22	0:0	2	s
op	18:23	0:0	2	->
water	18:25	0:0	2	fullhd
water	18:32	0:0	2	?
water	18:34	0:0	2	2
water	18:36	0:0	2	:
water	18:38	0:0	2	1
decl	19:4	19:51	2	int	video_width
op	19:20	0:0	2	=
water	19:22	0:0	2	(
water	19:23	0:0	2	VIDEO_WIDTH
op	19:34	0:0	2	/
water	19:35	0:0	2	2
water	19:36	0:0	2	)
op	19:38	0:0	2	*
water	19:40	0:0	2	video_scale
decl	20:4	20:53	2	int	video_height
op	20:21	0:0	2	=
water	20:23	0:0	2	(
water	20:24	0:0	2	VIDEO_HEIGHT
op	20:36	0:0	2	/
water	20:37	0:0	2	2
water	20:38	0:0	2	)
op	20:40	0:0	2	*
water	20:42	0:0	2	video_scale
decl	21:4	21:63	2	int	spectogram_height
op	21:26	0:0	2	=
water	21:28	0:0	2	(
water	21:29	0:0	2	SPECTOGRAM_HEIGHT
op	21:46	0:0	2	/
water	21:47	0:0	2	2
water	21:48	0:0	2	)
op	21:50	0:0	2	*
water	21:52	0:0	2	video_scale
water	22:4	0:0	2	s
op	22:5	0:0	2	->
water	22:7	0:0	2	fft_bits
op	22:16	0:0	2	=
call	22:18	22:36	2	ceil
arg	22:23	22:36	3	log2(max_len)
call	22:23	22:35	4	log2
arg	22:28	22:35	5	max_len
water	22:28	0:0	6	max_len
water	22:37	0:0	2	;
water	23:4	0:0	2	fft_len
op	23:12	0:0	2	=
water	23:14	0:0	2	1
op	23:16	0:0	2	<<
water	23:19	0:0	2	s
op	23:20	0:0	2	->
water	23:22	0:0	2	fft_bits
water	23:30	0:0	2	;
if	24:4	27:4	2	(rate % ( s -> fps * s -> count ))
cond	24:8	24:33	3	rate % ( s -> fps * s -> count )
water	24:8	0:0	4	rate
op	24:13	0:0	4	%
water	24:15	0:0	4	(
water	24:16	0:0	4	s
op	24:17	0:0	4	->
water	24:19	0:0	4	fps
op	24:23	0:0	4	*
water	24:25	0:0	4	s
op	24:26	0:0	4	->
water	24:28	0:0	4	count
water	24:33	0:0	4	)
stmts	24:36	27:4	3	
water	24:36	0:0	4	{
call	25:8	25:109	4	av_log
arg	25:15	25:18	5	ctx
water	25:15	0:0	6	ctx
arg	25:20	25:32	5	AV_LOG_ERROR
water	25:20	0:0	6	AV_LOG_ERROR
arg	25:34	25:85	5	"Rate (%u) is not divisible by fps*count (%u*%u)\n"
water	25:34	0:0	6	"Rate (%u) is not divisible by fps*count (%u*%u)\n"
arg	25:87	25:91	5	rate
water	25:87	0:0	6	rate
arg	25:93	25:99	5	s->fps
water	25:93	0:0	6	s
op	25:94	0:0	6	->
water	25:96	0:0	6	fps
arg	25:101	25:109	5	s->count
water	25:101	0:0	6	s
op	25:102	0:0	6	->
water	25:104	0:0	6	count
water	25:110	0:0	4	;
return	26:8	26:30	4	AVERROR(EINVAL)
call	26:15	26:29	5	AVERROR
arg	26:23	26:29	6	EINVAL
water	26:23	0:0	7	EINVAL
water	27:4	0:0	4	}
water	28:4	0:0	2	s
op	28:5	0:0	2	->
water	28:7	0:0	2	fft_data
op	28:24	0:0	2	=
call	28:26	28:71	2	av_malloc_array
arg	28:42	28:49	3	fft_len
water	28:42	0:0	4	fft_len
arg	28:51	28:71	3	sizeof(*s->fft_data)
op	28:51	0:0	4	sizeof
water	28:57	0:0	4	(
op	28:58	0:0	4	*
water	28:59	0:0	4	s
op	28:60	0:0	4	->
water	28:62	0:0	4	fft_data
water	28:70	0:0	4	)
water	28:72	0:0	2	;
water	29:4	0:0	2	s
op	29:5	0:0	2	->
water	29:7	0:0	2	coeff_sort
op	29:24	0:0	2	=
call	29:26	29:73	2	av_malloc_array
arg	29:42	29:49	3	fft_len
water	29:42	0:0	4	fft_len
arg	29:51	29:73	3	sizeof(*s->coeff_sort)
op	29:51	0:0	4	sizeof
water	29:57	0:0	4	(
op	29:58	0:0	4	*
water	29:59	0:0	4	s
op	29:60	0:0	4	->
water	29:62	0:0	4	coeff_sort
water	29:72	0:0	4	)
water	29:74	0:0	2	;
water	30:4	0:0	2	s
op	30:5	0:0	2	->
water	30:7	0:0	2	fft_result_left
op	30:24	0:0	2	=
call	30:26	30:78	2	av_malloc_array
arg	30:42	30:49	3	fft_len
water	30:42	0:0	4	fft_len
arg	30:51	30:78	3	sizeof(*s->fft_result_left)
op	30:51	0:0	4	sizeof
water	30:57	0:0	4	(
op	30:58	0:0	4	*
water	30:59	0:0	4	s
op	30:60	0:0	4	->
water	30:62	0:0	4	fft_result_left
water	30:77	0:0	4	)
water	30:79	0:0	2	;
water	31:4	0:0	2	s
op	31:5	0:0	2	->
water	31:7	0:0	2	fft_result_right
op	31:24	0:0	2	=
call	31:26	31:79	2	av_malloc_array
arg	31:42	31:49	3	fft_len
water	31:42	0:0	4	fft_len
arg	31:51	31:79	3	sizeof(*s->fft_result_right)
op	31:51	0:0	4	sizeof
water	31:57	0:0	4	(
op	31:58	0:0	4	*
water	31:59	0:0	4	s
op	31:60	0:0	4	->
water	31:62	0:0	4	fft_result_right
water	31:78	0:0	4	)
water	31:80	0:0	2	;
water	32:4	0:0	2	s
op	32:5	0:0	2	->
water	32:7	0:0	2	fft_context
op	32:24	0:0	2	=
call	32:26	32:52	2	av_fft_init
arg	32:38	32:49	3	s->fft_bits
water	32:38	0:0	4	s
op	32:39	0:0	4	->
water	32:41	0:0	4	fft_bits
arg	32:51	32:52	3	0
water	32:51	0:0	4	0
water	32:53	0:0	2	;
if	33:4	34:30	2	(! s -> fft_data || ! s -> coeff_sort || ! s -> fft_result_left || ! s -> fft_result_right || ! s -> fft_context)
cond	33:8	33:93	3	! s -> fft_data || ! s -> coeff_sort || ! s -> fft_result_left || ! s -> fft_result_right || ! s -> fft_context
op	33:8	0:0	4	!
water	33:9	0:0	4	s
op	33:10	0:0	4	->
water	33:12	0:0	4	fft_data
op	33:21	0:0	4	||
op	33:24	0:0	4	!
water	33:25	0:0	4	s
op	33:26	0:0	4	->
water	33:28	0:0	4	coeff_sort
op	33:39	0:0	4	||
op	33:42	0:0	4	!
water	33:43	0:0	4	s
op	33:44	0:0	4	->
water	33:46	0:0	4	fft_result_left
op	33:62	0:0	4	||
op	33:65	0:0	4	!
water	33:66	0:0	4	s
op	33:67	0:0	4	->
water	33:69	0:0	4	fft_result_right
op	33:86	0:0	4	||
op	33:89	0:0	4	!
water	33:90	0:0	4	s
op	33:91	0:0	4	->
water	33:93	0:0	4	fft_context
stmts	34:8	34:30	3	
return	34:8	34:30	4	AVERROR(ENOMEM)
call	34:15	34:29	5	AVERROR
arg	34:23	34:29	6	ENOMEM
water	34:23	0:0	7	ENOMEM
call	36:4	36:26	2	load_freetype_font
arg	36:23	36:26	3	ctx
water	36:23	0:0	4	ctx
water	36:27	0:0	2	;
if	38:4	39:92	2	(s -> fontfile)
cond	38:8	38:11	3	s -> fontfile
water	38:8	0:0	4	s
op	38:9	0:0	4	->
water	38:11	0:0	4	fontfile
stmts	39:8	39:92	3	
call	39:8	39:91	4	av_log
arg	39:15	39:18	5	ctx
water	39:15	0:0	6	ctx
arg	39:20	39:34	5	AV_LOG_WARNING
water	39:20	0:0	6	AV_LOG_WARNING
arg	39:36	39:91	5	"Freetype is not available, ignoring fontfile option\n"
water	39:36	0:0	6	"Freetype is not available, ignoring fontfile option\n"
water	39:92	0:0	4	;
water	40:4	0:0	2	s
op	40:5	0:0	2	->
water	40:7	0:0	2	font_alpha
op	40:18	0:0	2	=
water	40:20	0:0	2	NULL
water	40:24	0:0	2	;
call	42:4	42:73	2	av_log
arg	42:11	42:14	3	ctx
water	42:11	0:0	4	ctx
arg	42:16	42:27	3	AV_LOG_INFO
water	42:16	0:0	4	AV_LOG_INFO
arg	42:29	42:73	3	"Calculating spectral kernel, please wait\n"
water	42:29	0:0	4	"Calculating spectral kernel, please wait\n"
water	42:74	0:0	2	;
water	43:4	0:0	2	start_time
op	43:15	0:0	2	=
call	43:17	43:37	2	av_gettime_relative
water	43:38	0:0	2	;
water	44:4	0:0	2	ret
op	44:8	0:0	2	=
call	44:10	44:92	2	av_expr_parse
arg	44:24	44:37	3	&tlength_expr
op	44:24	0:0	4	&
water	44:25	0:0	4	tlength_expr
arg	44:39	44:49	3	s->tlength
water	44:39	0:0	4	s
op	44:40	0:0	4	->
water	44:42	0:0	4	tlength
arg	44:51	44:60	3	expr_vars
water	44:51	0:0	4	expr_vars
arg	44:62	44:66	3	NULL
water	44:62	0:0	4	NULL
arg	44:68	44:72	3	NULL
water	44:68	0:0	4	NULL
arg	44:74	44:78	3	NULL
water	44:74	0:0	4	NULL
arg	44:80	44:84	3	NULL
water	44:80	0:0	4	NULL
arg	44:86	44:87	3	0
water	44:86	0:0	4	0
arg	44:89	44:92	3	ctx
water	44:89	0:0	4	ctx
water	44:93	0:0	2	;
if	45:4	46:23	2	(ret < 0)
cond	45:8	45:14	3	ret < 0
water	45:8	0:0	4	ret
op	45:12	0:0	4	<
water	45:14	0:0	4	0
stmts	46:8	46:23	3	
goto	46:8	46:23	4	eval_error
water	46:13	0:0	5	eval_error
water	47:4	0:0	2	ret
op	47:8	0:0	2	=
call	47:10	48:54	2	av_expr_parse
arg	47:24	47:36	3	&volume_expr
op	47:24	0:0	4	&
water	47:25	0:0	4	volume_expr
arg	47:38	47:47	3	s->volume
water	47:38	0:0	4	s
op	47:39	0:0	4	->
water	47:41	0:0	4	volume
arg	47:49	47:58	3	expr_vars
water	47:49	0:0	4	expr_vars
arg	47:60	47:75	3	expr_func_names
water	47:60	0:0	4	expr_func_names
arg	48:24	48:34	3	expr_funcs
water	48:24	0:0	4	expr_funcs
arg	48:36	48:40	3	NULL
water	48:36	0:0	4	NULL
arg	48:42	48:46	3	NULL
water	48:42	0:0	4	NULL
arg	48:48	48:49	3	0
water	48:48	0:0	4	0
arg	48:51	48:54	3	ctx
water	48:51	0:0	4	ctx
water	48:55	0:0	2	;
if	49:4	50:23	2	(ret < 0)
cond	49:8	49:14	3	ret < 0
water	49:8	0:0	4	ret
op	49:12	0:0	4	<
water	49:14	0:0	4	0
stmts	50:8	50:23	3	
goto	50:8	50:23	4	eval_error
water	50:13	0:0	5	eval_error
water	51:4	0:0	2	ret
op	51:8	0:0	2	=
call	51:10	52:64	2	av_expr_parse
arg	51:24	51:39	3	&fontcolor_expr
op	51:24	0:0	4	&
water	51:25	0:0	4	fontcolor_expr
arg	51:41	51:53	3	s->fontcolor
water	51:41	0:0	4	s
op	51:42	0:0	4	->
water	51:44	0:0	4	fontcolor
arg	51:55	51:64	3	expr_vars
water	51:55	0:0	4	expr_vars
arg	51:66	51:91	3	expr_fontcolor_func_names
water	51:66	0:0	4	expr_fontcolor_func_names
arg	52:24	52:44	3	expr_fontcolor_funcs
water	52:24	0:0	4	expr_fontcolor_funcs
arg	52:46	52:50	3	NULL
water	52:46	0:0	4	NULL
arg	52:52	52:56	3	NULL
water	52:52	0:0	4	NULL
arg	52:58	52:59	3	0
water	52:58	0:0	4	0
arg	52:61	52:64	3	ctx
water	52:61	0:0	4	ctx
water	52:65	0:0	2	;
if	53:4	54:23	2	(ret < 0)
cond	53:8	53:14	3	ret < 0
water	53:8	0:0	4	ret
op	53:12	0:0	4	<
water	53:14	0:0	4	0
stmts	54:8	54:23	3	
goto	54:8	54:23	4	eval_error
water	54:13	0:0	5	eval_error
for	55:4	158:4	2	(k = 0 ;k < VIDEO_WIDTH;k ++)
forinit	55:9	55:14	3	k = 0 ;
water	55:9	0:0	4	k
op	55:11	0:0	4	=
water	55:13	0:0	4	0
water	55:14	0:0	4	;
cond	55:16	55:20	3	k < VIDEO_WIDTH
water	55:16	0:0	4	k
op	55:18	0:0	4	<
water	55:20	0:0	4	VIDEO_WIDTH
forexpr	55:33	55:34	3	k ++
water	55:33	0:0	4	k
op	55:34	0:0	4	++
stmts	55:38	158:4	3	
water	55:38	0:0	4	{
decl	56:8	56:31	4	int	hlen
op	56:17	0:0	4	=
water	56:19	0:0	4	fft_len
op	56:27	0:0	4	>>
water	56:30	0:0	4	1
decl	57:8	57:23	4	float	total
op	57:20	0:0	4	=
water	57:22	0:0	4	0
decl	58:8	58:25	4	float	partial
op	58:22	0:0	4	=
water	58:24	0:0	4	0
decl	59:8	59:55	4	double	freq
op	59:20	0:0	4	=
water	59:22	0:0	4	BASE_FREQ
call	59:32	59:54	5	*exp2
arg	59:39	59:54	6	k*(1.0/192.0)
water	59:39	0:0	7	k
op	59:41	0:0	7	*
water	59:43	0:0	7	(
water	59:44	0:0	7	1
op	59:45	0:0	7	.
water	59:46	0:0	7	0
op	59:47	0:0	7	/
water	59:48	0:0	7	192
op	59:51	0:0	7	.
water	59:52	0:0	7	0
water	59:53	0:0	7	)
decl	60:8	60:36	4	double	tlen
water	60:19	0:0	4	,
decl	60:8	60:36	4	double	tlength
water	60:28	0:0	4	,
decl	60:8	60:36	4	double	volume
decl	61:8	61:84	4	double	expr_vars_val[]
op	61:31	0:0	4	=
water	61:33	0:0	4	{
water	61:35	0:0	4	s
op	61:36	0:0	4	->
water	61:38	0:0	4	timeclamp
water	61:47	0:0	4	,
water	61:49	0:0	4	s
op	61:50	0:0	4	->
water	61:52	0:0	4	timeclamp
water	61:61	0:0	4	,
water	61:63	0:0	4	freq
water	61:67	0:0	4	,
water	61:69	0:0	4	freq
water	61:73	0:0	4	,
water	61:75	0:0	4	freq
water	61:79	0:0	4	,
water	61:81	0:0	4	0
water	61:83	0:0	4	}
decl	66:8	66:28	4	double	a0
op	66:18	0:0	4	=
water	66:20	0:0	4	0
op	66:21	0:0	4	.
water	66:22	0:0	4	355768
decl	67:8	67:31	4	double	a1
op	67:18	0:0	4	=
water	67:20	0:0	4	0
op	67:21	0:0	4	.
water	67:22	0:0	4	487396
op	67:28	0:0	4	/
water	67:29	0:0	4	a0
decl	68:8	68:31	4	double	a2
op	68:18	0:0	4	=
water	68:20	0:0	4	0
op	68:21	0:0	4	.
water	68:22	0:0	4	144232
op	68:28	0:0	4	/
water	68:29	0:0	4	a0
decl	69:8	69:31	4	double	a3
op	69:18	0:0	4	=
water	69:20	0:0	4	0
op	69:21	0:0	4	.
water	69:22	0:0	4	012604
op	69:28	0:0	4	/
water	69:29	0:0	4	a0
decl	70:8	70:39	4	double	sv_step
water	70:22	0:0	4	,
decl	70:8	70:39	4	double	cv_step
water	70:31	0:0	4	,
decl	70:8	70:39	4	double	sv
water	70:35	0:0	4	,
decl	70:8	70:39	4	double	cv
decl	71:8	71:42	4	double	sw_step
water	71:22	0:0	4	,
decl	71:8	71:42	4	double	cw_step
water	71:31	0:0	4	,
decl	71:8	71:42	4	double	sw
water	71:35	0:0	4	,
decl	71:8	71:42	4	double	cw
water	71:39	0:0	4	,
decl	71:8	71:42	4	double	w
water	72:8	0:0	4	tlength
op	72:16	0:0	4	=
call	72:18	72:64	4	av_expr_eval
arg	72:31	72:43	5	tlength_expr
water	72:31	0:0	6	tlength_expr
arg	72:45	72:58	5	expr_vars_val
water	72:45	0:0	6	expr_vars_val
arg	72:60	72:64	5	NULL
water	72:60	0:0	6	NULL
water	72:65	0:0	4	;
if	73:8	76:8	4	(isnan (tlength ))
cond	73:12	73:25	5	isnan (tlength )
call	73:12	73:25	6	isnan
arg	73:18	73:25	7	tlength
water	73:18	0:0	8	tlength
stmts	73:28	76:8	5	
water	73:28	0:0	6	{
call	74:12	74:108	6	av_log
arg	74:19	74:22	7	ctx
water	74:19	0:0	8	ctx
arg	74:24	74:38	7	AV_LOG_WARNING
water	74:24	0:0	8	AV_LOG_WARNING
arg	74:40	74:88	7	"at freq %g: tlength is nan, setting it to %g\n"
water	74:40	0:0	8	"at freq %g: tlength is nan, setting it to %g\n"
arg	74:90	74:94	7	freq
water	74:90	0:0	8	freq
arg	74:96	74:108	7	s->timeclamp
water	74:96	0:0	8	s
op	74:97	0:0	8	->
water	74:99	0:0	8	timeclamp
water	74:109	0:0	6	;
water	75:12	0:0	6	tlength
op	75:20	0:0	6	=
water	75:22	0:0	6	s
op	75:23	0:0	6	->
water	75:25	0:0	6	timeclamp
water	75:34	0:0	6	;
water	76:8	0:0	6	}
else	76:10	79:8	4
stmts	76:15	79:8	5	
if	76:15	79:8	6	(tlength < TLENGTH_MIN)
cond	76:19	76:29	7	tlength < TLENGTH_MIN
water	76:19	0:0	8	tlength
op	76:27	0:0	8	<
water	76:29	0:0	8	TLENGTH_MIN
stmts	76:42	79:8	7	
water	76:42	0:0	8	{
call	77:12	77:115	8	av_log
arg	77:19	77:22	9	ctx
water	77:19	0:0	10	ctx
arg	77:24	77:38	9	AV_LOG_WARNING
water	77:24	0:0	10	AV_LOG_WARNING
arg	77:40	77:87	9	"at freq %g: tlength is %g, setting it to %g\n"
water	77:40	0:0	10	"at freq %g: tlength is %g, setting it to %g\n"
arg	77:89	77:93	9	freq
water	77:89	0:0	10	freq
arg	77:95	77:102	9	tlength
water	77:95	0:0	10	tlength
arg	77:104	77:115	9	TLENGTH_MIN
water	77:104	0:0	10	TLENGTH_MIN
water	77:116	0:0	8	;
water	78:12	0:0	8	tlength
op	78:20	0:0	8	=
water	78:22	0:0	8	TLENGTH_MIN
water	78:33	0:0	8	;
water	79:8	0:0	8	}
else	79:10	82:8	4
stmts	79:15	82:8	5	
if	79:15	82:8	6	(tlength > s -> timeclamp)
cond	79:19	79:32	7	tlength > s -> timeclamp
water	79:19	0:0	8	tlength
op	79:27	0:0	8	>
water	79:29	0:0	8	s
op	79:30	0:0	8	->
water	79:32	0:0	8	timeclamp
stmts	79:43	82:8	7	
water	79:43	0:0	8	{
call	80:12	80:116	8	av_log
arg	80:19	80:22	9	ctx
water	80:19	0:0	10	ctx
arg	80:24	80:38	9	AV_LOG_WARNING
water	80:24	0:0	10	AV_LOG_WARNING
arg	80:40	80:87	9	"at freq %g: tlength is %g, setting it to %g\n"
water	80:40	0:0	10	"at freq %g: tlength is %g, setting it to %g\n"
arg	80:89	80:93	9	freq
water	80:89	0:0	10	freq
arg	80:95	80:102	9	tlength
water	80:95	0:0	10	tlength
arg	80:104	80:116	9	s->timeclamp
water	80:104	0:0	10	s
op	80:105	0:0	10	->
water	80:107	0:0	10	timeclamp
water	80:117	0:0	8	;
water	81:12	0:0	8	tlength
op	81:20	0:0	8	=
water	81:22	0:0	8	s
op	81:23	0:0	8	->
water	81:25	0:0	8	timeclamp
water	81:34	0:0	8	;
water	82:8	0:0	8	}
water	83:8	0:0	4	volume
op	83:15	0:0	4	=
call	83:17	83:69	4	FFABS
arg	83:23	83:69	5	av_expr_eval(volume_expr,expr_vars_val,NULL)
call	83:23	83:68	6	av_expr_eval
arg	83:36	83:47	7	volume_expr
water	83:36	0:0	8	volume_expr
arg	83:49	83:62	7	expr_vars_val
water	83:49	0:0	8	expr_vars_val
arg	83:64	83:68	7	NULL
water	83:64	0:0	8	NULL
water	83:70	0:0	4	;
if	84:8	87:8	4	(isnan (volume ))
cond	84:12	84:24	5	isnan (volume )
call	84:12	84:24	6	isnan
arg	84:18	84:24	7	volume
water	84:18	0:0	8	volume
stmts	84:27	87:8	5	
water	84:27	0:0	6	{
call	85:12	85:92	6	av_log
arg	85:19	85:22	7	ctx
water	85:19	0:0	8	ctx
arg	85:24	85:38	7	AV_LOG_WARNING
water	85:24	0:0	8	AV_LOG_WARNING
arg	85:40	85:86	7	"at freq %g: volume is nan, setting it to 0\n"
water	85:40	0:0	8	"at freq %g: volume is nan, setting it to 0\n"
arg	85:88	85:92	7	freq
water	85:88	0:0	8	freq
water	85:93	0:0	6	;
water	86:12	0:0	6	volume
op	86:19	0:0	6	=
water	86:21	0:0	6	VOLUME_MIN
water	86:31	0:0	6	;
water	87:8	0:0	6	}
else	87:10	89:8	4
stmts	87:15	89:8	5	
if	87:15	89:8	6	(volume < VOLUME_MIN)
cond	87:19	87:28	7	volume < VOLUME_MIN
water	87:19	0:0	8	volume
op	87:26	0:0	8	<
water	87:28	0:0	8	VOLUME_MIN
stmts	87:40	89:8	7	
water	87:40	0:0	8	{
water	88:12	0:0	8	volume
op	88:19	0:0	8	=
water	88:21	0:0	8	VOLUME_MIN
water	88:31	0:0	8	;
water	89:8	0:0	8	}
else	89:10	92:8	4
stmts	89:15	92:8	5	
if	89:15	92:8	6	(volume > VOLUME_MAX)
cond	89:19	89:28	7	volume > VOLUME_MAX
water	89:19	0:0	8	volume
op	89:26	0:0	8	>
water	89:28	0:0	8	VOLUME_MAX
stmts	89:40	92:8	7	
water	89:40	0:0	8	{
call	90:12	90:112	8	av_log
arg	90:19	90:22	9	ctx
water	90:19	0:0	10	ctx
arg	90:24	90:38	9	AV_LOG_WARNING
water	90:24	0:0	10	AV_LOG_WARNING
arg	90:40	90:86	9	"at freq %g: volume is %g, setting it to %g\n"
water	90:40	0:0	10	"at freq %g: volume is %g, setting it to %g\n"
arg	90:88	90:92	9	freq
water	90:88	0:0	10	freq
arg	90:94	90:100	9	volume
water	90:94	0:0	10	volume
arg	90:102	90:112	9	VOLUME_MAX
water	90:102	0:0	10	VOLUME_MAX
water	90:113	0:0	8	;
water	91:12	0:0	8	volume
op	91:19	0:0	8	=
water	91:21	0:0	8	VOLUME_MAX
water	91:31	0:0	8	;
water	92:8	0:0	8	}
if	93:8	99:8	4	(s -> fullhd || ! ( k & 1 ))
cond	93:12	93:32	5	s -> fullhd || ! ( k & 1 )
water	93:12	0:0	6	s
op	93:13	0:0	6	->
water	93:15	0:0	6	fullhd
op	93:22	0:0	6	||
op	93:25	0:0	6	!
water	93:26	0:0	6	(
water	93:27	0:0	6	k
op	93:29	0:0	6	&
water	93:31	0:0	6	1
water	93:32	0:0	6	)
stmts	93:35	99:8	5	
water	93:35	0:0	6	{
decl	94:12	94:77	6	int	fontcolor
op	94:26	0:0	6	=
call	94:28	94:76	7	av_expr_eval
arg	94:41	94:55	8	fontcolor_expr
water	94:41	0:0	9	fontcolor_expr
arg	94:57	94:70	8	expr_vars_val
water	94:57	0:0	9	expr_vars_val
arg	94:72	94:76	8	NULL
water	94:72	0:0	9	NULL
water	95:12	0:0	6	fontcolor_value
op	95:27	0:0	6	[
water	95:28	0:0	6	0
op	95:29	0:0	6	]
op	95:31	0:0	6	=
water	95:33	0:0	6	(
water	95:34	0:0	6	fontcolor
op	95:44	0:0	6	>>
water	95:47	0:0	6	16
water	95:49	0:0	6	)
op	95:51	0:0	6	&
water	95:53	0:0	6	0
water	95:54	0:0	6	xFF
water	95:57	0:0	6	;
water	96:12	0:0	6	fontcolor_value
op	96:27	0:0	6	[
water	96:28	0:0	6	1
op	96:29	0:0	6	]
op	96:31	0:0	6	=
water	96:33	0:0	6	(
water	96:34	0:0	6	fontcolor
op	96:44	0:0	6	>>
water	96:47	0:0	6	8
water	96:48	0:0	6	)
op	96:50	0:0	6	&
water	96:52	0:0	6	0
water	96:53	0:0	6	xFF
water	96:56	0:0	6	;
water	97:12	0:0	6	fontcolor_value
op	97:27	0:0	6	[
water	97:28	0:0	6	2
op	97:29	0:0	6	]
op	97:31	0:0	6	=
water	97:33	0:0	6	fontcolor
op	97:43	0:0	6	&
water	97:45	0:0	6	0
water	97:46	0:0	6	xFF
water	97:49	0:0	6	;
water	98:12	0:0	6	fontcolor_value
op	98:28	0:0	6	+=
water	98:31	0:0	6	3
water	98:32	0:0	6	;
water	99:8	0:0	6	}
water	100:8	0:0	4	tlen
op	100:13	0:0	4	=
water	100:15	0:0	4	tlength
op	100:23	0:0	4	*
water	100:25	0:0	4	rate
water	100:29	0:0	4	;
water	101:8	0:0	4	s
op	101:9	0:0	4	->
water	101:11	0:0	4	fft_data
op	101:19	0:0	4	[
water	101:20	0:0	4	0
op	101:21	0:0	4	]
op	101:22	0:0	4	.
water	101:23	0:0	4	re
op	101:26	0:0	4	=
water	101:28	0:0	4	0
water	101:29	0:0	4	;
water	102:8	0:0	4	s
op	102:9	0:0	4	->
water	102:11	0:0	4	fft_data
op	102:19	0:0	4	[
water	102:20	0:0	4	0
op	102:21	0:0	4	]
op	102:22	0:0	4	.
water	102:23	0:0	4	im
op	102:26	0:0	4	=
water	102:28	0:0	4	0
water	102:29	0:0	4	;
water	103:8	0:0	4	s
op	103:9	0:0	4	->
water	103:11	0:0	4	fft_data
op	103:19	0:0	4	[
water	103:20	0:0	4	hlen
op	103:24	0:0	4	]
op	103:25	0:0	4	.
water	103:26	0:0	4	re
op	103:29	0:0	4	=
water	103:31	0:0	4	(
water	103:32	0:0	4	1
op	103:33	0:0	4	.
water	103:34	0:0	4	0
op	103:36	0:0	4	+
water	103:38	0:0	4	a1
op	103:41	0:0	4	+
water	103:43	0:0	4	a2
op	103:46	0:0	4	+
water	103:48	0:0	4	a3
water	103:50	0:0	4	)
op	103:52	0:0	4	*
water	103:54	0:0	4	(
water	103:55	0:0	4	1
op	103:56	0:0	4	.
water	103:57	0:0	4	0
op	103:58	0:0	4	/
water	103:59	0:0	4	tlen
water	103:63	0:0	4	)
op	103:65	0:0	4	*
water	103:67	0:0	4	volume
op	103:74	0:0	4	*
water	103:76	0:0	4	(
water	103:77	0:0	4	1
op	103:78	0:0	4	.
water	103:79	0:0	4	0
op	103:80	0:0	4	/
water	103:81	0:0	4	fft_len
water	103:88	0:0	4	)
water	103:89	0:0	4	;
water	104:8	0:0	4	s
op	104:9	0:0	4	->
water	104:11	0:0	4	fft_data
op	104:19	0:0	4	[
water	104:20	0:0	4	hlen
op	104:24	0:0	4	]
op	104:25	0:0	4	.
water	104:26	0:0	4	im
op	104:29	0:0	4	=
water	104:31	0:0	4	0
water	104:32	0:0	4	;
water	105:8	0:0	4	sv_step
op	105:16	0:0	4	=
water	105:18	0:0	4	sv
op	105:21	0:0	4	=
call	105:23	105:51	4	sin
arg	105:27	105:51	5	2.0*M_PI*freq*(1.0/rate)
water	105:27	0:0	6	2
op	105:28	0:0	6	.
water	105:29	0:0	6	0
op	105:30	0:0	6	*
water	105:31	0:0	6	M_PI
op	105:35	0:0	6	*
water	105:36	0:0	6	freq
op	105:40	0:0	6	*
water	105:41	0:0	6	(
water	105:42	0:0	6	1
op	105:43	0:0	6	.
water	105:44	0:0	6	0
op	105:45	0:0	6	/
water	105:46	0:0	6	rate
water	105:50	0:0	6	)
water	105:52	0:0	4	;
water	106:8	0:0	4	cv_step
op	106:16	0:0	4	=
water	106:18	0:0	4	cv
op	106:21	0:0	4	=
call	106:23	106:51	4	cos
arg	106:27	106:51	5	2.0*M_PI*freq*(1.0/rate)
water	106:27	0:0	6	2
op	106:28	0:0	6	.
water	106:29	0:0	6	0
op	106:30	0:0	6	*
water	106:31	0:0	6	M_PI
op	106:35	0:0	6	*
water	106:36	0:0	6	freq
op	106:40	0:0	6	*
water	106:41	0:0	6	(
water	106:42	0:0	6	1
op	106:43	0:0	6	.
water	106:44	0:0	6	0
op	106:45	0:0	6	/
water	106:46	0:0	6	rate
water	106:50	0:0	6	)
water	106:52	0:0	4	;
water	108:8	0:0	4	sw_step
op	108:16	0:0	4	=
water	108:18	0:0	4	sw
op	108:21	0:0	4	=
call	108:23	108:46	4	sin
arg	108:27	108:46	5	2.0*M_PI*(1.0/tlen)
water	108:27	0:0	6	2
op	108:28	0:0	6	.
water	108:29	0:0	6	0
op	108:30	0:0	6	*
water	108:31	0:0	6	M_PI
op	108:35	0:0	6	*
water	108:36	0:0	6	(
water	108:37	0:0	6	1
op	108:38	0:0	6	.
water	108:39	0:0	6	0
op	108:40	0:0	6	/
water	108:41	0:0	6	tlen
water	108:45	0:0	6	)
water	108:47	0:0	4	;
water	109:8	0:0	4	cw_step
op	109:16	0:0	4	=
water	109:18	0:0	4	cw
op	109:21	0:0	4	=
call	109:23	109:46	4	cos
arg	109:27	109:46	5	2.0*M_PI*(1.0/tlen)
water	109:27	0:0	6	2
op	109:28	0:0	6	.
water	109:29	0:0	6	0
op	109:30	0:0	6	*
water	109:31	0:0	6	M_PI
op	109:35	0:0	6	*
water	109:36	0:0	6	(
water	109:37	0:0	6	1
op	109:38	0:0	6	.
water	109:39	0:0	6	0
op	109:40	0:0	6	/
water	109:41	0:0	6	tlen
water	109:45	0:0	6	)
water	109:47	0:0	4	;
for	110:8	127:8	4	(x = 1 ;x < 0 . 5 * tlen;x ++)
forinit	110:13	110:18	5	x = 1 ;
water	110:13	0:0	6	x
op	110:15	0:0	6	=
water	110:17	0:0	6	1
water	110:18	0:0	6	;
cond	110:20	110:30	5	x < 0 . 5 * tlen
water	110:20	0:0	6	x
op	110:22	0:0	6	<
water	110:24	0:0	6	0
op	110:25	0:0	6	.
water	110:26	0:0	6	5
op	110:28	0:0	6	*
water	110:30	0:0	6	tlen
forexpr	110:36	110:37	5	x ++
water	110:36	0:0	6	x
op	110:37	0:0	6	++
stmts	110:41	127:8	5	
water	110:41	0:0	6	{
decl	111:12	111:33	6	double	cv_tmp
water	111:25	0:0	6	,
decl	111:12	111:33	6	double	cw_tmp
decl	112:12	112:32	6	double	cw2
water	112:22	0:0	6	,
decl	112:12	112:32	6	double	cw3
water	112:27	0:0	6	,
decl	112:12	112:32	6	double	sw2
water	113:12	0:0	6	cw2
op	113:16	0:0	6	=
water	113:18	0:0	6	cw
op	113:21	0:0	6	*
water	113:23	0:0	6	cw
op	113:26	0:0	6	-
water	113:28	0:0	6	sw
op	113:31	0:0	6	*
water	113:33	0:0	6	sw
water	113:35	0:0	6	;
water	114:12	0:0	6	sw2
op	114:16	0:0	6	=
water	114:18	0:0	6	cw
op	114:21	0:0	6	*
water	114:23	0:0	6	sw
op	114:26	0:0	6	+
water	114:28	0:0	6	sw
op	114:31	0:0	6	*
water	114:33	0:0	6	cw
water	114:35	0:0	6	;
water	115:12	0:0	6	cw3
op	115:16	0:0	6	=
water	115:18	0:0	6	cw
op	115:21	0:0	6	*
water	115:23	0:0	6	cw2
op	115:27	0:0	6	-
water	115:29	0:0	6	sw
op	115:32	0:0	6	*
water	115:34	0:0	6	sw2
water	115:37	0:0	6	;
water	116:12	0:0	6	w
op	116:14	0:0	6	=
water	116:16	0:0	6	(
water	116:17	0:0	6	1
op	116:18	0:0	6	.
water	116:19	0:0	6	0
op	116:21	0:0	6	+
water	116:23	0:0	6	a1
op	116:26	0:0	6	*
water	116:28	0:0	6	cw
op	116:31	0:0	6	+
water	116:33	0:0	6	a2
op	116:36	0:0	6	*
water	116:38	0:0	6	cw2
op	116:42	0:0	6	+
water	116:44	0:0	6	a3
op	116:47	0:0	6	*
water	116:49	0:0	6	cw3
water	116:52	0:0	6	)
op	116:54	0:0	6	*
water	116:56	0:0	6	(
water	116:57	0:0	6	1
op	116:58	0:0	6	.
water	116:59	0:0	6	0
op	116:60	0:0	6	/
water	116:61	0:0	6	tlen
water	116:65	0:0	6	)
op	116:67	0:0	6	*
water	116:69	0:0	6	volume
op	116:76	0:0	6	*
water	116:78	0:0	6	(
water	116:79	0:0	6	1
op	116:80	0:0	6	.
water	116:81	0:0	6	0
op	116:82	0:0	6	/
water	116:83	0:0	6	fft_len
water	116:90	0:0	6	)
water	116:91	0:0	6	;
water	117:12	0:0	6	s
op	117:13	0:0	6	->
water	117:15	0:0	6	fft_data
op	117:23	0:0	6	[
water	117:24	0:0	6	hlen
op	117:29	0:0	6	+
water	117:31	0:0	6	x
op	117:32	0:0	6	]
op	117:33	0:0	6	.
water	117:34	0:0	6	re
op	117:37	0:0	6	=
water	117:39	0:0	6	w
op	117:41	0:0	6	*
water	117:43	0:0	6	cv
water	117:45	0:0	6	;
water	118:12	0:0	6	s
op	118:13	0:0	6	->
water	118:15	0:0	6	fft_data
op	118:23	0:0	6	[
water	118:24	0:0	6	hlen
op	118:29	0:0	6	+
water	118:31	0:0	6	x
op	118:32	0:0	6	]
op	118:33	0:0	6	.
water	118:34	0:0	6	im
op	118:37	0:0	6	=
water	118:39	0:0	6	w
op	118:41	0:0	6	*
water	118:43	0:0	6	sv
water	118:45	0:0	6	;
water	119:12	0:0	6	s
op	119:13	0:0	6	->
water	119:15	0:0	6	fft_data
op	119:23	0:0	6	[
water	119:24	0:0	6	hlen
op	119:29	0:0	6	-
water	119:31	0:0	6	x
op	119:32	0:0	6	]
op	119:33	0:0	6	.
water	119:34	0:0	6	re
op	119:37	0:0	6	=
water	119:39	0:0	6	s
op	119:40	0:0	6	->
water	119:42	0:0	6	fft_data
op	119:50	0:0	6	[
water	119:51	0:0	6	hlen
op	119:56	0:0	6	+
water	119:58	0:0	6	x
op	119:59	0:0	6	]
op	119:60	0:0	6	.
water	119:61	0:0	6	re
water	119:63	0:0	6	;
water	120:12	0:0	6	s
op	120:13	0:0	6	->
water	120:15	0:0	6	fft_data
op	120:23	0:0	6	[
water	120:24	0:0	6	hlen
op	120:29	0:0	6	-
water	120:31	0:0	6	x
op	120:32	0:0	6	]
op	120:33	0:0	6	.
water	120:34	0:0	6	im
op	120:37	0:0	6	=
op	120:39	0:0	6	-
water	120:40	0:0	6	s
op	120:41	0:0	6	->
water	120:43	0:0	6	fft_data
op	120:51	0:0	6	[
water	120:52	0:0	6	hlen
op	120:57	0:0	6	+
water	120:59	0:0	6	x
op	120:60	0:0	6	]
op	120:61	0:0	6	.
water	120:62	0:0	6	im
water	120:64	0:0	6	;
water	121:12	0:0	6	cv_tmp
op	121:19	0:0	6	=
water	121:21	0:0	6	cv
op	121:24	0:0	6	*
water	121:26	0:0	6	cv_step
op	121:34	0:0	6	-
water	121:36	0:0	6	sv
op	121:39	0:0	6	*
water	121:41	0:0	6	sv_step
water	121:48	0:0	6	;
water	122:12	0:0	6	sv
op	122:15	0:0	6	=
water	122:17	0:0	6	sv
op	122:20	0:0	6	*
water	122:22	0:0	6	cv_step
op	122:30	0:0	6	+
water	122:32	0:0	6	cv
op	122:35	0:0	6	*
water	122:37	0:0	6	sv_step
water	122:44	0:0	6	;
water	123:12	0:0	6	cv
op	123:15	0:0	6	=
water	123:17	0:0	6	cv_tmp
water	123:23	0:0	6	;
water	124:12	0:0	6	cw_tmp
op	124:19	0:0	6	=
water	124:21	0:0	6	cw
op	124:24	0:0	6	*
water	124:26	0:0	6	cw_step
op	124:34	0:0	6	-
water	124:36	0:0	6	sw
op	124:39	0:0	6	*
water	124:41	0:0	6	sw_step
water	124:48	0:0	6	;
water	125:12	0:0	6	sw
op	125:15	0:0	6	=
water	125:17	0:0	6	sw
op	125:20	0:0	6	*
water	125:22	0:0	6	cw_step
op	125:30	0:0	6	+
water	125:32	0:0	6	cw
op	125:35	0:0	6	*
water	125:37	0:0	6	sw_step
water	125:44	0:0	6	;
water	126:12	0:0	6	cw
op	126:15	0:0	6	=
water	126:17	0:0	6	cw_tmp
water	126:23	0:0	6	;
water	127:8	0:0	6	}
for	128:8	133:8	4	(;x < hlen;x ++)
forinit	128:13	128:13	5	;
water	128:13	0:0	6	;
cond	128:15	128:19	5	x < hlen
water	128:15	0:0	6	x
op	128:17	0:0	6	<
water	128:19	0:0	6	hlen
forexpr	128:25	128:26	5	x ++
water	128:25	0:0	6	x
op	128:26	0:0	6	++
stmts	128:30	133:8	5	
water	128:30	0:0	6	{
water	129:12	0:0	6	s
op	129:13	0:0	6	->
water	129:15	0:0	6	fft_data
op	129:23	0:0	6	[
water	129:24	0:0	6	hlen
op	129:29	0:0	6	+
water	129:31	0:0	6	x
op	129:32	0:0	6	]
op	129:33	0:0	6	.
water	129:34	0:0	6	re
op	129:37	0:0	6	=
water	129:39	0:0	6	0
water	129:40	0:0	6	;
water	130:12	0:0	6	s
op	130:13	0:0	6	->
water	130:15	0:0	6	fft_data
op	130:23	0:0	6	[
water	130:24	0:0	6	hlen
op	130:29	0:0	6	+
water	130:31	0:0	6	x
op	130:32	0:0	6	]
op	130:33	0:0	6	.
water	130:34	0:0	6	im
op	130:37	0:0	6	=
water	130:39	0:0	6	0
water	130:40	0:0	6	;
water	131:12	0:0	6	s
op	131:13	0:0	6	->
water	131:15	0:0	6	fft_data
op	131:23	0:0	6	[
water	131:24	0:0	6	hlen
op	131:29	0:0	6	-
water	131:31	0:0	6	x
op	131:32	0:0	6	]
op	131:33	0:0	6	.
water	131:34	0:0	6	re
op	131:37	0:0	6	=
water	131:39	0:0	6	0
water	131:40	0:0	6	;
water	132:12	0:0	6	s
op	132:13	0:0	6	->
water	132:15	0:0	6	fft_data
op	132:23	0:0	6	[
water	132:24	0:0	6	hlen
op	132:29	0:0	6	-
water	132:31	0:0	6	x
op	132:32	0:0	6	]
op	132:33	0:0	6	.
water	132:34	0:0	6	im
op	132:37	0:0	6	=
water	132:39	0:0	6	0
water	132:40	0:0	6	;
water	133:8	0:0	6	}
call	134:8	134:50	4	av_fft_permute
arg	134:23	134:37	5	s->fft_context
water	134:23	0:0	6	s
op	134:24	0:0	6	->
water	134:26	0:0	6	fft_context
arg	134:39	134:50	5	s->fft_data
water	134:39	0:0	6	s
op	134:40	0:0	6	->
water	134:42	0:0	6	fft_data
water	134:51	0:0	4	;
call	135:8	135:47	4	av_fft_calc
arg	135:20	135:34	5	s->fft_context
water	135:20	0:0	6	s
op	135:21	0:0	6	->
water	135:23	0:0	6	fft_context
arg	135:36	135:47	5	s->fft_data
water	135:36	0:0	6	s
op	135:37	0:0	6	->
water	135:39	0:0	6	fft_data
water	135:48	0:0	4	;
for	136:8	139:8	4	(x = 0 ;x < fft_len;x ++)
forinit	136:13	136:18	5	x = 0 ;
water	136:13	0:0	6	x
op	136:15	0:0	6	=
water	136:17	0:0	6	0
water	136:18	0:0	6	;
cond	136:20	136:24	5	x < fft_len
water	136:20	0:0	6	x
op	136:22	0:0	6	<
water	136:24	0:0	6	fft_len
forexpr	136:33	136:34	5	x ++
water	136:33	0:0	6	x
op	136:34	0:0	6	++
stmts	136:38	139:8	5	
water	136:38	0:0	6	{
water	137:12	0:0	6	s
op	137:13	0:0	6	->
water	137:15	0:0	6	coeff_sort
op	137:25	0:0	6	[
water	137:26	0:0	6	x
op	137:27	0:0	6	]
op	137:28	0:0	6	.
water	137:29	0:0	6	index
op	137:35	0:0	6	=
water	137:37	0:0	6	x
water	137:38	0:0	6	;
water	138:12	0:0	6	s
op	138:13	0:0	6	->
water	138:15	0:0	6	coeff_sort
op	138:25	0:0	6	[
water	138:26	0:0	6	x
op	138:27	0:0	6	]
op	138:28	0:0	6	.
water	138:29	0:0	6	value
op	138:35	0:0	6	=
water	138:37	0:0	6	s
op	138:38	0:0	6	->
water	138:40	0:0	6	fft_data
op	138:48	0:0	6	[
water	138:49	0:0	6	x
op	138:50	0:0	6	]
op	138:51	0:0	6	.
water	138:52	0:0	6	re
water	138:54	0:0	6	;
water	139:8	0:0	6	}
call	140:8	140:71	4	AV_QSORT
arg	140:17	140:30	5	s->coeff_sort
water	140:17	0:0	6	s
op	140:18	0:0	6	->
water	140:20	0:0	6	coeff_sort
arg	140:32	140:39	5	fft_len
water	140:32	0:0	6	fft_len
arg	140:41	140:52	5	SparseCoeff
water	140:41	0:0	6	SparseCoeff
arg	140:54	140:71	5	qsort_sparsecoeff
water	140:54	0:0	6	qsort_sparsecoeff
water	140:72	0:0	4	;
for	141:8	142:50	4	(x = 0 ;x < fft_len;x ++)
forinit	141:13	141:18	5	x = 0 ;
water	141:13	0:0	6	x
op	141:15	0:0	6	=
water	141:17	0:0	6	0
water	141:18	0:0	6	;
cond	141:20	141:24	5	x < fft_len
water	141:20	0:0	6	x
op	141:22	0:0	6	<
water	141:24	0:0	6	fft_len
forexpr	141:33	141:34	5	x ++
water	141:33	0:0	6	x
op	141:34	0:0	6	++
stmts	142:12	142:50	5	
water	142:12	0:0	6	total
op	142:18	0:0	6	+=
call	142:21	142:49	6	fabsf
arg	142:27	142:49	7	s->coeff_sort[x].value
water	142:27	0:0	8	s
op	142:28	0:0	8	->
water	142:30	0:0	8	coeff_sort
op	142:40	0:0	8	[
water	142:41	0:0	8	x
op	142:42	0:0	8	]
op	142:43	0:0	8	.
water	142:44	0:0	8	value
water	142:50	0:0	6	;
for	143:8	157:8	4	(x = 0 ;x < fft_len;x ++)
forinit	143:13	143:18	5	x = 0 ;
water	143:13	0:0	6	x
op	143:15	0:0	6	=
water	143:17	0:0	6	0
water	143:18	0:0	6	;
cond	143:20	143:24	5	x < fft_len
water	143:20	0:0	6	x
op	143:22	0:0	6	<
water	143:24	0:0	6	fft_len
forexpr	143:33	143:34	5	x ++
water	143:33	0:0	6	x
op	143:34	0:0	6	++
stmts	143:38	157:8	5	
water	143:38	0:0	6	{
water	144:12	0:0	6	partial
op	144:20	0:0	6	+=
call	144:23	144:51	6	fabsf
arg	144:29	144:51	7	s->coeff_sort[x].value
water	144:29	0:0	8	s
op	144:30	0:0	8	->
water	144:32	0:0	8	coeff_sort
op	144:42	0:0	8	[
water	144:43	0:0	8	x
op	144:44	0:0	8	]
op	144:45	0:0	8	.
water	144:46	0:0	8	value
water	144:52	0:0	6	;
if	145:12	156:12	6	(partial > total * s -> coeffclamp * COEFF_CLAMP)
cond	145:16	145:50	7	partial > total * s -> coeffclamp * COEFF_CLAMP
water	145:16	0:0	8	partial
op	145:24	0:0	8	>
water	145:26	0:0	8	total
op	145:32	0:0	8	*
water	145:34	0:0	8	s
op	145:35	0:0	8	->
water	145:37	0:0	8	coeffclamp
op	145:48	0:0	8	*
water	145:50	0:0	8	COEFF_CLAMP
stmts	145:63	156:12	7	
water	145:63	0:0	8	{
water	146:16	0:0	8	s
op	146:17	0:0	8	->
water	146:19	0:0	8	coeffs_len
op	146:29	0:0	8	[
water	146:30	0:0	8	k
op	146:31	0:0	8	]
op	146:33	0:0	8	=
water	146:35	0:0	8	fft_len
op	146:43	0:0	8	-
water	146:45	0:0	8	x
water	146:46	0:0	8	;
water	147:16	0:0	8	num_coeffs
op	147:27	0:0	8	+=
water	147:30	0:0	8	s
op	147:31	0:0	8	->
water	147:33	0:0	8	coeffs_len
op	147:43	0:0	8	[
water	147:44	0:0	8	k
op	147:45	0:0	8	]
water	147:46	0:0	8	;
water	148:16	0:0	8	s
op	148:17	0:0	8	->
water	148:19	0:0	8	coeffs
op	148:25	0:0	8	[
water	148:26	0:0	8	k
op	148:27	0:0	8	]
op	148:29	0:0	8	=
call	148:31	148:86	8	av_malloc_array
arg	148:47	148:63	9	s->coeffs_len[k]
water	148:47	0:0	10	s
op	148:48	0:0	10	->
water	148:50	0:0	10	coeffs_len
op	148:60	0:0	10	[
water	148:61	0:0	10	k
op	148:62	0:0	10	]
arg	148:65	148:86	9	sizeof(*s->coeffs[k])
op	148:65	0:0	10	sizeof
water	148:71	0:0	10	(
op	148:72	0:0	10	*
water	148:73	0:0	10	s
op	148:74	0:0	10	->
water	148:76	0:0	10	coeffs
op	148:82	0:0	10	[
water	148:83	0:0	10	k
op	148:84	0:0	10	]
water	148:85	0:0	10	)
water	148:87	0:0	8	;
if	149:16	152:16	8	(! s -> coeffs [ k ])
cond	149:20	149:32	9	! s -> coeffs [ k ]
op	149:20	0:0	10	!
water	149:21	0:0	10	s
op	149:22	0:0	10	->
water	149:24	0:0	10	coeffs
op	149:30	0:0	10	[
water	149:31	0:0	10	k
op	149:32	0:0	10	]
stmts	149:35	152:16	9	
water	149:35	0:0	10	{
water	150:20	0:0	10	ret
op	150:24	0:0	10	=
call	150:26	150:40	10	AVERROR
arg	150:34	150:40	11	ENOMEM
water	150:34	0:0	12	ENOMEM
water	150:41	0:0	10	;
goto	151:20	151:35	10	eval_error
water	151:25	0:0	11	eval_error
water	152:16	0:0	10	}
for	153:16	154:56	8	(y = 0 ;y < s -> coeffs_len [ k ];y ++)
forinit	153:21	153:26	9	y = 0 ;
water	153:21	0:0	10	y
op	153:23	0:0	10	=
water	153:25	0:0	10	0
water	153:26	0:0	10	;
cond	153:28	153:47	9	y < s -> coeffs_len [ k ]
water	153:28	0:0	10	y
op	153:30	0:0	10	<
water	153:32	0:0	10	s
op	153:33	0:0	10	->
water	153:35	0:0	10	coeffs_len
op	153:45	0:0	10	[
water	153:46	0:0	10	k
op	153:47	0:0	10	]
forexpr	153:50	153:51	9	y ++
water	153:50	0:0	10	y
op	153:51	0:0	10	++
stmts	154:20	154:56	9	
water	154:20	0:0	10	s
op	154:21	0:0	10	->
water	154:23	0:0	10	coeffs
op	154:29	0:0	10	[
water	154:30	0:0	10	k
op	154:31	0:0	10	]
op	154:32	0:0	10	[
water	154:33	0:0	10	y
op	154:34	0:0	10	]
op	154:36	0:0	10	=
water	154:38	0:0	10	s
op	154:39	0:0	10	->
water	154:41	0:0	10	coeff_sort
op	154:51	0:0	10	[
water	154:52	0:0	10	x
op	154:53	0:0	10	+
water	154:54	0:0	10	y
op	154:55	0:0	10	]
water	154:56	0:0	10	;
break	155:16	155:21	8	
water	156:12	0:0	8	}
water	157:8	0:0	6	}
water	158:4	0:0	4	}
call	159:4	159:31	2	av_expr_free
arg	159:17	159:31	3	fontcolor_expr
water	159:17	0:0	4	fontcolor_expr
water	159:32	0:0	2	;
call	160:4	160:28	2	av_expr_free
arg	160:17	160:28	3	volume_expr
water	160:17	0:0	4	volume_expr
water	160:29	0:0	2	;
call	161:4	161:29	2	av_expr_free
arg	161:17	161:29	3	tlength_expr
water	161:17	0:0	4	tlength_expr
water	161:30	0:0	2	;
water	162:4	0:0	2	end_time
op	162:13	0:0	2	=
call	162:15	162:35	2	av_gettime_relative
water	162:36	0:0	2	;
call	163:4	163:131	2	av_log
arg	163:11	163:14	3	ctx
water	163:11	0:0	4	ctx
arg	163:16	163:27	3	AV_LOG_INFO
water	163:16	0:0	4	AV_LOG_INFO
arg	163:29	163:80	3	"Elapsed time %.6f s (fft_len=%u, num_coeffs=%u)\n"
water	163:29	0:0	4	"Elapsed time %.6f s (fft_len=%u, num_coeffs=%u)\n"
arg	163:82	163:110	3	1e-6*(end_time-start_time)
water	163:82	0:0	4	1
water	163:83	0:0	4	e
op	163:84	0:0	4	-
water	163:85	0:0	4	6
op	163:87	0:0	4	*
water	163:89	0:0	4	(
water	163:90	0:0	4	end_time
op	163:98	0:0	4	-
water	163:99	0:0	4	start_time
water	163:109	0:0	4	)
arg	163:112	163:119	3	fft_len
water	163:112	0:0	4	fft_len
arg	163:121	163:131	3	num_coeffs
water	163:121	0:0	4	num_coeffs
water	163:132	0:0	2	;
water	164:4	0:0	2	outlink
op	164:11	0:0	2	->
water	164:13	0:0	2	w
op	164:15	0:0	2	=
water	164:17	0:0	2	video_width
water	164:28	0:0	2	;
water	165:4	0:0	2	outlink
op	165:11	0:0	2	->
water	165:13	0:0	2	h
op	165:15	0:0	2	=
water	165:17	0:0	2	video_height
water	165:29	0:0	2	;
water	166:4	0:0	2	s
op	166:5	0:0	2	->
water	166:7	0:0	2	req_fullfilled
op	166:22	0:0	2	=
water	166:24	0:0	2	0
water	166:25	0:0	2	;
water	167:4	0:0	2	s
op	167:5	0:0	2	->
water	167:7	0:0	2	spectogram_index
op	167:24	0:0	2	=
water	167:26	0:0	2	0
water	167:27	0:0	2	;
water	168:4	0:0	2	s
op	168:5	0:0	2	->
water	168:7	0:0	2	frame_count
op	168:19	0:0	2	=
water	168:21	0:0	2	0
water	168:22	0:0	2	;
water	169:4	0:0	2	s
op	169:5	0:0	2	->
water	169:7	0:0	2	spectogram_count
op	169:24	0:0	2	=
water	169:26	0:0	2	0
water	169:27	0:0	2	;
water	170:4	0:0	2	s
op	170:5	0:0	2	->
water	170:7	0:0	2	remaining_fill
op	170:22	0:0	2	=
water	170:24	0:0	2	fft_len
op	170:32	0:0	2	>>
water	170:35	0:0	2	1
water	170:36	0:0	2	;
call	171:4	171:57	2	memset
arg	171:11	171:22	3	s->fft_data
water	171:11	0:0	4	s
op	171:12	0:0	4	->
water	171:14	0:0	4	fft_data
arg	171:24	171:25	3	0
water	171:24	0:0	4	0
arg	171:27	171:57	3	fft_len*sizeof(*s->fft_data)
water	171:27	0:0	4	fft_len
op	171:35	0:0	4	*
op	171:37	0:0	4	sizeof
water	171:43	0:0	4	(
op	171:44	0:0	4	*
water	171:45	0:0	4	s
op	171:46	0:0	4	->
water	171:48	0:0	4	fft_data
water	171:56	0:0	4	)
water	171:58	0:0	2	;
water	172:4	0:0	2	s
op	172:5	0:0	2	->
water	172:7	0:0	2	outpicref
op	172:17	0:0	2	=
call	172:19	172:70	2	ff_get_video_buffer
arg	172:39	172:46	3	outlink
water	172:39	0:0	4	outlink
arg	172:48	172:58	3	outlink->w
water	172:48	0:0	4	outlink
op	172:55	0:0	4	->
water	172:57	0:0	4	w
arg	172:60	172:70	3	outlink->h
water	172:60	0:0	4	outlink
op	172:67	0:0	4	->
water	172:69	0:0	4	h
water	172:71	0:0	2	;
if	173:4	174:30	2	(! s -> outpicref)
cond	173:8	173:12	3	! s -> outpicref
op	173:8	0:0	4	!
water	173:9	0:0	4	s
op	173:10	0:0	4	->
water	173:12	0:0	4	outpicref
stmts	174:8	174:30	3	
return	174:8	174:30	4	AVERROR(ENOMEM)
call	174:15	174:29	5	AVERROR
arg	174:23	174:29	6	ENOMEM
water	174:23	0:0	7	ENOMEM
water	175:4	0:0	2	s
op	175:5	0:0	2	->
water	175:7	0:0	2	spectogram
op	175:18	0:0	2	=
call	175:20	175:74	2	av_calloc
arg	175:30	175:47	3	spectogram_height
water	175:30	0:0	4	spectogram_height
arg	175:49	175:74	3	s->outpicref->linesize[0]
water	175:49	0:0	4	s
op	175:50	0:0	4	->
water	175:52	0:0	4	outpicref
op	175:61	0:0	4	->
water	175:63	0:0	4	linesize
op	175:71	0:0	4	[
water	175:72	0:0	4	0
op	175:73	0:0	4	]
water	175:75	0:0	2	;
if	176:4	177:30	2	(! s -> spectogram)
cond	176:8	176:12	3	! s -> spectogram
op	176:8	0:0	4	!
water	176:9	0:0	4	s
op	176:10	0:0	4	->
water	176:12	0:0	4	spectogram
stmts	177:8	177:30	3	
return	177:8	177:30	4	AVERROR(ENOMEM)
call	177:15	177:29	5	AVERROR
arg	177:23	177:29	6	ENOMEM
water	177:23	0:0	7	ENOMEM
water	178:4	0:0	2	outlink
op	178:11	0:0	2	->
water	178:13	0:0	2	sample_aspect_ratio
op	178:33	0:0	2	=
call	178:35	178:49	2	av_make_q
arg	178:45	178:46	3	1
water	178:45	0:0	4	1
arg	178:48	178:49	3	1
water	178:48	0:0	4	1
water	178:50	0:0	2	;
water	179:4	0:0	2	outlink
op	179:11	0:0	2	->
water	179:13	0:0	2	time_base
op	179:23	0:0	2	=
call	179:25	179:44	2	av_make_q
arg	179:35	179:36	3	1
water	179:35	0:0	4	1
arg	179:38	179:44	3	s->fps
water	179:38	0:0	4	s
op	179:39	0:0	4	->
water	179:41	0:0	4	fps
water	179:45	0:0	2	;
water	180:4	0:0	2	outlink
op	180:11	0:0	2	->
water	180:13	0:0	2	frame_rate
op	180:24	0:0	2	=
call	180:26	180:45	2	av_make_q
arg	180:36	180:42	3	s->fps
water	180:36	0:0	4	s
op	180:37	0:0	4	->
water	180:39	0:0	4	fps
arg	180:44	180:45	3	1
water	180:44	0:0	4	1
water	180:46	0:0	2	;
return	181:4	181:12	2	0
water	181:11	0:0	3	0
label	182:0	182:10	2	eval_error :
call	183:4	183:31	2	av_expr_free
arg	183:17	183:31	3	fontcolor_expr
water	183:17	0:0	4	fontcolor_expr
water	183:32	0:0	2	;
call	184:4	184:28	2	av_expr_free
arg	184:17	184:28	3	volume_expr
water	184:17	0:0	4	volume_expr
water	184:29	0:0	2	;
call	185:4	185:29	2	av_expr_free
arg	185:17	185:29	3	tlength_expr
water	185:17	0:0	4	tlength_expr
water	185:30	0:0	2	;
return	186:4	186:14	2	ret
water	186:11	0:0	3	ret
