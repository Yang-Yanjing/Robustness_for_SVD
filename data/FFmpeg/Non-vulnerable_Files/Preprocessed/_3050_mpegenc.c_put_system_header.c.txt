func	1:0	129:0	0	static int	put_system_header
params	1:28	0:0	1	
param	1:29	1:49	2	AVFormatContext *	ctx
param	1:51	1:63	2	uint8_t *	buf
param	2:29	2:51	2	int	only_for_stream_id
stmnts	0:0	128:15	1	
decl	4:4	4:38	2	MpegMuxContext	*s
op	4:22	0:0	2	=
water	4:24	0:0	2	ctx
op	4:27	0:0	2	->
water	4:29	0:0	2	priv_data
decl	5:4	5:41	2	int	size
water	5:12	0:0	2	,
decl	5:4	5:41	2	int	i
water	5:15	0:0	2	,
decl	5:4	5:41	2	int	private_stream_coded
water	5:37	0:0	2	,
decl	5:4	5:41	2	int	id
decl	6:4	6:20	2	PutBitContext	pb
call	7:4	7:31	2	init_put_bits
arg	7:18	7:21	3	&pb
op	7:18	0:0	4	&
water	7:19	0:0	4	pb
arg	7:23	7:26	3	buf
water	7:23	0:0	4	buf
arg	7:28	7:31	3	128
water	7:28	0:0	4	128
water	7:32	0:0	2	;
call	8:4	8:44	2	put_bits32
arg	8:15	8:18	3	&pb
op	8:15	0:0	4	&
water	8:16	0:0	4	pb
arg	8:20	8:44	3	SYSTEM_HEADER_START_CODE
water	8:20	0:0	4	SYSTEM_HEADER_START_CODE
water	8:45	0:0	2	;
call	9:4	9:23	2	put_bits
arg	9:13	9:16	3	&pb
op	9:13	0:0	4	&
water	9:14	0:0	4	pb
arg	9:18	9:20	3	16
water	9:18	0:0	4	16
arg	9:22	9:23	3	0
water	9:22	0:0	4	0
water	9:24	0:0	2	;
call	10:4	10:22	2	put_bits
arg	10:13	10:16	3	&pb
op	10:13	0:0	4	&
water	10:14	0:0	4	pb
arg	10:18	10:19	3	1
water	10:18	0:0	4	1
arg	10:21	10:22	3	1
water	10:21	0:0	4	1
water	10:23	0:0	2	;
call	12:4	12:33	2	put_bits
arg	12:13	12:16	3	&pb
op	12:13	0:0	4	&
water	12:14	0:0	4	pb
arg	12:18	12:20	3	22
water	12:18	0:0	4	22
arg	12:22	12:33	3	s->mux_rate
water	12:22	0:0	4	s
op	12:23	0:0	4	->
water	12:25	0:0	4	mux_rate
water	12:34	0:0	2	;
call	13:4	13:22	2	put_bits
arg	13:13	13:16	3	&pb
op	13:13	0:0	4	&
water	13:14	0:0	4	pb
arg	13:18	13:19	3	1
water	13:18	0:0	4	1
arg	13:21	13:22	3	1
water	13:21	0:0	4	1
water	13:23	0:0	2	;
if	14:4	18:4	2	(s -> is_vcd && only_for_stream_id == VIDEO_ID)
cond	14:8	14:43	3	s -> is_vcd && only_for_stream_id == VIDEO_ID
water	14:8	0:0	4	s
op	14:9	0:0	4	->
water	14:11	0:0	4	is_vcd
op	14:18	0:0	4	&&
water	14:21	0:0	4	only_for_stream_id
op	14:40	0:0	4	==
water	14:43	0:0	4	VIDEO_ID
stmts	14:53	18:4	3	
water	14:53	0:0	4	{
call	17:8	17:26	4	put_bits
arg	17:17	17:20	5	&pb
op	17:17	0:0	6	&
water	17:18	0:0	6	pb
arg	17:22	17:23	5	6
water	17:22	0:0	6	6
arg	17:25	17:26	5	0
water	17:25	0:0	6	0
water	17:27	0:0	4	;
water	18:4	0:0	4	}
else	18:6	19:40	2
stmts	19:8	19:40	3	
call	19:8	19:39	4	put_bits
arg	19:17	19:20	5	&pb
op	19:17	0:0	6	&
water	19:18	0:0	6	pb
arg	19:22	19:23	5	6
water	19:22	0:0	6	6
arg	19:25	19:39	5	s->audio_bound
water	19:25	0:0	6	s
op	19:26	0:0	6	->
water	19:28	0:0	6	audio_bound
water	19:40	0:0	4	;
if	20:4	24:4	2	(s -> is_vcd)
cond	20:8	20:11	3	s -> is_vcd
water	20:8	0:0	4	s
op	20:9	0:0	4	->
water	20:11	0:0	4	is_vcd
stmts	20:19	24:4	3	
water	20:19	0:0	4	{
call	22:8	22:26	4	put_bits
arg	22:17	22:20	5	&pb
op	22:17	0:0	6	&
water	22:18	0:0	6	pb
arg	22:22	22:23	5	1
water	22:22	0:0	6	1
arg	22:25	22:26	5	0
water	22:25	0:0	6	0
water	22:27	0:0	4	;
call	23:8	23:26	4	put_bits
arg	23:17	23:20	5	&pb
op	23:17	0:0	6	&
water	23:18	0:0	6	pb
arg	23:22	23:23	5	1
water	23:22	0:0	6	1
arg	23:25	23:26	5	1
water	23:25	0:0	6	1
water	23:27	0:0	4	;
water	24:4	0:0	4	}
else	24:6	27:4	2
stmts	24:11	27:4	3	
water	24:11	0:0	4	{
call	25:8	25:26	4	put_bits
arg	25:17	25:20	5	&pb
op	25:17	0:0	6	&
water	25:18	0:0	6	pb
arg	25:22	25:23	5	1
water	25:22	0:0	6	1
arg	25:25	25:26	5	0
water	25:25	0:0	6	0
water	25:27	0:0	4	;
call	26:8	26:26	4	put_bits
arg	26:17	26:20	5	&pb
op	26:17	0:0	6	&
water	26:18	0:0	6	pb
arg	26:22	26:23	5	1
water	26:22	0:0	6	1
arg	26:25	26:26	5	0
water	26:25	0:0	6	0
water	26:27	0:0	4	;
water	27:4	0:0	4	}
if	28:4	32:4	2	(s -> is_vcd || s -> is_dvd)
cond	28:8	28:24	3	s -> is_vcd || s -> is_dvd
water	28:8	0:0	4	s
op	28:9	0:0	4	->
water	28:11	0:0	4	is_vcd
op	28:18	0:0	4	||
water	28:21	0:0	4	s
op	28:22	0:0	4	->
water	28:24	0:0	4	is_dvd
stmts	28:32	32:4	3	
water	28:32	0:0	4	{
call	30:8	30:26	4	put_bits
arg	30:17	30:20	5	&pb
op	30:17	0:0	6	&
water	30:18	0:0	6	pb
arg	30:22	30:23	5	1
water	30:22	0:0	6	1
arg	30:25	30:26	5	1
water	30:25	0:0	6	1
water	30:27	0:0	4	;
call	31:8	31:26	4	put_bits
arg	31:17	31:20	5	&pb
op	31:17	0:0	6	&
water	31:18	0:0	6	pb
arg	31:22	31:23	5	1
water	31:22	0:0	6	1
arg	31:25	31:26	5	1
water	31:25	0:0	6	1
water	31:27	0:0	4	;
water	32:4	0:0	4	}
else	32:6	35:4	2
stmts	32:11	35:4	3	
water	32:11	0:0	4	{
call	33:8	33:26	4	put_bits
arg	33:17	33:20	5	&pb
op	33:17	0:0	6	&
water	33:18	0:0	6	pb
arg	33:22	33:23	5	1
water	33:22	0:0	6	1
arg	33:25	33:26	5	0
water	33:25	0:0	6	0
water	33:27	0:0	4	;
call	34:8	34:26	4	put_bits
arg	34:17	34:20	5	&pb
op	34:17	0:0	6	&
water	34:18	0:0	6	pb
arg	34:22	34:23	5	1
water	34:22	0:0	6	1
arg	34:25	34:26	5	0
water	34:25	0:0	6	0
water	34:27	0:0	4	;
water	35:4	0:0	4	}
call	36:4	36:22	2	put_bits
arg	36:13	36:16	3	&pb
op	36:13	0:0	4	&
water	36:14	0:0	4	pb
arg	36:18	36:19	3	1
water	36:18	0:0	4	1
arg	36:21	36:22	3	1
water	36:21	0:0	4	1
water	36:23	0:0	2	;
if	37:4	41:4	2	(s -> is_vcd && ( only_for_stream_id & 0 xe0 ) == AUDIO_ID)
cond	37:8	37:52	3	s -> is_vcd && ( only_for_stream_id & 0 xe0 ) == AUDIO_ID
water	37:8	0:0	4	s
op	37:9	0:0	4	->
water	37:11	0:0	4	is_vcd
op	37:18	0:0	4	&&
water	37:21	0:0	4	(
water	37:22	0:0	4	only_for_stream_id
op	37:41	0:0	4	&
water	37:43	0:0	4	0
water	37:44	0:0	4	xe0
water	37:47	0:0	4	)
op	37:49	0:0	4	==
water	37:52	0:0	4	AUDIO_ID
stmts	37:62	41:4	3	
water	37:62	0:0	4	{
call	40:8	40:26	4	put_bits
arg	40:17	40:20	5	&pb
op	40:17	0:0	6	&
water	40:18	0:0	6	pb
arg	40:22	40:23	5	5
water	40:22	0:0	6	5
arg	40:25	40:26	5	0
water	40:25	0:0	6	0
water	40:27	0:0	4	;
water	41:4	0:0	4	}
else	41:6	42:40	2
stmts	42:8	42:40	3	
call	42:8	42:39	4	put_bits
arg	42:17	42:20	5	&pb
op	42:17	0:0	6	&
water	42:18	0:0	6	pb
arg	42:22	42:23	5	5
water	42:22	0:0	6	5
arg	42:25	42:39	5	s->video_bound
water	42:25	0:0	6	s
op	42:26	0:0	6	->
water	42:28	0:0	6	video_bound
water	42:40	0:0	4	;
if	43:4	46:4	2	(s -> is_dvd)
cond	43:8	43:11	3	s -> is_dvd
water	43:8	0:0	4	s
op	43:9	0:0	4	->
water	43:11	0:0	4	is_dvd
stmts	43:19	46:4	3	
water	43:19	0:0	4	{
call	44:8	44:26	4	put_bits
arg	44:17	44:20	5	&pb
op	44:17	0:0	6	&
water	44:18	0:0	6	pb
arg	44:22	44:23	5	1
water	44:22	0:0	6	1
arg	44:25	44:26	5	0
water	44:25	0:0	6	0
water	44:27	0:0	4	;
call	45:8	45:29	4	put_bits
arg	45:17	45:20	5	&pb
op	45:17	0:0	6	&
water	45:18	0:0	6	pb
arg	45:22	45:23	5	7
water	45:22	0:0	6	7
arg	45:25	45:29	5	0x7f
water	45:25	0:0	6	0
water	45:26	0:0	6	x7f
water	45:30	0:0	4	;
water	46:4	0:0	4	}
else	46:6	47:30	2
stmts	47:8	47:30	3	
call	47:8	47:29	4	put_bits
arg	47:17	47:20	5	&pb
op	47:17	0:0	6	&
water	47:18	0:0	6	pb
arg	47:22	47:23	5	8
water	47:22	0:0	6	8
arg	47:25	47:29	5	0xff
water	47:25	0:0	6	0
water	47:26	0:0	6	xff
water	47:30	0:0	4	;
if	53:4	92:4	2	(s -> is_dvd)
cond	53:8	53:11	3	s -> is_dvd
water	53:8	0:0	4	s
op	53:9	0:0	4	->
water	53:11	0:0	4	is_dvd
stmts	53:19	92:4	3	
water	53:19	0:0	4	{
decl	54:8	54:31	4	int	P_STD_max_video
op	54:28	0:0	4	=
water	54:30	0:0	4	0
decl	55:8	55:36	4	int	P_STD_max_mpeg_audio
op	55:33	0:0	4	=
water	55:35	0:0	4	0
decl	56:8	56:34	4	int	P_STD_max_mpeg_PS1
op	56:31	0:0	4	=
water	56:33	0:0	4	0
for	57:8	69:8	4	(i = 0 ;i < ctx -> nb_streams;i ++)
forinit	57:13	57:18	5	i = 0 ;
water	57:13	0:0	6	i
op	57:15	0:0	6	=
water	57:17	0:0	6	0
water	57:18	0:0	6	;
cond	57:20	57:29	5	i < ctx -> nb_streams
water	57:20	0:0	6	i
op	57:22	0:0	6	<
water	57:24	0:0	6	ctx
op	57:27	0:0	6	->
water	57:29	0:0	6	nb_streams
forexpr	57:41	57:42	5	i ++
water	57:41	0:0	6	i
op	57:42	0:0	6	++
stmts	57:46	69:8	5	
water	57:46	0:0	6	{
decl	58:12	58:59	6	StreamInfo	*stream
op	58:31	0:0	6	=
water	58:33	0:0	6	ctx
op	58:36	0:0	6	->
water	58:38	0:0	6	streams
op	58:45	0:0	6	[
water	58:46	0:0	6	i
op	58:47	0:0	6	]
op	58:48	0:0	6	->
water	58:50	0:0	6	priv_data
water	59:12	0:0	6	id
op	59:15	0:0	6	=
water	59:17	0:0	6	stream
op	59:23	0:0	6	->
water	59:25	0:0	6	id
water	59:27	0:0	6	;
if	60:12	62:12	6	(id == 0 xbd && stream -> max_buffer_size > P_STD_max_mpeg_PS1)
cond	60:16	60:56	7	id == 0 xbd && stream -> max_buffer_size > P_STD_max_mpeg_PS1
water	60:16	0:0	8	id
op	60:19	0:0	8	==
water	60:22	0:0	8	0
water	60:23	0:0	8	xbd
op	60:27	0:0	8	&&
water	60:30	0:0	8	stream
op	60:36	0:0	8	->
water	60:38	0:0	8	max_buffer_size
op	60:54	0:0	8	>
water	60:56	0:0	8	P_STD_max_mpeg_PS1
stmts	60:76	62:12	7	
water	60:76	0:0	8	{
water	61:16	0:0	8	P_STD_max_mpeg_PS1
op	61:35	0:0	8	=
water	61:37	0:0	8	stream
op	61:43	0:0	8	->
water	61:45	0:0	8	max_buffer_size
water	61:60	0:0	8	;
water	62:12	0:0	8	}
else	62:14	65:12	6
stmts	62:19	65:12	7	
if	62:19	65:12	8	(id >= 0 xc0 && id <= 0 xc7 && stream -> max_buffer_size > P_STD_max_mpeg_audio)
cond	62:23	63:49	9	id >= 0 xc0 && id <= 0 xc7 && stream -> max_buffer_size > P_STD_max_mpeg_audio
water	62:23	0:0	10	id
op	62:26	0:0	10	>=
water	62:29	0:0	10	0
water	62:30	0:0	10	xc0
op	62:34	0:0	10	&&
water	62:37	0:0	10	id
op	62:40	0:0	10	<=
water	62:43	0:0	10	0
water	62:44	0:0	10	xc7
op	62:48	0:0	10	&&
water	63:23	0:0	10	stream
op	63:29	0:0	10	->
water	63:31	0:0	10	max_buffer_size
op	63:47	0:0	10	>
water	63:49	0:0	10	P_STD_max_mpeg_audio
stmts	63:71	65:12	9	
water	63:71	0:0	10	{
water	64:16	0:0	10	P_STD_max_mpeg_audio
op	64:37	0:0	10	=
water	64:39	0:0	10	stream
op	64:45	0:0	10	->
water	64:47	0:0	10	max_buffer_size
water	64:62	0:0	10	;
water	65:12	0:0	10	}
else	65:14	68:12	6
stmts	65:19	68:12	7	
if	65:19	68:12	8	(id == 0 xe0 && stream -> max_buffer_size > P_STD_max_video)
cond	65:23	66:49	9	id == 0 xe0 && stream -> max_buffer_size > P_STD_max_video
water	65:23	0:0	10	id
op	65:26	0:0	10	==
water	65:29	0:0	10	0
water	65:30	0:0	10	xe0
op	65:34	0:0	10	&&
water	66:23	0:0	10	stream
op	66:29	0:0	10	->
water	66:31	0:0	10	max_buffer_size
op	66:47	0:0	10	>
water	66:49	0:0	10	P_STD_max_video
stmts	66:66	68:12	9	
water	66:66	0:0	10	{
water	67:16	0:0	10	P_STD_max_video
op	67:32	0:0	10	=
water	67:34	0:0	10	stream
op	67:40	0:0	10	->
water	67:42	0:0	10	max_buffer_size
water	67:57	0:0	10	;
water	68:12	0:0	10	}
water	69:8	0:0	6	}
call	71:8	71:29	4	put_bits
arg	71:17	71:20	5	&pb
op	71:17	0:0	6	&
water	71:18	0:0	6	pb
arg	71:22	71:23	5	8
water	71:22	0:0	6	8
arg	71:25	71:29	5	0xb9
water	71:25	0:0	6	0
water	71:26	0:0	6	xb9
water	71:30	0:0	4	;
call	72:8	72:26	4	put_bits
arg	72:17	72:20	5	&pb
op	72:17	0:0	6	&
water	72:18	0:0	6	pb
arg	72:22	72:23	5	2
water	72:22	0:0	6	2
arg	72:25	72:26	5	3
water	72:25	0:0	6	3
water	72:27	0:0	4	;
call	73:8	73:26	4	put_bits
arg	73:17	73:20	5	&pb
op	73:17	0:0	6	&
water	73:18	0:0	6	pb
arg	73:22	73:23	5	1
water	73:22	0:0	6	1
arg	73:25	73:26	5	1
water	73:25	0:0	6	1
water	73:27	0:0	4	;
call	74:8	74:48	4	put_bits
arg	74:17	74:20	5	&pb
op	74:17	0:0	6	&
water	74:18	0:0	6	pb
arg	74:22	74:24	5	13
water	74:22	0:0	6	13
arg	74:26	74:48	5	P_STD_max_video/1024
water	74:26	0:0	6	P_STD_max_video
op	74:42	0:0	6	/
water	74:44	0:0	6	1024
water	74:49	0:0	4	;
if	76:8	77:39	4	(P_STD_max_mpeg_audio == 0)
cond	76:12	76:36	5	P_STD_max_mpeg_audio == 0
water	76:12	0:0	6	P_STD_max_mpeg_audio
op	76:33	0:0	6	==
water	76:36	0:0	6	0
stmts	77:12	77:39	5	
water	77:12	0:0	6	P_STD_max_mpeg_audio
op	77:33	0:0	6	=
water	77:35	0:0	6	4096
water	77:39	0:0	6	;
call	78:8	78:29	4	put_bits
arg	78:17	78:20	5	&pb
op	78:17	0:0	6	&
water	78:18	0:0	6	pb
arg	78:22	78:23	5	8
water	78:22	0:0	6	8
arg	78:25	78:29	5	0xb8
water	78:25	0:0	6	0
water	78:26	0:0	6	xb8
water	78:30	0:0	4	;
call	79:8	79:26	4	put_bits
arg	79:17	79:20	5	&pb
op	79:17	0:0	6	&
water	79:18	0:0	6	pb
arg	79:22	79:23	5	2
water	79:22	0:0	6	2
arg	79:25	79:26	5	3
water	79:25	0:0	6	3
water	79:27	0:0	4	;
call	80:8	80:26	4	put_bits
arg	80:17	80:20	5	&pb
op	80:17	0:0	6	&
water	80:18	0:0	6	pb
arg	80:22	80:23	5	1
water	80:22	0:0	6	1
arg	80:25	80:26	5	0
water	80:25	0:0	6	0
water	80:27	0:0	4	;
call	81:8	81:52	4	put_bits
arg	81:17	81:20	5	&pb
op	81:17	0:0	6	&
water	81:18	0:0	6	pb
arg	81:22	81:24	5	13
water	81:22	0:0	6	13
arg	81:26	81:52	5	P_STD_max_mpeg_audio/128
water	81:26	0:0	6	P_STD_max_mpeg_audio
op	81:47	0:0	6	/
water	81:49	0:0	6	128
water	81:53	0:0	4	;
call	83:8	83:29	4	put_bits
arg	83:17	83:20	5	&pb
op	83:17	0:0	6	&
water	83:18	0:0	6	pb
arg	83:22	83:23	5	8
water	83:22	0:0	6	8
arg	83:25	83:29	5	0xbd
water	83:25	0:0	6	0
water	83:26	0:0	6	xbd
water	83:30	0:0	4	;
call	84:8	84:26	4	put_bits
arg	84:17	84:20	5	&pb
op	84:17	0:0	6	&
water	84:18	0:0	6	pb
arg	84:22	84:23	5	2
water	84:22	0:0	6	2
arg	84:25	84:26	5	3
water	84:25	0:0	6	3
water	84:27	0:0	4	;
call	85:8	85:26	4	put_bits
arg	85:17	85:20	5	&pb
op	85:17	0:0	6	&
water	85:18	0:0	6	pb
arg	85:22	85:23	5	1
water	85:22	0:0	6	1
arg	85:25	85:26	5	0
water	85:25	0:0	6	0
water	85:27	0:0	4	;
call	86:8	86:50	4	put_bits
arg	86:17	86:20	5	&pb
op	86:17	0:0	6	&
water	86:18	0:0	6	pb
arg	86:22	86:24	5	13
water	86:22	0:0	6	13
arg	86:26	86:50	5	P_STD_max_mpeg_PS1/128
water	86:26	0:0	6	P_STD_max_mpeg_PS1
op	86:45	0:0	6	/
water	86:47	0:0	6	128
water	86:51	0:0	4	;
call	88:8	88:29	4	put_bits
arg	88:17	88:20	5	&pb
op	88:17	0:0	6	&
water	88:18	0:0	6	pb
arg	88:22	88:23	5	8
water	88:22	0:0	6	8
arg	88:25	88:29	5	0xbf
water	88:25	0:0	6	0
water	88:26	0:0	6	xbf
water	88:30	0:0	4	;
call	89:8	89:26	4	put_bits
arg	89:17	89:20	5	&pb
op	89:17	0:0	6	&
water	89:18	0:0	6	pb
arg	89:22	89:23	5	2
water	89:22	0:0	6	2
arg	89:25	89:26	5	3
water	89:25	0:0	6	3
water	89:27	0:0	4	;
call	90:8	90:26	4	put_bits
arg	90:17	90:20	5	&pb
op	90:17	0:0	6	&
water	90:18	0:0	6	pb
arg	90:22	90:23	5	1
water	90:22	0:0	6	1
arg	90:25	90:26	5	1
water	90:25	0:0	6	1
water	90:27	0:0	4	;
call	91:8	91:27	4	put_bits
arg	91:17	91:20	5	&pb
op	91:17	0:0	6	&
water	91:18	0:0	6	pb
arg	91:22	91:24	5	13
water	91:22	0:0	6	13
arg	91:26	91:27	5	2
water	91:26	0:0	6	2
water	91:28	0:0	4	;
water	92:4	0:0	4	}
else	92:6	123:4	2
stmts	92:11	123:4	3	
water	92:11	0:0	4	{
water	94:8	0:0	4	private_stream_coded
op	94:29	0:0	4	=
water	94:31	0:0	4	0
water	94:32	0:0	4	;
for	95:8	122:8	4	(i = 0 ;i < ctx -> nb_streams;i ++)
forinit	95:13	95:18	5	i = 0 ;
water	95:13	0:0	6	i
op	95:15	0:0	6	=
water	95:17	0:0	6	0
water	95:18	0:0	6	;
cond	95:20	95:29	5	i < ctx -> nb_streams
water	95:20	0:0	6	i
op	95:22	0:0	6	<
water	95:24	0:0	6	ctx
op	95:27	0:0	6	->
water	95:29	0:0	6	nb_streams
forexpr	95:41	95:42	5	i ++
water	95:41	0:0	6	i
op	95:42	0:0	6	++
stmts	95:46	122:8	5	
water	95:46	0:0	6	{
decl	96:12	96:59	6	StreamInfo	*stream
op	96:31	0:0	6	=
water	96:33	0:0	6	ctx
op	96:36	0:0	6	->
water	96:38	0:0	6	streams
op	96:45	0:0	6	[
water	96:46	0:0	6	i
op	96:47	0:0	6	]
op	96:48	0:0	6	->
water	96:50	0:0	6	priv_data
if	100:12	121:12	6	(! s -> is_vcd || stream -> id == only_for_stream_id || only_for_stream_id == 0)
cond	100:16	101:38	7	! s -> is_vcd || stream -> id == only_for_stream_id || only_for_stream_id == 0
op	100:16	0:0	8	!
water	100:17	0:0	8	s
op	100:18	0:0	8	->
water	100:20	0:0	8	is_vcd
op	100:27	0:0	8	||
water	100:30	0:0	8	stream
op	100:36	0:0	8	->
water	100:38	0:0	8	id
op	100:41	0:0	8	==
water	100:44	0:0	8	only_for_stream_id
op	100:63	0:0	8	||
water	101:16	0:0	8	only_for_stream_id
op	101:35	0:0	8	==
water	101:38	0:0	8	0
stmts	101:41	121:12	7	
water	101:41	0:0	8	{
water	102:16	0:0	8	id
op	102:19	0:0	8	=
water	102:21	0:0	8	stream
op	102:27	0:0	8	->
water	102:29	0:0	8	id
water	102:31	0:0	8	;
if	103:16	109:16	8	(id < 0 xc0)
cond	103:20	103:26	9	id < 0 xc0
water	103:20	0:0	10	id
op	103:23	0:0	10	<
water	103:25	0:0	10	0
water	103:26	0:0	10	xc0
stmts	103:31	109:16	9	
water	103:31	0:0	10	{
if	105:20	106:32	10	(private_stream_coded)
cond	105:24	105:24	11	private_stream_coded
water	105:24	0:0	12	private_stream_coded
stmts	106:24	106:32	11	
continue	106:24	106:32	12	
water	107:20	0:0	10	private_stream_coded
op	107:41	0:0	10	=
water	107:43	0:0	10	1
water	107:44	0:0	10	;
water	108:20	0:0	10	id
op	108:23	0:0	10	=
water	108:25	0:0	10	0
water	108:26	0:0	10	xbd
water	108:29	0:0	10	;
water	109:16	0:0	10	}
call	110:16	110:35	8	put_bits
arg	110:25	110:28	9	&pb
op	110:25	0:0	10	&
water	110:26	0:0	10	pb
arg	110:30	110:31	9	8
water	110:30	0:0	10	8
arg	110:33	110:35	9	id
water	110:33	0:0	10	id
water	110:36	0:0	8	;
call	111:16	111:34	8	put_bits
arg	111:25	111:28	9	&pb
op	111:25	0:0	10	&
water	111:26	0:0	10	pb
arg	111:30	111:31	9	2
water	111:30	0:0	10	2
arg	111:33	111:34	9	3
water	111:33	0:0	10	3
water	111:35	0:0	8	;
if	112:16	116:16	8	(id < 0 xe0)
cond	112:20	112:26	9	id < 0 xe0
water	112:20	0:0	10	id
op	112:23	0:0	10	<
water	112:25	0:0	10	0
water	112:26	0:0	10	xe0
stmts	112:31	116:16	9	
water	112:31	0:0	10	{
call	114:20	114:38	10	put_bits
arg	114:29	114:32	11	&pb
op	114:29	0:0	12	&
water	114:30	0:0	12	pb
arg	114:34	114:35	11	1
water	114:34	0:0	12	1
arg	114:37	114:38	11	0
water	114:37	0:0	12	0
water	114:39	0:0	10	;
call	115:20	115:67	10	put_bits
arg	115:29	115:32	11	&pb
op	115:29	0:0	12	&
water	115:30	0:0	12	pb
arg	115:34	115:36	11	13
water	115:34	0:0	12	13
arg	115:38	115:67	11	stream->max_buffer_size/128
water	115:38	0:0	12	stream
op	115:44	0:0	12	->
water	115:46	0:0	12	max_buffer_size
op	115:62	0:0	12	/
water	115:64	0:0	12	128
water	115:68	0:0	10	;
water	116:16	0:0	10	}
else	116:18	120:16	8
stmts	116:23	120:16	9	
water	116:23	0:0	10	{
call	118:20	118:38	10	put_bits
arg	118:29	118:32	11	&pb
op	118:29	0:0	12	&
water	118:30	0:0	12	pb
arg	118:34	118:35	11	1
water	118:34	0:0	12	1
arg	118:37	118:38	11	1
water	118:37	0:0	12	1
water	118:39	0:0	10	;
call	119:20	119:68	10	put_bits
arg	119:29	119:32	11	&pb
op	119:29	0:0	12	&
water	119:30	0:0	12	pb
arg	119:34	119:36	11	13
water	119:34	0:0	12	13
arg	119:38	119:68	11	stream->max_buffer_size/1024
water	119:38	0:0	12	stream
op	119:44	0:0	12	->
water	119:46	0:0	12	max_buffer_size
op	119:62	0:0	12	/
water	119:64	0:0	12	1024
water	119:69	0:0	10	;
water	120:16	0:0	10	}
water	121:12	0:0	8	}
water	122:8	0:0	6	}
water	123:4	0:0	4	}
call	124:4	124:22	2	flush_put_bits
arg	124:19	124:22	3	&pb
op	124:19	0:0	4	&
water	124:20	0:0	4	pb
water	124:23	0:0	2	;
water	125:4	0:0	2	size
op	125:9	0:0	2	=
call	125:11	125:27	2	put_bits_ptr
arg	125:24	125:27	3	&pb
op	125:24	0:0	4	&
water	125:25	0:0	4	pb
op	125:29	0:0	2	-
water	125:31	0:0	2	pb
op	125:33	0:0	2	.
water	125:34	0:0	2	buf
water	125:37	0:0	2	;
call	127:4	127:29	2	AV_WB16
arg	127:12	127:19	3	buf+4
water	127:12	0:0	4	buf
op	127:16	0:0	4	+
water	127:18	0:0	4	4
arg	127:21	127:29	3	size-6
water	127:21	0:0	4	size
op	127:26	0:0	4	-
water	127:28	0:0	4	6
water	127:30	0:0	2	;
return	128:4	128:15	2	size
water	128:11	0:0	3	size
