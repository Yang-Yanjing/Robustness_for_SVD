func	1:0	74:0	0	static int	decode_frame
params	1:23	0:0	1	
param	1:24	1:45	2	AVCodecContext *	avctx
param	1:47	1:57	2	void *	data
param	2:24	2:38	2	int *	got_frame
param	2:40	2:55	2	AVPacket *	avpkt
stmnts	0:0	73:19	1	
decl	4:4	4:25	2	AVFrame	*frame
op	4:19	0:0	2	=
water	4:21	0:0	2	data
decl	5:4	5:36	2	const uint8_t	*buf
op	5:23	0:0	2	=
water	5:25	0:0	2	avpkt
op	5:30	0:0	2	->
water	5:32	0:0	2	data
decl	6:4	6:36	2	int	buf_size
op	6:23	0:0	2	=
water	6:25	0:0	2	avpkt
op	6:30	0:0	2	->
water	6:32	0:0	2	size
water	7:4	0:0	2	EightBpsContext
op	7:20	0:0	2	*
water	7:22	0:0	2	const
water	7:28	0:0	2	c
op	7:30	0:0	2	=
water	7:32	0:0	2	avctx
op	7:37	0:0	2	->
water	7:39	0:0	2	priv_data
water	7:48	0:0	2	;
decl	8:4	8:38	2	const unsigned char	*encoded
op	8:33	0:0	2	=
water	8:35	0:0	2	buf
decl	9:4	9:38	2	unsigned char	*pixptr
water	9:25	0:0	2	,
decl	9:4	9:38	2	unsigned char	*pixptr_end
decl	10:4	10:39	2	unsigned int	height
op	10:24	0:0	2	=
water	10:26	0:0	2	avctx
op	10:31	0:0	2	->
water	10:33	0:0	2	height
decl	11:4	11:29	2	unsigned int	dlen
water	11:21	0:0	2	,
decl	11:4	11:29	2	unsigned int	p
water	11:24	0:0	2	,
decl	11:4	11:29	2	unsigned int	row
decl	12:4	12:37	2	const unsigned char	*lp
water	12:27	0:0	2	,
decl	12:4	12:37	2	const unsigned char	*dp
water	12:32	0:0	2	,
decl	12:4	12:37	2	const unsigned char	*ep
decl	13:4	13:23	2	unsigned char	count
decl	14:4	14:39	2	unsigned int	planes
op	14:28	0:0	2	=
water	14:30	0:0	2	c
op	14:31	0:0	2	->
water	14:33	0:0	2	planes
decl	15:4	15:41	2	unsigned char	*planemap
op	15:28	0:0	2	=
water	15:30	0:0	2	c
op	15:31	0:0	2	->
water	15:33	0:0	2	planemap
decl	16:4	16:11	2	int	ret
if	17:4	18:18	2	(( ret =ff_get_buffer (avctx ,frame ,0 ) ) < 0)
cond	17:8	17:49	3	( ret =ff_get_buffer (avctx ,frame ,0 ) ) < 0
water	17:8	0:0	4	(
water	17:9	0:0	4	ret
op	17:13	0:0	4	=
call	17:15	17:44	4	ff_get_buffer
arg	17:29	17:34	5	avctx
water	17:29	0:0	6	avctx
arg	17:36	17:41	5	frame
water	17:36	0:0	6	frame
arg	17:43	17:44	5	0
water	17:43	0:0	6	0
water	17:45	0:0	4	)
op	17:47	0:0	4	<
water	17:49	0:0	4	0
stmts	18:8	18:18	3	
return	18:8	18:18	4	ret
water	18:15	0:0	5	ret
water	19:4	0:0	2	ep
op	19:7	0:0	2	=
water	19:9	0:0	2	encoded
op	19:17	0:0	2	+
water	19:19	0:0	2	buf_size
water	19:27	0:0	2	;
water	21:4	0:0	2	dp
op	21:7	0:0	2	=
water	21:9	0:0	2	encoded
op	21:17	0:0	2	+
water	21:19	0:0	2	planes
op	21:26	0:0	2	*
water	21:28	0:0	2	(
water	21:29	0:0	2	height
op	21:36	0:0	2	<<
water	21:39	0:0	2	1
water	21:40	0:0	2	)
water	21:41	0:0	2	;
for	22:4	60:4	2	(p = 0 ;p < planes;p ++)
forinit	22:9	22:14	3	p = 0 ;
water	22:9	0:0	4	p
op	22:11	0:0	4	=
water	22:13	0:0	4	0
water	22:14	0:0	4	;
cond	22:16	22:20	3	p < planes
water	22:16	0:0	4	p
op	22:18	0:0	4	<
water	22:20	0:0	4	planes
forexpr	22:28	22:29	3	p ++
water	22:28	0:0	4	p
op	22:29	0:0	4	++
stmts	22:33	60:4	3	
water	22:33	0:0	4	{
water	24:8	0:0	4	lp
op	24:11	0:0	4	=
water	24:13	0:0	4	encoded
op	24:21	0:0	4	+
water	24:23	0:0	4	p
op	24:25	0:0	4	*
water	24:27	0:0	4	(
water	24:28	0:0	4	height
op	24:35	0:0	4	<<
water	24:38	0:0	4	1
water	24:39	0:0	4	)
water	24:40	0:0	4	;
for	26:8	59:8	4	(row = 0 ;row < height;row ++)
forinit	26:13	26:20	5	row = 0 ;
water	26:13	0:0	6	row
op	26:17	0:0	6	=
water	26:19	0:0	6	0
water	26:20	0:0	6	;
cond	26:22	26:28	5	row < height
water	26:22	0:0	6	row
op	26:26	0:0	6	<
water	26:28	0:0	6	height
forexpr	26:36	26:39	5	row ++
water	26:36	0:0	6	row
op	26:39	0:0	6	++
stmts	26:43	59:8	5	
water	26:43	0:0	6	{
water	27:12	0:0	6	pixptr
op	27:19	0:0	6	=
water	27:21	0:0	6	frame
op	27:26	0:0	6	->
water	27:28	0:0	6	data
op	27:32	0:0	6	[
water	27:33	0:0	6	0
op	27:34	0:0	6	]
op	27:36	0:0	6	+
water	27:38	0:0	6	row
op	27:42	0:0	6	*
water	27:44	0:0	6	frame
op	27:49	0:0	6	->
water	27:51	0:0	6	linesize
op	27:59	0:0	6	[
water	27:60	0:0	6	0
op	27:61	0:0	6	]
op	27:63	0:0	6	+
water	27:65	0:0	6	planemap
op	27:73	0:0	6	[
water	27:74	0:0	6	p
op	27:75	0:0	6	]
water	27:76	0:0	6	;
water	28:12	0:0	6	pixptr_end
op	28:23	0:0	6	=
water	28:25	0:0	6	pixptr
op	28:32	0:0	6	+
water	28:34	0:0	6	frame
op	28:39	0:0	6	->
water	28:41	0:0	6	linesize
op	28:49	0:0	6	[
water	28:50	0:0	6	0
op	28:51	0:0	6	]
water	28:52	0:0	6	;
if	29:12	30:42	6	(ep - lp < row * 2 + 2)
cond	29:16	29:36	7	ep - lp < row * 2 + 2
water	29:16	0:0	8	ep
op	29:19	0:0	8	-
water	29:21	0:0	8	lp
op	29:24	0:0	8	<
water	29:26	0:0	8	row
op	29:30	0:0	8	*
water	29:32	0:0	8	2
op	29:34	0:0	8	+
water	29:36	0:0	8	2
stmts	30:16	30:42	7	
return	30:16	30:42	8	AVERROR_INVALIDDATA
water	30:23	0:0	9	AVERROR_INVALIDDATA
water	31:12	0:0	6	dlen
op	31:17	0:0	6	=
call	31:19	31:69	6	av_be2ne16
arg	31:30	31:69	7	*(constunsignedshort*)(lp+row*2)
op	31:30	0:0	8	*
call	31:31	31:68	8	(constunsignedshort*)
arg	31:56	31:68	9	lp+row*2
water	31:56	0:0	10	lp
op	31:59	0:0	10	+
water	31:61	0:0	10	row
op	31:65	0:0	10	*
water	31:67	0:0	10	2
water	31:70	0:0	6	;
while	33:12	58:12	6	(dlen > 0)
cond	33:19	33:26	7	dlen > 0
water	33:19	0:0	8	dlen
op	33:24	0:0	8	>
water	33:26	0:0	8	0
stmts	33:29	58:12	7	
water	33:29	0:0	8	{
if	34:16	35:46	8	(ep - dp <= 1)
cond	34:20	34:31	9	ep - dp <= 1
water	34:20	0:0	10	ep
op	34:23	0:0	10	-
water	34:25	0:0	10	dp
op	34:28	0:0	10	<=
water	34:31	0:0	10	1
stmts	35:20	35:46	9	
return	35:20	35:46	10	AVERROR_INVALIDDATA
water	35:27	0:0	11	AVERROR_INVALIDDATA
if	36:16	47:16	8	(( count = * dp ++ ) <= 127)
cond	36:20	36:39	9	( count = * dp ++ ) <= 127
water	36:20	0:0	10	(
water	36:21	0:0	10	count
op	36:27	0:0	10	=
op	36:29	0:0	10	*
water	36:30	0:0	10	dp
op	36:32	0:0	10	++
water	36:34	0:0	10	)
op	36:36	0:0	10	<=
water	36:39	0:0	10	127
stmts	36:44	47:16	9	
water	36:44	0:0	10	{
water	37:20	0:0	10	count
op	37:25	0:0	10	++
water	37:27	0:0	10	;
water	38:20	0:0	10	dlen
op	38:25	0:0	10	-=
water	38:28	0:0	10	count
op	38:34	0:0	10	+
water	38:36	0:0	10	1
water	38:37	0:0	10	;
if	39:20	40:29	10	(pixptr_end - pixptr < count * planes)
cond	39:24	39:54	11	pixptr_end - pixptr < count * planes
water	39:24	0:0	12	pixptr_end
op	39:35	0:0	12	-
water	39:37	0:0	12	pixptr
op	39:44	0:0	12	<
water	39:46	0:0	12	count
op	39:52	0:0	12	*
water	39:54	0:0	12	planes
stmts	40:24	40:29	11	
break	40:24	40:29	12	
if	41:20	42:50	10	(ep - dp < count)
cond	41:24	41:34	11	ep - dp < count
water	41:24	0:0	12	ep
op	41:27	0:0	12	-
water	41:29	0:0	12	dp
op	41:32	0:0	12	<
water	41:34	0:0	12	count
stmts	42:24	42:50	11	
return	42:24	42:50	12	AVERROR_INVALIDDATA
water	42:31	0:0	13	AVERROR_INVALIDDATA
while	43:20	46:20	10	(count --)
cond	43:27	43:32	11	count --
water	43:27	0:0	12	count
op	43:32	0:0	12	--
stmts	43:36	46:20	11	
water	43:36	0:0	12	{
op	44:24	0:0	12	*
water	44:25	0:0	12	pixptr
op	44:32	0:0	12	=
op	44:34	0:0	12	*
water	44:35	0:0	12	dp
op	44:37	0:0	12	++
water	44:39	0:0	12	;
water	45:24	0:0	12	pixptr
op	45:31	0:0	12	+=
water	45:34	0:0	12	planes
water	45:40	0:0	12	;
water	46:20	0:0	12	}
water	47:16	0:0	10	}
else	47:18	57:16	8
stmts	47:23	57:16	9	
water	47:23	0:0	10	{
water	48:20	0:0	10	count
op	48:26	0:0	10	=
water	48:28	0:0	10	257
op	48:32	0:0	10	-
water	48:34	0:0	10	count
water	48:39	0:0	10	;
if	49:20	50:29	10	(pixptr_end - pixptr < count * planes)
cond	49:24	49:54	11	pixptr_end - pixptr < count * planes
water	49:24	0:0	12	pixptr_end
op	49:35	0:0	12	-
water	49:37	0:0	12	pixptr
op	49:44	0:0	12	<
water	49:46	0:0	12	count
op	49:52	0:0	12	*
water	49:54	0:0	12	planes
stmts	50:24	50:29	11	
break	50:24	50:29	12	
while	51:20	54:20	10	(count --)
cond	51:27	51:32	11	count --
water	51:27	0:0	12	count
op	51:32	0:0	12	--
stmts	51:36	54:20	11	
water	51:36	0:0	12	{
op	52:24	0:0	12	*
water	52:25	0:0	12	pixptr
op	52:32	0:0	12	=
op	52:34	0:0	12	*
water	52:35	0:0	12	dp
water	52:37	0:0	12	;
water	53:24	0:0	12	pixptr
op	53:31	0:0	12	+=
water	53:34	0:0	12	planes
water	53:40	0:0	12	;
water	54:20	0:0	12	}
water	55:20	0:0	10	dp
op	55:22	0:0	10	++
water	55:24	0:0	10	;
water	56:20	0:0	10	dlen
op	56:25	0:0	10	-=
water	56:28	0:0	10	2
water	56:29	0:0	10	;
water	57:16	0:0	10	}
water	58:12	0:0	8	}
water	59:8	0:0	6	}
water	60:4	0:0	4	}
if	61:4	70:4	2	(avctx -> bits_per_coded_sample <= 8)
cond	61:8	61:40	3	avctx -> bits_per_coded_sample <= 8
water	61:8	0:0	4	avctx
op	61:13	0:0	4	->
water	61:15	0:0	4	bits_per_coded_sample
op	61:37	0:0	4	<=
water	61:40	0:0	4	8
stmts	61:43	70:4	3	
water	61:43	0:0	4	{
decl	62:8	64:58	4	const uint8_t	*pal
op	62:27	0:0	4	=
call	62:29	64:57	5	av_packet_get_side_data
arg	62:53	62:58	6	avpkt
water	62:53	0:0	7	avpkt
arg	63:53	63:72	6	AV_PKT_DATA_PALETTE
water	63:53	0:0	7	AV_PKT_DATA_PALETTE
arg	64:53	64:57	6	NULL
water	64:53	0:0	7	NULL
if	65:8	68:8	4	(pal)
cond	65:12	65:12	5	pal
water	65:12	0:0	6	pal
stmts	65:17	68:8	5	
water	65:17	0:0	6	{
water	66:12	0:0	6	frame
op	66:17	0:0	6	->
water	66:19	0:0	6	palette_has_changed
op	66:39	0:0	6	=
water	66:41	0:0	6	1
water	66:42	0:0	6	;
call	67:12	67:46	6	memcpy
arg	67:19	67:25	7	c->pal
water	67:19	0:0	8	c
op	67:20	0:0	8	->
water	67:22	0:0	8	pal
arg	67:27	67:30	7	pal
water	67:27	0:0	8	pal
arg	67:32	67:46	7	AVPALETTE_SIZE
water	67:32	0:0	8	AVPALETTE_SIZE
water	67:47	0:0	6	;
water	68:8	0:0	6	}
call	69:8	69:54	4	memcpy
arg	69:16	69:30	5	frame->data[1]
water	69:16	0:0	6	frame
op	69:21	0:0	6	->
water	69:23	0:0	6	data
op	69:27	0:0	6	[
water	69:28	0:0	6	1
op	69:29	0:0	6	]
arg	69:32	69:38	5	c->pal
water	69:32	0:0	6	c
op	69:33	0:0	6	->
water	69:35	0:0	6	pal
arg	69:40	69:54	5	AVPALETTE_SIZE
water	69:40	0:0	6	AVPALETTE_SIZE
water	69:55	0:0	4	;
water	70:4	0:0	4	}
op	71:4	0:0	2	*
water	71:5	0:0	2	got_frame
op	71:15	0:0	2	=
water	71:17	0:0	2	1
water	71:18	0:0	2	;
return	73:4	73:19	2	buf_size
water	73:11	0:0	3	buf_size
