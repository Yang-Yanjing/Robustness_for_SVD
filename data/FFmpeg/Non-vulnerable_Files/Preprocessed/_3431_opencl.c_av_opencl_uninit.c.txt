func	1:0	35:0	0	void	av_opencl_uninit
params	1:21	0:0	1	
param	1:22	1:26	2	void
stmnts	0:0	34:17	1	
decl	3:4	3:9	2	int	i
decl	4:4	4:17	2	cl_int	status
water	5:4	0:0	2	LOCK_OPENCL
water	5:15	0:0	2	;
water	6:4	0:0	2	opencl_ctx
op	6:14	0:0	2	.
water	6:15	0:0	2	init_count
op	6:25	0:0	2	--
water	6:27	0:0	2	;
if	7:4	8:16	2	(opencl_ctx . is_user_created)
cond	7:8	7:19	3	opencl_ctx . is_user_created
water	7:8	0:0	4	opencl_ctx
op	7:18	0:0	4	.
water	7:19	0:0	4	is_user_created
stmts	8:8	8:16	3	
goto	8:8	8:16	4	end
water	8:13	0:0	5	end
if	9:4	10:16	2	(opencl_ctx . init_count > 0)
cond	9:8	9:32	3	opencl_ctx . init_count > 0
water	9:8	0:0	4	opencl_ctx
op	9:18	0:0	4	.
water	9:19	0:0	4	init_count
op	9:30	0:0	4	>
water	9:32	0:0	4	0
stmts	10:8	10:16	3	
goto	10:8	10:16	4	end
water	10:13	0:0	5	end
if	11:4	18:4	2	(opencl_ctx . command_queue)
cond	11:8	11:19	3	opencl_ctx . command_queue
water	11:8	0:0	4	opencl_ctx
op	11:18	0:0	4	.
water	11:19	0:0	4	command_queue
stmts	11:34	18:4	3	
water	11:34	0:0	4	{
water	12:8	0:0	4	status
op	12:15	0:0	4	=
call	12:17	12:63	4	clReleaseCommandQueue
arg	12:39	12:63	5	opencl_ctx.command_queue
water	12:39	0:0	6	opencl_ctx
op	12:49	0:0	6	.
water	12:50	0:0	6	command_queue
water	12:64	0:0	4	;
if	13:8	16:8	4	(status != CL_SUCCESS)
cond	13:12	13:22	5	status != CL_SUCCESS
water	13:12	0:0	6	status
op	13:19	0:0	6	!=
water	13:22	0:0	6	CL_SUCCESS
stmts	13:34	16:8	5	
water	13:34	0:0	6	{
call	14:12	15:91	6	av_log
arg	14:19	14:30	7	&opencl_ctx
op	14:19	0:0	8	&
water	14:20	0:0	8	opencl_ctx
arg	14:32	14:44	7	AV_LOG_ERROR
water	14:32	0:0	8	AV_LOG_ERROR
arg	15:19	15:65	7	"Could not release OpenCL command queue: %s\n"
water	15:19	0:0	8	"Could not release OpenCL command queue: %s\n"
arg	15:67	15:91	7	av_opencl_errstr(status)
call	15:67	15:90	8	av_opencl_errstr
arg	15:84	15:90	9	status
water	15:84	0:0	10	status
water	15:92	0:0	6	;
water	16:8	0:0	6	}
water	17:8	0:0	4	opencl_ctx
op	17:18	0:0	4	.
water	17:19	0:0	4	command_queue
op	17:33	0:0	4	=
water	17:35	0:0	4	NULL
water	17:39	0:0	4	;
water	18:4	0:0	4	}
if	19:4	26:4	2	(opencl_ctx . context)
cond	19:8	19:19	3	opencl_ctx . context
water	19:8	0:0	4	opencl_ctx
op	19:18	0:0	4	.
water	19:19	0:0	4	context
stmts	19:28	26:4	3	
water	19:28	0:0	4	{
water	20:8	0:0	4	status
op	20:15	0:0	4	=
call	20:17	20:52	4	clReleaseContext
arg	20:34	20:52	5	opencl_ctx.context
water	20:34	0:0	6	opencl_ctx
op	20:44	0:0	6	.
water	20:45	0:0	6	context
water	20:53	0:0	4	;
if	21:8	24:8	4	(status != CL_SUCCESS)
cond	21:12	21:22	5	status != CL_SUCCESS
water	21:12	0:0	6	status
op	21:19	0:0	6	!=
water	21:22	0:0	6	CL_SUCCESS
stmts	21:34	24:8	5	
water	21:34	0:0	6	{
call	22:12	23:85	6	av_log
arg	22:19	22:30	7	&opencl_ctx
op	22:19	0:0	8	&
water	22:20	0:0	8	opencl_ctx
arg	22:32	22:44	7	AV_LOG_ERROR
water	22:32	0:0	8	AV_LOG_ERROR
arg	23:19	23:59	7	"Could not release OpenCL context: %s\n"
water	23:19	0:0	8	"Could not release OpenCL context: %s\n"
arg	23:61	23:85	7	av_opencl_errstr(status)
call	23:61	23:84	8	av_opencl_errstr
arg	23:78	23:84	9	status
water	23:78	0:0	10	status
water	23:86	0:0	6	;
water	24:8	0:0	6	}
water	25:8	0:0	4	opencl_ctx
op	25:18	0:0	4	.
water	25:19	0:0	4	context
op	25:27	0:0	4	=
water	25:29	0:0	4	NULL
water	25:33	0:0	4	;
water	26:4	0:0	4	}
for	27:4	29:4	2	(i = 0 ;i < opencl_ctx . kernel_code_count;i ++)
forinit	27:9	27:14	3	i = 0 ;
water	27:9	0:0	4	i
op	27:11	0:0	4	=
water	27:13	0:0	4	0
water	27:14	0:0	4	;
cond	27:16	27:31	3	i < opencl_ctx . kernel_code_count
water	27:16	0:0	4	i
op	27:18	0:0	4	<
water	27:20	0:0	4	opencl_ctx
op	27:30	0:0	4	.
water	27:31	0:0	4	kernel_code_count
forexpr	27:50	27:51	3	i ++
water	27:50	0:0	4	i
op	27:51	0:0	4	++
stmts	27:55	29:4	3	
water	27:55	0:0	4	{
water	28:8	0:0	4	opencl_ctx
op	28:18	0:0	4	.
water	28:19	0:0	4	kernel_code
op	28:30	0:0	4	[
water	28:31	0:0	4	i
op	28:32	0:0	4	]
op	28:33	0:0	4	.
water	28:34	0:0	4	is_compiled
op	28:46	0:0	4	=
water	28:48	0:0	4	0
water	28:49	0:0	4	;
water	29:4	0:0	4	}
call	30:4	30:44	2	free_device_list
arg	30:21	30:44	3	&opencl_ctx.device_list
op	30:21	0:0	4	&
water	30:22	0:0	4	opencl_ctx
op	30:32	0:0	4	.
water	30:33	0:0	4	device_list
water	30:45	0:0	2	;
label	31:0	31:3	2	end :
if	32:4	33:32	2	(opencl_ctx . init_count <= 0)
cond	32:8	32:33	3	opencl_ctx . init_count <= 0
water	32:8	0:0	4	opencl_ctx
op	32:18	0:0	4	.
water	32:19	0:0	4	init_count
op	32:30	0:0	4	<=
water	32:33	0:0	4	0
stmts	33:8	33:32	3	
call	33:8	33:31	4	av_opt_free
arg	33:20	33:31	5	&opencl_ctx
op	33:20	0:0	6	&
water	33:21	0:0	6	opencl_ctx
water	33:32	0:0	4	;
water	34:4	0:0	2	UNLOCK_OPENCL
water	34:17	0:0	2	;
