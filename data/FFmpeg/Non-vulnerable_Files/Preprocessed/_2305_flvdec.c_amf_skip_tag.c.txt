func	1:0	39:0	0	static int	amf_skip_tag
params	1:23	0:0	1	
param	1:24	1:39	2	AVIOContext *	pb
param	1:41	1:57	2	AMFDataType	type
stmnts	0:0	38:12	1	
decl	3:4	3:36	2	int	nb
op	3:11	0:0	2	=
op	3:13	0:0	2	-
water	3:14	0:0	2	1
water	3:15	0:0	2	,
decl	3:4	3:36	2	int	ret
water	3:20	0:0	2	,
decl	3:4	3:36	2	int	parse_name
op	3:33	0:0	2	=
water	3:35	0:0	2	1
switch	4:4	37:4	2	(type)
cond	4:12	4:12	3	type
water	4:12	0:0	4	type
stmts	4:18	37:4	3	
water	4:18	0:0	4	{
label	5:4	5:29	4	case AMF_DATA_TYPE_NUMBER :
call	6:8	6:23	4	avio_skip
arg	6:18	6:20	5	pb
water	6:18	0:0	6	pb
arg	6:22	6:23	5	8
water	6:22	0:0	6	8
water	6:24	0:0	4	;
break	7:8	7:13	4	
label	8:4	8:27	4	case AMF_DATA_TYPE_BOOL :
call	9:8	9:23	4	avio_skip
arg	9:18	9:20	5	pb
water	9:18	0:0	6	pb
arg	9:22	9:23	5	1
water	9:22	0:0	6	1
water	9:24	0:0	4	;
break	10:8	10:13	4	
label	11:4	11:29	4	case AMF_DATA_TYPE_STRING :
call	12:8	12:35	4	avio_skip
arg	12:18	12:20	5	pb
water	12:18	0:0	6	pb
arg	12:22	12:35	5	avio_rb16(pb)
call	12:22	12:34	6	avio_rb16
arg	12:32	12:34	7	pb
water	12:32	0:0	8	pb
water	12:36	0:0	4	;
break	13:8	13:13	4	
label	14:4	14:28	4	case AMF_DATA_TYPE_ARRAY :
water	15:8	0:0	4	parse_name
op	15:19	0:0	4	=
water	15:21	0:0	4	0
water	15:22	0:0	4	;
label	16:4	16:33	4	case AMF_DATA_TYPE_MIXEDARRAY :
water	17:8	0:0	4	nb
op	17:11	0:0	4	=
call	17:13	17:25	4	avio_rb32
arg	17:23	17:25	5	pb
water	17:23	0:0	6	pb
water	17:26	0:0	4	;
label	18:4	18:29	4	case AMF_DATA_TYPE_OBJECT :
while	19:8	30:8	4	(! pb -> eof_reached && ( nb -- > 0 || type != AMF_DATA_TYPE_ARRAY ))
cond	19:14	19:74	5	! pb -> eof_reached && ( nb -- > 0 || type != AMF_DATA_TYPE_ARRAY )
op	19:14	0:0	6	!
water	19:15	0:0	6	pb
op	19:17	0:0	6	->
water	19:19	0:0	6	eof_reached
op	19:31	0:0	6	&&
water	19:34	0:0	6	(
water	19:35	0:0	6	nb
op	19:37	0:0	6	--
op	19:40	0:0	6	>
water	19:42	0:0	6	0
op	19:44	0:0	6	||
water	19:47	0:0	6	type
op	19:52	0:0	6	!=
water	19:55	0:0	6	AMF_DATA_TYPE_ARRAY
water	19:74	0:0	6	)
stmts	19:77	30:8	5	
water	19:77	0:0	6	{
if	20:12	27:12	6	(parse_name)
cond	20:16	20:16	7	parse_name
water	20:16	0:0	8	parse_name
stmts	20:28	27:12	7	
water	20:28	0:0	8	{
decl	21:16	21:40	8	int	size
op	21:25	0:0	8	=
call	21:27	21:39	9	avio_rb16
arg	21:37	21:39	10	pb
water	21:37	0:0	11	pb
if	22:16	25:16	8	(! size)
cond	22:20	22:21	9	! size
op	22:20	0:0	10	!
water	22:21	0:0	10	size
stmts	22:27	25:16	9	
water	22:27	0:0	10	{
call	23:20	23:35	10	avio_skip
arg	23:30	23:32	11	pb
water	23:30	0:0	12	pb
arg	23:34	23:35	11	1
water	23:34	0:0	12	1
water	23:36	0:0	10	;
break	24:20	24:25	10	
water	25:16	0:0	10	}
call	26:16	26:34	8	avio_skip
arg	26:26	26:28	9	pb
water	26:26	0:0	10	pb
arg	26:30	26:34	9	size
water	26:30	0:0	10	size
water	26:35	0:0	8	;
water	27:12	0:0	8	}
if	28:12	29:26	6	(( ret =amf_skip_tag (pb ,avio_r8 (pb ) ) ) < 0)
cond	28:16	28:56	7	( ret =amf_skip_tag (pb ,avio_r8 (pb ) ) ) < 0
water	28:16	0:0	8	(
water	28:17	0:0	8	ret
op	28:21	0:0	8	=
call	28:23	28:51	8	amf_skip_tag
arg	28:36	28:38	9	pb
water	28:36	0:0	10	pb
arg	28:40	28:51	9	avio_r8(pb)
call	28:40	28:50	10	avio_r8
arg	28:48	28:50	11	pb
water	28:48	0:0	12	pb
water	28:52	0:0	8	)
op	28:54	0:0	8	<
water	28:56	0:0	8	0
stmts	29:16	29:26	7	
return	29:16	29:26	8	ret
water	29:23	0:0	9	ret
water	30:8	0:0	6	}
break	31:8	31:13	4	
label	32:4	32:27	4	case AMF_DATA_TYPE_NULL :
label	33:4	33:33	4	case AMF_DATA_TYPE_OBJECT_END :
break	34:8	34:13	4	
label	35:4	35:11	4	default :
return	36:8	36:34	4	AVERROR_INVALIDDATA
water	36:15	0:0	5	AVERROR_INVALIDDATA
water	37:4	0:0	4	}
return	38:4	38:12	2	0
water	38:11	0:0	3	0
