func	1:0	38:0	0	static int	add_av_stream
params	1:24	0:0	1	
param	1:25	1:45	2	FFServerStream *	feed
param	1:47	1:66	2	LayeredAVStream *	st
stmnts	0:0	37:31	1	
decl	3:4	3:24	2	LayeredAVStream	*fst
decl	4:4	4:28	2	AVCodecContext	*av
water	4:22	0:0	2	,
decl	4:4	4:28	2	AVCodecContext	*av1
decl	5:4	5:9	2	int	i
water	6:4	0:0	2	av
op	6:7	0:0	2	=
water	6:9	0:0	2	st
op	6:11	0:0	2	->
water	6:13	0:0	2	codec
water	6:18	0:0	2	;
for	7:4	30:4	2	(i = 0 ;i < feed -> nb_streams;i ++)
forinit	7:8	7:11	3	i = 0 ;
water	7:8	0:0	4	i
op	7:9	0:0	4	=
water	7:10	0:0	4	0
water	7:11	0:0	4	;
cond	7:12	7:20	3	i < feed -> nb_streams
water	7:12	0:0	4	i
op	7:13	0:0	4	<
water	7:14	0:0	4	feed
op	7:18	0:0	4	->
water	7:20	0:0	4	nb_streams
forexpr	7:31	7:32	3	i ++
water	7:31	0:0	4	i
op	7:32	0:0	4	++
stmts	7:36	30:4	3	
water	7:36	0:0	4	{
water	8:8	0:0	4	av1
op	8:12	0:0	4	=
water	8:14	0:0	4	feed
op	8:18	0:0	4	->
water	8:20	0:0	4	streams
op	8:27	0:0	4	[
water	8:28	0:0	4	i
op	8:29	0:0	4	]
op	8:30	0:0	4	->
water	8:32	0:0	4	codec
water	8:37	0:0	4	;
if	9:8	29:8	4	(av1 -> codec_id == av -> codec_id && av1 -> codec_type == av -> codec_type && av1 -> bit_rate == av -> bit_rate)
cond	9:12	11:33	5	av1 -> codec_id == av -> codec_id && av1 -> codec_type == av -> codec_type && av1 -> bit_rate == av -> bit_rate
water	9:12	0:0	6	av1
op	9:15	0:0	6	->
water	9:17	0:0	6	codec_id
op	9:26	0:0	6	==
water	9:29	0:0	6	av
op	9:31	0:0	6	->
water	9:33	0:0	6	codec_id
op	9:42	0:0	6	&&
water	10:12	0:0	6	av1
op	10:15	0:0	6	->
water	10:17	0:0	6	codec_type
op	10:28	0:0	6	==
water	10:31	0:0	6	av
op	10:33	0:0	6	->
water	10:35	0:0	6	codec_type
op	10:46	0:0	6	&&
water	11:12	0:0	6	av1
op	11:15	0:0	6	->
water	11:17	0:0	6	bit_rate
op	11:26	0:0	6	==
water	11:29	0:0	6	av
op	11:31	0:0	6	->
water	11:33	0:0	6	bit_rate
stmts	11:43	29:8	5	
water	11:43	0:0	6	{
switch	12:12	28:12	6	(av -> codec_type)
cond	12:19	12:23	7	av -> codec_type
water	12:19	0:0	8	av
op	12:21	0:0	8	->
water	12:23	0:0	8	codec_type
stmts	12:35	28:12	7	
water	12:35	0:0	8	{
label	13:12	13:35	8	case AVMEDIA_TYPE_AUDIO :
if	14:16	16:28	8	(av1 -> channels == av -> channels && av1 -> sample_rate == av -> sample_rate)
cond	14:20	15:44	9	av1 -> channels == av -> channels && av1 -> sample_rate == av -> sample_rate
water	14:20	0:0	10	av1
op	14:23	0:0	10	->
water	14:25	0:0	10	channels
op	14:34	0:0	10	==
water	14:37	0:0	10	av
op	14:39	0:0	10	->
water	14:41	0:0	10	channels
op	14:50	0:0	10	&&
water	15:20	0:0	10	av1
op	15:23	0:0	10	->
water	15:25	0:0	10	sample_rate
op	15:37	0:0	10	==
water	15:40	0:0	10	av
op	15:42	0:0	10	->
water	15:44	0:0	10	sample_rate
stmts	16:20	16:28	9	
return	16:20	16:28	10	i
water	16:27	0:0	11	i
break	17:16	17:21	8	
label	18:12	18:35	8	case AVMEDIA_TYPE_VIDEO :
if	19:16	24:28	8	(av1 -> width == av -> width && av1 -> height == av -> height && av1 -> time_base . den == av -> time_base . den && av1 -> time_base . num == av -> time_base . num && av1 -> gop_size == av -> gop_size)
cond	19:20	23:41	9	av1 -> width == av -> width && av1 -> height == av -> height && av1 -> time_base . den == av -> time_base . den && av1 -> time_base . num == av -> time_base . num && av1 -> gop_size == av -> gop_size
water	19:20	0:0	10	av1
op	19:23	0:0	10	->
water	19:25	0:0	10	width
op	19:31	0:0	10	==
water	19:34	0:0	10	av
op	19:36	0:0	10	->
water	19:38	0:0	10	width
op	19:44	0:0	10	&&
water	20:20	0:0	10	av1
op	20:23	0:0	10	->
water	20:25	0:0	10	height
op	20:32	0:0	10	==
water	20:35	0:0	10	av
op	20:37	0:0	10	->
water	20:39	0:0	10	height
op	20:46	0:0	10	&&
water	21:20	0:0	10	av1
op	21:23	0:0	10	->
water	21:25	0:0	10	time_base
op	21:34	0:0	10	.
water	21:35	0:0	10	den
op	21:39	0:0	10	==
water	21:42	0:0	10	av
op	21:44	0:0	10	->
water	21:46	0:0	10	time_base
op	21:55	0:0	10	.
water	21:56	0:0	10	den
op	21:60	0:0	10	&&
water	22:20	0:0	10	av1
op	22:23	0:0	10	->
water	22:25	0:0	10	time_base
op	22:34	0:0	10	.
water	22:35	0:0	10	num
op	22:39	0:0	10	==
water	22:42	0:0	10	av
op	22:44	0:0	10	->
water	22:46	0:0	10	time_base
op	22:55	0:0	10	.
water	22:56	0:0	10	num
op	22:60	0:0	10	&&
water	23:20	0:0	10	av1
op	23:23	0:0	10	->
water	23:25	0:0	10	gop_size
op	23:34	0:0	10	==
water	23:37	0:0	10	av
op	23:39	0:0	10	->
water	23:41	0:0	10	gop_size
stmts	24:20	24:28	9	
return	24:20	24:28	10	i
water	24:27	0:0	11	i
break	25:16	25:21	8	
label	26:12	26:19	8	default :
call	27:16	27:22	8	abort
water	27:23	0:0	8	;
water	28:12	0:0	8	}
water	29:8	0:0	6	}
water	30:4	0:0	4	}
water	31:4	0:0	2	fst
op	31:8	0:0	2	=
call	31:10	31:36	2	add_av_stream1
arg	31:25	31:29	3	feed
water	31:25	0:0	4	feed
arg	31:31	31:33	3	av
water	31:31	0:0	4	av
arg	31:35	31:36	3	0
water	31:35	0:0	4	0
water	31:37	0:0	2	;
if	32:4	33:17	2	(! fst)
cond	32:8	32:9	3	! fst
op	32:8	0:0	4	!
water	32:9	0:0	4	fst
stmts	33:8	33:17	3	
return	33:8	33:17	4	-1
op	33:15	0:0	5	-
water	33:16	0:0	5	1
if	34:4	36:60	2	(st -> recommended_encoder_configuration)
cond	34:8	34:12	3	st -> recommended_encoder_configuration
water	34:8	0:0	4	st
op	34:10	0:0	4	->
water	34:12	0:0	4	recommended_encoder_configuration
stmts	35:8	36:60	3	
water	35:8	0:0	4	fst
op	35:11	0:0	4	->
water	35:13	0:0	4	recommended_encoder_configuration
op	35:47	0:0	4	=
call	36:12	36:59	4	av_strdup
arg	36:22	36:59	5	st->recommended_encoder_configuration
water	36:22	0:0	6	st
op	36:24	0:0	6	->
water	36:26	0:0	6	recommended_encoder_configuration
water	36:60	0:0	4	;
return	37:4	37:31	2	feed->nb_streams-1
water	37:11	0:0	3	feed
op	37:15	0:0	3	->
water	37:17	0:0	3	nb_streams
op	37:28	0:0	3	-
water	37:30	0:0	3	1
