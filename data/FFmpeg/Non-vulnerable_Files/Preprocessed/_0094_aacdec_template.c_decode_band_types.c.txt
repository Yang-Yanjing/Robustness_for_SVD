func	1:0	38:0	0	static int	decode_band_types
params	1:28	0:0	1	
param	1:29	1:43	2	AACContext *	ac
param	1:45	1:73	2	enum BandType	band_type[120]
param	2:29	2:55	2	int	band_type_run_end[120]
param	2:57	2:74	2	GetBitContext *	gb
param	3:29	3:57	2	IndividualChannelStream *	ics
stmnts	0:0	37:12	1	
decl	5:4	5:18	2	int	g
water	5:9	0:0	2	,
decl	5:4	5:18	2	int	idx
op	5:15	0:0	2	=
water	5:17	0:0	2	0
decl	6:4	6:78	2	const int	bits
op	6:19	0:0	2	=
water	6:21	0:0	2	(
water	6:22	0:0	2	ics
op	6:25	0:0	2	->
water	6:27	0:0	2	window_sequence
op	6:42	0:0	2	[
water	6:43	0:0	2	0
op	6:44	0:0	2	]
op	6:46	0:0	2	==
water	6:49	0:0	2	EIGHT_SHORT_SEQUENCE
water	6:69	0:0	2	)
water	6:71	0:0	2	?
water	6:73	0:0	2	3
water	6:75	0:0	2	:
water	6:77	0:0	2	5
for	7:4	36:4	2	(g = 0 ;g < ics -> num_window_groups;g ++)
forinit	7:9	7:14	3	g = 0 ;
water	7:9	0:0	4	g
op	7:11	0:0	4	=
water	7:13	0:0	4	0
water	7:14	0:0	4	;
cond	7:16	7:25	3	g < ics -> num_window_groups
water	7:16	0:0	4	g
op	7:18	0:0	4	<
water	7:20	0:0	4	ics
op	7:23	0:0	4	->
water	7:25	0:0	4	num_window_groups
forexpr	7:44	7:45	3	g ++
water	7:44	0:0	4	g
op	7:45	0:0	4	++
stmts	7:49	36:4	3	
water	7:49	0:0	4	{
decl	8:8	8:17	4	int	k
op	8:14	0:0	4	=
water	8:16	0:0	4	0
while	9:8	35:8	4	(k < ics -> max_sfb)
cond	9:15	9:24	5	k < ics -> max_sfb
water	9:15	0:0	6	k
op	9:17	0:0	6	<
water	9:19	0:0	6	ics
op	9:22	0:0	6	->
water	9:24	0:0	6	max_sfb
stmts	9:33	35:8	5	
water	9:33	0:0	6	{
decl	10:12	10:32	6	uint8_t	sect_end
op	10:29	0:0	6	=
water	10:31	0:0	6	k
decl	11:12	11:29	6	int	sect_len_incr
decl	12:12	12:48	6	int	sect_band_type
op	12:31	0:0	6	=
call	12:33	12:47	7	get_bits
arg	12:42	12:44	8	gb
water	12:42	0:0	9	gb
arg	12:46	12:47	8	4
water	12:46	0:0	9	4
if	13:12	16:12	6	(sect_band_type == 12)
cond	13:16	13:34	7	sect_band_type == 12
water	13:16	0:0	8	sect_band_type
op	13:31	0:0	8	==
water	13:34	0:0	8	12
stmts	13:38	16:12	7	
water	13:38	0:0	8	{
call	14:16	14:69	8	av_log
arg	14:23	14:32	9	ac->avctx
water	14:23	0:0	10	ac
op	14:25	0:0	10	->
water	14:27	0:0	10	avctx
arg	14:34	14:46	9	AV_LOG_ERROR
water	14:34	0:0	10	AV_LOG_ERROR
arg	14:48	14:69	9	"invalid band type\n"
water	14:48	0:0	10	"invalid band type\n"
water	14:70	0:0	8	;
return	15:16	15:42	8	AVERROR_INVALIDDATA
water	15:23	0:0	9	AVERROR_INVALIDDATA
water	16:12	0:0	8	}
do	17:12	30:12	6	(sect_len_incr == ( 1 << bits ) - 1)
cond	30:21	30:52	7	sect_len_incr == ( 1 << bits ) - 1
water	30:21	0:0	8	sect_len_incr
op	30:35	0:0	8	==
water	30:38	0:0	8	(
water	30:39	0:0	8	1
op	30:41	0:0	8	<<
water	30:44	0:0	8	bits
water	30:48	0:0	8	)
op	30:50	0:0	8	-
water	30:52	0:0	8	1
stmts	17:15	30:12	7	
water	17:15	0:0	8	{
water	18:16	0:0	8	sect_len_incr
op	18:30	0:0	8	=
call	18:32	18:49	8	get_bits
arg	18:41	18:43	9	gb
water	18:41	0:0	10	gb
arg	18:45	18:49	9	bits
water	18:45	0:0	10	bits
water	18:50	0:0	8	;
water	19:16	0:0	8	sect_end
op	19:25	0:0	8	+=
water	19:28	0:0	8	sect_len_incr
water	19:41	0:0	8	;
if	20:16	23:16	8	(get_bits_left (gb ) < 0)
cond	20:20	20:40	9	get_bits_left (gb ) < 0
call	20:20	20:36	10	get_bits_left
arg	20:34	20:36	11	gb
water	20:34	0:0	12	gb
op	20:38	0:0	10	<
water	20:40	0:0	10	0
stmts	20:43	23:16	9	
water	20:43	0:0	10	{
call	21:20	21:85	10	av_log
arg	21:27	21:36	11	ac->avctx
water	21:27	0:0	12	ac
op	21:29	0:0	12	->
water	21:31	0:0	12	avctx
arg	21:38	21:50	11	AV_LOG_ERROR
water	21:38	0:0	12	AV_LOG_ERROR
arg	21:52	21:85	11	"decode_band_types: "overread_err
water	21:52	0:0	12	"decode_band_types: "
water	21:73	0:0	12	overread_err
water	21:86	0:0	10	;
return	22:20	22:46	10	AVERROR_INVALIDDATA
water	22:27	0:0	11	AVERROR_INVALIDDATA
water	23:16	0:0	10	}
if	24:16	29:16	8	(sect_end > ics -> max_sfb)
cond	24:20	24:36	9	sect_end > ics -> max_sfb
water	24:20	0:0	10	sect_end
op	24:29	0:0	10	>
water	24:31	0:0	10	ics
op	24:34	0:0	10	->
water	24:36	0:0	10	max_sfb
stmts	24:45	29:16	9	
water	24:45	0:0	10	{
call	25:20	27:49	10	av_log
arg	25:27	25:36	11	ac->avctx
water	25:27	0:0	12	ac
op	25:29	0:0	12	->
water	25:31	0:0	12	avctx
arg	25:38	25:50	11	AV_LOG_ERROR
water	25:38	0:0	12	AV_LOG_ERROR
arg	26:27	26:71	11	"Number of bands (%d) exceeds limit (%d).\n"
water	26:27	0:0	12	"Number of bands (%d) exceeds limit (%d).\n"
arg	27:27	27:35	11	sect_end
water	27:27	0:0	12	sect_end
arg	27:37	27:49	11	ics->max_sfb
water	27:37	0:0	12	ics
op	27:40	0:0	12	->
water	27:42	0:0	12	max_sfb
water	27:50	0:0	10	;
return	28:20	28:46	10	AVERROR_INVALIDDATA
water	28:27	0:0	11	AVERROR_INVALIDDATA
water	29:16	0:0	10	}
water	30:12	0:0	8	}
water	30:54	0:0	6	;
for	31:12	34:12	6	(;k < sect_end;k ++)
forinit	31:17	31:17	7	;
water	31:17	0:0	8	;
cond	31:19	31:23	7	k < sect_end
water	31:19	0:0	8	k
op	31:21	0:0	8	<
water	31:23	0:0	8	sect_end
forexpr	31:33	31:34	7	k ++
water	31:33	0:0	8	k
op	31:34	0:0	8	++
stmts	31:38	34:12	7	
water	31:38	0:0	8	{
water	32:16	0:0	8	band_type
op	32:33	0:0	8	[
water	32:34	0:0	8	idx
op	32:37	0:0	8	]
op	32:41	0:0	8	=
water	32:43	0:0	8	sect_band_type
water	32:57	0:0	8	;
water	33:16	0:0	8	band_type_run_end
op	33:33	0:0	8	[
water	33:34	0:0	8	idx
op	33:37	0:0	8	++
op	33:39	0:0	8	]
op	33:41	0:0	8	=
water	33:43	0:0	8	sect_end
water	33:51	0:0	8	;
water	34:12	0:0	8	}
water	35:8	0:0	6	}
water	36:4	0:0	4	}
return	37:4	37:12	2	0
water	37:11	0:0	3	0
