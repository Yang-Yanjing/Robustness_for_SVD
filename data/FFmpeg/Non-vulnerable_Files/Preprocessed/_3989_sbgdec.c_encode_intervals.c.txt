func	1:0	40:0	0	static int	encode_intervals
params	1:27	0:0	1	
param	1:28	1:48	2	struct sbg_script *	s
param	1:50	1:69	2	AVCodecContext *	avc
param	2:28	2:54	2	struct ws_intervals *	inter
stmnts	0:0	39:12	1	
decl	4:4	4:25	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:25	2	int	edata_size
op	4:22	0:0	2	=
water	4:24	0:0	2	4
decl	5:4	5:18	2	uint8_t	*edata
for	6:4	11:4	2	(i = 0 ;i < inter -> nb_inter;i ++)
forinit	6:9	6:14	3	i = 0 ;
water	6:9	0:0	4	i
op	6:11	0:0	4	=
water	6:13	0:0	4	0
water	6:14	0:0	4	;
cond	6:16	6:27	3	i < inter -> nb_inter
water	6:16	0:0	4	i
op	6:18	0:0	4	<
water	6:20	0:0	4	inter
op	6:25	0:0	4	->
water	6:27	0:0	4	nb_inter
forexpr	6:37	6:38	3	i ++
water	6:37	0:0	4	i
op	6:38	0:0	4	++
stmts	6:42	11:4	3	
water	6:42	0:0	4	{
water	7:8	0:0	4	edata_size
op	7:19	0:0	4	+=
water	7:22	0:0	4	inter
op	7:27	0:0	4	->
water	7:29	0:0	4	inter
op	7:34	0:0	4	[
water	7:35	0:0	4	i
op	7:36	0:0	4	]
op	7:37	0:0	4	.
water	7:38	0:0	4	type
op	7:43	0:0	4	==
water	7:46	0:0	4	WS_SINE
water	7:55	0:0	4	?
water	7:57	0:0	4	44
water	7:60	0:0	4	:
water	8:22	0:0	4	inter
op	8:27	0:0	4	->
water	8:29	0:0	4	inter
op	8:34	0:0	4	[
water	8:35	0:0	4	i
op	8:36	0:0	4	]
op	8:37	0:0	4	.
water	8:38	0:0	4	type
op	8:43	0:0	4	==
water	8:46	0:0	4	WS_NOISE
water	8:55	0:0	4	?
water	8:57	0:0	4	32
water	8:60	0:0	4	:
water	8:62	0:0	4	0
water	8:63	0:0	4	;
if	9:8	10:34	4	(edata_size < 0)
cond	9:12	9:25	5	edata_size < 0
water	9:12	0:0	6	edata_size
op	9:23	0:0	6	<
water	9:25	0:0	6	0
stmts	10:12	10:34	5	
return	10:12	10:34	6	AVERROR(ENOMEM)
call	10:19	10:33	7	AVERROR
arg	10:27	10:33	8	ENOMEM
water	10:27	0:0	9	ENOMEM
water	11:4	0:0	4	}
if	12:4	13:30	2	(ff_alloc_extradata (avc ,edata_size ))
cond	12:8	12:42	3	ff_alloc_extradata (avc ,edata_size )
call	12:8	12:42	4	ff_alloc_extradata
arg	12:27	12:30	5	avc
water	12:27	0:0	6	avc
arg	12:32	12:42	5	edata_size
water	12:32	0:0	6	edata_size
stmts	13:8	13:30	3	
return	13:8	13:30	4	AVERROR(ENOMEM)
call	13:15	13:29	5	AVERROR
arg	13:23	13:29	6	ENOMEM
water	13:23	0:0	7	ENOMEM
water	14:4	0:0	2	edata
op	14:10	0:0	2	=
water	14:12	0:0	2	avc
op	14:15	0:0	2	->
water	14:17	0:0	2	extradata
water	14:26	0:0	2	;
call	17:4	17:31	2	ADD_EDATA32
arg	17:16	17:31	3	inter->nb_inter
water	17:16	0:0	4	inter
op	17:21	0:0	4	->
water	17:23	0:0	4	nb_inter
water	17:32	0:0	2	;
for	18:4	36:4	2	(i = 0 ;i < inter -> nb_inter;i ++)
forinit	18:9	18:14	3	i = 0 ;
water	18:9	0:0	4	i
op	18:11	0:0	4	=
water	18:13	0:0	4	0
water	18:14	0:0	4	;
cond	18:16	18:27	3	i < inter -> nb_inter
water	18:16	0:0	4	i
op	18:18	0:0	4	<
water	18:20	0:0	4	inter
op	18:25	0:0	4	->
water	18:27	0:0	4	nb_inter
forexpr	18:37	18:38	3	i ++
water	18:37	0:0	4	i
op	18:38	0:0	4	++
stmts	18:42	36:4	3	
water	18:42	0:0	4	{
call	19:8	19:39	4	ADD_EDATA64
arg	19:20	19:39	5	inter->inter[i].ts1
water	19:20	0:0	6	inter
op	19:25	0:0	6	->
water	19:27	0:0	6	inter
op	19:32	0:0	6	[
water	19:33	0:0	6	i
op	19:34	0:0	6	]
op	19:35	0:0	6	.
water	19:36	0:0	6	ts1
water	19:40	0:0	4	;
call	20:8	20:39	4	ADD_EDATA64
arg	20:20	20:39	5	inter->inter[i].ts2
water	20:20	0:0	6	inter
op	20:25	0:0	6	->
water	20:27	0:0	6	inter
op	20:32	0:0	6	[
water	20:33	0:0	6	i
op	20:34	0:0	6	]
op	20:35	0:0	6	.
water	20:36	0:0	6	ts2
water	20:40	0:0	4	;
call	21:8	21:40	4	ADD_EDATA32
arg	21:20	21:40	5	inter->inter[i].type
water	21:20	0:0	6	inter
op	21:25	0:0	6	->
water	21:27	0:0	6	inter
op	21:32	0:0	6	[
water	21:33	0:0	6	i
op	21:34	0:0	6	]
op	21:35	0:0	6	.
water	21:36	0:0	6	type
water	21:41	0:0	4	;
call	22:8	22:44	4	ADD_EDATA32
arg	22:20	22:44	5	inter->inter[i].channels
water	22:20	0:0	6	inter
op	22:25	0:0	6	->
water	22:27	0:0	6	inter
op	22:32	0:0	6	[
water	22:33	0:0	6	i
op	22:34	0:0	6	]
op	22:35	0:0	6	.
water	22:36	0:0	6	channels
water	22:45	0:0	4	;
switch	23:8	35:8	4	(inter -> inter [ i ] . type)
cond	23:16	23:32	5	inter -> inter [ i ] . type
water	23:16	0:0	6	inter
op	23:21	0:0	6	->
water	23:23	0:0	6	inter
op	23:28	0:0	6	[
water	23:29	0:0	6	i
op	23:30	0:0	6	]
op	23:31	0:0	6	.
water	23:32	0:0	6	type
stmts	23:38	35:8	5	
water	23:38	0:0	6	{
label	24:12	24:24	6	case WS_SINE :
call	25:16	25:46	6	ADD_EDATA32
arg	25:28	25:46	7	inter->inter[i].f1
water	25:28	0:0	8	inter
op	25:33	0:0	8	->
water	25:35	0:0	8	inter
op	25:40	0:0	8	[
water	25:41	0:0	8	i
op	25:42	0:0	8	]
op	25:43	0:0	8	.
water	25:44	0:0	8	f1
water	25:47	0:0	6	;
call	26:16	26:46	6	ADD_EDATA32
arg	26:28	26:46	7	inter->inter[i].f2
water	26:28	0:0	8	inter
op	26:33	0:0	8	->
water	26:35	0:0	8	inter
op	26:40	0:0	8	[
water	26:41	0:0	8	i
op	26:42	0:0	8	]
op	26:43	0:0	8	.
water	26:44	0:0	8	f2
water	26:47	0:0	6	;
call	27:16	27:46	6	ADD_EDATA32
arg	27:28	27:46	7	inter->inter[i].a1
water	27:28	0:0	8	inter
op	27:33	0:0	8	->
water	27:35	0:0	8	inter
op	27:40	0:0	8	[
water	27:41	0:0	8	i
op	27:42	0:0	8	]
op	27:43	0:0	8	.
water	27:44	0:0	8	a1
water	27:47	0:0	6	;
call	28:16	28:46	6	ADD_EDATA32
arg	28:28	28:46	7	inter->inter[i].a2
water	28:28	0:0	8	inter
op	28:33	0:0	8	->
water	28:35	0:0	8	inter
op	28:40	0:0	8	[
water	28:41	0:0	8	i
op	28:42	0:0	8	]
op	28:43	0:0	8	.
water	28:44	0:0	8	a2
water	28:47	0:0	6	;
call	29:16	29:47	6	ADD_EDATA32
arg	29:28	29:47	7	inter->inter[i].phi
water	29:28	0:0	8	inter
op	29:33	0:0	8	->
water	29:35	0:0	8	inter
op	29:40	0:0	8	[
water	29:41	0:0	8	i
op	29:42	0:0	8	]
op	29:43	0:0	8	.
water	29:44	0:0	8	phi
water	29:48	0:0	6	;
break	30:16	30:21	6	
label	31:12	31:25	6	case WS_NOISE :
call	32:16	32:46	6	ADD_EDATA32
arg	32:28	32:46	7	inter->inter[i].a1
water	32:28	0:0	8	inter
op	32:33	0:0	8	->
water	32:35	0:0	8	inter
op	32:40	0:0	8	[
water	32:41	0:0	8	i
op	32:42	0:0	8	]
op	32:43	0:0	8	.
water	32:44	0:0	8	a1
water	32:47	0:0	6	;
call	33:16	33:46	6	ADD_EDATA32
arg	33:28	33:46	7	inter->inter[i].a2
water	33:28	0:0	8	inter
op	33:33	0:0	8	->
water	33:35	0:0	8	inter
op	33:40	0:0	8	[
water	33:41	0:0	8	i
op	33:42	0:0	8	]
op	33:43	0:0	8	.
water	33:44	0:0	8	a2
water	33:47	0:0	6	;
break	34:16	34:21	6	
water	35:8	0:0	6	}
water	36:4	0:0	4	}
if	37:4	38:26	2	(edata != avc -> extradata + edata_size)
cond	37:8	37:34	3	edata != avc -> extradata + edata_size
water	37:8	0:0	4	edata
op	37:14	0:0	4	!=
water	37:17	0:0	4	avc
op	37:20	0:0	4	->
water	37:22	0:0	4	extradata
op	37:32	0:0	4	+
water	37:34	0:0	4	edata_size
stmts	38:8	38:26	3	
return	38:8	38:26	4	AVERROR_BUG
water	38:15	0:0	5	AVERROR_BUG
return	39:4	39:12	2	0
water	39:11	0:0	3	0
