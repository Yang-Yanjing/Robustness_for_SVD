func	1:0	152:0	0	static int	rm_read_header
params	1:25	0:0	1	
param	1:26	1:44	2	AVFormatContext *	s
stmnts	0:0	151:14	1	
decl	3:4	3:37	2	RMDemuxContext	*rm
op	3:23	0:0	2	=
water	3:25	0:0	2	s
op	3:26	0:0	2	->
water	3:28	0:0	2	priv_data
decl	4:4	4:16	2	AVStream	*st
decl	5:4	5:27	2	AVIOContext	*pb
op	5:20	0:0	2	=
water	5:22	0:0	2	s
op	5:23	0:0	2	->
water	5:25	0:0	2	pb
decl	6:4	6:20	2	unsigned int	tag
decl	7:4	7:16	2	int	tag_size
decl	8:4	8:37	2	unsigned int	start_time
water	8:27	0:0	2	,
decl	8:4	8:37	2	unsigned int	duration
decl	9:4	9:43	2	unsigned int	data_off
op	9:26	0:0	2	=
water	9:28	0:0	2	0
water	9:29	0:0	2	,
decl	9:4	9:43	2	unsigned int	indx_off
op	9:40	0:0	2	=
water	9:42	0:0	2	0
decl	10:4	10:28	2	char	buf[128]
water	10:17	0:0	2	,
decl	10:4	10:28	2	char	mime[128]
decl	11:4	11:17	2	int	flags
op	11:14	0:0	2	=
water	11:16	0:0	2	0
decl	12:4	12:16	2	int	ret
op	12:12	0:0	2	=
op	12:14	0:0	2	-
water	12:15	0:0	2	1
water	13:4	0:0	2	unsigned
water	13:13	0:0	2	size
water	13:17	0:0	2	,
water	13:19	0:0	2	v
water	13:20	0:0	2	;
decl	14:4	14:21	2	int64_t	codec_pos
water	15:4	0:0	2	tag
op	15:8	0:0	2	=
call	15:10	15:22	2	avio_rl32
arg	15:20	15:22	3	pb
water	15:20	0:0	4	pb
water	15:23	0:0	2	;
if	16:4	19:4	2	(tag ==MKTAG ('.' ,'r' ,'a' ,0 xfd ))
cond	16:8	16:40	3	tag ==MKTAG ('.' ,'r' ,'a' ,0 xfd )
water	16:8	0:0	4	tag
op	16:12	0:0	4	==
call	16:15	16:40	4	MKTAG
arg	16:21	16:24	5	'.'
water	16:21	0:0	6	'.'
arg	16:26	16:29	5	'r'
water	16:26	0:0	6	'r'
arg	16:31	16:34	5	'a'
water	16:31	0:0	6	'a'
arg	16:36	16:40	5	0xfd
water	16:36	0:0	6	0
water	16:37	0:0	6	xfd
stmts	16:43	19:4	3	
water	16:43	0:0	4	{
return	18:8	18:36	4	rm_read_header_old(s)
call	18:15	18:35	5	rm_read_header_old
arg	18:34	18:35	6	s
water	18:34	0:0	7	s
water	19:4	0:0	4	}
else	19:6	21:4	2
stmts	19:11	21:4	3	
if	19:11	21:4	4	(tag !=MKTAG ('.' ,'R' ,'M' ,'F' ))
cond	19:15	19:46	5	tag !=MKTAG ('.' ,'R' ,'M' ,'F' )
water	19:15	0:0	6	tag
op	19:19	0:0	6	!=
call	19:22	19:46	6	MKTAG
arg	19:28	19:31	7	'.'
water	19:28	0:0	8	'.'
arg	19:33	19:36	7	'R'
water	19:33	0:0	8	'R'
arg	19:38	19:41	7	'M'
water	19:38	0:0	8	'M'
arg	19:43	19:46	7	'F'
water	19:43	0:0	8	'F'
stmts	19:49	21:4	5	
water	19:49	0:0	6	{
return	20:8	20:27	6	AVERROR(EIO)
call	20:15	20:26	7	AVERROR
arg	20:23	20:26	8	EIO
water	20:23	0:0	9	EIO
water	21:4	0:0	6	}
water	22:4	0:0	2	tag_size
op	22:13	0:0	2	=
call	22:15	22:27	2	avio_rb32
arg	22:25	22:27	3	pb
water	22:25	0:0	4	pb
water	22:28	0:0	2	;
call	23:4	23:30	2	avio_skip
arg	23:14	23:16	3	pb
water	23:14	0:0	4	pb
arg	23:18	23:30	3	tag_size-8
water	23:18	0:0	4	tag_size
op	23:27	0:0	4	-
water	23:29	0:0	4	8
water	23:31	0:0	2	;
for	24:4	135:4	2	(;;)
forinit	24:8	24:8	3	;
water	24:8	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	24:12	135:4	3	
water	24:12	0:0	4	{
if	25:8	26:21	4	(avio_feof (pb ))
cond	25:12	25:24	5	avio_feof (pb )
call	25:12	25:24	6	avio_feof
arg	25:22	25:24	7	pb
water	25:22	0:0	8	pb
stmts	26:12	26:21	5	
goto	26:12	26:21	6	fail
water	26:17	0:0	7	fail
water	27:8	0:0	4	tag
op	27:12	0:0	4	=
call	27:14	27:26	4	avio_rl32
arg	27:24	27:26	5	pb
water	27:24	0:0	6	pb
water	27:27	0:0	4	;
water	28:8	0:0	4	tag_size
op	28:17	0:0	4	=
call	28:19	28:31	4	avio_rb32
arg	28:29	28:31	5	pb
water	28:29	0:0	6	pb
water	28:32	0:0	4	;
call	29:8	29:20	4	avio_rb16
arg	29:18	29:20	5	pb
water	29:18	0:0	6	pb
water	29:21	0:0	4	;
call	30:8	36:24	4	av_log
arg	30:15	30:16	5	s
water	30:15	0:0	6	s
arg	30:18	30:30	5	AV_LOG_TRACE
water	30:18	0:0	6	AV_LOG_TRACE
arg	30:32	30:63	5	"tag=%c%c%c%c (%08x) size=%d\n"
water	30:32	0:0	6	"tag=%c%c%c%c (%08x) size=%d\n"
arg	31:16	31:34	5	(tag)&0xff
water	31:16	0:0	6	(
water	31:17	0:0	6	tag
water	31:26	0:0	6	)
op	31:28	0:0	6	&
water	31:30	0:0	6	0
water	31:31	0:0	6	xff
arg	32:16	32:34	5	(tag>>8)&0xff
water	32:16	0:0	6	(
water	32:17	0:0	6	tag
op	32:21	0:0	6	>>
water	32:25	0:0	6	8
water	32:26	0:0	6	)
op	32:28	0:0	6	&
water	32:30	0:0	6	0
water	32:31	0:0	6	xff
arg	33:16	33:34	5	(tag>>16)&0xff
water	33:16	0:0	6	(
water	33:17	0:0	6	tag
op	33:21	0:0	6	>>
water	33:24	0:0	6	16
water	33:26	0:0	6	)
op	33:28	0:0	6	&
water	33:30	0:0	6	0
water	33:31	0:0	6	xff
arg	34:16	34:34	5	(tag>>24)&0xff
water	34:16	0:0	6	(
water	34:17	0:0	6	tag
op	34:21	0:0	6	>>
water	34:24	0:0	6	24
water	34:26	0:0	6	)
op	34:28	0:0	6	&
water	34:30	0:0	6	0
water	34:31	0:0	6	xff
arg	35:16	35:19	5	tag
water	35:16	0:0	6	tag
arg	36:16	36:24	5	tag_size
water	36:16	0:0	6	tag_size
water	36:25	0:0	4	;
if	37:8	38:21	4	(tag_size < 10 && tag !=MKTAG ('D' ,'A' ,'T' ,'A' ))
cond	37:12	37:60	5	tag_size < 10 && tag !=MKTAG ('D' ,'A' ,'T' ,'A' )
water	37:12	0:0	6	tag_size
op	37:21	0:0	6	<
water	37:23	0:0	6	10
op	37:26	0:0	6	&&
water	37:29	0:0	6	tag
op	37:33	0:0	6	!=
call	37:36	37:60	6	MKTAG
arg	37:42	37:45	7	'D'
water	37:42	0:0	8	'D'
arg	37:47	37:50	7	'A'
water	37:47	0:0	8	'A'
arg	37:52	37:55	7	'T'
water	37:52	0:0	8	'T'
arg	37:57	37:60	7	'A'
water	37:57	0:0	8	'A'
stmts	38:12	38:21	5	
goto	38:12	38:21	6	fail
water	38:17	0:0	7	fail
switch	39:8	134:8	4	(tag)
cond	39:15	39:15	5	tag
water	39:15	0:0	6	tag
stmts	39:20	134:8	5	
water	39:20	0:0	6	{
water	40:8	0:0	6	case
call	40:13	40:37	6	MKTAG
arg	40:19	40:22	7	'P'
water	40:19	0:0	8	'P'
arg	40:24	40:27	7	'R'
water	40:24	0:0	8	'R'
arg	40:29	40:32	7	'O'
water	40:29	0:0	8	'O'
arg	40:34	40:37	7	'P'
water	40:34	0:0	8	'P'
water	40:38	0:0	6	:
call	42:12	42:24	6	avio_rb32
arg	42:22	42:24	7	pb
water	42:22	0:0	8	pb
water	42:25	0:0	6	;
call	43:12	43:24	6	avio_rb32
arg	43:22	43:24	7	pb
water	43:22	0:0	8	pb
water	43:25	0:0	6	;
call	44:12	44:24	6	avio_rb32
arg	44:22	44:24	7	pb
water	44:22	0:0	8	pb
water	44:25	0:0	6	;
call	45:12	45:24	6	avio_rb32
arg	45:22	45:24	7	pb
water	45:22	0:0	8	pb
water	45:25	0:0	6	;
call	46:12	46:24	6	avio_rb32
arg	46:22	46:24	7	pb
water	46:22	0:0	8	pb
water	46:25	0:0	6	;
water	47:12	0:0	6	duration
op	47:21	0:0	6	=
call	47:23	47:35	6	avio_rb32
arg	47:33	47:35	7	pb
water	47:33	0:0	8	pb
water	47:36	0:0	6	;
water	48:12	0:0	6	s
op	48:13	0:0	6	->
water	48:15	0:0	6	duration
op	48:24	0:0	6	=
call	48:26	48:65	6	av_rescale
arg	48:37	48:45	7	duration
water	48:37	0:0	8	duration
arg	48:47	48:59	7	AV_TIME_BASE
water	48:47	0:0	8	AV_TIME_BASE
arg	48:61	48:65	7	1000
water	48:61	0:0	8	1000
water	48:66	0:0	6	;
call	49:12	49:24	6	avio_rb32
arg	49:22	49:24	7	pb
water	49:22	0:0	8	pb
water	49:25	0:0	6	;
water	50:12	0:0	6	indx_off
op	50:21	0:0	6	=
call	50:23	50:35	6	avio_rb32
arg	50:33	50:35	7	pb
water	50:33	0:0	8	pb
water	50:36	0:0	6	;
water	51:12	0:0	6	data_off
op	51:21	0:0	6	=
call	51:23	51:35	6	avio_rb32
arg	51:33	51:35	7	pb
water	51:33	0:0	8	pb
water	51:36	0:0	6	;
call	52:12	52:24	6	avio_rb16
arg	52:22	52:24	7	pb
water	52:22	0:0	8	pb
water	52:25	0:0	6	;
water	53:12	0:0	6	flags
op	53:18	0:0	6	=
call	53:20	53:32	6	avio_rb16
arg	53:30	53:32	7	pb
water	53:30	0:0	8	pb
water	53:33	0:0	6	;
break	54:12	54:17	6	
water	55:8	0:0	6	case
call	55:13	55:37	6	MKTAG
arg	55:19	55:22	7	'C'
water	55:19	0:0	8	'C'
arg	55:24	55:27	7	'O'
water	55:24	0:0	8	'O'
arg	55:29	55:32	7	'N'
water	55:29	0:0	8	'N'
arg	55:34	55:37	7	'T'
water	55:34	0:0	8	'T'
water	55:38	0:0	6	:
call	56:12	56:37	6	rm_read_metadata
arg	56:29	56:30	7	s
water	56:29	0:0	8	s
arg	56:32	56:34	7	pb
water	56:32	0:0	8	pb
arg	56:36	56:37	7	1
water	56:36	0:0	8	1
water	56:38	0:0	6	;
break	57:12	57:17	6	
water	58:8	0:0	6	case
call	58:13	58:37	6	MKTAG
arg	58:19	58:22	7	'M'
water	58:19	0:0	8	'M'
arg	58:24	58:27	7	'D'
water	58:24	0:0	8	'D'
arg	58:29	58:32	7	'P'
water	58:29	0:0	8	'P'
arg	58:34	58:37	7	'R'
water	58:34	0:0	8	'R'
water	58:38	0:0	6	:
water	59:12	0:0	6	st
op	59:15	0:0	6	=
call	59:17	59:44	6	avformat_new_stream
arg	59:37	59:38	7	s
water	59:37	0:0	8	s
arg	59:40	59:44	7	NULL
water	59:40	0:0	8	NULL
water	59:45	0:0	6	;
if	60:12	63:12	6	(! st)
cond	60:16	60:17	7	! st
op	60:16	0:0	8	!
water	60:17	0:0	8	st
stmts	60:21	63:12	7	
water	60:21	0:0	8	{
water	61:16	0:0	8	ret
op	61:20	0:0	8	=
call	61:22	61:36	8	AVERROR
arg	61:30	61:36	9	ENOMEM
water	61:30	0:0	10	ENOMEM
water	61:37	0:0	8	;
goto	62:16	62:25	8	fail
water	62:21	0:0	9	fail
water	63:12	0:0	8	}
water	64:12	0:0	6	st
op	64:14	0:0	6	->
water	64:16	0:0	6	id
op	64:19	0:0	6	=
call	64:21	64:33	6	avio_rb16
arg	64:31	64:33	7	pb
water	64:31	0:0	8	pb
water	64:34	0:0	6	;
call	65:12	65:24	6	avio_rb32
arg	65:22	65:24	7	pb
water	65:22	0:0	8	pb
water	65:25	0:0	6	;
water	66:12	0:0	6	st
op	66:14	0:0	6	->
water	66:16	0:0	6	codec
op	66:21	0:0	6	->
water	66:23	0:0	6	bit_rate
op	66:32	0:0	6	=
call	66:34	66:46	6	avio_rb32
arg	66:44	66:46	7	pb
water	66:44	0:0	8	pb
water	66:47	0:0	6	;
call	67:12	67:24	6	avio_rb32
arg	67:22	67:24	7	pb
water	67:22	0:0	8	pb
water	67:25	0:0	6	;
call	68:12	68:24	6	avio_rb32
arg	68:22	68:24	7	pb
water	68:22	0:0	8	pb
water	68:25	0:0	6	;
water	69:12	0:0	6	start_time
op	69:23	0:0	6	=
call	69:25	69:37	6	avio_rb32
arg	69:35	69:37	7	pb
water	69:35	0:0	8	pb
water	69:38	0:0	6	;
call	70:12	70:24	6	avio_rb32
arg	70:22	70:24	7	pb
water	70:22	0:0	8	pb
water	70:25	0:0	6	;
water	71:12	0:0	6	duration
op	71:21	0:0	6	=
call	71:23	71:35	6	avio_rb32
arg	71:33	71:35	7	pb
water	71:33	0:0	8	pb
water	71:36	0:0	6	;
water	72:12	0:0	6	st
op	72:14	0:0	6	->
water	72:16	0:0	6	start_time
op	72:27	0:0	6	=
water	72:29	0:0	6	start_time
water	72:39	0:0	6	;
water	73:12	0:0	6	st
op	73:14	0:0	6	->
water	73:16	0:0	6	duration
op	73:25	0:0	6	=
water	73:27	0:0	6	duration
water	73:35	0:0	6	;
if	74:12	75:44	6	(duration > 0)
cond	74:15	74:24	7	duration > 0
water	74:15	0:0	8	duration
op	74:23	0:0	8	>
water	74:24	0:0	8	0
stmts	75:16	75:44	7	
water	75:16	0:0	8	s
op	75:17	0:0	8	->
water	75:19	0:0	8	duration
op	75:28	0:0	8	=
water	75:30	0:0	8	AV_NOPTS_VALUE
water	75:44	0:0	8	;
call	76:12	76:41	6	get_str8
arg	76:21	76:23	7	pb
water	76:21	0:0	8	pb
arg	76:25	76:28	7	buf
water	76:25	0:0	8	buf
arg	76:30	76:41	7	sizeof(buf)
op	76:30	0:0	8	sizeof
water	76:36	0:0	8	(
water	76:37	0:0	8	buf
water	76:40	0:0	8	)
water	76:42	0:0	6	;
call	77:12	77:43	6	get_str8
arg	77:21	77:23	7	pb
water	77:21	0:0	8	pb
arg	77:25	77:29	7	mime
water	77:25	0:0	8	mime
arg	77:31	77:43	7	sizeof(mime)
op	77:31	0:0	8	sizeof
water	77:37	0:0	8	(
water	77:38	0:0	8	mime
water	77:42	0:0	8	)
water	77:44	0:0	6	;
water	78:12	0:0	6	st
op	78:14	0:0	6	->
water	78:16	0:0	6	codec
op	78:21	0:0	6	->
water	78:23	0:0	6	codec_type
op	78:34	0:0	6	=
water	78:36	0:0	6	AVMEDIA_TYPE_DATA
water	78:53	0:0	6	;
water	79:12	0:0	6	st
op	79:14	0:0	6	->
water	79:16	0:0	6	priv_data
op	79:26	0:0	6	=
call	79:28	79:49	6	ff_rm_alloc_rmstream
water	79:50	0:0	6	;
if	80:12	81:38	6	(! st -> priv_data)
cond	80:16	80:21	7	! st -> priv_data
op	80:16	0:0	8	!
water	80:17	0:0	8	st
op	80:19	0:0	8	->
water	80:21	0:0	8	priv_data
stmts	81:16	81:38	7	
return	81:16	81:38	8	AVERROR(ENOMEM)
call	81:23	81:37	9	AVERROR
arg	81:31	81:37	10	ENOMEM
water	81:31	0:0	11	ENOMEM
water	82:12	0:0	6	size
op	82:17	0:0	6	=
call	82:19	82:31	6	avio_rb32
arg	82:29	82:31	7	pb
water	82:29	0:0	8	pb
water	82:32	0:0	6	;
water	83:12	0:0	6	codec_pos
op	83:22	0:0	6	=
call	83:24	83:36	6	avio_tell
arg	83:34	83:36	7	pb
water	83:34	0:0	8	pb
water	83:37	0:0	6	;
call	84:12	84:38	6	ffio_ensure_seekback
arg	84:33	84:35	7	pb
water	84:33	0:0	8	pb
arg	84:37	84:38	7	4
water	84:37	0:0	8	4
water	84:39	0:0	6	;
water	85:12	0:0	6	v
op	85:14	0:0	6	=
call	85:16	85:28	6	avio_rb32
arg	85:26	85:28	7	pb
water	85:26	0:0	8	pb
water	85:29	0:0	6	;
if	86:12	121:12	6	(v ==MKBETAG ('M' ,'L' ,'T' ,'I' ))
cond	86:16	86:47	7	v ==MKBETAG ('M' ,'L' ,'T' ,'I' )
water	86:16	0:0	8	v
op	86:18	0:0	8	==
call	86:21	86:47	8	MKBETAG
arg	86:29	86:32	9	'M'
water	86:29	0:0	10	'M'
arg	86:34	86:37	9	'L'
water	86:34	0:0	10	'L'
arg	86:39	86:42	9	'T'
water	86:39	0:0	10	'T'
arg	86:44	86:47	9	'I'
water	86:44	0:0	10	'I'
stmts	86:50	121:12	7	
water	86:50	0:0	8	{
decl	87:16	87:53	8	int	number_of_streams
op	87:38	0:0	8	=
call	87:40	87:52	9	avio_rb16
arg	87:50	87:52	10	pb
water	87:50	0:0	11	pb
decl	88:16	88:34	8	int	number_of_mdpr
decl	89:16	89:21	8	int	i
water	90:16	0:0	8	unsigned
water	90:25	0:0	8	size2
water	90:30	0:0	8	;
for	91:16	92:33	8	(i = 0 ;i < number_of_streams;i ++)
forinit	91:21	91:26	9	i = 0 ;
water	91:21	0:0	10	i
op	91:23	0:0	10	=
water	91:25	0:0	10	0
water	91:26	0:0	10	;
cond	91:28	91:30	9	i < number_of_streams
water	91:28	0:0	10	i
op	91:29	0:0	10	<
water	91:30	0:0	10	number_of_streams
forexpr	91:49	91:50	9	i ++
water	91:49	0:0	10	i
op	91:50	0:0	10	++
stmts	92:20	92:33	9	
call	92:20	92:32	10	avio_rb16
arg	92:30	92:32	11	pb
water	92:30	0:0	12	pb
water	92:33	0:0	10	;
water	93:16	0:0	8	number_of_mdpr
op	93:31	0:0	8	=
call	93:33	93:45	8	avio_rb16
arg	93:43	93:45	9	pb
water	93:43	0:0	10	pb
water	93:46	0:0	8	;
if	94:16	96:16	8	(number_of_mdpr != 1)
cond	94:20	94:38	9	number_of_mdpr != 1
water	94:20	0:0	10	number_of_mdpr
op	94:35	0:0	10	!=
water	94:38	0:0	10	1
stmts	94:41	96:16	9	
water	94:41	0:0	10	{
call	95:20	95:91	10	avpriv_request_sample
arg	95:42	95:43	11	s
water	95:42	0:0	12	s
arg	95:45	95:75	11	"MLTI with multiple (%d) MDPR"
water	95:45	0:0	12	"MLTI with multiple (%d) MDPR"
arg	95:77	95:91	11	number_of_mdpr
water	95:77	0:0	12	number_of_mdpr
water	95:92	0:0	10	;
water	96:16	0:0	10	}
for	97:16	119:16	8	(i = 0 ;i < number_of_mdpr;i ++)
forinit	97:21	97:26	9	i = 0 ;
water	97:21	0:0	10	i
op	97:23	0:0	10	=
water	97:25	0:0	10	0
water	97:26	0:0	10	;
cond	97:28	97:32	9	i < number_of_mdpr
water	97:28	0:0	10	i
op	97:30	0:0	10	<
water	97:32	0:0	10	number_of_mdpr
forexpr	97:48	97:49	9	i ++
water	97:48	0:0	10	i
op	97:49	0:0	10	++
stmts	97:53	119:16	9	
water	97:53	0:0	10	{
decl	98:20	98:33	10	AVStream	*st2
if	99:20	113:20	10	(i > 0)
cond	99:24	99:28	11	i > 0
water	99:24	0:0	12	i
op	99:26	0:0	12	>
water	99:28	0:0	12	0
stmts	99:31	113:20	11	
water	99:31	0:0	12	{
water	100:24	0:0	12	st2
op	100:28	0:0	12	=
call	100:30	100:57	12	avformat_new_stream
arg	100:50	100:51	13	s
water	100:50	0:0	14	s
arg	100:53	100:57	13	NULL
water	100:53	0:0	14	NULL
water	100:58	0:0	12	;
if	101:24	104:24	12	(! st2)
cond	101:28	101:29	13	! st2
op	101:28	0:0	14	!
water	101:29	0:0	14	st2
stmts	101:34	104:24	13	
water	101:34	0:0	14	{
water	102:28	0:0	14	ret
op	102:32	0:0	14	=
call	102:34	102:48	14	AVERROR
arg	102:42	102:48	15	ENOMEM
water	102:42	0:0	16	ENOMEM
water	102:49	0:0	14	;
goto	103:28	103:37	14	fail
water	103:33	0:0	15	fail
water	104:24	0:0	14	}
water	105:24	0:0	12	st2
op	105:27	0:0	12	->
water	105:29	0:0	12	id
op	105:32	0:0	12	=
water	105:34	0:0	12	st
op	105:36	0:0	12	->
water	105:38	0:0	12	id
op	105:41	0:0	12	+
water	105:43	0:0	12	(
water	105:44	0:0	12	i
op	105:45	0:0	12	<<
water	105:47	0:0	12	16
water	105:49	0:0	12	)
water	105:50	0:0	12	;
water	106:24	0:0	12	st2
op	106:27	0:0	12	->
water	106:29	0:0	12	codec
op	106:34	0:0	12	->
water	106:36	0:0	12	bit_rate
op	106:45	0:0	12	=
water	106:47	0:0	12	st
op	106:49	0:0	12	->
water	106:51	0:0	12	codec
op	106:56	0:0	12	->
water	106:58	0:0	12	bit_rate
water	106:66	0:0	12	;
water	107:24	0:0	12	st2
op	107:27	0:0	12	->
water	107:29	0:0	12	start_time
op	107:40	0:0	12	=
water	107:42	0:0	12	st
op	107:44	0:0	12	->
water	107:46	0:0	12	start_time
water	107:56	0:0	12	;
water	108:24	0:0	12	st2
op	108:27	0:0	12	->
water	108:29	0:0	12	duration
op	108:40	0:0	12	=
water	108:42	0:0	12	st
op	108:44	0:0	12	->
water	108:46	0:0	12	duration
water	108:54	0:0	12	;
water	109:24	0:0	12	st2
op	109:27	0:0	12	->
water	109:29	0:0	12	codec
op	109:34	0:0	12	->
water	109:36	0:0	12	codec_type
op	109:47	0:0	12	=
water	109:49	0:0	12	AVMEDIA_TYPE_DATA
water	109:66	0:0	12	;
water	110:24	0:0	12	st2
op	110:27	0:0	12	->
water	110:29	0:0	12	priv_data
op	110:39	0:0	12	=
call	110:41	110:62	12	ff_rm_alloc_rmstream
water	110:63	0:0	12	;
if	111:24	112:50	12	(! st2 -> priv_data)
cond	111:28	111:34	13	! st2 -> priv_data
op	111:28	0:0	14	!
water	111:29	0:0	14	st2
op	111:32	0:0	14	->
water	111:34	0:0	14	priv_data
stmts	112:28	112:50	13	
return	112:28	112:50	14	AVERROR(ENOMEM)
call	112:35	112:49	15	AVERROR
arg	112:43	112:49	16	ENOMEM
water	112:43	0:0	17	ENOMEM
water	113:20	0:0	12	}
else	113:22	114:32	10
stmts	114:24	114:32	11	
water	114:24	0:0	12	st2
op	114:28	0:0	12	=
water	114:30	0:0	12	st
water	114:32	0:0	12	;
water	115:20	0:0	10	size2
op	115:26	0:0	10	=
call	115:28	115:40	10	avio_rb32
arg	115:38	115:40	11	pb
water	115:38	0:0	12	pb
water	115:41	0:0	10	;
if	116:20	118:33	10	(ff_rm_read_mdpr_codecdata (s ,s -> pb ,st2 ,st2 -> priv_data ,size2 ,mime ) < 0)
cond	116:24	117:65	11	ff_rm_read_mdpr_codecdata (s ,s -> pb ,st2 ,st2 -> priv_data ,size2 ,mime ) < 0
call	116:24	117:61	12	ff_rm_read_mdpr_codecdata
arg	116:50	116:51	13	s
water	116:50	0:0	14	s
arg	116:53	116:58	13	s->pb
water	116:53	0:0	14	s
op	116:54	0:0	14	->
water	116:56	0:0	14	pb
arg	116:60	116:63	13	st2
water	116:60	0:0	14	st2
arg	116:65	116:79	13	st2->priv_data
water	116:65	0:0	14	st2
op	116:68	0:0	14	->
water	116:70	0:0	14	priv_data
arg	117:50	117:55	13	size2
water	117:50	0:0	14	size2
arg	117:57	117:61	13	mime
water	117:57	0:0	14	mime
op	117:63	0:0	12	<
water	117:65	0:0	12	0
stmts	118:24	118:33	11	
goto	118:24	118:33	12	fail
water	118:29	0:0	13	fail
water	119:16	0:0	10	}
call	120:16	120:56	8	avio_seek
arg	120:26	120:28	9	pb
water	120:26	0:0	10	pb
arg	120:30	120:46	9	codec_pos+size
water	120:30	0:0	10	codec_pos
op	120:40	0:0	10	+
water	120:42	0:0	10	size
arg	120:48	120:56	9	SEEK_SET
water	120:48	0:0	10	SEEK_SET
water	120:57	0:0	8	;
water	121:12	0:0	8	}
else	121:14	126:12	6
stmts	121:19	126:12	7	
water	121:19	0:0	8	{
call	122:16	122:32	8	avio_skip
arg	122:26	122:28	9	pb
water	122:26	0:0	10	pb
arg	122:30	122:32	9	-4
op	122:30	0:0	10	-
water	122:31	0:0	10	4
water	122:33	0:0	8	;
if	123:16	125:29	8	(ff_rm_read_mdpr_codecdata (s ,s -> pb ,st ,st -> priv_data ,size ,mime ) < 0)
cond	123:20	124:60	9	ff_rm_read_mdpr_codecdata (s ,s -> pb ,st ,st -> priv_data ,size ,mime ) < 0
call	123:20	124:56	10	ff_rm_read_mdpr_codecdata
arg	123:46	123:47	11	s
water	123:46	0:0	12	s
arg	123:49	123:54	11	s->pb
water	123:49	0:0	12	s
op	123:50	0:0	12	->
water	123:52	0:0	12	pb
arg	123:56	123:58	11	st
water	123:56	0:0	12	st
arg	123:60	123:73	11	st->priv_data
water	123:60	0:0	12	st
op	123:62	0:0	12	->
water	123:64	0:0	12	priv_data
arg	124:46	124:50	11	size
water	124:46	0:0	12	size
arg	124:52	124:56	11	mime
water	124:52	0:0	12	mime
op	124:58	0:0	10	<
water	124:60	0:0	10	0
stmts	125:20	125:29	9	
goto	125:20	125:29	10	fail
water	125:25	0:0	11	fail
water	126:12	0:0	8	}
break	127:12	127:17	6	
water	128:8	0:0	6	case
call	128:13	128:37	6	MKTAG
arg	128:19	128:22	7	'D'
water	128:19	0:0	8	'D'
arg	128:24	128:27	7	'A'
water	128:24	0:0	8	'A'
arg	128:29	128:32	7	'T'
water	128:29	0:0	8	'T'
arg	128:34	128:37	7	'A'
water	128:34	0:0	8	'A'
water	128:38	0:0	6	:
water	129:12	0:0	6	goto
water	129:17	0:0	6	header_end
water	129:27	0:0	6	;
label	130:8	130:15	6	default :
call	132:12	132:39	6	avio_skip
arg	132:22	132:24	7	pb
water	132:22	0:0	8	pb
arg	132:26	132:39	7	tag_size-10
water	132:26	0:0	8	tag_size
op	132:35	0:0	8	-
water	132:37	0:0	8	10
water	132:40	0:0	6	;
break	133:12	133:17	6	
water	134:8	0:0	6	}
water	135:4	0:0	4	}
label	136:1	136:11	2	header_end :
water	137:4	0:0	2	rm
op	137:6	0:0	2	->
water	137:8	0:0	2	nb_packets
op	137:19	0:0	2	=
call	137:21	137:33	2	avio_rb32
arg	137:31	137:33	3	pb
water	137:31	0:0	4	pb
water	137:34	0:0	2	;
if	138:4	139:34	2	(! rm -> nb_packets && ( flags & 4 ))
cond	138:8	138:37	3	! rm -> nb_packets && ( flags & 4 )
op	138:8	0:0	4	!
water	138:9	0:0	4	rm
op	138:11	0:0	4	->
water	138:13	0:0	4	nb_packets
op	138:24	0:0	4	&&
water	138:27	0:0	4	(
water	138:28	0:0	4	flags
op	138:34	0:0	4	&
water	138:36	0:0	4	4
water	138:37	0:0	4	)
stmts	139:8	139:34	3	
water	139:8	0:0	4	rm
op	139:10	0:0	4	->
water	139:12	0:0	4	nb_packets
op	139:23	0:0	4	=
water	139:25	0:0	4	3600
op	139:30	0:0	4	*
water	139:32	0:0	4	25
water	139:34	0:0	4	;
call	140:4	140:16	2	avio_rb32
arg	140:14	140:16	3	pb
water	140:14	0:0	4	pb
water	140:17	0:0	2	;
if	141:4	142:37	2	(! data_off)
cond	141:8	141:9	3	! data_off
op	141:8	0:0	4	!
water	141:9	0:0	4	data_off
stmts	142:8	142:37	3	
water	142:8	0:0	4	data_off
op	142:17	0:0	4	=
call	142:19	142:31	4	avio_tell
arg	142:29	142:31	5	pb
water	142:29	0:0	6	pb
op	142:33	0:0	4	-
water	142:35	0:0	4	18
water	142:37	0:0	4	;
if	143:4	147:4	2	(indx_off && pb -> seekable && ! ( s -> flags & AVFMT_FLAG_IGNIDX ) &&avio_seek (pb ,indx_off ,SEEK_SET ) >= 0)
cond	143:8	144:45	3	indx_off && pb -> seekable && ! ( s -> flags & AVFMT_FLAG_IGNIDX ) &&avio_seek (pb ,indx_off ,SEEK_SET ) >= 0
water	143:8	0:0	4	indx_off
op	143:17	0:0	4	&&
water	143:20	0:0	4	pb
op	143:22	0:0	4	->
water	143:24	0:0	4	seekable
op	143:33	0:0	4	&&
op	143:36	0:0	4	!
water	143:37	0:0	4	(
water	143:38	0:0	4	s
op	143:39	0:0	4	->
water	143:41	0:0	4	flags
op	143:47	0:0	4	&
water	143:49	0:0	4	AVFMT_FLAG_IGNIDX
water	143:66	0:0	4	)
op	143:68	0:0	4	&&
call	144:8	144:40	4	avio_seek
arg	144:18	144:20	5	pb
water	144:18	0:0	6	pb
arg	144:22	144:30	5	indx_off
water	144:22	0:0	6	indx_off
arg	144:32	144:40	5	SEEK_SET
water	144:32	0:0	6	SEEK_SET
op	144:42	0:0	4	>=
water	144:45	0:0	4	0
stmts	144:48	147:4	3	
water	144:48	0:0	4	{
call	145:8	145:23	4	rm_read_index
arg	145:22	145:23	5	s
water	145:22	0:0	6	s
water	145:24	0:0	4	;
call	146:8	146:45	4	avio_seek
arg	146:18	146:20	5	pb
water	146:18	0:0	6	pb
arg	146:22	146:35	5	data_off+18
water	146:22	0:0	6	data_off
op	146:31	0:0	6	+
water	146:33	0:0	6	18
arg	146:37	146:45	5	SEEK_SET
water	146:37	0:0	6	SEEK_SET
water	146:46	0:0	4	;
water	147:4	0:0	4	}
return	148:4	148:12	2	0
water	148:11	0:0	3	0
label	149:0	149:4	2	fail :
call	150:4	150:19	2	rm_read_close
arg	150:18	150:19	3	s
water	150:18	0:0	4	s
water	150:20	0:0	2	;
return	151:4	151:14	2	ret
water	151:11	0:0	3	ret
