func	1:0	77:0	0	static inline int	mpeg1_decode_block_intra
params	1:42	0:0	1	
param	1:43	1:60	2	MpegEncContext *	s
param	2:43	2:57	2	int16_t *	block
param	2:59	2:64	2	int	n
stmnts	0:0	76:12	1	
decl	4:4	4:34	2	int	level
water	4:13	0:0	2	,
decl	4:4	4:34	2	int	dc
water	4:17	0:0	2	,
decl	4:4	4:34	2	int	diff
water	4:23	0:0	2	,
decl	4:4	4:34	2	int	i
water	4:26	0:0	2	,
decl	4:4	4:34	2	int	j
water	4:29	0:0	2	,
decl	4:4	4:34	2	int	run
decl	5:4	5:17	2	int	component
decl	6:4	6:47	2	RLTable	*rl
op	6:33	0:0	2	=
op	6:35	0:0	2	&
water	6:36	0:0	2	ff_rl_mpeg1
water	7:4	0:0	2	uint8_t
op	7:12	0:0	2	*
water	7:13	0:0	2	const
water	7:19	0:0	2	scantable
op	7:33	0:0	2	=
water	7:35	0:0	2	s
op	7:36	0:0	2	->
water	7:38	0:0	2	intra_scantable
op	7:53	0:0	2	.
water	7:54	0:0	2	permutated
water	7:64	0:0	2	;
decl	8:4	8:50	2	const uint16_t	*quant_matrix
op	8:33	0:0	2	=
water	8:35	0:0	2	s
op	8:36	0:0	2	->
water	8:38	0:0	2	intra_matrix
decl	9:4	9:44	2	const int	qscale
op	9:33	0:0	2	=
water	9:35	0:0	2	s
op	9:36	0:0	2	->
water	9:38	0:0	2	qscale
water	11:4	0:0	2	component
op	11:14	0:0	2	=
water	11:16	0:0	2	(
water	11:17	0:0	2	n
op	11:19	0:0	2	<=
water	11:22	0:0	2	3
water	11:24	0:0	2	?
water	11:26	0:0	2	0
water	11:28	0:0	2	:
water	11:30	0:0	2	n
op	11:32	0:0	2	-
water	11:34	0:0	2	4
op	11:36	0:0	2	+
water	11:38	0:0	2	1
water	11:39	0:0	2	)
water	11:40	0:0	2	;
water	12:4	0:0	2	diff
op	12:9	0:0	2	=
call	12:11	12:38	2	decode_dc
arg	12:21	12:27	3	&s->gb
op	12:21	0:0	4	&
water	12:22	0:0	4	s
op	12:23	0:0	4	->
water	12:25	0:0	4	gb
arg	12:29	12:38	3	component
water	12:29	0:0	4	component
water	12:39	0:0	2	;
if	13:4	14:34	2	(diff >= 0 xffff)
cond	13:8	13:17	3	diff >= 0 xffff
water	13:8	0:0	4	diff
op	13:13	0:0	4	>=
water	13:16	0:0	4	0
water	13:17	0:0	4	xffff
stmts	14:8	14:34	3	
return	14:8	14:34	4	AVERROR_INVALIDDATA
water	14:15	0:0	5	AVERROR_INVALIDDATA
water	15:4	0:0	2	dc
op	15:8	0:0	2	=
water	15:10	0:0	2	s
op	15:11	0:0	2	->
water	15:13	0:0	2	last_dc
op	15:20	0:0	2	[
water	15:21	0:0	2	component
op	15:30	0:0	2	]
water	15:31	0:0	2	;
water	16:4	0:0	2	dc
op	16:7	0:0	2	+=
water	16:10	0:0	2	diff
water	16:14	0:0	2	;
water	17:4	0:0	2	s
op	17:5	0:0	2	->
water	17:7	0:0	2	last_dc
op	17:14	0:0	2	[
water	17:15	0:0	2	component
op	17:24	0:0	2	]
op	17:26	0:0	2	=
water	17:28	0:0	2	dc
water	17:30	0:0	2	;
water	18:4	0:0	2	block
op	18:9	0:0	2	[
water	18:10	0:0	2	0
op	18:11	0:0	2	]
op	18:13	0:0	2	=
water	18:15	0:0	2	dc
op	18:18	0:0	2	*
water	18:20	0:0	2	quant_matrix
op	18:32	0:0	2	[
water	18:33	0:0	2	0
op	18:34	0:0	2	]
water	18:35	0:0	2	;
call	19:4	19:49	2	ff_tlog
arg	19:12	19:20	3	s->avctx
water	19:12	0:0	4	s
op	19:13	0:0	4	->
water	19:15	0:0	4	avctx
arg	19:22	19:39	3	"dc=%d diff=%d\n"
water	19:22	0:0	4	"dc=%d diff=%d\n"
arg	19:41	19:43	3	dc
water	19:41	0:0	4	dc
arg	19:45	19:49	3	diff
water	19:45	0:0	4	diff
water	19:50	0:0	2	;
water	20:4	0:0	2	i
op	20:6	0:0	2	=
water	20:8	0:0	2	0
water	20:9	0:0	2	;
water	21:4	0:0	2	{
call	22:8	22:30	2	OPEN_READER
arg	22:20	22:22	3	re
water	22:20	0:0	4	re
arg	22:24	22:30	3	&s->gb
op	22:24	0:0	4	&
water	22:25	0:0	4	s
op	22:26	0:0	4	->
water	22:28	0:0	4	gb
water	22:31	0:0	2	;
call	23:8	23:31	2	UPDATE_CACHE
arg	23:21	23:23	3	re
water	23:21	0:0	4	re
arg	23:25	23:31	3	&s->gb
op	23:25	0:0	4	&
water	23:26	0:0	4	s
op	23:27	0:0	4	->
water	23:29	0:0	4	gb
water	23:32	0:0	2	;
if	24:8	25:20	2	(( ( int32_t )GET_CACHE (re ,& s -> gb ) ) <= ( int32_t ) 0 xBFFFFFFF)
cond	24:12	24:58	3	( ( int32_t )GET_CACHE (re ,& s -> gb ) ) <= ( int32_t ) 0 xBFFFFFFF
water	24:12	0:0	4	(
water	24:13	0:0	4	(
water	24:14	0:0	4	int32_t
water	24:21	0:0	4	)
call	24:22	24:42	4	GET_CACHE
arg	24:32	24:34	5	re
water	24:32	0:0	6	re
arg	24:36	24:42	5	&s->gb
op	24:36	0:0	6	&
water	24:37	0:0	6	s
op	24:38	0:0	6	->
water	24:40	0:0	6	gb
water	24:43	0:0	4	)
op	24:45	0:0	4	<=
water	24:48	0:0	4	(
water	24:49	0:0	4	int32_t
water	24:56	0:0	4	)
water	24:57	0:0	4	0
water	24:58	0:0	4	xBFFFFFFF
stmts	25:12	25:20	3	
goto	25:12	25:20	4	end
water	25:17	0:0	5	end
for	27:8	70:8	2	(;;)
forinit	27:13	27:13	3	;
water	27:13	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	27:17	70:8	3	
water	27:17	0:0	4	{
call	28:12	29:41	4	GET_RL_VLC
arg	28:23	28:28	5	level
water	28:23	0:0	6	level
arg	28:30	28:33	5	run
water	28:30	0:0	6	run
arg	28:35	28:37	5	re
water	28:35	0:0	6	re
arg	28:39	28:45	5	&s->gb
op	28:39	0:0	6	&
water	28:40	0:0	6	s
op	28:41	0:0	6	->
water	28:43	0:0	6	gb
arg	28:47	28:60	5	rl->rl_vlc[0]
water	28:47	0:0	6	rl
op	28:49	0:0	6	->
water	28:51	0:0	6	rl_vlc
op	28:57	0:0	6	[
water	28:58	0:0	6	0
op	28:59	0:0	6	]
arg	29:23	29:35	5	TEX_VLC_BITS
water	29:23	0:0	6	TEX_VLC_BITS
arg	29:37	29:38	5	2
water	29:37	0:0	6	2
arg	29:40	29:41	5	0
water	29:40	0:0	6	0
water	29:42	0:0	4	;
if	30:12	39:12	4	(level != 0)
cond	30:16	30:25	5	level != 0
water	30:16	0:0	6	level
op	30:22	0:0	6	!=
water	30:25	0:0	6	0
stmts	30:28	39:12	5	
water	30:28	0:0	6	{
water	31:16	0:0	6	i
op	31:18	0:0	6	+=
water	31:21	0:0	6	run
water	31:24	0:0	6	;
call	32:16	32:42	6	check_scantable_index
arg	32:38	32:39	7	s
water	32:38	0:0	8	s
arg	32:41	32:42	7	i
water	32:41	0:0	8	i
water	32:43	0:0	6	;
water	33:16	0:0	6	j
op	33:18	0:0	6	=
water	33:20	0:0	6	scantable
op	33:29	0:0	6	[
water	33:30	0:0	6	i
op	33:31	0:0	6	]
water	33:32	0:0	6	;
water	34:16	0:0	6	level
op	34:22	0:0	6	=
water	34:24	0:0	6	(
water	34:25	0:0	6	level
op	34:31	0:0	6	*
water	34:33	0:0	6	qscale
op	34:40	0:0	6	*
water	34:42	0:0	6	quant_matrix
op	34:54	0:0	6	[
water	34:55	0:0	6	j
op	34:56	0:0	6	]
water	34:57	0:0	6	)
op	34:59	0:0	6	>>
water	34:62	0:0	6	4
water	34:63	0:0	6	;
water	35:16	0:0	6	level
op	35:22	0:0	6	=
water	35:24	0:0	6	(
water	35:25	0:0	6	level
op	35:31	0:0	6	-
water	35:33	0:0	6	1
water	35:34	0:0	6	)
op	35:36	0:0	6	|
water	35:38	0:0	6	1
water	35:39	0:0	6	;
water	36:16	0:0	6	level
op	36:22	0:0	6	=
water	36:24	0:0	6	(
water	36:25	0:0	6	level
op	36:31	0:0	6	^
call	36:33	36:57	6	SHOW_SBITS
arg	36:44	36:46	7	re
water	36:44	0:0	8	re
arg	36:48	36:54	7	&s->gb
op	36:48	0:0	8	&
water	36:49	0:0	8	s
op	36:50	0:0	8	->
water	36:52	0:0	8	gb
arg	36:56	36:57	7	1
water	36:56	0:0	8	1
water	36:58	0:0	6	)
op	36:60	0:0	6	-
call	37:24	37:48	6	SHOW_SBITS
arg	37:35	37:37	7	re
water	37:35	0:0	8	re
arg	37:39	37:45	7	&s->gb
op	37:39	0:0	8	&
water	37:40	0:0	8	s
op	37:41	0:0	8	->
water	37:43	0:0	8	gb
arg	37:47	37:48	7	1
water	37:47	0:0	8	1
water	37:49	0:0	6	;
call	38:16	38:39	6	SKIP_BITS
arg	38:26	38:28	7	re
water	38:26	0:0	8	re
arg	38:30	38:36	7	&s->gb
op	38:30	0:0	8	&
water	38:31	0:0	8	s
op	38:32	0:0	8	->
water	38:34	0:0	8	gb
arg	38:38	38:39	7	1
water	38:38	0:0	8	1
water	38:40	0:0	6	;
water	39:12	0:0	6	}
else	39:14	65:12	4
stmts	39:19	65:12	5	
water	39:19	0:0	6	{
water	41:16	0:0	6	run
op	41:20	0:0	6	=
call	41:22	41:46	6	SHOW_UBITS
arg	41:33	41:35	7	re
water	41:33	0:0	8	re
arg	41:37	41:43	7	&s->gb
op	41:37	0:0	8	&
water	41:38	0:0	8	s
op	41:39	0:0	8	->
water	41:41	0:0	8	gb
arg	41:45	41:46	7	6
water	41:45	0:0	8	6
op	41:48	0:0	6	+
water	41:50	0:0	6	1
water	41:51	0:0	6	;
call	42:16	42:44	6	LAST_SKIP_BITS
arg	42:31	42:33	7	re
water	42:31	0:0	8	re
arg	42:35	42:41	7	&s->gb
op	42:35	0:0	8	&
water	42:36	0:0	8	s
op	42:37	0:0	8	->
water	42:39	0:0	8	gb
arg	42:43	42:44	7	6
water	42:43	0:0	8	6
water	42:45	0:0	6	;
call	43:16	43:39	6	UPDATE_CACHE
arg	43:29	43:31	7	re
water	43:29	0:0	8	re
arg	43:33	43:39	7	&s->gb
op	43:33	0:0	8	&
water	43:34	0:0	8	s
op	43:35	0:0	8	->
water	43:37	0:0	8	gb
water	43:40	0:0	6	;
water	44:16	0:0	6	level
op	44:22	0:0	6	=
call	44:24	44:48	6	SHOW_SBITS
arg	44:35	44:37	7	re
water	44:35	0:0	8	re
arg	44:39	44:45	7	&s->gb
op	44:39	0:0	8	&
water	44:40	0:0	8	s
op	44:41	0:0	8	->
water	44:43	0:0	8	gb
arg	44:47	44:48	7	8
water	44:47	0:0	8	8
water	44:49	0:0	6	;
call	45:16	45:39	6	SKIP_BITS
arg	45:26	45:28	7	re
water	45:26	0:0	8	re
arg	45:30	45:36	7	&s->gb
op	45:30	0:0	8	&
water	45:31	0:0	8	s
op	45:32	0:0	8	->
water	45:34	0:0	8	gb
arg	45:38	45:39	7	8
water	45:38	0:0	8	8
water	45:40	0:0	6	;
if	46:16	49:16	6	(level == - 128)
cond	46:20	46:30	7	level == - 128
water	46:20	0:0	8	level
op	46:26	0:0	8	==
op	46:29	0:0	8	-
water	46:30	0:0	8	128
stmts	46:35	49:16	7	
water	46:35	0:0	8	{
water	47:20	0:0	8	level
op	47:26	0:0	8	=
call	47:28	47:52	8	SHOW_UBITS
arg	47:39	47:41	9	re
water	47:39	0:0	10	re
arg	47:43	47:49	9	&s->gb
op	47:43	0:0	10	&
water	47:44	0:0	10	s
op	47:45	0:0	10	->
water	47:47	0:0	10	gb
arg	47:51	47:52	9	8
water	47:51	0:0	10	8
op	47:54	0:0	8	-
water	47:56	0:0	8	256
water	47:59	0:0	8	;
call	48:20	48:43	8	SKIP_BITS
arg	48:30	48:32	9	re
water	48:30	0:0	10	re
arg	48:34	48:40	9	&s->gb
op	48:34	0:0	10	&
water	48:35	0:0	10	s
op	48:36	0:0	10	->
water	48:38	0:0	10	gb
arg	48:42	48:43	9	8
water	48:42	0:0	10	8
water	48:44	0:0	8	;
water	49:16	0:0	8	}
else	49:18	52:16	6
stmts	49:23	52:16	7	
if	49:23	52:16	8	(level == 0)
cond	49:27	49:36	9	level == 0
water	49:27	0:0	10	level
op	49:33	0:0	10	==
water	49:36	0:0	10	0
stmts	49:39	52:16	9	
water	49:39	0:0	10	{
water	50:20	0:0	10	level
op	50:26	0:0	10	=
call	50:28	50:52	10	SHOW_UBITS
arg	50:39	50:41	11	re
water	50:39	0:0	12	re
arg	50:43	50:49	11	&s->gb
op	50:43	0:0	12	&
water	50:44	0:0	12	s
op	50:45	0:0	12	->
water	50:47	0:0	12	gb
arg	50:51	50:52	11	8
water	50:51	0:0	12	8
water	50:53	0:0	10	;
call	51:20	51:43	10	SKIP_BITS
arg	51:30	51:32	11	re
water	51:30	0:0	12	re
arg	51:34	51:40	11	&s->gb
op	51:34	0:0	12	&
water	51:35	0:0	12	s
op	51:36	0:0	12	->
water	51:38	0:0	12	gb
arg	51:42	51:43	11	8
water	51:42	0:0	12	8
water	51:44	0:0	10	;
water	52:16	0:0	10	}
water	53:16	0:0	6	i
op	53:18	0:0	6	+=
water	53:21	0:0	6	run
water	53:24	0:0	6	;
call	54:16	54:42	6	check_scantable_index
arg	54:38	54:39	7	s
water	54:38	0:0	8	s
arg	54:41	54:42	7	i
water	54:41	0:0	8	i
water	54:43	0:0	6	;
water	55:16	0:0	6	j
op	55:18	0:0	6	=
water	55:20	0:0	6	scantable
op	55:29	0:0	6	[
water	55:30	0:0	6	i
op	55:31	0:0	6	]
water	55:32	0:0	6	;
if	56:16	61:16	6	(level < 0)
cond	56:20	56:28	7	level < 0
water	56:20	0:0	8	level
op	56:26	0:0	8	<
water	56:28	0:0	8	0
stmts	56:31	61:16	7	
water	56:31	0:0	8	{
water	57:20	0:0	8	level
op	57:26	0:0	8	=
op	57:28	0:0	8	-
water	57:29	0:0	8	level
water	57:34	0:0	8	;
water	58:20	0:0	8	level
op	58:26	0:0	8	=
water	58:28	0:0	8	(
water	58:29	0:0	8	level
op	58:35	0:0	8	*
water	58:37	0:0	8	qscale
op	58:44	0:0	8	*
water	58:46	0:0	8	quant_matrix
op	58:58	0:0	8	[
water	58:59	0:0	8	j
op	58:60	0:0	8	]
water	58:61	0:0	8	)
op	58:63	0:0	8	>>
water	58:66	0:0	8	4
water	58:67	0:0	8	;
water	59:20	0:0	8	level
op	59:26	0:0	8	=
water	59:28	0:0	8	(
water	59:29	0:0	8	level
op	59:35	0:0	8	-
water	59:37	0:0	8	1
water	59:38	0:0	8	)
op	59:40	0:0	8	|
water	59:42	0:0	8	1
water	59:43	0:0	8	;
water	60:20	0:0	8	level
op	60:26	0:0	8	=
op	60:28	0:0	8	-
water	60:29	0:0	8	level
water	60:34	0:0	8	;
water	61:16	0:0	8	}
else	61:18	64:16	6
stmts	61:23	64:16	7	
water	61:23	0:0	8	{
water	62:20	0:0	8	level
op	62:26	0:0	8	=
water	62:28	0:0	8	(
water	62:29	0:0	8	level
op	62:35	0:0	8	*
water	62:37	0:0	8	qscale
op	62:44	0:0	8	*
water	62:46	0:0	8	quant_matrix
op	62:58	0:0	8	[
water	62:59	0:0	8	j
op	62:60	0:0	8	]
water	62:61	0:0	8	)
op	62:63	0:0	8	>>
water	62:66	0:0	8	4
water	62:67	0:0	8	;
water	63:20	0:0	8	level
op	63:26	0:0	8	=
water	63:28	0:0	8	(
water	63:29	0:0	8	level
op	63:35	0:0	8	-
water	63:37	0:0	8	1
water	63:38	0:0	8	)
op	63:40	0:0	8	|
water	63:42	0:0	8	1
water	63:43	0:0	8	;
water	64:16	0:0	8	}
water	65:12	0:0	6	}
water	66:12	0:0	4	block
op	66:17	0:0	4	[
water	66:18	0:0	4	j
op	66:19	0:0	4	]
op	66:21	0:0	4	=
water	66:23	0:0	4	level
water	66:28	0:0	4	;
if	67:12	68:20	4	(( ( int32_t )GET_CACHE (re ,& s -> gb ) ) <= ( int32_t ) 0 xBFFFFFFF)
cond	67:16	67:62	5	( ( int32_t )GET_CACHE (re ,& s -> gb ) ) <= ( int32_t ) 0 xBFFFFFFF
water	67:16	0:0	6	(
water	67:17	0:0	6	(
water	67:18	0:0	6	int32_t
water	67:25	0:0	6	)
call	67:26	67:46	6	GET_CACHE
arg	67:36	67:38	7	re
water	67:36	0:0	8	re
arg	67:40	67:46	7	&s->gb
op	67:40	0:0	8	&
water	67:41	0:0	8	s
op	67:42	0:0	8	->
water	67:44	0:0	8	gb
water	67:47	0:0	6	)
op	67:49	0:0	6	<=
water	67:52	0:0	6	(
water	67:53	0:0	6	int32_t
water	67:60	0:0	6	)
water	67:61	0:0	6	0
water	67:62	0:0	6	xBFFFFFFF
stmts	68:15	68:20	5	
break	68:15	68:20	6	
call	69:12	69:35	4	UPDATE_CACHE
arg	69:25	69:27	5	re
water	69:25	0:0	6	re
arg	69:29	69:35	5	&s->gb
op	69:29	0:0	6	&
water	69:30	0:0	6	s
op	69:31	0:0	6	->
water	69:33	0:0	6	gb
water	69:36	0:0	4	;
water	70:8	0:0	4	}
label	71:0	71:3	2	end :
call	72:8	72:36	2	LAST_SKIP_BITS
arg	72:23	72:25	3	re
water	72:23	0:0	4	re
arg	72:27	72:33	3	&s->gb
op	72:27	0:0	4	&
water	72:28	0:0	4	s
op	72:29	0:0	4	->
water	72:31	0:0	4	gb
arg	72:35	72:36	3	2
water	72:35	0:0	4	2
water	72:37	0:0	2	;
call	73:8	73:31	2	CLOSE_READER
arg	73:21	73:23	3	re
water	73:21	0:0	4	re
arg	73:25	73:31	3	&s->gb
op	73:25	0:0	4	&
water	73:26	0:0	4	s
op	73:27	0:0	4	->
water	73:29	0:0	4	gb
water	73:32	0:0	2	;
water	74:4	0:0	2	}
water	75:4	0:0	2	s
op	75:5	0:0	2	->
water	75:7	0:0	2	block_last_index
op	75:23	0:0	2	[
water	75:24	0:0	2	n
op	75:25	0:0	2	]
op	75:27	0:0	2	=
water	75:29	0:0	2	i
water	75:30	0:0	2	;
return	76:4	76:12	2	0
water	76:11	0:0	3	0
