func	1:0	90:0	0	static void	show_frame
params	1:22	0:0	1	
param	1:23	1:39	2	WriterContext *	w
param	1:41	1:55	2	AVFrame *	frame
param	1:57	1:73	2	AVStream *	stream
param	2:23	2:47	2	AVFormatContext *	fmt_ctx
stmnts	0:0	89:18	1	
decl	4:4	4:17	2	AVBPrint	pbuf
decl	5:4	5:21	2	char	val_str[128]
decl	6:4	6:17	2	const char	*s
decl	7:4	7:9	2	int	i
call	8:4	8:53	2	av_bprint_init
arg	8:19	8:24	3	&pbuf
op	8:19	0:0	4	&
water	8:20	0:0	4	pbuf
arg	8:26	8:27	3	1
water	8:26	0:0	4	1
arg	8:29	8:53	3	AV_BPRINT_SIZE_UNLIMITED
water	8:29	0:0	4	AV_BPRINT_SIZE_UNLIMITED
water	8:54	0:0	2	;
call	9:4	9:51	2	writer_print_section_header
arg	9:32	9:33	3	w
water	9:32	0:0	4	w
arg	9:35	9:51	3	SECTION_ID_FRAME
water	9:35	0:0	4	SECTION_ID_FRAME
water	9:52	0:0	2	;
water	10:4	0:0	2	s
op	10:6	0:0	2	=
call	10:8	10:61	2	av_get_media_type_string
arg	10:33	10:61	3	stream->codecpar->codec_type
water	10:33	0:0	4	stream
op	10:39	0:0	4	->
water	10:41	0:0	4	codecpar
op	10:49	0:0	4	->
water	10:51	0:0	4	codec_type
water	10:62	0:0	2	;
if	11:4	11:41	2	(s)
cond	11:8	11:8	3	s
water	11:8	0:0	4	s
stmts	11:11	11:41	3	
call	11:11	11:40	4	print_str
arg	11:25	11:37	5	"media_type"
water	11:25	0:0	6	"media_type"
arg	11:39	11:40	5	s
water	11:39	0:0	6	s
water	11:41	0:0	4	;
else	12:4	12:49	2
stmts	12:11	12:49	3	
call	12:11	12:48	4	print_str_opt
arg	12:25	12:37	5	"media_type"
water	12:25	0:0	6	"media_type"
arg	12:39	12:48	5	"unknown"
water	12:39	0:0	6	"unknown"
water	12:49	0:0	4	;
call	13:4	13:53	2	print_int
arg	13:14	13:28	3	"stream_index"
water	13:14	0:0	4	"stream_index"
arg	13:40	13:53	3	stream->index
water	13:40	0:0	4	stream
op	13:46	0:0	4	->
water	13:48	0:0	4	index
water	13:54	0:0	2	;
call	14:4	14:56	2	print_int
arg	14:14	14:25	3	"key_frame"
water	14:14	0:0	4	"key_frame"
arg	14:40	14:56	3	frame->key_frame
water	14:40	0:0	4	frame
op	14:45	0:0	4	->
water	14:47	0:0	4	key_frame
water	14:57	0:0	2	;
call	15:4	15:50	2	print_ts
arg	15:15	15:24	3	"pkt_pts"
water	15:15	0:0	4	"pkt_pts"
arg	15:40	15:50	3	frame->pts
water	15:40	0:0	4	frame
op	15:45	0:0	4	->
water	15:47	0:0	4	pts
water	15:51	0:0	2	;
call	16:4	16:70	2	print_time
arg	16:15	16:29	3	"pkt_pts_time"
water	16:15	0:0	4	"pkt_pts_time"
arg	16:40	16:50	3	frame->pts
water	16:40	0:0	4	frame
op	16:45	0:0	4	->
water	16:47	0:0	4	pts
arg	16:52	16:70	3	&stream->time_base
op	16:52	0:0	4	&
water	16:53	0:0	4	stream
op	16:59	0:0	4	->
water	16:61	0:0	4	time_base
water	16:71	0:0	2	;
call	17:4	17:54	2	print_ts
arg	17:15	17:24	3	"pkt_dts"
water	17:15	0:0	4	"pkt_dts"
arg	17:40	17:54	3	frame->pkt_dts
water	17:40	0:0	4	frame
op	17:45	0:0	4	->
water	17:47	0:0	4	pkt_dts
water	17:55	0:0	2	;
call	18:4	18:74	2	print_time
arg	18:15	18:29	3	"pkt_dts_time"
water	18:15	0:0	4	"pkt_dts_time"
arg	18:40	18:54	3	frame->pkt_dts
water	18:40	0:0	4	frame
op	18:45	0:0	4	->
water	18:47	0:0	4	pkt_dts
arg	18:56	18:74	3	&stream->time_base
op	18:56	0:0	4	&
water	18:57	0:0	4	stream
op	18:63	0:0	4	->
water	18:65	0:0	4	time_base
water	18:75	0:0	2	;
call	19:4	19:81	2	print_ts
arg	19:15	19:38	3	"best_effort_timestamp"
water	19:15	0:0	4	"best_effort_timestamp"
arg	19:40	19:81	3	av_frame_get_best_effort_timestamp(frame)
call	19:40	19:80	4	av_frame_get_best_effort_timestamp
arg	19:75	19:80	5	frame
water	19:75	0:0	6	frame
water	19:82	0:0	2	;
call	20:4	20:106	2	print_time
arg	20:15	20:43	3	"best_effort_timestamp_time"
water	20:15	0:0	4	"best_effort_timestamp_time"
arg	20:45	20:86	3	av_frame_get_best_effort_timestamp(frame)
call	20:45	20:85	4	av_frame_get_best_effort_timestamp
arg	20:80	20:85	5	frame
water	20:80	0:0	6	frame
arg	20:88	20:106	3	&stream->time_base
op	20:88	0:0	4	&
water	20:89	0:0	4	stream
op	20:95	0:0	4	->
water	20:97	0:0	4	time_base
water	20:107	0:0	2	;
call	21:4	21:77	2	print_duration_ts
arg	21:24	21:38	3	"pkt_duration"
water	21:24	0:0	4	"pkt_duration"
arg	21:45	21:77	3	av_frame_get_pkt_duration(frame)
call	21:45	21:76	4	av_frame_get_pkt_duration
arg	21:71	21:76	5	frame
water	21:71	0:0	6	frame
water	21:78	0:0	2	;
call	22:4	22:97	2	print_duration_time
arg	22:24	22:43	3	"pkt_duration_time"
water	22:24	0:0	4	"pkt_duration_time"
arg	22:45	22:77	3	av_frame_get_pkt_duration(frame)
call	22:45	22:76	4	av_frame_get_pkt_duration
arg	22:71	22:76	5	frame
water	22:71	0:0	6	frame
arg	22:79	22:97	3	&stream->time_base
op	22:79	0:0	4	&
water	22:80	0:0	4	stream
op	22:86	0:0	4	->
water	22:88	0:0	4	time_base
water	22:98	0:0	2	;
if	23:4	23:108	2	(av_frame_get_pkt_pos (frame ) != - 1)
cond	23:8	23:41	3	av_frame_get_pkt_pos (frame ) != - 1
call	23:8	23:35	4	av_frame_get_pkt_pos
arg	23:30	23:35	5	frame
water	23:30	0:0	6	frame
op	23:37	0:0	4	!=
op	23:40	0:0	4	-
water	23:41	0:0	4	1
stmts	23:44	23:108	3	
call	23:44	23:107	4	print_fmt
arg	23:58	23:67	5	"pkt_pos"
water	23:58	0:0	6	"pkt_pos"
arg	23:69	23:78	5	"%"PRId64
water	23:69	0:0	6	"%"
water	23:72	0:0	6	PRId64
arg	23:80	23:107	5	av_frame_get_pkt_pos(frame)
call	23:80	23:106	6	av_frame_get_pkt_pos
arg	23:101	23:106	7	frame
water	23:101	0:0	8	frame
water	23:108	0:0	4	;
else	24:4	24:61	2
stmts	24:30	24:61	3	
call	24:30	24:60	4	print_str_opt
arg	24:44	24:53	5	"pkt_pos"
water	24:44	0:0	6	"pkt_pos"
arg	24:55	24:60	5	"N/A"
water	24:55	0:0	6	"N/A"
water	24:61	0:0	4	;
if	25:4	25:114	2	(av_frame_get_pkt_size (frame ) != - 1)
cond	25:8	25:41	3	av_frame_get_pkt_size (frame ) != - 1
call	25:8	25:35	4	av_frame_get_pkt_size
arg	25:30	25:35	5	frame
water	25:30	0:0	6	frame
op	25:37	0:0	4	!=
op	25:40	0:0	4	-
water	25:41	0:0	4	1
stmts	25:44	25:114	3	
call	25:44	25:113	4	print_val
arg	25:58	25:68	5	"pkt_size"
water	25:58	0:0	6	"pkt_size"
arg	25:70	25:98	5	av_frame_get_pkt_size(frame)
call	25:70	25:97	6	av_frame_get_pkt_size
arg	25:92	25:97	7	frame
water	25:92	0:0	8	frame
arg	25:100	25:113	5	unit_byte_str
water	25:100	0:0	6	unit_byte_str
water	25:114	0:0	4	;
else	26:4	26:63	2
stmts	26:31	26:63	3	
call	26:31	26:62	4	print_str_opt
arg	26:45	26:55	5	"pkt_size"
water	26:45	0:0	6	"pkt_size"
arg	26:57	26:62	5	"N/A"
water	26:57	0:0	6	"N/A"
water	26:63	0:0	4	;
switch	27:4	62:4	2	(stream -> codecpar -> codec_type)
cond	27:12	27:30	3	stream -> codecpar -> codec_type
water	27:12	0:0	4	stream
op	27:18	0:0	4	->
water	27:20	0:0	4	codecpar
op	27:28	0:0	4	->
water	27:30	0:0	4	codec_type
stmts	27:42	62:4	3	
water	27:42	0:0	4	{
decl	28:8	28:22	4	AVRational	sar
label	29:4	29:27	4	case AVMEDIA_TYPE_VIDEO :
call	30:8	30:56	4	print_int
arg	30:18	30:25	5	"width"
water	30:18	0:0	6	"width"
arg	30:44	30:56	5	frame->width
water	30:44	0:0	6	frame
op	30:49	0:0	6	->
water	30:51	0:0	6	width
water	30:57	0:0	4	;
call	31:8	31:57	4	print_int
arg	31:18	31:26	5	"height"
water	31:18	0:0	6	"height"
arg	31:44	31:57	5	frame->height
water	31:44	0:0	6	frame
op	31:49	0:0	6	->
water	31:51	0:0	6	height
water	31:58	0:0	4	;
water	32:8	0:0	4	s
op	32:10	0:0	4	=
call	32:12	32:45	4	av_get_pix_fmt_name
arg	32:32	32:45	5	frame->format
water	32:32	0:0	6	frame
op	32:37	0:0	6	->
water	32:39	0:0	6	format
water	32:46	0:0	4	;
if	33:8	33:42	4	(s)
cond	33:12	33:12	5	s
water	33:12	0:0	6	s
stmts	33:15	33:42	5	
call	33:15	33:41	6	print_str
arg	33:29	33:38	7	"pix_fmt"
water	33:29	0:0	8	"pix_fmt"
arg	33:40	33:41	7	s
water	33:40	0:0	8	s
water	33:42	0:0	6	;
else	34:8	34:50	4
stmts	34:15	34:50	5	
call	34:15	34:49	6	print_str_opt
arg	34:29	34:38	7	"pix_fmt"
water	34:29	0:0	8	"pix_fmt"
arg	34:40	34:49	7	"unknown"
water	34:40	0:0	8	"unknown"
water	34:50	0:0	6	;
water	35:8	0:0	4	sar
op	35:12	0:0	4	=
call	35:14	35:65	4	av_guess_sample_aspect_ratio
arg	35:43	35:50	5	fmt_ctx
water	35:43	0:0	6	fmt_ctx
arg	35:52	35:58	5	stream
water	35:52	0:0	6	stream
arg	35:60	35:65	5	frame
water	35:60	0:0	6	frame
water	35:66	0:0	4	;
if	36:8	38:8	4	(sar . num)
cond	36:12	36:16	5	sar . num
water	36:12	0:0	6	sar
op	36:15	0:0	6	.
water	36:16	0:0	6	num
stmts	36:21	38:8	5	
water	36:21	0:0	6	{
call	37:12	37:51	6	print_q
arg	37:20	37:41	7	"sample_aspect_ratio"
water	37:20	0:0	8	"sample_aspect_ratio"
arg	37:43	37:46	7	sar
water	37:43	0:0	8	sar
arg	37:48	37:51	7	':'
water	37:48	0:0	8	':'
water	37:52	0:0	6	;
water	38:8	0:0	6	}
else	38:10	40:8	4
stmts	38:15	40:8	5	
water	38:15	0:0	6	{
call	39:12	39:54	6	print_str_opt
arg	39:26	39:47	7	"sample_aspect_ratio"
water	39:26	0:0	8	"sample_aspect_ratio"
arg	39:49	39:54	7	"N/A"
water	39:49	0:0	8	"N/A"
water	39:55	0:0	6	;
water	40:8	0:0	6	}
call	41:8	41:92	4	print_fmt
arg	41:18	41:29	5	"pict_type"
water	41:18	0:0	6	"pict_type"
arg	41:44	41:48	5	"%c"
water	41:44	0:0	6	"%c"
arg	41:50	41:92	5	av_get_picture_type_char(frame->pict_type)
call	41:50	41:91	6	av_get_picture_type_char
arg	41:75	41:91	7	frame->pict_type
water	41:75	0:0	8	frame
op	41:80	0:0	8	->
water	41:82	0:0	8	pict_type
water	41:93	0:0	4	;
call	42:8	42:71	4	print_int
arg	42:18	42:40	5	"coded_picture_number"
water	42:18	0:0	6	"coded_picture_number"
arg	42:44	42:71	5	frame->coded_picture_number
water	42:44	0:0	6	frame
op	42:49	0:0	6	->
water	42:51	0:0	6	coded_picture_number
water	42:72	0:0	4	;
call	43:8	43:73	4	print_int
arg	43:18	43:42	5	"display_picture_number"
water	43:18	0:0	6	"display_picture_number"
arg	43:44	43:73	5	frame->display_picture_number
water	43:44	0:0	6	frame
op	43:49	0:0	6	->
water	43:51	0:0	6	display_picture_number
water	43:74	0:0	4	;
call	44:8	44:67	4	print_int
arg	44:18	44:36	5	"interlaced_frame"
water	44:18	0:0	6	"interlaced_frame"
arg	44:44	44:67	5	frame->interlaced_frame
water	44:44	0:0	6	frame
op	44:49	0:0	6	->
water	44:51	0:0	6	interlaced_frame
water	44:68	0:0	4	;
call	45:8	45:66	4	print_int
arg	45:18	45:35	5	"top_field_first"
water	45:18	0:0	6	"top_field_first"
arg	45:44	45:66	5	frame->top_field_first
water	45:44	0:0	6	frame
op	45:49	0:0	6	->
water	45:51	0:0	6	top_field_first
water	45:67	0:0	4	;
call	46:8	46:62	4	print_int
arg	46:18	46:31	5	"repeat_pict"
water	46:18	0:0	6	"repeat_pict"
arg	46:44	46:62	5	frame->repeat_pict
water	46:44	0:0	6	frame
op	46:49	0:0	6	->
water	46:51	0:0	6	repeat_pict
water	46:63	0:0	4	;
break	47:8	47:13	4	
label	48:4	48:27	4	case AVMEDIA_TYPE_AUDIO :
water	49:8	0:0	4	s
op	49:10	0:0	4	=
call	49:12	49:48	4	av_get_sample_fmt_name
arg	49:35	49:48	5	frame->format
water	49:35	0:0	6	frame
op	49:40	0:0	6	->
water	49:42	0:0	6	format
water	49:49	0:0	4	;
if	50:8	50:45	4	(s)
cond	50:12	50:12	5	s
water	50:12	0:0	6	s
stmts	50:15	50:45	5	
call	50:15	50:44	6	print_str
arg	50:29	50:41	7	"sample_fmt"
water	50:29	0:0	8	"sample_fmt"
arg	50:43	50:44	7	s
water	50:43	0:0	8	s
water	50:45	0:0	6	;
else	51:8	51:53	4
stmts	51:15	51:53	5	
call	51:15	51:52	6	print_str_opt
arg	51:29	51:41	7	"sample_fmt"
water	51:29	0:0	8	"sample_fmt"
arg	51:43	51:52	7	"unknown"
water	51:43	0:0	8	"unknown"
water	51:53	0:0	6	;
call	52:8	52:57	4	print_int
arg	52:18	52:30	5	"nb_samples"
water	52:18	0:0	6	"nb_samples"
arg	52:40	52:57	5	frame->nb_samples
water	52:40	0:0	6	frame
op	52:45	0:0	6	->
water	52:47	0:0	6	nb_samples
water	52:58	0:0	4	;
call	53:8	53:58	4	print_int
arg	53:18	53:28	5	"channels"
water	53:18	0:0	6	"channels"
arg	53:30	53:58	5	av_frame_get_channels(frame)
call	53:30	53:57	6	av_frame_get_channels
arg	53:52	53:57	7	frame
water	53:52	0:0	8	frame
water	53:59	0:0	4	;
if	54:8	59:8	4	(av_frame_get_channel_layout (frame ))
cond	54:12	54:45	5	av_frame_get_channel_layout (frame )
call	54:12	54:45	6	av_frame_get_channel_layout
arg	54:40	54:45	7	frame
water	54:40	0:0	8	frame
stmts	54:48	59:8	5	
water	54:48	0:0	6	{
call	55:12	55:33	6	av_bprint_clear
arg	55:28	55:33	7	&pbuf
op	55:28	0:0	8	&
water	55:29	0:0	8	pbuf
water	55:34	0:0	6	;
call	56:12	57:71	6	av_bprint_channel_layout
arg	56:37	56:42	7	&pbuf
op	56:37	0:0	8	&
water	56:38	0:0	8	pbuf
arg	56:44	56:72	7	av_frame_get_channels(frame)
call	56:44	56:71	8	av_frame_get_channels
arg	56:66	56:71	9	frame
water	56:66	0:0	10	frame
arg	57:37	57:71	7	av_frame_get_channel_layout(frame)
call	57:37	57:70	8	av_frame_get_channel_layout
arg	57:65	57:70	9	frame
water	57:65	0:0	10	frame
water	57:72	0:0	6	;
call	58:12	58:52	6	print_str
arg	58:26	58:42	7	"channel_layout"
water	58:26	0:0	8	"channel_layout"
arg	58:44	58:52	7	pbuf.str
water	58:44	0:0	8	pbuf
op	58:48	0:0	8	.
water	58:49	0:0	8	str
water	58:53	0:0	6	;
water	59:8	0:0	6	}
else	59:10	60:54	4
stmts	60:12	60:54	5	
call	60:12	60:53	6	print_str_opt
arg	60:26	60:42	7	"channel_layout"
water	60:26	0:0	8	"channel_layout"
arg	60:44	60:53	7	"unknown"
water	60:44	0:0	8	"unknown"
water	60:54	0:0	6	;
break	61:8	61:13	4	
water	62:4	0:0	4	}
if	63:4	64:73	2	(do_show_frame_tags)
cond	63:8	63:8	3	do_show_frame_tags
water	63:8	0:0	4	do_show_frame_tags
stmts	64:8	64:73	3	
call	64:8	64:72	4	show_tags
arg	64:18	64:19	5	w
water	64:18	0:0	6	w
arg	64:21	64:49	5	av_frame_get_metadata(frame)
call	64:21	64:48	6	av_frame_get_metadata
arg	64:43	64:48	7	frame
water	64:43	0:0	8	frame
arg	64:51	64:72	5	SECTION_ID_FRAME_TAGS
water	64:51	0:0	6	SECTION_ID_FRAME_TAGS
water	64:73	0:0	4	;
if	65:4	66:77	2	(do_show_log)
cond	65:8	65:8	3	do_show_log
water	65:8	0:0	4	do_show_log
stmts	66:8	66:77	3	
call	66:8	66:76	4	show_log
arg	66:17	66:18	5	w
water	66:17	0:0	6	w
arg	66:20	66:41	5	SECTION_ID_FRAME_LOGS
water	66:20	0:0	6	SECTION_ID_FRAME_LOGS
arg	66:43	66:63	5	SECTION_ID_FRAME_LOG
water	66:43	0:0	6	SECTION_ID_FRAME_LOG
arg	66:65	66:76	5	do_show_log
water	66:65	0:0	6	do_show_log
water	66:77	0:0	4	;
if	67:4	86:4	2	(frame -> nb_side_data)
cond	67:8	67:15	3	frame -> nb_side_data
water	67:8	0:0	4	frame
op	67:13	0:0	4	->
water	67:15	0:0	4	nb_side_data
stmts	67:29	86:4	3	
water	67:29	0:0	4	{
call	68:8	68:70	4	writer_print_section_header
arg	68:36	68:37	5	w
water	68:36	0:0	6	w
arg	68:39	68:70	5	SECTION_ID_FRAME_SIDE_DATA_LIST
water	68:39	0:0	6	SECTION_ID_FRAME_SIDE_DATA_LIST
water	68:71	0:0	4	;
for	69:8	84:8	4	(i = 0 ;i < frame -> nb_side_data;i ++)
forinit	69:13	69:18	5	i = 0 ;
water	69:13	0:0	6	i
op	69:15	0:0	6	=
water	69:17	0:0	6	0
water	69:18	0:0	6	;
cond	69:20	69:31	5	i < frame -> nb_side_data
water	69:20	0:0	6	i
op	69:22	0:0	6	<
water	69:24	0:0	6	frame
op	69:29	0:0	6	->
water	69:31	0:0	6	nb_side_data
forexpr	69:45	69:46	5	i ++
water	69:45	0:0	6	i
op	69:46	0:0	6	++
stmts	69:50	84:8	5	
water	69:50	0:0	6	{
decl	70:12	70:53	6	AVFrameSideData	*sd
op	70:32	0:0	6	=
water	70:34	0:0	6	frame
op	70:39	0:0	6	->
water	70:41	0:0	6	side_data
op	70:50	0:0	6	[
water	70:51	0:0	6	i
op	70:52	0:0	6	]
decl	71:12	71:28	6	const char	*name
call	72:12	72:69	6	writer_print_section_header
arg	72:40	72:41	7	w
water	72:40	0:0	8	w
arg	72:43	72:69	7	SECTION_ID_FRAME_SIDE_DATA
water	72:43	0:0	8	SECTION_ID_FRAME_SIDE_DATA
water	72:70	0:0	6	;
water	73:12	0:0	6	name
op	73:17	0:0	6	=
call	73:19	73:51	6	av_frame_side_data_name
arg	73:43	73:51	7	sd->type
water	73:43	0:0	8	sd
op	73:45	0:0	8	->
water	73:47	0:0	8	type
water	73:52	0:0	6	;
call	74:12	74:63	6	print_str
arg	74:22	74:38	7	"side_data_type"
water	74:22	0:0	8	"side_data_type"
arg	74:40	74:63	7	name?name:"unknown"
water	74:40	0:0	8	name
water	74:45	0:0	8	?
water	74:47	0:0	8	name
water	74:52	0:0	8	:
water	74:54	0:0	8	"unknown"
water	74:64	0:0	6	;
if	75:12	78:12	6	(sd -> type == AV_FRAME_DATA_DISPLAYMATRIX && sd -> size >= 9 * 4)
cond	75:16	75:73	7	sd -> type == AV_FRAME_DATA_DISPLAYMATRIX && sd -> size >= 9 * 4
water	75:16	0:0	8	sd
op	75:18	0:0	8	->
water	75:20	0:0	8	type
op	75:25	0:0	8	==
water	75:28	0:0	8	AV_FRAME_DATA_DISPLAYMATRIX
op	75:56	0:0	8	&&
water	75:59	0:0	8	sd
op	75:61	0:0	8	->
water	75:63	0:0	8	size
op	75:68	0:0	8	>=
water	75:71	0:0	8	9
op	75:72	0:0	8	*
water	75:73	0:0	8	4
stmts	75:76	78:12	7	
water	75:76	0:0	8	{
call	76:16	76:87	8	writer_print_integers
arg	76:38	76:39	9	w
water	76:38	0:0	10	w
arg	76:41	76:56	9	"displaymatrix"
water	76:41	0:0	10	"displaymatrix"
arg	76:58	76:66	9	sd->data
water	76:58	0:0	10	sd
op	76:60	0:0	10	->
water	76:62	0:0	10	data
arg	76:68	76:69	9	9
water	76:68	0:0	10	9
arg	76:71	76:78	9	" %11d"
water	76:71	0:0	10	" %11d"
arg	76:80	76:81	9	3
water	76:80	0:0	10	3
arg	76:83	76:84	9	4
water	76:83	0:0	10	4
arg	76:86	76:87	9	1
water	76:86	0:0	10	1
water	76:88	0:0	8	;
call	77:16	77:82	8	print_int
arg	77:26	77:36	9	"rotation"
water	77:26	0:0	10	"rotation"
arg	77:38	77:82	9	av_display_rotation_get((int32_t*)sd->data)
call	77:38	77:81	10	av_display_rotation_get
arg	77:62	77:81	11	(int32_t*)sd->data
water	77:62	0:0	12	(
water	77:63	0:0	12	int32_t
op	77:71	0:0	12	*
water	77:72	0:0	12	)
water	77:73	0:0	12	sd
op	77:75	0:0	12	->
water	77:77	0:0	12	data
water	77:83	0:0	8	;
water	78:12	0:0	8	}
else	78:14	82:12	6
stmts	78:19	82:12	7	
if	78:19	82:12	8	(sd -> type == AV_FRAME_DATA_GOP_TIMECODE && sd -> size >= 8)
cond	78:23	78:77	9	sd -> type == AV_FRAME_DATA_GOP_TIMECODE && sd -> size >= 8
water	78:23	0:0	10	sd
op	78:25	0:0	10	->
water	78:27	0:0	10	type
op	78:32	0:0	10	==
water	78:35	0:0	10	AV_FRAME_DATA_GOP_TIMECODE
op	78:62	0:0	10	&&
water	78:65	0:0	10	sd
op	78:67	0:0	10	->
water	78:69	0:0	10	size
op	78:74	0:0	10	>=
water	78:77	0:0	10	8
stmts	78:80	82:12	9	
water	78:80	0:0	10	{
decl	79:16	79:48	10	char	tcbuf[AV_TIMECODE_STR_SIZE]
call	80:16	80:77	10	av_timecode_make_mpeg_tc_string
arg	80:48	80:53	11	tcbuf
water	80:48	0:0	12	tcbuf
arg	80:55	80:77	11	*(int64_t*)(sd->data)
op	80:55	0:0	12	*
call	80:56	80:76	12	(int64_t*)
arg	80:68	80:76	13	sd->data
water	80:68	0:0	14	sd
op	80:70	0:0	14	->
water	80:72	0:0	14	data
water	80:78	0:0	10	;
call	81:16	81:43	10	print_str
arg	81:26	81:36	11	"timecode"
water	81:26	0:0	12	"timecode"
arg	81:38	81:43	11	tcbuf
water	81:38	0:0	12	tcbuf
water	81:44	0:0	10	;
water	82:12	0:0	10	}
call	83:12	83:41	6	writer_print_section_footer
arg	83:40	83:41	7	w
water	83:40	0:0	8	w
water	83:42	0:0	6	;
water	84:8	0:0	6	}
call	85:8	85:37	4	writer_print_section_footer
arg	85:36	85:37	5	w
water	85:36	0:0	6	w
water	85:38	0:0	4	;
water	86:4	0:0	4	}
call	87:4	87:33	2	writer_print_section_footer
arg	87:32	87:33	3	w
water	87:32	0:0	4	w
water	87:34	0:0	2	;
call	88:4	88:34	2	av_bprint_finalize
arg	88:23	88:28	3	&pbuf
op	88:23	0:0	4	&
water	88:24	0:0	4	pbuf
arg	88:30	88:34	3	NULL
water	88:30	0:0	4	NULL
water	88:35	0:0	2	;
call	89:4	89:17	2	fflush
arg	89:11	89:17	3	stdout
water	89:11	0:0	4	stdout
water	89:18	0:0	2	;
