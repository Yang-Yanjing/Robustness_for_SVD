func	1:15	48:0	0	int	init
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
stmnts	0:0	47:12	1	
decl	3:4	3:39	2	EBUR128Context	*ebur128
op	3:28	0:0	2	=
water	3:30	0:0	2	ctx
op	3:33	0:0	2	->
water	3:35	0:0	2	priv
decl	4:4	4:19	2	AVFilterPad	pad
if	5:4	11:4	2	(ebur128 -> loglevel != AV_LOG_INFO && ebur128 -> loglevel != AV_LOG_VERBOSE)
cond	5:8	6:29	3	ebur128 -> loglevel != AV_LOG_INFO && ebur128 -> loglevel != AV_LOG_VERBOSE
water	5:8	0:0	4	ebur128
op	5:15	0:0	4	->
water	5:17	0:0	4	loglevel
op	5:26	0:0	4	!=
water	5:29	0:0	4	AV_LOG_INFO
op	5:41	0:0	4	&&
water	6:8	0:0	4	ebur128
op	6:15	0:0	4	->
water	6:17	0:0	4	loglevel
op	6:26	0:0	4	!=
water	6:29	0:0	4	AV_LOG_VERBOSE
stmts	6:45	11:4	3	
water	6:45	0:0	4	{
if	7:8	8:46	4	(ebur128 -> do_video || ebur128 -> metadata)
cond	7:12	7:42	5	ebur128 -> do_video || ebur128 -> metadata
water	7:12	0:0	6	ebur128
op	7:19	0:0	6	->
water	7:21	0:0	6	do_video
op	7:30	0:0	6	||
water	7:33	0:0	6	ebur128
op	7:40	0:0	6	->
water	7:42	0:0	6	metadata
stmts	8:12	8:46	5	
water	8:12	0:0	6	ebur128
op	8:19	0:0	6	->
water	8:21	0:0	6	loglevel
op	8:30	0:0	6	=
water	8:32	0:0	6	AV_LOG_VERBOSE
water	8:46	0:0	6	;
else	9:8	10:43	4
stmts	10:12	10:43	5	
water	10:12	0:0	6	ebur128
op	10:19	0:0	6	->
water	10:21	0:0	6	loglevel
op	10:30	0:0	6	=
water	10:32	0:0	6	AV_LOG_INFO
water	10:43	0:0	6	;
water	11:4	0:0	4	}
if	12:4	16:4	2	(! CONFIG_SWRESAMPLE && ( ebur128 -> peak_mode & PEAK_MODE_TRUE_PEAKS ))
cond	12:8	12:72	3	! CONFIG_SWRESAMPLE && ( ebur128 -> peak_mode & PEAK_MODE_TRUE_PEAKS )
op	12:8	0:0	4	!
water	12:9	0:0	4	CONFIG_SWRESAMPLE
op	12:27	0:0	4	&&
water	12:30	0:0	4	(
water	12:31	0:0	4	ebur128
op	12:38	0:0	4	->
water	12:40	0:0	4	peak_mode
op	12:50	0:0	4	&
water	12:52	0:0	4	PEAK_MODE_TRUE_PEAKS
water	12:72	0:0	4	)
stmts	12:75	16:4	3	
water	12:75	0:0	4	{
call	13:8	14:72	4	av_log
arg	13:15	13:18	5	ctx
water	13:15	0:0	6	ctx
arg	13:20	13:32	5	AV_LOG_ERROR
water	13:20	0:0	6	AV_LOG_ERROR
arg	14:15	14:72	5	"True-peak mode requires libswresample to be performed\n"
water	14:15	0:0	6	"True-peak mode requires libswresample to be performed\n"
water	14:73	0:0	4	;
return	15:8	15:30	4	AVERROR(EINVAL)
call	15:15	15:29	5	AVERROR
arg	15:23	15:29	6	EINVAL
water	15:23	0:0	7	EINVAL
water	16:4	0:0	4	}
water	19:4	0:0	2	ebur128
op	19:11	0:0	2	->
water	19:13	0:0	2	scale_range
op	19:25	0:0	2	=
water	19:27	0:0	2	3
op	19:29	0:0	2	*
water	19:31	0:0	2	ebur128
op	19:38	0:0	2	->
water	19:40	0:0	2	meter
water	19:45	0:0	2	;
water	20:4	0:0	2	ebur128
op	20:11	0:0	2	->
water	20:13	0:0	2	i400
op	20:17	0:0	2	.
water	20:18	0:0	2	histogram
op	20:29	0:0	2	=
call	20:31	20:45	2	get_histogram
water	20:46	0:0	2	;
water	21:4	0:0	2	ebur128
op	21:11	0:0	2	->
water	21:13	0:0	2	i3000
op	21:18	0:0	2	.
water	21:19	0:0	2	histogram
op	21:29	0:0	2	=
call	21:31	21:45	2	get_histogram
water	21:46	0:0	2	;
if	22:4	23:30	2	(! ebur128 -> i400 . histogram || ! ebur128 -> i3000 . histogram)
cond	22:8	22:52	3	! ebur128 -> i400 . histogram || ! ebur128 -> i3000 . histogram
op	22:8	0:0	4	!
water	22:9	0:0	4	ebur128
op	22:16	0:0	4	->
water	22:18	0:0	4	i400
op	22:22	0:0	4	.
water	22:23	0:0	4	histogram
op	22:33	0:0	4	||
op	22:36	0:0	4	!
water	22:37	0:0	4	ebur128
op	22:44	0:0	4	->
water	22:46	0:0	4	i3000
op	22:51	0:0	4	.
water	22:52	0:0	4	histogram
stmts	23:8	23:30	3	
return	23:8	23:30	4	AVERROR(ENOMEM)
call	23:15	23:29	5	AVERROR
arg	23:23	23:29	6	ENOMEM
water	23:23	0:0	7	ENOMEM
water	24:4	0:0	2	ebur128
op	24:11	0:0	2	->
water	24:13	0:0	2	integrated_loudness
op	24:33	0:0	2	=
water	24:35	0:0	2	ABS_THRES
water	24:44	0:0	2	;
water	25:4	0:0	2	ebur128
op	25:11	0:0	2	->
water	25:13	0:0	2	loudness_range
op	25:28	0:0	2	=
water	25:30	0:0	2	0
water	25:31	0:0	2	;
if	27:4	36:4	2	(ebur128 -> do_video)
cond	27:8	27:17	3	ebur128 -> do_video
water	27:8	0:0	4	ebur128
op	27:15	0:0	4	->
water	27:17	0:0	4	do_video
stmts	27:27	36:4	3	
water	27:27	0:0	4	{
water	28:8	0:0	4	pad
op	28:12	0:0	4	=
water	28:14	0:0	4	(
water	28:15	0:0	4	AVFilterPad
water	28:26	0:0	4	)
water	28:27	0:0	4	{
op	29:12	0:0	4	.
water	29:13	0:0	4	name
op	29:26	0:0	4	=
call	29:28	29:44	4	av_strdup
arg	29:38	29:44	5	"out0"
water	29:38	0:0	6	"out0"
water	29:45	0:0	4	,
op	30:12	0:0	4	.
water	30:13	0:0	4	type
op	30:26	0:0	4	=
water	30:28	0:0	4	AVMEDIA_TYPE_VIDEO
water	30:46	0:0	4	,
op	31:12	0:0	4	.
water	31:13	0:0	4	config_props
op	31:26	0:0	4	=
water	31:28	0:0	4	config_video_output
water	31:47	0:0	4	,
water	32:8	0:0	4	}
water	32:9	0:0	4	;
if	33:8	34:34	4	(! pad . name)
cond	33:12	33:17	5	! pad . name
op	33:12	0:0	6	!
water	33:13	0:0	6	pad
op	33:16	0:0	6	.
water	33:17	0:0	6	name
stmts	34:12	34:34	5	
return	34:12	34:34	6	AVERROR(ENOMEM)
call	34:19	34:33	7	AVERROR
arg	34:27	34:33	8	ENOMEM
water	34:27	0:0	9	ENOMEM
call	35:8	35:37	4	ff_insert_outpad
arg	35:25	35:28	5	ctx
water	35:25	0:0	6	ctx
arg	35:30	35:31	5	0
water	35:30	0:0	6	0
arg	35:33	35:37	5	&pad
op	35:33	0:0	6	&
water	35:34	0:0	6	pad
water	35:38	0:0	4	;
water	36:4	0:0	4	}
water	37:4	0:0	2	pad
op	37:8	0:0	2	=
water	37:10	0:0	2	(
water	37:11	0:0	2	AVFilterPad
water	37:22	0:0	2	)
water	37:23	0:0	2	{
op	38:8	0:0	2	.
water	38:9	0:0	2	name
op	38:22	0:0	2	=
call	38:24	38:62	2	av_asprintf
arg	38:36	38:43	3	"out%d"
water	38:36	0:0	4	"out%d"
arg	38:45	38:62	3	ebur128->do_video
water	38:45	0:0	4	ebur128
op	38:52	0:0	4	->
water	38:54	0:0	4	do_video
water	38:63	0:0	2	,
op	39:8	0:0	2	.
water	39:9	0:0	2	type
op	39:22	0:0	2	=
water	39:24	0:0	2	AVMEDIA_TYPE_AUDIO
water	39:42	0:0	2	,
op	40:8	0:0	2	.
water	40:9	0:0	2	config_props
op	40:22	0:0	2	=
water	40:24	0:0	2	config_audio_output
water	40:43	0:0	2	,
water	41:4	0:0	2	}
water	41:5	0:0	2	;
if	42:4	43:30	2	(! pad . name)
cond	42:8	42:13	3	! pad . name
op	42:8	0:0	4	!
water	42:9	0:0	4	pad
op	42:12	0:0	4	.
water	42:13	0:0	4	name
stmts	43:8	43:30	3	
return	43:8	43:30	4	AVERROR(ENOMEM)
call	43:15	43:29	5	AVERROR
arg	43:23	43:29	6	ENOMEM
water	43:23	0:0	7	ENOMEM
call	44:4	44:49	2	ff_insert_outpad
arg	44:21	44:24	3	ctx
water	44:21	0:0	4	ctx
arg	44:26	44:43	3	ebur128->do_video
water	44:26	0:0	4	ebur128
op	44:33	0:0	4	->
water	44:35	0:0	4	do_video
arg	44:45	44:49	3	&pad
op	44:45	0:0	4	&
water	44:46	0:0	4	pad
water	44:50	0:0	2	;
call	46:4	46:65	2	av_log
arg	46:11	46:14	3	ctx
water	46:11	0:0	4	ctx
arg	46:16	46:30	3	AV_LOG_VERBOSE
water	46:16	0:0	4	AV_LOG_VERBOSE
arg	46:32	46:49	3	"EBU +%d scale\n"
water	46:32	0:0	4	"EBU +%d scale\n"
arg	46:51	46:65	3	ebur128->meter
water	46:51	0:0	4	ebur128
op	46:58	0:0	4	->
water	46:60	0:0	4	meter
water	46:66	0:0	2	;
return	47:4	47:12	2	0
water	47:11	0:0	3	0
