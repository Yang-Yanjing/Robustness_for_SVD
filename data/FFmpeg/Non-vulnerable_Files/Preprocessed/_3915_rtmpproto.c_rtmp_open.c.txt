func	1:0	265:0	0	static int	rtmp_open
params	1:20	0:0	1	
param	1:21	1:34	2	URLContext *	s
param	1:36	1:51	2	const char *	uri
param	1:53	1:62	2	int	flags
stmnts	0:0	264:14	1	
decl	3:4	3:34	2	RTMPContext	*rt
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	priv_data
decl	4:4	4:63	2	char	proto[8]
water	4:17	0:0	2	,
decl	4:4	4:63	2	char	hostname[256]
water	4:32	0:0	2	,
decl	4:4	4:63	2	char	path[1024]
water	4:44	0:0	2	,
decl	4:4	4:63	2	char	auth[100]
water	4:55	0:0	2	,
decl	4:4	4:63	2	char	*fname
decl	5:4	5:49	2	char	*old_app
water	5:17	0:0	2	,
decl	5:4	5:49	2	char	*qmark
water	5:25	0:0	2	,
decl	5:4	5:49	2	char	*n
water	5:29	0:0	2	,
decl	5:4	5:49	2	char	fname_buffer[1024]
decl	6:4	6:21	2	uint8_t	buf[2048]
decl	7:4	7:12	2	int	port
decl	8:4	8:29	2	AVDictionary	*opts
op	8:23	0:0	2	=
water	8:25	0:0	2	NULL
decl	9:4	9:11	2	int	ret
if	10:4	11:22	2	(rt -> listen_timeout > 0)
cond	10:8	10:29	3	rt -> listen_timeout > 0
water	10:8	0:0	4	rt
op	10:10	0:0	4	->
water	10:12	0:0	4	listen_timeout
op	10:27	0:0	4	>
water	10:29	0:0	4	0
stmts	11:8	11:22	3	
water	11:8	0:0	4	rt
op	11:10	0:0	4	->
water	11:12	0:0	4	listen
op	11:19	0:0	4	=
water	11:21	0:0	4	1
water	11:22	0:0	4	;
water	12:4	0:0	2	rt
op	12:6	0:0	2	->
water	12:8	0:0	2	is_input
op	12:17	0:0	2	=
op	12:19	0:0	2	!
water	12:20	0:0	2	(
water	12:21	0:0	2	flags
op	12:27	0:0	2	&
water	12:29	0:0	2	AVIO_FLAG_WRITE
water	12:44	0:0	2	)
water	12:45	0:0	2	;
call	13:4	15:48	2	av_url_split
arg	13:17	13:22	3	proto
water	13:17	0:0	4	proto
arg	13:24	13:37	3	sizeof(proto)
op	13:24	0:0	4	sizeof
water	13:30	0:0	4	(
water	13:31	0:0	4	proto
water	13:36	0:0	4	)
arg	13:39	13:43	3	auth
water	13:39	0:0	4	auth
arg	13:45	13:57	3	sizeof(auth)
op	13:45	0:0	4	sizeof
water	13:51	0:0	4	(
water	13:52	0:0	4	auth
water	13:56	0:0	4	)
arg	14:17	14:25	3	hostname
water	14:17	0:0	4	hostname
arg	14:27	14:43	3	sizeof(hostname)
op	14:27	0:0	4	sizeof
water	14:33	0:0	4	(
water	14:34	0:0	4	hostname
water	14:42	0:0	4	)
arg	14:45	14:50	3	&port
op	14:45	0:0	4	&
water	14:46	0:0	4	port
arg	15:17	15:21	3	path
water	15:17	0:0	4	path
arg	15:23	15:35	3	sizeof(path)
op	15:23	0:0	4	sizeof
water	15:29	0:0	4	(
water	15:30	0:0	4	path
water	15:34	0:0	4	)
arg	15:37	15:48	3	s->filename
water	15:37	0:0	4	s
op	15:38	0:0	4	->
water	15:40	0:0	4	filename
water	15:49	0:0	2	;
water	16:4	0:0	2	n
op	16:6	0:0	2	=
call	16:8	16:24	2	strchr
arg	16:15	16:19	3	path
water	16:15	0:0	4	path
arg	16:21	16:24	3	' '
water	16:21	0:0	4	' '
water	16:25	0:0	2	;
if	17:4	23:4	2	(n)
cond	17:8	17:8	3	n
water	17:8	0:0	4	n
stmts	17:11	23:4	3	
water	17:11	0:0	4	{
call	18:8	21:80	4	av_log
arg	18:15	18:16	5	s
water	18:15	0:0	6	s
arg	18:18	18:32	5	AV_LOG_WARNING
water	18:18	0:0	6	AV_LOG_WARNING
arg	19:15	21:80	5	"Detected librtmp style URL parameters, these aren't supported ""by the libavformat internal RTMP handler currently enabled. ""See the documentation for the correct way to pass parameters.\n"
water	19:15	0:0	6	"Detected librtmp style URL parameters, these aren't supported "
water	20:15	0:0	6	"by the libavformat internal RTMP handler currently enabled. "
water	21:15	0:0	6	"See the documentation for the correct way to pass parameters.\n"
water	21:81	0:0	4	;
op	22:8	0:0	4	*
water	22:9	0:0	4	n
op	22:11	0:0	4	=
water	22:13	0:0	4	'\0'
water	22:17	0:0	4	;
water	23:4	0:0	4	}
if	24:4	31:4	2	(auth [ 0 ])
cond	24:8	24:14	3	auth [ 0 ]
water	24:8	0:0	4	auth
op	24:12	0:0	4	[
water	24:13	0:0	4	0
op	24:14	0:0	4	]
stmts	24:17	31:4	3	
water	24:17	0:0	4	{
decl	25:8	25:37	4	char	*ptr
op	25:18	0:0	4	=
call	25:20	25:36	5	strchr
arg	25:27	25:31	6	auth
water	25:27	0:0	7	auth
arg	25:33	25:36	6	':'
water	25:33	0:0	7	':'
if	26:8	30:8	4	(ptr)
cond	26:12	26:12	5	ptr
water	26:12	0:0	6	ptr
stmts	26:17	30:8	5	
water	26:17	0:0	6	{
op	27:12	0:0	6	*
water	27:13	0:0	6	ptr
op	27:17	0:0	6	=
water	27:19	0:0	6	'\0'
water	27:23	0:0	6	;
call	28:12	28:63	6	av_strlcpy
arg	28:23	28:35	7	rt->username
water	28:23	0:0	8	rt
op	28:25	0:0	8	->
water	28:27	0:0	8	username
arg	28:37	28:41	7	auth
water	28:37	0:0	8	auth
arg	28:43	28:63	7	sizeof(rt->username)
op	28:43	0:0	8	sizeof
water	28:49	0:0	8	(
water	28:50	0:0	8	rt
op	28:52	0:0	8	->
water	28:54	0:0	8	username
water	28:62	0:0	8	)
water	28:64	0:0	6	;
call	29:12	29:66	6	av_strlcpy
arg	29:23	29:35	7	rt->password
water	29:23	0:0	8	rt
op	29:25	0:0	8	->
water	29:27	0:0	8	password
arg	29:37	29:44	7	ptr+1
water	29:37	0:0	8	ptr
op	29:41	0:0	8	+
water	29:43	0:0	8	1
arg	29:46	29:66	7	sizeof(rt->password)
op	29:46	0:0	8	sizeof
water	29:52	0:0	8	(
water	29:53	0:0	8	rt
op	29:55	0:0	8	->
water	29:57	0:0	8	password
water	29:65	0:0	8	)
water	29:67	0:0	6	;
water	30:8	0:0	6	}
water	31:4	0:0	4	}
if	32:4	36:4	2	(rt -> listen &&strcmp (proto ,"rtmp" ))
cond	32:8	32:42	3	rt -> listen &&strcmp (proto ,"rtmp" )
water	32:8	0:0	4	rt
op	32:10	0:0	4	->
water	32:12	0:0	4	listen
op	32:19	0:0	4	&&
call	32:22	32:42	4	strcmp
arg	32:29	32:34	5	proto
water	32:29	0:0	6	proto
arg	32:36	32:42	5	"rtmp"
water	32:36	0:0	6	"rtmp"
stmts	32:45	36:4	3	
water	32:45	0:0	4	{
call	33:8	34:20	4	av_log
arg	33:15	33:16	5	s
water	33:15	0:0	6	s
arg	33:18	33:30	5	AV_LOG_ERROR
water	33:18	0:0	6	AV_LOG_ERROR
arg	33:32	33:68	5	"rtmp_listen not available for %s\n"
water	33:32	0:0	6	"rtmp_listen not available for %s\n"
arg	34:15	34:20	5	proto
water	34:15	0:0	6	proto
water	34:21	0:0	4	;
return	35:8	35:30	4	AVERROR(EINVAL)
call	35:15	35:29	5	AVERROR
arg	35:23	35:29	6	EINVAL
water	35:23	0:0	7	EINVAL
water	36:4	0:0	4	}
if	37:4	42:4	2	(!strcmp (proto ,"rtmpt" ) || !strcmp (proto ,"rtmpts" ))
cond	37:8	37:58	3	!strcmp (proto ,"rtmpt" ) || !strcmp (proto ,"rtmpts" )
op	37:8	0:0	4	!
call	37:9	37:30	4	strcmp
arg	37:16	37:21	5	proto
water	37:16	0:0	6	proto
arg	37:23	37:30	5	"rtmpt"
water	37:23	0:0	6	"rtmpt"
op	37:32	0:0	4	||
op	37:35	0:0	4	!
call	37:36	37:58	4	strcmp
arg	37:43	37:48	5	proto
water	37:43	0:0	6	proto
arg	37:50	37:58	5	"rtmpts"
water	37:50	0:0	6	"rtmpts"
stmts	37:61	42:4	3	
water	37:61	0:0	4	{
if	38:8	39:56	4	(!strcmp (proto ,"rtmpts" ))
cond	38:12	38:35	5	!strcmp (proto ,"rtmpts" )
op	38:12	0:0	6	!
call	38:13	38:35	6	strcmp
arg	38:20	38:25	7	proto
water	38:20	0:0	8	proto
arg	38:27	38:35	7	"rtmpts"
water	38:27	0:0	8	"rtmpts"
stmts	39:12	39:56	5	
call	39:12	39:55	6	av_dict_set
arg	39:24	39:29	7	&opts
op	39:24	0:0	8	&
water	39:25	0:0	8	opts
arg	39:31	39:47	7	"ffrtmphttp_tls"
water	39:31	0:0	8	"ffrtmphttp_tls"
arg	39:49	39:52	7	"1"
water	39:49	0:0	8	"1"
arg	39:54	39:55	7	1
water	39:54	0:0	8	1
water	39:56	0:0	6	;
call	41:8	41:78	4	ff_url_join
arg	41:20	41:23	5	buf
water	41:20	0:0	6	buf
arg	41:25	41:36	5	sizeof(buf)
op	41:25	0:0	6	sizeof
water	41:31	0:0	6	(
water	41:32	0:0	6	buf
water	41:35	0:0	6	)
arg	41:38	41:50	5	"ffrtmphttp"
water	41:38	0:0	6	"ffrtmphttp"
arg	41:52	41:56	5	NULL
water	41:52	0:0	6	NULL
arg	41:58	41:66	5	hostname
water	41:58	0:0	6	hostname
arg	41:68	41:72	5	port
water	41:68	0:0	6	port
arg	41:74	41:78	5	NULL
water	41:74	0:0	6	NULL
water	41:79	0:0	4	;
water	42:4	0:0	4	}
else	42:6	47:4	2
stmts	42:11	47:4	3	
if	42:11	47:4	4	(!strcmp (proto ,"rtmps" ))
cond	42:15	42:37	5	!strcmp (proto ,"rtmps" )
op	42:15	0:0	6	!
call	42:16	42:37	6	strcmp
arg	42:23	42:28	7	proto
water	42:23	0:0	8	proto
arg	42:30	42:37	7	"rtmps"
water	42:30	0:0	8	"rtmps"
stmts	42:40	47:4	5	
water	42:40	0:0	6	{
if	44:8	45:37	6	(port < 0)
cond	44:12	44:19	7	port < 0
water	44:12	0:0	8	port
op	44:17	0:0	8	<
water	44:19	0:0	8	0
stmts	45:12	45:37	7	
water	45:12	0:0	8	port
op	45:17	0:0	8	=
water	45:19	0:0	8	RTMPS_DEFAULT_PORT
water	45:37	0:0	8	;
call	46:8	46:71	6	ff_url_join
arg	46:20	46:23	7	buf
water	46:20	0:0	8	buf
arg	46:25	46:36	7	sizeof(buf)
op	46:25	0:0	8	sizeof
water	46:31	0:0	8	(
water	46:32	0:0	8	buf
water	46:35	0:0	8	)
arg	46:38	46:43	7	"tls"
water	46:38	0:0	8	"tls"
arg	46:45	46:49	7	NULL
water	46:45	0:0	8	NULL
arg	46:51	46:59	7	hostname
water	46:51	0:0	8	hostname
arg	46:61	46:65	7	port
water	46:61	0:0	8	port
arg	46:67	46:71	7	NULL
water	46:67	0:0	8	NULL
water	46:72	0:0	6	;
water	47:4	0:0	6	}
else	47:6	53:4	2
stmts	47:11	53:4	3	
if	47:11	53:4	4	(!strcmp (proto ,"rtmpe" ) || ( !strcmp (proto ,"rtmpte" ) ))
cond	47:15	47:67	5	!strcmp (proto ,"rtmpe" ) || ( !strcmp (proto ,"rtmpte" ) )
op	47:15	0:0	6	!
call	47:16	47:37	6	strcmp
arg	47:23	47:28	7	proto
water	47:23	0:0	8	proto
arg	47:30	47:37	7	"rtmpe"
water	47:30	0:0	8	"rtmpe"
op	47:39	0:0	6	||
water	47:42	0:0	6	(
op	47:43	0:0	6	!
call	47:44	47:66	6	strcmp
arg	47:51	47:56	7	proto
water	47:51	0:0	8	proto
arg	47:58	47:66	7	"rtmpte"
water	47:58	0:0	8	"rtmpte"
water	47:67	0:0	6	)
stmts	47:70	53:4	5	
water	47:70	0:0	6	{
if	48:8	49:63	6	(!strcmp (proto ,"rtmpte" ))
cond	48:12	48:35	7	!strcmp (proto ,"rtmpte" )
op	48:12	0:0	8	!
call	48:13	48:35	8	strcmp
arg	48:20	48:25	9	proto
water	48:20	0:0	10	proto
arg	48:27	48:35	9	"rtmpte"
water	48:27	0:0	10	"rtmpte"
stmts	49:12	49:63	7	
call	49:12	49:62	8	av_dict_set
arg	49:24	49:29	9	&opts
op	49:24	0:0	10	&
water	49:25	0:0	10	opts
arg	49:31	49:54	9	"ffrtmpcrypt_tunneling"
water	49:31	0:0	10	"ffrtmpcrypt_tunneling"
arg	49:56	49:59	9	"1"
water	49:56	0:0	10	"1"
arg	49:61	49:62	9	1
water	49:61	0:0	10	1
water	49:63	0:0	8	;
call	51:8	51:79	6	ff_url_join
arg	51:20	51:23	7	buf
water	51:20	0:0	8	buf
arg	51:25	51:36	7	sizeof(buf)
op	51:25	0:0	8	sizeof
water	51:31	0:0	8	(
water	51:32	0:0	8	buf
water	51:35	0:0	8	)
arg	51:38	51:51	7	"ffrtmpcrypt"
water	51:38	0:0	8	"ffrtmpcrypt"
arg	51:53	51:57	7	NULL
water	51:53	0:0	8	NULL
arg	51:59	51:67	7	hostname
water	51:59	0:0	8	hostname
arg	51:69	51:73	7	port
water	51:69	0:0	8	port
arg	51:75	51:79	7	NULL
water	51:75	0:0	8	NULL
water	51:80	0:0	6	;
water	52:8	0:0	6	rt
op	52:10	0:0	6	->
water	52:12	0:0	6	encrypted
op	52:22	0:0	6	=
water	52:24	0:0	6	1
water	52:25	0:0	6	;
water	53:4	0:0	6	}
else	53:6	63:4	2
stmts	53:11	63:4	3	
water	53:11	0:0	4	{
if	55:8	56:36	4	(port < 0)
cond	55:12	55:19	5	port < 0
water	55:12	0:0	6	port
op	55:17	0:0	6	<
water	55:19	0:0	6	0
stmts	56:12	56:36	5	
water	56:12	0:0	6	port
op	56:17	0:0	6	=
water	56:19	0:0	6	RTMP_DEFAULT_PORT
water	56:36	0:0	6	;
if	57:8	60:50	4	(rt -> listen)
cond	57:12	57:16	5	rt -> listen
water	57:12	0:0	6	rt
op	57:14	0:0	6	->
water	57:16	0:0	6	listen
stmts	58:12	60:50	5	
call	58:12	60:49	6	ff_url_join
arg	58:24	58:27	7	buf
water	58:24	0:0	8	buf
arg	58:29	58:40	7	sizeof(buf)
op	58:29	0:0	8	sizeof
water	58:35	0:0	8	(
water	58:36	0:0	8	buf
water	58:39	0:0	8	)
arg	58:42	58:47	7	"tcp"
water	58:42	0:0	8	"tcp"
arg	58:49	58:53	7	NULL
water	58:49	0:0	8	NULL
arg	58:55	58:63	7	hostname
water	58:55	0:0	8	hostname
arg	58:65	58:69	7	port
water	58:65	0:0	8	port
arg	59:24	59:51	7	"?listen&listen_timeout=%d"
water	59:24	0:0	8	"?listen&listen_timeout=%d"
arg	60:24	60:49	7	rt->listen_timeout*1000
water	60:24	0:0	8	rt
op	60:26	0:0	8	->
water	60:28	0:0	8	listen_timeout
op	60:43	0:0	8	*
water	60:45	0:0	8	1000
water	60:50	0:0	6	;
else	61:8	62:76	4
stmts	62:12	62:76	5	
call	62:12	62:75	6	ff_url_join
arg	62:24	62:27	7	buf
water	62:24	0:0	8	buf
arg	62:29	62:40	7	sizeof(buf)
op	62:29	0:0	8	sizeof
water	62:35	0:0	8	(
water	62:36	0:0	8	buf
water	62:39	0:0	8	)
arg	62:42	62:47	7	"tcp"
water	62:42	0:0	8	"tcp"
arg	62:49	62:53	7	NULL
water	62:49	0:0	8	NULL
arg	62:55	62:63	7	hostname
water	62:55	0:0	8	hostname
arg	62:65	62:69	7	port
water	62:65	0:0	8	port
arg	62:71	62:75	7	NULL
water	62:71	0:0	8	NULL
water	62:76	0:0	6	;
water	63:4	0:0	4	}
label	64:0	64:9	2	reconnect :
if	65:4	69:4	2	(( ret =ffurl_open (& rt -> stream ,buf ,AVIO_FLAG_READ_WRITE ,& s -> interrupt_callback ,& opts ) ) < 0)
cond	65:8	66:60	3	( ret =ffurl_open (& rt -> stream ,buf ,AVIO_FLAG_READ_WRITE ,& s -> interrupt_callback ,& opts ) ) < 0
water	65:8	0:0	4	(
water	65:9	0:0	4	ret
op	65:13	0:0	4	=
call	65:15	66:55	4	ffurl_open
arg	65:26	65:37	5	&rt->stream
op	65:26	0:0	6	&
water	65:27	0:0	6	rt
op	65:29	0:0	6	->
water	65:31	0:0	6	stream
arg	65:39	65:42	5	buf
water	65:39	0:0	6	buf
arg	65:44	65:64	5	AVIO_FLAG_READ_WRITE
water	65:44	0:0	6	AVIO_FLAG_READ_WRITE
arg	66:26	66:48	5	&s->interrupt_callback
op	66:26	0:0	6	&
water	66:27	0:0	6	s
op	66:28	0:0	6	->
water	66:30	0:0	6	interrupt_callback
arg	66:50	66:55	5	&opts
op	66:50	0:0	6	&
water	66:51	0:0	6	opts
water	66:56	0:0	4	)
op	66:58	0:0	4	<
water	66:60	0:0	4	0
stmts	66:63	69:4	3	
water	66:63	0:0	4	{
call	67:8	67:67	4	av_log
arg	67:15	67:17	5	s
water	67:15	0:0	6	s
arg	67:19	67:31	5	AV_LOG_ERROR
water	67:19	0:0	6	AV_LOG_ERROR
arg	67:33	67:62	5	"Cannot open connection %s\n"
water	67:33	0:0	6	"Cannot open connection %s\n"
arg	67:64	67:67	5	buf
water	67:64	0:0	6	buf
water	67:68	0:0	4	;
goto	68:8	68:17	4	fail
water	68:13	0:0	5	fail
water	69:4	0:0	4	}
if	70:4	73:4	2	(rt -> swfverify)
cond	70:8	70:12	3	rt -> swfverify
water	70:8	0:0	4	rt
op	70:10	0:0	4	->
water	70:12	0:0	4	swfverify
stmts	70:23	73:4	3	
water	70:23	0:0	4	{
if	71:8	72:21	4	(( ret =rtmp_calc_swfhash (s ) ) < 0)
cond	71:12	71:43	5	( ret =rtmp_calc_swfhash (s ) ) < 0
water	71:12	0:0	6	(
water	71:13	0:0	6	ret
op	71:17	0:0	6	=
call	71:19	71:38	6	rtmp_calc_swfhash
arg	71:37	71:38	7	s
water	71:37	0:0	8	s
water	71:39	0:0	6	)
op	71:41	0:0	6	<
water	71:43	0:0	6	0
stmts	72:12	72:21	5	
goto	72:12	72:21	6	fail
water	72:17	0:0	7	fail
water	73:4	0:0	4	}
water	74:4	0:0	2	rt
op	74:6	0:0	2	->
water	74:8	0:0	2	state
op	74:14	0:0	2	=
water	74:16	0:0	2	STATE_START
water	74:27	0:0	2	;
if	75:4	76:17	2	(! rt -> listen && ( ret =rtmp_handshake (s ,rt ) ) < 0)
cond	75:8	75:55	3	! rt -> listen && ( ret =rtmp_handshake (s ,rt ) ) < 0
op	75:8	0:0	4	!
water	75:9	0:0	4	rt
op	75:11	0:0	4	->
water	75:13	0:0	4	listen
op	75:20	0:0	4	&&
water	75:23	0:0	4	(
water	75:24	0:0	4	ret
op	75:28	0:0	4	=
call	75:30	75:50	4	rtmp_handshake
arg	75:45	75:46	5	s
water	75:45	0:0	6	s
arg	75:48	75:50	5	rt
water	75:48	0:0	6	rt
water	75:51	0:0	4	)
op	75:53	0:0	4	<
water	75:55	0:0	4	0
stmts	76:8	76:17	3	
goto	76:8	76:17	4	fail
water	76:13	0:0	5	fail
if	77:4	78:17	2	(rt -> listen && ( ret =rtmp_server_handshake (s ,rt ) ) < 0)
cond	77:8	77:61	3	rt -> listen && ( ret =rtmp_server_handshake (s ,rt ) ) < 0
water	77:8	0:0	4	rt
op	77:10	0:0	4	->
water	77:12	0:0	4	listen
op	77:19	0:0	4	&&
water	77:22	0:0	4	(
water	77:23	0:0	4	ret
op	77:27	0:0	4	=
call	77:29	77:56	4	rtmp_server_handshake
arg	77:51	77:52	5	s
water	77:51	0:0	6	s
arg	77:54	77:56	5	rt
water	77:54	0:0	6	rt
water	77:57	0:0	4	)
op	77:59	0:0	4	<
water	77:61	0:0	4	0
stmts	78:8	78:17	3	
goto	78:8	78:17	4	fail
water	78:13	0:0	5	fail
water	79:4	0:0	2	rt
op	79:6	0:0	2	->
water	79:8	0:0	2	out_chunk_size
op	79:23	0:0	2	=
water	79:25	0:0	2	128
water	79:28	0:0	2	;
water	80:4	0:0	2	rt
op	80:6	0:0	2	->
water	80:8	0:0	2	in_chunk_size
op	80:23	0:0	2	=
water	80:25	0:0	2	128
water	80:28	0:0	2	;
water	81:4	0:0	2	rt
op	81:6	0:0	2	->
water	81:8	0:0	2	state
op	81:14	0:0	2	=
water	81:16	0:0	2	STATE_HANDSHAKED
water	81:32	0:0	2	;
water	83:4	0:0	2	old_app
op	83:12	0:0	2	=
water	83:14	0:0	2	rt
op	83:16	0:0	2	->
water	83:18	0:0	2	app
water	83:21	0:0	2	;
water	84:4	0:0	2	rt
op	84:6	0:0	2	->
water	84:8	0:0	2	app
op	84:12	0:0	2	=
call	84:14	84:38	2	av_malloc
arg	84:24	84:38	3	APP_MAX_LENGTH
water	84:24	0:0	4	APP_MAX_LENGTH
water	84:39	0:0	2	;
if	85:4	88:4	2	(! rt -> app)
cond	85:8	85:13	3	! rt -> app
op	85:8	0:0	4	!
water	85:9	0:0	4	rt
op	85:11	0:0	4	->
water	85:13	0:0	4	app
stmts	85:18	88:4	3	
water	85:18	0:0	4	{
water	86:8	0:0	4	ret
op	86:12	0:0	4	=
call	86:14	86:28	4	AVERROR
arg	86:22	86:28	5	ENOMEM
water	86:22	0:0	6	ENOMEM
water	86:29	0:0	4	;
goto	87:8	87:17	4	fail
water	87:13	0:0	5	fail
water	88:4	0:0	4	}
water	90:4	0:0	2	qmark
op	90:10	0:0	2	=
call	90:12	90:28	2	strchr
arg	90:19	90:23	3	path
water	90:19	0:0	4	path
arg	90:25	90:28	3	'?'
water	90:25	0:0	4	'?'
water	90:29	0:0	2	;
if	91:4	103:4	2	(qmark &&strstr (qmark ,"slist=" ))
cond	91:8	91:39	3	qmark &&strstr (qmark ,"slist=" )
water	91:8	0:0	4	qmark
op	91:14	0:0	4	&&
call	91:17	91:39	4	strstr
arg	91:24	91:29	5	qmark
water	91:24	0:0	6	qmark
arg	91:31	91:39	5	"slist="
water	91:31	0:0	6	"slist="
stmts	91:42	103:4	3	
water	91:42	0:0	4	{
decl	92:8	92:17	4	char	*amp
call	94:8	94:73	4	av_strlcpy
arg	94:19	94:26	5	rt->app
water	94:19	0:0	6	rt
op	94:21	0:0	6	->
water	94:23	0:0	6	app
arg	94:28	94:36	5	path+1
water	94:28	0:0	6	path
op	94:33	0:0	6	+
water	94:35	0:0	6	1
arg	94:38	94:73	5	FFMIN(qmark-path,APP_MAX_LENGTH)
call	94:38	94:72	6	FFMIN
arg	94:44	94:56	7	qmark-path
water	94:44	0:0	8	qmark
op	94:50	0:0	8	-
water	94:52	0:0	8	path
arg	94:58	94:72	7	APP_MAX_LENGTH
water	94:58	0:0	8	APP_MAX_LENGTH
water	94:74	0:0	4	;
water	95:8	0:0	4	fname
op	95:14	0:0	4	=
call	95:16	95:37	4	strstr
arg	95:23	95:27	5	path
water	95:23	0:0	6	path
arg	95:29	95:37	5	"slist="
water	95:29	0:0	6	"slist="
op	95:39	0:0	4	+
water	95:41	0:0	4	6
water	95:42	0:0	4	;
water	97:8	0:0	4	amp
op	97:12	0:0	4	=
call	97:14	97:31	4	strchr
arg	97:21	97:26	5	fname
water	97:21	0:0	6	fname
arg	97:28	97:31	5	'&'
water	97:28	0:0	6	'&'
water	97:32	0:0	4	;
if	98:8	102:8	4	(amp)
cond	98:12	98:12	5	amp
water	98:12	0:0	6	amp
stmts	98:17	102:8	5	
water	98:17	0:0	6	{
call	99:12	100:71	6	av_strlcpy
arg	99:23	99:35	7	fname_buffer
water	99:23	0:0	8	fname_buffer
arg	99:37	99:42	7	fname
water	99:37	0:0	8	fname
arg	99:44	100:71	7	FFMIN(amp-fname+1,sizeof(fname_buffer))
call	99:44	100:70	8	FFMIN
arg	99:50	99:65	9	amp-fname+1
water	99:50	0:0	10	amp
op	99:54	0:0	10	-
water	99:56	0:0	10	fname
op	99:62	0:0	10	+
water	99:64	0:0	10	1
arg	100:50	100:70	9	sizeof(fname_buffer)
op	100:50	0:0	10	sizeof
water	100:56	0:0	10	(
water	100:57	0:0	10	fname_buffer
water	100:69	0:0	10	)
water	100:72	0:0	6	;
water	101:12	0:0	6	fname
op	101:18	0:0	6	=
water	101:20	0:0	6	fname_buffer
water	101:32	0:0	6	;
water	102:8	0:0	6	}
water	103:4	0:0	4	}
else	103:6	106:4	2
stmts	103:11	106:4	3	
if	103:11	106:4	4	(!strncmp (path ,"/ondemand/" ,10 ))
cond	103:15	103:46	5	!strncmp (path ,"/ondemand/" ,10 )
op	103:15	0:0	6	!
call	103:16	103:46	6	strncmp
arg	103:24	103:28	7	path
water	103:24	0:0	8	path
arg	103:30	103:42	7	"/ondemand/"
water	103:30	0:0	8	"/ondemand/"
arg	103:44	103:46	7	10
water	103:44	0:0	8	10
stmts	103:49	106:4	5	
water	103:49	0:0	6	{
water	104:8	0:0	6	fname
op	104:14	0:0	6	=
water	104:16	0:0	6	path
op	104:21	0:0	6	+
water	104:23	0:0	6	10
water	104:25	0:0	6	;
call	105:8	105:37	6	memcpy
arg	105:15	105:22	7	rt->app
water	105:15	0:0	8	rt
op	105:17	0:0	8	->
water	105:19	0:0	8	app
arg	105:24	105:34	7	"ondemand"
water	105:24	0:0	8	"ondemand"
arg	105:36	105:37	7	9
water	105:36	0:0	8	9
water	105:38	0:0	6	;
water	106:4	0:0	6	}
else	106:6	130:4	2
stmts	106:11	130:4	3	
water	106:11	0:0	4	{
decl	107:8	107:44	4	char	*next
op	107:19	0:0	4	=
op	107:21	0:0	4	*
water	107:22	0:0	4	path
water	107:27	0:0	4	?
water	107:29	0:0	4	path
op	107:34	0:0	4	+
water	107:36	0:0	4	1
water	107:38	0:0	4	:
water	107:40	0:0	4	path
decl	108:8	108:35	4	char	*p
op	108:16	0:0	4	=
call	108:18	108:34	5	strchr
arg	108:25	108:29	6	next
water	108:25	0:0	7	next
arg	108:31	108:34	6	'/'
water	108:31	0:0	7	'/'
if	109:8	118:8	4	(! p)
cond	109:12	109:13	5	! p
op	109:12	0:0	6	!
water	109:13	0:0	6	p
stmts	109:16	118:8	5	
water	109:16	0:0	6	{
if	110:12	114:12	6	(old_app)
cond	110:16	110:16	7	old_app
water	110:16	0:0	8	old_app
stmts	110:25	114:12	7	
water	110:25	0:0	8	{
water	113:16	0:0	8	fname
op	113:22	0:0	8	=
water	113:24	0:0	8	next
water	113:28	0:0	8	;
water	114:12	0:0	8	}
else	114:14	117:12	6
stmts	114:19	117:12	7	
water	114:19	0:0	8	{
water	115:16	0:0	8	fname
op	115:22	0:0	8	=
water	115:24	0:0	8	NULL
water	115:28	0:0	8	;
call	116:16	116:56	8	av_strlcpy
arg	116:27	116:34	9	rt->app
water	116:27	0:0	10	rt
op	116:29	0:0	10	->
water	116:31	0:0	10	app
arg	116:36	116:40	9	next
water	116:36	0:0	10	next
arg	116:42	116:56	9	APP_MAX_LENGTH
water	116:42	0:0	10	APP_MAX_LENGTH
water	116:57	0:0	8	;
water	117:12	0:0	8	}
water	118:8	0:0	6	}
else	118:10	129:8	4
stmts	118:15	129:8	5	
water	118:15	0:0	6	{
decl	120:12	120:40	6	char	*c
op	120:20	0:0	6	=
call	120:22	120:39	7	strchr
arg	120:29	120:34	8	p+1
water	120:29	0:0	9	p
op	120:31	0:0	9	+
water	120:33	0:0	9	1
arg	120:36	120:39	8	':'
water	120:36	0:0	9	':'
water	121:12	0:0	6	fname
op	121:18	0:0	6	=
call	121:20	121:37	6	strchr
arg	121:27	121:32	7	p+1
water	121:27	0:0	8	p
op	121:29	0:0	8	+
water	121:31	0:0	8	1
arg	121:34	121:37	7	'/'
water	121:34	0:0	8	'/'
water	121:38	0:0	6	;
if	122:12	125:12	6	(! fname || ( c && c < fname ))
cond	122:16	122:41	7	! fname || ( c && c < fname )
op	122:16	0:0	8	!
water	122:17	0:0	8	fname
op	122:23	0:0	8	||
water	122:26	0:0	8	(
water	122:27	0:0	8	c
op	122:29	0:0	8	&&
water	122:32	0:0	8	c
op	122:34	0:0	8	<
water	122:36	0:0	8	fname
water	122:41	0:0	8	)
stmts	122:44	125:12	7	
water	122:44	0:0	8	{
water	123:16	0:0	8	fname
op	123:22	0:0	8	=
water	123:24	0:0	8	p
op	123:26	0:0	8	+
water	123:28	0:0	8	1
water	123:29	0:0	8	;
call	124:16	124:77	8	av_strlcpy
arg	124:27	124:34	9	rt->app
water	124:27	0:0	10	rt
op	124:29	0:0	10	->
water	124:31	0:0	10	app
arg	124:36	124:44	9	path+1
water	124:36	0:0	10	path
op	124:41	0:0	10	+
water	124:43	0:0	10	1
arg	124:46	124:77	9	FFMIN(p-path,APP_MAX_LENGTH)
call	124:46	124:76	10	FFMIN
arg	124:52	124:60	11	p-path
water	124:52	0:0	12	p
op	124:54	0:0	12	-
water	124:56	0:0	12	path
arg	124:62	124:76	11	APP_MAX_LENGTH
water	124:62	0:0	12	APP_MAX_LENGTH
water	124:78	0:0	8	;
water	125:12	0:0	8	}
else	125:14	128:12	6
stmts	125:19	128:12	7	
water	125:19	0:0	8	{
water	126:16	0:0	8	fname
op	126:21	0:0	8	++
water	126:23	0:0	8	;
call	127:16	127:85	8	av_strlcpy
arg	127:27	127:34	9	rt->app
water	127:27	0:0	10	rt
op	127:29	0:0	10	->
water	127:31	0:0	10	app
arg	127:36	127:44	9	path+1
water	127:36	0:0	10	path
op	127:41	0:0	10	+
water	127:43	0:0	10	1
arg	127:46	127:85	9	FFMIN(fname-path-1,APP_MAX_LENGTH)
call	127:46	127:84	10	FFMIN
arg	127:52	127:68	11	fname-path-1
water	127:52	0:0	12	fname
op	127:58	0:0	12	-
water	127:60	0:0	12	path
op	127:65	0:0	12	-
water	127:67	0:0	12	1
arg	127:70	127:84	11	APP_MAX_LENGTH
water	127:70	0:0	12	APP_MAX_LENGTH
water	127:86	0:0	8	;
water	128:12	0:0	8	}
water	129:8	0:0	6	}
water	130:4	0:0	4	}
if	131:4	139:4	2	(old_app)
cond	131:8	131:8	3	old_app
water	131:8	0:0	4	old_app
stmts	131:17	139:4	3	
water	131:17	0:0	4	{
if	133:8	136:8	4	(strlen (old_app ) >= APP_MAX_LENGTH)
cond	133:12	133:31	5	strlen (old_app ) >= APP_MAX_LENGTH
call	133:12	133:26	6	strlen
arg	133:19	133:26	7	old_app
water	133:19	0:0	8	old_app
op	133:28	0:0	6	>=
water	133:31	0:0	6	APP_MAX_LENGTH
stmts	133:47	136:8	5	
water	133:47	0:0	6	{
water	134:12	0:0	6	ret
op	134:16	0:0	6	=
call	134:18	134:32	6	AVERROR
arg	134:26	134:32	7	EINVAL
water	134:26	0:0	8	EINVAL
water	134:33	0:0	6	;
goto	135:12	135:21	6	fail
water	135:17	0:0	7	fail
water	136:8	0:0	6	}
call	137:8	137:23	4	av_free
arg	137:16	137:23	5	rt->app
water	137:16	0:0	6	rt
op	137:18	0:0	6	->
water	137:20	0:0	6	app
water	137:24	0:0	4	;
water	138:8	0:0	4	rt
op	138:10	0:0	4	->
water	138:12	0:0	4	app
op	138:16	0:0	4	=
water	138:18	0:0	4	old_app
water	138:25	0:0	4	;
water	139:4	0:0	4	}
if	140:4	161:4	2	(! rt -> playpath)
cond	140:8	140:13	3	! rt -> playpath
op	140:8	0:0	4	!
water	140:9	0:0	4	rt
op	140:11	0:0	4	->
water	140:13	0:0	4	playpath
stmts	140:23	161:4	3	
water	140:23	0:0	4	{
water	141:8	0:0	4	rt
op	141:10	0:0	4	->
water	141:12	0:0	4	playpath
op	141:21	0:0	4	=
call	141:23	141:52	4	av_malloc
arg	141:33	141:52	5	PLAYPATH_MAX_LENGTH
water	141:33	0:0	6	PLAYPATH_MAX_LENGTH
water	141:53	0:0	4	;
if	142:8	145:8	4	(! rt -> playpath)
cond	142:12	142:17	5	! rt -> playpath
op	142:12	0:0	6	!
water	142:13	0:0	6	rt
op	142:15	0:0	6	->
water	142:17	0:0	6	playpath
stmts	142:27	145:8	5	
water	142:27	0:0	6	{
water	143:12	0:0	6	ret
op	143:16	0:0	6	=
call	143:18	143:32	6	AVERROR
arg	143:26	143:32	7	ENOMEM
water	143:26	0:0	8	ENOMEM
water	143:33	0:0	6	;
goto	144:12	144:21	6	fail
water	144:17	0:0	7	fail
water	145:8	0:0	6	}
if	146:8	158:8	4	(fname)
cond	146:12	146:12	5	fname
water	146:12	0:0	6	fname
stmts	146:19	158:8	5	
water	146:19	0:0	6	{
decl	147:12	147:35	6	int	len
op	147:20	0:0	6	=
call	147:22	147:34	7	strlen
arg	147:29	147:34	8	fname
water	147:29	0:0	9	fname
if	148:12	152:12	6	(!strchr (fname ,':' ) && len >= 4 && ( !strcmp (fname + len - 4 ,".f4v" ) || !strcmp (fname + len - 4 ,".mp4" ) ))
cond	148:16	150:49	7	!strchr (fname ,':' ) && len >= 4 && ( !strcmp (fname + len - 4 ,".f4v" ) || !strcmp (fname + len - 4 ,".mp4" ) )
op	148:16	0:0	8	!
call	148:17	148:34	8	strchr
arg	148:24	148:29	9	fname
water	148:24	0:0	10	fname
arg	148:31	148:34	9	':'
water	148:31	0:0	10	':'
op	148:36	0:0	8	&&
water	148:39	0:0	8	len
op	148:43	0:0	8	>=
water	148:46	0:0	8	4
op	148:48	0:0	8	&&
water	149:16	0:0	8	(
op	149:17	0:0	8	!
call	149:18	149:48	8	strcmp
arg	149:25	149:40	9	fname+len-4
water	149:25	0:0	10	fname
op	149:31	0:0	10	+
water	149:33	0:0	10	len
op	149:37	0:0	10	-
water	149:39	0:0	10	4
arg	149:42	149:48	9	".f4v"
water	149:42	0:0	10	".f4v"
op	149:50	0:0	8	||
op	150:17	0:0	8	!
call	150:18	150:48	8	strcmp
arg	150:25	150:40	9	fname+len-4
water	150:25	0:0	10	fname
op	150:31	0:0	10	+
water	150:33	0:0	10	len
op	150:37	0:0	10	-
water	150:39	0:0	10	4
arg	150:42	150:48	9	".mp4"
water	150:42	0:0	10	".mp4"
water	150:49	0:0	8	)
stmts	150:52	152:12	7	
water	150:52	0:0	8	{
call	151:16	151:46	8	memcpy
arg	151:23	151:35	9	rt->playpath
water	151:23	0:0	10	rt
op	151:25	0:0	10	->
water	151:27	0:0	10	playpath
arg	151:37	151:43	9	"mp4:"
water	151:37	0:0	10	"mp4:"
arg	151:45	151:46	9	5
water	151:45	0:0	10	5
water	151:47	0:0	8	;
water	152:12	0:0	8	}
else	152:14	156:12	6
stmts	152:19	156:12	7	
water	152:19	0:0	8	{
if	153:16	154:41	8	(len >= 4 && !strcmp (fname + len - 4 ,".flv" ))
cond	153:20	153:63	9	len >= 4 && !strcmp (fname + len - 4 ,".flv" )
water	153:20	0:0	10	len
op	153:24	0:0	10	>=
water	153:27	0:0	10	4
op	153:29	0:0	10	&&
op	153:32	0:0	10	!
call	153:33	153:63	10	strcmp
arg	153:40	153:55	11	fname+len-4
water	153:40	0:0	12	fname
op	153:46	0:0	12	+
water	153:48	0:0	12	len
op	153:52	0:0	12	-
water	153:54	0:0	12	4
arg	153:57	153:63	11	".flv"
water	153:57	0:0	12	".flv"
stmts	154:20	154:41	9	
water	154:20	0:0	10	fname
op	154:25	0:0	10	[
water	154:26	0:0	10	len
op	154:30	0:0	10	-
water	154:32	0:0	10	4
op	154:33	0:0	10	]
op	154:35	0:0	10	=
water	154:37	0:0	10	'\0'
water	154:41	0:0	10	;
water	155:16	0:0	8	rt
op	155:18	0:0	8	->
water	155:20	0:0	8	playpath
op	155:28	0:0	8	[
water	155:29	0:0	8	0
op	155:30	0:0	8	]
op	155:32	0:0	8	=
water	155:34	0:0	8	0
water	155:35	0:0	8	;
water	156:12	0:0	8	}
call	157:12	157:63	6	av_strlcat
arg	157:23	157:35	7	rt->playpath
water	157:23	0:0	8	rt
op	157:25	0:0	8	->
water	157:27	0:0	8	playpath
arg	157:37	157:42	7	fname
water	157:37	0:0	8	fname
arg	157:44	157:63	7	PLAYPATH_MAX_LENGTH
water	157:44	0:0	8	PLAYPATH_MAX_LENGTH
water	157:64	0:0	6	;
water	158:8	0:0	6	}
else	158:10	160:8	4
stmts	158:15	160:8	5	
water	158:15	0:0	6	{
water	159:12	0:0	6	rt
op	159:14	0:0	6	->
water	159:16	0:0	6	playpath
op	159:24	0:0	6	[
water	159:25	0:0	6	0
op	159:26	0:0	6	]
op	159:28	0:0	6	=
water	159:30	0:0	6	'\0'
water	159:34	0:0	6	;
water	160:8	0:0	6	}
water	161:4	0:0	4	}
if	162:4	170:4	2	(! rt -> tcurl)
cond	162:8	162:13	3	! rt -> tcurl
op	162:8	0:0	4	!
water	162:9	0:0	4	rt
op	162:11	0:0	4	->
water	162:13	0:0	4	tcurl
stmts	162:20	170:4	3	
water	162:20	0:0	4	{
water	163:8	0:0	4	rt
op	163:10	0:0	4	->
water	163:12	0:0	4	tcurl
op	163:18	0:0	4	=
call	163:20	163:46	4	av_malloc
arg	163:30	163:46	5	TCURL_MAX_LENGTH
water	163:30	0:0	6	TCURL_MAX_LENGTH
water	163:47	0:0	4	;
if	164:8	167:8	4	(! rt -> tcurl)
cond	164:12	164:17	5	! rt -> tcurl
op	164:12	0:0	6	!
water	164:13	0:0	6	rt
op	164:15	0:0	6	->
water	164:17	0:0	6	tcurl
stmts	164:24	167:8	5	
water	164:24	0:0	6	{
water	165:12	0:0	6	ret
op	165:16	0:0	6	=
call	165:18	165:32	6	AVERROR
arg	165:26	165:32	7	ENOMEM
water	165:26	0:0	8	ENOMEM
water	165:33	0:0	6	;
goto	166:12	166:21	6	fail
water	166:17	0:0	7	fail
water	167:8	0:0	6	}
call	168:8	169:40	4	ff_url_join
arg	168:20	168:29	5	rt->tcurl
water	168:20	0:0	6	rt
op	168:22	0:0	6	->
water	168:24	0:0	6	tcurl
arg	168:31	168:47	5	TCURL_MAX_LENGTH
water	168:31	0:0	6	TCURL_MAX_LENGTH
arg	168:49	168:54	5	proto
water	168:49	0:0	6	proto
arg	168:56	168:60	5	NULL
water	168:56	0:0	6	NULL
arg	168:62	168:70	5	hostname
water	168:62	0:0	6	hostname
arg	169:20	169:24	5	port
water	169:20	0:0	6	port
arg	169:26	169:31	5	"/%s"
water	169:26	0:0	6	"/%s"
arg	169:33	169:40	5	rt->app
water	169:33	0:0	6	rt
op	169:35	0:0	6	->
water	169:37	0:0	6	app
water	169:41	0:0	4	;
water	170:4	0:0	4	}
if	171:4	185:4	2	(! rt -> flashver)
cond	171:8	171:13	3	! rt -> flashver
op	171:8	0:0	4	!
water	171:9	0:0	4	rt
op	171:11	0:0	4	->
water	171:13	0:0	4	flashver
stmts	171:23	185:4	3	
water	171:23	0:0	4	{
water	172:8	0:0	4	rt
op	172:10	0:0	4	->
water	172:12	0:0	4	flashver
op	172:21	0:0	4	=
call	172:23	172:52	4	av_malloc
arg	172:33	172:52	5	FLASHVER_MAX_LENGTH
water	172:33	0:0	6	FLASHVER_MAX_LENGTH
water	172:53	0:0	4	;
if	173:8	176:8	4	(! rt -> flashver)
cond	173:12	173:17	5	! rt -> flashver
op	173:12	0:0	6	!
water	173:13	0:0	6	rt
op	173:15	0:0	6	->
water	173:17	0:0	6	flashver
stmts	173:27	176:8	5	
water	173:27	0:0	6	{
water	174:12	0:0	6	ret
op	174:16	0:0	6	=
call	174:18	174:32	6	AVERROR
arg	174:26	174:32	7	ENOMEM
water	174:26	0:0	8	ENOMEM
water	174:33	0:0	6	;
goto	175:12	175:21	6	fail
water	175:17	0:0	7	fail
water	176:8	0:0	6	}
if	177:8	181:8	4	(rt -> is_input)
cond	177:12	177:16	5	rt -> is_input
water	177:12	0:0	6	rt
op	177:14	0:0	6	->
water	177:16	0:0	6	is_input
stmts	177:26	181:8	5	
water	177:26	0:0	6	{
call	178:12	180:54	6	snprintf
arg	178:21	178:33	7	rt->flashver
water	178:21	0:0	8	rt
op	178:23	0:0	8	->
water	178:25	0:0	8	flashver
arg	178:35	178:54	7	FLASHVER_MAX_LENGTH
water	178:35	0:0	8	FLASHVER_MAX_LENGTH
arg	178:56	178:72	7	"%s %d,%d,%d,%d"
water	178:56	0:0	8	"%s %d,%d,%d,%d"
arg	179:20	179:40	7	RTMP_CLIENT_PLATFORM
water	179:20	0:0	8	RTMP_CLIENT_PLATFORM
arg	179:42	179:58	7	RTMP_CLIENT_VER1
water	179:42	0:0	8	RTMP_CLIENT_VER1
arg	179:60	179:76	7	RTMP_CLIENT_VER2
water	179:60	0:0	8	RTMP_CLIENT_VER2
arg	180:20	180:36	7	RTMP_CLIENT_VER3
water	180:20	0:0	8	RTMP_CLIENT_VER3
arg	180:38	180:54	7	RTMP_CLIENT_VER4
water	180:38	0:0	8	RTMP_CLIENT_VER4
water	180:55	0:0	6	;
water	181:8	0:0	6	}
else	181:10	184:8	4
stmts	181:15	184:8	5	
water	181:15	0:0	6	{
call	182:12	183:66	6	snprintf
arg	182:21	182:33	7	rt->flashver
water	182:21	0:0	8	rt
op	182:23	0:0	8	->
water	182:25	0:0	8	flashver
arg	182:35	182:54	7	FLASHVER_MAX_LENGTH
water	182:35	0:0	8	FLASHVER_MAX_LENGTH
arg	183:20	183:47	7	"FMLE/3.0 (compatible; %s)"
water	183:20	0:0	8	"FMLE/3.0 (compatible; %s)"
arg	183:49	183:66	7	LIBAVFORMAT_IDENT
water	183:49	0:0	8	LIBAVFORMAT_IDENT
water	183:67	0:0	6	;
water	184:8	0:0	6	}
water	185:4	0:0	4	}
water	186:4	0:0	2	rt
op	186:6	0:0	2	->
water	186:8	0:0	2	client_report_size
op	186:27	0:0	2	=
water	186:29	0:0	2	1048576
water	186:36	0:0	2	;
water	187:4	0:0	2	rt
op	187:6	0:0	2	->
water	187:8	0:0	2	bytes_read
op	187:19	0:0	2	=
water	187:21	0:0	2	0
water	187:22	0:0	2	;
water	188:4	0:0	2	rt
op	188:6	0:0	2	->
water	188:8	0:0	2	has_audio
op	188:18	0:0	2	=
water	188:20	0:0	2	0
water	188:21	0:0	2	;
water	189:4	0:0	2	rt
op	189:6	0:0	2	->
water	189:8	0:0	2	has_video
op	189:18	0:0	2	=
water	189:20	0:0	2	0
water	189:21	0:0	2	;
water	190:4	0:0	2	rt
op	190:6	0:0	2	->
water	190:8	0:0	2	received_metadata
op	190:26	0:0	2	=
water	190:28	0:0	2	0
water	190:29	0:0	2	;
water	191:4	0:0	2	rt
op	191:6	0:0	2	->
water	191:8	0:0	2	last_bytes_read
op	191:24	0:0	2	=
water	191:26	0:0	2	0
water	191:27	0:0	2	;
water	192:4	0:0	2	rt
op	192:6	0:0	2	->
water	192:8	0:0	2	server_bw
op	192:18	0:0	2	=
water	192:20	0:0	2	2500000
water	192:27	0:0	2	;
water	193:4	0:0	2	rt
op	193:6	0:0	2	->
water	193:8	0:0	2	duration
op	193:17	0:0	2	=
water	193:19	0:0	2	0
water	193:20	0:0	2	;
call	194:4	195:45	2	av_log
arg	194:11	194:12	3	s
water	194:11	0:0	4	s
arg	194:14	194:26	3	AV_LOG_DEBUG
water	194:14	0:0	4	AV_LOG_DEBUG
arg	194:28	194:75	3	"Proto = %s, path = %s, app = %s, fname = %s\n"
water	194:28	0:0	4	"Proto = %s, path = %s, app = %s, fname = %s\n"
arg	195:11	195:16	3	proto
water	195:11	0:0	4	proto
arg	195:18	195:22	3	path
water	195:18	0:0	4	path
arg	195:24	195:31	3	rt->app
water	195:24	0:0	4	rt
op	195:26	0:0	4	->
water	195:28	0:0	4	app
arg	195:33	195:45	3	rt->playpath
water	195:33	0:0	4	rt
op	195:35	0:0	4	->
water	195:37	0:0	4	playpath
water	195:46	0:0	2	;
if	196:4	199:4	2	(! rt -> listen)
cond	196:8	196:13	3	! rt -> listen
op	196:8	0:0	4	!
water	196:9	0:0	4	rt
op	196:11	0:0	4	->
water	196:13	0:0	4	listen
stmts	196:21	199:4	3	
water	196:21	0:0	4	{
if	197:8	198:21	4	(( ret =gen_connect (s ,rt ) ) < 0)
cond	197:12	197:41	5	( ret =gen_connect (s ,rt ) ) < 0
water	197:12	0:0	6	(
water	197:13	0:0	6	ret
op	197:17	0:0	6	=
call	197:19	197:36	6	gen_connect
arg	197:31	197:32	7	s
water	197:31	0:0	8	s
arg	197:34	197:36	7	rt
water	197:34	0:0	8	rt
water	197:37	0:0	6	)
op	197:39	0:0	6	<
water	197:41	0:0	6	0
stmts	198:12	198:21	5	
goto	198:12	198:21	6	fail
water	198:17	0:0	7	fail
water	199:4	0:0	4	}
else	199:6	202:4	2
stmts	199:11	202:4	3	
water	199:11	0:0	4	{
if	200:8	201:21	4	(( ret =read_connect (s ,s -> priv_data ) ) < 0)
cond	200:12	200:52	5	( ret =read_connect (s ,s -> priv_data ) ) < 0
water	200:12	0:0	6	(
water	200:13	0:0	6	ret
op	200:17	0:0	6	=
call	200:19	200:47	6	read_connect
arg	200:32	200:33	7	s
water	200:32	0:0	8	s
arg	200:35	200:47	7	s->priv_data
water	200:35	0:0	8	s
op	200:36	0:0	8	->
water	200:38	0:0	8	priv_data
water	200:48	0:0	6	)
op	200:50	0:0	6	<
water	200:52	0:0	6	0
stmts	201:12	201:21	5	
goto	201:12	201:21	6	fail
water	201:17	0:0	7	fail
water	202:4	0:0	4	}
do	203:4	205:4	2	(ret ==AVERROR (EAGAIN ))
cond	205:13	205:34	3	ret ==AVERROR (EAGAIN )
water	205:13	0:0	4	ret
op	205:17	0:0	4	==
call	205:20	205:34	4	AVERROR
arg	205:28	205:34	5	EAGAIN
water	205:28	0:0	6	EAGAIN
stmts	203:7	205:4	3	
water	203:7	0:0	4	{
water	204:8	0:0	4	ret
op	204:12	0:0	4	=
call	204:14	204:29	4	get_packet
arg	204:25	204:26	5	s
water	204:25	0:0	6	s
arg	204:28	204:29	5	1
water	204:28	0:0	6	1
water	204:30	0:0	4	;
water	205:4	0:0	4	}
water	205:36	0:0	2	;
if	206:4	207:17	2	(ret < 0)
cond	206:8	206:14	3	ret < 0
water	206:8	0:0	4	ret
op	206:12	0:0	4	<
water	206:14	0:0	4	0
stmts	207:8	207:17	3	
goto	207:8	207:17	4	fail
water	207:13	0:0	5	fail
if	208:4	219:4	2	(rt -> do_reconnect)
cond	208:8	208:12	3	rt -> do_reconnect
water	208:8	0:0	4	rt
op	208:10	0:0	4	->
water	208:12	0:0	4	do_reconnect
stmts	208:26	219:4	3	
water	208:26	0:0	4	{
decl	209:8	209:13	4	int	i
call	210:8	210:30	4	ffurl_close
arg	210:20	210:30	5	rt->stream
water	210:20	0:0	6	rt
op	210:22	0:0	6	->
water	210:24	0:0	6	stream
water	210:31	0:0	4	;
water	211:8	0:0	4	rt
op	211:10	0:0	4	->
water	211:12	0:0	4	stream
op	211:25	0:0	4	=
water	211:27	0:0	4	NULL
water	211:31	0:0	4	;
water	212:8	0:0	4	rt
op	212:10	0:0	4	->
water	212:12	0:0	4	do_reconnect
op	212:25	0:0	4	=
water	212:27	0:0	4	0
water	212:28	0:0	4	;
water	213:8	0:0	4	rt
op	213:10	0:0	4	->
water	213:12	0:0	4	nb_invokes
op	213:25	0:0	4	=
water	213:27	0:0	4	0
water	213:28	0:0	4	;
for	214:8	216:63	4	(i = 0 ;i < 2;i ++)
forinit	214:13	214:18	5	i = 0 ;
water	214:13	0:0	6	i
op	214:15	0:0	6	=
water	214:17	0:0	6	0
water	214:18	0:0	6	;
cond	214:20	214:24	5	i < 2
water	214:20	0:0	6	i
op	214:22	0:0	6	<
water	214:24	0:0	6	2
forexpr	214:27	214:28	5	i ++
water	214:27	0:0	6	i
op	214:28	0:0	6	++
stmts	215:12	216:63	5	
call	215:12	216:62	6	memset
arg	215:19	215:34	7	rt->prev_pkt[i]
water	215:19	0:0	8	rt
op	215:21	0:0	8	->
water	215:23	0:0	8	prev_pkt
op	215:31	0:0	8	[
water	215:32	0:0	8	i
op	215:33	0:0	8	]
arg	215:36	215:37	7	0
water	215:36	0:0	8	0
arg	216:19	216:62	7	sizeof(**rt->prev_pkt)*rt->nb_prev_pkt[i]
op	216:19	0:0	8	sizeof
water	216:25	0:0	8	(
op	216:26	0:0	8	*
op	216:27	0:0	8	*
water	216:28	0:0	8	rt
op	216:30	0:0	8	->
water	216:32	0:0	8	prev_pkt
water	216:40	0:0	8	)
op	216:42	0:0	8	*
water	216:44	0:0	8	rt
op	216:46	0:0	8	->
water	216:48	0:0	8	nb_prev_pkt
op	216:59	0:0	8	[
water	216:60	0:0	8	i
op	216:61	0:0	8	]
water	216:63	0:0	6	;
call	217:8	217:31	4	free_tracked_methods
arg	217:29	217:31	5	rt
water	217:29	0:0	6	rt
water	217:32	0:0	4	;
goto	218:8	218:22	4	reconnect
water	218:13	0:0	5	reconnect
water	219:4	0:0	4	}
if	220:4	252:4	2	(rt -> is_input)
cond	220:8	220:12	3	rt -> is_input
water	220:8	0:0	4	rt
op	220:10	0:0	4	->
water	220:12	0:0	4	is_input
stmts	220:22	252:4	3	
water	220:22	0:0	4	{
water	222:8	0:0	4	rt
op	222:10	0:0	4	->
water	222:12	0:0	4	flv_size
op	222:21	0:0	4	=
water	222:23	0:0	4	13
water	222:25	0:0	4	;
if	223:8	224:21	4	(( ret =av_reallocp (& rt -> flv_data ,rt -> flv_size ) ) < 0)
cond	223:12	223:63	5	( ret =av_reallocp (& rt -> flv_data ,rt -> flv_size ) ) < 0
water	223:12	0:0	6	(
water	223:13	0:0	6	ret
op	223:17	0:0	6	=
call	223:19	223:58	6	av_reallocp
arg	223:31	223:44	7	&rt->flv_data
op	223:31	0:0	8	&
water	223:32	0:0	8	rt
op	223:34	0:0	8	->
water	223:36	0:0	8	flv_data
arg	223:46	223:58	7	rt->flv_size
water	223:46	0:0	8	rt
op	223:48	0:0	8	->
water	223:50	0:0	8	flv_size
water	223:59	0:0	6	)
op	223:61	0:0	6	<
water	223:63	0:0	6	0
stmts	224:12	224:21	5	
goto	224:12	224:21	6	fail
water	224:17	0:0	7	fail
water	225:8	0:0	4	rt
op	225:10	0:0	4	->
water	225:12	0:0	4	flv_off
op	225:21	0:0	4	=
water	225:23	0:0	4	0
water	225:24	0:0	4	;
call	226:8	226:70	4	memcpy
arg	226:15	226:27	5	rt->flv_data
water	226:15	0:0	6	rt
op	226:17	0:0	6	->
water	226:19	0:0	6	flv_data
arg	226:29	226:56	5	"FLV\1\0\0\0\0\011\0\0\0\0"
water	226:29	0:0	6	"FLV\1\0\0\0\0\011\0\0\0\0"
arg	226:58	226:70	5	rt->flv_size
water	226:58	0:0	6	rt
op	226:60	0:0	6	->
water	226:62	0:0	6	flv_size
water	226:71	0:0	4	;
while	232:8	235:8	4	(! rt -> has_audio && ! rt -> has_video && ! rt -> received_metadata)
cond	232:15	232:56	5	! rt -> has_audio && ! rt -> has_video && ! rt -> received_metadata
op	232:15	0:0	6	!
water	232:16	0:0	6	rt
op	232:18	0:0	6	->
water	232:20	0:0	6	has_audio
op	232:30	0:0	6	&&
op	232:33	0:0	6	!
water	232:34	0:0	6	rt
op	232:36	0:0	6	->
water	232:38	0:0	6	has_video
op	232:48	0:0	6	&&
op	232:51	0:0	6	!
water	232:52	0:0	6	rt
op	232:54	0:0	6	->
water	232:56	0:0	6	received_metadata
stmts	232:75	235:8	5	
water	232:75	0:0	6	{
if	233:12	234:24	6	(( ret =get_packet (s ,0 ) ) < 0)
cond	233:16	233:43	7	( ret =get_packet (s ,0 ) ) < 0
water	233:16	0:0	8	(
water	233:17	0:0	8	ret
op	233:21	0:0	8	=
call	233:23	233:38	8	get_packet
arg	233:34	233:35	9	s
water	233:34	0:0	10	s
arg	233:37	233:38	9	0
water	233:37	0:0	10	0
water	233:39	0:0	8	)
op	233:41	0:0	8	<
water	233:43	0:0	8	0
stmts	234:15	234:24	7	
goto	234:15	234:24	8	fail
water	234:20	0:0	9	fail
water	235:8	0:0	6	}
if	239:8	241:8	4	(rt -> has_audio)
cond	239:12	239:16	5	rt -> has_audio
water	239:12	0:0	6	rt
op	239:14	0:0	6	->
water	239:16	0:0	6	has_audio
stmts	239:27	241:8	5	
water	239:27	0:0	6	{
water	240:12	0:0	6	rt
op	240:14	0:0	6	->
water	240:16	0:0	6	flv_data
op	240:24	0:0	6	[
water	240:25	0:0	6	4
op	240:26	0:0	6	]
op	240:28	0:0	6	|=
water	240:31	0:0	6	FLV_HEADER_FLAG_HASAUDIO
water	240:55	0:0	6	;
water	241:8	0:0	6	}
if	242:8	244:8	4	(rt -> has_video)
cond	242:12	242:16	5	rt -> has_video
water	242:12	0:0	6	rt
op	242:14	0:0	6	->
water	242:16	0:0	6	has_video
stmts	242:27	244:8	5	
water	242:27	0:0	6	{
water	243:12	0:0	6	rt
op	243:14	0:0	6	->
water	243:16	0:0	6	flv_data
op	243:24	0:0	6	[
water	243:25	0:0	6	4
op	243:26	0:0	6	]
op	243:28	0:0	6	|=
water	243:31	0:0	6	FLV_HEADER_FLAG_HASVIDEO
water	243:55	0:0	6	;
water	244:8	0:0	6	}
if	248:8	251:8	4	(! rt -> received_metadata && rt -> duration > 0)
cond	248:12	248:53	5	! rt -> received_metadata && rt -> duration > 0
op	248:12	0:0	6	!
water	248:13	0:0	6	rt
op	248:15	0:0	6	->
water	248:17	0:0	6	received_metadata
op	248:35	0:0	6	&&
water	248:38	0:0	6	rt
op	248:40	0:0	6	->
water	248:42	0:0	6	duration
op	248:51	0:0	6	>
water	248:53	0:0	6	0
stmts	248:56	251:8	5	
water	248:56	0:0	6	{
if	249:12	250:25	6	(( ret =inject_fake_duration_metadata (rt ) ) < 0)
cond	249:16	249:60	7	( ret =inject_fake_duration_metadata (rt ) ) < 0
water	249:16	0:0	8	(
water	249:17	0:0	8	ret
op	249:21	0:0	8	=
call	249:23	249:55	8	inject_fake_duration_metadata
arg	249:53	249:55	9	rt
water	249:53	0:0	10	rt
water	249:56	0:0	8	)
op	249:58	0:0	8	<
water	249:60	0:0	8	0
stmts	250:16	250:25	7	
goto	250:16	250:25	8	fail
water	250:21	0:0	9	fail
water	251:8	0:0	6	}
water	252:4	0:0	4	}
else	252:6	257:4	2
stmts	252:11	257:4	3	
water	252:11	0:0	4	{
water	253:8	0:0	4	rt
op	253:10	0:0	4	->
water	253:12	0:0	4	flv_size
op	253:21	0:0	4	=
water	253:23	0:0	4	0
water	253:24	0:0	4	;
water	254:8	0:0	4	rt
op	254:10	0:0	4	->
water	254:12	0:0	4	flv_data
op	254:21	0:0	4	=
water	254:23	0:0	4	NULL
water	254:27	0:0	4	;
water	255:8	0:0	4	rt
op	255:10	0:0	4	->
water	255:12	0:0	4	flv_off
op	255:21	0:0	4	=
water	255:23	0:0	4	0
water	255:24	0:0	4	;
water	256:8	0:0	4	rt
op	256:10	0:0	4	->
water	256:12	0:0	4	skip_bytes
op	256:23	0:0	4	=
water	256:25	0:0	4	13
water	256:27	0:0	4	;
water	257:4	0:0	4	}
water	258:4	0:0	2	s
op	258:5	0:0	2	->
water	258:7	0:0	2	max_packet_size
op	258:23	0:0	2	=
water	258:25	0:0	2	rt
op	258:27	0:0	2	->
water	258:29	0:0	2	stream
op	258:35	0:0	2	->
water	258:37	0:0	2	max_packet_size
water	258:52	0:0	2	;
water	259:4	0:0	2	s
op	259:5	0:0	2	->
water	259:7	0:0	2	is_streamed
op	259:23	0:0	2	=
water	259:25	0:0	2	1
water	259:26	0:0	2	;
return	260:4	260:12	2	0
water	260:11	0:0	3	0
label	261:0	261:4	2	fail :
call	262:4	262:22	2	av_dict_free
arg	262:17	262:22	3	&opts
op	262:17	0:0	4	&
water	262:18	0:0	4	opts
water	262:23	0:0	2	;
call	263:4	263:16	2	rtmp_close
arg	263:15	263:16	3	s
water	263:15	0:0	4	s
water	263:17	0:0	2	;
return	264:4	264:14	2	ret
water	264:11	0:0	3	ret
