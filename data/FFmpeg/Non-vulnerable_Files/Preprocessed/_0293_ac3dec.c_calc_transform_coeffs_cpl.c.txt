func	1:0	23:0	0	static void	calc_transform_coeffs_cpl
params	1:37	0:0	1	
param	1:38	1:57	2	AC3DecodeContext *	s
stmnts	0:0	22:4	1	
decl	3:4	3:21	2	int	bin
water	3:11	0:0	2	,
decl	3:4	3:21	2	int	band
water	3:17	0:0	2	,
decl	3:4	3:21	2	int	ch
water	4:4	0:0	2	bin
op	4:8	0:0	2	=
water	4:10	0:0	2	s
op	4:11	0:0	2	->
water	4:13	0:0	2	start_freq
op	4:23	0:0	2	[
water	4:24	0:0	2	CPL_CH
op	4:30	0:0	2	]
water	4:31	0:0	2	;
for	5:4	22:4	2	(band = 0 ;band < s -> num_cpl_bands;band ++)
forinit	5:9	5:17	3	band = 0 ;
water	5:9	0:0	4	band
op	5:14	0:0	4	=
water	5:16	0:0	4	0
water	5:17	0:0	4	;
cond	5:19	5:29	3	band < s -> num_cpl_bands
water	5:19	0:0	4	band
op	5:24	0:0	4	<
water	5:26	0:0	4	s
op	5:27	0:0	4	->
water	5:29	0:0	4	num_cpl_bands
forexpr	5:44	5:48	3	band ++
water	5:44	0:0	4	band
op	5:48	0:0	4	++
stmts	5:52	22:4	3	
water	5:52	0:0	4	{
decl	6:8	6:28	4	int	band_start
op	6:23	0:0	4	=
water	6:25	0:0	4	bin
decl	7:8	7:52	4	int	band_end
op	7:21	0:0	4	=
water	7:23	0:0	4	bin
op	7:27	0:0	4	+
water	7:29	0:0	4	s
op	7:30	0:0	4	->
water	7:32	0:0	4	cpl_band_sizes
op	7:46	0:0	4	[
water	7:47	0:0	4	band
op	7:51	0:0	4	]
for	8:8	20:8	4	(ch = 1 ;ch <= s -> fbw_channels;ch ++)
forinit	8:13	8:19	5	ch = 1 ;
water	8:13	0:0	6	ch
op	8:16	0:0	6	=
water	8:18	0:0	6	1
water	8:19	0:0	6	;
cond	8:21	8:30	5	ch <= s -> fbw_channels
water	8:21	0:0	6	ch
op	8:24	0:0	6	<=
water	8:27	0:0	6	s
op	8:28	0:0	6	->
water	8:30	0:0	6	fbw_channels
forexpr	8:44	8:46	5	ch ++
water	8:44	0:0	6	ch
op	8:46	0:0	6	++
stmts	8:50	20:8	5	
water	8:50	0:0	6	{
if	9:12	19:12	6	(s -> channel_in_cpl [ ch ])
cond	9:16	9:36	7	s -> channel_in_cpl [ ch ]
water	9:16	0:0	8	s
op	9:17	0:0	8	->
water	9:19	0:0	8	channel_in_cpl
op	9:33	0:0	8	[
water	9:34	0:0	8	ch
op	9:36	0:0	8	]
stmts	9:39	19:12	7	
water	9:39	0:0	8	{
decl	10:16	10:60	8	int	cpl_coord
op	10:30	0:0	8	=
water	10:32	0:0	8	s
op	10:33	0:0	8	->
water	10:35	0:0	8	cpl_coords
op	10:45	0:0	8	[
water	10:46	0:0	8	ch
op	10:48	0:0	8	]
op	10:49	0:0	8	[
water	10:50	0:0	8	band
op	10:54	0:0	8	]
op	10:56	0:0	8	<<
water	10:59	0:0	8	5
for	11:16	14:16	8	(bin = band_start ;bin < band_end;bin ++)
forinit	11:21	11:37	9	bin = band_start ;
water	11:21	0:0	10	bin
op	11:25	0:0	10	=
water	11:27	0:0	10	band_start
water	11:37	0:0	10	;
cond	11:39	11:45	9	bin < band_end
water	11:39	0:0	10	bin
op	11:43	0:0	10	<
water	11:45	0:0	10	band_end
forexpr	11:55	11:58	9	bin ++
water	11:55	0:0	10	bin
op	11:58	0:0	10	++
stmts	11:62	14:16	9	
water	11:62	0:0	10	{
water	12:20	0:0	10	s
op	12:21	0:0	10	->
water	12:23	0:0	10	fixed_coeffs
op	12:35	0:0	10	[
water	12:36	0:0	10	ch
op	12:38	0:0	10	]
op	12:39	0:0	10	[
water	12:40	0:0	10	bin
op	12:43	0:0	10	]
op	12:45	0:0	10	=
call	13:24	13:79	10	MULH
arg	13:29	13:68	11	s->fixed_coeffs[CPL_CH][bin]*(1<<4)
water	13:29	0:0	12	s
op	13:30	0:0	12	->
water	13:32	0:0	12	fixed_coeffs
op	13:44	0:0	12	[
water	13:45	0:0	12	CPL_CH
op	13:51	0:0	12	]
op	13:52	0:0	12	[
water	13:53	0:0	12	bin
op	13:56	0:0	12	]
op	13:58	0:0	12	*
water	13:60	0:0	12	(
water	13:61	0:0	12	1
op	13:63	0:0	12	<<
water	13:66	0:0	12	4
water	13:67	0:0	12	)
arg	13:70	13:79	11	cpl_coord
water	13:70	0:0	12	cpl_coord
water	13:80	0:0	10	;
water	14:16	0:0	10	}
if	15:16	18:16	8	(ch == 2 && s -> phase_flags [ band ])
cond	15:20	15:50	9	ch == 2 && s -> phase_flags [ band ]
water	15:20	0:0	10	ch
op	15:23	0:0	10	==
water	15:26	0:0	10	2
op	15:28	0:0	10	&&
water	15:31	0:0	10	s
op	15:32	0:0	10	->
water	15:34	0:0	10	phase_flags
op	15:45	0:0	10	[
water	15:46	0:0	10	band
op	15:50	0:0	10	]
stmts	15:53	18:16	9	
water	15:53	0:0	10	{
for	16:20	17:74	10	(bin = band_start ;bin < band_end;bin ++)
forinit	16:25	16:41	11	bin = band_start ;
water	16:25	0:0	12	bin
op	16:29	0:0	12	=
water	16:31	0:0	12	band_start
water	16:41	0:0	12	;
cond	16:43	16:49	11	bin < band_end
water	16:43	0:0	12	bin
op	16:47	0:0	12	<
water	16:49	0:0	12	band_end
forexpr	16:59	16:62	11	bin ++
water	16:59	0:0	12	bin
op	16:62	0:0	12	++
stmts	17:24	17:74	11	
water	17:24	0:0	12	s
op	17:25	0:0	12	->
water	17:27	0:0	12	fixed_coeffs
op	17:39	0:0	12	[
water	17:40	0:0	12	2
op	17:41	0:0	12	]
op	17:42	0:0	12	[
water	17:43	0:0	12	bin
op	17:46	0:0	12	]
op	17:48	0:0	12	=
op	17:50	0:0	12	-
water	17:51	0:0	12	s
op	17:52	0:0	12	->
water	17:54	0:0	12	fixed_coeffs
op	17:66	0:0	12	[
water	17:67	0:0	12	2
op	17:68	0:0	12	]
op	17:69	0:0	12	[
water	17:70	0:0	12	bin
op	17:73	0:0	12	]
water	17:74	0:0	12	;
water	18:16	0:0	10	}
water	19:12	0:0	8	}
water	20:8	0:0	6	}
water	21:8	0:0	4	bin
op	21:12	0:0	4	=
water	21:14	0:0	4	band_end
water	21:22	0:0	4	;
water	22:4	0:0	4	}
