func	1:0	34:0	0	static int	parse_channel_name
params	1:29	0:0	1	
param	1:30	1:40	2	char * *	arg
param	1:42	1:55	2	int *	rchannel
param	1:57	1:68	2	int *	rnamed
stmnts	0:0	33:26	1	
decl	3:4	3:15	2	char	buf[8]
decl	4:4	4:30	2	int	len
water	4:11	0:0	2	,
decl	4:4	4:30	2	int	i
water	4:14	0:0	2	,
decl	4:4	4:30	2	int	channel_id
op	4:27	0:0	2	=
water	4:29	0:0	2	0
decl	5:4	5:27	2	int64_t	layout
water	5:18	0:0	2	,
decl	5:4	5:27	2	int64_t	layout0
call	6:4	6:19	2	skip_spaces
arg	6:16	6:19	3	arg
water	6:16	0:0	4	arg
water	6:20	0:0	2	;
if	8:4	24:4	2	(sscanf (* arg ,"%7[A-Z]%n" ,buf ,& len ))
cond	8:8	8:43	3	sscanf (* arg ,"%7[A-Z]%n" ,buf ,& len )
call	8:8	8:43	4	sscanf
arg	8:15	8:19	5	*arg
op	8:15	0:0	6	*
water	8:16	0:0	6	arg
arg	8:21	8:32	5	"%7[A-Z]%n"
water	8:21	0:0	6	"%7[A-Z]%n"
arg	8:34	8:37	5	buf
water	8:34	0:0	6	buf
arg	8:39	8:43	5	&len
op	8:39	0:0	6	&
water	8:40	0:0	6	len
stmts	8:46	24:4	3	
water	8:46	0:0	4	{
water	9:8	0:0	4	layout0
op	9:16	0:0	4	=
water	9:18	0:0	4	layout
op	9:25	0:0	4	=
call	9:27	9:52	4	av_get_channel_layout
arg	9:49	9:52	5	buf
water	9:49	0:0	6	buf
water	9:53	0:0	4	;
for	11:8	16:8	4	(i = 32 ;i > 0;i >>= 1)
forinit	11:13	11:19	5	i = 32 ;
water	11:13	0:0	6	i
op	11:15	0:0	6	=
water	11:17	0:0	6	32
water	11:19	0:0	6	;
cond	11:21	11:25	5	i > 0
water	11:21	0:0	6	i
op	11:23	0:0	6	>
water	11:25	0:0	6	0
forexpr	11:28	11:34	5	i >>= 1
water	11:28	0:0	6	i
op	11:30	0:0	6	>>=
water	11:34	0:0	6	1
stmts	11:37	16:8	5	
water	11:37	0:0	6	{
if	12:12	15:12	6	(layout >= ( int64_t ) 1 << i)
cond	12:16	12:40	7	layout >= ( int64_t ) 1 << i
water	12:16	0:0	8	layout
op	12:23	0:0	8	>=
water	12:26	0:0	8	(
water	12:27	0:0	8	int64_t
water	12:34	0:0	8	)
water	12:35	0:0	8	1
op	12:37	0:0	8	<<
water	12:40	0:0	8	i
stmts	12:43	15:12	7	
water	12:43	0:0	8	{
water	13:16	0:0	8	channel_id
op	13:27	0:0	8	+=
water	13:30	0:0	8	i
water	13:31	0:0	8	;
water	14:16	0:0	8	layout
op	14:23	0:0	8	>>=
water	14:27	0:0	8	i
water	14:28	0:0	8	;
water	15:12	0:0	8	}
water	16:8	0:0	6	}
if	18:8	19:34	4	(channel_id >= MAX_CHANNELS || layout0 != ( int64_t ) 1 << channel_id)
cond	18:12	18:67	5	channel_id >= MAX_CHANNELS || layout0 != ( int64_t ) 1 << channel_id
water	18:12	0:0	6	channel_id
op	18:23	0:0	6	>=
water	18:26	0:0	6	MAX_CHANNELS
op	18:39	0:0	6	||
water	18:42	0:0	6	layout0
op	18:50	0:0	6	!=
water	18:53	0:0	6	(
water	18:54	0:0	6	int64_t
water	18:61	0:0	6	)
water	18:62	0:0	6	1
op	18:64	0:0	6	<<
water	18:67	0:0	6	channel_id
stmts	19:12	19:34	5	
return	19:12	19:34	6	AVERROR(EINVAL)
call	19:19	19:33	7	AVERROR
arg	19:27	19:33	8	EINVAL
water	19:27	0:0	9	EINVAL
op	20:8	0:0	4	*
water	20:9	0:0	4	rchannel
op	20:18	0:0	4	=
water	20:20	0:0	4	channel_id
water	20:30	0:0	4	;
op	21:8	0:0	4	*
water	21:9	0:0	4	rnamed
op	21:16	0:0	4	=
water	21:18	0:0	4	1
water	21:19	0:0	4	;
op	22:8	0:0	4	*
water	22:9	0:0	4	arg
op	22:13	0:0	4	+=
water	22:16	0:0	4	len
water	22:19	0:0	4	;
return	23:8	23:16	4	0
water	23:15	0:0	5	0
water	24:4	0:0	4	}
if	26:4	32:4	2	(sscanf (* arg ,"c%d%n" ,& channel_id ,& len ) && channel_id >= 0 && channel_id < MAX_CHANNELS)
cond	26:8	27:40	3	sscanf (* arg ,"c%d%n" ,& channel_id ,& len ) && channel_id >= 0 && channel_id < MAX_CHANNELS
call	26:8	26:47	4	sscanf
arg	26:15	26:19	5	*arg
op	26:15	0:0	6	*
water	26:16	0:0	6	arg
arg	26:21	26:28	5	"c%d%n"
water	26:21	0:0	6	"c%d%n"
arg	26:30	26:41	5	&channel_id
op	26:30	0:0	6	&
water	26:31	0:0	6	channel_id
arg	26:43	26:47	5	&len
op	26:43	0:0	6	&
water	26:44	0:0	6	len
op	26:49	0:0	4	&&
water	27:8	0:0	4	channel_id
op	27:19	0:0	4	>=
water	27:22	0:0	4	0
op	27:24	0:0	4	&&
water	27:27	0:0	4	channel_id
op	27:38	0:0	4	<
water	27:40	0:0	4	MAX_CHANNELS
stmts	27:54	32:4	3	
water	27:54	0:0	4	{
op	28:8	0:0	4	*
water	28:9	0:0	4	rchannel
op	28:18	0:0	4	=
water	28:20	0:0	4	channel_id
water	28:30	0:0	4	;
op	29:8	0:0	4	*
water	29:9	0:0	4	rnamed
op	29:16	0:0	4	=
water	29:18	0:0	4	0
water	29:19	0:0	4	;
op	30:8	0:0	4	*
water	30:9	0:0	4	arg
op	30:13	0:0	4	+=
water	30:16	0:0	4	len
water	30:19	0:0	4	;
return	31:8	31:16	4	0
water	31:15	0:0	5	0
water	32:4	0:0	4	}
return	33:4	33:26	2	AVERROR(EINVAL)
call	33:11	33:25	3	AVERROR
arg	33:19	33:25	4	EINVAL
water	33:19	0:0	5	EINVAL
