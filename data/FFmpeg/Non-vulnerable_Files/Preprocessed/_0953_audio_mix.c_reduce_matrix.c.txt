func	1:0	114:0	0	static void	reduce_matrix
params	1:25	0:0	1	
param	1:26	1:38	2	AudioMix *	am
param	1:40	1:60	2	const double *	matrix
param	1:62	1:72	2	int	stride
stmnts	0:0	113:4	1	
decl	3:4	3:12	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:12	2	int	o
call	4:4	4:54	2	memset
arg	4:11	4:26	3	am->output_zero
water	4:11	0:0	4	am
op	4:13	0:0	4	->
water	4:15	0:0	4	output_zero
arg	4:28	4:29	3	0
water	4:28	0:0	4	0
arg	4:31	4:54	3	sizeof(am->output_zero)
op	4:31	0:0	4	sizeof
water	4:37	0:0	4	(
water	4:38	0:0	4	am
op	4:40	0:0	4	->
water	4:42	0:0	4	output_zero
water	4:53	0:0	4	)
water	4:55	0:0	2	;
call	5:4	5:53	2	memset
arg	5:11	5:25	3	am->input_skip
water	5:11	0:0	4	am
op	5:13	0:0	4	->
water	5:15	0:0	4	input_skip
arg	5:28	5:29	3	0
water	5:28	0:0	4	0
arg	5:31	5:53	3	sizeof(am->input_skip)
op	5:31	0:0	4	sizeof
water	5:37	0:0	4	(
water	5:38	0:0	4	am
op	5:40	0:0	4	->
water	5:42	0:0	4	input_skip
water	5:52	0:0	4	)
water	5:54	0:0	2	;
call	6:4	6:54	2	memset
arg	6:11	6:26	3	am->output_skip
water	6:11	0:0	4	am
op	6:13	0:0	4	->
water	6:15	0:0	4	output_skip
arg	6:28	6:29	3	0
water	6:28	0:0	4	0
arg	6:31	6:54	3	sizeof(am->output_skip)
op	6:31	0:0	4	sizeof
water	6:37	0:0	4	(
water	6:38	0:0	4	am
op	6:40	0:0	4	->
water	6:42	0:0	4	output_skip
water	6:53	0:0	4	)
water	6:55	0:0	2	;
for	8:4	33:4	2	(o = 0 ;o < am -> out_channels;o ++)
forinit	8:9	8:14	3	o = 0 ;
water	8:9	0:0	4	o
op	8:11	0:0	4	=
water	8:13	0:0	4	0
water	8:14	0:0	4	;
cond	8:16	8:24	3	o < am -> out_channels
water	8:16	0:0	4	o
op	8:18	0:0	4	<
water	8:20	0:0	4	am
op	8:22	0:0	4	->
water	8:24	0:0	4	out_channels
forexpr	8:38	8:39	3	o ++
water	8:38	0:0	4	o
op	8:39	0:0	4	++
stmts	8:43	33:4	3	
water	8:43	0:0	4	{
decl	9:8	9:20	4	int	zero
op	9:17	0:0	4	=
water	9:19	0:0	4	1
for	11:8	16:8	4	(i = 0 ;i < am -> in_channels;i ++)
forinit	11:13	11:18	5	i = 0 ;
water	11:13	0:0	6	i
op	11:15	0:0	6	=
water	11:17	0:0	6	0
water	11:18	0:0	6	;
cond	11:20	11:28	5	i < am -> in_channels
water	11:20	0:0	6	i
op	11:22	0:0	6	<
water	11:24	0:0	6	am
op	11:26	0:0	6	->
water	11:28	0:0	6	in_channels
forexpr	11:41	11:42	5	i ++
water	11:41	0:0	6	i
op	11:42	0:0	6	++
stmts	11:46	16:8	5	
water	11:46	0:0	6	{
if	12:12	15:12	6	(matrix [ o * stride + i ] != 0 . 0)
cond	12:16	12:44	7	matrix [ o * stride + i ] != 0 . 0
water	12:16	0:0	8	matrix
op	12:22	0:0	8	[
water	12:23	0:0	8	o
op	12:25	0:0	8	*
water	12:27	0:0	8	stride
op	12:34	0:0	8	+
water	12:36	0:0	8	i
op	12:37	0:0	8	]
op	12:39	0:0	8	!=
water	12:42	0:0	8	0
op	12:43	0:0	8	.
water	12:44	0:0	8	0
stmts	12:47	15:12	7	
water	12:47	0:0	8	{
water	13:16	0:0	8	zero
op	13:21	0:0	8	=
water	13:23	0:0	8	0
water	13:24	0:0	8	;
break	14:16	14:21	8	
water	15:12	0:0	8	}
water	16:8	0:0	6	}
if	19:8	26:8	4	(o < am -> in_channels)
cond	19:12	19:20	5	o < am -> in_channels
water	19:12	0:0	6	o
op	19:14	0:0	6	<
water	19:16	0:0	6	am
op	19:18	0:0	6	->
water	19:20	0:0	6	in_channels
stmts	19:33	26:8	5	
water	19:33	0:0	6	{
for	20:12	25:12	6	(i = 0 ;i < am -> out_channels;i ++)
forinit	20:17	20:22	7	i = 0 ;
water	20:17	0:0	8	i
op	20:19	0:0	8	=
water	20:21	0:0	8	0
water	20:22	0:0	8	;
cond	20:24	20:32	7	i < am -> out_channels
water	20:24	0:0	8	i
op	20:26	0:0	8	<
water	20:28	0:0	8	am
op	20:30	0:0	8	->
water	20:32	0:0	8	out_channels
forexpr	20:46	20:47	7	i ++
water	20:46	0:0	8	i
op	20:47	0:0	8	++
stmts	20:51	25:12	7	
water	20:51	0:0	8	{
if	21:16	24:16	8	(matrix [ i * stride + o ] != 0 . 0)
cond	21:20	21:48	9	matrix [ i * stride + o ] != 0 . 0
water	21:20	0:0	10	matrix
op	21:26	0:0	10	[
water	21:27	0:0	10	i
op	21:29	0:0	10	*
water	21:31	0:0	10	stride
op	21:38	0:0	10	+
water	21:40	0:0	10	o
op	21:41	0:0	10	]
op	21:43	0:0	10	!=
water	21:46	0:0	10	0
op	21:47	0:0	10	.
water	21:48	0:0	10	0
stmts	21:51	24:16	9	
water	21:51	0:0	10	{
water	22:20	0:0	10	zero
op	22:25	0:0	10	=
water	22:27	0:0	10	0
water	22:28	0:0	10	;
break	23:20	23:25	10	
water	24:16	0:0	10	}
water	25:12	0:0	8	}
water	26:8	0:0	6	}
if	27:8	32:8	4	(zero)
cond	27:12	27:12	5	zero
water	27:12	0:0	6	zero
stmts	27:18	32:8	5	
water	27:18	0:0	6	{
water	28:12	0:0	6	am
op	28:14	0:0	6	->
water	28:16	0:0	6	output_zero
op	28:27	0:0	6	[
water	28:28	0:0	6	o
op	28:29	0:0	6	]
op	28:31	0:0	6	=
water	28:33	0:0	6	1
water	28:34	0:0	6	;
water	29:12	0:0	6	am
op	29:14	0:0	6	->
water	29:16	0:0	6	out_matrix_channels
op	29:35	0:0	6	--
water	29:37	0:0	6	;
if	30:12	31:40	6	(o < am -> in_channels)
cond	30:16	30:24	7	o < am -> in_channels
water	30:16	0:0	8	o
op	30:18	0:0	8	<
water	30:20	0:0	8	am
op	30:22	0:0	8	->
water	30:24	0:0	8	in_channels
stmts	31:16	31:40	7	
water	31:16	0:0	8	am
op	31:18	0:0	8	->
water	31:20	0:0	8	in_matrix_channels
op	31:38	0:0	8	--
water	31:40	0:0	8	;
water	32:8	0:0	6	}
water	33:4	0:0	4	}
if	34:4	38:4	2	(am -> out_matrix_channels == 0 || am -> in_matrix_channels == 0)
cond	34:8	34:66	3	am -> out_matrix_channels == 0 || am -> in_matrix_channels == 0
water	34:8	0:0	4	am
op	34:10	0:0	4	->
water	34:12	0:0	4	out_matrix_channels
op	34:32	0:0	4	==
water	34:35	0:0	4	0
op	34:37	0:0	4	||
water	34:40	0:0	4	am
op	34:42	0:0	4	->
water	34:44	0:0	4	in_matrix_channels
op	34:63	0:0	4	==
water	34:66	0:0	4	0
stmts	34:69	38:4	3	
water	34:69	0:0	4	{
water	35:8	0:0	4	am
op	35:10	0:0	4	->
water	35:12	0:0	4	out_matrix_channels
op	35:32	0:0	4	=
water	35:34	0:0	4	0
water	35:35	0:0	4	;
water	36:8	0:0	4	am
op	36:10	0:0	4	->
water	36:12	0:0	4	in_matrix_channels
op	36:31	0:0	4	=
water	36:33	0:0	4	0
water	36:34	0:0	4	;
return	37:8	37:14	4	
water	38:4	0:0	4	}
for	41:4	65:4	2	(i = 0 ;i <FFMIN (am -> in_channels ,am -> out_channels );i ++)
forinit	41:9	41:14	3	i = 0 ;
water	41:9	0:0	4	i
op	41:11	0:0	4	=
water	41:13	0:0	4	0
water	41:14	0:0	4	;
cond	41:16	41:59	3	i <FFMIN (am -> in_channels ,am -> out_channels )
water	41:16	0:0	4	i
op	41:18	0:0	4	<
call	41:20	41:59	4	FFMIN
arg	41:26	41:41	5	am->in_channels
water	41:26	0:0	6	am
op	41:28	0:0	6	->
water	41:30	0:0	6	in_channels
arg	41:43	41:59	5	am->out_channels
water	41:43	0:0	6	am
op	41:45	0:0	6	->
water	41:47	0:0	6	out_channels
forexpr	41:62	41:63	3	i ++
water	41:62	0:0	4	i
op	41:63	0:0	4	++
stmts	41:67	65:4	3	
water	41:67	0:0	4	{
decl	42:8	42:20	4	int	skip
op	42:17	0:0	4	=
water	42:19	0:0	4	1
for	43:8	60:8	4	(o = 0 ;o < am -> out_channels;o ++)
forinit	43:13	43:18	5	o = 0 ;
water	43:13	0:0	6	o
op	43:15	0:0	6	=
water	43:17	0:0	6	0
water	43:18	0:0	6	;
cond	43:20	43:28	5	o < am -> out_channels
water	43:20	0:0	6	o
op	43:22	0:0	6	<
water	43:24	0:0	6	am
op	43:26	0:0	6	->
water	43:28	0:0	6	out_channels
forexpr	43:42	43:43	5	o ++
water	43:42	0:0	6	o
op	43:43	0:0	6	++
stmts	43:47	60:8	5	
water	43:47	0:0	6	{
decl	44:12	44:18	6	int	i0
if	45:12	49:12	6	(( o != i && matrix [ o * stride + i ] != 0 . 0 ) || ( o == i && matrix [ o * stride + i ] != 1 . 0 ))
cond	45:16	46:56	7	( o != i && matrix [ o * stride + i ] != 0 . 0 ) || ( o == i && matrix [ o * stride + i ] != 1 . 0 )
water	45:16	0:0	8	(
water	45:17	0:0	8	o
op	45:19	0:0	8	!=
water	45:22	0:0	8	i
op	45:24	0:0	8	&&
water	45:27	0:0	8	matrix
op	45:33	0:0	8	[
water	45:34	0:0	8	o
op	45:36	0:0	8	*
water	45:38	0:0	8	stride
op	45:45	0:0	8	+
water	45:47	0:0	8	i
op	45:48	0:0	8	]
op	45:50	0:0	8	!=
water	45:53	0:0	8	0
op	45:54	0:0	8	.
water	45:55	0:0	8	0
water	45:56	0:0	8	)
op	45:58	0:0	8	||
water	46:16	0:0	8	(
water	46:17	0:0	8	o
op	46:19	0:0	8	==
water	46:22	0:0	8	i
op	46:24	0:0	8	&&
water	46:27	0:0	8	matrix
op	46:33	0:0	8	[
water	46:34	0:0	8	o
op	46:36	0:0	8	*
water	46:38	0:0	8	stride
op	46:45	0:0	8	+
water	46:47	0:0	8	i
op	46:48	0:0	8	]
op	46:50	0:0	8	!=
water	46:53	0:0	8	1
op	46:54	0:0	8	.
water	46:55	0:0	8	0
water	46:56	0:0	8	)
stmts	46:59	49:12	7	
water	46:59	0:0	8	{
water	47:16	0:0	8	skip
op	47:21	0:0	8	=
water	47:23	0:0	8	0
water	47:24	0:0	8	;
break	48:16	48:21	8	
water	49:12	0:0	8	}
if	52:12	59:12	6	(o == i)
cond	52:16	52:21	7	o == i
water	52:16	0:0	8	o
op	52:18	0:0	8	==
water	52:21	0:0	8	i
stmts	52:24	59:12	7	
water	52:24	0:0	8	{
for	53:16	58:16	8	(i0 = 0 ;i0 < am -> in_channels;i0 ++)
forinit	53:21	53:27	9	i0 = 0 ;
water	53:21	0:0	10	i0
op	53:24	0:0	10	=
water	53:26	0:0	10	0
water	53:27	0:0	10	;
cond	53:29	53:38	9	i0 < am -> in_channels
water	53:29	0:0	10	i0
op	53:32	0:0	10	<
water	53:34	0:0	10	am
op	53:36	0:0	10	->
water	53:38	0:0	10	in_channels
forexpr	53:51	53:53	9	i0 ++
water	53:51	0:0	10	i0
op	53:53	0:0	10	++
stmts	53:57	58:16	9	
water	53:57	0:0	10	{
if	54:20	57:20	10	(i0 != i && matrix [ o * stride + i0 ] != 0 . 0)
cond	54:24	54:64	11	i0 != i && matrix [ o * stride + i0 ] != 0 . 0
water	54:24	0:0	12	i0
op	54:27	0:0	12	!=
water	54:30	0:0	12	i
op	54:32	0:0	12	&&
water	54:35	0:0	12	matrix
op	54:41	0:0	12	[
water	54:42	0:0	12	o
op	54:44	0:0	12	*
water	54:46	0:0	12	stride
op	54:53	0:0	12	+
water	54:55	0:0	12	i0
op	54:57	0:0	12	]
op	54:59	0:0	12	!=
water	54:62	0:0	12	0
op	54:63	0:0	12	.
water	54:64	0:0	12	0
stmts	54:67	57:20	11	
water	54:67	0:0	12	{
water	55:24	0:0	12	skip
op	55:29	0:0	12	=
water	55:31	0:0	12	0
water	55:32	0:0	12	;
break	56:24	56:29	12	
water	57:20	0:0	12	}
water	58:16	0:0	10	}
water	59:12	0:0	8	}
water	60:8	0:0	6	}
if	61:8	64:8	4	(skip)
cond	61:12	61:12	5	skip
water	61:12	0:0	6	skip
stmts	61:18	64:8	5	
water	61:18	0:0	6	{
water	62:12	0:0	6	am
op	62:14	0:0	6	->
water	62:16	0:0	6	input_skip
op	62:26	0:0	6	[
water	62:27	0:0	6	i
op	62:28	0:0	6	]
op	62:30	0:0	6	=
water	62:32	0:0	6	1
water	62:33	0:0	6	;
water	63:12	0:0	6	am
op	63:14	0:0	6	->
water	63:16	0:0	6	in_matrix_channels
op	63:34	0:0	6	--
water	63:36	0:0	6	;
water	64:8	0:0	6	}
water	65:4	0:0	4	}
for	67:4	79:4	2	(;i < am -> in_channels;i ++)
forinit	67:9	67:9	3	;
water	67:9	0:0	4	;
cond	67:11	67:19	3	i < am -> in_channels
water	67:11	0:0	4	i
op	67:13	0:0	4	<
water	67:15	0:0	4	am
op	67:17	0:0	4	->
water	67:19	0:0	4	in_channels
forexpr	67:32	67:33	3	i ++
water	67:32	0:0	4	i
op	67:33	0:0	4	++
stmts	67:37	79:4	3	
water	67:37	0:0	4	{
decl	68:8	68:23	4	int	contrib
op	68:20	0:0	4	=
water	68:22	0:0	4	0
for	69:8	74:8	4	(o = 0 ;o < am -> out_channels;o ++)
forinit	69:13	69:18	5	o = 0 ;
water	69:13	0:0	6	o
op	69:15	0:0	6	=
water	69:17	0:0	6	0
water	69:18	0:0	6	;
cond	69:20	69:28	5	o < am -> out_channels
water	69:20	0:0	6	o
op	69:22	0:0	6	<
water	69:24	0:0	6	am
op	69:26	0:0	6	->
water	69:28	0:0	6	out_channels
forexpr	69:42	69:43	5	o ++
water	69:42	0:0	6	o
op	69:43	0:0	6	++
stmts	69:47	74:8	5	
water	69:47	0:0	6	{
if	70:12	73:12	6	(matrix [ o * stride + i ] != 0 . 0)
cond	70:16	70:44	7	matrix [ o * stride + i ] != 0 . 0
water	70:16	0:0	8	matrix
op	70:22	0:0	8	[
water	70:23	0:0	8	o
op	70:25	0:0	8	*
water	70:27	0:0	8	stride
op	70:34	0:0	8	+
water	70:36	0:0	8	i
op	70:37	0:0	8	]
op	70:39	0:0	8	!=
water	70:42	0:0	8	0
op	70:43	0:0	8	.
water	70:44	0:0	8	0
stmts	70:47	73:12	7	
water	70:47	0:0	8	{
water	71:16	0:0	8	contrib
op	71:24	0:0	8	=
water	71:26	0:0	8	1
water	71:27	0:0	8	;
break	72:16	72:21	8	
water	73:12	0:0	8	}
water	74:8	0:0	6	}
if	75:8	78:8	4	(! contrib)
cond	75:12	75:13	5	! contrib
op	75:12	0:0	6	!
water	75:13	0:0	6	contrib
stmts	75:22	78:8	5	
water	75:22	0:0	6	{
water	76:12	0:0	6	am
op	76:14	0:0	6	->
water	76:16	0:0	6	input_skip
op	76:26	0:0	6	[
water	76:27	0:0	6	i
op	76:28	0:0	6	]
op	76:30	0:0	6	=
water	76:32	0:0	6	1
water	76:33	0:0	6	;
water	77:12	0:0	6	am
op	77:14	0:0	6	->
water	77:16	0:0	6	in_matrix_channels
op	77:34	0:0	6	--
water	77:36	0:0	6	;
water	78:8	0:0	6	}
water	79:4	0:0	4	}
if	80:4	83:4	2	(am -> in_matrix_channels == 0)
cond	80:8	80:34	3	am -> in_matrix_channels == 0
water	80:8	0:0	4	am
op	80:10	0:0	4	->
water	80:12	0:0	4	in_matrix_channels
op	80:31	0:0	4	==
water	80:34	0:0	4	0
stmts	80:37	83:4	3	
water	80:37	0:0	4	{
water	81:8	0:0	4	am
op	81:10	0:0	4	->
water	81:12	0:0	4	out_matrix_channels
op	81:32	0:0	4	=
water	81:34	0:0	4	0
water	81:35	0:0	4	;
return	82:8	82:14	4	
water	83:4	0:0	4	}
for	86:4	109:4	2	(o = 0 ;o <FFMIN (am -> in_channels ,am -> out_channels );o ++)
forinit	86:9	86:14	3	o = 0 ;
water	86:9	0:0	4	o
op	86:11	0:0	4	=
water	86:13	0:0	4	0
water	86:14	0:0	4	;
cond	86:16	86:59	3	o <FFMIN (am -> in_channels ,am -> out_channels )
water	86:16	0:0	4	o
op	86:18	0:0	4	<
call	86:20	86:59	4	FFMIN
arg	86:26	86:41	5	am->in_channels
water	86:26	0:0	6	am
op	86:28	0:0	6	->
water	86:30	0:0	6	in_channels
arg	86:43	86:59	5	am->out_channels
water	86:43	0:0	6	am
op	86:45	0:0	6	->
water	86:47	0:0	6	out_channels
forexpr	86:62	86:63	3	o ++
water	86:62	0:0	4	o
op	86:63	0:0	4	++
stmts	86:67	109:4	3	
water	86:67	0:0	4	{
decl	87:8	87:20	4	int	skip
op	87:17	0:0	4	=
water	87:19	0:0	4	1
decl	88:8	88:14	4	int	o0
for	89:8	95:8	4	(i = 0 ;i < am -> in_channels;i ++)
forinit	89:13	89:18	5	i = 0 ;
water	89:13	0:0	6	i
op	89:15	0:0	6	=
water	89:17	0:0	6	0
water	89:18	0:0	6	;
cond	89:20	89:28	5	i < am -> in_channels
water	89:20	0:0	6	i
op	89:22	0:0	6	<
water	89:24	0:0	6	am
op	89:26	0:0	6	->
water	89:28	0:0	6	in_channels
forexpr	89:41	89:42	5	i ++
water	89:41	0:0	6	i
op	89:42	0:0	6	++
stmts	89:46	95:8	5	
water	89:46	0:0	6	{
if	90:12	94:12	6	(( o != i && matrix [ o * stride + i ] != 0 . 0 ) || ( o == i && matrix [ o * stride + i ] != 1 . 0 ))
cond	90:16	91:56	7	( o != i && matrix [ o * stride + i ] != 0 . 0 ) || ( o == i && matrix [ o * stride + i ] != 1 . 0 )
water	90:16	0:0	8	(
water	90:17	0:0	8	o
op	90:19	0:0	8	!=
water	90:22	0:0	8	i
op	90:24	0:0	8	&&
water	90:27	0:0	8	matrix
op	90:33	0:0	8	[
water	90:34	0:0	8	o
op	90:36	0:0	8	*
water	90:38	0:0	8	stride
op	90:45	0:0	8	+
water	90:47	0:0	8	i
op	90:48	0:0	8	]
op	90:50	0:0	8	!=
water	90:53	0:0	8	0
op	90:54	0:0	8	.
water	90:55	0:0	8	0
water	90:56	0:0	8	)
op	90:58	0:0	8	||
water	91:16	0:0	8	(
water	91:17	0:0	8	o
op	91:19	0:0	8	==
water	91:22	0:0	8	i
op	91:24	0:0	8	&&
water	91:27	0:0	8	matrix
op	91:33	0:0	8	[
water	91:34	0:0	8	o
op	91:36	0:0	8	*
water	91:38	0:0	8	stride
op	91:45	0:0	8	+
water	91:47	0:0	8	i
op	91:48	0:0	8	]
op	91:50	0:0	8	!=
water	91:53	0:0	8	1
op	91:54	0:0	8	.
water	91:55	0:0	8	0
water	91:56	0:0	8	)
stmts	91:59	94:12	7	
water	91:59	0:0	8	{
water	92:16	0:0	8	skip
op	92:21	0:0	8	=
water	92:23	0:0	8	0
water	92:24	0:0	8	;
break	93:16	93:21	8	
water	94:12	0:0	8	}
water	95:8	0:0	6	}
water	98:8	0:0	4	i
op	98:10	0:0	4	=
water	98:12	0:0	4	o
water	98:13	0:0	4	;
for	99:8	104:8	4	(o0 = 0 ;o0 < am -> out_channels;o0 ++)
forinit	99:13	99:19	5	o0 = 0 ;
water	99:13	0:0	6	o0
op	99:16	0:0	6	=
water	99:18	0:0	6	0
water	99:19	0:0	6	;
cond	99:21	99:30	5	o0 < am -> out_channels
water	99:21	0:0	6	o0
op	99:24	0:0	6	<
water	99:26	0:0	6	am
op	99:28	0:0	6	->
water	99:30	0:0	6	out_channels
forexpr	99:44	99:46	5	o0 ++
water	99:44	0:0	6	o0
op	99:46	0:0	6	++
stmts	99:50	104:8	5	
water	99:50	0:0	6	{
if	100:12	103:12	6	(o0 != i && matrix [ o0 * stride + i ] != 0 . 0)
cond	100:16	100:56	7	o0 != i && matrix [ o0 * stride + i ] != 0 . 0
water	100:16	0:0	8	o0
op	100:19	0:0	8	!=
water	100:22	0:0	8	i
op	100:24	0:0	8	&&
water	100:27	0:0	8	matrix
op	100:33	0:0	8	[
water	100:34	0:0	8	o0
op	100:37	0:0	8	*
water	100:39	0:0	8	stride
op	100:46	0:0	8	+
water	100:48	0:0	8	i
op	100:49	0:0	8	]
op	100:51	0:0	8	!=
water	100:54	0:0	8	0
op	100:55	0:0	8	.
water	100:56	0:0	8	0
stmts	100:59	103:12	7	
water	100:59	0:0	8	{
water	101:16	0:0	8	skip
op	101:21	0:0	8	=
water	101:23	0:0	8	0
water	101:24	0:0	8	;
break	102:16	102:21	8	
water	103:12	0:0	8	}
water	104:8	0:0	6	}
if	105:8	108:8	4	(skip)
cond	105:12	105:12	5	skip
water	105:12	0:0	6	skip
stmts	105:18	108:8	5	
water	105:18	0:0	6	{
water	106:12	0:0	6	am
op	106:14	0:0	6	->
water	106:16	0:0	6	output_skip
op	106:27	0:0	6	[
water	106:28	0:0	6	o
op	106:29	0:0	6	]
op	106:31	0:0	6	=
water	106:33	0:0	6	1
water	106:34	0:0	6	;
water	107:12	0:0	6	am
op	107:14	0:0	6	->
water	107:16	0:0	6	out_matrix_channels
op	107:35	0:0	6	--
water	107:37	0:0	6	;
water	108:8	0:0	6	}
water	109:4	0:0	4	}
if	110:4	113:4	2	(am -> out_matrix_channels == 0)
cond	110:8	110:35	3	am -> out_matrix_channels == 0
water	110:8	0:0	4	am
op	110:10	0:0	4	->
water	110:12	0:0	4	out_matrix_channels
op	110:32	0:0	4	==
water	110:35	0:0	4	0
stmts	110:38	113:4	3	
water	110:38	0:0	4	{
water	111:8	0:0	4	am
op	111:10	0:0	4	->
water	111:12	0:0	4	in_matrix_channels
op	111:31	0:0	4	=
water	111:33	0:0	4	0
water	111:34	0:0	4	;
return	112:8	112:14	4	
water	113:4	0:0	4	}
