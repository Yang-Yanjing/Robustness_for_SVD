func	1:0	33:0	0	static int	request_frame
params	1:24	0:0	1	
param	1:25	1:46	2	AVFilterLink *	outlink
stmnts	0:0	32:37	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	outlink
op	3:34	0:0	2	->
water	3:36	0:0	2	src
decl	4:4	4:35	2	FrameRateContext	*s
op	4:24	0:0	2	=
water	4:26	0:0	2	ctx
op	4:29	0:0	2	->
water	4:31	0:0	2	priv
decl	5:4	5:14	2	int	val
water	5:11	0:0	2	,
decl	5:4	5:14	2	int	i
call	6:4	6:36	2	ff_dlog
arg	6:12	6:15	3	ctx
water	6:12	0:0	4	ctx
arg	6:17	6:36	3	"request_frame()\n"
water	6:17	0:0	4	"request_frame()\n"
water	6:37	0:0	2	;
if	8:4	16:4	2	(! s -> srce [ s -> frst ] && ! s -> flush)
cond	8:8	8:33	3	! s -> srce [ s -> frst ] && ! s -> flush
op	8:8	0:0	4	!
water	8:9	0:0	4	s
op	8:10	0:0	4	->
water	8:12	0:0	4	srce
op	8:16	0:0	4	[
water	8:17	0:0	4	s
op	8:18	0:0	4	->
water	8:20	0:0	4	frst
op	8:24	0:0	4	]
op	8:26	0:0	4	&&
op	8:29	0:0	4	!
water	8:30	0:0	4	s
op	8:31	0:0	4	->
water	8:33	0:0	4	flush
stmts	8:40	16:4	3	
water	8:40	0:0	4	{
call	9:8	9:70	4	ff_dlog
arg	9:16	9:19	5	ctx
water	9:16	0:0	6	ctx
arg	9:21	9:70	5	"request_frame() call source's request_frame()\n"
water	9:21	0:0	6	"request_frame() call source's request_frame()\n"
water	9:71	0:0	4	;
if	10:8	13:8	4	(( val =ff_request_frame (outlink -> src -> inputs [ 0 ] ) ) < 0)
cond	10:12	10:64	5	( val =ff_request_frame (outlink -> src -> inputs [ 0 ] ) ) < 0
water	10:12	0:0	6	(
water	10:13	0:0	6	val
op	10:17	0:0	6	=
call	10:19	10:59	6	ff_request_frame
arg	10:36	10:59	7	outlink->src->inputs[0]
water	10:36	0:0	8	outlink
op	10:43	0:0	8	->
water	10:45	0:0	8	src
op	10:48	0:0	8	->
water	10:50	0:0	8	inputs
op	10:56	0:0	8	[
water	10:57	0:0	8	0
op	10:58	0:0	8	]
water	10:60	0:0	6	)
op	10:62	0:0	6	<
water	10:64	0:0	6	0
stmts	10:67	13:8	5	
water	10:67	0:0	6	{
call	11:12	11:92	6	ff_dlog
arg	11:20	11:23	7	ctx
water	11:20	0:0	8	ctx
arg	11:25	11:87	7	"request_frame() source's request_frame() returned error:%d\n"
water	11:25	0:0	8	"request_frame() source's request_frame() returned error:%d\n"
arg	11:89	11:92	7	val
water	11:89	0:0	8	val
water	11:93	0:0	6	;
return	12:12	12:22	6	val
water	12:19	0:0	7	val
water	13:8	0:0	6	}
call	14:8	14:82	4	ff_dlog
arg	14:16	14:19	5	ctx
water	14:16	0:0	6	ctx
arg	14:21	14:77	5	"request_frame() source's request_frame() returned:%d\n"
water	14:21	0:0	6	"request_frame() source's request_frame() returned:%d\n"
arg	14:79	14:82	5	val
water	14:79	0:0	6	val
water	14:83	0:0	4	;
return	15:8	15:16	4	0
water	15:15	0:0	5	0
water	16:4	0:0	4	}
call	17:4	17:52	2	ff_dlog
arg	17:12	17:15	3	ctx
water	17:12	0:0	4	ctx
arg	17:17	17:52	3	"request_frame() REPEAT or FLUSH\n"
water	17:17	0:0	4	"request_frame() REPEAT or FLUSH\n"
water	17:53	0:0	2	;
if	18:4	21:4	2	(s -> pending_srce_frames <= 0)
cond	18:8	18:34	3	s -> pending_srce_frames <= 0
water	18:8	0:0	4	s
op	18:9	0:0	4	->
water	18:11	0:0	4	pending_srce_frames
op	18:31	0:0	4	<=
water	18:34	0:0	4	0
stmts	18:37	21:4	3	
water	18:37	0:0	4	{
call	19:8	19:71	4	ff_dlog
arg	19:16	19:19	5	ctx
water	19:16	0:0	6	ctx
arg	19:21	19:71	5	"request_frame() nothing else to do, return:EOF\n"
water	19:21	0:0	6	"request_frame() nothing else to do, return:EOF\n"
water	19:72	0:0	4	;
return	20:8	20:26	4	AVERROR_EOF
water	20:15	0:0	5	AVERROR_EOF
water	21:4	0:0	4	}
call	23:4	23:42	2	ff_dlog
arg	23:12	23:15	3	ctx
water	23:12	0:0	4	ctx
arg	23:17	23:42	3	"request_frame() FLUSH\n"
water	23:17	0:0	4	"request_frame() FLUSH\n"
water	23:43	0:0	2	;
for	25:4	30:4	2	(i = s -> last ;i > s -> frst;i --)
forinit	25:9	25:20	3	i = s -> last ;
water	25:9	0:0	4	i
op	25:11	0:0	4	=
water	25:13	0:0	4	s
op	25:14	0:0	4	->
water	25:16	0:0	4	last
water	25:20	0:0	4	;
cond	25:22	25:29	3	i > s -> frst
water	25:22	0:0	4	i
op	25:24	0:0	4	>
water	25:26	0:0	4	s
op	25:27	0:0	4	->
water	25:29	0:0	4	frst
forexpr	25:35	25:36	3	i --
water	25:35	0:0	4	i
op	25:36	0:0	4	--
stmts	25:40	30:4	3	
water	25:40	0:0	4	{
if	26:8	29:8	4	(! s -> srce [ i - 1 ] && s -> srce [ i ])
cond	26:12	26:40	5	! s -> srce [ i - 1 ] && s -> srce [ i ]
op	26:12	0:0	6	!
water	26:13	0:0	6	s
op	26:14	0:0	6	->
water	26:16	0:0	6	srce
op	26:20	0:0	6	[
water	26:21	0:0	6	i
op	26:23	0:0	6	-
water	26:25	0:0	6	1
op	26:26	0:0	6	]
op	26:28	0:0	6	&&
water	26:31	0:0	6	s
op	26:32	0:0	6	->
water	26:34	0:0	6	srce
op	26:38	0:0	6	[
water	26:39	0:0	6	i
op	26:40	0:0	6	]
stmts	26:43	29:8	5	
water	26:43	0:0	6	{
call	27:12	27:68	6	ff_dlog
arg	27:20	27:23	7	ctx
water	27:20	0:0	8	ctx
arg	27:25	27:58	7	"request_frame() copy:%d to:%d\n"
water	27:25	0:0	8	"request_frame() copy:%d to:%d\n"
arg	27:60	27:61	7	i
water	27:60	0:0	8	i
arg	27:63	27:68	7	i-1
water	27:63	0:0	8	i
op	27:65	0:0	8	-
water	27:67	0:0	8	1
water	27:69	0:0	6	;
water	28:12	0:0	6	s
op	28:13	0:0	6	->
water	28:15	0:0	6	srce
op	28:19	0:0	6	[
water	28:20	0:0	6	i
op	28:22	0:0	6	-
water	28:24	0:0	6	1
op	28:25	0:0	6	]
op	28:27	0:0	6	=
water	28:29	0:0	6	s
op	28:30	0:0	6	->
water	28:32	0:0	6	srce
op	28:36	0:0	6	[
water	28:37	0:0	6	i
op	28:38	0:0	6	]
water	28:39	0:0	6	;
water	29:8	0:0	6	}
water	30:4	0:0	4	}
call	31:4	31:26	2	set_work_frame_pts
arg	31:23	31:26	3	ctx
water	31:23	0:0	4	ctx
water	31:27	0:0	2	;
return	32:4	32:37	2	process_work_frame(ctx,0)
call	32:11	32:36	3	process_work_frame
arg	32:30	32:33	4	ctx
water	32:30	0:0	5	ctx
arg	32:35	32:36	4	0
water	32:35	0:0	5	0
