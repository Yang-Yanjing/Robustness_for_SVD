func	1:0	34:0	0	static int	packet_queue_get
params	1:27	0:0	1	
param	1:28	1:42	2	PacketQueue *	q
param	1:44	1:57	2	AVPacket *	pkt
param	1:59	1:68	2	int	block
param	1:70	1:81	2	int *	serial
stmnts	0:0	33:14	1	
decl	3:4	3:24	2	MyAVPacketList	*pkt1
decl	4:4	4:11	2	int	ret
call	5:4	5:26	2	SDL_LockMutex
arg	5:18	5:26	3	q->mutex
water	5:18	0:0	4	q
op	5:19	0:0	4	->
water	5:21	0:0	4	mutex
water	5:27	0:0	2	;
for	6:4	31:4	2	(;;)
forinit	6:9	6:9	3	;
water	6:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	6:13	31:4	3	
water	6:13	0:0	4	{
if	7:8	10:8	4	(q -> abort_request)
cond	7:12	7:15	5	q -> abort_request
water	7:12	0:0	6	q
op	7:13	0:0	6	->
water	7:15	0:0	6	abort_request
stmts	7:30	10:8	5	
water	7:30	0:0	6	{
water	8:12	0:0	6	ret
op	8:16	0:0	6	=
op	8:18	0:0	6	-
water	8:19	0:0	6	1
water	8:20	0:0	6	;
break	9:12	9:17	6	
water	10:8	0:0	6	}
water	11:8	0:0	4	pkt1
op	11:13	0:0	4	=
water	11:15	0:0	4	q
op	11:16	0:0	4	->
water	11:18	0:0	4	first_pkt
water	11:27	0:0	4	;
if	12:8	25:8	4	(pkt1)
cond	12:12	12:12	5	pkt1
water	12:12	0:0	6	pkt1
stmts	12:18	25:8	5	
water	12:18	0:0	6	{
water	13:12	0:0	6	q
op	13:13	0:0	6	->
water	13:15	0:0	6	first_pkt
op	13:25	0:0	6	=
water	13:27	0:0	6	pkt1
op	13:31	0:0	6	->
water	13:33	0:0	6	next
water	13:37	0:0	6	;
if	14:12	15:34	6	(! q -> first_pkt)
cond	14:16	14:20	7	! q -> first_pkt
op	14:16	0:0	8	!
water	14:17	0:0	8	q
op	14:18	0:0	8	->
water	14:20	0:0	8	first_pkt
stmts	15:16	15:34	7	
water	15:16	0:0	8	q
op	15:17	0:0	8	->
water	15:19	0:0	8	last_pkt
op	15:28	0:0	8	=
water	15:30	0:0	8	NULL
water	15:34	0:0	8	;
water	16:12	0:0	6	q
op	16:13	0:0	6	->
water	16:15	0:0	6	nb_packets
op	16:25	0:0	6	--
water	16:27	0:0	6	;
water	17:12	0:0	6	q
op	17:13	0:0	6	->
water	17:15	0:0	6	size
op	17:20	0:0	6	-=
water	17:23	0:0	6	pkt1
op	17:27	0:0	6	->
water	17:29	0:0	6	pkt
op	17:32	0:0	6	.
water	17:33	0:0	6	size
op	17:38	0:0	6	+
op	17:40	0:0	6	sizeof
water	17:46	0:0	6	(
op	17:47	0:0	6	*
water	17:48	0:0	6	pkt1
water	17:52	0:0	6	)
water	17:53	0:0	6	;
water	18:12	0:0	6	q
op	18:13	0:0	6	->
water	18:15	0:0	6	duration
op	18:24	0:0	6	-=
water	18:27	0:0	6	pkt1
op	18:31	0:0	6	->
water	18:33	0:0	6	pkt
op	18:36	0:0	6	.
water	18:37	0:0	6	duration
water	18:45	0:0	6	;
op	19:12	0:0	6	*
water	19:13	0:0	6	pkt
op	19:17	0:0	6	=
water	19:19	0:0	6	pkt1
op	19:23	0:0	6	->
water	19:25	0:0	6	pkt
water	19:28	0:0	6	;
if	20:12	21:38	6	(serial)
cond	20:16	20:16	7	serial
water	20:16	0:0	8	serial
stmts	21:16	21:38	7	
op	21:16	0:0	8	*
water	21:17	0:0	8	serial
op	21:24	0:0	8	=
water	21:26	0:0	8	pkt1
op	21:30	0:0	8	->
water	21:32	0:0	8	serial
water	21:38	0:0	8	;
call	22:12	22:24	6	av_free
arg	22:20	22:24	7	pkt1
water	22:20	0:0	8	pkt1
water	22:25	0:0	6	;
water	23:12	0:0	6	ret
op	23:16	0:0	6	=
water	23:18	0:0	6	1
water	23:19	0:0	6	;
break	24:12	24:17	6	
water	25:8	0:0	6	}
else	25:10	28:8	4
stmts	25:15	28:8	5	
if	25:15	28:8	6	(! block)
cond	25:19	25:20	7	! block
op	25:19	0:0	8	!
water	25:20	0:0	8	block
stmts	25:27	28:8	7	
water	25:27	0:0	8	{
water	26:12	0:0	8	ret
op	26:16	0:0	8	=
water	26:18	0:0	8	0
water	26:19	0:0	8	;
break	27:12	27:17	8	
water	28:8	0:0	8	}
else	28:10	30:8	4
stmts	28:15	30:8	5	
water	28:15	0:0	6	{
call	29:12	29:42	6	SDL_CondWait
arg	29:25	29:32	7	q->cond
water	29:25	0:0	8	q
op	29:26	0:0	8	->
water	29:28	0:0	8	cond
arg	29:34	29:42	7	q->mutex
water	29:34	0:0	8	q
op	29:35	0:0	8	->
water	29:37	0:0	8	mutex
water	29:43	0:0	6	;
water	30:8	0:0	6	}
water	31:4	0:0	4	}
call	32:4	32:28	2	SDL_UnlockMutex
arg	32:20	32:28	3	q->mutex
water	32:20	0:0	4	q
op	32:21	0:0	4	->
water	32:23	0:0	4	mutex
water	32:29	0:0	2	;
return	33:4	33:14	2	ret
water	33:11	0:0	3	ret
