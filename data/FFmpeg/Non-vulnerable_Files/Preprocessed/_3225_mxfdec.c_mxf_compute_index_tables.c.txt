func	1:0	75:0	0	static int	mxf_compute_index_tables
params	1:35	0:0	1	
param	1:36	1:51	2	MXFContext *	mxf
stmnts	0:0	74:14	1	
decl	3:4	3:40	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:40	2	int	j
water	3:12	0:0	2	,
decl	3:4	3:40	2	int	k
water	3:15	0:0	2	,
decl	3:4	3:40	2	int	ret
water	3:20	0:0	2	,
decl	3:4	3:40	2	int	nb_sorted_segments
decl	4:4	4:49	2	MXFIndexTableSegment	**sorted_segments
op	4:43	0:0	2	=
water	4:45	0:0	2	NULL
if	5:4	9:4	2	(( ret =mxf_get_sorted_table_segments (mxf ,& nb_sorted_segments ,& sorted_segments ) ) || nb_sorted_segments <= 0)
cond	5:8	6:30	3	( ret =mxf_get_sorted_table_segments (mxf ,& nb_sorted_segments ,& sorted_segments ) ) || nb_sorted_segments <= 0
water	5:8	0:0	4	(
water	5:9	0:0	4	ret
op	5:13	0:0	4	=
call	5:15	5:87	4	mxf_get_sorted_table_segments
arg	5:45	5:48	5	mxf
water	5:45	0:0	6	mxf
arg	5:50	5:69	5	&nb_sorted_segments
op	5:50	0:0	6	&
water	5:51	0:0	6	nb_sorted_segments
arg	5:71	5:87	5	&sorted_segments
op	5:71	0:0	6	&
water	5:72	0:0	6	sorted_segments
water	5:88	0:0	4	)
op	5:90	0:0	4	||
water	6:8	0:0	4	nb_sorted_segments
op	6:27	0:0	4	<=
water	6:30	0:0	4	0
stmts	6:33	9:4	3	
water	6:33	0:0	4	{
call	7:8	7:65	4	av_log
arg	7:15	7:22	5	mxf->fc
water	7:15	0:0	6	mxf
op	7:18	0:0	6	->
water	7:20	0:0	6	fc
arg	7:24	7:38	5	AV_LOG_WARNING
water	7:24	0:0	6	AV_LOG_WARNING
arg	7:40	7:65	5	"broken or empty index\n"
water	7:40	0:0	6	"broken or empty index\n"
water	7:66	0:0	4	;
return	8:8	8:16	4	0
water	8:15	0:0	5	0
water	9:4	0:0	4	}
for	11:4	19:4	2	(i = 0 ;i < nb_sorted_segments;i ++)
forinit	11:9	11:14	3	i = 0 ;
water	11:9	0:0	4	i
op	11:11	0:0	4	=
water	11:13	0:0	4	0
water	11:14	0:0	4	;
cond	11:16	11:20	3	i < nb_sorted_segments
water	11:16	0:0	4	i
op	11:18	0:0	4	<
water	11:20	0:0	4	nb_sorted_segments
forexpr	11:40	11:41	3	i ++
water	11:40	0:0	4	i
op	11:41	0:0	4	++
stmts	11:45	19:4	3	
water	11:45	0:0	4	{
if	12:8	13:34	4	(i == 0 || sorted_segments [ i - 1 ] -> index_sid != sorted_segments [ i ] -> index_sid)
cond	12:12	12:77	5	i == 0 || sorted_segments [ i - 1 ] -> index_sid != sorted_segments [ i ] -> index_sid
water	12:12	0:0	6	i
op	12:14	0:0	6	==
water	12:17	0:0	6	0
op	12:19	0:0	6	||
water	12:22	0:0	6	sorted_segments
op	12:37	0:0	6	[
water	12:38	0:0	6	i
op	12:39	0:0	6	-
water	12:40	0:0	6	1
op	12:41	0:0	6	]
op	12:42	0:0	6	->
water	12:44	0:0	6	index_sid
op	12:54	0:0	6	!=
water	12:57	0:0	6	sorted_segments
op	12:72	0:0	6	[
water	12:73	0:0	6	i
op	12:74	0:0	6	]
op	12:75	0:0	6	->
water	12:77	0:0	6	index_sid
stmts	13:12	13:34	5	
water	13:12	0:0	6	mxf
op	13:15	0:0	6	->
water	13:17	0:0	6	nb_index_tables
op	13:32	0:0	6	++
water	13:34	0:0	6	;
else	14:8	18:8	4
stmts	14:13	18:8	5	
if	14:13	18:8	6	(sorted_segments [ i - 1 ] -> body_sid != sorted_segments [ i ] -> body_sid)
cond	14:17	14:71	7	sorted_segments [ i - 1 ] -> body_sid != sorted_segments [ i ] -> body_sid
water	14:17	0:0	8	sorted_segments
op	14:32	0:0	8	[
water	14:33	0:0	8	i
op	14:34	0:0	8	-
water	14:35	0:0	8	1
op	14:36	0:0	8	]
op	14:37	0:0	8	->
water	14:39	0:0	8	body_sid
op	14:48	0:0	8	!=
water	14:51	0:0	8	sorted_segments
op	14:66	0:0	8	[
water	14:67	0:0	8	i
op	14:68	0:0	8	]
op	14:69	0:0	8	->
water	14:71	0:0	8	body_sid
stmts	14:81	18:8	7	
water	14:81	0:0	8	{
call	15:12	15:72	8	av_log
arg	15:19	15:26	9	mxf->fc
water	15:19	0:0	10	mxf
op	15:22	0:0	10	->
water	15:24	0:0	10	fc
arg	15:28	15:40	9	AV_LOG_ERROR
water	15:28	0:0	10	AV_LOG_ERROR
arg	15:42	15:72	9	"found inconsistent BodySID\n"
water	15:42	0:0	10	"found inconsistent BodySID\n"
water	15:73	0:0	8	;
water	16:12	0:0	8	ret
op	16:16	0:0	8	=
water	16:18	0:0	8	AVERROR_INVALIDDATA
water	16:37	0:0	8	;
goto	17:12	17:38	8	finish_decoding_index
water	17:17	0:0	9	finish_decoding_index
water	18:8	0:0	8	}
water	19:4	0:0	4	}
water	20:4	0:0	2	mxf
op	20:7	0:0	2	->
water	20:9	0:0	2	index_tables
op	20:22	0:0	2	=
call	20:24	21:67	2	av_mallocz_array
arg	20:41	20:61	3	mxf->nb_index_tables
water	20:41	0:0	4	mxf
op	20:44	0:0	4	->
water	20:46	0:0	4	nb_index_tables
arg	21:41	21:67	3	sizeof(*mxf->index_tables)
op	21:41	0:0	4	sizeof
water	21:47	0:0	4	(
op	21:48	0:0	4	*
water	21:49	0:0	4	mxf
op	21:52	0:0	4	->
water	21:54	0:0	4	index_tables
water	21:66	0:0	4	)
water	21:68	0:0	2	;
if	22:4	26:4	2	(! mxf -> index_tables)
cond	22:8	22:14	3	! mxf -> index_tables
op	22:8	0:0	4	!
water	22:9	0:0	4	mxf
op	22:12	0:0	4	->
water	22:14	0:0	4	index_tables
stmts	22:28	26:4	3	
water	22:28	0:0	4	{
call	23:8	23:73	4	av_log
arg	23:15	23:22	5	mxf->fc
water	23:15	0:0	6	mxf
op	23:18	0:0	6	->
water	23:20	0:0	6	fc
arg	23:24	23:36	5	AV_LOG_ERROR
water	23:24	0:0	6	AV_LOG_ERROR
arg	23:38	23:73	5	"failed to allocate index tables\n"
water	23:38	0:0	6	"failed to allocate index tables\n"
water	23:74	0:0	4	;
water	24:8	0:0	4	ret
op	24:12	0:0	4	=
call	24:14	24:28	4	AVERROR
arg	24:22	24:28	5	ENOMEM
water	24:22	0:0	6	ENOMEM
water	24:29	0:0	4	;
goto	25:8	25:34	4	finish_decoding_index
water	25:13	0:0	5	finish_decoding_index
water	26:4	0:0	4	}
for	28:4	34:4	2	(i = j = 0 ;i < nb_sorted_segments;i ++)
forinit	28:9	28:18	3	i = j = 0 ;
water	28:9	0:0	4	i
op	28:11	0:0	4	=
water	28:13	0:0	4	j
op	28:15	0:0	4	=
water	28:17	0:0	4	0
water	28:18	0:0	4	;
cond	28:20	28:24	3	i < nb_sorted_segments
water	28:20	0:0	4	i
op	28:22	0:0	4	<
water	28:24	0:0	4	nb_sorted_segments
forexpr	28:44	28:45	3	i ++
water	28:44	0:0	4	i
op	28:45	0:0	4	++
stmts	28:49	34:4	3	
water	28:49	0:0	4	{
if	29:8	32:8	4	(i != 0 && sorted_segments [ i - 1 ] -> index_sid != sorted_segments [ i ] -> index_sid)
cond	29:12	29:77	5	i != 0 && sorted_segments [ i - 1 ] -> index_sid != sorted_segments [ i ] -> index_sid
water	29:12	0:0	6	i
op	29:14	0:0	6	!=
water	29:17	0:0	6	0
op	29:19	0:0	6	&&
water	29:22	0:0	6	sorted_segments
op	29:37	0:0	6	[
water	29:38	0:0	6	i
op	29:39	0:0	6	-
water	29:40	0:0	6	1
op	29:41	0:0	6	]
op	29:42	0:0	6	->
water	29:44	0:0	6	index_sid
op	29:54	0:0	6	!=
water	29:57	0:0	6	sorted_segments
op	29:72	0:0	6	[
water	29:73	0:0	6	i
op	29:74	0:0	6	]
op	29:75	0:0	6	->
water	29:77	0:0	6	index_sid
stmts	29:88	32:8	5	
water	29:88	0:0	6	{
water	31:12	0:0	6	j
op	31:13	0:0	6	++
water	31:15	0:0	6	;
water	32:8	0:0	6	}
water	33:8	0:0	4	mxf
op	33:11	0:0	4	->
water	33:13	0:0	4	index_tables
op	33:25	0:0	4	[
water	33:26	0:0	4	j
op	33:27	0:0	4	]
op	33:28	0:0	4	.
water	33:29	0:0	4	nb_segments
op	33:40	0:0	4	++
water	33:42	0:0	4	;
water	34:4	0:0	4	}
for	35:4	70:4	2	(i = j = 0 ;j < mxf -> nb_index_tables;i += mxf -> index_tables [ j ++ ] . nb_segments)
forinit	35:9	35:18	3	i = j = 0 ;
water	35:9	0:0	4	i
op	35:11	0:0	4	=
water	35:13	0:0	4	j
op	35:15	0:0	4	=
water	35:17	0:0	4	0
water	35:18	0:0	4	;
cond	35:20	35:29	3	j < mxf -> nb_index_tables
water	35:20	0:0	4	j
op	35:22	0:0	4	<
water	35:24	0:0	4	mxf
op	35:27	0:0	4	->
water	35:29	0:0	4	nb_index_tables
forexpr	35:46	35:74	3	i += mxf -> index_tables [ j ++ ] . nb_segments
water	35:46	0:0	4	i
op	35:48	0:0	4	+=
water	35:51	0:0	4	mxf
op	35:54	0:0	4	->
water	35:56	0:0	4	index_tables
op	35:68	0:0	4	[
water	35:69	0:0	4	j
op	35:70	0:0	4	++
op	35:72	0:0	4	]
op	35:73	0:0	4	.
water	35:74	0:0	4	nb_segments
stmts	35:87	70:4	3	
water	35:87	0:0	4	{
decl	36:8	36:48	4	MXFIndexTable	*t
op	36:25	0:0	4	=
op	36:27	0:0	4	&
water	36:28	0:0	4	mxf
op	36:31	0:0	4	->
water	36:33	0:0	4	index_tables
op	36:45	0:0	4	[
water	36:46	0:0	4	j
op	36:47	0:0	4	]
water	37:8	0:0	4	t
op	37:9	0:0	4	->
water	37:11	0:0	4	segments
op	37:20	0:0	4	=
call	37:22	38:59	4	av_mallocz_array
arg	37:39	37:53	5	t->nb_segments
water	37:39	0:0	6	t
op	37:40	0:0	6	->
water	37:42	0:0	6	nb_segments
arg	38:39	38:59	5	sizeof(*t->segments)
op	38:39	0:0	6	sizeof
water	38:45	0:0	6	(
op	38:46	0:0	6	*
water	38:47	0:0	6	t
op	38:48	0:0	6	->
water	38:50	0:0	6	segments
water	38:58	0:0	6	)
water	38:60	0:0	4	;
if	39:8	44:8	4	(! t -> segments)
cond	39:12	39:16	5	! t -> segments
op	39:12	0:0	6	!
water	39:13	0:0	6	t
op	39:14	0:0	6	->
water	39:16	0:0	6	segments
stmts	39:26	44:8	5	
water	39:26	0:0	6	{
call	40:12	41:37	6	av_log
arg	40:19	40:26	7	mxf->fc
water	40:19	0:0	8	mxf
op	40:22	0:0	8	->
water	40:24	0:0	8	fc
arg	40:28	40:40	7	AV_LOG_ERROR
water	40:28	0:0	8	AV_LOG_ERROR
arg	40:42	41:37	7	"failed to allocate IndexTableSegment"" pointer array\n"
water	40:42	0:0	8	"failed to allocate IndexTableSegment"
water	41:19	0:0	8	" pointer array\n"
water	41:38	0:0	6	;
water	42:12	0:0	6	ret
op	42:16	0:0	6	=
call	42:18	42:32	6	AVERROR
arg	42:26	42:32	7	ENOMEM
water	42:26	0:0	8	ENOMEM
water	42:33	0:0	6	;
goto	43:12	43:38	6	finish_decoding_index
water	43:17	0:0	7	finish_decoding_index
water	44:8	0:0	6	}
if	45:8	47:91	4	(sorted_segments [ i ] -> index_start_position)
cond	45:12	45:32	5	sorted_segments [ i ] -> index_start_position
water	45:12	0:0	6	sorted_segments
op	45:27	0:0	6	[
water	45:28	0:0	6	i
op	45:29	0:0	6	]
op	45:30	0:0	6	->
water	45:32	0:0	6	index_start_position
stmts	46:12	47:91	5	
call	46:12	47:90	6	av_log
arg	46:19	46:26	7	mxf->fc
water	46:19	0:0	8	mxf
op	46:22	0:0	8	->
water	46:24	0:0	8	fc
arg	46:28	46:42	7	AV_LOG_WARNING
water	46:28	0:0	8	AV_LOG_WARNING
arg	46:44	46:123	7	"IndexSID %i starts at EditUnit %"PRId64" - seeking may not work as expected\n"
water	46:44	0:0	8	"IndexSID %i starts at EditUnit %"
water	46:78	0:0	8	PRId64
water	46:84	0:0	8	" - seeking may not work as expected\n"
arg	47:19	47:48	7	sorted_segments[i]->index_sid
water	47:19	0:0	8	sorted_segments
op	47:34	0:0	8	[
water	47:35	0:0	8	i
op	47:36	0:0	8	]
op	47:37	0:0	8	->
water	47:39	0:0	8	index_sid
arg	47:50	47:90	7	sorted_segments[i]->index_start_position
water	47:50	0:0	8	sorted_segments
op	47:65	0:0	8	[
water	47:66	0:0	8	i
op	47:67	0:0	8	]
op	47:68	0:0	8	->
water	47:70	0:0	8	index_start_position
water	47:91	0:0	6	;
call	48:8	48:95	4	memcpy
arg	48:15	48:26	5	t->segments
water	48:15	0:0	6	t
op	48:16	0:0	6	->
water	48:18	0:0	6	segments
arg	48:28	48:47	5	&sorted_segments[i]
op	48:28	0:0	6	&
water	48:29	0:0	6	sorted_segments
op	48:44	0:0	6	[
water	48:45	0:0	6	i
op	48:46	0:0	6	]
arg	48:49	48:95	5	t->nb_segments*sizeof(MXFIndexTableSegment*)
water	48:49	0:0	6	t
op	48:50	0:0	6	->
water	48:52	0:0	6	nb_segments
op	48:64	0:0	6	*
op	48:66	0:0	6	sizeof
water	48:72	0:0	6	(
water	48:73	0:0	6	MXFIndexTableSegment
op	48:93	0:0	6	*
water	48:94	0:0	6	)
water	48:96	0:0	4	;
water	49:8	0:0	4	t
op	49:9	0:0	4	->
water	49:11	0:0	4	index_sid
op	49:21	0:0	4	=
water	49:23	0:0	4	sorted_segments
op	49:38	0:0	4	[
water	49:39	0:0	4	i
op	49:40	0:0	4	]
op	49:41	0:0	4	->
water	49:43	0:0	4	index_sid
water	49:52	0:0	4	;
water	50:8	0:0	4	t
op	50:9	0:0	4	->
water	50:11	0:0	4	body_sid
op	50:20	0:0	4	=
water	50:22	0:0	4	sorted_segments
op	50:37	0:0	4	[
water	50:38	0:0	4	i
op	50:39	0:0	4	]
op	50:40	0:0	4	->
water	50:42	0:0	4	body_sid
water	50:50	0:0	4	;
if	51:8	52:38	4	(( ret =mxf_compute_ptses_fake_index (mxf ,t ) ) < 0)
cond	51:12	51:59	5	( ret =mxf_compute_ptses_fake_index (mxf ,t ) ) < 0
water	51:12	0:0	6	(
water	51:13	0:0	6	ret
op	51:17	0:0	6	=
call	51:19	51:54	6	mxf_compute_ptses_fake_index
arg	51:48	51:51	7	mxf
water	51:48	0:0	8	mxf
arg	51:53	51:54	7	t
water	51:53	0:0	8	t
water	51:55	0:0	6	)
op	51:57	0:0	6	<
water	51:59	0:0	6	0
stmts	52:12	52:38	5	
goto	52:12	52:38	6	finish_decoding_index
water	52:17	0:0	7	finish_decoding_index
for	54:8	69:8	4	(k = 0 ;k < t -> nb_segments;k ++)
forinit	54:13	54:18	5	k = 0 ;
water	54:13	0:0	6	k
op	54:15	0:0	6	=
water	54:17	0:0	6	0
water	54:18	0:0	6	;
cond	54:20	54:27	5	k < t -> nb_segments
water	54:20	0:0	6	k
op	54:22	0:0	6	<
water	54:24	0:0	6	t
op	54:25	0:0	6	->
water	54:27	0:0	6	nb_segments
forexpr	54:40	54:41	5	k ++
water	54:40	0:0	6	k
op	54:41	0:0	6	++
stmts	54:45	69:8	5	
water	54:45	0:0	6	{
if	55:12	56:24	6	(t -> segments [ k ] -> index_duration)
cond	55:16	55:32	7	t -> segments [ k ] -> index_duration
water	55:16	0:0	8	t
op	55:17	0:0	8	->
water	55:19	0:0	8	segments
op	55:27	0:0	8	[
water	55:28	0:0	8	k
op	55:29	0:0	8	]
op	55:30	0:0	8	->
water	55:32	0:0	8	index_duration
stmts	56:16	56:24	7	
continue	56:16	56:24	8	
if	57:12	59:39	6	(t -> nb_segments > 1)
cond	57:16	57:33	7	t -> nb_segments > 1
water	57:16	0:0	8	t
op	57:17	0:0	8	->
water	57:19	0:0	8	nb_segments
op	57:31	0:0	8	>
water	57:33	0:0	8	1
stmts	58:16	59:39	7	
call	58:16	59:38	8	av_log
arg	58:23	58:30	9	mxf->fc
water	58:23	0:0	10	mxf
op	58:26	0:0	10	->
water	58:28	0:0	10	fc
arg	58:32	58:46	9	AV_LOG_WARNING
water	58:32	0:0	10	AV_LOG_WARNING
arg	58:48	58:131	9	"IndexSID %i segment %i has zero IndexDuration and there's more than one segment\n"
water	58:48	0:0	10	"IndexSID %i segment %i has zero IndexDuration and there's more than one segment\n"
arg	59:23	59:35	9	t->index_sid
water	59:23	0:0	10	t
op	59:24	0:0	10	->
water	59:26	0:0	10	index_sid
arg	59:37	59:38	9	k
water	59:37	0:0	10	k
water	59:39	0:0	8	;
if	60:12	63:12	6	(mxf -> fc -> nb_streams <= 0)
cond	60:16	60:39	7	mxf -> fc -> nb_streams <= 0
water	60:16	0:0	8	mxf
op	60:19	0:0	8	->
water	60:21	0:0	8	fc
op	60:23	0:0	8	->
water	60:25	0:0	8	nb_streams
op	60:36	0:0	8	<=
water	60:39	0:0	8	0
stmts	60:42	63:12	7	
water	60:42	0:0	8	{
call	61:16	61:63	8	av_log
arg	61:23	61:30	9	mxf->fc
water	61:23	0:0	10	mxf
op	61:26	0:0	10	->
water	61:28	0:0	10	fc
arg	61:32	61:46	9	AV_LOG_WARNING
water	61:32	0:0	10	AV_LOG_WARNING
arg	61:48	61:63	9	"no streams?\n"
water	61:48	0:0	10	"no streams?\n"
water	61:64	0:0	8	;
break	62:16	62:21	8	
water	63:12	0:0	8	}
water	67:12	0:0	6	t
op	67:13	0:0	6	->
water	67:15	0:0	6	segments
op	67:23	0:0	6	[
water	67:24	0:0	6	k
op	67:25	0:0	6	]
op	67:26	0:0	6	->
water	67:28	0:0	6	index_duration
op	67:43	0:0	6	=
water	67:45	0:0	6	mxf
op	67:48	0:0	6	->
water	67:50	0:0	6	fc
op	67:52	0:0	6	->
water	67:54	0:0	6	streams
op	67:61	0:0	6	[
water	67:62	0:0	6	0
op	67:63	0:0	6	]
op	67:64	0:0	6	->
water	67:66	0:0	6	duration
water	67:74	0:0	6	;
break	68:12	68:17	6	
water	69:8	0:0	6	}
water	70:4	0:0	4	}
water	71:4	0:0	2	ret
op	71:8	0:0	2	=
water	71:10	0:0	2	0
water	71:11	0:0	2	;
label	72:0	72:21	2	finish_decoding_index :
call	73:4	73:27	2	av_free
arg	73:12	73:27	3	sorted_segments
water	73:12	0:0	4	sorted_segments
water	73:28	0:0	2	;
return	74:4	74:14	2	ret
water	74:11	0:0	3	ret
