func	1:0	71:0	0	int	ff_mpeg4_decode_video_packet_header
params	1:39	0:0	1	
param	1:40	1:60	2	Mpeg4DecContext *	ctx
stmnts	0:0	70:12	1	
decl	3:4	3:31	2	MpegEncContext	*s
op	3:22	0:0	2	=
op	3:24	0:0	2	&
water	3:25	0:0	2	ctx
op	3:28	0:0	2	->
water	3:30	0:0	2	m
decl	4:4	4:53	2	int	mb_num_bits
op	4:25	0:0	2	=
call	4:27	4:48	3	av_log2
arg	4:35	4:48	4	s->mb_num-1
water	4:35	0:0	5	s
op	4:36	0:0	5	->
water	4:38	0:0	5	mb_num
op	4:45	0:0	5	-
water	4:47	0:0	5	1
op	4:50	0:0	2	+
water	4:52	0:0	2	1
decl	5:4	5:41	2	int	header_extension
op	5:25	0:0	2	=
water	5:27	0:0	2	0
water	5:28	0:0	2	,
decl	5:4	5:41	2	int	mb_num
water	5:36	0:0	2	,
decl	5:4	5:41	2	int	len
if	7:4	8:17	2	(get_bits_count (& s -> gb ) > s -> gb . size_in_bits - 20)
cond	7:8	7:54	3	get_bits_count (& s -> gb ) > s -> gb . size_in_bits - 20
call	7:8	7:29	4	get_bits_count
arg	7:23	7:29	5	&s->gb
op	7:23	0:0	6	&
water	7:24	0:0	6	s
op	7:25	0:0	6	->
water	7:27	0:0	6	gb
op	7:31	0:0	4	>
water	7:33	0:0	4	s
op	7:34	0:0	4	->
water	7:36	0:0	4	gb
op	7:38	0:0	4	.
water	7:39	0:0	4	size_in_bits
op	7:52	0:0	4	-
water	7:54	0:0	4	20
stmts	8:8	8:17	3	
return	8:8	8:17	4	-1
op	8:15	0:0	5	-
water	8:16	0:0	5	1
for	9:4	11:17	2	(len = 0 ;len < 32;len ++)
forinit	9:9	9:16	3	len = 0 ;
water	9:9	0:0	4	len
op	9:13	0:0	4	=
water	9:15	0:0	4	0
water	9:16	0:0	4	;
cond	9:18	9:24	3	len < 32
water	9:18	0:0	4	len
op	9:22	0:0	4	<
water	9:24	0:0	4	32
forexpr	9:28	9:31	3	len ++
water	9:28	0:0	4	len
op	9:31	0:0	4	++
stmts	10:8	11:17	3	
if	10:8	11:17	4	(get_bits1 (& s -> gb ))
cond	10:12	10:28	5	get_bits1 (& s -> gb )
call	10:12	10:28	6	get_bits1
arg	10:22	10:28	7	&s->gb
op	10:22	0:0	8	&
water	10:23	0:0	8	s
op	10:24	0:0	8	->
water	10:26	0:0	8	gb
stmts	11:12	11:17	5	
break	11:12	11:17	6	
if	12:4	15:4	2	(len !=ff_mpeg4_get_video_packet_prefix_length (s ))
cond	12:8	12:56	3	len !=ff_mpeg4_get_video_packet_prefix_length (s )
water	12:8	0:0	4	len
op	12:12	0:0	4	!=
call	12:15	12:56	4	ff_mpeg4_get_video_packet_prefix_length
arg	12:55	12:56	5	s
water	12:55	0:0	6	s
stmts	12:59	15:4	3	
water	12:59	0:0	4	{
call	13:8	13:71	4	av_log
arg	13:15	13:23	5	s->avctx
water	13:15	0:0	6	s
op	13:16	0:0	6	->
water	13:18	0:0	6	avctx
arg	13:25	13:37	5	AV_LOG_ERROR
water	13:25	0:0	6	AV_LOG_ERROR
arg	13:39	13:71	5	"marker does not match f_code\n"
water	13:39	0:0	6	"marker does not match f_code\n"
water	13:72	0:0	4	;
return	14:8	14:17	4	-1
op	14:15	0:0	5	-
water	14:16	0:0	5	1
water	15:4	0:0	4	}
if	16:4	19:4	2	(ctx -> shape != RECT_SHAPE)
cond	16:8	16:22	3	ctx -> shape != RECT_SHAPE
water	16:8	0:0	4	ctx
op	16:11	0:0	4	->
water	16:13	0:0	4	shape
op	16:19	0:0	4	!=
water	16:22	0:0	4	RECT_SHAPE
stmts	16:34	19:4	3	
water	16:34	0:0	4	{
water	17:8	0:0	4	header_extension
op	17:25	0:0	4	=
call	17:27	17:43	4	get_bits1
arg	17:37	17:43	5	&s->gb
op	17:37	0:0	6	&
water	17:38	0:0	6	s
op	17:39	0:0	6	->
water	17:41	0:0	6	gb
water	17:44	0:0	4	;
water	19:4	0:0	4	}
water	20:4	0:0	2	mb_num
op	20:11	0:0	2	=
call	20:13	20:41	2	get_bits
arg	20:22	20:28	3	&s->gb
op	20:22	0:0	4	&
water	20:23	0:0	4	s
op	20:24	0:0	4	->
water	20:26	0:0	4	gb
arg	20:30	20:41	3	mb_num_bits
water	20:30	0:0	4	mb_num_bits
water	20:42	0:0	2	;
if	21:4	25:4	2	(mb_num >= s -> mb_num)
cond	21:8	21:21	3	mb_num >= s -> mb_num
water	21:8	0:0	4	mb_num
op	21:15	0:0	4	>=
water	21:18	0:0	4	s
op	21:19	0:0	4	->
water	21:21	0:0	4	mb_num
stmts	21:29	25:4	3	
water	21:29	0:0	4	{
call	22:8	23:77	4	av_log
arg	22:15	22:23	5	s->avctx
water	22:15	0:0	6	s
op	22:16	0:0	6	->
water	22:18	0:0	6	avctx
arg	22:25	22:37	5	AV_LOG_ERROR
water	22:25	0:0	6	AV_LOG_ERROR
arg	23:15	23:58	5	"illegal mb_num in video packet (%d %d) \n"
water	23:15	0:0	6	"illegal mb_num in video packet (%d %d) \n"
arg	23:60	23:66	5	mb_num
water	23:60	0:0	6	mb_num
arg	23:68	23:77	5	s->mb_num
water	23:68	0:0	6	s
op	23:69	0:0	6	->
water	23:71	0:0	6	mb_num
water	23:78	0:0	4	;
return	24:8	24:17	4	-1
op	24:15	0:0	5	-
water	24:16	0:0	5	1
water	25:4	0:0	4	}
water	26:4	0:0	2	s
op	26:5	0:0	2	->
water	26:7	0:0	2	mb_x
op	26:12	0:0	2	=
water	26:14	0:0	2	mb_num
op	26:21	0:0	2	%
water	26:23	0:0	2	s
op	26:24	0:0	2	->
water	26:26	0:0	2	mb_width
water	26:34	0:0	2	;
water	27:4	0:0	2	s
op	27:5	0:0	2	->
water	27:7	0:0	2	mb_y
op	27:12	0:0	2	=
water	27:14	0:0	2	mb_num
op	27:21	0:0	2	/
water	27:23	0:0	2	s
op	27:24	0:0	2	->
water	27:26	0:0	2	mb_width
water	27:34	0:0	2	;
if	28:4	32:4	2	(ctx -> shape != BIN_ONLY_SHAPE)
cond	28:8	28:22	3	ctx -> shape != BIN_ONLY_SHAPE
water	28:8	0:0	4	ctx
op	28:11	0:0	4	->
water	28:13	0:0	4	shape
op	28:19	0:0	4	!=
water	28:22	0:0	4	BIN_ONLY_SHAPE
stmts	28:38	32:4	3	
water	28:38	0:0	4	{
decl	29:8	29:57	4	int	qscale
op	29:19	0:0	4	=
call	29:21	29:56	5	get_bits
arg	29:30	29:36	6	&s->gb
op	29:30	0:0	7	&
water	29:31	0:0	7	s
op	29:32	0:0	7	->
water	29:34	0:0	7	gb
arg	29:38	29:56	6	s->quant_precision
water	29:38	0:0	7	s
op	29:39	0:0	7	->
water	29:41	0:0	7	quant_precision
if	30:8	31:49	4	(qscale)
cond	30:12	30:12	5	qscale
water	30:12	0:0	6	qscale
stmts	31:12	31:49	5	
water	31:12	0:0	6	s
op	31:13	0:0	6	->
water	31:15	0:0	6	chroma_qscale
op	31:29	0:0	6	=
water	31:31	0:0	6	s
op	31:32	0:0	6	->
water	31:34	0:0	6	qscale
op	31:41	0:0	6	=
water	31:43	0:0	6	qscale
water	31:49	0:0	6	;
water	32:4	0:0	4	}
if	33:4	34:44	2	(ctx -> shape == RECT_SHAPE)
cond	33:8	33:22	3	ctx -> shape == RECT_SHAPE
water	33:8	0:0	4	ctx
op	33:11	0:0	4	->
water	33:13	0:0	4	shape
op	33:19	0:0	4	==
water	33:22	0:0	4	RECT_SHAPE
stmts	34:8	34:44	3	
water	34:8	0:0	4	header_extension
op	34:25	0:0	4	=
call	34:27	34:43	4	get_bits1
arg	34:37	34:43	5	&s->gb
op	34:37	0:0	6	&
water	34:38	0:0	6	s
op	34:39	0:0	6	->
water	34:41	0:0	6	gb
water	34:44	0:0	4	;
if	35:4	67:4	2	(header_extension)
cond	35:8	35:8	3	header_extension
water	35:8	0:0	4	header_extension
stmts	35:26	67:4	3	
water	35:26	0:0	4	{
decl	36:8	36:25	4	int	time_incr
op	36:22	0:0	4	=
water	36:24	0:0	4	0
while	37:8	38:23	4	(get_bits1 (& s -> gb ) != 0)
cond	37:15	37:36	5	get_bits1 (& s -> gb ) != 0
call	37:15	37:31	6	get_bits1
arg	37:25	37:31	7	&s->gb
op	37:25	0:0	8	&
water	37:26	0:0	8	s
op	37:27	0:0	8	->
water	37:29	0:0	8	gb
op	37:33	0:0	6	!=
water	37:36	0:0	6	0
stmts	38:12	38:23	5	
water	38:12	0:0	6	time_incr
op	38:21	0:0	6	++
water	38:23	0:0	6	;
call	39:8	39:75	4	check_marker
arg	39:21	39:27	5	&s->gb
op	39:21	0:0	6	&
water	39:22	0:0	6	s
op	39:23	0:0	6	->
water	39:25	0:0	6	gb
arg	39:29	39:75	5	"before time_increment in video packed header"
water	39:29	0:0	6	"before time_increment in video packed header"
water	39:76	0:0	4	;
call	40:8	40:50	4	skip_bits
arg	40:18	40:24	5	&s->gb
op	40:18	0:0	6	&
water	40:19	0:0	6	s
op	40:20	0:0	6	->
water	40:22	0:0	6	gb
arg	40:26	40:50	5	ctx->time_increment_bits
water	40:26	0:0	6	ctx
op	40:29	0:0	6	->
water	40:31	0:0	6	time_increment_bits
water	40:51	0:0	4	;
call	41:8	41:76	4	check_marker
arg	41:21	41:27	5	&s->gb
op	41:21	0:0	6	&
water	41:22	0:0	6	s
op	41:23	0:0	6	->
water	41:25	0:0	6	gb
arg	41:29	41:76	5	"before vop_coding_type in video packed header"
water	41:29	0:0	6	"before vop_coding_type in video packed header"
water	41:77	0:0	4	;
call	42:8	42:27	4	skip_bits
arg	42:18	42:24	5	&s->gb
op	42:18	0:0	6	&
water	42:19	0:0	6	s
op	42:20	0:0	6	->
water	42:22	0:0	6	gb
arg	42:26	42:27	5	2
water	42:26	0:0	6	2
water	42:28	0:0	4	;
if	44:8	66:8	4	(ctx -> shape != BIN_ONLY_SHAPE)
cond	44:12	44:26	5	ctx -> shape != BIN_ONLY_SHAPE
water	44:12	0:0	6	ctx
op	44:15	0:0	6	->
water	44:17	0:0	6	shape
op	44:23	0:0	6	!=
water	44:26	0:0	6	BIN_ONLY_SHAPE
stmts	44:42	66:8	5	
water	44:42	0:0	6	{
call	45:12	45:31	6	skip_bits
arg	45:22	45:28	7	&s->gb
op	45:22	0:0	8	&
water	45:23	0:0	8	s
op	45:24	0:0	8	->
water	45:26	0:0	8	gb
arg	45:30	45:31	7	3
water	45:30	0:0	8	3
water	45:32	0:0	6	;
if	47:12	52:12	6	(s -> pict_type == AV_PICTURE_TYPE_S && ctx -> vol_sprite_usage == GMC_SPRITE)
cond	47:16	48:41	7	s -> pict_type == AV_PICTURE_TYPE_S && ctx -> vol_sprite_usage == GMC_SPRITE
water	47:16	0:0	8	s
op	47:17	0:0	8	->
water	47:19	0:0	8	pict_type
op	47:29	0:0	8	==
water	47:32	0:0	8	AV_PICTURE_TYPE_S
op	47:50	0:0	8	&&
water	48:16	0:0	8	ctx
op	48:19	0:0	8	->
water	48:21	0:0	8	vol_sprite_usage
op	48:38	0:0	8	==
water	48:41	0:0	8	GMC_SPRITE
stmts	48:53	52:12	7	
water	48:53	0:0	8	{
if	49:16	50:46	8	(mpeg4_decode_sprite_trajectory (ctx ,& s -> gb ) < 0)
cond	49:20	49:66	9	mpeg4_decode_sprite_trajectory (ctx ,& s -> gb ) < 0
call	49:20	49:62	10	mpeg4_decode_sprite_trajectory
arg	49:51	49:54	11	ctx
water	49:51	0:0	12	ctx
arg	49:56	49:62	11	&s->gb
op	49:56	0:0	12	&
water	49:57	0:0	12	s
op	49:58	0:0	12	->
water	49:60	0:0	12	gb
op	49:64	0:0	10	<
water	49:66	0:0	10	0
stmts	50:20	50:46	9	
return	50:20	50:46	10	AVERROR_INVALIDDATA
water	50:27	0:0	11	AVERROR_INVALIDDATA
call	51:16	51:59	8	av_log
arg	51:23	51:31	9	s->avctx
water	51:23	0:0	10	s
op	51:24	0:0	10	->
water	51:26	0:0	10	avctx
arg	51:33	51:45	9	AV_LOG_ERROR
water	51:33	0:0	10	AV_LOG_ERROR
arg	51:47	51:59	9	"untested\n"
water	51:47	0:0	10	"untested\n"
water	51:60	0:0	8	;
water	52:12	0:0	8	}
if	54:12	59:12	6	(s -> pict_type != AV_PICTURE_TYPE_I)
cond	54:16	54:32	7	s -> pict_type != AV_PICTURE_TYPE_I
water	54:16	0:0	8	s
op	54:17	0:0	8	->
water	54:19	0:0	8	pict_type
op	54:29	0:0	8	!=
water	54:32	0:0	8	AV_PICTURE_TYPE_I
stmts	54:51	59:12	7	
water	54:51	0:0	8	{
decl	55:16	55:48	8	int	f_code
op	55:27	0:0	8	=
call	55:29	55:47	9	get_bits
arg	55:38	55:44	10	&s->gb
op	55:38	0:0	11	&
water	55:39	0:0	11	s
op	55:40	0:0	11	->
water	55:42	0:0	11	gb
arg	55:46	55:47	10	3
water	55:46	0:0	11	3
if	56:16	58:77	8	(f_code == 0)
cond	56:20	56:30	9	f_code == 0
water	56:20	0:0	10	f_code
op	56:27	0:0	10	==
water	56:30	0:0	10	0
stmts	57:20	58:77	9	
call	57:20	58:76	10	av_log
arg	57:27	57:35	11	s->avctx
water	57:27	0:0	12	s
op	57:28	0:0	12	->
water	57:30	0:0	12	avctx
arg	57:37	57:49	11	AV_LOG_ERROR
water	57:37	0:0	12	AV_LOG_ERROR
arg	58:27	58:76	11	"Error, video packet header damaged (f_code=0)\n"
water	58:27	0:0	12	"Error, video packet header damaged (f_code=0)\n"
water	58:77	0:0	10	;
water	59:12	0:0	8	}
if	60:12	65:12	6	(s -> pict_type == AV_PICTURE_TYPE_B)
cond	60:16	60:32	7	s -> pict_type == AV_PICTURE_TYPE_B
water	60:16	0:0	8	s
op	60:17	0:0	8	->
water	60:19	0:0	8	pict_type
op	60:29	0:0	8	==
water	60:32	0:0	8	AV_PICTURE_TYPE_B
stmts	60:51	65:12	7	
water	60:51	0:0	8	{
decl	61:16	61:48	8	int	b_code
op	61:27	0:0	8	=
call	61:29	61:47	9	get_bits
arg	61:38	61:44	10	&s->gb
op	61:38	0:0	11	&
water	61:39	0:0	11	s
op	61:40	0:0	11	->
water	61:42	0:0	11	gb
arg	61:46	61:47	10	3
water	61:46	0:0	11	3
if	62:16	64:77	8	(b_code == 0)
cond	62:20	62:30	9	b_code == 0
water	62:20	0:0	10	b_code
op	62:27	0:0	10	==
water	62:30	0:0	10	0
stmts	63:20	64:77	9	
call	63:20	64:76	10	av_log
arg	63:27	63:35	11	s->avctx
water	63:27	0:0	12	s
op	63:28	0:0	12	->
water	63:30	0:0	12	avctx
arg	63:37	63:49	11	AV_LOG_ERROR
water	63:37	0:0	12	AV_LOG_ERROR
arg	64:27	64:76	11	"Error, video packet header damaged (b_code=0)\n"
water	64:27	0:0	12	"Error, video packet header damaged (b_code=0)\n"
water	64:77	0:0	10	;
water	65:12	0:0	8	}
water	66:8	0:0	6	}
water	67:4	0:0	4	}
if	68:4	69:36	2	(ctx -> new_pred)
cond	68:8	68:13	3	ctx -> new_pred
water	68:8	0:0	4	ctx
op	68:11	0:0	4	->
water	68:13	0:0	4	new_pred
stmts	69:8	69:36	3	
call	69:8	69:35	4	decode_new_pred
arg	69:24	69:27	5	ctx
water	69:24	0:0	6	ctx
arg	69:29	69:35	5	&s->gb
op	69:29	0:0	6	&
water	69:30	0:0	6	s
op	69:31	0:0	6	->
water	69:33	0:0	6	gb
water	69:36	0:0	4	;
return	70:4	70:12	2	0
water	70:11	0:0	3	0
