func	1:15	32:0	0	int	init
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
stmnts	0:0	31:14	1	
decl	3:4	3:33	2	EvalContext	*eval
op	3:22	0:0	2	=
water	3:24	0:0	2	ctx
op	3:27	0:0	2	->
water	3:29	0:0	2	priv
decl	4:4	4:15	2	int	ret
op	4:12	0:0	2	=
water	4:14	0:0	2	0
if	5:4	16:4	2	(eval -> chlayout_str)
cond	5:8	5:14	3	eval -> chlayout_str
water	5:8	0:0	4	eval
op	5:12	0:0	4	->
water	5:14	0:0	4	chlayout_str
stmts	5:28	16:4	3	
water	5:28	0:0	4	{
if	6:8	8:8	4	(!strcmp (eval -> chlayout_str ,"same" ) && !strcmp (ctx -> filter -> name ,"aeval" ))
cond	6:12	6:85	5	!strcmp (eval -> chlayout_str ,"same" ) && !strcmp (ctx -> filter -> name ,"aeval" )
op	6:12	0:0	6	!
call	6:13	6:46	6	strcmp
arg	6:20	6:38	7	eval->chlayout_str
water	6:20	0:0	8	eval
op	6:24	0:0	8	->
water	6:26	0:0	8	chlayout_str
arg	6:40	6:46	7	"same"
water	6:40	0:0	8	"same"
op	6:48	0:0	6	&&
op	6:51	0:0	6	!
call	6:52	6:85	6	strcmp
arg	6:59	6:76	7	ctx->filter->name
water	6:59	0:0	8	ctx
op	6:62	0:0	8	->
water	6:64	0:0	8	filter
op	6:70	0:0	8	->
water	6:72	0:0	8	name
arg	6:78	6:85	7	"aeval"
water	6:78	0:0	8	"aeval"
stmts	6:88	8:8	5	
water	6:88	0:0	6	{
water	7:12	0:0	6	eval
op	7:16	0:0	6	->
water	7:18	0:0	6	same_chlayout
op	7:32	0:0	6	=
water	7:34	0:0	6	1
water	7:35	0:0	6	;
water	8:8	0:0	6	}
else	8:10	15:8	4
stmts	8:15	15:8	5	
water	8:15	0:0	6	{
water	9:12	0:0	6	ret
op	9:16	0:0	6	=
call	9:18	9:88	6	ff_parse_channel_layout
arg	9:42	9:57	7	&eval->chlayout
op	9:42	0:0	8	&
water	9:43	0:0	8	eval
op	9:47	0:0	8	->
water	9:49	0:0	8	chlayout
arg	9:59	9:63	7	NULL
water	9:59	0:0	8	NULL
arg	9:65	9:83	7	eval->chlayout_str
water	9:65	0:0	8	eval
op	9:69	0:0	8	->
water	9:71	0:0	8	chlayout_str
arg	9:85	9:88	7	ctx
water	9:85	0:0	8	ctx
water	9:89	0:0	6	;
if	10:12	11:26	6	(ret < 0)
cond	10:16	10:22	7	ret < 0
water	10:16	0:0	8	ret
op	10:20	0:0	8	<
water	10:22	0:0	8	0
stmts	11:16	11:26	7	
return	11:16	11:26	8	ret
water	11:23	0:0	9	ret
water	12:12	0:0	6	ret
op	12:16	0:0	6	=
call	12:18	12:98	6	parse_channel_expressions
arg	12:44	12:47	7	ctx
water	12:44	0:0	8	ctx
arg	12:49	12:98	7	av_get_channel_layout_nb_channels(eval->chlayout)
call	12:49	12:97	8	av_get_channel_layout_nb_channels
arg	12:83	12:97	9	eval->chlayout
water	12:83	0:0	10	eval
op	12:87	0:0	10	->
water	12:89	0:0	10	chlayout
water	12:99	0:0	6	;
if	13:12	14:26	6	(ret < 0)
cond	13:16	13:22	7	ret < 0
water	13:16	0:0	8	ret
op	13:20	0:0	8	<
water	13:22	0:0	8	0
stmts	14:16	14:26	7	
return	14:16	14:26	8	ret
water	14:23	0:0	9	ret
water	15:8	0:0	6	}
water	16:4	0:0	4	}
else	16:6	26:4	2
stmts	16:11	26:4	3	
water	16:11	0:0	4	{
if	18:8	19:22	4	(( ret =parse_channel_expressions (ctx ,- 1 ) ) < 0)
cond	18:12	18:57	5	( ret =parse_channel_expressions (ctx ,- 1 ) ) < 0
water	18:12	0:0	6	(
water	18:13	0:0	6	ret
op	18:17	0:0	6	=
call	18:19	18:52	6	parse_channel_expressions
arg	18:45	18:48	7	ctx
water	18:45	0:0	8	ctx
arg	18:50	18:52	7	-1
op	18:50	0:0	8	-
water	18:51	0:0	8	1
water	18:53	0:0	6	)
op	18:55	0:0	6	<
water	18:57	0:0	6	0
stmts	19:12	19:22	5	
return	19:12	19:22	6	ret
water	19:19	0:0	7	ret
water	20:8	0:0	4	eval
op	20:12	0:0	4	->
water	20:14	0:0	4	chlayout
op	20:23	0:0	4	=
call	20:25	20:72	4	av_get_default_channel_layout
arg	20:55	20:72	5	eval->nb_channels
water	20:55	0:0	6	eval
op	20:59	0:0	6	->
water	20:61	0:0	6	nb_channels
water	20:73	0:0	4	;
if	21:8	25:8	4	(! eval -> chlayout && eval -> nb_channels <= 0)
cond	21:12	21:52	5	! eval -> chlayout && eval -> nb_channels <= 0
op	21:12	0:0	6	!
water	21:13	0:0	6	eval
op	21:17	0:0	6	->
water	21:19	0:0	6	chlayout
op	21:28	0:0	6	&&
water	21:31	0:0	6	eval
op	21:35	0:0	6	->
water	21:37	0:0	6	nb_channels
op	21:49	0:0	6	<=
water	21:52	0:0	6	0
stmts	21:55	25:8	5	
water	21:55	0:0	6	{
call	22:12	23:36	6	av_log
arg	22:19	22:22	7	ctx
water	22:19	0:0	8	ctx
arg	22:24	22:36	7	AV_LOG_ERROR
water	22:24	0:0	8	AV_LOG_ERROR
arg	22:38	22:82	7	"Invalid number of channels '%d' provided\n"
water	22:38	0:0	8	"Invalid number of channels '%d' provided\n"
arg	23:19	23:36	7	eval->nb_channels
water	23:19	0:0	8	eval
op	23:23	0:0	8	->
water	23:25	0:0	8	nb_channels
water	23:37	0:0	6	;
return	24:12	24:34	6	AVERROR(EINVAL)
call	24:19	24:33	7	AVERROR
arg	24:27	24:33	8	EINVAL
water	24:27	0:0	9	EINVAL
water	25:8	0:0	6	}
water	26:4	0:0	4	}
if	27:4	29:22	2	(eval -> sample_rate_str)
cond	27:8	27:14	3	eval -> sample_rate_str
water	27:8	0:0	4	eval
op	27:12	0:0	4	->
water	27:14	0:0	4	sample_rate_str
stmts	28:8	29:22	3	
if	28:8	29:22	4	(( ret =ff_parse_sample_rate (& eval -> sample_rate ,eval -> sample_rate_str ,ctx ) ))
cond	28:12	28:87	5	( ret =ff_parse_sample_rate (& eval -> sample_rate ,eval -> sample_rate_str ,ctx ) )
water	28:12	0:0	6	(
water	28:13	0:0	6	ret
op	28:17	0:0	6	=
call	28:19	28:86	6	ff_parse_sample_rate
arg	28:40	28:58	7	&eval->sample_rate
op	28:40	0:0	8	&
water	28:41	0:0	8	eval
op	28:45	0:0	8	->
water	28:47	0:0	8	sample_rate
arg	28:60	28:81	7	eval->sample_rate_str
water	28:60	0:0	8	eval
op	28:64	0:0	8	->
water	28:66	0:0	8	sample_rate_str
arg	28:83	28:86	7	ctx
water	28:83	0:0	8	ctx
water	28:87	0:0	6	)
stmts	29:12	29:22	5	
return	29:12	29:22	6	ret
water	29:19	0:0	7	ret
water	30:4	0:0	2	eval
op	30:8	0:0	2	->
water	30:10	0:0	2	n
op	30:12	0:0	2	=
water	30:14	0:0	2	0
water	30:15	0:0	2	;
return	31:4	31:14	2	ret
water	31:11	0:0	3	ret
