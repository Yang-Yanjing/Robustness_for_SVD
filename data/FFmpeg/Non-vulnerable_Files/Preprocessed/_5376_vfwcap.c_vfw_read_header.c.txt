func	1:0	164:0	0	static int	vfw_read_header
params	1:26	0:0	1	
param	1:27	1:45	2	AVFormatContext *	s
stmnts	0:0	163:23	1	
decl	3:4	3:38	2	struct vfw_ctx	*ctx
op	3:24	0:0	2	=
water	3:26	0:0	2	s
op	3:27	0:0	2	->
water	3:29	0:0	2	priv_data
decl	4:4	4:25	2	AVCodecContext	*codec
decl	5:4	5:16	2	AVStream	*st
decl	6:4	6:14	2	int	devnum
decl	7:4	7:14	2	int	bisize
decl	8:4	8:25	2	BITMAPINFO	*bi
op	8:19	0:0	2	=
water	8:21	0:0	2	NULL
decl	9:4	9:23	2	CAPTUREPARMS	cparms
decl	10:4	10:23	2	DWORD	biCompression
decl	11:4	11:19	2	WORD	biBitCount
decl	12:4	12:11	2	int	ret
decl	13:4	13:26	2	AVRational	framerate_q
if	14:4	28:4	2	(!strcmp (s -> filename ,"list" ))
cond	14:8	14:35	3	!strcmp (s -> filename ,"list" )
op	14:8	0:0	4	!
call	14:9	14:35	4	strcmp
arg	14:16	14:27	5	s->filename
water	14:16	0:0	6	s
op	14:17	0:0	6	->
water	14:19	0:0	6	filename
arg	14:29	14:35	5	"list"
water	14:29	0:0	6	"list"
stmts	14:38	28:4	3	
water	14:38	0:0	4	{
for	15:8	26:8	4	(devnum = 0 ;devnum <= 9;devnum ++)
forinit	15:13	15:23	5	devnum = 0 ;
water	15:13	0:0	6	devnum
op	15:20	0:0	6	=
water	15:22	0:0	6	0
water	15:23	0:0	6	;
cond	15:25	15:35	5	devnum <= 9
water	15:25	0:0	6	devnum
op	15:32	0:0	6	<=
water	15:35	0:0	6	9
forexpr	15:38	15:44	5	devnum ++
water	15:38	0:0	6	devnum
op	15:44	0:0	6	++
stmts	15:48	26:8	5	
water	15:48	0:0	6	{
decl	16:12	16:33	6	char	driver_name[256]
decl	17:12	17:32	6	char	driver_ver[256]
water	18:12	0:0	6	ret
op	18:16	0:0	6	=
call	18:18	20:72	6	capGetDriverDescription
arg	18:42	18:48	7	devnum
water	18:42	0:0	8	devnum
arg	19:42	19:53	7	driver_name
water	19:42	0:0	8	driver_name
arg	19:55	19:74	7	sizeof(driver_name)
op	19:55	0:0	8	sizeof
water	19:61	0:0	8	(
water	19:62	0:0	8	driver_name
water	19:73	0:0	8	)
arg	20:42	20:52	7	driver_ver
water	20:42	0:0	8	driver_ver
arg	20:54	20:72	7	sizeof(driver_ver)
op	20:54	0:0	8	sizeof
water	20:60	0:0	8	(
water	20:61	0:0	8	driver_ver
water	20:71	0:0	8	)
water	20:73	0:0	6	;
if	21:12	25:12	6	(ret)
cond	21:16	21:16	7	ret
water	21:16	0:0	8	ret
stmts	21:21	25:12	7	
water	21:21	0:0	8	{
call	22:16	22:60	8	av_log
arg	22:23	22:24	9	s
water	22:23	0:0	10	s
arg	22:26	22:37	9	AV_LOG_INFO
water	22:26	0:0	10	AV_LOG_INFO
arg	22:39	22:52	9	"Driver %d\n"
water	22:39	0:0	10	"Driver %d\n"
arg	22:54	22:60	9	devnum
water	22:54	0:0	10	devnum
water	22:61	0:0	8	;
call	23:16	23:59	8	av_log
arg	23:23	23:24	9	s
water	23:23	0:0	10	s
arg	23:26	23:37	9	AV_LOG_INFO
water	23:26	0:0	10	AV_LOG_INFO
arg	23:39	23:46	9	" %s\n"
water	23:39	0:0	10	" %s\n"
arg	23:48	23:59	9	driver_name
water	23:48	0:0	10	driver_name
water	23:60	0:0	8	;
call	24:16	24:58	8	av_log
arg	24:23	24:24	9	s
water	24:23	0:0	10	s
arg	24:26	24:37	9	AV_LOG_INFO
water	24:26	0:0	10	AV_LOG_INFO
arg	24:39	24:46	9	" %s\n"
water	24:39	0:0	10	" %s\n"
arg	24:48	24:58	9	driver_ver
water	24:48	0:0	10	driver_ver
water	24:59	0:0	8	;
water	25:12	0:0	8	}
water	26:8	0:0	6	}
return	27:8	27:27	4	AVERROR(EIO)
call	27:15	27:26	5	AVERROR
arg	27:23	27:26	6	EIO
water	27:23	0:0	7	EIO
water	28:4	0:0	4	}
water	29:4	0:0	2	ctx
op	29:7	0:0	2	->
water	29:9	0:0	2	hwnd
op	29:14	0:0	2	=
call	29:16	29:75	2	capCreateCaptureWindow
arg	29:39	29:43	3	NULL
water	29:39	0:0	4	NULL
arg	29:45	29:46	3	0
water	29:45	0:0	4	0
arg	29:48	29:49	3	0
water	29:48	0:0	4	0
arg	29:51	29:52	3	0
water	29:51	0:0	4	0
arg	29:54	29:55	3	0
water	29:54	0:0	4	0
arg	29:57	29:58	3	0
water	29:57	0:0	4	0
arg	29:60	29:72	3	HWND_MESSAGE
water	29:60	0:0	4	HWND_MESSAGE
arg	29:74	29:75	3	0
water	29:74	0:0	4	0
water	29:76	0:0	2	;
if	30:4	33:4	2	(! ctx -> hwnd)
cond	30:7	30:13	3	! ctx -> hwnd
op	30:7	0:0	4	!
water	30:8	0:0	4	ctx
op	30:11	0:0	4	->
water	30:13	0:0	4	hwnd
stmts	30:19	33:4	3	
water	30:19	0:0	4	{
call	31:8	31:68	4	av_log
arg	31:15	31:16	5	s
water	31:15	0:0	6	s
arg	31:18	31:30	5	AV_LOG_ERROR
water	31:18	0:0	6	AV_LOG_ERROR
arg	31:32	31:68	5	"Could not create capture window.\n"
water	31:32	0:0	6	"Could not create capture window.\n"
water	31:69	0:0	4	;
return	32:8	32:27	4	AVERROR(EIO)
call	32:15	32:26	5	AVERROR
arg	32:23	32:26	6	EIO
water	32:23	0:0	7	EIO
water	33:4	0:0	4	}
water	35:4	0:0	2	devnum
op	35:11	0:0	2	=
call	35:13	35:29	2	atoi
arg	35:18	35:29	3	s->filename
water	35:18	0:0	4	s
op	35:19	0:0	4	->
water	35:21	0:0	4	filename
water	35:30	0:0	2	;
water	36:4	0:0	2	ret
op	36:8	0:0	2	=
call	36:10	36:65	2	SendMessage
arg	36:22	36:31	3	ctx->hwnd
water	36:22	0:0	4	ctx
op	36:25	0:0	4	->
water	36:27	0:0	4	hwnd
arg	36:33	36:54	3	WM_CAP_DRIVER_CONNECT
water	36:33	0:0	4	WM_CAP_DRIVER_CONNECT
arg	36:56	36:62	3	devnum
water	36:56	0:0	4	devnum
arg	36:64	36:65	3	0
water	36:64	0:0	4	0
water	36:66	0:0	2	;
if	37:4	41:4	2	(! ret)
cond	37:7	37:8	3	! ret
op	37:7	0:0	4	!
water	37:8	0:0	4	ret
stmts	37:13	41:4	3	
water	37:13	0:0	4	{
call	38:8	38:64	4	av_log
arg	38:15	38:16	5	s
water	38:15	0:0	6	s
arg	38:18	38:30	5	AV_LOG_ERROR
water	38:18	0:0	6	AV_LOG_ERROR
arg	38:32	38:64	5	"Could not connect to device.\n"
water	38:32	0:0	6	"Could not connect to device.\n"
water	38:65	0:0	4	;
call	39:8	39:31	4	DestroyWindow
arg	39:22	39:31	5	ctx->hwnd
water	39:22	0:0	6	ctx
op	39:25	0:0	6	->
water	39:27	0:0	6	hwnd
water	39:32	0:0	4	;
return	40:8	40:30	4	AVERROR(ENODEV)
call	40:15	40:29	5	AVERROR
arg	40:23	40:29	6	ENODEV
water	40:23	0:0	7	ENODEV
water	41:4	0:0	4	}
call	42:4	42:51	2	SendMessage
arg	42:16	42:25	3	ctx->hwnd
water	42:16	0:0	4	ctx
op	42:19	0:0	4	->
water	42:21	0:0	4	hwnd
arg	42:27	42:45	3	WM_CAP_SET_OVERLAY
water	42:27	0:0	4	WM_CAP_SET_OVERLAY
arg	42:47	42:48	3	0
water	42:47	0:0	4	0
arg	42:50	42:51	3	0
water	42:50	0:0	4	0
water	42:52	0:0	2	;
call	43:4	43:51	2	SendMessage
arg	43:16	43:25	3	ctx->hwnd
water	43:16	0:0	4	ctx
op	43:19	0:0	4	->
water	43:21	0:0	4	hwnd
arg	43:27	43:45	3	WM_CAP_SET_PREVIEW
water	43:27	0:0	4	WM_CAP_SET_PREVIEW
arg	43:47	43:48	3	0
water	43:47	0:0	4	0
arg	43:50	43:51	3	0
water	43:50	0:0	4	0
water	43:52	0:0	2	;
water	44:4	0:0	2	ret
op	44:8	0:0	2	=
call	44:10	45:45	2	SendMessage
arg	44:22	44:31	3	ctx->hwnd
water	44:22	0:0	4	ctx
op	44:25	0:0	4	->
water	44:27	0:0	4	hwnd
arg	44:33	44:64	3	WM_CAP_SET_CALLBACK_VIDEOSTREAM
water	44:33	0:0	4	WM_CAP_SET_CALLBACK_VIDEOSTREAM
arg	44:66	44:67	3	0
water	44:66	0:0	4	0
arg	45:22	45:45	3	(LPARAM)videostream_cb
water	45:22	0:0	4	(
water	45:23	0:0	4	LPARAM
water	45:29	0:0	4	)
water	45:31	0:0	4	videostream_cb
water	45:46	0:0	2	;
if	46:4	49:4	2	(! ret)
cond	46:7	46:8	3	! ret
op	46:7	0:0	4	!
water	46:8	0:0	4	ret
stmts	46:13	49:4	3	
water	46:13	0:0	4	{
call	47:8	47:72	4	av_log
arg	47:15	47:16	5	s
water	47:15	0:0	6	s
arg	47:18	47:30	5	AV_LOG_ERROR
water	47:18	0:0	6	AV_LOG_ERROR
arg	47:32	47:72	5	"Could not set video stream callback.\n"
water	47:32	0:0	6	"Could not set video stream callback.\n"
water	47:73	0:0	4	;
goto	48:8	48:17	4	fail
water	48:13	0:0	5	fail
water	49:4	0:0	4	}
call	50:4	50:59	2	SetWindowLongPtr
arg	50:21	50:30	3	ctx->hwnd
water	50:21	0:0	4	ctx
op	50:24	0:0	4	->
water	50:26	0:0	4	hwnd
arg	50:32	50:45	3	GWLP_USERDATA
water	50:32	0:0	4	GWLP_USERDATA
arg	50:47	50:59	3	(LONG_PTR)s
water	50:47	0:0	4	(
water	50:48	0:0	4	LONG_PTR
water	50:56	0:0	4	)
water	50:58	0:0	4	s
water	50:60	0:0	2	;
water	51:4	0:0	2	st
op	51:7	0:0	2	=
call	51:9	51:36	2	avformat_new_stream
arg	51:29	51:30	3	s
water	51:29	0:0	4	s
arg	51:32	51:36	3	NULL
water	51:32	0:0	4	NULL
water	51:37	0:0	2	;
if	52:4	55:4	2	(! st)
cond	52:7	52:8	3	! st
op	52:7	0:0	4	!
water	52:8	0:0	4	st
stmts	52:12	55:4	3	
water	52:12	0:0	4	{
call	53:8	53:24	4	vfw_read_close
arg	53:23	53:24	5	s
water	53:23	0:0	6	s
water	53:25	0:0	4	;
return	54:8	54:30	4	AVERROR(ENOMEM)
call	54:15	54:29	5	AVERROR
arg	54:23	54:29	6	ENOMEM
water	54:23	0:0	7	ENOMEM
water	55:4	0:0	4	}
water	57:4	0:0	2	bisize
op	57:11	0:0	2	=
call	57:13	57:64	2	SendMessage
arg	57:25	57:34	3	ctx->hwnd
water	57:25	0:0	4	ctx
op	57:28	0:0	4	->
water	57:30	0:0	4	hwnd
arg	57:36	57:58	3	WM_CAP_GET_VIDEOFORMAT
water	57:36	0:0	4	WM_CAP_GET_VIDEOFORMAT
arg	57:60	57:61	3	0
water	57:60	0:0	4	0
arg	57:63	57:64	3	0
water	57:63	0:0	4	0
water	57:65	0:0	2	;
if	58:4	59:17	2	(! bisize)
cond	58:7	58:8	3	! bisize
op	58:7	0:0	4	!
water	58:8	0:0	4	bisize
stmts	59:8	59:17	3	
goto	59:8	59:17	4	fail
water	59:13	0:0	5	fail
water	60:4	0:0	2	bi
op	60:7	0:0	2	=
call	60:9	60:25	2	av_malloc
arg	60:19	60:25	3	bisize
water	60:19	0:0	4	bisize
water	60:26	0:0	2	;
if	61:4	64:4	2	(! bi)
cond	61:7	61:8	3	! bi
op	61:7	0:0	4	!
water	61:8	0:0	4	bi
stmts	61:12	64:4	3	
water	61:12	0:0	4	{
call	62:8	62:24	4	vfw_read_close
arg	62:23	62:24	5	s
water	62:23	0:0	6	s
water	62:25	0:0	4	;
return	63:8	63:30	4	AVERROR(ENOMEM)
call	63:15	63:29	5	AVERROR
arg	63:23	63:29	6	ENOMEM
water	63:23	0:0	7	ENOMEM
water	64:4	0:0	4	}
water	65:4	0:0	2	ret
op	65:8	0:0	2	=
call	65:10	65:76	2	SendMessage
arg	65:22	65:31	3	ctx->hwnd
water	65:22	0:0	4	ctx
op	65:25	0:0	4	->
water	65:27	0:0	4	hwnd
arg	65:33	65:55	3	WM_CAP_GET_VIDEOFORMAT
water	65:33	0:0	4	WM_CAP_GET_VIDEOFORMAT
arg	65:57	65:63	3	bisize
water	65:57	0:0	4	bisize
arg	65:65	65:76	3	(LPARAM)bi
water	65:65	0:0	4	(
water	65:66	0:0	4	LPARAM
water	65:72	0:0	4	)
water	65:74	0:0	4	bi
water	65:77	0:0	2	;
if	66:4	67:17	2	(! ret)
cond	66:7	66:8	3	! ret
op	66:7	0:0	4	!
water	66:8	0:0	4	ret
stmts	67:8	67:17	3	
goto	67:8	67:17	4	fail
water	67:13	0:0	5	fail
call	68:4	68:30	2	dump_bih
arg	68:13	68:14	3	s
water	68:13	0:0	4	s
arg	68:16	68:30	3	&bi->bmiHeader
op	68:16	0:0	4	&
water	68:17	0:0	4	bi
op	68:19	0:0	4	->
water	68:21	0:0	4	bmiHeader
water	68:31	0:0	2	;
water	69:4	0:0	2	ret
op	69:8	0:0	2	=
call	69:10	69:58	2	av_parse_video_rate
arg	69:30	69:42	3	&framerate_q
op	69:30	0:0	4	&
water	69:31	0:0	4	framerate_q
arg	69:44	69:58	3	ctx->framerate
water	69:44	0:0	4	ctx
op	69:47	0:0	4	->
water	69:49	0:0	4	framerate
water	69:59	0:0	2	;
if	70:4	73:4	2	(ret < 0)
cond	70:8	70:14	3	ret < 0
water	70:8	0:0	4	ret
op	70:12	0:0	4	<
water	70:14	0:0	4	0
stmts	70:17	73:4	3	
water	70:17	0:0	4	{
call	71:8	71:83	4	av_log
arg	71:15	71:16	5	s
water	71:15	0:0	6	s
arg	71:18	71:30	5	AV_LOG_ERROR
water	71:18	0:0	6	AV_LOG_ERROR
arg	71:32	71:67	5	"Could not parse framerate '%s'.\n"
water	71:32	0:0	6	"Could not parse framerate '%s'.\n"
arg	71:69	71:83	5	ctx->framerate
water	71:69	0:0	6	ctx
op	71:72	0:0	6	->
water	71:74	0:0	6	framerate
water	71:84	0:0	4	;
goto	72:8	72:17	4	fail
water	72:13	0:0	5	fail
water	73:4	0:0	4	}
if	74:4	80:4	2	(ctx -> video_size)
cond	74:8	74:13	3	ctx -> video_size
water	74:8	0:0	4	ctx
op	74:11	0:0	4	->
water	74:13	0:0	4	video_size
stmts	74:25	80:4	3	
water	74:25	0:0	4	{
water	75:8	0:0	4	ret
op	75:12	0:0	4	=
call	75:14	75:98	4	av_parse_video_size
arg	75:34	75:56	5	&bi->bmiHeader.biWidth
op	75:34	0:0	6	&
water	75:35	0:0	6	bi
op	75:37	0:0	6	->
water	75:39	0:0	6	bmiHeader
op	75:48	0:0	6	.
water	75:49	0:0	6	biWidth
arg	75:58	75:81	5	&bi->bmiHeader.biHeight
op	75:58	0:0	6	&
water	75:59	0:0	6	bi
op	75:61	0:0	6	->
water	75:63	0:0	6	bmiHeader
op	75:72	0:0	6	.
water	75:73	0:0	6	biHeight
arg	75:83	75:98	5	ctx->video_size
water	75:83	0:0	6	ctx
op	75:86	0:0	6	->
water	75:88	0:0	6	video_size
water	75:99	0:0	4	;
if	76:8	79:8	4	(ret < 0)
cond	76:12	76:18	5	ret < 0
water	76:12	0:0	6	ret
op	76:16	0:0	6	<
water	76:18	0:0	6	0
stmts	76:21	79:8	5	
water	76:21	0:0	6	{
call	77:12	77:66	6	av_log
arg	77:19	77:20	7	s
water	77:19	0:0	8	s
arg	77:22	77:34	7	AV_LOG_ERROR
water	77:22	0:0	8	AV_LOG_ERROR
arg	77:36	77:66	7	"Couldn't parse video size.\n"
water	77:36	0:0	8	"Couldn't parse video size.\n"
water	77:67	0:0	6	;
goto	78:12	78:21	6	fail
water	78:17	0:0	7	fail
water	79:8	0:0	6	}
water	80:4	0:0	4	}
if	81:4	91:4	2	(0)
cond	81:8	81:8	3	0
water	81:8	0:0	4	0
stmts	81:11	91:4	3	
water	81:11	0:0	4	{
water	84:8	0:0	4	bi
op	84:10	0:0	4	->
water	84:12	0:0	4	bmiHeader
op	84:21	0:0	4	.
water	84:22	0:0	4	biWidth
op	84:36	0:0	4	=
water	84:38	0:0	4	320
water	84:41	0:0	4	;
water	85:8	0:0	4	bi
op	85:10	0:0	4	->
water	85:12	0:0	4	bmiHeader
op	85:21	0:0	4	.
water	85:22	0:0	4	biHeight
op	85:36	0:0	4	=
water	85:38	0:0	4	240
water	85:41	0:0	4	;
water	86:8	0:0	4	bi
op	86:10	0:0	4	->
water	86:12	0:0	4	bmiHeader
op	86:21	0:0	4	.
water	86:22	0:0	4	biPlanes
op	86:36	0:0	4	=
water	86:38	0:0	4	1
water	86:39	0:0	4	;
water	87:8	0:0	4	bi
op	87:10	0:0	4	->
water	87:12	0:0	4	bmiHeader
op	87:21	0:0	4	.
water	87:22	0:0	4	biBitCount
op	87:36	0:0	4	=
water	87:38	0:0	4	12
water	87:40	0:0	4	;
water	88:8	0:0	4	bi
op	88:10	0:0	4	->
water	88:12	0:0	4	bmiHeader
op	88:21	0:0	4	.
water	88:22	0:0	4	biCompression
op	88:36	0:0	4	=
call	88:38	88:59	4	MKTAG
arg	88:44	88:47	5	'I'
water	88:44	0:0	6	'I'
arg	88:48	88:51	5	'4'
water	88:48	0:0	6	'4'
arg	88:52	88:55	5	'2'
water	88:52	0:0	6	'2'
arg	88:56	88:59	5	'0'
water	88:56	0:0	6	'0'
water	88:60	0:0	4	;
water	89:8	0:0	4	bi
op	89:10	0:0	4	->
water	89:12	0:0	4	bmiHeader
op	89:21	0:0	4	.
water	89:22	0:0	4	biSizeImage
op	89:36	0:0	4	=
water	89:38	0:0	4	115200
water	89:44	0:0	4	;
call	90:8	90:34	4	dump_bih
arg	90:17	90:18	5	s
water	90:17	0:0	6	s
arg	90:20	90:34	5	&bi->bmiHeader
op	90:20	0:0	6	&
water	90:21	0:0	6	bi
op	90:23	0:0	6	->
water	90:25	0:0	6	bmiHeader
water	90:35	0:0	4	;
water	91:4	0:0	4	}
water	92:4	0:0	2	ret
op	92:8	0:0	2	=
call	92:10	92:76	2	SendMessage
arg	92:22	92:31	3	ctx->hwnd
water	92:22	0:0	4	ctx
op	92:25	0:0	4	->
water	92:27	0:0	4	hwnd
arg	92:33	92:55	3	WM_CAP_SET_VIDEOFORMAT
water	92:33	0:0	4	WM_CAP_SET_VIDEOFORMAT
arg	92:57	92:63	3	bisize
water	92:57	0:0	4	bisize
arg	92:65	92:76	3	(LPARAM)bi
water	92:65	0:0	4	(
water	92:66	0:0	4	LPARAM
water	92:72	0:0	4	)
water	92:74	0:0	4	bi
water	92:77	0:0	2	;
if	93:4	96:4	2	(! ret)
cond	93:7	93:8	3	! ret
op	93:7	0:0	4	!
water	93:8	0:0	4	ret
stmts	93:13	96:4	3	
water	93:13	0:0	4	{
call	94:8	94:63	4	av_log
arg	94:15	94:16	5	s
water	94:15	0:0	6	s
arg	94:18	94:30	5	AV_LOG_ERROR
water	94:18	0:0	6	AV_LOG_ERROR
arg	94:32	94:63	5	"Could not set Video Format.\n"
water	94:32	0:0	6	"Could not set Video Format.\n"
water	94:64	0:0	4	;
goto	95:8	95:17	4	fail
water	95:13	0:0	5	fail
water	96:4	0:0	4	}
water	97:4	0:0	2	biCompression
op	97:18	0:0	2	=
water	97:20	0:0	2	bi
op	97:22	0:0	2	->
water	97:24	0:0	2	bmiHeader
op	97:33	0:0	2	.
water	97:34	0:0	2	biCompression
water	97:47	0:0	2	;
water	98:4	0:0	2	biBitCount
op	98:15	0:0	2	=
water	98:17	0:0	2	bi
op	98:19	0:0	2	->
water	98:21	0:0	2	bmiHeader
op	98:30	0:0	2	.
water	98:31	0:0	2	biBitCount
water	98:41	0:0	2	;
water	100:4	0:0	2	ret
op	100:8	0:0	2	=
call	100:10	101:38	2	SendMessage
arg	100:22	100:31	3	ctx->hwnd
water	100:22	0:0	4	ctx
op	100:25	0:0	4	->
water	100:27	0:0	4	hwnd
arg	100:33	100:58	3	WM_CAP_GET_SEQUENCE_SETUP
water	100:33	0:0	4	WM_CAP_GET_SEQUENCE_SETUP
arg	100:60	100:74	3	sizeof(cparms)
op	100:60	0:0	4	sizeof
water	100:66	0:0	4	(
water	100:67	0:0	4	cparms
water	100:73	0:0	4	)
arg	101:22	101:38	3	(LPARAM)&cparms
water	101:22	0:0	4	(
water	101:23	0:0	4	LPARAM
water	101:29	0:0	4	)
op	101:31	0:0	4	&
water	101:32	0:0	4	cparms
water	101:39	0:0	2	;
if	102:4	103:17	2	(! ret)
cond	102:7	102:8	3	! ret
op	102:7	0:0	4	!
water	102:8	0:0	4	ret
stmts	103:8	103:17	3	
goto	103:8	103:17	4	fail
water	103:13	0:0	5	fail
call	104:4	104:32	2	dump_captureparms
arg	104:22	104:23	3	s
water	104:22	0:0	4	s
arg	104:25	104:32	3	&cparms
op	104:25	0:0	4	&
water	104:26	0:0	4	cparms
water	104:33	0:0	2	;
water	105:4	0:0	2	cparms
op	105:10	0:0	2	.
water	105:11	0:0	2	fYield
op	105:18	0:0	2	=
water	105:20	0:0	2	1
water	105:21	0:0	2	;
water	106:4	0:0	2	cparms
op	106:10	0:0	2	.
water	106:11	0:0	2	dwRequestMicroSecPerFrame
op	106:37	0:0	2	=
water	107:31	0:0	2	(
water	107:32	0:0	2	framerate_q
op	107:43	0:0	2	.
water	107:44	0:0	2	den
op	107:47	0:0	2	*
water	107:48	0:0	2	1000000
water	107:55	0:0	2	)
op	107:57	0:0	2	/
water	107:59	0:0	2	framerate_q
op	107:70	0:0	2	.
water	107:71	0:0	2	num
water	107:74	0:0	2	;
water	108:4	0:0	2	cparms
op	108:10	0:0	2	.
water	108:11	0:0	2	fAbortLeftMouse
op	108:27	0:0	2	=
water	108:29	0:0	2	0
water	108:30	0:0	2	;
water	109:4	0:0	2	cparms
op	109:10	0:0	2	.
water	109:11	0:0	2	fAbortRightMouse
op	109:28	0:0	2	=
water	109:30	0:0	2	0
water	109:31	0:0	2	;
water	110:4	0:0	2	cparms
op	110:10	0:0	2	.
water	110:11	0:0	2	fCaptureAudio
op	110:25	0:0	2	=
water	110:27	0:0	2	0
water	110:28	0:0	2	;
water	111:4	0:0	2	cparms
op	111:10	0:0	2	.
water	111:11	0:0	2	vKeyAbort
op	111:21	0:0	2	=
water	111:23	0:0	2	0
water	111:24	0:0	2	;
water	112:4	0:0	2	ret
op	112:8	0:0	2	=
call	112:10	113:38	2	SendMessage
arg	112:22	112:31	3	ctx->hwnd
water	112:22	0:0	4	ctx
op	112:25	0:0	4	->
water	112:27	0:0	4	hwnd
arg	112:33	112:58	3	WM_CAP_SET_SEQUENCE_SETUP
water	112:33	0:0	4	WM_CAP_SET_SEQUENCE_SETUP
arg	112:60	112:74	3	sizeof(cparms)
op	112:60	0:0	4	sizeof
water	112:66	0:0	4	(
water	112:67	0:0	4	cparms
water	112:73	0:0	4	)
arg	113:22	113:38	3	(LPARAM)&cparms
water	113:22	0:0	4	(
water	113:23	0:0	4	LPARAM
water	113:29	0:0	4	)
op	113:31	0:0	4	&
water	113:32	0:0	4	cparms
water	113:39	0:0	2	;
if	114:4	115:17	2	(! ret)
cond	114:7	114:8	3	! ret
op	114:7	0:0	4	!
water	114:8	0:0	4	ret
stmts	115:8	115:17	3	
goto	115:8	115:17	4	fail
water	115:13	0:0	5	fail
water	116:4	0:0	2	codec
op	116:10	0:0	2	=
water	116:12	0:0	2	st
op	116:14	0:0	2	->
water	116:16	0:0	2	codec
water	116:21	0:0	2	;
water	117:4	0:0	2	codec
op	117:9	0:0	2	->
water	117:11	0:0	2	time_base
op	117:21	0:0	2	=
call	117:23	117:43	2	av_inv_q
arg	117:32	117:43	3	framerate_q
water	117:32	0:0	4	framerate_q
water	117:44	0:0	2	;
water	118:4	0:0	2	codec
op	118:9	0:0	2	->
water	118:11	0:0	2	codec_type
op	118:22	0:0	2	=
water	118:24	0:0	2	AVMEDIA_TYPE_VIDEO
water	118:42	0:0	2	;
water	119:4	0:0	2	codec
op	119:9	0:0	2	->
water	119:11	0:0	2	width
op	119:18	0:0	2	=
water	119:20	0:0	2	bi
op	119:22	0:0	2	->
water	119:24	0:0	2	bmiHeader
op	119:33	0:0	2	.
water	119:34	0:0	2	biWidth
water	119:41	0:0	2	;
water	120:4	0:0	2	codec
op	120:9	0:0	2	->
water	120:11	0:0	2	height
op	120:18	0:0	2	=
water	120:20	0:0	2	bi
op	120:22	0:0	2	->
water	120:24	0:0	2	bmiHeader
op	120:33	0:0	2	.
water	120:34	0:0	2	biHeight
water	120:42	0:0	2	;
water	121:4	0:0	2	codec
op	121:9	0:0	2	->
water	121:11	0:0	2	pix_fmt
op	121:19	0:0	2	=
call	121:21	121:57	2	vfw_pixfmt
arg	121:32	121:45	3	biCompression
water	121:32	0:0	4	biCompression
arg	121:47	121:57	3	biBitCount
water	121:47	0:0	4	biBitCount
water	121:58	0:0	2	;
if	122:4	131:4	2	(codec -> pix_fmt == AV_PIX_FMT_NONE)
cond	122:7	122:25	3	codec -> pix_fmt == AV_PIX_FMT_NONE
water	122:7	0:0	4	codec
op	122:12	0:0	4	->
water	122:14	0:0	4	pix_fmt
op	122:22	0:0	4	==
water	122:25	0:0	4	AV_PIX_FMT_NONE
stmts	122:42	131:4	3	
water	122:42	0:0	4	{
water	123:8	0:0	4	codec
op	123:13	0:0	4	->
water	123:15	0:0	4	codec_id
op	123:24	0:0	4	=
call	123:26	123:51	4	vfw_codecid
arg	123:38	123:51	5	biCompression
water	123:38	0:0	6	biCompression
water	123:52	0:0	4	;
if	124:8	129:8	4	(codec -> codec_id == AV_CODEC_ID_NONE)
cond	124:11	124:30	5	codec -> codec_id == AV_CODEC_ID_NONE
water	124:11	0:0	6	codec
op	124:16	0:0	6	->
water	124:18	0:0	6	codec_id
op	124:27	0:0	6	==
water	124:30	0:0	6	AV_CODEC_ID_NONE
stmts	124:48	129:8	5	
water	124:48	0:0	6	{
call	125:12	126:80	6	av_log
arg	125:19	125:20	7	s
water	125:19	0:0	8	s
arg	125:22	125:34	7	AV_LOG_ERROR
water	125:22	0:0	8	AV_LOG_ERROR
arg	125:36	126:80	7	"Unknown compression type. ""Please report verbose (-v 9) debug information.\n"
water	125:36	0:0	8	"Unknown compression type. "
water	126:29	0:0	8	"Please report verbose (-v 9) debug information.\n"
water	126:81	0:0	6	;
call	127:12	127:28	6	vfw_read_close
arg	127:27	127:28	7	s
water	127:27	0:0	8	s
water	127:29	0:0	6	;
return	128:12	128:39	6	AVERROR_PATCHWELCOME
water	128:19	0:0	7	AVERROR_PATCHWELCOME
water	129:8	0:0	6	}
water	130:8	0:0	4	codec
op	130:13	0:0	4	->
water	130:15	0:0	4	bits_per_coded_sample
op	130:37	0:0	4	=
water	130:39	0:0	4	biBitCount
water	130:49	0:0	4	;
water	131:4	0:0	4	}
else	131:6	141:4	2
stmts	131:11	141:4	3	
water	131:11	0:0	4	{
water	132:8	0:0	4	codec
op	132:13	0:0	4	->
water	132:15	0:0	4	codec_id
op	132:24	0:0	4	=
water	132:26	0:0	4	AV_CODEC_ID_RAWVIDEO
water	132:46	0:0	4	;
if	133:8	140:8	4	(biCompression == BI_RGB)
cond	133:11	133:28	5	biCompression == BI_RGB
water	133:11	0:0	6	biCompression
op	133:25	0:0	6	==
water	133:28	0:0	6	BI_RGB
stmts	133:36	140:8	5	
water	133:36	0:0	6	{
water	134:12	0:0	6	codec
op	134:17	0:0	6	->
water	134:19	0:0	6	bits_per_coded_sample
op	134:41	0:0	6	=
water	134:43	0:0	6	biBitCount
water	134:53	0:0	6	;
water	135:12	0:0	6	codec
op	135:17	0:0	6	->
water	135:19	0:0	6	extradata
op	135:29	0:0	6	=
call	135:31	135:73	6	av_malloc
arg	135:41	135:73	7	9+AV_INPUT_BUFFER_PADDING_SIZE
water	135:41	0:0	8	9
op	135:43	0:0	8	+
water	135:45	0:0	8	AV_INPUT_BUFFER_PADDING_SIZE
water	135:74	0:0	6	;
if	136:12	139:12	6	(codec -> extradata)
cond	136:16	136:23	7	codec -> extradata
water	136:16	0:0	8	codec
op	136:21	0:0	8	->
water	136:23	0:0	8	extradata
stmts	136:34	139:12	7	
water	136:34	0:0	8	{
water	137:16	0:0	8	codec
op	137:21	0:0	8	->
water	137:23	0:0	8	extradata_size
op	137:38	0:0	8	=
water	137:40	0:0	8	9
water	137:41	0:0	8	;
call	138:16	138:54	8	memcpy
arg	138:23	138:39	9	codec->extradata
water	138:23	0:0	10	codec
op	138:28	0:0	10	->
water	138:30	0:0	10	extradata
arg	138:41	138:51	9	"BottomUp"
water	138:41	0:0	10	"BottomUp"
arg	138:53	138:54	9	9
water	138:53	0:0	10	9
water	138:55	0:0	8	;
water	139:12	0:0	8	}
water	140:8	0:0	6	}
water	141:4	0:0	4	}
call	142:4	142:16	2	av_freep
arg	142:13	142:16	3	&bi
op	142:13	0:0	4	&
water	142:14	0:0	4	bi
water	142:17	0:0	2	;
call	143:4	143:39	2	avpriv_set_pts_info
arg	143:24	143:26	3	st
water	143:24	0:0	4	st
arg	143:28	143:30	3	32
water	143:28	0:0	4	32
arg	143:32	143:33	3	1
water	143:32	0:0	4	1
arg	143:35	143:39	3	1000
water	143:35	0:0	4	1000
water	143:40	0:0	2	;
water	144:4	0:0	2	ctx
op	144:7	0:0	2	->
water	144:9	0:0	2	mutex
op	144:15	0:0	2	=
call	144:17	144:42	2	CreateMutex
arg	144:29	144:33	3	NULL
water	144:29	0:0	4	NULL
arg	144:35	144:36	3	0
water	144:35	0:0	4	0
arg	144:38	144:42	3	NULL
water	144:38	0:0	4	NULL
water	144:43	0:0	2	;
if	145:4	148:4	2	(! ctx -> mutex)
cond	145:7	145:13	3	! ctx -> mutex
op	145:7	0:0	4	!
water	145:8	0:0	4	ctx
op	145:11	0:0	4	->
water	145:13	0:0	4	mutex
stmts	145:20	148:4	3	
water	145:20	0:0	4	{
call	146:8	146:60	4	av_log
arg	146:15	146:16	5	s
water	146:15	0:0	6	s
arg	146:18	146:30	5	AV_LOG_ERROR
water	146:18	0:0	6	AV_LOG_ERROR
arg	146:32	146:60	5	"Could not create Mutex.\n"
water	146:32	0:0	6	"Could not create Mutex.\n"
water	146:61	0:0	4	;
goto	147:8	147:17	4	fail
water	147:13	0:0	5	fail
water	148:4	0:0	4	}
water	149:4	0:0	2	ctx
op	149:7	0:0	2	->
water	149:9	0:0	2	event
op	149:15	0:0	2	=
call	149:17	149:45	2	CreateEvent
arg	149:29	149:33	3	NULL
water	149:29	0:0	4	NULL
arg	149:35	149:36	3	1
water	149:35	0:0	4	1
arg	149:38	149:39	3	0
water	149:38	0:0	4	0
arg	149:41	149:45	3	NULL
water	149:41	0:0	4	NULL
water	149:46	0:0	2	;
if	150:4	153:4	2	(! ctx -> event)
cond	150:7	150:13	3	! ctx -> event
op	150:7	0:0	4	!
water	150:8	0:0	4	ctx
op	150:11	0:0	4	->
water	150:13	0:0	4	event
stmts	150:20	153:4	3	
water	150:20	0:0	4	{
call	151:8	151:60	4	av_log
arg	151:15	151:16	5	s
water	151:15	0:0	6	s
arg	151:18	151:30	5	AV_LOG_ERROR
water	151:18	0:0	6	AV_LOG_ERROR
arg	151:32	151:60	5	"Could not create Event.\n"
water	151:32	0:0	6	"Could not create Event.\n"
water	151:61	0:0	4	;
goto	152:8	152:17	4	fail
water	152:13	0:0	5	fail
water	153:4	0:0	4	}
water	154:4	0:0	2	ret
op	154:8	0:0	2	=
call	154:10	154:61	2	SendMessage
arg	154:22	154:31	3	ctx->hwnd
water	154:22	0:0	4	ctx
op	154:25	0:0	4	->
water	154:27	0:0	4	hwnd
arg	154:33	154:55	3	WM_CAP_SEQUENCE_NOFILE
water	154:33	0:0	4	WM_CAP_SEQUENCE_NOFILE
arg	154:57	154:58	3	0
water	154:57	0:0	4	0
arg	154:60	154:61	3	0
water	154:60	0:0	4	0
water	154:62	0:0	2	;
if	155:4	158:4	2	(! ret)
cond	155:7	155:8	3	! ret
op	155:7	0:0	4	!
water	155:8	0:0	4	ret
stmts	155:13	158:4	3	
water	155:13	0:0	4	{
call	156:8	156:70	4	av_log
arg	156:15	156:16	5	s
water	156:15	0:0	6	s
arg	156:18	156:30	5	AV_LOG_ERROR
water	156:18	0:0	6	AV_LOG_ERROR
arg	156:32	156:70	5	"Could not start capture sequence.\n"
water	156:32	0:0	6	"Could not start capture sequence.\n"
water	156:71	0:0	4	;
goto	157:8	157:17	4	fail
water	157:13	0:0	5	fail
water	158:4	0:0	4	}
return	159:4	159:12	2	0
water	159:11	0:0	3	0
label	160:0	160:4	2	fail :
call	161:4	161:16	2	av_freep
arg	161:13	161:16	3	&bi
op	161:13	0:0	4	&
water	161:14	0:0	4	bi
water	161:17	0:0	2	;
call	162:4	162:20	2	vfw_read_close
arg	162:19	162:20	3	s
water	162:19	0:0	4	s
water	162:21	0:0	2	;
return	163:4	163:23	2	AVERROR(EIO)
call	163:11	163:22	3	AVERROR
arg	163:19	163:22	4	EIO
water	163:19	0:0	5	EIO
