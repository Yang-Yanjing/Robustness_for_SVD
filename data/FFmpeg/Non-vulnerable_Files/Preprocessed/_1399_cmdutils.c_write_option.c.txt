func	1:0	50:0	0	static int	write_option
params	1:23	0:0	1	
param	1:24	1:36	2	void *	optctx
param	1:38	1:57	2	const OptionDef *	po
param	1:59	1:74	2	const char *	opt
param	2:24	2:39	2	const char *	arg
stmnts	0:0	49:12	1	
decl	6:4	7:61	2	void	*dst
op	6:14	0:0	2	=
water	6:16	0:0	2	po
op	6:18	0:0	2	->
water	6:20	0:0	2	flags
op	6:26	0:0	2	&
water	6:28	0:0	2	(
water	6:29	0:0	2	OPT_OFFSET
op	6:40	0:0	2	|
water	6:42	0:0	2	OPT_SPEC
water	6:50	0:0	2	)
water	6:52	0:0	2	?
water	7:16	0:0	2	(
water	7:17	0:0	2	uint8_t
op	7:25	0:0	2	*
water	7:26	0:0	2	)
water	7:27	0:0	2	optctx
op	7:34	0:0	2	+
water	7:36	0:0	2	po
op	7:38	0:0	2	->
water	7:40	0:0	2	u
op	7:41	0:0	2	.
water	7:42	0:0	2	off
water	7:46	0:0	2	:
water	7:48	0:0	2	po
op	7:50	0:0	2	->
water	7:52	0:0	2	u
op	7:53	0:0	2	.
water	7:54	0:0	2	dst_ptr
decl	8:4	8:17	2	int	*dstcount
if	9:4	20:4	2	(po -> flags & OPT_SPEC)
cond	9:8	9:20	3	po -> flags & OPT_SPEC
water	9:8	0:0	4	po
op	9:10	0:0	4	->
water	9:12	0:0	4	flags
op	9:18	0:0	4	&
water	9:20	0:0	4	OPT_SPEC
stmts	9:30	20:4	3	
water	9:30	0:0	4	{
decl	10:8	10:31	4	SpecifierOpt	**so
op	10:26	0:0	4	=
water	10:28	0:0	4	dst
decl	11:8	11:34	4	char	*p
op	11:16	0:0	4	=
call	11:18	11:33	5	strchr
arg	11:25	11:28	6	opt
water	11:25	0:0	7	opt
arg	11:30	11:33	6	':'
water	11:30	0:0	7	':'
decl	12:8	12:17	4	char	*str
water	13:8	0:0	4	dstcount
op	13:17	0:0	4	=
call	13:19	13:33	4	(int*)
arg	13:27	13:33	5	so+1
water	13:27	0:0	6	so
op	13:30	0:0	6	+
water	13:32	0:0	6	1
water	13:34	0:0	4	;
op	14:8	0:0	4	*
water	14:9	0:0	4	so
op	14:12	0:0	4	=
call	14:14	14:67	4	grow_array
arg	14:25	14:28	5	*so
op	14:25	0:0	6	*
water	14:26	0:0	6	so
arg	14:30	14:42	5	sizeof(**so)
op	14:30	0:0	6	sizeof
water	14:36	0:0	6	(
op	14:37	0:0	6	*
op	14:38	0:0	6	*
water	14:39	0:0	6	so
water	14:41	0:0	6	)
arg	14:44	14:52	5	dstcount
water	14:44	0:0	6	dstcount
arg	14:54	14:67	5	*dstcount+1
op	14:54	0:0	6	*
water	14:55	0:0	6	dstcount
op	14:64	0:0	6	+
water	14:66	0:0	6	1
water	14:68	0:0	4	;
water	15:8	0:0	4	str
op	15:12	0:0	4	=
call	15:14	15:38	4	av_strdup
arg	15:24	15:38	5	p?p+1:""
water	15:24	0:0	6	p
water	15:26	0:0	6	?
water	15:28	0:0	6	p
op	15:30	0:0	6	+
water	15:32	0:0	6	1
water	15:34	0:0	6	:
water	15:36	0:0	6	""
water	15:39	0:0	4	;
if	16:8	17:34	4	(! str)
cond	16:12	16:13	5	! str
op	16:12	0:0	6	!
water	16:13	0:0	6	str
stmts	17:12	17:34	5	
return	17:12	17:34	6	AVERROR(ENOMEM)
call	17:19	17:33	7	AVERROR
arg	17:27	17:33	8	ENOMEM
water	17:27	0:0	9	ENOMEM
water	18:8	0:0	4	(
op	18:9	0:0	4	*
water	18:10	0:0	4	so
water	18:12	0:0	4	)
op	18:13	0:0	4	[
op	18:14	0:0	4	*
water	18:15	0:0	4	dstcount
op	18:24	0:0	4	-
water	18:26	0:0	4	1
op	18:27	0:0	4	]
op	18:28	0:0	4	.
water	18:29	0:0	4	specifier
op	18:39	0:0	4	=
water	18:41	0:0	4	str
water	18:44	0:0	4	;
water	19:8	0:0	4	dst
op	19:12	0:0	4	=
op	19:14	0:0	4	&
water	19:15	0:0	4	(
op	19:16	0:0	4	*
water	19:17	0:0	4	so
water	19:19	0:0	4	)
op	19:20	0:0	4	[
op	19:21	0:0	4	*
water	19:22	0:0	4	dstcount
op	19:31	0:0	4	-
water	19:33	0:0	4	1
op	19:34	0:0	4	]
op	19:35	0:0	4	.
water	19:36	0:0	4	u
water	19:37	0:0	4	;
water	20:4	0:0	4	}
if	21:4	28:4	2	(po -> flags & OPT_STRING)
cond	21:8	21:20	3	po -> flags & OPT_STRING
water	21:8	0:0	4	po
op	21:10	0:0	4	->
water	21:12	0:0	4	flags
op	21:18	0:0	4	&
water	21:20	0:0	4	OPT_STRING
stmts	21:32	28:4	3	
water	21:32	0:0	4	{
decl	22:8	22:17	4	char	*str
water	23:8	0:0	4	str
op	23:12	0:0	4	=
call	23:14	23:27	4	av_strdup
arg	23:24	23:27	5	arg
water	23:24	0:0	6	arg
water	23:28	0:0	4	;
call	24:8	24:20	4	av_freep
arg	24:17	24:20	5	dst
water	24:17	0:0	6	dst
water	24:21	0:0	4	;
if	25:8	26:34	4	(! str)
cond	25:12	25:13	5	! str
op	25:12	0:0	6	!
water	25:13	0:0	6	str
stmts	26:12	26:34	5	
return	26:12	26:34	6	AVERROR(ENOMEM)
call	26:19	26:33	7	AVERROR
arg	26:27	26:33	8	ENOMEM
water	26:27	0:0	9	ENOMEM
op	27:8	0:0	4	*
water	27:9	0:0	4	(
water	27:10	0:0	4	char
op	27:15	0:0	4	*
op	27:16	0:0	4	*
water	27:17	0:0	4	)
water	27:18	0:0	4	dst
op	27:22	0:0	4	=
water	27:24	0:0	4	str
water	27:27	0:0	4	;
water	28:4	0:0	4	}
else	28:6	30:4	2
stmts	28:11	30:4	3	
if	28:11	30:4	4	(po -> flags & OPT_BOOL || po -> flags & OPT_INT)
cond	28:15	28:51	5	po -> flags & OPT_BOOL || po -> flags & OPT_INT
water	28:15	0:0	6	po
op	28:17	0:0	6	->
water	28:19	0:0	6	flags
op	28:25	0:0	6	&
water	28:27	0:0	6	OPT_BOOL
op	28:36	0:0	6	||
water	28:39	0:0	6	po
op	28:41	0:0	6	->
water	28:43	0:0	6	flags
op	28:49	0:0	6	&
water	28:51	0:0	6	OPT_INT
stmts	28:60	30:4	5	
water	28:60	0:0	6	{
op	29:8	0:0	6	*
water	29:9	0:0	6	(
water	29:10	0:0	6	int
op	29:14	0:0	6	*
water	29:15	0:0	6	)
water	29:16	0:0	6	dst
op	29:20	0:0	6	=
call	29:22	29:79	6	parse_number_or_die
arg	29:42	29:45	7	opt
water	29:42	0:0	8	opt
arg	29:47	29:50	7	arg
water	29:47	0:0	8	arg
arg	29:52	29:61	7	OPT_INT64
water	29:52	0:0	8	OPT_INT64
arg	29:63	29:70	7	INT_MIN
water	29:63	0:0	8	INT_MIN
arg	29:72	29:79	7	INT_MAX
water	29:72	0:0	8	INT_MAX
water	29:80	0:0	6	;
water	30:4	0:0	6	}
else	30:6	32:4	2
stmts	30:11	32:4	3	
if	30:11	32:4	4	(po -> flags & OPT_INT64)
cond	30:15	30:27	5	po -> flags & OPT_INT64
water	30:15	0:0	6	po
op	30:17	0:0	6	->
water	30:19	0:0	6	flags
op	30:25	0:0	6	&
water	30:27	0:0	6	OPT_INT64
stmts	30:38	32:4	5	
water	30:38	0:0	6	{
op	31:8	0:0	6	*
water	31:9	0:0	6	(
water	31:10	0:0	6	int64_t
op	31:18	0:0	6	*
water	31:19	0:0	6	)
water	31:20	0:0	6	dst
op	31:24	0:0	6	=
call	31:26	31:87	6	parse_number_or_die
arg	31:46	31:49	7	opt
water	31:46	0:0	8	opt
arg	31:51	31:54	7	arg
water	31:51	0:0	8	arg
arg	31:56	31:65	7	OPT_INT64
water	31:56	0:0	8	OPT_INT64
arg	31:67	31:76	7	INT64_MIN
water	31:67	0:0	8	INT64_MIN
arg	31:78	31:87	7	INT64_MAX
water	31:78	0:0	8	INT64_MAX
water	31:88	0:0	6	;
water	32:4	0:0	6	}
else	32:6	34:4	2
stmts	32:11	34:4	3	
if	32:11	34:4	4	(po -> flags & OPT_TIME)
cond	32:15	32:27	5	po -> flags & OPT_TIME
water	32:15	0:0	6	po
op	32:17	0:0	6	->
water	32:19	0:0	6	flags
op	32:25	0:0	6	&
water	32:27	0:0	6	OPT_TIME
stmts	32:37	34:4	5	
water	32:37	0:0	6	{
op	33:8	0:0	6	*
water	33:9	0:0	6	(
water	33:10	0:0	6	int64_t
op	33:18	0:0	6	*
water	33:19	0:0	6	)
water	33:20	0:0	6	dst
op	33:24	0:0	6	=
call	33:26	33:55	6	parse_time_or_die
arg	33:44	33:47	7	opt
water	33:44	0:0	8	opt
arg	33:49	33:52	7	arg
water	33:49	0:0	8	arg
arg	33:54	33:55	7	1
water	33:54	0:0	8	1
water	33:56	0:0	6	;
water	34:4	0:0	6	}
else	34:6	36:4	2
stmts	34:11	36:4	3	
if	34:11	36:4	4	(po -> flags & OPT_FLOAT)
cond	34:15	34:27	5	po -> flags & OPT_FLOAT
water	34:15	0:0	6	po
op	34:17	0:0	6	->
water	34:19	0:0	6	flags
op	34:25	0:0	6	&
water	34:27	0:0	6	OPT_FLOAT
stmts	34:38	36:4	5	
water	34:38	0:0	6	{
op	35:8	0:0	6	*
water	35:9	0:0	6	(
water	35:10	0:0	6	float
op	35:16	0:0	6	*
water	35:17	0:0	6	)
water	35:18	0:0	6	dst
op	35:22	0:0	6	=
call	35:24	35:84	6	parse_number_or_die
arg	35:44	35:47	7	opt
water	35:44	0:0	8	opt
arg	35:49	35:52	7	arg
water	35:49	0:0	8	arg
arg	35:54	35:63	7	OPT_FLOAT
water	35:54	0:0	8	OPT_FLOAT
arg	35:65	35:74	7	-INFINITY
op	35:65	0:0	8	-
water	35:66	0:0	8	INFINITY
arg	35:76	35:84	7	INFINITY
water	35:76	0:0	8	INFINITY
water	35:85	0:0	6	;
water	36:4	0:0	6	}
else	36:6	38:4	2
stmts	36:11	38:4	3	
if	36:11	38:4	4	(po -> flags & OPT_DOUBLE)
cond	36:15	36:27	5	po -> flags & OPT_DOUBLE
water	36:15	0:0	6	po
op	36:17	0:0	6	->
water	36:19	0:0	6	flags
op	36:25	0:0	6	&
water	36:27	0:0	6	OPT_DOUBLE
stmts	36:39	38:4	5	
water	36:39	0:0	6	{
op	37:8	0:0	6	*
water	37:9	0:0	6	(
water	37:10	0:0	6	double
op	37:17	0:0	6	*
water	37:18	0:0	6	)
water	37:19	0:0	6	dst
op	37:23	0:0	6	=
call	37:25	37:86	6	parse_number_or_die
arg	37:45	37:48	7	opt
water	37:45	0:0	8	opt
arg	37:50	37:53	7	arg
water	37:50	0:0	8	arg
arg	37:55	37:65	7	OPT_DOUBLE
water	37:55	0:0	8	OPT_DOUBLE
arg	37:67	37:76	7	-INFINITY
op	37:67	0:0	8	-
water	37:68	0:0	8	INFINITY
arg	37:78	37:86	7	INFINITY
water	37:78	0:0	8	INFINITY
water	37:87	0:0	6	;
water	38:4	0:0	6	}
else	38:6	46:4	2
stmts	38:11	46:4	3	
if	38:11	46:4	4	(po -> u . func_arg)
cond	38:15	38:21	5	po -> u . func_arg
water	38:15	0:0	6	po
op	38:17	0:0	6	->
water	38:19	0:0	6	u
op	38:20	0:0	6	.
water	38:21	0:0	6	func_arg
stmts	38:31	46:4	5	
water	38:31	0:0	6	{
decl	39:8	39:50	6	int	ret
op	39:16	0:0	6	=
call	39:18	39:49	7	po->u.func_arg
arg	39:33	39:39	8	optctx
water	39:33	0:0	9	optctx
arg	39:41	39:44	8	opt
water	39:41	0:0	9	opt
arg	39:46	39:49	8	arg
water	39:46	0:0	9	arg
if	40:8	45:8	6	(ret < 0)
cond	40:12	40:18	7	ret < 0
water	40:12	0:0	8	ret
op	40:16	0:0	8	<
water	40:18	0:0	8	0
stmts	40:21	45:8	7	
water	40:21	0:0	8	{
call	41:12	43:44	8	av_log
arg	41:19	41:23	9	NULL
water	41:19	0:0	10	NULL
arg	41:25	41:37	9	AV_LOG_ERROR
water	41:25	0:0	10	AV_LOG_ERROR
arg	42:19	42:67	9	"Failed to set value '%s' for option '%s': %s\n"
water	42:19	0:0	10	"Failed to set value '%s' for option '%s': %s\n"
arg	43:19	43:22	9	arg
water	43:19	0:0	10	arg
arg	43:24	43:27	9	opt
water	43:24	0:0	10	opt
arg	43:29	43:44	9	av_err2str(ret)
call	43:29	43:43	10	av_err2str
arg	43:40	43:43	11	ret
water	43:40	0:0	12	ret
water	43:45	0:0	8	;
return	44:12	44:22	8	ret
water	44:19	0:0	9	ret
water	45:8	0:0	8	}
water	46:4	0:0	6	}
if	47:4	48:23	2	(po -> flags & OPT_EXIT)
cond	47:8	47:20	3	po -> flags & OPT_EXIT
water	47:8	0:0	4	po
op	47:10	0:0	4	->
water	47:12	0:0	4	flags
op	47:18	0:0	4	&
water	47:20	0:0	4	OPT_EXIT
stmts	48:8	48:23	3	
call	48:8	48:22	4	exit_program
arg	48:21	48:22	5	0
water	48:21	0:0	6	0
water	48:23	0:0	4	;
return	49:4	49:12	2	0
water	49:11	0:0	3	0
