func	1:15	79:0	0	int	init
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
stmnts	0:0	78:12	1	
decl	3:4	3:11	2	int	err
decl	4:4	4:34	2	DrawTextContext	*s
op	4:23	0:0	2	=
water	4:25	0:0	2	ctx
op	4:28	0:0	2	->
water	4:30	0:0	2	priv
decl	5:4	5:16	2	Glyph	*glyph
if	6:4	9:4	2	(! s -> fontfile && ! CONFIG_LIBFONTCONFIG)
cond	6:8	6:25	3	! s -> fontfile && ! CONFIG_LIBFONTCONFIG
op	6:8	0:0	4	!
water	6:9	0:0	4	s
op	6:10	0:0	4	->
water	6:12	0:0	4	fontfile
op	6:21	0:0	4	&&
op	6:24	0:0	4	!
water	6:25	0:0	4	CONFIG_LIBFONTCONFIG
stmts	6:47	9:4	3	
water	6:47	0:0	4	{
call	7:8	7:63	4	av_log
arg	7:15	7:18	5	ctx
water	7:15	0:0	6	ctx
arg	7:20	7:32	5	AV_LOG_ERROR
water	7:20	0:0	6	AV_LOG_ERROR
arg	7:34	7:63	5	"No font filename provided\n"
water	7:34	0:0	6	"No font filename provided\n"
water	7:64	0:0	4	;
return	8:8	8:30	4	AVERROR(EINVAL)
call	8:15	8:29	5	AVERROR
arg	8:23	8:29	6	EINVAL
water	8:23	0:0	7	EINVAL
water	9:4	0:0	4	}
if	10:4	18:4	2	(s -> textfile)
cond	10:8	10:11	3	s -> textfile
water	10:8	0:0	4	s
op	10:9	0:0	4	->
water	10:11	0:0	4	textfile
stmts	10:21	18:4	3	
water	10:21	0:0	4	{
if	11:8	15:8	4	(s -> text)
cond	11:12	11:15	5	s -> text
water	11:12	0:0	6	s
op	11:13	0:0	6	->
water	11:15	0:0	6	text
stmts	11:21	15:8	5	
water	11:21	0:0	6	{
call	12:12	13:80	6	av_log
arg	12:19	12:22	7	ctx
water	12:19	0:0	8	ctx
arg	12:24	12:36	7	AV_LOG_ERROR
water	12:24	0:0	8	AV_LOG_ERROR
arg	13:19	13:80	7	"Both text and text file provided. Please provide only one\n"
water	13:19	0:0	8	"Both text and text file provided. Please provide only one\n"
water	13:81	0:0	6	;
return	14:12	14:34	6	AVERROR(EINVAL)
call	14:19	14:33	7	AVERROR
arg	14:27	14:33	8	EINVAL
water	14:27	0:0	9	EINVAL
water	15:8	0:0	6	}
if	16:8	17:22	4	(( err =load_textfile (ctx ) ) < 0)
cond	16:12	16:41	5	( err =load_textfile (ctx ) ) < 0
water	16:12	0:0	6	(
water	16:13	0:0	6	err
op	16:17	0:0	6	=
call	16:19	16:36	6	load_textfile
arg	16:33	16:36	7	ctx
water	16:33	0:0	8	ctx
water	16:37	0:0	6	)
op	16:39	0:0	6	<
water	16:41	0:0	6	0
stmts	17:12	17:22	5	
return	17:12	17:22	6	err
water	17:19	0:0	7	err
water	18:4	0:0	4	}
if	20:4	22:22	2	(s -> text_shaping)
cond	20:8	20:11	3	s -> text_shaping
water	20:8	0:0	4	s
op	20:9	0:0	4	->
water	20:11	0:0	4	text_shaping
stmts	21:8	22:22	3	
if	21:8	22:22	4	(( err =shape_text (ctx ) ) < 0)
cond	21:12	21:38	5	( err =shape_text (ctx ) ) < 0
water	21:12	0:0	6	(
water	21:13	0:0	6	err
op	21:17	0:0	6	=
call	21:19	21:33	6	shape_text
arg	21:30	21:33	7	ctx
water	21:30	0:0	8	ctx
water	21:34	0:0	6	)
op	21:36	0:0	6	<
water	21:38	0:0	6	0
stmts	22:12	22:22	5	
return	22:12	22:22	6	err
water	22:19	0:0	7	err
if	24:4	25:58	2	(s -> reload && ! s -> textfile)
cond	24:8	24:25	3	s -> reload && ! s -> textfile
water	24:8	0:0	4	s
op	24:9	0:0	4	->
water	24:11	0:0	4	reload
op	24:18	0:0	4	&&
op	24:21	0:0	4	!
water	24:22	0:0	4	s
op	24:23	0:0	4	->
water	24:25	0:0	4	textfile
stmts	25:8	25:58	3	
call	25:8	25:57	4	av_log
arg	25:15	25:18	5	ctx
water	25:15	0:0	6	ctx
arg	25:20	25:34	5	AV_LOG_WARNING
water	25:20	0:0	6	AV_LOG_WARNING
arg	25:36	25:57	5	"No file to reload\n"
water	25:36	0:0	6	"No file to reload\n"
water	25:58	0:0	4	;
if	26:4	35:4	2	(s -> tc_opt_string)
cond	26:8	26:11	3	s -> tc_opt_string
water	26:8	0:0	4	s
op	26:9	0:0	4	->
water	26:11	0:0	4	tc_opt_string
stmts	26:26	35:4	3	
water	26:26	0:0	4	{
decl	27:8	28:69	4	int	ret
op	27:16	0:0	4	=
call	27:18	28:68	5	av_timecode_init_from_string
arg	27:47	27:53	6	&s->tc
op	27:47	0:0	7	&
water	27:48	0:0	7	s
op	27:49	0:0	7	->
water	27:51	0:0	7	tc
arg	27:55	27:65	6	s->tc_rate
water	27:55	0:0	7	s
op	27:56	0:0	7	->
water	27:58	0:0	7	tc_rate
arg	28:47	28:63	6	s->tc_opt_string
water	28:47	0:0	7	s
op	28:48	0:0	7	->
water	28:50	0:0	7	tc_opt_string
arg	28:65	28:68	6	ctx
water	28:65	0:0	7	ctx
if	29:8	30:22	4	(ret < 0)
cond	29:12	29:18	5	ret < 0
water	29:12	0:0	6	ret
op	29:16	0:0	6	<
water	29:18	0:0	6	0
stmts	30:12	30:22	5	
return	30:12	30:22	6	ret
water	30:19	0:0	7	ret
if	31:8	32:54	4	(s -> tc24hmax)
cond	31:12	31:15	5	s -> tc24hmax
water	31:12	0:0	6	s
op	31:13	0:0	6	->
water	31:15	0:0	6	tc24hmax
stmts	32:12	32:54	5	
water	32:12	0:0	6	s
op	32:13	0:0	6	->
water	32:15	0:0	6	tc
op	32:17	0:0	6	.
water	32:18	0:0	6	flags
op	32:24	0:0	6	|=
water	32:27	0:0	6	AV_TIMECODE_FLAG_24HOURSMAX
water	32:54	0:0	6	;
if	33:8	34:35	4	(! s -> text)
cond	33:12	33:16	5	! s -> text
op	33:12	0:0	6	!
water	33:13	0:0	6	s
op	33:14	0:0	6	->
water	33:16	0:0	6	text
stmts	34:12	34:35	5	
water	34:12	0:0	6	s
op	34:13	0:0	6	->
water	34:15	0:0	6	text
op	34:20	0:0	6	=
call	34:22	34:34	6	av_strdup
arg	34:32	34:34	7	""
water	34:32	0:0	8	""
water	34:35	0:0	6	;
water	35:4	0:0	4	}
if	36:4	40:4	2	(! s -> text)
cond	36:8	36:12	3	! s -> text
op	36:8	0:0	4	!
water	36:9	0:0	4	s
op	36:10	0:0	4	->
water	36:12	0:0	4	text
stmts	36:18	40:4	3	
water	36:18	0:0	4	{
call	37:8	38:75	4	av_log
arg	37:15	37:18	5	ctx
water	37:15	0:0	6	ctx
arg	37:20	37:32	5	AV_LOG_ERROR
water	37:20	0:0	6	AV_LOG_ERROR
arg	38:15	38:75	5	"Either text, a valid file or a timecode must be provided\n"
water	38:15	0:0	6	"Either text, a valid file or a timecode must be provided\n"
water	38:76	0:0	4	;
return	39:8	39:30	4	AVERROR(EINVAL)
call	39:15	39:29	5	AVERROR
arg	39:23	39:29	6	EINVAL
water	39:23	0:0	7	EINVAL
water	40:4	0:0	4	}
if	41:4	45:4	2	(( err =FT_Init_FreeType (& ( s -> library ) ) ))
cond	41:8	41:46	3	( err =FT_Init_FreeType (& ( s -> library ) ) )
water	41:8	0:0	4	(
water	41:9	0:0	4	err
op	41:13	0:0	4	=
call	41:15	41:45	4	FT_Init_FreeType
arg	41:32	41:45	5	&(s->library)
op	41:32	0:0	6	&
water	41:33	0:0	6	(
water	41:34	0:0	6	s
op	41:35	0:0	6	->
water	41:37	0:0	6	library
water	41:44	0:0	6	)
water	41:46	0:0	4	)
stmts	41:49	45:4	3	
water	41:49	0:0	4	{
call	42:8	43:62	4	av_log
arg	42:15	42:18	5	ctx
water	42:15	0:0	6	ctx
arg	42:20	42:32	5	AV_LOG_ERROR
water	42:20	0:0	6	AV_LOG_ERROR
arg	43:15	43:46	5	"Could not load FreeType: %s\n"
water	43:15	0:0	6	"Could not load FreeType: %s\n"
arg	43:48	43:62	5	FT_ERRMSG(err)
call	43:48	43:61	6	FT_ERRMSG
arg	43:58	43:61	7	err
water	43:58	0:0	8	err
water	43:63	0:0	4	;
return	44:8	44:30	4	AVERROR(EINVAL)
call	44:15	44:29	5	AVERROR
arg	44:23	44:29	6	EINVAL
water	44:23	0:0	7	EINVAL
water	45:4	0:0	4	}
water	46:4	0:0	2	err
op	46:8	0:0	2	=
call	46:10	46:23	2	load_font
arg	46:20	46:23	3	ctx
water	46:20	0:0	4	ctx
water	46:24	0:0	2	;
if	47:4	48:18	2	(err)
cond	47:8	47:8	3	err
water	47:8	0:0	4	err
stmts	48:8	48:18	3	
return	48:8	48:18	4	err
water	48:15	0:0	5	err
if	49:4	50:24	2	(! s -> fontsize)
cond	49:8	49:12	3	! s -> fontsize
op	49:8	0:0	4	!
water	49:9	0:0	4	s
op	49:10	0:0	4	->
water	49:12	0:0	4	fontsize
stmts	50:8	50:24	3	
water	50:8	0:0	4	s
op	50:9	0:0	4	->
water	50:11	0:0	4	fontsize
op	50:20	0:0	4	=
water	50:22	0:0	4	16
water	50:24	0:0	4	;
if	51:4	55:4	2	(( err =FT_Set_Pixel_Sizes (s -> face ,0 ,s -> fontsize ) ))
cond	51:8	51:58	3	( err =FT_Set_Pixel_Sizes (s -> face ,0 ,s -> fontsize ) )
water	51:8	0:0	4	(
water	51:9	0:0	4	err
op	51:13	0:0	4	=
call	51:15	51:57	4	FT_Set_Pixel_Sizes
arg	51:34	51:41	5	s->face
water	51:34	0:0	6	s
op	51:35	0:0	6	->
water	51:37	0:0	6	face
arg	51:43	51:44	5	0
water	51:43	0:0	6	0
arg	51:46	51:57	5	s->fontsize
water	51:46	0:0	6	s
op	51:47	0:0	6	->
water	51:49	0:0	6	fontsize
water	51:58	0:0	4	)
stmts	51:61	55:4	3	
water	51:61	0:0	4	{
call	52:8	53:42	4	av_log
arg	52:15	52:18	5	ctx
water	52:15	0:0	6	ctx
arg	52:20	52:32	5	AV_LOG_ERROR
water	52:20	0:0	6	AV_LOG_ERROR
arg	52:34	52:78	5	"Could not set font size to %d pixels: %s\n"
water	52:34	0:0	6	"Could not set font size to %d pixels: %s\n"
arg	53:15	53:26	5	s->fontsize
water	53:15	0:0	6	s
op	53:16	0:0	6	->
water	53:18	0:0	6	fontsize
arg	53:28	53:42	5	FT_ERRMSG(err)
call	53:28	53:41	6	FT_ERRMSG
arg	53:38	53:41	7	err
water	53:38	0:0	8	err
water	53:43	0:0	4	;
return	54:8	54:30	4	AVERROR(EINVAL)
call	54:15	54:29	5	AVERROR
arg	54:23	54:29	6	EINVAL
water	54:23	0:0	7	EINVAL
water	55:4	0:0	4	}
if	56:4	63:4	2	(s -> borderw)
cond	56:8	56:11	3	s -> borderw
water	56:8	0:0	4	s
op	56:9	0:0	4	->
water	56:11	0:0	4	borderw
stmts	56:20	63:4	3	
water	56:20	0:0	4	{
if	57:8	60:8	4	(FT_Stroker_New (s -> library ,& s -> stroker ))
cond	57:12	57:50	5	FT_Stroker_New (s -> library ,& s -> stroker )
call	57:12	57:50	6	FT_Stroker_New
arg	57:27	57:37	7	s->library
water	57:27	0:0	8	s
op	57:28	0:0	8	->
water	57:30	0:0	8	library
arg	57:39	57:50	7	&s->stroker
op	57:39	0:0	8	&
water	57:40	0:0	8	s
op	57:41	0:0	8	->
water	57:43	0:0	8	stroker
stmts	57:53	60:8	5	
water	57:53	0:0	6	{
call	58:12	58:67	6	av_log
arg	58:19	58:22	7	ctx
water	58:19	0:0	8	ctx
arg	58:24	58:36	7	AV_LOG_ERROR
water	58:24	0:0	8	AV_LOG_ERROR
arg	58:38	58:67	7	"Coult not init FT stroker\n"
water	58:38	0:0	8	"Coult not init FT stroker\n"
water	58:68	0:0	6	;
return	59:12	59:35	6	AVERROR_EXTERNAL
water	59:19	0:0	7	AVERROR_EXTERNAL
water	60:8	0:0	6	}
call	61:8	62:51	4	FT_Stroker_Set
arg	61:23	61:33	5	s->stroker
water	61:23	0:0	6	s
op	61:24	0:0	6	->
water	61:26	0:0	6	stroker
arg	61:35	61:50	5	s->borderw<<6
water	61:35	0:0	6	s
op	61:36	0:0	6	->
water	61:38	0:0	6	borderw
op	61:46	0:0	6	<<
water	61:49	0:0	6	6
arg	61:52	61:76	5	FT_STROKER_LINECAP_ROUND
water	61:52	0:0	6	FT_STROKER_LINECAP_ROUND
arg	62:23	62:48	5	FT_STROKER_LINEJOIN_ROUND
water	62:23	0:0	6	FT_STROKER_LINEJOIN_ROUND
arg	62:50	62:51	5	0
water	62:50	0:0	6	0
water	62:52	0:0	4	;
water	63:4	0:0	4	}
water	64:4	0:0	2	s
op	64:5	0:0	2	->
water	64:7	0:0	2	use_kerning
op	64:19	0:0	2	=
call	64:21	64:43	2	FT_HAS_KERNING
arg	64:36	64:43	3	s->face
water	64:36	0:0	4	s
op	64:37	0:0	4	->
water	64:39	0:0	4	face
water	64:44	0:0	2	;
call	66:4	66:27	2	load_glyph
arg	66:15	66:18	3	ctx
water	66:15	0:0	4	ctx
arg	66:20	66:24	3	NULL
water	66:20	0:0	4	NULL
arg	66:26	66:27	3	0
water	66:26	0:0	4	0
water	66:28	0:0	2	;
if	68:4	71:4	2	(( err =load_glyph (ctx ,& glyph ,' ' ) ) < 0)
cond	68:8	68:47	3	( err =load_glyph (ctx ,& glyph ,' ' ) ) < 0
water	68:8	0:0	4	(
water	68:9	0:0	4	err
op	68:13	0:0	4	=
call	68:15	68:42	4	load_glyph
arg	68:26	68:29	5	ctx
water	68:26	0:0	6	ctx
arg	68:31	68:37	5	&glyph
op	68:31	0:0	6	&
water	68:32	0:0	6	glyph
arg	68:39	68:42	5	' '
water	68:39	0:0	6	' '
water	68:43	0:0	4	)
op	68:45	0:0	4	<
water	68:47	0:0	4	0
stmts	68:50	71:4	3	
water	68:50	0:0	4	{
call	69:8	69:60	4	av_log
arg	69:15	69:18	5	ctx
water	69:15	0:0	6	ctx
arg	69:20	69:32	5	AV_LOG_ERROR
water	69:20	0:0	6	AV_LOG_ERROR
arg	69:34	69:60	5	"Could not set tabsize.\n"
water	69:34	0:0	6	"Could not set tabsize.\n"
water	69:61	0:0	4	;
return	70:8	70:18	4	err
water	70:15	0:0	5	err
water	71:4	0:0	4	}
water	72:4	0:0	2	s
op	72:5	0:0	2	->
water	72:7	0:0	2	tabsize
op	72:15	0:0	2	*=
water	72:18	0:0	2	glyph
op	72:23	0:0	2	->
water	72:25	0:0	2	advance
water	72:32	0:0	2	;
if	73:4	75:74	2	(s -> exp_mode == EXP_STRFTIME && (strchr (s -> text ,'%' ) ||strchr (s -> text ,'\\' ) ))
cond	73:8	74:54	3	s -> exp_mode == EXP_STRFTIME && (strchr (s -> text ,'%' ) ||strchr (s -> text ,'\\' ) )
water	73:8	0:0	4	s
op	73:9	0:0	4	->
water	73:11	0:0	4	exp_mode
op	73:20	0:0	4	==
water	73:23	0:0	4	EXP_STRFTIME
op	73:36	0:0	4	&&
water	74:8	0:0	4	(
call	74:9	74:28	4	strchr
arg	74:16	74:23	5	s->text
water	74:16	0:0	6	s
op	74:17	0:0	6	->
water	74:19	0:0	6	text
arg	74:25	74:28	5	'%'
water	74:25	0:0	6	'%'
op	74:30	0:0	4	||
call	74:33	74:53	4	strchr
arg	74:40	74:47	5	s->text
water	74:40	0:0	6	s
op	74:41	0:0	6	->
water	74:43	0:0	6	text
arg	74:49	74:53	5	'\\'
water	74:49	0:0	6	'\\'
water	74:54	0:0	4	)
stmts	75:8	75:74	3	
call	75:8	75:73	4	av_log
arg	75:15	75:18	5	ctx
water	75:15	0:0	6	ctx
arg	75:20	75:34	5	AV_LOG_WARNING
water	75:20	0:0	6	AV_LOG_WARNING
arg	75:36	75:73	5	"expansion=strftime is deprecated.\n"
water	75:36	0:0	6	"expansion=strftime is deprecated.\n"
water	75:74	0:0	4	;
call	76:4	76:65	2	av_bprint_init
arg	76:19	76:36	3	&s->expanded_text
op	76:19	0:0	4	&
water	76:20	0:0	4	s
op	76:21	0:0	4	->
water	76:23	0:0	4	expanded_text
arg	76:38	76:39	3	0
water	76:38	0:0	4	0
arg	76:41	76:65	3	AV_BPRINT_SIZE_UNLIMITED
water	76:41	0:0	4	AV_BPRINT_SIZE_UNLIMITED
water	76:66	0:0	2	;
call	77:4	77:70	2	av_bprint_init
arg	77:19	77:41	3	&s->expanded_fontcolor
op	77:19	0:0	4	&
water	77:20	0:0	4	s
op	77:21	0:0	4	->
water	77:23	0:0	4	expanded_fontcolor
arg	77:43	77:44	3	0
water	77:43	0:0	4	0
arg	77:46	77:70	3	AV_BPRINT_SIZE_UNLIMITED
water	77:46	0:0	4	AV_BPRINT_SIZE_UNLIMITED
water	77:71	0:0	2	;
return	78:4	78:12	2	0
water	78:11	0:0	3	0
