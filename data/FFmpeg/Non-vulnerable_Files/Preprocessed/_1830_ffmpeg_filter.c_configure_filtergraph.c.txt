func	1:0	149:0	0	int	configure_filtergraph
params	1:25	0:0	1	
param	1:26	1:41	2	FilterGraph *	fg
stmnts	0:0	148:14	1	
decl	3:4	3:41	2	AVFilterInOut	*inputs
water	3:25	0:0	2	,
decl	3:4	3:41	2	AVFilterInOut	*outputs
water	3:35	0:0	2	,
decl	3:4	3:41	2	AVFilterInOut	*cur
decl	4:4	4:50	2	int	ret
water	4:11	0:0	2	,
decl	4:4	4:50	2	int	i
water	4:14	0:0	2	,
decl	4:4	4:50	2	int	simple
op	4:23	0:0	2	=
call	4:25	4:49	3	filtergraph_is_simple
arg	4:47	4:49	4	fg
water	4:47	0:0	5	fg
decl	5:4	6:52	2	const char	*graph_desc
op	5:27	0:0	2	=
water	5:29	0:0	2	simple
water	5:36	0:0	2	?
water	5:38	0:0	2	fg
op	5:40	0:0	2	->
water	5:42	0:0	2	outputs
op	5:49	0:0	2	[
water	5:50	0:0	2	0
op	5:51	0:0	2	]
op	5:52	0:0	2	->
water	5:54	0:0	2	ost
op	5:57	0:0	2	->
water	5:59	0:0	2	avfilter
water	5:68	0:0	2	:
water	6:38	0:0	2	fg
op	6:40	0:0	2	->
water	6:42	0:0	2	graph_desc
call	7:4	7:26	2	cleanup_filtergraph
arg	7:24	7:26	3	fg
water	7:24	0:0	4	fg
water	7:27	0:0	2	;
if	8:4	9:30	2	(! ( fg -> graph =avfilter_graph_alloc ( ) ))
cond	8:8	8:44	3	! ( fg -> graph =avfilter_graph_alloc ( ) )
op	8:8	0:0	4	!
water	8:9	0:0	4	(
water	8:10	0:0	4	fg
op	8:12	0:0	4	->
water	8:14	0:0	4	graph
op	8:20	0:0	4	=
call	8:22	8:43	4	avfilter_graph_alloc
water	8:44	0:0	4	)
stmts	9:8	9:30	3	
return	9:8	9:30	4	AVERROR(ENOMEM)
call	9:15	9:29	5	AVERROR
arg	9:23	9:29	6	ENOMEM
water	9:23	0:0	7	ENOMEM
if	10:4	41:4	2	(simple)
cond	10:8	10:8	3	simple
water	10:8	0:0	4	simple
stmts	10:16	41:4	3	
water	10:16	0:0	4	{
decl	11:8	11:47	4	OutputStream	*ost
op	11:26	0:0	4	=
water	11:28	0:0	4	fg
op	11:30	0:0	4	->
water	11:32	0:0	4	outputs
op	11:39	0:0	4	[
water	11:40	0:0	4	0
op	11:41	0:0	4	]
op	11:42	0:0	4	->
water	11:44	0:0	4	ost
decl	12:8	12:22	4	char	args[512]
decl	13:8	13:35	4	AVDictionaryEntry	*e
op	13:29	0:0	4	=
water	13:31	0:0	4	NULL
water	14:8	0:0	4	fg
op	14:10	0:0	4	->
water	14:12	0:0	4	graph
op	14:17	0:0	4	->
water	14:19	0:0	4	nb_threads
op	14:30	0:0	4	=
water	14:32	0:0	4	filter_nbthreads
water	14:48	0:0	4	;
water	15:8	0:0	4	args
op	15:12	0:0	4	[
water	15:13	0:0	4	0
op	15:14	0:0	4	]
op	15:16	0:0	4	=
water	15:18	0:0	4	0
water	15:19	0:0	4	;
while	16:8	19:8	4	(( e =av_dict_get (ost -> sws_dict ,"" ,e ,AV_DICT_IGNORE_SUFFIX ) ))
cond	16:15	17:54	5	( e =av_dict_get (ost -> sws_dict ,"" ,e ,AV_DICT_IGNORE_SUFFIX ) )
water	16:15	0:0	6	(
water	16:16	0:0	6	e
op	16:18	0:0	6	=
call	16:20	17:53	6	av_dict_get
arg	16:32	16:45	7	ost->sws_dict
water	16:32	0:0	8	ost
op	16:35	0:0	8	->
water	16:37	0:0	8	sws_dict
arg	16:47	16:49	7	""
water	16:47	0:0	8	""
arg	16:51	16:52	7	e
water	16:51	0:0	8	e
arg	17:32	17:53	7	AV_DICT_IGNORE_SUFFIX
water	17:32	0:0	8	AV_DICT_IGNORE_SUFFIX
water	17:54	0:0	6	)
stmts	17:57	19:8	5	
water	17:57	0:0	6	{
call	18:12	18:70	6	av_strlcatf
arg	18:24	18:28	7	args
water	18:24	0:0	8	args
arg	18:30	18:42	7	sizeof(args)
op	18:30	0:0	8	sizeof
water	18:36	0:0	8	(
water	18:37	0:0	8	args
water	18:41	0:0	8	)
arg	18:44	18:52	7	"%s=%s:"
water	18:44	0:0	8	"%s=%s:"
arg	18:54	18:60	7	e->key
water	18:54	0:0	8	e
op	18:55	0:0	8	->
water	18:57	0:0	8	key
arg	18:62	18:70	7	e->value
water	18:62	0:0	8	e
op	18:63	0:0	8	->
water	18:65	0:0	8	value
water	18:71	0:0	6	;
water	19:8	0:0	6	}
if	20:8	21:36	4	(strlen (args ))
cond	20:12	20:23	5	strlen (args )
call	20:12	20:23	6	strlen
arg	20:19	20:23	7	args
water	20:19	0:0	8	args
stmts	21:12	21:36	5	
water	21:12	0:0	6	args
op	21:16	0:0	6	[
call	21:17	21:28	6	strlen
arg	21:24	21:28	7	args
water	21:24	0:0	8	args
op	21:29	0:0	6	-
water	21:30	0:0	6	1
op	21:31	0:0	6	]
op	21:33	0:0	6	=
water	21:35	0:0	6	0
water	21:36	0:0	6	;
water	22:8	0:0	4	fg
op	22:10	0:0	4	->
water	22:12	0:0	4	graph
op	22:17	0:0	4	->
water	22:19	0:0	4	scale_sws_opts
op	22:34	0:0	4	=
call	22:36	22:50	4	av_strdup
arg	22:46	22:50	5	args
water	22:46	0:0	6	args
water	22:51	0:0	4	;
water	23:8	0:0	4	args
op	23:12	0:0	4	[
water	23:13	0:0	4	0
op	23:14	0:0	4	]
op	23:16	0:0	4	=
water	23:18	0:0	4	0
water	23:19	0:0	4	;
while	24:8	27:8	4	(( e =av_dict_get (ost -> swr_opts ,"" ,e ,AV_DICT_IGNORE_SUFFIX ) ))
cond	24:15	25:54	5	( e =av_dict_get (ost -> swr_opts ,"" ,e ,AV_DICT_IGNORE_SUFFIX ) )
water	24:15	0:0	6	(
water	24:16	0:0	6	e
op	24:18	0:0	6	=
call	24:20	25:53	6	av_dict_get
arg	24:32	24:45	7	ost->swr_opts
water	24:32	0:0	8	ost
op	24:35	0:0	8	->
water	24:37	0:0	8	swr_opts
arg	24:47	24:49	7	""
water	24:47	0:0	8	""
arg	24:51	24:52	7	e
water	24:51	0:0	8	e
arg	25:32	25:53	7	AV_DICT_IGNORE_SUFFIX
water	25:32	0:0	8	AV_DICT_IGNORE_SUFFIX
water	25:54	0:0	6	)
stmts	25:57	27:8	5	
water	25:57	0:0	6	{
call	26:12	26:70	6	av_strlcatf
arg	26:24	26:28	7	args
water	26:24	0:0	8	args
arg	26:30	26:42	7	sizeof(args)
op	26:30	0:0	8	sizeof
water	26:36	0:0	8	(
water	26:37	0:0	8	args
water	26:41	0:0	8	)
arg	26:44	26:52	7	"%s=%s:"
water	26:44	0:0	8	"%s=%s:"
arg	26:54	26:60	7	e->key
water	26:54	0:0	8	e
op	26:55	0:0	8	->
water	26:57	0:0	8	key
arg	26:62	26:70	7	e->value
water	26:62	0:0	8	e
op	26:63	0:0	8	->
water	26:65	0:0	8	value
water	26:71	0:0	6	;
water	27:8	0:0	6	}
if	28:8	29:36	4	(strlen (args ))
cond	28:12	28:23	5	strlen (args )
call	28:12	28:23	6	strlen
arg	28:19	28:23	7	args
water	28:19	0:0	8	args
stmts	29:12	29:36	5	
water	29:12	0:0	6	args
op	29:16	0:0	6	[
call	29:17	29:28	6	strlen
arg	29:24	29:28	7	args
water	29:24	0:0	8	args
op	29:29	0:0	6	-
water	29:30	0:0	6	1
op	29:31	0:0	6	]
op	29:33	0:0	6	=
water	29:35	0:0	6	0
water	29:36	0:0	6	;
call	30:8	30:59	4	av_opt_set
arg	30:19	30:28	5	fg->graph
water	30:19	0:0	6	fg
op	30:21	0:0	6	->
water	30:23	0:0	6	graph
arg	30:30	30:50	5	"aresample_swr_opts"
water	30:30	0:0	6	"aresample_swr_opts"
arg	30:52	30:56	5	args
water	30:52	0:0	6	args
arg	30:58	30:59	5	0
water	30:58	0:0	6	0
water	30:60	0:0	4	;
water	31:8	0:0	4	args
op	31:12	0:0	4	[
water	31:13	0:0	4	0
op	31:14	0:0	4	]
op	31:16	0:0	4	=
water	31:18	0:0	4	'\0'
water	31:22	0:0	4	;
while	32:8	35:8	4	(( e =av_dict_get (fg -> outputs [ 0 ] -> ost -> resample_opts ,"" ,e ,AV_DICT_IGNORE_SUFFIX ) ))
cond	32:15	33:54	5	( e =av_dict_get (fg -> outputs [ 0 ] -> ost -> resample_opts ,"" ,e ,AV_DICT_IGNORE_SUFFIX ) )
water	32:15	0:0	6	(
water	32:16	0:0	6	e
op	32:18	0:0	6	=
call	32:20	33:53	6	av_dict_get
arg	32:32	32:66	7	fg->outputs[0]->ost->resample_opts
water	32:32	0:0	8	fg
op	32:34	0:0	8	->
water	32:36	0:0	8	outputs
op	32:43	0:0	8	[
water	32:44	0:0	8	0
op	32:45	0:0	8	]
op	32:46	0:0	8	->
water	32:48	0:0	8	ost
op	32:51	0:0	8	->
water	32:53	0:0	8	resample_opts
arg	32:68	32:70	7	""
water	32:68	0:0	8	""
arg	32:72	32:73	7	e
water	32:72	0:0	8	e
arg	33:32	33:53	7	AV_DICT_IGNORE_SUFFIX
water	33:32	0:0	8	AV_DICT_IGNORE_SUFFIX
water	33:54	0:0	6	)
stmts	33:57	35:8	5	
water	33:57	0:0	6	{
call	34:12	34:70	6	av_strlcatf
arg	34:24	34:28	7	args
water	34:24	0:0	8	args
arg	34:30	34:42	7	sizeof(args)
op	34:30	0:0	8	sizeof
water	34:36	0:0	8	(
water	34:37	0:0	8	args
water	34:41	0:0	8	)
arg	34:44	34:52	7	"%s=%s:"
water	34:44	0:0	8	"%s=%s:"
arg	34:54	34:60	7	e->key
water	34:54	0:0	8	e
op	34:55	0:0	8	->
water	34:57	0:0	8	key
arg	34:62	34:70	7	e->value
water	34:62	0:0	8	e
op	34:63	0:0	8	->
water	34:65	0:0	8	value
water	34:71	0:0	6	;
water	35:8	0:0	6	}
if	36:8	37:41	4	(strlen (args ))
cond	36:12	36:23	5	strlen (args )
call	36:12	36:23	6	strlen
arg	36:19	36:23	7	args
water	36:19	0:0	8	args
stmts	37:12	37:41	5	
water	37:12	0:0	6	args
op	37:16	0:0	6	[
call	37:17	37:28	6	strlen
arg	37:24	37:28	7	args
water	37:24	0:0	8	args
op	37:30	0:0	6	-
water	37:32	0:0	6	1
op	37:33	0:0	6	]
op	37:35	0:0	6	=
water	37:37	0:0	6	'\0'
water	37:41	0:0	6	;
water	38:8	0:0	4	e
op	38:10	0:0	4	=
call	38:12	38:61	4	av_dict_get
arg	38:24	38:41	5	ost->encoder_opts
water	38:24	0:0	6	ost
op	38:27	0:0	6	->
water	38:29	0:0	6	encoder_opts
arg	38:43	38:52	5	"threads"
water	38:43	0:0	6	"threads"
arg	38:54	38:58	5	NULL
water	38:54	0:0	6	NULL
arg	38:60	38:61	5	0
water	38:60	0:0	6	0
water	38:62	0:0	4	;
if	39:8	40:57	4	(e)
cond	39:12	39:12	5	e
water	39:12	0:0	6	e
stmts	40:12	40:57	5	
call	40:12	40:56	6	av_opt_set
arg	40:23	40:32	7	fg->graph
water	40:23	0:0	8	fg
op	40:25	0:0	8	->
water	40:27	0:0	8	graph
arg	40:34	40:43	7	"threads"
water	40:34	0:0	8	"threads"
arg	40:45	40:53	7	e->value
water	40:45	0:0	8	e
op	40:46	0:0	8	->
water	40:48	0:0	8	value
arg	40:55	40:56	7	0
water	40:55	0:0	8	0
water	40:57	0:0	6	;
water	41:4	0:0	4	}
else	41:6	43:4	2
stmts	41:11	43:4	3	
water	41:11	0:0	4	{
water	42:8	0:0	4	fg
op	42:10	0:0	4	->
water	42:12	0:0	4	graph
op	42:17	0:0	4	->
water	42:19	0:0	4	nb_threads
op	42:30	0:0	4	=
water	42:32	0:0	4	filter_complex_nbthreads
water	42:56	0:0	4	;
water	43:4	0:0	4	}
if	44:4	45:17	2	(( ret =avfilter_graph_parse2 (fg -> graph ,graph_desc ,& inputs ,& outputs ) ) < 0)
cond	44:8	44:82	3	( ret =avfilter_graph_parse2 (fg -> graph ,graph_desc ,& inputs ,& outputs ) ) < 0
water	44:8	0:0	4	(
water	44:9	0:0	4	ret
op	44:13	0:0	4	=
call	44:15	44:77	4	avfilter_graph_parse2
arg	44:37	44:46	5	fg->graph
water	44:37	0:0	6	fg
op	44:39	0:0	6	->
water	44:41	0:0	6	graph
arg	44:48	44:58	5	graph_desc
water	44:48	0:0	6	graph_desc
arg	44:60	44:67	5	&inputs
op	44:60	0:0	6	&
water	44:61	0:0	6	inputs
arg	44:69	44:77	5	&outputs
op	44:69	0:0	6	&
water	44:70	0:0	6	outputs
water	44:78	0:0	4	)
op	44:80	0:0	4	<
water	44:82	0:0	4	0
stmts	45:8	45:17	3	
goto	45:8	45:17	4	fail
water	45:13	0:0	5	fail
if	46:4	50:4	2	(hw_device_ctx)
cond	46:8	46:8	3	hw_device_ctx
water	46:8	0:0	4	hw_device_ctx
stmts	46:23	50:4	3	
water	46:23	0:0	4	{
for	47:8	49:8	4	(i = 0 ;i < fg -> graph -> nb_filters;i ++)
forinit	47:13	47:18	5	i = 0 ;
water	47:13	0:0	6	i
op	47:15	0:0	6	=
water	47:17	0:0	6	0
water	47:18	0:0	6	;
cond	47:20	47:35	5	i < fg -> graph -> nb_filters
water	47:20	0:0	6	i
op	47:22	0:0	6	<
water	47:24	0:0	6	fg
op	47:26	0:0	6	->
water	47:28	0:0	6	graph
op	47:33	0:0	6	->
water	47:35	0:0	6	nb_filters
forexpr	47:47	47:48	5	i ++
water	47:47	0:0	6	i
op	47:48	0:0	6	++
stmts	47:52	49:8	5	
water	47:52	0:0	6	{
water	48:12	0:0	6	fg
op	48:14	0:0	6	->
water	48:16	0:0	6	graph
op	48:21	0:0	6	->
water	48:23	0:0	6	filters
op	48:30	0:0	6	[
water	48:31	0:0	6	i
op	48:32	0:0	6	]
op	48:33	0:0	6	->
water	48:35	0:0	6	hw_device_ctx
op	48:49	0:0	6	=
call	48:51	48:78	6	av_buffer_ref
arg	48:65	48:78	7	hw_device_ctx
water	48:65	0:0	8	hw_device_ctx
water	48:79	0:0	6	;
water	49:8	0:0	6	}
water	50:4	0:0	4	}
if	51:4	75:4	2	(simple && ( ! inputs || inputs -> next || ! outputs || outputs -> next ))
cond	51:8	51:71	3	simple && ( ! inputs || inputs -> next || ! outputs || outputs -> next )
water	51:8	0:0	4	simple
op	51:15	0:0	4	&&
water	51:18	0:0	4	(
op	51:19	0:0	4	!
water	51:20	0:0	4	inputs
op	51:27	0:0	4	||
water	51:30	0:0	4	inputs
op	51:36	0:0	4	->
water	51:38	0:0	4	next
op	51:43	0:0	4	||
op	51:46	0:0	4	!
water	51:47	0:0	4	outputs
op	51:55	0:0	4	||
water	51:58	0:0	4	outputs
op	51:65	0:0	4	->
water	51:67	0:0	4	next
water	51:71	0:0	4	)
stmts	51:74	75:4	3	
water	51:74	0:0	4	{
decl	52:8	52:30	4	const char	*num_inputs
decl	53:8	53:31	4	const char	*num_outputs
if	54:8	56:8	4	(! outputs)
cond	54:12	54:13	5	! outputs
op	54:12	0:0	6	!
water	54:13	0:0	6	outputs
stmts	54:22	56:8	5	
water	54:22	0:0	6	{
water	55:12	0:0	6	num_outputs
op	55:24	0:0	6	=
water	55:26	0:0	6	"0"
water	55:29	0:0	6	;
water	56:8	0:0	6	}
else	56:10	58:8	4
stmts	56:15	58:8	5	
if	56:15	58:8	6	(outputs -> next)
cond	56:19	56:28	7	outputs -> next
water	56:19	0:0	8	outputs
op	56:26	0:0	8	->
water	56:28	0:0	8	next
stmts	56:34	58:8	7	
water	56:34	0:0	8	{
water	57:12	0:0	8	num_outputs
op	57:24	0:0	8	=
water	57:26	0:0	8	">1"
water	57:30	0:0	8	;
water	58:8	0:0	8	}
else	58:10	60:8	4
stmts	58:15	60:8	5	
water	58:15	0:0	6	{
water	59:12	0:0	6	num_outputs
op	59:24	0:0	6	=
water	59:26	0:0	6	"1"
water	59:29	0:0	6	;
water	60:8	0:0	6	}
if	61:8	63:8	4	(! inputs)
cond	61:12	61:13	5	! inputs
op	61:12	0:0	6	!
water	61:13	0:0	6	inputs
stmts	61:21	63:8	5	
water	61:21	0:0	6	{
water	62:12	0:0	6	num_inputs
op	62:23	0:0	6	=
water	62:25	0:0	6	"0"
water	62:28	0:0	6	;
water	63:8	0:0	6	}
else	63:10	65:8	4
stmts	63:15	65:8	5	
if	63:15	65:8	6	(inputs -> next)
cond	63:19	63:27	7	inputs -> next
water	63:19	0:0	8	inputs
op	63:25	0:0	8	->
water	63:27	0:0	8	next
stmts	63:33	65:8	7	
water	63:33	0:0	8	{
water	64:12	0:0	8	num_inputs
op	64:23	0:0	8	=
water	64:25	0:0	8	">1"
water	64:29	0:0	8	;
water	65:8	0:0	8	}
else	65:10	67:8	4
stmts	65:15	67:8	5	
water	65:15	0:0	6	{
water	66:12	0:0	6	num_inputs
op	66:23	0:0	6	=
water	66:25	0:0	6	"1"
water	66:28	0:0	6	;
water	67:8	0:0	6	}
call	68:8	72:50	4	av_log
arg	68:15	68:19	5	NULL
water	68:15	0:0	6	NULL
arg	68:21	68:33	5	AV_LOG_ERROR
water	68:21	0:0	6	AV_LOG_ERROR
arg	68:35	71:90	5	"Simple filtergraph '%s' was expected ""to have exactly 1 input and 1 output."" However, it had %s input(s) and %s output(s)."" Please adjust, or use a complex filtergraph (-filter_complex) instead.\n"
water	68:35	0:0	6	"Simple filtergraph '%s' was expected "
water	69:15	0:0	6	"to have exactly 1 input and 1 output."
water	70:15	0:0	6	" However, it had %s input(s) and %s output(s)."
water	71:15	0:0	6	" Please adjust, or use a complex filtergraph (-filter_complex) instead.\n"
arg	72:15	72:25	5	graph_desc
water	72:15	0:0	6	graph_desc
arg	72:27	72:37	5	num_inputs
water	72:27	0:0	6	num_inputs
arg	72:39	72:50	5	num_outputs
water	72:39	0:0	6	num_outputs
water	72:51	0:0	4	;
water	73:8	0:0	4	ret
op	73:12	0:0	4	=
call	73:14	73:28	4	AVERROR
arg	73:22	73:28	5	EINVAL
water	73:22	0:0	6	EINVAL
water	73:29	0:0	4	;
goto	74:8	74:17	4	fail
water	74:13	0:0	5	fail
water	75:4	0:0	4	}
for	76:4	81:8	2	(cur = inputs , i = 0 ;cur;cur = cur -> next , i ++)
forinit	76:9	76:28	3	cur = inputs , i = 0 ;
water	76:9	0:0	4	cur
op	76:13	0:0	4	=
water	76:15	0:0	4	inputs
water	76:21	0:0	4	,
water	76:23	0:0	4	i
op	76:25	0:0	4	=
water	76:27	0:0	4	0
water	76:28	0:0	4	;
cond	76:30	76:30	3	cur
water	76:30	0:0	4	cur
forexpr	76:35	76:53	3	cur = cur -> next , i ++
water	76:35	0:0	4	cur
op	76:39	0:0	4	=
water	76:41	0:0	4	cur
op	76:44	0:0	4	->
water	76:46	0:0	4	next
water	76:50	0:0	4	,
water	76:52	0:0	4	i
op	76:53	0:0	4	++
stmts	77:8	81:8	3	
if	77:8	81:8	4	(( ret =configure_input_filter (fg ,fg -> inputs [ i ] ,cur ) ) < 0)
cond	77:12	77:69	5	( ret =configure_input_filter (fg ,fg -> inputs [ i ] ,cur ) ) < 0
water	77:12	0:0	6	(
water	77:13	0:0	6	ret
op	77:17	0:0	6	=
call	77:19	77:64	6	configure_input_filter
arg	77:42	77:44	7	fg
water	77:42	0:0	8	fg
arg	77:46	77:59	7	fg->inputs[i]
water	77:46	0:0	8	fg
op	77:48	0:0	8	->
water	77:50	0:0	8	inputs
op	77:56	0:0	8	[
water	77:57	0:0	8	i
op	77:58	0:0	8	]
arg	77:61	77:64	7	cur
water	77:61	0:0	8	cur
water	77:65	0:0	6	)
op	77:67	0:0	6	<
water	77:69	0:0	6	0
stmts	77:72	81:8	5	
water	77:72	0:0	6	{
call	78:12	78:39	6	avfilter_inout_free
arg	78:32	78:39	7	&inputs
op	78:32	0:0	8	&
water	78:33	0:0	8	inputs
water	78:40	0:0	6	;
call	79:12	79:40	6	avfilter_inout_free
arg	79:32	79:40	7	&outputs
op	79:32	0:0	8	&
water	79:33	0:0	8	outputs
water	79:41	0:0	6	;
goto	80:12	80:21	6	fail
water	80:17	0:0	7	fail
water	81:8	0:0	6	}
call	82:4	82:31	2	avfilter_inout_free
arg	82:24	82:31	3	&inputs
op	82:24	0:0	4	&
water	82:25	0:0	4	inputs
water	82:32	0:0	2	;
for	83:4	84:56	2	(cur = outputs , i = 0 ;cur;cur = cur -> next , i ++)
forinit	83:9	83:29	3	cur = outputs , i = 0 ;
water	83:9	0:0	4	cur
op	83:13	0:0	4	=
water	83:15	0:0	4	outputs
water	83:22	0:0	4	,
water	83:24	0:0	4	i
op	83:26	0:0	4	=
water	83:28	0:0	4	0
water	83:29	0:0	4	;
cond	83:31	83:31	3	cur
water	83:31	0:0	4	cur
forexpr	83:36	83:54	3	cur = cur -> next , i ++
water	83:36	0:0	4	cur
op	83:40	0:0	4	=
water	83:42	0:0	4	cur
op	83:45	0:0	4	->
water	83:47	0:0	4	next
water	83:51	0:0	4	,
water	83:53	0:0	4	i
op	83:54	0:0	4	++
stmts	84:8	84:56	3	
call	84:8	84:55	4	configure_output_filter
arg	84:32	84:34	5	fg
water	84:32	0:0	6	fg
arg	84:36	84:50	5	fg->outputs[i]
water	84:36	0:0	6	fg
op	84:38	0:0	6	->
water	84:40	0:0	6	outputs
op	84:47	0:0	6	[
water	84:48	0:0	6	i
op	84:49	0:0	6	]
arg	84:52	84:55	5	cur
water	84:52	0:0	6	cur
water	84:56	0:0	4	;
call	85:4	85:32	2	avfilter_inout_free
arg	85:24	85:32	3	&outputs
op	85:24	0:0	4	&
water	85:25	0:0	4	outputs
water	85:33	0:0	2	;
if	86:4	87:17	2	(( ret =avfilter_graph_config (fg -> graph ,NULL ) ) < 0)
cond	86:8	86:57	3	( ret =avfilter_graph_config (fg -> graph ,NULL ) ) < 0
water	86:8	0:0	4	(
water	86:9	0:0	4	ret
op	86:13	0:0	4	=
call	86:15	86:52	4	avfilter_graph_config
arg	86:37	86:46	5	fg->graph
water	86:37	0:0	6	fg
op	86:39	0:0	6	->
water	86:41	0:0	6	graph
arg	86:48	86:52	5	NULL
water	86:48	0:0	6	NULL
water	86:53	0:0	4	)
op	86:55	0:0	4	<
water	86:57	0:0	4	0
stmts	87:8	87:17	3	
goto	87:8	87:17	4	fail
water	87:13	0:0	5	fail
for	90:4	98:4	2	(i = 0 ;i < fg -> nb_outputs;i ++)
forinit	90:9	90:14	3	i = 0 ;
water	90:9	0:0	4	i
op	90:11	0:0	4	=
water	90:13	0:0	4	0
water	90:14	0:0	4	;
cond	90:16	90:24	3	i < fg -> nb_outputs
water	90:16	0:0	4	i
op	90:18	0:0	4	<
water	90:20	0:0	4	fg
op	90:22	0:0	4	->
water	90:24	0:0	4	nb_outputs
forexpr	90:36	90:37	3	i ++
water	90:36	0:0	4	i
op	90:37	0:0	4	++
stmts	90:41	98:4	3	
water	90:41	0:0	4	{
decl	91:8	91:46	4	OutputFilter	*ofilter
op	91:30	0:0	4	=
water	91:32	0:0	4	fg
op	91:34	0:0	4	->
water	91:36	0:0	4	outputs
op	91:43	0:0	4	[
water	91:44	0:0	4	i
op	91:45	0:0	4	]
decl	92:8	92:47	4	AVFilterContext	*sink
op	92:30	0:0	4	=
water	92:32	0:0	4	ofilter
op	92:39	0:0	4	->
water	92:41	0:0	4	filter
water	93:8	0:0	4	ofilter
op	93:15	0:0	4	->
water	93:17	0:0	4	format
op	93:24	0:0	4	=
call	93:26	93:55	4	av_buffersink_get_format
arg	93:51	93:55	5	sink
water	93:51	0:0	6	sink
water	93:56	0:0	4	;
water	94:8	0:0	4	ofilter
op	94:15	0:0	4	->
water	94:17	0:0	4	width
op	94:24	0:0	4	=
call	94:26	94:50	4	av_buffersink_get_w
arg	94:46	94:50	5	sink
water	94:46	0:0	6	sink
water	94:51	0:0	4	;
water	95:8	0:0	4	ofilter
op	95:15	0:0	4	->
water	95:17	0:0	4	height
op	95:24	0:0	4	=
call	95:26	95:50	4	av_buffersink_get_h
arg	95:46	95:50	5	sink
water	95:46	0:0	6	sink
water	95:51	0:0	4	;
water	96:8	0:0	4	ofilter
op	96:15	0:0	4	->
water	96:17	0:0	4	sample_rate
op	96:32	0:0	4	=
call	96:34	96:68	4	av_buffersink_get_sample_rate
arg	96:64	96:68	5	sink
water	96:64	0:0	6	sink
water	96:69	0:0	4	;
water	97:8	0:0	4	ofilter
op	97:15	0:0	4	->
water	97:17	0:0	4	channel_layout
op	97:32	0:0	4	=
call	97:34	97:71	4	av_buffersink_get_channel_layout
arg	97:67	97:71	5	sink
water	97:67	0:0	6	sink
water	97:72	0:0	4	;
water	98:4	0:0	4	}
water	99:4	0:0	2	fg
op	99:6	0:0	2	->
water	99:8	0:0	2	reconfiguration
op	99:24	0:0	2	=
water	99:26	0:0	2	1
water	99:27	0:0	2	;
for	100:4	114:4	2	(i = 0 ;i < fg -> nb_outputs;i ++)
forinit	100:9	100:14	3	i = 0 ;
water	100:9	0:0	4	i
op	100:11	0:0	4	=
water	100:13	0:0	4	0
water	100:14	0:0	4	;
cond	100:16	100:24	3	i < fg -> nb_outputs
water	100:16	0:0	4	i
op	100:18	0:0	4	<
water	100:20	0:0	4	fg
op	100:22	0:0	4	->
water	100:24	0:0	4	nb_outputs
forexpr	100:36	100:37	3	i ++
water	100:36	0:0	4	i
op	100:37	0:0	4	++
stmts	100:41	114:4	3	
water	100:41	0:0	4	{
decl	101:8	101:47	4	OutputStream	*ost
op	101:26	0:0	4	=
water	101:28	0:0	4	fg
op	101:30	0:0	4	->
water	101:32	0:0	4	outputs
op	101:39	0:0	4	[
water	101:40	0:0	4	i
op	101:41	0:0	4	]
op	101:42	0:0	4	->
water	101:44	0:0	4	ost
if	102:8	109:8	4	(! ost -> enc)
cond	102:12	102:18	5	! ost -> enc
op	102:12	0:0	6	!
water	102:13	0:0	6	ost
op	102:16	0:0	6	->
water	102:18	0:0	6	enc
stmts	102:23	109:8	5	
water	102:23	0:0	6	{
call	105:12	106:95	6	av_log
arg	105:19	105:23	7	NULL
water	105:19	0:0	8	NULL
arg	105:25	105:37	7	AV_LOG_ERROR
water	105:25	0:0	8	AV_LOG_ERROR
arg	105:39	105:96	7	"Encoder (codec %s) not found for output stream #%d:%d\n"
water	105:39	0:0	8	"Encoder (codec %s) not found for output stream #%d:%d\n"
arg	106:21	106:66	7	avcodec_get_name(ost->st->codecpar->codec_id)
call	106:21	106:65	8	avcodec_get_name
arg	106:38	106:65	9	ost->st->codecpar->codec_id
water	106:38	0:0	10	ost
op	106:41	0:0	10	->
water	106:43	0:0	10	st
op	106:45	0:0	10	->
water	106:47	0:0	10	codecpar
op	106:55	0:0	10	->
water	106:57	0:0	10	codec_id
arg	106:68	106:83	7	ost->file_index
water	106:68	0:0	8	ost
op	106:71	0:0	8	->
water	106:73	0:0	8	file_index
arg	106:85	106:95	7	ost->index
water	106:85	0:0	8	ost
op	106:88	0:0	8	->
water	106:90	0:0	8	index
water	106:96	0:0	6	;
water	107:12	0:0	6	ret
op	107:16	0:0	6	=
call	107:18	107:32	6	AVERROR
arg	107:26	107:32	7	EINVAL
water	107:26	0:0	8	EINVAL
water	107:33	0:0	6	;
goto	108:12	108:21	6	fail
water	108:17	0:0	7	fail
water	109:8	0:0	6	}
if	110:8	113:66	4	(ost -> enc -> type == AVMEDIA_TYPE_AUDIO && ! ( ost -> enc -> capabilities & AV_CODEC_CAP_VARIABLE_FRAME_SIZE ))
cond	110:12	111:71	5	ost -> enc -> type == AVMEDIA_TYPE_AUDIO && ! ( ost -> enc -> capabilities & AV_CODEC_CAP_VARIABLE_FRAME_SIZE )
water	110:12	0:0	6	ost
op	110:15	0:0	6	->
water	110:17	0:0	6	enc
op	110:20	0:0	6	->
water	110:22	0:0	6	type
op	110:27	0:0	6	==
water	110:30	0:0	6	AVMEDIA_TYPE_AUDIO
op	110:49	0:0	6	&&
op	111:12	0:0	6	!
water	111:13	0:0	6	(
water	111:14	0:0	6	ost
op	111:17	0:0	6	->
water	111:19	0:0	6	enc
op	111:22	0:0	6	->
water	111:24	0:0	6	capabilities
op	111:37	0:0	6	&
water	111:39	0:0	6	AV_CODEC_CAP_VARIABLE_FRAME_SIZE
water	111:71	0:0	6	)
stmts	112:12	113:66	5	
call	112:12	113:65	6	av_buffersink_set_frame_size
arg	112:41	112:60	7	ost->filter->filter
water	112:41	0:0	8	ost
op	112:44	0:0	8	->
water	112:46	0:0	8	filter
op	112:52	0:0	8	->
water	112:54	0:0	8	filter
arg	113:41	113:65	7	ost->enc_ctx->frame_size
water	113:41	0:0	8	ost
op	113:44	0:0	8	->
water	113:46	0:0	8	enc_ctx
op	113:53	0:0	8	->
water	113:55	0:0	8	frame_size
water	113:66	0:0	6	;
water	114:4	0:0	4	}
for	115:4	124:4	2	(i = 0 ;i < fg -> nb_inputs;i ++)
forinit	115:9	115:14	3	i = 0 ;
water	115:9	0:0	4	i
op	115:11	0:0	4	=
water	115:13	0:0	4	0
water	115:14	0:0	4	;
cond	115:16	115:24	3	i < fg -> nb_inputs
water	115:16	0:0	4	i
op	115:18	0:0	4	<
water	115:20	0:0	4	fg
op	115:22	0:0	4	->
water	115:24	0:0	4	nb_inputs
forexpr	115:35	115:36	3	i ++
water	115:35	0:0	4	i
op	115:36	0:0	4	++
stmts	115:40	124:4	3	
water	115:40	0:0	4	{
while	116:8	123:8	4	(av_fifo_size (fg -> inputs [ i ] -> frame_queue ))
cond	116:15	116:54	5	av_fifo_size (fg -> inputs [ i ] -> frame_queue )
call	116:15	116:54	6	av_fifo_size
arg	116:28	116:54	7	fg->inputs[i]->frame_queue
water	116:28	0:0	8	fg
op	116:30	0:0	8	->
water	116:32	0:0	8	inputs
op	116:38	0:0	8	[
water	116:39	0:0	8	i
op	116:40	0:0	8	]
op	116:41	0:0	8	->
water	116:43	0:0	8	frame_queue
stmts	116:57	123:8	5	
water	116:57	0:0	6	{
decl	117:12	117:24	6	AVFrame	*tmp
call	118:12	118:84	6	av_fifo_generic_read
arg	118:33	118:59	7	fg->inputs[i]->frame_queue
water	118:33	0:0	8	fg
op	118:35	0:0	8	->
water	118:37	0:0	8	inputs
op	118:43	0:0	8	[
water	118:44	0:0	8	i
op	118:45	0:0	8	]
op	118:46	0:0	8	->
water	118:48	0:0	8	frame_queue
arg	118:61	118:65	7	&tmp
op	118:61	0:0	8	&
water	118:62	0:0	8	tmp
arg	118:67	118:78	7	sizeof(tmp)
op	118:67	0:0	8	sizeof
water	118:73	0:0	8	(
water	118:74	0:0	8	tmp
water	118:77	0:0	8	)
arg	118:80	118:84	7	NULL
water	118:80	0:0	8	NULL
water	118:85	0:0	6	;
water	119:12	0:0	6	ret
op	119:16	0:0	6	=
call	119:18	119:67	6	av_buffersrc_add_frame
arg	119:41	119:62	7	fg->inputs[i]->filter
water	119:41	0:0	8	fg
op	119:43	0:0	8	->
water	119:45	0:0	8	inputs
op	119:51	0:0	8	[
water	119:52	0:0	8	i
op	119:53	0:0	8	]
op	119:54	0:0	8	->
water	119:56	0:0	8	filter
arg	119:64	119:67	7	tmp
water	119:64	0:0	8	tmp
water	119:68	0:0	6	;
call	120:12	120:30	6	av_frame_free
arg	120:26	120:30	7	&tmp
op	120:26	0:0	8	&
water	120:27	0:0	8	tmp
water	120:31	0:0	6	;
if	121:12	122:25	6	(ret < 0)
cond	121:16	121:22	7	ret < 0
water	121:16	0:0	8	ret
op	121:20	0:0	8	<
water	121:22	0:0	8	0
stmts	122:16	122:25	7	
goto	122:16	122:25	8	fail
water	122:21	0:0	9	fail
water	123:8	0:0	6	}
water	124:4	0:0	4	}
for	126:4	132:4	2	(i = 0 ;i < fg -> nb_inputs;i ++)
forinit	126:9	126:14	3	i = 0 ;
water	126:9	0:0	4	i
op	126:11	0:0	4	=
water	126:13	0:0	4	0
water	126:14	0:0	4	;
cond	126:16	126:24	3	i < fg -> nb_inputs
water	126:16	0:0	4	i
op	126:18	0:0	4	<
water	126:20	0:0	4	fg
op	126:22	0:0	4	->
water	126:24	0:0	4	nb_inputs
forexpr	126:35	126:36	3	i ++
water	126:35	0:0	4	i
op	126:36	0:0	4	++
stmts	126:40	132:4	3	
water	126:40	0:0	4	{
if	127:8	131:8	4	(fg -> inputs [ i ] -> eof)
cond	127:12	127:27	5	fg -> inputs [ i ] -> eof
water	127:12	0:0	6	fg
op	127:14	0:0	6	->
water	127:16	0:0	6	inputs
op	127:22	0:0	6	[
water	127:23	0:0	6	i
op	127:24	0:0	6	]
op	127:25	0:0	6	->
water	127:27	0:0	6	eof
stmts	127:32	131:8	5	
water	127:32	0:0	6	{
water	128:12	0:0	6	ret
op	128:16	0:0	6	=
call	128:18	128:68	6	av_buffersrc_add_frame
arg	128:41	128:62	7	fg->inputs[i]->filter
water	128:41	0:0	8	fg
op	128:43	0:0	8	->
water	128:45	0:0	8	inputs
op	128:51	0:0	8	[
water	128:52	0:0	8	i
op	128:53	0:0	8	]
op	128:54	0:0	8	->
water	128:56	0:0	8	filter
arg	128:64	128:68	7	NULL
water	128:64	0:0	8	NULL
water	128:69	0:0	6	;
if	129:12	130:25	6	(ret < 0)
cond	129:16	129:22	7	ret < 0
water	129:16	0:0	8	ret
op	129:20	0:0	8	<
water	129:22	0:0	8	0
stmts	130:16	130:25	7	
goto	130:16	130:25	8	fail
water	130:21	0:0	9	fail
water	131:8	0:0	6	}
water	132:4	0:0	4	}
for	134:4	144:4	2	(i = 0 ;i < fg -> nb_inputs;i ++)
forinit	134:9	134:14	3	i = 0 ;
water	134:9	0:0	4	i
op	134:11	0:0	4	=
water	134:13	0:0	4	0
water	134:14	0:0	4	;
cond	134:16	134:24	3	i < fg -> nb_inputs
water	134:16	0:0	4	i
op	134:18	0:0	4	<
water	134:20	0:0	4	fg
op	134:22	0:0	4	->
water	134:24	0:0	4	nb_inputs
forexpr	134:35	134:36	3	i ++
water	134:35	0:0	4	i
op	134:36	0:0	4	++
stmts	134:40	144:4	3	
water	134:40	0:0	4	{
decl	135:8	135:45	4	InputStream	*ist
op	135:25	0:0	4	=
water	135:27	0:0	4	fg
op	135:29	0:0	4	->
water	135:31	0:0	4	inputs
op	135:37	0:0	4	[
water	135:38	0:0	4	i
op	135:39	0:0	4	]
op	135:40	0:0	4	->
water	135:42	0:0	4	ist
if	136:8	143:8	4	(ist -> sub2video . sub_queue && ist -> sub2video . frame)
cond	136:12	136:55	5	ist -> sub2video . sub_queue && ist -> sub2video . frame
water	136:12	0:0	6	ist
op	136:15	0:0	6	->
water	136:17	0:0	6	sub2video
op	136:26	0:0	6	.
water	136:27	0:0	6	sub_queue
op	136:37	0:0	6	&&
water	136:40	0:0	6	ist
op	136:43	0:0	6	->
water	136:45	0:0	6	sub2video
op	136:54	0:0	6	.
water	136:55	0:0	6	frame
stmts	136:62	143:8	5	
water	136:62	0:0	6	{
while	137:12	142:12	6	(av_fifo_size (ist -> sub2video . sub_queue ))
cond	137:19	137:56	7	av_fifo_size (ist -> sub2video . sub_queue )
call	137:19	137:56	8	av_fifo_size
arg	137:32	137:56	9	ist->sub2video.sub_queue
water	137:32	0:0	10	ist
op	137:35	0:0	10	->
water	137:37	0:0	10	sub2video
op	137:46	0:0	10	.
water	137:47	0:0	10	sub_queue
stmts	137:59	142:12	7	
water	137:59	0:0	8	{
decl	138:16	138:30	8	AVSubtitle	tmp
call	139:16	139:86	8	av_fifo_generic_read
arg	139:37	139:61	9	ist->sub2video.sub_queue
water	139:37	0:0	10	ist
op	139:40	0:0	10	->
water	139:42	0:0	10	sub2video
op	139:51	0:0	10	.
water	139:52	0:0	10	sub_queue
arg	139:63	139:67	9	&tmp
op	139:63	0:0	10	&
water	139:64	0:0	10	tmp
arg	139:69	139:80	9	sizeof(tmp)
op	139:69	0:0	10	sizeof
water	139:75	0:0	10	(
water	139:76	0:0	10	tmp
water	139:79	0:0	10	)
arg	139:82	139:86	9	NULL
water	139:82	0:0	10	NULL
water	139:87	0:0	8	;
call	140:16	140:42	8	sub2video_update
arg	140:33	140:36	9	ist
water	140:33	0:0	10	ist
arg	140:38	140:42	9	&tmp
op	140:38	0:0	10	&
water	140:39	0:0	10	tmp
water	140:43	0:0	8	;
call	141:16	141:36	8	avsubtitle_free
arg	141:32	141:36	9	&tmp
op	141:32	0:0	10	&
water	141:33	0:0	10	tmp
water	141:37	0:0	8	;
water	142:12	0:0	8	}
water	143:8	0:0	6	}
water	144:4	0:0	4	}
return	145:4	145:12	2	0
water	145:11	0:0	3	0
label	146:0	146:4	2	fail :
call	147:4	147:26	2	cleanup_filtergraph
arg	147:24	147:26	3	fg
water	147:24	0:0	4	fg
water	147:27	0:0	2	;
return	148:4	148:14	2	ret
water	148:11	0:0	3	ret
