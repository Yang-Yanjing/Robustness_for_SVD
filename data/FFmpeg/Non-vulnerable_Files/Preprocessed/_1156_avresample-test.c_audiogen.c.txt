func	1:0	68:0	0	static void	audiogen
params	1:20	0:0	1	
param	1:21	1:31	2	AVLFG *	rnd
param	1:33	1:44	2	void * *	data
param	1:46	1:76	2	enum AVSampleFormat	sample_fmt
param	2:21	2:33	2	int	channels
param	2:35	2:50	2	int	sample_rate
param	2:52	2:66	2	int	nb_samples
stmnts	0:0	67:4	1	
decl	4:4	4:16	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:16	2	int	ch
water	4:13	0:0	2	,
decl	4:4	4:16	2	int	k
decl	5:4	5:24	2	double	v
water	5:12	0:0	2	,
decl	5:4	5:24	2	double	f
water	5:15	0:0	2	,
decl	5:4	5:24	2	double	a
water	5:18	0:0	2	,
decl	5:4	5:24	2	double	ampa
decl	6:4	6:41	2	double	tabf1[AVRESAMPLE_MAX_CHANNELS]
decl	7:4	7:41	2	double	tabf2[AVRESAMPLE_MAX_CHANNELS]
decl	8:4	8:40	2	double	taba[AVRESAMPLE_MAX_CHANNELS]
water	10:4	0:0	2	k
op	10:6	0:0	2	=
water	10:8	0:0	2	0
water	10:9	0:0	2	;
water	12:4	0:0	2	a
op	12:6	0:0	2	=
water	12:8	0:0	2	0
water	12:9	0:0	2	;
for	13:4	18:4	2	(i = 0 ;i < 1 * sample_rate && k < nb_samples;i ++ , k ++)
forinit	13:9	13:14	3	i = 0 ;
water	13:9	0:0	4	i
op	13:11	0:0	4	=
water	13:13	0:0	4	0
water	13:14	0:0	4	;
cond	13:16	13:43	3	i < 1 * sample_rate && k < nb_samples
water	13:16	0:0	4	i
op	13:18	0:0	4	<
water	13:20	0:0	4	1
op	13:22	0:0	4	*
water	13:24	0:0	4	sample_rate
op	13:36	0:0	4	&&
water	13:39	0:0	4	k
op	13:41	0:0	4	<
water	13:43	0:0	4	nb_samples
forexpr	13:55	13:61	3	i ++ , k ++
water	13:55	0:0	4	i
op	13:56	0:0	4	++
water	13:58	0:0	4	,
water	13:60	0:0	4	k
op	13:61	0:0	4	++
stmts	13:65	18:4	3	
water	13:65	0:0	4	{
water	14:8	0:0	4	v
op	14:10	0:0	4	=
call	14:12	14:17	4	sin
arg	14:16	14:17	5	a
water	14:16	0:0	6	a
op	14:19	0:0	4	*
water	14:21	0:0	4	0
op	14:22	0:0	4	.
water	14:23	0:0	4	30
water	14:25	0:0	4	;
for	15:8	17:46	4	(ch = 0 ;ch < channels;ch ++)
forinit	15:13	15:19	5	ch = 0 ;
water	15:13	0:0	6	ch
op	15:16	0:0	6	=
water	15:18	0:0	6	0
water	15:19	0:0	6	;
cond	15:21	15:26	5	ch < channels
water	15:21	0:0	6	ch
op	15:24	0:0	6	<
water	15:26	0:0	6	channels
forexpr	15:36	15:38	5	ch ++
water	15:36	0:0	6	ch
op	15:38	0:0	6	++
stmts	16:12	17:46	5	
water	16:12	0:0	6	PUT_SAMPLE
water	17:8	0:0	6	a
op	17:10	0:0	6	+=
water	17:13	0:0	6	M_PI
op	17:18	0:0	6	*
water	17:20	0:0	6	1000
op	17:24	0:0	6	.
water	17:25	0:0	6	0
op	17:27	0:0	6	*
water	17:29	0:0	6	2
op	17:30	0:0	6	.
water	17:31	0:0	6	0
op	17:33	0:0	6	/
water	17:35	0:0	6	sample_rate
water	17:46	0:0	6	;
water	18:4	0:0	4	}
water	20:4	0:0	2	a
op	20:6	0:0	2	=
water	20:8	0:0	2	0
water	20:9	0:0	2	;
for	21:4	27:4	2	(i = 0 ;i < 1 * sample_rate && k < nb_samples;i ++ , k ++)
forinit	21:9	21:14	3	i = 0 ;
water	21:9	0:0	4	i
op	21:11	0:0	4	=
water	21:13	0:0	4	0
water	21:14	0:0	4	;
cond	21:16	21:43	3	i < 1 * sample_rate && k < nb_samples
water	21:16	0:0	4	i
op	21:18	0:0	4	<
water	21:20	0:0	4	1
op	21:22	0:0	4	*
water	21:24	0:0	4	sample_rate
op	21:36	0:0	4	&&
water	21:39	0:0	4	k
op	21:41	0:0	4	<
water	21:43	0:0	4	nb_samples
forexpr	21:55	21:61	3	i ++ , k ++
water	21:55	0:0	4	i
op	21:56	0:0	4	++
water	21:58	0:0	4	,
water	21:60	0:0	4	k
op	21:61	0:0	4	++
stmts	21:65	27:4	3	
water	21:65	0:0	4	{
water	22:8	0:0	4	v
op	22:10	0:0	4	=
call	22:12	22:17	4	sin
arg	22:16	22:17	5	a
water	22:16	0:0	6	a
op	22:19	0:0	4	*
water	22:21	0:0	4	0
op	22:22	0:0	4	.
water	22:23	0:0	4	30
water	22:25	0:0	4	;
for	23:8	25:60	4	(ch = 0 ;ch < channels;ch ++)
forinit	23:13	23:19	5	ch = 0 ;
water	23:13	0:0	6	ch
op	23:16	0:0	6	=
water	23:18	0:0	6	0
water	23:19	0:0	6	;
cond	23:21	23:26	5	ch < channels
water	23:21	0:0	6	ch
op	23:24	0:0	6	<
water	23:26	0:0	6	channels
forexpr	23:36	23:38	5	ch ++
water	23:36	0:0	6	ch
op	23:38	0:0	6	++
stmts	0:0	25:60	5	
decl	24:12	25:60	6	PUT_SAMPLE	f
op	25:11	0:0	6	=
water	25:13	0:0	6	100
op	25:16	0:0	6	.
water	25:17	0:0	6	0
op	25:19	0:0	6	+
water	25:21	0:0	6	(
water	25:22	0:0	6	(
water	25:23	0:0	6	(
water	25:24	0:0	6	10000
op	25:29	0:0	6	.
water	25:30	0:0	6	0
op	25:32	0:0	6	-
water	25:34	0:0	6	100
op	25:37	0:0	6	.
water	25:38	0:0	6	0
water	25:39	0:0	6	)
op	25:41	0:0	6	*
water	25:43	0:0	6	i
water	25:44	0:0	6	)
op	25:46	0:0	6	/
water	25:48	0:0	6	sample_rate
water	25:59	0:0	6	)
water	26:8	0:0	4	a
op	26:10	0:0	4	+=
water	26:13	0:0	4	M_PI
op	26:18	0:0	4	*
water	26:20	0:0	4	f
op	26:22	0:0	4	*
water	26:24	0:0	4	2
op	26:25	0:0	4	.
water	26:26	0:0	4	0
op	26:28	0:0	4	/
water	26:30	0:0	4	sample_rate
water	26:41	0:0	4	;
water	27:4	0:0	4	}
for	29:4	33:4	2	(i = 0 ;i < sample_rate / 2 && k < nb_samples;i ++ , k ++)
forinit	29:9	29:14	3	i = 0 ;
water	29:9	0:0	4	i
op	29:11	0:0	4	=
water	29:13	0:0	4	0
water	29:14	0:0	4	;
cond	29:16	29:43	3	i < sample_rate / 2 && k < nb_samples
water	29:16	0:0	4	i
op	29:18	0:0	4	<
water	29:20	0:0	4	sample_rate
op	29:32	0:0	4	/
water	29:34	0:0	4	2
op	29:36	0:0	4	&&
water	29:39	0:0	4	k
op	29:41	0:0	4	<
water	29:43	0:0	4	nb_samples
forexpr	29:55	29:61	3	i ++ , k ++
water	29:55	0:0	4	i
op	29:56	0:0	4	++
water	29:58	0:0	4	,
water	29:60	0:0	4	k
op	29:61	0:0	4	++
stmts	29:65	33:4	3	
water	29:65	0:0	4	{
water	30:8	0:0	4	v
op	30:10	0:0	4	=
call	30:12	30:24	4	dbl_rand
arg	30:21	30:24	5	rnd
water	30:21	0:0	6	rnd
op	30:26	0:0	4	*
water	30:28	0:0	4	0
op	30:29	0:0	4	.
water	30:30	0:0	4	30
water	30:32	0:0	4	;
for	31:8	32:12	4	(ch = 0 ;ch < channels;ch ++)
forinit	31:13	31:19	5	ch = 0 ;
water	31:13	0:0	6	ch
op	31:16	0:0	6	=
water	31:18	0:0	6	0
water	31:19	0:0	6	;
cond	31:21	31:26	5	ch < channels
water	31:21	0:0	6	ch
op	31:24	0:0	6	<
water	31:26	0:0	6	channels
forexpr	31:36	31:38	5	ch ++
water	31:36	0:0	6	ch
op	31:38	0:0	6	++
stmts	32:12	32:12	5	
water	32:12	0:0	6	PUT_SAMPLE
water	33:4	0:0	4	}
for	35:4	39:4	2	(i = 0 ;i < sample_rate / 2 && k < nb_samples;i ++ , k ++)
forinit	35:9	35:14	3	i = 0 ;
water	35:9	0:0	4	i
op	35:11	0:0	4	=
water	35:13	0:0	4	0
water	35:14	0:0	4	;
cond	35:16	35:43	3	i < sample_rate / 2 && k < nb_samples
water	35:16	0:0	4	i
op	35:18	0:0	4	<
water	35:20	0:0	4	sample_rate
op	35:32	0:0	4	/
water	35:34	0:0	4	2
op	35:36	0:0	4	&&
water	35:39	0:0	4	k
op	35:41	0:0	4	<
water	35:43	0:0	4	nb_samples
forexpr	35:55	35:61	3	i ++ , k ++
water	35:55	0:0	4	i
op	35:56	0:0	4	++
water	35:58	0:0	4	,
water	35:60	0:0	4	k
op	35:61	0:0	4	++
stmts	35:65	39:4	3	
water	35:65	0:0	4	{
water	36:8	0:0	4	v
op	36:10	0:0	4	=
call	36:12	36:24	4	dbl_rand
arg	36:21	36:24	5	rnd
water	36:21	0:0	6	rnd
water	36:25	0:0	4	;
for	37:8	38:12	4	(ch = 0 ;ch < channels;ch ++)
forinit	37:13	37:19	5	ch = 0 ;
water	37:13	0:0	6	ch
op	37:16	0:0	6	=
water	37:18	0:0	6	0
water	37:19	0:0	6	;
cond	37:21	37:26	5	ch < channels
water	37:21	0:0	6	ch
op	37:24	0:0	6	<
water	37:26	0:0	6	channels
forexpr	37:36	37:38	5	ch ++
water	37:36	0:0	6	ch
op	37:38	0:0	6	++
stmts	38:12	38:12	5	
water	38:12	0:0	6	PUT_SAMPLE
water	39:4	0:0	4	}
for	41:4	45:4	2	(ch = 0 ;ch < channels;ch ++)
forinit	41:9	41:15	3	ch = 0 ;
water	41:9	0:0	4	ch
op	41:12	0:0	4	=
water	41:14	0:0	4	0
water	41:15	0:0	4	;
cond	41:17	41:22	3	ch < channels
water	41:17	0:0	4	ch
op	41:20	0:0	4	<
water	41:22	0:0	4	channels
forexpr	41:32	41:34	3	ch ++
water	41:32	0:0	4	ch
op	41:34	0:0	4	++
stmts	41:38	45:4	3	
water	41:38	0:0	4	{
water	42:8	0:0	4	taba
op	42:12	0:0	4	[
water	42:13	0:0	4	ch
op	42:15	0:0	4	]
op	42:18	0:0	4	=
water	42:20	0:0	4	0
water	42:21	0:0	4	;
water	43:8	0:0	4	tabf1
op	43:13	0:0	4	[
water	43:14	0:0	4	ch
op	43:16	0:0	4	]
op	43:18	0:0	4	=
water	43:20	0:0	4	100
op	43:24	0:0	4	+
call	43:26	43:40	4	av_lfg_get
arg	43:37	43:40	5	rnd
water	43:37	0:0	6	rnd
op	43:42	0:0	4	%
water	43:44	0:0	4	5000
water	43:48	0:0	4	;
water	44:8	0:0	4	tabf2
op	44:13	0:0	4	[
water	44:14	0:0	4	ch
op	44:16	0:0	4	]
op	44:18	0:0	4	=
water	44:20	0:0	4	100
op	44:24	0:0	4	+
call	44:26	44:40	4	av_lfg_get
arg	44:37	44:40	5	rnd
water	44:37	0:0	6	rnd
op	44:42	0:0	4	%
water	44:44	0:0	4	5000
water	44:48	0:0	4	;
water	45:4	0:0	4	}
for	46:4	53:4	2	(i = 0 ;i < 1 * sample_rate && k < nb_samples;i ++ , k ++)
forinit	46:9	46:14	3	i = 0 ;
water	46:9	0:0	4	i
op	46:11	0:0	4	=
water	46:13	0:0	4	0
water	46:14	0:0	4	;
cond	46:16	46:43	3	i < 1 * sample_rate && k < nb_samples
water	46:16	0:0	4	i
op	46:18	0:0	4	<
water	46:20	0:0	4	1
op	46:22	0:0	4	*
water	46:24	0:0	4	sample_rate
op	46:36	0:0	4	&&
water	46:39	0:0	4	k
op	46:41	0:0	4	<
water	46:43	0:0	4	nb_samples
forexpr	46:55	46:61	3	i ++ , k ++
water	46:55	0:0	4	i
op	46:56	0:0	4	++
water	46:58	0:0	4	,
water	46:60	0:0	4	k
op	46:61	0:0	4	++
stmts	46:65	53:4	3	
water	46:65	0:0	4	{
for	47:8	52:8	4	(ch = 0 ;ch < channels;ch ++)
forinit	47:13	47:19	5	ch = 0 ;
water	47:13	0:0	6	ch
op	47:16	0:0	6	=
water	47:18	0:0	6	0
water	47:19	0:0	6	;
cond	47:21	47:26	5	ch < channels
water	47:21	0:0	6	ch
op	47:24	0:0	6	<
water	47:26	0:0	6	channels
forexpr	47:36	47:38	5	ch ++
water	47:36	0:0	6	ch
op	47:38	0:0	6	++
stmts	47:42	52:8	5	
water	47:42	0:0	6	{
water	48:12	0:0	6	v
op	48:14	0:0	6	=
call	48:16	48:28	6	sin
arg	48:20	48:28	7	taba[ch]
water	48:20	0:0	8	taba
op	48:24	0:0	8	[
water	48:25	0:0	8	ch
op	48:27	0:0	8	]
op	48:30	0:0	6	*
water	48:32	0:0	6	0
op	48:33	0:0	6	.
water	48:34	0:0	6	30
water	48:36	0:0	6	;
decl	49:12	50:73	6	PUT_SAMPLE	f
op	50:14	0:0	6	=
water	50:16	0:0	6	tabf1
op	50:21	0:0	6	[
water	50:22	0:0	6	ch
op	50:24	0:0	6	]
op	50:26	0:0	6	+
water	50:28	0:0	6	(
water	50:29	0:0	6	(
water	50:30	0:0	6	(
water	50:31	0:0	6	tabf2
op	50:36	0:0	6	[
water	50:37	0:0	6	ch
op	50:39	0:0	6	]
op	50:41	0:0	6	-
water	50:43	0:0	6	tabf1
op	50:48	0:0	6	[
water	50:49	0:0	6	ch
op	50:51	0:0	6	]
water	50:52	0:0	6	)
op	50:54	0:0	6	*
water	50:56	0:0	6	i
water	50:57	0:0	6	)
op	50:59	0:0	6	/
water	50:61	0:0	6	sample_rate
water	50:72	0:0	6	)
water	51:12	0:0	6	taba
op	51:16	0:0	6	[
water	51:17	0:0	6	ch
op	51:19	0:0	6	]
op	51:21	0:0	6	+=
water	51:24	0:0	6	M_PI
op	51:29	0:0	6	*
water	51:31	0:0	6	f
op	51:33	0:0	6	*
water	51:35	0:0	6	2
op	51:36	0:0	6	.
water	51:37	0:0	6	0
op	51:39	0:0	6	/
water	51:41	0:0	6	sample_rate
water	51:52	0:0	6	;
water	52:8	0:0	6	}
water	53:4	0:0	4	}
water	55:4	0:0	2	a
op	55:9	0:0	2	=
water	55:11	0:0	2	0
water	55:12	0:0	2	;
water	56:4	0:0	2	ampa
op	56:9	0:0	2	=
water	56:11	0:0	2	0
water	56:12	0:0	2	;
for	57:4	67:4	2	(i = 0 ;i < 2 * sample_rate && k < nb_samples;i ++ , k ++)
forinit	57:9	57:14	3	i = 0 ;
water	57:9	0:0	4	i
op	57:11	0:0	4	=
water	57:13	0:0	4	0
water	57:14	0:0	4	;
cond	57:16	57:43	3	i < 2 * sample_rate && k < nb_samples
water	57:16	0:0	4	i
op	57:18	0:0	4	<
water	57:20	0:0	4	2
op	57:22	0:0	4	*
water	57:24	0:0	4	sample_rate
op	57:36	0:0	4	&&
water	57:39	0:0	4	k
op	57:41	0:0	4	<
water	57:43	0:0	4	nb_samples
forexpr	57:55	57:61	3	i ++ , k ++
water	57:55	0:0	4	i
op	57:56	0:0	4	++
water	57:58	0:0	4	,
water	57:60	0:0	4	k
op	57:61	0:0	4	++
stmts	57:65	67:4	3	
water	57:65	0:0	4	{
for	58:8	66:8	4	(ch = 0 ;ch < channels;ch ++)
forinit	58:13	58:19	5	ch = 0 ;
water	58:13	0:0	6	ch
op	58:16	0:0	6	=
water	58:18	0:0	6	0
water	58:19	0:0	6	;
cond	58:21	58:26	5	ch < channels
water	58:21	0:0	6	ch
op	58:24	0:0	6	<
water	58:26	0:0	6	channels
forexpr	58:36	58:38	5	ch ++
water	58:36	0:0	6	ch
op	58:38	0:0	6	++
stmts	58:42	66:8	5	
water	58:42	0:0	6	{
decl	59:12	59:49	6	double	amp
op	59:23	0:0	6	=
water	59:25	0:0	6	(
water	59:26	0:0	6	1
op	59:27	0:0	6	.
water	59:28	0:0	6	0
op	59:30	0:0	6	+
call	59:32	59:40	7	sin
arg	59:36	59:40	8	ampa
water	59:36	0:0	9	ampa
water	59:41	0:0	6	)
op	59:43	0:0	6	*
water	59:45	0:0	6	0
op	59:46	0:0	6	.
water	59:47	0:0	6	15
if	60:12	61:32	6	(ch & 1)
cond	60:16	60:21	7	ch & 1
water	60:16	0:0	8	ch
op	60:19	0:0	8	&
water	60:21	0:0	8	1
stmts	61:16	61:32	7	
water	61:16	0:0	8	amp
op	61:20	0:0	8	=
water	61:22	0:0	8	0
op	61:23	0:0	8	.
water	61:24	0:0	8	30
op	61:27	0:0	8	-
water	61:29	0:0	8	amp
water	61:32	0:0	8	;
water	62:12	0:0	6	v
op	62:14	0:0	6	=
call	62:16	62:21	6	sin
arg	62:20	62:21	7	a
water	62:20	0:0	8	a
op	62:23	0:0	6	*
water	62:25	0:0	6	amp
water	62:28	0:0	6	;
water	63:12	0:0	6	PUT_SAMPLE
water	64:12	0:0	6	a
op	64:17	0:0	6	+=
water	64:20	0:0	6	M_PI
op	64:25	0:0	6	*
water	64:27	0:0	6	500
op	64:30	0:0	6	.
water	64:31	0:0	6	0
op	64:33	0:0	6	*
water	64:35	0:0	6	2
op	64:36	0:0	6	.
water	64:37	0:0	6	0
op	64:39	0:0	6	/
water	64:41	0:0	6	sample_rate
water	64:52	0:0	6	;
water	65:12	0:0	6	ampa
op	65:17	0:0	6	+=
water	65:20	0:0	6	M_PI
op	65:25	0:0	6	*
water	65:28	0:0	6	2
op	65:29	0:0	6	.
water	65:30	0:0	6	0
op	65:32	0:0	6	/
water	65:34	0:0	6	sample_rate
water	65:45	0:0	6	;
water	66:8	0:0	6	}
water	67:4	0:0	4	}
