func	1:0	97:0	0	static void	print_final_stats
params	1:29	0:0	1	
param	1:30	1:48	2	int64_t	total_size
stmnts	0:0	96:4	1	
decl	3:4	3:75	2	uint64_t	video_size
op	3:24	0:0	2	=
water	3:26	0:0	2	0
water	3:27	0:0	2	,
decl	3:4	3:75	2	uint64_t	audio_size
op	3:40	0:0	2	=
water	3:42	0:0	2	0
water	3:43	0:0	2	,
decl	3:4	3:75	2	uint64_t	extra_size
op	3:56	0:0	2	=
water	3:58	0:0	2	0
water	3:59	0:0	2	,
decl	3:4	3:75	2	uint64_t	other_size
op	3:72	0:0	2	=
water	3:74	0:0	2	0
decl	4:4	4:30	2	uint64_t	subtitle_size
op	4:27	0:0	2	=
water	4:29	0:0	2	0
decl	5:4	5:26	2	uint64_t	data_size
op	5:23	0:0	2	=
water	5:25	0:0	2	0
decl	6:4	6:24	2	float	percent
op	6:18	0:0	2	=
op	6:20	0:0	2	-
water	6:21	0:0	2	1
op	6:22	0:0	2	.
water	6:23	0:0	2	0
decl	7:4	7:12	2	int	i
water	7:9	0:0	2	,
decl	7:4	7:12	2	int	j
decl	8:4	8:22	2	int	pass1_used
op	8:19	0:0	2	=
water	8:21	0:0	2	1
for	9:4	22:4	2	(i = 0 ;i < nb_output_streams;i ++)
forinit	9:9	9:14	3	i = 0 ;
water	9:9	0:0	4	i
op	9:11	0:0	4	=
water	9:13	0:0	4	0
water	9:14	0:0	4	;
cond	9:16	9:20	3	i < nb_output_streams
water	9:16	0:0	4	i
op	9:18	0:0	4	<
water	9:20	0:0	4	nb_output_streams
forexpr	9:39	9:40	3	i ++
water	9:39	0:0	4	i
op	9:40	0:0	4	++
stmts	9:44	22:4	3	
water	9:44	0:0	4	{
decl	10:8	10:45	4	OutputStream	*ost
op	10:26	0:0	4	=
water	10:28	0:0	4	output_streams
op	10:42	0:0	4	[
water	10:43	0:0	4	i
op	10:44	0:0	4	]
switch	11:8	16:8	4	(ost -> enc_ctx -> codec_type)
cond	11:16	11:30	5	ost -> enc_ctx -> codec_type
water	11:16	0:0	6	ost
op	11:19	0:0	6	->
water	11:21	0:0	6	enc_ctx
op	11:28	0:0	6	->
water	11:30	0:0	6	codec_type
stmts	11:42	16:8	5	
water	11:42	0:0	6	{
label	12:12	12:35	6	case AVMEDIA_TYPE_VIDEO :
water	12:37	0:0	6	video_size
op	12:48	0:0	6	+=
water	12:51	0:0	6	ost
op	12:54	0:0	6	->
water	12:56	0:0	6	data_size
water	12:65	0:0	6	;
break	12:67	12:72	6	
label	13:12	13:35	6	case AVMEDIA_TYPE_AUDIO :
water	13:37	0:0	6	audio_size
op	13:48	0:0	6	+=
water	13:51	0:0	6	ost
op	13:54	0:0	6	->
water	13:56	0:0	6	data_size
water	13:65	0:0	6	;
break	13:67	13:72	6	
label	14:12	14:38	6	case AVMEDIA_TYPE_SUBTITLE :
water	14:40	0:0	6	subtitle_size
op	14:54	0:0	6	+=
water	14:57	0:0	6	ost
op	14:60	0:0	6	->
water	14:62	0:0	6	data_size
water	14:71	0:0	6	;
break	14:73	14:78	6	
label	15:12	15:19	6	default :
water	15:37	0:0	6	other_size
op	15:48	0:0	6	+=
water	15:51	0:0	6	ost
op	15:54	0:0	6	->
water	15:56	0:0	6	data_size
water	15:65	0:0	6	;
break	15:67	15:72	6	
water	16:8	0:0	6	}
water	17:8	0:0	4	extra_size
op	17:19	0:0	4	+=
water	17:22	0:0	4	ost
op	17:25	0:0	4	->
water	17:27	0:0	4	enc_ctx
op	17:34	0:0	4	->
water	17:36	0:0	4	extradata_size
water	17:50	0:0	4	;
water	18:8	0:0	4	data_size
op	18:19	0:0	4	+=
water	18:22	0:0	4	ost
op	18:25	0:0	4	->
water	18:27	0:0	4	data_size
water	18:36	0:0	4	;
if	19:8	21:26	4	(( ost -> enc_ctx -> flags & ( AV_CODEC_FLAG_PASS1 | AV_CODEC_FLAG_PASS2 ) ) != AV_CODEC_FLAG_PASS1)
cond	19:15	20:15	5	( ost -> enc_ctx -> flags & ( AV_CODEC_FLAG_PASS1 | AV_CODEC_FLAG_PASS2 ) ) != AV_CODEC_FLAG_PASS1
water	19:15	0:0	6	(
water	19:16	0:0	6	ost
op	19:19	0:0	6	->
water	19:21	0:0	6	enc_ctx
op	19:28	0:0	6	->
water	19:30	0:0	6	flags
op	19:36	0:0	6	&
water	19:38	0:0	6	(
water	19:39	0:0	6	AV_CODEC_FLAG_PASS1
op	19:59	0:0	6	|
water	19:61	0:0	6	AV_CODEC_FLAG_PASS2
water	19:80	0:0	6	)
water	19:81	0:0	6	)
op	20:12	0:0	6	!=
water	20:15	0:0	6	AV_CODEC_FLAG_PASS1
stmts	21:12	21:26	5	
water	21:12	0:0	6	pass1_used
op	21:23	0:0	6	=
water	21:25	0:0	6	0
water	21:26	0:0	6	;
water	22:4	0:0	4	}
if	23:4	24:62	2	(data_size && total_size > 0 && total_size >= data_size)
cond	23:8	23:51	3	data_size && total_size > 0 && total_size >= data_size
water	23:8	0:0	4	data_size
op	23:18	0:0	4	&&
water	23:21	0:0	4	total_size
op	23:31	0:0	4	>
water	23:32	0:0	4	0
op	23:34	0:0	4	&&
water	23:37	0:0	4	total_size
op	23:48	0:0	4	>=
water	23:51	0:0	4	data_size
stmts	24:8	24:62	3	
water	24:8	0:0	4	percent
op	24:16	0:0	4	=
water	24:18	0:0	4	100
op	24:21	0:0	4	.
water	24:22	0:0	4	0
op	24:24	0:0	4	*
water	24:26	0:0	4	(
water	24:27	0:0	4	total_size
op	24:38	0:0	4	-
water	24:40	0:0	4	data_size
water	24:49	0:0	4	)
op	24:51	0:0	4	/
water	24:53	0:0	4	data_size
water	24:62	0:0	4	;
call	25:4	30:30	2	av_log
arg	25:11	25:15	3	NULL
water	25:11	0:0	4	NULL
arg	25:17	25:28	3	AV_LOG_INFO
water	25:17	0:0	4	AV_LOG_INFO
arg	25:30	25:139	3	"video:%1.0fkB audio:%1.0fkB subtitle:%1.0fkB other streams:%1.0fkB global headers:%1.0fkB muxing overhead: "
water	25:30	0:0	4	"video:%1.0fkB audio:%1.0fkB subtitle:%1.0fkB other streams:%1.0fkB global headers:%1.0fkB muxing overhead: "
arg	26:11	26:30	3	video_size/1024.0
water	26:11	0:0	4	video_size
op	26:22	0:0	4	/
water	26:24	0:0	4	1024
op	26:28	0:0	4	.
water	26:29	0:0	4	0
arg	27:11	27:30	3	audio_size/1024.0
water	27:11	0:0	4	audio_size
op	27:22	0:0	4	/
water	27:24	0:0	4	1024
op	27:28	0:0	4	.
water	27:29	0:0	4	0
arg	28:11	28:33	3	subtitle_size/1024.0
water	28:11	0:0	4	subtitle_size
op	28:25	0:0	4	/
water	28:27	0:0	4	1024
op	28:31	0:0	4	.
water	28:32	0:0	4	0
arg	29:11	29:30	3	other_size/1024.0
water	29:11	0:0	4	other_size
op	29:22	0:0	4	/
water	29:24	0:0	4	1024
op	29:28	0:0	4	.
water	29:29	0:0	4	0
arg	30:11	30:30	3	extra_size/1024.0
water	30:11	0:0	4	extra_size
op	30:22	0:0	4	/
water	30:24	0:0	4	1024
op	30:28	0:0	4	.
water	30:29	0:0	4	0
water	30:31	0:0	2	;
if	31:4	32:50	2	(percent >= 0 . 0)
cond	31:8	31:21	3	percent >= 0 . 0
water	31:8	0:0	4	percent
op	31:16	0:0	4	>=
water	31:19	0:0	4	0
op	31:20	0:0	4	.
water	31:21	0:0	4	0
stmts	32:8	32:50	3	
call	32:8	32:49	4	av_log
arg	32:15	32:19	5	NULL
water	32:15	0:0	6	NULL
arg	32:21	32:32	5	AV_LOG_INFO
water	32:21	0:0	6	AV_LOG_INFO
arg	32:34	32:40	5	"%f%%"
water	32:34	0:0	6	"%f%%"
arg	32:42	32:49	5	percent
water	32:42	0:0	6	percent
water	32:50	0:0	4	;
else	33:4	34:44	2
stmts	34:8	34:44	3	
call	34:8	34:43	4	av_log
arg	34:15	34:19	5	NULL
water	34:15	0:0	6	NULL
arg	34:21	34:32	5	AV_LOG_INFO
water	34:21	0:0	6	AV_LOG_INFO
arg	34:34	34:43	5	"unknown"
water	34:34	0:0	6	"unknown"
water	34:44	0:0	4	;
call	35:4	35:34	2	av_log
arg	35:11	35:15	3	NULL
water	35:11	0:0	4	NULL
arg	35:17	35:28	3	AV_LOG_INFO
water	35:17	0:0	4	AV_LOG_INFO
arg	35:30	35:34	3	"\n"
water	35:30	0:0	4	"\n"
water	35:35	0:0	2	;
for	37:4	62:4	2	(i = 0 ;i < nb_input_files;i ++)
forinit	37:9	37:14	3	i = 0 ;
water	37:9	0:0	4	i
op	37:11	0:0	4	=
water	37:13	0:0	4	0
water	37:14	0:0	4	;
cond	37:16	37:20	3	i < nb_input_files
water	37:16	0:0	4	i
op	37:18	0:0	4	<
water	37:20	0:0	4	nb_input_files
forexpr	37:36	37:37	3	i ++
water	37:36	0:0	4	i
op	37:37	0:0	4	++
stmts	37:41	62:4	3	
water	37:41	0:0	4	{
decl	38:8	38:37	4	InputFile	*f
op	38:21	0:0	4	=
water	38:23	0:0	4	input_files
op	38:34	0:0	4	[
water	38:35	0:0	4	i
op	38:36	0:0	4	]
decl	39:8	39:50	4	uint64_t	total_packets
op	39:31	0:0	4	=
water	39:33	0:0	4	0
water	39:34	0:0	4	,
decl	39:8	39:50	4	uint64_t	total_size
op	39:47	0:0	4	=
water	39:49	0:0	4	0
call	40:8	41:34	4	av_log
arg	40:15	40:19	5	NULL
water	40:15	0:0	6	NULL
arg	40:21	40:35	5	AV_LOG_VERBOSE
water	40:21	0:0	6	AV_LOG_VERBOSE
arg	40:37	40:61	5	"Input file #%d (%s):\n"
water	40:37	0:0	6	"Input file #%d (%s):\n"
arg	41:15	41:16	5	i
water	41:15	0:0	6	i
arg	41:18	41:34	5	f->ctx->filename
water	41:18	0:0	6	f
op	41:19	0:0	6	->
water	41:21	0:0	6	ctx
op	41:24	0:0	6	->
water	41:26	0:0	6	filename
water	41:35	0:0	4	;
for	42:8	59:8	4	(j = 0 ;j < f -> nb_streams;j ++)
forinit	42:13	42:18	5	j = 0 ;
water	42:13	0:0	6	j
op	42:15	0:0	6	=
water	42:17	0:0	6	0
water	42:18	0:0	6	;
cond	42:20	42:27	5	j < f -> nb_streams
water	42:20	0:0	6	j
op	42:22	0:0	6	<
water	42:24	0:0	6	f
op	42:25	0:0	6	->
water	42:27	0:0	6	nb_streams
forexpr	42:39	42:40	5	j ++
water	42:39	0:0	6	j
op	42:40	0:0	6	++
stmts	42:44	59:8	5	
water	42:44	0:0	6	{
decl	43:12	43:62	6	InputStream	*ist
op	43:29	0:0	6	=
water	43:31	0:0	6	input_streams
op	43:44	0:0	6	[
water	43:45	0:0	6	f
op	43:46	0:0	6	->
water	43:48	0:0	6	ist_index
op	43:58	0:0	6	+
water	43:60	0:0	6	j
op	43:61	0:0	6	]
decl	44:12	44:60	6	enum AVMediaType	type
op	44:34	0:0	6	=
water	44:36	0:0	6	ist
op	44:39	0:0	6	->
water	44:41	0:0	6	dec_ctx
op	44:48	0:0	6	->
water	44:50	0:0	6	codec_type
water	45:12	0:0	6	total_size
op	45:26	0:0	6	+=
water	45:29	0:0	6	ist
op	45:32	0:0	6	->
water	45:34	0:0	6	data_size
water	45:43	0:0	6	;
water	46:12	0:0	6	total_packets
op	46:26	0:0	6	+=
water	46:29	0:0	6	ist
op	46:32	0:0	6	->
water	46:34	0:0	6	nb_packets
water	46:44	0:0	6	;
call	47:12	48:48	6	av_log
arg	47:19	47:23	7	NULL
water	47:19	0:0	8	NULL
arg	47:25	47:39	7	AV_LOG_VERBOSE
water	47:25	0:0	8	AV_LOG_VERBOSE
arg	47:41	47:71	7	"  Input stream #%d:%d (%s): "
water	47:41	0:0	8	"  Input stream #%d:%d (%s): "
arg	48:19	48:20	7	i
water	48:19	0:0	8	i
arg	48:22	48:23	7	j
water	48:22	0:0	8	j
arg	48:25	48:48	7	media_type_string(type)
call	48:25	48:47	8	media_type_string
arg	48:43	48:47	9	type
water	48:43	0:0	10	type
water	48:49	0:0	6	;
call	49:12	50:50	6	av_log
arg	49:19	49:23	7	NULL
water	49:19	0:0	8	NULL
arg	49:25	49:39	7	AV_LOG_VERBOSE
water	49:25	0:0	8	AV_LOG_VERBOSE
arg	49:41	49:85	7	"%"PRIu64" packets read (%"PRIu64" bytes); "
water	49:41	0:0	8	"%"
water	49:44	0:0	8	PRIu64
water	49:50	0:0	8	" packets read (%"
water	49:68	0:0	8	PRIu64
water	49:74	0:0	8	" bytes); "
arg	50:19	50:34	7	ist->nb_packets
water	50:19	0:0	8	ist
op	50:22	0:0	8	->
water	50:24	0:0	8	nb_packets
arg	50:36	50:50	7	ist->data_size
water	50:36	0:0	8	ist
op	50:39	0:0	8	->
water	50:41	0:0	8	data_size
water	50:51	0:0	6	;
if	51:12	57:12	6	(ist -> decoding_needed)
cond	51:16	51:21	7	ist -> decoding_needed
water	51:16	0:0	8	ist
op	51:19	0:0	8	->
water	51:21	0:0	8	decoding_needed
stmts	51:38	57:12	7	
water	51:38	0:0	8	{
call	52:16	53:42	8	av_log
arg	52:23	52:27	9	NULL
water	52:23	0:0	10	NULL
arg	52:29	52:43	9	AV_LOG_VERBOSE
water	52:29	0:0	10	AV_LOG_VERBOSE
arg	52:45	52:71	9	"%"PRIu64" frames decoded"
water	52:45	0:0	10	"%"
water	52:48	0:0	10	PRIu64
water	52:54	0:0	10	" frames decoded"
arg	53:23	53:42	9	ist->frames_decoded
water	53:23	0:0	10	ist
op	53:26	0:0	10	->
water	53:28	0:0	10	frames_decoded
water	53:43	0:0	8	;
if	54:16	55:94	8	(type == AVMEDIA_TYPE_AUDIO)
cond	54:20	54:28	9	type == AVMEDIA_TYPE_AUDIO
water	54:20	0:0	10	type
op	54:25	0:0	10	==
water	54:28	0:0	10	AVMEDIA_TYPE_AUDIO
stmts	55:20	55:94	9	
call	55:20	55:93	10	av_log
arg	55:27	55:31	11	NULL
water	55:27	0:0	12	NULL
arg	55:33	55:47	11	AV_LOG_VERBOSE
water	55:33	0:0	12	AV_LOG_VERBOSE
arg	55:49	55:71	11	" (%"PRIu64" samples)"
water	55:49	0:0	12	" (%"
water	55:54	0:0	12	PRIu64
water	55:60	0:0	12	" samples)"
arg	55:73	55:93	11	ist->samples_decoded
water	55:73	0:0	12	ist
op	55:76	0:0	12	->
water	55:78	0:0	12	samples_decoded
water	55:94	0:0	10	;
call	56:16	56:49	8	av_log
arg	56:23	56:27	9	NULL
water	56:23	0:0	10	NULL
arg	56:29	56:43	9	AV_LOG_VERBOSE
water	56:29	0:0	10	AV_LOG_VERBOSE
arg	56:45	56:49	9	"; "
water	56:45	0:0	10	"; "
water	56:50	0:0	8	;
water	57:12	0:0	8	}
call	58:12	58:45	6	av_log
arg	58:19	58:23	7	NULL
water	58:19	0:0	8	NULL
arg	58:25	58:39	7	AV_LOG_VERBOSE
water	58:25	0:0	8	AV_LOG_VERBOSE
arg	58:41	58:45	7	"\n"
water	58:41	0:0	8	"\n"
water	58:46	0:0	6	;
water	59:8	0:0	6	}
call	60:8	61:40	4	av_log
arg	60:15	60:19	5	NULL
water	60:15	0:0	6	NULL
arg	60:21	60:35	5	AV_LOG_VERBOSE
water	60:21	0:0	6	AV_LOG_VERBOSE
arg	60:37	60:93	5	"  Total: %"PRIu64" packets (%"PRIu64" bytes) demuxed\n"
water	60:37	0:0	6	"  Total: %"
water	60:49	0:0	6	PRIu64
water	60:55	0:0	6	" packets (%"
water	60:68	0:0	6	PRIu64
water	60:74	0:0	6	" bytes) demuxed\n"
arg	61:15	61:28	5	total_packets
water	61:15	0:0	6	total_packets
arg	61:30	61:40	5	total_size
water	61:30	0:0	6	total_size
water	61:41	0:0	4	;
water	62:4	0:0	4	}
for	63:4	88:4	2	(i = 0 ;i < nb_output_files;i ++)
forinit	63:9	63:14	3	i = 0 ;
water	63:9	0:0	4	i
op	63:11	0:0	4	=
water	63:13	0:0	4	0
water	63:14	0:0	4	;
cond	63:16	63:20	3	i < nb_output_files
water	63:16	0:0	4	i
op	63:18	0:0	4	<
water	63:20	0:0	4	nb_output_files
forexpr	63:37	63:38	3	i ++
water	63:37	0:0	4	i
op	63:38	0:0	4	++
stmts	63:42	88:4	3	
water	63:42	0:0	4	{
decl	64:8	64:40	4	OutputFile	*of
op	64:23	0:0	4	=
water	64:25	0:0	4	output_files
op	64:37	0:0	4	[
water	64:38	0:0	4	i
op	64:39	0:0	4	]
decl	65:8	65:50	4	uint64_t	total_packets
op	65:31	0:0	4	=
water	65:33	0:0	4	0
water	65:34	0:0	4	,
decl	65:8	65:50	4	uint64_t	total_size
op	65:47	0:0	4	=
water	65:49	0:0	4	0
call	66:8	67:35	4	av_log
arg	66:15	66:19	5	NULL
water	66:15	0:0	6	NULL
arg	66:21	66:35	5	AV_LOG_VERBOSE
water	66:21	0:0	6	AV_LOG_VERBOSE
arg	66:37	66:62	5	"Output file #%d (%s):\n"
water	66:37	0:0	6	"Output file #%d (%s):\n"
arg	67:15	67:16	5	i
water	67:15	0:0	6	i
arg	67:18	67:35	5	of->ctx->filename
water	67:18	0:0	6	of
op	67:20	0:0	6	->
water	67:22	0:0	6	ctx
op	67:25	0:0	6	->
water	67:27	0:0	6	filename
water	67:36	0:0	4	;
for	68:8	85:8	4	(j = 0 ;j < of -> ctx -> nb_streams;j ++)
forinit	68:13	68:18	5	j = 0 ;
water	68:13	0:0	6	j
op	68:15	0:0	6	=
water	68:17	0:0	6	0
water	68:18	0:0	6	;
cond	68:20	68:33	5	j < of -> ctx -> nb_streams
water	68:20	0:0	6	j
op	68:22	0:0	6	<
water	68:24	0:0	6	of
op	68:26	0:0	6	->
water	68:28	0:0	6	ctx
op	68:31	0:0	6	->
water	68:33	0:0	6	nb_streams
forexpr	68:45	68:46	5	j ++
water	68:45	0:0	6	j
op	68:46	0:0	6	++
stmts	68:50	85:8	5	
water	68:50	0:0	6	{
decl	69:12	69:65	6	OutputStream	*ost
op	69:30	0:0	6	=
water	69:32	0:0	6	output_streams
op	69:46	0:0	6	[
water	69:47	0:0	6	of
op	69:49	0:0	6	->
water	69:51	0:0	6	ost_index
op	69:61	0:0	6	+
water	69:63	0:0	6	j
op	69:64	0:0	6	]
decl	70:12	70:60	6	enum AVMediaType	type
op	70:34	0:0	6	=
water	70:36	0:0	6	ost
op	70:39	0:0	6	->
water	70:41	0:0	6	enc_ctx
op	70:48	0:0	6	->
water	70:50	0:0	6	codec_type
water	71:12	0:0	6	total_size
op	71:26	0:0	6	+=
water	71:29	0:0	6	ost
op	71:32	0:0	6	->
water	71:34	0:0	6	data_size
water	71:43	0:0	6	;
water	72:12	0:0	6	total_packets
op	72:26	0:0	6	+=
water	72:29	0:0	6	ost
op	72:32	0:0	6	->
water	72:34	0:0	6	packets_written
water	72:49	0:0	6	;
call	73:12	74:48	6	av_log
arg	73:19	73:23	7	NULL
water	73:19	0:0	8	NULL
arg	73:25	73:39	7	AV_LOG_VERBOSE
water	73:25	0:0	8	AV_LOG_VERBOSE
arg	73:41	73:72	7	"  Output stream #%d:%d (%s): "
water	73:41	0:0	8	"  Output stream #%d:%d (%s): "
arg	74:19	74:20	7	i
water	74:19	0:0	8	i
arg	74:22	74:23	7	j
water	74:22	0:0	8	j
arg	74:25	74:48	7	media_type_string(type)
call	74:25	74:47	8	media_type_string
arg	74:43	74:47	9	type
water	74:43	0:0	10	type
water	74:49	0:0	6	;
if	75:12	81:12	6	(ost -> encoding_needed)
cond	75:16	75:21	7	ost -> encoding_needed
water	75:16	0:0	8	ost
op	75:19	0:0	8	->
water	75:21	0:0	8	encoding_needed
stmts	75:38	81:12	7	
water	75:38	0:0	8	{
call	76:16	77:42	8	av_log
arg	76:23	76:27	9	NULL
water	76:23	0:0	10	NULL
arg	76:29	76:43	9	AV_LOG_VERBOSE
water	76:29	0:0	10	AV_LOG_VERBOSE
arg	76:45	76:71	9	"%"PRIu64" frames encoded"
water	76:45	0:0	10	"%"
water	76:48	0:0	10	PRIu64
water	76:54	0:0	10	" frames encoded"
arg	77:23	77:42	9	ost->frames_encoded
water	77:23	0:0	10	ost
op	77:26	0:0	10	->
water	77:28	0:0	10	frames_encoded
water	77:43	0:0	8	;
if	78:16	79:94	8	(type == AVMEDIA_TYPE_AUDIO)
cond	78:20	78:28	9	type == AVMEDIA_TYPE_AUDIO
water	78:20	0:0	10	type
op	78:25	0:0	10	==
water	78:28	0:0	10	AVMEDIA_TYPE_AUDIO
stmts	79:20	79:94	9	
call	79:20	79:93	10	av_log
arg	79:27	79:31	11	NULL
water	79:27	0:0	12	NULL
arg	79:33	79:47	11	AV_LOG_VERBOSE
water	79:33	0:0	12	AV_LOG_VERBOSE
arg	79:49	79:71	11	" (%"PRIu64" samples)"
water	79:49	0:0	12	" (%"
water	79:54	0:0	12	PRIu64
water	79:60	0:0	12	" samples)"
arg	79:73	79:93	11	ost->samples_encoded
water	79:73	0:0	12	ost
op	79:76	0:0	12	->
water	79:78	0:0	12	samples_encoded
water	79:94	0:0	10	;
call	80:16	80:49	8	av_log
arg	80:23	80:27	9	NULL
water	80:23	0:0	10	NULL
arg	80:29	80:43	9	AV_LOG_VERBOSE
water	80:29	0:0	10	AV_LOG_VERBOSE
arg	80:45	80:49	9	"; "
water	80:45	0:0	10	"; "
water	80:50	0:0	8	;
water	81:12	0:0	8	}
call	82:12	83:55	6	av_log
arg	82:19	82:23	7	NULL
water	82:19	0:0	8	NULL
arg	82:25	82:39	7	AV_LOG_VERBOSE
water	82:25	0:0	8	AV_LOG_VERBOSE
arg	82:41	82:86	7	"%"PRIu64" packets muxed (%"PRIu64" bytes); "
water	82:41	0:0	8	"%"
water	82:44	0:0	8	PRIu64
water	82:50	0:0	8	" packets muxed (%"
water	82:69	0:0	8	PRIu64
water	82:75	0:0	8	" bytes); "
arg	83:19	83:39	7	ost->packets_written
water	83:19	0:0	8	ost
op	83:22	0:0	8	->
water	83:24	0:0	8	packets_written
arg	83:41	83:55	7	ost->data_size
water	83:41	0:0	8	ost
op	83:44	0:0	8	->
water	83:46	0:0	8	data_size
water	83:56	0:0	6	;
call	84:12	84:45	6	av_log
arg	84:19	84:23	7	NULL
water	84:19	0:0	8	NULL
arg	84:25	84:39	7	AV_LOG_VERBOSE
water	84:25	0:0	8	AV_LOG_VERBOSE
arg	84:41	84:45	7	"\n"
water	84:41	0:0	8	"\n"
water	84:46	0:0	6	;
water	85:8	0:0	6	}
call	86:8	87:40	4	av_log
arg	86:15	86:19	5	NULL
water	86:15	0:0	6	NULL
arg	86:21	86:35	5	AV_LOG_VERBOSE
water	86:21	0:0	6	AV_LOG_VERBOSE
arg	86:37	86:91	5	"  Total: %"PRIu64" packets (%"PRIu64" bytes) muxed\n"
water	86:37	0:0	6	"  Total: %"
water	86:49	0:0	6	PRIu64
water	86:55	0:0	6	" packets (%"
water	86:68	0:0	6	PRIu64
water	86:74	0:0	6	" bytes) muxed\n"
arg	87:15	87:28	5	total_packets
water	87:15	0:0	6	total_packets
arg	87:30	87:40	5	total_size
water	87:30	0:0	6	total_size
water	87:41	0:0	4	;
water	88:4	0:0	4	}
if	89:4	96:4	2	(video_size + data_size + audio_size + subtitle_size + extra_size == 0)
cond	89:7	89:75	3	video_size + data_size + audio_size + subtitle_size + extra_size == 0
water	89:7	0:0	4	video_size
op	89:18	0:0	4	+
water	89:20	0:0	4	data_size
op	89:30	0:0	4	+
water	89:32	0:0	4	audio_size
op	89:43	0:0	4	+
water	89:45	0:0	4	subtitle_size
op	89:59	0:0	4	+
water	89:61	0:0	4	extra_size
op	89:72	0:0	4	==
water	89:75	0:0	4	0
stmts	89:77	96:4	3	
water	89:77	0:0	4	{
call	90:8	90:81	4	av_log
arg	90:15	90:19	5	NULL
water	90:15	0:0	6	NULL
arg	90:21	90:35	5	AV_LOG_WARNING
water	90:21	0:0	6	AV_LOG_WARNING
arg	90:37	90:81	5	"Output file is empty, nothing was encoded "
water	90:37	0:0	6	"Output file is empty, nothing was encoded "
water	90:82	0:0	4	;
if	91:8	93:8	4	(pass1_used)
cond	91:12	91:12	5	pass1_used
water	91:12	0:0	6	pass1_used
stmts	91:24	93:8	5	
water	91:24	0:0	6	{
call	92:12	92:45	6	av_log
arg	92:19	92:23	7	NULL
water	92:19	0:0	8	NULL
arg	92:25	92:39	7	AV_LOG_WARNING
water	92:25	0:0	8	AV_LOG_WARNING
arg	92:41	92:45	7	"\n"
water	92:41	0:0	8	"\n"
water	92:46	0:0	6	;
water	93:8	0:0	6	}
else	93:10	95:8	4
stmts	93:15	95:8	5	
water	93:15	0:0	6	{
call	94:12	94:90	6	av_log
arg	94:19	94:23	7	NULL
water	94:19	0:0	8	NULL
arg	94:25	94:39	7	AV_LOG_WARNING
water	94:25	0:0	8	AV_LOG_WARNING
arg	94:41	94:90	7	"(check -ss / -t / -frames parameters if used)\n"
water	94:41	0:0	8	"(check -ss / -t / -frames parameters if used)\n"
water	94:91	0:0	6	;
water	95:8	0:0	6	}
water	96:4	0:0	4	}
