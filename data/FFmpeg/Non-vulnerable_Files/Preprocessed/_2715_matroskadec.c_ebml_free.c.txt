func	1:0	29:0	0	static void	ebml_free
params	1:21	0:0	1	
param	1:22	1:40	2	EbmlSyntax *	syntax
param	1:42	1:52	2	void *	data
stmnts	0:0	28:4	1	
decl	3:4	3:12	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:12	2	int	j
for	4:4	28:4	2	(i = 0 ;syntax [ i ] . id;i ++)
forinit	4:9	4:14	3	i = 0 ;
water	4:9	0:0	4	i
op	4:11	0:0	4	=
water	4:13	0:0	4	0
water	4:14	0:0	4	;
cond	4:16	4:26	3	syntax [ i ] . id
water	4:16	0:0	4	syntax
op	4:22	0:0	4	[
water	4:23	0:0	4	i
op	4:24	0:0	4	]
op	4:25	0:0	4	.
water	4:26	0:0	4	id
forexpr	4:30	4:31	3	i ++
water	4:30	0:0	4	i
op	4:31	0:0	4	++
stmts	4:35	28:4	3	
water	4:35	0:0	4	{
decl	5:8	5:62	4	void	*data_off
op	5:23	0:0	4	=
water	5:25	0:0	4	(
water	5:26	0:0	4	char
op	5:31	0:0	4	*
water	5:32	0:0	4	)
water	5:34	0:0	4	data
op	5:39	0:0	4	+
water	5:41	0:0	4	syntax
op	5:47	0:0	4	[
water	5:48	0:0	4	i
op	5:49	0:0	4	]
op	5:50	0:0	4	.
water	5:51	0:0	4	data_offset
switch	6:8	27:8	4	(syntax [ i ] . type)
cond	6:16	6:26	5	syntax [ i ] . type
water	6:16	0:0	6	syntax
op	6:22	0:0	6	[
water	6:23	0:0	6	i
op	6:24	0:0	6	]
op	6:25	0:0	6	.
water	6:26	0:0	6	type
stmts	6:32	27:8	5	
water	6:32	0:0	6	{
label	7:8	7:21	6	case EBML_STR :
label	8:8	8:22	6	case EBML_UTF8 :
call	9:12	9:29	6	av_freep
arg	9:21	9:29	7	data_off
water	9:21	0:0	8	data_off
water	9:30	0:0	6	;
break	10:12	10:17	6	
label	11:8	11:21	6	case EBML_BIN :
call	12:12	12:50	6	av_freep
arg	12:21	12:50	7	&((EbmlBin*)data_off)->data
op	12:21	0:0	8	&
water	12:22	0:0	8	(
water	12:23	0:0	8	(
water	12:24	0:0	8	EbmlBin
op	12:32	0:0	8	*
water	12:33	0:0	8	)
water	12:35	0:0	8	data_off
water	12:43	0:0	8	)
op	12:44	0:0	8	->
water	12:46	0:0	8	data
water	12:51	0:0	6	;
break	13:12	13:17	6	
label	14:8	14:24	6	case EBML_LEVEL1 :
label	15:8	15:22	6	case EBML_NEST :
if	16:12	23:12	6	(syntax [ i ] . list_elem_size)
cond	16:16	16:26	7	syntax [ i ] . list_elem_size
water	16:16	0:0	8	syntax
op	16:22	0:0	8	[
water	16:23	0:0	8	i
op	16:24	0:0	8	]
op	16:25	0:0	8	.
water	16:26	0:0	8	list_elem_size
stmts	16:42	23:12	7	
water	16:42	0:0	8	{
decl	17:16	17:41	8	EbmlList	*list
op	17:31	0:0	8	=
water	17:33	0:0	8	data_off
decl	18:16	18:38	8	char	*ptr
op	18:26	0:0	8	=
water	18:28	0:0	8	list
op	18:32	0:0	8	->
water	18:34	0:0	8	elem
for	19:16	21:51	8	(j = 0 ;j < list -> nb_elem;j ++ , ptr += syntax [ i ] . list_elem_size)
forinit	19:21	19:26	9	j = 0 ;
water	19:21	0:0	10	j
op	19:23	0:0	10	=
water	19:25	0:0	10	0
water	19:26	0:0	10	;
cond	19:28	19:38	9	j < list -> nb_elem
water	19:28	0:0	10	j
op	19:30	0:0	10	<
water	19:32	0:0	10	list
op	19:36	0:0	10	->
water	19:38	0:0	10	nb_elem
forexpr	20:21	20:43	9	j ++ , ptr += syntax [ i ] . list_elem_size
water	20:21	0:0	10	j
op	20:22	0:0	10	++
water	20:24	0:0	10	,
water	20:26	0:0	10	ptr
op	20:30	0:0	10	+=
water	20:33	0:0	10	syntax
op	20:39	0:0	10	[
water	20:40	0:0	10	i
op	20:41	0:0	10	]
op	20:42	0:0	10	.
water	20:43	0:0	10	list_elem_size
stmts	21:20	21:51	9	
call	21:20	21:50	10	ebml_free
arg	21:30	21:45	11	syntax[i].def.n
water	21:30	0:0	12	syntax
op	21:36	0:0	12	[
water	21:37	0:0	12	i
op	21:38	0:0	12	]
op	21:39	0:0	12	.
water	21:40	0:0	12	def
op	21:43	0:0	12	.
water	21:44	0:0	12	n
arg	21:47	21:50	11	ptr
water	21:47	0:0	12	ptr
water	21:51	0:0	10	;
call	22:16	22:36	8	av_freep
arg	22:25	22:36	9	&list->elem
op	22:25	0:0	10	&
water	22:26	0:0	10	list
op	22:30	0:0	10	->
water	22:32	0:0	10	elem
water	22:37	0:0	8	;
water	23:12	0:0	8	}
else	23:14	24:52	6
stmts	24:16	24:52	7	
call	24:16	24:51	8	ebml_free
arg	24:26	24:41	9	syntax[i].def.n
water	24:26	0:0	10	syntax
op	24:32	0:0	10	[
water	24:33	0:0	10	i
op	24:34	0:0	10	]
op	24:35	0:0	10	.
water	24:36	0:0	10	def
op	24:39	0:0	10	.
water	24:40	0:0	10	n
arg	24:43	24:51	9	data_off
water	24:43	0:0	10	data_off
water	24:52	0:0	8	;
label	25:8	25:15	6	default :
break	26:12	26:17	6	
water	27:8	0:0	6	}
water	28:4	0:0	4	}
