func	1:0	14:0	0	double	ff_timefilter_update
params	1:27	0:0	1	
param	1:28	1:44	2	TimeFilter *	self
param	1:46	1:64	2	double	system_time
param	1:66	1:79	2	double	period
stmnts	3:4	13:27	1	
water	3:4	0:0	2	self
op	3:8	0:0	2	->
water	3:10	0:0	2	count
op	3:15	0:0	2	++
water	3:17	0:0	2	;
if	4:4	6:4	2	(self -> count == 1)
cond	4:8	4:23	3	self -> count == 1
water	4:8	0:0	4	self
op	4:12	0:0	4	->
water	4:14	0:0	4	count
op	4:20	0:0	4	==
water	4:23	0:0	4	1
stmts	4:26	6:4	3	
water	4:26	0:0	4	{
water	5:8	0:0	4	self
op	5:12	0:0	4	->
water	5:14	0:0	4	cycle_time
op	5:25	0:0	4	=
water	5:27	0:0	4	system_time
water	5:38	0:0	4	;
water	6:4	0:0	4	}
else	6:6	12:4	2
stmts	6:11	12:4	3	
water	6:11	0:0	4	{
decl	7:8	7:25	4	double	loop_error
water	8:8	0:0	4	self
op	8:12	0:0	4	->
water	8:14	0:0	4	cycle_time
op	8:25	0:0	4	+=
water	8:28	0:0	4	self
op	8:32	0:0	4	->
water	8:34	0:0	4	clock_period
op	8:47	0:0	4	*
water	8:49	0:0	4	period
water	8:55	0:0	4	;
water	9:8	0:0	4	loop_error
op	9:19	0:0	4	=
water	9:21	0:0	4	system_time
op	9:33	0:0	4	-
water	9:35	0:0	4	self
op	9:39	0:0	4	->
water	9:41	0:0	4	cycle_time
water	9:51	0:0	4	;
water	10:8	0:0	4	self
op	10:12	0:0	4	->
water	10:14	0:0	4	cycle_time
op	10:27	0:0	4	+=
call	10:30	10:77	4	FFMAX
arg	10:36	10:58	5	self->feedback2_factor
water	10:36	0:0	6	self
op	10:40	0:0	6	->
water	10:42	0:0	6	feedback2_factor
arg	10:60	10:77	5	1.0/self->count
water	10:60	0:0	6	1
op	10:61	0:0	6	.
water	10:62	0:0	6	0
op	10:64	0:0	6	/
water	10:66	0:0	6	self
op	10:70	0:0	6	->
water	10:72	0:0	6	count
op	10:79	0:0	4	*
water	10:81	0:0	4	loop_error
water	10:91	0:0	4	;
water	11:8	0:0	4	self
op	11:12	0:0	4	->
water	11:14	0:0	4	clock_period
op	11:27	0:0	4	+=
water	11:30	0:0	4	self
op	11:34	0:0	4	->
water	11:36	0:0	4	feedback3_factor
op	11:53	0:0	4	*
water	11:55	0:0	4	loop_error
water	11:65	0:0	4	;
water	12:4	0:0	4	}
return	13:4	13:27	2	self->cycle_time
water	13:11	0:0	3	self
op	13:15	0:0	3	->
water	13:17	0:0	3	cycle_time
