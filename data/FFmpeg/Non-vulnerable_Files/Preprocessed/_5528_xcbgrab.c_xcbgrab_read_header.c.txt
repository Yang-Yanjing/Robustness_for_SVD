func	1:15	53:0	0	int	xcbgrab_read_header
params	1:38	0:0	1	
param	1:39	1:57	2	AVFormatContext *	s
stmnts	0:0	52:12	1	
decl	3:4	3:36	2	XCBGrabContext	*c
op	3:22	0:0	2	=
water	3:24	0:0	2	s
op	3:25	0:0	2	->
water	3:27	0:0	2	priv_data
decl	4:4	4:23	2	int	screen_num
water	4:18	0:0	2	,
decl	4:4	4:23	2	int	ret
decl	5:4	5:28	2	const xcb_setup_t	*setup
decl	6:4	6:47	2	char	*display_name
op	6:23	0:0	2	=
call	6:25	6:46	3	av_strdup
arg	6:35	6:46	4	s->filename
water	6:35	0:0	5	s
op	6:36	0:0	5	->
water	6:38	0:0	5	filename
if	7:4	8:30	2	(! display_name)
cond	7:8	7:9	3	! display_name
op	7:8	0:0	4	!
water	7:9	0:0	4	display_name
stmts	8:8	8:30	3	
return	8:8	8:30	4	AVERROR(ENOMEM)
call	8:15	8:29	5	AVERROR
arg	8:23	8:29	6	ENOMEM
water	8:23	0:0	7	ENOMEM
if	9:4	12:4	2	(!sscanf (s -> filename ,"%[^+]+%d,%d" ,display_name ,& c -> x ,& c -> y ))
cond	9:8	9:70	3	!sscanf (s -> filename ,"%[^+]+%d,%d" ,display_name ,& c -> x ,& c -> y )
op	9:8	0:0	4	!
call	9:9	9:70	4	sscanf
arg	9:16	9:27	5	s->filename
water	9:16	0:0	6	s
op	9:17	0:0	6	->
water	9:19	0:0	6	filename
arg	9:29	9:42	5	"%[^+]+%d,%d"
water	9:29	0:0	6	"%[^+]+%d,%d"
arg	9:44	9:56	5	display_name
water	9:44	0:0	6	display_name
arg	9:58	9:63	5	&c->x
op	9:58	0:0	6	&
water	9:59	0:0	6	c
op	9:60	0:0	6	->
water	9:62	0:0	6	x
arg	9:65	9:70	5	&c->y
op	9:65	0:0	6	&
water	9:66	0:0	6	c
op	9:67	0:0	6	->
water	9:69	0:0	6	y
stmts	9:73	12:4	3	
water	9:73	0:0	4	{
op	10:8	0:0	4	*
water	10:9	0:0	4	display_name
op	10:22	0:0	4	=
water	10:24	0:0	4	0
water	10:25	0:0	4	;
call	11:8	11:50	4	sscanf
arg	11:15	11:26	5	s->filename
water	11:15	0:0	6	s
op	11:16	0:0	6	->
water	11:18	0:0	6	filename
arg	11:28	11:36	5	"+%d,%d"
water	11:28	0:0	6	"+%d,%d"
arg	11:38	11:43	5	&c->x
op	11:38	0:0	6	&
water	11:39	0:0	6	c
op	11:40	0:0	6	->
water	11:42	0:0	6	x
arg	11:45	11:50	5	&c->y
op	11:45	0:0	6	&
water	11:46	0:0	6	c
op	11:47	0:0	6	->
water	11:49	0:0	6	y
water	11:51	0:0	4	;
water	12:4	0:0	4	}
water	13:4	0:0	2	c
op	13:5	0:0	2	->
water	13:7	0:0	2	conn
op	13:12	0:0	2	=
call	13:14	13:76	2	xcb_connect
arg	13:26	13:63	3	display_name[0]?display_name:NULL
water	13:26	0:0	4	display_name
op	13:38	0:0	4	[
water	13:39	0:0	4	0
op	13:40	0:0	4	]
water	13:42	0:0	4	?
water	13:44	0:0	4	display_name
water	13:57	0:0	4	:
water	13:59	0:0	4	NULL
arg	13:65	13:76	3	&screen_num
op	13:65	0:0	4	&
water	13:66	0:0	4	screen_num
water	13:77	0:0	2	;
call	14:4	14:26	2	av_freep
arg	14:13	14:26	3	&display_name
op	14:13	0:0	4	&
water	14:14	0:0	4	display_name
water	14:27	0:0	2	;
if	15:4	19:4	2	(( ret =xcb_connection_has_error (c -> conn ) ))
cond	15:8	15:48	3	( ret =xcb_connection_has_error (c -> conn ) )
water	15:8	0:0	4	(
water	15:9	0:0	4	ret
op	15:13	0:0	4	=
call	15:15	15:47	4	xcb_connection_has_error
arg	15:40	15:47	5	c->conn
water	15:40	0:0	6	c
op	15:41	0:0	6	->
water	15:43	0:0	6	conn
water	15:48	0:0	4	)
stmts	15:51	19:4	3	
water	15:51	0:0	4	{
call	16:8	17:60	4	av_log
arg	16:15	16:16	5	s
water	16:15	0:0	6	s
arg	16:18	16:30	5	AV_LOG_ERROR
water	16:18	0:0	6	AV_LOG_ERROR
arg	16:32	16:69	5	"Cannot open display %s, error %d.\n"
water	16:32	0:0	6	"Cannot open display %s, error %d.\n"
arg	17:15	17:55	5	s->filename[0]?s->filename:"default"
water	17:15	0:0	6	s
op	17:16	0:0	6	->
water	17:18	0:0	6	filename
op	17:26	0:0	6	[
water	17:27	0:0	6	0
op	17:28	0:0	6	]
water	17:30	0:0	6	?
water	17:32	0:0	6	s
op	17:33	0:0	6	->
water	17:35	0:0	6	filename
water	17:44	0:0	6	:
water	17:46	0:0	6	"default"
arg	17:57	17:60	5	ret
water	17:57	0:0	6	ret
water	17:61	0:0	4	;
return	18:8	18:27	4	AVERROR(EIO)
call	18:15	18:26	5	AVERROR
arg	18:23	18:26	6	EIO
water	18:23	0:0	7	EIO
water	19:4	0:0	4	}
water	20:4	0:0	2	setup
op	20:10	0:0	2	=
call	20:12	20:33	2	xcb_get_setup
arg	20:26	20:33	3	c->conn
water	20:26	0:0	4	c
op	20:27	0:0	4	->
water	20:29	0:0	4	conn
water	20:34	0:0	2	;
water	21:4	0:0	2	c
op	21:5	0:0	2	->
water	21:7	0:0	2	screen
op	21:14	0:0	2	=
call	21:16	21:44	2	get_screen
arg	21:27	21:32	3	setup
water	21:27	0:0	4	setup
arg	21:34	21:44	3	screen_num
water	21:34	0:0	4	screen_num
water	21:45	0:0	2	;
if	22:4	27:4	2	(! c -> screen)
cond	22:8	22:12	3	! c -> screen
op	22:8	0:0	4	!
water	22:9	0:0	4	c
op	22:10	0:0	4	->
water	22:12	0:0	4	screen
stmts	22:20	27:4	3	
water	22:20	0:0	4	{
call	23:8	24:25	4	av_log
arg	23:15	23:16	5	s
water	23:15	0:0	6	s
arg	23:18	23:30	5	AV_LOG_ERROR
water	23:18	0:0	6	AV_LOG_ERROR
arg	23:32	23:65	5	"The screen %d does not exist.\n"
water	23:32	0:0	6	"The screen %d does not exist.\n"
arg	24:15	24:25	5	screen_num
water	24:15	0:0	6	screen_num
water	24:26	0:0	4	;
call	25:8	25:28	4	xcbgrab_read_close
arg	25:27	25:28	5	s
water	25:27	0:0	6	s
water	25:29	0:0	4	;
return	26:8	26:27	4	AVERROR(EIO)
call	26:15	26:26	5	AVERROR
arg	26:23	26:26	6	EIO
water	26:23	0:0	7	EIO
water	27:4	0:0	4	}
water	28:4	0:0	2	ret
op	28:8	0:0	2	=
call	28:10	28:25	2	create_stream
arg	28:24	28:25	3	s
water	28:24	0:0	4	s
water	28:26	0:0	2	;
if	29:4	32:4	2	(ret < 0)
cond	29:8	29:14	3	ret < 0
water	29:8	0:0	4	ret
op	29:12	0:0	4	<
water	29:14	0:0	4	0
stmts	29:17	32:4	3	
water	29:17	0:0	4	{
call	30:8	30:28	4	xcbgrab_read_close
arg	30:27	30:28	5	s
water	30:27	0:0	6	s
water	30:29	0:0	4	;
return	31:8	31:18	4	ret
water	31:15	0:0	5	ret
water	32:4	0:0	4	}
if	34:4	35:45	2	(( c -> has_shm =check_shm (c -> conn ) ))
cond	34:8	34:40	3	( c -> has_shm =check_shm (c -> conn ) )
water	34:8	0:0	4	(
water	34:9	0:0	4	c
op	34:10	0:0	4	->
water	34:12	0:0	4	has_shm
op	34:20	0:0	4	=
call	34:22	34:39	4	check_shm
arg	34:32	34:39	5	c->conn
water	34:32	0:0	6	c
op	34:33	0:0	6	->
water	34:35	0:0	6	conn
water	34:40	0:0	4	)
stmts	35:8	35:45	3	
water	35:8	0:0	4	c
op	35:9	0:0	4	->
water	35:11	0:0	4	segment
op	35:19	0:0	4	=
call	35:21	35:44	4	xcb_generate_id
arg	35:37	35:44	5	c->conn
water	35:37	0:0	6	c
op	35:38	0:0	6	->
water	35:40	0:0	6	conn
water	35:45	0:0	4	;
if	38:4	48:4	2	(c -> draw_mouse)
cond	38:8	38:11	3	c -> draw_mouse
water	38:8	0:0	4	c
op	38:9	0:0	4	->
water	38:11	0:0	4	draw_mouse
stmts	38:23	48:4	3	
water	38:23	0:0	4	{
if	39:8	42:8	4	(! ( c -> draw_mouse =check_xfixes (c -> conn ) ))
cond	39:12	39:51	5	! ( c -> draw_mouse =check_xfixes (c -> conn ) )
op	39:12	0:0	6	!
water	39:13	0:0	6	(
water	39:14	0:0	6	c
op	39:15	0:0	6	->
water	39:17	0:0	6	draw_mouse
op	39:28	0:0	6	=
call	39:30	39:50	6	check_xfixes
arg	39:43	39:50	7	c->conn
water	39:43	0:0	8	c
op	39:44	0:0	8	->
water	39:46	0:0	8	conn
water	39:51	0:0	6	)
stmts	39:54	42:8	5	
water	39:54	0:0	6	{
call	40:12	41:67	6	av_log
arg	40:19	40:20	7	s
water	40:19	0:0	8	s
arg	40:22	40:36	7	AV_LOG_WARNING
water	40:22	0:0	8	AV_LOG_WARNING
arg	41:19	41:67	7	"XFixes not available, cannot draw the mouse.\n"
water	41:19	0:0	8	"XFixes not available, cannot draw the mouse.\n"
water	41:68	0:0	6	;
water	42:8	0:0	6	}
if	43:8	47:8	4	(c -> bpp < 24)
cond	43:12	43:21	5	c -> bpp < 24
water	43:12	0:0	6	c
op	43:13	0:0	6	->
water	43:15	0:0	6	bpp
op	43:19	0:0	6	<
water	43:21	0:0	6	24
stmts	43:25	47:8	5	
water	43:25	0:0	6	{
call	44:12	45:48	6	avpriv_report_missing_feature
arg	44:42	44:43	7	s
water	44:42	0:0	8	s
arg	44:45	44:71	7	"%d bits per pixel screen"
water	44:45	0:0	8	"%d bits per pixel screen"
arg	45:42	45:48	7	c->bpp
water	45:42	0:0	8	c
op	45:43	0:0	8	->
water	45:45	0:0	8	bpp
water	45:49	0:0	6	;
water	46:12	0:0	6	c
op	46:13	0:0	6	->
water	46:15	0:0	6	draw_mouse
op	46:26	0:0	6	=
water	46:28	0:0	6	0
water	46:29	0:0	6	;
water	47:8	0:0	6	}
water	48:4	0:0	4	}
if	50:4	51:23	2	(c -> show_region)
cond	50:8	50:11	3	c -> show_region
water	50:8	0:0	4	c
op	50:9	0:0	4	->
water	50:11	0:0	4	show_region
stmts	51:8	51:23	3	
call	51:8	51:22	4	setup_window
arg	51:21	51:22	5	s
water	51:21	0:0	6	s
water	51:23	0:0	4	;
return	52:4	52:12	2	0
water	52:11	0:0	3	0
