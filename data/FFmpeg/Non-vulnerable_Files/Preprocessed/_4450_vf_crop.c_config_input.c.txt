func	1:0	86:0	0	static int	config_input
params	1:23	0:0	1	
param	1:24	1:42	2	AVFilterLink *	link
stmnts	0:0	85:14	1	
decl	3:4	3:36	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	link
op	3:31	0:0	2	->
water	3:33	0:0	2	dst
decl	4:4	4:30	2	CropContext	*s
op	4:19	0:0	2	=
water	4:21	0:0	2	ctx
op	4:24	0:0	2	->
water	4:26	0:0	2	priv
decl	5:4	5:74	2	const AVPixFmtDescriptor	*pix_desc
op	5:39	0:0	2	=
call	5:41	5:73	3	av_pix_fmt_desc_get
arg	5:61	5:73	4	link->format
water	5:61	0:0	5	link
op	5:65	0:0	5	->
water	5:67	0:0	5	format
decl	6:4	6:11	2	int	ret
decl	7:4	7:20	2	const char	*expr
decl	8:4	8:14	2	double	res
water	9:4	0:0	2	s
op	9:5	0:0	2	->
water	9:7	0:0	2	var_values
op	9:17	0:0	2	[
water	9:18	0:0	2	VAR_IN_W
op	9:26	0:0	2	]
op	9:29	0:0	2	=
water	9:31	0:0	2	s
op	9:32	0:0	2	->
water	9:34	0:0	2	var_values
op	9:44	0:0	2	[
water	9:45	0:0	2	VAR_IW
op	9:51	0:0	2	]
op	9:53	0:0	2	=
water	9:55	0:0	2	ctx
op	9:58	0:0	2	->
water	9:60	0:0	2	inputs
op	9:66	0:0	2	[
water	9:67	0:0	2	0
op	9:68	0:0	2	]
op	9:69	0:0	2	->
water	9:71	0:0	2	w
water	9:72	0:0	2	;
water	10:4	0:0	2	s
op	10:5	0:0	2	->
water	10:7	0:0	2	var_values
op	10:17	0:0	2	[
water	10:18	0:0	2	VAR_IN_H
op	10:26	0:0	2	]
op	10:29	0:0	2	=
water	10:31	0:0	2	s
op	10:32	0:0	2	->
water	10:34	0:0	2	var_values
op	10:44	0:0	2	[
water	10:45	0:0	2	VAR_IH
op	10:51	0:0	2	]
op	10:53	0:0	2	=
water	10:55	0:0	2	ctx
op	10:58	0:0	2	->
water	10:60	0:0	2	inputs
op	10:66	0:0	2	[
water	10:67	0:0	2	0
op	10:68	0:0	2	]
op	10:69	0:0	2	->
water	10:71	0:0	2	h
water	10:72	0:0	2	;
water	11:4	0:0	2	s
op	11:5	0:0	2	->
water	11:7	0:0	2	var_values
op	11:17	0:0	2	[
water	11:18	0:0	2	VAR_A
op	11:23	0:0	2	]
op	11:29	0:0	2	=
water	11:31	0:0	2	(
water	11:32	0:0	2	float
water	11:37	0:0	2	)
water	11:39	0:0	2	link
op	11:43	0:0	2	->
water	11:45	0:0	2	w
op	11:47	0:0	2	/
water	11:49	0:0	2	link
op	11:53	0:0	2	->
water	11:55	0:0	2	h
water	11:56	0:0	2	;
water	12:4	0:0	2	s
op	12:5	0:0	2	->
water	12:7	0:0	2	var_values
op	12:17	0:0	2	[
water	12:18	0:0	2	VAR_SAR
op	12:25	0:0	2	]
op	12:29	0:0	2	=
water	12:31	0:0	2	link
op	12:35	0:0	2	->
water	12:37	0:0	2	sample_aspect_ratio
op	12:56	0:0	2	.
water	12:57	0:0	2	num
water	12:61	0:0	2	?
call	12:63	12:95	2	av_q2d
arg	12:70	12:95	3	link->sample_aspect_ratio
water	12:70	0:0	4	link
op	12:74	0:0	4	->
water	12:76	0:0	4	sample_aspect_ratio
water	12:97	0:0	2	:
water	12:99	0:0	2	1
water	12:100	0:0	2	;
water	13:4	0:0	2	s
op	13:5	0:0	2	->
water	13:7	0:0	2	var_values
op	13:17	0:0	2	[
water	13:18	0:0	2	VAR_DAR
op	13:25	0:0	2	]
op	13:29	0:0	2	=
water	13:31	0:0	2	s
op	13:32	0:0	2	->
water	13:34	0:0	2	var_values
op	13:44	0:0	2	[
water	13:45	0:0	2	VAR_A
op	13:50	0:0	2	]
op	13:52	0:0	2	*
water	13:54	0:0	2	s
op	13:55	0:0	2	->
water	13:57	0:0	2	var_values
op	13:67	0:0	2	[
water	13:68	0:0	2	VAR_SAR
op	13:75	0:0	2	]
water	13:76	0:0	2	;
water	14:4	0:0	2	s
op	14:5	0:0	2	->
water	14:7	0:0	2	var_values
op	14:17	0:0	2	[
water	14:18	0:0	2	VAR_HSUB
op	14:26	0:0	2	]
op	14:29	0:0	2	=
water	14:31	0:0	2	1
op	14:32	0:0	2	<<
water	14:34	0:0	2	pix_desc
op	14:42	0:0	2	->
water	14:44	0:0	2	log2_chroma_w
water	14:57	0:0	2	;
water	15:4	0:0	2	s
op	15:5	0:0	2	->
water	15:7	0:0	2	var_values
op	15:17	0:0	2	[
water	15:18	0:0	2	VAR_VSUB
op	15:26	0:0	2	]
op	15:29	0:0	2	=
water	15:31	0:0	2	1
op	15:32	0:0	2	<<
water	15:34	0:0	2	pix_desc
op	15:42	0:0	2	->
water	15:44	0:0	2	log2_chroma_h
water	15:57	0:0	2	;
water	16:4	0:0	2	s
op	16:5	0:0	2	->
water	16:7	0:0	2	var_values
op	16:17	0:0	2	[
water	16:18	0:0	2	VAR_X
op	16:23	0:0	2	]
op	16:29	0:0	2	=
water	16:31	0:0	2	NAN
water	16:34	0:0	2	;
water	17:4	0:0	2	s
op	17:5	0:0	2	->
water	17:7	0:0	2	var_values
op	17:17	0:0	2	[
water	17:18	0:0	2	VAR_Y
op	17:23	0:0	2	]
op	17:29	0:0	2	=
water	17:31	0:0	2	NAN
water	17:34	0:0	2	;
water	18:4	0:0	2	s
op	18:5	0:0	2	->
water	18:7	0:0	2	var_values
op	18:17	0:0	2	[
water	18:18	0:0	2	VAR_OUT_W
op	18:27	0:0	2	]
op	18:29	0:0	2	=
water	18:31	0:0	2	s
op	18:32	0:0	2	->
water	18:34	0:0	2	var_values
op	18:44	0:0	2	[
water	18:45	0:0	2	VAR_OW
op	18:51	0:0	2	]
op	18:53	0:0	2	=
water	18:55	0:0	2	NAN
water	18:58	0:0	2	;
water	19:4	0:0	2	s
op	19:5	0:0	2	->
water	19:7	0:0	2	var_values
op	19:17	0:0	2	[
water	19:18	0:0	2	VAR_OUT_H
op	19:27	0:0	2	]
op	19:29	0:0	2	=
water	19:31	0:0	2	s
op	19:32	0:0	2	->
water	19:34	0:0	2	var_values
op	19:44	0:0	2	[
water	19:45	0:0	2	VAR_OH
op	19:51	0:0	2	]
op	19:53	0:0	2	=
water	19:55	0:0	2	NAN
water	19:58	0:0	2	;
water	20:4	0:0	2	s
op	20:5	0:0	2	->
water	20:7	0:0	2	var_values
op	20:17	0:0	2	[
water	20:18	0:0	2	VAR_N
op	20:23	0:0	2	]
op	20:29	0:0	2	=
water	20:31	0:0	2	0
water	20:32	0:0	2	;
water	21:4	0:0	2	s
op	21:5	0:0	2	->
water	21:7	0:0	2	var_values
op	21:17	0:0	2	[
water	21:18	0:0	2	VAR_T
op	21:23	0:0	2	]
op	21:29	0:0	2	=
water	21:31	0:0	2	NAN
water	21:34	0:0	2	;
water	22:4	0:0	2	s
op	22:5	0:0	2	->
water	22:7	0:0	2	var_values
op	22:17	0:0	2	[
water	22:18	0:0	2	VAR_POS
op	22:25	0:0	2	]
op	22:29	0:0	2	=
water	22:31	0:0	2	NAN
water	22:34	0:0	2	;
call	23:4	23:58	2	av_image_fill_max_pixsteps
arg	23:31	23:42	3	s->max_step
water	23:31	0:0	4	s
op	23:32	0:0	4	->
water	23:34	0:0	4	max_step
arg	23:44	23:48	3	NULL
water	23:44	0:0	4	NULL
arg	23:50	23:58	3	pix_desc
water	23:50	0:0	4	pix_desc
water	23:59	0:0	2	;
water	24:4	0:0	2	s
op	24:5	0:0	2	->
water	24:7	0:0	2	hsub
op	24:12	0:0	2	=
water	24:14	0:0	2	pix_desc
op	24:22	0:0	2	->
water	24:24	0:0	2	log2_chroma_w
water	24:37	0:0	2	;
water	25:4	0:0	2	s
op	25:5	0:0	2	->
water	25:7	0:0	2	vsub
op	25:12	0:0	2	=
water	25:14	0:0	2	pix_desc
op	25:22	0:0	2	->
water	25:24	0:0	2	log2_chroma_h
water	25:37	0:0	2	;
if	26:4	29:22	2	(( ret =av_expr_parse_and_eval (& res ,( expr = s -> w_expr ) ,var_names ,s -> var_values ,NULL ,NULL ,NULL ,NULL ,NULL ,0 ,ctx ) ) < 0)
cond	26:8	28:79	3	( ret =av_expr_parse_and_eval (& res ,( expr = s -> w_expr ) ,var_names ,s -> var_values ,NULL ,NULL ,NULL ,NULL ,NULL ,0 ,ctx ) ) < 0
water	26:8	0:0	4	(
water	26:9	0:0	4	ret
op	26:13	0:0	4	=
call	26:15	28:74	4	av_expr_parse_and_eval
arg	26:38	26:42	5	&res
op	26:38	0:0	6	&
water	26:39	0:0	6	res
arg	26:44	26:62	5	(expr=s->w_expr)
water	26:44	0:0	6	(
water	26:45	0:0	6	expr
op	26:50	0:0	6	=
water	26:52	0:0	6	s
op	26:53	0:0	6	->
water	26:55	0:0	6	w_expr
water	26:61	0:0	6	)
arg	27:38	27:47	5	var_names
water	27:38	0:0	6	var_names
arg	27:49	27:62	5	s->var_values
water	27:49	0:0	6	s
op	27:50	0:0	6	->
water	27:52	0:0	6	var_values
arg	28:38	28:42	5	NULL
water	28:38	0:0	6	NULL
arg	28:44	28:48	5	NULL
water	28:44	0:0	6	NULL
arg	28:50	28:54	5	NULL
water	28:50	0:0	6	NULL
arg	28:56	28:60	5	NULL
water	28:56	0:0	6	NULL
arg	28:62	28:66	5	NULL
water	28:62	0:0	6	NULL
arg	28:68	28:69	5	0
water	28:68	0:0	6	0
arg	28:71	28:74	5	ctx
water	28:71	0:0	6	ctx
water	28:75	0:0	4	)
op	28:77	0:0	4	<
water	28:79	0:0	4	0
stmts	29:8	29:22	3	
goto	29:8	29:22	4	fail_expr
water	29:13	0:0	5	fail_expr
water	30:4	0:0	2	s
op	30:5	0:0	2	->
water	30:7	0:0	2	var_values
op	30:17	0:0	2	[
water	30:18	0:0	2	VAR_OUT_W
op	30:27	0:0	2	]
op	30:29	0:0	2	=
water	30:31	0:0	2	s
op	30:32	0:0	2	->
water	30:34	0:0	2	var_values
op	30:44	0:0	2	[
water	30:45	0:0	2	VAR_OW
op	30:51	0:0	2	]
op	30:53	0:0	2	=
water	30:55	0:0	2	res
water	30:58	0:0	2	;
if	31:4	34:22	2	(( ret =av_expr_parse_and_eval (& res ,( expr = s -> h_expr ) ,var_names ,s -> var_values ,NULL ,NULL ,NULL ,NULL ,NULL ,0 ,ctx ) ) < 0)
cond	31:8	33:79	3	( ret =av_expr_parse_and_eval (& res ,( expr = s -> h_expr ) ,var_names ,s -> var_values ,NULL ,NULL ,NULL ,NULL ,NULL ,0 ,ctx ) ) < 0
water	31:8	0:0	4	(
water	31:9	0:0	4	ret
op	31:13	0:0	4	=
call	31:15	33:74	4	av_expr_parse_and_eval
arg	31:38	31:42	5	&res
op	31:38	0:0	6	&
water	31:39	0:0	6	res
arg	31:44	31:62	5	(expr=s->h_expr)
water	31:44	0:0	6	(
water	31:45	0:0	6	expr
op	31:50	0:0	6	=
water	31:52	0:0	6	s
op	31:53	0:0	6	->
water	31:55	0:0	6	h_expr
water	31:61	0:0	6	)
arg	32:38	32:47	5	var_names
water	32:38	0:0	6	var_names
arg	32:49	32:62	5	s->var_values
water	32:49	0:0	6	s
op	32:50	0:0	6	->
water	32:52	0:0	6	var_values
arg	33:38	33:42	5	NULL
water	33:38	0:0	6	NULL
arg	33:44	33:48	5	NULL
water	33:44	0:0	6	NULL
arg	33:50	33:54	5	NULL
water	33:50	0:0	6	NULL
arg	33:56	33:60	5	NULL
water	33:56	0:0	6	NULL
arg	33:62	33:66	5	NULL
water	33:62	0:0	6	NULL
arg	33:68	33:69	5	0
water	33:68	0:0	6	0
arg	33:71	33:74	5	ctx
water	33:71	0:0	6	ctx
water	33:75	0:0	4	)
op	33:77	0:0	4	<
water	33:79	0:0	4	0
stmts	34:8	34:22	3	
goto	34:8	34:22	4	fail_expr
water	34:13	0:0	5	fail_expr
water	35:4	0:0	2	s
op	35:5	0:0	2	->
water	35:7	0:0	2	var_values
op	35:17	0:0	2	[
water	35:18	0:0	2	VAR_OUT_H
op	35:27	0:0	2	]
op	35:29	0:0	2	=
water	35:31	0:0	2	s
op	35:32	0:0	2	->
water	35:34	0:0	2	var_values
op	35:44	0:0	2	[
water	35:45	0:0	2	VAR_OH
op	35:51	0:0	2	]
op	35:53	0:0	2	=
water	35:55	0:0	2	res
water	35:58	0:0	2	;
if	37:4	40:22	2	(( ret =av_expr_parse_and_eval (& res ,( expr = s -> w_expr ) ,var_names ,s -> var_values ,NULL ,NULL ,NULL ,NULL ,NULL ,0 ,ctx ) ) < 0)
cond	37:8	39:79	3	( ret =av_expr_parse_and_eval (& res ,( expr = s -> w_expr ) ,var_names ,s -> var_values ,NULL ,NULL ,NULL ,NULL ,NULL ,0 ,ctx ) ) < 0
water	37:8	0:0	4	(
water	37:9	0:0	4	ret
op	37:13	0:0	4	=
call	37:15	39:74	4	av_expr_parse_and_eval
arg	37:38	37:42	5	&res
op	37:38	0:0	6	&
water	37:39	0:0	6	res
arg	37:44	37:62	5	(expr=s->w_expr)
water	37:44	0:0	6	(
water	37:45	0:0	6	expr
op	37:50	0:0	6	=
water	37:52	0:0	6	s
op	37:53	0:0	6	->
water	37:55	0:0	6	w_expr
water	37:61	0:0	6	)
arg	38:38	38:47	5	var_names
water	38:38	0:0	6	var_names
arg	38:49	38:62	5	s->var_values
water	38:49	0:0	6	s
op	38:50	0:0	6	->
water	38:52	0:0	6	var_values
arg	39:38	39:42	5	NULL
water	39:38	0:0	6	NULL
arg	39:44	39:48	5	NULL
water	39:44	0:0	6	NULL
arg	39:50	39:54	5	NULL
water	39:50	0:0	6	NULL
arg	39:56	39:60	5	NULL
water	39:56	0:0	6	NULL
arg	39:62	39:66	5	NULL
water	39:62	0:0	6	NULL
arg	39:68	39:69	5	0
water	39:68	0:0	6	0
arg	39:71	39:74	5	ctx
water	39:71	0:0	6	ctx
water	39:75	0:0	4	)
op	39:77	0:0	4	<
water	39:79	0:0	4	0
stmts	40:8	40:22	3	
goto	40:8	40:22	4	fail_expr
water	40:13	0:0	5	fail_expr
water	41:4	0:0	2	s
op	41:5	0:0	2	->
water	41:7	0:0	2	var_values
op	41:17	0:0	2	[
water	41:18	0:0	2	VAR_OUT_W
op	41:27	0:0	2	]
op	41:29	0:0	2	=
water	41:31	0:0	2	s
op	41:32	0:0	2	->
water	41:34	0:0	2	var_values
op	41:44	0:0	2	[
water	41:45	0:0	2	VAR_OW
op	41:51	0:0	2	]
op	41:53	0:0	2	=
water	41:55	0:0	2	res
water	41:58	0:0	2	;
if	42:4	49:4	2	(normalize_double (& s -> w ,s -> var_values [ VAR_OUT_W ] ) < 0 ||normalize_double (& s -> h ,s -> var_values [ VAR_OUT_H ] ) < 0)
cond	42:8	43:60	3	normalize_double (& s -> w ,s -> var_values [ VAR_OUT_W ] ) < 0 ||normalize_double (& s -> h ,s -> var_values [ VAR_OUT_H ] ) < 0
call	42:8	42:56	4	normalize_double
arg	42:25	42:30	5	&s->w
op	42:25	0:0	6	&
water	42:26	0:0	6	s
op	42:27	0:0	6	->
water	42:29	0:0	6	w
arg	42:32	42:56	5	s->var_values[VAR_OUT_W]
water	42:32	0:0	6	s
op	42:33	0:0	6	->
water	42:35	0:0	6	var_values
op	42:45	0:0	6	[
water	42:46	0:0	6	VAR_OUT_W
op	42:55	0:0	6	]
op	42:58	0:0	4	<
water	42:60	0:0	4	0
op	42:62	0:0	4	||
call	43:8	43:56	4	normalize_double
arg	43:25	43:30	5	&s->h
op	43:25	0:0	6	&
water	43:26	0:0	6	s
op	43:27	0:0	6	->
water	43:29	0:0	6	h
arg	43:32	43:56	5	s->var_values[VAR_OUT_H]
water	43:32	0:0	6	s
op	43:33	0:0	6	->
water	43:35	0:0	6	var_values
op	43:45	0:0	6	[
water	43:46	0:0	6	VAR_OUT_H
op	43:55	0:0	6	]
op	43:58	0:0	4	<
water	43:60	0:0	4	0
stmts	43:63	49:4	3	
water	43:63	0:0	4	{
call	44:8	47:35	4	av_log
arg	44:15	44:18	5	ctx
water	44:15	0:0	6	ctx
arg	44:20	44:32	5	AV_LOG_ERROR
water	44:20	0:0	6	AV_LOG_ERROR
arg	45:15	46:93	5	"Too big value or invalid expression for out_w/ow or out_h/oh. ""Maybe the expression for out_w:'%s' or for out_h:'%s' is self-referencing.\n"
water	45:15	0:0	6	"Too big value or invalid expression for out_w/ow or out_h/oh. "
water	46:15	0:0	6	"Maybe the expression for out_w:'%s' or for out_h:'%s' is self-referencing.\n"
arg	47:15	47:24	5	s->w_expr
water	47:15	0:0	6	s
op	47:16	0:0	6	->
water	47:18	0:0	6	w_expr
arg	47:26	47:35	5	s->h_expr
water	47:26	0:0	6	s
op	47:27	0:0	6	->
water	47:29	0:0	6	h_expr
water	47:36	0:0	4	;
return	48:8	48:30	4	AVERROR(EINVAL)
call	48:15	48:29	5	AVERROR
arg	48:23	48:29	6	EINVAL
water	48:23	0:0	7	EINVAL
water	49:4	0:0	4	}
water	50:4	0:0	2	s
op	50:5	0:0	2	->
water	50:7	0:0	2	w
op	50:9	0:0	2	&=
op	50:12	0:0	2	~
water	50:13	0:0	2	(
water	50:14	0:0	2	(
water	50:15	0:0	2	1
op	50:17	0:0	2	<<
water	50:20	0:0	2	s
op	50:21	0:0	2	->
water	50:23	0:0	2	hsub
water	50:27	0:0	2	)
op	50:29	0:0	2	-
water	50:31	0:0	2	1
water	50:32	0:0	2	)
water	50:33	0:0	2	;
water	51:4	0:0	2	s
op	51:5	0:0	2	->
water	51:7	0:0	2	h
op	51:9	0:0	2	&=
op	51:12	0:0	2	~
water	51:13	0:0	2	(
water	51:14	0:0	2	(
water	51:15	0:0	2	1
op	51:17	0:0	2	<<
water	51:20	0:0	2	s
op	51:21	0:0	2	->
water	51:23	0:0	2	vsub
water	51:27	0:0	2	)
op	51:29	0:0	2	-
water	51:31	0:0	2	1
water	51:32	0:0	2	)
water	51:33	0:0	2	;
call	52:4	52:27	2	av_expr_free
arg	52:17	52:27	3	s->x_pexpr
water	52:17	0:0	4	s
op	52:18	0:0	4	->
water	52:20	0:0	4	x_pexpr
water	52:28	0:0	2	;
call	53:4	53:27	2	av_expr_free
arg	53:17	53:27	3	s->y_pexpr
water	53:17	0:0	4	s
op	53:18	0:0	4	->
water	53:20	0:0	4	y_pexpr
water	53:28	0:0	2	;
water	54:4	0:0	2	s
op	54:5	0:0	2	->
water	54:7	0:0	2	x_pexpr
op	54:15	0:0	2	=
water	54:17	0:0	2	s
op	54:18	0:0	2	->
water	54:20	0:0	2	y_pexpr
op	54:28	0:0	2	=
water	54:30	0:0	2	NULL
water	54:34	0:0	2	;
if	55:4	59:30	2	(( ret =av_expr_parse (& s -> x_pexpr ,s -> x_expr ,var_names ,NULL ,NULL ,NULL ,NULL ,0 ,ctx ) ) < 0 || ( ret =av_expr_parse (& s -> y_pexpr ,s -> y_expr ,var_names ,NULL ,NULL ,NULL ,NULL ,0 ,ctx ) ) < 0)
cond	55:8	58:64	3	( ret =av_expr_parse (& s -> x_pexpr ,s -> x_expr ,var_names ,NULL ,NULL ,NULL ,NULL ,0 ,ctx ) ) < 0 || ( ret =av_expr_parse (& s -> y_pexpr ,s -> y_expr ,var_names ,NULL ,NULL ,NULL ,NULL ,0 ,ctx ) ) < 0
water	55:8	0:0	4	(
water	55:9	0:0	4	ret
op	55:13	0:0	4	=
call	55:15	56:59	4	av_expr_parse
arg	55:29	55:40	5	&s->x_pexpr
op	55:29	0:0	6	&
water	55:30	0:0	6	s
op	55:31	0:0	6	->
water	55:33	0:0	6	x_pexpr
arg	55:42	55:51	5	s->x_expr
water	55:42	0:0	6	s
op	55:43	0:0	6	->
water	55:45	0:0	6	x_expr
arg	55:53	55:62	5	var_names
water	55:53	0:0	6	var_names
arg	56:29	56:33	5	NULL
water	56:29	0:0	6	NULL
arg	56:35	56:39	5	NULL
water	56:35	0:0	6	NULL
arg	56:41	56:45	5	NULL
water	56:41	0:0	6	NULL
arg	56:47	56:51	5	NULL
water	56:47	0:0	6	NULL
arg	56:53	56:54	5	0
water	56:53	0:0	6	0
arg	56:56	56:59	5	ctx
water	56:56	0:0	6	ctx
water	56:60	0:0	4	)
op	56:62	0:0	4	<
water	56:64	0:0	4	0
op	56:66	0:0	4	||
water	57:8	0:0	4	(
water	57:9	0:0	4	ret
op	57:13	0:0	4	=
call	57:15	58:59	4	av_expr_parse
arg	57:29	57:40	5	&s->y_pexpr
op	57:29	0:0	6	&
water	57:30	0:0	6	s
op	57:31	0:0	6	->
water	57:33	0:0	6	y_pexpr
arg	57:42	57:51	5	s->y_expr
water	57:42	0:0	6	s
op	57:43	0:0	6	->
water	57:45	0:0	6	y_expr
arg	57:53	57:62	5	var_names
water	57:53	0:0	6	var_names
arg	58:29	58:33	5	NULL
water	58:29	0:0	6	NULL
arg	58:35	58:39	5	NULL
water	58:35	0:0	6	NULL
arg	58:41	58:45	5	NULL
water	58:41	0:0	6	NULL
arg	58:47	58:51	5	NULL
water	58:47	0:0	6	NULL
arg	58:53	58:54	5	0
water	58:53	0:0	6	0
arg	58:56	58:59	5	ctx
water	58:56	0:0	6	ctx
water	58:60	0:0	4	)
op	58:62	0:0	4	<
water	58:64	0:0	4	0
stmts	59:8	59:30	3	
return	59:8	59:30	4	AVERROR(EINVAL)
call	59:15	59:29	5	AVERROR
arg	59:23	59:29	6	EINVAL
water	59:23	0:0	7	EINVAL
if	60:4	65:4	2	(s -> keep_aspect)
cond	60:8	60:11	3	s -> keep_aspect
water	60:8	0:0	4	s
op	60:9	0:0	4	->
water	60:11	0:0	4	keep_aspect
stmts	60:24	65:4	3	
water	60:24	0:0	4	{
decl	61:8	62:67	4	AVRational	dar
op	61:23	0:0	4	=
call	61:25	62:66	5	av_mul_q
arg	61:34	61:59	6	link->sample_aspect_ratio
water	61:34	0:0	7	link
op	61:38	0:0	7	->
water	61:40	0:0	7	sample_aspect_ratio
arg	62:34	62:66	6	(AVRational){link->w,link->h}
water	62:34	0:0	7	(
water	62:35	0:0	7	AVRational
water	62:45	0:0	7	)
water	62:46	0:0	7	{
water	62:48	0:0	7	link
op	62:52	0:0	7	->
water	62:54	0:0	7	w
water	62:55	0:0	7	,
water	62:57	0:0	7	link
op	62:61	0:0	7	->
water	62:63	0:0	7	h
water	62:65	0:0	7	}
call	63:8	64:57	4	av_reduce
arg	63:18	63:33	5	&s->out_sar.num
op	63:18	0:0	6	&
water	63:19	0:0	6	s
op	63:20	0:0	6	->
water	63:22	0:0	6	out_sar
op	63:29	0:0	6	.
water	63:30	0:0	6	num
arg	63:35	63:50	5	&s->out_sar.den
op	63:35	0:0	6	&
water	63:36	0:0	6	s
op	63:37	0:0	6	->
water	63:39	0:0	6	out_sar
op	63:46	0:0	6	.
water	63:47	0:0	6	den
arg	64:18	64:32	5	dar.num*s->h
water	64:18	0:0	6	dar
op	64:21	0:0	6	.
water	64:22	0:0	6	num
op	64:26	0:0	6	*
water	64:28	0:0	6	s
op	64:29	0:0	6	->
water	64:31	0:0	6	h
arg	64:34	64:48	5	dar.den*s->w
water	64:34	0:0	6	dar
op	64:37	0:0	6	.
water	64:38	0:0	6	den
op	64:42	0:0	6	*
water	64:44	0:0	6	s
op	64:45	0:0	6	->
water	64:47	0:0	6	w
arg	64:50	64:57	5	INT_MAX
water	64:50	0:0	6	INT_MAX
water	64:58	0:0	4	;
water	65:4	0:0	4	}
else	65:6	66:46	2
stmts	66:8	66:46	3	
water	66:8	0:0	4	s
op	66:9	0:0	4	->
water	66:11	0:0	4	out_sar
op	66:19	0:0	4	=
water	66:21	0:0	4	link
op	66:25	0:0	4	->
water	66:27	0:0	4	sample_aspect_ratio
water	66:46	0:0	4	;
call	67:4	69:53	2	av_log
arg	67:11	67:14	3	ctx
water	67:11	0:0	4	ctx
arg	67:16	67:30	3	AV_LOG_VERBOSE
water	67:16	0:0	4	AV_LOG_VERBOSE
arg	67:32	67:78	3	"w:%d h:%d sar:%d/%d -> w:%d h:%d sar:%d/%d\n"
water	67:32	0:0	4	"w:%d h:%d sar:%d/%d -> w:%d h:%d sar:%d/%d\n"
arg	68:11	68:18	3	link->w
water	68:11	0:0	4	link
op	68:15	0:0	4	->
water	68:17	0:0	4	w
arg	68:20	68:27	3	link->h
water	68:20	0:0	4	link
op	68:24	0:0	4	->
water	68:26	0:0	4	h
arg	68:29	68:58	3	link->sample_aspect_ratio.num
water	68:29	0:0	4	link
op	68:33	0:0	4	->
water	68:35	0:0	4	sample_aspect_ratio
op	68:54	0:0	4	.
water	68:55	0:0	4	num
arg	68:60	68:89	3	link->sample_aspect_ratio.den
water	68:60	0:0	4	link
op	68:64	0:0	4	->
water	68:66	0:0	4	sample_aspect_ratio
op	68:85	0:0	4	.
water	68:86	0:0	4	den
arg	69:11	69:15	3	s->w
water	69:11	0:0	4	s
op	69:12	0:0	4	->
water	69:14	0:0	4	w
arg	69:17	69:21	3	s->h
water	69:17	0:0	4	s
op	69:18	0:0	4	->
water	69:20	0:0	4	h
arg	69:23	69:37	3	s->out_sar.num
water	69:23	0:0	4	s
op	69:24	0:0	4	->
water	69:26	0:0	4	out_sar
op	69:33	0:0	4	.
water	69:34	0:0	4	num
arg	69:39	69:53	3	s->out_sar.den
water	69:39	0:0	4	s
op	69:40	0:0	4	->
water	69:42	0:0	4	out_sar
op	69:49	0:0	4	.
water	69:50	0:0	4	den
water	69:54	0:0	2	;
if	70:4	76:4	2	(s -> w <= 0 || s -> h <= 0 || s -> w > link -> w || s -> h > link -> h)
cond	70:8	71:39	3	s -> w <= 0 || s -> h <= 0 || s -> w > link -> w || s -> h > link -> h
water	70:8	0:0	4	s
op	70:9	0:0	4	->
water	70:11	0:0	4	w
op	70:13	0:0	4	<=
water	70:16	0:0	4	0
op	70:18	0:0	4	||
water	70:21	0:0	4	s
op	70:22	0:0	4	->
water	70:24	0:0	4	h
op	70:26	0:0	4	<=
water	70:29	0:0	4	0
op	70:31	0:0	4	||
water	71:8	0:0	4	s
op	71:9	0:0	4	->
water	71:11	0:0	4	w
op	71:13	0:0	4	>
water	71:15	0:0	4	link
op	71:19	0:0	4	->
water	71:21	0:0	4	w
op	71:23	0:0	4	||
water	71:26	0:0	4	s
op	71:27	0:0	4	->
water	71:29	0:0	4	h
op	71:31	0:0	4	>
water	71:33	0:0	4	link
op	71:37	0:0	4	->
water	71:39	0:0	4	h
stmts	71:42	76:4	3	
water	71:42	0:0	4	{
call	72:8	74:25	4	av_log
arg	72:15	72:18	5	ctx
water	72:15	0:0	6	ctx
arg	72:20	72:32	5	AV_LOG_ERROR
water	72:20	0:0	6	AV_LOG_ERROR
arg	73:15	73:85	5	"Invalid too big or non positive size for width '%d' or height '%d'\n"
water	73:15	0:0	6	"Invalid too big or non positive size for width '%d' or height '%d'\n"
arg	74:15	74:19	5	s->w
water	74:15	0:0	6	s
op	74:16	0:0	6	->
water	74:18	0:0	6	w
arg	74:21	74:25	5	s->h
water	74:21	0:0	6	s
op	74:22	0:0	6	->
water	74:24	0:0	6	h
water	74:26	0:0	4	;
return	75:8	75:30	4	AVERROR(EINVAL)
call	75:15	75:29	5	AVERROR
arg	75:23	75:29	6	EINVAL
water	75:23	0:0	7	EINVAL
water	76:4	0:0	4	}
water	78:4	0:0	2	s
op	78:5	0:0	2	->
water	78:7	0:0	2	x
op	78:9	0:0	2	=
water	78:11	0:0	2	(
water	78:12	0:0	2	link
op	78:16	0:0	2	->
water	78:18	0:0	2	w
op	78:20	0:0	2	-
water	78:22	0:0	2	s
op	78:23	0:0	2	->
water	78:25	0:0	2	w
water	78:26	0:0	2	)
op	78:28	0:0	2	/
water	78:30	0:0	2	2
water	78:31	0:0	2	;
water	79:4	0:0	2	s
op	79:5	0:0	2	->
water	79:7	0:0	2	y
op	79:9	0:0	2	=
water	79:11	0:0	2	(
water	79:12	0:0	2	link
op	79:16	0:0	2	->
water	79:18	0:0	2	h
op	79:20	0:0	2	-
water	79:22	0:0	2	s
op	79:23	0:0	2	->
water	79:25	0:0	2	h
water	79:26	0:0	2	)
op	79:28	0:0	2	/
water	79:30	0:0	2	2
water	79:31	0:0	2	;
water	80:4	0:0	2	s
op	80:5	0:0	2	->
water	80:7	0:0	2	x
op	80:9	0:0	2	&=
op	80:12	0:0	2	~
water	80:13	0:0	2	(
water	80:14	0:0	2	(
water	80:15	0:0	2	1
op	80:17	0:0	2	<<
water	80:20	0:0	2	s
op	80:21	0:0	2	->
water	80:23	0:0	2	hsub
water	80:27	0:0	2	)
op	80:29	0:0	2	-
water	80:31	0:0	2	1
water	80:32	0:0	2	)
water	80:33	0:0	2	;
water	81:4	0:0	2	s
op	81:5	0:0	2	->
water	81:7	0:0	2	y
op	81:9	0:0	2	&=
op	81:12	0:0	2	~
water	81:13	0:0	2	(
water	81:14	0:0	2	(
water	81:15	0:0	2	1
op	81:17	0:0	2	<<
water	81:20	0:0	2	s
op	81:21	0:0	2	->
water	81:23	0:0	2	vsub
water	81:27	0:0	2	)
op	81:29	0:0	2	-
water	81:31	0:0	2	1
water	81:32	0:0	2	)
water	81:33	0:0	2	;
return	82:4	82:12	2	0
water	82:11	0:0	3	0
label	83:0	83:9	2	fail_expr :
call	84:4	84:82	2	av_log
arg	84:11	84:15	3	NULL
water	84:11	0:0	4	NULL
arg	84:17	84:29	3	AV_LOG_ERROR
water	84:17	0:0	4	AV_LOG_ERROR
arg	84:31	84:76	3	"Error when evaluating the expression '%s'\n"
water	84:31	0:0	4	"Error when evaluating the expression '%s'\n"
arg	84:78	84:82	3	expr
water	84:78	0:0	4	expr
water	84:83	0:0	2	;
return	85:4	85:14	2	ret
water	85:11	0:0	3	ret
