func	1:0	73:0	0	static int	audio_thread
params	1:23	0:0	1	
param	1:24	1:33	2	void *	arg
stmnts	0:0	72:14	1	
decl	3:4	3:24	2	VideoState	*is
op	3:19	0:0	2	=
water	3:21	0:0	2	arg
decl	4:4	4:37	2	AVFrame	*frame
op	4:19	0:0	2	=
call	4:21	4:36	3	av_frame_alloc
decl	5:4	5:13	2	Frame	*af
decl	7:4	7:24	2	int	last_serial
op	7:20	0:0	2	=
op	7:22	0:0	2	-
water	7:23	0:0	2	1
decl	8:4	8:30	2	int64_t	dec_channel_layout
decl	9:4	9:19	2	int	reconfigure
decl	11:4	11:21	2	int	got_frame
op	11:18	0:0	2	=
water	11:20	0:0	2	0
decl	12:4	12:17	2	AVRational	tb
decl	13:4	13:15	2	int	ret
op	13:12	0:0	2	=
water	13:14	0:0	2	0
if	14:4	15:30	2	(! frame)
cond	14:8	14:9	3	! frame
op	14:8	0:0	4	!
water	14:9	0:0	4	frame
stmts	15:8	15:30	3	
return	15:8	15:30	4	AVERROR(ENOMEM)
call	15:15	15:29	5	AVERROR
arg	15:23	15:29	6	ENOMEM
water	15:23	0:0	7	ENOMEM
do	16:4	66:4	2	(ret >= 0 || ret ==AVERROR (EAGAIN ) || ret == AVERROR_EOF)
cond	66:13	66:58	3	ret >= 0 || ret ==AVERROR (EAGAIN ) || ret == AVERROR_EOF
water	66:13	0:0	4	ret
op	66:17	0:0	4	>=
water	66:20	0:0	4	0
op	66:22	0:0	4	||
water	66:25	0:0	4	ret
op	66:29	0:0	4	==
call	66:32	66:46	4	AVERROR
arg	66:40	66:46	5	EAGAIN
water	66:40	0:0	6	EAGAIN
op	66:48	0:0	4	||
water	66:51	0:0	4	ret
op	66:55	0:0	4	==
water	66:58	0:0	4	AVERROR_EOF
stmts	16:7	66:4	3	
water	16:7	0:0	4	{
if	17:8	18:24	4	(( got_frame =decoder_decode_frame (& is -> auddec ,frame ,NULL ) ) < 0)
cond	17:12	17:75	5	( got_frame =decoder_decode_frame (& is -> auddec ,frame ,NULL ) ) < 0
water	17:12	0:0	6	(
water	17:13	0:0	6	got_frame
op	17:23	0:0	6	=
call	17:25	17:70	6	decoder_decode_frame
arg	17:46	17:57	7	&is->auddec
op	17:46	0:0	8	&
water	17:47	0:0	8	is
op	17:49	0:0	8	->
water	17:51	0:0	8	auddec
arg	17:59	17:64	7	frame
water	17:59	0:0	8	frame
arg	17:66	17:70	7	NULL
water	17:66	0:0	8	NULL
water	17:71	0:0	6	)
op	17:73	0:0	6	<
water	17:75	0:0	6	0
stmts	18:12	18:24	5	
goto	18:12	18:24	6	the_end
water	18:17	0:0	7	the_end
if	19:8	65:8	4	(got_frame)
cond	19:12	19:12	5	got_frame
water	19:12	0:0	6	got_frame
stmts	19:23	65:8	5	
water	19:23	0:0	6	{
water	20:16	0:0	6	tb
op	20:19	0:0	6	=
water	20:21	0:0	6	(
water	20:22	0:0	6	AVRational
water	20:32	0:0	6	)
water	20:33	0:0	6	{
water	20:34	0:0	6	1
water	20:35	0:0	6	,
water	20:37	0:0	6	frame
op	20:42	0:0	6	->
water	20:44	0:0	6	sample_rate
water	20:55	0:0	6	}
water	20:56	0:0	6	;
water	22:16	0:0	6	dec_channel_layout
op	22:35	0:0	6	=
call	22:37	22:113	6	get_valid_channel_layout
arg	22:62	22:83	7	frame->channel_layout
water	22:62	0:0	8	frame
op	22:67	0:0	8	->
water	22:69	0:0	8	channel_layout
arg	22:85	22:113	7	av_frame_get_channels(frame)
call	22:85	22:112	8	av_frame_get_channels
arg	22:107	22:112	9	frame
water	22:107	0:0	10	frame
water	22:114	0:0	6	;
water	23:16	0:0	6	reconfigure
op	23:28	0:0	6	=
call	24:20	25:78	6	cmp_audio_fmts
arg	24:35	24:59	7	is->audio_filter_src.fmt
water	24:35	0:0	8	is
op	24:37	0:0	8	->
water	24:39	0:0	8	audio_filter_src
op	24:55	0:0	8	.
water	24:56	0:0	8	fmt
arg	24:61	24:90	7	is->audio_filter_src.channels
water	24:61	0:0	8	is
op	24:63	0:0	8	->
water	24:65	0:0	8	audio_filter_src
op	24:81	0:0	8	.
water	24:82	0:0	8	channels
arg	25:35	25:48	7	frame->format
water	25:35	0:0	8	frame
op	25:40	0:0	8	->
water	25:42	0:0	8	format
arg	25:50	25:78	7	av_frame_get_channels(frame)
call	25:50	25:77	8	av_frame_get_channels
arg	25:72	25:77	9	frame
water	25:72	0:0	10	frame
op	25:83	0:0	6	||
water	26:20	0:0	6	is
op	26:22	0:0	6	->
water	26:24	0:0	6	audio_filter_src
op	26:40	0:0	6	.
water	26:41	0:0	6	channel_layout
op	26:56	0:0	6	!=
water	26:59	0:0	6	dec_channel_layout
op	26:78	0:0	6	||
water	27:20	0:0	6	is
op	27:22	0:0	6	->
water	27:24	0:0	6	audio_filter_src
op	27:40	0:0	6	.
water	27:41	0:0	6	freq
op	27:56	0:0	6	!=
water	27:59	0:0	6	frame
op	27:64	0:0	6	->
water	27:66	0:0	6	sample_rate
op	27:78	0:0	6	||
water	28:20	0:0	6	is
op	28:22	0:0	6	->
water	28:24	0:0	6	auddec
op	28:30	0:0	6	.
water	28:31	0:0	6	pkt_serial
op	28:56	0:0	6	!=
water	28:59	0:0	6	last_serial
water	28:70	0:0	6	;
if	29:16	44:16	6	(reconfigure)
cond	29:20	29:20	7	reconfigure
water	29:20	0:0	8	reconfigure
stmts	29:33	44:16	7	
water	29:33	0:0	8	{
decl	30:20	30:47	8	char	buf1[1024]
water	30:35	0:0	8	,
decl	30:20	30:47	8	char	buf2[1024]
call	31:20	31:108	8	av_get_channel_layout_string
arg	31:49	31:53	9	buf1
water	31:49	0:0	10	buf1
arg	31:55	31:67	9	sizeof(buf1)
op	31:55	0:0	10	sizeof
water	31:61	0:0	10	(
water	31:62	0:0	10	buf1
water	31:66	0:0	10	)
arg	31:69	31:71	9	-1
op	31:69	0:0	10	-
water	31:70	0:0	10	1
arg	31:73	31:108	9	is->audio_filter_src.channel_layout
water	31:73	0:0	10	is
op	31:75	0:0	10	->
water	31:77	0:0	10	audio_filter_src
op	31:93	0:0	10	.
water	31:94	0:0	10	channel_layout
water	31:109	0:0	8	;
call	32:20	32:91	8	av_get_channel_layout_string
arg	32:49	32:53	9	buf2
water	32:49	0:0	10	buf2
arg	32:55	32:67	9	sizeof(buf2)
op	32:55	0:0	10	sizeof
water	32:61	0:0	10	(
water	32:62	0:0	10	buf2
water	32:66	0:0	10	)
arg	32:69	32:71	9	-1
op	32:69	0:0	10	-
water	32:70	0:0	10	1
arg	32:73	32:91	9	dec_channel_layout
water	32:73	0:0	10	dec_channel_layout
water	32:92	0:0	8	;
call	33:20	36:143	8	av_log
arg	33:27	33:31	9	NULL
water	33:27	0:0	10	NULL
arg	33:33	33:45	9	AV_LOG_DEBUG
water	33:33	0:0	10	AV_LOG_DEBUG
arg	34:27	34:140	9	"Audio frame changed from rate:%d ch:%d fmt:%s layout:%s serial:%d to rate:%d ch:%d fmt:%s layout:%s serial:%d\n"
water	34:27	0:0	10	"Audio frame changed from rate:%d ch:%d fmt:%s layout:%s serial:%d to rate:%d ch:%d fmt:%s layout:%s serial:%d\n"
arg	35:27	35:52	9	is->audio_filter_src.freq
water	35:27	0:0	10	is
op	35:29	0:0	10	->
water	35:31	0:0	10	audio_filter_src
op	35:47	0:0	10	.
water	35:48	0:0	10	freq
arg	35:54	35:83	9	is->audio_filter_src.channels
water	35:54	0:0	10	is
op	35:56	0:0	10	->
water	35:58	0:0	10	audio_filter_src
op	35:74	0:0	10	.
water	35:75	0:0	10	channels
arg	35:85	35:133	9	av_get_sample_fmt_name(is->audio_filter_src.fmt)
call	35:85	35:132	10	av_get_sample_fmt_name
arg	35:108	35:132	11	is->audio_filter_src.fmt
water	35:108	0:0	12	is
op	35:110	0:0	12	->
water	35:112	0:0	12	audio_filter_src
op	35:128	0:0	12	.
water	35:129	0:0	12	fmt
arg	35:135	35:139	9	buf1
water	35:135	0:0	10	buf1
arg	35:141	35:152	9	last_serial
water	35:141	0:0	10	last_serial
arg	36:27	36:45	9	frame->sample_rate
water	36:27	0:0	10	frame
op	36:32	0:0	10	->
water	36:34	0:0	10	sample_rate
arg	36:47	36:75	9	av_frame_get_channels(frame)
call	36:47	36:74	10	av_frame_get_channels
arg	36:69	36:74	11	frame
water	36:69	0:0	12	frame
arg	36:77	36:114	9	av_get_sample_fmt_name(frame->format)
call	36:77	36:113	10	av_get_sample_fmt_name
arg	36:100	36:113	11	frame->format
water	36:100	0:0	12	frame
op	36:105	0:0	12	->
water	36:107	0:0	12	format
arg	36:116	36:120	9	buf2
water	36:116	0:0	10	buf2
arg	36:122	36:143	9	is->auddec.pkt_serial
water	36:122	0:0	10	is
op	36:124	0:0	10	->
water	36:126	0:0	10	auddec
op	36:132	0:0	10	.
water	36:133	0:0	10	pkt_serial
water	36:144	0:0	8	;
water	37:20	0:0	8	is
op	37:22	0:0	8	->
water	37:24	0:0	8	audio_filter_src
op	37:40	0:0	8	.
water	37:41	0:0	8	fmt
op	37:56	0:0	8	=
water	37:58	0:0	8	frame
op	37:63	0:0	8	->
water	37:65	0:0	8	format
water	37:71	0:0	8	;
water	38:20	0:0	8	is
op	38:22	0:0	8	->
water	38:24	0:0	8	audio_filter_src
op	38:40	0:0	8	.
water	38:41	0:0	8	channels
op	38:56	0:0	8	=
call	38:58	38:85	8	av_frame_get_channels
arg	38:80	38:85	9	frame
water	38:80	0:0	10	frame
water	38:86	0:0	8	;
water	39:20	0:0	8	is
op	39:22	0:0	8	->
water	39:24	0:0	8	audio_filter_src
op	39:40	0:0	8	.
water	39:41	0:0	8	channel_layout
op	39:56	0:0	8	=
water	39:58	0:0	8	dec_channel_layout
water	39:76	0:0	8	;
water	40:20	0:0	8	is
op	40:22	0:0	8	->
water	40:24	0:0	8	audio_filter_src
op	40:40	0:0	8	.
water	40:41	0:0	8	freq
op	40:56	0:0	8	=
water	40:58	0:0	8	frame
op	40:63	0:0	8	->
water	40:65	0:0	8	sample_rate
water	40:76	0:0	8	;
water	41:20	0:0	8	last_serial
op	41:56	0:0	8	=
water	41:58	0:0	8	is
op	41:60	0:0	8	->
water	41:62	0:0	8	auddec
op	41:68	0:0	8	.
water	41:69	0:0	8	pkt_serial
water	41:79	0:0	8	;
if	42:20	43:36	8	(( ret =configure_audio_filters (is ,afilters ,1 ) ) < 0)
cond	42:24	42:75	9	( ret =configure_audio_filters (is ,afilters ,1 ) ) < 0
water	42:24	0:0	10	(
water	42:25	0:0	10	ret
op	42:29	0:0	10	=
call	42:31	42:70	10	configure_audio_filters
arg	42:55	42:57	11	is
water	42:55	0:0	12	is
arg	42:59	42:67	11	afilters
water	42:59	0:0	12	afilters
arg	42:69	42:70	11	1
water	42:69	0:0	12	1
water	42:71	0:0	10	)
op	42:73	0:0	10	<
water	42:75	0:0	10	0
stmts	43:24	43:36	9	
goto	43:24	43:36	10	the_end
water	43:29	0:0	11	the_end
water	44:16	0:0	8	}
if	45:12	46:28	6	(( ret =av_buffersrc_add_frame (is -> in_audio_filter ,frame ) ) < 0)
cond	45:16	45:77	7	( ret =av_buffersrc_add_frame (is -> in_audio_filter ,frame ) ) < 0
water	45:16	0:0	8	(
water	45:17	0:0	8	ret
op	45:21	0:0	8	=
call	45:23	45:72	8	av_buffersrc_add_frame
arg	45:46	45:65	9	is->in_audio_filter
water	45:46	0:0	10	is
op	45:48	0:0	10	->
water	45:50	0:0	10	in_audio_filter
arg	45:67	45:72	9	frame
water	45:67	0:0	10	frame
water	45:73	0:0	8	)
op	45:75	0:0	8	<
water	45:77	0:0	8	0
stmts	46:16	46:28	7	
goto	46:16	46:28	8	the_end
water	46:21	0:0	9	the_end
while	47:12	61:12	6	(( ret =av_buffersink_get_frame_flags (is -> out_audio_filter ,frame ,0 ) ) >= 0)
cond	47:19	47:92	7	( ret =av_buffersink_get_frame_flags (is -> out_audio_filter ,frame ,0 ) ) >= 0
water	47:19	0:0	8	(
water	47:20	0:0	8	ret
op	47:24	0:0	8	=
call	47:26	47:86	8	av_buffersink_get_frame_flags
arg	47:56	47:76	9	is->out_audio_filter
water	47:56	0:0	10	is
op	47:58	0:0	10	->
water	47:60	0:0	10	out_audio_filter
arg	47:78	47:83	9	frame
water	47:78	0:0	10	frame
arg	47:85	47:86	9	0
water	47:85	0:0	10	0
water	47:87	0:0	8	)
op	47:89	0:0	8	>=
water	47:92	0:0	8	0
stmts	47:95	61:12	7	
water	47:95	0:0	8	{
water	48:16	0:0	8	tb
op	48:19	0:0	8	=
call	48:21	48:69	8	av_buffersink_get_time_base
arg	48:49	48:69	9	is->out_audio_filter
water	48:49	0:0	10	is
op	48:51	0:0	10	->
water	48:53	0:0	10	out_audio_filter
water	48:70	0:0	8	;
if	50:16	51:32	8	(! ( af =frame_queue_peek_writable (& is -> sampq ) ))
cond	50:20	50:64	9	! ( af =frame_queue_peek_writable (& is -> sampq ) )
op	50:20	0:0	10	!
water	50:21	0:0	10	(
water	50:22	0:0	10	af
op	50:25	0:0	10	=
call	50:27	50:63	10	frame_queue_peek_writable
arg	50:53	50:63	11	&is->sampq
op	50:53	0:0	12	&
water	50:54	0:0	12	is
op	50:56	0:0	12	->
water	50:58	0:0	12	sampq
water	50:64	0:0	10	)
stmts	51:20	51:32	9	
goto	51:20	51:32	10	the_end
water	51:25	0:0	11	the_end
water	52:16	0:0	8	af
op	52:18	0:0	8	->
water	52:20	0:0	8	pts
op	52:24	0:0	8	=
water	52:26	0:0	8	(
water	52:27	0:0	8	frame
op	52:32	0:0	8	->
water	52:34	0:0	8	pts
op	52:38	0:0	8	==
water	52:41	0:0	8	AV_NOPTS_VALUE
water	52:55	0:0	8	)
water	52:57	0:0	8	?
water	52:59	0:0	8	NAN
water	52:63	0:0	8	:
water	52:65	0:0	8	frame
op	52:70	0:0	8	->
water	52:72	0:0	8	pts
call	52:76	52:87	8	*av_q2d
arg	52:85	52:87	9	tb
water	52:85	0:0	10	tb
water	52:88	0:0	8	;
water	53:16	0:0	8	af
op	53:18	0:0	8	->
water	53:20	0:0	8	pos
op	53:24	0:0	8	=
call	53:26	53:52	8	av_frame_get_pkt_pos
arg	53:47	53:52	9	frame
water	53:47	0:0	10	frame
water	53:53	0:0	8	;
water	54:16	0:0	8	af
op	54:18	0:0	8	->
water	54:20	0:0	8	serial
op	54:27	0:0	8	=
water	54:29	0:0	8	is
op	54:31	0:0	8	->
water	54:33	0:0	8	auddec
op	54:39	0:0	8	.
water	54:40	0:0	8	pkt_serial
water	54:50	0:0	8	;
water	55:16	0:0	8	af
op	55:18	0:0	8	->
water	55:20	0:0	8	duration
op	55:29	0:0	8	=
call	55:31	55:89	8	av_q2d
arg	55:38	55:89	9	(AVRational){frame->nb_samples,frame->sample_rate}
water	55:38	0:0	10	(
water	55:39	0:0	10	AVRational
water	55:49	0:0	10	)
water	55:50	0:0	10	{
water	55:51	0:0	10	frame
op	55:56	0:0	10	->
water	55:58	0:0	10	nb_samples
water	55:68	0:0	10	,
water	55:70	0:0	10	frame
op	55:75	0:0	10	->
water	55:77	0:0	10	sample_rate
water	55:88	0:0	10	}
water	55:90	0:0	8	;
call	56:16	56:50	8	av_frame_move_ref
arg	56:34	56:43	9	af->frame
water	56:34	0:0	10	af
op	56:36	0:0	10	->
water	56:38	0:0	10	frame
arg	56:45	56:50	9	frame
water	56:45	0:0	10	frame
water	56:51	0:0	8	;
call	57:16	57:43	8	frame_queue_push
arg	57:33	57:43	9	&is->sampq
op	57:33	0:0	10	&
water	57:34	0:0	10	is
op	57:36	0:0	10	->
water	57:38	0:0	10	sampq
water	57:44	0:0	8	;
if	59:16	60:25	8	(is -> audioq . serial != is -> auddec . pkt_serial)
cond	59:20	59:52	9	is -> audioq . serial != is -> auddec . pkt_serial
water	59:20	0:0	10	is
op	59:22	0:0	10	->
water	59:24	0:0	10	audioq
op	59:30	0:0	10	.
water	59:31	0:0	10	serial
op	59:38	0:0	10	!=
water	59:41	0:0	10	is
op	59:43	0:0	10	->
water	59:45	0:0	10	auddec
op	59:51	0:0	10	.
water	59:52	0:0	10	pkt_serial
stmts	60:20	60:25	9	
break	60:20	60:25	10	
water	61:12	0:0	8	}
if	62:12	63:59	6	(ret == AVERROR_EOF)
cond	62:16	62:23	7	ret == AVERROR_EOF
water	62:16	0:0	8	ret
op	62:20	0:0	8	==
water	62:23	0:0	8	AVERROR_EOF
stmts	63:16	63:59	7	
water	63:16	0:0	8	is
op	63:18	0:0	8	->
water	63:20	0:0	8	auddec
op	63:26	0:0	8	.
water	63:27	0:0	8	finished
op	63:36	0:0	8	=
water	63:38	0:0	8	is
op	63:40	0:0	8	->
water	63:42	0:0	8	auddec
op	63:48	0:0	8	.
water	63:49	0:0	8	pkt_serial
water	63:59	0:0	8	;
water	65:8	0:0	6	}
water	66:4	0:0	4	}
water	66:70	0:0	2	;
label	67:1	67:8	2	the_end :
call	69:4	69:35	2	avfilter_graph_free
arg	69:24	69:35	3	&is->agraph
op	69:24	0:0	4	&
water	69:25	0:0	4	is
op	69:27	0:0	4	->
water	69:29	0:0	4	agraph
water	69:36	0:0	2	;
call	71:4	71:24	2	av_frame_free
arg	71:18	71:24	3	&frame
op	71:18	0:0	4	&
water	71:19	0:0	4	frame
water	71:25	0:0	2	;
return	72:4	72:14	2	ret
water	72:11	0:0	3	ret
