func	1:0	66:0	0	static inline void	plot_freq
params	1:28	0:0	1	
param	1:29	1:48	2	ShowFreqsContext *	s
param	1:50	1:56	2	int	ch
param	2:29	2:37	2	double	a
param	2:39	2:44	2	int	f
param	2:46	2:59	2	uint8_t	fg[4]
param	2:61	2:72	2	int *	prev_y
param	3:29	3:41	2	AVFrame *	out
param	3:43	3:64	2	AVFilterLink *	outlink
stmnts	0:0	65:4	1	
decl	5:4	5:22	2	const int	w
op	5:16	0:0	2	=
water	5:18	0:0	2	s
op	5:19	0:0	2	->
water	5:21	0:0	2	w
decl	6:4	6:40	2	const float	avg
op	6:20	0:0	2	=
water	6:22	0:0	2	s
op	6:23	0:0	2	->
water	6:25	0:0	2	avg_data
op	6:33	0:0	2	[
water	6:34	0:0	2	ch
op	6:36	0:0	2	]
op	6:37	0:0	2	[
water	6:38	0:0	2	f
op	6:39	0:0	2	]
decl	7:4	7:39	2	const float	bsize
op	7:22	0:0	2	=
call	7:24	7:38	3	get_bsize
arg	7:34	7:35	4	s
water	7:34	0:0	5	s
arg	7:37	7:38	4	f
water	7:37	0:0	5	f
decl	8:4	8:31	2	const int	sx
op	8:17	0:0	2	=
call	8:19	8:30	3	get_sx
arg	8:26	8:27	4	s
water	8:26	0:0	5	s
arg	8:29	8:30	4	f
water	8:29	0:0	5	f
decl	9:4	9:15	2	int	x
water	9:9	0:0	2	,
decl	9:4	9:15	2	int	y
water	9:12	0:0	2	,
decl	9:4	9:15	2	int	i
switch	10:4	23:4	2	(s -> ascale)
cond	10:11	10:14	3	s -> ascale
water	10:11	0:0	4	s
op	10:12	0:0	4	->
water	10:14	0:0	4	ascale
stmts	10:22	23:4	3	
water	10:22	0:0	4	{
label	11:4	11:16	4	case AS_SQRT :
water	12:8	0:0	4	a
op	12:10	0:0	4	=
water	12:12	0:0	4	1
op	12:13	0:0	4	.
water	12:14	0:0	4	0
op	12:16	0:0	4	-
call	12:18	12:24	4	sqrt
arg	12:23	12:24	5	a
water	12:23	0:0	6	a
water	12:25	0:0	4	;
break	13:8	13:13	4	
label	14:4	14:16	4	case AS_CBRT :
water	15:8	0:0	4	a
op	15:10	0:0	4	=
water	15:12	0:0	4	1
op	15:13	0:0	4	.
water	15:14	0:0	4	0
op	15:16	0:0	4	-
call	15:18	15:24	4	cbrt
arg	15:23	15:24	5	a
water	15:23	0:0	6	a
water	15:25	0:0	4	;
break	16:8	16:13	4	
label	17:4	17:15	4	case AS_LOG :
water	18:8	0:0	4	a
op	18:10	0:0	4	=
call	18:12	18:36	4	log
arg	18:16	18:36	5	av_clipd(a,1e-6,1)
call	18:16	18:35	6	av_clipd
arg	18:25	18:26	7	a
water	18:25	0:0	8	a
arg	18:28	18:32	7	1e-6
water	18:28	0:0	8	1
water	18:29	0:0	8	e
op	18:30	0:0	8	-
water	18:31	0:0	8	6
arg	18:34	18:35	7	1
water	18:34	0:0	8	1
op	18:38	0:0	4	/
call	18:40	18:48	4	log
arg	18:44	18:48	5	1e-6
water	18:44	0:0	6	1
water	18:45	0:0	6	e
op	18:46	0:0	6	-
water	18:47	0:0	6	6
water	18:49	0:0	4	;
break	19:8	19:13	4	
label	20:4	20:18	4	case AS_LINEAR :
water	21:8	0:0	4	a
op	21:10	0:0	4	=
water	21:12	0:0	4	1
op	21:13	0:0	4	.
water	21:14	0:0	4	0
op	21:16	0:0	4	-
water	21:18	0:0	4	a
water	21:19	0:0	4	;
break	22:8	22:13	4	
water	23:4	0:0	4	}
water	24:4	0:0	2	y
op	24:6	0:0	2	=
water	24:8	0:0	2	a
op	24:10	0:0	2	*
water	24:12	0:0	2	outlink
op	24:19	0:0	2	->
water	24:21	0:0	2	h
op	24:23	0:0	2	-
water	24:25	0:0	2	1
water	24:26	0:0	2	;
if	25:4	26:14	2	(y < 0)
cond	25:8	25:12	3	y < 0
water	25:8	0:0	4	y
op	25:10	0:0	4	<
water	25:12	0:0	4	0
stmts	26:8	26:14	3	
return	26:8	26:14	4	
switch	27:4	37:4	2	(s -> avg)
cond	27:12	27:15	3	s -> avg
water	27:12	0:0	4	s
op	27:13	0:0	4	->
water	27:15	0:0	4	avg
stmts	27:20	37:4	3	
water	27:20	0:0	4	{
label	28:4	28:10	4	case 0 :
water	29:8	0:0	4	y
op	29:10	0:0	4	=
water	29:12	0:0	4	s
op	29:13	0:0	4	->
water	29:15	0:0	4	avg_data
op	29:23	0:0	4	[
water	29:24	0:0	4	ch
op	29:26	0:0	4	]
op	29:27	0:0	4	[
water	29:28	0:0	4	f
op	29:29	0:0	4	]
op	29:31	0:0	4	=
op	29:33	0:0	4	!
water	29:34	0:0	4	outlink
op	29:41	0:0	4	->
water	29:43	0:0	4	frame_count
water	29:55	0:0	4	?
water	29:57	0:0	4	y
water	29:59	0:0	4	:
call	29:61	29:73	4	FFMIN
arg	29:67	29:70	5	avg
water	29:67	0:0	6	avg
arg	29:72	29:73	5	y
water	29:72	0:0	6	y
water	29:74	0:0	4	;
break	30:8	30:13	4	
label	31:4	31:10	4	case 1 :
break	32:8	32:13	4	
label	33:4	33:11	4	default :
water	34:8	0:0	4	s
op	34:9	0:0	4	->
water	34:11	0:0	4	avg_data
op	34:19	0:0	4	[
water	34:20	0:0	4	ch
op	34:22	0:0	4	]
op	34:23	0:0	4	[
water	34:24	0:0	4	f
op	34:25	0:0	4	]
op	34:27	0:0	4	=
water	34:29	0:0	4	avg
op	34:33	0:0	4	+
water	34:35	0:0	4	y
op	34:37	0:0	4	*
water	34:39	0:0	4	(
water	34:40	0:0	4	y
op	34:42	0:0	4	-
water	34:44	0:0	4	avg
water	34:47	0:0	4	)
op	34:49	0:0	4	/
water	34:51	0:0	4	(
call	34:52	34:90	4	FFMIN
arg	34:58	34:82	5	outlink->frame_count+1
water	34:58	0:0	6	outlink
op	34:65	0:0	6	->
water	34:67	0:0	6	frame_count
op	34:79	0:0	6	+
water	34:81	0:0	6	1
arg	34:84	34:90	5	s->avg
water	34:84	0:0	6	s
op	34:85	0:0	6	->
water	34:87	0:0	6	avg
op	34:92	0:0	4	*
water	34:94	0:0	4	y
water	34:95	0:0	4	)
water	34:96	0:0	4	;
water	35:8	0:0	4	y
op	35:10	0:0	4	=
water	35:12	0:0	4	s
op	35:13	0:0	4	->
water	35:15	0:0	4	avg_data
op	35:23	0:0	4	[
water	35:24	0:0	4	ch
op	35:26	0:0	4	]
op	35:27	0:0	4	[
water	35:28	0:0	4	f
op	35:29	0:0	4	]
water	35:30	0:0	4	;
break	36:8	36:13	4	
water	37:4	0:0	4	}
switch	38:4	65:4	2	(s -> mode)
cond	38:11	38:14	3	s -> mode
water	38:11	0:0	4	s
op	38:12	0:0	4	->
water	38:14	0:0	4	mode
stmts	38:20	65:4	3	
water	38:20	0:0	4	{
label	39:4	39:13	4	case LINE :
if	40:8	42:8	4	(* prev_y == - 1)
cond	40:12	40:24	5	* prev_y == - 1
op	40:12	0:0	6	*
water	40:13	0:0	6	prev_y
op	40:20	0:0	6	==
op	40:23	0:0	6	-
water	40:24	0:0	6	1
stmts	40:27	42:8	5	
water	40:27	0:0	6	{
op	41:12	0:0	6	*
water	41:13	0:0	6	prev_y
op	41:20	0:0	6	=
water	41:22	0:0	6	y
water	41:23	0:0	6	;
water	42:8	0:0	6	}
if	43:8	48:8	4	(y <= * prev_y)
cond	43:12	43:18	5	y <= * prev_y
water	43:12	0:0	6	y
op	43:14	0:0	6	<=
op	43:17	0:0	6	*
water	43:18	0:0	6	prev_y
stmts	43:26	48:8	5	
water	43:26	0:0	6	{
for	44:12	45:39	6	(x = sx + 1 ;x < sx + bsize && x < w;x ++)
forinit	44:17	44:27	7	x = sx + 1 ;
water	44:17	0:0	8	x
op	44:19	0:0	8	=
water	44:21	0:0	8	sx
op	44:24	0:0	8	+
water	44:26	0:0	8	1
water	44:27	0:0	8	;
cond	44:29	44:51	7	x < sx + bsize && x < w
water	44:29	0:0	8	x
op	44:31	0:0	8	<
water	44:33	0:0	8	sx
op	44:36	0:0	8	+
water	44:38	0:0	8	bsize
op	44:44	0:0	8	&&
water	44:47	0:0	8	x
op	44:49	0:0	8	<
water	44:51	0:0	8	w
forexpr	44:54	44:55	7	x ++
water	44:54	0:0	8	x
op	44:55	0:0	8	++
stmts	45:16	45:39	7	
call	45:16	45:38	8	draw_dot
arg	45:25	45:28	9	out
water	45:25	0:0	10	out
arg	45:30	45:31	9	x
water	45:30	0:0	10	x
arg	45:33	45:34	9	y
water	45:33	0:0	10	y
arg	45:36	45:38	9	fg
water	45:36	0:0	10	fg
water	45:39	0:0	8	;
for	46:12	47:40	6	(i = y ;i <= * prev_y;i ++)
forinit	46:17	46:22	7	i = y ;
water	46:17	0:0	8	i
op	46:19	0:0	8	=
water	46:21	0:0	8	y
water	46:22	0:0	8	;
cond	46:24	46:30	7	i <= * prev_y
water	46:24	0:0	8	i
op	46:26	0:0	8	<=
op	46:29	0:0	8	*
water	46:30	0:0	8	prev_y
forexpr	46:38	46:39	7	i ++
water	46:38	0:0	8	i
op	46:39	0:0	8	++
stmts	47:16	47:40	7	
call	47:16	47:39	8	draw_dot
arg	47:25	47:28	9	out
water	47:25	0:0	10	out
arg	47:30	47:32	9	sx
water	47:30	0:0	10	sx
arg	47:34	47:35	9	i
water	47:34	0:0	10	i
arg	47:37	47:39	9	fg
water	47:37	0:0	10	fg
water	47:40	0:0	8	;
water	48:8	0:0	6	}
else	48:10	53:8	4
stmts	48:15	53:8	5	
water	48:15	0:0	6	{
for	49:12	50:40	6	(i = * prev_y ;i <= y;i ++)
forinit	49:17	49:28	7	i = * prev_y ;
water	49:17	0:0	8	i
op	49:19	0:0	8	=
op	49:21	0:0	8	*
water	49:22	0:0	8	prev_y
water	49:28	0:0	8	;
cond	49:30	49:35	7	i <= y
water	49:30	0:0	8	i
op	49:32	0:0	8	<=
water	49:35	0:0	8	y
forexpr	49:38	49:39	7	i ++
water	49:38	0:0	8	i
op	49:39	0:0	8	++
stmts	50:16	50:40	7	
call	50:16	50:39	8	draw_dot
arg	50:25	50:28	9	out
water	50:25	0:0	10	out
arg	50:30	50:32	9	sx
water	50:30	0:0	10	sx
arg	50:34	50:35	9	i
water	50:34	0:0	10	i
arg	50:37	50:39	9	fg
water	50:37	0:0	10	fg
water	50:40	0:0	8	;
for	51:12	52:43	6	(x = sx + 1 ;x < sx + bsize && x < w;x ++)
forinit	51:17	51:27	7	x = sx + 1 ;
water	51:17	0:0	8	x
op	51:19	0:0	8	=
water	51:21	0:0	8	sx
op	51:24	0:0	8	+
water	51:26	0:0	8	1
water	51:27	0:0	8	;
cond	51:29	51:51	7	x < sx + bsize && x < w
water	51:29	0:0	8	x
op	51:31	0:0	8	<
water	51:33	0:0	8	sx
op	51:36	0:0	8	+
water	51:38	0:0	8	bsize
op	51:44	0:0	8	&&
water	51:47	0:0	8	x
op	51:49	0:0	8	<
water	51:51	0:0	8	w
forexpr	51:54	51:55	7	x ++
water	51:54	0:0	8	x
op	51:55	0:0	8	++
stmts	52:16	52:43	7	
call	52:16	52:42	8	draw_dot
arg	52:25	52:28	9	out
water	52:25	0:0	10	out
arg	52:30	52:31	9	x
water	52:30	0:0	10	x
arg	52:33	52:38	9	i-1
water	52:33	0:0	10	i
op	52:35	0:0	10	-
water	52:37	0:0	10	1
arg	52:40	52:42	9	fg
water	52:40	0:0	10	fg
water	52:43	0:0	8	;
water	53:8	0:0	6	}
op	54:8	0:0	4	*
water	54:9	0:0	4	prev_y
op	54:16	0:0	4	=
water	54:18	0:0	4	y
water	54:19	0:0	4	;
break	55:8	55:13	4	
label	56:4	56:12	4	case BAR :
for	57:8	59:39	4	(x = sx ;x < sx + bsize && x < w;x ++)
forinit	57:13	57:19	5	x = sx ;
water	57:13	0:0	6	x
op	57:15	0:0	6	=
water	57:17	0:0	6	sx
water	57:19	0:0	6	;
cond	57:21	57:43	5	x < sx + bsize && x < w
water	57:21	0:0	6	x
op	57:23	0:0	6	<
water	57:25	0:0	6	sx
op	57:28	0:0	6	+
water	57:30	0:0	6	bsize
op	57:36	0:0	6	&&
water	57:39	0:0	6	x
op	57:41	0:0	6	<
water	57:43	0:0	6	w
forexpr	57:46	57:47	5	x ++
water	57:46	0:0	6	x
op	57:47	0:0	6	++
stmts	58:12	59:39	5	
for	58:12	59:39	6	(i = y ;i < outlink -> h;i ++)
forinit	58:17	58:22	7	i = y ;
water	58:17	0:0	8	i
op	58:19	0:0	8	=
water	58:21	0:0	8	y
water	58:22	0:0	8	;
cond	58:24	58:37	7	i < outlink -> h
water	58:24	0:0	8	i
op	58:26	0:0	8	<
water	58:28	0:0	8	outlink
op	58:35	0:0	8	->
water	58:37	0:0	8	h
forexpr	58:40	58:41	7	i ++
water	58:40	0:0	8	i
op	58:41	0:0	8	++
stmts	59:16	59:39	7	
call	59:16	59:38	8	draw_dot
arg	59:25	59:28	9	out
water	59:25	0:0	10	out
arg	59:30	59:31	9	x
water	59:30	0:0	10	x
arg	59:33	59:34	9	i
water	59:33	0:0	10	i
arg	59:36	59:38	9	fg
water	59:36	0:0	10	fg
water	59:39	0:0	8	;
break	60:8	60:13	4	
label	61:4	61:12	4	case DOT :
for	62:8	63:35	4	(x = sx ;x < sx + bsize && x < w;x ++)
forinit	62:13	62:19	5	x = sx ;
water	62:13	0:0	6	x
op	62:15	0:0	6	=
water	62:17	0:0	6	sx
water	62:19	0:0	6	;
cond	62:21	62:43	5	x < sx + bsize && x < w
water	62:21	0:0	6	x
op	62:23	0:0	6	<
water	62:25	0:0	6	sx
op	62:28	0:0	6	+
water	62:30	0:0	6	bsize
op	62:36	0:0	6	&&
water	62:39	0:0	6	x
op	62:41	0:0	6	<
water	62:43	0:0	6	w
forexpr	62:46	62:47	5	x ++
water	62:46	0:0	6	x
op	62:47	0:0	6	++
stmts	63:12	63:35	5	
call	63:12	63:34	6	draw_dot
arg	63:21	63:24	7	out
water	63:21	0:0	8	out
arg	63:26	63:27	7	x
water	63:26	0:0	8	x
arg	63:29	63:30	7	y
water	63:29	0:0	8	y
arg	63:32	63:34	7	fg
water	63:32	0:0	8	fg
water	63:35	0:0	6	;
break	64:8	64:13	4	
water	65:4	0:0	4	}
