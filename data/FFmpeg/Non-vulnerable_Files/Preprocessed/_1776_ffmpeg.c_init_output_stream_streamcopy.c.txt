func	1:0	103:0	0	static int	init_output_stream_streamcopy
params	1:40	0:0	1	
param	1:41	1:58	2	OutputStream *	ost
stmnts	0:0	102:12	1	
decl	3:4	3:50	2	OutputFile	*of
op	3:19	0:0	2	=
water	3:21	0:0	2	output_files
op	3:33	0:0	2	[
water	3:34	0:0	2	ost
op	3:37	0:0	2	->
water	3:39	0:0	2	file_index
op	3:49	0:0	2	]
decl	4:4	4:44	2	InputStream	*ist
op	4:21	0:0	2	=
call	4:23	4:43	3	get_input_stream
arg	4:40	4:43	4	ost
water	4:40	0:0	5	ost
decl	5:4	5:50	2	AVCodecParameters	*par_dst
op	5:31	0:0	2	=
water	5:33	0:0	2	ost
op	5:36	0:0	2	->
water	5:38	0:0	2	st
op	5:40	0:0	2	->
water	5:42	0:0	2	codecpar
decl	6:4	6:45	2	AVCodecParameters	*par_src
op	6:31	0:0	2	=
water	6:33	0:0	2	ost
op	6:36	0:0	2	->
water	6:38	0:0	2	ref_par
decl	7:4	7:18	2	AVRational	sar
decl	8:4	8:14	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:14	2	int	ret
decl	9:4	9:43	2	uint32_t	codec_tag
op	9:23	0:0	2	=
water	9:25	0:0	2	par_dst
op	9:32	0:0	2	->
water	9:34	0:0	2	codec_tag
call	10:4	10:34	2	av_assert0
arg	10:15	10:34	3	ist&&!ost->filter
water	10:15	0:0	4	ist
op	10:19	0:0	4	&&
op	10:22	0:0	4	!
water	10:23	0:0	4	ost
op	10:26	0:0	4	->
water	10:28	0:0	4	filter
water	10:35	0:0	2	;
water	11:4	0:0	2	ret
op	11:8	0:0	2	=
call	11:10	11:71	2	avcodec_parameters_to_context
arg	11:40	11:52	3	ost->enc_ctx
water	11:40	0:0	4	ost
op	11:43	0:0	4	->
water	11:45	0:0	4	enc_ctx
arg	11:54	11:71	3	ist->st->codecpar
water	11:54	0:0	4	ist
op	11:57	0:0	4	->
water	11:59	0:0	4	st
op	11:61	0:0	4	->
water	11:63	0:0	4	codecpar
water	11:72	0:0	2	;
if	12:4	13:63	2	(ret >= 0)
cond	12:8	12:15	3	ret >= 0
water	12:8	0:0	4	ret
op	12:12	0:0	4	>=
water	12:15	0:0	4	0
stmts	13:8	13:63	3	
water	13:8	0:0	4	ret
op	13:12	0:0	4	=
call	13:14	13:62	4	av_opt_set_dict
arg	13:30	13:42	5	ost->enc_ctx
water	13:30	0:0	6	ost
op	13:33	0:0	6	->
water	13:35	0:0	6	enc_ctx
arg	13:44	13:62	5	&ost->encoder_opts
op	13:44	0:0	6	&
water	13:45	0:0	6	ost
op	13:48	0:0	6	->
water	13:50	0:0	6	encoder_opts
water	13:63	0:0	4	;
if	14:4	18:4	2	(ret < 0)
cond	14:8	14:14	3	ret < 0
water	14:8	0:0	4	ret
op	14:12	0:0	4	<
water	14:14	0:0	4	0
stmts	14:17	18:4	3	
water	14:17	0:0	4	{
call	15:8	16:58	4	av_log
arg	15:15	15:19	5	NULL
water	15:15	0:0	6	NULL
arg	15:21	15:33	5	AV_LOG_FATAL
water	15:21	0:0	6	AV_LOG_FATAL
arg	16:15	16:58	5	"Error setting up codec context options.\n"
water	16:15	0:0	6	"Error setting up codec context options.\n"
water	16:59	0:0	4	;
return	17:8	17:18	4	ret
water	17:15	0:0	5	ret
water	18:4	0:0	4	}
call	19:4	19:57	2	avcodec_parameters_from_context
arg	19:36	19:43	3	par_src
water	19:36	0:0	4	par_src
arg	19:45	19:57	3	ost->enc_ctx
water	19:45	0:0	4	ost
op	19:48	0:0	4	->
water	19:50	0:0	4	enc_ctx
water	19:58	0:0	2	;
if	20:4	26:4	2	(! codec_tag)
cond	20:8	20:9	3	! codec_tag
op	20:8	0:0	4	!
water	20:9	0:0	4	codec_tag
stmts	20:20	26:4	3	
water	20:20	0:0	4	{
decl	21:8	21:34	4	unsigned int	codec_tag_tmp
if	22:8	25:42	4	(! of -> ctx -> oformat -> codec_tag ||av_codec_get_id (of -> ctx -> oformat -> codec_tag ,par_src -> codec_tag ) == par_src -> codec_id || !av_codec_get_tag2 (of -> ctx -> oformat -> codec_tag ,par_src -> codec_id ,& codec_tag_tmp ))
cond	22:12	24:93	5	! of -> ctx -> oformat -> codec_tag ||av_codec_get_id (of -> ctx -> oformat -> codec_tag ,par_src -> codec_tag ) == par_src -> codec_id || !av_codec_get_tag2 (of -> ctx -> oformat -> codec_tag ,par_src -> codec_id ,& codec_tag_tmp )
op	22:12	0:0	6	!
water	22:13	0:0	6	of
op	22:15	0:0	6	->
water	22:17	0:0	6	ctx
op	22:20	0:0	6	->
water	22:22	0:0	6	oformat
op	22:29	0:0	6	->
water	22:31	0:0	6	codec_tag
op	22:41	0:0	6	||
call	23:12	23:76	6	av_codec_get_id
arg	23:29	23:56	7	of->ctx->oformat->codec_tag
water	23:29	0:0	8	of
op	23:31	0:0	8	->
water	23:33	0:0	8	ctx
op	23:36	0:0	8	->
water	23:38	0:0	8	oformat
op	23:45	0:0	8	->
water	23:47	0:0	8	codec_tag
arg	23:58	23:76	7	par_src->codec_tag
water	23:58	0:0	8	par_src
op	23:65	0:0	8	->
water	23:67	0:0	8	codec_tag
op	23:78	0:0	6	==
water	23:81	0:0	6	par_src
op	23:88	0:0	6	->
water	23:90	0:0	6	codec_id
op	23:99	0:0	6	||
op	24:12	0:0	6	!
call	24:13	24:93	6	av_codec_get_tag2
arg	24:31	24:58	7	of->ctx->oformat->codec_tag
water	24:31	0:0	8	of
op	24:33	0:0	8	->
water	24:35	0:0	8	ctx
op	24:38	0:0	8	->
water	24:40	0:0	8	oformat
op	24:47	0:0	8	->
water	24:49	0:0	8	codec_tag
arg	24:60	24:77	7	par_src->codec_id
water	24:60	0:0	8	par_src
op	24:67	0:0	8	->
water	24:69	0:0	8	codec_id
arg	24:79	24:93	7	&codec_tag_tmp
op	24:79	0:0	8	&
water	24:80	0:0	8	codec_tag_tmp
stmts	25:12	25:42	5	
water	25:12	0:0	6	codec_tag
op	25:22	0:0	6	=
water	25:24	0:0	6	par_src
op	25:31	0:0	6	->
water	25:33	0:0	6	codec_tag
water	25:42	0:0	6	;
water	26:4	0:0	4	}
water	27:4	0:0	2	ret
op	27:8	0:0	2	=
call	27:10	27:50	2	avcodec_parameters_copy
arg	27:34	27:41	3	par_dst
water	27:34	0:0	4	par_dst
arg	27:43	27:50	3	par_src
water	27:43	0:0	4	par_src
water	27:51	0:0	2	;
if	28:4	29:18	2	(ret < 0)
cond	28:8	28:14	3	ret < 0
water	28:8	0:0	4	ret
op	28:12	0:0	4	<
water	28:14	0:0	4	0
stmts	29:8	29:18	3	
return	29:8	29:18	4	ret
water	29:15	0:0	5	ret
water	30:4	0:0	2	par_dst
op	30:11	0:0	2	->
water	30:13	0:0	2	codec_tag
op	30:23	0:0	2	=
water	30:25	0:0	2	codec_tag
water	30:34	0:0	2	;
if	31:4	32:40	2	(! ost -> frame_rate . num)
cond	31:8	31:25	3	! ost -> frame_rate . num
op	31:8	0:0	4	!
water	31:9	0:0	4	ost
op	31:12	0:0	4	->
water	31:14	0:0	4	frame_rate
op	31:24	0:0	4	.
water	31:25	0:0	4	num
stmts	32:8	32:40	3	
water	32:8	0:0	4	ost
op	32:11	0:0	4	->
water	32:13	0:0	4	frame_rate
op	32:24	0:0	4	=
water	32:26	0:0	4	ist
op	32:29	0:0	4	->
water	32:31	0:0	4	framerate
water	32:40	0:0	4	;
water	33:4	0:0	2	ost
op	33:7	0:0	2	->
water	33:9	0:0	2	st
op	33:11	0:0	2	->
water	33:13	0:0	2	avg_frame_rate
op	33:28	0:0	2	=
water	33:30	0:0	2	ost
op	33:33	0:0	2	->
water	33:35	0:0	2	frame_rate
water	33:45	0:0	2	;
water	34:4	0:0	2	ret
op	34:8	0:0	2	=
call	34:10	34:99	2	avformat_transfer_internal_stream_timing_info
arg	34:56	34:72	3	of->ctx->oformat
water	34:56	0:0	4	of
op	34:58	0:0	4	->
water	34:60	0:0	4	ctx
op	34:63	0:0	4	->
water	34:65	0:0	4	oformat
arg	34:74	34:81	3	ost->st
water	34:74	0:0	4	ost
op	34:77	0:0	4	->
water	34:79	0:0	4	st
arg	34:83	34:90	3	ist->st
water	34:83	0:0	4	ist
op	34:86	0:0	4	->
water	34:88	0:0	4	st
arg	34:92	34:99	3	copy_tb
water	34:92	0:0	4	copy_tb
water	34:100	0:0	2	;
if	35:4	36:18	2	(ret < 0)
cond	35:8	35:14	3	ret < 0
water	35:8	0:0	4	ret
op	35:12	0:0	4	<
water	35:14	0:0	4	0
stmts	36:8	36:18	3	
return	36:8	36:18	4	ret
water	36:15	0:0	5	ret
if	38:4	39:96	2	(ost -> st -> time_base . num <= 0 || ost -> st -> time_base . den <= 0)
cond	38:8	38:65	3	ost -> st -> time_base . num <= 0 || ost -> st -> time_base . den <= 0
water	38:8	0:0	4	ost
op	38:11	0:0	4	->
water	38:13	0:0	4	st
op	38:15	0:0	4	->
water	38:17	0:0	4	time_base
op	38:26	0:0	4	.
water	38:27	0:0	4	num
op	38:31	0:0	4	<=
water	38:34	0:0	4	0
op	38:36	0:0	4	||
water	38:39	0:0	4	ost
op	38:42	0:0	4	->
water	38:44	0:0	4	st
op	38:46	0:0	4	->
water	38:48	0:0	4	time_base
op	38:57	0:0	4	.
water	38:58	0:0	4	den
op	38:62	0:0	4	<=
water	38:65	0:0	4	0
stmts	39:8	39:96	3	
water	39:8	0:0	4	ost
op	39:11	0:0	4	->
water	39:13	0:0	4	st
op	39:15	0:0	4	->
water	39:17	0:0	4	time_base
op	39:27	0:0	4	=
call	39:29	39:95	4	av_add_q
arg	39:38	39:75	5	av_stream_get_codec_timebase(ost->st)
call	39:38	39:74	6	av_stream_get_codec_timebase
arg	39:67	39:74	7	ost->st
water	39:67	0:0	8	ost
op	39:70	0:0	8	->
water	39:72	0:0	8	st
arg	39:77	39:95	5	(AVRational){0,1}
water	39:77	0:0	6	(
water	39:78	0:0	6	AVRational
water	39:88	0:0	6	)
water	39:89	0:0	6	{
water	39:90	0:0	6	0
water	39:91	0:0	6	,
water	39:93	0:0	6	1
water	39:94	0:0	6	}
water	39:96	0:0	4	;
if	41:4	42:99	2	(ost -> st -> duration <= 0 && ist -> st -> duration > 0)
cond	41:8	41:54	3	ost -> st -> duration <= 0 && ist -> st -> duration > 0
water	41:8	0:0	4	ost
op	41:11	0:0	4	->
water	41:13	0:0	4	st
op	41:15	0:0	4	->
water	41:17	0:0	4	duration
op	41:26	0:0	4	<=
water	41:29	0:0	4	0
op	41:31	0:0	4	&&
water	41:34	0:0	4	ist
op	41:37	0:0	4	->
water	41:39	0:0	4	st
op	41:41	0:0	4	->
water	41:43	0:0	4	duration
op	41:52	0:0	4	>
water	41:54	0:0	4	0
stmts	42:8	42:99	3	
water	42:8	0:0	4	ost
op	42:11	0:0	4	->
water	42:13	0:0	4	st
op	42:15	0:0	4	->
water	42:17	0:0	4	duration
op	42:26	0:0	4	=
call	42:28	42:98	4	av_rescale_q
arg	42:41	42:58	5	ist->st->duration
water	42:41	0:0	6	ist
op	42:44	0:0	6	->
water	42:46	0:0	6	st
op	42:48	0:0	6	->
water	42:50	0:0	6	duration
arg	42:60	42:78	5	ist->st->time_base
water	42:60	0:0	6	ist
op	42:63	0:0	6	->
water	42:65	0:0	6	st
op	42:67	0:0	6	->
water	42:69	0:0	6	time_base
arg	42:80	42:98	5	ost->st->time_base
water	42:80	0:0	6	ost
op	42:83	0:0	6	->
water	42:85	0:0	6	st
op	42:87	0:0	6	->
water	42:89	0:0	6	time_base
water	42:99	0:0	4	;
water	44:4	0:0	2	ost
op	44:7	0:0	2	->
water	44:9	0:0	2	st
op	44:11	0:0	2	->
water	44:13	0:0	2	disposition
op	44:25	0:0	2	=
water	44:27	0:0	2	ist
op	44:30	0:0	2	->
water	44:32	0:0	2	st
op	44:34	0:0	2	->
water	44:36	0:0	2	disposition
water	44:47	0:0	2	;
if	45:4	62:4	2	(ist -> st -> nb_side_data)
cond	45:8	45:17	3	ist -> st -> nb_side_data
water	45:8	0:0	4	ist
op	45:11	0:0	4	->
water	45:13	0:0	4	st
op	45:15	0:0	4	->
water	45:17	0:0	4	nb_side_data
stmts	45:31	62:4	3	
water	45:31	0:0	4	{
water	46:8	0:0	4	ost
op	46:11	0:0	4	->
water	46:13	0:0	4	st
op	46:15	0:0	4	->
water	46:17	0:0	4	side_data
op	46:27	0:0	4	=
call	46:29	47:73	4	av_realloc_array
arg	46:46	46:50	5	NULL
water	46:46	0:0	6	NULL
arg	46:52	46:73	5	ist->st->nb_side_data
water	46:52	0:0	6	ist
op	46:55	0:0	6	->
water	46:57	0:0	6	st
op	46:59	0:0	6	->
water	46:61	0:0	6	nb_side_data
arg	47:46	47:73	5	sizeof(*ist->st->side_data)
op	47:46	0:0	6	sizeof
water	47:52	0:0	6	(
op	47:53	0:0	6	*
water	47:54	0:0	6	ist
op	47:57	0:0	6	->
water	47:59	0:0	6	st
op	47:61	0:0	6	->
water	47:63	0:0	6	side_data
water	47:72	0:0	6	)
water	47:74	0:0	4	;
if	48:8	49:34	4	(! ost -> st -> side_data)
cond	48:12	48:22	5	! ost -> st -> side_data
op	48:12	0:0	6	!
water	48:13	0:0	6	ost
op	48:16	0:0	6	->
water	48:18	0:0	6	st
op	48:20	0:0	6	->
water	48:22	0:0	6	side_data
stmts	49:12	49:34	5	
return	49:12	49:34	6	AVERROR(ENOMEM)
call	49:19	49:33	7	AVERROR
arg	49:27	49:33	8	ENOMEM
water	49:27	0:0	9	ENOMEM
water	50:8	0:0	4	ost
op	50:11	0:0	4	->
water	50:13	0:0	4	st
op	50:15	0:0	4	->
water	50:17	0:0	4	nb_side_data
op	50:30	0:0	4	=
water	50:32	0:0	4	0
water	50:33	0:0	4	;
for	51:8	61:8	4	(i = 0 ;i < ist -> st -> nb_side_data;i ++)
forinit	51:13	51:18	5	i = 0 ;
water	51:13	0:0	6	i
op	51:15	0:0	6	=
water	51:17	0:0	6	0
water	51:18	0:0	6	;
cond	51:20	51:33	5	i < ist -> st -> nb_side_data
water	51:20	0:0	6	i
op	51:22	0:0	6	<
water	51:24	0:0	6	ist
op	51:27	0:0	6	->
water	51:29	0:0	6	st
op	51:31	0:0	6	->
water	51:33	0:0	6	nb_side_data
forexpr	51:47	51:48	5	i ++
water	51:47	0:0	6	i
op	51:48	0:0	6	++
stmts	51:52	61:8	5	
water	51:52	0:0	6	{
decl	52:12	52:67	6	const AVPacketSideData	*sd_src
op	52:43	0:0	6	=
op	52:45	0:0	6	&
water	52:46	0:0	6	ist
op	52:49	0:0	6	->
water	52:51	0:0	6	st
op	52:53	0:0	6	->
water	52:55	0:0	6	side_data
op	52:64	0:0	6	[
water	52:65	0:0	6	i
op	52:66	0:0	6	]
decl	53:12	53:81	6	AVPacketSideData	*sd_dst
op	53:37	0:0	6	=
op	53:39	0:0	6	&
water	53:40	0:0	6	ost
op	53:43	0:0	6	->
water	53:45	0:0	6	st
op	53:47	0:0	6	->
water	53:49	0:0	6	side_data
op	53:58	0:0	6	[
water	53:59	0:0	6	ost
op	53:62	0:0	6	->
water	53:64	0:0	6	st
op	53:66	0:0	6	->
water	53:68	0:0	6	nb_side_data
op	53:80	0:0	6	]
water	54:12	0:0	6	sd_dst
op	54:18	0:0	6	->
water	54:20	0:0	6	data
op	54:25	0:0	6	=
call	54:27	54:49	6	av_malloc
arg	54:37	54:49	7	sd_src->size
water	54:37	0:0	8	sd_src
op	54:43	0:0	8	->
water	54:45	0:0	8	size
water	54:50	0:0	6	;
if	55:12	56:38	6	(! sd_dst -> data)
cond	55:16	55:25	7	! sd_dst -> data
op	55:16	0:0	8	!
water	55:17	0:0	8	sd_dst
op	55:23	0:0	8	->
water	55:25	0:0	8	data
stmts	56:16	56:38	7	
return	56:16	56:38	8	AVERROR(ENOMEM)
call	56:23	56:37	9	AVERROR
arg	56:31	56:37	10	ENOMEM
water	56:31	0:0	11	ENOMEM
call	57:12	57:59	6	memcpy
arg	57:19	57:31	7	sd_dst->data
water	57:19	0:0	8	sd_dst
op	57:25	0:0	8	->
water	57:27	0:0	8	data
arg	57:33	57:45	7	sd_src->data
water	57:33	0:0	8	sd_src
op	57:39	0:0	8	->
water	57:41	0:0	8	data
arg	57:47	57:59	7	sd_src->size
water	57:47	0:0	8	sd_src
op	57:53	0:0	8	->
water	57:55	0:0	8	size
water	57:60	0:0	6	;
water	58:12	0:0	6	sd_dst
op	58:18	0:0	6	->
water	58:20	0:0	6	size
op	58:25	0:0	6	=
water	58:27	0:0	6	sd_src
op	58:33	0:0	6	->
water	58:35	0:0	6	size
water	58:39	0:0	6	;
water	59:12	0:0	6	sd_dst
op	59:18	0:0	6	->
water	59:20	0:0	6	type
op	59:25	0:0	6	=
water	59:27	0:0	6	sd_src
op	59:33	0:0	6	->
water	59:35	0:0	6	type
water	59:39	0:0	6	;
water	60:12	0:0	6	ost
op	60:15	0:0	6	->
water	60:17	0:0	6	st
op	60:19	0:0	6	->
water	60:21	0:0	6	nb_side_data
op	60:33	0:0	6	++
water	60:35	0:0	6	;
water	61:8	0:0	6	}
water	62:4	0:0	4	}
if	63:4	68:4	2	(ost -> rotate_overridden)
cond	63:8	63:13	3	ost -> rotate_overridden
water	63:8	0:0	4	ost
op	63:11	0:0	4	->
water	63:13	0:0	4	rotate_overridden
stmts	63:32	68:4	3	
water	63:32	0:0	4	{
decl	64:8	65:66	4	uint8_t	*sd
op	64:20	0:0	4	=
call	64:22	65:65	5	av_stream_new_side_data
arg	64:46	64:53	6	ost->st
water	64:46	0:0	7	ost
op	64:49	0:0	7	->
water	64:51	0:0	7	st
arg	64:55	64:80	6	AV_PKT_DATA_DISPLAYMATRIX
water	64:55	0:0	7	AV_PKT_DATA_DISPLAYMATRIX
arg	65:46	65:65	6	sizeof(int32_t)*9
op	65:46	0:0	7	sizeof
water	65:52	0:0	7	(
water	65:53	0:0	7	int32_t
water	65:60	0:0	7	)
op	65:62	0:0	7	*
water	65:64	0:0	7	9
if	66:8	67:79	4	(sd)
cond	66:12	66:12	5	sd
water	66:12	0:0	6	sd
stmts	67:12	67:79	5	
call	67:12	67:78	6	av_display_rotation_set
arg	67:36	67:49	7	(int32_t*)sd
water	67:36	0:0	8	(
water	67:37	0:0	8	int32_t
op	67:45	0:0	8	*
water	67:46	0:0	8	)
water	67:47	0:0	8	sd
arg	67:51	67:78	7	-ost->rotate_override_value
op	67:51	0:0	8	-
water	67:52	0:0	8	ost
op	67:55	0:0	8	->
water	67:57	0:0	8	rotate_override_value
water	67:79	0:0	6	;
water	68:4	0:0	4	}
water	69:4	0:0	2	ost
op	69:7	0:0	2	->
water	69:9	0:0	2	parser
op	69:16	0:0	2	=
call	69:18	69:50	2	av_parser_init
arg	69:33	69:50	3	par_dst->codec_id
water	69:33	0:0	4	par_dst
op	69:40	0:0	4	->
water	69:42	0:0	4	codec_id
water	69:51	0:0	2	;
water	70:4	0:0	2	ost
op	70:7	0:0	2	->
water	70:9	0:0	2	parser_avctx
op	70:22	0:0	2	=
call	70:24	70:51	2	avcodec_alloc_context3
arg	70:47	70:51	3	NULL
water	70:47	0:0	4	NULL
water	70:52	0:0	2	;
if	71:4	72:30	2	(! ost -> parser_avctx)
cond	71:8	71:14	3	! ost -> parser_avctx
op	71:8	0:0	4	!
water	71:9	0:0	4	ost
op	71:12	0:0	4	->
water	71:14	0:0	4	parser_avctx
stmts	72:8	72:30	3	
return	72:8	72:30	4	AVERROR(ENOMEM)
call	72:15	72:29	5	AVERROR
arg	72:23	72:29	6	ENOMEM
water	72:23	0:0	7	ENOMEM
switch	73:4	100:4	2	(par_dst -> codec_type)
cond	73:12	73:21	3	par_dst -> codec_type
water	73:12	0:0	4	par_dst
op	73:19	0:0	4	->
water	73:21	0:0	4	codec_type
stmts	73:33	100:4	3	
water	73:33	0:0	4	{
label	74:4	74:27	4	case AVMEDIA_TYPE_AUDIO :
if	75:8	78:8	4	(audio_volume != 256)
cond	75:12	75:28	5	audio_volume != 256
water	75:12	0:0	6	audio_volume
op	75:25	0:0	6	!=
water	75:28	0:0	6	256
stmts	75:33	78:8	5	
water	75:33	0:0	6	{
call	76:12	76:106	6	av_log
arg	76:19	76:23	7	NULL
water	76:19	0:0	8	NULL
arg	76:25	76:37	7	AV_LOG_FATAL
water	76:25	0:0	8	AV_LOG_FATAL
arg	76:39	76:106	7	"-acodec copy and -vol are incompatible (frames are not decoded)\n"
water	76:39	0:0	8	"-acodec copy and -vol are incompatible (frames are not decoded)\n"
water	76:107	0:0	6	;
call	77:12	77:26	6	exit_program
arg	77:25	77:26	7	1
water	77:25	0:0	8	1
water	77:27	0:0	6	;
water	78:8	0:0	6	}
if	79:8	80:35	4	(( par_dst -> block_align == 1 || par_dst -> block_align == 1152 || par_dst -> block_align == 576 ) && par_dst -> codec_id == AV_CODEC_ID_MP3)
cond	79:11	79:126	5	( par_dst -> block_align == 1 || par_dst -> block_align == 1152 || par_dst -> block_align == 576 ) && par_dst -> codec_id == AV_CODEC_ID_MP3
water	79:11	0:0	6	(
water	79:12	0:0	6	par_dst
op	79:19	0:0	6	->
water	79:21	0:0	6	block_align
op	79:33	0:0	6	==
water	79:36	0:0	6	1
op	79:38	0:0	6	||
water	79:41	0:0	6	par_dst
op	79:48	0:0	6	->
water	79:50	0:0	6	block_align
op	79:62	0:0	6	==
water	79:65	0:0	6	1152
op	79:70	0:0	6	||
water	79:73	0:0	6	par_dst
op	79:80	0:0	6	->
water	79:82	0:0	6	block_align
op	79:94	0:0	6	==
water	79:97	0:0	6	576
water	79:100	0:0	6	)
op	79:102	0:0	6	&&
water	79:105	0:0	6	par_dst
op	79:112	0:0	6	->
water	79:114	0:0	6	codec_id
op	79:123	0:0	6	==
water	79:126	0:0	6	AV_CODEC_ID_MP3
stmts	80:12	80:35	5	
water	80:12	0:0	6	par_dst
op	80:19	0:0	6	->
water	80:21	0:0	6	block_align
op	80:32	0:0	6	=
water	80:34	0:0	6	0
water	80:35	0:0	6	;
if	81:8	82:35	4	(par_dst -> codec_id == AV_CODEC_ID_AC3)
cond	81:11	81:32	5	par_dst -> codec_id == AV_CODEC_ID_AC3
water	81:11	0:0	6	par_dst
op	81:18	0:0	6	->
water	81:20	0:0	6	codec_id
op	81:29	0:0	6	==
water	81:32	0:0	6	AV_CODEC_ID_AC3
stmts	82:12	82:35	5	
water	82:12	0:0	6	par_dst
op	82:19	0:0	6	->
water	82:21	0:0	6	block_align
op	82:32	0:0	6	=
water	82:34	0:0	6	0
water	82:35	0:0	6	;
break	83:8	83:13	4	
label	84:4	84:27	4	case AVMEDIA_TYPE_VIDEO :
if	85:8	91:12	4	(ost -> frame_aspect_ratio . num)
cond	85:12	85:36	5	ost -> frame_aspect_ratio . num
water	85:12	0:0	6	ost
op	85:15	0:0	6	->
water	85:17	0:0	6	frame_aspect_ratio
op	85:35	0:0	6	.
water	85:36	0:0	6	num
stmts	85:41	91:12	5	
water	85:41	0:0	6	{
water	86:12	0:0	6	sar
op	86:16	0:0	6	=
call	87:16	88:72	6	av_mul_q
arg	87:25	87:48	7	ost->frame_aspect_ratio
water	87:25	0:0	8	ost
op	87:28	0:0	8	->
water	87:30	0:0	8	frame_aspect_ratio
arg	88:25	88:72	7	(AVRational){par_dst->height,par_dst->width}
water	88:25	0:0	8	(
water	88:26	0:0	8	AVRational
water	88:36	0:0	8	)
water	88:37	0:0	8	{
water	88:39	0:0	8	par_dst
op	88:46	0:0	8	->
water	88:48	0:0	8	height
water	88:54	0:0	8	,
water	88:56	0:0	8	par_dst
op	88:63	0:0	8	->
water	88:65	0:0	8	width
water	88:71	0:0	8	}
water	88:73	0:0	6	;
call	89:12	90:65	6	av_log
arg	89:19	89:23	7	NULL
water	89:19	0:0	8	NULL
arg	89:25	89:39	7	AV_LOG_WARNING
water	89:25	0:0	8	AV_LOG_WARNING
arg	89:41	90:65	7	"Overriding aspect ratio ""with stream copy may produce invalid files\n"
water	89:41	0:0	8	"Overriding aspect ratio "
water	90:19	0:0	8	"with stream copy may produce invalid files\n"
water	90:66	0:0	6	;
water	91:12	0:0	6	}
else	92:8	93:46	4
stmts	92:13	93:46	5	
if	92:13	93:46	6	(ist -> st -> sample_aspect_ratio . num)
cond	92:17	92:46	7	ist -> st -> sample_aspect_ratio . num
water	92:17	0:0	8	ist
op	92:20	0:0	8	->
water	92:22	0:0	8	st
op	92:24	0:0	8	->
water	92:26	0:0	8	sample_aspect_ratio
op	92:45	0:0	8	.
water	92:46	0:0	8	num
stmts	93:12	93:46	7	
water	93:12	0:0	8	sar
op	93:16	0:0	8	=
water	93:18	0:0	8	ist
op	93:21	0:0	8	->
water	93:23	0:0	8	st
op	93:25	0:0	8	->
water	93:27	0:0	8	sample_aspect_ratio
water	93:46	0:0	8	;
else	94:8	95:46	4
stmts	95:12	95:46	5	
water	95:12	0:0	6	sar
op	95:16	0:0	6	=
water	95:18	0:0	6	par_src
op	95:25	0:0	6	->
water	95:27	0:0	6	sample_aspect_ratio
water	95:46	0:0	6	;
water	96:8	0:0	4	ost
op	96:11	0:0	4	->
water	96:13	0:0	4	st
op	96:15	0:0	4	->
water	96:17	0:0	4	sample_aspect_ratio
op	96:37	0:0	4	=
water	96:39	0:0	4	par_dst
op	96:46	0:0	4	->
water	96:48	0:0	4	sample_aspect_ratio
op	96:68	0:0	4	=
water	96:70	0:0	4	sar
water	96:73	0:0	4	;
water	97:8	0:0	4	ost
op	97:11	0:0	4	->
water	97:13	0:0	4	st
op	97:15	0:0	4	->
water	97:17	0:0	4	avg_frame_rate
op	97:32	0:0	4	=
water	97:34	0:0	4	ist
op	97:37	0:0	4	->
water	97:39	0:0	4	st
op	97:41	0:0	4	->
water	97:43	0:0	4	avg_frame_rate
water	97:57	0:0	4	;
water	98:8	0:0	4	ost
op	98:11	0:0	4	->
water	98:13	0:0	4	st
op	98:15	0:0	4	->
water	98:17	0:0	4	r_frame_rate
op	98:30	0:0	4	=
water	98:32	0:0	4	ist
op	98:35	0:0	4	->
water	98:37	0:0	4	st
op	98:39	0:0	4	->
water	98:41	0:0	4	r_frame_rate
water	98:53	0:0	4	;
break	99:8	99:13	4	
water	100:4	0:0	4	}
water	101:4	0:0	2	ost
op	101:7	0:0	2	->
water	101:9	0:0	2	mux_timebase
op	101:22	0:0	2	=
water	101:24	0:0	2	ist
op	101:27	0:0	2	->
water	101:29	0:0	2	st
op	101:31	0:0	2	->
water	101:33	0:0	2	time_base
water	101:42	0:0	2	;
return	102:4	102:12	2	0
water	102:11	0:0	3	0
