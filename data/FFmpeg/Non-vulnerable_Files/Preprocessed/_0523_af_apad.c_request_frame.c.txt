func	1:0	36:0	0	static int	request_frame
params	1:24	0:0	1	
param	1:25	1:46	2	AVFilterLink *	outlink
stmnts	0:0	35:14	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	outlink
op	3:34	0:0	2	->
water	3:36	0:0	2	src
decl	4:4	4:30	2	APadContext	*s
op	4:19	0:0	2	=
water	4:21	0:0	2	ctx
op	4:24	0:0	2	->
water	4:26	0:0	2	priv
decl	5:4	5:11	2	int	ret
water	6:4	0:0	2	ret
op	6:8	0:0	2	=
call	6:10	6:41	2	ff_request_frame
arg	6:27	6:41	3	ctx->inputs[0]
water	6:27	0:0	4	ctx
op	6:30	0:0	4	->
water	6:32	0:0	4	inputs
op	6:38	0:0	4	[
water	6:39	0:0	4	0
op	6:40	0:0	4	]
water	6:42	0:0	2	;
if	7:4	34:4	2	(ret == AVERROR_EOF && ! ctx -> is_disabled)
cond	7:8	7:36	3	ret == AVERROR_EOF && ! ctx -> is_disabled
water	7:8	0:0	4	ret
op	7:12	0:0	4	==
water	7:15	0:0	4	AVERROR_EOF
op	7:27	0:0	4	&&
op	7:30	0:0	4	!
water	7:31	0:0	4	ctx
op	7:34	0:0	4	->
water	7:36	0:0	4	is_disabled
stmts	7:49	34:4	3	
water	7:49	0:0	4	{
decl	8:8	8:34	4	int	n_out
op	8:18	0:0	4	=
water	8:20	0:0	4	s
op	8:21	0:0	4	->
water	8:23	0:0	4	packet_size
decl	9:8	9:30	4	AVFrame	*outsamplesref
if	10:8	12:8	4	(s -> whole_len >= 0 && s -> pad_len < 0)
cond	10:12	10:46	5	s -> whole_len >= 0 && s -> pad_len < 0
water	10:12	0:0	6	s
op	10:13	0:0	6	->
water	10:15	0:0	6	whole_len
op	10:25	0:0	6	>=
water	10:28	0:0	6	0
op	10:30	0:0	6	&&
water	10:33	0:0	6	s
op	10:34	0:0	6	->
water	10:36	0:0	6	pad_len
op	10:44	0:0	6	<
water	10:46	0:0	6	0
stmts	10:49	12:8	5	
water	10:49	0:0	6	{
water	11:12	0:0	6	s
op	11:13	0:0	6	->
water	11:15	0:0	6	pad_len
op	11:23	0:0	6	=
water	11:25	0:0	6	s
op	11:26	0:0	6	->
water	11:28	0:0	6	pad_len_left
op	11:41	0:0	6	=
water	11:43	0:0	6	s
op	11:44	0:0	6	->
water	11:46	0:0	6	whole_len_left
water	11:60	0:0	6	;
water	12:8	0:0	6	}
if	13:8	18:8	4	(s -> pad_len >= 0 || s -> whole_len >= 0)
cond	13:12	13:46	5	s -> pad_len >= 0 || s -> whole_len >= 0
water	13:12	0:0	6	s
op	13:13	0:0	6	->
water	13:15	0:0	6	pad_len
op	13:23	0:0	6	>=
water	13:25	0:0	6	0
op	13:27	0:0	6	||
water	13:30	0:0	6	s
op	13:31	0:0	6	->
water	13:33	0:0	6	whole_len
op	13:43	0:0	6	>=
water	13:46	0:0	6	0
stmts	13:49	18:8	5	
water	13:49	0:0	6	{
water	14:12	0:0	6	n_out
op	14:18	0:0	6	=
call	14:20	14:48	6	FFMIN
arg	14:26	14:31	7	n_out
water	14:26	0:0	8	n_out
arg	14:33	14:48	7	s->pad_len_left
water	14:33	0:0	8	s
op	14:34	0:0	8	->
water	14:36	0:0	8	pad_len_left
water	14:49	0:0	6	;
water	15:12	0:0	6	s
op	15:13	0:0	6	->
water	15:15	0:0	6	pad_len_left
op	15:28	0:0	6	-=
water	15:31	0:0	6	n_out
water	15:36	0:0	6	;
call	16:12	17:86	6	av_log
arg	16:19	16:22	7	ctx
water	16:19	0:0	8	ctx
arg	16:24	16:36	7	AV_LOG_DEBUG
water	16:24	0:0	8	AV_LOG_DEBUG
arg	17:19	17:62	7	"padding n_out:%d pad_len_left:%"PRId64"\n"
water	17:19	0:0	8	"padding n_out:%d pad_len_left:%"
water	17:52	0:0	8	PRId64
water	17:58	0:0	8	"\n"
arg	17:64	17:69	7	n_out
water	17:64	0:0	8	n_out
arg	17:71	17:86	7	s->pad_len_left
water	17:71	0:0	8	s
op	17:72	0:0	8	->
water	17:74	0:0	8	pad_len_left
water	17:87	0:0	6	;
water	18:8	0:0	6	}
if	19:8	20:30	4	(! n_out)
cond	19:12	19:13	5	! n_out
op	19:12	0:0	6	!
water	19:13	0:0	6	n_out
stmts	20:12	20:30	5	
return	20:12	20:30	6	AVERROR_EOF
water	20:19	0:0	7	AVERROR_EOF
water	21:8	0:0	4	outsamplesref
op	21:22	0:0	4	=
call	21:24	21:58	4	ff_get_audio_buffer
arg	21:44	21:51	5	outlink
water	21:44	0:0	6	outlink
arg	21:53	21:58	5	n_out
water	21:53	0:0	6	n_out
water	21:59	0:0	4	;
if	22:8	23:34	4	(! outsamplesref)
cond	22:12	22:13	5	! outsamplesref
op	22:12	0:0	6	!
water	22:13	0:0	6	outsamplesref
stmts	23:12	23:34	5	
return	23:12	23:34	6	AVERROR(ENOMEM)
call	23:19	23:33	7	AVERROR
arg	23:27	23:33	8	ENOMEM
water	23:27	0:0	9	ENOMEM
call	24:8	24:69	4	av_assert0
arg	24:19	24:69	5	outsamplesref->sample_rate==outlink->sample_rate
water	24:19	0:0	6	outsamplesref
op	24:32	0:0	6	->
water	24:34	0:0	6	sample_rate
op	24:46	0:0	6	==
water	24:49	0:0	6	outlink
op	24:56	0:0	6	->
water	24:58	0:0	6	sample_rate
water	24:70	0:0	4	;
call	25:8	25:54	4	av_assert0
arg	25:19	25:54	5	outsamplesref->nb_samples==n_out
water	25:19	0:0	6	outsamplesref
op	25:32	0:0	6	->
water	25:34	0:0	6	nb_samples
op	25:46	0:0	6	==
water	25:49	0:0	6	n_out
water	25:55	0:0	4	;
call	26:8	29:52	4	av_samples_set_silence
arg	26:31	26:59	5	outsamplesref->extended_data
water	26:31	0:0	6	outsamplesref
op	26:44	0:0	6	->
water	26:46	0:0	6	extended_data
arg	26:61	26:62	5	0
water	26:61	0:0	6	0
arg	27:31	27:36	5	n_out
water	27:31	0:0	6	n_out
arg	28:31	28:67	5	av_frame_get_channels(outsamplesref)
call	28:31	28:66	6	av_frame_get_channels
arg	28:53	28:66	7	outsamplesref
water	28:53	0:0	8	outsamplesref
arg	29:31	29:52	5	outsamplesref->format
water	29:31	0:0	6	outsamplesref
op	29:44	0:0	6	->
water	29:46	0:0	6	format
water	29:53	0:0	4	;
water	30:8	0:0	4	outsamplesref
op	30:21	0:0	4	->
water	30:23	0:0	4	pts
op	30:27	0:0	4	=
water	30:29	0:0	4	s
op	30:30	0:0	4	->
water	30:32	0:0	4	next_pts
water	30:40	0:0	4	;
if	31:8	32:105	4	(s -> next_pts != AV_NOPTS_VALUE)
cond	31:12	31:27	5	s -> next_pts != AV_NOPTS_VALUE
water	31:12	0:0	6	s
op	31:13	0:0	6	->
water	31:15	0:0	6	next_pts
op	31:24	0:0	6	!=
water	31:27	0:0	6	AV_NOPTS_VALUE
stmts	32:12	32:105	5	
water	32:12	0:0	6	s
op	32:13	0:0	6	->
water	32:15	0:0	6	next_pts
op	32:24	0:0	6	+=
call	32:27	32:104	6	av_rescale_q
arg	32:40	32:45	7	n_out
water	32:40	0:0	8	n_out
arg	32:47	32:84	7	(AVRational){1,outlink->sample_rate}
water	32:47	0:0	8	(
water	32:48	0:0	8	AVRational
water	32:58	0:0	8	)
water	32:59	0:0	8	{
water	32:60	0:0	8	1
water	32:61	0:0	8	,
water	32:63	0:0	8	outlink
op	32:70	0:0	8	->
water	32:72	0:0	8	sample_rate
water	32:83	0:0	8	}
arg	32:86	32:104	7	outlink->time_base
water	32:86	0:0	8	outlink
op	32:93	0:0	8	->
water	32:95	0:0	8	time_base
water	32:105	0:0	6	;
return	33:8	33:54	4	ff_filter_frame(outlink,outsamplesref)
call	33:15	33:53	5	ff_filter_frame
arg	33:31	33:38	6	outlink
water	33:31	0:0	7	outlink
arg	33:40	33:53	6	outsamplesref
water	33:40	0:0	7	outsamplesref
water	34:4	0:0	4	}
return	35:4	35:14	2	ret
water	35:11	0:0	3	ret
