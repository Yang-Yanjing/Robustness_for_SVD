func	1:0	68:0	0	static inline int	mpeg2_fast_decode_block_intra
params	1:47	0:0	1	
param	1:48	1:65	2	MpegEncContext *	s
param	2:48	2:62	2	int16_t *	block
param	2:64	2:69	2	int	n
stmnts	0:0	67:12	1	
decl	4:4	4:34	2	int	level
water	4:13	0:0	2	,
decl	4:4	4:34	2	int	dc
water	4:17	0:0	2	,
decl	4:4	4:34	2	int	diff
water	4:23	0:0	2	,
decl	4:4	4:34	2	int	i
water	4:26	0:0	2	,
decl	4:4	4:34	2	int	j
water	4:29	0:0	2	,
decl	4:4	4:34	2	int	run
decl	5:4	5:17	2	int	component
decl	6:4	6:15	2	RLTable	*rl
water	7:4	0:0	2	uint8_t
op	7:12	0:0	2	*
water	7:13	0:0	2	const
water	7:19	0:0	2	scantable
op	7:29	0:0	2	=
water	7:31	0:0	2	s
op	7:32	0:0	2	->
water	7:34	0:0	2	intra_scantable
op	7:49	0:0	2	.
water	7:50	0:0	2	permutated
water	7:60	0:0	2	;
decl	8:4	8:32	2	const uint16_t	*quant_matrix
decl	9:4	9:32	2	const int	qscale
op	9:21	0:0	2	=
water	9:23	0:0	2	s
op	9:24	0:0	2	->
water	9:26	0:0	2	qscale
if	11:4	14:4	2	(n < 4)
cond	11:8	11:12	3	n < 4
water	11:8	0:0	4	n
op	11:10	0:0	4	<
water	11:12	0:0	4	4
stmts	11:15	14:4	3	
water	11:15	0:0	4	{
water	12:8	0:0	4	quant_matrix
op	12:21	0:0	4	=
water	12:23	0:0	4	s
op	12:24	0:0	4	->
water	12:26	0:0	4	intra_matrix
water	12:38	0:0	4	;
water	13:8	0:0	4	component
op	13:21	0:0	4	=
water	13:23	0:0	4	0
water	13:24	0:0	4	;
water	14:4	0:0	4	}
else	14:6	17:4	2
stmts	14:11	17:4	3	
water	14:11	0:0	4	{
water	15:8	0:0	4	quant_matrix
op	15:21	0:0	4	=
water	15:23	0:0	4	s
op	15:24	0:0	4	->
water	15:26	0:0	4	chroma_intra_matrix
water	15:45	0:0	4	;
water	16:8	0:0	4	component
op	16:21	0:0	4	=
water	16:23	0:0	4	(
water	16:24	0:0	4	n
op	16:26	0:0	4	&
water	16:28	0:0	4	1
water	16:29	0:0	4	)
op	16:31	0:0	4	+
water	16:33	0:0	4	1
water	16:34	0:0	4	;
water	17:4	0:0	4	}
water	18:4	0:0	2	diff
op	18:9	0:0	2	=
call	18:11	18:38	2	decode_dc
arg	18:21	18:27	3	&s->gb
op	18:21	0:0	4	&
water	18:22	0:0	4	s
op	18:23	0:0	4	->
water	18:25	0:0	4	gb
arg	18:29	18:38	3	component
water	18:29	0:0	4	component
water	18:39	0:0	2	;
if	19:4	20:34	2	(diff >= 0 xffff)
cond	19:8	19:17	3	diff >= 0 xffff
water	19:8	0:0	4	diff
op	19:13	0:0	4	>=
water	19:16	0:0	4	0
water	19:17	0:0	4	xffff
stmts	20:8	20:34	3	
return	20:8	20:34	4	AVERROR_INVALIDDATA
water	20:15	0:0	5	AVERROR_INVALIDDATA
water	21:4	0:0	2	dc
op	21:7	0:0	2	=
water	21:9	0:0	2	s
op	21:10	0:0	2	->
water	21:12	0:0	2	last_dc
op	21:19	0:0	2	[
water	21:20	0:0	2	component
op	21:29	0:0	2	]
water	21:30	0:0	2	;
water	22:4	0:0	2	dc
op	22:7	0:0	2	+=
water	22:10	0:0	2	diff
water	22:14	0:0	2	;
water	23:4	0:0	2	s
op	23:5	0:0	2	->
water	23:7	0:0	2	last_dc
op	23:14	0:0	2	[
water	23:15	0:0	2	component
op	23:24	0:0	2	]
op	23:26	0:0	2	=
water	23:28	0:0	2	dc
water	23:30	0:0	2	;
water	24:4	0:0	2	block
op	24:9	0:0	2	[
water	24:10	0:0	2	0
op	24:11	0:0	2	]
op	24:13	0:0	2	=
water	24:15	0:0	2	dc
op	24:18	0:0	2	<<
water	24:21	0:0	2	(
water	24:22	0:0	2	3
op	24:24	0:0	2	-
water	24:26	0:0	2	s
op	24:27	0:0	2	->
water	24:29	0:0	2	intra_dc_precision
water	24:47	0:0	2	)
water	24:48	0:0	2	;
water	25:4	0:0	2	i
op	25:6	0:0	2	=
water	25:8	0:0	2	0
water	25:9	0:0	2	;
if	26:4	27:25	2	(s -> intra_vlc_format)
cond	26:8	26:11	3	s -> intra_vlc_format
water	26:8	0:0	4	s
op	26:9	0:0	4	->
water	26:11	0:0	4	intra_vlc_format
stmts	27:8	27:25	3	
water	27:8	0:0	4	rl
op	27:11	0:0	4	=
op	27:13	0:0	4	&
water	27:14	0:0	4	ff_rl_mpeg2
water	27:25	0:0	4	;
else	28:4	29:25	2
stmts	29:8	29:25	3	
water	29:8	0:0	4	rl
op	29:11	0:0	4	=
op	29:13	0:0	4	&
water	29:14	0:0	4	ff_rl_mpeg1
water	29:25	0:0	4	;
water	30:4	0:0	2	{
call	31:8	31:30	2	OPEN_READER
arg	31:20	31:22	3	re
water	31:20	0:0	4	re
arg	31:24	31:30	3	&s->gb
op	31:24	0:0	4	&
water	31:25	0:0	4	s
op	31:26	0:0	4	->
water	31:28	0:0	4	gb
water	31:31	0:0	2	;
for	33:8	63:8	2	(;;)
forinit	33:13	33:13	3	;
water	33:13	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	33:17	63:8	3	
water	33:17	0:0	4	{
call	34:12	34:35	4	UPDATE_CACHE
arg	34:25	34:27	5	re
water	34:25	0:0	6	re
arg	34:29	34:35	5	&s->gb
op	34:29	0:0	6	&
water	34:30	0:0	6	s
op	34:31	0:0	6	->
water	34:33	0:0	6	gb
water	34:36	0:0	4	;
call	35:12	36:41	4	GET_RL_VLC
arg	35:23	35:28	5	level
water	35:23	0:0	6	level
arg	35:30	35:33	5	run
water	35:30	0:0	6	run
arg	35:35	35:37	5	re
water	35:35	0:0	6	re
arg	35:39	35:45	5	&s->gb
op	35:39	0:0	6	&
water	35:40	0:0	6	s
op	35:41	0:0	6	->
water	35:43	0:0	6	gb
arg	35:47	35:60	5	rl->rl_vlc[0]
water	35:47	0:0	6	rl
op	35:49	0:0	6	->
water	35:51	0:0	6	rl_vlc
op	35:57	0:0	6	[
water	35:58	0:0	6	0
op	35:59	0:0	6	]
arg	36:23	36:35	5	TEX_VLC_BITS
water	36:23	0:0	6	TEX_VLC_BITS
arg	36:37	36:38	5	2
water	36:37	0:0	6	2
arg	36:40	36:41	5	0
water	36:40	0:0	6	0
water	36:42	0:0	4	;
if	37:12	39:12	4	(level >= 64 || i > 63)
cond	37:16	37:35	5	level >= 64 || i > 63
water	37:16	0:0	6	level
op	37:22	0:0	6	>=
water	37:25	0:0	6	64
op	37:28	0:0	6	||
water	37:31	0:0	6	i
op	37:33	0:0	6	>
water	37:35	0:0	6	63
stmts	37:39	39:12	5	
water	37:39	0:0	6	{
break	38:16	38:21	6	
water	39:12	0:0	6	}
else	39:14	46:12	4
stmts	39:19	46:12	5	
if	39:19	46:12	6	(level != 0)
cond	39:23	39:32	7	level != 0
water	39:23	0:0	8	level
op	39:29	0:0	8	!=
water	39:32	0:0	8	0
stmts	39:35	46:12	7	
water	39:35	0:0	8	{
water	40:16	0:0	8	i
op	40:18	0:0	8	+=
water	40:21	0:0	8	run
water	40:24	0:0	8	;
water	41:16	0:0	8	j
op	41:18	0:0	8	=
water	41:20	0:0	8	scantable
op	41:29	0:0	8	[
water	41:30	0:0	8	i
op	41:31	0:0	8	]
water	41:32	0:0	8	;
water	42:16	0:0	8	level
op	42:22	0:0	8	=
water	42:24	0:0	8	(
water	42:25	0:0	8	level
op	42:31	0:0	8	*
water	42:33	0:0	8	qscale
op	42:40	0:0	8	*
water	42:42	0:0	8	quant_matrix
op	42:54	0:0	8	[
water	42:55	0:0	8	j
op	42:56	0:0	8	]
water	42:57	0:0	8	)
op	42:59	0:0	8	>>
water	42:62	0:0	8	4
water	42:63	0:0	8	;
water	43:16	0:0	8	level
op	43:22	0:0	8	=
water	43:24	0:0	8	(
water	43:25	0:0	8	level
op	43:31	0:0	8	^
call	43:33	43:57	8	SHOW_SBITS
arg	43:44	43:46	9	re
water	43:44	0:0	10	re
arg	43:48	43:54	9	&s->gb
op	43:48	0:0	10	&
water	43:49	0:0	10	s
op	43:50	0:0	10	->
water	43:52	0:0	10	gb
arg	43:56	43:57	9	1
water	43:56	0:0	10	1
water	43:58	0:0	8	)
op	43:60	0:0	8	-
call	44:24	44:48	8	SHOW_SBITS
arg	44:35	44:37	9	re
water	44:35	0:0	10	re
arg	44:39	44:45	9	&s->gb
op	44:39	0:0	10	&
water	44:40	0:0	10	s
op	44:41	0:0	10	->
water	44:43	0:0	10	gb
arg	44:47	44:48	9	1
water	44:47	0:0	10	1
water	44:49	0:0	8	;
call	45:16	45:44	8	LAST_SKIP_BITS
arg	45:31	45:33	9	re
water	45:31	0:0	10	re
arg	45:35	45:41	9	&s->gb
op	45:35	0:0	10	&
water	45:36	0:0	10	s
op	45:37	0:0	10	->
water	45:39	0:0	10	gb
arg	45:43	45:44	9	1
water	45:43	0:0	10	1
water	45:45	0:0	8	;
water	46:12	0:0	8	}
else	46:14	61:12	4
stmts	46:19	61:12	5	
water	46:19	0:0	6	{
water	48:16	0:0	6	run
op	48:20	0:0	6	=
call	48:22	48:46	6	SHOW_UBITS
arg	48:33	48:35	7	re
water	48:33	0:0	8	re
arg	48:37	48:43	7	&s->gb
op	48:37	0:0	8	&
water	48:38	0:0	8	s
op	48:39	0:0	8	->
water	48:41	0:0	8	gb
arg	48:45	48:46	7	6
water	48:45	0:0	8	6
op	48:48	0:0	6	+
water	48:50	0:0	6	1
water	48:51	0:0	6	;
call	49:16	49:44	6	LAST_SKIP_BITS
arg	49:31	49:33	7	re
water	49:31	0:0	8	re
arg	49:35	49:41	7	&s->gb
op	49:35	0:0	8	&
water	49:36	0:0	8	s
op	49:37	0:0	8	->
water	49:39	0:0	8	gb
arg	49:43	49:44	7	6
water	49:43	0:0	8	6
water	49:45	0:0	6	;
call	50:16	50:39	6	UPDATE_CACHE
arg	50:29	50:31	7	re
water	50:29	0:0	8	re
arg	50:33	50:39	7	&s->gb
op	50:33	0:0	8	&
water	50:34	0:0	8	s
op	50:35	0:0	8	->
water	50:37	0:0	8	gb
water	50:40	0:0	6	;
water	51:16	0:0	6	level
op	51:22	0:0	6	=
call	51:24	51:49	6	SHOW_SBITS
arg	51:35	51:37	7	re
water	51:35	0:0	8	re
arg	51:39	51:45	7	&s->gb
op	51:39	0:0	8	&
water	51:40	0:0	8	s
op	51:41	0:0	8	->
water	51:43	0:0	8	gb
arg	51:47	51:49	7	12
water	51:47	0:0	8	12
water	51:50	0:0	6	;
call	52:16	52:40	6	SKIP_BITS
arg	52:26	52:28	7	re
water	52:26	0:0	8	re
arg	52:30	52:36	7	&s->gb
op	52:30	0:0	8	&
water	52:31	0:0	8	s
op	52:32	0:0	8	->
water	52:34	0:0	8	gb
arg	52:38	52:40	7	12
water	52:38	0:0	8	12
water	52:41	0:0	6	;
water	53:16	0:0	6	i
op	53:18	0:0	6	+=
water	53:21	0:0	6	run
water	53:24	0:0	6	;
water	54:16	0:0	6	j
op	54:18	0:0	6	=
water	54:20	0:0	6	scantable
op	54:29	0:0	6	[
water	54:30	0:0	6	i
op	54:31	0:0	6	]
water	54:32	0:0	6	;
if	55:16	58:16	6	(level < 0)
cond	55:20	55:28	7	level < 0
water	55:20	0:0	8	level
op	55:26	0:0	8	<
water	55:28	0:0	8	0
stmts	55:31	58:16	7	
water	55:31	0:0	8	{
water	56:20	0:0	8	level
op	56:26	0:0	8	=
water	56:28	0:0	8	(
op	56:29	0:0	8	-
water	56:30	0:0	8	level
op	56:36	0:0	8	*
water	56:38	0:0	8	qscale
op	56:45	0:0	8	*
water	56:47	0:0	8	quant_matrix
op	56:59	0:0	8	[
water	56:60	0:0	8	j
op	56:61	0:0	8	]
water	56:62	0:0	8	)
op	56:64	0:0	8	>>
water	56:67	0:0	8	4
water	56:68	0:0	8	;
water	57:20	0:0	8	level
op	57:26	0:0	8	=
op	57:28	0:0	8	-
water	57:29	0:0	8	level
water	57:34	0:0	8	;
water	58:16	0:0	8	}
else	58:18	60:16	6
stmts	58:23	60:16	7	
water	58:23	0:0	8	{
water	59:20	0:0	8	level
op	59:26	0:0	8	=
water	59:28	0:0	8	(
water	59:29	0:0	8	level
op	59:35	0:0	8	*
water	59:37	0:0	8	qscale
op	59:44	0:0	8	*
water	59:46	0:0	8	quant_matrix
op	59:58	0:0	8	[
water	59:59	0:0	8	j
op	59:60	0:0	8	]
water	59:61	0:0	8	)
op	59:63	0:0	8	>>
water	59:66	0:0	8	4
water	59:67	0:0	8	;
water	60:16	0:0	8	}
water	61:12	0:0	6	}
water	62:12	0:0	4	block
op	62:17	0:0	4	[
water	62:18	0:0	4	j
op	62:19	0:0	4	]
op	62:21	0:0	4	=
water	62:23	0:0	4	level
water	62:28	0:0	4	;
water	63:8	0:0	4	}
call	64:8	64:31	2	CLOSE_READER
arg	64:21	64:23	3	re
water	64:21	0:0	4	re
arg	64:25	64:31	3	&s->gb
op	64:25	0:0	4	&
water	64:26	0:0	4	s
op	64:27	0:0	4	->
water	64:29	0:0	4	gb
water	64:32	0:0	2	;
water	65:4	0:0	2	}
water	66:4	0:0	2	s
op	66:5	0:0	2	->
water	66:7	0:0	2	block_last_index
op	66:23	0:0	2	[
water	66:24	0:0	2	n
op	66:25	0:0	2	]
op	66:27	0:0	2	=
water	66:29	0:0	2	i
water	66:30	0:0	2	;
return	67:4	67:12	2	0
water	67:11	0:0	3	0
