func	1:0	33:0	0	static void	json_print_section_header
params	1:37	0:0	1	
param	1:38	1:57	2	WriterContext *	wctx
stmnts	0:0	32:4	1	
decl	3:4	3:34	2	JSONContext	*json
op	3:22	0:0	2	=
water	3:24	0:0	2	wctx
op	3:28	0:0	2	->
water	3:30	0:0	2	priv
decl	4:4	4:16	2	AVBPrint	buf
decl	5:4	5:62	2	const struct section	*section
op	5:34	0:0	2	=
water	5:36	0:0	2	wctx
op	5:40	0:0	2	->
water	5:42	0:0	2	section
op	5:49	0:0	2	[
water	5:50	0:0	2	wctx
op	5:54	0:0	2	->
water	5:56	0:0	2	level
op	5:61	0:0	2	]
decl	6:4	7:43	2	const struct section	*parent_section
op	6:41	0:0	2	=
water	6:43	0:0	2	wctx
op	6:47	0:0	2	->
water	6:49	0:0	2	level
water	6:55	0:0	2	?
water	7:8	0:0	2	wctx
op	7:12	0:0	2	->
water	7:14	0:0	2	section
op	7:21	0:0	2	[
water	7:22	0:0	2	wctx
op	7:26	0:0	2	->
water	7:28	0:0	2	level
op	7:33	0:0	2	-
water	7:34	0:0	2	1
op	7:35	0:0	2	]
water	7:37	0:0	2	:
water	7:39	0:0	2	NULL
if	8:4	9:21	2	(wctx -> level && wctx -> nb_item [ wctx -> level - 1 ])
cond	8:8	8:50	3	wctx -> level && wctx -> nb_item [ wctx -> level - 1 ]
water	8:8	0:0	4	wctx
op	8:12	0:0	4	->
water	8:14	0:0	4	level
op	8:20	0:0	4	&&
water	8:23	0:0	4	wctx
op	8:27	0:0	4	->
water	8:29	0:0	4	nb_item
op	8:36	0:0	4	[
water	8:37	0:0	4	wctx
op	8:41	0:0	4	->
water	8:43	0:0	4	level
op	8:48	0:0	4	-
water	8:49	0:0	4	1
op	8:50	0:0	4	]
stmts	9:8	9:21	3	
call	9:8	9:20	4	printf
arg	9:15	9:20	5	",\n"
water	9:15	0:0	6	",\n"
water	9:21	0:0	4	;
if	10:4	13:4	2	(section -> flags & SECTION_FLAG_IS_WRAPPER)
cond	10:8	10:25	3	section -> flags & SECTION_FLAG_IS_WRAPPER
water	10:8	0:0	4	section
op	10:15	0:0	4	->
water	10:17	0:0	4	flags
op	10:23	0:0	4	&
water	10:25	0:0	4	SECTION_FLAG_IS_WRAPPER
stmts	10:50	13:4	3	
water	10:50	0:0	4	{
call	11:8	11:20	4	printf
arg	11:15	11:20	5	"{\n"
water	11:15	0:0	6	"{\n"
water	11:21	0:0	4	;
water	12:8	0:0	4	json
op	12:12	0:0	4	->
water	12:14	0:0	4	indent_level
op	12:26	0:0	4	++
water	12:28	0:0	4	;
water	13:4	0:0	4	}
else	13:6	32:4	2
stmts	13:11	32:4	3	
water	13:11	0:0	4	{
call	14:8	14:56	4	av_bprint_init
arg	14:23	14:27	5	&buf
op	14:23	0:0	6	&
water	14:24	0:0	6	buf
arg	14:29	14:30	5	1
water	14:29	0:0	6	1
arg	14:32	14:56	5	AV_BPRINT_SIZE_UNLIMITED
water	14:32	0:0	6	AV_BPRINT_SIZE_UNLIMITED
water	14:57	0:0	4	;
call	15:8	15:49	4	json_escape_str
arg	15:24	15:28	5	&buf
op	15:24	0:0	6	&
water	15:25	0:0	6	buf
arg	15:30	15:43	5	section->name
water	15:30	0:0	6	section
op	15:37	0:0	6	->
water	15:39	0:0	6	name
arg	15:45	15:49	5	wctx
water	15:45	0:0	6	wctx
water	15:50	0:0	4	;
call	16:8	16:20	4	JSON_INDENT
water	16:21	0:0	4	;
water	17:8	0:0	4	json
op	17:12	0:0	4	->
water	17:14	0:0	4	indent_level
op	17:26	0:0	4	++
water	17:28	0:0	4	;
if	18:8	20:8	4	(section -> flags & SECTION_FLAG_IS_ARRAY)
cond	18:12	18:29	5	section -> flags & SECTION_FLAG_IS_ARRAY
water	18:12	0:0	6	section
op	18:19	0:0	6	->
water	18:21	0:0	6	flags
op	18:27	0:0	6	&
water	18:29	0:0	6	SECTION_FLAG_IS_ARRAY
stmts	18:52	20:8	5	
water	18:52	0:0	6	{
call	19:12	19:41	6	printf
arg	19:19	19:32	7	"\"%s\": [\n"
water	19:19	0:0	8	"\"%s\": [\n"
arg	19:34	19:41	7	buf.str
water	19:34	0:0	8	buf
op	19:37	0:0	8	.
water	19:38	0:0	8	str
water	19:42	0:0	6	;
water	20:8	0:0	6	}
else	20:10	22:8	4
stmts	20:15	22:8	5	
if	20:15	22:8	6	(parent_section && ! ( parent_section -> flags & SECTION_FLAG_IS_ARRAY ))
cond	20:19	20:84	7	parent_section && ! ( parent_section -> flags & SECTION_FLAG_IS_ARRAY )
water	20:19	0:0	8	parent_section
op	20:34	0:0	8	&&
op	20:37	0:0	8	!
water	20:38	0:0	8	(
water	20:39	0:0	8	parent_section
op	20:53	0:0	8	->
water	20:55	0:0	8	flags
op	20:61	0:0	8	&
water	20:63	0:0	8	SECTION_FLAG_IS_ARRAY
water	20:84	0:0	8	)
stmts	20:87	22:8	7	
water	20:87	0:0	8	{
call	21:12	21:63	8	printf
arg	21:19	21:32	9	"\"%s\": {%s"
water	21:19	0:0	10	"\"%s\": {%s"
arg	21:34	21:41	9	buf.str
water	21:34	0:0	10	buf
op	21:37	0:0	10	.
water	21:38	0:0	10	str
arg	21:43	21:63	9	json->item_start_end
water	21:43	0:0	10	json
op	21:47	0:0	10	->
water	21:49	0:0	10	item_start_end
water	21:64	0:0	8	;
water	22:8	0:0	8	}
else	22:10	30:8	4
stmts	22:15	30:8	5	
water	22:15	0:0	6	{
call	23:12	23:46	6	printf
arg	23:19	23:24	7	"{%s"
water	23:19	0:0	8	"{%s"
arg	23:26	23:46	7	json->item_start_end
water	23:26	0:0	8	json
op	23:30	0:0	8	->
water	23:32	0:0	8	item_start_end
water	23:47	0:0	6	;
if	25:12	29:12	6	(parent_section && parent_section -> id == SECTION_ID_PACKETS_AND_FRAMES)
cond	25:16	25:56	7	parent_section && parent_section -> id == SECTION_ID_PACKETS_AND_FRAMES
water	25:16	0:0	8	parent_section
op	25:31	0:0	8	&&
water	25:34	0:0	8	parent_section
op	25:48	0:0	8	->
water	25:50	0:0	8	id
op	25:53	0:0	8	==
water	25:56	0:0	8	SECTION_ID_PACKETS_AND_FRAMES
stmts	25:87	29:12	7	
water	25:87	0:0	8	{
if	26:16	27:33	8	(! json -> compact)
cond	26:20	26:27	9	! json -> compact
op	26:20	0:0	10	!
water	26:21	0:0	10	json
op	26:25	0:0	10	->
water	26:27	0:0	10	compact
stmts	27:20	27:33	9	
call	27:20	27:32	10	JSON_INDENT
water	27:33	0:0	10	;
call	28:16	28:74	8	printf
arg	28:23	28:43	9	"\"type\": \"%s\"%s"
water	28:23	0:0	10	"\"type\": \"%s\"%s"
arg	28:45	28:58	9	section->name
water	28:45	0:0	10	section
op	28:52	0:0	10	->
water	28:54	0:0	10	name
arg	28:60	28:74	9	json->item_sep
water	28:60	0:0	10	json
op	28:64	0:0	10	->
water	28:66	0:0	10	item_sep
water	28:75	0:0	8	;
water	29:12	0:0	8	}
water	30:8	0:0	6	}
call	31:8	31:37	4	av_bprint_finalize
arg	31:27	31:31	5	&buf
op	31:27	0:0	6	&
water	31:28	0:0	6	buf
arg	31:33	31:37	5	NULL
water	31:33	0:0	6	NULL
water	31:38	0:0	4	;
water	32:4	0:0	4	}
