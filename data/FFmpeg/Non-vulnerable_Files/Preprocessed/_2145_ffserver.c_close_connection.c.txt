func	1:0	74:0	0	static void	close_connection
params	1:28	0:0	1	
param	1:29	1:43	2	HTTPContext *	c
stmnts	0:0	73:20	1	
decl	3:4	3:25	2	HTTPContext	**cp
water	3:20	0:0	2	,
decl	3:4	3:25	2	HTTPContext	*c1
decl	4:4	4:21	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:21	2	int	nb_streams
decl	5:4	5:24	2	AVFormatContext	*ctx
decl	6:4	6:16	2	AVStream	*st
water	8:4	0:0	2	cp
op	8:7	0:0	2	=
op	8:9	0:0	2	&
water	8:10	0:0	2	first_http_ctx
water	8:24	0:0	2	;
while	9:4	15:4	2	(* cp)
cond	9:11	9:12	3	* cp
op	9:11	0:0	4	*
water	9:12	0:0	4	cp
stmts	9:16	15:4	3	
water	9:16	0:0	4	{
water	10:8	0:0	4	c1
op	10:11	0:0	4	=
op	10:13	0:0	4	*
water	10:14	0:0	4	cp
water	10:16	0:0	4	;
if	11:8	12:25	4	(c1 == c)
cond	11:12	11:18	5	c1 == c
water	11:12	0:0	6	c1
op	11:15	0:0	6	==
water	11:18	0:0	6	c
stmts	12:12	12:25	5	
op	12:12	0:0	6	*
water	12:13	0:0	6	cp
op	12:16	0:0	6	=
water	12:18	0:0	6	c
op	12:19	0:0	6	->
water	12:21	0:0	6	next
water	12:25	0:0	6	;
else	13:8	14:26	4
stmts	14:12	14:26	5	
water	14:12	0:0	6	cp
op	14:15	0:0	6	=
op	14:17	0:0	6	&
water	14:18	0:0	6	c1
op	14:20	0:0	6	->
water	14:22	0:0	6	next
water	14:26	0:0	6	;
water	15:4	0:0	4	}
for	17:4	20:4	2	(c1 = first_http_ctx ;c1;c1 = c1 -> next)
forinit	17:8	17:27	3	c1 = first_http_ctx ;
water	17:8	0:0	4	c1
op	17:11	0:0	4	=
water	17:13	0:0	4	first_http_ctx
water	17:27	0:0	4	;
cond	17:29	17:29	3	c1
water	17:29	0:0	4	c1
forexpr	17:33	17:42	3	c1 = c1 -> next
water	17:33	0:0	4	c1
op	17:36	0:0	4	=
water	17:38	0:0	4	c1
op	17:40	0:0	4	->
water	17:42	0:0	4	next
stmts	17:48	20:4	3	
water	17:48	0:0	4	{
if	18:8	19:29	4	(c1 -> rtsp_c == c)
cond	18:12	18:26	5	c1 -> rtsp_c == c
water	18:12	0:0	6	c1
op	18:14	0:0	6	->
water	18:16	0:0	6	rtsp_c
op	18:23	0:0	6	==
water	18:26	0:0	6	c
stmts	19:12	19:29	5	
water	19:12	0:0	6	c1
op	19:14	0:0	6	->
water	19:16	0:0	6	rtsp_c
op	19:23	0:0	6	=
water	19:25	0:0	6	NULL
water	19:29	0:0	6	;
water	20:4	0:0	4	}
if	22:4	23:26	2	(c -> fd >= 0)
cond	22:8	22:17	3	c -> fd >= 0
water	22:8	0:0	4	c
op	22:9	0:0	4	->
water	22:11	0:0	4	fd
op	22:14	0:0	4	>=
water	22:17	0:0	4	0
stmts	23:8	23:26	3	
call	23:8	23:25	4	closesocket
arg	23:20	23:25	5	c->fd
water	23:20	0:0	6	c
op	23:21	0:0	6	->
water	23:23	0:0	6	fd
water	23:26	0:0	4	;
if	24:4	32:4	2	(c -> fmt_in)
cond	24:8	24:11	3	c -> fmt_in
water	24:8	0:0	4	c
op	24:9	0:0	4	->
water	24:11	0:0	4	fmt_in
stmts	24:19	32:4	3	
water	24:19	0:0	4	{
for	26:8	30:8	4	(i = 0 ;i < c -> fmt_in -> nb_streams;i ++)
forinit	26:12	26:15	5	i = 0 ;
water	26:12	0:0	6	i
op	26:13	0:0	6	=
water	26:14	0:0	6	0
water	26:15	0:0	6	;
cond	26:16	26:29	5	i < c -> fmt_in -> nb_streams
water	26:16	0:0	6	i
op	26:17	0:0	6	<
water	26:18	0:0	6	c
op	26:19	0:0	6	->
water	26:21	0:0	6	fmt_in
op	26:27	0:0	6	->
water	26:29	0:0	6	nb_streams
forexpr	26:40	26:41	5	i ++
water	26:40	0:0	6	i
op	26:41	0:0	6	++
stmts	26:45	30:8	5	
water	26:45	0:0	6	{
water	27:12	0:0	6	st
op	27:15	0:0	6	=
water	27:17	0:0	6	c
op	27:18	0:0	6	->
water	27:20	0:0	6	fmt_in
op	27:26	0:0	6	->
water	27:28	0:0	6	streams
op	27:35	0:0	6	[
water	27:36	0:0	6	i
op	27:37	0:0	6	]
water	27:38	0:0	6	;
if	28:12	29:40	6	(st -> codec -> codec)
cond	28:16	28:27	7	st -> codec -> codec
water	28:16	0:0	8	st
op	28:18	0:0	8	->
water	28:20	0:0	8	codec
op	28:25	0:0	8	->
water	28:27	0:0	8	codec
stmts	29:16	29:40	7	
call	29:16	29:39	8	avcodec_close
arg	29:30	29:39	9	st->codec
water	29:30	0:0	10	st
op	29:32	0:0	10	->
water	29:34	0:0	10	codec
water	29:40	0:0	8	;
water	30:8	0:0	6	}
call	31:8	31:39	4	avformat_close_input
arg	31:29	31:39	5	&c->fmt_in
op	31:29	0:0	6	&
water	31:30	0:0	6	c
op	31:31	0:0	6	->
water	31:33	0:0	6	fmt_in
water	31:40	0:0	4	;
water	32:4	0:0	4	}
water	34:4	0:0	2	nb_streams
op	34:15	0:0	2	=
water	34:17	0:0	2	0
water	34:18	0:0	2	;
if	35:4	36:42	2	(c -> stream)
cond	35:8	35:11	3	c -> stream
water	35:8	0:0	4	c
op	35:9	0:0	4	->
water	35:11	0:0	4	stream
stmts	36:8	36:42	3	
water	36:8	0:0	4	nb_streams
op	36:19	0:0	4	=
water	36:21	0:0	4	c
op	36:22	0:0	4	->
water	36:24	0:0	4	stream
op	36:30	0:0	4	->
water	36:32	0:0	4	nb_streams
water	36:42	0:0	4	;
for	37:4	46:4	2	(i = 0 ;i < nb_streams;i ++)
forinit	37:8	37:11	3	i = 0 ;
water	37:8	0:0	4	i
op	37:9	0:0	4	=
water	37:10	0:0	4	0
water	37:11	0:0	4	;
cond	37:12	37:14	3	i < nb_streams
water	37:12	0:0	4	i
op	37:13	0:0	4	<
water	37:14	0:0	4	nb_streams
forexpr	37:25	37:26	3	i ++
water	37:25	0:0	4	i
op	37:26	0:0	4	++
stmts	37:30	46:4	3	
water	37:30	0:0	4	{
water	38:8	0:0	4	ctx
op	38:12	0:0	4	=
water	38:14	0:0	4	c
op	38:15	0:0	4	->
water	38:17	0:0	4	rtp_ctx
op	38:24	0:0	4	[
water	38:25	0:0	4	i
op	38:26	0:0	4	]
water	38:27	0:0	4	;
if	39:8	44:8	4	(ctx)
cond	39:12	39:12	5	ctx
water	39:12	0:0	6	ctx
stmts	39:17	44:8	5	
water	39:17	0:0	6	{
call	40:12	40:32	6	av_write_trailer
arg	40:29	40:32	7	ctx
water	40:29	0:0	8	ctx
water	40:33	0:0	6	;
call	41:12	41:39	6	av_dict_free
arg	41:25	41:39	7	&ctx->metadata
op	41:25	0:0	8	&
water	41:26	0:0	8	ctx
op	41:29	0:0	8	->
water	41:31	0:0	8	metadata
water	41:40	0:0	6	;
call	42:12	42:37	6	av_freep
arg	42:21	42:37	7	&ctx->streams[0]
op	42:21	0:0	8	&
water	42:22	0:0	8	ctx
op	42:25	0:0	8	->
water	42:27	0:0	8	streams
op	42:34	0:0	8	[
water	42:35	0:0	8	0
op	42:36	0:0	8	]
water	42:38	0:0	6	;
call	43:12	43:25	6	av_freep
arg	43:21	43:25	7	&ctx
op	43:21	0:0	8	&
water	43:22	0:0	8	ctx
water	43:26	0:0	6	;
water	44:8	0:0	6	}
call	45:8	45:37	4	ffurl_close
arg	45:20	45:37	5	c->rtp_handles[i]
water	45:20	0:0	6	c
op	45:21	0:0	6	->
water	45:23	0:0	6	rtp_handles
op	45:34	0:0	6	[
water	45:35	0:0	6	i
op	45:36	0:0	6	]
water	45:38	0:0	4	;
water	46:4	0:0	4	}
water	47:4	0:0	2	ctx
op	47:8	0:0	2	=
water	47:10	0:0	2	c
op	47:11	0:0	2	->
water	47:13	0:0	2	pfmt_ctx
water	47:21	0:0	2	;
if	48:4	61:8	2	(ctx)
cond	48:8	48:8	3	ctx
water	48:8	0:0	4	ctx
stmts	48:13	61:8	3	
water	48:13	0:0	4	{
if	49:8	56:8	4	(! c -> last_packet_sent && c -> state == HTTPSTATE_SEND_DATA_TRAILER)
cond	49:12	49:48	5	! c -> last_packet_sent && c -> state == HTTPSTATE_SEND_DATA_TRAILER
op	49:12	0:0	6	!
water	49:13	0:0	6	c
op	49:14	0:0	6	->
water	49:16	0:0	6	last_packet_sent
op	49:33	0:0	6	&&
water	49:36	0:0	6	c
op	49:37	0:0	6	->
water	49:39	0:0	6	state
op	49:45	0:0	6	==
water	49:48	0:0	6	HTTPSTATE_SEND_DATA_TRAILER
stmts	49:77	56:8	5	
water	49:77	0:0	6	{
if	51:12	55:12	6	(ctx -> oformat &&avio_open_dyn_buf (& ctx -> pb ) >= 0)
cond	51:16	51:63	7	ctx -> oformat &&avio_open_dyn_buf (& ctx -> pb ) >= 0
water	51:16	0:0	8	ctx
op	51:19	0:0	8	->
water	51:21	0:0	8	oformat
op	51:29	0:0	8	&&
call	51:32	51:58	8	avio_open_dyn_buf
arg	51:50	51:58	9	&ctx->pb
op	51:50	0:0	10	&
water	51:51	0:0	10	ctx
op	51:54	0:0	10	->
water	51:56	0:0	10	pb
op	51:60	0:0	8	>=
water	51:63	0:0	8	0
stmts	51:66	55:12	7	
water	51:66	0:0	8	{
call	52:16	52:36	8	av_write_trailer
arg	52:33	52:36	9	ctx
water	52:33	0:0	10	ctx
water	52:37	0:0	8	;
call	53:16	53:38	8	av_freep
arg	53:25	53:38	9	&c->pb_buffer
op	53:25	0:0	10	&
water	53:26	0:0	10	c
op	53:27	0:0	10	->
water	53:29	0:0	10	pb_buffer
water	53:39	0:0	8	;
call	54:16	54:57	8	avio_close_dyn_buf
arg	54:35	54:42	9	ctx->pb
water	54:35	0:0	10	ctx
op	54:38	0:0	10	->
water	54:40	0:0	10	pb
arg	54:44	54:57	9	&c->pb_buffer
op	54:44	0:0	10	&
water	54:45	0:0	10	c
op	54:46	0:0	10	->
water	54:48	0:0	10	pb_buffer
water	54:58	0:0	8	;
water	55:12	0:0	8	}
water	56:8	0:0	6	}
for	57:8	58:38	4	(i = 0 ;i < ctx -> nb_streams;i ++)
forinit	57:12	57:15	5	i = 0 ;
water	57:12	0:0	6	i
op	57:13	0:0	6	=
water	57:14	0:0	6	0
water	57:15	0:0	6	;
cond	57:17	57:24	5	i < ctx -> nb_streams
water	57:17	0:0	6	i
op	57:18	0:0	6	<
water	57:19	0:0	6	ctx
op	57:22	0:0	6	->
water	57:24	0:0	6	nb_streams
forexpr	57:36	57:37	5	i ++
water	57:36	0:0	6	i
op	57:37	0:0	6	++
stmts	58:12	58:38	5	
call	58:12	58:37	6	av_freep
arg	58:21	58:37	7	&ctx->streams[i]
op	58:21	0:0	8	&
water	58:22	0:0	8	ctx
op	58:25	0:0	8	->
water	58:27	0:0	8	streams
op	58:34	0:0	8	[
water	58:35	0:0	8	i
op	58:36	0:0	8	]
water	58:38	0:0	6	;
call	59:8	59:30	4	av_freep
arg	59:17	59:30	5	&ctx->streams
op	59:17	0:0	6	&
water	59:18	0:0	6	ctx
op	59:21	0:0	6	->
water	59:23	0:0	6	streams
water	59:31	0:0	4	;
call	60:8	60:32	4	av_freep
arg	60:17	60:32	5	&ctx->priv_data
op	60:17	0:0	6	&
water	60:18	0:0	6	ctx
op	60:21	0:0	6	->
water	60:23	0:0	6	priv_data
water	60:33	0:0	4	;
water	61:8	0:0	4	}
if	62:4	63:49	2	(c -> stream && ! c -> post && c -> stream -> stream_type == STREAM_TYPE_LIVE)
cond	62:8	62:59	3	c -> stream && ! c -> post && c -> stream -> stream_type == STREAM_TYPE_LIVE
water	62:8	0:0	4	c
op	62:9	0:0	4	->
water	62:11	0:0	4	stream
op	62:18	0:0	4	&&
op	62:21	0:0	4	!
water	62:22	0:0	4	c
op	62:23	0:0	4	->
water	62:25	0:0	4	post
op	62:30	0:0	4	&&
water	62:33	0:0	4	c
op	62:34	0:0	4	->
water	62:36	0:0	4	stream
op	62:42	0:0	4	->
water	62:44	0:0	4	stream_type
op	62:56	0:0	4	==
water	62:59	0:0	4	STREAM_TYPE_LIVE
stmts	63:8	63:49	3	
water	63:8	0:0	4	current_bandwidth
op	63:26	0:0	4	-=
water	63:29	0:0	4	c
op	63:30	0:0	4	->
water	63:32	0:0	4	stream
op	63:38	0:0	4	->
water	63:40	0:0	4	bandwidth
water	63:49	0:0	4	;
if	65:4	68:4	2	(c -> state == HTTPSTATE_RECEIVE_DATA && c -> stream)
cond	65:8	65:49	3	c -> state == HTTPSTATE_RECEIVE_DATA && c -> stream
water	65:8	0:0	4	c
op	65:9	0:0	4	->
water	65:11	0:0	4	state
op	65:17	0:0	4	==
water	65:20	0:0	4	HTTPSTATE_RECEIVE_DATA
op	65:43	0:0	4	&&
water	65:46	0:0	4	c
op	65:47	0:0	4	->
water	65:49	0:0	4	stream
stmts	65:57	68:4	3	
water	65:57	0:0	4	{
water	66:8	0:0	4	c
op	66:9	0:0	4	->
water	66:11	0:0	4	stream
op	66:17	0:0	4	->
water	66:19	0:0	4	feed_opened
op	66:31	0:0	4	=
water	66:33	0:0	4	0
water	66:34	0:0	4	;
call	67:8	67:24	4	close
arg	67:14	67:24	5	c->feed_fd
water	67:14	0:0	6	c
op	67:15	0:0	6	->
water	67:17	0:0	6	feed_fd
water	67:25	0:0	4	;
water	68:4	0:0	4	}
call	69:4	69:26	2	av_freep
arg	69:13	69:26	3	&c->pb_buffer
op	69:13	0:0	4	&
water	69:14	0:0	4	c
op	69:15	0:0	4	->
water	69:17	0:0	4	pb_buffer
water	69:27	0:0	2	;
call	70:4	70:30	2	av_freep
arg	70:13	70:30	3	&c->packet_buffer
op	70:13	0:0	4	&
water	70:14	0:0	4	c
op	70:15	0:0	4	->
water	70:17	0:0	4	packet_buffer
water	70:31	0:0	2	;
call	71:4	71:23	2	av_freep
arg	71:13	71:23	3	&c->buffer
op	71:13	0:0	4	&
water	71:14	0:0	4	c
op	71:15	0:0	4	->
water	71:17	0:0	4	buffer
water	71:24	0:0	2	;
call	72:4	72:13	2	av_free
arg	72:12	72:13	3	c
water	72:12	0:0	4	c
water	72:14	0:0	2	;
water	73:4	0:0	2	nb_connections
op	73:18	0:0	2	--
water	73:20	0:0	2	;
