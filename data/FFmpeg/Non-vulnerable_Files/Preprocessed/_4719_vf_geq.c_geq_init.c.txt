func	1:15	53:0	0	int	geq_init
params	1:27	0:0	1	
param	1:28	1:48	2	AVFilterContext *	ctx
stmnts	0:0	52:14	1	
decl	3:4	3:31	2	GEQContext	*geq
op	3:20	0:0	2	=
water	3:22	0:0	2	ctx
op	3:25	0:0	2	->
water	3:27	0:0	2	priv
decl	4:4	4:22	2	int	plane
water	4:13	0:0	2	,
decl	4:4	4:22	2	int	ret
op	4:19	0:0	2	=
water	4:21	0:0	2	0
if	5:4	9:4	2	(! geq -> expr_str [ Y ] && ! geq -> expr_str [ G ] && ! geq -> expr_str [ B ] && ! geq -> expr_str [ R ])
cond	5:8	5:87	3	! geq -> expr_str [ Y ] && ! geq -> expr_str [ G ] && ! geq -> expr_str [ B ] && ! geq -> expr_str [ R ]
op	5:8	0:0	4	!
water	5:9	0:0	4	geq
op	5:12	0:0	4	->
water	5:14	0:0	4	expr_str
op	5:22	0:0	4	[
water	5:23	0:0	4	Y
op	5:24	0:0	4	]
op	5:26	0:0	4	&&
op	5:29	0:0	4	!
water	5:30	0:0	4	geq
op	5:33	0:0	4	->
water	5:35	0:0	4	expr_str
op	5:43	0:0	4	[
water	5:44	0:0	4	G
op	5:45	0:0	4	]
op	5:47	0:0	4	&&
op	5:50	0:0	4	!
water	5:51	0:0	4	geq
op	5:54	0:0	4	->
water	5:56	0:0	4	expr_str
op	5:64	0:0	4	[
water	5:65	0:0	4	B
op	5:66	0:0	4	]
op	5:68	0:0	4	&&
op	5:71	0:0	4	!
water	5:72	0:0	4	geq
op	5:75	0:0	4	->
water	5:77	0:0	4	expr_str
op	5:85	0:0	4	[
water	5:86	0:0	4	R
op	5:87	0:0	4	]
stmts	5:90	9:4	3	
water	5:90	0:0	4	{
call	6:8	6:80	4	av_log
arg	6:15	6:18	5	ctx
water	6:15	0:0	6	ctx
arg	6:20	6:32	5	AV_LOG_ERROR
water	6:20	0:0	6	AV_LOG_ERROR
arg	6:34	6:80	5	"A luminance or RGB expression is mandatory\n"
water	6:34	0:0	6	"A luminance or RGB expression is mandatory\n"
water	6:81	0:0	4	;
water	7:8	0:0	4	ret
op	7:12	0:0	4	=
call	7:14	7:28	4	AVERROR
arg	7:22	7:28	5	EINVAL
water	7:22	0:0	6	EINVAL
water	7:29	0:0	4	;
goto	8:8	8:16	4	end
water	8:13	0:0	5	end
water	9:4	0:0	4	}
water	10:4	0:0	2	geq
op	10:7	0:0	2	->
water	10:9	0:0	2	is_rgb
op	10:16	0:0	2	=
op	10:18	0:0	2	!
water	10:19	0:0	2	geq
op	10:22	0:0	2	->
water	10:24	0:0	2	expr_str
op	10:32	0:0	2	[
water	10:33	0:0	2	Y
op	10:34	0:0	2	]
water	10:35	0:0	2	;
if	11:4	15:4	2	(( geq -> expr_str [ Y ] || geq -> expr_str [ U ] || geq -> expr_str [ V ] ) && ( geq -> expr_str [ G ] || geq -> expr_str [ B ] || geq -> expr_str [ R ] ))
cond	11:8	11:127	3	( geq -> expr_str [ Y ] || geq -> expr_str [ U ] || geq -> expr_str [ V ] ) && ( geq -> expr_str [ G ] || geq -> expr_str [ B ] || geq -> expr_str [ R ] )
water	11:8	0:0	4	(
water	11:9	0:0	4	geq
op	11:12	0:0	4	->
water	11:14	0:0	4	expr_str
op	11:22	0:0	4	[
water	11:23	0:0	4	Y
op	11:24	0:0	4	]
op	11:26	0:0	4	||
water	11:29	0:0	4	geq
op	11:32	0:0	4	->
water	11:34	0:0	4	expr_str
op	11:42	0:0	4	[
water	11:43	0:0	4	U
op	11:44	0:0	4	]
op	11:46	0:0	4	||
water	11:49	0:0	4	geq
op	11:52	0:0	4	->
water	11:54	0:0	4	expr_str
op	11:62	0:0	4	[
water	11:63	0:0	4	V
op	11:64	0:0	4	]
water	11:65	0:0	4	)
op	11:67	0:0	4	&&
water	11:70	0:0	4	(
water	11:71	0:0	4	geq
op	11:74	0:0	4	->
water	11:76	0:0	4	expr_str
op	11:84	0:0	4	[
water	11:85	0:0	4	G
op	11:86	0:0	4	]
op	11:88	0:0	4	||
water	11:91	0:0	4	geq
op	11:94	0:0	4	->
water	11:96	0:0	4	expr_str
op	11:104	0:0	4	[
water	11:105	0:0	4	B
op	11:106	0:0	4	]
op	11:108	0:0	4	||
water	11:111	0:0	4	geq
op	11:114	0:0	4	->
water	11:116	0:0	4	expr_str
op	11:124	0:0	4	[
water	11:125	0:0	4	R
op	11:126	0:0	4	]
water	11:127	0:0	4	)
stmts	11:130	15:4	3	
water	11:130	0:0	4	{
call	12:8	12:88	4	av_log
arg	12:15	12:18	5	ctx
water	12:15	0:0	6	ctx
arg	12:20	12:32	5	AV_LOG_ERROR
water	12:20	0:0	6	AV_LOG_ERROR
arg	12:34	12:88	5	"Either YCbCr or RGB but not both must be specified\n"
water	12:34	0:0	6	"Either YCbCr or RGB but not both must be specified\n"
water	12:89	0:0	4	;
water	13:8	0:0	4	ret
op	13:12	0:0	4	=
call	13:14	13:28	4	AVERROR
arg	13:22	13:28	5	EINVAL
water	13:22	0:0	6	EINVAL
water	13:29	0:0	4	;
goto	14:8	14:16	4	end
water	14:13	0:0	5	end
water	15:4	0:0	4	}
if	16:4	20:4	2	(! geq -> expr_str [ U ] && ! geq -> expr_str [ V ])
cond	16:8	16:45	3	! geq -> expr_str [ U ] && ! geq -> expr_str [ V ]
op	16:8	0:0	4	!
water	16:9	0:0	4	geq
op	16:12	0:0	4	->
water	16:14	0:0	4	expr_str
op	16:22	0:0	4	[
water	16:23	0:0	4	U
op	16:24	0:0	4	]
op	16:26	0:0	4	&&
op	16:29	0:0	4	!
water	16:30	0:0	4	geq
op	16:33	0:0	4	->
water	16:35	0:0	4	expr_str
op	16:43	0:0	4	[
water	16:44	0:0	4	V
op	16:45	0:0	4	]
stmts	16:48	20:4	3	
water	16:48	0:0	4	{
water	18:8	0:0	4	geq
op	18:11	0:0	4	->
water	18:13	0:0	4	expr_str
op	18:21	0:0	4	[
water	18:22	0:0	4	U
op	18:23	0:0	4	]
op	18:25	0:0	4	=
call	18:27	18:53	4	av_strdup
arg	18:37	18:53	5	geq->expr_str[Y]
water	18:37	0:0	6	geq
op	18:40	0:0	6	->
water	18:42	0:0	6	expr_str
op	18:50	0:0	6	[
water	18:51	0:0	6	Y
op	18:52	0:0	6	]
water	18:54	0:0	4	;
water	19:8	0:0	4	geq
op	19:11	0:0	4	->
water	19:13	0:0	4	expr_str
op	19:21	0:0	4	[
water	19:22	0:0	4	V
op	19:23	0:0	4	]
op	19:25	0:0	4	=
call	19:27	19:53	4	av_strdup
arg	19:37	19:53	5	geq->expr_str[Y]
water	19:37	0:0	6	geq
op	19:40	0:0	6	->
water	19:42	0:0	6	expr_str
op	19:50	0:0	6	[
water	19:51	0:0	6	Y
op	19:52	0:0	6	]
water	19:54	0:0	4	;
water	20:4	0:0	4	}
else	20:6	24:4	2
stmts	20:11	24:4	3	
water	20:11	0:0	4	{
if	22:8	22:77	4	(! geq -> expr_str [ U ])
cond	22:12	22:28	5	! geq -> expr_str [ U ]
op	22:12	0:0	6	!
water	22:13	0:0	6	geq
op	22:16	0:0	6	->
water	22:18	0:0	6	expr_str
op	22:26	0:0	6	[
water	22:27	0:0	6	U
op	22:28	0:0	6	]
stmts	22:31	22:77	5	
water	22:31	0:0	6	geq
op	22:34	0:0	6	->
water	22:36	0:0	6	expr_str
op	22:44	0:0	6	[
water	22:45	0:0	6	U
op	22:46	0:0	6	]
op	22:48	0:0	6	=
call	22:50	22:76	6	av_strdup
arg	22:60	22:76	7	geq->expr_str[V]
water	22:60	0:0	8	geq
op	22:63	0:0	8	->
water	22:65	0:0	8	expr_str
op	22:73	0:0	8	[
water	22:74	0:0	8	V
op	22:75	0:0	8	]
water	22:77	0:0	6	;
if	23:8	23:77	4	(! geq -> expr_str [ V ])
cond	23:12	23:28	5	! geq -> expr_str [ V ]
op	23:12	0:0	6	!
water	23:13	0:0	6	geq
op	23:16	0:0	6	->
water	23:18	0:0	6	expr_str
op	23:26	0:0	6	[
water	23:27	0:0	6	V
op	23:28	0:0	6	]
stmts	23:31	23:77	5	
water	23:31	0:0	6	geq
op	23:34	0:0	6	->
water	23:36	0:0	6	expr_str
op	23:44	0:0	6	[
water	23:45	0:0	6	V
op	23:46	0:0	6	]
op	23:48	0:0	6	=
call	23:50	23:76	6	av_strdup
arg	23:60	23:76	7	geq->expr_str[U]
water	23:60	0:0	8	geq
op	23:63	0:0	8	->
water	23:65	0:0	8	expr_str
op	23:73	0:0	8	[
water	23:74	0:0	8	U
op	23:75	0:0	8	]
water	23:77	0:0	6	;
water	24:4	0:0	4	}
if	25:4	26:43	2	(! geq -> expr_str [ A ])
cond	25:8	25:24	3	! geq -> expr_str [ A ]
op	25:8	0:0	4	!
water	25:9	0:0	4	geq
op	25:12	0:0	4	->
water	25:14	0:0	4	expr_str
op	25:22	0:0	4	[
water	25:23	0:0	4	A
op	25:24	0:0	4	]
stmts	26:8	26:43	3	
water	26:8	0:0	4	geq
op	26:11	0:0	4	->
water	26:13	0:0	4	expr_str
op	26:21	0:0	4	[
water	26:22	0:0	4	A
op	26:23	0:0	4	]
op	26:25	0:0	4	=
call	26:27	26:42	4	av_strdup
arg	26:37	26:42	5	"255"
water	26:37	0:0	6	"255"
water	26:43	0:0	4	;
if	27:4	28:46	2	(! geq -> expr_str [ G ])
cond	27:8	27:24	3	! geq -> expr_str [ G ]
op	27:8	0:0	4	!
water	27:9	0:0	4	geq
op	27:12	0:0	4	->
water	27:14	0:0	4	expr_str
op	27:22	0:0	4	[
water	27:23	0:0	4	G
op	27:24	0:0	4	]
stmts	28:8	28:46	3	
water	28:8	0:0	4	geq
op	28:11	0:0	4	->
water	28:13	0:0	4	expr_str
op	28:21	0:0	4	[
water	28:22	0:0	4	G
op	28:23	0:0	4	]
op	28:25	0:0	4	=
call	28:27	28:45	4	av_strdup
arg	28:37	28:45	5	"g(X,Y)"
water	28:37	0:0	6	"g(X,Y)"
water	28:46	0:0	4	;
if	29:4	30:46	2	(! geq -> expr_str [ B ])
cond	29:8	29:24	3	! geq -> expr_str [ B ]
op	29:8	0:0	4	!
water	29:9	0:0	4	geq
op	29:12	0:0	4	->
water	29:14	0:0	4	expr_str
op	29:22	0:0	4	[
water	29:23	0:0	4	B
op	29:24	0:0	4	]
stmts	30:8	30:46	3	
water	30:8	0:0	4	geq
op	30:11	0:0	4	->
water	30:13	0:0	4	expr_str
op	30:21	0:0	4	[
water	30:22	0:0	4	B
op	30:23	0:0	4	]
op	30:25	0:0	4	=
call	30:27	30:45	4	av_strdup
arg	30:37	30:45	5	"b(X,Y)"
water	30:37	0:0	6	"b(X,Y)"
water	30:46	0:0	4	;
if	31:4	32:46	2	(! geq -> expr_str [ R ])
cond	31:8	31:24	3	! geq -> expr_str [ R ]
op	31:8	0:0	4	!
water	31:9	0:0	4	geq
op	31:12	0:0	4	->
water	31:14	0:0	4	expr_str
op	31:22	0:0	4	[
water	31:23	0:0	4	R
op	31:24	0:0	4	]
stmts	32:8	32:46	3	
water	32:8	0:0	4	geq
op	32:11	0:0	4	->
water	32:13	0:0	4	expr_str
op	32:21	0:0	4	[
water	32:22	0:0	4	R
op	32:23	0:0	4	]
op	32:25	0:0	4	=
call	32:27	32:45	4	av_strdup
arg	32:37	32:45	5	"r(X,Y)"
water	32:37	0:0	6	"r(X,Y)"
water	32:46	0:0	4	;
if	33:4	39:4	2	(geq -> is_rgb ? ( ! geq -> expr_str [ G ] || ! geq -> expr_str [ B ] || ! geq -> expr_str [ R ] ) : ( ! geq -> expr_str [ U ] || ! geq -> expr_str [ V ] || ! geq -> expr_str [ A ] ))
cond	33:8	36:72	3	geq -> is_rgb ? ( ! geq -> expr_str [ G ] || ! geq -> expr_str [ B ] || ! geq -> expr_str [ R ] ) : ( ! geq -> expr_str [ U ] || ! geq -> expr_str [ V ] || ! geq -> expr_str [ A ] )
water	33:8	0:0	4	geq
op	33:11	0:0	4	->
water	33:13	0:0	4	is_rgb
water	33:20	0:0	4	?
water	34:12	0:0	4	(
op	34:13	0:0	4	!
water	34:14	0:0	4	geq
op	34:17	0:0	4	->
water	34:19	0:0	4	expr_str
op	34:27	0:0	4	[
water	34:28	0:0	4	G
op	34:29	0:0	4	]
op	34:31	0:0	4	||
op	34:34	0:0	4	!
water	34:35	0:0	4	geq
op	34:38	0:0	4	->
water	34:40	0:0	4	expr_str
op	34:48	0:0	4	[
water	34:49	0:0	4	B
op	34:50	0:0	4	]
op	34:52	0:0	4	||
op	34:55	0:0	4	!
water	34:56	0:0	4	geq
op	34:59	0:0	4	->
water	34:61	0:0	4	expr_str
op	34:69	0:0	4	[
water	34:70	0:0	4	R
op	34:71	0:0	4	]
water	34:72	0:0	4	)
water	35:20	0:0	4	:
water	36:12	0:0	4	(
op	36:13	0:0	4	!
water	36:14	0:0	4	geq
op	36:17	0:0	4	->
water	36:19	0:0	4	expr_str
op	36:27	0:0	4	[
water	36:28	0:0	4	U
op	36:29	0:0	4	]
op	36:31	0:0	4	||
op	36:34	0:0	4	!
water	36:35	0:0	4	geq
op	36:38	0:0	4	->
water	36:40	0:0	4	expr_str
op	36:48	0:0	4	[
water	36:49	0:0	4	V
op	36:50	0:0	4	]
op	36:52	0:0	4	||
op	36:55	0:0	4	!
water	36:56	0:0	4	geq
op	36:59	0:0	4	->
water	36:61	0:0	4	expr_str
op	36:69	0:0	4	[
water	36:70	0:0	4	A
op	36:71	0:0	4	]
water	36:72	0:0	4	)
stmts	36:75	39:4	3	
water	36:75	0:0	4	{
water	37:8	0:0	4	ret
op	37:12	0:0	4	=
call	37:14	37:28	4	AVERROR
arg	37:22	37:28	5	ENOMEM
water	37:22	0:0	6	ENOMEM
water	37:29	0:0	4	;
goto	38:8	38:16	4	end
water	38:13	0:0	5	end
water	39:4	0:0	4	}
for	40:4	50:4	2	(plane = 0 ;plane < 4;plane ++)
forinit	40:9	40:18	3	plane = 0 ;
water	40:9	0:0	4	plane
op	40:15	0:0	4	=
water	40:17	0:0	4	0
water	40:18	0:0	4	;
cond	40:20	40:28	3	plane < 4
water	40:20	0:0	4	plane
op	40:26	0:0	4	<
water	40:28	0:0	4	4
forexpr	40:31	40:36	3	plane ++
water	40:31	0:0	4	plane
op	40:36	0:0	4	++
stmts	40:40	50:4	3	
water	40:40	0:0	4	{
water	41:8	0:0	4	static
call	41:15	41:27	4	double
arg	41:23	41:27	5	*p[]
op	41:23	0:0	6	*
water	41:24	0:0	6	p
op	41:25	0:0	6	[
op	41:26	0:0	6	]
water	41:28	0:0	4	(
water	41:29	0:0	4	void
op	41:34	0:0	4	*
water	41:35	0:0	4	,
water	41:37	0:0	4	double
water	41:43	0:0	4	,
water	41:45	0:0	4	double
water	41:51	0:0	4	)
op	41:53	0:0	4	=
water	41:55	0:0	4	{
water	41:57	0:0	4	lum
water	41:60	0:0	4	,
water	41:62	0:0	4	cb
water	41:64	0:0	4	,
water	41:66	0:0	4	cr
water	41:68	0:0	4	,
water	41:70	0:0	4	alpha
water	41:76	0:0	4	}
water	41:77	0:0	4	;
water	42:8	0:0	4	static
water	42:15	0:0	4	const
water	42:21	0:0	4	char
op	42:26	0:0	4	*
water	42:27	0:0	4	const
water	42:33	0:0	4	func2_yuv_names
op	42:48	0:0	4	[
op	42:49	0:0	4	]
op	42:54	0:0	4	=
water	42:56	0:0	4	{
water	42:58	0:0	4	"lum"
water	42:63	0:0	4	,
water	42:65	0:0	4	"cb"
water	42:69	0:0	4	,
water	42:71	0:0	4	"cr"
water	42:75	0:0	4	,
water	42:77	0:0	4	"alpha"
water	42:84	0:0	4	,
water	42:86	0:0	4	"p"
water	42:89	0:0	4	,
water	42:91	0:0	4	NULL
water	42:96	0:0	4	}
water	42:97	0:0	4	;
water	43:8	0:0	4	static
water	43:15	0:0	4	const
water	43:21	0:0	4	char
op	43:26	0:0	4	*
water	43:27	0:0	4	const
water	43:33	0:0	4	func2_rgb_names
op	43:48	0:0	4	[
op	43:49	0:0	4	]
op	43:54	0:0	4	=
water	43:56	0:0	4	{
water	43:58	0:0	4	"g"
water	43:61	0:0	4	,
water	43:63	0:0	4	"b"
water	43:66	0:0	4	,
water	43:68	0:0	4	"r"
water	43:71	0:0	4	,
water	43:73	0:0	4	"alpha"
water	43:80	0:0	4	,
water	43:82	0:0	4	"p"
water	43:85	0:0	4	,
water	43:87	0:0	4	NULL
water	43:92	0:0	4	}
water	43:93	0:0	4	;
water	44:8	0:0	4	const
water	44:14	0:0	4	char
op	44:19	0:0	4	*
water	44:20	0:0	4	const
op	44:26	0:0	4	*
water	44:27	0:0	4	func2_names
op	44:45	0:0	4	=
water	44:47	0:0	4	geq
op	44:50	0:0	4	->
water	44:52	0:0	4	is_rgb
water	44:59	0:0	4	?
water	44:61	0:0	4	func2_rgb_names
water	44:77	0:0	4	:
water	44:79	0:0	4	func2_yuv_names
water	44:94	0:0	4	;
call	45:8	45:24	4	double
arg	45:16	45:24	5	*func2[]
op	45:16	0:0	6	*
water	45:17	0:0	6	func2
op	45:22	0:0	6	[
op	45:23	0:0	6	]
water	45:25	0:0	4	(
water	45:26	0:0	4	void
op	45:31	0:0	4	*
water	45:32	0:0	4	,
water	45:34	0:0	4	double
water	45:40	0:0	4	,
water	45:42	0:0	4	double
water	45:48	0:0	4	)
op	45:50	0:0	4	=
water	45:52	0:0	4	{
water	45:54	0:0	4	lum
water	45:57	0:0	4	,
water	45:59	0:0	4	cb
water	45:61	0:0	4	,
water	45:63	0:0	4	cr
water	45:65	0:0	4	,
water	45:67	0:0	4	alpha
water	45:72	0:0	4	,
water	45:74	0:0	4	p
op	45:75	0:0	4	[
water	45:76	0:0	4	plane
op	45:81	0:0	4	]
water	45:82	0:0	4	,
water	45:84	0:0	4	NULL
water	45:89	0:0	4	}
water	45:90	0:0	4	;
water	46:8	0:0	4	ret
op	46:12	0:0	4	=
call	46:14	47:66	4	av_expr_parse
arg	46:28	46:42	5	&geq->e[plane]
op	46:28	0:0	6	&
water	46:29	0:0	6	geq
op	46:32	0:0	6	->
water	46:34	0:0	6	e
op	46:35	0:0	6	[
water	46:36	0:0	6	plane
op	46:41	0:0	6	]
arg	46:44	46:101	5	geq->expr_str[plane<3&&geq->is_rgb?plane+4:plane]
water	46:44	0:0	6	geq
op	46:47	0:0	6	->
water	46:49	0:0	6	expr_str
op	46:57	0:0	6	[
water	46:58	0:0	6	plane
op	46:64	0:0	6	<
water	46:66	0:0	6	3
op	46:68	0:0	6	&&
water	46:71	0:0	6	geq
op	46:74	0:0	6	->
water	46:76	0:0	6	is_rgb
water	46:83	0:0	6	?
water	46:85	0:0	6	plane
op	46:90	0:0	6	+
water	46:91	0:0	6	4
water	46:93	0:0	6	:
water	46:95	0:0	6	plane
op	46:100	0:0	6	]
arg	46:103	46:112	5	var_names
water	46:103	0:0	6	var_names
arg	47:28	47:32	5	NULL
water	47:28	0:0	6	NULL
arg	47:34	47:38	5	NULL
water	47:34	0:0	6	NULL
arg	47:40	47:51	5	func2_names
water	47:40	0:0	6	func2_names
arg	47:53	47:58	5	func2
water	47:53	0:0	6	func2
arg	47:60	47:61	5	0
water	47:60	0:0	6	0
arg	47:63	47:66	5	ctx
water	47:63	0:0	6	ctx
water	47:67	0:0	4	;
if	48:8	49:17	4	(ret < 0)
cond	48:12	48:18	5	ret < 0
water	48:12	0:0	6	ret
op	48:16	0:0	6	<
water	48:18	0:0	6	0
stmts	49:12	49:17	5	
break	49:12	49:17	6	
water	50:4	0:0	4	}
label	51:0	51:3	2	end :
return	52:4	52:14	2	ret
water	52:11	0:0	3	ret
