func	1:0	231:0	0	static int	vc1_decode_p_mb
params	1:26	0:0	1	
param	1:27	1:40	2	VC1Context *	v
stmnts	0:0	230:12	1	
decl	3:4	3:29	2	MpegEncContext	*s
op	3:22	0:0	2	=
op	3:24	0:0	2	&
water	3:25	0:0	2	v
op	3:26	0:0	2	->
water	3:28	0:0	2	s
decl	4:4	4:30	2	GetBitContext	*gb
op	4:22	0:0	2	=
op	4:24	0:0	2	&
water	4:25	0:0	2	s
op	4:26	0:0	2	->
water	4:28	0:0	2	gb
decl	5:4	5:12	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:12	2	int	j
decl	6:4	6:49	2	int	mb_pos
op	6:15	0:0	2	=
water	6:17	0:0	2	s
op	6:18	0:0	2	->
water	6:20	0:0	2	mb_x
op	6:25	0:0	2	+
water	6:27	0:0	2	s
op	6:28	0:0	2	->
water	6:30	0:0	2	mb_y
op	6:35	0:0	2	*
water	6:37	0:0	2	s
op	6:38	0:0	2	->
water	6:40	0:0	2	mb_stride
decl	7:4	7:11	2	int	cbp
decl	8:4	8:22	2	int	mqdiff
water	8:14	0:0	2	,
decl	8:4	8:22	2	int	mquant
decl	9:4	9:23	2	int	ttmb
op	9:13	0:0	2	=
water	9:15	0:0	2	v
op	9:16	0:0	2	->
water	9:18	0:0	2	ttfrm
decl	10:4	10:25	2	int	mb_has_coeffs
op	10:22	0:0	2	=
water	10:24	0:0	2	1
decl	11:4	11:20	2	int	dmv_x
water	11:13	0:0	2	,
decl	11:4	11:20	2	int	dmv_y
decl	12:4	12:21	2	int	index
water	12:13	0:0	2	,
decl	12:4	12:21	2	int	index1
decl	13:4	13:17	2	int	val
water	13:11	0:0	2	,
decl	13:4	13:17	2	int	sign
decl	14:4	14:23	2	int	first_block
op	14:20	0:0	2	=
water	14:22	0:0	2	1
decl	15:4	15:20	2	int	dst_idx
water	15:15	0:0	2	,
decl	15:4	15:20	2	int	off
decl	16:4	16:23	2	int	skipped
water	16:15	0:0	2	,
decl	16:4	16:23	2	int	fourmv
decl	17:4	17:57	2	int	block_cbp
op	17:18	0:0	2	=
water	17:20	0:0	2	0
water	17:21	0:0	2	,
decl	17:4	17:57	2	int	pat
water	17:26	0:0	2	,
decl	17:4	17:57	2	int	block_tt
op	17:37	0:0	2	=
water	17:39	0:0	2	0
water	17:40	0:0	2	,
decl	17:4	17:57	2	int	block_intra
op	17:54	0:0	2	=
water	17:56	0:0	2	0
water	18:4	0:0	2	mquant
op	18:11	0:0	2	=
water	18:13	0:0	2	v
op	18:14	0:0	2	->
water	18:16	0:0	2	pq
water	18:18	0:0	2	;
if	19:4	20:30	2	(v -> mv_type_is_raw)
cond	19:8	19:11	3	v -> mv_type_is_raw
water	19:8	0:0	4	v
op	19:9	0:0	4	->
water	19:11	0:0	4	mv_type_is_raw
stmts	20:8	20:30	3	
water	20:8	0:0	4	fourmv
op	20:15	0:0	4	=
call	20:17	20:29	4	get_bits1
arg	20:27	20:29	5	gb
water	20:27	0:0	6	gb
water	20:30	0:0	4	;
else	21:4	22:44	2
stmts	22:8	22:44	3	
water	22:8	0:0	4	fourmv
op	22:15	0:0	4	=
water	22:17	0:0	4	v
op	22:18	0:0	4	->
water	22:20	0:0	4	mv_type_mb_plane
op	22:36	0:0	4	[
water	22:37	0:0	4	mb_pos
op	22:43	0:0	4	]
water	22:44	0:0	4	;
if	23:4	24:31	2	(v -> skip_is_raw)
cond	23:8	23:11	3	v -> skip_is_raw
water	23:8	0:0	4	v
op	23:9	0:0	4	->
water	23:11	0:0	4	skip_is_raw
stmts	24:8	24:31	3	
water	24:8	0:0	4	skipped
op	24:16	0:0	4	=
call	24:18	24:30	4	get_bits1
arg	24:28	24:30	5	gb
water	24:28	0:0	6	gb
water	24:31	0:0	4	;
else	25:4	26:43	2
stmts	26:8	26:43	3	
water	26:8	0:0	4	skipped
op	26:16	0:0	4	=
water	26:18	0:0	4	v
op	26:19	0:0	4	->
water	26:21	0:0	4	s
op	26:22	0:0	4	.
water	26:23	0:0	4	mbskip_table
op	26:35	0:0	4	[
water	26:36	0:0	4	mb_pos
op	26:42	0:0	4	]
water	26:43	0:0	4	;
if	27:4	110:4	2	(! fourmv)
cond	27:8	27:9	3	! fourmv
op	27:8	0:0	4	!
water	27:9	0:0	4	fourmv
stmts	27:17	110:4	3	
water	27:17	0:0	4	{
if	28:8	99:8	4	(! skipped)
cond	28:12	28:13	5	! skipped
op	28:12	0:0	6	!
water	28:13	0:0	6	skipped
stmts	28:22	99:8	5	
water	28:22	0:0	6	{
call	29:12	29:35	6	GET_MVDATA
arg	29:23	29:28	7	dmv_x
water	29:23	0:0	8	dmv_x
arg	29:30	29:35	7	dmv_y
water	29:30	0:0	8	dmv_y
water	29:36	0:0	6	;
if	30:12	33:12	6	(s -> mb_intra)
cond	30:16	30:19	7	s -> mb_intra
water	30:16	0:0	8	s
op	30:17	0:0	8	->
water	30:19	0:0	8	mb_intra
stmts	30:29	33:12	7	
water	30:29	0:0	8	{
water	31:16	0:0	8	s
op	31:17	0:0	8	->
water	31:19	0:0	8	current_picture
op	31:34	0:0	8	.
water	31:35	0:0	8	motion_val
op	31:45	0:0	8	[
water	31:46	0:0	8	1
op	31:47	0:0	8	]
op	31:48	0:0	8	[
water	31:49	0:0	8	s
op	31:50	0:0	8	->
water	31:52	0:0	8	block_index
op	31:63	0:0	8	[
water	31:64	0:0	8	0
op	31:65	0:0	8	]
op	31:66	0:0	8	]
op	31:67	0:0	8	[
water	31:68	0:0	8	0
op	31:69	0:0	8	]
op	31:71	0:0	8	=
water	31:73	0:0	8	0
water	31:74	0:0	8	;
water	32:16	0:0	8	s
op	32:17	0:0	8	->
water	32:19	0:0	8	current_picture
op	32:34	0:0	8	.
water	32:35	0:0	8	motion_val
op	32:45	0:0	8	[
water	32:46	0:0	8	1
op	32:47	0:0	8	]
op	32:48	0:0	8	[
water	32:49	0:0	8	s
op	32:50	0:0	8	->
water	32:52	0:0	8	block_index
op	32:63	0:0	8	[
water	32:64	0:0	8	0
op	32:65	0:0	8	]
op	32:66	0:0	8	]
op	32:67	0:0	8	[
water	32:68	0:0	8	1
op	32:69	0:0	8	]
op	32:71	0:0	8	=
water	32:73	0:0	8	0
water	32:74	0:0	8	;
water	33:12	0:0	8	}
water	34:12	0:0	6	s
op	34:13	0:0	6	->
water	34:15	0:0	6	current_picture
op	34:30	0:0	6	.
water	34:31	0:0	6	mb_type
op	34:38	0:0	6	[
water	34:39	0:0	6	mb_pos
op	34:45	0:0	6	]
op	34:47	0:0	6	=
water	34:49	0:0	6	s
op	34:50	0:0	6	->
water	34:52	0:0	6	mb_intra
water	34:61	0:0	6	?
water	34:63	0:0	6	MB_TYPE_INTRA
water	34:77	0:0	6	:
water	34:79	0:0	6	MB_TYPE_16x16
water	34:92	0:0	6	;
call	35:12	35:93	6	ff_vc1_pred_mv
arg	35:27	35:28	7	v
water	35:27	0:0	8	v
arg	35:30	35:31	7	0
water	35:30	0:0	8	0
arg	35:33	35:38	7	dmv_x
water	35:33	0:0	8	dmv_x
arg	35:40	35:45	7	dmv_y
water	35:40	0:0	8	dmv_y
arg	35:47	35:48	7	1
water	35:47	0:0	8	1
arg	35:50	35:60	7	v->range_x
water	35:50	0:0	8	v
op	35:51	0:0	8	->
water	35:53	0:0	8	range_x
arg	35:62	35:72	7	v->range_y
water	35:62	0:0	8	v
op	35:63	0:0	8	->
water	35:65	0:0	8	range_y
arg	35:74	35:87	7	v->mb_type[0]
water	35:74	0:0	8	v
op	35:75	0:0	8	->
water	35:77	0:0	8	mb_type
op	35:84	0:0	8	[
water	35:85	0:0	8	0
op	35:86	0:0	8	]
arg	35:89	35:90	7	0
water	35:89	0:0	8	0
arg	35:92	35:93	7	0
water	35:92	0:0	8	0
water	35:94	0:0	6	;
if	37:12	41:12	6	(s -> mb_intra && ! mb_has_coeffs)
cond	37:16	37:32	7	s -> mb_intra && ! mb_has_coeffs
water	37:16	0:0	8	s
op	37:17	0:0	8	->
water	37:19	0:0	8	mb_intra
op	37:28	0:0	8	&&
op	37:31	0:0	8	!
water	37:32	0:0	8	mb_has_coeffs
stmts	37:47	41:12	7	
water	37:47	0:0	8	{
call	38:16	38:27	8	GET_MQUANT
water	38:28	0:0	8	;
water	39:16	0:0	8	s
op	39:17	0:0	8	->
water	39:19	0:0	8	ac_pred
op	39:27	0:0	8	=
call	39:29	39:41	8	get_bits1
arg	39:39	39:41	9	gb
water	39:39	0:0	10	gb
water	39:42	0:0	8	;
water	40:16	0:0	8	cbp
op	40:27	0:0	8	=
water	40:29	0:0	8	0
water	40:30	0:0	8	;
water	41:12	0:0	8	}
else	41:14	46:12	6
stmts	41:19	46:12	7	
if	41:19	46:12	8	(mb_has_coeffs)
cond	41:23	41:23	9	mb_has_coeffs
water	41:23	0:0	10	mb_has_coeffs
stmts	41:38	46:12	9	
water	41:38	0:0	10	{
if	42:16	43:46	10	(s -> mb_intra)
cond	42:20	42:23	11	s -> mb_intra
water	42:20	0:0	12	s
op	42:21	0:0	12	->
water	42:23	0:0	12	mb_intra
stmts	43:20	43:46	11	
water	43:20	0:0	12	s
op	43:21	0:0	12	->
water	43:23	0:0	12	ac_pred
op	43:31	0:0	12	=
call	43:33	43:45	12	get_bits1
arg	43:43	43:45	13	gb
water	43:43	0:0	14	gb
water	43:46	0:0	12	;
water	44:16	0:0	10	cbp
op	44:20	0:0	10	=
call	44:22	44:85	10	get_vlc2
arg	44:31	44:39	11	&v->s.gb
op	44:31	0:0	12	&
water	44:32	0:0	12	v
op	44:33	0:0	12	->
water	44:35	0:0	12	s
op	44:36	0:0	12	.
water	44:37	0:0	12	gb
arg	44:41	44:60	11	v->cbpcy_vlc->table
water	44:41	0:0	12	v
op	44:42	0:0	12	->
water	44:44	0:0	12	cbpcy_vlc
op	44:53	0:0	12	->
water	44:55	0:0	12	table
arg	44:62	44:82	11	VC1_CBPCY_P_VLC_BITS
water	44:62	0:0	12	VC1_CBPCY_P_VLC_BITS
arg	44:84	44:85	11	2
water	44:84	0:0	12	2
water	44:86	0:0	10	;
call	45:16	45:27	10	GET_MQUANT
water	45:28	0:0	10	;
water	46:12	0:0	10	}
else	46:14	49:12	6
stmts	46:19	49:12	7	
water	46:19	0:0	8	{
water	47:16	0:0	8	mquant
op	47:23	0:0	8	=
water	47:25	0:0	8	v
op	47:26	0:0	8	->
water	47:28	0:0	8	pq
water	47:30	0:0	8	;
water	48:16	0:0	8	cbp
op	48:23	0:0	8	=
water	48:25	0:0	8	0
water	48:26	0:0	8	;
water	49:12	0:0	8	}
water	50:12	0:0	6	s
op	50:13	0:0	6	->
water	50:15	0:0	6	current_picture
op	50:30	0:0	6	.
water	50:31	0:0	6	qscale_table
op	50:43	0:0	6	[
water	50:44	0:0	6	mb_pos
op	50:50	0:0	6	]
op	50:52	0:0	6	=
water	50:54	0:0	6	mquant
water	50:60	0:0	6	;
if	51:12	53:53	6	(! v -> ttmbf && ! s -> mb_intra && mb_has_coeffs)
cond	51:16	51:45	7	! v -> ttmbf && ! s -> mb_intra && mb_has_coeffs
op	51:16	0:0	8	!
water	51:17	0:0	8	v
op	51:18	0:0	8	->
water	51:20	0:0	8	ttmbf
op	51:26	0:0	8	&&
op	51:29	0:0	8	!
water	51:30	0:0	8	s
op	51:31	0:0	8	->
water	51:33	0:0	8	mb_intra
op	51:42	0:0	8	&&
water	51:45	0:0	8	mb_has_coeffs
stmts	52:16	53:53	7	
water	52:16	0:0	8	ttmb
op	52:21	0:0	8	=
call	52:23	53:52	8	get_vlc2
arg	52:32	52:34	9	gb
water	52:32	0:0	10	gb
arg	52:36	52:70	9	ff_vc1_ttmb_vlc[v->tt_index].table
water	52:36	0:0	10	ff_vc1_ttmb_vlc
op	52:51	0:0	10	[
water	52:52	0:0	10	v
op	52:53	0:0	10	->
water	52:55	0:0	10	tt_index
op	52:63	0:0	10	]
op	52:64	0:0	10	.
water	52:65	0:0	10	table
arg	53:32	53:49	9	VC1_TTMB_VLC_BITS
water	53:32	0:0	10	VC1_TTMB_VLC_BITS
arg	53:51	53:52	9	2
water	53:51	0:0	10	2
water	53:53	0:0	8	;
if	54:12	54:49	6	(! s -> mb_intra)
cond	54:16	54:20	7	! s -> mb_intra
op	54:16	0:0	8	!
water	54:17	0:0	8	s
op	54:18	0:0	8	->
water	54:20	0:0	8	mb_intra
stmts	54:30	54:49	7	
call	54:30	54:48	8	ff_vc1_mc_1mv
arg	54:44	54:45	9	v
water	54:44	0:0	10	v
arg	54:47	54:48	9	0
water	54:47	0:0	10	0
water	54:49	0:0	8	;
water	55:12	0:0	6	dst_idx
op	55:20	0:0	6	=
water	55:22	0:0	6	0
water	55:23	0:0	6	;
for	56:12	98:12	6	(i = 0 ;i < 6;i ++)
forinit	56:17	56:22	7	i = 0 ;
water	56:17	0:0	8	i
op	56:19	0:0	8	=
water	56:21	0:0	8	0
water	56:22	0:0	8	;
cond	56:24	56:28	7	i < 6
water	56:24	0:0	8	i
op	56:26	0:0	8	<
water	56:28	0:0	8	6
forexpr	56:31	56:32	7	i ++
water	56:31	0:0	8	i
op	56:32	0:0	8	++
stmts	56:36	98:12	7	
water	56:36	0:0	8	{
water	57:16	0:0	8	s
op	57:17	0:0	8	->
water	57:19	0:0	8	dc_val
op	57:25	0:0	8	[
water	57:26	0:0	8	0
op	57:27	0:0	8	]
op	57:28	0:0	8	[
water	57:29	0:0	8	s
op	57:30	0:0	8	->
water	57:32	0:0	8	block_index
op	57:43	0:0	8	[
water	57:44	0:0	8	i
op	57:45	0:0	8	]
op	57:46	0:0	8	]
op	57:48	0:0	8	=
water	57:50	0:0	8	0
water	57:51	0:0	8	;
water	58:16	0:0	8	dst_idx
op	58:24	0:0	8	+=
water	58:27	0:0	8	i
op	58:29	0:0	8	>>
water	58:32	0:0	8	2
water	58:33	0:0	8	;
water	59:16	0:0	8	val
op	59:20	0:0	8	=
water	59:22	0:0	8	(
water	59:23	0:0	8	(
water	59:24	0:0	8	cbp
op	59:28	0:0	8	>>
water	59:31	0:0	8	(
water	59:32	0:0	8	5
op	59:34	0:0	8	-
water	59:36	0:0	8	i
water	59:37	0:0	8	)
water	59:38	0:0	8	)
op	59:40	0:0	8	&
water	59:42	0:0	8	1
water	59:43	0:0	8	)
water	59:44	0:0	8	;
water	60:16	0:0	8	off
op	60:20	0:0	8	=
water	60:22	0:0	8	(
water	60:23	0:0	8	i
op	60:25	0:0	8	&
water	60:27	0:0	8	4
water	60:28	0:0	8	)
water	60:30	0:0	8	?
water	60:32	0:0	8	0
water	60:34	0:0	8	:
water	60:36	0:0	8	(
water	60:37	0:0	8	(
water	60:38	0:0	8	i
op	60:40	0:0	8	&
water	60:42	0:0	8	1
water	60:43	0:0	8	)
op	60:45	0:0	8	*
water	60:47	0:0	8	8
op	60:49	0:0	8	+
water	60:51	0:0	8	(
water	60:52	0:0	8	i
op	60:54	0:0	8	&
water	60:56	0:0	8	2
water	60:57	0:0	8	)
op	60:59	0:0	8	*
water	60:61	0:0	8	4
op	60:63	0:0	8	*
water	60:65	0:0	8	s
op	60:66	0:0	8	->
water	60:68	0:0	8	linesize
water	60:76	0:0	8	)
water	60:77	0:0	8	;
water	61:16	0:0	8	v
op	61:17	0:0	8	->
water	61:19	0:0	8	mb_type
op	61:26	0:0	8	[
water	61:27	0:0	8	0
op	61:28	0:0	8	]
op	61:29	0:0	8	[
water	61:30	0:0	8	s
op	61:31	0:0	8	->
water	61:33	0:0	8	block_index
op	61:44	0:0	8	[
water	61:45	0:0	8	i
op	61:46	0:0	8	]
op	61:47	0:0	8	]
op	61:49	0:0	8	=
water	61:51	0:0	8	s
op	61:52	0:0	8	->
water	61:54	0:0	8	mb_intra
water	61:62	0:0	8	;
if	62:16	89:16	8	(s -> mb_intra)
cond	62:20	62:23	9	s -> mb_intra
water	62:20	0:0	10	s
op	62:21	0:0	10	->
water	62:23	0:0	10	mb_intra
stmts	62:33	89:16	9	
water	62:33	0:0	10	{
water	64:20	0:0	10	v
op	64:21	0:0	10	->
water	64:23	0:0	10	a_avail
op	64:31	0:0	10	=
water	64:33	0:0	10	v
op	64:34	0:0	10	->
water	64:36	0:0	10	c_avail
op	64:44	0:0	10	=
water	64:46	0:0	10	0
water	64:47	0:0	10	;
if	65:20	66:88	10	(i == 2 || i == 3 || ! s -> first_slice_line)
cond	65:24	65:48	11	i == 2 || i == 3 || ! s -> first_slice_line
water	65:24	0:0	12	i
op	65:26	0:0	12	==
water	65:29	0:0	12	2
op	65:31	0:0	12	||
water	65:34	0:0	12	i
op	65:36	0:0	12	==
water	65:39	0:0	12	3
op	65:41	0:0	12	||
op	65:44	0:0	12	!
water	65:45	0:0	12	s
op	65:46	0:0	12	->
water	65:48	0:0	12	first_slice_line
stmts	66:24	66:88	11	
water	66:24	0:0	12	v
op	66:25	0:0	12	->
water	66:27	0:0	12	a_avail
op	66:35	0:0	12	=
water	66:37	0:0	12	v
op	66:38	0:0	12	->
water	66:40	0:0	12	mb_type
op	66:47	0:0	12	[
water	66:48	0:0	12	0
op	66:49	0:0	12	]
op	66:50	0:0	12	[
water	66:51	0:0	12	s
op	66:52	0:0	12	->
water	66:54	0:0	12	block_index
op	66:65	0:0	12	[
water	66:66	0:0	12	i
op	66:67	0:0	12	]
op	66:69	0:0	12	-
water	66:71	0:0	12	s
op	66:72	0:0	12	->
water	66:74	0:0	12	block_wrap
op	66:84	0:0	12	[
water	66:85	0:0	12	i
op	66:86	0:0	12	]
op	66:87	0:0	12	]
water	66:88	0:0	12	;
if	67:20	68:73	10	(i == 1 || i == 3 || s -> mb_x)
cond	67:24	67:47	11	i == 1 || i == 3 || s -> mb_x
water	67:24	0:0	12	i
op	67:26	0:0	12	==
water	67:29	0:0	12	1
op	67:31	0:0	12	||
water	67:34	0:0	12	i
op	67:36	0:0	12	==
water	67:39	0:0	12	3
op	67:41	0:0	12	||
water	67:44	0:0	12	s
op	67:45	0:0	12	->
water	67:47	0:0	12	mb_x
stmts	68:24	68:73	11	
water	68:24	0:0	12	v
op	68:25	0:0	12	->
water	68:27	0:0	12	c_avail
op	68:35	0:0	12	=
water	68:37	0:0	12	v
op	68:38	0:0	12	->
water	68:40	0:0	12	mb_type
op	68:47	0:0	12	[
water	68:48	0:0	12	0
op	68:49	0:0	12	]
op	68:50	0:0	12	[
water	68:51	0:0	12	s
op	68:52	0:0	12	->
water	68:54	0:0	12	block_index
op	68:65	0:0	12	[
water	68:66	0:0	12	i
op	68:67	0:0	12	]
op	68:69	0:0	12	-
water	68:71	0:0	12	1
op	68:72	0:0	12	]
water	68:73	0:0	12	;
call	69:20	70:81	10	vc1_decode_intra_block
arg	69:43	69:44	11	v
water	69:43	0:0	12	v
arg	69:46	69:57	11	s->block[i]
water	69:46	0:0	12	s
op	69:47	0:0	12	->
water	69:49	0:0	12	block
op	69:54	0:0	12	[
water	69:55	0:0	12	i
op	69:56	0:0	12	]
arg	69:59	69:60	11	i
water	69:59	0:0	12	i
arg	69:62	69:65	11	val
water	69:62	0:0	12	val
arg	69:67	69:73	11	mquant
water	69:67	0:0	12	mquant
arg	70:43	70:81	11	(i&4)?v->codingset2:v->codingset
water	70:43	0:0	12	(
water	70:44	0:0	12	i
op	70:46	0:0	12	&
water	70:48	0:0	12	4
water	70:49	0:0	12	)
water	70:51	0:0	12	?
water	70:53	0:0	12	v
op	70:54	0:0	12	->
water	70:56	0:0	12	codingset2
water	70:67	0:0	12	:
water	70:69	0:0	12	v
op	70:70	0:0	12	->
water	70:72	0:0	12	codingset
water	70:82	0:0	10	;
if	71:20	72:32	10	(CONFIG_GRAY && ( i > 3 ) && ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY ))
cond	71:24	71:87	11	CONFIG_GRAY && ( i > 3 ) && ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY )
water	71:24	0:0	12	CONFIG_GRAY
op	71:36	0:0	12	&&
water	71:39	0:0	12	(
water	71:40	0:0	12	i
op	71:42	0:0	12	>
water	71:44	0:0	12	3
water	71:45	0:0	12	)
op	71:47	0:0	12	&&
water	71:50	0:0	12	(
water	71:51	0:0	12	s
op	71:52	0:0	12	->
water	71:54	0:0	12	avctx
op	71:59	0:0	12	->
water	71:61	0:0	12	flags
op	71:67	0:0	12	&
water	71:69	0:0	12	AV_CODEC_FLAG_GRAY
water	71:87	0:0	12	)
stmts	72:24	72:32	11	
continue	72:24	72:32	12	
call	73:20	73:59	10	v->vc1dsp.vc1_inv_trans_8x8
arg	73:48	73:59	11	s->block[i]
water	73:48	0:0	12	s
op	73:49	0:0	12	->
water	73:51	0:0	12	block
op	73:56	0:0	12	[
water	73:57	0:0	12	i
op	73:58	0:0	12	]
water	73:60	0:0	10	;
if	74:20	76:48	10	(v -> rangeredfrm)
cond	74:24	74:27	11	v -> rangeredfrm
water	74:24	0:0	12	v
op	74:25	0:0	12	->
water	74:27	0:0	12	rangeredfrm
stmts	75:24	76:48	11	
for	75:24	76:48	12	(j = 0 ;j < 64;j ++)
forinit	75:29	75:34	13	j = 0 ;
water	75:29	0:0	14	j
op	75:31	0:0	14	=
water	75:33	0:0	14	0
water	75:34	0:0	14	;
cond	75:36	75:40	13	j < 64
water	75:36	0:0	14	j
op	75:38	0:0	14	<
water	75:40	0:0	14	64
forexpr	75:44	75:45	13	j ++
water	75:44	0:0	14	j
op	75:45	0:0	14	++
stmts	76:28	76:48	13	
water	76:28	0:0	14	s
op	76:29	0:0	14	->
water	76:31	0:0	14	block
op	76:36	0:0	14	[
water	76:37	0:0	14	i
op	76:38	0:0	14	]
op	76:39	0:0	14	[
water	76:40	0:0	14	j
op	76:41	0:0	14	]
op	76:43	0:0	14	<<=
water	76:47	0:0	14	1
water	76:48	0:0	14	;
call	77:20	80:73	10	s->idsp.put_signed_pixels_clamped
arg	77:54	77:65	11	s->block[i]
water	77:54	0:0	12	s
op	77:55	0:0	12	->
water	77:57	0:0	12	block
op	77:62	0:0	12	[
water	77:63	0:0	12	i
op	77:64	0:0	12	]
arg	78:54	78:76	11	s->dest[dst_idx]+off
water	78:54	0:0	12	s
op	78:55	0:0	12	->
water	78:57	0:0	12	dest
op	78:61	0:0	12	[
water	78:62	0:0	12	dst_idx
op	78:69	0:0	12	]
op	78:71	0:0	12	+
water	78:73	0:0	12	off
arg	79:54	80:73	11	i&4?s->uvlinesize:s->linesize
water	79:54	0:0	12	i
op	79:56	0:0	12	&
water	79:58	0:0	12	4
water	79:60	0:0	12	?
water	79:62	0:0	12	s
op	79:63	0:0	12	->
water	79:65	0:0	12	uvlinesize
water	80:60	0:0	12	:
water	80:62	0:0	12	s
op	80:63	0:0	12	->
water	80:65	0:0	12	linesize
water	80:74	0:0	10	;
if	81:20	86:20	10	(v -> pq >= 9 && v -> overlap)
cond	81:24	81:41	11	v -> pq >= 9 && v -> overlap
water	81:24	0:0	12	v
op	81:25	0:0	12	->
water	81:27	0:0	12	pq
op	81:30	0:0	12	>=
water	81:33	0:0	12	9
op	81:35	0:0	12	&&
water	81:38	0:0	12	v
op	81:39	0:0	12	->
water	81:41	0:0	12	overlap
stmts	81:50	86:20	11	
water	81:50	0:0	12	{
if	82:24	83:112	12	(v -> c_avail)
cond	82:28	82:31	13	v -> c_avail
water	82:28	0:0	14	v
op	82:29	0:0	14	->
water	82:31	0:0	14	c_avail
stmts	83:28	83:112	13	
call	83:28	83:111	14	v->vc1dsp.vc1_h_overlap
arg	83:52	83:74	15	s->dest[dst_idx]+off
water	83:52	0:0	16	s
op	83:53	0:0	16	->
water	83:55	0:0	16	dest
op	83:59	0:0	16	[
water	83:60	0:0	16	dst_idx
op	83:67	0:0	16	]
op	83:69	0:0	16	+
water	83:71	0:0	16	off
arg	83:76	83:111	15	i&4?s->uvlinesize:s->linesize
water	83:76	0:0	16	i
op	83:78	0:0	16	&
water	83:80	0:0	16	4
water	83:82	0:0	16	?
water	83:84	0:0	16	s
op	83:85	0:0	16	->
water	83:87	0:0	16	uvlinesize
water	83:98	0:0	16	:
water	83:100	0:0	16	s
op	83:101	0:0	16	->
water	83:103	0:0	16	linesize
water	83:112	0:0	14	;
if	84:24	85:112	12	(v -> a_avail)
cond	84:28	84:31	13	v -> a_avail
water	84:28	0:0	14	v
op	84:29	0:0	14	->
water	84:31	0:0	14	a_avail
stmts	85:28	85:112	13	
call	85:28	85:111	14	v->vc1dsp.vc1_v_overlap
arg	85:52	85:74	15	s->dest[dst_idx]+off
water	85:52	0:0	16	s
op	85:53	0:0	16	->
water	85:55	0:0	16	dest
op	85:59	0:0	16	[
water	85:60	0:0	16	dst_idx
op	85:67	0:0	16	]
op	85:69	0:0	16	+
water	85:71	0:0	16	off
arg	85:76	85:111	15	i&4?s->uvlinesize:s->linesize
water	85:76	0:0	16	i
op	85:78	0:0	16	&
water	85:80	0:0	16	4
water	85:82	0:0	16	?
water	85:84	0:0	16	s
op	85:85	0:0	16	->
water	85:87	0:0	16	uvlinesize
water	85:98	0:0	16	:
water	85:100	0:0	16	s
op	85:101	0:0	16	->
water	85:103	0:0	16	linesize
water	85:112	0:0	14	;
water	86:20	0:0	12	}
water	87:20	0:0	10	block_cbp
op	87:32	0:0	10	|=
water	87:35	0:0	10	0
water	87:36	0:0	10	xF
op	87:39	0:0	10	<<
water	87:42	0:0	10	(
water	87:43	0:0	10	i
op	87:45	0:0	10	<<
water	87:48	0:0	10	2
water	87:49	0:0	10	)
water	87:50	0:0	10	;
water	88:20	0:0	10	block_intra
op	88:32	0:0	10	|=
water	88:35	0:0	10	1
op	88:37	0:0	10	<<
water	88:40	0:0	10	i
water	88:41	0:0	10	;
water	89:16	0:0	10	}
else	89:18	97:16	8
stmts	89:23	97:16	9	
if	89:23	97:16	10	(val)
cond	89:27	89:27	11	val
water	89:27	0:0	12	val
stmts	89:32	97:16	11	
water	89:32	0:0	12	{
water	90:20	0:0	12	pat
op	90:24	0:0	12	=
call	90:26	92:120	12	vc1_decode_p_block
arg	90:45	90:46	13	v
water	90:45	0:0	14	v
arg	90:48	90:59	13	s->block[i]
water	90:48	0:0	14	s
op	90:49	0:0	14	->
water	90:51	0:0	14	block
op	90:56	0:0	14	[
water	90:57	0:0	14	i
op	90:58	0:0	14	]
arg	90:61	90:62	13	i
water	90:61	0:0	14	i
arg	90:64	90:70	13	mquant
water	90:64	0:0	14	mquant
arg	90:72	90:76	13	ttmb
water	90:72	0:0	14	ttmb
arg	90:78	90:89	13	first_block
water	90:78	0:0	14	first_block
arg	91:45	91:67	13	s->dest[dst_idx]+off
water	91:45	0:0	14	s
op	91:46	0:0	14	->
water	91:48	0:0	14	dest
op	91:52	0:0	14	[
water	91:53	0:0	14	dst_idx
op	91:60	0:0	14	]
op	91:62	0:0	14	+
water	91:64	0:0	14	off
arg	91:69	91:106	13	(i&4)?s->uvlinesize:s->linesize
water	91:69	0:0	14	(
water	91:70	0:0	14	i
op	91:72	0:0	14	&
water	91:74	0:0	14	4
water	91:75	0:0	14	)
water	91:77	0:0	14	?
water	91:79	0:0	14	s
op	91:80	0:0	14	->
water	91:82	0:0	14	uvlinesize
water	91:93	0:0	14	:
water	91:95	0:0	14	s
op	91:96	0:0	14	->
water	91:98	0:0	14	linesize
arg	92:45	92:109	13	CONFIG_GRAY&&(i&4)&&(s->avctx->flags&AV_CODEC_FLAG_GRAY)
water	92:45	0:0	14	CONFIG_GRAY
op	92:57	0:0	14	&&
water	92:60	0:0	14	(
water	92:61	0:0	14	i
op	92:63	0:0	14	&
water	92:65	0:0	14	4
water	92:66	0:0	14	)
op	92:68	0:0	14	&&
water	92:71	0:0	14	(
water	92:72	0:0	14	s
op	92:73	0:0	14	->
water	92:75	0:0	14	avctx
op	92:80	0:0	14	->
water	92:82	0:0	14	flags
op	92:88	0:0	14	&
water	92:90	0:0	14	AV_CODEC_FLAG_GRAY
water	92:108	0:0	14	)
arg	92:111	92:120	13	&block_tt
op	92:111	0:0	14	&
water	92:112	0:0	14	block_tt
water	92:121	0:0	12	;
water	93:20	0:0	12	block_cbp
op	93:30	0:0	12	|=
water	93:33	0:0	12	pat
op	93:37	0:0	12	<<
water	93:40	0:0	12	(
water	93:41	0:0	12	i
op	93:43	0:0	12	<<
water	93:46	0:0	12	2
water	93:47	0:0	12	)
water	93:48	0:0	12	;
if	94:20	95:33	12	(! v -> ttmbf && ttmb < 8)
cond	94:24	94:44	13	! v -> ttmbf && ttmb < 8
op	94:24	0:0	14	!
water	94:25	0:0	14	v
op	94:26	0:0	14	->
water	94:28	0:0	14	ttmbf
op	94:34	0:0	14	&&
water	94:37	0:0	14	ttmb
op	94:42	0:0	14	<
water	94:44	0:0	14	8
stmts	95:24	95:33	13	
water	95:24	0:0	14	ttmb
op	95:29	0:0	14	=
op	95:31	0:0	14	-
water	95:32	0:0	14	1
water	95:33	0:0	14	;
water	96:20	0:0	12	first_block
op	96:32	0:0	12	=
water	96:34	0:0	12	0
water	96:35	0:0	12	;
water	97:16	0:0	12	}
water	98:12	0:0	8	}
water	99:8	0:0	6	}
else	99:10	109:8	4
stmts	99:15	109:8	5	
water	99:15	0:0	6	{
water	100:12	0:0	6	s
op	100:13	0:0	6	->
water	100:15	0:0	6	mb_intra
op	100:24	0:0	6	=
water	100:26	0:0	6	0
water	100:27	0:0	6	;
for	101:12	104:12	6	(i = 0 ;i < 6;i ++)
forinit	101:17	101:22	7	i = 0 ;
water	101:17	0:0	8	i
op	101:19	0:0	8	=
water	101:21	0:0	8	0
water	101:22	0:0	8	;
cond	101:24	101:28	7	i < 6
water	101:24	0:0	8	i
op	101:26	0:0	8	<
water	101:28	0:0	8	6
forexpr	101:31	101:32	7	i ++
water	101:31	0:0	8	i
op	101:32	0:0	8	++
stmts	101:36	104:12	7	
water	101:36	0:0	8	{
water	102:16	0:0	8	v
op	102:17	0:0	8	->
water	102:19	0:0	8	mb_type
op	102:26	0:0	8	[
water	102:27	0:0	8	0
op	102:28	0:0	8	]
op	102:29	0:0	8	[
water	102:30	0:0	8	s
op	102:31	0:0	8	->
water	102:33	0:0	8	block_index
op	102:44	0:0	8	[
water	102:45	0:0	8	i
op	102:46	0:0	8	]
op	102:47	0:0	8	]
op	102:49	0:0	8	=
water	102:51	0:0	8	0
water	102:52	0:0	8	;
water	103:16	0:0	8	s
op	103:17	0:0	8	->
water	103:19	0:0	8	dc_val
op	103:25	0:0	8	[
water	103:26	0:0	8	0
op	103:27	0:0	8	]
op	103:28	0:0	8	[
water	103:29	0:0	8	s
op	103:30	0:0	8	->
water	103:32	0:0	8	block_index
op	103:43	0:0	8	[
water	103:44	0:0	8	i
op	103:45	0:0	8	]
op	103:46	0:0	8	]
op	103:49	0:0	8	=
water	103:51	0:0	8	0
water	103:52	0:0	8	;
water	104:12	0:0	8	}
water	105:12	0:0	6	s
op	105:13	0:0	6	->
water	105:15	0:0	6	current_picture
op	105:30	0:0	6	.
water	105:31	0:0	6	mb_type
op	105:38	0:0	6	[
water	105:39	0:0	6	mb_pos
op	105:45	0:0	6	]
op	105:52	0:0	6	=
water	105:54	0:0	6	MB_TYPE_SKIP
water	105:66	0:0	6	;
water	106:12	0:0	6	s
op	106:13	0:0	6	->
water	106:15	0:0	6	current_picture
op	106:30	0:0	6	.
water	106:31	0:0	6	qscale_table
op	106:43	0:0	6	[
water	106:44	0:0	6	mb_pos
op	106:50	0:0	6	]
op	106:52	0:0	6	=
water	106:54	0:0	6	0
water	106:55	0:0	6	;
call	107:12	107:85	6	ff_vc1_pred_mv
arg	107:27	107:28	7	v
water	107:27	0:0	8	v
arg	107:30	107:31	7	0
water	107:30	0:0	8	0
arg	107:33	107:34	7	0
water	107:33	0:0	8	0
arg	107:36	107:37	7	0
water	107:36	0:0	8	0
arg	107:39	107:40	7	1
water	107:39	0:0	8	1
arg	107:42	107:52	7	v->range_x
water	107:42	0:0	8	v
op	107:43	0:0	8	->
water	107:45	0:0	8	range_x
arg	107:54	107:64	7	v->range_y
water	107:54	0:0	8	v
op	107:55	0:0	8	->
water	107:57	0:0	8	range_y
arg	107:66	107:79	7	v->mb_type[0]
water	107:66	0:0	8	v
op	107:67	0:0	8	->
water	107:69	0:0	8	mb_type
op	107:76	0:0	8	[
water	107:77	0:0	8	0
op	107:78	0:0	8	]
arg	107:81	107:82	7	0
water	107:81	0:0	8	0
arg	107:84	107:85	7	0
water	107:84	0:0	8	0
water	107:86	0:0	6	;
call	108:12	108:30	6	ff_vc1_mc_1mv
arg	108:26	108:27	7	v
water	108:26	0:0	8	v
arg	108:29	108:30	7	0
water	108:29	0:0	8	0
water	108:31	0:0	6	;
water	109:8	0:0	6	}
water	110:4	0:0	4	}
else	110:6	225:4	2
stmts	110:11	225:4	3	
water	110:11	0:0	4	{
if	111:8	211:8	4	(! skipped)
cond	111:12	111:13	5	! skipped
op	111:12	0:0	6	!
water	111:13	0:0	6	skipped
stmts	111:23	211:8	5	
water	111:23	0:0	6	{
decl	112:12	112:48	6	int	intra_count
op	112:28	0:0	6	=
water	112:30	0:0	6	0
water	112:31	0:0	6	,
decl	112:12	112:48	6	int	coded_inter
op	112:45	0:0	6	=
water	112:47	0:0	6	0
decl	113:12	113:40	6	int	is_intra[6]
water	113:27	0:0	6	,
decl	113:12	113:40	6	int	is_coded[6]
water	115:12	0:0	6	cbp
op	115:16	0:0	6	=
call	115:18	115:81	6	get_vlc2
arg	115:27	115:35	7	&v->s.gb
op	115:27	0:0	8	&
water	115:28	0:0	8	v
op	115:29	0:0	8	->
water	115:31	0:0	8	s
op	115:32	0:0	8	.
water	115:33	0:0	8	gb
arg	115:37	115:56	7	v->cbpcy_vlc->table
water	115:37	0:0	8	v
op	115:38	0:0	8	->
water	115:40	0:0	8	cbpcy_vlc
op	115:49	0:0	8	->
water	115:51	0:0	8	table
arg	115:58	115:78	7	VC1_CBPCY_P_VLC_BITS
water	115:58	0:0	8	VC1_CBPCY_P_VLC_BITS
arg	115:80	115:81	7	2
water	115:80	0:0	8	2
water	115:82	0:0	6	;
for	116:12	143:12	6	(i = 0 ;i < 6;i ++)
forinit	116:17	116:22	7	i = 0 ;
water	116:17	0:0	8	i
op	116:19	0:0	8	=
water	116:21	0:0	8	0
water	116:22	0:0	8	;
cond	116:24	116:28	7	i < 6
water	116:24	0:0	8	i
op	116:26	0:0	8	<
water	116:28	0:0	8	6
forexpr	116:31	116:32	7	i ++
water	116:31	0:0	8	i
op	116:32	0:0	8	++
stmts	116:36	143:12	7	
water	116:36	0:0	8	{
water	117:16	0:0	8	val
op	117:20	0:0	8	=
water	117:22	0:0	8	(
water	117:23	0:0	8	(
water	117:24	0:0	8	cbp
op	117:28	0:0	8	>>
water	117:31	0:0	8	(
water	117:32	0:0	8	5
op	117:34	0:0	8	-
water	117:36	0:0	8	i
water	117:37	0:0	8	)
water	117:38	0:0	8	)
op	117:40	0:0	8	&
water	117:42	0:0	8	1
water	117:43	0:0	8	)
water	117:44	0:0	8	;
water	118:16	0:0	8	s
op	118:17	0:0	8	->
water	118:19	0:0	8	dc_val
op	118:25	0:0	8	[
water	118:26	0:0	8	0
op	118:27	0:0	8	]
op	118:28	0:0	8	[
water	118:29	0:0	8	s
op	118:30	0:0	8	->
water	118:32	0:0	8	block_index
op	118:43	0:0	8	[
water	118:44	0:0	8	i
op	118:45	0:0	8	]
op	118:46	0:0	8	]
op	118:48	0:0	8	=
water	118:50	0:0	8	0
water	118:51	0:0	8	;
water	119:16	0:0	8	s
op	119:17	0:0	8	->
water	119:19	0:0	8	mb_intra
op	119:48	0:0	8	=
water	119:50	0:0	8	0
water	119:51	0:0	8	;
if	120:16	133:16	8	(i < 4)
cond	120:20	120:24	9	i < 4
water	120:20	0:0	10	i
op	120:22	0:0	10	<
water	120:24	0:0	10	4
stmts	120:27	133:16	9	
water	120:27	0:0	10	{
water	121:20	0:0	10	dmv_x
op	121:26	0:0	10	=
water	121:28	0:0	10	dmv_y
op	121:34	0:0	10	=
water	121:36	0:0	10	0
water	121:37	0:0	10	;
water	122:20	0:0	10	s
op	122:21	0:0	10	->
water	122:23	0:0	10	mb_intra
op	122:34	0:0	10	=
water	122:36	0:0	10	0
water	122:37	0:0	10	;
water	123:20	0:0	10	mb_has_coeffs
op	123:34	0:0	10	=
water	123:36	0:0	10	0
water	123:37	0:0	10	;
if	124:20	126:20	10	(val)
cond	124:24	124:24	11	val
water	124:24	0:0	12	val
stmts	124:29	126:20	11	
water	124:29	0:0	12	{
call	125:24	125:47	12	GET_MVDATA
arg	125:35	125:40	13	dmv_x
water	125:35	0:0	14	dmv_x
arg	125:42	125:47	13	dmv_y
water	125:42	0:0	14	dmv_y
water	125:48	0:0	12	;
water	126:20	0:0	12	}
call	127:20	127:101	10	ff_vc1_pred_mv
arg	127:35	127:36	11	v
water	127:35	0:0	12	v
arg	127:38	127:39	11	i
water	127:38	0:0	12	i
arg	127:41	127:46	11	dmv_x
water	127:41	0:0	12	dmv_x
arg	127:48	127:53	11	dmv_y
water	127:48	0:0	12	dmv_y
arg	127:55	127:56	11	0
water	127:55	0:0	12	0
arg	127:58	127:68	11	v->range_x
water	127:58	0:0	12	v
op	127:59	0:0	12	->
water	127:61	0:0	12	range_x
arg	127:70	127:80	11	v->range_y
water	127:70	0:0	12	v
op	127:71	0:0	12	->
water	127:73	0:0	12	range_y
arg	127:82	127:95	11	v->mb_type[0]
water	127:82	0:0	12	v
op	127:83	0:0	12	->
water	127:85	0:0	12	mb_type
op	127:92	0:0	12	[
water	127:93	0:0	12	0
op	127:94	0:0	12	]
arg	127:97	127:98	11	0
water	127:97	0:0	12	0
arg	127:100	127:101	11	0
water	127:100	0:0	12	0
water	127:102	0:0	10	;
if	128:20	129:54	10	(! s -> mb_intra)
cond	128:24	128:28	11	! s -> mb_intra
op	128:24	0:0	12	!
water	128:25	0:0	12	s
op	128:26	0:0	12	->
water	128:28	0:0	12	mb_intra
stmts	129:24	129:54	11	
call	129:24	129:53	12	ff_vc1_mc_4mv_luma
arg	129:43	129:44	13	v
water	129:43	0:0	14	v
arg	129:46	129:47	13	i
water	129:46	0:0	14	i
arg	129:49	129:50	13	0
water	129:49	0:0	14	0
arg	129:52	129:53	13	0
water	129:52	0:0	14	0
water	129:54	0:0	12	;
water	130:20	0:0	10	intra_count
op	130:32	0:0	10	+=
water	130:35	0:0	10	s
op	130:36	0:0	10	->
water	130:38	0:0	10	mb_intra
water	130:46	0:0	10	;
water	131:20	0:0	10	is_intra
op	131:28	0:0	10	[
water	131:29	0:0	10	i
op	131:30	0:0	10	]
op	131:33	0:0	10	=
water	131:35	0:0	10	s
op	131:36	0:0	10	->
water	131:38	0:0	10	mb_intra
water	131:46	0:0	10	;
water	132:20	0:0	10	is_coded
op	132:28	0:0	10	[
water	132:29	0:0	10	i
op	132:30	0:0	10	]
op	132:33	0:0	10	=
water	132:35	0:0	10	mb_has_coeffs
water	132:48	0:0	10	;
water	133:16	0:0	10	}
if	134:16	137:16	8	(i & 4)
cond	134:20	134:24	9	i & 4
water	134:20	0:0	10	i
op	134:22	0:0	10	&
water	134:24	0:0	10	4
stmts	134:27	137:16	9	
water	134:27	0:0	10	{
water	135:20	0:0	10	is_intra
op	135:28	0:0	10	[
water	135:29	0:0	10	i
op	135:30	0:0	10	]
op	135:32	0:0	10	=
water	135:34	0:0	10	(
water	135:35	0:0	10	intra_count
op	135:47	0:0	10	>=
water	135:50	0:0	10	3
water	135:51	0:0	10	)
water	135:52	0:0	10	;
water	136:20	0:0	10	is_coded
op	136:28	0:0	10	[
water	136:29	0:0	10	i
op	136:30	0:0	10	]
op	136:32	0:0	10	=
water	136:34	0:0	10	val
water	136:37	0:0	10	;
water	137:16	0:0	10	}
if	138:16	139:46	8	(i == 4)
cond	138:20	138:25	9	i == 4
water	138:20	0:0	10	i
op	138:22	0:0	10	==
water	138:25	0:0	10	4
stmts	139:20	139:46	9	
call	139:20	139:45	10	ff_vc1_mc_4mv_chroma
arg	139:41	139:42	11	v
water	139:41	0:0	12	v
arg	139:44	139:45	11	0
water	139:44	0:0	12	0
water	139:46	0:0	10	;
water	140:16	0:0	8	v
op	140:17	0:0	8	->
water	140:19	0:0	8	mb_type
op	140:26	0:0	8	[
water	140:27	0:0	8	0
op	140:28	0:0	8	]
op	140:29	0:0	8	[
water	140:30	0:0	8	s
op	140:31	0:0	8	->
water	140:33	0:0	8	block_index
op	140:44	0:0	8	[
water	140:45	0:0	8	i
op	140:46	0:0	8	]
op	140:47	0:0	8	]
op	140:49	0:0	8	=
water	140:51	0:0	8	is_intra
op	140:59	0:0	8	[
water	140:60	0:0	8	i
op	140:61	0:0	8	]
water	140:62	0:0	8	;
if	141:16	142:60	8	(! coded_inter)
cond	141:20	141:21	9	! coded_inter
op	141:20	0:0	10	!
water	141:21	0:0	10	coded_inter
stmts	142:20	142:60	9	
water	142:20	0:0	10	coded_inter
op	142:32	0:0	10	=
op	142:34	0:0	10	!
water	142:35	0:0	10	is_intra
op	142:43	0:0	10	[
water	142:44	0:0	10	i
op	142:45	0:0	10	]
op	142:47	0:0	10	&
water	142:49	0:0	10	is_coded
op	142:57	0:0	10	[
water	142:58	0:0	10	i
op	142:59	0:0	10	]
water	142:60	0:0	10	;
water	143:12	0:0	8	}
water	145:12	0:0	6	dst_idx
op	145:20	0:0	6	=
water	145:22	0:0	6	0
water	145:23	0:0	6	;
if	146:12	147:24	6	(! intra_count && ! coded_inter)
cond	146:16	146:33	7	! intra_count && ! coded_inter
op	146:16	0:0	8	!
water	146:17	0:0	8	intra_count
op	146:29	0:0	8	&&
op	146:32	0:0	8	!
water	146:33	0:0	8	coded_inter
stmts	147:16	147:24	7	
goto	147:16	147:24	8	end
water	147:21	0:0	9	end
call	148:12	148:23	6	GET_MQUANT
water	148:24	0:0	6	;
water	149:12	0:0	6	s
op	149:13	0:0	6	->
water	149:15	0:0	6	current_picture
op	149:30	0:0	6	.
water	149:31	0:0	6	qscale_table
op	149:43	0:0	6	[
water	149:44	0:0	6	mb_pos
op	149:50	0:0	6	]
op	149:52	0:0	6	=
water	149:54	0:0	6	mquant
water	149:60	0:0	6	;
water	151:12	0:0	6	{
decl	152:16	152:33	6	int	intrapred
op	152:30	0:0	6	=
water	152:32	0:0	6	0
for	153:16	160:20	6	(i = 0 ;i < 6;i ++)
forinit	153:21	153:26	7	i = 0 ;
water	153:21	0:0	8	i
op	153:23	0:0	8	=
water	153:25	0:0	8	0
water	153:26	0:0	8	;
cond	153:28	153:32	7	i < 6
water	153:28	0:0	8	i
op	153:30	0:0	8	<
water	153:32	0:0	8	6
forexpr	153:35	153:36	7	i ++
water	153:35	0:0	8	i
op	153:36	0:0	8	++
stmts	154:20	160:20	7	
if	154:20	160:20	8	(is_intra [ i ])
cond	154:24	154:34	9	is_intra [ i ]
water	154:24	0:0	10	is_intra
op	154:32	0:0	10	[
water	154:33	0:0	10	i
op	154:34	0:0	10	]
stmts	154:37	160:20	9	
water	154:37	0:0	10	{
if	155:24	159:24	10	(( ( ! s -> first_slice_line || ( i == 2 || i == 3 ) ) && v -> mb_type [ 0 ] [ s -> block_index [ i ] - s -> block_wrap [ i ] ] ) || ( ( s -> mb_x || ( i == 1 || i == 3 ) ) && v -> mb_type [ 0 ] [ s -> block_index [ i ] - 1 ] ))
cond	155:28	156:103	11	( ( ! s -> first_slice_line || ( i == 2 || i == 3 ) ) && v -> mb_type [ 0 ] [ s -> block_index [ i ] - s -> block_wrap [ i ] ] ) || ( ( s -> mb_x || ( i == 1 || i == 3 ) ) && v -> mb_type [ 0 ] [ s -> block_index [ i ] - 1 ] )
water	155:28	0:0	12	(
water	155:29	0:0	12	(
op	155:30	0:0	12	!
water	155:31	0:0	12	s
op	155:32	0:0	12	->
water	155:34	0:0	12	first_slice_line
op	155:51	0:0	12	||
water	155:54	0:0	12	(
water	155:55	0:0	12	i
op	155:57	0:0	12	==
water	155:60	0:0	12	2
op	155:62	0:0	12	||
water	155:65	0:0	12	i
op	155:67	0:0	12	==
water	155:70	0:0	12	3
water	155:71	0:0	12	)
water	155:72	0:0	12	)
op	155:74	0:0	12	&&
water	155:77	0:0	12	v
op	155:78	0:0	12	->
water	155:80	0:0	12	mb_type
op	155:87	0:0	12	[
water	155:88	0:0	12	0
op	155:89	0:0	12	]
op	155:90	0:0	12	[
water	155:91	0:0	12	s
op	155:92	0:0	12	->
water	155:94	0:0	12	block_index
op	155:105	0:0	12	[
water	155:106	0:0	12	i
op	155:107	0:0	12	]
op	155:109	0:0	12	-
water	155:111	0:0	12	s
op	155:112	0:0	12	->
water	155:114	0:0	12	block_wrap
op	155:124	0:0	12	[
water	155:125	0:0	12	i
op	155:126	0:0	12	]
op	155:127	0:0	12	]
water	155:128	0:0	12	)
op	156:28	0:0	12	||
water	156:31	0:0	12	(
water	156:32	0:0	12	(
water	156:33	0:0	12	s
op	156:34	0:0	12	->
water	156:36	0:0	12	mb_x
op	156:41	0:0	12	||
water	156:44	0:0	12	(
water	156:45	0:0	12	i
op	156:47	0:0	12	==
water	156:50	0:0	12	1
op	156:52	0:0	12	||
water	156:55	0:0	12	i
op	156:57	0:0	12	==
water	156:60	0:0	12	3
water	156:61	0:0	12	)
water	156:62	0:0	12	)
op	156:64	0:0	12	&&
water	156:67	0:0	12	v
op	156:68	0:0	12	->
water	156:70	0:0	12	mb_type
op	156:77	0:0	12	[
water	156:78	0:0	12	0
op	156:79	0:0	12	]
op	156:80	0:0	12	[
water	156:81	0:0	12	s
op	156:82	0:0	12	->
water	156:84	0:0	12	block_index
op	156:95	0:0	12	[
water	156:96	0:0	12	i
op	156:97	0:0	12	]
op	156:99	0:0	12	-
water	156:101	0:0	12	1
op	156:102	0:0	12	]
water	156:103	0:0	12	)
stmts	156:106	159:24	11	
water	156:106	0:0	12	{
water	157:28	0:0	12	intrapred
op	157:38	0:0	12	=
water	157:40	0:0	12	1
water	157:41	0:0	12	;
break	158:28	158:33	12	
water	159:24	0:0	12	}
water	160:20	0:0	10	}
if	161:16	162:46	6	(intrapred)
cond	161:20	161:20	7	intrapred
water	161:20	0:0	8	intrapred
stmts	162:20	162:46	7	
water	162:20	0:0	8	s
op	162:21	0:0	8	->
water	162:23	0:0	8	ac_pred
op	162:31	0:0	8	=
call	162:33	162:45	8	get_bits1
arg	162:43	162:45	9	gb
water	162:43	0:0	10	gb
water	162:46	0:0	8	;
else	163:16	164:34	6
stmts	164:20	164:34	7	
water	164:20	0:0	8	s
op	164:21	0:0	8	->
water	164:23	0:0	8	ac_pred
op	164:31	0:0	8	=
water	164:33	0:0	8	0
water	164:34	0:0	8	;
water	165:12	0:0	6	}
if	166:12	167:93	6	(! v -> ttmbf && coded_inter)
cond	166:16	166:29	7	! v -> ttmbf && coded_inter
op	166:16	0:0	8	!
water	166:17	0:0	8	v
op	166:18	0:0	8	->
water	166:20	0:0	8	ttmbf
op	166:26	0:0	8	&&
water	166:29	0:0	8	coded_inter
stmts	167:16	167:93	7	
water	167:16	0:0	8	ttmb
op	167:21	0:0	8	=
call	167:23	167:92	8	get_vlc2
arg	167:32	167:34	9	gb
water	167:32	0:0	10	gb
arg	167:36	167:70	9	ff_vc1_ttmb_vlc[v->tt_index].table
water	167:36	0:0	10	ff_vc1_ttmb_vlc
op	167:51	0:0	10	[
water	167:52	0:0	10	v
op	167:53	0:0	10	->
water	167:55	0:0	10	tt_index
op	167:63	0:0	10	]
op	167:64	0:0	10	.
water	167:65	0:0	10	table
arg	167:72	167:89	9	VC1_TTMB_VLC_BITS
water	167:72	0:0	10	VC1_TTMB_VLC_BITS
arg	167:91	167:92	9	2
water	167:91	0:0	10	2
water	167:93	0:0	8	;
for	168:12	210:12	6	(i = 0 ;i < 6;i ++)
forinit	168:17	168:22	7	i = 0 ;
water	168:17	0:0	8	i
op	168:19	0:0	8	=
water	168:21	0:0	8	0
water	168:22	0:0	8	;
cond	168:24	168:28	7	i < 6
water	168:24	0:0	8	i
op	168:26	0:0	8	<
water	168:28	0:0	8	6
forexpr	168:31	168:32	7	i ++
water	168:31	0:0	8	i
op	168:32	0:0	8	++
stmts	168:36	210:12	7	
water	168:36	0:0	8	{
water	169:16	0:0	8	dst_idx
op	169:27	0:0	8	+=
water	169:30	0:0	8	i
op	169:32	0:0	8	>>
water	169:35	0:0	8	2
water	169:36	0:0	8	;
water	170:16	0:0	8	off
op	170:28	0:0	8	=
water	170:30	0:0	8	(
water	170:31	0:0	8	i
op	170:33	0:0	8	&
water	170:35	0:0	8	4
water	170:36	0:0	8	)
water	170:38	0:0	8	?
water	170:40	0:0	8	0
water	170:42	0:0	8	:
water	170:44	0:0	8	(
water	170:45	0:0	8	(
water	170:46	0:0	8	i
op	170:48	0:0	8	&
water	170:50	0:0	8	1
water	170:51	0:0	8	)
op	170:53	0:0	8	*
water	170:55	0:0	8	8
op	170:57	0:0	8	+
water	170:59	0:0	8	(
water	170:60	0:0	8	i
op	170:62	0:0	8	&
water	170:64	0:0	8	2
water	170:65	0:0	8	)
op	170:67	0:0	8	*
water	170:69	0:0	8	4
op	170:71	0:0	8	*
water	170:73	0:0	8	s
op	170:74	0:0	8	->
water	170:76	0:0	8	linesize
water	170:84	0:0	8	)
water	170:85	0:0	8	;
water	171:16	0:0	8	s
op	171:17	0:0	8	->
water	171:19	0:0	8	mb_intra
op	171:28	0:0	8	=
water	171:30	0:0	8	is_intra
op	171:38	0:0	8	[
water	171:39	0:0	8	i
op	171:40	0:0	8	]
water	171:41	0:0	8	;
if	172:16	199:16	8	(is_intra [ i ])
cond	172:20	172:30	9	is_intra [ i ]
water	172:20	0:0	10	is_intra
op	172:28	0:0	10	[
water	172:29	0:0	10	i
op	172:30	0:0	10	]
stmts	172:33	199:16	9	
water	172:33	0:0	10	{
water	174:20	0:0	10	v
op	174:21	0:0	10	->
water	174:23	0:0	10	a_avail
op	174:31	0:0	10	=
water	174:33	0:0	10	v
op	174:34	0:0	10	->
water	174:36	0:0	10	c_avail
op	174:44	0:0	10	=
water	174:46	0:0	10	0
water	174:47	0:0	10	;
if	175:20	176:88	10	(i == 2 || i == 3 || ! s -> first_slice_line)
cond	175:24	175:48	11	i == 2 || i == 3 || ! s -> first_slice_line
water	175:24	0:0	12	i
op	175:26	0:0	12	==
water	175:29	0:0	12	2
op	175:31	0:0	12	||
water	175:34	0:0	12	i
op	175:36	0:0	12	==
water	175:39	0:0	12	3
op	175:41	0:0	12	||
op	175:44	0:0	12	!
water	175:45	0:0	12	s
op	175:46	0:0	12	->
water	175:48	0:0	12	first_slice_line
stmts	176:24	176:88	11	
water	176:24	0:0	12	v
op	176:25	0:0	12	->
water	176:27	0:0	12	a_avail
op	176:35	0:0	12	=
water	176:37	0:0	12	v
op	176:38	0:0	12	->
water	176:40	0:0	12	mb_type
op	176:47	0:0	12	[
water	176:48	0:0	12	0
op	176:49	0:0	12	]
op	176:50	0:0	12	[
water	176:51	0:0	12	s
op	176:52	0:0	12	->
water	176:54	0:0	12	block_index
op	176:65	0:0	12	[
water	176:66	0:0	12	i
op	176:67	0:0	12	]
op	176:69	0:0	12	-
water	176:71	0:0	12	s
op	176:72	0:0	12	->
water	176:74	0:0	12	block_wrap
op	176:84	0:0	12	[
water	176:85	0:0	12	i
op	176:86	0:0	12	]
op	176:87	0:0	12	]
water	176:88	0:0	12	;
if	177:20	178:73	10	(i == 1 || i == 3 || s -> mb_x)
cond	177:24	177:47	11	i == 1 || i == 3 || s -> mb_x
water	177:24	0:0	12	i
op	177:26	0:0	12	==
water	177:29	0:0	12	1
op	177:31	0:0	12	||
water	177:34	0:0	12	i
op	177:36	0:0	12	==
water	177:39	0:0	12	3
op	177:41	0:0	12	||
water	177:44	0:0	12	s
op	177:45	0:0	12	->
water	177:47	0:0	12	mb_x
stmts	178:24	178:73	11	
water	178:24	0:0	12	v
op	178:25	0:0	12	->
water	178:27	0:0	12	c_avail
op	178:35	0:0	12	=
water	178:37	0:0	12	v
op	178:38	0:0	12	->
water	178:40	0:0	12	mb_type
op	178:47	0:0	12	[
water	178:48	0:0	12	0
op	178:49	0:0	12	]
op	178:50	0:0	12	[
water	178:51	0:0	12	s
op	178:52	0:0	12	->
water	178:54	0:0	12	block_index
op	178:65	0:0	12	[
water	178:66	0:0	12	i
op	178:67	0:0	12	]
op	178:69	0:0	12	-
water	178:71	0:0	12	1
op	178:72	0:0	12	]
water	178:73	0:0	12	;
call	179:20	180:81	10	vc1_decode_intra_block
arg	179:43	179:44	11	v
water	179:43	0:0	12	v
arg	179:46	179:57	11	s->block[i]
water	179:46	0:0	12	s
op	179:47	0:0	12	->
water	179:49	0:0	12	block
op	179:54	0:0	12	[
water	179:55	0:0	12	i
op	179:56	0:0	12	]
arg	179:59	179:60	11	i
water	179:59	0:0	12	i
arg	179:62	179:73	11	is_coded[i]
water	179:62	0:0	12	is_coded
op	179:70	0:0	12	[
water	179:71	0:0	12	i
op	179:72	0:0	12	]
arg	179:75	179:81	11	mquant
water	179:75	0:0	12	mquant
arg	180:43	180:81	11	(i&4)?v->codingset2:v->codingset
water	180:43	0:0	12	(
water	180:44	0:0	12	i
op	180:46	0:0	12	&
water	180:48	0:0	12	4
water	180:49	0:0	12	)
water	180:51	0:0	12	?
water	180:53	0:0	12	v
op	180:54	0:0	12	->
water	180:56	0:0	12	codingset2
water	180:67	0:0	12	:
water	180:69	0:0	12	v
op	180:70	0:0	12	->
water	180:72	0:0	12	codingset
water	180:82	0:0	10	;
if	181:20	182:32	10	(CONFIG_GRAY && ( i > 3 ) && ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY ))
cond	181:24	181:87	11	CONFIG_GRAY && ( i > 3 ) && ( s -> avctx -> flags & AV_CODEC_FLAG_GRAY )
water	181:24	0:0	12	CONFIG_GRAY
op	181:36	0:0	12	&&
water	181:39	0:0	12	(
water	181:40	0:0	12	i
op	181:42	0:0	12	>
water	181:44	0:0	12	3
water	181:45	0:0	12	)
op	181:47	0:0	12	&&
water	181:50	0:0	12	(
water	181:51	0:0	12	s
op	181:52	0:0	12	->
water	181:54	0:0	12	avctx
op	181:59	0:0	12	->
water	181:61	0:0	12	flags
op	181:67	0:0	12	&
water	181:69	0:0	12	AV_CODEC_FLAG_GRAY
water	181:87	0:0	12	)
stmts	182:24	182:32	11	
continue	182:24	182:32	12	
call	183:20	183:59	10	v->vc1dsp.vc1_inv_trans_8x8
arg	183:48	183:59	11	s->block[i]
water	183:48	0:0	12	s
op	183:49	0:0	12	->
water	183:51	0:0	12	block
op	183:56	0:0	12	[
water	183:57	0:0	12	i
op	183:58	0:0	12	]
water	183:60	0:0	10	;
if	184:20	186:48	10	(v -> rangeredfrm)
cond	184:24	184:27	11	v -> rangeredfrm
water	184:24	0:0	12	v
op	184:25	0:0	12	->
water	184:27	0:0	12	rangeredfrm
stmts	185:24	186:48	11	
for	185:24	186:48	12	(j = 0 ;j < 64;j ++)
forinit	185:29	185:34	13	j = 0 ;
water	185:29	0:0	14	j
op	185:31	0:0	14	=
water	185:33	0:0	14	0
water	185:34	0:0	14	;
cond	185:36	185:40	13	j < 64
water	185:36	0:0	14	j
op	185:38	0:0	14	<
water	185:40	0:0	14	64
forexpr	185:44	185:45	13	j ++
water	185:44	0:0	14	j
op	185:45	0:0	14	++
stmts	186:28	186:48	13	
water	186:28	0:0	14	s
op	186:29	0:0	14	->
water	186:31	0:0	14	block
op	186:36	0:0	14	[
water	186:37	0:0	14	i
op	186:38	0:0	14	]
op	186:39	0:0	14	[
water	186:40	0:0	14	j
op	186:41	0:0	14	]
op	186:43	0:0	14	<<=
water	186:47	0:0	14	1
water	186:48	0:0	14	;
call	187:20	190:75	10	s->idsp.put_signed_pixels_clamped
arg	187:54	187:65	11	s->block[i]
water	187:54	0:0	12	s
op	187:55	0:0	12	->
water	187:57	0:0	12	block
op	187:62	0:0	12	[
water	187:63	0:0	12	i
op	187:64	0:0	12	]
arg	188:54	188:76	11	s->dest[dst_idx]+off
water	188:54	0:0	12	s
op	188:55	0:0	12	->
water	188:57	0:0	12	dest
op	188:61	0:0	12	[
water	188:62	0:0	12	dst_idx
op	188:69	0:0	12	]
op	188:71	0:0	12	+
water	188:73	0:0	12	off
arg	189:54	190:75	11	(i&4)?s->uvlinesize:s->linesize
water	189:54	0:0	12	(
water	189:55	0:0	12	i
op	189:57	0:0	12	&
water	189:59	0:0	12	4
water	189:60	0:0	12	)
water	189:62	0:0	12	?
water	189:64	0:0	12	s
op	189:65	0:0	12	->
water	189:67	0:0	12	uvlinesize
water	190:62	0:0	12	:
water	190:64	0:0	12	s
op	190:65	0:0	12	->
water	190:67	0:0	12	linesize
water	190:76	0:0	10	;
if	191:20	196:20	10	(v -> pq >= 9 && v -> overlap)
cond	191:24	191:41	11	v -> pq >= 9 && v -> overlap
water	191:24	0:0	12	v
op	191:25	0:0	12	->
water	191:27	0:0	12	pq
op	191:30	0:0	12	>=
water	191:33	0:0	12	9
op	191:35	0:0	12	&&
water	191:38	0:0	12	v
op	191:39	0:0	12	->
water	191:41	0:0	12	overlap
stmts	191:50	196:20	11	
water	191:50	0:0	12	{
if	192:24	193:112	12	(v -> c_avail)
cond	192:28	192:31	13	v -> c_avail
water	192:28	0:0	14	v
op	192:29	0:0	14	->
water	192:31	0:0	14	c_avail
stmts	193:28	193:112	13	
call	193:28	193:111	14	v->vc1dsp.vc1_h_overlap
arg	193:52	193:74	15	s->dest[dst_idx]+off
water	193:52	0:0	16	s
op	193:53	0:0	16	->
water	193:55	0:0	16	dest
op	193:59	0:0	16	[
water	193:60	0:0	16	dst_idx
op	193:67	0:0	16	]
op	193:69	0:0	16	+
water	193:71	0:0	16	off
arg	193:76	193:111	15	i&4?s->uvlinesize:s->linesize
water	193:76	0:0	16	i
op	193:78	0:0	16	&
water	193:80	0:0	16	4
water	193:82	0:0	16	?
water	193:84	0:0	16	s
op	193:85	0:0	16	->
water	193:87	0:0	16	uvlinesize
water	193:98	0:0	16	:
water	193:100	0:0	16	s
op	193:101	0:0	16	->
water	193:103	0:0	16	linesize
water	193:112	0:0	14	;
if	194:24	195:112	12	(v -> a_avail)
cond	194:28	194:31	13	v -> a_avail
water	194:28	0:0	14	v
op	194:29	0:0	14	->
water	194:31	0:0	14	a_avail
stmts	195:28	195:112	13	
call	195:28	195:111	14	v->vc1dsp.vc1_v_overlap
arg	195:52	195:74	15	s->dest[dst_idx]+off
water	195:52	0:0	16	s
op	195:53	0:0	16	->
water	195:55	0:0	16	dest
op	195:59	0:0	16	[
water	195:60	0:0	16	dst_idx
op	195:67	0:0	16	]
op	195:69	0:0	16	+
water	195:71	0:0	16	off
arg	195:76	195:111	15	i&4?s->uvlinesize:s->linesize
water	195:76	0:0	16	i
op	195:78	0:0	16	&
water	195:80	0:0	16	4
water	195:82	0:0	16	?
water	195:84	0:0	16	s
op	195:85	0:0	16	->
water	195:87	0:0	16	uvlinesize
water	195:98	0:0	16	:
water	195:100	0:0	16	s
op	195:101	0:0	16	->
water	195:103	0:0	16	linesize
water	195:112	0:0	14	;
water	196:20	0:0	12	}
water	197:20	0:0	10	block_cbp
op	197:32	0:0	10	|=
water	197:35	0:0	10	0
water	197:36	0:0	10	xF
op	197:39	0:0	10	<<
water	197:42	0:0	10	(
water	197:43	0:0	10	i
op	197:45	0:0	10	<<
water	197:48	0:0	10	2
water	197:49	0:0	10	)
water	197:50	0:0	10	;
water	198:20	0:0	10	block_intra
op	198:32	0:0	10	|=
water	198:35	0:0	10	1
op	198:37	0:0	10	<<
water	198:40	0:0	10	i
water	198:41	0:0	10	;
water	199:16	0:0	10	}
else	199:18	209:16	8
stmts	199:23	209:16	9	
if	199:23	209:16	10	(is_coded [ i ])
cond	199:27	199:37	11	is_coded [ i ]
water	199:27	0:0	12	is_coded
op	199:35	0:0	12	[
water	199:36	0:0	12	i
op	199:37	0:0	12	]
stmts	199:40	209:16	11	
water	199:40	0:0	12	{
water	200:20	0:0	12	pat
op	200:24	0:0	12	=
call	200:26	204:54	12	vc1_decode_p_block
arg	200:45	200:46	13	v
water	200:45	0:0	14	v
arg	200:48	200:59	13	s->block[i]
water	200:48	0:0	14	s
op	200:49	0:0	14	->
water	200:51	0:0	14	block
op	200:56	0:0	14	[
water	200:57	0:0	14	i
op	200:58	0:0	14	]
arg	200:61	200:62	13	i
water	200:61	0:0	14	i
arg	200:64	200:70	13	mquant
water	200:64	0:0	14	mquant
arg	200:72	200:76	13	ttmb
water	200:72	0:0	14	ttmb
arg	201:45	201:56	13	first_block
water	201:45	0:0	14	first_block
arg	201:58	201:80	13	s->dest[dst_idx]+off
water	201:58	0:0	14	s
op	201:59	0:0	14	->
water	201:61	0:0	14	dest
op	201:65	0:0	14	[
water	201:66	0:0	14	dst_idx
op	201:73	0:0	14	]
op	201:75	0:0	14	+
water	201:77	0:0	14	off
arg	202:45	202:82	13	(i&4)?s->uvlinesize:s->linesize
water	202:45	0:0	14	(
water	202:46	0:0	14	i
op	202:48	0:0	14	&
water	202:50	0:0	14	4
water	202:51	0:0	14	)
water	202:53	0:0	14	?
water	202:55	0:0	14	s
op	202:56	0:0	14	->
water	202:58	0:0	14	uvlinesize
water	202:69	0:0	14	:
water	202:71	0:0	14	s
op	202:72	0:0	14	->
water	202:74	0:0	14	linesize
arg	203:45	203:109	13	CONFIG_GRAY&&(i&4)&&(s->avctx->flags&AV_CODEC_FLAG_GRAY)
water	203:45	0:0	14	CONFIG_GRAY
op	203:57	0:0	14	&&
water	203:60	0:0	14	(
water	203:61	0:0	14	i
op	203:63	0:0	14	&
water	203:65	0:0	14	4
water	203:66	0:0	14	)
op	203:68	0:0	14	&&
water	203:71	0:0	14	(
water	203:72	0:0	14	s
op	203:73	0:0	14	->
water	203:75	0:0	14	avctx
op	203:80	0:0	14	->
water	203:82	0:0	14	flags
op	203:88	0:0	14	&
water	203:90	0:0	14	AV_CODEC_FLAG_GRAY
water	203:108	0:0	14	)
arg	204:45	204:54	13	&block_tt
op	204:45	0:0	14	&
water	204:46	0:0	14	block_tt
water	204:55	0:0	12	;
water	205:20	0:0	12	block_cbp
op	205:30	0:0	12	|=
water	205:33	0:0	12	pat
op	205:37	0:0	12	<<
water	205:40	0:0	12	(
water	205:41	0:0	12	i
op	205:43	0:0	12	<<
water	205:46	0:0	12	2
water	205:47	0:0	12	)
water	205:48	0:0	12	;
if	206:20	207:33	12	(! v -> ttmbf && ttmb < 8)
cond	206:24	206:44	13	! v -> ttmbf && ttmb < 8
op	206:24	0:0	14	!
water	206:25	0:0	14	v
op	206:26	0:0	14	->
water	206:28	0:0	14	ttmbf
op	206:34	0:0	14	&&
water	206:37	0:0	14	ttmb
op	206:42	0:0	14	<
water	206:44	0:0	14	8
stmts	207:24	207:33	13	
water	207:24	0:0	14	ttmb
op	207:29	0:0	14	=
op	207:31	0:0	14	-
water	207:32	0:0	14	1
water	207:33	0:0	14	;
water	208:20	0:0	12	first_block
op	208:32	0:0	12	=
water	208:34	0:0	12	0
water	208:35	0:0	12	;
water	209:16	0:0	12	}
water	210:12	0:0	8	}
water	211:8	0:0	6	}
else	211:10	224:8	4
stmts	211:15	224:8	5	
water	211:15	0:0	6	{
water	212:12	0:0	6	s
op	212:13	0:0	6	->
water	212:15	0:0	6	mb_intra
op	212:54	0:0	6	=
water	212:56	0:0	6	0
water	212:57	0:0	6	;
water	213:12	0:0	6	s
op	213:13	0:0	6	->
water	213:15	0:0	6	current_picture
op	213:30	0:0	6	.
water	213:31	0:0	6	qscale_table
op	213:43	0:0	6	[
water	213:44	0:0	6	mb_pos
op	213:50	0:0	6	]
op	213:52	0:0	6	=
water	213:54	0:0	6	0
water	213:55	0:0	6	;
for	214:12	217:12	6	(i = 0 ;i < 6;i ++)
forinit	214:17	214:22	7	i = 0 ;
water	214:17	0:0	8	i
op	214:19	0:0	8	=
water	214:21	0:0	8	0
water	214:22	0:0	8	;
cond	214:24	214:28	7	i < 6
water	214:24	0:0	8	i
op	214:26	0:0	8	<
water	214:28	0:0	8	6
forexpr	214:31	214:32	7	i ++
water	214:31	0:0	8	i
op	214:32	0:0	8	++
stmts	214:36	217:12	7	
water	214:36	0:0	8	{
water	215:16	0:0	8	v
op	215:17	0:0	8	->
water	215:19	0:0	8	mb_type
op	215:26	0:0	8	[
water	215:27	0:0	8	0
op	215:28	0:0	8	]
op	215:29	0:0	8	[
water	215:30	0:0	8	s
op	215:31	0:0	8	->
water	215:33	0:0	8	block_index
op	215:44	0:0	8	[
water	215:45	0:0	8	i
op	215:46	0:0	8	]
op	215:47	0:0	8	]
op	215:49	0:0	8	=
water	215:51	0:0	8	0
water	215:52	0:0	8	;
water	216:16	0:0	8	s
op	216:17	0:0	8	->
water	216:19	0:0	8	dc_val
op	216:25	0:0	8	[
water	216:26	0:0	8	0
op	216:27	0:0	8	]
op	216:28	0:0	8	[
water	216:29	0:0	8	s
op	216:30	0:0	8	->
water	216:32	0:0	8	block_index
op	216:43	0:0	8	[
water	216:44	0:0	8	i
op	216:45	0:0	8	]
op	216:46	0:0	8	]
op	216:49	0:0	8	=
water	216:51	0:0	8	0
water	216:52	0:0	8	;
water	217:12	0:0	8	}
for	218:12	221:12	6	(i = 0 ;i < 4;i ++)
forinit	218:17	218:22	7	i = 0 ;
water	218:17	0:0	8	i
op	218:19	0:0	8	=
water	218:21	0:0	8	0
water	218:22	0:0	8	;
cond	218:24	218:28	7	i < 4
water	218:24	0:0	8	i
op	218:26	0:0	8	<
water	218:28	0:0	8	4
forexpr	218:31	218:32	7	i ++
water	218:31	0:0	8	i
op	218:32	0:0	8	++
stmts	218:36	221:12	7	
water	218:36	0:0	8	{
call	219:16	219:89	8	ff_vc1_pred_mv
arg	219:31	219:32	9	v
water	219:31	0:0	10	v
arg	219:34	219:35	9	i
water	219:34	0:0	10	i
arg	219:37	219:38	9	0
water	219:37	0:0	10	0
arg	219:40	219:41	9	0
water	219:40	0:0	10	0
arg	219:43	219:44	9	0
water	219:43	0:0	10	0
arg	219:46	219:56	9	v->range_x
water	219:46	0:0	10	v
op	219:47	0:0	10	->
water	219:49	0:0	10	range_x
arg	219:58	219:68	9	v->range_y
water	219:58	0:0	10	v
op	219:59	0:0	10	->
water	219:61	0:0	10	range_y
arg	219:70	219:83	9	v->mb_type[0]
water	219:70	0:0	10	v
op	219:71	0:0	10	->
water	219:73	0:0	10	mb_type
op	219:80	0:0	10	[
water	219:81	0:0	10	0
op	219:82	0:0	10	]
arg	219:85	219:86	9	0
water	219:85	0:0	10	0
arg	219:88	219:89	9	0
water	219:88	0:0	10	0
water	219:90	0:0	8	;
call	220:16	220:45	8	ff_vc1_mc_4mv_luma
arg	220:35	220:36	9	v
water	220:35	0:0	10	v
arg	220:38	220:39	9	i
water	220:38	0:0	10	i
arg	220:41	220:42	9	0
water	220:41	0:0	10	0
arg	220:44	220:45	9	0
water	220:44	0:0	10	0
water	220:46	0:0	8	;
water	221:12	0:0	8	}
call	222:12	222:37	6	ff_vc1_mc_4mv_chroma
arg	222:33	222:34	7	v
water	222:33	0:0	8	v
arg	222:36	222:37	7	0
water	222:36	0:0	8	0
water	222:38	0:0	6	;
water	223:12	0:0	6	s
op	223:13	0:0	6	->
water	223:15	0:0	6	current_picture
op	223:30	0:0	6	.
water	223:31	0:0	6	qscale_table
op	223:43	0:0	6	[
water	223:44	0:0	6	mb_pos
op	223:50	0:0	6	]
op	223:52	0:0	6	=
water	223:54	0:0	6	0
water	223:55	0:0	6	;
water	224:8	0:0	6	}
water	225:4	0:0	4	}
label	226:0	226:3	2	end :
water	227:4	0:0	2	v
op	227:5	0:0	2	->
water	227:7	0:0	2	cbp
op	227:10	0:0	2	[
water	227:11	0:0	2	s
op	227:12	0:0	2	->
water	227:14	0:0	2	mb_x
op	227:18	0:0	2	]
op	227:25	0:0	2	=
water	227:27	0:0	2	block_cbp
water	227:36	0:0	2	;
water	228:4	0:0	2	v
op	228:5	0:0	2	->
water	228:7	0:0	2	ttblk
op	228:12	0:0	2	[
water	228:13	0:0	2	s
op	228:14	0:0	2	->
water	228:16	0:0	2	mb_x
op	228:20	0:0	2	]
op	228:25	0:0	2	=
water	228:27	0:0	2	block_tt
water	228:35	0:0	2	;
water	229:4	0:0	2	v
op	229:5	0:0	2	->
water	229:7	0:0	2	is_intra
op	229:15	0:0	2	[
water	229:16	0:0	2	s
op	229:17	0:0	2	->
water	229:19	0:0	2	mb_x
op	229:23	0:0	2	]
op	229:25	0:0	2	=
water	229:27	0:0	2	block_intra
water	229:38	0:0	2	;
return	230:4	230:12	2	0
water	230:11	0:0	3	0
