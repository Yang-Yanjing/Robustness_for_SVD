func	1:0	54:0	0	static int	request_frame
params	1:24	0:0	1	
param	1:25	1:46	2	AVFilterLink *	outlink
stmnts	0:0	53:51	1	
decl	3:4	3:39	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	outlink
op	3:34	0:0	2	->
water	3:36	0:0	2	src
decl	4:4	4:34	2	MixContext	*s
op	4:23	0:0	2	=
water	4:25	0:0	2	ctx
op	4:28	0:0	2	->
water	4:30	0:0	2	priv
decl	5:4	5:11	2	int	ret
decl	6:4	6:41	2	int	wanted_samples
water	6:22	0:0	2	,
decl	6:4	6:41	2	int	available_samples
water	7:4	0:0	2	ret
op	7:8	0:0	2	=
call	7:10	7:30	2	calc_active_inputs
arg	7:29	7:30	3	s
water	7:29	0:0	4	s
water	7:31	0:0	2	;
if	8:4	9:18	2	(ret < 0)
cond	8:8	8:14	3	ret < 0
water	8:8	0:0	4	ret
op	8:12	0:0	4	<
water	8:14	0:0	4	0
stmts	9:8	9:18	3	
return	9:8	9:18	4	ret
water	9:15	0:0	5	ret
if	10:4	21:4	2	(s -> input_state [ 0 ] == INPUT_OFF)
cond	10:8	10:29	3	s -> input_state [ 0 ] == INPUT_OFF
water	10:8	0:0	4	s
op	10:9	0:0	4	->
water	10:11	0:0	4	input_state
op	10:22	0:0	4	[
water	10:23	0:0	4	0
op	10:24	0:0	4	]
op	10:26	0:0	4	==
water	10:29	0:0	4	INPUT_OFF
stmts	10:40	21:4	3	
water	10:40	0:0	4	{
water	11:8	0:0	4	ret
op	11:12	0:0	4	=
call	11:14	11:36	4	request_samples
arg	11:30	11:33	5	ctx
water	11:30	0:0	6	ctx
arg	11:35	11:36	5	1
water	11:35	0:0	6	1
water	11:37	0:0	4	;
if	12:8	13:22	4	(ret < 0)
cond	12:12	12:18	5	ret < 0
water	12:12	0:0	6	ret
op	12:16	0:0	6	<
water	12:18	0:0	6	0
stmts	13:12	13:22	5	
return	13:12	13:22	6	ret
water	13:19	0:0	7	ret
water	14:8	0:0	4	ret
op	14:12	0:0	4	=
call	14:14	14:34	4	calc_active_inputs
arg	14:33	14:34	5	s
water	14:33	0:0	6	s
water	14:35	0:0	4	;
if	15:8	16:22	4	(ret < 0)
cond	15:12	15:18	5	ret < 0
water	15:12	0:0	6	ret
op	15:16	0:0	6	<
water	15:18	0:0	6	0
stmts	16:12	16:22	5	
return	16:12	16:22	6	ret
water	16:19	0:0	7	ret
water	17:8	0:0	4	available_samples
op	17:26	0:0	4	=
call	17:28	17:51	4	get_available_samples
arg	17:50	17:51	5	s
water	17:50	0:0	6	s
water	17:52	0:0	4	;
if	18:8	19:34	4	(! available_samples)
cond	18:12	18:13	5	! available_samples
op	18:12	0:0	6	!
water	18:13	0:0	6	available_samples
stmts	19:12	19:34	5	
return	19:12	19:34	6	AVERROR(EAGAIN)
call	19:19	19:33	7	AVERROR
arg	19:27	19:33	8	EAGAIN
water	19:27	0:0	9	EAGAIN
return	20:8	20:55	4	output_frame(outlink,available_samples)
call	20:15	20:54	5	output_frame
arg	20:28	20:35	6	outlink
water	20:28	0:0	7	outlink
arg	20:37	20:54	6	available_samples
water	20:37	0:0	7	available_samples
water	21:4	0:0	4	}
if	22:4	32:4	2	(s -> frame_list -> nb_frames == 0)
cond	22:8	22:36	3	s -> frame_list -> nb_frames == 0
water	22:8	0:0	4	s
op	22:9	0:0	4	->
water	22:11	0:0	4	frame_list
op	22:21	0:0	4	->
water	22:23	0:0	4	nb_frames
op	22:33	0:0	4	==
water	22:36	0:0	4	0
stmts	22:39	32:4	3	
water	22:39	0:0	4	{
water	23:8	0:0	4	ret
op	23:12	0:0	4	=
call	23:14	23:45	4	ff_request_frame
arg	23:31	23:45	5	ctx->inputs[0]
water	23:31	0:0	6	ctx
op	23:34	0:0	6	->
water	23:36	0:0	6	inputs
op	23:42	0:0	6	[
water	23:43	0:0	6	0
op	23:44	0:0	6	]
water	23:46	0:0	4	;
if	24:8	30:8	4	(ret == AVERROR_EOF)
cond	24:12	24:19	5	ret == AVERROR_EOF
water	24:12	0:0	6	ret
op	24:16	0:0	6	==
water	24:19	0:0	6	AVERROR_EOF
stmts	24:32	30:8	5	
water	24:32	0:0	6	{
water	25:12	0:0	6	s
op	25:13	0:0	6	->
water	25:15	0:0	6	input_state
op	25:26	0:0	6	[
water	25:27	0:0	6	0
op	25:28	0:0	6	]
op	25:30	0:0	6	=
water	25:32	0:0	6	INPUT_OFF
water	25:41	0:0	6	;
if	26:12	27:34	6	(s -> nb_inputs == 1)
cond	26:16	26:32	7	s -> nb_inputs == 1
water	26:16	0:0	8	s
op	26:17	0:0	8	->
water	26:19	0:0	8	nb_inputs
op	26:29	0:0	8	==
water	26:32	0:0	8	1
stmts	27:16	27:34	7	
return	27:16	27:34	8	AVERROR_EOF
water	27:23	0:0	9	AVERROR_EOF
else	28:12	29:38	6
stmts	29:16	29:38	7	
return	29:16	29:38	8	AVERROR(EAGAIN)
call	29:23	29:37	9	AVERROR
arg	29:31	29:37	10	EAGAIN
water	29:31	0:0	11	EAGAIN
water	30:8	0:0	6	}
else	30:10	31:22	4
stmts	30:15	31:22	5	
if	30:15	31:22	6	(ret < 0)
cond	30:19	30:25	7	ret < 0
water	30:19	0:0	8	ret
op	30:23	0:0	8	<
water	30:25	0:0	8	0
stmts	31:12	31:22	7	
return	31:12	31:22	8	ret
water	31:19	0:0	9	ret
water	32:4	0:0	4	}
call	33:4	33:43	2	av_assert0
arg	33:15	33:43	3	s->frame_list->nb_frames>0
water	33:15	0:0	4	s
op	33:16	0:0	4	->
water	33:18	0:0	4	frame_list
op	33:28	0:0	4	->
water	33:30	0:0	4	nb_frames
op	33:40	0:0	4	>
water	33:42	0:0	4	0
water	33:44	0:0	2	;
water	34:4	0:0	2	wanted_samples
op	34:19	0:0	2	=
call	34:21	34:61	2	frame_list_next_frame_size
arg	34:48	34:61	3	s->frame_list
water	34:48	0:0	4	s
op	34:49	0:0	4	->
water	34:51	0:0	4	frame_list
water	34:62	0:0	2	;
if	35:4	42:4	2	(s -> active_inputs > 1)
cond	35:8	35:27	3	s -> active_inputs > 1
water	35:8	0:0	4	s
op	35:9	0:0	4	->
water	35:11	0:0	4	active_inputs
op	35:25	0:0	4	>
water	35:27	0:0	4	1
stmts	35:30	42:4	3	
water	35:30	0:0	4	{
water	36:8	0:0	4	ret
op	36:12	0:0	4	=
call	36:14	36:49	4	request_samples
arg	36:30	36:33	5	ctx
water	36:30	0:0	6	ctx
arg	36:35	36:49	5	wanted_samples
water	36:35	0:0	6	wanted_samples
water	36:50	0:0	4	;
if	37:8	38:22	4	(ret < 0)
cond	37:12	37:18	5	ret < 0
water	37:12	0:0	6	ret
op	37:16	0:0	6	<
water	37:18	0:0	6	0
stmts	38:12	38:22	5	
return	38:12	38:22	6	ret
water	38:19	0:0	7	ret
water	39:8	0:0	4	ret
op	39:12	0:0	4	=
call	39:14	39:34	4	calc_active_inputs
arg	39:33	39:34	5	s
water	39:33	0:0	6	s
water	39:35	0:0	4	;
if	40:8	41:22	4	(ret < 0)
cond	40:12	40:18	5	ret < 0
water	40:12	0:0	6	ret
op	40:16	0:0	6	<
water	40:18	0:0	6	0
stmts	41:12	41:22	5	
return	41:12	41:22	6	ret
water	41:19	0:0	7	ret
water	42:4	0:0	4	}
if	43:4	48:4	2	(s -> active_inputs > 1)
cond	43:8	43:27	3	s -> active_inputs > 1
water	43:8	0:0	4	s
op	43:9	0:0	4	->
water	43:11	0:0	4	active_inputs
op	43:25	0:0	4	>
water	43:27	0:0	4	1
stmts	43:30	48:4	3	
water	43:30	0:0	4	{
water	44:8	0:0	4	available_samples
op	44:26	0:0	4	=
call	44:28	44:51	4	get_available_samples
arg	44:50	44:51	5	s
water	44:50	0:0	6	s
water	44:52	0:0	4	;
if	45:8	46:34	4	(! available_samples)
cond	45:12	45:13	5	! available_samples
op	45:12	0:0	6	!
water	45:13	0:0	6	available_samples
stmts	46:12	46:34	5	
return	46:12	46:34	6	AVERROR(EAGAIN)
call	46:19	46:33	7	AVERROR
arg	46:27	46:33	8	EAGAIN
water	46:27	0:0	9	EAGAIN
water	47:8	0:0	4	available_samples
op	47:26	0:0	4	=
call	47:28	47:67	4	FFMIN
arg	47:34	47:51	5	available_samples
water	47:34	0:0	6	available_samples
arg	47:53	47:67	5	wanted_samples
water	47:53	0:0	6	wanted_samples
water	47:68	0:0	4	;
water	48:4	0:0	4	}
else	48:6	50:4	2
stmts	48:11	50:4	3	
water	48:11	0:0	4	{
water	49:8	0:0	4	available_samples
op	49:26	0:0	4	=
water	49:28	0:0	4	wanted_samples
water	49:42	0:0	4	;
water	50:4	0:0	4	}
water	51:4	0:0	2	s
op	51:5	0:0	2	->
water	51:7	0:0	2	next_pts
op	51:16	0:0	2	=
call	51:18	51:51	2	frame_list_next_pts
arg	51:38	51:51	3	s->frame_list
water	51:38	0:0	4	s
op	51:39	0:0	4	->
water	51:41	0:0	4	frame_list
water	51:52	0:0	2	;
call	52:4	52:62	2	frame_list_remove_samples
arg	52:30	52:43	3	s->frame_list
water	52:30	0:0	4	s
op	52:31	0:0	4	->
water	52:33	0:0	4	frame_list
arg	52:45	52:62	3	available_samples
water	52:45	0:0	4	available_samples
water	52:63	0:0	2	;
return	53:4	53:51	2	output_frame(outlink,available_samples)
call	53:11	53:50	3	output_frame
arg	53:24	53:31	4	outlink
water	53:24	0:0	5	outlink
arg	53:33	53:50	4	available_samples
water	53:33	0:0	5	available_samples
