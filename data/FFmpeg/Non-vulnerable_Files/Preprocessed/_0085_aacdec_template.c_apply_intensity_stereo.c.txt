func	1:0	44:0	0	static void	apply_intensity_stereo
params	1:34	0:0	1	
param	1:35	1:49	2	AACContext *	ac
param	2:35	2:54	2	ChannelElement *	cpe
param	2:56	2:70	2	int	ms_present
stmnts	0:0	43:4	1	
decl	4:4	4:56	2	const IndividualChannelStream	*ics
op	4:39	0:0	2	=
op	4:41	0:0	2	&
water	4:42	0:0	2	cpe
op	4:45	0:0	2	->
water	4:47	0:0	2	ch
op	4:49	0:0	2	[
water	4:50	0:0	2	1
op	4:51	0:0	2	]
op	4:52	0:0	2	.
water	4:53	0:0	2	ics
decl	5:4	5:52	2	SingleChannelElement	*sce1
op	5:39	0:0	2	=
op	5:41	0:0	2	&
water	5:42	0:0	2	cpe
op	5:45	0:0	2	->
water	5:47	0:0	2	ch
op	5:49	0:0	2	[
water	5:50	0:0	2	1
op	5:51	0:0	2	]
decl	6:4	6:67	2	INTFLOAT	*coef0
op	6:20	0:0	2	=
water	6:22	0:0	2	cpe
op	6:25	0:0	2	->
water	6:27	0:0	2	ch
op	6:29	0:0	2	[
water	6:30	0:0	2	0
op	6:31	0:0	2	]
op	6:32	0:0	2	.
water	6:33	0:0	2	coeffs
water	6:39	0:0	2	,
decl	6:4	6:67	2	INTFLOAT	*coef1
op	6:48	0:0	2	=
water	6:50	0:0	2	cpe
op	6:53	0:0	2	->
water	6:55	0:0	2	ch
op	6:57	0:0	2	[
water	6:58	0:0	2	1
op	6:59	0:0	2	]
op	6:60	0:0	2	.
water	6:61	0:0	2	coeffs
decl	7:4	7:45	2	const uint16_t	*offsets
op	7:28	0:0	2	=
water	7:30	0:0	2	ics
op	7:33	0:0	2	->
water	7:35	0:0	2	swb_offset
decl	8:4	8:28	2	int	g
water	8:9	0:0	2	,
decl	8:4	8:28	2	int	group
water	8:16	0:0	2	,
decl	8:4	8:28	2	int	i
water	8:19	0:0	2	,
decl	8:4	8:28	2	int	idx
op	8:25	0:0	2	=
water	8:27	0:0	2	0
decl	9:4	9:9	2	int	c
decl	10:4	10:18	2	INTFLOAT	scale
for	11:4	43:4	2	(g = 0 ;g < ics -> num_window_groups;g ++)
forinit	11:9	11:14	3	g = 0 ;
water	11:9	0:0	4	g
op	11:11	0:0	4	=
water	11:13	0:0	4	0
water	11:14	0:0	4	;
cond	11:16	11:25	3	g < ics -> num_window_groups
water	11:16	0:0	4	g
op	11:18	0:0	4	<
water	11:20	0:0	4	ics
op	11:23	0:0	4	->
water	11:25	0:0	4	num_window_groups
forexpr	11:44	11:45	3	g ++
water	11:44	0:0	4	g
op	11:45	0:0	4	++
stmts	11:49	43:4	3	
water	11:49	0:0	4	{
for	12:8	40:8	4	(i = 0 ;i < ics -> max_sfb;)
forinit	12:13	12:18	5	i = 0 ;
water	12:13	0:0	6	i
op	12:15	0:0	6	=
water	12:17	0:0	6	0
water	12:18	0:0	6	;
cond	12:20	12:29	5	i < ics -> max_sfb
water	12:20	0:0	6	i
op	12:22	0:0	6	<
water	12:24	0:0	6	ics
op	12:27	0:0	6	->
water	12:29	0:0	6	max_sfb
forexpr	0:0	0:0	5	
stmts	12:39	40:8	5	
water	12:39	0:0	6	{
if	13:12	35:12	6	(sce1 -> band_type [ idx ] == INTENSITY_BT || sce1 -> band_type [ idx ] == INTENSITY_BT2)
cond	13:16	14:40	7	sce1 -> band_type [ idx ] == INTENSITY_BT || sce1 -> band_type [ idx ] == INTENSITY_BT2
water	13:16	0:0	8	sce1
op	13:20	0:0	8	->
water	13:22	0:0	8	band_type
op	13:31	0:0	8	[
water	13:32	0:0	8	idx
op	13:35	0:0	8	]
op	13:37	0:0	8	==
water	13:40	0:0	8	INTENSITY_BT
op	13:53	0:0	8	||
water	14:16	0:0	8	sce1
op	14:20	0:0	8	->
water	14:22	0:0	8	band_type
op	14:31	0:0	8	[
water	14:32	0:0	8	idx
op	14:35	0:0	8	]
op	14:37	0:0	8	==
water	14:40	0:0	8	INTENSITY_BT2
stmts	14:55	35:12	7	
water	14:55	0:0	8	{
decl	15:16	15:67	8	const int	bt_run_end
op	15:37	0:0	8	=
water	15:39	0:0	8	sce1
op	15:43	0:0	8	->
water	15:45	0:0	8	band_type_run_end
op	15:62	0:0	8	[
water	15:63	0:0	8	idx
op	15:66	0:0	8	]
for	16:16	34:16	8	(;i < bt_run_end;i ++ , idx ++)
forinit	16:21	16:21	9	;
water	16:21	0:0	10	;
cond	16:23	16:27	9	i < bt_run_end
water	16:23	0:0	10	i
op	16:25	0:0	10	<
water	16:27	0:0	10	bt_run_end
forexpr	16:39	16:47	9	i ++ , idx ++
water	16:39	0:0	10	i
op	16:40	0:0	10	++
water	16:42	0:0	10	,
water	16:44	0:0	10	idx
op	16:47	0:0	10	++
stmts	16:51	34:16	9	
water	16:51	0:0	10	{
water	17:20	0:0	10	c
op	17:22	0:0	10	=
op	17:24	0:0	10	-
water	17:25	0:0	10	1
op	17:27	0:0	10	+
water	17:29	0:0	10	2
op	17:31	0:0	10	*
water	17:33	0:0	10	(
water	17:34	0:0	10	sce1
op	17:38	0:0	10	->
water	17:40	0:0	10	band_type
op	17:49	0:0	10	[
water	17:50	0:0	10	idx
op	17:53	0:0	10	]
op	17:55	0:0	10	-
water	17:57	0:0	10	14
water	17:59	0:0	10	)
water	17:60	0:0	10	;
if	18:20	19:54	10	(ms_present)
cond	18:24	18:24	11	ms_present
water	18:24	0:0	12	ms_present
stmts	19:24	19:54	11	
water	19:24	0:0	12	c
op	19:26	0:0	12	*=
water	19:29	0:0	12	1
op	19:31	0:0	12	-
water	19:33	0:0	12	2
op	19:35	0:0	12	*
water	19:37	0:0	12	cpe
op	19:40	0:0	12	->
water	19:42	0:0	12	ms_mask
op	19:49	0:0	12	[
water	19:50	0:0	12	idx
op	19:53	0:0	12	]
water	19:54	0:0	12	;
water	20:20	0:0	10	scale
op	20:26	0:0	10	=
water	20:28	0:0	10	c
op	20:30	0:0	10	*
water	20:32	0:0	10	sce1
op	20:36	0:0	10	->
water	20:38	0:0	10	sf
op	20:40	0:0	10	[
water	20:41	0:0	10	idx
op	20:44	0:0	10	]
water	20:45	0:0	10	;
for	21:20	27:66	10	(group = 0 ;group < ics -> group_len [ g ];group ++)
forinit	21:25	21:34	11	group = 0 ;
water	21:25	0:0	12	group
op	21:31	0:0	12	=
water	21:33	0:0	12	0
water	21:34	0:0	12	;
cond	21:36	21:60	11	group < ics -> group_len [ g ]
water	21:36	0:0	12	group
op	21:42	0:0	12	<
water	21:44	0:0	12	ics
op	21:47	0:0	12	->
water	21:49	0:0	12	group_len
op	21:58	0:0	12	[
water	21:59	0:0	12	g
op	21:60	0:0	12	]
forexpr	21:63	21:68	11	group ++
water	21:63	0:0	12	group
op	21:68	0:0	12	++
stmts	23:24	27:66	11	
call	23:24	27:65	12	ac->subband_scale
arg	23:42	23:74	13	coef1+group*128+offsets[i]
water	23:42	0:0	14	coef1
op	23:48	0:0	14	+
water	23:50	0:0	14	group
op	23:56	0:0	14	*
water	23:58	0:0	14	128
op	23:62	0:0	14	+
water	23:64	0:0	14	offsets
op	23:71	0:0	14	[
water	23:72	0:0	14	i
op	23:73	0:0	14	]
arg	24:38	24:70	13	coef0+group*128+offsets[i]
water	24:38	0:0	14	coef0
op	24:44	0:0	14	+
water	24:46	0:0	14	group
op	24:52	0:0	14	*
water	24:54	0:0	14	128
op	24:58	0:0	14	+
water	24:60	0:0	14	offsets
op	24:67	0:0	14	[
water	24:68	0:0	14	i
op	24:69	0:0	14	]
arg	25:38	25:43	13	scale
water	25:38	0:0	14	scale
arg	26:38	26:40	13	23
water	26:38	0:0	14	23
arg	27:38	27:65	13	offsets[i+1]-offsets[i]
water	27:38	0:0	14	offsets
op	27:45	0:0	14	[
water	27:46	0:0	14	i
op	27:48	0:0	14	+
water	27:50	0:0	14	1
op	27:51	0:0	14	]
op	27:53	0:0	14	-
water	27:55	0:0	14	offsets
op	27:62	0:0	14	[
water	27:63	0:0	14	i
op	27:64	0:0	14	]
water	27:66	0:0	12	;
call	29:24	32:79	10	ac->fdsp->vector_fmul_scalar
arg	29:53	29:85	11	coef1+group*128+offsets[i]
water	29:53	0:0	12	coef1
op	29:59	0:0	12	+
water	29:61	0:0	12	group
op	29:67	0:0	12	*
water	29:69	0:0	12	128
op	29:73	0:0	12	+
water	29:75	0:0	12	offsets
op	29:82	0:0	12	[
water	29:83	0:0	12	i
op	29:84	0:0	12	]
arg	30:52	30:84	11	coef0+group*128+offsets[i]
water	30:52	0:0	12	coef0
op	30:58	0:0	12	+
water	30:60	0:0	12	group
op	30:66	0:0	12	*
water	30:68	0:0	12	128
op	30:72	0:0	12	+
water	30:74	0:0	12	offsets
op	30:81	0:0	12	[
water	30:82	0:0	12	i
op	30:83	0:0	12	]
arg	31:52	31:57	11	scale
water	31:52	0:0	12	scale
arg	32:52	32:79	11	offsets[i+1]-offsets[i]
water	32:52	0:0	12	offsets
op	32:59	0:0	12	[
water	32:60	0:0	12	i
op	32:62	0:0	12	+
water	32:64	0:0	12	1
op	32:65	0:0	12	]
op	32:67	0:0	12	-
water	32:69	0:0	12	offsets
op	32:76	0:0	12	[
water	32:77	0:0	12	i
op	32:78	0:0	12	]
water	32:80	0:0	10	;
water	34:16	0:0	10	}
water	35:12	0:0	8	}
else	35:14	39:12	6
stmts	35:19	39:12	7	
water	35:19	0:0	8	{
decl	36:16	36:61	8	int	bt_run_end
op	36:31	0:0	8	=
water	36:33	0:0	8	sce1
op	36:37	0:0	8	->
water	36:39	0:0	8	band_type_run_end
op	36:56	0:0	8	[
water	36:57	0:0	8	idx
op	36:60	0:0	8	]
water	37:16	0:0	8	idx
op	37:20	0:0	8	+=
water	37:23	0:0	8	bt_run_end
op	37:34	0:0	8	-
water	37:36	0:0	8	i
water	37:37	0:0	8	;
water	38:16	0:0	8	i
op	38:21	0:0	8	=
water	38:23	0:0	8	bt_run_end
water	38:33	0:0	8	;
water	39:12	0:0	8	}
water	40:8	0:0	6	}
water	41:8	0:0	4	coef0
op	41:14	0:0	4	+=
water	41:17	0:0	4	ics
op	41:20	0:0	4	->
water	41:22	0:0	4	group_len
op	41:31	0:0	4	[
water	41:32	0:0	4	g
op	41:33	0:0	4	]
op	41:35	0:0	4	*
water	41:37	0:0	4	128
water	41:40	0:0	4	;
water	42:8	0:0	4	coef1
op	42:14	0:0	4	+=
water	42:17	0:0	4	ics
op	42:20	0:0	4	->
water	42:22	0:0	4	group_len
op	42:31	0:0	4	[
water	42:32	0:0	4	g
op	42:33	0:0	4	]
op	42:35	0:0	4	*
water	42:37	0:0	4	128
water	42:40	0:0	4	;
water	43:4	0:0	4	}
