func	1:0	20:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:60	2	AVFrame *	frame
stmnts	0:0	19:54	1	
decl	3:4	3:38	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	inlink
op	3:33	0:0	2	->
water	3:35	0:0	2	dst
decl	4:4	4:35	2	AudioEchoContext	*s
op	4:24	0:0	2	=
water	4:26	0:0	2	ctx
op	4:29	0:0	2	->
water	4:31	0:0	2	priv
decl	5:4	5:22	2	AVFrame	*out_frame
if	6:4	8:4	2	(av_frame_is_writable (frame ))
cond	6:8	6:34	3	av_frame_is_writable (frame )
call	6:8	6:34	4	av_frame_is_writable
arg	6:29	6:34	5	frame
water	6:29	0:0	6	frame
stmts	6:37	8:4	3	
water	6:37	0:0	4	{
water	7:8	0:0	4	out_frame
op	7:18	0:0	4	=
water	7:20	0:0	4	frame
water	7:25	0:0	4	;
water	8:4	0:0	4	}
else	8:6	13:4	2
stmts	8:11	13:4	3	
water	8:11	0:0	4	{
water	9:8	0:0	4	out_frame
op	9:18	0:0	4	=
call	9:20	9:65	4	ff_get_audio_buffer
arg	9:40	9:46	5	inlink
water	9:40	0:0	6	inlink
arg	9:48	9:65	5	frame->nb_samples
water	9:48	0:0	6	frame
op	9:53	0:0	6	->
water	9:55	0:0	6	nb_samples
water	9:66	0:0	4	;
if	10:8	11:34	4	(! out_frame)
cond	10:12	10:13	5	! out_frame
op	10:12	0:0	6	!
water	10:13	0:0	6	out_frame
stmts	11:12	11:34	5	
return	11:12	11:34	6	AVERROR(ENOMEM)
call	11:19	11:33	7	AVERROR
arg	11:27	11:33	8	ENOMEM
water	11:27	0:0	9	ENOMEM
call	12:8	12:44	4	av_frame_copy_props
arg	12:28	12:37	5	out_frame
water	12:28	0:0	6	out_frame
arg	12:39	12:44	5	frame
water	12:39	0:0	6	frame
water	12:45	0:0	4	;
water	13:4	0:0	4	}
call	14:4	15:55	2	s->echo_samples
arg	14:20	14:21	3	s
water	14:20	0:0	4	s
arg	14:23	14:35	3	s->delayptrs
water	14:23	0:0	4	s
op	14:24	0:0	4	->
water	14:26	0:0	4	delayptrs
arg	14:37	14:57	3	frame->extended_data
water	14:37	0:0	4	frame
op	14:42	0:0	4	->
water	14:44	0:0	4	extended_data
arg	14:59	14:83	3	out_frame->extended_data
water	14:59	0:0	4	out_frame
op	14:68	0:0	4	->
water	14:70	0:0	4	extended_data
arg	15:20	15:37	3	frame->nb_samples
water	15:20	0:0	4	frame
op	15:25	0:0	4	->
water	15:27	0:0	4	nb_samples
arg	15:39	15:55	3	inlink->channels
water	15:39	0:0	4	inlink
op	15:45	0:0	4	->
water	15:47	0:0	4	channels
water	15:56	0:0	2	;
water	16:4	0:0	2	s
op	16:5	0:0	2	->
water	16:7	0:0	2	next_pts
op	16:16	0:0	2	=
water	16:18	0:0	2	frame
op	16:23	0:0	2	->
water	16:25	0:0	2	pts
op	16:29	0:0	2	+
call	16:31	16:118	2	av_rescale_q
arg	16:44	16:61	3	frame->nb_samples
water	16:44	0:0	4	frame
op	16:49	0:0	4	->
water	16:51	0:0	4	nb_samples
arg	16:63	16:99	3	(AVRational){1,inlink->sample_rate}
water	16:63	0:0	4	(
water	16:64	0:0	4	AVRational
water	16:74	0:0	4	)
water	16:75	0:0	4	{
water	16:76	0:0	4	1
water	16:77	0:0	4	,
water	16:79	0:0	4	inlink
op	16:85	0:0	4	->
water	16:87	0:0	4	sample_rate
water	16:98	0:0	4	}
arg	16:101	16:118	3	inlink->time_base
water	16:101	0:0	4	inlink
op	16:107	0:0	4	->
water	16:109	0:0	4	time_base
water	16:119	0:0	2	;
if	17:4	18:29	2	(frame != out_frame)
cond	17:8	17:17	3	frame != out_frame
water	17:8	0:0	4	frame
op	17:14	0:0	4	!=
water	17:17	0:0	4	out_frame
stmts	18:8	18:29	3	
call	18:8	18:28	4	av_frame_free
arg	18:22	18:28	5	&frame
op	18:22	0:0	6	&
water	18:23	0:0	6	frame
water	18:29	0:0	4	;
return	19:4	19:54	2	ff_filter_frame(ctx->outputs[0],out_frame)
call	19:11	19:53	3	ff_filter_frame
arg	19:27	19:42	4	ctx->outputs[0]
water	19:27	0:0	5	ctx
op	19:30	0:0	5	->
water	19:32	0:0	5	outputs
op	19:39	0:0	5	[
water	19:40	0:0	5	0
op	19:41	0:0	5	]
arg	19:44	19:53	4	out_frame
water	19:44	0:0	5	out_frame
