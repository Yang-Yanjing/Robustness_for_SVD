func	1:0	42:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:31	2	char *	argv[]
stmnts	0:0	41:14	1	
decl	3:4	3:24	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:24	2	int	seed
water	3:15	0:0	2	,
decl	3:4	3:24	2	int	ret
op	3:21	0:0	2	=
water	3:23	0:0	2	0
if	4:4	7:4	2	(! tests [ 0 ] . func || ! cpus [ 0 ] . flag)
cond	4:8	4:35	3	! tests [ 0 ] . func || ! cpus [ 0 ] . flag
op	4:8	0:0	4	!
water	4:9	0:0	4	tests
op	4:14	0:0	4	[
water	4:15	0:0	4	0
op	4:16	0:0	4	]
op	4:17	0:0	4	.
water	4:18	0:0	4	func
op	4:23	0:0	4	||
op	4:26	0:0	4	!
water	4:27	0:0	4	cpus
op	4:31	0:0	4	[
water	4:32	0:0	4	0
op	4:33	0:0	4	]
op	4:34	0:0	4	.
water	4:35	0:0	4	flag
stmts	4:41	7:4	3	
water	4:41	0:0	4	{
call	5:8	5:57	4	fprintf
arg	5:16	5:22	5	stderr
water	5:16	0:0	6	stderr
arg	5:24	5:57	5	"checkasm: no tests to perform\n"
water	5:24	0:0	6	"checkasm: no tests to perform\n"
water	5:58	0:0	4	;
return	6:8	6:16	4	0
water	6:15	0:0	5	0
water	7:4	0:0	4	}
if	8:4	20:4	2	(argc > 1 && !strncmp (argv [ 1 ] ,"--bench" ,7 ))
cond	8:8	8:50	3	argc > 1 && !strncmp (argv [ 1 ] ,"--bench" ,7 )
water	8:8	0:0	4	argc
op	8:13	0:0	4	>
water	8:15	0:0	4	1
op	8:17	0:0	4	&&
op	8:20	0:0	4	!
call	8:21	8:50	4	strncmp
arg	8:29	8:36	5	argv[1]
water	8:29	0:0	6	argv
op	8:33	0:0	6	[
water	8:34	0:0	6	1
op	8:35	0:0	6	]
arg	8:38	8:47	5	"--bench"
water	8:38	0:0	6	"--bench"
arg	8:49	8:50	5	7
water	8:49	0:0	6	7
stmts	8:53	20:4	3	
water	8:53	0:0	4	{
call	10:8	10:77	4	fprintf
arg	10:16	10:22	5	stderr
water	10:16	0:0	6	stderr
arg	10:24	10:77	5	"checkasm: --bench is not supported on your system\n"
water	10:24	0:0	6	"checkasm: --bench is not supported on your system\n"
water	10:78	0:0	4	;
return	11:8	11:16	4	1
water	11:15	0:0	5	1
if	13:8	16:8	4	(argv [ 1 ] [ 7 ] == '=')
cond	13:12	13:26	5	argv [ 1 ] [ 7 ] == '='
water	13:12	0:0	6	argv
op	13:16	0:0	6	[
water	13:17	0:0	6	1
op	13:18	0:0	6	]
op	13:19	0:0	6	[
water	13:20	0:0	6	7
op	13:21	0:0	6	]
op	13:23	0:0	6	==
water	13:26	0:0	6	'='
stmts	13:31	16:8	5	
water	13:31	0:0	6	{
water	14:12	0:0	6	state
op	14:17	0:0	6	.
water	14:18	0:0	6	bench_pattern
op	14:32	0:0	6	=
water	14:34	0:0	6	argv
op	14:38	0:0	6	[
water	14:39	0:0	6	1
op	14:40	0:0	6	]
op	14:42	0:0	6	+
water	14:44	0:0	6	8
water	14:45	0:0	6	;
water	15:12	0:0	6	state
op	15:17	0:0	6	.
water	15:18	0:0	6	bench_pattern_len
op	15:36	0:0	6	=
call	15:38	15:64	6	strlen
arg	15:45	15:64	7	state.bench_pattern
water	15:45	0:0	8	state
op	15:50	0:0	8	.
water	15:51	0:0	8	bench_pattern
water	15:65	0:0	6	;
water	16:8	0:0	6	}
else	16:10	17:36	4
stmts	17:12	17:36	5	
water	17:12	0:0	6	state
op	17:17	0:0	6	.
water	17:18	0:0	6	bench_pattern
op	17:32	0:0	6	=
water	17:34	0:0	6	""
water	17:36	0:0	6	;
water	18:8	0:0	4	argc
op	18:12	0:0	4	--
water	18:14	0:0	4	;
water	19:8	0:0	4	argv
op	19:12	0:0	4	++
water	19:14	0:0	4	;
water	20:4	0:0	4	}
water	21:4	0:0	2	seed
op	21:9	0:0	2	=
water	21:11	0:0	2	(
water	21:12	0:0	2	argc
op	21:17	0:0	2	>
water	21:19	0:0	2	1
water	21:20	0:0	2	)
water	21:22	0:0	2	?
call	21:24	21:36	2	atoi
arg	21:29	21:36	3	argv[1]
water	21:29	0:0	4	argv
op	21:33	0:0	4	[
water	21:34	0:0	4	1
op	21:35	0:0	4	]
water	21:38	0:0	2	:
call	21:40	21:59	2	av_get_random_seed
water	21:60	0:0	2	;
call	22:4	22:60	2	fprintf
arg	22:12	22:18	3	stderr
water	22:12	0:0	4	stderr
arg	22:20	22:54	3	"checkasm: using random seed %u\n"
water	22:20	0:0	4	"checkasm: using random seed %u\n"
arg	22:56	22:60	3	seed
water	22:56	0:0	4	seed
water	22:61	0:0	2	;
call	23:4	23:35	2	av_lfg_init
arg	23:16	23:29	3	&checkasm_lfg
op	23:16	0:0	4	&
water	23:17	0:0	4	checkasm_lfg
arg	23:31	23:35	3	seed
water	23:31	0:0	4	seed
water	23:36	0:0	2	;
call	24:4	24:26	2	check_cpu_flag
arg	24:19	24:23	3	NULL
water	24:19	0:0	4	NULL
arg	24:25	24:26	3	0
water	24:25	0:0	4	0
water	24:27	0:0	2	;
for	25:4	26:50	2	(i = 0 ;cpus [ i ] . flag;i ++)
forinit	25:9	25:14	3	i = 0 ;
water	25:9	0:0	4	i
op	25:11	0:0	4	=
water	25:13	0:0	4	0
water	25:14	0:0	4	;
cond	25:16	25:24	3	cpus [ i ] . flag
water	25:16	0:0	4	cpus
op	25:20	0:0	4	[
water	25:21	0:0	4	i
op	25:22	0:0	4	]
op	25:23	0:0	4	.
water	25:24	0:0	4	flag
forexpr	25:30	25:31	3	i ++
water	25:30	0:0	4	i
op	25:31	0:0	4	++
stmts	26:8	26:50	3	
call	26:8	26:49	4	check_cpu_flag
arg	26:23	26:35	5	cpus[i].name
water	26:23	0:0	6	cpus
op	26:27	0:0	6	[
water	26:28	0:0	6	i
op	26:29	0:0	6	]
op	26:30	0:0	6	.
water	26:31	0:0	6	name
arg	26:37	26:49	5	cpus[i].flag
water	26:37	0:0	6	cpus
op	26:41	0:0	6	[
water	26:42	0:0	6	i
op	26:43	0:0	6	]
op	26:44	0:0	6	.
water	26:45	0:0	6	flag
water	26:50	0:0	4	;
if	27:4	30:4	2	(state . num_failed)
cond	27:8	27:14	3	state . num_failed
water	27:8	0:0	4	state
op	27:13	0:0	4	.
water	27:14	0:0	4	num_failed
stmts	27:26	30:4	3	
water	27:26	0:0	4	{
call	28:8	28:101	4	fprintf
arg	28:16	28:22	5	stderr
water	28:16	0:0	6	stderr
arg	28:24	28:64	5	"checkasm: %d of %d tests have failed\n"
water	28:24	0:0	6	"checkasm: %d of %d tests have failed\n"
arg	28:66	28:82	5	state.num_failed
water	28:66	0:0	6	state
op	28:71	0:0	6	.
water	28:72	0:0	6	num_failed
arg	28:84	28:101	5	state.num_checked
water	28:84	0:0	6	state
op	28:89	0:0	6	.
water	28:90	0:0	6	num_checked
water	28:102	0:0	4	;
water	29:8	0:0	4	ret
op	29:12	0:0	4	=
water	29:14	0:0	4	1
water	29:15	0:0	4	;
water	30:4	0:0	4	}
else	30:6	39:4	2
stmts	30:11	39:4	3	
water	30:11	0:0	4	{
call	31:8	31:76	4	fprintf
arg	31:16	31:22	5	stderr
water	31:16	0:0	6	stderr
arg	31:24	31:57	5	"checkasm: all %d tests passed\n"
water	31:24	0:0	6	"checkasm: all %d tests passed\n"
arg	31:59	31:76	5	state.num_checked
water	31:59	0:0	6	state
op	31:64	0:0	6	.
water	31:65	0:0	6	num_checked
water	31:77	0:0	4	;
if	33:8	37:8	4	(state . bench_pattern)
cond	33:12	33:18	5	state . bench_pattern
water	33:12	0:0	6	state
op	33:17	0:0	6	.
water	33:18	0:0	6	bench_pattern
stmts	33:33	37:8	5	
water	33:33	0:0	6	{
water	34:12	0:0	6	state
op	34:17	0:0	6	.
water	34:18	0:0	6	nop_time
op	34:27	0:0	6	=
call	34:29	34:46	6	measure_nop_time
water	34:47	0:0	6	;
call	35:12	35:71	6	printf
arg	35:19	35:33	7	"nop: %d.%d\n"
water	35:19	0:0	8	"nop: %d.%d\n"
arg	35:35	35:52	7	state.nop_time/10
water	35:35	0:0	8	state
op	35:40	0:0	8	.
water	35:41	0:0	8	nop_time
op	35:49	0:0	8	/
water	35:50	0:0	8	10
arg	35:54	35:71	7	state.nop_time%10
water	35:54	0:0	8	state
op	35:59	0:0	8	.
water	35:60	0:0	8	nop_time
op	35:68	0:0	8	%
water	35:69	0:0	8	10
water	35:72	0:0	6	;
call	36:12	36:36	6	print_benchs
arg	36:25	36:36	7	state.funcs
water	36:25	0:0	8	state
op	36:30	0:0	8	.
water	36:31	0:0	8	funcs
water	36:37	0:0	6	;
water	37:8	0:0	6	}
water	39:4	0:0	4	}
call	40:4	40:33	2	destroy_func_tree
arg	40:22	40:33	3	state.funcs
water	40:22	0:0	4	state
op	40:27	0:0	4	.
water	40:28	0:0	4	funcs
water	40:34	0:0	2	;
return	41:4	41:14	2	ret
water	41:11	0:0	3	ret
