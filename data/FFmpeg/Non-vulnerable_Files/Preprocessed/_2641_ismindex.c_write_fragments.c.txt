func	1:0	51:0	0	static int	write_fragments
params	1:26	0:0	1	
param	1:27	1:48	2	struct Tracks *	tracks
param	1:50	1:65	2	int	start_index
param	2:27	2:42	2	AVIOContext *	in
param	2:44	2:64	2	const char *	basename
param	3:27	3:36	2	int	split
param	3:38	3:46	2	int	ismf
param	3:48	3:73	2	const char *	output_prefix
stmnts	0:0	50:14	1	
decl	5:4	5:53	2	char	dirname[2048]
water	5:22	0:0	2	,
decl	5:4	5:53	2	char	filename[2048]
water	5:38	0:0	2	,
decl	5:4	5:53	2	char	idxname[2048]
decl	6:4	6:35	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:35	2	int	j
water	6:12	0:0	2	,
decl	6:4	6:35	2	int	ret
op	6:18	0:0	2	=
water	6:20	0:0	2	0
water	6:21	0:0	2	,
decl	6:4	6:35	2	int	fragment_ret
decl	7:4	7:20	2	FILE	*out
op	7:14	0:0	2	=
water	7:16	0:0	2	NULL
if	8:4	16:4	2	(ismf)
cond	8:8	8:8	3	ismf
water	8:8	0:0	4	ismf
stmts	8:14	16:4	3	
water	8:14	0:0	4	{
call	9:8	9:79	4	snprintf
arg	9:17	9:24	5	idxname
water	9:17	0:0	6	idxname
arg	9:26	9:41	5	sizeof(idxname)
op	9:26	0:0	6	sizeof
water	9:32	0:0	6	(
water	9:33	0:0	6	idxname
water	9:40	0:0	6	)
arg	9:43	9:54	5	"%s%s.ismf"
water	9:43	0:0	6	"%s%s.ismf"
arg	9:56	9:69	5	output_prefix
water	9:56	0:0	6	output_prefix
arg	9:71	9:79	5	basename
water	9:71	0:0	6	basename
water	9:80	0:0	4	;
water	10:8	0:0	4	out
op	10:12	0:0	4	=
call	10:14	10:32	4	fopen
arg	10:20	10:27	5	idxname
water	10:20	0:0	6	idxname
arg	10:29	10:32	5	"w"
water	10:29	0:0	6	"w"
water	10:33	0:0	4	;
if	11:8	15:8	4	(! out)
cond	11:12	11:13	5	! out
op	11:12	0:0	6	!
water	11:13	0:0	6	out
stmts	11:18	15:8	5	
water	11:18	0:0	6	{
water	12:12	0:0	6	ret
op	12:16	0:0	6	=
call	12:18	12:31	6	AVERROR
arg	12:26	12:31	7	errno
water	12:26	0:0	8	errno
water	12:32	0:0	6	;
call	13:12	13:26	6	perror
arg	13:19	13:26	7	idxname
water	13:19	0:0	8	idxname
water	13:27	0:0	6	;
goto	14:12	14:21	6	fail
water	14:17	0:0	7	fail
water	15:8	0:0	6	}
water	16:4	0:0	4	}
for	17:4	46:4	2	(i = start_index ;i < tracks -> nb_tracks;i ++)
forinit	17:9	17:24	3	i = start_index ;
water	17:9	0:0	4	i
op	17:11	0:0	4	=
water	17:13	0:0	4	start_index
water	17:24	0:0	4	;
cond	17:26	17:38	3	i < tracks -> nb_tracks
water	17:26	0:0	4	i
op	17:28	0:0	4	<
water	17:30	0:0	4	tracks
op	17:36	0:0	4	->
water	17:38	0:0	4	nb_tracks
forexpr	17:49	17:50	3	i ++
water	17:49	0:0	4	i
op	17:50	0:0	4	++
stmts	17:54	46:4	3	
water	17:54	0:0	4	{
decl	18:8	18:47	4	struct Track	*track
op	18:28	0:0	4	=
water	18:30	0:0	4	tracks
op	18:36	0:0	4	->
water	18:38	0:0	4	tracks
op	18:44	0:0	4	[
water	18:45	0:0	4	i
op	18:46	0:0	4	]
decl	19:8	19:65	4	const char	*type
op	19:28	0:0	4	=
water	19:30	0:0	4	track
op	19:35	0:0	4	->
water	19:37	0:0	4	is_video
water	19:46	0:0	4	?
water	19:48	0:0	4	"video"
water	19:56	0:0	4	:
water	19:58	0:0	4	"audio"
call	20:8	20:95	4	snprintf
arg	20:17	20:24	5	dirname
water	20:17	0:0	6	dirname
arg	20:26	20:41	5	sizeof(dirname)
op	20:26	0:0	6	sizeof
water	20:32	0:0	6	(
water	20:33	0:0	6	dirname
water	20:40	0:0	6	)
arg	20:43	20:64	5	"%sQualityLevels(%d)"
water	20:43	0:0	6	"%sQualityLevels(%d)"
arg	20:66	20:79	5	output_prefix
water	20:66	0:0	6	output_prefix
arg	20:81	20:95	5	track->bitrate
water	20:81	0:0	6	track
op	20:86	0:0	6	->
water	20:88	0:0	6	bitrate
water	20:96	0:0	4	;
if	21:8	27:8	4	(split)
cond	21:12	21:12	5	split
water	21:12	0:0	6	split
stmts	21:19	27:8	5	
water	21:19	0:0	6	{
if	22:12	26:12	6	(mkdir (dirname ,0777 ) == - 1 && errno != EEXIST)
cond	22:16	22:55	7	mkdir (dirname ,0777 ) == - 1 && errno != EEXIST
call	22:16	22:35	8	mkdir
arg	22:22	22:29	9	dirname
water	22:22	0:0	10	dirname
arg	22:31	22:35	9	0777
water	22:31	0:0	10	0777
op	22:37	0:0	8	==
op	22:40	0:0	8	-
water	22:41	0:0	8	1
op	22:43	0:0	8	&&
water	22:46	0:0	8	errno
op	22:52	0:0	8	!=
water	22:55	0:0	8	EEXIST
stmts	22:63	26:12	7	
water	22:63	0:0	8	{
water	23:16	0:0	8	ret
op	23:20	0:0	8	=
call	23:22	23:35	8	AVERROR
arg	23:30	23:35	9	errno
water	23:30	0:0	10	errno
water	23:36	0:0	8	;
call	24:16	24:30	8	perror
arg	24:23	24:30	9	dirname
water	24:23	0:0	10	dirname
water	24:31	0:0	8	;
goto	25:16	25:25	8	fail
water	25:21	0:0	9	fail
water	26:12	0:0	8	}
water	27:8	0:0	6	}
for	28:8	45:8	4	(j = 0 ;j < track -> chunks;j ++)
forinit	28:13	28:18	5	j = 0 ;
water	28:13	0:0	6	j
op	28:15	0:0	6	=
water	28:17	0:0	6	0
water	28:18	0:0	6	;
cond	28:20	28:31	5	j < track -> chunks
water	28:20	0:0	6	j
op	28:22	0:0	6	<
water	28:24	0:0	6	track
op	28:29	0:0	6	->
water	28:31	0:0	6	chunks
forexpr	28:39	28:40	5	j ++
water	28:39	0:0	6	j
op	28:40	0:0	6	++
stmts	28:44	45:8	5	
water	28:44	0:0	6	{
call	29:12	30:58	6	snprintf
arg	29:21	29:29	7	filename
water	29:21	0:0	8	filename
arg	29:31	29:47	7	sizeof(filename)
op	29:31	0:0	8	sizeof
water	29:37	0:0	8	(
water	29:38	0:0	8	filename
water	29:46	0:0	8	)
arg	29:49	29:77	7	"%s/Fragments(%s=%"PRId64")"
water	29:49	0:0	8	"%s/Fragments(%s=%"
water	29:68	0:0	8	PRId64
water	29:74	0:0	8	")"
arg	30:21	30:28	7	dirname
water	30:21	0:0	8	dirname
arg	30:30	30:34	7	type
water	30:30	0:0	8	type
arg	30:36	30:58	7	track->offsets[j].time
water	30:36	0:0	8	track
op	30:41	0:0	8	->
water	30:43	0:0	8	offsets
op	30:50	0:0	8	[
water	30:51	0:0	8	j
op	30:52	0:0	8	]
op	30:53	0:0	8	.
water	30:54	0:0	8	time
water	30:59	0:0	6	;
call	31:12	31:60	6	avio_seek
arg	31:22	31:24	7	in
water	31:22	0:0	8	in
arg	31:26	31:50	7	track->offsets[j].offset
water	31:26	0:0	8	track
op	31:31	0:0	8	->
water	31:33	0:0	8	offsets
op	31:40	0:0	8	[
water	31:41	0:0	8	j
op	31:42	0:0	8	]
op	31:43	0:0	8	.
water	31:44	0:0	8	offset
arg	31:52	31:60	7	SEEK_SET
water	31:52	0:0	8	SEEK_SET
water	31:61	0:0	6	;
if	32:12	33:67	6	(ismf)
cond	32:16	32:16	7	ismf
water	32:16	0:0	8	ismf
stmts	33:16	33:67	7	
call	33:16	33:66	8	fprintf
arg	33:24	33:27	9	out
water	33:24	0:0	10	out
arg	33:29	33:41	9	"%s %"PRId64
water	33:29	0:0	10	"%s %"
water	33:35	0:0	10	PRId64
arg	33:43	33:51	9	filename
water	33:43	0:0	10	filename
arg	33:53	33:66	9	avio_tell(in)
call	33:53	33:65	10	avio_tell
arg	33:63	33:65	11	in
water	33:63	0:0	12	in
water	33:67	0:0	8	;
if	34:12	35:59	6	(split)
cond	34:16	34:16	7	split
water	34:16	0:0	8	split
stmts	35:16	35:59	7	
water	35:16	0:0	8	fragment_ret
op	35:29	0:0	8	=
call	35:31	35:58	8	write_fragment
arg	35:46	35:54	9	filename
water	35:46	0:0	10	filename
arg	35:56	35:58	9	in
water	35:56	0:0	10	in
water	35:59	0:0	8	;
else	36:12	37:48	6
stmts	37:16	37:48	7	
water	37:16	0:0	8	fragment_ret
op	37:29	0:0	8	=
call	37:31	37:47	8	skip_fragment
arg	37:45	37:47	9	in
water	37:45	0:0	10	in
water	37:48	0:0	8	;
if	38:12	39:59	6	(ismf)
cond	38:16	38:16	7	ismf
water	38:16	0:0	8	ismf
stmts	39:16	39:59	7	
call	39:16	39:58	8	fprintf
arg	39:24	39:27	9	out
water	39:24	0:0	10	out
arg	39:29	39:43	9	" %"PRId64"\n"
water	39:29	0:0	10	" %"
water	39:33	0:0	10	PRId64
water	39:39	0:0	10	"\n"
arg	39:45	39:58	9	avio_tell(in)
call	39:45	39:57	10	avio_tell
arg	39:55	39:57	11	in
water	39:55	0:0	12	in
water	39:59	0:0	8	;
if	40:12	44:12	6	(fragment_ret != 0)
cond	40:16	40:32	7	fragment_ret != 0
water	40:16	0:0	8	fragment_ret
op	40:29	0:0	8	!=
water	40:32	0:0	8	0
stmts	40:35	44:12	7	
water	40:35	0:0	8	{
call	41:16	42:52	8	fprintf
arg	41:24	41:30	9	stderr
water	41:24	0:0	10	stderr
arg	41:32	41:71	9	"failed fragment %d in track %d (%s)\n"
water	41:32	0:0	10	"failed fragment %d in track %d (%s)\n"
arg	41:73	41:74	9	j
water	41:73	0:0	10	j
arg	42:24	42:39	9	track->track_id
water	42:24	0:0	10	track
op	42:29	0:0	10	->
water	42:31	0:0	10	track_id
arg	42:41	42:52	9	track->name
water	42:41	0:0	10	track
op	42:46	0:0	10	->
water	42:48	0:0	10	name
water	42:53	0:0	8	;
water	43:16	0:0	8	ret
op	43:20	0:0	8	=
water	43:22	0:0	8	fragment_ret
water	43:34	0:0	8	;
water	44:12	0:0	8	}
water	45:8	0:0	6	}
water	46:4	0:0	4	}
label	47:0	47:4	2	fail :
if	48:4	49:19	2	(out)
cond	48:8	48:8	3	out
water	48:8	0:0	4	out
stmts	49:8	49:19	3	
call	49:8	49:18	4	fclose
arg	49:15	49:18	5	out
water	49:15	0:0	6	out
water	49:19	0:0	4	;
return	50:4	50:14	2	ret
water	50:11	0:0	3	ret
