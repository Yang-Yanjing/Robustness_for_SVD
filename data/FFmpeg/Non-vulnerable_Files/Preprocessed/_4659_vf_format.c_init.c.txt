func	1:15	60:0	0	int	init
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterContext *	ctx
stmnts	0:0	59:12	1	
decl	3:4	3:32	2	FormatContext	*s
op	3:21	0:0	2	=
water	3:23	0:0	2	ctx
op	3:26	0:0	2	->
water	3:28	0:0	2	priv
decl	4:4	4:19	2	char	*cur
water	4:13	0:0	2	,
decl	4:4	4:19	2	char	*sep
decl	5:4	5:22	2	int	nb_formats
op	5:19	0:0	2	=
water	5:21	0:0	2	1
decl	6:4	6:9	2	int	i
decl	7:4	7:11	2	int	ret
if	8:4	11:4	2	(! s -> pix_fmts)
cond	8:8	8:12	3	! s -> pix_fmts
op	8:8	0:0	4	!
water	8:9	0:0	4	s
op	8:10	0:0	4	->
water	8:12	0:0	4	pix_fmts
stmts	8:22	11:4	3	
water	8:22	0:0	4	{
call	9:8	9:65	4	av_log
arg	9:15	9:18	5	ctx
water	9:15	0:0	6	ctx
arg	9:20	9:32	5	AV_LOG_ERROR
water	9:20	0:0	6	AV_LOG_ERROR
arg	9:34	9:65	5	"Empty output format string.\n"
water	9:34	0:0	6	"Empty output format string.\n"
water	9:66	0:0	4	;
return	10:8	10:30	4	AVERROR(EINVAL)
call	10:15	10:29	5	AVERROR
arg	10:23	10:29	6	EINVAL
water	10:23	0:0	7	EINVAL
water	11:4	0:0	4	}
water	13:4	0:0	2	cur
op	13:8	0:0	2	=
water	13:10	0:0	2	s
op	13:11	0:0	2	->
water	13:13	0:0	2	pix_fmts
water	13:21	0:0	2	;
while	14:4	18:4	2	(( cur =strchr (cur ,'|' ) ))
cond	14:11	14:34	3	( cur =strchr (cur ,'|' ) )
water	14:11	0:0	4	(
water	14:12	0:0	4	cur
op	14:16	0:0	4	=
call	14:18	14:33	4	strchr
arg	14:25	14:28	5	cur
water	14:25	0:0	6	cur
arg	14:30	14:33	5	'|'
water	14:30	0:0	6	'|'
water	14:34	0:0	4	)
stmts	14:37	18:4	3	
water	14:37	0:0	4	{
water	15:8	0:0	4	nb_formats
op	15:18	0:0	4	++
water	15:20	0:0	4	;
if	16:8	17:17	4	(* cur)
cond	16:12	16:13	5	* cur
op	16:12	0:0	6	*
water	16:13	0:0	6	cur
stmts	17:12	17:17	5	
water	17:12	0:0	6	cur
op	17:15	0:0	6	++
water	17:17	0:0	6	;
water	18:4	0:0	4	}
water	19:4	0:0	2	s
op	19:5	0:0	2	->
water	19:7	0:0	2	formats
op	19:15	0:0	2	=
call	19:17	19:68	2	av_malloc_array
arg	19:33	19:47	3	nb_formats+1
water	19:33	0:0	4	nb_formats
op	19:44	0:0	4	+
water	19:46	0:0	4	1
arg	19:49	19:68	3	sizeof(*s->formats)
op	19:49	0:0	4	sizeof
water	19:55	0:0	4	(
op	19:56	0:0	4	*
water	19:57	0:0	4	s
op	19:58	0:0	4	->
water	19:60	0:0	4	formats
water	19:67	0:0	4	)
water	19:69	0:0	2	;
if	20:4	21:30	2	(! s -> formats)
cond	20:8	20:12	3	! s -> formats
op	20:8	0:0	4	!
water	20:9	0:0	4	s
op	20:10	0:0	4	->
water	20:12	0:0	4	formats
stmts	21:8	21:30	3	
return	21:8	21:30	4	AVERROR(ENOMEM)
call	21:15	21:29	5	AVERROR
arg	21:23	21:29	6	ENOMEM
water	21:23	0:0	7	ENOMEM
water	23:4	0:0	2	cur
op	23:8	0:0	2	=
water	23:10	0:0	2	s
op	23:11	0:0	2	->
water	23:13	0:0	2	pix_fmts
water	23:21	0:0	2	;
for	24:4	31:4	2	(i = 0 ;i < nb_formats;i ++)
forinit	24:9	24:14	3	i = 0 ;
water	24:9	0:0	4	i
op	24:11	0:0	4	=
water	24:13	0:0	4	0
water	24:14	0:0	4	;
cond	24:16	24:20	3	i < nb_formats
water	24:16	0:0	4	i
op	24:18	0:0	4	<
water	24:20	0:0	4	nb_formats
forexpr	24:32	24:33	3	i ++
water	24:32	0:0	4	i
op	24:33	0:0	4	++
stmts	24:37	31:4	3	
water	24:37	0:0	4	{
water	25:8	0:0	4	sep
op	25:12	0:0	4	=
call	25:14	25:29	4	strchr
arg	25:21	25:24	5	cur
water	25:21	0:0	6	cur
arg	25:26	25:29	5	'|'
water	25:26	0:0	6	'|'
water	25:30	0:0	4	;
if	26:8	27:22	4	(sep)
cond	26:12	26:12	5	sep
water	26:12	0:0	6	sep
stmts	27:12	27:22	5	
op	27:12	0:0	6	*
water	27:13	0:0	6	sep
op	27:16	0:0	6	++
op	27:19	0:0	6	=
water	27:21	0:0	6	0
water	27:22	0:0	6	;
if	28:8	29:22	4	(( ret =ff_parse_pixel_format (& s -> formats [ i ] ,cur ,ctx ) ) < 0)
cond	28:12	28:70	5	( ret =ff_parse_pixel_format (& s -> formats [ i ] ,cur ,ctx ) ) < 0
water	28:12	0:0	6	(
water	28:13	0:0	6	ret
op	28:17	0:0	6	=
call	28:19	28:65	6	ff_parse_pixel_format
arg	28:41	28:55	7	&s->formats[i]
op	28:41	0:0	8	&
water	28:42	0:0	8	s
op	28:43	0:0	8	->
water	28:45	0:0	8	formats
op	28:52	0:0	8	[
water	28:53	0:0	8	i
op	28:54	0:0	8	]
arg	28:57	28:60	7	cur
water	28:57	0:0	8	cur
arg	28:62	28:65	7	ctx
water	28:62	0:0	8	ctx
water	28:66	0:0	6	)
op	28:68	0:0	6	<
water	28:70	0:0	6	0
stmts	29:12	29:22	5	
return	29:12	29:22	6	ret
water	29:19	0:0	7	ret
water	30:8	0:0	4	cur
op	30:12	0:0	4	=
water	30:14	0:0	4	sep
water	30:17	0:0	4	;
water	31:4	0:0	4	}
water	32:4	0:0	2	s
op	32:5	0:0	2	->
water	32:7	0:0	2	formats
op	32:14	0:0	2	[
water	32:15	0:0	2	nb_formats
op	32:25	0:0	2	]
op	32:27	0:0	2	=
water	32:29	0:0	2	AV_PIX_FMT_NONE
water	32:44	0:0	2	;
if	33:4	58:4	2	(!strcmp (ctx -> filter -> name ,"noformat" ))
cond	33:8	33:45	3	!strcmp (ctx -> filter -> name ,"noformat" )
op	33:8	0:0	4	!
call	33:9	33:45	4	strcmp
arg	33:16	33:33	5	ctx->filter->name
water	33:16	0:0	6	ctx
op	33:19	0:0	6	->
water	33:21	0:0	6	filter
op	33:27	0:0	6	->
water	33:29	0:0	6	name
arg	33:35	33:45	5	"noformat"
water	33:35	0:0	6	"noformat"
stmts	33:48	58:4	3	
water	33:48	0:0	4	{
decl	34:8	34:45	4	const AVPixFmtDescriptor	*desc
op	34:39	0:0	4	=
water	34:41	0:0	4	NULL
decl	35:8	35:43	4	enum AVPixelFormat	*formats_allowed
decl	36:8	36:55	4	int	nb_formats_lavu
op	36:28	0:0	4	=
water	36:30	0:0	4	0
water	36:31	0:0	4	,
decl	36:8	36:55	4	int	nb_formats_allowed
op	36:52	0:0	4	=
water	36:54	0:0	4	0
while	38:8	39:29	4	(( desc =av_pix_fmt_desc_next (desc ) ))
cond	38:15	38:49	5	( desc =av_pix_fmt_desc_next (desc ) )
water	38:15	0:0	6	(
water	38:16	0:0	6	desc
op	38:21	0:0	6	=
call	38:23	38:48	6	av_pix_fmt_desc_next
arg	38:44	38:48	7	desc
water	38:44	0:0	8	desc
water	38:49	0:0	6	)
stmts	39:12	39:29	5	
water	39:12	0:0	6	nb_formats_lavu
op	39:27	0:0	6	++
water	39:29	0:0	6	;
water	40:8	0:0	4	formats_allowed
op	40:24	0:0	4	=
call	40:26	40:87	4	av_malloc_array
arg	40:42	40:61	5	nb_formats_lavu+1
water	40:42	0:0	6	nb_formats_lavu
op	40:58	0:0	6	+
water	40:60	0:0	6	1
arg	40:63	40:87	5	sizeof(*formats_allowed)
op	40:63	0:0	6	sizeof
water	40:69	0:0	6	(
op	40:70	0:0	6	*
water	40:71	0:0	6	formats_allowed
water	40:86	0:0	6	)
water	40:88	0:0	4	;
if	41:8	42:34	4	(! formats_allowed)
cond	41:12	41:13	5	! formats_allowed
op	41:12	0:0	6	!
water	41:13	0:0	6	formats_allowed
stmts	42:12	42:34	5	
return	42:12	42:34	6	AVERROR(ENOMEM)
call	42:19	42:33	7	AVERROR
arg	42:27	42:33	8	ENOMEM
water	42:27	0:0	9	ENOMEM
while	45:8	54:8	4	(( desc =av_pix_fmt_desc_next (desc ) ))
cond	45:15	45:49	5	( desc =av_pix_fmt_desc_next (desc ) )
water	45:15	0:0	6	(
water	45:16	0:0	6	desc
op	45:21	0:0	6	=
call	45:23	45:48	6	av_pix_fmt_desc_next
arg	45:44	45:48	7	desc
water	45:44	0:0	8	desc
water	45:49	0:0	6	)
stmts	45:52	54:8	5	
water	45:52	0:0	6	{
decl	46:12	46:69	6	enum AVPixelFormat	pix_fmt
op	46:39	0:0	6	=
call	46:41	46:68	7	av_pix_fmt_desc_get_id
arg	46:64	46:68	8	desc
water	46:64	0:0	9	desc
for	47:12	50:12	6	(i = 0 ;i < nb_formats;i ++)
forinit	47:17	47:22	7	i = 0 ;
water	47:17	0:0	8	i
op	47:19	0:0	8	=
water	47:21	0:0	8	0
water	47:22	0:0	8	;
cond	47:24	47:28	7	i < nb_formats
water	47:24	0:0	8	i
op	47:26	0:0	8	<
water	47:28	0:0	8	nb_formats
forexpr	47:40	47:41	7	i ++
water	47:40	0:0	8	i
op	47:41	0:0	8	++
stmts	47:45	50:12	7	
water	47:45	0:0	8	{
if	48:16	49:25	8	(s -> formats [ i ] == pix_fmt)
cond	48:20	48:37	9	s -> formats [ i ] == pix_fmt
water	48:20	0:0	10	s
op	48:21	0:0	10	->
water	48:23	0:0	10	formats
op	48:30	0:0	10	[
water	48:31	0:0	10	i
op	48:32	0:0	10	]
op	48:34	0:0	10	==
water	48:37	0:0	10	pix_fmt
stmts	49:20	49:25	9	
break	49:20	49:25	10	
water	50:12	0:0	8	}
if	51:12	52:24	6	(i < nb_formats)
cond	51:16	51:20	7	i < nb_formats
water	51:16	0:0	8	i
op	51:18	0:0	8	<
water	51:20	0:0	8	nb_formats
stmts	52:16	52:24	7	
continue	52:16	52:24	8	
water	53:12	0:0	6	formats_allowed
op	53:27	0:0	6	[
water	53:28	0:0	6	nb_formats_allowed
op	53:46	0:0	6	++
op	53:48	0:0	6	]
op	53:50	0:0	6	=
water	53:52	0:0	6	pix_fmt
water	53:59	0:0	6	;
water	54:8	0:0	6	}
water	55:8	0:0	4	formats_allowed
op	55:23	0:0	4	[
water	55:24	0:0	4	nb_formats_allowed
op	55:42	0:0	4	]
op	55:44	0:0	4	=
water	55:46	0:0	4	AV_PIX_FMT_NONE
water	55:61	0:0	4	;
call	56:8	56:28	4	av_freep
arg	56:17	56:28	5	&s->formats
op	56:17	0:0	6	&
water	56:18	0:0	6	s
op	56:19	0:0	6	->
water	56:21	0:0	6	formats
water	56:29	0:0	4	;
water	57:8	0:0	4	s
op	57:9	0:0	4	->
water	57:11	0:0	4	formats
op	57:19	0:0	4	=
water	57:21	0:0	4	formats_allowed
water	57:36	0:0	4	;
water	58:4	0:0	4	}
return	59:4	59:12	2	0
water	59:11	0:0	3	0
