func	1:0	57:0	0	static int	plot_freqs
params	1:21	0:0	1	
param	1:22	1:42	2	AVFilterLink *	inlink
param	1:44	1:55	2	AVFrame *	in
stmnts	0:0	56:40	1	
decl	3:4	3:38	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	inlink
op	3:33	0:0	2	->
water	3:35	0:0	2	dst
decl	4:4	4:43	2	AVFilterLink	*outlink
op	4:26	0:0	2	=
water	4:28	0:0	2	ctx
op	4:31	0:0	2	->
water	4:33	0:0	2	outputs
op	4:40	0:0	2	[
water	4:41	0:0	2	0
op	4:42	0:0	2	]
decl	5:4	5:35	2	ShowFreqsContext	*s
op	5:24	0:0	2	=
water	5:26	0:0	2	ctx
op	5:29	0:0	2	->
water	5:31	0:0	2	priv
decl	6:4	6:36	2	const int	win_size
op	6:23	0:0	2	=
water	6:25	0:0	2	s
op	6:26	0:0	2	->
water	6:28	0:0	2	win_size
decl	7:4	7:41	2	char	*colors
water	7:16	0:0	2	,
decl	7:4	7:41	2	char	*color
water	7:24	0:0	2	,
decl	7:4	7:41	2	char	*saveptr
op	7:35	0:0	2	=
water	7:37	0:0	2	NULL
decl	8:4	8:16	2	AVFrame	*out
decl	9:4	9:13	2	int	ch
water	9:10	0:0	2	,
decl	9:4	9:13	2	int	n
water	10:4	0:0	2	out
op	10:8	0:0	2	=
call	10:10	10:61	2	ff_get_video_buffer
arg	10:30	10:37	3	outlink
water	10:30	0:0	4	outlink
arg	10:39	10:49	3	outlink->w
water	10:39	0:0	4	outlink
op	10:46	0:0	4	->
water	10:48	0:0	4	w
arg	10:51	10:61	3	outlink->h
water	10:51	0:0	4	outlink
op	10:58	0:0	4	->
water	10:60	0:0	4	h
water	10:62	0:0	2	;
if	11:4	12:30	2	(! out)
cond	11:8	11:9	3	! out
op	11:8	0:0	4	!
water	11:9	0:0	4	out
stmts	12:8	12:30	3	
return	12:8	12:30	4	AVERROR(ENOMEM)
call	12:15	12:29	5	AVERROR
arg	12:23	12:29	6	ENOMEM
water	12:23	0:0	7	ENOMEM
for	13:4	14:70	2	(n = 0 ;n < outlink -> h;n ++)
forinit	13:9	13:14	3	n = 0 ;
water	13:9	0:0	4	n
op	13:11	0:0	4	=
water	13:13	0:0	4	0
water	13:14	0:0	4	;
cond	13:16	13:29	3	n < outlink -> h
water	13:16	0:0	4	n
op	13:18	0:0	4	<
water	13:20	0:0	4	outlink
op	13:27	0:0	4	->
water	13:29	0:0	4	h
forexpr	13:32	13:33	3	n ++
water	13:32	0:0	4	n
op	13:33	0:0	4	++
stmts	14:8	14:70	3	
call	14:8	14:69	4	memset
arg	14:15	14:50	5	out->data[0]+out->linesize[0]*n
water	14:15	0:0	6	out
op	14:18	0:0	6	->
water	14:20	0:0	6	data
op	14:24	0:0	6	[
water	14:25	0:0	6	0
op	14:26	0:0	6	]
op	14:28	0:0	6	+
water	14:30	0:0	6	out
op	14:33	0:0	6	->
water	14:35	0:0	6	linesize
op	14:43	0:0	6	[
water	14:44	0:0	6	0
op	14:45	0:0	6	]
op	14:47	0:0	6	*
water	14:49	0:0	6	n
arg	14:52	14:53	5	0
water	14:52	0:0	6	0
arg	14:55	14:69	5	outlink->w*4
water	14:55	0:0	6	outlink
op	14:62	0:0	6	->
water	14:64	0:0	6	w
op	14:66	0:0	6	*
water	14:68	0:0	6	4
water	14:70	0:0	4	;
for	16:4	26:4	2	(ch = 0 ;ch < s -> nb_channels;ch ++)
forinit	16:9	16:15	3	ch = 0 ;
water	16:9	0:0	4	ch
op	16:12	0:0	4	=
water	16:14	0:0	4	0
water	16:15	0:0	4	;
cond	16:17	16:25	3	ch < s -> nb_channels
water	16:17	0:0	4	ch
op	16:20	0:0	4	<
water	16:22	0:0	4	s
op	16:23	0:0	4	->
water	16:25	0:0	4	nb_channels
forexpr	16:38	16:40	3	ch ++
water	16:38	0:0	4	ch
op	16:40	0:0	4	++
stmts	16:44	26:4	3	
water	16:44	0:0	4	{
decl	17:8	17:55	4	const float	*p
op	17:23	0:0	4	=
water	17:25	0:0	4	(
water	17:26	0:0	4	float
op	17:32	0:0	4	*
water	17:33	0:0	4	)
water	17:34	0:0	4	in
op	17:36	0:0	4	->
water	17:38	0:0	4	extended_data
op	17:51	0:0	4	[
water	17:52	0:0	4	ch
op	17:54	0:0	4	]
for	18:8	21:8	4	(n = 0 ;n < in -> nb_samples;n ++)
forinit	18:13	18:18	5	n = 0 ;
water	18:13	0:0	6	n
op	18:15	0:0	6	=
water	18:17	0:0	6	0
water	18:18	0:0	6	;
cond	18:20	18:28	5	n < in -> nb_samples
water	18:20	0:0	6	n
op	18:22	0:0	6	<
water	18:24	0:0	6	in
op	18:26	0:0	6	->
water	18:28	0:0	6	nb_samples
forexpr	18:40	18:41	5	n ++
water	18:40	0:0	6	n
op	18:41	0:0	6	++
stmts	18:45	21:8	5	
water	18:45	0:0	6	{
water	19:12	0:0	6	s
op	19:13	0:0	6	->
water	19:15	0:0	6	fft_data
op	19:23	0:0	6	[
water	19:24	0:0	6	ch
op	19:26	0:0	6	]
op	19:27	0:0	6	[
water	19:28	0:0	6	n
op	19:29	0:0	6	]
op	19:30	0:0	6	.
water	19:31	0:0	6	re
op	19:34	0:0	6	=
water	19:36	0:0	6	p
op	19:37	0:0	6	[
water	19:38	0:0	6	n
op	19:39	0:0	6	]
op	19:41	0:0	6	*
water	19:43	0:0	6	s
op	19:44	0:0	6	->
water	19:46	0:0	6	window_func_lut
op	19:61	0:0	6	[
water	19:62	0:0	6	n
op	19:63	0:0	6	]
water	19:64	0:0	6	;
water	20:12	0:0	6	s
op	20:13	0:0	6	->
water	20:15	0:0	6	fft_data
op	20:23	0:0	6	[
water	20:24	0:0	6	ch
op	20:26	0:0	6	]
op	20:27	0:0	6	[
water	20:28	0:0	6	n
op	20:29	0:0	6	]
op	20:30	0:0	6	.
water	20:31	0:0	6	im
op	20:34	0:0	6	=
water	20:36	0:0	6	0
water	20:37	0:0	6	;
water	21:8	0:0	6	}
for	22:8	25:8	4	(;n < win_size;n ++)
forinit	22:13	22:13	5	;
water	22:13	0:0	6	;
cond	22:15	22:19	5	n < win_size
water	22:15	0:0	6	n
op	22:17	0:0	6	<
water	22:19	0:0	6	win_size
forexpr	22:29	22:30	5	n ++
water	22:29	0:0	6	n
op	22:30	0:0	6	++
stmts	22:34	25:8	5	
water	22:34	0:0	6	{
water	23:12	0:0	6	s
op	23:13	0:0	6	->
water	23:15	0:0	6	fft_data
op	23:23	0:0	6	[
water	23:24	0:0	6	ch
op	23:26	0:0	6	]
op	23:27	0:0	6	[
water	23:28	0:0	6	n
op	23:29	0:0	6	]
op	23:30	0:0	6	.
water	23:31	0:0	6	re
op	23:34	0:0	6	=
water	23:36	0:0	6	0
water	23:37	0:0	6	;
water	24:12	0:0	6	s
op	24:13	0:0	6	->
water	24:15	0:0	6	fft_data
op	24:23	0:0	6	[
water	24:24	0:0	6	ch
op	24:26	0:0	6	]
op	24:27	0:0	6	[
water	24:28	0:0	6	n
op	24:29	0:0	6	]
op	24:30	0:0	6	.
water	24:31	0:0	6	im
op	24:34	0:0	6	=
water	24:36	0:0	6	0
water	24:37	0:0	6	;
water	25:8	0:0	6	}
water	26:4	0:0	4	}
for	28:4	31:4	2	(ch = 0 ;ch < s -> nb_channels;ch ++)
forinit	28:9	28:15	3	ch = 0 ;
water	28:9	0:0	4	ch
op	28:12	0:0	4	=
water	28:14	0:0	4	0
water	28:15	0:0	4	;
cond	28:17	28:25	3	ch < s -> nb_channels
water	28:17	0:0	4	ch
op	28:20	0:0	4	<
water	28:22	0:0	4	s
op	28:23	0:0	4	->
water	28:25	0:0	4	nb_channels
forexpr	28:38	28:40	3	ch ++
water	28:38	0:0	4	ch
op	28:40	0:0	4	++
stmts	28:44	31:4	3	
water	28:44	0:0	4	{
call	29:8	29:46	4	av_fft_permute
arg	29:23	29:29	5	s->fft
water	29:23	0:0	6	s
op	29:24	0:0	6	->
water	29:26	0:0	6	fft
arg	29:31	29:46	5	s->fft_data[ch]
water	29:31	0:0	6	s
op	29:32	0:0	6	->
water	29:34	0:0	6	fft_data
op	29:42	0:0	6	[
water	29:43	0:0	6	ch
op	29:45	0:0	6	]
water	29:47	0:0	4	;
call	30:8	30:43	4	av_fft_calc
arg	30:20	30:26	5	s->fft
water	30:20	0:0	6	s
op	30:21	0:0	6	->
water	30:23	0:0	6	fft
arg	30:28	30:43	5	s->fft_data[ch]
water	30:28	0:0	6	s
op	30:29	0:0	6	->
water	30:31	0:0	6	fft_data
op	30:39	0:0	6	[
water	30:40	0:0	6	ch
op	30:42	0:0	6	]
water	30:44	0:0	4	;
water	31:4	0:0	4	}
water	35:4	0:0	2	colors
op	35:11	0:0	2	=
call	35:13	35:32	2	av_strdup
arg	35:23	35:32	3	s->colors
water	35:23	0:0	4	s
op	35:24	0:0	4	->
water	35:26	0:0	4	colors
water	35:33	0:0	2	;
if	36:4	39:4	2	(! colors)
cond	36:8	36:9	3	! colors
op	36:8	0:0	4	!
water	36:9	0:0	4	colors
stmts	36:17	39:4	3	
water	36:17	0:0	4	{
call	37:8	37:26	4	av_frame_free
arg	37:22	37:26	5	&out
op	37:22	0:0	6	&
water	37:23	0:0	6	out
water	37:27	0:0	4	;
return	38:8	38:30	4	AVERROR(ENOMEM)
call	38:15	38:29	5	AVERROR
arg	38:23	38:29	6	ENOMEM
water	38:23	0:0	7	ENOMEM
water	39:4	0:0	4	}
for	40:4	53:4	2	(ch = 0 ;ch < s -> nb_channels;ch ++)
forinit	40:9	40:15	3	ch = 0 ;
water	40:9	0:0	4	ch
op	40:12	0:0	4	=
water	40:14	0:0	4	0
water	40:15	0:0	4	;
cond	40:17	40:25	3	ch < s -> nb_channels
water	40:17	0:0	4	ch
op	40:20	0:0	4	<
water	40:22	0:0	4	s
op	40:23	0:0	4	->
water	40:25	0:0	4	nb_channels
forexpr	40:38	40:40	3	ch ++
water	40:38	0:0	4	ch
op	40:40	0:0	4	++
stmts	40:44	53:4	3	
water	40:44	0:0	4	{
decl	41:8	41:50	4	uint8_t	fg[4]
op	41:22	0:0	4	=
water	41:24	0:0	4	{
water	41:26	0:0	4	0
water	41:27	0:0	4	xff
water	41:30	0:0	4	,
water	41:32	0:0	4	0
water	41:33	0:0	4	xff
water	41:36	0:0	4	,
water	41:38	0:0	4	0
water	41:39	0:0	4	xff
water	41:42	0:0	4	,
water	41:44	0:0	4	0
water	41:45	0:0	4	xff
water	41:49	0:0	4	}
decl	42:8	42:26	4	int	prev_y
op	42:19	0:0	4	=
op	42:21	0:0	4	-
water	42:22	0:0	4	1
water	42:23	0:0	4	,
decl	42:8	42:26	4	int	f
decl	43:8	43:16	4	double	a
water	44:8	0:0	4	color
op	44:14	0:0	4	=
call	44:16	44:65	4	av_strtok
arg	44:26	44:49	5	ch==0?colors:NULL
water	44:26	0:0	6	ch
op	44:29	0:0	6	==
water	44:32	0:0	6	0
water	44:34	0:0	6	?
water	44:36	0:0	6	colors
water	44:43	0:0	6	:
water	44:45	0:0	6	NULL
arg	44:51	44:55	5	" |"
water	44:51	0:0	6	" |"
arg	44:57	44:65	5	&saveptr
op	44:57	0:0	6	&
water	44:58	0:0	6	saveptr
water	44:66	0:0	4	;
if	45:8	46:46	4	(color)
cond	45:12	45:12	5	color
water	45:12	0:0	6	color
stmts	46:12	46:46	5	
call	46:12	46:45	6	av_parse_color
arg	46:27	46:29	7	fg
water	46:27	0:0	8	fg
arg	46:31	46:36	7	color
water	46:31	0:0	8	color
arg	46:38	46:40	7	-1
op	46:38	0:0	8	-
water	46:39	0:0	8	1
arg	46:42	46:45	7	ctx
water	46:42	0:0	8	ctx
water	46:46	0:0	6	;
water	47:8	0:0	4	a
op	47:10	0:0	4	=
call	47:12	47:53	4	av_clipd
arg	47:21	47:47	5	M(RE(0,ch),0)/s->scale
call	47:21	47:35	6	M
arg	47:23	47:32	7	RE(0,ch)
call	47:23	47:31	8	RE
arg	47:26	47:27	9	0
water	47:26	0:0	10	0
arg	47:29	47:31	9	ch
water	47:29	0:0	10	ch
arg	47:34	47:35	7	0
water	47:34	0:0	8	0
op	47:37	0:0	6	/
water	47:39	0:0	6	s
op	47:40	0:0	6	->
water	47:42	0:0	6	scale
arg	47:49	47:50	5	0
water	47:49	0:0	6	0
arg	47:52	47:53	5	1
water	47:52	0:0	6	1
water	47:54	0:0	4	;
call	48:8	48:56	4	plot_freq
arg	48:18	48:19	5	s
water	48:18	0:0	6	s
arg	48:21	48:23	5	ch
water	48:21	0:0	6	ch
arg	48:25	48:26	5	a
water	48:25	0:0	6	a
arg	48:28	48:29	5	0
water	48:28	0:0	6	0
arg	48:31	48:33	5	fg
water	48:31	0:0	6	fg
arg	48:35	48:42	5	&prev_y
op	48:35	0:0	6	&
water	48:36	0:0	6	prev_y
arg	48:44	48:47	5	out
water	48:44	0:0	6	out
arg	48:49	48:56	5	outlink
water	48:49	0:0	6	outlink
water	48:57	0:0	4	;
for	49:8	52:8	4	(f = 1 ;f < s -> nb_freq;f ++)
forinit	49:13	49:18	5	f = 1 ;
water	49:13	0:0	6	f
op	49:15	0:0	6	=
water	49:17	0:0	6	1
water	49:18	0:0	6	;
cond	49:20	49:27	5	f < s -> nb_freq
water	49:20	0:0	6	f
op	49:22	0:0	6	<
water	49:24	0:0	6	s
op	49:25	0:0	6	->
water	49:27	0:0	6	nb_freq
forexpr	49:36	49:37	5	f ++
water	49:36	0:0	6	f
op	49:37	0:0	6	++
stmts	49:41	52:8	5	
water	49:41	0:0	6	{
water	50:12	0:0	6	a
op	50:14	0:0	6	=
call	50:16	50:65	6	av_clipd
arg	50:25	50:59	7	M(RE(f,ch),IM(f,ch))/s->scale
call	50:25	50:47	8	M
arg	50:27	50:36	9	RE(f,ch)
call	50:27	50:35	10	RE
arg	50:30	50:31	11	f
water	50:30	0:0	12	f
arg	50:33	50:35	11	ch
water	50:33	0:0	12	ch
arg	50:38	50:47	9	IM(f,ch)
call	50:38	50:46	10	IM
arg	50:41	50:42	11	f
water	50:41	0:0	12	f
arg	50:44	50:46	11	ch
water	50:44	0:0	12	ch
op	50:49	0:0	8	/
water	50:51	0:0	8	s
op	50:52	0:0	8	->
water	50:54	0:0	8	scale
arg	50:61	50:62	7	0
water	50:61	0:0	8	0
arg	50:64	50:65	7	1
water	50:64	0:0	8	1
water	50:66	0:0	6	;
call	51:12	51:60	6	plot_freq
arg	51:22	51:23	7	s
water	51:22	0:0	8	s
arg	51:25	51:27	7	ch
water	51:25	0:0	8	ch
arg	51:29	51:30	7	a
water	51:29	0:0	8	a
arg	51:32	51:33	7	f
water	51:32	0:0	8	f
arg	51:35	51:37	7	fg
water	51:35	0:0	8	fg
arg	51:39	51:46	7	&prev_y
op	51:39	0:0	8	&
water	51:40	0:0	8	prev_y
arg	51:48	51:51	7	out
water	51:48	0:0	8	out
arg	51:53	51:60	7	outlink
water	51:53	0:0	8	outlink
water	51:61	0:0	6	;
water	52:8	0:0	6	}
water	53:4	0:0	4	}
call	54:4	54:18	2	av_free
arg	54:12	54:18	3	colors
water	54:12	0:0	4	colors
water	54:19	0:0	2	;
water	55:4	0:0	2	out
op	55:7	0:0	2	->
water	55:9	0:0	2	pts
op	55:13	0:0	2	=
water	55:15	0:0	2	in
op	55:17	0:0	2	->
water	55:19	0:0	2	pts
water	55:22	0:0	2	;
return	56:4	56:40	2	ff_filter_frame(outlink,out)
call	56:11	56:39	3	ff_filter_frame
arg	56:27	56:34	4	outlink
water	56:27	0:0	5	outlink
arg	56:36	56:39	4	out
water	56:36	0:0	5	out
