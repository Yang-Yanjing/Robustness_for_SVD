func	1:0	56:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:64	2	AVFrame *	insamples
stmnts	0:0	55:12	1	
decl	3:4	3:38	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	inlink
op	3:33	0:0	2	->
water	3:35	0:0	2	dst
decl	4:4	4:33	2	ShowCQTContext	*s
op	4:22	0:0	2	=
water	4:24	0:0	2	ctx
op	4:27	0:0	2	->
water	4:29	0:0	2	priv
decl	5:4	5:56	2	int	step
op	5:13	0:0	2	=
water	5:15	0:0	2	inlink
op	5:21	0:0	2	->
water	5:23	0:0	2	sample_rate
op	5:35	0:0	2	/
water	5:37	0:0	2	(
water	5:38	0:0	2	s
op	5:39	0:0	2	->
water	5:41	0:0	2	fps
op	5:45	0:0	2	*
water	5:47	0:0	2	s
op	5:48	0:0	2	->
water	5:50	0:0	2	count
water	5:55	0:0	2	)
decl	6:4	6:34	2	int	fft_len
op	6:16	0:0	2	=
water	6:18	0:0	2	1
op	6:20	0:0	2	<<
water	6:23	0:0	2	s
op	6:24	0:0	2	->
water	6:26	0:0	2	fft_bits
decl	7:4	7:17	2	int	remaining
decl	8:4	8:21	2	float	*audio_data
if	9:4	21:4	2	(! insamples)
cond	9:8	9:9	3	! insamples
op	9:8	0:0	4	!
water	9:9	0:0	4	insamples
stmts	9:20	21:4	3	
water	9:20	0:0	4	{
while	10:8	19:8	4	(s -> remaining_fill < ( fft_len >> 1 ))
cond	10:15	10:48	5	s -> remaining_fill < ( fft_len >> 1 )
water	10:15	0:0	6	s
op	10:16	0:0	6	->
water	10:18	0:0	6	remaining_fill
op	10:33	0:0	6	<
water	10:35	0:0	6	(
water	10:36	0:0	6	fft_len
op	10:44	0:0	6	>>
water	10:47	0:0	6	1
water	10:48	0:0	6	)
stmts	10:51	19:8	5	
water	10:51	0:0	6	{
decl	11:12	11:22	6	int	ret
water	11:19	0:0	6	,
decl	11:12	11:22	6	int	x
call	12:12	12:105	6	memset
arg	12:19	12:60	7	&s->fft_data[fft_len-s->remaining_fill]
op	12:19	0:0	8	&
water	12:20	0:0	8	s
op	12:21	0:0	8	->
water	12:23	0:0	8	fft_data
op	12:31	0:0	8	[
water	12:32	0:0	8	fft_len
op	12:40	0:0	8	-
water	12:42	0:0	8	s
op	12:43	0:0	8	->
water	12:45	0:0	8	remaining_fill
op	12:59	0:0	8	]
arg	12:62	12:63	7	0
water	12:62	0:0	8	0
arg	12:65	12:105	7	sizeof(*s->fft_data)*s->remaining_fill
op	12:65	0:0	8	sizeof
water	12:71	0:0	8	(
op	12:72	0:0	8	*
water	12:73	0:0	8	s
op	12:74	0:0	8	->
water	12:76	0:0	8	fft_data
water	12:84	0:0	8	)
op	12:86	0:0	8	*
water	12:88	0:0	8	s
op	12:89	0:0	8	->
water	12:91	0:0	8	remaining_fill
water	12:106	0:0	6	;
water	13:12	0:0	6	ret
op	13:16	0:0	6	=
call	13:18	13:33	6	plot_cqt
arg	13:27	13:33	7	inlink
water	13:27	0:0	8	inlink
water	13:34	0:0	6	;
if	14:12	15:26	6	(ret < 0)
cond	14:16	14:22	7	ret < 0
water	14:16	0:0	8	ret
op	14:20	0:0	8	<
water	14:22	0:0	8	0
stmts	15:16	15:26	7	
return	15:16	15:26	8	ret
water	15:23	0:0	9	ret
for	16:12	17:52	6	(x = 0 ;x < ( fft_len - step );x ++)
forinit	16:17	16:22	7	x = 0 ;
water	16:17	0:0	8	x
op	16:19	0:0	8	=
water	16:21	0:0	8	0
water	16:22	0:0	8	;
cond	16:24	16:41	7	x < ( fft_len - step )
water	16:24	0:0	8	x
op	16:26	0:0	8	<
water	16:28	0:0	8	(
water	16:29	0:0	8	fft_len
op	16:36	0:0	8	-
water	16:37	0:0	8	step
water	16:41	0:0	8	)
forexpr	16:44	16:45	7	x ++
water	16:44	0:0	8	x
op	16:45	0:0	8	++
stmts	17:16	17:52	7	
water	17:16	0:0	8	s
op	17:17	0:0	8	->
water	17:19	0:0	8	fft_data
op	17:27	0:0	8	[
water	17:28	0:0	8	x
op	17:29	0:0	8	]
op	17:31	0:0	8	=
water	17:33	0:0	8	s
op	17:34	0:0	8	->
water	17:36	0:0	8	fft_data
op	17:44	0:0	8	[
water	17:45	0:0	8	x
op	17:46	0:0	8	+
water	17:47	0:0	8	step
op	17:51	0:0	8	]
water	17:52	0:0	8	;
water	18:12	0:0	6	s
op	18:13	0:0	6	->
water	18:15	0:0	6	remaining_fill
op	18:30	0:0	6	+=
water	18:33	0:0	6	step
water	18:37	0:0	6	;
water	19:8	0:0	6	}
return	20:8	20:26	4	AVERROR_EOF
water	20:15	0:0	5	AVERROR_EOF
water	21:4	0:0	4	}
water	22:4	0:0	2	remaining
op	22:14	0:0	2	=
water	22:16	0:0	2	insamples
op	22:25	0:0	2	->
water	22:27	0:0	2	nb_samples
water	22:37	0:0	2	;
water	23:4	0:0	2	audio_data
op	23:15	0:0	2	=
water	23:17	0:0	2	(
water	23:18	0:0	2	float
op	23:23	0:0	2	*
water	23:24	0:0	2	)
water	23:26	0:0	2	insamples
op	23:35	0:0	2	->
water	23:37	0:0	2	data
op	23:41	0:0	2	[
water	23:42	0:0	2	0
op	23:43	0:0	2	]
water	23:44	0:0	2	;
while	24:4	53:4	2	(remaining)
cond	24:11	24:11	3	remaining
water	24:11	0:0	4	remaining
stmts	24:22	53:4	3	
water	24:22	0:0	4	{
if	25:8	42:8	4	(remaining >= s -> remaining_fill)
cond	25:12	25:28	5	remaining >= s -> remaining_fill
water	25:12	0:0	6	remaining
op	25:22	0:0	6	>=
water	25:25	0:0	6	s
op	25:26	0:0	6	->
water	25:28	0:0	6	remaining_fill
stmts	25:44	42:8	5	
water	25:44	0:0	6	{
decl	26:12	26:53	6	int	i
op	26:18	0:0	6	=
water	26:20	0:0	6	insamples
op	26:29	0:0	6	->
water	26:31	0:0	6	nb_samples
op	26:42	0:0	6	-
water	26:44	0:0	6	remaining
decl	27:12	27:47	6	int	j
op	27:18	0:0	6	=
water	27:20	0:0	6	fft_len
op	27:28	0:0	6	-
water	27:30	0:0	6	s
op	27:31	0:0	6	->
water	27:33	0:0	6	remaining_fill
decl	28:12	28:22	6	int	m
water	28:17	0:0	6	,
decl	28:12	28:22	6	int	ret
for	29:12	32:12	6	(m = 0 ;m < s -> remaining_fill;m ++)
forinit	29:17	29:22	7	m = 0 ;
water	29:17	0:0	8	m
op	29:19	0:0	8	=
water	29:21	0:0	8	0
water	29:22	0:0	8	;
cond	29:24	29:31	7	m < s -> remaining_fill
water	29:24	0:0	8	m
op	29:26	0:0	8	<
water	29:28	0:0	8	s
op	29:29	0:0	8	->
water	29:31	0:0	8	remaining_fill
forexpr	29:47	29:48	7	m ++
water	29:47	0:0	8	m
op	29:48	0:0	8	++
stmts	29:52	32:12	7	
water	29:52	0:0	8	{
water	30:16	0:0	8	s
op	30:17	0:0	8	->
water	30:19	0:0	8	fft_data
op	30:27	0:0	8	[
water	30:28	0:0	8	j
op	30:29	0:0	8	+
water	30:30	0:0	8	m
op	30:31	0:0	8	]
op	30:32	0:0	8	.
water	30:33	0:0	8	re
op	30:36	0:0	8	=
water	30:38	0:0	8	audio_data
op	30:48	0:0	8	[
water	30:49	0:0	8	2
op	30:50	0:0	8	*
water	30:51	0:0	8	(
water	30:52	0:0	8	i
op	30:53	0:0	8	+
water	30:54	0:0	8	m
water	30:55	0:0	8	)
op	30:56	0:0	8	]
water	30:57	0:0	8	;
water	31:16	0:0	8	s
op	31:17	0:0	8	->
water	31:19	0:0	8	fft_data
op	31:27	0:0	8	[
water	31:28	0:0	8	j
op	31:29	0:0	8	+
water	31:30	0:0	8	m
op	31:31	0:0	8	]
op	31:32	0:0	8	.
water	31:33	0:0	8	im
op	31:36	0:0	8	=
water	31:38	0:0	8	audio_data
op	31:48	0:0	8	[
water	31:49	0:0	8	2
op	31:50	0:0	8	*
water	31:51	0:0	8	(
water	31:52	0:0	8	i
op	31:53	0:0	8	+
water	31:54	0:0	8	m
water	31:55	0:0	8	)
op	31:56	0:0	8	+
water	31:57	0:0	8	1
op	31:58	0:0	8	]
water	31:59	0:0	8	;
water	32:12	0:0	8	}
water	33:12	0:0	6	ret
op	33:16	0:0	6	=
call	33:18	33:33	6	plot_cqt
arg	33:27	33:33	7	inlink
water	33:27	0:0	8	inlink
water	33:34	0:0	6	;
if	34:12	37:12	6	(ret < 0)
cond	34:16	34:22	7	ret < 0
water	34:16	0:0	8	ret
op	34:20	0:0	8	<
water	34:22	0:0	8	0
stmts	34:25	37:12	7	
water	34:25	0:0	8	{
call	35:16	35:40	8	av_frame_free
arg	35:30	35:40	9	&insamples
op	35:30	0:0	10	&
water	35:31	0:0	10	insamples
water	35:41	0:0	8	;
return	36:16	36:26	8	ret
water	36:23	0:0	9	ret
water	37:12	0:0	8	}
water	38:12	0:0	6	remaining
op	38:22	0:0	6	-=
water	38:25	0:0	6	s
op	38:26	0:0	6	->
water	38:28	0:0	6	remaining_fill
water	38:42	0:0	6	;
for	39:12	40:52	6	(m = 0 ;m < fft_len - step;m ++)
forinit	39:17	39:22	7	m = 0 ;
water	39:17	0:0	8	m
op	39:19	0:0	8	=
water	39:21	0:0	8	0
water	39:22	0:0	8	;
cond	39:24	39:36	7	m < fft_len - step
water	39:24	0:0	8	m
op	39:26	0:0	8	<
water	39:28	0:0	8	fft_len
op	39:35	0:0	8	-
water	39:36	0:0	8	step
forexpr	39:42	39:43	7	m ++
water	39:42	0:0	8	m
op	39:43	0:0	8	++
stmts	40:16	40:52	7	
water	40:16	0:0	8	s
op	40:17	0:0	8	->
water	40:19	0:0	8	fft_data
op	40:27	0:0	8	[
water	40:28	0:0	8	m
op	40:29	0:0	8	]
op	40:31	0:0	8	=
water	40:33	0:0	8	s
op	40:34	0:0	8	->
water	40:36	0:0	8	fft_data
op	40:44	0:0	8	[
water	40:45	0:0	8	m
op	40:46	0:0	8	+
water	40:47	0:0	8	step
op	40:51	0:0	8	]
water	40:52	0:0	8	;
water	41:12	0:0	6	s
op	41:13	0:0	6	->
water	41:15	0:0	6	remaining_fill
op	41:30	0:0	6	=
water	41:32	0:0	6	step
water	41:36	0:0	6	;
water	42:8	0:0	6	}
else	42:10	52:8	4
stmts	42:15	52:8	5	
water	42:15	0:0	6	{
decl	43:12	43:53	6	int	i
op	43:18	0:0	6	=
water	43:20	0:0	6	insamples
op	43:29	0:0	6	->
water	43:31	0:0	6	nb_samples
op	43:42	0:0	6	-
water	43:44	0:0	6	remaining
decl	44:12	44:47	6	int	j
op	44:18	0:0	6	=
water	44:20	0:0	6	fft_len
op	44:28	0:0	6	-
water	44:30	0:0	6	s
op	44:31	0:0	6	->
water	44:33	0:0	6	remaining_fill
decl	45:12	45:17	6	int	m
for	46:12	49:12	6	(m = 0 ;m < remaining;m ++)
forinit	46:17	46:22	7	m = 0 ;
water	46:17	0:0	8	m
op	46:19	0:0	8	=
water	46:21	0:0	8	0
water	46:22	0:0	8	;
cond	46:24	46:28	7	m < remaining
water	46:24	0:0	8	m
op	46:26	0:0	8	<
water	46:28	0:0	8	remaining
forexpr	46:39	46:40	7	m ++
water	46:39	0:0	8	m
op	46:40	0:0	8	++
stmts	46:44	49:12	7	
water	46:44	0:0	8	{
water	47:16	0:0	8	s
op	47:17	0:0	8	->
water	47:19	0:0	8	fft_data
op	47:27	0:0	8	[
water	47:28	0:0	8	m
op	47:29	0:0	8	+
water	47:30	0:0	8	j
op	47:31	0:0	8	]
op	47:32	0:0	8	.
water	47:33	0:0	8	re
op	47:36	0:0	8	=
water	47:38	0:0	8	audio_data
op	47:48	0:0	8	[
water	47:49	0:0	8	2
op	47:50	0:0	8	*
water	47:51	0:0	8	(
water	47:52	0:0	8	i
op	47:53	0:0	8	+
water	47:54	0:0	8	m
water	47:55	0:0	8	)
op	47:56	0:0	8	]
water	47:57	0:0	8	;
water	48:16	0:0	8	s
op	48:17	0:0	8	->
water	48:19	0:0	8	fft_data
op	48:27	0:0	8	[
water	48:28	0:0	8	m
op	48:29	0:0	8	+
water	48:30	0:0	8	j
op	48:31	0:0	8	]
op	48:32	0:0	8	.
water	48:33	0:0	8	im
op	48:36	0:0	8	=
water	48:38	0:0	8	audio_data
op	48:48	0:0	8	[
water	48:49	0:0	8	2
op	48:50	0:0	8	*
water	48:51	0:0	8	(
water	48:52	0:0	8	i
op	48:53	0:0	8	+
water	48:54	0:0	8	m
water	48:55	0:0	8	)
op	48:56	0:0	8	+
water	48:57	0:0	8	1
op	48:58	0:0	8	]
water	48:59	0:0	8	;
water	49:12	0:0	8	}
water	50:12	0:0	6	s
op	50:13	0:0	6	->
water	50:15	0:0	6	remaining_fill
op	50:30	0:0	6	-=
water	50:33	0:0	6	remaining
water	50:42	0:0	6	;
water	51:12	0:0	6	remaining
op	51:22	0:0	6	=
water	51:24	0:0	6	0
water	51:25	0:0	6	;
water	52:8	0:0	6	}
water	53:4	0:0	4	}
call	54:4	54:28	2	av_frame_free
arg	54:18	54:28	3	&insamples
op	54:18	0:0	4	&
water	54:19	0:0	4	insamples
water	54:29	0:0	2	;
return	55:4	55:12	2	0
water	55:11	0:0	3	0
