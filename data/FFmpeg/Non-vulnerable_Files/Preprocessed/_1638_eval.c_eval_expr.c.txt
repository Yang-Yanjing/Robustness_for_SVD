func	1:0	140:0	0	static double	eval_expr
params	1:23	0:0	1	
param	1:24	1:33	2	Parser *	p
param	1:35	1:44	2	AVExpr *	e
stmnts	3:4	139:14	1	
switch	3:4	138:4	2	(e -> type)
cond	3:12	3:15	3	e -> type
water	3:12	0:0	4	e
op	3:13	0:0	4	->
water	3:15	0:0	4	type
stmts	3:21	138:4	3	
water	3:21	0:0	4	{
label	4:8	4:20	4	case e_value :
return	4:23	4:38	4	e->value
water	4:30	0:0	5	e
op	4:31	0:0	5	->
water	4:33	0:0	5	value
label	5:8	5:20	4	case e_const :
return	5:23	5:74	4	e->value*p->const_values[e->a.const_index]
water	5:30	0:0	5	e
op	5:31	0:0	5	->
water	5:33	0:0	5	value
op	5:39	0:0	5	*
water	5:41	0:0	5	p
op	5:42	0:0	5	->
water	5:44	0:0	5	const_values
op	5:56	0:0	5	[
water	5:57	0:0	5	e
op	5:58	0:0	5	->
water	5:60	0:0	5	a
op	5:61	0:0	5	.
water	5:62	0:0	5	const_index
op	5:73	0:0	5	]
label	6:8	6:20	4	case e_func0 :
return	6:23	6:78	4	e->value*e->a.func0(eval_expr(p,e->param[0]))
water	6:30	0:0	5	e
op	6:31	0:0	5	->
water	6:33	0:0	5	value
call	6:39	6:77	5	*e->a.func0
arg	6:52	6:77	6	eval_expr(p,e->param[0])
call	6:52	6:76	7	eval_expr
arg	6:62	6:63	8	p
water	6:62	0:0	9	p
arg	6:65	6:76	8	e->param[0]
water	6:65	0:0	9	e
op	6:66	0:0	9	->
water	6:68	0:0	9	param
op	6:73	0:0	9	[
water	6:74	0:0	9	0
op	6:75	0:0	9	]
label	7:8	7:20	4	case e_func1 :
return	7:23	7:89	4	e->value*e->a.func1(p->opaque,eval_expr(p,e->param[0]))
water	7:30	0:0	5	e
op	7:31	0:0	5	->
water	7:33	0:0	5	value
call	7:39	7:88	5	*e->a.func1
arg	7:52	7:61	6	p->opaque
water	7:52	0:0	7	p
op	7:53	0:0	7	->
water	7:55	0:0	7	opaque
arg	7:63	7:88	6	eval_expr(p,e->param[0])
call	7:63	7:87	7	eval_expr
arg	7:73	7:74	8	p
water	7:73	0:0	9	p
arg	7:76	7:87	8	e->param[0]
water	7:76	0:0	9	e
op	7:77	0:0	9	->
water	7:79	0:0	9	param
op	7:84	0:0	9	[
water	7:85	0:0	9	0
op	7:86	0:0	9	]
label	8:8	8:20	4	case e_func2 :
return	8:23	8:116	4	e->value*e->a.func2(p->opaque,eval_expr(p,e->param[0]),eval_expr(p,e->param[1]))
water	8:30	0:0	5	e
op	8:31	0:0	5	->
water	8:33	0:0	5	value
call	8:39	8:115	5	*e->a.func2
arg	8:52	8:61	6	p->opaque
water	8:52	0:0	7	p
op	8:53	0:0	7	->
water	8:55	0:0	7	opaque
arg	8:63	8:88	6	eval_expr(p,e->param[0])
call	8:63	8:87	7	eval_expr
arg	8:73	8:74	8	p
water	8:73	0:0	9	p
arg	8:76	8:87	8	e->param[0]
water	8:76	0:0	9	e
op	8:77	0:0	9	->
water	8:79	0:0	9	param
op	8:84	0:0	9	[
water	8:85	0:0	9	0
op	8:86	0:0	9	]
arg	8:90	8:115	6	eval_expr(p,e->param[1])
call	8:90	8:114	7	eval_expr
arg	8:100	8:101	8	p
water	8:100	0:0	9	p
arg	8:103	8:114	8	e->param[1]
water	8:103	0:0	9	e
op	8:104	0:0	9	->
water	8:106	0:0	9	param
op	8:111	0:0	9	[
water	8:112	0:0	9	1
op	8:113	0:0	9	]
label	9:8	9:21	4	case e_squish :
return	9:23	9:68	4	1/(1+exp(4*eval_expr(p,e->param[0])))
water	9:30	0:0	5	1
op	9:31	0:0	5	/
water	9:32	0:0	5	(
water	9:33	0:0	5	1
op	9:34	0:0	5	+
call	9:35	9:66	5	exp
arg	9:39	9:66	6	4*eval_expr(p,e->param[0])
water	9:39	0:0	7	4
call	9:40	9:65	7	*eval_expr
arg	9:51	9:52	8	p
water	9:51	0:0	9	p
arg	9:54	9:65	8	e->param[0]
water	9:54	0:0	9	e
op	9:55	0:0	9	->
water	9:57	0:0	9	param
op	9:62	0:0	9	[
water	9:63	0:0	9	0
op	9:64	0:0	9	]
water	9:67	0:0	5	)
label	10:8	10:20	4	case e_gauss :
water	10:22	0:0	4	{
decl	10:24	10:60	4	double	d
op	10:33	0:0	4	=
call	10:35	10:59	5	eval_expr
arg	10:45	10:46	6	p
water	10:45	0:0	7	p
arg	10:48	10:59	6	e->param[0]
water	10:48	0:0	7	e
op	10:49	0:0	7	->
water	10:51	0:0	7	param
op	10:56	0:0	7	[
water	10:57	0:0	7	0
op	10:58	0:0	7	]
return	10:62	10:93	4	exp(-d*d/2)/sqrt(2*M_PI)
call	10:69	10:79	5	exp
arg	10:73	10:79	6	-d*d/2
op	10:73	0:0	7	-
water	10:74	0:0	7	d
op	10:75	0:0	7	*
water	10:76	0:0	7	d
op	10:77	0:0	7	/
water	10:78	0:0	7	2
op	10:80	0:0	5	/
call	10:81	10:92	5	sqrt
arg	10:86	10:92	6	2*M_PI
water	10:86	0:0	7	2
op	10:87	0:0	7	*
water	10:88	0:0	7	M_PI
water	10:95	0:0	4	}
label	11:8	11:17	4	case e_ld :
return	11:23	11:94	4	e->value*p->var[av_clip(eval_expr(p,e->param[0]),0,VARS-1)]
water	11:30	0:0	5	e
op	11:31	0:0	5	->
water	11:33	0:0	5	value
op	11:39	0:0	5	*
water	11:41	0:0	5	p
op	11:42	0:0	5	->
water	11:44	0:0	5	var
op	11:47	0:0	5	[
call	11:48	11:92	5	av_clip
arg	11:56	11:81	6	eval_expr(p,e->param[0])
call	11:56	11:80	7	eval_expr
arg	11:66	11:67	8	p
water	11:66	0:0	9	p
arg	11:69	11:80	8	e->param[0]
water	11:69	0:0	9	e
op	11:70	0:0	9	->
water	11:72	0:0	9	param
op	11:77	0:0	9	[
water	11:78	0:0	9	0
op	11:79	0:0	9	]
arg	11:83	11:84	6	0
water	11:83	0:0	7	0
arg	11:86	11:92	6	VARS-1
water	11:86	0:0	7	VARS
op	11:90	0:0	7	-
water	11:91	0:0	7	1
op	11:93	0:0	5	]
label	12:8	12:20	4	case e_isnan :
return	12:23	12:75	4	e->value*!!isnan(eval_expr(p,e->param[0]))
water	12:30	0:0	5	e
op	12:31	0:0	5	->
water	12:33	0:0	5	value
op	12:39	0:0	5	*
op	12:41	0:0	5	!
op	12:42	0:0	5	!
call	12:43	12:74	5	isnan
arg	12:49	12:74	6	eval_expr(p,e->param[0])
call	12:49	12:73	7	eval_expr
arg	12:59	12:60	8	p
water	12:59	0:0	9	p
arg	12:62	12:73	8	e->param[0]
water	12:62	0:0	9	e
op	12:63	0:0	9	->
water	12:65	0:0	9	param
op	12:70	0:0	9	[
water	12:71	0:0	9	0
op	12:72	0:0	9	]
label	13:8	13:20	4	case e_isinf :
return	13:23	13:75	4	e->value*!!isinf(eval_expr(p,e->param[0]))
water	13:30	0:0	5	e
op	13:31	0:0	5	->
water	13:33	0:0	5	value
op	13:39	0:0	5	*
op	13:41	0:0	5	!
op	13:42	0:0	5	!
call	13:43	13:74	5	isinf
arg	13:49	13:74	6	eval_expr(p,e->param[0])
call	13:49	13:73	7	eval_expr
arg	13:59	13:60	8	p
water	13:59	0:0	9	p
arg	13:62	13:73	8	e->param[0]
water	13:62	0:0	9	e
op	13:63	0:0	9	->
water	13:65	0:0	9	param
op	13:70	0:0	9	[
water	13:71	0:0	9	0
op	13:72	0:0	9	]
label	14:8	14:20	4	case e_floor :
return	14:23	14:73	4	e->value*floor(eval_expr(p,e->param[0]))
water	14:30	0:0	5	e
op	14:31	0:0	5	->
water	14:33	0:0	5	value
call	14:39	14:72	5	*floor
arg	14:47	14:72	6	eval_expr(p,e->param[0])
call	14:47	14:71	7	eval_expr
arg	14:57	14:58	8	p
water	14:57	0:0	9	p
arg	14:60	14:71	8	e->param[0]
water	14:60	0:0	9	e
op	14:61	0:0	9	->
water	14:63	0:0	9	param
op	14:68	0:0	9	[
water	14:69	0:0	9	0
op	14:70	0:0	9	]
label	15:8	15:20	4	case e_ceil :
return	15:23	15:73	4	e->value*ceil(eval_expr(p,e->param[0]))
water	15:30	0:0	5	e
op	15:31	0:0	5	->
water	15:33	0:0	5	value
call	15:39	15:72	5	*ceil
arg	15:47	15:72	6	eval_expr(p,e->param[0])
call	15:47	15:71	7	eval_expr
arg	15:57	15:58	8	p
water	15:57	0:0	9	p
arg	15:60	15:71	8	e->param[0]
water	15:60	0:0	9	e
op	15:61	0:0	9	->
water	15:63	0:0	9	param
op	15:68	0:0	9	[
water	15:69	0:0	9	0
op	15:70	0:0	9	]
label	16:8	16:20	4	case e_trunc :
return	16:23	16:73	4	e->value*trunc(eval_expr(p,e->param[0]))
water	16:30	0:0	5	e
op	16:31	0:0	5	->
water	16:33	0:0	5	value
call	16:39	16:72	5	*trunc
arg	16:47	16:72	6	eval_expr(p,e->param[0])
call	16:47	16:71	7	eval_expr
arg	16:57	16:58	8	p
water	16:57	0:0	9	p
arg	16:60	16:71	8	e->param[0]
water	16:60	0:0	9	e
op	16:61	0:0	9	->
water	16:63	0:0	9	param
op	16:68	0:0	9	[
water	16:69	0:0	9	0
op	16:70	0:0	9	]
label	17:8	17:19	4	case e_sqrt :
return	17:23	17:73	4	e->value*sqrt(eval_expr(p,e->param[0]))
water	17:30	0:0	5	e
op	17:31	0:0	5	->
water	17:33	0:0	5	value
call	17:39	17:72	5	*sqrt
arg	17:47	17:72	6	eval_expr(p,e->param[0])
call	17:47	17:71	7	eval_expr
arg	17:57	17:58	8	p
water	17:57	0:0	9	p
arg	17:60	17:71	8	e->param[0]
water	17:60	0:0	9	e
op	17:61	0:0	9	->
water	17:63	0:0	9	param
op	17:68	0:0	9	[
water	17:69	0:0	9	0
op	17:70	0:0	9	]
label	18:8	18:18	4	case e_not :
return	18:23	18:73	4	e->value*(eval_expr(p,e->param[0])==0)
water	18:30	0:0	5	e
op	18:31	0:0	5	->
water	18:33	0:0	5	value
op	18:39	0:0	5	*
water	18:41	0:0	5	(
call	18:42	18:66	5	eval_expr
arg	18:52	18:53	6	p
water	18:52	0:0	7	p
arg	18:55	18:66	6	e->param[0]
water	18:55	0:0	7	e
op	18:56	0:0	7	->
water	18:58	0:0	7	param
op	18:63	0:0	7	[
water	18:64	0:0	7	0
op	18:65	0:0	7	]
op	18:68	0:0	5	==
water	18:71	0:0	5	0
water	18:72	0:0	5	)
label	19:8	19:17	4	case e_if :
return	19:23	20:86	4	e->value*(eval_expr(p,e->param[0])?eval_expr(p,e->param[1]):e->param[2]?eval_expr(p,e->param[2]):0)
water	19:30	0:0	5	e
op	19:31	0:0	5	->
water	19:33	0:0	5	value
op	19:39	0:0	5	*
water	19:41	0:0	5	(
call	19:42	19:66	5	eval_expr
arg	19:52	19:53	6	p
water	19:52	0:0	7	p
arg	19:55	19:66	6	e->param[0]
water	19:55	0:0	7	e
op	19:56	0:0	7	->
water	19:58	0:0	7	param
op	19:63	0:0	7	[
water	19:64	0:0	7	0
op	19:65	0:0	7	]
water	19:68	0:0	5	?
call	19:70	19:94	5	eval_expr
arg	19:80	19:81	6	p
water	19:80	0:0	7	p
arg	19:83	19:94	6	e->param[1]
water	19:83	0:0	7	e
op	19:84	0:0	7	->
water	19:86	0:0	7	param
op	19:91	0:0	7	[
water	19:92	0:0	7	1
op	19:93	0:0	7	]
water	19:96	0:0	5	:
water	20:42	0:0	5	e
op	20:43	0:0	5	->
water	20:45	0:0	5	param
op	20:50	0:0	5	[
water	20:51	0:0	5	2
op	20:52	0:0	5	]
water	20:54	0:0	5	?
call	20:56	20:80	5	eval_expr
arg	20:66	20:67	6	p
water	20:66	0:0	7	p
arg	20:69	20:80	6	e->param[2]
water	20:69	0:0	7	e
op	20:70	0:0	7	->
water	20:72	0:0	7	param
op	20:77	0:0	7	[
water	20:78	0:0	7	2
op	20:79	0:0	7	]
water	20:82	0:0	5	:
water	20:84	0:0	5	0
water	20:85	0:0	5	)
label	21:8	21:20	4	case e_ifnot :
return	21:23	22:86	4	e->value*(!eval_expr(p,e->param[0])?eval_expr(p,e->param[1]):e->param[2]?eval_expr(p,e->param[2]):0)
water	21:30	0:0	5	e
op	21:31	0:0	5	->
water	21:33	0:0	5	value
op	21:39	0:0	5	*
water	21:41	0:0	5	(
op	21:42	0:0	5	!
call	21:43	21:67	5	eval_expr
arg	21:53	21:54	6	p
water	21:53	0:0	7	p
arg	21:56	21:67	6	e->param[0]
water	21:56	0:0	7	e
op	21:57	0:0	7	->
water	21:59	0:0	7	param
op	21:64	0:0	7	[
water	21:65	0:0	7	0
op	21:66	0:0	7	]
water	21:69	0:0	5	?
call	21:71	21:95	5	eval_expr
arg	21:81	21:82	6	p
water	21:81	0:0	7	p
arg	21:84	21:95	6	e->param[1]
water	21:84	0:0	7	e
op	21:85	0:0	7	->
water	21:87	0:0	7	param
op	21:92	0:0	7	[
water	21:93	0:0	7	1
op	21:94	0:0	7	]
water	21:97	0:0	5	:
water	22:42	0:0	5	e
op	22:43	0:0	5	->
water	22:45	0:0	5	param
op	22:50	0:0	5	[
water	22:51	0:0	5	2
op	22:52	0:0	5	]
water	22:54	0:0	5	?
call	22:56	22:80	5	eval_expr
arg	22:66	22:67	6	p
water	22:66	0:0	7	p
arg	22:69	22:80	6	e->param[2]
water	22:69	0:0	7	e
op	22:70	0:0	7	->
water	22:72	0:0	7	param
op	22:77	0:0	7	[
water	22:78	0:0	7	2
op	22:79	0:0	7	]
water	22:82	0:0	5	:
water	22:84	0:0	5	0
water	22:85	0:0	5	)
label	23:8	23:19	4	case e_clip :
water	23:21	0:0	4	{
decl	24:12	24:48	4	double	x
op	24:21	0:0	4	=
call	24:23	24:47	5	eval_expr
arg	24:33	24:34	6	p
water	24:33	0:0	7	p
arg	24:36	24:47	6	e->param[0]
water	24:36	0:0	7	e
op	24:37	0:0	7	->
water	24:39	0:0	7	param
op	24:44	0:0	7	[
water	24:45	0:0	7	0
op	24:46	0:0	7	]
decl	25:12	25:83	4	double	min
op	25:23	0:0	4	=
call	25:25	25:49	5	eval_expr
arg	25:35	25:36	6	p
water	25:35	0:0	7	p
arg	25:38	25:49	6	e->param[1]
water	25:38	0:0	7	e
op	25:39	0:0	7	->
water	25:41	0:0	7	param
op	25:46	0:0	7	[
water	25:47	0:0	7	1
op	25:48	0:0	7	]
water	25:50	0:0	4	,
decl	25:12	25:83	4	double	max
op	25:56	0:0	4	=
call	25:58	25:82	5	eval_expr
arg	25:68	25:69	6	p
water	25:68	0:0	7	p
arg	25:71	25:82	6	e->param[2]
water	25:71	0:0	7	e
op	25:72	0:0	7	->
water	25:74	0:0	7	param
op	25:79	0:0	7	[
water	25:80	0:0	7	2
op	25:81	0:0	7	]
if	26:12	27:26	4	(isnan (min ) ||isnan (max ) ||isnan (x ) || min > max)
cond	26:16	26:62	5	isnan (min ) ||isnan (max ) ||isnan (x ) || min > max
call	26:16	26:25	6	isnan
arg	26:22	26:25	7	min
water	26:22	0:0	8	min
op	26:27	0:0	6	||
call	26:30	26:39	6	isnan
arg	26:36	26:39	7	max
water	26:36	0:0	8	max
op	26:41	0:0	6	||
call	26:44	26:51	6	isnan
arg	26:50	26:51	7	x
water	26:50	0:0	8	x
op	26:53	0:0	6	||
water	26:56	0:0	6	min
op	26:60	0:0	6	>
water	26:62	0:0	6	max
stmts	27:16	27:26	5	
return	27:16	27:26	6	NAN
water	27:23	0:0	7	NAN
return	28:12	28:75	4	e->value*av_clipd(eval_expr(p,e->param[0]),min,max)
water	28:19	0:0	5	e
op	28:20	0:0	5	->
water	28:22	0:0	5	value
call	28:28	28:74	5	*av_clipd
arg	28:39	28:64	6	eval_expr(p,e->param[0])
call	28:39	28:63	7	eval_expr
arg	28:49	28:50	8	p
water	28:49	0:0	9	p
arg	28:52	28:63	8	e->param[0]
water	28:52	0:0	9	e
op	28:53	0:0	9	->
water	28:55	0:0	9	param
op	28:60	0:0	9	[
water	28:61	0:0	9	0
op	28:62	0:0	9	]
arg	28:66	28:69	6	min
water	28:66	0:0	7	min
arg	28:71	28:74	6	max
water	28:71	0:0	7	max
water	29:8	0:0	4	}
label	30:8	30:22	4	case e_between :
water	30:24	0:0	4	{
decl	31:12	31:48	4	double	d
op	31:21	0:0	4	=
call	31:23	31:47	5	eval_expr
arg	31:33	31:34	6	p
water	31:33	0:0	7	p
arg	31:36	31:47	6	e->param[0]
water	31:36	0:0	7	e
op	31:37	0:0	7	->
water	31:39	0:0	7	param
op	31:44	0:0	7	[
water	31:45	0:0	7	0
op	31:46	0:0	7	]
return	32:12	33:62	4	e->value*(d>=eval_expr(p,e->param[1])&&d<=eval_expr(p,e->param[2]))
water	32:19	0:0	5	e
op	32:20	0:0	5	->
water	32:22	0:0	5	value
op	32:28	0:0	5	*
water	32:30	0:0	5	(
water	32:31	0:0	5	d
op	32:33	0:0	5	>=
call	32:36	32:60	5	eval_expr
arg	32:46	32:47	6	p
water	32:46	0:0	7	p
arg	32:49	32:60	6	e->param[1]
water	32:49	0:0	7	e
op	32:50	0:0	7	->
water	32:52	0:0	7	param
op	32:57	0:0	7	[
water	32:58	0:0	7	1
op	32:59	0:0	7	]
op	32:62	0:0	5	&&
water	33:31	0:0	5	d
op	33:33	0:0	5	<=
call	33:36	33:60	5	eval_expr
arg	33:46	33:47	6	p
water	33:46	0:0	7	p
arg	33:49	33:60	6	e->param[2]
water	33:49	0:0	7	e
op	33:50	0:0	7	->
water	33:52	0:0	7	param
op	33:57	0:0	7	[
water	33:58	0:0	7	2
op	33:59	0:0	7	]
water	33:61	0:0	5	)
water	34:8	0:0	4	}
label	35:8	35:20	4	case e_print :
water	35:22	0:0	4	{
decl	36:12	36:48	4	double	x
op	36:21	0:0	4	=
call	36:23	36:47	5	eval_expr
arg	36:33	36:34	6	p
water	36:33	0:0	7	p
arg	36:36	36:47	6	e->param[0]
water	36:36	0:0	7	e
op	36:37	0:0	7	->
water	36:39	0:0	7	param
op	36:44	0:0	7	[
water	36:45	0:0	7	0
op	36:46	0:0	7	]
decl	37:12	37:104	4	int	level
op	37:22	0:0	4	=
water	37:24	0:0	4	e
op	37:25	0:0	4	->
water	37:27	0:0	4	param
op	37:32	0:0	4	[
water	37:33	0:0	4	1
op	37:34	0:0	4	]
water	37:36	0:0	4	?
call	37:38	37:89	5	av_clip
arg	37:46	37:71	6	eval_expr(p,e->param[1])
call	37:46	37:70	7	eval_expr
arg	37:56	37:57	8	p
water	37:56	0:0	9	p
arg	37:59	37:70	8	e->param[1]
water	37:59	0:0	9	e
op	37:60	0:0	9	->
water	37:62	0:0	9	param
op	37:67	0:0	9	[
water	37:68	0:0	9	1
op	37:69	0:0	9	]
arg	37:73	37:80	6	INT_MIN
water	37:73	0:0	7	INT_MIN
arg	37:82	37:89	6	INT_MAX
water	37:82	0:0	7	INT_MAX
water	37:91	0:0	4	:
water	37:93	0:0	4	AV_LOG_INFO
call	38:12	38:38	4	av_log
arg	38:19	38:20	5	p
water	38:19	0:0	6	p
arg	38:22	38:27	5	level
water	38:22	0:0	6	level
arg	38:29	38:35	5	"%f\n"
water	38:29	0:0	6	"%f\n"
arg	38:37	38:38	5	x
water	38:37	0:0	6	x
water	38:39	0:0	4	;
return	39:12	39:20	4	x
water	39:19	0:0	5	x
water	40:8	0:0	4	}
label	41:8	41:21	4	case e_random :
water	41:22	0:0	4	{
decl	42:12	42:66	4	int	idx
op	42:19	0:0	4	=
call	42:21	42:65	5	av_clip
arg	42:29	42:54	6	eval_expr(p,e->param[0])
call	42:29	42:53	7	eval_expr
arg	42:39	42:40	8	p
water	42:39	0:0	9	p
arg	42:42	42:53	8	e->param[0]
water	42:42	0:0	9	e
op	42:43	0:0	9	->
water	42:45	0:0	9	param
op	42:50	0:0	9	[
water	42:51	0:0	9	0
op	42:52	0:0	9	]
arg	42:56	42:57	6	0
water	42:56	0:0	7	0
arg	42:59	42:65	6	VARS-1
water	42:59	0:0	7	VARS
op	42:63	0:0	7	-
water	42:64	0:0	7	1
decl	43:12	43:60	4	uint64_t	r
op	43:22	0:0	4	=
call	43:24	43:41	5	isnan
arg	43:30	43:41	6	p->var[idx]
water	43:30	0:0	7	p
op	43:31	0:0	7	->
water	43:33	0:0	7	var
op	43:36	0:0	7	[
water	43:37	0:0	7	idx
op	43:40	0:0	7	]
water	43:43	0:0	4	?
water	43:45	0:0	4	0
water	43:47	0:0	4	:
water	43:49	0:0	4	p
op	43:50	0:0	4	->
water	43:52	0:0	4	var
op	43:55	0:0	4	[
water	43:56	0:0	4	idx
op	43:59	0:0	4	]
water	44:12	0:0	4	r
op	44:13	0:0	4	=
water	44:15	0:0	4	r
op	44:16	0:0	4	*
water	44:17	0:0	4	1664525
op	44:24	0:0	4	+
water	44:25	0:0	4	1013904223
water	44:35	0:0	4	;
water	45:12	0:0	4	p
op	45:13	0:0	4	->
water	45:15	0:0	4	var
op	45:18	0:0	4	[
water	45:19	0:0	4	idx
op	45:22	0:0	4	]
op	45:23	0:0	4	=
water	45:25	0:0	4	r
water	45:26	0:0	4	;
return	46:12	46:52	4	e->value*(r*(1.0/UINT64_MAX))
water	46:19	0:0	5	e
op	46:20	0:0	5	->
water	46:22	0:0	5	value
op	46:28	0:0	5	*
water	46:30	0:0	5	(
water	46:31	0:0	5	r
op	46:33	0:0	5	*
water	46:35	0:0	5	(
water	46:36	0:0	5	1
op	46:37	0:0	5	.
water	46:38	0:0	5	0
op	46:39	0:0	5	/
water	46:40	0:0	5	UINT64_MAX
water	46:50	0:0	5	)
water	46:51	0:0	5	)
water	47:8	0:0	4	}
label	48:8	48:20	4	case e_while :
water	48:22	0:0	4	{
decl	49:12	49:26	4	double	d
op	49:21	0:0	4	=
water	49:23	0:0	4	NAN
while	50:12	51:43	4	(eval_expr (p ,e -> param [ 0 ] ))
cond	50:19	50:43	5	eval_expr (p ,e -> param [ 0 ] )
call	50:19	50:43	6	eval_expr
arg	50:29	50:30	7	p
water	50:29	0:0	8	p
arg	50:32	50:43	7	e->param[0]
water	50:32	0:0	8	e
op	50:33	0:0	8	->
water	50:35	0:0	8	param
op	50:40	0:0	8	[
water	50:41	0:0	8	0
op	50:42	0:0	8	]
stmts	51:16	51:43	5	
water	51:16	0:0	6	d
op	51:17	0:0	6	=
call	51:18	51:42	6	eval_expr
arg	51:28	51:29	7	p
water	51:28	0:0	8	p
arg	51:31	51:42	7	e->param[1]
water	51:31	0:0	8	e
op	51:32	0:0	8	->
water	51:34	0:0	8	param
op	51:39	0:0	8	[
water	51:40	0:0	8	1
op	51:41	0:0	8	]
water	51:43	0:0	6	;
return	52:12	52:20	4	d
water	52:19	0:0	5	d
water	53:8	0:0	4	}
label	54:8	54:21	4	case e_taylor :
water	54:23	0:0	4	{
decl	55:12	55:34	4	double	t
op	55:21	0:0	4	=
water	55:23	0:0	4	1
water	55:24	0:0	4	,
decl	55:12	55:34	4	double	d
op	55:28	0:0	4	=
water	55:30	0:0	4	0
water	55:31	0:0	4	,
decl	55:12	55:34	4	double	v
decl	56:12	56:48	4	double	x
op	56:21	0:0	4	=
call	56:23	56:47	5	eval_expr
arg	56:33	56:34	6	p
water	56:33	0:0	7	p
arg	56:36	56:47	6	e->param[1]
water	56:36	0:0	7	e
op	56:37	0:0	7	->
water	56:39	0:0	7	param
op	56:44	0:0	7	[
water	56:45	0:0	7	1
op	56:46	0:0	7	]
decl	57:12	57:84	4	int	id
op	57:19	0:0	4	=
water	57:21	0:0	4	e
op	57:22	0:0	4	->
water	57:24	0:0	4	param
op	57:29	0:0	4	[
water	57:30	0:0	4	2
op	57:31	0:0	4	]
water	57:33	0:0	4	?
call	57:35	57:79	5	av_clip
arg	57:43	57:68	6	eval_expr(p,e->param[2])
call	57:43	57:67	7	eval_expr
arg	57:53	57:54	8	p
water	57:53	0:0	9	p
arg	57:56	57:67	8	e->param[2]
water	57:56	0:0	9	e
op	57:57	0:0	9	->
water	57:59	0:0	9	param
op	57:64	0:0	9	[
water	57:65	0:0	9	2
op	57:66	0:0	9	]
arg	57:70	57:71	6	0
water	57:70	0:0	7	0
arg	57:73	57:79	6	VARS-1
water	57:73	0:0	7	VARS
op	57:77	0:0	7	-
water	57:78	0:0	7	1
water	57:81	0:0	4	:
water	57:83	0:0	4	0
decl	58:12	58:17	4	int	i
decl	59:12	59:36	4	double	var0
op	59:24	0:0	4	=
water	59:26	0:0	4	p
op	59:27	0:0	4	->
water	59:29	0:0	4	var
op	59:32	0:0	4	[
water	59:33	0:0	4	id
op	59:35	0:0	4	]
for	60:12	68:12	4	(i = 0 ;i < 1000;i ++)
forinit	60:16	60:19	5	i = 0 ;
water	60:16	0:0	6	i
op	60:17	0:0	6	=
water	60:18	0:0	6	0
water	60:19	0:0	6	;
cond	60:21	60:23	5	i < 1000
water	60:21	0:0	6	i
op	60:22	0:0	6	<
water	60:23	0:0	6	1000
forexpr	60:29	60:30	5	i ++
water	60:29	0:0	6	i
op	60:30	0:0	6	++
stmts	60:34	68:12	5	
water	60:34	0:0	6	{
decl	61:16	61:29	6	double	ld
op	61:26	0:0	6	=
water	61:28	0:0	6	d
water	62:16	0:0	6	p
op	62:17	0:0	6	->
water	62:19	0:0	6	var
op	62:22	0:0	6	[
water	62:23	0:0	6	id
op	62:25	0:0	6	]
op	62:27	0:0	6	=
water	62:29	0:0	6	i
water	62:30	0:0	6	;
water	63:16	0:0	6	v
op	63:18	0:0	6	=
call	63:20	63:44	6	eval_expr
arg	63:30	63:31	7	p
water	63:30	0:0	8	p
arg	63:33	63:44	7	e->param[0]
water	63:33	0:0	8	e
op	63:34	0:0	8	->
water	63:36	0:0	8	param
op	63:41	0:0	8	[
water	63:42	0:0	8	0
op	63:43	0:0	8	]
water	63:45	0:0	6	;
water	64:16	0:0	6	d
op	64:18	0:0	6	+=
water	64:21	0:0	6	t
op	64:22	0:0	6	*
water	64:23	0:0	6	v
water	64:24	0:0	6	;
if	65:16	66:25	6	(ld == d && v)
cond	65:19	65:28	7	ld == d && v
water	65:19	0:0	8	ld
op	65:21	0:0	8	==
water	65:23	0:0	8	d
op	65:25	0:0	8	&&
water	65:28	0:0	8	v
stmts	66:20	66:25	7	
break	66:20	66:25	8	
water	67:16	0:0	6	t
op	67:18	0:0	6	*=
water	67:21	0:0	6	x
op	67:23	0:0	6	/
water	67:25	0:0	6	(
water	67:26	0:0	6	i
op	67:27	0:0	6	+
water	67:28	0:0	6	1
water	67:29	0:0	6	)
water	67:30	0:0	6	;
water	68:12	0:0	6	}
water	69:12	0:0	4	p
op	69:13	0:0	4	->
water	69:15	0:0	4	var
op	69:18	0:0	4	[
water	69:19	0:0	4	id
op	69:21	0:0	4	]
op	69:23	0:0	4	=
water	69:25	0:0	4	var0
water	69:29	0:0	4	;
return	70:12	70:20	4	d
water	70:19	0:0	5	d
water	71:8	0:0	4	}
label	72:8	72:19	4	case e_root :
water	72:21	0:0	4	{
decl	73:12	73:20	4	int	i
water	73:17	0:0	4	,
decl	73:12	73:20	4	int	j
decl	74:12	74:77	4	double	low
op	74:23	0:0	4	=
op	74:25	0:0	4	-
water	74:26	0:0	4	1
water	74:27	0:0	4	,
decl	74:12	74:77	4	double	high
op	74:34	0:0	4	=
op	74:36	0:0	4	-
water	74:37	0:0	4	1
water	74:38	0:0	4	,
decl	74:12	74:77	4	double	v
water	74:41	0:0	4	,
decl	74:12	74:77	4	double	low_v
op	74:49	0:0	4	=
op	74:51	0:0	4	-
water	74:52	0:0	4	DBL_MAX
water	74:59	0:0	4	,
decl	74:12	74:77	4	double	high_v
op	74:68	0:0	4	=
water	74:70	0:0	4	DBL_MAX
decl	75:12	75:35	4	double	var0
op	75:24	0:0	4	=
water	75:26	0:0	4	p
op	75:27	0:0	4	->
water	75:29	0:0	4	var
op	75:32	0:0	4	[
water	75:33	0:0	4	0
op	75:34	0:0	4	]
decl	76:12	76:52	4	double	x_max
op	76:25	0:0	4	=
call	76:27	76:51	5	eval_expr
arg	76:37	76:38	6	p
water	76:37	0:0	7	p
arg	76:40	76:51	6	e->param[1]
water	76:40	0:0	7	e
op	76:41	0:0	7	->
water	76:43	0:0	7	param
op	76:48	0:0	7	[
water	76:49	0:0	7	1
op	76:50	0:0	7	]
for	77:12	110:12	4	(i = - 1 ;i < 1024;i ++)
forinit	77:16	77:20	5	i = - 1 ;
water	77:16	0:0	6	i
op	77:17	0:0	6	=
op	77:18	0:0	6	-
water	77:19	0:0	6	1
water	77:20	0:0	6	;
cond	77:22	77:24	5	i < 1024
water	77:22	0:0	6	i
op	77:23	0:0	6	<
water	77:24	0:0	6	1024
forexpr	77:30	77:31	5	i ++
water	77:30	0:0	6	i
op	77:31	0:0	6	++
stmts	77:35	110:12	5	
water	77:35	0:0	6	{
if	78:16	80:16	6	(i < 255)
cond	78:19	78:21	7	i < 255
water	78:19	0:0	8	i
op	78:20	0:0	8	<
water	78:21	0:0	8	255
stmts	78:26	80:16	7	
water	78:26	0:0	8	{
water	79:20	0:0	8	p
op	79:21	0:0	8	->
water	79:23	0:0	8	var
op	79:26	0:0	8	[
water	79:27	0:0	8	0
op	79:28	0:0	8	]
op	79:30	0:0	8	=
water	79:32	0:0	8	ff_reverse
op	79:42	0:0	8	[
water	79:43	0:0	8	i
op	79:44	0:0	8	&
water	79:45	0:0	8	255
op	79:48	0:0	8	]
op	79:49	0:0	8	*
water	79:50	0:0	8	x_max
op	79:55	0:0	8	/
water	79:56	0:0	8	255
water	79:59	0:0	8	;
water	80:16	0:0	8	}
else	80:18	85:16	6
stmts	80:23	85:16	7	
water	80:23	0:0	8	{
water	81:20	0:0	8	p
op	81:21	0:0	8	->
water	81:23	0:0	8	var
op	81:26	0:0	8	[
water	81:27	0:0	8	0
op	81:28	0:0	8	]
op	81:30	0:0	8	=
water	81:32	0:0	8	x_max
call	81:37	81:52	8	*pow
arg	81:42	81:45	9	0.9
water	81:42	0:0	10	0
op	81:43	0:0	10	.
water	81:44	0:0	10	9
arg	81:47	81:52	9	i-255
water	81:47	0:0	10	i
op	81:48	0:0	10	-
water	81:49	0:0	10	255
water	81:53	0:0	8	;
if	82:20	82:44	8	(i & 1)
cond	82:24	82:26	9	i & 1
water	82:24	0:0	10	i
op	82:25	0:0	10	&
water	82:26	0:0	10	1
stmts	82:29	82:44	9	
water	82:29	0:0	10	p
op	82:30	0:0	10	->
water	82:32	0:0	10	var
op	82:35	0:0	10	[
water	82:36	0:0	10	0
op	82:37	0:0	10	]
op	82:39	0:0	10	*=
op	82:42	0:0	10	-
water	82:43	0:0	10	1
water	82:44	0:0	10	;
if	83:20	83:45	8	(i & 2)
cond	83:24	83:26	9	i & 2
water	83:24	0:0	10	i
op	83:25	0:0	10	&
water	83:26	0:0	10	2
stmts	83:29	83:45	9	
water	83:29	0:0	10	p
op	83:30	0:0	10	->
water	83:32	0:0	10	var
op	83:35	0:0	10	[
water	83:36	0:0	10	0
op	83:37	0:0	10	]
op	83:39	0:0	10	+=
water	83:42	0:0	10	low
water	83:45	0:0	10	;
else	84:20	84:46	8
stmts	84:29	84:46	9	
water	84:29	0:0	10	p
op	84:30	0:0	10	->
water	84:32	0:0	10	var
op	84:35	0:0	10	[
water	84:36	0:0	10	0
op	84:37	0:0	10	]
op	84:39	0:0	10	+=
water	84:42	0:0	10	high
water	84:46	0:0	10	;
water	85:16	0:0	8	}
water	86:16	0:0	6	v
op	86:18	0:0	6	=
call	86:20	86:44	6	eval_expr
arg	86:30	86:31	7	p
water	86:30	0:0	8	p
arg	86:33	86:44	7	e->param[0]
water	86:33	0:0	8	e
op	86:34	0:0	8	->
water	86:36	0:0	8	param
op	86:41	0:0	8	[
water	86:42	0:0	8	0
op	86:43	0:0	8	]
water	86:45	0:0	6	;
if	87:16	90:16	6	(v <= 0 && v > low_v)
cond	87:20	87:30	7	v <= 0 && v > low_v
water	87:20	0:0	8	v
op	87:21	0:0	8	<=
water	87:23	0:0	8	0
op	87:25	0:0	8	&&
water	87:28	0:0	8	v
op	87:29	0:0	8	>
water	87:30	0:0	8	low_v
stmts	87:37	90:16	7	
water	87:37	0:0	8	{
water	88:20	0:0	8	low
op	88:27	0:0	8	=
water	88:29	0:0	8	p
op	88:30	0:0	8	->
water	88:32	0:0	8	var
op	88:35	0:0	8	[
water	88:36	0:0	8	0
op	88:37	0:0	8	]
water	88:38	0:0	8	;
water	89:20	0:0	8	low_v
op	89:27	0:0	8	=
water	89:29	0:0	8	v
water	89:30	0:0	8	;
water	90:16	0:0	8	}
if	91:16	94:16	6	(v >= 0 && v < high_v)
cond	91:20	91:30	7	v >= 0 && v < high_v
water	91:20	0:0	8	v
op	91:21	0:0	8	>=
water	91:23	0:0	8	0
op	91:25	0:0	8	&&
water	91:28	0:0	8	v
op	91:29	0:0	8	<
water	91:30	0:0	8	high_v
stmts	91:38	94:16	7	
water	91:38	0:0	8	{
water	92:20	0:0	8	high
op	92:27	0:0	8	=
water	92:29	0:0	8	p
op	92:30	0:0	8	->
water	92:32	0:0	8	var
op	92:35	0:0	8	[
water	92:36	0:0	8	0
op	92:37	0:0	8	]
water	92:38	0:0	8	;
water	93:20	0:0	8	high_v
op	93:27	0:0	8	=
water	93:29	0:0	8	v
water	93:30	0:0	8	;
water	94:16	0:0	8	}
if	95:16	109:16	6	(low >= 0 && high >= 0)
cond	95:20	95:36	7	low >= 0 && high >= 0
water	95:20	0:0	8	low
op	95:23	0:0	8	>=
water	95:25	0:0	8	0
op	95:27	0:0	8	&&
water	95:30	0:0	8	high
op	95:34	0:0	8	>=
water	95:36	0:0	8	0
stmts	95:38	109:16	7	
water	95:38	0:0	8	{
for	96:20	107:20	8	(j = 0 ;j < 1000;j ++)
forinit	96:25	96:28	9	j = 0 ;
water	96:25	0:0	10	j
op	96:26	0:0	10	=
water	96:27	0:0	10	0
water	96:28	0:0	10	;
cond	96:30	96:32	9	j < 1000
water	96:30	0:0	10	j
op	96:31	0:0	10	<
water	96:32	0:0	10	1000
forexpr	96:38	96:39	9	j ++
water	96:38	0:0	10	j
op	96:39	0:0	10	++
stmts	96:43	107:20	9	
water	96:43	0:0	10	{
water	97:24	0:0	10	p
op	97:25	0:0	10	->
water	97:27	0:0	10	var
op	97:30	0:0	10	[
water	97:31	0:0	10	0
op	97:32	0:0	10	]
op	97:34	0:0	10	=
water	97:36	0:0	10	(
water	97:37	0:0	10	low
op	97:40	0:0	10	+
water	97:41	0:0	10	high
water	97:45	0:0	10	)
op	97:46	0:0	10	*
water	97:47	0:0	10	0
op	97:48	0:0	10	.
water	97:49	0:0	10	5
water	97:50	0:0	10	;
if	98:24	99:33	10	(low == p -> var [ 0 ] || high == p -> var [ 0 ])
cond	98:28	98:64	11	low == p -> var [ 0 ] || high == p -> var [ 0 ]
water	98:28	0:0	12	low
op	98:32	0:0	12	==
water	98:35	0:0	12	p
op	98:36	0:0	12	->
water	98:38	0:0	12	var
op	98:41	0:0	12	[
water	98:42	0:0	12	0
op	98:43	0:0	12	]
op	98:45	0:0	12	||
water	98:48	0:0	12	high
op	98:53	0:0	12	==
water	98:56	0:0	12	p
op	98:57	0:0	12	->
water	98:59	0:0	12	var
op	98:62	0:0	12	[
water	98:63	0:0	12	0
op	98:64	0:0	12	]
stmts	99:28	99:33	11	
break	99:28	99:33	12	
water	100:24	0:0	10	v
op	100:26	0:0	10	=
call	100:28	100:52	10	eval_expr
arg	100:38	100:39	11	p
water	100:38	0:0	12	p
arg	100:41	100:52	11	e->param[0]
water	100:41	0:0	12	e
op	100:42	0:0	12	->
water	100:44	0:0	12	param
op	100:49	0:0	12	[
water	100:50	0:0	12	0
op	100:51	0:0	12	]
water	100:53	0:0	10	;
if	101:24	101:49	10	(v <= 0)
cond	101:28	101:31	11	v <= 0
water	101:28	0:0	12	v
op	101:29	0:0	12	<=
water	101:31	0:0	12	0
stmts	101:34	101:49	11	
water	101:34	0:0	12	low
op	101:38	0:0	12	=
water	101:40	0:0	12	p
op	101:41	0:0	12	->
water	101:43	0:0	12	var
op	101:46	0:0	12	[
water	101:47	0:0	12	0
op	101:48	0:0	12	]
water	101:49	0:0	12	;
if	102:24	102:49	10	(v >= 0)
cond	102:28	102:31	11	v >= 0
water	102:28	0:0	12	v
op	102:29	0:0	12	>=
water	102:31	0:0	12	0
stmts	102:34	102:49	11	
water	102:34	0:0	12	high
op	102:38	0:0	12	=
water	102:40	0:0	12	p
op	102:41	0:0	12	->
water	102:43	0:0	12	var
op	102:46	0:0	12	[
water	102:47	0:0	12	0
op	102:48	0:0	12	]
water	102:49	0:0	12	;
if	103:24	106:24	10	(isnan (v ))
cond	103:28	103:35	11	isnan (v )
call	103:28	103:35	12	isnan
arg	103:34	103:35	13	v
water	103:34	0:0	14	v
stmts	103:38	106:24	11	
water	103:38	0:0	12	{
water	104:28	0:0	12	low
op	104:32	0:0	12	=
water	104:34	0:0	12	high
op	104:39	0:0	12	=
water	104:41	0:0	12	v
water	104:42	0:0	12	;
break	105:28	105:33	12	
water	106:24	0:0	12	}
water	107:20	0:0	10	}
break	108:20	108:25	8	
water	109:16	0:0	8	}
water	110:12	0:0	6	}
water	111:12	0:0	4	p
op	111:13	0:0	4	->
water	111:15	0:0	4	var
op	111:18	0:0	4	[
water	111:19	0:0	4	0
op	111:20	0:0	4	]
op	111:22	0:0	4	=
water	111:24	0:0	4	var0
water	111:28	0:0	4	;
return	112:12	112:45	4	-low_v<high_v?low:high
op	112:19	0:0	5	-
water	112:20	0:0	5	low_v
op	112:25	0:0	5	<
water	112:26	0:0	5	high_v
water	112:33	0:0	5	?
water	112:35	0:0	5	low
water	112:39	0:0	5	:
water	112:41	0:0	5	high
water	113:8	0:0	4	}
label	114:8	114:15	4	default :
water	114:17	0:0	4	{
decl	115:12	115:48	4	double	d
op	115:21	0:0	4	=
call	115:23	115:47	5	eval_expr
arg	115:33	115:34	6	p
water	115:33	0:0	7	p
arg	115:36	115:47	6	e->param[0]
water	115:36	0:0	7	e
op	115:37	0:0	7	->
water	115:39	0:0	7	param
op	115:44	0:0	7	[
water	115:45	0:0	7	0
op	115:46	0:0	7	]
decl	116:12	116:49	4	double	d2
op	116:22	0:0	4	=
call	116:24	116:48	5	eval_expr
arg	116:34	116:35	6	p
water	116:34	0:0	7	p
arg	116:37	116:48	6	e->param[1]
water	116:37	0:0	7	e
op	116:38	0:0	7	->
water	116:40	0:0	7	param
op	116:45	0:0	7	[
water	116:46	0:0	7	1
op	116:47	0:0	7	]
switch	117:12	136:12	4	(e -> type)
cond	117:20	117:23	5	e -> type
water	117:20	0:0	6	e
op	117:21	0:0	6	->
water	117:23	0:0	6	type
stmts	117:29	136:12	5	
water	117:29	0:0	6	{
label	118:16	118:26	6	case e_mod :
return	118:28	118:110	6	e->value*(d-floor((!CONFIG_FTRAPV||d2)?d/d2:d*INFINITY)*d2)
water	118:35	0:0	7	e
op	118:36	0:0	7	->
water	118:38	0:0	7	value
op	118:44	0:0	7	*
water	118:46	0:0	7	(
water	118:47	0:0	7	d
op	118:49	0:0	7	-
call	118:51	118:103	7	floor
arg	118:57	118:103	8	(!CONFIG_FTRAPV||d2)?d/d2:d*INFINITY
water	118:57	0:0	9	(
op	118:58	0:0	9	!
water	118:59	0:0	9	CONFIG_FTRAPV
op	118:73	0:0	9	||
water	118:76	0:0	9	d2
water	118:78	0:0	9	)
water	118:80	0:0	9	?
water	118:82	0:0	9	d
op	118:84	0:0	9	/
water	118:86	0:0	9	d2
water	118:89	0:0	9	:
water	118:91	0:0	9	d
op	118:93	0:0	9	*
water	118:95	0:0	9	INFINITY
op	118:105	0:0	7	*
water	118:107	0:0	7	d2
water	118:109	0:0	7	)
label	119:16	119:26	6	case e_gcd :
return	119:28	119:58	6	e->value*av_gcd(d,d2)
water	119:35	0:0	7	e
op	119:36	0:0	7	->
water	119:38	0:0	7	value
call	119:44	119:57	7	*av_gcd
arg	119:53	119:54	8	d
water	119:53	0:0	9	d
arg	119:55	119:57	8	d2
water	119:55	0:0	9	d2
label	120:16	120:26	6	case e_max :
return	120:28	120:66	6	e->value*(d>d2?d:d2)
water	120:35	0:0	7	e
op	120:36	0:0	7	->
water	120:38	0:0	7	value
op	120:44	0:0	7	*
water	120:46	0:0	7	(
water	120:47	0:0	7	d
op	120:49	0:0	7	>
water	120:52	0:0	7	d2
water	120:55	0:0	7	?
water	120:59	0:0	7	d
water	120:61	0:0	7	:
water	120:63	0:0	7	d2
water	120:65	0:0	7	)
label	121:16	121:26	6	case e_min :
return	121:28	121:66	6	e->value*(d<d2?d:d2)
water	121:35	0:0	7	e
op	121:36	0:0	7	->
water	121:38	0:0	7	value
op	121:44	0:0	7	*
water	121:46	0:0	7	(
water	121:47	0:0	7	d
op	121:49	0:0	7	<
water	121:52	0:0	7	d2
water	121:55	0:0	7	?
water	121:59	0:0	7	d
water	121:61	0:0	7	:
water	121:63	0:0	7	d2
water	121:65	0:0	7	)
label	122:16	122:25	6	case e_eq :
return	122:28	122:67	6	e->value*(d==d2?1.0:0.0)
water	122:35	0:0	7	e
op	122:36	0:0	7	->
water	122:38	0:0	7	value
op	122:44	0:0	7	*
water	122:46	0:0	7	(
water	122:47	0:0	7	d
op	122:49	0:0	7	==
water	122:52	0:0	7	d2
water	122:55	0:0	7	?
water	122:57	0:0	7	1
op	122:58	0:0	7	.
water	122:59	0:0	7	0
water	122:61	0:0	7	:
water	122:63	0:0	7	0
op	122:64	0:0	7	.
water	122:65	0:0	7	0
water	122:66	0:0	7	)
label	123:16	123:25	6	case e_gt :
return	123:28	123:67	6	e->value*(d>d2?1.0:0.0)
water	123:35	0:0	7	e
op	123:36	0:0	7	->
water	123:38	0:0	7	value
op	123:44	0:0	7	*
water	123:46	0:0	7	(
water	123:47	0:0	7	d
op	123:49	0:0	7	>
water	123:52	0:0	7	d2
water	123:55	0:0	7	?
water	123:57	0:0	7	1
op	123:58	0:0	7	.
water	123:59	0:0	7	0
water	123:61	0:0	7	:
water	123:63	0:0	7	0
op	123:64	0:0	7	.
water	123:65	0:0	7	0
water	123:66	0:0	7	)
label	124:16	124:26	6	case e_gte :
return	124:28	124:67	6	e->value*(d>=d2?1.0:0.0)
water	124:35	0:0	7	e
op	124:36	0:0	7	->
water	124:38	0:0	7	value
op	124:44	0:0	7	*
water	124:46	0:0	7	(
water	124:47	0:0	7	d
op	124:49	0:0	7	>=
water	124:52	0:0	7	d2
water	124:55	0:0	7	?
water	124:57	0:0	7	1
op	124:58	0:0	7	.
water	124:59	0:0	7	0
water	124:61	0:0	7	:
water	124:63	0:0	7	0
op	124:64	0:0	7	.
water	124:65	0:0	7	0
water	124:66	0:0	7	)
label	125:16	125:25	6	case e_lt :
return	125:28	125:67	6	e->value*(d<d2?1.0:0.0)
water	125:35	0:0	7	e
op	125:36	0:0	7	->
water	125:38	0:0	7	value
op	125:44	0:0	7	*
water	125:46	0:0	7	(
water	125:47	0:0	7	d
op	125:49	0:0	7	<
water	125:52	0:0	7	d2
water	125:55	0:0	7	?
water	125:57	0:0	7	1
op	125:58	0:0	7	.
water	125:59	0:0	7	0
water	125:61	0:0	7	:
water	125:63	0:0	7	0
op	125:64	0:0	7	.
water	125:65	0:0	7	0
water	125:66	0:0	7	)
label	126:16	126:26	6	case e_lte :
return	126:28	126:67	6	e->value*(d<=d2?1.0:0.0)
water	126:35	0:0	7	e
op	126:36	0:0	7	->
water	126:38	0:0	7	value
op	126:44	0:0	7	*
water	126:46	0:0	7	(
water	126:47	0:0	7	d
op	126:49	0:0	7	<=
water	126:52	0:0	7	d2
water	126:55	0:0	7	?
water	126:57	0:0	7	1
op	126:58	0:0	7	.
water	126:59	0:0	7	0
water	126:61	0:0	7	:
water	126:63	0:0	7	0
op	126:64	0:0	7	.
water	126:65	0:0	7	0
water	126:66	0:0	7	)
label	127:16	127:26	6	case e_pow :
return	127:28	127:56	6	e->value*pow(d,d2)
water	127:35	0:0	7	e
op	127:36	0:0	7	->
water	127:38	0:0	7	value
call	127:44	127:55	7	*pow
arg	127:50	127:51	8	d
water	127:50	0:0	9	d
arg	127:53	127:55	8	d2
water	127:53	0:0	9	d2
label	128:16	128:26	6	case e_mul :
return	128:28	128:54	6	e->value*(d*d2)
water	128:35	0:0	7	e
op	128:36	0:0	7	->
water	128:38	0:0	7	value
op	128:44	0:0	7	*
water	128:46	0:0	7	(
water	128:47	0:0	7	d
op	128:49	0:0	7	*
water	128:51	0:0	7	d2
water	128:53	0:0	7	)
label	129:16	129:26	6	case e_div :
return	129:28	129:97	6	e->value*((!CONFIG_FTRAPV||d2)?(d/d2):d*INFINITY)
water	129:35	0:0	7	e
op	129:36	0:0	7	->
water	129:38	0:0	7	value
op	129:44	0:0	7	*
water	129:46	0:0	7	(
water	129:47	0:0	7	(
op	129:48	0:0	7	!
water	129:49	0:0	7	CONFIG_FTRAPV
op	129:63	0:0	7	||
water	129:66	0:0	7	d2
water	129:69	0:0	7	)
water	129:71	0:0	7	?
water	129:73	0:0	7	(
water	129:74	0:0	7	d
op	129:76	0:0	7	/
water	129:78	0:0	7	d2
water	129:80	0:0	7	)
water	129:82	0:0	7	:
water	129:84	0:0	7	d
op	129:86	0:0	7	*
water	129:88	0:0	7	INFINITY
water	129:96	0:0	7	)
label	130:16	130:26	6	case e_add :
return	130:28	130:54	6	e->value*(d+d2)
water	130:35	0:0	7	e
op	130:36	0:0	7	->
water	130:38	0:0	7	value
op	130:44	0:0	7	*
water	130:46	0:0	7	(
water	130:47	0:0	7	d
op	130:49	0:0	7	+
water	130:51	0:0	7	d2
water	130:53	0:0	7	)
label	131:16	131:27	6	case e_last :
return	131:28	131:48	6	e->value*d2
water	131:35	0:0	7	e
op	131:36	0:0	7	->
water	131:38	0:0	7	value
op	131:44	0:0	7	*
water	131:46	0:0	7	d2
label	132:16	132:26	6	case e_st :
return	132:28	132:81	6	e->value*(p->var[av_clip(d,0,VARS-1)]=d2)
water	132:35	0:0	7	e
op	132:36	0:0	7	->
water	132:38	0:0	7	value
op	132:44	0:0	7	*
water	132:46	0:0	7	(
water	132:47	0:0	7	p
op	132:48	0:0	7	->
water	132:50	0:0	7	var
op	132:53	0:0	7	[
call	132:54	132:74	7	av_clip
arg	132:62	132:63	8	d
water	132:62	0:0	9	d
arg	132:65	132:66	8	0
water	132:65	0:0	9	0
arg	132:68	132:74	8	VARS-1
water	132:68	0:0	9	VARS
op	132:72	0:0	9	-
water	132:73	0:0	9	1
op	132:75	0:0	7	]
op	132:76	0:0	7	=
water	132:78	0:0	7	d2
water	132:80	0:0	7	)
label	133:16	133:28	6	case e_hypot :
return	133:29	133:66	6	e->value*(sqrt(d*d+d2*d2))
water	133:36	0:0	7	e
op	133:37	0:0	7	->
water	133:39	0:0	7	value
op	133:45	0:0	7	*
water	133:47	0:0	7	(
call	133:48	133:64	7	sqrt
arg	133:53	133:64	8	d*d+d2*d2
water	133:53	0:0	9	d
op	133:54	0:0	9	*
water	133:55	0:0	9	d
op	133:57	0:0	9	+
water	133:59	0:0	9	d2
op	133:61	0:0	9	*
water	133:62	0:0	9	d2
water	133:65	0:0	7	)
label	134:16	134:29	6	case e_bitand :
return	134:31	134:107	6	isnan(d)||isnan(d2)?NAN:e->value*((longint)d&(longint)d2)
call	134:38	134:45	7	isnan
arg	134:44	134:45	8	d
water	134:44	0:0	9	d
op	134:47	0:0	7	||
call	134:50	134:58	7	isnan
arg	134:56	134:58	8	d2
water	134:56	0:0	9	d2
water	134:60	0:0	7	?
water	134:62	0:0	7	NAN
water	134:66	0:0	7	:
water	134:68	0:0	7	e
op	134:69	0:0	7	->
water	134:71	0:0	7	value
op	134:77	0:0	7	*
water	134:79	0:0	7	(
water	134:80	0:0	7	(
water	134:81	0:0	7	long
water	134:86	0:0	7	int
water	134:89	0:0	7	)
water	134:90	0:0	7	d
op	134:92	0:0	7	&
water	134:94	0:0	7	(
water	134:95	0:0	7	long
water	134:100	0:0	7	int
water	134:103	0:0	7	)
water	134:104	0:0	7	d2
water	134:106	0:0	7	)
label	135:16	135:28	6	case e_bitor :
return	135:31	135:107	6	isnan(d)||isnan(d2)?NAN:e->value*((longint)d|(longint)d2)
call	135:38	135:45	7	isnan
arg	135:44	135:45	8	d
water	135:44	0:0	9	d
op	135:47	0:0	7	||
call	135:50	135:58	7	isnan
arg	135:56	135:58	8	d2
water	135:56	0:0	9	d2
water	135:60	0:0	7	?
water	135:62	0:0	7	NAN
water	135:66	0:0	7	:
water	135:68	0:0	7	e
op	135:69	0:0	7	->
water	135:71	0:0	7	value
op	135:77	0:0	7	*
water	135:79	0:0	7	(
water	135:80	0:0	7	(
water	135:81	0:0	7	long
water	135:86	0:0	7	int
water	135:89	0:0	7	)
water	135:90	0:0	7	d
op	135:92	0:0	7	|
water	135:94	0:0	7	(
water	135:95	0:0	7	long
water	135:100	0:0	7	int
water	135:103	0:0	7	)
water	135:104	0:0	7	d2
water	135:106	0:0	7	)
water	136:12	0:0	6	}
water	137:8	0:0	4	}
water	138:4	0:0	4	}
return	139:4	139:14	2	NAN
water	139:11	0:0	3	NAN
