func	1:0	41:0	0	int	av_opencl_buffer_read_image
params	1:31	0:0	1	
param	1:32	1:50	2	uint8_t * *	dst_data
param	1:52	1:67	2	int *	plane_size
param	1:69	1:82	2	int	plane_num
param	2:32	2:49	2	cl_mem	src_cl_buf
param	2:51	2:72	2	size_t	cl_buffer_size
stmnts	0:0	40:12	1	
decl	4:4	4:33	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:33	2	int	buffer_size
op	4:22	0:0	2	=
water	4:24	0:0	2	0
water	4:25	0:0	2	,
decl	4:4	4:33	2	int	ret
op	4:30	0:0	2	=
water	4:32	0:0	2	0
decl	5:4	5:17	2	uint8_t	*temp
decl	6:4	6:16	2	void	*mapped
decl	7:4	7:17	2	cl_int	status
if	8:4	10:4	2	(( unsigned int ) plane_num > 8)
cond	8:8	8:34	3	( unsigned int ) plane_num > 8
water	8:8	0:0	4	(
water	8:9	0:0	4	unsigned
water	8:18	0:0	4	int
water	8:21	0:0	4	)
water	8:22	0:0	4	plane_num
op	8:32	0:0	4	>
water	8:34	0:0	4	8
stmts	8:37	10:4	3	
water	8:37	0:0	4	{
return	9:8	9:30	4	AVERROR(EINVAL)
call	9:15	9:29	5	AVERROR
arg	9:23	9:29	6	EINVAL
water	9:23	0:0	7	EINVAL
water	10:4	0:0	4	}
for	11:4	13:4	2	(i = 0 ;i < plane_num;i ++)
forinit	11:9	11:14	3	i = 0 ;
water	11:9	0:0	4	i
op	11:11	0:0	4	=
water	11:13	0:0	4	0
water	11:14	0:0	4	;
cond	11:16	11:20	3	i < plane_num
water	11:16	0:0	4	i
op	11:18	0:0	4	<
water	11:20	0:0	4	plane_num
forexpr	11:31	11:32	3	i ++
water	11:31	0:0	4	i
op	11:32	0:0	4	++
stmts	11:36	13:4	3	
water	11:36	0:0	4	{
water	12:8	0:0	4	buffer_size
op	12:20	0:0	4	+=
water	12:23	0:0	4	plane_size
op	12:33	0:0	4	[
water	12:34	0:0	4	i
op	12:35	0:0	4	]
water	12:36	0:0	4	;
water	13:4	0:0	4	}
if	14:4	18:4	2	(buffer_size > cl_buffer_size)
cond	14:8	14:22	3	buffer_size > cl_buffer_size
water	14:8	0:0	4	buffer_size
op	14:20	0:0	4	>
water	14:22	0:0	4	cl_buffer_size
stmts	14:38	18:4	3	
water	14:38	0:0	4	{
call	15:8	16:76	4	av_log
arg	15:15	15:26	5	&opencl_ctx
op	15:15	0:0	6	&
water	15:16	0:0	6	opencl_ctx
arg	15:28	15:40	5	AV_LOG_ERROR
water	15:28	0:0	6	AV_LOG_ERROR
arg	16:15	16:76	5	"Cannot write image to CPU buffer: OpenCL buffer too small\n"
water	16:15	0:0	6	"Cannot write image to CPU buffer: OpenCL buffer too small\n"
water	16:77	0:0	4	;
return	17:8	17:30	4	AVERROR(EINVAL)
call	17:15	17:29	5	AVERROR
arg	17:23	17:29	6	EINVAL
water	17:23	0:0	7	EINVAL
water	18:4	0:0	4	}
water	19:4	0:0	2	mapped
op	19:11	0:0	2	=
call	19:13	21:54	2	clEnqueueMapBuffer
arg	19:32	19:56	3	opencl_ctx.command_queue
water	19:32	0:0	4	opencl_ctx
op	19:42	0:0	4	.
water	19:43	0:0	4	command_queue
arg	19:58	19:68	3	src_cl_buf
water	19:58	0:0	4	src_cl_buf
arg	20:32	20:39	3	CL_TRUE
water	20:32	0:0	4	CL_TRUE
arg	20:41	20:52	3	CL_MAP_READ
water	20:41	0:0	4	CL_MAP_READ
arg	20:54	20:55	3	0
water	20:54	0:0	4	0
arg	20:57	20:68	3	buffer_size
water	20:57	0:0	4	buffer_size
arg	21:32	21:33	3	0
water	21:32	0:0	4	0
arg	21:35	21:39	3	NULL
water	21:35	0:0	4	NULL
arg	21:41	21:45	3	NULL
water	21:41	0:0	4	NULL
arg	21:47	21:54	3	&status
op	21:47	0:0	4	&
water	21:48	0:0	4	status
water	21:55	0:0	2	;
if	22:4	26:4	2	(status != CL_SUCCESS)
cond	22:8	22:18	3	status != CL_SUCCESS
water	22:8	0:0	4	status
op	22:15	0:0	4	!=
water	22:18	0:0	4	CL_SUCCESS
stmts	22:30	26:4	3	
water	22:30	0:0	4	{
call	23:8	24:76	4	av_log
arg	23:15	23:26	5	&opencl_ctx
op	23:15	0:0	6	&
water	23:16	0:0	6	opencl_ctx
arg	23:28	23:40	5	AV_LOG_ERROR
water	23:28	0:0	6	AV_LOG_ERROR
arg	24:15	24:50	5	"Could not map OpenCL buffer: %s\n"
water	24:15	0:0	6	"Could not map OpenCL buffer: %s\n"
arg	24:52	24:76	5	av_opencl_errstr(status)
call	24:52	24:75	6	av_opencl_errstr
arg	24:69	24:75	7	status
water	24:69	0:0	8	status
water	24:77	0:0	4	;
return	25:8	25:31	4	AVERROR_EXTERNAL
water	25:15	0:0	5	AVERROR_EXTERNAL
water	26:4	0:0	4	}
water	27:4	0:0	2	temp
op	27:9	0:0	2	=
water	27:11	0:0	2	mapped
water	27:17	0:0	2	;
if	28:4	33:4	2	(ret >= 0)
cond	28:8	28:15	3	ret >= 0
water	28:8	0:0	4	ret
op	28:12	0:0	4	>=
water	28:15	0:0	4	0
stmts	28:18	33:4	3	
water	28:18	0:0	4	{
for	29:8	32:8	4	(i = 0 ;i < plane_num;i ++)
forinit	29:13	29:18	5	i = 0 ;
water	29:13	0:0	6	i
op	29:15	0:0	6	=
water	29:17	0:0	6	0
water	29:18	0:0	6	;
cond	29:20	29:24	5	i < plane_num
water	29:20	0:0	6	i
op	29:22	0:0	6	<
water	29:24	0:0	6	plane_num
forexpr	29:35	29:36	5	i ++
water	29:35	0:0	6	i
op	29:36	0:0	6	++
stmts	29:40	32:8	5	
water	29:40	0:0	6	{
call	30:12	30:51	6	memcpy
arg	30:19	30:30	7	dst_data[i]
water	30:19	0:0	8	dst_data
op	30:27	0:0	8	[
water	30:28	0:0	8	i
op	30:29	0:0	8	]
arg	30:32	30:36	7	temp
water	30:32	0:0	8	temp
arg	30:38	30:51	7	plane_size[i]
water	30:38	0:0	8	plane_size
op	30:48	0:0	8	[
water	30:49	0:0	8	i
op	30:50	0:0	8	]
water	30:52	0:0	6	;
water	31:12	0:0	6	temp
op	31:17	0:0	6	+=
water	31:20	0:0	6	plane_size
op	31:30	0:0	6	[
water	31:31	0:0	6	i
op	31:32	0:0	6	]
water	31:33	0:0	6	;
water	32:8	0:0	6	}
water	33:4	0:0	4	}
water	34:4	0:0	2	status
op	34:11	0:0	2	=
call	34:13	34:96	2	clEnqueueUnmapMemObject
arg	34:37	34:61	3	opencl_ctx.command_queue
water	34:37	0:0	4	opencl_ctx
op	34:47	0:0	4	.
water	34:48	0:0	4	command_queue
arg	34:63	34:73	3	src_cl_buf
water	34:63	0:0	4	src_cl_buf
arg	34:75	34:81	3	mapped
water	34:75	0:0	4	mapped
arg	34:83	34:84	3	0
water	34:83	0:0	4	0
arg	34:86	34:90	3	NULL
water	34:86	0:0	4	NULL
arg	34:92	34:96	3	NULL
water	34:92	0:0	4	NULL
water	34:97	0:0	2	;
if	35:4	39:4	2	(status != CL_SUCCESS)
cond	35:8	35:18	3	status != CL_SUCCESS
water	35:8	0:0	4	status
op	35:15	0:0	4	!=
water	35:18	0:0	4	CL_SUCCESS
stmts	35:30	39:4	3	
water	35:30	0:0	4	{
call	36:8	37:78	4	av_log
arg	36:15	36:26	5	&opencl_ctx
op	36:15	0:0	6	&
water	36:16	0:0	6	opencl_ctx
arg	36:28	36:40	5	AV_LOG_ERROR
water	36:28	0:0	6	AV_LOG_ERROR
arg	37:15	37:52	5	"Could not unmap OpenCL buffer: %s\n"
water	37:15	0:0	6	"Could not unmap OpenCL buffer: %s\n"
arg	37:54	37:78	5	av_opencl_errstr(status)
call	37:54	37:77	6	av_opencl_errstr
arg	37:71	37:77	7	status
water	37:71	0:0	8	status
water	37:79	0:0	4	;
return	38:8	38:31	4	AVERROR_EXTERNAL
water	38:15	0:0	5	AVERROR_EXTERNAL
water	39:4	0:0	4	}
return	40:4	40:12	2	0
water	40:11	0:0	3	0
