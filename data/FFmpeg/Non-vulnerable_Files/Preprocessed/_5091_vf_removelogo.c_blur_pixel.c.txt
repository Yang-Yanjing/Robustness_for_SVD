func	1:0	43:0	0	static unsigned int	blur_pixel
params	1:30	0:0	1	
param	1:31	1:42	2	int * * *	mask
param	2:31	2:55	2	const uint8_t *	mask_data
param	2:57	2:74	2	int	mask_linesize
param	3:31	3:56	2	uint8_t *	image_data
param	3:58	3:76	2	int	image_linesize
param	4:31	4:36	2	int	w
param	4:38	4:43	2	int	h
param	4:45	4:50	2	int	x
param	4:52	4:57	2	int	y
stmnts	0:0	42:47	1	
decl	8:4	8:17	2	int	mask_size
decl	9:4	9:50	2	int	start_posx
water	9:18	0:0	2	,
decl	9:4	9:50	2	int	start_posy
water	9:30	0:0	2	,
decl	9:4	9:50	2	int	end_posx
water	9:40	0:0	2	,
decl	9:4	9:50	2	int	end_posy
decl	10:4	10:12	2	int	i
water	10:9	0:0	2	,
decl	10:4	10:12	2	int	j
decl	11:4	11:45	2	unsigned int	accumulator
op	11:29	0:0	2	=
water	11:31	0:0	2	0
water	11:32	0:0	2	,
decl	11:4	11:45	2	unsigned int	divisor
op	11:42	0:0	2	=
water	11:44	0:0	2	0
decl	13:4	13:38	2	const uint8_t	*image_read_position
decl	15:4	15:37	2	const uint8_t	*mask_read_position
water	17:4	0:0	2	mask_size
op	17:15	0:0	2	=
water	17:17	0:0	2	mask_data
op	17:26	0:0	2	[
water	17:27	0:0	2	y
op	17:29	0:0	2	*
water	17:31	0:0	2	mask_linesize
op	17:45	0:0	2	+
water	17:47	0:0	2	x
op	17:48	0:0	2	]
water	17:49	0:0	2	;
water	18:4	0:0	2	start_posx
op	18:15	0:0	2	=
call	18:17	18:39	2	FFMAX
arg	18:23	18:24	3	0
water	18:23	0:0	4	0
arg	18:26	18:39	3	x-mask_size
water	18:26	0:0	4	x
op	18:28	0:0	4	-
water	18:30	0:0	4	mask_size
water	18:40	0:0	2	;
water	19:4	0:0	2	start_posy
op	19:15	0:0	2	=
call	19:17	19:39	2	FFMAX
arg	19:23	19:24	3	0
water	19:23	0:0	4	0
arg	19:26	19:39	3	y-mask_size
water	19:26	0:0	4	y
op	19:28	0:0	4	-
water	19:30	0:0	4	mask_size
water	19:40	0:0	2	;
water	20:4	0:0	2	end_posx
op	20:15	0:0	2	=
call	20:17	20:43	2	FFMIN
arg	20:23	20:28	3	w-1
water	20:23	0:0	4	w
op	20:25	0:0	4	-
water	20:27	0:0	4	1
arg	20:30	20:43	3	x+mask_size
water	20:30	0:0	4	x
op	20:32	0:0	4	+
water	20:34	0:0	4	mask_size
water	20:44	0:0	2	;
water	21:4	0:0	2	end_posy
op	21:15	0:0	2	=
call	21:17	21:43	2	FFMIN
arg	21:23	21:28	3	h-1
water	21:23	0:0	4	h
op	21:25	0:0	4	-
water	21:27	0:0	4	1
arg	21:30	21:43	3	y+mask_size
water	21:30	0:0	4	y
op	21:32	0:0	4	+
water	21:34	0:0	4	mask_size
water	21:44	0:0	2	;
water	22:4	0:0	2	image_read_position
op	22:24	0:0	2	=
water	22:26	0:0	2	image_data
op	22:37	0:0	2	+
water	22:39	0:0	2	image_linesize
op	22:54	0:0	2	*
water	22:56	0:0	2	start_posy
op	22:67	0:0	2	+
water	22:69	0:0	2	start_posx
water	22:79	0:0	2	;
water	23:4	0:0	2	mask_read_position
op	23:24	0:0	2	=
water	23:26	0:0	2	mask_data
op	23:37	0:0	2	+
water	23:39	0:0	2	mask_linesize
op	23:54	0:0	2	*
water	23:56	0:0	2	start_posy
op	23:67	0:0	2	+
water	23:69	0:0	2	start_posx
water	23:79	0:0	2	;
for	24:4	37:4	2	(j = start_posy ;j <= end_posy;j ++)
forinit	24:9	24:23	3	j = start_posy ;
water	24:9	0:0	4	j
op	24:11	0:0	4	=
water	24:13	0:0	4	start_posy
water	24:23	0:0	4	;
cond	24:25	24:30	3	j <= end_posy
water	24:25	0:0	4	j
op	24:27	0:0	4	<=
water	24:30	0:0	4	end_posy
forexpr	24:40	24:41	3	j ++
water	24:40	0:0	4	j
op	24:41	0:0	4	++
stmts	24:45	37:4	3	
water	24:45	0:0	4	{
for	25:8	34:8	4	(i = start_posx ;i <= end_posx;i ++)
forinit	25:13	25:27	5	i = start_posx ;
water	25:13	0:0	6	i
op	25:15	0:0	6	=
water	25:17	0:0	6	start_posx
water	25:27	0:0	6	;
cond	25:29	25:34	5	i <= end_posx
water	25:29	0:0	6	i
op	25:31	0:0	6	<=
water	25:34	0:0	6	end_posx
forexpr	25:44	25:45	5	i ++
water	25:44	0:0	6	i
op	25:45	0:0	6	++
stmts	25:49	34:8	5	
water	25:49	0:0	6	{
if	28:12	31:12	6	(! ( * mask_read_position ) && mask [ mask_size ] [ i - start_posx ] [ j - start_posy ])
cond	28:16	28:88	7	! ( * mask_read_position ) && mask [ mask_size ] [ i - start_posx ] [ j - start_posy ]
op	28:16	0:0	8	!
water	28:17	0:0	8	(
op	28:18	0:0	8	*
water	28:19	0:0	8	mask_read_position
water	28:37	0:0	8	)
op	28:39	0:0	8	&&
water	28:42	0:0	8	mask
op	28:46	0:0	8	[
water	28:47	0:0	8	mask_size
op	28:56	0:0	8	]
op	28:57	0:0	8	[
water	28:58	0:0	8	i
op	28:60	0:0	8	-
water	28:62	0:0	8	start_posx
op	28:72	0:0	8	]
op	28:73	0:0	8	[
water	28:74	0:0	8	j
op	28:76	0:0	8	-
water	28:78	0:0	8	start_posy
op	28:88	0:0	8	]
stmts	28:91	31:12	7	
water	28:91	0:0	8	{
water	29:16	0:0	8	accumulator
op	29:28	0:0	8	+=
op	29:31	0:0	8	*
water	29:32	0:0	8	image_read_position
water	29:51	0:0	8	;
water	30:16	0:0	8	divisor
op	30:23	0:0	8	++
water	30:25	0:0	8	;
water	31:12	0:0	8	}
water	32:12	0:0	6	image_read_position
op	32:31	0:0	6	++
water	32:33	0:0	6	;
water	33:12	0:0	6	mask_read_position
op	33:30	0:0	6	++
water	33:32	0:0	6	;
water	34:8	0:0	6	}
water	35:8	0:0	4	image_read_position
op	35:28	0:0	4	+=
water	35:31	0:0	4	(
water	35:32	0:0	4	image_linesize
op	35:47	0:0	4	-
water	35:49	0:0	4	(
water	35:50	0:0	4	(
water	35:51	0:0	4	end_posx
op	35:60	0:0	4	+
water	35:62	0:0	4	1
water	35:63	0:0	4	)
op	35:65	0:0	4	-
water	35:67	0:0	4	start_posx
water	35:77	0:0	4	)
water	35:78	0:0	4	)
water	35:79	0:0	4	;
water	36:8	0:0	4	mask_read_position
op	36:28	0:0	4	+=
water	36:31	0:0	4	(
water	36:32	0:0	4	mask_linesize
op	36:46	0:0	4	-
water	36:48	0:0	4	(
water	36:49	0:0	4	(
water	36:50	0:0	4	end_posx
op	36:59	0:0	4	+
water	36:61	0:0	4	1
water	36:62	0:0	4	)
op	36:64	0:0	4	-
water	36:66	0:0	4	start_posx
water	36:76	0:0	4	)
water	36:77	0:0	4	)
water	36:78	0:0	4	;
water	37:4	0:0	4	}
return	41:4	42:47	2	divisor==0?255:(accumulator+(divisor/2))/divisor
water	41:11	0:0	3	divisor
op	41:19	0:0	3	==
water	41:22	0:0	3	0
water	41:24	0:0	3	?
water	41:26	0:0	3	255
water	41:29	0:0	3	:
water	42:8	0:0	3	(
water	42:9	0:0	3	accumulator
op	42:21	0:0	3	+
water	42:23	0:0	3	(
water	42:24	0:0	3	divisor
op	42:32	0:0	3	/
water	42:34	0:0	3	2
water	42:35	0:0	3	)
water	42:36	0:0	3	)
op	42:38	0:0	3	/
water	42:40	0:0	3	divisor
