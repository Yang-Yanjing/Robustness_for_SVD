func	1:0	36:0	0	static int	write_streaminfo
params	1:27	0:0	1	
param	1:28	1:43	2	NUTContext *	nut
param	1:45	1:60	2	AVIOContext *	bc
param	1:62	1:75	2	int	stream_id
stmnts	0:0	35:16	1	
decl	2:4	2:32	2	AVFormatContext	*s
op	2:22	0:0	2	=
water	2:24	0:0	2	nut
op	2:27	0:0	2	->
water	2:29	0:0	2	avf
decl	3:4	3:40	2	AVStream	*st
op	3:17	0:0	2	=
water	3:19	0:0	2	s
op	3:20	0:0	2	->
water	3:22	0:0	2	streams
op	3:29	0:0	2	[
water	3:30	0:0	2	stream_id
op	3:39	0:0	2	]
decl	4:4	4:31	2	AVDictionaryEntry	*t
op	4:25	0:0	2	=
water	4:27	0:0	2	NULL
decl	5:4	5:23	2	AVIOContext	*dyn_bc
decl	6:4	6:25	2	uint8_t	*dyn_buf
op	6:20	0:0	2	=
water	6:21	0:0	2	NULL
decl	7:4	7:28	2	int	count
op	7:13	0:0	2	=
water	7:14	0:0	2	0
water	7:15	0:0	2	,
decl	7:4	7:28	2	int	dyn_size
water	7:25	0:0	2	,
decl	7:4	7:28	2	int	i
decl	8:4	8:40	2	int	ret
op	8:12	0:0	2	=
call	8:14	8:39	3	avio_open_dyn_buf
arg	8:32	8:39	4	&dyn_bc
op	8:32	0:0	5	&
water	8:33	0:0	5	dyn_bc
if	9:4	10:18	2	(ret < 0)
cond	9:8	9:14	3	ret < 0
water	9:8	0:0	4	ret
op	9:12	0:0	4	<
water	9:14	0:0	4	0
stmts	10:8	10:18	3	
return	10:8	10:18	4	ret
water	10:15	0:0	5	ret
while	11:4	12:51	2	(( t =av_dict_get (st -> metadata ,"" ,t ,AV_DICT_IGNORE_SUFFIX ) ))
cond	11:11	11:71	3	( t =av_dict_get (st -> metadata ,"" ,t ,AV_DICT_IGNORE_SUFFIX ) )
water	11:11	0:0	4	(
water	11:12	0:0	4	t
op	11:14	0:0	4	=
call	11:16	11:70	4	av_dict_get
arg	11:28	11:40	5	st->metadata
water	11:28	0:0	6	st
op	11:30	0:0	6	->
water	11:32	0:0	6	metadata
arg	11:42	11:44	5	""
water	11:42	0:0	6	""
arg	11:46	11:47	5	t
water	11:46	0:0	6	t
arg	11:49	11:70	5	AV_DICT_IGNORE_SUFFIX
water	11:49	0:0	6	AV_DICT_IGNORE_SUFFIX
water	11:71	0:0	4	)
stmts	12:8	12:51	3	
water	12:8	0:0	4	count
op	12:14	0:0	4	+=
call	12:17	12:50	4	add_info
arg	12:26	12:32	5	dyn_bc
water	12:26	0:0	6	dyn_bc
arg	12:34	12:40	5	t->key
water	12:34	0:0	6	t
op	12:35	0:0	6	->
water	12:37	0:0	6	key
arg	12:42	12:50	5	t->value
water	12:42	0:0	6	t
op	12:43	0:0	6	->
water	12:45	0:0	6	value
water	12:51	0:0	4	;
for	13:4	16:4	2	(i = 0 ;ff_nut_dispositions [ i ] . flag;++ i)
forinit	13:9	13:12	3	i = 0 ;
water	13:9	0:0	4	i
op	13:10	0:0	4	=
water	13:11	0:0	4	0
water	13:12	0:0	4	;
cond	13:14	13:37	3	ff_nut_dispositions [ i ] . flag
water	13:14	0:0	4	ff_nut_dispositions
op	13:33	0:0	4	[
water	13:34	0:0	4	i
op	13:35	0:0	4	]
op	13:36	0:0	4	.
water	13:37	0:0	4	flag
forexpr	13:43	13:45	3	++ i
op	13:43	0:0	4	++
water	13:45	0:0	4	i
stmts	13:48	16:4	3	
water	13:48	0:0	4	{
if	14:8	15:80	4	(st -> disposition & ff_nut_dispositions [ i ] . flag)
cond	14:12	14:53	5	st -> disposition & ff_nut_dispositions [ i ] . flag
water	14:12	0:0	6	st
op	14:14	0:0	6	->
water	14:16	0:0	6	disposition
op	14:28	0:0	6	&
water	14:30	0:0	6	ff_nut_dispositions
op	14:49	0:0	6	[
water	14:50	0:0	6	i
op	14:51	0:0	6	]
op	14:52	0:0	6	.
water	14:53	0:0	6	flag
stmts	15:12	15:80	5	
water	15:12	0:0	6	count
op	15:18	0:0	6	+=
call	15:21	15:79	6	add_info
arg	15:30	15:36	7	dyn_bc
water	15:30	0:0	8	dyn_bc
arg	15:38	15:51	7	"Disposition"
water	15:38	0:0	8	"Disposition"
arg	15:53	15:79	7	ff_nut_dispositions[i].str
water	15:53	0:0	8	ff_nut_dispositions
op	15:72	0:0	8	[
water	15:73	0:0	8	i
op	15:74	0:0	8	]
op	15:75	0:0	8	.
water	15:76	0:0	8	str
water	15:80	0:0	6	;
water	16:4	0:0	4	}
if	17:4	24:4	2	(st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO)
cond	17:8	17:33	3	st -> codec -> codec_type == AVMEDIA_TYPE_VIDEO
water	17:8	0:0	4	st
op	17:10	0:0	4	->
water	17:12	0:0	4	codec
op	17:17	0:0	4	->
water	17:19	0:0	4	codec_type
op	17:30	0:0	4	==
water	17:33	0:0	4	AVMEDIA_TYPE_VIDEO
stmts	17:53	24:4	3	
water	17:53	0:0	4	{
decl	18:8	18:24	4	uint8_t	buf[256]
if	19:8	20:91	4	(st -> r_frame_rate . num > 0 && st -> r_frame_rate . den > 0)
cond	19:12	19:59	5	st -> r_frame_rate . num > 0 && st -> r_frame_rate . den > 0
water	19:12	0:0	6	st
op	19:14	0:0	6	->
water	19:16	0:0	6	r_frame_rate
op	19:28	0:0	6	.
water	19:29	0:0	6	num
op	19:32	0:0	6	>
water	19:33	0:0	6	0
op	19:35	0:0	6	&&
water	19:38	0:0	6	st
op	19:40	0:0	6	->
water	19:42	0:0	6	r_frame_rate
op	19:54	0:0	6	.
water	19:55	0:0	6	den
op	19:58	0:0	6	>
water	19:59	0:0	6	0
stmts	20:12	20:91	5	
call	20:12	20:90	6	snprintf
arg	20:21	20:24	7	buf
water	20:21	0:0	8	buf
arg	20:26	20:37	7	sizeof(buf)
op	20:26	0:0	8	sizeof
water	20:32	0:0	8	(
water	20:33	0:0	8	buf
water	20:36	0:0	8	)
arg	20:39	20:46	7	"%d/%d"
water	20:39	0:0	8	"%d/%d"
arg	20:48	20:68	7	st->r_frame_rate.num
water	20:48	0:0	8	st
op	20:50	0:0	8	->
water	20:52	0:0	8	r_frame_rate
op	20:64	0:0	8	.
water	20:65	0:0	8	num
arg	20:70	20:90	7	st->r_frame_rate.den
water	20:70	0:0	8	st
op	20:72	0:0	8	->
water	20:74	0:0	8	r_frame_rate
op	20:86	0:0	8	.
water	20:87	0:0	8	den
water	20:91	0:0	6	;
else	21:8	22:99	4
stmts	22:12	22:99	5	
call	22:12	22:98	6	snprintf
arg	22:21	22:24	7	buf
water	22:21	0:0	8	buf
arg	22:26	22:37	7	sizeof(buf)
op	22:26	0:0	8	sizeof
water	22:32	0:0	8	(
water	22:33	0:0	8	buf
water	22:36	0:0	8	)
arg	22:39	22:46	7	"%d/%d"
water	22:39	0:0	8	"%d/%d"
arg	22:48	22:72	7	st->codec->time_base.den
water	22:48	0:0	8	st
op	22:50	0:0	8	->
water	22:52	0:0	8	codec
op	22:57	0:0	8	->
water	22:59	0:0	8	time_base
op	22:68	0:0	8	.
water	22:69	0:0	8	den
arg	22:74	22:98	7	st->codec->time_base.num
water	22:74	0:0	8	st
op	22:76	0:0	8	->
water	22:78	0:0	8	codec
op	22:83	0:0	8	->
water	22:85	0:0	8	time_base
op	22:94	0:0	8	.
water	22:95	0:0	8	num
water	22:99	0:0	6	;
water	23:8	0:0	4	count
op	23:14	0:0	4	+=
call	23:17	23:53	4	add_info
arg	23:26	23:32	5	dyn_bc
water	23:26	0:0	6	dyn_bc
arg	23:34	23:48	5	"r_frame_rate"
water	23:34	0:0	6	"r_frame_rate"
arg	23:50	23:53	5	buf
water	23:50	0:0	6	buf
water	23:54	0:0	4	;
water	24:4	0:0	4	}
water	25:4	0:0	2	dyn_size
op	25:13	0:0	2	=
call	25:15	25:50	2	avio_close_dyn_buf
arg	25:34	25:40	3	dyn_bc
water	25:34	0:0	4	dyn_bc
arg	25:42	25:50	3	&dyn_buf
op	25:42	0:0	4	&
water	25:43	0:0	4	dyn_buf
water	25:51	0:0	2	;
if	26:4	33:4	2	(count)
cond	26:8	26:8	3	count
water	26:8	0:0	4	count
stmts	26:15	33:4	3	
water	26:15	0:0	4	{
call	27:8	27:34	4	ff_put_v
arg	27:17	27:19	5	bc
water	27:17	0:0	6	bc
arg	27:21	27:34	5	stream_id+1
water	27:21	0:0	6	stream_id
op	27:31	0:0	6	+
water	27:33	0:0	6	1
water	27:35	0:0	4	;
call	28:8	28:22	4	ff_put_v
arg	28:17	28:19	5	bc
water	28:17	0:0	6	bc
arg	28:21	28:22	5	0
water	28:21	0:0	6	0
water	28:23	0:0	4	;
call	29:8	29:22	4	ff_put_v
arg	29:17	29:19	5	bc
water	29:17	0:0	6	bc
arg	29:21	29:22	5	0
water	29:21	0:0	6	0
water	29:23	0:0	4	;
call	30:8	30:22	4	ff_put_v
arg	30:17	30:19	5	bc
water	30:17	0:0	6	bc
arg	30:21	30:22	5	0
water	30:21	0:0	6	0
water	30:23	0:0	4	;
call	31:8	31:26	4	ff_put_v
arg	31:17	31:19	5	bc
water	31:17	0:0	6	bc
arg	31:21	31:26	5	count
water	31:21	0:0	6	count
water	31:27	0:0	4	;
call	32:8	32:40	4	avio_write
arg	32:19	32:21	5	bc
water	32:19	0:0	6	bc
arg	32:23	32:30	5	dyn_buf
water	32:23	0:0	6	dyn_buf
arg	32:32	32:40	5	dyn_size
water	32:32	0:0	6	dyn_size
water	32:41	0:0	4	;
water	33:4	0:0	4	}
call	34:4	34:19	2	av_free
arg	34:12	34:19	3	dyn_buf
water	34:12	0:0	4	dyn_buf
water	34:20	0:0	2	;
return	35:4	35:16	2	count
water	35:11	0:0	3	count
