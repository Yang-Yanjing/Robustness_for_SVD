func	1:0	18:0	0	static void	vector_fmul_window_scaled_c
params	1:39	0:0	1	
param	1:40	1:52	2	int16_t *	dst
param	1:54	1:73	2	const int32_t *	src0
param	2:39	2:58	2	const int32_t *	src1
param	2:60	2:78	2	const int32_t *	win
param	3:39	3:46	2	int	len
param	3:48	3:60	2	uint8_t	bits
stmnts	0:0	17:4	1	
decl	5:4	5:38	2	int32_t	s0
water	5:14	0:0	2	,
decl	5:4	5:38	2	int32_t	s1
water	5:18	0:0	2	,
decl	5:4	5:38	2	int32_t	wi
water	5:22	0:0	2	,
decl	5:4	5:38	2	int32_t	wj
water	5:26	0:0	2	,
decl	5:4	5:38	2	int32_t	i
water	5:29	0:0	2	,
decl	5:4	5:38	2	int32_t	j
water	5:31	0:0	2	,
decl	5:4	5:38	2	int32_t	round
water	6:4	0:0	2	dst
op	6:8	0:0	2	+=
water	6:11	0:0	2	len
water	6:14	0:0	2	;
water	7:4	0:0	2	win
op	7:8	0:0	2	+=
water	7:11	0:0	2	len
water	7:14	0:0	2	;
water	8:4	0:0	2	src0
op	8:8	0:0	2	+=
water	8:11	0:0	2	len
water	8:14	0:0	2	;
water	9:4	0:0	2	round
op	9:10	0:0	2	=
water	9:12	0:0	2	bits
water	9:16	0:0	2	?
water	9:18	0:0	2	1
op	9:20	0:0	2	<<
water	9:23	0:0	2	(
water	9:24	0:0	2	bits
op	9:28	0:0	2	-
water	9:29	0:0	2	1
water	9:30	0:0	2	)
water	9:32	0:0	2	:
water	9:34	0:0	2	0
water	9:35	0:0	2	;
for	10:4	17:4	2	(i = - len , j = len - 1 ;i < 0;i ++ , j --)
forinit	10:9	10:24	3	i = - len , j = len - 1 ;
water	10:9	0:0	4	i
op	10:10	0:0	4	=
op	10:11	0:0	4	-
water	10:12	0:0	4	len
water	10:15	0:0	4	,
water	10:17	0:0	4	j
op	10:18	0:0	4	=
water	10:19	0:0	4	len
op	10:22	0:0	4	-
water	10:23	0:0	4	1
water	10:24	0:0	4	;
cond	10:26	10:28	3	i < 0
water	10:26	0:0	4	i
op	10:27	0:0	4	<
water	10:28	0:0	4	0
forexpr	10:31	10:37	3	i ++ , j --
water	10:31	0:0	4	i
op	10:32	0:0	4	++
water	10:34	0:0	4	,
water	10:36	0:0	4	j
op	10:37	0:0	4	--
stmts	10:41	17:4	3	
water	10:41	0:0	4	{
water	11:8	0:0	4	s0
op	11:11	0:0	4	=
water	11:13	0:0	4	src0
op	11:17	0:0	4	[
water	11:18	0:0	4	i
op	11:19	0:0	4	]
water	11:20	0:0	4	;
water	12:8	0:0	4	s1
op	12:11	0:0	4	=
water	12:13	0:0	4	src1
op	12:17	0:0	4	[
water	12:18	0:0	4	j
op	12:19	0:0	4	]
water	12:20	0:0	4	;
water	13:8	0:0	4	wi
op	13:11	0:0	4	=
water	13:13	0:0	4	win
op	13:16	0:0	4	[
water	13:17	0:0	4	i
op	13:18	0:0	4	]
water	13:19	0:0	4	;
water	14:8	0:0	4	wj
op	14:11	0:0	4	=
water	14:13	0:0	4	win
op	14:16	0:0	4	[
water	14:17	0:0	4	j
op	14:18	0:0	4	]
water	14:19	0:0	4	;
water	15:8	0:0	4	dst
op	15:11	0:0	4	[
water	15:12	0:0	4	i
op	15:13	0:0	4	]
op	15:15	0:0	4	=
call	15:17	15:103	4	av_clip_int16
arg	15:31	15:103	5	((((int64_t)s0*wj-(int64_t)s1*wi+0x40000000)>>31)+round)>>bits
water	15:31	0:0	6	(
water	15:32	0:0	6	(
water	15:33	0:0	6	(
water	15:34	0:0	6	(
water	15:35	0:0	6	int64_t
water	15:42	0:0	6	)
water	15:43	0:0	6	s0
op	15:45	0:0	6	*
water	15:46	0:0	6	wj
op	15:49	0:0	6	-
water	15:51	0:0	6	(
water	15:52	0:0	6	int64_t
water	15:59	0:0	6	)
water	15:60	0:0	6	s1
op	15:62	0:0	6	*
water	15:63	0:0	6	wi
op	15:66	0:0	6	+
water	15:68	0:0	6	0
water	15:69	0:0	6	x40000000
water	15:78	0:0	6	)
op	15:80	0:0	6	>>
water	15:83	0:0	6	31
water	15:85	0:0	6	)
op	15:87	0:0	6	+
water	15:89	0:0	6	round
water	15:94	0:0	6	)
op	15:96	0:0	6	>>
water	15:99	0:0	6	bits
water	15:104	0:0	4	;
water	16:8	0:0	4	dst
op	16:11	0:0	4	[
water	16:12	0:0	4	j
op	16:13	0:0	4	]
op	16:15	0:0	4	=
call	16:17	16:103	4	av_clip_int16
arg	16:31	16:103	5	((((int64_t)s0*wi+(int64_t)s1*wj+0x40000000)>>31)+round)>>bits
water	16:31	0:0	6	(
water	16:32	0:0	6	(
water	16:33	0:0	6	(
water	16:34	0:0	6	(
water	16:35	0:0	6	int64_t
water	16:42	0:0	6	)
water	16:43	0:0	6	s0
op	16:45	0:0	6	*
water	16:46	0:0	6	wi
op	16:49	0:0	6	+
water	16:51	0:0	6	(
water	16:52	0:0	6	int64_t
water	16:59	0:0	6	)
water	16:60	0:0	6	s1
op	16:62	0:0	6	*
water	16:63	0:0	6	wj
op	16:66	0:0	6	+
water	16:68	0:0	6	0
water	16:69	0:0	6	x40000000
water	16:78	0:0	6	)
op	16:80	0:0	6	>>
water	16:83	0:0	6	31
water	16:85	0:0	6	)
op	16:87	0:0	6	+
water	16:89	0:0	6	round
water	16:94	0:0	6	)
op	16:96	0:0	6	>>
water	16:99	0:0	6	bits
water	16:104	0:0	4	;
water	17:4	0:0	4	}
