func	1:0	94:0	0	static int	estimate_best_b_count
params	1:32	0:0	1	
param	1:33	1:50	2	MpegEncContext *	s
stmnts	0:0	93:23	1	
decl	3:4	3:64	2	AVCodec	*codec
op	3:22	0:0	2	=
call	3:24	3:63	3	avcodec_find_encoder
arg	3:45	3:63	4	s->avctx->codec_id
water	3:45	0:0	5	s
op	3:46	0:0	5	->
water	3:48	0:0	5	avctx
op	3:53	0:0	5	->
water	3:55	0:0	5	codec_id
decl	4:4	4:52	2	AVCodecContext	*c
op	4:22	0:0	2	=
call	4:24	4:51	3	avcodec_alloc_context3
arg	4:47	4:51	4	NULL
water	4:47	0:0	5	NULL
decl	5:4	5:41	2	const int	scale
op	5:20	0:0	2	=
water	5:22	0:0	2	s
op	5:23	0:0	2	->
water	5:25	0:0	2	avctx
op	5:30	0:0	2	->
water	5:32	0:0	2	brd_scale
decl	6:4	6:51	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:51	2	int	j
water	6:12	0:0	2	,
decl	6:4	6:51	2	int	out_size
water	6:22	0:0	2	,
decl	6:4	6:51	2	int	p_lambda
water	6:32	0:0	2	,
decl	6:4	6:51	2	int	b_lambda
water	6:42	0:0	2	,
decl	6:4	6:51	2	int	lambda2
decl	7:4	7:32	2	int64_t	best_rd
op	7:21	0:0	2	=
water	7:23	0:0	2	INT64_MAX
decl	8:4	8:25	2	int	best_b_count
op	8:21	0:0	2	=
op	8:23	0:0	2	-
water	8:24	0:0	2	1
if	9:4	10:30	2	(! c)
cond	9:8	9:9	3	! c
op	9:8	0:0	4	!
water	9:9	0:0	4	c
stmts	10:8	10:30	3	
return	10:8	10:30	4	AVERROR(ENOMEM)
call	10:15	10:29	5	AVERROR
arg	10:23	10:29	6	ENOMEM
water	10:23	0:0	7	ENOMEM
call	11:4	11:39	2	av_assert0
arg	11:15	11:39	3	scale>=0&&scale<=3
water	11:15	0:0	4	scale
op	11:21	0:0	4	>=
water	11:24	0:0	4	0
op	11:26	0:0	4	&&
water	11:29	0:0	4	scale
op	11:35	0:0	4	<=
water	11:38	0:0	4	3
water	11:40	0:0	2	;
water	14:4	0:0	2	p_lambda
op	14:13	0:0	2	=
water	14:15	0:0	2	s
op	14:16	0:0	2	->
water	14:18	0:0	2	last_lambda_for
op	14:33	0:0	2	[
water	14:34	0:0	2	AV_PICTURE_TYPE_P
op	14:51	0:0	2	]
water	14:52	0:0	2	;
water	16:4	0:0	2	b_lambda
op	16:13	0:0	2	=
water	16:15	0:0	2	s
op	16:16	0:0	2	->
water	16:18	0:0	2	last_lambda_for
op	16:33	0:0	2	[
water	16:34	0:0	2	AV_PICTURE_TYPE_B
op	16:51	0:0	2	]
water	16:52	0:0	2	;
if	17:4	18:27	2	(! b_lambda)
cond	17:8	17:9	3	! b_lambda
op	17:8	0:0	4	!
water	17:9	0:0	4	b_lambda
stmts	18:8	18:27	3	
water	18:8	0:0	4	b_lambda
op	18:17	0:0	4	=
water	18:19	0:0	4	p_lambda
water	18:27	0:0	4	;
water	19:4	0:0	2	lambda2
op	19:13	0:0	2	=
water	19:15	0:0	2	(
water	19:16	0:0	2	b_lambda
op	19:25	0:0	2	*
water	19:27	0:0	2	b_lambda
op	19:36	0:0	2	+
water	19:38	0:0	2	(
water	19:39	0:0	2	1
op	19:41	0:0	2	<<
water	19:44	0:0	2	FF_LAMBDA_SHIFT
water	19:59	0:0	2	)
op	19:61	0:0	2	/
water	19:63	0:0	2	2
water	19:64	0:0	2	)
op	19:66	0:0	2	>>
water	20:15	0:0	2	FF_LAMBDA_SHIFT
water	20:30	0:0	2	;
water	21:4	0:0	2	c
op	21:5	0:0	2	->
water	21:7	0:0	2	width
op	21:20	0:0	2	=
water	21:22	0:0	2	s
op	21:23	0:0	2	->
water	21:25	0:0	2	width
op	21:32	0:0	2	>>
water	21:35	0:0	2	scale
water	21:40	0:0	2	;
water	22:4	0:0	2	c
op	22:5	0:0	2	->
water	22:7	0:0	2	height
op	22:20	0:0	2	=
water	22:22	0:0	2	s
op	22:23	0:0	2	->
water	22:25	0:0	2	height
op	22:32	0:0	2	>>
water	22:35	0:0	2	scale
water	22:40	0:0	2	;
water	23:4	0:0	2	c
op	23:5	0:0	2	->
water	23:7	0:0	2	flags
op	23:20	0:0	2	=
water	23:22	0:0	2	AV_CODEC_FLAG_QSCALE
op	23:43	0:0	2	|
water	23:45	0:0	2	AV_CODEC_FLAG_PSNR
water	23:63	0:0	2	;
water	24:4	0:0	2	c
op	24:5	0:0	2	->
water	24:7	0:0	2	flags
op	24:19	0:0	2	|=
water	24:22	0:0	2	s
op	24:23	0:0	2	->
water	24:25	0:0	2	avctx
op	24:30	0:0	2	->
water	24:32	0:0	2	flags
op	24:38	0:0	2	&
water	24:40	0:0	2	AV_CODEC_FLAG_QPEL
water	24:58	0:0	2	;
water	25:4	0:0	2	c
op	25:5	0:0	2	->
water	25:7	0:0	2	mb_decision
op	25:20	0:0	2	=
water	25:22	0:0	2	s
op	25:23	0:0	2	->
water	25:25	0:0	2	avctx
op	25:30	0:0	2	->
water	25:32	0:0	2	mb_decision
water	25:43	0:0	2	;
water	26:4	0:0	2	c
op	26:5	0:0	2	->
water	26:7	0:0	2	me_cmp
op	26:20	0:0	2	=
water	26:22	0:0	2	s
op	26:23	0:0	2	->
water	26:25	0:0	2	avctx
op	26:30	0:0	2	->
water	26:32	0:0	2	me_cmp
water	26:38	0:0	2	;
water	27:4	0:0	2	c
op	27:5	0:0	2	->
water	27:7	0:0	2	mb_cmp
op	27:20	0:0	2	=
water	27:22	0:0	2	s
op	27:23	0:0	2	->
water	27:25	0:0	2	avctx
op	27:30	0:0	2	->
water	27:32	0:0	2	mb_cmp
water	27:38	0:0	2	;
water	28:4	0:0	2	c
op	28:5	0:0	2	->
water	28:7	0:0	2	me_sub_cmp
op	28:20	0:0	2	=
water	28:22	0:0	2	s
op	28:23	0:0	2	->
water	28:25	0:0	2	avctx
op	28:30	0:0	2	->
water	28:32	0:0	2	me_sub_cmp
water	28:42	0:0	2	;
water	29:4	0:0	2	c
op	29:5	0:0	2	->
water	29:7	0:0	2	pix_fmt
op	29:20	0:0	2	=
water	29:22	0:0	2	AV_PIX_FMT_YUV420P
water	29:40	0:0	2	;
water	30:4	0:0	2	c
op	30:5	0:0	2	->
water	30:7	0:0	2	time_base
op	30:20	0:0	2	=
water	30:22	0:0	2	s
op	30:23	0:0	2	->
water	30:25	0:0	2	avctx
op	30:30	0:0	2	->
water	30:32	0:0	2	time_base
water	30:41	0:0	2	;
water	31:4	0:0	2	c
op	31:5	0:0	2	->
water	31:7	0:0	2	max_b_frames
op	31:20	0:0	2	=
water	31:22	0:0	2	s
op	31:23	0:0	2	->
water	31:25	0:0	2	max_b_frames
water	31:37	0:0	2	;
if	32:4	33:17	2	(avcodec_open2 (c ,codec ,NULL ) < 0)
cond	32:8	32:40	3	avcodec_open2 (c ,codec ,NULL ) < 0
call	32:8	32:36	4	avcodec_open2
arg	32:22	32:23	5	c
water	32:22	0:0	6	c
arg	32:25	32:30	5	codec
water	32:25	0:0	6	codec
arg	32:32	32:36	5	NULL
water	32:32	0:0	6	NULL
op	32:38	0:0	4	<
water	32:40	0:0	4	0
stmts	33:8	33:17	3	
return	33:8	33:17	4	-1
op	33:15	0:0	5	-
water	33:16	0:0	5	1
for	34:4	62:4	2	(i = 0 ;i < s -> max_b_frames + 2;i ++)
forinit	34:9	34:14	3	i = 0 ;
water	34:9	0:0	4	i
op	34:11	0:0	4	=
water	34:13	0:0	4	0
water	34:14	0:0	4	;
cond	34:16	34:38	3	i < s -> max_b_frames + 2
water	34:16	0:0	4	i
op	34:18	0:0	4	<
water	34:20	0:0	4	s
op	34:21	0:0	4	->
water	34:23	0:0	4	max_b_frames
op	34:36	0:0	4	+
water	34:38	0:0	4	2
forexpr	34:41	34:42	3	i ++
water	34:41	0:0	4	i
op	34:42	0:0	4	++
stmts	34:46	62:4	3	
water	34:46	0:0	4	{
decl	35:8	36:67	4	Picture	pre_input
water	35:25	0:0	4	,
decl	35:8	36:67	4	Picture	*pre_input_ptr
op	35:42	0:0	4	=
water	35:44	0:0	4	i
water	35:46	0:0	4	?
water	35:48	0:0	4	s
op	35:49	0:0	4	->
water	35:51	0:0	4	input_picture
op	35:64	0:0	4	[
water	35:65	0:0	4	i
op	35:67	0:0	4	-
water	35:69	0:0	4	1
op	35:70	0:0	4	]
water	35:72	0:0	4	:
water	36:48	0:0	4	s
op	36:49	0:0	4	->
water	36:51	0:0	4	next_picture_ptr
decl	37:8	37:24	4	uint8_t	*data[4]
if	38:8	61:8	4	(pre_input_ptr && ( ! i || s -> input_picture [ i - 1 ] ))
cond	38:12	38:59	5	pre_input_ptr && ( ! i || s -> input_picture [ i - 1 ] )
water	38:12	0:0	6	pre_input_ptr
op	38:26	0:0	6	&&
water	38:29	0:0	6	(
op	38:30	0:0	6	!
water	38:31	0:0	6	i
op	38:33	0:0	6	||
water	38:36	0:0	6	s
op	38:37	0:0	6	->
water	38:39	0:0	6	input_picture
op	38:52	0:0	6	[
water	38:53	0:0	6	i
op	38:55	0:0	6	-
water	38:57	0:0	6	1
op	38:58	0:0	6	]
water	38:59	0:0	6	)
stmts	38:62	61:8	5	
water	38:62	0:0	6	{
water	39:12	0:0	6	pre_input
op	39:22	0:0	6	=
op	39:24	0:0	6	*
water	39:25	0:0	6	pre_input_ptr
water	39:38	0:0	6	;
call	40:12	40:61	6	memcpy
arg	40:19	40:23	7	data
water	40:19	0:0	8	data
arg	40:25	40:47	7	pre_input_ptr->f->data
water	40:25	0:0	8	pre_input_ptr
op	40:38	0:0	8	->
water	40:40	0:0	8	f
op	40:41	0:0	8	->
water	40:43	0:0	8	data
arg	40:49	40:61	7	sizeof(data)
op	40:49	0:0	8	sizeof
water	40:55	0:0	8	(
water	40:56	0:0	8	data
water	40:60	0:0	8	)
water	40:62	0:0	6	;
if	41:12	45:12	6	(! pre_input . shared && i)
cond	41:16	41:37	7	! pre_input . shared && i
op	41:16	0:0	8	!
water	41:17	0:0	8	pre_input
op	41:26	0:0	8	.
water	41:27	0:0	8	shared
op	41:34	0:0	8	&&
water	41:37	0:0	8	i
stmts	41:40	45:12	7	
water	41:40	0:0	8	{
water	42:16	0:0	8	data
op	42:20	0:0	8	[
water	42:21	0:0	8	0
op	42:22	0:0	8	]
op	42:24	0:0	8	+=
water	42:27	0:0	8	INPLACE_OFFSET
water	42:41	0:0	8	;
water	43:16	0:0	8	data
op	43:20	0:0	8	[
water	43:21	0:0	8	1
op	43:22	0:0	8	]
op	43:24	0:0	8	+=
water	43:27	0:0	8	INPLACE_OFFSET
water	43:41	0:0	8	;
water	44:16	0:0	8	data
op	44:20	0:0	8	[
water	44:21	0:0	8	2
op	44:22	0:0	8	]
op	44:24	0:0	8	+=
water	44:27	0:0	8	INPLACE_OFFSET
water	44:41	0:0	8	;
water	45:12	0:0	8	}
water	46:12	0:0	6	s
op	46:13	0:0	6	->
water	46:15	0:0	6	mpvencdsp
op	46:24	0:0	6	.
water	46:25	0:0	6	shrink
op	46:31	0:0	6	[
water	46:32	0:0	6	scale
op	46:37	0:0	6	]
water	46:38	0:0	6	(
water	46:39	0:0	6	s
op	46:40	0:0	6	->
water	46:42	0:0	6	tmp_frames
op	46:52	0:0	6	[
water	46:53	0:0	6	i
op	46:54	0:0	6	]
op	46:55	0:0	6	->
water	46:57	0:0	6	data
op	46:61	0:0	6	[
water	46:62	0:0	6	0
op	46:63	0:0	6	]
water	46:64	0:0	6	,
water	47:39	0:0	6	s
op	47:40	0:0	6	->
water	47:42	0:0	6	tmp_frames
op	47:52	0:0	6	[
water	47:53	0:0	6	i
op	47:54	0:0	6	]
op	47:55	0:0	6	->
water	47:57	0:0	6	linesize
op	47:65	0:0	6	[
water	47:66	0:0	6	0
op	47:67	0:0	6	]
water	47:68	0:0	6	,
water	48:39	0:0	6	data
op	48:43	0:0	6	[
water	48:44	0:0	6	0
op	48:45	0:0	6	]
water	48:46	0:0	6	,
water	49:39	0:0	6	pre_input
op	49:48	0:0	6	.
water	49:49	0:0	6	f
op	49:50	0:0	6	->
water	49:52	0:0	6	linesize
op	49:60	0:0	6	[
water	49:61	0:0	6	0
op	49:62	0:0	6	]
water	49:63	0:0	6	,
water	50:39	0:0	6	c
op	50:40	0:0	6	->
water	50:42	0:0	6	width
water	50:47	0:0	6	,
water	50:49	0:0	6	c
op	50:50	0:0	6	->
water	50:52	0:0	6	height
water	50:58	0:0	6	)
water	50:59	0:0	6	;
water	51:12	0:0	6	s
op	51:13	0:0	6	->
water	51:15	0:0	6	mpvencdsp
op	51:24	0:0	6	.
water	51:25	0:0	6	shrink
op	51:31	0:0	6	[
water	51:32	0:0	6	scale
op	51:37	0:0	6	]
water	51:38	0:0	6	(
water	51:39	0:0	6	s
op	51:40	0:0	6	->
water	51:42	0:0	6	tmp_frames
op	51:52	0:0	6	[
water	51:53	0:0	6	i
op	51:54	0:0	6	]
op	51:55	0:0	6	->
water	51:57	0:0	6	data
op	51:61	0:0	6	[
water	51:62	0:0	6	1
op	51:63	0:0	6	]
water	51:64	0:0	6	,
water	52:39	0:0	6	s
op	52:40	0:0	6	->
water	52:42	0:0	6	tmp_frames
op	52:52	0:0	6	[
water	52:53	0:0	6	i
op	52:54	0:0	6	]
op	52:55	0:0	6	->
water	52:57	0:0	6	linesize
op	52:65	0:0	6	[
water	52:66	0:0	6	1
op	52:67	0:0	6	]
water	52:68	0:0	6	,
water	53:39	0:0	6	data
op	53:43	0:0	6	[
water	53:44	0:0	6	1
op	53:45	0:0	6	]
water	53:46	0:0	6	,
water	54:39	0:0	6	pre_input
op	54:48	0:0	6	.
water	54:49	0:0	6	f
op	54:50	0:0	6	->
water	54:52	0:0	6	linesize
op	54:60	0:0	6	[
water	54:61	0:0	6	1
op	54:62	0:0	6	]
water	54:63	0:0	6	,
water	55:39	0:0	6	c
op	55:40	0:0	6	->
water	55:42	0:0	6	width
op	55:48	0:0	6	>>
water	55:51	0:0	6	1
water	55:52	0:0	6	,
water	55:54	0:0	6	c
op	55:55	0:0	6	->
water	55:57	0:0	6	height
op	55:64	0:0	6	>>
water	55:67	0:0	6	1
water	55:68	0:0	6	)
water	55:69	0:0	6	;
water	56:12	0:0	6	s
op	56:13	0:0	6	->
water	56:15	0:0	6	mpvencdsp
op	56:24	0:0	6	.
water	56:25	0:0	6	shrink
op	56:31	0:0	6	[
water	56:32	0:0	6	scale
op	56:37	0:0	6	]
water	56:38	0:0	6	(
water	56:39	0:0	6	s
op	56:40	0:0	6	->
water	56:42	0:0	6	tmp_frames
op	56:52	0:0	6	[
water	56:53	0:0	6	i
op	56:54	0:0	6	]
op	56:55	0:0	6	->
water	56:57	0:0	6	data
op	56:61	0:0	6	[
water	56:62	0:0	6	2
op	56:63	0:0	6	]
water	56:64	0:0	6	,
water	57:39	0:0	6	s
op	57:40	0:0	6	->
water	57:42	0:0	6	tmp_frames
op	57:52	0:0	6	[
water	57:53	0:0	6	i
op	57:54	0:0	6	]
op	57:55	0:0	6	->
water	57:57	0:0	6	linesize
op	57:65	0:0	6	[
water	57:66	0:0	6	2
op	57:67	0:0	6	]
water	57:68	0:0	6	,
water	58:39	0:0	6	data
op	58:43	0:0	6	[
water	58:44	0:0	6	2
op	58:45	0:0	6	]
water	58:46	0:0	6	,
water	59:39	0:0	6	pre_input
op	59:48	0:0	6	.
water	59:49	0:0	6	f
op	59:50	0:0	6	->
water	59:52	0:0	6	linesize
op	59:60	0:0	6	[
water	59:61	0:0	6	2
op	59:62	0:0	6	]
water	59:63	0:0	6	,
water	60:39	0:0	6	c
op	60:40	0:0	6	->
water	60:42	0:0	6	width
op	60:48	0:0	6	>>
water	60:51	0:0	6	1
water	60:52	0:0	6	,
water	60:54	0:0	6	c
op	60:55	0:0	6	->
water	60:57	0:0	6	height
op	60:64	0:0	6	>>
water	60:67	0:0	6	1
water	60:68	0:0	6	)
water	60:69	0:0	6	;
water	61:8	0:0	6	}
water	62:4	0:0	4	}
for	63:4	90:4	2	(j = 0 ;j < s -> max_b_frames + 1;j ++)
forinit	63:9	63:14	3	j = 0 ;
water	63:9	0:0	4	j
op	63:11	0:0	4	=
water	63:13	0:0	4	0
water	63:14	0:0	4	;
cond	63:16	63:38	3	j < s -> max_b_frames + 1
water	63:16	0:0	4	j
op	63:18	0:0	4	<
water	63:20	0:0	4	s
op	63:21	0:0	4	->
water	63:23	0:0	4	max_b_frames
op	63:36	0:0	4	+
water	63:38	0:0	4	1
forexpr	63:41	63:42	3	j ++
water	63:41	0:0	4	j
op	63:42	0:0	4	++
stmts	63:46	90:4	3	
water	63:46	0:0	4	{
decl	64:8	64:22	4	int64_t	rd
op	64:19	0:0	4	=
water	64:21	0:0	4	0
if	65:8	66:17	4	(! s -> input_picture [ j ])
cond	65:12	65:31	5	! s -> input_picture [ j ]
op	65:12	0:0	6	!
water	65:13	0:0	6	s
op	65:14	0:0	6	->
water	65:16	0:0	6	input_picture
op	65:29	0:0	6	[
water	65:30	0:0	6	j
op	65:31	0:0	6	]
stmts	66:12	66:17	5	
break	66:12	66:17	6	
water	67:8	0:0	4	c
op	67:9	0:0	4	->
water	67:11	0:0	4	error
op	67:16	0:0	4	[
water	67:17	0:0	4	0
op	67:18	0:0	4	]
op	67:20	0:0	4	=
water	67:22	0:0	4	c
op	67:23	0:0	4	->
water	67:25	0:0	4	error
op	67:30	0:0	4	[
water	67:31	0:0	4	1
op	67:32	0:0	4	]
op	67:34	0:0	4	=
water	67:36	0:0	4	c
op	67:37	0:0	4	->
water	67:39	0:0	4	error
op	67:44	0:0	4	[
water	67:45	0:0	4	2
op	67:46	0:0	4	]
op	67:48	0:0	4	=
water	67:50	0:0	4	0
water	67:51	0:0	4	;
water	68:8	0:0	4	s
op	68:9	0:0	4	->
water	68:11	0:0	4	tmp_frames
op	68:21	0:0	4	[
water	68:22	0:0	4	0
op	68:23	0:0	4	]
op	68:24	0:0	4	->
water	68:26	0:0	4	pict_type
op	68:36	0:0	4	=
water	68:38	0:0	4	AV_PICTURE_TYPE_I
water	68:55	0:0	4	;
water	69:8	0:0	4	s
op	69:9	0:0	4	->
water	69:11	0:0	4	tmp_frames
op	69:21	0:0	4	[
water	69:22	0:0	4	0
op	69:23	0:0	4	]
op	69:24	0:0	4	->
water	69:26	0:0	4	quality
op	69:36	0:0	4	=
water	69:38	0:0	4	1
op	69:40	0:0	4	*
water	69:42	0:0	4	FF_QP2LAMBDA
water	69:54	0:0	4	;
water	70:8	0:0	4	out_size
op	70:17	0:0	4	=
call	70:19	70:51	4	encode_frame
arg	70:32	70:33	5	c
water	70:32	0:0	6	c
arg	70:35	70:51	5	s->tmp_frames[0]
water	70:35	0:0	6	s
op	70:36	0:0	6	->
water	70:38	0:0	6	tmp_frames
op	70:48	0:0	6	[
water	70:49	0:0	6	0
op	70:50	0:0	6	]
water	70:52	0:0	4	;
for	72:8	79:8	4	(i = 0 ;i < s -> max_b_frames + 1;i ++)
forinit	72:13	72:18	5	i = 0 ;
water	72:13	0:0	6	i
op	72:15	0:0	6	=
water	72:17	0:0	6	0
water	72:18	0:0	6	;
cond	72:20	72:42	5	i < s -> max_b_frames + 1
water	72:20	0:0	6	i
op	72:22	0:0	6	<
water	72:24	0:0	6	s
op	72:25	0:0	6	->
water	72:27	0:0	6	max_b_frames
op	72:40	0:0	6	+
water	72:42	0:0	6	1
forexpr	72:45	72:46	5	i ++
water	72:45	0:0	6	i
op	72:46	0:0	6	++
stmts	72:50	79:8	5	
water	72:50	0:0	6	{
decl	73:12	73:63	6	int	is_p
op	73:21	0:0	6	=
water	73:23	0:0	6	i
op	73:25	0:0	6	%
water	73:27	0:0	6	(
water	73:28	0:0	6	j
op	73:30	0:0	6	+
water	73:32	0:0	6	1
water	73:33	0:0	6	)
op	73:35	0:0	6	==
water	73:38	0:0	6	j
op	73:40	0:0	6	||
water	73:43	0:0	6	i
op	73:45	0:0	6	==
water	73:48	0:0	6	s
op	73:49	0:0	6	->
water	73:51	0:0	6	max_b_frames
water	74:12	0:0	6	s
op	74:13	0:0	6	->
water	74:15	0:0	6	tmp_frames
op	74:25	0:0	6	[
water	74:26	0:0	6	i
op	74:28	0:0	6	+
water	74:30	0:0	6	1
op	74:31	0:0	6	]
op	74:32	0:0	6	->
water	74:34	0:0	6	pict_type
op	74:44	0:0	6	=
water	74:46	0:0	6	is_p
water	74:51	0:0	6	?
water	75:37	0:0	6	AV_PICTURE_TYPE_P
water	75:55	0:0	6	:
water	75:57	0:0	6	AV_PICTURE_TYPE_B
water	75:74	0:0	6	;
water	76:12	0:0	6	s
op	76:13	0:0	6	->
water	76:15	0:0	6	tmp_frames
op	76:25	0:0	6	[
water	76:26	0:0	6	i
op	76:28	0:0	6	+
water	76:30	0:0	6	1
op	76:31	0:0	6	]
op	76:32	0:0	6	->
water	76:34	0:0	6	quality
op	76:44	0:0	6	=
water	76:46	0:0	6	is_p
water	76:51	0:0	6	?
water	76:53	0:0	6	p_lambda
water	76:62	0:0	6	:
water	76:64	0:0	6	b_lambda
water	76:72	0:0	6	;
water	77:12	0:0	6	out_size
op	77:21	0:0	6	=
call	77:23	77:59	6	encode_frame
arg	77:36	77:37	7	c
water	77:36	0:0	8	c
arg	77:39	77:59	7	s->tmp_frames[i+1]
water	77:39	0:0	8	s
op	77:40	0:0	8	->
water	77:42	0:0	8	tmp_frames
op	77:52	0:0	8	[
water	77:53	0:0	8	i
op	77:55	0:0	8	+
water	77:57	0:0	8	1
op	77:58	0:0	8	]
water	77:60	0:0	6	;
water	78:12	0:0	6	rd
op	78:15	0:0	6	+=
water	78:18	0:0	6	(
water	78:19	0:0	6	out_size
op	78:28	0:0	6	*
water	78:30	0:0	6	lambda2
water	78:37	0:0	6	)
op	78:39	0:0	6	>>
water	78:42	0:0	6	(
water	78:43	0:0	6	FF_LAMBDA_SHIFT
op	78:59	0:0	6	-
water	78:61	0:0	6	3
water	78:62	0:0	6	)
water	78:63	0:0	6	;
water	79:8	0:0	6	}
while	81:8	84:8	4	(out_size)
cond	81:15	81:15	5	out_size
water	81:15	0:0	6	out_size
stmts	81:25	84:8	5	
water	81:25	0:0	6	{
water	82:12	0:0	6	out_size
op	82:21	0:0	6	=
call	82:23	82:43	6	encode_frame
arg	82:36	82:37	7	c
water	82:36	0:0	8	c
arg	82:39	82:43	7	NULL
water	82:39	0:0	8	NULL
water	82:44	0:0	6	;
water	83:12	0:0	6	rd
op	83:15	0:0	6	+=
water	83:18	0:0	6	(
water	83:19	0:0	6	out_size
op	83:28	0:0	6	*
water	83:30	0:0	6	lambda2
water	83:37	0:0	6	)
op	83:39	0:0	6	>>
water	83:42	0:0	6	(
water	83:43	0:0	6	FF_LAMBDA_SHIFT
op	83:59	0:0	6	-
water	83:61	0:0	6	3
water	83:62	0:0	6	)
water	83:63	0:0	6	;
water	84:8	0:0	6	}
water	85:8	0:0	4	rd
op	85:11	0:0	4	+=
water	85:14	0:0	4	c
op	85:15	0:0	4	->
water	85:17	0:0	4	error
op	85:22	0:0	4	[
water	85:23	0:0	4	0
op	85:24	0:0	4	]
op	85:26	0:0	4	+
water	85:28	0:0	4	c
op	85:29	0:0	4	->
water	85:31	0:0	4	error
op	85:36	0:0	4	[
water	85:37	0:0	4	1
op	85:38	0:0	4	]
op	85:40	0:0	4	+
water	85:42	0:0	4	c
op	85:43	0:0	4	->
water	85:45	0:0	4	error
op	85:50	0:0	4	[
water	85:51	0:0	4	2
op	85:52	0:0	4	]
water	85:53	0:0	4	;
if	86:8	89:8	4	(rd < best_rd)
cond	86:12	86:17	5	rd < best_rd
water	86:12	0:0	6	rd
op	86:15	0:0	6	<
water	86:17	0:0	6	best_rd
stmts	86:26	89:8	5	
water	86:26	0:0	6	{
water	87:12	0:0	6	best_rd
op	87:20	0:0	6	=
water	87:22	0:0	6	rd
water	87:24	0:0	6	;
water	88:12	0:0	6	best_b_count
op	88:25	0:0	6	=
water	88:27	0:0	6	j
water	88:28	0:0	6	;
water	89:8	0:0	6	}
water	90:4	0:0	4	}
call	91:4	91:19	2	avcodec_close
arg	91:18	91:19	3	c
water	91:18	0:0	4	c
water	91:20	0:0	2	;
call	92:4	92:15	2	av_freep
arg	92:13	92:15	3	&c
op	92:13	0:0	4	&
water	92:14	0:0	4	c
water	92:16	0:0	2	;
return	93:4	93:23	2	best_b_count
water	93:11	0:0	3	best_b_count
