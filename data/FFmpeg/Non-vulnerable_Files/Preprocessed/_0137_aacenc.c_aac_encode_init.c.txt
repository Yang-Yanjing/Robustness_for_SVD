func	1:15	68:0	0	int	aac_encode_init
params	1:34	0:0	1	
param	1:35	1:56	2	AVCodecContext *	avctx
stmnts	0:0	67:14	1	
decl	3:4	3:39	2	AACEncContext	*s
op	3:21	0:0	2	=
water	3:23	0:0	2	avctx
op	3:28	0:0	2	->
water	3:30	0:0	2	priv_data
decl	4:4	4:18	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:18	2	int	ret
op	4:15	0:0	2	=
water	4:17	0:0	2	0
decl	5:4	5:27	2	const uint8_t	*sizes[2]
decl	6:4	6:38	2	uint8_t	grouping[AAC_MAX_CHANNELS]
decl	7:4	7:18	2	int	lengths[2]
water	8:4	0:0	2	avctx
op	8:9	0:0	2	->
water	8:11	0:0	2	frame_size
op	8:22	0:0	2	=
water	8:24	0:0	2	1024
water	8:28	0:0	2	;
for	9:4	11:17	2	(i = 0 ;i < 16;i ++)
forinit	9:9	9:14	3	i = 0 ;
water	9:9	0:0	4	i
op	9:11	0:0	4	=
water	9:13	0:0	4	0
water	9:14	0:0	4	;
cond	9:16	9:20	3	i < 16
water	9:16	0:0	4	i
op	9:18	0:0	4	<
water	9:20	0:0	4	16
forexpr	9:24	9:25	3	i ++
water	9:24	0:0	4	i
op	9:25	0:0	4	++
stmts	10:8	11:17	3	
if	10:8	11:17	4	(avctx -> sample_rate == avpriv_mpeg4audio_sample_rates [ i ])
cond	10:12	10:66	5	avctx -> sample_rate == avpriv_mpeg4audio_sample_rates [ i ]
water	10:12	0:0	6	avctx
op	10:17	0:0	6	->
water	10:19	0:0	6	sample_rate
op	10:31	0:0	6	==
water	10:34	0:0	6	avpriv_mpeg4audio_sample_rates
op	10:64	0:0	6	[
water	10:65	0:0	6	i
op	10:66	0:0	6	]
stmts	11:12	11:17	5	
break	11:12	11:17	6	
water	12:4	0:0	2	s
op	12:5	0:0	2	->
water	12:7	0:0	2	channels
op	12:16	0:0	2	=
water	12:18	0:0	2	avctx
op	12:23	0:0	2	->
water	12:25	0:0	2	channels
water	12:33	0:0	2	;
call	13:4	14:63	2	ERROR_IF
arg	13:13	13:85	3	i==16||i>=ff_aac_swb_size_1024_len||i>=ff_aac_swb_size_128_len
water	13:13	0:0	4	i
op	13:15	0:0	4	==
water	13:18	0:0	4	16
op	13:21	0:0	4	||
water	13:24	0:0	4	i
op	13:26	0:0	4	>=
water	13:29	0:0	4	ff_aac_swb_size_1024_len
op	13:54	0:0	4	||
water	13:57	0:0	4	i
op	13:59	0:0	4	>=
water	13:62	0:0	4	ff_aac_swb_size_128_len
arg	14:13	14:43	3	"Unsupported sample rate %d\n"
water	14:13	0:0	4	"Unsupported sample rate %d\n"
arg	14:45	14:63	3	avctx->sample_rate
water	14:45	0:0	4	avctx
op	14:50	0:0	4	->
water	14:52	0:0	4	sample_rate
water	14:64	0:0	2	;
call	15:4	16:64	2	ERROR_IF
arg	15:13	15:43	3	s->channels>AAC_MAX_CHANNELS
water	15:13	0:0	4	s
op	15:14	0:0	4	->
water	15:16	0:0	4	channels
op	15:25	0:0	4	>
water	15:27	0:0	4	AAC_MAX_CHANNELS
arg	16:13	16:51	3	"Unsupported number of channels: %d\n"
water	16:13	0:0	4	"Unsupported number of channels: %d\n"
arg	16:53	16:64	3	s->channels
water	16:53	0:0	4	s
op	16:54	0:0	4	->
water	16:56	0:0	4	channels
water	16:65	0:0	2	;
call	17:4	18:67	2	WARN_IF
arg	17:12	17:78	3	1024.0*avctx->bit_rate/avctx->sample_rate>6144*s->channels
water	17:12	0:0	4	1024
op	17:16	0:0	4	.
water	17:17	0:0	4	0
op	17:19	0:0	4	*
water	17:21	0:0	4	avctx
op	17:26	0:0	4	->
water	17:28	0:0	4	bit_rate
op	17:37	0:0	4	/
water	17:39	0:0	4	avctx
op	17:44	0:0	4	->
water	17:46	0:0	4	sample_rate
op	17:58	0:0	4	>
water	17:60	0:0	4	6144
op	17:65	0:0	4	*
water	17:67	0:0	4	s
op	17:68	0:0	4	->
water	17:70	0:0	4	channels
arg	18:13	18:67	3	"Too many bits per frame requested, clamping to max\n"
water	18:13	0:0	4	"Too many bits per frame requested, clamping to max\n"
water	18:68	0:0	2	;
if	19:4	21:4	2	(avctx -> profile == FF_PROFILE_AAC_MAIN)
cond	19:8	19:26	3	avctx -> profile == FF_PROFILE_AAC_MAIN
water	19:8	0:0	4	avctx
op	19:13	0:0	4	->
water	19:15	0:0	4	profile
op	19:23	0:0	4	==
water	19:26	0:0	4	FF_PROFILE_AAC_MAIN
stmts	19:47	21:4	3	
water	19:47	0:0	4	{
water	20:8	0:0	4	s
op	20:9	0:0	4	->
water	20:11	0:0	4	options
op	20:18	0:0	4	.
water	20:19	0:0	4	pred
op	20:24	0:0	4	=
water	20:26	0:0	4	1
water	20:27	0:0	4	;
water	21:4	0:0	4	}
else	21:6	25:4	2
stmts	21:11	25:4	3	
if	21:11	25:4	4	(( avctx -> profile == FF_PROFILE_AAC_LOW || avctx -> profile == FF_PROFILE_UNKNOWN ) && s -> options . pred)
cond	21:15	22:68	5	( avctx -> profile == FF_PROFILE_AAC_LOW || avctx -> profile == FF_PROFILE_UNKNOWN ) && s -> options . pred
water	21:15	0:0	6	(
water	21:16	0:0	6	avctx
op	21:21	0:0	6	->
water	21:23	0:0	6	profile
op	21:31	0:0	6	==
water	21:34	0:0	6	FF_PROFILE_AAC_LOW
op	21:53	0:0	6	||
water	22:16	0:0	6	avctx
op	22:21	0:0	6	->
water	22:23	0:0	6	profile
op	22:31	0:0	6	==
water	22:34	0:0	6	FF_PROFILE_UNKNOWN
water	22:52	0:0	6	)
op	22:54	0:0	6	&&
water	22:57	0:0	6	s
op	22:58	0:0	6	->
water	22:60	0:0	6	options
op	22:67	0:0	6	.
water	22:68	0:0	6	pred
stmts	22:74	25:4	5	
water	22:74	0:0	6	{
water	23:8	0:0	6	s
op	23:9	0:0	6	->
water	23:11	0:0	6	profile
op	23:19	0:0	6	=
water	23:21	0:0	6	0
water	23:22	0:0	6	;
call	24:8	24:73	6	WARN_IF
arg	24:16	24:17	7	1
water	24:16	0:0	8	1
arg	24:19	24:73	7	"Prediction requested, changing profile to AAC-Main\n"
water	24:19	0:0	8	"Prediction requested, changing profile to AAC-Main\n"
water	24:74	0:0	6	;
water	25:4	0:0	6	}
else	25:6	28:4	2
stmts	25:11	28:4	3	
if	25:11	28:4	4	(avctx -> profile == FF_PROFILE_AAC_LOW || avctx -> profile == FF_PROFILE_UNKNOWN)
cond	25:15	26:33	5	avctx -> profile == FF_PROFILE_AAC_LOW || avctx -> profile == FF_PROFILE_UNKNOWN
water	25:15	0:0	6	avctx
op	25:20	0:0	6	->
water	25:22	0:0	6	profile
op	25:30	0:0	6	==
water	25:33	0:0	6	FF_PROFILE_AAC_LOW
op	25:52	0:0	6	||
water	26:15	0:0	6	avctx
op	26:20	0:0	6	->
water	26:22	0:0	6	profile
op	26:30	0:0	6	==
water	26:33	0:0	6	FF_PROFILE_UNKNOWN
stmts	26:53	28:4	5	
water	26:53	0:0	6	{
water	27:8	0:0	6	s
op	27:9	0:0	6	->
water	27:11	0:0	6	profile
op	27:19	0:0	6	=
water	27:21	0:0	6	1
water	27:22	0:0	6	;
water	28:4	0:0	6	}
else	28:6	30:4	2
stmts	28:11	30:4	3	
water	28:11	0:0	4	{
call	29:8	29:62	4	ERROR_IF
arg	29:17	29:18	5	1
water	29:17	0:0	6	1
arg	29:20	29:46	5	"Unsupported profile %d\n"
water	29:20	0:0	6	"Unsupported profile %d\n"
arg	29:48	29:62	5	avctx->profile
water	29:48	0:0	6	avctx
op	29:53	0:0	6	->
water	29:55	0:0	6	profile
water	29:63	0:0	4	;
water	30:4	0:0	4	}
if	31:4	34:4	2	(s -> options . aac_coder != AAC_CODER_TWOLOOP)
cond	31:8	31:32	3	s -> options . aac_coder != AAC_CODER_TWOLOOP
water	31:8	0:0	4	s
op	31:9	0:0	4	->
water	31:11	0:0	4	options
op	31:18	0:0	4	.
water	31:19	0:0	4	aac_coder
op	31:29	0:0	4	!=
water	31:32	0:0	4	AAC_CODER_TWOLOOP
stmts	31:51	34:4	3	
water	31:51	0:0	4	{
water	32:8	0:0	4	s
op	32:9	0:0	4	->
water	32:11	0:0	4	options
op	32:18	0:0	4	.
water	32:19	0:0	4	intensity_stereo
op	32:36	0:0	4	=
water	32:38	0:0	4	0
water	32:39	0:0	4	;
water	33:8	0:0	4	s
op	33:9	0:0	4	->
water	33:11	0:0	4	options
op	33:18	0:0	4	.
water	33:19	0:0	4	pns
op	33:23	0:0	4	=
water	33:25	0:0	4	0
water	33:26	0:0	4	;
water	34:4	0:0	4	}
water	35:4	0:0	2	avctx
op	35:9	0:0	2	->
water	35:11	0:0	2	bit_rate
op	35:20	0:0	2	=
water	35:22	0:0	2	(
water	35:23	0:0	2	int
water	35:26	0:0	2	)
call	35:27	37:23	2	FFMIN
arg	36:8	36:56	3	6144*s->channels/1024.0*avctx->sample_rate
water	36:8	0:0	4	6144
op	36:13	0:0	4	*
water	36:15	0:0	4	s
op	36:16	0:0	4	->
water	36:18	0:0	4	channels
op	36:27	0:0	4	/
water	36:29	0:0	4	1024
op	36:33	0:0	4	.
water	36:34	0:0	4	0
op	36:36	0:0	4	*
water	36:38	0:0	4	avctx
op	36:43	0:0	4	->
water	36:45	0:0	4	sample_rate
arg	37:8	37:23	3	avctx->bit_rate
water	37:8	0:0	4	avctx
op	37:13	0:0	4	->
water	37:15	0:0	4	bit_rate
water	37:24	0:0	2	;
water	38:4	0:0	2	s
op	38:5	0:0	2	->
water	38:7	0:0	2	samplerate_index
op	38:24	0:0	2	=
water	38:26	0:0	2	i
water	38:27	0:0	2	;
water	39:4	0:0	2	s
op	39:5	0:0	2	->
water	39:7	0:0	2	chan_map
op	39:16	0:0	2	=
water	39:18	0:0	2	aac_chan_configs
op	39:34	0:0	2	[
water	39:35	0:0	2	s
op	39:36	0:0	2	->
water	39:38	0:0	2	channels
op	39:46	0:0	2	-
water	39:47	0:0	2	1
op	39:48	0:0	2	]
water	39:49	0:0	2	;
if	40:4	41:17	2	(( ret =dsp_init (avctx ,s ) ) < 0)
cond	40:8	40:37	3	( ret =dsp_init (avctx ,s ) ) < 0
water	40:8	0:0	4	(
water	40:9	0:0	4	ret
op	40:13	0:0	4	=
call	40:15	40:32	4	dsp_init
arg	40:24	40:29	5	avctx
water	40:24	0:0	6	avctx
arg	40:31	40:32	5	s
water	40:31	0:0	6	s
water	40:33	0:0	4	)
op	40:35	0:0	4	<
water	40:37	0:0	4	0
stmts	41:8	41:17	3	
goto	41:8	41:17	4	fail
water	41:13	0:0	5	fail
if	42:4	43:17	2	(( ret =alloc_buffers (avctx ,s ) ) < 0)
cond	42:8	42:42	3	( ret =alloc_buffers (avctx ,s ) ) < 0
water	42:8	0:0	4	(
water	42:9	0:0	4	ret
op	42:13	0:0	4	=
call	42:15	42:37	4	alloc_buffers
arg	42:29	42:34	5	avctx
water	42:29	0:0	6	avctx
arg	42:36	42:37	5	s
water	42:36	0:0	6	s
water	42:38	0:0	4	)
op	42:40	0:0	4	<
water	42:42	0:0	4	0
stmts	43:8	43:17	3	
goto	43:8	43:17	4	fail
water	43:13	0:0	5	fail
water	44:4	0:0	2	avctx
op	44:9	0:0	2	->
water	44:11	0:0	2	extradata_size
op	44:26	0:0	2	=
water	44:28	0:0	2	5
water	44:29	0:0	2	;
call	45:4	45:35	2	put_audio_specific_config
arg	45:30	45:35	3	avctx
water	45:30	0:0	4	avctx
water	45:36	0:0	2	;
water	46:4	0:0	2	sizes
op	46:9	0:0	2	[
water	46:10	0:0	2	0
op	46:11	0:0	2	]
op	46:15	0:0	2	=
water	46:17	0:0	2	ff_aac_swb_size_1024
op	46:37	0:0	2	[
water	46:38	0:0	2	i
op	46:39	0:0	2	]
water	46:40	0:0	2	;
water	47:4	0:0	2	sizes
op	47:9	0:0	2	[
water	47:10	0:0	2	1
op	47:11	0:0	2	]
op	47:15	0:0	2	=
water	47:17	0:0	2	ff_aac_swb_size_128
op	47:36	0:0	2	[
water	47:37	0:0	2	i
op	47:38	0:0	2	]
water	47:39	0:0	2	;
water	48:4	0:0	2	lengths
op	48:11	0:0	2	[
water	48:12	0:0	2	0
op	48:13	0:0	2	]
op	48:15	0:0	2	=
water	48:17	0:0	2	ff_aac_num_swb_1024
op	48:36	0:0	2	[
water	48:37	0:0	2	i
op	48:38	0:0	2	]
water	48:39	0:0	2	;
water	49:4	0:0	2	lengths
op	49:11	0:0	2	[
water	49:12	0:0	2	1
op	49:13	0:0	2	]
op	49:15	0:0	2	=
water	49:17	0:0	2	ff_aac_num_swb_128
op	49:35	0:0	2	[
water	49:36	0:0	2	i
op	49:37	0:0	2	]
water	49:38	0:0	2	;
for	50:4	51:52	2	(i = 0 ;i < s -> chan_map [ 0 ];i ++)
forinit	50:9	50:14	3	i = 0 ;
water	50:9	0:0	4	i
op	50:11	0:0	4	=
water	50:13	0:0	4	0
water	50:14	0:0	4	;
cond	50:16	50:33	3	i < s -> chan_map [ 0 ]
water	50:16	0:0	4	i
op	50:18	0:0	4	<
water	50:20	0:0	4	s
op	50:21	0:0	4	->
water	50:23	0:0	4	chan_map
op	50:31	0:0	4	[
water	50:32	0:0	4	0
op	50:33	0:0	4	]
forexpr	50:36	50:37	3	i ++
water	50:36	0:0	4	i
op	50:37	0:0	4	++
stmts	51:8	51:52	3	
water	51:8	0:0	4	grouping
op	51:16	0:0	4	[
water	51:17	0:0	4	i
op	51:18	0:0	4	]
op	51:20	0:0	4	=
water	51:22	0:0	4	s
op	51:23	0:0	4	->
water	51:25	0:0	4	chan_map
op	51:33	0:0	4	[
water	51:34	0:0	4	i
op	51:36	0:0	4	+
water	51:38	0:0	4	1
op	51:39	0:0	4	]
op	51:41	0:0	4	==
water	51:44	0:0	4	TYPE_CPE
water	51:52	0:0	4	;
if	52:4	54:17	2	(( ret =ff_psy_init (& s -> psy ,avctx ,2 ,sizes ,lengths ,s -> chan_map [ 0 ] ,grouping ) ) < 0)
cond	52:8	53:56	3	( ret =ff_psy_init (& s -> psy ,avctx ,2 ,sizes ,lengths ,s -> chan_map [ 0 ] ,grouping ) ) < 0
water	52:8	0:0	4	(
water	52:9	0:0	4	ret
op	52:13	0:0	4	=
call	52:15	53:51	4	ff_psy_init
arg	52:27	52:34	5	&s->psy
op	52:27	0:0	6	&
water	52:28	0:0	6	s
op	52:29	0:0	6	->
water	52:31	0:0	6	psy
arg	52:36	52:41	5	avctx
water	52:36	0:0	6	avctx
arg	52:43	52:44	5	2
water	52:43	0:0	6	2
arg	52:46	52:51	5	sizes
water	52:46	0:0	6	sizes
arg	52:53	52:60	5	lengths
water	52:53	0:0	6	lengths
arg	53:27	53:41	5	s->chan_map[0]
water	53:27	0:0	6	s
op	53:28	0:0	6	->
water	53:30	0:0	6	chan_map
op	53:38	0:0	6	[
water	53:39	0:0	6	0
op	53:40	0:0	6	]
arg	53:43	53:51	5	grouping
water	53:43	0:0	6	grouping
water	53:52	0:0	4	)
op	53:54	0:0	4	<
water	53:56	0:0	4	0
stmts	54:8	54:17	3	
goto	54:8	54:17	4	fail
water	54:13	0:0	5	fail
water	55:4	0:0	2	s
op	55:5	0:0	2	->
water	55:7	0:0	2	psypp
op	55:13	0:0	2	=
call	55:15	55:43	2	ff_psy_preprocess_init
arg	55:38	55:43	3	avctx
water	55:38	0:0	4	avctx
water	55:44	0:0	2	;
water	56:4	0:0	2	s
op	56:5	0:0	2	->
water	56:7	0:0	2	coder
op	56:13	0:0	2	=
op	56:15	0:0	2	&
water	56:16	0:0	2	ff_aac_coders
op	56:29	0:0	2	[
water	56:30	0:0	2	s
op	56:31	0:0	2	->
water	56:33	0:0	2	options
op	56:40	0:0	2	.
water	56:41	0:0	2	aac_coder
op	56:50	0:0	2	]
water	56:51	0:0	2	;
call	57:4	57:81	2	ff_lpc_init
arg	57:16	57:23	3	&s->lpc
op	57:16	0:0	4	&
water	57:17	0:0	4	s
op	57:18	0:0	4	->
water	57:20	0:0	4	lpc
arg	57:25	57:44	3	2*avctx->frame_size
water	57:25	0:0	4	2
op	57:26	0:0	4	*
water	57:27	0:0	4	avctx
op	57:32	0:0	4	->
water	57:34	0:0	4	frame_size
arg	57:46	57:59	3	TNS_MAX_ORDER
water	57:46	0:0	4	TNS_MAX_ORDER
arg	57:61	57:81	3	FF_LPC_TYPE_LEVINSON
water	57:61	0:0	4	FF_LPC_TYPE_LEVINSON
water	57:82	0:0	2	;
if	58:4	59:33	2	(HAVE_MIPSDSPR1)
cond	58:8	58:8	3	HAVE_MIPSDSPR1
water	58:8	0:0	4	HAVE_MIPSDSPR1
stmts	59:8	59:33	3	
call	59:8	59:32	4	ff_aac_coder_init_mips
arg	59:31	59:32	5	s
water	59:31	0:0	6	s
water	59:33	0:0	4	;
water	60:4	0:0	2	s
op	60:5	0:0	2	->
water	60:7	0:0	2	lambda
op	60:14	0:0	2	=
water	60:16	0:0	2	avctx
op	60:21	0:0	2	->
water	60:23	0:0	2	global_quality
op	60:38	0:0	2	>
water	60:40	0:0	2	0
water	60:42	0:0	2	?
water	60:44	0:0	2	avctx
op	60:49	0:0	2	->
water	60:51	0:0	2	global_quality
water	60:66	0:0	2	:
water	60:68	0:0	2	120
water	60:71	0:0	2	;
call	61:4	61:21	2	ff_aac_tableinit
water	61:22	0:0	2	;
water	62:4	0:0	2	avctx
op	62:9	0:0	2	->
water	62:11	0:0	2	initial_padding
op	62:27	0:0	2	=
water	62:29	0:0	2	1024
water	62:33	0:0	2	;
call	63:4	63:35	2	ff_af_queue_init
arg	63:21	63:26	3	avctx
water	63:21	0:0	4	avctx
arg	63:28	63:35	3	&s->afq
op	63:28	0:0	4	&
water	63:29	0:0	4	s
op	63:30	0:0	4	->
water	63:32	0:0	4	afq
water	63:36	0:0	2	;
return	64:4	64:12	2	0
water	64:11	0:0	3	0
label	65:0	65:4	2	fail :
call	66:4	66:24	2	aac_encode_end
arg	66:19	66:24	3	avctx
water	66:19	0:0	4	avctx
water	66:25	0:0	2	;
return	67:4	67:14	2	ret
water	67:11	0:0	3	ret
