func	1:0	94:0	0	static int	asf_read_stream_properties
params	1:37	0:0	1	
param	1:38	1:56	2	AVFormatContext *	s
param	1:58	1:81	2	const GUIDParseTable *	g
stmnts	0:0	93:12	1	
decl	3:4	3:34	2	ASFContext	*asf
op	3:20	0:0	2	=
water	3:22	0:0	2	s
op	3:23	0:0	2	->
water	3:25	0:0	2	priv_data
decl	4:4	4:27	2	AVIOContext	*pb
op	4:20	0:0	2	=
water	4:22	0:0	2	s
op	4:23	0:0	2	->
water	4:25	0:0	2	pb
decl	5:4	5:17	2	uint64_t	size
decl	6:4	6:38	2	uint32_t	err_data_len
water	6:25	0:0	2	,
decl	6:4	6:38	2	uint32_t	ts_data_len
decl	7:4	7:18	2	uint16_t	flags
decl	8:4	8:27	2	ff_asf_guid	stream_type
decl	9:4	9:25	2	enum AVMediaType	type
decl	10:4	10:14	2	int	i
water	10:9	0:0	2	,
decl	10:4	10:14	2	int	ret
decl	11:4	11:24	2	uint8_t	stream_index
decl	12:4	12:16	2	AVStream	*st
decl	13:4	13:21	2	ASFStream	*asf_st
if	15:4	16:34	2	(asf -> nb_streams >= ASF_MAX_STREAMS)
cond	15:8	15:27	3	asf -> nb_streams >= ASF_MAX_STREAMS
water	15:8	0:0	4	asf
op	15:11	0:0	4	->
water	15:13	0:0	4	nb_streams
op	15:24	0:0	4	>=
water	15:27	0:0	4	ASF_MAX_STREAMS
stmts	16:8	16:34	3	
return	16:8	16:34	4	AVERROR_INVALIDDATA
water	16:15	0:0	5	AVERROR_INVALIDDATA
water	17:4	0:0	2	size
op	17:9	0:0	2	=
call	17:11	17:23	2	avio_rl64
arg	17:21	17:23	3	pb
water	17:21	0:0	4	pb
water	17:24	0:0	2	;
call	18:4	18:32	2	ff_get_guid
arg	18:16	18:18	3	pb
water	18:16	0:0	4	pb
arg	18:20	18:32	3	&stream_type
op	18:20	0:0	4	&
water	18:21	0:0	4	stream_type
water	18:33	0:0	2	;
if	19:4	20:33	2	(!ff_guidcmp (& stream_type ,& ff_asf_audio_stream ))
cond	19:8	19:54	3	!ff_guidcmp (& stream_type ,& ff_asf_audio_stream )
op	19:8	0:0	4	!
call	19:9	19:54	4	ff_guidcmp
arg	19:20	19:32	5	&stream_type
op	19:20	0:0	6	&
water	19:21	0:0	6	stream_type
arg	19:34	19:54	5	&ff_asf_audio_stream
op	19:34	0:0	6	&
water	19:35	0:0	6	ff_asf_audio_stream
stmts	20:8	20:33	3	
water	20:8	0:0	4	type
op	20:13	0:0	4	=
water	20:15	0:0	4	AVMEDIA_TYPE_AUDIO
water	20:33	0:0	4	;
else	21:4	22:33	2
stmts	21:9	22:33	3	
if	21:9	22:33	4	(!ff_guidcmp (& stream_type ,& ff_asf_video_stream ))
cond	21:13	21:59	5	!ff_guidcmp (& stream_type ,& ff_asf_video_stream )
op	21:13	0:0	6	!
call	21:14	21:59	6	ff_guidcmp
arg	21:25	21:37	7	&stream_type
op	21:25	0:0	8	&
water	21:26	0:0	8	stream_type
arg	21:39	21:59	7	&ff_asf_video_stream
op	21:39	0:0	8	&
water	21:40	0:0	8	ff_asf_video_stream
stmts	22:8	22:33	5	
water	22:8	0:0	6	type
op	22:13	0:0	6	=
water	22:15	0:0	6	AVMEDIA_TYPE_VIDEO
water	22:33	0:0	6	;
else	23:4	24:33	2
stmts	23:9	24:33	3	
if	23:9	24:33	4	(!ff_guidcmp (& stream_type ,& ff_asf_jfif_media ))
cond	23:13	23:57	5	!ff_guidcmp (& stream_type ,& ff_asf_jfif_media )
op	23:13	0:0	6	!
call	23:14	23:57	6	ff_guidcmp
arg	23:25	23:37	7	&stream_type
op	23:25	0:0	8	&
water	23:26	0:0	8	stream_type
arg	23:39	23:57	7	&ff_asf_jfif_media
op	23:39	0:0	8	&
water	23:40	0:0	8	ff_asf_jfif_media
stmts	24:8	24:33	5	
water	24:8	0:0	6	type
op	24:13	0:0	6	=
water	24:15	0:0	6	AVMEDIA_TYPE_VIDEO
water	24:33	0:0	6	;
else	25:4	26:32	2
stmts	25:9	26:32	3	
if	25:9	26:32	4	(!ff_guidcmp (& stream_type ,& ff_asf_command_stream ))
cond	25:13	25:61	5	!ff_guidcmp (& stream_type ,& ff_asf_command_stream )
op	25:13	0:0	6	!
call	25:14	25:61	6	ff_guidcmp
arg	25:25	25:37	7	&stream_type
op	25:25	0:0	8	&
water	25:26	0:0	8	stream_type
arg	25:39	25:61	7	&ff_asf_command_stream
op	25:39	0:0	8	&
water	25:40	0:0	8	ff_asf_command_stream
stmts	26:8	26:32	5	
water	26:8	0:0	6	type
op	26:13	0:0	6	=
water	26:15	0:0	6	AVMEDIA_TYPE_DATA
water	26:32	0:0	6	;
else	27:4	29:35	2
stmts	27:9	29:35	3	
if	27:9	29:35	4	(!ff_guidcmp (& stream_type ,& ff_asf_ext_stream_embed_stream_header ))
cond	27:13	28:63	5	!ff_guidcmp (& stream_type ,& ff_asf_ext_stream_embed_stream_header )
op	27:13	0:0	6	!
call	27:14	28:63	6	ff_guidcmp
arg	27:25	27:37	7	&stream_type
op	27:25	0:0	8	&
water	27:26	0:0	8	stream_type
arg	28:25	28:63	7	&ff_asf_ext_stream_embed_stream_header
op	28:25	0:0	8	&
water	28:26	0:0	8	ff_asf_ext_stream_embed_stream_header
stmts	29:8	29:35	5	
water	29:8	0:0	6	type
op	29:13	0:0	6	=
water	29:15	0:0	6	AVMEDIA_TYPE_UNKNOWN
water	29:35	0:0	6	;
else	30:4	31:34	2
stmts	31:8	31:34	3	
return	31:8	31:34	4	AVERROR_INVALIDDATA
water	31:15	0:0	5	AVERROR_INVALIDDATA
call	32:4	32:32	2	ff_get_guid
arg	32:16	32:18	3	pb
water	32:16	0:0	4	pb
arg	32:20	32:32	3	&stream_type
op	32:20	0:0	4	&
water	32:21	0:0	4	stream_type
water	32:33	0:0	2	;
call	33:4	33:19	2	avio_skip
arg	33:14	33:16	3	pb
water	33:14	0:0	4	pb
arg	33:18	33:19	3	8
water	33:18	0:0	4	8
water	33:20	0:0	2	;
water	34:4	0:0	2	ts_data_len
op	34:21	0:0	2	=
call	34:23	34:35	2	avio_rl32
arg	34:33	34:35	3	pb
water	34:33	0:0	4	pb
water	34:36	0:0	2	;
water	35:4	0:0	2	err_data_len
op	35:21	0:0	2	=
call	35:23	35:35	2	avio_rl32
arg	35:33	35:35	3	pb
water	35:33	0:0	4	pb
water	35:36	0:0	2	;
water	36:4	0:0	2	flags
op	36:21	0:0	2	=
call	36:23	36:35	2	avio_rl16
arg	36:33	36:35	3	pb
water	36:33	0:0	4	pb
water	36:36	0:0	2	;
water	37:4	0:0	2	stream_index
op	37:17	0:0	2	=
water	37:19	0:0	2	flags
op	37:25	0:0	2	&
water	37:27	0:0	2	ASF_STREAM_NUM
water	37:41	0:0	2	;
for	38:4	44:8	2	(i = 0 ;i < asf -> nb_streams;i ++)
forinit	38:9	38:14	3	i = 0 ;
water	38:9	0:0	4	i
op	38:11	0:0	4	=
water	38:13	0:0	4	0
water	38:14	0:0	4	;
cond	38:16	38:25	3	i < asf -> nb_streams
water	38:16	0:0	4	i
op	38:18	0:0	4	<
water	38:20	0:0	4	asf
op	38:23	0:0	4	->
water	38:25	0:0	4	nb_streams
forexpr	38:37	38:38	3	i ++
water	38:37	0:0	4	i
op	38:38	0:0	4	++
stmts	39:8	44:8	3	
if	39:8	44:8	4	(stream_index == asf -> asf_st [ i ] -> stream_index)
cond	39:12	39:44	5	stream_index == asf -> asf_st [ i ] -> stream_index
water	39:12	0:0	6	stream_index
op	39:25	0:0	6	==
water	39:28	0:0	6	asf
op	39:31	0:0	6	->
water	39:33	0:0	6	asf_st
op	39:39	0:0	6	[
water	39:40	0:0	6	i
op	39:41	0:0	6	]
op	39:42	0:0	6	->
water	39:44	0:0	6	stream_index
stmts	39:58	44:8	5	
water	39:58	0:0	6	{
call	40:12	41:75	6	av_log
arg	40:19	40:20	7	s
water	40:19	0:0	8	s
arg	40:22	40:36	7	AV_LOG_WARNING
water	40:22	0:0	8	AV_LOG_WARNING
arg	41:19	41:75	7	"Duplicate stream found, this stream will be ignored.\n"
water	41:19	0:0	8	"Duplicate stream found, this stream will be ignored.\n"
water	41:76	0:0	6	;
call	42:12	42:48	6	align_position
arg	42:27	42:29	7	pb
water	42:27	0:0	8	pb
arg	42:31	42:42	7	asf->offset
water	42:31	0:0	8	asf
op	42:34	0:0	8	->
water	42:36	0:0	8	offset
arg	42:44	42:48	7	size
water	42:44	0:0	8	size
water	42:49	0:0	6	;
return	43:12	43:20	6	0
water	43:19	0:0	7	0
water	44:8	0:0	6	}
water	45:4	0:0	2	st
op	45:7	0:0	2	=
call	45:9	45:36	2	avformat_new_stream
arg	45:29	45:30	3	s
water	45:29	0:0	4	s
arg	45:32	45:36	3	NULL
water	45:32	0:0	4	NULL
water	45:37	0:0	2	;
if	46:4	47:30	2	(! st)
cond	46:8	46:9	3	! st
op	46:8	0:0	4	!
water	46:9	0:0	4	st
stmts	47:8	47:30	3	
return	47:8	47:30	4	AVERROR(ENOMEM)
call	47:15	47:29	5	AVERROR
arg	47:23	47:29	6	ENOMEM
water	47:23	0:0	7	ENOMEM
call	48:4	48:39	2	avpriv_set_pts_info
arg	48:24	48:26	3	st
water	48:24	0:0	4	st
arg	48:28	48:30	3	32
water	48:28	0:0	4	32
arg	48:32	48:33	3	1
water	48:32	0:0	4	1
arg	48:35	48:39	3	1000
water	48:35	0:0	4	1000
water	48:40	0:0	2	;
water	49:4	0:0	2	st
op	49:6	0:0	2	->
water	49:8	0:0	2	codec
op	49:13	0:0	2	->
water	49:15	0:0	2	codec_type
op	49:26	0:0	2	=
water	49:28	0:0	2	type
water	49:32	0:0	2	;
water	50:4	0:0	2	asf
op	50:7	0:0	2	->
water	50:9	0:0	2	asf_st
op	50:15	0:0	2	[
water	50:16	0:0	2	asf
op	50:19	0:0	2	->
water	50:21	0:0	2	nb_streams
op	50:31	0:0	2	]
op	50:33	0:0	2	=
call	50:35	50:61	2	av_mallocz
arg	50:46	50:61	3	sizeof(*asf_st)
op	50:46	0:0	4	sizeof
water	50:52	0:0	4	(
op	50:53	0:0	4	*
water	50:54	0:0	4	asf_st
water	50:60	0:0	4	)
water	50:62	0:0	2	;
if	51:4	52:30	2	(! asf -> asf_st [ asf -> nb_streams ])
cond	51:8	51:36	3	! asf -> asf_st [ asf -> nb_streams ]
op	51:8	0:0	4	!
water	51:9	0:0	4	asf
op	51:12	0:0	4	->
water	51:14	0:0	4	asf_st
op	51:20	0:0	4	[
water	51:21	0:0	4	asf
op	51:24	0:0	4	->
water	51:26	0:0	4	nb_streams
op	51:36	0:0	4	]
stmts	52:8	52:30	3	
return	52:8	52:30	4	AVERROR(ENOMEM)
call	52:15	52:29	5	AVERROR
arg	52:23	52:29	6	ENOMEM
water	52:23	0:0	7	ENOMEM
water	53:4	0:0	2	asf_st
op	53:33	0:0	2	=
water	53:35	0:0	2	asf
op	53:38	0:0	2	->
water	53:40	0:0	2	asf_st
op	53:46	0:0	2	[
water	53:47	0:0	2	asf
op	53:50	0:0	2	->
water	53:52	0:0	2	nb_streams
op	53:62	0:0	2	]
water	53:63	0:0	2	;
water	54:4	0:0	2	asf
op	54:7	0:0	2	->
water	54:9	0:0	2	nb_streams
op	54:19	0:0	2	++
water	54:21	0:0	2	;
water	55:4	0:0	2	asf_st
op	55:10	0:0	2	->
water	55:12	0:0	2	stream_index
op	55:33	0:0	2	=
water	55:35	0:0	2	stream_index
water	55:47	0:0	2	;
water	56:4	0:0	2	asf_st
op	56:10	0:0	2	->
water	56:12	0:0	2	index
op	56:33	0:0	2	=
water	56:35	0:0	2	st
op	56:37	0:0	2	->
water	56:39	0:0	2	index
water	56:44	0:0	2	;
water	57:4	0:0	2	asf_st
op	57:10	0:0	2	->
water	57:12	0:0	2	indexed
op	57:33	0:0	2	=
water	57:35	0:0	2	0
water	57:36	0:0	2	;
water	58:4	0:0	2	st
op	58:6	0:0	2	->
water	58:8	0:0	2	id
op	58:33	0:0	2	=
water	58:35	0:0	2	flags
op	58:41	0:0	2	&
water	58:43	0:0	2	ASF_STREAM_NUM
water	58:57	0:0	2	;
call	59:4	59:37	2	av_init_packet
arg	59:19	59:37	3	&asf_st->pkt.avpkt
op	59:19	0:0	4	&
water	59:20	0:0	4	asf_st
op	59:26	0:0	4	->
water	59:28	0:0	4	pkt
op	59:31	0:0	4	.
water	59:32	0:0	4	avpkt
water	59:38	0:0	2	;
water	60:4	0:0	2	asf_st
op	60:10	0:0	2	->
water	60:12	0:0	2	pkt
op	60:15	0:0	2	.
water	60:16	0:0	2	data_size
op	60:33	0:0	2	=
water	60:35	0:0	2	0
water	60:36	0:0	2	;
call	61:4	61:19	2	avio_skip
arg	61:14	61:16	3	pb
water	61:14	0:0	4	pb
arg	61:18	61:19	3	4
water	61:18	0:0	4	4
water	61:20	0:0	2	;
switch	62:4	76:4	2	(type)
cond	62:12	62:12	3	type
water	62:12	0:0	4	type
stmts	62:18	76:4	3	
water	62:18	0:0	4	{
label	63:4	63:27	4	case AVMEDIA_TYPE_AUDIO :
water	64:8	0:0	4	asf_st
op	64:14	0:0	4	->
water	64:16	0:0	4	type
op	64:21	0:0	4	=
water	64:23	0:0	4	AVMEDIA_TYPE_AUDIO
water	64:41	0:0	4	;
if	65:8	66:22	4	(( ret =ff_get_wav_header (s ,pb ,st -> codec ,ts_data_len ,0 ) ) < 0)
cond	65:12	65:74	5	( ret =ff_get_wav_header (s ,pb ,st -> codec ,ts_data_len ,0 ) ) < 0
water	65:12	0:0	6	(
water	65:13	0:0	6	ret
op	65:17	0:0	6	=
call	65:19	65:69	6	ff_get_wav_header
arg	65:37	65:38	7	s
water	65:37	0:0	8	s
arg	65:40	65:42	7	pb
water	65:40	0:0	8	pb
arg	65:44	65:53	7	st->codec
water	65:44	0:0	8	st
op	65:46	0:0	8	->
water	65:48	0:0	8	codec
arg	65:55	65:66	7	ts_data_len
water	65:55	0:0	8	ts_data_len
arg	65:68	65:69	7	0
water	65:68	0:0	8	0
water	65:70	0:0	6	)
op	65:72	0:0	6	<
water	65:74	0:0	6	0
stmts	66:12	66:22	5	
return	66:12	66:22	6	ret
water	66:19	0:0	7	ret
break	67:8	67:13	4	
label	68:4	68:27	4	case AVMEDIA_TYPE_VIDEO :
water	69:8	0:0	4	asf_st
op	69:14	0:0	4	->
water	69:16	0:0	4	type
op	69:21	0:0	4	=
water	69:23	0:0	4	AVMEDIA_TYPE_VIDEO
water	69:41	0:0	4	;
if	70:8	71:22	4	(( ret =parse_video_info (pb ,st ) ) < 0)
cond	70:12	70:47	5	( ret =parse_video_info (pb ,st ) ) < 0
water	70:12	0:0	6	(
water	70:13	0:0	6	ret
op	70:17	0:0	6	=
call	70:19	70:42	6	parse_video_info
arg	70:36	70:38	7	pb
water	70:36	0:0	8	pb
arg	70:40	70:42	7	st
water	70:40	0:0	8	st
water	70:43	0:0	6	)
op	70:45	0:0	6	<
water	70:47	0:0	6	0
stmts	71:12	71:22	5	
return	71:12	71:22	6	ret
water	71:19	0:0	7	ret
break	72:8	72:13	4	
label	73:4	73:11	4	default :
call	74:8	74:33	4	avio_skip
arg	74:18	74:20	5	pb
water	74:18	0:0	6	pb
arg	74:22	74:33	5	ts_data_len
water	74:22	0:0	6	ts_data_len
water	74:34	0:0	4	;
break	75:8	75:13	4	
water	76:4	0:0	4	}
if	77:4	91:4	2	(err_data_len)
cond	77:8	77:8	3	err_data_len
water	77:8	0:0	4	err_data_len
stmts	77:22	91:4	3	
water	77:22	0:0	4	{
if	78:8	89:8	4	(type == AVMEDIA_TYPE_AUDIO)
cond	78:12	78:20	5	type == AVMEDIA_TYPE_AUDIO
water	78:12	0:0	6	type
op	78:17	0:0	6	==
water	78:20	0:0	6	AVMEDIA_TYPE_AUDIO
stmts	78:40	89:8	5	
water	78:40	0:0	6	{
decl	79:12	79:38	6	uint8_t	span
op	79:25	0:0	6	=
call	79:27	79:37	7	avio_r8
arg	79:35	79:37	8	pb
water	79:35	0:0	9	pb
if	80:12	87:12	6	(span > 1)
cond	80:16	80:23	7	span > 1
water	80:16	0:0	8	span
op	80:21	0:0	8	>
water	80:23	0:0	8	1
stmts	80:26	87:12	7	
water	80:26	0:0	8	{
water	81:16	0:0	8	asf_st
op	81:22	0:0	8	->
water	81:24	0:0	8	span
op	81:42	0:0	8	=
water	81:44	0:0	8	span
water	81:48	0:0	8	;
water	82:16	0:0	8	asf_st
op	82:22	0:0	8	->
water	82:24	0:0	8	virtual_pkt_len
op	82:42	0:0	8	=
call	82:44	82:56	8	avio_rl16
arg	82:54	82:56	9	pb
water	82:54	0:0	10	pb
water	82:57	0:0	8	;
water	83:16	0:0	8	asf_st
op	83:22	0:0	8	->
water	83:24	0:0	8	virtual_chunk_len
op	83:42	0:0	8	=
call	83:44	83:56	8	avio_rl16
arg	83:54	83:56	9	pb
water	83:54	0:0	10	pb
water	83:57	0:0	8	;
if	84:16	85:46	8	(! asf_st -> virtual_chunk_len || ! asf_st -> virtual_pkt_len)
cond	84:20	84:59	9	! asf_st -> virtual_chunk_len || ! asf_st -> virtual_pkt_len
op	84:20	0:0	10	!
water	84:21	0:0	10	asf_st
op	84:27	0:0	10	->
water	84:29	0:0	10	virtual_chunk_len
op	84:47	0:0	10	||
op	84:50	0:0	10	!
water	84:51	0:0	10	asf_st
op	84:57	0:0	10	->
water	84:59	0:0	10	virtual_pkt_len
stmts	85:20	85:46	9	
return	85:20	85:46	10	AVERROR_INVALIDDATA
water	85:27	0:0	11	AVERROR_INVALIDDATA
call	86:16	86:46	8	avio_skip
arg	86:26	86:28	9	pb
water	86:26	0:0	10	pb
arg	86:30	86:46	9	err_data_len-5
water	86:30	0:0	10	err_data_len
op	86:43	0:0	10	-
water	86:45	0:0	10	5
water	86:47	0:0	8	;
water	87:12	0:0	8	}
else	87:14	88:47	6
stmts	88:16	88:47	7	
call	88:16	88:46	8	avio_skip
arg	88:26	88:28	9	pb
water	88:26	0:0	10	pb
arg	88:30	88:46	9	err_data_len-1
water	88:30	0:0	10	err_data_len
op	88:43	0:0	10	-
water	88:45	0:0	10	1
water	88:47	0:0	8	;
water	89:8	0:0	6	}
else	89:10	90:39	4
stmts	90:12	90:39	5	
call	90:12	90:38	6	avio_skip
arg	90:22	90:24	7	pb
water	90:22	0:0	8	pb
arg	90:26	90:38	7	err_data_len
water	90:26	0:0	8	err_data_len
water	90:39	0:0	6	;
water	91:4	0:0	4	}
call	92:4	92:40	2	align_position
arg	92:19	92:21	3	pb
water	92:19	0:0	4	pb
arg	92:23	92:34	3	asf->offset
water	92:23	0:0	4	asf
op	92:26	0:0	4	->
water	92:28	0:0	4	offset
arg	92:36	92:40	3	size
water	92:36	0:0	4	size
water	92:41	0:0	2	;
return	93:4	93:12	2	0
water	93:11	0:0	3	0
