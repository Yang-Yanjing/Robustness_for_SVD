func	1:0	238:0	0	static int	encode_picture
params	1:25	0:0	1	
param	1:26	1:43	2	MpegEncContext *	s
param	1:45	1:63	2	int	picture_number
stmnts	0:0	237:12	1	
decl	3:4	3:14	2	int	i
water	3:9	0:0	2	,
decl	3:4	3:14	2	int	ret
decl	4:4	4:12	2	int	bits
decl	5:4	5:46	2	int	context_count
op	5:22	0:0	2	=
water	5:24	0:0	2	s
op	5:25	0:0	2	->
water	5:27	0:0	2	slice_context_count
water	6:4	0:0	2	s
op	6:5	0:0	2	->
water	6:7	0:0	2	picture_number
op	6:22	0:0	2	=
water	6:24	0:0	2	picture_number
water	6:38	0:0	2	;
water	8:4	0:0	2	s
op	8:5	0:0	2	->
water	8:7	0:0	2	me
op	8:9	0:0	2	.
water	8:10	0:0	2	mb_var_sum_temp
op	8:29	0:0	2	=
water	9:4	0:0	2	s
op	9:5	0:0	2	->
water	9:7	0:0	2	me
op	9:9	0:0	2	.
water	9:10	0:0	2	mc_mb_var_sum_temp
op	9:29	0:0	2	=
water	9:31	0:0	2	0
water	9:32	0:0	2	;
if	12:4	13:30	2	(s -> codec_id == AV_CODEC_ID_MPEG1VIDEO || s -> codec_id == AV_CODEC_ID_MPEG2VIDEO || ( s -> h263_pred && ! s -> msmpeg4_version ))
cond	12:8	12:126	3	s -> codec_id == AV_CODEC_ID_MPEG1VIDEO || s -> codec_id == AV_CODEC_ID_MPEG2VIDEO || ( s -> h263_pred && ! s -> msmpeg4_version )
water	12:8	0:0	4	s
op	12:9	0:0	4	->
water	12:11	0:0	4	codec_id
op	12:20	0:0	4	==
water	12:23	0:0	4	AV_CODEC_ID_MPEG1VIDEO
op	12:46	0:0	4	||
water	12:49	0:0	4	s
op	12:50	0:0	4	->
water	12:52	0:0	4	codec_id
op	12:61	0:0	4	==
water	12:64	0:0	4	AV_CODEC_ID_MPEG2VIDEO
op	12:87	0:0	4	||
water	12:90	0:0	4	(
water	12:91	0:0	4	s
op	12:92	0:0	4	->
water	12:94	0:0	4	h263_pred
op	12:104	0:0	4	&&
op	12:107	0:0	4	!
water	12:108	0:0	4	s
op	12:109	0:0	4	->
water	12:111	0:0	4	msmpeg4_version
water	12:126	0:0	4	)
stmts	13:8	13:30	3	
call	13:8	13:29	4	set_frame_distances
arg	13:28	13:29	5	s
water	13:28	0:0	6	s
water	13:30	0:0	4	;
if	14:4	15:28	2	(CONFIG_MPEG4_ENCODER && s -> codec_id == AV_CODEC_ID_MPEG4)
cond	14:7	14:46	3	CONFIG_MPEG4_ENCODER && s -> codec_id == AV_CODEC_ID_MPEG4
water	14:7	0:0	4	CONFIG_MPEG4_ENCODER
op	14:28	0:0	4	&&
water	14:31	0:0	4	s
op	14:32	0:0	4	->
water	14:34	0:0	4	codec_id
op	14:43	0:0	4	==
water	14:46	0:0	4	AV_CODEC_ID_MPEG4
stmts	15:8	15:28	3	
call	15:8	15:27	4	ff_set_mpeg4_time
arg	15:26	15:27	5	s
water	15:26	0:0	6	s
water	15:28	0:0	4	;
water	16:4	0:0	2	s
op	16:5	0:0	2	->
water	16:7	0:0	2	me
op	16:9	0:0	2	.
water	16:10	0:0	2	scene_change_score
op	16:28	0:0	2	=
water	16:29	0:0	2	0
water	16:30	0:0	2	;
if	18:4	21:4	2	(s -> pict_type == AV_PICTURE_TYPE_I)
cond	18:7	18:21	3	s -> pict_type == AV_PICTURE_TYPE_I
water	18:7	0:0	4	s
op	18:8	0:0	4	->
water	18:10	0:0	4	pict_type
op	18:19	0:0	4	==
water	18:21	0:0	4	AV_PICTURE_TYPE_I
stmts	18:39	21:4	3	
water	18:39	0:0	4	{
if	19:8	19:52	4	(s -> msmpeg4_version >= 3)
cond	19:11	19:33	5	s -> msmpeg4_version >= 3
water	19:11	0:0	6	s
op	19:12	0:0	6	->
water	19:14	0:0	6	msmpeg4_version
op	19:30	0:0	6	>=
water	19:33	0:0	6	3
stmts	19:36	19:52	5	
water	19:36	0:0	6	s
op	19:37	0:0	6	->
water	19:39	0:0	6	no_rounding
op	19:50	0:0	6	=
water	19:51	0:0	6	1
water	19:52	0:0	6	;
else	20:8	20:52	4
stmts	20:36	20:52	5	
water	20:36	0:0	6	s
op	20:37	0:0	6	->
water	20:39	0:0	6	no_rounding
op	20:50	0:0	6	=
water	20:51	0:0	6	0
water	20:52	0:0	6	;
water	21:4	0:0	4	}
else	21:5	24:4	2
stmts	21:10	24:4	3	
if	21:10	24:4	4	(s -> pict_type != AV_PICTURE_TYPE_B)
cond	21:13	21:27	5	s -> pict_type != AV_PICTURE_TYPE_B
water	21:13	0:0	6	s
op	21:14	0:0	6	->
water	21:16	0:0	6	pict_type
op	21:25	0:0	6	!=
water	21:27	0:0	6	AV_PICTURE_TYPE_B
stmts	21:45	24:4	5	
water	21:45	0:0	6	{
if	22:8	23:31	6	(s -> flipflop_rounding || s -> codec_id == AV_CODEC_ID_H263P || s -> codec_id == AV_CODEC_ID_MPEG4)
cond	22:11	22:86	7	s -> flipflop_rounding || s -> codec_id == AV_CODEC_ID_H263P || s -> codec_id == AV_CODEC_ID_MPEG4
water	22:11	0:0	8	s
op	22:12	0:0	8	->
water	22:14	0:0	8	flipflop_rounding
op	22:32	0:0	8	||
water	22:35	0:0	8	s
op	22:36	0:0	8	->
water	22:38	0:0	8	codec_id
op	22:47	0:0	8	==
water	22:50	0:0	8	AV_CODEC_ID_H263P
op	22:68	0:0	8	||
water	22:71	0:0	8	s
op	22:72	0:0	8	->
water	22:74	0:0	8	codec_id
op	22:83	0:0	8	==
water	22:86	0:0	8	AV_CODEC_ID_MPEG4
stmts	23:12	23:31	7	
water	23:12	0:0	8	s
op	23:13	0:0	8	->
water	23:15	0:0	8	no_rounding
op	23:27	0:0	8	^=
water	23:30	0:0	8	1
water	23:31	0:0	8	;
water	24:4	0:0	6	}
if	25:4	29:4	2	(s -> avctx -> flags & AV_CODEC_FLAG_PASS2)
cond	25:8	25:26	3	s -> avctx -> flags & AV_CODEC_FLAG_PASS2
water	25:8	0:0	4	s
op	25:9	0:0	4	->
water	25:11	0:0	4	avctx
op	25:16	0:0	4	->
water	25:18	0:0	4	flags
op	25:24	0:0	4	&
water	25:26	0:0	4	AV_CODEC_FLAG_PASS2
stmts	25:47	29:4	3	
water	25:47	0:0	4	{
if	26:8	27:21	4	(estimate_qp (s ,1 ) < 0)
cond	26:12	26:31	5	estimate_qp (s ,1 ) < 0
call	26:12	26:27	6	estimate_qp
arg	26:24	26:25	7	s
water	26:24	0:0	8	s
arg	26:26	26:27	7	1
water	26:26	0:0	8	1
op	26:29	0:0	6	<
water	26:31	0:0	6	0
stmts	27:12	27:21	5	
return	27:12	27:21	6	-1
op	27:19	0:0	7	-
water	27:20	0:0	7	1
call	28:8	28:28	4	ff_get_2pass_fcode
arg	28:27	28:28	5	s
water	28:27	0:0	6	s
water	28:29	0:0	4	;
water	29:4	0:0	4	}
else	29:6	35:4	2
stmts	29:11	35:4	3	
if	29:11	35:4	4	(! ( s -> avctx -> flags & AV_CODEC_FLAG_QSCALE ))
cond	29:15	29:55	5	! ( s -> avctx -> flags & AV_CODEC_FLAG_QSCALE )
op	29:15	0:0	6	!
water	29:16	0:0	6	(
water	29:17	0:0	6	s
op	29:18	0:0	6	->
water	29:20	0:0	6	avctx
op	29:25	0:0	6	->
water	29:27	0:0	6	flags
op	29:33	0:0	6	&
water	29:35	0:0	6	AV_CODEC_FLAG_QSCALE
water	29:55	0:0	6	)
stmts	29:58	35:4	5	
water	29:58	0:0	6	{
if	30:8	31:55	6	(s -> pict_type == AV_PICTURE_TYPE_B)
cond	30:11	30:25	7	s -> pict_type == AV_PICTURE_TYPE_B
water	30:11	0:0	8	s
op	30:12	0:0	8	->
water	30:14	0:0	8	pict_type
op	30:23	0:0	8	==
water	30:25	0:0	8	AV_PICTURE_TYPE_B
stmts	31:12	31:55	7	
water	31:12	0:0	8	s
op	31:13	0:0	8	->
water	31:15	0:0	8	lambda
op	31:21	0:0	8	=
water	31:23	0:0	8	s
op	31:24	0:0	8	->
water	31:26	0:0	8	last_lambda_for
op	31:41	0:0	8	[
water	31:42	0:0	8	s
op	31:43	0:0	8	->
water	31:45	0:0	8	pict_type
op	31:54	0:0	8	]
water	31:55	0:0	8	;
else	32:8	33:66	6
stmts	33:12	33:66	7	
water	33:12	0:0	8	s
op	33:13	0:0	8	->
water	33:15	0:0	8	lambda
op	33:21	0:0	8	=
water	33:23	0:0	8	s
op	33:24	0:0	8	->
water	33:26	0:0	8	last_lambda_for
op	33:41	0:0	8	[
water	33:42	0:0	8	s
op	33:43	0:0	8	->
water	33:45	0:0	8	last_non_b_pict_type
op	33:65	0:0	8	]
water	33:66	0:0	8	;
call	34:8	34:23	6	update_qscale
arg	34:22	34:23	7	s
water	34:22	0:0	8	s
water	34:24	0:0	6	;
water	35:4	0:0	6	}
if	36:4	41:4	2	(s -> codec_id != AV_CODEC_ID_AMV && s -> codec_id != AV_CODEC_ID_MJPEG)
cond	36:7	36:56	3	s -> codec_id != AV_CODEC_ID_AMV && s -> codec_id != AV_CODEC_ID_MJPEG
water	36:7	0:0	4	s
op	36:8	0:0	4	->
water	36:10	0:0	4	codec_id
op	36:19	0:0	4	!=
water	36:22	0:0	4	AV_CODEC_ID_AMV
op	36:38	0:0	4	&&
water	36:41	0:0	4	s
op	36:42	0:0	4	->
water	36:44	0:0	4	codec_id
op	36:53	0:0	4	!=
water	36:56	0:0	4	AV_CODEC_ID_MJPEG
stmts	36:74	41:4	3	
water	36:74	0:0	4	{
if	37:8	37:97	4	(s -> q_chroma_intra_matrix != s -> q_intra_matrix)
cond	37:11	37:44	5	s -> q_chroma_intra_matrix != s -> q_intra_matrix
water	37:11	0:0	6	s
op	37:12	0:0	6	->
water	37:14	0:0	6	q_chroma_intra_matrix
op	37:38	0:0	6	!=
water	37:41	0:0	6	s
op	37:42	0:0	6	->
water	37:44	0:0	6	q_intra_matrix
stmts	37:62	37:97	5	
call	37:62	37:96	6	av_freep
arg	37:71	37:96	7	&s->q_chroma_intra_matrix
op	37:71	0:0	8	&
water	37:72	0:0	8	s
op	37:73	0:0	8	->
water	37:75	0:0	8	q_chroma_intra_matrix
water	37:97	0:0	6	;
if	38:8	38:99	4	(s -> q_chroma_intra_matrix16 != s -> q_intra_matrix16)
cond	38:11	38:44	5	s -> q_chroma_intra_matrix16 != s -> q_intra_matrix16
water	38:11	0:0	6	s
op	38:12	0:0	6	->
water	38:14	0:0	6	q_chroma_intra_matrix16
op	38:38	0:0	6	!=
water	38:41	0:0	6	s
op	38:42	0:0	6	->
water	38:44	0:0	6	q_intra_matrix16
stmts	38:62	38:99	5	
call	38:62	38:98	6	av_freep
arg	38:71	38:98	7	&s->q_chroma_intra_matrix16
op	38:71	0:0	8	&
water	38:72	0:0	8	s
op	38:73	0:0	8	->
water	38:75	0:0	8	q_chroma_intra_matrix16
water	38:99	0:0	6	;
water	39:8	0:0	4	s
op	39:9	0:0	4	->
water	39:11	0:0	4	q_chroma_intra_matrix
op	39:35	0:0	4	=
water	39:37	0:0	4	s
op	39:38	0:0	4	->
water	39:40	0:0	4	q_intra_matrix
water	39:54	0:0	4	;
water	40:8	0:0	4	s
op	40:9	0:0	4	->
water	40:11	0:0	4	q_chroma_intra_matrix16
op	40:35	0:0	4	=
water	40:37	0:0	4	s
op	40:38	0:0	4	->
water	40:40	0:0	4	q_intra_matrix16
water	40:56	0:0	4	;
water	41:4	0:0	4	}
water	42:4	0:0	2	s
op	42:5	0:0	2	->
water	42:7	0:0	2	mb_intra
op	42:15	0:0	2	=
water	42:16	0:0	2	0
water	42:17	0:0	2	;
for	43:4	47:4	2	(i = 1 ;i < context_count;i ++)
forinit	43:8	43:11	3	i = 1 ;
water	43:8	0:0	4	i
op	43:9	0:0	4	=
water	43:10	0:0	4	1
water	43:11	0:0	4	;
cond	43:13	43:15	3	i < context_count
water	43:13	0:0	4	i
op	43:14	0:0	4	<
water	43:15	0:0	4	context_count
forexpr	43:30	43:31	3	i ++
water	43:30	0:0	4	i
op	43:31	0:0	4	++
stmts	43:34	47:4	3	
water	43:34	0:0	4	{
water	44:8	0:0	4	ret
op	44:12	0:0	4	=
call	44:14	44:65	4	ff_update_duplicate_context
arg	44:42	44:62	5	s->thread_context[i]
water	44:42	0:0	6	s
op	44:43	0:0	6	->
water	44:45	0:0	6	thread_context
op	44:59	0:0	6	[
water	44:60	0:0	6	i
op	44:61	0:0	6	]
arg	44:64	44:65	5	s
water	44:64	0:0	6	s
water	44:66	0:0	4	;
if	45:8	46:22	4	(ret < 0)
cond	45:12	45:18	5	ret < 0
water	45:12	0:0	6	ret
op	45:16	0:0	6	<
water	45:18	0:0	6	0
stmts	46:12	46:22	5	
return	46:12	46:22	6	ret
water	46:19	0:0	7	ret
water	47:4	0:0	4	}
if	48:4	49:17	2	(ff_init_me (s ) < 0)
cond	48:7	48:21	3	ff_init_me (s ) < 0
call	48:7	48:19	4	ff_init_me
arg	48:18	48:19	5	s
water	48:18	0:0	6	s
op	48:20	0:0	4	<
water	48:21	0:0	4	0
stmts	49:8	49:17	3	
return	49:8	49:17	4	-1
op	49:15	0:0	5	-
water	49:16	0:0	5	1
if	51:4	60:4	2	(s -> pict_type != AV_PICTURE_TYPE_I)
cond	51:7	51:23	3	s -> pict_type != AV_PICTURE_TYPE_I
water	51:7	0:0	4	s
op	51:8	0:0	4	->
water	51:10	0:0	4	pict_type
op	51:20	0:0	4	!=
water	51:23	0:0	4	AV_PICTURE_TYPE_I
stmts	51:41	60:4	3	
water	51:41	0:0	4	{
water	52:8	0:0	4	s
op	52:9	0:0	4	->
water	52:11	0:0	4	lambda
op	52:18	0:0	4	=
water	52:20	0:0	4	(
water	52:21	0:0	4	s
op	52:22	0:0	4	->
water	52:24	0:0	4	lambda
op	52:31	0:0	4	*
water	52:33	0:0	4	s
op	52:34	0:0	4	->
water	52:36	0:0	4	avctx
op	52:41	0:0	4	->
water	52:43	0:0	4	me_penalty_compensation
op	52:67	0:0	4	+
water	52:69	0:0	4	128
water	52:72	0:0	4	)
op	52:73	0:0	4	>>
water	52:75	0:0	4	8
water	52:76	0:0	4	;
water	53:8	0:0	4	s
op	53:9	0:0	4	->
water	53:11	0:0	4	lambda2
op	53:18	0:0	4	=
water	53:20	0:0	4	(
water	53:21	0:0	4	s
op	53:22	0:0	4	->
water	53:24	0:0	4	lambda2
op	53:31	0:0	4	*
water	53:33	0:0	4	(
water	53:34	0:0	4	int64_t
water	53:41	0:0	4	)
water	53:42	0:0	4	s
op	53:43	0:0	4	->
water	53:45	0:0	4	avctx
op	53:50	0:0	4	->
water	53:52	0:0	4	me_penalty_compensation
op	53:76	0:0	4	+
water	53:78	0:0	4	128
water	53:81	0:0	4	)
op	53:82	0:0	4	>>
water	53:84	0:0	4	8
water	53:85	0:0	4	;
if	54:8	58:8	4	(s -> pict_type != AV_PICTURE_TYPE_B)
cond	54:12	54:28	5	s -> pict_type != AV_PICTURE_TYPE_B
water	54:12	0:0	6	s
op	54:13	0:0	6	->
water	54:15	0:0	6	pict_type
op	54:25	0:0	6	!=
water	54:28	0:0	6	AV_PICTURE_TYPE_B
stmts	54:47	58:8	5	
water	54:47	0:0	6	{
if	55:12	57:12	6	(( s -> avctx -> pre_me && s -> last_non_b_pict_type == AV_PICTURE_TYPE_I ) || s -> avctx -> pre_me == 2)
cond	55:15	55:101	7	( s -> avctx -> pre_me && s -> last_non_b_pict_type == AV_PICTURE_TYPE_I ) || s -> avctx -> pre_me == 2
water	55:15	0:0	8	(
water	55:16	0:0	8	s
op	55:17	0:0	8	->
water	55:19	0:0	8	avctx
op	55:24	0:0	8	->
water	55:26	0:0	8	pre_me
op	55:33	0:0	8	&&
water	55:36	0:0	8	s
op	55:37	0:0	8	->
water	55:39	0:0	8	last_non_b_pict_type
op	55:59	0:0	8	==
water	55:61	0:0	8	AV_PICTURE_TYPE_I
water	55:78	0:0	8	)
op	55:80	0:0	8	||
water	55:83	0:0	8	s
op	55:84	0:0	8	->
water	55:86	0:0	8	avctx
op	55:91	0:0	8	->
water	55:93	0:0	8	pre_me
op	55:99	0:0	8	==
water	55:101	0:0	8	2
stmts	55:103	57:12	7	
water	55:103	0:0	8	{
call	56:16	56:129	8	s->avctx->execute
arg	56:34	56:42	9	s->avctx
water	56:34	0:0	10	s
op	56:35	0:0	10	->
water	56:37	0:0	10	avctx
arg	56:44	56:70	9	pre_estimate_motion_thread
water	56:44	0:0	10	pre_estimate_motion_thread
arg	56:72	56:93	9	&s->thread_context[0]
op	56:72	0:0	10	&
water	56:73	0:0	10	s
op	56:74	0:0	10	->
water	56:76	0:0	10	thread_context
op	56:90	0:0	10	[
water	56:91	0:0	10	0
op	56:92	0:0	10	]
arg	56:95	56:99	9	NULL
water	56:95	0:0	10	NULL
arg	56:101	56:114	9	context_count
water	56:101	0:0	10	context_count
arg	56:116	56:129	9	sizeof(void*)
op	56:116	0:0	10	sizeof
water	56:122	0:0	10	(
water	56:123	0:0	10	void
op	56:127	0:0	10	*
water	56:128	0:0	10	)
water	56:130	0:0	8	;
water	57:12	0:0	8	}
water	58:8	0:0	6	}
call	59:8	59:117	4	s->avctx->execute
arg	59:26	59:34	5	s->avctx
water	59:26	0:0	6	s
op	59:27	0:0	6	->
water	59:29	0:0	6	avctx
arg	59:36	59:58	5	estimate_motion_thread
water	59:36	0:0	6	estimate_motion_thread
arg	59:60	59:81	5	&s->thread_context[0]
op	59:60	0:0	6	&
water	59:61	0:0	6	s
op	59:62	0:0	6	->
water	59:64	0:0	6	thread_context
op	59:78	0:0	6	[
water	59:79	0:0	6	0
op	59:80	0:0	6	]
arg	59:83	59:87	5	NULL
water	59:83	0:0	6	NULL
arg	59:89	59:102	5	context_count
water	59:89	0:0	6	context_count
arg	59:104	59:117	5	sizeof(void*)
op	59:104	0:0	6	sizeof
water	59:110	0:0	6	(
water	59:111	0:0	6	void
op	59:115	0:0	6	*
water	59:116	0:0	6	)
water	59:118	0:0	4	;
water	60:4	0:0	4	}
else	60:5	68:4	2
stmts	60:10	68:4	3	
water	60:10	0:0	4	{
for	62:8	63:50	4	(i = 0 ;i < s -> mb_stride * s -> mb_height;i ++)
forinit	62:12	62:15	5	i = 0 ;
water	62:12	0:0	6	i
op	62:13	0:0	6	=
water	62:14	0:0	6	0
water	62:15	0:0	6	;
cond	62:17	62:35	5	i < s -> mb_stride * s -> mb_height
water	62:17	0:0	6	i
op	62:18	0:0	6	<
water	62:19	0:0	6	s
op	62:20	0:0	6	->
water	62:22	0:0	6	mb_stride
op	62:31	0:0	6	*
water	62:32	0:0	6	s
op	62:33	0:0	6	->
water	62:35	0:0	6	mb_height
forexpr	62:46	62:47	5	i ++
water	62:46	0:0	6	i
op	62:47	0:0	6	++
stmts	63:12	63:50	5	
water	63:12	0:0	6	s
op	63:13	0:0	6	->
water	63:15	0:0	6	mb_type
op	63:22	0:0	6	[
water	63:23	0:0	6	i
op	63:24	0:0	6	]
op	63:25	0:0	6	=
water	63:27	0:0	6	CANDIDATE_MB_TYPE_INTRA
water	63:50	0:0	6	;
if	64:8	67:8	4	(! s -> fixed_qscale)
cond	64:11	64:15	5	! s -> fixed_qscale
op	64:11	0:0	6	!
water	64:12	0:0	6	s
op	64:13	0:0	6	->
water	64:15	0:0	6	fixed_qscale
stmts	64:28	67:8	5	
water	64:28	0:0	6	{
call	66:12	66:112	6	s->avctx->execute
arg	66:30	66:38	7	s->avctx
water	66:30	0:0	8	s
op	66:31	0:0	8	->
water	66:33	0:0	8	avctx
arg	66:40	66:53	7	mb_var_thread
water	66:40	0:0	8	mb_var_thread
arg	66:55	66:76	7	&s->thread_context[0]
op	66:55	0:0	8	&
water	66:56	0:0	8	s
op	66:57	0:0	8	->
water	66:59	0:0	8	thread_context
op	66:73	0:0	8	[
water	66:74	0:0	8	0
op	66:75	0:0	8	]
arg	66:78	66:82	7	NULL
water	66:78	0:0	8	NULL
arg	66:84	66:97	7	context_count
water	66:84	0:0	8	context_count
arg	66:99	66:112	7	sizeof(void*)
op	66:99	0:0	8	sizeof
water	66:105	0:0	8	(
water	66:106	0:0	8	void
op	66:110	0:0	8	*
water	66:111	0:0	8	)
water	66:113	0:0	6	;
water	67:8	0:0	6	}
water	68:4	0:0	4	}
for	69:4	71:4	2	(i = 1 ;i < context_count;i ++)
forinit	69:8	69:11	3	i = 1 ;
water	69:8	0:0	4	i
op	69:9	0:0	4	=
water	69:10	0:0	4	1
water	69:11	0:0	4	;
cond	69:13	69:15	3	i < context_count
water	69:13	0:0	4	i
op	69:14	0:0	4	<
water	69:15	0:0	4	context_count
forexpr	69:30	69:31	3	i ++
water	69:30	0:0	4	i
op	69:31	0:0	4	++
stmts	69:34	71:4	3	
water	69:34	0:0	4	{
call	70:8	70:54	4	merge_context_after_me
arg	70:31	70:32	5	s
water	70:31	0:0	6	s
arg	70:34	70:54	5	s->thread_context[i]
water	70:34	0:0	6	s
op	70:35	0:0	6	->
water	70:37	0:0	6	thread_context
op	70:51	0:0	6	[
water	70:52	0:0	6	i
op	70:53	0:0	6	]
water	70:55	0:0	4	;
water	71:4	0:0	4	}
water	72:4	0:0	2	s
op	72:5	0:0	2	->
water	72:7	0:0	2	current_picture
op	72:22	0:0	2	.
water	72:23	0:0	2	mc_mb_var_sum
op	72:36	0:0	2	=
water	72:38	0:0	2	s
op	72:39	0:0	2	->
water	72:41	0:0	2	current_picture_ptr
op	72:60	0:0	2	->
water	72:62	0:0	2	mc_mb_var_sum
op	72:75	0:0	2	=
water	72:77	0:0	2	s
op	72:78	0:0	2	->
water	72:80	0:0	2	me
op	72:82	0:0	2	.
water	72:83	0:0	2	mc_mb_var_sum_temp
water	72:101	0:0	2	;
water	73:4	0:0	2	s
op	73:5	0:0	2	->
water	73:7	0:0	2	current_picture
op	73:22	0:0	2	.
water	73:26	0:0	2	mb_var_sum
op	73:36	0:0	2	=
water	73:38	0:0	2	s
op	73:39	0:0	2	->
water	73:41	0:0	2	current_picture_ptr
op	73:60	0:0	2	->
water	73:65	0:0	2	mb_var_sum
op	73:75	0:0	2	=
water	73:77	0:0	2	s
op	73:78	0:0	2	->
water	73:80	0:0	2	me
op	73:82	0:0	2	.
water	73:86	0:0	2	mb_var_sum_temp
water	73:101	0:0	2	;
call	74:4	74:11	2	emms_c
water	74:12	0:0	2	;
if	75:4	83:4	2	(s -> me . scene_change_score > s -> avctx -> scenechange_threshold && s -> pict_type == AV_PICTURE_TYPE_P)
cond	75:7	75:85	3	s -> me . scene_change_score > s -> avctx -> scenechange_threshold && s -> pict_type == AV_PICTURE_TYPE_P
water	75:7	0:0	4	s
op	75:8	0:0	4	->
water	75:10	0:0	4	me
op	75:12	0:0	4	.
water	75:13	0:0	4	scene_change_score
op	75:32	0:0	4	>
water	75:34	0:0	4	s
op	75:35	0:0	4	->
water	75:37	0:0	4	avctx
op	75:42	0:0	4	->
water	75:44	0:0	4	scenechange_threshold
op	75:66	0:0	4	&&
water	75:69	0:0	4	s
op	75:70	0:0	4	->
water	75:72	0:0	4	pict_type
op	75:82	0:0	4	==
water	75:85	0:0	4	AV_PICTURE_TYPE_P
stmts	75:103	83:4	3	
water	75:103	0:0	4	{
water	76:8	0:0	4	s
op	76:9	0:0	4	->
water	76:11	0:0	4	pict_type
op	76:20	0:0	4	=
water	76:22	0:0	4	AV_PICTURE_TYPE_I
water	76:39	0:0	4	;
for	77:8	78:50	4	(i = 0 ;i < s -> mb_stride * s -> mb_height;i ++)
forinit	77:12	77:15	5	i = 0 ;
water	77:12	0:0	6	i
op	77:13	0:0	6	=
water	77:14	0:0	6	0
water	77:15	0:0	6	;
cond	77:17	77:35	5	i < s -> mb_stride * s -> mb_height
water	77:17	0:0	6	i
op	77:18	0:0	6	<
water	77:19	0:0	6	s
op	77:20	0:0	6	->
water	77:22	0:0	6	mb_stride
op	77:31	0:0	6	*
water	77:32	0:0	6	s
op	77:33	0:0	6	->
water	77:35	0:0	6	mb_height
forexpr	77:46	77:47	5	i ++
water	77:46	0:0	6	i
op	77:47	0:0	6	++
stmts	78:12	78:50	5	
water	78:12	0:0	6	s
op	78:13	0:0	6	->
water	78:15	0:0	6	mb_type
op	78:22	0:0	6	[
water	78:23	0:0	6	i
op	78:24	0:0	6	]
op	78:25	0:0	6	=
water	78:27	0:0	6	CANDIDATE_MB_TYPE_INTRA
water	78:50	0:0	6	;
if	79:8	80:28	4	(s -> msmpeg4_version >= 3)
cond	79:11	79:33	5	s -> msmpeg4_version >= 3
water	79:11	0:0	6	s
op	79:12	0:0	6	->
water	79:14	0:0	6	msmpeg4_version
op	79:30	0:0	6	>=
water	79:33	0:0	6	3
stmts	80:12	80:28	5	
water	80:12	0:0	6	s
op	80:13	0:0	6	->
water	80:15	0:0	6	no_rounding
op	80:26	0:0	6	=
water	80:27	0:0	6	1
water	80:28	0:0	6	;
call	81:8	82:79	4	ff_dlog
arg	81:16	81:17	5	s
water	81:16	0:0	6	s
arg	81:19	81:85	5	"Scene change detected, encoding as I Frame %"PRId64" %"PRId64"\n"
water	81:19	0:0	6	"Scene change detected, encoding as I Frame %"
water	81:65	0:0	6	PRId64
water	81:71	0:0	6	" %"
water	81:75	0:0	6	PRId64
water	81:81	0:0	6	"\n"
arg	82:16	82:45	5	s->current_picture.mb_var_sum
water	82:16	0:0	6	s
op	82:17	0:0	6	->
water	82:19	0:0	6	current_picture
op	82:34	0:0	6	.
water	82:35	0:0	6	mb_var_sum
arg	82:47	82:79	5	s->current_picture.mc_mb_var_sum
water	82:47	0:0	6	s
op	82:48	0:0	6	->
water	82:50	0:0	6	current_picture
op	82:65	0:0	6	.
water	82:66	0:0	6	mc_mb_var_sum
water	82:80	0:0	4	;
water	83:4	0:0	4	}
if	84:4	130:4	2	(! s -> umvplus)
cond	84:7	84:11	3	! s -> umvplus
op	84:7	0:0	4	!
water	84:8	0:0	4	s
op	84:9	0:0	4	->
water	84:11	0:0	4	umvplus
stmts	84:19	130:4	3	
water	84:19	0:0	4	{
if	85:8	103:8	4	(s -> pict_type == AV_PICTURE_TYPE_P || s -> pict_type == AV_PICTURE_TYPE_S)
cond	85:11	85:60	5	s -> pict_type == AV_PICTURE_TYPE_P || s -> pict_type == AV_PICTURE_TYPE_S
water	85:11	0:0	6	s
op	85:12	0:0	6	->
water	85:14	0:0	6	pict_type
op	85:23	0:0	6	==
water	85:25	0:0	6	AV_PICTURE_TYPE_P
op	85:43	0:0	6	||
water	85:46	0:0	6	s
op	85:47	0:0	6	->
water	85:49	0:0	6	pict_type
op	85:58	0:0	6	==
water	85:60	0:0	6	AV_PICTURE_TYPE_S
stmts	85:79	103:8	5	
water	85:79	0:0	6	{
water	86:12	0:0	6	s
op	86:13	0:0	6	->
water	86:15	0:0	6	f_code
op	86:21	0:0	6	=
call	86:23	86:82	6	ff_get_best_fcode
arg	86:41	86:42	7	s
water	86:41	0:0	8	s
arg	86:44	86:57	7	s->p_mv_table
water	86:44	0:0	8	s
op	86:45	0:0	8	->
water	86:47	0:0	8	p_mv_table
arg	86:59	86:82	7	CANDIDATE_MB_TYPE_INTER
water	86:59	0:0	8	CANDIDATE_MB_TYPE_INTER
water	86:83	0:0	6	;
if	87:12	92:12	6	(s -> avctx -> flags & AV_CODEC_FLAG_INTERLACED_ME)
cond	87:16	87:34	7	s -> avctx -> flags & AV_CODEC_FLAG_INTERLACED_ME
water	87:16	0:0	8	s
op	87:17	0:0	8	->
water	87:19	0:0	8	avctx
op	87:24	0:0	8	->
water	87:26	0:0	8	flags
op	87:32	0:0	8	&
water	87:34	0:0	8	AV_CODEC_FLAG_INTERLACED_ME
stmts	87:63	92:12	7	
water	87:63	0:0	8	{
decl	88:16	88:23	8	int	a
water	88:21	0:0	8	,
decl	88:16	88:23	8	int	b
water	89:16	0:0	8	a
op	89:17	0:0	8	=
call	89:19	89:92	8	ff_get_best_fcode
arg	89:37	89:38	9	s
water	89:37	0:0	10	s
arg	89:40	89:65	9	s->p_field_mv_table[0][0]
water	89:40	0:0	10	s
op	89:41	0:0	10	->
water	89:43	0:0	10	p_field_mv_table
op	89:59	0:0	10	[
water	89:60	0:0	10	0
op	89:61	0:0	10	]
op	89:62	0:0	10	[
water	89:63	0:0	10	0
op	89:64	0:0	10	]
arg	89:67	89:92	9	CANDIDATE_MB_TYPE_INTER_I
water	89:67	0:0	10	CANDIDATE_MB_TYPE_INTER_I
water	89:93	0:0	8	;
water	90:16	0:0	8	b
op	90:17	0:0	8	=
call	90:19	90:92	8	ff_get_best_fcode
arg	90:37	90:38	9	s
water	90:37	0:0	10	s
arg	90:40	90:65	9	s->p_field_mv_table[1][1]
water	90:40	0:0	10	s
op	90:41	0:0	10	->
water	90:43	0:0	10	p_field_mv_table
op	90:59	0:0	10	[
water	90:60	0:0	10	1
op	90:61	0:0	10	]
op	90:62	0:0	10	[
water	90:63	0:0	10	1
op	90:64	0:0	10	]
arg	90:67	90:92	9	CANDIDATE_MB_TYPE_INTER_I
water	90:67	0:0	10	CANDIDATE_MB_TYPE_INTER_I
water	90:93	0:0	8	;
water	91:16	0:0	8	s
op	91:17	0:0	8	->
water	91:19	0:0	8	f_code
op	91:25	0:0	8	=
call	91:27	91:49	8	FFMAX3
arg	91:34	91:43	9	s->f_code
water	91:34	0:0	10	s
op	91:35	0:0	10	->
water	91:37	0:0	10	f_code
arg	91:45	91:46	9	a
water	91:45	0:0	10	a
arg	91:48	91:49	9	b
water	91:48	0:0	10	b
water	91:50	0:0	8	;
water	92:12	0:0	8	}
call	93:12	93:31	6	ff_fix_long_p_mvs
arg	93:30	93:31	7	s
water	93:30	0:0	8	s
water	93:32	0:0	6	;
call	94:12	94:92	6	ff_fix_long_mvs
arg	94:28	94:29	7	s
water	94:28	0:0	8	s
arg	94:31	94:35	7	NULL
water	94:31	0:0	8	NULL
arg	94:37	94:38	7	0
water	94:37	0:0	8	0
arg	94:40	94:53	7	s->p_mv_table
water	94:40	0:0	8	s
op	94:41	0:0	8	->
water	94:43	0:0	8	p_mv_table
arg	94:55	94:64	7	s->f_code
water	94:55	0:0	8	s
op	94:56	0:0	8	->
water	94:58	0:0	8	f_code
arg	94:66	94:89	7	CANDIDATE_MB_TYPE_INTER
water	94:66	0:0	8	CANDIDATE_MB_TYPE_INTER
arg	94:91	94:92	7	0
water	94:91	0:0	8	0
water	94:93	0:0	6	;
if	95:12	102:12	6	(s -> avctx -> flags & AV_CODEC_FLAG_INTERLACED_ME)
cond	95:16	95:34	7	s -> avctx -> flags & AV_CODEC_FLAG_INTERLACED_ME
water	95:16	0:0	8	s
op	95:17	0:0	8	->
water	95:19	0:0	8	avctx
op	95:24	0:0	8	->
water	95:26	0:0	8	flags
op	95:32	0:0	8	&
water	95:34	0:0	8	AV_CODEC_FLAG_INTERLACED_ME
stmts	95:63	102:12	7	
water	95:63	0:0	8	{
decl	96:16	96:21	8	int	j
for	97:16	101:16	8	(i = 0 ;i < 2;i ++)
forinit	97:20	97:23	9	i = 0 ;
water	97:20	0:0	10	i
op	97:21	0:0	10	=
water	97:22	0:0	10	0
water	97:23	0:0	10	;
cond	97:25	97:27	9	i < 2
water	97:25	0:0	10	i
op	97:26	0:0	10	<
water	97:27	0:0	10	2
forexpr	97:30	97:31	9	i ++
water	97:30	0:0	10	i
op	97:31	0:0	10	++
stmts	97:34	101:16	9	
water	97:34	0:0	10	{
for	98:20	100:107	10	(j = 0 ;j < 2;j ++)
forinit	98:24	98:27	11	j = 0 ;
water	98:24	0:0	12	j
op	98:25	0:0	12	=
water	98:26	0:0	12	0
water	98:27	0:0	12	;
cond	98:29	98:31	11	j < 2
water	98:29	0:0	12	j
op	98:30	0:0	12	<
water	98:31	0:0	12	2
forexpr	98:34	98:35	11	j ++
water	98:34	0:0	12	j
op	98:35	0:0	12	++
stmts	99:24	100:107	11	
call	99:24	100:106	12	ff_fix_long_mvs
arg	99:40	99:41	13	s
water	99:40	0:0	14	s
arg	99:43	99:69	13	s->p_field_select_table[i]
water	99:43	0:0	14	s
op	99:44	0:0	14	->
water	99:46	0:0	14	p_field_select_table
op	99:66	0:0	14	[
water	99:67	0:0	14	i
op	99:68	0:0	14	]
arg	99:71	99:72	13	j
water	99:71	0:0	14	j
arg	100:40	100:65	13	s->p_field_mv_table[i][j]
water	100:40	0:0	14	s
op	100:41	0:0	14	->
water	100:43	0:0	14	p_field_mv_table
op	100:59	0:0	14	[
water	100:60	0:0	14	i
op	100:61	0:0	14	]
op	100:62	0:0	14	[
water	100:63	0:0	14	j
op	100:64	0:0	14	]
arg	100:67	100:76	13	s->f_code
water	100:67	0:0	14	s
op	100:68	0:0	14	->
water	100:70	0:0	14	f_code
arg	100:78	100:103	13	CANDIDATE_MB_TYPE_INTER_I
water	100:78	0:0	14	CANDIDATE_MB_TYPE_INTER_I
arg	100:105	100:106	13	0
water	100:105	0:0	14	0
water	100:107	0:0	12	;
water	101:16	0:0	10	}
water	102:12	0:0	8	}
water	103:8	0:0	6	}
if	104:8	129:8	4	(s -> pict_type == AV_PICTURE_TYPE_B)
cond	104:11	104:25	5	s -> pict_type == AV_PICTURE_TYPE_B
water	104:11	0:0	6	s
op	104:12	0:0	6	->
water	104:14	0:0	6	pict_type
op	104:23	0:0	6	==
water	104:25	0:0	6	AV_PICTURE_TYPE_B
stmts	104:43	129:8	5	
water	104:43	0:0	6	{
decl	105:12	105:20	6	int	a
water	105:17	0:0	6	,
decl	105:12	105:20	6	int	b
water	106:12	0:0	6	a
op	106:14	0:0	6	=
call	106:16	106:82	6	ff_get_best_fcode
arg	106:34	106:35	7	s
water	106:34	0:0	8	s
arg	106:37	106:55	7	s->b_forw_mv_table
water	106:37	0:0	8	s
op	106:38	0:0	8	->
water	106:40	0:0	8	b_forw_mv_table
arg	106:57	106:82	7	CANDIDATE_MB_TYPE_FORWARD
water	106:57	0:0	8	CANDIDATE_MB_TYPE_FORWARD
water	106:83	0:0	6	;
water	107:12	0:0	6	b
op	107:14	0:0	6	=
call	107:16	107:86	6	ff_get_best_fcode
arg	107:34	107:35	7	s
water	107:34	0:0	8	s
arg	107:37	107:61	7	s->b_bidir_forw_mv_table
water	107:37	0:0	8	s
op	107:38	0:0	8	->
water	107:40	0:0	8	b_bidir_forw_mv_table
arg	107:63	107:86	7	CANDIDATE_MB_TYPE_BIDIR
water	107:63	0:0	8	CANDIDATE_MB_TYPE_BIDIR
water	107:87	0:0	6	;
water	108:12	0:0	6	s
op	108:13	0:0	6	->
water	108:15	0:0	6	f_code
op	108:22	0:0	6	=
call	108:24	108:34	6	FFMAX
arg	108:30	108:31	7	a
water	108:30	0:0	8	a
arg	108:33	108:34	7	b
water	108:33	0:0	8	b
water	108:35	0:0	6	;
water	109:12	0:0	6	a
op	109:14	0:0	6	=
call	109:16	109:83	6	ff_get_best_fcode
arg	109:34	109:35	7	s
water	109:34	0:0	8	s
arg	109:37	109:55	7	s->b_back_mv_table
water	109:37	0:0	8	s
op	109:38	0:0	8	->
water	109:40	0:0	8	b_back_mv_table
arg	109:57	109:83	7	CANDIDATE_MB_TYPE_BACKWARD
water	109:57	0:0	8	CANDIDATE_MB_TYPE_BACKWARD
water	109:84	0:0	6	;
water	110:12	0:0	6	b
op	110:14	0:0	6	=
call	110:16	110:86	6	ff_get_best_fcode
arg	110:34	110:35	7	s
water	110:34	0:0	8	s
arg	110:37	110:61	7	s->b_bidir_back_mv_table
water	110:37	0:0	8	s
op	110:38	0:0	8	->
water	110:40	0:0	8	b_bidir_back_mv_table
arg	110:63	110:86	7	CANDIDATE_MB_TYPE_BIDIR
water	110:63	0:0	8	CANDIDATE_MB_TYPE_BIDIR
water	110:87	0:0	6	;
water	111:12	0:0	6	s
op	111:13	0:0	6	->
water	111:15	0:0	6	b_code
op	111:22	0:0	6	=
call	111:24	111:34	6	FFMAX
arg	111:30	111:31	7	a
water	111:30	0:0	8	a
arg	111:33	111:34	7	b
water	111:33	0:0	8	b
water	111:35	0:0	6	;
call	112:12	112:99	6	ff_fix_long_mvs
arg	112:28	112:29	7	s
water	112:28	0:0	8	s
arg	112:31	112:35	7	NULL
water	112:31	0:0	8	NULL
arg	112:37	112:38	7	0
water	112:37	0:0	8	0
arg	112:40	112:58	7	s->b_forw_mv_table
water	112:40	0:0	8	s
op	112:41	0:0	8	->
water	112:43	0:0	8	b_forw_mv_table
arg	112:60	112:69	7	s->f_code
water	112:60	0:0	8	s
op	112:61	0:0	8	->
water	112:63	0:0	8	f_code
arg	112:71	112:96	7	CANDIDATE_MB_TYPE_FORWARD
water	112:71	0:0	8	CANDIDATE_MB_TYPE_FORWARD
arg	112:98	112:99	7	1
water	112:98	0:0	8	1
water	112:100	0:0	6	;
call	113:12	113:100	6	ff_fix_long_mvs
arg	113:28	113:29	7	s
water	113:28	0:0	8	s
arg	113:31	113:35	7	NULL
water	113:31	0:0	8	NULL
arg	113:37	113:38	7	0
water	113:37	0:0	8	0
arg	113:40	113:58	7	s->b_back_mv_table
water	113:40	0:0	8	s
op	113:41	0:0	8	->
water	113:43	0:0	8	b_back_mv_table
arg	113:60	113:69	7	s->b_code
water	113:60	0:0	8	s
op	113:61	0:0	8	->
water	113:63	0:0	8	b_code
arg	113:71	113:97	7	CANDIDATE_MB_TYPE_BACKWARD
water	113:71	0:0	8	CANDIDATE_MB_TYPE_BACKWARD
arg	113:99	113:100	7	1
water	113:99	0:0	8	1
water	113:101	0:0	6	;
call	114:12	114:103	6	ff_fix_long_mvs
arg	114:28	114:29	7	s
water	114:28	0:0	8	s
arg	114:31	114:35	7	NULL
water	114:31	0:0	8	NULL
arg	114:37	114:38	7	0
water	114:37	0:0	8	0
arg	114:40	114:64	7	s->b_bidir_forw_mv_table
water	114:40	0:0	8	s
op	114:41	0:0	8	->
water	114:43	0:0	8	b_bidir_forw_mv_table
arg	114:66	114:75	7	s->f_code
water	114:66	0:0	8	s
op	114:67	0:0	8	->
water	114:69	0:0	8	f_code
arg	114:77	114:100	7	CANDIDATE_MB_TYPE_BIDIR
water	114:77	0:0	8	CANDIDATE_MB_TYPE_BIDIR
arg	114:102	114:103	7	1
water	114:102	0:0	8	1
water	114:104	0:0	6	;
call	115:12	115:103	6	ff_fix_long_mvs
arg	115:28	115:29	7	s
water	115:28	0:0	8	s
arg	115:31	115:35	7	NULL
water	115:31	0:0	8	NULL
arg	115:37	115:38	7	0
water	115:37	0:0	8	0
arg	115:40	115:64	7	s->b_bidir_back_mv_table
water	115:40	0:0	8	s
op	115:41	0:0	8	->
water	115:43	0:0	8	b_bidir_back_mv_table
arg	115:66	115:75	7	s->b_code
water	115:66	0:0	8	s
op	115:67	0:0	8	->
water	115:69	0:0	8	b_code
arg	115:77	115:100	7	CANDIDATE_MB_TYPE_BIDIR
water	115:77	0:0	8	CANDIDATE_MB_TYPE_BIDIR
arg	115:102	115:103	7	1
water	115:102	0:0	8	1
water	115:104	0:0	6	;
if	116:12	128:12	6	(s -> avctx -> flags & AV_CODEC_FLAG_INTERLACED_ME)
cond	116:16	116:34	7	s -> avctx -> flags & AV_CODEC_FLAG_INTERLACED_ME
water	116:16	0:0	8	s
op	116:17	0:0	8	->
water	116:19	0:0	8	avctx
op	116:24	0:0	8	->
water	116:26	0:0	8	flags
op	116:32	0:0	8	&
water	116:34	0:0	8	AV_CODEC_FLAG_INTERLACED_ME
stmts	116:63	128:12	7	
water	116:63	0:0	8	{
decl	117:16	117:26	8	int	dir
water	117:23	0:0	8	,
decl	117:16	117:26	8	int	j
for	118:16	127:16	8	(dir = 0 ;dir < 2;dir ++)
forinit	118:20	118:25	9	dir = 0 ;
water	118:20	0:0	10	dir
op	118:23	0:0	10	=
water	118:24	0:0	10	0
water	118:25	0:0	10	;
cond	118:27	118:31	9	dir < 2
water	118:27	0:0	10	dir
op	118:30	0:0	10	<
water	118:31	0:0	10	2
forexpr	118:34	118:37	9	dir ++
water	118:34	0:0	10	dir
op	118:37	0:0	10	++
stmts	118:40	127:16	9	
water	118:40	0:0	10	{
for	119:20	126:20	10	(i = 0 ;i < 2;i ++)
forinit	119:24	119:27	11	i = 0 ;
water	119:24	0:0	12	i
op	119:25	0:0	12	=
water	119:26	0:0	12	0
water	119:27	0:0	12	;
cond	119:29	119:31	11	i < 2
water	119:29	0:0	12	i
op	119:30	0:0	12	<
water	119:31	0:0	12	2
forexpr	119:34	119:35	11	i ++
water	119:34	0:0	12	i
op	119:35	0:0	12	++
stmts	119:38	126:20	11	
water	119:38	0:0	12	{
for	120:24	125:24	12	(j = 0 ;j < 2;j ++)
forinit	120:28	120:31	13	j = 0 ;
water	120:28	0:0	14	j
op	120:29	0:0	14	=
water	120:30	0:0	14	0
water	120:31	0:0	14	;
cond	120:33	120:35	13	j < 2
water	120:33	0:0	14	j
op	120:34	0:0	14	<
water	120:35	0:0	14	2
forexpr	120:38	120:39	13	j ++
water	120:38	0:0	14	j
op	120:39	0:0	14	++
stmts	120:42	125:24	13	
water	120:42	0:0	14	{
decl	121:28	122:100	14	int	type
op	121:36	0:0	14	=
water	121:38	0:0	14	dir
water	121:42	0:0	14	?
water	121:44	0:0	14	(
water	121:45	0:0	14	CANDIDATE_MB_TYPE_BACKWARD_I
op	121:73	0:0	14	|
water	121:74	0:0	14	CANDIDATE_MB_TYPE_BIDIR_I
water	121:99	0:0	14	)
water	122:42	0:0	14	:
water	122:44	0:0	14	(
water	122:45	0:0	14	CANDIDATE_MB_TYPE_FORWARD_I
op	122:73	0:0	14	|
water	122:74	0:0	14	CANDIDATE_MB_TYPE_BIDIR_I
water	122:99	0:0	14	)
call	123:28	124:112	14	ff_fix_long_mvs
arg	123:44	123:45	15	s
water	123:44	0:0	16	s
arg	123:47	123:78	15	s->b_field_select_table[dir][i]
water	123:47	0:0	16	s
op	123:48	0:0	16	->
water	123:50	0:0	16	b_field_select_table
op	123:70	0:0	16	[
water	123:71	0:0	16	dir
op	123:74	0:0	16	]
op	123:75	0:0	16	[
water	123:76	0:0	16	i
op	123:77	0:0	16	]
arg	123:80	123:81	15	j
water	123:80	0:0	16	j
arg	124:44	124:74	15	s->b_field_mv_table[dir][i][j]
water	124:44	0:0	16	s
op	124:45	0:0	16	->
water	124:47	0:0	16	b_field_mv_table
op	124:63	0:0	16	[
water	124:64	0:0	16	dir
op	124:67	0:0	16	]
op	124:68	0:0	16	[
water	124:69	0:0	16	i
op	124:70	0:0	16	]
op	124:71	0:0	16	[
water	124:72	0:0	16	j
op	124:73	0:0	16	]
arg	124:76	124:103	15	dir?s->b_code:s->f_code
water	124:76	0:0	16	dir
water	124:80	0:0	16	?
water	124:82	0:0	16	s
op	124:83	0:0	16	->
water	124:85	0:0	16	b_code
water	124:92	0:0	16	:
water	124:94	0:0	16	s
op	124:95	0:0	16	->
water	124:97	0:0	16	f_code
arg	124:105	124:109	15	type
water	124:105	0:0	16	type
arg	124:111	124:112	15	1
water	124:111	0:0	16	1
water	124:113	0:0	14	;
water	125:24	0:0	14	}
water	126:20	0:0	12	}
water	127:16	0:0	10	}
water	128:12	0:0	8	}
water	129:8	0:0	6	}
water	130:4	0:0	4	}
if	131:4	132:17	2	(estimate_qp (s ,0 ) < 0)
cond	131:8	131:28	3	estimate_qp (s ,0 ) < 0
call	131:8	131:24	4	estimate_qp
arg	131:20	131:21	5	s
water	131:20	0:0	6	s
arg	131:23	131:24	5	0
water	131:23	0:0	6	0
op	131:26	0:0	4	<
water	131:28	0:0	4	0
stmts	132:8	132:17	3	
return	132:8	132:17	4	-1
op	132:15	0:0	5	-
water	132:16	0:0	5	1
if	133:4	136:20	2	(s -> qscale < 3 && s -> max_qcoeff <= 128 && s -> pict_type == AV_PICTURE_TYPE_I && ! ( s -> avctx -> flags & AV_CODEC_FLAG_QSCALE ))
cond	133:8	135:48	3	s -> qscale < 3 && s -> max_qcoeff <= 128 && s -> pict_type == AV_PICTURE_TYPE_I && ! ( s -> avctx -> flags & AV_CODEC_FLAG_QSCALE )
water	133:8	0:0	4	s
op	133:9	0:0	4	->
water	133:11	0:0	4	qscale
op	133:18	0:0	4	<
water	133:20	0:0	4	3
op	133:22	0:0	4	&&
water	133:25	0:0	4	s
op	133:26	0:0	4	->
water	133:28	0:0	4	max_qcoeff
op	133:39	0:0	4	<=
water	133:42	0:0	4	128
op	133:46	0:0	4	&&
water	134:8	0:0	4	s
op	134:9	0:0	4	->
water	134:11	0:0	4	pict_type
op	134:21	0:0	4	==
water	134:24	0:0	4	AV_PICTURE_TYPE_I
op	134:42	0:0	4	&&
op	135:8	0:0	4	!
water	135:9	0:0	4	(
water	135:10	0:0	4	s
op	135:11	0:0	4	->
water	135:13	0:0	4	avctx
op	135:18	0:0	4	->
water	135:20	0:0	4	flags
op	135:26	0:0	4	&
water	135:28	0:0	4	AV_CODEC_FLAG_QSCALE
water	135:48	0:0	4	)
stmts	136:8	136:20	3	
water	136:8	0:0	4	s
op	136:9	0:0	4	->
water	136:11	0:0	4	qscale
op	136:17	0:0	4	=
water	136:19	0:0	4	3
water	136:20	0:0	4	;
if	137:4	161:4	2	(s -> out_format == FMT_MJPEG)
cond	137:8	137:25	3	s -> out_format == FMT_MJPEG
water	137:8	0:0	4	s
op	137:9	0:0	4	->
water	137:11	0:0	4	out_format
op	137:22	0:0	4	==
water	137:25	0:0	4	FMT_MJPEG
stmts	137:36	161:4	3	
water	137:36	0:0	4	{
decl	138:8	138:69	4	const uint16_t	*luma_matrix
op	138:38	0:0	4	=
water	138:40	0:0	4	ff_mpeg1_default_intra_matrix
decl	139:8	139:69	4	const uint16_t	*chroma_matrix
op	139:38	0:0	4	=
water	139:40	0:0	4	ff_mpeg1_default_intra_matrix
if	140:8	143:8	4	(s -> avctx -> intra_matrix)
cond	140:12	140:22	5	s -> avctx -> intra_matrix
water	140:12	0:0	6	s
op	140:13	0:0	6	->
water	140:15	0:0	6	avctx
op	140:20	0:0	6	->
water	140:22	0:0	6	intra_matrix
stmts	140:36	143:8	5	
water	140:36	0:0	6	{
water	141:12	0:0	6	chroma_matrix
op	141:26	0:0	6	=
water	142:12	0:0	6	luma_matrix
op	142:24	0:0	6	=
water	142:26	0:0	6	s
op	142:27	0:0	6	->
water	142:29	0:0	6	avctx
op	142:34	0:0	6	->
water	142:36	0:0	6	intra_matrix
water	142:48	0:0	6	;
water	143:8	0:0	6	}
if	144:8	145:57	4	(s -> avctx -> chroma_intra_matrix)
cond	144:12	144:22	5	s -> avctx -> chroma_intra_matrix
water	144:12	0:0	6	s
op	144:13	0:0	6	->
water	144:15	0:0	6	avctx
op	144:20	0:0	6	->
water	144:22	0:0	6	chroma_intra_matrix
stmts	145:12	145:57	5	
water	145:12	0:0	6	chroma_matrix
op	145:26	0:0	6	=
water	145:28	0:0	6	s
op	145:29	0:0	6	->
water	145:31	0:0	6	avctx
op	145:36	0:0	6	->
water	145:38	0:0	6	chroma_intra_matrix
water	145:57	0:0	6	;
for	147:8	151:8	4	(i = 1 ;i < 64;i ++)
forinit	147:12	147:15	5	i = 1 ;
water	147:12	0:0	6	i
op	147:13	0:0	6	=
water	147:14	0:0	6	1
water	147:15	0:0	6	;
cond	147:16	147:18	5	i < 64
water	147:16	0:0	6	i
op	147:17	0:0	6	<
water	147:18	0:0	6	64
forexpr	147:21	147:22	5	i ++
water	147:21	0:0	6	i
op	147:22	0:0	6	++
stmts	147:25	151:8	5	
water	147:25	0:0	6	{
decl	148:12	148:47	6	int	j
op	148:18	0:0	6	=
water	148:20	0:0	6	s
op	148:21	0:0	6	->
water	148:23	0:0	6	idsp
op	148:27	0:0	6	.
water	148:28	0:0	6	idct_permutation
op	148:44	0:0	6	[
water	148:45	0:0	6	i
op	148:46	0:0	6	]
water	149:12	0:0	6	s
op	149:13	0:0	6	->
water	149:15	0:0	6	chroma_intra_matrix
op	149:34	0:0	6	[
water	149:35	0:0	6	j
op	149:36	0:0	6	]
op	149:38	0:0	6	=
call	149:40	149:89	6	av_clip_uint8
arg	149:54	149:89	7	(chroma_matrix[i]*s->qscale)>>3
water	149:54	0:0	8	(
water	149:55	0:0	8	chroma_matrix
op	149:68	0:0	8	[
water	149:69	0:0	8	i
op	149:70	0:0	8	]
op	149:72	0:0	8	*
water	149:74	0:0	8	s
op	149:75	0:0	8	->
water	149:77	0:0	8	qscale
water	149:83	0:0	8	)
op	149:85	0:0	8	>>
water	149:88	0:0	8	3
water	149:90	0:0	6	;
water	150:12	0:0	6	s
op	150:13	0:0	6	->
water	150:22	0:0	6	intra_matrix
op	150:34	0:0	6	[
water	150:35	0:0	6	j
op	150:36	0:0	6	]
op	150:38	0:0	6	=
call	150:40	150:89	6	av_clip_uint8
arg	150:54	150:89	7	(luma_matrix[i]*s->qscale)>>3
water	150:54	0:0	8	(
water	150:57	0:0	8	luma_matrix
op	150:68	0:0	8	[
water	150:69	0:0	8	i
op	150:70	0:0	8	]
op	150:72	0:0	8	*
water	150:74	0:0	8	s
op	150:75	0:0	8	->
water	150:77	0:0	8	qscale
water	150:83	0:0	8	)
op	150:85	0:0	8	>>
water	150:88	0:0	8	3
water	150:90	0:0	6	;
water	151:8	0:0	6	}
water	152:8	0:0	4	s
op	152:9	0:0	4	->
water	152:11	0:0	4	y_dc_scale_table
op	152:27	0:0	4	=
water	153:8	0:0	4	s
op	153:9	0:0	4	->
water	153:11	0:0	4	c_dc_scale_table
op	153:27	0:0	4	=
water	153:29	0:0	4	ff_mpeg2_dc_scale_table
op	153:52	0:0	4	[
water	153:53	0:0	4	s
op	153:54	0:0	4	->
water	153:56	0:0	4	intra_dc_precision
op	153:74	0:0	4	]
water	153:75	0:0	4	;
water	154:8	0:0	4	s
op	154:9	0:0	4	->
water	154:11	0:0	4	chroma_intra_matrix
op	154:30	0:0	4	[
water	154:31	0:0	4	0
op	154:32	0:0	4	]
op	154:34	0:0	4	=
water	155:8	0:0	4	s
op	155:9	0:0	4	->
water	155:11	0:0	4	intra_matrix
op	155:23	0:0	4	[
water	155:24	0:0	4	0
op	155:25	0:0	4	]
op	155:27	0:0	4	=
water	155:29	0:0	4	ff_mpeg2_dc_scale_table
op	155:52	0:0	4	[
water	155:53	0:0	4	s
op	155:54	0:0	4	->
water	155:56	0:0	4	intra_dc_precision
op	155:74	0:0	4	]
op	155:75	0:0	4	[
water	155:76	0:0	4	8
op	155:77	0:0	4	]
water	155:78	0:0	4	;
call	156:8	157:68	4	ff_convert_matrix
arg	156:26	156:27	5	s
water	156:26	0:0	6	s
arg	156:29	156:46	5	s->q_intra_matrix
water	156:29	0:0	6	s
op	156:30	0:0	6	->
water	156:32	0:0	6	q_intra_matrix
arg	156:48	156:67	5	s->q_intra_matrix16
water	156:48	0:0	6	s
op	156:49	0:0	6	->
water	156:51	0:0	6	q_intra_matrix16
arg	157:23	157:38	5	s->intra_matrix
water	157:23	0:0	6	s
op	157:24	0:0	6	->
water	157:26	0:0	6	intra_matrix
arg	157:40	157:59	5	s->intra_quant_bias
water	157:40	0:0	6	s
op	157:41	0:0	6	->
water	157:43	0:0	6	intra_quant_bias
arg	157:61	157:62	5	8
water	157:61	0:0	6	8
arg	157:64	157:65	5	8
water	157:64	0:0	6	8
arg	157:67	157:68	5	1
water	157:67	0:0	6	1
water	157:69	0:0	4	;
call	158:8	159:75	4	ff_convert_matrix
arg	158:26	158:27	5	s
water	158:26	0:0	6	s
arg	158:29	158:53	5	s->q_chroma_intra_matrix
water	158:29	0:0	6	s
op	158:30	0:0	6	->
water	158:32	0:0	6	q_chroma_intra_matrix
arg	158:55	158:81	5	s->q_chroma_intra_matrix16
water	158:55	0:0	6	s
op	158:56	0:0	6	->
water	158:58	0:0	6	q_chroma_intra_matrix16
arg	159:23	159:45	5	s->chroma_intra_matrix
water	159:23	0:0	6	s
op	159:24	0:0	6	->
water	159:26	0:0	6	chroma_intra_matrix
arg	159:47	159:66	5	s->intra_quant_bias
water	159:47	0:0	6	s
op	159:48	0:0	6	->
water	159:50	0:0	6	intra_quant_bias
arg	159:68	159:69	5	8
water	159:68	0:0	6	8
arg	159:71	159:72	5	8
water	159:71	0:0	6	8
arg	159:74	159:75	5	1
water	159:74	0:0	6	1
water	159:76	0:0	4	;
water	160:8	0:0	4	s
op	160:9	0:0	4	->
water	160:11	0:0	4	qscale
op	160:17	0:0	4	=
water	160:19	0:0	4	8
water	160:20	0:0	4	;
water	161:4	0:0	4	}
if	162:4	179:4	2	(s -> codec_id == AV_CODEC_ID_AMV)
cond	162:7	162:22	3	s -> codec_id == AV_CODEC_ID_AMV
water	162:7	0:0	4	s
op	162:8	0:0	4	->
water	162:10	0:0	4	codec_id
op	162:19	0:0	4	==
water	162:22	0:0	4	AV_CODEC_ID_AMV
stmts	162:38	179:4	3	
water	162:38	0:0	4	{
water	163:8	0:0	4	static
water	163:15	0:0	4	const
water	163:21	0:0	4	uint8_t
water	163:29	0:0	4	y
op	163:30	0:0	4	[
water	163:31	0:0	4	32
op	163:33	0:0	4	]
op	163:34	0:0	4	=
water	163:35	0:0	4	{
water	163:36	0:0	4	13
water	163:38	0:0	4	,
water	163:39	0:0	4	13
water	163:41	0:0	4	,
water	163:42	0:0	4	13
water	163:44	0:0	4	,
water	163:45	0:0	4	13
water	163:47	0:0	4	,
water	163:48	0:0	4	13
water	163:50	0:0	4	,
water	163:51	0:0	4	13
water	163:53	0:0	4	,
water	163:54	0:0	4	13
water	163:56	0:0	4	,
water	163:57	0:0	4	13
water	163:59	0:0	4	,
water	163:60	0:0	4	13
water	163:62	0:0	4	,
water	163:63	0:0	4	13
water	163:65	0:0	4	,
water	163:66	0:0	4	13
water	163:68	0:0	4	,
water	163:69	0:0	4	13
water	163:71	0:0	4	,
water	163:72	0:0	4	13
water	163:74	0:0	4	,
water	163:75	0:0	4	13
water	163:77	0:0	4	,
water	163:78	0:0	4	13
water	163:80	0:0	4	,
water	163:81	0:0	4	13
water	163:83	0:0	4	,
water	163:84	0:0	4	13
water	163:86	0:0	4	,
water	163:87	0:0	4	13
water	163:89	0:0	4	,
water	163:90	0:0	4	13
water	163:92	0:0	4	,
water	163:93	0:0	4	13
water	163:95	0:0	4	,
water	163:96	0:0	4	13
water	163:98	0:0	4	,
water	163:99	0:0	4	13
water	163:101	0:0	4	,
water	163:102	0:0	4	13
water	163:104	0:0	4	,
water	163:105	0:0	4	13
water	163:107	0:0	4	,
water	163:108	0:0	4	13
water	163:110	0:0	4	,
water	163:111	0:0	4	13
water	163:113	0:0	4	,
water	163:114	0:0	4	13
water	163:116	0:0	4	,
water	163:117	0:0	4	13
water	163:119	0:0	4	,
water	163:120	0:0	4	13
water	163:122	0:0	4	,
water	163:123	0:0	4	13
water	163:125	0:0	4	,
water	163:126	0:0	4	13
water	163:128	0:0	4	,
water	163:129	0:0	4	13
water	163:131	0:0	4	}
water	163:132	0:0	4	;
water	164:8	0:0	4	static
water	164:15	0:0	4	const
water	164:21	0:0	4	uint8_t
water	164:29	0:0	4	c
op	164:30	0:0	4	[
water	164:31	0:0	4	32
op	164:33	0:0	4	]
op	164:34	0:0	4	=
water	164:35	0:0	4	{
water	164:36	0:0	4	14
water	164:38	0:0	4	,
water	164:39	0:0	4	14
water	164:41	0:0	4	,
water	164:42	0:0	4	14
water	164:44	0:0	4	,
water	164:45	0:0	4	14
water	164:47	0:0	4	,
water	164:48	0:0	4	14
water	164:50	0:0	4	,
water	164:51	0:0	4	14
water	164:53	0:0	4	,
water	164:54	0:0	4	14
water	164:56	0:0	4	,
water	164:57	0:0	4	14
water	164:59	0:0	4	,
water	164:60	0:0	4	14
water	164:62	0:0	4	,
water	164:63	0:0	4	14
water	164:65	0:0	4	,
water	164:66	0:0	4	14
water	164:68	0:0	4	,
water	164:69	0:0	4	14
water	164:71	0:0	4	,
water	164:72	0:0	4	14
water	164:74	0:0	4	,
water	164:75	0:0	4	14
water	164:77	0:0	4	,
water	164:78	0:0	4	14
water	164:80	0:0	4	,
water	164:81	0:0	4	14
water	164:83	0:0	4	,
water	164:84	0:0	4	14
water	164:86	0:0	4	,
water	164:87	0:0	4	14
water	164:89	0:0	4	,
water	164:90	0:0	4	14
water	164:92	0:0	4	,
water	164:93	0:0	4	14
water	164:95	0:0	4	,
water	164:96	0:0	4	14
water	164:98	0:0	4	,
water	164:99	0:0	4	14
water	164:101	0:0	4	,
water	164:102	0:0	4	14
water	164:104	0:0	4	,
water	164:105	0:0	4	14
water	164:107	0:0	4	,
water	164:108	0:0	4	14
water	164:110	0:0	4	,
water	164:111	0:0	4	14
water	164:113	0:0	4	,
water	164:114	0:0	4	14
water	164:116	0:0	4	,
water	164:117	0:0	4	14
water	164:119	0:0	4	,
water	164:120	0:0	4	14
water	164:122	0:0	4	,
water	164:123	0:0	4	14
water	164:125	0:0	4	,
water	164:126	0:0	4	14
water	164:128	0:0	4	,
water	164:129	0:0	4	14
water	164:131	0:0	4	}
water	164:132	0:0	4	;
for	165:8	169:8	4	(i = 1 ;i < 64;i ++)
forinit	165:12	165:15	5	i = 1 ;
water	165:12	0:0	6	i
op	165:13	0:0	6	=
water	165:14	0:0	6	1
water	165:15	0:0	6	;
cond	165:16	165:18	5	i < 64
water	165:16	0:0	6	i
op	165:17	0:0	6	<
water	165:18	0:0	6	64
forexpr	165:21	165:22	5	i ++
water	165:21	0:0	6	i
op	165:22	0:0	6	++
stmts	165:25	169:8	5	
water	165:25	0:0	6	{
decl	166:12	166:64	6	int	j
op	166:17	0:0	6	=
water	166:19	0:0	6	s
op	166:20	0:0	6	->
water	166:22	0:0	6	idsp
op	166:26	0:0	6	.
water	166:27	0:0	6	idct_permutation
op	166:43	0:0	6	[
water	166:44	0:0	6	ff_zigzag_direct
op	166:60	0:0	6	[
water	166:61	0:0	6	i
op	166:62	0:0	6	]
op	166:63	0:0	6	]
water	167:12	0:0	6	s
op	167:13	0:0	6	->
water	167:15	0:0	6	intra_matrix
op	167:27	0:0	6	[
water	167:28	0:0	6	j
op	167:29	0:0	6	]
op	167:31	0:0	6	=
water	167:33	0:0	6	sp5x_quant_table
op	167:49	0:0	6	[
water	167:50	0:0	6	5
op	167:51	0:0	6	*
water	167:52	0:0	6	2
op	167:53	0:0	6	+
water	167:54	0:0	6	0
op	167:55	0:0	6	]
op	167:56	0:0	6	[
water	167:57	0:0	6	i
op	167:58	0:0	6	]
water	167:59	0:0	6	;
water	168:12	0:0	6	s
op	168:13	0:0	6	->
water	168:15	0:0	6	chroma_intra_matrix
op	168:34	0:0	6	[
water	168:35	0:0	6	j
op	168:36	0:0	6	]
op	168:38	0:0	6	=
water	168:40	0:0	6	sp5x_quant_table
op	168:56	0:0	6	[
water	168:57	0:0	6	5
op	168:58	0:0	6	*
water	168:59	0:0	6	2
op	168:60	0:0	6	+
water	168:61	0:0	6	1
op	168:62	0:0	6	]
op	168:63	0:0	6	[
water	168:64	0:0	6	i
op	168:65	0:0	6	]
water	168:66	0:0	6	;
water	169:8	0:0	6	}
water	170:8	0:0	4	s
op	170:9	0:0	4	->
water	170:11	0:0	4	y_dc_scale_table
op	170:27	0:0	4	=
water	170:29	0:0	4	y
water	170:30	0:0	4	;
water	171:8	0:0	4	s
op	171:9	0:0	4	->
water	171:11	0:0	4	c_dc_scale_table
op	171:27	0:0	4	=
water	171:29	0:0	4	c
water	171:30	0:0	4	;
water	172:8	0:0	4	s
op	172:9	0:0	4	->
water	172:11	0:0	4	intra_matrix
op	172:23	0:0	4	[
water	172:24	0:0	4	0
op	172:25	0:0	4	]
op	172:27	0:0	4	=
water	172:29	0:0	4	13
water	172:31	0:0	4	;
water	173:8	0:0	4	s
op	173:9	0:0	4	->
water	173:11	0:0	4	chroma_intra_matrix
op	173:30	0:0	4	[
water	173:31	0:0	4	0
op	173:32	0:0	4	]
op	173:34	0:0	4	=
water	173:36	0:0	4	14
water	173:38	0:0	4	;
call	174:8	175:68	4	ff_convert_matrix
arg	174:26	174:27	5	s
water	174:26	0:0	6	s
arg	174:29	174:46	5	s->q_intra_matrix
water	174:29	0:0	6	s
op	174:30	0:0	6	->
water	174:32	0:0	6	q_intra_matrix
arg	174:48	174:67	5	s->q_intra_matrix16
water	174:48	0:0	6	s
op	174:49	0:0	6	->
water	174:51	0:0	6	q_intra_matrix16
arg	175:23	175:38	5	s->intra_matrix
water	175:23	0:0	6	s
op	175:24	0:0	6	->
water	175:26	0:0	6	intra_matrix
arg	175:40	175:59	5	s->intra_quant_bias
water	175:40	0:0	6	s
op	175:41	0:0	6	->
water	175:43	0:0	6	intra_quant_bias
arg	175:61	175:62	5	8
water	175:61	0:0	6	8
arg	175:64	175:65	5	8
water	175:64	0:0	6	8
arg	175:67	175:68	5	1
water	175:67	0:0	6	1
water	175:69	0:0	4	;
call	176:8	177:75	4	ff_convert_matrix
arg	176:26	176:27	5	s
water	176:26	0:0	6	s
arg	176:29	176:53	5	s->q_chroma_intra_matrix
water	176:29	0:0	6	s
op	176:30	0:0	6	->
water	176:32	0:0	6	q_chroma_intra_matrix
arg	176:55	176:81	5	s->q_chroma_intra_matrix16
water	176:55	0:0	6	s
op	176:56	0:0	6	->
water	176:58	0:0	6	q_chroma_intra_matrix16
arg	177:23	177:45	5	s->chroma_intra_matrix
water	177:23	0:0	6	s
op	177:24	0:0	6	->
water	177:26	0:0	6	chroma_intra_matrix
arg	177:47	177:66	5	s->intra_quant_bias
water	177:47	0:0	6	s
op	177:48	0:0	6	->
water	177:50	0:0	6	intra_quant_bias
arg	177:68	177:69	5	8
water	177:68	0:0	6	8
arg	177:71	177:72	5	8
water	177:71	0:0	6	8
arg	177:74	177:75	5	1
water	177:74	0:0	6	1
water	177:76	0:0	4	;
water	178:8	0:0	4	s
op	178:9	0:0	4	->
water	178:11	0:0	4	qscale
op	178:17	0:0	4	=
water	178:19	0:0	4	8
water	178:20	0:0	4	;
water	179:4	0:0	4	}
water	181:4	0:0	2	s
op	181:5	0:0	2	->
water	181:7	0:0	2	current_picture_ptr
op	181:26	0:0	2	->
water	181:28	0:0	2	f
op	181:29	0:0	2	->
water	181:31	0:0	2	key_frame
op	181:41	0:0	2	=
water	182:4	0:0	2	s
op	182:5	0:0	2	->
water	182:7	0:0	2	current_picture
op	182:22	0:0	2	.
water	182:23	0:0	2	f
op	182:24	0:0	2	->
water	182:26	0:0	2	key_frame
op	182:36	0:0	2	=
water	182:38	0:0	2	s
op	182:39	0:0	2	->
water	182:41	0:0	2	pict_type
op	182:51	0:0	2	==
water	182:54	0:0	2	AV_PICTURE_TYPE_I
water	182:71	0:0	2	;
water	183:4	0:0	2	s
op	183:5	0:0	2	->
water	183:7	0:0	2	current_picture_ptr
op	183:26	0:0	2	->
water	183:28	0:0	2	f
op	183:29	0:0	2	->
water	183:31	0:0	2	pict_type
op	183:41	0:0	2	=
water	184:4	0:0	2	s
op	184:5	0:0	2	->
water	184:7	0:0	2	current_picture
op	184:22	0:0	2	.
water	184:23	0:0	2	f
op	184:24	0:0	2	->
water	184:26	0:0	2	pict_type
op	184:36	0:0	2	=
water	184:38	0:0	2	s
op	184:39	0:0	2	->
water	184:41	0:0	2	pict_type
water	184:50	0:0	2	;
if	185:4	186:34	2	(s -> current_picture . f -> key_frame)
cond	185:8	185:30	3	s -> current_picture . f -> key_frame
water	185:8	0:0	4	s
op	185:9	0:0	4	->
water	185:11	0:0	4	current_picture
op	185:26	0:0	4	.
water	185:27	0:0	4	f
op	185:28	0:0	4	->
water	185:30	0:0	4	key_frame
stmts	186:8	186:34	3	
water	186:8	0:0	4	s
op	186:9	0:0	4	->
water	186:11	0:0	4	picture_in_gop_number
op	186:32	0:0	4	=
water	186:33	0:0	4	0
water	186:34	0:0	4	;
water	187:4	0:0	2	s
op	187:5	0:0	2	->
water	187:7	0:0	2	mb_x
op	187:12	0:0	2	=
water	187:14	0:0	2	s
op	187:15	0:0	2	->
water	187:17	0:0	2	mb_y
op	187:22	0:0	2	=
water	187:24	0:0	2	0
water	187:25	0:0	2	;
water	188:4	0:0	2	s
op	188:5	0:0	2	->
water	188:7	0:0	2	last_bits
op	188:16	0:0	2	=
call	188:18	188:39	2	put_bits_count
arg	188:33	188:39	3	&s->pb
op	188:33	0:0	4	&
water	188:34	0:0	4	s
op	188:35	0:0	4	->
water	188:37	0:0	4	pb
water	188:40	0:0	2	;
switch	189:4	224:4	2	(s -> out_format)
cond	189:11	189:14	3	s -> out_format
water	189:11	0:0	4	s
op	189:12	0:0	4	->
water	189:14	0:0	4	out_format
stmts	189:26	224:4	3	
water	189:26	0:0	4	{
label	190:4	190:18	4	case FMT_MJPEG :
if	191:8	193:83	4	(CONFIG_MJPEG_ENCODER)
cond	191:12	191:12	5	CONFIG_MJPEG_ENCODER
water	191:12	0:0	6	CONFIG_MJPEG_ENCODER
stmts	192:12	193:83	5	
call	192:12	193:82	6	ff_mjpeg_encode_picture_header
arg	192:43	192:51	7	s->avctx
water	192:43	0:0	8	s
op	192:44	0:0	8	->
water	192:46	0:0	8	avctx
arg	192:53	192:59	7	&s->pb
op	192:53	0:0	8	&
water	192:54	0:0	8	s
op	192:55	0:0	8	->
water	192:57	0:0	8	pb
arg	192:61	192:80	7	&s->intra_scantable
op	192:61	0:0	8	&
water	192:62	0:0	8	s
op	192:63	0:0	8	->
water	192:65	0:0	8	intra_scantable
arg	193:43	193:58	7	s->intra_matrix
water	193:43	0:0	8	s
op	193:44	0:0	8	->
water	193:46	0:0	8	intra_matrix
arg	193:60	193:82	7	s->chroma_intra_matrix
water	193:60	0:0	8	s
op	193:61	0:0	8	->
water	193:63	0:0	8	chroma_intra_matrix
water	193:83	0:0	6	;
break	194:8	194:13	4	
label	195:4	195:17	4	case FMT_H261 :
if	196:8	197:60	4	(CONFIG_H261_ENCODER)
cond	196:12	196:12	5	CONFIG_H261_ENCODER
water	196:12	0:0	6	CONFIG_H261_ENCODER
stmts	197:12	197:60	5	
call	197:12	197:59	6	ff_h261_encode_picture_header
arg	197:42	197:43	7	s
water	197:42	0:0	8	s
arg	197:45	197:59	7	picture_number
water	197:45	0:0	8	picture_number
water	197:60	0:0	6	;
break	198:8	198:13	4	
label	199:4	199:17	4	case FMT_H263 :
if	200:8	201:60	4	(CONFIG_WMV2_ENCODER && s -> codec_id == AV_CODEC_ID_WMV2)
cond	200:12	200:50	5	CONFIG_WMV2_ENCODER && s -> codec_id == AV_CODEC_ID_WMV2
water	200:12	0:0	6	CONFIG_WMV2_ENCODER
op	200:32	0:0	6	&&
water	200:35	0:0	6	s
op	200:36	0:0	6	->
water	200:38	0:0	6	codec_id
op	200:47	0:0	6	==
water	200:50	0:0	6	AV_CODEC_ID_WMV2
stmts	201:12	201:60	5	
call	201:12	201:59	6	ff_wmv2_encode_picture_header
arg	201:42	201:43	7	s
water	201:42	0:0	8	s
arg	201:45	201:59	7	picture_number
water	201:45	0:0	8	picture_number
water	201:60	0:0	6	;
else	202:8	203:63	4
stmts	202:13	203:63	5	
if	202:13	203:63	6	(CONFIG_MSMPEG4_ENCODER && s -> msmpeg4_version)
cond	202:17	202:46	7	CONFIG_MSMPEG4_ENCODER && s -> msmpeg4_version
water	202:17	0:0	8	CONFIG_MSMPEG4_ENCODER
op	202:40	0:0	8	&&
water	202:43	0:0	8	s
op	202:44	0:0	8	->
water	202:46	0:0	8	msmpeg4_version
stmts	203:12	203:63	7	
call	203:12	203:62	8	ff_msmpeg4_encode_picture_header
arg	203:45	203:46	9	s
water	203:45	0:0	10	s
arg	203:48	203:62	9	picture_number
water	203:48	0:0	10	picture_number
water	203:63	0:0	8	;
else	204:8	205:61	4
stmts	204:13	205:61	5	
if	204:13	205:61	6	(CONFIG_MPEG4_ENCODER && s -> h263_pred)
cond	204:17	204:44	7	CONFIG_MPEG4_ENCODER && s -> h263_pred
water	204:17	0:0	8	CONFIG_MPEG4_ENCODER
op	204:38	0:0	8	&&
water	204:41	0:0	8	s
op	204:42	0:0	8	->
water	204:44	0:0	8	h263_pred
stmts	205:12	205:61	7	
call	205:12	205:60	8	ff_mpeg4_encode_picture_header
arg	205:43	205:44	9	s
water	205:43	0:0	10	s
arg	205:46	205:60	9	picture_number
water	205:46	0:0	10	picture_number
water	205:61	0:0	8	;
else	206:8	210:8	4
stmts	206:13	210:8	5	
if	206:13	210:8	6	(CONFIG_RV10_ENCODER && s -> codec_id == AV_CODEC_ID_RV10)
cond	206:17	206:55	7	CONFIG_RV10_ENCODER && s -> codec_id == AV_CODEC_ID_RV10
water	206:17	0:0	8	CONFIG_RV10_ENCODER
op	206:37	0:0	8	&&
water	206:40	0:0	8	s
op	206:41	0:0	8	->
water	206:43	0:0	8	codec_id
op	206:52	0:0	8	==
water	206:55	0:0	8	AV_CODEC_ID_RV10
stmts	206:73	210:8	7	
water	206:73	0:0	8	{
water	207:12	0:0	8	ret
op	207:16	0:0	8	=
call	207:18	207:65	8	ff_rv10_encode_picture_header
arg	207:48	207:49	9	s
water	207:48	0:0	10	s
arg	207:51	207:65	9	picture_number
water	207:51	0:0	10	picture_number
water	207:66	0:0	8	;
if	208:12	209:26	8	(ret < 0)
cond	208:16	208:22	9	ret < 0
water	208:16	0:0	10	ret
op	208:20	0:0	10	<
water	208:22	0:0	10	0
stmts	209:16	209:26	9	
return	209:16	209:26	10	ret
water	209:23	0:0	11	ret
water	210:8	0:0	8	}
else	211:8	212:60	4
stmts	211:13	212:60	5	
if	211:13	212:60	6	(CONFIG_RV20_ENCODER && s -> codec_id == AV_CODEC_ID_RV20)
cond	211:17	211:55	7	CONFIG_RV20_ENCODER && s -> codec_id == AV_CODEC_ID_RV20
water	211:17	0:0	8	CONFIG_RV20_ENCODER
op	211:37	0:0	8	&&
water	211:40	0:0	8	s
op	211:41	0:0	8	->
water	211:43	0:0	8	codec_id
op	211:52	0:0	8	==
water	211:55	0:0	8	AV_CODEC_ID_RV20
stmts	212:12	212:60	7	
call	212:12	212:59	8	ff_rv20_encode_picture_header
arg	212:42	212:43	9	s
water	212:42	0:0	10	s
arg	212:45	212:59	9	picture_number
water	212:45	0:0	10	picture_number
water	212:60	0:0	8	;
else	213:8	214:59	4
stmts	213:13	214:59	5	
if	213:13	214:59	6	(CONFIG_FLV_ENCODER && s -> codec_id == AV_CODEC_ID_FLV1)
cond	213:17	213:54	7	CONFIG_FLV_ENCODER && s -> codec_id == AV_CODEC_ID_FLV1
water	213:17	0:0	8	CONFIG_FLV_ENCODER
op	213:36	0:0	8	&&
water	213:39	0:0	8	s
op	213:40	0:0	8	->
water	213:42	0:0	8	codec_id
op	213:51	0:0	8	==
water	213:54	0:0	8	AV_CODEC_ID_FLV1
stmts	214:12	214:59	7	
call	214:12	214:58	8	ff_flv_encode_picture_header
arg	214:41	214:42	9	s
water	214:41	0:0	10	s
arg	214:44	214:58	9	picture_number
water	214:44	0:0	10	picture_number
water	214:59	0:0	8	;
else	215:8	216:60	4
stmts	215:13	216:60	5	
if	215:13	216:60	6	(CONFIG_H263_ENCODER)
cond	215:17	215:17	7	CONFIG_H263_ENCODER
water	215:17	0:0	8	CONFIG_H263_ENCODER
stmts	216:12	216:60	7	
call	216:12	216:59	8	ff_h263_encode_picture_header
arg	216:42	216:43	9	s
water	216:42	0:0	10	s
arg	216:45	216:59	9	picture_number
water	216:45	0:0	10	picture_number
water	216:60	0:0	8	;
break	217:8	217:13	4	
label	218:4	218:18	4	case FMT_MPEG1 :
if	219:8	220:61	4	(CONFIG_MPEG1VIDEO_ENCODER || CONFIG_MPEG2VIDEO_ENCODER)
cond	219:12	219:41	5	CONFIG_MPEG1VIDEO_ENCODER || CONFIG_MPEG2VIDEO_ENCODER
water	219:12	0:0	6	CONFIG_MPEG1VIDEO_ENCODER
op	219:38	0:0	6	||
water	219:41	0:0	6	CONFIG_MPEG2VIDEO_ENCODER
stmts	220:12	220:61	5	
call	220:12	220:60	6	ff_mpeg1_encode_picture_header
arg	220:43	220:44	7	s
water	220:43	0:0	8	s
arg	220:46	220:60	7	picture_number
water	220:46	0:0	8	picture_number
water	220:61	0:0	6	;
break	221:8	221:13	4	
label	222:4	222:11	4	default :
call	223:8	223:20	4	av_assert0
arg	223:19	223:20	5	0
water	223:19	0:0	6	0
water	223:21	0:0	4	;
water	224:4	0:0	4	}
water	225:4	0:0	2	bits
op	225:8	0:0	2	=
call	225:10	225:31	2	put_bits_count
arg	225:25	225:31	3	&s->pb
op	225:25	0:0	4	&
water	225:26	0:0	4	s
op	225:27	0:0	4	->
water	225:29	0:0	4	pb
water	225:32	0:0	2	;
water	226:4	0:0	2	s
op	226:5	0:0	2	->
water	226:7	0:0	2	header_bits
op	226:18	0:0	2	=
water	226:20	0:0	2	bits
op	226:25	0:0	2	-
water	226:27	0:0	2	s
op	226:28	0:0	2	->
water	226:30	0:0	2	last_bits
water	226:39	0:0	2	;
for	227:4	229:4	2	(i = 1 ;i < context_count;i ++)
forinit	227:8	227:11	3	i = 1 ;
water	227:8	0:0	4	i
op	227:9	0:0	4	=
water	227:10	0:0	4	1
water	227:11	0:0	4	;
cond	227:13	227:15	3	i < context_count
water	227:13	0:0	4	i
op	227:14	0:0	4	<
water	227:15	0:0	4	context_count
forexpr	227:30	227:31	3	i ++
water	227:30	0:0	4	i
op	227:31	0:0	4	++
stmts	227:34	229:4	3	
water	227:34	0:0	4	{
call	228:8	228:65	4	update_duplicate_context_after_me
arg	228:42	228:62	5	s->thread_context[i]
water	228:42	0:0	6	s
op	228:43	0:0	6	->
water	228:45	0:0	6	thread_context
op	228:59	0:0	6	[
water	228:60	0:0	6	i
op	228:61	0:0	6	]
arg	228:64	228:65	5	s
water	228:64	0:0	6	s
water	228:66	0:0	4	;
water	229:4	0:0	4	}
call	230:4	230:104	2	s->avctx->execute
arg	230:22	230:30	3	s->avctx
water	230:22	0:0	4	s
op	230:23	0:0	4	->
water	230:25	0:0	4	avctx
arg	230:32	230:45	3	encode_thread
water	230:32	0:0	4	encode_thread
arg	230:47	230:68	3	&s->thread_context[0]
op	230:47	0:0	4	&
water	230:48	0:0	4	s
op	230:49	0:0	4	->
water	230:51	0:0	4	thread_context
op	230:65	0:0	4	[
water	230:66	0:0	4	0
op	230:67	0:0	4	]
arg	230:70	230:74	3	NULL
water	230:70	0:0	4	NULL
arg	230:76	230:89	3	context_count
water	230:76	0:0	4	context_count
arg	230:91	230:104	3	sizeof(void*)
op	230:91	0:0	4	sizeof
water	230:97	0:0	4	(
water	230:98	0:0	4	void
op	230:102	0:0	4	*
water	230:103	0:0	4	)
water	230:105	0:0	2	;
for	231:4	235:4	2	(i = 1 ;i < context_count;i ++)
forinit	231:8	231:11	3	i = 1 ;
water	231:8	0:0	4	i
op	231:9	0:0	4	=
water	231:10	0:0	4	1
water	231:11	0:0	4	;
cond	231:13	231:15	3	i < context_count
water	231:13	0:0	4	i
op	231:14	0:0	4	<
water	231:15	0:0	4	context_count
forexpr	231:30	231:31	3	i ++
water	231:30	0:0	4	i
op	231:31	0:0	4	++
stmts	231:34	235:4	3	
water	231:34	0:0	4	{
if	232:8	233:111	4	(s -> pb . buf_end == s -> thread_context [ i ] -> pb . buf)
cond	232:12	232:54	5	s -> pb . buf_end == s -> thread_context [ i ] -> pb . buf
water	232:12	0:0	6	s
op	232:13	0:0	6	->
water	232:15	0:0	6	pb
op	232:17	0:0	6	.
water	232:18	0:0	6	buf_end
op	232:26	0:0	6	==
water	232:29	0:0	6	s
op	232:30	0:0	6	->
water	232:32	0:0	6	thread_context
op	232:46	0:0	6	[
water	232:47	0:0	6	i
op	232:48	0:0	6	]
op	232:49	0:0	6	->
water	232:51	0:0	6	pb
op	232:53	0:0	6	.
water	232:54	0:0	6	buf
stmts	233:12	233:111	5	
call	233:12	233:110	6	set_put_bits_buffer_size
arg	233:37	233:43	7	&s->pb
op	233:37	0:0	8	&
water	233:38	0:0	8	s
op	233:39	0:0	8	->
water	233:41	0:0	8	pb
arg	233:45	233:110	7	FFMIN(s->thread_context[i]->pb.buf_end-s->pb.buf,INT_MAX/8-32)
call	233:45	233:109	8	FFMIN
arg	233:51	233:95	9	s->thread_context[i]->pb.buf_end-s->pb.buf
water	233:51	0:0	10	s
op	233:52	0:0	10	->
water	233:54	0:0	10	thread_context
op	233:68	0:0	10	[
water	233:69	0:0	10	i
op	233:70	0:0	10	]
op	233:71	0:0	10	->
water	233:73	0:0	10	pb
op	233:75	0:0	10	.
water	233:76	0:0	10	buf_end
op	233:84	0:0	10	-
water	233:86	0:0	10	s
op	233:87	0:0	10	->
water	233:89	0:0	10	pb
op	233:91	0:0	10	.
water	233:92	0:0	10	buf
arg	233:97	233:109	9	INT_MAX/8-32
water	233:97	0:0	10	INT_MAX
op	233:104	0:0	10	/
water	233:105	0:0	10	8
op	233:106	0:0	10	-
water	233:107	0:0	10	32
water	233:111	0:0	6	;
call	234:8	234:58	4	merge_context_after_encode
arg	234:35	234:36	5	s
water	234:35	0:0	6	s
arg	234:38	234:58	5	s->thread_context[i]
water	234:38	0:0	6	s
op	234:39	0:0	6	->
water	234:41	0:0	6	thread_context
op	234:55	0:0	6	[
water	234:56	0:0	6	i
op	234:57	0:0	6	]
water	234:59	0:0	4	;
water	235:4	0:0	4	}
call	236:4	236:11	2	emms_c
water	236:12	0:0	2	;
return	237:4	237:12	2	0
water	237:11	0:0	3	0
