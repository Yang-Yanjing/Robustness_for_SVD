func	1:0	97:0	0	static int	open_input_file
params	1:26	0:0	1	
param	1:27	1:43	2	InputFile *	ifile
param	1:45	1:65	2	const char *	filename
stmnts	0:0	96:12	1	
decl	3:4	3:31	2	int	err
water	3:11	0:0	2	,
decl	3:4	3:31	2	int	i
water	3:14	0:0	2	,
decl	3:4	3:31	2	int	orig_nb_streams
decl	4:4	4:35	2	AVFormatContext	*fmt_ctx
op	4:29	0:0	2	=
water	4:31	0:0	2	NULL
decl	5:4	5:24	2	AVDictionaryEntry	*t
decl	6:4	6:23	2	AVDictionary	**opts
decl	7:4	7:29	2	int	scan_all_pmts_set
op	7:26	0:0	2	=
water	7:28	0:0	2	0
water	8:4	0:0	2	fmt_ctx
op	8:12	0:0	2	=
call	8:14	8:37	2	avformat_alloc_context
water	8:38	0:0	2	;
if	9:4	12:4	2	(! fmt_ctx)
cond	9:8	9:9	3	! fmt_ctx
op	9:8	0:0	4	!
water	9:9	0:0	4	fmt_ctx
stmts	9:18	12:4	3	
water	9:18	0:0	4	{
call	10:8	10:45	4	print_error
arg	10:20	10:28	5	filename
water	10:20	0:0	6	filename
arg	10:30	10:45	5	AVERROR(ENOMEM)
call	10:30	10:44	6	AVERROR
arg	10:38	10:44	7	ENOMEM
water	10:38	0:0	8	ENOMEM
water	10:46	0:0	4	;
call	11:8	11:22	4	exit_program
arg	11:21	11:22	5	1
water	11:21	0:0	6	1
water	11:23	0:0	4	;
water	12:4	0:0	4	}
water	13:4	0:0	2	fmt_ctx
op	13:11	0:0	2	->
water	13:13	0:0	2	flags
op	13:19	0:0	2	|=
water	13:22	0:0	2	AVFMT_FLAG_KEEP_SIDE_DATA
water	13:47	0:0	2	;
if	14:4	17:4	2	(!av_dict_get (format_opts ,"scan_all_pmts" ,NULL ,AV_DICT_MATCH_CASE ))
cond	14:8	14:75	3	!av_dict_get (format_opts ,"scan_all_pmts" ,NULL ,AV_DICT_MATCH_CASE )
op	14:8	0:0	4	!
call	14:9	14:75	4	av_dict_get
arg	14:21	14:32	5	format_opts
water	14:21	0:0	6	format_opts
arg	14:34	14:49	5	"scan_all_pmts"
water	14:34	0:0	6	"scan_all_pmts"
arg	14:51	14:55	5	NULL
water	14:51	0:0	6	NULL
arg	14:57	14:75	5	AV_DICT_MATCH_CASE
water	14:57	0:0	6	AV_DICT_MATCH_CASE
stmts	14:78	17:4	3	
water	14:78	0:0	4	{
call	15:8	15:78	4	av_dict_set
arg	15:20	15:32	5	&format_opts
op	15:20	0:0	6	&
water	15:21	0:0	6	format_opts
arg	15:34	15:49	5	"scan_all_pmts"
water	15:34	0:0	6	"scan_all_pmts"
arg	15:51	15:54	5	"1"
water	15:51	0:0	6	"1"
arg	15:56	15:78	5	AV_DICT_DONT_OVERWRITE
water	15:56	0:0	6	AV_DICT_DONT_OVERWRITE
water	15:79	0:0	4	;
water	16:8	0:0	4	scan_all_pmts_set
op	16:26	0:0	4	=
water	16:28	0:0	4	1
water	16:29	0:0	4	;
water	17:4	0:0	4	}
if	18:4	22:4	2	(( err =avformat_open_input (& fmt_ctx ,filename ,iformat ,& format_opts ) ) < 0)
cond	18:8	19:61	3	( err =avformat_open_input (& fmt_ctx ,filename ,iformat ,& format_opts ) ) < 0
water	18:8	0:0	4	(
water	18:9	0:0	4	err
op	18:13	0:0	4	=
call	18:15	19:56	4	avformat_open_input
arg	18:35	18:43	5	&fmt_ctx
op	18:35	0:0	6	&
water	18:36	0:0	6	fmt_ctx
arg	18:45	18:53	5	filename
water	18:45	0:0	6	filename
arg	19:35	19:42	5	iformat
water	19:35	0:0	6	iformat
arg	19:44	19:56	5	&format_opts
op	19:44	0:0	6	&
water	19:45	0:0	6	format_opts
water	19:57	0:0	4	)
op	19:59	0:0	4	<
water	19:61	0:0	4	0
stmts	19:64	22:4	3	
water	19:64	0:0	4	{
call	20:8	20:33	4	print_error
arg	20:20	20:28	5	filename
water	20:20	0:0	6	filename
arg	20:30	20:33	5	err
water	20:30	0:0	6	err
water	20:34	0:0	4	;
return	21:8	21:18	4	err
water	21:15	0:0	5	err
water	22:4	0:0	4	}
water	23:4	0:0	2	ifile
op	23:9	0:0	2	->
water	23:11	0:0	2	fmt_ctx
op	23:19	0:0	2	=
water	23:21	0:0	2	fmt_ctx
water	23:28	0:0	2	;
if	24:4	25:76	2	(scan_all_pmts_set)
cond	24:8	24:8	3	scan_all_pmts_set
water	24:8	0:0	4	scan_all_pmts_set
stmts	25:8	25:76	3	
call	25:8	25:75	4	av_dict_set
arg	25:20	25:32	5	&format_opts
op	25:20	0:0	6	&
water	25:21	0:0	6	format_opts
arg	25:34	25:49	5	"scan_all_pmts"
water	25:34	0:0	6	"scan_all_pmts"
arg	25:51	25:55	5	NULL
water	25:51	0:0	6	NULL
arg	25:57	25:75	5	AV_DICT_MATCH_CASE
water	25:57	0:0	6	AV_DICT_MATCH_CASE
water	25:76	0:0	4	;
if	26:4	29:4	2	(( t =av_dict_get (format_opts ,"" ,NULL ,AV_DICT_IGNORE_SUFFIX ) ))
cond	26:8	26:70	3	( t =av_dict_get (format_opts ,"" ,NULL ,AV_DICT_IGNORE_SUFFIX ) )
water	26:8	0:0	4	(
water	26:9	0:0	4	t
op	26:11	0:0	4	=
call	26:13	26:69	4	av_dict_get
arg	26:25	26:36	5	format_opts
water	26:25	0:0	6	format_opts
arg	26:38	26:40	5	""
water	26:38	0:0	6	""
arg	26:42	26:46	5	NULL
water	26:42	0:0	6	NULL
arg	26:48	26:69	5	AV_DICT_IGNORE_SUFFIX
water	26:48	0:0	6	AV_DICT_IGNORE_SUFFIX
water	26:70	0:0	4	)
stmts	26:73	29:4	3	
water	26:73	0:0	4	{
call	27:8	27:67	4	av_log
arg	27:15	27:19	5	NULL
water	27:15	0:0	6	NULL
arg	27:21	27:33	5	AV_LOG_ERROR
water	27:21	0:0	6	AV_LOG_ERROR
arg	27:35	27:59	5	"Option %s not found.\n"
water	27:35	0:0	6	"Option %s not found.\n"
arg	27:61	27:67	5	t->key
water	27:61	0:0	6	t
op	27:62	0:0	6	->
water	27:64	0:0	6	key
water	27:68	0:0	4	;
return	28:8	28:39	4	AVERROR_OPTION_NOT_FOUND
water	28:15	0:0	5	AVERROR_OPTION_NOT_FOUND
water	29:4	0:0	4	}
water	31:4	0:0	2	opts
op	31:9	0:0	2	=
call	31:11	31:58	2	setup_find_stream_info_opts
arg	31:39	31:46	3	fmt_ctx
water	31:39	0:0	4	fmt_ctx
arg	31:48	31:58	3	codec_opts
water	31:48	0:0	4	codec_opts
water	31:59	0:0	2	;
water	32:4	0:0	2	orig_nb_streams
op	32:20	0:0	2	=
water	32:22	0:0	2	fmt_ctx
op	32:29	0:0	2	->
water	32:31	0:0	2	nb_streams
water	32:41	0:0	2	;
water	33:4	0:0	2	err
op	33:8	0:0	2	=
call	33:10	33:49	2	avformat_find_stream_info
arg	33:36	33:43	3	fmt_ctx
water	33:36	0:0	4	fmt_ctx
arg	33:45	33:49	3	opts
water	33:45	0:0	4	opts
water	33:50	0:0	2	;
for	34:4	35:30	2	(i = 0 ;i < orig_nb_streams;i ++)
forinit	34:9	34:14	3	i = 0 ;
water	34:9	0:0	4	i
op	34:11	0:0	4	=
water	34:13	0:0	4	0
water	34:14	0:0	4	;
cond	34:16	34:20	3	i < orig_nb_streams
water	34:16	0:0	4	i
op	34:18	0:0	4	<
water	34:20	0:0	4	orig_nb_streams
forexpr	34:37	34:38	3	i ++
water	34:37	0:0	4	i
op	34:38	0:0	4	++
stmts	35:8	35:30	3	
call	35:8	35:29	4	av_dict_free
arg	35:21	35:29	5	&opts[i]
op	35:21	0:0	6	&
water	35:22	0:0	6	opts
op	35:26	0:0	6	[
water	35:27	0:0	6	i
op	35:28	0:0	6	]
water	35:30	0:0	4	;
call	36:4	36:18	2	av_freep
arg	36:13	36:18	3	&opts
op	36:13	0:0	4	&
water	36:14	0:0	4	opts
water	36:19	0:0	2	;
if	37:4	40:4	2	(err < 0)
cond	37:8	37:14	3	err < 0
water	37:8	0:0	4	err
op	37:12	0:0	4	<
water	37:14	0:0	4	0
stmts	37:17	40:4	3	
water	37:17	0:0	4	{
call	38:8	38:33	4	print_error
arg	38:20	38:28	5	filename
water	38:20	0:0	6	filename
arg	38:30	38:33	5	err
water	38:30	0:0	6	err
water	38:34	0:0	4	;
return	39:8	39:18	4	err
water	39:15	0:0	5	err
water	40:4	0:0	4	}
call	41:4	41:42	2	av_dump_format
arg	41:19	41:26	3	fmt_ctx
water	41:19	0:0	4	fmt_ctx
arg	41:28	41:29	3	0
water	41:28	0:0	4	0
arg	41:31	41:39	3	filename
water	41:31	0:0	4	filename
arg	41:41	41:42	3	0
water	41:41	0:0	4	0
water	41:43	0:0	2	;
water	42:4	0:0	2	ifile
op	42:9	0:0	2	->
water	42:11	0:0	2	streams
op	42:19	0:0	2	=
call	42:21	43:61	2	av_mallocz_array
arg	42:38	42:57	3	fmt_ctx->nb_streams
water	42:38	0:0	4	fmt_ctx
op	42:45	0:0	4	->
water	42:47	0:0	4	nb_streams
arg	43:38	43:61	3	sizeof(*ifile->streams)
op	43:38	0:0	4	sizeof
water	43:44	0:0	4	(
op	43:45	0:0	4	*
water	43:46	0:0	4	ifile
op	43:51	0:0	4	->
water	43:53	0:0	4	streams
water	43:60	0:0	4	)
water	43:62	0:0	2	;
if	44:4	45:15	2	(! ifile -> streams)
cond	44:8	44:16	3	! ifile -> streams
op	44:8	0:0	4	!
water	44:9	0:0	4	ifile
op	44:14	0:0	4	->
water	44:16	0:0	4	streams
stmts	45:8	45:15	3	
call	45:8	45:14	4	exit
arg	45:13	45:14	5	1
water	45:13	0:0	6	1
water	45:15	0:0	4	;
water	46:4	0:0	2	ifile
op	46:9	0:0	2	->
water	46:11	0:0	2	nb_streams
op	46:22	0:0	2	=
water	46:24	0:0	2	fmt_ctx
op	46:31	0:0	2	->
water	46:33	0:0	2	nb_streams
water	46:43	0:0	2	;
for	48:4	94:4	2	(i = 0 ;i < fmt_ctx -> nb_streams;i ++)
forinit	48:9	48:14	3	i = 0 ;
water	48:9	0:0	4	i
op	48:11	0:0	4	=
water	48:13	0:0	4	0
water	48:14	0:0	4	;
cond	48:16	48:29	3	i < fmt_ctx -> nb_streams
water	48:16	0:0	4	i
op	48:18	0:0	4	<
water	48:20	0:0	4	fmt_ctx
op	48:27	0:0	4	->
water	48:29	0:0	4	nb_streams
forexpr	48:41	48:42	3	i ++
water	48:41	0:0	4	i
op	48:42	0:0	4	++
stmts	48:46	94:4	3	
water	48:46	0:0	4	{
decl	49:8	49:45	4	InputStream	*ist
op	49:25	0:0	4	=
op	49:27	0:0	4	&
water	49:28	0:0	4	ifile
op	49:33	0:0	4	->
water	49:35	0:0	4	streams
op	49:42	0:0	4	[
water	49:43	0:0	4	i
op	49:44	0:0	4	]
decl	50:8	50:46	4	AVStream	*stream
op	50:25	0:0	4	=
water	50:27	0:0	4	fmt_ctx
op	50:34	0:0	4	->
water	50:36	0:0	4	streams
op	50:43	0:0	4	[
water	50:44	0:0	4	i
op	50:45	0:0	4	]
decl	51:8	51:22	4	AVCodec	*codec
water	52:8	0:0	4	ist
op	52:11	0:0	4	->
water	52:13	0:0	4	st
op	52:16	0:0	4	=
water	52:18	0:0	4	stream
water	52:24	0:0	4	;
if	53:8	58:8	4	(stream -> codecpar -> codec_id == AV_CODEC_ID_PROBE)
cond	53:12	53:42	5	stream -> codecpar -> codec_id == AV_CODEC_ID_PROBE
water	53:12	0:0	6	stream
op	53:18	0:0	6	->
water	53:20	0:0	6	codecpar
op	53:28	0:0	6	->
water	53:30	0:0	6	codec_id
op	53:39	0:0	6	==
water	53:42	0:0	6	AV_CODEC_ID_PROBE
stmts	53:61	58:8	5	
water	53:61	0:0	6	{
call	54:12	56:33	6	av_log
arg	54:19	54:23	7	NULL
water	54:19	0:0	8	NULL
arg	54:25	54:39	7	AV_LOG_WARNING
water	54:25	0:0	8	AV_LOG_WARNING
arg	55:19	55:64	7	"Failed to probe codec for input stream %d\n"
water	55:19	0:0	8	"Failed to probe codec for input stream %d\n"
arg	56:20	56:33	7	stream->index
water	56:20	0:0	8	stream
op	56:26	0:0	8	->
water	56:28	0:0	8	index
water	56:34	0:0	6	;
continue	57:12	57:20	6	
water	58:8	0:0	6	}
water	59:8	0:0	4	codec
op	59:14	0:0	4	=
call	59:16	59:63	4	avcodec_find_decoder
arg	59:37	59:63	5	stream->codecpar->codec_id
water	59:37	0:0	6	stream
op	59:43	0:0	6	->
water	59:45	0:0	6	codecpar
op	59:53	0:0	6	->
water	59:55	0:0	6	codec_id
water	59:64	0:0	4	;
if	60:8	65:8	4	(! codec)
cond	60:12	60:13	5	! codec
op	60:12	0:0	6	!
water	60:13	0:0	6	codec
stmts	60:20	65:8	5	
water	60:20	0:0	6	{
call	61:12	63:61	6	av_log
arg	61:19	61:23	7	NULL
water	61:19	0:0	8	NULL
arg	61:25	61:39	7	AV_LOG_WARNING
water	61:25	0:0	8	AV_LOG_WARNING
arg	62:20	62:72	7	"Unsupported codec with id %d for input stream %d\n"
water	62:20	0:0	8	"Unsupported codec with id %d for input stream %d\n"
arg	63:20	63:46	7	stream->codecpar->codec_id
water	63:20	0:0	8	stream
op	63:26	0:0	8	->
water	63:28	0:0	8	codecpar
op	63:36	0:0	8	->
water	63:38	0:0	8	codec_id
arg	63:48	63:61	7	stream->index
water	63:48	0:0	8	stream
op	63:54	0:0	8	->
water	63:56	0:0	8	index
water	63:62	0:0	6	;
continue	64:12	64:20	6	
water	65:8	0:0	6	}
water	66:8	0:0	4	{
decl	67:12	68:74	4	AVDictionary	*opts
op	67:31	0:0	4	=
call	67:33	68:73	5	filter_codec_opts
arg	67:51	67:61	6	codec_opts
water	67:51	0:0	7	codec_opts
arg	67:63	67:89	6	stream->codecpar->codec_id
water	67:63	0:0	7	stream
op	67:69	0:0	7	->
water	67:71	0:0	7	codecpar
op	67:79	0:0	7	->
water	67:81	0:0	7	codec_id
arg	68:51	68:58	6	fmt_ctx
water	68:51	0:0	7	fmt_ctx
arg	68:60	68:66	6	stream
water	68:60	0:0	7	stream
arg	68:68	68:73	6	codec
water	68:68	0:0	7	codec
water	69:12	0:0	4	ist
op	69:15	0:0	4	->
water	69:17	0:0	4	dec_ctx
op	69:25	0:0	4	=
call	69:27	69:55	4	avcodec_alloc_context3
arg	69:50	69:55	5	codec
water	69:50	0:0	6	codec
water	69:56	0:0	4	;
if	70:12	71:23	4	(! ist -> dec_ctx)
cond	70:16	70:22	5	! ist -> dec_ctx
op	70:16	0:0	6	!
water	70:17	0:0	6	ist
op	70:20	0:0	6	->
water	70:22	0:0	6	dec_ctx
stmts	71:16	71:23	5	
call	71:16	71:22	6	exit
arg	71:21	71:22	7	1
water	71:21	0:0	8	1
water	71:23	0:0	6	;
water	72:12	0:0	4	err
op	72:16	0:0	4	=
call	72:18	72:78	4	avcodec_parameters_to_context
arg	72:48	72:60	5	ist->dec_ctx
water	72:48	0:0	6	ist
op	72:51	0:0	6	->
water	72:53	0:0	6	dec_ctx
arg	72:62	72:78	5	stream->codecpar
water	72:62	0:0	6	stream
op	72:68	0:0	6	->
water	72:70	0:0	6	codecpar
water	72:79	0:0	4	;
if	73:12	74:23	4	(err < 0)
cond	73:16	73:22	5	err < 0
water	73:16	0:0	6	err
op	73:20	0:0	6	<
water	73:22	0:0	6	0
stmts	74:16	74:23	5	
call	74:16	74:22	6	exit
arg	74:21	74:22	7	1
water	74:21	0:0	8	1
water	74:23	0:0	6	;
if	75:12	80:12	4	(do_show_log)
cond	75:16	75:16	5	do_show_log
water	75:16	0:0	6	do_show_log
stmts	75:29	80:12	5	
water	75:29	0:0	6	{
call	79:16	79:58	6	av_dict_set
arg	79:28	79:39	7	&codec_opts
op	79:28	0:0	8	&
water	79:29	0:0	8	codec_opts
arg	79:41	79:50	7	"threads"
water	79:41	0:0	8	"threads"
arg	79:52	79:55	7	"1"
water	79:52	0:0	8	"1"
arg	79:57	79:58	7	0
water	79:57	0:0	8	0
water	79:59	0:0	6	;
water	80:12	0:0	6	}
call	81:12	81:69	4	av_codec_set_pkt_timebase
arg	81:38	81:50	5	ist->dec_ctx
water	81:38	0:0	6	ist
op	81:41	0:0	6	->
water	81:43	0:0	6	dec_ctx
arg	81:52	81:69	5	stream->time_base
water	81:52	0:0	6	stream
op	81:58	0:0	6	->
water	81:60	0:0	6	time_base
water	81:70	0:0	4	;
water	82:12	0:0	4	ist
op	82:15	0:0	4	->
water	82:17	0:0	4	dec_ctx
op	82:24	0:0	4	->
water	82:26	0:0	4	framerate
op	82:36	0:0	4	=
water	82:38	0:0	4	stream
op	82:44	0:0	4	->
water	82:46	0:0	4	avg_frame_rate
water	82:60	0:0	4	;
if	83:12	87:12	4	(avcodec_open2 (ist -> dec_ctx ,codec ,& opts ) < 0)
cond	83:16	83:60	5	avcodec_open2 (ist -> dec_ctx ,codec ,& opts ) < 0
call	83:16	83:56	6	avcodec_open2
arg	83:30	83:42	7	ist->dec_ctx
water	83:30	0:0	8	ist
op	83:33	0:0	8	->
water	83:35	0:0	8	dec_ctx
arg	83:44	83:49	7	codec
water	83:44	0:0	8	codec
arg	83:51	83:56	7	&opts
op	83:51	0:0	8	&
water	83:52	0:0	8	opts
op	83:58	0:0	6	<
water	83:60	0:0	6	0
stmts	83:63	87:12	5	
water	83:63	0:0	6	{
call	84:16	85:36	6	av_log
arg	84:23	84:27	7	NULL
water	84:23	0:0	8	NULL
arg	84:29	84:43	7	AV_LOG_WARNING
water	84:29	0:0	8	AV_LOG_WARNING
arg	84:45	84:89	7	"Could not open codec for input stream %d\n"
water	84:45	0:0	8	"Could not open codec for input stream %d\n"
arg	85:23	85:36	7	stream->index
water	85:23	0:0	8	stream
op	85:29	0:0	8	->
water	85:31	0:0	8	index
water	85:37	0:0	6	;
call	86:16	86:22	6	exit
arg	86:21	86:22	7	1
water	86:21	0:0	8	1
water	86:23	0:0	6	;
water	87:12	0:0	6	}
if	88:12	92:12	4	(( t =av_dict_get (opts ,"" ,NULL ,AV_DICT_IGNORE_SUFFIX ) ))
cond	88:16	88:71	5	( t =av_dict_get (opts ,"" ,NULL ,AV_DICT_IGNORE_SUFFIX ) )
water	88:16	0:0	6	(
water	88:17	0:0	6	t
op	88:19	0:0	6	=
call	88:21	88:70	6	av_dict_get
arg	88:33	88:37	7	opts
water	88:33	0:0	8	opts
arg	88:39	88:41	7	""
water	88:39	0:0	8	""
arg	88:43	88:47	7	NULL
water	88:43	0:0	8	NULL
arg	88:49	88:70	7	AV_DICT_IGNORE_SUFFIX
water	88:49	0:0	8	AV_DICT_IGNORE_SUFFIX
water	88:71	0:0	6	)
stmts	88:74	92:12	5	
water	88:74	0:0	6	{
call	89:16	90:44	6	av_log
arg	89:23	89:27	7	NULL
water	89:23	0:0	8	NULL
arg	89:29	89:41	7	AV_LOG_ERROR
water	89:29	0:0	8	AV_LOG_ERROR
arg	89:43	89:86	7	"Option %s for input stream %d not found\n"
water	89:43	0:0	8	"Option %s for input stream %d not found\n"
arg	90:23	90:29	7	t->key
water	90:23	0:0	8	t
op	90:24	0:0	8	->
water	90:26	0:0	8	key
arg	90:31	90:44	7	stream->index
water	90:31	0:0	8	stream
op	90:37	0:0	8	->
water	90:39	0:0	8	index
water	90:45	0:0	6	;
return	91:16	91:47	6	AVERROR_OPTION_NOT_FOUND
water	91:23	0:0	7	AVERROR_OPTION_NOT_FOUND
water	92:12	0:0	6	}
water	93:8	0:0	4	}
water	94:4	0:0	4	}
water	95:4	0:0	2	ifile
op	95:9	0:0	2	->
water	95:11	0:0	2	fmt_ctx
op	95:19	0:0	2	=
water	95:21	0:0	2	fmt_ctx
water	95:28	0:0	2	;
return	96:4	96:12	2	0
water	96:11	0:0	3	0
