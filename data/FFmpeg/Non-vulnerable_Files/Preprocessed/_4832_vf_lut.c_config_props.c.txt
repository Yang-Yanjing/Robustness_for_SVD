func	1:0	105:0	0	static int	config_props
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
stmnts	0:0	104:12	1	
decl	3:4	3:38	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	inlink
op	3:33	0:0	2	->
water	3:35	0:0	2	dst
decl	4:4	4:29	2	LutContext	*s
op	4:18	0:0	2	=
water	4:20	0:0	2	ctx
op	4:23	0:0	2	->
water	4:25	0:0	2	priv
decl	5:4	5:72	2	const AVPixFmtDescriptor	*desc
op	5:35	0:0	2	=
call	5:37	5:71	3	av_pix_fmt_desc_get
arg	5:57	5:71	4	inlink->format
water	5:57	0:0	5	inlink
op	5:63	0:0	5	->
water	5:65	0:0	5	format
decl	6:4	6:23	2	uint8_t	rgba_map[4]
decl	7:4	7:22	2	int	min[4]
water	7:14	0:0	2	,
decl	7:4	7:22	2	int	max[4]
decl	8:4	8:23	2	int	val
water	8:11	0:0	2	,
decl	8:4	8:23	2	int	color
water	8:18	0:0	2	,
decl	8:4	8:23	2	int	ret
water	9:4	0:0	2	s
op	9:5	0:0	2	->
water	9:7	0:0	2	hsub
op	9:12	0:0	2	=
water	9:14	0:0	2	desc
op	9:18	0:0	2	->
water	9:20	0:0	2	log2_chroma_w
water	9:33	0:0	2	;
water	10:4	0:0	2	s
op	10:5	0:0	2	->
water	10:7	0:0	2	vsub
op	10:12	0:0	2	=
water	10:14	0:0	2	desc
op	10:18	0:0	2	->
water	10:20	0:0	2	log2_chroma_h
water	10:33	0:0	2	;
water	11:4	0:0	2	s
op	11:5	0:0	2	->
water	11:7	0:0	2	var_values
op	11:17	0:0	2	[
water	11:18	0:0	2	VAR_W
op	11:23	0:0	2	]
op	11:25	0:0	2	=
water	11:27	0:0	2	inlink
op	11:33	0:0	2	->
water	11:35	0:0	2	w
water	11:36	0:0	2	;
water	12:4	0:0	2	s
op	12:5	0:0	2	->
water	12:7	0:0	2	var_values
op	12:17	0:0	2	[
water	12:18	0:0	2	VAR_H
op	12:23	0:0	2	]
op	12:25	0:0	2	=
water	12:27	0:0	2	inlink
op	12:33	0:0	2	->
water	12:35	0:0	2	h
water	12:36	0:0	2	;
water	13:4	0:0	2	s
op	13:5	0:0	2	->
water	13:7	0:0	2	is_16bit
op	13:16	0:0	2	=
water	13:18	0:0	2	desc
op	13:22	0:0	2	->
water	13:24	0:0	2	comp
op	13:28	0:0	2	[
water	13:29	0:0	2	0
op	13:30	0:0	2	]
op	13:31	0:0	2	.
water	13:32	0:0	2	depth_minus1
op	13:45	0:0	2	>
water	13:47	0:0	2	7
water	13:48	0:0	2	;
switch	14:4	62:4	2	(inlink -> format)
cond	14:12	14:20	3	inlink -> format
water	14:12	0:0	4	inlink
op	14:18	0:0	4	->
water	14:20	0:0	4	format
stmts	14:28	62:4	3	
water	14:28	0:0	4	{
label	15:4	15:27	4	case AV_PIX_FMT_YUV410P :
label	16:4	16:27	4	case AV_PIX_FMT_YUV411P :
label	17:4	17:27	4	case AV_PIX_FMT_YUV420P :
label	18:4	18:27	4	case AV_PIX_FMT_YUV422P :
label	19:4	19:27	4	case AV_PIX_FMT_YUV440P :
label	20:4	20:27	4	case AV_PIX_FMT_YUV444P :
label	21:4	21:28	4	case AV_PIX_FMT_YUVA420P :
label	22:4	22:28	4	case AV_PIX_FMT_YUVA422P :
label	23:4	23:28	4	case AV_PIX_FMT_YUVA444P :
label	24:4	24:30	4	case AV_PIX_FMT_YUV420P9LE :
label	25:4	25:30	4	case AV_PIX_FMT_YUV422P9LE :
label	26:4	26:30	4	case AV_PIX_FMT_YUV444P9LE :
label	27:4	27:31	4	case AV_PIX_FMT_YUVA420P9LE :
label	28:4	28:31	4	case AV_PIX_FMT_YUVA422P9LE :
label	29:4	29:31	4	case AV_PIX_FMT_YUVA444P9LE :
label	30:4	30:31	4	case AV_PIX_FMT_YUV420P10LE :
label	31:4	31:31	4	case AV_PIX_FMT_YUV422P10LE :
label	32:4	32:31	4	case AV_PIX_FMT_YUV440P10LE :
label	33:4	33:31	4	case AV_PIX_FMT_YUV444P10LE :
label	34:4	34:32	4	case AV_PIX_FMT_YUVA420P10LE :
label	35:4	35:32	4	case AV_PIX_FMT_YUVA422P10LE :
label	36:4	36:32	4	case AV_PIX_FMT_YUVA444P10LE :
label	37:4	37:31	4	case AV_PIX_FMT_YUV420P12LE :
label	38:4	38:31	4	case AV_PIX_FMT_YUV422P12LE :
label	39:4	39:31	4	case AV_PIX_FMT_YUV440P12LE :
label	40:4	40:31	4	case AV_PIX_FMT_YUV444P12LE :
label	41:4	41:31	4	case AV_PIX_FMT_YUV420P14LE :
label	42:4	42:31	4	case AV_PIX_FMT_YUV422P14LE :
label	43:4	43:31	4	case AV_PIX_FMT_YUV444P14LE :
label	44:4	44:31	4	case AV_PIX_FMT_YUV420P16LE :
label	45:4	45:31	4	case AV_PIX_FMT_YUV422P16LE :
label	46:4	46:31	4	case AV_PIX_FMT_YUV444P16LE :
label	47:4	47:32	4	case AV_PIX_FMT_YUVA420P16LE :
label	48:4	48:32	4	case AV_PIX_FMT_YUVA422P16LE :
label	49:4	49:32	4	case AV_PIX_FMT_YUVA444P16LE :
water	50:8	0:0	4	min
op	50:11	0:0	4	[
water	50:12	0:0	4	Y
op	50:13	0:0	4	]
op	50:15	0:0	4	=
water	50:17	0:0	4	16
op	50:20	0:0	4	*
water	50:22	0:0	4	(
water	50:23	0:0	4	1
op	50:25	0:0	4	<<
water	50:28	0:0	4	(
water	50:29	0:0	4	desc
op	50:33	0:0	4	->
water	50:35	0:0	4	comp
op	50:39	0:0	4	[
water	50:40	0:0	4	0
op	50:41	0:0	4	]
op	50:42	0:0	4	.
water	50:43	0:0	4	depth_minus1
op	50:56	0:0	4	-
water	50:58	0:0	4	7
water	50:59	0:0	4	)
water	50:60	0:0	4	)
water	50:61	0:0	4	;
water	51:8	0:0	4	min
op	51:11	0:0	4	[
water	51:12	0:0	4	U
op	51:13	0:0	4	]
op	51:15	0:0	4	=
water	51:17	0:0	4	16
op	51:20	0:0	4	*
water	51:22	0:0	4	(
water	51:23	0:0	4	1
op	51:25	0:0	4	<<
water	51:28	0:0	4	(
water	51:29	0:0	4	desc
op	51:33	0:0	4	->
water	51:35	0:0	4	comp
op	51:39	0:0	4	[
water	51:40	0:0	4	1
op	51:41	0:0	4	]
op	51:42	0:0	4	.
water	51:43	0:0	4	depth_minus1
op	51:56	0:0	4	-
water	51:58	0:0	4	7
water	51:59	0:0	4	)
water	51:60	0:0	4	)
water	51:61	0:0	4	;
water	52:8	0:0	4	min
op	52:11	0:0	4	[
water	52:12	0:0	4	V
op	52:13	0:0	4	]
op	52:15	0:0	4	=
water	52:17	0:0	4	16
op	52:20	0:0	4	*
water	52:22	0:0	4	(
water	52:23	0:0	4	1
op	52:25	0:0	4	<<
water	52:28	0:0	4	(
water	52:29	0:0	4	desc
op	52:33	0:0	4	->
water	52:35	0:0	4	comp
op	52:39	0:0	4	[
water	52:40	0:0	4	2
op	52:41	0:0	4	]
op	52:42	0:0	4	.
water	52:43	0:0	4	depth_minus1
op	52:56	0:0	4	-
water	52:58	0:0	4	7
water	52:59	0:0	4	)
water	52:60	0:0	4	)
water	52:61	0:0	4	;
water	53:8	0:0	4	min
op	53:11	0:0	4	[
water	53:12	0:0	4	A
op	53:13	0:0	4	]
op	53:15	0:0	4	=
water	53:17	0:0	4	0
water	53:18	0:0	4	;
water	54:8	0:0	4	max
op	54:11	0:0	4	[
water	54:12	0:0	4	Y
op	54:13	0:0	4	]
op	54:15	0:0	4	=
water	54:17	0:0	4	235
op	54:21	0:0	4	*
water	54:23	0:0	4	(
water	54:24	0:0	4	1
op	54:26	0:0	4	<<
water	54:29	0:0	4	(
water	54:30	0:0	4	desc
op	54:34	0:0	4	->
water	54:36	0:0	4	comp
op	54:40	0:0	4	[
water	54:41	0:0	4	0
op	54:42	0:0	4	]
op	54:43	0:0	4	.
water	54:44	0:0	4	depth_minus1
op	54:57	0:0	4	-
water	54:59	0:0	4	7
water	54:60	0:0	4	)
water	54:61	0:0	4	)
water	54:62	0:0	4	;
water	55:8	0:0	4	max
op	55:11	0:0	4	[
water	55:12	0:0	4	U
op	55:13	0:0	4	]
op	55:15	0:0	4	=
water	55:17	0:0	4	240
op	55:21	0:0	4	*
water	55:23	0:0	4	(
water	55:24	0:0	4	1
op	55:26	0:0	4	<<
water	55:29	0:0	4	(
water	55:30	0:0	4	desc
op	55:34	0:0	4	->
water	55:36	0:0	4	comp
op	55:40	0:0	4	[
water	55:41	0:0	4	1
op	55:42	0:0	4	]
op	55:43	0:0	4	.
water	55:44	0:0	4	depth_minus1
op	55:57	0:0	4	-
water	55:59	0:0	4	7
water	55:60	0:0	4	)
water	55:61	0:0	4	)
water	55:62	0:0	4	;
water	56:8	0:0	4	max
op	56:11	0:0	4	[
water	56:12	0:0	4	V
op	56:13	0:0	4	]
op	56:15	0:0	4	=
water	56:17	0:0	4	240
op	56:21	0:0	4	*
water	56:23	0:0	4	(
water	56:24	0:0	4	1
op	56:26	0:0	4	<<
water	56:29	0:0	4	(
water	56:30	0:0	4	desc
op	56:34	0:0	4	->
water	56:36	0:0	4	comp
op	56:40	0:0	4	[
water	56:41	0:0	4	2
op	56:42	0:0	4	]
op	56:43	0:0	4	.
water	56:44	0:0	4	depth_minus1
op	56:57	0:0	4	-
water	56:59	0:0	4	7
water	56:60	0:0	4	)
water	56:61	0:0	4	)
water	56:62	0:0	4	;
water	57:8	0:0	4	max
op	57:11	0:0	4	[
water	57:12	0:0	4	A
op	57:13	0:0	4	]
op	57:15	0:0	4	=
water	57:17	0:0	4	(
water	57:18	0:0	4	1
op	57:20	0:0	4	<<
water	57:23	0:0	4	(
water	57:24	0:0	4	desc
op	57:28	0:0	4	->
water	57:30	0:0	4	comp
op	57:34	0:0	4	[
water	57:35	0:0	4	3
op	57:36	0:0	4	]
op	57:37	0:0	4	.
water	57:38	0:0	4	depth_minus1
op	57:51	0:0	4	+
water	57:53	0:0	4	1
water	57:54	0:0	4	)
water	57:55	0:0	4	)
op	57:57	0:0	4	-
water	57:59	0:0	4	1
water	57:60	0:0	4	;
break	58:8	58:13	4	
label	59:4	59:11	4	default :
water	60:8	0:0	4	min
op	60:11	0:0	4	[
water	60:12	0:0	4	0
op	60:13	0:0	4	]
op	60:15	0:0	4	=
water	60:17	0:0	4	min
op	60:20	0:0	4	[
water	60:21	0:0	4	1
op	60:22	0:0	4	]
op	60:24	0:0	4	=
water	60:26	0:0	4	min
op	60:29	0:0	4	[
water	60:30	0:0	4	2
op	60:31	0:0	4	]
op	60:33	0:0	4	=
water	60:35	0:0	4	min
op	60:38	0:0	4	[
water	60:39	0:0	4	3
op	60:40	0:0	4	]
op	60:42	0:0	4	=
water	60:44	0:0	4	0
water	60:45	0:0	4	;
water	61:8	0:0	4	max
op	61:11	0:0	4	[
water	61:12	0:0	4	0
op	61:13	0:0	4	]
op	61:15	0:0	4	=
water	61:17	0:0	4	max
op	61:20	0:0	4	[
water	61:21	0:0	4	1
op	61:22	0:0	4	]
op	61:24	0:0	4	=
water	61:26	0:0	4	max
op	61:29	0:0	4	[
water	61:30	0:0	4	2
op	61:31	0:0	4	]
op	61:33	0:0	4	=
water	61:35	0:0	4	max
op	61:38	0:0	4	[
water	61:39	0:0	4	3
op	61:40	0:0	4	]
op	61:42	0:0	4	=
water	61:44	0:0	4	255
water	61:47	0:0	4	;
water	62:4	0:0	4	}
water	63:4	0:0	2	s
op	63:5	0:0	2	->
water	63:7	0:0	2	is_yuv
op	63:14	0:0	2	=
water	63:16	0:0	2	s
op	63:17	0:0	2	->
water	63:19	0:0	2	is_rgb
op	63:26	0:0	2	=
water	63:28	0:0	2	0
water	63:29	0:0	2	;
if	64:4	64:70	2	(ff_fmt_is_in (inlink -> format ,yuv_pix_fmts ))
cond	64:13	64:54	3	ff_fmt_is_in (inlink -> format ,yuv_pix_fmts )
call	64:13	64:54	4	ff_fmt_is_in
arg	64:26	64:40	5	inlink->format
water	64:26	0:0	6	inlink
op	64:32	0:0	6	->
water	64:34	0:0	6	format
arg	64:42	64:54	5	yuv_pix_fmts
water	64:42	0:0	6	yuv_pix_fmts
stmts	64:57	64:70	3	
water	64:57	0:0	4	s
op	64:58	0:0	4	->
water	64:60	0:0	4	is_yuv
op	64:67	0:0	4	=
water	64:69	0:0	4	1
water	64:70	0:0	4	;
else	65:4	65:70	2
stmts	65:9	65:70	3	
if	65:9	65:70	4	(ff_fmt_is_in (inlink -> format ,rgb_pix_fmts ))
cond	65:13	65:54	5	ff_fmt_is_in (inlink -> format ,rgb_pix_fmts )
call	65:13	65:54	6	ff_fmt_is_in
arg	65:26	65:40	7	inlink->format
water	65:26	0:0	8	inlink
op	65:32	0:0	8	->
water	65:34	0:0	8	format
arg	65:42	65:54	7	rgb_pix_fmts
water	65:42	0:0	8	rgb_pix_fmts
stmts	65:57	65:70	5	
water	65:57	0:0	6	s
op	65:58	0:0	6	->
water	65:60	0:0	6	is_rgb
op	65:67	0:0	6	=
water	65:69	0:0	6	1
water	65:70	0:0	6	;
if	66:4	69:4	2	(s -> is_rgb)
cond	66:8	66:11	3	s -> is_rgb
water	66:8	0:0	4	s
op	66:9	0:0	4	->
water	66:11	0:0	4	is_rgb
stmts	66:19	69:4	3	
water	66:19	0:0	4	{
call	67:8	67:49	4	ff_fill_rgba_map
arg	67:25	67:33	5	rgba_map
water	67:25	0:0	6	rgba_map
arg	67:35	67:49	5	inlink->format
water	67:35	0:0	6	inlink
op	67:41	0:0	6	->
water	67:43	0:0	6	format
water	67:50	0:0	4	;
water	68:8	0:0	4	s
op	68:9	0:0	4	->
water	68:11	0:0	4	step
op	68:16	0:0	4	=
call	68:18	68:44	4	av_get_bits_per_pixel
arg	68:40	68:44	5	desc
water	68:40	0:0	6	desc
op	68:46	0:0	4	>>
water	68:49	0:0	4	3
water	68:50	0:0	4	;
water	69:4	0:0	4	}
for	70:4	103:4	2	(color = 0 ;color < desc -> nb_components;color ++)
forinit	70:9	70:18	3	color = 0 ;
water	70:9	0:0	4	color
op	70:15	0:0	4	=
water	70:17	0:0	4	0
water	70:18	0:0	4	;
cond	70:20	70:34	3	color < desc -> nb_components
water	70:20	0:0	4	color
op	70:26	0:0	4	<
water	70:28	0:0	4	desc
op	70:32	0:0	4	->
water	70:34	0:0	4	nb_components
forexpr	70:49	70:54	3	color ++
water	70:49	0:0	4	color
op	70:54	0:0	4	++
stmts	70:58	103:4	3	
water	70:58	0:0	4	{
decl	71:8	71:18	4	double	res
decl	72:8	72:54	4	int	comp
op	72:17	0:0	4	=
water	72:19	0:0	4	s
op	72:20	0:0	4	->
water	72:22	0:0	4	is_rgb
water	72:29	0:0	4	?
water	72:31	0:0	4	rgba_map
op	72:39	0:0	4	[
water	72:40	0:0	4	color
op	72:45	0:0	4	]
water	72:47	0:0	4	:
water	72:49	0:0	4	color
call	74:8	74:40	4	av_expr_free
arg	74:21	74:40	5	s->comp_expr[color]
water	74:21	0:0	6	s
op	74:22	0:0	6	->
water	74:24	0:0	6	comp_expr
op	74:33	0:0	6	[
water	74:34	0:0	6	color
op	74:39	0:0	6	]
water	74:41	0:0	4	;
water	75:8	0:0	4	s
op	75:9	0:0	4	->
water	75:11	0:0	4	comp_expr
op	75:20	0:0	4	[
water	75:21	0:0	4	color
op	75:26	0:0	4	]
op	75:28	0:0	4	=
water	75:30	0:0	4	NULL
water	75:34	0:0	4	;
water	76:8	0:0	4	ret
op	76:12	0:0	4	=
call	76:14	77:79	4	av_expr_parse
arg	76:28	76:48	5	&s->comp_expr[color]
op	76:28	0:0	6	&
water	76:29	0:0	6	s
op	76:30	0:0	6	->
water	76:32	0:0	6	comp_expr
op	76:41	0:0	6	[
water	76:42	0:0	6	color
op	76:47	0:0	6	]
arg	76:50	76:73	5	s->comp_expr_str[color]
water	76:50	0:0	6	s
op	76:51	0:0	6	->
water	76:53	0:0	6	comp_expr_str
op	76:66	0:0	6	[
water	76:67	0:0	6	color
op	76:72	0:0	6	]
arg	77:28	77:37	5	var_names
water	77:28	0:0	6	var_names
arg	77:39	77:51	5	funcs1_names
water	77:39	0:0	6	funcs1_names
arg	77:53	77:59	5	funcs1
water	77:53	0:0	6	funcs1
arg	77:61	77:65	5	NULL
water	77:61	0:0	6	NULL
arg	77:67	77:71	5	NULL
water	77:67	0:0	6	NULL
arg	77:73	77:74	5	0
water	77:73	0:0	6	0
arg	77:76	77:79	5	ctx
water	77:76	0:0	6	ctx
water	77:80	0:0	4	;
if	78:8	83:8	4	(ret < 0)
cond	78:12	78:18	5	ret < 0
water	78:12	0:0	6	ret
op	78:16	0:0	6	<
water	78:18	0:0	6	0
stmts	78:21	83:8	5	
water	78:21	0:0	6	{
call	79:12	81:54	6	av_log
arg	79:19	79:22	7	ctx
water	79:19	0:0	8	ctx
arg	79:24	79:36	7	AV_LOG_ERROR
water	79:24	0:0	8	AV_LOG_ERROR
arg	80:19	80:96	7	"Error when parsing the expression '%s' for the component %d and color %d.\n"
water	80:19	0:0	8	"Error when parsing the expression '%s' for the component %d and color %d.\n"
arg	81:19	81:41	7	s->comp_expr_str[comp]
water	81:19	0:0	8	s
op	81:20	0:0	8	->
water	81:22	0:0	8	comp_expr_str
op	81:35	0:0	8	[
water	81:36	0:0	8	comp
op	81:40	0:0	8	]
arg	81:43	81:47	7	comp
water	81:43	0:0	8	comp
arg	81:49	81:54	7	color
water	81:49	0:0	8	color
water	81:55	0:0	6	;
return	82:12	82:34	6	AVERROR(EINVAL)
call	82:19	82:33	7	AVERROR
arg	82:27	82:33	8	EINVAL
water	82:27	0:0	9	EINVAL
water	83:8	0:0	6	}
water	85:8	0:0	4	s
op	85:9	0:0	4	->
water	85:11	0:0	4	var_values
op	85:21	0:0	4	[
water	85:22	0:0	4	VAR_MAXVAL
op	85:32	0:0	4	]
op	85:34	0:0	4	=
water	85:36	0:0	4	max
op	85:39	0:0	4	[
water	85:40	0:0	4	color
op	85:45	0:0	4	]
water	85:46	0:0	4	;
water	86:8	0:0	4	s
op	86:9	0:0	4	->
water	86:11	0:0	4	var_values
op	86:21	0:0	4	[
water	86:22	0:0	4	VAR_MINVAL
op	86:32	0:0	4	]
op	86:34	0:0	4	=
water	86:36	0:0	4	min
op	86:39	0:0	4	[
water	86:40	0:0	4	color
op	86:45	0:0	4	]
water	86:46	0:0	4	;
for	87:8	102:8	4	(val = 0 ;val < ( 1 << ( desc -> comp [ 0 ] . depth_minus1 + 1 ) );val ++)
forinit	87:13	87:20	5	val = 0 ;
water	87:13	0:0	6	val
op	87:17	0:0	6	=
water	87:19	0:0	6	0
water	87:20	0:0	6	;
cond	87:22	87:66	5	val < ( 1 << ( desc -> comp [ 0 ] . depth_minus1 + 1 ) )
water	87:22	0:0	6	val
op	87:26	0:0	6	<
water	87:28	0:0	6	(
water	87:29	0:0	6	1
op	87:31	0:0	6	<<
water	87:34	0:0	6	(
water	87:35	0:0	6	desc
op	87:39	0:0	6	->
water	87:41	0:0	6	comp
op	87:45	0:0	6	[
water	87:46	0:0	6	0
op	87:47	0:0	6	]
op	87:48	0:0	6	.
water	87:49	0:0	6	depth_minus1
op	87:62	0:0	6	+
water	87:64	0:0	6	1
water	87:65	0:0	6	)
water	87:66	0:0	6	)
forexpr	87:69	87:72	5	val ++
water	87:69	0:0	6	val
op	87:72	0:0	6	++
stmts	87:76	102:8	5	
water	87:76	0:0	6	{
water	88:12	0:0	6	s
op	88:13	0:0	6	->
water	88:15	0:0	6	var_values
op	88:25	0:0	6	[
water	88:26	0:0	6	VAR_VAL
op	88:33	0:0	6	]
op	88:35	0:0	6	=
water	88:37	0:0	6	val
water	88:40	0:0	6	;
water	89:12	0:0	6	s
op	89:13	0:0	6	->
water	89:15	0:0	6	var_values
op	89:25	0:0	6	[
water	89:26	0:0	6	VAR_CLIPVAL
op	89:37	0:0	6	]
op	89:39	0:0	6	=
call	89:41	89:76	6	av_clip
arg	89:49	89:52	7	val
water	89:49	0:0	8	val
arg	89:54	89:64	7	min[color]
water	89:54	0:0	8	min
op	89:57	0:0	8	[
water	89:58	0:0	8	color
op	89:63	0:0	8	]
arg	89:66	89:76	7	max[color]
water	89:66	0:0	8	max
op	89:69	0:0	8	[
water	89:70	0:0	8	color
op	89:75	0:0	8	]
water	89:77	0:0	6	;
water	90:12	0:0	6	s
op	90:13	0:0	6	->
water	90:15	0:0	6	var_values
op	90:25	0:0	6	[
water	90:26	0:0	6	VAR_NEGVAL
op	90:36	0:0	6	]
op	90:38	0:0	6	=
call	91:16	92:46	6	av_clip
arg	91:24	91:72	7	min[color]+max[color]-s->var_values[VAR_VAL]
water	91:24	0:0	8	min
op	91:27	0:0	8	[
water	91:28	0:0	8	color
op	91:33	0:0	8	]
op	91:35	0:0	8	+
water	91:37	0:0	8	max
op	91:40	0:0	8	[
water	91:41	0:0	8	color
op	91:46	0:0	8	]
op	91:48	0:0	8	-
water	91:50	0:0	8	s
op	91:51	0:0	8	->
water	91:53	0:0	8	var_values
op	91:63	0:0	8	[
water	91:64	0:0	8	VAR_VAL
op	91:71	0:0	8	]
arg	92:24	92:34	7	min[color]
water	92:24	0:0	8	min
op	92:27	0:0	8	[
water	92:28	0:0	8	color
op	92:33	0:0	8	]
arg	92:36	92:46	7	max[color]
water	92:36	0:0	8	max
op	92:39	0:0	8	[
water	92:40	0:0	8	color
op	92:45	0:0	8	]
water	92:47	0:0	6	;
water	93:12	0:0	6	res
op	93:16	0:0	6	=
call	93:18	93:68	6	av_expr_eval
arg	93:31	93:50	7	s->comp_expr[color]
water	93:31	0:0	8	s
op	93:32	0:0	8	->
water	93:34	0:0	8	comp_expr
op	93:43	0:0	8	[
water	93:44	0:0	8	color
op	93:49	0:0	8	]
arg	93:52	93:65	7	s->var_values
water	93:52	0:0	8	s
op	93:53	0:0	8	->
water	93:55	0:0	8	var_values
arg	93:67	93:68	7	s
water	93:67	0:0	8	s
water	93:69	0:0	6	;
if	94:12	99:12	6	(isnan (res ))
cond	94:16	94:25	7	isnan (res )
call	94:16	94:25	8	isnan
arg	94:22	94:25	9	res
water	94:22	0:0	10	res
stmts	94:28	99:12	7	
water	94:28	0:0	8	{
call	95:16	97:57	8	av_log
arg	95:23	95:26	9	ctx
water	95:23	0:0	10	ctx
arg	95:28	95:40	9	AV_LOG_ERROR
water	95:28	0:0	10	AV_LOG_ERROR
arg	96:23	96:107	9	"Error when evaluating the expression '%s' for the value %d for the component %d.\n"
water	96:23	0:0	10	"Error when evaluating the expression '%s' for the value %d for the component %d.\n"
arg	97:23	97:46	9	s->comp_expr_str[color]
water	97:23	0:0	10	s
op	97:24	0:0	10	->
water	97:26	0:0	10	comp_expr_str
op	97:39	0:0	10	[
water	97:40	0:0	10	color
op	97:45	0:0	10	]
arg	97:48	97:51	9	val
water	97:48	0:0	10	val
arg	97:53	97:57	9	comp
water	97:53	0:0	10	comp
water	97:58	0:0	8	;
return	98:16	98:38	8	AVERROR(EINVAL)
call	98:23	98:37	9	AVERROR
arg	98:31	98:37	10	EINVAL
water	98:31	0:0	11	EINVAL
water	99:12	0:0	8	}
water	100:12	0:0	6	s
op	100:13	0:0	6	->
water	100:15	0:0	6	lut
op	100:18	0:0	6	[
water	100:19	0:0	6	comp
op	100:23	0:0	6	]
op	100:24	0:0	6	[
water	100:25	0:0	6	val
op	100:28	0:0	6	]
op	100:30	0:0	6	=
call	100:32	100:72	6	av_clip
arg	100:40	100:48	7	(int)res
water	100:40	0:0	8	(
water	100:41	0:0	8	int
water	100:44	0:0	8	)
water	100:45	0:0	8	res
arg	100:50	100:60	7	min[color]
water	100:50	0:0	8	min
op	100:53	0:0	8	[
water	100:54	0:0	8	color
op	100:59	0:0	8	]
arg	100:62	100:72	7	max[color]
water	100:62	0:0	8	max
op	100:65	0:0	8	[
water	100:66	0:0	8	color
op	100:71	0:0	8	]
water	100:73	0:0	6	;
call	101:12	101:88	6	av_log
arg	101:19	101:22	7	ctx
water	101:19	0:0	8	ctx
arg	101:24	101:36	7	AV_LOG_DEBUG
water	101:24	0:0	8	AV_LOG_DEBUG
arg	101:38	101:58	7	"val[%d][%d] = %d\n"
water	101:38	0:0	8	"val[%d][%d] = %d\n"
arg	101:60	101:64	7	comp
water	101:60	0:0	8	comp
arg	101:66	101:69	7	val
water	101:66	0:0	8	val
arg	101:71	101:88	7	s->lut[comp][val]
water	101:71	0:0	8	s
op	101:72	0:0	8	->
water	101:74	0:0	8	lut
op	101:77	0:0	8	[
water	101:78	0:0	8	comp
op	101:82	0:0	8	]
op	101:83	0:0	8	[
water	101:84	0:0	8	val
op	101:87	0:0	8	]
water	101:89	0:0	6	;
water	102:8	0:0	6	}
water	103:4	0:0	4	}
return	104:4	104:12	2	0
water	104:11	0:0	3	0
