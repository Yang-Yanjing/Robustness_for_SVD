func	1:0	78:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:57	2	AVFrame *	in
stmnts	0:0	77:14	1	
decl	3:4	3:31	2	int	scpos
op	3:14	0:0	2	=
op	3:16	0:0	2	-
water	3:17	0:0	2	1
water	3:18	0:0	2	,
decl	3:4	3:31	2	int	duppos
op	3:27	0:0	2	=
op	3:29	0:0	2	-
water	3:30	0:0	2	1
decl	4:4	4:42	2	int	drop
op	4:13	0:0	2	=
water	4:15	0:0	2	INT_MIN
water	4:22	0:0	2	,
decl	4:4	4:42	2	int	i
water	4:25	0:0	2	,
decl	4:4	4:42	2	int	lowest
op	4:34	0:0	2	=
water	4:36	0:0	2	0
water	4:37	0:0	2	,
decl	4:4	4:42	2	int	ret
decl	5:4	5:39	2	AVFilterContext	*ctx
op	5:26	0:0	2	=
water	5:28	0:0	2	inlink
op	5:34	0:0	2	->
water	5:36	0:0	2	dst
decl	6:4	6:43	2	AVFilterLink	*outlink
op	6:26	0:0	2	=
water	6:28	0:0	2	ctx
op	6:31	0:0	2	->
water	6:33	0:0	2	outputs
op	6:40	0:0	2	[
water	6:41	0:0	2	0
op	6:42	0:0	2	]
decl	7:4	7:37	2	DecimateContext	*dm
op	7:26	0:0	2	=
water	7:28	0:0	2	ctx
op	7:31	0:0	2	->
water	7:33	0:0	2	priv
decl	8:4	8:16	2	AVFrame	*prv
if	10:4	13:4	2	(FF_INLINK_IDX (inlink ) == INPUT_MAIN)
cond	10:8	10:33	3	FF_INLINK_IDX (inlink ) == INPUT_MAIN
call	10:8	10:28	4	FF_INLINK_IDX
arg	10:22	10:28	5	inlink
water	10:22	0:0	6	inlink
op	10:30	0:0	4	==
water	10:33	0:0	4	INPUT_MAIN
stmts	10:45	13:4	3	
water	10:45	0:0	4	{
water	11:8	0:0	4	dm
op	11:10	0:0	4	->
water	11:12	0:0	4	queue
op	11:17	0:0	4	[
water	11:18	0:0	4	dm
op	11:20	0:0	4	->
water	11:22	0:0	4	fid
op	11:25	0:0	4	]
op	11:26	0:0	4	.
water	11:27	0:0	4	frame
op	11:33	0:0	4	=
water	11:35	0:0	4	in
water	11:37	0:0	4	;
water	12:8	0:0	4	dm
op	12:10	0:0	4	->
water	12:12	0:0	4	got_frame
op	12:21	0:0	4	[
water	12:22	0:0	4	INPUT_MAIN
op	12:32	0:0	4	]
op	12:34	0:0	4	=
water	12:36	0:0	4	1
water	12:37	0:0	4	;
water	13:4	0:0	4	}
else	13:6	16:4	2
stmts	13:11	16:4	3	
water	13:11	0:0	4	{
water	14:8	0:0	4	dm
op	14:10	0:0	4	->
water	14:12	0:0	4	clean_src
op	14:21	0:0	4	[
water	14:22	0:0	4	dm
op	14:24	0:0	4	->
water	14:26	0:0	4	fid
op	14:29	0:0	4	]
op	14:31	0:0	4	=
water	14:33	0:0	4	in
water	14:35	0:0	4	;
water	15:8	0:0	4	dm
op	15:10	0:0	4	->
water	15:12	0:0	4	got_frame
op	15:21	0:0	4	[
water	15:22	0:0	4	INPUT_CLEANSRC
op	15:36	0:0	4	]
op	15:38	0:0	4	=
water	15:40	0:0	4	1
water	15:41	0:0	4	;
water	16:4	0:0	4	}
if	17:4	18:16	2	(! dm -> got_frame [ INPUT_MAIN ] || ( dm -> ppsrc && ! dm -> got_frame [ INPUT_CLEANSRC ] ))
cond	17:8	17:82	3	! dm -> got_frame [ INPUT_MAIN ] || ( dm -> ppsrc && ! dm -> got_frame [ INPUT_CLEANSRC ] )
op	17:8	0:0	4	!
water	17:9	0:0	4	dm
op	17:11	0:0	4	->
water	17:13	0:0	4	got_frame
op	17:22	0:0	4	[
water	17:23	0:0	4	INPUT_MAIN
op	17:33	0:0	4	]
op	17:35	0:0	4	||
water	17:38	0:0	4	(
water	17:39	0:0	4	dm
op	17:41	0:0	4	->
water	17:43	0:0	4	ppsrc
op	17:49	0:0	4	&&
op	17:52	0:0	4	!
water	17:53	0:0	4	dm
op	17:55	0:0	4	->
water	17:57	0:0	4	got_frame
op	17:66	0:0	4	[
water	17:67	0:0	4	INPUT_CLEANSRC
op	17:81	0:0	4	]
water	17:82	0:0	4	)
stmts	18:8	18:16	3	
return	18:8	18:16	4	0
water	18:15	0:0	5	0
water	19:4	0:0	2	dm
op	19:6	0:0	2	->
water	19:8	0:0	2	got_frame
op	19:17	0:0	2	[
water	19:18	0:0	2	INPUT_MAIN
op	19:28	0:0	2	]
op	19:30	0:0	2	=
water	19:32	0:0	2	dm
op	19:34	0:0	2	->
water	19:36	0:0	2	got_frame
op	19:45	0:0	2	[
water	19:46	0:0	2	INPUT_CLEANSRC
op	19:60	0:0	2	]
op	19:62	0:0	2	=
water	19:64	0:0	2	0
water	19:65	0:0	2	;
if	20:4	42:4	2	(in)
cond	20:8	20:8	3	in
water	20:8	0:0	4	in
stmts	20:12	42:4	3	
water	20:12	0:0	4	{
water	22:8	0:0	4	prv
op	22:12	0:0	4	=
water	22:14	0:0	4	dm
op	22:16	0:0	4	->
water	22:18	0:0	4	fid
water	22:22	0:0	4	?
water	22:24	0:0	4	dm
op	22:26	0:0	4	->
water	22:28	0:0	4	queue
op	22:33	0:0	4	[
water	22:34	0:0	4	dm
op	22:36	0:0	4	->
water	22:38	0:0	4	fid
op	22:42	0:0	4	-
water	22:44	0:0	4	1
op	22:45	0:0	4	]
op	22:46	0:0	4	.
water	22:47	0:0	4	frame
water	22:53	0:0	4	:
water	22:55	0:0	4	dm
op	22:57	0:0	4	->
water	22:59	0:0	4	last
water	22:63	0:0	4	;
if	23:8	24:20	4	(! prv)
cond	23:12	23:13	5	! prv
op	23:12	0:0	6	!
water	23:13	0:0	6	prv
stmts	24:12	24:20	5	
water	24:12	0:0	6	prv
op	24:16	0:0	6	=
water	24:18	0:0	6	in
water	24:20	0:0	6	;
call	25:8	25:51	4	calc_diffs
arg	25:19	25:21	5	dm
water	25:19	0:0	6	dm
arg	25:23	25:42	5	&dm->queue[dm->fid]
op	25:23	0:0	6	&
water	25:24	0:0	6	dm
op	25:26	0:0	6	->
water	25:28	0:0	6	queue
op	25:33	0:0	6	[
water	25:34	0:0	6	dm
op	25:36	0:0	6	->
water	25:38	0:0	6	fid
op	25:41	0:0	6	]
arg	25:44	25:47	5	prv
water	25:44	0:0	6	prv
arg	25:49	25:51	5	in
water	25:49	0:0	6	in
water	25:52	0:0	4	;
if	26:8	27:20	4	(++ dm -> fid != dm -> cycle)
cond	26:12	26:29	5	++ dm -> fid != dm -> cycle
op	26:12	0:0	6	++
water	26:14	0:0	6	dm
op	26:16	0:0	6	->
water	26:18	0:0	6	fid
op	26:22	0:0	6	!=
water	26:25	0:0	6	dm
op	26:27	0:0	6	->
water	26:29	0:0	6	cycle
stmts	27:12	27:20	5	
return	27:12	27:20	6	0
water	27:19	0:0	7	0
call	28:8	28:31	4	av_frame_free
arg	28:22	28:31	5	&dm->last
op	28:22	0:0	6	&
water	28:23	0:0	6	dm
op	28:25	0:0	6	->
water	28:27	0:0	6	last
water	28:32	0:0	4	;
water	29:8	0:0	4	dm
op	29:10	0:0	4	->
water	29:12	0:0	4	last
op	29:17	0:0	4	=
call	29:19	29:36	4	av_frame_clone
arg	29:34	29:36	5	in
water	29:34	0:0	6	in
water	29:37	0:0	4	;
water	30:8	0:0	4	dm
op	30:10	0:0	4	->
water	30:12	0:0	4	fid
op	30:16	0:0	4	=
water	30:18	0:0	4	0
water	30:19	0:0	4	;
water	32:8	0:0	4	lowest
op	32:15	0:0	4	=
water	32:17	0:0	4	0
water	32:18	0:0	4	;
for	33:8	38:8	4	(i = 0 ;i < dm -> cycle;i ++)
forinit	33:13	33:18	5	i = 0 ;
water	33:13	0:0	6	i
op	33:15	0:0	6	=
water	33:17	0:0	6	0
water	33:18	0:0	6	;
cond	33:20	33:28	5	i < dm -> cycle
water	33:20	0:0	6	i
op	33:22	0:0	6	<
water	33:24	0:0	6	dm
op	33:26	0:0	6	->
water	33:28	0:0	6	cycle
forexpr	33:35	33:36	5	i ++
water	33:35	0:0	6	i
op	33:36	0:0	6	++
stmts	33:40	38:8	5	
water	33:40	0:0	6	{
if	34:12	35:25	6	(dm -> queue [ i ] . totdiff > dm -> scthresh)
cond	34:16	34:43	7	dm -> queue [ i ] . totdiff > dm -> scthresh
water	34:16	0:0	8	dm
op	34:18	0:0	8	->
water	34:20	0:0	8	queue
op	34:25	0:0	8	[
water	34:26	0:0	8	i
op	34:27	0:0	8	]
op	34:28	0:0	8	.
water	34:29	0:0	8	totdiff
op	34:37	0:0	8	>
water	34:39	0:0	8	dm
op	34:41	0:0	8	->
water	34:43	0:0	8	scthresh
stmts	35:16	35:25	7	
water	35:16	0:0	8	scpos
op	35:22	0:0	8	=
water	35:24	0:0	8	i
water	35:25	0:0	8	;
if	36:12	37:26	6	(dm -> queue [ i ] . maxbdiff < dm -> queue [ lowest ] . maxbdiff)
cond	36:16	36:58	7	dm -> queue [ i ] . maxbdiff < dm -> queue [ lowest ] . maxbdiff
water	36:16	0:0	8	dm
op	36:18	0:0	8	->
water	36:20	0:0	8	queue
op	36:25	0:0	8	[
water	36:26	0:0	8	i
op	36:27	0:0	8	]
op	36:28	0:0	8	.
water	36:29	0:0	8	maxbdiff
op	36:38	0:0	8	<
water	36:40	0:0	8	dm
op	36:42	0:0	8	->
water	36:44	0:0	8	queue
op	36:49	0:0	8	[
water	36:50	0:0	8	lowest
op	36:56	0:0	8	]
op	36:57	0:0	8	.
water	36:58	0:0	8	maxbdiff
stmts	37:16	37:26	7	
water	37:16	0:0	8	lowest
op	37:23	0:0	8	=
water	37:25	0:0	8	i
water	37:26	0:0	8	;
water	38:8	0:0	6	}
if	39:8	40:27	4	(dm -> queue [ lowest ] . maxbdiff < dm -> dupthresh)
cond	39:12	39:45	5	dm -> queue [ lowest ] . maxbdiff < dm -> dupthresh
water	39:12	0:0	6	dm
op	39:14	0:0	6	->
water	39:16	0:0	6	queue
op	39:21	0:0	6	[
water	39:22	0:0	6	lowest
op	39:28	0:0	6	]
op	39:29	0:0	6	.
water	39:30	0:0	6	maxbdiff
op	39:39	0:0	6	<
water	39:41	0:0	6	dm
op	39:43	0:0	6	->
water	39:45	0:0	6	dupthresh
stmts	40:12	40:27	5	
water	40:12	0:0	6	duppos
op	40:19	0:0	6	=
water	40:21	0:0	6	lowest
water	40:27	0:0	6	;
water	41:8	0:0	4	drop
op	41:13	0:0	4	=
water	41:15	0:0	4	scpos
op	41:21	0:0	4	>=
water	41:24	0:0	4	0
op	41:26	0:0	4	&&
water	41:29	0:0	4	duppos
op	41:36	0:0	4	<
water	41:38	0:0	4	0
water	41:40	0:0	4	?
water	41:42	0:0	4	scpos
water	41:48	0:0	4	:
water	41:50	0:0	4	lowest
water	41:56	0:0	4	;
water	42:4	0:0	4	}
if	44:4	54:4	2	(av_log_get_level ( ) >= AV_LOG_DEBUG)
cond	44:8	44:30	3	av_log_get_level ( ) >= AV_LOG_DEBUG
call	44:8	44:25	4	av_log_get_level
op	44:27	0:0	4	>=
water	44:30	0:0	4	AV_LOG_DEBUG
stmts	44:44	54:4	3	
water	44:44	0:0	4	{
call	45:8	45:65	4	av_log
arg	45:15	45:18	5	ctx
water	45:15	0:0	6	ctx
arg	45:20	45:32	5	AV_LOG_DEBUG
water	45:20	0:0	6	AV_LOG_DEBUG
arg	45:34	45:54	5	"1/%d frame drop:\n"
water	45:34	0:0	6	"1/%d frame drop:\n"
arg	45:56	45:65	5	dm->cycle
water	45:56	0:0	6	dm
op	45:58	0:0	6	->
water	45:60	0:0	6	cycle
water	45:66	0:0	4	;
for	46:8	53:8	4	(i = 0 ;i < dm -> cycle && dm -> queue [ i ] . frame;i ++)
forinit	46:13	46:18	5	i = 0 ;
water	46:13	0:0	6	i
op	46:15	0:0	6	=
water	46:17	0:0	6	0
water	46:18	0:0	6	;
cond	46:20	46:50	5	i < dm -> cycle && dm -> queue [ i ] . frame
water	46:20	0:0	6	i
op	46:22	0:0	6	<
water	46:24	0:0	6	dm
op	46:26	0:0	6	->
water	46:28	0:0	6	cycle
op	46:34	0:0	6	&&
water	46:37	0:0	6	dm
op	46:39	0:0	6	->
water	46:41	0:0	6	queue
op	46:46	0:0	6	[
water	46:47	0:0	6	i
op	46:48	0:0	6	]
op	46:49	0:0	6	.
water	46:50	0:0	6	frame
forexpr	46:57	46:58	5	i ++
water	46:57	0:0	6	i
op	46:58	0:0	6	++
stmts	46:62	53:8	5	
water	46:62	0:0	6	{
call	47:12	52:47	6	av_log
arg	47:19	47:22	7	ctx
water	47:19	0:0	8	ctx
arg	47:24	47:36	7	AV_LOG_DEBUG
water	47:24	0:0	8	AV_LOG_DEBUG
arg	47:37	47:96	7	"  #%d: totdiff=%08"PRIx64" maxbdiff=%08"PRIx64"%s%s%s%s\n"
water	47:37	0:0	8	"  #%d: totdiff=%08"
water	47:57	0:0	8	PRIx64
water	47:63	0:0	8	" maxbdiff=%08"
water	47:78	0:0	8	PRIx64
water	47:84	0:0	8	"%s%s%s%s\n"
arg	48:19	48:24	7	i+1
water	48:19	0:0	8	i
op	48:21	0:0	8	+
water	48:23	0:0	8	1
arg	48:26	48:46	7	dm->queue[i].totdiff
water	48:26	0:0	8	dm
op	48:28	0:0	8	->
water	48:30	0:0	8	queue
op	48:35	0:0	8	[
water	48:36	0:0	8	i
op	48:37	0:0	8	]
op	48:38	0:0	8	.
water	48:39	0:0	8	totdiff
arg	48:48	48:69	7	dm->queue[i].maxbdiff
water	48:48	0:0	8	dm
op	48:50	0:0	8	->
water	48:52	0:0	8	queue
op	48:57	0:0	8	[
water	48:58	0:0	8	i
op	48:59	0:0	8	]
op	48:60	0:0	8	.
water	48:61	0:0	8	maxbdiff
arg	49:19	49:47	7	i==scpos?" sc":""
water	49:19	0:0	8	i
op	49:21	0:0	8	==
water	49:24	0:0	8	scpos
water	49:31	0:0	8	?
water	49:33	0:0	8	" sc"
water	49:43	0:0	8	:
water	49:45	0:0	8	""
arg	50:19	50:47	7	i==duppos?" dup":""
water	50:19	0:0	8	i
op	50:21	0:0	8	==
water	50:24	0:0	8	duppos
water	50:31	0:0	8	?
water	50:33	0:0	8	" dup"
water	50:43	0:0	8	:
water	50:45	0:0	8	""
arg	51:19	51:47	7	i==lowest?" lowest":""
water	51:19	0:0	8	i
op	51:21	0:0	8	==
water	51:24	0:0	8	lowest
water	51:31	0:0	8	?
water	51:33	0:0	8	" lowest"
water	51:43	0:0	8	:
water	51:45	0:0	8	""
arg	52:19	52:47	7	i==drop?" [DROP]":""
water	52:19	0:0	8	i
op	52:21	0:0	8	==
water	52:24	0:0	8	drop
water	52:31	0:0	8	?
water	52:33	0:0	8	" [DROP]"
water	52:43	0:0	8	:
water	52:45	0:0	8	""
water	52:48	0:0	6	;
water	53:8	0:0	6	}
water	54:4	0:0	4	}
water	56:4	0:0	2	ret
op	56:8	0:0	2	=
water	56:10	0:0	2	0
water	56:11	0:0	2	;
for	57:4	76:4	2	(i = 0 ;i < dm -> cycle && dm -> queue [ i ] . frame;i ++)
forinit	57:9	57:14	3	i = 0 ;
water	57:9	0:0	4	i
op	57:11	0:0	4	=
water	57:13	0:0	4	0
water	57:14	0:0	4	;
cond	57:16	57:46	3	i < dm -> cycle && dm -> queue [ i ] . frame
water	57:16	0:0	4	i
op	57:18	0:0	4	<
water	57:20	0:0	4	dm
op	57:22	0:0	4	->
water	57:24	0:0	4	cycle
op	57:30	0:0	4	&&
water	57:33	0:0	4	dm
op	57:35	0:0	4	->
water	57:37	0:0	4	queue
op	57:42	0:0	4	[
water	57:43	0:0	4	i
op	57:44	0:0	4	]
op	57:45	0:0	4	.
water	57:46	0:0	4	frame
forexpr	57:53	57:54	3	i ++
water	57:53	0:0	4	i
op	57:54	0:0	4	++
stmts	57:58	76:4	3	
water	57:58	0:0	4	{
if	58:8	62:8	4	(i == drop)
cond	58:12	58:17	5	i == drop
water	58:12	0:0	6	i
op	58:14	0:0	6	==
water	58:17	0:0	6	drop
stmts	58:23	62:8	5	
water	58:23	0:0	6	{
if	59:12	60:48	6	(dm -> ppsrc)
cond	59:16	59:20	7	dm -> ppsrc
water	59:16	0:0	8	dm
op	59:18	0:0	8	->
water	59:20	0:0	8	ppsrc
stmts	60:16	60:48	7	
call	60:16	60:47	8	av_frame_free
arg	60:30	60:47	9	&dm->clean_src[i]
op	60:30	0:0	10	&
water	60:31	0:0	10	dm
op	60:33	0:0	10	->
water	60:35	0:0	10	clean_src
op	60:44	0:0	10	[
water	60:45	0:0	10	i
op	60:46	0:0	10	]
water	60:48	0:0	8	;
call	61:12	61:45	6	av_frame_free
arg	61:26	61:45	7	&dm->queue[i].frame
op	61:26	0:0	8	&
water	61:27	0:0	8	dm
op	61:29	0:0	8	->
water	61:31	0:0	8	queue
op	61:36	0:0	8	[
water	61:37	0:0	8	i
op	61:38	0:0	8	]
op	61:39	0:0	8	.
water	61:40	0:0	8	frame
water	61:46	0:0	6	;
water	62:8	0:0	6	}
else	62:10	75:8	4
stmts	62:15	75:8	5	
water	62:15	0:0	6	{
decl	63:12	63:47	6	AVFrame	*frame
op	63:27	0:0	6	=
water	63:29	0:0	6	dm
op	63:31	0:0	6	->
water	63:33	0:0	6	queue
op	63:38	0:0	6	[
water	63:39	0:0	6	i
op	63:40	0:0	6	]
op	63:41	0:0	6	.
water	63:42	0:0	6	frame
if	64:12	65:42	6	(frame -> pts != AV_NOPTS_VALUE && dm -> start_pts == AV_NOPTS_VALUE)
cond	64:16	64:65	7	frame -> pts != AV_NOPTS_VALUE && dm -> start_pts == AV_NOPTS_VALUE
water	64:16	0:0	8	frame
op	64:21	0:0	8	->
water	64:23	0:0	8	pts
op	64:27	0:0	8	!=
water	64:30	0:0	8	AV_NOPTS_VALUE
op	64:45	0:0	8	&&
water	64:48	0:0	8	dm
op	64:50	0:0	8	->
water	64:52	0:0	8	start_pts
op	64:62	0:0	8	==
water	64:65	0:0	8	AV_NOPTS_VALUE
stmts	65:16	65:42	7	
water	65:16	0:0	8	dm
op	65:18	0:0	8	->
water	65:20	0:0	8	start_pts
op	65:30	0:0	8	=
water	65:32	0:0	8	frame
op	65:37	0:0	8	->
water	65:39	0:0	8	pts
water	65:42	0:0	8	;
if	66:12	69:12	6	(dm -> ppsrc)
cond	66:16	66:20	7	dm -> ppsrc
water	66:16	0:0	8	dm
op	66:18	0:0	8	->
water	66:20	0:0	8	ppsrc
stmts	66:27	69:12	7	
water	66:27	0:0	8	{
call	67:16	67:36	8	av_frame_free
arg	67:30	67:36	9	&frame
op	67:30	0:0	10	&
water	67:31	0:0	10	frame
water	67:37	0:0	8	;
water	68:16	0:0	8	frame
op	68:22	0:0	8	=
water	68:24	0:0	8	dm
op	68:26	0:0	8	->
water	68:28	0:0	8	clean_src
op	68:37	0:0	8	[
water	68:38	0:0	8	i
op	68:39	0:0	8	]
water	68:40	0:0	8	;
water	69:12	0:0	8	}
water	70:12	0:0	6	frame
op	70:17	0:0	6	->
water	70:19	0:0	6	pts
op	70:23	0:0	6	=
water	70:25	0:0	6	outlink
op	70:32	0:0	6	->
water	70:34	0:0	6	frame_count
op	70:46	0:0	6	*
water	70:48	0:0	6	dm
op	70:50	0:0	6	->
water	70:52	0:0	6	ts_unit
op	70:60	0:0	6	+
water	71:25	0:0	6	(
water	71:26	0:0	6	dm
op	71:28	0:0	6	->
water	71:30	0:0	6	start_pts
op	71:40	0:0	6	==
water	71:43	0:0	6	AV_NOPTS_VALUE
water	71:58	0:0	6	?
water	71:60	0:0	6	0
water	71:62	0:0	6	:
water	71:64	0:0	6	dm
op	71:66	0:0	6	->
water	71:68	0:0	6	start_pts
water	71:77	0:0	6	)
water	71:78	0:0	6	;
water	72:12	0:0	6	ret
op	72:16	0:0	6	=
call	72:18	72:48	6	ff_filter_frame
arg	72:34	72:41	7	outlink
water	72:34	0:0	8	outlink
arg	72:43	72:48	7	frame
water	72:43	0:0	8	frame
water	72:49	0:0	6	;
if	73:12	74:21	6	(ret < 0)
cond	73:16	73:22	7	ret < 0
water	73:16	0:0	8	ret
op	73:20	0:0	8	<
water	73:22	0:0	8	0
stmts	74:16	74:21	7	
break	74:16	74:21	8	
water	75:8	0:0	6	}
water	76:4	0:0	4	}
return	77:4	77:14	2	ret
water	77:11	0:0	3	ret
