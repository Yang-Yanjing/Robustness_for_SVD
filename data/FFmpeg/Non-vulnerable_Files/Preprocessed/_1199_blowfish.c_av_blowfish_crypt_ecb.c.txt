func	1:0	25:0	0	void	av_blowfish_crypt_ecb
params	1:26	0:0	1	
param	1:27	1:42	2	AVBlowfish *	ctx
param	1:44	1:56	2	uint32_t *	xl
param	1:58	1:70	2	uint32_t *	xr
param	2:27	2:38	2	int	decrypt
stmnts	0:0	24:12	1	
decl	4:4	4:19	2	uint32_t	Xl
water	4:15	0:0	2	,
decl	4:4	4:19	2	uint32_t	Xr
decl	5:4	5:9	2	int	i
water	6:4	0:0	2	Xl
op	6:7	0:0	2	=
op	6:9	0:0	2	*
water	6:10	0:0	2	xl
water	6:12	0:0	2	;
water	7:4	0:0	2	Xr
op	7:7	0:0	2	=
op	7:9	0:0	2	*
water	7:10	0:0	2	xr
water	7:12	0:0	2	;
if	8:4	15:4	2	(decrypt)
cond	8:8	8:8	3	decrypt
water	8:8	0:0	4	decrypt
stmts	8:17	15:4	3	
water	8:17	0:0	4	{
water	9:8	0:0	4	Xl
op	9:11	0:0	4	^=
water	9:14	0:0	4	ctx
op	9:17	0:0	4	->
water	9:19	0:0	4	p
op	9:20	0:0	4	[
water	9:21	0:0	4	AV_BF_ROUNDS
op	9:34	0:0	4	+
water	9:36	0:0	4	1
op	9:37	0:0	4	]
water	9:38	0:0	4	;
for	10:8	13:8	4	(i = AV_BF_ROUNDS ;i > 0;i -= 2)
forinit	10:13	10:29	5	i = AV_BF_ROUNDS ;
water	10:13	0:0	6	i
op	10:15	0:0	6	=
water	10:17	0:0	6	AV_BF_ROUNDS
water	10:29	0:0	6	;
cond	10:31	10:35	5	i > 0
water	10:31	0:0	6	i
op	10:33	0:0	6	>
water	10:35	0:0	6	0
forexpr	10:38	10:41	5	i -= 2
water	10:38	0:0	6	i
op	10:39	0:0	6	-=
water	10:41	0:0	6	2
stmts	10:44	13:8	5	
water	10:44	0:0	6	{
call	11:12	11:33	6	F
arg	11:14	11:16	7	Xl
water	11:14	0:0	8	Xl
arg	11:18	11:20	7	Xr
water	11:18	0:0	8	Xr
arg	11:22	11:33	7	ctx->p[i]
water	11:22	0:0	8	ctx
op	11:25	0:0	8	->
water	11:27	0:0	8	p
op	11:28	0:0	8	[
water	11:29	0:0	8	i
op	11:32	0:0	8	]
water	11:34	0:0	6	;
call	12:12	12:33	6	F
arg	12:14	12:16	7	Xr
water	12:14	0:0	8	Xr
arg	12:18	12:20	7	Xl
water	12:18	0:0	8	Xl
arg	12:22	12:33	7	ctx->p[i-1]
water	12:22	0:0	8	ctx
op	12:25	0:0	8	->
water	12:27	0:0	8	p
op	12:28	0:0	8	[
water	12:29	0:0	8	i
op	12:30	0:0	8	-
water	12:31	0:0	8	1
op	12:32	0:0	8	]
water	12:34	0:0	6	;
water	13:8	0:0	6	}
water	14:8	0:0	4	Xr
op	14:11	0:0	4	^=
water	14:14	0:0	4	ctx
op	14:17	0:0	4	->
water	14:19	0:0	4	p
op	14:20	0:0	4	[
water	14:21	0:0	4	0
op	14:22	0:0	4	]
water	14:23	0:0	4	;
water	15:4	0:0	4	}
else	15:6	22:4	2
stmts	15:11	22:4	3	
water	15:11	0:0	4	{
water	16:8	0:0	4	Xl
op	16:11	0:0	4	^=
water	16:14	0:0	4	ctx
op	16:17	0:0	4	->
water	16:19	0:0	4	p
op	16:20	0:0	4	[
water	16:21	0:0	4	0
op	16:22	0:0	4	]
water	16:23	0:0	4	;
for	17:8	20:8	4	(i = 1 ;i < AV_BF_ROUNDS + 1;i += 2)
forinit	17:13	17:18	5	i = 1 ;
water	17:13	0:0	6	i
op	17:15	0:0	6	=
water	17:17	0:0	6	1
water	17:18	0:0	6	;
cond	17:20	17:37	5	i < AV_BF_ROUNDS + 1
water	17:20	0:0	6	i
op	17:22	0:0	6	<
water	17:24	0:0	6	AV_BF_ROUNDS
op	17:36	0:0	6	+
water	17:37	0:0	6	1
forexpr	17:40	17:43	5	i += 2
water	17:40	0:0	6	i
op	17:41	0:0	6	+=
water	17:43	0:0	6	2
stmts	17:45	20:8	5	
water	17:45	0:0	6	{
call	18:12	18:33	6	F
arg	18:14	18:16	7	Xl
water	18:14	0:0	8	Xl
arg	18:18	18:20	7	Xr
water	18:18	0:0	8	Xr
arg	18:22	18:33	7	ctx->p[i]
water	18:22	0:0	8	ctx
op	18:25	0:0	8	->
water	18:27	0:0	8	p
op	18:28	0:0	8	[
water	18:29	0:0	8	i
op	18:32	0:0	8	]
water	18:34	0:0	6	;
call	19:12	19:33	6	F
arg	19:14	19:16	7	Xr
water	19:14	0:0	8	Xr
arg	19:18	19:20	7	Xl
water	19:18	0:0	8	Xl
arg	19:22	19:33	7	ctx->p[i+1]
water	19:22	0:0	8	ctx
op	19:25	0:0	8	->
water	19:27	0:0	8	p
op	19:28	0:0	8	[
water	19:29	0:0	8	i
op	19:30	0:0	8	+
water	19:31	0:0	8	1
op	19:32	0:0	8	]
water	19:34	0:0	6	;
water	20:8	0:0	6	}
water	21:8	0:0	4	Xr
op	21:11	0:0	4	^=
water	21:14	0:0	4	ctx
op	21:17	0:0	4	->
water	21:19	0:0	4	p
op	21:20	0:0	4	[
water	21:21	0:0	4	AV_BF_ROUNDS
op	21:34	0:0	4	+
water	21:36	0:0	4	1
op	21:37	0:0	4	]
water	21:38	0:0	4	;
water	22:4	0:0	4	}
op	23:4	0:0	2	*
water	23:5	0:0	2	xl
op	23:8	0:0	2	=
water	23:10	0:0	2	Xr
water	23:12	0:0	2	;
op	24:4	0:0	2	*
water	24:5	0:0	2	xr
op	24:8	0:0	2	=
water	24:10	0:0	2	Xl
water	24:12	0:0	2	;
