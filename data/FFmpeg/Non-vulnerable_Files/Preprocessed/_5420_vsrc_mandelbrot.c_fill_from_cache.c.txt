func	1:0	17:0	0	static void	fill_from_cache
params	1:27	0:0	1	
param	1:28	1:48	2	AVFilterContext *	ctx
param	1:50	1:65	2	uint32_t *	color
param	1:67	1:79	2	int *	in_cidx
param	1:81	1:94	2	int *	out_cidx
param	1:96	1:105	2	double	py
param	1:107	1:119	2	double	scale
stmnts	0:0	16:4	1	
decl	2:4	2:29	2	MBContext	*mb
op	2:18	0:0	2	=
water	2:20	0:0	2	ctx
op	2:23	0:0	2	->
water	2:25	0:0	2	priv
if	3:4	4:14	2	(mb -> morphamp)
cond	3:7	3:11	3	mb -> morphamp
water	3:7	0:0	4	mb
op	3:9	0:0	4	->
water	3:11	0:0	4	morphamp
stmts	4:8	4:14	3	
return	4:8	4:14	4	
for	5:4	16:4	2	(;* in_cidx < mb -> cache_used;( * in_cidx ) ++)
forinit	5:8	5:8	3	;
water	5:8	0:0	4	;
cond	5:10	5:25	3	* in_cidx < mb -> cache_used
op	5:10	0:0	4	*
water	5:11	0:0	4	in_cidx
op	5:19	0:0	4	<
water	5:21	0:0	4	mb
op	5:23	0:0	4	->
water	5:25	0:0	4	cache_used
forexpr	5:37	5:47	3	( * in_cidx ) ++
water	5:37	0:0	4	(
op	5:38	0:0	4	*
water	5:39	0:0	4	in_cidx
water	5:46	0:0	4	)
op	5:47	0:0	4	++
stmts	5:50	16:4	3	
water	5:50	0:0	4	{
decl	6:8	6:44	4	Point	*p
op	6:16	0:0	4	=
op	6:18	0:0	4	&
water	6:19	0:0	4	mb
op	6:21	0:0	4	->
water	6:23	0:0	4	point_cache
op	6:34	0:0	4	[
op	6:35	0:0	4	*
water	6:36	0:0	4	in_cidx
op	6:43	0:0	4	]
decl	7:8	7:13	4	int	x
if	8:8	9:17	4	(p -> p [ 1 ] > py)
cond	8:11	8:21	5	p -> p [ 1 ] > py
water	8:11	0:0	6	p
op	8:12	0:0	6	->
water	8:14	0:0	6	p
op	8:15	0:0	6	[
water	8:16	0:0	6	1
op	8:17	0:0	6	]
op	8:19	0:0	6	>
water	8:21	0:0	6	py
stmts	9:12	9:17	5	
break	9:12	9:17	6	
water	10:8	0:0	4	x
op	10:9	0:0	4	=
call	10:11	10:58	4	round
arg	10:17	10:58	5	(p->p[0]-mb->start_x)/scale+mb->w/2
water	10:17	0:0	6	(
water	10:18	0:0	6	p
op	10:19	0:0	6	->
water	10:21	0:0	6	p
op	10:22	0:0	6	[
water	10:23	0:0	6	0
op	10:24	0:0	6	]
op	10:26	0:0	6	-
water	10:28	0:0	6	mb
op	10:30	0:0	6	->
water	10:32	0:0	6	start_x
water	10:39	0:0	6	)
op	10:41	0:0	6	/
water	10:43	0:0	6	scale
op	10:49	0:0	6	+
water	10:51	0:0	6	mb
op	10:53	0:0	6	->
water	10:55	0:0	6	w
op	10:56	0:0	6	/
water	10:57	0:0	6	2
water	10:59	0:0	4	;
if	11:8	12:20	4	(x < 0 || x >= mb -> w)
cond	11:11	11:27	5	x < 0 || x >= mb -> w
water	11:11	0:0	6	x
op	11:12	0:0	6	<
water	11:13	0:0	6	0
op	11:15	0:0	6	||
water	11:18	0:0	6	x
op	11:20	0:0	6	>=
water	11:23	0:0	6	mb
op	11:25	0:0	6	->
water	11:27	0:0	6	w
stmts	12:12	12:20	5	
continue	12:12	12:20	6	
if	13:8	13:35	4	(color)
cond	13:11	13:11	5	color
water	13:11	0:0	6	color
stmts	13:18	13:35	5	
water	13:18	0:0	6	color
op	13:23	0:0	6	[
water	13:24	0:0	6	x
op	13:25	0:0	6	]
op	13:27	0:0	6	=
water	13:29	0:0	6	p
op	13:30	0:0	6	->
water	13:32	0:0	6	val
water	13:35	0:0	6	;
if	14:8	15:45	4	(out_cidx && * out_cidx < mb -> cache_allocated)
cond	14:11	14:39	5	out_cidx && * out_cidx < mb -> cache_allocated
water	14:11	0:0	6	out_cidx
op	14:20	0:0	6	&&
op	14:23	0:0	6	*
water	14:24	0:0	6	out_cidx
op	14:33	0:0	6	<
water	14:35	0:0	6	mb
op	14:37	0:0	6	->
water	14:39	0:0	6	cache_allocated
stmts	15:12	15:45	5	
water	15:12	0:0	6	mb
op	15:14	0:0	6	->
water	15:16	0:0	6	next_cache
op	15:26	0:0	6	[
water	15:27	0:0	6	(
op	15:28	0:0	6	*
water	15:29	0:0	6	out_cidx
water	15:37	0:0	6	)
op	15:38	0:0	6	++
op	15:40	0:0	6	]
op	15:41	0:0	6	=
op	15:43	0:0	6	*
water	15:44	0:0	6	p
water	15:45	0:0	6	;
water	16:4	0:0	4	}
