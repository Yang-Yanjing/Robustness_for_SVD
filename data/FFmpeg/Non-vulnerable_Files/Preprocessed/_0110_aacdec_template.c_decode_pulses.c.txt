func	1:0	21:0	0	static int	decode_pulses
params	1:24	0:0	1	
param	1:25	1:37	2	Pulse *	pulse
param	1:39	1:56	2	GetBitContext *	gb
param	2:25	2:51	2	const uint16_t *	swb_offset
param	2:53	2:64	2	int	num_swb
stmnts	0:0	20:12	1	
decl	4:4	4:20	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:20	2	int	pulse_swb
water	5:4	0:0	2	pulse
op	5:9	0:0	2	->
water	5:11	0:0	2	num_pulse
op	5:21	0:0	2	=
call	5:23	5:37	2	get_bits
arg	5:32	5:34	3	gb
water	5:32	0:0	4	gb
arg	5:36	5:37	3	2
water	5:36	0:0	4	2
op	5:39	0:0	2	+
water	5:41	0:0	2	1
water	5:42	0:0	2	;
water	6:4	0:0	2	pulse_swb
op	6:21	0:0	2	=
call	6:23	6:37	2	get_bits
arg	6:32	6:34	3	gb
water	6:32	0:0	4	gb
arg	6:36	6:37	3	6
water	6:36	0:0	4	6
water	6:38	0:0	2	;
if	7:4	8:17	2	(pulse_swb >= num_swb)
cond	7:8	7:21	3	pulse_swb >= num_swb
water	7:8	0:0	4	pulse_swb
op	7:18	0:0	4	>=
water	7:21	0:0	4	num_swb
stmts	8:8	8:17	3	
return	8:8	8:17	4	-1
op	8:15	0:0	5	-
water	8:16	0:0	5	1
water	9:4	0:0	2	pulse
op	9:9	0:0	2	->
water	9:11	0:0	2	pos
op	9:14	0:0	2	[
water	9:15	0:0	2	0
op	9:16	0:0	2	]
op	9:21	0:0	2	=
water	9:23	0:0	2	swb_offset
op	9:33	0:0	2	[
water	9:34	0:0	2	pulse_swb
op	9:43	0:0	2	]
water	9:44	0:0	2	;
water	10:4	0:0	2	pulse
op	10:9	0:0	2	->
water	10:11	0:0	2	pos
op	10:14	0:0	2	[
water	10:15	0:0	2	0
op	10:16	0:0	2	]
op	10:20	0:0	2	+=
call	10:23	10:37	2	get_bits
arg	10:32	10:34	3	gb
water	10:32	0:0	4	gb
arg	10:36	10:37	3	5
water	10:36	0:0	4	5
water	10:38	0:0	2	;
if	11:4	12:17	2	(pulse -> pos [ 0 ] >= swb_offset [ num_swb ])
cond	11:8	11:43	3	pulse -> pos [ 0 ] >= swb_offset [ num_swb ]
water	11:8	0:0	4	pulse
op	11:13	0:0	4	->
water	11:15	0:0	4	pos
op	11:18	0:0	4	[
water	11:19	0:0	4	0
op	11:20	0:0	4	]
op	11:22	0:0	4	>=
water	11:25	0:0	4	swb_offset
op	11:35	0:0	4	[
water	11:36	0:0	4	num_swb
op	11:43	0:0	4	]
stmts	12:8	12:17	3	
return	12:8	12:17	4	-1
op	12:15	0:0	5	-
water	12:16	0:0	5	1
water	13:4	0:0	2	pulse
op	13:9	0:0	2	->
water	13:11	0:0	2	amp
op	13:14	0:0	2	[
water	13:15	0:0	2	0
op	13:16	0:0	2	]
op	13:21	0:0	2	=
call	13:23	13:37	2	get_bits
arg	13:32	13:34	3	gb
water	13:32	0:0	4	gb
arg	13:36	13:37	3	4
water	13:36	0:0	4	4
water	13:38	0:0	2	;
for	14:4	19:4	2	(i = 1 ;i < pulse -> num_pulse;i ++)
forinit	14:9	14:14	3	i = 1 ;
water	14:9	0:0	4	i
op	14:11	0:0	4	=
water	14:13	0:0	4	1
water	14:14	0:0	4	;
cond	14:16	14:27	3	i < pulse -> num_pulse
water	14:16	0:0	4	i
op	14:18	0:0	4	<
water	14:20	0:0	4	pulse
op	14:25	0:0	4	->
water	14:27	0:0	4	num_pulse
forexpr	14:38	14:39	3	i ++
water	14:38	0:0	4	i
op	14:39	0:0	4	++
stmts	14:43	19:4	3	
water	14:43	0:0	4	{
water	15:8	0:0	4	pulse
op	15:13	0:0	4	->
water	15:15	0:0	4	pos
op	15:18	0:0	4	[
water	15:19	0:0	4	i
op	15:20	0:0	4	]
op	15:22	0:0	4	=
call	15:24	15:38	4	get_bits
arg	15:33	15:35	5	gb
water	15:33	0:0	6	gb
arg	15:37	15:38	5	5
water	15:37	0:0	6	5
op	15:40	0:0	4	+
water	15:42	0:0	4	pulse
op	15:47	0:0	4	->
water	15:49	0:0	4	pos
op	15:52	0:0	4	[
water	15:53	0:0	4	i
op	15:55	0:0	4	-
water	15:57	0:0	4	1
op	15:58	0:0	4	]
water	15:59	0:0	4	;
if	16:8	17:21	4	(pulse -> pos [ i ] >= swb_offset [ num_swb ])
cond	16:12	16:47	5	pulse -> pos [ i ] >= swb_offset [ num_swb ]
water	16:12	0:0	6	pulse
op	16:17	0:0	6	->
water	16:19	0:0	6	pos
op	16:22	0:0	6	[
water	16:23	0:0	6	i
op	16:24	0:0	6	]
op	16:26	0:0	6	>=
water	16:29	0:0	6	swb_offset
op	16:39	0:0	6	[
water	16:40	0:0	6	num_swb
op	16:47	0:0	6	]
stmts	17:12	17:21	5	
return	17:12	17:21	6	-1
op	17:19	0:0	7	-
water	17:20	0:0	7	1
water	18:8	0:0	4	pulse
op	18:13	0:0	4	->
water	18:15	0:0	4	amp
op	18:18	0:0	4	[
water	18:19	0:0	4	i
op	18:20	0:0	4	]
op	18:22	0:0	4	=
call	18:24	18:38	4	get_bits
arg	18:33	18:35	5	gb
water	18:33	0:0	6	gb
arg	18:37	18:38	5	4
water	18:37	0:0	6	4
water	18:39	0:0	4	;
water	19:4	0:0	4	}
return	20:4	20:12	2	0
water	20:11	0:0	3	0
