func	1:0	17:0	0	static int	color_process_command
params	1:32	0:0	1	
param	1:33	1:53	2	AVFilterContext *	ctx
param	1:55	1:70	2	const char *	cmd
param	1:72	1:88	2	const char *	args
param	2:33	2:42	2	char *	res
param	2:44	2:55	2	int	res_len
param	2:57	2:66	2	int	flags
stmnts	0:0	16:26	1	
decl	4:4	4:39	2	TestSourceContext	*test
op	4:28	0:0	2	=
water	4:30	0:0	2	ctx
op	4:33	0:0	2	->
water	4:35	0:0	2	priv
decl	5:4	5:11	2	int	ret
if	6:4	15:4	2	(!strcmp (cmd ,"color" ) || !strcmp (cmd ,"c" ))
cond	6:8	6:49	3	!strcmp (cmd ,"color" ) || !strcmp (cmd ,"c" )
op	6:8	0:0	4	!
call	6:9	6:28	4	strcmp
arg	6:16	6:19	5	cmd
water	6:16	0:0	6	cmd
arg	6:21	6:28	5	"color"
water	6:21	0:0	6	"color"
op	6:30	0:0	4	||
op	6:33	0:0	4	!
call	6:34	6:49	4	strcmp
arg	6:41	6:44	5	cmd
water	6:41	0:0	6	cmd
arg	6:46	6:49	5	"c"
water	6:46	0:0	6	"c"
stmts	6:52	15:4	3	
water	6:52	0:0	4	{
decl	7:8	7:29	4	uint8_t	color_rgba[4]
water	8:8	0:0	4	ret
op	8:12	0:0	4	=
call	8:14	8:54	4	av_parse_color
arg	8:29	8:39	5	color_rgba
water	8:29	0:0	6	color_rgba
arg	8:41	8:45	5	args
water	8:41	0:0	6	args
arg	8:47	8:49	5	-1
op	8:47	0:0	6	-
water	8:48	0:0	6	1
arg	8:51	8:54	5	ctx
water	8:51	0:0	6	ctx
water	8:55	0:0	4	;
if	9:8	10:22	4	(ret < 0)
cond	9:12	9:18	5	ret < 0
water	9:12	0:0	6	ret
op	9:16	0:0	6	<
water	9:18	0:0	6	0
stmts	10:12	10:22	5	
return	10:12	10:22	6	ret
water	10:19	0:0	7	ret
call	11:8	11:63	4	memcpy
arg	11:15	11:31	5	test->color_rgba
water	11:15	0:0	6	test
op	11:19	0:0	6	->
water	11:21	0:0	6	color_rgba
arg	11:33	11:43	5	color_rgba
water	11:33	0:0	6	color_rgba
arg	11:45	11:63	5	sizeof(color_rgba)
op	11:45	0:0	6	sizeof
water	11:51	0:0	6	(
water	11:52	0:0	6	color_rgba
water	11:62	0:0	6	)
water	11:64	0:0	4	;
call	12:8	12:65	4	ff_draw_color
arg	12:22	12:33	5	&test->draw
op	12:22	0:0	6	&
water	12:23	0:0	6	test
op	12:27	0:0	6	->
water	12:29	0:0	6	draw
arg	12:35	12:47	5	&test->color
op	12:35	0:0	6	&
water	12:36	0:0	6	test
op	12:40	0:0	6	->
water	12:42	0:0	6	color
arg	12:49	12:65	5	test->color_rgba
water	12:49	0:0	6	test
op	12:53	0:0	6	->
water	12:55	0:0	6	color_rgba
water	12:66	0:0	4	;
water	13:8	0:0	4	test
op	13:12	0:0	4	->
water	13:14	0:0	4	draw_once_reset
op	13:30	0:0	4	=
water	13:32	0:0	4	1
water	13:33	0:0	4	;
return	14:8	14:16	4	0
water	14:15	0:0	5	0
water	15:4	0:0	4	}
return	16:4	16:26	2	AVERROR(ENOSYS)
call	16:11	16:25	3	AVERROR
arg	16:19	16:25	4	ENOSYS
water	16:19	0:0	5	ENOSYS
