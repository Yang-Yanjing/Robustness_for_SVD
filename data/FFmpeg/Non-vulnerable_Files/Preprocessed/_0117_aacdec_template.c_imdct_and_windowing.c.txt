func	1:0	60:0	0	static void	imdct_and_windowing
params	1:31	0:0	1	
param	1:32	1:46	2	AACContext *	ac
param	1:48	1:73	2	SingleChannelElement *	sce
stmnts	0:0	59:4	1	
decl	3:4	3:44	2	IndividualChannelStream	*ics
op	3:33	0:0	2	=
op	3:35	0:0	2	&
water	3:36	0:0	2	sce
op	3:39	0:0	2	->
water	3:41	0:0	2	ics
decl	4:4	4:33	2	INTFLOAT	*in
op	4:20	0:0	2	=
water	4:22	0:0	2	sce
op	4:25	0:0	2	->
water	4:27	0:0	2	coeffs
decl	5:4	5:30	2	INTFLOAT	*out
op	5:20	0:0	2	=
water	5:22	0:0	2	sce
op	5:25	0:0	2	->
water	5:27	0:0	2	ret
decl	6:4	6:32	2	INTFLOAT	*saved
op	6:20	0:0	2	=
water	6:22	0:0	2	sce
op	6:25	0:0	2	->
water	6:27	0:0	2	saved
decl	7:4	7:117	2	const INTFLOAT	*swindow
op	7:33	0:0	2	=
water	7:35	0:0	2	ics
op	7:38	0:0	2	->
water	7:40	0:0	2	use_kb_window
op	7:53	0:0	2	[
water	7:54	0:0	2	0
op	7:55	0:0	2	]
water	7:57	0:0	2	?
call	7:59	7:90	3	AAC_RENAME
arg	7:70	7:90	4	ff_aac_kbd_short_128
water	7:70	0:0	5	ff_aac_kbd_short_128
water	7:92	0:0	2	:
call	7:94	7:116	3	AAC_RENAME
arg	7:105	7:116	4	ff_sine_128
water	7:105	0:0	5	ff_sine_128
decl	8:4	8:118	2	const INTFLOAT	*lwindow_prev
op	8:33	0:0	2	=
water	8:35	0:0	2	ics
op	8:38	0:0	2	->
water	8:40	0:0	2	use_kb_window
op	8:53	0:0	2	[
water	8:54	0:0	2	1
op	8:55	0:0	2	]
water	8:57	0:0	2	?
call	8:59	8:90	3	AAC_RENAME
arg	8:70	8:90	4	ff_aac_kbd_long_1024
water	8:70	0:0	5	ff_aac_kbd_long_1024
water	8:92	0:0	2	:
call	8:94	8:117	3	AAC_RENAME
arg	8:105	8:117	4	ff_sine_1024
water	8:105	0:0	5	ff_sine_1024
decl	9:4	9:117	2	const INTFLOAT	*swindow_prev
op	9:33	0:0	2	=
water	9:35	0:0	2	ics
op	9:38	0:0	2	->
water	9:40	0:0	2	use_kb_window
op	9:53	0:0	2	[
water	9:54	0:0	2	1
op	9:55	0:0	2	]
water	9:57	0:0	2	?
call	9:59	9:90	3	AAC_RENAME
arg	9:70	9:90	4	ff_aac_kbd_short_128
water	9:70	0:0	5	ff_aac_kbd_short_128
water	9:92	0:0	2	:
call	9:94	9:116	3	AAC_RENAME
arg	9:105	9:116	4	ff_sine_128
water	9:105	0:0	5	ff_sine_128
decl	10:4	10:33	2	INTFLOAT	*buf
op	10:19	0:0	2	=
water	10:21	0:0	2	ac
op	10:23	0:0	2	->
water	10:25	0:0	2	buf_mdct
decl	11:4	11:29	2	INTFLOAT	*temp
op	11:19	0:0	2	=
water	11:21	0:0	2	ac
op	11:23	0:0	2	->
water	11:25	0:0	2	temp
decl	12:4	12:9	2	int	i
if	14:4	17:4	2	(ics -> window_sequence [ 0 ] == EIGHT_SHORT_SEQUENCE)
cond	14:8	14:35	3	ics -> window_sequence [ 0 ] == EIGHT_SHORT_SEQUENCE
water	14:8	0:0	4	ics
op	14:11	0:0	4	->
water	14:13	0:0	4	window_sequence
op	14:28	0:0	4	[
water	14:29	0:0	4	0
op	14:30	0:0	4	]
op	14:32	0:0	4	==
water	14:35	0:0	4	EIGHT_SHORT_SEQUENCE
stmts	14:57	17:4	3	
water	14:57	0:0	4	{
for	15:8	16:71	4	(i = 0 ;i < 1024;i += 128)
forinit	15:13	15:18	5	i = 0 ;
water	15:13	0:0	6	i
op	15:15	0:0	6	=
water	15:17	0:0	6	0
water	15:18	0:0	6	;
cond	15:20	15:24	5	i < 1024
water	15:20	0:0	6	i
op	15:22	0:0	6	<
water	15:24	0:0	6	1024
forexpr	15:30	15:35	5	i += 128
water	15:30	0:0	6	i
op	15:32	0:0	6	+=
water	15:35	0:0	6	128
stmts	16:12	16:71	5	
call	16:12	16:70	6	ac->mdct_small.imdct_half
arg	16:38	16:53	7	&ac->mdct_small
op	16:38	0:0	8	&
water	16:39	0:0	8	ac
op	16:41	0:0	8	->
water	16:43	0:0	8	mdct_small
arg	16:55	16:62	7	buf+i
water	16:55	0:0	8	buf
op	16:59	0:0	8	+
water	16:61	0:0	8	i
arg	16:64	16:70	7	in+i
water	16:64	0:0	8	in
op	16:67	0:0	8	+
water	16:69	0:0	8	i
water	16:71	0:0	6	;
water	17:4	0:0	4	}
else	17:6	23:4	2
stmts	17:11	23:4	3	
water	17:11	0:0	4	{
call	18:8	18:46	4	ac->mdct.imdct_half
arg	18:28	18:37	5	&ac->mdct
op	18:28	0:0	6	&
water	18:29	0:0	6	ac
op	18:31	0:0	6	->
water	18:33	0:0	6	mdct
arg	18:39	18:42	5	buf
water	18:39	0:0	6	buf
arg	18:44	18:46	5	in
water	18:44	0:0	6	in
water	18:47	0:0	4	;
for	20:8	21:36	4	(i = 0 ;i < 1024;i ++)
forinit	20:13	20:16	5	i = 0 ;
water	20:13	0:0	6	i
op	20:14	0:0	6	=
water	20:15	0:0	6	0
water	20:16	0:0	6	;
cond	20:18	20:20	5	i < 1024
water	20:18	0:0	6	i
op	20:19	0:0	6	<
water	20:20	0:0	6	1024
forexpr	20:26	20:27	5	i ++
water	20:26	0:0	6	i
op	20:27	0:0	6	++
stmts	21:10	21:36	5	
water	21:10	0:0	6	buf
op	21:13	0:0	6	[
water	21:14	0:0	6	i
op	21:15	0:0	6	]
op	21:17	0:0	6	=
water	21:19	0:0	6	(
water	21:20	0:0	6	buf
op	21:23	0:0	6	[
water	21:24	0:0	6	i
op	21:25	0:0	6	]
op	21:27	0:0	6	+
water	21:29	0:0	6	4
water	21:30	0:0	6	)
op	21:32	0:0	6	>>
water	21:35	0:0	6	3
water	21:36	0:0	6	;
water	23:4	0:0	4	}
if	30:4	33:4	2	(( ics -> window_sequence [ 1 ] == ONLY_LONG_SEQUENCE || ics -> window_sequence [ 1 ] == LONG_STOP_SEQUENCE ) && ( ics -> window_sequence [ 0 ] == ONLY_LONG_SEQUENCE || ics -> window_sequence [ 0 ] == LONG_START_SEQUENCE ))
cond	30:8	31:108	3	( ics -> window_sequence [ 1 ] == ONLY_LONG_SEQUENCE || ics -> window_sequence [ 1 ] == LONG_STOP_SEQUENCE ) && ( ics -> window_sequence [ 0 ] == ONLY_LONG_SEQUENCE || ics -> window_sequence [ 0 ] == LONG_START_SEQUENCE )
water	30:8	0:0	4	(
water	30:9	0:0	4	ics
op	30:12	0:0	4	->
water	30:14	0:0	4	window_sequence
op	30:29	0:0	4	[
water	30:30	0:0	4	1
op	30:31	0:0	4	]
op	30:33	0:0	4	==
water	30:36	0:0	4	ONLY_LONG_SEQUENCE
op	30:55	0:0	4	||
water	30:58	0:0	4	ics
op	30:61	0:0	4	->
water	30:63	0:0	4	window_sequence
op	30:78	0:0	4	[
water	30:79	0:0	4	1
op	30:80	0:0	4	]
op	30:82	0:0	4	==
water	30:85	0:0	4	LONG_STOP_SEQUENCE
water	30:103	0:0	4	)
op	30:105	0:0	4	&&
water	31:12	0:0	4	(
water	31:13	0:0	4	ics
op	31:16	0:0	4	->
water	31:18	0:0	4	window_sequence
op	31:33	0:0	4	[
water	31:34	0:0	4	0
op	31:35	0:0	4	]
op	31:37	0:0	4	==
water	31:40	0:0	4	ONLY_LONG_SEQUENCE
op	31:59	0:0	4	||
water	31:62	0:0	4	ics
op	31:65	0:0	4	->
water	31:67	0:0	4	window_sequence
op	31:82	0:0	4	[
water	31:83	0:0	4	0
op	31:84	0:0	4	]
op	31:86	0:0	4	==
water	31:89	0:0	4	LONG_START_SEQUENCE
water	31:108	0:0	4	)
stmts	31:111	33:4	3	
water	31:111	0:0	4	{
call	32:8	32:108	4	ac->fdsp->vector_fmul_window
arg	32:41	32:44	5	out
water	32:41	0:0	6	out
arg	32:60	32:65	5	saved
water	32:60	0:0	6	saved
arg	32:78	32:81	5	buf
water	32:78	0:0	6	buf
arg	32:91	32:103	5	lwindow_prev
water	32:91	0:0	6	lwindow_prev
arg	32:105	32:108	5	512
water	32:105	0:0	6	512
water	32:109	0:0	4	;
water	33:4	0:0	4	}
else	33:6	46:4	2
stmts	33:11	46:4	3	
water	33:11	0:0	4	{
call	34:8	34:95	4	memcpy
arg	34:40	34:43	5	out
water	34:40	0:0	6	out
arg	34:59	34:64	5	saved
water	34:59	0:0	6	saved
arg	34:77	34:95	5	448*sizeof(*out)
water	34:77	0:0	6	448
op	34:81	0:0	6	*
op	34:83	0:0	6	sizeof
water	34:89	0:0	6	(
op	34:90	0:0	6	*
water	34:91	0:0	6	out
water	34:94	0:0	6	)
water	34:96	0:0	4	;
if	35:8	42:8	4	(ics -> window_sequence [ 0 ] == EIGHT_SHORT_SEQUENCE)
cond	35:12	35:39	5	ics -> window_sequence [ 0 ] == EIGHT_SHORT_SEQUENCE
water	35:12	0:0	6	ics
op	35:15	0:0	6	->
water	35:17	0:0	6	window_sequence
op	35:32	0:0	6	[
water	35:33	0:0	6	0
op	35:34	0:0	6	]
op	35:36	0:0	6	==
water	35:39	0:0	6	EIGHT_SHORT_SEQUENCE
stmts	35:61	42:8	5	
water	35:61	0:0	6	{
call	36:12	36:107	6	ac->fdsp->vector_fmul_window
arg	36:41	36:58	7	out+448+0*128
water	36:41	0:0	8	out
op	36:45	0:0	8	+
water	36:47	0:0	8	448
op	36:51	0:0	8	+
water	36:53	0:0	8	0
op	36:54	0:0	8	*
water	36:55	0:0	8	128
arg	36:60	36:71	7	saved+448
water	36:60	0:0	8	saved
op	36:66	0:0	8	+
water	36:68	0:0	8	448
arg	36:78	36:89	7	buf+0*128
water	36:78	0:0	8	buf
op	36:82	0:0	8	+
water	36:84	0:0	8	0
op	36:85	0:0	8	*
water	36:86	0:0	8	128
arg	36:91	36:103	7	swindow_prev
water	36:91	0:0	8	swindow_prev
arg	36:105	36:107	7	64
water	36:105	0:0	8	64
water	36:108	0:0	6	;
call	37:12	37:107	6	ac->fdsp->vector_fmul_window
arg	37:41	37:58	7	out+448+1*128
water	37:41	0:0	8	out
op	37:45	0:0	8	+
water	37:47	0:0	8	448
op	37:51	0:0	8	+
water	37:53	0:0	8	1
op	37:54	0:0	8	*
water	37:55	0:0	8	128
arg	37:60	37:76	7	buf+0*128+64
water	37:60	0:0	8	buf
op	37:64	0:0	8	+
water	37:66	0:0	8	0
op	37:67	0:0	8	*
water	37:68	0:0	8	128
op	37:72	0:0	8	+
water	37:74	0:0	8	64
arg	37:78	37:89	7	buf+1*128
water	37:78	0:0	8	buf
op	37:82	0:0	8	+
water	37:84	0:0	8	1
op	37:85	0:0	8	*
water	37:86	0:0	8	128
arg	37:91	37:98	7	swindow
water	37:91	0:0	8	swindow
arg	37:105	37:107	7	64
water	37:105	0:0	8	64
water	37:108	0:0	6	;
call	38:12	38:107	6	ac->fdsp->vector_fmul_window
arg	38:41	38:58	7	out+448+2*128
water	38:41	0:0	8	out
op	38:45	0:0	8	+
water	38:47	0:0	8	448
op	38:51	0:0	8	+
water	38:53	0:0	8	2
op	38:54	0:0	8	*
water	38:55	0:0	8	128
arg	38:60	38:76	7	buf+1*128+64
water	38:60	0:0	8	buf
op	38:64	0:0	8	+
water	38:66	0:0	8	1
op	38:67	0:0	8	*
water	38:68	0:0	8	128
op	38:72	0:0	8	+
water	38:74	0:0	8	64
arg	38:78	38:89	7	buf+2*128
water	38:78	0:0	8	buf
op	38:82	0:0	8	+
water	38:84	0:0	8	2
op	38:85	0:0	8	*
water	38:86	0:0	8	128
arg	38:91	38:98	7	swindow
water	38:91	0:0	8	swindow
arg	38:105	38:107	7	64
water	38:105	0:0	8	64
water	38:108	0:0	6	;
call	39:12	39:107	6	ac->fdsp->vector_fmul_window
arg	39:41	39:58	7	out+448+3*128
water	39:41	0:0	8	out
op	39:45	0:0	8	+
water	39:47	0:0	8	448
op	39:51	0:0	8	+
water	39:53	0:0	8	3
op	39:54	0:0	8	*
water	39:55	0:0	8	128
arg	39:60	39:76	7	buf+2*128+64
water	39:60	0:0	8	buf
op	39:64	0:0	8	+
water	39:66	0:0	8	2
op	39:67	0:0	8	*
water	39:68	0:0	8	128
op	39:72	0:0	8	+
water	39:74	0:0	8	64
arg	39:78	39:89	7	buf+3*128
water	39:78	0:0	8	buf
op	39:82	0:0	8	+
water	39:84	0:0	8	3
op	39:85	0:0	8	*
water	39:86	0:0	8	128
arg	39:91	39:98	7	swindow
water	39:91	0:0	8	swindow
arg	39:105	39:107	7	64
water	39:105	0:0	8	64
water	39:108	0:0	6	;
call	40:12	40:107	6	ac->fdsp->vector_fmul_window
arg	40:41	40:45	7	temp
water	40:41	0:0	8	temp
arg	40:60	40:76	7	buf+3*128+64
water	40:60	0:0	8	buf
op	40:64	0:0	8	+
water	40:66	0:0	8	3
op	40:67	0:0	8	*
water	40:68	0:0	8	128
op	40:72	0:0	8	+
water	40:74	0:0	8	64
arg	40:78	40:89	7	buf+4*128
water	40:78	0:0	8	buf
op	40:82	0:0	8	+
water	40:84	0:0	8	4
op	40:85	0:0	8	*
water	40:86	0:0	8	128
arg	40:91	40:98	7	swindow
water	40:91	0:0	8	swindow
arg	40:105	40:107	7	64
water	40:105	0:0	8	64
water	40:108	0:0	6	;
call	41:12	41:82	6	memcpy
arg	41:40	41:57	7	out+448+4*128
water	41:40	0:0	8	out
op	41:44	0:0	8	+
water	41:46	0:0	8	448
op	41:50	0:0	8	+
water	41:52	0:0	8	4
op	41:53	0:0	8	*
water	41:54	0:0	8	128
arg	41:59	41:63	7	temp
water	41:59	0:0	8	temp
arg	41:65	41:82	7	64*sizeof(*out)
water	41:65	0:0	8	64
op	41:68	0:0	8	*
op	41:70	0:0	8	sizeof
water	41:76	0:0	8	(
op	41:77	0:0	8	*
water	41:78	0:0	8	out
water	41:81	0:0	8	)
water	41:83	0:0	6	;
water	42:8	0:0	6	}
else	42:10	45:8	4
stmts	42:15	45:8	5	
water	42:15	0:0	6	{
call	43:12	43:107	6	ac->fdsp->vector_fmul_window
arg	43:41	43:50	7	out+448
water	43:41	0:0	8	out
op	43:45	0:0	8	+
water	43:47	0:0	8	448
arg	43:60	43:71	7	saved+448
water	43:60	0:0	8	saved
op	43:66	0:0	8	+
water	43:68	0:0	8	448
arg	43:78	43:81	7	buf
water	43:78	0:0	8	buf
arg	43:91	43:103	7	swindow_prev
water	43:91	0:0	8	swindow_prev
arg	43:105	43:107	7	64
water	43:105	0:0	8	64
water	43:108	0:0	6	;
call	44:12	44:95	6	memcpy
arg	44:40	44:49	7	out+576
water	44:40	0:0	8	out
op	44:44	0:0	8	+
water	44:46	0:0	8	576
arg	44:59	44:67	7	buf+64
water	44:59	0:0	8	buf
op	44:63	0:0	8	+
water	44:65	0:0	8	64
arg	44:77	44:95	7	448*sizeof(*out)
water	44:77	0:0	8	448
op	44:81	0:0	8	*
op	44:83	0:0	8	sizeof
water	44:89	0:0	8	(
op	44:90	0:0	8	*
water	44:91	0:0	8	out
water	44:94	0:0	8	)
water	44:96	0:0	6	;
water	45:8	0:0	6	}
water	46:4	0:0	4	}
if	48:4	54:4	2	(ics -> window_sequence [ 0 ] == EIGHT_SHORT_SEQUENCE)
cond	48:8	48:35	3	ics -> window_sequence [ 0 ] == EIGHT_SHORT_SEQUENCE
water	48:8	0:0	4	ics
op	48:11	0:0	4	->
water	48:13	0:0	4	window_sequence
op	48:28	0:0	4	[
water	48:29	0:0	4	0
op	48:30	0:0	4	]
op	48:32	0:0	4	==
water	48:35	0:0	4	EIGHT_SHORT_SEQUENCE
stmts	48:57	54:4	3	
water	48:57	0:0	4	{
call	49:8	49:87	4	memcpy
arg	49:36	49:41	5	saved
water	49:36	0:0	6	saved
arg	49:49	49:58	5	temp+64
water	49:49	0:0	6	temp
op	49:54	0:0	6	+
water	49:56	0:0	6	64
arg	49:68	49:87	5	64*sizeof(*saved)
water	49:68	0:0	6	64
op	49:71	0:0	6	*
op	49:73	0:0	6	sizeof
water	49:79	0:0	6	(
op	49:80	0:0	6	*
water	49:81	0:0	6	saved
water	49:86	0:0	6	)
water	49:88	0:0	4	;
call	50:8	50:92	4	ac->fdsp->vector_fmul_window
arg	50:37	50:47	5	saved+64
water	50:37	0:0	6	saved
op	50:43	0:0	6	+
water	50:45	0:0	6	64
arg	50:50	50:66	5	buf+4*128+64
water	50:50	0:0	6	buf
op	50:54	0:0	6	+
water	50:56	0:0	6	4
op	50:57	0:0	6	*
water	50:58	0:0	6	128
op	50:62	0:0	6	+
water	50:64	0:0	6	64
arg	50:68	50:79	5	buf+5*128
water	50:68	0:0	6	buf
op	50:72	0:0	6	+
water	50:74	0:0	6	5
op	50:75	0:0	6	*
water	50:76	0:0	6	128
arg	50:81	50:88	5	swindow
water	50:81	0:0	6	swindow
arg	50:90	50:92	5	64
water	50:90	0:0	6	64
water	50:93	0:0	4	;
call	51:8	51:92	4	ac->fdsp->vector_fmul_window
arg	51:37	51:48	5	saved+192
water	51:37	0:0	6	saved
op	51:43	0:0	6	+
water	51:45	0:0	6	192
arg	51:50	51:66	5	buf+5*128+64
water	51:50	0:0	6	buf
op	51:54	0:0	6	+
water	51:56	0:0	6	5
op	51:57	0:0	6	*
water	51:58	0:0	6	128
op	51:62	0:0	6	+
water	51:64	0:0	6	64
arg	51:68	51:79	5	buf+6*128
water	51:68	0:0	6	buf
op	51:72	0:0	6	+
water	51:74	0:0	6	6
op	51:75	0:0	6	*
water	51:76	0:0	6	128
arg	51:81	51:88	5	swindow
water	51:81	0:0	6	swindow
arg	51:90	51:92	5	64
water	51:90	0:0	6	64
water	51:93	0:0	4	;
call	52:8	52:92	4	ac->fdsp->vector_fmul_window
arg	52:37	52:48	5	saved+320
water	52:37	0:0	6	saved
op	52:43	0:0	6	+
water	52:45	0:0	6	320
arg	52:50	52:66	5	buf+6*128+64
water	52:50	0:0	6	buf
op	52:54	0:0	6	+
water	52:56	0:0	6	6
op	52:57	0:0	6	*
water	52:58	0:0	6	128
op	52:62	0:0	6	+
water	52:64	0:0	6	64
arg	52:68	52:79	5	buf+7*128
water	52:68	0:0	6	buf
op	52:72	0:0	6	+
water	52:74	0:0	6	7
op	52:75	0:0	6	*
water	52:76	0:0	6	128
arg	52:81	52:88	5	swindow
water	52:81	0:0	6	swindow
arg	52:90	52:92	5	64
water	52:90	0:0	6	64
water	52:93	0:0	4	;
call	53:8	53:87	4	memcpy
arg	53:36	53:47	5	saved+448
water	53:36	0:0	6	saved
op	53:42	0:0	6	+
water	53:44	0:0	6	448
arg	53:49	53:65	5	buf+7*128+64
water	53:49	0:0	6	buf
op	53:53	0:0	6	+
water	53:55	0:0	6	7
op	53:56	0:0	6	*
water	53:57	0:0	6	128
op	53:61	0:0	6	+
water	53:63	0:0	6	64
arg	53:68	53:87	5	64*sizeof(*saved)
water	53:68	0:0	6	64
op	53:71	0:0	6	*
op	53:73	0:0	6	sizeof
water	53:79	0:0	6	(
op	53:80	0:0	6	*
water	53:81	0:0	6	saved
water	53:86	0:0	6	)
water	53:88	0:0	4	;
water	54:4	0:0	4	}
else	54:6	57:4	2
stmts	54:11	57:4	3	
if	54:11	57:4	4	(ics -> window_sequence [ 0 ] == LONG_START_SEQUENCE)
cond	54:15	54:42	5	ics -> window_sequence [ 0 ] == LONG_START_SEQUENCE
water	54:15	0:0	6	ics
op	54:18	0:0	6	->
water	54:20	0:0	6	window_sequence
op	54:35	0:0	6	[
water	54:36	0:0	6	0
op	54:37	0:0	6	]
op	54:39	0:0	6	==
water	54:42	0:0	6	LONG_START_SEQUENCE
stmts	54:63	57:4	5	
water	54:63	0:0	6	{
call	55:8	55:87	6	memcpy
arg	55:36	55:41	7	saved
water	55:36	0:0	8	saved
arg	55:49	55:58	7	buf+512
water	55:49	0:0	8	buf
op	55:53	0:0	8	+
water	55:55	0:0	8	512
arg	55:67	55:87	7	448*sizeof(*saved)
water	55:67	0:0	8	448
op	55:71	0:0	8	*
op	55:73	0:0	8	sizeof
water	55:79	0:0	8	(
op	55:80	0:0	8	*
water	55:81	0:0	8	saved
water	55:86	0:0	8	)
water	55:88	0:0	6	;
call	56:8	56:87	6	memcpy
arg	56:36	56:47	7	saved+448
water	56:36	0:0	8	saved
op	56:42	0:0	8	+
water	56:44	0:0	8	448
arg	56:49	56:65	7	buf+7*128+64
water	56:49	0:0	8	buf
op	56:53	0:0	8	+
water	56:55	0:0	8	7
op	56:56	0:0	8	*
water	56:57	0:0	8	128
op	56:61	0:0	8	+
water	56:63	0:0	8	64
arg	56:68	56:87	7	64*sizeof(*saved)
water	56:68	0:0	8	64
op	56:71	0:0	8	*
op	56:73	0:0	8	sizeof
water	56:79	0:0	8	(
op	56:80	0:0	8	*
water	56:81	0:0	8	saved
water	56:86	0:0	8	)
water	56:88	0:0	6	;
water	57:4	0:0	6	}
else	57:6	59:4	2
stmts	57:11	59:4	3	
water	57:11	0:0	4	{
call	58:8	58:87	4	memcpy
arg	58:36	58:41	5	saved
water	58:36	0:0	6	saved
arg	58:49	58:58	5	buf+512
water	58:49	0:0	6	buf
op	58:53	0:0	6	+
water	58:55	0:0	6	512
arg	58:67	58:87	5	512*sizeof(*saved)
water	58:67	0:0	6	512
op	58:71	0:0	6	*
op	58:73	0:0	6	sizeof
water	58:79	0:0	6	(
op	58:80	0:0	6	*
water	58:81	0:0	6	saved
water	58:86	0:0	6	)
water	58:88	0:0	4	;
water	59:4	0:0	4	}
