func	2:0	31:0	0	static int	denoise_depth
params	2:24	0:0	1	
param	2:25	2:41	2	HQDN3DContext *	s
param	3:25	3:37	2	uint8_t *	src
param	3:39	3:51	2	uint8_t *	dst
param	4:25	4:43	2	uint16_t *	line_ant
param	4:45	4:69	2	uint16_t * *	frame_ant_ptr
param	5:25	5:30	2	int	w
param	5:32	5:37	2	int	h
param	5:39	5:50	2	int	sstride
param	5:52	5:63	2	int	dstride
param	6:25	6:41	2	int16_t *	spatial
param	6:43	6:60	2	int16_t *	temporal
param	6:62	6:71	2	int	depth
stmnts	0:0	30:12	1	
decl	10:4	10:13	2	long	x
water	10:10	0:0	2	,
decl	10:4	10:13	2	long	y
decl	11:4	11:40	2	uint16_t	*frame_ant
op	11:24	0:0	2	=
op	11:26	0:0	2	*
water	11:27	0:0	2	frame_ant_ptr
if	12:4	22:4	2	(! frame_ant)
cond	12:8	12:9	3	! frame_ant
op	12:8	0:0	4	!
water	12:9	0:0	4	frame_ant
stmts	12:20	22:4	3	
water	12:20	0:0	4	{
decl	13:8	13:32	4	uint8_t	*frame_src
op	13:27	0:0	4	=
water	13:29	0:0	4	src
op	14:8	0:0	4	*
water	14:9	0:0	4	frame_ant_ptr
op	14:23	0:0	4	=
water	14:25	0:0	4	frame_ant
op	14:35	0:0	4	=
call	14:37	14:74	4	av_malloc_array
arg	14:53	14:54	5	w
water	14:53	0:0	6	w
arg	14:56	14:74	5	h*sizeof(uint16_t)
water	14:56	0:0	6	h
op	14:57	0:0	6	*
op	14:58	0:0	6	sizeof
water	14:64	0:0	6	(
water	14:65	0:0	6	uint16_t
water	14:73	0:0	6	)
water	14:75	0:0	4	;
if	15:8	16:34	4	(! frame_ant)
cond	15:12	15:13	5	! frame_ant
op	15:12	0:0	6	!
water	15:13	0:0	6	frame_ant
stmts	16:12	16:34	5	
return	16:12	16:34	6	AVERROR(ENOMEM)
call	16:19	16:33	7	AVERROR
arg	16:27	16:33	8	ENOMEM
water	16:27	0:0	9	ENOMEM
for	17:8	19:38	4	(y = 0 ;y < h;y ++ , src += sstride , frame_ant += w)
forinit	17:13	17:18	5	y = 0 ;
water	17:13	0:0	6	y
op	17:15	0:0	6	=
water	17:17	0:0	6	0
water	17:18	0:0	6	;
cond	17:20	17:24	5	y < h
water	17:20	0:0	6	y
op	17:22	0:0	6	<
water	17:24	0:0	6	h
forexpr	17:27	17:61	5	y ++ , src += sstride , frame_ant += w
water	17:27	0:0	6	y
op	17:28	0:0	6	++
water	17:30	0:0	6	,
water	17:32	0:0	6	src
op	17:36	0:0	6	+=
water	17:39	0:0	6	sstride
water	17:46	0:0	6	,
water	17:48	0:0	6	frame_ant
op	17:58	0:0	6	+=
water	17:61	0:0	6	w
stmts	18:12	19:38	5	
for	18:12	19:38	6	(x = 0 ;x < w;x ++)
forinit	18:17	18:22	7	x = 0 ;
water	18:17	0:0	8	x
op	18:19	0:0	8	=
water	18:21	0:0	8	0
water	18:22	0:0	8	;
cond	18:24	18:28	7	x < w
water	18:24	0:0	8	x
op	18:26	0:0	8	<
water	18:28	0:0	8	w
forexpr	18:31	18:32	7	x ++
water	18:31	0:0	8	x
op	18:32	0:0	8	++
stmts	19:16	19:38	7	
water	19:16	0:0	8	frame_ant
op	19:25	0:0	8	[
water	19:26	0:0	8	x
op	19:27	0:0	8	]
op	19:29	0:0	8	=
call	19:31	19:37	8	LOAD
arg	19:36	19:37	9	x
water	19:36	0:0	10	x
water	19:38	0:0	8	;
water	20:8	0:0	4	src
op	20:12	0:0	4	=
water	20:14	0:0	4	frame_src
water	20:23	0:0	4	;
water	21:8	0:0	4	frame_ant
op	21:18	0:0	4	=
op	21:20	0:0	4	*
water	21:21	0:0	4	frame_ant_ptr
water	21:34	0:0	4	;
water	22:4	0:0	4	}
if	23:4	25:73	2	(spatial [ 0 ])
cond	23:8	23:17	3	spatial [ 0 ]
water	23:8	0:0	4	spatial
op	23:15	0:0	4	[
water	23:16	0:0	4	0
op	23:17	0:0	4	]
stmts	24:8	25:73	3	
call	24:8	25:72	4	denoise_spatial
arg	24:24	24:25	5	s
water	24:24	0:0	6	s
arg	24:27	24:30	5	src
water	24:27	0:0	6	src
arg	24:32	24:35	5	dst
water	24:32	0:0	6	dst
arg	24:37	24:45	5	line_ant
water	24:37	0:0	6	line_ant
arg	24:47	24:56	5	frame_ant
water	24:47	0:0	6	frame_ant
arg	25:24	25:25	5	w
water	25:24	0:0	6	w
arg	25:27	25:28	5	h
water	25:27	0:0	6	h
arg	25:30	25:37	5	sstride
water	25:30	0:0	6	sstride
arg	25:39	25:46	5	dstride
water	25:39	0:0	6	dstride
arg	25:48	25:55	5	spatial
water	25:48	0:0	6	spatial
arg	25:57	25:65	5	temporal
water	25:57	0:0	6	temporal
arg	25:67	25:72	5	depth
water	25:67	0:0	6	depth
water	25:73	0:0	4	;
else	26:4	28:65	2
stmts	27:8	28:65	3	
call	27:8	28:64	4	denoise_temporal
arg	27:25	27:28	5	src
water	27:25	0:0	6	src
arg	27:30	27:33	5	dst
water	27:30	0:0	6	dst
arg	27:35	27:44	5	frame_ant
water	27:35	0:0	6	frame_ant
arg	28:25	28:26	5	w
water	28:25	0:0	6	w
arg	28:28	28:29	5	h
water	28:28	0:0	6	h
arg	28:31	28:38	5	sstride
water	28:31	0:0	6	sstride
arg	28:40	28:47	5	dstride
water	28:40	0:0	6	dstride
arg	28:49	28:57	5	temporal
water	28:49	0:0	6	temporal
arg	28:59	28:64	5	depth
water	28:59	0:0	6	depth
water	28:65	0:0	4	;
call	29:4	29:11	2	emms_c
water	29:12	0:0	2	;
return	30:4	30:12	2	0
water	30:11	0:0	3	0
