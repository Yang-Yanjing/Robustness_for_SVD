decl	1:7	2:58	0	int	ebml_parse_elem
water	1:26	0:0	0	(
water	1:27	0:0	0	MatroskaDemuxContext
op	1:48	0:0	0	*
water	1:49	0:0	0	matroska
water	1:57	0:0	0	,
water	2:27	0:0	0	EbmlSyntax
op	2:38	0:0	0	*
water	2:39	0:0	0	syntax
water	2:45	0:0	0	,
water	2:47	0:0	0	void
op	2:52	0:0	0	*
water	2:53	0:0	0	data
water	2:57	0:0	0	)
func	3:0	18:0	0	static int	ebml_parse_id
params	3:24	0:0	1	
param	3:25	3:55	2	MatroskaDemuxContext *	matroska
param	3:57	3:75	2	EbmlSyntax *	syntax
param	4:25	4:36	2	uint32_t	id
param	4:38	4:48	2	void *	data
stmnts	0:0	17:54	1	
decl	6:4	6:9	2	int	i
for	7:4	9:17	2	(i = 0 ;syntax [ i ] . id;i ++)
forinit	7:9	7:14	3	i = 0 ;
water	7:9	0:0	4	i
op	7:11	0:0	4	=
water	7:13	0:0	4	0
water	7:14	0:0	4	;
cond	7:16	7:26	3	syntax [ i ] . id
water	7:16	0:0	4	syntax
op	7:22	0:0	4	[
water	7:23	0:0	4	i
op	7:24	0:0	4	]
op	7:25	0:0	4	.
water	7:26	0:0	4	id
forexpr	7:30	7:31	3	i ++
water	7:30	0:0	4	i
op	7:31	0:0	4	++
stmts	8:8	9:17	3	
if	8:8	9:17	4	(id == syntax [ i ] . id)
cond	8:12	8:28	5	id == syntax [ i ] . id
water	8:12	0:0	6	id
op	8:15	0:0	6	==
water	8:18	0:0	6	syntax
op	8:24	0:0	6	[
water	8:25	0:0	6	i
op	8:26	0:0	6	]
op	8:27	0:0	6	.
water	8:28	0:0	6	id
stmts	9:12	9:17	5	
break	9:12	9:17	6	
if	10:4	13:16	2	(! syntax [ i ] . id && id == MATROSKA_ID_CLUSTER && matroska -> num_levels > 0 && matroska -> levels [ matroska -> num_levels - 1 ] . length == 0 xffffffffffffff)
cond	10:8	12:62	3	! syntax [ i ] . id && id == MATROSKA_ID_CLUSTER && matroska -> num_levels > 0 && matroska -> levels [ matroska -> num_levels - 1 ] . length == 0 xffffffffffffff
op	10:8	0:0	4	!
water	10:9	0:0	4	syntax
op	10:15	0:0	4	[
water	10:16	0:0	4	i
op	10:17	0:0	4	]
op	10:18	0:0	4	.
water	10:19	0:0	4	id
op	10:22	0:0	4	&&
water	10:25	0:0	4	id
op	10:28	0:0	4	==
water	10:31	0:0	4	MATROSKA_ID_CLUSTER
op	10:51	0:0	4	&&
water	11:8	0:0	4	matroska
op	11:16	0:0	4	->
water	11:18	0:0	4	num_levels
op	11:29	0:0	4	>
water	11:31	0:0	4	0
op	11:51	0:0	4	&&
water	12:8	0:0	4	matroska
op	12:16	0:0	4	->
water	12:18	0:0	4	levels
op	12:24	0:0	4	[
water	12:25	0:0	4	matroska
op	12:33	0:0	4	->
water	12:35	0:0	4	num_levels
op	12:46	0:0	4	-
water	12:48	0:0	4	1
op	12:49	0:0	4	]
op	12:50	0:0	4	.
water	12:51	0:0	4	length
op	12:58	0:0	4	==
water	12:61	0:0	4	0
water	12:62	0:0	4	xffffffffffffff
stmts	13:8	13:16	3	
return	13:8	13:16	4	0
water	13:15	0:0	5	0
if	14:4	16:4	2	(! syntax [ i ] . id && id != EBML_ID_VOID && id != EBML_ID_CRC32)
cond	14:8	14:53	3	! syntax [ i ] . id && id != EBML_ID_VOID && id != EBML_ID_CRC32
op	14:8	0:0	4	!
water	14:9	0:0	4	syntax
op	14:15	0:0	4	[
water	14:16	0:0	4	i
op	14:17	0:0	4	]
op	14:18	0:0	4	.
water	14:19	0:0	4	id
op	14:22	0:0	4	&&
water	14:25	0:0	4	id
op	14:28	0:0	4	!=
water	14:31	0:0	4	EBML_ID_VOID
op	14:44	0:0	4	&&
water	14:47	0:0	4	id
op	14:50	0:0	4	!=
water	14:53	0:0	4	EBML_ID_CRC32
stmts	14:68	16:4	3	
water	14:68	0:0	4	{
call	15:8	15:77	4	av_log
arg	15:15	15:28	5	matroska->ctx
water	15:15	0:0	6	matroska
op	15:23	0:0	6	->
water	15:25	0:0	6	ctx
arg	15:30	15:42	5	AV_LOG_DEBUG
water	15:30	0:0	6	AV_LOG_DEBUG
arg	15:44	15:73	5	"Unknown entry 0x%"PRIX32"\n"
water	15:44	0:0	6	"Unknown entry 0x%"
water	15:63	0:0	6	PRIX32
water	15:69	0:0	6	"\n"
arg	15:75	15:77	5	id
water	15:75	0:0	6	id
water	15:78	0:0	4	;
water	16:4	0:0	4	}
return	17:4	17:54	2	ebml_parse_elem(matroska,&syntax[i],data)
call	17:11	17:53	3	ebml_parse_elem
arg	17:27	17:35	4	matroska
water	17:27	0:0	5	matroska
arg	17:37	17:47	4	&syntax[i]
op	17:37	0:0	5	&
water	17:38	0:0	5	syntax
op	17:44	0:0	5	[
water	17:45	0:0	5	i
op	17:46	0:0	5	]
arg	17:49	17:53	4	data
water	17:49	0:0	5	data
func	20:0	107:0	0	static int	ebml_parse_elem
params	20:26	0:0	1	
param	20:27	20:57	2	MatroskaDemuxContext *	matroska
param	21:27	21:45	2	EbmlSyntax *	syntax
param	21:47	21:57	2	void *	data
stmnts	23:4	106:14	1	
water	23:4	0:0	2	static
water	23:11	0:0	2	const
water	23:17	0:0	2	uint64_t
water	23:26	0:0	2	max_lengths
op	23:37	0:0	2	[
water	23:38	0:0	2	EBML_TYPE_COUNT
op	23:53	0:0	2	]
op	23:55	0:0	2	=
water	23:57	0:0	2	{
op	24:8	0:0	2	[
water	24:9	0:0	2	EBML_UINT
op	24:18	0:0	2	]
op	24:21	0:0	2	=
water	24:23	0:0	2	8
water	24:24	0:0	2	,
op	25:8	0:0	2	[
water	25:9	0:0	2	EBML_FLOAT
op	25:19	0:0	2	]
op	25:21	0:0	2	=
water	25:23	0:0	2	8
water	25:24	0:0	2	,
op	27:8	0:0	2	[
water	27:9	0:0	2	EBML_STR
op	27:17	0:0	2	]
op	27:21	0:0	2	=
water	27:23	0:0	2	0
water	27:24	0:0	2	x1000000
water	27:32	0:0	2	,
op	28:8	0:0	2	[
water	28:9	0:0	2	EBML_UTF8
op	28:18	0:0	2	]
op	28:21	0:0	2	=
water	28:23	0:0	2	0
water	28:24	0:0	2	x1000000
water	28:32	0:0	2	,
op	30:8	0:0	2	[
water	30:9	0:0	2	EBML_BIN
op	30:17	0:0	2	]
op	30:21	0:0	2	=
water	30:23	0:0	2	0
water	30:24	0:0	2	x10000000
water	30:33	0:0	2	,
water	32:4	0:0	2	}
water	32:5	0:0	2	;
decl	33:4	33:39	2	AVIOContext	*pb
op	33:20	0:0	2	=
water	33:22	0:0	2	matroska
op	33:30	0:0	2	->
water	33:32	0:0	2	ctx
op	33:35	0:0	2	->
water	33:37	0:0	2	pb
decl	34:4	34:28	2	uint32_t	id
op	34:16	0:0	2	=
water	34:18	0:0	2	syntax
op	34:24	0:0	2	->
water	34:26	0:0	2	id
decl	35:4	35:19	2	uint64_t	length
decl	36:4	36:11	2	int	res
decl	37:4	37:17	2	void	*newelem
decl	38:4	38:38	2	MatroskaLevel1Element	*level1_elem
water	39:4	0:0	2	data
op	39:9	0:0	2	=
water	39:11	0:0	2	(
water	39:12	0:0	2	char
op	39:17	0:0	2	*
water	39:18	0:0	2	)
water	39:20	0:0	2	data
op	39:25	0:0	2	+
water	39:27	0:0	2	syntax
op	39:33	0:0	2	->
water	39:35	0:0	2	data_offset
water	39:46	0:0	2	;
if	40:4	49:4	2	(syntax -> list_elem_size)
cond	40:8	40:16	3	syntax -> list_elem_size
water	40:8	0:0	4	syntax
op	40:14	0:0	4	->
water	40:16	0:0	4	list_elem_size
stmts	40:32	49:4	3	
water	40:32	0:0	4	{
decl	41:8	41:29	4	EbmlList	*list
op	41:23	0:0	4	=
water	41:25	0:0	4	data
water	42:8	0:0	4	newelem
op	42:16	0:0	4	=
call	42:18	42:88	4	av_realloc_array
arg	42:35	42:45	5	list->elem
water	42:35	0:0	6	list
op	42:39	0:0	6	->
water	42:41	0:0	6	elem
arg	42:47	42:64	5	list->nb_elem+1
water	42:47	0:0	6	list
op	42:51	0:0	6	->
water	42:53	0:0	6	nb_elem
op	42:61	0:0	6	+
water	42:63	0:0	6	1
arg	42:66	42:88	5	syntax->list_elem_size
water	42:66	0:0	6	syntax
op	42:72	0:0	6	->
water	42:74	0:0	6	list_elem_size
water	42:89	0:0	4	;
if	43:8	44:34	4	(! newelem)
cond	43:12	43:13	5	! newelem
op	43:12	0:0	6	!
water	43:13	0:0	6	newelem
stmts	44:12	44:34	5	
return	44:12	44:34	6	AVERROR(ENOMEM)
call	44:19	44:33	7	AVERROR
arg	44:27	44:33	8	ENOMEM
water	44:27	0:0	9	ENOMEM
water	45:8	0:0	4	list
op	45:12	0:0	4	->
water	45:14	0:0	4	elem
op	45:19	0:0	4	=
water	45:21	0:0	4	newelem
water	45:28	0:0	4	;
water	46:8	0:0	4	data
op	46:13	0:0	4	=
water	46:15	0:0	4	(
water	46:16	0:0	4	char
op	46:21	0:0	4	*
water	46:22	0:0	4	)
water	46:24	0:0	4	list
op	46:28	0:0	4	->
water	46:30	0:0	4	elem
op	46:35	0:0	4	+
water	46:37	0:0	4	list
op	46:41	0:0	4	->
water	46:43	0:0	4	nb_elem
op	46:51	0:0	4	*
water	46:53	0:0	4	syntax
op	46:59	0:0	4	->
water	46:61	0:0	4	list_elem_size
water	46:75	0:0	4	;
call	47:8	47:46	4	memset
arg	47:15	47:19	5	data
water	47:15	0:0	6	data
arg	47:21	47:22	5	0
water	47:21	0:0	6	0
arg	47:24	47:46	5	syntax->list_elem_size
water	47:24	0:0	6	syntax
op	47:30	0:0	6	->
water	47:32	0:0	6	list_elem_size
water	47:47	0:0	4	;
water	48:8	0:0	4	list
op	48:12	0:0	4	->
water	48:14	0:0	4	nb_elem
op	48:21	0:0	4	++
water	48:23	0:0	4	;
water	49:4	0:0	4	}
if	50:4	60:4	2	(syntax -> type != EBML_PASS && syntax -> type != EBML_STOP)
cond	50:8	50:53	3	syntax -> type != EBML_PASS && syntax -> type != EBML_STOP
water	50:8	0:0	4	syntax
op	50:14	0:0	4	->
water	50:16	0:0	4	type
op	50:21	0:0	4	!=
water	50:24	0:0	4	EBML_PASS
op	50:34	0:0	4	&&
water	50:37	0:0	4	syntax
op	50:43	0:0	4	->
water	50:45	0:0	4	type
op	50:50	0:0	4	!=
water	50:53	0:0	4	EBML_STOP
stmts	50:64	60:4	3	
water	50:64	0:0	4	{
water	51:8	0:0	4	matroska
op	51:16	0:0	4	->
water	51:18	0:0	4	current_id
op	51:29	0:0	4	=
water	51:31	0:0	4	0
water	51:32	0:0	4	;
if	52:8	53:22	4	(( res =ebml_read_length (matroska ,pb ,& length ) ) < 0)
cond	52:12	52:62	5	( res =ebml_read_length (matroska ,pb ,& length ) ) < 0
water	52:12	0:0	6	(
water	52:13	0:0	6	res
op	52:17	0:0	6	=
call	52:19	52:57	6	ebml_read_length
arg	52:36	52:44	7	matroska
water	52:36	0:0	8	matroska
arg	52:46	52:48	7	pb
water	52:46	0:0	8	pb
arg	52:50	52:57	7	&length
op	52:50	0:0	8	&
water	52:51	0:0	8	length
water	52:58	0:0	6	)
op	52:60	0:0	6	<
water	52:62	0:0	6	0
stmts	53:12	53:22	5	
return	53:12	53:22	6	res
water	53:19	0:0	7	res
if	54:8	59:8	4	(max_lengths [ syntax -> type ] && length > max_lengths [ syntax -> type ])
cond	54:12	54:74	5	max_lengths [ syntax -> type ] && length > max_lengths [ syntax -> type ]
water	54:12	0:0	6	max_lengths
op	54:23	0:0	6	[
water	54:24	0:0	6	syntax
op	54:30	0:0	6	->
water	54:32	0:0	6	type
op	54:36	0:0	6	]
op	54:38	0:0	6	&&
water	54:41	0:0	6	length
op	54:48	0:0	6	>
water	54:50	0:0	6	max_lengths
op	54:61	0:0	6	[
water	54:62	0:0	6	syntax
op	54:68	0:0	6	->
water	54:70	0:0	6	type
op	54:74	0:0	6	]
stmts	54:77	59:8	5	
water	54:77	0:0	6	{
call	55:12	57:66	6	av_log
arg	55:19	55:32	7	matroska->ctx
water	55:19	0:0	8	matroska
op	55:27	0:0	8	->
water	55:29	0:0	8	ctx
arg	55:34	55:46	7	AV_LOG_ERROR
water	55:34	0:0	8	AV_LOG_ERROR
arg	56:19	56:85	7	"Invalid length 0x%"PRIx64" > 0x%"PRIx64" for syntax element %i\n"
water	56:19	0:0	8	"Invalid length 0x%"
water	56:39	0:0	8	PRIx64
water	56:45	0:0	8	" > 0x%"
water	56:53	0:0	8	PRIx64
water	56:59	0:0	8	" for syntax element %i\n"
arg	57:19	57:25	7	length
water	57:19	0:0	8	length
arg	57:27	57:52	7	max_lengths[syntax->type]
water	57:27	0:0	8	max_lengths
op	57:38	0:0	8	[
water	57:39	0:0	8	syntax
op	57:45	0:0	8	->
water	57:47	0:0	8	type
op	57:51	0:0	8	]
arg	57:54	57:66	7	syntax->type
water	57:54	0:0	8	syntax
op	57:60	0:0	8	->
water	57:62	0:0	8	type
water	57:67	0:0	6	;
return	58:12	58:38	6	AVERROR_INVALIDDATA
water	58:19	0:0	7	AVERROR_INVALIDDATA
water	59:8	0:0	6	}
water	60:4	0:0	4	}
switch	61:4	101:4	2	(syntax -> type)
cond	61:12	61:20	3	syntax -> type
water	61:12	0:0	4	syntax
op	61:18	0:0	4	->
water	61:20	0:0	4	type
stmts	61:26	101:4	3	
water	61:26	0:0	4	{
label	62:4	62:18	4	case EBML_UINT :
water	63:8	0:0	4	res
op	63:12	0:0	4	=
call	63:14	63:45	4	ebml_read_uint
arg	63:29	63:31	5	pb
water	63:29	0:0	6	pb
arg	63:33	63:39	5	length
water	63:33	0:0	6	length
arg	63:41	63:45	5	data
water	63:41	0:0	6	data
water	63:46	0:0	4	;
break	64:8	64:13	4	
label	65:4	65:18	4	case EBML_SINT :
water	66:8	0:0	4	res
op	66:12	0:0	4	=
call	66:14	66:45	4	ebml_read_sint
arg	66:29	66:31	5	pb
water	66:29	0:0	6	pb
arg	66:33	66:39	5	length
water	66:33	0:0	6	length
arg	66:41	66:45	5	data
water	66:41	0:0	6	data
water	66:46	0:0	4	;
break	67:8	67:13	4	
label	68:4	68:19	4	case EBML_FLOAT :
water	69:8	0:0	4	res
op	69:12	0:0	4	=
call	69:14	69:46	4	ebml_read_float
arg	69:30	69:32	5	pb
water	69:30	0:0	6	pb
arg	69:34	69:40	5	length
water	69:34	0:0	6	length
arg	69:42	69:46	5	data
water	69:42	0:0	6	data
water	69:47	0:0	4	;
break	70:8	70:13	4	
label	71:4	71:17	4	case EBML_STR :
label	72:4	72:18	4	case EBML_UTF8 :
water	73:8	0:0	4	res
op	73:12	0:0	4	=
call	73:14	73:46	4	ebml_read_ascii
arg	73:30	73:32	5	pb
water	73:30	0:0	6	pb
arg	73:34	73:40	5	length
water	73:34	0:0	6	length
arg	73:42	73:46	5	data
water	73:42	0:0	6	data
water	73:47	0:0	4	;
break	74:8	74:13	4	
label	75:4	75:17	4	case EBML_BIN :
water	76:8	0:0	4	res
op	76:12	0:0	4	=
call	76:14	76:47	4	ebml_read_binary
arg	76:31	76:33	5	pb
water	76:31	0:0	6	pb
arg	76:35	76:41	5	length
water	76:35	0:0	6	length
arg	76:43	76:47	5	data
water	76:43	0:0	6	data
water	76:48	0:0	4	;
break	77:8	77:13	4	
label	78:4	78:20	4	case EBML_LEVEL1 :
label	79:4	79:18	4	case EBML_NEST :
if	80:8	81:22	4	(( res =ebml_read_master (matroska ,length ) ) < 0)
cond	80:12	80:57	5	( res =ebml_read_master (matroska ,length ) ) < 0
water	80:12	0:0	6	(
water	80:13	0:0	6	res
op	80:17	0:0	6	=
call	80:19	80:52	6	ebml_read_master
arg	80:36	80:44	7	matroska
water	80:36	0:0	8	matroska
arg	80:46	80:52	7	length
water	80:46	0:0	8	length
water	80:53	0:0	6	)
op	80:55	0:0	6	<
water	80:57	0:0	6	0
stmts	81:12	81:22	5	
return	81:12	81:22	6	res
water	81:19	0:0	7	res
if	82:8	83:66	4	(id == MATROSKA_ID_SEGMENT)
cond	82:12	82:18	5	id == MATROSKA_ID_SEGMENT
water	82:12	0:0	6	id
op	82:15	0:0	6	==
water	82:18	0:0	6	MATROSKA_ID_SEGMENT
stmts	83:12	83:66	5	
water	83:12	0:0	6	matroska
op	83:20	0:0	6	->
water	83:22	0:0	6	segment_start
op	83:36	0:0	6	=
call	83:38	83:65	6	avio_tell
arg	83:48	83:65	7	matroska->ctx->pb
water	83:48	0:0	8	matroska
op	83:56	0:0	8	->
water	83:58	0:0	8	ctx
op	83:61	0:0	8	->
water	83:63	0:0	8	pb
water	83:66	0:0	6	;
if	84:8	85:47	4	(id == MATROSKA_ID_CUES)
cond	84:12	84:18	5	id == MATROSKA_ID_CUES
water	84:12	0:0	6	id
op	84:15	0:0	6	==
water	84:18	0:0	6	MATROSKA_ID_CUES
stmts	85:12	85:47	5	
water	85:12	0:0	6	matroska
op	85:20	0:0	6	->
water	85:22	0:0	6	cues_parsing_deferred
op	85:44	0:0	6	=
water	85:46	0:0	6	0
water	85:47	0:0	6	;
if	86:8	91:8	4	(syntax -> type == EBML_LEVEL1 && ( level1_elem =matroska_find_level1_elem (matroska ,syntax -> id ) ))
cond	86:12	87:74	5	syntax -> type == EBML_LEVEL1 && ( level1_elem =matroska_find_level1_elem (matroska ,syntax -> id ) )
water	86:12	0:0	6	syntax
op	86:18	0:0	6	->
water	86:20	0:0	6	type
op	86:25	0:0	6	==
water	86:28	0:0	6	EBML_LEVEL1
op	86:40	0:0	6	&&
water	87:12	0:0	6	(
water	87:13	0:0	6	level1_elem
op	87:25	0:0	6	=
call	87:27	87:73	6	matroska_find_level1_elem
arg	87:53	87:61	7	matroska
water	87:53	0:0	8	matroska
arg	87:63	87:73	7	syntax->id
water	87:63	0:0	8	syntax
op	87:69	0:0	8	->
water	87:71	0:0	8	id
water	87:74	0:0	6	)
stmts	87:77	91:8	5	
water	87:77	0:0	6	{
if	88:12	89:74	6	(level1_elem -> parsed)
cond	88:16	88:29	7	level1_elem -> parsed
water	88:16	0:0	8	level1_elem
op	88:27	0:0	8	->
water	88:29	0:0	8	parsed
stmts	89:16	89:74	7	
call	89:16	89:73	8	av_log
arg	89:23	89:36	9	matroska->ctx
water	89:23	0:0	10	matroska
op	89:31	0:0	10	->
water	89:33	0:0	10	ctx
arg	89:38	89:50	9	AV_LOG_ERROR
water	89:38	0:0	10	AV_LOG_ERROR
arg	89:52	89:73	9	"Duplicate element\n"
water	89:52	0:0	10	"Duplicate element\n"
water	89:74	0:0	8	;
water	90:12	0:0	6	level1_elem
op	90:23	0:0	6	->
water	90:25	0:0	6	parsed
op	90:32	0:0	6	=
water	90:34	0:0	6	1
water	90:35	0:0	6	;
water	91:8	0:0	6	}
return	92:8	92:61	4	ebml_parse_nest(matroska,syntax->def.n,data)
call	92:15	92:60	5	ebml_parse_nest
arg	92:31	92:39	6	matroska
water	92:31	0:0	7	matroska
arg	92:41	92:54	6	syntax->def.n
water	92:41	0:0	7	syntax
op	92:47	0:0	7	->
water	92:49	0:0	7	def
op	92:52	0:0	7	.
water	92:53	0:0	7	n
arg	92:56	92:60	6	data
water	92:56	0:0	7	data
label	93:4	93:18	4	case EBML_PASS :
return	94:8	94:63	4	ebml_parse_id(matroska,syntax->def.n,id,data)
call	94:15	94:62	5	ebml_parse_id
arg	94:29	94:37	6	matroska
water	94:29	0:0	7	matroska
arg	94:39	94:52	6	syntax->def.n
water	94:39	0:0	7	syntax
op	94:45	0:0	7	->
water	94:47	0:0	7	def
op	94:50	0:0	7	.
water	94:51	0:0	7	n
arg	94:54	94:56	6	id
water	94:54	0:0	7	id
arg	94:58	94:62	6	data
water	94:58	0:0	7	data
label	95:4	95:18	4	case EBML_STOP :
return	96:8	96:16	4	1
water	96:15	0:0	5	1
label	97:4	97:11	4	default :
if	98:8	99:31	4	(ffio_limit (pb ,length ) != length)
cond	98:12	98:38	5	ffio_limit (pb ,length ) != length
call	98:12	98:33	6	ffio_limit
arg	98:23	98:25	7	pb
water	98:23	0:0	8	pb
arg	98:27	98:33	7	length
water	98:27	0:0	8	length
op	98:35	0:0	6	!=
water	98:38	0:0	6	length
stmts	99:12	99:31	5	
return	99:12	99:31	6	AVERROR(EIO)
call	99:19	99:30	7	AVERROR
arg	99:27	99:30	8	EIO
water	99:27	0:0	9	EIO
return	100:8	100:59	4	avio_skip(pb,length)<0?AVERROR(EIO):0
call	100:15	100:35	5	avio_skip
arg	100:25	100:27	6	pb
water	100:25	0:0	7	pb
arg	100:29	100:35	6	length
water	100:29	0:0	7	length
op	100:37	0:0	5	<
water	100:39	0:0	5	0
water	100:41	0:0	5	?
call	100:43	100:54	5	AVERROR
arg	100:51	100:54	6	EIO
water	100:51	0:0	7	EIO
water	100:56	0:0	5	:
water	100:58	0:0	5	0
water	101:4	0:0	4	}
if	102:4	103:64	2	(res == AVERROR_INVALIDDATA)
cond	102:8	102:15	3	res == AVERROR_INVALIDDATA
water	102:8	0:0	4	res
op	102:12	0:0	4	==
water	102:15	0:0	4	AVERROR_INVALIDDATA
stmts	103:8	103:64	3	
call	103:8	103:63	4	av_log
arg	103:15	103:28	5	matroska->ctx
water	103:15	0:0	6	matroska
op	103:23	0:0	6	->
water	103:25	0:0	6	ctx
arg	103:30	103:42	5	AV_LOG_ERROR
water	103:30	0:0	6	AV_LOG_ERROR
arg	103:44	103:63	5	"Invalid element\n"
water	103:44	0:0	6	"Invalid element\n"
water	103:64	0:0	4	;
else	104:4	105:59	2
stmts	104:9	105:59	3	
if	104:9	105:59	4	(res ==AVERROR (EIO ))
cond	104:13	104:31	5	res ==AVERROR (EIO )
water	104:13	0:0	6	res
op	104:17	0:0	6	==
call	104:20	104:31	6	AVERROR
arg	104:28	104:31	7	EIO
water	104:28	0:0	8	EIO
stmts	105:8	105:59	5	
call	105:8	105:58	6	av_log
arg	105:15	105:28	7	matroska->ctx
water	105:15	0:0	8	matroska
op	105:23	0:0	8	->
water	105:25	0:0	8	ctx
arg	105:30	105:42	7	AV_LOG_ERROR
water	105:30	0:0	8	AV_LOG_ERROR
arg	105:44	105:58	7	"Read error\n"
water	105:44	0:0	8	"Read error\n"
water	105:59	0:0	6	;
return	106:4	106:14	2	res
water	106:11	0:0	3	res
