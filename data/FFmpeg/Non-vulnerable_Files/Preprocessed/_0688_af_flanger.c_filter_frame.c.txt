func	1:0	53:0	0	static int	filter_frame
params	1:23	0:0	1	
param	1:24	1:44	2	AVFilterLink *	inlink
param	1:46	1:60	2	AVFrame *	frame
stmnts	0:0	52:54	1	
decl	3:4	3:38	2	AVFilterContext	*ctx
op	3:25	0:0	2	=
water	3:27	0:0	2	inlink
op	3:33	0:0	2	->
water	3:35	0:0	2	dst
decl	4:4	4:33	2	FlangerContext	*s
op	4:22	0:0	2	=
water	4:24	0:0	2	ctx
op	4:27	0:0	2	->
water	4:29	0:0	2	priv
decl	5:4	5:22	2	AVFrame	*out_frame
decl	6:4	6:15	2	int	chan
water	6:12	0:0	2	,
decl	6:4	6:15	2	int	i
if	7:4	9:4	2	(av_frame_is_writable (frame ))
cond	7:8	7:34	3	av_frame_is_writable (frame )
call	7:8	7:34	4	av_frame_is_writable
arg	7:29	7:34	5	frame
water	7:29	0:0	6	frame
stmts	7:37	9:4	3	
water	7:37	0:0	4	{
water	8:8	0:0	4	out_frame
op	8:18	0:0	4	=
water	8:20	0:0	4	frame
water	8:25	0:0	4	;
water	9:4	0:0	4	}
else	9:6	14:4	2
stmts	9:11	14:4	3	
water	9:11	0:0	4	{
water	10:8	0:0	4	out_frame
op	10:18	0:0	4	=
call	10:20	10:65	4	ff_get_audio_buffer
arg	10:40	10:46	5	inlink
water	10:40	0:0	6	inlink
arg	10:48	10:65	5	frame->nb_samples
water	10:48	0:0	6	frame
op	10:53	0:0	6	->
water	10:55	0:0	6	nb_samples
water	10:66	0:0	4	;
if	11:8	12:34	4	(! out_frame)
cond	11:12	11:13	5	! out_frame
op	11:12	0:0	6	!
water	11:13	0:0	6	out_frame
stmts	12:12	12:34	5	
return	12:12	12:34	6	AVERROR(ENOMEM)
call	12:19	12:33	7	AVERROR
arg	12:27	12:33	8	ENOMEM
water	12:27	0:0	9	ENOMEM
call	13:8	13:44	4	av_frame_copy_props
arg	13:28	13:37	5	out_frame
water	13:28	0:0	6	out_frame
arg	13:39	13:44	5	frame
water	13:39	0:0	6	frame
water	13:45	0:0	4	;
water	14:4	0:0	4	}
for	15:4	49:4	2	(i = 0 ;i < frame -> nb_samples;i ++)
forinit	15:9	15:14	3	i = 0 ;
water	15:9	0:0	4	i
op	15:11	0:0	4	=
water	15:13	0:0	4	0
water	15:14	0:0	4	;
cond	15:16	15:27	3	i < frame -> nb_samples
water	15:16	0:0	4	i
op	15:18	0:0	4	<
water	15:20	0:0	4	frame
op	15:25	0:0	4	->
water	15:27	0:0	4	nb_samples
forexpr	15:39	15:40	3	i ++
water	15:39	0:0	4	i
op	15:40	0:0	4	++
stmts	15:44	49:4	3	
water	15:44	0:0	4	{
water	16:8	0:0	4	s
op	16:9	0:0	4	->
water	16:11	0:0	4	delay_buf_pos
op	16:25	0:0	4	=
water	16:27	0:0	4	(
water	16:28	0:0	4	s
op	16:29	0:0	4	->
water	16:31	0:0	4	delay_buf_pos
op	16:45	0:0	4	+
water	16:47	0:0	4	s
op	16:48	0:0	4	->
water	16:50	0:0	4	max_samples
op	16:62	0:0	4	-
water	16:64	0:0	4	1
water	16:65	0:0	4	)
op	16:67	0:0	4	%
water	16:69	0:0	4	s
op	16:70	0:0	4	->
water	16:72	0:0	4	max_samples
water	16:83	0:0	4	;
for	17:8	47:8	4	(chan = 0 ;chan < inlink -> channels;chan ++)
forinit	17:13	17:21	5	chan = 0 ;
water	17:13	0:0	6	chan
op	17:18	0:0	6	=
water	17:20	0:0	6	0
water	17:21	0:0	6	;
cond	17:23	17:38	5	chan < inlink -> channels
water	17:23	0:0	6	chan
op	17:28	0:0	6	<
water	17:30	0:0	6	inlink
op	17:36	0:0	6	->
water	17:38	0:0	6	channels
forexpr	17:48	17:52	5	chan ++
water	17:48	0:0	6	chan
op	17:52	0:0	6	++
stmts	17:56	47:8	5	
water	17:56	0:0	6	{
decl	18:12	18:62	6	double	*src
op	18:24	0:0	6	=
water	18:26	0:0	6	(
water	18:27	0:0	6	double
op	18:34	0:0	6	*
water	18:35	0:0	6	)
water	18:36	0:0	6	frame
op	18:41	0:0	6	->
water	18:43	0:0	6	extended_data
op	18:56	0:0	6	[
water	18:57	0:0	6	chan
op	18:61	0:0	6	]
decl	19:12	19:66	6	double	*dst
op	19:24	0:0	6	=
water	19:26	0:0	6	(
water	19:27	0:0	6	double
op	19:34	0:0	6	*
water	19:35	0:0	6	)
water	19:36	0:0	6	out_frame
op	19:45	0:0	6	->
water	19:47	0:0	6	extended_data
op	19:60	0:0	6	[
water	19:61	0:0	6	chan
op	19:65	0:0	6	]
decl	20:12	20:39	6	double	delayed_0
water	20:28	0:0	6	,
decl	20:12	20:39	6	double	delayed_1
decl	21:12	21:26	6	double	delayed
decl	22:12	22:26	6	double	in
water	22:21	0:0	6	,
decl	22:12	22:26	6	double	out
decl	23:12	23:76	6	int	channel_phase
op	23:30	0:0	6	=
water	23:32	0:0	6	chan
op	23:37	0:0	6	*
water	23:39	0:0	6	s
op	23:40	0:0	6	->
water	23:42	0:0	6	lfo_length
op	23:53	0:0	6	*
water	23:55	0:0	6	s
op	23:56	0:0	6	->
water	23:58	0:0	6	channel_phase
op	23:72	0:0	6	+
op	23:74	0:0	6	.
water	23:75	0:0	6	5
decl	24:12	24:79	6	double	delay
op	24:25	0:0	6	=
water	24:27	0:0	6	s
op	24:28	0:0	6	->
water	24:30	0:0	6	lfo
op	24:33	0:0	6	[
water	24:34	0:0	6	(
water	24:35	0:0	6	s
op	24:36	0:0	6	->
water	24:38	0:0	6	lfo_pos
op	24:46	0:0	6	+
water	24:48	0:0	6	channel_phase
water	24:61	0:0	6	)
op	24:63	0:0	6	%
water	24:65	0:0	6	s
op	24:66	0:0	6	->
water	24:68	0:0	6	lfo_length
op	24:78	0:0	6	]
decl	25:12	25:38	6	int	int_delay
op	25:26	0:0	6	=
water	25:28	0:0	6	(
water	25:29	0:0	6	int
water	25:32	0:0	6	)
water	25:33	0:0	6	delay
decl	26:12	26:51	6	double	frac_delay
op	26:30	0:0	6	=
call	26:32	26:50	7	modf
arg	26:37	26:42	8	delay
water	26:37	0:0	9	delay
arg	26:44	26:50	8	&delay
op	26:44	0:0	9	&
water	26:45	0:0	9	delay
decl	27:12	27:66	6	double	*delay_buffer
op	27:33	0:0	6	=
water	27:35	0:0	6	(
water	27:36	0:0	6	double
op	27:43	0:0	6	*
water	27:44	0:0	6	)
water	27:45	0:0	6	s
op	27:46	0:0	6	->
water	27:48	0:0	6	delay_buffer
op	27:60	0:0	6	[
water	27:61	0:0	6	chan
op	27:65	0:0	6	]
water	28:12	0:0	6	in
op	28:15	0:0	6	=
water	28:17	0:0	6	src
op	28:20	0:0	6	[
water	28:21	0:0	6	i
op	28:22	0:0	6	]
water	28:23	0:0	6	;
water	29:12	0:0	6	delay_buffer
op	29:24	0:0	6	[
water	29:25	0:0	6	s
op	29:26	0:0	6	->
water	29:28	0:0	6	delay_buf_pos
op	29:41	0:0	6	]
op	29:43	0:0	6	=
water	29:45	0:0	6	in
op	29:48	0:0	6	+
water	29:50	0:0	6	s
op	29:51	0:0	6	->
water	29:53	0:0	6	delay_last
op	29:63	0:0	6	[
water	29:64	0:0	6	chan
op	29:68	0:0	6	]
op	29:70	0:0	6	*
water	30:59	0:0	6	s
op	30:60	0:0	6	->
water	30:62	0:0	6	feedback_gain
water	30:75	0:0	6	;
water	31:12	0:0	6	delayed_0
op	31:22	0:0	6	=
water	31:24	0:0	6	delay_buffer
op	31:36	0:0	6	[
water	31:37	0:0	6	(
water	31:38	0:0	6	s
op	31:39	0:0	6	->
water	31:41	0:0	6	delay_buf_pos
op	31:55	0:0	6	+
water	31:57	0:0	6	int_delay
op	31:66	0:0	6	++
water	31:68	0:0	6	)
op	31:70	0:0	6	%
water	31:72	0:0	6	s
op	31:73	0:0	6	->
water	31:75	0:0	6	max_samples
op	31:86	0:0	6	]
water	31:87	0:0	6	;
water	32:12	0:0	6	delayed_1
op	32:22	0:0	6	=
water	32:24	0:0	6	delay_buffer
op	32:36	0:0	6	[
water	32:37	0:0	6	(
water	32:38	0:0	6	s
op	32:39	0:0	6	->
water	32:41	0:0	6	delay_buf_pos
op	32:55	0:0	6	+
water	32:57	0:0	6	int_delay
op	32:66	0:0	6	++
water	32:68	0:0	6	)
op	32:70	0:0	6	%
water	32:72	0:0	6	s
op	32:73	0:0	6	->
water	32:75	0:0	6	max_samples
op	32:86	0:0	6	]
water	32:87	0:0	6	;
if	33:12	35:12	6	(s -> interpolation == INTERPOLATION_LINEAR)
cond	33:16	33:36	7	s -> interpolation == INTERPOLATION_LINEAR
water	33:16	0:0	8	s
op	33:17	0:0	8	->
water	33:19	0:0	8	interpolation
op	33:33	0:0	8	==
water	33:36	0:0	8	INTERPOLATION_LINEAR
stmts	33:58	35:12	7	
water	33:58	0:0	8	{
water	34:16	0:0	8	delayed
op	34:24	0:0	8	=
water	34:26	0:0	8	delayed_0
op	34:36	0:0	8	+
water	34:38	0:0	8	(
water	34:39	0:0	8	delayed_1
op	34:49	0:0	8	-
water	34:51	0:0	8	delayed_0
water	34:60	0:0	8	)
op	34:62	0:0	8	*
water	34:64	0:0	8	frac_delay
water	34:74	0:0	8	;
water	35:12	0:0	8	}
else	35:14	43:12	6
stmts	35:19	43:12	7	
water	35:19	0:0	8	{
decl	36:16	36:27	8	double	a
water	36:24	0:0	8	,
decl	36:16	36:27	8	double	b
decl	37:16	37:98	8	double	delayed_2
op	37:33	0:0	8	=
water	37:35	0:0	8	delay_buffer
op	37:47	0:0	8	[
water	37:48	0:0	8	(
water	37:49	0:0	8	s
op	37:50	0:0	8	->
water	37:52	0:0	8	delay_buf_pos
op	37:66	0:0	8	+
water	37:68	0:0	8	int_delay
op	37:77	0:0	8	++
water	37:79	0:0	8	)
op	37:81	0:0	8	%
water	37:83	0:0	8	s
op	37:84	0:0	8	->
water	37:86	0:0	8	max_samples
op	37:97	0:0	8	]
water	38:16	0:0	8	delayed_2
op	38:26	0:0	8	-=
water	38:29	0:0	8	delayed_0
water	38:38	0:0	8	;
water	39:16	0:0	8	delayed_1
op	39:26	0:0	8	-=
water	39:29	0:0	8	delayed_0
water	39:38	0:0	8	;
water	40:16	0:0	8	a
op	40:18	0:0	8	=
water	40:20	0:0	8	delayed_2
op	40:30	0:0	8	*
op	40:32	0:0	8	.
water	40:33	0:0	8	5
op	40:35	0:0	8	-
water	40:37	0:0	8	delayed_1
water	40:46	0:0	8	;
water	41:16	0:0	8	b
op	41:18	0:0	8	=
water	41:20	0:0	8	delayed_1
op	41:30	0:0	8	*
water	41:33	0:0	8	2
op	41:35	0:0	8	-
water	41:37	0:0	8	delayed_2
op	41:47	0:0	8	*
op	41:48	0:0	8	.
water	41:49	0:0	8	5
water	41:50	0:0	8	;
water	42:16	0:0	8	delayed
op	42:24	0:0	8	=
water	42:26	0:0	8	delayed_0
op	42:36	0:0	8	+
water	42:38	0:0	8	(
water	42:39	0:0	8	a
op	42:41	0:0	8	*
water	42:43	0:0	8	frac_delay
op	42:54	0:0	8	+
water	42:56	0:0	8	b
water	42:57	0:0	8	)
op	42:59	0:0	8	*
water	42:61	0:0	8	frac_delay
water	42:71	0:0	8	;
water	43:12	0:0	8	}
water	44:12	0:0	6	s
op	44:13	0:0	6	->
water	44:15	0:0	6	delay_last
op	44:25	0:0	6	[
water	44:26	0:0	6	chan
op	44:30	0:0	6	]
op	44:32	0:0	6	=
water	44:34	0:0	6	delayed
water	44:41	0:0	6	;
water	45:12	0:0	6	out
op	45:16	0:0	6	=
water	45:18	0:0	6	in
op	45:21	0:0	6	*
water	45:23	0:0	6	s
op	45:24	0:0	6	->
water	45:26	0:0	6	in_gain
op	45:34	0:0	6	+
water	45:36	0:0	6	delayed
op	45:44	0:0	6	*
water	45:46	0:0	6	s
op	45:47	0:0	6	->
water	45:49	0:0	6	delay_gain
water	45:59	0:0	6	;
water	46:12	0:0	6	dst
op	46:15	0:0	6	[
water	46:16	0:0	6	i
op	46:17	0:0	6	]
op	46:19	0:0	6	=
water	46:21	0:0	6	out
water	46:24	0:0	6	;
water	47:8	0:0	6	}
water	48:8	0:0	4	s
op	48:9	0:0	4	->
water	48:11	0:0	4	lfo_pos
op	48:19	0:0	4	=
water	48:21	0:0	4	(
water	48:22	0:0	4	s
op	48:23	0:0	4	->
water	48:25	0:0	4	lfo_pos
op	48:33	0:0	4	+
water	48:35	0:0	4	1
water	48:36	0:0	4	)
op	48:38	0:0	4	%
water	48:40	0:0	4	s
op	48:41	0:0	4	->
water	48:43	0:0	4	lfo_length
water	48:53	0:0	4	;
water	49:4	0:0	4	}
if	50:4	51:29	2	(frame != out_frame)
cond	50:8	50:17	3	frame != out_frame
water	50:8	0:0	4	frame
op	50:14	0:0	4	!=
water	50:17	0:0	4	out_frame
stmts	51:8	51:29	3	
call	51:8	51:28	4	av_frame_free
arg	51:22	51:28	5	&frame
op	51:22	0:0	6	&
water	51:23	0:0	6	frame
water	51:29	0:0	4	;
return	52:4	52:54	2	ff_filter_frame(ctx->outputs[0],out_frame)
call	52:11	52:53	3	ff_filter_frame
arg	52:27	52:42	4	ctx->outputs[0]
water	52:27	0:0	5	ctx
op	52:30	0:0	5	->
water	52:32	0:0	5	outputs
op	52:39	0:0	5	[
water	52:40	0:0	5	0
op	52:41	0:0	5	]
arg	52:44	52:53	4	out_frame
water	52:44	0:0	5	out_frame
