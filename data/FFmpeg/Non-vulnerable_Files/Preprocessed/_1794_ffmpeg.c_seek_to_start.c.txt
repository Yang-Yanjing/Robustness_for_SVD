func	1:0	51:0	0	static int	seek_to_start
params	1:24	0:0	1	
param	1:25	1:41	2	InputFile *	ifile
param	1:43	1:62	2	AVFormatContext *	is
stmnts	0:0	50:14	1	
decl	3:4	3:20	2	InputStream	*ist
decl	4:4	4:25	2	AVCodecContext	*avctx
decl	5:4	5:29	2	int	i
water	5:9	0:0	2	,
decl	5:4	5:29	2	int	ret
water	5:14	0:0	2	,
decl	5:4	5:29	2	int	has_audio
op	5:26	0:0	2	=
water	5:28	0:0	2	0
decl	6:4	6:24	2	int64_t	duration
op	6:21	0:0	2	=
water	6:23	0:0	2	0
water	7:4	0:0	2	ret
op	7:8	0:0	2	=
call	7:10	7:49	2	av_seek_frame
arg	7:24	7:26	3	is
water	7:24	0:0	4	is
arg	7:28	7:30	3	-1
op	7:28	0:0	4	-
water	7:29	0:0	4	1
arg	7:32	7:46	3	is->start_time
water	7:32	0:0	4	is
op	7:34	0:0	4	->
water	7:36	0:0	4	start_time
arg	7:48	7:49	3	0
water	7:48	0:0	4	0
water	7:50	0:0	2	;
if	8:4	9:18	2	(ret < 0)
cond	8:8	8:14	3	ret < 0
water	8:8	0:0	4	ret
op	8:12	0:0	4	<
water	8:14	0:0	4	0
stmts	9:8	9:18	3	
return	9:8	9:18	4	ret
water	9:15	0:0	5	ret
for	10:4	23:4	2	(i = 0 ;i < ifile -> nb_streams;i ++)
forinit	10:9	10:14	3	i = 0 ;
water	10:9	0:0	4	i
op	10:11	0:0	4	=
water	10:13	0:0	4	0
water	10:14	0:0	4	;
cond	10:16	10:27	3	i < ifile -> nb_streams
water	10:16	0:0	4	i
op	10:18	0:0	4	<
water	10:20	0:0	4	ifile
op	10:25	0:0	4	->
water	10:27	0:0	4	nb_streams
forexpr	10:39	10:40	3	i ++
water	10:39	0:0	4	i
op	10:40	0:0	4	++
stmts	10:44	23:4	3	
water	10:44	0:0	4	{
water	11:8	0:0	4	ist
op	11:14	0:0	4	=
water	11:16	0:0	4	input_streams
op	11:29	0:0	4	[
water	11:30	0:0	4	ifile
op	11:35	0:0	4	->
water	11:37	0:0	4	ist_index
op	11:47	0:0	4	+
water	11:49	0:0	4	i
op	11:50	0:0	4	]
water	11:51	0:0	4	;
water	12:8	0:0	4	avctx
op	12:14	0:0	4	=
water	12:16	0:0	4	ist
op	12:19	0:0	4	->
water	12:21	0:0	4	dec_ctx
water	12:28	0:0	4	;
if	14:8	17:8	4	(ist -> decoding_needed)
cond	14:12	14:17	5	ist -> decoding_needed
water	14:12	0:0	6	ist
op	14:15	0:0	6	->
water	14:17	0:0	6	decoding_needed
stmts	14:34	17:8	5	
water	14:34	0:0	6	{
call	15:12	15:45	6	process_input_packet
arg	15:33	15:36	7	ist
water	15:33	0:0	8	ist
arg	15:38	15:42	7	NULL
water	15:38	0:0	8	NULL
arg	15:44	15:45	7	1
water	15:44	0:0	8	1
water	15:46	0:0	6	;
call	16:12	16:39	6	avcodec_flush_buffers
arg	16:34	16:39	7	avctx
water	16:34	0:0	8	avctx
water	16:40	0:0	6	;
water	17:8	0:0	6	}
if	21:8	22:25	4	(avctx -> codec_type == AVMEDIA_TYPE_AUDIO && ist -> nb_samples)
cond	21:12	21:60	5	avctx -> codec_type == AVMEDIA_TYPE_AUDIO && ist -> nb_samples
water	21:12	0:0	6	avctx
op	21:17	0:0	6	->
water	21:19	0:0	6	codec_type
op	21:30	0:0	6	==
water	21:33	0:0	6	AVMEDIA_TYPE_AUDIO
op	21:52	0:0	6	&&
water	21:55	0:0	6	ist
op	21:58	0:0	6	->
water	21:60	0:0	6	nb_samples
stmts	22:12	22:25	5	
water	22:12	0:0	6	has_audio
op	22:22	0:0	6	=
water	22:24	0:0	6	1
water	22:25	0:0	6	;
water	23:4	0:0	4	}
for	24:4	47:4	2	(i = 0 ;i < ifile -> nb_streams;i ++)
forinit	24:9	24:14	3	i = 0 ;
water	24:9	0:0	4	i
op	24:11	0:0	4	=
water	24:13	0:0	4	0
water	24:14	0:0	4	;
cond	24:16	24:27	3	i < ifile -> nb_streams
water	24:16	0:0	4	i
op	24:18	0:0	4	<
water	24:20	0:0	4	ifile
op	24:25	0:0	4	->
water	24:27	0:0	4	nb_streams
forexpr	24:39	24:40	3	i ++
water	24:39	0:0	4	i
op	24:40	0:0	4	++
stmts	24:44	47:4	3	
water	24:44	0:0	4	{
water	25:8	0:0	4	ist
op	25:14	0:0	4	=
water	25:16	0:0	4	input_streams
op	25:29	0:0	4	[
water	25:30	0:0	4	ifile
op	25:35	0:0	4	->
water	25:37	0:0	4	ist_index
op	25:47	0:0	4	+
water	25:49	0:0	4	i
op	25:50	0:0	4	]
water	25:51	0:0	4	;
water	26:8	0:0	4	avctx
op	26:14	0:0	4	=
water	26:16	0:0	4	ist
op	26:19	0:0	4	->
water	26:21	0:0	4	dec_ctx
water	26:28	0:0	4	;
if	27:8	33:8	4	(has_audio)
cond	27:12	27:12	5	has_audio
water	27:12	0:0	6	has_audio
stmts	27:23	33:8	5	
water	27:23	0:0	6	{
if	28:12	31:12	6	(avctx -> codec_type == AVMEDIA_TYPE_AUDIO && ist -> nb_samples)
cond	28:16	28:64	7	avctx -> codec_type == AVMEDIA_TYPE_AUDIO && ist -> nb_samples
water	28:16	0:0	8	avctx
op	28:21	0:0	8	->
water	28:23	0:0	8	codec_type
op	28:34	0:0	8	==
water	28:37	0:0	8	AVMEDIA_TYPE_AUDIO
op	28:56	0:0	8	&&
water	28:59	0:0	8	ist
op	28:62	0:0	8	->
water	28:64	0:0	8	nb_samples
stmts	28:76	31:12	7	
water	28:76	0:0	8	{
decl	29:16	29:64	8	AVRational	sample_rate
op	29:39	0:0	8	=
water	29:41	0:0	8	{
water	29:42	0:0	8	1
water	29:43	0:0	8	,
water	29:45	0:0	8	avctx
op	29:50	0:0	8	->
water	29:52	0:0	8	sample_rate
water	29:63	0:0	8	}
water	30:16	0:0	8	duration
op	30:25	0:0	8	=
call	30:27	30:88	8	av_rescale_q
arg	30:40	30:55	9	ist->nb_samples
water	30:40	0:0	10	ist
op	30:43	0:0	10	->
water	30:45	0:0	10	nb_samples
arg	30:57	30:68	9	sample_rate
water	30:57	0:0	10	sample_rate
arg	30:70	30:88	9	ist->st->time_base
water	30:70	0:0	10	ist
op	30:73	0:0	10	->
water	30:75	0:0	10	st
op	30:77	0:0	10	->
water	30:79	0:0	10	time_base
water	30:89	0:0	8	;
water	31:12	0:0	8	}
else	31:14	32:24	6
stmts	32:16	32:24	7	
continue	32:16	32:24	8	
water	33:8	0:0	6	}
else	33:10	39:8	4
stmts	33:15	39:8	5	
water	33:15	0:0	6	{
if	34:12	36:12	6	(ist -> framerate . num)
cond	34:16	34:31	7	ist -> framerate . num
water	34:16	0:0	8	ist
op	34:19	0:0	8	->
water	34:21	0:0	8	framerate
op	34:30	0:0	8	.
water	34:31	0:0	8	num
stmts	34:36	36:12	7	
water	34:36	0:0	8	{
water	35:16	0:0	8	duration
op	35:25	0:0	8	=
call	35:27	35:77	8	av_rescale_q
arg	35:40	35:41	9	1
water	35:40	0:0	10	1
arg	35:43	35:57	9	ist->framerate
water	35:43	0:0	10	ist
op	35:46	0:0	10	->
water	35:48	0:0	10	framerate
arg	35:59	35:77	9	ist->st->time_base
water	35:59	0:0	10	ist
op	35:62	0:0	10	->
water	35:64	0:0	10	st
op	35:66	0:0	10	->
water	35:68	0:0	10	time_base
water	35:78	0:0	8	;
water	36:12	0:0	8	}
else	36:14	38:12	6
stmts	36:19	38:12	7	
if	36:19	38:12	8	(ist -> st -> avg_frame_rate . num)
cond	36:23	36:47	9	ist -> st -> avg_frame_rate . num
water	36:23	0:0	10	ist
op	36:26	0:0	10	->
water	36:28	0:0	10	st
op	36:30	0:0	10	->
water	36:32	0:0	10	avg_frame_rate
op	36:46	0:0	10	.
water	36:47	0:0	10	num
stmts	36:52	38:12	9	
water	36:52	0:0	10	{
water	37:16	0:0	10	duration
op	37:25	0:0	10	=
call	37:27	37:86	10	av_rescale_q
arg	37:40	37:41	11	1
water	37:40	0:0	12	1
arg	37:43	37:66	11	ist->st->avg_frame_rate
water	37:43	0:0	12	ist
op	37:46	0:0	12	->
water	37:48	0:0	12	st
op	37:50	0:0	12	->
water	37:52	0:0	12	avg_frame_rate
arg	37:68	37:86	11	ist->st->time_base
water	37:68	0:0	12	ist
op	37:71	0:0	12	->
water	37:73	0:0	12	st
op	37:75	0:0	12	->
water	37:77	0:0	12	time_base
water	37:87	0:0	10	;
water	38:12	0:0	10	}
else	38:14	38:31	6
stmts	38:19	38:31	7	
water	38:19	0:0	8	duration
op	38:28	0:0	8	=
water	38:30	0:0	8	1
water	38:31	0:0	8	;
water	39:8	0:0	6	}
if	40:8	41:49	4	(! ifile -> duration)
cond	40:12	40:20	5	! ifile -> duration
op	40:12	0:0	6	!
water	40:13	0:0	6	ifile
op	40:18	0:0	6	->
water	40:20	0:0	6	duration
stmts	41:12	41:49	5	
water	41:12	0:0	6	ifile
op	41:17	0:0	6	->
water	41:19	0:0	6	time_base
op	41:29	0:0	6	=
water	41:31	0:0	6	ist
op	41:34	0:0	6	->
water	41:36	0:0	6	st
op	41:38	0:0	6	->
water	41:40	0:0	6	time_base
water	41:49	0:0	6	;
water	44:8	0:0	4	duration
op	44:17	0:0	4	+=
water	44:20	0:0	4	ist
op	44:23	0:0	4	->
water	44:25	0:0	4	max_pts
op	44:33	0:0	4	-
water	44:35	0:0	4	ist
op	44:38	0:0	4	->
water	44:40	0:0	4	min_pts
water	44:47	0:0	4	;
water	45:8	0:0	4	ifile
op	45:13	0:0	4	->
water	45:15	0:0	4	time_base
op	45:25	0:0	4	=
call	45:27	46:56	4	duration_max
arg	45:40	45:48	5	duration
water	45:40	0:0	6	duration
arg	45:50	45:66	5	&ifile->duration
op	45:50	0:0	6	&
water	45:51	0:0	6	ifile
op	45:56	0:0	6	->
water	45:58	0:0	6	duration
arg	45:68	45:86	5	ist->st->time_base
water	45:68	0:0	6	ist
op	45:71	0:0	6	->
water	45:73	0:0	6	st
op	45:75	0:0	6	->
water	45:77	0:0	6	time_base
arg	46:40	46:56	5	ifile->time_base
water	46:40	0:0	6	ifile
op	46:45	0:0	6	->
water	46:47	0:0	6	time_base
water	46:57	0:0	4	;
water	47:4	0:0	4	}
if	48:4	49:21	2	(ifile -> loop > 0)
cond	48:8	48:22	3	ifile -> loop > 0
water	48:8	0:0	4	ifile
op	48:13	0:0	4	->
water	48:15	0:0	4	loop
op	48:20	0:0	4	>
water	48:22	0:0	4	0
stmts	49:8	49:21	3	
water	49:8	0:0	4	ifile
op	49:13	0:0	4	->
water	49:15	0:0	4	loop
op	49:19	0:0	4	--
water	49:21	0:0	4	;
return	50:4	50:14	2	ret
water	50:11	0:0	3	ret
