func	2:15	25:0	0	int	init
params	2:23	0:0	1	
param	2:24	2:44	2	AVFilterContext *	ctx
stmnts	0:0	24:12	1	
decl	4:4	4:34	2	TelecineContext	*s
op	4:23	0:0	2	=
water	4:25	0:0	2	ctx
op	4:28	0:0	2	->
water	4:30	0:0	2	priv
decl	5:4	5:17	2	const char	*p
decl	6:4	6:15	2	int	max
op	6:12	0:0	2	=
water	6:14	0:0	2	0
if	7:4	10:4	2	(!strlen (s -> pattern ))
cond	7:8	7:26	3	!strlen (s -> pattern )
op	7:8	0:0	4	!
call	7:9	7:26	4	strlen
arg	7:16	7:26	5	s->pattern
water	7:16	0:0	6	s
op	7:17	0:0	6	->
water	7:19	0:0	6	pattern
stmts	7:29	10:4	3	
water	7:29	0:0	4	{
call	8:8	8:58	4	av_log
arg	8:15	8:18	5	ctx
water	8:15	0:0	6	ctx
arg	8:20	8:32	5	AV_LOG_ERROR
water	8:20	0:0	6	AV_LOG_ERROR
arg	8:34	8:58	5	"No pattern provided.\n"
water	8:34	0:0	6	"No pattern provided.\n"
water	8:59	0:0	4	;
return	9:8	9:34	4	AVERROR_INVALIDDATA
water	9:15	0:0	5	AVERROR_INVALIDDATA
water	10:4	0:0	4	}
for	11:4	19:4	2	(p = s -> pattern ;* p;p ++)
forinit	11:9	11:23	3	p = s -> pattern ;
water	11:9	0:0	4	p
op	11:11	0:0	4	=
water	11:13	0:0	4	s
op	11:14	0:0	4	->
water	11:16	0:0	4	pattern
water	11:23	0:0	4	;
cond	11:25	11:26	3	* p
op	11:25	0:0	4	*
water	11:26	0:0	4	p
forexpr	11:29	11:30	3	p ++
water	11:29	0:0	4	p
op	11:30	0:0	4	++
stmts	11:34	19:4	3	
water	11:34	0:0	4	{
if	12:8	15:8	4	(!av_isdigit (* p ))
cond	12:12	12:26	5	!av_isdigit (* p )
op	12:12	0:0	6	!
call	12:13	12:26	6	av_isdigit
arg	12:24	12:26	7	*p
op	12:24	0:0	8	*
water	12:25	0:0	8	p
stmts	12:29	15:8	5	
water	12:29	0:0	6	{
call	13:12	13:91	6	av_log
arg	13:19	13:22	7	ctx
water	13:19	0:0	8	ctx
arg	13:24	13:36	7	AV_LOG_ERROR
water	13:24	0:0	8	AV_LOG_ERROR
arg	13:38	13:91	7	"Provided pattern includes non-numeric characters.\n"
water	13:38	0:0	8	"Provided pattern includes non-numeric characters.\n"
water	13:92	0:0	6	;
return	14:12	14:38	6	AVERROR_INVALIDDATA
water	14:19	0:0	7	AVERROR_INVALIDDATA
water	15:8	0:0	6	}
water	16:8	0:0	4	max
op	16:12	0:0	4	=
call	16:14	16:33	4	FFMAX
arg	16:20	16:28	5	*p-'0'
op	16:20	0:0	6	*
water	16:21	0:0	6	p
op	16:23	0:0	6	-
water	16:25	0:0	6	'0'
arg	16:30	16:33	5	max
water	16:30	0:0	6	max
water	16:34	0:0	4	;
water	17:8	0:0	4	s
op	17:9	0:0	4	->
water	17:11	0:0	4	pts
op	17:14	0:0	4	.
water	17:15	0:0	4	num
op	17:19	0:0	4	+=
water	17:22	0:0	4	2
water	17:23	0:0	4	;
water	18:8	0:0	4	s
op	18:9	0:0	4	->
water	18:11	0:0	4	pts
op	18:14	0:0	4	.
water	18:15	0:0	4	den
op	18:19	0:0	4	+=
op	18:22	0:0	4	*
water	18:23	0:0	4	p
op	18:25	0:0	4	-
water	18:27	0:0	4	'0'
water	18:30	0:0	4	;
water	19:4	0:0	4	}
water	20:4	0:0	2	s
op	20:5	0:0	2	->
water	20:7	0:0	2	start_time
op	20:18	0:0	2	=
water	20:20	0:0	2	AV_NOPTS_VALUE
water	20:34	0:0	2	;
water	21:4	0:0	2	s
op	21:5	0:0	2	->
water	21:7	0:0	2	out_cnt
op	21:15	0:0	2	=
water	21:17	0:0	2	(
water	21:18	0:0	2	max
op	21:22	0:0	2	+
water	21:24	0:0	2	1
water	21:25	0:0	2	)
op	21:27	0:0	2	/
water	21:29	0:0	2	2
water	21:30	0:0	2	;
call	22:4	23:57	2	av_log
arg	22:11	22:14	3	ctx
water	22:11	0:0	4	ctx
arg	22:16	22:27	3	AV_LOG_INFO
water	22:16	0:0	4	AV_LOG_INFO
arg	22:29	22:112	3	"Telecine pattern %s yields up to %d frames per frame, pts advance factor: %d/%d\n"
water	22:29	0:0	4	"Telecine pattern %s yields up to %d frames per frame, pts advance factor: %d/%d\n"
arg	23:11	23:21	3	s->pattern
water	23:11	0:0	4	s
op	23:12	0:0	4	->
water	23:14	0:0	4	pattern
arg	23:23	23:33	3	s->out_cnt
water	23:23	0:0	4	s
op	23:24	0:0	4	->
water	23:26	0:0	4	out_cnt
arg	23:35	23:45	3	s->pts.num
water	23:35	0:0	4	s
op	23:36	0:0	4	->
water	23:38	0:0	4	pts
op	23:41	0:0	4	.
water	23:42	0:0	4	num
arg	23:47	23:57	3	s->pts.den
water	23:47	0:0	4	s
op	23:48	0:0	4	->
water	23:50	0:0	4	pts
op	23:53	0:0	4	.
water	23:54	0:0	4	den
water	23:58	0:0	2	;
return	24:4	24:12	2	0
water	24:11	0:0	3	0
