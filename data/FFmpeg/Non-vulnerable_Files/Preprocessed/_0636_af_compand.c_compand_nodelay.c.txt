func	1:0	37:0	0	static int	compand_nodelay
params	1:26	0:0	1	
param	1:27	1:47	2	AVFilterContext *	ctx
param	1:49	1:63	2	AVFrame *	frame
stmnts	0:0	36:54	1	
decl	3:4	3:36	2	CompandContext	*s
op	3:25	0:0	2	=
water	3:27	0:0	2	ctx
op	3:30	0:0	2	->
water	3:32	0:0	2	priv
decl	4:4	4:41	2	AVFilterLink	*inlink
op	4:25	0:0	2	=
water	4:27	0:0	2	ctx
op	4:30	0:0	2	->
water	4:32	0:0	2	inputs
op	4:38	0:0	2	[
water	4:39	0:0	2	0
op	4:40	0:0	2	]
decl	5:4	5:43	2	const int	channels
op	5:25	0:0	2	=
water	5:27	0:0	2	inlink
op	5:33	0:0	2	->
water	5:35	0:0	2	channels
decl	6:4	6:44	2	const int	nb_samples
op	6:25	0:0	2	=
water	6:27	0:0	2	frame
op	6:32	0:0	2	->
water	6:34	0:0	2	nb_samples
decl	7:4	7:22	2	AVFrame	*out_frame
decl	8:4	8:15	2	int	chan
water	8:12	0:0	2	,
decl	8:4	8:15	2	int	i
decl	9:4	9:11	2	int	err
if	10:4	12:4	2	(av_frame_is_writable (frame ))
cond	10:8	10:34	3	av_frame_is_writable (frame )
call	10:8	10:34	4	av_frame_is_writable
arg	10:29	10:34	5	frame
water	10:29	0:0	6	frame
stmts	10:37	12:4	3	
water	10:37	0:0	4	{
water	11:8	0:0	4	out_frame
op	11:18	0:0	4	=
water	11:20	0:0	4	frame
water	11:25	0:0	4	;
water	12:4	0:0	4	}
else	12:6	24:4	2
stmts	12:11	24:4	3	
water	12:11	0:0	4	{
water	13:8	0:0	4	out_frame
op	13:18	0:0	4	=
call	13:20	13:58	4	ff_get_audio_buffer
arg	13:40	13:46	5	inlink
water	13:40	0:0	6	inlink
arg	13:48	13:58	5	nb_samples
water	13:48	0:0	6	nb_samples
water	13:59	0:0	4	;
if	14:8	17:8	4	(! out_frame)
cond	14:12	14:13	5	! out_frame
op	14:12	0:0	6	!
water	14:13	0:0	6	out_frame
stmts	14:24	17:8	5	
water	14:24	0:0	6	{
call	15:12	15:32	6	av_frame_free
arg	15:26	15:32	7	&frame
op	15:26	0:0	8	&
water	15:27	0:0	8	frame
water	15:33	0:0	6	;
return	16:12	16:34	6	AVERROR(ENOMEM)
call	16:19	16:33	7	AVERROR
arg	16:27	16:33	8	ENOMEM
water	16:27	0:0	9	ENOMEM
water	17:8	0:0	6	}
water	18:8	0:0	4	err
op	18:12	0:0	4	=
call	18:14	18:50	4	av_frame_copy_props
arg	18:34	18:43	5	out_frame
water	18:34	0:0	6	out_frame
arg	18:45	18:50	5	frame
water	18:45	0:0	6	frame
water	18:51	0:0	4	;
if	19:8	23:8	4	(err < 0)
cond	19:12	19:18	5	err < 0
water	19:12	0:0	6	err
op	19:16	0:0	6	<
water	19:18	0:0	6	0
stmts	19:21	23:8	5	
water	19:21	0:0	6	{
call	20:12	20:36	6	av_frame_free
arg	20:26	20:36	7	&out_frame
op	20:26	0:0	8	&
water	20:27	0:0	8	out_frame
water	20:37	0:0	6	;
call	21:12	21:32	6	av_frame_free
arg	21:26	21:32	7	&frame
op	21:26	0:0	8	&
water	21:27	0:0	8	frame
water	21:33	0:0	6	;
return	22:12	22:22	6	err
water	22:19	0:0	7	err
water	23:8	0:0	6	}
water	24:4	0:0	4	}
for	25:4	33:4	2	(chan = 0 ;chan < channels;chan ++)
forinit	25:9	25:17	3	chan = 0 ;
water	25:9	0:0	4	chan
op	25:14	0:0	4	=
water	25:16	0:0	4	0
water	25:17	0:0	4	;
cond	25:19	25:26	3	chan < channels
water	25:19	0:0	4	chan
op	25:24	0:0	4	<
water	25:26	0:0	4	channels
forexpr	25:36	25:40	3	chan ++
water	25:36	0:0	4	chan
op	25:40	0:0	4	++
stmts	25:44	33:4	3	
water	25:44	0:0	4	{
decl	26:8	26:64	4	const double	*src
op	26:26	0:0	4	=
water	26:28	0:0	4	(
water	26:29	0:0	4	double
op	26:36	0:0	4	*
water	26:37	0:0	4	)
water	26:38	0:0	4	frame
op	26:43	0:0	4	->
water	26:45	0:0	4	extended_data
op	26:58	0:0	4	[
water	26:59	0:0	4	chan
op	26:63	0:0	4	]
decl	27:8	27:62	4	double	*dst
op	27:20	0:0	4	=
water	27:22	0:0	4	(
water	27:23	0:0	4	double
op	27:30	0:0	4	*
water	27:31	0:0	4	)
water	27:32	0:0	4	out_frame
op	27:41	0:0	4	->
water	27:43	0:0	4	extended_data
op	27:56	0:0	4	[
water	27:57	0:0	4	chan
op	27:61	0:0	4	]
decl	28:8	28:42	4	ChanParam	*cp
op	28:22	0:0	4	=
op	28:24	0:0	4	&
water	28:25	0:0	4	s
op	28:26	0:0	4	->
water	28:28	0:0	4	channels
op	28:36	0:0	4	[
water	28:37	0:0	4	chan
op	28:41	0:0	4	]
for	29:8	32:8	4	(i = 0 ;i < nb_samples;i ++)
forinit	29:13	29:18	5	i = 0 ;
water	29:13	0:0	6	i
op	29:15	0:0	6	=
water	29:17	0:0	6	0
water	29:18	0:0	6	;
cond	29:20	29:24	5	i < nb_samples
water	29:20	0:0	6	i
op	29:22	0:0	6	<
water	29:24	0:0	6	nb_samples
forexpr	29:36	29:37	5	i ++
water	29:36	0:0	6	i
op	29:37	0:0	6	++
stmts	29:41	32:8	5	
water	29:41	0:0	6	{
call	30:12	30:42	6	update_volume
arg	30:26	30:28	7	cp
water	30:26	0:0	8	cp
arg	30:30	30:42	7	fabs(src[i])
call	30:30	30:41	8	fabs
arg	30:35	30:41	9	src[i]
water	30:35	0:0	10	src
op	30:38	0:0	10	[
water	30:39	0:0	10	i
op	30:40	0:0	10	]
water	30:43	0:0	6	;
water	31:12	0:0	6	dst
op	31:15	0:0	6	[
water	31:16	0:0	6	i
op	31:17	0:0	6	]
op	31:19	0:0	6	=
call	31:21	31:71	6	av_clipd
arg	31:30	31:64	7	src[i]*get_volume(s,cp->volume)
water	31:30	0:0	8	src
op	31:33	0:0	8	[
water	31:34	0:0	8	i
op	31:35	0:0	8	]
call	31:37	31:63	8	*get_volume
arg	31:50	31:51	9	s
water	31:50	0:0	10	s
arg	31:53	31:63	9	cp->volume
water	31:53	0:0	10	cp
op	31:55	0:0	10	->
water	31:57	0:0	10	volume
arg	31:66	31:68	7	-1
op	31:66	0:0	8	-
water	31:67	0:0	8	1
arg	31:70	31:71	7	1
water	31:70	0:0	8	1
water	31:72	0:0	6	;
water	32:8	0:0	6	}
water	33:4	0:0	4	}
if	34:4	35:29	2	(frame != out_frame)
cond	34:8	34:17	3	frame != out_frame
water	34:8	0:0	4	frame
op	34:14	0:0	4	!=
water	34:17	0:0	4	out_frame
stmts	35:8	35:29	3	
call	35:8	35:28	4	av_frame_free
arg	35:22	35:28	5	&frame
op	35:22	0:0	6	&
water	35:23	0:0	6	frame
water	35:29	0:0	4	;
return	36:4	36:54	2	ff_filter_frame(ctx->outputs[0],out_frame)
call	36:11	36:53	3	ff_filter_frame
arg	36:27	36:42	4	ctx->outputs[0]
water	36:27	0:0	5	ctx
op	36:30	0:0	5	->
water	36:32	0:0	5	outputs
op	36:39	0:0	5	[
water	36:40	0:0	5	0
op	36:41	0:0	5	]
arg	36:44	36:53	4	out_frame
water	36:44	0:0	5	out_frame
