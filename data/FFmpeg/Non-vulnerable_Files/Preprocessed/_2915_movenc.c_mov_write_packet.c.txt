func	1:0	42:0	0	static int	mov_write_packet
params	1:27	0:0	1	
param	1:28	1:46	2	AVFormatContext *	s
param	1:48	1:61	2	AVPacket *	pkt
stmnts	3:4	41:4	1	
if	3:4	6:4	2	(! pkt)
cond	3:8	3:9	3	! pkt
op	3:8	0:0	4	!
water	3:9	0:0	4	pkt
stmts	3:14	6:4	3	
water	3:14	0:0	4	{
call	4:8	4:28	4	mov_flush_fragment
arg	4:27	4:28	5	s
water	4:27	0:0	6	s
water	4:29	0:0	4	;
return	5:8	5:16	4	1
water	5:15	0:0	5	1
water	6:4	0:0	4	}
else	6:6	41:4	2
stmts	6:11	41:4	3	
water	6:11	0:0	4	{
decl	7:8	7:13	4	int	i
decl	8:8	8:41	4	MOVMuxContext	*mov
op	8:27	0:0	4	=
water	8:29	0:0	4	s
op	8:30	0:0	4	->
water	8:32	0:0	4	priv_data
if	9:8	9:32	4	(! pkt -> size)
cond	9:12	9:18	5	! pkt -> size
op	9:12	0:0	6	!
water	9:13	0:0	6	pkt
op	9:16	0:0	6	->
water	9:18	0:0	6	size
stmts	9:24	9:32	5	
return	9:24	9:32	6	0
water	9:31	0:0	7	0
for	29:8	39:8	4	(i = 0 ;i < mov -> nb_streams;i ++)
forinit	29:13	29:18	5	i = 0 ;
water	29:13	0:0	6	i
op	29:15	0:0	6	=
water	29:17	0:0	6	0
water	29:18	0:0	6	;
cond	29:20	29:29	5	i < mov -> nb_streams
water	29:20	0:0	6	i
op	29:22	0:0	6	<
water	29:24	0:0	6	mov
op	29:27	0:0	6	->
water	29:29	0:0	6	nb_streams
forexpr	29:41	29:42	5	i ++
water	29:41	0:0	6	i
op	29:42	0:0	6	++
stmts	29:46	39:8	5	
water	29:46	0:0	6	{
decl	30:12	30:43	6	MOVTrack	*trk
op	30:26	0:0	6	=
op	30:28	0:0	6	&
water	30:29	0:0	6	mov
op	30:32	0:0	6	->
water	30:34	0:0	6	tracks
op	30:40	0:0	6	[
water	30:41	0:0	6	i
op	30:42	0:0	6	]
decl	31:12	31:19	6	int	ret
if	32:12	38:12	6	(trk -> enc -> codec_id == AV_CODEC_ID_MOV_TEXT && trk -> track_duration < pkt -> dts && ( trk -> entry == 0 || ! trk -> last_sample_is_subtitle_end ))
cond	32:16	34:69	7	trk -> enc -> codec_id == AV_CODEC_ID_MOV_TEXT && trk -> track_duration < pkt -> dts && ( trk -> entry == 0 || ! trk -> last_sample_is_subtitle_end )
water	32:16	0:0	8	trk
op	32:19	0:0	8	->
water	32:21	0:0	8	enc
op	32:24	0:0	8	->
water	32:26	0:0	8	codec_id
op	32:35	0:0	8	==
water	32:38	0:0	8	AV_CODEC_ID_MOV_TEXT
op	32:59	0:0	8	&&
water	33:16	0:0	8	trk
op	33:19	0:0	8	->
water	33:21	0:0	8	track_duration
op	33:36	0:0	8	<
water	33:38	0:0	8	pkt
op	33:41	0:0	8	->
water	33:43	0:0	8	dts
op	33:47	0:0	8	&&
water	34:16	0:0	8	(
water	34:17	0:0	8	trk
op	34:20	0:0	8	->
water	34:22	0:0	8	entry
op	34:28	0:0	8	==
water	34:31	0:0	8	0
op	34:33	0:0	8	||
op	34:36	0:0	8	!
water	34:37	0:0	8	trk
op	34:40	0:0	8	->
water	34:42	0:0	8	last_sample_is_subtitle_end
water	34:69	0:0	8	)
stmts	34:72	38:12	7	
water	34:72	0:0	8	{
water	35:16	0:0	8	ret
op	35:20	0:0	8	=
call	35:22	35:77	8	mov_write_subtitle_end_packet
arg	35:52	35:53	9	s
water	35:52	0:0	10	s
arg	35:55	35:56	9	i
water	35:55	0:0	10	i
arg	35:58	35:77	9	trk->track_duration
water	35:58	0:0	10	trk
op	35:61	0:0	10	->
water	35:63	0:0	10	track_duration
water	35:78	0:0	8	;
if	36:16	36:39	8	(ret < 0)
cond	36:20	36:26	9	ret < 0
water	36:20	0:0	10	ret
op	36:24	0:0	10	<
water	36:26	0:0	10	0
stmts	36:29	36:39	9	
return	36:29	36:39	10	ret
water	36:36	0:0	11	ret
water	37:16	0:0	8	trk
op	37:19	0:0	8	->
water	37:21	0:0	8	last_sample_is_subtitle_end
op	37:49	0:0	8	=
water	37:51	0:0	8	1
water	37:52	0:0	8	;
water	38:12	0:0	8	}
water	39:8	0:0	6	}
return	40:8	40:46	4	mov_write_single_packet(s,pkt)
call	40:15	40:45	5	mov_write_single_packet
arg	40:39	40:40	6	s
water	40:39	0:0	7	s
arg	40:42	40:45	6	pkt
water	40:42	0:0	7	pkt
water	41:4	0:0	4	}
