func	1:0	44:0	0	void	MP4_BoxFree
params	1:16	0:0	1	
param	1:18	1:29	2	stream_t *	s
param	1:31	1:48	2	MP4_Box_t *	p_box
stmnts	0:0	43:17	1	
decl	3:4	3:24	2	unsigned int	i_index
decl	4:4	4:25	2	MP4_Box_t	*p_child
if	5:4	6:14	2	(! p_box)
cond	5:8	5:9	3	! p_box
op	5:8	0:0	4	!
water	5:9	0:0	4	p_box
stmts	6:8	6:14	3	
return	6:8	6:14	4	
for	7:4	13:4	2	(p_child = p_box -> p_first ;p_child != NULL;)
forinit	7:9	7:33	3	p_child = p_box -> p_first ;
water	7:9	0:0	4	p_child
op	7:17	0:0	4	=
water	7:19	0:0	4	p_box
op	7:24	0:0	4	->
water	7:26	0:0	4	p_first
water	7:33	0:0	4	;
cond	7:35	7:46	3	p_child != NULL
water	7:35	0:0	4	p_child
op	7:43	0:0	4	!=
water	7:46	0:0	4	NULL
forexpr	0:0	0:0	3	
stmts	8:4	13:4	3	
water	8:4	0:0	4	{
decl	9:8	9:25	4	MP4_Box_t	*p_next
water	10:8	0:0	4	p_next
op	10:15	0:0	4	=
water	10:17	0:0	4	p_child
op	10:24	0:0	4	->
water	10:26	0:0	4	p_next
water	10:32	0:0	4	;
call	11:8	11:32	4	MP4_BoxFree
arg	11:21	11:22	5	s
water	11:21	0:0	6	s
arg	11:24	11:32	5	p_child
water	11:24	0:0	6	p_child
water	11:33	0:0	4	;
water	12:8	0:0	4	p_child
op	12:16	0:0	4	=
water	12:18	0:0	4	p_next
water	12:24	0:0	4	;
water	13:4	0:0	4	}
if	15:4	42:4	2	(p_box -> data . p_payload)
cond	15:8	15:20	3	p_box -> data . p_payload
water	15:8	0:0	4	p_box
op	15:13	0:0	4	->
water	15:15	0:0	4	data
op	15:19	0:0	4	.
water	15:20	0:0	4	p_payload
stmts	16:4	42:4	3	
water	16:4	0:0	4	{
for	17:8	24:8	4	(i_index = 0 ;;i_index ++)
forinit	17:13	17:24	5	i_index = 0 ;
water	17:13	0:0	6	i_index
op	17:21	0:0	6	=
water	17:23	0:0	6	0
water	17:24	0:0	6	;
cond	0:0	0:0	5	
forexpr	17:28	17:35	5	i_index ++
water	17:28	0:0	6	i_index
op	17:35	0:0	6	++
stmts	18:8	24:8	5	
water	18:8	0:0	6	{
if	19:12	23:12	6	(( MP4_Box_Function [ i_index ] . i_type == p_box -> i_type ) || ( MP4_Box_Function [ i_index ] . i_type == 0 ))
cond	19:16	20:56	7	( MP4_Box_Function [ i_index ] . i_type == p_box -> i_type ) || ( MP4_Box_Function [ i_index ] . i_type == 0 )
water	19:16	0:0	8	(
water	19:18	0:0	8	MP4_Box_Function
op	19:34	0:0	8	[
water	19:35	0:0	8	i_index
op	19:42	0:0	8	]
op	19:43	0:0	8	.
water	19:44	0:0	8	i_type
op	19:51	0:0	8	==
water	19:54	0:0	8	p_box
op	19:59	0:0	8	->
water	19:61	0:0	8	i_type
water	19:68	0:0	8	)
op	19:69	0:0	8	||
water	20:16	0:0	8	(
water	20:18	0:0	8	MP4_Box_Function
op	20:34	0:0	8	[
water	20:35	0:0	8	i_index
op	20:42	0:0	8	]
op	20:43	0:0	8	.
water	20:44	0:0	8	i_type
op	20:51	0:0	8	==
water	20:54	0:0	8	0
water	20:56	0:0	8	)
stmts	21:12	23:12	7	
water	21:12	0:0	8	{
break	22:16	22:21	8	
water	23:12	0:0	8	}
water	24:8	0:0	6	}
if	25:8	36:8	4	(MP4_Box_Function [ i_index ] . MP4_FreeBox_function == NULL)
cond	25:12	25:62	5	MP4_Box_Function [ i_index ] . MP4_FreeBox_function == NULL
water	25:12	0:0	6	MP4_Box_Function
op	25:28	0:0	6	[
water	25:29	0:0	6	i_index
op	25:36	0:0	6	]
op	25:37	0:0	6	.
water	25:38	0:0	6	MP4_FreeBox_function
op	25:59	0:0	6	==
water	25:62	0:0	6	NULL
stmts	26:8	36:8	5	
water	26:8	0:0	6	{
water	28:12	0:0	6	if
call	28:15	28:34	6	MP4_BOX_TYPE_ASCII
call	29:16	31:46	6	msg_Warn
arg	29:26	29:27	7	s
water	29:26	0:0	8	s
arg	30:24	30:61	7	"cannot free box %4.4s, type unknown"
water	30:24	0:0	8	"cannot free box %4.4s, type unknown"
arg	31:24	31:46	7	(char*)&p_box->i_type
water	31:24	0:0	8	(
water	31:25	0:0	8	char
op	31:29	0:0	8	*
water	31:30	0:0	8	)
op	31:31	0:0	8	&
water	31:32	0:0	8	p_box
op	31:37	0:0	8	->
water	31:39	0:0	8	i_type
water	31:47	0:0	6	;
else	32:12	35:49	6
stmts	33:16	35:49	7	
call	33:16	35:48	8	msg_Warn
arg	33:26	33:27	9	s
water	33:26	0:0	10	s
arg	34:24	34:62	9	"cannot free box c%3.3s, type unknown"
water	34:24	0:0	10	"cannot free box c%3.3s, type unknown"
arg	35:24	35:48	9	(char*)&p_box->i_type+1
water	35:24	0:0	10	(
water	35:25	0:0	10	char
op	35:29	0:0	10	*
water	35:30	0:0	10	)
op	35:31	0:0	10	&
water	35:32	0:0	10	p_box
op	35:37	0:0	10	->
water	35:39	0:0	10	i_type
op	35:45	0:0	10	+
water	35:46	0:0	10	1
water	35:49	0:0	8	;
water	36:8	0:0	6	}
else	37:8	40:8	4
stmts	38:8	40:8	5	
water	38:8	0:0	6	{
water	39:12	0:0	6	MP4_Box_Function
op	39:28	0:0	6	[
water	39:29	0:0	6	i_index
op	39:36	0:0	6	]
op	39:37	0:0	6	.
call	39:38	39:66	6	MP4_FreeBox_function
arg	39:60	39:66	7	p_box
water	39:60	0:0	8	p_box
water	39:67	0:0	6	;
water	40:8	0:0	6	}
call	41:8	41:36	4	free
arg	41:14	41:36	5	p_box->data.p_payload
water	41:14	0:0	6	p_box
op	41:19	0:0	6	->
water	41:21	0:0	6	data
op	41:25	0:0	6	.
water	41:26	0:0	6	p_payload
water	41:37	0:0	4	;
water	42:4	0:0	4	}
call	43:4	43:16	2	free
arg	43:10	43:16	3	p_box
water	43:10	0:0	4	p_box
water	43:17	0:0	2	;
