func	1:0	42:0	0	static int	mms_ReceiveCommand
params	1:29	0:0	1	
param	1:31	1:50	2	access_t *	p_access
stmnts	0:0	41:22	1	
decl	3:4	3:41	2	access_sys_t	*p_sys
op	3:24	0:0	2	=
water	3:26	0:0	2	p_access
op	3:34	0:0	2	->
water	3:36	0:0	2	p_sys
for	4:4	40:4	2	(;;)
forinit	4:9	4:9	3	;
water	4:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	5:4	40:4	3	
water	5:4	0:0	4	{
decl	6:8	6:18	4	int	i_used
decl	7:8	7:20	4	int	i_status
if	8:8	12:8	4	(NetFillBuffer (p_access ) < 0)
cond	8:12	8:40	5	NetFillBuffer (p_access ) < 0
call	8:12	8:36	6	NetFillBuffer
arg	8:27	8:36	7	p_access
water	8:27	0:0	8	p_access
op	8:38	0:0	6	<
water	8:40	0:0	6	0
stmts	9:8	12:8	5	
water	9:8	0:0	6	{
call	10:12	10:53	6	msg_Warn
arg	10:22	10:30	7	p_access
water	10:22	0:0	8	p_access
arg	10:32	10:53	7	"cannot fill buffer"
water	10:32	0:0	8	"cannot fill buffer"
water	10:54	0:0	6	;
return	11:12	11:31	6	VLC_EGENERIC
water	11:19	0:0	7	VLC_EGENERIC
water	12:8	0:0	6	}
if	13:8	35:8	4	(p_sys -> i_buffer_tcp > 0)
cond	13:12	13:34	5	p_sys -> i_buffer_tcp > 0
water	13:12	0:0	6	p_sys
op	13:17	0:0	6	->
water	13:19	0:0	6	i_buffer_tcp
op	13:32	0:0	6	>
water	13:34	0:0	6	0
stmts	14:8	35:8	5	
water	14:8	0:0	6	{
water	15:12	0:0	6	i_status
op	15:21	0:0	6	=
call	15:23	16:70	6	mms_ParseCommand
arg	15:41	15:49	7	p_access
water	15:41	0:0	8	p_access
arg	15:51	15:68	7	p_sys->buffer_tcp
water	15:51	0:0	8	p_sys
op	15:56	0:0	8	->
water	15:58	0:0	8	buffer_tcp
arg	16:41	16:60	7	p_sys->i_buffer_tcp
water	16:41	0:0	8	p_sys
op	16:46	0:0	8	->
water	16:48	0:0	8	i_buffer_tcp
arg	16:62	16:70	7	&i_used
op	16:62	0:0	8	&
water	16:63	0:0	8	i_used
water	16:71	0:0	6	;
if	17:12	21:12	6	(i_used < MMS_BUFFER_SIZE)
cond	17:16	17:25	7	i_used < MMS_BUFFER_SIZE
water	17:16	0:0	8	i_used
op	17:23	0:0	8	<
water	17:25	0:0	8	MMS_BUFFER_SIZE
stmts	18:12	21:12	7	
water	18:12	0:0	8	{
call	19:16	20:50	8	memmove
arg	19:25	19:42	9	p_sys->buffer_tcp
water	19:25	0:0	10	p_sys
op	19:30	0:0	10	->
water	19:32	0:0	10	buffer_tcp
arg	19:44	19:70	9	p_sys->buffer_tcp+i_used
water	19:44	0:0	10	p_sys
op	19:49	0:0	10	->
water	19:51	0:0	10	buffer_tcp
op	19:62	0:0	10	+
water	19:64	0:0	10	i_used
arg	20:25	20:50	9	MMS_BUFFER_SIZE-i_used
water	20:25	0:0	10	MMS_BUFFER_SIZE
op	20:41	0:0	10	-
water	20:43	0:0	10	i_used
water	20:51	0:0	8	;
water	21:12	0:0	8	}
water	22:12	0:0	6	p_sys
op	22:17	0:0	6	->
water	22:19	0:0	6	i_buffer_tcp
op	22:32	0:0	6	-=
water	22:35	0:0	6	i_used
water	22:41	0:0	6	;
if	23:12	26:12	6	(i_status < 0)
cond	23:16	23:27	7	i_status < 0
water	23:16	0:0	8	i_status
op	23:25	0:0	8	<
water	23:27	0:0	8	0
stmts	24:12	26:12	7	
water	24:12	0:0	8	{
return	25:16	25:35	8	VLC_EGENERIC
water	25:23	0:0	9	VLC_EGENERIC
water	26:12	0:0	8	}
if	27:12	30:12	6	(p_sys -> i_command == 0 x1b)
cond	27:16	27:37	7	p_sys -> i_command == 0 x1b
water	27:16	0:0	8	p_sys
op	27:21	0:0	8	->
water	27:23	0:0	8	i_command
op	27:33	0:0	8	==
water	27:36	0:0	8	0
water	27:37	0:0	8	x1b
stmts	28:12	30:12	7	
water	28:12	0:0	8	{
call	29:16	29:63	8	mms_CommandSend
arg	29:33	29:41	9	p_access
water	29:33	0:0	10	p_access
arg	29:43	29:47	9	0x1b
water	29:43	0:0	10	0
water	29:44	0:0	10	x1b
arg	29:49	29:50	9	0
water	29:49	0:0	10	0
arg	29:52	29:53	9	0
water	29:52	0:0	10	0
arg	29:55	29:59	9	NULL
water	29:55	0:0	10	NULL
arg	29:61	29:63	9	0
water	29:61	0:0	10	0
water	29:64	0:0	8	;
water	30:12	0:0	8	}
else	31:12	34:12	6
stmts	32:12	34:12	7	
water	32:12	0:0	8	{
break	33:16	33:21	8	
water	34:12	0:0	8	}
water	35:8	0:0	6	}
else	36:8	39:8	4
stmts	37:8	39:8	5	
water	37:8	0:0	6	{
return	38:12	38:31	6	VLC_EGENERIC
water	38:19	0:0	7	VLC_EGENERIC
water	39:8	0:0	6	}
water	40:4	0:0	4	}
return	41:4	41:22	2	VLC_SUCCESS
water	41:11	0:0	3	VLC_SUCCESS
