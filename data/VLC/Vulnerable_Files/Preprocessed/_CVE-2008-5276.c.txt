func	1:0	55:0	0	static void	ReadRealIndex
params	1:25	0:0	1	
param	1:27	1:44	2	demux_t *	p_demux
stmnts	0:0	54:4	1	
decl	3:4	3:39	2	demux_sys_t	*p_sys
op	3:23	0:0	2	=
water	3:25	0:0	2	p_demux
op	3:32	0:0	2	->
water	3:34	0:0	2	p_sys
decl	4:4	4:29	2	uint8_t	buffer[100]
decl	5:4	5:22	2	uint32_t	i_id
decl	6:4	6:24	2	uint32_t	i_size
decl	7:4	7:27	2	int	i_version
decl	8:4	8:19	2	unsigned int	i
decl	9:4	9:31	2	uint32_t	i_index_count
if	10:4	11:14	2	(p_sys -> i_index_offset == 0)
cond	10:9	10:34	3	p_sys -> i_index_offset == 0
water	10:9	0:0	4	p_sys
op	10:14	0:0	4	->
water	10:16	0:0	4	i_index_offset
op	10:31	0:0	4	==
water	10:34	0:0	4	0
stmts	11:8	11:14	3	
return	11:8	11:14	4	
call	12:4	12:51	2	stream_Seek
arg	12:17	12:27	3	p_demux->s
water	12:17	0:0	4	p_demux
op	12:24	0:0	4	->
water	12:26	0:0	4	s
arg	12:29	12:51	3	p_sys->i_index_offset
water	12:29	0:0	4	p_sys
op	12:34	0:0	4	->
water	12:36	0:0	4	i_index_offset
water	12:52	0:0	2	;
if	13:4	14:15	2	(stream_Read (p_demux -> s ,buffer ,20 ) < 20)
cond	13:9	13:49	3	stream_Read (p_demux -> s ,buffer ,20 ) < 20
call	13:9	13:45	4	stream_Read
arg	13:22	13:32	5	p_demux->s
water	13:22	0:0	6	p_demux
op	13:29	0:0	6	->
water	13:31	0:0	6	s
arg	13:34	13:40	5	buffer
water	13:34	0:0	6	buffer
arg	13:42	13:45	5	20
water	13:42	0:0	6	20
op	13:47	0:0	4	<
water	13:49	0:0	4	20
stmts	14:8	14:15	3	
return	14:8	14:15	4	
water	15:4	0:0	2	i_id
op	15:9	0:0	2	=
call	15:11	15:66	2	VLC_FOURCC
arg	15:23	15:32	3	buffer[0]
water	15:23	0:0	4	buffer
op	15:29	0:0	4	[
water	15:30	0:0	4	0
op	15:31	0:0	4	]
arg	15:34	15:43	3	buffer[1]
water	15:34	0:0	4	buffer
op	15:40	0:0	4	[
water	15:41	0:0	4	1
op	15:42	0:0	4	]
arg	15:45	15:54	3	buffer[2]
water	15:45	0:0	4	buffer
op	15:51	0:0	4	[
water	15:52	0:0	4	2
op	15:53	0:0	4	]
arg	15:56	15:66	3	buffer[3]
water	15:56	0:0	4	buffer
op	15:62	0:0	4	[
water	15:63	0:0	4	3
op	15:64	0:0	4	]
water	15:67	0:0	2	;
water	16:4	0:0	2	i_size
op	16:16	0:0	2	=
call	16:18	16:38	2	GetDWBE
arg	16:27	16:38	3	&buffer[4]
op	16:27	0:0	4	&
water	16:28	0:0	4	buffer
op	16:34	0:0	4	[
water	16:35	0:0	4	4
op	16:36	0:0	4	]
water	16:39	0:0	2	;
water	17:4	0:0	2	i_version
op	17:16	0:0	2	=
call	17:18	17:37	2	GetWBE
arg	17:26	17:37	3	&buffer[8]
op	17:26	0:0	4	&
water	17:27	0:0	4	buffer
op	17:33	0:0	4	[
water	17:34	0:0	4	8
op	17:35	0:0	4	]
water	17:38	0:0	2	;
call	18:4	19:49	2	msg_Dbg
arg	18:13	18:20	3	p_demux
water	18:13	0:0	4	p_demux
arg	18:22	18:59	3	"Real index %4.4s size=%d version=%d"
water	18:22	0:0	4	"Real index %4.4s size=%d version=%d"
arg	19:17	19:29	3	(char*)&i_id
water	19:17	0:0	4	(
water	19:18	0:0	4	char
op	19:22	0:0	4	*
water	19:23	0:0	4	)
op	19:24	0:0	4	&
water	19:25	0:0	4	i_id
arg	19:31	19:37	3	i_size
water	19:31	0:0	4	i_size
arg	19:39	19:49	3	i_version
water	19:39	0:0	4	i_version
water	19:50	0:0	2	;
if	20:4	21:14	2	(( i_size < 20 ) && ( i_id !=VLC_FOURCC ('I' ,'N' ,'D' ,'X' ) ))
cond	20:8	20:61	3	( i_size < 20 ) && ( i_id !=VLC_FOURCC ('I' ,'N' ,'D' ,'X' ) )
water	20:8	0:0	4	(
water	20:9	0:0	4	i_size
op	20:16	0:0	4	<
water	20:18	0:0	4	20
water	20:20	0:0	4	)
op	20:22	0:0	4	&&
water	20:25	0:0	4	(
water	20:26	0:0	4	i_id
op	20:31	0:0	4	!=
call	20:34	20:60	4	VLC_FOURCC
arg	20:45	20:48	5	'I'
water	20:45	0:0	6	'I'
arg	20:49	20:52	5	'N'
water	20:49	0:0	6	'N'
arg	20:53	20:56	5	'D'
water	20:53	0:0	6	'D'
arg	20:57	20:60	5	'X'
water	20:57	0:0	6	'X'
water	20:61	0:0	4	)
stmts	21:8	21:14	3	
return	21:8	21:14	4	
water	22:4	0:0	2	i_index_count
op	22:18	0:0	2	=
call	22:20	22:41	2	GetDWBE
arg	22:29	22:41	3	&buffer[10]
op	22:29	0:0	4	&
water	22:30	0:0	4	buffer
op	22:36	0:0	4	[
water	22:37	0:0	4	10
op	22:39	0:0	4	]
water	22:42	0:0	2	;
call	23:4	23:62	2	msg_Dbg
arg	23:13	23:20	3	p_demux
water	23:13	0:0	4	p_demux
arg	23:22	23:46	3	"Real Index : num : %d "
water	23:22	0:0	4	"Real Index : num : %d "
arg	23:48	23:62	3	i_index_count
water	23:48	0:0	4	i_index_count
water	23:63	0:0	2	;
if	24:4	25:14	2	(i_index_count == 0)
cond	24:8	24:25	3	i_index_count == 0
water	24:8	0:0	4	i_index_count
op	24:22	0:0	4	==
water	24:25	0:0	4	0
stmts	25:8	25:14	3	
return	25:8	25:14	4	
if	26:4	28:49	2	(GetDWBE (& buffer [ 16 ] ) > 0)
cond	26:8	26:33	3	GetDWBE (& buffer [ 16 ] ) > 0
call	26:8	26:29	4	GetDWBE
arg	26:17	26:29	5	&buffer[16]
op	26:17	0:0	6	&
water	26:18	0:0	6	buffer
op	26:24	0:0	6	[
water	26:25	0:0	6	16
op	26:27	0:0	6	]
op	26:31	0:0	4	>
water	26:33	0:0	4	0
stmts	27:8	28:49	3	
call	27:8	28:48	4	msg_Dbg
arg	27:17	27:24	5	p_demux
water	27:17	0:0	6	p_demux
arg	27:26	27:66	5	"Real Index: Does next index exist? %d "
water	27:26	0:0	6	"Real Index: Does next index exist? %d "
arg	28:24	28:48	5	GetDWBE(&buffer[16])
call	28:24	28:45	6	GetDWBE
arg	28:33	28:45	7	&buffer[16]
op	28:33	0:0	8	&
water	28:34	0:0	8	buffer
op	28:40	0:0	8	[
water	28:41	0:0	8	16
op	28:43	0:0	8	]
water	28:49	0:0	4	;
water	29:4	0:0	2	p_sys
op	29:9	0:0	2	->
water	29:11	0:0	2	p_index
op	29:19	0:0	2	=
water	30:12	0:0	2	(
water	30:13	0:0	2	rm_index_t
op	30:24	0:0	2	*
water	30:25	0:0	2	)
call	30:26	30:75	2	malloc
arg	30:34	30:75	3	sizeof(rm_index_t)*(i_index_count+1)
op	30:34	0:0	4	sizeof
water	30:40	0:0	4	(
water	30:42	0:0	4	rm_index_t
water	30:53	0:0	4	)
op	30:55	0:0	4	*
water	30:57	0:0	4	(
water	30:58	0:0	4	i_index_count
op	30:71	0:0	4	+
water	30:72	0:0	4	1
water	30:73	0:0	4	)
water	30:76	0:0	2	;
if	31:4	35:4	2	(p_sys -> p_index == NULL)
cond	31:8	31:26	3	p_sys -> p_index == NULL
water	31:8	0:0	4	p_sys
op	31:13	0:0	4	->
water	31:15	0:0	4	p_index
op	31:23	0:0	4	==
water	31:26	0:0	4	NULL
stmts	32:4	35:4	3	
water	32:4	0:0	4	{
call	33:8	33:52	4	msg_Err
arg	33:17	33:24	5	p_demux
water	33:17	0:0	6	p_demux
arg	33:26	33:52	5	"Memory allocation error"
water	33:26	0:0	6	"Memory allocation error"
water	33:53	0:0	4	;
return	34:8	34:14	4	
water	35:4	0:0	4	}
call	36:4	36:70	2	memset
arg	36:12	36:26	3	p_sys->p_index
water	36:12	0:0	4	p_sys
op	36:17	0:0	4	->
water	36:19	0:0	4	p_index
arg	36:28	36:29	3	0
water	36:28	0:0	4	0
arg	36:31	36:70	3	sizeof(rm_index_t)*(i_index_count+1)
op	36:31	0:0	4	sizeof
water	36:37	0:0	4	(
water	36:38	0:0	4	rm_index_t
water	36:48	0:0	4	)
op	36:50	0:0	4	*
water	36:52	0:0	4	(
water	36:53	0:0	4	i_index_count
op	36:66	0:0	4	+
water	36:67	0:0	4	1
water	36:68	0:0	4	)
water	36:71	0:0	2	;
for	37:4	54:4	2	(i = 0 ;i < i_index_count;i ++)
forinit	37:9	37:12	3	i = 0 ;
water	37:9	0:0	4	i
op	37:10	0:0	4	=
water	37:11	0:0	4	0
water	37:12	0:0	4	;
cond	37:14	37:16	3	i < i_index_count
water	37:14	0:0	4	i
op	37:15	0:0	4	<
water	37:16	0:0	4	i_index_count
forexpr	37:31	37:32	3	i ++
water	37:31	0:0	4	i
op	37:32	0:0	4	++
stmts	38:4	54:4	3	
water	38:4	0:0	4	{
if	39:8	40:19	4	(stream_Read (p_demux -> s ,buffer ,14 ) < 14)
cond	39:12	39:52	5	stream_Read (p_demux -> s ,buffer ,14 ) < 14
call	39:12	39:48	6	stream_Read
arg	39:25	39:35	7	p_demux->s
water	39:25	0:0	8	p_demux
op	39:32	0:0	8	->
water	39:34	0:0	8	s
arg	39:37	39:43	7	buffer
water	39:37	0:0	8	buffer
arg	39:45	39:48	7	14
water	39:45	0:0	8	14
op	39:50	0:0	6	<
water	39:52	0:0	6	14
stmts	40:12	40:19	5	
return	40:12	40:19	6	
if	41:8	46:8	4	(GetWBE (& buffer [ 0 ] ) != 0)
cond	41:12	41:36	5	GetWBE (& buffer [ 0 ] ) != 0
call	41:12	41:31	6	GetWBE
arg	41:20	41:31	7	&buffer[0]
op	41:20	0:0	8	&
water	41:21	0:0	8	buffer
op	41:27	0:0	8	[
water	41:28	0:0	8	0
op	41:29	0:0	8	]
op	41:33	0:0	6	!=
water	41:36	0:0	6	0
stmts	42:8	46:8	5	
water	42:8	0:0	6	{
call	43:12	44:51	6	msg_Dbg
arg	43:21	43:28	7	p_demux
water	43:21	0:0	8	p_demux
arg	43:30	43:78	7	"Real Index: invaild version of index entry %d "
water	43:30	0:0	8	"Real Index: invaild version of index entry %d "
arg	44:30	44:51	7	GetWBE(&buffer[0])
call	44:30	44:49	8	GetWBE
arg	44:38	44:49	9	&buffer[0]
op	44:38	0:0	10	&
water	44:39	0:0	10	buffer
op	44:45	0:0	10	[
water	44:46	0:0	10	0
op	44:47	0:0	10	]
water	44:52	0:0	6	;
return	45:12	45:18	6	
water	46:8	0:0	6	}
water	47:8	0:0	4	p_sys
op	47:13	0:0	4	->
water	47:15	0:0	4	p_index
op	47:22	0:0	4	[
water	47:23	0:0	4	i
op	47:24	0:0	4	]
op	47:25	0:0	4	.
water	47:26	0:0	4	time_offset
op	47:38	0:0	4	=
call	47:40	47:60	4	GetDWBE
arg	47:49	47:60	5	&buffer[2]
op	47:49	0:0	6	&
water	47:50	0:0	6	buffer
op	47:56	0:0	6	[
water	47:57	0:0	6	2
op	47:58	0:0	6	]
water	47:61	0:0	4	;
water	48:8	0:0	4	p_sys
op	48:13	0:0	4	->
water	48:15	0:0	4	p_index
op	48:22	0:0	4	[
water	48:23	0:0	4	i
op	48:24	0:0	4	]
op	48:25	0:0	4	.
water	48:26	0:0	4	file_offset
op	48:38	0:0	4	=
call	48:40	48:60	4	GetDWBE
arg	48:49	48:60	5	&buffer[6]
op	48:49	0:0	6	&
water	48:50	0:0	6	buffer
op	48:56	0:0	6	[
water	48:57	0:0	6	6
op	48:58	0:0	6	]
water	48:61	0:0	4	;
water	49:8	0:0	4	p_sys
op	49:13	0:0	4	->
water	49:15	0:0	4	p_index
op	49:22	0:0	4	[
water	49:23	0:0	4	i
op	49:24	0:0	4	]
op	49:25	0:0	4	.
water	49:26	0:0	4	frame_index
op	49:38	0:0	4	=
call	49:40	49:61	4	GetDWBE
arg	49:49	49:61	5	&buffer[10]
op	49:49	0:0	6	&
water	49:50	0:0	6	buffer
op	49:56	0:0	6	[
water	49:57	0:0	6	10
op	49:59	0:0	6	]
water	49:62	0:0	4	;
call	50:8	53:54	4	msg_Dbg
arg	50:17	50:24	5	p_demux
water	50:17	0:0	6	p_demux
arg	50:26	50:65	5	"Real Index: time %d file %d frame %d "
water	50:26	0:0	6	"Real Index: time %d file %d frame %d "
arg	51:24	51:53	5	p_sys->p_index[i].time_offset
water	51:24	0:0	6	p_sys
op	51:29	0:0	6	->
water	51:31	0:0	6	p_index
op	51:38	0:0	6	[
water	51:39	0:0	6	i
op	51:40	0:0	6	]
op	51:41	0:0	6	.
water	51:42	0:0	6	time_offset
arg	52:24	52:53	5	p_sys->p_index[i].file_offset
water	52:24	0:0	6	p_sys
op	52:29	0:0	6	->
water	52:31	0:0	6	p_index
op	52:38	0:0	6	[
water	52:39	0:0	6	i
op	52:40	0:0	6	]
op	52:41	0:0	6	.
water	52:42	0:0	6	file_offset
arg	53:24	53:54	5	p_sys->p_index[i].frame_index
water	53:24	0:0	6	p_sys
op	53:29	0:0	6	->
water	53:31	0:0	6	p_index
op	53:38	0:0	6	[
water	53:39	0:0	6	i
op	53:40	0:0	6	]
op	53:41	0:0	6	.
water	53:42	0:0	6	frame_index
water	53:55	0:0	4	;
water	54:4	0:0	4	}
