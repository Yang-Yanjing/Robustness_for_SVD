func	1:0	169:0	0	static int	Open
params	1:15	0:0	1	
param	1:17	1:39	2	vlc_object_t *	p_this
stmnts	0:0	168:23	1	
decl	3:4	3:43	2	demux_t	*p_demux
op	3:25	0:0	2	=
water	3:27	0:0	2	(
water	3:28	0:0	2	demux_t
op	3:35	0:0	2	*
water	3:36	0:0	2	)
water	3:37	0:0	2	p_this
decl	4:4	4:22	2	demux_sys_t	*p_sys
decl	5:4	5:23	2	uint8_t	*p_peek
decl	6:4	6:35	2	unsigned int	i_size
water	6:23	0:0	2	,
decl	6:4	6:35	2	unsigned int	i_extended
decl	7:4	7:25	2	char	*psz_name
decl	8:4	8:41	2	WAVEFORMATEXTENSIBLE	*p_wf_ext
op	8:35	0:0	2	=
water	8:37	0:0	2	NULL
decl	9:4	9:37	2	WAVEFORMATEX	*p_wf
op	9:31	0:0	2	=
water	9:33	0:0	2	NULL
if	11:4	11:73	2	(stream_Peek (p_demux -> s ,& p_peek ,12 ) < 12)
cond	11:8	11:49	3	stream_Peek (p_demux -> s ,& p_peek ,12 ) < 12
call	11:8	11:45	4	stream_Peek
arg	11:21	11:31	5	p_demux->s
water	11:21	0:0	6	p_demux
op	11:28	0:0	6	->
water	11:30	0:0	6	s
arg	11:33	11:40	5	&p_peek
op	11:33	0:0	6	&
water	11:34	0:0	6	p_peek
arg	11:42	11:45	5	12
water	11:42	0:0	6	12
op	11:47	0:0	4	<
water	11:49	0:0	4	12
stmts	11:54	11:73	3	
return	11:54	11:73	4	VLC_EGENERIC
water	11:61	0:0	5	VLC_EGENERIC
if	12:4	15:4	2	(memcmp (p_peek ,"RIFF" ,4 ) ||memcmp (& p_peek [ 8 ] ,"WAVE" ,4 ))
cond	12:8	12:69	3	memcmp (p_peek ,"RIFF" ,4 ) ||memcmp (& p_peek [ 8 ] ,"WAVE" ,4 )
call	12:8	12:34	4	memcmp
arg	12:16	12:22	5	p_peek
water	12:16	0:0	6	p_peek
arg	12:24	12:30	5	"RIFF"
water	12:24	0:0	6	"RIFF"
arg	12:32	12:34	5	4
water	12:32	0:0	6	4
op	12:36	0:0	4	||
call	12:39	12:69	4	memcmp
arg	12:47	12:57	5	&p_peek[8]
op	12:47	0:0	6	&
water	12:48	0:0	6	p_peek
op	12:54	0:0	6	[
water	12:55	0:0	6	8
op	12:56	0:0	6	]
arg	12:59	12:65	5	"WAVE"
water	12:59	0:0	6	"WAVE"
arg	12:67	12:69	5	4
water	12:67	0:0	6	4
stmts	13:4	15:4	3	
water	13:4	0:0	4	{
return	14:8	14:27	4	VLC_EGENERIC
water	14:15	0:0	5	VLC_EGENERIC
water	15:4	0:0	4	}
water	16:4	0:0	2	p_demux
op	16:11	0:0	2	->
water	16:13	0:0	2	pf_demux
op	16:24	0:0	2	=
water	16:26	0:0	2	Demux
water	16:31	0:0	2	;
water	17:4	0:0	2	p_demux
op	17:11	0:0	2	->
water	17:13	0:0	2	pf_control
op	17:24	0:0	2	=
water	17:26	0:0	2	Control
water	17:33	0:0	2	;
water	18:4	0:0	2	p_demux
op	18:11	0:0	2	->
water	18:13	0:0	2	p_sys
op	18:24	0:0	2	=
water	18:26	0:0	2	p_sys
op	18:32	0:0	2	=
call	18:34	18:64	2	malloc
arg	18:42	18:64	3	sizeof(demux_sys_t)
op	18:42	0:0	4	sizeof
water	18:48	0:0	4	(
water	18:50	0:0	4	demux_sys_t
water	18:62	0:0	4	)
water	18:65	0:0	2	;
if	19:4	20:25	2	(p_sys == NULL)
cond	19:8	19:17	3	p_sys == NULL
water	19:8	0:0	4	p_sys
op	19:14	0:0	4	==
water	19:17	0:0	4	NULL
stmts	20:8	20:25	3	
return	20:8	20:25	4	VLC_ENOMEM
water	20:15	0:0	5	VLC_ENOMEM
water	21:4	0:0	2	p_sys
op	21:9	0:0	2	->
water	21:11	0:0	2	p_es
op	21:24	0:0	2	=
water	21:26	0:0	2	NULL
water	21:30	0:0	2	;
water	22:4	0:0	2	p_sys
op	22:9	0:0	2	->
water	22:11	0:0	2	b_chan_reorder
op	22:26	0:0	2	=
water	22:28	0:0	2	0
water	22:29	0:0	2	;
water	23:4	0:0	2	p_sys
op	23:9	0:0	2	->
water	23:11	0:0	2	i_channel_mask
op	23:26	0:0	2	=
water	23:28	0:0	2	0
water	23:29	0:0	2	;
call	25:4	25:38	2	stream_Read
arg	25:17	25:27	3	p_demux->s
water	25:17	0:0	4	p_demux
op	25:24	0:0	4	->
water	25:26	0:0	4	s
arg	25:29	25:33	3	NULL
water	25:29	0:0	4	NULL
arg	25:35	25:38	3	12
water	25:35	0:0	4	12
water	25:39	0:0	2	;
if	27:4	31:4	2	(ChunkFind (p_demux ,"fmt " ,& i_size ))
cond	27:8	27:44	3	ChunkFind (p_demux ,"fmt " ,& i_size )
call	27:8	27:44	4	ChunkFind
arg	27:19	27:26	5	p_demux
water	27:19	0:0	6	p_demux
arg	27:28	27:34	5	"fmt "
water	27:28	0:0	6	"fmt "
arg	27:36	27:44	5	&i_size
op	27:36	0:0	6	&
water	27:37	0:0	6	i_size
stmts	28:4	31:4	3	
water	28:4	0:0	4	{
call	29:8	29:53	4	msg_Err
arg	29:17	29:24	5	p_demux
water	29:17	0:0	6	p_demux
arg	29:26	29:53	5	"cannot find 'fmt ' chunk"
water	29:26	0:0	6	"cannot find 'fmt ' chunk"
water	29:54	0:0	4	;
goto	30:8	30:18	4	error
water	30:13	0:0	5	error
water	31:4	0:0	4	}
if	32:4	36:4	2	(i_size < sizeof ( WAVEFORMATEX ) - 2)
cond	32:8	32:42	3	i_size < sizeof ( WAVEFORMATEX ) - 2
water	32:8	0:0	4	i_size
op	32:15	0:0	4	<
op	32:17	0:0	4	sizeof
water	32:23	0:0	4	(
water	32:25	0:0	4	WAVEFORMATEX
water	32:38	0:0	4	)
op	32:40	0:0	4	-
water	32:42	0:0	4	2
stmts	33:4	36:4	3	
water	33:4	0:0	4	{
call	34:8	34:49	4	msg_Err
arg	34:17	34:24	5	p_demux
water	34:17	0:0	6	p_demux
arg	34:26	34:49	5	"invalid 'fmt ' chunk"
water	34:26	0:0	6	"invalid 'fmt ' chunk"
water	34:50	0:0	4	;
goto	35:8	35:18	4	error
water	35:13	0:0	5	error
water	36:4	0:0	4	}
call	37:4	37:37	2	stream_Read
arg	37:17	37:27	3	p_demux->s
water	37:17	0:0	4	p_demux
op	37:24	0:0	4	->
water	37:26	0:0	4	s
arg	37:29	37:33	3	NULL
water	37:29	0:0	4	NULL
arg	37:35	37:37	3	8
water	37:35	0:0	4	8
water	37:38	0:0	2	;
water	39:4	0:0	2	p_wf_ext
op	39:13	0:0	2	=
call	39:15	39:44	2	malloc
arg	39:23	39:44	3	__EVEN(i_size)+2
call	39:23	39:38	4	__EVEN
arg	39:31	39:38	5	i_size
water	39:31	0:0	6	i_size
op	39:40	0:0	4	+
water	39:42	0:0	4	2
water	39:45	0:0	2	;
if	40:4	41:19	2	(p_wf_ext == NULL)
cond	40:8	40:20	3	p_wf_ext == NULL
water	40:8	0:0	4	p_wf_ext
op	40:17	0:0	4	==
water	40:20	0:0	4	NULL
stmts	41:9	41:19	3	
goto	41:9	41:19	4	error
water	41:14	0:0	5	error
water	42:4	0:0	2	p_wf
op	42:9	0:0	2	=
water	42:11	0:0	2	(
water	42:12	0:0	2	WAVEFORMATEX
op	42:25	0:0	2	*
water	42:26	0:0	2	)
water	42:27	0:0	2	p_wf_ext
water	42:35	0:0	2	;
water	43:4	0:0	2	p_wf
op	43:8	0:0	2	->
water	43:10	0:0	2	cbSize
op	43:17	0:0	2	=
water	43:19	0:0	2	0
water	43:20	0:0	2	;
if	44:4	49:4	2	(stream_Read (p_demux -> s ,p_wf ,__EVEN (i_size ) ) < ( int )__EVEN (i_size ))
cond	44:8	45:68	3	stream_Read (p_demux -> s ,p_wf ,__EVEN (i_size ) ) < ( int )__EVEN (i_size )
call	44:8	45:44	4	stream_Read
arg	44:21	44:31	5	p_demux->s
water	44:21	0:0	6	p_demux
op	44:28	0:0	6	->
water	44:30	0:0	6	s
arg	45:21	45:25	5	p_wf
water	45:21	0:0	6	p_wf
arg	45:27	45:44	5	__EVEN(i_size)
call	45:27	45:42	6	__EVEN
arg	45:35	45:42	7	i_size
water	45:35	0:0	8	i_size
op	45:46	0:0	4	<
water	45:48	0:0	4	(
water	45:49	0:0	4	int
water	45:52	0:0	4	)
call	45:53	45:68	4	__EVEN
arg	45:61	45:68	5	i_size
water	45:61	0:0	6	i_size
stmts	46:4	49:4	3	
water	46:4	0:0	4	{
call	47:8	47:53	4	msg_Err
arg	47:17	47:24	5	p_demux
water	47:17	0:0	6	p_demux
arg	47:26	47:53	5	"cannot load 'fmt ' chunk"
water	47:26	0:0	6	"cannot load 'fmt ' chunk"
water	47:54	0:0	4	;
goto	48:8	48:18	4	error
water	48:13	0:0	5	error
water	49:4	0:0	4	}
call	50:4	50:45	2	es_format_Init
arg	50:20	50:31	3	&p_sys->fmt
op	50:20	0:0	4	&
water	50:21	0:0	4	p_sys
op	50:26	0:0	4	->
water	50:28	0:0	4	fmt
arg	50:33	50:41	3	AUDIO_ES
water	50:33	0:0	4	AUDIO_ES
arg	50:43	50:45	3	0
water	50:43	0:0	4	0
water	50:46	0:0	2	;
call	51:4	52:32	2	wf_tag_to_fourcc
arg	51:22	51:49	3	GetWLE(&p_wf->wFormatTag)
call	51:22	51:48	4	GetWLE
arg	51:30	51:48	5	&p_wf->wFormatTag
op	51:30	0:0	6	&
water	51:31	0:0	6	p_wf
op	51:35	0:0	6	->
water	51:37	0:0	6	wFormatTag
arg	51:51	51:70	3	&p_sys->fmt.i_codec
op	51:51	0:0	4	&
water	51:52	0:0	4	p_sys
op	51:57	0:0	4	->
water	51:59	0:0	4	fmt
op	51:62	0:0	4	.
water	51:63	0:0	4	i_codec
arg	52:22	52:32	3	&psz_name
op	52:22	0:0	4	&
water	52:23	0:0	4	psz_name
water	52:33	0:0	2	;
water	53:4	0:0	2	p_sys
op	53:9	0:0	2	->
water	53:11	0:0	2	fmt
op	53:14	0:0	2	.
water	53:15	0:0	2	audio
op	53:20	0:0	2	.
water	53:21	0:0	2	i_channels
op	53:32	0:0	2	=
call	53:34	53:60	2	GetWLE
arg	53:43	53:60	3	&p_wf->nChannels
op	53:43	0:0	4	&
water	53:44	0:0	4	p_wf
op	53:48	0:0	4	->
water	53:50	0:0	4	nChannels
water	53:61	0:0	2	;
water	54:4	0:0	2	p_sys
op	54:9	0:0	2	->
water	54:11	0:0	2	fmt
op	54:14	0:0	2	.
water	54:15	0:0	2	audio
op	54:20	0:0	2	.
water	54:21	0:0	2	i_rate
op	54:28	0:0	2	=
call	54:30	54:61	2	GetDWLE
arg	54:39	54:61	3	&p_wf->nSamplesPerSec
op	54:39	0:0	4	&
water	54:40	0:0	4	p_wf
op	54:44	0:0	4	->
water	54:46	0:0	4	nSamplesPerSec
water	54:62	0:0	2	;
water	55:4	0:0	2	p_sys
op	55:9	0:0	2	->
water	55:11	0:0	2	fmt
op	55:14	0:0	2	.
water	55:15	0:0	2	audio
op	55:20	0:0	2	.
water	55:21	0:0	2	i_blockalign
op	55:34	0:0	2	=
call	55:36	55:63	2	GetWLE
arg	55:44	55:63	3	&p_wf->nBlockAlign
op	55:44	0:0	4	&
water	55:45	0:0	4	p_wf
op	55:49	0:0	4	->
water	55:51	0:0	4	nBlockAlign
water	55:64	0:0	2	;
water	56:4	0:0	2	p_sys
op	56:9	0:0	2	->
water	56:11	0:0	2	fmt
op	56:14	0:0	2	.
water	56:15	0:0	2	i_bitrate
op	56:25	0:0	2	=
call	56:27	56:59	2	GetDWLE
arg	56:36	56:59	3	&p_wf->nAvgBytesPerSec
op	56:36	0:0	4	&
water	56:37	0:0	4	p_wf
op	56:41	0:0	4	->
water	56:43	0:0	4	nAvgBytesPerSec
op	56:61	0:0	2	*
water	56:63	0:0	2	8
water	56:64	0:0	2	;
water	57:4	0:0	2	p_sys
op	57:9	0:0	2	->
water	57:11	0:0	2	fmt
op	57:14	0:0	2	.
water	57:15	0:0	2	audio
op	57:20	0:0	2	.
water	57:21	0:0	2	i_bitspersample
op	57:37	0:0	2	=
call	57:39	57:69	2	GetWLE
arg	57:47	57:69	3	&p_wf->wBitsPerSample
op	57:47	0:0	4	&
water	57:48	0:0	4	p_wf
op	57:52	0:0	4	->
water	57:54	0:0	4	wBitsPerSample
water	57:70	0:0	2	;
water	58:4	0:0	2	p_sys
op	58:9	0:0	2	->
water	58:11	0:0	2	fmt
op	58:14	0:0	2	.
water	58:15	0:0	2	i_extra
op	58:23	0:0	2	=
call	58:25	58:47	2	GetWLE
arg	58:33	58:47	3	&p_wf->cbSize
op	58:33	0:0	4	&
water	58:34	0:0	4	p_wf
op	58:38	0:0	4	->
water	58:40	0:0	4	cbSize
water	58:48	0:0	2	;
water	59:4	0:0	2	i_extended
op	59:15	0:0	2	=
water	59:17	0:0	2	0
water	59:18	0:0	2	;
if	63:4	97:4	2	(GetWLE (& p_wf -> wFormatTag ) == WAVE_FORMAT_EXTENSIBLE && i_size >= sizeof ( WAVEFORMATEXTENSIBLE ))
cond	63:8	64:47	3	GetWLE (& p_wf -> wFormatTag ) == WAVE_FORMAT_EXTENSIBLE && i_size >= sizeof ( WAVEFORMATEXTENSIBLE )
call	63:8	63:34	4	GetWLE
arg	63:16	63:34	5	&p_wf->wFormatTag
op	63:16	0:0	6	&
water	63:17	0:0	6	p_wf
op	63:21	0:0	6	->
water	63:23	0:0	6	wFormatTag
op	63:36	0:0	4	==
water	63:39	0:0	4	WAVE_FORMAT_EXTENSIBLE
op	63:62	0:0	4	&&
water	64:8	0:0	4	i_size
op	64:15	0:0	4	>=
op	64:18	0:0	4	sizeof
water	64:24	0:0	4	(
water	64:26	0:0	4	WAVEFORMATEXTENSIBLE
water	64:47	0:0	4	)
stmts	65:4	97:4	3	
water	65:4	0:0	4	{
water	66:8	0:0	4	unsigned
water	66:17	0:0	4	i
water	66:18	0:0	4	,
water	66:20	0:0	4	i_channel_mask
water	66:34	0:0	4	;
decl	67:8	67:27	4	GUID	guid_subformat
water	68:8	0:0	4	guid_subformat
op	68:23	0:0	4	=
water	68:25	0:0	4	p_wf_ext
op	68:33	0:0	4	->
water	68:35	0:0	4	SubFormat
water	68:44	0:0	4	;
water	69:8	0:0	4	guid_subformat
op	69:22	0:0	4	.
water	69:23	0:0	4	Data1
op	69:29	0:0	4	=
call	69:31	69:67	4	GetDWLE
arg	69:40	69:67	5	&p_wf_ext->SubFormat.Data1
op	69:40	0:0	6	&
water	69:41	0:0	6	p_wf_ext
op	69:49	0:0	6	->
water	69:51	0:0	6	SubFormat
op	69:60	0:0	6	.
water	69:61	0:0	6	Data1
water	69:68	0:0	4	;
water	70:8	0:0	4	guid_subformat
op	70:22	0:0	4	.
water	70:23	0:0	4	Data2
op	70:29	0:0	4	=
call	70:31	70:66	4	GetWLE
arg	70:39	70:66	5	&p_wf_ext->SubFormat.Data2
op	70:39	0:0	6	&
water	70:40	0:0	6	p_wf_ext
op	70:48	0:0	6	->
water	70:50	0:0	6	SubFormat
op	70:59	0:0	6	.
water	70:60	0:0	6	Data2
water	70:67	0:0	4	;
water	71:8	0:0	4	guid_subformat
op	71:22	0:0	4	.
water	71:23	0:0	4	Data3
op	71:29	0:0	4	=
call	71:31	71:66	4	GetWLE
arg	71:39	71:66	5	&p_wf_ext->SubFormat.Data3
op	71:39	0:0	6	&
water	71:40	0:0	6	p_wf_ext
op	71:48	0:0	6	->
water	71:50	0:0	6	SubFormat
op	71:59	0:0	6	.
water	71:60	0:0	6	Data3
water	71:67	0:0	4	;
call	72:8	72:74	4	sf_tag_to_fourcc
arg	72:26	72:41	5	&guid_subformat
op	72:26	0:0	6	&
water	72:27	0:0	6	guid_subformat
arg	72:43	72:62	5	&p_sys->fmt.i_codec
op	72:43	0:0	6	&
water	72:44	0:0	6	p_sys
op	72:49	0:0	6	->
water	72:51	0:0	6	fmt
op	72:54	0:0	6	.
water	72:55	0:0	6	i_codec
arg	72:64	72:74	5	&psz_name
op	72:64	0:0	6	&
water	72:65	0:0	6	psz_name
water	72:75	0:0	4	;
water	73:8	0:0	4	i_extended
op	73:19	0:0	4	=
op	73:21	0:0	4	sizeof
water	73:27	0:0	4	(
water	73:29	0:0	4	WAVEFORMATEXTENSIBLE
water	73:50	0:0	4	)
op	73:52	0:0	4	-
op	73:54	0:0	4	sizeof
water	73:60	0:0	4	(
water	73:62	0:0	4	WAVEFORMATEX
water	73:75	0:0	4	)
water	73:76	0:0	4	;
water	74:8	0:0	4	p_sys
op	74:13	0:0	4	->
water	74:15	0:0	4	fmt
op	74:18	0:0	4	.
water	74:19	0:0	4	i_extra
op	74:27	0:0	4	-=
water	74:30	0:0	4	i_extended
water	74:40	0:0	4	;
water	75:8	0:0	4	i_channel_mask
op	75:23	0:0	4	=
call	75:25	75:59	4	GetDWLE
arg	75:34	75:59	5	&p_wf_ext->dwChannelMask
op	75:34	0:0	6	&
water	75:35	0:0	6	p_wf_ext
op	75:43	0:0	6	->
water	75:45	0:0	6	dwChannelMask
water	75:60	0:0	4	;
if	76:8	93:8	4	(i_channel_mask)
cond	76:12	76:12	5	i_channel_mask
water	76:12	0:0	6	i_channel_mask
stmts	77:8	93:8	5	
water	77:8	0:0	6	{
for	78:12	82:12	6	(i = 0 ;i < sizeof ( pi_channels_src ) / sizeof ( uint32_t );i ++)
forinit	78:17	78:22	7	i = 0 ;
water	78:17	0:0	8	i
op	78:19	0:0	8	=
water	78:21	0:0	8	0
water	78:22	0:0	8	;
cond	78:24	78:67	7	i < sizeof ( pi_channels_src ) / sizeof ( uint32_t )
water	78:24	0:0	8	i
op	78:26	0:0	8	<
op	78:28	0:0	8	sizeof
water	78:34	0:0	8	(
water	78:35	0:0	8	pi_channels_src
water	78:50	0:0	8	)
op	78:51	0:0	8	/
op	78:52	0:0	8	sizeof
water	78:58	0:0	8	(
water	78:59	0:0	8	uint32_t
water	78:67	0:0	8	)
forexpr	78:70	78:71	7	i ++
water	78:70	0:0	8	i
op	78:71	0:0	8	++
stmts	79:12	82:12	7	
water	79:12	0:0	8	{
if	80:16	81:62	8	(i_channel_mask & pi_channels_src [ i ])
cond	80:20	80:54	9	i_channel_mask & pi_channels_src [ i ]
water	80:20	0:0	10	i_channel_mask
op	80:35	0:0	10	&
water	80:37	0:0	10	pi_channels_src
op	80:52	0:0	10	[
water	80:53	0:0	10	i
op	80:54	0:0	10	]
stmts	81:20	81:62	9	
water	81:20	0:0	10	p_sys
op	81:25	0:0	10	->
water	81:27	0:0	10	i_channel_mask
op	81:42	0:0	10	|=
water	81:45	0:0	10	pi_channels_in
op	81:59	0:0	10	[
water	81:60	0:0	10	i
op	81:61	0:0	10	]
water	81:62	0:0	10	;
water	82:12	0:0	8	}
if	83:12	90:64	6	(p_sys -> fmt . i_codec ==VLC_FOURCC ('a' ,'r' ,'a' ,'w' ) || p_sys -> fmt . i_codec ==VLC_FOURCC ('p' ,'c' ,'m' ,' ' ) || p_sys -> fmt . i_codec ==VLC_FOURCC ('a' ,'f' ,'l' ,'t' ))
cond	83:16	85:64	7	p_sys -> fmt . i_codec ==VLC_FOURCC ('a' ,'r' ,'a' ,'w' ) || p_sys -> fmt . i_codec ==VLC_FOURCC ('p' ,'c' ,'m' ,' ' ) || p_sys -> fmt . i_codec ==VLC_FOURCC ('a' ,'f' ,'l' ,'t' )
water	83:16	0:0	8	p_sys
op	83:21	0:0	8	->
water	83:23	0:0	8	fmt
op	83:26	0:0	8	.
water	83:27	0:0	8	i_codec
op	83:35	0:0	8	==
call	83:38	83:64	8	VLC_FOURCC
arg	83:49	83:52	9	'a'
water	83:49	0:0	10	'a'
arg	83:53	83:56	9	'r'
water	83:53	0:0	10	'r'
arg	83:57	83:60	9	'a'
water	83:57	0:0	10	'a'
arg	83:61	83:64	9	'w'
water	83:61	0:0	10	'w'
op	83:66	0:0	8	||
water	84:16	0:0	8	p_sys
op	84:21	0:0	8	->
water	84:23	0:0	8	fmt
op	84:26	0:0	8	.
water	84:27	0:0	8	i_codec
op	84:35	0:0	8	==
call	84:38	84:64	8	VLC_FOURCC
arg	84:49	84:52	9	'p'
water	84:49	0:0	10	'p'
arg	84:53	84:56	9	'c'
water	84:53	0:0	10	'c'
arg	84:57	84:60	9	'm'
water	84:57	0:0	10	'm'
arg	84:61	84:64	9	' '
water	84:61	0:0	10	' '
op	84:66	0:0	8	||
water	85:16	0:0	8	p_sys
op	85:21	0:0	8	->
water	85:23	0:0	8	fmt
op	85:26	0:0	8	.
water	85:27	0:0	8	i_codec
op	85:35	0:0	8	==
call	85:38	85:64	8	VLC_FOURCC
arg	85:49	85:52	9	'a'
water	85:49	0:0	10	'a'
arg	85:53	85:56	9	'f'
water	85:53	0:0	10	'f'
arg	85:57	85:60	9	'l'
water	85:57	0:0	10	'l'
arg	85:61	85:64	9	't'
water	85:61	0:0	10	't'
stmts	86:12	90:64	7	
water	86:12	0:0	8	p_sys
op	86:17	0:0	8	->
water	86:19	0:0	8	b_chan_reorder
op	86:34	0:0	8	=
call	87:16	90:63	8	aout_CheckChannelReorder
arg	87:42	87:56	9	pi_channels_in
water	87:42	0:0	10	pi_channels_in
arg	87:58	87:73	9	pi_channels_out
water	87:58	0:0	10	pi_channels_out
arg	88:42	88:63	9	p_sys->i_channel_mask
water	88:42	0:0	10	p_sys
op	88:47	0:0	10	->
water	88:49	0:0	10	i_channel_mask
arg	89:42	89:69	9	p_sys->fmt.audio.i_channels
water	89:42	0:0	10	p_sys
op	89:47	0:0	10	->
water	89:49	0:0	10	fmt
op	89:52	0:0	10	.
water	89:53	0:0	10	audio
op	89:58	0:0	10	.
water	89:59	0:0	10	i_channels
arg	90:42	90:63	9	p_sys->pi_chan_table
water	90:42	0:0	10	p_sys
op	90:47	0:0	10	->
water	90:49	0:0	10	pi_chan_table
water	90:64	0:0	8	;
call	91:12	92:71	6	msg_Dbg
arg	91:21	91:28	7	p_demux
water	91:21	0:0	8	p_demux
arg	91:30	91:64	7	"channel mask: %x, reordering: %i"
water	91:30	0:0	8	"channel mask: %x, reordering: %i"
arg	92:21	92:42	7	p_sys->i_channel_mask
water	92:21	0:0	8	p_sys
op	92:26	0:0	8	->
water	92:28	0:0	8	i_channel_mask
arg	92:44	92:71	7	(int)p_sys->b_chan_reorder
water	92:44	0:0	8	(
water	92:45	0:0	8	int
water	92:48	0:0	8	)
water	92:49	0:0	8	p_sys
op	92:54	0:0	8	->
water	92:56	0:0	8	b_chan_reorder
water	92:72	0:0	6	;
water	93:8	0:0	6	}
water	94:8	0:0	4	p_sys
op	94:13	0:0	4	->
water	94:15	0:0	4	fmt
op	94:18	0:0	4	.
water	94:19	0:0	4	audio
op	94:24	0:0	4	.
water	94:25	0:0	4	i_physical_channels
op	94:45	0:0	4	=
water	95:12	0:0	4	p_sys
op	95:17	0:0	4	->
water	95:19	0:0	4	fmt
op	95:22	0:0	4	.
water	95:23	0:0	4	audio
op	95:28	0:0	4	.
water	95:29	0:0	4	i_original_channels
op	95:49	0:0	4	=
water	96:16	0:0	4	p_sys
op	96:21	0:0	4	->
water	96:23	0:0	4	i_channel_mask
water	96:37	0:0	4	;
water	97:4	0:0	4	}
if	98:4	103:4	2	(p_sys -> fmt . i_extra > 0)
cond	98:8	98:29	3	p_sys -> fmt . i_extra > 0
water	98:8	0:0	4	p_sys
op	98:13	0:0	4	->
water	98:15	0:0	4	fmt
op	98:18	0:0	4	.
water	98:19	0:0	4	i_extra
op	98:27	0:0	4	>
water	98:29	0:0	4	0
stmts	99:4	103:4	3	
water	99:4	0:0	4	{
water	100:8	0:0	4	p_sys
op	100:13	0:0	4	->
water	100:15	0:0	4	fmt
op	100:18	0:0	4	.
water	100:19	0:0	4	p_extra
op	100:27	0:0	4	=
call	100:29	100:56	4	malloc
arg	100:37	100:56	5	p_sys->fmt.i_extra
water	100:37	0:0	6	p_sys
op	100:42	0:0	6	->
water	100:44	0:0	6	fmt
op	100:47	0:0	6	.
water	100:48	0:0	6	i_extra
water	100:57	0:0	4	;
call	101:8	102:35	4	memcpy
arg	101:16	101:34	5	p_sys->fmt.p_extra
water	101:16	0:0	6	p_sys
op	101:21	0:0	6	->
water	101:23	0:0	6	fmt
op	101:26	0:0	6	.
water	101:27	0:0	6	p_extra
arg	101:36	101:66	5	((uint8_t*)p_wf)+i_extended
water	101:36	0:0	6	(
water	101:37	0:0	6	(
water	101:38	0:0	6	uint8_t
op	101:46	0:0	6	*
water	101:47	0:0	6	)
water	101:48	0:0	6	p_wf
water	101:52	0:0	6	)
op	101:54	0:0	6	+
water	101:56	0:0	6	i_extended
arg	102:16	102:35	5	p_sys->fmt.i_extra
water	102:16	0:0	6	p_sys
op	102:21	0:0	6	->
water	102:23	0:0	6	fmt
op	102:26	0:0	6	.
water	102:27	0:0	6	i_extra
water	102:36	0:0	4	;
water	103:4	0:0	4	}
call	104:4	110:66	2	msg_Dbg
arg	104:13	104:20	3	p_demux
water	104:13	0:0	4	p_demux
arg	104:22	106:29	3	"format: 0x%4.4x, fourcc: %4.4s, channels: %d, ""freq: %d Hz, bitrate: %dKo/s, blockalign: %d, bits/samples: %d, ""extra size: %d"
water	104:22	0:0	4	"format: 0x%4.4x, fourcc: %4.4s, channels: %d, "
water	105:13	0:0	4	"freq: %d Hz, bitrate: %dKo/s, blockalign: %d, bits/samples: %d, "
water	106:13	0:0	4	"extra size: %d"
arg	107:13	107:40	3	GetWLE(&p_wf->wFormatTag)
call	107:13	107:39	4	GetWLE
arg	107:21	107:39	5	&p_wf->wFormatTag
op	107:21	0:0	6	&
water	107:22	0:0	6	p_wf
op	107:26	0:0	6	->
water	107:28	0:0	6	wFormatTag
arg	107:42	107:69	3	(char*)&p_sys->fmt.i_codec
water	107:42	0:0	4	(
water	107:43	0:0	4	char
op	107:48	0:0	4	*
water	107:49	0:0	4	)
op	107:50	0:0	4	&
water	107:51	0:0	4	p_sys
op	107:56	0:0	4	->
water	107:58	0:0	4	fmt
op	107:61	0:0	4	.
water	107:62	0:0	4	i_codec
arg	108:13	108:40	3	p_sys->fmt.audio.i_channels
water	108:13	0:0	4	p_sys
op	108:18	0:0	4	->
water	108:20	0:0	4	fmt
op	108:23	0:0	4	.
water	108:24	0:0	4	audio
op	108:29	0:0	4	.
water	108:30	0:0	4	i_channels
arg	108:42	108:65	3	p_sys->fmt.audio.i_rate
water	108:42	0:0	4	p_sys
op	108:47	0:0	4	->
water	108:49	0:0	4	fmt
op	108:52	0:0	4	.
water	108:53	0:0	4	audio
op	108:58	0:0	4	.
water	108:59	0:0	4	i_rate
arg	109:13	109:44	3	p_sys->fmt.i_bitrate/8/1024
water	109:13	0:0	4	p_sys
op	109:18	0:0	4	->
water	109:20	0:0	4	fmt
op	109:23	0:0	4	.
water	109:24	0:0	4	i_bitrate
op	109:34	0:0	4	/
water	109:36	0:0	4	8
op	109:38	0:0	4	/
water	109:40	0:0	4	1024
arg	109:46	109:75	3	p_sys->fmt.audio.i_blockalign
water	109:46	0:0	4	p_sys
op	109:51	0:0	4	->
water	109:53	0:0	4	fmt
op	109:56	0:0	4	.
water	109:57	0:0	4	audio
op	109:62	0:0	4	.
water	109:63	0:0	4	i_blockalign
arg	110:13	110:45	3	p_sys->fmt.audio.i_bitspersample
water	110:13	0:0	4	p_sys
op	110:18	0:0	4	->
water	110:20	0:0	4	fmt
op	110:23	0:0	4	.
water	110:24	0:0	4	audio
op	110:29	0:0	4	.
water	110:30	0:0	4	i_bitspersample
arg	110:47	110:66	3	p_sys->fmt.i_extra
water	110:47	0:0	4	p_sys
op	110:52	0:0	4	->
water	110:54	0:0	4	fmt
op	110:57	0:0	4	.
water	110:58	0:0	4	i_extra
water	110:67	0:0	2	;
call	111:4	111:15	2	free
arg	111:10	111:15	3	p_wf
water	111:10	0:0	4	p_wf
water	111:16	0:0	2	;
water	112:4	0:0	2	p_wf
op	112:9	0:0	2	=
water	112:11	0:0	2	NULL
water	112:15	0:0	2	;
switch	113:4	146:4	2	(p_sys -> fmt . i_codec)
cond	113:12	113:23	3	p_sys -> fmt . i_codec
water	113:12	0:0	4	p_sys
op	113:17	0:0	4	->
water	113:19	0:0	4	fmt
op	113:22	0:0	4	.
water	113:23	0:0	4	i_codec
stmts	114:4	146:4	3	
water	114:4	0:0	4	{
water	115:4	0:0	4	case
call	115:9	115:40	4	VLC_FOURCC
arg	115:21	115:24	5	'a'
water	115:21	0:0	6	'a'
arg	115:26	115:29	5	'r'
water	115:26	0:0	6	'r'
arg	115:31	115:34	5	'a'
water	115:31	0:0	6	'a'
arg	115:36	115:40	5	'w'
water	115:36	0:0	6	'w'
water	115:41	0:0	4	:
water	116:4	0:0	4	case
call	116:9	116:40	4	VLC_FOURCC
arg	116:21	116:24	5	'a'
water	116:21	0:0	6	'a'
arg	116:26	116:29	5	'f'
water	116:26	0:0	6	'f'
arg	116:31	116:34	5	'l'
water	116:31	0:0	6	'l'
arg	116:36	116:40	5	't'
water	116:36	0:0	6	't'
water	116:41	0:0	4	:
water	117:4	0:0	4	case
call	117:9	117:40	4	VLC_FOURCC
arg	117:21	117:24	5	'u'
water	117:21	0:0	6	'u'
arg	117:26	117:29	5	'l'
water	117:26	0:0	6	'l'
arg	117:31	117:34	5	'a'
water	117:31	0:0	6	'a'
arg	117:36	117:40	5	'w'
water	117:36	0:0	6	'w'
water	117:41	0:0	4	:
water	118:4	0:0	4	case
call	118:9	118:40	4	VLC_FOURCC
arg	118:21	118:24	5	'a'
water	118:21	0:0	6	'a'
arg	118:26	118:29	5	'l'
water	118:26	0:0	6	'l'
arg	118:31	118:34	5	'a'
water	118:31	0:0	6	'a'
arg	118:36	118:40	5	'w'
water	118:36	0:0	6	'w'
water	118:41	0:0	4	:
water	119:4	0:0	4	case
call	119:9	119:40	4	VLC_FOURCC
arg	119:21	119:24	5	'm'
water	119:21	0:0	6	'm'
arg	119:26	119:29	5	'l'
water	119:26	0:0	6	'l'
arg	119:31	119:34	5	'a'
water	119:31	0:0	6	'a'
arg	119:36	119:40	5	'w'
water	119:36	0:0	6	'w'
water	119:41	0:0	4	:
water	120:4	0:0	4	case
call	120:9	120:40	4	VLC_FOURCC
arg	120:21	120:24	5	'p'
water	120:21	0:0	6	'p'
arg	120:26	120:29	5	'c'
water	120:26	0:0	6	'c'
arg	120:31	120:34	5	'm'
water	120:31	0:0	6	'm'
arg	120:36	120:40	5	' '
water	120:36	0:0	6	' '
water	120:41	0:0	4	:
call	121:8	122:47	4	FrameInfo_PCM
arg	121:23	121:30	5	p_demux
water	121:23	0:0	6	p_demux
arg	121:32	121:52	5	&p_sys->i_frame_size
op	121:32	0:0	6	&
water	121:33	0:0	6	p_sys
op	121:38	0:0	6	->
water	121:40	0:0	6	i_frame_size
arg	122:23	122:47	5	&p_sys->i_frame_samples
op	122:23	0:0	6	&
water	122:24	0:0	6	p_sys
op	122:29	0:0	6	->
water	122:31	0:0	6	i_frame_samples
water	122:48	0:0	4	;
break	123:8	123:13	4	
water	124:4	0:0	4	case
call	124:9	124:42	4	VLC_FOURCC
arg	124:21	124:24	5	'm'
water	124:21	0:0	6	'm'
arg	124:26	124:29	5	's'
water	124:26	0:0	6	's'
arg	124:31	124:35	5	0x00
water	124:31	0:0	6	0
water	124:32	0:0	6	x00
arg	124:37	124:42	5	0x02
water	124:37	0:0	6	0
water	124:38	0:0	6	x02
water	124:43	0:0	4	:
call	125:8	126:52	4	FrameInfo_MS_ADPCM
arg	125:28	125:35	5	p_demux
water	125:28	0:0	6	p_demux
arg	125:37	125:57	5	&p_sys->i_frame_size
op	125:37	0:0	6	&
water	125:38	0:0	6	p_sys
op	125:43	0:0	6	->
water	125:45	0:0	6	i_frame_size
arg	126:28	126:52	5	&p_sys->i_frame_samples
op	126:28	0:0	6	&
water	126:29	0:0	6	p_sys
op	126:34	0:0	6	->
water	126:36	0:0	6	i_frame_samples
water	126:53	0:0	4	;
break	127:8	127:13	4	
water	128:4	0:0	4	case
call	128:9	128:42	4	VLC_FOURCC
arg	128:21	128:24	5	'm'
water	128:21	0:0	6	'm'
arg	128:26	128:29	5	's'
water	128:26	0:0	6	's'
arg	128:31	128:35	5	0x00
water	128:31	0:0	6	0
water	128:32	0:0	6	x00
arg	128:37	128:42	5	0x11
water	128:37	0:0	6	0
water	128:38	0:0	6	x11
water	128:43	0:0	4	:
call	129:8	130:53	4	FrameInfo_IMA_ADPCM
arg	129:29	129:36	5	p_demux
water	129:29	0:0	6	p_demux
arg	129:38	129:58	5	&p_sys->i_frame_size
op	129:38	0:0	6	&
water	129:39	0:0	6	p_sys
op	129:44	0:0	6	->
water	129:46	0:0	6	i_frame_size
arg	130:29	130:53	5	&p_sys->i_frame_samples
op	130:29	0:0	6	&
water	130:30	0:0	6	p_sys
op	130:35	0:0	6	->
water	130:37	0:0	6	i_frame_samples
water	130:54	0:0	4	;
break	131:8	131:13	4	
water	132:4	0:0	4	case
call	132:9	132:42	4	VLC_FOURCC
arg	132:21	132:24	5	'm'
water	132:21	0:0	6	'm'
arg	132:26	132:29	5	's'
water	132:26	0:0	6	's'
arg	132:31	132:35	5	0x00
water	132:31	0:0	6	0
water	132:32	0:0	6	x00
arg	132:37	132:42	5	0x61
water	132:37	0:0	6	0
water	132:38	0:0	6	x61
water	132:43	0:0	4	:
water	133:4	0:0	4	case
call	133:9	133:42	4	VLC_FOURCC
arg	133:21	133:24	5	'm'
water	133:21	0:0	6	'm'
arg	133:26	133:29	5	's'
water	133:26	0:0	6	's'
arg	133:31	133:35	5	0x00
water	133:31	0:0	6	0
water	133:32	0:0	6	x00
arg	133:37	133:42	5	0x62
water	133:37	0:0	6	0
water	133:38	0:0	6	x62
water	133:43	0:0	4	:
call	135:8	136:52	4	FrameInfo_MS_ADPCM
arg	135:28	135:35	5	p_demux
water	135:28	0:0	6	p_demux
arg	135:37	135:57	5	&p_sys->i_frame_size
op	135:37	0:0	6	&
water	135:38	0:0	6	p_sys
op	135:43	0:0	6	->
water	135:45	0:0	6	i_frame_size
arg	136:28	136:52	5	&p_sys->i_frame_samples
op	136:28	0:0	6	&
water	136:29	0:0	6	p_sys
op	136:34	0:0	6	->
water	136:36	0:0	6	i_frame_samples
water	136:53	0:0	4	;
break	137:8	137:13	4	
water	138:4	0:0	4	case
call	138:9	138:40	4	VLC_FOURCC
arg	138:21	138:24	5	'm'
water	138:21	0:0	6	'm'
arg	138:26	138:29	5	'p'
water	138:26	0:0	6	'p'
arg	138:31	138:34	5	'g'
water	138:31	0:0	6	'g'
arg	138:36	138:40	5	'a'
water	138:36	0:0	6	'a'
water	138:41	0:0	4	:
water	139:4	0:0	4	case
call	139:9	139:40	4	VLC_FOURCC
arg	139:21	139:24	5	'a'
water	139:21	0:0	6	'a'
arg	139:26	139:29	5	'5'
water	139:26	0:0	6	'5'
arg	139:31	139:34	5	'2'
water	139:31	0:0	6	'2'
arg	139:36	139:40	5	' '
water	139:36	0:0	6	' '
water	139:41	0:0	4	:
water	141:8	0:0	4	goto
water	141:13	0:0	4	relay
water	141:18	0:0	4	;
label	142:4	142:11	4	default :
call	143:8	144:44	4	msg_Err
arg	143:17	143:24	5	p_demux
water	143:17	0:0	6	p_demux
arg	143:26	143:53	5	"unsupported codec (%4.4s)"
water	143:26	0:0	6	"unsupported codec (%4.4s)"
arg	144:17	144:44	5	(char*)&p_sys->fmt.i_codec
water	144:17	0:0	6	(
water	144:18	0:0	6	char
op	144:22	0:0	6	*
water	144:23	0:0	6	)
op	144:24	0:0	6	&
water	144:25	0:0	6	p_sys
op	144:30	0:0	6	->
water	144:32	0:0	6	fmt
op	144:35	0:0	6	.
water	144:36	0:0	6	i_codec
water	144:45	0:0	4	;
goto	145:8	145:18	4	error
water	145:13	0:0	5	error
water	146:4	0:0	4	}
call	147:4	147:56	2	msg_Dbg
arg	147:13	147:20	3	p_demux
water	147:13	0:0	4	p_demux
arg	147:22	147:45	3	"found %s audio format"
water	147:22	0:0	4	"found %s audio format"
arg	147:47	147:56	3	psz_name
water	147:47	0:0	4	psz_name
water	147:57	0:0	2	;
if	148:4	152:4	2	(ChunkFind (p_demux ,"data" ,& p_sys -> i_data_size ))
cond	148:8	148:56	3	ChunkFind (p_demux ,"data" ,& p_sys -> i_data_size )
call	148:8	148:56	4	ChunkFind
arg	148:19	148:26	5	p_demux
water	148:19	0:0	6	p_demux
arg	148:28	148:34	5	"data"
water	148:28	0:0	6	"data"
arg	148:36	148:56	5	&p_sys->i_data_size
op	148:36	0:0	6	&
water	148:37	0:0	6	p_sys
op	148:42	0:0	6	->
water	148:44	0:0	6	i_data_size
stmts	149:4	152:4	3	
water	149:4	0:0	4	{
call	150:8	150:53	4	msg_Err
arg	150:17	150:24	5	p_demux
water	150:17	0:0	6	p_demux
arg	150:26	150:53	5	"cannot find 'data' chunk"
water	150:26	0:0	6	"cannot find 'data' chunk"
water	150:54	0:0	4	;
goto	151:8	151:18	4	error
water	151:13	0:0	5	error
water	152:4	0:0	4	}
call	153:4	153:37	2	stream_Read
arg	153:17	153:27	3	p_demux->s
water	153:17	0:0	4	p_demux
op	153:24	0:0	4	->
water	153:26	0:0	4	s
arg	153:29	153:33	3	NULL
water	153:29	0:0	4	NULL
arg	153:35	153:37	3	8
water	153:35	0:0	4	8
water	153:38	0:0	2	;
water	154:4	0:0	2	p_sys
op	154:9	0:0	2	->
water	154:11	0:0	2	i_data_pos
op	154:22	0:0	2	=
call	154:24	154:48	2	stream_Tell
arg	154:37	154:48	3	p_demux->s
water	154:37	0:0	4	p_demux
op	154:44	0:0	4	->
water	154:46	0:0	4	s
water	154:49	0:0	2	;
if	155:4	159:4	2	(p_sys -> fmt . i_bitrate <= 0)
cond	155:8	155:32	3	p_sys -> fmt . i_bitrate <= 0
water	155:8	0:0	4	p_sys
op	155:13	0:0	4	->
water	155:15	0:0	4	fmt
op	155:18	0:0	4	.
water	155:19	0:0	4	i_bitrate
op	155:29	0:0	4	<=
water	155:32	0:0	4	0
stmts	156:4	159:4	3	
water	156:4	0:0	4	{
water	157:8	0:0	4	p_sys
op	157:13	0:0	4	->
water	157:15	0:0	4	fmt
op	157:18	0:0	4	.
water	157:19	0:0	4	i_bitrate
op	157:29	0:0	4	=
water	157:31	0:0	4	(
water	157:32	0:0	4	mtime_t
water	157:39	0:0	4	)
water	157:40	0:0	4	p_sys
op	157:45	0:0	4	->
water	157:47	0:0	4	i_frame_size
op	157:60	0:0	4	*
water	158:12	0:0	4	p_sys
op	158:17	0:0	4	->
water	158:19	0:0	4	fmt
op	158:22	0:0	4	.
water	158:23	0:0	4	audio
op	158:28	0:0	4	.
water	158:29	0:0	4	i_rate
op	158:36	0:0	4	*
water	158:38	0:0	4	8
op	158:40	0:0	4	/
water	158:42	0:0	4	p_sys
op	158:47	0:0	4	->
water	158:49	0:0	4	i_frame_samples
water	158:64	0:0	4	;
water	159:4	0:0	4	}
water	160:4	0:0	2	p_sys
op	160:9	0:0	2	->
water	160:11	0:0	2	p_es
op	160:16	0:0	2	=
call	160:18	160:56	2	es_out_Add
arg	160:30	160:42	3	p_demux->out
water	160:30	0:0	4	p_demux
op	160:37	0:0	4	->
water	160:39	0:0	4	out
arg	160:44	160:56	3	&p_sys->fmt
op	160:44	0:0	4	&
water	160:45	0:0	4	p_sys
op	160:50	0:0	4	->
water	160:52	0:0	4	fmt
water	160:57	0:0	2	;
call	161:4	161:55	2	date_Init
arg	161:15	161:26	3	&p_sys->pts
op	161:15	0:0	4	&
water	161:16	0:0	4	p_sys
op	161:21	0:0	4	->
water	161:23	0:0	4	pts
arg	161:28	161:51	3	p_sys->fmt.audio.i_rate
water	161:28	0:0	4	p_sys
op	161:33	0:0	4	->
water	161:35	0:0	4	fmt
op	161:38	0:0	4	.
water	161:39	0:0	4	audio
op	161:44	0:0	4	.
water	161:45	0:0	4	i_rate
arg	161:53	161:55	3	1
water	161:53	0:0	4	1
water	161:56	0:0	2	;
call	162:4	162:29	2	date_Set
arg	162:14	162:25	3	&p_sys->pts
op	162:14	0:0	4	&
water	162:15	0:0	4	p_sys
op	162:20	0:0	4	->
water	162:22	0:0	4	pts
arg	162:27	162:29	3	1
water	162:27	0:0	4	1
water	162:30	0:0	2	;
return	163:4	163:22	2	VLC_SUCCESS
water	163:11	0:0	3	VLC_SUCCESS
label	164:0	164:5	2	error :
call	165:4	165:15	2	free
arg	165:10	165:15	3	p_wf
water	165:10	0:0	4	p_wf
water	165:16	0:0	2	;
label	166:0	166:5	2	relay :
call	167:4	167:16	2	free
arg	167:10	167:16	3	p_sys
water	167:10	0:0	4	p_sys
water	167:17	0:0	2	;
return	168:4	168:23	2	VLC_EGENERIC
water	168:11	0:0	3	VLC_EGENERIC
