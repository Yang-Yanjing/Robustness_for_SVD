func	1:0	266:0	0	static int	DemuxPacket
params	1:22	0:0	1	
param	1:24	1:41	2	demux_t *	p_demux
stmnts	0:0	265:12	1	
decl	3:4	3:39	2	demux_sys_t	*p_sys
op	3:23	0:0	2	=
water	3:25	0:0	2	p_demux
op	3:32	0:0	2	->
water	3:34	0:0	2	p_sys
decl	4:4	4:71	2	int	i_data_packet_min
op	4:34	0:0	2	=
water	4:36	0:0	2	p_sys
op	4:41	0:0	2	->
water	4:43	0:0	2	p_fp
op	4:47	0:0	2	->
water	4:49	0:0	2	i_min_data_packet_size
decl	5:4	5:25	2	const uint8_t	*p_peek
decl	6:4	6:22	2	int	i_skip
decl	7:4	7:34	2	int	i_packet_size_left
decl	8:4	8:30	2	int	i_packet_flags
decl	9:4	9:33	2	int	i_packet_property
decl	10:4	10:41	2	int	b_packet_multiple_payload
decl	11:4	11:31	2	int	i_packet_length
decl	12:4	12:33	2	int	i_packet_sequence
decl	13:4	13:39	2	int	i_packet_padding_length
decl	14:4	14:34	2	uint32_t	i_packet_send_time
decl	15:4	15:33	2	uint16_t	i_packet_duration
decl	16:4	16:25	2	int	i_payload
decl	17:4	17:31	2	int	i_payload_count
decl	18:4	18:37	2	int	i_payload_length_type
if	19:4	23:4	2	(stream_Peek (p_demux -> s ,& p_peek ,i_data_packet_min ) < i_data_packet_min)
cond	19:8	19:60	3	stream_Peek (p_demux -> s ,& p_peek ,i_data_packet_min ) < i_data_packet_min
call	19:8	19:58	4	stream_Peek
arg	19:21	19:31	5	p_demux->s
water	19:21	0:0	6	p_demux
op	19:28	0:0	6	->
water	19:30	0:0	6	s
arg	19:33	19:40	5	&p_peek
op	19:33	0:0	6	&
water	19:34	0:0	6	p_peek
arg	19:41	19:58	5	i_data_packet_min
water	19:41	0:0	6	i_data_packet_min
op	19:59	0:0	4	<
water	19:60	0:0	4	i_data_packet_min
stmts	20:4	23:4	3	
water	20:4	0:0	4	{
call	21:8	21:73	4	msg_Warn
arg	21:18	21:25	5	p_demux
water	21:18	0:0	6	p_demux
arg	21:27	21:73	5	"cannot peek while getting new packet, EOF ?"
water	21:27	0:0	6	"cannot peek while getting new packet, EOF ?"
water	21:74	0:0	4	;
return	22:8	22:16	4	0
water	22:15	0:0	5	0
water	23:4	0:0	4	}
water	24:4	0:0	2	i_skip
op	24:11	0:0	2	=
water	24:13	0:0	2	0
water	24:14	0:0	2	;
if	26:4	42:4	2	(p_peek [ 0 ] & 0 x80)
cond	26:8	26:19	3	p_peek [ 0 ] & 0 x80
water	26:8	0:0	4	p_peek
op	26:14	0:0	4	[
water	26:15	0:0	4	0
op	26:16	0:0	4	]
op	26:17	0:0	4	&
water	26:18	0:0	4	0
water	26:19	0:0	4	x80
stmts	27:4	42:4	3	
water	27:4	0:0	4	{
decl	28:8	28:51	4	unsigned int	i_error_correction_length_type
decl	29:8	29:51	4	unsigned int	i_error_correction_data_length
decl	30:8	30:42	4	unsigned int	i_opaque_data_present
water	31:8	0:0	4	i_error_correction_data_length
op	31:39	0:0	4	=
water	31:41	0:0	4	p_peek
op	31:47	0:0	4	[
water	31:48	0:0	4	0
op	31:49	0:0	4	]
op	31:51	0:0	4	&
water	31:53	0:0	4	0
water	31:54	0:0	4	x0f
water	31:57	0:0	4	;
water	32:8	0:0	4	i_opaque_data_present
op	32:30	0:0	4	=
water	32:32	0:0	4	(
water	32:34	0:0	4	p_peek
op	32:40	0:0	4	[
water	32:41	0:0	4	0
op	32:42	0:0	4	]
op	32:44	0:0	4	>>
water	32:47	0:0	4	4
water	32:49	0:0	4	)
op	32:50	0:0	4	&
water	32:52	0:0	4	0
water	32:53	0:0	4	x01
water	32:56	0:0	4	;
water	33:8	0:0	4	i_error_correction_length_type
op	33:39	0:0	4	=
water	33:41	0:0	4	(
water	33:43	0:0	4	p_peek
op	33:49	0:0	4	[
water	33:50	0:0	4	0
op	33:51	0:0	4	]
op	33:53	0:0	4	>>
water	33:56	0:0	4	5
water	33:58	0:0	4	)
op	33:60	0:0	4	&
water	33:62	0:0	4	0
water	33:63	0:0	4	x03
water	33:66	0:0	4	;
water	34:8	0:0	4	i_skip
op	34:15	0:0	4	+=
water	34:18	0:0	4	1
water	34:19	0:0	4	;
if	35:8	40:8	4	(i_error_correction_length_type != 0 x00 || i_opaque_data_present != 0 || i_error_correction_data_length != 0 x02)
cond	35:12	37:47	5	i_error_correction_length_type != 0 x00 || i_opaque_data_present != 0 || i_error_correction_data_length != 0 x02
water	35:12	0:0	6	i_error_correction_length_type
op	35:43	0:0	6	!=
water	35:46	0:0	6	0
water	35:47	0:0	6	x00
op	35:51	0:0	6	||
water	36:12	0:0	6	i_opaque_data_present
op	36:34	0:0	6	!=
water	36:37	0:0	6	0
op	36:39	0:0	6	||
water	37:12	0:0	6	i_error_correction_data_length
op	37:43	0:0	6	!=
water	37:46	0:0	6	0
water	37:47	0:0	6	x02
stmts	38:8	40:8	5	
water	38:8	0:0	6	{
goto	39:12	39:36	6	loop_error_recovery
water	39:17	0:0	7	loop_error_recovery
water	40:8	0:0	6	}
water	41:8	0:0	4	i_skip
op	41:15	0:0	4	+=
water	41:18	0:0	4	i_error_correction_data_length
water	41:48	0:0	4	;
water	42:4	0:0	4	}
else	43:4	46:4	2
stmts	44:4	46:4	3	
water	44:4	0:0	4	{
call	45:8	45:52	4	msg_Warn
arg	45:18	45:25	5	p_demux
water	45:18	0:0	6	p_demux
arg	45:27	45:52	5	"p_peek[0]&0x80 != 0x80"
water	45:27	0:0	6	"p_peek[0]&0x80 != 0x80"
water	45:53	0:0	4	;
water	46:4	0:0	4	}
if	48:4	51:4	2	(i_skip + 2 >= i_data_packet_min)
cond	48:8	48:22	3	i_skip + 2 >= i_data_packet_min
water	48:8	0:0	4	i_skip
op	48:15	0:0	4	+
water	48:17	0:0	4	2
op	48:19	0:0	4	>=
water	48:22	0:0	4	i_data_packet_min
stmts	49:4	51:4	3	
water	49:4	0:0	4	{
goto	50:8	50:32	4	loop_error_recovery
water	50:13	0:0	5	loop_error_recovery
water	51:4	0:0	4	}
water	52:4	0:0	2	i_packet_flags
op	52:19	0:0	2	=
water	52:21	0:0	2	p_peek
op	52:27	0:0	2	[
water	52:28	0:0	2	i_skip
op	52:34	0:0	2	]
water	52:35	0:0	2	;
water	52:37	0:0	2	i_skip
op	52:43	0:0	2	++
water	52:45	0:0	2	;
water	53:4	0:0	2	i_packet_property
op	53:22	0:0	2	=
water	53:24	0:0	2	p_peek
op	53:30	0:0	2	[
water	53:31	0:0	2	i_skip
op	53:37	0:0	2	]
water	53:38	0:0	2	;
water	53:40	0:0	2	i_skip
op	53:46	0:0	2	++
water	53:48	0:0	2	;
water	54:4	0:0	2	b_packet_multiple_payload
op	54:30	0:0	2	=
water	54:32	0:0	2	i_packet_flags
op	54:46	0:0	2	&
water	54:47	0:0	2	0
water	54:48	0:0	2	x01
water	54:51	0:0	2	;
call	56:4	56:72	2	GETVALUE2b
arg	56:16	56:35	3	i_packet_flags>>5
water	56:16	0:0	4	i_packet_flags
op	56:31	0:0	4	>>
water	56:34	0:0	4	5
arg	56:37	56:52	3	i_packet_length
water	56:37	0:0	4	i_packet_length
arg	56:54	56:72	3	i_data_packet_min
water	56:54	0:0	4	i_data_packet_min
water	56:73	0:0	2	;
call	57:4	57:58	2	GETVALUE2b
arg	57:16	57:35	3	i_packet_flags>>1
water	57:16	0:0	4	i_packet_flags
op	57:31	0:0	4	>>
water	57:34	0:0	4	1
arg	57:37	57:54	3	i_packet_sequence
water	57:37	0:0	4	i_packet_sequence
arg	57:56	57:58	3	0
water	57:56	0:0	4	0
water	57:59	0:0	2	;
call	58:4	58:64	2	GETVALUE2b
arg	58:16	58:35	3	i_packet_flags>>3
water	58:16	0:0	4	i_packet_flags
op	58:31	0:0	4	>>
water	58:34	0:0	4	3
arg	58:37	58:60	3	i_packet_padding_length
water	58:37	0:0	4	i_packet_padding_length
arg	58:62	58:64	3	0
water	58:62	0:0	4	0
water	58:65	0:0	2	;
if	59:4	63:4	2	(i_packet_padding_length > i_packet_length)
cond	59:8	59:34	3	i_packet_padding_length > i_packet_length
water	59:8	0:0	4	i_packet_padding_length
op	59:32	0:0	4	>
water	59:34	0:0	4	i_packet_length
stmts	60:4	63:4	3	
water	60:4	0:0	4	{
call	61:8	61:76	4	msg_Warn
arg	61:18	61:25	5	p_demux
water	61:18	0:0	6	p_demux
arg	61:27	61:50	5	"Too large padding: %d"
water	61:27	0:0	6	"Too large padding: %d"
arg	61:52	61:76	5	i_packet_padding_length
water	61:52	0:0	6	i_packet_padding_length
water	61:77	0:0	4	;
goto	62:8	62:32	4	loop_error_recovery
water	62:13	0:0	5	loop_error_recovery
water	63:4	0:0	4	}
if	64:4	69:4	2	(i_packet_length < i_data_packet_min)
cond	64:8	64:26	3	i_packet_length < i_data_packet_min
water	64:8	0:0	4	i_packet_length
op	64:24	0:0	4	<
water	64:26	0:0	4	i_data_packet_min
stmts	65:4	69:4	3	
water	65:4	0:0	4	{
water	67:8	0:0	4	i_packet_padding_length
op	67:32	0:0	4	+=
water	67:35	0:0	4	i_data_packet_min
op	67:53	0:0	4	-
water	67:55	0:0	4	i_packet_length
water	67:70	0:0	4	;
water	68:8	0:0	4	i_packet_length
op	68:24	0:0	4	=
water	68:26	0:0	4	i_data_packet_min
water	68:43	0:0	4	;
water	69:4	0:0	4	}
water	70:4	0:0	2	i_packet_send_time
op	70:23	0:0	2	=
call	70:25	70:50	2	GetDWLE
arg	70:34	70:50	3	p_peek+i_skip
water	70:34	0:0	4	p_peek
op	70:41	0:0	4	+
water	70:43	0:0	4	i_skip
water	70:51	0:0	2	;
water	70:53	0:0	2	i_skip
op	70:60	0:0	2	+=
water	70:63	0:0	2	4
water	70:64	0:0	2	;
water	71:4	0:0	2	i_packet_duration
op	71:23	0:0	2	=
call	71:25	71:49	2	GetWLE
arg	71:33	71:49	3	p_peek+i_skip
water	71:33	0:0	4	p_peek
op	71:40	0:0	4	+
water	71:42	0:0	4	i_skip
water	71:50	0:0	2	;
water	71:52	0:0	2	i_skip
op	71:59	0:0	2	+=
water	71:62	0:0	2	2
water	71:63	0:0	2	;
water	72:4	0:0	2	i_packet_size_left
op	72:23	0:0	2	=
water	72:25	0:0	2	i_packet_length
water	72:40	0:0	2	;
if	73:4	78:4	2	(b_packet_multiple_payload)
cond	73:8	73:8	3	b_packet_multiple_payload
water	73:8	0:0	4	b_packet_multiple_payload
stmts	74:4	78:4	3	
water	74:4	0:0	4	{
water	75:8	0:0	4	i_payload_count
op	75:24	0:0	4	=
water	75:26	0:0	4	p_peek
op	75:32	0:0	4	[
water	75:33	0:0	4	i_skip
op	75:39	0:0	4	]
op	75:41	0:0	4	&
water	75:43	0:0	4	0
water	75:44	0:0	4	x3f
water	75:47	0:0	4	;
water	76:8	0:0	4	i_payload_length_type
op	76:30	0:0	4	=
water	76:32	0:0	4	(
water	76:34	0:0	4	p_peek
op	76:40	0:0	4	[
water	76:41	0:0	4	i_skip
op	76:47	0:0	4	]
op	76:49	0:0	4	>>
water	76:52	0:0	4	6
water	76:54	0:0	4	)
op	76:55	0:0	4	&
water	76:56	0:0	4	0
water	76:57	0:0	4	x03
water	76:60	0:0	4	;
water	77:8	0:0	4	i_skip
op	77:14	0:0	4	++
water	77:16	0:0	4	;
water	78:4	0:0	4	}
else	79:4	83:4	2
stmts	80:4	83:4	3	
water	80:4	0:0	4	{
water	81:8	0:0	4	i_payload_count
op	81:24	0:0	4	=
water	81:26	0:0	4	1
water	81:27	0:0	4	;
water	82:8	0:0	4	i_payload_length_type
op	82:30	0:0	4	=
water	82:32	0:0	4	0
water	82:33	0:0	4	x02
water	82:36	0:0	4	;
water	83:4	0:0	4	}
for	84:4	234:4	2	(i_payload = 0 ;i_payload < i_payload_count;i_payload ++)
forinit	84:9	84:22	3	i_payload = 0 ;
water	84:9	0:0	4	i_payload
op	84:19	0:0	4	=
water	84:21	0:0	4	0
water	84:22	0:0	4	;
cond	84:24	84:36	3	i_payload < i_payload_count
water	84:24	0:0	4	i_payload
op	84:34	0:0	4	<
water	84:36	0:0	4	i_payload_count
forexpr	84:54	84:63	3	i_payload ++
water	84:54	0:0	4	i_payload
op	84:63	0:0	4	++
stmts	85:4	234:4	3	
water	85:4	0:0	4	{
decl	86:8	86:25	4	asf_track_t	*tk
decl	87:8	87:29	4	int	i_packet_keyframe
decl	88:8	88:36	4	unsigned int	i_stream_number
decl	89:8	89:33	4	int	i_media_object_number
decl	90:8	90:33	4	int	i_media_object_offset
decl	91:8	91:36	4	int	i_replicated_data_length
decl	92:8	92:33	4	int	i_payload_data_length
decl	93:8	93:30	4	int	i_payload_data_pos
decl	94:8	94:37	4	int	i_sub_payload_data_length
decl	95:8	95:17	4	int	i_tmp
decl	96:8	96:21	4	mtime_t	i_pts
decl	97:8	97:27	4	mtime_t	i_pts_delta
if	98:8	102:8	4	(i_skip >= i_packet_size_left)
cond	98:12	98:22	5	i_skip >= i_packet_size_left
water	98:12	0:0	6	i_skip
op	98:19	0:0	6	>=
water	98:22	0:0	6	i_packet_size_left
stmts	99:8	102:8	5	
water	99:8	0:0	6	{
break	101:12	101:17	6	
water	102:8	0:0	6	}
water	103:8	0:0	4	i_packet_keyframe
op	103:26	0:0	4	=
water	103:28	0:0	4	p_peek
op	103:34	0:0	4	[
water	103:35	0:0	4	i_skip
op	103:41	0:0	4	]
op	103:43	0:0	4	>>
water	103:46	0:0	4	7
water	103:47	0:0	4	;
water	104:8	0:0	4	i_stream_number
op	104:24	0:0	4	=
water	104:26	0:0	4	p_peek
op	104:32	0:0	4	[
water	104:33	0:0	4	i_skip
op	104:39	0:0	4	++
op	104:41	0:0	4	]
op	104:43	0:0	4	&
water	104:45	0:0	4	0
water	104:46	0:0	4	x7f
water	104:49	0:0	4	;
call	105:8	105:69	4	GETVALUE2b
arg	105:20	105:42	5	i_packet_property>>4
water	105:20	0:0	6	i_packet_property
op	105:38	0:0	6	>>
water	105:41	0:0	6	4
arg	105:44	105:65	5	i_media_object_number
water	105:44	0:0	6	i_media_object_number
arg	105:67	105:69	5	0
water	105:67	0:0	6	0
water	105:70	0:0	4	;
call	106:8	106:53	4	GETVALUE2b
arg	106:20	106:42	5	i_packet_property>>2
water	106:20	0:0	6	i_packet_property
op	106:38	0:0	6	>>
water	106:41	0:0	6	2
arg	106:44	106:49	5	i_tmp
water	106:44	0:0	6	i_tmp
arg	106:51	106:53	5	0
water	106:51	0:0	6	0
water	106:54	0:0	4	;
call	107:8	107:67	4	GETVALUE2b
arg	107:20	107:37	5	i_packet_property
water	107:20	0:0	6	i_packet_property
arg	107:39	107:63	5	i_replicated_data_length
water	107:39	0:0	6	i_replicated_data_length
arg	107:65	107:67	5	0
water	107:65	0:0	6	0
water	107:68	0:0	4	;
if	108:8	118:8	4	(i_replicated_data_length > 1)
cond	108:12	108:39	5	i_replicated_data_length > 1
water	108:12	0:0	6	i_replicated_data_length
op	108:37	0:0	6	>
water	108:39	0:0	6	1
stmts	109:8	118:8	5	
water	109:8	0:0	6	{
water	110:12	0:0	6	i_pts
op	110:18	0:0	6	=
water	110:20	0:0	6	(
water	110:21	0:0	6	mtime_t
water	110:28	0:0	6	)
call	110:29	110:58	6	GetDWLE
arg	110:38	110:58	7	p_peek+i_skip+4
water	110:38	0:0	8	p_peek
op	110:45	0:0	8	+
water	110:47	0:0	8	i_skip
op	110:54	0:0	8	+
water	110:56	0:0	8	4
op	110:60	0:0	6	*
water	110:62	0:0	6	1000
water	110:66	0:0	6	;
water	111:12	0:0	6	i_skip
op	111:19	0:0	6	+=
water	111:22	0:0	6	i_replicated_data_length
water	111:46	0:0	6	;
water	112:12	0:0	6	i_pts_delta
op	112:24	0:0	6	=
water	112:26	0:0	6	0
water	112:27	0:0	6	;
water	113:12	0:0	6	i_media_object_offset
op	113:34	0:0	6	=
water	113:36	0:0	6	i_tmp
water	113:41	0:0	6	;
if	114:12	117:12	6	(i_skip >= i_packet_size_left)
cond	114:16	114:26	7	i_skip >= i_packet_size_left
water	114:16	0:0	8	i_skip
op	114:23	0:0	8	>=
water	114:26	0:0	8	i_packet_size_left
stmts	115:12	117:12	7	
water	115:12	0:0	8	{
break	116:16	116:21	8	
water	117:12	0:0	8	}
water	118:8	0:0	6	}
else	119:8	125:8	4
stmts	119:13	125:8	5	
if	119:13	125:8	6	(i_replicated_data_length == 1)
cond	119:17	119:45	7	i_replicated_data_length == 1
water	119:17	0:0	8	i_replicated_data_length
op	119:42	0:0	8	==
water	119:45	0:0	8	1
stmts	120:8	125:8	7	
water	120:8	0:0	8	{
water	122:12	0:0	8	i_pts
op	122:18	0:0	8	=
water	122:20	0:0	8	(
water	122:21	0:0	8	mtime_t
water	122:28	0:0	8	)
water	122:29	0:0	8	i_tmp
op	122:35	0:0	8	*
water	122:37	0:0	8	1000
water	122:41	0:0	8	;
water	123:12	0:0	8	i_pts_delta
op	123:24	0:0	8	=
water	123:26	0:0	8	(
water	123:27	0:0	8	mtime_t
water	123:34	0:0	8	)
water	123:35	0:0	8	p_peek
op	123:41	0:0	8	[
water	123:42	0:0	8	i_skip
op	123:48	0:0	8	]
op	123:50	0:0	8	*
water	123:52	0:0	8	1000
water	123:56	0:0	8	;
water	123:58	0:0	8	i_skip
op	123:64	0:0	8	++
water	123:66	0:0	8	;
water	124:12	0:0	8	i_media_object_offset
op	124:34	0:0	8	=
water	124:36	0:0	8	0
water	124:37	0:0	8	;
water	125:8	0:0	8	}
else	126:8	131:8	4
stmts	127:8	131:8	5	
water	127:8	0:0	6	{
water	128:12	0:0	6	i_pts
op	128:18	0:0	6	=
water	128:20	0:0	6	(
water	128:21	0:0	6	mtime_t
water	128:28	0:0	6	)
water	128:29	0:0	6	i_packet_send_time
op	128:48	0:0	6	*
water	128:50	0:0	6	1000
water	128:54	0:0	6	;
water	129:12	0:0	6	i_pts_delta
op	129:24	0:0	6	=
water	129:26	0:0	6	0
water	129:27	0:0	6	;
water	130:12	0:0	6	i_media_object_offset
op	130:34	0:0	6	=
water	130:36	0:0	6	i_tmp
water	130:41	0:0	6	;
water	131:8	0:0	6	}
water	132:8	0:0	4	i_pts
op	132:14	0:0	4	=
call	132:16	132:64	4	__MAX
arg	132:23	132:60	5	i_pts-p_sys->p_fp->i_preroll*1000
water	132:23	0:0	6	i_pts
op	132:29	0:0	6	-
water	132:31	0:0	6	p_sys
op	132:36	0:0	6	->
water	132:38	0:0	6	p_fp
op	132:42	0:0	6	->
water	132:44	0:0	6	i_preroll
op	132:54	0:0	6	*
water	132:56	0:0	6	1000
arg	132:62	132:64	5	0
water	132:62	0:0	6	0
water	132:65	0:0	4	;
if	133:8	136:8	4	(b_packet_multiple_payload)
cond	133:12	133:12	5	b_packet_multiple_payload
water	133:12	0:0	6	b_packet_multiple_payload
stmts	134:8	136:8	5	
water	134:8	0:0	6	{
call	135:12	135:72	6	GETVALUE2b
arg	135:24	135:45	7	i_payload_length_type
water	135:24	0:0	8	i_payload_length_type
arg	135:47	135:68	7	i_payload_data_length
water	135:47	0:0	8	i_payload_data_length
arg	135:70	135:72	7	0
water	135:70	0:0	8	0
water	135:73	0:0	6	;
water	136:8	0:0	6	}
else	137:8	141:8	4
stmts	138:8	141:8	5	
water	138:8	0:0	6	{
water	139:12	0:0	6	i_payload_data_length
op	139:34	0:0	6	=
water	139:36	0:0	6	i_packet_length
op	139:52	0:0	6	-
water	140:36	0:0	6	i_packet_padding_length
op	140:60	0:0	6	-
water	140:62	0:0	6	i_skip
water	140:68	0:0	6	;
water	141:8	0:0	6	}
if	142:8	145:8	4	(i_payload_data_length < 0 || i_payload_data_length > i_packet_size_left)
cond	142:12	142:65	5	i_payload_data_length < 0 || i_payload_data_length > i_packet_size_left
water	142:12	0:0	6	i_payload_data_length
op	142:34	0:0	6	<
water	142:36	0:0	6	0
op	142:38	0:0	6	||
water	142:41	0:0	6	i_payload_data_length
op	142:63	0:0	6	>
water	142:65	0:0	6	i_packet_size_left
stmts	143:8	145:8	5	
water	143:8	0:0	6	{
break	144:12	144:17	6	
water	145:8	0:0	6	}
call	147:9	150:89	4	msg_Dbg
arg	147:18	147:25	5	p_demux
water	147:18	0:0	6	p_demux
arg	148:18	148:146	5	"payload(%d/%d) stream_number:%d media_object_number:%d media_object_offset:%d replicated_data_length:%d payload_data_length %d"
water	148:18	0:0	6	"payload(%d/%d) stream_number:%d media_object_number:%d media_object_offset:%d replicated_data_length:%d payload_data_length %d"
arg	149:18	149:31	5	i_payload+1
water	149:18	0:0	6	i_payload
op	149:28	0:0	6	+
water	149:30	0:0	6	1
arg	149:33	149:48	5	i_payload_count
water	149:33	0:0	6	i_payload_count
arg	149:50	149:65	5	i_stream_number
water	149:50	0:0	6	i_stream_number
arg	149:67	149:88	5	i_media_object_number
water	149:67	0:0	6	i_media_object_number
arg	150:18	150:39	5	i_media_object_offset
water	150:18	0:0	6	i_media_object_offset
arg	150:41	150:65	5	i_replicated_data_length
water	150:41	0:0	6	i_replicated_data_length
arg	150:67	150:89	5	i_payload_data_length
water	150:67	0:0	6	i_payload_data_length
water	150:90	0:0	4	;
if	152:8	158:8	4	(( tk = p_sys -> track [ i_stream_number ] ) == NULL)
cond	152:12	152:54	5	( tk = p_sys -> track [ i_stream_number ] ) == NULL
water	152:12	0:0	6	(
water	152:14	0:0	6	tk
op	152:17	0:0	6	=
water	152:19	0:0	6	p_sys
op	152:24	0:0	6	->
water	152:26	0:0	6	track
op	152:31	0:0	6	[
water	152:32	0:0	6	i_stream_number
op	152:47	0:0	6	]
water	152:49	0:0	6	)
op	152:51	0:0	6	==
water	152:54	0:0	6	NULL
stmts	153:8	158:8	5	
water	153:8	0:0	6	{
call	154:12	155:68	6	msg_Warn
arg	154:22	154:29	7	p_demux
water	154:22	0:0	8	p_demux
arg	155:22	155:50	7	"undeclared stream[Id 0x%x]"
water	155:22	0:0	8	"undeclared stream[Id 0x%x]"
arg	155:52	155:68	7	i_stream_number
water	155:52	0:0	8	i_stream_number
water	155:69	0:0	6	;
water	156:12	0:0	6	i_skip
op	156:19	0:0	6	+=
water	156:22	0:0	6	i_payload_data_length
water	156:43	0:0	6	;
continue	157:12	157:20	6	
water	158:8	0:0	6	}
if	159:8	166:8	4	(p_sys -> i_wait_keyframe && ! ( i_stream_number == p_sys -> i_seek_track && i_packet_keyframe && ! i_media_object_offset ))
cond	159:12	161:36	5	p_sys -> i_wait_keyframe && ! ( i_stream_number == p_sys -> i_seek_track && i_packet_keyframe && ! i_media_object_offset )
water	159:12	0:0	6	p_sys
op	159:17	0:0	6	->
water	159:19	0:0	6	i_wait_keyframe
op	159:35	0:0	6	&&
op	160:12	0:0	6	!
water	160:13	0:0	6	(
water	160:14	0:0	6	i_stream_number
op	160:30	0:0	6	==
water	160:33	0:0	6	p_sys
op	160:38	0:0	6	->
water	160:40	0:0	6	i_seek_track
op	160:53	0:0	6	&&
water	160:56	0:0	6	i_packet_keyframe
op	160:74	0:0	6	&&
op	161:14	0:0	6	!
water	161:15	0:0	6	i_media_object_offset
water	161:36	0:0	6	)
stmts	162:8	166:8	5	
water	162:8	0:0	6	{
water	163:12	0:0	6	i_skip
op	163:19	0:0	6	+=
water	163:22	0:0	6	i_payload_data_length
water	163:43	0:0	6	;
water	164:12	0:0	6	p_sys
op	164:17	0:0	6	->
water	164:19	0:0	6	i_wait_keyframe
op	164:34	0:0	6	--
water	164:36	0:0	6	;
continue	165:12	165:20	6	
water	166:8	0:0	6	}
water	167:8	0:0	4	p_sys
op	167:13	0:0	4	->
water	167:15	0:0	4	i_wait_keyframe
op	167:31	0:0	4	=
water	167:33	0:0	4	0
water	167:34	0:0	4	;
if	168:8	172:8	4	(! tk -> p_es)
cond	168:12	168:17	5	! tk -> p_es
op	168:12	0:0	6	!
water	168:13	0:0	6	tk
op	168:15	0:0	6	->
water	168:17	0:0	6	p_es
stmts	169:8	172:8	5	
water	169:8	0:0	6	{
water	170:12	0:0	6	i_skip
op	170:19	0:0	6	+=
water	170:22	0:0	6	i_payload_data_length
water	170:43	0:0	6	;
continue	171:12	171:20	6	
water	172:8	0:0	6	}
for	173:8	233:8	4	(i_payload_data_pos = 0 ;i_payload_data_pos < i_payload_data_length && i_packet_size_left > 0;i_payload_data_pos += i_sub_payload_data_length)
forinit	173:13	173:35	5	i_payload_data_pos = 0 ;
water	173:13	0:0	6	i_payload_data_pos
op	173:32	0:0	6	=
water	173:34	0:0	6	0
water	173:35	0:0	6	;
cond	174:13	175:41	5	i_payload_data_pos < i_payload_data_length && i_packet_size_left > 0
water	174:13	0:0	6	i_payload_data_pos
op	174:32	0:0	6	<
water	174:34	0:0	6	i_payload_data_length
op	174:56	0:0	6	&&
water	175:20	0:0	6	i_packet_size_left
op	175:39	0:0	6	>
water	175:41	0:0	6	0
forexpr	176:13	176:35	5	i_payload_data_pos += i_sub_payload_data_length
water	176:13	0:0	6	i_payload_data_pos
op	176:32	0:0	6	+=
water	176:35	0:0	6	i_sub_payload_data_length
stmts	177:8	233:8	5	
water	177:8	0:0	6	{
decl	178:12	178:27	6	block_t	*p_frag
decl	179:12	179:22	6	int	i_read
if	181:12	185:12	6	(i_replicated_data_length == 1)
cond	181:16	181:44	7	i_replicated_data_length == 1
water	181:16	0:0	8	i_replicated_data_length
op	181:41	0:0	8	==
water	181:44	0:0	8	1
stmts	182:12	185:12	7	
water	182:12	0:0	8	{
water	183:16	0:0	8	i_sub_payload_data_length
op	183:42	0:0	8	=
water	183:44	0:0	8	p_peek
op	183:50	0:0	8	[
water	183:51	0:0	8	i_skip
op	183:57	0:0	8	]
water	183:58	0:0	8	;
water	183:60	0:0	8	i_skip
op	183:66	0:0	8	++
water	183:68	0:0	8	;
water	184:16	0:0	8	i_payload_data_pos
op	184:34	0:0	8	++
water	184:36	0:0	8	;
water	185:12	0:0	8	}
else	186:12	189:12	6
stmts	187:12	189:12	7	
water	187:12	0:0	8	{
water	188:16	0:0	8	i_sub_payload_data_length
op	188:42	0:0	8	=
water	188:44	0:0	8	i_payload_data_length
water	188:65	0:0	8	;
water	189:12	0:0	8	}
if	191:12	201:12	6	(tk -> p_frame && i_media_object_offset == 0)
cond	191:16	191:56	7	tk -> p_frame && i_media_object_offset == 0
water	191:16	0:0	8	tk
op	191:18	0:0	8	->
water	191:20	0:0	8	p_frame
op	191:28	0:0	8	&&
water	191:31	0:0	8	i_media_object_offset
op	191:53	0:0	8	==
water	191:56	0:0	8	0
stmts	192:12	201:12	7	
water	192:12	0:0	8	{
decl	194:16	194:68	8	block_t	*p_gather
op	194:34	0:0	8	=
call	194:36	194:67	9	block_ChainGather
arg	194:55	194:67	10	tk->p_frame
water	194:55	0:0	11	tk
op	194:57	0:0	11	->
water	194:59	0:0	11	p_frame
if	195:16	196:59	8	(p_gather -> i_dts > VLC_TS_INVALID)
cond	195:20	195:38	9	p_gather -> i_dts > VLC_TS_INVALID
water	195:20	0:0	10	p_gather
op	195:28	0:0	10	->
water	195:30	0:0	10	i_dts
op	195:36	0:0	10	>
water	195:38	0:0	10	VLC_TS_INVALID
stmts	196:20	196:59	9	
water	196:20	0:0	10	tk
op	196:22	0:0	10	->
water	196:24	0:0	10	i_time
op	196:31	0:0	10	=
water	196:33	0:0	10	p_gather
op	196:41	0:0	10	->
water	196:43	0:0	10	i_dts
op	196:49	0:0	10	-
water	196:51	0:0	10	VLC_TS_0
water	196:59	0:0	10	;
if	197:16	198:89	8	(p_sys -> i_time < 0)
cond	197:20	197:36	9	p_sys -> i_time < 0
water	197:20	0:0	10	p_sys
op	197:25	0:0	10	->
water	197:27	0:0	10	i_time
op	197:34	0:0	10	<
water	197:36	0:0	10	0
stmts	198:20	198:89	9	
call	198:20	198:88	10	es_out_Control
arg	198:36	198:48	11	p_demux->out
water	198:36	0:0	12	p_demux
op	198:43	0:0	12	->
water	198:45	0:0	12	out
arg	198:50	198:64	11	ES_OUT_SET_PCR
water	198:50	0:0	12	ES_OUT_SET_PCR
arg	198:66	198:88	11	VLC_TS_0+tk->i_time
water	198:66	0:0	12	VLC_TS_0
op	198:75	0:0	12	+
water	198:77	0:0	12	tk
op	198:79	0:0	12	->
water	198:81	0:0	12	i_time
water	198:89	0:0	10	;
call	199:16	199:62	8	es_out_Send
arg	199:29	199:41	9	p_demux->out
water	199:29	0:0	10	p_demux
op	199:36	0:0	10	->
water	199:38	0:0	10	out
arg	199:43	199:51	9	tk->p_es
water	199:43	0:0	10	tk
op	199:45	0:0	10	->
water	199:47	0:0	10	p_es
arg	199:53	199:62	9	p_gather
water	199:53	0:0	10	p_gather
water	199:63	0:0	8	;
water	200:16	0:0	8	tk
op	200:18	0:0	8	->
water	200:20	0:0	8	p_frame
op	200:28	0:0	8	=
water	200:30	0:0	8	NULL
water	200:34	0:0	8	;
water	201:12	0:0	8	}
water	202:12	0:0	6	i_read
op	202:19	0:0	6	=
water	202:21	0:0	6	i_sub_payload_data_length
op	202:47	0:0	6	+
water	202:49	0:0	6	i_skip
water	202:55	0:0	6	;
if	203:12	207:12	6	(( p_frag =stream_Block (p_demux -> s ,i_read ) ) == NULL)
cond	203:16	203:67	7	( p_frag =stream_Block (p_demux -> s ,i_read ) ) == NULL
water	203:16	0:0	8	(
water	203:18	0:0	8	p_frag
op	203:25	0:0	8	=
call	203:27	203:60	8	stream_Block
arg	203:41	203:51	9	p_demux->s
water	203:41	0:0	10	p_demux
op	203:48	0:0	10	->
water	203:50	0:0	10	s
arg	203:53	203:60	9	i_read
water	203:53	0:0	10	i_read
water	203:62	0:0	8	)
op	203:64	0:0	8	==
water	203:67	0:0	8	NULL
stmts	204:12	207:12	7	
water	204:12	0:0	8	{
call	205:16	205:54	8	msg_Warn
arg	205:26	205:33	9	p_demux
water	205:26	0:0	10	p_demux
arg	205:35	205:54	9	"cannot read data"
water	205:35	0:0	10	"cannot read data"
water	205:55	0:0	8	;
return	206:16	206:24	8	0
water	206:23	0:0	9	0
water	207:12	0:0	8	}
water	208:12	0:0	6	i_packet_size_left
op	208:31	0:0	6	-=
water	208:34	0:0	6	i_read
water	208:40	0:0	6	;
water	209:12	0:0	6	p_frag
op	209:18	0:0	6	->
water	209:20	0:0	6	p_buffer
op	209:29	0:0	6	+=
water	209:32	0:0	6	i_skip
water	209:38	0:0	6	;
water	210:12	0:0	6	p_frag
op	210:18	0:0	6	->
water	210:20	0:0	6	i_buffer
op	210:29	0:0	6	-=
water	210:32	0:0	6	i_skip
water	210:38	0:0	6	;
if	211:12	221:12	6	(tk -> p_frame == NULL)
cond	211:16	211:31	7	tk -> p_frame == NULL
water	211:16	0:0	8	tk
op	211:18	0:0	8	->
water	211:20	0:0	8	p_frame
op	211:28	0:0	8	==
water	211:31	0:0	8	NULL
stmts	212:12	221:12	7	
water	212:12	0:0	8	{
water	213:16	0:0	8	p_frag
op	213:22	0:0	8	->
water	213:24	0:0	8	i_pts
op	213:30	0:0	8	=
water	213:32	0:0	8	VLC_TS_0
op	213:41	0:0	8	+
water	213:43	0:0	8	i_pts
op	213:49	0:0	8	+
water	213:51	0:0	8	i_payload
op	213:61	0:0	8	*
water	213:63	0:0	8	(
water	213:64	0:0	8	mtime_t
water	213:71	0:0	8	)
water	213:72	0:0	8	i_pts_delta
water	213:83	0:0	8	;
if	214:16	215:60	8	(tk -> i_cat != VIDEO_ES)
cond	214:20	214:33	9	tk -> i_cat != VIDEO_ES
water	214:20	0:0	10	tk
op	214:22	0:0	10	->
water	214:24	0:0	10	i_cat
op	214:30	0:0	10	!=
water	214:33	0:0	10	VIDEO_ES
stmts	215:20	215:60	9	
water	215:20	0:0	10	p_frag
op	215:26	0:0	10	->
water	215:28	0:0	10	i_dts
op	215:34	0:0	10	=
water	215:36	0:0	10	VLC_TS_0
op	215:45	0:0	10	+
water	215:47	0:0	10	p_frag
op	215:53	0:0	10	->
water	215:55	0:0	10	i_pts
water	215:60	0:0	10	;
else	216:16	220:16	8
stmts	217:16	220:16	9	
water	217:16	0:0	10	{
water	218:20	0:0	10	p_frag
op	218:26	0:0	10	->
water	218:28	0:0	10	i_dts
op	218:34	0:0	10	=
water	218:36	0:0	10	VLC_TS_0
op	218:45	0:0	10	+
water	218:47	0:0	10	p_frag
op	218:53	0:0	10	->
water	218:55	0:0	10	i_pts
water	218:60	0:0	10	;
water	219:20	0:0	10	p_frag
op	219:26	0:0	10	->
water	219:28	0:0	10	i_pts
op	219:34	0:0	10	=
water	219:36	0:0	10	VLC_TS_INVALID
water	219:50	0:0	10	;
water	220:16	0:0	10	}
water	221:12	0:0	8	}
call	222:12	222:52	6	block_ChainAppend
arg	222:31	222:43	7	&tk->p_frame
op	222:31	0:0	8	&
water	222:32	0:0	8	tk
op	222:34	0:0	8	->
water	222:36	0:0	8	p_frame
arg	222:45	222:52	7	p_frag
water	222:45	0:0	8	p_frag
water	222:53	0:0	6	;
water	223:12	0:0	6	i_skip
op	223:19	0:0	6	=
water	223:21	0:0	6	0
water	223:22	0:0	6	;
if	224:12	232:12	6	(i_packet_size_left > 0)
cond	224:16	224:37	7	i_packet_size_left > 0
water	224:16	0:0	8	i_packet_size_left
op	224:35	0:0	8	>
water	224:37	0:0	8	0
stmts	225:12	232:12	7	
water	225:12	0:0	8	{
if	226:16	231:16	8	(stream_Peek (p_demux -> s ,& p_peek ,i_packet_size_left ) < i_packet_size_left)
cond	226:20	227:59	9	stream_Peek (p_demux -> s ,& p_peek ,i_packet_size_left ) < i_packet_size_left
call	226:20	226:73	10	stream_Peek
arg	226:33	226:43	11	p_demux->s
water	226:33	0:0	12	p_demux
op	226:40	0:0	12	->
water	226:42	0:0	12	s
arg	226:45	226:52	11	&p_peek
op	226:45	0:0	12	&
water	226:46	0:0	12	p_peek
arg	226:54	226:73	11	i_packet_size_left
water	226:54	0:0	12	i_packet_size_left
op	227:57	0:0	10	<
water	227:59	0:0	10	i_packet_size_left
stmts	228:16	231:16	9	
water	228:16	0:0	10	{
call	229:20	229:60	10	msg_Warn
arg	229:30	229:37	11	p_demux
water	229:30	0:0	12	p_demux
arg	229:39	229:60	11	"cannot peek, EOF ?"
water	229:39	0:0	12	"cannot peek, EOF ?"
water	229:61	0:0	10	;
return	230:20	230:28	10	0
water	230:27	0:0	11	0
water	231:16	0:0	10	}
water	232:12	0:0	8	}
water	233:8	0:0	6	}
water	234:4	0:0	4	}
if	235:4	251:4	2	(i_packet_size_left > 0)
cond	235:8	235:29	3	i_packet_size_left > 0
water	235:8	0:0	4	i_packet_size_left
op	235:27	0:0	4	>
water	235:29	0:0	4	0
stmts	236:4	251:4	3	
water	236:4	0:0	4	{
if	238:8	240:74	4	(i_packet_size_left > i_packet_padding_length)
cond	238:12	238:33	5	i_packet_size_left > i_packet_padding_length
water	238:12	0:0	6	i_packet_size_left
op	238:31	0:0	6	>
water	238:33	0:0	6	i_packet_padding_length
stmts	239:12	240:74	5	
call	239:12	240:73	6	msg_Warn
arg	239:22	239:29	7	p_demux
water	239:22	0:0	8	p_demux
arg	239:31	239:67	7	"Didn't read %d bytes in the packet"
water	239:31	0:0	8	"Didn't read %d bytes in the packet"
arg	240:28	240:73	7	i_packet_size_left-i_packet_padding_length
water	240:28	0:0	8	i_packet_size_left
op	240:47	0:0	8	-
water	240:49	0:0	8	i_packet_padding_length
water	240:74	0:0	6	;
else	241:8	243:74	4
stmts	241:13	243:74	5	
if	241:13	243:74	6	(i_packet_size_left < i_packet_padding_length)
cond	241:17	241:38	7	i_packet_size_left < i_packet_padding_length
water	241:17	0:0	8	i_packet_size_left
op	241:36	0:0	8	<
water	241:38	0:0	8	i_packet_padding_length
stmts	242:12	243:74	7	
call	242:12	243:73	8	msg_Warn
arg	242:22	242:29	9	p_demux
water	242:22	0:0	10	p_demux
arg	242:31	242:69	9	"Read %d too much bytes in the packet"
water	242:31	0:0	10	"Read %d too much bytes in the packet"
arg	243:28	243:73	9	i_packet_padding_length-i_packet_size_left
water	243:28	0:0	10	i_packet_padding_length
op	243:52	0:0	10	-
water	243:54	0:0	10	i_packet_size_left
water	243:74	0:0	8	;
if	245:8	250:8	4	(stream_Read (p_demux -> s ,NULL ,i_packet_size_left ) < i_packet_size_left)
cond	245:12	246:59	5	stream_Read (p_demux -> s ,NULL ,i_packet_size_left ) < i_packet_size_left
call	245:12	245:62	6	stream_Read
arg	245:25	245:35	7	p_demux->s
water	245:25	0:0	8	p_demux
op	245:32	0:0	8	->
water	245:34	0:0	8	s
arg	245:37	245:41	7	NULL
water	245:37	0:0	8	NULL
arg	245:43	245:62	7	i_packet_size_left
water	245:43	0:0	8	i_packet_size_left
op	246:57	0:0	6	<
water	246:59	0:0	6	i_packet_size_left
stmts	247:8	250:8	5	
water	247:8	0:0	6	{
call	248:12	248:56	6	msg_Err
arg	248:21	248:28	7	p_demux
water	248:21	0:0	8	p_demux
arg	248:30	248:56	7	"cannot skip data, EOF ?"
water	248:30	0:0	8	"cannot skip data, EOF ?"
water	248:57	0:0	6	;
return	249:12	249:20	6	0
water	249:19	0:0	7	0
water	250:8	0:0	6	}
water	251:4	0:0	4	}
return	252:4	252:12	2	1
water	252:11	0:0	3	1
label	253:0	253:19	2	loop_error_recovery :
call	254:4	254:51	2	msg_Warn
arg	254:14	254:21	3	p_demux
water	254:14	0:0	4	p_demux
arg	254:23	254:51	3	"unsupported packet header"
water	254:23	0:0	4	"unsupported packet header"
water	254:52	0:0	2	;
if	255:4	259:4	2	(p_sys -> p_fp -> i_min_data_packet_size != p_sys -> p_fp -> i_max_data_packet_size)
cond	255:8	255:60	3	p_sys -> p_fp -> i_min_data_packet_size != p_sys -> p_fp -> i_max_data_packet_size
water	255:8	0:0	4	p_sys
op	255:13	0:0	4	->
water	255:15	0:0	4	p_fp
op	255:19	0:0	4	->
water	255:21	0:0	4	i_min_data_packet_size
op	255:44	0:0	4	!=
water	255:47	0:0	4	p_sys
op	255:52	0:0	4	->
water	255:54	0:0	4	p_fp
op	255:58	0:0	4	->
water	255:60	0:0	4	i_max_data_packet_size
stmts	256:4	259:4	3	
water	256:4	0:0	4	{
call	257:8	257:67	4	msg_Err
arg	257:17	257:24	5	p_demux
water	257:17	0:0	6	p_demux
arg	257:26	257:67	5	"unsupported packet header, fatal error"
water	257:26	0:0	6	"unsupported packet header, fatal error"
water	257:68	0:0	4	;
return	258:8	258:17	4	-1
op	258:15	0:0	5	-
water	258:16	0:0	5	1
water	259:4	0:0	4	}
if	260:4	264:4	2	(stream_Read (p_demux -> s ,NULL ,i_data_packet_min ) != i_data_packet_min)
cond	260:8	260:62	3	stream_Read (p_demux -> s ,NULL ,i_data_packet_min ) != i_data_packet_min
call	260:8	260:57	4	stream_Read
arg	260:21	260:31	5	p_demux->s
water	260:21	0:0	6	p_demux
op	260:28	0:0	6	->
water	260:30	0:0	6	s
arg	260:33	260:37	5	NULL
water	260:33	0:0	6	NULL
arg	260:39	260:57	5	i_data_packet_min
water	260:39	0:0	6	i_data_packet_min
op	260:59	0:0	4	!=
water	260:62	0:0	4	i_data_packet_min
stmts	261:4	264:4	3	
water	261:4	0:0	4	{
call	262:8	262:53	4	msg_Warn
arg	262:18	262:25	5	p_demux
water	262:18	0:0	6	p_demux
arg	262:27	262:53	5	"cannot skip data, EOF ?"
water	262:27	0:0	6	"cannot skip data, EOF ?"
water	262:54	0:0	4	;
return	263:8	263:16	4	0
water	263:15	0:0	5	0
water	264:4	0:0	4	}
return	265:4	265:12	2	1
water	265:11	0:0	3	1
