func	1:0	88:0	0	static int	ParseSSA
params	1:20	0:0	1	
param	1:22	1:38	2	demux_t *	p_demux
param	1:40	1:63	2	subtitle_t *	p_subtitle
stmnts	0:0	87:4	1	
decl	3:4	3:39	2	demux_sys_t	*p_sys
op	3:23	0:0	2	=
water	3:25	0:0	2	p_demux
op	3:32	0:0	2	->
water	3:34	0:0	2	p_sys
decl	4:4	4:34	2	text_t	*txt
op	4:21	0:0	2	=
op	4:23	0:0	2	&
water	4:24	0:0	2	p_sys
op	4:29	0:0	2	->
water	4:31	0:0	2	txt
decl	5:4	5:40	2	char	buffer_text[10*MAX_LINE+1]
decl	6:4	6:41	2	char	buffer_text2[10*MAX_LINE+1]
decl	7:4	7:11	2	char	*s
decl	8:4	8:23	2	int64_t	i_start
decl	9:4	9:22	2	int64_t	i_stop
water	10:4	0:0	2	p_subtitle
op	10:14	0:0	2	->
water	10:16	0:0	2	i_start
op	10:24	0:0	2	=
water	10:26	0:0	2	0
water	10:27	0:0	2	;
water	11:4	0:0	2	p_subtitle
op	11:14	0:0	2	->
water	11:16	0:0	2	i_stop
op	11:24	0:0	2	=
water	11:26	0:0	2	0
water	11:27	0:0	2	;
water	12:4	0:0	2	p_subtitle
op	12:14	0:0	2	->
water	12:16	0:0	2	psz_text
op	12:25	0:0	2	=
water	12:27	0:0	2	NULL
water	12:31	0:0	2	;
for	13:4	87:4	2	(;;)
forinit	13:9	13:9	3	;
water	13:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	14:4	87:4	3	
water	14:4	0:0	4	{
decl	15:8	15:42	4	int	h1
water	15:14	0:0	4	,
decl	15:8	15:42	4	int	m1
water	15:18	0:0	4	,
decl	15:8	15:42	4	int	s1
water	15:22	0:0	4	,
decl	15:8	15:42	4	int	c1
water	15:26	0:0	4	,
decl	15:8	15:42	4	int	h2
water	15:30	0:0	4	,
decl	15:8	15:42	4	int	m2
water	15:34	0:0	4	,
decl	15:8	15:42	4	int	s2
water	15:38	0:0	4	,
decl	15:8	15:42	4	int	c2
if	16:8	19:8	4	(( s =TextGetLine (txt ) ) == NULL)
cond	16:12	16:42	5	( s =TextGetLine (txt ) ) == NULL
water	16:12	0:0	6	(
water	16:14	0:0	6	s
op	16:16	0:0	6	=
call	16:18	16:35	6	TextGetLine
arg	16:31	16:35	7	txt
water	16:31	0:0	8	txt
water	16:37	0:0	6	)
op	16:39	0:0	6	==
water	16:42	0:0	6	NULL
stmts	17:8	19:8	5	
water	17:8	0:0	6	{
return	18:12	18:34	6	(VLC_EGENERIC)
water	18:18	0:0	7	(
water	18:20	0:0	7	VLC_EGENERIC
water	18:33	0:0	7	)
water	19:8	0:0	6	}
water	20:8	0:0	4	p_subtitle
op	20:18	0:0	4	->
water	20:20	0:0	4	psz_text
op	20:29	0:0	4	=
call	20:31	20:51	4	malloc
arg	20:39	20:51	5	strlen(s)
call	20:39	20:49	6	strlen
arg	20:47	20:49	7	s
water	20:47	0:0	8	s
water	20:52	0:0	4	;
if	31:8	61:8	4	(sscanf (s ,"Dialogue: %[^,],%d:%d:%d.%d,%d:%d:%d.%d,%81920[^\r\n]" ,buffer_text2 ,& h1 ,& m1 ,& s1 ,& c1 ,& h2 ,& m2 ,& s2 ,& c2 ,buffer_text ) == 10)
cond	31:12	36:37	5	sscanf (s ,"Dialogue: %[^,],%d:%d:%d.%d,%d:%d:%d.%d,%81920[^\r\n]" ,buffer_text2 ,& h1 ,& m1 ,& s1 ,& c1 ,& h2 ,& m2 ,& s2 ,& c2 ,buffer_text ) == 10
call	31:12	36:32	6	sscanf
arg	31:20	31:21	7	s
water	31:20	0:0	8	s
arg	32:20	32:75	7	"Dialogue: %[^,],%d:%d:%d.%d,%d:%d:%d.%d,%81920[^\r\n]"
water	32:20	0:0	8	"Dialogue: %[^,],%d:%d:%d.%d,%d:%d:%d.%d,%81920[^\r\n]"
arg	33:20	33:32	7	buffer_text2
water	33:20	0:0	8	buffer_text2
arg	34:20	34:23	7	&h1
op	34:20	0:0	8	&
water	34:21	0:0	8	h1
arg	34:25	34:28	7	&m1
op	34:25	0:0	8	&
water	34:26	0:0	8	m1
arg	34:30	34:33	7	&s1
op	34:30	0:0	8	&
water	34:31	0:0	8	s1
arg	34:35	34:38	7	&c1
op	34:35	0:0	8	&
water	34:36	0:0	8	c1
arg	35:20	35:23	7	&h2
op	35:20	0:0	8	&
water	35:21	0:0	8	h2
arg	35:25	35:28	7	&m2
op	35:25	0:0	8	&
water	35:26	0:0	8	m2
arg	35:30	35:33	7	&s2
op	35:30	0:0	8	&
water	35:31	0:0	8	s2
arg	35:35	35:38	7	&c2
op	35:35	0:0	8	&
water	35:36	0:0	8	c2
arg	36:20	36:32	7	buffer_text
water	36:20	0:0	8	buffer_text
op	36:34	0:0	6	==
water	36:37	0:0	6	10
stmts	37:8	61:8	5	
water	37:8	0:0	6	{
water	38:12	0:0	6	i_start
op	38:20	0:0	6	=
water	38:22	0:0	6	(
water	38:24	0:0	6	(
water	38:25	0:0	6	int64_t
water	38:32	0:0	6	)
water	38:33	0:0	6	h1
op	38:36	0:0	6	*
water	38:38	0:0	6	3600
op	38:42	0:0	6	*
water	38:43	0:0	6	1000
op	38:48	0:0	6	+
water	39:24	0:0	6	(
water	39:25	0:0	6	int64_t
water	39:32	0:0	6	)
water	39:33	0:0	6	m1
op	39:36	0:0	6	*
water	39:38	0:0	6	60
op	39:40	0:0	6	*
water	39:41	0:0	6	1000
op	39:46	0:0	6	+
water	40:24	0:0	6	(
water	40:25	0:0	6	int64_t
water	40:32	0:0	6	)
water	40:33	0:0	6	s1
op	40:36	0:0	6	*
water	40:38	0:0	6	1000
op	40:43	0:0	6	+
water	41:24	0:0	6	(
water	41:25	0:0	6	int64_t
water	41:32	0:0	6	)
water	41:33	0:0	6	c1
op	41:36	0:0	6	*
water	41:38	0:0	6	10
water	41:41	0:0	6	)
op	41:43	0:0	6	*
water	41:45	0:0	6	1000
water	41:49	0:0	6	;
water	42:12	0:0	6	i_stop
op	42:20	0:0	6	=
water	42:22	0:0	6	(
water	42:24	0:0	6	(
water	42:25	0:0	6	int64_t
water	42:32	0:0	6	)
water	42:33	0:0	6	h2
op	42:36	0:0	6	*
water	42:38	0:0	6	3600
op	42:42	0:0	6	*
water	42:43	0:0	6	1000
op	42:48	0:0	6	+
water	43:24	0:0	6	(
water	43:25	0:0	6	int64_t
water	43:32	0:0	6	)
water	43:33	0:0	6	m2
op	43:36	0:0	6	*
water	43:38	0:0	6	60
op	43:40	0:0	6	*
water	43:41	0:0	6	1000
op	43:46	0:0	6	+
water	44:24	0:0	6	(
water	44:25	0:0	6	int64_t
water	44:32	0:0	6	)
water	44:33	0:0	6	s2
op	44:36	0:0	6	*
water	44:38	0:0	6	1000
op	44:43	0:0	6	+
water	45:24	0:0	6	(
water	45:25	0:0	6	int64_t
water	45:32	0:0	6	)
water	45:33	0:0	6	c2
op	45:36	0:0	6	*
water	45:38	0:0	6	10
water	45:41	0:0	6	)
op	45:43	0:0	6	*
water	45:45	0:0	6	1000
water	45:49	0:0	6	;
if	48:12	52:12	6	(p_sys -> i_type == SUB_TYPE_SSA1)
cond	48:16	48:33	7	p_sys -> i_type == SUB_TYPE_SSA1
water	48:16	0:0	8	p_sys
op	48:21	0:0	8	->
water	48:23	0:0	8	i_type
op	48:30	0:0	8	==
water	48:33	0:0	8	SUB_TYPE_SSA1
stmts	49:12	52:12	7	
water	49:12	0:0	8	{
call	50:16	51:53	8	sprintf
arg	50:25	50:45	9	p_subtitle->psz_text
water	50:25	0:0	10	p_subtitle
op	50:35	0:0	10	->
water	50:37	0:0	10	psz_text
arg	51:25	51:30	9	",%s"
water	51:25	0:0	10	",%s"
arg	51:32	51:53	9	strdup(buffer_text)
call	51:32	51:51	10	strdup
arg	51:40	51:51	11	buffer_text
water	51:40	0:0	12	buffer_text
water	51:54	0:0	8	;
water	52:12	0:0	8	}
else	53:12	57:12	6
stmts	54:12	57:12	7	
water	54:12	0:0	8	{
call	55:16	56:54	8	sprintf
arg	55:25	55:45	9	p_subtitle->psz_text
water	55:25	0:0	10	p_subtitle
op	55:35	0:0	10	->
water	55:37	0:0	10	psz_text
arg	56:25	56:31	9	",,%s"
water	56:25	0:0	10	",,%s"
arg	56:33	56:54	9	strdup(buffer_text)
call	56:33	56:52	10	strdup
arg	56:41	56:52	11	buffer_text
water	56:41	0:0	12	buffer_text
water	56:55	0:0	8	;
water	57:12	0:0	8	}
water	58:12	0:0	6	p_subtitle
op	58:22	0:0	6	->
water	58:24	0:0	6	i_start
op	58:32	0:0	6	=
water	58:34	0:0	6	i_start
water	58:41	0:0	6	;
water	59:12	0:0	6	p_subtitle
op	59:22	0:0	6	->
water	59:24	0:0	6	i_stop
op	59:31	0:0	6	=
water	59:33	0:0	6	i_stop
water	59:39	0:0	6	;
return	60:12	60:20	6	0
water	60:19	0:0	7	0
water	61:8	0:0	6	}
else	62:8	86:8	4
stmts	63:8	86:8	5	
water	63:8	0:0	6	{
if	65:12	75:12	6	(p_sys -> psz_header != NULL)
cond	65:16	65:37	7	p_sys -> psz_header != NULL
water	65:16	0:0	8	p_sys
op	65:21	0:0	8	->
water	65:23	0:0	8	psz_header
op	65:34	0:0	8	!=
water	65:37	0:0	8	NULL
stmts	66:12	75:12	7	
water	66:12	0:0	8	{
if	67:16	72:16	8	(! ( p_sys -> psz_header =realloc (p_sys -> psz_header ,strlen (p_sys -> psz_header ) + 1 +strlen (s ) + 2 ) ))
cond	67:20	68:78	9	! ( p_sys -> psz_header =realloc (p_sys -> psz_header ,strlen (p_sys -> psz_header ) + 1 +strlen (s ) + 2 ) )
op	67:20	0:0	10	!
water	67:21	0:0	10	(
water	67:23	0:0	10	p_sys
op	67:28	0:0	10	->
water	67:30	0:0	10	psz_header
op	67:41	0:0	10	=
call	67:43	68:76	10	realloc
arg	67:52	67:69	11	p_sys->psz_header
water	67:52	0:0	12	p_sys
op	67:57	0:0	12	->
water	67:59	0:0	12	psz_header
arg	68:26	68:76	11	strlen(p_sys->psz_header)+1+strlen(s)+2
call	68:26	68:52	12	strlen
arg	68:34	68:52	13	p_sys->psz_header
water	68:34	0:0	14	p_sys
op	68:39	0:0	14	->
water	68:41	0:0	14	psz_header
op	68:54	0:0	12	+
water	68:56	0:0	12	1
op	68:58	0:0	12	+
call	68:60	68:70	12	strlen
arg	68:68	68:70	13	s
water	68:68	0:0	14	s
op	68:72	0:0	12	+
water	68:74	0:0	12	2
water	68:78	0:0	10	)
stmts	69:16	72:16	9	
water	69:16	0:0	10	{
call	70:20	70:53	10	msg_Err
arg	70:29	70:36	11	p_demux
water	70:29	0:0	12	p_demux
arg	70:38	70:53	11	"out of memory"
water	70:38	0:0	12	"out of memory"
water	70:54	0:0	10	;
return	71:20	71:37	10	VLC_ENOMEM
water	71:27	0:0	11	VLC_ENOMEM
water	72:16	0:0	10	}
water	73:16	0:0	8	p_sys
op	73:21	0:0	8	->
water	73:23	0:0	8	psz_header
op	73:34	0:0	8	=
call	73:36	73:66	8	strcat
arg	73:44	73:61	9	p_sys->psz_header
water	73:44	0:0	10	p_sys
op	73:49	0:0	10	->
water	73:51	0:0	10	psz_header
arg	73:64	73:66	9	s
water	73:64	0:0	10	s
water	73:67	0:0	8	;
water	74:16	0:0	8	p_sys
op	74:21	0:0	8	->
water	74:23	0:0	8	psz_header
op	74:34	0:0	8	=
call	74:36	74:68	8	strcat
arg	74:44	74:61	9	p_sys->psz_header
water	74:44	0:0	10	p_sys
op	74:49	0:0	10	->
water	74:51	0:0	10	psz_header
arg	74:63	74:68	9	"\n"
water	74:63	0:0	10	"\n"
water	74:69	0:0	8	;
water	75:12	0:0	8	}
else	76:12	85:12	6
stmts	77:12	85:12	7	
water	77:12	0:0	8	{
if	78:16	82:16	8	(! ( p_sys -> psz_header =malloc (strlen (s ) + 2 ) ))
cond	78:20	78:69	9	! ( p_sys -> psz_header =malloc (strlen (s ) + 2 ) )
op	78:20	0:0	10	!
water	78:21	0:0	10	(
water	78:23	0:0	10	p_sys
op	78:28	0:0	10	->
water	78:30	0:0	10	psz_header
op	78:41	0:0	10	=
call	78:43	78:67	10	malloc
arg	78:51	78:67	11	strlen(s)+2
call	78:51	78:61	12	strlen
arg	78:59	78:61	13	s
water	78:59	0:0	14	s
op	78:63	0:0	12	+
water	78:65	0:0	12	2
water	78:69	0:0	10	)
stmts	79:16	82:16	9	
water	79:16	0:0	10	{
call	80:20	80:53	10	msg_Err
arg	80:29	80:36	11	p_demux
water	80:29	0:0	12	p_demux
arg	80:38	80:53	11	"out of memory"
water	80:38	0:0	12	"out of memory"
water	80:54	0:0	10	;
return	81:20	81:37	10	VLC_ENOMEM
water	81:27	0:0	11	VLC_ENOMEM
water	82:16	0:0	10	}
water	83:16	0:0	8	p_sys
op	83:21	0:0	8	->
water	83:23	0:0	8	psz_header
op	83:34	0:0	8	=
water	83:36	0:0	8	s
water	83:37	0:0	8	;
water	84:16	0:0	8	p_sys
op	84:21	0:0	8	->
water	84:23	0:0	8	psz_header
op	84:34	0:0	8	=
call	84:36	84:68	8	strcat
arg	84:44	84:61	9	p_sys->psz_header
water	84:44	0:0	10	p_sys
op	84:49	0:0	10	->
water	84:51	0:0	10	psz_header
arg	84:63	84:68	9	"\n"
water	84:63	0:0	10	"\n"
water	84:69	0:0	8	;
water	85:12	0:0	8	}
water	86:8	0:0	6	}
water	87:4	0:0	4	}
