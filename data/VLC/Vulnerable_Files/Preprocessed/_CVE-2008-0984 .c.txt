func	2:0	66:0	0	static int	TrackCreateChunksIndex
params	2:33	0:0	1	
param	2:35	2:51	2	demux_t *	p_demux
param	3:35	3:62	2	mp4_track_t *	p_demux_track
stmnts	0:0	65:22	1	
decl	5:4	5:21	2	MP4_Box_t	*p_co64
decl	6:4	6:21	2	MP4_Box_t	*p_stsc
decl	7:4	7:24	2	unsigned int	i_chunk
decl	8:4	8:32	2	unsigned int	i_index
water	8:24	0:0	2	,
decl	8:4	8:32	2	unsigned int	i_last
if	9:4	14:4	2	(( ! ( p_co64 =MP4_BoxGet (p_demux_track -> p_stbl ,"stco" ) ) && ! ( p_co64 =MP4_BoxGet (p_demux_track -> p_stbl ,"co64" ) ) ) || ( ! ( p_stsc =MP4_BoxGet (p_demux_track -> p_stbl ,"stsc" ) ) ))
cond	9:8	11:67	3	( ! ( p_co64 =MP4_BoxGet (p_demux_track -> p_stbl ,"stco" ) ) && ! ( p_co64 =MP4_BoxGet (p_demux_track -> p_stbl ,"co64" ) ) ) || ( ! ( p_stsc =MP4_BoxGet (p_demux_track -> p_stbl ,"stsc" ) ) )
water	9:8	0:0	4	(
op	9:10	0:0	4	!
water	9:11	0:0	4	(
water	9:12	0:0	4	p_co64
op	9:19	0:0	4	=
call	9:21	9:63	4	MP4_BoxGet
arg	9:33	9:54	5	p_demux_track->p_stbl
water	9:33	0:0	6	p_demux_track
op	9:46	0:0	6	->
water	9:48	0:0	6	p_stbl
arg	9:56	9:63	5	"stco"
water	9:56	0:0	6	"stco"
water	9:65	0:0	4	)
op	9:66	0:0	4	&&
op	10:10	0:0	4	!
water	10:11	0:0	4	(
water	10:12	0:0	4	p_co64
op	10:19	0:0	4	=
call	10:21	10:63	4	MP4_BoxGet
arg	10:33	10:54	5	p_demux_track->p_stbl
water	10:33	0:0	6	p_demux_track
op	10:46	0:0	6	->
water	10:48	0:0	6	p_stbl
arg	10:56	10:63	5	"co64"
water	10:56	0:0	6	"co64"
water	10:65	0:0	4	)
water	10:67	0:0	4	)
op	10:68	0:0	4	||
water	11:8	0:0	4	(
op	11:10	0:0	4	!
water	11:11	0:0	4	(
water	11:12	0:0	4	p_stsc
op	11:19	0:0	4	=
call	11:21	11:63	4	MP4_BoxGet
arg	11:33	11:54	5	p_demux_track->p_stbl
water	11:33	0:0	6	p_demux_track
op	11:46	0:0	6	->
water	11:48	0:0	6	p_stbl
arg	11:56	11:63	5	"stsc"
water	11:56	0:0	6	"stsc"
water	11:65	0:0	4	)
water	11:67	0:0	4	)
stmts	12:4	14:4	3	
water	12:4	0:0	4	{
return	13:8	13:30	4	(VLC_EGENERIC)
water	13:14	0:0	5	(
water	13:16	0:0	5	VLC_EGENERIC
water	13:29	0:0	5	)
water	14:4	0:0	4	}
water	15:4	0:0	2	p_demux_track
op	15:17	0:0	2	->
water	15:19	0:0	2	i_chunk_count
op	15:33	0:0	2	=
water	15:35	0:0	2	p_co64
op	15:41	0:0	2	->
water	15:43	0:0	2	data
op	15:47	0:0	2	.
water	15:48	0:0	2	p_co64
op	15:54	0:0	2	->
water	15:56	0:0	2	i_entry_count
water	15:69	0:0	2	;
if	16:4	20:4	2	(! p_demux_track -> i_chunk_count)
cond	16:8	16:24	3	! p_demux_track -> i_chunk_count
op	16:8	0:0	4	!
water	16:9	0:0	4	p_demux_track
op	16:22	0:0	4	->
water	16:24	0:0	4	i_chunk_count
stmts	17:4	20:4	3	
water	17:4	0:0	4	{
call	18:8	18:46	4	msg_Warn
arg	18:18	18:25	5	p_demux
water	18:18	0:0	6	p_demux
arg	18:27	18:46	5	"no chunk defined"
water	18:27	0:0	6	"no chunk defined"
water	18:47	0:0	4	;
return	19:8	19:30	4	(VLC_EGENERIC)
water	19:14	0:0	5	(
water	19:16	0:0	5	VLC_EGENERIC
water	19:29	0:0	5	)
water	20:4	0:0	4	}
water	21:4	0:0	2	p_demux_track
op	21:17	0:0	2	->
water	21:19	0:0	2	chunk
op	21:25	0:0	2	=
call	21:27	22:57	2	calloc
arg	21:35	21:63	3	p_demux_track->i_chunk_count
water	21:35	0:0	4	p_demux_track
op	21:48	0:0	4	->
water	21:50	0:0	4	i_chunk_count
arg	22:35	22:57	3	sizeof(mp4_chunk_t)
op	22:35	0:0	4	sizeof
water	22:41	0:0	4	(
water	22:43	0:0	4	mp4_chunk_t
water	22:55	0:0	4	)
water	22:58	0:0	2	;
for	24:4	33:4	2	(i_chunk = 0 ;i_chunk < p_demux_track -> i_chunk_count;i_chunk ++)
forinit	24:9	24:20	3	i_chunk = 0 ;
water	24:9	0:0	4	i_chunk
op	24:17	0:0	4	=
water	24:19	0:0	4	0
water	24:20	0:0	4	;
cond	24:22	24:47	3	i_chunk < p_demux_track -> i_chunk_count
water	24:22	0:0	4	i_chunk
op	24:30	0:0	4	<
water	24:32	0:0	4	p_demux_track
op	24:45	0:0	4	->
water	24:47	0:0	4	i_chunk_count
forexpr	24:62	24:69	3	i_chunk ++
water	24:62	0:0	4	i_chunk
op	24:69	0:0	4	++
stmts	25:4	33:4	3	
water	25:4	0:0	4	{
decl	26:8	26:56	4	mp4_chunk_t	*ck
op	26:24	0:0	4	=
op	26:26	0:0	4	&
water	26:27	0:0	4	p_demux_track
op	26:40	0:0	4	->
water	26:42	0:0	4	chunk
op	26:47	0:0	4	[
water	26:48	0:0	4	i_chunk
op	26:55	0:0	4	]
water	27:8	0:0	4	ck
op	27:10	0:0	4	->
water	27:12	0:0	4	i_offset
op	27:21	0:0	4	=
water	27:23	0:0	4	p_co64
op	27:29	0:0	4	->
water	27:31	0:0	4	data
op	27:35	0:0	4	.
water	27:36	0:0	4	p_co64
op	27:42	0:0	4	->
water	27:44	0:0	4	i_chunk_offset
op	27:58	0:0	4	[
water	27:59	0:0	4	i_chunk
op	27:66	0:0	4	]
water	27:67	0:0	4	;
water	28:8	0:0	4	ck
op	28:10	0:0	4	->
water	28:12	0:0	4	i_first_dts
op	28:24	0:0	4	=
water	28:26	0:0	4	0
water	28:27	0:0	4	;
water	29:8	0:0	4	ck
op	29:10	0:0	4	->
water	29:12	0:0	4	p_sample_count_dts
op	29:31	0:0	4	=
water	29:33	0:0	4	NULL
water	29:37	0:0	4	;
water	30:8	0:0	4	ck
op	30:10	0:0	4	->
water	30:12	0:0	4	p_sample_delta_dts
op	30:31	0:0	4	=
water	30:33	0:0	4	NULL
water	30:37	0:0	4	;
water	31:8	0:0	4	ck
op	31:10	0:0	4	->
water	31:12	0:0	4	p_sample_count_pts
op	31:31	0:0	4	=
water	31:33	0:0	4	NULL
water	31:37	0:0	4	;
water	32:8	0:0	4	ck
op	32:10	0:0	4	->
water	32:12	0:0	4	p_sample_offset_pts
op	32:32	0:0	4	=
water	32:34	0:0	4	NULL
water	32:38	0:0	4	;
water	33:4	0:0	4	}
water	37:4	0:0	2	i_last
op	37:11	0:0	2	=
water	37:13	0:0	2	p_demux_track
op	37:26	0:0	2	->
water	37:28	0:0	2	i_chunk_count
water	37:41	0:0	2	;
water	38:4	0:0	2	i_index
op	38:12	0:0	2	=
water	38:14	0:0	2	p_stsc
op	38:20	0:0	2	->
water	38:22	0:0	2	data
op	38:26	0:0	2	.
water	38:27	0:0	2	p_stsc
op	38:33	0:0	2	->
water	38:35	0:0	2	i_entry_count
water	38:48	0:0	2	;
if	39:4	43:4	2	(! i_index)
cond	39:8	39:9	3	! i_index
op	39:8	0:0	4	!
water	39:9	0:0	4	i_index
stmts	40:4	43:4	3	
water	40:4	0:0	4	{
call	41:8	41:68	4	msg_Warn
arg	41:18	41:25	5	p_demux
water	41:18	0:0	6	p_demux
arg	41:27	41:68	5	"cannot read chunk table or table empty"
water	41:27	0:0	6	"cannot read chunk table or table empty"
water	41:69	0:0	4	;
return	42:8	42:30	4	(VLC_EGENERIC)
water	42:14	0:0	5	(
water	42:16	0:0	5	VLC_EGENERIC
water	42:29	0:0	5	)
water	43:4	0:0	4	}
while	44:4	55:4	2	(i_index --)
cond	44:11	44:18	3	i_index --
water	44:11	0:0	4	i_index
op	44:18	0:0	4	--
stmts	45:4	55:4	3	
water	45:4	0:0	4	{
for	46:8	53:8	4	(i_chunk = p_stsc -> data . p_stsc -> i_first_chunk [ i_index ] - 1 ;i_chunk < i_last;i_chunk ++)
forinit	46:13	46:70	5	i_chunk = p_stsc -> data . p_stsc -> i_first_chunk [ i_index ] - 1 ;
water	46:13	0:0	6	i_chunk
op	46:21	0:0	6	=
water	46:23	0:0	6	p_stsc
op	46:29	0:0	6	->
water	46:31	0:0	6	data
op	46:35	0:0	6	.
water	46:36	0:0	6	p_stsc
op	46:42	0:0	6	->
water	46:44	0:0	6	i_first_chunk
op	46:57	0:0	6	[
water	46:58	0:0	6	i_index
op	46:65	0:0	6	]
op	46:67	0:0	6	-
water	46:69	0:0	6	1
water	46:70	0:0	6	;
cond	47:13	47:23	5	i_chunk < i_last
water	47:13	0:0	6	i_chunk
op	47:21	0:0	6	<
water	47:23	0:0	6	i_last
forexpr	47:31	47:38	5	i_chunk ++
water	47:31	0:0	6	i_chunk
op	47:38	0:0	6	++
stmts	48:8	53:8	5	
water	48:8	0:0	6	{
water	49:12	0:0	6	p_demux_track
op	49:25	0:0	6	->
water	49:27	0:0	6	chunk
op	49:32	0:0	6	[
water	49:33	0:0	6	i_chunk
op	49:40	0:0	6	]
op	49:41	0:0	6	.
water	49:42	0:0	6	i_sample_description_index
op	49:69	0:0	6	=
water	50:20	0:0	6	p_stsc
op	50:26	0:0	6	->
water	50:28	0:0	6	data
op	50:32	0:0	6	.
water	50:33	0:0	6	p_stsc
op	50:39	0:0	6	->
water	50:41	0:0	6	i_sample_description_index
op	50:67	0:0	6	[
water	50:68	0:0	6	i_index
op	50:75	0:0	6	]
water	50:76	0:0	6	;
water	51:12	0:0	6	p_demux_track
op	51:25	0:0	6	->
water	51:27	0:0	6	chunk
op	51:32	0:0	6	[
water	51:33	0:0	6	i_chunk
op	51:40	0:0	6	]
op	51:41	0:0	6	.
water	51:42	0:0	6	i_sample_count
op	51:57	0:0	6	=
water	52:20	0:0	6	p_stsc
op	52:26	0:0	6	->
water	52:28	0:0	6	data
op	52:32	0:0	6	.
water	52:33	0:0	6	p_stsc
op	52:39	0:0	6	->
water	52:41	0:0	6	i_samples_per_chunk
op	52:60	0:0	6	[
water	52:61	0:0	6	i_index
op	52:68	0:0	6	]
water	52:69	0:0	6	;
water	53:8	0:0	6	}
water	54:8	0:0	4	i_last
op	54:15	0:0	4	=
water	54:17	0:0	4	p_stsc
op	54:23	0:0	4	->
water	54:25	0:0	4	data
op	54:29	0:0	4	.
water	54:30	0:0	4	p_stsc
op	54:36	0:0	4	->
water	54:38	0:0	4	i_first_chunk
op	54:51	0:0	4	[
water	54:52	0:0	4	i_index
op	54:59	0:0	4	]
op	54:61	0:0	4	-
water	54:63	0:0	4	1
water	54:64	0:0	4	;
water	55:4	0:0	4	}
water	56:4	0:0	2	p_demux_track
op	56:17	0:0	2	->
water	56:19	0:0	2	chunk
op	56:24	0:0	2	[
water	56:25	0:0	2	0
op	56:26	0:0	2	]
op	56:27	0:0	2	.
water	56:28	0:0	2	i_sample_first
op	56:43	0:0	2	=
water	56:45	0:0	2	0
water	56:46	0:0	2	;
for	57:4	62:4	2	(i_chunk = 1 ;i_chunk < p_demux_track -> i_chunk_count;i_chunk ++)
forinit	57:9	57:20	3	i_chunk = 1 ;
water	57:9	0:0	4	i_chunk
op	57:17	0:0	4	=
water	57:19	0:0	4	1
water	57:20	0:0	4	;
cond	57:22	57:47	3	i_chunk < p_demux_track -> i_chunk_count
water	57:22	0:0	4	i_chunk
op	57:30	0:0	4	<
water	57:32	0:0	4	p_demux_track
op	57:45	0:0	4	->
water	57:47	0:0	4	i_chunk_count
forexpr	57:62	57:69	3	i_chunk ++
water	57:62	0:0	4	i_chunk
op	57:69	0:0	4	++
stmts	58:4	62:4	3	
water	58:4	0:0	4	{
water	59:8	0:0	4	p_demux_track
op	59:21	0:0	4	->
water	59:23	0:0	4	chunk
op	59:28	0:0	4	[
water	59:29	0:0	4	i_chunk
op	59:36	0:0	4	]
op	59:37	0:0	4	.
water	59:38	0:0	4	i_sample_first
op	59:53	0:0	4	=
water	60:12	0:0	4	p_demux_track
op	60:25	0:0	4	->
water	60:27	0:0	4	chunk
op	60:32	0:0	4	[
water	60:33	0:0	4	i_chunk
op	60:40	0:0	4	-
water	60:41	0:0	4	1
op	60:42	0:0	4	]
op	60:43	0:0	4	.
water	60:44	0:0	4	i_sample_first
op	60:59	0:0	4	+
water	61:16	0:0	4	p_demux_track
op	61:29	0:0	4	->
water	61:31	0:0	4	chunk
op	61:36	0:0	4	[
water	61:37	0:0	4	i_chunk
op	61:44	0:0	4	-
water	61:45	0:0	4	1
op	61:46	0:0	4	]
op	61:47	0:0	4	.
water	61:48	0:0	4	i_sample_count
water	61:62	0:0	4	;
water	62:4	0:0	4	}
call	63:4	64:69	2	msg_Dbg
arg	63:13	63:20	3	p_demux
water	63:13	0:0	4	p_demux
arg	63:22	63:52	3	"track[Id 0x%x] read %d chunk"
water	63:22	0:0	4	"track[Id 0x%x] read %d chunk"
arg	64:13	64:38	3	p_demux_track->i_track_ID
water	64:13	0:0	4	p_demux_track
op	64:26	0:0	4	->
water	64:28	0:0	4	i_track_ID
arg	64:40	64:69	3	p_demux_track->i_chunk_count
water	64:40	0:0	4	p_demux_track
op	64:53	0:0	4	->
water	64:55	0:0	4	i_chunk_count
water	64:70	0:0	2	;
return	65:4	65:22	2	VLC_SUCCESS
water	65:11	0:0	3	VLC_SUCCESS
