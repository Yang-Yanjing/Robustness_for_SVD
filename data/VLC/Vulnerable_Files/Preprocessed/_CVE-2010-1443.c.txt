func	1:0	224:0	0	static bool	parse_track_node
stmnts	0:0	223:16	1	
decl	3:4	3:14	2	int	i_node
decl	4:4	4:25	2	char	*psz_name
op	4:19	0:0	2	=
water	4:21	0:0	2	NULL
decl	5:4	5:26	2	char	*psz_value
op	5:20	0:0	2	=
water	5:22	0:0	2	NULL
decl	6:4	6:36	2	xml_elem_hnd_t	*p_handler
op	6:30	0:0	2	=
water	6:32	0:0	2	NULL
decl	8:4	23:9	2	xml_elem_hnd_t	track_elements[]
op	8:36	0:0	2	=
water	9:8	0:0	2	{
water	9:10	0:0	2	{
water	9:11	0:0	2	"location"
water	9:21	0:0	2	,
water	9:27	0:0	2	SIMPLE_CONTENT
water	9:41	0:0	2	,
water	9:44	0:0	2	{
water	9:45	0:0	2	NULL
water	9:49	0:0	2	}
water	9:51	0:0	2	}
water	9:52	0:0	2	,
water	10:10	0:0	2	{
water	10:11	0:0	2	"identifier"
water	10:23	0:0	2	,
water	10:27	0:0	2	SIMPLE_CONTENT
water	10:41	0:0	2	,
water	10:44	0:0	2	{
water	10:45	0:0	2	NULL
water	10:49	0:0	2	}
water	10:51	0:0	2	}
water	10:52	0:0	2	,
water	11:10	0:0	2	{
water	11:11	0:0	2	"title"
water	11:18	0:0	2	,
water	11:27	0:0	2	SIMPLE_CONTENT
water	11:41	0:0	2	,
water	11:44	0:0	2	{
op	11:45	0:0	2	.
water	11:46	0:0	2	smpl
op	11:51	0:0	2	=
water	11:53	0:0	2	set_item_info
water	11:66	0:0	2	}
water	11:68	0:0	2	}
water	11:69	0:0	2	,
water	12:10	0:0	2	{
water	12:11	0:0	2	"creator"
water	12:20	0:0	2	,
water	12:27	0:0	2	SIMPLE_CONTENT
water	12:41	0:0	2	,
water	12:44	0:0	2	{
op	12:45	0:0	2	.
water	12:46	0:0	2	smpl
op	12:51	0:0	2	=
water	12:53	0:0	2	set_item_info
water	12:66	0:0	2	}
water	12:68	0:0	2	}
water	12:69	0:0	2	,
water	13:10	0:0	2	{
water	13:11	0:0	2	"annotation"
water	13:23	0:0	2	,
water	13:27	0:0	2	SIMPLE_CONTENT
water	13:41	0:0	2	,
water	13:44	0:0	2	{
op	13:45	0:0	2	.
water	13:46	0:0	2	smpl
op	13:51	0:0	2	=
water	13:53	0:0	2	set_item_info
water	13:66	0:0	2	}
water	13:68	0:0	2	}
water	13:69	0:0	2	,
water	14:10	0:0	2	{
water	14:11	0:0	2	"info"
water	14:17	0:0	2	,
water	14:27	0:0	2	SIMPLE_CONTENT
water	14:41	0:0	2	,
water	14:44	0:0	2	{
water	14:45	0:0	2	NULL
water	14:49	0:0	2	}
water	14:51	0:0	2	}
water	14:52	0:0	2	,
water	15:10	0:0	2	{
water	15:11	0:0	2	"image"
water	15:18	0:0	2	,
water	15:27	0:0	2	SIMPLE_CONTENT
water	15:41	0:0	2	,
water	15:44	0:0	2	{
op	15:45	0:0	2	.
water	15:46	0:0	2	smpl
op	15:51	0:0	2	=
water	15:53	0:0	2	set_item_info
water	15:66	0:0	2	}
water	15:68	0:0	2	}
water	15:69	0:0	2	,
water	16:10	0:0	2	{
water	16:11	0:0	2	"album"
water	16:18	0:0	2	,
water	16:27	0:0	2	SIMPLE_CONTENT
water	16:41	0:0	2	,
water	16:44	0:0	2	{
op	16:45	0:0	2	.
water	16:46	0:0	2	smpl
op	16:51	0:0	2	=
water	16:53	0:0	2	set_item_info
water	16:66	0:0	2	}
water	16:68	0:0	2	}
water	16:69	0:0	2	,
water	17:10	0:0	2	{
water	17:11	0:0	2	"trackNum"
water	17:21	0:0	2	,
water	17:27	0:0	2	SIMPLE_CONTENT
water	17:41	0:0	2	,
water	17:44	0:0	2	{
op	17:45	0:0	2	.
water	17:46	0:0	2	smpl
op	17:51	0:0	2	=
water	17:53	0:0	2	set_item_info
water	17:66	0:0	2	}
water	17:68	0:0	2	}
water	17:69	0:0	2	,
water	18:10	0:0	2	{
water	18:11	0:0	2	"duration"
water	18:21	0:0	2	,
water	18:27	0:0	2	SIMPLE_CONTENT
water	18:41	0:0	2	,
water	18:44	0:0	2	{
op	18:45	0:0	2	.
water	18:46	0:0	2	smpl
op	18:51	0:0	2	=
water	18:53	0:0	2	set_item_info
water	18:66	0:0	2	}
water	18:68	0:0	2	}
water	18:69	0:0	2	,
water	19:10	0:0	2	{
water	19:11	0:0	2	"link"
water	19:17	0:0	2	,
water	19:27	0:0	2	SIMPLE_CONTENT
water	19:41	0:0	2	,
water	19:44	0:0	2	{
water	19:45	0:0	2	NULL
water	19:49	0:0	2	}
water	19:51	0:0	2	}
water	19:52	0:0	2	,
water	20:10	0:0	2	{
water	20:11	0:0	2	"meta"
water	20:17	0:0	2	,
water	20:27	0:0	2	SIMPLE_CONTENT
water	20:41	0:0	2	,
water	20:44	0:0	2	{
water	20:45	0:0	2	NULL
water	20:49	0:0	2	}
water	20:51	0:0	2	}
water	20:52	0:0	2	,
water	21:10	0:0	2	{
water	21:11	0:0	2	"extension"
water	21:22	0:0	2	,
water	21:27	0:0	2	COMPLEX_CONTENT
water	21:42	0:0	2	,
water	21:44	0:0	2	{
op	21:45	0:0	2	.
water	21:46	0:0	2	cmplx
op	21:52	0:0	2	=
water	21:54	0:0	2	parse_extension_node
water	21:74	0:0	2	}
water	21:76	0:0	2	}
water	21:77	0:0	2	,
water	22:10	0:0	2	{
water	22:11	0:0	2	NULL
water	22:15	0:0	2	,
water	22:27	0:0	2	UNKNOWN_CONTENT
water	22:42	0:0	2	,
water	22:44	0:0	2	{
water	22:45	0:0	2	NULL
water	22:49	0:0	2	}
water	22:51	0:0	2	}
water	23:8	0:0	2	}
decl	25:4	25:85	2	input_item_t	*p_new_input
op	25:30	0:0	2	=
call	25:32	25:84	3	input_item_NewExt
arg	25:51	25:58	4	p_demux
water	25:51	0:0	5	p_demux
arg	25:60	25:64	4	NULL
water	25:60	0:0	5	NULL
arg	25:66	25:70	4	NULL
water	25:66	0:0	5	NULL
arg	25:72	25:73	4	0
water	25:72	0:0	5	0
arg	25:75	25:79	4	NULL
water	25:75	0:0	5	NULL
arg	25:81	25:84	4	-1
op	25:81	0:0	5	-
water	25:82	0:0	5	1
if	27:4	31:4	2	(! p_new_input)
cond	27:8	27:9	3	! p_new_input
op	27:8	0:0	4	!
water	27:9	0:0	4	p_new_input
stmts	28:4	31:4	3	
water	28:4	0:0	4	{
return	30:8	30:20	4	false
water	30:15	0:0	5	false
water	31:4	0:0	4	}
water	34:4	0:0	2	p_demux
op	34:11	0:0	2	->
water	34:13	0:0	2	p_sys
op	34:18	0:0	2	->
water	34:20	0:0	2	i_track_id
op	34:31	0:0	2	=
op	34:33	0:0	2	-
water	34:34	0:0	2	1
water	34:35	0:0	2	;
while	36:4	220:4	2	(xml_ReaderRead (p_xml_reader ) == 1)
cond	36:11	36:45	3	xml_ReaderRead (p_xml_reader ) == 1
call	36:11	36:40	4	xml_ReaderRead
arg	36:27	36:40	5	p_xml_reader
water	36:27	0:0	6	p_xml_reader
op	36:42	0:0	4	==
water	36:45	0:0	4	1
stmts	37:4	220:4	3	
water	37:4	0:0	4	{
water	38:8	0:0	4	i_node
op	38:15	0:0	4	=
call	38:17	38:50	4	xml_ReaderNodeType
arg	38:37	38:50	5	p_xml_reader
water	38:37	0:0	6	p_xml_reader
water	38:51	0:0	4	;
switch	39:8	218:8	4	(i_node)
cond	39:16	39:16	5	i_node
water	39:16	0:0	6	i_node
stmts	40:8	218:8	5	
water	40:8	0:0	6	{
label	41:12	41:32	6	case XML_READER_NONE :
break	42:16	42:21	6	
label	44:12	44:37	6	case XML_READER_STARTELEM :
water	46:16	0:0	6	psz_name
op	46:25	0:0	6	=
call	46:27	46:56	6	xml_ReaderName
arg	46:43	46:56	7	p_xml_reader
water	46:43	0:0	8	p_xml_reader
water	46:57	0:0	6	;
if	47:16	52:16	6	(! psz_name || ! * psz_name)
cond	47:20	47:35	7	! psz_name || ! * psz_name
op	47:20	0:0	8	!
water	47:21	0:0	8	psz_name
op	47:30	0:0	8	||
op	47:33	0:0	8	!
op	47:34	0:0	8	*
water	47:35	0:0	8	psz_name
stmts	48:16	52:16	7	
water	48:16	0:0	8	{
call	49:20	49:59	8	msg_Err
arg	49:29	49:36	9	p_demux
water	49:29	0:0	10	p_demux
arg	49:38	49:59	9	"invalid xml stream"
water	49:38	0:0	10	"invalid xml stream"
water	49:60	0:0	8	;
call	50:20	50:29	8	FREE_ATT
water	50:30	0:0	8	;
return	51:20	51:32	8	false
water	51:27	0:0	9	false
water	52:16	0:0	8	}
for	54:16	56:34	6	(p_handler = track_elements ;p_handler -> name &&strcmp (psz_name ,p_handler -> name );p_handler ++)
forinit	54:21	54:47	7	p_handler = track_elements ;
water	54:21	0:0	8	p_handler
op	54:31	0:0	8	=
water	54:33	0:0	8	track_elements
water	54:47	0:0	8	;
cond	55:21	55:74	7	p_handler -> name &&strcmp (psz_name ,p_handler -> name )
water	55:21	0:0	8	p_handler
op	55:30	0:0	8	->
water	55:32	0:0	8	name
op	55:37	0:0	8	&&
call	55:40	55:74	8	strcmp
arg	55:48	55:56	9	psz_name
water	55:48	0:0	10	psz_name
arg	55:58	55:74	9	p_handler->name
water	55:58	0:0	10	p_handler
op	55:67	0:0	10	->
water	55:69	0:0	10	name
forexpr	56:21	56:30	7	p_handler ++
water	56:21	0:0	8	p_handler
op	56:30	0:0	8	++
stmts	56:34	56:34	7	
water	56:34	0:0	8	;
if	57:16	62:16	6	(! p_handler -> name)
cond	57:20	57:32	7	! p_handler -> name
op	57:20	0:0	8	!
water	57:21	0:0	8	p_handler
op	57:30	0:0	8	->
water	57:32	0:0	8	name
stmts	58:16	62:16	7	
water	58:16	0:0	8	{
call	59:20	59:74	8	msg_Err
arg	59:29	59:36	9	p_demux
water	59:29	0:0	10	p_demux
arg	59:38	59:63	9	"unexpected element <%s>"
water	59:38	0:0	10	"unexpected element <%s>"
arg	59:65	59:74	9	psz_name
water	59:65	0:0	10	psz_name
water	59:75	0:0	8	;
call	60:20	60:29	8	FREE_ATT
water	60:30	0:0	8	;
return	61:20	61:32	8	false
water	61:27	0:0	9	false
water	62:16	0:0	8	}
call	63:16	63:26	6	FREE_NAME
water	63:27	0:0	6	;
if	65:16	88:16	6	(p_handler -> type == COMPLEX_CONTENT)
cond	65:20	65:39	7	p_handler -> type == COMPLEX_CONTENT
water	65:20	0:0	8	p_handler
op	65:29	0:0	8	->
water	65:31	0:0	8	type
op	65:36	0:0	8	==
water	65:39	0:0	8	COMPLEX_CONTENT
stmts	66:16	88:16	7	
water	66:16	0:0	8	{
if	67:20	74:20	8	(! p_new_input)
cond	67:24	67:25	9	! p_new_input
op	67:24	0:0	10	!
water	67:25	0:0	10	p_new_input
stmts	68:20	74:20	9	
water	68:20	0:0	10	{
call	69:24	71:49	10	msg_Err
arg	69:33	69:40	11	p_demux
water	69:33	0:0	12	p_demux
arg	70:33	70:79	11	"at <%s> level no new item has been allocated"
water	70:33	0:0	12	"at <%s> level no new item has been allocated"
arg	71:33	71:49	11	p_handler->name
water	71:33	0:0	12	p_handler
op	71:42	0:0	12	->
water	71:44	0:0	12	name
water	71:50	0:0	10	;
call	72:24	72:33	10	FREE_ATT
water	72:34	0:0	10	;
return	73:24	73:36	10	false
water	73:31	0:0	11	false
water	74:20	0:0	10	}
if	75:20	82:20	8	(p_handler -> pf_handler . cmplx (p_demux ,p_new_input ,p_xml_reader ,p_handler -> name ))
cond	75:24	78:69	9	p_handler -> pf_handler . cmplx (p_demux ,p_new_input ,p_xml_reader ,p_handler -> name )
call	75:24	78:69	10	p_handler->pf_handler.cmplx
arg	75:53	75:60	11	p_demux
water	75:53	0:0	12	p_demux
arg	76:53	76:64	11	p_new_input
water	76:53	0:0	12	p_new_input
arg	77:53	77:65	11	p_xml_reader
water	77:53	0:0	12	p_xml_reader
arg	78:53	78:69	11	p_handler->name
water	78:53	0:0	12	p_handler
op	78:62	0:0	12	->
water	78:64	0:0	12	name
stmts	79:20	82:20	9	
water	79:20	0:0	10	{
water	80:24	0:0	10	p_handler
op	80:34	0:0	10	=
water	80:36	0:0	10	NULL
water	80:40	0:0	10	;
call	81:24	81:33	10	FREE_ATT
water	81:34	0:0	10	;
water	82:20	0:0	10	}
else	83:20	87:20	8
stmts	84:20	87:20	9	
water	84:20	0:0	10	{
call	85:24	85:33	10	FREE_ATT
water	85:34	0:0	10	;
return	86:24	86:36	10	false
water	86:31	0:0	11	false
water	87:20	0:0	10	}
water	88:16	0:0	8	}
break	89:16	89:21	6	
label	91:12	91:32	6	case XML_READER_TEXT :
call	93:16	93:25	6	FREE_ATT
water	93:26	0:0	6	;
water	94:16	0:0	6	psz_value
op	94:26	0:0	6	=
call	94:28	94:58	6	xml_ReaderValue
arg	94:45	94:58	7	p_xml_reader
water	94:45	0:0	8	p_xml_reader
water	94:59	0:0	6	;
if	95:16	100:16	6	(! psz_value)
cond	95:20	95:21	7	! psz_value
op	95:20	0:0	8	!
water	95:21	0:0	8	psz_value
stmts	96:16	100:16	7	
water	96:16	0:0	8	{
call	97:20	97:59	8	msg_Err
arg	97:29	97:36	9	p_demux
water	97:29	0:0	10	p_demux
arg	97:38	97:59	9	"invalid xml stream"
water	97:38	0:0	10	"invalid xml stream"
water	97:60	0:0	8	;
call	98:20	98:29	8	FREE_ATT
water	98:30	0:0	8	;
return	99:20	99:32	8	false
water	99:27	0:0	9	false
water	100:16	0:0	8	}
break	101:16	101:21	6	
label	103:12	103:35	6	case XML_READER_ENDELEM :
water	105:16	0:0	6	psz_name
op	105:25	0:0	6	=
call	105:27	105:56	6	xml_ReaderName
arg	105:43	105:56	7	p_xml_reader
water	105:43	0:0	8	p_xml_reader
water	105:57	0:0	6	;
if	106:16	111:16	6	(! psz_name)
cond	106:20	106:21	7	! psz_name
op	106:20	0:0	8	!
water	106:21	0:0	8	psz_name
stmts	107:16	111:16	7	
water	107:16	0:0	8	{
call	108:20	108:59	8	msg_Err
arg	108:29	108:36	9	p_demux
water	108:29	0:0	10	p_demux
arg	108:38	108:59	9	"invalid xml stream"
water	108:38	0:0	10	"invalid xml stream"
water	108:60	0:0	8	;
call	109:20	109:29	8	FREE_ATT
water	109:30	0:0	8	;
return	110:20	110:32	8	false
water	110:27	0:0	9	false
water	111:16	0:0	8	}
if	113:16	146:16	6	(!strcmp (psz_name ,psz_element ))
cond	113:20	113:51	7	!strcmp (psz_name ,psz_element )
op	113:20	0:0	8	!
call	113:21	113:51	8	strcmp
arg	113:29	113:37	9	psz_name
water	113:29	0:0	10	psz_name
arg	113:39	113:51	9	psz_element
water	113:39	0:0	10	psz_element
stmts	114:16	146:16	7	
water	114:16	0:0	8	{
call	115:20	115:29	8	FREE_ATT
water	115:30	0:0	8	;
if	117:20	127:20	8	(p_demux -> p_sys -> i_track_id < 0)
cond	117:24	117:53	9	p_demux -> p_sys -> i_track_id < 0
water	117:24	0:0	10	p_demux
op	117:31	0:0	10	->
water	117:33	0:0	10	p_sys
op	117:38	0:0	10	->
water	117:40	0:0	10	i_track_id
op	117:51	0:0	10	<
water	117:53	0:0	10	0
stmts	118:20	127:20	9	
water	118:20	0:0	10	{
decl	119:24	119:72	10	char	*psz_uri
op	119:38	0:0	10	=
call	119:40	119:71	11	input_item_GetURI
arg	119:59	119:71	12	p_new_input
water	119:59	0:0	13	p_new_input
if	120:24	123:24	10	(psz_uri && * psz_uri)
cond	120:28	120:40	11	psz_uri && * psz_uri
water	120:28	0:0	12	psz_uri
op	120:36	0:0	12	&&
op	120:39	0:0	12	*
water	120:40	0:0	12	psz_uri
stmts	121:24	123:24	11	
water	121:24	0:0	12	{
call	122:28	122:77	12	input_item_AddSubItem
arg	122:51	122:63	13	p_input_item
water	122:51	0:0	14	p_input_item
arg	122:65	122:77	13	p_new_input
water	122:65	0:0	14	p_new_input
water	122:78	0:0	12	;
water	123:24	0:0	12	}
call	124:24	124:51	10	vlc_gc_decref
arg	124:39	124:51	11	p_new_input
water	124:39	0:0	12	p_new_input
water	124:52	0:0	10	;
call	125:24	125:38	10	free
arg	125:30	125:38	11	psz_uri
water	125:30	0:0	12	psz_uri
water	125:39	0:0	10	;
return	126:24	126:35	10	true
water	126:31	0:0	11	true
water	127:20	0:0	10	}
if	129:20	141:20	8	(p_demux -> p_sys -> i_track_id >= p_demux -> p_sys -> i_tracklist_entries)
cond	129:24	130:43	9	p_demux -> p_sys -> i_track_id >= p_demux -> p_sys -> i_tracklist_entries
water	129:24	0:0	10	p_demux
op	129:31	0:0	10	->
water	129:33	0:0	10	p_sys
op	129:38	0:0	10	->
water	129:40	0:0	10	i_track_id
op	129:51	0:0	10	>=
water	130:27	0:0	10	p_demux
op	130:34	0:0	10	->
water	130:36	0:0	10	p_sys
op	130:41	0:0	10	->
water	130:43	0:0	10	i_tracklist_entries
stmts	131:20	141:20	9	
water	131:20	0:0	10	{
decl	132:24	132:41	10	input_item_t	**pp
water	133:24	0:0	10	pp
op	133:27	0:0	10	=
call	133:29	134:75	10	realloc
arg	133:38	133:66	11	p_demux->p_sys->pp_tracklist
water	133:38	0:0	12	p_demux
op	133:45	0:0	12	->
water	133:47	0:0	12	p_sys
op	133:52	0:0	12	->
water	133:54	0:0	12	pp_tracklist
arg	134:28	134:75	11	(p_demux->p_sys->i_track_id+1)*sizeof(*pp)
water	134:28	0:0	12	(
water	134:29	0:0	12	p_demux
op	134:36	0:0	12	->
water	134:38	0:0	12	p_sys
op	134:43	0:0	12	->
water	134:45	0:0	12	i_track_id
op	134:56	0:0	12	+
water	134:58	0:0	12	1
water	134:59	0:0	12	)
op	134:61	0:0	12	*
op	134:63	0:0	12	sizeof
water	134:69	0:0	12	(
op	134:70	0:0	12	*
water	134:71	0:0	12	pp
water	134:73	0:0	12	)
water	134:76	0:0	10	;
if	135:24	136:40	10	(! pp)
cond	135:28	135:29	11	! pp
op	135:28	0:0	12	!
water	135:29	0:0	12	pp
stmts	136:28	136:40	11	
return	136:28	136:40	12	false
water	136:35	0:0	13	false
water	137:24	0:0	10	p_demux
op	137:31	0:0	10	->
water	137:33	0:0	10	p_sys
op	137:38	0:0	10	->
water	137:40	0:0	10	pp_tracklist
op	137:53	0:0	10	=
water	137:55	0:0	10	pp
water	137:57	0:0	10	;
while	138:24	140:76	10	(p_demux -> p_sys -> i_track_id >= p_demux -> p_sys -> i_tracklist_entries)
cond	138:31	139:47	11	p_demux -> p_sys -> i_track_id >= p_demux -> p_sys -> i_tracklist_entries
water	138:31	0:0	12	p_demux
op	138:38	0:0	12	->
water	138:40	0:0	12	p_sys
op	138:45	0:0	12	->
water	138:47	0:0	12	i_track_id
op	138:58	0:0	12	>=
water	139:31	0:0	12	p_demux
op	139:38	0:0	12	->
water	139:40	0:0	12	p_sys
op	139:45	0:0	12	->
water	139:47	0:0	12	i_tracklist_entries
stmts	140:28	140:76	11	
water	140:28	0:0	12	pp
op	140:30	0:0	12	[
water	140:31	0:0	12	p_demux
op	140:38	0:0	12	->
water	140:40	0:0	12	p_sys
op	140:45	0:0	12	->
water	140:47	0:0	12	i_tracklist_entries
op	140:66	0:0	12	++
op	140:68	0:0	12	]
op	140:70	0:0	12	=
water	140:72	0:0	12	NULL
water	140:76	0:0	12	;
water	141:20	0:0	10	}
water	143:20	0:0	8	p_demux
op	143:27	0:0	8	->
water	143:29	0:0	8	p_sys
op	143:34	0:0	8	->
water	143:36	0:0	8	pp_tracklist
op	143:48	0:0	8	[
water	144:28	0:0	8	p_demux
op	144:35	0:0	8	->
water	144:37	0:0	8	p_sys
op	144:42	0:0	8	->
water	144:44	0:0	8	i_track_id
op	144:55	0:0	8	]
op	144:57	0:0	8	=
water	144:59	0:0	8	p_new_input
water	144:70	0:0	8	;
return	145:20	145:31	8	true
water	145:27	0:0	9	true
water	146:16	0:0	8	}
if	148:16	155:16	6	(! p_handler || ! p_handler -> name ||strcmp (p_handler -> name ,psz_name ))
cond	148:20	149:57	7	! p_handler || ! p_handler -> name ||strcmp (p_handler -> name ,psz_name )
op	148:20	0:0	8	!
water	148:21	0:0	8	p_handler
op	148:31	0:0	8	||
op	148:34	0:0	8	!
water	148:35	0:0	8	p_handler
op	148:44	0:0	8	->
water	148:46	0:0	8	name
op	149:20	0:0	8	||
call	149:23	149:57	8	strcmp
arg	149:31	149:46	9	p_handler->name
water	149:31	0:0	10	p_handler
op	149:40	0:0	10	->
water	149:42	0:0	10	name
arg	149:48	149:57	9	psz_name
water	149:48	0:0	10	psz_name
stmts	150:16	155:16	7	
water	150:16	0:0	8	{
call	151:20	152:38	8	msg_Err
arg	151:29	151:36	9	p_demux
water	151:29	0:0	10	p_demux
arg	151:38	151:77	9	"there's no open element left for <%s>"
water	151:38	0:0	10	"there's no open element left for <%s>"
arg	152:29	152:38	9	psz_name
water	152:29	0:0	10	psz_name
water	152:39	0:0	8	;
call	153:20	153:29	8	FREE_ATT
water	153:30	0:0	8	;
return	154:20	154:32	8	false
water	154:27	0:0	9	false
water	155:16	0:0	8	}
if	158:16	190:16	6	(!strcmp (p_handler -> name ,"location" ))
cond	158:20	158:57	7	!strcmp (p_handler -> name ,"location" )
op	158:20	0:0	8	!
call	158:21	158:57	8	strcmp
arg	158:29	158:44	9	p_handler->name
water	158:29	0:0	10	p_handler
op	158:38	0:0	10	->
water	158:40	0:0	10	name
arg	158:46	158:57	9	"location"
water	158:46	0:0	10	"location"
stmts	159:16	190:16	7	
water	159:16	0:0	8	{
decl	160:20	160:40	8	char	*psz_uri
op	160:34	0:0	8	=
water	160:36	0:0	8	NULL
water	161:20	0:0	8	psz_uri
op	161:28	0:0	8	=
call	161:30	161:62	8	decode_URI_duplicate
arg	161:52	161:62	9	psz_value
water	161:52	0:0	10	psz_value
water	161:63	0:0	8	;
if	163:20	184:20	8	(psz_uri)
cond	163:24	163:24	9	psz_uri
water	163:24	0:0	10	psz_uri
stmts	164:20	184:20	9	
water	164:20	0:0	10	{
if	165:24	177:24	10	(p_demux -> p_sys -> psz_base && !strstr (psz_uri ,"://" ))
cond	165:28	166:52	11	p_demux -> p_sys -> psz_base && !strstr (psz_uri ,"://" )
water	165:28	0:0	12	p_demux
op	165:35	0:0	12	->
water	165:37	0:0	12	p_sys
op	165:42	0:0	12	->
water	165:44	0:0	12	psz_base
op	165:53	0:0	12	&&
op	166:28	0:0	12	!
call	166:29	166:52	12	strstr
arg	166:37	166:44	13	psz_uri
water	166:37	0:0	14	psz_uri
arg	166:46	166:52	13	"://"
water	166:46	0:0	14	"://"
stmts	167:24	177:24	11	
water	167:24	0:0	12	{
decl	168:27	170:55	12	char	*psz_tmp
op	168:41	0:0	12	=
call	168:43	170:54	13	malloc
arg	169:35	170:54	14	strlen(p_demux->p_sys->psz_base)+strlen(psz_uri)+1
call	169:35	169:66	15	strlen
arg	169:42	169:66	16	p_demux->p_sys->psz_base
water	169:42	0:0	17	p_demux
op	169:49	0:0	17	->
water	169:51	0:0	17	p_sys
op	169:56	0:0	17	->
water	169:58	0:0	17	psz_base
op	169:68	0:0	15	+
call	170:35	170:49	15	strlen
arg	170:42	170:49	16	psz_uri
water	170:42	0:0	17	psz_uri
op	170:51	0:0	15	+
water	170:52	0:0	15	1
if	171:27	172:43	12	(! psz_tmp)
cond	171:31	171:32	13	! psz_tmp
op	171:31	0:0	14	!
water	171:32	0:0	14	psz_tmp
stmts	172:31	172:43	13	
return	172:31	172:43	14	false
water	172:38	0:0	15	false
call	173:27	174:70	12	sprintf
arg	173:36	173:43	13	psz_tmp
water	173:36	0:0	14	psz_tmp
arg	173:45	173:51	13	"%s%s"
water	173:45	0:0	14	"%s%s"
arg	174:36	174:60	13	p_demux->p_sys->psz_base
water	174:36	0:0	14	p_demux
op	174:43	0:0	14	->
water	174:45	0:0	14	p_sys
op	174:50	0:0	14	->
water	174:52	0:0	14	psz_base
arg	174:62	174:70	13	psz_uri
water	174:62	0:0	14	psz_uri
water	174:71	0:0	12	;
call	175:27	175:41	12	free
arg	175:33	175:41	13	psz_uri
water	175:33	0:0	14	psz_uri
water	175:42	0:0	12	;
water	176:27	0:0	12	psz_uri
op	176:35	0:0	12	=
water	176:37	0:0	12	psz_tmp
water	176:44	0:0	12	;
water	177:24	0:0	12	}
call	178:24	178:64	10	input_item_SetURI
arg	178:43	178:54	11	p_new_input
water	178:43	0:0	12	p_new_input
arg	178:56	178:64	11	psz_uri
water	178:56	0:0	12	psz_uri
water	178:65	0:0	10	;
call	179:24	179:38	10	free
arg	179:30	179:38	11	psz_uri
water	179:30	0:0	12	psz_uri
water	179:39	0:0	10	;
call	180:24	180:74	10	input_item_CopyOptions
arg	180:48	180:60	11	p_input_item
water	180:48	0:0	12	p_input_item
arg	180:62	180:74	11	p_new_input
water	180:62	0:0	12	p_new_input
water	180:75	0:0	10	;
water	181:24	0:0	10	psz_uri
op	181:32	0:0	10	=
water	181:34	0:0	10	NULL
water	181:38	0:0	10	;
call	182:24	182:33	10	FREE_ATT
water	182:34	0:0	10	;
water	183:24	0:0	10	p_handler
op	183:34	0:0	10	=
water	183:36	0:0	10	NULL
water	183:40	0:0	10	;
water	184:20	0:0	10	}
else	185:20	189:20	8
stmts	186:20	189:20	9	
water	186:20	0:0	10	{
call	187:24	187:33	10	FREE_ATT
water	187:34	0:0	10	;
return	188:24	188:36	10	false
water	188:31	0:0	11	false
water	189:20	0:0	10	}
water	190:16	0:0	8	}
else	191:16	208:16	6
stmts	192:16	208:16	7	
water	192:16	0:0	8	{
if	194:20	200:20	8	(! p_new_input)
cond	194:24	194:25	9	! p_new_input
op	194:24	0:0	10	!
water	194:25	0:0	10	p_new_input
stmts	195:20	200:20	9	
water	195:20	0:0	10	{
call	196:24	197:42	10	msg_Err
arg	196:33	196:40	11	p_demux
water	196:33	0:0	12	p_demux
arg	196:42	196:72	11	"item not yet created at <%s>"
water	196:42	0:0	12	"item not yet created at <%s>"
arg	197:33	197:42	11	psz_name
water	197:33	0:0	12	psz_name
water	197:43	0:0	10	;
call	198:24	198:33	10	FREE_ATT
water	198:34	0:0	10	;
return	199:24	199:36	10	false
water	199:31	0:0	11	false
water	200:20	0:0	10	}
if	201:20	207:20	8	(p_handler -> pf_handler . smpl)
cond	201:24	201:46	9	p_handler -> pf_handler . smpl
water	201:24	0:0	10	p_handler
op	201:33	0:0	10	->
water	201:35	0:0	10	pf_handler
op	201:45	0:0	10	.
water	201:46	0:0	10	smpl
stmts	202:20	207:20	9	
water	202:20	0:0	10	{
call	203:24	205:62	10	p_handler->pf_handler.smpl
arg	203:52	203:63	11	p_new_input
water	203:52	0:0	12	p_new_input
arg	204:52	204:67	11	p_handler->name
water	204:52	0:0	12	p_handler
op	204:61	0:0	12	->
water	204:63	0:0	12	name
arg	205:52	205:62	11	psz_value
water	205:52	0:0	12	psz_value
water	205:63	0:0	10	;
call	206:24	206:33	10	FREE_ATT
water	206:34	0:0	10	;
water	207:20	0:0	10	}
water	208:16	0:0	8	}
call	209:16	209:25	6	FREE_ATT
water	209:26	0:0	6	;
water	210:16	0:0	6	p_handler
op	210:26	0:0	6	=
water	210:28	0:0	6	NULL
water	210:32	0:0	6	;
break	211:16	211:21	6	
label	213:12	213:19	6	default :
call	215:16	215:67	6	msg_Err
arg	215:25	215:32	7	p_demux
water	215:25	0:0	8	p_demux
arg	215:34	215:58	7	"unexpected xml node %i"
water	215:34	0:0	8	"unexpected xml node %i"
arg	215:60	215:67	7	i_node
water	215:60	0:0	8	i_node
water	215:68	0:0	6	;
call	216:16	216:25	6	FREE_ATT
water	216:26	0:0	6	;
return	217:16	217:28	6	false
water	217:23	0:0	7	false
water	218:8	0:0	6	}
call	219:8	219:18	4	FREE_NAME
water	219:19	0:0	4	;
water	220:4	0:0	4	}
call	221:4	221:51	2	msg_Err
arg	221:13	221:20	3	p_demux
water	221:13	0:0	4	p_demux
arg	221:22	221:51	3	"unexpected end of xml data"
water	221:22	0:0	4	"unexpected end of xml data"
water	221:52	0:0	2	;
call	222:4	222:13	2	FREE_ATT
water	222:14	0:0	2	;
return	223:4	223:16	2	false
water	223:11	0:0	3	false
