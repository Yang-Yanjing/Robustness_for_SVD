func	1:4	80:0	0	WINAPI	WinMain
params	1:18	0:0	1	
param	1:20	1:39	2	HINSTANCE	hInstance
param	1:41	1:64	2	HINSTANCE	hPrevInstance
param	1:66	1:79	2	int	nCmdShow
stmnts	0:0	79:12	1	
decl	3:4	3:12	2	int	argc
call	5:4	5:71	2	HeapSetInformation
arg	5:23	5:27	3	NULL
water	5:23	0:0	4	NULL
arg	5:29	5:62	3	HeapEnableTerminationOnCorruption
water	5:29	0:0	4	HeapEnableTerminationOnCorruption
arg	5:64	5:68	3	NULL
water	5:64	0:0	4	NULL
arg	5:70	5:71	3	0
water	5:70	0:0	4	0
water	5:72	0:0	2	;
decl	7:4	7:56	2	HINSTANCE	h_Kernel32
op	7:25	0:0	2	=
call	7:27	7:55	3	LoadLibraryW
arg	7:40	7:55	4	L"kernel32.dll"
water	7:40	0:0	5	L
water	7:41	0:0	5	"kernel32.dll"
if	8:4	18:4	2	(h_Kernel32)
cond	8:7	8:7	3	h_Kernel32
water	8:7	0:0	4	h_Kernel32
stmts	9:4	18:4	3	
water	9:4	0:0	4	{
call	10:8	10:44	4	BOOL
arg	10:14	10:44	5	WINAPI*mySetProcessDEPPolicy
water	10:14	0:0	6	WINAPI
op	10:21	0:0	6	*
water	10:23	0:0	6	mySetProcessDEPPolicy
water	10:45	0:0	4	(
water	10:47	0:0	4	DWORD
water	10:53	0:0	4	dwFlags
water	10:60	0:0	4	)
water	10:61	0:0	4	;
water	13:8	0:0	4	mySetProcessDEPPolicy
op	13:30	0:0	4	=
water	13:32	0:0	4	(
water	13:33	0:0	4	BOOL
call	13:38	13:47	4	WINAPI
arg	13:46	13:47	5	*
op	13:46	0:0	6	*
water	13:48	0:0	4	(
water	13:49	0:0	4	DWORD
water	13:54	0:0	4	)
water	13:55	0:0	4	)
call	14:28	14:76	4	GetProcAddress
arg	14:43	14:53	5	h_Kernel32
water	14:43	0:0	6	h_Kernel32
arg	14:55	14:76	5	"SetProcessDEPPolicy"
water	14:55	0:0	6	"SetProcessDEPPolicy"
water	14:77	0:0	4	;
if	15:8	16:53	4	(mySetProcessDEPPolicy)
cond	15:11	15:11	5	mySetProcessDEPPolicy
water	15:11	0:0	6	mySetProcessDEPPolicy
stmts	16:12	16:53	5	
call	16:12	16:52	6	mySetProcessDEPPolicy
arg	16:34	16:52	7	PROCESS_DEP_ENABLE
water	16:34	0:0	8	PROCESS_DEP_ENABLE
water	16:53	0:0	6	;
call	17:8	17:30	4	FreeLibrary
arg	17:20	17:30	5	h_Kernel32
water	17:20	0:0	6	h_Kernel32
water	17:31	0:0	4	;
water	18:4	0:0	4	}
decl	20:4	20:67	2	wchar_t	**wargv
op	20:20	0:0	2	=
call	20:22	20:66	3	CommandLineToArgvW
arg	20:42	20:59	4	GetCommandLine()
call	20:42	20:58	5	GetCommandLine
arg	20:61	20:66	4	&argc
op	20:61	0:0	5	&
water	20:62	0:0	5	argc
if	21:4	22:16	2	(wargv == NULL)
cond	21:8	21:17	3	wargv == NULL
water	21:8	0:0	4	wargv
op	21:14	0:0	4	==
water	21:17	0:0	4	NULL
stmts	22:8	22:16	3	
return	22:8	22:16	4	1
water	22:15	0:0	5	1
decl	24:4	24:24	2	char	*argv[argc+1]
decl	25:4	25:30	2	BOOL	crash_handling
op	25:24	0:0	2	=
water	25:26	0:0	2	TRUE
decl	26:4	26:13	2	int	j
op	26:10	0:0	2	=
water	26:12	0:0	2	0
water	28:4	0:0	2	argv
op	28:8	0:0	2	[
water	28:9	0:0	2	j
op	28:10	0:0	2	++
op	28:12	0:0	2	]
op	28:14	0:0	2	=
call	28:16	28:48	2	FromWide
arg	28:26	28:48	3	L"--no-ignore-config"
water	28:26	0:0	4	L
water	28:27	0:0	4	"--no-ignore-config"
water	28:49	0:0	2	;
for	29:4	40:4	2	( int i = 1 ;i < argc;i ++)
forinit	0:0	29:18	3	 int i = 1 ;
decl	29:9	29:18	4	int	i
op	29:15	0:0	4	=
water	29:17	0:0	4	1
cond	29:20	29:24	3	i < argc
water	29:20	0:0	4	i
op	29:22	0:0	4	<
water	29:24	0:0	4	argc
forexpr	29:30	29:31	3	i ++
water	29:30	0:0	4	i
op	29:31	0:0	4	++
stmts	30:4	40:4	3	
water	30:4	0:0	4	{
if	31:8	34:8	4	(!wcscmp (wargv [ i ] ,L "--no-crashdump" ))
cond	31:11	31:46	5	!wcscmp (wargv [ i ] ,L "--no-crashdump" )
op	31:11	0:0	6	!
call	31:12	31:46	6	wcscmp
arg	31:19	31:27	7	wargv[i]
water	31:19	0:0	8	wargv
op	31:24	0:0	8	[
water	31:25	0:0	8	i
op	31:26	0:0	8	]
arg	31:29	31:46	7	L"--no-crashdump"
water	31:29	0:0	8	L
water	31:30	0:0	8	"--no-crashdump"
stmts	32:8	34:8	5	
water	32:8	0:0	6	{
water	33:12	0:0	6	crash_handling
op	33:27	0:0	6	=
water	33:29	0:0	6	FALSE
water	33:34	0:0	6	;
water	34:8	0:0	6	}
else	35:8	39:8	4
stmts	36:8	39:8	5	
water	36:8	0:0	6	{
water	37:12	0:0	6	argv
op	37:16	0:0	6	[
water	37:17	0:0	6	j
op	37:18	0:0	6	]
op	37:20	0:0	6	=
call	37:22	37:40	6	FromWide
arg	37:32	37:40	7	wargv[i]
water	37:32	0:0	8	wargv
op	37:37	0:0	8	[
water	37:38	0:0	8	i
op	37:39	0:0	8	]
water	37:41	0:0	6	;
water	38:12	0:0	6	j
op	38:13	0:0	6	++
water	38:15	0:0	6	;
water	39:8	0:0	6	}
water	40:4	0:0	4	}
water	42:4	0:0	2	argc
op	42:9	0:0	2	=
water	42:11	0:0	2	j
water	42:12	0:0	2	;
water	43:4	0:0	2	argv
op	43:8	0:0	2	[
water	43:9	0:0	2	argc
op	43:13	0:0	2	]
op	43:15	0:0	2	=
water	43:17	0:0	2	NULL
water	43:21	0:0	2	;
call	44:4	44:20	2	LocalFree
arg	44:15	44:20	3	wargv
water	44:15	0:0	4	wargv
water	44:21	0:0	2	;
if	47:4	51:4	2	(crash_handling)
cond	47:7	47:7	3	crash_handling
water	47:7	0:0	4	crash_handling
stmts	48:4	51:4	3	
water	48:4	0:0	4	{
call	49:8	49:24	4	check_crashdump
water	49:25	0:0	4	;
call	50:8	50:56	4	SetUnhandledExceptionFilter
arg	50:36	50:56	5	vlc_exception_filter
water	50:36	0:0	6	vlc_exception_filter
water	50:57	0:0	4	;
water	51:4	0:0	4	}
decl	55:4	55:51	2	char	**argv
water	55:15	0:0	2	,
decl	55:4	55:51	2	char	psz_cmdline[wcslen(lpCmdLine)*4]
call	57:4	58:71	2	WideCharToMultiByte
arg	57:25	57:32	3	CP_UTF8
water	57:25	0:0	4	CP_UTF8
arg	57:34	57:35	3	0
water	57:34	0:0	4	0
arg	57:37	57:46	3	lpCmdLine
water	57:37	0:0	4	lpCmdLine
arg	57:48	57:50	3	-1
op	57:48	0:0	4	-
water	57:49	0:0	4	1
arg	58:25	58:36	3	psz_cmdline
water	58:25	0:0	4	psz_cmdline
arg	58:38	58:58	3	sizeof(psz_cmdline)
op	58:38	0:0	4	sizeof
water	58:45	0:0	4	(
water	58:46	0:0	4	psz_cmdline
water	58:57	0:0	4	)
arg	58:60	58:64	3	NULL
water	58:60	0:0	4	NULL
arg	58:66	58:71	3	NULL
water	58:66	0:0	4	NULL
water	58:72	0:0	2	;
water	60:4	0:0	2	argc
op	60:9	0:0	2	=
call	60:11	60:44	2	parse_cmdline
arg	60:26	60:37	3	psz_cmdline
water	60:26	0:0	4	psz_cmdline
arg	60:39	60:44	3	&argv
op	60:39	0:0	4	&
water	60:40	0:0	4	argv
water	60:45	0:0	2	;
decl	64:4	64:26	2	libvlc_instance_t	*vlc
water	65:4	0:0	2	vlc
op	65:8	0:0	2	=
call	65:10	65:47	2	libvlc_new
arg	65:22	65:26	3	argc
water	65:22	0:0	4	argc
arg	65:28	65:47	3	(constchar**)argv
water	65:28	0:0	4	(
water	65:29	0:0	4	const
water	65:35	0:0	4	char
op	65:40	0:0	4	*
op	65:41	0:0	4	*
water	65:42	0:0	4	)
water	65:43	0:0	4	argv
water	65:48	0:0	2	;
if	66:4	73:4	2	(vlc != NULL)
cond	66:8	66:15	3	vlc != NULL
water	66:8	0:0	4	vlc
op	66:12	0:0	4	!=
water	66:15	0:0	4	NULL
stmts	67:4	73:4	3	
water	67:4	0:0	4	{
call	68:8	68:50	4	libvlc_add_intf
arg	68:25	68:28	5	vlc
water	68:25	0:0	6	vlc
arg	68:30	68:50	5	"globalhotkeys,none"
water	68:30	0:0	6	"globalhotkeys,none"
water	68:51	0:0	4	;
call	69:8	69:34	4	libvlc_add_intf
arg	69:25	69:28	5	vlc
water	69:25	0:0	6	vlc
arg	69:30	69:34	5	NULL
water	69:30	0:0	6	NULL
water	69:35	0:0	4	;
call	70:8	70:46	4	libvlc_playlist_play
arg	70:30	70:33	5	vlc
water	70:30	0:0	6	vlc
arg	70:35	70:37	5	-1
op	70:35	0:0	6	-
water	70:36	0:0	6	1
arg	70:39	70:40	5	0
water	70:39	0:0	6	0
arg	70:42	70:46	5	NULL
water	70:42	0:0	6	NULL
water	70:47	0:0	4	;
call	71:8	71:24	4	libvlc_wait
arg	71:21	71:24	5	vlc
water	71:21	0:0	6	vlc
water	71:25	0:0	4	;
call	72:8	72:27	4	libvlc_release
arg	72:24	72:27	5	vlc
water	72:24	0:0	6	vlc
water	72:28	0:0	4	;
water	73:4	0:0	4	}
for	75:4	76:22	2	( int i = 0 ;i < argc;i ++)
forinit	0:0	75:18	3	 int i = 0 ;
decl	75:9	75:18	4	int	i
op	75:15	0:0	4	=
water	75:17	0:0	4	0
cond	75:20	75:24	3	i < argc
water	75:20	0:0	4	i
op	75:22	0:0	4	<
water	75:24	0:0	4	argc
forexpr	75:30	75:31	3	i ++
water	75:30	0:0	4	i
op	75:31	0:0	4	++
stmts	76:8	76:22	3	
call	76:8	76:21	4	free
arg	76:14	76:21	5	argv[i]
water	76:14	0:0	6	argv
op	76:18	0:0	6	[
water	76:19	0:0	6	i
op	76:20	0:0	6	]
water	76:22	0:0	4	;
water	78:4	0:0	2	(
water	78:5	0:0	2	void
water	78:9	0:0	2	)
water	78:10	0:0	2	hInstance
water	78:19	0:0	2	;
water	78:21	0:0	2	(
water	78:22	0:0	2	void
water	78:26	0:0	2	)
water	78:27	0:0	2	hPrevInstance
water	78:40	0:0	2	;
water	78:42	0:0	2	(
water	78:43	0:0	2	void
water	78:47	0:0	2	)
water	78:48	0:0	2	lpCmdLine
water	78:57	0:0	2	;
water	78:59	0:0	2	(
water	78:60	0:0	2	void
water	78:64	0:0	2	)
water	78:65	0:0	2	nCmdShow
water	78:73	0:0	2	;
return	79:4	79:12	2	0
water	79:11	0:0	3	0
