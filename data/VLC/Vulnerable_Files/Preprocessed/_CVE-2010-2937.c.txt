func	1:1	129:0	0	static void	ReadMetaFromId3v2
params	1:30	0:0	1	
param	1:32	1:47	2	ID3v2 :: Tag *	tag
param	1:49	1:65	2	demux_t *	p_demux
param	1:67	1:93	2	demux_meta_t *	p_demux_meta
param	1:95	1:114	2	vlc_meta_t *	p_meta
stmnts	0:0	128:4	1	
decl	4:4	4:55	2	ID3v2 :: FrameList	list
op	4:26	0:0	2	=
call	4:28	4:46	3	tag->frameListMap
op	4:47	0:0	2	[
water	4:48	0:0	2	"UFID"
op	4:54	0:0	2	]
decl	5:4	5:35	2	ID3v2 :: FrameList :: Iterator	iter
for	6:4	22:4	2	(iter =list . begin ( ) ;iter !=list . end ( );iter ++)
forinit	6:9	6:28	3	iter =list . begin ( ) ;
water	6:9	0:0	4	iter
op	6:14	0:0	4	=
call	6:16	6:27	4	list.begin
water	6:28	0:0	4	;
cond	6:30	6:47	3	iter !=list . end ( )
water	6:30	0:0	4	iter
op	6:35	0:0	4	!=
call	6:38	6:47	4	list.end
forexpr	6:50	6:54	3	iter ++
water	6:50	0:0	4	iter
op	6:54	0:0	4	++
stmts	7:4	22:4	3	
water	7:4	0:0	4	{
decl	8:8	9:70	4	ID3v2 :: UniqueFileIdentifierFrame	*p_ufid
op	8:49	0:0	4	=
call	9:16	9:69	5	dynamic_cast
arg	9:64	9:69	6	*iter
op	9:64	0:0	7	*
water	9:65	0:0	7	iter
decl	10:8	10:55	4	const char	*owner
op	10:26	0:0	4	=
call	10:28	10:42	5	p_ufid->owner
op	10:43	0:0	4	.
call	10:44	10:54	5	toCString
if	11:8	21:8	4	(!strcmp (owner ,"http://musicbrainz.org" ))
cond	11:12	11:53	5	!strcmp (owner ,"http://musicbrainz.org" )
op	11:12	0:0	6	!
call	11:13	11:53	6	strcmp
arg	11:21	11:26	7	owner
water	11:21	0:0	8	owner
arg	11:28	11:53	7	"http://musicbrainz.org"
water	11:28	0:0	8	"http://musicbrainz.org"
stmts	12:8	21:8	5	
water	12:8	0:0	6	{
decl	16:12	16:29	6	char	psz_ufid[64]
decl	17:12	17:66	6	int	max_size
op	17:25	0:0	6	=
call	17:27	17:65	7	__MIN
arg	17:34	17:61	8	p_ufid->identifier().size()
call	17:34	17:53	9	p_ufid->identifier
op	17:54	0:0	9	.
call	17:55	17:60	9	size
arg	17:63	17:65	8	63
water	17:63	0:0	9	63
call	18:12	18:69	6	strncpy
arg	18:21	18:29	7	psz_ufid
water	18:21	0:0	8	psz_ufid
arg	18:31	18:58	7	p_ufid->identifier().data()
call	18:31	18:50	8	p_ufid->identifier
op	18:51	0:0	8	.
call	18:52	18:57	8	data
arg	18:60	18:69	7	max_size
water	18:60	0:0	8	max_size
water	18:70	0:0	6	;
water	19:12	0:0	6	psz_ufid
op	19:20	0:0	6	[
water	19:21	0:0	6	max_size
op	19:29	0:0	6	]
op	19:31	0:0	6	=
water	19:33	0:0	6	'\0'
water	19:37	0:0	6	;
call	20:12	20:50	6	vlc_meta_SetTrackID
arg	20:33	20:39	7	p_meta
water	20:33	0:0	8	p_meta
arg	20:41	20:50	7	psz_ufid
water	20:41	0:0	8	psz_ufid
water	20:51	0:0	6	;
water	21:8	0:0	6	}
water	22:4	0:0	4	}
water	24:4	0:0	2	list
op	24:9	0:0	2	=
call	24:11	24:29	2	tag->frameListMap
op	24:30	0:0	2	[
water	24:31	0:0	2	"TXXX"
op	24:37	0:0	2	]
water	24:38	0:0	2	;
for	25:4	31:4	2	(iter =list . begin ( ) ;iter !=list . end ( );iter ++)
forinit	25:9	25:28	3	iter =list . begin ( ) ;
water	25:9	0:0	4	iter
op	25:14	0:0	4	=
call	25:16	25:27	4	list.begin
water	25:28	0:0	4	;
cond	25:30	25:47	3	iter !=list . end ( )
water	25:30	0:0	4	iter
op	25:35	0:0	4	!=
call	25:38	25:47	4	list.end
forexpr	25:50	25:54	3	iter ++
water	25:50	0:0	4	iter
op	25:54	0:0	4	++
stmts	26:4	31:4	3	
water	26:4	0:0	4	{
decl	27:8	28:72	4	ID3v2 :: UserTextIdentificationFrame	*p_txxx
op	27:51	0:0	4	=
call	28:16	28:71	5	dynamic_cast
arg	28:66	28:71	6	*iter
op	28:66	0:0	7	*
water	28:67	0:0	7	iter
call	29:8	30:76	4	vlc_meta_AddExtra
arg	29:27	29:33	5	p_meta
water	29:27	0:0	6	p_meta
arg	29:35	29:74	5	p_txxx->description().toCString(true)
call	29:35	29:55	6	p_txxx->description
op	29:56	0:0	6	.
call	29:57	29:73	6	toCString
arg	29:68	29:73	7	true
water	29:68	0:0	8	true
arg	30:27	30:76	5	p_txxx->fieldList().toString().toCString(true)
call	30:27	30:45	6	p_txxx->fieldList
op	30:46	0:0	6	.
call	30:47	30:56	6	toString
op	30:57	0:0	6	.
call	30:58	30:74	6	toCString
arg	30:69	30:74	7	true
water	30:69	0:0	8	true
water	30:77	0:0	4	;
water	31:4	0:0	4	}
water	34:4	0:0	2	list
op	34:9	0:0	2	=
call	34:11	34:29	2	tag->frameListMap
op	34:30	0:0	2	[
water	34:31	0:0	2	tagName
op	34:38	0:0	2	]
water	34:39	0:0	2	;
if	35:4	37:79	2	(!list . isEmpty ( ))
cond	35:8	35:22	3	!list . isEmpty ( )
op	35:8	0:0	4	!
call	35:9	35:22	4	list.isEmpty
stmts	36:8	37:79	3	
call	36:8	37:46	4	vlc_meta_Set
arg	37:33	37:46	5	*list.begin()
call	37:33	37:45	6	*list.begin
op	37:47	0:0	4	->
call	37:49	37:58	4	toString
op	37:59	0:0	4	.
call	37:60	37:76	4	toCString
arg	37:71	37:76	5	true
water	37:71	0:0	6	true
water	37:78	0:0	4	)
water	37:79	0:0	4	;
call	38:4	38:27	2	SET
arg	38:9	38:15	3	"TCOP"
water	38:9	0:0	4	"TCOP"
arg	38:17	38:27	3	Copyright
water	38:17	0:0	4	Copyright
water	38:28	0:0	2	;
call	39:4	39:27	2	SET
arg	39:9	39:15	3	"TENC"
water	39:9	0:0	4	"TENC"
arg	39:17	39:27	3	EncodedBy
water	39:17	0:0	4	EncodedBy
water	39:28	0:0	2	;
call	40:4	40:26	2	SET
arg	40:9	40:15	3	"TLAN"
water	40:9	0:0	4	"TLAN"
arg	40:17	40:26	3	Language
water	40:17	0:0	4	Language
water	40:27	0:0	2	;
call	41:4	41:27	2	SET
arg	41:9	41:15	3	"TPUB"
water	41:9	0:0	4	"TPUB"
arg	41:17	41:27	3	Publisher
water	41:17	0:0	4	Publisher
water	41:28	0:0	2	;
water	46:4	0:0	2	static
water	46:11	0:0	2	const
water	46:17	0:0	2	int
water	46:21	0:0	2	pi_cover_score
op	46:35	0:0	2	[
op	46:36	0:0	2	]
op	46:38	0:0	2	=
water	46:40	0:0	2	{
water	47:8	0:0	2	0
water	47:9	0:0	2	,
water	48:8	0:0	2	5
water	48:9	0:0	2	,
water	49:8	0:0	2	4
water	49:9	0:0	2	,
water	50:8	0:0	2	20
water	50:10	0:0	2	,
water	51:8	0:0	2	19
water	51:10	0:0	2	,
water	52:8	0:0	2	13
water	52:10	0:0	2	,
water	53:8	0:0	2	18
water	53:10	0:0	2	,
water	54:8	0:0	2	17
water	54:10	0:0	2	,
water	55:8	0:0	2	16
water	55:10	0:0	2	,
water	56:8	0:0	2	14
water	56:10	0:0	2	,
water	57:8	0:0	2	15
water	57:10	0:0	2	,
water	58:8	0:0	2	9
water	58:9	0:0	2	,
water	59:8	0:0	2	8
water	59:9	0:0	2	,
water	60:8	0:0	2	7
water	60:9	0:0	2	,
water	61:8	0:0	2	10
water	61:10	0:0	2	,
water	62:8	0:0	2	11
water	62:10	0:0	2	,
water	63:8	0:0	2	6
water	63:9	0:0	2	,
water	64:8	0:0	2	1
water	64:9	0:0	2	,
water	65:8	0:0	2	12
water	65:10	0:0	2	,
water	66:8	0:0	2	3
water	66:9	0:0	2	,
water	67:8	0:0	2	2
water	68:4	0:0	2	}
water	68:5	0:0	2	;
decl	69:4	69:20	2	int	i_score
op	69:16	0:0	2	=
op	69:18	0:0	2	-
water	69:19	0:0	2	1
water	71:4	0:0	2	list
op	71:9	0:0	2	=
call	71:11	71:29	2	tag->frameListMap
op	71:30	0:0	2	[
water	71:32	0:0	2	"APIC"
op	71:39	0:0	2	]
water	71:40	0:0	2	;
if	72:4	73:14	2	(list . isEmpty ( ))
cond	72:8	72:21	3	list . isEmpty ( )
call	72:8	72:21	4	list.isEmpty
stmts	73:8	73:14	3	
return	73:8	73:14	4	
call	74:4	74:69	2	TAB_INIT
arg	74:14	74:41	3	p_demux_meta->i_attachments
water	74:14	0:0	4	p_demux_meta
op	74:26	0:0	4	->
water	74:28	0:0	4	i_attachments
arg	74:43	74:69	3	p_demux_meta->attachments
water	74:43	0:0	4	p_demux_meta
op	74:55	0:0	4	->
water	74:57	0:0	4	attachments
water	74:70	0:0	2	;
for	75:4	128:4	2	(iter =list . begin ( ) ;iter !=list . end ( );iter ++)
forinit	75:9	75:28	3	iter =list . begin ( ) ;
water	75:9	0:0	4	iter
op	75:14	0:0	4	=
call	75:16	75:27	4	list.begin
water	75:28	0:0	4	;
cond	75:30	75:47	3	iter !=list . end ( )
water	75:30	0:0	4	iter
op	75:35	0:0	4	!=
call	75:38	75:47	4	list.end
forexpr	75:50	75:54	3	iter ++
water	75:50	0:0	4	iter
op	75:54	0:0	4	++
stmts	76:4	128:4	3	
water	76:4	0:0	4	{
decl	77:8	78:61	4	ID3v2 :: AttachedPictureFrame	*p_apic
op	77:44	0:0	4	=
call	78:12	78:60	5	dynamic_cast
arg	78:55	78:60	6	*iter
op	78:55	0:0	7	*
water	78:56	0:0	7	iter
decl	79:8	79:40	4	input_attachment_t	*p_attachment
decl	80:8	80:28	4	const char	*psz_mime
decl	81:8	81:40	4	char	*psz_name
water	81:22	0:0	4	,
decl	81:8	81:40	4	char	*psz_description
water	84:8	0:0	4	psz_mime
op	84:17	0:0	4	=
call	84:19	84:36	4	p_apic->mimeType
op	84:37	0:0	4	.
call	84:38	84:54	4	toCString
arg	84:49	84:54	5	true
water	84:49	0:0	6	true
water	84:55	0:0	4	;
if	85:8	86:79	4	(p_apic -> description ( ) .size ( ) > 0)
cond	85:12	85:43	5	p_apic -> description ( ) .size ( ) > 0
call	85:12	85:32	6	p_apic->description
op	85:33	0:0	6	.
call	85:34	85:39	6	size
op	85:41	0:0	6	>
water	85:43	0:0	6	0
stmts	86:12	86:79	5	
water	86:12	0:0	6	psz_description
op	86:28	0:0	6	=
call	86:30	86:78	6	strdup
arg	86:38	86:78	7	p_apic->description().toCString(true)
call	86:38	86:58	8	p_apic->description
op	86:59	0:0	8	.
call	86:60	86:76	8	toCString
arg	86:71	86:76	9	true
water	86:71	0:0	10	true
water	86:79	0:0	6	;
else	87:8	91:8	4
stmts	88:8	91:8	5	
water	88:8	0:0	6	{
if	89:12	90:38	6	(asprintf (& psz_description ,"%i" ,p_apic -> type ( ) ) == - 1)
cond	89:16	89:71	7	asprintf (& psz_description ,"%i" ,p_apic -> type ( ) ) == - 1
call	89:16	89:65	8	asprintf
arg	89:26	89:42	9	&psz_description
op	89:26	0:0	10	&
water	89:27	0:0	10	psz_description
arg	89:44	89:48	9	"%i"
water	89:44	0:0	10	"%i"
arg	89:50	89:65	9	p_apic->type()
call	89:50	89:63	10	p_apic->type
op	89:67	0:0	8	==
op	89:70	0:0	8	-
water	89:71	0:0	8	1
stmts	90:16	90:38	7	
water	90:16	0:0	8	psz_description
op	90:32	0:0	8	=
water	90:34	0:0	8	NULL
water	90:38	0:0	8	;
water	91:8	0:0	6	}
if	92:8	93:20	4	(! psz_description)
cond	92:12	92:13	5	! psz_description
op	92:12	0:0	6	!
water	92:13	0:0	6	psz_description
stmts	93:12	93:20	5	
continue	93:12	93:20	6	
water	94:8	0:0	4	psz_name
op	94:17	0:0	4	=
water	94:19	0:0	4	psz_description
water	94:34	0:0	4	;
if	99:8	105:8	4	(!strncmp (psz_mime ,"PNG" ,3 ) || !strncmp (psz_name ,"\xC2\x89PNG" ,5 ))
cond	99:12	100:49	5	!strncmp (psz_mime ,"PNG" ,3 ) || !strncmp (psz_name ,"\xC2\x89PNG" ,5 )
op	99:12	0:0	6	!
call	99:13	99:41	6	strncmp
arg	99:22	99:30	7	psz_mime
water	99:22	0:0	8	psz_mime
arg	99:32	99:37	7	"PNG"
water	99:32	0:0	8	"PNG"
arg	99:39	99:41	7	3
water	99:39	0:0	8	3
op	99:43	0:0	6	||
op	100:12	0:0	6	!
call	100:13	100:49	6	strncmp
arg	100:22	100:30	7	psz_name
water	100:22	0:0	8	psz_name
arg	100:32	100:45	7	"\xC2\x89PNG"
water	100:32	0:0	8	"\xC2\x89PNG"
arg	100:47	100:49	7	5
water	100:47	0:0	8	5
stmts	101:8	105:8	5	
water	101:8	0:0	6	{
call	102:12	102:88	6	msg_Warn
arg	102:22	102:34	7	p_demux_meta
water	102:22	0:0	8	p_demux_meta
arg	102:36	102:88	7	"Invalid picture embedded by broken iTunes version"
water	102:36	0:0	8	"Invalid picture embedded by broken iTunes version"
water	102:89	0:0	6	;
call	103:12	103:34	6	free
arg	103:18	103:34	7	psz_description
water	103:18	0:0	8	psz_description
water	103:35	0:0	6	;
continue	104:12	104:20	6	
water	105:8	0:0	6	}
decl	106:8	106:52	4	const ByteVector	picture
op	106:33	0:0	4	=
call	106:35	106:51	5	p_apic->picture
decl	107:8	107:43	4	const char	*p_data
op	107:27	0:0	4	=
call	107:29	107:42	5	picture.data
water	108:8	0:0	4	const
water	108:14	0:0	4	unsigned
water	108:23	0:0	4	i_data
op	108:30	0:0	4	=
call	108:32	108:45	4	picture.size
water	108:46	0:0	4	;
call	109:8	110:44	4	msg_Dbg
arg	109:17	109:29	5	p_demux_meta
water	109:17	0:0	6	p_demux_meta
arg	109:31	109:72	5	"Found embedded art: %s (%s) is %u bytes"
water	109:31	0:0	6	"Found embedded art: %s (%s) is %u bytes"
arg	110:17	110:25	5	psz_name
water	110:17	0:0	6	psz_name
arg	110:27	110:35	5	psz_mime
water	110:27	0:0	6	psz_mime
arg	110:37	110:44	5	i_data
water	110:37	0:0	6	i_data
water	110:45	0:0	4	;
water	111:8	0:0	4	p_attachment
op	111:21	0:0	4	=
call	111:23	112:64	4	vlc_input_attachment_New
arg	111:49	111:57	5	psz_name
water	111:49	0:0	6	psz_name
arg	111:59	111:67	5	psz_mime
water	111:59	0:0	6	psz_mime
arg	112:32	112:47	5	psz_description
water	112:32	0:0	6	psz_description
arg	112:49	112:55	5	p_data
water	112:49	0:0	6	p_data
arg	112:57	112:64	5	i_data
water	112:57	0:0	6	i_data
water	112:65	0:0	4	;
if	113:8	116:43	4	(p_attachment)
cond	113:12	113:12	5	p_attachment
water	113:12	0:0	6	p_attachment
stmts	114:12	116:43	5	
call	114:12	116:42	6	TAB_APPEND_CAST
arg	114:29	114:51	7	(input_attachment_t**)
water	114:29	0:0	8	(
water	114:30	0:0	8	input_attachment_t
op	114:48	0:0	8	*
op	114:49	0:0	8	*
water	114:50	0:0	8	)
arg	115:29	115:56	7	p_demux_meta->i_attachments
water	115:29	0:0	8	p_demux_meta
op	115:41	0:0	8	->
water	115:43	0:0	8	i_attachments
arg	115:58	115:83	7	p_demux_meta->attachments
water	115:58	0:0	8	p_demux_meta
op	115:70	0:0	8	->
water	115:72	0:0	8	attachments
arg	116:29	116:42	7	p_attachment
water	116:29	0:0	8	p_attachment
water	116:43	0:0	6	;
call	117:8	117:30	4	free
arg	117:14	117:30	5	psz_description
water	117:14	0:0	6	psz_description
water	117:31	0:0	4	;
if	118:8	127:8	4	(pi_cover_score [p_apic -> type ( ) ] > i_score)
cond	118:12	118:45	5	pi_cover_score [p_apic -> type ( ) ] > i_score
water	118:12	0:0	6	pi_cover_score
op	118:26	0:0	6	[
call	118:27	118:40	6	p_apic->type
op	118:41	0:0	6	]
op	118:43	0:0	6	>
water	118:45	0:0	6	i_score
stmts	119:8	127:8	5	
water	119:8	0:0	6	{
water	120:12	0:0	6	i_score
op	120:20	0:0	6	=
water	120:22	0:0	6	pi_cover_score
op	120:36	0:0	6	[
call	120:37	120:50	6	p_apic->type
op	120:51	0:0	6	]
water	120:52	0:0	6	;
decl	121:12	121:25	6	char	*psz_url
if	122:12	124:24	6	(asprintf (& psz_url ,"attachment://%s" ,p_attachment -> psz_name ) == - 1)
cond	122:16	123:55	7	asprintf (& psz_url ,"attachment://%s" ,p_attachment -> psz_name ) == - 1
call	122:16	123:49	8	asprintf
arg	122:26	122:34	9	&psz_url
op	122:26	0:0	10	&
water	122:27	0:0	10	psz_url
arg	122:36	122:53	9	"attachment://%s"
water	122:36	0:0	10	"attachment://%s"
arg	123:26	123:49	9	p_attachment->psz_name
water	123:26	0:0	10	p_attachment
op	123:38	0:0	10	->
water	123:40	0:0	10	psz_name
op	123:51	0:0	8	==
op	123:54	0:0	8	-
water	123:55	0:0	8	1
stmts	124:16	124:24	7	
continue	124:16	124:24	8	
call	125:12	125:48	6	vlc_meta_SetArtURL
arg	125:32	125:38	7	p_meta
water	125:32	0:0	8	p_meta
arg	125:40	125:48	7	psz_url
water	125:40	0:0	8	psz_url
water	125:49	0:0	6	;
call	126:12	126:26	6	free
arg	126:18	126:26	7	psz_url
water	126:18	0:0	8	psz_url
water	126:27	0:0	6	;
water	127:8	0:0	6	}
water	128:4	0:0	4	}
