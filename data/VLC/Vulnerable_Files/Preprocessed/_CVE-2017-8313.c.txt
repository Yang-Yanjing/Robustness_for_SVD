func	1:0	216:0	0	static int	ParseJSS
params	1:19	0:0	1	
param	1:21	1:37	2	demux_t *	p_demux
param	1:39	1:61	2	subtitle_t *	p_subtitle
param	1:63	1:73	2	int	i_idx
stmnts	3:4	215:22	1	
call	3:4	3:22	2	VLC_UNUSED
arg	3:16	3:22	3	i_idx
water	3:16	0:0	4	i_idx
water	3:23	0:0	2	;
decl	4:4	4:40	2	demux_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	p_demux
op	4:33	0:0	2	->
water	4:35	0:0	2	p_sys
decl	5:4	5:35	2	text_t	*txt
op	5:22	0:0	2	=
op	5:24	0:0	2	&
water	5:25	0:0	2	p_sys
op	5:30	0:0	2	->
water	5:32	0:0	2	txt
decl	6:4	6:37	2	char	*psz_text
water	6:26	0:0	2	,
decl	6:4	6:37	2	char	*psz_orig
decl	7:4	7:39	2	char	*psz_text2
water	7:27	0:0	2	,
decl	7:4	7:39	2	char	*psz_orig2
decl	8:4	8:38	2	int	h1
water	8:10	0:0	2	,
decl	8:4	8:38	2	int	h2
water	8:14	0:0	2	,
decl	8:4	8:38	2	int	m1
water	8:18	0:0	2	,
decl	8:4	8:38	2	int	m2
water	8:22	0:0	2	,
decl	8:4	8:38	2	int	s1
water	8:26	0:0	2	,
decl	8:4	8:38	2	int	s2
water	8:30	0:0	2	,
decl	8:4	8:38	2	int	f1
water	8:34	0:0	2	,
decl	8:4	8:38	2	int	f2
if	9:4	15:4	2	(! p_sys -> jss . b_inited)
cond	9:8	9:20	3	! p_sys -> jss . b_inited
op	9:8	0:0	4	!
water	9:9	0:0	4	p_sys
op	9:14	0:0	4	->
water	9:16	0:0	4	jss
op	9:19	0:0	4	.
water	9:20	0:0	4	b_inited
stmts	10:4	15:4	3	
water	10:4	0:0	4	{
water	11:8	0:0	4	p_sys
op	11:13	0:0	4	->
water	11:15	0:0	4	jss
op	11:18	0:0	4	.
water	11:19	0:0	4	i_comment
op	11:29	0:0	4	=
water	11:31	0:0	4	0
water	11:32	0:0	4	;
water	12:8	0:0	4	p_sys
op	12:13	0:0	4	->
water	12:15	0:0	4	jss
op	12:18	0:0	4	.
water	12:19	0:0	4	i_time_resolution
op	12:37	0:0	4	=
water	12:39	0:0	4	30
water	12:41	0:0	4	;
water	13:8	0:0	4	p_sys
op	13:13	0:0	4	->
water	13:15	0:0	4	jss
op	13:18	0:0	4	.
water	13:19	0:0	4	i_time_shift
op	13:32	0:0	4	=
water	13:34	0:0	4	0
water	13:35	0:0	4	;
water	14:8	0:0	4	p_sys
op	14:13	0:0	4	->
water	14:15	0:0	4	jss
op	14:18	0:0	4	.
water	14:19	0:0	4	b_inited
op	14:28	0:0	4	=
water	14:30	0:0	4	true
water	14:34	0:0	4	;
water	15:4	0:0	4	}
for	17:4	105:4	2	(;;)
forinit	17:9	17:9	3	;
water	17:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	18:4	105:4	3	
water	18:4	0:0	4	{
decl	19:8	19:42	4	const char	*s
op	19:22	0:0	4	=
call	19:24	19:41	5	TextGetLine
arg	19:37	19:41	6	txt
water	19:37	0:0	7	txt
if	20:8	21:31	4	(! s)
cond	20:12	20:13	5	! s
op	20:12	0:0	6	!
water	20:13	0:0	6	s
stmts	21:12	21:31	5	
return	21:12	21:31	6	VLC_EGENERIC
water	21:19	0:0	7	VLC_EGENERIC
water	22:8	0:0	4	psz_orig
op	22:17	0:0	4	=
call	22:19	22:43	4	malloc
arg	22:27	22:43	5	strlen(s)+1
call	22:27	22:37	6	strlen
arg	22:35	22:37	7	s
water	22:35	0:0	8	s
op	22:39	0:0	6	+
water	22:41	0:0	6	1
water	22:44	0:0	4	;
if	23:8	24:29	4	(! psz_orig)
cond	23:12	23:13	5	! psz_orig
op	23:12	0:0	6	!
water	23:13	0:0	6	psz_orig
stmts	24:12	24:29	5	
return	24:12	24:29	6	VLC_ENOMEM
water	24:19	0:0	7	VLC_ENOMEM
water	25:8	0:0	4	psz_text
op	25:17	0:0	4	=
water	25:19	0:0	4	psz_orig
water	25:27	0:0	4	;
if	27:8	37:8	4	(sscanf (s ,"%d:%d:%d.%d %d:%d:%d.%d %[^\n\r]" ,& h1 ,& m1 ,& s1 ,& f1 ,& h2 ,& m2 ,& s2 ,& f2 ,psz_text ) == 9)
cond	27:12	28:74	5	sscanf (s ,"%d:%d:%d.%d %d:%d:%d.%d %[^\n\r]" ,& h1 ,& m1 ,& s1 ,& f1 ,& h2 ,& m2 ,& s2 ,& f2 ,psz_text ) == 9
call	27:12	28:69	6	sscanf
arg	27:20	27:21	7	s
water	27:20	0:0	8	s
arg	27:23	27:57	7	"%d:%d:%d.%d %d:%d:%d.%d %[^\n\r]"
water	27:23	0:0	8	"%d:%d:%d.%d %d:%d:%d.%d %[^\n\r]"
arg	28:20	28:23	7	&h1
op	28:20	0:0	8	&
water	28:21	0:0	8	h1
arg	28:25	28:28	7	&m1
op	28:25	0:0	8	&
water	28:26	0:0	8	m1
arg	28:30	28:33	7	&s1
op	28:30	0:0	8	&
water	28:31	0:0	8	s1
arg	28:35	28:38	7	&f1
op	28:35	0:0	8	&
water	28:36	0:0	8	f1
arg	28:40	28:43	7	&h2
op	28:40	0:0	8	&
water	28:41	0:0	8	h2
arg	28:45	28:48	7	&m2
op	28:45	0:0	8	&
water	28:46	0:0	8	m2
arg	28:50	28:53	7	&s2
op	28:50	0:0	8	&
water	28:51	0:0	8	s2
arg	28:55	28:58	7	&f2
op	28:55	0:0	8	&
water	28:56	0:0	8	f2
arg	28:60	28:69	7	psz_text
water	28:60	0:0	8	psz_text
op	28:71	0:0	6	==
water	28:74	0:0	6	9
stmts	29:8	37:8	5	
water	29:8	0:0	6	{
water	30:12	0:0	6	p_subtitle
op	30:22	0:0	6	->
water	30:24	0:0	6	i_start
op	30:32	0:0	6	=
water	30:34	0:0	6	(
call	30:36	30:71	6	(int64_t)
arg	30:47	30:71	7	h1*3600+m1*60+s1
water	30:47	0:0	8	h1
op	30:50	0:0	8	*
water	30:51	0:0	8	3600
op	30:56	0:0	8	+
water	30:58	0:0	8	m1
op	30:61	0:0	8	*
water	30:63	0:0	8	60
op	30:66	0:0	8	+
water	30:68	0:0	8	s1
op	30:73	0:0	6	+
call	31:16	31:93	6	(int64_t)
arg	31:27	31:93	7	(f1+p_sys->jss.i_time_shift)/p_sys->jss.i_time_resolution
water	31:27	0:0	8	(
water	31:29	0:0	8	f1
op	31:32	0:0	8	+
water	31:35	0:0	8	p_sys
op	31:40	0:0	8	->
water	31:42	0:0	8	jss
op	31:45	0:0	8	.
water	31:46	0:0	8	i_time_shift
water	31:59	0:0	8	)
op	31:61	0:0	8	/
water	31:64	0:0	8	p_sys
op	31:69	0:0	8	->
water	31:71	0:0	8	jss
op	31:74	0:0	8	.
water	31:75	0:0	8	i_time_resolution
water	31:95	0:0	6	)
op	32:16	0:0	6	*
water	32:18	0:0	6	1000000
water	32:25	0:0	6	;
water	33:12	0:0	6	p_subtitle
op	33:22	0:0	6	->
water	33:24	0:0	6	i_stop
op	33:31	0:0	6	=
water	33:33	0:0	6	(
call	33:35	33:70	6	(int64_t)
arg	33:46	33:70	7	h2*3600+m2*60+s2
water	33:46	0:0	8	h2
op	33:49	0:0	8	*
water	33:50	0:0	8	3600
op	33:55	0:0	8	+
water	33:57	0:0	8	m2
op	33:60	0:0	8	*
water	33:62	0:0	8	60
op	33:65	0:0	8	+
water	33:67	0:0	8	s2
op	33:72	0:0	6	+
call	34:16	34:93	6	(int64_t)
arg	34:27	34:93	7	(f2+p_sys->jss.i_time_shift)/p_sys->jss.i_time_resolution
water	34:27	0:0	8	(
water	34:29	0:0	8	f2
op	34:32	0:0	8	+
water	34:35	0:0	8	p_sys
op	34:40	0:0	8	->
water	34:42	0:0	8	jss
op	34:45	0:0	8	.
water	34:46	0:0	8	i_time_shift
water	34:59	0:0	8	)
op	34:61	0:0	8	/
water	34:64	0:0	8	p_sys
op	34:69	0:0	8	->
water	34:71	0:0	8	jss
op	34:74	0:0	8	.
water	34:75	0:0	8	i_time_resolution
water	34:95	0:0	6	)
op	35:16	0:0	6	*
water	35:18	0:0	6	1000000
water	35:25	0:0	6	;
break	36:12	36:17	6	
water	37:8	0:0	6	}
else	39:8	46:8	4
stmts	39:13	46:8	5	
if	39:13	46:8	6	(sscanf (s ,"@%d @%d %[^\n\r]" ,& f1 ,& f2 ,psz_text ) == 3)
cond	39:17	39:72	7	sscanf (s ,"@%d @%d %[^\n\r]" ,& f1 ,& f2 ,psz_text ) == 3
call	39:17	39:67	8	sscanf
arg	39:25	39:26	9	s
water	39:25	0:0	10	s
arg	39:28	39:46	9	"@%d @%d %[^\n\r]"
water	39:28	0:0	10	"@%d @%d %[^\n\r]"
arg	39:48	39:51	9	&f1
op	39:48	0:0	10	&
water	39:49	0:0	10	f1
arg	39:53	39:56	9	&f2
op	39:53	0:0	10	&
water	39:54	0:0	10	f2
arg	39:58	39:67	9	psz_text
water	39:58	0:0	10	psz_text
op	39:69	0:0	8	==
water	39:72	0:0	8	3
stmts	40:8	46:8	7	
water	40:8	0:0	8	{
water	41:12	0:0	8	p_subtitle
op	41:22	0:0	8	->
water	41:24	0:0	8	i_start
op	41:32	0:0	8	=
call	41:34	42:96	8	(int64_t)
arg	42:20	42:96	9	(f1+p_sys->jss.i_time_shift)/p_sys->jss.i_time_resolution*1000000.0
water	42:20	0:0	10	(
water	42:22	0:0	10	f1
op	42:25	0:0	10	+
water	42:27	0:0	10	p_sys
op	42:32	0:0	10	->
water	42:34	0:0	10	jss
op	42:37	0:0	10	.
water	42:38	0:0	10	i_time_shift
water	42:51	0:0	10	)
op	42:53	0:0	10	/
water	42:55	0:0	10	p_sys
op	42:60	0:0	10	->
water	42:62	0:0	10	jss
op	42:65	0:0	10	.
water	42:66	0:0	10	i_time_resolution
op	42:84	0:0	10	*
water	42:86	0:0	10	1000000
op	42:93	0:0	10	.
water	42:94	0:0	10	0
water	42:97	0:0	8	;
water	43:12	0:0	8	p_subtitle
op	43:22	0:0	8	->
water	43:24	0:0	8	i_stop
op	43:31	0:0	8	=
call	43:33	44:96	8	(int64_t)
arg	44:20	44:96	9	(f2+p_sys->jss.i_time_shift)/p_sys->jss.i_time_resolution*1000000.0
water	44:20	0:0	10	(
water	44:22	0:0	10	f2
op	44:25	0:0	10	+
water	44:27	0:0	10	p_sys
op	44:32	0:0	10	->
water	44:34	0:0	10	jss
op	44:37	0:0	10	.
water	44:38	0:0	10	i_time_shift
water	44:51	0:0	10	)
op	44:53	0:0	10	/
water	44:55	0:0	10	p_sys
op	44:60	0:0	10	->
water	44:62	0:0	10	jss
op	44:65	0:0	10	.
water	44:66	0:0	10	i_time_resolution
op	44:84	0:0	10	*
water	44:86	0:0	10	1000000
op	44:93	0:0	10	.
water	44:94	0:0	10	0
water	44:97	0:0	8	;
break	45:12	45:17	8	
water	46:8	0:0	8	}
else	49:8	98:8	4
stmts	49:13	98:8	5	
if	49:13	98:8	6	(s [ 0 ] == '#')
cond	49:17	49:25	7	s [ 0 ] == '#'
water	49:17	0:0	8	s
op	49:18	0:0	8	[
water	49:19	0:0	8	0
op	49:20	0:0	8	]
op	49:22	0:0	8	==
water	49:25	0:0	8	'#'
stmts	50:8	98:8	7	
water	50:8	0:0	8	{
decl	51:12	51:43	8	int	h
op	51:18	0:0	8	=
water	51:20	0:0	8	0
water	51:21	0:0	8	,
decl	51:12	51:43	8	int	m
op	51:25	0:0	8	=
water	51:26	0:0	8	0
water	51:27	0:0	8	,
decl	51:12	51:43	8	int	sec
op	51:33	0:0	8	=
water	51:35	0:0	8	1
water	51:36	0:0	8	,
decl	51:12	51:43	8	int	f
op	51:40	0:0	8	=
water	51:42	0:0	8	1
water	52:12	0:0	8	unsigned
water	52:21	0:0	8	shift
op	52:27	0:0	8	=
water	52:29	0:0	8	1
water	52:30	0:0	8	;
decl	53:12	53:23	8	int	inv
op	53:20	0:0	8	=
water	53:22	0:0	8	1
call	54:12	54:32	8	strcpy
arg	54:20	54:28	9	psz_text
water	54:20	0:0	10	psz_text
arg	54:30	54:32	9	s
water	54:30	0:0	10	s
water	54:33	0:0	8	;
switch	55:12	95:12	8	(toupper (( unsigned char ) psz_text [ 1 ] ))
cond	55:20	55:56	9	toupper (( unsigned char ) psz_text [ 1 ] )
call	55:20	55:56	10	toupper
arg	55:29	55:56	11	(unsignedchar)psz_text[1]
water	55:29	0:0	12	(
water	55:30	0:0	12	unsigned
water	55:39	0:0	12	char
water	55:43	0:0	12	)
water	55:44	0:0	12	psz_text
op	55:52	0:0	12	[
water	55:53	0:0	12	1
op	55:54	0:0	12	]
stmts	56:12	95:12	9	
water	56:12	0:0	10	{
water	57:12	0:0	10	case
water	57:17	0:0	10	'S'
water	57:20	0:0	10	:
water	58:17	0:0	10	shift
op	58:23	0:0	10	=
call	58:25	58:61	10	isalpha
arg	58:34	58:61	11	(unsignedchar)psz_text[2]
water	58:34	0:0	12	(
water	58:35	0:0	12	unsigned
water	58:44	0:0	12	char
water	58:48	0:0	12	)
water	58:49	0:0	12	psz_text
op	58:57	0:0	12	[
water	58:58	0:0	12	2
op	58:59	0:0	12	]
water	58:63	0:0	10	?
water	58:65	0:0	10	6
water	58:67	0:0	10	:
water	58:69	0:0	10	2
water	58:71	0:0	10	;
if	59:17	89:17	10	(sscanf (& psz_text [ shift ] ,"%d" ,& h ))
cond	59:21	59:56	11	sscanf (& psz_text [ shift ] ,"%d" ,& h )
call	59:21	59:56	12	sscanf
arg	59:29	59:45	13	&psz_text[shift]
op	59:29	0:0	14	&
water	59:30	0:0	14	psz_text
op	59:38	0:0	14	[
water	59:39	0:0	14	shift
op	59:44	0:0	14	]
arg	59:47	59:51	13	"%d"
water	59:47	0:0	14	"%d"
arg	59:53	59:56	13	&h
op	59:53	0:0	14	&
water	59:54	0:0	14	h
stmts	60:17	89:17	11	
water	60:17	0:0	12	{
if	62:21	66:21	12	(h < 0)
cond	62:25	62:29	13	h < 0
water	62:25	0:0	14	h
op	62:27	0:0	14	<
water	62:29	0:0	14	0
stmts	63:21	66:21	13	
water	63:21	0:0	14	{
water	64:25	0:0	14	h
op	64:27	0:0	14	*=
op	64:30	0:0	14	-
water	64:31	0:0	14	1
water	64:32	0:0	14	;
water	65:25	0:0	14	inv
op	65:29	0:0	14	=
op	65:31	0:0	14	-
water	65:32	0:0	14	1
water	65:33	0:0	14	;
water	66:21	0:0	14	}
if	67:21	80:21	12	(sscanf (& psz_text [ shift ] ,"%*d:%d" ,& m ))
cond	67:25	67:64	13	sscanf (& psz_text [ shift ] ,"%*d:%d" ,& m )
call	67:25	67:64	14	sscanf
arg	67:33	67:49	15	&psz_text[shift]
op	67:33	0:0	16	&
water	67:34	0:0	16	psz_text
op	67:42	0:0	16	[
water	67:43	0:0	16	shift
op	67:48	0:0	16	]
arg	67:51	67:59	15	"%*d:%d"
water	67:51	0:0	16	"%*d:%d"
arg	67:61	67:64	15	&m
op	67:61	0:0	16	&
water	67:62	0:0	16	m
stmts	68:21	80:21	13	
water	68:21	0:0	14	{
if	69:25	72:25	14	(sscanf (& psz_text [ shift ] ,"%*d:%*d:%d" ,& sec ))
cond	69:29	69:74	15	sscanf (& psz_text [ shift ] ,"%*d:%*d:%d" ,& sec )
call	69:29	69:74	16	sscanf
arg	69:37	69:53	17	&psz_text[shift]
op	69:37	0:0	18	&
water	69:38	0:0	18	psz_text
op	69:46	0:0	18	[
water	69:47	0:0	18	shift
op	69:52	0:0	18	]
arg	69:55	69:67	17	"%*d:%*d:%d"
water	69:55	0:0	18	"%*d:%*d:%d"
arg	69:69	69:74	17	&sec
op	69:69	0:0	18	&
water	69:70	0:0	18	sec
stmts	70:25	72:25	15	
water	70:25	0:0	16	{
call	71:29	71:76	16	sscanf
arg	71:37	71:53	17	&psz_text[shift]
op	71:37	0:0	18	&
water	71:38	0:0	18	psz_text
op	71:46	0:0	18	[
water	71:47	0:0	18	shift
op	71:52	0:0	18	]
arg	71:55	71:71	17	"%*d:%*d:%*d.%d"
water	71:55	0:0	18	"%*d:%*d:%*d.%d"
arg	71:73	71:76	17	&f
op	71:73	0:0	18	&
water	71:74	0:0	18	f
water	71:77	0:0	16	;
water	72:25	0:0	16	}
else	73:25	79:25	14
stmts	74:25	79:25	15	
water	74:25	0:0	16	{
water	75:29	0:0	16	h
op	75:31	0:0	16	=
water	75:33	0:0	16	0
water	75:34	0:0	16	;
call	76:29	77:50	16	sscanf
arg	76:37	76:53	17	&psz_text[shift]
op	76:37	0:0	18	&
water	76:38	0:0	18	psz_text
op	76:46	0:0	18	[
water	76:47	0:0	18	shift
op	76:52	0:0	18	]
arg	76:55	76:65	17	"%d:%d.%d"
water	76:55	0:0	18	"%d:%d.%d"
arg	77:37	77:39	17	&m
op	77:37	0:0	18	&
water	77:38	0:0	18	m
arg	77:41	77:45	17	&sec
op	77:41	0:0	18	&
water	77:42	0:0	18	sec
arg	77:47	77:50	17	&f
op	77:47	0:0	18	&
water	77:48	0:0	18	f
water	77:51	0:0	16	;
water	78:29	0:0	16	m
op	78:31	0:0	16	*=
water	78:34	0:0	16	inv
water	78:37	0:0	16	;
water	79:25	0:0	16	}
water	80:21	0:0	14	}
else	81:21	86:21	12
stmts	82:21	86:21	13	
water	82:21	0:0	14	{
water	83:25	0:0	14	h
op	83:27	0:0	14	=
water	83:29	0:0	14	m
op	83:31	0:0	14	=
water	83:33	0:0	14	0
water	83:34	0:0	14	;
call	84:25	84:68	14	sscanf
arg	84:33	84:49	15	&psz_text[shift]
op	84:33	0:0	16	&
water	84:34	0:0	16	psz_text
op	84:42	0:0	16	[
water	84:43	0:0	16	shift
op	84:48	0:0	16	]
arg	84:51	84:58	15	"%d.%d"
water	84:51	0:0	16	"%d.%d"
arg	84:60	84:64	15	&sec
op	84:60	0:0	16	&
water	84:61	0:0	16	sec
arg	84:66	84:68	15	&f
op	84:66	0:0	16	&
water	84:67	0:0	16	f
water	84:69	0:0	14	;
water	85:25	0:0	14	sec
op	85:29	0:0	14	*=
water	85:32	0:0	14	inv
water	85:35	0:0	14	;
water	86:21	0:0	14	}
water	87:21	0:0	12	p_sys
op	87:26	0:0	12	->
water	87:28	0:0	12	jss
op	87:31	0:0	12	.
water	87:32	0:0	12	i_time_shift
op	87:45	0:0	12	=
water	87:47	0:0	12	(
water	87:49	0:0	12	(
water	87:51	0:0	12	h
op	87:53	0:0	12	*
water	87:55	0:0	12	3600
op	87:60	0:0	12	+
water	87:62	0:0	12	m
op	87:64	0:0	12	*
water	87:66	0:0	12	60
op	87:69	0:0	12	+
water	87:71	0:0	12	sec
water	87:75	0:0	12	)
op	88:25	0:0	12	*
water	88:27	0:0	12	p_sys
op	88:32	0:0	12	->
water	88:34	0:0	12	jss
op	88:37	0:0	12	.
water	88:38	0:0	12	i_time_resolution
op	88:56	0:0	12	+
water	88:58	0:0	12	f
water	88:60	0:0	12	)
op	88:62	0:0	12	*
water	88:64	0:0	12	inv
water	88:67	0:0	12	;
water	89:17	0:0	12	}
break	90:17	90:22	10	
water	91:12	0:0	10	case
water	91:17	0:0	10	'T'
water	91:20	0:0	10	:
water	92:16	0:0	10	shift
op	92:22	0:0	10	=
call	92:24	92:60	10	isalpha
arg	92:33	92:60	11	(unsignedchar)psz_text[2]
water	92:33	0:0	12	(
water	92:34	0:0	12	unsigned
water	92:43	0:0	12	char
water	92:47	0:0	12	)
water	92:48	0:0	12	psz_text
op	92:56	0:0	12	[
water	92:57	0:0	12	2
op	92:58	0:0	12	]
water	92:62	0:0	10	?
water	92:64	0:0	10	8
water	92:66	0:0	10	:
water	92:68	0:0	10	2
water	92:70	0:0	10	;
call	93:16	93:78	10	sscanf
arg	93:24	93:40	11	&psz_text[shift]
op	93:24	0:0	12	&
water	93:25	0:0	12	psz_text
op	93:33	0:0	12	[
water	93:34	0:0	12	shift
op	93:39	0:0	12	]
arg	93:42	93:46	11	"%d"
water	93:42	0:0	12	"%d"
arg	93:48	93:78	11	&p_sys->jss.i_time_resolution
op	93:48	0:0	12	&
water	93:49	0:0	12	p_sys
op	93:54	0:0	12	->
water	93:56	0:0	12	jss
op	93:59	0:0	12	.
water	93:60	0:0	12	i_time_resolution
water	93:79	0:0	10	;
break	94:16	94:21	10	
water	95:12	0:0	10	}
call	96:12	96:27	8	free
arg	96:18	96:27	9	psz_orig
water	96:18	0:0	10	psz_orig
water	96:28	0:0	8	;
continue	97:12	97:20	8	
water	98:8	0:0	8	}
else	99:8	104:8	4
stmts	101:8	104:8	5	
water	101:8	0:0	6	{
call	102:12	102:27	6	free
arg	102:18	102:27	7	psz_orig
water	102:18	0:0	8	psz_orig
water	102:28	0:0	6	;
continue	103:12	103:20	6	
water	104:8	0:0	6	}
water	105:4	0:0	4	}
while	106:4	123:4	2	(psz_text [strlen (psz_text ) - 1 ] == '\\')
cond	106:11	106:49	3	psz_text [strlen (psz_text ) - 1 ] == '\\'
water	106:11	0:0	4	psz_text
op	106:19	0:0	4	[
call	106:21	106:38	4	strlen
arg	106:29	106:38	5	psz_text
water	106:29	0:0	6	psz_text
op	106:40	0:0	4	-
water	106:42	0:0	4	1
op	106:44	0:0	4	]
op	106:46	0:0	4	==
water	106:49	0:0	4	'\\'
stmts	107:4	123:4	3	
water	107:4	0:0	4	{
decl	108:8	108:43	4	const char	*s2
op	108:23	0:0	4	=
call	108:25	108:42	5	TextGetLine
arg	108:38	108:42	6	txt
water	108:38	0:0	7	txt
if	109:8	113:8	4	(! s2)
cond	109:12	109:13	5	! s2
op	109:12	0:0	6	!
water	109:13	0:0	6	s2
stmts	110:8	113:8	5	
water	110:8	0:0	6	{
call	111:12	111:27	6	free
arg	111:18	111:27	7	psz_orig
water	111:18	0:0	8	psz_orig
water	111:28	0:0	6	;
return	112:12	112:31	6	VLC_EGENERIC
water	112:19	0:0	7	VLC_EGENERIC
water	113:8	0:0	6	}
decl	114:8	114:32	4	int	i_len
op	114:18	0:0	4	=
call	114:20	114:31	5	strlen
arg	114:28	114:31	6	s2
water	114:28	0:0	7	s2
if	115:8	116:17	4	(i_len == 0)
cond	115:12	115:21	5	i_len == 0
water	115:12	0:0	6	i_len
op	115:18	0:0	6	==
water	115:21	0:0	6	0
stmts	116:12	116:17	5	
break	116:12	116:17	6	
decl	117:8	117:38	4	int	i_old
op	117:18	0:0	4	=
call	117:20	117:37	5	strlen
arg	117:28	117:37	6	psz_text
water	117:28	0:0	7	psz_text
water	118:8	0:0	4	psz_text
op	118:17	0:0	4	=
call	118:19	118:64	4	realloc_or_free
arg	118:36	118:44	5	psz_text
water	118:36	0:0	6	psz_text
arg	118:46	118:64	5	i_old+i_len+1
water	118:46	0:0	6	i_old
op	118:52	0:0	6	+
water	118:54	0:0	6	i_len
op	118:60	0:0	6	+
water	118:62	0:0	6	1
water	118:65	0:0	4	;
if	119:8	120:30	4	(! psz_text)
cond	119:12	119:13	5	! psz_text
op	119:12	0:0	6	!
water	119:13	0:0	6	psz_text
stmts	120:13	120:30	5	
return	120:13	120:30	6	VLC_ENOMEM
water	120:20	0:0	7	VLC_ENOMEM
water	121:8	0:0	4	psz_orig
op	121:17	0:0	4	=
water	121:19	0:0	4	psz_text
water	121:27	0:0	4	;
call	122:8	122:29	4	strcat
arg	122:16	122:24	5	psz_text
water	122:16	0:0	6	psz_text
arg	122:26	122:29	5	s2
water	122:26	0:0	6	s2
water	122:30	0:0	4	;
water	123:4	0:0	4	}
while	125:4	125:61	2	(* psz_text == ' ' || * psz_text == '\t')
cond	125:11	125:44	3	* psz_text == ' ' || * psz_text == '\t'
op	125:11	0:0	4	*
water	125:12	0:0	4	psz_text
op	125:21	0:0	4	==
water	125:24	0:0	4	' '
op	125:28	0:0	4	||
op	125:31	0:0	4	*
water	125:32	0:0	4	psz_text
op	125:41	0:0	4	==
water	125:44	0:0	4	'\t'
stmts	125:51	125:61	3	
water	125:51	0:0	4	psz_text
op	125:59	0:0	4	++
water	125:61	0:0	4	;
if	127:4	135:4	2	(isalpha (( unsigned char ) * psz_text ) || * psz_text == '[')
cond	127:8	127:60	3	isalpha (( unsigned char ) * psz_text ) || * psz_text == '['
call	127:8	127:42	4	isalpha
arg	127:17	127:42	5	(unsignedchar)*psz_text
water	127:17	0:0	6	(
water	127:18	0:0	6	unsigned
water	127:27	0:0	6	char
water	127:31	0:0	6	)
op	127:32	0:0	6	*
water	127:33	0:0	6	psz_text
op	127:44	0:0	4	||
op	127:47	0:0	4	*
water	127:48	0:0	4	psz_text
op	127:57	0:0	4	==
water	127:60	0:0	4	'['
stmts	128:4	135:4	3	
water	128:4	0:0	4	{
while	129:8	130:22	4	(* psz_text != ' ')
cond	129:15	129:28	5	* psz_text != ' '
op	129:15	0:0	6	*
water	129:16	0:0	6	psz_text
op	129:25	0:0	6	!=
water	129:28	0:0	6	' '
stmts	130:8	130:22	5	
water	130:8	0:0	6	{
water	130:10	0:0	6	psz_text
op	130:18	0:0	6	++
water	130:21	0:0	6	;
water	130:22	0:0	6	}
water	130:23	0:0	4	;
water	135:4	0:0	4	}
while	137:4	137:61	2	(* psz_text == ' ' || * psz_text == '\t')
cond	137:11	137:44	3	* psz_text == ' ' || * psz_text == '\t'
op	137:11	0:0	4	*
water	137:12	0:0	4	psz_text
op	137:21	0:0	4	==
water	137:24	0:0	4	' '
op	137:28	0:0	4	||
op	137:31	0:0	4	*
water	137:32	0:0	4	psz_text
op	137:41	0:0	4	==
water	137:44	0:0	4	'\t'
stmts	137:51	137:61	3	
water	137:51	0:0	4	psz_text
op	137:59	0:0	4	++
water	137:61	0:0	4	;
water	139:4	0:0	2	psz_orig2
op	139:14	0:0	2	=
call	139:16	139:49	2	calloc
arg	139:24	139:45	3	strlen(psz_text)+1
call	139:24	139:40	4	strlen
arg	139:32	139:40	5	psz_text
water	139:32	0:0	6	psz_text
op	139:42	0:0	4	+
water	139:44	0:0	4	1
arg	139:47	139:49	3	1
water	139:47	0:0	4	1
water	139:50	0:0	2	;
water	140:4	0:0	2	psz_text2
op	140:14	0:0	2	=
water	140:16	0:0	2	psz_orig2
water	140:25	0:0	2	;
for	141:4	211:4	2	(;* psz_text != '\0' && * psz_text != '\n' && * psz_text != '\r';)
forinit	141:9	141:9	3	;
water	141:9	0:0	4	;
cond	141:11	141:66	3	* psz_text != '\0' && * psz_text != '\n' && * psz_text != '\r'
op	141:11	0:0	4	*
water	141:12	0:0	4	psz_text
op	141:21	0:0	4	!=
water	141:24	0:0	4	'\0'
op	141:29	0:0	4	&&
op	141:32	0:0	4	*
water	141:33	0:0	4	psz_text
op	141:42	0:0	4	!=
water	141:45	0:0	4	'\n'
op	141:50	0:0	4	&&
op	141:53	0:0	4	*
water	141:54	0:0	4	psz_text
op	141:63	0:0	4	!=
water	141:66	0:0	4	'\r'
forexpr	0:0	0:0	3	
stmts	142:4	211:4	3	
water	142:4	0:0	4	{
switch	143:8	209:8	4	(* psz_text)
cond	143:16	143:17	5	* psz_text
op	143:16	0:0	6	*
water	143:17	0:0	6	psz_text
stmts	144:8	209:8	5	
water	144:8	0:0	6	{
water	145:8	0:0	6	case
water	145:13	0:0	6	'{'
water	145:16	0:0	6	:
water	146:12	0:0	6	p_sys
op	146:17	0:0	6	->
water	146:19	0:0	6	jss
op	146:22	0:0	6	.
water	146:23	0:0	6	i_comment
op	146:32	0:0	6	++
water	146:34	0:0	6	;
break	147:12	147:17	6	
water	148:8	0:0	6	case
water	148:13	0:0	6	'}'
water	148:16	0:0	6	:
water	149:12	0:0	6	if
water	149:14	0:0	6	(
water	149:16	0:0	6	p_sys
op	149:21	0:0	6	->
water	149:23	0:0	6	jss
op	149:26	0:0	6	.
water	149:27	0:0	6	i_comment
water	149:37	0:0	6	)
water	150:12	0:0	6	{
water	151:16	0:0	6	p_sys
op	151:21	0:0	6	->
water	151:23	0:0	6	jss
op	151:26	0:0	6	.
water	151:27	0:0	6	i_comment
op	151:37	0:0	6	=
water	151:39	0:0	6	0
water	151:40	0:0	6	;
water	152:16	0:0	6	if
water	152:18	0:0	6	(
water	152:20	0:0	6	(
op	152:21	0:0	6	*
water	152:22	0:0	6	(
water	152:23	0:0	6	psz_text
op	152:32	0:0	6	+
water	152:34	0:0	6	1
water	152:36	0:0	6	)
water	152:38	0:0	6	)
op	152:40	0:0	6	==
water	152:43	0:0	6	' '
water	152:47	0:0	6	)
water	152:49	0:0	6	psz_text
op	152:57	0:0	6	++
water	152:59	0:0	6	;
water	153:12	0:0	6	}
water	154:12	0:0	6	break
water	154:17	0:0	6	;
water	155:8	0:0	6	case
water	155:13	0:0	6	'~'
water	155:16	0:0	6	:
water	156:12	0:0	6	if
water	156:14	0:0	6	(
op	156:16	0:0	6	!
water	156:17	0:0	6	p_sys
op	156:22	0:0	6	->
water	156:24	0:0	6	jss
op	156:27	0:0	6	.
water	156:28	0:0	6	i_comment
water	156:38	0:0	6	)
water	157:12	0:0	6	{
op	158:16	0:0	6	*
water	158:17	0:0	6	psz_text2
op	158:27	0:0	6	=
water	158:29	0:0	6	' '
water	158:32	0:0	6	;
water	159:16	0:0	6	psz_text2
op	159:25	0:0	6	++
water	159:27	0:0	6	;
water	160:12	0:0	6	}
water	161:12	0:0	6	break
water	161:17	0:0	6	;
water	162:8	0:0	6	case
water	162:13	0:0	6	' '
water	162:16	0:0	6	:
water	163:8	0:0	6	case
water	163:13	0:0	6	'\t'
water	163:17	0:0	6	:
water	164:12	0:0	6	if
water	164:14	0:0	6	(
water	164:16	0:0	6	(
op	164:17	0:0	6	*
water	164:18	0:0	6	(
water	164:19	0:0	6	psz_text
op	164:28	0:0	6	+
water	164:30	0:0	6	1
water	164:32	0:0	6	)
water	164:34	0:0	6	)
op	164:36	0:0	6	==
water	164:39	0:0	6	' '
op	164:43	0:0	6	||
water	164:46	0:0	6	(
op	164:47	0:0	6	*
water	164:48	0:0	6	(
water	164:49	0:0	6	psz_text
op	164:58	0:0	6	+
water	164:60	0:0	6	1
water	164:62	0:0	6	)
water	164:64	0:0	6	)
op	164:66	0:0	6	==
water	164:69	0:0	6	'\t'
water	164:74	0:0	6	)
water	165:16	0:0	6	break
water	165:21	0:0	6	;
if	166:12	170:12	6	(! p_sys -> jss . i_comment)
cond	166:16	166:28	7	! p_sys -> jss . i_comment
op	166:16	0:0	8	!
water	166:17	0:0	8	p_sys
op	166:22	0:0	8	->
water	166:24	0:0	8	jss
op	166:27	0:0	8	.
water	166:28	0:0	8	i_comment
stmts	167:12	170:12	7	
water	167:12	0:0	8	{
op	168:16	0:0	8	*
water	168:17	0:0	8	psz_text2
op	168:27	0:0	8	=
water	168:29	0:0	8	' '
water	168:32	0:0	8	;
water	169:16	0:0	8	psz_text2
op	169:25	0:0	8	++
water	169:27	0:0	8	;
water	170:12	0:0	8	}
break	171:12	171:17	6	
water	172:8	0:0	6	case
water	172:13	0:0	6	'\\'
water	172:17	0:0	6	:
water	173:12	0:0	6	if
water	173:14	0:0	6	(
water	173:16	0:0	6	(
op	173:17	0:0	6	*
water	173:18	0:0	6	(
water	173:19	0:0	6	psz_text
op	173:28	0:0	6	+
water	173:30	0:0	6	1
water	173:32	0:0	6	)
water	173:34	0:0	6	)
op	173:36	0:0	6	==
water	173:39	0:0	6	'n'
water	173:43	0:0	6	)
water	174:12	0:0	6	{
op	175:16	0:0	6	*
water	175:17	0:0	6	psz_text2
op	175:27	0:0	6	=
water	175:29	0:0	6	'\n'
water	175:33	0:0	6	;
water	176:16	0:0	6	psz_text
op	176:24	0:0	6	++
water	176:26	0:0	6	;
water	177:16	0:0	6	psz_text2
op	177:25	0:0	6	++
water	177:27	0:0	6	;
water	178:16	0:0	6	break
water	178:21	0:0	6	;
water	179:12	0:0	6	}
water	180:12	0:0	6	if
water	180:14	0:0	6	(
water	180:16	0:0	6	(
call	180:18	180:58	6	toupper
arg	180:26	180:58	7	(unsignedchar)*(psz_text+1)
water	180:26	0:0	8	(
water	180:27	0:0	8	unsigned
water	180:36	0:0	8	char
water	180:40	0:0	8	)
op	180:41	0:0	8	*
water	180:42	0:0	8	(
water	180:43	0:0	8	psz_text
op	180:52	0:0	8	+
water	180:54	0:0	8	1
water	180:56	0:0	8	)
op	180:60	0:0	6	==
water	180:63	0:0	6	'C'
water	180:67	0:0	6	)
op	180:69	0:0	6	||
water	181:20	0:0	6	(
call	181:22	181:62	6	toupper
arg	181:30	181:62	7	(unsignedchar)*(psz_text+1)
water	181:30	0:0	8	(
water	181:31	0:0	8	unsigned
water	181:40	0:0	8	char
water	181:44	0:0	8	)
op	181:45	0:0	8	*
water	181:46	0:0	8	(
water	181:47	0:0	8	psz_text
op	181:56	0:0	8	+
water	181:58	0:0	8	1
water	181:60	0:0	8	)
op	181:64	0:0	6	==
water	181:67	0:0	6	'F'
water	181:71	0:0	6	)
water	181:73	0:0	6	)
water	182:12	0:0	6	{
water	183:16	0:0	6	psz_text
op	183:24	0:0	6	++
water	183:26	0:0	6	;
water	183:28	0:0	6	psz_text
op	183:36	0:0	6	++
water	183:38	0:0	6	;
water	184:16	0:0	6	break
water	184:21	0:0	6	;
water	185:12	0:0	6	}
water	186:12	0:0	6	if
water	186:14	0:0	6	(
water	186:16	0:0	6	(
op	186:17	0:0	6	*
water	186:18	0:0	6	(
water	186:19	0:0	6	psz_text
op	186:28	0:0	6	+
water	186:30	0:0	6	1
water	186:32	0:0	6	)
water	186:34	0:0	6	)
op	186:36	0:0	6	==
water	186:39	0:0	6	'B'
op	186:43	0:0	6	||
water	186:46	0:0	6	(
op	186:47	0:0	6	*
water	186:48	0:0	6	(
water	186:49	0:0	6	psz_text
op	186:58	0:0	6	+
water	186:60	0:0	6	1
water	186:62	0:0	6	)
water	186:64	0:0	6	)
op	186:66	0:0	6	==
water	186:69	0:0	6	'b'
op	186:73	0:0	6	||
water	187:16	0:0	6	(
op	187:17	0:0	6	*
water	187:18	0:0	6	(
water	187:19	0:0	6	psz_text
op	187:28	0:0	6	+
water	187:30	0:0	6	1
water	187:32	0:0	6	)
water	187:34	0:0	6	)
op	187:36	0:0	6	==
water	187:39	0:0	6	'I'
op	187:43	0:0	6	||
water	187:46	0:0	6	(
op	187:47	0:0	6	*
water	187:48	0:0	6	(
water	187:49	0:0	6	psz_text
op	187:58	0:0	6	+
water	187:60	0:0	6	1
water	187:62	0:0	6	)
water	187:64	0:0	6	)
op	187:66	0:0	6	==
water	187:69	0:0	6	'i'
op	187:73	0:0	6	||
water	188:16	0:0	6	(
op	188:17	0:0	6	*
water	188:18	0:0	6	(
water	188:19	0:0	6	psz_text
op	188:28	0:0	6	+
water	188:30	0:0	6	1
water	188:32	0:0	6	)
water	188:34	0:0	6	)
op	188:36	0:0	6	==
water	188:39	0:0	6	'U'
op	188:43	0:0	6	||
water	188:46	0:0	6	(
op	188:47	0:0	6	*
water	188:48	0:0	6	(
water	188:49	0:0	6	psz_text
op	188:58	0:0	6	+
water	188:60	0:0	6	1
water	188:62	0:0	6	)
water	188:64	0:0	6	)
op	188:66	0:0	6	==
water	188:69	0:0	6	'u'
op	188:73	0:0	6	||
water	189:16	0:0	6	(
op	189:17	0:0	6	*
water	189:18	0:0	6	(
water	189:19	0:0	6	psz_text
op	189:28	0:0	6	+
water	189:30	0:0	6	1
water	189:32	0:0	6	)
water	189:34	0:0	6	)
op	189:36	0:0	6	==
water	189:39	0:0	6	'D'
op	189:43	0:0	6	||
water	189:46	0:0	6	(
op	189:47	0:0	6	*
water	189:48	0:0	6	(
water	189:49	0:0	6	psz_text
op	189:58	0:0	6	+
water	189:60	0:0	6	1
water	189:62	0:0	6	)
water	189:64	0:0	6	)
op	189:66	0:0	6	==
water	189:69	0:0	6	'N'
water	189:73	0:0	6	)
water	190:12	0:0	6	{
water	191:16	0:0	6	psz_text
op	191:24	0:0	6	++
water	191:26	0:0	6	;
water	192:16	0:0	6	break
water	192:21	0:0	6	;
water	193:12	0:0	6	}
water	194:12	0:0	6	if
water	194:14	0:0	6	(
water	194:16	0:0	6	(
op	194:17	0:0	6	*
water	194:18	0:0	6	(
water	194:19	0:0	6	psz_text
op	194:28	0:0	6	+
water	194:30	0:0	6	1
water	194:32	0:0	6	)
water	194:34	0:0	6	)
op	194:36	0:0	6	==
water	194:39	0:0	6	'~'
op	194:43	0:0	6	||
water	194:46	0:0	6	(
op	194:47	0:0	6	*
water	194:48	0:0	6	(
water	194:49	0:0	6	psz_text
op	194:58	0:0	6	+
water	194:60	0:0	6	1
water	194:62	0:0	6	)
water	194:64	0:0	6	)
op	194:66	0:0	6	==
water	194:69	0:0	6	'{'
op	194:73	0:0	6	||
water	195:16	0:0	6	(
op	195:17	0:0	6	*
water	195:18	0:0	6	(
water	195:19	0:0	6	psz_text
op	195:28	0:0	6	+
water	195:30	0:0	6	1
water	195:32	0:0	6	)
water	195:34	0:0	6	)
op	195:36	0:0	6	==
water	195:39	0:0	6	'\\'
water	195:44	0:0	6	)
water	196:16	0:0	6	psz_text
op	196:24	0:0	6	++
water	196:26	0:0	6	;
else	197:12	201:12	6
stmts	197:17	201:12	7	
if	197:17	201:12	8	(* ( psz_text + 1 ) == '\r' || * ( psz_text + 1 ) == '\n' || * ( psz_text + 1 ) == '\0')
cond	197:21	198:41	9	* ( psz_text + 1 ) == '\r' || * ( psz_text + 1 ) == '\n' || * ( psz_text + 1 ) == '\0'
op	197:21	0:0	10	*
water	197:22	0:0	10	(
water	197:23	0:0	10	psz_text
op	197:32	0:0	10	+
water	197:34	0:0	10	1
water	197:36	0:0	10	)
op	197:38	0:0	10	==
water	197:41	0:0	10	'\r'
op	197:46	0:0	10	||
op	197:50	0:0	10	*
water	197:51	0:0	10	(
water	197:52	0:0	10	psz_text
op	197:61	0:0	10	+
water	197:63	0:0	10	1
water	197:65	0:0	10	)
op	197:67	0:0	10	==
water	197:70	0:0	10	'\n'
op	197:75	0:0	10	||
op	198:21	0:0	10	*
water	198:22	0:0	10	(
water	198:23	0:0	10	psz_text
op	198:32	0:0	10	+
water	198:34	0:0	10	1
water	198:36	0:0	10	)
op	198:38	0:0	10	==
water	198:41	0:0	10	'\0'
stmts	199:12	201:12	9	
water	199:12	0:0	10	{
water	200:16	0:0	10	psz_text
op	200:24	0:0	10	++
water	200:26	0:0	10	;
water	201:12	0:0	10	}
break	202:12	202:17	6	
label	203:8	203:15	6	default :
if	204:12	208:12	6	(! p_sys -> jss . i_comment)
cond	204:16	204:28	7	! p_sys -> jss . i_comment
op	204:16	0:0	8	!
water	204:17	0:0	8	p_sys
op	204:22	0:0	8	->
water	204:24	0:0	8	jss
op	204:27	0:0	8	.
water	204:28	0:0	8	i_comment
stmts	205:12	208:12	7	
water	205:12	0:0	8	{
op	206:16	0:0	8	*
water	206:17	0:0	8	psz_text2
op	206:27	0:0	8	=
op	206:29	0:0	8	*
water	206:30	0:0	8	psz_text
water	206:38	0:0	8	;
water	207:16	0:0	8	psz_text2
op	207:25	0:0	8	++
water	207:27	0:0	8	;
water	208:12	0:0	8	}
water	209:8	0:0	6	}
water	210:8	0:0	4	psz_text
op	210:16	0:0	4	++
water	210:18	0:0	4	;
water	211:4	0:0	4	}
water	212:4	0:0	2	p_subtitle
op	212:14	0:0	2	->
water	212:16	0:0	2	psz_text
op	212:25	0:0	2	=
water	212:27	0:0	2	psz_orig2
water	212:36	0:0	2	;
call	213:4	213:49	2	msg_Dbg
arg	213:13	213:20	3	p_demux
water	213:13	0:0	4	p_demux
arg	213:22	213:26	3	"%s"
water	213:22	0:0	4	"%s"
arg	213:28	213:49	3	p_subtitle->psz_text
water	213:28	0:0	4	p_subtitle
op	213:38	0:0	4	->
water	213:40	0:0	4	psz_text
water	213:50	0:0	2	;
call	214:4	214:19	2	free
arg	214:10	214:19	3	psz_orig
water	214:10	0:0	4	psz_orig
water	214:20	0:0	2	;
return	215:4	215:22	2	VLC_SUCCESS
water	215:11	0:0	3	VLC_SUCCESS
