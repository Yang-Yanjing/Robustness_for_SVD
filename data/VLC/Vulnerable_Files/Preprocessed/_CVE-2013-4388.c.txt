func	1:0	155:0	0	static int	LOASParse
params	1:20	0:0	1	
param	1:22	1:38	2	decoder_t *	p_dec
param	1:40	1:57	2	uint8_t *	p_buffer
param	1:59	1:72	2	int	i_buffer
stmnts	0:0	154:24	1	
decl	3:4	3:39	2	decoder_sys_t	*p_sys
op	3:25	0:0	2	=
water	3:27	0:0	2	p_dec
op	3:32	0:0	2	->
water	3:34	0:0	2	p_sys
decl	4:4	4:10	2	bs_t	s
decl	5:4	5:13	2	int	i_sub
decl	6:4	6:25	2	int	i_accumulated
op	6:22	0:0	2	=
water	6:24	0:0	2	0
call	7:4	7:36	2	bs_init
arg	7:13	7:15	3	&s
op	7:13	0:0	4	&
water	7:14	0:0	4	s
arg	7:17	7:25	3	p_buffer
water	7:17	0:0	4	p_buffer
arg	7:27	7:36	3	i_buffer
water	7:27	0:0	4	i_buffer
water	7:37	0:0	2	;
if	9:4	32:4	2	(!bs_read1 (& s ))
cond	9:8	9:22	3	!bs_read1 (& s )
op	9:8	0:0	4	!
call	9:9	9:22	4	bs_read1
arg	9:19	9:22	5	&s
op	9:19	0:0	6	&
water	9:20	0:0	6	s
stmts	10:4	32:4	3	
water	10:4	0:0	4	{
if	11:8	31:8	4	(!LatmReadStreamMuxConfiguration (& p_sys -> latm ,& s ) && p_sys -> latm . i_streams > 0)
cond	11:12	12:36	5	!LatmReadStreamMuxConfiguration (& p_sys -> latm ,& s ) && p_sys -> latm . i_streams > 0
op	11:12	0:0	6	!
call	11:13	11:62	6	LatmReadStreamMuxConfiguration
arg	11:45	11:57	7	&p_sys->latm
op	11:45	0:0	8	&
water	11:46	0:0	8	p_sys
op	11:51	0:0	8	->
water	11:53	0:0	8	latm
arg	11:59	11:62	7	&s
op	11:59	0:0	8	&
water	11:60	0:0	8	s
op	11:64	0:0	6	&&
water	12:12	0:0	6	p_sys
op	12:17	0:0	6	->
water	12:19	0:0	6	latm
op	12:23	0:0	6	.
water	12:24	0:0	6	i_streams
op	12:34	0:0	6	>
water	12:36	0:0	6	0
stmts	13:8	31:8	5	
water	13:8	0:0	6	{
decl	14:12	14:60	6	const latm_stream_t	*st
op	14:36	0:0	6	=
op	14:38	0:0	6	&
water	14:39	0:0	6	p_sys
op	14:44	0:0	6	->
water	14:46	0:0	6	latm
op	14:50	0:0	6	.
water	14:51	0:0	6	stream
op	14:57	0:0	6	[
water	14:58	0:0	6	0
op	14:59	0:0	6	]
water	15:12	0:0	6	p_sys
op	15:17	0:0	6	->
water	15:19	0:0	6	i_channels
op	15:30	0:0	6	=
water	15:32	0:0	6	st
op	15:34	0:0	6	->
water	15:36	0:0	6	cfg
op	15:39	0:0	6	.
water	15:40	0:0	6	i_channel
water	15:49	0:0	6	;
water	16:12	0:0	6	p_sys
op	16:17	0:0	6	->
water	16:19	0:0	6	i_rate
op	16:26	0:0	6	=
water	16:28	0:0	6	st
op	16:30	0:0	6	->
water	16:32	0:0	6	cfg
op	16:35	0:0	6	.
water	16:36	0:0	6	i_samplerate
water	16:48	0:0	6	;
water	17:12	0:0	6	p_sys
op	17:17	0:0	6	->
water	17:19	0:0	6	i_frame_length
op	17:34	0:0	6	=
water	17:36	0:0	6	st
op	17:38	0:0	6	->
water	17:40	0:0	6	cfg
op	17:43	0:0	6	.
water	17:44	0:0	6	i_frame_length
water	17:58	0:0	6	;
if	19:12	29:12	6	(! p_dec -> fmt_out . i_extra && st -> i_extra > 0)
cond	19:16	19:57	7	! p_dec -> fmt_out . i_extra && st -> i_extra > 0
op	19:16	0:0	8	!
water	19:17	0:0	8	p_dec
op	19:22	0:0	8	->
water	19:24	0:0	8	fmt_out
op	19:31	0:0	8	.
water	19:32	0:0	8	i_extra
op	19:40	0:0	8	&&
water	19:43	0:0	8	st
op	19:45	0:0	8	->
water	19:47	0:0	8	i_extra
op	19:55	0:0	8	>
water	19:57	0:0	8	0
stmts	20:12	29:12	7	
water	20:12	0:0	8	{
water	21:16	0:0	8	p_dec
op	21:21	0:0	8	->
water	21:23	0:0	8	fmt_out
op	21:30	0:0	8	.
water	21:31	0:0	8	i_extra
op	21:39	0:0	8	=
water	21:41	0:0	8	st
op	21:43	0:0	8	->
water	21:45	0:0	8	i_extra
water	21:52	0:0	8	;
water	22:16	0:0	8	p_dec
op	22:21	0:0	8	->
water	22:23	0:0	8	fmt_out
op	22:30	0:0	8	.
water	22:31	0:0	8	p_extra
op	22:39	0:0	8	=
call	22:41	22:61	8	malloc
arg	22:49	22:61	9	st->i_extra
water	22:49	0:0	10	st
op	22:51	0:0	10	->
water	22:53	0:0	10	i_extra
water	22:62	0:0	8	;
if	23:16	27:16	8	(! p_dec -> fmt_out . p_extra)
cond	23:20	23:36	9	! p_dec -> fmt_out . p_extra
op	23:20	0:0	10	!
water	23:21	0:0	10	p_dec
op	23:26	0:0	10	->
water	23:28	0:0	10	fmt_out
op	23:35	0:0	10	.
water	23:36	0:0	10	p_extra
stmts	24:16	27:16	9	
water	24:16	0:0	10	{
water	25:20	0:0	10	p_dec
op	25:25	0:0	10	->
water	25:27	0:0	10	fmt_out
op	25:34	0:0	10	.
water	25:35	0:0	10	i_extra
op	25:43	0:0	10	=
water	25:45	0:0	10	0
water	25:46	0:0	10	;
return	26:20	26:28	10	0
water	26:27	0:0	11	0
water	27:16	0:0	10	}
call	28:16	28:71	8	memcpy
arg	28:24	28:46	9	p_dec->fmt_out.p_extra
water	28:24	0:0	10	p_dec
op	28:29	0:0	10	->
water	28:31	0:0	10	fmt_out
op	28:38	0:0	10	.
water	28:39	0:0	10	p_extra
arg	28:48	28:57	9	st->extra
water	28:48	0:0	10	st
op	28:50	0:0	10	->
water	28:52	0:0	10	extra
arg	28:59	28:71	9	st->i_extra
water	28:59	0:0	10	st
op	28:61	0:0	10	->
water	28:63	0:0	10	i_extra
water	28:72	0:0	8	;
water	29:12	0:0	8	}
water	30:12	0:0	6	p_sys
op	30:17	0:0	6	->
water	30:19	0:0	6	b_latm_cfg
op	30:30	0:0	6	=
water	30:32	0:0	6	true
water	30:36	0:0	6	;
water	31:8	0:0	6	}
water	32:4	0:0	4	}
if	34:4	35:16	2	(! p_sys -> b_latm_cfg)
cond	34:8	34:16	3	! p_sys -> b_latm_cfg
op	34:8	0:0	4	!
water	34:9	0:0	4	p_sys
op	34:14	0:0	4	->
water	34:16	0:0	4	b_latm_cfg
stmts	35:8	35:16	3	
return	35:8	35:16	4	0
water	35:15	0:0	5	0
if	37:4	38:83	2	(p_sys -> latm . i_sub_frames > 1)
cond	37:8	37:35	3	p_sys -> latm . i_sub_frames > 1
water	37:8	0:0	4	p_sys
op	37:13	0:0	4	->
water	37:15	0:0	4	latm
op	37:19	0:0	4	.
water	37:20	0:0	4	i_sub_frames
op	37:33	0:0	4	>
water	37:35	0:0	4	1
stmts	38:8	38:83	3	
call	38:8	38:82	4	msg_Err
arg	38:17	38:22	5	p_dec
water	38:17	0:0	6	p_dec
arg	38:24	38:82	5	"latm sub frames not yet supported, please send a sample"
water	38:24	0:0	6	"latm sub frames not yet supported, please send a sample"
water	38:83	0:0	4	;
for	39:4	148:4	2	(i_sub = 0 ;i_sub < p_sys -> latm . i_sub_frames;i_sub ++)
forinit	39:9	39:18	3	i_sub = 0 ;
water	39:9	0:0	4	i_sub
op	39:15	0:0	4	=
water	39:17	0:0	4	0
water	39:18	0:0	4	;
cond	39:20	39:40	3	i_sub < p_sys -> latm . i_sub_frames
water	39:20	0:0	4	i_sub
op	39:26	0:0	4	<
water	39:28	0:0	4	p_sys
op	39:33	0:0	4	->
water	39:35	0:0	4	latm
op	39:39	0:0	4	.
water	39:40	0:0	4	i_sub_frames
forexpr	39:54	39:59	3	i_sub ++
water	39:54	0:0	4	i_sub
op	39:59	0:0	4	++
stmts	40:4	148:4	3	
water	40:4	0:0	4	{
water	41:8	0:0	4	int
water	41:12	0:0	4	pi_payload
op	41:22	0:0	4	[
water	41:23	0:0	4	LATM_MAX_PROGRAM
op	41:39	0:0	4	]
op	41:40	0:0	4	[
water	41:41	0:0	4	LATM_MAX_LAYER
op	41:55	0:0	4	]
water	41:56	0:0	4	;
if	42:8	98:8	4	(p_sys -> latm . b_same_time_framing)
cond	42:12	42:24	5	p_sys -> latm . b_same_time_framing
water	42:12	0:0	6	p_sys
op	42:17	0:0	6	->
water	42:19	0:0	6	latm
op	42:23	0:0	6	.
water	42:24	0:0	6	b_same_time_framing
stmts	43:8	98:8	5	
water	43:8	0:0	6	{
decl	44:12	44:25	6	int	i_program
for	46:12	80:12	6	(i_program = 0 ;i_program < p_sys -> latm . i_programs;i_program ++)
forinit	46:17	46:30	7	i_program = 0 ;
water	46:17	0:0	8	i_program
op	46:27	0:0	8	=
water	46:29	0:0	8	0
water	46:30	0:0	8	;
cond	46:32	46:56	7	i_program < p_sys -> latm . i_programs
water	46:32	0:0	8	i_program
op	46:42	0:0	8	<
water	46:44	0:0	8	p_sys
op	46:49	0:0	8	->
water	46:51	0:0	8	latm
op	46:55	0:0	8	.
water	46:56	0:0	8	i_programs
forexpr	46:68	46:77	7	i_program ++
water	46:68	0:0	8	i_program
op	46:77	0:0	8	++
stmts	47:12	80:12	7	
water	47:12	0:0	8	{
decl	48:16	48:27	8	int	i_layer
for	49:16	79:16	8	(i_layer = 0 ;i_layer < p_sys -> latm . pi_layers [ i_program ];i_layer ++)
forinit	49:21	49:32	9	i_layer = 0 ;
water	49:21	0:0	10	i_layer
op	49:29	0:0	10	=
water	49:31	0:0	10	0
water	49:32	0:0	10	;
cond	49:34	49:75	9	i_layer < p_sys -> latm . pi_layers [ i_program ]
water	49:34	0:0	10	i_layer
op	49:42	0:0	10	<
water	49:44	0:0	10	p_sys
op	49:49	0:0	10	->
water	49:51	0:0	10	latm
op	49:55	0:0	10	.
water	49:56	0:0	10	pi_layers
op	49:65	0:0	10	[
water	49:66	0:0	10	i_program
op	49:75	0:0	10	]
forexpr	49:78	49:85	9	i_layer ++
water	49:78	0:0	10	i_layer
op	49:85	0:0	10	++
stmts	50:16	79:16	9	
water	50:16	0:0	10	{
decl	51:20	51:102	10	latm_stream_t	*st
op	51:38	0:0	10	=
op	51:40	0:0	10	&
water	51:41	0:0	10	p_sys
op	51:46	0:0	10	->
water	51:48	0:0	10	latm
op	51:52	0:0	10	.
water	51:53	0:0	10	stream
op	51:59	0:0	10	[
water	51:60	0:0	10	p_sys
op	51:65	0:0	10	->
water	51:67	0:0	10	latm
op	51:71	0:0	10	.
water	51:72	0:0	10	pi_stream
op	51:81	0:0	10	[
water	51:82	0:0	10	i_program
op	51:91	0:0	10	]
op	51:92	0:0	10	[
water	51:93	0:0	10	i_layer
op	51:100	0:0	10	]
op	51:101	0:0	10	]
if	52:20	63:20	10	(st -> i_frame_length_type == 0)
cond	52:24	52:51	11	st -> i_frame_length_type == 0
water	52:24	0:0	12	st
op	52:26	0:0	12	->
water	52:28	0:0	12	i_frame_length_type
op	52:48	0:0	12	==
water	52:51	0:0	12	0
stmts	53:20	63:20	11	
water	53:20	0:0	12	{
decl	54:24	54:41	12	int	i_payload
op	54:38	0:0	12	=
water	54:40	0:0	12	0
for	55:24	61:24	12	(;;)
forinit	55:29	55:29	13	;
water	55:29	0:0	14	;
cond	0:0	0:0	13	
forexpr	0:0	0:0	13	
stmts	56:24	61:24	13	
water	56:24	0:0	14	{
decl	57:28	57:56	14	int	i_tmp
op	57:38	0:0	14	=
call	57:40	57:55	15	bs_read
arg	57:49	57:51	16	&s
op	57:49	0:0	17	&
water	57:50	0:0	17	s
arg	57:53	57:55	16	8
water	57:53	0:0	17	8
water	58:28	0:0	14	i_payload
op	58:38	0:0	14	+=
water	58:41	0:0	14	i_tmp
water	58:46	0:0	14	;
if	59:28	60:37	14	(i_tmp != 255)
cond	59:32	59:41	15	i_tmp != 255
water	59:32	0:0	16	i_tmp
op	59:38	0:0	16	!=
water	59:41	0:0	16	255
stmts	60:32	60:37	15	
break	60:32	60:37	16	
water	61:24	0:0	14	}
water	62:24	0:0	12	pi_payload
op	62:34	0:0	12	[
water	62:35	0:0	12	i_program
op	62:44	0:0	12	]
op	62:45	0:0	12	[
water	62:46	0:0	12	i_layer
op	62:53	0:0	12	]
op	62:55	0:0	12	=
water	62:57	0:0	12	i_payload
water	62:66	0:0	12	;
water	63:20	0:0	12	}
else	64:20	67:20	10
stmts	64:25	67:20	11	
if	64:25	67:20	12	(st -> i_frame_length_type == 1)
cond	64:29	64:56	13	st -> i_frame_length_type == 1
water	64:29	0:0	14	st
op	64:31	0:0	14	->
water	64:33	0:0	14	i_frame_length_type
op	64:53	0:0	14	==
water	64:56	0:0	14	1
stmts	65:20	67:20	13	
water	65:20	0:0	14	{
water	66:24	0:0	14	pi_payload
op	66:34	0:0	14	[
water	66:35	0:0	14	i_program
op	66:44	0:0	14	]
op	66:45	0:0	14	[
water	66:46	0:0	14	i_layer
op	66:53	0:0	14	]
op	66:55	0:0	14	=
water	66:57	0:0	14	st
op	66:59	0:0	14	->
water	66:61	0:0	14	i_frame_length
op	66:76	0:0	14	/
water	66:78	0:0	14	8
water	66:79	0:0	14	;
water	67:20	0:0	14	}
else	68:20	74:20	10
stmts	68:25	74:20	11	
if	68:25	74:20	12	(( st -> i_frame_length_type == 3 ) || ( st -> i_frame_length_type == 5 ) || ( st -> i_frame_length_type == 7 ))
cond	68:29	70:60	13	( st -> i_frame_length_type == 3 ) || ( st -> i_frame_length_type == 5 ) || ( st -> i_frame_length_type == 7 )
water	68:29	0:0	14	(
water	68:31	0:0	14	st
op	68:33	0:0	14	->
water	68:35	0:0	14	i_frame_length_type
op	68:55	0:0	14	==
water	68:58	0:0	14	3
water	68:60	0:0	14	)
op	68:62	0:0	14	||
water	69:29	0:0	14	(
water	69:31	0:0	14	st
op	69:33	0:0	14	->
water	69:35	0:0	14	i_frame_length_type
op	69:55	0:0	14	==
water	69:58	0:0	14	5
water	69:60	0:0	14	)
op	69:62	0:0	14	||
water	70:29	0:0	14	(
water	70:31	0:0	14	st
op	70:33	0:0	14	->
water	70:35	0:0	14	i_frame_length_type
op	70:55	0:0	14	==
water	70:58	0:0	14	7
water	70:60	0:0	14	)
stmts	71:20	74:20	13	
water	71:20	0:0	14	{
call	72:24	72:39	14	bs_skip
arg	72:33	72:35	15	&s
op	72:33	0:0	16	&
water	72:34	0:0	16	s
arg	72:37	72:39	15	2
water	72:37	0:0	16	2
water	72:40	0:0	14	;
water	73:24	0:0	14	pi_payload
op	73:34	0:0	14	[
water	73:35	0:0	14	i_program
op	73:44	0:0	14	]
op	73:45	0:0	14	[
water	73:46	0:0	14	i_layer
op	73:53	0:0	14	]
op	73:55	0:0	14	=
water	73:57	0:0	14	0
water	73:58	0:0	14	;
water	74:20	0:0	14	}
else	75:20	78:20	10
stmts	76:20	78:20	11	
water	76:20	0:0	12	{
water	77:24	0:0	12	pi_payload
op	77:34	0:0	12	[
water	77:35	0:0	12	i_program
op	77:44	0:0	12	]
op	77:45	0:0	12	[
water	77:46	0:0	12	i_layer
op	77:53	0:0	12	]
op	77:55	0:0	12	=
water	77:57	0:0	12	0
water	77:58	0:0	12	;
water	78:20	0:0	12	}
water	79:16	0:0	10	}
water	80:12	0:0	8	}
for	82:12	97:12	6	(i_program = 0 ;i_program < p_sys -> latm . i_programs;i_program ++)
forinit	82:17	82:30	7	i_program = 0 ;
water	82:17	0:0	8	i_program
op	82:27	0:0	8	=
water	82:29	0:0	8	0
water	82:30	0:0	8	;
cond	82:32	82:56	7	i_program < p_sys -> latm . i_programs
water	82:32	0:0	8	i_program
op	82:42	0:0	8	<
water	82:44	0:0	8	p_sys
op	82:49	0:0	8	->
water	82:51	0:0	8	latm
op	82:55	0:0	8	.
water	82:56	0:0	8	i_programs
forexpr	82:68	82:77	7	i_program ++
water	82:68	0:0	8	i_program
op	82:77	0:0	8	++
stmts	83:12	97:12	7	
water	83:12	0:0	8	{
decl	84:16	84:27	8	int	i_layer
decl	85:16	85:21	8	int	i
for	86:16	96:16	8	(i_layer = 0 ;i_layer < p_sys -> latm . pi_layers [ i_program ];i_layer ++)
forinit	86:21	86:32	9	i_layer = 0 ;
water	86:21	0:0	10	i_layer
op	86:29	0:0	10	=
water	86:31	0:0	10	0
water	86:32	0:0	10	;
cond	86:34	86:75	9	i_layer < p_sys -> latm . pi_layers [ i_program ]
water	86:34	0:0	10	i_layer
op	86:42	0:0	10	<
water	86:44	0:0	10	p_sys
op	86:49	0:0	10	->
water	86:51	0:0	10	latm
op	86:55	0:0	10	.
water	86:56	0:0	10	pi_layers
op	86:65	0:0	10	[
water	86:66	0:0	10	i_program
op	86:75	0:0	10	]
forexpr	86:78	86:85	9	i_layer ++
water	86:78	0:0	10	i_layer
op	86:85	0:0	10	++
stmts	87:16	96:16	9	
water	87:16	0:0	10	{
if	89:20	90:29	10	(i_program != 0 || i_layer != 0)
cond	89:24	89:53	11	i_program != 0 || i_layer != 0
water	89:24	0:0	12	i_program
op	89:34	0:0	12	!=
water	89:37	0:0	12	0
op	89:39	0:0	12	||
water	89:42	0:0	12	i_layer
op	89:50	0:0	12	!=
water	89:53	0:0	12	0
stmts	90:24	90:29	11	
break	90:24	90:29	12	
if	91:20	92:32	10	(pi_payload [ i_program ] [ i_layer ] <= 0)
cond	91:24	91:58	11	pi_payload [ i_program ] [ i_layer ] <= 0
water	91:24	0:0	12	pi_payload
op	91:34	0:0	12	[
water	91:35	0:0	12	i_program
op	91:44	0:0	12	]
op	91:45	0:0	12	[
water	91:46	0:0	12	i_layer
op	91:53	0:0	12	]
op	91:55	0:0	12	<=
water	91:58	0:0	12	0
stmts	92:24	92:32	11	
continue	92:24	92:32	12	
for	94:20	95:68	10	(i = 0 ;i < pi_payload [ i_program ] [ i_layer ];i ++)
forinit	94:25	94:30	11	i = 0 ;
water	94:25	0:0	12	i
op	94:27	0:0	12	=
water	94:29	0:0	12	0
water	94:30	0:0	12	;
cond	94:32	94:65	11	i < pi_payload [ i_program ] [ i_layer ]
water	94:32	0:0	12	i
op	94:34	0:0	12	<
water	94:36	0:0	12	pi_payload
op	94:46	0:0	12	[
water	94:47	0:0	12	i_program
op	94:56	0:0	12	]
op	94:57	0:0	12	[
water	94:58	0:0	12	i_layer
op	94:65	0:0	12	]
forexpr	94:68	94:69	11	i ++
water	94:68	0:0	12	i
op	94:69	0:0	12	++
stmts	95:24	95:68	11	
water	95:24	0:0	12	p_buffer
op	95:32	0:0	12	[
water	95:33	0:0	12	i_accumulated
op	95:46	0:0	12	++
op	95:48	0:0	12	]
op	95:50	0:0	12	=
call	95:52	95:67	12	bs_read
arg	95:61	95:63	13	&s
op	95:61	0:0	14	&
water	95:62	0:0	14	s
arg	95:65	95:67	13	8
water	95:65	0:0	14	8
water	95:68	0:0	12	;
water	96:16	0:0	10	}
water	97:12	0:0	8	}
water	98:8	0:0	6	}
else	99:8	147:8	4
stmts	100:8	147:8	5	
water	100:8	0:0	6	{
decl	101:12	101:49	6	const int	i_chunks
op	101:31	0:0	6	=
call	101:33	101:48	7	bs_read
arg	101:42	101:44	8	&s
op	101:42	0:0	9	&
water	101:43	0:0	9	s
arg	101:46	101:48	8	4
water	101:46	0:0	9	4
decl	102:12	102:30	6	int	pi_program[16]
decl	103:12	103:28	6	int	pi_layer[16]
decl	104:12	104:23	6	int	i_chunk
call	105:12	105:102	6	msg_Err
arg	105:21	105:26	7	p_dec
water	105:21	0:0	8	p_dec
arg	105:28	105:102	7	"latm without same time frameing not yet supported, please send a sample"
water	105:28	0:0	8	"latm without same time frameing not yet supported, please send a sample"
water	105:103	0:0	6	;
for	106:12	140:12	6	(i_chunk = 0 ;i_chunk < i_chunks;i_chunk ++)
forinit	106:17	106:28	7	i_chunk = 0 ;
water	106:17	0:0	8	i_chunk
op	106:25	0:0	8	=
water	106:27	0:0	8	0
water	106:28	0:0	8	;
cond	106:30	106:40	7	i_chunk < i_chunks
water	106:30	0:0	8	i_chunk
op	106:38	0:0	8	<
water	106:40	0:0	8	i_chunks
forexpr	106:50	106:57	7	i_chunk ++
water	106:50	0:0	8	i_chunk
op	106:57	0:0	8	++
stmts	107:12	140:12	7	
water	107:12	0:0	8	{
decl	108:16	108:56	8	const int	streamIndex
op	108:38	0:0	8	=
call	108:40	108:55	9	bs_read
arg	108:49	108:51	10	&s
op	108:49	0:0	11	&
water	108:50	0:0	11	s
arg	108:53	108:55	10	4
water	108:53	0:0	11	4
decl	109:16	109:68	8	latm_stream_t	*st
op	109:34	0:0	8	=
op	109:36	0:0	8	&
water	109:37	0:0	8	p_sys
op	109:42	0:0	8	->
water	109:44	0:0	8	latm
op	109:48	0:0	8	.
water	109:49	0:0	8	stream
op	109:55	0:0	8	[
water	109:56	0:0	8	streamIndex
op	109:67	0:0	8	]
decl	110:16	110:51	8	const int	i_program
op	110:36	0:0	8	=
water	110:38	0:0	8	st
op	110:40	0:0	8	->
water	110:42	0:0	8	i_program
decl	111:16	111:47	8	const int	i_layer
op	111:34	0:0	8	=
water	111:36	0:0	8	st
op	111:38	0:0	8	->
water	111:40	0:0	8	i_layer
water	112:16	0:0	8	pi_program
op	112:26	0:0	8	[
water	112:27	0:0	8	i_chunk
op	112:34	0:0	8	]
op	112:36	0:0	8	=
water	112:38	0:0	8	i_program
water	112:47	0:0	8	;
water	113:16	0:0	8	pi_layer
op	113:24	0:0	8	[
water	113:25	0:0	8	i_chunk
op	113:32	0:0	8	]
op	113:34	0:0	8	=
water	113:36	0:0	8	i_layer
water	113:43	0:0	8	;
if	114:16	126:16	8	(st -> i_frame_length_type == 0)
cond	114:20	114:47	9	st -> i_frame_length_type == 0
water	114:20	0:0	10	st
op	114:22	0:0	10	->
water	114:24	0:0	10	i_frame_length_type
op	114:44	0:0	10	==
water	114:47	0:0	10	0
stmts	115:16	126:16	9	
water	115:16	0:0	10	{
decl	116:20	116:37	10	int	i_payload
op	116:34	0:0	10	=
water	116:36	0:0	10	0
for	117:20	123:20	10	(;;)
forinit	117:25	117:25	11	;
water	117:25	0:0	12	;
cond	0:0	0:0	11	
forexpr	0:0	0:0	11	
stmts	118:20	123:20	11	
water	118:20	0:0	12	{
decl	119:24	119:52	12	int	i_tmp
op	119:34	0:0	12	=
call	119:36	119:51	13	bs_read
arg	119:45	119:47	14	&s
op	119:45	0:0	15	&
water	119:46	0:0	15	s
arg	119:49	119:51	14	8
water	119:49	0:0	15	8
water	120:24	0:0	12	i_payload
op	120:34	0:0	12	+=
water	120:37	0:0	12	i_tmp
water	120:42	0:0	12	;
if	121:24	122:33	12	(i_tmp != 255)
cond	121:28	121:37	13	i_tmp != 255
water	121:28	0:0	14	i_tmp
op	121:34	0:0	14	!=
water	121:37	0:0	14	255
stmts	122:28	122:33	13	
break	122:28	122:33	14	
water	123:20	0:0	12	}
water	124:20	0:0	10	pi_payload
op	124:30	0:0	10	[
water	124:31	0:0	10	i_program
op	124:40	0:0	10	]
op	124:41	0:0	10	[
water	124:42	0:0	10	i_layer
op	124:49	0:0	10	]
op	124:51	0:0	10	=
water	124:53	0:0	10	i_payload
water	124:62	0:0	10	;
call	125:20	125:35	10	bs_skip
arg	125:29	125:31	11	&s
op	125:29	0:0	12	&
water	125:30	0:0	12	s
arg	125:33	125:35	11	1
water	125:33	0:0	12	1
water	125:36	0:0	10	;
water	126:16	0:0	10	}
else	127:16	130:16	8
stmts	127:21	130:16	9	
if	127:21	130:16	10	(st -> i_frame_length_type == 1)
cond	127:25	127:52	11	st -> i_frame_length_type == 1
water	127:25	0:0	12	st
op	127:27	0:0	12	->
water	127:29	0:0	12	i_frame_length_type
op	127:49	0:0	12	==
water	127:52	0:0	12	1
stmts	128:16	130:16	11	
water	128:16	0:0	12	{
water	129:20	0:0	12	pi_payload
op	129:30	0:0	12	[
water	129:31	0:0	12	i_program
op	129:40	0:0	12	]
op	129:41	0:0	12	[
water	129:42	0:0	12	i_layer
op	129:49	0:0	12	]
op	129:51	0:0	12	=
water	129:53	0:0	12	st
op	129:55	0:0	12	->
water	129:57	0:0	12	i_frame_length
op	129:72	0:0	12	/
water	129:74	0:0	12	8
water	129:75	0:0	12	;
water	130:16	0:0	12	}
else	131:16	136:16	8
stmts	131:21	136:16	9	
if	131:21	136:16	10	(( st -> i_frame_length_type == 3 ) || ( st -> i_frame_length_type == 5 ) || ( st -> i_frame_length_type == 7 ))
cond	131:25	133:56	11	( st -> i_frame_length_type == 3 ) || ( st -> i_frame_length_type == 5 ) || ( st -> i_frame_length_type == 7 )
water	131:25	0:0	12	(
water	131:27	0:0	12	st
op	131:29	0:0	12	->
water	131:31	0:0	12	i_frame_length_type
op	131:51	0:0	12	==
water	131:54	0:0	12	3
water	131:56	0:0	12	)
op	131:58	0:0	12	||
water	132:25	0:0	12	(
water	132:27	0:0	12	st
op	132:29	0:0	12	->
water	132:31	0:0	12	i_frame_length_type
op	132:51	0:0	12	==
water	132:54	0:0	12	5
water	132:56	0:0	12	)
op	132:58	0:0	12	||
water	133:25	0:0	12	(
water	133:27	0:0	12	st
op	133:29	0:0	12	->
water	133:31	0:0	12	i_frame_length_type
op	133:51	0:0	12	==
water	133:54	0:0	12	7
water	133:56	0:0	12	)
stmts	134:16	136:16	11	
water	134:16	0:0	12	{
call	135:20	135:35	12	bs_read
arg	135:29	135:31	13	&s
op	135:29	0:0	14	&
water	135:30	0:0	14	s
arg	135:33	135:35	13	2
water	135:33	0:0	14	2
water	135:36	0:0	12	;
water	136:16	0:0	12	}
else	137:16	139:16	8
stmts	138:16	139:16	9	
water	138:16	0:0	10	{
water	0:0	0:0	10	STATEMENTS
water	139:16	0:0	10	}
water	140:12	0:0	8	}
for	141:12	146:12	6	(i_chunk = 0 ;i_chunk < i_chunks;i_chunk ++)
forinit	141:17	141:28	7	i_chunk = 0 ;
water	141:17	0:0	8	i_chunk
op	141:25	0:0	8	=
water	141:27	0:0	8	0
water	141:28	0:0	8	;
cond	141:30	141:40	7	i_chunk < i_chunks
water	141:30	0:0	8	i_chunk
op	141:38	0:0	8	<
water	141:40	0:0	8	i_chunks
forexpr	141:50	141:57	7	i_chunk ++
water	141:50	0:0	8	i_chunk
op	141:57	0:0	8	++
stmts	142:12	146:12	7	
water	142:12	0:0	8	{
water	0:0	0:0	8	STATEMENTS
water	146:12	0:0	8	}
water	147:8	0:0	6	}
water	148:4	0:0	4	}
if	149:4	152:4	2	(p_sys -> latm . i_other_data > 0)
cond	149:8	149:35	3	p_sys -> latm . i_other_data > 0
water	149:8	0:0	4	p_sys
op	149:13	0:0	4	->
water	149:15	0:0	4	latm
op	149:19	0:0	4	.
water	149:20	0:0	4	i_other_data
op	149:33	0:0	4	>
water	149:35	0:0	4	0
stmts	150:4	152:4	3	
water	150:4	0:0	4	{
water	0:0	0:0	4	STATEMENTS
water	152:4	0:0	4	}
call	153:4	153:17	2	bs_align
arg	153:14	153:17	3	&s
op	153:14	0:0	4	&
water	153:15	0:0	4	s
water	153:18	0:0	2	;
return	154:4	154:24	2	i_accumulated
water	154:11	0:0	3	i_accumulated
