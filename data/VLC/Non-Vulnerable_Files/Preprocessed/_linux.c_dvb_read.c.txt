func	2:0	54:0	0	ssize_t	dvb_read
params	2:17	0:0	1	
param	2:18	2:33	2	dvb_device_t *	d
param	2:35	2:44	2	void *	buf
param	2:46	2:56	2	size_t	len
stmnts	0:0	53:13	1	
decl	4:4	4:24	2	struct pollfd	ufd[2]
decl	5:4	5:9	2	int	n
if	7:4	8:29	2	(d -> cam != NULL)
cond	7:8	7:18	3	d -> cam != NULL
water	7:8	0:0	4	d
op	7:9	0:0	4	->
water	7:11	0:0	4	cam
op	7:15	0:0	4	!=
water	7:18	0:0	4	NULL
stmts	8:8	8:29	3	
call	8:8	8:28	4	en50221_Poll
arg	8:22	8:28	5	d->cam
water	8:22	0:0	6	d
op	8:23	0:0	6	->
water	8:25	0:0	6	cam
water	8:29	0:0	4	;
water	10:4	0:0	2	ufd
op	10:7	0:0	2	[
water	10:8	0:0	2	0
op	10:9	0:0	2	]
op	10:10	0:0	2	.
water	10:11	0:0	2	fd
op	10:14	0:0	2	=
water	10:16	0:0	2	d
op	10:17	0:0	2	->
water	10:19	0:0	2	demux
water	10:24	0:0	2	;
water	11:4	0:0	2	ufd
op	11:7	0:0	2	[
water	11:8	0:0	2	0
op	11:9	0:0	2	]
op	11:10	0:0	2	.
water	11:11	0:0	2	events
op	11:18	0:0	2	=
water	11:20	0:0	2	POLLIN
water	11:26	0:0	2	;
if	12:4	17:4	2	(d -> frontend != - 1)
cond	12:8	12:24	3	d -> frontend != - 1
water	12:8	0:0	4	d
op	12:9	0:0	4	->
water	12:11	0:0	4	frontend
op	12:20	0:0	4	!=
op	12:23	0:0	4	-
water	12:24	0:0	4	1
stmts	13:4	17:4	3	
water	13:4	0:0	4	{
water	14:8	0:0	4	ufd
op	14:11	0:0	4	[
water	14:12	0:0	4	1
op	14:13	0:0	4	]
op	14:14	0:0	4	.
water	14:15	0:0	4	fd
op	14:18	0:0	4	=
water	14:20	0:0	4	d
op	14:21	0:0	4	->
water	14:23	0:0	4	frontend
water	14:31	0:0	4	;
water	15:8	0:0	4	ufd
op	15:11	0:0	4	[
water	15:12	0:0	4	1
op	15:13	0:0	4	]
op	15:14	0:0	4	.
water	15:15	0:0	4	events
op	15:22	0:0	4	=
water	15:24	0:0	4	POLLIN
water	15:30	0:0	4	;
water	16:8	0:0	4	n
op	16:10	0:0	4	=
water	16:12	0:0	4	2
water	16:13	0:0	4	;
water	17:4	0:0	4	}
else	18:4	19:13	2
stmts	19:8	19:13	3	
water	19:8	0:0	4	n
op	19:10	0:0	4	=
water	19:12	0:0	4	1
water	19:13	0:0	4	;
if	20:4	21:17	2	(poll (ufd ,n ,500 ) < 0)
cond	20:8	20:41	3	poll (ufd ,n ,500 ) < 0
call	20:8	20:37	4	poll
arg	20:14	20:17	5	ufd
water	20:14	0:0	6	ufd
arg	20:19	20:20	5	n
water	20:19	0:0	6	n
arg	20:22	20:37	5	500
water	20:22	0:0	6	500
op	20:39	0:0	4	<
water	20:41	0:0	4	0
stmts	21:8	21:17	3	
return	21:8	21:17	4	-1
op	21:15	0:0	5	-
water	21:16	0:0	5	1
if	22:4	37:4	2	(d -> frontend != - 1 && ufd [ 1 ] . revents)
cond	22:8	22:36	3	d -> frontend != - 1 && ufd [ 1 ] . revents
water	22:8	0:0	4	d
op	22:9	0:0	4	->
water	22:11	0:0	4	frontend
op	22:20	0:0	4	!=
op	22:23	0:0	4	-
water	22:24	0:0	4	1
op	22:26	0:0	4	&&
water	22:29	0:0	4	ufd
op	22:32	0:0	4	[
water	22:33	0:0	4	1
op	22:34	0:0	4	]
op	22:35	0:0	4	.
water	22:36	0:0	4	revents
stmts	23:4	37:4	3	
water	23:4	0:0	4	{
decl	24:8	24:36	4	struct dvb_frontend_event	ev
if	25:8	35:8	4	(ioctl (d -> frontend ,FE_GET_EVENT ,& ev ) < 0)
cond	25:12	25:53	5	ioctl (d -> frontend ,FE_GET_EVENT ,& ev ) < 0
call	25:12	25:49	6	ioctl
arg	25:19	25:30	7	d->frontend
water	25:19	0:0	8	d
op	25:20	0:0	8	->
water	25:22	0:0	8	frontend
arg	25:32	25:44	7	FE_GET_EVENT
water	25:32	0:0	8	FE_GET_EVENT
arg	25:46	25:49	7	&ev
op	25:46	0:0	8	&
water	25:47	0:0	8	ev
op	25:51	0:0	6	<
water	25:53	0:0	6	0
stmts	26:8	35:8	5	
water	26:8	0:0	6	{
if	27:12	31:12	6	(errno == EOVERFLOW)
cond	27:16	27:25	7	errno == EOVERFLOW
water	27:16	0:0	8	errno
op	27:22	0:0	8	==
water	27:25	0:0	8	EOVERFLOW
stmts	28:12	31:12	7	
water	28:12	0:0	8	{
call	29:16	29:69	8	msg_Err
arg	29:25	29:31	9	d->obj
water	29:25	0:0	10	d
op	29:26	0:0	10	->
water	29:28	0:0	10	obj
arg	29:33	29:69	9	"cannot dequeue events fast enough!"
water	29:33	0:0	10	"cannot dequeue events fast enough!"
water	29:70	0:0	8	;
return	30:16	30:25	8	-1
op	30:23	0:0	9	-
water	30:24	0:0	9	1
water	31:12	0:0	8	}
call	32:12	33:42	6	msg_Err
arg	32:21	32:27	7	d->obj
water	32:21	0:0	8	d
op	32:22	0:0	8	->
water	32:24	0:0	8	obj
arg	32:29	32:64	7	"cannot dequeue frontend event: %s"
water	32:29	0:0	8	"cannot dequeue frontend event: %s"
arg	33:21	33:42	7	vlc_strerror_c(errno)
call	33:21	33:41	8	vlc_strerror_c
arg	33:36	33:41	9	errno
water	33:36	0:0	10	errno
water	33:43	0:0	6	;
return	34:12	34:20	6	0
water	34:19	0:0	7	0
water	35:8	0:0	6	}
call	36:8	36:71	4	msg_Dbg
arg	36:17	36:23	5	d->obj
water	36:17	0:0	6	d
op	36:18	0:0	6	->
water	36:20	0:0	6	obj
arg	36:25	36:50	5	"frontend status: 0x%02X"
water	36:25	0:0	6	"frontend status: 0x%02X"
arg	36:52	36:71	5	(unsigned)ev.status
water	36:52	0:0	6	(
water	36:53	0:0	6	unsigned
water	36:61	0:0	6	)
water	36:62	0:0	6	ev
op	36:64	0:0	6	.
water	36:65	0:0	6	status
water	36:72	0:0	4	;
water	37:4	0:0	4	}
if	38:4	52:4	2	(ufd [ 0 ] . revents)
cond	38:8	38:15	3	ufd [ 0 ] . revents
water	38:8	0:0	4	ufd
op	38:11	0:0	4	[
water	38:12	0:0	4	0
op	38:13	0:0	4	]
op	38:14	0:0	4	.
water	38:15	0:0	4	revents
stmts	39:4	52:4	3	
water	39:4	0:0	4	{
decl	40:8	40:47	4	ssize_t	val
op	40:20	0:0	4	=
call	40:22	40:46	5	read
arg	40:28	40:36	6	d->demux
water	40:28	0:0	7	d
op	40:29	0:0	7	->
water	40:31	0:0	7	demux
arg	40:38	40:41	6	buf
water	40:38	0:0	7	buf
arg	40:43	40:46	6	len
water	40:43	0:0	7	len
if	41:8	50:8	4	(val == - 1 && ( errno != EAGAIN && errno != EINTR ))
cond	41:12	41:59	5	val == - 1 && ( errno != EAGAIN && errno != EINTR )
water	41:12	0:0	6	val
op	41:16	0:0	6	==
op	41:19	0:0	6	-
water	41:20	0:0	6	1
op	41:22	0:0	6	&&
water	41:25	0:0	6	(
water	41:26	0:0	6	errno
op	41:32	0:0	6	!=
water	41:35	0:0	6	EAGAIN
op	41:42	0:0	6	&&
water	41:45	0:0	6	errno
op	41:51	0:0	6	!=
water	41:54	0:0	6	EINTR
water	41:59	0:0	6	)
stmts	42:8	50:8	5	
water	42:8	0:0	6	{
if	43:12	47:12	6	(errno == EOVERFLOW)
cond	43:16	43:25	7	errno == EOVERFLOW
water	43:16	0:0	8	errno
op	43:22	0:0	8	==
water	43:25	0:0	8	EOVERFLOW
stmts	44:12	47:12	7	
water	44:12	0:0	8	{
call	45:16	45:65	8	msg_Err
arg	45:25	45:31	9	d->obj
water	45:25	0:0	10	d
op	45:26	0:0	10	->
water	45:28	0:0	10	obj
arg	45:33	45:65	9	"cannot demux data fast enough!"
water	45:33	0:0	10	"cannot demux data fast enough!"
water	45:66	0:0	8	;
return	46:16	46:25	8	-1
op	46:23	0:0	9	-
water	46:24	0:0	9	1
water	47:12	0:0	8	}
call	48:12	48:70	6	msg_Err
arg	48:21	48:27	7	d->obj
water	48:21	0:0	8	d
op	48:22	0:0	8	->
water	48:24	0:0	8	obj
arg	48:29	48:47	7	"cannot demux: %s"
water	48:29	0:0	8	"cannot demux: %s"
arg	48:49	48:70	7	vlc_strerror_c(errno)
call	48:49	48:69	8	vlc_strerror_c
arg	48:64	48:69	9	errno
water	48:64	0:0	10	errno
water	48:71	0:0	6	;
return	49:12	49:20	6	0
water	49:19	0:0	7	0
water	50:8	0:0	6	}
return	51:8	51:18	4	val
water	51:15	0:0	5	val
water	52:4	0:0	4	}
return	53:4	53:13	2	-1
op	53:11	0:0	3	-
water	53:12	0:0	3	1
