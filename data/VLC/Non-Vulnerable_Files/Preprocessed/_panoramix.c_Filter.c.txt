func	2:0	57:0	0	static int	Filter
params	2:17	0:0	1	
param	2:19	2:47	2	video_splitter_t *	p_splitter
param	2:49	2:68	2	picture_t *	pp_dst[]
param	2:70	2:87	2	picture_t *	p_src
stmnts	0:0	56:22	1	
decl	4:4	4:51	2	video_splitter_sys_t	*p_sys
op	4:32	0:0	2	=
water	4:34	0:0	2	p_splitter
op	4:44	0:0	2	->
water	4:46	0:0	2	p_sys
if	5:4	9:4	2	(video_splitter_NewPicture (p_splitter ,pp_dst ))
cond	5:8	5:54	3	video_splitter_NewPicture (p_splitter ,pp_dst )
call	5:8	5:54	4	video_splitter_NewPicture
arg	5:35	5:45	5	p_splitter
water	5:35	0:0	6	p_splitter
arg	5:47	5:54	5	pp_dst
water	5:47	0:0	6	pp_dst
stmts	6:4	9:4	3	
water	6:4	0:0	4	{
call	7:8	7:31	4	picture_Release
arg	7:25	7:31	5	p_src
water	7:25	0:0	6	p_src
water	7:32	0:0	4	;
return	8:8	8:27	4	VLC_EGENERIC
water	8:15	0:0	5	VLC_EGENERIC
water	9:4	0:0	4	}
for	10:4	54:4	2	( int y = 0 ;y < p_sys -> i_row;y ++)
forinit	0:0	10:18	3	 int y = 0 ;
decl	10:9	10:18	4	int	y
op	10:15	0:0	4	=
water	10:17	0:0	4	0
cond	10:20	10:31	3	y < p_sys -> i_row
water	10:20	0:0	4	y
op	10:22	0:0	4	<
water	10:24	0:0	4	p_sys
op	10:29	0:0	4	->
water	10:31	0:0	4	i_row
forexpr	10:38	10:39	3	y ++
water	10:38	0:0	4	y
op	10:39	0:0	4	++
stmts	11:4	54:4	3	
water	11:4	0:0	4	{
for	12:8	53:8	4	( int x = 0 ;x < p_sys -> i_col;x ++)
forinit	0:0	12:22	5	 int x = 0 ;
decl	12:13	12:22	6	int	x
op	12:19	0:0	6	=
water	12:21	0:0	6	0
cond	12:24	12:35	5	x < p_sys -> i_col
water	12:24	0:0	6	x
op	12:26	0:0	6	<
water	12:28	0:0	6	p_sys
op	12:33	0:0	6	->
water	12:35	0:0	6	i_col
forexpr	12:42	12:43	5	x ++
water	12:42	0:0	6	x
op	12:43	0:0	6	++
stmts	13:8	53:8	5	
water	13:8	0:0	6	{
decl	14:12	14:72	6	const panoramix_output_t	*p_output
op	14:47	0:0	6	=
op	14:49	0:0	6	&
water	14:50	0:0	6	p_sys
op	14:55	0:0	6	->
water	14:57	0:0	6	pp_output
op	14:66	0:0	6	[
water	14:67	0:0	6	x
op	14:68	0:0	6	]
op	14:69	0:0	6	[
water	14:70	0:0	6	y
op	14:71	0:0	6	]
if	15:12	16:24	6	(! p_output -> b_active)
cond	15:16	15:27	7	! p_output -> b_active
op	15:16	0:0	8	!
water	15:17	0:0	8	p_output
op	15:25	0:0	8	->
water	15:27	0:0	8	b_active
stmts	16:16	16:24	7	
continue	16:16	16:24	8	
decl	18:12	18:57	6	picture_t	*p_dst
op	18:29	0:0	6	=
water	18:31	0:0	6	pp_dst
op	18:37	0:0	6	[
water	18:38	0:0	6	p_output
op	18:46	0:0	6	->
water	18:48	0:0	6	i_output
op	18:56	0:0	6	]
call	20:12	20:49	6	picture_CopyProperties
arg	20:36	20:41	7	p_dst
water	20:36	0:0	8	p_dst
arg	20:43	20:49	7	p_src
water	20:43	0:0	8	p_src
water	20:50	0:0	6	;
for	22:12	52:12	6	( int i_plane = 0 ;i_plane < p_src -> i_planes;i_plane ++)
forinit	0:0	22:32	7	 int i_plane = 0 ;
decl	22:17	22:32	8	int	i_plane
op	22:29	0:0	8	=
water	22:31	0:0	8	0
cond	22:34	22:51	7	i_plane < p_src -> i_planes
water	22:34	0:0	8	i_plane
op	22:42	0:0	8	<
water	22:44	0:0	8	p_src
op	22:49	0:0	8	->
water	22:51	0:0	8	i_planes
forexpr	22:61	22:68	7	i_plane ++
water	22:61	0:0	8	i_plane
op	22:68	0:0	8	++
stmts	23:12	52:12	7	
water	23:12	0:0	8	{
decl	24:16	24:70	8	const int	i_div_w
op	24:34	0:0	8	=
water	24:36	0:0	8	p_sys
op	24:41	0:0	8	->
water	24:43	0:0	8	p_chroma
op	24:51	0:0	8	->
water	24:53	0:0	8	pi_div_w
op	24:61	0:0	8	[
water	24:62	0:0	8	i_plane
op	24:69	0:0	8	]
decl	25:16	25:70	8	const int	i_div_h
op	25:34	0:0	8	=
water	25:36	0:0	8	p_sys
op	25:41	0:0	8	->
water	25:43	0:0	8	p_chroma
op	25:51	0:0	8	->
water	25:53	0:0	8	pi_div_h
op	25:61	0:0	8	[
water	25:62	0:0	8	i_plane
op	25:69	0:0	8	]
if	26:16	27:28	8	(! i_div_w || ! i_div_h)
cond	26:20	26:33	9	! i_div_w || ! i_div_h
op	26:20	0:0	10	!
water	26:21	0:0	10	i_div_w
op	26:29	0:0	10	||
op	26:32	0:0	10	!
water	26:33	0:0	10	i_div_h
stmts	27:20	27:28	9	
continue	27:20	27:28	10	
decl	28:16	28:58	8	const plane_t	*p_srcp
op	28:38	0:0	8	=
op	28:40	0:0	8	&
water	28:41	0:0	8	p_src
op	28:46	0:0	8	->
water	28:48	0:0	8	p
op	28:49	0:0	8	[
water	28:50	0:0	8	i_plane
op	28:57	0:0	8	]
decl	29:16	29:58	8	const plane_t	*p_dstp
op	29:38	0:0	8	=
op	29:40	0:0	8	&
water	29:41	0:0	8	p_dst
op	29:46	0:0	8	->
water	29:48	0:0	8	p
op	29:49	0:0	8	[
water	29:50	0:0	8	i_plane
op	29:57	0:0	8	]
decl	31:16	31:41	8	panoramix_filter_t	filter
water	32:16	0:0	8	filter
op	32:22	0:0	8	.
water	32:23	0:0	8	black
op	32:28	0:0	8	.
water	32:29	0:0	8	i_right
op	32:38	0:0	8	=
water	32:40	0:0	8	p_output
op	32:48	0:0	8	->
water	32:50	0:0	8	filter
op	32:56	0:0	8	.
water	32:57	0:0	8	black
op	32:62	0:0	8	.
water	32:63	0:0	8	i_right
op	32:71	0:0	8	/
water	32:73	0:0	8	i_div_w
water	32:80	0:0	8	;
water	33:16	0:0	8	filter
op	33:22	0:0	8	.
water	33:23	0:0	8	black
op	33:28	0:0	8	.
water	33:29	0:0	8	i_left
op	33:38	0:0	8	=
water	33:40	0:0	8	p_output
op	33:48	0:0	8	->
water	33:50	0:0	8	filter
op	33:56	0:0	8	.
water	33:57	0:0	8	black
op	33:62	0:0	8	.
water	33:63	0:0	8	i_left
op	33:70	0:0	8	/
water	33:72	0:0	8	i_div_w
water	33:79	0:0	8	;
water	34:16	0:0	8	filter
op	34:22	0:0	8	.
water	34:23	0:0	8	black
op	34:28	0:0	8	.
water	34:29	0:0	8	i_top
op	34:38	0:0	8	=
water	34:40	0:0	8	p_output
op	34:48	0:0	8	->
water	34:50	0:0	8	filter
op	34:56	0:0	8	.
water	34:57	0:0	8	black
op	34:62	0:0	8	.
water	34:63	0:0	8	i_top
op	34:69	0:0	8	/
water	34:71	0:0	8	i_div_h
water	34:78	0:0	8	;
water	35:16	0:0	8	filter
op	35:22	0:0	8	.
water	35:23	0:0	8	black
op	35:28	0:0	8	.
water	35:29	0:0	8	i_bottom
op	35:38	0:0	8	=
water	35:40	0:0	8	p_output
op	35:48	0:0	8	->
water	35:50	0:0	8	filter
op	35:56	0:0	8	.
water	35:57	0:0	8	black
op	35:62	0:0	8	.
water	35:63	0:0	8	i_bottom
op	35:72	0:0	8	/
water	35:74	0:0	8	i_div_h
water	35:81	0:0	8	;
water	36:16	0:0	8	filter
op	36:22	0:0	8	.
water	36:23	0:0	8	attenuate
op	36:32	0:0	8	.
water	36:33	0:0	8	i_right
op	36:42	0:0	8	=
water	36:44	0:0	8	p_output
op	36:52	0:0	8	->
water	36:54	0:0	8	filter
op	36:60	0:0	8	.
water	36:61	0:0	8	attenuate
op	36:70	0:0	8	.
water	36:71	0:0	8	i_right
op	36:79	0:0	8	/
water	36:81	0:0	8	i_div_w
water	36:88	0:0	8	;
water	37:16	0:0	8	filter
op	37:22	0:0	8	.
water	37:23	0:0	8	attenuate
op	37:32	0:0	8	.
water	37:33	0:0	8	i_left
op	37:42	0:0	8	=
water	37:44	0:0	8	p_output
op	37:52	0:0	8	->
water	37:54	0:0	8	filter
op	37:60	0:0	8	.
water	37:61	0:0	8	attenuate
op	37:70	0:0	8	.
water	37:71	0:0	8	i_left
op	37:78	0:0	8	/
water	37:80	0:0	8	i_div_w
water	37:87	0:0	8	;
water	38:16	0:0	8	filter
op	38:22	0:0	8	.
water	38:23	0:0	8	attenuate
op	38:32	0:0	8	.
water	38:33	0:0	8	i_top
op	38:42	0:0	8	=
water	38:44	0:0	8	p_output
op	38:52	0:0	8	->
water	38:54	0:0	8	filter
op	38:60	0:0	8	.
water	38:61	0:0	8	attenuate
op	38:70	0:0	8	.
water	38:71	0:0	8	i_top
op	38:77	0:0	8	/
water	38:79	0:0	8	i_div_h
water	38:86	0:0	8	;
water	39:16	0:0	8	filter
op	39:22	0:0	8	.
water	39:23	0:0	8	attenuate
op	39:32	0:0	8	.
water	39:33	0:0	8	i_bottom
op	39:42	0:0	8	=
water	39:44	0:0	8	p_output
op	39:52	0:0	8	->
water	39:54	0:0	8	filter
op	39:60	0:0	8	.
water	39:61	0:0	8	attenuate
op	39:70	0:0	8	.
water	39:71	0:0	8	i_bottom
op	39:80	0:0	8	/
water	39:82	0:0	8	i_div_h
water	39:89	0:0	8	;
decl	41:16	41:57	8	const int	i_x
op	41:30	0:0	8	=
water	41:32	0:0	8	p_output
op	41:40	0:0	8	->
water	41:42	0:0	8	i_src_x
op	41:49	0:0	8	/
water	41:50	0:0	8	i_div_w
decl	42:16	42:57	8	const int	i_y
op	42:30	0:0	8	=
water	42:32	0:0	8	p_output
op	42:40	0:0	8	->
water	42:42	0:0	8	i_src_y
op	42:49	0:0	8	/
water	42:50	0:0	8	i_div_h
call	43:16	43:50	8	assert
arg	43:24	43:50	9	p_sys->p_chroma->b_planar
water	43:24	0:0	10	p_sys
op	43:29	0:0	10	->
water	43:31	0:0	10	p_chroma
op	43:39	0:0	10	->
water	43:41	0:0	10	b_planar
water	43:51	0:0	8	;
call	44:16	51:54	8	FilterPlanar
arg	44:30	44:46	9	p_dstp->p_pixels
water	44:30	0:0	10	p_dstp
op	44:36	0:0	10	->
water	44:38	0:0	10	p_pixels
arg	44:48	44:63	9	p_dstp->i_pitch
water	44:48	0:0	10	p_dstp
op	44:54	0:0	10	->
water	44:56	0:0	10	i_pitch
arg	45:30	45:100	9	&p_srcp->p_pixels[i_y*p_srcp->i_pitch+i_x*p_srcp->i_pixel_pitch]
op	45:30	0:0	10	&
water	45:31	0:0	10	p_srcp
op	45:37	0:0	10	->
water	45:39	0:0	10	p_pixels
op	45:47	0:0	10	[
water	45:48	0:0	10	i_y
op	45:52	0:0	10	*
water	45:54	0:0	10	p_srcp
op	45:60	0:0	10	->
water	45:62	0:0	10	i_pitch
op	45:70	0:0	10	+
water	45:72	0:0	10	i_x
op	45:76	0:0	10	*
water	45:78	0:0	10	p_srcp
op	45:84	0:0	10	->
water	45:86	0:0	10	i_pixel_pitch
op	45:99	0:0	10	]
arg	45:102	45:117	9	p_srcp->i_pitch
water	45:102	0:0	10	p_srcp
op	45:108	0:0	10	->
water	45:110	0:0	10	i_pitch
arg	46:30	46:59	9	p_output->i_src_width/i_div_w
water	46:30	0:0	10	p_output
op	46:38	0:0	10	->
water	46:40	0:0	10	i_src_width
op	46:51	0:0	10	/
water	46:52	0:0	10	i_div_w
arg	46:61	46:91	9	p_output->i_src_height/i_div_h
water	46:61	0:0	10	p_output
op	46:69	0:0	10	->
water	46:71	0:0	10	i_src_height
op	46:83	0:0	10	/
water	46:84	0:0	10	i_div_h
arg	47:30	47:64	9	p_sys->p_chroma->pi_black[i_plane]
water	47:30	0:0	10	p_sys
op	47:35	0:0	10	->
water	47:37	0:0	10	p_chroma
op	47:45	0:0	10	->
water	47:47	0:0	10	pi_black
op	47:55	0:0	10	[
water	47:56	0:0	10	i_plane
op	47:63	0:0	10	]
arg	48:30	48:37	9	&filter
op	48:30	0:0	10	&
water	48:31	0:0	10	filter
arg	49:30	49:51	9	p_sys->p_lut[i_plane]
water	49:30	0:0	10	p_sys
op	49:35	0:0	10	->
water	49:37	0:0	10	p_lut
op	49:42	0:0	10	[
water	49:43	0:0	10	i_plane
op	49:50	0:0	10	]
arg	50:30	50:53	9	p_sys->lambdav[i_plane]
water	50:30	0:0	10	p_sys
op	50:35	0:0	10	->
water	50:37	0:0	10	lambdav
op	50:44	0:0	10	[
water	50:45	0:0	10	i_plane
op	50:52	0:0	10	]
arg	51:30	51:54	9	p_sys->lambdah[i_plane]
water	51:30	0:0	10	p_sys
op	51:35	0:0	10	->
water	51:37	0:0	10	lambdah
op	51:44	0:0	10	[
water	51:45	0:0	10	i_plane
op	51:52	0:0	10	]
water	51:55	0:0	8	;
water	52:12	0:0	8	}
water	53:8	0:0	6	}
water	54:4	0:0	4	}
call	55:4	55:27	2	picture_Release
arg	55:21	55:27	3	p_src
water	55:21	0:0	4	p_src
water	55:28	0:0	2	;
return	56:4	56:22	2	VLC_SUCCESS
water	56:11	0:0	3	VLC_SUCCESS
