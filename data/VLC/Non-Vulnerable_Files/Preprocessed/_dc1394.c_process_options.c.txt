func	2:0	251:0	0	static int	process_options
params	2:26	0:0	1	
param	2:28	2:45	2	demux_t *	p_demux
stmnts	0:0	250:22	1	
decl	4:4	4:39	2	demux_sys_t	*p_sys
op	4:23	0:0	2	=
water	4:25	0:0	2	p_demux
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:17	2	char	*psz_dup
decl	6:4	6:20	2	char	*psz_parser
decl	7:4	7:22	2	char	*token
op	7:16	0:0	2	=
water	7:18	0:0	2	NULL
decl	8:4	8:22	2	char	*state
op	8:16	0:0	2	=
water	8:18	0:0	2	NULL
decl	9:4	9:30	2	const char	*in_size
op	9:24	0:0	2	=
water	9:26	0:0	2	NULL
decl	10:4	10:29	2	const char	*in_fmt
op	10:23	0:0	2	=
water	10:25	0:0	2	NULL
decl	11:4	11:16	2	float	rate_f
water	12:4	0:0	2	psz_dup
op	12:12	0:0	2	=
call	12:14	12:44	2	strdup
arg	12:22	12:44	3	p_demux->psz_location
water	12:22	0:0	4	p_demux
op	12:29	0:0	4	->
water	12:31	0:0	4	psz_location
water	12:45	0:0	2	;
water	13:4	0:0	2	psz_parser
op	13:15	0:0	2	=
water	13:17	0:0	2	psz_dup
water	13:24	0:0	2	;
for	14:4	213:4	2	(token =strtok_r (psz_parser ,":" ,& state ) ;token;token =strtok_r (NULL ,":" ,& state ))
forinit	14:9	14:49	3	token =strtok_r (psz_parser ,":" ,& state ) ;
water	14:9	0:0	4	token
op	14:15	0:0	4	=
call	14:17	14:48	4	strtok_r
arg	14:27	14:37	5	psz_parser
water	14:27	0:0	6	psz_parser
arg	14:38	14:41	5	":"
water	14:38	0:0	6	":"
arg	14:42	14:48	5	&state
op	14:42	0:0	6	&
water	14:43	0:0	6	state
water	14:49	0:0	4	;
cond	14:51	14:51	3	token
water	14:51	0:0	4	token
forexpr	15:9	15:45	3	token =strtok_r (NULL ,":" ,& state )
water	15:9	0:0	4	token
op	15:15	0:0	4	=
call	15:17	15:45	4	strtok_r
arg	15:27	15:31	5	NULL
water	15:27	0:0	6	NULL
arg	15:33	15:36	5	":"
water	15:33	0:0	6	":"
arg	15:38	15:45	5	&state
op	15:38	0:0	6	&
water	15:39	0:0	6	state
stmts	16:4	213:4	3	
water	16:4	0:0	4	{
if	17:8	60:8	4	(strncmp (token ,"size=" ,strlen ("size=" ) ) == 0)
cond	17:12	17:58	5	strncmp (token ,"size=" ,strlen ("size=" ) ) == 0
call	17:12	17:53	6	strncmp
arg	17:21	17:26	7	token
water	17:21	0:0	8	token
arg	17:28	17:35	7	"size="
water	17:28	0:0	8	"size="
arg	17:37	17:53	7	strlen("size=")
call	17:37	17:51	8	strlen
arg	17:44	17:51	9	"size="
water	17:44	0:0	10	"size="
op	17:55	0:0	6	==
water	17:58	0:0	6	0
stmts	18:8	60:8	5	
water	18:8	0:0	6	{
water	19:12	0:0	6	token
op	19:18	0:0	6	+=
call	19:21	19:35	6	strlen
arg	19:28	19:35	7	"size="
water	19:28	0:0	8	"size="
water	19:36	0:0	6	;
if	20:12	36:12	6	(strncmp (token ,"160x120" ,7 ) == 0)
cond	20:16	20:50	7	strncmp (token ,"160x120" ,7 ) == 0
call	20:16	20:45	8	strncmp
arg	20:25	20:30	9	token
water	20:25	0:0	10	token
arg	20:32	20:41	9	"160x120"
water	20:32	0:0	10	"160x120"
arg	20:43	20:45	9	7
water	20:43	0:0	10	7
op	20:47	0:0	8	==
water	20:50	0:0	8	0
stmts	21:12	36:12	7	
water	21:12	0:0	8	{
call	25:16	28:79	8	msg_Err
arg	25:25	25:32	9	p_demux
water	25:25	0:0	10	p_demux
arg	26:20	28:79	9	"video size of 160x120 is actually disabled for lack of""chroma support. It will relased ASAP, until then try ""an higher size (320x240 and 640x480 are fully supported)"
water	26:20	0:0	10	"video size of 160x120 is actually disabled for lack of"
water	27:20	0:0	10	"chroma support. It will relased ASAP, until then try "
water	28:20	0:0	10	"an higher size (320x240 and 640x480 are fully supported)"
water	28:80	0:0	8	;
call	29:16	29:28	8	free
arg	29:21	29:28	9	psz_dup
water	29:21	0:0	10	psz_dup
water	29:29	0:0	8	;
return	30:16	30:35	8	VLC_EGENERIC
water	30:23	0:0	9	VLC_EGENERIC
water	32:16	0:0	8	in_size
op	32:24	0:0	8	=
water	32:26	0:0	8	"160x120"
water	32:35	0:0	8	;
water	33:16	0:0	8	p_sys
op	33:21	0:0	8	->
water	33:23	0:0	8	width
op	33:29	0:0	8	=
water	33:31	0:0	8	160
water	33:34	0:0	8	;
water	34:16	0:0	8	p_sys
op	34:21	0:0	8	->
water	34:23	0:0	8	height
op	34:30	0:0	8	=
water	34:32	0:0	8	120
water	34:35	0:0	8	;
water	36:12	0:0	8	}
else	37:12	42:12	6
stmts	37:17	42:12	7	
if	37:17	42:12	8	(strncmp (token ,"320x240" ,7 ) == 0)
cond	37:21	37:55	9	strncmp (token ,"320x240" ,7 ) == 0
call	37:21	37:50	10	strncmp
arg	37:30	37:35	11	token
water	37:30	0:0	12	token
arg	37:37	37:46	11	"320x240"
water	37:37	0:0	12	"320x240"
arg	37:48	37:50	11	7
water	37:48	0:0	12	7
op	37:52	0:0	10	==
water	37:55	0:0	10	0
stmts	38:12	42:12	9	
water	38:12	0:0	10	{
water	39:16	0:0	10	in_size
op	39:24	0:0	10	=
water	39:26	0:0	10	"320x240"
water	39:35	0:0	10	;
water	40:16	0:0	10	p_sys
op	40:21	0:0	10	->
water	40:23	0:0	10	width
op	40:29	0:0	10	=
water	40:31	0:0	10	320
water	40:34	0:0	10	;
water	41:16	0:0	10	p_sys
op	41:21	0:0	10	->
water	41:23	0:0	10	height
op	41:30	0:0	10	=
water	41:32	0:0	10	240
water	41:35	0:0	10	;
water	42:12	0:0	10	}
else	43:12	48:12	6
stmts	43:17	48:12	7	
if	43:17	48:12	8	(strncmp (token ,"640x480" ,7 ) == 0)
cond	43:21	43:55	9	strncmp (token ,"640x480" ,7 ) == 0
call	43:21	43:50	10	strncmp
arg	43:30	43:35	11	token
water	43:30	0:0	12	token
arg	43:37	43:46	11	"640x480"
water	43:37	0:0	12	"640x480"
arg	43:48	43:50	11	7
water	43:48	0:0	12	7
op	43:52	0:0	10	==
water	43:55	0:0	10	0
stmts	44:12	48:12	9	
water	44:12	0:0	10	{
water	45:16	0:0	10	in_size
op	45:24	0:0	10	=
water	45:26	0:0	10	"640x480"
water	45:35	0:0	10	;
water	46:16	0:0	10	p_sys
op	46:21	0:0	10	->
water	46:23	0:0	10	width
op	46:29	0:0	10	=
water	46:31	0:0	10	640
water	46:34	0:0	10	;
water	47:16	0:0	10	p_sys
op	47:21	0:0	10	->
water	47:23	0:0	10	height
op	47:30	0:0	10	=
water	47:32	0:0	10	480
water	47:35	0:0	10	;
water	48:12	0:0	10	}
else	49:12	58:12	6
stmts	50:12	58:12	7	
water	50:12	0:0	8	{
call	51:16	55:26	8	msg_Err
arg	51:25	51:32	9	p_demux
water	51:25	0:0	10	p_demux
arg	52:20	54:72	9	"This program currently suppots frame sizes of"" 160x120, 320x240, and 640x480. ""Please specify one of them. You have specified %s."
water	52:20	0:0	10	"This program currently suppots frame sizes of"
water	53:20	0:0	10	" 160x120, 320x240, and 640x480. "
water	54:20	0:0	10	"Please specify one of them. You have specified %s."
arg	55:20	55:26	9	token
water	55:20	0:0	10	token
water	55:27	0:0	8	;
call	56:16	56:28	8	free
arg	56:21	56:28	9	psz_dup
water	56:21	0:0	10	psz_dup
water	56:29	0:0	8	;
return	57:16	57:35	8	VLC_EGENERIC
water	57:23	0:0	9	VLC_EGENERIC
water	58:12	0:0	8	}
call	59:12	59:64	6	msg_Dbg
arg	59:21	59:28	7	p_demux
water	59:21	0:0	8	p_demux
arg	59:30	59:57	7	"Requested video size : %s"
water	59:30	0:0	8	"Requested video size : %s"
arg	59:58	59:64	7	token
water	59:58	0:0	8	token
water	59:65	0:0	6	;
water	60:8	0:0	6	}
if	61:8	95:8	4	(strncmp (token ,"format=" ,strlen ("format=" ) ) == 0)
cond	61:12	61:62	5	strncmp (token ,"format=" ,strlen ("format=" ) ) == 0
call	61:12	61:57	6	strncmp
arg	61:21	61:26	7	token
water	61:21	0:0	8	token
arg	61:28	61:37	7	"format="
water	61:28	0:0	8	"format="
arg	61:39	61:57	7	strlen("format=")
call	61:39	61:55	8	strlen
arg	61:46	61:55	9	"format="
water	61:46	0:0	10	"format="
op	61:59	0:0	6	==
water	61:62	0:0	6	0
stmts	62:8	95:8	5	
water	62:8	0:0	6	{
water	63:12	0:0	6	token
op	63:18	0:0	6	+=
call	63:21	63:37	6	strlen
arg	63:28	63:37	7	"format="
water	63:28	0:0	8	"format="
water	63:38	0:0	6	;
if	64:12	67:12	6	(strncmp (token ,"YUV411" ,6 ) == 0)
cond	64:16	64:49	7	strncmp (token ,"YUV411" ,6 ) == 0
call	64:16	64:44	8	strncmp
arg	64:25	64:30	9	token
water	64:25	0:0	10	token
arg	64:32	64:40	9	"YUV411"
water	64:32	0:0	10	"YUV411"
arg	64:42	64:44	9	6
water	64:42	0:0	10	6
op	64:46	0:0	8	==
water	64:49	0:0	8	0
stmts	65:12	67:12	7	
water	65:12	0:0	8	{
water	66:16	0:0	8	in_fmt
op	66:23	0:0	8	=
water	66:25	0:0	8	"YUV411"
water	66:33	0:0	8	;
water	67:12	0:0	8	}
else	68:12	71:12	6
stmts	68:17	71:12	7	
if	68:17	71:12	8	(strncmp (token ,"YUV422" ,6 ) == 0)
cond	68:21	68:54	9	strncmp (token ,"YUV422" ,6 ) == 0
call	68:21	68:49	10	strncmp
arg	68:30	68:35	11	token
water	68:30	0:0	12	token
arg	68:37	68:45	11	"YUV422"
water	68:37	0:0	12	"YUV422"
arg	68:47	68:49	11	6
water	68:47	0:0	12	6
op	68:51	0:0	10	==
water	68:54	0:0	10	0
stmts	69:12	71:12	9	
water	69:12	0:0	10	{
water	70:16	0:0	10	in_fmt
op	70:23	0:0	10	=
water	70:25	0:0	10	"YUV422"
water	70:33	0:0	10	;
water	71:12	0:0	10	}
else	72:12	75:12	6
stmts	72:17	75:12	7	
if	72:17	75:12	8	(strncmp (token ,"YUV444" ,6 ) == 0)
cond	72:21	72:54	9	strncmp (token ,"YUV444" ,6 ) == 0
call	72:21	72:49	10	strncmp
arg	72:30	72:35	11	token
water	72:30	0:0	12	token
arg	72:37	72:45	11	"YUV444"
water	72:37	0:0	12	"YUV444"
arg	72:47	72:49	11	6
water	72:47	0:0	12	6
op	72:51	0:0	10	==
water	72:54	0:0	10	0
stmts	73:12	75:12	9	
water	73:12	0:0	10	{
water	74:16	0:0	10	in_fmt
op	74:23	0:0	10	=
water	74:25	0:0	10	"YUV444"
water	74:33	0:0	10	;
water	75:12	0:0	10	}
else	76:12	79:12	6
stmts	76:17	79:12	7	
if	76:17	79:12	8	(strncmp (token ,"RGB8" ,4 ) == 0)
cond	76:21	76:52	9	strncmp (token ,"RGB8" ,4 ) == 0
call	76:21	76:47	10	strncmp
arg	76:30	76:35	11	token
water	76:30	0:0	12	token
arg	76:37	76:43	11	"RGB8"
water	76:37	0:0	12	"RGB8"
arg	76:45	76:47	11	4
water	76:45	0:0	12	4
op	76:49	0:0	10	==
water	76:52	0:0	10	0
stmts	77:12	79:12	9	
water	77:12	0:0	10	{
water	78:16	0:0	10	in_fmt
op	78:23	0:0	10	=
water	78:25	0:0	10	"RGB8"
water	78:31	0:0	10	;
water	79:12	0:0	10	}
else	80:12	83:12	6
stmts	80:17	83:12	7	
if	80:17	83:12	8	(strncmp (token ,"MONO8" ,5 ) == 0)
cond	80:21	80:53	9	strncmp (token ,"MONO8" ,5 ) == 0
call	80:21	80:48	10	strncmp
arg	80:30	80:35	11	token
water	80:30	0:0	12	token
arg	80:37	80:44	11	"MONO8"
water	80:37	0:0	12	"MONO8"
arg	80:46	80:48	11	5
water	80:46	0:0	12	5
op	80:50	0:0	10	==
water	80:53	0:0	10	0
stmts	81:12	83:12	9	
water	81:12	0:0	10	{
water	82:16	0:0	10	in_fmt
op	82:23	0:0	10	=
water	82:25	0:0	10	"MONO8"
water	82:32	0:0	10	;
water	83:12	0:0	10	}
else	84:12	87:12	6
stmts	84:17	87:12	7	
if	84:17	87:12	8	(strncmp (token ,"MONO16" ,6 ) == 0)
cond	84:21	84:54	9	strncmp (token ,"MONO16" ,6 ) == 0
call	84:21	84:49	10	strncmp
arg	84:30	84:35	11	token
water	84:30	0:0	12	token
arg	84:37	84:45	11	"MONO16"
water	84:37	0:0	12	"MONO16"
arg	84:47	84:49	11	6
water	84:47	0:0	12	6
op	84:51	0:0	10	==
water	84:54	0:0	10	0
stmts	85:12	87:12	9	
water	85:12	0:0	10	{
water	86:16	0:0	10	in_fmt
op	86:23	0:0	10	=
water	86:25	0:0	10	"MONO16"
water	86:33	0:0	10	;
water	87:12	0:0	10	}
else	88:12	93:12	6
stmts	89:12	93:12	7	
water	89:12	0:0	8	{
call	90:16	90:62	8	msg_Err
arg	90:25	90:32	9	p_demux
water	90:25	0:0	10	p_demux
arg	90:34	90:54	9	"Invalid format %s."
water	90:34	0:0	10	"Invalid format %s."
arg	90:56	90:62	9	token
water	90:56	0:0	10	token
water	90:63	0:0	8	;
call	91:16	91:28	8	free
arg	91:21	91:28	9	psz_dup
water	91:21	0:0	10	psz_dup
water	91:29	0:0	8	;
return	92:16	92:35	8	VLC_EGENERIC
water	92:23	0:0	9	VLC_EGENERIC
water	93:12	0:0	8	}
call	94:12	94:67	6	msg_Dbg
arg	94:21	94:28	7	p_demux
water	94:21	0:0	8	p_demux
arg	94:30	94:59	7	"Requested video format : %s"
water	94:30	0:0	8	"Requested video format : %s"
arg	94:61	94:67	7	token
water	94:61	0:0	8	token
water	94:68	0:0	6	;
water	95:8	0:0	6	}
else	96:8	123:8	4
stmts	96:13	123:8	5	
if	96:13	123:8	6	(strncmp (token ,"fps=" ,strlen ("fps=" ) ) == 0)
cond	96:17	96:63	7	strncmp (token ,"fps=" ,strlen ("fps=" ) ) == 0
call	96:17	96:58	8	strncmp
arg	96:26	96:31	9	token
water	96:26	0:0	10	token
arg	96:33	96:39	9	"fps="
water	96:33	0:0	10	"fps="
arg	96:41	96:58	9	strlen("fps=")
call	96:41	96:56	10	strlen
arg	96:49	96:56	11	"fps="
water	96:49	0:0	12	"fps="
op	96:60	0:0	8	==
water	96:63	0:0	8	0
stmts	97:8	123:8	7	
water	97:8	0:0	8	{
water	98:12	0:0	8	token
op	98:18	0:0	8	+=
call	98:21	98:34	8	strlen
arg	98:28	98:34	9	"fps="
water	98:28	0:0	10	"fps="
water	98:35	0:0	8	;
call	99:12	99:41	8	sscanf
arg	99:20	99:25	9	token
water	99:20	0:0	10	token
arg	99:27	99:31	9	"%g"
water	99:27	0:0	10	"%g"
arg	99:33	99:41	9	&rate_f
op	99:33	0:0	10	&
water	99:34	0:0	10	rate_f
water	99:42	0:0	8	;
if	100:12	101:58	8	(rate_f == 1 . 875)
cond	100:16	100:28	9	rate_f == 1 . 875
water	100:16	0:0	10	rate_f
op	100:23	0:0	10	==
water	100:26	0:0	10	1
op	100:27	0:0	10	.
water	100:28	0:0	10	875
stmts	101:16	101:58	9	
water	101:16	0:0	10	p_sys
op	101:21	0:0	10	->
water	101:23	0:0	10	frame_rate
op	101:34	0:0	10	=
water	101:36	0:0	10	DC1394_FRAMERATE_1_875
water	101:58	0:0	10	;
else	102:12	103:57	8
stmts	102:17	103:57	9	
if	102:17	103:57	10	(rate_f == 3 . 75)
cond	102:21	102:33	11	rate_f == 3 . 75
water	102:21	0:0	12	rate_f
op	102:28	0:0	12	==
water	102:31	0:0	12	3
op	102:32	0:0	12	.
water	102:33	0:0	12	75
stmts	103:16	103:57	11	
water	103:16	0:0	12	p_sys
op	103:21	0:0	12	->
water	103:23	0:0	12	frame_rate
op	103:34	0:0	12	=
water	103:36	0:0	12	DC1394_FRAMERATE_3_75
water	103:57	0:0	12	;
else	104:12	105:56	8
stmts	104:17	105:56	9	
if	104:17	105:56	10	(rate_f == 7 . 5)
cond	104:21	104:33	11	rate_f == 7 . 5
water	104:21	0:0	12	rate_f
op	104:28	0:0	12	==
water	104:31	0:0	12	7
op	104:32	0:0	12	.
water	104:33	0:0	12	5
stmts	105:16	105:56	11	
water	105:16	0:0	12	p_sys
op	105:21	0:0	12	->
water	105:23	0:0	12	frame_rate
op	105:34	0:0	12	=
water	105:36	0:0	12	DC1394_FRAMERATE_7_5
water	105:56	0:0	12	;
else	106:12	107:55	8
stmts	106:17	107:55	9	
if	106:17	107:55	10	(rate_f == 15)
cond	106:21	106:31	11	rate_f == 15
water	106:21	0:0	12	rate_f
op	106:28	0:0	12	==
water	106:31	0:0	12	15
stmts	107:16	107:55	11	
water	107:16	0:0	12	p_sys
op	107:21	0:0	12	->
water	107:23	0:0	12	frame_rate
op	107:34	0:0	12	=
water	107:36	0:0	12	DC1394_FRAMERATE_15
water	107:55	0:0	12	;
else	108:12	109:55	8
stmts	108:17	109:55	9	
if	108:17	109:55	10	(rate_f == 30)
cond	108:21	108:31	11	rate_f == 30
water	108:21	0:0	12	rate_f
op	108:28	0:0	12	==
water	108:31	0:0	12	30
stmts	109:16	109:55	11	
water	109:16	0:0	12	p_sys
op	109:21	0:0	12	->
water	109:23	0:0	12	frame_rate
op	109:34	0:0	12	=
water	109:36	0:0	12	DC1394_FRAMERATE_30
water	109:55	0:0	12	;
else	110:12	111:55	8
stmts	110:17	111:55	9	
if	110:17	111:55	10	(rate_f == 60)
cond	110:21	110:31	11	rate_f == 60
water	110:21	0:0	12	rate_f
op	110:28	0:0	12	==
water	110:31	0:0	12	60
stmts	111:16	111:55	11	
water	111:16	0:0	12	p_sys
op	111:21	0:0	12	->
water	111:23	0:0	12	frame_rate
op	111:34	0:0	12	=
water	111:36	0:0	12	DC1394_FRAMERATE_60
water	111:55	0:0	12	;
else	112:12	121:12	8
stmts	113:12	121:12	9	
water	113:12	0:0	10	{
call	114:16	118:25	10	msg_Err
arg	114:25	114:33	11	p_demux
water	114:25	0:0	12	p_demux
arg	115:20	117:72	11	"This program supports framerates of"" 1.875, 3.75, 7.5, 15, 30, 60. ""Please specify one of them. You have specified %s."
water	115:20	0:0	12	"This program supports framerates of"
water	116:20	0:0	12	" 1.875, 3.75, 7.5, 15, 30, 60. "
water	117:20	0:0	12	"Please specify one of them. You have specified %s."
arg	118:20	118:25	11	token
water	118:20	0:0	12	token
water	118:26	0:0	10	;
call	119:16	119:28	10	free
arg	119:21	119:28	11	psz_dup
water	119:21	0:0	12	psz_dup
water	119:29	0:0	10	;
return	120:16	120:35	10	VLC_EGENERIC
water	120:23	0:0	11	VLC_EGENERIC
water	121:12	0:0	10	}
call	122:12	122:64	8	msg_Dbg
arg	122:21	122:28	9	p_demux
water	122:21	0:0	10	p_demux
arg	122:30	122:57	9	"Requested frame rate : %s"
water	122:30	0:0	10	"Requested frame rate : %s"
arg	122:58	122:64	9	token
water	122:58	0:0	10	token
water	122:65	0:0	8	;
water	123:8	0:0	8	}
else	124:8	128:8	4
stmts	124:13	128:8	5	
if	124:13	128:8	6	(strncmp (token ,"resetbus" ,strlen ("resetbus" ) ) == 0)
cond	124:17	124:71	7	strncmp (token ,"resetbus" ,strlen ("resetbus" ) ) == 0
call	124:17	124:66	8	strncmp
arg	124:26	124:31	9	token
water	124:26	0:0	10	token
arg	124:33	124:43	9	"resetbus"
water	124:33	0:0	10	"resetbus"
arg	124:45	124:66	9	strlen("resetbus")
call	124:45	124:64	10	strlen
arg	124:53	124:64	11	"resetbus"
water	124:53	0:0	12	"resetbus"
op	124:68	0:0	8	==
water	124:71	0:0	8	0
stmts	125:8	128:8	7	
water	125:8	0:0	8	{
water	126:12	0:0	8	token
op	126:18	0:0	8	+=
call	126:21	126:38	8	strlen
arg	126:28	126:38	9	"resetbus"
water	126:28	0:0	10	"resetbus"
water	126:39	0:0	8	;
water	127:12	0:0	8	p_sys
op	127:17	0:0	8	->
water	127:19	0:0	8	reset_bus
op	127:29	0:0	8	=
water	127:31	0:0	8	1
water	127:32	0:0	8	;
water	128:8	0:0	8	}
else	129:8	142:8	4
stmts	129:13	142:8	5	
if	129:13	142:8	6	(strncmp (token ,"brightness=" ,strlen ("brightness=" ) ) == 0)
cond	129:17	129:77	7	strncmp (token ,"brightness=" ,strlen ("brightness=" ) ) == 0
call	129:17	129:72	8	strncmp
arg	129:26	129:31	9	token
water	129:26	0:0	10	token
arg	129:33	129:46	9	"brightness="
water	129:33	0:0	10	"brightness="
arg	129:48	129:72	9	strlen("brightness=")
call	129:48	129:70	10	strlen
arg	129:56	129:70	11	"brightness="
water	129:56	0:0	12	"brightness="
op	129:74	0:0	8	==
water	129:77	0:0	8	0
stmts	130:8	142:8	7	
water	130:8	0:0	8	{
decl	131:12	131:22	8	int	nr
op	131:19	0:0	8	=
water	131:21	0:0	8	0
water	132:12	0:0	8	token
op	132:18	0:0	8	+=
call	132:21	132:41	8	strlen
arg	132:28	132:41	9	"brightness="
water	132:28	0:0	10	"brightness="
water	132:42	0:0	8	;
water	133:12	0:0	8	nr
op	133:15	0:0	8	=
call	133:17	133:56	8	sscanf
arg	133:25	133:30	9	token
water	133:25	0:0	10	token
arg	133:32	133:36	9	"%u"
water	133:32	0:0	10	"%u"
arg	133:38	133:56	9	&p_sys->brightness
op	133:38	0:0	10	&
water	133:39	0:0	10	p_sys
op	133:44	0:0	10	->
water	133:46	0:0	10	brightness
water	133:57	0:0	8	;
if	134:12	141:12	8	(nr != 1)
cond	134:16	134:22	9	nr != 1
water	134:16	0:0	10	nr
op	134:19	0:0	10	!=
water	134:22	0:0	10	1
stmts	135:12	141:12	9	
water	135:12	0:0	10	{
call	136:16	138:40	10	msg_Err
arg	136:25	136:32	11	p_demux
water	136:25	0:0	12	p_demux
arg	136:34	137:64	11	"Bad brightness value '%s', ""must be an unsigned integer."
water	136:34	0:0	12	"Bad brightness value '%s', "
water	137:34	0:0	12	"must be an unsigned integer."
arg	138:34	138:40	11	token
water	138:34	0:0	12	token
water	138:41	0:0	10	;
call	139:16	139:28	10	free
arg	139:21	139:28	11	psz_dup
water	139:21	0:0	12	psz_dup
water	139:29	0:0	10	;
return	140:16	140:35	10	VLC_EGENERIC
water	140:23	0:0	11	VLC_EGENERIC
water	141:12	0:0	10	}
water	142:8	0:0	8	}
else	143:8	156:8	4
stmts	143:13	156:8	5	
if	143:13	156:8	6	(strncmp (token ,"buffers=" ,strlen ("buffers=" ) ) == 0)
cond	143:17	143:71	7	strncmp (token ,"buffers=" ,strlen ("buffers=" ) ) == 0
call	143:17	143:66	8	strncmp
arg	143:26	143:31	9	token
water	143:26	0:0	10	token
arg	143:33	143:43	9	"buffers="
water	143:33	0:0	10	"buffers="
arg	143:45	143:66	9	strlen("buffers=")
call	143:45	143:64	10	strlen
arg	143:53	143:64	11	"buffers="
water	143:53	0:0	12	"buffers="
op	143:68	0:0	8	==
water	143:71	0:0	8	0
stmts	144:8	156:8	7	
water	144:8	0:0	8	{
decl	145:12	145:22	8	int	nr
op	145:19	0:0	8	=
water	145:21	0:0	8	0
decl	146:12	146:26	8	int	in_buf
op	146:23	0:0	8	=
water	146:25	0:0	8	0
water	147:12	0:0	8	token
op	147:18	0:0	8	+=
call	147:21	147:38	8	strlen
arg	147:28	147:38	9	"buffers="
water	147:28	0:0	10	"buffers="
water	147:39	0:0	8	;
water	148:12	0:0	8	nr
op	148:15	0:0	8	=
call	148:17	148:45	8	sscanf
arg	148:25	148:30	9	token
water	148:25	0:0	10	token
arg	148:32	148:36	9	"%d"
water	148:32	0:0	10	"%d"
arg	148:38	148:45	9	&in_buf
op	148:38	0:0	10	&
water	148:39	0:0	10	in_buf
water	148:46	0:0	8	;
if	149:12	154:12	8	(nr != 1 || in_buf < 1)
cond	149:16	149:36	9	nr != 1 || in_buf < 1
water	149:16	0:0	10	nr
op	149:19	0:0	10	!=
water	149:22	0:0	10	1
op	149:24	0:0	10	||
water	149:27	0:0	10	in_buf
op	149:34	0:0	10	<
water	149:36	0:0	10	1
stmts	150:12	154:12	9	
water	150:12	0:0	10	{
call	151:16	151:70	10	msg_Err
arg	151:25	151:32	11	p_demux
water	151:25	0:0	12	p_demux
arg	151:34	151:70	11	"DMA buffers must be 1 or greater."
water	151:34	0:0	12	"DMA buffers must be 1 or greater."
water	151:71	0:0	10	;
call	152:16	152:28	10	free
arg	152:21	152:28	11	psz_dup
water	152:21	0:0	12	psz_dup
water	152:29	0:0	10	;
return	153:16	153:35	10	VLC_EGENERIC
water	153:23	0:0	11	VLC_EGENERIC
water	154:12	0:0	10	}
else	155:12	155:44	8
stmts	155:17	155:44	9	
water	155:17	0:0	10	p_sys
op	155:22	0:0	10	->
water	155:24	0:0	10	dma_buffers
op	155:36	0:0	10	=
water	155:38	0:0	10	in_buf
water	155:44	0:0	10	;
water	156:8	0:0	8	}
else	160:8	172:8	4
stmts	160:13	172:8	5	
if	160:13	172:8	6	(strncmp (token ,"controller=" ,strlen ("controller=" ) ) == 0)
cond	160:17	160:77	7	strncmp (token ,"controller=" ,strlen ("controller=" ) ) == 0
call	160:17	160:72	8	strncmp
arg	160:26	160:31	9	token
water	160:26	0:0	10	token
arg	160:33	160:46	9	"controller="
water	160:33	0:0	10	"controller="
arg	160:48	160:72	9	strlen("controller=")
call	160:48	160:70	10	strlen
arg	160:56	160:70	11	"controller="
water	160:56	0:0	12	"controller="
op	160:74	0:0	8	==
water	160:77	0:0	8	0
stmts	161:8	172:8	7	
water	161:8	0:0	8	{
decl	162:12	162:22	8	int	nr
op	162:19	0:0	8	=
water	162:21	0:0	8	0
water	163:12	0:0	8	token
op	163:18	0:0	8	+=
call	163:21	163:41	8	strlen
arg	163:28	163:41	9	"controller="
water	163:28	0:0	10	"controller="
water	163:42	0:0	8	;
water	164:12	0:0	8	nr
op	164:15	0:0	8	=
call	164:17	164:57	8	sscanf
arg	164:25	164:30	9	token
water	164:25	0:0	10	token
arg	164:32	164:36	9	"%u"
water	164:32	0:0	10	"%u"
arg	164:38	164:57	9	&p_sys->controller
op	164:38	0:0	10	&
water	164:39	0:0	10	p_sys
op	164:44	0:0	10	->
water	164:46	0:0	10	controller
water	164:58	0:0	8	;
if	165:12	171:12	8	(nr != 1)
cond	165:16	165:22	9	nr != 1
water	165:16	0:0	10	nr
op	165:19	0:0	10	!=
water	165:22	0:0	10	1
stmts	166:12	171:12	9	
water	166:12	0:0	10	{
call	167:16	169:39	10	msg_Err
arg	167:24	167:31	11	p_demux
water	167:24	0:0	12	p_demux
arg	167:33	168:63	11	"Bad controller value '%s', ""must be an unsigned integer."
water	167:33	0:0	12	"Bad controller value '%s', "
water	168:33	0:0	12	"must be an unsigned integer."
arg	169:33	169:39	11	token
water	169:33	0:0	12	token
water	169:40	0:0	10	;
return	170:16	170:35	10	VLC_EGENERIC
water	170:23	0:0	11	VLC_EGENERIC
water	171:12	0:0	10	}
water	172:8	0:0	8	}
else	174:8	187:8	4
stmts	174:13	187:8	5	
if	174:13	187:8	6	(strncmp (token ,"camera=" ,strlen ("camera=" ) ) == 0)
cond	174:17	174:69	7	strncmp (token ,"camera=" ,strlen ("camera=" ) ) == 0
call	174:17	174:64	8	strncmp
arg	174:26	174:31	9	token
water	174:26	0:0	10	token
arg	174:33	174:42	9	"camera="
water	174:33	0:0	10	"camera="
arg	174:44	174:64	9	strlen("camera=")
call	174:44	174:62	10	strlen
arg	174:52	174:62	11	"camera="
water	174:52	0:0	12	"camera="
op	174:66	0:0	8	==
water	174:69	0:0	8	0
stmts	175:8	187:8	7	
water	175:8	0:0	8	{
decl	176:12	176:22	8	int	nr
op	176:19	0:0	8	=
water	176:21	0:0	8	0
water	177:12	0:0	8	token
op	177:18	0:0	8	+=
call	177:21	177:37	8	strlen
arg	177:28	177:37	9	"camera="
water	177:28	0:0	10	"camera="
water	177:38	0:0	8	;
water	178:12	0:0	8	nr
op	178:15	0:0	8	=
call	178:17	178:58	8	sscanf
arg	178:24	178:29	9	token
water	178:24	0:0	10	token
arg	178:30	178:34	9	"%u"
water	178:30	0:0	10	"%u"
arg	178:35	178:58	9	&p_sys->selected_camera
op	178:35	0:0	10	&
water	178:36	0:0	10	p_sys
op	178:41	0:0	10	->
water	178:43	0:0	10	selected_camera
water	178:59	0:0	8	;
if	179:12	186:12	8	(nr != 1)
cond	179:16	179:22	9	nr != 1
water	179:16	0:0	10	nr
op	179:19	0:0	10	!=
water	179:22	0:0	10	1
stmts	180:12	186:12	9	
water	180:12	0:0	10	{
call	181:16	183:40	10	msg_Err
arg	181:25	181:32	11	p_demux
water	181:25	0:0	12	p_demux
arg	181:34	182:64	11	"Bad camera number '%s', ""must be an unsigned integer."
water	181:34	0:0	12	"Bad camera number '%s', "
water	182:34	0:0	12	"must be an unsigned integer."
arg	183:34	183:40	11	token
water	183:34	0:0	12	token
water	183:41	0:0	10	;
call	184:16	184:28	10	free
arg	184:21	184:28	11	psz_dup
water	184:21	0:0	12	psz_dup
water	184:29	0:0	10	;
return	185:16	185:35	10	VLC_EGENERIC
water	185:23	0:0	11	VLC_EGENERIC
water	186:12	0:0	10	}
water	187:8	0:0	8	}
else	188:8	193:8	4
stmts	188:13	193:8	5	
if	188:13	193:8	6	(strncmp (token ,"vdev=" ,strlen ("vdev=" ) ) == 0)
cond	188:17	188:65	7	strncmp (token ,"vdev=" ,strlen ("vdev=" ) ) == 0
call	188:17	188:60	8	strncmp
arg	188:26	188:31	9	token
water	188:26	0:0	10	token
arg	188:33	188:40	9	"vdev="
water	188:33	0:0	10	"vdev="
arg	188:42	188:60	9	strlen("vdev=")
call	188:42	188:58	10	strlen
arg	188:50	188:58	11	"vdev="
water	188:50	0:0	12	"vdev="
op	188:62	0:0	8	==
water	188:65	0:0	8	0
stmts	189:8	193:8	7	
water	189:8	0:0	8	{
water	190:12	0:0	8	token
op	190:18	0:0	8	+=
call	190:21	190:35	8	strlen
arg	190:28	190:35	9	"vdev="
water	190:28	0:0	10	"vdev="
water	190:36	0:0	8	;
water	191:12	0:0	8	p_sys
op	191:17	0:0	8	->
water	191:19	0:0	8	video_device
op	191:32	0:0	8	=
call	191:34	191:46	8	strdup
arg	191:41	191:46	9	token
water	191:41	0:0	10	token
water	191:47	0:0	8	;
call	192:12	192:64	8	msg_Dbg
arg	192:21	192:28	9	p_demux
water	192:21	0:0	10	p_demux
arg	192:30	192:56	9	"Using video device '%s'."
water	192:30	0:0	10	"Using video device '%s'."
arg	192:58	192:64	9	token
water	192:58	0:0	10	token
water	192:65	0:0	8	;
water	193:8	0:0	8	}
else	194:8	207:8	4
stmts	194:13	207:8	5	
if	194:13	207:8	6	(strncmp (token ,"focus=" ,strlen ("focus=" ) ) == 0)
cond	194:17	194:66	7	strncmp (token ,"focus=" ,strlen ("focus=" ) ) == 0
call	194:17	194:61	8	strncmp
arg	194:26	194:31	9	token
water	194:26	0:0	10	token
arg	194:33	194:41	9	"focus="
water	194:33	0:0	10	"focus="
arg	194:43	194:61	9	strlen("focus=")
call	194:43	194:59	10	strlen
arg	194:50	194:59	11	"focus="
water	194:50	0:0	12	"focus="
op	194:63	0:0	8	==
water	194:66	0:0	8	0
stmts	195:8	207:8	7	
water	195:8	0:0	8	{
decl	196:12	196:22	8	int	nr
op	196:19	0:0	8	=
water	196:21	0:0	8	0
water	197:12	0:0	8	token
op	197:18	0:0	8	+=
call	197:21	197:36	8	strlen
arg	197:28	197:36	9	"focus="
water	197:28	0:0	10	"focus="
water	197:37	0:0	8	;
water	198:12	0:0	8	nr
op	198:15	0:0	8	=
call	198:17	198:52	8	sscanf
arg	198:25	198:30	9	token
water	198:25	0:0	10	token
arg	198:32	198:36	9	"%u"
water	198:32	0:0	10	"%u"
arg	198:38	198:52	9	&p_sys->focus
op	198:38	0:0	10	&
water	198:39	0:0	10	p_sys
op	198:44	0:0	10	->
water	198:46	0:0	10	focus
water	198:53	0:0	8	;
if	199:12	206:12	8	(nr != 1)
cond	199:16	199:22	9	nr != 1
water	199:16	0:0	10	nr
op	199:19	0:0	10	!=
water	199:22	0:0	10	1
stmts	200:12	206:12	9	
water	200:12	0:0	10	{
call	201:16	203:40	10	msg_Err
arg	201:25	201:32	11	p_demux
water	201:25	0:0	12	p_demux
arg	201:34	202:64	11	"Bad focus value '%s', ""must be an unsigned integer."
water	201:34	0:0	12	"Bad focus value '%s', "
water	202:34	0:0	12	"must be an unsigned integer."
arg	203:34	203:40	11	token
water	203:34	0:0	12	token
water	203:41	0:0	10	;
call	204:16	204:28	10	free
arg	204:21	204:28	11	psz_dup
water	204:21	0:0	12	psz_dup
water	204:29	0:0	10	;
return	205:16	205:35	10	VLC_EGENERIC
water	205:23	0:0	11	VLC_EGENERIC
water	206:12	0:0	10	}
water	207:8	0:0	8	}
else	208:8	212:8	4
stmts	208:13	212:8	5	
if	208:13	212:8	6	(strncmp (token ,"uid=" ,strlen ("uid=" ) ) == 0)
cond	208:17	208:61	7	strncmp (token ,"uid=" ,strlen ("uid=" ) ) == 0
call	208:17	208:56	8	strncmp
arg	208:26	208:31	9	token
water	208:26	0:0	10	token
arg	208:33	208:39	9	"uid="
water	208:33	0:0	10	"uid="
arg	208:41	208:56	9	strlen("uid=")
call	208:41	208:54	10	strlen
arg	208:48	208:54	11	"uid="
water	208:48	0:0	12	"uid="
op	208:58	0:0	8	==
water	208:61	0:0	8	0
stmts	209:8	212:8	7	
water	209:8	0:0	8	{
water	210:12	0:0	8	token
op	210:18	0:0	8	+=
call	210:21	210:34	8	strlen
arg	210:28	210:34	9	"uid="
water	210:28	0:0	10	"uid="
water	210:35	0:0	8	;
call	211:12	211:61	8	sscanf
arg	211:20	211:25	9	token
water	211:20	0:0	10	token
arg	211:27	211:38	9	"0x%"SCNx64
water	211:27	0:0	10	"0x%"
water	211:32	0:0	10	SCNx64
arg	211:40	211:61	9	&p_sys->selected_uid
op	211:40	0:0	10	&
water	211:41	0:0	10	p_sys
op	211:46	0:0	10	->
water	211:48	0:0	10	selected_uid
water	211:62	0:0	8	;
water	212:8	0:0	8	}
water	213:4	0:0	4	}
if	216:4	230:4	2	(in_size)
cond	216:8	216:8	3	in_size
water	216:8	0:0	4	in_size
stmts	217:4	230:4	3	
water	217:4	0:0	4	{
if	218:8	223:8	4	(strcmp (in_size ,"160x120" ) == 0)
cond	218:12	218:43	5	strcmp (in_size ,"160x120" ) == 0
call	218:12	218:38	6	strcmp
arg	218:20	218:27	7	in_size
water	218:20	0:0	8	in_size
arg	218:29	218:38	7	"160x120"
water	218:29	0:0	8	"160x120"
op	218:40	0:0	6	==
water	218:43	0:0	6	0
stmts	219:8	223:8	5	
water	219:8	0:0	6	{
if	220:12	221:74	6	(in_fmt && (strcmp (in_fmt ,"YUV444" ) != 0 ))
cond	220:16	220:57	7	in_fmt && (strcmp (in_fmt ,"YUV444" ) != 0 )
water	220:16	0:0	8	in_fmt
op	220:23	0:0	8	&&
water	220:26	0:0	8	(
call	220:27	220:51	8	strcmp
arg	220:35	220:41	9	in_fmt
water	220:35	0:0	10	in_fmt
arg	220:43	220:51	9	"YUV444"
water	220:43	0:0	10	"YUV444"
op	220:53	0:0	8	!=
water	220:56	0:0	8	0
water	220:57	0:0	8	)
stmts	221:16	221:74	7	
call	221:16	221:73	8	msg_Err
arg	221:24	221:31	9	p_demux
water	221:24	0:0	10	p_demux
arg	221:33	221:73	9	"160x120 only supports YUV444 - forcing"
water	221:33	0:0	10	"160x120 only supports YUV444 - forcing"
water	221:74	0:0	8	;
water	222:12	0:0	6	p_sys
op	222:17	0:0	6	->
water	222:19	0:0	6	video_mode
op	222:30	0:0	6	=
water	222:32	0:0	6	DC1394_VIDEO_MODE_160x120_YUV444
water	222:64	0:0	6	;
water	223:8	0:0	6	}
else	224:8	229:8	4
stmts	224:13	229:8	5	
if	224:13	229:8	6	(strcmp (in_size ,"320x240" ) == 0)
cond	224:17	224:48	7	strcmp (in_size ,"320x240" ) == 0
call	224:17	224:43	8	strcmp
arg	224:25	224:32	9	in_size
water	224:25	0:0	10	in_size
arg	224:34	224:43	9	"320x240"
water	224:34	0:0	10	"320x240"
op	224:45	0:0	8	==
water	224:48	0:0	8	0
stmts	225:8	229:8	7	
water	225:8	0:0	8	{
if	226:12	227:74	8	(in_fmt && (strcmp (in_fmt ,"YUV422" ) != 0 ))
cond	226:16	226:57	9	in_fmt && (strcmp (in_fmt ,"YUV422" ) != 0 )
water	226:16	0:0	10	in_fmt
op	226:23	0:0	10	&&
water	226:26	0:0	10	(
call	226:27	226:51	10	strcmp
arg	226:35	226:41	11	in_fmt
water	226:35	0:0	12	in_fmt
arg	226:43	226:51	11	"YUV422"
water	226:43	0:0	12	"YUV422"
op	226:53	0:0	10	!=
water	226:56	0:0	10	0
water	226:57	0:0	10	)
stmts	227:16	227:74	9	
call	227:16	227:73	10	msg_Err
arg	227:24	227:31	11	p_demux
water	227:24	0:0	12	p_demux
arg	227:33	227:73	11	"320x240 only supports YUV422 - forcing"
water	227:33	0:0	12	"320x240 only supports YUV422 - forcing"
water	227:74	0:0	10	;
water	228:12	0:0	8	p_sys
op	228:17	0:0	8	->
water	228:19	0:0	8	video_mode
op	228:30	0:0	8	=
water	228:32	0:0	8	DC1394_VIDEO_MODE_320x240_YUV422
water	228:64	0:0	8	;
water	229:8	0:0	8	}
water	230:4	0:0	4	}
else	231:4	248:4	2
stmts	232:4	248:4	3	
water	232:4	0:0	4	{
if	233:8	245:8	4	(in_fmt)
cond	233:12	233:12	5	in_fmt
water	233:12	0:0	6	in_fmt
stmts	234:8	245:8	5	
water	234:8	0:0	6	{
if	235:12	236:66	6	(strcmp (in_fmt ,"RGB8" ) == 0)
cond	235:16	235:43	7	strcmp (in_fmt ,"RGB8" ) == 0
call	235:16	235:38	8	strcmp
arg	235:24	235:30	9	in_fmt
water	235:24	0:0	10	in_fmt
arg	235:32	235:38	9	"RGB8"
water	235:32	0:0	10	"RGB8"
op	235:40	0:0	8	==
water	235:43	0:0	8	0
stmts	236:16	236:66	7	
water	236:16	0:0	8	p_sys
op	236:21	0:0	8	->
water	236:23	0:0	8	video_mode
op	236:34	0:0	8	=
water	236:36	0:0	8	DC1394_VIDEO_MODE_640x480_RGB8
water	236:66	0:0	8	;
else	237:12	238:67	6
stmts	237:17	238:67	7	
if	237:17	238:67	8	(strcmp (in_fmt ,"MONO8" ) == 0)
cond	237:21	237:49	9	strcmp (in_fmt ,"MONO8" ) == 0
call	237:21	237:44	10	strcmp
arg	237:29	237:35	11	in_fmt
water	237:29	0:0	12	in_fmt
arg	237:37	237:44	11	"MONO8"
water	237:37	0:0	12	"MONO8"
op	237:46	0:0	10	==
water	237:49	0:0	10	0
stmts	238:16	238:67	9	
water	238:16	0:0	10	p_sys
op	238:21	0:0	10	->
water	238:23	0:0	10	video_mode
op	238:34	0:0	10	=
water	238:36	0:0	10	DC1394_VIDEO_MODE_640x480_MONO8
water	238:67	0:0	10	;
else	239:12	240:68	6
stmts	239:17	240:68	7	
if	239:17	240:68	8	(strcmp (in_fmt ,"MONO16" ) == 0)
cond	239:21	239:50	9	strcmp (in_fmt ,"MONO16" ) == 0
call	239:21	239:45	10	strcmp
arg	239:29	239:35	11	in_fmt
water	239:29	0:0	12	in_fmt
arg	239:37	239:45	11	"MONO16"
water	239:37	0:0	12	"MONO16"
op	239:47	0:0	10	==
water	239:50	0:0	10	0
stmts	240:16	240:68	9	
water	240:16	0:0	10	p_sys
op	240:21	0:0	10	->
water	240:23	0:0	10	video_mode
op	240:34	0:0	10	=
water	240:36	0:0	10	DC1394_VIDEO_MODE_640x480_MONO16
water	240:68	0:0	10	;
else	241:12	242:68	6
stmts	241:17	242:68	7	
if	241:17	242:68	8	(strcmp (in_fmt ,"YUV411" ) == 0)
cond	241:21	241:50	9	strcmp (in_fmt ,"YUV411" ) == 0
call	241:21	241:45	10	strcmp
arg	241:29	241:35	11	in_fmt
water	241:29	0:0	12	in_fmt
arg	241:37	241:45	11	"YUV411"
water	241:37	0:0	12	"YUV411"
op	241:47	0:0	10	==
water	241:50	0:0	10	0
stmts	242:16	242:68	9	
water	242:16	0:0	10	p_sys
op	242:21	0:0	10	->
water	242:23	0:0	10	video_mode
op	242:34	0:0	10	=
water	242:36	0:0	10	DC1394_VIDEO_MODE_640x480_YUV411
water	242:68	0:0	10	;
else	243:12	244:68	6
stmts	244:16	244:68	7	
water	244:16	0:0	8	p_sys
op	244:21	0:0	8	->
water	244:23	0:0	8	video_mode
op	244:34	0:0	8	=
water	244:36	0:0	8	DC1394_VIDEO_MODE_640x480_YUV422
water	244:68	0:0	8	;
water	245:8	0:0	6	}
else	246:8	247:64	4
stmts	247:12	247:64	5	
water	247:12	0:0	6	p_sys
op	247:17	0:0	6	->
water	247:19	0:0	6	video_mode
op	247:30	0:0	6	=
water	247:32	0:0	6	DC1394_VIDEO_MODE_640x480_YUV422
water	247:64	0:0	6	;
water	248:4	0:0	4	}
call	249:4	249:18	2	free
arg	249:10	249:18	3	psz_dup
water	249:10	0:0	4	psz_dup
water	249:19	0:0	2	;
return	250:4	250:22	2	VLC_SUCCESS
water	250:11	0:0	3	VLC_SUCCESS
