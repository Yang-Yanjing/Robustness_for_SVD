func	2:0	22:0	0	static void	ThreadStop
params	2:22	0:0	1	
param	2:23	2:42	2	vout_thread_t *	vout
param	2:44	2:71	2	vout_display_state_t *	state
stmnts	4:4	21:34	1	
if	4:4	5:46	2	(vout -> p -> spu_blend)
cond	4:8	4:17	3	vout -> p -> spu_blend
water	4:8	0:0	4	vout
op	4:12	0:0	4	->
water	4:14	0:0	4	p
op	4:15	0:0	4	->
water	4:17	0:0	4	spu_blend
stmts	5:8	5:46	3	
call	5:8	5:45	4	filter_DeleteBlend
arg	5:27	5:45	5	vout->p->spu_blend
water	5:27	0:0	6	vout
op	5:31	0:0	6	->
water	5:33	0:0	6	p
op	5:34	0:0	6	->
water	5:36	0:0	6	spu_blend
water	5:46	0:0	4	;
if	7:4	13:4	2	(vout -> p -> display . vd)
cond	7:8	7:25	3	vout -> p -> display . vd
water	7:8	0:0	4	vout
op	7:12	0:0	4	->
water	7:14	0:0	4	p
op	7:15	0:0	4	->
water	7:17	0:0	4	display
op	7:24	0:0	4	.
water	7:25	0:0	4	vd
stmts	7:29	13:4	3	
water	7:29	0:0	4	{
if	8:8	11:8	4	(vout -> p -> decoder_pool)
cond	8:12	8:21	5	vout -> p -> decoder_pool
water	8:12	0:0	6	vout
op	8:16	0:0	6	->
water	8:18	0:0	6	p
op	8:19	0:0	6	->
water	8:21	0:0	6	decoder_pool
stmts	8:35	11:8	5	
water	8:35	0:0	6	{
call	9:12	9:45	6	ThreadFlush
arg	9:24	9:28	7	vout
water	9:24	0:0	8	vout
arg	9:30	9:34	7	true
water	9:30	0:0	8	true
arg	9:36	9:45	7	INT64_MAX
water	9:36	0:0	8	INT64_MAX
water	9:46	0:0	6	;
call	10:12	10:32	6	vout_EndWrapper
arg	10:28	10:32	7	vout
water	10:28	0:0	8	vout
water	10:33	0:0	6	;
water	11:8	0:0	6	}
call	12:8	12:37	4	vout_CloseWrapper
arg	12:26	12:30	5	vout
water	12:26	0:0	6	vout
arg	12:32	12:37	5	state
water	12:32	0:0	6	state
water	12:38	0:0	4	;
water	13:4	0:0	4	}
call	15:4	15:57	2	filter_chain_Delete
arg	15:24	15:57	3	vout->p->filter.chain_interactive
water	15:24	0:0	4	vout
op	15:28	0:0	4	->
water	15:30	0:0	4	p
op	15:31	0:0	4	->
water	15:33	0:0	4	filter
op	15:39	0:0	4	.
water	15:40	0:0	4	chain_interactive
water	15:58	0:0	2	;
call	16:4	16:52	2	filter_chain_Delete
arg	16:24	16:52	3	vout->p->filter.chain_static
water	16:24	0:0	4	vout
op	16:28	0:0	4	->
water	16:30	0:0	4	p
op	16:31	0:0	4	->
water	16:33	0:0	4	filter
op	16:39	0:0	4	.
water	16:40	0:0	4	chain_static
water	16:53	0:0	2	;
call	17:4	17:46	2	video_format_Clean
arg	17:23	17:46	3	&vout->p->filter.format
op	17:23	0:0	4	&
water	17:24	0:0	4	vout
op	17:28	0:0	4	->
water	17:30	0:0	4	p
op	17:31	0:0	4	->
water	17:33	0:0	4	filter
op	17:39	0:0	4	.
water	17:40	0:0	4	format
water	17:47	0:0	2	;
call	18:4	18:38	2	free
arg	18:9	18:38	3	vout->p->filter.configuration
water	18:9	0:0	4	vout
op	18:13	0:0	4	->
water	18:15	0:0	4	p
op	18:16	0:0	4	->
water	18:18	0:0	4	filter
op	18:24	0:0	4	.
water	18:25	0:0	4	configuration
water	18:39	0:0	2	;
if	19:4	20:50	2	(vout -> p -> decoder_fifo)
cond	19:8	19:17	3	vout -> p -> decoder_fifo
water	19:8	0:0	4	vout
op	19:12	0:0	4	->
water	19:14	0:0	4	p
op	19:15	0:0	4	->
water	19:17	0:0	4	decoder_fifo
stmts	20:8	20:50	3	
call	20:8	20:49	4	picture_fifo_Delete
arg	20:28	20:49	5	vout->p->decoder_fifo
water	20:28	0:0	6	vout
op	20:32	0:0	6	->
water	20:34	0:0	6	p
op	20:35	0:0	6	->
water	20:37	0:0	6	decoder_fifo
water	20:50	0:0	4	;
call	21:4	21:33	2	assert
arg	21:11	21:33	3	!vout->p->decoder_pool
op	21:11	0:0	4	!
water	21:12	0:0	4	vout
op	21:16	0:0	4	->
water	21:18	0:0	4	p
op	21:19	0:0	4	->
water	21:21	0:0	4	decoder_pool
water	21:34	0:0	2	;
