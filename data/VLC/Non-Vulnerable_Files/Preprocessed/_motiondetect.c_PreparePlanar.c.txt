func	2:0	59:0	0	static void	PreparePlanar
params	2:25	0:0	1	
param	2:27	2:45	2	filter_t *	p_filter
param	2:47	2:66	2	picture_t *	p_inpic
stmnts	0:0	58:4	1	
decl	4:4	4:41	2	filter_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	p_filter
op	4:34	0:0	2	->
water	4:36	0:0	2	p_sys
decl	5:4	5:57	2	const video_format_t	*p_fmt
op	5:32	0:0	2	=
op	5:34	0:0	2	&
water	5:35	0:0	2	p_filter
op	5:43	0:0	2	->
water	5:45	0:0	2	fmt_in
op	5:51	0:0	2	.
water	5:52	0:0	2	video
decl	6:4	6:59	2	uint8_t	*p_oldpix
op	6:24	0:0	2	=
water	6:26	0:0	2	p_sys
op	6:31	0:0	2	->
water	6:33	0:0	2	p_old
op	6:38	0:0	2	->
water	6:40	0:0	2	p
op	6:41	0:0	2	[
water	6:42	0:0	2	Y_PLANE
op	6:49	0:0	2	]
op	6:50	0:0	2	.
water	6:51	0:0	2	p_pixels
decl	7:4	7:60	2	const int	i_old_pitch
op	7:26	0:0	2	=
water	7:28	0:0	2	p_sys
op	7:33	0:0	2	->
water	7:35	0:0	2	p_old
op	7:40	0:0	2	->
water	7:42	0:0	2	p
op	7:43	0:0	2	[
water	7:44	0:0	2	Y_PLANE
op	7:51	0:0	2	]
op	7:52	0:0	2	.
water	7:53	0:0	2	i_pitch
decl	8:4	8:57	2	const uint8_t	*p_inpix
op	8:27	0:0	2	=
water	8:29	0:0	2	p_inpic
op	8:36	0:0	2	->
water	8:38	0:0	2	p
op	8:39	0:0	2	[
water	8:40	0:0	2	Y_PLANE
op	8:47	0:0	2	]
op	8:48	0:0	2	.
water	8:49	0:0	2	p_pixels
decl	9:4	9:55	2	const int	i_src_pitch
op	9:26	0:0	2	=
water	9:28	0:0	2	p_inpic
op	9:35	0:0	2	->
water	9:37	0:0	2	p
op	9:38	0:0	2	[
water	9:39	0:0	2	Y_PLANE
op	9:46	0:0	2	]
op	9:47	0:0	2	.
water	9:48	0:0	2	i_pitch
for	13:4	17:4	2	(unsigned y = 0 ;y < p_fmt -> i_height;y ++)
forinit	13:9	13:23	3	unsigned y = 0 ;
water	13:9	0:0	4	unsigned
water	13:18	0:0	4	y
op	13:20	0:0	4	=
water	13:22	0:0	4	0
water	13:23	0:0	4	;
cond	13:25	13:36	3	y < p_fmt -> i_height
water	13:25	0:0	4	y
op	13:27	0:0	4	<
water	13:29	0:0	4	p_fmt
op	13:34	0:0	4	->
water	13:36	0:0	4	i_height
forexpr	13:46	13:47	3	y ++
water	13:46	0:0	4	y
op	13:47	0:0	4	++
stmts	14:4	17:4	3	
water	14:4	0:0	4	{
for	15:8	16:107	4	(unsigned x = 0 ;x < p_fmt -> i_width;x ++)
forinit	15:13	15:27	5	unsigned x = 0 ;
water	15:13	0:0	6	unsigned
water	15:22	0:0	6	x
op	15:24	0:0	6	=
water	15:26	0:0	6	0
water	15:27	0:0	6	;
cond	15:29	15:40	5	x < p_fmt -> i_width
water	15:29	0:0	6	x
op	15:31	0:0	6	<
water	15:33	0:0	6	p_fmt
op	15:38	0:0	6	->
water	15:40	0:0	6	i_width
forexpr	15:49	15:50	5	x ++
water	15:49	0:0	6	x
op	15:50	0:0	6	++
stmts	16:12	16:107	5	
water	16:12	0:0	6	p_sys
op	16:17	0:0	6	->
water	16:19	0:0	6	p_buf2
op	16:25	0:0	6	[
water	16:26	0:0	6	y
op	16:27	0:0	6	*
water	16:28	0:0	6	p_fmt
op	16:33	0:0	6	->
water	16:35	0:0	6	i_width
op	16:42	0:0	6	+
water	16:43	0:0	6	x
op	16:44	0:0	6	]
op	16:46	0:0	6	=
call	16:48	16:106	6	abs
arg	16:53	16:106	7	p_inpix[y*i_src_pitch+x]-p_oldpix[y*i_old_pitch+x]
water	16:53	0:0	8	p_inpix
op	16:60	0:0	8	[
water	16:61	0:0	8	y
op	16:62	0:0	8	*
water	16:63	0:0	8	i_src_pitch
op	16:74	0:0	8	+
water	16:75	0:0	8	x
op	16:76	0:0	8	]
op	16:78	0:0	8	-
water	16:80	0:0	8	p_oldpix
op	16:88	0:0	8	[
water	16:89	0:0	8	y
op	16:90	0:0	8	*
water	16:91	0:0	8	i_old_pitch
op	16:102	0:0	8	+
water	16:103	0:0	8	x
op	16:104	0:0	8	]
water	16:107	0:0	6	;
water	17:4	0:0	4	}
decl	18:4	18:19	2	int	i_chroma_dx
decl	19:4	19:19	2	int	i_chroma_dy
switch	20:4	36:4	2	(p_inpic -> format . i_chroma)
cond	20:12	20:28	3	p_inpic -> format . i_chroma
water	20:12	0:0	4	p_inpic
op	20:19	0:0	4	->
water	20:21	0:0	4	format
op	20:27	0:0	4	.
water	20:28	0:0	4	i_chroma
stmts	21:4	36:4	3	
water	21:4	0:0	4	{
label	22:8	22:27	4	case VLC_CODEC_I420 :
label	23:8	23:27	4	case VLC_CODEC_J420 :
label	24:8	24:27	4	case VLC_CODEC_YV12 :
water	25:12	0:0	4	i_chroma_dx
op	25:24	0:0	4	=
water	25:26	0:0	4	2
water	25:27	0:0	4	;
water	26:12	0:0	4	i_chroma_dy
op	26:24	0:0	4	=
water	26:26	0:0	4	2
water	26:27	0:0	4	;
break	27:12	27:17	4	
label	28:8	28:27	4	case VLC_CODEC_I422 :
label	29:8	29:27	4	case VLC_CODEC_J422 :
water	30:12	0:0	4	i_chroma_dx
op	30:24	0:0	4	=
water	30:26	0:0	4	2
water	30:27	0:0	4	;
water	31:12	0:0	4	i_chroma_dy
op	31:24	0:0	4	=
water	31:26	0:0	4	1
water	31:27	0:0	4	;
break	32:12	32:17	4	
label	33:8	33:15	4	default :
call	34:12	34:65	4	msg_Warn
arg	34:22	34:30	5	p_filter
water	34:22	0:0	6	p_filter
arg	34:32	34:65	5	"Not taking chroma into account"
water	34:32	0:0	6	"Not taking chroma into account"
water	34:66	0:0	4	;
return	35:12	35:18	4	
water	36:4	0:0	4	}
decl	37:4	37:59	2	const uint8_t	*p_inpix_u
op	37:29	0:0	2	=
water	37:31	0:0	2	p_inpic
op	37:38	0:0	2	->
water	37:40	0:0	2	p
op	37:41	0:0	2	[
water	37:42	0:0	2	U_PLANE
op	37:49	0:0	2	]
op	37:50	0:0	2	.
water	37:51	0:0	2	p_pixels
decl	38:4	38:59	2	const uint8_t	*p_inpix_v
op	38:29	0:0	2	=
water	38:31	0:0	2	p_inpic
op	38:38	0:0	2	->
water	38:40	0:0	2	p
op	38:41	0:0	2	[
water	38:42	0:0	2	V_PLANE
op	38:49	0:0	2	]
op	38:50	0:0	2	.
water	38:51	0:0	2	p_pixels
decl	39:4	39:57	2	const int	i_src_pitch_u
op	39:28	0:0	2	=
water	39:30	0:0	2	p_inpic
op	39:37	0:0	2	->
water	39:39	0:0	2	p
op	39:40	0:0	2	[
water	39:41	0:0	2	U_PLANE
op	39:48	0:0	2	]
op	39:49	0:0	2	.
water	39:50	0:0	2	i_pitch
decl	40:4	40:57	2	const int	i_src_pitch_v
op	40:28	0:0	2	=
water	40:30	0:0	2	p_inpic
op	40:37	0:0	2	->
water	40:39	0:0	2	p
op	40:40	0:0	2	[
water	40:41	0:0	2	V_PLANE
op	40:48	0:0	2	]
op	40:49	0:0	2	.
water	40:50	0:0	2	i_pitch
decl	41:4	41:65	2	const uint8_t	*p_oldpix_u
op	41:30	0:0	2	=
water	41:32	0:0	2	p_sys
op	41:37	0:0	2	->
water	41:39	0:0	2	p_old
op	41:44	0:0	2	->
water	41:46	0:0	2	p
op	41:47	0:0	2	[
water	41:48	0:0	2	U_PLANE
op	41:55	0:0	2	]
op	41:56	0:0	2	.
water	41:57	0:0	2	p_pixels
decl	42:4	42:65	2	const uint8_t	*p_oldpix_v
op	42:30	0:0	2	=
water	42:32	0:0	2	p_sys
op	42:37	0:0	2	->
water	42:39	0:0	2	p_old
op	42:44	0:0	2	->
water	42:46	0:0	2	p
op	42:47	0:0	2	[
water	42:48	0:0	2	V_PLANE
op	42:55	0:0	2	]
op	42:56	0:0	2	.
water	42:57	0:0	2	p_pixels
decl	43:4	43:62	2	const int	i_old_pitch_u
op	43:28	0:0	2	=
water	43:30	0:0	2	p_sys
op	43:35	0:0	2	->
water	43:37	0:0	2	p_old
op	43:42	0:0	2	->
water	43:44	0:0	2	p
op	43:45	0:0	2	[
water	43:46	0:0	2	U_PLANE
op	43:53	0:0	2	]
op	43:54	0:0	2	.
water	43:55	0:0	2	i_pitch
decl	44:4	44:62	2	const int	i_old_pitch_v
op	44:28	0:0	2	=
water	44:30	0:0	2	p_sys
op	44:35	0:0	2	->
water	44:37	0:0	2	p_old
op	44:42	0:0	2	->
water	44:44	0:0	2	p
op	44:45	0:0	2	[
water	44:46	0:0	2	V_PLANE
op	44:53	0:0	2	]
op	44:54	0:0	2	.
water	44:55	0:0	2	i_pitch
for	45:4	58:4	2	(unsigned y = 0 ;y < p_fmt -> i_height / i_chroma_dy;y ++)
forinit	45:9	45:23	3	unsigned y = 0 ;
water	45:9	0:0	4	unsigned
water	45:18	0:0	4	y
op	45:20	0:0	4	=
water	45:22	0:0	4	0
water	45:23	0:0	4	;
cond	45:25	45:45	3	y < p_fmt -> i_height / i_chroma_dy
water	45:25	0:0	4	y
op	45:27	0:0	4	<
water	45:29	0:0	4	p_fmt
op	45:34	0:0	4	->
water	45:36	0:0	4	i_height
op	45:44	0:0	4	/
water	45:45	0:0	4	i_chroma_dy
forexpr	45:58	45:59	3	y ++
water	45:58	0:0	4	y
op	45:59	0:0	4	++
stmts	46:4	58:4	3	
water	46:4	0:0	4	{
for	47:8	57:8	4	(unsigned x = 0 ;x < p_fmt -> i_width / i_chroma_dx;x ++)
forinit	47:13	47:27	5	unsigned x = 0 ;
water	47:13	0:0	6	unsigned
water	47:22	0:0	6	x
op	47:24	0:0	6	=
water	47:26	0:0	6	0
water	47:27	0:0	6	;
cond	47:29	47:48	5	x < p_fmt -> i_width / i_chroma_dx
water	47:29	0:0	6	x
op	47:31	0:0	6	<
water	47:33	0:0	6	p_fmt
op	47:38	0:0	6	->
water	47:40	0:0	6	i_width
op	47:47	0:0	6	/
water	47:48	0:0	6	i_chroma_dx
forexpr	47:61	47:63	5	x ++
water	47:61	0:0	6	x
op	47:63	0:0	6	++
stmts	48:8	57:8	5	
water	48:8	0:0	6	{
decl	49:12	50:93	6	const int	d
op	49:24	0:0	6	=
call	49:26	49:92	7	abs
arg	49:31	49:92	8	p_inpix_u[y*i_src_pitch_u+x]-p_oldpix_u[y*i_old_pitch_u+x]
water	49:31	0:0	9	p_inpix_u
op	49:40	0:0	9	[
water	49:41	0:0	9	y
op	49:42	0:0	9	*
water	49:43	0:0	9	i_src_pitch_u
op	49:56	0:0	9	+
water	49:57	0:0	9	x
op	49:58	0:0	9	]
op	49:60	0:0	9	-
water	49:62	0:0	9	p_oldpix_u
op	49:72	0:0	9	[
water	49:73	0:0	9	y
op	49:74	0:0	9	*
water	49:75	0:0	9	i_old_pitch_u
op	49:88	0:0	9	+
water	49:89	0:0	9	x
op	49:90	0:0	9	]
op	49:94	0:0	6	+
call	50:26	50:92	7	abs
arg	50:31	50:92	8	p_inpix_v[y*i_src_pitch_v+x]-p_oldpix_v[y*i_old_pitch_v+x]
water	50:31	0:0	9	p_inpix_v
op	50:40	0:0	9	[
water	50:41	0:0	9	y
op	50:42	0:0	9	*
water	50:43	0:0	9	i_src_pitch_v
op	50:56	0:0	9	+
water	50:57	0:0	9	x
op	50:58	0:0	9	]
op	50:60	0:0	9	-
water	50:62	0:0	9	p_oldpix_v
op	50:72	0:0	9	[
water	50:73	0:0	9	y
op	50:74	0:0	9	*
water	50:75	0:0	9	i_old_pitch_v
op	50:88	0:0	9	+
water	50:89	0:0	9	x
op	50:90	0:0	9	]
decl	51:12	51:20	6	int	i
water	51:17	0:0	6	,
decl	51:12	51:20	6	int	j
for	52:12	56:12	6	(j = 0 ;j < i_chroma_dy;j ++)
forinit	52:17	52:22	7	j = 0 ;
water	52:17	0:0	8	j
op	52:19	0:0	8	=
water	52:21	0:0	8	0
water	52:22	0:0	8	;
cond	52:24	52:28	7	j < i_chroma_dy
water	52:24	0:0	8	j
op	52:26	0:0	8	<
water	52:28	0:0	8	i_chroma_dy
forexpr	52:41	52:42	7	j ++
water	52:41	0:0	8	j
op	52:42	0:0	8	++
stmts	53:12	56:12	7	
water	53:12	0:0	8	{
for	54:16	55:83	8	(i = 0 ;i < i_chroma_dx;i ++)
forinit	54:21	54:26	9	i = 0 ;
water	54:21	0:0	10	i
op	54:23	0:0	10	=
water	54:25	0:0	10	0
water	54:26	0:0	10	;
cond	54:28	54:32	9	i < i_chroma_dx
water	54:28	0:0	10	i
op	54:30	0:0	10	<
water	54:32	0:0	10	i_chroma_dx
forexpr	54:45	54:46	9	i ++
water	54:45	0:0	10	i
op	54:46	0:0	10	++
stmts	55:20	55:83	9	
water	55:20	0:0	10	p_sys
op	55:25	0:0	10	->
water	55:27	0:0	10	p_buf2
op	55:33	0:0	10	[
water	55:34	0:0	10	i_chroma_dy
op	55:45	0:0	10	*
water	55:46	0:0	10	p_fmt
op	55:51	0:0	10	->
water	55:53	0:0	10	i_width
op	55:60	0:0	10	*
water	55:61	0:0	10	j
op	55:63	0:0	10	+
water	55:65	0:0	10	i_chroma_dx
op	55:76	0:0	10	*
water	55:77	0:0	10	i
op	55:78	0:0	10	]
op	55:80	0:0	10	=
water	55:82	0:0	10	d
water	55:83	0:0	10	;
water	56:12	0:0	8	}
water	57:8	0:0	6	}
water	58:4	0:0	4	}
