func	2:0	45:0	0	static void	RenderImage
params	2:23	0:0	1	
param	2:25	2:41	2	decoder_t *	p_dec
param	2:43	2:58	2	block_t *	p_data
param	3:25	3:55	2	subpicture_region_t *	p_region
stmnts	0:0	44:4	1	
decl	5:4	5:39	2	decoder_sys_t	*p_sys
op	5:25	0:0	2	=
water	5:27	0:0	2	p_dec
op	5:32	0:0	2	->
water	5:34	0:0	2	p_sys
decl	6:4	6:51	2	uint8_t	*p_dest
op	6:20	0:0	2	=
water	6:22	0:0	2	p_region
op	6:30	0:0	2	->
water	6:32	0:0	2	p_picture
op	6:41	0:0	2	->
water	6:43	0:0	2	Y_PIXELS
decl	7:4	7:15	2	int	i_field
decl	8:4	8:23	2	int	i_row
water	8:13	0:0	2	,
decl	8:4	8:23	2	int	i_column
decl	9:4	9:28	2	uint8_t	i_color
water	9:19	0:0	2	,
decl	9:4	9:28	2	uint8_t	i_count
decl	10:4	10:11	2	bs_t	bs
call	11:4	12:54	2	bs_init
arg	11:13	11:16	3	&bs
op	11:13	0:0	4	&
water	11:14	0:0	4	bs
arg	11:18	11:58	3	p_data->p_buffer+p_sys->i_image_offset
water	11:18	0:0	4	p_data
op	11:24	0:0	4	->
water	11:26	0:0	4	p_buffer
op	11:35	0:0	4	+
water	11:37	0:0	4	p_sys
op	11:42	0:0	4	->
water	11:44	0:0	4	i_image_offset
arg	12:13	12:54	3	p_data->i_buffer-p_sys->i_image_offset
water	12:13	0:0	4	p_data
op	12:19	0:0	4	->
water	12:21	0:0	4	i_buffer
op	12:30	0:0	4	-
water	12:32	0:0	4	p_sys
op	12:37	0:0	4	->
water	12:39	0:0	4	i_image_offset
water	12:55	0:0	2	;
for	13:4	44:4	2	(i_field = 0 ;i_field < 2;i_field ++)
forinit	13:9	13:20	3	i_field = 0 ;
water	13:9	0:0	4	i_field
op	13:17	0:0	4	=
water	13:19	0:0	4	0
water	13:20	0:0	4	;
cond	13:22	13:32	3	i_field < 2
water	13:22	0:0	4	i_field
op	13:30	0:0	4	<
water	13:32	0:0	4	2
forexpr	13:35	13:42	3	i_field ++
water	13:35	0:0	4	i_field
op	13:42	0:0	4	++
stmts	14:4	44:4	3	
water	14:4	0:0	4	{
for	15:8	43:8	4	(i_row = i_field ;i_row < p_sys -> i_height;i_row += 2)
forinit	15:13	15:28	5	i_row = i_field ;
water	15:13	0:0	6	i_row
op	15:19	0:0	6	=
water	15:21	0:0	6	i_field
water	15:28	0:0	6	;
cond	15:30	15:45	5	i_row < p_sys -> i_height
water	15:30	0:0	6	i_row
op	15:36	0:0	6	<
water	15:38	0:0	6	p_sys
op	15:43	0:0	6	->
water	15:45	0:0	6	i_height
forexpr	15:55	15:64	5	i_row += 2
water	15:55	0:0	6	i_row
op	15:61	0:0	6	+=
water	15:64	0:0	6	2
stmts	16:8	43:8	5	
water	16:8	0:0	6	{
for	17:12	41:12	6	(i_column = 0 ;i_column < p_sys -> i_width;i_column ++)
forinit	17:17	17:29	7	i_column = 0 ;
water	17:17	0:0	8	i_column
op	17:26	0:0	8	=
water	17:28	0:0	8	0
water	17:29	0:0	8	;
cond	17:31	17:49	7	i_column < p_sys -> i_width
water	17:31	0:0	8	i_column
op	17:40	0:0	8	<
water	17:42	0:0	8	p_sys
op	17:47	0:0	8	->
water	17:49	0:0	8	i_width
forexpr	17:58	17:66	7	i_column ++
water	17:58	0:0	8	i_column
op	17:66	0:0	8	++
stmts	18:12	41:12	7	
water	18:12	0:0	8	{
decl	19:16	19:49	8	uint8_t	i_val
op	19:30	0:0	8	=
call	19:32	19:48	9	bs_read
arg	19:41	19:44	10	&bs
op	19:41	0:0	11	&
water	19:42	0:0	11	bs
arg	19:46	19:48	10	4
water	19:46	0:0	11	4
if	20:16	29:16	8	(i_val == 0)
cond	20:20	20:29	9	i_val == 0
water	20:20	0:0	10	i_val
op	20:26	0:0	10	==
water	20:29	0:0	10	0
stmts	21:16	29:16	9	
water	21:16	0:0	10	{
water	23:20	0:0	10	i_color
op	23:28	0:0	10	=
call	23:30	23:46	10	bs_read
arg	23:39	23:42	11	&bs
op	23:39	0:0	12	&
water	23:40	0:0	12	bs
arg	23:44	23:46	11	4
water	23:44	0:0	12	4
water	23:47	0:0	10	;
call	24:20	26:54	10	memset
arg	24:28	25:45	11	&p_dest[i_row*p_region->p_picture->Y_PITCH+i_column]
op	24:28	0:0	12	&
water	24:29	0:0	12	p_dest
op	24:35	0:0	12	[
water	24:36	0:0	12	i_row
op	24:42	0:0	12	*
water	24:44	0:0	12	p_region
op	24:52	0:0	12	->
water	24:54	0:0	12	p_picture
op	24:63	0:0	12	->
water	24:65	0:0	12	Y_PITCH
op	24:73	0:0	12	+
water	25:36	0:0	12	i_column
op	25:44	0:0	12	]
arg	25:47	25:54	11	i_color
water	25:47	0:0	12	i_color
arg	26:28	26:54	11	p_sys->i_width-i_column
water	26:28	0:0	12	p_sys
op	26:33	0:0	12	->
water	26:35	0:0	12	i_width
op	26:43	0:0	12	-
water	26:45	0:0	12	i_column
water	26:55	0:0	10	;
water	27:20	0:0	10	i_column
op	27:29	0:0	10	=
water	27:31	0:0	10	p_sys
op	27:36	0:0	10	->
water	27:38	0:0	10	i_width
water	27:45	0:0	10	;
continue	28:20	28:28	10	
water	29:16	0:0	10	}
else	30:16	40:16	8
stmts	31:16	40:16	9	
water	31:16	0:0	10	{
water	33:20	0:0	10	i_count
op	33:28	0:0	10	=
water	33:30	0:0	10	(
water	33:31	0:0	10	i_val
op	33:37	0:0	10	>>
water	33:40	0:0	10	2
water	33:41	0:0	10	)
water	33:42	0:0	10	;
water	34:20	0:0	10	i_color
op	34:28	0:0	10	=
water	34:30	0:0	10	i_val
op	34:36	0:0	10	&
water	34:38	0:0	10	0
water	34:39	0:0	10	x3
water	34:41	0:0	10	;
water	35:20	0:0	10	i_count
op	35:28	0:0	10	=
call	35:30	35:72	10	__MIN
arg	35:37	35:44	11	i_count
water	35:37	0:0	12	i_count
arg	35:46	35:72	11	p_sys->i_width-i_column
water	35:46	0:0	12	p_sys
op	35:51	0:0	12	->
water	35:53	0:0	12	i_width
op	35:61	0:0	12	-
water	35:63	0:0	12	i_column
water	35:73	0:0	10	;
call	36:20	37:64	10	memset
arg	36:28	37:45	11	&p_dest[i_row*p_region->p_picture->Y_PITCH+i_column]
op	36:28	0:0	12	&
water	36:29	0:0	12	p_dest
op	36:35	0:0	12	[
water	36:36	0:0	12	i_row
op	36:42	0:0	12	*
water	36:44	0:0	12	p_region
op	36:52	0:0	12	->
water	36:54	0:0	12	p_picture
op	36:63	0:0	12	->
water	36:65	0:0	12	Y_PITCH
op	36:73	0:0	12	+
water	37:36	0:0	12	i_column
op	37:44	0:0	12	]
arg	37:47	37:54	11	i_color
water	37:47	0:0	12	i_color
arg	37:56	37:64	11	i_count
water	37:56	0:0	12	i_count
water	37:65	0:0	10	;
water	38:20	0:0	10	i_column
op	38:29	0:0	10	+=
water	38:32	0:0	10	i_count
op	38:40	0:0	10	-
water	38:42	0:0	10	1
water	38:43	0:0	10	;
continue	39:20	39:28	10	
water	40:16	0:0	10	}
water	41:12	0:0	8	}
call	42:12	42:26	6	bs_align
arg	42:22	42:26	7	&bs
op	42:22	0:0	8	&
water	42:23	0:0	8	bs
water	42:27	0:0	6	;
water	43:8	0:0	6	}
water	44:4	0:0	4	}
