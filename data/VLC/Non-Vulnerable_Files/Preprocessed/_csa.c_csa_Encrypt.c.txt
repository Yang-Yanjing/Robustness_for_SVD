func	2:0	72:0	0	void	csa_Encrypt
params	2:16	0:0	1	
param	2:18	2:26	2	csa_t *	c
param	2:28	2:40	2	uint8_t *	pkt
param	2:42	2:57	2	int	i_pkt_size
stmnts	0:0	71:4	1	
decl	4:4	4:15	2	uint8_t	*ck
decl	5:4	5:15	2	uint8_t	*kk
decl	6:4	6:12	2	int	i
water	6:9	0:0	2	,
decl	6:4	6:12	2	int	j
decl	7:4	7:17	2	int	i_hdr
op	7:14	0:0	2	=
water	7:16	0:0	2	4
water	8:4	0:0	2	uint8_t
water	8:13	0:0	2	ib
op	8:15	0:0	2	[
water	8:16	0:0	2	184
op	8:19	0:0	2	/
water	8:20	0:0	2	8
op	8:21	0:0	2	+
water	8:22	0:0	2	2
op	8:23	0:0	2	]
op	8:24	0:0	2	[
water	8:25	0:0	2	8
op	8:26	0:0	2	]
water	8:27	0:0	2	,
water	8:29	0:0	2	stream
op	8:35	0:0	2	[
water	8:36	0:0	2	8
op	8:37	0:0	2	]
water	8:38	0:0	2	,
water	8:40	0:0	2	block
op	8:45	0:0	2	[
water	8:46	0:0	2	8
op	8:47	0:0	2	]
water	8:48	0:0	2	;
decl	9:4	9:20	2	int	n
water	9:9	0:0	2	,
decl	9:4	9:20	2	int	i_residue
water	11:4	0:0	2	pkt
op	11:7	0:0	2	[
water	11:8	0:0	2	3
op	11:9	0:0	2	]
op	11:11	0:0	2	|=
water	11:14	0:0	2	0
water	11:15	0:0	2	x80
water	11:18	0:0	2	;
if	12:4	17:4	2	(c -> use_odd)
cond	12:8	12:11	3	c -> use_odd
water	12:8	0:0	4	c
op	12:9	0:0	4	->
water	12:11	0:0	4	use_odd
stmts	13:4	17:4	3	
water	13:4	0:0	4	{
water	14:8	0:0	4	pkt
op	14:11	0:0	4	[
water	14:12	0:0	4	3
op	14:13	0:0	4	]
op	14:15	0:0	4	|=
water	14:18	0:0	4	0
water	14:19	0:0	4	x40
water	14:22	0:0	4	;
water	15:8	0:0	4	ck
op	15:11	0:0	4	=
water	15:13	0:0	4	c
op	15:14	0:0	4	->
water	15:16	0:0	4	o_ck
water	15:20	0:0	4	;
water	16:8	0:0	4	kk
op	16:11	0:0	4	=
water	16:13	0:0	4	c
op	16:14	0:0	4	->
water	16:16	0:0	4	o_kk
water	16:20	0:0	4	;
water	17:4	0:0	4	}
else	18:4	22:4	2
stmts	19:4	22:4	3	
water	19:4	0:0	4	{
water	20:8	0:0	4	ck
op	20:11	0:0	4	=
water	20:13	0:0	4	c
op	20:14	0:0	4	->
water	20:16	0:0	4	e_ck
water	20:20	0:0	4	;
water	21:8	0:0	4	kk
op	21:11	0:0	4	=
water	21:13	0:0	4	c
op	21:14	0:0	4	->
water	21:16	0:0	4	e_kk
water	21:20	0:0	4	;
water	22:4	0:0	4	}
water	24:4	0:0	2	i_hdr
op	24:10	0:0	2	=
water	24:12	0:0	2	4
water	24:13	0:0	2	;
if	25:4	29:4	2	(pkt [ 3 ] & 0 x20)
cond	25:8	25:16	3	pkt [ 3 ] & 0 x20
water	25:8	0:0	4	pkt
op	25:11	0:0	4	[
water	25:12	0:0	4	3
op	25:13	0:0	4	]
op	25:14	0:0	4	&
water	25:15	0:0	4	0
water	25:16	0:0	4	x20
stmts	26:4	29:4	3	
water	26:4	0:0	4	{
water	28:8	0:0	4	i_hdr
op	28:14	0:0	4	+=
water	28:17	0:0	4	pkt
op	28:20	0:0	4	[
water	28:21	0:0	4	4
op	28:22	0:0	4	]
op	28:24	0:0	4	+
water	28:26	0:0	4	1
water	28:27	0:0	4	;
water	29:4	0:0	4	}
water	30:4	0:0	2	n
op	30:6	0:0	2	=
water	30:8	0:0	2	(
water	30:9	0:0	2	i_pkt_size
op	30:20	0:0	2	-
water	30:22	0:0	2	i_hdr
water	30:27	0:0	2	)
op	30:29	0:0	2	/
water	30:31	0:0	2	8
water	30:32	0:0	2	;
water	31:4	0:0	2	i_residue
op	31:14	0:0	2	=
water	31:16	0:0	2	(
water	31:17	0:0	2	i_pkt_size
op	31:28	0:0	2	-
water	31:30	0:0	2	i_hdr
water	31:35	0:0	2	)
op	31:37	0:0	2	%
water	31:39	0:0	2	8
water	31:40	0:0	2	;
if	32:4	36:4	2	(n <= 0)
cond	32:8	32:13	3	n <= 0
water	32:8	0:0	4	n
op	32:10	0:0	4	<=
water	32:13	0:0	4	0
stmts	33:4	36:4	3	
water	33:4	0:0	4	{
water	34:8	0:0	4	pkt
op	34:11	0:0	4	[
water	34:12	0:0	4	3
op	34:13	0:0	4	]
op	34:15	0:0	4	&=
water	34:18	0:0	4	0
water	34:19	0:0	4	x3f
water	34:22	0:0	4	;
return	35:8	35:14	4	
water	36:4	0:0	4	}
for	38:4	41:4	2	(i = 0 ;i < 8;i ++)
forinit	38:9	38:14	3	i = 0 ;
water	38:9	0:0	4	i
op	38:11	0:0	4	=
water	38:13	0:0	4	0
water	38:14	0:0	4	;
cond	38:16	38:20	3	i < 8
water	38:16	0:0	4	i
op	38:18	0:0	4	<
water	38:20	0:0	4	8
forexpr	38:23	38:24	3	i ++
water	38:23	0:0	4	i
op	38:24	0:0	4	++
stmts	39:4	41:4	3	
water	39:4	0:0	4	{
water	40:8	0:0	4	ib
op	40:10	0:0	4	[
water	40:11	0:0	4	n
op	40:12	0:0	4	+
water	40:13	0:0	4	1
op	40:14	0:0	4	]
op	40:15	0:0	4	[
water	40:16	0:0	4	i
op	40:17	0:0	4	]
op	40:19	0:0	4	=
water	40:21	0:0	4	0
water	40:22	0:0	4	;
water	41:4	0:0	4	}
for	42:4	49:4	2	(i = n ;i > 0;i --)
forinit	42:9	42:14	3	i = n ;
water	42:9	0:0	4	i
op	42:11	0:0	4	=
water	42:13	0:0	4	n
water	42:14	0:0	4	;
cond	42:16	42:21	3	i > 0
water	42:16	0:0	4	i
op	42:19	0:0	4	>
water	42:21	0:0	4	0
forexpr	42:24	42:25	3	i --
water	42:24	0:0	4	i
op	42:25	0:0	4	--
stmts	43:4	49:4	3	
water	43:4	0:0	4	{
for	44:8	47:8	4	(j = 0 ;j < 8;j ++)
forinit	44:13	44:18	5	j = 0 ;
water	44:13	0:0	6	j
op	44:15	0:0	6	=
water	44:17	0:0	6	0
water	44:18	0:0	6	;
cond	44:20	44:24	5	j < 8
water	44:20	0:0	6	j
op	44:22	0:0	6	<
water	44:24	0:0	6	8
forexpr	44:27	44:28	5	j ++
water	44:27	0:0	6	j
op	44:28	0:0	6	++
stmts	45:8	47:8	5	
water	45:8	0:0	6	{
water	46:12	0:0	6	block
op	46:17	0:0	6	[
water	46:18	0:0	6	j
op	46:19	0:0	6	]
op	46:21	0:0	6	=
water	46:23	0:0	6	pkt
op	46:26	0:0	6	[
water	46:27	0:0	6	i_hdr
op	46:32	0:0	6	+
water	46:33	0:0	6	8
op	46:34	0:0	6	*
water	46:35	0:0	6	(
water	46:36	0:0	6	i
op	46:37	0:0	6	-
water	46:38	0:0	6	1
water	46:39	0:0	6	)
op	46:40	0:0	6	+
water	46:41	0:0	6	j
op	46:42	0:0	6	]
op	46:44	0:0	6	^
water	46:45	0:0	6	ib
op	46:47	0:0	6	[
water	46:48	0:0	6	i
op	46:49	0:0	6	+
water	46:50	0:0	6	1
op	46:51	0:0	6	]
op	46:52	0:0	6	[
water	46:53	0:0	6	j
op	46:54	0:0	6	]
water	46:55	0:0	6	;
water	47:8	0:0	6	}
call	48:8	48:42	4	csa_BlockCypher
arg	48:25	48:27	5	kk
water	48:25	0:0	6	kk
arg	48:29	48:34	5	block
water	48:29	0:0	6	block
arg	48:36	48:42	5	ib[i]
water	48:36	0:0	6	ib
op	48:38	0:0	6	[
water	48:39	0:0	6	i
op	48:40	0:0	6	]
water	48:43	0:0	4	;
water	49:4	0:0	4	}
call	51:4	51:46	2	csa_StreamCypher
arg	51:22	51:23	3	c
water	51:22	0:0	4	c
arg	51:25	51:26	3	1
water	51:25	0:0	4	1
arg	51:28	51:30	3	ck
water	51:28	0:0	4	ck
arg	51:32	51:37	3	ib[1]
water	51:32	0:0	4	ib
op	51:34	0:0	4	[
water	51:35	0:0	4	1
op	51:36	0:0	4	]
arg	51:39	51:46	3	stream
water	51:39	0:0	4	stream
water	51:47	0:0	2	;
for	52:4	55:4	2	(i = 0 ;i < 8;i ++)
forinit	52:9	52:14	3	i = 0 ;
water	52:9	0:0	4	i
op	52:11	0:0	4	=
water	52:13	0:0	4	0
water	52:14	0:0	4	;
cond	52:16	52:20	3	i < 8
water	52:16	0:0	4	i
op	52:18	0:0	4	<
water	52:20	0:0	4	8
forexpr	52:23	52:24	3	i ++
water	52:23	0:0	4	i
op	52:24	0:0	4	++
stmts	53:4	55:4	3	
water	53:4	0:0	4	{
water	54:8	0:0	4	pkt
op	54:11	0:0	4	[
water	54:12	0:0	4	i_hdr
op	54:17	0:0	4	+
water	54:18	0:0	4	i
op	54:19	0:0	4	]
op	54:21	0:0	4	=
water	54:23	0:0	4	ib
op	54:25	0:0	4	[
water	54:26	0:0	4	1
op	54:27	0:0	4	]
op	54:28	0:0	4	[
water	54:29	0:0	4	i
op	54:30	0:0	4	]
water	54:31	0:0	4	;
water	55:4	0:0	4	}
for	56:4	63:4	2	(i = 2 ;i < n + 1;i ++)
forinit	56:9	56:14	3	i = 2 ;
water	56:9	0:0	4	i
op	56:11	0:0	4	=
water	56:13	0:0	4	2
water	56:14	0:0	4	;
cond	56:16	56:22	3	i < n + 1
water	56:16	0:0	4	i
op	56:18	0:0	4	<
water	56:20	0:0	4	n
op	56:21	0:0	4	+
water	56:22	0:0	4	1
forexpr	56:25	56:26	3	i ++
water	56:25	0:0	4	i
op	56:26	0:0	4	++
stmts	57:4	63:4	3	
water	57:4	0:0	4	{
call	58:8	58:49	4	csa_StreamCypher
arg	58:26	58:27	5	c
water	58:26	0:0	6	c
arg	58:29	58:30	5	0
water	58:29	0:0	6	0
arg	58:32	58:34	5	ck
water	58:32	0:0	6	ck
arg	58:36	58:40	5	NULL
water	58:36	0:0	6	NULL
arg	58:42	58:49	5	stream
water	58:42	0:0	6	stream
water	58:50	0:0	4	;
for	59:8	62:8	4	(j = 0 ;j < 8;j ++)
forinit	59:13	59:18	5	j = 0 ;
water	59:13	0:0	6	j
op	59:15	0:0	6	=
water	59:17	0:0	6	0
water	59:18	0:0	6	;
cond	59:20	59:24	5	j < 8
water	59:20	0:0	6	j
op	59:22	0:0	6	<
water	59:24	0:0	6	8
forexpr	59:27	59:28	5	j ++
water	59:27	0:0	6	j
op	59:28	0:0	6	++
stmts	60:8	62:8	5	
water	60:8	0:0	6	{
water	61:12	0:0	6	pkt
op	61:15	0:0	6	[
water	61:16	0:0	6	i_hdr
op	61:21	0:0	6	+
water	61:22	0:0	6	8
op	61:23	0:0	6	*
water	61:24	0:0	6	(
water	61:25	0:0	6	i
op	61:26	0:0	6	-
water	61:27	0:0	6	1
water	61:28	0:0	6	)
op	61:29	0:0	6	+
water	61:30	0:0	6	j
op	61:31	0:0	6	]
op	61:33	0:0	6	=
water	61:35	0:0	6	ib
op	61:37	0:0	6	[
water	61:38	0:0	6	i
op	61:39	0:0	6	]
op	61:40	0:0	6	[
water	61:41	0:0	6	j
op	61:42	0:0	6	]
op	61:44	0:0	6	^
water	61:46	0:0	6	stream
op	61:52	0:0	6	[
water	61:53	0:0	6	j
op	61:54	0:0	6	]
water	61:55	0:0	6	;
water	62:8	0:0	6	}
water	63:4	0:0	4	}
if	64:4	71:4	2	(i_residue > 0)
cond	64:8	64:20	3	i_residue > 0
water	64:8	0:0	4	i_residue
op	64:18	0:0	4	>
water	64:20	0:0	4	0
stmts	65:4	71:4	3	
water	65:4	0:0	4	{
call	66:8	66:49	4	csa_StreamCypher
arg	66:26	66:27	5	c
water	66:26	0:0	6	c
arg	66:29	66:30	5	0
water	66:29	0:0	6	0
arg	66:32	66:34	5	ck
water	66:32	0:0	6	ck
arg	66:36	66:40	5	NULL
water	66:36	0:0	6	NULL
arg	66:42	66:49	5	stream
water	66:42	0:0	6	stream
water	66:50	0:0	4	;
for	67:8	70:8	4	(j = 0 ;j < i_residue;j ++)
forinit	67:13	67:18	5	j = 0 ;
water	67:13	0:0	6	j
op	67:15	0:0	6	=
water	67:17	0:0	6	0
water	67:18	0:0	6	;
cond	67:20	67:24	5	j < i_residue
water	67:20	0:0	6	j
op	67:22	0:0	6	<
water	67:24	0:0	6	i_residue
forexpr	67:35	67:36	5	j ++
water	67:35	0:0	6	j
op	67:36	0:0	6	++
stmts	68:8	70:8	5	
water	68:8	0:0	6	{
water	69:12	0:0	6	pkt
op	69:15	0:0	6	[
water	69:16	0:0	6	i_pkt_size
op	69:27	0:0	6	-
water	69:29	0:0	6	i_residue
op	69:39	0:0	6	+
water	69:41	0:0	6	j
op	69:42	0:0	6	]
op	69:44	0:0	6	^=
water	69:47	0:0	6	stream
op	69:53	0:0	6	[
water	69:54	0:0	6	j
op	69:55	0:0	6	]
water	69:56	0:0	6	;
water	70:8	0:0	6	}
water	71:4	0:0	4	}
