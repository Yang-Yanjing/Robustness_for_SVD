func	2:0	84:0	0	int	RenderPhosphor
params	2:18	0:0	1	
param	2:20	2:38	2	filter_t *	p_filter
param	3:20	3:36	2	picture_t *	p_dst
param	4:20	4:31	2	int	i_order
param	4:33	4:45	2	int	i_field
stmnts	6:4	83:22	1	
call	6:4	6:29	2	assert
arg	6:12	6:29	3	p_filter!=NULL
water	6:12	0:0	4	p_filter
op	6:21	0:0	4	!=
water	6:24	0:0	4	NULL
water	6:30	0:0	2	;
call	7:4	7:26	2	assert
arg	7:12	7:26	3	p_dst!=NULL
water	7:12	0:0	4	p_dst
op	7:18	0:0	4	!=
water	7:21	0:0	4	NULL
water	7:27	0:0	2	;
call	8:4	8:41	2	assert
arg	8:12	8:41	3	i_order>=0&&i_order<=2
water	8:12	0:0	4	i_order
op	8:20	0:0	4	>=
water	8:23	0:0	4	0
op	8:25	0:0	4	&&
water	8:28	0:0	4	i_order
op	8:36	0:0	4	<=
water	8:39	0:0	4	2
water	8:42	0:0	2	;
call	9:4	9:41	2	assert
arg	9:12	9:41	3	i_field==0||i_field==1
water	9:12	0:0	4	i_field
op	9:20	0:0	4	==
water	9:23	0:0	4	0
op	9:25	0:0	4	||
water	9:28	0:0	4	i_field
op	9:36	0:0	4	==
water	9:39	0:0	4	1
water	9:42	0:0	2	;
decl	10:4	10:41	2	filter_sys_t	*p_sys
op	10:24	0:0	2	=
water	10:26	0:0	2	p_filter
op	10:34	0:0	2	->
water	10:36	0:0	2	p_sys
decl	12:4	12:56	2	picture_t	*p_in
op	12:21	0:0	2	=
water	12:23	0:0	2	p_sys
op	12:28	0:0	2	->
water	12:30	0:0	2	pp_history
op	12:40	0:0	2	[
water	12:41	0:0	2	HISTORY_SIZE
op	12:53	0:0	2	-
water	12:54	0:0	2	1
op	12:55	0:0	2	]
decl	13:4	13:56	2	picture_t	*p_old
op	13:21	0:0	2	=
water	13:23	0:0	2	p_sys
op	13:28	0:0	2	->
water	13:30	0:0	2	pp_history
op	13:40	0:0	2	[
water	13:41	0:0	2	HISTORY_SIZE
op	13:53	0:0	2	-
water	13:54	0:0	2	2
op	13:55	0:0	2	]
if	15:4	16:20	2	(! p_old)
cond	15:8	15:9	3	! p_old
op	15:8	0:0	4	!
water	15:9	0:0	4	p_old
stmts	16:8	16:20	3	
water	16:8	0:0	4	p_old
op	16:14	0:0	4	=
water	16:16	0:0	4	p_in
water	16:20	0:0	4	;
if	18:4	19:27	2	(! p_in)
cond	18:8	18:9	3	! p_in
op	18:8	0:0	4	!
water	18:9	0:0	4	p_in
stmts	19:8	19:27	3	
return	19:8	19:27	4	VLC_EGENERIC
water	19:15	0:0	5	VLC_EGENERIC
call	20:4	20:26	2	assert
arg	20:12	20:26	3	p_old!=NULL
water	20:12	0:0	4	p_old
op	20:18	0:0	4	!=
water	20:21	0:0	4	NULL
water	20:27	0:0	2	;
call	21:4	21:25	2	assert
arg	21:12	21:25	3	p_in!=NULL
water	21:12	0:0	4	p_in
op	21:17	0:0	4	!=
water	21:20	0:0	4	NULL
water	21:26	0:0	2	;
decl	23:4	23:33	2	picture_t	*p_in_top
op	23:27	0:0	2	=
water	23:29	0:0	2	p_in
decl	24:4	24:33	2	picture_t	*p_in_bottom
op	24:27	0:0	2	=
water	24:29	0:0	2	p_in
if	27:4	33:4	2	(i_order == 0)
cond	27:8	27:19	3	i_order == 0
water	27:8	0:0	4	i_order
op	27:16	0:0	4	==
water	27:19	0:0	4	0
stmts	28:4	33:4	3	
water	28:4	0:0	4	{
if	29:8	30:31	4	(i_field == 0)
cond	29:12	29:23	5	i_field == 0
water	29:12	0:0	6	i_field
op	29:20	0:0	6	==
water	29:23	0:0	6	0
stmts	30:12	30:31	5	
water	30:12	0:0	6	p_in_bottom
op	30:24	0:0	6	=
water	30:26	0:0	6	p_old
water	30:31	0:0	6	;
else	31:8	32:28	4
stmts	32:12	32:28	5	
water	32:12	0:0	6	p_in_top
op	32:21	0:0	6	=
water	32:23	0:0	6	p_old
water	32:28	0:0	6	;
water	33:4	0:0	4	}
decl	34:4	34:36	2	compose_chroma_t	cc
op	34:24	0:0	2	=
water	34:26	0:0	2	CC_ALTLINE
if	35:4	61:4	2	(2 * p_sys -> chroma -> p [ 1 ] . h . num == p_sys -> chroma -> p [ 1 ] . h . den && 2 * p_sys -> chroma -> p [ 2 ] . h . num == p_sys -> chroma -> p [ 2 ] . h . den)
cond	35:8	36:63	3	2 * p_sys -> chroma -> p [ 1 ] . h . num == p_sys -> chroma -> p [ 1 ] . h . den && 2 * p_sys -> chroma -> p [ 2 ] . h . num == p_sys -> chroma -> p [ 2 ] . h . den
water	35:8	0:0	4	2
op	35:10	0:0	4	*
water	35:12	0:0	4	p_sys
op	35:17	0:0	4	->
water	35:19	0:0	4	chroma
op	35:25	0:0	4	->
water	35:27	0:0	4	p
op	35:28	0:0	4	[
water	35:29	0:0	4	1
op	35:30	0:0	4	]
op	35:31	0:0	4	.
water	35:32	0:0	4	h
op	35:33	0:0	4	.
water	35:34	0:0	4	num
op	35:38	0:0	4	==
water	35:41	0:0	4	p_sys
op	35:46	0:0	4	->
water	35:48	0:0	4	chroma
op	35:54	0:0	4	->
water	35:56	0:0	4	p
op	35:57	0:0	4	[
water	35:58	0:0	4	1
op	35:59	0:0	4	]
op	35:60	0:0	4	.
water	35:61	0:0	4	h
op	35:62	0:0	4	.
water	35:63	0:0	4	den
op	35:67	0:0	4	&&
water	36:8	0:0	4	2
op	36:10	0:0	4	*
water	36:12	0:0	4	p_sys
op	36:17	0:0	4	->
water	36:19	0:0	4	chroma
op	36:25	0:0	4	->
water	36:27	0:0	4	p
op	36:28	0:0	4	[
water	36:29	0:0	4	2
op	36:30	0:0	4	]
op	36:31	0:0	4	.
water	36:32	0:0	4	h
op	36:33	0:0	4	.
water	36:34	0:0	4	num
op	36:38	0:0	4	==
water	36:41	0:0	4	p_sys
op	36:46	0:0	4	->
water	36:48	0:0	4	chroma
op	36:54	0:0	4	->
water	36:56	0:0	4	p
op	36:57	0:0	4	[
water	36:58	0:0	4	2
op	36:59	0:0	4	]
op	36:60	0:0	4	.
water	36:61	0:0	4	h
op	36:62	0:0	4	.
water	36:63	0:0	4	den
stmts	37:4	61:4	3	
water	37:4	0:0	4	{
switch	39:8	60:8	4	(p_sys -> phosphor . i_chroma_for_420)
cond	39:16	39:32	5	p_sys -> phosphor . i_chroma_for_420
water	39:16	0:0	6	p_sys
op	39:21	0:0	6	->
water	39:23	0:0	6	phosphor
op	39:31	0:0	6	.
water	39:32	0:0	6	i_chroma_for_420
stmts	40:8	60:8	5	
water	40:8	0:0	6	{
label	41:8	41:21	6	case PC_BLEND :
water	42:12	0:0	6	cc
op	42:15	0:0	6	=
water	42:17	0:0	6	CC_MERGE
water	42:25	0:0	6	;
break	43:12	43:17	6	
label	44:8	44:22	6	case PC_LATEST :
if	45:12	46:34	6	(i_field == 0)
cond	45:16	45:27	7	i_field == 0
water	45:16	0:0	8	i_field
op	45:24	0:0	8	==
water	45:27	0:0	8	0
stmts	46:16	46:34	7	
water	46:16	0:0	8	cc
op	46:19	0:0	8	=
water	46:21	0:0	8	CC_SOURCE_TOP
water	46:34	0:0	8	;
else	47:12	48:37	6
stmts	48:16	48:37	7	
water	48:16	0:0	8	cc
op	48:19	0:0	8	=
water	48:21	0:0	8	CC_SOURCE_BOTTOM
water	48:37	0:0	8	;
break	49:12	49:17	6	
label	50:8	50:23	6	case PC_ALTLINE :
water	51:12	0:0	6	cc
op	51:15	0:0	6	=
water	51:17	0:0	6	CC_ALTLINE
water	51:27	0:0	6	;
break	52:12	52:17	6	
label	53:8	53:25	6	case PC_UPCONVERT :
water	54:12	0:0	6	cc
op	54:15	0:0	6	=
water	54:17	0:0	6	CC_UPCONVERT
water	54:29	0:0	6	;
break	55:12	55:17	6	
label	56:8	56:15	6	default :
call	58:12	58:20	6	assert
arg	58:19	58:20	7	0
water	58:19	0:0	8	0
water	58:21	0:0	6	;
break	59:12	59:17	6	
water	60:8	0:0	6	}
water	61:4	0:0	4	}
call	62:4	62:112	2	ComposeFrame
arg	62:18	62:26	3	p_filter
water	62:18	0:0	4	p_filter
arg	62:28	62:33	3	p_dst
water	62:28	0:0	4	p_dst
arg	62:35	62:43	3	p_in_top
water	62:35	0:0	4	p_in_top
arg	62:45	62:56	3	p_in_bottom
water	62:45	0:0	4	p_in_bottom
arg	62:58	62:60	3	cc
water	62:58	0:0	4	cc
arg	62:62	62:112	3	p_filter->fmt_in.video.i_chroma==VLC_CODEC_YV12
water	62:62	0:0	4	p_filter
op	62:70	0:0	4	->
water	62:72	0:0	4	fmt_in
op	62:78	0:0	4	.
water	62:79	0:0	4	video
op	62:84	0:0	4	.
water	62:85	0:0	4	i_chroma
op	62:94	0:0	4	==
water	62:97	0:0	4	VLC_CODEC_YV12
water	62:113	0:0	2	;
if	70:4	82:4	2	(p_sys -> phosphor . i_dimmer_strength > 0)
cond	70:8	70:44	3	p_sys -> phosphor . i_dimmer_strength > 0
water	70:8	0:0	4	p_sys
op	70:13	0:0	4	->
water	70:15	0:0	4	phosphor
op	70:23	0:0	4	.
water	70:24	0:0	4	i_dimmer_strength
op	70:42	0:0	4	>
water	70:44	0:0	4	0
stmts	71:4	82:4	3	
water	71:4	0:0	4	{
if	73:8	76:72	4	(vlc_CPU_MMXEXT ( ))
cond	73:12	73:27	5	vlc_CPU_MMXEXT ( )
call	73:12	73:27	6	vlc_CPU_MMXEXT
stmts	74:12	76:72	5	
call	74:12	76:71	6	DarkenFieldMMX
arg	74:28	74:33	7	p_dst
water	74:28	0:0	8	p_dst
arg	74:35	74:43	7	!i_field
op	74:35	0:0	8	!
water	74:36	0:0	8	i_field
arg	74:45	74:78	7	p_sys->phosphor.i_dimmer_strength
water	74:45	0:0	8	p_sys
op	74:50	0:0	8	->
water	74:52	0:0	8	phosphor
op	74:60	0:0	8	.
water	74:61	0:0	8	i_dimmer_strength
arg	75:16	76:71	7	p_sys->chroma->p[1].h.num==p_sys->chroma->p[1].h.den&&p_sys->chroma->p[2].h.num==p_sys->chroma->p[2].h.den
water	75:16	0:0	8	p_sys
op	75:21	0:0	8	->
water	75:23	0:0	8	chroma
op	75:29	0:0	8	->
water	75:31	0:0	8	p
op	75:32	0:0	8	[
water	75:33	0:0	8	1
op	75:34	0:0	8	]
op	75:35	0:0	8	.
water	75:36	0:0	8	h
op	75:37	0:0	8	.
water	75:38	0:0	8	num
op	75:42	0:0	8	==
water	75:45	0:0	8	p_sys
op	75:50	0:0	8	->
water	75:52	0:0	8	chroma
op	75:58	0:0	8	->
water	75:60	0:0	8	p
op	75:61	0:0	8	[
water	75:62	0:0	8	1
op	75:63	0:0	8	]
op	75:64	0:0	8	.
water	75:65	0:0	8	h
op	75:66	0:0	8	.
water	75:67	0:0	8	den
op	75:71	0:0	8	&&
water	76:16	0:0	8	p_sys
op	76:21	0:0	8	->
water	76:23	0:0	8	chroma
op	76:29	0:0	8	->
water	76:31	0:0	8	p
op	76:32	0:0	8	[
water	76:33	0:0	8	2
op	76:34	0:0	8	]
op	76:35	0:0	8	.
water	76:36	0:0	8	h
op	76:37	0:0	8	.
water	76:38	0:0	8	num
op	76:42	0:0	8	==
water	76:45	0:0	8	p_sys
op	76:50	0:0	8	->
water	76:52	0:0	8	chroma
op	76:58	0:0	8	->
water	76:60	0:0	8	p
op	76:61	0:0	8	[
water	76:62	0:0	8	2
op	76:63	0:0	8	]
op	76:64	0:0	8	.
water	76:65	0:0	8	h
op	76:66	0:0	8	.
water	76:67	0:0	8	den
water	76:72	0:0	6	;
else	77:8	81:72	4
stmts	79:12	81:72	5	
call	79:12	81:71	6	DarkenField
arg	79:25	79:30	7	p_dst
water	79:25	0:0	8	p_dst
arg	79:32	79:40	7	!i_field
op	79:32	0:0	8	!
water	79:33	0:0	8	i_field
arg	79:42	79:75	7	p_sys->phosphor.i_dimmer_strength
water	79:42	0:0	8	p_sys
op	79:47	0:0	8	->
water	79:49	0:0	8	phosphor
op	79:57	0:0	8	.
water	79:58	0:0	8	i_dimmer_strength
arg	80:16	81:71	7	p_sys->chroma->p[1].h.num==p_sys->chroma->p[1].h.den&&p_sys->chroma->p[2].h.num==p_sys->chroma->p[2].h.den
water	80:16	0:0	8	p_sys
op	80:21	0:0	8	->
water	80:23	0:0	8	chroma
op	80:29	0:0	8	->
water	80:31	0:0	8	p
op	80:32	0:0	8	[
water	80:33	0:0	8	1
op	80:34	0:0	8	]
op	80:35	0:0	8	.
water	80:36	0:0	8	h
op	80:37	0:0	8	.
water	80:38	0:0	8	num
op	80:42	0:0	8	==
water	80:45	0:0	8	p_sys
op	80:50	0:0	8	->
water	80:52	0:0	8	chroma
op	80:58	0:0	8	->
water	80:60	0:0	8	p
op	80:61	0:0	8	[
water	80:62	0:0	8	1
op	80:63	0:0	8	]
op	80:64	0:0	8	.
water	80:65	0:0	8	h
op	80:66	0:0	8	.
water	80:67	0:0	8	den
op	80:71	0:0	8	&&
water	81:16	0:0	8	p_sys
op	81:21	0:0	8	->
water	81:23	0:0	8	chroma
op	81:29	0:0	8	->
water	81:31	0:0	8	p
op	81:32	0:0	8	[
water	81:33	0:0	8	2
op	81:34	0:0	8	]
op	81:35	0:0	8	.
water	81:36	0:0	8	h
op	81:37	0:0	8	.
water	81:38	0:0	8	num
op	81:42	0:0	8	==
water	81:45	0:0	8	p_sys
op	81:50	0:0	8	->
water	81:52	0:0	8	chroma
op	81:58	0:0	8	->
water	81:60	0:0	8	p
op	81:61	0:0	8	[
water	81:62	0:0	8	2
op	81:63	0:0	8	]
op	81:64	0:0	8	.
water	81:65	0:0	8	h
op	81:66	0:0	8	.
water	81:67	0:0	8	den
water	81:72	0:0	6	;
water	82:4	0:0	4	}
return	83:4	83:22	2	VLC_SUCCESS
water	83:11	0:0	3	VLC_SUCCESS
