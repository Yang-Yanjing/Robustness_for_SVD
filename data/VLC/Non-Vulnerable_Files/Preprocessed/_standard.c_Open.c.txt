func	2:0	84:0	0	static int	Open
params	2:15	0:0	1	
param	2:17	2:38	2	vlc_object_t *	p_this
stmnts	0:0	83:14	1	
decl	4:4	4:58	2	sout_stream_t	*p_stream
op	4:34	0:0	2	=
water	4:36	0:0	2	(
water	4:37	0:0	2	sout_stream_t
op	4:50	0:0	2	*
water	4:51	0:0	2	)
water	4:52	0:0	2	p_this
decl	5:4	5:30	2	sout_stream_sys_t	*p_sys
decl	6:4	6:40	2	char	*psz_mux
water	6:17	0:0	2	,
decl	6:4	6:40	2	char	*psz_access
water	6:30	0:0	2	,
decl	6:4	6:40	2	char	*psz_url
decl	7:4	7:33	2	sout_access_out_t	*p_access
decl	8:4	8:42	2	int	ret
op	8:28	0:0	2	=
water	8:30	0:0	2	VLC_EGENERIC
call	9:4	10:35	2	config_ChainParse
arg	9:23	9:31	3	p_stream
water	9:23	0:0	4	p_stream
arg	9:33	9:48	3	SOUT_CFG_PREFIX
water	9:33	0:0	4	SOUT_CFG_PREFIX
arg	9:50	9:67	3	ppsz_sout_options
water	9:50	0:0	4	ppsz_sout_options
arg	10:19	10:35	3	p_stream->p_cfg
water	10:19	0:0	4	p_stream
op	10:27	0:0	4	->
water	10:29	0:0	4	p_cfg
water	10:36	0:0	2	;
water	11:4	0:0	2	psz_mux
op	11:12	0:0	2	=
call	11:14	11:69	2	var_GetNonEmptyString
arg	11:37	11:45	3	p_stream
water	11:37	0:0	4	p_stream
arg	11:47	11:69	3	SOUT_CFG_PREFIX"mux"
water	11:47	0:0	4	SOUT_CFG_PREFIX
water	11:63	0:0	4	"mux"
water	11:70	0:0	2	;
water	12:4	0:0	2	psz_access
op	12:15	0:0	2	=
call	12:17	12:75	2	var_GetNonEmptyString
arg	12:40	12:48	3	p_stream
water	12:40	0:0	4	p_stream
arg	12:50	12:75	3	SOUT_CFG_PREFIX"access"
water	12:50	0:0	4	SOUT_CFG_PREFIX
water	12:66	0:0	4	"access"
water	12:76	0:0	2	;
if	13:4	14:47	2	(! psz_access)
cond	13:8	13:9	3	! psz_access
op	13:8	0:0	4	!
water	13:9	0:0	4	psz_access
stmts	14:8	14:47	3	
water	14:8	0:0	4	psz_access
op	14:19	0:0	4	=
call	14:21	14:46	4	strdup
arg	14:28	14:46	5	p_stream->psz_name
water	14:28	0:0	6	p_stream
op	14:36	0:0	6	->
water	14:38	0:0	6	psz_name
water	14:47	0:0	4	;
water	15:4	0:0	2	psz_url
op	15:12	0:0	2	=
call	15:14	15:69	2	var_GetNonEmptyString
arg	15:37	15:45	3	p_stream
water	15:37	0:0	4	p_stream
arg	15:47	15:69	3	SOUT_CFG_PREFIX"dst"
water	15:47	0:0	4	SOUT_CFG_PREFIX
water	15:63	0:0	4	"dst"
water	15:70	0:0	2	;
if	16:4	32:4	2	(! psz_url)
cond	16:8	16:9	3	! psz_url
op	16:8	0:0	4	!
water	16:9	0:0	4	psz_url
stmts	17:4	32:4	3	
water	17:4	0:0	4	{
decl	18:8	18:82	4	char	*psz_bind
op	18:23	0:0	4	=
call	18:25	18:81	5	var_GetNonEmptyString
arg	18:48	18:56	6	p_stream
water	18:48	0:0	7	p_stream
arg	18:58	18:81	6	SOUT_CFG_PREFIX"bind"
water	18:58	0:0	7	SOUT_CFG_PREFIX
water	18:74	0:0	7	"bind"
if	19:8	31:8	4	(psz_bind)
cond	19:12	19:12	5	psz_bind
water	19:12	0:0	6	psz_bind
stmts	20:8	31:8	5	
water	20:8	0:0	6	{
decl	21:12	21:86	6	char	*psz_path
op	21:27	0:0	6	=
call	21:29	21:85	7	var_GetNonEmptyString
arg	21:52	21:60	8	p_stream
water	21:52	0:0	9	p_stream
arg	21:62	21:85	8	SOUT_CFG_PREFIX"path"
water	21:62	0:0	9	SOUT_CFG_PREFIX
water	21:78	0:0	9	"path"
if	22:12	28:12	6	(psz_path)
cond	22:16	22:16	7	psz_path
water	22:16	0:0	8	psz_path
stmts	23:12	28:12	7	
water	23:12	0:0	8	{
if	24:16	25:34	8	(asprintf (& psz_url ,"%s/%s" ,psz_bind ,psz_path ) == - 1)
cond	24:20	24:74	9	asprintf (& psz_url ,"%s/%s" ,psz_bind ,psz_path ) == - 1
call	24:20	24:68	10	asprintf
arg	24:30	24:38	11	&psz_url
op	24:30	0:0	12	&
water	24:31	0:0	12	psz_url
arg	24:40	24:47	11	"%s/%s"
water	24:40	0:0	12	"%s/%s"
arg	24:49	24:57	11	psz_bind
water	24:49	0:0	12	psz_bind
arg	24:59	24:68	11	psz_path
water	24:59	0:0	12	psz_path
op	24:70	0:0	10	==
op	24:73	0:0	10	-
water	24:74	0:0	10	1
stmts	25:20	25:34	9	
water	25:20	0:0	10	psz_url
op	25:28	0:0	10	=
water	25:30	0:0	10	NULL
water	25:34	0:0	10	;
call	26:16	26:29	8	free
arg	26:21	26:29	9	psz_bind
water	26:21	0:0	10	psz_bind
water	26:30	0:0	8	;
call	27:16	27:31	8	free
arg	27:22	27:31	9	psz_path
water	27:22	0:0	10	psz_path
water	27:32	0:0	8	;
water	28:12	0:0	8	}
else	29:12	30:34	6
stmts	30:16	30:34	7	
water	30:16	0:0	8	psz_url
op	30:24	0:0	8	=
water	30:26	0:0	8	psz_bind
water	30:34	0:0	8	;
water	31:8	0:0	6	}
water	32:4	0:0	4	}
water	33:4	0:0	2	p_sys
op	33:10	0:0	2	=
water	33:12	0:0	2	p_stream
op	33:20	0:0	2	->
water	33:22	0:0	2	p_sys
op	33:28	0:0	2	=
call	33:30	33:65	2	malloc
arg	33:38	33:65	3	sizeof(sout_stream_sys_t)
op	33:38	0:0	4	sizeof
water	33:44	0:0	4	(
water	33:46	0:0	4	sout_stream_sys_t
water	33:63	0:0	4	)
water	33:66	0:0	2	;
if	34:4	38:4	2	(! p_sys)
cond	34:8	34:9	3	! p_sys
op	34:8	0:0	4	!
water	34:9	0:0	4	p_sys
stmts	35:4	38:4	3	
water	35:4	0:0	4	{
water	36:8	0:0	4	ret
op	36:12	0:0	4	=
water	36:14	0:0	4	VLC_ENOMEM
water	36:24	0:0	4	;
goto	37:8	37:16	4	end
water	37:13	0:0	5	end
water	38:4	0:0	4	}
water	39:4	0:0	2	p_sys
op	39:9	0:0	2	->
water	39:11	0:0	2	p_session
op	39:21	0:0	2	=
water	39:23	0:0	2	NULL
water	39:27	0:0	2	;
if	40:4	41:16	2	(fixAccessMux (p_stream ,& psz_mux ,& psz_access ,psz_url ))
cond	40:8	40:63	3	fixAccessMux (p_stream ,& psz_mux ,& psz_access ,psz_url )
call	40:8	40:63	4	fixAccessMux
arg	40:22	40:30	5	p_stream
water	40:22	0:0	6	p_stream
arg	40:32	40:40	5	&psz_mux
op	40:32	0:0	6	&
water	40:33	0:0	6	psz_mux
arg	40:42	40:53	5	&psz_access
op	40:42	0:0	6	&
water	40:43	0:0	6	psz_access
arg	40:55	40:63	5	psz_url
water	40:55	0:0	6	psz_url
stmts	41:8	41:16	3	
goto	41:8	41:16	4	end
water	41:13	0:0	5	end
call	42:4	42:50	2	checkAccessMux
arg	42:20	42:28	3	p_stream
water	42:20	0:0	4	p_stream
arg	42:30	42:40	3	psz_access
water	42:30	0:0	4	psz_access
arg	42:42	42:50	3	psz_mux
water	42:42	0:0	4	psz_mux
water	42:51	0:0	2	;
water	43:4	0:0	2	p_access
op	43:13	0:0	2	=
call	43:15	43:64	2	sout_AccessOutNew
arg	43:34	43:42	3	p_stream
water	43:34	0:0	4	p_stream
arg	43:44	43:54	3	psz_access
water	43:44	0:0	4	psz_access
arg	43:56	43:64	3	psz_url
water	43:56	0:0	4	psz_url
water	43:65	0:0	2	;
if	44:4	49:4	2	(p_access == NULL)
cond	44:8	44:20	3	p_access == NULL
water	44:8	0:0	4	p_access
op	44:17	0:0	4	==
water	44:20	0:0	4	NULL
stmts	45:4	49:4	3	
water	45:4	0:0	4	{
call	46:8	47:46	4	msg_Err
arg	46:17	46:25	5	p_stream
water	46:17	0:0	6	p_stream
arg	46:27	46:76	5	"no suitable sout access module for `%s/%s://%s'"
water	46:27	0:0	6	"no suitable sout access module for `%s/%s://%s'"
arg	47:17	47:27	5	psz_access
water	47:17	0:0	6	psz_access
arg	47:29	47:36	5	psz_mux
water	47:29	0:0	6	psz_mux
arg	47:38	47:46	5	psz_url
water	47:38	0:0	6	psz_url
water	47:47	0:0	4	;
goto	48:8	48:16	4	end
water	48:13	0:0	5	end
water	49:4	0:0	4	}
water	50:4	0:0	2	p_sys
op	50:9	0:0	2	->
water	50:11	0:0	2	p_mux
op	50:17	0:0	2	=
call	50:19	50:68	2	sout_MuxNew
arg	50:32	50:48	3	p_stream->p_sout
water	50:32	0:0	4	p_stream
op	50:40	0:0	4	->
water	50:42	0:0	4	p_sout
arg	50:50	50:57	3	psz_mux
water	50:50	0:0	4	psz_mux
arg	50:59	50:68	3	p_access
water	50:59	0:0	4	p_access
water	50:69	0:0	2	;
if	51:4	67:4	2	(! p_sys -> p_mux)
cond	51:8	51:16	3	! p_sys -> p_mux
op	51:8	0:0	4	!
water	51:9	0:0	4	p_sys
op	51:14	0:0	4	->
water	51:16	0:0	4	p_mux
stmts	52:4	67:4	3	
water	52:4	0:0	4	{
decl	53:8	53:62	4	const char	*psz_mux_guess
op	53:34	0:0	4	=
call	53:36	53:61	5	getMuxFromAlias
arg	53:53	53:61	6	psz_mux
water	53:53	0:0	7	psz_mux
if	54:8	59:8	4	(psz_mux_guess &&strcmp (psz_mux_guess ,psz_mux ))
cond	54:12	54:60	5	psz_mux_guess &&strcmp (psz_mux_guess ,psz_mux )
water	54:12	0:0	6	psz_mux_guess
op	54:26	0:0	6	&&
call	54:29	54:60	6	strcmp
arg	54:37	54:50	7	psz_mux_guess
water	54:37	0:0	8	psz_mux_guess
arg	54:52	54:60	7	psz_mux
water	54:52	0:0	8	psz_mux
stmts	55:8	59:8	5	
water	55:8	0:0	6	{
call	56:12	57:39	6	msg_Dbg
arg	56:21	56:29	7	p_stream
water	56:21	0:0	8	p_stream
arg	56:31	56:76	7	"Couldn't open mux `%s', trying `%s' instead"
water	56:31	0:0	8	"Couldn't open mux `%s', trying `%s' instead"
arg	57:16	57:23	7	psz_mux
water	57:16	0:0	8	psz_mux
arg	57:25	57:39	7	psz_mux_guess
water	57:25	0:0	8	psz_mux_guess
water	57:40	0:0	6	;
water	58:12	0:0	6	p_sys
op	58:17	0:0	6	->
water	58:19	0:0	6	p_mux
op	58:25	0:0	6	=
call	58:27	58:82	6	sout_MuxNew
arg	58:40	58:56	7	p_stream->p_sout
water	58:40	0:0	8	p_stream
op	58:48	0:0	8	->
water	58:50	0:0	8	p_sout
arg	58:58	58:71	7	psz_mux_guess
water	58:58	0:0	8	psz_mux_guess
arg	58:73	58:82	7	p_access
water	58:73	0:0	8	p_access
water	58:83	0:0	6	;
water	59:8	0:0	6	}
if	60:8	66:8	4	(! p_sys -> p_mux)
cond	60:12	60:20	5	! p_sys -> p_mux
op	60:12	0:0	6	!
water	60:13	0:0	6	p_sys
op	60:18	0:0	6	->
water	60:20	0:0	6	p_mux
stmts	61:8	66:8	5	
water	61:8	0:0	6	{
call	62:12	63:45	6	msg_Err
arg	62:21	62:29	7	p_stream
water	62:21	0:0	8	p_stream
arg	62:31	62:77	7	"no suitable sout mux module for `%s/%s://%s'"
water	62:31	0:0	8	"no suitable sout mux module for `%s/%s://%s'"
arg	63:16	63:26	7	psz_access
water	63:16	0:0	8	psz_access
arg	63:28	63:35	7	psz_mux
water	63:28	0:0	8	psz_mux
arg	63:37	63:45	7	psz_url
water	63:37	0:0	8	psz_url
water	63:46	0:0	6	;
call	64:12	64:43	6	sout_AccessOutDelete
arg	64:34	64:43	7	p_access
water	64:34	0:0	8	p_access
water	64:44	0:0	6	;
goto	65:12	65:20	6	end
water	65:17	0:0	7	end
water	66:8	0:0	6	}
water	67:4	0:0	4	}
if	68:4	69:40	2	(var_GetBool (p_stream ,SOUT_CFG_PREFIX "sap" ))
cond	68:8	68:52	3	var_GetBool (p_stream ,SOUT_CFG_PREFIX "sap" )
call	68:8	68:52	4	var_GetBool
arg	68:21	68:29	5	p_stream
water	68:21	0:0	6	p_stream
arg	68:31	68:52	5	SOUT_CFG_PREFIX"sap"
water	68:31	0:0	6	SOUT_CFG_PREFIX
water	68:46	0:0	6	"sap"
stmts	69:8	69:40	3	
call	69:8	69:39	4	create_SDP
arg	69:20	69:28	5	p_stream
water	69:20	0:0	6	p_stream
arg	69:30	69:39	5	p_access
water	69:30	0:0	6	p_access
water	69:40	0:0	4	;
water	70:4	0:0	2	p_stream
op	70:12	0:0	2	->
water	70:14	0:0	2	pf_add
op	70:24	0:0	2	=
water	70:26	0:0	2	Add
water	70:29	0:0	2	;
water	71:4	0:0	2	p_stream
op	71:12	0:0	2	->
water	71:14	0:0	2	pf_del
op	71:24	0:0	2	=
water	71:26	0:0	2	Del
water	71:29	0:0	2	;
water	72:4	0:0	2	p_stream
op	72:12	0:0	2	->
water	72:14	0:0	2	pf_send
op	72:24	0:0	2	=
water	72:26	0:0	2	Send
water	72:30	0:0	2	;
if	73:4	74:39	2	(!sout_AccessOutCanControlPace (p_access ))
cond	73:8	73:48	3	!sout_AccessOutCanControlPace (p_access )
op	73:8	0:0	4	!
call	73:9	73:48	4	sout_AccessOutCanControlPace
arg	73:39	73:48	5	p_access
water	73:39	0:0	6	p_access
stmts	74:8	74:39	3	
water	74:8	0:0	4	p_stream
op	74:16	0:0	4	->
water	74:18	0:0	4	pace_nocontrol
op	74:33	0:0	4	=
water	74:35	0:0	4	true
water	74:39	0:0	4	;
water	75:4	0:0	2	ret
op	75:8	0:0	2	=
water	75:10	0:0	2	VLC_SUCCESS
water	75:21	0:0	2	;
call	76:4	76:72	2	msg_Dbg
arg	76:13	76:19	3	p_this
water	76:13	0:0	4	p_this
arg	76:21	76:41	3	"using `%s/%s://%s'"
water	76:21	0:0	4	"using `%s/%s://%s'"
arg	76:43	76:53	3	psz_access
water	76:43	0:0	4	psz_access
arg	76:55	76:62	3	psz_mux
water	76:55	0:0	4	psz_mux
arg	76:64	76:72	3	psz_url
water	76:64	0:0	4	psz_url
water	76:73	0:0	2	;
label	77:0	77:3	2	end :
if	78:4	79:21	2	(ret != VLC_SUCCESS)
cond	78:8	78:15	3	ret != VLC_SUCCESS
water	78:8	0:0	4	ret
op	78:12	0:0	4	!=
water	78:15	0:0	4	VLC_SUCCESS
stmts	79:8	79:21	3	
call	79:8	79:20	4	free
arg	79:14	79:20	5	p_sys
water	79:14	0:0	6	p_sys
water	79:21	0:0	4	;
call	80:4	80:21	2	free
arg	80:10	80:21	3	psz_access
water	80:10	0:0	4	psz_access
water	80:22	0:0	2	;
call	81:4	81:18	2	free
arg	81:10	81:18	3	psz_mux
water	81:10	0:0	4	psz_mux
water	81:19	0:0	2	;
call	82:4	82:18	2	free
arg	82:10	82:18	3	psz_url
water	82:10	0:0	4	psz_url
water	82:19	0:0	2	;
return	83:4	83:14	2	ret
water	83:11	0:0	3	ret
