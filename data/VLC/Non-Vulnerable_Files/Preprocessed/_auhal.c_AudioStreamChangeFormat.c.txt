func	2:0	63:0	0	static int	AudioStreamChangeFormat
params	2:34	0:0	1	
param	2:35	2:57	2	audio_output_t *	p_aout
param	2:59	2:84	2	AudioStreamID	i_stream_id
param	2:86	2:127	2	AudioStreamBasicDescription	change_format
stmnts	0:0	62:19	1	
decl	4:4	4:24	2	OSStatus	err
op	4:17	0:0	2	=
water	4:19	0:0	2	noErr
decl	5:4	5:24	2	int	retValue
op	5:17	0:0	2	=
water	5:19	0:0	2	false
decl	6:4	6:161	2	AudioObjectPropertyAddress	physicalFormatAddress
op	6:53	0:0	2	=
water	6:55	0:0	2	{
water	6:57	0:0	2	kAudioStreamPropertyPhysicalFormat
water	6:91	0:0	2	,
water	6:93	0:0	2	kAudioObjectPropertyScopeGlobal
water	6:124	0:0	2	,
water	6:126	0:0	2	kAudioObjectPropertyElementMaster
water	6:160	0:0	2	}
struct	7:4	7:48	2	<anonymous_7:4>
decl	7:13	7:29	3	vlc_mutex_t	lock
decl	7:31	7:46	3	vlc_cond_t	cond
decl	7:4	7:51	2	<anonymous_7:4>	w
call	8:4	8:79	2	msg_Dbg
arg	8:12	8:18	3	p_aout
water	8:12	0:0	4	p_aout
arg	8:20	8:79	3	STREAM_FORMAT_MSG("setting stream format: ",change_format)
call	8:20	8:78	4	STREAM_FORMAT_MSG
arg	8:38	8:63	5	"setting stream format: "
water	8:38	0:0	6	"setting stream format: "
arg	8:65	8:78	5	change_format
water	8:65	0:0	6	change_format
water	8:80	0:0	2	;
call	10:4	10:25	2	vlc_cond_init
arg	10:18	10:25	3	&w.cond
op	10:18	0:0	4	&
water	10:19	0:0	4	w
op	10:20	0:0	4	.
water	10:21	0:0	4	cond
water	10:26	0:0	2	;
call	11:4	11:26	2	vlc_mutex_init
arg	11:19	11:26	3	&w.lock
op	11:19	0:0	4	&
water	11:20	0:0	4	w
op	11:21	0:0	4	.
water	11:22	0:0	4	lock
water	11:27	0:0	2	;
call	12:4	12:26	2	vlc_mutex_lock
arg	12:19	12:26	3	&w.lock
op	12:19	0:0	4	&
water	12:20	0:0	4	w
op	12:21	0:0	4	.
water	12:22	0:0	4	lock
water	12:27	0:0	2	;
water	14:4	0:0	2	err
op	14:8	0:0	2	=
call	14:10	14:104	2	AudioObjectAddPropertyListener
arg	14:41	14:52	3	i_stream_id
water	14:41	0:0	4	i_stream_id
arg	14:54	14:76	3	&physicalFormatAddress
op	14:54	0:0	4	&
water	14:55	0:0	4	physicalFormatAddress
arg	14:78	14:92	3	StreamListener
water	14:78	0:0	4	StreamListener
arg	14:94	14:104	3	(void*)&w
water	14:94	0:0	4	(
water	14:95	0:0	4	void
op	14:100	0:0	4	*
water	14:101	0:0	4	)
op	14:102	0:0	4	&
water	14:103	0:0	4	w
water	14:105	0:0	2	;
if	15:4	19:4	2	(err != noErr)
cond	15:8	15:15	3	err != noErr
water	15:8	0:0	4	err
op	15:12	0:0	4	!=
water	15:15	0:0	4	noErr
stmts	15:22	19:4	3	
water	15:22	0:0	4	{
call	16:8	16:124	4	msg_Err
arg	16:16	16:22	5	p_aout
water	16:16	0:0	6	p_aout
arg	16:24	16:110	5	"AudioObjectAddPropertyListener for kAudioStreamPropertyPhysicalFormat failed [%4.4s]"
water	16:24	0:0	6	"AudioObjectAddPropertyListener for kAudioStreamPropertyPhysicalFormat failed [%4.4s]"
arg	16:112	16:124	5	(char*)&err
water	16:112	0:0	6	(
water	16:113	0:0	6	char
op	16:118	0:0	6	*
water	16:119	0:0	6	)
op	16:120	0:0	6	&
water	16:121	0:0	6	err
water	16:125	0:0	4	;
water	17:8	0:0	4	retValue
op	17:17	0:0	4	=
water	17:19	0:0	4	false
water	17:24	0:0	4	;
goto	18:8	18:16	4	out
water	18:13	0:0	5	out
water	19:4	0:0	4	}
water	21:4	0:0	2	err
op	21:8	0:0	2	=
call	21:10	22:51	2	AudioObjectSetPropertyData
arg	21:37	21:48	3	i_stream_id
water	21:37	0:0	4	i_stream_id
arg	21:50	21:72	3	&physicalFormatAddress
op	21:50	0:0	4	&
water	21:51	0:0	4	physicalFormatAddress
arg	21:74	21:75	3	0
water	21:74	0:0	4	0
arg	21:77	21:81	3	NULL
water	21:77	0:0	4	NULL
arg	21:83	21:118	3	sizeof(AudioStreamBasicDescription)
op	21:83	0:0	4	sizeof
water	21:89	0:0	4	(
water	21:90	0:0	4	AudioStreamBasicDescription
water	21:117	0:0	4	)
arg	22:37	22:51	3	&change_format
op	22:37	0:0	4	&
water	22:38	0:0	4	change_format
water	22:52	0:0	2	;
if	23:4	27:4	2	(err != noErr)
cond	23:8	23:15	3	err != noErr
water	23:8	0:0	4	err
op	23:12	0:0	4	!=
water	23:15	0:0	4	noErr
stmts	23:22	27:4	3	
water	23:22	0:0	4	{
call	24:8	24:79	4	msg_Err
arg	24:16	24:22	5	p_aout
water	24:16	0:0	6	p_aout
arg	24:24	24:65	5	"could not set the stream format [%4.4s]"
water	24:24	0:0	6	"could not set the stream format [%4.4s]"
arg	24:67	24:79	5	(char*)&err
water	24:67	0:0	6	(
water	24:68	0:0	6	char
op	24:73	0:0	6	*
water	24:74	0:0	6	)
op	24:75	0:0	6	&
water	24:76	0:0	6	err
water	24:80	0:0	4	;
water	25:8	0:0	4	retValue
op	25:17	0:0	4	=
water	25:19	0:0	4	false
water	25:24	0:0	4	;
goto	26:8	26:16	4	out
water	26:13	0:0	5	out
water	27:4	0:0	4	}
decl	32:4	32:45	2	AudioStreamBasicDescription	actual_format
decl	33:4	33:61	2	UInt32	i_param_size
op	33:24	0:0	2	=
op	33:26	0:0	2	sizeof
water	33:32	0:0	2	(
water	33:33	0:0	2	AudioStreamBasicDescription
water	33:60	0:0	2	)
for	34:4	51:4	2	( int i = 0 ;i < 9;i ++)
forinit	0:0	34:18	3	 int i = 0 ;
decl	34:9	34:18	4	int	i
op	34:15	0:0	4	=
water	34:17	0:0	4	0
cond	34:20	34:24	3	i < 9
water	34:20	0:0	4	i
op	34:22	0:0	4	<
water	34:24	0:0	4	9
forexpr	34:27	34:28	3	i ++
water	34:27	0:0	4	i
op	34:28	0:0	4	++
stmts	34:32	51:4	3	
water	34:32	0:0	4	{
if	36:8	40:8	4	(i > 0)
cond	36:12	36:16	5	i > 0
water	36:12	0:0	6	i
op	36:14	0:0	6	>
water	36:16	0:0	6	0
stmts	36:19	40:8	5	
water	36:19	0:0	6	{
decl	37:12	37:46	6	mtime_t	timeout
op	37:28	0:0	6	=
call	37:30	37:36	7	mdate
op	37:38	0:0	6	+
water	37:40	0:0	6	500000
if	38:12	39:50	6	(vlc_cond_timedwait (& w . cond ,& w . lock ,timeout ))
cond	38:16	38:60	7	vlc_cond_timedwait (& w . cond ,& w . lock ,timeout )
call	38:16	38:60	8	vlc_cond_timedwait
arg	38:35	38:42	9	&w.cond
op	38:35	0:0	10	&
water	38:36	0:0	10	w
op	38:37	0:0	10	.
water	38:38	0:0	10	cond
arg	38:44	38:51	9	&w.lock
op	38:44	0:0	10	&
water	38:45	0:0	10	w
op	38:46	0:0	10	.
water	38:47	0:0	10	lock
arg	38:53	38:60	9	timeout
water	38:53	0:0	10	timeout
stmts	39:16	39:50	7	
call	39:16	39:49	8	msg_Dbg
arg	39:24	39:30	9	p_aout
water	39:24	0:0	10	p_aout
arg	39:32	39:49	9	"reached timeout"
water	39:32	0:0	10	"reached timeout"
water	39:50	0:0	8	;
water	40:8	0:0	6	}
water	41:8	0:0	4	err
op	41:12	0:0	4	=
call	41:14	41:116	4	AudioObjectGetPropertyData
arg	41:41	41:52	5	i_stream_id
water	41:41	0:0	6	i_stream_id
arg	41:54	41:76	5	&physicalFormatAddress
op	41:54	0:0	6	&
water	41:55	0:0	6	physicalFormatAddress
arg	41:78	41:79	5	0
water	41:78	0:0	6	0
arg	41:81	41:85	5	NULL
water	41:81	0:0	6	NULL
arg	41:87	41:100	5	&i_param_size
op	41:87	0:0	6	&
water	41:88	0:0	6	i_param_size
arg	41:102	41:116	5	&actual_format
op	41:102	0:0	6	&
water	41:103	0:0	6	actual_format
water	41:117	0:0	4	;
call	42:8	42:82	4	msg_Dbg
arg	42:16	42:22	5	p_aout
water	42:16	0:0	6	p_aout
arg	42:24	42:82	5	STREAM_FORMAT_MSG("actual format in use: ",actual_format)
call	42:24	42:81	6	STREAM_FORMAT_MSG
arg	42:42	42:66	7	"actual format in use: "
water	42:42	0:0	8	"actual format in use: "
arg	42:68	42:81	7	actual_format
water	42:68	0:0	8	actual_format
water	42:83	0:0	4	;
if	43:8	49:8	4	(actual_format . mSampleRate == change_format . mSampleRate && actual_format . mFormatID == change_format . mFormatID && actual_format . mFramesPerPacket == change_format . mFramesPerPacket)
cond	43:12	45:60	5	actual_format . mSampleRate == change_format . mSampleRate && actual_format . mFormatID == change_format . mFormatID && actual_format . mFramesPerPacket == change_format . mFramesPerPacket
water	43:12	0:0	6	actual_format
op	43:25	0:0	6	.
water	43:26	0:0	6	mSampleRate
op	43:38	0:0	6	==
water	43:41	0:0	6	change_format
op	43:54	0:0	6	.
water	43:55	0:0	6	mSampleRate
op	43:67	0:0	6	&&
water	44:12	0:0	6	actual_format
op	44:25	0:0	6	.
water	44:26	0:0	6	mFormatID
op	44:36	0:0	6	==
water	44:39	0:0	6	change_format
op	44:52	0:0	6	.
water	44:53	0:0	6	mFormatID
op	44:63	0:0	6	&&
water	45:12	0:0	6	actual_format
op	45:25	0:0	6	.
water	45:26	0:0	6	mFramesPerPacket
op	45:43	0:0	6	==
water	45:46	0:0	6	change_format
op	45:59	0:0	6	.
water	45:60	0:0	6	mFramesPerPacket
stmts	45:78	49:8	5	
water	45:78	0:0	6	{
water	47:12	0:0	6	retValue
op	47:21	0:0	6	=
water	47:23	0:0	6	true
water	47:27	0:0	6	;
break	48:12	48:17	6	
water	49:8	0:0	6	}
water	51:4	0:0	4	}
label	52:0	52:3	2	out :
call	53:4	53:28	2	vlc_mutex_unlock
arg	53:21	53:28	3	&w.lock
op	53:21	0:0	4	&
water	53:22	0:0	4	w
op	53:23	0:0	4	.
water	53:24	0:0	4	lock
water	53:29	0:0	2	;
water	55:4	0:0	2	err
op	55:8	0:0	2	=
call	55:10	55:107	2	AudioObjectRemovePropertyListener
arg	55:44	55:55	3	i_stream_id
water	55:44	0:0	4	i_stream_id
arg	55:57	55:79	3	&physicalFormatAddress
op	55:57	0:0	4	&
water	55:58	0:0	4	physicalFormatAddress
arg	55:81	55:95	3	StreamListener
water	55:81	0:0	4	StreamListener
arg	55:97	55:107	3	(void*)&w
water	55:97	0:0	4	(
water	55:98	0:0	4	void
op	55:103	0:0	4	*
water	55:104	0:0	4	)
op	55:105	0:0	4	&
water	55:106	0:0	4	w
water	55:108	0:0	2	;
if	56:4	59:4	2	(err != noErr)
cond	56:8	56:15	3	err != noErr
water	56:8	0:0	4	err
op	56:12	0:0	4	!=
water	56:15	0:0	4	noErr
stmts	56:22	59:4	3	
water	56:22	0:0	4	{
call	57:8	57:88	4	msg_Err
arg	57:16	57:22	5	p_aout
water	57:16	0:0	6	p_aout
arg	57:24	57:74	5	"AudioStreamRemovePropertyListener failed [%4.4s]"
water	57:24	0:0	6	"AudioStreamRemovePropertyListener failed [%4.4s]"
arg	57:76	57:88	5	(char*)&err
water	57:76	0:0	6	(
water	57:77	0:0	6	char
op	57:82	0:0	6	*
water	57:83	0:0	6	)
op	57:84	0:0	6	&
water	57:85	0:0	6	err
water	57:89	0:0	4	;
water	58:8	0:0	4	retValue
op	58:17	0:0	4	=
water	58:19	0:0	4	false
water	58:24	0:0	4	;
water	59:4	0:0	4	}
call	60:4	60:29	2	vlc_mutex_destroy
arg	60:22	60:29	3	&w.lock
op	60:22	0:0	4	&
water	60:23	0:0	4	w
op	60:24	0:0	4	.
water	60:25	0:0	4	lock
water	60:30	0:0	2	;
call	61:4	61:28	2	vlc_cond_destroy
arg	61:21	61:28	3	&w.cond
op	61:21	0:0	4	&
water	61:22	0:0	4	w
op	61:23	0:0	4	.
water	61:24	0:0	4	cond
water	61:29	0:0	2	;
return	62:4	62:19	2	retValue
water	62:11	0:0	3	retValue
