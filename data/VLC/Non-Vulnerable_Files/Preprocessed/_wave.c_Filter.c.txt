func	2:0	75:0	0	static picture_t *	Filter
params	2:24	0:0	1	
param	2:26	2:44	2	filter_t *	p_filter
param	2:46	2:63	2	picture_t *	p_pic
stmnts	0:0	74:48	1	
decl	4:4	4:23	2	picture_t	*p_outpic
decl	5:4	5:15	2	int	i_index
decl	6:4	6:18	2	double	f_angle
decl	7:4	7:30	2	mtime_t	new_date
op	7:21	0:0	2	=
call	7:23	7:29	3	mdate
if	8:4	8:28	2	(! p_pic)
cond	8:8	8:9	3	! p_pic
op	8:8	0:0	4	!
water	8:9	0:0	4	p_pic
stmts	8:17	8:28	3	
return	8:17	8:28	4	NULL
water	8:24	0:0	5	NULL
water	9:4	0:0	2	p_outpic
op	9:13	0:0	2	=
call	9:15	9:43	2	filter_NewPicture
arg	9:34	9:43	3	p_filter
water	9:34	0:0	4	p_filter
water	9:44	0:0	2	;
if	10:4	14:4	2	(! p_outpic)
cond	10:8	10:9	3	! p_outpic
op	10:8	0:0	4	!
water	10:9	0:0	4	p_outpic
stmts	11:4	14:4	3	
water	11:4	0:0	4	{
call	12:8	12:31	4	picture_Release
arg	12:25	12:31	5	p_pic
water	12:25	0:0	6	p_pic
water	12:32	0:0	4	;
return	13:8	13:19	4	NULL
water	13:15	0:0	5	NULL
water	14:4	0:0	4	}
water	15:4	0:0	2	p_filter
op	15:12	0:0	2	->
water	15:14	0:0	2	p_sys
op	15:19	0:0	2	->
water	15:21	0:0	2	f_angle
op	15:29	0:0	2	+=
water	15:32	0:0	2	(
water	15:33	0:0	2	new_date
op	15:42	0:0	2	-
water	15:44	0:0	2	p_filter
op	15:52	0:0	2	->
water	15:54	0:0	2	p_sys
op	15:59	0:0	2	->
water	15:61	0:0	2	last_date
water	15:70	0:0	2	)
op	15:72	0:0	2	/
water	15:74	0:0	2	200000
op	15:80	0:0	2	.
water	15:81	0:0	2	0
water	15:82	0:0	2	;
water	16:4	0:0	2	p_filter
op	16:12	0:0	2	->
water	16:14	0:0	2	p_sys
op	16:19	0:0	2	->
water	16:21	0:0	2	last_date
op	16:31	0:0	2	=
water	16:33	0:0	2	new_date
water	16:41	0:0	2	;
water	17:4	0:0	2	f_angle
op	17:12	0:0	2	=
water	17:14	0:0	2	p_filter
op	17:22	0:0	2	->
water	17:24	0:0	2	p_sys
op	17:29	0:0	2	->
water	17:31	0:0	2	f_angle
water	17:38	0:0	2	;
for	18:4	73:4	2	(i_index = 0 ;i_index < p_pic -> i_planes;i_index ++)
forinit	18:9	18:21	3	i_index = 0 ;
water	18:9	0:0	4	i_index
op	18:17	0:0	4	=
water	18:19	0:0	4	0
water	18:21	0:0	4	;
cond	18:23	18:40	3	i_index < p_pic -> i_planes
water	18:23	0:0	4	i_index
op	18:31	0:0	4	<
water	18:33	0:0	4	p_pic
op	18:38	0:0	4	->
water	18:40	0:0	4	i_planes
forexpr	18:51	18:58	3	i_index ++
water	18:51	0:0	4	i_index
op	18:58	0:0	4	++
stmts	19:4	73:4	3	
water	19:4	0:0	4	{
decl	20:8	21:28	4	int	i_line
water	20:18	0:0	4	,
decl	20:8	21:28	4	int	i_num_lines
water	20:31	0:0	4	,
decl	20:8	21:28	4	int	i_visible_pitch
water	20:48	0:0	4	,
decl	20:8	21:28	4	int	i_pixel_pitch
water	20:63	0:0	4	,
decl	20:8	21:28	4	int	i_offset
water	20:73	0:0	4	,
decl	20:8	21:28	4	int	i_visible_pixels
decl	22:8	22:27	4	uint8_t	black_pixel
decl	23:8	23:29	4	uint8_t	*p_in
water	23:21	0:0	4	,
decl	23:8	23:29	4	uint8_t	*p_out
water	24:8	0:0	4	p_in
op	24:13	0:0	4	=
water	24:15	0:0	4	p_pic
op	24:20	0:0	4	->
water	24:22	0:0	4	p
op	24:23	0:0	4	[
water	24:24	0:0	4	i_index
op	24:31	0:0	4	]
op	24:32	0:0	4	.
water	24:33	0:0	4	p_pixels
water	24:41	0:0	4	;
water	25:8	0:0	4	p_out
op	25:14	0:0	4	=
water	25:16	0:0	4	p_outpic
op	25:24	0:0	4	->
water	25:26	0:0	4	p
op	25:27	0:0	4	[
water	25:28	0:0	4	i_index
op	25:35	0:0	4	]
op	25:36	0:0	4	.
water	25:37	0:0	4	p_pixels
water	25:45	0:0	4	;
water	26:8	0:0	4	i_num_lines
op	26:20	0:0	4	=
water	26:22	0:0	4	p_pic
op	26:27	0:0	4	->
water	26:29	0:0	4	p
op	26:30	0:0	4	[
water	26:31	0:0	4	i_index
op	26:38	0:0	4	]
op	26:39	0:0	4	.
water	26:40	0:0	4	i_visible_lines
water	26:55	0:0	4	;
water	27:8	0:0	4	i_visible_pitch
op	27:24	0:0	4	=
water	27:26	0:0	4	p_pic
op	27:31	0:0	4	->
water	27:33	0:0	4	p
op	27:34	0:0	4	[
water	27:35	0:0	4	i_index
op	27:42	0:0	4	]
op	27:43	0:0	4	.
water	27:44	0:0	4	i_visible_pitch
water	27:59	0:0	4	;
water	28:8	0:0	4	i_pixel_pitch
op	28:22	0:0	4	=
water	28:24	0:0	4	p_pic
op	28:29	0:0	4	->
water	28:31	0:0	4	p
op	28:32	0:0	4	[
water	28:33	0:0	4	i_index
op	28:40	0:0	4	]
op	28:41	0:0	4	.
water	28:42	0:0	4	i_pixel_pitch
water	28:55	0:0	4	;
switch	29:8	35:8	4	(p_filter -> fmt_in . video . i_chroma)
cond	29:16	29:39	5	p_filter -> fmt_in . video . i_chroma
water	29:16	0:0	6	p_filter
op	29:24	0:0	6	->
water	29:26	0:0	6	fmt_in
op	29:32	0:0	6	.
water	29:33	0:0	6	video
op	29:38	0:0	6	.
water	29:39	0:0	6	i_chroma
stmts	30:8	35:8	5	
water	30:8	0:0	6	{
water	31:12	0:0	6	CASE_PACKED_YUV_422
water	33:16	0:0	6	i_pixel_pitch
op	33:30	0:0	6	*=
water	33:33	0:0	6	2
water	33:34	0:0	6	;
break	34:16	34:21	6	
water	35:8	0:0	6	}
water	36:8	0:0	4	i_visible_pixels
op	36:25	0:0	4	=
water	36:27	0:0	4	i_visible_pitch
op	36:42	0:0	4	/
water	36:43	0:0	4	i_pixel_pitch
water	36:56	0:0	4	;
water	37:8	0:0	4	black_pixel
op	37:20	0:0	4	=
water	37:22	0:0	4	(
water	37:24	0:0	4	p_pic
op	37:29	0:0	4	->
water	37:31	0:0	4	i_planes
op	37:40	0:0	4	>
water	37:42	0:0	4	1
op	37:44	0:0	4	&&
water	37:47	0:0	4	i_index
op	37:55	0:0	4	==
water	37:58	0:0	4	Y_PLANE
water	37:66	0:0	4	)
water	37:68	0:0	4	?
water	37:70	0:0	4	0
water	37:71	0:0	4	x00
water	38:68	0:0	4	:
water	38:70	0:0	4	0
water	38:71	0:0	4	x80
water	38:74	0:0	4	;
for	40:8	72:8	4	(i_line = 0 ;i_line < i_num_lines;i_line ++)
forinit	40:13	40:24	5	i_line = 0 ;
water	40:13	0:0	6	i_line
op	40:20	0:0	6	=
water	40:22	0:0	6	0
water	40:24	0:0	6	;
cond	40:26	40:35	5	i_line < i_num_lines
water	40:26	0:0	6	i_line
op	40:33	0:0	6	<
water	40:35	0:0	6	i_num_lines
forexpr	40:49	40:55	5	i_line ++
water	40:49	0:0	6	i_line
op	40:55	0:0	6	++
stmts	41:8	72:8	5	
water	41:8	0:0	6	{
water	43:12	0:0	6	i_offset
op	43:21	0:0	6	=
call	43:23	46:32	6	(int)
arg	43:30	46:32	7	(double)(i_visible_pixels)*sin(f_angle+10.0*(double)i_line/(double)i_num_lines)/20.0
call	43:30	43:55	8	(double)
arg	43:39	43:55	9	i_visible_pixels
water	43:39	0:0	10	i_visible_pixels
call	44:25	45:69	8	*sin
arg	44:32	45:69	9	f_angle+10.0*(double)i_line/(double)i_num_lines
water	44:32	0:0	10	f_angle
op	44:40	0:0	10	+
water	44:42	0:0	10	10
op	44:44	0:0	10	.
water	44:45	0:0	10	0
op	44:47	0:0	10	*
water	44:49	0:0	10	(
water	44:50	0:0	10	double
water	44:56	0:0	10	)
water	44:57	0:0	10	i_line
op	45:47	0:0	10	/
water	45:49	0:0	10	(
water	45:50	0:0	10	double
water	45:56	0:0	10	)
water	45:57	0:0	10	i_num_lines
op	46:25	0:0	8	/
water	46:27	0:0	8	20
op	46:29	0:0	8	.
water	46:30	0:0	8	0
op	46:33	0:0	6	*
water	46:34	0:0	6	i_pixel_pitch
water	46:47	0:0	6	;
if	47:12	65:12	6	(i_offset)
cond	47:16	47:16	7	i_offset
water	47:16	0:0	8	i_offset
stmts	48:12	65:12	7	
water	48:12	0:0	8	{
if	49:16	56:16	8	(i_offset < 0)
cond	49:20	49:31	9	i_offset < 0
water	49:20	0:0	10	i_offset
op	49:29	0:0	10	<
water	49:31	0:0	10	0
stmts	50:16	56:16	9	
water	50:16	0:0	10	{
call	51:20	52:59	10	memcpy
arg	51:28	51:33	11	p_out
water	51:28	0:0	12	p_out
arg	51:35	51:50	11	p_in-i_offset
water	51:35	0:0	12	p_in
op	51:40	0:0	12	-
water	51:42	0:0	12	i_offset
arg	52:32	52:59	11	i_visible_pitch+i_offset
water	52:32	0:0	12	i_visible_pitch
op	52:48	0:0	12	+
water	52:50	0:0	12	i_offset
water	52:60	0:0	10	;
water	53:20	0:0	10	p_in
op	53:25	0:0	10	+=
water	53:28	0:0	10	p_pic
op	53:33	0:0	10	->
water	53:35	0:0	10	p
op	53:36	0:0	10	[
water	53:37	0:0	10	i_index
op	53:44	0:0	10	]
op	53:45	0:0	10	.
water	53:46	0:0	10	i_pitch
water	53:53	0:0	10	;
water	54:20	0:0	10	p_out
op	54:26	0:0	10	+=
water	54:29	0:0	10	p_outpic
op	54:37	0:0	10	->
water	54:39	0:0	10	p
op	54:40	0:0	10	[
water	54:41	0:0	10	i_index
op	54:48	0:0	10	]
op	54:49	0:0	10	.
water	54:50	0:0	10	i_pitch
water	54:57	0:0	10	;
call	55:20	55:69	10	memset
arg	55:28	55:44	11	p_out+i_offset
water	55:28	0:0	12	p_out
op	55:34	0:0	12	+
water	55:36	0:0	12	i_offset
arg	55:46	55:57	11	black_pixel
water	55:46	0:0	12	black_pixel
arg	55:59	55:69	11	-i_offset
op	55:59	0:0	12	-
water	55:60	0:0	12	i_offset
water	55:70	0:0	10	;
water	56:16	0:0	10	}
else	57:16	64:16	8
stmts	58:16	64:16	9	
water	58:16	0:0	10	{
call	59:20	60:59	10	memcpy
arg	59:28	59:44	11	p_out+i_offset
water	59:28	0:0	12	p_out
op	59:34	0:0	12	+
water	59:36	0:0	12	i_offset
arg	59:46	59:50	11	p_in
water	59:46	0:0	12	p_in
arg	60:32	60:59	11	i_visible_pitch-i_offset
water	60:32	0:0	12	i_visible_pitch
op	60:48	0:0	12	-
water	60:50	0:0	12	i_offset
water	60:60	0:0	10	;
call	61:20	61:57	10	memset
arg	61:28	61:33	11	p_out
water	61:28	0:0	12	p_out
arg	61:35	61:46	11	black_pixel
water	61:35	0:0	12	black_pixel
arg	61:48	61:57	11	i_offset
water	61:48	0:0	12	i_offset
water	61:58	0:0	10	;
water	62:20	0:0	10	p_in
op	62:25	0:0	10	+=
water	62:28	0:0	10	p_pic
op	62:33	0:0	10	->
water	62:35	0:0	10	p
op	62:36	0:0	10	[
water	62:37	0:0	10	i_index
op	62:44	0:0	10	]
op	62:45	0:0	10	.
water	62:46	0:0	10	i_pitch
water	62:53	0:0	10	;
water	63:20	0:0	10	p_out
op	63:26	0:0	10	+=
water	63:29	0:0	10	p_outpic
op	63:37	0:0	10	->
water	63:39	0:0	10	p
op	63:40	0:0	10	[
water	63:41	0:0	10	i_index
op	63:48	0:0	10	]
op	63:49	0:0	10	.
water	63:50	0:0	10	i_pitch
water	63:57	0:0	10	;
water	64:16	0:0	10	}
water	65:12	0:0	8	}
else	66:12	71:12	6
stmts	67:12	71:12	7	
water	67:12	0:0	8	{
call	68:16	68:53	8	memcpy
arg	68:24	68:29	9	p_out
water	68:24	0:0	10	p_out
arg	68:31	68:35	9	p_in
water	68:31	0:0	10	p_in
arg	68:37	68:53	9	i_visible_pitch
water	68:37	0:0	10	i_visible_pitch
water	68:54	0:0	8	;
water	69:16	0:0	8	p_in
op	69:21	0:0	8	+=
water	69:24	0:0	8	p_pic
op	69:29	0:0	8	->
water	69:31	0:0	8	p
op	69:32	0:0	8	[
water	69:33	0:0	8	i_index
op	69:40	0:0	8	]
op	69:41	0:0	8	.
water	69:42	0:0	8	i_pitch
water	69:49	0:0	8	;
water	70:16	0:0	8	p_out
op	70:22	0:0	8	+=
water	70:25	0:0	8	p_outpic
op	70:33	0:0	8	->
water	70:35	0:0	8	p
op	70:36	0:0	8	[
water	70:37	0:0	8	i_index
op	70:44	0:0	8	]
op	70:45	0:0	8	.
water	70:46	0:0	8	i_pitch
water	70:53	0:0	8	;
water	71:12	0:0	8	}
water	72:8	0:0	6	}
water	73:4	0:0	4	}
return	74:4	74:48	2	CopyInfoAndRelease(p_outpic,p_pic)
call	74:11	74:47	3	CopyInfoAndRelease
arg	74:31	74:39	4	p_outpic
water	74:31	0:0	5	p_outpic
arg	74:41	74:47	4	p_pic
water	74:41	0:0	5	p_pic
