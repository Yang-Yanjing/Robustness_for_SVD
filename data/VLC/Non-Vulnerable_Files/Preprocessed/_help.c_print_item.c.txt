func	2:0	124:0	0	static void	print_item
params	2:22	0:0	1	
param	2:23	2:40	2	const module_t *	m
param	2:42	2:69	2	const module_config_t *	item
param	3:23	3:54	2	const module_config_t * *	section
param	3:56	3:66	2	bool	color
param	3:68	3:77	2	bool	desc
stmnts	0:0	123:4	1	
decl	10:4	10:61	2	const char	*bra
op	10:20	0:0	2	=
water	10:22	0:0	2	OPTION_VALUE_SEP
water	10:39	0:0	2	"<"
water	10:42	0:0	2	,
decl	10:4	10:61	2	const char	*type
water	10:49	0:0	2	,
decl	10:4	10:61	2	const char	*ket
op	10:56	0:0	2	=
water	10:58	0:0	2	">"
decl	11:4	11:43	2	const char	*prefix
op	11:23	0:0	2	=
water	11:25	0:0	2	NULL
water	11:29	0:0	2	,
decl	11:4	11:43	2	const char	*suffix
op	11:39	0:0	2	=
water	11:41	0:0	2	""
decl	12:4	12:26	2	char	psz_buffer[10000]
switch	13:4	88:4	2	(CONFIG_CLASS (item -> i_type ))
cond	13:12	13:37	3	CONFIG_CLASS (item -> i_type )
call	13:12	13:37	4	CONFIG_CLASS
arg	13:25	13:37	5	item->i_type
water	13:25	0:0	6	item
op	13:29	0:0	6	->
water	13:31	0:0	6	i_type
stmts	14:4	88:4	3	
water	14:4	0:0	4	{
label	15:8	15:14	4	case 0 :
switch	16:12	29:12	4	(item -> i_type)
cond	16:20	16:26	5	item -> i_type
water	16:20	0:0	6	item
op	16:24	0:0	6	->
water	16:26	0:0	6	i_type
stmts	17:12	29:12	5	
water	17:12	0:0	6	{
label	18:16	18:41	6	case CONFIG_HINT_CATEGORY :
label	19:16	19:38	6	case CONFIG_HINT_USAGE :
call	20:20	21:60	6	printf
arg	20:27	20:67	7	color?GREEN"\n %s\n"GRAY:"\n %s\n"
water	20:27	0:0	8	color
water	20:33	0:0	8	?
water	20:35	0:0	8	GREEN
water	20:41	0:0	8	"\n %s\n"
water	20:51	0:0	8	GRAY
water	20:56	0:0	8	:
water	20:58	0:0	8	"\n %s\n"
arg	21:27	21:60	7	module_gettext(m,item->psz_text)
call	21:27	21:59	8	module_gettext
arg	21:42	21:43	9	m
water	21:42	0:0	10	m
arg	21:45	21:59	9	item->psz_text
water	21:45	0:0	10	item
op	21:49	0:0	10	->
water	21:51	0:0	10	psz_text
water	21:61	0:0	6	;
if	22:20	24:69	6	(desc && item -> psz_longtext != NULL)
cond	22:24	22:54	7	desc && item -> psz_longtext != NULL
water	22:24	0:0	8	desc
op	22:29	0:0	8	&&
water	22:32	0:0	8	item
op	22:36	0:0	8	->
water	22:38	0:0	8	psz_longtext
op	22:51	0:0	8	!=
water	22:54	0:0	8	NULL
stmts	23:24	24:69	7	
call	23:24	24:68	8	printf
arg	23:31	23:66	9	color?CYAN" %s\n"GRAY:" %s\n"
water	23:31	0:0	10	color
water	23:37	0:0	10	?
water	23:39	0:0	10	CYAN
water	23:44	0:0	10	" %s\n"
water	23:52	0:0	10	GRAY
water	23:57	0:0	10	:
water	23:59	0:0	10	" %s\n"
arg	24:31	24:68	9	module_gettext(m,item->psz_longtext)
call	24:31	24:67	10	module_gettext
arg	24:46	24:47	11	m
water	24:46	0:0	12	m
arg	24:49	24:67	11	item->psz_longtext
water	24:49	0:0	12	item
op	24:53	0:0	12	->
water	24:55	0:0	12	psz_longtext
water	24:69	0:0	8	;
break	25:20	25:25	6	
label	26:16	26:35	6	case CONFIG_SECTION :
op	27:20	0:0	6	*
water	27:21	0:0	6	section
op	27:29	0:0	6	=
water	27:31	0:0	6	item
water	27:35	0:0	6	;
break	28:20	28:25	6	
water	29:12	0:0	6	}
return	30:12	30:18	4	
label	31:8	31:31	4	case CONFIG_ITEM_STRING :
water	32:12	0:0	4	type
op	32:17	0:0	4	=
call	32:19	32:29	4	_
arg	32:21	32:29	5	"string"
water	32:21	0:0	6	"string"
water	32:30	0:0	4	;
if	33:12	45:12	4	(item -> list_count > 0)
cond	33:16	33:35	5	item -> list_count > 0
water	33:16	0:0	6	item
op	33:20	0:0	6	->
water	33:22	0:0	6	list_count
op	33:33	0:0	6	>
water	33:35	0:0	6	0
stmts	34:12	45:12	5	
water	34:12	0:0	6	{
water	35:16	0:0	6	bra
op	35:20	0:0	6	=
water	35:22	0:0	6	OPTION_VALUE_SEP
water	35:39	0:0	6	"{"
water	35:42	0:0	6	;
water	36:16	0:0	6	type
op	36:21	0:0	6	=
water	36:23	0:0	6	psz_buffer
water	36:33	0:0	6	;
water	37:16	0:0	6	psz_buffer
op	37:26	0:0	6	[
water	37:27	0:0	6	0
op	37:28	0:0	6	]
op	37:30	0:0	6	=
water	37:32	0:0	6	'\0'
water	37:36	0:0	6	;
for	38:16	43:16	6	(unsigned i = 0 ;i < item -> list_count;i ++)
forinit	38:21	38:35	7	unsigned i = 0 ;
water	38:21	0:0	8	unsigned
water	38:30	0:0	8	i
op	38:32	0:0	8	=
water	38:34	0:0	8	0
water	38:35	0:0	8	;
cond	38:37	38:47	7	i < item -> list_count
water	38:37	0:0	8	i
op	38:39	0:0	8	<
water	38:41	0:0	8	item
op	38:45	0:0	8	->
water	38:47	0:0	8	list_count
forexpr	38:59	38:60	7	i ++
water	38:59	0:0	8	i
op	38:60	0:0	8	++
stmts	39:16	43:16	7	
water	39:16	0:0	8	{
if	40:20	41:47	8	(i > 0)
cond	40:24	40:28	9	i > 0
water	40:24	0:0	10	i
op	40:26	0:0	10	>
water	40:28	0:0	10	0
stmts	41:24	41:47	9	
call	41:24	41:46	10	strcat
arg	41:31	41:41	11	psz_buffer
water	41:31	0:0	12	psz_buffer
arg	41:43	41:46	11	","
water	41:43	0:0	12	","
water	41:47	0:0	10	;
call	42:20	42:56	8	strcat
arg	42:27	42:37	9	psz_buffer
water	42:27	0:0	10	psz_buffer
arg	42:39	42:56	9	item->list.psz[i]
water	42:39	0:0	10	item
op	42:43	0:0	10	->
water	42:45	0:0	10	list
op	42:49	0:0	10	.
water	42:50	0:0	10	psz
op	42:53	0:0	10	[
water	42:54	0:0	10	i
op	42:55	0:0	10	]
water	42:57	0:0	8	;
water	43:16	0:0	8	}
water	44:16	0:0	6	ket
op	44:20	0:0	6	=
water	44:22	0:0	6	"}"
water	44:25	0:0	6	;
water	45:12	0:0	6	}
break	46:12	46:17	4	
label	47:8	47:32	4	case CONFIG_ITEM_INTEGER :
water	48:12	0:0	4	type
op	48:17	0:0	4	=
call	48:19	48:30	4	_
arg	48:21	48:30	5	"integer"
water	48:21	0:0	6	"integer"
water	48:31	0:0	4	;
if	49:12	54:12	4	(item -> min . i != 0 || item -> max . i != 0)
cond	49:16	49:51	5	item -> min . i != 0 || item -> max . i != 0
water	49:16	0:0	6	item
op	49:20	0:0	6	->
water	49:22	0:0	6	min
op	49:25	0:0	6	.
water	49:26	0:0	6	i
op	49:28	0:0	6	!=
water	49:31	0:0	6	0
op	49:33	0:0	6	||
water	49:36	0:0	6	item
op	49:40	0:0	6	->
water	49:42	0:0	6	max
op	49:45	0:0	6	.
water	49:46	0:0	6	i
op	49:48	0:0	6	!=
water	49:51	0:0	6	0
stmts	50:12	54:12	5	
water	50:12	0:0	6	{
call	51:16	52:55	6	sprintf
arg	51:25	51:35	7	psz_buffer
water	51:25	0:0	8	psz_buffer
arg	51:37	51:66	7	"%s [%"PRId64" .. %"PRId64"]"
water	51:37	0:0	8	"%s [%"
water	51:44	0:0	8	PRId64
water	51:50	0:0	8	" .. %"
water	51:57	0:0	8	PRId64
water	51:63	0:0	8	"]"
arg	52:25	52:29	7	type
water	52:25	0:0	8	type
arg	52:31	52:42	7	item->min.i
water	52:31	0:0	8	item
op	52:35	0:0	8	->
water	52:37	0:0	8	min
op	52:40	0:0	8	.
water	52:41	0:0	8	i
arg	52:44	52:55	7	item->max.i
water	52:44	0:0	8	item
op	52:48	0:0	8	->
water	52:50	0:0	8	max
op	52:53	0:0	8	.
water	52:54	0:0	8	i
water	52:56	0:0	6	;
water	53:16	0:0	6	type
op	53:21	0:0	6	=
water	53:23	0:0	6	psz_buffer
water	53:33	0:0	6	;
water	54:12	0:0	6	}
if	55:12	69:12	4	(item -> list_count > 0)
cond	55:16	55:35	5	item -> list_count > 0
water	55:16	0:0	6	item
op	55:20	0:0	6	->
water	55:22	0:0	6	list_count
op	55:33	0:0	6	>
water	55:35	0:0	6	0
stmts	56:12	69:12	5	
water	56:12	0:0	6	{
water	57:16	0:0	6	bra
op	57:20	0:0	6	=
water	57:22	0:0	6	OPTION_VALUE_SEP
water	57:39	0:0	6	"{"
water	57:42	0:0	6	;
water	58:16	0:0	6	type
op	58:21	0:0	6	=
water	58:23	0:0	6	psz_buffer
water	58:33	0:0	6	;
water	59:16	0:0	6	psz_buffer
op	59:26	0:0	6	[
water	59:27	0:0	6	0
op	59:28	0:0	6	]
op	59:30	0:0	6	=
water	59:32	0:0	6	'\0'
water	59:36	0:0	6	;
for	60:16	67:16	6	(unsigned i = 0 ;i < item -> list_count;i ++)
forinit	60:21	60:35	7	unsigned i = 0 ;
water	60:21	0:0	8	unsigned
water	60:30	0:0	8	i
op	60:32	0:0	8	=
water	60:34	0:0	8	0
water	60:35	0:0	8	;
cond	60:37	60:47	7	i < item -> list_count
water	60:37	0:0	8	i
op	60:39	0:0	8	<
water	60:41	0:0	8	item
op	60:45	0:0	8	->
water	60:47	0:0	8	list_count
forexpr	60:59	60:60	7	i ++
water	60:59	0:0	8	i
op	60:60	0:0	8	++
stmts	61:16	67:16	7	
water	61:16	0:0	8	{
if	62:20	63:48	8	(i != 0)
cond	62:24	62:29	9	i != 0
water	62:24	0:0	10	i
op	62:26	0:0	10	!=
water	62:29	0:0	10	0
stmts	63:24	63:48	9	
call	63:24	63:47	10	strcat
arg	63:31	63:41	11	psz_buffer
water	63:31	0:0	12	psz_buffer
arg	63:43	63:47	11	", "
water	63:43	0:0	12	", "
water	63:48	0:0	10	;
call	64:20	66:65	8	sprintf
arg	64:28	64:59	9	psz_buffer+strlen(psz_buffer)
water	64:28	0:0	10	psz_buffer
op	64:39	0:0	10	+
call	64:41	64:58	10	strlen
arg	64:48	64:58	11	psz_buffer
water	64:48	0:0	12	psz_buffer
arg	64:61	64:70	9	"%i (%s)"
water	64:61	0:0	10	"%i (%s)"
arg	65:28	65:43	9	item->list.i[i]
water	65:28	0:0	10	item
op	65:32	0:0	10	->
water	65:34	0:0	10	list
op	65:38	0:0	10	.
water	65:39	0:0	10	i
op	65:40	0:0	10	[
water	65:41	0:0	10	i
op	65:42	0:0	10	]
arg	66:28	66:65	9	module_gettext(m,item->list_text[i])
call	66:28	66:64	10	module_gettext
arg	66:43	66:44	11	m
water	66:43	0:0	12	m
arg	66:46	66:64	11	item->list_text[i]
water	66:46	0:0	12	item
op	66:50	0:0	12	->
water	66:52	0:0	12	list_text
op	66:61	0:0	12	[
water	66:62	0:0	12	i
op	66:63	0:0	12	]
water	66:66	0:0	8	;
water	67:16	0:0	8	}
water	68:16	0:0	6	ket
op	68:20	0:0	6	=
water	68:22	0:0	6	"}"
water	68:25	0:0	6	;
water	69:12	0:0	6	}
break	70:12	70:17	4	
label	71:8	71:30	4	case CONFIG_ITEM_FLOAT :
water	72:12	0:0	4	type
op	72:17	0:0	4	=
call	72:19	72:28	4	_
arg	72:21	72:28	5	"float"
water	72:21	0:0	6	"float"
water	72:29	0:0	4	;
if	73:12	78:12	4	(item -> min . f != 0 . f || item -> max . f != 0 . f)
cond	73:16	73:55	5	item -> min . f != 0 . f || item -> max . f != 0 . f
water	73:16	0:0	6	item
op	73:20	0:0	6	->
water	73:22	0:0	6	min
op	73:25	0:0	6	.
water	73:26	0:0	6	f
op	73:28	0:0	6	!=
water	73:31	0:0	6	0
op	73:32	0:0	6	.
water	73:33	0:0	6	f
op	73:35	0:0	6	||
water	73:38	0:0	6	item
op	73:42	0:0	6	->
water	73:44	0:0	6	max
op	73:47	0:0	6	.
water	73:48	0:0	6	f
op	73:50	0:0	6	!=
water	73:53	0:0	6	0
op	73:54	0:0	6	.
water	73:55	0:0	6	f
stmts	74:12	78:12	5	
water	74:12	0:0	6	{
call	75:16	76:48	6	sprintf
arg	75:24	75:34	7	psz_buffer
water	75:24	0:0	8	psz_buffer
arg	75:36	75:51	7	"%s [%f .. %f]"
water	75:36	0:0	8	"%s [%f .. %f]"
arg	75:53	75:57	7	type
water	75:53	0:0	8	type
arg	76:24	76:35	7	item->min.f
water	76:24	0:0	8	item
op	76:28	0:0	8	->
water	76:30	0:0	8	min
op	76:33	0:0	8	.
water	76:34	0:0	8	f
arg	76:37	76:48	7	item->max.f
water	76:37	0:0	8	item
op	76:41	0:0	8	->
water	76:43	0:0	8	max
op	76:46	0:0	8	.
water	76:47	0:0	8	f
water	76:49	0:0	6	;
water	77:16	0:0	6	type
op	77:21	0:0	6	=
water	77:23	0:0	6	psz_buffer
water	77:33	0:0	6	;
water	78:12	0:0	6	}
break	79:12	79:17	4	
label	80:8	80:29	4	case CONFIG_ITEM_BOOL :
water	81:12	0:0	4	bra
op	81:16	0:0	4	=
water	81:18	0:0	4	type
op	81:23	0:0	4	=
water	81:25	0:0	4	ket
op	81:29	0:0	4	=
water	81:31	0:0	4	""
water	81:33	0:0	4	;
water	82:12	0:0	4	prefix
op	82:19	0:0	4	=
water	82:21	0:0	4	", --no-"
water	82:30	0:0	4	;
water	83:12	0:0	4	suffix
op	83:19	0:0	4	=
water	83:21	0:0	4	item
op	83:25	0:0	4	->
water	83:27	0:0	4	value
op	83:32	0:0	4	.
water	83:33	0:0	4	i
water	83:35	0:0	4	?
call	83:37	83:59	4	_
arg	83:39	83:59	5	" (default enabled)"
water	83:39	0:0	6	" (default enabled)"
water	84:35	0:0	4	:
call	84:37	84:60	4	_
arg	84:39	84:60	5	" (default disabled)"
water	84:39	0:0	6	" (default disabled)"
water	84:61	0:0	4	;
break	85:12	85:17	4	
label	86:7	86:14	4	default :
return	87:12	87:18	4	
water	88:4	0:0	4	}
call	89:4	89:41	2	print_section
arg	89:18	89:19	3	m
water	89:18	0:0	4	m
arg	89:21	89:28	3	section
water	89:21	0:0	4	section
arg	89:30	89:35	3	color
water	89:30	0:0	4	color
arg	89:37	89:41	3	desc
water	89:37	0:0	4	desc
water	89:42	0:0	2	;
decl	91:4	91:20	2	char	shortopt[4]
if	92:4	93:48	2	(item -> i_short != '\0')
cond	92:8	92:25	3	item -> i_short != '\0'
water	92:8	0:0	4	item
op	92:12	0:0	4	->
water	92:14	0:0	4	i_short
op	92:22	0:0	4	!=
water	92:25	0:0	4	'\0'
stmts	93:8	93:48	3	
call	93:8	93:47	4	sprintf
arg	93:16	93:24	5	shortopt
water	93:16	0:0	6	shortopt
arg	93:26	93:32	5	"-%c,"
water	93:26	0:0	6	"-%c,"
arg	93:34	93:47	5	item->i_short
water	93:34	0:0	6	item
op	93:38	0:0	6	->
water	93:40	0:0	6	i_short
water	93:48	0:0	4	;
else	94:4	95:31	2
stmts	95:8	95:31	3	
call	95:8	95:30	4	strcpy
arg	95:15	95:23	5	shortopt
water	95:15	0:0	6	shortopt
arg	95:25	95:30	5	"   "
water	95:25	0:0	6	"   "
water	95:31	0:0	4	;
if	96:4	99:54	2	(CONFIG_CLASS (item -> i_type ) == CONFIG_ITEM_BOOL)
cond	96:8	96:38	3	CONFIG_CLASS (item -> i_type ) == CONFIG_ITEM_BOOL
call	96:8	96:33	4	CONFIG_CLASS
arg	96:21	96:33	5	item->i_type
water	96:21	0:0	6	item
op	96:25	0:0	6	->
water	96:27	0:0	6	i_type
op	96:35	0:0	4	==
water	96:38	0:0	4	CONFIG_ITEM_BOOL
stmts	97:8	99:54	3	
call	97:8	99:53	4	printf
arg	97:15	98:45	5	color?WHITE"  %s --%s""%s%s%s%s%s "GRAY:"  %s --%s%s%s%s%s%s "
water	97:15	0:0	6	color
water	97:21	0:0	6	?
water	97:23	0:0	6	WHITE
water	97:28	0:0	6	"  %s --%s"
water	97:45	0:0	6	"%s%s%s%s%s "
water	97:58	0:0	6	GRAY
water	98:21	0:0	6	:
water	98:23	0:0	6	"  %s --%s%s%s%s%s%s "
arg	98:47	98:55	5	shortopt
water	98:47	0:0	6	shortopt
arg	98:57	98:71	5	item->psz_name
water	98:57	0:0	6	item
op	98:61	0:0	6	->
water	98:63	0:0	6	psz_name
arg	99:15	99:21	5	prefix
water	99:15	0:0	6	prefix
arg	99:23	99:37	5	item->psz_name
water	99:23	0:0	6	item
op	99:27	0:0	6	->
water	99:29	0:0	6	psz_name
arg	99:39	99:42	5	bra
water	99:39	0:0	6	bra
arg	99:44	99:48	5	type
water	99:44	0:0	6	type
arg	99:50	99:53	5	ket
water	99:50	0:0	6	ket
water	99:54	0:0	4	;
else	100:4	103:54	2
stmts	101:8	103:54	3	
call	101:8	103:53	4	printf
arg	101:15	102:45	5	color?WHITE"  %s --%s"YELLOW"%s%s%s%s%s "GRAY:"  %s --%s%s%s%s%s%s "
water	101:15	0:0	6	color
water	101:21	0:0	6	?
water	101:23	0:0	6	WHITE
water	101:28	0:0	6	"  %s --%s"
water	101:39	0:0	6	YELLOW
water	101:45	0:0	6	"%s%s%s%s%s "
water	101:58	0:0	6	GRAY
water	102:21	0:0	6	:
water	102:23	0:0	6	"  %s --%s%s%s%s%s%s "
arg	102:47	102:55	5	shortopt
water	102:47	0:0	6	shortopt
arg	102:57	102:71	5	item->psz_name
water	102:57	0:0	6	item
op	102:61	0:0	6	->
water	102:63	0:0	6	psz_name
arg	103:15	103:17	5	""
water	103:15	0:0	6	""
arg	103:19	103:21	5	""
water	103:19	0:0	6	""
arg	103:39	103:42	5	bra
water	103:39	0:0	6	bra
arg	103:44	103:48	5	type
water	103:44	0:0	6	type
arg	103:50	103:53	5	ket
water	103:50	0:0	6	ket
water	103:54	0:0	4	;
decl	105:4	106:65	2	int	offset
op	105:15	0:0	2	=
water	105:17	0:0	2	PADDING_SPACES
op	105:32	0:0	2	-
call	105:34	105:55	3	strlen
arg	105:41	105:55	4	item->psz_name
water	105:41	0:0	5	item
op	105:45	0:0	5	->
water	105:47	0:0	5	psz_name
op	106:15	0:0	2	-
call	106:17	106:27	3	strlen
arg	106:24	106:27	4	bra
water	106:24	0:0	5	bra
op	106:29	0:0	2	-
call	106:31	106:46	3	vlc_swidth
arg	106:42	106:46	4	type
water	106:42	0:0	5	type
op	106:48	0:0	2	-
call	106:50	106:60	3	strlen
arg	106:57	106:60	4	ket
water	106:57	0:0	5	ket
op	106:62	0:0	2	-
water	106:64	0:0	2	1
if	107:4	108:61	2	(CONFIG_CLASS (item -> i_type ) == CONFIG_ITEM_BOOL)
cond	107:8	107:38	3	CONFIG_CLASS (item -> i_type ) == CONFIG_ITEM_BOOL
call	107:8	107:33	4	CONFIG_CLASS
arg	107:21	107:33	5	item->i_type
water	107:21	0:0	6	item
op	107:25	0:0	6	->
water	107:27	0:0	6	i_type
op	107:35	0:0	4	==
water	107:38	0:0	4	CONFIG_ITEM_BOOL
stmts	108:8	108:61	3	
water	108:8	0:0	4	offset
op	108:15	0:0	4	-=
call	108:18	108:39	4	strlen
arg	108:25	108:39	5	item->psz_name
water	108:25	0:0	6	item
op	108:29	0:0	6	->
water	108:31	0:0	6	psz_name
op	108:41	0:0	4	+
call	108:43	108:60	4	vlc_swidth
arg	108:54	108:60	5	prefix
water	108:54	0:0	6	prefix
water	108:61	0:0	4	;
if	109:4	113:4	2	(offset < 0)
cond	109:8	109:17	3	offset < 0
water	109:8	0:0	4	offset
op	109:15	0:0	4	<
water	109:17	0:0	4	0
stmts	110:4	113:4	3	
water	110:4	0:0	4	{
call	111:8	111:20	4	putchar
arg	111:16	111:20	5	'\n'
water	111:16	0:0	6	'\n'
water	111:21	0:0	4	;
water	112:8	0:0	4	offset
op	112:15	0:0	4	=
water	112:17	0:0	4	PADDING_SPACES
op	112:32	0:0	4	+
water	112:34	0:0	4	LINE_START
water	112:44	0:0	4	;
water	113:4	0:0	4	}
call	114:4	114:28	2	printf
arg	114:11	114:16	3	"%*s"
water	114:11	0:0	4	"%*s"
arg	114:18	114:24	3	offset
water	114:18	0:0	4	offset
arg	114:26	114:28	3	""
water	114:26	0:0	4	""
water	114:29	0:0	2	;
call	115:4	115:73	2	sprintf
arg	115:12	115:22	3	psz_buffer
water	115:12	0:0	4	psz_buffer
arg	115:24	115:30	3	"%s%s"
water	115:24	0:0	4	"%s%s"
arg	115:32	115:65	3	module_gettext(m,item->psz_text)
call	115:32	115:64	4	module_gettext
arg	115:47	115:48	5	m
water	115:47	0:0	6	m
arg	115:50	115:64	5	item->psz_text
water	115:50	0:0	6	item
op	115:54	0:0	6	->
water	115:56	0:0	6	psz_text
arg	115:67	115:73	3	suffix
water	115:67	0:0	4	suffix
water	115:74	0:0	2	;
call	116:4	116:61	2	print_desc
arg	116:15	116:25	3	psz_buffer
water	116:15	0:0	4	psz_buffer
arg	116:27	116:54	3	PADDING_SPACES+LINE_START
water	116:27	0:0	4	PADDING_SPACES
op	116:42	0:0	4	+
water	116:44	0:0	4	LINE_START
arg	116:56	116:61	3	color
water	116:56	0:0	4	color
water	116:62	0:0	2	;
if	117:4	123:4	2	(desc && ( item -> psz_longtext != NULL && item -> psz_longtext [ 0 ] ))
cond	117:8	117:68	3	desc && ( item -> psz_longtext != NULL && item -> psz_longtext [ 0 ] )
water	117:8	0:0	4	desc
op	117:13	0:0	4	&&
water	117:16	0:0	4	(
water	117:17	0:0	4	item
op	117:21	0:0	4	->
water	117:23	0:0	4	psz_longtext
op	117:36	0:0	4	!=
water	117:39	0:0	4	NULL
op	117:44	0:0	4	&&
water	117:47	0:0	4	item
op	117:51	0:0	4	->
water	117:53	0:0	4	psz_longtext
op	117:65	0:0	4	[
water	117:66	0:0	4	0
op	117:67	0:0	4	]
water	117:68	0:0	4	)
stmts	118:4	123:4	3	
water	118:4	0:0	4	{
call	119:8	119:40	4	printf
arg	119:15	119:20	5	"%*s"
water	119:15	0:0	6	"%*s"
arg	119:22	119:36	5	LINE_START+2
water	119:22	0:0	6	LINE_START
op	119:33	0:0	6	+
water	119:35	0:0	6	2
arg	119:38	119:40	5	""
water	119:38	0:0	6	""
water	119:41	0:0	4	;
call	120:8	121:22	4	sprintf
arg	120:16	120:26	5	psz_buffer
water	120:16	0:0	6	psz_buffer
arg	120:28	120:34	5	"%s%s"
water	120:28	0:0	6	"%s%s"
arg	120:36	120:73	5	module_gettext(m,item->psz_longtext)
call	120:36	120:72	6	module_gettext
arg	120:51	120:52	7	m
water	120:51	0:0	8	m
arg	120:54	120:72	7	item->psz_longtext
water	120:54	0:0	8	item
op	120:58	0:0	8	->
water	120:60	0:0	8	psz_longtext
arg	121:16	121:22	5	suffix
water	121:16	0:0	6	suffix
water	121:23	0:0	4	;
call	122:8	122:52	4	print_desc
arg	122:19	122:29	5	psz_buffer
water	122:19	0:0	6	psz_buffer
arg	122:31	122:45	5	LINE_START+2
water	122:31	0:0	6	LINE_START
op	122:42	0:0	6	+
water	122:44	0:0	6	2
arg	122:47	122:52	5	false
water	122:47	0:0	6	false
water	122:53	0:0	4	;
water	123:4	0:0	4	}
