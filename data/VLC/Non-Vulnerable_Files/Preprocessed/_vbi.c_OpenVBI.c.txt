func	2:0	47:0	0	vlc_v4l2_vbi_t *	OpenVBI
params	2:24	0:0	1	
param	2:25	2:39	2	demux_t *	demux
param	2:41	2:63	2	const char *	psz_device
stmnts	0:0	46:15	1	
decl	4:4	4:48	2	vlc_v4l2_vbi_t	*vbi
op	4:24	0:0	2	=
call	4:26	4:47	3	malloc
arg	4:34	4:47	4	sizeof(*vbi)
op	4:34	0:0	5	sizeof
water	4:41	0:0	5	(
op	4:42	0:0	5	*
water	4:43	0:0	5	vbi
water	4:46	0:0	5	)
if	5:4	6:19	2	(unlikely (vbi == NULL ))
cond	5:8	5:28	3	unlikely (vbi == NULL )
call	5:8	5:28	4	unlikely
arg	5:17	5:28	5	vbi==NULL
water	5:17	0:0	6	vbi
op	5:21	0:0	6	==
water	5:24	0:0	6	NULL
stmts	6:8	6:19	3	
return	6:8	6:19	4	NULL
water	6:15	0:0	5	NULL
decl	7:4	7:45	2	int	rawfd
op	7:14	0:0	2	=
call	7:16	7:44	3	vlc_open
arg	7:26	7:36	4	psz_device
water	7:26	0:0	5	psz_device
arg	7:38	7:44	4	O_RDWR
water	7:38	0:0	5	O_RDWR
if	8:4	13:4	2	(rawfd == - 1)
cond	8:8	8:18	3	rawfd == - 1
water	8:8	0:0	4	rawfd
op	8:14	0:0	4	==
op	8:17	0:0	4	-
water	8:18	0:0	4	1
stmts	9:4	13:4	3	
water	9:4	0:0	4	{
call	10:8	11:38	4	msg_Err
arg	10:17	10:22	5	demux
water	10:17	0:0	6	demux
arg	10:24	10:53	5	"cannot open device '%s': %s"
water	10:24	0:0	6	"cannot open device '%s': %s"
arg	10:55	10:65	5	psz_device
water	10:55	0:0	6	psz_device
arg	11:17	11:38	5	vlc_strerror_c(errno)
call	11:17	11:37	6	vlc_strerror_c
arg	11:32	11:37	7	errno
water	11:32	0:0	8	errno
water	11:39	0:0	4	;
goto	12:8	12:16	4	err
water	12:13	0:0	5	err
water	13:4	0:0	4	}
decl	15:4	15:50	2	unsigned int	services
op	15:26	0:0	2	=
water	15:28	0:0	2	VBI_SLICED_CAPTION_525
decl	16:4	16:23	2	char	*errstr
op	16:17	0:0	2	=
water	16:19	0:0	2	NULL
water	17:4	0:0	2	vbi
op	17:7	0:0	2	->
water	17:9	0:0	2	cap
op	17:13	0:0	2	=
call	17:15	22:53	2	vbi_capture_v4l2k_new
arg	17:38	17:48	3	psz_device
water	17:38	0:0	4	psz_device
arg	17:50	17:55	3	rawfd
water	17:50	0:0	4	rawfd
arg	18:52	18:53	3	5
water	18:52	0:0	4	5
arg	19:38	19:47	3	&services
op	19:38	0:0	4	&
water	19:39	0:0	4	services
arg	20:51	20:52	3	1
water	20:51	0:0	4	1
arg	21:38	21:45	3	&errstr
op	21:38	0:0	4	&
water	21:39	0:0	4	errstr
arg	22:52	22:53	3	1
water	22:52	0:0	4	1
water	22:54	0:0	2	;
if	23:4	29:4	2	(vbi -> cap == NULL)
cond	23:8	23:20	3	vbi -> cap == NULL
water	23:8	0:0	4	vbi
op	23:11	0:0	4	->
water	23:13	0:0	4	cap
op	23:17	0:0	4	==
water	23:20	0:0	4	NULL
stmts	24:4	29:4	3	
water	24:4	0:0	4	{
call	25:8	25:61	4	msg_Err
arg	25:17	25:22	5	demux
water	25:17	0:0	6	demux
arg	25:24	25:53	5	"cannot capture VBI data: %s"
water	25:24	0:0	6	"cannot capture VBI data: %s"
arg	25:55	25:61	5	errstr
water	25:55	0:0	6	errstr
water	25:62	0:0	4	;
call	26:8	26:20	4	free
arg	26:14	26:20	5	errstr
water	26:14	0:0	6	errstr
water	26:21	0:0	4	;
call	27:8	27:20	4	close
arg	27:15	27:20	5	rawfd
water	27:15	0:0	6	rawfd
water	27:21	0:0	4	;
goto	28:8	28:16	4	err
water	28:13	0:0	5	err
water	29:4	0:0	4	}
for	30:4	39:4	2	(unsigned i = 0 ;i < VBI_NUM_CC_STREAMS;i ++)
forinit	30:9	30:23	3	unsigned i = 0 ;
water	30:9	0:0	4	unsigned
water	30:18	0:0	4	i
op	30:20	0:0	4	=
water	30:22	0:0	4	0
water	30:23	0:0	4	;
cond	30:25	30:29	3	i < VBI_NUM_CC_STREAMS
water	30:25	0:0	4	i
op	30:27	0:0	4	<
water	30:29	0:0	4	VBI_NUM_CC_STREAMS
forexpr	30:49	30:50	3	i ++
water	30:49	0:0	4	i
op	30:50	0:0	4	++
stmts	31:4	39:4	3	
water	31:4	0:0	4	{
decl	32:8	32:23	4	es_format_t	fmt
call	33:8	33:72	4	es_format_Init
arg	33:24	33:28	5	&fmt
op	33:24	0:0	6	&
water	33:25	0:0	6	fmt
arg	33:30	33:36	5	SPU_ES
water	33:30	0:0	6	SPU_ES
arg	33:38	33:72	5	VLC_FOURCC('c','c','1'+i,' ')
call	33:38	33:71	6	VLC_FOURCC
arg	33:49	33:52	7	'c'
water	33:49	0:0	8	'c'
arg	33:54	33:57	7	'c'
water	33:54	0:0	8	'c'
arg	33:59	33:66	7	'1'+i
water	33:59	0:0	8	'1'
op	33:63	0:0	8	+
water	33:65	0:0	8	i
arg	33:68	33:71	7	' '
water	33:68	0:0	8	' '
water	33:73	0:0	4	;
if	34:8	38:8	4	(asprintf (& fmt . psz_description ,"Closed captions %d" ,i + 1 ) >= 0)
cond	34:12	34:76	5	asprintf (& fmt . psz_description ,"Closed captions %d" ,i + 1 ) >= 0
call	34:12	34:71	6	asprintf
arg	34:22	34:42	7	&fmt.psz_description
op	34:22	0:0	8	&
water	34:23	0:0	8	fmt
op	34:26	0:0	8	.
water	34:27	0:0	8	psz_description
arg	34:44	34:64	7	"Closed captions %d"
water	34:44	0:0	8	"Closed captions %d"
arg	34:66	34:71	7	i+1
water	34:66	0:0	8	i
op	34:68	0:0	8	+
water	34:70	0:0	8	1
op	34:73	0:0	6	>=
water	34:76	0:0	6	0
stmts	35:8	38:8	5	
water	35:8	0:0	6	{
call	36:12	36:68	6	msg_Dbg
arg	36:21	36:26	7	demux
water	36:21	0:0	8	demux
arg	36:28	36:46	7	"new spu es %4.4s"
water	36:28	0:0	8	"new spu es %4.4s"
arg	36:48	36:68	7	(char*)&fmt.i_codec
water	36:48	0:0	8	(
water	36:49	0:0	8	char
op	36:54	0:0	8	*
water	36:55	0:0	8	)
op	36:56	0:0	8	&
water	36:57	0:0	8	fmt
op	36:60	0:0	8	.
water	36:61	0:0	8	i_codec
water	36:69	0:0	6	;
water	37:12	0:0	6	vbi
op	37:15	0:0	6	->
water	37:17	0:0	6	es
op	37:19	0:0	6	[
water	37:20	0:0	6	i
op	37:21	0:0	6	]
op	37:23	0:0	6	=
call	37:25	37:53	6	es_out_Add
arg	37:37	37:47	7	demux->out
water	37:37	0:0	8	demux
op	37:42	0:0	8	->
water	37:44	0:0	8	out
arg	37:49	37:53	7	&fmt
op	37:49	0:0	8	&
water	37:50	0:0	8	fmt
water	37:54	0:0	6	;
water	38:8	0:0	6	}
water	39:4	0:0	4	}
call	42:4	42:22	2	GrabVBI
arg	42:12	42:17	3	demux
water	42:12	0:0	4	demux
arg	42:19	42:22	3	vbi
water	42:19	0:0	4	vbi
water	42:23	0:0	2	;
return	43:4	43:14	2	vbi
water	43:11	0:0	3	vbi
label	44:0	44:3	2	err :
call	45:4	45:13	2	free
arg	45:10	45:13	3	vbi
water	45:10	0:0	4	vbi
water	45:14	0:0	2	;
return	46:4	46:15	2	NULL
water	46:11	0:0	3	NULL
