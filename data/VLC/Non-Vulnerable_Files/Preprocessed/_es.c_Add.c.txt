func	2:0	126:0	0	static sout_stream_id_sys_t *	Add
params	2:32	0:0	1	
param	2:34	2:57	2	sout_stream_t *	p_stream
param	2:59	2:78	2	es_format_t *	p_fmt
stmnts	0:0	125:13	1	
decl	4:4	4:46	2	sout_stream_sys_t	*p_sys
op	4:29	0:0	2	=
water	4:31	0:0	2	p_stream
op	4:39	0:0	2	->
water	4:41	0:0	2	p_sys
decl	5:4	5:29	2	sout_stream_id_sys_t	*id
decl	6:4	6:33	2	const char	*psz_access
decl	7:4	7:30	2	const char	*psz_mux
decl	8:4	8:30	2	char	*psz_dst
decl	9:4	9:31	2	sout_access_out_t	*p_access
decl	10:4	10:28	2	sout_mux_t	*p_mux
if	12:4	15:4	2	(p_fmt -> i_cat == AUDIO_ES && p_sys -> psz_access_audio && * p_sys -> psz_access_audio)
cond	12:8	12:71	3	p_fmt -> i_cat == AUDIO_ES && p_sys -> psz_access_audio && * p_sys -> psz_access_audio
water	12:8	0:0	4	p_fmt
op	12:13	0:0	4	->
water	12:15	0:0	4	i_cat
op	12:21	0:0	4	==
water	12:24	0:0	4	AUDIO_ES
op	12:33	0:0	4	&&
water	12:36	0:0	4	p_sys
op	12:41	0:0	4	->
water	12:43	0:0	4	psz_access_audio
op	12:60	0:0	4	&&
op	12:63	0:0	4	*
water	12:64	0:0	4	p_sys
op	12:69	0:0	4	->
water	12:71	0:0	4	psz_access_audio
stmts	13:4	15:4	3	
water	13:4	0:0	4	{
water	14:8	0:0	4	psz_access
op	14:19	0:0	4	=
water	14:21	0:0	4	p_sys
op	14:26	0:0	4	->
water	14:28	0:0	4	psz_access_audio
water	14:44	0:0	4	;
water	15:4	0:0	4	}
else	16:4	19:4	2
stmts	16:9	19:4	3	
if	16:9	19:4	4	(p_fmt -> i_cat == VIDEO_ES && p_sys -> psz_access_video && * p_sys -> psz_access_video)
cond	16:13	16:76	5	p_fmt -> i_cat == VIDEO_ES && p_sys -> psz_access_video && * p_sys -> psz_access_video
water	16:13	0:0	6	p_fmt
op	16:18	0:0	6	->
water	16:20	0:0	6	i_cat
op	16:26	0:0	6	==
water	16:29	0:0	6	VIDEO_ES
op	16:38	0:0	6	&&
water	16:41	0:0	6	p_sys
op	16:46	0:0	6	->
water	16:48	0:0	6	psz_access_video
op	16:65	0:0	6	&&
op	16:68	0:0	6	*
water	16:69	0:0	6	p_sys
op	16:74	0:0	6	->
water	16:76	0:0	6	psz_access_video
stmts	17:4	19:4	5	
water	17:4	0:0	6	{
water	18:8	0:0	6	psz_access
op	18:19	0:0	6	=
water	18:21	0:0	6	p_sys
op	18:26	0:0	6	->
water	18:28	0:0	6	psz_access_video
water	18:44	0:0	6	;
water	19:4	0:0	6	}
else	20:4	23:4	2
stmts	21:4	23:4	3	
water	21:4	0:0	4	{
water	22:8	0:0	4	psz_access
op	22:19	0:0	4	=
water	22:21	0:0	4	p_sys
op	22:26	0:0	4	->
water	22:28	0:0	4	psz_access
water	22:38	0:0	4	;
water	23:4	0:0	4	}
if	25:4	28:4	2	(p_fmt -> i_cat == AUDIO_ES && p_sys -> psz_mux_audio && * p_sys -> psz_mux_audio)
cond	25:8	25:68	3	p_fmt -> i_cat == AUDIO_ES && p_sys -> psz_mux_audio && * p_sys -> psz_mux_audio
water	25:8	0:0	4	p_fmt
op	25:13	0:0	4	->
water	25:15	0:0	4	i_cat
op	25:21	0:0	4	==
water	25:24	0:0	4	AUDIO_ES
op	25:33	0:0	4	&&
water	25:36	0:0	4	p_sys
op	25:41	0:0	4	->
water	25:43	0:0	4	psz_mux_audio
op	25:57	0:0	4	&&
op	25:60	0:0	4	*
water	25:61	0:0	4	p_sys
op	25:66	0:0	4	->
water	25:68	0:0	4	psz_mux_audio
stmts	26:4	28:4	3	
water	26:4	0:0	4	{
water	27:8	0:0	4	psz_mux
op	27:16	0:0	4	=
water	27:18	0:0	4	p_sys
op	27:23	0:0	4	->
water	27:25	0:0	4	psz_mux_audio
water	27:38	0:0	4	;
water	28:4	0:0	4	}
else	29:4	32:4	2
stmts	29:9	32:4	3	
if	29:9	32:4	4	(p_fmt -> i_cat == VIDEO_ES && p_sys -> psz_mux_video && * p_sys -> psz_mux_video)
cond	29:13	29:73	5	p_fmt -> i_cat == VIDEO_ES && p_sys -> psz_mux_video && * p_sys -> psz_mux_video
water	29:13	0:0	6	p_fmt
op	29:18	0:0	6	->
water	29:20	0:0	6	i_cat
op	29:26	0:0	6	==
water	29:29	0:0	6	VIDEO_ES
op	29:38	0:0	6	&&
water	29:41	0:0	6	p_sys
op	29:46	0:0	6	->
water	29:48	0:0	6	psz_mux_video
op	29:62	0:0	6	&&
op	29:65	0:0	6	*
water	29:66	0:0	6	p_sys
op	29:71	0:0	6	->
water	29:73	0:0	6	psz_mux_video
stmts	30:4	32:4	5	
water	30:4	0:0	6	{
water	31:8	0:0	6	psz_mux
op	31:16	0:0	6	=
water	31:18	0:0	6	p_sys
op	31:23	0:0	6	->
water	31:25	0:0	6	psz_mux_video
water	31:38	0:0	6	;
water	32:4	0:0	6	}
else	33:4	36:4	2
stmts	34:4	36:4	3	
water	34:4	0:0	4	{
water	35:8	0:0	4	psz_mux
op	35:16	0:0	4	=
water	35:18	0:0	4	p_sys
op	35:23	0:0	4	->
water	35:25	0:0	4	psz_mux
water	35:32	0:0	4	;
water	36:4	0:0	4	}
if	38:4	42:4	2	(p_fmt -> i_cat == AUDIO_ES && p_sys -> psz_dst_audio && * p_sys -> psz_dst_audio)
cond	38:8	38:68	3	p_fmt -> i_cat == AUDIO_ES && p_sys -> psz_dst_audio && * p_sys -> psz_dst_audio
water	38:8	0:0	4	p_fmt
op	38:13	0:0	4	->
water	38:15	0:0	4	i_cat
op	38:21	0:0	4	==
water	38:24	0:0	4	AUDIO_ES
op	38:33	0:0	4	&&
water	38:36	0:0	4	p_sys
op	38:41	0:0	4	->
water	38:43	0:0	4	psz_dst_audio
op	38:57	0:0	4	&&
op	38:60	0:0	4	*
water	38:61	0:0	4	p_sys
op	38:66	0:0	4	->
water	38:68	0:0	4	psz_dst_audio
stmts	39:4	42:4	3	
water	39:4	0:0	4	{
water	40:8	0:0	4	psz_dst
op	40:16	0:0	4	=
call	40:18	41:74	4	es_print_url
arg	40:32	40:52	5	p_sys->psz_dst_audio
water	40:32	0:0	6	p_sys
op	40:37	0:0	6	->
water	40:39	0:0	6	psz_dst_audio
arg	40:54	40:68	5	p_fmt->i_codec
water	40:54	0:0	6	p_fmt
op	40:59	0:0	6	->
water	40:61	0:0	6	i_codec
arg	41:32	41:52	5	p_sys->i_count_audio
water	41:32	0:0	6	p_sys
op	41:37	0:0	6	->
water	41:39	0:0	6	i_count_audio
arg	41:54	41:64	5	psz_access
water	41:54	0:0	6	psz_access
arg	41:66	41:74	5	psz_mux
water	41:66	0:0	6	psz_mux
water	41:75	0:0	4	;
water	42:4	0:0	4	}
else	43:4	47:4	2
stmts	43:9	47:4	3	
if	43:9	47:4	4	(p_fmt -> i_cat == VIDEO_ES && p_sys -> psz_dst_video && * p_sys -> psz_dst_video)
cond	43:13	43:73	5	p_fmt -> i_cat == VIDEO_ES && p_sys -> psz_dst_video && * p_sys -> psz_dst_video
water	43:13	0:0	6	p_fmt
op	43:18	0:0	6	->
water	43:20	0:0	6	i_cat
op	43:26	0:0	6	==
water	43:29	0:0	6	VIDEO_ES
op	43:38	0:0	6	&&
water	43:41	0:0	6	p_sys
op	43:46	0:0	6	->
water	43:48	0:0	6	psz_dst_video
op	43:62	0:0	6	&&
op	43:65	0:0	6	*
water	43:66	0:0	6	p_sys
op	43:71	0:0	6	->
water	43:73	0:0	6	psz_dst_video
stmts	44:4	47:4	5	
water	44:4	0:0	6	{
water	45:8	0:0	6	psz_dst
op	45:16	0:0	6	=
call	45:18	46:74	6	es_print_url
arg	45:32	45:52	7	p_sys->psz_dst_video
water	45:32	0:0	8	p_sys
op	45:37	0:0	8	->
water	45:39	0:0	8	psz_dst_video
arg	45:54	45:68	7	p_fmt->i_codec
water	45:54	0:0	8	p_fmt
op	45:59	0:0	8	->
water	45:61	0:0	8	i_codec
arg	46:32	46:52	7	p_sys->i_count_video
water	46:32	0:0	8	p_sys
op	46:37	0:0	8	->
water	46:39	0:0	8	i_count_video
arg	46:54	46:64	7	psz_access
water	46:54	0:0	8	psz_access
arg	46:66	46:74	7	psz_mux
water	46:66	0:0	8	psz_mux
water	46:75	0:0	6	;
water	47:4	0:0	6	}
else	48:4	65:4	2
stmts	49:4	65:4	3	
water	49:4	0:0	4	{
decl	50:8	50:19	4	int	i_count
if	51:8	54:8	4	(p_fmt -> i_cat == VIDEO_ES)
cond	51:12	51:28	5	p_fmt -> i_cat == VIDEO_ES
water	51:12	0:0	6	p_fmt
op	51:17	0:0	6	->
water	51:19	0:0	6	i_cat
op	51:25	0:0	6	==
water	51:28	0:0	6	VIDEO_ES
stmts	52:8	54:8	5	
water	52:8	0:0	6	{
water	53:12	0:0	6	i_count
op	53:20	0:0	6	=
water	53:22	0:0	6	p_sys
op	53:27	0:0	6	->
water	53:29	0:0	6	i_count_video
water	53:42	0:0	6	;
water	54:8	0:0	6	}
else	55:8	58:8	4
stmts	55:13	58:8	5	
if	55:13	58:8	6	(p_fmt -> i_cat == AUDIO_ES)
cond	55:17	55:33	7	p_fmt -> i_cat == AUDIO_ES
water	55:17	0:0	8	p_fmt
op	55:22	0:0	8	->
water	55:24	0:0	8	i_cat
op	55:30	0:0	8	==
water	55:33	0:0	8	AUDIO_ES
stmts	56:8	58:8	7	
water	56:8	0:0	8	{
water	57:12	0:0	8	i_count
op	57:20	0:0	8	=
water	57:22	0:0	8	p_sys
op	57:27	0:0	8	->
water	57:29	0:0	8	i_count_audio
water	57:42	0:0	8	;
water	58:8	0:0	8	}
else	59:8	62:8	4
stmts	60:8	62:8	5	
water	60:8	0:0	6	{
water	61:12	0:0	6	i_count
op	61:20	0:0	6	=
water	61:22	0:0	6	p_sys
op	61:27	0:0	6	->
water	61:29	0:0	6	i_count
water	61:36	0:0	6	;
water	62:8	0:0	6	}
water	63:8	0:0	4	psz_dst
op	63:16	0:0	4	=
call	63:18	64:61	4	es_print_url
arg	63:32	63:46	5	p_sys->psz_dst
water	63:32	0:0	6	p_sys
op	63:37	0:0	6	->
water	63:39	0:0	6	psz_dst
arg	63:48	63:62	5	p_fmt->i_codec
water	63:48	0:0	6	p_fmt
op	63:53	0:0	6	->
water	63:55	0:0	6	i_codec
arg	64:32	64:39	5	i_count
water	64:32	0:0	6	i_count
arg	64:41	64:51	5	psz_access
water	64:41	0:0	6	psz_access
arg	64:53	64:61	5	psz_mux
water	64:53	0:0	6	psz_mux
water	64:62	0:0	4	;
water	65:4	0:0	4	}
water	66:4	0:0	2	p_sys
op	66:9	0:0	2	->
water	66:11	0:0	2	i_count
op	66:18	0:0	2	++
water	66:20	0:0	2	;
if	67:4	70:4	2	(p_fmt -> i_cat == VIDEO_ES)
cond	67:8	67:24	3	p_fmt -> i_cat == VIDEO_ES
water	67:8	0:0	4	p_fmt
op	67:13	0:0	4	->
water	67:15	0:0	4	i_cat
op	67:21	0:0	4	==
water	67:24	0:0	4	VIDEO_ES
stmts	68:4	70:4	3	
water	68:4	0:0	4	{
water	69:8	0:0	4	p_sys
op	69:13	0:0	4	->
water	69:15	0:0	4	i_count_video
op	69:28	0:0	4	++
water	69:30	0:0	4	;
water	70:4	0:0	4	}
else	71:4	74:4	2
stmts	71:9	74:4	3	
if	71:9	74:4	4	(p_fmt -> i_cat == AUDIO_ES)
cond	71:13	71:29	5	p_fmt -> i_cat == AUDIO_ES
water	71:13	0:0	6	p_fmt
op	71:18	0:0	6	->
water	71:20	0:0	6	i_cat
op	71:26	0:0	6	==
water	71:29	0:0	6	AUDIO_ES
stmts	72:4	74:4	5	
water	72:4	0:0	6	{
water	73:8	0:0	6	p_sys
op	73:13	0:0	6	->
water	73:15	0:0	6	i_count_audio
op	73:28	0:0	6	++
water	73:30	0:0	6	;
water	74:4	0:0	6	}
call	75:4	76:42	2	msg_Dbg
arg	75:13	75:21	3	p_stream
water	75:13	0:0	4	p_stream
arg	75:23	75:46	3	"creating `%s/%s://%s'"
water	75:23	0:0	4	"creating `%s/%s://%s'"
arg	76:13	76:23	3	psz_access
water	76:13	0:0	4	psz_access
arg	76:25	76:32	3	psz_mux
water	76:25	0:0	4	psz_mux
arg	76:34	76:42	3	psz_dst
water	76:34	0:0	4	psz_dst
water	76:43	0:0	2	;
water	78:4	0:0	2	p_access
op	78:13	0:0	2	=
call	78:15	78:64	2	sout_AccessOutNew
arg	78:34	78:42	3	p_stream
water	78:34	0:0	4	p_stream
arg	78:44	78:54	3	psz_access
water	78:44	0:0	4	psz_access
arg	78:56	78:64	3	psz_dst
water	78:56	0:0	4	psz_dst
water	78:65	0:0	2	;
if	79:4	90:4	2	(p_access == NULL)
cond	79:8	79:20	3	p_access == NULL
water	79:8	0:0	4	p_access
op	79:17	0:0	4	==
water	79:20	0:0	4	NULL
stmts	80:4	90:4	3	
water	80:4	0:0	4	{
call	81:8	82:46	4	msg_Err
arg	81:17	81:25	5	p_stream
water	81:17	0:0	6	p_stream
arg	81:27	81:76	5	"no suitable sout access module for `%s/%s://%s'"
water	81:27	0:0	6	"no suitable sout access module for `%s/%s://%s'"
arg	82:17	82:27	5	psz_access
water	82:17	0:0	6	psz_access
arg	82:29	82:36	5	psz_mux
water	82:29	0:0	6	psz_mux
arg	82:38	82:46	5	psz_dst
water	82:38	0:0	6	psz_dst
water	82:47	0:0	4	;
call	83:8	87:43	4	dialog_Fatal
arg	83:22	83:30	5	p_stream
water	83:22	0:0	6	p_stream
arg	84:20	84:55	5	_("Streaming / Transcoding failed")
call	84:20	84:54	6	_
arg	84:22	84:54	7	"Streaming / Transcoding failed"
water	84:22	0:0	8	"Streaming / Transcoding failed"
arg	85:20	85:93	5	_("There is no suitable stream-output access module for \"%s/%s://%s\".")
call	85:20	85:92	6	_
arg	85:22	85:92	7	"There is no suitable stream-output access module for \"%s/%s://%s\"."
water	85:22	0:0	8	"There is no suitable stream-output access module for \"%s/%s://%s\"."
arg	86:26	86:36	5	psz_access
water	86:26	0:0	6	psz_access
arg	87:26	87:33	5	psz_mux
water	87:26	0:0	6	psz_mux
arg	87:35	87:43	5	psz_dst
water	87:35	0:0	6	psz_dst
water	87:44	0:0	4	;
call	88:8	88:22	4	free
arg	88:14	88:22	5	psz_dst
water	88:14	0:0	6	psz_dst
water	88:23	0:0	4	;
return	89:8	89:22	4	(NULL)
water	89:14	0:0	5	(
water	89:16	0:0	5	NULL
water	89:21	0:0	5	)
water	90:4	0:0	4	}
water	92:4	0:0	2	p_mux
op	92:10	0:0	2	=
call	92:12	92:61	2	sout_MuxNew
arg	92:25	92:41	3	p_stream->p_sout
water	92:25	0:0	4	p_stream
op	92:33	0:0	4	->
water	92:35	0:0	4	p_sout
arg	92:43	92:50	3	psz_mux
water	92:43	0:0	4	psz_mux
arg	92:52	92:61	3	p_access
water	92:52	0:0	4	p_access
water	92:62	0:0	2	;
if	93:4	105:4	2	(p_mux == NULL)
cond	93:8	93:17	3	p_mux == NULL
water	93:8	0:0	4	p_mux
op	93:14	0:0	4	==
water	93:17	0:0	4	NULL
stmts	94:4	105:4	3	
water	94:4	0:0	4	{
call	95:8	96:46	4	msg_Err
arg	95:17	95:25	5	p_stream
water	95:17	0:0	6	p_stream
arg	95:27	95:73	5	"no suitable sout mux module for `%s/%s://%s'"
water	95:27	0:0	6	"no suitable sout mux module for `%s/%s://%s'"
arg	96:17	96:27	5	psz_access
water	96:17	0:0	6	psz_access
arg	96:29	96:36	5	psz_mux
water	96:29	0:0	6	psz_mux
arg	96:38	96:46	5	psz_dst
water	96:38	0:0	6	psz_dst
water	96:47	0:0	4	;
call	97:8	101:55	4	dialog_Fatal
arg	97:22	97:30	5	p_stream
water	97:22	0:0	6	p_stream
arg	98:24	98:59	5	_("Streaming / Transcoding failed")
call	98:24	98:58	6	_
arg	98:26	98:58	7	"Streaming / Transcoding failed"
water	98:26	0:0	8	"Streaming / Transcoding failed"
arg	99:24	100:48	5	_("There is no suitable stream-output access module ""for \"%s/%s://%s\".")
call	99:24	100:47	6	_
arg	99:26	100:47	7	"There is no suitable stream-output access module ""for \"%s/%s://%s\"."
water	99:26	0:0	8	"There is no suitable stream-output access module "
water	100:26	0:0	8	"for \"%s/%s://%s\"."
arg	101:26	101:36	5	psz_access
water	101:26	0:0	6	psz_access
arg	101:38	101:45	5	psz_mux
water	101:38	0:0	6	psz_mux
arg	101:47	101:55	5	psz_dst
water	101:47	0:0	6	psz_dst
water	101:56	0:0	4	;
call	102:8	102:39	4	sout_AccessOutDelete
arg	102:30	102:39	5	p_access
water	102:30	0:0	6	p_access
water	102:40	0:0	4	;
call	103:8	103:22	4	free
arg	103:14	103:22	5	psz_dst
water	103:14	0:0	6	psz_dst
water	103:23	0:0	4	;
return	104:8	104:22	4	(NULL)
water	104:14	0:0	5	(
water	104:16	0:0	5	NULL
water	104:21	0:0	5	)
water	105:4	0:0	4	}
call	106:4	106:18	2	free
arg	106:10	106:18	3	psz_dst
water	106:10	0:0	4	psz_dst
water	106:19	0:0	2	;
water	107:4	0:0	2	id
op	107:7	0:0	2	=
call	107:9	107:48	2	malloc
arg	107:17	107:48	3	sizeof(sout_stream_id_sys_t)
op	107:17	0:0	4	sizeof
water	107:23	0:0	4	(
water	107:25	0:0	4	sout_stream_id_sys_t
water	107:46	0:0	4	)
water	107:49	0:0	2	;
if	108:4	113:4	2	(! id)
cond	108:8	108:9	3	! id
op	108:8	0:0	4	!
water	108:9	0:0	4	id
stmts	109:4	113:4	3	
water	109:4	0:0	4	{
call	110:8	110:30	4	sout_MuxDelete
arg	110:24	110:30	5	p_mux
water	110:24	0:0	6	p_mux
water	110:31	0:0	4	;
call	111:8	111:39	4	sout_AccessOutDelete
arg	111:30	111:39	5	p_access
water	111:30	0:0	6	p_access
water	111:40	0:0	4	;
return	112:8	112:19	4	NULL
water	112:15	0:0	5	NULL
water	113:4	0:0	4	}
water	114:4	0:0	2	id
op	114:6	0:0	2	->
water	114:8	0:0	2	p_mux
op	114:14	0:0	2	=
water	114:16	0:0	2	p_mux
water	114:21	0:0	2	;
water	115:4	0:0	2	id
op	115:6	0:0	2	->
water	115:8	0:0	2	p_input
op	115:16	0:0	2	=
call	115:18	115:50	2	sout_MuxAddStream
arg	115:37	115:42	3	p_mux
water	115:37	0:0	4	p_mux
arg	115:44	115:50	3	p_fmt
water	115:44	0:0	4	p_fmt
water	115:51	0:0	2	;
if	116:4	122:4	2	(id -> p_input == NULL)
cond	116:8	116:23	3	id -> p_input == NULL
water	116:8	0:0	4	id
op	116:10	0:0	4	->
water	116:12	0:0	4	p_input
op	116:20	0:0	4	==
water	116:23	0:0	4	NULL
stmts	117:4	122:4	3	
water	117:4	0:0	4	{
call	118:8	118:30	4	sout_MuxDelete
arg	118:24	118:30	5	p_mux
water	118:24	0:0	6	p_mux
water	118:31	0:0	4	;
call	119:8	119:39	4	sout_AccessOutDelete
arg	119:30	119:39	5	p_access
water	119:30	0:0	6	p_access
water	119:40	0:0	4	;
call	120:8	120:17	4	free
arg	120:14	120:17	5	id
water	120:14	0:0	6	id
water	120:18	0:0	4	;
return	121:8	121:19	4	NULL
water	121:15	0:0	5	NULL
water	122:4	0:0	4	}
if	123:4	124:48	2	(!sout_AccessOutCanControlPace (p_access ))
cond	123:8	123:48	3	!sout_AccessOutCanControlPace (p_access )
op	123:8	0:0	4	!
call	123:9	123:48	4	sout_AccessOutCanControlPace
arg	123:39	123:48	5	p_access
water	123:39	0:0	6	p_access
stmts	124:8	124:48	3	
water	124:8	0:0	4	p_stream
op	124:16	0:0	4	->
water	124:18	0:0	4	p_sout
op	124:24	0:0	4	->
water	124:26	0:0	4	i_out_pace_nocontrol
op	124:46	0:0	4	++
water	124:48	0:0	4	;
return	125:4	125:13	2	id
water	125:11	0:0	3	id
