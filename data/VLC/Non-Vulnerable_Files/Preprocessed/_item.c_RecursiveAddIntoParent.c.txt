func	2:0	45:0	0	static int	RecursiveAddIntoParent
params	2:34	0:0	1	
param	3:4	3:26	2	playlist_t *	p_playlist
param	3:28	3:53	2	playlist_item_t *	p_parent
param	4:4	4:29	2	input_item_node_t *	p_node
param	4:31	4:40	2	int	i_pos
param	4:42	4:53	2	bool	b_flat
param	5:4	5:36	2	playlist_item_t * *	pp_first_leaf
stmnts	7:4	44:16	1	
op	7:4	0:0	2	*
water	7:5	0:0	2	pp_first_leaf
op	7:19	0:0	2	=
water	7:21	0:0	2	NULL
water	7:25	0:0	2	;
if	8:4	8:73	2	(p_parent -> i_children == - 1)
cond	8:8	8:33	3	p_parent -> i_children == - 1
water	8:8	0:0	4	p_parent
op	8:16	0:0	4	->
water	8:18	0:0	4	i_children
op	8:29	0:0	4	==
op	8:32	0:0	4	-
water	8:33	0:0	4	1
stmts	8:37	8:73	3	
call	8:37	8:72	4	ChangeToNode
arg	8:51	8:61	5	p_playlist
water	8:51	0:0	6	p_playlist
arg	8:63	8:72	5	p_parent
water	8:63	0:0	6	p_parent
water	8:73	0:0	4	;
if	9:4	9:60	2	(i_pos == PLAYLIST_END)
cond	9:8	9:17	3	i_pos == PLAYLIST_END
water	9:8	0:0	4	i_pos
op	9:14	0:0	4	==
water	9:17	0:0	4	PLAYLIST_END
stmts	9:32	9:60	3	
water	9:32	0:0	4	i_pos
op	9:38	0:0	4	=
water	9:40	0:0	4	p_parent
op	9:48	0:0	4	->
water	9:50	0:0	4	i_children
water	9:60	0:0	4	;
for	10:4	43:4	2	( int i = 0 ;i < p_node -> i_children;i ++)
forinit	0:0	10:18	3	 int i = 0 ;
decl	10:9	10:18	4	int	i
op	10:15	0:0	4	=
water	10:17	0:0	4	0
cond	10:20	10:32	3	i < p_node -> i_children
water	10:20	0:0	4	i
op	10:22	0:0	4	<
water	10:24	0:0	4	p_node
op	10:30	0:0	4	->
water	10:32	0:0	4	i_children
forexpr	10:44	10:45	3	i ++
water	10:44	0:0	4	i
op	10:45	0:0	4	++
stmts	11:4	43:4	3	
water	11:4	0:0	4	{
decl	12:8	12:64	4	input_item_node_t	*p_child_node
op	12:40	0:0	4	=
water	12:42	0:0	4	p_node
op	12:48	0:0	4	->
water	12:50	0:0	4	pp_children
op	12:61	0:0	4	[
water	12:62	0:0	4	i
op	12:63	0:0	4	]
decl	13:8	13:42	4	playlist_item_t	*p_new_item
op	13:36	0:0	4	=
water	13:38	0:0	4	NULL
decl	14:8	14:54	4	bool	b_children
op	14:24	0:0	4	=
water	14:26	0:0	4	p_child_node
op	14:38	0:0	4	->
water	14:40	0:0	4	i_children
op	14:51	0:0	4	>
water	14:53	0:0	4	0
if	16:8	25:8	4	(! ( b_flat && b_children ))
cond	16:12	16:34	5	! ( b_flat && b_children )
op	16:12	0:0	6	!
water	16:13	0:0	6	(
water	16:14	0:0	6	b_flat
op	16:21	0:0	6	&&
water	16:24	0:0	6	b_children
water	16:34	0:0	6	)
stmts	17:8	25:8	5	
water	17:8	0:0	6	{
water	18:12	0:0	6	p_new_item
op	18:23	0:0	6	=
call	18:25	22:30	6	playlist_NodeAddInput
arg	18:48	18:58	7	p_playlist
water	18:48	0:0	8	p_playlist
arg	19:20	19:40	7	p_child_node->p_item
water	19:20	0:0	8	p_child_node
op	19:32	0:0	8	->
water	19:34	0:0	8	p_item
arg	20:20	20:28	7	p_parent
water	20:20	0:0	8	p_parent
arg	21:20	21:35	7	PLAYLIST_INSERT
water	21:20	0:0	8	PLAYLIST_INSERT
arg	21:37	21:42	7	i_pos
water	21:37	0:0	8	i_pos
arg	22:20	22:30	7	pl_Locked
water	22:20	0:0	8	pl_Locked
water	22:31	0:0	6	;
if	23:12	23:42	6	(! p_new_item)
cond	23:16	23:17	7	! p_new_item
op	23:16	0:0	8	!
water	23:17	0:0	8	p_new_item
stmts	23:30	23:42	7	
return	23:30	23:42	8	i_pos
water	23:37	0:0	9	i_pos
water	24:12	0:0	6	i_pos
op	24:17	0:0	6	++
water	24:19	0:0	6	;
water	25:8	0:0	6	}
if	27:8	40:8	4	(b_children)
cond	27:12	27:12	5	b_children
water	27:12	0:0	6	b_children
stmts	28:8	40:8	5	
water	28:8	0:0	6	{
decl	31:12	37:33	6	int	i_last_pos
op	31:27	0:0	6	=
call	31:29	37:32	7	RecursiveAddIntoParent
arg	32:20	32:30	8	p_playlist
water	32:20	0:0	9	p_playlist
arg	33:20	33:54	8	p_new_item?p_new_item:p_parent
water	33:20	0:0	9	p_new_item
water	33:31	0:0	9	?
water	33:33	0:0	9	p_new_item
water	33:44	0:0	9	:
water	33:46	0:0	9	p_parent
arg	34:20	34:32	8	p_child_node
water	34:20	0:0	9	p_child_node
arg	35:20	35:42	8	(b_flat?i_pos:0)
water	35:20	0:0	9	(
water	35:22	0:0	9	b_flat
water	35:29	0:0	9	?
water	35:31	0:0	9	i_pos
water	35:37	0:0	9	:
water	35:39	0:0	9	0
water	35:41	0:0	9	)
arg	36:20	36:26	8	b_flat
water	36:20	0:0	9	b_flat
arg	37:20	37:32	8	&p_new_item
op	37:20	0:0	9	&
water	37:21	0:0	9	p_new_item
if	39:12	39:43	6	(b_flat)
cond	39:16	39:16	7	b_flat
water	39:16	0:0	8	b_flat
stmts	39:25	39:43	7	
water	39:25	0:0	8	i_pos
op	39:31	0:0	8	=
water	39:33	0:0	8	i_last_pos
water	39:43	0:0	8	;
water	40:8	0:0	6	}
call	41:8	41:35	4	assert
arg	41:16	41:35	5	p_new_item!=NULL
water	41:16	0:0	6	p_new_item
op	41:27	0:0	6	!=
water	41:30	0:0	6	NULL
water	41:36	0:0	4	;
if	42:8	42:48	4	(i == 0)
cond	42:12	42:17	5	i == 0
water	42:12	0:0	6	i
op	42:14	0:0	6	==
water	42:17	0:0	6	0
stmts	42:21	42:48	5	
op	42:21	0:0	6	*
water	42:22	0:0	6	pp_first_leaf
op	42:36	0:0	6	=
water	42:38	0:0	6	p_new_item
water	42:48	0:0	6	;
water	43:4	0:0	4	}
return	44:4	44:16	2	i_pos
water	44:11	0:0	3	i_pos
