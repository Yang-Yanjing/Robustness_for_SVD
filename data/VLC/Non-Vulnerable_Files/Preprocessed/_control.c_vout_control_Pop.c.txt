func	2:0	27:0	0	int	vout_control_Pop
params	2:20	0:0	1	
param	2:21	2:41	2	vout_control_t *	ctrl
param	2:43	2:66	2	vout_control_cmd_t *	cmd
param	3:21	3:37	2	mtime_t	deadline
param	3:39	3:54	2	mtime_t	timeout
stmnts	5:4	26:47	1	
call	5:4	5:30	2	vlc_mutex_lock
arg	5:19	5:30	3	&ctrl->lock
op	5:19	0:0	4	&
water	5:20	0:0	4	ctrl
op	5:24	0:0	4	->
water	5:26	0:0	4	lock
water	5:31	0:0	2	;
if	6:4	14:4	2	(ctrl -> cmd . i_size <= 0)
cond	6:8	6:28	3	ctrl -> cmd . i_size <= 0
water	6:8	0:0	4	ctrl
op	6:12	0:0	4	->
water	6:14	0:0	4	cmd
op	6:17	0:0	4	.
water	6:18	0:0	4	i_size
op	6:25	0:0	4	<=
water	6:28	0:0	4	0
stmts	6:31	14:4	3	
water	6:31	0:0	4	{
water	7:8	0:0	4	ctrl
op	7:12	0:0	4	->
water	7:14	0:0	4	is_processing
op	7:28	0:0	4	=
water	7:30	0:0	4	false
water	7:35	0:0	4	;
call	8:8	8:50	4	vlc_cond_broadcast
arg	8:27	8:50	5	&ctrl->wait_acknowledge
op	8:27	0:0	6	&
water	8:28	0:0	6	ctrl
op	8:32	0:0	6	->
water	8:34	0:0	6	wait_acknowledge
water	8:51	0:0	4	;
decl	9:8	9:54	4	const mtime_t	max_deadline
op	9:35	0:0	4	=
call	9:37	9:43	5	mdate
op	9:45	0:0	4	+
water	9:47	0:0	4	timeout
decl	10:8	10:111	4	const mtime_t	wait_deadline
op	10:36	0:0	4	=
water	10:38	0:0	4	deadline
op	10:47	0:0	4	<=
water	10:50	0:0	4	VLC_TS_INVALID
water	10:65	0:0	4	?
water	10:67	0:0	4	max_deadline
water	10:80	0:0	4	:
call	10:82	10:110	5	__MIN
arg	10:88	10:96	6	deadline
water	10:88	0:0	7	deadline
arg	10:98	10:110	6	max_deadline
water	10:98	0:0	7	max_deadline
if	12:8	13:79	4	(ctrl -> can_sleep)
cond	12:12	12:18	5	ctrl -> can_sleep
water	12:12	0:0	6	ctrl
op	12:16	0:0	6	->
water	12:18	0:0	6	can_sleep
stmts	13:12	13:79	5	
call	13:12	13:78	6	vlc_cond_timedwait
arg	13:31	13:50	7	&ctrl->wait_request
op	13:31	0:0	8	&
water	13:32	0:0	8	ctrl
op	13:36	0:0	8	->
water	13:38	0:0	8	wait_request
arg	13:52	13:63	7	&ctrl->lock
op	13:52	0:0	8	&
water	13:53	0:0	8	ctrl
op	13:57	0:0	8	->
water	13:59	0:0	8	lock
arg	13:65	13:78	7	wait_deadline
water	13:65	0:0	8	wait_deadline
water	13:79	0:0	6	;
water	14:4	0:0	4	}
decl	15:4	15:16	2	bool	has_cmd
if	16:4	21:4	2	(ctrl -> cmd . i_size > 0)
cond	16:8	16:27	3	ctrl -> cmd . i_size > 0
water	16:8	0:0	4	ctrl
op	16:12	0:0	4	->
water	16:14	0:0	4	cmd
op	16:17	0:0	4	.
water	16:18	0:0	4	i_size
op	16:25	0:0	4	>
water	16:27	0:0	4	0
stmts	16:30	21:4	3	
water	16:30	0:0	4	{
water	17:8	0:0	4	has_cmd
op	17:16	0:0	4	=
water	17:18	0:0	4	true
water	17:22	0:0	4	;
op	18:8	0:0	4	*
water	18:9	0:0	4	cmd
op	18:13	0:0	4	=
call	18:15	18:37	4	ARRAY_VAL
arg	18:25	18:34	5	ctrl->cmd
water	18:25	0:0	6	ctrl
op	18:29	0:0	6	->
water	18:31	0:0	6	cmd
arg	18:36	18:37	5	0
water	18:36	0:0	6	0
water	18:38	0:0	4	;
call	19:8	19:33	4	ARRAY_REMOVE
arg	19:21	19:30	5	ctrl->cmd
water	19:21	0:0	6	ctrl
op	19:25	0:0	6	->
water	19:27	0:0	6	cmd
arg	19:32	19:33	5	0
water	19:32	0:0	6	0
water	19:34	0:0	4	;
water	20:8	0:0	4	ctrl
op	20:12	0:0	4	->
water	20:14	0:0	4	is_processing
op	20:28	0:0	4	=
water	20:30	0:0	4	true
water	20:34	0:0	4	;
water	21:4	0:0	4	}
else	21:6	24:4	2
stmts	21:11	24:4	3	
water	21:11	0:0	4	{
water	22:8	0:0	4	has_cmd
op	22:16	0:0	4	=
water	22:18	0:0	4	false
water	22:23	0:0	4	;
water	23:8	0:0	4	ctrl
op	23:12	0:0	4	->
water	23:14	0:0	4	can_sleep
op	23:24	0:0	4	=
water	23:26	0:0	4	true
water	23:30	0:0	4	;
water	24:4	0:0	4	}
call	25:4	25:32	2	vlc_mutex_unlock
arg	25:21	25:32	3	&ctrl->lock
op	25:21	0:0	4	&
water	25:22	0:0	4	ctrl
op	25:26	0:0	4	->
water	25:28	0:0	4	lock
water	25:33	0:0	2	;
return	26:4	26:47	2	has_cmd?VLC_SUCCESS:VLC_EGENERIC
water	26:11	0:0	3	has_cmd
water	26:19	0:0	3	?
water	26:21	0:0	3	VLC_SUCCESS
water	26:33	0:0	3	:
water	26:35	0:0	3	VLC_EGENERIC
