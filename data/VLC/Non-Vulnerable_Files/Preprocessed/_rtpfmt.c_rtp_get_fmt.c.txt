func	2:0	360:0	0	int	rtp_get_fmt
params	2:15	0:0	1	
param	2:17	2:34	2	vlc_object_t *	obj
param	2:36	2:54	2	es_format_t *	p_fmt
param	2:56	2:71	2	const char *	mux
param	3:18	3:40	2	rtp_format_t *	rtp_fmt
stmnts	5:4	359:22	1	
call	5:4	5:41	2	assert
arg	5:12	5:41	3	p_fmt!=NULL||mux!=NULL
water	5:12	0:0	4	p_fmt
op	5:18	0:0	4	!=
water	5:21	0:0	4	NULL
op	5:26	0:0	4	||
water	5:29	0:0	4	mux
op	5:33	0:0	4	!=
water	5:36	0:0	4	NULL
water	5:42	0:0	2	;
water	9:4	0:0	2	rtp_fmt
op	9:11	0:0	2	->
water	9:13	0:0	2	payload_type
op	9:26	0:0	2	=
water	9:28	0:0	2	96
water	9:30	0:0	2	;
water	10:4	0:0	2	rtp_fmt
op	10:11	0:0	2	->
water	10:13	0:0	2	cat
op	10:17	0:0	2	=
water	10:19	0:0	2	mux
op	10:23	0:0	2	!=
water	10:26	0:0	2	NULL
water	10:31	0:0	2	?
water	10:33	0:0	2	VIDEO_ES
water	10:42	0:0	2	:
water	10:44	0:0	2	p_fmt
op	10:49	0:0	2	->
water	10:51	0:0	2	i_cat
water	10:56	0:0	2	;
if	11:4	15:4	2	(rtp_fmt -> cat == AUDIO_ES)
cond	11:8	11:24	3	rtp_fmt -> cat == AUDIO_ES
water	11:8	0:0	4	rtp_fmt
op	11:15	0:0	4	->
water	11:17	0:0	4	cat
op	11:21	0:0	4	==
water	11:24	0:0	4	AUDIO_ES
stmts	12:4	15:4	3	
water	12:4	0:0	4	{
water	13:8	0:0	4	rtp_fmt
op	13:15	0:0	4	->
water	13:17	0:0	4	clock_rate
op	13:28	0:0	4	=
water	13:30	0:0	4	p_fmt
op	13:35	0:0	4	->
water	13:37	0:0	4	audio
op	13:42	0:0	4	.
water	13:43	0:0	4	i_rate
water	13:49	0:0	4	;
water	14:8	0:0	4	rtp_fmt
op	14:15	0:0	4	->
water	14:17	0:0	4	channels
op	14:26	0:0	4	=
water	14:28	0:0	4	p_fmt
op	14:33	0:0	4	->
water	14:35	0:0	4	audio
op	14:40	0:0	4	.
water	14:41	0:0	4	i_channels
water	14:51	0:0	4	;
water	15:4	0:0	4	}
else	16:4	17:35	2
stmts	17:8	17:35	3	
water	17:8	0:0	4	rtp_fmt
op	17:15	0:0	4	->
water	17:17	0:0	4	clock_rate
op	17:28	0:0	4	=
water	17:30	0:0	4	90000
water	17:35	0:0	4	;
water	19:4	0:0	2	rtp_fmt
op	19:11	0:0	2	->
water	19:13	0:0	2	bitrate
op	19:21	0:0	2	=
water	19:23	0:0	2	p_fmt
op	19:29	0:0	2	!=
water	19:32	0:0	2	NULL
water	19:37	0:0	2	?
water	19:39	0:0	2	p_fmt
op	19:44	0:0	2	->
water	19:46	0:0	2	i_bitrate
op	19:55	0:0	2	/
water	19:56	0:0	2	1000
water	19:61	0:0	2	:
water	19:63	0:0	2	0
water	19:64	0:0	2	;
water	20:4	0:0	2	rtp_fmt
op	20:11	0:0	2	->
water	20:13	0:0	2	fmtp
op	20:18	0:0	2	=
water	20:20	0:0	2	NULL
water	20:24	0:0	2	;
if	21:4	31:4	2	(mux != NULL)
cond	21:8	21:15	3	mux != NULL
water	21:8	0:0	4	mux
op	21:12	0:0	4	!=
water	21:15	0:0	4	NULL
stmts	22:4	31:4	3	
water	22:4	0:0	4	{
if	23:8	27:8	4	(strncmp (mux ,"ts" ,2 ) == 0)
cond	23:12	23:39	5	strncmp (mux ,"ts" ,2 ) == 0
call	23:12	23:34	6	strncmp
arg	23:21	23:24	7	mux
water	23:21	0:0	8	mux
arg	23:26	23:30	7	"ts"
water	23:26	0:0	8	"ts"
arg	23:32	23:34	7	2
water	23:32	0:0	8	2
op	23:36	0:0	6	==
water	23:39	0:0	6	0
stmts	24:8	27:8	5	
water	24:8	0:0	6	{
water	25:12	0:0	6	rtp_fmt
op	25:19	0:0	6	->
water	25:21	0:0	6	payload_type
op	25:34	0:0	6	=
water	25:36	0:0	6	33
water	25:38	0:0	6	;
water	26:12	0:0	6	rtp_fmt
op	26:19	0:0	6	->
water	26:21	0:0	6	ptname
op	26:28	0:0	6	=
water	26:30	0:0	6	"MP2T"
water	26:36	0:0	6	;
water	27:8	0:0	6	}
else	28:8	29:36	4
stmts	29:12	29:36	5	
water	29:12	0:0	6	rtp_fmt
op	29:19	0:0	6	->
water	29:21	0:0	6	ptname
op	29:28	0:0	6	=
water	29:30	0:0	6	"MP2P"
water	29:36	0:0	6	;
return	30:8	30:26	4	VLC_SUCCESS
water	30:15	0:0	5	VLC_SUCCESS
water	31:4	0:0	4	}
switch	32:4	358:4	2	(p_fmt -> i_codec)
cond	32:12	32:19	3	p_fmt -> i_codec
water	32:12	0:0	4	p_fmt
op	32:17	0:0	4	->
water	32:19	0:0	4	i_codec
stmts	33:4	358:4	3	
water	33:4	0:0	4	{
label	34:8	34:28	4	case VLC_CODEC_MULAW :
if	35:12	36:41	4	(p_fmt -> audio . i_channels == 1 && p_fmt -> audio . i_rate == 8000)
cond	35:16	35:71	5	p_fmt -> audio . i_channels == 1 && p_fmt -> audio . i_rate == 8000
water	35:16	0:0	6	p_fmt
op	35:21	0:0	6	->
water	35:23	0:0	6	audio
op	35:28	0:0	6	.
water	35:29	0:0	6	i_channels
op	35:40	0:0	6	==
water	35:43	0:0	6	1
op	35:45	0:0	6	&&
water	35:48	0:0	6	p_fmt
op	35:53	0:0	6	->
water	35:55	0:0	6	audio
op	35:60	0:0	6	.
water	35:61	0:0	6	i_rate
op	35:68	0:0	6	==
water	35:71	0:0	6	8000
stmts	36:16	36:41	5	
water	36:16	0:0	6	rtp_fmt
op	36:23	0:0	6	->
water	36:25	0:0	6	payload_type
op	36:38	0:0	6	=
water	36:40	0:0	6	0
water	36:41	0:0	6	;
water	37:12	0:0	4	rtp_fmt
op	37:19	0:0	4	->
water	37:21	0:0	4	ptname
op	37:28	0:0	4	=
water	37:30	0:0	4	"PCMU"
water	37:36	0:0	4	;
water	38:12	0:0	4	rtp_fmt
op	38:19	0:0	4	->
water	38:21	0:0	4	pf_packetize
op	38:34	0:0	4	=
water	38:36	0:0	4	rtp_packetize_split
water	38:55	0:0	4	;
break	39:12	39:17	4	
label	40:8	40:27	4	case VLC_CODEC_ALAW :
if	41:12	42:41	4	(p_fmt -> audio . i_channels == 1 && p_fmt -> audio . i_rate == 8000)
cond	41:16	41:71	5	p_fmt -> audio . i_channels == 1 && p_fmt -> audio . i_rate == 8000
water	41:16	0:0	6	p_fmt
op	41:21	0:0	6	->
water	41:23	0:0	6	audio
op	41:28	0:0	6	.
water	41:29	0:0	6	i_channels
op	41:40	0:0	6	==
water	41:43	0:0	6	1
op	41:45	0:0	6	&&
water	41:48	0:0	6	p_fmt
op	41:53	0:0	6	->
water	41:55	0:0	6	audio
op	41:60	0:0	6	.
water	41:61	0:0	6	i_rate
op	41:68	0:0	6	==
water	41:71	0:0	6	8000
stmts	42:16	42:41	5	
water	42:16	0:0	6	rtp_fmt
op	42:23	0:0	6	->
water	42:25	0:0	6	payload_type
op	42:38	0:0	6	=
water	42:40	0:0	6	8
water	42:41	0:0	6	;
water	43:12	0:0	4	rtp_fmt
op	43:19	0:0	4	->
water	43:21	0:0	4	ptname
op	43:28	0:0	4	=
water	43:30	0:0	4	"PCMA"
water	43:36	0:0	4	;
water	44:12	0:0	4	rtp_fmt
op	44:19	0:0	4	->
water	44:21	0:0	4	pf_packetize
op	44:34	0:0	4	=
water	44:36	0:0	4	rtp_packetize_split
water	44:55	0:0	4	;
break	45:12	45:17	4	
label	46:8	46:27	4	case VLC_CODEC_S16B :
label	47:8	47:27	4	case VLC_CODEC_S16L :
if	48:12	51:12	4	(p_fmt -> audio . i_channels == 1 && p_fmt -> audio . i_rate == 44100)
cond	48:16	48:71	5	p_fmt -> audio . i_channels == 1 && p_fmt -> audio . i_rate == 44100
water	48:16	0:0	6	p_fmt
op	48:21	0:0	6	->
water	48:23	0:0	6	audio
op	48:28	0:0	6	.
water	48:29	0:0	6	i_channels
op	48:40	0:0	6	==
water	48:43	0:0	6	1
op	48:45	0:0	6	&&
water	48:48	0:0	6	p_fmt
op	48:53	0:0	6	->
water	48:55	0:0	6	audio
op	48:60	0:0	6	.
water	48:61	0:0	6	i_rate
op	48:68	0:0	6	==
water	48:71	0:0	6	44100
stmts	49:12	51:12	5	
water	49:12	0:0	6	{
water	50:16	0:0	6	rtp_fmt
op	50:23	0:0	6	->
water	50:25	0:0	6	payload_type
op	50:38	0:0	6	=
water	50:40	0:0	6	11
water	50:42	0:0	6	;
water	51:12	0:0	6	}
else	52:12	56:12	4
stmts	52:17	56:12	5	
if	52:17	56:12	6	(p_fmt -> audio . i_channels == 2 && p_fmt -> audio . i_rate == 44100)
cond	52:21	53:44	7	p_fmt -> audio . i_channels == 2 && p_fmt -> audio . i_rate == 44100
water	52:21	0:0	8	p_fmt
op	52:26	0:0	8	->
water	52:28	0:0	8	audio
op	52:33	0:0	8	.
water	52:34	0:0	8	i_channels
op	52:45	0:0	8	==
water	52:48	0:0	8	2
op	52:50	0:0	8	&&
water	53:21	0:0	8	p_fmt
op	53:26	0:0	8	->
water	53:28	0:0	8	audio
op	53:33	0:0	8	.
water	53:34	0:0	8	i_rate
op	53:41	0:0	8	==
water	53:44	0:0	8	44100
stmts	54:12	56:12	7	
water	54:12	0:0	8	{
water	55:16	0:0	8	rtp_fmt
op	55:23	0:0	8	->
water	55:25	0:0	8	payload_type
op	55:38	0:0	8	=
water	55:40	0:0	8	10
water	55:42	0:0	8	;
water	56:12	0:0	8	}
water	57:12	0:0	4	rtp_fmt
op	57:19	0:0	4	->
water	57:21	0:0	4	ptname
op	57:28	0:0	4	=
water	57:30	0:0	4	"L16"
water	57:35	0:0	4	;
if	58:12	59:59	4	(p_fmt -> i_codec == VLC_CODEC_S16B)
cond	58:16	58:34	5	p_fmt -> i_codec == VLC_CODEC_S16B
water	58:16	0:0	6	p_fmt
op	58:21	0:0	6	->
water	58:23	0:0	6	i_codec
op	58:31	0:0	6	==
water	58:34	0:0	6	VLC_CODEC_S16B
stmts	59:16	59:59	5	
water	59:16	0:0	6	rtp_fmt
op	59:23	0:0	6	->
water	59:25	0:0	6	pf_packetize
op	59:38	0:0	6	=
water	59:40	0:0	6	rtp_packetize_split
water	59:59	0:0	6	;
else	60:12	61:58	4
stmts	61:16	61:58	5	
water	61:16	0:0	6	rtp_fmt
op	61:23	0:0	6	->
water	61:25	0:0	6	pf_packetize
op	61:38	0:0	6	=
water	61:40	0:0	6	rtp_packetize_swab
water	61:58	0:0	6	;
break	62:12	62:17	4	
label	63:8	63:25	4	case VLC_CODEC_U8 :
water	64:12	0:0	4	rtp_fmt
op	64:19	0:0	4	->
water	64:21	0:0	4	ptname
op	64:28	0:0	4	=
water	64:30	0:0	4	"L8"
water	64:34	0:0	4	;
water	65:12	0:0	4	rtp_fmt
op	65:19	0:0	4	->
water	65:21	0:0	4	pf_packetize
op	65:34	0:0	4	=
water	65:36	0:0	4	rtp_packetize_split
water	65:55	0:0	4	;
break	66:12	66:17	4	
label	67:8	67:27	4	case VLC_CODEC_S24B :
water	68:12	0:0	4	rtp_fmt
op	68:19	0:0	4	->
water	68:21	0:0	4	ptname
op	68:28	0:0	4	=
water	68:30	0:0	4	"L24"
water	68:35	0:0	4	;
water	69:12	0:0	4	rtp_fmt
op	69:19	0:0	4	->
water	69:21	0:0	4	pf_packetize
op	69:34	0:0	4	=
water	69:36	0:0	4	rtp_packetize_split
water	69:55	0:0	4	;
break	70:12	70:17	4	
label	71:8	71:27	4	case VLC_CODEC_MPGA :
water	72:12	0:0	4	rtp_fmt
op	72:19	0:0	4	->
water	72:21	0:0	4	payload_type
op	72:34	0:0	4	=
water	72:36	0:0	4	14
water	72:38	0:0	4	;
water	73:12	0:0	4	rtp_fmt
op	73:19	0:0	4	->
water	73:21	0:0	4	ptname
op	73:28	0:0	4	=
water	73:30	0:0	4	"MPA"
water	73:35	0:0	4	;
water	74:12	0:0	4	rtp_fmt
op	74:19	0:0	4	->
water	74:21	0:0	4	clock_rate
op	74:32	0:0	4	=
water	74:34	0:0	4	90000
water	74:39	0:0	4	;
water	75:12	0:0	4	rtp_fmt
op	75:19	0:0	4	->
water	75:21	0:0	4	pf_packetize
op	75:34	0:0	4	=
water	75:36	0:0	4	rtp_packetize_mpa
water	75:53	0:0	4	;
break	76:12	76:17	4	
label	77:8	77:27	4	case VLC_CODEC_MPGV :
water	78:12	0:0	4	rtp_fmt
op	78:19	0:0	4	->
water	78:21	0:0	4	payload_type
op	78:34	0:0	4	=
water	78:36	0:0	4	32
water	78:38	0:0	4	;
water	79:12	0:0	4	rtp_fmt
op	79:19	0:0	4	->
water	79:21	0:0	4	ptname
op	79:28	0:0	4	=
water	79:30	0:0	4	"MPV"
water	79:35	0:0	4	;
water	80:12	0:0	4	rtp_fmt
op	80:19	0:0	4	->
water	80:21	0:0	4	pf_packetize
op	80:34	0:0	4	=
water	80:36	0:0	4	rtp_packetize_mpv
water	80:53	0:0	4	;
break	81:12	81:17	4	
label	82:8	82:33	4	case VLC_CODEC_ADPCM_G726 :
switch	83:12	105:12	4	(p_fmt -> i_bitrate / 1000)
cond	83:20	83:39	5	p_fmt -> i_bitrate / 1000
water	83:20	0:0	6	p_fmt
op	83:25	0:0	6	->
water	83:27	0:0	6	i_bitrate
op	83:37	0:0	6	/
water	83:39	0:0	6	1000
stmts	84:12	105:12	5	
water	84:12	0:0	6	{
label	85:12	85:19	6	case 16 :
water	86:16	0:0	6	rtp_fmt
op	86:23	0:0	6	->
water	86:25	0:0	6	ptname
op	86:32	0:0	6	=
water	86:34	0:0	6	"G726-16"
water	86:43	0:0	6	;
water	87:16	0:0	6	rtp_fmt
op	87:23	0:0	6	->
water	87:25	0:0	6	pf_packetize
op	87:38	0:0	6	=
water	87:40	0:0	6	rtp_packetize_g726_16
water	87:61	0:0	6	;
break	88:16	88:21	6	
label	89:12	89:19	6	case 24 :
water	90:16	0:0	6	rtp_fmt
op	90:23	0:0	6	->
water	90:25	0:0	6	ptname
op	90:32	0:0	6	=
water	90:34	0:0	6	"G726-24"
water	90:43	0:0	6	;
water	91:16	0:0	6	rtp_fmt
op	91:23	0:0	6	->
water	91:25	0:0	6	pf_packetize
op	91:38	0:0	6	=
water	91:40	0:0	6	rtp_packetize_g726_24
water	91:61	0:0	6	;
break	92:16	92:21	6	
label	93:12	93:19	6	case 32 :
water	94:16	0:0	6	rtp_fmt
op	94:23	0:0	6	->
water	94:25	0:0	6	ptname
op	94:32	0:0	6	=
water	94:34	0:0	6	"G726-32"
water	94:43	0:0	6	;
water	95:16	0:0	6	rtp_fmt
op	95:23	0:0	6	->
water	95:25	0:0	6	pf_packetize
op	95:38	0:0	6	=
water	95:40	0:0	6	rtp_packetize_g726_32
water	95:61	0:0	6	;
break	96:16	96:21	6	
label	97:12	97:19	6	case 40 :
water	98:16	0:0	6	rtp_fmt
op	98:23	0:0	6	->
water	98:25	0:0	6	ptname
op	98:32	0:0	6	=
water	98:34	0:0	6	"G726-40"
water	98:43	0:0	6	;
water	99:16	0:0	6	rtp_fmt
op	99:23	0:0	6	->
water	99:25	0:0	6	pf_packetize
op	99:38	0:0	6	=
water	99:40	0:0	6	rtp_packetize_g726_40
water	99:61	0:0	6	;
break	100:16	100:21	6	
label	101:12	101:19	6	default :
call	102:16	103:65	6	msg_Err
arg	102:25	102:28	7	obj
water	102:25	0:0	8	obj
arg	102:30	103:46	7	"cannot add this stream (unsupported ""G.726 bit rate: %u)"
water	102:30	0:0	8	"cannot add this stream (unsupported "
water	103:25	0:0	8	"G.726 bit rate: %u)"
arg	103:48	103:65	7	p_fmt->i_bitrate
water	103:48	0:0	8	p_fmt
op	103:53	0:0	8	->
water	103:55	0:0	8	i_bitrate
water	103:66	0:0	6	;
return	104:16	104:35	6	VLC_EGENERIC
water	104:23	0:0	7	VLC_EGENERIC
water	105:12	0:0	6	}
break	106:12	106:17	4	
label	107:8	107:26	4	case VLC_CODEC_A52 :
water	108:12	0:0	4	rtp_fmt
op	108:19	0:0	4	->
water	108:21	0:0	4	ptname
op	108:28	0:0	4	=
water	108:30	0:0	4	"ac3"
water	108:35	0:0	4	;
water	109:12	0:0	4	rtp_fmt
op	109:19	0:0	4	->
water	109:21	0:0	4	pf_packetize
op	109:34	0:0	4	=
water	109:36	0:0	4	rtp_packetize_ac3
water	109:53	0:0	4	;
break	110:12	110:17	4	
label	111:8	111:27	4	case VLC_CODEC_H263 :
water	112:12	0:0	4	rtp_fmt
op	112:19	0:0	4	->
water	112:21	0:0	4	ptname
op	112:28	0:0	4	=
water	112:30	0:0	4	"H263-1998"
water	112:41	0:0	4	;
water	113:12	0:0	4	rtp_fmt
op	113:19	0:0	4	->
water	113:21	0:0	4	pf_packetize
op	113:34	0:0	4	=
water	113:36	0:0	4	rtp_packetize_h263
water	113:54	0:0	4	;
break	114:12	114:17	4	
label	115:8	115:27	4	case VLC_CODEC_H264 :
water	116:12	0:0	4	rtp_fmt
op	116:19	0:0	4	->
water	116:21	0:0	4	ptname
op	116:28	0:0	4	=
water	116:30	0:0	4	"H264"
water	116:36	0:0	4	;
water	117:12	0:0	4	rtp_fmt
op	117:19	0:0	4	->
water	117:21	0:0	4	pf_packetize
op	117:34	0:0	4	=
water	117:36	0:0	4	rtp_packetize_h264
water	117:54	0:0	4	;
water	118:12	0:0	4	rtp_fmt
op	118:19	0:0	4	->
water	118:21	0:0	4	fmtp
op	118:26	0:0	4	=
water	118:28	0:0	4	NULL
water	118:32	0:0	4	;
if	119:12	187:12	4	(p_fmt -> i_extra > 0)
cond	119:16	119:33	5	p_fmt -> i_extra > 0
water	119:16	0:0	6	p_fmt
op	119:21	0:0	6	->
water	119:23	0:0	6	i_extra
op	119:31	0:0	6	>
water	119:33	0:0	6	0
stmts	120:12	187:12	5	
water	120:12	0:0	6	{
decl	121:16	121:50	6	uint8_t	*p_buffer
op	121:34	0:0	6	=
water	121:36	0:0	6	p_fmt
op	121:41	0:0	6	->
water	121:43	0:0	6	p_extra
decl	122:16	122:49	6	int	i_buffer
op	122:33	0:0	6	=
water	122:35	0:0	6	p_fmt
op	122:40	0:0	6	->
water	122:42	0:0	6	i_extra
decl	123:16	123:40	6	char	*p_64_sps
op	123:34	0:0	6	=
water	123:36	0:0	6	NULL
decl	124:16	124:40	6	char	*p_64_pps
op	124:34	0:0	6	=
water	124:36	0:0	6	NULL
decl	125:16	125:33	6	char	hexa[6+1]
while	126:16	177:16	6	(i_buffer > 4)
cond	126:23	126:34	7	i_buffer > 4
water	126:23	0:0	8	i_buffer
op	126:32	0:0	8	>
water	126:34	0:0	8	4
stmts	127:16	177:16	7	
water	127:16	0:0	8	{
decl	128:20	128:39	8	int	i_offset
op	128:36	0:0	8	=
water	128:38	0:0	8	0
decl	129:20	129:39	8	int	i_size
op	129:36	0:0	8	=
water	129:38	0:0	8	0
while	130:20	136:20	8	(p_buffer [ 0 ] != 0 || p_buffer [ 1 ] != 0 || p_buffer [ 2 ] != 1)
cond	130:27	131:42	9	p_buffer [ 0 ] != 0 || p_buffer [ 1 ] != 0 || p_buffer [ 2 ] != 1
water	130:27	0:0	10	p_buffer
op	130:35	0:0	10	[
water	130:36	0:0	10	0
op	130:37	0:0	10	]
op	130:39	0:0	10	!=
water	130:42	0:0	10	0
op	130:44	0:0	10	||
water	130:47	0:0	10	p_buffer
op	130:55	0:0	10	[
water	130:56	0:0	10	1
op	130:57	0:0	10	]
op	130:59	0:0	10	!=
water	130:62	0:0	10	0
op	130:64	0:0	10	||
water	131:27	0:0	10	p_buffer
op	131:35	0:0	10	[
water	131:36	0:0	10	2
op	131:37	0:0	10	]
op	131:39	0:0	10	!=
water	131:42	0:0	10	1
stmts	132:20	136:20	9	
water	132:20	0:0	10	{
water	133:24	0:0	10	p_buffer
op	133:32	0:0	10	++
water	133:34	0:0	10	;
water	134:24	0:0	10	i_buffer
op	134:32	0:0	10	--
water	134:34	0:0	10	;
if	135:24	135:49	10	(i_buffer == 0)
cond	135:28	135:40	11	i_buffer == 0
water	135:28	0:0	12	i_buffer
op	135:37	0:0	12	==
water	135:40	0:0	12	0
stmts	135:44	135:49	11	
break	135:44	135:49	12	
water	136:20	0:0	10	}
if	137:20	141:20	8	(i_buffer < 4 ||memcmp (p_buffer ,"\x00\x00\x01" ,3 ))
cond	137:24	137:75	9	i_buffer < 4 ||memcmp (p_buffer ,"\x00\x00\x01" ,3 )
water	137:24	0:0	10	i_buffer
op	137:33	0:0	10	<
water	137:35	0:0	10	4
op	137:37	0:0	10	||
call	137:40	137:75	10	memcmp
arg	137:47	137:55	11	p_buffer
water	137:47	0:0	12	p_buffer
arg	137:57	137:71	11	"\x00\x00\x01"
water	137:57	0:0	12	"\x00\x00\x01"
arg	137:73	137:75	11	3
water	137:73	0:0	12	3
stmts	138:20	141:20	9	
water	138:20	0:0	10	{
call	139:24	139:60	10	msg_Dbg
arg	139:33	139:36	11	obj
water	139:33	0:0	12	obj
arg	139:38	139:60	11	"No startcode found.."
water	139:38	0:0	12	"No startcode found.."
water	139:61	0:0	10	;
break	140:24	140:29	10	
water	141:20	0:0	10	}
water	142:20	0:0	8	p_buffer
op	142:29	0:0	8	+=
water	142:32	0:0	8	3
water	142:33	0:0	8	;
water	143:20	0:0	8	i_buffer
op	143:29	0:0	8	-=
water	143:32	0:0	8	3
water	143:33	0:0	8	;
decl	144:20	144:59	8	const int	i_nal_type
op	144:41	0:0	8	=
water	144:43	0:0	8	p_buffer
op	144:51	0:0	8	[
water	144:52	0:0	8	0
op	144:53	0:0	8	]
op	144:54	0:0	8	&
water	144:55	0:0	8	0
water	144:56	0:0	8	x1f
call	145:20	145:90	8	msg_Dbg
arg	145:29	145:32	9	obj
water	145:29	0:0	10	obj
arg	145:34	145:77	9	"we found a startcode for NAL with TYPE:%d"
water	145:34	0:0	10	"we found a startcode for NAL with TYPE:%d"
arg	145:79	145:90	9	i_nal_type
water	145:79	0:0	10	i_nal_type
water	145:91	0:0	8	;
water	146:20	0:0	8	i_size
op	146:27	0:0	8	=
water	146:29	0:0	8	i_buffer
water	146:37	0:0	8	;
for	147:20	157:20	8	(i_offset = 0 ;i_offset + 2 < i_buffer;i_offset ++)
forinit	147:25	147:37	9	i_offset = 0 ;
water	147:25	0:0	10	i_offset
op	147:34	0:0	10	=
water	147:36	0:0	10	0
water	147:37	0:0	10	;
cond	147:39	147:52	9	i_offset + 2 < i_buffer
water	147:39	0:0	10	i_offset
op	147:47	0:0	10	+
water	147:48	0:0	10	2
op	147:50	0:0	10	<
water	147:52	0:0	10	i_buffer
forexpr	147:63	147:71	9	i_offset ++
water	147:63	0:0	10	i_offset
op	147:71	0:0	10	++
stmts	148:20	157:20	9	
water	148:20	0:0	10	{
if	149:24	156:24	10	(!memcmp (p_buffer + i_offset ,"\x00\x00\x01" ,3 ))
cond	149:28	149:75	11	!memcmp (p_buffer + i_offset ,"\x00\x00\x01" ,3 )
op	149:28	0:0	12	!
call	149:29	149:75	12	memcmp
arg	149:36	149:55	13	p_buffer+i_offset
water	149:36	0:0	14	p_buffer
op	149:45	0:0	14	+
water	149:47	0:0	14	i_offset
arg	149:57	149:71	13	"\x00\x00\x01"
water	149:57	0:0	14	"\x00\x00\x01"
arg	149:73	149:75	13	3
water	149:73	0:0	14	3
stmts	150:24	156:24	11	
water	150:24	0:0	12	{
while	152:28	153:42	12	(i_offset > 0 && 0 == p_buffer [ i_offset - 1 ])
cond	152:35	152:79	13	i_offset > 0 && 0 == p_buffer [ i_offset - 1 ]
water	152:35	0:0	14	i_offset
op	152:44	0:0	14	>
water	152:46	0:0	14	0
op	152:48	0:0	14	&&
water	152:51	0:0	14	0
op	152:53	0:0	14	==
water	152:56	0:0	14	p_buffer
op	152:64	0:0	14	[
water	152:66	0:0	14	i_offset
op	152:75	0:0	14	-
water	152:77	0:0	14	1
op	152:79	0:0	14	]
stmts	153:32	153:42	13	
water	153:32	0:0	14	i_offset
op	153:40	0:0	14	--
water	153:42	0:0	14	;
water	154:28	0:0	12	i_size
op	154:35	0:0	12	=
water	154:37	0:0	12	i_offset
water	154:45	0:0	12	;
break	155:28	155:33	12	
water	156:24	0:0	12	}
water	157:20	0:0	10	}
if	158:20	162:20	8	(i_size == 0)
cond	158:24	158:34	9	i_size == 0
water	158:24	0:0	10	i_size
op	158:31	0:0	10	==
water	158:34	0:0	10	0
stmts	159:20	162:20	9	
water	159:20	0:0	10	{
call	160:24	160:61	10	msg_Dbg
arg	160:33	160:36	11	obj
water	160:33	0:0	12	obj
arg	160:38	160:61	11	"No-info found in nal "
water	160:38	0:0	12	"No-info found in nal "
water	160:62	0:0	10	;
continue	161:24	161:32	10	
water	162:20	0:0	10	}
if	163:20	169:20	8	(i_nal_type == 7)
cond	163:24	163:38	9	i_nal_type == 7
water	163:24	0:0	10	i_nal_type
op	163:35	0:0	10	==
water	163:38	0:0	10	7
stmts	164:20	169:20	9	
water	164:20	0:0	10	{
call	165:24	165:39	10	free
arg	165:30	165:39	11	p_64_sps
water	165:30	0:0	12	p_64_sps
water	165:40	0:0	10	;
water	166:24	0:0	10	p_64_sps
op	166:33	0:0	10	=
call	166:35	166:75	10	vlc_b64_encode_binary
arg	166:58	166:66	11	p_buffer
water	166:58	0:0	12	p_buffer
arg	166:68	166:75	11	i_size
water	166:68	0:0	12	i_size
water	166:76	0:0	10	;
call	168:24	168:60	10	sprintf_hexa
arg	168:38	168:42	11	hexa
water	168:38	0:0	12	hexa
arg	168:44	168:56	11	&p_buffer[1]
op	168:44	0:0	12	&
water	168:45	0:0	12	p_buffer
op	168:53	0:0	12	[
water	168:54	0:0	12	1
op	168:55	0:0	12	]
arg	168:58	168:60	11	3
water	168:58	0:0	12	3
water	168:61	0:0	10	;
water	169:20	0:0	10	}
else	170:20	174:20	8
stmts	170:25	174:20	9	
if	170:25	174:20	10	(i_nal_type == 8)
cond	170:29	170:43	11	i_nal_type == 8
water	170:29	0:0	12	i_nal_type
op	170:40	0:0	12	==
water	170:43	0:0	12	8
stmts	171:20	174:20	11	
water	171:20	0:0	12	{
call	172:24	172:39	12	free
arg	172:30	172:39	13	p_64_pps
water	172:30	0:0	14	p_64_pps
water	172:40	0:0	12	;
water	173:24	0:0	12	p_64_pps
op	173:33	0:0	12	=
call	173:35	173:75	12	vlc_b64_encode_binary
arg	173:58	173:66	13	p_buffer
water	173:58	0:0	14	p_buffer
arg	173:68	173:75	13	i_size
water	173:68	0:0	14	i_size
water	173:76	0:0	12	;
water	174:20	0:0	12	}
water	175:20	0:0	8	i_buffer
op	175:29	0:0	8	-=
water	175:32	0:0	8	i_size
water	175:38	0:0	8	;
water	176:20	0:0	8	p_buffer
op	176:29	0:0	8	+=
water	176:32	0:0	8	i_size
water	176:38	0:0	8	;
water	177:16	0:0	8	}
if	179:16	184:40	6	(p_64_sps && p_64_pps && (asprintf (& rtp_fmt -> fmtp ,"packetization-mode=1;profile-level-id=%s;" "sprop-parameter-sets=%s,%s;" ,hexa ,p_64_sps ,p_64_pps ) == - 1 ))
cond	179:20	183:49	7	p_64_sps && p_64_pps && (asprintf (& rtp_fmt -> fmtp ,"packetization-mode=1;profile-level-id=%s;" "sprop-parameter-sets=%s,%s;" ,hexa ,p_64_sps ,p_64_pps ) == - 1 )
water	179:20	0:0	8	p_64_sps
op	179:29	0:0	8	&&
water	179:32	0:0	8	p_64_pps
op	179:41	0:0	8	&&
water	180:20	0:0	8	(
call	180:22	183:41	8	asprintf
arg	180:32	180:46	9	&rtp_fmt->fmtp
op	180:32	0:0	10	&
water	180:33	0:0	10	rtp_fmt
op	180:40	0:0	10	->
water	180:42	0:0	10	fmtp
arg	181:32	182:61	9	"packetization-mode=1;profile-level-id=%s;""sprop-parameter-sets=%s,%s;"
water	181:32	0:0	10	"packetization-mode=1;profile-level-id=%s;"
water	182:32	0:0	10	"sprop-parameter-sets=%s,%s;"
arg	182:63	182:67	9	hexa
water	182:63	0:0	10	hexa
arg	182:69	182:77	9	p_64_sps
water	182:69	0:0	10	p_64_sps
arg	183:32	183:41	9	p_64_pps
water	183:32	0:0	10	p_64_pps
op	183:43	0:0	8	==
op	183:46	0:0	8	-
water	183:47	0:0	8	1
water	183:49	0:0	8	)
stmts	184:20	184:40	7	
water	184:20	0:0	8	rtp_fmt
op	184:27	0:0	8	->
water	184:29	0:0	8	fmtp
op	184:34	0:0	8	=
water	184:36	0:0	8	NULL
water	184:40	0:0	8	;
call	185:16	185:31	6	free
arg	185:22	185:31	7	p_64_sps
water	185:22	0:0	8	p_64_sps
water	185:32	0:0	6	;
call	186:16	186:31	6	free
arg	186:22	186:31	7	p_64_pps
water	186:22	0:0	8	p_64_pps
water	186:32	0:0	6	;
water	187:12	0:0	6	}
if	188:12	189:64	4	(rtp_fmt -> fmtp == NULL)
cond	188:16	188:33	5	rtp_fmt -> fmtp == NULL
water	188:16	0:0	6	rtp_fmt
op	188:23	0:0	6	->
water	188:25	0:0	6	fmtp
op	188:30	0:0	6	==
water	188:33	0:0	6	NULL
stmts	189:16	189:64	5	
water	189:16	0:0	6	rtp_fmt
op	189:23	0:0	6	->
water	189:25	0:0	6	fmtp
op	189:30	0:0	6	=
call	189:32	189:63	6	strdup
arg	189:40	189:63	7	"packetization-mode=1"
water	189:40	0:0	8	"packetization-mode=1"
water	189:64	0:0	6	;
break	190:12	190:17	4	
label	191:8	191:27	4	case VLC_CODEC_MP4V :
water	192:8	0:0	4	{
water	193:12	0:0	4	rtp_fmt
op	193:19	0:0	4	->
water	193:21	0:0	4	ptname
op	193:28	0:0	4	=
water	193:30	0:0	4	"MP4V-ES"
water	193:39	0:0	4	;
water	194:12	0:0	4	rtp_fmt
op	194:19	0:0	4	->
water	194:21	0:0	4	pf_packetize
op	194:34	0:0	4	=
water	194:36	0:0	4	rtp_packetize_split
water	194:55	0:0	4	;
if	195:12	202:12	4	(p_fmt -> i_extra > 0)
cond	195:16	195:33	5	p_fmt -> i_extra > 0
water	195:16	0:0	6	p_fmt
op	195:21	0:0	6	->
water	195:23	0:0	6	i_extra
op	195:31	0:0	6	>
water	195:33	0:0	6	0
stmts	196:12	202:12	5	
water	196:12	0:0	6	{
decl	197:16	197:46	6	char	hexa[2*p_fmt->i_extra+1]
call	198:16	198:67	6	sprintf_hexa
arg	198:30	198:34	7	hexa
water	198:30	0:0	8	hexa
arg	198:36	198:50	7	p_fmt->p_extra
water	198:36	0:0	8	p_fmt
op	198:41	0:0	8	->
water	198:43	0:0	8	p_extra
arg	198:52	198:67	7	p_fmt->i_extra
water	198:52	0:0	8	p_fmt
op	198:57	0:0	8	->
water	198:59	0:0	8	i_extra
water	198:68	0:0	6	;
if	199:16	201:40	6	(asprintf (& rtp_fmt -> fmtp ,"profile-level-id=3; config=%s;" ,hexa ) == - 1)
cond	199:20	200:75	7	asprintf (& rtp_fmt -> fmtp ,"profile-level-id=3; config=%s;" ,hexa ) == - 1
call	199:20	200:69	8	asprintf
arg	199:30	199:44	9	&rtp_fmt->fmtp
op	199:30	0:0	10	&
water	199:31	0:0	10	rtp_fmt
op	199:38	0:0	10	->
water	199:40	0:0	10	fmtp
arg	200:30	200:62	9	"profile-level-id=3; config=%s;"
water	200:30	0:0	10	"profile-level-id=3; config=%s;"
arg	200:64	200:69	9	hexa
water	200:64	0:0	10	hexa
op	200:71	0:0	8	==
op	200:74	0:0	8	-
water	200:75	0:0	8	1
stmts	201:20	201:40	7	
water	201:20	0:0	8	rtp_fmt
op	201:27	0:0	8	->
water	201:29	0:0	8	fmtp
op	201:34	0:0	8	=
water	201:36	0:0	8	NULL
water	201:40	0:0	8	;
water	202:12	0:0	6	}
break	203:12	203:17	4	
water	204:8	0:0	4	}
label	205:8	205:27	4	case VLC_CODEC_MP4A :
water	206:8	0:0	4	{
if	207:12	219:12	4	(!var_InheritBool (obj ,"sout-rtp-mp4a-latm" ))
cond	207:16	207:61	5	!var_InheritBool (obj ,"sout-rtp-mp4a-latm" )
op	207:16	0:0	6	!
call	207:18	207:61	6	var_InheritBool
arg	207:35	207:38	7	obj
water	207:35	0:0	8	obj
arg	207:40	207:61	7	"sout-rtp-mp4a-latm"
water	207:40	0:0	8	"sout-rtp-mp4a-latm"
stmts	208:12	219:12	5	
water	208:12	0:0	6	{
decl	209:16	209:46	6	char	hexa[2*p_fmt->i_extra+1]
water	210:16	0:0	6	rtp_fmt
op	210:23	0:0	6	->
water	210:25	0:0	6	ptname
op	210:32	0:0	6	=
water	210:34	0:0	6	"mpeg4-generic"
water	210:49	0:0	6	;
water	211:16	0:0	6	rtp_fmt
op	211:23	0:0	6	->
water	211:25	0:0	6	pf_packetize
op	211:38	0:0	6	=
water	211:40	0:0	6	rtp_packetize_mp4a
water	211:58	0:0	6	;
call	212:16	212:67	6	sprintf_hexa
arg	212:30	212:34	7	hexa
water	212:30	0:0	8	hexa
arg	212:36	212:50	7	p_fmt->p_extra
water	212:36	0:0	8	p_fmt
op	212:41	0:0	8	->
water	212:43	0:0	8	p_extra
arg	212:52	212:67	7	p_fmt->i_extra
water	212:52	0:0	8	p_fmt
op	212:57	0:0	8	->
water	212:59	0:0	8	i_extra
water	212:68	0:0	6	;
if	213:16	218:40	6	(asprintf (& rtp_fmt -> fmtp ,"streamtype=5; profile-level-id=15; " "mode=AAC-hbr; config=%s; SizeLength=13; " "IndexLength=3; IndexDeltaLength=3; Profile=1;" ,hexa ) == - 1)
cond	213:20	217:41	7	asprintf (& rtp_fmt -> fmtp ,"streamtype=5; profile-level-id=15; " "mode=AAC-hbr; config=%s; SizeLength=13; " "IndexLength=3; IndexDeltaLength=3; Profile=1;" ,hexa ) == - 1
call	213:20	217:35	8	asprintf
arg	213:30	213:44	9	&rtp_fmt->fmtp
op	213:30	0:0	10	&
water	213:31	0:0	10	rtp_fmt
op	213:38	0:0	10	->
water	213:40	0:0	10	fmtp
arg	214:30	216:77	9	"streamtype=5; profile-level-id=15; ""mode=AAC-hbr; config=%s; SizeLength=13; ""IndexLength=3; IndexDeltaLength=3; Profile=1;"
water	214:30	0:0	10	"streamtype=5; profile-level-id=15; "
water	215:30	0:0	10	"mode=AAC-hbr; config=%s; SizeLength=13; "
water	216:30	0:0	10	"IndexLength=3; IndexDeltaLength=3; Profile=1;"
arg	217:30	217:35	9	hexa
water	217:30	0:0	10	hexa
op	217:37	0:0	8	==
op	217:40	0:0	8	-
water	217:41	0:0	8	1
stmts	218:20	218:40	7	
water	218:20	0:0	8	rtp_fmt
op	218:27	0:0	8	->
water	218:29	0:0	8	fmtp
op	218:34	0:0	8	=
water	218:36	0:0	8	NULL
water	218:40	0:0	8	;
water	219:12	0:0	6	}
else	220:12	243:12	4
stmts	221:12	243:12	5	
water	221:12	0:0	6	{
decl	222:16	222:29	6	char	hexa[13]
decl	223:16	223:21	6	int	i
decl	224:16	224:39	6	unsigned char	config[6]
decl	225:16	227:59	6	unsigned int	aacsrates[15]
op	225:43	0:0	6	=
water	225:45	0:0	6	{
water	226:20	0:0	6	96000
water	226:25	0:0	6	,
water	226:27	0:0	6	88200
water	226:32	0:0	6	,
water	226:34	0:0	6	64000
water	226:39	0:0	6	,
water	226:41	0:0	6	48000
water	226:46	0:0	6	,
water	226:48	0:0	6	44100
water	226:53	0:0	6	,
water	226:55	0:0	6	32000
water	226:60	0:0	6	,
water	226:62	0:0	6	24000
water	226:67	0:0	6	,
water	226:69	0:0	6	22050
water	226:74	0:0	6	,
water	227:20	0:0	6	16000
water	227:25	0:0	6	,
water	227:27	0:0	6	12000
water	227:32	0:0	6	,
water	227:34	0:0	6	11025
water	227:39	0:0	6	,
water	227:41	0:0	6	8000
water	227:45	0:0	6	,
water	227:47	0:0	6	7350
water	227:51	0:0	6	,
water	227:53	0:0	6	0
water	227:54	0:0	6	,
water	227:56	0:0	6	0
water	227:58	0:0	6	}
for	228:16	230:29	6	(i = 0 ;i < 15;i ++)
forinit	228:21	228:26	7	i = 0 ;
water	228:21	0:0	8	i
op	228:23	0:0	8	=
water	228:25	0:0	8	0
water	228:26	0:0	8	;
cond	228:28	228:32	7	i < 15
water	228:28	0:0	8	i
op	228:30	0:0	8	<
water	228:32	0:0	8	15
forexpr	228:36	228:37	7	i ++
water	228:36	0:0	8	i
op	228:37	0:0	8	++
stmts	229:20	230:29	7	
if	229:20	230:29	8	(p_fmt -> audio . i_rate == aacsrates [ i ])
cond	229:24	229:58	9	p_fmt -> audio . i_rate == aacsrates [ i ]
water	229:24	0:0	10	p_fmt
op	229:29	0:0	10	->
water	229:31	0:0	10	audio
op	229:36	0:0	10	.
water	229:37	0:0	10	i_rate
op	229:44	0:0	10	==
water	229:47	0:0	10	aacsrates
op	229:56	0:0	10	[
water	229:57	0:0	10	i
op	229:58	0:0	10	]
stmts	230:24	230:29	9	
break	230:24	230:29	10	
water	231:16	0:0	6	config
op	231:22	0:0	6	[
water	231:23	0:0	6	0
op	231:24	0:0	6	]
op	231:25	0:0	6	=
water	231:26	0:0	6	0
water	231:27	0:0	6	x40
water	231:30	0:0	6	;
water	232:16	0:0	6	config
op	232:22	0:0	6	[
water	232:23	0:0	6	1
op	232:24	0:0	6	]
op	232:25	0:0	6	=
water	232:26	0:0	6	0
water	232:27	0:0	6	;
water	233:16	0:0	6	config
op	233:22	0:0	6	[
water	233:23	0:0	6	2
op	233:24	0:0	6	]
op	233:25	0:0	6	=
water	233:26	0:0	6	0
water	233:27	0:0	6	x20
op	233:30	0:0	6	|
water	233:31	0:0	6	i
water	233:32	0:0	6	;
water	234:16	0:0	6	config
op	234:22	0:0	6	[
water	234:23	0:0	6	3
op	234:24	0:0	6	]
op	234:25	0:0	6	=
water	234:26	0:0	6	p_fmt
op	234:31	0:0	6	->
water	234:33	0:0	6	audio
op	234:38	0:0	6	.
water	234:39	0:0	6	i_channels
op	234:49	0:0	6	<<
water	234:51	0:0	6	4
water	234:52	0:0	6	;
water	235:16	0:0	6	config
op	235:22	0:0	6	[
water	235:23	0:0	6	4
op	235:24	0:0	6	]
op	235:25	0:0	6	=
water	235:26	0:0	6	0
water	235:27	0:0	6	x3f
water	235:30	0:0	6	;
water	236:16	0:0	6	config
op	236:22	0:0	6	[
water	236:23	0:0	6	5
op	236:24	0:0	6	]
op	236:25	0:0	6	=
water	236:26	0:0	6	0
water	236:27	0:0	6	xc0
water	236:30	0:0	6	;
water	237:16	0:0	6	rtp_fmt
op	237:23	0:0	6	->
water	237:25	0:0	6	ptname
op	237:32	0:0	6	=
water	237:34	0:0	6	"MP4A-LATM"
water	237:45	0:0	6	;
water	238:16	0:0	6	rtp_fmt
op	238:23	0:0	6	->
water	238:25	0:0	6	pf_packetize
op	238:38	0:0	6	=
water	238:40	0:0	6	rtp_packetize_mp4a_latm
water	238:63	0:0	6	;
call	239:16	239:46	6	sprintf_hexa
arg	239:30	239:34	7	hexa
water	239:30	0:0	8	hexa
arg	239:36	239:42	7	config
water	239:36	0:0	8	config
arg	239:44	239:46	7	6
water	239:44	0:0	8	6
water	239:47	0:0	6	;
if	240:16	242:40	6	(asprintf (& rtp_fmt -> fmtp ,"profile-level-id=15; " "object=2; cpresent=0; config=%s" ,hexa ) == - 1)
cond	240:20	241:76	7	asprintf (& rtp_fmt -> fmtp ,"profile-level-id=15; " "object=2; cpresent=0; config=%s" ,hexa ) == - 1
call	240:20	241:70	8	asprintf
arg	240:30	240:44	9	&rtp_fmt->fmtp
op	240:30	0:0	10	&
water	240:31	0:0	10	rtp_fmt
op	240:38	0:0	10	->
water	240:40	0:0	10	fmtp
arg	240:46	241:63	9	"profile-level-id=15; ""object=2; cpresent=0; config=%s"
water	240:46	0:0	10	"profile-level-id=15; "
water	241:30	0:0	10	"object=2; cpresent=0; config=%s"
arg	241:65	241:70	9	hexa
water	241:65	0:0	10	hexa
op	241:72	0:0	8	==
op	241:75	0:0	8	-
water	241:76	0:0	8	1
stmts	242:20	242:40	7	
water	242:20	0:0	8	rtp_fmt
op	242:27	0:0	8	->
water	242:29	0:0	8	fmtp
op	242:34	0:0	8	=
water	242:36	0:0	8	NULL
water	242:40	0:0	8	;
water	243:12	0:0	6	}
break	244:12	244:17	4	
water	245:8	0:0	4	}
label	246:8	246:29	4	case VLC_CODEC_AMR_NB :
water	247:12	0:0	4	rtp_fmt
op	247:19	0:0	4	->
water	247:21	0:0	4	ptname
op	247:28	0:0	4	=
water	247:30	0:0	4	"AMR"
water	247:35	0:0	4	;
water	248:12	0:0	4	rtp_fmt
op	248:19	0:0	4	->
water	248:21	0:0	4	fmtp
op	248:26	0:0	4	=
call	248:28	248:52	4	strdup
arg	248:36	248:52	5	"octet-align=1"
water	248:36	0:0	6	"octet-align=1"
water	248:53	0:0	4	;
water	249:12	0:0	4	rtp_fmt
op	249:19	0:0	4	->
water	249:21	0:0	4	pf_packetize
op	249:34	0:0	4	=
water	249:36	0:0	4	rtp_packetize_amr
water	249:53	0:0	4	;
break	250:12	250:17	4	
label	251:8	251:29	4	case VLC_CODEC_AMR_WB :
water	252:12	0:0	4	rtp_fmt
op	252:19	0:0	4	->
water	252:21	0:0	4	ptname
op	252:28	0:0	4	=
water	252:30	0:0	4	"AMR-WB"
water	252:38	0:0	4	;
water	253:12	0:0	4	rtp_fmt
op	253:19	0:0	4	->
water	253:21	0:0	4	fmtp
op	253:26	0:0	4	=
call	253:28	253:52	4	strdup
arg	253:36	253:52	5	"octet-align=1"
water	253:36	0:0	6	"octet-align=1"
water	253:53	0:0	4	;
water	254:12	0:0	4	rtp_fmt
op	254:19	0:0	4	->
water	254:21	0:0	4	pf_packetize
op	254:34	0:0	4	=
water	254:36	0:0	4	rtp_packetize_amr
water	254:53	0:0	4	;
break	255:12	255:17	4	
label	256:8	256:28	4	case VLC_CODEC_SPEEX :
water	257:12	0:0	4	rtp_fmt
op	257:19	0:0	4	->
water	257:21	0:0	4	ptname
op	257:28	0:0	4	=
water	257:30	0:0	4	"SPEEX"
water	257:37	0:0	4	;
water	258:12	0:0	4	rtp_fmt
op	258:19	0:0	4	->
water	258:21	0:0	4	pf_packetize
op	258:34	0:0	4	=
water	258:36	0:0	4	rtp_packetize_spx
water	258:53	0:0	4	;
break	259:12	259:17	4	
label	260:8	260:29	4	case VLC_CODEC_VORBIS :
water	261:12	0:0	4	rtp_fmt
op	261:19	0:0	4	->
water	261:21	0:0	4	ptname
op	261:28	0:0	4	=
water	261:30	0:0	4	"vorbis"
water	261:38	0:0	4	;
water	262:12	0:0	4	rtp_fmt
op	262:19	0:0	4	->
water	262:21	0:0	4	pf_packetize
op	262:34	0:0	4	=
water	262:36	0:0	4	rtp_packetize_xiph
water	262:54	0:0	4	;
if	263:12	274:12	4	(p_fmt -> i_extra > 0)
cond	263:16	263:33	5	p_fmt -> i_extra > 0
water	263:16	0:0	6	p_fmt
op	263:21	0:0	6	->
water	263:23	0:0	6	i_extra
op	263:31	0:0	6	>
water	263:33	0:0	6	0
stmts	264:12	274:12	5	
water	264:12	0:0	6	{
water	265:16	0:0	6	rtp_fmt
op	265:23	0:0	6	->
water	265:25	0:0	6	fmtp
op	265:30	0:0	6	=
water	265:32	0:0	6	NULL
water	265:36	0:0	6	;
decl	266:16	267:76	6	char	*config
op	266:29	0:0	6	=
call	266:31	267:75	7	rtp_xiph_b64_oob_config
arg	266:55	266:69	8	p_fmt->p_extra
water	266:55	0:0	9	p_fmt
op	266:60	0:0	9	->
water	266:62	0:0	9	p_extra
arg	267:55	267:69	8	p_fmt->i_extra
water	267:55	0:0	9	p_fmt
op	267:60	0:0	9	->
water	267:62	0:0	9	i_extra
arg	267:71	267:75	8	NULL
water	267:71	0:0	9	NULL
if	268:16	269:25	6	(config == NULL)
cond	268:20	268:30	7	config == NULL
water	268:20	0:0	8	config
op	268:27	0:0	8	==
water	268:30	0:0	8	NULL
stmts	269:20	269:25	7	
break	269:20	269:25	8	
if	270:16	272:40	6	(asprintf (& rtp_fmt -> fmtp ,"configuration=%s;" ,config ) == - 1)
cond	270:20	271:64	7	asprintf (& rtp_fmt -> fmtp ,"configuration=%s;" ,config ) == - 1
call	270:20	271:58	8	asprintf
arg	270:30	270:44	9	&rtp_fmt->fmtp
op	270:30	0:0	10	&
water	270:31	0:0	10	rtp_fmt
op	270:38	0:0	10	->
water	270:40	0:0	10	fmtp
arg	271:30	271:49	9	"configuration=%s;"
water	271:30	0:0	10	"configuration=%s;"
arg	271:51	271:58	9	config
water	271:51	0:0	10	config
op	271:60	0:0	8	==
op	271:63	0:0	8	-
water	271:64	0:0	8	1
stmts	272:20	272:40	7	
water	272:20	0:0	8	rtp_fmt
op	272:27	0:0	8	->
water	272:29	0:0	8	fmtp
op	272:34	0:0	8	=
water	272:36	0:0	8	NULL
water	272:40	0:0	8	;
call	273:16	273:27	6	free
arg	273:21	273:27	7	config
water	273:21	0:0	8	config
water	273:28	0:0	6	;
water	274:12	0:0	6	}
break	275:12	275:17	4	
label	276:8	276:29	4	case VLC_CODEC_THEORA :
water	277:12	0:0	4	rtp_fmt
op	277:19	0:0	4	->
water	277:21	0:0	4	ptname
op	277:28	0:0	4	=
water	277:30	0:0	4	"theora"
water	277:38	0:0	4	;
water	278:12	0:0	4	rtp_fmt
op	278:19	0:0	4	->
water	278:21	0:0	4	pf_packetize
op	278:34	0:0	4	=
water	278:36	0:0	4	rtp_packetize_xiph
water	278:54	0:0	4	;
if	279:12	317:12	4	(p_fmt -> i_extra > 0)
cond	279:16	279:33	5	p_fmt -> i_extra > 0
water	279:16	0:0	6	p_fmt
op	279:21	0:0	6	->
water	279:23	0:0	6	i_extra
op	279:31	0:0	6	>
water	279:33	0:0	6	0
stmts	280:12	317:12	5	
water	280:12	0:0	6	{
water	281:16	0:0	6	rtp_fmt
op	281:23	0:0	6	->
water	281:25	0:0	6	fmtp
op	281:30	0:0	6	=
water	281:32	0:0	6	NULL
water	281:36	0:0	6	;
decl	282:16	282:41	6	uint8_t	pixel_fmt
water	282:33	0:0	6	,
decl	282:16	282:41	6	uint8_t	c1
water	282:37	0:0	6	,
decl	282:16	282:41	6	uint8_t	c2
decl	283:16	285:66	6	char	*config
op	283:29	0:0	6	=
call	283:31	285:65	7	rtp_xiph_b64_oob_config
arg	283:55	283:69	8	p_fmt->p_extra
water	283:55	0:0	9	p_fmt
op	283:60	0:0	9	->
water	283:62	0:0	9	p_extra
arg	284:55	284:69	8	p_fmt->i_extra
water	284:55	0:0	9	p_fmt
op	284:60	0:0	9	->
water	284:62	0:0	9	i_extra
arg	285:55	285:65	8	&pixel_fmt
op	285:55	0:0	9	&
water	285:56	0:0	9	pixel_fmt
if	286:16	287:25	6	(config == NULL)
cond	286:20	286:30	7	config == NULL
water	286:20	0:0	8	config
op	286:27	0:0	8	==
water	286:30	0:0	8	NULL
stmts	287:20	287:25	7	
break	287:20	287:25	8	
if	288:16	293:16	6	(pixel_fmt == 1)
cond	288:20	288:33	7	pixel_fmt == 1
water	288:20	0:0	8	pixel_fmt
op	288:30	0:0	8	==
water	288:33	0:0	8	1
stmts	289:16	293:16	7	
water	289:16	0:0	8	{
call	291:20	291:31	8	free
arg	291:25	291:31	9	config
water	291:25	0:0	10	config
water	291:32	0:0	8	;
break	292:20	292:25	8	
water	293:16	0:0	8	}
switch	294:16	308:16	6	(pixel_fmt)
cond	294:24	294:24	7	pixel_fmt
water	294:24	0:0	8	pixel_fmt
stmts	295:16	308:16	7	
water	295:16	0:0	8	{
label	296:20	296:26	8	case 0 :
water	297:24	0:0	8	c1
op	297:27	0:0	8	=
water	297:29	0:0	8	2
water	297:30	0:0	8	;
water	298:24	0:0	8	c2
op	298:27	0:0	8	=
water	298:29	0:0	8	0
water	298:30	0:0	8	;
break	299:24	299:29	8	
label	300:20	300:26	8	case 2 :
water	301:24	0:0	8	c1
op	301:27	0:0	8	=
water	301:29	0:0	8	c2
op	301:32	0:0	8	=
water	301:34	0:0	8	2
water	301:35	0:0	8	;
break	302:24	302:29	8	
label	303:20	303:26	8	case 3 :
water	304:24	0:0	8	c1
op	304:27	0:0	8	=
water	304:29	0:0	8	c2
op	304:32	0:0	8	=
water	304:34	0:0	8	4
water	304:35	0:0	8	;
break	305:24	305:29	8	
label	306:20	306:27	8	default :
call	307:24	307:32	8	assert
arg	307:31	307:32	9	0
water	307:31	0:0	10	0
water	307:33	0:0	8	;
water	308:16	0:0	8	}
if	309:16	315:40	6	(asprintf (& rtp_fmt -> fmtp ,"sampling=YCbCr-4:%d:%d; width=%d; height=%d; " "delivery-method=inline; configuration=%s; " "delivery-method=in_band;" ,c1 ,c2 ,p_fmt -> video . i_width ,p_fmt -> video . i_height ,config ) == - 1)
cond	309:20	314:43	7	asprintf (& rtp_fmt -> fmtp ,"sampling=YCbCr-4:%d:%d; width=%d; height=%d; " "delivery-method=inline; configuration=%s; " "delivery-method=in_band;" ,c1 ,c2 ,p_fmt -> video . i_width ,p_fmt -> video . i_height ,config ) == - 1
call	309:20	314:37	8	asprintf
arg	309:30	309:44	9	&rtp_fmt->fmtp
op	309:30	0:0	10	&
water	309:31	0:0	10	rtp_fmt
op	309:38	0:0	10	->
water	309:40	0:0	10	fmtp
arg	310:30	312:56	9	"sampling=YCbCr-4:%d:%d; width=%d; height=%d; ""delivery-method=inline; configuration=%s; ""delivery-method=in_band;"
water	310:30	0:0	10	"sampling=YCbCr-4:%d:%d; width=%d; height=%d; "
water	311:30	0:0	10	"delivery-method=inline; configuration=%s; "
water	312:30	0:0	10	"delivery-method=in_band;"
arg	312:58	312:60	9	c1
water	312:58	0:0	10	c1
arg	312:62	312:64	9	c2
water	312:62	0:0	10	c2
arg	313:30	313:50	9	p_fmt->video.i_width
water	313:30	0:0	10	p_fmt
op	313:35	0:0	10	->
water	313:37	0:0	10	video
op	313:42	0:0	10	.
water	313:43	0:0	10	i_width
arg	313:52	313:73	9	p_fmt->video.i_height
water	313:52	0:0	10	p_fmt
op	313:57	0:0	10	->
water	313:59	0:0	10	video
op	313:64	0:0	10	.
water	313:65	0:0	10	i_height
arg	314:30	314:37	9	config
water	314:30	0:0	10	config
op	314:39	0:0	8	==
op	314:42	0:0	8	-
water	314:43	0:0	8	1
stmts	315:20	315:40	7	
water	315:20	0:0	8	rtp_fmt
op	315:27	0:0	8	->
water	315:29	0:0	8	fmtp
op	315:34	0:0	8	=
water	315:36	0:0	8	NULL
water	315:40	0:0	8	;
call	316:16	316:27	6	free
arg	316:21	316:27	7	config
water	316:21	0:0	8	config
water	316:28	0:0	6	;
water	317:12	0:0	6	}
break	318:12	318:17	4	
label	319:8	319:31	4	case VLC_CODEC_ITU_T140 :
water	320:12	0:0	4	rtp_fmt
op	320:19	0:0	4	->
water	320:21	0:0	4	ptname
op	320:28	0:0	4	=
water	320:30	0:0	4	"t140"
water	320:37	0:0	4	;
water	321:12	0:0	4	rtp_fmt
op	321:19	0:0	4	->
water	321:21	0:0	4	clock_rate
op	321:32	0:0	4	=
water	321:34	0:0	4	1000
water	321:38	0:0	4	;
water	322:12	0:0	4	rtp_fmt
op	322:19	0:0	4	->
water	322:21	0:0	4	pf_packetize
op	322:34	0:0	4	=
water	322:36	0:0	4	rtp_packetize_t140
water	322:54	0:0	4	;
break	323:12	323:17	4	
label	324:8	324:26	4	case VLC_CODEC_GSM :
water	325:12	0:0	4	rtp_fmt
op	325:19	0:0	4	->
water	325:21	0:0	4	payload_type
op	325:34	0:0	4	=
water	325:36	0:0	4	3
water	325:37	0:0	4	;
water	326:12	0:0	4	rtp_fmt
op	326:19	0:0	4	->
water	326:21	0:0	4	ptname
op	326:28	0:0	4	=
water	326:30	0:0	4	"GSM"
water	326:35	0:0	4	;
water	327:12	0:0	4	rtp_fmt
op	327:19	0:0	4	->
water	327:21	0:0	4	pf_packetize
op	327:34	0:0	4	=
water	327:36	0:0	4	rtp_packetize_split
water	327:55	0:0	4	;
break	328:12	328:17	4	
label	329:8	329:27	4	case VLC_CODEC_OPUS :
if	330:12	336:12	4	(p_fmt -> audio . i_channels > 2)
cond	330:16	330:42	5	p_fmt -> audio . i_channels > 2
water	330:16	0:0	6	p_fmt
op	330:21	0:0	6	->
water	330:23	0:0	6	audio
op	330:28	0:0	6	.
water	330:29	0:0	6	i_channels
op	330:40	0:0	6	>
water	330:42	0:0	6	2
stmts	331:12	336:12	5	
water	331:12	0:0	6	{
call	332:16	334:49	6	msg_Err
arg	332:25	332:28	7	obj
water	332:25	0:0	8	obj
arg	332:30	333:54	7	"Multistream opus not supported in RTP"" (having %d channels input)"
water	332:30	0:0	8	"Multistream opus not supported in RTP"
water	333:25	0:0	8	" (having %d channels input)"
arg	334:25	334:49	7	p_fmt->audio.i_channels
water	334:25	0:0	8	p_fmt
op	334:30	0:0	8	->
water	334:32	0:0	8	audio
op	334:37	0:0	8	.
water	334:38	0:0	8	i_channels
water	334:50	0:0	6	;
return	335:16	335:35	6	VLC_EGENERIC
water	335:23	0:0	7	VLC_EGENERIC
water	336:12	0:0	6	}
water	337:12	0:0	4	rtp_fmt
op	337:19	0:0	4	->
water	337:21	0:0	4	ptname
op	337:28	0:0	4	=
water	337:30	0:0	4	"opus"
water	337:36	0:0	4	;
water	338:12	0:0	4	rtp_fmt
op	338:19	0:0	4	->
water	338:21	0:0	4	pf_packetize
op	338:34	0:0	4	=
water	338:36	0:0	4	rtp_packetize_split
water	338:55	0:0	4	;
water	339:12	0:0	4	rtp_fmt
op	339:19	0:0	4	->
water	339:21	0:0	4	clock_rate
op	339:32	0:0	4	=
water	339:34	0:0	4	48000
water	339:39	0:0	4	;
water	340:12	0:0	4	rtp_fmt
op	340:19	0:0	4	->
water	340:21	0:0	4	channels
op	340:30	0:0	4	=
water	340:32	0:0	4	2
water	340:33	0:0	4	;
if	341:12	342:58	4	(p_fmt -> audio . i_channels == 2)
cond	341:16	341:43	5	p_fmt -> audio . i_channels == 2
water	341:16	0:0	6	p_fmt
op	341:21	0:0	6	->
water	341:23	0:0	6	audio
op	341:28	0:0	6	.
water	341:29	0:0	6	i_channels
op	341:40	0:0	6	==
water	341:43	0:0	6	2
stmts	342:16	342:58	5	
water	342:16	0:0	6	rtp_fmt
op	342:23	0:0	6	->
water	342:25	0:0	6	fmtp
op	342:30	0:0	6	=
call	342:32	342:57	6	strdup
arg	342:40	342:57	7	"sprop-stereo=1"
water	342:40	0:0	8	"sprop-stereo=1"
water	342:58	0:0	6	;
break	343:12	343:17	4	
label	344:8	344:26	4	case VLC_CODEC_VP8 :
water	345:12	0:0	4	rtp_fmt
op	345:19	0:0	4	->
water	345:21	0:0	4	ptname
op	345:28	0:0	4	=
water	345:30	0:0	4	"VP8"
water	345:35	0:0	4	;
water	346:12	0:0	4	rtp_fmt
op	346:19	0:0	4	->
water	346:21	0:0	4	pf_packetize
op	346:34	0:0	4	=
water	346:36	0:0	4	rtp_packetize_vp8
water	346:53	0:0	4	;
break	347:12	347:17	4	
label	348:8	348:27	4	case VLC_CODEC_MJPG :
label	349:8	349:27	4	case VLC_CODEC_JPEG :
water	350:12	0:0	4	rtp_fmt
op	350:19	0:0	4	->
water	350:21	0:0	4	ptname
op	350:28	0:0	4	=
water	350:30	0:0	4	"JPEG"
water	350:36	0:0	4	;
water	351:12	0:0	4	rtp_fmt
op	351:19	0:0	4	->
water	351:21	0:0	4	payload_type
op	351:34	0:0	4	=
water	351:36	0:0	4	26
water	351:38	0:0	4	;
water	352:12	0:0	4	rtp_fmt
op	352:19	0:0	4	->
water	352:21	0:0	4	pf_packetize
op	352:34	0:0	4	=
water	352:36	0:0	4	rtp_packetize_jpeg
water	352:54	0:0	4	;
break	353:12	353:17	4	
label	354:8	354:15	4	default :
call	355:12	356:61	4	msg_Err
arg	355:21	355:24	5	obj
water	355:21	0:0	6	obj
arg	355:26	356:36	5	"cannot add this stream (unsupported ""codec: %4.4s)"
water	355:26	0:0	6	"cannot add this stream (unsupported "
water	356:21	0:0	6	"codec: %4.4s)"
arg	356:38	356:61	5	(char*)&p_fmt->i_codec
water	356:38	0:0	6	(
water	356:39	0:0	6	char
op	356:43	0:0	6	*
water	356:44	0:0	6	)
op	356:45	0:0	6	&
water	356:46	0:0	6	p_fmt
op	356:51	0:0	6	->
water	356:53	0:0	6	i_codec
water	356:62	0:0	4	;
return	357:12	357:31	4	VLC_EGENERIC
water	357:19	0:0	5	VLC_EGENERIC
water	358:4	0:0	4	}
return	359:4	359:22	2	VLC_SUCCESS
water	359:11	0:0	3	VLC_SUCCESS
