func	2:0	85:0	0	int	AccessOpen
params	2:14	0:0	1	
param	2:16	2:37	2	vlc_object_t *	p_this
stmnts	0:0	84:16	1	
decl	4:4	4:46	2	access_t	*p_access
op	4:27	0:0	2	=
water	4:29	0:0	2	(
water	4:30	0:0	2	access_t
op	4:38	0:0	2	*
water	4:39	0:0	2	)
water	4:40	0:0	2	p_this
decl	5:4	5:23	2	access_sys_t	*p_sys
decl	6:4	6:41	2	int	i_ret
op	6:27	0:0	2	=
water	6:29	0:0	2	VLC_EGENERIC
decl	7:4	7:65	2	char	*psz_pathToZip
op	7:24	0:0	2	=
water	7:26	0:0	2	NULL
water	7:30	0:0	2	,
decl	7:4	7:65	2	char	*psz_path
op	7:42	0:0	2	=
water	7:44	0:0	2	NULL
water	7:48	0:0	2	,
decl	7:4	7:65	2	char	*psz_sep
op	7:59	0:0	2	=
water	7:61	0:0	2	NULL
if	8:4	12:4	2	(!strstr (p_access -> psz_location ,ZIP_SEP ))
cond	8:8	8:49	3	!strstr (p_access -> psz_location ,ZIP_SEP )
op	8:8	0:0	4	!
call	8:9	8:49	4	strstr
arg	8:17	8:39	5	p_access->psz_location
water	8:17	0:0	6	p_access
op	8:25	0:0	6	->
water	8:27	0:0	6	psz_location
arg	8:41	8:49	5	ZIP_SEP
water	8:41	0:0	6	ZIP_SEP
stmts	9:4	12:4	3	
water	9:4	0:0	4	{
call	10:8	10:74	4	msg_Dbg
arg	10:17	10:25	5	p_access
water	10:17	0:0	6	p_access
arg	10:27	10:74	5	"location does not contain separator "ZIP_SEP
water	10:27	0:0	6	"location does not contain separator "
water	10:66	0:0	6	ZIP_SEP
water	10:75	0:0	4	;
return	11:8	11:27	4	VLC_EGENERIC
water	11:15	0:0	5	VLC_EGENERIC
water	12:4	0:0	4	}
water	13:4	0:0	2	p_access
op	13:12	0:0	2	->
water	13:14	0:0	2	p_sys
op	13:20	0:0	2	=
water	13:22	0:0	2	p_sys
op	13:28	0:0	2	=
water	13:30	0:0	2	(
water	13:31	0:0	2	access_sys_t
op	13:43	0:0	2	*
water	13:44	0:0	2	)
call	14:12	14:46	2	calloc
arg	14:20	14:21	3	1
water	14:20	0:0	4	1
arg	14:23	14:46	3	sizeof(access_sys_t)
op	14:23	0:0	4	sizeof
water	14:29	0:0	4	(
water	14:31	0:0	4	access_sys_t
water	14:44	0:0	4	)
water	14:47	0:0	2	;
if	15:4	16:25	2	(unlikely (! p_sys ))
cond	15:8	15:25	3	unlikely (! p_sys )
call	15:8	15:25	4	unlikely
arg	15:18	15:25	5	!p_sys
op	15:18	0:0	6	!
water	15:19	0:0	6	p_sys
stmts	16:8	16:25	3	
return	16:8	16:25	4	VLC_ENOMEM
water	16:15	0:0	5	VLC_ENOMEM
water	18:4	0:0	2	psz_path
op	18:13	0:0	2	=
call	18:15	18:47	2	xstrdup
arg	18:24	18:47	3	p_access->psz_location
water	18:24	0:0	4	p_access
op	18:32	0:0	4	->
water	18:34	0:0	4	psz_location
water	18:48	0:0	2	;
water	19:4	0:0	2	psz_sep
op	19:12	0:0	2	=
call	19:14	19:40	2	strstr
arg	19:22	19:30	3	psz_path
water	19:22	0:0	4	psz_path
arg	19:32	19:40	3	ZIP_SEP
water	19:32	0:0	4	ZIP_SEP
water	19:41	0:0	2	;
op	20:4	0:0	2	*
water	20:5	0:0	2	psz_sep
op	20:13	0:0	2	=
water	20:15	0:0	2	'\0'
water	20:19	0:0	2	;
water	21:4	0:0	2	psz_pathToZip
op	21:18	0:0	2	=
call	21:20	21:42	2	unescapeXml
arg	21:33	21:42	3	psz_path
water	21:33	0:0	4	psz_path
water	21:43	0:0	2	;
if	22:4	33:4	2	(! psz_pathToZip)
cond	22:8	22:9	3	! psz_pathToZip
op	22:8	0:0	4	!
water	22:9	0:0	4	psz_pathToZip
stmts	23:4	33:4	3	
water	23:4	0:0	4	{
call	25:8	26:26	4	msg_Dbg
arg	25:17	25:25	5	p_access
water	25:17	0:0	6	p_access
arg	25:27	25:65	5	"not an encoded URL  Trying file '%s'"
water	25:27	0:0	6	"not an encoded URL  Trying file '%s'"
arg	26:17	26:26	5	psz_path
water	26:17	0:0	6	psz_path
water	26:27	0:0	4	;
water	27:8	0:0	4	psz_pathToZip
op	27:22	0:0	4	=
call	27:24	27:41	4	strdup
arg	27:32	27:41	5	psz_path
water	27:32	0:0	6	psz_path
water	27:42	0:0	4	;
if	28:8	32:8	4	(unlikely (! psz_pathToZip ))
cond	28:12	28:37	5	unlikely (! psz_pathToZip )
call	28:12	28:37	6	unlikely
arg	28:22	28:37	7	!psz_pathToZip
op	28:22	0:0	8	!
water	28:23	0:0	8	psz_pathToZip
stmts	29:8	32:8	5	
water	29:8	0:0	6	{
water	30:12	0:0	6	i_ret
op	30:18	0:0	6	=
water	30:20	0:0	6	VLC_ENOMEM
water	30:30	0:0	6	;
goto	31:12	31:21	6	exit
water	31:17	0:0	7	exit
water	32:8	0:0	6	}
water	33:4	0:0	4	}
water	34:4	0:0	2	p_sys
op	34:9	0:0	2	->
water	34:11	0:0	2	psz_fileInzip
op	34:25	0:0	2	=
call	34:27	34:62	2	unescapeXml
arg	34:40	34:62	3	psz_sep+ZIP_SEP_LEN
water	34:40	0:0	4	psz_sep
op	34:48	0:0	4	+
water	34:50	0:0	4	ZIP_SEP_LEN
water	34:63	0:0	2	;
if	35:4	43:4	2	(unlikely (! p_sys -> psz_fileInzip ))
cond	35:8	35:40	3	unlikely (! p_sys -> psz_fileInzip )
call	35:8	35:40	4	unlikely
arg	35:18	35:40	5	!p_sys->psz_fileInzip
op	35:18	0:0	6	!
water	35:19	0:0	6	p_sys
op	35:24	0:0	6	->
water	35:26	0:0	6	psz_fileInzip
stmts	36:4	43:4	3	
water	36:4	0:0	4	{
water	37:8	0:0	4	p_sys
op	37:13	0:0	4	->
water	37:15	0:0	4	psz_fileInzip
op	37:29	0:0	4	=
call	37:31	37:61	4	strdup
arg	37:39	37:61	5	psz_sep+ZIP_SEP_LEN
water	37:39	0:0	6	psz_sep
op	37:47	0:0	6	+
water	37:49	0:0	6	ZIP_SEP_LEN
water	37:62	0:0	4	;
if	38:8	42:8	4	(unlikely (! p_sys -> psz_fileInzip ))
cond	38:12	38:44	5	unlikely (! p_sys -> psz_fileInzip )
call	38:12	38:44	6	unlikely
arg	38:22	38:44	7	!p_sys->psz_fileInzip
op	38:22	0:0	8	!
water	38:23	0:0	8	p_sys
op	38:28	0:0	8	->
water	38:30	0:0	8	psz_fileInzip
stmts	39:8	42:8	5	
water	39:8	0:0	6	{
water	40:12	0:0	6	i_ret
op	40:18	0:0	6	=
water	40:20	0:0	6	VLC_ENOMEM
water	40:30	0:0	6	;
goto	41:12	41:21	6	exit
water	41:17	0:0	7	exit
water	42:8	0:0	6	}
water	43:4	0:0	4	}
decl	45:4	45:26	2	zlib_filefunc_def	func
water	46:4	0:0	2	func
op	46:8	0:0	2	.
water	46:9	0:0	2	zopen_file
op	46:22	0:0	2	=
water	46:24	0:0	2	ZipIO_Open
water	46:34	0:0	2	;
water	47:4	0:0	2	func
op	47:8	0:0	2	.
water	47:9	0:0	2	zread_file
op	47:22	0:0	2	=
water	47:24	0:0	2	ZipIO_Read
water	47:34	0:0	2	;
water	48:4	0:0	2	func
op	48:8	0:0	2	.
water	48:9	0:0	2	zwrite_file
op	48:22	0:0	2	=
water	48:24	0:0	2	ZipIO_Write
water	48:35	0:0	2	;
water	49:4	0:0	2	func
op	49:8	0:0	2	.
water	49:9	0:0	2	ztell_file
op	49:22	0:0	2	=
water	49:24	0:0	2	ZipIO_Tell
water	49:34	0:0	2	;
water	50:4	0:0	2	func
op	50:8	0:0	2	.
water	50:9	0:0	2	zseek_file
op	50:22	0:0	2	=
water	50:24	0:0	2	ZipIO_Seek
water	50:34	0:0	2	;
water	51:4	0:0	2	func
op	51:8	0:0	2	.
water	51:9	0:0	2	zclose_file
op	51:22	0:0	2	=
water	51:24	0:0	2	ZipIO_Close
water	51:35	0:0	2	;
water	52:4	0:0	2	func
op	52:8	0:0	2	.
water	52:9	0:0	2	zerror_file
op	52:22	0:0	2	=
water	52:24	0:0	2	ZipIO_Error
water	52:35	0:0	2	;
water	53:4	0:0	2	func
op	53:8	0:0	2	.
water	53:9	0:0	2	opaque
op	53:22	0:0	2	=
water	53:24	0:0	2	p_access
water	53:32	0:0	2	;
water	55:4	0:0	2	p_access
op	55:12	0:0	2	->
water	55:14	0:0	2	p_sys
op	55:19	0:0	2	->
water	55:21	0:0	2	zipFile
op	55:29	0:0	2	=
call	55:31	55:62	2	unzOpen2
arg	55:41	55:54	3	psz_pathToZip
water	55:41	0:0	4	psz_pathToZip
arg	55:56	55:62	3	&func
op	55:56	0:0	4	&
water	55:57	0:0	4	func
water	55:63	0:0	2	;
if	56:4	61:4	2	(! p_access -> p_sys -> zipFile)
cond	56:8	56:26	3	! p_access -> p_sys -> zipFile
op	56:8	0:0	4	!
water	56:9	0:0	4	p_access
op	56:17	0:0	4	->
water	56:19	0:0	4	p_sys
op	56:24	0:0	4	->
water	56:26	0:0	4	zipFile
stmts	57:4	61:4	3	
water	57:4	0:0	4	{
call	58:8	58:74	4	msg_Err
arg	58:17	58:25	5	p_access
water	58:17	0:0	6	p_access
arg	58:27	58:58	5	"not a valid zip archive: '%s'"
water	58:27	0:0	6	"not a valid zip archive: '%s'"
arg	58:60	58:74	5	psz_pathToZip
water	58:60	0:0	6	psz_pathToZip
water	58:75	0:0	4	;
water	59:8	0:0	4	i_ret
op	59:14	0:0	4	=
water	59:16	0:0	4	VLC_EGENERIC
water	59:28	0:0	4	;
goto	60:8	60:17	4	exit
water	60:13	0:0	5	exit
water	61:4	0:0	4	}
if	63:4	64:17	2	(( i_ret =OpenFileInZip (p_access ) ) != VLC_SUCCESS)
cond	63:8	63:49	3	( i_ret =OpenFileInZip (p_access ) ) != VLC_SUCCESS
water	63:8	0:0	4	(
water	63:10	0:0	4	i_ret
op	63:16	0:0	4	=
call	63:18	63:42	4	OpenFileInZip
arg	63:33	63:42	5	p_access
water	63:33	0:0	6	p_access
water	63:44	0:0	4	)
op	63:46	0:0	4	!=
water	63:49	0:0	4	VLC_SUCCESS
stmts	64:8	64:17	3	
goto	64:8	64:17	4	exit
water	64:13	0:0	5	exit
call	66:4	66:70	2	ACCESS_SET_CALLBACKS
arg	66:26	66:36	3	AccessRead
water	66:26	0:0	4	AccessRead
arg	66:38	66:42	3	NULL
water	66:38	0:0	4	NULL
arg	66:44	66:57	3	AccessControl
water	66:44	0:0	4	AccessControl
arg	66:59	66:70	3	AccessSeek
water	66:59	0:0	4	AccessSeek
water	66:71	0:0	2	;
water	67:4	0:0	2	p_access
op	67:12	0:0	2	->
water	67:14	0:0	2	info
op	67:18	0:0	2	.
water	67:19	0:0	2	i_pos
op	67:26	0:0	2	=
water	67:28	0:0	2	0
water	67:29	0:0	2	;
water	68:4	0:0	2	p_access
op	68:12	0:0	2	->
water	68:14	0:0	2	info
op	68:18	0:0	2	.
water	68:19	0:0	2	b_eof
op	68:26	0:0	2	=
water	68:28	0:0	2	false
water	68:33	0:0	2	;
water	69:4	0:0	2	i_ret
op	69:10	0:0	2	=
water	69:12	0:0	2	VLC_SUCCESS
water	69:23	0:0	2	;
label	70:0	70:4	2	exit :
if	71:4	81:4	2	(i_ret != VLC_SUCCESS)
cond	71:8	71:17	3	i_ret != VLC_SUCCESS
water	71:8	0:0	4	i_ret
op	71:14	0:0	4	!=
water	71:17	0:0	4	VLC_SUCCESS
stmts	72:4	81:4	3	
water	72:4	0:0	4	{
if	73:8	77:8	4	(p_access -> p_sys -> zipFile)
cond	73:12	73:29	5	p_access -> p_sys -> zipFile
water	73:12	0:0	6	p_access
op	73:20	0:0	6	->
water	73:22	0:0	6	p_sys
op	73:27	0:0	6	->
water	73:29	0:0	6	zipFile
stmts	74:8	77:8	5	
water	74:8	0:0	6	{
call	75:12	75:58	6	unzCloseCurrentFile
arg	75:33	75:58	7	p_access->p_sys->zipFile
water	75:33	0:0	8	p_access
op	75:41	0:0	8	->
water	75:43	0:0	8	p_sys
op	75:48	0:0	8	->
water	75:50	0:0	8	zipFile
water	75:59	0:0	6	;
call	76:12	76:47	6	unzClose
arg	76:22	76:47	7	p_access->p_sys->zipFile
water	76:22	0:0	8	p_access
op	76:30	0:0	8	->
water	76:32	0:0	8	p_sys
op	76:37	0:0	8	->
water	76:39	0:0	8	zipFile
water	76:48	0:0	6	;
water	77:8	0:0	6	}
call	78:8	78:35	4	free
arg	78:14	78:35	5	p_sys->psz_fileInzip
water	78:14	0:0	6	p_sys
op	78:19	0:0	6	->
water	78:21	0:0	6	psz_fileInzip
water	78:36	0:0	4	;
call	79:8	79:35	4	free
arg	79:14	79:35	5	p_sys->fileFunctions
water	79:14	0:0	6	p_sys
op	79:19	0:0	6	->
water	79:21	0:0	6	fileFunctions
water	79:36	0:0	4	;
call	80:8	80:20	4	free
arg	80:14	80:20	5	p_sys
water	80:14	0:0	6	p_sys
water	80:21	0:0	4	;
water	81:4	0:0	4	}
call	82:4	82:24	2	free
arg	82:10	82:24	3	psz_pathToZip
water	82:10	0:0	4	psz_pathToZip
water	82:25	0:0	2	;
call	83:4	83:19	2	free
arg	83:10	83:19	3	psz_path
water	83:10	0:0	4	psz_path
water	83:20	0:0	2	;
return	84:4	84:16	2	i_ret
water	84:11	0:0	3	i_ret
