func	2:0	251:0	0	static int	OpenDecoder
params	2:22	0:0	1	
param	2:23	2:43	2	vlc_object_t *	p_this
stmnts	0:0	250:23	1	
decl	4:4	4:41	2	decoder_t	*p_dec
op	4:21	0:0	2	=
water	4:23	0:0	2	(
water	4:24	0:0	2	decoder_t
op	4:33	0:0	2	*
water	4:34	0:0	2	)
water	4:35	0:0	2	p_this
decl	5:4	5:24	2	decoder_sys_t	*p_sys
if	6:4	7:27	2	(p_dec -> fmt_in . i_cat != VIDEO_ES && ! p_dec -> b_force)
cond	6:8	6:51	3	p_dec -> fmt_in . i_cat != VIDEO_ES && ! p_dec -> b_force
water	6:8	0:0	4	p_dec
op	6:13	0:0	4	->
water	6:15	0:0	4	fmt_in
op	6:21	0:0	4	.
water	6:22	0:0	4	i_cat
op	6:28	0:0	4	!=
water	6:31	0:0	4	VIDEO_ES
op	6:40	0:0	4	&&
op	6:43	0:0	4	!
water	6:44	0:0	4	p_dec
op	6:49	0:0	4	->
water	6:51	0:0	4	b_force
stmts	7:8	7:27	3	
return	7:8	7:27	4	VLC_EGENERIC
water	7:15	0:0	5	VLC_EGENERIC
decl	8:4	8:27	2	const char	*mime
op	8:21	0:0	2	=
water	8:23	0:0	2	NULL
switch	9:4	18:4	2	(p_dec -> fmt_in . i_codec)
cond	9:12	9:26	3	p_dec -> fmt_in . i_codec
water	9:12	0:0	4	p_dec
op	9:17	0:0	4	->
water	9:19	0:0	4	fmt_in
op	9:25	0:0	4	.
water	9:26	0:0	4	i_codec
stmts	9:35	18:4	3	
water	9:35	0:0	4	{
label	10:4	10:23	4	case VLC_CODEC_H264 :
water	10:25	0:0	4	mime
op	10:30	0:0	4	=
water	10:32	0:0	4	"video/avc"
water	10:43	0:0	4	;
break	10:45	10:50	4	
label	11:4	11:23	4	case VLC_CODEC_H263 :
water	11:25	0:0	4	mime
op	11:30	0:0	4	=
water	11:32	0:0	4	"video/3gpp"
water	11:44	0:0	4	;
break	11:46	11:51	4	
label	12:4	12:23	4	case VLC_CODEC_MP4V :
water	12:25	0:0	4	mime
op	12:30	0:0	4	=
water	12:32	0:0	4	"video/mp4v-es"
water	12:47	0:0	4	;
break	12:49	12:54	4	
label	13:4	13:22	4	case VLC_CODEC_VC1 :
water	13:25	0:0	4	mime
op	13:30	0:0	4	=
water	13:32	0:0	4	"video/wvc1"
water	13:44	0:0	4	;
break	13:46	13:51	4	
label	14:4	14:22	4	case VLC_CODEC_VP8 :
water	14:25	0:0	4	mime
op	14:30	0:0	4	=
water	14:32	0:0	4	"video/x-vnd.on2.vp8"
water	14:53	0:0	4	;
break	14:55	14:60	4	
label	15:4	15:11	4	default :
call	16:8	16:82	4	msg_Dbg
arg	16:16	16:21	5	p_dec
water	16:16	0:0	6	p_dec
arg	16:23	16:50	5	"codec %4.4s not supported"
water	16:23	0:0	6	"codec %4.4s not supported"
arg	16:52	16:82	5	(char*)&p_dec->fmt_in.i_codec
water	16:52	0:0	6	(
water	16:53	0:0	6	char
op	16:58	0:0	6	*
water	16:59	0:0	6	)
op	16:60	0:0	6	&
water	16:61	0:0	6	p_dec
op	16:66	0:0	6	->
water	16:68	0:0	6	fmt_in
op	16:74	0:0	6	.
water	16:75	0:0	6	i_codec
water	16:83	0:0	4	;
return	17:8	17:27	4	VLC_EGENERIC
water	17:15	0:0	5	VLC_EGENERIC
water	18:4	0:0	4	}
decl	19:4	19:26	2	size_t	fmt_profile
op	19:23	0:0	2	=
water	19:25	0:0	2	0
if	20:4	21:72	2	(p_dec -> fmt_in . i_codec == VLC_CODEC_H264)
cond	20:8	20:33	3	p_dec -> fmt_in . i_codec == VLC_CODEC_H264
water	20:8	0:0	4	p_dec
op	20:13	0:0	4	->
water	20:15	0:0	4	fmt_in
op	20:21	0:0	4	.
water	20:22	0:0	4	i_codec
op	20:30	0:0	4	==
water	20:33	0:0	4	VLC_CODEC_H264
stmts	21:8	21:72	3	
call	21:8	21:71	4	h264_get_profile_level
arg	21:31	21:45	5	&p_dec->fmt_in
op	21:31	0:0	6	&
water	21:32	0:0	6	p_dec
op	21:37	0:0	6	->
water	21:39	0:0	6	fmt_in
arg	21:47	21:59	5	&fmt_profile
op	21:47	0:0	6	&
water	21:48	0:0	6	fmt_profile
arg	21:61	21:65	5	NULL
water	21:61	0:0	6	NULL
arg	21:67	21:71	5	NULL
water	21:67	0:0	6	NULL
water	21:72	0:0	4	;
if	23:4	24:25	2	(( p_dec -> p_sys = p_sys =calloc (1 ,sizeof ( * p_sys ) ) ) == NULL)
cond	23:8	23:62	3	( p_dec -> p_sys = p_sys =calloc (1 ,sizeof ( * p_sys ) ) ) == NULL
water	23:8	0:0	4	(
water	23:9	0:0	4	p_dec
op	23:14	0:0	4	->
water	23:16	0:0	4	p_sys
op	23:22	0:0	4	=
water	23:24	0:0	4	p_sys
op	23:30	0:0	4	=
call	23:32	23:56	4	calloc
arg	23:39	23:40	5	1
water	23:39	0:0	6	1
arg	23:42	23:56	5	sizeof(*p_sys)
op	23:42	0:0	6	sizeof
water	23:48	0:0	6	(
op	23:49	0:0	6	*
water	23:50	0:0	6	p_sys
water	23:55	0:0	6	)
water	23:57	0:0	4	)
op	23:59	0:0	4	==
water	23:62	0:0	4	NULL
stmts	24:8	24:25	3	
return	24:8	24:25	4	VLC_ENOMEM
water	24:15	0:0	5	VLC_ENOMEM
water	25:4	0:0	2	p_dec
op	25:9	0:0	2	->
water	25:11	0:0	2	pf_decode_video
op	25:27	0:0	2	=
water	25:29	0:0	2	DecodeVideo
water	25:40	0:0	2	;
water	26:4	0:0	2	p_dec
op	26:9	0:0	2	->
water	26:11	0:0	2	fmt_out
op	26:18	0:0	2	.
water	26:19	0:0	2	i_cat
op	26:25	0:0	2	=
water	26:27	0:0	2	p_dec
op	26:32	0:0	2	->
water	26:34	0:0	2	fmt_in
op	26:40	0:0	2	.
water	26:41	0:0	2	i_cat
water	26:46	0:0	2	;
water	27:4	0:0	2	p_dec
op	27:9	0:0	2	->
water	27:11	0:0	2	fmt_out
op	27:18	0:0	2	.
water	27:19	0:0	2	video
op	27:25	0:0	2	=
water	27:27	0:0	2	p_dec
op	27:32	0:0	2	->
water	27:34	0:0	2	fmt_in
op	27:40	0:0	2	.
water	27:41	0:0	2	video
water	27:46	0:0	2	;
water	28:4	0:0	2	p_dec
op	28:9	0:0	2	->
water	28:11	0:0	2	fmt_out
op	28:18	0:0	2	.
water	28:19	0:0	2	audio
op	28:25	0:0	2	=
water	28:27	0:0	2	p_dec
op	28:32	0:0	2	->
water	28:34	0:0	2	fmt_in
op	28:40	0:0	2	.
water	28:41	0:0	2	audio
water	28:46	0:0	2	;
water	29:4	0:0	2	p_dec
op	29:9	0:0	2	->
water	29:11	0:0	2	b_need_packetized
op	29:29	0:0	2	=
water	29:31	0:0	2	true
water	29:35	0:0	2	;
decl	30:4	30:22	2	JNIEnv	*env
op	30:16	0:0	2	=
water	30:18	0:0	2	NULL
call	31:4	31:39	2	jni_attach_thread
arg	31:22	31:26	3	&env
op	31:22	0:0	4	&
water	31:23	0:0	4	env
arg	31:28	31:39	3	THREAD_NAME
water	31:28	0:0	4	THREAD_NAME
water	31:40	0:0	2	;
for	32:4	40:4	2	( int i = 0 ;classes [ i ] . name;i ++)
forinit	0:0	32:18	3	 int i = 0 ;
decl	32:9	32:18	4	int	i
op	32:15	0:0	4	=
water	32:17	0:0	4	0
cond	32:20	32:31	3	classes [ i ] . name
water	32:20	0:0	4	classes
op	32:27	0:0	4	[
water	32:28	0:0	4	i
op	32:29	0:0	4	]
op	32:30	0:0	4	.
water	32:31	0:0	4	name
forexpr	32:37	32:38	3	i ++
water	32:37	0:0	4	i
op	32:38	0:0	4	++
stmts	32:42	40:4	3	
water	32:42	0:0	4	{
op	33:8	0:0	4	*
call	33:9	33:54	4	(jclass*)
arg	33:19	33:54	5	(uint8_t*)p_sys+classes[i].offset
water	33:19	0:0	6	(
water	33:20	0:0	6	uint8_t
op	33:27	0:0	6	*
water	33:28	0:0	6	)
water	33:29	0:0	6	p_sys
op	33:35	0:0	6	+
water	33:37	0:0	6	classes
op	33:44	0:0	6	[
water	33:45	0:0	6	i
op	33:46	0:0	6	]
op	33:47	0:0	6	.
water	33:48	0:0	6	offset
op	33:56	0:0	4	=
water	34:12	0:0	4	(
op	34:13	0:0	4	*
water	34:14	0:0	4	env
water	34:17	0:0	4	)
op	34:18	0:0	4	->
call	34:20	34:50	4	FindClass
arg	34:30	34:33	5	env
water	34:30	0:0	6	env
arg	34:35	34:50	5	classes[i].name
water	34:35	0:0	6	classes
op	34:42	0:0	6	[
water	34:43	0:0	6	i
op	34:44	0:0	6	]
op	34:45	0:0	6	.
water	34:46	0:0	6	name
water	34:51	0:0	4	;
if	35:8	39:8	4	(( * env ) ->ExceptionOccurred (env ))
cond	35:12	35:41	5	( * env ) ->ExceptionOccurred (env )
water	35:12	0:0	6	(
op	35:13	0:0	6	*
water	35:14	0:0	6	env
water	35:17	0:0	6	)
op	35:18	0:0	6	->
call	35:20	35:41	6	ExceptionOccurred
arg	35:38	35:41	7	env
water	35:38	0:0	8	env
stmts	35:44	39:8	5	
water	35:44	0:0	6	{
call	36:12	36:70	6	msg_Warn
arg	36:21	36:26	7	p_dec
water	36:21	0:0	8	p_dec
arg	36:28	36:53	7	"Unable to find class %s"
water	36:28	0:0	8	"Unable to find class %s"
arg	36:55	36:70	7	classes[i].name
water	36:55	0:0	8	classes
op	36:62	0:0	8	[
water	36:63	0:0	8	i
op	36:64	0:0	8	]
op	36:65	0:0	8	.
water	36:66	0:0	8	name
water	36:71	0:0	6	;
water	37:12	0:0	6	(
op	37:13	0:0	6	*
water	37:14	0:0	6	env
water	37:17	0:0	6	)
op	37:18	0:0	6	->
call	37:20	37:38	6	ExceptionClear
arg	37:35	37:38	7	env
water	37:35	0:0	8	env
water	37:39	0:0	6	;
goto	38:12	38:22	6	error
water	38:17	0:0	7	error
water	39:8	0:0	6	}
water	40:4	0:0	4	}
decl	41:4	41:21	2	jclass	last_class
for	42:4	70:4	2	( int i = 0 ;members [ i ] . name;i ++)
forinit	0:0	42:18	3	 int i = 0 ;
decl	42:9	42:18	4	int	i
op	42:15	0:0	4	=
water	42:17	0:0	4	0
cond	42:20	42:31	3	members [ i ] . name
water	42:20	0:0	4	members
op	42:27	0:0	4	[
water	42:28	0:0	4	i
op	42:29	0:0	4	]
op	42:30	0:0	4	.
water	42:31	0:0	4	name
forexpr	42:37	42:38	3	i ++
water	42:37	0:0	4	i
op	42:38	0:0	4	++
stmts	42:42	70:4	3	
water	42:42	0:0	4	{
if	43:8	44:65	4	(i == 0 ||strcmp (members [ i ] . class ,members [ i - 1 ] . class ))
cond	43:12	43:67	5	i == 0 ||strcmp (members [ i ] . class ,members [ i - 1 ] . class )
water	43:12	0:0	6	i
op	43:14	0:0	6	==
water	43:17	0:0	6	0
op	43:19	0:0	6	||
call	43:22	43:67	6	strcmp
arg	43:29	43:45	7	members[i].class
water	43:29	0:0	8	members
op	43:36	0:0	8	[
water	43:37	0:0	8	i
op	43:38	0:0	8	]
op	43:39	0:0	8	.
water	43:40	0:0	8	class
arg	43:47	43:67	7	members[i-1].class
water	43:47	0:0	8	members
op	43:54	0:0	8	[
water	43:55	0:0	8	i
op	43:57	0:0	8	-
water	43:59	0:0	8	1
op	43:60	0:0	8	]
op	43:61	0:0	8	.
water	43:62	0:0	8	class
stmts	44:12	44:65	5	
water	44:12	0:0	6	last_class
op	44:23	0:0	6	=
water	44:25	0:0	6	(
op	44:26	0:0	6	*
water	44:27	0:0	6	env
water	44:30	0:0	6	)
op	44:31	0:0	6	->
call	44:33	44:64	6	FindClass
arg	44:43	44:46	7	env
water	44:43	0:0	8	env
arg	44:48	44:64	7	members[i].class
water	44:48	0:0	8	members
op	44:55	0:0	8	[
water	44:56	0:0	8	i
op	44:57	0:0	8	]
op	44:58	0:0	8	.
water	44:59	0:0	8	class
water	44:65	0:0	6	;
if	45:8	49:8	4	(( * env ) ->ExceptionOccurred (env ))
cond	45:12	45:41	5	( * env ) ->ExceptionOccurred (env )
water	45:12	0:0	6	(
op	45:13	0:0	6	*
water	45:14	0:0	6	env
water	45:17	0:0	6	)
op	45:18	0:0	6	->
call	45:20	45:41	6	ExceptionOccurred
arg	45:38	45:41	7	env
water	45:38	0:0	8	env
stmts	45:44	49:8	5	
water	45:44	0:0	6	{
call	46:12	46:71	6	msg_Warn
arg	46:21	46:26	7	p_dec
water	46:21	0:0	8	p_dec
arg	46:28	46:53	7	"Unable to find class %s"
water	46:28	0:0	8	"Unable to find class %s"
arg	46:55	46:71	7	members[i].class
water	46:55	0:0	8	members
op	46:62	0:0	8	[
water	46:63	0:0	8	i
op	46:64	0:0	8	]
op	46:65	0:0	8	.
water	46:66	0:0	8	class
water	46:72	0:0	6	;
water	47:12	0:0	6	(
op	47:13	0:0	6	*
water	47:14	0:0	6	env
water	47:17	0:0	6	)
op	47:18	0:0	6	->
call	47:20	47:38	6	ExceptionClear
arg	47:35	47:38	7	env
water	47:35	0:0	8	env
water	47:39	0:0	6	;
goto	48:12	48:22	6	error
water	48:17	0:0	7	error
water	49:8	0:0	6	}
switch	50:8	63:8	4	(members [ i ] . type)
cond	50:16	50:27	5	members [ i ] . type
water	50:16	0:0	6	members
op	50:23	0:0	6	[
water	50:24	0:0	6	i
op	50:25	0:0	6	]
op	50:26	0:0	6	.
water	50:27	0:0	6	type
stmts	50:33	63:8	5	
water	50:33	0:0	6	{
label	51:8	51:19	6	case METHOD :
op	52:12	0:0	6	*
call	52:13	52:61	6	(jmethodID*)
arg	52:26	52:61	7	(uint8_t*)p_sys+members[i].offset
water	52:26	0:0	8	(
water	52:27	0:0	8	uint8_t
op	52:34	0:0	8	*
water	52:35	0:0	8	)
water	52:36	0:0	8	p_sys
op	52:42	0:0	8	+
water	52:44	0:0	8	members
op	52:51	0:0	8	[
water	52:52	0:0	8	i
op	52:53	0:0	8	]
op	52:54	0:0	8	.
water	52:55	0:0	8	offset
op	52:63	0:0	6	=
water	53:16	0:0	6	(
op	53:17	0:0	6	*
water	53:18	0:0	6	env
water	53:21	0:0	6	)
op	53:22	0:0	6	->
call	53:24	53:84	6	GetMethodID
arg	53:36	53:39	7	env
water	53:36	0:0	8	env
arg	53:41	53:51	7	last_class
water	53:41	0:0	8	last_class
arg	53:53	53:68	7	members[i].name
water	53:53	0:0	8	members
op	53:60	0:0	8	[
water	53:61	0:0	8	i
op	53:62	0:0	8	]
op	53:63	0:0	8	.
water	53:64	0:0	8	name
arg	53:70	53:84	7	members[i].sig
water	53:70	0:0	8	members
op	53:77	0:0	8	[
water	53:78	0:0	8	i
op	53:79	0:0	8	]
op	53:80	0:0	8	.
water	53:81	0:0	8	sig
water	53:85	0:0	6	;
break	54:12	54:17	6	
label	55:8	55:26	6	case STATIC_METHOD :
op	56:12	0:0	6	*
call	56:13	56:61	6	(jmethodID*)
arg	56:26	56:61	7	(uint8_t*)p_sys+members[i].offset
water	56:26	0:0	8	(
water	56:27	0:0	8	uint8_t
op	56:34	0:0	8	*
water	56:35	0:0	8	)
water	56:36	0:0	8	p_sys
op	56:42	0:0	8	+
water	56:44	0:0	8	members
op	56:51	0:0	8	[
water	56:52	0:0	8	i
op	56:53	0:0	8	]
op	56:54	0:0	8	.
water	56:55	0:0	8	offset
op	56:63	0:0	6	=
water	57:16	0:0	6	(
op	57:17	0:0	6	*
water	57:18	0:0	6	env
water	57:21	0:0	6	)
op	57:22	0:0	6	->
call	57:24	57:90	6	GetStaticMethodID
arg	57:42	57:45	7	env
water	57:42	0:0	8	env
arg	57:47	57:57	7	last_class
water	57:47	0:0	8	last_class
arg	57:59	57:74	7	members[i].name
water	57:59	0:0	8	members
op	57:66	0:0	8	[
water	57:67	0:0	8	i
op	57:68	0:0	8	]
op	57:69	0:0	8	.
water	57:70	0:0	8	name
arg	57:76	57:90	7	members[i].sig
water	57:76	0:0	8	members
op	57:83	0:0	8	[
water	57:84	0:0	8	i
op	57:85	0:0	8	]
op	57:86	0:0	8	.
water	57:87	0:0	8	sig
water	57:91	0:0	6	;
break	58:12	58:17	6	
label	59:8	59:18	6	case FIELD :
op	60:12	0:0	6	*
call	60:13	60:60	6	(jfieldID*)
arg	60:25	60:60	7	(uint8_t*)p_sys+members[i].offset
water	60:25	0:0	8	(
water	60:26	0:0	8	uint8_t
op	60:33	0:0	8	*
water	60:34	0:0	8	)
water	60:35	0:0	8	p_sys
op	60:41	0:0	8	+
water	60:43	0:0	8	members
op	60:50	0:0	8	[
water	60:51	0:0	8	i
op	60:52	0:0	8	]
op	60:53	0:0	8	.
water	60:54	0:0	8	offset
op	60:62	0:0	6	=
water	61:16	0:0	6	(
op	61:17	0:0	6	*
water	61:18	0:0	6	env
water	61:21	0:0	6	)
op	61:22	0:0	6	->
call	61:24	61:83	6	GetFieldID
arg	61:35	61:38	7	env
water	61:35	0:0	8	env
arg	61:40	61:50	7	last_class
water	61:40	0:0	8	last_class
arg	61:52	61:67	7	members[i].name
water	61:52	0:0	8	members
op	61:59	0:0	8	[
water	61:60	0:0	8	i
op	61:61	0:0	8	]
op	61:62	0:0	8	.
water	61:63	0:0	8	name
arg	61:69	61:83	7	members[i].sig
water	61:69	0:0	8	members
op	61:76	0:0	8	[
water	61:77	0:0	8	i
op	61:78	0:0	8	]
op	61:79	0:0	8	.
water	61:80	0:0	8	sig
water	61:84	0:0	6	;
break	62:12	62:17	6	
water	63:8	0:0	6	}
if	64:8	69:8	4	(( * env ) ->ExceptionOccurred (env ))
cond	64:12	64:41	5	( * env ) ->ExceptionOccurred (env )
water	64:12	0:0	6	(
op	64:13	0:0	6	*
water	64:14	0:0	6	env
water	64:17	0:0	6	)
op	64:18	0:0	6	->
call	64:20	64:41	6	ExceptionOccurred
arg	64:38	64:41	7	env
water	64:38	0:0	8	env
stmts	64:44	69:8	5	
water	64:44	0:0	6	{
call	65:12	66:54	6	msg_Warn
arg	65:21	65:26	7	p_dec
water	65:21	0:0	8	p_dec
arg	65:28	65:64	7	"Unable to find the member %s in %s"
water	65:28	0:0	8	"Unable to find the member %s in %s"
arg	66:21	66:36	7	members[i].name
water	66:21	0:0	8	members
op	66:28	0:0	8	[
water	66:29	0:0	8	i
op	66:30	0:0	8	]
op	66:31	0:0	8	.
water	66:32	0:0	8	name
arg	66:38	66:54	7	members[i].class
water	66:38	0:0	8	members
op	66:45	0:0	8	[
water	66:46	0:0	8	i
op	66:47	0:0	8	]
op	66:48	0:0	8	.
water	66:49	0:0	8	class
water	66:55	0:0	6	;
water	67:12	0:0	6	(
op	67:13	0:0	6	*
water	67:14	0:0	6	env
water	67:17	0:0	6	)
op	67:18	0:0	6	->
call	67:20	67:38	6	ExceptionClear
arg	67:35	67:38	7	env
water	67:35	0:0	8	env
water	67:39	0:0	6	;
goto	68:12	68:22	6	error
water	68:17	0:0	7	error
water	69:8	0:0	6	}
water	70:4	0:0	4	}
decl	71:4	72:72	2	int	num_codecs
op	71:19	0:0	2	=
water	71:21	0:0	2	(
op	71:22	0:0	2	*
water	71:23	0:0	2	env
water	71:26	0:0	2	)
op	71:27	0:0	2	->
call	71:29	72:71	3	CallStaticIntMethod
arg	71:49	71:52	4	env
water	71:49	0:0	5	env
arg	71:54	71:83	4	p_sys->media_codec_list_class
water	71:54	0:0	5	p_sys
op	71:59	0:0	5	->
water	71:61	0:0	5	media_codec_list_class
arg	72:49	72:71	4	p_sys->get_codec_count
water	72:49	0:0	5	p_sys
op	72:54	0:0	5	->
water	72:56	0:0	5	get_codec_count
decl	73:4	73:29	2	jobject	codec_name
op	73:23	0:0	2	=
water	73:25	0:0	2	NULL
for	74:4	152:4	2	( int i = 0 ;i < num_codecs;i ++)
forinit	0:0	74:18	3	 int i = 0 ;
decl	74:9	74:18	4	int	i
op	74:15	0:0	4	=
water	74:17	0:0	4	0
cond	74:20	74:24	3	i < num_codecs
water	74:20	0:0	4	i
op	74:22	0:0	4	<
water	74:24	0:0	4	num_codecs
forexpr	74:36	74:37	3	i ++
water	74:36	0:0	4	i
op	74:37	0:0	4	++
stmts	74:41	152:4	3	
water	74:41	0:0	4	{
decl	75:8	75:41	4	jobject	codec_capabilities
op	75:35	0:0	4	=
water	75:37	0:0	4	NULL
decl	76:8	76:37	4	jobject	profile_levels
op	76:31	0:0	4	=
water	76:33	0:0	4	NULL
decl	77:8	77:27	4	jobject	info
op	77:21	0:0	4	=
water	77:23	0:0	4	NULL
decl	78:8	78:27	4	jobject	name
op	78:21	0:0	4	=
water	78:23	0:0	4	NULL
decl	79:8	79:28	4	jobject	types
op	79:22	0:0	4	=
water	79:24	0:0	4	NULL
decl	80:8	80:26	4	jsize	name_len
op	80:23	0:0	4	=
water	80:25	0:0	4	0
decl	81:8	81:49	4	int	profile_levels_len
op	81:31	0:0	4	=
water	81:33	0:0	4	0
water	81:34	0:0	4	,
decl	81:8	81:49	4	int	num_types
op	81:46	0:0	4	=
water	81:48	0:0	4	0
decl	82:8	82:35	4	const char	*name_ptr
op	82:29	0:0	4	=
water	82:31	0:0	4	NULL
decl	83:8	83:26	4	bool	found
op	83:19	0:0	4	=
water	83:21	0:0	4	false
water	84:8	0:0	4	info
op	84:13	0:0	4	=
water	84:15	0:0	4	(
op	84:16	0:0	4	*
water	84:17	0:0	4	env
water	84:20	0:0	4	)
op	84:21	0:0	4	->
call	84:23	85:73	4	CallStaticObjectMethod
arg	84:46	84:49	5	env
water	84:46	0:0	6	env
arg	84:51	84:80	5	p_sys->media_codec_list_class
water	84:51	0:0	6	p_sys
op	84:56	0:0	6	->
water	84:58	0:0	6	media_codec_list_class
arg	85:46	85:70	5	p_sys->get_codec_info_at
water	85:46	0:0	6	p_sys
op	85:51	0:0	6	->
water	85:53	0:0	6	get_codec_info_at
arg	85:72	85:73	5	i
water	85:72	0:0	6	i
water	85:74	0:0	4	;
if	86:8	87:26	4	(( * env ) ->CallBooleanMethod (env ,info ,p_sys -> is_encoder ))
cond	86:12	86:66	5	( * env ) ->CallBooleanMethod (env ,info ,p_sys -> is_encoder )
water	86:12	0:0	6	(
op	86:13	0:0	6	*
water	86:14	0:0	6	env
water	86:17	0:0	6	)
op	86:18	0:0	6	->
call	86:20	86:66	6	CallBooleanMethod
arg	86:38	86:41	7	env
water	86:38	0:0	8	env
arg	86:43	86:47	7	info
water	86:43	0:0	8	info
arg	86:49	86:66	7	p_sys->is_encoder
water	86:49	0:0	8	p_sys
op	86:54	0:0	8	->
water	86:56	0:0	8	is_encoder
stmts	87:12	87:26	5	
goto	87:12	87:26	6	loopclean
water	87:17	0:0	7	loopclean
water	88:8	0:0	4	codec_capabilities
op	88:27	0:0	4	=
water	88:29	0:0	4	(
op	88:30	0:0	4	*
water	88:31	0:0	4	env
water	88:34	0:0	4	)
op	88:35	0:0	4	->
call	88:37	89:85	4	CallObjectMethod
arg	88:54	88:57	5	env
water	88:54	0:0	6	env
arg	88:59	88:63	5	info
water	88:59	0:0	6	info
arg	88:65	88:97	5	p_sys->get_capabilities_for_type
water	88:65	0:0	6	p_sys
op	88:70	0:0	6	->
water	88:72	0:0	6	get_capabilities_for_type
arg	89:54	89:85	5	(*env)->NewStringUTF(env,mime)
water	89:54	0:0	6	(
op	89:55	0:0	6	*
water	89:56	0:0	6	env
water	89:59	0:0	6	)
op	89:60	0:0	6	->
call	89:62	89:84	6	NewStringUTF
arg	89:75	89:78	7	env
water	89:75	0:0	8	env
arg	89:80	89:84	7	mime
water	89:80	0:0	8	mime
water	89:86	0:0	4	;
if	90:8	94:8	4	(( * env ) ->ExceptionOccurred (env ))
cond	90:12	90:41	5	( * env ) ->ExceptionOccurred (env )
water	90:12	0:0	6	(
op	90:13	0:0	6	*
water	90:14	0:0	6	env
water	90:17	0:0	6	)
op	90:18	0:0	6	->
call	90:20	90:41	6	ExceptionOccurred
arg	90:38	90:41	7	env
water	90:38	0:0	8	env
stmts	90:44	94:8	5	
water	90:44	0:0	6	{
call	91:12	91:89	6	msg_Warn
arg	91:21	91:26	7	p_dec
water	91:21	0:0	8	p_dec
arg	91:28	91:89	7	"Exception occurred in MediaCodecInfo.getCapabilitiesForType"
water	91:28	0:0	8	"Exception occurred in MediaCodecInfo.getCapabilitiesForType"
water	91:90	0:0	6	;
water	92:12	0:0	6	(
op	92:13	0:0	6	*
water	92:14	0:0	6	env
water	92:17	0:0	6	)
op	92:18	0:0	6	->
call	92:20	92:38	6	ExceptionClear
arg	92:35	92:38	7	env
water	92:35	0:0	8	env
water	92:39	0:0	6	;
goto	93:12	93:26	6	loopclean
water	93:17	0:0	7	loopclean
water	94:8	0:0	6	}
else	94:10	98:8	4
stmts	94:15	98:8	5	
if	94:15	98:8	6	(codec_capabilities)
cond	94:19	94:19	7	codec_capabilities
water	94:19	0:0	8	codec_capabilities
stmts	94:39	98:8	7	
water	94:39	0:0	8	{
water	95:12	0:0	8	profile_levels
op	95:27	0:0	8	=
water	95:29	0:0	8	(
op	95:30	0:0	8	*
water	95:31	0:0	8	env
water	95:34	0:0	8	)
op	95:35	0:0	8	->
call	95:37	95:104	8	GetObjectField
arg	95:52	95:55	9	env
water	95:52	0:0	10	env
arg	95:57	95:75	9	codec_capabilities
water	95:57	0:0	10	codec_capabilities
arg	95:77	95:104	9	p_sys->profile_levels_field
water	95:77	0:0	10	p_sys
op	95:82	0:0	10	->
water	95:84	0:0	10	profile_levels_field
water	95:105	0:0	8	;
if	96:12	97:80	8	(profile_levels)
cond	96:16	96:16	9	profile_levels
water	96:16	0:0	10	profile_levels
stmts	97:16	97:80	9	
water	97:16	0:0	10	profile_levels_len
op	97:35	0:0	10	=
water	97:37	0:0	10	(
op	97:38	0:0	10	*
water	97:39	0:0	10	env
water	97:42	0:0	10	)
op	97:43	0:0	10	->
call	97:45	97:79	10	GetArrayLength
arg	97:60	97:63	11	env
water	97:60	0:0	12	env
arg	97:65	97:79	11	profile_levels
water	97:65	0:0	12	profile_levels
water	97:80	0:0	10	;
water	98:8	0:0	8	}
call	99:8	99:73	4	msg_Dbg
arg	99:16	99:21	5	p_dec
water	99:16	0:0	6	p_dec
arg	99:23	99:53	5	"Number of profile levels: %d"
water	99:23	0:0	6	"Number of profile levels: %d"
arg	99:55	99:73	5	profile_levels_len
water	99:55	0:0	6	profile_levels_len
water	99:74	0:0	4	;
water	100:8	0:0	4	types
op	100:14	0:0	4	=
water	100:16	0:0	4	(
op	100:17	0:0	4	*
water	100:18	0:0	4	env
water	100:21	0:0	4	)
op	100:22	0:0	4	->
call	100:24	100:78	4	CallObjectMethod
arg	100:41	100:44	5	env
water	100:41	0:0	6	env
arg	100:46	100:50	5	info
water	100:46	0:0	6	info
arg	100:52	100:78	5	p_sys->get_supported_types
water	100:52	0:0	6	p_sys
op	100:57	0:0	6	->
water	100:59	0:0	6	get_supported_types
water	100:79	0:0	4	;
water	101:8	0:0	4	num_types
op	101:18	0:0	4	=
water	101:20	0:0	4	(
op	101:21	0:0	4	*
water	101:22	0:0	4	env
water	101:25	0:0	4	)
op	101:26	0:0	4	->
call	101:28	101:53	4	GetArrayLength
arg	101:43	101:46	5	env
water	101:43	0:0	6	env
arg	101:48	101:53	5	types
water	101:48	0:0	6	types
water	101:54	0:0	4	;
water	102:8	0:0	4	name
op	102:13	0:0	4	=
water	102:15	0:0	4	(
op	102:16	0:0	4	*
water	102:17	0:0	4	env
water	102:20	0:0	4	)
op	102:21	0:0	4	->
call	102:23	102:66	4	CallObjectMethod
arg	102:40	102:43	5	env
water	102:40	0:0	6	env
arg	102:45	102:49	5	info
water	102:45	0:0	6	info
arg	102:51	102:66	5	p_sys->get_name
water	102:51	0:0	6	p_sys
op	102:56	0:0	6	->
water	102:58	0:0	6	get_name
water	102:67	0:0	4	;
water	103:8	0:0	4	name_len
op	103:17	0:0	4	=
water	103:19	0:0	4	(
op	103:20	0:0	4	*
water	103:21	0:0	4	env
water	103:24	0:0	4	)
op	103:25	0:0	4	->
call	103:27	103:55	4	GetStringUTFLength
arg	103:46	103:49	5	env
water	103:46	0:0	6	env
arg	103:51	103:55	5	name
water	103:51	0:0	6	name
water	103:56	0:0	4	;
water	104:8	0:0	4	name_ptr
op	104:17	0:0	4	=
water	104:19	0:0	4	(
op	104:20	0:0	4	*
water	104:21	0:0	4	env
water	104:24	0:0	4	)
op	104:25	0:0	4	->
call	104:27	104:60	4	GetStringUTFChars
arg	104:45	104:48	5	env
water	104:45	0:0	6	env
arg	104:50	104:54	5	name
water	104:50	0:0	6	name
arg	104:56	104:60	5	NULL
water	104:56	0:0	6	NULL
water	104:61	0:0	4	;
water	105:8	0:0	4	found
op	105:14	0:0	4	=
water	105:16	0:0	4	false
water	105:21	0:0	4	;
if	106:8	107:26	4	(!strncmp (name_ptr ,"OMX.google." ,__MIN (11 ,name_len ) ))
cond	106:12	106:65	5	!strncmp (name_ptr ,"OMX.google." ,__MIN (11 ,name_len ) )
op	106:12	0:0	6	!
call	106:13	106:65	6	strncmp
arg	106:21	106:29	7	name_ptr
water	106:21	0:0	8	name_ptr
arg	106:31	106:44	7	"OMX.google."
water	106:31	0:0	8	"OMX.google."
arg	106:46	106:65	7	__MIN(11,name_len)
call	106:46	106:64	8	__MIN
arg	106:52	106:54	9	11
water	106:52	0:0	10	11
arg	106:56	106:64	9	name_len
water	106:56	0:0	10	name_len
stmts	107:12	107:26	5	
goto	107:12	107:26	6	loopclean
water	107:17	0:0	7	loopclean
for	108:8	131:8	4	( int j = 0 ;j < num_types && ! found;j ++)
forinit	0:0	108:22	5	 int j = 0 ;
decl	108:13	108:22	6	int	j
op	108:19	0:0	6	=
water	108:21	0:0	6	0
cond	108:24	108:42	5	j < num_types && ! found
water	108:24	0:0	6	j
op	108:26	0:0	6	<
water	108:28	0:0	6	num_types
op	108:38	0:0	6	&&
op	108:41	0:0	6	!
water	108:42	0:0	6	found
forexpr	108:49	108:50	5	j ++
water	108:49	0:0	6	j
op	108:50	0:0	6	++
stmts	108:54	131:8	5	
water	108:54	0:0	6	{
decl	109:12	109:71	6	jobject	type
op	109:25	0:0	6	=
water	109:27	0:0	6	(
op	109:28	0:0	6	*
water	109:29	0:0	6	env
water	109:32	0:0	6	)
op	109:33	0:0	6	->
call	109:35	109:70	7	GetObjectArrayElement
arg	109:57	109:60	8	env
water	109:57	0:0	9	env
arg	109:62	109:67	8	types
water	109:62	0:0	9	types
arg	109:69	109:70	8	j
water	109:69	0:0	9	j
if	110:12	129:12	6	(!jstrcmp (env ,type ,mime ))
cond	110:16	110:40	7	!jstrcmp (env ,type ,mime )
op	110:16	0:0	8	!
call	110:17	110:40	8	jstrcmp
arg	110:25	110:28	9	env
water	110:25	0:0	10	env
arg	110:30	110:34	9	type
water	110:30	0:0	10	type
arg	110:36	110:40	9	mime
water	110:36	0:0	10	mime
stmts	110:43	129:12	7	
water	110:43	0:0	8	{
if	114:16	126:16	8	(p_dec -> fmt_in . i_codec == VLC_CODEC_H264 && fmt_profile)
cond	114:20	114:63	9	p_dec -> fmt_in . i_codec == VLC_CODEC_H264 && fmt_profile
water	114:20	0:0	10	p_dec
op	114:25	0:0	10	->
water	114:27	0:0	10	fmt_in
op	114:33	0:0	10	.
water	114:34	0:0	10	i_codec
op	114:42	0:0	10	==
water	114:45	0:0	10	VLC_CODEC_H264
op	114:60	0:0	10	&&
water	114:63	0:0	10	fmt_profile
stmts	114:76	126:16	9	
water	114:76	0:0	10	{
for	115:20	125:20	10	( int i = 0 ;i < profile_levels_len && ! found;++ i)
forinit	0:0	115:34	11	 int i = 0 ;
decl	115:25	115:34	12	int	i
op	115:31	0:0	12	=
water	115:33	0:0	12	0
cond	115:36	115:63	11	i < profile_levels_len && ! found
water	115:36	0:0	12	i
op	115:38	0:0	12	<
water	115:40	0:0	12	profile_levels_len
op	115:59	0:0	12	&&
op	115:62	0:0	12	!
water	115:63	0:0	12	found
forexpr	115:70	115:72	11	++ i
op	115:70	0:0	12	++
water	115:72	0:0	12	i
stmts	115:75	125:20	11	
water	115:75	0:0	12	{
decl	116:24	116:101	12	jobject	profile_level
op	116:46	0:0	12	=
water	116:48	0:0	12	(
op	116:49	0:0	12	*
water	116:50	0:0	12	env
water	116:53	0:0	12	)
op	116:54	0:0	12	->
call	116:56	116:100	13	GetObjectArrayElement
arg	116:78	116:81	14	env
water	116:78	0:0	15	env
arg	116:83	116:97	14	profile_levels
water	116:83	0:0	15	profile_levels
arg	116:99	116:100	14	i
water	116:99	0:0	15	i
decl	117:24	117:103	12	int	omx_profile
op	117:40	0:0	12	=
water	117:42	0:0	12	(
op	117:43	0:0	12	*
water	117:44	0:0	12	env
water	117:47	0:0	12	)
op	117:48	0:0	12	->
call	117:50	117:102	13	GetIntField
arg	117:62	117:65	14	env
water	117:62	0:0	15	env
arg	117:67	117:80	14	profile_level
water	117:67	0:0	15	profile_level
arg	117:82	117:102	14	p_sys->profile_field
water	117:82	0:0	15	p_sys
op	117:87	0:0	15	->
water	117:89	0:0	15	profile_field
decl	118:24	118:86	12	size_t	codec_profile
op	118:45	0:0	12	=
call	118:47	118:85	13	convert_omx_to_profile_idc
arg	118:74	118:85	14	omx_profile
water	118:74	0:0	15	omx_profile
water	119:24	0:0	12	(
op	119:25	0:0	12	*
water	119:26	0:0	12	env
water	119:29	0:0	12	)
op	119:30	0:0	12	->
call	119:32	119:65	12	DeleteLocalRef
arg	119:47	119:50	13	env
water	119:47	0:0	14	env
arg	119:52	119:65	13	profile_level
water	119:52	0:0	14	profile_level
water	119:66	0:0	12	;
if	120:24	121:36	12	(codec_profile != fmt_profile)
cond	120:28	120:45	13	codec_profile != fmt_profile
water	120:28	0:0	14	codec_profile
op	120:42	0:0	14	!=
water	120:45	0:0	14	fmt_profile
stmts	121:28	121:36	13	
continue	121:28	121:36	14	
water	124:24	0:0	12	found
op	124:30	0:0	12	=
water	124:32	0:0	12	true
water	124:36	0:0	12	;
water	125:20	0:0	12	}
water	126:16	0:0	10	}
else	127:16	128:32	8
stmts	128:20	128:32	9	
water	128:20	0:0	10	found
op	128:26	0:0	10	=
water	128:28	0:0	10	true
water	128:32	0:0	10	;
water	129:12	0:0	8	}
water	130:12	0:0	6	(
op	130:13	0:0	6	*
water	130:14	0:0	6	env
water	130:17	0:0	6	)
op	130:18	0:0	6	->
call	130:20	130:44	6	DeleteLocalRef
arg	130:35	130:38	7	env
water	130:35	0:0	8	env
arg	130:40	130:44	7	type
water	130:40	0:0	8	type
water	130:45	0:0	6	;
water	131:8	0:0	6	}
if	132:8	138:8	4	(found)
cond	132:12	132:12	5	found
water	132:12	0:0	6	found
stmts	132:19	138:8	5	
water	132:19	0:0	6	{
call	133:12	133:59	6	msg_Dbg
arg	133:20	133:25	7	p_dec
water	133:20	0:0	8	p_dec
arg	133:27	133:39	7	"using %.*s"
water	133:27	0:0	8	"using %.*s"
arg	133:41	133:49	7	name_len
water	133:41	0:0	8	name_len
arg	133:51	133:59	7	name_ptr
water	133:51	0:0	8	name_ptr
water	133:60	0:0	6	;
water	134:12	0:0	6	p_sys
op	134:17	0:0	6	->
water	134:19	0:0	6	name
op	134:24	0:0	6	=
call	134:26	134:45	6	malloc
arg	134:33	134:45	7	name_len+1
water	134:33	0:0	8	name_len
op	134:42	0:0	8	+
water	134:44	0:0	8	1
water	134:46	0:0	6	;
call	135:12	135:50	6	memcpy
arg	135:19	135:30	7	p_sys->name
water	135:19	0:0	8	p_sys
op	135:24	0:0	8	->
water	135:26	0:0	8	name
arg	135:32	135:40	7	name_ptr
water	135:32	0:0	8	name_ptr
arg	135:42	135:50	7	name_len
water	135:42	0:0	8	name_len
water	135:51	0:0	6	;
water	136:12	0:0	6	p_sys
op	136:17	0:0	6	->
water	136:19	0:0	6	name
op	136:23	0:0	6	[
water	136:24	0:0	6	name_len
op	136:32	0:0	6	]
op	136:34	0:0	6	=
water	136:36	0:0	6	'\0'
water	136:40	0:0	6	;
water	137:12	0:0	6	codec_name
op	137:23	0:0	6	=
water	137:25	0:0	6	name
water	137:29	0:0	6	;
water	138:8	0:0	6	}
label	139:0	139:9	4	loopclean :
if	140:8	141:62	4	(name)
cond	140:12	140:12	5	name
water	140:12	0:0	6	name
stmts	141:12	141:62	5	
water	141:12	0:0	6	(
op	141:13	0:0	6	*
water	141:14	0:0	6	env
water	141:17	0:0	6	)
op	141:18	0:0	6	->
call	141:20	141:61	6	ReleaseStringUTFChars
arg	141:42	141:45	7	env
water	141:42	0:0	8	env
arg	141:47	141:51	7	name
water	141:47	0:0	8	name
arg	141:53	141:61	7	name_ptr
water	141:53	0:0	8	name_ptr
water	141:62	0:0	6	;
if	142:8	143:55	4	(profile_levels)
cond	142:12	142:12	5	profile_levels
water	142:12	0:0	6	profile_levels
stmts	143:12	143:55	5	
water	143:12	0:0	6	(
op	143:13	0:0	6	*
water	143:14	0:0	6	env
water	143:17	0:0	6	)
op	143:18	0:0	6	->
call	143:20	143:54	6	DeleteLocalRef
arg	143:35	143:38	7	env
water	143:35	0:0	8	env
arg	143:40	143:54	7	profile_levels
water	143:40	0:0	8	profile_levels
water	143:55	0:0	6	;
if	144:8	145:46	4	(types)
cond	144:12	144:12	5	types
water	144:12	0:0	6	types
stmts	145:12	145:46	5	
water	145:12	0:0	6	(
op	145:13	0:0	6	*
water	145:14	0:0	6	env
water	145:17	0:0	6	)
op	145:18	0:0	6	->
call	145:20	145:45	6	DeleteLocalRef
arg	145:35	145:38	7	env
water	145:35	0:0	8	env
arg	145:40	145:45	7	types
water	145:40	0:0	8	types
water	145:46	0:0	6	;
if	146:8	147:59	4	(codec_capabilities)
cond	146:12	146:12	5	codec_capabilities
water	146:12	0:0	6	codec_capabilities
stmts	147:12	147:59	5	
water	147:12	0:0	6	(
op	147:13	0:0	6	*
water	147:14	0:0	6	env
water	147:17	0:0	6	)
op	147:18	0:0	6	->
call	147:20	147:58	6	DeleteLocalRef
arg	147:35	147:38	7	env
water	147:35	0:0	8	env
arg	147:40	147:58	7	codec_capabilities
water	147:40	0:0	8	codec_capabilities
water	147:59	0:0	6	;
if	148:8	149:45	4	(info)
cond	148:12	148:12	5	info
water	148:12	0:0	6	info
stmts	149:12	149:45	5	
water	149:12	0:0	6	(
op	149:13	0:0	6	*
water	149:14	0:0	6	env
water	149:17	0:0	6	)
op	149:18	0:0	6	->
call	149:20	149:44	6	DeleteLocalRef
arg	149:35	149:38	7	env
water	149:35	0:0	8	env
arg	149:40	149:44	7	info
water	149:40	0:0	8	info
water	149:45	0:0	6	;
if	150:8	151:17	4	(found)
cond	150:12	150:12	5	found
water	150:12	0:0	6	found
stmts	151:12	151:17	5	
break	151:12	151:17	6	
water	152:4	0:0	4	}
if	153:4	156:4	2	(! codec_name)
cond	153:8	153:9	3	! codec_name
op	153:8	0:0	4	!
water	153:9	0:0	4	codec_name
stmts	153:21	156:4	3	
water	153:21	0:0	4	{
call	154:8	154:70	4	msg_Dbg
arg	154:16	154:21	5	p_dec
water	154:16	0:0	6	p_dec
arg	154:23	154:64	5	"No suitable codec matching %s was found"
water	154:23	0:0	6	"No suitable codec matching %s was found"
arg	154:66	154:70	5	mime
water	154:66	0:0	6	mime
water	154:71	0:0	4	;
goto	155:8	155:18	4	error
water	155:13	0:0	5	error
water	156:4	0:0	4	}
water	160:4	0:0	2	p_sys
op	160:9	0:0	2	->
water	160:11	0:0	2	codec
op	160:17	0:0	2	=
water	160:19	0:0	2	(
op	160:20	0:0	2	*
water	160:21	0:0	2	env
water	160:24	0:0	2	)
op	160:25	0:0	2	->
call	160:27	161:89	2	CallStaticObjectMethod
arg	160:50	160:53	3	env
water	160:50	0:0	4	env
arg	160:55	160:79	3	p_sys->media_codec_class
water	160:55	0:0	4	p_sys
op	160:60	0:0	4	->
water	160:62	0:0	4	media_codec_class
arg	161:50	161:77	3	p_sys->create_by_codec_name
water	161:50	0:0	4	p_sys
op	161:55	0:0	4	->
water	161:57	0:0	4	create_by_codec_name
arg	161:79	161:89	3	codec_name
water	161:79	0:0	4	codec_name
water	161:90	0:0	2	;
if	162:4	166:4	2	(( * env ) ->ExceptionOccurred (env ))
cond	162:8	162:37	3	( * env ) ->ExceptionOccurred (env )
water	162:8	0:0	4	(
op	162:9	0:0	4	*
water	162:10	0:0	4	env
water	162:13	0:0	4	)
op	162:14	0:0	4	->
call	162:16	162:37	4	ExceptionOccurred
arg	162:34	162:37	5	env
water	162:34	0:0	6	env
stmts	162:40	166:4	3	
water	162:40	0:0	4	{
call	163:8	163:77	4	msg_Warn
arg	163:17	163:22	5	p_dec
water	163:17	0:0	6	p_dec
arg	163:24	163:77	5	"Exception occurred in MediaCodec.createByCodecName."
water	163:24	0:0	6	"Exception occurred in MediaCodec.createByCodecName."
water	163:78	0:0	4	;
water	164:8	0:0	4	(
op	164:9	0:0	4	*
water	164:10	0:0	4	env
water	164:13	0:0	4	)
op	164:14	0:0	4	->
call	164:16	164:34	4	ExceptionClear
arg	164:31	164:34	5	env
water	164:31	0:0	6	env
water	164:35	0:0	4	;
goto	165:8	165:18	4	error
water	165:13	0:0	5	error
water	166:4	0:0	4	}
water	167:4	0:0	2	p_sys
op	167:9	0:0	2	->
water	167:11	0:0	2	allocated
op	167:21	0:0	2	=
water	167:23	0:0	2	true
water	167:27	0:0	2	;
water	168:4	0:0	2	p_sys
op	168:9	0:0	2	->
water	168:11	0:0	2	codec
op	168:17	0:0	2	=
water	168:19	0:0	2	(
op	168:20	0:0	2	*
water	168:21	0:0	2	env
water	168:24	0:0	2	)
op	168:25	0:0	2	->
call	168:27	168:57	2	NewGlobalRef
arg	168:40	168:43	3	env
water	168:40	0:0	4	env
arg	168:45	168:57	3	p_sys->codec
water	168:45	0:0	4	p_sys
op	168:50	0:0	4	->
water	168:52	0:0	4	codec
water	168:58	0:0	2	;
decl	169:4	171:83	2	jobject	format
op	169:19	0:0	2	=
water	169:21	0:0	2	(
op	169:22	0:0	2	*
water	169:23	0:0	2	env
water	169:26	0:0	2	)
op	169:27	0:0	2	->
call	169:29	171:82	3	CallStaticObjectMethod
arg	169:52	169:55	4	env
water	169:52	0:0	5	env
arg	169:57	169:82	4	p_sys->media_format_class
water	169:57	0:0	5	p_sys
op	169:62	0:0	5	->
water	169:64	0:0	5	media_format_class
arg	170:25	170:51	4	p_sys->create_video_format
water	170:25	0:0	5	p_sys
op	170:30	0:0	5	->
water	170:32	0:0	5	create_video_format
arg	170:53	170:84	4	(*env)->NewStringUTF(env,mime)
water	170:53	0:0	5	(
op	170:54	0:0	5	*
water	170:55	0:0	5	env
water	170:58	0:0	5	)
op	170:59	0:0	5	->
call	170:61	170:83	5	NewStringUTF
arg	170:74	170:77	6	env
water	170:74	0:0	7	env
arg	170:79	170:83	6	mime
water	170:79	0:0	7	mime
arg	171:25	171:52	4	p_dec->fmt_in.video.i_width
water	171:25	0:0	5	p_dec
op	171:30	0:0	5	->
water	171:32	0:0	5	fmt_in
op	171:38	0:0	5	.
water	171:39	0:0	5	video
op	171:44	0:0	5	.
water	171:45	0:0	5	i_width
arg	171:54	171:82	4	p_dec->fmt_in.video.i_height
water	171:54	0:0	5	p_dec
op	171:59	0:0	5	->
water	171:61	0:0	5	fmt_in
op	171:67	0:0	5	.
water	171:68	0:0	5	video
op	171:73	0:0	5	.
water	171:74	0:0	5	i_height
if	172:4	192:4	2	(p_dec -> fmt_in . i_extra)
cond	172:8	172:22	3	p_dec -> fmt_in . i_extra
water	172:8	0:0	4	p_dec
op	172:13	0:0	4	->
water	172:15	0:0	4	fmt_in
op	172:21	0:0	4	.
water	172:22	0:0	4	i_extra
stmts	172:31	192:4	3	
water	172:31	0:0	4	{
decl	176:8	176:49	4	int	buf_size
op	176:21	0:0	4	=
water	176:23	0:0	4	p_dec
op	176:28	0:0	4	->
water	176:30	0:0	4	fmt_in
op	176:36	0:0	4	.
water	176:37	0:0	4	i_extra
op	176:45	0:0	4	+
water	176:47	0:0	4	20
decl	177:8	178:90	4	jobject	bytebuf
op	177:24	0:0	4	=
water	177:26	0:0	4	(
op	177:27	0:0	4	*
water	177:28	0:0	4	env
water	177:31	0:0	4	)
op	177:32	0:0	4	->
call	177:34	178:89	5	CallStaticObjectMethod
arg	177:57	177:60	6	env
water	177:57	0:0	7	env
arg	177:62	177:86	6	p_sys->byte_buffer_class
water	177:62	0:0	7	p_sys
op	177:67	0:0	7	->
water	177:69	0:0	7	byte_buffer_class
arg	178:57	178:79	6	p_sys->allocate_direct
water	178:57	0:0	7	p_sys
op	178:62	0:0	7	->
water	178:64	0:0	7	allocate_direct
arg	178:81	178:89	6	buf_size
water	178:81	0:0	7	buf_size
decl	179:8	179:45	4	uint32_t	size
op	179:22	0:0	4	=
water	179:24	0:0	4	p_dec
op	179:29	0:0	4	->
water	179:31	0:0	4	fmt_in
op	179:37	0:0	4	.
water	179:38	0:0	4	i_extra
decl	180:8	180:67	4	uint8_t	*ptr
op	180:21	0:0	4	=
water	180:23	0:0	4	(
op	180:24	0:0	4	*
water	180:25	0:0	4	env
water	180:28	0:0	4	)
op	180:29	0:0	4	->
call	180:31	180:66	5	GetDirectBufferAddress
arg	180:54	180:57	6	env
water	180:54	0:0	7	env
arg	180:59	180:66	6	bytebuf
water	180:59	0:0	7	bytebuf
if	181:8	185:8	4	(p_dec -> fmt_in . i_codec == VLC_CODEC_H264 && ( ( uint8_t * ) p_dec -> fmt_in . p_extra ) [ 0 ] == 1)
cond	181:12	181:95	5	p_dec -> fmt_in . i_codec == VLC_CODEC_H264 && ( ( uint8_t * ) p_dec -> fmt_in . p_extra ) [ 0 ] == 1
water	181:12	0:0	6	p_dec
op	181:17	0:0	6	->
water	181:19	0:0	6	fmt_in
op	181:25	0:0	6	.
water	181:26	0:0	6	i_codec
op	181:34	0:0	6	==
water	181:37	0:0	6	VLC_CODEC_H264
op	181:52	0:0	6	&&
water	181:55	0:0	6	(
water	181:56	0:0	6	(
water	181:57	0:0	6	uint8_t
op	181:64	0:0	6	*
water	181:65	0:0	6	)
water	181:66	0:0	6	p_dec
op	181:71	0:0	6	->
water	181:73	0:0	6	fmt_in
op	181:79	0:0	6	.
water	181:80	0:0	6	p_extra
water	181:87	0:0	6	)
op	181:88	0:0	6	[
water	181:89	0:0	6	0
op	181:90	0:0	6	]
op	181:92	0:0	6	==
water	181:95	0:0	6	1
stmts	181:98	185:8	5	
water	181:98	0:0	6	{
call	182:12	184:51	6	convert_sps_pps
arg	182:28	182:33	7	p_dec
water	182:28	0:0	8	p_dec
arg	182:35	182:56	7	p_dec->fmt_in.p_extra
water	182:35	0:0	8	p_dec
op	182:40	0:0	8	->
water	182:42	0:0	8	fmt_in
op	182:48	0:0	8	.
water	182:49	0:0	8	p_extra
arg	182:58	182:79	7	p_dec->fmt_in.i_extra
water	182:58	0:0	8	p_dec
op	182:63	0:0	8	->
water	182:65	0:0	8	fmt_in
op	182:71	0:0	8	.
water	182:72	0:0	8	i_extra
arg	183:28	183:31	7	ptr
water	183:28	0:0	8	ptr
arg	183:33	183:41	7	buf_size
water	183:33	0:0	8	buf_size
arg	184:28	184:33	7	&size
op	184:28	0:0	8	&
water	184:29	0:0	8	size
arg	184:35	184:51	7	&p_sys->nal_size
op	184:35	0:0	8	&
water	184:36	0:0	8	p_sys
op	184:41	0:0	8	->
water	184:43	0:0	8	nal_size
water	184:52	0:0	6	;
water	185:8	0:0	6	}
else	185:10	187:8	4
stmts	185:15	187:8	5	
water	185:15	0:0	6	{
call	186:12	186:51	6	memcpy
arg	186:19	186:22	7	ptr
water	186:19	0:0	8	ptr
arg	186:24	186:45	7	p_dec->fmt_in.p_extra
water	186:24	0:0	8	p_dec
op	186:29	0:0	8	->
water	186:31	0:0	8	fmt_in
op	186:37	0:0	8	.
water	186:38	0:0	8	p_extra
arg	186:47	186:51	7	size
water	186:47	0:0	8	size
water	186:52	0:0	6	;
water	187:8	0:0	6	}
water	188:8	0:0	4	(
op	188:9	0:0	4	*
water	188:10	0:0	4	env
water	188:13	0:0	4	)
op	188:14	0:0	4	->
call	188:16	188:65	4	CallObjectMethod
arg	188:33	188:36	5	env
water	188:33	0:0	6	env
arg	188:38	188:45	5	bytebuf
water	188:38	0:0	6	bytebuf
arg	188:47	188:59	5	p_sys->limit
water	188:47	0:0	6	p_sys
op	188:52	0:0	6	->
water	188:54	0:0	6	limit
arg	188:61	188:65	5	size
water	188:61	0:0	6	size
water	188:66	0:0	4	;
water	189:8	0:0	4	(
op	189:9	0:0	4	*
water	189:10	0:0	4	env
water	189:13	0:0	4	)
op	189:14	0:0	4	->
call	189:16	190:74	4	CallVoidMethod
arg	189:31	189:34	5	env
water	189:31	0:0	6	env
arg	189:36	189:42	5	format
water	189:36	0:0	6	format
arg	189:44	189:65	5	p_sys->set_bytebuffer
water	189:44	0:0	6	p_sys
op	189:49	0:0	6	->
water	189:51	0:0	6	set_bytebuffer
arg	190:31	190:65	5	(*env)->NewStringUTF(env,"csd-0")
water	190:31	0:0	6	(
op	190:32	0:0	6	*
water	190:33	0:0	6	env
water	190:36	0:0	6	)
op	190:37	0:0	6	->
call	190:39	190:64	6	NewStringUTF
arg	190:52	190:55	7	env
water	190:52	0:0	8	env
arg	190:57	190:64	7	"csd-0"
water	190:57	0:0	8	"csd-0"
arg	190:67	190:74	5	bytebuf
water	190:67	0:0	6	bytebuf
water	190:75	0:0	4	;
water	191:8	0:0	4	(
op	191:9	0:0	4	*
water	191:10	0:0	4	env
water	191:13	0:0	4	)
op	191:14	0:0	4	->
call	191:16	191:43	4	DeleteLocalRef
arg	191:31	191:34	5	env
water	191:31	0:0	6	env
arg	191:36	191:43	5	bytebuf
water	191:36	0:0	6	bytebuf
water	191:44	0:0	4	;
water	192:4	0:0	4	}
water	196:4	0:0	2	p_sys
op	196:9	0:0	2	->
water	196:11	0:0	2	direct_rendering
op	196:28	0:0	2	=
call	196:30	196:63	2	jni_IsVideoPlayerActivityCreated
op	196:65	0:0	2	&&
call	196:68	196:106	2	var_InheritBool
arg	196:84	196:89	3	p_dec
water	196:84	0:0	4	p_dec
arg	196:91	196:106	3	CFG_PREFIX"dr"
water	196:91	0:0	4	CFG_PREFIX
water	196:102	0:0	4	"dr"
water	196:107	0:0	2	;
if	197:4	214:4	2	(p_sys -> direct_rendering)
cond	197:8	197:15	3	p_sys -> direct_rendering
water	197:8	0:0	4	p_sys
op	197:13	0:0	4	->
water	197:15	0:0	4	direct_rendering
stmts	197:33	214:4	3	
water	197:33	0:0	4	{
decl	198:8	198:57	4	jobject	surf
op	198:21	0:0	4	=
call	198:23	198:56	5	jni_LockAndGetAndroidJavaSurface
if	199:8	209:8	4	(surf)
cond	199:12	199:12	5	surf
water	199:12	0:0	6	surf
stmts	199:18	209:8	5	
water	199:18	0:0	6	{
water	201:12	0:0	6	(
op	201:13	0:0	6	*
water	201:14	0:0	6	env
water	201:17	0:0	6	)
op	201:18	0:0	6	->
call	201:20	201:93	6	CallVoidMethod
arg	201:35	201:38	7	env
water	201:35	0:0	8	env
arg	201:40	201:52	7	p_sys->codec
water	201:40	0:0	8	p_sys
op	201:45	0:0	8	->
water	201:47	0:0	8	codec
arg	201:54	201:70	7	p_sys->configure
water	201:54	0:0	8	p_sys
op	201:59	0:0	8	->
water	201:61	0:0	8	configure
arg	201:72	201:78	7	format
water	201:72	0:0	8	format
arg	201:80	201:84	7	surf
water	201:80	0:0	8	surf
arg	201:86	201:90	7	NULL
water	201:86	0:0	8	NULL
arg	201:92	201:93	7	0
water	201:92	0:0	8	0
water	201:94	0:0	6	;
if	202:12	207:12	6	(( * env ) ->ExceptionOccurred (env ))
cond	202:16	202:45	7	( * env ) ->ExceptionOccurred (env )
water	202:16	0:0	8	(
op	202:17	0:0	8	*
water	202:18	0:0	8	env
water	202:21	0:0	8	)
op	202:22	0:0	8	->
call	202:24	202:45	8	ExceptionOccurred
arg	202:42	202:45	9	env
water	202:42	0:0	10	env
stmts	202:48	207:12	7	
water	202:48	0:0	8	{
call	203:16	203:100	8	msg_Warn
arg	203:25	203:30	9	p_dec
water	203:25	0:0	10	p_dec
arg	203:32	203:100	9	"Exception occurred in MediaCodec.configure with an output surface."
water	203:32	0:0	10	"Exception occurred in MediaCodec.configure with an output surface."
water	203:101	0:0	8	;
water	204:16	0:0	8	(
op	204:17	0:0	8	*
water	204:18	0:0	8	env
water	204:21	0:0	8	)
op	204:22	0:0	8	->
call	204:24	204:42	8	ExceptionClear
arg	204:39	204:42	9	env
water	204:39	0:0	10	env
water	204:43	0:0	8	;
call	205:16	205:41	8	jni_UnlockAndroidSurface
water	205:42	0:0	8	;
goto	206:16	206:26	8	error
water	206:21	0:0	9	error
water	207:12	0:0	8	}
water	208:12	0:0	6	p_dec
op	208:17	0:0	6	->
water	208:19	0:0	6	fmt_out
op	208:26	0:0	6	.
water	208:27	0:0	6	i_codec
op	208:35	0:0	6	=
water	208:37	0:0	6	VLC_CODEC_ANDROID_OPAQUE
water	208:61	0:0	6	;
water	209:8	0:0	6	}
else	209:10	212:8	4
stmts	209:15	212:8	5	
water	209:15	0:0	6	{
call	210:12	210:92	6	msg_Warn
arg	210:21	210:26	7	p_dec
water	210:21	0:0	8	p_dec
arg	210:28	210:92	7	"Failed to get the Android Surface, disabling direct rendering."
water	210:28	0:0	8	"Failed to get the Android Surface, disabling direct rendering."
water	210:93	0:0	6	;
water	211:12	0:0	6	p_sys
op	211:17	0:0	6	->
water	211:19	0:0	6	direct_rendering
op	211:36	0:0	6	=
water	211:38	0:0	6	false
water	211:43	0:0	6	;
water	212:8	0:0	6	}
call	213:8	213:33	4	jni_UnlockAndroidSurface
water	213:34	0:0	4	;
water	214:4	0:0	4	}
if	215:4	222:4	2	(! p_sys -> direct_rendering)
cond	215:8	215:16	3	! p_sys -> direct_rendering
op	215:8	0:0	4	!
water	215:9	0:0	4	p_sys
op	215:14	0:0	4	->
water	215:16	0:0	4	direct_rendering
stmts	215:34	222:4	3	
water	215:34	0:0	4	{
water	216:8	0:0	4	(
op	216:9	0:0	4	*
water	216:10	0:0	4	env
water	216:13	0:0	4	)
op	216:14	0:0	4	->
call	216:16	216:89	4	CallVoidMethod
arg	216:31	216:34	5	env
water	216:31	0:0	6	env
arg	216:36	216:48	5	p_sys->codec
water	216:36	0:0	6	p_sys
op	216:41	0:0	6	->
water	216:43	0:0	6	codec
arg	216:50	216:66	5	p_sys->configure
water	216:50	0:0	6	p_sys
op	216:55	0:0	6	->
water	216:57	0:0	6	configure
arg	216:68	216:74	5	format
water	216:68	0:0	6	format
arg	216:76	216:80	5	NULL
water	216:76	0:0	6	NULL
arg	216:82	216:86	5	NULL
water	216:82	0:0	6	NULL
arg	216:88	216:89	5	0
water	216:88	0:0	6	0
water	216:90	0:0	4	;
if	217:8	221:8	4	(( * env ) ->ExceptionOccurred (env ))
cond	217:12	217:41	5	( * env ) ->ExceptionOccurred (env )
water	217:12	0:0	6	(
op	217:13	0:0	6	*
water	217:14	0:0	6	env
water	217:17	0:0	6	)
op	217:18	0:0	6	->
call	217:20	217:41	6	ExceptionOccurred
arg	217:38	217:41	7	env
water	217:38	0:0	8	env
stmts	217:44	221:8	5	
water	217:44	0:0	6	{
call	218:12	218:72	6	msg_Warn
arg	218:21	218:26	7	p_dec
water	218:21	0:0	8	p_dec
arg	218:28	218:72	7	"Exception occurred in MediaCodec.configure"
water	218:28	0:0	8	"Exception occurred in MediaCodec.configure"
water	218:73	0:0	6	;
water	219:12	0:0	6	(
op	219:13	0:0	6	*
water	219:14	0:0	6	env
water	219:17	0:0	6	)
op	219:18	0:0	6	->
call	219:20	219:38	6	ExceptionClear
arg	219:35	219:38	7	env
water	219:35	0:0	8	env
water	219:39	0:0	6	;
goto	220:12	220:22	6	error
water	220:17	0:0	7	error
water	221:8	0:0	6	}
water	222:4	0:0	4	}
water	223:4	0:0	2	(
op	223:5	0:0	2	*
water	223:6	0:0	2	env
water	223:9	0:0	2	)
op	223:10	0:0	2	->
call	223:12	223:58	2	CallVoidMethod
arg	223:27	223:30	3	env
water	223:27	0:0	4	env
arg	223:32	223:44	3	p_sys->codec
water	223:32	0:0	4	p_sys
op	223:37	0:0	4	->
water	223:39	0:0	4	codec
arg	223:46	223:58	3	p_sys->start
water	223:46	0:0	4	p_sys
op	223:51	0:0	4	->
water	223:53	0:0	4	start
water	223:59	0:0	2	;
if	224:4	228:4	2	(( * env ) ->ExceptionOccurred (env ))
cond	224:8	224:37	3	( * env ) ->ExceptionOccurred (env )
water	224:8	0:0	4	(
op	224:9	0:0	4	*
water	224:10	0:0	4	env
water	224:13	0:0	4	)
op	224:14	0:0	4	->
call	224:16	224:37	4	ExceptionOccurred
arg	224:34	224:37	5	env
water	224:34	0:0	6	env
stmts	224:40	228:4	3	
water	224:40	0:0	4	{
call	225:8	225:64	4	msg_Warn
arg	225:17	225:22	5	p_dec
water	225:17	0:0	6	p_dec
arg	225:24	225:64	5	"Exception occurred in MediaCodec.start"
water	225:24	0:0	6	"Exception occurred in MediaCodec.start"
water	225:65	0:0	4	;
water	226:8	0:0	4	(
op	226:9	0:0	4	*
water	226:10	0:0	4	env
water	226:13	0:0	4	)
op	226:14	0:0	4	->
call	226:16	226:34	4	ExceptionClear
arg	226:31	226:34	5	env
water	226:31	0:0	6	env
water	226:35	0:0	4	;
goto	227:8	227:18	4	error
water	227:13	0:0	5	error
water	228:4	0:0	4	}
water	229:4	0:0	2	p_sys
op	229:9	0:0	2	->
water	229:11	0:0	2	started
op	229:19	0:0	2	=
water	229:21	0:0	2	true
water	229:25	0:0	2	;
water	230:4	0:0	2	p_sys
op	230:9	0:0	2	->
water	230:11	0:0	2	input_buffers
op	230:25	0:0	2	=
water	230:27	0:0	2	(
op	230:28	0:0	2	*
water	230:29	0:0	2	env
water	230:32	0:0	2	)
op	230:33	0:0	2	->
call	230:35	230:95	2	CallObjectMethod
arg	230:52	230:55	3	env
water	230:52	0:0	4	env
arg	230:57	230:69	3	p_sys->codec
water	230:57	0:0	4	p_sys
op	230:62	0:0	4	->
water	230:64	0:0	4	codec
arg	230:71	230:95	3	p_sys->get_input_buffers
water	230:71	0:0	4	p_sys
op	230:76	0:0	4	->
water	230:78	0:0	4	get_input_buffers
water	230:96	0:0	2	;
water	231:4	0:0	2	p_sys
op	231:9	0:0	2	->
water	231:11	0:0	2	output_buffers
op	231:26	0:0	2	=
water	231:28	0:0	2	(
op	231:29	0:0	2	*
water	231:30	0:0	2	env
water	231:33	0:0	2	)
op	231:34	0:0	2	->
call	231:36	231:97	2	CallObjectMethod
arg	231:53	231:56	3	env
water	231:53	0:0	4	env
arg	231:58	231:70	3	p_sys->codec
water	231:58	0:0	4	p_sys
op	231:63	0:0	4	->
water	231:65	0:0	4	codec
arg	231:72	231:97	3	p_sys->get_output_buffers
water	231:72	0:0	4	p_sys
op	231:77	0:0	4	->
water	231:79	0:0	4	get_output_buffers
water	231:98	0:0	2	;
water	232:4	0:0	2	p_sys
op	232:9	0:0	2	->
water	232:11	0:0	2	buffer_info
op	232:23	0:0	2	=
water	232:25	0:0	2	(
op	232:26	0:0	2	*
water	232:27	0:0	2	env
water	232:30	0:0	2	)
op	232:31	0:0	2	->
call	232:33	232:97	2	NewObject
arg	232:43	232:46	3	env
water	232:43	0:0	4	env
arg	232:48	232:72	3	p_sys->buffer_info_class
water	232:48	0:0	4	p_sys
op	232:53	0:0	4	->
water	232:55	0:0	4	buffer_info_class
arg	232:74	232:97	3	p_sys->buffer_info_ctor
water	232:74	0:0	4	p_sys
op	232:79	0:0	4	->
water	232:81	0:0	4	buffer_info_ctor
water	232:98	0:0	2	;
water	233:4	0:0	2	p_sys
op	233:9	0:0	2	->
water	233:11	0:0	2	input_buffers
op	233:25	0:0	2	=
water	233:27	0:0	2	(
op	233:28	0:0	2	*
water	233:29	0:0	2	env
water	233:32	0:0	2	)
op	233:33	0:0	2	->
call	233:35	233:73	2	NewGlobalRef
arg	233:48	233:51	3	env
water	233:48	0:0	4	env
arg	233:53	233:73	3	p_sys->input_buffers
water	233:53	0:0	4	p_sys
op	233:58	0:0	4	->
water	233:60	0:0	4	input_buffers
water	233:74	0:0	2	;
water	234:4	0:0	2	p_sys
op	234:9	0:0	2	->
water	234:11	0:0	2	output_buffers
op	234:26	0:0	2	=
water	234:28	0:0	2	(
op	234:29	0:0	2	*
water	234:30	0:0	2	env
water	234:33	0:0	2	)
op	234:34	0:0	2	->
call	234:36	234:75	2	NewGlobalRef
arg	234:49	234:52	3	env
water	234:49	0:0	4	env
arg	234:54	234:75	3	p_sys->output_buffers
water	234:54	0:0	4	p_sys
op	234:59	0:0	4	->
water	234:61	0:0	4	output_buffers
water	234:76	0:0	2	;
water	235:4	0:0	2	p_sys
op	235:9	0:0	2	->
water	235:11	0:0	2	buffer_info
op	235:23	0:0	2	=
water	235:25	0:0	2	(
op	235:26	0:0	2	*
water	235:27	0:0	2	env
water	235:30	0:0	2	)
op	235:31	0:0	2	->
call	235:33	235:69	2	NewGlobalRef
arg	235:46	235:49	3	env
water	235:46	0:0	4	env
arg	235:51	235:69	3	p_sys->buffer_info
water	235:51	0:0	4	p_sys
op	235:56	0:0	4	->
water	235:58	0:0	4	buffer_info
water	235:70	0:0	2	;
water	236:4	0:0	2	p_sys
op	236:9	0:0	2	->
water	236:11	0:0	2	i_output_buffers
op	236:28	0:0	2	=
water	236:30	0:0	2	(
op	236:31	0:0	2	*
water	236:32	0:0	2	env
water	236:35	0:0	2	)
op	236:36	0:0	2	->
call	236:38	236:79	2	GetArrayLength
arg	236:53	236:56	3	env
water	236:53	0:0	4	env
arg	236:58	236:79	3	p_sys->output_buffers
water	236:58	0:0	4	p_sys
op	236:63	0:0	4	->
water	236:65	0:0	4	output_buffers
water	236:80	0:0	2	;
water	237:4	0:0	2	p_sys
op	237:9	0:0	2	->
water	237:11	0:0	2	inflight_picture
op	237:28	0:0	2	=
call	237:30	237:84	2	calloc
arg	237:37	237:38	3	1
water	237:37	0:0	4	1
arg	237:40	237:84	3	sizeof(picture_t*)*p_sys->i_output_buffers
op	237:40	0:0	4	sizeof
water	237:46	0:0	4	(
water	237:47	0:0	4	picture_t
op	237:56	0:0	4	*
water	237:57	0:0	4	)
op	237:59	0:0	4	*
water	237:61	0:0	4	p_sys
op	237:66	0:0	4	->
water	237:68	0:0	4	i_output_buffers
water	237:85	0:0	2	;
if	238:4	239:18	2	(! p_sys -> inflight_picture)
cond	238:8	238:16	3	! p_sys -> inflight_picture
op	238:8	0:0	4	!
water	238:9	0:0	4	p_sys
op	238:14	0:0	4	->
water	238:16	0:0	4	inflight_picture
stmts	239:8	239:18	3	
goto	239:8	239:18	4	error
water	239:13	0:0	5	error
water	240:4	0:0	2	(
op	240:5	0:0	2	*
water	240:6	0:0	2	env
water	240:9	0:0	2	)
op	240:10	0:0	2	->
call	240:12	240:38	2	DeleteLocalRef
arg	240:27	240:30	3	env
water	240:27	0:0	4	env
arg	240:32	240:38	3	format
water	240:32	0:0	4	format
water	240:39	0:0	2	;
call	241:4	241:22	2	jni_detach_thread
water	241:23	0:0	2	;
decl	242:4	242:38	2	const int	timestamp_fifo_size
op	242:34	0:0	2	=
water	242:36	0:0	2	32
water	243:4	0:0	2	p_sys
op	243:9	0:0	2	->
water	243:11	0:0	2	timestamp_fifo
op	243:26	0:0	2	=
call	243:28	243:65	2	timestamp_FifoNew
arg	243:46	243:65	3	timestamp_fifo_size
water	243:46	0:0	4	timestamp_fifo_size
water	243:66	0:0	2	;
if	244:4	245:18	2	(! p_sys -> timestamp_fifo)
cond	244:8	244:16	3	! p_sys -> timestamp_fifo
op	244:8	0:0	4	!
water	244:9	0:0	4	p_sys
op	244:14	0:0	4	->
water	244:16	0:0	4	timestamp_fifo
stmts	245:8	245:18	3	
goto	245:8	245:18	4	error
water	245:13	0:0	5	error
return	246:4	246:22	2	VLC_SUCCESS
water	246:11	0:0	3	VLC_SUCCESS
label	247:1	247:6	2	error :
call	248:4	248:22	2	jni_detach_thread
water	248:23	0:0	2	;
call	249:4	249:23	2	CloseDecoder
arg	249:17	249:23	3	p_this
water	249:17	0:0	4	p_this
water	249:24	0:0	2	;
return	250:4	250:23	2	VLC_EGENERIC
water	250:11	0:0	3	VLC_EGENERIC
