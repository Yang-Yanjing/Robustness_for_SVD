func	1:0	512:0	0	static int	Demux
params	1:16	0:0	1	
param	1:18	1:35	2	demux_t *	p_demux
stmnts	0:0	511:12	1	
decl	3:4	3:39	2	demux_sys_t	*p_sys
op	3:23	0:0	2	=
water	3:25	0:0	2	p_demux
op	3:32	0:0	2	->
water	3:34	0:0	2	p_sys
decl	4:4	4:33	2	char	*psz_parse
op	4:27	0:0	2	=
water	4:29	0:0	2	NULL
decl	5:4	5:34	2	char	*psz_backup
op	5:28	0:0	2	=
water	5:30	0:0	2	NULL
decl	6:4	6:25	2	bool	b_entry
op	6:18	0:0	2	=
water	6:20	0:0	2	false
decl	7:4	7:59	2	input_item_t	*p_current_input
op	7:34	0:0	2	=
call	7:36	7:58	3	GetCurrentItem
arg	7:51	7:58	4	p_demux
water	7:51	0:0	5	p_demux
if	9:4	27:4	2	(p_sys -> i_data_len < 0)
cond	9:8	9:28	3	p_sys -> i_data_len < 0
water	9:8	0:0	4	p_sys
op	9:13	0:0	4	->
water	9:15	0:0	4	i_data_len
op	9:26	0:0	4	<
water	9:28	0:0	4	0
stmts	10:4	27:4	3	
water	10:4	0:0	4	{
decl	11:8	11:25	4	int64_t	i_pos
op	11:22	0:0	4	=
water	11:24	0:0	4	0
water	12:8	0:0	4	p_sys
op	12:13	0:0	4	->
water	12:15	0:0	4	i_data_len
op	12:26	0:0	4	=
call	12:28	12:52	4	stream_Size
arg	12:41	12:52	5	p_demux->s
water	12:41	0:0	6	p_demux
op	12:48	0:0	6	->
water	12:50	0:0	6	s
op	12:54	0:0	4	+
water	12:56	0:0	4	1
water	12:57	0:0	4	;
if	13:8	13:90	4	(p_sys -> i_data_len <= 0 || p_sys -> i_data_len > 16384)
cond	13:12	13:58	5	p_sys -> i_data_len <= 0 || p_sys -> i_data_len > 16384
water	13:12	0:0	6	p_sys
op	13:17	0:0	6	->
water	13:19	0:0	6	i_data_len
op	13:30	0:0	6	<=
water	13:33	0:0	6	0
op	13:35	0:0	6	||
water	13:38	0:0	6	p_sys
op	13:43	0:0	6	->
water	13:45	0:0	6	i_data_len
op	13:56	0:0	6	>
water	13:58	0:0	6	16384
stmts	13:66	13:90	5	
water	13:66	0:0	6	p_sys
op	13:71	0:0	6	->
water	13:73	0:0	6	i_data_len
op	13:84	0:0	6	=
water	13:86	0:0	6	1024
water	13:90	0:0	6	;
water	14:8	0:0	4	p_sys
op	14:13	0:0	4	->
water	14:15	0:0	4	psz_data
op	14:24	0:0	4	=
call	14:26	14:55	4	xmalloc
arg	14:35	14:55	5	p_sys->i_data_len+1
water	14:35	0:0	6	p_sys
op	14:40	0:0	6	->
water	14:42	0:0	6	i_data_len
op	14:53	0:0	6	+
water	14:54	0:0	6	1
water	14:56	0:0	4	;
for	16:8	25:8	4	(;;)
forinit	16:13	16:13	5	;
water	16:13	0:0	6	;
cond	0:0	0:0	5	
forexpr	0:0	0:0	5	
stmts	17:8	25:8	5	
water	17:8	0:0	6	{
decl	18:12	18:102	6	int	i_read
op	18:23	0:0	6	=
call	18:25	18:101	7	stream_Read
arg	18:38	18:48	8	p_demux->s
water	18:38	0:0	9	p_demux
op	18:45	0:0	9	->
water	18:47	0:0	9	s
arg	18:50	18:73	8	&p_sys->psz_data[i_pos]
op	18:50	0:0	9	&
water	18:51	0:0	9	p_sys
op	18:56	0:0	9	->
water	18:58	0:0	9	psz_data
op	18:66	0:0	9	[
water	18:67	0:0	9	i_pos
op	18:72	0:0	9	]
arg	18:75	18:101	8	p_sys->i_data_len-i_pos
water	18:75	0:0	9	p_sys
op	18:80	0:0	9	->
water	18:82	0:0	9	i_data_len
op	18:93	0:0	9	-
water	18:95	0:0	9	i_pos
water	19:12	0:0	6	p_sys
op	19:17	0:0	6	->
water	19:19	0:0	6	psz_data
op	19:27	0:0	6	[
water	19:28	0:0	6	i_pos
op	19:34	0:0	6	+
water	19:36	0:0	6	i_read
op	19:42	0:0	6	]
op	19:44	0:0	6	=
water	19:46	0:0	6	'\0'
water	19:50	0:0	6	;
if	20:12	20:58	6	(i_read < p_sys -> i_data_len - i_pos)
cond	20:16	20:45	7	i_read < p_sys -> i_data_len - i_pos
water	20:16	0:0	8	i_read
op	20:23	0:0	8	<
water	20:25	0:0	8	p_sys
op	20:30	0:0	8	->
water	20:32	0:0	8	i_data_len
op	20:43	0:0	8	-
water	20:45	0:0	8	i_pos
stmts	20:53	20:58	7	
break	20:53	20:58	8	
water	21:12	0:0	6	i_pos
op	21:18	0:0	6	+=
water	21:21	0:0	6	i_read
water	21:27	0:0	6	;
water	22:12	0:0	6	p_sys
op	22:17	0:0	6	->
water	22:19	0:0	6	i_data_len
op	22:30	0:0	6	<<=
water	22:34	0:0	6	1
water	22:36	0:0	6	;
water	23:12	0:0	6	p_sys
op	23:17	0:0	6	->
water	23:19	0:0	6	psz_data
op	23:28	0:0	6	=
call	23:30	24:76	6	xrealloc
arg	23:40	23:55	7	p_sys->psz_data
water	23:40	0:0	8	p_sys
op	23:45	0:0	8	->
water	23:47	0:0	8	psz_data
arg	24:35	24:76	7	p_sys->i_data_len*sizeof(char*)+1
water	24:35	0:0	8	p_sys
op	24:40	0:0	8	->
water	24:42	0:0	8	i_data_len
op	24:53	0:0	8	*
op	24:55	0:0	8	sizeof
water	24:61	0:0	8	(
water	24:63	0:0	8	char
op	24:68	0:0	8	*
water	24:70	0:0	8	)
op	24:72	0:0	8	+
water	24:74	0:0	8	1
water	24:77	0:0	6	;
water	25:8	0:0	6	}
if	26:8	26:46	4	(p_sys -> i_data_len <= 0)
cond	26:12	26:33	5	p_sys -> i_data_len <= 0
water	26:12	0:0	6	p_sys
op	26:17	0:0	6	->
water	26:19	0:0	6	i_data_len
op	26:30	0:0	6	<=
water	26:33	0:0	6	0
stmts	26:37	26:46	5	
return	26:37	26:46	6	-1
op	26:44	0:0	7	-
water	26:45	0:0	7	1
water	27:4	0:0	4	}
decl	28:4	28:77	2	input_item_node_t	*p_subitems
op	28:34	0:0	2	=
call	28:36	28:76	3	input_item_node_Create
arg	28:60	28:76	4	p_current_input
water	28:60	0:0	5	p_current_input
water	29:4	0:0	2	psz_parse
op	29:14	0:0	2	=
water	29:16	0:0	2	p_sys
op	29:21	0:0	2	->
water	29:23	0:0	2	psz_data
water	29:31	0:0	2	;
if	31:4	508:4	2	(( psz_parse =strcasestr (psz_parse ,"<ASX" ) ))
cond	31:8	31:54	3	( psz_parse =strcasestr (psz_parse ,"<ASX" ) )
water	31:8	0:0	4	(
water	31:10	0:0	4	psz_parse
op	31:20	0:0	4	=
call	31:22	31:52	4	strcasestr
arg	31:34	31:43	5	psz_parse
water	31:34	0:0	6	psz_parse
arg	31:45	31:52	5	"<ASX"
water	31:45	0:0	6	"<ASX"
water	31:54	0:0	4	)
stmts	32:4	508:4	3	
water	32:4	0:0	4	{
decl	34:8	34:31	4	char	*psz_string
op	34:25	0:0	4	=
water	34:27	0:0	4	NULL
decl	35:8	35:24	4	int	i_strlen
op	35:21	0:0	4	=
water	35:23	0:0	4	0
decl	36:8	36:33	4	char	*psz_base_asx
op	36:27	0:0	4	=
water	36:29	0:0	4	NULL
decl	37:8	37:34	4	char	*psz_title_asx
op	37:28	0:0	4	=
water	37:30	0:0	4	NULL
decl	38:8	38:35	4	char	*psz_artist_asx
op	38:29	0:0	4	=
water	38:31	0:0	4	NULL
decl	39:8	39:38	4	char	*psz_copyright_asx
op	39:32	0:0	4	=
water	39:34	0:0	4	NULL
decl	40:8	40:37	4	char	*psz_moreinfo_asx
op	40:31	0:0	4	=
water	40:33	0:0	4	NULL
decl	41:8	41:37	4	char	*psz_abstract_asx
op	41:31	0:0	4	=
water	41:33	0:0	4	NULL
decl	42:8	42:35	4	char	*psz_base_entry
op	42:29	0:0	4	=
water	42:31	0:0	4	NULL
decl	43:8	43:36	4	char	*psz_title_entry
op	43:30	0:0	4	=
water	43:32	0:0	4	NULL
decl	44:8	44:37	4	char	*psz_artist_entry
op	44:31	0:0	4	=
water	44:33	0:0	4	NULL
decl	45:8	45:40	4	char	*psz_copyright_entry
op	45:34	0:0	4	=
water	45:36	0:0	4	NULL
decl	46:8	46:39	4	char	*psz_moreinfo_entry
op	46:33	0:0	4	=
water	46:35	0:0	4	NULL
decl	47:8	47:39	4	char	*psz_abstract_entry
op	47:33	0:0	4	=
water	47:35	0:0	4	NULL
decl	48:8	48:29	4	int	i_entry_count
op	48:26	0:0	4	=
water	48:28	0:0	4	0
decl	49:8	49:33	4	bool	b_skip_entry
op	49:26	0:0	4	=
water	49:28	0:0	4	false
decl	50:8	50:29	4	char	*psz_href
op	50:23	0:0	4	=
water	50:25	0:0	4	NULL
decl	51:8	51:27	4	int	i_starttime
op	51:24	0:0	4	=
water	51:26	0:0	4	0
decl	52:8	52:26	4	int	i_duration
op	52:23	0:0	4	=
water	52:25	0:0	4	0
water	53:8	0:0	4	psz_parse
op	53:18	0:0	4	=
call	53:20	53:47	4	strcasestr
arg	53:32	53:41	5	psz_parse
water	53:32	0:0	6	psz_parse
arg	53:43	53:47	5	">"
water	53:43	0:0	6	">"
water	53:48	0:0	4	;
decl	55:8	55:49	4	input_item_t	*uniq_entry_ad_backup
op	55:43	0:0	4	=
water	55:45	0:0	4	NULL
decl	56:8	56:34	4	int	i_inserted_entries
op	56:31	0:0	4	=
water	56:33	0:0	4	0
while	57:8	492:8	4	(psz_parse && ( psz_parse =strcasestr (psz_parse ,"<" ) ))
cond	57:15	57:71	5	psz_parse && ( psz_parse =strcasestr (psz_parse ,"<" ) )
water	57:15	0:0	6	psz_parse
op	57:25	0:0	6	&&
water	57:28	0:0	6	(
water	57:30	0:0	6	psz_parse
op	57:40	0:0	6	=
call	57:42	57:69	6	strcasestr
arg	57:54	57:63	7	psz_parse
water	57:54	0:0	8	psz_parse
arg	57:65	57:69	7	"<"
water	57:65	0:0	8	"<"
water	57:71	0:0	6	)
stmts	58:8	492:8	5	
water	58:8	0:0	6	{
if	59:12	65:12	6	(!strncasecmp (psz_parse ,"<!--" ,4 ))
cond	59:16	59:51	7	!strncasecmp (psz_parse ,"<!--" ,4 )
op	59:16	0:0	8	!
call	59:17	59:51	8	strncasecmp
arg	59:30	59:39	9	psz_parse
water	59:30	0:0	10	psz_parse
arg	59:41	59:47	9	"<!--"
water	59:41	0:0	10	"<!--"
arg	59:49	59:51	9	4
water	59:49	0:0	10	4
stmts	60:12	65:12	7	
water	60:12	0:0	8	{
if	62:16	63:32	8	(( psz_parse =strcasestr (psz_parse ,"-->" ) ))
cond	62:20	62:65	9	( psz_parse =strcasestr (psz_parse ,"-->" ) )
water	62:20	0:0	10	(
water	62:22	0:0	10	psz_parse
op	62:32	0:0	10	=
call	62:34	62:63	10	strcasestr
arg	62:46	62:55	11	psz_parse
water	62:46	0:0	12	psz_parse
arg	62:57	62:63	11	"-->"
water	62:57	0:0	12	"-->"
water	62:65	0:0	10	)
stmts	63:20	63:32	9	
water	63:20	0:0	10	psz_parse
op	63:29	0:0	10	+=
water	63:31	0:0	10	3
water	63:32	0:0	10	;
else	64:16	64:29	8
stmts	64:21	64:29	9	
continue	64:21	64:29	10	
water	65:12	0:0	8	}
else	66:12	116:12	6
stmts	66:17	116:12	7	
if	66:17	116:12	8	(!strncasecmp (psz_parse ,"<PARAM " ,7 ))
cond	66:21	66:59	9	!strncasecmp (psz_parse ,"<PARAM " ,7 )
op	66:21	0:0	10	!
call	66:22	66:59	10	strncasecmp
arg	66:35	66:44	11	psz_parse
water	66:35	0:0	12	psz_parse
arg	66:46	66:55	11	"<PARAM "
water	66:46	0:0	12	"<PARAM "
arg	66:57	66:59	11	7
water	66:57	0:0	12	7
stmts	67:12	116:12	9	
water	67:12	0:0	10	{
decl	68:16	68:44	10	bool	b_encoding_flag
op	68:37	0:0	10	=
water	68:39	0:0	10	false
water	69:16	0:0	10	psz_parse
op	69:26	0:0	10	=
call	69:28	69:64	10	SkipBlanks
arg	69:39	69:50	11	psz_parse+7
water	69:39	0:0	12	psz_parse
op	69:48	0:0	12	+
water	69:49	0:0	12	7
arg	69:52	69:64	11	(unsigned)-1
water	69:52	0:0	12	(
water	69:53	0:0	12	unsigned
water	69:61	0:0	12	)
op	69:62	0:0	12	-
water	69:63	0:0	12	1
water	69:65	0:0	10	;
if	70:16	90:16	10	(!strncasecmp (psz_parse ,"name" ,4 ))
cond	70:20	70:55	11	!strncasecmp (psz_parse ,"name" ,4 )
op	70:20	0:0	12	!
call	70:21	70:55	12	strncasecmp
arg	70:34	70:43	13	psz_parse
water	70:34	0:0	14	psz_parse
arg	70:45	70:51	13	"name"
water	70:45	0:0	14	"name"
arg	70:53	70:55	13	4
water	70:53	0:0	14	4
stmts	71:16	90:16	11	
water	71:16	0:0	12	{
if	72:20	88:20	12	(( psz_parse =strcasestr (psz_parse ,"\"" ) ))
cond	72:24	72:68	13	( psz_parse =strcasestr (psz_parse ,"\"" ) )
water	72:24	0:0	14	(
water	72:26	0:0	14	psz_parse
op	72:36	0:0	14	=
call	72:38	72:66	14	strcasestr
arg	72:50	72:59	15	psz_parse
water	72:50	0:0	16	psz_parse
arg	72:61	72:66	15	"\""
water	72:61	0:0	16	"\""
water	72:68	0:0	14	)
stmts	73:20	88:20	13	
water	73:20	0:0	14	{
water	74:24	0:0	14	psz_backup
op	74:35	0:0	14	=
op	74:37	0:0	14	++
water	74:39	0:0	14	psz_parse
water	74:48	0:0	14	;
if	75:24	86:24	14	(( psz_parse =strcasestr (psz_parse ,"\"" ) ))
cond	75:28	75:72	15	( psz_parse =strcasestr (psz_parse ,"\"" ) )
water	75:28	0:0	16	(
water	75:30	0:0	16	psz_parse
op	75:40	0:0	16	=
call	75:42	75:70	16	strcasestr
arg	75:54	75:63	17	psz_parse
water	75:54	0:0	18	psz_parse
arg	75:65	75:70	17	"\""
water	75:65	0:0	18	"\""
water	75:72	0:0	16	)
stmts	76:24	86:24	15	
water	76:24	0:0	16	{
water	77:28	0:0	16	i_strlen
op	77:37	0:0	16	=
water	77:39	0:0	16	psz_parse
op	77:48	0:0	16	-
water	77:49	0:0	16	psz_backup
water	77:59	0:0	16	;
if	78:28	78:55	16	(i_strlen < 1)
cond	78:32	78:43	17	i_strlen < 1
water	78:32	0:0	18	i_strlen
op	78:41	0:0	18	<
water	78:43	0:0	18	1
stmts	78:47	78:55	17	
continue	78:47	78:55	18	
call	79:28	79:79	16	msg_Dbg
arg	79:37	79:44	17	p_demux
water	79:37	0:0	18	p_demux
arg	79:46	79:69	17	"param name strlen: %d"
water	79:46	0:0	18	"param name strlen: %d"
arg	79:71	79:79	17	i_strlen
water	79:71	0:0	18	i_strlen
water	79:80	0:0	16	;
water	80:28	0:0	16	psz_string
op	80:39	0:0	16	=
call	80:41	80:62	16	xmalloc
arg	80:50	80:62	17	i_strlen+1
water	80:50	0:0	18	i_strlen
op	80:59	0:0	18	+
water	80:61	0:0	18	1
water	80:63	0:0	16	;
call	81:28	81:69	16	memcpy
arg	81:36	81:46	17	psz_string
water	81:36	0:0	18	psz_string
arg	81:48	81:58	17	psz_backup
water	81:48	0:0	18	psz_backup
arg	81:60	81:69	17	i_strlen
water	81:60	0:0	18	i_strlen
water	81:70	0:0	16	;
water	82:28	0:0	16	psz_string
op	82:38	0:0	16	[
water	82:39	0:0	16	i_strlen
op	82:47	0:0	16	]
op	82:49	0:0	16	=
water	82:51	0:0	16	'\0'
water	82:55	0:0	16	;
call	83:28	83:74	16	msg_Dbg
arg	83:37	83:44	17	p_demux
water	83:37	0:0	18	p_demux
arg	83:46	83:62	17	"param name: %s"
water	83:46	0:0	18	"param name: %s"
arg	83:64	83:74	17	psz_string
water	83:64	0:0	18	psz_string
water	83:75	0:0	16	;
water	84:28	0:0	16	b_encoding_flag
op	84:44	0:0	16	=
op	84:46	0:0	16	!
call	84:47	84:82	16	strcasecmp
arg	84:59	84:69	17	psz_string
water	84:59	0:0	18	psz_string
arg	84:71	84:82	17	"encoding"
water	84:71	0:0	18	"encoding"
water	84:83	0:0	16	;
call	85:28	85:45	16	free
arg	85:34	85:45	17	psz_string
water	85:34	0:0	18	psz_string
water	85:46	0:0	16	;
water	86:24	0:0	16	}
else	87:24	87:37	14
stmts	87:29	87:37	15	
continue	87:29	87:37	16	
water	88:20	0:0	14	}
else	89:20	89:33	12
stmts	89:25	89:33	13	
continue	89:25	89:33	14	
water	90:16	0:0	12	}
water	91:16	0:0	10	psz_parse
op	91:25	0:0	10	++
water	91:27	0:0	10	;
if	92:16	112:16	10	(!strncasecmp (psz_parse ,"value" ,5 ))
cond	92:20	92:56	11	!strncasecmp (psz_parse ,"value" ,5 )
op	92:20	0:0	12	!
call	92:21	92:56	12	strncasecmp
arg	92:34	92:43	13	psz_parse
water	92:34	0:0	14	psz_parse
arg	92:45	92:52	13	"value"
water	92:45	0:0	14	"value"
arg	92:54	92:56	13	5
water	92:54	0:0	14	5
stmts	93:16	112:16	11	
water	93:16	0:0	12	{
if	94:20	110:20	12	(( psz_parse =strcasestr (psz_parse ,"\"" ) ))
cond	94:24	94:68	13	( psz_parse =strcasestr (psz_parse ,"\"" ) )
water	94:24	0:0	14	(
water	94:26	0:0	14	psz_parse
op	94:36	0:0	14	=
call	94:38	94:66	14	strcasestr
arg	94:50	94:59	15	psz_parse
water	94:50	0:0	16	psz_parse
arg	94:61	94:66	15	"\""
water	94:61	0:0	16	"\""
water	94:68	0:0	14	)
stmts	95:20	110:20	13	
water	95:20	0:0	14	{
water	96:24	0:0	14	psz_backup
op	96:35	0:0	14	=
op	96:37	0:0	14	++
water	96:39	0:0	14	psz_parse
water	96:48	0:0	14	;
if	97:24	108:24	14	(( psz_parse =strcasestr (psz_parse ,"\"" ) ))
cond	97:28	97:72	15	( psz_parse =strcasestr (psz_parse ,"\"" ) )
water	97:28	0:0	16	(
water	97:30	0:0	16	psz_parse
op	97:40	0:0	16	=
call	97:42	97:70	16	strcasestr
arg	97:54	97:63	17	psz_parse
water	97:54	0:0	18	psz_parse
arg	97:65	97:70	17	"\""
water	97:65	0:0	18	"\""
water	97:72	0:0	16	)
stmts	98:24	108:24	15	
water	98:24	0:0	16	{
water	99:28	0:0	16	i_strlen
op	99:37	0:0	16	=
water	99:39	0:0	16	psz_parse
op	99:48	0:0	16	-
water	99:49	0:0	16	psz_backup
water	99:59	0:0	16	;
if	100:28	100:55	16	(i_strlen < 1)
cond	100:32	100:43	17	i_strlen < 1
water	100:32	0:0	18	i_strlen
op	100:41	0:0	18	<
water	100:43	0:0	18	1
stmts	100:47	100:55	17	
continue	100:47	100:55	18	
call	101:28	101:80	16	msg_Dbg
arg	101:37	101:44	17	p_demux
water	101:37	0:0	18	p_demux
arg	101:46	101:70	17	"param value strlen: %d"
water	101:46	0:0	18	"param value strlen: %d"
arg	101:72	101:80	17	i_strlen
water	101:72	0:0	18	i_strlen
water	101:81	0:0	16	;
water	102:28	0:0	16	psz_string
op	102:39	0:0	16	=
call	102:41	102:61	16	xmalloc
arg	102:50	102:61	17	i_strlen+1
water	102:50	0:0	18	i_strlen
op	102:59	0:0	18	+
water	102:60	0:0	18	1
water	102:62	0:0	16	;
call	103:28	103:69	16	memcpy
arg	103:36	103:46	17	psz_string
water	103:36	0:0	18	psz_string
arg	103:48	103:58	17	psz_backup
water	103:48	0:0	18	psz_backup
arg	103:60	103:69	17	i_strlen
water	103:60	0:0	18	i_strlen
water	103:70	0:0	16	;
water	104:28	0:0	16	psz_string
op	104:38	0:0	16	[
water	104:39	0:0	16	i_strlen
op	104:47	0:0	16	]
op	104:49	0:0	16	=
water	104:51	0:0	16	'\0'
water	104:55	0:0	16	;
call	105:28	105:75	16	msg_Dbg
arg	105:37	105:44	17	p_demux
water	105:37	0:0	18	p_demux
arg	105:46	105:63	17	"param value: %s"
water	105:46	0:0	18	"param value: %s"
arg	105:65	105:75	17	psz_string
water	105:65	0:0	18	psz_string
water	105:76	0:0	16	;
if	106:28	106:108	16	(b_encoding_flag && !strcasecmp (psz_string ,"utf-8" ))
cond	106:32	106:84	17	b_encoding_flag && !strcasecmp (psz_string ,"utf-8" )
water	106:32	0:0	18	b_encoding_flag
op	106:48	0:0	18	&&
op	106:51	0:0	18	!
call	106:52	106:84	18	strcasecmp
arg	106:64	106:74	19	psz_string
water	106:64	0:0	20	psz_string
arg	106:76	106:84	19	"utf-8"
water	106:76	0:0	20	"utf-8"
stmts	106:88	106:108	17	
water	106:88	0:0	18	p_sys
op	106:93	0:0	18	->
water	106:95	0:0	18	b_utf8
op	106:102	0:0	18	=
water	106:104	0:0	18	true
water	106:108	0:0	18	;
call	107:28	107:45	16	free
arg	107:34	107:45	17	psz_string
water	107:34	0:0	18	psz_string
water	107:46	0:0	16	;
water	108:24	0:0	16	}
else	109:24	109:37	14
stmts	109:29	109:37	15	
continue	109:29	109:37	16	
water	110:20	0:0	14	}
else	111:20	111:33	12
stmts	111:25	111:33	13	
continue	111:25	111:33	14	
water	112:16	0:0	12	}
if	113:16	114:34	10	(( psz_parse =strcasestr (psz_parse ,"/>" ) ))
cond	113:20	113:64	11	( psz_parse =strcasestr (psz_parse ,"/>" ) )
water	113:20	0:0	12	(
water	113:22	0:0	12	psz_parse
op	113:32	0:0	12	=
call	113:34	113:62	12	strcasestr
arg	113:46	113:55	13	psz_parse
water	113:46	0:0	14	psz_parse
arg	113:57	113:62	13	"/>"
water	113:57	0:0	14	"/>"
water	113:64	0:0	12	)
stmts	114:20	114:34	11	
water	114:20	0:0	12	psz_parse
op	114:30	0:0	12	+=
water	114:33	0:0	12	2
water	114:34	0:0	12	;
else	115:16	115:29	10
stmts	115:21	115:29	11	
continue	115:21	115:29	12	
water	116:12	0:0	10	}
else	117:12	123:12	6
stmts	117:17	123:12	7	
if	117:17	123:12	8	(!strncasecmp (psz_parse ,"<BANNER" ,7 ))
cond	117:21	117:59	9	!strncasecmp (psz_parse ,"<BANNER" ,7 )
op	117:21	0:0	10	!
call	117:22	117:59	10	strncasecmp
arg	117:35	117:44	11	psz_parse
water	117:35	0:0	12	psz_parse
arg	117:46	117:55	11	"<BANNER"
water	117:46	0:0	12	"<BANNER"
arg	117:57	117:59	11	7
water	117:57	0:0	12	7
stmts	118:12	123:12	9	
water	118:12	0:0	10	{
if	120:16	121:34	10	(( psz_parse =strcasestr (psz_parse ,"</BANNER>" ) ))
cond	120:20	120:71	11	( psz_parse =strcasestr (psz_parse ,"</BANNER>" ) )
water	120:20	0:0	12	(
water	120:22	0:0	12	psz_parse
op	120:32	0:0	12	=
call	120:34	120:69	12	strcasestr
arg	120:46	120:55	13	psz_parse
water	120:46	0:0	14	psz_parse
arg	120:57	120:69	13	"</BANNER>"
water	120:57	0:0	14	"</BANNER>"
water	120:71	0:0	12	)
stmts	121:20	121:34	11	
water	121:20	0:0	12	psz_parse
op	121:30	0:0	12	+=
water	121:33	0:0	12	9
water	121:34	0:0	12	;
else	122:16	122:29	10
stmts	122:21	122:29	11	
continue	122:21	122:29	12	
water	123:12	0:0	10	}
else	124:12	132:12	6
stmts	124:17	132:12	7	
if	124:17	132:12	8	(!strncasecmp (psz_parse ,"<PREVIEWDURATION" ,16 ) || !strncasecmp (psz_parse ,"<LOGURL" ,7 ) || !strncasecmp (psz_parse ,"<Skin" ,5 ))
cond	124:21	126:57	9	!strncasecmp (psz_parse ,"<PREVIEWDURATION" ,16 ) || !strncasecmp (psz_parse ,"<LOGURL" ,7 ) || !strncasecmp (psz_parse ,"<Skin" ,5 )
op	124:21	0:0	10	!
call	124:22	124:69	10	strncasecmp
arg	124:35	124:44	11	psz_parse
water	124:35	0:0	12	psz_parse
arg	124:46	124:64	11	"<PREVIEWDURATION"
water	124:46	0:0	12	"<PREVIEWDURATION"
arg	124:66	124:69	11	16
water	124:66	0:0	12	16
op	124:71	0:0	10	||
op	125:21	0:0	10	!
call	125:22	125:59	10	strncasecmp
arg	125:35	125:44	11	psz_parse
water	125:35	0:0	12	psz_parse
arg	125:46	125:55	11	"<LOGURL"
water	125:46	0:0	12	"<LOGURL"
arg	125:57	125:59	11	7
water	125:57	0:0	12	7
op	125:61	0:0	10	||
op	126:21	0:0	10	!
call	126:22	126:57	10	strncasecmp
arg	126:35	126:44	11	psz_parse
water	126:35	0:0	12	psz_parse
arg	126:46	126:53	11	"<Skin"
water	126:46	0:0	12	"<Skin"
arg	126:55	126:57	11	5
water	126:55	0:0	12	5
stmts	127:12	132:12	9	
water	127:12	0:0	10	{
if	129:16	130:34	10	(( psz_parse =strcasestr (psz_parse ,"/>" ) ))
cond	129:20	129:64	11	( psz_parse =strcasestr (psz_parse ,"/>" ) )
water	129:20	0:0	12	(
water	129:22	0:0	12	psz_parse
op	129:32	0:0	12	=
call	129:34	129:62	12	strcasestr
arg	129:46	129:55	13	psz_parse
water	129:46	0:0	14	psz_parse
arg	129:57	129:62	13	"/>"
water	129:57	0:0	14	"/>"
water	129:64	0:0	12	)
stmts	130:20	130:34	11	
water	130:20	0:0	12	psz_parse
op	130:30	0:0	12	+=
water	130:33	0:0	12	2
water	130:34	0:0	12	;
else	131:16	131:29	10
stmts	131:21	131:29	11	
continue	131:21	131:29	12	
water	132:12	0:0	10	}
else	133:12	152:12	6
stmts	133:17	152:12	7	
if	133:17	152:12	8	(!strncasecmp (psz_parse ,"<BASE " ,6 ))
cond	133:21	133:58	9	!strncasecmp (psz_parse ,"<BASE " ,6 )
op	133:21	0:0	10	!
call	133:22	133:58	10	strncasecmp
arg	133:35	133:44	11	psz_parse
water	133:35	0:0	12	psz_parse
arg	133:46	133:54	11	"<BASE "
water	133:46	0:0	12	"<BASE "
arg	133:56	133:58	11	6
water	133:56	0:0	12	6
stmts	134:12	152:12	9	
water	134:12	0:0	10	{
water	135:16	0:0	10	psz_parse
op	135:26	0:0	10	=
call	135:28	135:64	10	SkipBlanks
arg	135:39	135:50	11	psz_parse+6
water	135:39	0:0	12	psz_parse
op	135:48	0:0	12	+
water	135:49	0:0	12	6
arg	135:52	135:64	11	(unsigned)-1
water	135:52	0:0	12	(
water	135:53	0:0	12	unsigned
water	135:61	0:0	12	)
op	135:62	0:0	12	-
water	135:63	0:0	12	1
water	135:65	0:0	10	;
if	136:16	148:16	10	(!strncasecmp (psz_parse ,"HREF" ,4 ))
cond	136:20	136:55	11	!strncasecmp (psz_parse ,"HREF" ,4 )
op	136:20	0:0	12	!
call	136:21	136:55	12	strncasecmp
arg	136:34	136:43	13	psz_parse
water	136:34	0:0	14	psz_parse
arg	136:45	136:51	13	"HREF"
water	136:45	0:0	14	"HREF"
arg	136:53	136:55	13	4
water	136:53	0:0	14	4
stmts	137:16	148:16	11	
water	137:16	0:0	12	{
if	138:20	146:20	12	(( psz_parse =strcasestr (psz_parse ,"\"" ) ))
cond	138:24	138:68	13	( psz_parse =strcasestr (psz_parse ,"\"" ) )
water	138:24	0:0	14	(
water	138:26	0:0	14	psz_parse
op	138:36	0:0	14	=
call	138:38	138:66	14	strcasestr
arg	138:50	138:59	15	psz_parse
water	138:50	0:0	16	psz_parse
arg	138:61	138:66	15	"\""
water	138:61	0:0	16	"\""
water	138:68	0:0	14	)
stmts	139:20	146:20	13	
water	139:20	0:0	14	{
water	140:24	0:0	14	psz_backup
op	140:35	0:0	14	=
op	140:37	0:0	14	++
water	140:39	0:0	14	psz_parse
water	140:48	0:0	14	;
if	141:24	144:24	14	(( psz_parse =strcasestr (psz_parse ,"\"" ) ))
cond	141:28	141:72	15	( psz_parse =strcasestr (psz_parse ,"\"" ) )
water	141:28	0:0	16	(
water	141:30	0:0	16	psz_parse
op	141:40	0:0	16	=
call	141:42	141:70	16	strcasestr
arg	141:54	141:63	17	psz_parse
water	141:54	0:0	18	psz_parse
arg	141:65	141:70	17	"\""
water	141:65	0:0	18	"\""
water	141:72	0:0	16	)
stmts	142:24	144:24	15	
water	142:24	0:0	16	{
call	143:28	143:117	16	StoreString
arg	143:41	143:48	17	p_demux
water	143:41	0:0	18	p_demux
arg	143:50	143:93	17	(b_entry?&psz_base_entry:&psz_base_asx)
water	143:50	0:0	18	(
water	143:51	0:0	18	b_entry
water	143:59	0:0	18	?
op	143:61	0:0	18	&
water	143:62	0:0	18	psz_base_entry
water	143:77	0:0	18	:
op	143:79	0:0	18	&
water	143:80	0:0	18	psz_base_asx
water	143:92	0:0	18	)
arg	143:95	143:105	17	psz_backup
water	143:95	0:0	18	psz_backup
arg	143:107	143:117	17	psz_parse
water	143:107	0:0	18	psz_parse
water	143:118	0:0	16	;
water	144:24	0:0	16	}
else	145:24	145:37	14
stmts	145:29	145:37	15	
continue	145:29	145:37	16	
water	146:20	0:0	14	}
else	147:20	147:33	12
stmts	147:25	147:33	13	
continue	147:25	147:33	14	
water	148:16	0:0	12	}
if	149:16	150:34	10	(( psz_parse =strcasestr (psz_parse ,"/>" ) ))
cond	149:20	149:64	11	( psz_parse =strcasestr (psz_parse ,"/>" ) )
water	149:20	0:0	12	(
water	149:22	0:0	12	psz_parse
op	149:32	0:0	12	=
call	149:34	149:62	12	strcasestr
arg	149:46	149:55	13	psz_parse
water	149:46	0:0	14	psz_parse
arg	149:57	149:62	13	"/>"
water	149:57	0:0	14	"/>"
water	149:64	0:0	12	)
stmts	150:20	150:34	11	
water	150:20	0:0	12	psz_parse
op	150:30	0:0	12	+=
water	150:33	0:0	12	2
water	150:34	0:0	12	;
else	151:16	151:29	10
stmts	151:21	151:29	11	
continue	151:21	151:29	12	
water	152:12	0:0	10	}
else	153:12	162:12	6
stmts	153:17	162:12	7	
if	153:17	162:12	8	(!strncasecmp (psz_parse ,"<TITLE>" ,7 ))
cond	153:21	153:59	9	!strncasecmp (psz_parse ,"<TITLE>" ,7 )
op	153:21	0:0	10	!
call	153:22	153:59	10	strncasecmp
arg	153:35	153:44	11	psz_parse
water	153:35	0:0	12	psz_parse
arg	153:46	153:55	11	"<TITLE>"
water	153:46	0:0	12	"<TITLE>"
arg	153:57	153:59	11	7
water	153:57	0:0	12	7
stmts	154:12	162:12	9	
water	154:12	0:0	10	{
water	155:16	0:0	10	psz_backup
op	155:27	0:0	10	=
water	155:29	0:0	10	psz_parse
op	155:38	0:0	10	+=
water	155:40	0:0	10	7
water	155:41	0:0	10	;
if	156:16	160:16	10	(( psz_parse =strcasestr (psz_parse ,"</TITLE>" ) ))
cond	156:20	156:70	11	( psz_parse =strcasestr (psz_parse ,"</TITLE>" ) )
water	156:20	0:0	12	(
water	156:22	0:0	12	psz_parse
op	156:32	0:0	12	=
call	156:34	156:68	12	strcasestr
arg	156:46	156:55	13	psz_parse
water	156:46	0:0	14	psz_parse
arg	156:57	156:68	13	"</TITLE>"
water	156:57	0:0	14	"</TITLE>"
water	156:70	0:0	12	)
stmts	157:16	160:16	11	
water	157:16	0:0	12	{
call	158:20	158:111	12	StoreString
arg	158:33	158:40	13	p_demux
water	158:33	0:0	14	p_demux
arg	158:42	158:87	13	(b_entry?&psz_title_entry:&psz_title_asx)
water	158:42	0:0	14	(
water	158:43	0:0	14	b_entry
water	158:51	0:0	14	?
op	158:53	0:0	14	&
water	158:54	0:0	14	psz_title_entry
water	158:70	0:0	14	:
op	158:72	0:0	14	&
water	158:73	0:0	14	psz_title_asx
water	158:86	0:0	14	)
arg	158:89	158:99	13	psz_backup
water	158:89	0:0	14	psz_backup
arg	158:101	158:111	13	psz_parse
water	158:101	0:0	14	psz_parse
water	158:112	0:0	12	;
water	159:20	0:0	12	psz_parse
op	159:30	0:0	12	+=
water	159:33	0:0	12	8
water	159:34	0:0	12	;
water	160:16	0:0	12	}
else	161:16	161:29	10
stmts	161:21	161:29	11	
continue	161:21	161:29	12	
water	162:12	0:0	10	}
else	163:12	172:12	6
stmts	163:17	172:12	7	
if	163:17	172:12	8	(!strncasecmp (psz_parse ,"<Author>" ,8 ))
cond	163:21	163:60	9	!strncasecmp (psz_parse ,"<Author>" ,8 )
op	163:21	0:0	10	!
call	163:22	163:60	10	strncasecmp
arg	163:35	163:44	11	psz_parse
water	163:35	0:0	12	psz_parse
arg	163:46	163:56	11	"<Author>"
water	163:46	0:0	12	"<Author>"
arg	163:58	163:60	11	8
water	163:58	0:0	12	8
stmts	164:12	172:12	9	
water	164:12	0:0	10	{
water	165:16	0:0	10	psz_backup
op	165:27	0:0	10	=
water	165:29	0:0	10	psz_parse
op	165:38	0:0	10	+=
water	165:40	0:0	10	8
water	165:41	0:0	10	;
if	166:16	170:16	10	(( psz_parse =strcasestr (psz_parse ,"</Author>" ) ))
cond	166:20	166:71	11	( psz_parse =strcasestr (psz_parse ,"</Author>" ) )
water	166:20	0:0	12	(
water	166:22	0:0	12	psz_parse
op	166:32	0:0	12	=
call	166:34	166:69	12	strcasestr
arg	166:46	166:55	13	psz_parse
water	166:46	0:0	14	psz_parse
arg	166:57	166:69	13	"</Author>"
water	166:57	0:0	14	"</Author>"
water	166:71	0:0	12	)
stmts	167:16	170:16	11	
water	167:16	0:0	12	{
call	168:20	168:113	12	StoreString
arg	168:33	168:40	13	p_demux
water	168:33	0:0	14	p_demux
arg	168:42	168:89	13	(b_entry?&psz_artist_entry:&psz_artist_asx)
water	168:42	0:0	14	(
water	168:43	0:0	14	b_entry
water	168:51	0:0	14	?
op	168:53	0:0	14	&
water	168:54	0:0	14	psz_artist_entry
water	168:71	0:0	14	:
op	168:73	0:0	14	&
water	168:74	0:0	14	psz_artist_asx
water	168:88	0:0	14	)
arg	168:91	168:101	13	psz_backup
water	168:91	0:0	14	psz_backup
arg	168:103	168:113	13	psz_parse
water	168:103	0:0	14	psz_parse
water	168:114	0:0	12	;
water	169:20	0:0	12	psz_parse
op	169:30	0:0	12	+=
water	169:33	0:0	12	9
water	169:34	0:0	12	;
water	170:16	0:0	12	}
else	171:16	171:29	10
stmts	171:21	171:29	11	
continue	171:21	171:29	12	
water	172:12	0:0	10	}
else	173:12	182:12	6
stmts	173:17	182:12	7	
if	173:17	182:12	8	(!strncasecmp (psz_parse ,"<Copyright" ,10 ))
cond	173:21	173:63	9	!strncasecmp (psz_parse ,"<Copyright" ,10 )
op	173:21	0:0	10	!
call	173:22	173:63	10	strncasecmp
arg	173:35	173:44	11	psz_parse
water	173:35	0:0	12	psz_parse
arg	173:46	173:58	11	"<Copyright"
water	173:46	0:0	12	"<Copyright"
arg	173:60	173:63	11	10
water	173:60	0:0	12	10
stmts	174:12	182:12	9	
water	174:12	0:0	10	{
water	175:16	0:0	10	psz_backup
op	175:27	0:0	10	=
water	175:29	0:0	10	psz_parse
op	175:38	0:0	10	+=
water	175:40	0:0	10	11
water	175:42	0:0	10	;
if	176:16	180:16	10	(( psz_parse =strcasestr (psz_parse ,"</Copyright>" ) ))
cond	176:20	176:74	11	( psz_parse =strcasestr (psz_parse ,"</Copyright>" ) )
water	176:20	0:0	12	(
water	176:22	0:0	12	psz_parse
op	176:32	0:0	12	=
call	176:34	176:72	12	strcasestr
arg	176:46	176:55	13	psz_parse
water	176:46	0:0	14	psz_parse
arg	176:57	176:72	13	"</Copyright>"
water	176:57	0:0	14	"</Copyright>"
water	176:74	0:0	12	)
stmts	177:16	180:16	11	
water	177:16	0:0	12	{
call	178:20	178:119	12	StoreString
arg	178:33	178:40	13	p_demux
water	178:33	0:0	14	p_demux
arg	178:42	178:95	13	(b_entry?&psz_copyright_entry:&psz_copyright_asx)
water	178:42	0:0	14	(
water	178:43	0:0	14	b_entry
water	178:51	0:0	14	?
op	178:53	0:0	14	&
water	178:54	0:0	14	psz_copyright_entry
water	178:74	0:0	14	:
op	178:76	0:0	14	&
water	178:77	0:0	14	psz_copyright_asx
water	178:94	0:0	14	)
arg	178:97	178:107	13	psz_backup
water	178:97	0:0	14	psz_backup
arg	178:109	178:119	13	psz_parse
water	178:109	0:0	14	psz_parse
water	178:120	0:0	12	;
water	179:20	0:0	12	psz_parse
op	179:30	0:0	12	+=
water	179:33	0:0	12	12
water	179:35	0:0	12	;
water	180:16	0:0	12	}
else	181:16	181:29	10
stmts	181:21	181:29	11	
continue	181:21	181:29	12	
water	182:12	0:0	10	}
else	183:12	208:12	6
stmts	183:17	208:12	7	
if	183:17	208:12	8	(!strncasecmp (psz_parse ,"<MoreInfo " ,10 ))
cond	183:21	183:63	9	!strncasecmp (psz_parse ,"<MoreInfo " ,10 )
op	183:21	0:0	10	!
call	183:22	183:63	10	strncasecmp
arg	183:35	183:44	11	psz_parse
water	183:35	0:0	12	psz_parse
arg	183:46	183:58	11	"<MoreInfo "
water	183:46	0:0	12	"<MoreInfo "
arg	183:60	183:63	11	10
water	183:60	0:0	12	10
stmts	184:12	208:12	9	
water	184:12	0:0	10	{
water	185:16	0:0	10	psz_parse
op	185:26	0:0	10	=
call	185:28	185:65	10	SkipBlanks
arg	185:39	185:51	11	psz_parse+10
water	185:39	0:0	12	psz_parse
op	185:48	0:0	12	+
water	185:49	0:0	12	10
arg	185:53	185:65	11	(unsigned)-1
water	185:53	0:0	12	(
water	185:54	0:0	12	unsigned
water	185:62	0:0	12	)
op	185:63	0:0	12	-
water	185:64	0:0	12	1
water	185:66	0:0	10	;
if	186:16	198:16	10	(!strncasecmp (psz_parse ,"HREF" ,4 ))
cond	186:20	186:55	11	!strncasecmp (psz_parse ,"HREF" ,4 )
op	186:20	0:0	12	!
call	186:21	186:55	12	strncasecmp
arg	186:34	186:43	13	psz_parse
water	186:34	0:0	14	psz_parse
arg	186:45	186:51	13	"HREF"
water	186:45	0:0	14	"HREF"
arg	186:53	186:55	13	4
water	186:53	0:0	14	4
stmts	187:16	198:16	11	
water	187:16	0:0	12	{
if	188:20	196:20	12	(( psz_parse =strcasestr (psz_parse ,"\"" ) ))
cond	188:24	188:68	13	( psz_parse =strcasestr (psz_parse ,"\"" ) )
water	188:24	0:0	14	(
water	188:26	0:0	14	psz_parse
op	188:36	0:0	14	=
call	188:38	188:66	14	strcasestr
arg	188:50	188:59	15	psz_parse
water	188:50	0:0	16	psz_parse
arg	188:61	188:66	15	"\""
water	188:61	0:0	16	"\""
water	188:68	0:0	14	)
stmts	189:20	196:20	13	
water	189:20	0:0	14	{
water	190:24	0:0	14	psz_backup
op	190:35	0:0	14	=
op	190:37	0:0	14	++
water	190:39	0:0	14	psz_parse
water	190:48	0:0	14	;
if	191:24	194:24	14	(( psz_parse =strcasestr (psz_parse ,"\"" ) ))
cond	191:28	191:72	15	( psz_parse =strcasestr (psz_parse ,"\"" ) )
water	191:28	0:0	16	(
water	191:30	0:0	16	psz_parse
op	191:40	0:0	16	=
call	191:42	191:70	16	strcasestr
arg	191:54	191:63	17	psz_parse
water	191:54	0:0	18	psz_parse
arg	191:65	191:70	17	"\""
water	191:65	0:0	18	"\""
water	191:72	0:0	16	)
stmts	192:24	194:24	15	
water	192:24	0:0	16	{
call	193:28	193:125	16	StoreString
arg	193:41	193:48	17	p_demux
water	193:41	0:0	18	p_demux
arg	193:50	193:101	17	(b_entry?&psz_moreinfo_entry:&psz_moreinfo_asx)
water	193:50	0:0	18	(
water	193:51	0:0	18	b_entry
water	193:59	0:0	18	?
op	193:61	0:0	18	&
water	193:62	0:0	18	psz_moreinfo_entry
water	193:81	0:0	18	:
op	193:83	0:0	18	&
water	193:84	0:0	18	psz_moreinfo_asx
water	193:100	0:0	18	)
arg	193:103	193:113	17	psz_backup
water	193:103	0:0	18	psz_backup
arg	193:115	193:125	17	psz_parse
water	193:115	0:0	18	psz_parse
water	193:126	0:0	16	;
water	194:24	0:0	16	}
else	195:24	195:37	14
stmts	195:29	195:37	15	
continue	195:29	195:37	16	
water	196:20	0:0	14	}
else	197:20	197:33	12
stmts	197:25	197:33	13	
continue	197:25	197:33	14	
water	198:16	0:0	12	}
if	199:16	200:46	10	(( psz_backup =strcasestr (psz_parse ,"/>" ) ))
cond	199:20	199:65	11	( psz_backup =strcasestr (psz_parse ,"/>" ) )
water	199:20	0:0	12	(
water	199:22	0:0	12	psz_backup
op	199:33	0:0	12	=
call	199:35	199:63	12	strcasestr
arg	199:47	199:56	13	psz_parse
water	199:47	0:0	14	psz_parse
arg	199:58	199:63	13	"/>"
water	199:58	0:0	14	"/>"
water	199:65	0:0	12	)
stmts	200:20	200:46	11	
water	200:20	0:0	12	psz_parse
op	200:30	0:0	12	=
water	200:32	0:0	12	psz_backup
op	200:43	0:0	12	+
water	200:45	0:0	12	2
water	200:46	0:0	12	;
else	201:16	202:47	10
stmts	201:21	202:47	11	
if	201:21	202:47	12	(( psz_backup =strcasestr (psz_parse ,"</MoreInfo>" ) ))
cond	201:25	201:78	13	( psz_backup =strcasestr (psz_parse ,"</MoreInfo>" ) )
water	201:25	0:0	14	(
water	201:27	0:0	14	psz_backup
op	201:38	0:0	14	=
call	201:40	201:76	14	strcasestr
arg	201:52	201:61	15	psz_parse
water	201:52	0:0	16	psz_parse
arg	201:63	201:76	15	"</MoreInfo>"
water	201:63	0:0	16	"</MoreInfo>"
water	201:78	0:0	14	)
stmts	202:20	202:47	13	
water	202:20	0:0	14	psz_parse
op	202:30	0:0	14	=
water	202:32	0:0	14	psz_backup
op	202:43	0:0	14	+
water	202:45	0:0	14	11
water	202:47	0:0	14	;
else	203:16	207:16	10
stmts	204:16	207:16	11	
water	204:16	0:0	12	{
water	205:20	0:0	12	psz_parse
op	205:30	0:0	12	=
water	205:32	0:0	12	NULL
water	205:36	0:0	12	;
continue	206:20	206:28	12	
water	207:16	0:0	12	}
water	208:12	0:0	10	}
else	209:12	218:12	6
stmts	209:17	218:12	7	
if	209:17	218:12	8	(!strncasecmp (psz_parse ,"<ABSTRACT>" ,10 ))
cond	209:21	209:63	9	!strncasecmp (psz_parse ,"<ABSTRACT>" ,10 )
op	209:21	0:0	10	!
call	209:22	209:63	10	strncasecmp
arg	209:35	209:44	11	psz_parse
water	209:35	0:0	12	psz_parse
arg	209:46	209:58	11	"<ABSTRACT>"
water	209:46	0:0	12	"<ABSTRACT>"
arg	209:60	209:63	11	10
water	209:60	0:0	12	10
stmts	210:12	218:12	9	
water	210:12	0:0	10	{
water	211:16	0:0	10	psz_backup
op	211:27	0:0	10	=
water	211:29	0:0	10	psz_parse
op	211:38	0:0	10	+=
water	211:40	0:0	10	10
water	211:42	0:0	10	;
if	212:16	216:16	10	(( psz_parse =strcasestr (psz_parse ,"</ABSTRACT>" ) ))
cond	212:20	212:73	11	( psz_parse =strcasestr (psz_parse ,"</ABSTRACT>" ) )
water	212:20	0:0	12	(
water	212:22	0:0	12	psz_parse
op	212:32	0:0	12	=
call	212:34	212:71	12	strcasestr
arg	212:46	212:55	13	psz_parse
water	212:46	0:0	14	psz_parse
arg	212:57	212:71	13	"</ABSTRACT>"
water	212:57	0:0	14	"</ABSTRACT>"
water	212:73	0:0	12	)
stmts	213:16	216:16	11	
water	213:16	0:0	12	{
call	214:20	214:117	12	StoreString
arg	214:33	214:40	13	p_demux
water	214:33	0:0	14	p_demux
arg	214:42	214:93	13	(b_entry?&psz_abstract_entry:&psz_abstract_asx)
water	214:42	0:0	14	(
water	214:43	0:0	14	b_entry
water	214:51	0:0	14	?
op	214:53	0:0	14	&
water	214:54	0:0	14	psz_abstract_entry
water	214:73	0:0	14	:
op	214:75	0:0	14	&
water	214:76	0:0	14	psz_abstract_asx
water	214:92	0:0	14	)
arg	214:95	214:105	13	psz_backup
water	214:95	0:0	14	psz_backup
arg	214:107	214:117	13	psz_parse
water	214:107	0:0	14	psz_parse
water	214:118	0:0	12	;
water	215:20	0:0	12	psz_parse
op	215:30	0:0	12	+=
water	215:33	0:0	12	11
water	215:35	0:0	12	;
water	216:16	0:0	12	}
else	217:16	217:29	10
stmts	217:21	217:29	11	
continue	217:21	217:29	12	
water	218:12	0:0	10	}
else	219:12	247:12	6
stmts	219:17	247:12	7	
if	219:17	247:12	8	(!strncasecmp (psz_parse ,"<EntryRef " ,10 ))
cond	219:21	219:63	9	!strncasecmp (psz_parse ,"<EntryRef " ,10 )
op	219:21	0:0	10	!
call	219:22	219:63	10	strncasecmp
arg	219:35	219:44	11	psz_parse
water	219:35	0:0	12	psz_parse
arg	219:46	219:58	11	"<EntryRef "
water	219:46	0:0	12	"<EntryRef "
arg	219:60	219:63	11	10
water	219:60	0:0	12	10
stmts	220:12	247:12	9	
water	220:12	0:0	10	{
water	221:16	0:0	10	psz_parse
op	221:26	0:0	10	=
call	221:28	221:65	10	SkipBlanks
arg	221:39	221:51	11	psz_parse+10
water	221:39	0:0	12	psz_parse
op	221:48	0:0	12	+
water	221:49	0:0	12	10
arg	221:53	221:65	11	(unsigned)-1
water	221:53	0:0	12	(
water	221:54	0:0	12	unsigned
water	221:62	0:0	12	)
op	221:63	0:0	12	-
water	221:64	0:0	12	1
water	221:66	0:0	10	;
if	222:16	244:16	10	(!strncasecmp (psz_parse ,"HREF" ,4 ))
cond	222:20	222:55	11	!strncasecmp (psz_parse ,"HREF" ,4 )
op	222:20	0:0	12	!
call	222:21	222:55	12	strncasecmp
arg	222:34	222:43	13	psz_parse
water	222:34	0:0	14	psz_parse
arg	222:45	222:51	13	"HREF"
water	222:45	0:0	14	"HREF"
arg	222:53	222:55	13	4
water	222:53	0:0	14	4
stmts	223:16	244:16	11	
water	223:16	0:0	12	{
if	224:20	242:20	12	(( psz_parse =strcasestr (psz_parse ,"\"" ) ))
cond	224:24	224:68	13	( psz_parse =strcasestr (psz_parse ,"\"" ) )
water	224:24	0:0	14	(
water	224:26	0:0	14	psz_parse
op	224:36	0:0	14	=
call	224:38	224:66	14	strcasestr
arg	224:50	224:59	15	psz_parse
water	224:50	0:0	16	psz_parse
arg	224:61	224:66	15	"\""
water	224:61	0:0	16	"\""
water	224:68	0:0	14	)
stmts	225:20	242:20	13	
water	225:20	0:0	14	{
water	226:24	0:0	14	psz_backup
op	226:35	0:0	14	=
op	226:37	0:0	14	++
water	226:39	0:0	14	psz_parse
water	226:48	0:0	14	;
if	227:24	240:24	14	(( psz_parse =strcasestr (psz_parse ,"\"" ) ))
cond	227:28	227:72	15	( psz_parse =strcasestr (psz_parse ,"\"" ) )
water	227:28	0:0	16	(
water	227:30	0:0	16	psz_parse
op	227:40	0:0	16	=
call	227:42	227:70	16	strcasestr
arg	227:54	227:63	17	psz_parse
water	227:54	0:0	18	psz_parse
arg	227:65	227:70	17	"\""
water	227:65	0:0	18	"\""
water	227:72	0:0	16	)
stmts	228:24	240:24	15	
water	228:24	0:0	16	{
water	229:28	0:0	16	i_strlen
op	229:37	0:0	16	=
water	229:39	0:0	16	psz_parse
op	229:48	0:0	16	-
water	229:49	0:0	16	psz_backup
water	229:59	0:0	16	;
if	230:28	230:55	16	(i_strlen < 1)
cond	230:32	230:43	17	i_strlen < 1
water	230:32	0:0	18	i_strlen
op	230:41	0:0	18	<
water	230:43	0:0	18	1
stmts	230:47	230:55	17	
continue	230:47	230:55	18	
water	231:28	0:0	16	psz_string
op	231:39	0:0	16	=
call	231:41	231:61	16	xmalloc
arg	231:50	231:61	17	i_strlen+1
water	231:50	0:0	18	i_strlen
op	231:59	0:0	18	+
water	231:60	0:0	18	1
water	231:62	0:0	16	;
call	232:28	232:69	16	memcpy
arg	232:36	232:46	17	psz_string
water	232:36	0:0	18	psz_string
arg	232:48	232:58	17	psz_backup
water	232:48	0:0	18	psz_backup
arg	232:60	232:69	17	i_strlen
water	232:60	0:0	18	i_strlen
water	232:70	0:0	16	;
water	233:28	0:0	16	psz_string
op	233:38	0:0	16	[
water	233:39	0:0	16	i_strlen
op	233:47	0:0	16	]
op	233:49	0:0	16	=
water	233:51	0:0	16	'\0'
water	233:55	0:0	16	;
decl	234:28	234:49	16	input_item_t	*p_input
water	235:28	0:0	16	p_input
op	235:36	0:0	16	=
call	235:38	235:80	16	input_item_New
arg	235:54	235:64	17	psz_string
water	235:54	0:0	18	psz_string
arg	235:66	235:80	17	psz_title_asx
water	235:66	0:0	18	psz_title_asx
water	235:81	0:0	16	;
call	236:28	236:77	16	input_item_CopyOptions
arg	236:52	236:67	17	p_current_input
water	236:52	0:0	18	p_current_input
arg	236:69	236:77	17	p_input
water	236:69	0:0	18	p_input
water	236:78	0:0	16	;
call	237:28	237:76	16	input_item_node_AppendItem
arg	237:56	237:66	17	p_subitems
water	237:56	0:0	18	p_subitems
arg	237:68	237:76	17	p_input
water	237:68	0:0	18	p_input
water	237:77	0:0	16	;
call	238:28	238:51	16	vlc_gc_decref
arg	238:43	238:51	17	p_input
water	238:43	0:0	18	p_input
water	238:52	0:0	16	;
call	239:28	239:45	16	free
arg	239:34	239:45	17	psz_string
water	239:34	0:0	18	psz_string
water	239:46	0:0	16	;
water	240:24	0:0	16	}
else	241:24	241:37	14
stmts	241:29	241:37	15	
continue	241:29	241:37	16	
water	242:20	0:0	14	}
else	243:20	243:33	12
stmts	243:25	243:33	13	
continue	243:25	243:33	14	
water	244:16	0:0	12	}
if	245:16	246:34	10	(( psz_parse =strcasestr (psz_parse ,"/>" ) ))
cond	245:20	245:64	11	( psz_parse =strcasestr (psz_parse ,"/>" ) )
water	245:20	0:0	12	(
water	245:22	0:0	12	psz_parse
op	245:32	0:0	12	=
call	245:34	245:62	12	strcasestr
arg	245:46	245:55	13	psz_parse
water	245:46	0:0	14	psz_parse
arg	245:57	245:62	13	"/>"
water	245:57	0:0	14	"/>"
water	245:64	0:0	12	)
stmts	246:20	246:34	11	
water	246:20	0:0	12	psz_parse
op	246:30	0:0	12	+=
water	246:33	0:0	12	2
water	246:34	0:0	12	;
water	247:12	0:0	10	}
else	248:12	343:12	6
stmts	248:17	343:12	7	
if	248:17	343:12	8	(!strncasecmp (psz_parse ,"</Entry>" ,8 ))
cond	248:21	248:60	9	!strncasecmp (psz_parse ,"</Entry>" ,8 )
op	248:21	0:0	10	!
call	248:22	248:60	10	strncasecmp
arg	248:35	248:44	11	psz_parse
water	248:35	0:0	12	psz_parse
arg	248:46	248:56	11	"</Entry>"
water	248:46	0:0	12	"</Entry>"
arg	248:58	248:60	11	8
water	248:58	0:0	12	8
stmts	249:12	343:12	9	
water	249:12	0:0	10	{
decl	250:16	250:44	10	input_item_t	*p_entry
op	250:38	0:0	10	=
water	250:40	0:0	10	NULL
decl	251:16	251:37	10	char	*psz_name
op	251:31	0:0	10	=
water	251:33	0:0	10	NULL
decl	252:16	252:38	10	char	*ppsz_options[2]
decl	253:16	253:33	10	int	i_options
op	253:30	0:0	10	=
water	253:32	0:0	10	0
water	255:16	0:0	10	psz_parse
op	255:25	0:0	10	+=
water	255:27	0:0	10	8
water	255:28	0:0	10	;
if	256:16	260:16	10	(! b_entry)
cond	256:20	256:21	11	! b_entry
op	256:20	0:0	12	!
water	256:21	0:0	12	b_entry
stmts	257:16	260:16	11	
water	257:16	0:0	12	{
call	258:20	258:68	12	msg_Err
arg	258:29	258:36	13	p_demux
water	258:29	0:0	14	p_demux
arg	258:38	258:68	13	"end of entry without start?"
water	258:38	0:0	14	"end of entry without start?"
water	258:69	0:0	12	;
continue	259:20	259:28	12	
water	260:16	0:0	12	}
if	261:16	265:16	10	(! psz_href)
cond	261:20	261:21	11	! psz_href
op	261:20	0:0	12	!
water	261:21	0:0	12	psz_href
stmts	262:16	265:16	11	
water	262:16	0:0	12	{
call	263:20	263:60	12	msg_Err
arg	263:29	263:36	13	p_demux
water	263:29	0:0	14	p_demux
arg	263:38	263:60	13	"entry without href?"
water	263:38	0:0	14	"entry without href?"
water	263:61	0:0	12	;
continue	264:20	264:28	12	
water	265:16	0:0	12	}
if	267:16	274:16	10	(p_sys -> b_skip_ads && b_skip_entry && i_inserted_entries != 0)
cond	267:20	267:79	11	p_sys -> b_skip_ads && b_skip_entry && i_inserted_entries != 0
water	267:20	0:0	12	p_sys
op	267:25	0:0	12	->
water	267:27	0:0	12	b_skip_ads
op	267:38	0:0	12	&&
water	267:41	0:0	12	b_skip_entry
op	267:54	0:0	12	&&
water	267:57	0:0	12	i_inserted_entries
op	267:76	0:0	12	!=
water	267:79	0:0	12	0
stmts	268:16	274:16	11	
water	268:16	0:0	12	{
decl	269:20	269:88	12	char	*psz_current_input_name
op	269:49	0:0	12	=
call	269:51	269:87	13	input_item_GetName
arg	269:71	269:87	14	p_current_input
water	269:71	0:0	15	p_current_input
call	270:20	272:102	12	msg_Dbg
arg	270:29	270:36	13	p_demux
water	270:29	0:0	14	p_demux
arg	270:38	270:64	13	"skipped entry %d %s (%s)"
water	270:38	0:0	14	"skipped entry %d %s (%s)"
arg	271:29	271:42	13	i_entry_count
water	271:29	0:0	14	i_entry_count
arg	272:29	272:91	13	(psz_title_entry?psz_title_entry:psz_current_input_name)
water	272:29	0:0	14	(
water	272:31	0:0	14	psz_title_entry
water	272:47	0:0	14	?
water	272:49	0:0	14	psz_title_entry
water	272:65	0:0	14	:
water	272:67	0:0	14	psz_current_input_name
water	272:90	0:0	14	)
arg	272:93	272:102	13	psz_href
water	272:93	0:0	14	psz_href
water	272:103	0:0	12	;
call	273:20	273:49	12	free
arg	273:26	273:49	13	psz_current_input_name
water	273:26	0:0	14	psz_current_input_name
water	273:50	0:0	12	;
water	274:16	0:0	12	}
else	275:16	333:16	10
stmts	276:16	333:16	11	
water	276:16	0:0	12	{
if	277:20	293:20	12	(i_starttime || i_duration)
cond	277:24	277:39	13	i_starttime || i_duration
water	277:24	0:0	14	i_starttime
op	277:36	0:0	14	||
water	277:39	0:0	14	i_duration
stmts	278:20	293:20	13	
water	278:20	0:0	14	{
if	279:24	285:24	14	(i_starttime)
cond	279:28	279:28	15	i_starttime
water	279:28	0:0	16	i_starttime
stmts	280:24	285:24	15	
water	280:24	0:0	16	{
if	281:28	282:64	16	(asprintf (ppsz_options + i_options ,":start-time=%d" ,i_starttime ) == - 1)
cond	281:32	281:100	17	asprintf (ppsz_options + i_options ,":start-time=%d" ,i_starttime ) == - 1
call	281:32	281:94	18	asprintf
arg	281:41	281:63	19	ppsz_options+i_options
water	281:41	0:0	20	ppsz_options
op	281:53	0:0	20	+
water	281:54	0:0	20	i_options
arg	281:65	281:81	19	":start-time=%d"
water	281:65	0:0	20	":start-time=%d"
arg	281:83	281:94	19	i_starttime
water	281:83	0:0	20	i_starttime
op	281:96	0:0	18	==
op	281:99	0:0	18	-
water	281:100	0:0	18	1
stmts	282:32	282:64	17	
op	282:32	0:0	18	*
water	282:33	0:0	18	(
water	282:34	0:0	18	ppsz_options
op	282:46	0:0	18	+
water	282:47	0:0	18	i_options
water	282:56	0:0	18	)
op	282:58	0:0	18	=
water	282:60	0:0	18	NULL
water	282:64	0:0	18	;
else	283:28	284:43	16
stmts	284:32	284:43	17	
op	284:32	0:0	18	++
water	284:34	0:0	18	i_options
water	284:43	0:0	18	;
water	285:24	0:0	16	}
if	286:24	292:24	14	(i_duration)
cond	286:28	286:28	15	i_duration
water	286:28	0:0	16	i_duration
stmts	287:24	292:24	15	
water	287:24	0:0	16	{
if	288:28	289:64	16	(asprintf (ppsz_options + i_options ,":stop-time=%d" ,i_starttime + i_duration ) == - 1)
cond	288:32	288:112	17	asprintf (ppsz_options + i_options ,":stop-time=%d" ,i_starttime + i_duration ) == - 1
call	288:32	288:106	18	asprintf
arg	288:41	288:63	19	ppsz_options+i_options
water	288:41	0:0	20	ppsz_options
op	288:53	0:0	20	+
water	288:54	0:0	20	i_options
arg	288:65	288:80	19	":stop-time=%d"
water	288:65	0:0	20	":stop-time=%d"
arg	288:82	288:106	19	i_starttime+i_duration
water	288:82	0:0	20	i_starttime
op	288:94	0:0	20	+
water	288:96	0:0	20	i_duration
op	288:108	0:0	18	==
op	288:111	0:0	18	-
water	288:112	0:0	18	1
stmts	289:32	289:64	17	
op	289:32	0:0	18	*
water	289:33	0:0	18	(
water	289:34	0:0	18	ppsz_options
op	289:46	0:0	18	+
water	289:47	0:0	18	i_options
water	289:56	0:0	18	)
op	289:58	0:0	18	=
water	289:60	0:0	18	NULL
water	289:64	0:0	18	;
else	290:28	291:43	16
stmts	291:32	291:43	17	
op	291:32	0:0	18	++
water	291:34	0:0	18	i_options
water	291:43	0:0	18	;
water	292:24	0:0	16	}
water	293:20	0:0	14	}
decl	295:20	295:88	12	char	*psz_current_input_name
op	295:49	0:0	12	=
call	295:51	295:87	13	input_item_GetName
arg	295:71	295:87	14	p_current_input
water	295:71	0:0	15	p_current_input
if	296:20	331:20	12	(asprintf (& psz_name ,"%d %s" ,i_entry_count ,( psz_title_entry ? psz_title_entry : psz_current_input_name ) ) != - 1)
cond	296:24	296:138	13	asprintf (& psz_name ,"%d %s" ,i_entry_count ,( psz_title_entry ? psz_title_entry : psz_current_input_name ) ) != - 1
call	296:24	296:132	14	asprintf
arg	296:34	296:43	15	&psz_name
op	296:34	0:0	16	&
water	296:35	0:0	16	psz_name
arg	296:45	296:52	15	"%d %s"
water	296:45	0:0	16	"%d %s"
arg	296:54	296:67	15	i_entry_count
water	296:54	0:0	16	i_entry_count
arg	296:69	296:132	15	(psz_title_entry?psz_title_entry:psz_current_input_name)
water	296:69	0:0	16	(
water	296:71	0:0	16	psz_title_entry
water	296:87	0:0	16	?
water	296:89	0:0	16	psz_title_entry
water	296:105	0:0	16	:
water	296:107	0:0	16	psz_current_input_name
water	296:130	0:0	16	)
op	296:134	0:0	14	!=
op	296:137	0:0	14	-
water	296:138	0:0	14	1
stmts	297:20	331:20	13	
water	297:20	0:0	14	{
decl	298:24	298:90	14	char	*psz_mrl
op	298:38	0:0	14	=
call	298:40	298:89	15	ProcessMRL
arg	298:52	298:60	16	psz_href
water	298:52	0:0	17	psz_href
arg	298:62	298:89	16	p_demux->p_sys->psz_prefix
water	298:62	0:0	17	p_demux
op	298:69	0:0	17	->
water	298:71	0:0	17	p_sys
op	298:76	0:0	17	->
water	298:78	0:0	17	psz_prefix
water	299:24	0:0	14	p_entry
op	299:32	0:0	14	=
call	299:34	300:129	14	input_item_NewExt
arg	299:53	299:60	15	psz_mrl
water	299:53	0:0	16	psz_mrl
arg	299:62	299:70	15	psz_name
water	299:62	0:0	16	psz_name
arg	300:53	300:62	15	i_options
water	300:53	0:0	16	i_options
arg	300:64	300:98	15	(constchar*const*)ppsz_options
water	300:64	0:0	16	(
water	300:65	0:0	16	const
water	300:71	0:0	16	char
op	300:76	0:0	16	*
water	300:78	0:0	16	const
op	300:84	0:0	16	*
water	300:85	0:0	16	)
water	300:86	0:0	16	ppsz_options
arg	300:100	300:124	15	VLC_INPUT_OPTION_TRUSTED
water	300:100	0:0	16	VLC_INPUT_OPTION_TRUSTED
arg	300:126	300:129	15	-1
op	300:126	0:0	16	-
water	300:127	0:0	16	1
water	300:130	0:0	14	;
call	301:24	301:39	14	free
arg	301:30	301:39	15	psz_name
water	301:30	0:0	16	psz_name
water	301:40	0:0	14	;
call	302:24	302:38	14	free
arg	302:30	302:38	15	psz_mrl
water	302:30	0:0	16	psz_mrl
water	302:39	0:0	14	;
call	303:24	303:73	14	input_item_CopyOptions
arg	303:48	303:63	15	p_current_input
water	303:48	0:0	16	p_current_input
arg	303:65	303:73	15	p_entry
water	303:65	0:0	16	p_entry
water	303:74	0:0	14	;
while	304:24	308:24	14	(i_options)
cond	304:31	304:31	15	i_options
water	304:31	0:0	16	i_options
stmts	305:24	308:24	15	
water	305:24	0:0	16	{
water	306:28	0:0	16	psz_name
op	306:37	0:0	16	=
water	306:39	0:0	16	ppsz_options
op	306:51	0:0	16	[
op	306:52	0:0	16	--
water	306:54	0:0	16	i_options
op	306:63	0:0	16	]
water	306:64	0:0	16	;
call	307:28	307:43	16	free
arg	307:34	307:43	17	psz_name
water	307:34	0:0	18	psz_name
water	307:44	0:0	16	;
water	308:24	0:0	16	}
water	309:24	0:0	14	psz_name
op	309:33	0:0	14	=
water	309:35	0:0	14	NULL
water	309:39	0:0	14	;
if	310:24	310:93	14	(psz_title_entry)
cond	310:28	310:28	15	psz_title_entry
water	310:28	0:0	16	psz_title_entry
stmts	310:46	310:93	15	
call	310:46	310:92	16	input_item_SetTitle
arg	310:67	310:74	17	p_entry
water	310:67	0:0	18	p_entry
arg	310:76	310:92	17	psz_title_entry
water	310:76	0:0	18	psz_title_entry
water	310:93	0:0	16	;
if	311:24	311:96	14	(psz_artist_entry)
cond	311:28	311:28	15	psz_artist_entry
water	311:28	0:0	16	psz_artist_entry
stmts	311:47	311:96	15	
call	311:47	311:95	16	input_item_SetArtist
arg	311:69	311:76	17	p_entry
water	311:69	0:0	18	p_entry
arg	311:78	311:95	17	psz_artist_entry
water	311:78	0:0	18	psz_artist_entry
water	311:96	0:0	16	;
if	312:24	312:105	14	(psz_copyright_entry)
cond	312:28	312:28	15	psz_copyright_entry
water	312:28	0:0	16	psz_copyright_entry
stmts	312:50	312:105	15	
call	312:50	312:104	16	input_item_SetCopyright
arg	312:75	312:82	17	p_entry
water	312:75	0:0	18	p_entry
arg	312:84	312:104	17	psz_copyright_entry
water	312:84	0:0	18	psz_copyright_entry
water	312:105	0:0	16	;
if	313:24	313:97	14	(psz_moreinfo_entry)
cond	313:28	313:28	15	psz_moreinfo_entry
water	313:28	0:0	16	psz_moreinfo_entry
stmts	313:49	313:97	15	
call	313:49	313:96	16	input_item_SetURL
arg	313:68	313:75	17	p_entry
water	313:68	0:0	18	p_entry
arg	313:77	313:96	17	psz_moreinfo_entry
water	313:77	0:0	18	psz_moreinfo_entry
water	313:97	0:0	16	;
if	314:24	314:105	14	(psz_abstract_entry)
cond	314:28	314:28	15	psz_abstract_entry
water	314:28	0:0	16	psz_abstract_entry
stmts	314:49	314:105	15	
call	314:49	314:104	16	input_item_SetDescription
arg	314:76	314:83	17	p_entry
water	314:76	0:0	18	p_entry
arg	314:85	314:104	17	psz_abstract_entry
water	314:85	0:0	18	psz_abstract_entry
water	314:105	0:0	16	;
water	315:24	0:0	14	i_inserted_entries
op	315:42	0:0	14	++
water	315:44	0:0	14	;
if	316:24	320:24	14	(p_sys -> b_skip_ads && b_skip_entry)
cond	316:28	316:49	15	p_sys -> b_skip_ads && b_skip_entry
water	316:28	0:0	16	p_sys
op	316:33	0:0	16	->
water	316:35	0:0	16	b_skip_ads
op	316:46	0:0	16	&&
water	316:49	0:0	16	b_skip_entry
stmts	317:24	320:24	15	
water	317:24	0:0	16	{
water	319:28	0:0	16	uniq_entry_ad_backup
op	319:49	0:0	16	=
water	319:51	0:0	16	p_entry
water	319:58	0:0	16	;
water	320:24	0:0	16	}
else	321:24	330:24	14
stmts	322:24	330:24	15	
water	322:24	0:0	16	{
if	323:28	327:28	16	(uniq_entry_ad_backup != NULL)
cond	323:32	323:56	17	uniq_entry_ad_backup != NULL
water	323:32	0:0	18	uniq_entry_ad_backup
op	323:53	0:0	18	!=
water	323:56	0:0	18	NULL
stmts	324:28	327:28	17	
water	324:28	0:0	18	{
call	325:32	325:68	18	vlc_gc_decref
arg	325:47	325:68	19	uniq_entry_ad_backup
water	325:47	0:0	20	uniq_entry_ad_backup
water	325:69	0:0	18	;
water	326:32	0:0	18	uniq_entry_ad_backup
op	326:53	0:0	18	=
water	326:55	0:0	18	NULL
water	326:59	0:0	18	;
water	327:28	0:0	18	}
call	328:28	328:76	16	input_item_node_AppendItem
arg	328:56	328:66	17	p_subitems
water	328:56	0:0	18	p_subitems
arg	328:68	328:76	17	p_entry
water	328:68	0:0	18	p_entry
water	328:77	0:0	16	;
call	329:28	329:51	16	vlc_gc_decref
arg	329:43	329:51	17	p_entry
water	329:43	0:0	18	p_entry
water	329:52	0:0	16	;
water	330:24	0:0	16	}
water	331:20	0:0	14	}
call	332:20	332:49	12	free
arg	332:26	332:49	13	psz_current_input_name
water	332:26	0:0	14	psz_current_input_name
water	332:50	0:0	12	;
water	333:16	0:0	12	}
water	334:35	0:0	10	;
call	335:16	335:35	10	FREENULL
arg	335:26	335:35	11	psz_href
water	335:26	0:0	12	psz_href
water	335:36	0:0	10	;
call	336:16	336:42	10	FREENULL
arg	336:26	336:42	11	psz_title_entry
water	336:26	0:0	12	psz_title_entry
water	336:43	0:0	10	;
call	337:16	337:41	10	FREENULL
arg	337:26	337:41	11	psz_base_entry
water	337:26	0:0	12	psz_base_entry
water	337:42	0:0	10	;
call	338:16	338:43	10	FREENULL
arg	338:26	338:43	11	psz_artist_entry
water	338:26	0:0	12	psz_artist_entry
water	338:44	0:0	10	;
call	339:16	339:46	10	FREENULL
arg	339:26	339:46	11	psz_copyright_entry
water	339:26	0:0	12	psz_copyright_entry
water	339:47	0:0	10	;
call	340:16	340:45	10	FREENULL
arg	340:26	340:45	11	psz_moreinfo_entry
water	340:26	0:0	12	psz_moreinfo_entry
water	340:46	0:0	10	;
call	341:16	341:45	10	FREENULL
arg	341:26	341:45	11	psz_abstract_entry
water	341:26	0:0	12	psz_abstract_entry
water	341:46	0:0	10	;
water	342:16	0:0	10	b_entry
op	342:24	0:0	10	=
water	342:26	0:0	10	false
water	342:31	0:0	10	;
water	343:12	0:0	10	}
else	344:12	363:12	6
stmts	344:17	363:12	7	
if	344:17	363:12	8	(!strncasecmp (psz_parse ,"<Entry" ,6 ))
cond	344:21	344:58	9	!strncasecmp (psz_parse ,"<Entry" ,6 )
op	344:21	0:0	10	!
call	344:22	344:58	10	strncasecmp
arg	344:35	344:44	11	psz_parse
water	344:35	0:0	12	psz_parse
arg	344:46	344:54	11	"<Entry"
water	344:46	0:0	12	"<Entry"
arg	344:56	344:58	11	6
water	344:56	0:0	12	6
stmts	345:12	363:12	9	
water	345:12	0:0	10	{
decl	346:16	346:36	10	char	*psz_clientskip
water	347:16	0:0	10	psz_parse
op	347:25	0:0	10	+=
water	347:27	0:0	10	6
water	347:28	0:0	10	;
if	348:16	352:16	10	(b_entry)
cond	348:20	348:20	11	b_entry
water	348:20	0:0	12	b_entry
stmts	349:16	352:16	11	
water	349:16	0:0	12	{
call	350:20	350:75	12	msg_Err
arg	350:29	350:36	13	p_demux
water	350:29	0:0	14	p_demux
arg	350:38	350:75	13	"We already are in an entry section"
water	350:38	0:0	14	"We already are in an entry section"
water	350:76	0:0	12	;
continue	351:20	351:28	12	
water	352:16	0:0	12	}
water	353:16	0:0	10	i_entry_count
op	353:30	0:0	10	+=
water	353:33	0:0	10	1
water	353:34	0:0	10	;
water	354:16	0:0	10	b_entry
op	354:24	0:0	10	=
water	354:26	0:0	10	true
water	354:30	0:0	10	;
water	355:16	0:0	10	psz_clientskip
op	355:31	0:0	10	=
call	355:33	355:76	10	strcasestr
arg	355:45	355:54	11	psz_parse
water	355:45	0:0	12	psz_parse
arg	355:56	355:76	11	"clientskip=\"no\""
water	355:56	0:0	12	"clientskip=\"no\""
water	355:77	0:0	10	;
water	356:16	0:0	10	psz_parse
op	356:26	0:0	10	=
call	356:28	356:55	10	strcasestr
arg	356:40	356:49	11	psz_parse
water	356:40	0:0	12	psz_parse
arg	356:51	356:55	11	">"
water	356:51	0:0	12	">"
water	356:56	0:0	10	;
water	358:16	0:0	10	b_skip_entry
op	358:29	0:0	10	=
water	358:31	0:0	10	(
water	358:32	0:0	10	NULL
op	358:37	0:0	10	!=
water	358:40	0:0	10	psz_clientskip
water	358:54	0:0	10	)
op	358:56	0:0	10	&&
water	358:59	0:0	10	(
water	358:60	0:0	10	psz_clientskip
op	358:75	0:0	10	<
water	358:77	0:0	10	psz_parse
water	358:86	0:0	10	)
water	358:87	0:0	10	;
call	360:16	360:33	10	FREENULL
arg	360:25	360:33	11	psz_href
water	360:25	0:0	12	psz_href
water	360:34	0:0	10	;
water	361:16	0:0	10	i_starttime
op	361:28	0:0	10	=
water	361:30	0:0	10	0
water	361:31	0:0	10	;
water	362:16	0:0	10	i_duration
op	362:27	0:0	10	=
water	362:29	0:0	10	0
water	362:30	0:0	10	;
water	363:12	0:0	10	}
else	364:12	421:12	6
stmts	364:17	421:12	7	
if	364:17	421:12	8	(!strncasecmp (psz_parse ,"<Ref " ,5 ))
cond	364:21	364:57	9	!strncasecmp (psz_parse ,"<Ref " ,5 )
op	364:21	0:0	10	!
call	364:22	364:57	10	strncasecmp
arg	364:35	364:44	11	psz_parse
water	364:35	0:0	12	psz_parse
arg	364:46	364:53	11	"<Ref "
water	364:46	0:0	12	"<Ref "
arg	364:55	364:57	11	5
water	364:55	0:0	12	5
stmts	365:12	421:12	9	
water	365:12	0:0	10	{
water	366:16	0:0	10	psz_parse
op	366:26	0:0	10	=
call	366:28	366:64	10	SkipBlanks
arg	366:39	366:50	11	psz_parse+5
water	366:39	0:0	12	psz_parse
op	366:48	0:0	12	+
water	366:49	0:0	12	5
arg	366:52	366:64	11	(unsigned)-1
water	366:52	0:0	12	(
water	366:53	0:0	12	unsigned
water	366:61	0:0	12	)
op	366:62	0:0	12	-
water	366:63	0:0	12	1
water	366:65	0:0	10	;
if	367:16	371:16	10	(! b_entry)
cond	367:20	367:21	11	! b_entry
op	367:20	0:0	12	!
water	367:21	0:0	12	b_entry
stmts	368:16	371:16	11	
water	368:16	0:0	12	{
call	369:20	369:71	12	msg_Err
arg	369:29	369:36	13	p_demux
water	369:29	0:0	14	p_demux
arg	369:38	369:71	13	"A ref outside an entry section"
water	369:38	0:0	14	"A ref outside an entry section"
water	369:72	0:0	12	;
continue	370:20	370:28	12	
water	371:16	0:0	12	}
if	372:16	417:16	10	(!strncasecmp (psz_parse ,"HREF" ,4 ))
cond	372:20	372:55	11	!strncasecmp (psz_parse ,"HREF" ,4 )
op	372:20	0:0	12	!
call	372:21	372:55	12	strncasecmp
arg	372:34	372:43	13	psz_parse
water	372:34	0:0	14	psz_parse
arg	372:45	372:51	13	"HREF"
water	372:45	0:0	14	"HREF"
arg	372:53	372:55	13	4
water	372:53	0:0	14	4
stmts	373:16	417:16	11	
water	373:16	0:0	12	{
if	374:20	415:20	12	(( psz_parse =strcasestr (psz_parse ,"\"" ) ))
cond	374:24	374:68	13	( psz_parse =strcasestr (psz_parse ,"\"" ) )
water	374:24	0:0	14	(
water	374:26	0:0	14	psz_parse
op	374:36	0:0	14	=
call	374:38	374:66	14	strcasestr
arg	374:50	374:59	15	psz_parse
water	374:50	0:0	16	psz_parse
arg	374:61	374:66	15	"\""
water	374:61	0:0	16	"\""
water	374:68	0:0	14	)
stmts	375:20	415:20	13	
water	375:20	0:0	14	{
water	376:24	0:0	14	psz_backup
op	376:35	0:0	14	=
op	376:37	0:0	14	++
water	376:39	0:0	14	psz_parse
water	376:48	0:0	14	;
water	377:24	0:0	14	psz_backup
op	377:35	0:0	14	=
call	377:37	377:72	14	SkipBlanks
arg	377:48	377:58	15	psz_backup
water	377:48	0:0	16	psz_backup
arg	377:60	377:72	15	(unsigned)-1
water	377:60	0:0	16	(
water	377:61	0:0	16	unsigned
water	377:69	0:0	16	)
op	377:70	0:0	16	-
water	377:71	0:0	16	1
water	377:73	0:0	14	;
if	378:24	413:24	14	(( psz_parse =strcasestr (psz_parse ,"\"" ) ))
cond	378:28	378:72	15	( psz_parse =strcasestr (psz_parse ,"\"" ) )
water	378:28	0:0	16	(
water	378:30	0:0	16	psz_parse
op	378:40	0:0	16	=
call	378:42	378:70	16	strcasestr
arg	378:54	378:63	17	psz_parse
water	378:54	0:0	18	psz_parse
arg	378:65	378:70	17	"\""
water	378:65	0:0	18	"\""
water	378:72	0:0	16	)
stmts	379:24	413:24	15	
water	379:24	0:0	16	{
decl	380:28	380:41	16	char	*psz_tmp
water	381:28	0:0	16	i_strlen
op	381:37	0:0	16	=
water	381:39	0:0	16	psz_parse
op	381:48	0:0	16	-
water	381:49	0:0	16	psz_backup
water	381:59	0:0	16	;
if	382:28	382:55	16	(i_strlen < 1)
cond	382:32	382:43	17	i_strlen < 1
water	382:32	0:0	18	i_strlen
op	382:41	0:0	18	<
water	382:43	0:0	18	1
stmts	382:47	382:55	17	
continue	382:47	382:55	18	
if	383:28	401:28	16	(psz_href)
cond	383:32	383:32	17	psz_href
water	383:32	0:0	18	psz_href
stmts	384:28	401:28	17	
water	384:28	0:0	18	{
decl	387:32	387:60	18	input_item_t	*p_entry
op	387:54	0:0	18	=
water	387:56	0:0	18	NULL
decl	388:32	388:86	18	char	*psz_name
op	388:47	0:0	18	=
call	388:49	388:85	19	input_item_GetName
arg	388:69	388:85	20	p_current_input
water	388:69	0:0	21	p_current_input
decl	389:32	389:98	18	char	*psz_mrl
op	389:46	0:0	18	=
call	389:48	389:97	19	ProcessMRL
arg	389:60	389:68	20	psz_href
water	389:60	0:0	21	psz_href
arg	389:70	389:97	20	p_demux->p_sys->psz_prefix
water	389:70	0:0	21	p_demux
op	389:77	0:0	21	->
water	389:79	0:0	21	p_sys
op	389:84	0:0	21	->
water	389:86	0:0	21	psz_prefix
water	390:32	0:0	18	p_entry
op	390:40	0:0	18	=
call	390:42	391:91	18	input_item_NewExt
arg	390:61	390:68	19	psz_mrl
water	390:61	0:0	20	psz_mrl
arg	390:70	390:78	19	psz_name
water	390:70	0:0	20	psz_name
arg	391:53	391:54	19	0
water	391:53	0:0	20	0
arg	391:56	391:60	19	NULL
water	391:56	0:0	20	NULL
arg	391:62	391:86	19	VLC_INPUT_OPTION_TRUSTED
water	391:62	0:0	20	VLC_INPUT_OPTION_TRUSTED
arg	391:88	391:91	19	-1
op	391:88	0:0	20	-
water	391:89	0:0	20	1
water	391:92	0:0	18	;
call	392:32	392:46	18	free
arg	392:38	392:46	19	psz_mrl
water	392:38	0:0	20	psz_mrl
water	392:47	0:0	18	;
call	393:32	393:81	18	input_item_CopyOptions
arg	393:56	393:71	19	p_current_input
water	393:56	0:0	20	p_current_input
arg	393:73	393:81	19	p_entry
water	393:73	0:0	20	p_entry
water	393:82	0:0	18	;
if	394:32	394:101	18	(psz_title_entry)
cond	394:36	394:36	19	psz_title_entry
water	394:36	0:0	20	psz_title_entry
stmts	394:54	394:101	19	
call	394:54	394:100	20	input_item_SetTitle
arg	394:75	394:82	21	p_entry
water	394:75	0:0	22	p_entry
arg	394:84	394:100	21	psz_title_entry
water	394:84	0:0	22	psz_title_entry
water	394:101	0:0	20	;
if	395:32	395:104	18	(psz_artist_entry)
cond	395:36	395:36	19	psz_artist_entry
water	395:36	0:0	20	psz_artist_entry
stmts	395:55	395:104	19	
call	395:55	395:103	20	input_item_SetArtist
arg	395:77	395:84	21	p_entry
water	395:77	0:0	22	p_entry
arg	395:86	395:103	21	psz_artist_entry
water	395:86	0:0	22	psz_artist_entry
water	395:104	0:0	20	;
if	396:32	396:113	18	(psz_copyright_entry)
cond	396:36	396:36	19	psz_copyright_entry
water	396:36	0:0	20	psz_copyright_entry
stmts	396:58	396:113	19	
call	396:58	396:112	20	input_item_SetCopyright
arg	396:83	396:90	21	p_entry
water	396:83	0:0	22	p_entry
arg	396:92	396:112	21	psz_copyright_entry
water	396:92	0:0	22	psz_copyright_entry
water	396:113	0:0	20	;
if	397:32	397:105	18	(psz_moreinfo_entry)
cond	397:36	397:36	19	psz_moreinfo_entry
water	397:36	0:0	20	psz_moreinfo_entry
stmts	397:57	397:105	19	
call	397:57	397:104	20	input_item_SetURL
arg	397:76	397:83	21	p_entry
water	397:76	0:0	22	p_entry
arg	397:85	397:104	21	psz_moreinfo_entry
water	397:85	0:0	22	psz_moreinfo_entry
water	397:105	0:0	20	;
if	398:32	398:113	18	(psz_abstract_entry)
cond	398:36	398:36	19	psz_abstract_entry
water	398:36	0:0	20	psz_abstract_entry
stmts	398:57	398:113	19	
call	398:57	398:112	20	input_item_SetDescription
arg	398:84	398:91	21	p_entry
water	398:84	0:0	22	p_entry
arg	398:93	398:112	21	psz_abstract_entry
water	398:93	0:0	22	psz_abstract_entry
water	398:113	0:0	20	;
call	399:32	399:80	18	input_item_node_AppendItem
arg	399:60	399:70	19	p_subitems
water	399:60	0:0	20	p_subitems
arg	399:72	399:80	19	p_entry
water	399:72	0:0	20	p_entry
water	399:81	0:0	18	;
call	400:32	400:55	18	vlc_gc_decref
arg	400:47	400:55	19	p_entry
water	400:47	0:0	20	p_entry
water	400:56	0:0	18	;
water	401:28	0:0	18	}
call	402:28	402:43	16	free
arg	402:34	402:43	17	psz_href
water	402:34	0:0	18	psz_href
water	402:44	0:0	16	;
water	403:28	0:0	16	psz_href
op	403:37	0:0	16	=
call	403:39	403:59	16	xmalloc
arg	403:48	403:59	17	i_strlen+1
water	403:48	0:0	18	i_strlen
op	403:57	0:0	18	+
water	403:58	0:0	18	1
water	403:60	0:0	16	;
call	404:28	404:67	16	memcpy
arg	404:36	404:44	17	psz_href
water	404:36	0:0	18	psz_href
arg	404:46	404:56	17	psz_backup
water	404:46	0:0	18	psz_backup
arg	404:58	404:67	17	i_strlen
water	404:58	0:0	18	i_strlen
water	404:68	0:0	16	;
water	405:28	0:0	16	psz_href
op	405:36	0:0	16	[
water	405:37	0:0	16	i_strlen
op	405:45	0:0	16	]
op	405:47	0:0	16	=
water	405:49	0:0	16	'\0'
water	405:53	0:0	16	;
water	406:28	0:0	16	psz_tmp
op	406:36	0:0	16	=
water	406:38	0:0	16	psz_href
op	406:47	0:0	16	+
water	406:49	0:0	16	(
water	406:50	0:0	16	i_strlen
op	406:58	0:0	16	-
water	406:59	0:0	16	1
water	406:60	0:0	16	)
water	406:61	0:0	16	;
while	407:28	412:28	16	(psz_tmp >= psz_href && ( * psz_tmp == '\r' || * psz_tmp == '\n' ))
cond	407:35	408:72	17	psz_tmp >= psz_href && ( * psz_tmp == '\r' || * psz_tmp == '\n' )
water	407:35	0:0	18	psz_tmp
op	407:43	0:0	18	>=
water	407:46	0:0	18	psz_href
op	407:55	0:0	18	&&
water	408:33	0:0	18	(
op	408:35	0:0	18	*
water	408:36	0:0	18	psz_tmp
op	408:44	0:0	18	==
water	408:47	0:0	18	'\r'
op	408:52	0:0	18	||
op	408:55	0:0	18	*
water	408:56	0:0	18	psz_tmp
op	408:64	0:0	18	==
water	408:67	0:0	18	'\n'
water	408:72	0:0	18	)
stmts	409:28	412:28	17	
water	409:28	0:0	18	{
op	410:32	0:0	18	*
water	410:33	0:0	18	psz_tmp
op	410:41	0:0	18	=
water	410:43	0:0	18	'\0'
water	410:47	0:0	18	;
water	411:32	0:0	18	psz_tmp
op	411:39	0:0	18	++
water	411:41	0:0	18	;
water	412:28	0:0	18	}
water	413:24	0:0	16	}
else	414:24	414:37	14
stmts	414:29	414:37	15	
continue	414:29	414:37	16	
water	415:20	0:0	14	}
else	416:20	416:33	12
stmts	416:25	416:33	13	
continue	416:25	416:33	14	
water	417:16	0:0	12	}
if	418:16	419:31	10	(( psz_parse =strcasestr (psz_parse ,">" ) ))
cond	418:20	418:63	11	( psz_parse =strcasestr (psz_parse ,">" ) )
water	418:20	0:0	12	(
water	418:22	0:0	12	psz_parse
op	418:32	0:0	12	=
call	418:34	418:61	12	strcasestr
arg	418:46	418:55	13	psz_parse
water	418:46	0:0	14	psz_parse
arg	418:57	418:61	13	">"
water	418:57	0:0	14	">"
water	418:63	0:0	12	)
stmts	419:20	419:31	11	
water	419:20	0:0	12	psz_parse
op	419:29	0:0	12	++
water	419:31	0:0	12	;
else	420:16	420:29	10
stmts	420:21	420:29	11	
continue	420:21	420:29	12	
water	421:12	0:0	10	}
else	422:12	448:12	6
stmts	422:17	448:12	7	
if	422:17	448:12	8	(!strncasecmp (psz_parse ,"<starttime " ,11 ))
cond	422:21	422:64	9	!strncasecmp (psz_parse ,"<starttime " ,11 )
op	422:21	0:0	10	!
call	422:22	422:64	10	strncasecmp
arg	422:35	422:44	11	psz_parse
water	422:35	0:0	12	psz_parse
arg	422:46	422:59	11	"<starttime "
water	422:46	0:0	12	"<starttime "
arg	422:61	422:64	11	11
water	422:61	0:0	12	11
stmts	423:12	448:12	9	
water	423:12	0:0	10	{
water	424:16	0:0	10	psz_parse
op	424:26	0:0	10	=
call	424:28	424:65	10	SkipBlanks
arg	424:39	424:51	11	psz_parse+11
water	424:39	0:0	12	psz_parse
op	424:48	0:0	12	+
water	424:49	0:0	12	11
arg	424:53	424:65	11	(unsigned)-1
water	424:53	0:0	12	(
water	424:54	0:0	12	unsigned
water	424:62	0:0	12	)
op	424:63	0:0	12	-
water	424:64	0:0	12	1
water	424:66	0:0	10	;
if	425:16	429:16	10	(! b_entry)
cond	425:20	425:21	11	! b_entry
op	425:20	0:0	12	!
water	425:21	0:0	12	b_entry
stmts	426:16	429:16	11	
water	426:16	0:0	12	{
call	427:20	427:75	12	msg_Err
arg	427:29	427:36	13	p_demux
water	427:29	0:0	14	p_demux
arg	427:38	427:75	13	"starttime outside an entry section"
water	427:38	0:0	14	"starttime outside an entry section"
water	427:76	0:0	12	;
continue	428:20	428:28	12	
water	429:16	0:0	12	}
if	430:16	444:16	10	(!strncasecmp (psz_parse ,"value" ,5 ))
cond	430:20	430:56	11	!strncasecmp (psz_parse ,"value" ,5 )
op	430:20	0:0	12	!
call	430:21	430:56	12	strncasecmp
arg	430:34	430:43	13	psz_parse
water	430:34	0:0	14	psz_parse
arg	430:45	430:52	13	"value"
water	430:45	0:0	14	"value"
arg	430:54	430:56	13	5
water	430:54	0:0	14	5
stmts	431:16	444:16	11	
water	431:16	0:0	12	{
if	432:20	442:20	12	(( psz_parse =strcasestr (psz_parse ,"\"" ) ))
cond	432:24	432:68	13	( psz_parse =strcasestr (psz_parse ,"\"" ) )
water	432:24	0:0	14	(
water	432:26	0:0	14	psz_parse
op	432:36	0:0	14	=
call	432:38	432:66	14	strcasestr
arg	432:50	432:59	15	psz_parse
water	432:50	0:0	16	psz_parse
arg	432:61	432:66	15	"\""
water	432:61	0:0	16	"\""
water	432:68	0:0	14	)
stmts	433:20	442:20	13	
water	433:20	0:0	14	{
water	434:24	0:0	14	psz_backup
op	434:35	0:0	14	=
op	434:37	0:0	14	++
water	434:39	0:0	14	psz_parse
water	434:48	0:0	14	;
if	435:24	440:24	14	(( psz_parse =strcasestr (psz_parse ,"\"" ) ))
cond	435:28	435:72	15	( psz_parse =strcasestr (psz_parse ,"\"" ) )
water	435:28	0:0	16	(
water	435:30	0:0	16	psz_parse
op	435:40	0:0	16	=
call	435:42	435:70	16	strcasestr
arg	435:54	435:63	17	psz_parse
water	435:54	0:0	18	psz_parse
arg	435:65	435:70	17	"\""
water	435:65	0:0	18	"\""
water	435:72	0:0	16	)
stmts	436:24	440:24	15	
water	436:24	0:0	16	{
water	437:28	0:0	16	i_strlen
op	437:37	0:0	16	=
water	437:39	0:0	16	psz_parse
op	437:48	0:0	16	-
water	437:49	0:0	16	psz_backup
water	437:59	0:0	16	;
if	438:28	438:55	16	(i_strlen < 1)
cond	438:32	438:43	17	i_strlen < 1
water	438:32	0:0	18	i_strlen
op	438:41	0:0	18	<
water	438:43	0:0	18	1
stmts	438:47	438:55	17	
continue	438:47	438:55	18	
water	439:28	0:0	16	i_starttime
op	439:40	0:0	16	=
call	439:42	439:72	16	ParseTime
arg	439:52	439:62	17	psz_backup
water	439:52	0:0	18	psz_backup
arg	439:64	439:72	17	i_strlen
water	439:64	0:0	18	i_strlen
water	439:73	0:0	16	;
water	440:24	0:0	16	}
else	441:24	441:37	14
stmts	441:29	441:37	15	
continue	441:29	441:37	16	
water	442:20	0:0	14	}
else	443:20	443:33	12
stmts	443:25	443:33	13	
continue	443:25	443:33	14	
water	444:16	0:0	12	}
if	445:16	446:31	10	(( psz_parse =strcasestr (psz_parse ,">" ) ))
cond	445:20	445:63	11	( psz_parse =strcasestr (psz_parse ,">" ) )
water	445:20	0:0	12	(
water	445:22	0:0	12	psz_parse
op	445:32	0:0	12	=
call	445:34	445:61	12	strcasestr
arg	445:46	445:55	13	psz_parse
water	445:46	0:0	14	psz_parse
arg	445:57	445:61	13	">"
water	445:57	0:0	14	">"
water	445:63	0:0	12	)
stmts	446:20	446:31	11	
water	446:20	0:0	12	psz_parse
op	446:29	0:0	12	++
water	446:31	0:0	12	;
else	447:16	447:29	10
stmts	447:21	447:29	11	
continue	447:21	447:29	12	
water	448:12	0:0	10	}
else	449:12	475:12	6
stmts	449:17	475:12	7	
if	449:17	475:12	8	(!strncasecmp (psz_parse ,"<duration " ,11 ))
cond	449:21	449:63	9	!strncasecmp (psz_parse ,"<duration " ,11 )
op	449:21	0:0	10	!
call	449:22	449:63	10	strncasecmp
arg	449:35	449:44	11	psz_parse
water	449:35	0:0	12	psz_parse
arg	449:46	449:58	11	"<duration "
water	449:46	0:0	12	"<duration "
arg	449:60	449:63	11	11
water	449:60	0:0	12	11
stmts	450:12	475:12	9	
water	450:12	0:0	10	{
water	451:16	0:0	10	psz_parse
op	451:26	0:0	10	=
call	451:28	451:64	10	SkipBlanks
arg	451:39	451:50	11	psz_parse+5
water	451:39	0:0	12	psz_parse
op	451:48	0:0	12	+
water	451:49	0:0	12	5
arg	451:52	451:64	11	(unsigned)-1
water	451:52	0:0	12	(
water	451:53	0:0	12	unsigned
water	451:61	0:0	12	)
op	451:62	0:0	12	-
water	451:63	0:0	12	1
water	451:65	0:0	10	;
if	452:16	456:16	10	(! b_entry)
cond	452:20	452:21	11	! b_entry
op	452:20	0:0	12	!
water	452:21	0:0	12	b_entry
stmts	453:16	456:16	11	
water	453:16	0:0	12	{
call	454:20	454:74	12	msg_Err
arg	454:29	454:36	13	p_demux
water	454:29	0:0	14	p_demux
arg	454:38	454:74	13	"duration outside an entry section"
water	454:38	0:0	14	"duration outside an entry section"
water	454:75	0:0	12	;
continue	455:20	455:28	12	
water	456:16	0:0	12	}
if	457:16	471:16	10	(!strncasecmp (psz_parse ,"value" ,5 ))
cond	457:20	457:56	11	!strncasecmp (psz_parse ,"value" ,5 )
op	457:20	0:0	12	!
call	457:21	457:56	12	strncasecmp
arg	457:34	457:43	13	psz_parse
water	457:34	0:0	14	psz_parse
arg	457:45	457:52	13	"value"
water	457:45	0:0	14	"value"
arg	457:54	457:56	13	5
water	457:54	0:0	14	5
stmts	458:16	471:16	11	
water	458:16	0:0	12	{
if	459:20	469:20	12	(( psz_parse =strcasestr (psz_parse ,"\"" ) ))
cond	459:24	459:68	13	( psz_parse =strcasestr (psz_parse ,"\"" ) )
water	459:24	0:0	14	(
water	459:26	0:0	14	psz_parse
op	459:36	0:0	14	=
call	459:38	459:66	14	strcasestr
arg	459:50	459:59	15	psz_parse
water	459:50	0:0	16	psz_parse
arg	459:61	459:66	15	"\""
water	459:61	0:0	16	"\""
water	459:68	0:0	14	)
stmts	460:20	469:20	13	
water	460:20	0:0	14	{
water	461:24	0:0	14	psz_backup
op	461:35	0:0	14	=
op	461:37	0:0	14	++
water	461:39	0:0	14	psz_parse
water	461:48	0:0	14	;
if	462:24	467:24	14	(( psz_parse =strcasestr (psz_parse ,"\"" ) ))
cond	462:28	462:72	15	( psz_parse =strcasestr (psz_parse ,"\"" ) )
water	462:28	0:0	16	(
water	462:30	0:0	16	psz_parse
op	462:40	0:0	16	=
call	462:42	462:70	16	strcasestr
arg	462:54	462:63	17	psz_parse
water	462:54	0:0	18	psz_parse
arg	462:65	462:70	17	"\""
water	462:65	0:0	18	"\""
water	462:72	0:0	16	)
stmts	463:24	467:24	15	
water	463:24	0:0	16	{
water	464:28	0:0	16	i_strlen
op	464:37	0:0	16	=
water	464:39	0:0	16	psz_parse
op	464:48	0:0	16	-
water	464:49	0:0	16	psz_backup
water	464:59	0:0	16	;
if	465:28	465:55	16	(i_strlen < 1)
cond	465:32	465:43	17	i_strlen < 1
water	465:32	0:0	18	i_strlen
op	465:41	0:0	18	<
water	465:43	0:0	18	1
stmts	465:47	465:55	17	
continue	465:47	465:55	18	
water	466:28	0:0	16	i_duration
op	466:39	0:0	16	=
call	466:41	466:71	16	ParseTime
arg	466:51	466:61	17	psz_backup
water	466:51	0:0	18	psz_backup
arg	466:63	466:71	17	i_strlen
water	466:63	0:0	18	i_strlen
water	466:72	0:0	16	;
water	467:24	0:0	16	}
else	468:24	468:37	14
stmts	468:29	468:37	15	
continue	468:29	468:37	16	
water	469:20	0:0	14	}
else	470:20	470:33	12
stmts	470:25	470:33	13	
continue	470:25	470:33	14	
water	471:16	0:0	12	}
if	472:16	473:31	10	(( psz_parse =strcasestr (psz_parse ,">" ) ))
cond	472:20	472:63	11	( psz_parse =strcasestr (psz_parse ,">" ) )
water	472:20	0:0	12	(
water	472:22	0:0	12	psz_parse
op	472:32	0:0	12	=
call	472:34	472:61	12	strcasestr
arg	472:46	472:55	13	psz_parse
water	472:46	0:0	14	psz_parse
arg	472:57	472:61	13	">"
water	472:57	0:0	14	">"
water	472:63	0:0	12	)
stmts	473:20	473:31	11	
water	473:20	0:0	12	psz_parse
op	473:29	0:0	12	++
water	473:31	0:0	12	;
else	474:16	474:29	10
stmts	474:21	474:29	11	
continue	474:21	474:29	12	
water	475:12	0:0	10	}
else	476:12	490:12	6
stmts	476:17	490:12	7	
if	476:17	490:12	8	(!strncasecmp (psz_parse ,"</ASX" ,5 ))
cond	476:21	476:57	9	!strncasecmp (psz_parse ,"</ASX" ,5 )
op	476:21	0:0	10	!
call	476:22	476:57	10	strncasecmp
arg	476:35	476:44	11	psz_parse
water	476:35	0:0	12	psz_parse
arg	476:46	476:53	11	"</ASX"
water	476:46	0:0	12	"</ASX"
arg	476:55	476:57	11	5
water	476:55	0:0	12	5
stmts	477:12	490:12	9	
water	477:12	0:0	10	{
if	478:16	478:89	10	(psz_title_asx)
cond	478:20	478:20	11	psz_title_asx
water	478:20	0:0	12	psz_title_asx
stmts	478:36	478:89	11	
call	478:36	478:88	12	input_item_SetTitle
arg	478:57	478:72	13	p_current_input
water	478:57	0:0	14	p_current_input
arg	478:74	478:88	13	psz_title_asx
water	478:74	0:0	14	psz_title_asx
water	478:89	0:0	12	;
if	479:16	479:92	10	(psz_artist_asx)
cond	479:20	479:20	11	psz_artist_asx
water	479:20	0:0	12	psz_artist_asx
stmts	479:37	479:92	11	
call	479:37	479:91	12	input_item_SetArtist
arg	479:59	479:74	13	p_current_input
water	479:59	0:0	14	p_current_input
arg	479:76	479:91	13	psz_artist_asx
water	479:76	0:0	14	psz_artist_asx
water	479:92	0:0	12	;
if	480:16	480:101	10	(psz_copyright_asx)
cond	480:20	480:20	11	psz_copyright_asx
water	480:20	0:0	12	psz_copyright_asx
stmts	480:40	480:101	11	
call	480:40	480:100	12	input_item_SetCopyright
arg	480:65	480:80	13	p_current_input
water	480:65	0:0	14	p_current_input
arg	480:82	480:100	13	psz_copyright_asx
water	480:82	0:0	14	psz_copyright_asx
water	480:101	0:0	12	;
if	481:16	481:93	10	(psz_moreinfo_asx)
cond	481:20	481:20	11	psz_moreinfo_asx
water	481:20	0:0	12	psz_moreinfo_asx
stmts	481:39	481:93	11	
call	481:39	481:92	12	input_item_SetURL
arg	481:58	481:73	13	p_current_input
water	481:58	0:0	14	p_current_input
arg	481:75	481:92	13	psz_moreinfo_asx
water	481:75	0:0	14	psz_moreinfo_asx
water	481:93	0:0	12	;
if	482:16	482:101	10	(psz_abstract_asx)
cond	482:20	482:20	11	psz_abstract_asx
water	482:20	0:0	12	psz_abstract_asx
stmts	482:39	482:101	11	
call	482:39	482:100	12	input_item_SetDescription
arg	482:66	482:81	13	p_current_input
water	482:66	0:0	14	p_current_input
arg	482:83	482:100	13	psz_abstract_asx
water	482:83	0:0	14	psz_abstract_asx
water	482:101	0:0	12	;
call	483:16	483:39	10	FREENULL
arg	483:26	483:39	11	psz_base_asx
water	483:26	0:0	12	psz_base_asx
water	483:40	0:0	10	;
call	484:16	484:40	10	FREENULL
arg	484:26	484:40	11	psz_title_asx
water	484:26	0:0	12	psz_title_asx
water	484:41	0:0	10	;
call	485:16	485:41	10	FREENULL
arg	485:26	485:41	11	psz_artist_asx
water	485:26	0:0	12	psz_artist_asx
water	485:42	0:0	10	;
call	486:16	486:44	10	FREENULL
arg	486:26	486:44	11	psz_copyright_asx
water	486:26	0:0	12	psz_copyright_asx
water	486:45	0:0	10	;
call	487:16	487:43	10	FREENULL
arg	487:26	487:43	11	psz_moreinfo_asx
water	487:26	0:0	12	psz_moreinfo_asx
water	487:44	0:0	10	;
call	488:16	488:43	10	FREENULL
arg	488:26	488:43	11	psz_abstract_asx
water	488:26	0:0	12	psz_abstract_asx
water	488:44	0:0	10	;
water	489:16	0:0	10	psz_parse
op	489:25	0:0	10	++
water	489:27	0:0	10	;
water	490:12	0:0	10	}
else	491:12	491:28	6
stmts	491:17	491:28	7	
water	491:17	0:0	8	psz_parse
op	491:26	0:0	8	++
water	491:28	0:0	8	;
water	492:8	0:0	6	}
if	493:8	499:8	4	(uniq_entry_ad_backup != NULL)
cond	493:13	493:37	5	uniq_entry_ad_backup != NULL
water	493:13	0:0	6	uniq_entry_ad_backup
op	493:34	0:0	6	!=
water	493:37	0:0	6	NULL
stmts	494:8	499:8	5	
water	494:8	0:0	6	{
call	495:12	495:61	6	msg_Dbg
arg	495:21	495:28	7	p_demux
water	495:21	0:0	8	p_demux
arg	495:30	495:61	7	"added unique entry even if ad"
water	495:30	0:0	8	"added unique entry even if ad"
water	495:62	0:0	6	;
call	497:12	497:73	6	input_item_node_AppendItem
arg	497:40	497:50	7	p_subitems
water	497:40	0:0	8	p_subitems
arg	497:52	497:73	7	uniq_entry_ad_backup
water	497:52	0:0	8	uniq_entry_ad_backup
water	497:74	0:0	6	;
call	498:12	498:47	6	vlc_gc_decref
arg	498:27	498:47	7	uniq_entry_ad_backup
water	498:27	0:0	8	uniq_entry_ad_backup
water	498:48	0:0	6	;
water	499:8	0:0	6	}
water	502:12	0:0	4	PARAM
water	503:12	0:0	4	EVENT
water	504:12	0:0	4	REPEAT
water	505:12	0:0	4	ENDMARK
water	506:12	0:0	4	STARTMARK
water	508:4	0:0	4	}
call	509:4	509:46	2	input_item_node_PostAndDelete
arg	509:35	509:46	3	p_subitems
water	509:35	0:0	4	p_subitems
water	509:47	0:0	2	;
call	510:4	510:33	2	vlc_gc_decref
arg	510:18	510:33	3	p_current_input
water	510:18	0:0	4	p_current_input
water	510:34	0:0	2	;
return	511:4	511:12	2	0
water	511:11	0:0	3	0
