func	2:0	22:0	0	static int	asmrp_condition
params	2:27	0:0	1	
param	2:28	2:38	2	asmrp_t *	p
stmnts	0:0	21:10	1	
decl	3:2	3:7	2	int	a
call	4:2	4:24	2	lprintf
arg	4:11	4:24	3	"condition\n"
water	4:11	0:0	4	"condition\n"
water	4:25	0:0	2	;
water	5:2	0:0	2	a
op	5:4	0:0	2	=
call	5:6	5:30	2	asmrp_comp_expression
arg	5:29	5:30	3	p
water	5:29	0:0	4	p
water	5:31	0:0	2	;
while	6:2	19:2	2	(( p -> sym == ASMRP_SYM_AND ) || ( p -> sym == ASMRP_SYM_OR ))
cond	6:10	6:62	3	( p -> sym == ASMRP_SYM_AND ) || ( p -> sym == ASMRP_SYM_OR )
water	6:10	0:0	4	(
water	6:11	0:0	4	p
op	6:12	0:0	4	->
water	6:14	0:0	4	sym
op	6:18	0:0	4	==
water	6:21	0:0	4	ASMRP_SYM_AND
water	6:34	0:0	4	)
op	6:36	0:0	4	||
water	6:39	0:0	4	(
water	6:40	0:0	4	p
op	6:41	0:0	4	->
water	6:43	0:0	4	sym
op	6:47	0:0	4	==
water	6:50	0:0	4	ASMRP_SYM_OR
water	6:62	0:0	4	)
stmts	6:66	19:2	3	
water	6:66	0:0	4	{
decl	7:4	7:13	4	int	op
water	7:10	0:0	4	,
decl	7:4	7:13	4	int	b
water	8:4	0:0	4	op
op	8:7	0:0	4	=
water	8:9	0:0	4	p
op	8:10	0:0	4	->
water	8:12	0:0	4	sym
water	8:15	0:0	4	;
call	9:4	9:20	4	asmrp_get_sym
arg	9:19	9:20	5	p
water	9:19	0:0	6	p
water	9:21	0:0	4	;
water	10:4	0:0	4	b
op	10:6	0:0	4	=
call	10:8	10:32	4	asmrp_comp_expression
arg	10:31	10:32	5	p
water	10:31	0:0	6	p
water	10:33	0:0	4	;
switch	11:4	18:4	4	(op)
cond	11:12	11:12	5	op
water	11:12	0:0	6	op
stmts	11:16	18:4	5	
water	11:16	0:0	6	{
label	12:4	12:22	6	case ASMRP_SYM_AND :
water	13:6	0:0	6	a
op	13:8	0:0	6	=
water	13:10	0:0	6	a
op	13:12	0:0	6	&
water	13:14	0:0	6	b
water	13:15	0:0	6	;
break	14:6	14:11	6	
label	15:4	15:21	6	case ASMRP_SYM_OR :
water	16:6	0:0	6	a
op	16:8	0:0	6	=
water	16:10	0:0	6	a
op	16:12	0:0	6	|
water	16:14	0:0	6	b
water	16:15	0:0	6	;
break	17:6	17:11	6	
water	18:4	0:0	6	}
water	19:2	0:0	4	}
call	20:2	20:37	2	lprintf
arg	20:11	20:34	3	"condition done = %d\n"
water	20:11	0:0	4	"condition done = %d\n"
arg	20:36	20:37	3	a
water	20:36	0:0	4	a
water	20:38	0:0	2	;
return	21:2	21:10	2	a
water	21:9	0:0	3	a
