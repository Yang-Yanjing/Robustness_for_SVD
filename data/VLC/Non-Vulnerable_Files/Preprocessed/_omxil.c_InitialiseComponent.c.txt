func	2:0	160:0	0	static OMX_ERRORTYPE	InitialiseComponent
params	2:40	0:0	1	
param	2:41	2:57	2	decoder_t *	p_dec
param	3:4	3:28	2	OMX_STRING	psz_component
param	3:30	3:54	2	OMX_HANDLETYPE *	p_handle
stmnts	5:4	159:20	1	
water	5:4	0:0	2	static
water	5:11	0:0	2	OMX_CALLBACKTYPE
water	5:28	0:0	2	callbacks
op	5:38	0:0	2	=
water	6:8	0:0	2	{
water	6:10	0:0	2	OmxEventHandler
water	6:25	0:0	2	,
water	6:27	0:0	2	OmxEmptyBufferDone
water	6:45	0:0	2	,
water	6:47	0:0	2	OmxFillBufferDone
water	6:65	0:0	2	}
water	6:66	0:0	2	;
decl	7:4	7:39	2	decoder_sys_t	*p_sys
op	7:25	0:0	2	=
water	7:27	0:0	2	p_dec
op	7:32	0:0	2	->
water	7:34	0:0	2	p_sys
decl	8:4	8:29	2	OMX_HANDLETYPE	omx_handle
decl	9:4	9:27	2	OMX_ERRORTYPE	omx_error
decl	10:4	10:18	2	unsigned int	i
decl	11:4	11:44	2	OMX_U8	psz_role[OMX_MAX_STRINGNAME_SIZE]
decl	12:4	12:36	2	OMX_PARAM_COMPONENTROLETYPE	role
decl	13:4	13:43	2	OMX_PARAM_PORTDEFINITIONTYPE	definition
decl	14:4	14:29	2	OMX_PORT_PARAM_TYPE	param
water	16:4	0:0	2	omx_error
op	16:14	0:0	2	=
call	16:16	16:77	2	pf_get_handle
arg	16:31	16:42	3	&omx_handle
op	16:31	0:0	4	&
water	16:32	0:0	4	omx_handle
arg	16:44	16:57	3	psz_component
water	16:44	0:0	4	psz_component
arg	16:59	16:64	3	p_dec
water	16:59	0:0	4	p_dec
arg	16:66	16:77	3	&callbacks
op	16:66	0:0	4	&
water	16:67	0:0	4	callbacks
water	16:78	0:0	2	;
if	17:4	22:4	2	(omx_error != OMX_ErrorNone)
cond	17:7	17:20	3	omx_error != OMX_ErrorNone
water	17:7	0:0	4	omx_error
op	17:17	0:0	4	!=
water	17:20	0:0	4	OMX_ErrorNone
stmts	18:4	22:4	3	
water	18:4	0:0	4	{
call	19:8	20:54	4	msg_Warn
arg	19:18	19:23	5	p_dec
water	19:18	0:0	6	p_dec
arg	19:25	19:60	5	"OMX_GetHandle(%s) failed (%x: %s)"
water	19:25	0:0	6	"OMX_GetHandle(%s) failed (%x: %s)"
arg	19:62	19:75	5	psz_component
water	19:62	0:0	6	psz_component
arg	20:18	20:27	5	omx_error
water	20:18	0:0	6	omx_error
arg	20:29	20:54	5	ErrorToString(omx_error)
call	20:29	20:52	6	ErrorToString
arg	20:43	20:52	7	omx_error
water	20:43	0:0	8	omx_error
water	20:55	0:0	4	;
return	21:8	21:24	4	omx_error
water	21:15	0:0	5	omx_error
water	22:4	0:0	4	}
call	23:4	23:74	2	strncpy
arg	23:12	23:32	3	p_sys->psz_component
water	23:12	0:0	4	p_sys
op	23:17	0:0	4	->
water	23:19	0:0	4	psz_component
arg	23:34	23:47	3	psz_component
water	23:34	0:0	4	psz_component
arg	23:49	23:74	3	OMX_MAX_STRINGNAME_SIZE-1
water	23:49	0:0	4	OMX_MAX_STRINGNAME_SIZE
op	23:72	0:0	4	-
water	23:73	0:0	4	1
water	23:75	0:0	2	;
water	24:4	0:0	2	omx_error
op	24:14	0:0	2	=
call	24:16	24:61	2	OMX_ComponentRoleEnum
arg	24:38	24:48	3	omx_handle
water	24:38	0:0	4	omx_handle
arg	24:50	24:58	3	psz_role
water	24:50	0:0	4	psz_role
arg	24:60	24:61	3	0
water	24:60	0:0	4	0
water	24:62	0:0	2	;
if	25:4	26:81	2	(omx_error == OMX_ErrorNone)
cond	25:7	25:20	3	omx_error == OMX_ErrorNone
water	25:7	0:0	4	omx_error
op	25:17	0:0	4	==
water	25:20	0:0	4	OMX_ErrorNone
stmts	26:8	26:81	3	
call	26:8	26:80	4	msg_Dbg
arg	26:16	26:21	5	p_dec
water	26:16	0:0	6	p_dec
arg	26:23	26:55	5	"loaded component %s of role %s"
water	26:23	0:0	6	"loaded component %s of role %s"
arg	26:57	26:70	5	psz_component
water	26:57	0:0	6	psz_component
arg	26:72	26:80	5	psz_role
water	26:72	0:0	6	psz_role
water	26:81	0:0	4	;
else	27:4	28:60	2
stmts	28:8	28:60	3	
call	28:8	28:59	4	msg_Dbg
arg	28:16	28:21	5	p_dec
water	28:16	0:0	6	p_dec
arg	28:23	28:44	5	"loaded component %s"
water	28:23	0:0	6	"loaded component %s"
arg	28:46	28:59	5	psz_component
water	28:46	0:0	6	psz_component
water	28:60	0:0	4	;
call	29:4	29:39	2	PrintOmx
arg	29:13	29:18	3	p_dec
water	29:13	0:0	4	p_dec
arg	29:20	29:30	3	omx_handle
water	29:20	0:0	4	omx_handle
arg	29:32	29:39	3	OMX_ALL
water	29:32	0:0	4	OMX_ALL
water	29:40	0:0	2	;
call	31:4	31:27	2	OMX_INIT_STRUCTURE
arg	31:23	31:27	3	role
water	31:23	0:0	4	role
water	31:28	0:0	2	;
call	32:4	34:56	2	strcpy
arg	32:11	32:28	3	(char*)role.cRole
water	32:11	0:0	4	(
water	32:12	0:0	4	char
op	32:16	0:0	4	*
water	32:17	0:0	4	)
water	32:18	0:0	4	role
op	32:22	0:0	4	.
water	32:23	0:0	4	cRole
arg	33:11	34:56	3	GetOmxRole(p_sys->b_enc?p_dec->fmt_out.i_codec:p_dec->fmt_in.i_codec,p_dec->fmt_in.i_cat,p_sys->b_enc)
call	33:11	34:55	4	GetOmxRole
arg	33:22	33:83	5	p_sys->b_enc?p_dec->fmt_out.i_codec:p_dec->fmt_in.i_codec
water	33:22	0:0	6	p_sys
op	33:27	0:0	6	->
water	33:29	0:0	6	b_enc
water	33:35	0:0	6	?
water	33:37	0:0	6	p_dec
op	33:42	0:0	6	->
water	33:44	0:0	6	fmt_out
op	33:51	0:0	6	.
water	33:52	0:0	6	i_codec
water	33:60	0:0	6	:
water	33:62	0:0	6	p_dec
op	33:67	0:0	6	->
water	33:69	0:0	6	fmt_in
op	33:75	0:0	6	.
water	33:76	0:0	6	i_codec
arg	34:22	34:41	5	p_dec->fmt_in.i_cat
water	34:22	0:0	6	p_dec
op	34:27	0:0	6	->
water	34:29	0:0	6	fmt_in
op	34:35	0:0	6	.
water	34:36	0:0	6	i_cat
arg	34:43	34:55	5	p_sys->b_enc
water	34:43	0:0	6	p_sys
op	34:48	0:0	6	->
water	34:50	0:0	6	b_enc
water	34:57	0:0	2	;
water	35:4	0:0	2	omx_error
op	35:14	0:0	2	=
call	35:16	36:38	2	OMX_SetParameter
arg	35:33	35:43	3	omx_handle
water	35:33	0:0	4	omx_handle
arg	35:45	35:80	3	OMX_IndexParamStandardComponentRole
water	35:45	0:0	4	OMX_IndexParamStandardComponentRole
arg	36:33	36:38	3	&role
op	36:33	0:0	4	&
water	36:34	0:0	4	role
water	36:39	0:0	2	;
water	37:4	0:0	2	omx_error
op	37:14	0:0	2	=
call	37:16	38:38	2	OMX_GetParameter
arg	37:33	37:43	3	omx_handle
water	37:33	0:0	4	omx_handle
arg	37:45	37:80	3	OMX_IndexParamStandardComponentRole
water	37:45	0:0	4	OMX_IndexParamStandardComponentRole
arg	38:33	38:38	3	&role
op	38:33	0:0	4	&
water	38:34	0:0	4	role
water	38:39	0:0	2	;
if	39:4	40:71	2	(omx_error == OMX_ErrorNone)
cond	39:7	39:20	3	omx_error == OMX_ErrorNone
water	39:7	0:0	4	omx_error
op	39:17	0:0	4	==
water	39:20	0:0	4	OMX_ErrorNone
stmts	40:8	40:71	3	
call	40:8	40:70	4	msg_Dbg
arg	40:16	40:21	5	p_dec
water	40:16	0:0	6	p_dec
arg	40:23	40:58	5	"component standard role set to %s"
water	40:23	0:0	6	"component standard role set to %s"
arg	40:60	40:70	5	role.cRole
water	40:60	0:0	6	role
op	40:64	0:0	6	.
water	40:65	0:0	6	cRole
water	40:71	0:0	4	;
call	42:4	42:28	2	OMX_INIT_STRUCTURE
arg	42:23	42:28	3	param
water	42:23	0:0	4	param
water	42:29	0:0	2	;
call	43:4	43:33	2	OMX_INIT_STRUCTURE
arg	43:23	43:33	3	definition
water	43:23	0:0	4	definition
water	43:34	0:0	2	;
water	44:4	0:0	2	omx_error
op	44:14	0:0	2	=
call	44:16	45:90	2	OMX_GetParameter
arg	44:33	44:43	3	omx_handle
water	44:33	0:0	4	omx_handle
arg	44:45	45:82	3	p_dec->fmt_in.i_cat==VIDEO_ES?OMX_IndexParamVideoInit:OMX_IndexParamAudioInit
water	44:45	0:0	4	p_dec
op	44:50	0:0	4	->
water	44:52	0:0	4	fmt_in
op	44:58	0:0	4	.
water	44:59	0:0	4	i_cat
op	44:65	0:0	4	==
water	44:68	0:0	4	VIDEO_ES
water	44:77	0:0	4	?
water	45:33	0:0	4	OMX_IndexParamVideoInit
water	45:57	0:0	4	:
water	45:59	0:0	4	OMX_IndexParamAudioInit
arg	45:84	45:90	3	&param
op	45:84	0:0	4	&
water	45:85	0:0	4	param
water	45:91	0:0	2	;
if	46:4	53:4	2	(omx_error != OMX_ErrorNone)
cond	46:7	46:20	3	omx_error != OMX_ErrorNone
water	46:7	0:0	4	omx_error
op	46:17	0:0	4	!=
water	46:20	0:0	4	OMX_ErrorNone
stmts	46:35	53:4	3	
water	46:35	0:0	4	{
water	48:8	0:0	4	param
op	48:13	0:0	4	.
water	48:14	0:0	4	nPorts
op	48:21	0:0	4	=
water	48:23	0:0	4	2
water	48:24	0:0	4	;
water	49:8	0:0	4	param
op	49:13	0:0	4	.
water	49:14	0:0	4	nStartPortNumber
op	49:31	0:0	4	=
water	49:33	0:0	4	0
water	49:34	0:0	4	;
water	51:8	0:0	4	param
op	51:13	0:0	4	.
water	51:14	0:0	4	nPorts
op	51:21	0:0	4	=
water	51:23	0:0	4	0
water	51:24	0:0	4	;
water	53:4	0:0	4	}
for	54:4	68:4	2	(i = 0 ;i < param . nPorts;i ++)
forinit	54:8	54:13	3	i = 0 ;
water	54:8	0:0	4	i
op	54:10	0:0	4	=
water	54:12	0:0	4	0
water	54:13	0:0	4	;
cond	54:15	54:25	3	i < param . nPorts
water	54:15	0:0	4	i
op	54:17	0:0	4	<
water	54:19	0:0	4	param
op	54:24	0:0	4	.
water	54:25	0:0	4	nPorts
forexpr	54:33	54:34	3	i ++
water	54:33	0:0	4	i
op	54:34	0:0	4	++
stmts	55:4	68:4	3	
water	55:4	0:0	4	{
decl	56:8	56:23	4	OmxPort	*p_port
water	58:8	0:0	4	definition
op	58:18	0:0	4	.
water	58:19	0:0	4	nPortIndex
op	58:30	0:0	4	=
water	58:32	0:0	4	param
op	58:37	0:0	4	.
water	58:38	0:0	4	nStartPortNumber
op	58:55	0:0	4	+
water	58:57	0:0	4	i
water	58:58	0:0	4	;
water	59:8	0:0	4	omx_error
op	59:18	0:0	4	=
call	59:20	60:48	4	OMX_GetParameter
arg	59:37	59:47	5	omx_handle
water	59:37	0:0	6	omx_handle
arg	59:49	59:77	5	OMX_IndexParamPortDefinition
water	59:49	0:0	6	OMX_IndexParamPortDefinition
arg	60:37	60:48	5	&definition
op	60:37	0:0	6	&
water	60:38	0:0	6	definition
water	60:49	0:0	4	;
if	61:8	61:47	4	(omx_error != OMX_ErrorNone)
cond	61:11	61:24	5	omx_error != OMX_ErrorNone
water	61:11	0:0	6	omx_error
op	61:21	0:0	6	!=
water	61:24	0:0	6	OMX_ErrorNone
stmts	61:39	61:47	5	
continue	61:39	61:47	6	
if	62:8	62:63	4	(definition . eDir == OMX_DirInput)
cond	62:11	62:30	5	definition . eDir == OMX_DirInput
water	62:11	0:0	6	definition
op	62:21	0:0	6	.
water	62:22	0:0	6	eDir
op	62:27	0:0	6	==
water	62:30	0:0	6	OMX_DirInput
stmts	62:44	62:63	5	
water	62:44	0:0	6	p_port
op	62:51	0:0	6	=
op	62:53	0:0	6	&
water	62:54	0:0	6	p_sys
op	62:59	0:0	6	->
water	62:61	0:0	6	in
water	62:63	0:0	6	;
else	63:8	63:34	4
stmts	63:14	63:34	5	
water	63:14	0:0	6	p_port
op	63:21	0:0	6	=
op	63:23	0:0	6	&
water	63:24	0:0	6	p_sys
op	63:29	0:0	6	->
water	63:31	0:0	6	out
water	63:34	0:0	6	;
water	64:8	0:0	4	p_port
op	64:14	0:0	4	->
water	64:16	0:0	4	b_valid
op	64:24	0:0	4	=
water	64:26	0:0	4	true
water	64:30	0:0	4	;
water	65:8	0:0	4	p_port
op	65:14	0:0	4	->
water	65:16	0:0	4	i_port_index
op	65:29	0:0	4	=
water	65:31	0:0	4	definition
op	65:41	0:0	4	.
water	65:42	0:0	4	nPortIndex
water	65:52	0:0	4	;
water	66:8	0:0	4	p_port
op	66:14	0:0	4	->
water	66:16	0:0	4	definition
op	66:27	0:0	4	=
water	66:29	0:0	4	definition
water	66:39	0:0	4	;
water	67:8	0:0	4	p_port
op	67:14	0:0	4	->
water	67:16	0:0	4	omx_handle
op	67:27	0:0	4	=
water	67:29	0:0	4	omx_handle
water	67:39	0:0	4	;
water	68:4	0:0	4	}
if	69:4	73:4	2	(! p_sys -> in . b_valid || ! p_sys -> out . b_valid)
cond	69:7	69:41	3	! p_sys -> in . b_valid || ! p_sys -> out . b_valid
op	69:7	0:0	4	!
water	69:8	0:0	4	p_sys
op	69:13	0:0	4	->
water	69:15	0:0	4	in
op	69:17	0:0	4	.
water	69:18	0:0	4	b_valid
op	69:26	0:0	4	||
op	69:29	0:0	4	!
water	69:30	0:0	4	p_sys
op	69:35	0:0	4	->
water	69:37	0:0	4	out
op	69:40	0:0	4	.
water	69:41	0:0	4	b_valid
stmts	70:4	73:4	3	
water	70:4	0:0	4	{
water	71:8	0:0	4	omx_error
op	71:18	0:0	4	=
water	71:20	0:0	4	OMX_ErrorInvalidComponent
water	71:45	0:0	4	;
call	72:8	72:71	4	CHECK_ERROR
arg	72:20	72:29	5	omx_error
water	72:20	0:0	6	omx_error
arg	72:31	72:71	5	"couldn't find an input and output port"
water	72:31	0:0	6	"couldn't find an input and output port"
water	72:72	0:0	4	;
water	73:4	0:0	4	}
if	74:4	93:4	2	(!strncmp (p_sys -> psz_component ,"OMX.SEC." ,8 ) && p_dec -> fmt_in . i_cat == VIDEO_ES)
cond	74:7	75:30	3	!strncmp (p_sys -> psz_component ,"OMX.SEC." ,8 ) && p_dec -> fmt_in . i_cat == VIDEO_ES
op	74:7	0:0	4	!
call	74:8	74:51	4	strncmp
arg	74:16	74:36	5	p_sys->psz_component
water	74:16	0:0	6	p_sys
op	74:21	0:0	6	->
water	74:23	0:0	6	psz_component
arg	74:38	74:48	5	"OMX.SEC."
water	74:38	0:0	6	"OMX.SEC."
arg	74:50	74:51	5	8
water	74:50	0:0	6	8
op	74:53	0:0	4	&&
water	75:7	0:0	4	p_dec
op	75:12	0:0	4	->
water	75:14	0:0	4	fmt_in
op	75:20	0:0	4	.
water	75:21	0:0	4	i_cat
op	75:27	0:0	4	==
water	75:30	0:0	4	VIDEO_ES
stmts	76:4	93:4	3	
water	76:4	0:0	4	{
decl	77:8	77:27	4	OMX_INDEXTYPE	index
water	78:8	0:0	4	omx_error
op	78:18	0:0	4	=
call	78:20	78:104	4	OMX_GetExtensionIndex
arg	78:42	78:52	5	omx_handle
water	78:42	0:0	6	omx_handle
arg	78:54	78:96	5	(OMX_STRING)"OMX.SEC.index.ThumbnailMode"
water	78:54	0:0	6	(
water	78:55	0:0	6	OMX_STRING
water	78:65	0:0	6	)
water	78:67	0:0	6	"OMX.SEC.index.ThumbnailMode"
arg	78:98	78:104	5	&index
op	78:98	0:0	6	&
water	78:99	0:0	6	index
water	78:105	0:0	4	;
if	79:8	84:8	4	(omx_error == OMX_ErrorNone)
cond	79:11	79:24	5	omx_error == OMX_ErrorNone
water	79:11	0:0	6	omx_error
op	79:21	0:0	6	==
water	79:24	0:0	6	OMX_ErrorNone
stmts	80:8	84:8	5	
water	80:8	0:0	6	{
decl	81:12	81:38	6	OMX_BOOL	enable
op	81:28	0:0	6	=
water	81:30	0:0	6	OMX_TRUE
water	82:12	0:0	6	omx_error
op	82:22	0:0	6	=
call	82:24	82:64	6	OMX_SetConfig
arg	82:38	82:48	7	omx_handle
water	82:38	0:0	8	omx_handle
arg	82:50	82:55	7	index
water	82:50	0:0	8	index
arg	82:57	82:64	7	&enable
op	82:57	0:0	8	&
water	82:58	0:0	8	enable
water	82:65	0:0	6	;
call	83:12	83:64	6	CHECK_ERROR
arg	83:24	83:33	7	omx_error
water	83:24	0:0	8	omx_error
arg	83:35	83:64	7	"Unable to set ThumbnailMode"
water	83:35	0:0	8	"Unable to set ThumbnailMode"
water	83:65	0:0	6	;
water	84:8	0:0	6	}
else	84:10	92:8	4
stmts	84:15	92:8	5	
water	84:15	0:0	6	{
decl	85:12	85:38	6	OMX_BOOL	enable
op	85:28	0:0	6	=
water	85:30	0:0	6	OMX_TRUE
water	87:12	0:0	6	omx_error
op	87:22	0:0	6	=
call	87:24	87:88	6	OMX_SetConfig
arg	87:38	87:48	7	omx_handle
water	87:38	0:0	8	omx_handle
arg	87:50	87:79	7	OMX_IndexVendorSetYUV420pMode
water	87:50	0:0	8	OMX_IndexVendorSetYUV420pMode
arg	87:81	87:88	7	&enable
op	87:81	0:0	8	&
water	87:82	0:0	8	enable
water	87:89	0:0	6	;
if	88:12	89:80	6	(omx_error == OMX_ErrorNone)
cond	88:16	88:29	7	omx_error == OMX_ErrorNone
water	88:16	0:0	8	omx_error
op	88:26	0:0	8	==
water	88:29	0:0	8	OMX_ErrorNone
stmts	89:16	89:80	7	
call	89:16	89:79	8	msg_Dbg
arg	89:24	89:29	9	p_dec
water	89:24	0:0	10	p_dec
arg	89:31	89:79	9	"Set OMX_IndexVendorSetYUV420pMode successfully"
water	89:31	0:0	10	"Set OMX_IndexVendorSetYUV420pMode successfully"
water	89:80	0:0	8	;
else	90:12	91:92	6
stmts	91:16	91:92	7	
call	91:16	91:91	8	msg_Dbg
arg	91:24	91:29	9	p_dec
water	91:24	0:0	10	p_dec
arg	91:31	91:80	9	"Unable to set OMX_IndexVendorSetYUV420pMode: %x"
water	91:31	0:0	10	"Unable to set OMX_IndexVendorSetYUV420pMode: %x"
arg	91:82	91:91	9	omx_error
water	91:82	0:0	10	omx_error
water	91:92	0:0	8	;
water	92:8	0:0	6	}
water	93:4	0:0	4	}
if	94:4	108:4	2	(!strncmp (p_sys -> psz_component ,"OMX.broadcom." ,13 ))
cond	94:7	94:57	3	!strncmp (p_sys -> psz_component ,"OMX.broadcom." ,13 )
op	94:7	0:0	4	!
call	94:8	94:57	4	strncmp
arg	94:16	94:36	5	p_sys->psz_component
water	94:16	0:0	6	p_sys
op	94:21	0:0	6	->
water	94:23	0:0	6	psz_component
arg	94:38	94:53	5	"OMX.broadcom."
water	94:38	0:0	6	"OMX.broadcom."
arg	94:55	94:57	5	13
water	94:55	0:0	6	13
stmts	95:4	108:4	3	
water	95:4	0:0	4	{
decl	96:8	96:52	4	OMX_CONFIG_REQUESTCALLBACKTYPE	notifications
call	97:8	97:40	4	OMX_INIT_STRUCTURE
arg	97:27	97:40	5	notifications
water	97:27	0:0	6	notifications
water	97:41	0:0	4	;
water	98:8	0:0	4	notifications
op	98:21	0:0	4	.
water	98:22	0:0	4	nPortIndex
op	98:33	0:0	4	=
water	98:35	0:0	4	p_sys
op	98:40	0:0	4	->
water	98:42	0:0	4	out
op	98:45	0:0	4	.
water	98:46	0:0	4	i_port_index
water	98:58	0:0	4	;
water	99:8	0:0	4	notifications
op	99:21	0:0	4	.
water	99:22	0:0	4	nIndex
op	99:29	0:0	4	=
water	99:31	0:0	4	OMX_IndexParamBrcmPixelAspectRatio
water	99:65	0:0	4	;
water	100:8	0:0	4	notifications
op	100:21	0:0	4	.
water	100:22	0:0	4	bEnable
op	100:30	0:0	4	=
water	100:32	0:0	4	OMX_TRUE
water	100:40	0:0	4	;
water	101:8	0:0	4	omx_error
op	101:18	0:0	4	=
call	101:20	102:62	4	OMX_SetParameter
arg	101:37	101:47	5	omx_handle
water	101:37	0:0	6	omx_handle
arg	102:16	102:46	5	OMX_IndexConfigRequestCallback
water	102:16	0:0	6	OMX_IndexConfigRequestCallback
arg	102:48	102:62	5	&notifications
op	102:48	0:0	6	&
water	102:49	0:0	6	notifications
water	102:63	0:0	4	;
if	103:8	106:8	4	(omx_error == OMX_ErrorNone)
cond	103:12	103:25	5	omx_error == OMX_ErrorNone
water	103:12	0:0	6	omx_error
op	103:22	0:0	6	==
water	103:25	0:0	6	OMX_ErrorNone
stmts	103:40	106:8	5	
water	103:40	0:0	6	{
call	104:12	104:63	6	msg_Dbg
arg	104:20	104:25	7	p_dec
water	104:20	0:0	8	p_dec
arg	104:27	104:63	7	"Enabled aspect ratio notifications"
water	104:27	0:0	8	"Enabled aspect ratio notifications"
water	104:64	0:0	6	;
water	105:12	0:0	6	p_sys
op	105:17	0:0	6	->
water	105:19	0:0	6	b_aspect_ratio_handled
op	105:42	0:0	6	=
water	105:44	0:0	6	true
water	105:48	0:0	6	;
water	106:8	0:0	6	}
else	106:10	107:73	4
stmts	107:12	107:73	5	
call	107:12	107:72	6	msg_Dbg
arg	107:20	107:25	7	p_dec
water	107:20	0:0	8	p_dec
arg	107:27	107:72	7	"Could not enable aspect ratio notifications"
water	107:27	0:0	8	"Could not enable aspect ratio notifications"
water	107:73	0:0	6	;
water	108:4	0:0	4	}
for	110:4	115:4	2	(i = 0 ;i < p_sys -> ports;i ++)
forinit	110:8	110:13	3	i = 0 ;
water	110:8	0:0	4	i
op	110:10	0:0	4	=
water	110:12	0:0	4	0
water	110:13	0:0	4	;
cond	110:15	110:26	3	i < p_sys -> ports
water	110:15	0:0	4	i
op	110:17	0:0	4	<
water	110:19	0:0	4	p_sys
op	110:24	0:0	4	->
water	110:26	0:0	4	ports
forexpr	110:33	110:34	3	i ++
water	110:33	0:0	4	i
op	110:34	0:0	4	++
stmts	111:4	115:4	3	
water	111:4	0:0	4	{
water	112:8	0:0	4	omx_error
op	112:18	0:0	4	=
call	112:20	113:61	4	SetPortDefinition
arg	112:38	112:43	5	p_dec
water	112:38	0:0	6	p_dec
arg	112:45	112:63	5	&p_sys->p_ports[i]
op	112:45	0:0	6	&
water	112:46	0:0	6	p_sys
op	112:51	0:0	6	->
water	112:53	0:0	6	p_ports
op	112:60	0:0	6	[
water	112:61	0:0	6	i
op	112:62	0:0	6	]
arg	113:38	113:61	5	p_sys->p_ports[i].p_fmt
water	113:38	0:0	6	p_sys
op	113:43	0:0	6	->
water	113:45	0:0	6	p_ports
op	113:52	0:0	6	[
water	113:53	0:0	6	i
op	113:54	0:0	6	]
op	113:55	0:0	6	.
water	113:56	0:0	6	p_fmt
water	113:62	0:0	4	;
if	114:8	114:49	4	(omx_error != OMX_ErrorNone)
cond	114:11	114:24	5	omx_error != OMX_ErrorNone
water	114:11	0:0	6	omx_error
op	114:21	0:0	6	!=
water	114:24	0:0	6	OMX_ErrorNone
stmts	114:39	114:49	5	
goto	114:39	114:49	6	error
water	114:44	0:0	7	error
water	115:4	0:0	4	}
if	116:4	128:4	2	(!strncmp (p_sys -> psz_component ,"OMX.broadcom." ,13 ) && p_sys -> in . p_fmt -> i_codec == VLC_CODEC_H264)
cond	116:7	117:36	3	!strncmp (p_sys -> psz_component ,"OMX.broadcom." ,13 ) && p_sys -> in . p_fmt -> i_codec == VLC_CODEC_H264
op	116:7	0:0	4	!
call	116:8	116:57	4	strncmp
arg	116:16	116:36	5	p_sys->psz_component
water	116:16	0:0	6	p_sys
op	116:21	0:0	6	->
water	116:23	0:0	6	psz_component
arg	116:38	116:53	5	"OMX.broadcom."
water	116:38	0:0	6	"OMX.broadcom."
arg	116:55	116:57	5	13
water	116:55	0:0	6	13
op	116:59	0:0	4	&&
water	117:8	0:0	4	p_sys
op	117:13	0:0	4	->
water	117:15	0:0	4	in
op	117:17	0:0	4	.
water	117:18	0:0	4	p_fmt
op	117:23	0:0	4	->
water	117:25	0:0	4	i_codec
op	117:33	0:0	4	==
water	117:36	0:0	4	VLC_CODEC_H264
stmts	118:4	128:4	3	
water	118:4	0:0	4	{
decl	119:8	119:65	4	OMX_PARAM_BRCMVIDEODECODEERRORCONCEALMENTTYPE	concanParam
call	120:8	120:38	4	OMX_INIT_STRUCTURE
arg	120:27	120:38	5	concanParam
water	120:27	0:0	6	concanParam
water	120:39	0:0	4	;
water	121:8	0:0	4	concanParam
op	121:19	0:0	4	.
water	121:20	0:0	4	bStartWithValidFrame
op	121:41	0:0	4	=
water	121:43	0:0	4	OMX_FALSE
water	121:52	0:0	4	;
water	122:8	0:0	4	omx_error
op	122:18	0:0	4	=
call	122:20	123:75	4	OMX_SetParameter
arg	122:37	122:47	5	omx_handle
water	122:37	0:0	6	omx_handle
arg	123:16	123:61	5	OMX_IndexParamBrcmVideoDecodeErrorConcealment
water	123:16	0:0	6	OMX_IndexParamBrcmVideoDecodeErrorConcealment
arg	123:63	123:75	5	&concanParam
op	123:63	0:0	6	&
water	123:64	0:0	6	concanParam
water	123:76	0:0	4	;
if	124:8	125:59	4	(omx_error == OMX_ErrorNone)
cond	124:12	124:25	5	omx_error == OMX_ErrorNone
water	124:12	0:0	6	omx_error
op	124:22	0:0	6	==
water	124:25	0:0	6	OMX_ErrorNone
stmts	125:12	125:59	5	
call	125:12	125:58	6	msg_Dbg
arg	125:20	125:25	7	p_dec
water	125:20	0:0	8	p_dec
arg	125:27	125:58	7	"StartWithValidFrame disabled."
water	125:27	0:0	8	"StartWithValidFrame disabled."
water	125:59	0:0	6	;
else	126:8	127:68	4
stmts	127:12	127:68	5	
call	127:12	127:67	6	msg_Dbg
arg	127:20	127:25	7	p_dec
water	127:20	0:0	8	p_dec
arg	127:27	127:67	7	"Could not disable StartWithValidFrame."
water	127:27	0:0	8	"Could not disable StartWithValidFrame."
water	127:68	0:0	6	;
water	128:4	0:0	4	}
for	130:4	153:4	2	(i = 0 ;i < p_sys -> ports;i ++)
forinit	130:8	130:13	3	i = 0 ;
water	130:8	0:0	4	i
op	130:10	0:0	4	=
water	130:12	0:0	4	0
water	130:13	0:0	4	;
cond	130:15	130:26	3	i < p_sys -> ports
water	130:15	0:0	4	i
op	130:17	0:0	4	<
water	130:19	0:0	4	p_sys
op	130:24	0:0	4	->
water	130:26	0:0	4	ports
forexpr	130:33	130:34	3	i ++
water	130:33	0:0	4	i
op	130:34	0:0	4	++
stmts	131:4	153:4	3	
water	131:4	0:0	4	{
decl	132:8	132:44	4	OmxPort	*p_port
op	132:24	0:0	4	=
op	132:26	0:0	4	&
water	132:27	0:0	4	p_sys
op	132:32	0:0	4	->
water	132:34	0:0	4	p_ports
op	132:41	0:0	4	[
water	132:42	0:0	4	i
op	132:43	0:0	4	]
water	133:8	0:0	4	p_port
op	133:14	0:0	4	->
water	133:16	0:0	4	pp_buffers
op	133:27	0:0	4	=
call	134:12	135:48	4	malloc
arg	134:19	135:48	5	p_port->definition.nBufferCountActual*sizeof(OMX_BUFFERHEADERTYPE*)
water	134:19	0:0	6	p_port
op	134:25	0:0	6	->
water	134:27	0:0	6	definition
op	134:37	0:0	6	.
water	134:38	0:0	6	nBufferCountActual
op	134:57	0:0	6	*
op	135:19	0:0	6	sizeof
water	135:25	0:0	6	(
water	135:26	0:0	6	OMX_BUFFERHEADERTYPE
op	135:46	0:0	6	*
water	135:47	0:0	6	)
water	135:49	0:0	4	;
if	136:8	140:8	4	(! p_port -> pp_buffers)
cond	136:11	136:20	5	! p_port -> pp_buffers
op	136:11	0:0	6	!
water	136:12	0:0	6	p_port
op	136:18	0:0	6	->
water	136:20	0:0	6	pp_buffers
stmts	137:8	140:8	5	
water	137:8	0:0	6	{
water	138:10	0:0	6	omx_error
op	138:20	0:0	6	=
water	138:22	0:0	6	OMX_ErrorInsufficientResources
water	138:52	0:0	6	;
call	139:10	139:59	6	CHECK_ERROR
arg	139:22	139:31	7	omx_error
water	139:22	0:0	8	omx_error
arg	139:33	139:59	7	"memory allocation failed"
water	139:33	0:0	8	"memory allocation failed"
water	139:60	0:0	6	;
water	140:8	0:0	6	}
water	141:8	0:0	4	p_port
op	141:14	0:0	4	->
water	141:16	0:0	4	i_buffers
op	141:26	0:0	4	=
water	141:28	0:0	4	p_port
op	141:34	0:0	4	->
water	141:36	0:0	4	definition
op	141:46	0:0	4	.
water	141:47	0:0	4	nBufferCountActual
water	141:65	0:0	4	;
if	143:8	152:8	4	(! p_port -> definition . bEnabled)
cond	143:11	143:31	5	! p_port -> definition . bEnabled
op	143:11	0:0	6	!
water	143:12	0:0	6	p_port
op	143:18	0:0	6	->
water	143:20	0:0	6	definition
op	143:30	0:0	6	.
water	143:31	0:0	6	bEnabled
stmts	144:8	152:8	5	
water	144:8	0:0	6	{
water	145:12	0:0	6	omx_error
op	145:22	0:0	6	=
call	145:24	146:67	6	OMX_SendCommand
arg	145:41	145:51	7	omx_handle
water	145:41	0:0	8	omx_handle
arg	145:53	145:74	7	OMX_CommandPortEnable
water	145:53	0:0	8	OMX_CommandPortEnable
arg	146:41	146:61	7	p_port->i_port_index
water	146:41	0:0	8	p_port
op	146:47	0:0	8	->
water	146:49	0:0	8	i_port_index
arg	146:63	146:67	7	NULL
water	146:63	0:0	8	NULL
water	146:68	0:0	6	;
call	147:12	148:61	6	CHECK_ERROR
arg	147:24	147:33	7	omx_error
water	147:24	0:0	8	omx_error
arg	147:35	147:76	7	"OMX_CommandPortEnable on %i failed (%x)"
water	147:35	0:0	8	"OMX_CommandPortEnable on %i failed (%x)"
arg	148:24	148:49	7	(int)p_port->i_port_index
water	148:24	0:0	8	(
water	148:25	0:0	8	int
water	148:28	0:0	8	)
water	148:29	0:0	8	p_port
op	148:35	0:0	8	->
water	148:37	0:0	8	i_port_index
arg	148:51	148:61	7	omx_error
water	148:51	0:0	8	omx_error
water	148:62	0:0	6	;
water	149:12	0:0	6	omx_error
op	149:22	0:0	6	=
call	149:24	149:98	6	WaitForSpecificOmxEvent
arg	149:48	149:67	7	&p_sys->event_queue
op	149:48	0:0	8	&
water	149:49	0:0	8	p_sys
op	149:54	0:0	8	->
water	149:56	0:0	8	event_queue
arg	149:69	149:89	7	OMX_EventCmdComplete
water	149:69	0:0	8	OMX_EventCmdComplete
arg	149:91	149:92	7	0
water	149:91	0:0	8	0
arg	149:94	149:95	7	0
water	149:94	0:0	8	0
arg	149:97	149:98	7	0
water	149:97	0:0	8	0
water	149:99	0:0	6	;
call	150:12	151:61	6	CHECK_ERROR
arg	150:24	150:33	7	omx_error
water	150:24	0:0	8	omx_error
arg	150:35	150:74	7	"Wait for PortEnable on %i failed (%x)"
water	150:35	0:0	8	"Wait for PortEnable on %i failed (%x)"
arg	151:24	151:49	7	(int)p_port->i_port_index
water	151:24	0:0	8	(
water	151:25	0:0	8	int
water	151:28	0:0	8	)
water	151:29	0:0	8	p_port
op	151:35	0:0	8	->
water	151:37	0:0	8	i_port_index
arg	151:51	151:61	7	omx_error
water	151:51	0:0	8	omx_error
water	151:62	0:0	6	;
water	152:8	0:0	6	}
water	153:4	0:0	4	}
op	154:4	0:0	2	*
water	154:5	0:0	2	p_handle
op	154:14	0:0	2	=
water	154:16	0:0	2	omx_handle
water	154:26	0:0	2	;
return	155:4	155:24	2	OMX_ErrorNone
water	155:11	0:0	3	OMX_ErrorNone
label	156:1	156:6	2	error :
call	157:4	157:43	2	DeinitialiseComponent
arg	157:26	157:31	3	p_dec
water	157:26	0:0	4	p_dec
arg	157:33	157:43	3	omx_handle
water	157:33	0:0	4	omx_handle
water	157:44	0:0	2	;
op	158:4	0:0	2	*
water	158:5	0:0	2	p_handle
op	158:14	0:0	2	=
water	158:16	0:0	2	0
water	158:17	0:0	2	;
return	159:4	159:20	2	omx_error
water	159:11	0:0	3	omx_error
