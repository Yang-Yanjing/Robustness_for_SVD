func	2:0	274:0	0	static block_t *	DecodeBlock
params	2:27	0:0	1	
param	2:29	2:45	2	decoder_t *	p_dec
param	2:47	2:66	2	block_t * *	pp_block
stmnts	0:0	273:15	1	
decl	4:4	4:39	2	decoder_sys_t	*p_sys
op	4:25	0:0	2	=
water	4:27	0:0	2	p_dec
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:20	2	block_t	*p_block
if	6:4	6:45	2	(! pp_block || ! * pp_block)
cond	6:8	6:23	3	! pp_block || ! * pp_block
op	6:8	0:0	4	!
water	6:9	0:0	4	pp_block
op	6:18	0:0	4	||
op	6:21	0:0	4	!
op	6:22	0:0	4	*
water	6:23	0:0	4	pp_block
stmts	6:34	6:45	3	
return	6:34	6:45	4	NULL
water	6:41	0:0	5	NULL
water	7:4	0:0	2	p_block
op	7:12	0:0	2	=
op	7:14	0:0	2	*
water	7:15	0:0	2	pp_block
water	7:23	0:0	2	;
if	8:4	12:4	2	(p_block -> i_flags & ( BLOCK_FLAG_DISCONTINUITY | BLOCK_FLAG_CORRUPTED ))
cond	8:8	8:71	3	p_block -> i_flags & ( BLOCK_FLAG_DISCONTINUITY | BLOCK_FLAG_CORRUPTED )
water	8:8	0:0	4	p_block
op	8:15	0:0	4	->
water	8:17	0:0	4	i_flags
op	8:24	0:0	4	&
water	8:25	0:0	4	(
water	8:26	0:0	4	BLOCK_FLAG_DISCONTINUITY
op	8:50	0:0	4	|
water	8:51	0:0	4	BLOCK_FLAG_CORRUPTED
water	8:71	0:0	4	)
stmts	9:4	12:4	3	
water	9:4	0:0	4	{
call	10:8	10:31	4	block_Release
arg	10:23	10:31	5	p_block
water	10:23	0:0	6	p_block
water	10:32	0:0	4	;
return	11:8	11:19	4	NULL
water	11:15	0:0	5	NULL
water	12:4	0:0	4	}
if	14:4	28:4	2	(p_dec -> fmt_in . i_extra && p_block -> i_buffer > 7)
cond	14:8	14:53	3	p_dec -> fmt_in . i_extra && p_block -> i_buffer > 7
water	14:8	0:0	4	p_dec
op	14:13	0:0	4	->
water	14:15	0:0	4	fmt_in
op	14:21	0:0	4	.
water	14:22	0:0	4	i_extra
op	14:30	0:0	4	&&
water	14:33	0:0	4	p_block
op	14:40	0:0	4	->
water	14:42	0:0	4	i_buffer
op	14:51	0:0	4	>
water	14:53	0:0	4	7
stmts	15:4	28:4	3	
water	15:4	0:0	4	{
if	16:8	27:8	4	(p_block -> p_buffer [ 0 ] == 0 xff && ( p_block -> p_buffer [ 1 ] & 0 xf0 ) == 0 xf0)
cond	16:12	17:48	5	p_block -> p_buffer [ 0 ] == 0 xff && ( p_block -> p_buffer [ 1 ] & 0 xf0 ) == 0 xf0
water	16:12	0:0	6	p_block
op	16:19	0:0	6	->
water	16:21	0:0	6	p_buffer
op	16:29	0:0	6	[
water	16:30	0:0	6	0
op	16:31	0:0	6	]
op	16:33	0:0	6	==
water	16:36	0:0	6	0
water	16:37	0:0	6	xff
op	16:41	0:0	6	&&
water	17:12	0:0	6	(
water	17:14	0:0	6	p_block
op	17:21	0:0	6	->
water	17:23	0:0	6	p_buffer
op	17:31	0:0	6	[
water	17:32	0:0	6	1
op	17:33	0:0	6	]
op	17:35	0:0	6	&
water	17:37	0:0	6	0
water	17:38	0:0	6	xf0
water	17:42	0:0	6	)
op	17:44	0:0	6	==
water	17:47	0:0	6	0
water	17:48	0:0	6	xf0
stmts	18:8	27:8	5	
water	18:8	0:0	6	{
decl	19:12	19:32	6	size_t	i_header_size
water	20:12	0:0	6	i_header_size
op	20:26	0:0	6	=
water	20:28	0:0	6	7
op	20:30	0:0	6	+
water	20:32	0:0	6	(
water	20:34	0:0	6	(
water	20:36	0:0	6	p_block
op	20:43	0:0	6	->
water	20:45	0:0	6	p_buffer
op	20:53	0:0	6	[
water	20:54	0:0	6	1
op	20:55	0:0	6	]
op	20:57	0:0	6	&
water	20:59	0:0	6	0
water	20:60	0:0	6	x01
water	20:64	0:0	6	)
water	20:66	0:0	6	?
water	20:68	0:0	6	0
water	20:70	0:0	6	:
water	20:72	0:0	6	2
water	20:74	0:0	6	)
water	20:75	0:0	6	;
if	22:12	26:12	6	(p_block -> i_buffer > i_header_size)
cond	22:16	22:36	7	p_block -> i_buffer > i_header_size
water	22:16	0:0	8	p_block
op	22:23	0:0	8	->
water	22:25	0:0	8	i_buffer
op	22:34	0:0	8	>
water	22:36	0:0	8	i_header_size
stmts	23:12	26:12	7	
water	23:12	0:0	8	{
water	24:16	0:0	8	p_block
op	24:23	0:0	8	->
water	24:25	0:0	8	p_buffer
op	24:34	0:0	8	+=
water	24:37	0:0	8	i_header_size
water	24:50	0:0	8	;
water	25:16	0:0	8	p_block
op	25:23	0:0	8	->
water	25:25	0:0	8	i_buffer
op	25:34	0:0	8	-=
water	25:37	0:0	8	i_header_size
water	25:50	0:0	8	;
water	26:12	0:0	8	}
water	27:8	0:0	6	}
water	28:4	0:0	4	}
if	30:4	43:4	2	(p_sys -> i_buffer_size < p_sys -> i_buffer + p_block -> i_buffer)
cond	30:8	30:58	3	p_sys -> i_buffer_size < p_sys -> i_buffer + p_block -> i_buffer
water	30:8	0:0	4	p_sys
op	30:13	0:0	4	->
water	30:15	0:0	4	i_buffer_size
op	30:29	0:0	4	<
water	30:31	0:0	4	p_sys
op	30:36	0:0	4	->
water	30:38	0:0	4	i_buffer
op	30:47	0:0	4	+
water	30:49	0:0	4	p_block
op	30:56	0:0	4	->
water	30:58	0:0	4	i_buffer
stmts	31:4	43:4	3	
water	31:4	0:0	4	{
decl	32:8	32:67	4	size_t	i_buffer_size
op	32:30	0:0	4	=
water	32:32	0:0	4	p_sys
op	32:37	0:0	4	->
water	32:39	0:0	4	i_buffer
op	32:48	0:0	4	+
water	32:50	0:0	4	p_block
op	32:57	0:0	4	->
water	32:59	0:0	4	i_buffer
decl	33:8	33:73	4	uint8_t	*p_buffer
op	33:30	0:0	4	=
call	33:32	33:72	5	realloc
arg	33:41	33:56	6	p_sys->p_buffer
water	33:41	0:0	7	p_sys
op	33:46	0:0	7	->
water	33:48	0:0	7	p_buffer
arg	33:58	33:72	6	i_buffer_size
water	33:58	0:0	7	i_buffer_size
if	34:8	38:8	4	(p_buffer)
cond	34:12	34:12	5	p_buffer
water	34:12	0:0	6	p_buffer
stmts	35:8	38:8	5	
water	35:8	0:0	6	{
water	36:12	0:0	6	p_sys
op	36:17	0:0	6	->
water	36:19	0:0	6	i_buffer_size
op	36:33	0:0	6	=
water	36:35	0:0	6	i_buffer_size
water	36:48	0:0	6	;
water	37:12	0:0	6	p_sys
op	37:17	0:0	6	->
water	37:19	0:0	6	p_buffer
op	37:33	0:0	6	=
water	37:35	0:0	6	p_buffer
water	37:43	0:0	6	;
water	38:8	0:0	6	}
else	39:8	42:8	4
stmts	40:8	42:8	5	
water	40:8	0:0	6	{
water	41:12	0:0	6	p_block
op	41:19	0:0	6	->
water	41:21	0:0	6	i_buffer
op	41:30	0:0	6	=
water	41:32	0:0	6	0
water	41:33	0:0	6	;
water	42:8	0:0	6	}
water	43:4	0:0	4	}
if	44:4	50:4	2	(p_block -> i_buffer > 0)
cond	44:8	44:28	3	p_block -> i_buffer > 0
water	44:8	0:0	4	p_block
op	44:15	0:0	4	->
water	44:17	0:0	4	i_buffer
op	44:26	0:0	4	>
water	44:28	0:0	4	0
stmts	45:4	50:4	3	
water	45:4	0:0	4	{
call	46:8	47:58	4	memcpy
arg	46:16	46:49	5	&p_sys->p_buffer[p_sys->i_buffer]
op	46:16	0:0	6	&
water	46:17	0:0	6	p_sys
op	46:22	0:0	6	->
water	46:24	0:0	6	p_buffer
op	46:32	0:0	6	[
water	46:33	0:0	6	p_sys
op	46:38	0:0	6	->
water	46:40	0:0	6	i_buffer
op	46:48	0:0	6	]
arg	47:21	47:38	5	p_block->p_buffer
water	47:21	0:0	6	p_block
op	47:28	0:0	6	->
water	47:30	0:0	6	p_buffer
arg	47:40	47:58	5	p_block->i_buffer
water	47:40	0:0	6	p_block
op	47:47	0:0	6	->
water	47:49	0:0	6	i_buffer
water	47:59	0:0	4	;
water	48:8	0:0	4	p_sys
op	48:13	0:0	4	->
water	48:15	0:0	4	i_buffer
op	48:24	0:0	4	+=
water	48:27	0:0	4	p_block
op	48:34	0:0	4	->
water	48:36	0:0	4	i_buffer
water	48:44	0:0	4	;
water	49:8	0:0	4	p_block
op	49:15	0:0	4	->
water	49:17	0:0	4	i_buffer
op	49:26	0:0	4	=
water	49:28	0:0	4	0
water	49:29	0:0	4	;
water	50:4	0:0	4	}
if	51:4	67:4	2	(p_dec -> fmt_out . audio . i_rate == 0 && p_dec -> fmt_in . i_extra > 0)
cond	51:8	51:68	3	p_dec -> fmt_out . audio . i_rate == 0 && p_dec -> fmt_in . i_extra > 0
water	51:8	0:0	4	p_dec
op	51:13	0:0	4	->
water	51:15	0:0	4	fmt_out
op	51:22	0:0	4	.
water	51:23	0:0	4	audio
op	51:28	0:0	4	.
water	51:29	0:0	4	i_rate
op	51:36	0:0	4	==
water	51:39	0:0	4	0
op	51:41	0:0	4	&&
water	51:44	0:0	4	p_dec
op	51:49	0:0	4	->
water	51:51	0:0	4	fmt_in
op	51:57	0:0	4	.
water	51:58	0:0	4	i_extra
op	51:66	0:0	4	>
water	51:68	0:0	4	0
stmts	52:4	67:4	3	
water	52:4	0:0	4	{
decl	54:8	54:28	4	unsigned long	i_rate
decl	55:8	55:32	4	unsigned char	i_channels
if	56:8	66:8	4	(faacDecInit2 (p_sys -> hfaad ,p_dec -> fmt_in . p_extra ,p_dec -> fmt_in . i_extra ,& i_rate ,& i_channels ) >= 0)
cond	56:12	58:52	5	faacDecInit2 (p_sys -> hfaad ,p_dec -> fmt_in . p_extra ,p_dec -> fmt_in . i_extra ,& i_rate ,& i_channels ) >= 0
call	56:12	58:47	6	faacDecInit2
arg	56:26	56:38	7	p_sys->hfaad
water	56:26	0:0	8	p_sys
op	56:31	0:0	8	->
water	56:33	0:0	8	hfaad
arg	56:40	56:61	7	p_dec->fmt_in.p_extra
water	56:40	0:0	8	p_dec
op	56:45	0:0	8	->
water	56:47	0:0	8	fmt_in
op	56:53	0:0	8	.
water	56:54	0:0	8	p_extra
arg	57:26	57:47	7	p_dec->fmt_in.i_extra
water	57:26	0:0	8	p_dec
op	57:31	0:0	8	->
water	57:33	0:0	8	fmt_in
op	57:39	0:0	8	.
water	57:40	0:0	8	i_extra
arg	58:26	58:33	7	&i_rate
op	58:26	0:0	8	&
water	58:27	0:0	8	i_rate
arg	58:35	58:47	7	&i_channels
op	58:35	0:0	8	&
water	58:36	0:0	8	i_channels
op	58:49	0:0	6	>=
water	58:52	0:0	6	0
stmts	59:8	66:8	5	
water	59:8	0:0	6	{
water	60:12	0:0	6	p_dec
op	60:17	0:0	6	->
water	60:19	0:0	6	fmt_out
op	60:26	0:0	6	.
water	60:27	0:0	6	audio
op	60:32	0:0	6	.
water	60:33	0:0	6	i_rate
op	60:40	0:0	6	=
water	60:42	0:0	6	i_rate
water	60:48	0:0	6	;
water	61:12	0:0	6	p_dec
op	61:17	0:0	6	->
water	61:19	0:0	6	fmt_out
op	61:26	0:0	6	.
water	61:27	0:0	6	audio
op	61:32	0:0	6	.
water	61:33	0:0	6	i_channels
op	61:44	0:0	6	=
water	61:46	0:0	6	i_channels
water	61:56	0:0	6	;
water	62:12	0:0	6	p_dec
op	62:17	0:0	6	->
water	62:19	0:0	6	fmt_out
op	62:26	0:0	6	.
water	62:27	0:0	6	audio
op	62:32	0:0	6	.
water	62:33	0:0	6	i_physical_channels
op	63:16	0:0	6	=
water	63:18	0:0	6	p_dec
op	63:23	0:0	6	->
water	63:25	0:0	6	fmt_out
op	63:32	0:0	6	.
water	63:33	0:0	6	audio
op	63:38	0:0	6	.
water	63:39	0:0	6	i_original_channels
op	64:16	0:0	6	=
water	64:18	0:0	6	pi_channels_guessed
op	64:37	0:0	6	[
water	64:38	0:0	6	i_channels
op	64:48	0:0	6	]
water	64:49	0:0	6	;
call	65:12	65:47	6	date_Init
arg	65:23	65:35	7	&p_sys->date
op	65:23	0:0	8	&
water	65:24	0:0	8	p_sys
op	65:29	0:0	8	->
water	65:31	0:0	8	date
arg	65:37	65:43	7	i_rate
water	65:37	0:0	8	i_rate
arg	65:45	65:47	7	1
water	65:45	0:0	8	1
water	65:48	0:0	6	;
water	66:8	0:0	6	}
water	67:4	0:0	4	}
if	68:4	86:4	2	(p_dec -> fmt_out . audio . i_rate == 0 && p_sys -> i_buffer)
cond	68:8	68:51	3	p_dec -> fmt_out . audio . i_rate == 0 && p_sys -> i_buffer
water	68:8	0:0	4	p_dec
op	68:13	0:0	4	->
water	68:15	0:0	4	fmt_out
op	68:22	0:0	4	.
water	68:23	0:0	4	audio
op	68:28	0:0	4	.
water	68:29	0:0	4	i_rate
op	68:36	0:0	4	==
water	68:39	0:0	4	0
op	68:41	0:0	4	&&
water	68:44	0:0	4	p_sys
op	68:49	0:0	4	->
water	68:51	0:0	4	i_buffer
stmts	69:4	86:4	3	
water	69:4	0:0	4	{
decl	70:8	70:28	4	unsigned long	i_rate
decl	71:8	71:32	4	unsigned char	i_channels
if	73:8	79:8	4	(faacDecInit (p_sys -> hfaad ,p_sys -> p_buffer ,p_sys -> i_buffer ,& i_rate ,& i_channels ) < 0)
cond	73:12	75:50	5	faacDecInit (p_sys -> hfaad ,p_sys -> p_buffer ,p_sys -> i_buffer ,& i_rate ,& i_channels ) < 0
call	73:12	75:46	6	faacDecInit
arg	73:25	73:37	7	p_sys->hfaad
water	73:25	0:0	8	p_sys
op	73:30	0:0	8	->
water	73:32	0:0	8	hfaad
arg	74:25	74:40	7	p_sys->p_buffer
water	74:25	0:0	8	p_sys
op	74:30	0:0	8	->
water	74:32	0:0	8	p_buffer
arg	74:42	74:57	7	p_sys->i_buffer
water	74:42	0:0	8	p_sys
op	74:47	0:0	8	->
water	74:49	0:0	8	i_buffer
arg	75:25	75:32	7	&i_rate
op	75:25	0:0	8	&
water	75:26	0:0	8	i_rate
arg	75:34	75:46	7	&i_channels
op	75:34	0:0	8	&
water	75:35	0:0	8	i_channels
op	75:48	0:0	6	<
water	75:50	0:0	6	0
stmts	76:8	79:8	5	
water	76:8	0:0	6	{
call	77:12	77:35	6	block_Release
arg	77:27	77:35	7	p_block
water	77:27	0:0	8	p_block
water	77:36	0:0	6	;
return	78:12	78:23	6	NULL
water	78:19	0:0	7	NULL
water	79:8	0:0	6	}
water	80:8	0:0	4	p_dec
op	80:13	0:0	4	->
water	80:15	0:0	4	fmt_out
op	80:22	0:0	4	.
water	80:23	0:0	4	audio
op	80:28	0:0	4	.
water	80:29	0:0	4	i_rate
op	80:36	0:0	4	=
water	80:38	0:0	4	i_rate
water	80:44	0:0	4	;
water	81:8	0:0	4	p_dec
op	81:13	0:0	4	->
water	81:15	0:0	4	fmt_out
op	81:22	0:0	4	.
water	81:23	0:0	4	audio
op	81:28	0:0	4	.
water	81:29	0:0	4	i_channels
op	81:40	0:0	4	=
water	81:42	0:0	4	i_channels
water	81:52	0:0	4	;
water	82:8	0:0	4	p_dec
op	82:13	0:0	4	->
water	82:15	0:0	4	fmt_out
op	82:22	0:0	4	.
water	82:23	0:0	4	audio
op	82:28	0:0	4	.
water	82:29	0:0	4	i_physical_channels
op	83:12	0:0	4	=
water	83:14	0:0	4	p_dec
op	83:19	0:0	4	->
water	83:21	0:0	4	fmt_out
op	83:28	0:0	4	.
water	83:29	0:0	4	audio
op	83:34	0:0	4	.
water	83:35	0:0	4	i_original_channels
op	84:12	0:0	4	=
water	84:14	0:0	4	pi_channels_guessed
op	84:33	0:0	4	[
water	84:34	0:0	4	i_channels
op	84:44	0:0	4	]
water	84:45	0:0	4	;
call	85:8	85:43	4	date_Init
arg	85:19	85:31	5	&p_sys->date
op	85:19	0:0	6	&
water	85:20	0:0	6	p_sys
op	85:25	0:0	6	->
water	85:27	0:0	6	date
arg	85:33	85:39	5	i_rate
water	85:33	0:0	6	i_rate
arg	85:41	85:43	5	1
water	85:41	0:0	6	1
water	85:44	0:0	4	;
water	86:4	0:0	4	}
if	87:4	90:4	2	(p_block -> i_pts > VLC_TS_INVALID && p_block -> i_pts !=date_Get (& p_sys -> date ))
cond	87:8	87:84	3	p_block -> i_pts > VLC_TS_INVALID && p_block -> i_pts !=date_Get (& p_sys -> date )
water	87:8	0:0	4	p_block
op	87:15	0:0	4	->
water	87:17	0:0	4	i_pts
op	87:23	0:0	4	>
water	87:25	0:0	4	VLC_TS_INVALID
op	87:40	0:0	4	&&
water	87:43	0:0	4	p_block
op	87:50	0:0	4	->
water	87:52	0:0	4	i_pts
op	87:58	0:0	4	!=
call	87:61	87:84	4	date_Get
arg	87:71	87:84	5	&p_sys->date
op	87:71	0:0	6	&
water	87:72	0:0	6	p_sys
op	87:77	0:0	6	->
water	87:79	0:0	6	date
stmts	88:4	90:4	3	
water	88:4	0:0	4	{
call	89:8	89:47	4	date_Set
arg	89:18	89:30	5	&p_sys->date
op	89:18	0:0	6	&
water	89:19	0:0	6	p_sys
op	89:24	0:0	6	->
water	89:26	0:0	6	date
arg	89:32	89:47	5	p_block->i_pts
water	89:32	0:0	6	p_block
op	89:39	0:0	6	->
water	89:41	0:0	6	i_pts
water	89:48	0:0	4	;
water	90:4	0:0	4	}
else	91:4	97:4	2
stmts	91:9	97:4	3	
if	91:9	97:4	4	(!date_Get (& p_sys -> date ))
cond	91:13	91:37	5	!date_Get (& p_sys -> date )
op	91:13	0:0	6	!
call	91:14	91:37	6	date_Get
arg	91:24	91:37	7	&p_sys->date
op	91:24	0:0	8	&
water	91:25	0:0	8	p_sys
op	91:30	0:0	8	->
water	91:32	0:0	8	date
stmts	92:4	97:4	5	
water	92:4	0:0	6	{
call	94:8	94:31	6	block_Release
arg	94:23	94:31	7	p_block
water	94:23	0:0	8	p_block
water	94:32	0:0	6	;
water	95:8	0:0	6	p_sys
op	95:13	0:0	6	->
water	95:15	0:0	6	i_buffer
op	95:24	0:0	6	=
water	95:26	0:0	6	0
water	95:27	0:0	6	;
return	96:8	96:19	6	NULL
water	96:15	0:0	7	NULL
water	97:4	0:0	6	}
if	99:4	266:4	2	(p_sys -> i_buffer > 1)
cond	99:8	99:26	3	p_sys -> i_buffer > 1
water	99:8	0:0	4	p_sys
op	99:13	0:0	4	->
water	99:15	0:0	4	i_buffer
op	99:24	0:0	4	>
water	99:26	0:0	4	1
stmts	100:4	266:4	3	
water	100:4	0:0	4	{
decl	101:8	101:21	4	void	*samples
decl	102:8	102:30	4	faacDecFrameInfo	frame
decl	103:8	103:22	4	block_t	*p_out
water	104:8	0:0	4	samples
op	104:16	0:0	4	=
call	104:18	105:66	4	faacDecDecode
arg	104:33	104:45	5	p_sys->hfaad
water	104:33	0:0	6	p_sys
op	104:38	0:0	6	->
water	104:40	0:0	6	hfaad
arg	104:47	104:53	5	&frame
op	104:47	0:0	6	&
water	104:48	0:0	6	frame
arg	105:33	105:48	5	p_sys->p_buffer
water	105:33	0:0	6	p_sys
op	105:38	0:0	6	->
water	105:40	0:0	6	p_buffer
arg	105:50	105:66	5	p_sys->i_buffer
water	105:50	0:0	6	p_sys
op	105:55	0:0	6	->
water	105:57	0:0	6	i_buffer
water	105:67	0:0	4	;
if	106:8	152:8	4	(frame . error > 0)
cond	106:12	106:26	5	frame . error > 0
water	106:12	0:0	6	frame
op	106:17	0:0	6	.
water	106:18	0:0	6	error
op	106:24	0:0	6	>
water	106:26	0:0	6	0
stmts	107:8	152:8	5	
water	107:8	0:0	6	{
call	108:12	108:73	6	msg_Warn
arg	108:22	108:27	7	p_dec
water	108:22	0:0	8	p_dec
arg	108:29	108:33	7	"%s"
water	108:29	0:0	8	"%s"
arg	108:35	108:73	7	faacDecGetErrorMessage(frame.error)
call	108:35	108:71	8	faacDecGetErrorMessage
arg	108:59	108:71	9	frame.error
water	108:59	0:0	10	frame
op	108:64	0:0	10	.
water	108:65	0:0	10	error
water	108:74	0:0	6	;
if	109:12	147:12	6	(frame . error == 21 || frame . error == 12)
cond	109:16	109:52	7	frame . error == 21 || frame . error == 12
water	109:16	0:0	8	frame
op	109:21	0:0	8	.
water	109:22	0:0	8	error
op	109:28	0:0	8	==
water	109:31	0:0	8	21
op	109:34	0:0	8	||
water	109:37	0:0	8	frame
op	109:42	0:0	8	.
water	109:43	0:0	8	error
op	109:49	0:0	8	==
water	109:52	0:0	8	12
stmts	110:12	147:12	7	
water	110:12	0:0	8	{
decl	117:16	117:36	8	unsigned long	i_rate
decl	118:16	118:40	8	unsigned char	i_channels
decl	119:16	119:36	8	faacDecHandle	*hfaad
decl	120:16	120:49	8	faacDecConfiguration	*cfg
water	120:41	0:0	8	,
decl	120:16	120:49	8	faacDecConfiguration	*oldcfg
water	121:16	0:0	8	oldcfg
op	121:23	0:0	8	=
call	121:25	121:70	8	faacDecGetCurrentConfiguration
arg	121:57	121:70	9	p_sys->hfaad
water	121:57	0:0	10	p_sys
op	121:62	0:0	10	->
water	121:64	0:0	10	hfaad
water	121:71	0:0	8	;
water	122:16	0:0	8	hfaad
op	122:22	0:0	8	=
call	122:24	122:36	8	faacDecOpen
water	122:37	0:0	8	;
water	123:16	0:0	8	cfg
op	123:20	0:0	8	=
call	123:22	123:60	8	faacDecGetCurrentConfiguration
arg	123:54	123:60	9	hfaad
water	123:54	0:0	10	hfaad
water	123:61	0:0	8	;
if	124:16	125:62	8	(oldcfg -> defSampleRate)
cond	124:20	124:28	9	oldcfg -> defSampleRate
water	124:20	0:0	10	oldcfg
op	124:26	0:0	10	->
water	124:28	0:0	10	defSampleRate
stmts	125:20	125:62	9	
water	125:20	0:0	10	cfg
op	125:23	0:0	10	->
water	125:25	0:0	10	defSampleRate
op	125:39	0:0	10	=
water	125:41	0:0	10	oldcfg
op	125:47	0:0	10	->
water	125:49	0:0	10	defSampleRate
water	125:62	0:0	10	;
water	126:16	0:0	8	cfg
op	126:19	0:0	8	->
water	126:21	0:0	8	defObjectType
op	126:35	0:0	8	=
water	126:37	0:0	8	oldcfg
op	126:43	0:0	8	->
water	126:45	0:0	8	defObjectType
water	126:58	0:0	8	;
water	127:16	0:0	8	cfg
op	127:19	0:0	8	->
water	127:21	0:0	8	outputFormat
op	127:34	0:0	8	=
water	127:36	0:0	8	oldcfg
op	127:42	0:0	8	->
water	127:44	0:0	8	outputFormat
water	127:56	0:0	8	;
call	128:16	128:52	8	faacDecSetConfiguration
arg	128:41	128:46	9	hfaad
water	128:41	0:0	10	hfaad
arg	128:48	128:52	9	cfg
water	128:48	0:0	10	cfg
water	128:53	0:0	8	;
if	129:16	135:16	8	(faacDecInit (hfaad ,p_sys -> p_buffer ,p_sys -> i_buffer ,& i_rate ,& i_channels ) < 0)
cond	129:20	130:56	9	faacDecInit (hfaad ,p_sys -> p_buffer ,p_sys -> i_buffer ,& i_rate ,& i_channels ) < 0
call	129:20	130:52	10	faacDecInit
arg	129:33	129:38	11	hfaad
water	129:33	0:0	12	hfaad
arg	129:40	129:55	11	p_sys->p_buffer
water	129:40	0:0	12	p_sys
op	129:45	0:0	12	->
water	129:47	0:0	12	p_buffer
arg	129:57	129:72	11	p_sys->i_buffer
water	129:57	0:0	12	p_sys
op	129:62	0:0	12	->
water	129:64	0:0	12	i_buffer
arg	130:32	130:39	11	&i_rate
op	130:32	0:0	12	&
water	130:33	0:0	12	i_rate
arg	130:40	130:52	11	&i_channels
op	130:40	0:0	12	&
water	130:41	0:0	12	i_channels
op	130:54	0:0	10	<
water	130:56	0:0	10	0
stmts	131:16	135:16	9	
water	131:16	0:0	10	{
call	133:20	133:40	10	faacDecClose
arg	133:34	133:40	11	hfaad
water	133:34	0:0	12	hfaad
water	133:41	0:0	10	;
call	134:20	134:66	10	faacDecSetConfiguration
arg	134:45	134:57	11	p_sys->hfaad
water	134:45	0:0	12	p_sys
op	134:50	0:0	12	->
water	134:52	0:0	12	hfaad
arg	134:59	134:66	11	oldcfg
water	134:59	0:0	12	oldcfg
water	134:67	0:0	10	;
water	135:16	0:0	10	}
else	136:16	146:16	8
stmts	137:16	146:16	9	
water	137:16	0:0	10	{
call	138:20	138:47	10	faacDecClose
arg	138:34	138:47	11	p_sys->hfaad
water	138:34	0:0	12	p_sys
op	138:39	0:0	12	->
water	138:41	0:0	12	hfaad
water	138:48	0:0	10	;
water	139:20	0:0	10	p_sys
op	139:25	0:0	10	->
water	139:27	0:0	10	hfaad
op	139:33	0:0	10	=
water	139:35	0:0	10	hfaad
water	139:40	0:0	10	;
water	140:20	0:0	10	p_dec
op	140:25	0:0	10	->
water	140:27	0:0	10	fmt_out
op	140:34	0:0	10	.
water	140:35	0:0	10	audio
op	140:40	0:0	10	.
water	140:41	0:0	10	i_rate
op	140:48	0:0	10	=
water	140:50	0:0	10	i_rate
water	140:56	0:0	10	;
water	141:20	0:0	10	p_dec
op	141:25	0:0	10	->
water	141:27	0:0	10	fmt_out
op	141:34	0:0	10	.
water	141:35	0:0	10	audio
op	141:40	0:0	10	.
water	141:41	0:0	10	i_channels
op	141:52	0:0	10	=
water	141:54	0:0	10	i_channels
water	141:64	0:0	10	;
water	142:20	0:0	10	p_dec
op	142:25	0:0	10	->
water	142:27	0:0	10	fmt_out
op	142:34	0:0	10	.
water	142:35	0:0	10	audio
op	142:40	0:0	10	.
water	142:41	0:0	10	i_physical_channels
op	143:24	0:0	10	=
water	143:26	0:0	10	p_dec
op	143:31	0:0	10	->
water	143:33	0:0	10	fmt_out
op	143:40	0:0	10	.
water	143:41	0:0	10	audio
op	143:46	0:0	10	.
water	143:47	0:0	10	i_original_channels
op	144:24	0:0	10	=
water	144:26	0:0	10	pi_channels_guessed
op	144:45	0:0	10	[
water	144:46	0:0	10	i_channels
op	144:56	0:0	10	]
water	144:57	0:0	10	;
call	145:20	145:55	10	date_Init
arg	145:31	145:43	11	&p_sys->date
op	145:31	0:0	12	&
water	145:32	0:0	12	p_sys
op	145:37	0:0	12	->
water	145:39	0:0	12	date
arg	145:45	145:51	11	i_rate
water	145:45	0:0	12	i_rate
arg	145:53	145:55	11	1
water	145:53	0:0	12	1
water	145:56	0:0	10	;
water	146:16	0:0	10	}
water	147:12	0:0	8	}
water	149:12	0:0	6	p_sys
op	149:17	0:0	6	->
water	149:19	0:0	6	i_buffer
op	149:28	0:0	6	=
water	149:30	0:0	6	0
water	149:31	0:0	6	;
call	150:12	150:35	6	block_Release
arg	150:27	150:35	7	p_block
water	150:27	0:0	8	p_block
water	150:36	0:0	6	;
return	151:12	151:23	6	NULL
water	151:19	0:0	7	NULL
water	152:8	0:0	6	}
if	153:8	165:8	4	(frame . channels <= 0 || frame . channels > 8 || frame . channels == 7)
cond	153:12	153:75	5	frame . channels <= 0 || frame . channels > 8 || frame . channels == 7
water	153:12	0:0	6	frame
op	153:17	0:0	6	.
water	153:18	0:0	6	channels
op	153:27	0:0	6	<=
water	153:30	0:0	6	0
op	153:32	0:0	6	||
water	153:35	0:0	6	frame
op	153:40	0:0	6	.
water	153:41	0:0	6	channels
op	153:50	0:0	6	>
water	153:52	0:0	6	8
op	153:54	0:0	6	||
water	153:57	0:0	6	frame
op	153:62	0:0	6	.
water	153:63	0:0	6	channels
op	153:72	0:0	6	==
water	153:75	0:0	6	7
stmts	154:8	165:8	5	
water	154:8	0:0	6	{
call	155:12	155:74	6	msg_Warn
arg	155:22	155:27	7	p_dec
water	155:22	0:0	8	p_dec
arg	155:29	155:57	7	"invalid channels count: %i"
water	155:29	0:0	8	"invalid channels count: %i"
arg	155:59	155:74	7	frame.channels
water	155:59	0:0	8	frame
op	155:64	0:0	8	.
water	155:65	0:0	8	channels
water	155:75	0:0	6	;
water	157:12	0:0	6	p_sys
op	157:17	0:0	6	->
water	157:19	0:0	6	i_buffer
op	157:28	0:0	6	-=
water	157:31	0:0	6	frame
op	157:36	0:0	6	.
water	157:37	0:0	6	bytesconsumed
water	157:50	0:0	6	;
if	158:12	162:12	6	(p_sys -> i_buffer > 0)
cond	158:16	158:34	7	p_sys -> i_buffer > 0
water	158:16	0:0	8	p_sys
op	158:21	0:0	8	->
water	158:23	0:0	8	i_buffer
op	158:32	0:0	8	>
water	158:34	0:0	8	0
stmts	159:12	162:12	7	
water	159:12	0:0	8	{
call	160:16	161:41	8	memmove
arg	160:25	160:40	9	p_sys->p_buffer
water	160:25	0:0	10	p_sys
op	160:30	0:0	10	->
water	160:32	0:0	10	p_buffer
arg	160:41	160:78	9	&p_sys->p_buffer[frame.bytesconsumed]
op	160:41	0:0	10	&
water	160:42	0:0	10	p_sys
op	160:47	0:0	10	->
water	160:49	0:0	10	p_buffer
op	160:57	0:0	10	[
water	160:58	0:0	10	frame
op	160:63	0:0	10	.
water	160:64	0:0	10	bytesconsumed
op	160:77	0:0	10	]
arg	161:25	161:41	9	p_sys->i_buffer
water	161:25	0:0	10	p_sys
op	161:30	0:0	10	->
water	161:32	0:0	10	i_buffer
water	161:42	0:0	8	;
water	162:12	0:0	8	}
call	163:12	163:35	6	block_Release
arg	163:27	163:35	7	p_block
water	163:27	0:0	8	p_block
water	163:36	0:0	6	;
return	164:12	164:23	6	NULL
water	164:19	0:0	7	NULL
water	165:8	0:0	6	}
if	166:8	183:8	4	(frame . samples <= 0)
cond	166:12	166:29	5	frame . samples <= 0
water	166:12	0:0	6	frame
op	166:17	0:0	6	.
water	166:18	0:0	6	samples
op	166:26	0:0	6	<=
water	166:29	0:0	6	0
stmts	167:8	183:8	5	
water	167:8	0:0	6	{
call	168:12	168:51	6	msg_Warn
arg	168:22	168:27	7	p_dec
water	168:22	0:0	8	p_dec
arg	168:29	168:51	7	"decoded zero sample"
water	168:29	0:0	8	"decoded zero sample"
water	168:52	0:0	6	;
water	170:12	0:0	6	p_sys
op	170:17	0:0	6	->
water	170:19	0:0	6	i_buffer
op	170:28	0:0	6	-=
water	170:31	0:0	6	frame
op	170:36	0:0	6	.
water	170:37	0:0	6	bytesconsumed
water	170:50	0:0	6	;
if	171:12	175:12	6	(p_sys -> i_buffer > 1)
cond	171:16	171:34	7	p_sys -> i_buffer > 1
water	171:16	0:0	8	p_sys
op	171:21	0:0	8	->
water	171:23	0:0	8	i_buffer
op	171:32	0:0	8	>
water	171:34	0:0	8	1
stmts	172:12	175:12	7	
water	172:12	0:0	8	{
call	173:16	174:41	8	memmove
arg	173:25	173:40	9	p_sys->p_buffer
water	173:25	0:0	10	p_sys
op	173:30	0:0	10	->
water	173:32	0:0	10	p_buffer
arg	173:41	173:78	9	&p_sys->p_buffer[frame.bytesconsumed]
op	173:41	0:0	10	&
water	173:42	0:0	10	p_sys
op	173:47	0:0	10	->
water	173:49	0:0	10	p_buffer
op	173:57	0:0	10	[
water	173:58	0:0	10	frame
op	173:63	0:0	10	.
water	173:64	0:0	10	bytesconsumed
op	173:77	0:0	10	]
arg	174:25	174:41	9	p_sys->i_buffer
water	174:25	0:0	10	p_sys
op	174:30	0:0	10	->
water	174:32	0:0	10	i_buffer
water	174:42	0:0	8	;
water	175:12	0:0	8	}
else	176:12	180:12	6
stmts	177:12	180:12	7	
water	177:12	0:0	8	{
water	179:16	0:0	8	p_sys
op	179:21	0:0	8	->
water	179:23	0:0	8	i_buffer
op	179:32	0:0	8	=
water	179:34	0:0	8	0
water	179:35	0:0	8	;
water	180:12	0:0	8	}
call	181:12	181:35	6	block_Release
arg	181:27	181:35	7	p_block
water	181:27	0:0	8	p_block
water	181:36	0:0	6	;
return	182:12	182:23	6	NULL
water	182:19	0:0	7	NULL
water	183:8	0:0	6	}
if	185:8	189:8	4	(p_dec -> fmt_out . audio . i_rate != frame . samplerate)
cond	185:12	185:49	5	p_dec -> fmt_out . audio . i_rate != frame . samplerate
water	185:12	0:0	6	p_dec
op	185:17	0:0	6	->
water	185:19	0:0	6	fmt_out
op	185:26	0:0	6	.
water	185:27	0:0	6	audio
op	185:32	0:0	6	.
water	185:33	0:0	6	i_rate
op	185:40	0:0	6	!=
water	185:43	0:0	6	frame
op	185:48	0:0	6	.
water	185:49	0:0	6	samplerate
stmts	186:8	189:8	5	
water	186:8	0:0	6	{
call	187:12	187:57	6	date_Init
arg	187:23	187:35	7	&p_sys->date
op	187:23	0:0	8	&
water	187:24	0:0	8	p_sys
op	187:29	0:0	8	->
water	187:31	0:0	8	date
arg	187:37	187:53	7	frame.samplerate
water	187:37	0:0	8	frame
op	187:42	0:0	8	.
water	187:43	0:0	8	samplerate
arg	187:55	187:57	7	1
water	187:55	0:0	8	1
water	187:58	0:0	6	;
call	188:12	188:51	6	date_Set
arg	188:22	188:34	7	&p_sys->date
op	188:22	0:0	8	&
water	188:23	0:0	8	p_sys
op	188:28	0:0	8	->
water	188:30	0:0	8	date
arg	188:36	188:51	7	p_block->i_pts
water	188:36	0:0	8	p_block
op	188:43	0:0	8	->
water	188:45	0:0	8	i_pts
water	188:52	0:0	6	;
water	189:8	0:0	6	}
water	190:8	0:0	4	p_block
op	190:15	0:0	4	->
water	190:17	0:0	4	i_pts
op	190:23	0:0	4	=
water	190:25	0:0	4	VLC_TS_INVALID
water	190:39	0:0	4	;
water	191:8	0:0	4	p_dec
op	191:13	0:0	4	->
water	191:15	0:0	4	fmt_out
op	191:22	0:0	4	.
water	191:23	0:0	4	audio
op	191:28	0:0	4	.
water	191:29	0:0	4	i_rate
op	191:36	0:0	4	=
water	191:38	0:0	4	frame
op	191:43	0:0	4	.
water	191:44	0:0	4	samplerate
water	191:54	0:0	4	;
water	192:8	0:0	4	p_dec
op	192:13	0:0	4	->
water	192:15	0:0	4	fmt_out
op	192:22	0:0	4	.
water	192:23	0:0	4	audio
op	192:28	0:0	4	.
water	192:29	0:0	4	i_channels
op	192:40	0:0	4	=
water	192:42	0:0	4	frame
op	192:47	0:0	4	.
water	192:48	0:0	4	channels
water	192:56	0:0	4	;
decl	194:8	194:57	4	bool	b_sbr
op	194:19	0:0	4	=
water	194:21	0:0	4	(
water	194:22	0:0	4	frame
op	194:27	0:0	4	.
water	194:28	0:0	4	sbr
op	194:32	0:0	4	==
water	194:35	0:0	4	1
water	194:36	0:0	4	)
op	194:38	0:0	4	||
water	194:41	0:0	4	(
water	194:42	0:0	4	frame
op	194:47	0:0	4	.
water	194:48	0:0	4	sbr
op	194:52	0:0	4	==
water	194:55	0:0	4	2
water	194:56	0:0	4	)
if	195:8	207:8	4	(p_sys -> b_sbr != b_sbr || p_sys -> b_ps != frame . ps)
cond	195:12	195:58	5	p_sys -> b_sbr != b_sbr || p_sys -> b_ps != frame . ps
water	195:12	0:0	6	p_sys
op	195:17	0:0	6	->
water	195:19	0:0	6	b_sbr
op	195:25	0:0	6	!=
water	195:28	0:0	6	b_sbr
op	195:34	0:0	6	||
water	195:37	0:0	6	p_sys
op	195:42	0:0	6	->
water	195:44	0:0	6	b_ps
op	195:49	0:0	6	!=
water	195:52	0:0	6	frame
op	195:57	0:0	6	.
water	195:58	0:0	6	ps
stmts	196:8	207:8	5	
water	196:8	0:0	6	{
decl	197:12	198:56	6	const char	*psz_ext
op	197:32	0:0	6	=
water	197:34	0:0	6	(
water	197:35	0:0	6	b_sbr
op	197:41	0:0	6	&&
water	197:44	0:0	6	frame
op	197:49	0:0	6	.
water	197:50	0:0	6	ps
water	197:52	0:0	6	)
water	197:54	0:0	6	?
water	197:56	0:0	6	"SBR+PS"
water	197:65	0:0	6	:
water	198:36	0:0	6	b_sbr
water	198:42	0:0	6	?
water	198:44	0:0	6	"SBR"
water	198:50	0:0	6	:
water	198:52	0:0	6	"PS"
call	199:12	200:62	6	msg_Dbg
arg	199:21	199:26	7	p_dec
water	199:21	0:0	8	p_dec
arg	199:28	199:68	7	"AAC %s (channels: %u, samplerate: %lu)"
water	199:28	0:0	8	"AAC %s (channels: %u, samplerate: %lu)"
arg	200:20	200:27	7	psz_ext
water	200:20	0:0	8	psz_ext
arg	200:29	200:43	7	frame.channels
water	200:29	0:0	8	frame
op	200:34	0:0	8	.
water	200:35	0:0	8	channels
arg	200:45	200:62	7	frame.samplerate
water	200:45	0:0	8	frame
op	200:50	0:0	8	.
water	200:51	0:0	8	samplerate
water	200:63	0:0	6	;
if	201:12	202:53	6	(! p_dec -> p_description)
cond	201:16	201:24	7	! p_dec -> p_description
op	201:16	0:0	8	!
water	201:17	0:0	8	p_dec
op	201:22	0:0	8	->
water	201:24	0:0	8	p_description
stmts	202:16	202:53	7	
water	202:16	0:0	8	p_dec
op	202:21	0:0	8	->
water	202:23	0:0	8	p_description
op	202:37	0:0	8	=
call	202:39	202:52	8	vlc_meta_New
water	202:53	0:0	8	;
if	203:12	204:86	6	(p_dec -> p_description)
cond	203:16	203:23	7	p_dec -> p_description
water	203:16	0:0	8	p_dec
op	203:21	0:0	8	->
water	203:23	0:0	8	p_description
stmts	204:16	204:86	7	
call	204:16	204:85	8	vlc_meta_AddExtra
arg	204:35	204:55	9	p_dec->p_description
water	204:35	0:0	10	p_dec
op	204:40	0:0	10	->
water	204:42	0:0	10	p_description
arg	204:57	204:75	9	_("AAC extension")
call	204:57	204:74	10	_
arg	204:59	204:74	11	"AAC extension"
water	204:59	0:0	12	"AAC extension"
arg	204:77	204:85	9	psz_ext
water	204:77	0:0	10	psz_ext
water	204:86	0:0	8	;
water	205:12	0:0	6	p_sys
op	205:17	0:0	6	->
water	205:19	0:0	6	b_sbr
op	205:25	0:0	6	=
water	205:27	0:0	6	b_sbr
water	205:32	0:0	6	;
water	206:12	0:0	6	p_sys
op	206:17	0:0	6	->
water	206:19	0:0	6	b_ps
op	206:24	0:0	6	=
water	206:26	0:0	6	frame
op	206:31	0:0	6	.
water	206:32	0:0	6	ps
water	206:34	0:0	6	;
water	207:8	0:0	6	}
water	209:8	0:0	4	p_dec
op	209:13	0:0	4	->
water	209:15	0:0	4	fmt_out
op	209:22	0:0	4	.
water	209:23	0:0	4	audio
op	209:28	0:0	4	.
water	209:29	0:0	4	i_physical_channels
op	209:49	0:0	4	=
water	209:51	0:0	4	0
water	209:52	0:0	4	;
decl	210:8	210:50	4	const uint32_t	nbChannels
op	210:34	0:0	4	=
water	210:36	0:0	4	frame
op	210:41	0:0	4	.
water	210:42	0:0	4	channels
water	211:8	0:0	4	unsigned
water	211:17	0:0	4	j
water	211:18	0:0	4	;
for	212:8	232:8	4	(unsigned i = 0 ;i < nbChannels;i ++)
forinit	212:13	212:27	5	unsigned i = 0 ;
water	212:13	0:0	6	unsigned
water	212:22	0:0	6	i
op	212:24	0:0	6	=
water	212:26	0:0	6	0
water	212:27	0:0	6	;
cond	212:29	212:33	5	i < nbChannels
water	212:29	0:0	6	i
op	212:31	0:0	6	<
water	212:33	0:0	6	nbChannels
forexpr	212:45	212:46	5	i ++
water	212:45	0:0	6	i
op	212:46	0:0	6	++
stmts	213:8	232:8	5	
water	213:8	0:0	6	{
for	215:12	219:12	6	(j = 0 ;j < MAX_CHANNEL_POSITIONS;j ++)
forinit	215:17	215:22	7	j = 0 ;
water	215:17	0:0	8	j
op	215:19	0:0	8	=
water	215:21	0:0	8	0
water	215:22	0:0	8	;
cond	215:24	215:28	7	j < MAX_CHANNEL_POSITIONS
water	215:24	0:0	8	j
op	215:26	0:0	8	<
water	215:28	0:0	8	MAX_CHANNEL_POSITIONS
forexpr	215:51	215:52	7	j ++
water	215:51	0:0	8	j
op	215:52	0:0	8	++
stmts	216:12	219:12	7	
water	216:12	0:0	8	{
if	217:16	218:25	8	(frame . channel_position [ i ] == pi_channels_in [ j ])
cond	217:20	217:65	9	frame . channel_position [ i ] == pi_channels_in [ j ]
water	217:20	0:0	10	frame
op	217:25	0:0	10	.
water	217:26	0:0	10	channel_position
op	217:42	0:0	10	[
water	217:43	0:0	10	i
op	217:44	0:0	10	]
op	217:46	0:0	10	==
water	217:49	0:0	10	pi_channels_in
op	217:63	0:0	10	[
water	217:64	0:0	10	j
op	217:65	0:0	10	]
stmts	218:20	218:25	9	
break	218:20	218:25	10	
water	219:12	0:0	8	}
if	220:12	225:12	6	(j >= MAX_CHANNEL_POSITIONS)
cond	220:16	220:21	7	j >= MAX_CHANNEL_POSITIONS
water	220:16	0:0	8	j
op	220:18	0:0	8	>=
water	220:21	0:0	8	MAX_CHANNEL_POSITIONS
stmts	221:12	225:12	7	
water	221:12	0:0	8	{
call	222:16	222:60	8	msg_Warn
arg	222:26	222:31	9	p_dec
water	222:26	0:0	10	p_dec
arg	222:33	222:60	9	"unknown channel ordering"
water	222:33	0:0	10	"unknown channel ordering"
water	222:61	0:0	8	;
water	224:16	0:0	8	j
op	224:18	0:0	8	=
water	224:20	0:0	8	i
water	224:21	0:0	8	;
water	225:12	0:0	8	}
water	227:12	0:0	6	p_sys
op	227:17	0:0	6	->
water	227:19	0:0	6	pi_channel_positions
op	227:39	0:0	6	[
water	227:40	0:0	6	i
op	227:41	0:0	6	]
op	227:43	0:0	6	=
water	227:45	0:0	6	pi_channels_out
op	227:60	0:0	6	[
water	227:61	0:0	6	j
op	227:62	0:0	6	]
water	227:63	0:0	6	;
if	228:12	229:32	6	(p_dec -> fmt_out . audio . i_physical_channels & pi_channels_out [ j ])
cond	228:16	228:76	7	p_dec -> fmt_out . audio . i_physical_channels & pi_channels_out [ j ]
water	228:16	0:0	8	p_dec
op	228:21	0:0	8	->
water	228:23	0:0	8	fmt_out
op	228:30	0:0	8	.
water	228:31	0:0	8	audio
op	228:36	0:0	8	.
water	228:37	0:0	8	i_physical_channels
op	228:57	0:0	8	&
water	228:59	0:0	8	pi_channels_out
op	228:74	0:0	8	[
water	228:75	0:0	8	j
op	228:76	0:0	8	]
stmts	229:16	229:32	7	
water	229:16	0:0	8	frame
op	229:21	0:0	8	.
water	229:22	0:0	8	channels
op	229:30	0:0	8	--
water	229:32	0:0	8	;
else	230:12	231:78	6
stmts	231:16	231:78	7	
water	231:16	0:0	8	p_dec
op	231:21	0:0	8	->
water	231:23	0:0	8	fmt_out
op	231:30	0:0	8	.
water	231:31	0:0	8	audio
op	231:36	0:0	8	.
water	231:37	0:0	8	i_physical_channels
op	231:57	0:0	8	|=
water	231:60	0:0	8	pi_channels_out
op	231:75	0:0	8	[
water	231:76	0:0	8	j
op	231:77	0:0	8	]
water	231:78	0:0	8	;
water	232:8	0:0	6	}
if	233:8	238:8	4	(nbChannels != frame . channels)
cond	233:13	233:33	5	nbChannels != frame . channels
water	233:13	0:0	6	nbChannels
op	233:24	0:0	6	!=
water	233:27	0:0	6	frame
op	233:32	0:0	6	.
water	233:33	0:0	6	channels
stmts	234:8	238:8	5	
water	234:8	0:0	6	{
water	235:12	0:0	6	p_dec
op	235:17	0:0	6	->
water	235:19	0:0	6	fmt_out
op	235:26	0:0	6	.
water	235:27	0:0	6	audio
op	235:32	0:0	6	.
water	235:33	0:0	6	i_physical_channels
op	236:16	0:0	6	=
water	236:18	0:0	6	p_dec
op	236:23	0:0	6	->
water	236:25	0:0	6	fmt_out
op	236:32	0:0	6	.
water	236:33	0:0	6	audio
op	236:38	0:0	6	.
water	236:39	0:0	6	i_original_channels
op	237:16	0:0	6	=
water	237:18	0:0	6	pi_channels_guessed
op	237:37	0:0	6	[
water	237:38	0:0	6	nbChannels
op	237:48	0:0	6	]
water	237:49	0:0	6	;
water	238:8	0:0	6	}
else	239:8	243:8	4
stmts	240:8	243:8	5	
water	240:8	0:0	6	{
water	241:12	0:0	6	p_dec
op	241:17	0:0	6	->
water	241:19	0:0	6	fmt_out
op	241:26	0:0	6	.
water	241:27	0:0	6	audio
op	241:32	0:0	6	.
water	241:33	0:0	6	i_original_channels
op	241:53	0:0	6	=
water	242:16	0:0	6	p_dec
op	242:21	0:0	6	->
water	242:23	0:0	6	fmt_out
op	242:30	0:0	6	.
water	242:31	0:0	6	audio
op	242:36	0:0	6	.
water	242:37	0:0	6	i_physical_channels
water	242:56	0:0	6	;
water	243:8	0:0	6	}
water	244:8	0:0	4	p_dec
op	244:13	0:0	4	->
water	244:15	0:0	4	fmt_out
op	244:22	0:0	4	.
water	244:23	0:0	4	audio
op	244:28	0:0	4	.
water	244:29	0:0	4	i_channels
op	244:40	0:0	4	=
water	244:42	0:0	4	nbChannels
water	244:52	0:0	4	;
water	245:8	0:0	4	p_out
op	245:14	0:0	4	=
call	245:16	245:74	4	decoder_NewAudioBuffer
arg	245:40	245:45	5	p_dec
water	245:40	0:0	6	p_dec
arg	245:47	245:74	5	frame.samples/nbChannels
water	245:47	0:0	6	frame
op	245:52	0:0	6	.
water	245:53	0:0	6	samples
op	245:61	0:0	6	/
water	245:63	0:0	6	nbChannels
water	245:75	0:0	4	;
if	246:8	251:8	4	(p_out == NULL)
cond	246:12	246:21	5	p_out == NULL
water	246:12	0:0	6	p_out
op	246:18	0:0	6	==
water	246:21	0:0	6	NULL
stmts	247:8	251:8	5	
water	247:8	0:0	6	{
water	248:12	0:0	6	p_sys
op	248:17	0:0	6	->
water	248:19	0:0	6	i_buffer
op	248:28	0:0	6	=
water	248:30	0:0	6	0
water	248:31	0:0	6	;
call	249:12	249:35	6	block_Release
arg	249:27	249:35	7	p_block
water	249:27	0:0	8	p_block
water	249:36	0:0	6	;
return	250:12	250:23	6	NULL
water	250:19	0:0	7	NULL
water	251:8	0:0	6	}
water	252:8	0:0	4	p_out
op	252:13	0:0	4	->
water	252:15	0:0	4	i_pts
op	252:21	0:0	4	=
call	252:23	252:46	4	date_Get
arg	252:33	252:46	5	&p_sys->date
op	252:33	0:0	6	&
water	252:34	0:0	6	p_sys
op	252:39	0:0	6	->
water	252:41	0:0	6	date
water	252:47	0:0	4	;
water	253:8	0:0	4	p_out
op	253:13	0:0	4	->
water	253:15	0:0	4	i_length
op	253:24	0:0	4	=
call	253:26	254:69	4	date_Increment
arg	253:42	253:54	5	&p_sys->date
op	253:42	0:0	6	&
water	253:43	0:0	6	p_sys
op	253:48	0:0	6	->
water	253:50	0:0	6	date
arg	254:42	254:69	5	frame.samples/nbChannels
water	254:42	0:0	6	frame
op	254:47	0:0	6	.
water	254:48	0:0	6	samples
op	254:56	0:0	6	/
water	254:58	0:0	6	nbChannels
op	255:26	0:0	4	-
water	255:28	0:0	4	p_out
op	255:33	0:0	4	->
water	255:35	0:0	4	i_pts
water	255:40	0:0	4	;
call	256:8	258:50	4	DoReordering
arg	256:22	256:49	5	(uint32_t*)p_out->p_buffer
water	256:22	0:0	6	(
water	256:23	0:0	6	uint32_t
op	256:32	0:0	6	*
water	256:33	0:0	6	)
water	256:34	0:0	6	p_out
op	256:39	0:0	6	->
water	256:41	0:0	6	p_buffer
arg	256:51	256:58	5	samples
water	256:51	0:0	6	samples
arg	257:22	257:48	5	frame.samples/nbChannels
water	257:22	0:0	6	frame
op	257:27	0:0	6	.
water	257:28	0:0	6	samples
op	257:36	0:0	6	/
water	257:38	0:0	6	nbChannels
arg	257:50	257:60	5	nbChannels
water	257:50	0:0	6	nbChannels
arg	258:22	258:50	5	p_sys->pi_channel_positions
water	258:22	0:0	6	p_sys
op	258:27	0:0	6	->
water	258:29	0:0	6	pi_channel_positions
water	258:51	0:0	4	;
water	259:8	0:0	4	p_sys
op	259:13	0:0	4	->
water	259:15	0:0	4	i_buffer
op	259:24	0:0	4	-=
water	259:27	0:0	4	frame
op	259:32	0:0	4	.
water	259:33	0:0	4	bytesconsumed
water	259:46	0:0	4	;
if	260:8	264:8	4	(p_sys -> i_buffer > 0)
cond	260:12	260:30	5	p_sys -> i_buffer > 0
water	260:12	0:0	6	p_sys
op	260:17	0:0	6	->
water	260:19	0:0	6	i_buffer
op	260:28	0:0	6	>
water	260:30	0:0	6	0
stmts	261:8	264:8	5	
water	261:8	0:0	6	{
call	262:12	263:37	6	memmove
arg	262:21	262:36	7	p_sys->p_buffer
water	262:21	0:0	8	p_sys
op	262:26	0:0	8	->
water	262:28	0:0	8	p_buffer
arg	262:38	262:75	7	&p_sys->p_buffer[frame.bytesconsumed]
op	262:38	0:0	8	&
water	262:39	0:0	8	p_sys
op	262:44	0:0	8	->
water	262:46	0:0	8	p_buffer
op	262:54	0:0	8	[
water	262:55	0:0	8	frame
op	262:60	0:0	8	.
water	262:61	0:0	8	bytesconsumed
op	262:74	0:0	8	]
arg	263:21	263:37	7	p_sys->i_buffer
water	263:21	0:0	8	p_sys
op	263:26	0:0	8	->
water	263:28	0:0	8	i_buffer
water	263:38	0:0	6	;
water	264:8	0:0	6	}
return	265:8	265:20	4	p_out
water	265:15	0:0	5	p_out
water	266:4	0:0	4	}
else	267:4	271:4	2
stmts	268:4	271:4	3	
water	268:4	0:0	4	{
water	270:8	0:0	4	p_sys
op	270:13	0:0	4	->
water	270:15	0:0	4	i_buffer
op	270:24	0:0	4	=
water	270:26	0:0	4	0
water	270:27	0:0	4	;
water	271:4	0:0	4	}
call	272:4	272:27	2	block_Release
arg	272:19	272:27	3	p_block
water	272:19	0:0	4	p_block
water	272:28	0:0	2	;
return	273:4	273:15	2	NULL
water	273:11	0:0	3	NULL
