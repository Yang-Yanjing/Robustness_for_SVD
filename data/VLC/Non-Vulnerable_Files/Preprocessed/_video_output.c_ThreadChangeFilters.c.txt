func	2:0	79:0	0	static void	ThreadChangeFilters
params	2:31	0:0	1	
param	2:32	2:51	2	vout_thread_t *	vout
param	3:32	3:60	2	const video_format_t *	source
param	4:32	4:51	2	const char *	filters
param	5:32	5:46	2	bool	is_locked
stmnts	7:4	78:47	1	
call	7:4	7:37	2	ThreadFilterFlush
arg	7:22	7:26	3	vout
water	7:22	0:0	4	vout
arg	7:28	7:37	3	is_locked
water	7:28	0:0	4	is_locked
water	7:38	0:0	2	;
decl	8:4	8:28	2	vlc_array_t	array_static
decl	9:4	9:33	2	vlc_array_t	array_interactive
call	10:4	10:32	2	vlc_array_init
arg	10:19	10:32	3	&array_static
op	10:19	0:0	4	&
water	10:20	0:0	4	array_static
water	10:33	0:0	2	;
call	11:4	11:37	2	vlc_array_init
arg	11:19	11:37	3	&array_interactive
op	11:19	0:0	4	&
water	11:20	0:0	4	array_interactive
water	11:38	0:0	2	;
decl	12:4	12:52	2	char	*current
op	12:18	0:0	2	=
water	12:20	0:0	2	filters
water	12:28	0:0	2	?
call	12:30	12:44	3	strdup
arg	12:37	12:44	4	filters
water	12:37	0:0	5	filters
water	12:46	0:0	2	:
water	12:48	0:0	2	NULL
while	13:4	34:4	2	(current)
cond	13:11	13:11	3	current
water	13:11	0:0	4	current
stmts	13:20	34:4	3	
water	13:20	0:0	4	{
decl	14:8	14:27	4	config_chain_t	*cfg
decl	15:8	15:18	4	char	*name
decl	16:8	16:61	4	char	*next
op	16:19	0:0	4	=
call	16:21	16:60	5	config_ChainCreate
arg	16:40	16:45	6	&name
op	16:40	0:0	7	&
water	16:41	0:0	7	name
arg	16:47	16:51	6	&cfg
op	16:47	0:0	7	&
water	16:48	0:0	7	cfg
arg	16:53	16:60	6	current
water	16:53	0:0	7	current
if	17:8	27:8	4	(name && * name)
cond	17:12	17:21	5	name && * name
water	17:12	0:0	6	name
op	17:17	0:0	6	&&
op	17:20	0:0	6	*
water	17:21	0:0	6	name
stmts	17:27	27:8	5	
water	17:27	0:0	6	{
decl	18:12	18:50	6	vout_filter_t	*e
op	18:29	0:0	6	=
call	18:31	18:49	7	xmalloc
arg	18:39	18:49	8	sizeof(*e)
op	18:39	0:0	9	sizeof
water	18:45	0:0	9	(
op	18:46	0:0	9	*
water	18:47	0:0	9	e
water	18:48	0:0	9	)
water	19:12	0:0	6	e
op	19:13	0:0	6	->
water	19:15	0:0	6	name
op	19:20	0:0	6	=
water	19:22	0:0	6	name
water	19:26	0:0	6	;
water	20:12	0:0	6	e
op	20:13	0:0	6	->
water	20:15	0:0	6	cfg
op	20:20	0:0	6	=
water	20:22	0:0	6	cfg
water	20:25	0:0	6	;
if	21:12	24:12	6	(!strcmp (e -> name ,"deinterlace" ) || !strcmp (e -> name ,"postproc" ))
cond	21:16	22:43	7	!strcmp (e -> name ,"deinterlace" ) || !strcmp (e -> name ,"postproc" )
op	21:16	0:0	8	!
call	21:17	21:46	8	strcmp
arg	21:24	21:31	9	e->name
water	21:24	0:0	10	e
op	21:25	0:0	10	->
water	21:27	0:0	10	name
arg	21:33	21:46	9	"deinterlace"
water	21:33	0:0	10	"deinterlace"
op	21:48	0:0	8	||
op	22:16	0:0	8	!
call	22:17	22:43	8	strcmp
arg	22:24	22:31	9	e->name
water	22:24	0:0	10	e
op	22:25	0:0	10	->
water	22:27	0:0	10	name
arg	22:33	22:43	9	"postproc"
water	22:33	0:0	10	"postproc"
stmts	22:46	24:12	7	
water	22:46	0:0	8	{
call	23:16	23:49	8	vlc_array_append
arg	23:33	23:46	9	&array_static
op	23:33	0:0	10	&
water	23:34	0:0	10	array_static
arg	23:48	23:49	9	e
water	23:48	0:0	10	e
water	23:50	0:0	8	;
water	24:12	0:0	8	}
else	24:14	26:12	6
stmts	24:19	26:12	7	
water	24:19	0:0	8	{
call	25:16	25:54	8	vlc_array_append
arg	25:33	25:51	9	&array_interactive
op	25:33	0:0	10	&
water	25:34	0:0	10	array_interactive
arg	25:53	25:54	9	e
water	25:53	0:0	10	e
water	25:55	0:0	8	;
water	26:12	0:0	8	}
water	27:8	0:0	6	}
else	27:10	31:8	4
stmts	27:15	31:8	5	
water	27:15	0:0	6	{
if	28:12	29:40	6	(cfg)
cond	28:16	28:16	7	cfg
water	28:16	0:0	8	cfg
stmts	29:16	29:40	7	
call	29:16	29:39	8	config_ChainDestroy
arg	29:36	29:39	9	cfg
water	29:36	0:0	10	cfg
water	29:40	0:0	8	;
call	30:12	30:21	6	free
arg	30:17	30:21	7	name
water	30:17	0:0	8	name
water	30:22	0:0	6	;
water	31:8	0:0	6	}
call	32:8	32:20	4	free
arg	32:13	32:20	5	current
water	32:13	0:0	6	current
water	32:21	0:0	4	;
water	33:8	0:0	4	current
op	33:16	0:0	4	=
water	33:18	0:0	4	next
water	33:22	0:0	4	;
water	34:4	0:0	4	}
if	35:4	36:45	2	(! is_locked)
cond	35:8	35:9	3	! is_locked
op	35:8	0:0	4	!
water	35:9	0:0	4	is_locked
stmts	36:8	36:45	3	
call	36:8	36:44	4	vlc_mutex_lock
arg	36:23	36:44	5	&vout->p->filter.lock
op	36:23	0:0	6	&
water	36:24	0:0	6	vout
op	36:28	0:0	6	->
water	36:30	0:0	6	p
op	36:31	0:0	6	->
water	36:33	0:0	6	filter
op	36:39	0:0	6	.
water	36:40	0:0	6	lock
water	36:45	0:0	4	;
decl	37:4	37:26	2	es_format_t	fmt_target
call	38:4	38:82	2	es_format_InitFromVideo
arg	38:28	38:39	3	&fmt_target
op	38:28	0:0	4	&
water	38:29	0:0	4	fmt_target
arg	38:41	38:82	3	source?source:&vout->p->filter.format
water	38:41	0:0	4	source
water	38:48	0:0	4	?
water	38:50	0:0	4	source
water	38:57	0:0	4	:
op	38:59	0:0	4	&
water	38:60	0:0	4	vout
op	38:64	0:0	4	->
water	38:66	0:0	4	p
op	38:67	0:0	4	->
water	38:69	0:0	4	filter
op	38:75	0:0	4	.
water	38:76	0:0	4	format
water	38:83	0:0	2	;
decl	39:4	39:40	2	es_format_t	fmt_current
op	39:28	0:0	2	=
water	39:30	0:0	2	fmt_target
for	40:4	58:4	2	( int a = 0 ;a < 2;a ++)
forinit	0:0	40:18	3	 int a = 0 ;
decl	40:9	40:18	4	int	a
op	40:15	0:0	4	=
water	40:17	0:0	4	0
cond	40:20	40:24	3	a < 2
water	40:20	0:0	4	a
op	40:22	0:0	4	<
water	40:24	0:0	4	2
forexpr	40:27	40:28	3	a ++
water	40:27	0:0	4	a
op	40:28	0:0	4	++
stmts	40:32	58:4	3	
water	40:32	0:0	4	{
decl	41:8	42:59	4	vlc_array_t	*array
op	41:30	0:0	4	=
water	41:32	0:0	4	a
op	41:34	0:0	4	==
water	41:37	0:0	4	0
water	41:39	0:0	4	?
op	41:41	0:0	4	&
water	41:42	0:0	4	array_static
water	41:55	0:0	4	:
op	42:41	0:0	4	&
water	42:42	0:0	4	array_interactive
decl	43:8	44:74	4	filter_chain_t	*chain
op	43:30	0:0	4	=
water	43:32	0:0	4	a
op	43:34	0:0	4	==
water	43:37	0:0	4	0
water	43:39	0:0	4	?
water	43:41	0:0	4	vout
op	43:45	0:0	4	->
water	43:47	0:0	4	p
op	43:48	0:0	4	->
water	43:50	0:0	4	filter
op	43:56	0:0	4	.
water	43:57	0:0	4	chain_static
water	43:70	0:0	4	:
water	44:41	0:0	4	vout
op	44:45	0:0	4	->
water	44:47	0:0	4	p
op	44:48	0:0	4	->
water	44:50	0:0	4	filter
op	44:56	0:0	4	.
water	44:57	0:0	4	chain_interactive
call	45:8	45:60	4	filter_chain_Reset
arg	45:27	45:32	5	chain
water	45:27	0:0	6	chain
arg	45:34	45:46	5	&fmt_current
op	45:34	0:0	6	&
water	45:35	0:0	6	fmt_current
arg	45:48	45:60	5	&fmt_current
op	45:48	0:0	6	&
water	45:49	0:0	6	fmt_current
water	45:61	0:0	4	;
for	46:8	55:8	4	( int i = 0 ;i <vlc_array_count (array );i ++)
forinit	0:0	46:22	5	 int i = 0 ;
decl	46:13	46:22	6	int	i
op	46:19	0:0	6	=
water	46:21	0:0	6	0
cond	46:24	46:49	5	i <vlc_array_count (array )
water	46:24	0:0	6	i
op	46:26	0:0	6	<
call	46:28	46:49	6	vlc_array_count
arg	46:44	46:49	7	array
water	46:44	0:0	8	array
forexpr	46:52	46:53	5	i ++
water	46:52	0:0	6	i
op	46:53	0:0	6	++
stmts	46:57	55:8	5	
water	46:57	0:0	6	{
decl	47:12	47:64	6	vout_filter_t	*e
op	47:29	0:0	6	=
call	47:31	47:63	7	vlc_array_item_at_index
arg	47:55	47:60	8	array
water	47:55	0:0	9	array
arg	47:62	47:63	8	i
water	47:62	0:0	9	i
call	48:12	48:89	6	msg_Dbg
arg	48:20	48:24	7	vout
water	48:20	0:0	8	vout
arg	48:26	48:45	7	"Adding '%s' as %s"
water	48:26	0:0	8	"Adding '%s' as %s"
arg	48:47	48:54	7	e->name
water	48:47	0:0	8	e
op	48:48	0:0	8	->
water	48:50	0:0	8	name
arg	48:56	48:89	7	a==0?"static":"interactive"
water	48:56	0:0	8	a
op	48:58	0:0	8	==
water	48:61	0:0	8	0
water	48:63	0:0	8	?
water	48:65	0:0	8	"static"
water	48:74	0:0	8	:
water	48:76	0:0	8	"interactive"
water	48:90	0:0	6	;
if	49:12	52:12	6	(!filter_chain_AppendFilter (chain ,e -> name ,e -> cfg ,NULL ,NULL ))
cond	49:16	49:77	7	!filter_chain_AppendFilter (chain ,e -> name ,e -> cfg ,NULL ,NULL )
op	49:16	0:0	8	!
call	49:17	49:77	8	filter_chain_AppendFilter
arg	49:43	49:48	9	chain
water	49:43	0:0	10	chain
arg	49:50	49:57	9	e->name
water	49:50	0:0	10	e
op	49:51	0:0	10	->
water	49:53	0:0	10	name
arg	49:59	49:65	9	e->cfg
water	49:59	0:0	10	e
op	49:60	0:0	10	->
water	49:62	0:0	10	cfg
arg	49:67	49:71	9	NULL
water	49:67	0:0	10	NULL
arg	49:73	49:77	9	NULL
water	49:73	0:0	10	NULL
stmts	49:80	52:12	7	
water	49:80	0:0	8	{
call	50:16	50:66	8	msg_Err
arg	50:24	50:28	9	vout
water	50:24	0:0	10	vout
arg	50:30	50:57	9	"Failed to add filter '%s'"
water	50:30	0:0	10	"Failed to add filter '%s'"
arg	50:59	50:66	9	e->name
water	50:59	0:0	10	e
op	50:60	0:0	10	->
water	50:62	0:0	10	name
water	50:67	0:0	8	;
call	51:16	51:42	8	config_ChainDestroy
arg	51:36	51:42	9	e->cfg
water	51:36	0:0	10	e
op	51:37	0:0	10	->
water	51:39	0:0	10	cfg
water	51:43	0:0	8	;
water	52:12	0:0	8	}
call	53:12	53:24	6	free
arg	53:17	53:24	7	e->name
water	53:17	0:0	8	e
op	53:18	0:0	8	->
water	53:20	0:0	8	name
water	53:25	0:0	6	;
call	54:12	54:18	6	free
arg	54:17	54:18	7	e
water	54:17	0:0	8	e
water	54:19	0:0	6	;
water	55:8	0:0	6	}
water	56:8	0:0	4	fmt_current
op	56:20	0:0	4	=
call	56:22	56:51	4	*filter_chain_GetFmtOut
arg	56:46	56:51	5	chain
water	56:46	0:0	6	chain
water	56:52	0:0	4	;
call	57:8	57:29	4	vlc_array_clear
arg	57:24	57:29	5	array
water	57:24	0:0	6	array
water	57:30	0:0	4	;
water	58:4	0:0	4	}
if	59:4	67:4	2	(!es_format_IsSimilar (& fmt_current ,& fmt_target ))
cond	59:8	59:54	3	!es_format_IsSimilar (& fmt_current ,& fmt_target )
op	59:8	0:0	4	!
call	59:9	59:54	4	es_format_IsSimilar
arg	59:29	59:41	5	&fmt_current
op	59:29	0:0	6	&
water	59:30	0:0	6	fmt_current
arg	59:43	59:54	5	&fmt_target
op	59:43	0:0	6	&
water	59:44	0:0	6	fmt_target
stmts	59:57	67:4	3	
water	59:57	0:0	4	{
call	60:8	60:72	4	msg_Dbg
arg	60:16	60:20	5	vout
water	60:16	0:0	6	vout
arg	60:22	60:72	5	"Adding a filter to compensate for format changes"
water	60:22	0:0	6	"Adding a filter to compensate for format changes"
water	60:73	0:0	4	;
if	61:8	66:8	4	(!filter_chain_AppendFilter (vout -> p -> filter . chain_interactive ,NULL ,NULL ,& fmt_current ,& fmt_target ))
cond	61:12	62:64	5	!filter_chain_AppendFilter (vout -> p -> filter . chain_interactive ,NULL ,NULL ,& fmt_current ,& fmt_target )
op	61:12	0:0	6	!
call	61:13	62:64	6	filter_chain_AppendFilter
arg	61:39	61:72	7	vout->p->filter.chain_interactive
water	61:39	0:0	8	vout
op	61:43	0:0	8	->
water	61:45	0:0	8	p
op	61:46	0:0	8	->
water	61:48	0:0	8	filter
op	61:54	0:0	8	.
water	61:55	0:0	8	chain_interactive
arg	61:74	61:78	7	NULL
water	61:74	0:0	8	NULL
arg	61:80	61:84	7	NULL
water	61:80	0:0	8	NULL
arg	62:39	62:51	7	&fmt_current
op	62:39	0:0	8	&
water	62:40	0:0	8	fmt_current
arg	62:53	62:64	7	&fmt_target
op	62:53	0:0	8	&
water	62:54	0:0	8	fmt_target
stmts	62:67	66:8	5	
water	62:67	0:0	6	{
call	63:12	63:93	6	msg_Err
arg	63:20	63:24	7	vout
water	63:20	0:0	8	vout
arg	63:26	63:93	7	"Failed to compensate for the format changes, removing all filters"
water	63:26	0:0	8	"Failed to compensate for the format changes, removing all filters"
water	63:94	0:0	6	;
call	64:12	64:90	6	filter_chain_Reset
arg	64:31	64:59	7	vout->p->filter.chain_static
water	64:31	0:0	8	vout
op	64:35	0:0	8	->
water	64:37	0:0	8	p
op	64:38	0:0	8	->
water	64:40	0:0	8	filter
op	64:46	0:0	8	.
water	64:47	0:0	8	chain_static
arg	64:66	64:77	7	&fmt_target
op	64:66	0:0	8	&
water	64:67	0:0	8	fmt_target
arg	64:79	64:90	7	&fmt_target
op	64:79	0:0	8	&
water	64:80	0:0	8	fmt_target
water	64:91	0:0	6	;
call	65:12	65:90	6	filter_chain_Reset
arg	65:31	65:64	7	vout->p->filter.chain_interactive
water	65:31	0:0	8	vout
op	65:35	0:0	8	->
water	65:37	0:0	8	p
op	65:38	0:0	8	->
water	65:40	0:0	8	filter
op	65:46	0:0	8	.
water	65:47	0:0	8	chain_interactive
arg	65:66	65:77	7	&fmt_target
op	65:66	0:0	8	&
water	65:67	0:0	8	fmt_target
arg	65:79	65:90	7	&fmt_target
op	65:79	0:0	8	&
water	65:80	0:0	8	fmt_target
water	65:91	0:0	6	;
water	66:8	0:0	6	}
water	67:4	0:0	4	}
call	68:4	68:31	2	es_format_Clean
arg	68:20	68:31	3	&fmt_target
op	68:20	0:0	4	&
water	68:21	0:0	4	fmt_target
water	68:32	0:0	2	;
if	69:4	72:4	2	(vout -> p -> filter . configuration != filters)
cond	69:8	69:41	3	vout -> p -> filter . configuration != filters
water	69:8	0:0	4	vout
op	69:12	0:0	4	->
water	69:14	0:0	4	p
op	69:15	0:0	4	->
water	69:17	0:0	4	filter
op	69:23	0:0	4	.
water	69:24	0:0	4	configuration
op	69:38	0:0	4	!=
water	69:41	0:0	4	filters
stmts	69:50	72:4	3	
water	69:50	0:0	4	{
call	70:8	70:42	4	free
arg	70:13	70:42	5	vout->p->filter.configuration
water	70:13	0:0	6	vout
op	70:17	0:0	6	->
water	70:19	0:0	6	p
op	70:20	0:0	6	->
water	70:22	0:0	6	filter
op	70:28	0:0	6	.
water	70:29	0:0	6	configuration
water	70:43	0:0	4	;
water	71:8	0:0	4	vout
op	71:12	0:0	4	->
water	71:14	0:0	4	p
op	71:15	0:0	4	->
water	71:17	0:0	4	filter
op	71:23	0:0	4	.
water	71:24	0:0	4	configuration
op	71:38	0:0	4	=
water	71:40	0:0	4	filters
water	71:48	0:0	4	?
call	71:50	71:64	4	strdup
arg	71:57	71:64	5	filters
water	71:57	0:0	6	filters
water	71:66	0:0	4	:
water	71:68	0:0	4	NULL
water	71:72	0:0	4	;
water	72:4	0:0	4	}
if	73:4	76:4	2	(source)
cond	73:8	73:8	3	source
water	73:8	0:0	4	source
stmts	73:16	76:4	3	
water	73:16	0:0	4	{
call	74:8	74:50	4	video_format_Clean
arg	74:27	74:50	5	&vout->p->filter.format
op	74:27	0:0	6	&
water	74:28	0:0	6	vout
op	74:32	0:0	6	->
water	74:34	0:0	6	p
op	74:35	0:0	6	->
water	74:37	0:0	6	filter
op	74:43	0:0	6	.
water	74:44	0:0	6	format
water	74:51	0:0	4	;
call	75:8	75:57	4	video_format_Copy
arg	75:26	75:49	5	&vout->p->filter.format
op	75:26	0:0	6	&
water	75:27	0:0	6	vout
op	75:31	0:0	6	->
water	75:33	0:0	6	p
op	75:34	0:0	6	->
water	75:36	0:0	6	filter
op	75:42	0:0	6	.
water	75:43	0:0	6	format
arg	75:51	75:57	5	source
water	75:51	0:0	6	source
water	75:58	0:0	4	;
water	76:4	0:0	4	}
if	77:4	78:47	2	(! is_locked)
cond	77:8	77:9	3	! is_locked
op	77:8	0:0	4	!
water	77:9	0:0	4	is_locked
stmts	78:8	78:47	3	
call	78:8	78:46	4	vlc_mutex_unlock
arg	78:25	78:46	5	&vout->p->filter.lock
op	78:25	0:0	6	&
water	78:26	0:0	6	vout
op	78:30	0:0	6	->
water	78:32	0:0	6	p
op	78:33	0:0	6	->
water	78:35	0:0	6	filter
op	78:41	0:0	6	.
water	78:42	0:0	6	lock
water	78:47	0:0	4	;
