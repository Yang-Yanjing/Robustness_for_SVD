func	2:0	85:0	0	static void	MuxWriteSystemHeader
params	2:32	0:0	1	
param	2:34	2:51	2	sout_mux_t *	p_mux
param	2:53	2:68	2	block_t * *	p_buf
param	3:34	3:48	2	mtime_t	i_dts
stmnts	0:0	84:37	1	
decl	5:4	5:41	2	sout_mux_sys_t	*p_sys
op	5:27	0:0	2	=
water	5:29	0:0	2	p_mux
op	5:34	0:0	2	->
water	5:36	0:0	2	p_sys
decl	6:4	6:20	2	block_t	*p_hdr
decl	7:4	7:24	2	bits_buffer_t	bits
decl	8:4	8:23	2	bool	b_private
decl	9:4	9:20	2	int	i_rate_bound
decl	10:4	10:45	2	int	i_nb_private
water	10:32	0:0	2	,
decl	10:4	10:45	2	int	i_nb_stream
decl	11:4	11:9	2	int	i
for	13:4	21:4	2	(i = 0 , i_nb_private = 0 ;i < p_mux -> i_nb_inputs;i ++)
forinit	13:9	13:32	3	i = 0 , i_nb_private = 0 ;
water	13:9	0:0	4	i
op	13:11	0:0	4	=
water	13:13	0:0	4	0
water	13:14	0:0	4	,
water	13:16	0:0	4	i_nb_private
op	13:29	0:0	4	=
water	13:31	0:0	4	0
water	13:32	0:0	4	;
cond	13:34	13:45	3	i < p_mux -> i_nb_inputs
water	13:34	0:0	4	i
op	13:36	0:0	4	<
water	13:38	0:0	4	p_mux
op	13:43	0:0	4	->
water	13:45	0:0	4	i_nb_inputs
forexpr	13:58	13:59	3	i ++
water	13:58	0:0	4	i
op	13:59	0:0	4	++
stmts	14:4	21:4	3	
water	14:4	0:0	4	{
decl	15:8	15:29	4	ps_stream_t	*p_stream
water	16:8	0:0	4	p_stream
op	16:17	0:0	4	=
water	16:19	0:0	4	(
water	16:20	0:0	4	ps_stream_t
op	16:31	0:0	4	*
water	16:32	0:0	4	)
water	16:33	0:0	4	p_mux
op	16:38	0:0	4	->
water	16:40	0:0	4	pp_inputs
op	16:49	0:0	4	[
water	16:50	0:0	4	i
op	16:51	0:0	4	]
op	16:52	0:0	4	->
water	16:54	0:0	4	p_sys
water	16:59	0:0	4	;
if	17:8	20:8	4	(( p_stream -> i_stream_id & 0 xff00 ) == 0 xbd00)
cond	17:12	17:49	5	( p_stream -> i_stream_id & 0 xff00 ) == 0 xbd00
water	17:12	0:0	6	(
water	17:14	0:0	6	p_stream
op	17:22	0:0	6	->
water	17:24	0:0	6	i_stream_id
op	17:35	0:0	6	&
water	17:36	0:0	6	0
water	17:37	0:0	6	xff00
water	17:43	0:0	6	)
op	17:45	0:0	6	==
water	17:48	0:0	6	0
water	17:49	0:0	6	xbd00
stmts	18:8	20:8	5	
water	18:8	0:0	6	{
water	19:12	0:0	6	i_nb_private
op	19:24	0:0	6	++
water	19:26	0:0	6	;
water	20:8	0:0	6	}
water	21:4	0:0	4	}
water	23:4	0:0	2	i_nb_stream
op	23:16	0:0	2	=
water	23:18	0:0	2	p_mux
op	23:23	0:0	2	->
water	23:25	0:0	2	i_nb_inputs
op	23:37	0:0	2	-
water	24:8	0:0	2	(
water	24:10	0:0	2	i_nb_private
op	24:23	0:0	2	>
water	24:25	0:0	2	0
water	24:27	0:0	2	?
water	24:29	0:0	2	i_nb_private
op	24:42	0:0	2	-
water	24:44	0:0	2	1
water	24:46	0:0	2	:
water	24:48	0:0	2	0
water	24:50	0:0	2	)
water	24:51	0:0	2	;
water	25:4	0:0	2	p_hdr
op	25:10	0:0	2	=
call	25:12	25:47	2	block_Alloc
arg	25:26	25:47	3	12+i_nb_stream*3
water	25:26	0:0	4	12
op	25:29	0:0	4	+
water	25:31	0:0	4	i_nb_stream
op	25:43	0:0	4	*
water	25:45	0:0	4	3
water	25:48	0:0	2	;
water	26:4	0:0	2	p_hdr
op	26:9	0:0	2	->
water	26:11	0:0	2	i_dts
op	26:17	0:0	2	=
water	26:19	0:0	2	p_hdr
op	26:24	0:0	2	->
water	26:26	0:0	2	i_pts
op	26:32	0:0	2	=
water	26:34	0:0	2	i_dts
water	26:39	0:0	2	;
water	28:4	0:0	2	i_rate_bound
op	28:17	0:0	2	=
water	28:19	0:0	2	(
water	28:20	0:0	2	p_sys
op	28:25	0:0	2	->
water	28:27	0:0	2	i_rate_bound
water	28:39	0:0	2	)
water	28:40	0:0	2	;
call	29:4	29:65	2	bits_initwrite
arg	29:20	29:25	3	&bits
op	29:20	0:0	4	&
water	29:21	0:0	4	bits
arg	29:27	29:47	3	12+i_nb_stream*3
water	29:27	0:0	4	12
op	29:30	0:0	4	+
water	29:32	0:0	4	i_nb_stream
op	29:44	0:0	4	*
water	29:46	0:0	4	3
arg	29:49	29:65	3	p_hdr->p_buffer
water	29:49	0:0	4	p_hdr
op	29:54	0:0	4	->
water	29:56	0:0	4	p_buffer
water	29:66	0:0	2	;
call	30:4	30:34	2	bits_write
arg	30:16	30:21	3	&bits
op	30:16	0:0	4	&
water	30:17	0:0	4	bits
arg	30:23	30:25	3	32
water	30:23	0:0	4	32
arg	30:27	30:34	3	0x01bb
water	30:27	0:0	4	0
water	30:28	0:0	4	x01bb
water	30:35	0:0	2	;
call	31:4	31:52	2	bits_write
arg	31:16	31:21	3	&bits
op	31:16	0:0	4	&
water	31:17	0:0	4	bits
arg	31:23	31:25	3	16
water	31:23	0:0	4	16
arg	31:27	31:52	3	12-6+i_nb_stream*3
water	31:27	0:0	4	12
op	31:30	0:0	4	-
water	31:32	0:0	4	6
op	31:34	0:0	4	+
water	31:36	0:0	4	i_nb_stream
op	31:48	0:0	4	*
water	31:50	0:0	4	3
water	31:53	0:0	2	;
call	32:4	32:29	2	bits_write
arg	32:16	32:21	3	&bits
op	32:16	0:0	4	&
water	32:17	0:0	4	bits
arg	32:23	32:24	3	1
water	32:23	0:0	4	1
arg	32:27	32:29	3	1
water	32:27	0:0	4	1
water	32:30	0:0	2	;
call	33:4	33:39	2	bits_write
arg	33:16	33:21	3	&bits
op	33:16	0:0	4	&
water	33:17	0:0	4	bits
arg	33:23	33:25	3	22
water	33:23	0:0	4	22
arg	33:27	33:39	3	i_rate_bound
water	33:27	0:0	4	i_rate_bound
water	33:40	0:0	2	;
call	34:4	34:29	2	bits_write
arg	34:16	34:21	3	&bits
op	34:16	0:0	4	&
water	34:17	0:0	4	bits
arg	34:23	34:24	3	1
water	34:23	0:0	4	1
arg	34:27	34:29	3	1
water	34:27	0:0	4	1
water	34:30	0:0	2	;
call	35:4	35:48	2	bits_write
arg	35:16	35:21	3	&bits
op	35:16	0:0	4	&
water	35:17	0:0	4	bits
arg	35:23	35:24	3	6
water	35:23	0:0	4	6
arg	35:27	35:48	3	p_sys->i_audio_bound
water	35:27	0:0	4	p_sys
op	35:32	0:0	4	->
water	35:34	0:0	4	i_audio_bound
water	35:49	0:0	2	;
call	36:4	36:29	2	bits_write
arg	36:16	36:21	3	&bits
op	36:16	0:0	4	&
water	36:17	0:0	4	bits
arg	36:23	36:24	3	1
water	36:23	0:0	4	1
arg	36:27	36:29	3	0
water	36:27	0:0	4	0
water	36:30	0:0	2	;
call	37:4	37:29	2	bits_write
arg	37:16	37:21	3	&bits
op	37:16	0:0	4	&
water	37:17	0:0	4	bits
arg	37:23	37:24	3	1
water	37:23	0:0	4	1
arg	37:27	37:29	3	0
water	37:27	0:0	4	0
water	37:30	0:0	2	;
call	38:4	38:29	2	bits_write
arg	38:16	38:21	3	&bits
op	38:16	0:0	4	&
water	38:17	0:0	4	bits
arg	38:23	38:24	3	1
water	38:23	0:0	4	1
arg	38:27	38:29	3	0
water	38:27	0:0	4	0
water	38:30	0:0	2	;
call	39:4	39:29	2	bits_write
arg	39:16	39:21	3	&bits
op	39:16	0:0	4	&
water	39:17	0:0	4	bits
arg	39:23	39:24	3	1
water	39:23	0:0	4	1
arg	39:27	39:29	3	0
water	39:27	0:0	4	0
water	39:30	0:0	2	;
call	40:4	40:29	2	bits_write
arg	40:16	40:21	3	&bits
op	40:16	0:0	4	&
water	40:17	0:0	4	bits
arg	40:23	40:24	3	1
water	40:23	0:0	4	1
arg	40:27	40:29	3	1
water	40:27	0:0	4	1
water	40:30	0:0	2	;
call	41:4	41:48	2	bits_write
arg	41:16	41:21	3	&bits
op	41:16	0:0	4	&
water	41:17	0:0	4	bits
arg	41:23	41:24	3	5
water	41:23	0:0	4	5
arg	41:27	41:48	3	p_sys->i_video_bound
water	41:27	0:0	4	p_sys
op	41:32	0:0	4	->
water	41:34	0:0	4	i_video_bound
water	41:49	0:0	2	;
call	42:4	42:29	2	bits_write
arg	42:16	42:21	3	&bits
op	42:16	0:0	4	&
water	42:17	0:0	4	bits
arg	42:23	42:24	3	1
water	42:23	0:0	4	1
arg	42:27	42:29	3	1
water	42:27	0:0	4	1
water	42:30	0:0	2	;
call	43:4	43:32	2	bits_write
arg	43:16	43:21	3	&bits
op	43:16	0:0	4	&
water	43:17	0:0	4	bits
arg	43:23	43:24	3	7
water	43:23	0:0	4	7
arg	43:27	43:32	3	0xff
water	43:27	0:0	4	0
water	43:28	0:0	4	xff
water	43:33	0:0	2	;
for	45:4	83:4	2	(i = 0 , b_private = false ;i < p_mux -> i_nb_inputs;i ++)
forinit	45:9	45:33	3	i = 0 , b_private = false ;
water	45:9	0:0	4	i
op	45:11	0:0	4	=
water	45:13	0:0	4	0
water	45:14	0:0	4	,
water	45:16	0:0	4	b_private
op	45:26	0:0	4	=
water	45:28	0:0	4	false
water	45:33	0:0	4	;
cond	45:35	45:46	3	i < p_mux -> i_nb_inputs
water	45:35	0:0	4	i
op	45:37	0:0	4	<
water	45:39	0:0	4	p_mux
op	45:44	0:0	4	->
water	45:46	0:0	4	i_nb_inputs
forexpr	45:59	45:60	3	i ++
water	45:59	0:0	4	i
op	45:60	0:0	4	++
stmts	46:4	83:4	3	
water	46:4	0:0	4	{
decl	47:8	47:29	4	sout_input_t	*p_input
decl	48:8	48:29	4	ps_stream_t	*p_stream
water	49:8	0:0	4	p_input
op	49:16	0:0	4	=
water	49:18	0:0	4	p_mux
op	49:23	0:0	4	->
water	49:25	0:0	4	pp_inputs
op	49:34	0:0	4	[
water	49:35	0:0	4	i
op	49:36	0:0	4	]
water	49:37	0:0	4	;
water	50:8	0:0	4	p_stream
op	50:17	0:0	4	=
water	50:19	0:0	4	(
water	50:20	0:0	4	ps_stream_t
op	50:32	0:0	4	*
water	50:33	0:0	4	)
water	50:34	0:0	4	p_input
op	50:41	0:0	4	->
water	50:43	0:0	4	p_sys
water	50:48	0:0	4	;
if	51:8	60:8	4	(( p_stream -> i_stream_id & 0 xff00 ) == 0 xbd00)
cond	51:12	51:49	5	( p_stream -> i_stream_id & 0 xff00 ) == 0 xbd00
water	51:12	0:0	6	(
water	51:14	0:0	6	p_stream
op	51:22	0:0	6	->
water	51:24	0:0	6	i_stream_id
op	51:35	0:0	6	&
water	51:36	0:0	6	0
water	51:37	0:0	6	xff00
water	51:43	0:0	6	)
op	51:45	0:0	6	==
water	51:48	0:0	6	0
water	51:49	0:0	6	xbd00
stmts	52:8	60:8	5	
water	52:8	0:0	6	{
if	53:12	56:12	6	(b_private)
cond	53:16	53:16	7	b_private
water	53:16	0:0	8	b_private
stmts	54:12	56:12	7	
water	54:12	0:0	8	{
continue	55:16	55:24	8	
water	56:12	0:0	8	}
water	57:12	0:0	6	b_private
op	57:22	0:0	6	=
water	57:24	0:0	6	true
water	57:28	0:0	6	;
call	59:12	59:39	6	bits_write
arg	59:24	59:29	7	&bits
op	59:24	0:0	8	&
water	59:25	0:0	8	bits
arg	59:31	59:32	7	8
water	59:31	0:0	8	8
arg	59:34	59:39	7	0xbd
water	59:34	0:0	8	0
water	59:35	0:0	8	xbd
water	59:40	0:0	6	;
water	60:8	0:0	6	}
else	61:8	65:8	4
stmts	62:8	65:8	5	
water	62:8	0:0	6	{
call	64:12	64:61	6	bits_write
arg	64:24	64:29	7	&bits
op	64:24	0:0	8	&
water	64:25	0:0	8	bits
arg	64:31	64:32	7	8
water	64:31	0:0	8	8
arg	64:34	64:61	7	p_stream->i_stream_id&0xff
water	64:34	0:0	8	p_stream
op	64:42	0:0	8	->
water	64:44	0:0	8	i_stream_id
op	64:55	0:0	8	&
water	64:56	0:0	8	0
water	64:57	0:0	8	xff
water	64:62	0:0	6	;
water	65:8	0:0	6	}
call	66:8	66:35	4	bits_write
arg	66:20	66:25	5	&bits
op	66:20	0:0	6	&
water	66:21	0:0	6	bits
arg	66:27	66:28	5	2
water	66:27	0:0	6	2
arg	66:30	66:35	5	0x03
water	66:30	0:0	6	0
water	66:31	0:0	6	x03
water	66:36	0:0	4	;
if	67:8	71:8	4	(p_input -> p_fmt -> i_cat == AUDIO_ES)
cond	67:12	67:37	5	p_input -> p_fmt -> i_cat == AUDIO_ES
water	67:12	0:0	6	p_input
op	67:19	0:0	6	->
water	67:21	0:0	6	p_fmt
op	67:26	0:0	6	->
water	67:28	0:0	6	i_cat
op	67:34	0:0	6	==
water	67:37	0:0	6	AUDIO_ES
stmts	68:8	71:8	5	
water	68:8	0:0	6	{
call	69:12	69:36	6	bits_write
arg	69:24	69:29	7	&bits
op	69:24	0:0	8	&
water	69:25	0:0	8	bits
arg	69:31	69:32	7	1
water	69:31	0:0	8	1
arg	69:34	69:36	7	0
water	69:34	0:0	8	0
water	69:37	0:0	6	;
call	70:12	70:67	6	bits_write
arg	70:24	70:29	7	&bits
op	70:24	0:0	8	&
water	70:25	0:0	8	bits
arg	70:31	70:33	7	13
water	70:31	0:0	8	13
arg	70:35	70:67	7	p_stream->i_max_buff_size/128
water	70:35	0:0	8	p_stream
op	70:43	0:0	8	->
water	70:45	0:0	8	i_max_buff_size
op	70:61	0:0	8	/
water	70:63	0:0	8	128
water	70:68	0:0	6	;
water	71:8	0:0	6	}
else	72:8	76:8	4
stmts	72:13	76:8	5	
if	72:13	76:8	6	(p_input -> p_fmt -> i_cat == VIDEO_ES)
cond	72:17	72:42	7	p_input -> p_fmt -> i_cat == VIDEO_ES
water	72:17	0:0	8	p_input
op	72:24	0:0	8	->
water	72:26	0:0	8	p_fmt
op	72:31	0:0	8	->
water	72:33	0:0	8	i_cat
op	72:39	0:0	8	==
water	72:42	0:0	8	VIDEO_ES
stmts	73:8	76:8	7	
water	73:8	0:0	8	{
call	74:12	74:36	8	bits_write
arg	74:24	74:29	9	&bits
op	74:24	0:0	10	&
water	74:25	0:0	10	bits
arg	74:31	74:32	9	1
water	74:31	0:0	10	1
arg	74:34	74:36	9	1
water	74:34	0:0	10	1
water	74:37	0:0	8	;
call	75:12	75:67	8	bits_write
arg	75:24	75:29	9	&bits
op	75:24	0:0	10	&
water	75:25	0:0	10	bits
arg	75:31	75:33	9	13
water	75:31	0:0	10	13
arg	75:35	75:67	9	p_stream->i_max_buff_size/1024
water	75:35	0:0	10	p_stream
op	75:43	0:0	10	->
water	75:45	0:0	10	i_max_buff_size
op	75:61	0:0	10	/
water	75:63	0:0	10	1024
water	75:68	0:0	8	;
water	76:8	0:0	8	}
else	77:8	82:8	4
stmts	78:8	82:8	5	
water	78:8	0:0	6	{
call	80:12	80:36	6	bits_write
arg	80:24	80:29	7	&bits
op	80:24	0:0	8	&
water	80:25	0:0	8	bits
arg	80:31	80:32	7	1
water	80:31	0:0	8	1
arg	80:34	80:36	7	0
water	80:34	0:0	8	0
water	80:37	0:0	6	;
call	81:12	81:67	6	bits_write
arg	81:24	81:29	7	&bits
op	81:24	0:0	8	&
water	81:25	0:0	8	bits
arg	81:31	81:33	7	13
water	81:31	0:0	8	13
arg	81:35	81:67	7	p_stream->i_max_buff_size/128
water	81:35	0:0	8	p_stream
op	81:43	0:0	8	->
water	81:45	0:0	8	i_max_buff_size
op	81:61	0:0	8	/
water	81:63	0:0	8	128
water	81:68	0:0	6	;
water	82:8	0:0	6	}
water	83:4	0:0	4	}
call	84:4	84:36	2	block_ChainAppend
arg	84:23	84:28	3	p_buf
water	84:23	0:0	4	p_buf
arg	84:30	84:36	3	p_hdr
water	84:30	0:0	4	p_hdr
water	84:37	0:0	2	;
