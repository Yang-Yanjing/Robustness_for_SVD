func	2:0	41:0	0	int	Open
params	2:8	0:0	1	
param	2:9	2:29	2	vlc_object_t *	p_this
stmnts	0:0	40:23	1	
decl	4:4	4:42	2	decoder_t	*p_dec
op	4:21	0:0	2	=
water	4:23	0:0	2	(
water	4:24	0:0	2	decoder_t
op	4:34	0:0	2	*
water	4:35	0:0	2	)
water	4:36	0:0	2	p_this
decl	5:4	5:24	2	decoder_sys_t	*p_sys
if	6:4	7:27	2	(p_dec -> fmt_in . i_cat != VIDEO_ES && p_dec -> fmt_in . i_cat != AUDIO_ES)
cond	6:8	6:66	3	p_dec -> fmt_in . i_cat != VIDEO_ES && p_dec -> fmt_in . i_cat != AUDIO_ES
water	6:8	0:0	4	p_dec
op	6:13	0:0	4	->
water	6:15	0:0	4	fmt_in
op	6:21	0:0	4	.
water	6:22	0:0	4	i_cat
op	6:28	0:0	4	!=
water	6:31	0:0	4	VIDEO_ES
op	6:40	0:0	4	&&
water	6:43	0:0	4	p_dec
op	6:48	0:0	4	->
water	6:50	0:0	4	fmt_in
op	6:56	0:0	4	.
water	6:57	0:0	4	i_cat
op	6:63	0:0	4	!=
water	6:66	0:0	4	AUDIO_ES
stmts	7:8	7:27	3	
return	7:8	7:27	4	VLC_EGENERIC
water	7:15	0:0	5	VLC_EGENERIC
water	8:4	0:0	2	p_sys
op	8:10	0:0	2	=
water	8:12	0:0	2	p_dec
op	8:17	0:0	2	->
water	8:19	0:0	2	p_sys
op	8:25	0:0	2	=
call	8:27	8:51	2	calloc
arg	8:34	8:35	3	1
water	8:34	0:0	4	1
arg	8:37	8:51	3	sizeof(*p_sys)
op	8:37	0:0	4	sizeof
water	8:43	0:0	4	(
op	8:44	0:0	4	*
water	8:45	0:0	4	p_sys
water	8:50	0:0	4	)
water	8:52	0:0	2	;
if	9:4	10:25	2	(! p_sys)
cond	9:8	9:9	3	! p_sys
op	9:8	0:0	4	!
water	9:9	0:0	4	p_sys
stmts	10:8	10:25	3	
return	10:8	10:25	4	VLC_ENOMEM
water	10:15	0:0	5	VLC_ENOMEM
call	11:4	11:45	2	CoInitializeEx
arg	11:19	11:23	3	NULL
water	11:19	0:0	4	NULL
arg	11:25	11:45	3	COINIT_MULTITHREADED
water	11:25	0:0	4	COINIT_MULTITHREADED
water	11:46	0:0	2	;
if	12:4	16:4	2	(LoadMFTLibrary (& p_sys -> mf_handle ))
cond	12:8	12:40	3	LoadMFTLibrary (& p_sys -> mf_handle )
call	12:8	12:40	4	LoadMFTLibrary
arg	12:23	12:40	5	&p_sys->mf_handle
op	12:23	0:0	6	&
water	12:24	0:0	6	p_sys
op	12:29	0:0	6	->
water	12:31	0:0	6	mf_handle
stmts	13:4	16:4	3	
water	13:4	0:0	4	{
call	14:8	14:52	4	msg_Err
arg	14:16	14:21	5	p_dec
water	14:16	0:0	6	p_dec
arg	14:23	14:52	5	"Failed to load MFT library."
water	14:23	0:0	6	"Failed to load MFT library."
water	14:53	0:0	4	;
goto	15:8	15:18	4	error
water	15:13	0:0	5	error
water	16:4	0:0	4	}
if	17:4	21:4	2	(FindMFT (p_dec ))
cond	17:8	17:21	3	FindMFT (p_dec )
call	17:8	17:21	4	FindMFT
arg	17:16	17:21	5	p_dec
water	17:16	0:0	6	p_dec
stmts	18:4	21:4	3	
water	18:4	0:0	4	{
call	19:8	19:60	4	msg_Err
arg	19:16	19:21	5	p_dec
water	19:16	0:0	6	p_dec
arg	19:23	19:60	5	"Could not find suitable MFT decoder"
water	19:23	0:0	6	"Could not find suitable MFT decoder"
water	19:61	0:0	4	;
goto	20:8	20:18	4	error
water	20:13	0:0	5	error
water	21:4	0:0	4	}
if	23:4	24:18	2	(AllocateOutputSample (p_dec ,0 ,& p_sys -> output_sample ))
cond	23:8	23:60	3	AllocateOutputSample (p_dec ,0 ,& p_sys -> output_sample )
call	23:8	23:60	4	AllocateOutputSample
arg	23:29	23:34	5	p_dec
water	23:29	0:0	6	p_dec
arg	23:36	23:37	5	0
water	23:36	0:0	6	0
arg	23:39	23:60	5	&p_sys->output_sample
op	23:39	0:0	6	&
water	23:40	0:0	6	p_sys
op	23:45	0:0	6	->
water	23:47	0:0	6	output_sample
stmts	24:8	24:18	3	
goto	24:8	24:18	4	error
water	24:13	0:0	5	error
if	25:4	29:4	2	(p_sys -> is_async)
cond	25:8	25:15	3	p_sys -> is_async
water	25:8	0:0	4	p_sys
op	25:13	0:0	4	->
water	25:15	0:0	4	is_async
stmts	26:4	29:4	3	
water	26:4	0:0	4	{
water	27:8	0:0	4	p_dec
op	27:13	0:0	4	->
water	27:15	0:0	4	pf_decode_video
op	27:31	0:0	4	=
water	27:33	0:0	4	(
water	27:34	0:0	4	picture_t
op	27:44	0:0	4	*
call	27:45	27:72	4	(*)
arg	27:49	27:60	5	decoder_t*
water	27:49	0:0	6	decoder_t
op	27:59	0:0	6	*
arg	27:62	27:72	5	block_t**
water	27:62	0:0	6	block_t
op	27:70	0:0	6	*
op	27:71	0:0	6	*
water	27:73	0:0	4	)
water	27:74	0:0	4	DecodeAsync
water	27:85	0:0	4	;
water	28:8	0:0	4	p_dec
op	28:13	0:0	4	->
water	28:15	0:0	4	pf_decode_audio
op	28:31	0:0	4	=
water	28:33	0:0	4	(
water	28:34	0:0	4	block_t
op	28:44	0:0	4	*
call	28:45	28:72	4	(*)
arg	28:49	28:60	5	decoder_t*
water	28:49	0:0	6	decoder_t
op	28:59	0:0	6	*
arg	28:62	28:72	5	block_t**
water	28:62	0:0	6	block_t
op	28:70	0:0	6	*
op	28:71	0:0	6	*
water	28:73	0:0	4	)
water	28:74	0:0	4	DecodeAsync
water	28:85	0:0	4	;
water	29:4	0:0	4	}
else	30:4	34:4	2
stmts	31:4	34:4	3	
water	31:4	0:0	4	{
water	32:8	0:0	4	p_dec
op	32:13	0:0	4	->
water	32:15	0:0	4	pf_decode_video
op	32:31	0:0	4	=
water	32:33	0:0	4	(
water	32:34	0:0	4	picture_t
op	32:44	0:0	4	*
call	32:45	32:72	4	(*)
arg	32:49	32:60	5	decoder_t*
water	32:49	0:0	6	decoder_t
op	32:59	0:0	6	*
arg	32:62	32:72	5	block_t**
water	32:62	0:0	6	block_t
op	32:70	0:0	6	*
op	32:71	0:0	6	*
water	32:73	0:0	4	)
water	32:74	0:0	4	DecodeSync
water	32:84	0:0	4	;
water	33:8	0:0	4	p_dec
op	33:13	0:0	4	->
water	33:15	0:0	4	pf_decode_audio
op	33:31	0:0	4	=
water	33:33	0:0	4	(
water	33:34	0:0	4	block_t
op	33:44	0:0	4	*
call	33:45	33:72	4	(*)
arg	33:49	33:60	5	decoder_t*
water	33:49	0:0	6	decoder_t
op	33:59	0:0	6	*
arg	33:62	33:72	5	block_t**
water	33:62	0:0	6	block_t
op	33:70	0:0	6	*
op	33:71	0:0	6	*
water	33:73	0:0	4	)
water	33:74	0:0	4	DecodeSync
water	33:84	0:0	4	;
water	34:4	0:0	4	}
water	35:4	0:0	2	p_dec
op	35:9	0:0	2	->
water	35:11	0:0	2	fmt_out
op	35:18	0:0	2	.
water	35:19	0:0	2	i_cat
op	35:25	0:0	2	=
water	35:27	0:0	2	p_dec
op	35:32	0:0	2	->
water	35:34	0:0	2	fmt_in
op	35:40	0:0	2	.
water	35:41	0:0	2	i_cat
water	35:46	0:0	2	;
water	36:4	0:0	2	p_dec
op	36:9	0:0	2	->
water	36:11	0:0	2	b_need_packetized
op	36:29	0:0	2	=
water	36:31	0:0	2	true
water	36:35	0:0	2	;
return	37:4	37:22	2	VLC_SUCCESS
water	37:11	0:0	3	VLC_SUCCESS
label	38:0	38:5	2	error :
call	39:4	39:16	2	Close
arg	39:10	39:16	3	p_this
water	39:10	0:0	4	p_this
water	39:17	0:0	2	;
return	40:4	40:23	2	VLC_EGENERIC
water	40:11	0:0	3	VLC_EGENERIC
