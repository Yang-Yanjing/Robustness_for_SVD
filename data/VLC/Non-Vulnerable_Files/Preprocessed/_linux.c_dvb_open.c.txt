func	2:0	85:0	0	dvb_device_t *	dvb_open
params	2:23	0:0	1	
param	2:24	2:41	2	vlc_object_t *	obj
stmnts	0:0	84:15	1	
decl	4:4	4:42	2	dvb_device_t	*d
op	4:20	0:0	2	=
call	4:22	4:41	3	malloc
arg	4:30	4:41	4	sizeof(*d)
op	4:30	0:0	5	sizeof
water	4:37	0:0	5	(
op	4:38	0:0	5	*
water	4:39	0:0	5	d
water	4:40	0:0	5	)
if	5:4	6:19	2	(unlikely (d == NULL ))
cond	5:8	5:26	3	unlikely (d == NULL )
call	5:8	5:26	4	unlikely
arg	5:17	5:26	5	d==NULL
water	5:17	0:0	6	d
op	5:19	0:0	6	==
water	5:22	0:0	6	NULL
stmts	6:8	6:19	3	
return	6:8	6:19	4	NULL
water	6:15	0:0	5	NULL
water	7:4	0:0	2	d
op	7:5	0:0	2	->
water	7:7	0:0	2	obj
op	7:11	0:0	2	=
water	7:13	0:0	2	obj
water	7:16	0:0	2	;
decl	8:4	8:61	2	uint8_t	adapter
op	8:20	0:0	2	=
call	8:22	8:60	3	var_InheritInteger
arg	8:42	8:45	4	obj
water	8:42	0:0	5	obj
arg	8:47	8:60	4	"dvb-adapter"
water	8:47	0:0	5	"dvb-adapter"
water	9:4	0:0	2	d
op	9:5	0:0	2	->
water	9:7	0:0	2	device
op	9:14	0:0	2	=
call	9:16	9:53	2	var_InheritInteger
arg	9:36	9:39	3	obj
water	9:36	0:0	4	obj
arg	9:41	9:53	3	"dvb-device"
water	9:41	0:0	4	"dvb-device"
water	9:54	0:0	2	;
water	10:4	0:0	2	d
op	10:5	0:0	2	->
water	10:7	0:0	2	dir
op	10:11	0:0	2	=
call	10:13	10:38	2	dvb_open_adapter
arg	10:31	10:38	3	adapter
water	10:31	0:0	4	adapter
water	10:39	0:0	2	;
if	11:4	17:4	2	(d -> dir == - 1)
cond	11:8	11:19	3	d -> dir == - 1
water	11:8	0:0	4	d
op	11:9	0:0	4	->
water	11:11	0:0	4	dir
op	11:15	0:0	4	==
op	11:18	0:0	4	-
water	11:19	0:0	4	1
stmts	12:4	17:4	3	
water	12:4	0:0	4	{
call	13:8	14:38	4	msg_Err
arg	13:17	13:20	5	obj
water	13:17	0:0	6	obj
arg	13:22	13:58	5	"cannot access adapter %"PRIu8": %s"
water	13:22	0:0	6	"cannot access adapter %"
water	13:47	0:0	6	PRIu8
water	13:52	0:0	6	": %s"
arg	13:60	13:67	5	adapter
water	13:60	0:0	6	adapter
arg	14:17	14:38	5	vlc_strerror_c(errno)
call	14:17	14:37	6	vlc_strerror_c
arg	14:32	14:37	7	errno
water	14:32	0:0	8	errno
water	14:39	0:0	4	;
call	15:8	15:15	4	free
arg	15:14	15:15	5	d
water	15:14	0:0	6	d
water	15:16	0:0	4	;
return	16:8	16:19	4	NULL
water	16:15	0:0	5	NULL
water	17:4	0:0	4	}
water	18:4	0:0	2	d
op	18:5	0:0	2	->
water	18:7	0:0	2	frontend
op	18:16	0:0	2	=
op	18:18	0:0	2	-
water	18:19	0:0	2	1
water	18:20	0:0	2	;
water	20:4	0:0	2	d
op	20:5	0:0	2	->
water	20:7	0:0	2	cam
op	20:11	0:0	2	=
water	20:13	0:0	2	NULL
water	20:17	0:0	2	;
water	22:4	0:0	2	d
op	22:5	0:0	2	->
water	22:7	0:0	2	budget
op	22:14	0:0	2	=
call	22:16	22:55	2	var_InheritBool
arg	22:33	22:36	3	obj
water	22:33	0:0	4	obj
arg	22:38	22:55	3	"dvb-budget-mode"
water	22:38	0:0	4	"dvb-budget-mode"
water	22:56	0:0	2	;
if	24:4	54:4	2	(d -> budget)
cond	24:8	24:11	3	d -> budget
water	24:8	0:0	4	d
op	24:9	0:0	4	->
water	24:11	0:0	4	budget
stmts	26:4	54:4	3	
water	26:4	0:0	4	{
water	27:7	0:0	4	d
op	27:8	0:0	4	->
water	27:10	0:0	4	demux
op	27:16	0:0	4	=
call	27:18	27:53	4	dvb_open_node
arg	27:33	27:34	5	d
water	27:33	0:0	6	d
arg	27:36	27:43	5	"demux"
water	27:36	0:0	6	"demux"
arg	27:45	27:53	5	O_RDONLY
water	27:45	0:0	6	O_RDONLY
water	27:54	0:0	4	;
if	28:7	35:7	4	(d -> demux == - 1)
cond	28:11	28:24	5	d -> demux == - 1
water	28:11	0:0	6	d
op	28:12	0:0	6	->
water	28:14	0:0	6	demux
op	28:20	0:0	6	==
op	28:23	0:0	6	-
water	28:24	0:0	6	1
stmts	29:7	35:7	5	
water	29:7	0:0	6	{
call	30:11	31:41	6	msg_Err
arg	30:20	30:23	7	obj
water	30:20	0:0	8	obj
arg	30:25	30:58	7	"cannot access demultiplexer: %s"
water	30:25	0:0	8	"cannot access demultiplexer: %s"
arg	31:20	31:41	7	vlc_strerror_c(errno)
call	31:20	31:40	8	vlc_strerror_c
arg	31:35	31:40	9	errno
water	31:35	0:0	10	errno
water	31:42	0:0	6	;
call	32:11	32:24	6	close
arg	32:18	32:24	7	d->dir
water	32:18	0:0	8	d
op	32:19	0:0	8	->
water	32:21	0:0	8	dir
water	32:25	0:0	6	;
call	33:11	33:18	6	free
arg	33:17	33:18	7	d
water	33:17	0:0	8	d
water	33:19	0:0	6	;
return	34:11	34:22	6	NULL
water	34:18	0:0	7	NULL
water	35:7	0:0	6	}
if	36:7	38:43	4	(ioctl (d -> demux ,DMX_SET_BUFFER_SIZE ,1 << 20 ) < 0)
cond	36:11	36:60	5	ioctl (d -> demux ,DMX_SET_BUFFER_SIZE ,1 << 20 ) < 0
call	36:11	36:56	6	ioctl
arg	36:18	36:26	7	d->demux
water	36:18	0:0	8	d
op	36:19	0:0	8	->
water	36:21	0:0	8	demux
arg	36:28	36:47	7	DMX_SET_BUFFER_SIZE
water	36:28	0:0	8	DMX_SET_BUFFER_SIZE
arg	36:49	36:56	7	1<<20
water	36:49	0:0	8	1
op	36:51	0:0	8	<<
water	36:54	0:0	8	20
op	36:58	0:0	6	<
water	36:60	0:0	6	0
stmts	37:11	38:43	5	
call	37:11	38:42	6	msg_Warn
arg	37:21	37:24	7	obj
water	37:21	0:0	8	obj
arg	37:26	37:67	7	"cannot expand demultiplexing buffer: %s"
water	37:26	0:0	8	"cannot expand demultiplexing buffer: %s"
arg	38:21	38:42	7	vlc_strerror_c(errno)
call	38:21	38:41	8	vlc_strerror_c
arg	38:36	38:41	9	errno
water	38:36	0:0	10	errno
water	38:43	0:0	6	;
decl	41:8	41:42	4	struct dmx_pes_filter_params	param
water	42:8	0:0	4	param
op	42:13	0:0	4	.
water	42:14	0:0	4	pid
op	42:18	0:0	4	=
water	42:20	0:0	4	d
op	42:21	0:0	4	->
water	42:23	0:0	4	budget
water	42:30	0:0	4	?
water	42:32	0:0	4	0
water	42:33	0:0	4	x2000
water	42:39	0:0	4	:
water	42:41	0:0	4	0
water	42:42	0:0	4	x000
water	42:46	0:0	4	;
water	43:8	0:0	4	param
op	43:13	0:0	4	.
water	43:14	0:0	4	input
op	43:20	0:0	4	=
water	43:22	0:0	4	DMX_IN_FRONTEND
water	43:37	0:0	4	;
water	44:8	0:0	4	param
op	44:13	0:0	4	.
water	44:14	0:0	4	output
op	44:21	0:0	4	=
water	44:23	0:0	4	DMX_OUT_TSDEMUX_TAP
water	44:42	0:0	4	;
water	45:8	0:0	4	param
op	45:13	0:0	4	.
water	45:14	0:0	4	pes_type
op	45:23	0:0	4	=
water	45:25	0:0	4	DMX_PES_OTHER
water	45:38	0:0	4	;
water	46:8	0:0	4	param
op	46:13	0:0	4	.
water	46:14	0:0	4	flags
op	46:20	0:0	4	=
water	46:22	0:0	4	DMX_IMMEDIATE_START
water	46:41	0:0	4	;
if	47:8	52:8	4	(ioctl (d -> demux ,DMX_SET_PES_FILTER ,& param ) < 0)
cond	47:12	47:59	5	ioctl (d -> demux ,DMX_SET_PES_FILTER ,& param ) < 0
call	47:12	47:55	6	ioctl
arg	47:19	47:27	7	d->demux
water	47:19	0:0	8	d
op	47:20	0:0	8	->
water	47:22	0:0	8	demux
arg	47:29	47:47	7	DMX_SET_PES_FILTER
water	47:29	0:0	8	DMX_SET_PES_FILTER
arg	47:49	47:55	7	&param
op	47:49	0:0	8	&
water	47:50	0:0	8	param
op	47:57	0:0	6	<
water	47:59	0:0	6	0
stmts	48:8	52:8	5	
water	48:8	0:0	6	{
call	49:12	50:42	6	msg_Err
arg	49:21	49:24	7	obj
water	49:21	0:0	8	obj
arg	49:26	49:61	7	"cannot setup TS demultiplexer: %s"
water	49:26	0:0	8	"cannot setup TS demultiplexer: %s"
arg	50:21	50:42	7	vlc_strerror_c(errno)
call	50:21	50:41	8	vlc_strerror_c
arg	50:36	50:41	9	errno
water	50:36	0:0	10	errno
water	50:43	0:0	6	;
goto	51:12	51:22	6	error
water	51:17	0:0	7	error
water	52:8	0:0	6	}
water	54:4	0:0	4	}
else	55:4	68:4	2
stmts	56:4	68:4	3	
water	56:4	0:0	4	{
for	57:8	58:47	4	( size_t i = 0 ;i < MAX_PIDS;i ++)
forinit	0:0	57:25	5	 size_t i = 0 ;
decl	57:13	57:25	6	size_t	i
op	57:22	0:0	6	=
water	57:24	0:0	6	0
cond	57:27	57:31	5	i < MAX_PIDS
water	57:27	0:0	6	i
op	57:29	0:0	6	<
water	57:31	0:0	6	MAX_PIDS
forexpr	57:41	57:42	5	i ++
water	57:41	0:0	6	i
op	57:42	0:0	6	++
stmts	58:12	58:47	5	
water	58:12	0:0	6	d
op	58:13	0:0	6	->
water	58:15	0:0	6	pids
op	58:19	0:0	6	[
water	58:20	0:0	6	i
op	58:21	0:0	6	]
op	58:22	0:0	6	.
water	58:23	0:0	6	pid
op	58:27	0:0	6	=
water	58:29	0:0	6	d
op	58:30	0:0	6	->
water	58:32	0:0	6	pids
op	58:36	0:0	6	[
water	58:37	0:0	6	i
op	58:38	0:0	6	]
op	58:39	0:0	6	.
water	58:40	0:0	6	fd
op	58:43	0:0	6	=
op	58:45	0:0	6	-
water	58:46	0:0	6	1
water	58:47	0:0	6	;
water	59:8	0:0	4	d
op	59:9	0:0	4	->
water	59:11	0:0	4	demux
op	59:17	0:0	4	=
call	59:19	59:52	4	dvb_open_node
arg	59:34	59:35	5	d
water	59:34	0:0	6	d
arg	59:37	59:42	5	"dvr"
water	59:37	0:0	6	"dvr"
arg	59:44	59:52	5	O_RDONLY
water	59:44	0:0	6	O_RDONLY
water	59:53	0:0	4	;
if	60:8	66:8	4	(d -> demux == - 1)
cond	60:12	60:25	5	d -> demux == - 1
water	60:12	0:0	6	d
op	60:13	0:0	6	->
water	60:15	0:0	6	demux
op	60:21	0:0	6	==
op	60:24	0:0	6	-
water	60:25	0:0	6	1
stmts	61:8	66:8	5	
water	61:8	0:0	6	{
call	62:12	62:72	6	msg_Err
arg	62:21	62:24	7	obj
water	62:21	0:0	8	obj
arg	62:26	62:49	7	"cannot access DVR: %s"
water	62:26	0:0	8	"cannot access DVR: %s"
arg	62:51	62:72	7	vlc_strerror_c(errno)
call	62:51	62:71	8	vlc_strerror_c
arg	62:66	62:71	9	errno
water	62:66	0:0	10	errno
water	62:73	0:0	6	;
call	63:12	63:25	6	close
arg	63:19	63:25	7	d->dir
water	63:19	0:0	8	d
op	63:20	0:0	8	->
water	63:22	0:0	8	dir
water	63:26	0:0	6	;
call	64:12	64:19	6	free
arg	64:18	64:19	7	d
water	64:18	0:0	8	d
water	64:20	0:0	6	;
return	65:12	65:23	6	NULL
water	65:19	0:0	7	NULL
water	66:8	0:0	6	}
water	68:4	0:0	4	}
decl	70:4	70:44	2	int	ca
op	70:11	0:0	2	=
call	70:13	70:43	3	dvb_open_node
arg	70:28	70:29	4	d
water	70:28	0:0	5	d
arg	70:31	70:35	4	"ca"
water	70:31	0:0	5	"ca"
arg	70:37	70:43	4	O_RDWR
water	70:37	0:0	5	O_RDWR
if	71:4	76:4	2	(ca != - 1)
cond	71:8	71:15	3	ca != - 1
water	71:8	0:0	4	ca
op	71:11	0:0	4	!=
op	71:14	0:0	4	-
water	71:15	0:0	4	1
stmts	72:4	76:4	3	
water	72:4	0:0	4	{
water	73:8	0:0	4	d
op	73:9	0:0	4	->
water	73:11	0:0	4	cam
op	73:15	0:0	4	=
call	73:17	73:38	4	en50221_Init
arg	73:31	73:34	5	obj
water	73:31	0:0	6	obj
arg	73:36	73:38	5	ca
water	73:36	0:0	6	ca
water	73:39	0:0	4	;
if	74:8	75:22	4	(d -> cam == NULL)
cond	74:12	74:22	5	d -> cam == NULL
water	74:12	0:0	6	d
op	74:13	0:0	6	->
water	74:15	0:0	6	cam
op	74:19	0:0	6	==
water	74:22	0:0	6	NULL
stmts	75:12	75:22	5	
call	75:12	75:21	6	close
arg	75:19	75:21	7	ca
water	75:19	0:0	8	ca
water	75:22	0:0	6	;
water	76:4	0:0	4	}
else	77:4	79:39	2
stmts	78:8	79:39	3	
call	78:8	79:38	4	msg_Dbg
arg	78:17	78:20	5	obj
water	78:17	0:0	6	obj
arg	78:22	78:67	5	"conditional access module not available: %s"
water	78:22	0:0	6	"conditional access module not available: %s"
arg	79:17	79:38	5	vlc_strerror_c(errno)
call	79:17	79:37	6	vlc_strerror_c
arg	79:32	79:37	7	errno
water	79:32	0:0	8	errno
water	79:39	0:0	4	;
return	81:4	81:12	2	d
water	81:11	0:0	3	d
label	82:0	82:5	2	error :
call	83:4	83:16	2	dvb_close
arg	83:15	83:16	3	d
water	83:15	0:0	4	d
water	83:17	0:0	2	;
return	84:4	84:15	2	NULL
water	84:11	0:0	3	NULL
