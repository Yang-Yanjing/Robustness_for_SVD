func	2:0	266:0	0	static int	InputSourceInit
params	2:26	0:0	1	
param	2:28	2:51	2	input_thread_t *	p_input
param	3:28	3:46	2	input_source_t *	in
param	3:48	3:67	2	const char *	psz_mrl
param	4:28	4:56	2	const char *	psz_forced_demux
param	4:58	4:77	2	bool	b_in_can_fail
stmnts	0:0	265:23	1	
decl	6:4	6:69	2	const char	*psz_access
water	6:26	0:0	2	,
decl	6:4	6:69	2	const char	*psz_demux
water	6:38	0:0	2	,
decl	6:4	6:69	2	const char	*psz_path
water	6:49	0:0	2	,
decl	6:4	6:69	2	const char	*psz_anchor
op	6:63	0:0	2	=
water	6:65	0:0	2	NULL
decl	7:4	7:30	2	char	*psz_var_demux
op	7:24	0:0	2	=
water	7:26	0:0	2	NULL
decl	8:4	8:16	2	double	f_fps
call	9:4	9:20	2	assert
arg	9:12	9:20	3	psz_mrl
water	9:12	0:0	4	psz_mrl
water	9:21	0:0	2	;
decl	10:4	10:37	2	char	*psz_dup
op	10:18	0:0	2	=
call	10:20	10:36	3	strdup
arg	10:28	10:36	4	psz_mrl
water	10:28	0:0	5	psz_mrl
if	11:4	12:18	2	(psz_dup == NULL)
cond	11:8	11:19	3	psz_dup == NULL
water	11:8	0:0	4	psz_dup
op	11:16	0:0	4	==
water	11:19	0:0	4	NULL
stmts	12:8	12:18	3	
goto	12:8	12:18	4	error
water	12:13	0:0	5	error
call	14:4	14:77	2	input_SplitMRL
arg	14:20	14:31	3	&psz_access
op	14:20	0:0	4	&
water	14:21	0:0	4	psz_access
arg	14:33	14:43	3	&psz_demux
op	14:33	0:0	4	&
water	14:34	0:0	4	psz_demux
arg	14:45	14:54	3	&psz_path
op	14:45	0:0	4	&
water	14:46	0:0	4	psz_path
arg	14:56	14:67	3	&psz_anchor
op	14:56	0:0	4	&
water	14:57	0:0	4	psz_anchor
arg	14:69	14:77	3	psz_dup
water	14:69	0:0	4	psz_dup
water	14:78	0:0	2	;
call	15:4	16:54	2	msg_Dbg
arg	15:13	15:20	3	p_input
water	15:13	0:0	4	p_input
arg	15:22	15:67	3	"`%s' gives access `%s' demux `%s' path `%s'"
water	15:22	0:0	4	"`%s' gives access `%s' demux `%s' path `%s'"
arg	16:13	16:20	3	psz_mrl
water	16:13	0:0	4	psz_mrl
arg	16:22	16:32	3	psz_access
water	16:22	0:0	4	psz_access
arg	16:34	16:43	3	psz_demux
water	16:34	0:0	4	psz_demux
arg	16:45	16:54	3	psz_path
water	16:45	0:0	4	psz_path
water	16:55	0:0	2	;
if	17:4	37:4	2	(! p_input -> b_preparsing)
cond	17:8	17:18	3	! p_input -> b_preparsing
op	17:8	0:0	4	!
water	17:9	0:0	4	p_input
op	17:16	0:0	4	->
water	17:18	0:0	4	b_preparsing
stmts	18:4	37:4	3	
water	18:4	0:0	4	{
call	20:8	21:66	4	MRLSections
arg	20:21	20:31	5	psz_anchor
water	20:21	0:0	6	psz_anchor
arg	20:33	20:51	5	&in->i_title_start
op	20:33	0:0	6	&
water	20:34	0:0	6	in
op	20:36	0:0	6	->
water	20:38	0:0	6	i_title_start
arg	20:53	20:69	5	&in->i_title_end
op	20:53	0:0	6	&
water	20:54	0:0	6	in
op	20:56	0:0	6	->
water	20:58	0:0	6	i_title_end
arg	21:21	21:43	5	&in->i_seekpoint_start
op	21:21	0:0	6	&
water	21:22	0:0	6	in
op	21:24	0:0	6	->
water	21:26	0:0	6	i_seekpoint_start
arg	21:45	21:66	5	&in->i_seekpoint_end
op	21:45	0:0	6	&
water	21:46	0:0	6	in
op	21:48	0:0	6	->
water	21:50	0:0	6	i_seekpoint_end
water	21:67	0:0	4	;
if	22:8	25:8	4	(psz_forced_demux && * psz_forced_demux)
cond	22:12	22:33	5	psz_forced_demux && * psz_forced_demux
water	22:12	0:0	6	psz_forced_demux
op	22:29	0:0	6	&&
op	22:32	0:0	6	*
water	22:33	0:0	6	psz_forced_demux
stmts	23:8	25:8	5	
water	23:8	0:0	6	{
water	24:12	0:0	6	psz_demux
op	24:22	0:0	6	=
water	24:24	0:0	6	psz_forced_demux
water	24:40	0:0	6	;
water	25:8	0:0	6	}
else	26:8	33:8	4
stmts	26:13	33:8	5	
if	26:13	33:8	6	(* psz_demux == '\0')
cond	26:17	26:31	7	* psz_demux == '\0'
op	26:17	0:0	8	*
water	26:18	0:0	8	psz_demux
op	26:28	0:0	8	==
water	26:31	0:0	8	'\0'
stmts	27:8	33:8	7	
water	27:8	0:0	8	{
water	30:12	0:0	8	psz_var_demux
op	30:26	0:0	8	=
call	30:28	30:68	8	var_GetNonEmptyString
arg	30:51	30:58	9	p_input
water	30:51	0:0	10	p_input
arg	30:60	30:68	9	"demux"
water	30:60	0:0	10	"demux"
water	30:69	0:0	8	;
water	31:12	0:0	8	psz_demux
op	31:22	0:0	8	=
water	31:24	0:0	8	(
water	31:25	0:0	8	psz_var_demux
op	31:39	0:0	8	!=
water	31:42	0:0	8	NULL
water	31:46	0:0	8	)
water	31:48	0:0	8	?
water	31:50	0:0	8	psz_var_demux
water	31:64	0:0	8	:
water	31:66	0:0	8	"any"
water	31:71	0:0	8	;
call	32:12	32:64	8	msg_Dbg
arg	32:21	32:28	9	p_input
water	32:21	0:0	10	p_input
arg	32:30	32:52	9	"specified demux `%s'"
water	32:30	0:0	10	"specified demux `%s'"
arg	32:54	32:64	9	psz_demux
water	32:54	0:0	10	psz_demux
water	32:65	0:0	8	;
water	33:8	0:0	8	}
water	35:8	0:0	4	in
op	35:10	0:0	4	->
water	35:12	0:0	4	p_demux
op	35:20	0:0	4	=
call	35:22	36:77	4	demux_New
arg	35:33	35:40	5	p_input
water	35:33	0:0	6	p_input
arg	35:42	35:49	5	p_input
water	35:42	0:0	6	p_input
arg	35:51	35:61	5	psz_access
water	35:51	0:0	6	psz_access
arg	35:63	35:72	5	psz_demux
water	35:63	0:0	6	psz_demux
arg	36:33	36:41	5	psz_path
water	36:33	0:0	6	psz_path
arg	36:43	36:47	5	NULL
water	36:43	0:0	6	NULL
arg	36:49	36:69	5	p_input->p->p_es_out
water	36:49	0:0	6	p_input
op	36:56	0:0	6	->
water	36:58	0:0	6	p
op	36:59	0:0	6	->
water	36:61	0:0	6	p_es_out
arg	36:71	36:77	5	false
water	36:71	0:0	6	false
water	36:78	0:0	4	;
water	37:4	0:0	4	}
else	38:4	46:4	2
stmts	39:4	46:4	3	
water	39:4	0:0	4	{
if	41:8	42:22	4	(* psz_demux)
cond	41:12	41:13	5	* psz_demux
op	41:12	0:0	6	*
water	41:13	0:0	6	psz_demux
stmts	42:12	42:22	5	
goto	42:12	42:22	6	error
water	42:17	0:0	7	error
if	43:8	44:22	4	(strcmp (psz_access ,"file" ))
cond	43:12	43:39	5	strcmp (psz_access ,"file" )
call	43:12	43:39	6	strcmp
arg	43:20	43:30	7	psz_access
water	43:20	0:0	8	psz_access
arg	43:32	43:39	7	"file"
water	43:32	0:0	8	"file"
stmts	44:12	44:22	5	
goto	44:12	44:22	6	error
water	44:17	0:0	7	error
call	45:8	45:62	4	msg_Dbg
arg	45:17	45:24	5	p_input
water	45:17	0:0	6	p_input
arg	45:26	45:50	5	"trying to pre-parse %s"
water	45:26	0:0	6	"trying to pre-parse %s"
arg	45:53	45:62	5	psz_path
water	45:53	0:0	6	psz_path
water	45:63	0:0	4	;
water	46:4	0:0	4	}
decl	47:4	47:23	2	mtime_t	i_pts_delay
if	48:4	86:4	2	(in -> p_demux)
cond	48:8	48:12	3	in -> p_demux
water	48:8	0:0	4	in
op	48:10	0:0	4	->
water	48:12	0:0	4	p_demux
stmts	49:4	86:4	3	
water	49:4	0:0	4	{
water	51:8	0:0	4	in
op	51:10	0:0	4	->
water	51:12	0:0	4	b_title_demux
op	51:26	0:0	4	=
water	51:28	0:0	4	true
water	51:32	0:0	4	;
if	52:8	57:8	4	(demux_Control (in -> p_demux ,DEMUX_GET_TITLE_INFO ,& in -> title ,& in -> i_title ,& in -> i_title_offset ,& in -> i_seekpoint_offset ))
cond	52:12	54:73	5	demux_Control (in -> p_demux ,DEMUX_GET_TITLE_INFO ,& in -> title ,& in -> i_title ,& in -> i_title_offset ,& in -> i_seekpoint_offset )
call	52:12	54:73	6	demux_Control
arg	52:27	52:38	7	in->p_demux
water	52:27	0:0	8	in
op	52:29	0:0	8	->
water	52:31	0:0	8	p_demux
arg	52:40	52:60	7	DEMUX_GET_TITLE_INFO
water	52:40	0:0	8	DEMUX_GET_TITLE_INFO
arg	53:28	53:38	7	&in->title
op	53:28	0:0	8	&
water	53:29	0:0	8	in
op	53:31	0:0	8	->
water	53:33	0:0	8	title
arg	53:40	53:52	7	&in->i_title
op	53:40	0:0	8	&
water	53:41	0:0	8	in
op	53:43	0:0	8	->
water	53:45	0:0	8	i_title
arg	54:28	54:47	7	&in->i_title_offset
op	54:28	0:0	8	&
water	54:29	0:0	8	in
op	54:31	0:0	8	->
water	54:33	0:0	8	i_title_offset
arg	54:49	54:73	7	&in->i_seekpoint_offset
op	54:49	0:0	8	&
water	54:50	0:0	8	in
op	54:52	0:0	8	->
water	54:54	0:0	8	i_seekpoint_offset
stmts	55:8	57:8	5	
water	55:8	0:0	6	{
call	56:12	56:45	6	TAB_INIT
arg	56:22	56:33	7	in->i_title
water	56:22	0:0	8	in
op	56:24	0:0	8	->
water	56:26	0:0	8	i_title
arg	56:35	56:45	7	in->title
water	56:35	0:0	8	in
op	56:37	0:0	8	->
water	56:39	0:0	8	title
water	56:46	0:0	6	;
water	57:8	0:0	6	}
if	58:8	60:42	4	(demux_Control (in -> p_demux ,DEMUX_CAN_CONTROL_PACE ,& in -> b_can_pace_control ))
cond	58:12	59:52	5	demux_Control (in -> p_demux ,DEMUX_CAN_CONTROL_PACE ,& in -> b_can_pace_control )
call	58:12	59:52	6	demux_Control
arg	58:27	58:38	7	in->p_demux
water	58:27	0:0	8	in
op	58:29	0:0	8	->
water	58:31	0:0	8	p_demux
arg	58:40	58:62	7	DEMUX_CAN_CONTROL_PACE
water	58:40	0:0	8	DEMUX_CAN_CONTROL_PACE
arg	59:28	59:52	7	&in->b_can_pace_control
op	59:28	0:0	8	&
water	59:29	0:0	8	in
op	59:31	0:0	8	->
water	59:33	0:0	8	b_can_pace_control
stmts	60:12	60:42	5	
water	60:12	0:0	6	in
op	60:14	0:0	6	->
water	60:16	0:0	6	b_can_pace_control
op	60:35	0:0	6	=
water	60:37	0:0	6	false
water	60:42	0:0	6	;
call	61:8	61:73	4	assert
arg	61:16	61:73	5	in->p_demux->pf_demux!=NULL||!in->b_can_pace_control
water	61:16	0:0	6	in
op	61:18	0:0	6	->
water	61:20	0:0	6	p_demux
op	61:27	0:0	6	->
water	61:29	0:0	6	pf_demux
op	61:38	0:0	6	!=
water	61:41	0:0	6	NULL
op	61:46	0:0	6	||
op	61:49	0:0	6	!
water	61:50	0:0	6	in
op	61:52	0:0	6	->
water	61:54	0:0	6	b_can_pace_control
water	61:74	0:0	4	;
if	62:8	70:8	4	(! in -> b_can_pace_control)
cond	62:12	62:17	5	! in -> b_can_pace_control
op	62:12	0:0	6	!
water	62:13	0:0	6	in
op	62:15	0:0	6	->
water	62:17	0:0	6	b_can_pace_control
stmts	63:8	70:8	5	
water	63:8	0:0	6	{
if	64:12	69:12	6	(demux_Control (in -> p_demux ,DEMUX_CAN_CONTROL_RATE ,& in -> b_can_rate_control ,& in -> b_rescale_ts ))
cond	64:16	65:75	7	demux_Control (in -> p_demux ,DEMUX_CAN_CONTROL_RATE ,& in -> b_can_rate_control ,& in -> b_rescale_ts )
call	64:16	65:75	8	demux_Control
arg	64:31	64:42	9	in->p_demux
water	64:31	0:0	10	in
op	64:33	0:0	10	->
water	64:35	0:0	10	p_demux
arg	64:44	64:66	9	DEMUX_CAN_CONTROL_RATE
water	64:44	0:0	10	DEMUX_CAN_CONTROL_RATE
arg	65:32	65:55	9	&in->b_can_rate_control
op	65:32	0:0	10	&
water	65:33	0:0	10	in
op	65:35	0:0	10	->
water	65:37	0:0	10	b_can_rate_control
arg	65:57	65:75	9	&in->b_rescale_ts
op	65:57	0:0	10	&
water	65:58	0:0	10	in
op	65:60	0:0	10	->
water	65:62	0:0	10	b_rescale_ts
stmts	66:12	69:12	7	
water	66:12	0:0	8	{
water	67:16	0:0	8	in
op	67:18	0:0	8	->
water	67:20	0:0	8	b_can_rate_control
op	67:39	0:0	8	=
water	67:41	0:0	8	false
water	67:46	0:0	8	;
water	68:16	0:0	8	in
op	68:18	0:0	8	->
water	68:20	0:0	8	b_rescale_ts
op	68:33	0:0	8	=
water	68:35	0:0	8	true
water	68:39	0:0	8	;
water	69:12	0:0	8	}
water	70:8	0:0	6	}
else	71:8	75:8	4
stmts	72:8	75:8	5	
water	72:8	0:0	6	{
water	73:12	0:0	6	in
op	73:14	0:0	6	->
water	73:16	0:0	6	b_can_rate_control
op	73:35	0:0	6	=
water	73:37	0:0	6	true
water	73:41	0:0	6	;
water	74:12	0:0	6	in
op	74:14	0:0	6	->
water	74:16	0:0	6	b_rescale_ts
op	74:29	0:0	6	=
water	74:31	0:0	6	true
water	74:35	0:0	6	;
water	75:8	0:0	6	}
if	76:8	78:35	4	(demux_Control (in -> p_demux ,DEMUX_CAN_PAUSE ,& in -> b_can_pause ))
cond	76:12	77:45	5	demux_Control (in -> p_demux ,DEMUX_CAN_PAUSE ,& in -> b_can_pause )
call	76:12	77:45	6	demux_Control
arg	76:27	76:38	7	in->p_demux
water	76:27	0:0	8	in
op	76:29	0:0	8	->
water	76:31	0:0	8	p_demux
arg	76:40	76:55	7	DEMUX_CAN_PAUSE
water	76:40	0:0	8	DEMUX_CAN_PAUSE
arg	77:28	77:45	7	&in->b_can_pause
op	77:28	0:0	8	&
water	77:29	0:0	8	in
op	77:31	0:0	8	->
water	77:33	0:0	8	b_can_pause
stmts	78:12	78:35	5	
water	78:12	0:0	6	in
op	78:14	0:0	6	->
water	78:16	0:0	6	b_can_pause
op	78:28	0:0	6	=
water	78:30	0:0	6	false
water	78:35	0:0	6	;
call	79:8	79:86	4	var_SetBool
arg	79:21	79:28	5	p_input
water	79:21	0:0	6	p_input
arg	79:30	79:41	5	"can-pause"
water	79:30	0:0	6	"can-pause"
arg	79:43	79:86	5	in->b_can_pause||!in->b_can_pace_control
water	79:43	0:0	6	in
op	79:45	0:0	6	->
water	79:47	0:0	6	b_can_pause
op	79:59	0:0	6	||
op	79:62	0:0	6	!
water	79:63	0:0	6	in
op	79:65	0:0	6	->
water	79:67	0:0	6	b_can_pace_control
water	79:87	0:0	4	;
call	80:8	80:92	4	var_SetBool
arg	80:21	80:28	5	p_input
water	80:21	0:0	6	p_input
arg	80:30	80:40	5	"can-rate"
water	80:30	0:0	6	"can-rate"
arg	80:42	80:92	5	!in->b_can_pace_control||in->b_can_rate_control
op	80:42	0:0	6	!
water	80:43	0:0	6	in
op	80:45	0:0	6	->
water	80:47	0:0	6	b_can_pace_control
op	80:66	0:0	6	||
water	80:69	0:0	6	in
op	80:71	0:0	6	->
water	80:73	0:0	6	b_can_rate_control
water	80:93	0:0	4	;
call	81:8	81:115	4	var_SetBool
arg	81:21	81:28	5	p_input
water	81:21	0:0	6	p_input
arg	81:30	81:42	5	"can-rewind"
water	81:30	0:0	6	"can-rewind"
arg	81:44	81:115	5	!in->b_rescale_ts&&!in->b_can_pace_control&&in->b_can_rate_control
op	81:44	0:0	6	!
water	81:45	0:0	6	in
op	81:47	0:0	6	->
water	81:49	0:0	6	b_rescale_ts
op	81:62	0:0	6	&&
op	81:65	0:0	6	!
water	81:66	0:0	6	in
op	81:68	0:0	6	->
water	81:70	0:0	6	b_can_pace_control
op	81:89	0:0	6	&&
water	81:92	0:0	6	in
op	81:94	0:0	6	->
water	81:96	0:0	6	b_can_rate_control
water	81:116	0:0	4	;
decl	82:8	82:23	4	bool	b_can_seek
if	83:8	84:30	4	(demux_Control (in -> p_demux ,DEMUX_CAN_SEEK ,& b_can_seek ))
cond	83:12	83:68	5	demux_Control (in -> p_demux ,DEMUX_CAN_SEEK ,& b_can_seek )
call	83:12	83:68	6	demux_Control
arg	83:27	83:38	7	in->p_demux
water	83:27	0:0	8	in
op	83:29	0:0	8	->
water	83:31	0:0	8	p_demux
arg	83:40	83:54	7	DEMUX_CAN_SEEK
water	83:40	0:0	8	DEMUX_CAN_SEEK
arg	83:56	83:68	7	&b_can_seek
op	83:56	0:0	8	&
water	83:57	0:0	8	b_can_seek
stmts	84:12	84:30	5	
water	84:12	0:0	6	b_can_seek
op	84:23	0:0	6	=
water	84:25	0:0	6	false
water	84:30	0:0	6	;
call	85:8	85:53	4	var_SetBool
arg	85:21	85:28	5	p_input
water	85:21	0:0	6	p_input
arg	85:30	85:40	5	"can-seek"
water	85:30	0:0	6	"can-seek"
arg	85:42	85:53	5	b_can_seek
water	85:42	0:0	6	b_can_seek
water	85:54	0:0	4	;
water	86:4	0:0	4	}
else	87:4	213:4	2
stmts	88:4	213:4	3	
water	88:4	0:0	4	{
decl	89:8	90:74	4	access_t	*p_access
op	89:27	0:0	4	=
call	89:29	90:73	5	access_New
arg	89:41	89:48	6	p_input
water	89:41	0:0	7	p_input
arg	89:50	89:57	6	p_input
water	89:50	0:0	7	p_input
arg	90:41	90:51	6	psz_access
water	90:41	0:0	7	psz_access
arg	90:53	90:62	6	psz_demux
water	90:53	0:0	7	psz_demux
arg	90:64	90:73	6	psz_path
water	90:64	0:0	7	psz_path
if	91:8	102:8	4	(p_access == NULL)
cond	91:12	91:24	5	p_access == NULL
water	91:12	0:0	6	p_access
op	91:21	0:0	6	==
water	91:24	0:0	6	NULL
stmts	92:8	102:8	5	
water	92:8	0:0	6	{
if	93:12	100:12	6	(vlc_object_alive (p_input ))
cond	93:16	93:42	7	vlc_object_alive (p_input )
call	93:16	93:42	8	vlc_object_alive
arg	93:34	93:42	9	p_input
water	93:34	0:0	10	p_input
stmts	94:12	100:12	7	
water	94:12	0:0	8	{
call	95:16	95:65	8	msg_Err
arg	95:25	95:32	9	p_input
water	95:25	0:0	10	p_input
arg	95:34	95:55	9	"open of `%s' failed"
water	95:34	0:0	10	"open of `%s' failed"
arg	95:57	95:65	9	psz_mrl
water	95:57	0:0	10	psz_mrl
water	95:66	0:0	8	;
if	96:16	99:78	8	(! b_in_can_fail)
cond	96:20	96:21	9	! b_in_can_fail
op	96:20	0:0	10	!
water	96:21	0:0	10	b_in_can_fail
stmts	97:20	99:78	9	
call	97:20	99:77	10	dialog_Fatal
arg	97:34	97:41	11	p_input
water	97:34	0:0	12	p_input
arg	97:43	97:74	11	_("Your input can't be opened")
call	97:43	97:73	12	_
arg	97:45	97:73	13	"Your input can't be opened"
water	97:45	0:0	14	"Your input can't be opened"
arg	98:35	99:67	11	_("VLC is unable to open the MRL '%s'."" Check the log for details.")
call	98:35	99:66	12	_
arg	98:37	99:66	13	"VLC is unable to open the MRL '%s'."" Check the log for details."
water	98:37	0:0	14	"VLC is unable to open the MRL '%s'."
water	99:37	0:0	14	" Check the log for details."
arg	99:69	99:77	11	psz_mrl
water	99:69	0:0	12	psz_mrl
water	99:78	0:0	10	;
water	100:12	0:0	8	}
goto	101:12	101:22	6	error
water	101:17	0:0	7	error
water	102:8	0:0	6	}
if	104:8	105:43	4	(! psz_demux [ 0 ] || !strcasecmp (psz_demux ,"any" ))
cond	104:12	104:59	5	! psz_demux [ 0 ] || !strcasecmp (psz_demux ,"any" )
op	104:12	0:0	6	!
water	104:13	0:0	6	psz_demux
op	104:22	0:0	6	[
water	104:23	0:0	6	0
op	104:24	0:0	6	]
op	104:26	0:0	6	||
op	104:29	0:0	6	!
call	104:30	104:59	6	strcasecmp
arg	104:42	104:51	7	psz_demux
water	104:42	0:0	8	psz_demux
arg	104:53	104:59	7	"any"
water	104:53	0:0	8	"any"
stmts	105:12	105:43	5	
water	105:12	0:0	6	psz_demux
op	105:22	0:0	6	=
water	105:24	0:0	6	p_access
op	105:32	0:0	6	->
water	105:34	0:0	6	psz_demux
water	105:43	0:0	6	;
decl	107:8	107:25	4	int	i_input_list
decl	108:8	108:30	4	char	**ppsz_input_list
call	109:8	109:48	4	TAB_INIT
arg	109:18	109:30	5	i_input_list
water	109:18	0:0	6	i_input_list
arg	109:32	109:48	5	ppsz_input_list
water	109:32	0:0	6	ppsz_input_list
water	109:49	0:0	4	;
if	111:8	131:8	4	(& p_input -> p -> input == in)
cond	111:12	111:34	5	& p_input -> p -> input == in
op	111:12	0:0	6	&
water	111:13	0:0	6	p_input
op	111:20	0:0	6	->
water	111:22	0:0	6	p
op	111:23	0:0	6	->
water	111:25	0:0	6	input
op	111:31	0:0	6	==
water	111:34	0:0	6	in
stmts	112:8	131:8	5	
water	112:8	0:0	6	{
decl	113:12	113:26	6	char	*psz_list
decl	114:12	114:28	6	char	*psz_parser
water	115:12	0:0	6	psz_list
op	115:21	0:0	6	=
water	116:12	0:0	6	psz_parser
op	116:23	0:0	6	=
call	116:25	116:76	6	var_CreateGetNonEmptyString
arg	116:54	116:61	7	p_input
water	116:54	0:0	8	p_input
arg	116:63	116:76	7	"input-list"
water	116:63	0:0	8	"input-list"
water	116:77	0:0	6	;
while	117:12	129:12	6	(psz_parser && * psz_parser)
cond	117:19	117:34	7	psz_parser && * psz_parser
water	117:19	0:0	8	psz_parser
op	117:30	0:0	8	&&
op	117:33	0:0	8	*
water	117:34	0:0	8	psz_parser
stmts	118:12	129:12	7	
water	118:12	0:0	8	{
decl	119:16	119:51	8	char	*p
op	119:24	0:0	8	=
call	119:26	119:50	9	strchr
arg	119:34	119:44	10	psz_parser
water	119:34	0:0	11	psz_parser
arg	119:46	119:50	10	','
water	119:46	0:0	11	','
if	120:16	121:31	8	(p)
cond	120:20	120:20	9	p
water	120:20	0:0	10	p
stmts	121:20	121:31	9	
op	121:20	0:0	10	*
water	121:21	0:0	10	p
op	121:22	0:0	10	++
op	121:25	0:0	10	=
water	121:27	0:0	10	'\0'
water	121:31	0:0	10	;
if	122:16	127:16	8	(* psz_parser)
cond	122:20	122:21	9	* psz_parser
op	122:20	0:0	10	*
water	122:21	0:0	10	psz_parser
stmts	123:16	127:16	9	
water	123:16	0:0	10	{
decl	124:20	124:57	10	char	*psz_name
op	124:35	0:0	10	=
call	124:37	124:56	11	strdup
arg	124:45	124:56	12	psz_parser
water	124:45	0:0	13	psz_parser
if	125:20	126:77	10	(psz_name)
cond	125:24	125:24	11	psz_name
water	125:24	0:0	12	psz_name
stmts	126:24	126:77	11	
call	126:24	126:76	12	TAB_APPEND
arg	126:36	126:48	13	i_input_list
water	126:36	0:0	14	i_input_list
arg	126:50	126:65	13	ppsz_input_list
water	126:50	0:0	14	ppsz_input_list
arg	126:67	126:76	13	psz_name
water	126:67	0:0	14	psz_name
water	126:77	0:0	12	;
water	127:16	0:0	10	}
water	128:16	0:0	8	psz_parser
op	128:27	0:0	8	=
water	128:29	0:0	8	p
water	128:30	0:0	8	;
water	129:12	0:0	8	}
call	130:12	130:27	6	free
arg	130:18	130:27	7	psz_list
water	130:18	0:0	8	psz_list
water	130:28	0:0	6	;
water	131:8	0:0	6	}
if	133:8	137:8	4	(i_input_list <= 0)
cond	133:12	133:28	5	i_input_list <= 0
water	133:12	0:0	6	i_input_list
op	133:25	0:0	6	<=
water	133:28	0:0	6	0
stmts	134:8	137:8	5	
water	134:8	0:0	6	{
call	135:12	136:53	6	InputGetExtraFiles
arg	135:32	135:39	7	p_input
water	135:32	0:0	8	p_input
arg	135:41	135:54	7	&i_input_list
op	135:41	0:0	8	&
water	135:42	0:0	8	i_input_list
arg	135:56	135:72	7	&ppsz_input_list
op	135:56	0:0	8	&
water	135:57	0:0	8	ppsz_input_list
arg	136:32	136:42	7	psz_access
water	136:32	0:0	8	psz_access
arg	136:44	136:53	7	psz_path
water	136:44	0:0	8	psz_path
water	136:54	0:0	6	;
water	137:8	0:0	6	}
if	138:8	139:61	4	(i_input_list > 0)
cond	138:12	138:27	5	i_input_list > 0
water	138:12	0:0	6	i_input_list
op	138:25	0:0	6	>
water	138:27	0:0	6	0
stmts	139:12	139:61	5	
call	139:12	139:60	6	TAB_APPEND
arg	139:24	139:36	7	i_input_list
water	139:24	0:0	8	i_input_list
arg	139:38	139:53	7	ppsz_input_list
water	139:38	0:0	8	ppsz_input_list
arg	139:55	139:60	7	NULL
water	139:55	0:0	8	NULL
water	139:61	0:0	6	;
decl	141:8	141:74	4	stream_t	*p_stream
op	141:27	0:0	4	=
call	141:29	141:73	5	stream_AccessNew
arg	141:47	141:55	6	p_access
water	141:47	0:0	7	p_access
arg	141:57	141:73	6	ppsz_input_list
water	141:57	0:0	7	ppsz_input_list
if	142:8	147:8	4	(ppsz_input_list)
cond	142:12	142:12	5	ppsz_input_list
water	142:12	0:0	6	ppsz_input_list
stmts	143:8	147:8	5	
water	143:8	0:0	6	{
for	144:12	145:42	6	( int i = 0 ;ppsz_input_list [ i ] != NULL;i ++)
forinit	0:0	144:26	7	 int i = 0 ;
decl	144:17	144:26	8	int	i
op	144:23	0:0	8	=
water	144:25	0:0	8	0
cond	144:28	144:50	7	ppsz_input_list [ i ] != NULL
water	144:28	0:0	8	ppsz_input_list
op	144:43	0:0	8	[
water	144:44	0:0	8	i
op	144:45	0:0	8	]
op	144:47	0:0	8	!=
water	144:50	0:0	8	NULL
forexpr	144:56	144:57	7	i ++
water	144:56	0:0	8	i
op	144:57	0:0	8	++
stmts	145:16	145:42	7	
call	145:16	145:41	8	free
arg	145:22	145:41	9	ppsz_input_list[i]
water	145:22	0:0	10	ppsz_input_list
op	145:37	0:0	10	[
water	145:38	0:0	10	i
op	145:39	0:0	10	]
water	145:42	0:0	8	;
call	146:12	146:53	6	TAB_CLEAN
arg	146:23	146:35	7	i_input_list
water	146:23	0:0	8	i_input_list
arg	146:37	146:53	7	ppsz_input_list
water	146:37	0:0	8	ppsz_input_list
water	146:54	0:0	6	;
water	147:8	0:0	6	}
if	148:8	152:8	4	(p_stream == NULL)
cond	148:12	148:24	5	p_stream == NULL
water	148:12	0:0	6	p_stream
op	148:21	0:0	6	==
water	148:24	0:0	6	NULL
stmts	149:8	152:8	5	
water	149:8	0:0	6	{
call	150:12	150:70	6	msg_Warn
arg	150:22	150:29	7	p_input
water	150:22	0:0	8	p_input
arg	150:31	150:70	7	"cannot create a stream_t from access"
water	150:31	0:0	8	"cannot create a stream_t from access"
water	150:71	0:0	6	;
goto	151:12	151:22	6	error
water	151:17	0:0	7	error
water	152:8	0:0	6	}
decl	154:8	155:74	4	char	*psz_stream_filter
op	154:32	0:0	4	=
call	154:34	155:73	5	var_GetNonEmptyString
arg	154:57	154:64	6	p_input
water	154:57	0:0	7	p_input
arg	155:57	155:73	6	"stream-filter"
water	155:57	0:0	7	"stream-filter"
water	156:8	0:0	4	p_stream
op	156:17	0:0	4	=
call	156:19	157:77	4	stream_FilterChainNew
arg	156:42	156:50	5	p_stream
water	156:42	0:0	6	p_stream
arg	156:52	156:69	5	psz_stream_filter
water	156:52	0:0	6	psz_stream_filter
arg	157:31	157:77	5	var_GetBool(p_input,"input-record-native")
call	157:31	157:75	6	var_GetBool
arg	157:44	157:51	7	p_input
water	157:44	0:0	8	p_input
arg	157:53	157:75	7	"input-record-native"
water	157:53	0:0	8	"input-record-native"
water	157:78	0:0	4	;
call	158:8	158:32	4	free
arg	158:14	158:32	5	psz_stream_filter
water	158:14	0:0	6	psz_stream_filter
water	158:33	0:0	4	;
if	159:8	177:8	4	(! p_input -> b_preparsing)
cond	159:12	159:22	5	! p_input -> b_preparsing
op	159:12	0:0	6	!
water	159:13	0:0	6	p_input
op	159:20	0:0	6	->
water	159:22	0:0	6	b_preparsing
stmts	160:8	177:8	5	
water	160:8	0:0	6	{
decl	161:12	161:18	6	bool	b
call	162:12	163:52	6	stream_Control
arg	162:28	162:36	7	p_stream
water	162:28	0:0	8	p_stream
arg	162:38	162:61	7	STREAM_CAN_CONTROL_PACE
water	162:38	0:0	8	STREAM_CAN_CONTROL_PACE
arg	163:28	163:52	7	&in->b_can_pace_control
op	163:28	0:0	8	&
water	163:29	0:0	8	in
op	163:31	0:0	8	->
water	163:33	0:0	8	b_can_pace_control
water	163:53	0:0	6	;
water	164:12	0:0	6	in
op	164:14	0:0	6	->
water	164:16	0:0	6	b_can_rate_control
op	164:35	0:0	6	=
water	164:37	0:0	6	in
op	164:39	0:0	6	->
water	164:41	0:0	6	b_can_pace_control
water	164:59	0:0	6	;
water	165:12	0:0	6	in
op	165:14	0:0	6	->
water	165:16	0:0	6	b_rescale_ts
op	165:29	0:0	6	=
water	165:31	0:0	6	true
water	165:35	0:0	6	;
call	166:12	166:73	6	stream_Control
arg	166:28	166:36	7	p_stream
water	166:28	0:0	8	p_stream
arg	166:38	166:54	7	STREAM_CAN_PAUSE
water	166:38	0:0	8	STREAM_CAN_PAUSE
arg	166:56	166:73	7	&in->b_can_pause
op	166:56	0:0	8	&
water	166:57	0:0	8	in
op	166:59	0:0	8	->
water	166:61	0:0	8	b_can_pause
water	166:74	0:0	6	;
call	167:12	168:68	6	var_SetBool
arg	167:25	167:32	7	p_input
water	167:25	0:0	8	p_input
arg	167:34	167:45	7	"can-pause"
water	167:34	0:0	8	"can-pause"
arg	168:25	168:68	7	in->b_can_pause||!in->b_can_pace_control
water	168:25	0:0	8	in
op	168:27	0:0	8	->
water	168:29	0:0	8	b_can_pause
op	168:41	0:0	8	||
op	168:44	0:0	8	!
water	168:45	0:0	8	in
op	168:47	0:0	8	->
water	168:49	0:0	8	b_can_pace_control
water	168:69	0:0	6	;
call	169:12	170:75	6	var_SetBool
arg	169:25	169:32	7	p_input
water	169:25	0:0	8	p_input
arg	169:34	169:44	7	"can-rate"
water	169:34	0:0	8	"can-rate"
arg	170:25	170:75	7	!in->b_can_pace_control||in->b_can_rate_control
op	170:25	0:0	8	!
water	170:26	0:0	8	in
op	170:28	0:0	8	->
water	170:30	0:0	8	b_can_pace_control
op	170:49	0:0	8	||
water	170:52	0:0	8	in
op	170:54	0:0	8	->
water	170:56	0:0	8	b_can_rate_control
water	170:76	0:0	6	;
call	171:12	172:70	6	var_SetBool
arg	171:25	171:32	7	p_input
water	171:25	0:0	8	p_input
arg	171:34	171:46	7	"can-rewind"
water	171:34	0:0	8	"can-rewind"
arg	172:25	172:70	7	!in->b_rescale_ts&&!in->b_can_pace_control
op	172:25	0:0	8	!
water	172:26	0:0	8	in
op	172:28	0:0	8	->
water	172:30	0:0	8	b_rescale_ts
op	172:43	0:0	8	&&
op	172:46	0:0	8	!
water	172:47	0:0	8	in
op	172:49	0:0	8	->
water	172:51	0:0	8	b_can_pace_control
water	172:71	0:0	6	;
call	173:12	173:58	6	stream_Control
arg	173:28	173:36	7	p_stream
water	173:28	0:0	8	p_stream
arg	173:38	173:53	7	STREAM_CAN_SEEK
water	173:38	0:0	8	STREAM_CAN_SEEK
arg	173:55	173:58	7	&b
op	173:55	0:0	8	&
water	173:56	0:0	8	b
water	173:59	0:0	6	;
call	174:12	174:48	6	var_SetBool
arg	174:25	174:32	7	p_input
water	174:25	0:0	8	p_input
arg	174:34	174:44	7	"can-seek"
water	174:34	0:0	8	"can-seek"
arg	174:46	174:48	7	b
water	174:46	0:0	8	b
water	174:49	0:0	6	;
water	175:12	0:0	6	in
op	175:14	0:0	6	->
water	175:16	0:0	6	b_title_demux
op	175:30	0:0	6	=
water	175:32	0:0	6	false
water	175:37	0:0	6	;
call	176:12	176:73	6	stream_Control
arg	176:28	176:36	7	p_stream
water	176:28	0:0	8	p_stream
arg	176:38	176:58	7	STREAM_GET_PTS_DELAY
water	176:38	0:0	8	STREAM_GET_PTS_DELAY
arg	176:60	176:73	7	&i_pts_delay
op	176:60	0:0	8	&
water	176:61	0:0	8	i_pts_delay
water	176:74	0:0	6	;
water	177:8	0:0	6	}
water	178:8	0:0	4	in
op	178:10	0:0	4	->
water	178:12	0:0	4	p_demux
op	178:20	0:0	4	=
call	178:22	182:55	4	demux_New
arg	178:33	178:40	5	p_input
water	178:33	0:0	6	p_input
arg	178:42	178:49	5	p_input
water	178:42	0:0	6	p_input
arg	178:51	178:61	5	psz_access
water	178:51	0:0	6	psz_access
arg	178:63	178:72	5	psz_demux
water	178:63	0:0	6	psz_demux
arg	180:28	180:78	5	p_stream->psz_path?p_stream->psz_path:psz_path
water	180:28	0:0	6	p_stream
op	180:36	0:0	6	->
water	180:38	0:0	6	psz_path
water	180:47	0:0	6	?
water	180:49	0:0	6	p_stream
op	180:57	0:0	6	->
water	180:59	0:0	6	psz_path
water	180:68	0:0	6	:
water	180:70	0:0	6	psz_path
arg	181:33	181:41	5	p_stream
water	181:33	0:0	6	p_stream
arg	181:43	181:63	5	p_input->p->p_es_out
water	181:43	0:0	6	p_input
op	181:50	0:0	6	->
water	181:52	0:0	6	p
op	181:53	0:0	6	->
water	181:55	0:0	6	p_es_out
arg	182:33	182:55	5	p_input->b_preparsing
water	182:33	0:0	6	p_input
op	182:40	0:0	6	->
water	182:42	0:0	6	b_preparsing
water	182:56	0:0	4	;
if	183:8	197:8	4	(in -> p_demux == NULL)
cond	183:12	183:27	5	in -> p_demux == NULL
water	183:12	0:0	6	in
op	183:14	0:0	6	->
water	183:16	0:0	6	p_demux
op	183:24	0:0	6	==
water	183:27	0:0	6	NULL
stmts	184:8	197:8	5	
water	184:8	0:0	6	{
if	185:12	194:12	6	(vlc_object_alive (p_input ))
cond	185:16	185:42	7	vlc_object_alive (p_input )
call	185:16	185:42	8	vlc_object_alive
arg	185:34	185:42	9	p_input
water	185:34	0:0	10	p_input
stmts	186:12	194:12	7	
water	186:12	0:0	8	{
call	187:16	188:57	8	msg_Err
arg	187:25	187:32	9	p_input
water	187:25	0:0	10	p_input
arg	187:34	187:77	9	"no suitable demux module for `%s/%s://%s'"
water	187:34	0:0	10	"no suitable demux module for `%s/%s://%s'"
arg	188:25	188:35	9	psz_access
water	188:25	0:0	10	psz_access
arg	188:37	188:46	9	psz_demux
water	188:37	0:0	10	psz_demux
arg	188:48	188:57	9	psz_path
water	188:48	0:0	10	psz_path
water	188:58	0:0	8	;
if	189:16	193:85	8	(! b_in_can_fail)
cond	189:20	189:21	9	! b_in_can_fail
op	189:20	0:0	10	!
water	189:21	0:0	10	b_in_can_fail
stmts	190:20	193:85	9	
call	190:20	193:84	10	dialog_Fatal
arg	190:34	190:55	11	VLC_OBJECT(p_input)
call	190:34	190:54	12	VLC_OBJECT
arg	190:46	190:54	13	p_input
water	190:46	0:0	14	p_input
arg	191:34	191:77	11	_("VLC can't recognize the input's format")
call	191:34	191:76	12	_
arg	191:36	191:76	13	"VLC can't recognize the input's format"
water	191:36	0:0	14	"VLC can't recognize the input's format"
arg	192:34	193:74	11	_("The format of '%s' cannot be detected. ""Have a look at the log for details.")
call	192:34	193:73	12	_
arg	192:36	193:73	13	"The format of '%s' cannot be detected. ""Have a look at the log for details."
water	192:36	0:0	14	"The format of '%s' cannot be detected. "
water	193:36	0:0	14	"Have a look at the log for details."
arg	193:76	193:84	11	psz_mrl
water	193:76	0:0	12	psz_mrl
water	193:85	0:0	10	;
water	194:12	0:0	8	}
call	195:12	195:36	6	stream_Delete
arg	195:27	195:36	7	p_stream
water	195:27	0:0	8	p_stream
water	195:37	0:0	6	;
goto	196:12	196:22	6	error
water	196:17	0:0	7	error
water	197:8	0:0	6	}
call	198:8	198:46	4	assert
arg	198:16	198:46	5	in->p_demux->pf_demux!=NULL
water	198:16	0:0	6	in
op	198:18	0:0	6	->
water	198:20	0:0	6	p_demux
op	198:27	0:0	6	->
water	198:29	0:0	6	pf_demux
op	198:38	0:0	6	!=
water	198:41	0:0	6	NULL
water	198:47	0:0	4	;
if	200:8	212:8	4	(! p_input -> b_preparsing && in -> i_title <= 0)
cond	200:12	200:53	5	! p_input -> b_preparsing && in -> i_title <= 0
op	200:12	0:0	6	!
water	200:13	0:0	6	p_input
op	200:20	0:0	6	->
water	200:22	0:0	6	b_preparsing
op	200:35	0:0	6	&&
water	200:38	0:0	6	in
op	200:40	0:0	6	->
water	200:42	0:0	6	i_title
op	200:50	0:0	6	<=
water	200:53	0:0	6	0
stmts	201:8	212:8	5	
water	201:8	0:0	6	{
if	202:12	207:12	6	(demux_Control (in -> p_demux ,DEMUX_GET_TITLE_INFO ,& in -> title ,& in -> i_title ,& in -> i_title_offset ,& in -> i_seekpoint_offset ))
cond	202:16	204:77	7	demux_Control (in -> p_demux ,DEMUX_GET_TITLE_INFO ,& in -> title ,& in -> i_title ,& in -> i_title_offset ,& in -> i_seekpoint_offset )
call	202:16	204:77	8	demux_Control
arg	202:31	202:42	9	in->p_demux
water	202:31	0:0	10	in
op	202:33	0:0	10	->
water	202:35	0:0	10	p_demux
arg	202:44	202:64	9	DEMUX_GET_TITLE_INFO
water	202:44	0:0	10	DEMUX_GET_TITLE_INFO
arg	203:32	203:42	9	&in->title
op	203:32	0:0	10	&
water	203:33	0:0	10	in
op	203:35	0:0	10	->
water	203:37	0:0	10	title
arg	203:44	203:56	9	&in->i_title
op	203:44	0:0	10	&
water	203:45	0:0	10	in
op	203:47	0:0	10	->
water	203:49	0:0	10	i_title
arg	204:32	204:51	9	&in->i_title_offset
op	204:32	0:0	10	&
water	204:33	0:0	10	in
op	204:35	0:0	10	->
water	204:37	0:0	10	i_title_offset
arg	204:53	204:77	9	&in->i_seekpoint_offset
op	204:53	0:0	10	&
water	204:54	0:0	10	in
op	204:56	0:0	10	->
water	204:58	0:0	10	i_seekpoint_offset
stmts	205:12	207:12	7	
water	205:12	0:0	8	{
call	206:16	206:49	8	TAB_INIT
arg	206:26	206:37	9	in->i_title
water	206:26	0:0	10	in
op	206:28	0:0	10	->
water	206:30	0:0	10	i_title
arg	206:39	206:49	9	in->title
water	206:39	0:0	10	in
op	206:41	0:0	10	->
water	206:43	0:0	10	title
water	206:50	0:0	8	;
water	207:12	0:0	8	}
else	208:12	211:12	6
stmts	209:12	211:12	7	
water	209:12	0:0	8	{
water	210:16	0:0	8	in
op	210:18	0:0	8	->
water	210:20	0:0	8	b_title_demux
op	210:34	0:0	8	=
water	210:36	0:0	8	true
water	210:40	0:0	8	;
water	211:12	0:0	8	}
water	212:8	0:0	6	}
water	213:4	0:0	4	}
call	214:4	214:24	2	free
arg	214:10	214:24	3	psz_var_demux
water	214:10	0:0	4	psz_var_demux
water	214:25	0:0	2	;
call	215:4	215:18	2	free
arg	215:10	215:18	3	psz_dup
water	215:10	0:0	4	psz_dup
water	215:19	0:0	2	;
if	217:4	218:39	2	(demux_Control (in -> p_demux ,DEMUX_CAN_RECORD ,& in -> b_can_stream_record ))
cond	217:8	217:79	3	demux_Control (in -> p_demux ,DEMUX_CAN_RECORD ,& in -> b_can_stream_record )
call	217:8	217:79	4	demux_Control
arg	217:23	217:34	5	in->p_demux
water	217:23	0:0	6	in
op	217:25	0:0	6	->
water	217:27	0:0	6	p_demux
arg	217:36	217:52	5	DEMUX_CAN_RECORD
water	217:36	0:0	6	DEMUX_CAN_RECORD
arg	217:54	217:79	5	&in->b_can_stream_record
op	217:54	0:0	6	&
water	217:55	0:0	6	in
op	217:57	0:0	6	->
water	217:59	0:0	6	b_can_stream_record
stmts	218:8	218:39	3	
water	218:8	0:0	4	in
op	218:10	0:0	4	->
water	218:12	0:0	4	b_can_stream_record
op	218:32	0:0	4	=
water	218:34	0:0	4	false
water	218:39	0:0	4	;
if	220:4	221:39	2	(!var_GetBool (p_input ,"input-record-native" ))
cond	220:8	220:53	3	!var_GetBool (p_input ,"input-record-native" )
op	220:8	0:0	4	!
call	220:9	220:53	4	var_GetBool
arg	220:22	220:29	5	p_input
water	220:22	0:0	6	p_input
arg	220:31	220:53	5	"input-record-native"
water	220:31	0:0	6	"input-record-native"
stmts	221:8	221:39	3	
water	221:8	0:0	4	in
op	221:10	0:0	4	->
water	221:12	0:0	4	b_can_stream_record
op	221:32	0:0	4	=
water	221:34	0:0	4	false
water	221:39	0:0	4	;
call	222:4	222:45	2	var_SetBool
arg	222:17	222:24	3	p_input
water	222:17	0:0	4	p_input
arg	222:26	222:38	3	"can-record"
water	222:26	0:0	4	"can-record"
arg	222:40	222:45	3	true
water	222:40	0:0	4	true
water	222:46	0:0	2	;
call	224:4	224:64	2	var_SetBool
arg	224:17	224:24	3	p_input
water	224:17	0:0	4	p_input
arg	224:26	224:38	3	"can-record"
water	224:26	0:0	4	"can-record"
arg	224:40	224:64	3	in->b_can_stream_record
water	224:40	0:0	4	in
op	224:42	0:0	4	->
water	224:44	0:0	4	b_can_stream_record
water	224:65	0:0	2	;
if	228:4	250:4	2	(! p_input -> b_preparsing)
cond	228:8	228:18	3	! p_input -> b_preparsing
op	228:8	0:0	4	!
water	228:9	0:0	4	p_input
op	228:16	0:0	4	->
water	228:18	0:0	4	b_preparsing
stmts	229:4	250:4	3	
water	229:4	0:0	4	{
decl	230:8	230:24	4	int	i_attachment
decl	231:8	231:39	4	input_attachment_t	**attachment
if	232:8	239:8	4	(!demux_Control (in -> p_demux ,DEMUX_GET_ATTACHMENTS ,& attachment ,& i_attachment ))
cond	232:12	233:56	5	!demux_Control (in -> p_demux ,DEMUX_GET_ATTACHMENTS ,& attachment ,& i_attachment )
op	232:12	0:0	6	!
call	232:13	233:56	6	demux_Control
arg	232:28	232:39	7	in->p_demux
water	232:28	0:0	8	in
op	232:30	0:0	8	->
water	232:32	0:0	8	p_demux
arg	232:41	232:62	7	DEMUX_GET_ATTACHMENTS
water	232:41	0:0	8	DEMUX_GET_ATTACHMENTS
arg	233:29	233:40	7	&attachment
op	233:29	0:0	8	&
water	233:30	0:0	8	attachment
arg	233:42	233:56	7	&i_attachment
op	233:42	0:0	8	&
water	233:43	0:0	8	i_attachment
stmts	234:8	239:8	5	
water	234:8	0:0	6	{
call	235:12	235:54	6	vlc_mutex_lock
arg	235:28	235:54	7	&p_input->p->p_item->lock
op	235:28	0:0	8	&
water	235:29	0:0	8	p_input
op	235:36	0:0	8	->
water	235:38	0:0	8	p
op	235:39	0:0	8	->
water	235:41	0:0	8	p_item
op	235:47	0:0	8	->
water	235:49	0:0	8	lock
water	235:55	0:0	6	;
call	236:12	237:68	6	AppendAttachment
arg	236:30	236:55	7	&p_input->p->i_attachment
op	236:30	0:0	8	&
water	236:31	0:0	8	p_input
op	236:38	0:0	8	->
water	236:40	0:0	8	p
op	236:41	0:0	8	->
water	236:43	0:0	8	i_attachment
arg	236:57	236:80	7	&p_input->p->attachment
op	236:57	0:0	8	&
water	236:58	0:0	8	p_input
op	236:65	0:0	8	->
water	236:67	0:0	8	p
op	236:68	0:0	8	->
water	236:70	0:0	8	attachment
arg	236:82	236:111	7	&p_input->p->attachment_demux
op	236:82	0:0	8	&
water	236:83	0:0	8	p_input
op	236:90	0:0	8	->
water	236:92	0:0	8	p
op	236:93	0:0	8	->
water	236:95	0:0	8	attachment_demux
arg	237:30	237:42	7	i_attachment
water	237:30	0:0	8	i_attachment
arg	237:44	237:54	7	attachment
water	237:44	0:0	8	attachment
arg	237:56	237:68	7	in->p_demux
water	237:56	0:0	8	in
op	237:58	0:0	8	->
water	237:60	0:0	8	p_demux
water	237:69	0:0	6	;
call	238:12	238:56	6	vlc_mutex_unlock
arg	238:30	238:56	7	&p_input->p->p_item->lock
op	238:30	0:0	8	&
water	238:31	0:0	8	p_input
op	238:38	0:0	8	->
water	238:40	0:0	8	p
op	238:41	0:0	8	->
water	238:43	0:0	8	p_item
op	238:49	0:0	8	->
water	238:51	0:0	8	lock
water	238:57	0:0	6	;
water	239:8	0:0	6	}
if	243:8	245:41	4	(demux_Control (in -> p_demux ,DEMUX_GET_PTS_DELAY ,& in -> i_pts_delay ))
cond	243:12	244:44	5	demux_Control (in -> p_demux ,DEMUX_GET_PTS_DELAY ,& in -> i_pts_delay )
call	243:12	244:44	6	demux_Control
arg	243:27	243:38	7	in->p_demux
water	243:27	0:0	8	in
op	243:29	0:0	8	->
water	243:31	0:0	8	p_demux
arg	243:40	243:59	7	DEMUX_GET_PTS_DELAY
water	243:40	0:0	8	DEMUX_GET_PTS_DELAY
arg	244:27	244:44	7	&in->i_pts_delay
op	244:27	0:0	8	&
water	244:28	0:0	8	in
op	244:30	0:0	8	->
water	244:32	0:0	8	i_pts_delay
stmts	245:12	245:41	5	
water	245:12	0:0	6	in
op	245:14	0:0	6	->
water	245:16	0:0	6	i_pts_delay
op	245:28	0:0	6	=
water	245:30	0:0	6	i_pts_delay
water	245:41	0:0	6	;
if	246:8	247:49	4	(in -> i_pts_delay > INPUT_PTS_DELAY_MAX)
cond	246:12	246:30	5	in -> i_pts_delay > INPUT_PTS_DELAY_MAX
water	246:12	0:0	6	in
op	246:14	0:0	6	->
water	246:16	0:0	6	i_pts_delay
op	246:28	0:0	6	>
water	246:30	0:0	6	INPUT_PTS_DELAY_MAX
stmts	247:12	247:49	5	
water	247:12	0:0	6	in
op	247:14	0:0	6	->
water	247:16	0:0	6	i_pts_delay
op	247:28	0:0	6	=
water	247:30	0:0	6	INPUT_PTS_DELAY_MAX
water	247:49	0:0	6	;
else	248:8	249:31	4
stmts	248:13	249:31	5	
if	248:13	249:31	6	(in -> i_pts_delay < 0)
cond	248:17	248:35	7	in -> i_pts_delay < 0
water	248:17	0:0	8	in
op	248:19	0:0	8	->
water	248:21	0:0	8	i_pts_delay
op	248:33	0:0	8	<
water	248:35	0:0	8	0
stmts	249:12	249:31	7	
water	249:12	0:0	8	in
op	249:14	0:0	8	->
water	249:16	0:0	8	i_pts_delay
op	249:28	0:0	8	=
water	249:30	0:0	8	0
water	249:31	0:0	8	;
water	250:4	0:0	4	}
if	251:4	256:4	2	(!demux_Control (in -> p_demux ,DEMUX_GET_FPS ,& f_fps ) && f_fps > 0 . 0)
cond	251:8	251:74	3	!demux_Control (in -> p_demux ,DEMUX_GET_FPS ,& f_fps ) && f_fps > 0 . 0
op	251:8	0:0	4	!
call	251:9	251:59	4	demux_Control
arg	251:24	251:35	5	in->p_demux
water	251:24	0:0	6	in
op	251:26	0:0	6	->
water	251:28	0:0	6	p_demux
arg	251:37	251:50	5	DEMUX_GET_FPS
water	251:37	0:0	6	DEMUX_GET_FPS
arg	251:52	251:59	5	&f_fps
op	251:52	0:0	6	&
water	251:53	0:0	6	f_fps
op	251:61	0:0	4	&&
water	251:64	0:0	4	f_fps
op	251:70	0:0	4	>
water	251:72	0:0	4	0
op	251:73	0:0	4	.
water	251:74	0:0	4	0
stmts	252:4	256:4	3	
water	252:4	0:0	4	{
call	253:8	253:50	4	vlc_mutex_lock
arg	253:24	253:50	5	&p_input->p->p_item->lock
op	253:24	0:0	6	&
water	253:25	0:0	6	p_input
op	253:32	0:0	6	->
water	253:34	0:0	6	p
op	253:35	0:0	6	->
water	253:37	0:0	6	p_item
op	253:43	0:0	6	->
water	253:45	0:0	6	lock
water	253:51	0:0	4	;
water	254:8	0:0	4	p_input
op	254:15	0:0	4	->
water	254:17	0:0	4	p
op	254:18	0:0	4	->
water	254:20	0:0	4	f_fps
op	254:26	0:0	4	=
water	254:28	0:0	4	f_fps
water	254:33	0:0	4	;
call	255:8	255:52	4	vlc_mutex_unlock
arg	255:26	255:52	5	&p_input->p->p_item->lock
op	255:26	0:0	6	&
water	255:27	0:0	6	p_input
op	255:34	0:0	6	->
water	255:36	0:0	6	p
op	255:37	0:0	6	->
water	255:39	0:0	6	p_item
op	255:45	0:0	6	->
water	255:47	0:0	6	lock
water	255:53	0:0	4	;
water	256:4	0:0	4	}
if	257:4	258:76	2	(var_GetInteger (p_input ,"clock-synchro" ) != - 1)
cond	257:8	257:55	3	var_GetInteger (p_input ,"clock-synchro" ) != - 1
call	257:8	257:49	4	var_GetInteger
arg	257:24	257:31	5	p_input
water	257:24	0:0	6	p_input
arg	257:33	257:49	5	"clock-synchro"
water	257:33	0:0	6	"clock-synchro"
op	257:51	0:0	4	!=
op	257:54	0:0	4	-
water	257:55	0:0	4	1
stmts	258:8	258:76	3	
water	258:8	0:0	4	in
op	258:10	0:0	4	->
water	258:12	0:0	4	b_can_pace_control
op	258:31	0:0	4	=
op	258:33	0:0	4	!
call	258:34	258:75	4	var_GetInteger
arg	258:50	258:57	5	p_input
water	258:50	0:0	6	p_input
arg	258:59	258:75	5	"clock-synchro"
water	258:59	0:0	6	"clock-synchro"
water	258:76	0:0	4	;
return	259:4	259:22	2	VLC_SUCCESS
water	259:11	0:0	3	VLC_SUCCESS
label	260:0	260:5	2	error :
if	261:4	262:35	2	(in -> p_demux)
cond	261:8	261:12	3	in -> p_demux
water	261:8	0:0	4	in
op	261:10	0:0	4	->
water	261:12	0:0	4	p_demux
stmts	262:8	262:35	3	
call	262:8	262:34	4	demux_Delete
arg	262:22	262:34	5	in->p_demux
water	262:22	0:0	6	in
op	262:24	0:0	6	->
water	262:26	0:0	6	p_demux
water	262:35	0:0	4	;
call	263:4	263:24	2	free
arg	263:10	263:24	3	psz_var_demux
water	263:10	0:0	4	psz_var_demux
water	263:25	0:0	2	;
call	264:4	264:18	2	free
arg	264:10	264:18	3	psz_dup
water	264:10	0:0	4	psz_dup
water	264:19	0:0	2	;
return	265:4	265:23	2	VLC_EGENERIC
water	265:11	0:0	3	VLC_EGENERIC
