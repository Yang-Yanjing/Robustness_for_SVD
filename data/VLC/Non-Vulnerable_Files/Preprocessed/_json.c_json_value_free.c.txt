func	2:0	38:0	0	void	json_value_free
params	2:21	0:0	1	
param	2:22	2:40	2	json_value *	value
stmnts	0:0	37:3	1	
decl	4:3	4:25	2	json_value	*cur_value
if	5:3	6:12	2	(! value)
cond	5:7	5:8	3	! value
op	5:7	0:0	4	!
water	5:8	0:0	4	value
stmts	6:6	6:12	3	
return	6:6	6:12	4	
water	7:3	0:0	2	value
op	7:8	0:0	2	->
water	7:10	0:0	2	parent
op	7:17	0:0	2	=
water	7:19	0:0	2	0
water	7:20	0:0	2	;
while	8:3	37:3	2	(value)
cond	8:10	8:10	3	value
water	8:10	0:0	4	value
stmts	9:3	37:3	3	
water	9:3	0:0	4	{
switch	10:6	33:6	4	(value -> type)
cond	10:14	10:21	5	value -> type
water	10:14	0:0	6	value
op	10:19	0:0	6	->
water	10:21	0:0	6	type
stmts	11:6	33:6	5	
water	11:6	0:0	6	{
label	12:9	12:24	6	case json_array :
if	13:12	17:12	6	(! value -> u . array . length)
cond	13:16	13:32	7	! value -> u . array . length
op	13:16	0:0	8	!
water	13:17	0:0	8	value
op	13:22	0:0	8	->
water	13:24	0:0	8	u
op	13:25	0:0	8	.
water	13:26	0:0	8	array
op	13:31	0:0	8	.
water	13:32	0:0	8	length
stmts	14:12	17:12	7	
water	14:12	0:0	8	{
call	15:15	15:42	8	free
arg	15:21	15:42	9	value->u.array.values
water	15:21	0:0	10	value
op	15:26	0:0	10	->
water	15:28	0:0	10	u
op	15:29	0:0	10	.
water	15:30	0:0	10	array
op	15:35	0:0	10	.
water	15:36	0:0	10	values
water	15:43	0:0	8	;
break	16:15	16:20	8	
water	17:12	0:0	8	}
water	18:12	0:0	6	value
op	18:18	0:0	6	=
water	18:20	0:0	6	value
op	18:25	0:0	6	->
water	18:27	0:0	6	u
op	18:28	0:0	6	.
water	18:29	0:0	6	array
op	18:34	0:0	6	.
water	18:35	0:0	6	values
op	18:42	0:0	6	[
op	18:43	0:0	6	--
water	18:46	0:0	6	value
op	18:51	0:0	6	->
water	18:53	0:0	6	u
op	18:54	0:0	6	.
water	18:55	0:0	6	array
op	18:60	0:0	6	.
water	18:61	0:0	6	length
op	18:67	0:0	6	]
water	18:68	0:0	6	;
continue	19:12	19:20	6	
label	20:9	20:25	6	case json_object :
if	21:12	25:12	6	(! value -> u . object . length)
cond	21:16	21:33	7	! value -> u . object . length
op	21:16	0:0	8	!
water	21:17	0:0	8	value
op	21:22	0:0	8	->
water	21:24	0:0	8	u
op	21:25	0:0	8	.
water	21:26	0:0	8	object
op	21:32	0:0	8	.
water	21:33	0:0	8	length
stmts	22:12	25:12	7	
water	22:12	0:0	8	{
call	23:15	23:43	8	free
arg	23:21	23:43	9	value->u.object.values
water	23:21	0:0	10	value
op	23:26	0:0	10	->
water	23:28	0:0	10	u
op	23:29	0:0	10	.
water	23:30	0:0	10	object
op	23:36	0:0	10	.
water	23:37	0:0	10	values
water	23:44	0:0	8	;
break	24:15	24:20	8	
water	25:12	0:0	8	}
water	26:12	0:0	6	value
op	26:18	0:0	6	=
water	26:20	0:0	6	value
op	26:25	0:0	6	->
water	26:27	0:0	6	u
op	26:28	0:0	6	.
water	26:29	0:0	6	object
op	26:35	0:0	6	.
water	26:36	0:0	6	values
op	26:43	0:0	6	[
op	26:44	0:0	6	--
water	26:47	0:0	6	value
op	26:52	0:0	6	->
water	26:54	0:0	6	u
op	26:55	0:0	6	.
water	26:56	0:0	6	object
op	26:62	0:0	6	.
water	26:63	0:0	6	length
op	26:69	0:0	6	]
op	26:70	0:0	6	.
water	26:71	0:0	6	value
water	26:76	0:0	6	;
continue	27:12	27:20	6	
label	28:9	28:25	6	case json_string :
call	29:12	29:37	6	free
arg	29:18	29:37	7	value->u.string.ptr
water	29:18	0:0	8	value
op	29:23	0:0	8	->
water	29:25	0:0	8	u
op	29:26	0:0	8	.
water	29:27	0:0	8	string
op	29:33	0:0	8	.
water	29:34	0:0	8	ptr
water	29:38	0:0	6	;
break	30:12	30:17	6	
label	31:9	31:16	6	default :
break	32:12	32:17	6	
water	33:6	0:0	6	}
water	33:7	0:0	4	;
water	34:6	0:0	4	cur_value
op	34:16	0:0	4	=
water	34:18	0:0	4	value
water	34:23	0:0	4	;
water	35:6	0:0	4	value
op	35:12	0:0	4	=
water	35:14	0:0	4	value
op	35:19	0:0	4	->
water	35:21	0:0	4	parent
water	35:27	0:0	4	;
call	36:6	36:21	4	free
arg	36:12	36:21	5	cur_value
water	36:12	0:0	6	cur_value
water	36:22	0:0	4	;
water	37:3	0:0	4	}
