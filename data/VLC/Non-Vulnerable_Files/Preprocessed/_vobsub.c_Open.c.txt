func	2:0	83:0	0	static int	Open
params	2:16	0:0	1	
param	2:18	2:39	2	vlc_object_t *	p_this
stmnts	0:0	82:23	1	
decl	4:4	4:43	2	demux_t	*p_demux
op	4:25	0:0	2	=
water	4:27	0:0	2	(
water	4:28	0:0	2	demux_t
op	4:35	0:0	2	*
water	4:36	0:0	2	)
water	4:37	0:0	2	p_this
decl	5:4	5:22	2	demux_sys_t	*p_sys
decl	6:4	6:25	2	char	*psz_vobname
water	6:21	0:0	2	,
decl	6:4	6:25	2	char	*s
decl	7:4	7:13	2	int	i_len
if	8:4	21:4	2	(( s =stream_ReadLine (p_demux -> s ) ) != NULL)
cond	8:8	8:49	3	( s =stream_ReadLine (p_demux -> s ) ) != NULL
water	8:8	0:0	4	(
water	8:10	0:0	4	s
op	8:12	0:0	4	=
call	8:14	8:42	4	stream_ReadLine
arg	8:31	8:42	5	p_demux->s
water	8:31	0:0	6	p_demux
op	8:38	0:0	6	->
water	8:40	0:0	6	s
water	8:44	0:0	4	)
op	8:46	0:0	4	!=
water	8:49	0:0	4	NULL
stmts	9:4	21:4	3	
water	9:4	0:0	4	{
if	10:8	19:8	4	(!strcasestr (s ,"# VobSub index file" ))
cond	10:12	10:50	5	!strcasestr (s ,"# VobSub index file" )
op	10:12	0:0	6	!
call	10:13	10:50	6	strcasestr
arg	10:25	10:26	7	s
water	10:25	0:0	8	s
arg	10:28	10:50	7	"# VobSub index file"
water	10:28	0:0	8	"# VobSub index file"
stmts	11:8	19:8	5	
water	11:8	0:0	6	{
call	12:12	12:70	6	msg_Dbg
arg	12:21	12:28	7	p_demux
water	12:21	0:0	8	p_demux
arg	12:30	12:70	7	"this doesn't seem to be a vobsub file"
water	12:30	0:0	8	"this doesn't seem to be a vobsub file"
water	12:71	0:0	6	;
call	13:12	13:20	6	free
arg	13:18	13:20	7	s
water	13:18	0:0	8	s
water	13:21	0:0	6	;
if	14:12	17:12	6	(stream_Seek (p_demux -> s ,0 ))
cond	14:16	14:43	7	stream_Seek (p_demux -> s ,0 )
call	14:16	14:43	8	stream_Seek
arg	14:29	14:39	9	p_demux->s
water	14:29	0:0	10	p_demux
op	14:36	0:0	10	->
water	14:38	0:0	10	s
arg	14:41	14:43	9	0
water	14:41	0:0	10	0
stmts	15:12	17:12	7	
water	15:12	0:0	8	{
call	16:16	16:54	8	msg_Warn
arg	16:26	16:33	9	p_demux
water	16:26	0:0	10	p_demux
arg	16:35	16:54	9	"failed to rewind"
water	16:35	0:0	10	"failed to rewind"
water	16:55	0:0	8	;
water	17:12	0:0	8	}
return	18:12	18:31	6	VLC_EGENERIC
water	18:19	0:0	7	VLC_EGENERIC
water	19:8	0:0	6	}
call	20:8	20:16	4	free
arg	20:14	20:16	5	s
water	20:14	0:0	6	s
water	20:17	0:0	4	;
water	21:4	0:0	4	}
else	22:4	26:4	2
stmts	23:4	26:4	3	
water	23:4	0:0	4	{
call	24:8	24:59	4	msg_Dbg
arg	24:17	24:24	5	p_demux
water	24:17	0:0	6	p_demux
arg	24:26	24:59	5	"could not read vobsub IDX file"
water	24:26	0:0	6	"could not read vobsub IDX file"
water	24:60	0:0	4	;
return	25:8	25:27	4	VLC_EGENERIC
water	25:15	0:0	5	VLC_EGENERIC
water	26:4	0:0	4	}
water	28:4	0:0	2	p_demux
op	28:11	0:0	2	->
water	28:13	0:0	2	p_sys
op	28:19	0:0	2	=
water	28:21	0:0	2	p_sys
op	28:27	0:0	2	=
call	28:29	28:59	2	malloc
arg	28:37	28:59	3	sizeof(demux_sys_t)
op	28:37	0:0	4	sizeof
water	28:43	0:0	4	(
water	28:45	0:0	4	demux_sys_t
water	28:57	0:0	4	)
water	28:60	0:0	2	;
if	29:4	30:25	2	(unlikely (! p_sys ))
cond	29:8	29:25	3	unlikely (! p_sys )
call	29:8	29:25	4	unlikely
arg	29:18	29:25	5	!p_sys
op	29:18	0:0	6	!
water	29:19	0:0	6	p_sys
stmts	30:8	30:25	3	
return	30:8	30:25	4	VLC_ENOMEM
water	30:15	0:0	5	VLC_ENOMEM
water	31:4	0:0	2	p_sys
op	31:9	0:0	2	->
water	31:11	0:0	2	i_length
op	31:20	0:0	2	=
water	31:22	0:0	2	0
water	31:23	0:0	2	;
water	32:4	0:0	2	p_sys
op	32:9	0:0	2	->
water	32:11	0:0	2	p_vobsub_stream
op	32:27	0:0	2	=
water	32:29	0:0	2	NULL
water	32:33	0:0	2	;
water	33:4	0:0	2	p_sys
op	33:9	0:0	2	->
water	33:11	0:0	2	i_tracks
op	33:20	0:0	2	=
water	33:22	0:0	2	0
water	33:23	0:0	2	;
water	34:4	0:0	2	p_sys
op	34:9	0:0	2	->
water	34:11	0:0	2	track
op	34:17	0:0	2	=
call	34:19	34:52	2	malloc
arg	34:27	34:52	3	sizeof(vobsub_track_t)
op	34:27	0:0	4	sizeof
water	34:33	0:0	4	(
water	34:35	0:0	4	vobsub_track_t
water	34:50	0:0	4	)
water	34:53	0:0	2	;
if	35:4	36:18	2	(unlikely (! p_sys -> track ))
cond	35:8	35:32	3	unlikely (! p_sys -> track )
call	35:8	35:32	4	unlikely
arg	35:18	35:32	5	!p_sys->track
op	35:18	0:0	6	!
water	35:19	0:0	6	p_sys
op	35:24	0:0	6	->
water	35:26	0:0	6	track
stmts	36:8	36:18	3	
goto	36:8	36:18	4	error
water	36:13	0:0	5	error
water	37:4	0:0	2	p_sys
op	37:9	0:0	2	->
water	37:11	0:0	2	i_original_frame_width
op	37:34	0:0	2	=
op	37:36	0:0	2	-
water	37:37	0:0	2	1
water	37:38	0:0	2	;
water	38:4	0:0	2	p_sys
op	38:9	0:0	2	->
water	38:11	0:0	2	i_original_frame_height
op	38:35	0:0	2	=
op	38:37	0:0	2	-
water	38:38	0:0	2	1
water	38:39	0:0	2	;
water	39:4	0:0	2	p_sys
op	39:9	0:0	2	->
water	39:11	0:0	2	b_palette
op	39:21	0:0	2	=
water	39:23	0:0	2	false
water	39:28	0:0	2	;
call	40:4	40:55	2	memset
arg	40:12	40:26	3	p_sys->palette
water	40:12	0:0	4	p_sys
op	40:17	0:0	4	->
water	40:19	0:0	4	palette
arg	40:28	40:29	3	0
water	40:28	0:0	4	0
arg	40:31	40:55	3	16*sizeof(uint32_t)
water	40:31	0:0	4	16
op	40:34	0:0	4	*
op	40:36	0:0	4	sizeof
water	40:42	0:0	4	(
water	40:44	0:0	4	uint32_t
water	40:53	0:0	4	)
water	40:56	0:0	2	;
call	42:4	42:38	2	TextLoad
arg	42:14	42:25	3	&p_sys->txt
op	42:14	0:0	4	&
water	42:15	0:0	4	p_sys
op	42:20	0:0	4	->
water	42:22	0:0	4	txt
arg	42:27	42:38	3	p_demux->s
water	42:27	0:0	4	p_demux
op	42:34	0:0	4	->
water	42:36	0:0	4	s
water	42:39	0:0	2	;
call	44:4	44:28	2	ParseVobSubIDX
arg	44:20	44:28	3	p_demux
water	44:20	0:0	4	p_demux
water	44:29	0:0	2	;
call	46:4	46:28	2	TextUnload
arg	46:16	46:28	3	&p_sys->txt
op	46:16	0:0	4	&
water	46:17	0:0	4	p_sys
op	46:22	0:0	4	->
water	46:24	0:0	4	txt
water	46:29	0:0	2	;
if	48:4	58:4	2	(p_sys -> i_tracks > 0)
cond	48:8	48:26	3	p_sys -> i_tracks > 0
water	48:8	0:0	4	p_sys
op	48:13	0:0	4	->
water	48:15	0:0	4	i_tracks
op	48:24	0:0	4	>
water	48:26	0:0	4	0
stmts	49:4	58:4	3	
water	49:4	0:0	4	{
for	50:8	57:8	4	( int i = 0 ;i < p_sys -> i_tracks;i ++)
forinit	0:0	50:22	5	 int i = 0 ;
decl	50:13	50:22	6	int	i
op	50:19	0:0	6	=
water	50:21	0:0	6	0
cond	50:24	50:35	5	i < p_sys -> i_tracks
water	50:24	0:0	6	i
op	50:26	0:0	6	<
water	50:28	0:0	6	p_sys
op	50:33	0:0	6	->
water	50:35	0:0	6	i_tracks
forexpr	50:45	50:46	5	i ++
water	50:45	0:0	6	i
op	50:46	0:0	6	++
stmts	51:8	57:8	5	
water	51:8	0:0	6	{
if	52:12	56:12	6	(p_sys -> track [ i ] . i_subtitles > 1)
cond	52:16	52:46	7	p_sys -> track [ i ] . i_subtitles > 1
water	52:16	0:0	8	p_sys
op	52:21	0:0	8	->
water	52:23	0:0	8	track
op	52:28	0:0	8	[
water	52:29	0:0	8	i
op	52:30	0:0	8	]
op	52:31	0:0	8	.
water	52:32	0:0	8	i_subtitles
op	52:44	0:0	8	>
water	52:46	0:0	8	1
stmts	53:12	56:12	7	
water	53:12	0:0	8	{
if	54:16	55:134	8	(p_sys -> track [ i ] . p_subtitles [ p_sys -> track [ i ] . i_subtitles - 1 ] . i_start > p_sys -> i_length)
cond	54:20	54:96	9	p_sys -> track [ i ] . p_subtitles [ p_sys -> track [ i ] . i_subtitles - 1 ] . i_start > p_sys -> i_length
water	54:20	0:0	10	p_sys
op	54:25	0:0	10	->
water	54:27	0:0	10	track
op	54:32	0:0	10	[
water	54:33	0:0	10	i
op	54:34	0:0	10	]
op	54:35	0:0	10	.
water	54:36	0:0	10	p_subtitles
op	54:47	0:0	10	[
water	54:48	0:0	10	p_sys
op	54:53	0:0	10	->
water	54:55	0:0	10	track
op	54:60	0:0	10	[
water	54:61	0:0	10	i
op	54:62	0:0	10	]
op	54:63	0:0	10	.
water	54:64	0:0	10	i_subtitles
op	54:75	0:0	10	-
water	54:76	0:0	10	1
op	54:77	0:0	10	]
op	54:78	0:0	10	.
water	54:79	0:0	10	i_start
op	54:87	0:0	10	>
water	54:89	0:0	10	p_sys
op	54:94	0:0	10	->
water	54:96	0:0	10	i_length
stmts	55:20	55:134	9	
water	55:20	0:0	10	p_sys
op	55:25	0:0	10	->
water	55:27	0:0	10	i_length
op	55:36	0:0	10	=
water	55:38	0:0	10	(
water	55:39	0:0	10	int64_t
water	55:46	0:0	10	)
water	55:48	0:0	10	p_sys
op	55:53	0:0	10	->
water	55:55	0:0	10	track
op	55:60	0:0	10	[
water	55:61	0:0	10	i
op	55:62	0:0	10	]
op	55:63	0:0	10	.
water	55:64	0:0	10	p_subtitles
op	55:75	0:0	10	[
water	55:76	0:0	10	p_sys
op	55:81	0:0	10	->
water	55:83	0:0	10	track
op	55:88	0:0	10	[
water	55:89	0:0	10	i
op	55:90	0:0	10	]
op	55:91	0:0	10	.
water	55:92	0:0	10	i_subtitles
op	55:103	0:0	10	-
water	55:104	0:0	10	1
op	55:105	0:0	10	]
op	55:106	0:0	10	.
water	55:107	0:0	10	i_start
op	55:115	0:0	10	+
water	55:117	0:0	10	(
water	55:119	0:0	10	1
op	55:121	0:0	10	*
water	55:122	0:0	10	1000
op	55:127	0:0	10	*
water	55:128	0:0	10	1000
water	55:133	0:0	10	)
water	55:134	0:0	10	;
water	56:12	0:0	8	}
water	57:8	0:0	6	}
water	58:4	0:0	4	}
if	59:4	60:18	2	(asprintf (& psz_vobname ,"%s://%s" ,p_demux -> psz_access ,p_demux -> psz_location ) == - 1)
cond	59:8	59:92	3	asprintf (& psz_vobname ,"%s://%s" ,p_demux -> psz_access ,p_demux -> psz_location ) == - 1
call	59:8	59:86	4	asprintf
arg	59:18	59:30	5	&psz_vobname
op	59:18	0:0	6	&
water	59:19	0:0	6	psz_vobname
arg	59:32	59:41	5	"%s://%s"
water	59:32	0:0	6	"%s://%s"
arg	59:43	59:62	5	p_demux->psz_access
water	59:43	0:0	6	p_demux
op	59:50	0:0	6	->
water	59:52	0:0	6	psz_access
arg	59:64	59:86	5	p_demux->psz_location
water	59:64	0:0	6	p_demux
op	59:71	0:0	6	->
water	59:73	0:0	6	psz_location
op	59:88	0:0	4	==
op	59:91	0:0	4	-
water	59:92	0:0	4	1
stmts	60:8	60:18	3	
goto	60:8	60:18	4	error
water	60:13	0:0	5	error
water	61:4	0:0	2	i_len
op	61:10	0:0	2	=
call	61:12	61:32	2	strlen
arg	61:20	61:32	3	psz_vobname
water	61:20	0:0	4	psz_vobname
water	61:33	0:0	2	;
if	62:4	62:65	2	(i_len >= 4)
cond	62:8	62:17	3	i_len >= 4
water	62:8	0:0	4	i_len
op	62:14	0:0	4	>=
water	62:17	0:0	4	4
stmts	62:21	62:65	3	
call	62:21	62:64	4	memcpy
arg	62:29	62:52	5	psz_vobname+i_len-4
water	62:29	0:0	6	psz_vobname
op	62:41	0:0	6	+
water	62:43	0:0	6	i_len
op	62:49	0:0	6	-
water	62:51	0:0	6	4
arg	62:54	62:60	5	".sub"
water	62:54	0:0	6	".sub"
arg	62:62	62:64	5	4
water	62:62	0:0	6	4
water	62:65	0:0	4	;
water	64:4	0:0	2	p_sys
op	64:9	0:0	2	->
water	64:11	0:0	2	p_vobsub_stream
op	64:27	0:0	2	=
call	64:29	64:65	2	stream_UrlNew
arg	64:44	64:51	3	p_demux
water	64:44	0:0	4	p_demux
arg	64:53	64:65	3	psz_vobname
water	64:53	0:0	4	psz_vobname
water	64:66	0:0	2	;
if	65:4	71:4	2	(p_sys -> p_vobsub_stream == NULL)
cond	65:8	65:34	3	p_sys -> p_vobsub_stream == NULL
water	65:8	0:0	4	p_sys
op	65:13	0:0	4	->
water	65:15	0:0	4	p_vobsub_stream
op	65:31	0:0	4	==
water	65:34	0:0	4	NULL
stmts	66:4	71:4	3	
water	66:4	0:0	4	{
call	67:8	68:29	4	msg_Err
arg	67:17	67:24	5	p_demux
water	67:17	0:0	6	p_demux
arg	67:26	67:62	5	"couldn't open .sub Vobsub file: %s"
water	67:26	0:0	6	"couldn't open .sub Vobsub file: %s"
arg	68:17	68:29	5	psz_vobname
water	68:17	0:0	6	psz_vobname
water	68:30	0:0	4	;
call	69:8	69:26	4	free
arg	69:14	69:26	5	psz_vobname
water	69:14	0:0	6	psz_vobname
water	69:27	0:0	4	;
goto	70:8	70:18	4	error
water	70:13	0:0	5	error
water	71:4	0:0	4	}
call	72:4	72:22	2	free
arg	72:10	72:22	3	psz_vobname
water	72:10	0:0	4	psz_vobname
water	72:23	0:0	2	;
water	73:4	0:0	2	p_demux
op	73:11	0:0	2	->
water	73:13	0:0	2	pf_demux
op	73:22	0:0	2	=
water	73:24	0:0	2	Demux
water	73:29	0:0	2	;
water	74:4	0:0	2	p_demux
op	74:11	0:0	2	->
water	74:13	0:0	2	pf_control
op	74:24	0:0	2	=
water	74:26	0:0	2	Control
water	74:33	0:0	2	;
return	75:4	75:22	2	VLC_SUCCESS
water	75:11	0:0	3	VLC_SUCCESS
label	76:0	76:5	2	error :
for	78:4	79:43	2	( int i = 0 ;i < p_sys -> i_tracks;i ++)
forinit	0:0	78:18	3	 int i = 0 ;
decl	78:9	78:18	4	int	i
op	78:15	0:0	4	=
water	78:17	0:0	4	0
cond	78:20	78:31	3	i < p_sys -> i_tracks
water	78:20	0:0	4	i
op	78:22	0:0	4	<
water	78:24	0:0	4	p_sys
op	78:29	0:0	4	->
water	78:31	0:0	4	i_tracks
forexpr	78:41	78:42	3	i ++
water	78:41	0:0	4	i
op	78:42	0:0	4	++
stmts	79:8	79:43	3	
call	79:8	79:42	4	free
arg	79:14	79:42	5	p_sys->track[i].p_subtitles
water	79:14	0:0	6	p_sys
op	79:19	0:0	6	->
water	79:21	0:0	6	track
op	79:26	0:0	6	[
water	79:27	0:0	6	i
op	79:28	0:0	6	]
op	79:29	0:0	6	.
water	79:30	0:0	6	p_subtitles
water	79:43	0:0	4	;
call	80:4	80:23	2	free
arg	80:10	80:23	3	p_sys->track
water	80:10	0:0	4	p_sys
op	80:15	0:0	4	->
water	80:17	0:0	4	track
water	80:24	0:0	2	;
call	81:4	81:16	2	free
arg	81:10	81:16	3	p_sys
water	81:10	0:0	4	p_sys
water	81:17	0:0	2	;
return	82:4	82:23	2	VLC_EGENERIC
water	82:11	0:0	3	VLC_EGENERIC
