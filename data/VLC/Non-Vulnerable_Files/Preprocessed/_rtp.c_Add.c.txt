func	2:0	235:0	0	static sout_stream_id_sys_t *	Add
params	2:32	0:0	1	
param	2:34	2:57	2	sout_stream_t *	p_stream
param	2:59	2:78	2	es_format_t *	p_fmt
stmnts	0:0	234:15	1	
decl	6:4	6:46	2	sout_stream_sys_t	*p_sys
op	6:29	0:0	2	=
water	6:31	0:0	2	p_stream
op	6:39	0:0	2	->
water	6:41	0:0	2	p_sys
decl	7:4	7:30	2	char	*psz_sdp
decl	8:4	8:54	2	sout_stream_id_sys_t	*id
op	8:29	0:0	2	=
call	8:31	8:53	3	malloc
arg	8:39	8:53	4	sizeof(*id)
op	8:39	0:0	5	sizeof
water	8:45	0:0	5	(
op	8:47	0:0	5	*
water	8:48	0:0	5	id
water	8:51	0:0	5	)
if	9:4	10:19	2	(unlikely (id == NULL ))
cond	9:8	9:27	3	unlikely (id == NULL )
call	9:8	9:27	4	unlikely
arg	9:17	9:27	5	id==NULL
water	9:17	0:0	6	id
op	9:20	0:0	6	==
water	9:23	0:0	6	NULL
stmts	10:8	10:19	3	
return	10:8	10:19	4	NULL
water	10:15	0:0	5	NULL
water	11:4	0:0	2	id
op	11:6	0:0	2	->
water	11:8	0:0	2	p_stream
op	11:19	0:0	2	=
water	11:21	0:0	2	p_stream
water	11:29	0:0	2	;
water	12:4	0:0	2	id
op	12:6	0:0	2	->
water	12:8	0:0	2	i_mtu
op	12:14	0:0	2	=
call	12:16	12:52	2	var_InheritInteger
arg	12:36	12:44	3	p_stream
water	12:36	0:0	4	p_stream
arg	12:46	12:52	3	"mtu"
water	12:46	0:0	4	"mtu"
water	12:53	0:0	2	;
if	13:4	14:32	2	(id -> i_mtu <= 12 + 16)
cond	13:8	13:26	3	id -> i_mtu <= 12 + 16
water	13:8	0:0	4	id
op	13:10	0:0	4	->
water	13:12	0:0	4	i_mtu
op	13:18	0:0	4	<=
water	13:21	0:0	4	12
op	13:24	0:0	4	+
water	13:26	0:0	4	16
stmts	14:8	14:32	3	
water	14:8	0:0	4	id
op	14:10	0:0	4	->
water	14:12	0:0	4	i_mtu
op	14:18	0:0	4	=
water	14:20	0:0	4	576
op	14:24	0:0	4	-
water	14:26	0:0	4	20
op	14:29	0:0	4	-
water	14:31	0:0	4	8
water	14:32	0:0	4	;
call	15:4	15:70	2	msg_Dbg
arg	15:13	15:21	3	p_stream
water	15:13	0:0	4	p_stream
arg	15:23	15:58	3	"maximum RTP packet size: %d bytes"
water	15:23	0:0	4	"maximum RTP packet size: %d bytes"
arg	15:60	15:70	3	id->i_mtu
water	15:60	0:0	4	id
op	15:62	0:0	4	->
water	15:64	0:0	4	i_mtu
water	15:71	0:0	2	;
water	17:4	0:0	2	id
op	17:6	0:0	2	->
water	17:8	0:0	2	srtp
op	17:13	0:0	2	=
water	17:15	0:0	2	NULL
water	17:19	0:0	2	;
call	19:4	19:35	2	vlc_mutex_init
arg	19:20	19:35	3	&id->lock_sink
op	19:20	0:0	4	&
water	19:21	0:0	4	id
op	19:23	0:0	4	->
water	19:25	0:0	4	lock_sink
water	19:36	0:0	2	;
water	20:4	0:0	2	id
op	20:6	0:0	2	->
water	20:8	0:0	2	sinkc
op	20:14	0:0	2	=
water	20:16	0:0	2	0
water	20:17	0:0	2	;
water	21:4	0:0	2	id
op	21:6	0:0	2	->
water	21:8	0:0	2	sinkv
op	21:14	0:0	2	=
water	21:16	0:0	2	NULL
water	21:20	0:0	2	;
water	22:4	0:0	2	id
op	22:6	0:0	2	->
water	22:8	0:0	2	rtsp_id
op	22:16	0:0	2	=
water	22:18	0:0	2	NULL
water	22:22	0:0	2	;
water	23:4	0:0	2	id
op	23:6	0:0	2	->
water	23:8	0:0	2	p_fifo
op	23:15	0:0	2	=
water	23:17	0:0	2	NULL
water	23:21	0:0	2	;
water	24:4	0:0	2	id
op	24:6	0:0	2	->
water	24:8	0:0	2	listen
op	24:14	0:0	2	.
water	24:15	0:0	2	fd
op	24:18	0:0	2	=
water	24:20	0:0	2	NULL
water	24:24	0:0	2	;
water	25:4	0:0	2	id
op	25:6	0:0	2	->
water	25:8	0:0	2	b_first_packet
op	25:23	0:0	2	=
water	25:25	0:0	2	true
water	25:29	0:0	2	;
water	26:4	0:0	2	id
op	26:6	0:0	2	->
water	26:8	0:0	2	i_caching
op	26:18	0:0	2	=
water	27:8	0:0	2	(
water	27:9	0:0	2	int64_t
water	27:16	0:0	2	)
water	27:17	0:0	2	1000
call	27:22	27:75	2	*var_GetInteger
arg	27:40	27:48	3	p_stream
water	27:40	0:0	4	p_stream
arg	27:50	27:75	3	SOUT_CFG_PREFIX"caching"
water	27:50	0:0	4	SOUT_CFG_PREFIX
water	27:66	0:0	4	"caching"
water	27:76	0:0	2	;
call	28:4	28:60	2	vlc_rand_bytes
arg	28:20	28:35	3	&id->i_sequence
op	28:20	0:0	4	&
water	28:21	0:0	4	id
op	28:23	0:0	4	->
water	28:25	0:0	4	i_sequence
arg	28:37	28:60	3	sizeof(id->i_sequence)
op	28:37	0:0	4	sizeof
water	28:44	0:0	4	(
water	28:45	0:0	4	id
op	28:47	0:0	4	->
water	28:49	0:0	4	i_sequence
water	28:59	0:0	4	)
water	28:61	0:0	2	;
call	29:4	29:47	2	vlc_rand_bytes
arg	29:20	29:28	3	id->ssrc
water	29:20	0:0	4	id
op	29:22	0:0	4	->
water	29:24	0:0	4	ssrc
arg	29:30	29:47	3	sizeof(id->ssrc)
op	29:30	0:0	4	sizeof
water	29:37	0:0	4	(
water	29:38	0:0	4	id
op	29:40	0:0	4	->
water	29:42	0:0	4	ssrc
water	29:46	0:0	4	)
water	29:48	0:0	2	;
decl	30:4	30:23	2	bool	format
op	30:16	0:0	2	=
water	30:18	0:0	2	false
if	31:4	50:4	2	(p_sys -> p_vod_media != NULL)
cond	31:8	31:30	3	p_sys -> p_vod_media != NULL
water	31:8	0:0	4	p_sys
op	31:13	0:0	4	->
water	31:15	0:0	4	p_vod_media
op	31:27	0:0	4	!=
water	31:30	0:0	4	NULL
stmts	32:4	50:4	3	
water	32:4	0:0	4	{
water	33:8	0:0	4	id
op	33:10	0:0	4	->
water	33:12	0:0	4	rtp_fmt
op	33:19	0:0	4	.
water	33:20	0:0	4	ptname
op	33:27	0:0	4	=
water	33:29	0:0	4	NULL
water	33:33	0:0	4	;
decl	34:8	34:21	4	uint32_t	ssrc
decl	35:8	37:58	4	int	val
op	35:16	0:0	4	=
call	35:18	37:57	5	vod_init_id
arg	35:30	35:48	6	p_sys->p_vod_media
water	35:30	0:0	7	p_sys
op	35:35	0:0	7	->
water	35:37	0:0	7	p_vod_media
arg	35:50	35:72	6	p_sys->psz_vod_session
water	35:50	0:0	7	p_sys
op	35:55	0:0	7	->
water	35:57	0:0	7	psz_vod_session
arg	36:30	36:53	6	p_fmt?p_fmt->i_id:0
water	36:30	0:0	7	p_fmt
water	36:36	0:0	7	?
water	36:38	0:0	7	p_fmt
op	36:43	0:0	7	->
water	36:45	0:0	7	i_id
water	36:50	0:0	7	:
water	36:52	0:0	7	0
arg	36:55	36:57	6	id
water	36:55	0:0	7	id
arg	36:59	36:71	6	&id->rtp_fmt
op	36:59	0:0	7	&
water	36:60	0:0	7	id
op	36:62	0:0	7	->
water	36:64	0:0	7	rtp_fmt
arg	37:30	37:35	6	&ssrc
op	37:30	0:0	7	&
water	37:31	0:0	7	ssrc
arg	37:37	37:57	6	&id->i_seq_sent_next
op	37:37	0:0	7	&
water	37:38	0:0	7	id
op	37:40	0:0	7	->
water	37:42	0:0	7	i_seq_sent_next
if	38:8	45:8	4	(val == VLC_SUCCESS)
cond	38:12	38:19	5	val == VLC_SUCCESS
water	38:12	0:0	6	val
op	38:16	0:0	6	==
water	38:19	0:0	6	VLC_SUCCESS
stmts	39:8	45:8	5	
water	39:8	0:0	6	{
call	40:12	40:52	6	memcpy
arg	40:19	40:27	7	id->ssrc
water	40:19	0:0	8	id
op	40:21	0:0	8	->
water	40:23	0:0	8	ssrc
arg	40:29	40:34	7	&ssrc
op	40:29	0:0	8	&
water	40:30	0:0	8	ssrc
arg	40:36	40:52	7	sizeof(id->ssrc)
op	40:36	0:0	8	sizeof
water	40:42	0:0	8	(
water	40:43	0:0	8	id
op	40:45	0:0	8	->
water	40:47	0:0	8	ssrc
water	40:51	0:0	8	)
water	40:53	0:0	6	;
water	44:12	0:0	6	id
op	44:14	0:0	6	->
water	44:16	0:0	6	i_sequence
op	44:27	0:0	6	=
water	44:29	0:0	6	id
op	44:31	0:0	6	->
water	44:33	0:0	6	i_seq_sent_next
water	44:48	0:0	6	;
water	45:8	0:0	6	}
water	49:8	0:0	4	format
op	49:15	0:0	4	=
water	49:17	0:0	4	(
water	49:18	0:0	4	id
op	49:20	0:0	4	->
water	49:22	0:0	4	rtp_fmt
op	49:29	0:0	4	.
water	49:30	0:0	4	ptname
op	49:37	0:0	4	!=
water	49:40	0:0	4	NULL
water	49:44	0:0	4	)
water	49:45	0:0	4	;
water	50:4	0:0	4	}
if	51:4	61:4	2	(! format)
cond	51:8	51:9	3	! format
op	51:8	0:0	4	!
water	51:9	0:0	4	format
stmts	52:4	61:4	3	
water	52:4	0:0	4	{
water	53:8	0:0	4	id
op	53:10	0:0	4	->
water	53:12	0:0	4	rtp_fmt
op	53:19	0:0	4	.
water	53:20	0:0	4	fmtp
op	53:25	0:0	4	=
water	53:27	0:0	4	NULL
water	53:31	0:0	4	;
decl	54:8	54:76	4	char	*psz
op	54:18	0:0	4	=
call	54:20	54:75	5	var_GetNonEmptyString
arg	54:43	54:51	6	p_stream
water	54:43	0:0	7	p_stream
arg	54:53	54:75	6	SOUT_CFG_PREFIX"mux"
water	54:53	0:0	7	SOUT_CFG_PREFIX
water	54:69	0:0	7	"mux"
if	55:8	56:22	4	(p_fmt == NULL && psz == NULL)
cond	55:12	55:36	5	p_fmt == NULL && psz == NULL
water	55:12	0:0	6	p_fmt
op	55:18	0:0	6	==
water	55:21	0:0	6	NULL
op	55:26	0:0	6	&&
water	55:29	0:0	6	psz
op	55:33	0:0	6	==
water	55:36	0:0	6	NULL
stmts	56:12	56:22	5	
goto	56:12	56:22	6	error
water	56:17	0:0	7	error
decl	57:8	57:77	4	int	val
op	57:16	0:0	4	=
call	57:18	57:76	5	rtp_get_fmt
arg	57:30	57:50	6	VLC_OBJECT(p_stream)
call	57:30	57:49	7	VLC_OBJECT
arg	57:41	57:49	8	p_stream
water	57:41	0:0	9	p_stream
arg	57:52	57:57	6	p_fmt
water	57:52	0:0	7	p_fmt
arg	57:59	57:62	6	psz
water	57:59	0:0	7	psz
arg	57:64	57:76	6	&id->rtp_fmt
op	57:64	0:0	7	&
water	57:65	0:0	7	id
op	57:67	0:0	7	->
water	57:69	0:0	7	rtp_fmt
call	58:8	58:18	4	free
arg	58:14	58:18	5	psz
water	58:14	0:0	6	psz
water	58:19	0:0	4	;
if	59:8	60:22	4	(val != VLC_SUCCESS)
cond	59:12	59:19	5	val != VLC_SUCCESS
water	59:12	0:0	6	val
op	59:16	0:0	6	!=
water	59:19	0:0	6	VLC_SUCCESS
stmts	60:12	60:22	5	
goto	60:12	60:22	6	error
water	60:17	0:0	7	error
water	61:4	0:0	4	}
decl	63:4	63:70	2	char	*key
op	63:14	0:0	2	=
call	63:16	63:69	3	var_GetNonEmptyString
arg	63:39	63:47	4	p_stream
water	63:39	0:0	5	p_stream
arg	63:49	63:69	4	SOUT_CFG_PREFIX"key"
water	63:49	0:0	5	SOUT_CFG_PREFIX
water	63:64	0:0	5	"key"
if	64:4	85:4	2	(key)
cond	64:8	64:8	3	key
water	64:8	0:0	4	key
stmts	65:4	85:4	3	
water	65:4	0:0	4	{
call	66:8	66:25	4	vlc_gcrypt_init
water	66:26	0:0	4	;
water	67:8	0:0	4	id
op	67:10	0:0	4	->
water	67:12	0:0	4	srtp
op	67:17	0:0	4	=
call	67:19	68:66	4	srtp_create
arg	67:32	67:48	5	SRTP_ENCR_AES_CM
water	67:32	0:0	6	SRTP_ENCR_AES_CM
arg	67:50	67:69	5	SRTP_AUTH_HMAC_SHA1
water	67:50	0:0	6	SRTP_AUTH_HMAC_SHA1
arg	67:71	67:73	5	10
water	67:71	0:0	6	10
arg	68:35	68:50	5	SRTP_PRF_AES_CM
water	68:35	0:0	6	SRTP_PRF_AES_CM
arg	68:52	68:66	5	SRTP_RCC_MODE1
water	68:52	0:0	6	SRTP_RCC_MODE1
water	68:67	0:0	4	;
if	69:8	73:8	4	(id -> srtp == NULL)
cond	69:12	69:24	5	id -> srtp == NULL
water	69:12	0:0	6	id
op	69:14	0:0	6	->
water	69:16	0:0	6	srtp
op	69:21	0:0	6	==
water	69:24	0:0	6	NULL
stmts	70:8	73:8	5	
water	70:8	0:0	6	{
call	71:12	71:21	6	free
arg	71:18	71:21	7	key
water	71:18	0:0	8	key
water	71:22	0:0	6	;
goto	72:12	72:22	6	error
water	72:17	0:0	7	error
water	73:8	0:0	6	}
decl	74:8	74:76	4	char	*salt
op	74:19	0:0	4	=
call	74:21	74:75	5	var_GetNonEmptyString
arg	74:44	74:52	6	p_stream
water	74:44	0:0	7	p_stream
arg	74:54	74:75	6	SOUT_CFG_PREFIX"salt"
water	74:54	0:0	7	SOUT_CFG_PREFIX
water	74:69	0:0	7	"salt"
decl	75:8	75:69	4	int	val
op	75:16	0:0	4	=
call	75:18	75:68	5	srtp_setkeystring
arg	75:37	75:45	6	id->srtp
water	75:37	0:0	7	id
op	75:39	0:0	7	->
water	75:41	0:0	7	srtp
arg	75:47	75:50	6	key
water	75:47	0:0	7	key
arg	75:52	75:68	6	salt?salt:""
water	75:52	0:0	7	salt
water	75:57	0:0	7	?
water	75:59	0:0	7	salt
water	75:64	0:0	7	:
water	75:66	0:0	7	""
call	76:8	76:18	4	free
arg	76:14	76:18	5	salt
water	76:14	0:0	6	salt
water	76:19	0:0	4	;
call	77:8	77:17	4	free
arg	77:14	77:17	5	key
water	77:14	0:0	6	key
water	77:18	0:0	4	;
if	78:8	83:8	4	(val)
cond	78:12	78:12	5	val
water	78:12	0:0	6	val
stmts	79:8	83:8	5	
water	79:8	0:0	6	{
call	80:12	81:40	6	msg_Err
arg	80:21	80:29	7	p_stream
water	80:21	0:0	8	p_stream
arg	80:31	80:67	7	"bad SRTP key/salt combination (%s)"
water	80:31	0:0	8	"bad SRTP key/salt combination (%s)"
arg	81:21	81:40	7	vlc_strerror_c(val)
call	81:21	81:39	8	vlc_strerror_c
arg	81:36	81:39	9	val
water	81:36	0:0	10	val
water	81:41	0:0	6	;
goto	82:12	82:22	6	error
water	82:17	0:0	7	error
water	83:8	0:0	6	}
water	84:8	0:0	4	id
op	84:10	0:0	4	->
water	84:12	0:0	4	i_sequence
op	84:23	0:0	4	=
water	84:25	0:0	4	0
water	84:26	0:0	4	;
water	85:4	0:0	4	}
water	87:4	0:0	2	id
op	87:6	0:0	2	->
water	87:8	0:0	2	i_seq_sent_next
op	87:24	0:0	2	=
water	87:26	0:0	2	id
op	87:28	0:0	2	->
water	87:30	0:0	2	i_sequence
water	87:40	0:0	2	;
decl	88:4	88:21	2	int	mcast_fd
op	88:17	0:0	2	=
op	88:19	0:0	2	-
water	88:20	0:0	2	1
if	89:4	174:4	2	(p_sys -> psz_destination != NULL)
cond	89:8	89:34	3	p_sys -> psz_destination != NULL
water	89:8	0:0	4	p_sys
op	89:13	0:0	4	->
water	89:15	0:0	4	psz_destination
op	89:31	0:0	4	!=
water	89:34	0:0	4	NULL
stmts	90:4	174:4	3	
water	90:4	0:0	4	{
decl	92:8	92:27	4	uint16_t	i_port
op	92:24	0:0	4	=
water	92:26	0:0	4	0
if	93:8	94:12	4	(p_fmt == NULL)
cond	93:12	93:21	5	p_fmt == NULL
water	93:12	0:0	6	p_fmt
op	93:18	0:0	6	==
water	93:21	0:0	6	NULL
stmts	94:12	94:12	5	
water	94:12	0:0	6	;
else	95:8	97:40	4
stmts	96:8	97:40	5	
if	96:8	97:40	6	(p_fmt -> i_cat == AUDIO_ES && p_sys -> i_port_audio > 0)
cond	96:12	96:62	7	p_fmt -> i_cat == AUDIO_ES && p_sys -> i_port_audio > 0
water	96:12	0:0	8	p_fmt
op	96:17	0:0	8	->
water	96:19	0:0	8	i_cat
op	96:25	0:0	8	==
water	96:28	0:0	8	AUDIO_ES
op	96:37	0:0	8	&&
water	96:40	0:0	8	p_sys
op	96:45	0:0	8	->
water	96:47	0:0	8	i_port_audio
op	96:60	0:0	8	>
water	96:62	0:0	8	0
stmts	97:12	97:40	7	
water	97:12	0:0	8	i_port
op	97:19	0:0	8	=
water	97:21	0:0	8	p_sys
op	97:26	0:0	8	->
water	97:28	0:0	8	i_port_audio
water	97:40	0:0	8	;
else	98:8	100:40	4
stmts	99:8	100:40	5	
if	99:8	100:40	6	(p_fmt -> i_cat == VIDEO_ES && p_sys -> i_port_video > 0)
cond	99:12	99:62	7	p_fmt -> i_cat == VIDEO_ES && p_sys -> i_port_video > 0
water	99:12	0:0	8	p_fmt
op	99:17	0:0	8	->
water	99:19	0:0	8	i_cat
op	99:25	0:0	8	==
water	99:28	0:0	8	VIDEO_ES
op	99:37	0:0	8	&&
water	99:40	0:0	8	p_sys
op	99:45	0:0	8	->
water	99:47	0:0	8	i_port_video
op	99:60	0:0	8	>
water	99:62	0:0	8	0
stmts	100:12	100:40	7	
water	100:12	0:0	8	i_port
op	100:19	0:0	8	=
water	100:21	0:0	8	p_sys
op	100:26	0:0	8	->
water	100:28	0:0	8	i_port_video
water	100:40	0:0	8	;
for	105:8	107:27	4	( int i = 0 ;i_port && ( i < p_sys -> i_es );i ++)
forinit	0:0	105:22	5	 int i = 0 ;
decl	105:13	105:22	6	int	i
op	105:19	0:0	6	=
water	105:21	0:0	6	0
cond	105:24	105:50	5	i_port && ( i < p_sys -> i_es )
water	105:24	0:0	6	i_port
op	105:31	0:0	6	&&
water	105:34	0:0	6	(
water	105:35	0:0	6	i
op	105:37	0:0	6	<
water	105:39	0:0	6	p_sys
op	105:44	0:0	6	->
water	105:46	0:0	6	i_es
water	105:50	0:0	6	)
forexpr	105:53	105:54	5	i ++
water	105:53	0:0	6	i
op	105:54	0:0	6	++
stmts	106:13	107:27	5	
if	106:13	107:27	6	(i_port == p_sys -> es [ i ] -> i_port)
cond	106:17	106:41	7	i_port == p_sys -> es [ i ] -> i_port
water	106:17	0:0	8	i_port
op	106:24	0:0	8	==
water	106:27	0:0	8	p_sys
op	106:32	0:0	8	->
water	106:34	0:0	8	es
op	106:36	0:0	8	[
water	106:37	0:0	8	i
op	106:38	0:0	8	]
op	106:39	0:0	8	->
water	106:41	0:0	8	i_port
stmts	107:17	107:27	7	
water	107:17	0:0	8	i_port
op	107:24	0:0	8	=
water	107:26	0:0	8	0
water	107:27	0:0	8	;
for	108:8	119:8	4	( uint16_t p = p_sys -> i_port ;i_port == 0;p += 2)
forinit	0:0	108:39	5	 uint16_t p = p_sys -> i_port ;
decl	108:13	108:39	6	uint16_t	p
op	108:24	0:0	6	=
water	108:26	0:0	6	p_sys
op	108:31	0:0	6	->
water	108:33	0:0	6	i_port
cond	108:41	108:51	5	i_port == 0
water	108:41	0:0	6	i_port
op	108:48	0:0	6	==
water	108:51	0:0	6	0
forexpr	108:54	108:59	5	p += 2
water	108:54	0:0	6	p
op	108:56	0:0	6	+=
water	108:59	0:0	6	2
stmts	109:8	119:8	5	
water	109:8	0:0	6	{
if	110:12	114:12	6	(p == 0)
cond	110:16	110:21	7	p == 0
water	110:16	0:0	8	p
op	110:18	0:0	8	==
water	110:21	0:0	8	0
stmts	111:12	114:12	7	
water	111:12	0:0	8	{
call	112:16	112:68	8	msg_Err
arg	112:25	112:33	9	p_stream
water	112:25	0:0	10	p_stream
arg	112:35	112:68	9	"too many RTP elementary streams"
water	112:35	0:0	10	"too many RTP elementary streams"
water	112:69	0:0	8	;
goto	113:16	113:26	8	error
water	113:21	0:0	9	error
water	114:12	0:0	8	}
water	115:12	0:0	6	i_port
op	115:19	0:0	6	=
water	115:21	0:0	6	p
water	115:22	0:0	6	;
for	116:12	118:31	6	( int i = 0 ;i_port && ( i < p_sys -> i_es );i ++)
forinit	0:0	116:26	7	 int i = 0 ;
decl	116:17	116:26	8	int	i
op	116:23	0:0	8	=
water	116:25	0:0	8	0
cond	116:28	116:54	7	i_port && ( i < p_sys -> i_es )
water	116:28	0:0	8	i_port
op	116:35	0:0	8	&&
water	116:38	0:0	8	(
water	116:39	0:0	8	i
op	116:41	0:0	8	<
water	116:43	0:0	8	p_sys
op	116:48	0:0	8	->
water	116:50	0:0	8	i_es
water	116:54	0:0	8	)
forexpr	116:57	116:58	7	i ++
water	116:57	0:0	8	i
op	116:58	0:0	8	++
stmts	117:17	118:31	7	
if	117:17	118:31	8	(p == p_sys -> es [ i ] -> i_port)
cond	117:21	117:40	9	p == p_sys -> es [ i ] -> i_port
water	117:21	0:0	10	p
op	117:23	0:0	10	==
water	117:26	0:0	10	p_sys
op	117:31	0:0	10	->
water	117:33	0:0	10	es
op	117:35	0:0	10	[
water	117:36	0:0	10	i
op	117:37	0:0	10	]
op	117:38	0:0	10	->
water	117:40	0:0	10	i_port
stmts	118:21	118:31	9	
water	118:21	0:0	10	i_port
op	118:28	0:0	10	=
water	118:30	0:0	10	0
water	118:31	0:0	10	;
water	119:8	0:0	6	}
water	120:8	0:0	4	id
op	120:10	0:0	4	->
water	120:12	0:0	4	i_port
op	120:19	0:0	4	=
water	120:21	0:0	4	i_port
water	120:27	0:0	4	;
decl	121:8	121:30	4	int	type
op	121:17	0:0	4	=
water	121:19	0:0	4	SOCK_STREAM
switch	122:8	173:8	4	(p_sys -> proto)
cond	122:16	122:23	5	p_sys -> proto
water	122:16	0:0	6	p_sys
op	122:21	0:0	6	->
water	122:23	0:0	6	proto
stmts	123:8	173:8	5	
water	123:8	0:0	6	{
label	125:12	125:29	6	case IPPROTO_DCCP :
water	126:12	0:0	6	{
decl	127:16	127:32	6	const char	*code
switch	128:16	134:16	6	(id -> rtp_fmt . cat)
cond	128:24	128:36	7	id -> rtp_fmt . cat
water	128:24	0:0	8	id
op	128:26	0:0	8	->
water	128:28	0:0	8	rtp_fmt
op	128:35	0:0	8	.
water	128:36	0:0	8	cat
stmts	129:16	134:16	7	
water	129:16	0:0	8	{
label	130:20	130:33	8	case VIDEO_ES :
water	130:35	0:0	8	code
op	130:40	0:0	8	=
water	130:42	0:0	8	"RTPV"
water	130:48	0:0	8	;
break	130:54	130:59	8	
label	131:20	131:33	8	case AUDIO_ES :
water	131:35	0:0	8	code
op	131:40	0:0	8	=
water	131:42	0:0	8	"RTPARTPV"
water	131:52	0:0	8	;
break	131:54	131:59	8	
label	132:20	132:31	8	case SPU_ES :
water	132:35	0:0	8	code
op	132:40	0:0	8	=
water	132:42	0:0	8	"RTPTRTPV"
water	132:52	0:0	8	;
break	132:54	132:59	8	
label	133:20	133:27	8	default :
water	133:35	0:0	8	code
op	133:40	0:0	8	=
water	133:42	0:0	8	"RTPORTPV"
water	133:52	0:0	8	;
break	133:54	133:59	8	
water	134:16	0:0	8	}
call	135:16	135:61	6	var_SetString
arg	135:31	135:39	7	p_stream
water	135:31	0:0	8	p_stream
arg	135:41	135:55	7	"dccp-service"
water	135:41	0:0	8	"dccp-service"
arg	135:57	135:61	7	code
water	135:57	0:0	8	code
water	135:62	0:0	6	;
water	136:16	0:0	6	type
op	136:21	0:0	6	=
water	136:23	0:0	6	SOCK_DCCP
water	136:32	0:0	6	;
water	137:12	0:0	6	}
label	139:12	139:28	6	case IPPROTO_TCP :
water	140:16	0:0	6	id
op	140:18	0:0	6	->
water	140:20	0:0	6	listen
op	140:26	0:0	6	.
water	140:27	0:0	6	fd
op	140:30	0:0	6	=
call	140:32	142:63	6	net_Listen
arg	140:44	140:64	7	VLC_OBJECT(p_stream)
call	140:44	140:63	8	VLC_OBJECT
arg	140:55	140:63	9	p_stream
water	140:55	0:0	10	p_stream
arg	141:44	141:66	7	p_sys->psz_destination
water	141:44	0:0	8	p_sys
op	141:49	0:0	8	->
water	141:51	0:0	8	psz_destination
arg	141:68	141:74	7	i_port
water	141:68	0:0	8	i_port
arg	142:44	142:48	7	type
water	142:44	0:0	8	type
arg	142:50	142:63	7	p_sys->proto
water	142:50	0:0	8	p_sys
op	142:55	0:0	8	->
water	142:57	0:0	8	proto
water	142:64	0:0	6	;
if	143:16	147:16	6	(id -> listen . fd == NULL)
cond	143:20	143:37	7	id -> listen . fd == NULL
water	143:20	0:0	8	id
op	143:22	0:0	8	->
water	143:24	0:0	8	listen
op	143:30	0:0	8	.
water	143:31	0:0	8	fd
op	143:34	0:0	8	==
water	143:37	0:0	8	NULL
stmts	144:16	147:16	7	
water	144:16	0:0	8	{
call	145:20	145:75	8	msg_Err
arg	145:29	145:37	9	p_stream
water	145:29	0:0	10	p_stream
arg	145:39	145:75	9	"passive COMEDIA RTP socket failed"
water	145:39	0:0	10	"passive COMEDIA RTP socket failed"
water	145:76	0:0	8	;
goto	146:20	146:30	8	error
water	146:25	0:0	9	error
water	147:16	0:0	8	}
if	148:16	154:16	6	(vlc_clone (& id -> listen . thread ,rtp_listen_thread ,id ,VLC_THREAD_PRIORITY_LOW ))
cond	148:20	149:55	7	vlc_clone (& id -> listen . thread ,rtp_listen_thread ,id ,VLC_THREAD_PRIORITY_LOW )
call	148:20	149:55	8	vlc_clone
arg	148:31	148:49	9	&id->listen.thread
op	148:31	0:0	10	&
water	148:32	0:0	10	id
op	148:34	0:0	10	->
water	148:36	0:0	10	listen
op	148:42	0:0	10	.
water	148:43	0:0	10	thread
arg	148:51	148:68	9	rtp_listen_thread
water	148:51	0:0	10	rtp_listen_thread
arg	148:70	148:72	9	id
water	148:70	0:0	10	id
arg	149:31	149:55	9	VLC_THREAD_PRIORITY_LOW
water	149:31	0:0	10	VLC_THREAD_PRIORITY_LOW
stmts	150:16	154:16	7	
water	150:16	0:0	8	{
call	151:20	151:51	8	net_ListenClose
arg	151:37	151:51	9	id->listen.fd
water	151:37	0:0	10	id
op	151:39	0:0	10	->
water	151:41	0:0	10	listen
op	151:47	0:0	10	.
water	151:48	0:0	10	fd
water	151:52	0:0	8	;
water	152:20	0:0	8	id
op	152:22	0:0	8	->
water	152:24	0:0	8	listen
op	152:30	0:0	8	.
water	152:31	0:0	8	fd
op	152:34	0:0	8	=
water	152:36	0:0	8	NULL
water	152:40	0:0	8	;
goto	153:20	153:30	8	error
water	153:25	0:0	9	error
water	154:16	0:0	8	}
break	155:16	155:21	6	
label	156:12	156:19	6	default :
water	157:12	0:0	6	{
decl	158:16	159:69	6	int	fd
op	158:23	0:0	6	=
call	158:25	159:68	7	net_ConnectDgram
arg	158:43	158:51	8	p_stream
water	158:43	0:0	9	p_stream
arg	158:53	158:75	8	p_sys->psz_destination
water	158:53	0:0	9	p_sys
op	158:58	0:0	9	->
water	158:60	0:0	9	psz_destination
arg	159:43	159:49	8	i_port
water	159:43	0:0	9	i_port
arg	159:51	159:53	8	-1
op	159:51	0:0	9	-
water	159:52	0:0	9	1
arg	159:55	159:68	8	p_sys->proto
water	159:55	0:0	9	p_sys
op	159:60	0:0	9	->
water	159:62	0:0	9	proto
if	160:16	164:16	6	(fd == - 1)
cond	160:20	160:27	7	fd == - 1
water	160:20	0:0	8	fd
op	160:23	0:0	8	==
op	160:26	0:0	8	-
water	160:27	0:0	8	1
stmts	161:16	164:16	7	
water	161:16	0:0	8	{
call	162:20	162:66	8	msg_Err
arg	162:29	162:37	9	p_stream
water	162:29	0:0	10	p_stream
arg	162:39	162:66	9	"cannot create RTP socket"
water	162:39	0:0	10	"cannot create RTP socket"
water	162:67	0:0	8	;
goto	163:20	163:30	8	error
water	163:25	0:0	9	error
water	164:16	0:0	8	}
call	167:16	168:40	6	setsockopt
arg	167:28	167:30	7	fd
water	167:28	0:0	8	fd
arg	167:32	167:42	7	SOL_SOCKET
water	167:32	0:0	8	SOL_SOCKET
arg	167:44	167:53	7	SO_RCVBUF
water	167:44	0:0	8	SO_RCVBUF
arg	167:55	167:66	7	&(int){0}
op	167:55	0:0	8	&
water	167:56	0:0	8	(
water	167:57	0:0	8	int
water	167:60	0:0	8	)
water	167:61	0:0	8	{
water	167:63	0:0	8	0
water	167:65	0:0	8	}
arg	168:28	168:40	7	sizeof(int)
op	168:28	0:0	8	sizeof
water	168:35	0:0	8	(
water	168:36	0:0	8	int
water	168:39	0:0	8	)
water	168:41	0:0	6	;
call	169:16	169:60	6	rtp_add_sink
arg	169:30	169:32	7	id
water	169:30	0:0	8	id
arg	169:34	169:36	7	fd
water	169:34	0:0	8	fd
arg	169:38	169:53	7	p_sys->rtcp_mux
water	169:38	0:0	8	p_sys
op	169:43	0:0	8	->
water	169:45	0:0	8	rtcp_mux
arg	169:55	169:60	7	NULL
water	169:55	0:0	8	NULL
water	169:61	0:0	6	;
water	171:16	0:0	6	mcast_fd
op	171:25	0:0	6	=
water	171:27	0:0	6	fd
water	171:29	0:0	6	;
water	172:12	0:0	6	}
water	173:8	0:0	6	}
water	174:4	0:0	4	}
if	175:4	192:4	2	(p_fmt != NULL)
cond	175:8	175:17	3	p_fmt != NULL
water	175:8	0:0	4	p_fmt
op	175:14	0:0	4	!=
water	175:17	0:0	4	NULL
stmts	176:4	192:4	3	
switch	176:4	192:4	4	(p_fmt -> i_codec)
cond	176:12	176:19	5	p_fmt -> i_codec
water	176:12	0:0	6	p_fmt
op	176:17	0:0	6	->
water	176:19	0:0	6	i_codec
stmts	177:4	192:4	5	
water	177:4	0:0	6	{
label	178:8	178:28	6	case VLC_CODEC_MULAW :
label	179:8	179:27	6	case VLC_CODEC_ALAW :
label	180:8	180:25	6	case VLC_CODEC_U8 :
call	181:12	181:36	6	rtp_set_ptime
arg	181:27	181:29	7	id
water	181:27	0:0	8	id
arg	181:31	181:33	7	20
water	181:31	0:0	8	20
arg	181:35	181:36	7	1
water	181:35	0:0	8	1
water	181:37	0:0	6	;
break	182:12	182:17	6	
label	183:8	183:27	6	case VLC_CODEC_S16B :
label	184:8	184:27	6	case VLC_CODEC_S16L :
call	185:12	185:36	6	rtp_set_ptime
arg	185:27	185:29	7	id
water	185:27	0:0	8	id
arg	185:31	185:33	7	20
water	185:31	0:0	8	20
arg	185:35	185:36	7	2
water	185:35	0:0	8	2
water	185:37	0:0	6	;
break	186:12	186:17	6	
label	187:8	187:27	6	case VLC_CODEC_S24B :
call	188:12	188:36	6	rtp_set_ptime
arg	188:27	188:29	7	id
water	188:27	0:0	8	id
arg	188:31	188:33	7	20
water	188:31	0:0	8	20
arg	188:35	188:36	7	3
water	188:35	0:0	8	3
water	188:37	0:0	6	;
break	189:12	189:17	6	
label	190:8	190:15	6	default :
break	191:12	191:17	6	
water	192:4	0:0	6	}
decl	194:4	194:18	2	int	cscov
op	194:14	0:0	2	=
op	194:16	0:0	2	-
water	194:17	0:0	2	1
if	195:4	196:43	2	(cscov != - 1)
cond	195:8	195:18	3	cscov != - 1
water	195:8	0:0	4	cscov
op	195:14	0:0	4	!=
op	195:17	0:0	4	-
water	195:18	0:0	4	1
stmts	196:8	196:43	3	
water	196:8	0:0	4	cscov
op	196:14	0:0	4	+=
water	196:17	0:0	4	8
op	196:29	0:0	4	+
water	196:31	0:0	4	12
water	196:43	0:0	4	;
if	197:4	198:54	2	(id -> sinkc > 0)
cond	197:8	197:20	3	id -> sinkc > 0
water	197:8	0:0	4	id
op	197:10	0:0	4	->
water	197:12	0:0	4	sinkc
op	197:18	0:0	4	>
water	197:20	0:0	4	0
stmts	198:8	198:54	3	
call	198:8	198:53	4	net_SetCSCov
arg	198:22	198:41	5	id->sinkv[0].rtp_fd
water	198:22	0:0	6	id
op	198:24	0:0	6	->
water	198:26	0:0	6	sinkv
op	198:31	0:0	6	[
water	198:32	0:0	6	0
op	198:33	0:0	6	]
op	198:34	0:0	6	.
water	198:35	0:0	6	rtp_fd
arg	198:43	198:48	5	cscov
water	198:43	0:0	6	cscov
arg	198:50	198:53	5	-1
op	198:50	0:0	6	-
water	198:51	0:0	6	1
water	198:54	0:0	4	;
call	200:4	200:36	2	vlc_mutex_lock
arg	200:20	200:36	3	&p_sys->lock_ts
op	200:20	0:0	4	&
water	200:21	0:0	4	p_sys
op	200:26	0:0	4	->
water	200:28	0:0	4	lock_ts
water	200:37	0:0	2	;
water	201:4	0:0	2	id
op	201:6	0:0	2	->
water	201:8	0:0	2	b_ts_init
op	201:18	0:0	2	=
water	201:20	0:0	2	(
water	201:22	0:0	2	p_sys
op	201:27	0:0	2	->
water	201:29	0:0	2	i_npt_zero
op	201:40	0:0	2	!=
water	201:43	0:0	2	VLC_TS_INVALID
water	201:58	0:0	2	)
water	201:59	0:0	2	;
call	202:4	202:38	2	vlc_mutex_unlock
arg	202:22	202:38	3	&p_sys->lock_ts
op	202:22	0:0	4	&
water	202:23	0:0	4	p_sys
op	202:28	0:0	4	->
water	202:30	0:0	4	lock_ts
water	202:39	0:0	2	;
if	203:4	205:63	2	(id -> b_ts_init)
cond	203:8	203:12	3	id -> b_ts_init
water	203:8	0:0	4	id
op	203:10	0:0	4	->
water	203:12	0:0	4	b_ts_init
stmts	204:8	205:63	3	
water	204:8	0:0	4	id
op	204:10	0:0	4	->
water	204:12	0:0	4	i_ts_offset
op	204:24	0:0	4	=
call	204:26	205:62	4	rtp_compute_ts
arg	204:42	204:64	5	id->rtp_fmt.clock_rate
water	204:42	0:0	6	id
op	204:44	0:0	6	->
water	204:46	0:0	6	rtp_fmt
op	204:53	0:0	6	.
water	204:54	0:0	6	clock_rate
arg	205:42	205:62	5	p_sys->i_pts_offset
water	205:42	0:0	6	p_sys
op	205:47	0:0	6	->
water	205:49	0:0	6	i_pts_offset
water	205:63	0:0	4	;
if	206:4	208:67	2	(p_sys -> rtsp != NULL)
cond	206:8	206:23	3	p_sys -> rtsp != NULL
water	206:8	0:0	4	p_sys
op	206:13	0:0	4	->
water	206:15	0:0	4	rtsp
op	206:20	0:0	4	!=
water	206:23	0:0	4	NULL
stmts	207:8	208:67	3	
water	207:8	0:0	4	id
op	207:10	0:0	4	->
water	207:12	0:0	4	rtsp_id
op	207:20	0:0	4	=
call	207:22	208:66	4	RtspAddId
arg	207:33	207:44	5	p_sys->rtsp
water	207:33	0:0	6	p_sys
op	207:38	0:0	6	->
water	207:40	0:0	6	rtsp
arg	207:46	207:48	5	id
water	207:46	0:0	6	id
arg	207:50	207:69	5	GetDWBE(id->ssrc)
call	207:50	207:68	6	GetDWBE
arg	207:59	207:68	7	id->ssrc
water	207:59	0:0	8	id
op	207:61	0:0	8	->
water	207:63	0:0	8	ssrc
arg	208:33	208:55	5	id->rtp_fmt.clock_rate
water	208:33	0:0	6	id
op	208:35	0:0	6	->
water	208:37	0:0	6	rtp_fmt
op	208:44	0:0	6	.
water	208:45	0:0	6	clock_rate
arg	208:57	208:66	5	mcast_fd
water	208:57	0:0	6	mcast_fd
water	208:67	0:0	4	;
water	209:4	0:0	2	id
op	209:6	0:0	2	->
water	209:8	0:0	2	p_fifo
op	209:15	0:0	2	=
call	209:17	209:31	2	block_FifoNew
water	209:32	0:0	2	;
if	210:4	211:18	2	(unlikely (id -> p_fifo == NULL ))
cond	210:8	210:35	3	unlikely (id -> p_fifo == NULL )
call	210:8	210:35	4	unlikely
arg	210:17	210:35	5	id->p_fifo==NULL
water	210:17	0:0	6	id
op	210:19	0:0	6	->
water	210:21	0:0	6	p_fifo
op	210:28	0:0	6	==
water	210:31	0:0	6	NULL
stmts	211:8	211:18	3	
goto	211:8	211:18	4	error
water	211:13	0:0	5	error
if	212:4	217:4	2	(vlc_clone (& id -> thread ,ThreadSend ,id ,VLC_THREAD_PRIORITY_HIGHEST ))
cond	212:8	212:76	3	vlc_clone (& id -> thread ,ThreadSend ,id ,VLC_THREAD_PRIORITY_HIGHEST )
call	212:8	212:76	4	vlc_clone
arg	212:19	212:30	5	&id->thread
op	212:19	0:0	6	&
water	212:20	0:0	6	id
op	212:22	0:0	6	->
water	212:24	0:0	6	thread
arg	212:32	212:42	5	ThreadSend
water	212:32	0:0	6	ThreadSend
arg	212:44	212:46	5	id
water	212:44	0:0	6	id
arg	212:48	212:76	5	VLC_THREAD_PRIORITY_HIGHEST
water	212:48	0:0	6	VLC_THREAD_PRIORITY_HIGHEST
stmts	213:4	217:4	3	
water	213:4	0:0	4	{
call	214:8	214:38	4	block_FifoRelease
arg	214:27	214:38	5	id->p_fifo
water	214:27	0:0	6	id
op	214:29	0:0	6	->
water	214:31	0:0	6	p_fifo
water	214:39	0:0	4	;
water	215:8	0:0	4	id
op	215:10	0:0	4	->
water	215:12	0:0	4	p_fifo
op	215:19	0:0	4	=
water	215:21	0:0	4	NULL
water	215:25	0:0	4	;
goto	216:8	216:18	4	error
water	216:13	0:0	5	error
water	217:4	0:0	4	}
call	219:4	219:36	2	vlc_mutex_lock
arg	219:20	219:36	3	&p_sys->lock_es
op	219:20	0:0	4	&
water	219:21	0:0	4	p_sys
op	219:26	0:0	4	->
water	219:28	0:0	4	lock_es
water	219:37	0:0	2	;
call	220:4	220:43	2	TAB_APPEND
arg	220:16	220:27	3	p_sys->i_es
water	220:16	0:0	4	p_sys
op	220:21	0:0	4	->
water	220:23	0:0	4	i_es
arg	220:29	220:38	3	p_sys->es
water	220:29	0:0	4	p_sys
op	220:34	0:0	4	->
water	220:36	0:0	4	es
arg	220:40	220:43	3	id
water	220:40	0:0	4	id
water	220:44	0:0	2	;
call	221:4	221:38	2	vlc_mutex_unlock
arg	221:22	221:38	3	&p_sys->lock_es
op	221:22	0:0	4	&
water	221:23	0:0	4	p_sys
op	221:28	0:0	4	->
water	221:30	0:0	4	lock_es
water	221:39	0:0	2	;
water	222:4	0:0	2	psz_sdp
op	222:12	0:0	2	=
call	222:14	222:42	2	SDPGenerate
arg	222:27	222:35	3	p_stream
water	222:27	0:0	4	p_stream
arg	222:37	222:42	3	NULL
water	222:37	0:0	4	NULL
water	222:43	0:0	2	;
call	223:4	223:37	2	vlc_mutex_lock
arg	223:20	223:37	3	&p_sys->lock_sdp
op	223:20	0:0	4	&
water	223:21	0:0	4	p_sys
op	223:26	0:0	4	->
water	223:28	0:0	4	lock_sdp
water	223:38	0:0	2	;
call	224:4	224:25	2	free
arg	224:10	224:25	3	p_sys->psz_sdp
water	224:10	0:0	4	p_sys
op	224:15	0:0	4	->
water	224:17	0:0	4	psz_sdp
water	224:26	0:0	2	;
water	225:4	0:0	2	p_sys
op	225:9	0:0	2	->
water	225:11	0:0	2	psz_sdp
op	225:19	0:0	2	=
water	225:21	0:0	2	psz_sdp
water	225:28	0:0	2	;
call	226:4	226:39	2	vlc_mutex_unlock
arg	226:22	226:39	3	&p_sys->lock_sdp
op	226:22	0:0	4	&
water	226:23	0:0	4	p_sys
op	226:28	0:0	4	->
water	226:30	0:0	4	lock_sdp
water	226:40	0:0	2	;
call	227:4	227:50	2	msg_Dbg
arg	227:13	227:21	3	p_stream
water	227:13	0:0	4	p_stream
arg	227:23	227:33	3	"sdp=\n%s"
water	227:23	0:0	4	"sdp=\n%s"
arg	227:35	227:50	3	p_sys->psz_sdp
water	227:35	0:0	4	p_sys
op	227:40	0:0	4	->
water	227:42	0:0	4	psz_sdp
water	227:51	0:0	2	;
if	229:4	229:50	2	(p_sys -> b_export_sap)
cond	229:8	229:15	3	p_sys -> b_export_sap
water	229:8	0:0	4	p_sys
op	229:13	0:0	4	->
water	229:15	0:0	4	b_export_sap
stmts	229:30	229:50	3	
call	229:30	229:49	4	SapSetup
arg	229:40	229:49	5	p_stream
water	229:40	0:0	6	p_stream
water	229:50	0:0	4	;
if	230:4	230:59	2	(p_sys -> psz_sdp_file != NULL)
cond	230:8	230:31	3	p_sys -> psz_sdp_file != NULL
water	230:8	0:0	4	p_sys
op	230:13	0:0	4	->
water	230:15	0:0	4	psz_sdp_file
op	230:28	0:0	4	!=
water	230:31	0:0	4	NULL
stmts	230:38	230:59	3	
call	230:38	230:58	4	FileSetup
arg	230:49	230:58	5	p_stream
water	230:49	0:0	6	p_stream
water	230:59	0:0	4	;
return	231:4	231:13	2	id
water	231:11	0:0	3	id
label	232:0	232:5	2	error :
call	233:4	233:22	2	Del
arg	233:9	233:17	3	p_stream
water	233:9	0:0	4	p_stream
arg	233:19	233:22	3	id
water	233:19	0:0	4	id
water	233:23	0:0	2	;
return	234:4	234:15	2	NULL
water	234:11	0:0	3	NULL
