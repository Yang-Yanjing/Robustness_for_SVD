func	2:0	44:0	0	static void	EsUnselect
params	2:22	0:0	1	
param	2:24	2:37	2	es_out_t *	out
param	2:39	2:54	2	es_out_id_t *	es
param	2:56	2:70	2	bool	b_update
stmnts	0:0	43:52	1	
decl	4:4	4:38	2	es_out_sys_t	*p_sys
op	4:26	0:0	2	=
water	4:28	0:0	2	out
op	4:31	0:0	2	->
water	4:33	0:0	2	p_sys
decl	5:4	5:44	2	input_thread_t	*p_input
op	5:28	0:0	2	=
water	5:30	0:0	2	p_sys
op	5:35	0:0	2	->
water	5:37	0:0	2	p_input
if	6:4	10:4	2	(!EsIsSelected (es ))
cond	6:8	6:26	3	!EsIsSelected (es )
op	6:8	0:0	4	!
call	6:9	6:26	4	EsIsSelected
arg	6:23	6:26	5	es
water	6:23	0:0	6	es
stmts	7:4	10:4	3	
water	7:4	0:0	4	{
call	8:8	8:69	4	msg_Warn
arg	8:18	8:25	5	p_input
water	8:18	0:0	6	p_input
arg	8:27	8:58	5	"ES 0x%x is already unselected"
water	8:27	0:0	6	"ES 0x%x is already unselected"
arg	8:60	8:69	5	es->i_id
water	8:60	0:0	6	es
op	8:62	0:0	6	->
water	8:64	0:0	6	i_id
water	8:70	0:0	4	;
return	9:8	9:14	4	
water	10:4	0:0	4	}
if	11:4	19:4	2	(es -> p_master)
cond	11:8	11:12	3	es -> p_master
water	11:8	0:0	4	es
op	11:10	0:0	4	->
water	11:12	0:0	4	p_master
stmts	12:4	19:4	3	
water	12:4	0:0	4	{
if	13:8	18:8	4	(es -> p_master -> p_dec)
cond	13:12	13:26	5	es -> p_master -> p_dec
water	13:12	0:0	6	es
op	13:14	0:0	6	->
water	13:16	0:0	6	p_master
op	13:24	0:0	6	->
water	13:26	0:0	6	p_dec
stmts	14:8	18:8	5	
water	14:8	0:0	6	{
decl	15:12	15:76	6	int	i_channel
op	15:26	0:0	6	=
call	15:28	15:75	7	EsOutGetClosedCaptionsChannel
arg	15:59	15:75	8	es->fmt.i_codec
water	15:59	0:0	9	es
op	15:61	0:0	9	->
water	15:63	0:0	9	fmt
op	15:66	0:0	9	.
water	15:67	0:0	9	i_codec
if	16:12	17:80	6	(i_channel != - 1)
cond	16:16	16:30	7	i_channel != - 1
water	16:16	0:0	8	i_channel
op	16:26	0:0	8	!=
op	16:29	0:0	8	-
water	16:30	0:0	8	1
stmts	17:16	17:80	7	
call	17:16	17:79	8	input_DecoderSetCcState
arg	17:41	17:60	9	es->p_master->p_dec
water	17:41	0:0	10	es
op	17:43	0:0	10	->
water	17:45	0:0	10	p_master
op	17:53	0:0	10	->
water	17:55	0:0	10	p_dec
arg	17:62	17:67	9	false
water	17:62	0:0	10	false
arg	17:69	17:79	9	i_channel
water	17:69	0:0	10	i_channel
water	17:80	0:0	8	;
water	18:8	0:0	6	}
water	19:4	0:0	4	}
else	20:4	37:4	2
stmts	21:4	37:4	3	
water	21:4	0:0	4	{
decl	22:8	22:63	4	const int	i_spu_id
op	22:27	0:0	4	=
call	22:29	22:62	5	var_GetInteger
arg	22:45	22:52	6	p_input
water	22:45	0:0	7	p_input
arg	22:54	22:62	6	"spu-es"
water	22:54	0:0	7	"spu-es"
decl	23:8	23:13	4	int	i
for	24:8	35:8	4	(i = 0 ;i < 4;i ++)
forinit	24:13	24:18	5	i = 0 ;
water	24:13	0:0	6	i
op	24:15	0:0	6	=
water	24:17	0:0	6	0
water	24:18	0:0	6	;
cond	24:20	24:24	5	i < 4
water	24:20	0:0	6	i
op	24:22	0:0	6	<
water	24:24	0:0	6	4
forexpr	24:27	24:28	5	i ++
water	24:27	0:0	6	i
op	24:28	0:0	6	++
stmts	25:8	35:8	5	
water	25:8	0:0	6	{
if	26:12	27:24	6	(! es -> pb_cc_present [ i ] || ! es -> pp_cc_es [ i ])
cond	26:16	26:56	7	! es -> pb_cc_present [ i ] || ! es -> pp_cc_es [ i ]
op	26:16	0:0	8	!
water	26:17	0:0	8	es
op	26:19	0:0	8	->
water	26:21	0:0	8	pb_cc_present
op	26:34	0:0	8	[
water	26:35	0:0	8	i
op	26:36	0:0	8	]
op	26:38	0:0	8	||
op	26:41	0:0	8	!
water	26:42	0:0	8	es
op	26:44	0:0	8	->
water	26:46	0:0	8	pp_cc_es
op	26:54	0:0	8	[
water	26:55	0:0	8	i
op	26:56	0:0	8	]
stmts	27:16	27:24	7	
continue	27:16	27:24	8	
if	28:12	32:12	6	(i_spu_id == es -> pp_cc_es [ i ] -> i_id)
cond	28:16	28:45	7	i_spu_id == es -> pp_cc_es [ i ] -> i_id
water	28:16	0:0	8	i_spu_id
op	28:25	0:0	8	==
water	28:28	0:0	8	es
op	28:30	0:0	8	->
water	28:32	0:0	8	pp_cc_es
op	28:40	0:0	8	[
water	28:41	0:0	8	i
op	28:42	0:0	8	]
op	28:43	0:0	8	->
water	28:45	0:0	8	i_id
stmts	29:12	32:12	7	
water	29:12	0:0	8	{
call	31:16	31:61	8	input_SendEventEsSelect
arg	31:41	31:48	9	p_input
water	31:41	0:0	10	p_input
arg	31:50	31:56	9	SPU_ES
water	31:50	0:0	10	SPU_ES
arg	31:58	31:61	9	-1
op	31:58	0:0	10	-
water	31:59	0:0	10	1
water	31:62	0:0	8	;
water	32:12	0:0	8	}
call	33:12	33:43	6	EsOutDel
arg	33:22	33:25	7	out
water	33:22	0:0	8	out
arg	33:27	33:43	7	es->pp_cc_es[i]
water	33:27	0:0	8	es
op	33:29	0:0	8	->
water	33:31	0:0	8	pp_cc_es
op	33:39	0:0	8	[
water	33:40	0:0	8	i
op	33:41	0:0	8	]
water	33:44	0:0	6	;
water	34:12	0:0	6	es
op	34:14	0:0	6	->
water	34:16	0:0	6	pb_cc_present
op	34:29	0:0	6	[
water	34:30	0:0	6	i
op	34:31	0:0	6	]
op	34:33	0:0	6	=
water	34:35	0:0	6	false
water	34:40	0:0	6	;
water	35:8	0:0	6	}
call	36:8	36:34	4	EsDestroyDecoder
arg	36:26	36:29	5	out
water	36:26	0:0	6	out
arg	36:31	36:34	5	es
water	36:31	0:0	6	es
water	36:35	0:0	4	;
water	37:4	0:0	4	}
if	38:4	39:14	2	(! b_update)
cond	38:8	38:9	3	! b_update
op	38:8	0:0	4	!
water	38:9	0:0	4	b_update
stmts	39:8	39:14	3	
return	39:8	39:14	4	
call	41:4	41:56	2	input_SendEventEsSelect
arg	41:29	41:36	3	p_input
water	41:29	0:0	4	p_input
arg	41:38	41:51	3	es->fmt.i_cat
water	41:38	0:0	4	es
op	41:40	0:0	4	->
water	41:42	0:0	4	fmt
op	41:45	0:0	4	.
water	41:46	0:0	4	i_cat
arg	41:53	41:56	3	-1
op	41:53	0:0	4	-
water	41:54	0:0	4	1
water	41:57	0:0	2	;
if	42:4	43:52	2	(EsFmtIsTeletext (& es -> fmt ))
cond	42:8	42:34	3	EsFmtIsTeletext (& es -> fmt )
call	42:8	42:34	4	EsFmtIsTeletext
arg	42:25	42:34	5	&es->fmt
op	42:25	0:0	6	&
water	42:26	0:0	6	es
op	42:28	0:0	6	->
water	42:30	0:0	6	fmt
stmts	43:8	43:52	3	
call	43:8	43:51	4	input_SendEventTeletextSelect
arg	43:39	43:46	5	p_input
water	43:39	0:0	6	p_input
arg	43:48	43:51	5	-1
op	43:48	0:0	6	-
water	43:49	0:0	6	1
water	43:52	0:0	4	;
