func	2:0	225:0	0	static int	OpenGeneric
params	2:22	0:0	1	
param	2:24	2:44	2	vlc_object_t *	p_this
param	2:46	2:60	2	bool	b_encode
stmnts	0:0	224:23	1	
decl	4:4	4:41	2	decoder_t	*p_dec
op	4:21	0:0	2	=
water	4:23	0:0	2	(
water	4:24	0:0	2	decoder_t
op	4:33	0:0	2	*
water	4:34	0:0	2	)
water	4:35	0:0	2	p_this
decl	5:4	5:24	2	decoder_sys_t	*p_sys
decl	6:4	6:27	2	OMX_ERRORTYPE	omx_error
decl	7:4	7:34	2	OMX_BUFFERHEADERTYPE	*p_header
decl	8:4	8:21	2	unsigned int	i
water	8:18	0:0	2	,
decl	8:4	8:21	2	unsigned int	j
if	9:4	11:4	2	(InitOmxCore (p_this ) != VLC_SUCCESS)
cond	9:8	9:31	3	InitOmxCore (p_this ) != VLC_SUCCESS
call	9:8	9:26	4	InitOmxCore
arg	9:20	9:26	5	p_this
water	9:20	0:0	6	p_this
op	9:28	0:0	4	!=
water	9:31	0:0	4	VLC_SUCCESS
stmts	9:44	11:4	3	
water	9:44	0:0	4	{
return	10:8	10:27	4	VLC_EGENERIC
water	10:15	0:0	5	VLC_EGENERIC
water	11:4	0:0	4	}
if	13:4	17:4	2	(( p_dec -> p_sys = p_sys =calloc (1 ,sizeof ( * p_sys ) ) ) == NULL)
cond	13:8	13:65	3	( p_dec -> p_sys = p_sys =calloc (1 ,sizeof ( * p_sys ) ) ) == NULL
water	13:8	0:0	4	(
water	13:10	0:0	4	p_dec
op	13:15	0:0	4	->
water	13:17	0:0	4	p_sys
op	13:23	0:0	4	=
water	13:25	0:0	4	p_sys
op	13:31	0:0	4	=
call	13:33	13:58	4	calloc
arg	13:41	13:42	5	1
water	13:41	0:0	6	1
arg	13:44	13:58	5	sizeof(*p_sys)
op	13:44	0:0	6	sizeof
water	13:50	0:0	6	(
op	13:51	0:0	6	*
water	13:52	0:0	6	p_sys
water	13:57	0:0	6	)
water	13:60	0:0	4	)
op	13:62	0:0	4	==
water	13:65	0:0	4	NULL
stmts	14:4	17:4	3	
water	14:4	0:0	4	{
call	15:8	15:22	4	DeinitOmxCore
water	15:23	0:0	4	;
return	16:8	16:25	4	VLC_ENOMEM
water	16:15	0:0	5	VLC_ENOMEM
water	17:4	0:0	4	}
if	19:4	30:4	2	(! b_encode)
cond	19:7	19:8	3	! b_encode
op	19:7	0:0	4	!
water	19:8	0:0	4	b_encode
stmts	20:4	30:4	3	
water	20:4	0:0	4	{
water	21:8	0:0	4	p_dec
op	21:13	0:0	4	->
water	21:15	0:0	4	fmt_out
op	21:22	0:0	4	.
water	21:23	0:0	4	i_cat
op	21:29	0:0	4	=
water	21:31	0:0	4	p_dec
op	21:36	0:0	4	->
water	21:38	0:0	4	fmt_in
op	21:44	0:0	4	.
water	21:45	0:0	4	i_cat
water	21:50	0:0	4	;
water	22:8	0:0	4	p_dec
op	22:13	0:0	4	->
water	22:15	0:0	4	fmt_out
op	22:22	0:0	4	.
water	22:23	0:0	4	video
op	22:29	0:0	4	=
water	22:31	0:0	4	p_dec
op	22:36	0:0	4	->
water	22:38	0:0	4	fmt_in
op	22:44	0:0	4	.
water	22:45	0:0	4	video
water	22:50	0:0	4	;
water	23:8	0:0	4	p_dec
op	23:13	0:0	4	->
water	23:15	0:0	4	fmt_out
op	23:22	0:0	4	.
water	23:23	0:0	4	audio
op	23:29	0:0	4	=
water	23:31	0:0	4	p_dec
op	23:36	0:0	4	->
water	23:38	0:0	4	fmt_in
op	23:44	0:0	4	.
water	23:45	0:0	4	audio
water	23:50	0:0	4	;
water	24:8	0:0	4	p_dec
op	24:13	0:0	4	->
water	24:15	0:0	4	fmt_out
op	24:22	0:0	4	.
water	24:23	0:0	4	i_codec
op	24:31	0:0	4	=
water	24:33	0:0	4	0
water	24:34	0:0	4	;
if	26:8	27:46	4	(p_dec -> fmt_out . video . i_sar_num == 0)
cond	26:12	26:46	5	p_dec -> fmt_out . video . i_sar_num == 0
water	26:12	0:0	6	p_dec
op	26:17	0:0	6	->
water	26:19	0:0	6	fmt_out
op	26:26	0:0	6	.
water	26:27	0:0	6	video
op	26:32	0:0	6	.
water	26:33	0:0	6	i_sar_num
op	26:43	0:0	6	==
water	26:46	0:0	6	0
stmts	27:12	27:46	5	
water	27:12	0:0	6	p_dec
op	27:17	0:0	6	->
water	27:19	0:0	6	fmt_out
op	27:26	0:0	6	.
water	27:27	0:0	6	video
op	27:32	0:0	6	.
water	27:33	0:0	6	i_sar_num
op	27:43	0:0	6	=
water	27:45	0:0	6	1
water	27:46	0:0	6	;
if	28:8	29:46	4	(p_dec -> fmt_out . video . i_sar_den == 0)
cond	28:12	28:46	5	p_dec -> fmt_out . video . i_sar_den == 0
water	28:12	0:0	6	p_dec
op	28:17	0:0	6	->
water	28:19	0:0	6	fmt_out
op	28:26	0:0	6	.
water	28:27	0:0	6	video
op	28:32	0:0	6	.
water	28:33	0:0	6	i_sar_den
op	28:43	0:0	6	==
water	28:46	0:0	6	0
stmts	29:12	29:46	5	
water	29:12	0:0	6	p_dec
op	29:17	0:0	6	->
water	29:19	0:0	6	fmt_out
op	29:26	0:0	6	.
water	29:27	0:0	6	video
op	29:32	0:0	6	.
water	29:33	0:0	6	i_sar_den
op	29:43	0:0	6	=
water	29:45	0:0	6	1
water	29:46	0:0	6	;
water	30:4	0:0	4	}
water	31:4	0:0	2	p_sys
op	31:9	0:0	2	->
water	31:11	0:0	2	b_enc
op	31:17	0:0	2	=
water	31:19	0:0	2	b_encode
water	31:27	0:0	2	;
call	32:4	32:41	2	InitOmxEventQueue
arg	32:22	32:41	3	&p_sys->event_queue
op	32:22	0:0	4	&
water	32:23	0:0	4	p_sys
op	32:28	0:0	4	->
water	32:30	0:0	4	event_queue
water	32:42	0:0	2	;
call	33:4	33:40	2	vlc_mutex_init
arg	33:20	33:40	3	&p_sys->in.fifo.lock
op	33:20	0:0	4	&
water	33:21	0:0	4	p_sys
op	33:26	0:0	4	->
water	33:28	0:0	4	in
op	33:30	0:0	4	.
water	33:31	0:0	4	fifo
op	33:35	0:0	4	.
water	33:36	0:0	4	lock
water	33:41	0:0	2	;
call	34:4	34:39	2	vlc_cond_init
arg	34:19	34:39	3	&p_sys->in.fifo.wait
op	34:19	0:0	4	&
water	34:20	0:0	4	p_sys
op	34:25	0:0	4	->
water	34:27	0:0	4	in
op	34:29	0:0	4	.
water	34:30	0:0	4	fifo
op	34:34	0:0	4	.
water	34:35	0:0	4	wait
water	34:40	0:0	2	;
water	35:4	0:0	2	p_sys
op	35:9	0:0	2	->
water	35:11	0:0	2	in
op	35:13	0:0	2	.
water	35:14	0:0	2	fifo
op	35:18	0:0	2	.
water	35:19	0:0	2	offset
op	35:26	0:0	2	=
call	35:28	35:77	2	offsetof
arg	35:37	35:57	3	OMX_BUFFERHEADERTYPE
water	35:37	0:0	4	OMX_BUFFERHEADERTYPE
arg	35:59	35:77	3	pOutputPortPrivate
water	35:59	0:0	4	pOutputPortPrivate
op	35:79	0:0	2	/
op	35:81	0:0	2	sizeof
water	35:87	0:0	2	(
water	35:88	0:0	2	void
op	35:93	0:0	2	*
water	35:94	0:0	2	)
water	35:95	0:0	2	;
water	36:4	0:0	2	p_sys
op	36:9	0:0	2	->
water	36:11	0:0	2	in
op	36:13	0:0	2	.
water	36:14	0:0	2	fifo
op	36:18	0:0	2	.
water	36:19	0:0	2	pp_last
op	36:27	0:0	2	=
op	36:29	0:0	2	&
water	36:30	0:0	2	p_sys
op	36:35	0:0	2	->
water	36:37	0:0	2	in
op	36:39	0:0	2	.
water	36:40	0:0	2	fifo
op	36:44	0:0	2	.
water	36:45	0:0	2	p_first
water	36:52	0:0	2	;
water	37:4	0:0	2	p_sys
op	37:9	0:0	2	->
water	37:11	0:0	2	in
op	37:13	0:0	2	.
water	37:14	0:0	2	b_direct
op	37:23	0:0	2	=
water	37:25	0:0	2	false
water	37:30	0:0	2	;
water	38:4	0:0	2	p_sys
op	38:9	0:0	2	->
water	38:11	0:0	2	in
op	38:13	0:0	2	.
water	38:14	0:0	2	b_flushed
op	38:24	0:0	2	=
water	38:26	0:0	2	true
water	38:30	0:0	2	;
water	39:4	0:0	2	p_sys
op	39:9	0:0	2	->
water	39:11	0:0	2	in
op	39:13	0:0	2	.
water	39:14	0:0	2	p_fmt
op	39:20	0:0	2	=
op	39:22	0:0	2	&
water	39:23	0:0	2	p_dec
op	39:28	0:0	2	->
water	39:30	0:0	2	fmt_in
water	39:36	0:0	2	;
call	40:4	40:41	2	vlc_mutex_init
arg	40:20	40:41	3	&p_sys->out.fifo.lock
op	40:20	0:0	4	&
water	40:21	0:0	4	p_sys
op	40:26	0:0	4	->
water	40:28	0:0	4	out
op	40:31	0:0	4	.
water	40:32	0:0	4	fifo
op	40:36	0:0	4	.
water	40:37	0:0	4	lock
water	40:42	0:0	2	;
call	41:4	41:40	2	vlc_cond_init
arg	41:19	41:40	3	&p_sys->out.fifo.wait
op	41:19	0:0	4	&
water	41:20	0:0	4	p_sys
op	41:25	0:0	4	->
water	41:27	0:0	4	out
op	41:30	0:0	4	.
water	41:31	0:0	4	fifo
op	41:35	0:0	4	.
water	41:36	0:0	4	wait
water	41:41	0:0	2	;
water	42:4	0:0	2	p_sys
op	42:9	0:0	2	->
water	42:11	0:0	2	out
op	42:14	0:0	2	.
water	42:15	0:0	2	fifo
op	42:19	0:0	2	.
water	42:20	0:0	2	offset
op	42:27	0:0	2	=
call	42:29	42:77	2	offsetof
arg	42:38	42:58	3	OMX_BUFFERHEADERTYPE
water	42:38	0:0	4	OMX_BUFFERHEADERTYPE
arg	42:60	42:77	3	pInputPortPrivate
water	42:60	0:0	4	pInputPortPrivate
op	42:79	0:0	2	/
op	42:81	0:0	2	sizeof
water	42:87	0:0	2	(
water	42:88	0:0	2	void
op	42:93	0:0	2	*
water	42:94	0:0	2	)
water	42:95	0:0	2	;
water	43:4	0:0	2	p_sys
op	43:9	0:0	2	->
water	43:11	0:0	2	out
op	43:14	0:0	2	.
water	43:15	0:0	2	fifo
op	43:19	0:0	2	.
water	43:20	0:0	2	pp_last
op	43:28	0:0	2	=
op	43:30	0:0	2	&
water	43:31	0:0	2	p_sys
op	43:36	0:0	2	->
water	43:38	0:0	2	out
op	43:41	0:0	2	.
water	43:42	0:0	2	fifo
op	43:46	0:0	2	.
water	43:47	0:0	2	p_first
water	43:54	0:0	2	;
water	44:4	0:0	2	p_sys
op	44:9	0:0	2	->
water	44:11	0:0	2	out
op	44:14	0:0	2	.
water	44:15	0:0	2	b_direct
op	44:24	0:0	2	=
water	44:26	0:0	2	false
water	44:31	0:0	2	;
water	45:4	0:0	2	p_sys
op	45:9	0:0	2	->
water	45:11	0:0	2	out
op	45:14	0:0	2	.
water	45:15	0:0	2	b_flushed
op	45:25	0:0	2	=
water	45:27	0:0	2	true
water	45:31	0:0	2	;
water	46:4	0:0	2	p_sys
op	46:9	0:0	2	->
water	46:11	0:0	2	out
op	46:14	0:0	2	.
water	46:15	0:0	2	p_fmt
op	46:21	0:0	2	=
op	46:23	0:0	2	&
water	46:24	0:0	2	p_dec
op	46:29	0:0	2	->
water	46:31	0:0	2	fmt_out
water	46:38	0:0	2	;
water	47:4	0:0	2	p_sys
op	47:9	0:0	2	->
water	47:11	0:0	2	ports
op	47:17	0:0	2	=
water	47:19	0:0	2	2
water	47:20	0:0	2	;
water	48:4	0:0	2	p_sys
op	48:9	0:0	2	->
water	48:11	0:0	2	p_ports
op	48:19	0:0	2	=
op	48:21	0:0	2	&
water	48:22	0:0	2	p_sys
op	48:27	0:0	2	->
water	48:29	0:0	2	in
water	48:31	0:0	2	;
water	49:4	0:0	2	p_sys
op	49:9	0:0	2	->
water	49:11	0:0	2	b_use_pts
op	49:21	0:0	2	=
water	49:23	0:0	2	1
water	49:24	0:0	2	;
call	50:4	51:43	2	msg_Dbg
arg	50:12	50:17	3	p_dec
water	50:12	0:0	4	p_dec
arg	50:19	50:45	3	"fmt in:%4.4s, out: %4.4s"
water	50:19	0:0	4	"fmt in:%4.4s, out: %4.4s"
arg	50:47	50:77	3	(char*)&p_dec->fmt_in.i_codec
water	50:47	0:0	4	(
water	50:48	0:0	4	char
op	50:53	0:0	4	*
water	50:54	0:0	4	)
op	50:55	0:0	4	&
water	50:56	0:0	4	p_dec
op	50:61	0:0	4	->
water	50:63	0:0	4	fmt_in
op	50:69	0:0	4	.
water	50:70	0:0	4	i_codec
arg	51:12	51:43	3	(char*)&p_dec->fmt_out.i_codec
water	51:12	0:0	4	(
water	51:13	0:0	4	char
op	51:18	0:0	4	*
water	51:19	0:0	4	)
op	51:20	0:0	4	&
water	51:21	0:0	4	p_dec
op	51:26	0:0	4	->
water	51:28	0:0	4	fmt_out
op	51:35	0:0	4	.
water	51:36	0:0	4	i_codec
water	51:44	0:0	2	;
water	53:4	0:0	2	p_sys
op	53:9	0:0	2	->
water	53:11	0:0	2	components
op	53:22	0:0	2	=
call	54:8	57:61	2	CreateComponentsList
arg	54:29	54:35	3	p_this
water	54:29	0:0	4	p_this
arg	55:13	57:37	3	GetOmxRole(p_sys->b_enc?p_dec->fmt_out.i_codec:p_dec->fmt_in.i_codec,p_dec->fmt_in.i_cat,p_sys->b_enc)
call	55:13	57:36	4	GetOmxRole
arg	55:24	56:45	5	p_sys->b_enc?p_dec->fmt_out.i_codec:p_dec->fmt_in.i_codec
water	55:24	0:0	6	p_sys
op	55:29	0:0	6	->
water	55:31	0:0	6	b_enc
water	55:37	0:0	6	?
water	55:39	0:0	6	p_dec
op	55:44	0:0	6	->
water	55:46	0:0	6	fmt_out
op	55:53	0:0	6	.
water	55:54	0:0	6	i_codec
water	55:62	0:0	6	:
water	56:24	0:0	6	p_dec
op	56:29	0:0	6	->
water	56:31	0:0	6	fmt_in
op	56:37	0:0	6	.
water	56:38	0:0	6	i_codec
arg	56:47	56:66	5	p_dec->fmt_in.i_cat
water	56:47	0:0	6	p_dec
op	56:52	0:0	6	->
water	56:54	0:0	6	fmt_in
op	56:60	0:0	6	.
water	56:61	0:0	6	i_cat
arg	57:24	57:36	5	p_sys->b_enc
water	57:24	0:0	6	p_sys
op	57:29	0:0	6	->
water	57:31	0:0	6	b_enc
arg	57:39	57:61	3	p_sys->ppsz_components
water	57:39	0:0	4	p_sys
op	57:44	0:0	4	->
water	57:46	0:0	4	ppsz_components
water	57:62	0:0	2	;
if	58:4	64:4	2	(! p_sys -> components)
cond	58:8	58:16	3	! p_sys -> components
op	58:8	0:0	4	!
water	58:9	0:0	4	p_sys
op	58:14	0:0	4	->
water	58:16	0:0	4	components
stmts	59:4	64:4	3	
water	59:4	0:0	4	{
call	60:8	61:49	4	msg_Warn
arg	60:18	60:24	5	p_this
water	60:18	0:0	6	p_this
arg	60:26	60:74	5	"couldn't find an omx component for codec %4.4s"
water	60:26	0:0	6	"couldn't find an omx component for codec %4.4s"
arg	61:18	61:49	5	(char*)&p_dec->fmt_in.i_codec
water	61:18	0:0	6	(
water	61:19	0:0	6	char
op	61:24	0:0	6	*
water	61:25	0:0	6	)
op	61:26	0:0	6	&
water	61:27	0:0	6	p_dec
op	61:32	0:0	6	->
water	61:34	0:0	6	fmt_in
op	61:40	0:0	6	.
water	61:41	0:0	6	i_codec
water	61:50	0:0	4	;
call	62:8	62:27	4	CloseGeneric
arg	62:21	62:27	5	p_this
water	62:21	0:0	6	p_this
water	62:28	0:0	4	;
return	63:8	63:27	4	VLC_EGENERIC
water	63:15	0:0	5	VLC_EGENERIC
water	64:4	0:0	4	}
water	66:4	0:0	2	omx_error
op	66:14	0:0	2	=
water	66:16	0:0	2	OMX_ErrorUndefined
water	66:34	0:0	2	;
for	67:4	106:4	2	(i = 0 ;i < p_sys -> components;i ++)
forinit	67:8	67:13	3	i = 0 ;
water	67:8	0:0	4	i
op	67:10	0:0	4	=
water	67:12	0:0	4	0
water	67:13	0:0	4	;
cond	67:15	67:26	3	i < p_sys -> components
water	67:15	0:0	4	i
op	67:17	0:0	4	<
water	67:19	0:0	4	p_sys
op	67:24	0:0	4	->
water	67:26	0:0	4	components
forexpr	67:38	67:39	3	i ++
water	67:38	0:0	4	i
op	67:39	0:0	4	++
stmts	68:4	106:4	3	
water	68:4	0:0	4	{
if	71:8	72:20	4	(!strncmp (p_sys -> ppsz_components [ i ] ,"OMX.PV." ,7 ))
cond	71:12	71:60	5	!strncmp (p_sys -> ppsz_components [ i ] ,"OMX.PV." ,7 )
op	71:12	0:0	6	!
call	71:13	71:60	6	strncmp
arg	71:21	71:46	7	p_sys->ppsz_components[i]
water	71:21	0:0	8	p_sys
op	71:26	0:0	8	->
water	71:28	0:0	8	ppsz_components
op	71:43	0:0	8	[
water	71:44	0:0	8	i
op	71:45	0:0	8	]
arg	71:48	71:57	7	"OMX.PV."
water	71:48	0:0	8	"OMX.PV."
arg	71:59	71:60	7	7
water	71:59	0:0	8	7
stmts	72:12	72:20	5	
continue	72:12	72:20	6	
if	74:8	75:20	4	(!strncmp (p_sys -> ppsz_components [ i ] ,"OMX.google." ,11 ))
cond	74:12	74:65	5	!strncmp (p_sys -> ppsz_components [ i ] ,"OMX.google." ,11 )
op	74:12	0:0	6	!
call	74:13	74:65	6	strncmp
arg	74:21	74:46	7	p_sys->ppsz_components[i]
water	74:21	0:0	8	p_sys
op	74:26	0:0	8	->
water	74:28	0:0	8	ppsz_components
op	74:43	0:0	8	[
water	74:44	0:0	8	i
op	74:45	0:0	8	]
arg	74:48	74:61	7	"OMX.google."
water	74:48	0:0	8	"OMX.google."
arg	74:63	74:65	7	11
water	74:63	0:0	8	11
stmts	75:12	75:20	5	
continue	75:12	75:20	6	
if	79:8	80:20	4	(!strncmp (p_sys -> ppsz_components [ i ] ,"OMX.ARICENT." ,12 ))
cond	79:12	79:66	5	!strncmp (p_sys -> ppsz_components [ i ] ,"OMX.ARICENT." ,12 )
op	79:12	0:0	6	!
call	79:13	79:66	6	strncmp
arg	79:21	79:46	7	p_sys->ppsz_components[i]
water	79:21	0:0	8	p_sys
op	79:26	0:0	8	->
water	79:28	0:0	8	ppsz_components
op	79:43	0:0	8	[
water	79:44	0:0	8	i
op	79:45	0:0	8	]
arg	79:48	79:62	7	"OMX.ARICENT."
water	79:48	0:0	8	"OMX.ARICENT."
arg	79:64	79:66	7	12
water	79:64	0:0	8	12
stmts	80:12	80:20	5	
continue	80:12	80:20	6	
if	83:8	84:20	4	(strstr (p_sys -> ppsz_components [ i ] ,".secure" ))
cond	83:12	83:55	5	strstr (p_sys -> ppsz_components [ i ] ,".secure" )
call	83:12	83:55	6	strstr
arg	83:19	83:44	7	p_sys->ppsz_components[i]
water	83:19	0:0	8	p_sys
op	83:24	0:0	8	->
water	83:26	0:0	8	ppsz_components
op	83:41	0:0	8	[
water	83:42	0:0	8	i
op	83:43	0:0	8	]
arg	83:46	83:55	7	".secure"
water	83:46	0:0	8	".secure"
stmts	84:12	84:20	5	
continue	84:12	84:20	6	
if	86:8	87:20	4	(!strcmp (p_sys -> ppsz_components [ i ] ,"OMX.SEC.WMV.Decoder" ))
cond	86:12	86:68	5	!strcmp (p_sys -> ppsz_components [ i ] ,"OMX.SEC.WMV.Decoder" )
op	86:12	0:0	6	!
call	86:13	86:68	6	strcmp
arg	86:20	86:45	7	p_sys->ppsz_components[i]
water	86:20	0:0	8	p_sys
op	86:25	0:0	8	->
water	86:27	0:0	8	ppsz_components
op	86:42	0:0	8	[
water	86:43	0:0	8	i
op	86:44	0:0	8	]
arg	86:47	86:68	7	"OMX.SEC.WMV.Decoder"
water	86:47	0:0	8	"OMX.SEC.WMV.Decoder"
stmts	87:12	87:20	5	
continue	87:12	87:20	6	
if	94:8	95:20	4	(!strcmp (p_sys -> ppsz_components [ i ] ,"OMX.SEC.MP3.Decoder" ))
cond	94:12	94:68	5	!strcmp (p_sys -> ppsz_components [ i ] ,"OMX.SEC.MP3.Decoder" )
op	94:12	0:0	6	!
call	94:13	94:68	6	strcmp
arg	94:20	94:45	7	p_sys->ppsz_components[i]
water	94:20	0:0	8	p_sys
op	94:25	0:0	8	->
water	94:27	0:0	8	ppsz_components
op	94:42	0:0	8	[
water	94:43	0:0	8	i
op	94:44	0:0	8	]
arg	94:47	94:68	7	"OMX.SEC.MP3.Decoder"
water	94:47	0:0	8	"OMX.SEC.MP3.Decoder"
stmts	95:12	95:20	5	
continue	95:12	95:20	6	
if	100:8	101:20	4	(!strcmp (p_sys -> ppsz_components [ i ] ,"OMX.Nvidia.vc1.decode" ))
cond	100:12	100:70	5	!strcmp (p_sys -> ppsz_components [ i ] ,"OMX.Nvidia.vc1.decode" )
op	100:12	0:0	6	!
call	100:13	100:70	6	strcmp
arg	100:20	100:45	7	p_sys->ppsz_components[i]
water	100:20	0:0	8	p_sys
op	100:25	0:0	8	->
water	100:27	0:0	8	ppsz_components
op	100:42	0:0	8	[
water	100:43	0:0	8	i
op	100:44	0:0	8	]
arg	100:47	100:70	7	"OMX.Nvidia.vc1.decode"
water	100:47	0:0	8	"OMX.Nvidia.vc1.decode"
stmts	101:12	101:20	5	
continue	101:12	101:20	6	
water	103:8	0:0	4	omx_error
op	103:18	0:0	4	=
call	103:20	104:58	4	InitialiseComponent
arg	103:40	103:45	5	p_dec
water	103:40	0:0	6	p_dec
arg	103:47	103:72	5	p_sys->ppsz_components[i]
water	103:47	0:0	6	p_sys
op	103:52	0:0	6	->
water	103:54	0:0	6	ppsz_components
op	103:69	0:0	6	[
water	103:70	0:0	6	i
op	103:71	0:0	6	]
arg	104:40	104:58	5	&p_sys->omx_handle
op	104:40	0:0	6	&
water	104:41	0:0	6	p_sys
op	104:46	0:0	6	->
water	104:48	0:0	6	omx_handle
water	104:59	0:0	4	;
if	105:8	105:44	4	(omx_error == OMX_ErrorNone)
cond	105:11	105:24	5	omx_error == OMX_ErrorNone
water	105:11	0:0	6	omx_error
op	105:21	0:0	6	==
water	105:24	0:0	6	OMX_ErrorNone
stmts	105:39	105:44	5	
break	105:39	105:44	6	
water	106:4	0:0	4	}
call	107:4	107:63	2	CHECK_ERROR
arg	107:16	107:25	3	omx_error
water	107:16	0:0	4	omx_error
arg	107:27	107:63	3	"no component could be initialised"
water	107:27	0:0	4	"no component could be initialised"
water	107:64	0:0	2	;
call	109:4	109:78	2	OMX_SendCommand
arg	109:21	109:38	3	p_sys->omx_handle
water	109:21	0:0	4	p_sys
op	109:26	0:0	4	->
water	109:28	0:0	4	omx_handle
arg	109:40	109:59	3	OMX_CommandStateSet
water	109:40	0:0	4	OMX_CommandStateSet
arg	109:61	109:74	3	OMX_StateIdle
water	109:61	0:0	4	OMX_StateIdle
arg	109:76	109:78	3	0
water	109:76	0:0	4	0
water	109:79	0:0	2	;
call	110:4	110:77	2	CHECK_ERROR
arg	110:16	110:25	3	omx_error
water	110:16	0:0	4	omx_error
arg	110:27	110:65	3	"OMX_CommandStateSet Idle failed (%x)"
water	110:27	0:0	4	"OMX_CommandStateSet Idle failed (%x)"
arg	110:67	110:77	3	omx_error
water	110:67	0:0	4	omx_error
water	110:78	0:0	2	;
for	112:4	139:4	2	(i = 0 ;i < p_sys -> ports;i ++)
forinit	112:8	112:13	3	i = 0 ;
water	112:8	0:0	4	i
op	112:10	0:0	4	=
water	112:12	0:0	4	0
water	112:13	0:0	4	;
cond	112:15	112:26	3	i < p_sys -> ports
water	112:15	0:0	4	i
op	112:17	0:0	4	<
water	112:19	0:0	4	p_sys
op	112:24	0:0	4	->
water	112:26	0:0	4	ports
forexpr	112:33	112:34	3	i ++
water	112:33	0:0	4	i
op	112:34	0:0	4	++
stmts	113:4	139:4	3	
water	113:4	0:0	4	{
decl	114:8	114:44	4	OmxPort	*p_port
op	114:24	0:0	4	=
op	114:26	0:0	4	&
water	114:27	0:0	4	p_sys
op	114:32	0:0	4	->
water	114:34	0:0	4	p_ports
op	114:41	0:0	4	[
water	114:42	0:0	4	i
op	114:43	0:0	4	]
for	115:8	135:8	4	(j = 0 ;j < p_port -> i_buffers;j ++)
forinit	115:12	115:17	5	j = 0 ;
water	115:12	0:0	6	j
op	115:14	0:0	6	=
water	115:16	0:0	6	0
water	115:17	0:0	6	;
cond	115:19	115:31	5	j < p_port -> i_buffers
water	115:19	0:0	6	j
op	115:21	0:0	6	<
water	115:23	0:0	6	p_port
op	115:29	0:0	6	->
water	115:31	0:0	6	i_buffers
forexpr	115:42	115:43	5	j ++
water	115:42	0:0	6	j
op	115:43	0:0	6	++
stmts	116:8	135:8	5	
water	116:8	0:0	6	{
decl	119:12	120:69	6	char	*p_buf
op	119:24	0:0	6	=
call	119:26	120:68	7	malloc
arg	119:33	120:68	8	p_port->definition.nBufferSize+p_port->definition.nBufferAlignment
water	119:33	0:0	9	p_port
op	119:39	0:0	9	->
water	119:41	0:0	9	definition
op	119:51	0:0	9	.
water	119:52	0:0	9	nBufferSize
op	119:64	0:0	9	+
water	120:33	0:0	9	p_port
op	120:39	0:0	9	->
water	120:41	0:0	9	definition
op	120:51	0:0	9	.
water	120:52	0:0	9	nBufferAlignment
water	121:12	0:0	6	p_port
op	121:18	0:0	6	->
water	121:20	0:0	6	pp_buffers
op	121:30	0:0	6	[
water	121:31	0:0	6	i
op	121:32	0:0	6	]
op	121:34	0:0	6	=
water	121:36	0:0	6	(
water	121:37	0:0	6	void
op	121:42	0:0	6	*
water	121:43	0:0	6	)
call	121:44	121:103	6	ALIGN
arg	121:50	121:66	7	(uintptr_t)p_buf
water	121:50	0:0	8	(
water	121:51	0:0	8	uintptr_t
water	121:60	0:0	8	)
water	121:61	0:0	8	p_buf
arg	121:68	121:103	7	p_port->definition.nBufferAlignment
water	121:68	0:0	8	p_port
op	121:74	0:0	8	->
water	121:76	0:0	8	definition
op	121:86	0:0	8	.
water	121:87	0:0	8	nBufferAlignment
water	121:104	0:0	6	;
if	123:12	127:76	6	(p_port -> b_direct)
cond	123:15	123:23	7	p_port -> b_direct
water	123:15	0:0	8	p_port
op	123:21	0:0	8	->
water	123:23	0:0	8	b_direct
stmts	124:16	127:76	7	
water	124:16	0:0	8	omx_error
op	124:26	0:0	8	=
call	125:20	127:75	8	OMX_UseBuffer
arg	125:35	125:52	9	p_sys->omx_handle
water	125:35	0:0	10	p_sys
op	125:40	0:0	10	->
water	125:42	0:0	10	omx_handle
arg	125:54	125:76	9	&p_port->pp_buffers[j]
op	125:54	0:0	10	&
water	125:55	0:0	10	p_port
op	125:61	0:0	10	->
water	125:63	0:0	10	pp_buffers
op	125:73	0:0	10	[
water	125:74	0:0	10	j
op	125:75	0:0	10	]
arg	126:35	126:55	9	p_port->i_port_index
water	126:35	0:0	10	p_port
op	126:41	0:0	10	->
water	126:43	0:0	10	i_port_index
arg	126:57	126:58	9	0
water	126:57	0:0	10	0
arg	127:35	127:65	9	p_port->definition.nBufferSize
water	127:35	0:0	10	p_port
op	127:41	0:0	10	->
water	127:43	0:0	10	definition
op	127:53	0:0	10	.
water	127:54	0:0	10	nBufferSize
arg	127:67	127:75	9	(void*)1
water	127:67	0:0	10	(
water	127:68	0:0	10	void
op	127:72	0:0	10	*
water	127:73	0:0	10	)
water	127:74	0:0	10	1
water	127:76	0:0	8	;
else	128:12	132:71	6
stmts	129:16	132:71	7	
water	129:16	0:0	8	omx_error
op	129:26	0:0	8	=
call	130:20	132:70	8	OMX_AllocateBuffer
arg	130:40	130:57	9	p_sys->omx_handle
water	130:40	0:0	10	p_sys
op	130:45	0:0	10	->
water	130:47	0:0	10	omx_handle
arg	130:59	130:81	9	&p_port->pp_buffers[j]
op	130:59	0:0	10	&
water	130:60	0:0	10	p_port
op	130:66	0:0	10	->
water	130:68	0:0	10	pp_buffers
op	130:78	0:0	10	[
water	130:79	0:0	10	j
op	130:80	0:0	10	]
arg	131:40	131:60	9	p_port->i_port_index
water	131:40	0:0	10	p_port
op	131:46	0:0	10	->
water	131:48	0:0	10	i_port_index
arg	131:62	131:63	9	0
water	131:62	0:0	10	0
arg	132:40	132:70	9	p_port->definition.nBufferSize
water	132:40	0:0	10	p_port
op	132:46	0:0	10	->
water	132:48	0:0	10	definition
op	132:58	0:0	10	.
water	132:59	0:0	10	nBufferSize
water	132:71	0:0	8	;
if	133:12	133:48	6	(omx_error != OMX_ErrorNone)
cond	133:15	133:28	7	omx_error != OMX_ErrorNone
water	133:15	0:0	8	omx_error
op	133:25	0:0	8	!=
water	133:28	0:0	8	OMX_ErrorNone
stmts	133:43	133:48	7	
break	133:43	133:48	8	
call	134:12	134:61	6	OMX_FIFO_PUT
arg	134:25	134:38	7	&p_port->fifo
op	134:25	0:0	8	&
water	134:26	0:0	8	p_port
op	134:32	0:0	8	->
water	134:34	0:0	8	fifo
arg	134:40	134:61	7	p_port->pp_buffers[j]
water	134:40	0:0	8	p_port
op	134:46	0:0	8	->
water	134:48	0:0	8	pp_buffers
op	134:58	0:0	8	[
water	134:59	0:0	8	j
op	134:60	0:0	8	]
water	134:62	0:0	6	;
water	135:8	0:0	6	}
water	136:8	0:0	4	p_port
op	136:14	0:0	4	->
water	136:16	0:0	4	i_buffers
op	136:26	0:0	4	=
water	136:28	0:0	4	j
water	136:29	0:0	4	;
call	137:8	138:60	4	CHECK_ERROR
arg	137:20	137:29	5	omx_error
water	137:20	0:0	6	omx_error
arg	137:31	137:66	5	"OMX_UseBuffer failed (%x, %i, %i)"
water	137:31	0:0	6	"OMX_UseBuffer failed (%x, %i, %i)"
arg	138:20	138:29	5	omx_error
water	138:20	0:0	6	omx_error
arg	138:31	138:56	5	(int)p_port->i_port_index
water	138:31	0:0	6	(
water	138:32	0:0	6	int
water	138:35	0:0	6	)
water	138:36	0:0	6	p_port
op	138:42	0:0	6	->
water	138:44	0:0	6	i_port_index
arg	138:58	138:60	5	j
water	138:58	0:0	6	j
water	138:61	0:0	4	;
water	139:4	0:0	4	}
water	140:4	0:0	2	omx_error
op	140:14	0:0	2	=
call	140:16	140:90	2	WaitForSpecificOmxEvent
arg	140:40	140:59	3	&p_sys->event_queue
op	140:40	0:0	4	&
water	140:41	0:0	4	p_sys
op	140:46	0:0	4	->
water	140:48	0:0	4	event_queue
arg	140:61	140:81	3	OMX_EventCmdComplete
water	140:61	0:0	4	OMX_EventCmdComplete
arg	140:83	140:84	3	0
water	140:83	0:0	4	0
arg	140:86	140:87	3	0
water	140:86	0:0	4	0
arg	140:89	140:90	3	0
water	140:89	0:0	4	0
water	140:91	0:0	2	;
call	141:4	141:66	2	CHECK_ERROR
arg	141:16	141:25	3	omx_error
water	141:16	0:0	4	omx_error
arg	141:27	141:54	3	"Wait for Idle failed (%x)"
water	141:27	0:0	4	"Wait for Idle failed (%x)"
arg	141:56	141:66	3	omx_error
water	141:56	0:0	4	omx_error
water	141:67	0:0	2	;
water	142:4	0:0	2	omx_error
op	142:14	0:0	2	=
call	142:16	143:54	2	OMX_SendCommand
arg	142:33	142:50	3	p_sys->omx_handle
water	142:33	0:0	4	p_sys
op	142:38	0:0	4	->
water	142:40	0:0	4	omx_handle
arg	142:52	142:71	3	OMX_CommandStateSet
water	142:52	0:0	4	OMX_CommandStateSet
arg	143:33	143:51	3	OMX_StateExecuting
water	143:33	0:0	4	OMX_StateExecuting
arg	143:53	143:54	3	0
water	143:53	0:0	4	0
water	143:55	0:0	2	;
call	144:4	144:82	2	CHECK_ERROR
arg	144:16	144:25	3	omx_error
water	144:16	0:0	4	omx_error
arg	144:27	144:70	3	"OMX_CommandStateSet Executing failed (%x)"
water	144:27	0:0	4	"OMX_CommandStateSet Executing failed (%x)"
arg	144:72	144:82	3	omx_error
water	144:72	0:0	4	omx_error
water	144:83	0:0	2	;
water	145:4	0:0	2	omx_error
op	145:14	0:0	2	=
call	145:16	145:90	2	WaitForSpecificOmxEvent
arg	145:40	145:59	3	&p_sys->event_queue
op	145:40	0:0	4	&
water	145:41	0:0	4	p_sys
op	145:46	0:0	4	->
water	145:48	0:0	4	event_queue
arg	145:61	145:81	3	OMX_EventCmdComplete
water	145:61	0:0	4	OMX_EventCmdComplete
arg	145:83	145:84	3	0
water	145:83	0:0	4	0
arg	145:86	145:87	3	0
water	145:86	0:0	4	0
arg	145:89	145:90	3	0
water	145:89	0:0	4	0
water	145:91	0:0	2	;
call	146:4	146:71	2	CHECK_ERROR
arg	146:16	146:25	3	omx_error
water	146:16	0:0	4	omx_error
arg	146:27	146:59	3	"Wait for Executing failed (%x)"
water	146:27	0:0	4	"Wait for Executing failed (%x)"
arg	146:61	146:71	3	omx_error
water	146:61	0:0	4	omx_error
water	146:72	0:0	2	;
if	148:4	211:4	2	(p_dec -> fmt_in . i_extra)
cond	148:8	148:22	3	p_dec -> fmt_in . i_extra
water	148:8	0:0	4	p_dec
op	148:13	0:0	4	->
water	148:15	0:0	4	fmt_in
op	148:21	0:0	4	.
water	148:22	0:0	4	i_extra
stmts	149:4	211:4	3	
water	149:4	0:0	4	{
call	150:8	150:46	4	OMX_FIFO_GET
arg	150:21	150:36	5	&p_sys->in.fifo
op	150:21	0:0	6	&
water	150:22	0:0	6	p_sys
op	150:27	0:0	6	->
water	150:29	0:0	6	in
op	150:31	0:0	6	.
water	150:32	0:0	6	fifo
arg	150:38	150:46	5	p_header
water	150:38	0:0	6	p_header
water	150:47	0:0	4	;
water	151:8	0:0	4	p_header
op	151:16	0:0	4	->
water	151:18	0:0	4	nFilledLen
op	151:29	0:0	4	=
water	151:31	0:0	4	p_dec
op	151:36	0:0	4	->
water	151:38	0:0	4	fmt_in
op	151:44	0:0	4	.
water	151:45	0:0	4	i_extra
water	151:52	0:0	4	;
if	153:8	159:8	4	(p_sys -> i_nal_size_length && ! p_sys -> in . b_direct)
cond	153:12	153:51	5	p_sys -> i_nal_size_length && ! p_sys -> in . b_direct
water	153:12	0:0	6	p_sys
op	153:17	0:0	6	->
water	153:19	0:0	6	i_nal_size_length
op	153:37	0:0	6	&&
op	153:40	0:0	6	!
water	153:41	0:0	6	p_sys
op	153:46	0:0	6	->
water	153:48	0:0	6	in
op	153:50	0:0	6	.
water	153:51	0:0	6	b_direct
stmts	154:8	159:8	5	
water	154:8	0:0	6	{
water	155:12	0:0	6	p_header
op	155:20	0:0	6	->
water	155:22	0:0	6	nFilledLen
op	155:33	0:0	6	=
water	155:35	0:0	6	0
water	155:36	0:0	6	;
call	156:12	158:69	6	convert_sps_pps
arg	156:29	156:34	7	p_dec
water	156:29	0:0	8	p_dec
arg	156:36	156:57	7	p_dec->fmt_in.p_extra
water	156:36	0:0	8	p_dec
op	156:41	0:0	8	->
water	156:43	0:0	8	fmt_in
op	156:49	0:0	8	.
water	156:50	0:0	8	p_extra
arg	156:59	156:80	7	p_dec->fmt_in.i_extra
water	156:59	0:0	8	p_dec
op	156:64	0:0	8	->
water	156:66	0:0	8	fmt_in
op	156:72	0:0	8	.
water	156:73	0:0	8	i_extra
arg	157:29	157:46	7	p_header->pBuffer
water	157:29	0:0	8	p_header
op	157:37	0:0	8	->
water	157:39	0:0	8	pBuffer
arg	157:48	157:67	7	p_header->nAllocLen
water	157:48	0:0	8	p_header
op	157:56	0:0	8	->
water	157:58	0:0	8	nAllocLen
arg	158:29	158:62	7	(uint32_t*)&p_header->nFilledLen
water	158:29	0:0	8	(
water	158:30	0:0	8	uint32_t
op	158:38	0:0	8	*
water	158:39	0:0	8	)
op	158:41	0:0	8	&
water	158:42	0:0	8	p_header
op	158:50	0:0	8	->
water	158:52	0:0	8	nFilledLen
arg	158:64	158:69	7	NULL
water	158:64	0:0	8	NULL
water	158:70	0:0	6	;
water	159:8	0:0	6	}
else	160:8	164:8	4
stmts	160:13	164:8	5	
if	160:13	164:8	6	(p_sys -> in . b_direct)
cond	160:16	160:26	7	p_sys -> in . b_direct
water	160:16	0:0	8	p_sys
op	160:21	0:0	8	->
water	160:23	0:0	8	in
op	160:25	0:0	8	.
water	160:26	0:0	8	b_direct
stmts	161:8	164:8	7	
water	161:8	0:0	8	{
water	162:12	0:0	8	p_header
op	162:20	0:0	8	->
water	162:22	0:0	8	pOutputPortPrivate
op	162:41	0:0	8	=
water	162:43	0:0	8	p_header
op	162:51	0:0	8	->
water	162:53	0:0	8	pBuffer
water	162:60	0:0	8	;
water	163:12	0:0	8	p_header
op	163:20	0:0	8	->
water	163:22	0:0	8	pBuffer
op	163:30	0:0	8	=
water	163:32	0:0	8	p_dec
op	163:37	0:0	8	->
water	163:39	0:0	8	fmt_in
op	163:45	0:0	8	.
water	163:46	0:0	8	p_extra
water	163:53	0:0	8	;
water	164:8	0:0	8	}
else	165:8	195:8	4
stmts	165:13	195:8	5	
if	165:13	195:8	6	(p_dec -> fmt_in . i_codec == VLC_CODEC_WMV3 && p_dec -> fmt_in . i_extra >= 4 && p_header -> nAllocLen >= 36)
cond	165:17	167:40	7	p_dec -> fmt_in . i_codec == VLC_CODEC_WMV3 && p_dec -> fmt_in . i_extra >= 4 && p_header -> nAllocLen >= 36
water	165:17	0:0	8	p_dec
op	165:22	0:0	8	->
water	165:24	0:0	8	fmt_in
op	165:30	0:0	8	.
water	165:31	0:0	8	i_codec
op	165:39	0:0	8	==
water	165:42	0:0	8	VLC_CODEC_WMV3
op	165:57	0:0	8	&&
water	166:17	0:0	8	p_dec
op	166:22	0:0	8	->
water	166:24	0:0	8	fmt_in
op	166:30	0:0	8	.
water	166:31	0:0	8	i_extra
op	166:39	0:0	8	>=
water	166:42	0:0	8	4
op	166:44	0:0	8	&&
water	167:17	0:0	8	p_header
op	167:25	0:0	8	->
water	167:27	0:0	8	nAllocLen
op	167:37	0:0	8	>=
water	167:40	0:0	8	36
stmts	168:8	195:8	7	
water	168:8	0:0	8	{
decl	169:12	169:23	8	int	profile
water	174:12	0:0	8	static
water	174:19	0:0	8	const
water	174:25	0:0	8	uint8_t
water	174:33	0:0	8	wmv3seq
op	174:40	0:0	8	[
op	174:41	0:0	8	]
op	174:43	0:0	8	=
water	174:45	0:0	8	{
water	175:16	0:0	8	0
water	175:17	0:0	8	xff
water	175:20	0:0	8	,
water	175:22	0:0	8	0
water	175:23	0:0	8	xff
water	175:26	0:0	8	,
water	175:28	0:0	8	0
water	175:29	0:0	8	xff
water	175:32	0:0	8	,
water	175:34	0:0	8	0
water	175:35	0:0	8	xc5
water	175:38	0:0	8	,
water	176:16	0:0	8	0
water	176:17	0:0	8	x04
water	176:20	0:0	8	,
water	176:22	0:0	8	0
water	176:23	0:0	8	x00
water	176:26	0:0	8	,
water	176:28	0:0	8	0
water	176:29	0:0	8	x00
water	176:32	0:0	8	,
water	176:34	0:0	8	0
water	176:35	0:0	8	x00
water	176:38	0:0	8	,
water	177:16	0:0	8	0
water	177:17	0:0	8	x00
water	177:20	0:0	8	,
water	177:22	0:0	8	0
water	177:23	0:0	8	x00
water	177:26	0:0	8	,
water	177:28	0:0	8	0
water	177:29	0:0	8	x00
water	177:32	0:0	8	,
water	177:34	0:0	8	0
water	177:35	0:0	8	x00
water	177:38	0:0	8	,
water	178:16	0:0	8	0
water	178:17	0:0	8	x00
water	178:20	0:0	8	,
water	178:22	0:0	8	0
water	178:23	0:0	8	x00
water	178:26	0:0	8	,
water	178:28	0:0	8	0
water	178:29	0:0	8	x00
water	178:32	0:0	8	,
water	178:34	0:0	8	0
water	178:35	0:0	8	x00
water	178:38	0:0	8	,
water	179:16	0:0	8	0
water	179:17	0:0	8	x00
water	179:20	0:0	8	,
water	179:22	0:0	8	0
water	179:23	0:0	8	x00
water	179:26	0:0	8	,
water	179:28	0:0	8	0
water	179:29	0:0	8	x00
water	179:32	0:0	8	,
water	179:34	0:0	8	0
water	179:35	0:0	8	x00
water	179:38	0:0	8	,
water	180:16	0:0	8	0
water	180:17	0:0	8	x0c
water	180:20	0:0	8	,
water	180:22	0:0	8	0
water	180:23	0:0	8	x00
water	180:26	0:0	8	,
water	180:28	0:0	8	0
water	180:29	0:0	8	x00
water	180:32	0:0	8	,
water	180:34	0:0	8	0
water	180:35	0:0	8	x00
water	180:38	0:0	8	,
water	181:16	0:0	8	0
water	181:17	0:0	8	xff
water	181:20	0:0	8	,
water	181:22	0:0	8	0
water	181:23	0:0	8	xff
water	181:26	0:0	8	,
water	181:28	0:0	8	0
water	181:29	0:0	8	x00
water	181:32	0:0	8	,
water	181:34	0:0	8	0
water	181:35	0:0	8	x80
water	181:38	0:0	8	,
water	182:16	0:0	8	0
water	182:17	0:0	8	xff
water	182:20	0:0	8	,
water	182:22	0:0	8	0
water	182:23	0:0	8	xff
water	182:26	0:0	8	,
water	182:28	0:0	8	0
water	182:29	0:0	8	x00
water	182:32	0:0	8	,
water	182:34	0:0	8	0
water	182:35	0:0	8	x00
water	182:38	0:0	8	,
water	183:16	0:0	8	0
water	183:17	0:0	8	xff
water	183:20	0:0	8	,
water	183:22	0:0	8	0
water	183:23	0:0	8	xff
water	183:26	0:0	8	,
water	183:28	0:0	8	0
water	183:29	0:0	8	xff
water	183:32	0:0	8	,
water	183:34	0:0	8	0
water	183:35	0:0	8	xff
water	183:38	0:0	8	,
water	184:12	0:0	8	}
water	184:13	0:0	8	;
water	185:12	0:0	8	p_header
op	185:20	0:0	8	->
water	185:22	0:0	8	nFilledLen
op	185:33	0:0	8	=
op	185:35	0:0	8	sizeof
water	185:41	0:0	8	(
water	185:42	0:0	8	wmv3seq
water	185:49	0:0	8	)
water	185:50	0:0	8	;
call	186:12	186:67	8	memcpy
arg	186:19	186:36	9	p_header->pBuffer
water	186:19	0:0	10	p_header
op	186:27	0:0	10	->
water	186:29	0:0	10	pBuffer
arg	186:38	186:45	9	wmv3seq
water	186:38	0:0	10	wmv3seq
arg	186:47	186:67	9	p_header->nFilledLen
water	186:47	0:0	10	p_header
op	186:55	0:0	10	->
water	186:57	0:0	10	nFilledLen
water	186:68	0:0	8	;
call	188:12	188:66	8	memcpy
arg	188:19	188:40	9	&p_header->pBuffer[8]
op	188:19	0:0	10	&
water	188:20	0:0	10	p_header
op	188:28	0:0	10	->
water	188:30	0:0	10	pBuffer
op	188:37	0:0	10	[
water	188:38	0:0	10	8
op	188:39	0:0	10	]
arg	188:42	188:63	9	p_dec->fmt_in.p_extra
water	188:42	0:0	10	p_dec
op	188:47	0:0	10	->
water	188:49	0:0	10	fmt_in
op	188:55	0:0	10	.
water	188:56	0:0	10	p_extra
arg	188:65	188:66	9	4
water	188:65	0:0	10	4
water	188:67	0:0	8	;
water	190:12	0:0	8	profile
op	190:20	0:0	8	=
water	190:22	0:0	8	p_header
op	190:30	0:0	8	->
water	190:32	0:0	8	pBuffer
op	190:39	0:0	8	[
water	190:40	0:0	8	8
op	190:41	0:0	8	]
op	190:43	0:0	8	>>
water	190:46	0:0	8	6
water	190:47	0:0	8	;
water	191:12	0:0	8	p_header
op	191:20	0:0	8	->
water	191:22	0:0	8	pBuffer
op	191:29	0:0	8	[
water	191:30	0:0	8	8
op	191:31	0:0	8	]
op	191:33	0:0	8	=
water	191:35	0:0	8	(
water	191:36	0:0	8	p_header
op	191:44	0:0	8	->
water	191:46	0:0	8	pBuffer
op	191:53	0:0	8	[
water	191:54	0:0	8	8
op	191:55	0:0	8	]
op	191:57	0:0	8	&
water	191:59	0:0	8	0
water	191:60	0:0	8	x0f
water	191:63	0:0	8	)
op	191:65	0:0	8	|
water	191:67	0:0	8	(
water	191:68	0:0	8	profile
op	191:76	0:0	8	<<
water	191:79	0:0	8	4
water	191:80	0:0	8	)
water	191:81	0:0	8	;
call	193:12	193:72	8	SetDWLE
arg	193:20	193:42	9	&p_header->pBuffer[12]
op	193:20	0:0	10	&
water	193:21	0:0	10	p_header
op	193:29	0:0	10	->
water	193:31	0:0	10	pBuffer
op	193:38	0:0	10	[
water	193:39	0:0	10	12
op	193:41	0:0	10	]
arg	193:44	193:72	9	p_dec->fmt_in.video.i_height
water	193:44	0:0	10	p_dec
op	193:49	0:0	10	->
water	193:51	0:0	10	fmt_in
op	193:57	0:0	10	.
water	193:58	0:0	10	video
op	193:63	0:0	10	.
water	193:64	0:0	10	i_height
water	193:73	0:0	8	;
call	194:12	194:71	8	SetDWLE
arg	194:20	194:42	9	&p_header->pBuffer[16]
op	194:20	0:0	10	&
water	194:21	0:0	10	p_header
op	194:29	0:0	10	->
water	194:31	0:0	10	pBuffer
op	194:38	0:0	10	[
water	194:39	0:0	10	16
op	194:41	0:0	10	]
arg	194:44	194:71	9	p_dec->fmt_in.video.i_width
water	194:44	0:0	10	p_dec
op	194:49	0:0	10	->
water	194:51	0:0	10	fmt_in
op	194:57	0:0	10	.
water	194:58	0:0	10	video
op	194:63	0:0	10	.
water	194:64	0:0	10	i_width
water	194:72	0:0	8	;
water	195:8	0:0	8	}
else	196:8	205:8	4
stmts	197:8	205:8	5	
water	197:8	0:0	6	{
if	198:12	203:12	6	(p_header -> nFilledLen > p_header -> nAllocLen)
cond	198:15	198:48	7	p_header -> nFilledLen > p_header -> nAllocLen
water	198:15	0:0	8	p_header
op	198:23	0:0	8	->
water	198:25	0:0	8	nFilledLen
op	198:36	0:0	8	>
water	198:38	0:0	8	p_header
op	198:46	0:0	8	->
water	198:48	0:0	8	nAllocLen
stmts	199:12	203:12	7	
water	199:12	0:0	8	{
call	200:16	201:48	8	msg_Dbg
arg	200:24	200:29	9	p_dec
water	200:24	0:0	10	p_dec
arg	200:31	200:57	9	"buffer too small (%i,%i)"
water	200:31	0:0	10	"buffer too small (%i,%i)"
arg	200:59	200:84	9	(int)p_header->nFilledLen
water	200:59	0:0	10	(
water	200:60	0:0	10	int
water	200:63	0:0	10	)
water	200:64	0:0	10	p_header
op	200:72	0:0	10	->
water	200:74	0:0	10	nFilledLen
arg	201:24	201:48	9	(int)p_header->nAllocLen
water	201:24	0:0	10	(
water	201:25	0:0	10	int
water	201:28	0:0	10	)
water	201:29	0:0	10	p_header
op	201:37	0:0	10	->
water	201:39	0:0	10	nAllocLen
water	201:49	0:0	8	;
water	202:16	0:0	8	p_header
op	202:24	0:0	8	->
water	202:26	0:0	8	nFilledLen
op	202:37	0:0	8	=
water	202:39	0:0	8	p_header
op	202:47	0:0	8	->
water	202:49	0:0	8	nAllocLen
water	202:58	0:0	8	;
water	203:12	0:0	8	}
call	204:12	204:81	6	memcpy
arg	204:19	204:36	7	p_header->pBuffer
water	204:19	0:0	8	p_header
op	204:27	0:0	8	->
water	204:29	0:0	8	pBuffer
arg	204:38	204:59	7	p_dec->fmt_in.p_extra
water	204:38	0:0	8	p_dec
op	204:43	0:0	8	->
water	204:45	0:0	8	fmt_in
op	204:51	0:0	8	.
water	204:52	0:0	8	p_extra
arg	204:61	204:81	7	p_header->nFilledLen
water	204:61	0:0	8	p_header
op	204:69	0:0	8	->
water	204:71	0:0	8	nFilledLen
water	204:82	0:0	6	;
water	205:8	0:0	6	}
water	206:8	0:0	4	p_header
op	206:16	0:0	4	->
water	206:18	0:0	4	nOffset
op	206:26	0:0	4	=
water	206:28	0:0	4	0
water	206:29	0:0	4	;
water	207:8	0:0	4	p_header
op	207:16	0:0	4	->
water	207:18	0:0	4	nFlags
op	207:25	0:0	4	=
water	207:27	0:0	4	OMX_BUFFERFLAG_CODECCONFIG
op	207:54	0:0	4	|
water	207:56	0:0	4	OMX_BUFFERFLAG_ENDOFFRAME
water	207:81	0:0	4	;
call	208:8	209:60	4	msg_Dbg
arg	208:16	208:21	5	p_dec
water	208:16	0:0	6	p_dec
arg	208:23	208:61	5	"sending codec config data %p, %p, %i"
water	208:23	0:0	6	"sending codec config data %p, %p, %i"
arg	208:63	208:71	5	p_header
water	208:63	0:0	6	p_header
arg	209:16	209:33	5	p_header->pBuffer
water	209:16	0:0	6	p_header
op	209:24	0:0	6	->
water	209:26	0:0	6	pBuffer
arg	209:35	209:60	5	(int)p_header->nFilledLen
water	209:35	0:0	6	(
water	209:36	0:0	6	int
water	209:39	0:0	6	)
water	209:40	0:0	6	p_header
op	209:48	0:0	6	->
water	209:50	0:0	6	nFilledLen
water	209:61	0:0	4	;
call	210:8	210:55	4	OMX_EmptyThisBuffer
arg	210:28	210:45	5	p_sys->omx_handle
water	210:28	0:0	6	p_sys
op	210:33	0:0	6	->
water	210:35	0:0	6	omx_handle
arg	210:47	210:55	5	p_header
water	210:47	0:0	6	p_header
water	210:56	0:0	4	;
water	211:4	0:0	4	}
water	213:4	0:0	2	omx_error
op	213:14	0:0	2	=
call	213:16	213:70	2	GetPortDefinition
arg	213:34	213:39	3	p_dec
water	213:34	0:0	4	p_dec
arg	213:41	213:52	3	&p_sys->out
op	213:41	0:0	4	&
water	213:42	0:0	4	p_sys
op	213:47	0:0	4	->
water	213:49	0:0	4	out
arg	213:54	213:70	3	p_sys->out.p_fmt
water	213:54	0:0	4	p_sys
op	213:59	0:0	4	->
water	213:61	0:0	4	out
op	213:64	0:0	4	.
water	213:65	0:0	4	p_fmt
water	213:71	0:0	2	;
if	214:4	214:45	2	(omx_error != OMX_ErrorNone)
cond	214:7	214:20	3	omx_error != OMX_ErrorNone
water	214:7	0:0	4	omx_error
op	214:17	0:0	4	!=
water	214:20	0:0	4	OMX_ErrorNone
stmts	214:35	214:45	3	
goto	214:35	214:45	4	error
water	214:40	0:0	5	error
call	215:4	215:68	2	PrintOmx
arg	215:13	215:18	3	p_dec
water	215:13	0:0	4	p_dec
arg	215:20	215:37	3	p_sys->omx_handle
water	215:20	0:0	4	p_sys
op	215:25	0:0	4	->
water	215:27	0:0	4	omx_handle
arg	215:39	215:68	3	p_dec->p_sys->in.i_port_index
water	215:39	0:0	4	p_dec
op	215:44	0:0	4	->
water	215:46	0:0	4	p_sys
op	215:51	0:0	4	->
water	215:53	0:0	4	in
op	215:55	0:0	4	.
water	215:56	0:0	4	i_port_index
water	215:69	0:0	2	;
call	216:4	216:69	2	PrintOmx
arg	216:13	216:18	3	p_dec
water	216:13	0:0	4	p_dec
arg	216:20	216:37	3	p_sys->omx_handle
water	216:20	0:0	4	p_sys
op	216:25	0:0	4	->
water	216:27	0:0	4	omx_handle
arg	216:39	216:69	3	p_dec->p_sys->out.i_port_index
water	216:39	0:0	4	p_dec
op	216:44	0:0	4	->
water	216:46	0:0	4	p_sys
op	216:51	0:0	4	->
water	216:53	0:0	4	out
op	216:56	0:0	4	.
water	216:57	0:0	4	i_port_index
water	216:70	0:0	2	;
if	217:4	217:33	2	(p_sys -> b_error)
cond	217:7	217:14	3	p_sys -> b_error
water	217:7	0:0	4	p_sys
op	217:12	0:0	4	->
water	217:14	0:0	4	b_error
stmts	217:23	217:33	3	
goto	217:23	217:33	4	error
water	217:28	0:0	5	error
water	218:4	0:0	2	p_dec
op	218:9	0:0	2	->
water	218:11	0:0	2	b_need_packetized
op	218:29	0:0	2	=
water	218:31	0:0	2	true
water	218:35	0:0	2	;
if	219:4	220:80	2	(! p_sys -> b_use_pts)
cond	219:8	219:16	3	! p_sys -> b_use_pts
op	219:8	0:0	4	!
water	219:9	0:0	4	p_sys
op	219:14	0:0	4	->
water	219:16	0:0	4	b_use_pts
stmts	220:8	220:80	3	
call	220:8	220:79	4	msg_Dbg
arg	220:17	220:22	5	p_dec
water	220:17	0:0	6	p_dec
arg	220:24	220:57	5	"using dts timestamp mode for %s"
water	220:24	0:0	6	"using dts timestamp mode for %s"
arg	220:59	220:79	5	p_sys->psz_component
water	220:59	0:0	6	p_sys
op	220:64	0:0	6	->
water	220:66	0:0	6	psz_component
water	220:80	0:0	4	;
return	221:4	221:22	2	VLC_SUCCESS
water	221:11	0:0	3	VLC_SUCCESS
label	222:1	222:6	2	error :
call	223:4	223:23	2	CloseGeneric
arg	223:17	223:23	3	p_this
water	223:17	0:0	4	p_this
water	223:24	0:0	2	;
return	224:4	224:23	2	VLC_EGENERIC
water	224:11	0:0	3	VLC_EGENERIC
