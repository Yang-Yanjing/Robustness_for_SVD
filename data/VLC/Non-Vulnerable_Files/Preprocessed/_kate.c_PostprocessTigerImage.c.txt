func	2:0	42:0	0	static void	PostprocessTigerImage
params	2:33	0:0	1	
param	2:35	2:51	2	plane_t *	p_plane
param	2:53	2:74	2	unsigned int	i_width
stmnts	4:4	41:46	1	
call	4:4	4:46	2	PROFILE_START
arg	4:19	4:46	3	tiger_renderer_postprocess
water	4:19	0:0	4	tiger_renderer_postprocess
water	4:47	0:0	2	;
decl	5:4	5:9	2	int	y
for	6:4	40:4	2	(y = 0 ;y < p_plane -> i_lines;++ y)
forinit	6:9	6:12	3	y = 0 ;
water	6:9	0:0	4	y
op	6:10	0:0	4	=
water	6:11	0:0	4	0
water	6:12	0:0	4	;
cond	6:14	6:25	3	y < p_plane -> i_lines
water	6:14	0:0	4	y
op	6:15	0:0	4	<
water	6:16	0:0	4	p_plane
op	6:23	0:0	4	->
water	6:25	0:0	4	i_lines
forexpr	6:34	6:36	3	++ y
op	6:34	0:0	4	++
water	6:36	0:0	4	y
stmts	7:4	40:4	3	
water	7:4	0:0	4	{
decl	8:8	8:76	4	uint8_t	*p_line
op	8:24	0:0	4	=
call	8:26	8:75	5	(uint8_t*)
arg	8:37	8:75	6	p_plane->p_pixels+y*p_plane->i_pitch
water	8:37	0:0	7	p_plane
op	8:44	0:0	7	->
water	8:46	0:0	7	p_pixels
op	8:55	0:0	7	+
water	8:57	0:0	7	y
op	8:58	0:0	7	*
water	8:59	0:0	7	p_plane
op	8:66	0:0	7	->
water	8:68	0:0	7	i_pitch
decl	9:8	9:22	4	unsigned int	x
for	10:8	39:8	4	(x = 0 ;x < i_width;++ x)
forinit	10:13	10:16	5	x = 0 ;
water	10:13	0:0	6	x
op	10:14	0:0	6	=
water	10:15	0:0	6	0
water	10:16	0:0	6	;
cond	10:18	10:20	5	x < i_width
water	10:18	0:0	6	x
op	10:19	0:0	6	<
water	10:20	0:0	6	i_width
forexpr	10:29	10:31	5	++ x
op	10:29	0:0	6	++
water	10:31	0:0	6	x
stmts	11:8	39:8	5	
water	11:8	0:0	6	{
decl	12:12	12:41	6	uint8_t	*p_pixel
op	12:29	0:0	6	=
water	12:31	0:0	6	p_line
op	12:37	0:0	6	+
water	12:38	0:0	6	x
op	12:39	0:0	6	*
water	12:40	0:0	6	4
decl	14:12	14:34	6	uint8_t	a
op	14:22	0:0	6	=
water	14:24	0:0	6	p_pixel
op	14:31	0:0	6	[
water	14:32	0:0	6	0
op	14:33	0:0	6	]
decl	16:12	16:34	6	uint8_t	a
op	16:22	0:0	6	=
water	16:24	0:0	6	p_pixel
op	16:31	0:0	6	[
water	16:32	0:0	6	3
op	16:33	0:0	6	]
if	18:12	31:12	6	(a)
cond	18:16	18:16	7	a
water	18:16	0:0	8	a
stmts	19:12	31:12	7	
water	19:12	0:0	8	{
decl	21:16	21:40	8	uint8_t	tmp
op	21:28	0:0	8	=
water	21:30	0:0	8	p_pixel
op	21:37	0:0	8	[
water	21:38	0:0	8	2
op	21:39	0:0	8	]
water	22:16	0:0	8	p_pixel
op	22:23	0:0	8	[
water	22:24	0:0	8	0
op	22:25	0:0	8	]
op	22:27	0:0	8	=
call	22:29	22:74	8	clip_uint8_vlc
arg	22:44	22:74	9	(p_pixel[3]*255+a/2)/a
water	22:44	0:0	10	(
water	22:45	0:0	10	p_pixel
op	22:52	0:0	10	[
water	22:53	0:0	10	3
op	22:54	0:0	10	]
op	22:56	0:0	10	*
water	22:58	0:0	10	255
op	22:62	0:0	10	+
water	22:64	0:0	10	a
op	22:66	0:0	10	/
water	22:68	0:0	10	2
water	22:69	0:0	10	)
op	22:71	0:0	10	/
water	22:73	0:0	10	a
water	22:75	0:0	8	;
water	23:16	0:0	8	p_pixel
op	23:23	0:0	8	[
water	23:24	0:0	8	3
op	23:25	0:0	8	]
op	23:27	0:0	8	=
water	23:29	0:0	8	a
water	23:30	0:0	8	;
water	24:16	0:0	8	p_pixel
op	24:23	0:0	8	[
water	24:24	0:0	8	2
op	24:25	0:0	8	]
op	24:27	0:0	8	=
call	24:29	24:74	8	clip_uint8_vlc
arg	24:44	24:74	9	(p_pixel[1]*255+a/2)/a
water	24:44	0:0	10	(
water	24:45	0:0	10	p_pixel
op	24:52	0:0	10	[
water	24:53	0:0	10	1
op	24:54	0:0	10	]
op	24:56	0:0	10	*
water	24:58	0:0	10	255
op	24:62	0:0	10	+
water	24:64	0:0	10	a
op	24:66	0:0	10	/
water	24:68	0:0	10	2
water	24:69	0:0	10	)
op	24:71	0:0	10	/
water	24:73	0:0	10	a
water	24:75	0:0	8	;
water	25:16	0:0	8	p_pixel
op	25:23	0:0	8	[
water	25:24	0:0	8	1
op	25:25	0:0	8	]
op	25:27	0:0	8	=
call	25:29	25:67	8	clip_uint8_vlc
arg	25:44	25:67	9	(tmp*255+a/2)/a
water	25:44	0:0	10	(
water	25:45	0:0	10	tmp
op	25:49	0:0	10	*
water	25:51	0:0	10	255
op	25:55	0:0	10	+
water	25:57	0:0	10	a
op	25:59	0:0	10	/
water	25:61	0:0	10	2
water	25:62	0:0	10	)
op	25:64	0:0	10	/
water	25:66	0:0	10	a
water	25:68	0:0	8	;
water	27:16	0:0	8	p_pixel
op	27:23	0:0	8	[
water	27:24	0:0	8	0
op	27:25	0:0	8	]
op	27:27	0:0	8	=
call	27:29	27:74	8	clip_uint8_vlc
arg	27:44	27:74	9	(p_pixel[0]*255+a/2)/a
water	27:44	0:0	10	(
water	27:45	0:0	10	p_pixel
op	27:52	0:0	10	[
water	27:53	0:0	10	0
op	27:54	0:0	10	]
op	27:56	0:0	10	*
water	27:58	0:0	10	255
op	27:62	0:0	10	+
water	27:64	0:0	10	a
op	27:66	0:0	10	/
water	27:68	0:0	10	2
water	27:69	0:0	10	)
op	27:71	0:0	10	/
water	27:73	0:0	10	a
water	27:75	0:0	8	;
water	28:16	0:0	8	p_pixel
op	28:23	0:0	8	[
water	28:24	0:0	8	1
op	28:25	0:0	8	]
op	28:27	0:0	8	=
call	28:29	28:74	8	clip_uint8_vlc
arg	28:44	28:74	9	(p_pixel[1]*255+a/2)/a
water	28:44	0:0	10	(
water	28:45	0:0	10	p_pixel
op	28:52	0:0	10	[
water	28:53	0:0	10	1
op	28:54	0:0	10	]
op	28:56	0:0	10	*
water	28:58	0:0	10	255
op	28:62	0:0	10	+
water	28:64	0:0	10	a
op	28:66	0:0	10	/
water	28:68	0:0	10	2
water	28:69	0:0	10	)
op	28:71	0:0	10	/
water	28:73	0:0	10	a
water	28:75	0:0	8	;
water	29:16	0:0	8	p_pixel
op	29:23	0:0	8	[
water	29:24	0:0	8	2
op	29:25	0:0	8	]
op	29:27	0:0	8	=
call	29:29	29:74	8	clip_uint8_vlc
arg	29:44	29:74	9	(p_pixel[2]*255+a/2)/a
water	29:44	0:0	10	(
water	29:45	0:0	10	p_pixel
op	29:52	0:0	10	[
water	29:53	0:0	10	2
op	29:54	0:0	10	]
op	29:56	0:0	10	*
water	29:58	0:0	10	255
op	29:62	0:0	10	+
water	29:64	0:0	10	a
op	29:66	0:0	10	/
water	29:68	0:0	10	2
water	29:69	0:0	10	)
op	29:71	0:0	10	/
water	29:73	0:0	10	a
water	29:75	0:0	8	;
water	31:12	0:0	8	}
else	32:12	38:12	6
stmts	33:12	38:12	7	
water	33:12	0:0	8	{
water	34:16	0:0	8	p_pixel
op	34:23	0:0	8	[
water	34:24	0:0	8	0
op	34:25	0:0	8	]
op	34:27	0:0	8	=
water	34:29	0:0	8	0
water	34:30	0:0	8	;
water	35:16	0:0	8	p_pixel
op	35:23	0:0	8	[
water	35:24	0:0	8	1
op	35:25	0:0	8	]
op	35:27	0:0	8	=
water	35:29	0:0	8	0
water	35:30	0:0	8	;
water	36:16	0:0	8	p_pixel
op	36:23	0:0	8	[
water	36:24	0:0	8	2
op	36:25	0:0	8	]
op	36:27	0:0	8	=
water	36:29	0:0	8	0
water	36:30	0:0	8	;
water	37:16	0:0	8	p_pixel
op	37:23	0:0	8	[
water	37:24	0:0	8	3
op	37:25	0:0	8	]
op	37:27	0:0	8	=
water	37:29	0:0	8	0
water	37:30	0:0	8	;
water	38:12	0:0	8	}
water	39:8	0:0	6	}
water	40:4	0:0	4	}
call	41:4	41:45	2	PROFILE_STOP
arg	41:18	41:45	3	tiger_renderer_postprocess
water	41:18	0:0	4	tiger_renderer_postprocess
water	41:46	0:0	2	;
