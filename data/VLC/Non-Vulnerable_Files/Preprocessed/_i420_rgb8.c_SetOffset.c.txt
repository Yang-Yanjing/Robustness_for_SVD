func	2:0	70:0	0	static void	SetOffset
params	2:21	0:0	1	
param	2:23	2:34	2	int	i_width
param	2:36	2:48	2	int	i_height
param	2:50	2:65	2	int	i_pic_width
param	3:23	3:39	2	int	i_pic_height
param	3:41	3:56	2	bool *	pb_hscale
param	4:23	4:37	2	int *	pi_vscale
param	4:39	4:53	2	int *	p_offset
stmnts	0:0	69:4	1	
decl	6:4	6:11	2	int	i_x
decl	7:4	7:21	2	int	i_scale_count
if	11:4	15:4	2	(i_pic_width - i_width == 0)
cond	11:8	11:33	3	i_pic_width - i_width == 0
water	11:8	0:0	4	i_pic_width
op	11:20	0:0	4	-
water	11:22	0:0	4	i_width
op	11:30	0:0	4	==
water	11:33	0:0	4	0
stmts	12:4	15:4	3	
water	12:4	0:0	4	{
op	14:8	0:0	4	*
water	14:9	0:0	4	pb_hscale
op	14:19	0:0	4	=
water	14:21	0:0	4	0
water	14:22	0:0	4	;
water	15:4	0:0	4	}
else	16:4	34:4	2
stmts	16:9	34:4	3	
if	16:9	34:4	4	(i_pic_width - i_width > 0)
cond	16:13	16:37	5	i_pic_width - i_width > 0
water	16:13	0:0	6	i_pic_width
op	16:25	0:0	6	-
water	16:27	0:0	6	i_width
op	16:35	0:0	6	>
water	16:37	0:0	6	0
stmts	17:4	34:4	5	
water	17:4	0:0	6	{
decl	18:8	18:23	6	int	i_dummy
op	18:20	0:0	6	=
water	18:22	0:0	6	0
op	20:8	0:0	6	*
water	20:9	0:0	6	pb_hscale
op	20:19	0:0	6	=
water	20:21	0:0	6	1
water	20:22	0:0	6	;
water	21:8	0:0	6	i_scale_count
op	21:22	0:0	6	=
water	21:24	0:0	6	i_pic_width
water	21:35	0:0	6	;
for	22:8	33:8	6	(i_x = i_width ;i_x --;)
forinit	22:13	22:26	7	i_x = i_width ;
water	22:13	0:0	8	i_x
op	22:17	0:0	8	=
water	22:19	0:0	8	i_width
water	22:26	0:0	8	;
cond	22:28	22:31	7	i_x --
water	22:28	0:0	8	i_x
op	22:31	0:0	8	--
forexpr	0:0	0:0	7	
stmts	23:8	33:8	7	
water	23:8	0:0	8	{
while	24:12	28:12	8	(( i_scale_count -= i_width ) > 0)
cond	24:19	24:48	9	( i_scale_count -= i_width ) > 0
water	24:19	0:0	10	(
water	24:20	0:0	10	i_scale_count
op	24:34	0:0	10	-=
water	24:37	0:0	10	i_width
water	24:44	0:0	10	)
op	24:46	0:0	10	>
water	24:48	0:0	10	0
stmts	25:12	28:12	9	
water	25:12	0:0	10	{
op	26:16	0:0	10	*
water	26:17	0:0	10	p_offset
op	26:25	0:0	10	++
op	26:28	0:0	10	=
water	26:30	0:0	10	0
water	26:31	0:0	10	;
op	27:16	0:0	10	*
water	27:17	0:0	10	p_offset
op	27:25	0:0	10	++
op	27:28	0:0	10	=
water	27:30	0:0	10	0
water	27:31	0:0	10	;
water	28:12	0:0	10	}
op	29:12	0:0	8	*
water	29:13	0:0	8	p_offset
op	29:21	0:0	8	++
op	29:24	0:0	8	=
water	29:26	0:0	8	1
water	29:27	0:0	8	;
op	30:12	0:0	8	*
water	30:13	0:0	8	p_offset
op	30:21	0:0	8	++
op	30:24	0:0	8	=
water	30:26	0:0	8	i_dummy
water	30:33	0:0	8	;
water	31:12	0:0	8	i_dummy
op	31:20	0:0	8	=
water	31:22	0:0	8	1
op	31:24	0:0	8	-
water	31:26	0:0	8	i_dummy
water	31:33	0:0	8	;
water	32:12	0:0	8	i_scale_count
op	32:26	0:0	8	+=
water	32:29	0:0	8	i_pic_width
water	32:40	0:0	8	;
water	33:8	0:0	8	}
water	34:4	0:0	6	}
else	35:4	54:4	2
stmts	36:4	54:4	3	
water	36:4	0:0	4	{
decl	37:8	37:27	4	int	i_remainder
op	37:24	0:0	4	=
water	37:26	0:0	4	0
decl	38:8	38:18	4	int	i_jump
op	40:8	0:0	4	*
water	40:9	0:0	4	pb_hscale
op	40:19	0:0	4	=
water	40:21	0:0	4	1
water	40:22	0:0	4	;
water	41:8	0:0	4	i_scale_count
op	41:22	0:0	4	=
water	41:24	0:0	4	i_width
water	41:31	0:0	4	;
for	42:8	53:8	4	(i_x = i_pic_width ;i_x --;)
forinit	42:13	42:30	5	i_x = i_pic_width ;
water	42:13	0:0	6	i_x
op	42:17	0:0	6	=
water	42:19	0:0	6	i_pic_width
water	42:30	0:0	6	;
cond	42:32	42:35	5	i_x --
water	42:32	0:0	6	i_x
op	42:35	0:0	6	--
forexpr	0:0	0:0	5	
stmts	43:8	53:8	5	
water	43:8	0:0	6	{
water	44:12	0:0	6	i_jump
op	44:19	0:0	6	=
water	44:21	0:0	6	1
water	44:22	0:0	6	;
while	45:12	48:12	6	(( i_scale_count -= i_pic_width ) > 0)
cond	45:19	45:52	7	( i_scale_count -= i_pic_width ) > 0
water	45:19	0:0	8	(
water	45:20	0:0	8	i_scale_count
op	45:34	0:0	8	-=
water	45:37	0:0	8	i_pic_width
water	45:48	0:0	8	)
op	45:50	0:0	8	>
water	45:52	0:0	8	0
stmts	46:12	48:12	7	
water	46:12	0:0	8	{
water	47:16	0:0	8	i_jump
op	47:23	0:0	8	+=
water	47:26	0:0	8	1
water	47:27	0:0	8	;
water	48:12	0:0	8	}
op	49:12	0:0	6	*
water	49:13	0:0	6	p_offset
op	49:21	0:0	6	++
op	49:24	0:0	6	=
water	49:26	0:0	6	i_jump
water	49:32	0:0	6	;
op	50:12	0:0	6	*
water	50:13	0:0	6	p_offset
op	50:21	0:0	6	++
op	50:24	0:0	6	=
water	50:26	0:0	6	(
water	50:28	0:0	6	i_jump
op	50:35	0:0	6	+=
water	50:38	0:0	6	i_remainder
water	50:50	0:0	6	)
op	50:52	0:0	6	>>
water	50:55	0:0	6	1
water	50:56	0:0	6	;
water	51:12	0:0	6	i_remainder
op	51:24	0:0	6	=
water	51:26	0:0	6	i_jump
op	51:33	0:0	6	&
water	51:35	0:0	6	1
water	51:36	0:0	6	;
water	52:12	0:0	6	i_scale_count
op	52:26	0:0	6	+=
water	52:29	0:0	6	i_width
water	52:36	0:0	6	;
water	53:8	0:0	6	}
water	54:4	0:0	4	}
if	58:4	61:4	2	(i_pic_height - i_height == 0)
cond	58:8	58:35	3	i_pic_height - i_height == 0
water	58:8	0:0	4	i_pic_height
op	58:21	0:0	4	-
water	58:23	0:0	4	i_height
op	58:32	0:0	4	==
water	58:35	0:0	4	0
stmts	59:4	61:4	3	
water	59:4	0:0	4	{
op	60:8	0:0	4	*
water	60:9	0:0	4	pi_vscale
op	60:19	0:0	4	=
water	60:21	0:0	4	0
water	60:22	0:0	4	;
water	61:4	0:0	4	}
else	62:4	65:4	2
stmts	62:9	65:4	3	
if	62:9	65:4	4	(i_pic_height - i_height > 0)
cond	62:13	62:39	5	i_pic_height - i_height > 0
water	62:13	0:0	6	i_pic_height
op	62:26	0:0	6	-
water	62:28	0:0	6	i_height
op	62:37	0:0	6	>
water	62:39	0:0	6	0
stmts	63:4	65:4	5	
water	63:4	0:0	6	{
op	64:8	0:0	6	*
water	64:9	0:0	6	pi_vscale
op	64:19	0:0	6	=
water	64:21	0:0	6	1
water	64:22	0:0	6	;
water	65:4	0:0	6	}
else	66:4	69:4	2
stmts	67:4	69:4	3	
water	67:4	0:0	4	{
op	68:8	0:0	4	*
water	68:9	0:0	4	pi_vscale
op	68:19	0:0	4	=
op	68:21	0:0	4	-
water	68:22	0:0	4	1
water	68:23	0:0	4	;
water	69:4	0:0	4	}
