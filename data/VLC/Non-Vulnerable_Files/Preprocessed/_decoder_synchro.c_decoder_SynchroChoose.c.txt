func	2:0	124:0	0	bool	decoder_SynchroChoose
params	2:26	0:0	1	
param	2:28	2:57	2	decoder_synchro_t *	p_synchro
param	2:59	2:76	2	int	i_coding_type
param	3:31	3:48	2	int	i_render_time
param	3:50	3:67	2	bool	b_low_delay
stmnts	6:36	121:22	1	
op	6:36	0:0	2	+
water	6:38	0:0	2	(
water	6:39	0:0	2	p_synchro
op	6:48	0:0	2	->
water	6:50	0:0	2	p_tau
op	6:55	0:0	2	[
water	6:56	0:0	2	(
water	6:57	0:0	2	coding_type
water	6:68	0:0	2	)
op	6:69	0:0	2	]
op	6:71	0:0	2	>>
water	6:74	0:0	2	1
water	6:75	0:0	2	)
op	7:36	0:0	2	+
water	7:38	0:0	2	p_synchro
op	7:47	0:0	2	->
water	7:49	0:0	2	i_render_time
water	7:62	0:0	2	)
water	9:4	0:0	2	mtime_t
water	9:20	0:0	2	now
water	9:23	0:0	2	,
water	9:25	0:0	2	period
water	9:31	0:0	2	;
decl	10:4	10:23	2	mtime_t	pts
decl	11:4	11:26	2	bool	b_decode
op	11:23	0:0	2	=
water	11:25	0:0	2	0
decl	12:4	12:28	2	int	i_current_rate
if	13:4	14:16	2	(p_synchro -> b_no_skip)
cond	13:9	13:20	3	p_synchro -> b_no_skip
water	13:9	0:0	4	p_synchro
op	13:18	0:0	4	->
water	13:20	0:0	4	b_no_skip
stmts	14:8	14:16	3	
return	14:8	14:16	4	1
water	14:15	0:0	5	1
water	15:4	0:0	2	i_current_rate
op	15:19	0:0	2	=
call	15:21	15:62	2	decoder_GetDisplayRate
arg	15:45	15:62	3	p_synchro->p_dec
water	15:45	0:0	4	p_synchro
op	15:54	0:0	4	->
water	15:56	0:0	4	p_dec
water	15:63	0:0	2	;
water	16:4	0:0	2	now
op	16:8	0:0	2	=
call	16:10	16:16	2	mdate
water	16:17	0:0	2	;
water	17:4	0:0	2	period
op	17:11	0:0	2	=
water	17:13	0:0	2	CLOCK_FREQ
op	17:24	0:0	2	*
water	17:26	0:0	2	1001
op	17:31	0:0	2	/
water	17:33	0:0	2	p_synchro
op	17:42	0:0	2	->
water	17:44	0:0	2	i_frame_rate
op	18:21	0:0	2	*
water	18:23	0:0	2	i_current_rate
op	18:38	0:0	2	/
water	18:40	0:0	2	INPUT_RATE_DEFAULT
water	18:58	0:0	2	;
water	19:4	0:0	2	p_synchro
op	19:13	0:0	2	->
water	19:15	0:0	2	i_render_time
op	19:29	0:0	2	=
water	19:31	0:0	2	i_render_time
water	19:44	0:0	2	;
switch	20:4	116:4	2	(i_coding_type)
cond	20:12	20:12	3	i_coding_type
water	20:12	0:0	4	i_coding_type
stmts	21:4	116:4	3	
water	21:4	0:0	4	{
label	22:4	22:22	4	case I_CODING_TYPE :
if	23:8	26:8	4	(b_low_delay)
cond	23:12	23:12	5	b_low_delay
water	23:12	0:0	6	b_low_delay
stmts	24:8	26:8	5	
water	24:8	0:0	6	{
water	25:12	0:0	6	pts
op	25:16	0:0	6	=
call	25:18	25:74	6	decoder_GetDisplayDate
arg	25:42	25:58	7	p_synchro->p_dec
water	25:42	0:0	8	p_synchro
op	25:51	0:0	8	->
water	25:53	0:0	8	p_dec
arg	25:60	25:74	7	S.current_pts
water	25:60	0:0	8	S
op	25:61	0:0	8	.
water	25:62	0:0	8	current_pts
water	25:75	0:0	6	;
water	26:8	0:0	6	}
else	27:8	30:8	4
stmts	27:13	30:8	5	
if	27:13	30:8	6	(S . backward_pts)
cond	27:17	27:19	7	S . backward_pts
water	27:17	0:0	8	S
op	27:18	0:0	8	.
water	27:19	0:0	8	backward_pts
stmts	28:8	30:8	7	
water	28:8	0:0	8	{
water	29:12	0:0	8	pts
op	29:16	0:0	8	=
call	29:18	29:75	8	decoder_GetDisplayDate
arg	29:42	29:58	9	p_synchro->p_dec
water	29:42	0:0	10	p_synchro
op	29:51	0:0	10	->
water	29:53	0:0	10	p_dec
arg	29:60	29:75	9	S.backward_pts
water	29:60	0:0	10	S
op	29:61	0:0	10	.
water	29:62	0:0	10	backward_pts
water	29:76	0:0	8	;
water	30:8	0:0	8	}
else	31:8	39:8	4
stmts	32:8	39:8	5	
water	32:8	0:0	6	{
water	38:12	0:0	6	pts
op	38:16	0:0	6	=
call	38:18	38:74	6	decoder_GetDisplayDate
arg	38:42	38:58	7	p_synchro->p_dec
water	38:42	0:0	8	p_synchro
op	38:51	0:0	8	->
water	38:53	0:0	8	p_dec
arg	38:60	38:74	7	S.current_pts
water	38:60	0:0	8	S
op	38:61	0:0	8	.
water	38:62	0:0	8	current_pts
op	38:76	0:0	6	+
water	38:78	0:0	6	period
op	38:85	0:0	6	*
water	38:87	0:0	6	(
water	38:88	0:0	6	S
op	38:89	0:0	6	.
water	38:90	0:0	6	i_n_b
op	38:96	0:0	6	+
water	38:98	0:0	6	2
water	38:99	0:0	6	)
water	38:100	0:0	6	;
water	39:8	0:0	6	}
if	40:8	43:8	4	(( 1 + S . i_n_p * ( S . i_n_b + 1 ) ) * period > S . p_tau [ I_CODING_TYPE ])
cond	40:12	40:74	5	( 1 + S . i_n_p * ( S . i_n_b + 1 ) ) * period > S . p_tau [ I_CODING_TYPE ]
water	40:12	0:0	6	(
water	40:13	0:0	6	1
op	40:15	0:0	6	+
water	40:17	0:0	6	S
op	40:18	0:0	6	.
water	40:19	0:0	6	i_n_p
op	40:25	0:0	6	*
water	40:27	0:0	6	(
water	40:28	0:0	6	S
op	40:29	0:0	6	.
water	40:30	0:0	6	i_n_b
op	40:36	0:0	6	+
water	40:38	0:0	6	1
water	40:39	0:0	6	)
water	40:40	0:0	6	)
op	40:42	0:0	6	*
water	40:44	0:0	6	period
op	40:51	0:0	6	>
water	40:53	0:0	6	S
op	40:54	0:0	6	.
water	40:55	0:0	6	p_tau
op	40:60	0:0	6	[
water	40:61	0:0	6	I_CODING_TYPE
op	40:74	0:0	6	]
stmts	41:8	43:8	5	
water	41:8	0:0	6	{
water	42:12	0:0	6	b_decode
op	42:21	0:0	6	=
water	42:23	0:0	6	1
water	42:24	0:0	6	;
water	43:8	0:0	6	}
else	44:8	47:8	4
stmts	45:8	47:8	5	
water	45:8	0:0	6	{
water	46:12	0:0	6	b_decode
op	46:21	0:0	6	=
water	46:23	0:0	6	(
water	46:24	0:0	6	pts
op	46:28	0:0	6	-
water	46:30	0:0	6	now
water	46:33	0:0	6	)
op	46:35	0:0	6	>
water	46:37	0:0	6	(
call	46:38	46:61	6	TAU_PRIME
arg	46:48	46:61	7	I_CODING_TYPE
water	46:48	0:0	8	I_CODING_TYPE
op	46:63	0:0	6	+
water	46:65	0:0	6	DELTA
water	46:70	0:0	6	)
water	46:71	0:0	6	;
water	47:8	0:0	6	}
if	48:8	49:24	4	(pts <= VLC_TS_INVALID)
cond	48:12	48:19	5	pts <= VLC_TS_INVALID
water	48:12	0:0	6	pts
op	48:16	0:0	6	<=
water	48:19	0:0	6	VLC_TS_INVALID
stmts	49:12	49:24	5	
water	49:12	0:0	6	b_decode
op	49:21	0:0	6	=
water	49:23	0:0	6	1
water	49:24	0:0	6	;
if	50:8	54:8	4	(! b_decode && ! p_synchro -> b_quiet)
cond	50:12	50:37	5	! b_decode && ! p_synchro -> b_quiet
op	50:12	0:0	6	!
water	50:13	0:0	6	b_decode
op	50:22	0:0	6	&&
op	50:25	0:0	6	!
water	50:26	0:0	6	p_synchro
op	50:35	0:0	6	->
water	50:37	0:0	6	b_quiet
stmts	51:8	54:8	5	
water	51:8	0:0	6	{
call	52:12	53:66	6	msg_Warn
arg	52:22	52:38	7	p_synchro->p_dec
water	52:22	0:0	8	p_synchro
op	52:31	0:0	8	->
water	52:33	0:0	8	p_dec
arg	53:22	53:54	7	"synchro trashing I (%"PRId64")"
water	53:22	0:0	8	"synchro trashing I (%"
water	53:45	0:0	8	PRId64
water	53:51	0:0	8	")"
arg	53:56	53:66	7	pts-now
water	53:56	0:0	8	pts
op	53:60	0:0	8	-
water	53:62	0:0	8	now
water	53:67	0:0	6	;
water	54:8	0:0	6	}
break	55:8	55:13	4	
label	56:4	56:22	4	case P_CODING_TYPE :
if	57:8	60:8	4	(b_low_delay)
cond	57:12	57:12	5	b_low_delay
water	57:12	0:0	6	b_low_delay
stmts	58:8	60:8	5	
water	58:8	0:0	6	{
water	59:12	0:0	6	pts
op	59:16	0:0	6	=
call	59:18	59:74	6	decoder_GetDisplayDate
arg	59:42	59:58	7	p_synchro->p_dec
water	59:42	0:0	8	p_synchro
op	59:51	0:0	8	->
water	59:53	0:0	8	p_dec
arg	59:60	59:74	7	S.current_pts
water	59:60	0:0	8	S
op	59:61	0:0	8	.
water	59:62	0:0	8	current_pts
water	59:75	0:0	6	;
water	60:8	0:0	6	}
else	61:8	64:8	4
stmts	61:13	64:8	5	
if	61:13	64:8	6	(S . backward_pts)
cond	61:17	61:19	7	S . backward_pts
water	61:17	0:0	8	S
op	61:18	0:0	8	.
water	61:19	0:0	8	backward_pts
stmts	62:8	64:8	7	
water	62:8	0:0	8	{
water	63:12	0:0	8	pts
op	63:16	0:0	8	=
call	63:18	63:75	8	decoder_GetDisplayDate
arg	63:42	63:58	9	p_synchro->p_dec
water	63:42	0:0	10	p_synchro
op	63:51	0:0	10	->
water	63:53	0:0	10	p_dec
arg	63:60	63:75	9	S.backward_pts
water	63:60	0:0	10	S
op	63:61	0:0	10	.
water	63:62	0:0	10	backward_pts
water	63:76	0:0	8	;
water	64:8	0:0	8	}
else	65:8	68:8	4
stmts	66:8	68:8	5	
water	66:8	0:0	6	{
water	67:12	0:0	6	pts
op	67:16	0:0	6	=
call	67:18	67:99	6	decoder_GetDisplayDate
arg	67:42	67:58	7	p_synchro->p_dec
water	67:42	0:0	8	p_synchro
op	67:51	0:0	8	->
water	67:53	0:0	8	p_dec
arg	67:60	67:99	7	S.current_pts+period*(S.i_n_b+1)
water	67:60	0:0	8	S
op	67:61	0:0	8	.
water	67:62	0:0	8	current_pts
op	67:74	0:0	8	+
water	67:76	0:0	8	period
op	67:83	0:0	8	*
water	67:85	0:0	8	(
water	67:86	0:0	8	S
op	67:87	0:0	8	.
water	67:88	0:0	8	i_n_b
op	67:94	0:0	8	+
water	67:96	0:0	8	1
water	67:97	0:0	8	)
water	67:100	0:0	6	;
water	68:8	0:0	6	}
if	69:8	72:8	4	(p_synchro -> i_nb_ref < 1)
cond	69:12	69:34	5	p_synchro -> i_nb_ref < 1
water	69:12	0:0	6	p_synchro
op	69:21	0:0	6	->
water	69:23	0:0	6	i_nb_ref
op	69:32	0:0	6	<
water	69:34	0:0	6	1
stmts	70:8	72:8	5	
water	70:8	0:0	6	{
water	71:12	0:0	6	b_decode
op	71:21	0:0	6	=
water	71:23	0:0	6	0
water	71:24	0:0	6	;
water	72:8	0:0	6	}
else	73:8	91:8	4
stmts	73:13	91:8	5	
if	73:13	91:8	6	(( 1 + S . i_n_p * ( S . i_n_b + 1 ) ) * period > S . p_tau [ I_CODING_TYPE ])
cond	73:17	74:37	7	( 1 + S . i_n_p * ( S . i_n_b + 1 ) ) * period > S . p_tau [ I_CODING_TYPE ]
water	73:17	0:0	8	(
water	73:18	0:0	8	1
op	73:20	0:0	8	+
water	73:22	0:0	8	S
op	73:23	0:0	8	.
water	73:24	0:0	8	i_n_p
op	73:30	0:0	8	*
water	73:32	0:0	8	(
water	73:33	0:0	8	S
op	73:34	0:0	8	.
water	73:35	0:0	8	i_n_b
op	73:41	0:0	8	+
water	73:43	0:0	8	1
water	73:44	0:0	8	)
water	73:45	0:0	8	)
op	73:47	0:0	8	*
water	73:49	0:0	8	period
op	73:56	0:0	8	>
water	74:16	0:0	8	S
op	74:17	0:0	8	.
water	74:18	0:0	8	p_tau
op	74:23	0:0	8	[
water	74:24	0:0	8	I_CODING_TYPE
op	74:37	0:0	8	]
stmts	75:8	91:8	7	
water	75:8	0:0	8	{
if	76:12	80:12	8	(( S . i_n_b + 1 ) * period > S . p_tau [ P_CODING_TYPE ])
cond	76:16	76:62	9	( S . i_n_b + 1 ) * period > S . p_tau [ P_CODING_TYPE ]
water	76:16	0:0	10	(
water	76:17	0:0	10	S
op	76:18	0:0	10	.
water	76:19	0:0	10	i_n_b
op	76:25	0:0	10	+
water	76:27	0:0	10	1
water	76:28	0:0	10	)
op	76:30	0:0	10	*
water	76:32	0:0	10	period
op	76:39	0:0	10	>
water	76:41	0:0	10	S
op	76:42	0:0	10	.
water	76:43	0:0	10	p_tau
op	76:48	0:0	10	[
water	76:49	0:0	10	P_CODING_TYPE
op	76:62	0:0	10	]
stmts	77:12	80:12	9	
water	77:12	0:0	10	{
water	79:16	0:0	10	b_decode
op	79:25	0:0	10	=
water	79:27	0:0	10	(
water	79:28	0:0	10	pts
op	79:32	0:0	10	-
water	79:34	0:0	10	now
op	79:38	0:0	10	>
water	79:40	0:0	10	0
water	79:41	0:0	10	)
water	79:42	0:0	10	;
water	80:12	0:0	10	}
else	81:12	90:12	8
stmts	82:12	90:12	9	
water	82:12	0:0	10	{
water	83:16	0:0	10	b_decode
op	83:25	0:0	10	=
water	83:27	0:0	10	(
water	83:28	0:0	10	pts
op	83:32	0:0	10	-
water	83:34	0:0	10	now
water	83:37	0:0	10	)
op	83:39	0:0	10	>
water	83:41	0:0	10	(
call	83:42	83:65	10	TAU_PRIME
arg	83:52	83:65	11	P_CODING_TYPE
water	83:52	0:0	12	P_CODING_TYPE
op	83:67	0:0	10	+
water	83:69	0:0	10	DELTA
water	83:74	0:0	10	)
water	83:75	0:0	10	;
water	85:16	0:0	10	b_decode
op	85:25	0:0	10	&=
water	85:28	0:0	10	(
water	85:29	0:0	10	pts
op	85:33	0:0	10	-
water	85:35	0:0	10	now
op	86:30	0:0	10	+
water	86:32	0:0	10	period
op	87:26	0:0	10	*
water	87:28	0:0	10	(
water	87:30	0:0	10	(
water	87:31	0:0	10	S
op	87:32	0:0	10	.
water	87:33	0:0	10	i_n_p
op	87:39	0:0	10	-
water	87:41	0:0	10	S
op	87:42	0:0	10	.
water	87:43	0:0	10	i_eta_p
water	87:50	0:0	10	)
op	87:52	0:0	10	*
water	87:54	0:0	10	(
water	87:55	0:0	10	1
op	87:57	0:0	10	+
water	87:59	0:0	10	S
op	87:60	0:0	10	.
water	87:61	0:0	10	i_n_b
water	87:66	0:0	10	)
op	87:68	0:0	10	-
water	87:70	0:0	10	1
water	87:72	0:0	10	)
water	87:73	0:0	10	)
op	88:28	0:0	10	>
water	88:30	0:0	10	(
call	88:31	88:54	10	TAU_PRIME
arg	88:41	88:54	11	P_CODING_TYPE
water	88:41	0:0	12	P_CODING_TYPE
op	89:32	0:0	10	+
call	89:34	89:57	10	TAU_PRIME
arg	89:44	89:57	11	I_CODING_TYPE
water	89:44	0:0	12	I_CODING_TYPE
op	89:59	0:0	10	+
water	89:61	0:0	10	DELTA
water	89:66	0:0	10	)
water	89:67	0:0	10	;
water	90:12	0:0	10	}
water	91:8	0:0	8	}
else	92:8	95:8	4
stmts	93:8	95:8	5	
water	93:8	0:0	6	{
water	94:12	0:0	6	b_decode
op	94:21	0:0	6	=
water	94:23	0:0	6	0
water	94:24	0:0	6	;
water	95:8	0:0	6	}
if	96:8	97:24	4	(p_synchro -> i_nb_ref >= 1 && pts <= VLC_TS_INVALID)
cond	96:12	96:47	5	p_synchro -> i_nb_ref >= 1 && pts <= VLC_TS_INVALID
water	96:12	0:0	6	p_synchro
op	96:21	0:0	6	->
water	96:23	0:0	6	i_nb_ref
op	96:32	0:0	6	>=
water	96:35	0:0	6	1
op	96:37	0:0	6	&&
water	96:40	0:0	6	pts
op	96:44	0:0	6	<=
water	96:47	0:0	6	VLC_TS_INVALID
stmts	97:12	97:24	5	
water	97:12	0:0	6	b_decode
op	97:21	0:0	6	=
water	97:23	0:0	6	1
water	97:24	0:0	6	;
break	98:8	98:13	4	
label	99:4	99:22	4	case B_CODING_TYPE :
water	100:8	0:0	4	pts
op	100:12	0:0	4	=
call	100:14	100:70	4	decoder_GetDisplayDate
arg	100:38	100:54	5	p_synchro->p_dec
water	100:38	0:0	6	p_synchro
op	100:47	0:0	6	->
water	100:49	0:0	6	p_dec
arg	100:56	100:70	5	S.current_pts
water	100:56	0:0	6	S
op	100:57	0:0	6	.
water	100:58	0:0	6	current_pts
water	100:71	0:0	4	;
if	101:8	104:8	4	(p_synchro -> i_nb_ref < 2)
cond	101:12	101:34	5	p_synchro -> i_nb_ref < 2
water	101:12	0:0	6	p_synchro
op	101:21	0:0	6	->
water	101:23	0:0	6	i_nb_ref
op	101:32	0:0	6	<
water	101:34	0:0	6	2
stmts	102:8	104:8	5	
water	102:8	0:0	6	{
water	103:12	0:0	6	b_decode
op	103:21	0:0	6	=
water	103:23	0:0	6	0
water	103:24	0:0	6	;
water	104:8	0:0	6	}
else	105:8	108:8	4
stmts	105:13	108:8	5	
if	105:13	108:8	6	(( S . i_n_b + 1 ) * period > S . p_tau [ P_CODING_TYPE ])
cond	105:17	105:63	7	( S . i_n_b + 1 ) * period > S . p_tau [ P_CODING_TYPE ]
water	105:17	0:0	8	(
water	105:18	0:0	8	S
op	105:19	0:0	8	.
water	105:20	0:0	8	i_n_b
op	105:26	0:0	8	+
water	105:28	0:0	8	1
water	105:29	0:0	8	)
op	105:31	0:0	8	*
water	105:33	0:0	8	period
op	105:40	0:0	8	>
water	105:42	0:0	8	S
op	105:43	0:0	8	.
water	105:44	0:0	8	p_tau
op	105:49	0:0	8	[
water	105:50	0:0	8	P_CODING_TYPE
op	105:63	0:0	8	]
stmts	106:8	108:8	7	
water	106:8	0:0	8	{
water	107:12	0:0	8	b_decode
op	107:21	0:0	8	=
water	107:23	0:0	8	(
water	107:24	0:0	8	pts
op	107:28	0:0	8	-
water	107:30	0:0	8	now
water	107:33	0:0	8	)
op	107:35	0:0	8	>
water	107:37	0:0	8	(
call	107:38	107:61	8	TAU_PRIME
arg	107:48	107:61	9	B_CODING_TYPE
water	107:48	0:0	10	B_CODING_TYPE
op	107:63	0:0	8	+
water	107:65	0:0	8	DELTA
water	107:70	0:0	8	)
water	107:71	0:0	8	;
water	108:8	0:0	8	}
else	109:8	112:8	4
stmts	110:8	112:8	5	
water	110:8	0:0	6	{
water	111:12	0:0	6	b_decode
op	111:21	0:0	6	=
water	111:23	0:0	6	0
water	111:24	0:0	6	;
water	112:8	0:0	6	}
if	113:8	114:24	4	(p_synchro -> i_nb_ref >= 2 && pts <= VLC_TS_INVALID)
cond	113:12	113:47	5	p_synchro -> i_nb_ref >= 2 && pts <= VLC_TS_INVALID
water	113:12	0:0	6	p_synchro
op	113:21	0:0	6	->
water	113:23	0:0	6	i_nb_ref
op	113:32	0:0	6	>=
water	113:35	0:0	6	2
op	113:37	0:0	6	&&
water	113:40	0:0	6	pts
op	113:44	0:0	6	<=
water	113:47	0:0	6	VLC_TS_INVALID
stmts	114:12	114:24	5	
water	114:12	0:0	6	b_decode
op	114:21	0:0	6	=
water	114:23	0:0	6	1
water	114:24	0:0	6	;
break	115:8	115:13	4	
water	116:4	0:0	4	}
if	117:4	120:4	2	(! b_decode)
cond	117:8	117:9	3	! b_decode
op	117:8	0:0	4	!
water	117:9	0:0	4	b_decode
stmts	118:4	120:4	3	
water	118:4	0:0	4	{
water	119:8	0:0	4	S
op	119:9	0:0	4	.
water	119:10	0:0	4	i_not_chosen_pic
op	119:26	0:0	4	++
water	119:28	0:0	4	;
water	120:4	0:0	4	}
return	121:4	121:22	2	(b_decode)
water	121:10	0:0	3	(
water	121:12	0:0	3	b_decode
water	121:21	0:0	3	)
