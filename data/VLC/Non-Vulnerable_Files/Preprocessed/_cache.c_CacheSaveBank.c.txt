decl	1:7	1:56	0	int	CacheSaveSubmodule
water	1:30	0:0	0	(
water	1:31	0:0	0	FILE
op	1:36	0:0	0	*
water	1:37	0:0	0	,
water	1:39	0:0	0	const
water	1:45	0:0	0	module_t
op	1:54	0:0	0	*
water	1:55	0:0	0	)
func	2:0	57:0	0	static int	CacheSaveBank
params	2:25	0:0	1	
param	2:26	2:36	2	FILE *	file
param	2:38	2:65	2	const module_cache_t *	cache
param	3:26	3:40	2	size_t	i_cache
stmnts	0:0	56:13	1	
decl	5:4	5:28	2	uint32_t	i_file_size
op	5:25	0:0	2	=
water	5:27	0:0	2	0
if	7:4	8:18	2	(fputs (CACHE_STRING ,file ) == EOF)
cond	7:8	7:38	3	fputs (CACHE_STRING ,file ) == EOF
call	7:8	7:33	4	fputs
arg	7:15	7:27	5	CACHE_STRING
water	7:15	0:0	6	CACHE_STRING
arg	7:29	7:33	5	file
water	7:29	0:0	6	file
op	7:35	0:0	4	==
water	7:38	0:0	4	EOF
stmts	8:8	8:18	3	
goto	8:8	8:18	4	error
water	8:13	0:0	5	error
if	11:4	12:18	2	(fputs (DISTRO_VERSION ,file ) == EOF)
cond	11:8	11:41	3	fputs (DISTRO_VERSION ,file ) == EOF
call	11:8	11:36	4	fputs
arg	11:15	11:29	5	DISTRO_VERSION
water	11:15	0:0	6	DISTRO_VERSION
arg	11:31	11:36	5	file
water	11:31	0:0	6	file
op	11:38	0:0	4	==
water	11:41	0:0	4	EOF
stmts	12:8	12:18	3	
goto	12:8	12:18	4	error
water	12:13	0:0	5	error
water	16:4	0:0	2	i_file_size
op	16:16	0:0	2	=
water	16:18	0:0	2	CACHE_SUBVERSION_NUM
water	16:38	0:0	2	;
if	17:4	18:18	2	(fwrite (& i_file_size ,sizeof ( i_file_size ) ,1 ,file ) != 1)
cond	17:8	17:64	3	fwrite (& i_file_size ,sizeof ( i_file_size ) ,1 ,file ) != 1
call	17:8	17:59	4	fwrite
arg	17:16	17:28	5	&i_file_size
op	17:16	0:0	6	&
water	17:17	0:0	6	i_file_size
arg	17:30	17:50	5	sizeof(i_file_size)
op	17:30	0:0	6	sizeof
water	17:37	0:0	6	(
water	17:38	0:0	6	i_file_size
water	17:49	0:0	6	)
arg	17:52	17:53	5	1
water	17:52	0:0	6	1
arg	17:55	17:59	5	file
water	17:55	0:0	6	file
op	17:61	0:0	4	!=
water	17:64	0:0	4	1
stmts	18:8	18:18	3	
goto	18:8	18:18	4	error
water	18:13	0:0	5	error
water	20:4	0:0	2	i_file_size
op	20:16	0:0	2	=
call	20:18	20:30	2	ftell
arg	20:25	20:30	3	file
water	20:25	0:0	4	file
water	20:31	0:0	2	;
if	21:4	22:18	2	(fwrite (& i_file_size ,sizeof ( i_file_size ) ,1 ,file ) != 1)
cond	21:8	21:64	3	fwrite (& i_file_size ,sizeof ( i_file_size ) ,1 ,file ) != 1
call	21:8	21:59	4	fwrite
arg	21:16	21:28	5	&i_file_size
op	21:16	0:0	6	&
water	21:17	0:0	6	i_file_size
arg	21:30	21:50	5	sizeof(i_file_size)
op	21:30	0:0	6	sizeof
water	21:37	0:0	6	(
water	21:38	0:0	6	i_file_size
water	21:49	0:0	6	)
arg	21:52	21:53	5	1
water	21:52	0:0	6	1
arg	21:55	21:59	5	file
water	21:55	0:0	6	file
op	21:61	0:0	4	!=
water	21:64	0:0	4	1
stmts	22:8	22:18	3	
goto	22:8	22:18	4	error
water	22:13	0:0	5	error
if	23:4	24:18	2	(fwrite (& i_cache ,sizeof ( i_cache ) ,1 ,file ) != 1)
cond	23:8	23:56	3	fwrite (& i_cache ,sizeof ( i_cache ) ,1 ,file ) != 1
call	23:8	23:51	4	fwrite
arg	23:16	23:24	5	&i_cache
op	23:16	0:0	6	&
water	23:17	0:0	6	i_cache
arg	23:26	23:42	5	sizeof(i_cache)
op	23:26	0:0	6	sizeof
water	23:33	0:0	6	(
water	23:34	0:0	6	i_cache
water	23:41	0:0	6	)
arg	23:44	23:45	5	1
water	23:44	0:0	6	1
arg	23:47	23:51	5	file
water	23:47	0:0	6	file
op	23:53	0:0	4	!=
water	23:56	0:0	4	1
stmts	24:8	24:18	3	
goto	24:8	24:18	4	error
water	24:13	0:0	5	error
for	25:4	51:4	2	(unsigned i = 0 ;i < i_cache;i ++)
forinit	25:9	25:23	3	unsigned i = 0 ;
water	25:9	0:0	4	unsigned
water	25:18	0:0	4	i
op	25:20	0:0	4	=
water	25:22	0:0	4	0
water	25:23	0:0	4	;
cond	25:25	25:29	3	i < i_cache
water	25:25	0:0	4	i
op	25:27	0:0	4	<
water	25:29	0:0	4	i_cache
forexpr	25:38	25:39	3	i ++
water	25:38	0:0	4	i
op	25:39	0:0	4	++
stmts	26:4	51:4	3	
water	26:4	0:0	4	{
decl	27:8	27:44	4	module_t	*module
op	27:25	0:0	4	=
water	27:27	0:0	4	cache
op	27:32	0:0	4	[
water	27:33	0:0	4	i
op	27:34	0:0	4	]
op	27:35	0:0	4	.
water	27:36	0:0	4	p_module
decl	28:8	28:28	4	uint32_t	i_submodule
call	30:8	30:41	4	SAVE_STRING
arg	30:20	30:41	5	module->psz_shortname
water	30:20	0:0	6	module
op	30:26	0:0	6	->
water	30:28	0:0	6	psz_shortname
water	30:42	0:0	4	;
call	31:8	31:40	4	SAVE_STRING
arg	31:20	31:40	5	module->psz_longname
water	31:20	0:0	6	module
op	31:26	0:0	6	->
water	31:28	0:0	6	psz_longname
water	31:41	0:0	4	;
call	32:8	32:36	4	SAVE_STRING
arg	32:20	32:36	5	module->psz_help
water	32:20	0:0	6	module
op	32:26	0:0	6	->
water	32:28	0:0	6	psz_help
water	32:37	0:0	4	;
call	33:8	33:42	4	SAVE_IMMEDIATE
arg	33:23	33:42	5	module->i_shortcuts
water	33:23	0:0	6	module
op	33:29	0:0	6	->
water	33:31	0:0	6	i_shortcuts
water	33:43	0:0	4	;
for	34:8	35:48	4	(unsigned j = 0 ;j < module -> i_shortcuts;j ++)
forinit	34:13	34:27	5	unsigned j = 0 ;
water	34:13	0:0	6	unsigned
water	34:22	0:0	6	j
op	34:24	0:0	6	=
water	34:26	0:0	6	0
water	34:27	0:0	6	;
cond	34:29	34:41	5	j < module -> i_shortcuts
water	34:29	0:0	6	j
op	34:31	0:0	6	<
water	34:33	0:0	6	module
op	34:39	0:0	6	->
water	34:41	0:0	6	i_shortcuts
forexpr	34:54	34:55	5	j ++
water	34:54	0:0	6	j
op	34:55	0:0	6	++
stmts	35:12	35:48	5	
call	35:12	35:47	6	SAVE_STRING
arg	35:24	35:47	7	module->pp_shortcuts[j]
water	35:24	0:0	8	module
op	35:30	0:0	8	->
water	35:32	0:0	8	pp_shortcuts
op	35:44	0:0	8	[
water	35:45	0:0	8	j
op	35:46	0:0	8	]
water	35:48	0:0	6	;
call	36:8	36:42	4	SAVE_STRING
arg	36:20	36:42	5	module->psz_capability
water	36:20	0:0	6	module
op	36:26	0:0	6	->
water	36:28	0:0	6	psz_capability
water	36:43	0:0	4	;
call	37:8	37:38	4	SAVE_IMMEDIATE
arg	37:23	37:38	5	module->i_score
water	37:23	0:0	6	module
op	37:29	0:0	6	->
water	37:31	0:0	6	i_score
water	37:39	0:0	4	;
call	38:8	38:43	4	SAVE_IMMEDIATE
arg	38:23	38:43	5	module->b_unloadable
water	38:23	0:0	6	module
op	38:29	0:0	6	->
water	38:31	0:0	6	b_unloadable
water	38:44	0:0	4	;
if	40:8	41:22	4	(CacheSaveModuleConfig (file ,module ))
cond	40:12	40:47	5	CacheSaveModuleConfig (file ,module )
call	40:12	40:47	6	CacheSaveModuleConfig
arg	40:35	40:39	7	file
water	40:35	0:0	8	file
arg	40:41	40:47	7	module
water	40:41	0:0	8	module
stmts	41:12	41:22	5	
goto	41:12	41:22	6	error
water	41:17	0:0	7	error
call	42:8	42:34	4	SAVE_STRING
arg	42:20	42:34	5	module->domain
water	42:20	0:0	6	module
op	42:26	0:0	6	->
water	42:28	0:0	6	domain
water	42:35	0:0	4	;
water	43:8	0:0	4	i_submodule
op	43:20	0:0	4	=
water	43:22	0:0	4	module
op	43:28	0:0	4	->
water	43:30	0:0	4	submodule_count
water	43:45	0:0	4	;
call	44:8	44:36	4	SAVE_IMMEDIATE
arg	44:24	44:36	5	i_submodule
water	44:24	0:0	6	i_submodule
water	44:37	0:0	4	;
if	45:8	46:22	4	(CacheSaveSubmodule (file ,module -> submodule ))
cond	45:12	45:55	5	CacheSaveSubmodule (file ,module -> submodule )
call	45:12	45:55	6	CacheSaveSubmodule
arg	45:32	45:36	7	file
water	45:32	0:0	8	file
arg	45:38	45:55	7	module->submodule
water	45:38	0:0	8	module
op	45:44	0:0	8	->
water	45:46	0:0	8	submodule
stmts	46:12	46:22	5	
goto	46:12	46:22	6	error
water	46:17	0:0	7	error
call	48:8	48:33	4	SAVE_STRING
arg	48:20	48:33	5	cache[i].path
water	48:20	0:0	6	cache
op	48:25	0:0	6	[
water	48:26	0:0	6	i
op	48:27	0:0	6	]
op	48:28	0:0	6	.
water	48:29	0:0	6	path
water	48:34	0:0	4	;
call	49:8	49:37	4	SAVE_IMMEDIATE
arg	49:23	49:37	5	cache[i].mtime
water	49:23	0:0	6	cache
op	49:28	0:0	6	[
water	49:29	0:0	6	i
op	49:30	0:0	6	]
op	49:31	0:0	6	.
water	49:32	0:0	6	mtime
water	49:38	0:0	4	;
call	50:8	50:36	4	SAVE_IMMEDIATE
arg	50:23	50:36	5	cache[i].size
water	50:23	0:0	6	cache
op	50:28	0:0	6	[
water	50:29	0:0	6	i
op	50:30	0:0	6	]
op	50:31	0:0	6	.
water	50:32	0:0	6	size
water	50:37	0:0	4	;
water	51:4	0:0	4	}
if	52:4	53:18	2	(fflush (file ))
cond	52:8	52:20	3	fflush (file )
call	52:8	52:20	4	fflush
arg	52:16	52:20	5	file
water	52:16	0:0	6	file
stmts	53:8	53:18	3	
goto	53:8	53:18	4	error
water	53:13	0:0	5	error
return	54:4	54:12	2	0
water	54:11	0:0	3	0
label	55:0	55:5	2	error :
return	56:4	56:13	2	-1
op	56:11	0:0	3	-
water	56:12	0:0	3	1
