func	2:0	146:0	0	static int	Open
params	2:15	0:0	1	
param	2:17	2:38	2	vlc_object_t *	p_this
stmnts	0:0	145:22	1	
decl	4:4	4:48	2	access_t	*p_access
op	4:29	0:0	2	=
water	4:31	0:0	2	(
water	4:32	0:0	2	access_t
op	4:40	0:0	2	*
water	4:41	0:0	2	)
water	4:42	0:0	2	p_this
decl	5:4	5:32	2	access_sys_t	*p_sys
op	5:26	0:0	2	=
water	5:28	0:0	2	NULL
decl	6:4	6:35	2	char	*psz_name
op	6:29	0:0	2	=
water	6:31	0:0	2	NULL
decl	7:4	7:34	2	char	*psz_uri
op	7:28	0:0	2	=
water	7:30	0:0	2	NULL
decl	8:4	8:40	2	char	*psz_unescaped
op	8:34	0:0	2	=
water	8:36	0:0	2	NULL
decl	9:4	9:43	2	char	*psz_expand_tilde
op	9:37	0:0	2	=
water	9:39	0:0	2	NULL
decl	10:4	10:32	2	GnomeVFSURI	*p_uri
op	10:26	0:0	2	=
water	10:28	0:0	2	NULL
decl	11:4	11:25	2	GnomeVFSResult	i_ret
decl	12:4	12:35	2	GnomeVFSHandle	*p_handle
op	12:29	0:0	2	=
water	12:31	0:0	2	NULL
if	13:4	17:4	2	(! (gnome_vfs_init ( ) ))
cond	13:8	13:26	3	! (gnome_vfs_init ( ) )
op	13:8	0:0	4	!
water	13:9	0:0	4	(
call	13:10	13:25	4	gnome_vfs_init
water	13:26	0:0	4	)
stmts	14:4	17:4	3	
water	14:4	0:0	4	{
call	15:8	15:58	4	msg_Warn
arg	15:18	15:26	5	p_access
water	15:18	0:0	6	p_access
arg	15:28	15:58	5	"couldn't initilize GnomeVFS"
water	15:28	0:0	6	"couldn't initilize GnomeVFS"
water	15:59	0:0	4	;
return	16:8	16:27	4	VLC_EGENERIC
water	16:15	0:0	5	VLC_EGENERIC
water	17:4	0:0	4	}
call	21:4	21:44	2	gnome_vfs_open
arg	21:20	21:29	3	&p_handle
op	21:20	0:0	4	&
water	21:21	0:0	4	p_handle
arg	21:31	21:40	3	"file://"
water	21:31	0:0	4	"file://"
arg	21:42	21:44	3	5
water	21:42	0:0	4	5
water	21:45	0:0	2	;
water	22:4	0:0	2	STANDARD_READ_ACCESS_INIT
water	22:29	0:0	2	;
water	23:4	0:0	2	p_sys
op	23:9	0:0	2	->
water	23:11	0:0	2	p_handle
op	23:20	0:0	2	=
water	23:22	0:0	2	p_handle
water	23:30	0:0	2	;
water	24:4	0:0	2	p_sys
op	24:9	0:0	2	->
water	24:11	0:0	2	b_pace_control
op	24:26	0:0	2	=
water	24:28	0:0	2	true
water	24:32	0:0	2	;
if	25:4	30:4	2	(strcmp ("gnomevfs" ,p_access -> psz_access ) && * ( p_access -> psz_access ) != '\0')
cond	25:8	26:71	3	strcmp ("gnomevfs" ,p_access -> psz_access ) && * ( p_access -> psz_access ) != '\0'
call	25:8	25:49	4	strcmp
arg	25:16	25:26	5	"gnomevfs"
water	25:16	0:0	6	"gnomevfs"
arg	25:28	25:49	5	p_access->psz_access
water	25:28	0:0	6	p_access
op	25:36	0:0	6	->
water	25:38	0:0	6	psz_access
op	25:51	0:0	4	&&
op	26:44	0:0	4	*
water	26:45	0:0	4	(
water	26:46	0:0	4	p_access
op	26:54	0:0	4	->
water	26:56	0:0	4	psz_access
water	26:66	0:0	4	)
op	26:68	0:0	4	!=
water	26:71	0:0	4	'\0'
stmts	27:4	30:4	3	
water	27:4	0:0	4	{
call	28:8	29:41	4	asprintf
arg	28:18	28:27	5	&psz_name
op	28:18	0:0	6	&
water	28:19	0:0	6	psz_name
arg	28:29	28:38	5	"%s://%s"
water	28:29	0:0	6	"%s://%s"
arg	28:40	28:60	5	p_access->psz_access
water	28:40	0:0	6	p_access
op	28:48	0:0	6	->
water	28:50	0:0	6	psz_access
arg	29:18	29:41	5	p_access->psz_location
water	29:18	0:0	6	p_access
op	29:26	0:0	6	->
water	29:28	0:0	6	psz_location
water	29:42	0:0	4	;
water	30:4	0:0	4	}
else	31:4	34:4	2
stmts	32:4	34:4	3	
water	32:4	0:0	4	{
water	33:8	0:0	4	psz_name
op	33:17	0:0	4	=
call	33:19	33:50	4	strdup
arg	33:27	33:50	5	p_access->psz_location
water	33:27	0:0	6	p_access
op	33:35	0:0	6	->
water	33:37	0:0	6	psz_location
water	33:51	0:0	4	;
water	34:4	0:0	4	}
water	35:4	0:0	2	psz_expand_tilde
op	35:21	0:0	2	=
call	35:23	35:64	2	gnome_vfs_expand_initial_tilde
arg	35:55	35:64	3	psz_name
water	35:55	0:0	4	psz_name
water	35:65	0:0	2	;
water	36:4	0:0	2	psz_unescaped
op	36:18	0:0	2	=
call	36:20	36:72	2	gnome_vfs_make_uri_from_shell_arg
arg	36:55	36:72	3	psz_expand_tilde
water	36:55	0:0	4	psz_expand_tilde
water	36:73	0:0	2	;
if	40:4	66:4	2	(!strcmp (psz_unescaped ,psz_expand_tilde ))
cond	40:8	40:49	3	!strcmp (psz_unescaped ,psz_expand_tilde )
op	40:8	0:0	4	!
call	40:9	40:49	4	strcmp
arg	40:17	40:30	5	psz_unescaped
water	40:17	0:0	6	psz_unescaped
arg	40:32	40:49	5	psz_expand_tilde
water	40:32	0:0	6	psz_expand_tilde
stmts	41:4	66:4	3	
water	41:4	0:0	4	{
decl	47:8	47:21	4	vlc_url_t	url
decl	48:8	48:30	4	char	*psz_escaped_path
decl	49:8	49:28	4	char	*psz_path_begin
call	50:8	50:45	4	vlc_UrlParse
arg	50:22	50:26	5	&url
op	50:22	0:0	6	&
water	50:23	0:0	6	url
arg	50:28	50:41	5	psz_unescaped
water	50:28	0:0	6	psz_unescaped
arg	50:43	50:45	5	0
water	50:43	0:0	6	0
water	50:46	0:0	4	;
water	51:8	0:0	4	psz_escaped_path
op	51:25	0:0	4	=
call	51:27	51:70	4	gnome_vfs_escape_path_string
arg	51:57	51:70	5	url.psz_path
water	51:57	0:0	6	url
op	51:60	0:0	6	.
water	51:61	0:0	6	psz_path
water	51:71	0:0	4	;
if	52:8	61:8	4	(psz_escaped_path)
cond	52:12	52:12	5	psz_escaped_path
water	52:12	0:0	6	psz_escaped_path
stmts	53:8	61:8	5	
water	53:8	0:0	6	{
water	55:12	0:0	6	psz_path_begin
op	55:27	0:0	6	=
water	55:29	0:0	6	psz_unescaped
op	55:43	0:0	6	+
call	55:45	55:67	6	strlen
arg	55:53	55:67	7	psz_unescaped
water	55:53	0:0	8	psz_unescaped
op	56:43	0:0	6	-
call	56:45	56:66	6	strlen
arg	56:53	56:66	7	url.psz_path
water	56:53	0:0	8	url
op	56:56	0:0	8	.
water	56:57	0:0	8	psz_path
water	56:67	0:0	6	;
op	57:12	0:0	6	*
water	57:13	0:0	6	psz_path_begin
op	57:28	0:0	6	=
water	57:30	0:0	6	'\0'
water	57:34	0:0	6	;
call	58:12	58:72	6	asprintf
arg	58:22	58:30	7	&psz_uri
op	58:22	0:0	8	&
water	58:23	0:0	8	psz_uri
arg	58:32	58:38	7	"%s%s"
water	58:32	0:0	8	"%s%s"
arg	58:40	58:53	7	psz_unescaped
water	58:40	0:0	8	psz_unescaped
arg	58:55	58:72	7	psz_escaped_path
water	58:55	0:0	8	psz_escaped_path
water	58:73	0:0	6	;
call	59:12	59:37	6	g_free
arg	59:20	59:37	7	psz_escaped_path
water	59:20	0:0	8	psz_escaped_path
water	59:38	0:0	6	;
call	60:12	60:34	6	g_free
arg	60:20	60:34	7	psz_unescaped
water	60:20	0:0	8	psz_unescaped
water	60:35	0:0	6	;
water	61:8	0:0	6	}
else	62:8	65:8	4
stmts	63:8	65:8	5	
water	63:8	0:0	6	{
water	64:12	0:0	6	psz_uri
op	64:20	0:0	6	=
water	64:22	0:0	6	psz_unescaped
water	64:35	0:0	6	;
water	65:8	0:0	6	}
water	66:4	0:0	4	}
else	67:4	70:4	2
stmts	68:4	70:4	3	
water	68:4	0:0	4	{
water	69:8	0:0	4	psz_uri
op	69:16	0:0	4	=
water	69:18	0:0	4	psz_unescaped
water	69:31	0:0	4	;
water	70:4	0:0	4	}
call	71:4	71:29	2	g_free
arg	71:12	71:29	3	psz_expand_tilde
water	71:12	0:0	4	psz_expand_tilde
water	71:30	0:0	2	;
water	72:4	0:0	2	p_uri
op	72:10	0:0	2	=
call	72:12	72:39	2	gnome_vfs_uri_new
arg	72:31	72:39	3	psz_uri
water	72:31	0:0	4	psz_uri
water	72:40	0:0	2	;
if	73:4	89:4	2	(p_uri)
cond	73:8	73:8	3	p_uri
water	73:8	0:0	4	p_uri
stmts	74:4	89:4	3	
water	74:4	0:0	4	{
water	75:8	0:0	4	p_sys
op	75:13	0:0	4	->
water	75:15	0:0	4	p_file_info
op	75:27	0:0	4	=
call	75:29	75:53	4	gnome_vfs_file_info_new
water	75:54	0:0	4	;
water	76:8	0:0	4	i_ret
op	76:14	0:0	4	=
call	76:16	77:70	4	gnome_vfs_get_file_info_uri
arg	76:45	76:50	5	p_uri
water	76:45	0:0	6	p_uri
arg	77:48	77:66	5	p_sys->p_file_info
water	77:48	0:0	6	p_sys
op	77:53	0:0	6	->
water	77:55	0:0	6	p_file_info
arg	77:68	77:70	5	8
water	77:68	0:0	6	8
water	77:71	0:0	4	;
if	78:8	88:8	4	(i_ret)
cond	78:12	78:12	5	i_ret
water	78:12	0:0	6	i_ret
stmts	79:8	88:8	5	
water	79:8	0:0	6	{
call	80:12	81:77	6	msg_Warn
arg	80:22	80:30	7	p_access
water	80:22	0:0	8	p_access
arg	80:32	80:70	7	"cannot get file info for uri %s (%s)"
water	80:32	0:0	8	"cannot get file info for uri %s (%s)"
arg	81:32	81:39	7	psz_uri
water	81:32	0:0	8	psz_uri
arg	81:41	81:77	7	gnome_vfs_result_to_string(i_ret)
call	81:41	81:75	8	gnome_vfs_result_to_string
arg	81:69	81:75	9	i_ret
water	81:69	0:0	10	i_ret
water	81:78	0:0	6	;
call	82:12	82:58	6	gnome_vfs_file_info_unref
arg	82:39	82:58	7	p_sys->p_file_info
water	82:39	0:0	8	p_sys
op	82:44	0:0	8	->
water	82:46	0:0	8	p_file_info
water	82:59	0:0	6	;
call	83:12	83:38	6	gnome_vfs_uri_unref
arg	83:33	83:38	7	p_uri
water	83:33	0:0	8	p_uri
water	83:39	0:0	6	;
call	84:12	84:24	6	free
arg	84:18	84:24	7	p_sys
water	84:18	0:0	8	p_sys
water	84:25	0:0	6	;
call	85:12	85:26	6	free
arg	85:18	85:26	7	psz_uri
water	85:18	0:0	8	psz_uri
water	85:27	0:0	6	;
call	86:12	86:27	6	free
arg	86:18	86:27	7	psz_name
water	86:18	0:0	8	psz_name
water	86:28	0:0	6	;
return	87:12	87:31	6	VLC_EGENERIC
water	87:19	0:0	7	VLC_EGENERIC
water	88:8	0:0	6	}
water	89:4	0:0	4	}
else	90:4	97:4	2
stmts	91:4	97:4	3	
water	91:4	0:0	4	{
call	92:8	92:84	4	msg_Warn
arg	92:18	92:26	5	p_access
water	92:18	0:0	6	p_access
arg	92:28	92:73	5	"cannot parse MRL %s or unsupported protocol"
water	92:28	0:0	6	"cannot parse MRL %s or unsupported protocol"
arg	92:75	92:84	5	psz_name
water	92:75	0:0	6	psz_name
water	92:85	0:0	4	;
call	93:8	93:22	4	free
arg	93:14	93:22	5	psz_uri
water	93:14	0:0	6	psz_uri
water	93:23	0:0	4	;
call	94:8	94:20	4	free
arg	94:14	94:20	5	p_sys
water	94:14	0:0	6	p_sys
water	94:21	0:0	4	;
call	95:8	95:23	4	free
arg	95:14	95:23	5	psz_name
water	95:14	0:0	6	psz_name
water	95:24	0:0	4	;
return	96:8	96:27	4	VLC_EGENERIC
water	96:15	0:0	5	VLC_EGENERIC
water	97:4	0:0	4	}
call	98:4	98:52	2	msg_Dbg
arg	98:13	98:21	3	p_access
water	98:13	0:0	4	p_access
arg	98:23	98:42	3	"opening file `%s'"
water	98:23	0:0	4	"opening file `%s'"
arg	98:44	98:52	3	psz_uri
water	98:44	0:0	4	psz_uri
water	98:53	0:0	2	;
water	99:4	0:0	2	i_ret
op	99:10	0:0	2	=
call	99:12	99:59	2	gnome_vfs_open
arg	99:28	99:46	3	&(p_sys->p_handle)
op	99:28	0:0	4	&
water	99:29	0:0	4	(
water	99:30	0:0	4	p_sys
op	99:35	0:0	4	->
water	99:37	0:0	4	p_handle
water	99:45	0:0	4	)
arg	99:48	99:55	3	psz_uri
water	99:48	0:0	4	psz_uri
arg	99:57	99:59	3	5
water	99:57	0:0	4	5
water	99:60	0:0	2	;
if	100:4	109:4	2	(i_ret)
cond	100:8	100:8	3	i_ret
water	100:8	0:0	4	i_ret
stmts	101:4	109:4	3	
water	101:4	0:0	4	{
call	102:8	103:68	4	msg_Warn
arg	102:18	102:26	5	p_access
water	102:18	0:0	6	p_access
arg	102:28	102:53	5	"cannot open file %s: %s"
water	102:28	0:0	6	"cannot open file %s: %s"
arg	102:55	102:62	5	psz_uri
water	102:55	0:0	6	psz_uri
arg	103:32	103:68	5	gnome_vfs_result_to_string(i_ret)
call	103:32	103:66	6	gnome_vfs_result_to_string
arg	103:60	103:66	7	i_ret
water	103:60	0:0	8	i_ret
water	103:69	0:0	4	;
call	104:8	104:34	4	gnome_vfs_uri_unref
arg	104:29	104:34	5	p_uri
water	104:29	0:0	6	p_uri
water	104:35	0:0	4	;
call	105:8	105:22	4	free
arg	105:14	105:22	5	psz_uri
water	105:14	0:0	6	psz_uri
water	105:23	0:0	4	;
call	106:8	106:20	4	free
arg	106:14	106:20	5	p_sys
water	106:14	0:0	6	p_sys
water	106:21	0:0	4	;
call	107:8	107:23	4	free
arg	107:14	107:23	5	psz_name
water	107:14	0:0	6	psz_name
water	107:24	0:0	4	;
return	108:8	108:27	4	VLC_EGENERIC
water	108:15	0:0	5	VLC_EGENERIC
water	109:4	0:0	4	}
if	110:4	113:4	2	(GNOME_VFS_FILE_INFO_LOCAL (p_sys -> p_file_info ))
cond	110:8	110:54	3	GNOME_VFS_FILE_INFO_LOCAL (p_sys -> p_file_info )
call	110:8	110:54	4	GNOME_VFS_FILE_INFO_LOCAL
arg	110:35	110:54	5	p_sys->p_file_info
water	110:35	0:0	6	p_sys
op	110:40	0:0	6	->
water	110:42	0:0	6	p_file_info
stmts	111:4	113:4	3	
water	111:4	0:0	4	{
water	112:8	0:0	4	p_sys
op	112:13	0:0	4	->
water	112:15	0:0	4	b_local
op	112:23	0:0	4	=
water	112:25	0:0	4	true
water	112:29	0:0	4	;
water	113:4	0:0	4	}
if	114:4	119:4	2	(p_sys -> p_file_info -> type == GNOME_VFS_FILE_TYPE_REGULAR || p_sys -> p_file_info -> type == GNOME_VFS_FILE_TYPE_CHARACTER_DEVICE || p_sys -> p_file_info -> type == GNOME_VFS_FILE_TYPE_BLOCK_DEVICE)
cond	114:8	116:36	3	p_sys -> p_file_info -> type == GNOME_VFS_FILE_TYPE_REGULAR || p_sys -> p_file_info -> type == GNOME_VFS_FILE_TYPE_CHARACTER_DEVICE || p_sys -> p_file_info -> type == GNOME_VFS_FILE_TYPE_BLOCK_DEVICE
water	114:8	0:0	4	p_sys
op	114:13	0:0	4	->
water	114:15	0:0	4	p_file_info
op	114:26	0:0	4	->
water	114:28	0:0	4	type
op	114:33	0:0	4	==
water	114:36	0:0	4	GNOME_VFS_FILE_TYPE_REGULAR
op	114:64	0:0	4	||
water	115:8	0:0	4	p_sys
op	115:13	0:0	4	->
water	115:15	0:0	4	p_file_info
op	115:26	0:0	4	->
water	115:28	0:0	4	type
op	115:33	0:0	4	==
water	115:36	0:0	4	GNOME_VFS_FILE_TYPE_CHARACTER_DEVICE
op	115:73	0:0	4	||
water	116:8	0:0	4	p_sys
op	116:13	0:0	4	->
water	116:15	0:0	4	p_file_info
op	116:26	0:0	4	->
water	116:28	0:0	4	type
op	116:33	0:0	4	==
water	116:36	0:0	4	GNOME_VFS_FILE_TYPE_BLOCK_DEVICE
stmts	117:4	119:4	3	
water	117:4	0:0	4	{
water	118:8	0:0	4	p_sys
op	118:13	0:0	4	->
water	118:15	0:0	4	b_seekable
op	118:26	0:0	4	=
water	118:28	0:0	4	true
water	118:32	0:0	4	;
water	119:4	0:0	4	}
else	120:4	124:4	2
stmts	120:9	124:4	3	
if	120:9	124:4	4	(p_sys -> p_file_info -> type == GNOME_VFS_FILE_TYPE_FIFO || p_sys -> p_file_info -> type == GNOME_VFS_FILE_TYPE_SOCKET)
cond	120:13	121:45	5	p_sys -> p_file_info -> type == GNOME_VFS_FILE_TYPE_FIFO || p_sys -> p_file_info -> type == GNOME_VFS_FILE_TYPE_SOCKET
water	120:13	0:0	6	p_sys
op	120:18	0:0	6	->
water	120:20	0:0	6	p_file_info
op	120:31	0:0	6	->
water	120:33	0:0	6	type
op	120:38	0:0	6	==
water	120:41	0:0	6	GNOME_VFS_FILE_TYPE_FIFO
op	121:14	0:0	6	||
water	121:17	0:0	6	p_sys
op	121:22	0:0	6	->
water	121:24	0:0	6	p_file_info
op	121:35	0:0	6	->
water	121:37	0:0	6	type
op	121:42	0:0	6	==
water	121:45	0:0	6	GNOME_VFS_FILE_TYPE_SOCKET
stmts	122:4	124:4	5	
water	122:4	0:0	6	{
water	123:8	0:0	6	p_sys
op	123:13	0:0	6	->
water	123:15	0:0	6	b_seekable
op	123:26	0:0	6	=
water	123:28	0:0	6	false
water	123:33	0:0	6	;
water	124:4	0:0	6	}
else	125:4	129:4	2
stmts	126:4	129:4	3	
water	126:4	0:0	4	{
call	127:8	127:66	4	msg_Err
arg	127:17	127:25	5	p_access
water	127:17	0:0	6	p_access
arg	127:27	127:55	5	"unknown file type for `%s'"
water	127:27	0:0	6	"unknown file type for `%s'"
arg	127:57	127:66	5	psz_name
water	127:57	0:0	6	psz_name
water	127:67	0:0	4	;
return	128:8	128:27	4	VLC_EGENERIC
water	128:15	0:0	5	VLC_EGENERIC
water	129:4	0:0	4	}
if	130:4	141:4	2	(p_sys -> b_seekable && ! ( p_sys -> p_file_info -> valid_fields & GNOME_VFS_FILE_INFO_FIELDS_SIZE ))
cond	130:8	131:75	3	p_sys -> b_seekable && ! ( p_sys -> p_file_info -> valid_fields & GNOME_VFS_FILE_INFO_FIELDS_SIZE )
water	130:8	0:0	4	p_sys
op	130:13	0:0	4	->
water	130:15	0:0	4	b_seekable
op	131:4	0:0	4	&&
op	131:7	0:0	4	!
water	131:8	0:0	4	(
water	131:9	0:0	4	p_sys
op	131:14	0:0	4	->
water	131:16	0:0	4	p_file_info
op	131:27	0:0	4	->
water	131:29	0:0	4	valid_fields
op	131:42	0:0	4	&
water	131:44	0:0	4	GNOME_VFS_FILE_INFO_FIELDS_SIZE
water	131:75	0:0	4	)
stmts	132:4	141:4	3	
water	132:4	0:0	4	{
call	134:8	134:74	4	msg_Warn
arg	134:18	134:26	5	p_access
water	134:18	0:0	6	p_access
arg	134:28	134:63	5	"file %s size is unknown, aborting"
water	134:28	0:0	6	"file %s size is unknown, aborting"
arg	134:65	134:74	5	psz_name
water	134:65	0:0	6	psz_name
water	134:75	0:0	4	;
call	135:8	135:54	4	gnome_vfs_file_info_unref
arg	135:35	135:54	5	p_sys->p_file_info
water	135:35	0:0	6	p_sys
op	135:40	0:0	6	->
water	135:42	0:0	6	p_file_info
water	135:55	0:0	4	;
call	136:8	136:34	4	gnome_vfs_uri_unref
arg	136:29	136:34	5	p_uri
water	136:29	0:0	6	p_uri
water	136:35	0:0	4	;
call	137:8	137:20	4	free
arg	137:14	137:20	5	p_sys
water	137:14	0:0	6	p_sys
water	137:21	0:0	4	;
call	138:8	138:22	4	free
arg	138:14	138:22	5	psz_uri
water	138:14	0:0	6	psz_uri
water	138:23	0:0	4	;
call	139:8	139:23	4	free
arg	139:14	139:23	5	psz_name
water	139:14	0:0	6	psz_name
water	139:24	0:0	4	;
return	140:8	140:27	4	VLC_EGENERIC
water	140:15	0:0	5	VLC_EGENERIC
water	141:4	0:0	4	}
call	142:4	142:18	2	free
arg	142:10	142:18	3	psz_uri
water	142:10	0:0	4	psz_uri
water	142:19	0:0	2	;
water	143:4	0:0	2	p_sys
op	143:9	0:0	2	->
water	143:11	0:0	2	psz_name
op	143:20	0:0	2	=
water	143:22	0:0	2	psz_name
water	143:30	0:0	2	;
call	144:4	144:30	2	gnome_vfs_uri_unref
arg	144:25	144:30	3	p_uri
water	144:25	0:0	4	p_uri
water	144:31	0:0	2	;
return	145:4	145:22	2	VLC_SUCCESS
water	145:11	0:0	3	VLC_SUCCESS
