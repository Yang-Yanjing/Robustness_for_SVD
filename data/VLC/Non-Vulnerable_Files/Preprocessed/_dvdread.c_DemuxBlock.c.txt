func	2:0	76:0	0	static int	DemuxBlock
params	2:21	0:0	1	
param	2:23	2:39	2	demux_t *	p_demux
param	2:41	2:57	2	const uint8_t *	p
param	2:59	2:67	2	int	len
stmnts	0:0	75:22	1	
decl	4:4	4:39	2	demux_sys_t	*p_sys
op	4:23	0:0	2	=
water	4:25	0:0	2	p_demux
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
while	5:4	74:4	2	(len > 0)
cond	5:11	5:17	3	len > 0
water	5:11	0:0	4	len
op	5:15	0:0	4	>
water	5:17	0:0	4	0
stmts	6:4	74:4	3	
water	6:4	0:0	4	{
decl	7:8	7:42	4	int	i_size
op	7:19	0:0	4	=
call	7:21	7:41	5	ps_pkt_size
arg	7:34	7:35	6	p
water	7:34	0:0	7	p
arg	7:37	7:41	6	len
water	7:37	0:0	7	len
if	8:8	11:8	4	(i_size <= 0 || i_size > len)
cond	8:12	8:36	5	i_size <= 0 || i_size > len
water	8:12	0:0	6	i_size
op	8:19	0:0	6	<=
water	8:22	0:0	6	0
op	8:24	0:0	6	||
water	8:27	0:0	6	i_size
op	8:34	0:0	6	>
water	8:36	0:0	6	len
stmts	9:8	11:8	5	
water	9:8	0:0	6	{
break	10:12	10:17	6	
water	11:8	0:0	6	}
decl	13:8	13:46	4	block_t	*p_pkt
op	13:23	0:0	4	=
call	13:25	13:45	5	block_Alloc
arg	13:38	13:45	6	i_size
water	13:38	0:0	7	i_size
call	14:8	14:42	4	memcpy
arg	14:16	14:31	5	p_pkt->p_buffer
water	14:16	0:0	6	p_pkt
op	14:21	0:0	6	->
water	14:23	0:0	6	p_buffer
arg	14:33	14:34	5	p
water	14:33	0:0	6	p
arg	14:36	14:42	5	i_size
water	14:36	0:0	6	i_size
water	14:43	0:0	4	;
switch	16:8	71:8	4	(0 x100 | p [ 3 ])
cond	16:16	16:27	5	0 x100 | p [ 3 ]
water	16:16	0:0	6	0
water	16:17	0:0	6	x100
op	16:22	0:0	6	|
water	16:24	0:0	6	p
op	16:25	0:0	6	[
water	16:26	0:0	6	3
op	16:27	0:0	6	]
stmts	17:8	71:8	5	
water	17:8	0:0	6	{
label	18:8	18:18	6	case 0 x1b9 :
label	19:8	19:18	6	case 0 x1bb :
label	20:8	20:18	6	case 0 x1bc :
if	22:12	25:12	6	(p [ 3 ] == 0 xbc)
cond	22:16	22:25	7	p [ 3 ] == 0 xbc
water	22:16	0:0	8	p
op	22:17	0:0	8	[
water	22:18	0:0	8	3
op	22:19	0:0	8	]
op	22:21	0:0	8	==
water	22:24	0:0	8	0
water	22:25	0:0	8	xbc
stmts	23:12	25:12	7	
water	23:12	0:0	8	{
call	24:16	24:59	8	msg_Warn
arg	24:26	24:33	9	p_demux
water	24:26	0:0	10	p_demux
arg	24:35	24:59	9	"received a PSM packet"
water	24:35	0:0	10	"received a PSM packet"
water	24:60	0:0	8	;
water	25:12	0:0	8	}
else	26:12	29:12	6
stmts	26:17	29:12	7	
if	26:17	29:12	8	(p [ 3 ] == 0 xbb)
cond	26:21	26:30	9	p [ 3 ] == 0 xbb
water	26:21	0:0	10	p
op	26:22	0:0	10	[
water	26:23	0:0	10	3
op	26:24	0:0	10	]
op	26:26	0:0	10	==
water	26:29	0:0	10	0
water	26:30	0:0	10	xbb
stmts	27:12	29:12	9	
water	27:12	0:0	10	{
call	28:16	28:62	10	msg_Warn
arg	28:26	28:33	11	p_demux
water	28:26	0:0	12	p_demux
arg	28:35	28:62	11	"received a SYSTEM packet"
water	28:35	0:0	12	"received a SYSTEM packet"
water	28:63	0:0	10	;
water	29:12	0:0	10	}
call	31:12	31:33	6	block_Release
arg	31:27	31:33	7	p_pkt
water	31:27	0:0	8	p_pkt
water	31:34	0:0	6	;
break	32:12	32:17	6	
label	33:8	33:18	6	case 0 x1ba :
water	34:8	0:0	6	{
decl	35:12	35:25	6	int64_t	i_scr
decl	36:12	36:26	6	int	i_mux_rate
if	37:12	41:12	6	(!ps_pkt_parse_pack (p_pkt ,& i_scr ,& i_mux_rate ))
cond	37:16	37:63	7	!ps_pkt_parse_pack (p_pkt ,& i_scr ,& i_mux_rate )
op	37:16	0:0	8	!
call	37:17	37:63	8	ps_pkt_parse_pack
arg	37:36	37:41	9	p_pkt
water	37:36	0:0	10	p_pkt
arg	37:43	37:49	9	&i_scr
op	37:43	0:0	10	&
water	37:44	0:0	10	i_scr
arg	37:51	37:63	9	&i_mux_rate
op	37:51	0:0	10	&
water	37:52	0:0	10	i_mux_rate
stmts	38:12	41:12	7	
water	38:12	0:0	8	{
call	39:16	39:68	8	es_out_Control
arg	39:32	39:44	9	p_demux->out
water	39:32	0:0	10	p_demux
op	39:39	0:0	10	->
water	39:41	0:0	10	out
arg	39:46	39:60	9	ES_OUT_SET_PCR
water	39:46	0:0	10	ES_OUT_SET_PCR
arg	39:62	39:68	9	i_scr
water	39:62	0:0	10	i_scr
water	39:69	0:0	8	;
if	40:16	40:67	8	(i_mux_rate > 0)
cond	40:20	40:33	9	i_mux_rate > 0
water	40:20	0:0	10	i_mux_rate
op	40:31	0:0	10	>
water	40:33	0:0	10	0
stmts	40:37	40:67	9	
water	40:37	0:0	10	p_sys
op	40:42	0:0	10	->
water	40:44	0:0	10	i_mux_rate
op	40:55	0:0	10	=
water	40:57	0:0	10	i_mux_rate
water	40:67	0:0	10	;
water	41:12	0:0	8	}
call	42:12	42:33	6	block_Release
arg	42:27	42:33	7	p_pkt
water	42:27	0:0	8	p_pkt
water	42:34	0:0	6	;
break	43:12	43:17	6	
water	44:8	0:0	6	}
label	45:8	45:15	6	default :
water	46:8	0:0	6	{
decl	47:12	47:41	6	int	i_id
op	47:21	0:0	6	=
call	47:23	47:40	7	ps_pkt_id
arg	47:34	47:40	8	p_pkt
water	47:34	0:0	9	p_pkt
if	48:12	64:12	6	(i_id >= 0 xc0)
cond	48:16	48:25	7	i_id >= 0 xc0
water	48:16	0:0	8	i_id
op	48:21	0:0	8	>=
water	48:24	0:0	8	0
water	48:25	0:0	8	xc0
stmts	49:12	64:12	7	
water	49:12	0:0	8	{
decl	50:16	50:62	8	ps_track_t	*tk
op	50:31	0:0	8	=
op	50:33	0:0	8	&
water	50:34	0:0	8	p_sys
op	50:39	0:0	8	->
water	50:41	0:0	8	tk
op	50:43	0:0	8	[
call	50:44	50:60	9	PS_ID_TO_TK
arg	50:56	50:60	10	i_id
water	50:56	0:0	11	i_id
op	50:61	0:0	8	]
if	51:16	54:16	8	(! tk -> b_seen)
cond	51:20	51:25	9	! tk -> b_seen
op	51:20	0:0	10	!
water	51:21	0:0	10	tk
op	51:23	0:0	10	->
water	51:25	0:0	10	b_seen
stmts	52:16	54:16	9	
water	52:16	0:0	10	{
call	53:20	53:44	10	ESNew
arg	53:27	53:34	11	p_demux
water	53:27	0:0	12	p_demux
arg	53:36	53:40	11	i_id
water	53:36	0:0	12	i_id
arg	53:42	53:44	11	0
water	53:42	0:0	12	0
water	53:45	0:0	10	;
water	54:16	0:0	10	}
if	55:16	59:16	8	(tk -> b_seen && tk -> es && !ps_pkt_parse_pes (p_pkt ,tk -> i_skip ))
cond	55:20	56:57	9	tk -> b_seen && tk -> es && !ps_pkt_parse_pes (p_pkt ,tk -> i_skip )
water	55:20	0:0	10	tk
op	55:22	0:0	10	->
water	55:24	0:0	10	b_seen
op	55:31	0:0	10	&&
water	55:34	0:0	10	tk
op	55:36	0:0	10	->
water	55:38	0:0	10	es
op	55:41	0:0	10	&&
op	56:20	0:0	10	!
call	56:21	56:57	10	ps_pkt_parse_pes
arg	56:39	56:44	11	p_pkt
water	56:39	0:0	12	p_pkt
arg	56:46	56:57	11	tk->i_skip
water	56:46	0:0	12	tk
op	56:48	0:0	12	->
water	56:50	0:0	12	i_skip
stmts	57:16	59:16	9	
water	57:16	0:0	10	{
call	58:20	58:61	10	es_out_Send
arg	58:33	58:45	11	p_demux->out
water	58:33	0:0	12	p_demux
op	58:40	0:0	12	->
water	58:42	0:0	12	out
arg	58:47	58:53	11	tk->es
water	58:47	0:0	12	tk
op	58:49	0:0	12	->
water	58:51	0:0	12	es
arg	58:55	58:61	11	p_pkt
water	58:55	0:0	12	p_pkt
water	58:62	0:0	10	;
water	59:16	0:0	10	}
else	60:16	63:16	8
stmts	61:16	63:16	9	
water	61:16	0:0	10	{
call	62:20	62:41	10	block_Release
arg	62:35	62:41	11	p_pkt
water	62:35	0:0	12	p_pkt
water	62:42	0:0	10	;
water	63:16	0:0	10	}
water	64:12	0:0	8	}
else	65:12	68:12	6
stmts	66:12	68:12	7	
water	66:12	0:0	8	{
call	67:16	67:37	8	block_Release
arg	67:31	67:37	9	p_pkt
water	67:31	0:0	10	p_pkt
water	67:38	0:0	8	;
water	68:12	0:0	8	}
break	69:12	69:17	6	
water	70:8	0:0	6	}
water	71:8	0:0	6	}
water	72:8	0:0	4	p
op	72:10	0:0	4	+=
water	72:13	0:0	4	i_size
water	72:19	0:0	4	;
water	73:8	0:0	4	len
op	73:12	0:0	4	-=
water	73:15	0:0	4	i_size
water	73:21	0:0	4	;
water	74:4	0:0	4	}
return	75:4	75:22	2	VLC_SUCCESS
water	75:11	0:0	3	VLC_SUCCESS
