func	2:0	64:0	0	static int	SendSetup
params	2:20	0:0	1	
param	2:22	2:43	2	vlc_object_t *	p_this
stmnts	0:0	63:16	1	
decl	4:4	4:52	2	sout_stream_t	*p_stream
op	4:28	0:0	2	=
water	4:30	0:0	2	(
water	4:31	0:0	2	sout_stream_t
op	4:44	0:0	2	*
water	4:45	0:0	2	)
water	4:46	0:0	2	p_this
decl	5:4	5:46	2	sout_stream_sys_t	*p_sys
op	5:29	0:0	2	=
water	5:31	0:0	2	p_stream
op	5:39	0:0	2	->
water	5:41	0:0	2	p_sys
decl	6:4	6:32	2	vlc_dictionary_t	req_headers
decl	7:4	7:33	2	vlc_dictionary_t	resp_headers
decl	8:4	8:27	2	int	i_err
op	8:14	0:0	2	=
water	8:16	0:0	2	VLC_SUCCESS
decl	9:4	9:17	2	char	*psz_tmp
decl	10:4	10:18	2	char	*psz_next
decl	11:4	11:18	2	char	*psz_name
decl	12:4	12:19	2	char	*psz_value
call	13:4	13:41	2	vlc_dictionary_init
arg	13:25	13:37	3	&req_headers
op	13:25	0:0	4	&
water	13:26	0:0	4	req_headers
arg	13:39	13:41	3	0
water	13:39	0:0	4	0
water	13:42	0:0	2	;
call	14:4	14:42	2	vlc_dictionary_init
arg	14:25	14:38	3	&resp_headers
op	14:25	0:0	4	&
water	14:26	0:0	4	resp_headers
arg	14:40	14:42	3	0
water	14:40	0:0	4	0
water	14:43	0:0	2	;
call	15:4	17:43	2	vlc_dictionary_insert
arg	15:27	15:39	3	&req_headers
op	15:27	0:0	4	&
water	15:28	0:0	4	req_headers
arg	15:41	15:52	3	"Transport"
water	15:41	0:0	4	"Transport"
arg	16:27	17:43	3	((void*)"RTP/AVP/TCP;unicast;interleaved=0-1;""mode=record")
water	16:27	0:0	4	(
water	16:28	0:0	4	(
water	16:29	0:0	4	void
op	16:33	0:0	4	*
water	16:34	0:0	4	)
water	16:35	0:0	4	"RTP/AVP/TCP;unicast;interleaved=0-1;"
water	17:28	0:0	4	"mode=record"
water	17:41	0:0	4	)
water	17:44	0:0	2	;
water	18:4	0:0	2	i_err
op	18:10	0:0	2	=
call	18:12	19:53	2	ExecRequest
arg	18:25	18:31	3	p_this
water	18:25	0:0	4	p_this
arg	18:33	18:40	3	"SETUP"
water	18:33	0:0	4	"SETUP"
arg	18:42	18:46	3	NULL
water	18:42	0:0	4	NULL
arg	18:48	18:52	3	NULL
water	18:48	0:0	4	NULL
arg	19:25	19:37	3	&req_headers
op	19:25	0:0	4	&
water	19:26	0:0	4	req_headers
arg	19:39	19:53	3	&resp_headers
op	19:39	0:0	4	&
water	19:40	0:0	4	resp_headers
water	19:54	0:0	2	;
if	20:4	21:18	2	(i_err != VLC_SUCCESS)
cond	20:9	20:18	3	i_err != VLC_SUCCESS
water	20:9	0:0	4	i_err
op	20:15	0:0	4	!=
water	20:18	0:0	4	VLC_SUCCESS
stmts	21:8	21:18	3	
goto	21:8	21:18	4	error
water	21:13	0:0	5	error
water	22:4	0:0	2	psz_tmp
op	22:12	0:0	2	=
call	22:14	22:69	2	vlc_dictionary_value_for_key
arg	22:44	22:57	3	&resp_headers
op	22:44	0:0	4	&
water	22:45	0:0	4	resp_headers
arg	22:59	22:69	3	"Session"
water	22:59	0:0	4	"Session"
water	22:70	0:0	2	;
if	23:4	28:4	2	(! psz_tmp)
cond	23:9	23:10	3	! psz_tmp
op	23:9	0:0	4	!
water	23:10	0:0	4	psz_tmp
stmts	24:4	28:4	3	
water	24:4	0:0	4	{
call	25:8	25:65	4	msg_Err
arg	25:17	25:23	5	p_this
water	25:17	0:0	6	p_this
arg	25:25	25:65	5	"Missing 'Session' header during setup"
water	25:25	0:0	6	"Missing 'Session' header during setup"
water	25:66	0:0	4	;
water	26:8	0:0	4	i_err
op	26:14	0:0	4	=
water	26:16	0:0	4	VLC_EGENERIC
water	26:28	0:0	4	;
goto	27:8	27:18	4	error
water	27:13	0:0	5	error
water	28:4	0:0	4	}
call	29:4	29:29	2	free
arg	29:10	29:29	3	p_sys->psz_session
water	29:10	0:0	4	p_sys
op	29:15	0:0	4	->
water	29:17	0:0	4	psz_session
water	29:30	0:0	2	;
water	30:4	0:0	2	p_sys
op	30:9	0:0	2	->
water	30:11	0:0	2	psz_session
op	30:23	0:0	2	=
call	30:25	30:41	2	strdup
arg	30:33	30:41	3	psz_tmp
water	30:33	0:0	4	psz_tmp
water	30:42	0:0	2	;
water	32:4	0:0	2	psz_next
op	32:13	0:0	2	=
call	32:15	32:72	2	vlc_dictionary_value_for_key
arg	32:45	32:58	3	&resp_headers
op	32:45	0:0	4	&
water	32:46	0:0	4	resp_headers
arg	32:60	32:72	3	"Transport"
water	32:60	0:0	4	"Transport"
water	32:73	0:0	2	;
while	33:4	40:4	2	(SplitHeader (& psz_next ,& psz_name ,& psz_value ))
cond	33:12	33:58	3	SplitHeader (& psz_next ,& psz_name ,& psz_value )
call	33:12	33:58	4	SplitHeader
arg	33:25	33:34	5	&psz_next
op	33:25	0:0	6	&
water	33:26	0:0	6	psz_next
arg	33:36	33:45	5	&psz_name
op	33:36	0:0	6	&
water	33:37	0:0	6	psz_name
arg	33:47	33:58	5	&psz_value
op	33:47	0:0	6	&
water	33:48	0:0	6	psz_value
stmts	34:4	40:4	3	
water	34:4	0:0	4	{
if	35:8	39:8	4	(psz_value &&strcmp (psz_name ,"server_port" ) == 0)
cond	35:13	35:63	5	psz_value &&strcmp (psz_name ,"server_port" ) == 0
water	35:13	0:0	6	psz_value
op	35:23	0:0	6	&&
call	35:26	35:58	6	strcmp
arg	35:34	35:42	7	psz_name
water	35:34	0:0	8	psz_name
arg	35:44	35:58	7	"server_port"
water	35:44	0:0	8	"server_port"
op	35:60	0:0	6	==
water	35:63	0:0	6	0
stmts	36:8	39:8	5	
water	36:8	0:0	6	{
water	37:12	0:0	6	p_sys
op	37:17	0:0	6	->
water	37:19	0:0	6	i_server_port
op	37:33	0:0	6	=
call	37:35	37:51	6	atoi
arg	37:41	37:51	7	psz_value
water	37:41	0:0	8	psz_value
water	37:52	0:0	6	;
break	38:12	38:17	6	
water	39:8	0:0	6	}
water	40:4	0:0	4	}
if	41:4	46:4	2	(! p_sys -> i_server_port)
cond	41:9	41:17	3	! p_sys -> i_server_port
op	41:9	0:0	4	!
water	41:10	0:0	4	p_sys
op	41:15	0:0	4	->
water	41:17	0:0	4	i_server_port
stmts	42:4	46:4	3	
water	42:4	0:0	4	{
call	43:8	43:62	4	msg_Err
arg	43:17	43:23	5	p_this
water	43:17	0:0	6	p_this
arg	43:25	43:62	5	"Missing 'server_port' during setup"
water	43:25	0:0	6	"Missing 'server_port' during setup"
water	43:63	0:0	4	;
water	44:8	0:0	4	i_err
op	44:14	0:0	4	=
water	44:16	0:0	4	VLC_EGENERIC
water	44:28	0:0	4	;
goto	45:8	45:18	4	error
water	45:13	0:0	5	error
water	46:4	0:0	4	}
water	48:4	0:0	2	psz_next
op	48:13	0:0	2	=
call	48:15	49:65	2	vlc_dictionary_value_for_key
arg	48:45	48:58	3	&resp_headers
op	48:45	0:0	4	&
water	48:46	0:0	4	resp_headers
arg	49:45	49:65	3	"Audio-Jack-Status"
water	49:45	0:0	4	"Audio-Jack-Status"
water	49:66	0:0	2	;
while	50:4	59:4	2	(SplitHeader (& psz_next ,& psz_name ,& psz_value ))
cond	50:12	50:58	3	SplitHeader (& psz_next ,& psz_name ,& psz_value )
call	50:12	50:58	4	SplitHeader
arg	50:25	50:34	5	&psz_next
op	50:25	0:0	6	&
water	50:26	0:0	6	psz_next
arg	50:36	50:45	5	&psz_name
op	50:36	0:0	6	&
water	50:37	0:0	6	psz_name
arg	50:47	50:58	5	&psz_value
op	50:47	0:0	6	&
water	50:48	0:0	6	psz_value
stmts	51:4	59:4	3	
water	51:4	0:0	4	{
if	52:8	53:20	4	(strcmp (psz_name ,"type" ) != 0)
cond	52:13	52:43	5	strcmp (psz_name ,"type" ) != 0
call	52:13	52:38	6	strcmp
arg	52:21	52:29	7	psz_name
water	52:21	0:0	8	psz_name
arg	52:31	52:38	7	"type"
water	52:31	0:0	8	"type"
op	52:40	0:0	6	!=
water	52:43	0:0	6	0
stmts	53:12	53:20	5	
continue	53:12	53:20	6	
if	54:8	55:49	4	(strcmp (psz_value ,"analog" ) == 0)
cond	54:13	54:46	5	strcmp (psz_value ,"analog" ) == 0
call	54:13	54:41	6	strcmp
arg	54:21	54:30	7	psz_value
water	54:21	0:0	8	psz_value
arg	54:32	54:41	7	"analog"
water	54:32	0:0	8	"analog"
op	54:43	0:0	6	==
water	54:46	0:0	6	0
stmts	55:12	55:49	5	
water	55:12	0:0	6	p_sys
op	55:17	0:0	6	->
water	55:19	0:0	6	i_jack_type
op	55:31	0:0	6	=
water	55:33	0:0	6	JACK_TYPE_ANALOG
water	55:49	0:0	6	;
else	56:8	57:50	4
stmts	56:13	57:50	5	
if	56:13	57:50	6	(strcmp (psz_value ,"digital" ) == 0)
cond	56:18	56:52	7	strcmp (psz_value ,"digital" ) == 0
call	56:18	56:47	8	strcmp
arg	56:26	56:35	9	psz_value
water	56:26	0:0	10	psz_value
arg	56:37	56:47	9	"digital"
water	56:37	0:0	10	"digital"
op	56:49	0:0	8	==
water	56:52	0:0	8	0
stmts	57:12	57:50	7	
water	57:12	0:0	8	p_sys
op	57:17	0:0	8	->
water	57:19	0:0	8	i_jack_type
op	57:31	0:0	8	=
water	57:33	0:0	8	JACK_TYPE_DIGITAL
water	57:50	0:0	8	;
break	58:8	58:13	4	
water	59:4	0:0	4	}
label	60:0	60:5	2	error :
call	61:4	61:51	2	vlc_dictionary_clear
arg	61:26	61:38	3	&req_headers
op	61:26	0:0	4	&
water	61:27	0:0	4	req_headers
arg	61:40	61:44	3	NULL
water	61:40	0:0	4	NULL
arg	61:46	61:51	3	NULL
water	61:46	0:0	4	NULL
water	61:52	0:0	2	;
call	62:4	62:58	2	vlc_dictionary_clear
arg	62:26	62:39	3	&resp_headers
op	62:26	0:0	4	&
water	62:27	0:0	4	resp_headers
arg	62:41	62:51	3	FreeHeader
water	62:41	0:0	4	FreeHeader
arg	62:53	62:58	3	NULL
water	62:53	0:0	4	NULL
water	62:59	0:0	2	;
return	63:4	63:16	2	i_err
water	63:11	0:0	3	i_err
