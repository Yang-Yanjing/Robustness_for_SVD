func	2:0	55:0	0	int	bd_mpls_Parse
params	2:17	0:0	1	
param	2:19	2:36	2	bd_mpls_t *	p_mpls
param	2:38	2:45	2	bs_t *	s
param	2:47	2:56	2	int	i_id
stmnts	0:0	54:22	1	
decl	4:4	4:39	2	const int	i_start
op	4:22	0:0	2	=
call	4:24	4:34	3	bs_pos
arg	4:32	4:34	4	s
water	4:32	0:0	5	s
op	4:36	0:0	2	/
water	4:38	0:0	2	8
if	6:4	7:27	2	(bs_read (s ,32 ) != 0 x4d504c53)
cond	6:8	6:29	3	bs_read (s ,32 ) != 0 x4d504c53
call	6:8	6:23	4	bs_read
arg	6:17	6:18	5	s
water	6:17	0:0	6	s
arg	6:20	6:23	5	32
water	6:20	0:0	6	32
op	6:25	0:0	4	!=
water	6:28	0:0	4	0
water	6:29	0:0	4	x4d504c53
stmts	7:8	7:27	3	
return	7:8	7:27	4	VLC_EGENERIC
water	7:15	0:0	5	VLC_EGENERIC
decl	8:4	8:47	2	const uint32_t	i_version
op	8:29	0:0	2	=
call	8:31	8:46	3	bs_read
arg	8:40	8:41	4	s
water	8:40	0:0	5	s
arg	8:43	8:46	4	32
water	8:43	0:0	5	32
if	9:4	10:27	2	(i_version != 0 x30313030 && i_version != 0 x30323030)
cond	9:8	9:49	3	i_version != 0 x30313030 && i_version != 0 x30323030
water	9:8	0:0	4	i_version
op	9:18	0:0	4	!=
water	9:21	0:0	4	0
water	9:22	0:0	4	x30313030
op	9:32	0:0	4	&&
water	9:35	0:0	4	i_version
op	9:45	0:0	4	!=
water	9:48	0:0	4	0
water	9:49	0:0	4	x30323030
stmts	10:8	10:27	3	
return	10:8	10:27	4	VLC_EGENERIC
water	10:15	0:0	5	VLC_EGENERIC
decl	11:4	11:55	2	const uint32_t	i_play_item_start
op	11:37	0:0	2	=
call	11:39	11:54	3	bs_read
arg	11:48	11:49	4	s
water	11:48	0:0	5	s
arg	11:51	11:54	4	32
water	11:51	0:0	5	32
decl	12:4	12:50	2	const uint32_t	i_mark_start
op	12:32	0:0	2	=
call	12:34	12:49	3	bs_read
arg	12:43	12:44	4	s
water	12:43	0:0	5	s
arg	12:46	12:49	4	32
water	12:46	0:0	5	32
call	13:4	13:19	2	bs_skip
arg	13:13	13:14	3	s
water	13:13	0:0	4	s
arg	13:16	13:19	3	32
water	13:16	0:0	4	32
water	13:20	0:0	2	;
water	15:4	0:0	2	p_mpls
op	15:10	0:0	2	->
water	15:12	0:0	2	i_id
op	15:17	0:0	2	=
water	15:19	0:0	2	i_id
water	15:23	0:0	2	;
decl	18:4	18:16	2	bs_t	ps
op	18:12	0:0	2	=
op	18:14	0:0	2	*
water	18:15	0:0	2	s
call	19:4	19:68	2	bs_skip
arg	19:13	19:16	3	&ps
op	19:13	0:0	4	&
water	19:14	0:0	4	ps
arg	19:18	19:68	3	8*(i_start+i_play_item_start)-bs_pos(s)
water	19:18	0:0	4	8
op	19:20	0:0	4	*
water	19:22	0:0	4	(
water	19:24	0:0	4	i_start
op	19:32	0:0	4	+
water	19:34	0:0	4	i_play_item_start
water	19:52	0:0	4	)
op	19:54	0:0	4	-
call	19:56	19:66	4	bs_pos
arg	19:64	19:66	5	s
water	19:64	0:0	6	s
water	19:69	0:0	2	;
call	20:4	20:21	2	bs_skip
arg	20:13	20:16	3	&ps
op	20:13	0:0	4	&
water	20:14	0:0	4	ps
arg	20:18	20:21	3	32
water	20:18	0:0	4	32
water	20:22	0:0	2	;
call	21:4	21:21	2	bs_skip
arg	21:13	21:16	3	&ps
op	21:13	0:0	4	&
water	21:14	0:0	4	ps
arg	21:18	21:21	3	16
water	21:18	0:0	4	16
water	21:22	0:0	2	;
decl	22:4	22:46	2	const int	i_play_item
op	22:26	0:0	2	=
call	22:28	22:45	3	bs_read
arg	22:37	22:40	4	&ps
op	22:37	0:0	5	&
water	22:38	0:0	5	ps
arg	22:42	22:45	4	16
water	22:42	0:0	5	16
decl	23:4	23:45	2	const int	i_sub_path
op	23:25	0:0	2	=
call	23:27	23:44	3	bs_read
arg	23:36	23:39	4	&ps
op	23:36	0:0	5	&
water	23:37	0:0	5	ps
arg	23:41	23:44	4	16
water	23:41	0:0	5	16
water	24:4	0:0	2	p_mpls
op	24:10	0:0	2	->
water	24:12	0:0	2	p_play_item
op	24:24	0:0	2	=
call	24:26	24:76	2	calloc
arg	24:34	24:45	3	i_play_item
water	24:34	0:0	4	i_play_item
arg	24:47	24:76	3	sizeof(*p_mpls->p_play_item)
op	24:47	0:0	4	sizeof
water	24:53	0:0	4	(
op	24:54	0:0	4	*
water	24:55	0:0	4	p_mpls
op	24:61	0:0	4	->
water	24:63	0:0	4	p_play_item
water	24:74	0:0	4	)
water	24:77	0:0	2	;
for	25:4	31:4	2	(p_mpls -> i_play_item = 0 ;p_mpls -> i_play_item < i_play_item;p_mpls -> i_play_item ++)
forinit	25:9	25:32	3	p_mpls -> i_play_item = 0 ;
water	25:9	0:0	4	p_mpls
op	25:15	0:0	4	->
water	25:17	0:0	4	i_play_item
op	25:29	0:0	4	=
water	25:31	0:0	4	0
water	25:32	0:0	4	;
cond	25:34	25:56	3	p_mpls -> i_play_item < i_play_item
water	25:34	0:0	4	p_mpls
op	25:40	0:0	4	->
water	25:42	0:0	4	i_play_item
op	25:54	0:0	4	<
water	25:56	0:0	4	i_play_item
forexpr	25:69	25:88	3	p_mpls -> i_play_item ++
water	25:69	0:0	4	p_mpls
op	25:75	0:0	4	->
water	25:77	0:0	4	i_play_item
op	25:88	0:0	4	++
stmts	26:4	31:4	3	
water	26:4	0:0	4	{
if	27:8	28:17	4	(! p_mpls -> p_play_item)
cond	27:12	27:21	5	! p_mpls -> p_play_item
op	27:12	0:0	6	!
water	27:13	0:0	6	p_mpls
op	27:19	0:0	6	->
water	27:21	0:0	6	p_play_item
stmts	28:12	28:17	5	
break	28:12	28:17	6	
decl	29:8	29:79	4	bd_mpls_play_item_t	*p_item
op	29:36	0:0	4	=
op	29:38	0:0	4	&
water	29:39	0:0	4	p_mpls
op	29:45	0:0	4	->
water	29:47	0:0	4	p_play_item
op	29:58	0:0	4	[
water	29:59	0:0	4	p_mpls
op	29:65	0:0	4	->
water	29:67	0:0	4	i_play_item
op	29:78	0:0	4	]
call	30:8	30:45	4	bd_mpls_play_item_Parse
arg	30:33	30:39	5	p_item
water	30:33	0:0	6	p_item
arg	30:41	30:45	5	&ps
op	30:41	0:0	6	&
water	30:42	0:0	6	ps
water	30:46	0:0	4	;
water	31:4	0:0	4	}
water	32:4	0:0	2	p_mpls
op	32:10	0:0	2	->
water	32:12	0:0	2	p_sub_path
op	32:23	0:0	2	=
call	32:25	32:73	2	calloc
arg	32:33	32:43	3	i_sub_path
water	32:33	0:0	4	i_sub_path
arg	32:45	32:73	3	sizeof(*p_mpls->p_sub_path)
op	32:45	0:0	4	sizeof
water	32:51	0:0	4	(
op	32:52	0:0	4	*
water	32:53	0:0	4	p_mpls
op	32:59	0:0	4	->
water	32:61	0:0	4	p_sub_path
water	32:71	0:0	4	)
water	32:74	0:0	2	;
for	33:4	39:4	2	(p_mpls -> i_sub_path = 0 ;p_mpls -> i_sub_path < i_sub_path;p_mpls -> i_sub_path ++)
forinit	33:9	33:31	3	p_mpls -> i_sub_path = 0 ;
water	33:9	0:0	4	p_mpls
op	33:15	0:0	4	->
water	33:17	0:0	4	i_sub_path
op	33:28	0:0	4	=
water	33:30	0:0	4	0
water	33:31	0:0	4	;
cond	33:33	33:54	3	p_mpls -> i_sub_path < i_sub_path
water	33:33	0:0	4	p_mpls
op	33:39	0:0	4	->
water	33:41	0:0	4	i_sub_path
op	33:52	0:0	4	<
water	33:54	0:0	4	i_sub_path
forexpr	33:66	33:84	3	p_mpls -> i_sub_path ++
water	33:66	0:0	4	p_mpls
op	33:72	0:0	4	->
water	33:74	0:0	4	i_sub_path
op	33:84	0:0	4	++
stmts	34:4	39:4	3	
water	34:4	0:0	4	{
if	35:8	36:17	4	(! p_mpls -> p_sub_path)
cond	35:12	35:21	5	! p_mpls -> p_sub_path
op	35:12	0:0	6	!
water	35:13	0:0	6	p_mpls
op	35:19	0:0	6	->
water	35:21	0:0	6	p_sub_path
stmts	36:12	36:17	5	
break	36:12	36:17	6	
decl	37:8	37:75	4	bd_mpls_sub_path_t	*p_sub
op	37:34	0:0	4	=
op	37:36	0:0	4	&
water	37:37	0:0	4	p_mpls
op	37:43	0:0	4	->
water	37:45	0:0	4	p_sub_path
op	37:55	0:0	4	[
water	37:56	0:0	4	p_mpls
op	37:62	0:0	4	->
water	37:64	0:0	4	i_sub_path
op	37:74	0:0	4	]
call	38:8	38:43	4	bd_mpls_sub_path_Parse
arg	38:32	38:37	5	p_sub
water	38:32	0:0	6	p_sub
arg	38:39	38:43	5	&ps
op	38:39	0:0	6	&
water	38:40	0:0	6	ps
water	38:44	0:0	4	;
water	39:4	0:0	4	}
decl	41:4	41:16	2	bs_t	ms
op	41:12	0:0	2	=
op	41:14	0:0	2	*
water	41:15	0:0	2	s
call	42:4	42:63	2	bs_skip
arg	42:13	42:16	3	&ms
op	42:13	0:0	4	&
water	42:14	0:0	4	ms
arg	42:18	42:63	3	8*(i_start+i_mark_start)-bs_pos(s)
water	42:18	0:0	4	8
op	42:20	0:0	4	*
water	42:22	0:0	4	(
water	42:24	0:0	4	i_start
op	42:32	0:0	4	+
water	42:34	0:0	4	i_mark_start
water	42:47	0:0	4	)
op	42:49	0:0	4	-
call	42:51	42:61	4	bs_pos
arg	42:59	42:61	5	s
water	42:59	0:0	6	s
water	42:64	0:0	2	;
call	43:4	43:21	2	bs_skip
arg	43:13	43:16	3	&ms
op	43:13	0:0	4	&
water	43:14	0:0	4	ms
arg	43:18	43:21	3	32
water	43:18	0:0	4	32
water	43:22	0:0	2	;
decl	44:4	44:41	2	const int	i_mark
op	44:21	0:0	2	=
call	44:23	44:40	3	bs_read
arg	44:32	44:35	4	&ms
op	44:32	0:0	5	&
water	44:33	0:0	5	ms
arg	44:37	44:40	4	16
water	44:37	0:0	5	16
water	45:4	0:0	2	p_mpls
op	45:10	0:0	2	->
water	45:12	0:0	2	p_mark
op	45:19	0:0	2	=
call	45:21	45:61	2	calloc
arg	45:29	45:35	3	i_mark
water	45:29	0:0	4	i_mark
arg	45:37	45:61	3	sizeof(*p_mpls->p_mark)
op	45:37	0:0	4	sizeof
water	45:43	0:0	4	(
op	45:44	0:0	4	*
water	45:45	0:0	4	p_mpls
op	45:51	0:0	4	->
water	45:53	0:0	4	p_mark
water	45:59	0:0	4	)
water	45:62	0:0	2	;
for	46:4	52:4	2	(p_mpls -> i_mark = 0 ;p_mpls -> i_mark < i_mark;p_mpls -> i_mark ++)
forinit	46:9	46:27	3	p_mpls -> i_mark = 0 ;
water	46:9	0:0	4	p_mpls
op	46:15	0:0	4	->
water	46:17	0:0	4	i_mark
op	46:24	0:0	4	=
water	46:26	0:0	4	0
water	46:27	0:0	4	;
cond	46:29	46:46	3	p_mpls -> i_mark < i_mark
water	46:29	0:0	4	p_mpls
op	46:35	0:0	4	->
water	46:37	0:0	4	i_mark
op	46:44	0:0	4	<
water	46:46	0:0	4	i_mark
forexpr	46:54	46:68	3	p_mpls -> i_mark ++
water	46:54	0:0	4	p_mpls
op	46:60	0:0	4	->
water	46:62	0:0	4	i_mark
op	46:68	0:0	4	++
stmts	47:4	52:4	3	
water	47:4	0:0	4	{
if	48:8	49:17	4	(! p_mpls -> p_mark)
cond	48:12	48:21	5	! p_mpls -> p_mark
op	48:12	0:0	6	!
water	48:13	0:0	6	p_mpls
op	48:19	0:0	6	->
water	48:21	0:0	6	p_mark
stmts	49:12	49:17	5	
break	49:12	49:17	6	
decl	50:8	50:64	4	bd_mpls_mark_t	*p_mark
op	50:31	0:0	4	=
op	50:33	0:0	4	&
water	50:34	0:0	4	p_mpls
op	50:40	0:0	4	->
water	50:42	0:0	4	p_mark
op	50:48	0:0	4	[
water	50:49	0:0	4	p_mpls
op	50:55	0:0	4	->
water	50:57	0:0	4	i_mark
op	50:63	0:0	4	]
call	51:8	51:40	4	bd_mpls_mark_Parse
arg	51:28	51:34	5	p_mark
water	51:28	0:0	6	p_mark
arg	51:36	51:40	5	&ms
op	51:36	0:0	6	&
water	51:37	0:0	6	ms
water	51:41	0:0	4	;
water	52:4	0:0	4	}
return	54:4	54:22	2	VLC_SUCCESS
water	54:11	0:0	3	VLC_SUCCESS
