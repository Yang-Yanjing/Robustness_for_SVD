func	2:0	99:0	0	static OMX_ERRORTYPE	PortReconfigure
params	2:36	0:0	1	
param	2:37	2:53	2	decoder_t *	p_dec
param	2:55	2:70	2	OmxPort *	p_port
stmnts	0:0	98:20	1	
decl	4:4	4:39	2	decoder_sys_t	*p_sys
op	4:25	0:0	2	=
water	4:27	0:0	2	p_dec
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:43	2	OMX_PARAM_PORTDEFINITIONTYPE	definition
decl	6:4	6:34	2	OMX_BUFFERHEADERTYPE	*p_buffer
decl	7:4	7:27	2	OMX_ERRORTYPE	omx_error
decl	8:4	8:18	2	unsigned int	i
call	10:4	10:33	2	OMX_INIT_STRUCTURE
arg	10:23	10:33	3	definition
water	10:23	0:0	4	definition
water	10:34	0:0	2	;
water	11:4	0:0	2	definition
op	11:14	0:0	2	.
water	11:15	0:0	2	nPortIndex
op	11:26	0:0	2	=
water	11:28	0:0	2	p_port
op	11:34	0:0	2	->
water	11:36	0:0	2	i_port_index
water	11:48	0:0	2	;
water	12:4	0:0	2	omx_error
op	12:14	0:0	2	=
call	12:16	13:44	2	OMX_GetParameter
arg	12:33	12:57	3	p_dec->p_sys->omx_handle
water	12:33	0:0	4	p_dec
op	12:38	0:0	4	->
water	12:40	0:0	4	p_sys
op	12:45	0:0	4	->
water	12:47	0:0	4	omx_handle
arg	12:59	12:87	3	OMX_IndexParamPortDefinition
water	12:59	0:0	4	OMX_IndexParamPortDefinition
arg	13:33	13:44	3	&definition
op	13:33	0:0	4	&
water	13:34	0:0	4	definition
water	13:45	0:0	2	;
if	14:4	17:33	2	(omx_error != OMX_ErrorNone || ( p_dec -> fmt_in . i_cat == VIDEO_ES && ( ! definition . format . video . nFrameWidth || ! definition . format . video . nFrameHeight ) ))
cond	14:7	16:45	3	omx_error != OMX_ErrorNone || ( p_dec -> fmt_in . i_cat == VIDEO_ES && ( ! definition . format . video . nFrameWidth || ! definition . format . video . nFrameHeight ) )
water	14:7	0:0	4	omx_error
op	14:17	0:0	4	!=
water	14:20	0:0	4	OMX_ErrorNone
op	14:34	0:0	4	||
water	14:37	0:0	4	(
water	14:38	0:0	4	p_dec
op	14:43	0:0	4	->
water	14:45	0:0	4	fmt_in
op	14:51	0:0	4	.
water	14:52	0:0	4	i_cat
op	14:58	0:0	4	==
water	14:61	0:0	4	VIDEO_ES
op	14:70	0:0	4	&&
water	15:7	0:0	4	(
op	15:8	0:0	4	!
water	15:9	0:0	4	definition
op	15:19	0:0	4	.
water	15:20	0:0	4	format
op	15:26	0:0	4	.
water	15:27	0:0	4	video
op	15:32	0:0	4	.
water	15:33	0:0	4	nFrameWidth
op	15:45	0:0	4	||
op	16:7	0:0	4	!
water	16:8	0:0	4	definition
op	16:18	0:0	4	.
water	16:19	0:0	4	format
op	16:25	0:0	4	.
water	16:26	0:0	4	video
op	16:31	0:0	4	.
water	16:32	0:0	4	nFrameHeight
water	16:44	0:0	4	)
water	16:45	0:0	4	)
stmts	17:8	17:33	3	
return	17:8	17:33	4	OMX_ErrorUndefined
water	17:15	0:0	5	OMX_ErrorUndefined
water	18:4	0:0	2	omx_error
op	18:14	0:0	2	=
call	18:16	19:59	2	OMX_SendCommand
arg	18:33	18:50	3	p_sys->omx_handle
water	18:33	0:0	4	p_sys
op	18:38	0:0	4	->
water	18:40	0:0	4	omx_handle
arg	18:52	18:74	3	OMX_CommandPortDisable
water	18:52	0:0	4	OMX_CommandPortDisable
arg	19:33	19:53	3	p_port->i_port_index
water	19:33	0:0	4	p_port
op	19:39	0:0	4	->
water	19:41	0:0	4	i_port_index
arg	19:55	19:59	3	NULL
water	19:55	0:0	4	NULL
water	19:60	0:0	2	;
call	20:4	21:53	2	CHECK_ERROR
arg	20:16	20:25	3	omx_error
water	20:16	0:0	4	omx_error
arg	20:27	20:69	3	"OMX_CommandPortDisable on %i failed (%x)"
water	20:27	0:0	4	"OMX_CommandPortDisable on %i failed (%x)"
arg	21:16	21:41	3	(int)p_port->i_port_index
water	21:16	0:0	4	(
water	21:17	0:0	4	int
water	21:20	0:0	4	)
water	21:21	0:0	4	p_port
op	21:27	0:0	4	->
water	21:29	0:0	4	i_port_index
arg	21:43	21:53	3	omx_error
water	21:43	0:0	4	omx_error
water	21:54	0:0	2	;
for	22:4	35:4	2	(i = 0 ;i < p_port -> i_buffers;i ++)
forinit	22:8	22:13	3	i = 0 ;
water	22:8	0:0	4	i
op	22:10	0:0	4	=
water	22:12	0:0	4	0
water	22:13	0:0	4	;
cond	22:15	22:27	3	i < p_port -> i_buffers
water	22:15	0:0	4	i
op	22:17	0:0	4	<
water	22:19	0:0	4	p_port
op	22:25	0:0	4	->
water	22:27	0:0	4	i_buffers
forexpr	22:38	22:39	3	i ++
water	22:38	0:0	4	i
op	22:39	0:0	4	++
stmts	23:4	35:4	3	
water	23:4	0:0	4	{
call	24:8	24:44	4	OMX_FIFO_GET
arg	24:21	24:34	5	&p_port->fifo
op	24:21	0:0	6	&
water	24:22	0:0	6	p_port
op	24:28	0:0	6	->
water	24:30	0:0	6	fifo
arg	24:36	24:44	5	p_buffer
water	24:36	0:0	6	p_buffer
water	24:45	0:0	4	;
if	25:8	26:65	4	(p_buffer -> pAppPrivate != NULL)
cond	25:12	25:37	5	p_buffer -> pAppPrivate != NULL
water	25:12	0:0	6	p_buffer
op	25:20	0:0	6	->
water	25:22	0:0	6	pAppPrivate
op	25:34	0:0	6	!=
water	25:37	0:0	6	NULL
stmts	26:12	26:65	5	
call	26:12	26:64	6	decoder_DeletePicture
arg	26:35	26:40	7	p_dec
water	26:35	0:0	8	p_dec
arg	26:42	26:64	7	p_buffer->pAppPrivate
water	26:42	0:0	8	p_buffer
op	26:50	0:0	8	->
water	26:52	0:0	8	pAppPrivate
water	26:65	0:0	6	;
if	27:8	31:8	4	(p_buffer -> nFlags & SENTINEL_FLAG)
cond	27:12	27:31	5	p_buffer -> nFlags & SENTINEL_FLAG
water	27:12	0:0	6	p_buffer
op	27:20	0:0	6	->
water	27:22	0:0	6	nFlags
op	27:29	0:0	6	&
water	27:31	0:0	6	SENTINEL_FLAG
stmts	27:46	31:8	5	
water	27:46	0:0	6	{
call	28:12	28:25	6	free
arg	28:17	28:25	7	p_buffer
water	28:17	0:0	8	p_buffer
water	28:26	0:0	6	;
water	29:12	0:0	6	i
op	29:13	0:0	6	--
water	29:15	0:0	6	;
continue	30:12	30:20	6	
water	31:8	0:0	6	}
water	32:8	0:0	4	omx_error
op	32:18	0:0	4	=
call	32:20	33:67	4	OMX_FreeBuffer
arg	32:36	32:53	5	p_sys->omx_handle
water	32:36	0:0	6	p_sys
op	32:41	0:0	6	->
water	32:43	0:0	6	omx_handle
arg	33:36	33:56	5	p_port->i_port_index
water	33:36	0:0	6	p_port
op	33:42	0:0	6	->
water	33:44	0:0	6	i_port_index
arg	33:58	33:67	5	p_buffer
water	33:58	0:0	6	p_buffer
water	33:68	0:0	4	;
if	34:8	34:44	4	(omx_error != OMX_ErrorNone)
cond	34:11	34:24	5	omx_error != OMX_ErrorNone
water	34:11	0:0	6	omx_error
op	34:21	0:0	6	!=
water	34:24	0:0	6	OMX_ErrorNone
stmts	34:39	34:44	5	
break	34:39	34:44	6	
water	35:4	0:0	4	}
call	36:4	37:56	2	CHECK_ERROR
arg	36:16	36:25	3	omx_error
water	36:16	0:0	4	omx_error
arg	36:27	36:63	3	"OMX_FreeBuffer failed (%x, %i, %i)"
water	36:27	0:0	4	"OMX_FreeBuffer failed (%x, %i, %i)"
arg	37:16	37:25	3	omx_error
water	37:16	0:0	4	omx_error
arg	37:27	37:52	3	(int)p_port->i_port_index
water	37:27	0:0	4	(
water	37:28	0:0	4	int
water	37:31	0:0	4	)
water	37:32	0:0	4	p_port
op	37:38	0:0	4	->
water	37:40	0:0	4	i_port_index
arg	37:54	37:56	3	i
water	37:54	0:0	4	i
water	37:57	0:0	2	;
water	38:4	0:0	2	omx_error
op	38:14	0:0	2	=
call	38:16	38:90	2	WaitForSpecificOmxEvent
arg	38:40	38:59	3	&p_sys->event_queue
op	38:40	0:0	4	&
water	38:41	0:0	4	p_sys
op	38:46	0:0	4	->
water	38:48	0:0	4	event_queue
arg	38:61	38:81	3	OMX_EventCmdComplete
water	38:61	0:0	4	OMX_EventCmdComplete
arg	38:83	38:84	3	0
water	38:83	0:0	4	0
arg	38:86	38:87	3	0
water	38:86	0:0	4	0
arg	38:89	38:90	3	0
water	38:89	0:0	4	0
water	38:91	0:0	2	;
call	39:4	39:73	2	CHECK_ERROR
arg	39:16	39:25	3	omx_error
water	39:16	0:0	4	omx_error
arg	39:27	39:61	3	"Wait for PortDisable failed (%x)"
water	39:27	0:0	4	"Wait for PortDisable failed (%x)"
arg	39:63	39:73	3	omx_error
water	39:63	0:0	4	omx_error
water	39:74	0:0	2	;
water	41:4	0:0	2	omx_error
op	41:14	0:0	2	=
call	41:16	41:70	2	GetPortDefinition
arg	41:34	41:39	3	p_dec
water	41:34	0:0	4	p_dec
arg	41:41	41:52	3	&p_sys->out
op	41:41	0:0	4	&
water	41:42	0:0	4	p_sys
op	41:47	0:0	4	->
water	41:49	0:0	4	out
arg	41:54	41:70	3	p_sys->out.p_fmt
water	41:54	0:0	4	p_sys
op	41:59	0:0	4	->
water	41:61	0:0	4	out
op	41:64	0:0	4	.
water	41:65	0:0	4	p_fmt
water	41:71	0:0	2	;
if	42:4	42:45	2	(omx_error != OMX_ErrorNone)
cond	42:7	42:20	3	omx_error != OMX_ErrorNone
water	42:7	0:0	4	omx_error
op	42:17	0:0	4	!=
water	42:20	0:0	4	OMX_ErrorNone
stmts	42:35	42:45	3	
goto	42:35	42:45	4	error
water	42:40	0:0	5	error
if	43:4	60:4	2	(p_dec -> fmt_in . i_cat != AUDIO_ES)
cond	43:8	43:31	3	p_dec -> fmt_in . i_cat != AUDIO_ES
water	43:8	0:0	4	p_dec
op	43:13	0:0	4	->
water	43:15	0:0	4	fmt_in
op	43:21	0:0	4	.
water	43:22	0:0	4	i_cat
op	43:28	0:0	4	!=
water	43:31	0:0	4	AUDIO_ES
stmts	44:4	60:4	3	
water	44:4	0:0	4	{
water	56:8	0:0	4	omx_error
op	56:18	0:0	4	=
call	56:20	57:48	4	OMX_SetParameter
arg	56:37	56:61	5	p_dec->p_sys->omx_handle
water	56:37	0:0	6	p_dec
op	56:42	0:0	6	->
water	56:44	0:0	6	p_sys
op	56:49	0:0	6	->
water	56:51	0:0	6	omx_handle
arg	56:63	56:91	5	OMX_IndexParamPortDefinition
water	56:63	0:0	6	OMX_IndexParamPortDefinition
arg	57:37	57:48	5	&definition
op	57:37	0:0	6	&
water	57:38	0:0	6	definition
water	57:49	0:0	4	;
call	58:8	59:55	4	CHECK_ERROR
arg	58:20	58:29	5	omx_error
water	58:20	0:0	6	omx_error
arg	58:31	58:66	5	"OMX_SetParameter failed (%x : %s)"
water	58:31	0:0	6	"OMX_SetParameter failed (%x : %s)"
arg	59:20	59:29	5	omx_error
water	59:20	0:0	6	omx_error
arg	59:31	59:55	5	ErrorToString(omx_error)
call	59:31	59:54	6	ErrorToString
arg	59:45	59:54	7	omx_error
water	59:45	0:0	8	omx_error
water	59:56	0:0	4	;
water	60:4	0:0	4	}
water	61:4	0:0	2	omx_error
op	61:14	0:0	2	=
call	61:16	62:59	2	OMX_SendCommand
arg	61:33	61:50	3	p_sys->omx_handle
water	61:33	0:0	4	p_sys
op	61:38	0:0	4	->
water	61:40	0:0	4	omx_handle
arg	61:52	61:73	3	OMX_CommandPortEnable
water	61:52	0:0	4	OMX_CommandPortEnable
arg	62:33	62:53	3	p_port->i_port_index
water	62:33	0:0	4	p_port
op	62:39	0:0	4	->
water	62:41	0:0	4	i_port_index
arg	62:55	62:59	3	NULL
water	62:55	0:0	4	NULL
water	62:60	0:0	2	;
call	63:4	64:53	2	CHECK_ERROR
arg	63:16	63:25	3	omx_error
water	63:16	0:0	4	omx_error
arg	63:27	63:68	3	"OMX_CommandPortEnable on %i failed (%x)"
water	63:27	0:0	4	"OMX_CommandPortEnable on %i failed (%x)"
arg	64:16	64:41	3	(int)p_port->i_port_index
water	64:16	0:0	4	(
water	64:17	0:0	4	int
water	64:20	0:0	4	)
water	64:21	0:0	4	p_port
op	64:27	0:0	4	->
water	64:29	0:0	4	i_port_index
arg	64:43	64:53	3	omx_error
water	64:43	0:0	4	omx_error
water	64:54	0:0	2	;
if	65:4	73:4	2	(p_port -> definition . nBufferCountActual > p_port -> i_buffers)
cond	65:8	65:56	3	p_port -> definition . nBufferCountActual > p_port -> i_buffers
water	65:8	0:0	4	p_port
op	65:14	0:0	4	->
water	65:16	0:0	4	definition
op	65:26	0:0	4	.
water	65:27	0:0	4	nBufferCountActual
op	65:46	0:0	4	>
water	65:48	0:0	4	p_port
op	65:54	0:0	4	->
water	65:56	0:0	4	i_buffers
stmts	65:67	73:4	3	
water	65:67	0:0	4	{
call	66:8	66:31	4	free
arg	66:13	66:31	5	p_port->pp_buffers
water	66:13	0:0	6	p_port
op	66:19	0:0	6	->
water	66:21	0:0	6	pp_buffers
water	66:32	0:0	4	;
water	67:8	0:0	4	p_port
op	67:14	0:0	4	->
water	67:16	0:0	4	pp_buffers
op	67:27	0:0	4	=
call	67:29	67:105	4	malloc
arg	67:36	67:105	5	p_port->definition.nBufferCountActual*sizeof(OMX_BUFFERHEADERTYPE*)
water	67:36	0:0	6	p_port
op	67:42	0:0	6	->
water	67:44	0:0	6	definition
op	67:54	0:0	6	.
water	67:55	0:0	6	nBufferCountActual
op	67:74	0:0	6	*
op	67:76	0:0	6	sizeof
water	67:82	0:0	6	(
water	67:83	0:0	6	OMX_BUFFERHEADERTYPE
op	67:103	0:0	6	*
water	67:104	0:0	6	)
water	67:106	0:0	4	;
if	68:8	72:8	4	(! p_port -> pp_buffers)
cond	68:11	68:20	5	! p_port -> pp_buffers
op	68:11	0:0	6	!
water	68:12	0:0	6	p_port
op	68:18	0:0	6	->
water	68:20	0:0	6	pp_buffers
stmts	69:8	72:8	5	
water	69:8	0:0	6	{
water	70:12	0:0	6	omx_error
op	70:22	0:0	6	=
water	70:24	0:0	6	OMX_ErrorInsufficientResources
water	70:54	0:0	6	;
call	71:12	71:61	6	CHECK_ERROR
arg	71:24	71:33	7	omx_error
water	71:24	0:0	8	omx_error
arg	71:35	71:61	7	"memory allocation failed"
water	71:35	0:0	8	"memory allocation failed"
water	71:62	0:0	6	;
water	72:8	0:0	6	}
water	73:4	0:0	4	}
water	74:4	0:0	2	p_port
op	74:10	0:0	2	->
water	74:12	0:0	2	i_buffers
op	74:22	0:0	2	=
water	74:24	0:0	2	p_port
op	74:30	0:0	2	->
water	74:32	0:0	2	definition
op	74:42	0:0	2	.
water	74:43	0:0	2	nBufferCountActual
water	74:61	0:0	2	;
for	75:4	89:4	2	(i = 0 ;i < p_port -> i_buffers;i ++)
forinit	75:8	75:13	3	i = 0 ;
water	75:8	0:0	4	i
op	75:10	0:0	4	=
water	75:12	0:0	4	0
water	75:13	0:0	4	;
cond	75:15	75:27	3	i < p_port -> i_buffers
water	75:15	0:0	4	i
op	75:17	0:0	4	<
water	75:19	0:0	4	p_port
op	75:25	0:0	4	->
water	75:27	0:0	4	i_buffers
forexpr	75:38	75:39	3	i ++
water	75:38	0:0	4	i
op	75:39	0:0	4	++
stmts	76:4	89:4	3	
water	76:4	0:0	4	{
if	77:8	81:72	4	(p_port -> b_direct)
cond	77:11	77:19	5	p_port -> b_direct
water	77:11	0:0	6	p_port
op	77:17	0:0	6	->
water	77:19	0:0	6	b_direct
stmts	78:12	81:72	5	
water	78:12	0:0	6	omx_error
op	78:22	0:0	6	=
call	79:16	81:71	6	OMX_UseBuffer
arg	79:31	79:48	7	p_sys->omx_handle
water	79:31	0:0	8	p_sys
op	79:36	0:0	8	->
water	79:38	0:0	8	omx_handle
arg	79:50	79:72	7	&p_port->pp_buffers[i]
op	79:50	0:0	8	&
water	79:51	0:0	8	p_port
op	79:57	0:0	8	->
water	79:59	0:0	8	pp_buffers
op	79:69	0:0	8	[
water	79:70	0:0	8	i
op	79:71	0:0	8	]
arg	80:31	80:51	7	p_port->i_port_index
water	80:31	0:0	8	p_port
op	80:37	0:0	8	->
water	80:39	0:0	8	i_port_index
arg	80:53	80:54	7	0
water	80:53	0:0	8	0
arg	81:31	81:61	7	p_port->definition.nBufferSize
water	81:31	0:0	8	p_port
op	81:37	0:0	8	->
water	81:39	0:0	8	definition
op	81:49	0:0	8	.
water	81:50	0:0	8	nBufferSize
arg	81:63	81:71	7	(void*)1
water	81:63	0:0	8	(
water	81:64	0:0	8	void
op	81:68	0:0	8	*
water	81:69	0:0	8	)
water	81:70	0:0	8	1
water	81:72	0:0	6	;
else	82:8	86:67	4
stmts	83:12	86:67	5	
water	83:12	0:0	6	omx_error
op	83:22	0:0	6	=
call	84:16	86:66	6	OMX_AllocateBuffer
arg	84:36	84:53	7	p_sys->omx_handle
water	84:36	0:0	8	p_sys
op	84:41	0:0	8	->
water	84:43	0:0	8	omx_handle
arg	84:55	84:77	7	&p_port->pp_buffers[i]
op	84:55	0:0	8	&
water	84:56	0:0	8	p_port
op	84:62	0:0	8	->
water	84:64	0:0	8	pp_buffers
op	84:74	0:0	8	[
water	84:75	0:0	8	i
op	84:76	0:0	8	]
arg	85:36	85:56	7	p_port->i_port_index
water	85:36	0:0	8	p_port
op	85:42	0:0	8	->
water	85:44	0:0	8	i_port_index
arg	85:58	85:59	7	0
water	85:58	0:0	8	0
arg	86:36	86:66	7	p_port->definition.nBufferSize
water	86:36	0:0	8	p_port
op	86:42	0:0	8	->
water	86:44	0:0	8	definition
op	86:54	0:0	8	.
water	86:55	0:0	8	nBufferSize
water	86:67	0:0	6	;
if	87:8	87:44	4	(omx_error != OMX_ErrorNone)
cond	87:11	87:24	5	omx_error != OMX_ErrorNone
water	87:11	0:0	6	omx_error
op	87:21	0:0	6	!=
water	87:24	0:0	6	OMX_ErrorNone
stmts	87:39	87:44	5	
break	87:39	87:44	6	
call	88:8	88:57	4	OMX_FIFO_PUT
arg	88:21	88:34	5	&p_port->fifo
op	88:21	0:0	6	&
water	88:22	0:0	6	p_port
op	88:28	0:0	6	->
water	88:30	0:0	6	fifo
arg	88:36	88:57	5	p_port->pp_buffers[i]
water	88:36	0:0	6	p_port
op	88:42	0:0	6	->
water	88:44	0:0	6	pp_buffers
op	88:54	0:0	6	[
water	88:55	0:0	6	i
op	88:56	0:0	6	]
water	88:58	0:0	4	;
water	89:4	0:0	4	}
water	90:4	0:0	2	p_port
op	90:10	0:0	2	->
water	90:12	0:0	2	i_buffers
op	90:22	0:0	2	=
water	90:24	0:0	2	i
water	90:25	0:0	2	;
call	91:4	92:56	2	CHECK_ERROR
arg	91:16	91:25	3	omx_error
water	91:16	0:0	4	omx_error
arg	91:27	91:62	3	"OMX_UseBuffer failed (%x, %i, %i)"
water	91:27	0:0	4	"OMX_UseBuffer failed (%x, %i, %i)"
arg	92:16	92:25	3	omx_error
water	92:16	0:0	4	omx_error
arg	92:27	92:52	3	(int)p_port->i_port_index
water	92:27	0:0	4	(
water	92:28	0:0	4	int
water	92:31	0:0	4	)
water	92:32	0:0	4	p_port
op	92:38	0:0	4	->
water	92:40	0:0	4	i_port_index
arg	92:54	92:56	3	i
water	92:54	0:0	4	i
water	92:57	0:0	2	;
water	93:4	0:0	2	omx_error
op	93:14	0:0	2	=
call	93:16	93:90	2	WaitForSpecificOmxEvent
arg	93:40	93:59	3	&p_sys->event_queue
op	93:40	0:0	4	&
water	93:41	0:0	4	p_sys
op	93:46	0:0	4	->
water	93:48	0:0	4	event_queue
arg	93:61	93:81	3	OMX_EventCmdComplete
water	93:61	0:0	4	OMX_EventCmdComplete
arg	93:83	93:84	3	0
water	93:83	0:0	4	0
arg	93:86	93:87	3	0
water	93:86	0:0	4	0
arg	93:89	93:90	3	0
water	93:89	0:0	4	0
water	93:91	0:0	2	;
call	94:4	94:72	2	CHECK_ERROR
arg	94:16	94:25	3	omx_error
water	94:16	0:0	4	omx_error
arg	94:27	94:60	3	"Wait for PortEnable failed (%x)"
water	94:27	0:0	4	"Wait for PortEnable failed (%x)"
arg	94:62	94:72	3	omx_error
water	94:62	0:0	4	omx_error
water	94:73	0:0	2	;
call	95:4	95:68	2	PrintOmx
arg	95:13	95:18	3	p_dec
water	95:13	0:0	4	p_dec
arg	95:20	95:37	3	p_sys->omx_handle
water	95:20	0:0	4	p_sys
op	95:25	0:0	4	->
water	95:27	0:0	4	omx_handle
arg	95:39	95:68	3	p_dec->p_sys->in.i_port_index
water	95:39	0:0	4	p_dec
op	95:44	0:0	4	->
water	95:46	0:0	4	p_sys
op	95:51	0:0	4	->
water	95:53	0:0	4	in
op	95:55	0:0	4	.
water	95:56	0:0	4	i_port_index
water	95:69	0:0	2	;
call	96:4	96:69	2	PrintOmx
arg	96:13	96:18	3	p_dec
water	96:13	0:0	4	p_dec
arg	96:20	96:37	3	p_sys->omx_handle
water	96:20	0:0	4	p_sys
op	96:25	0:0	4	->
water	96:27	0:0	4	omx_handle
arg	96:39	96:69	3	p_dec->p_sys->out.i_port_index
water	96:39	0:0	4	p_dec
op	96:44	0:0	4	->
water	96:46	0:0	4	p_sys
op	96:51	0:0	4	->
water	96:53	0:0	4	out
op	96:56	0:0	4	.
water	96:57	0:0	4	i_port_index
water	96:70	0:0	2	;
label	97:1	97:6	2	error :
return	98:4	98:20	2	omx_error
water	98:11	0:0	3	omx_error
