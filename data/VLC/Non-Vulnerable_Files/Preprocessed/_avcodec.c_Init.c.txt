func	2:0	57:0	0	static int	Init
params	2:15	0:0	1	
param	2:16	2:28	2	vlc_va_t *	va
param	2:30	2:41	2	void * *	ctxp
param	2:43	2:64	2	vlc_fourcc_t *	chromap
param	3:16	3:25	2	int	width
param	3:27	3:37	2	int	height
stmnts	0:0	56:22	1	
decl	5:4	5:31	2	vlc_va_sys_t	*sys
op	5:22	0:0	2	=
water	5:24	0:0	2	va
op	5:26	0:0	2	->
water	5:28	0:0	2	sys
decl	6:4	6:17	2	VdpStatus	err
water	7:4	0:0	2	width
op	7:10	0:0	2	=
water	7:12	0:0	2	(
water	7:13	0:0	2	width
op	7:19	0:0	2	+
water	7:21	0:0	2	1
water	7:22	0:0	2	)
op	7:24	0:0	2	&
water	7:26	0:0	2	~1
water	7:28	0:0	2	;
water	8:4	0:0	2	height
op	8:11	0:0	2	=
water	8:13	0:0	2	(
water	8:14	0:0	2	height
op	8:21	0:0	2	+
water	8:23	0:0	2	3
water	8:24	0:0	2	)
op	8:26	0:0	2	&
water	8:28	0:0	2	~3
water	8:30	0:0	2	;
water	9:4	0:0	2	sys
op	9:7	0:0	2	->
water	9:9	0:0	2	width
op	9:15	0:0	2	=
water	9:17	0:0	2	width
water	9:22	0:0	2	;
water	10:4	0:0	2	sys
op	10:7	0:0	2	->
water	10:9	0:0	2	height
op	10:16	0:0	2	=
water	10:18	0:0	2	height
water	10:24	0:0	2	;
water	11:4	0:0	2	unsigned
water	11:13	0:0	2	surfaces
op	11:22	0:0	2	=
water	11:24	0:0	2	2
water	11:25	0:0	2	;
switch	12:4	19:4	2	(sys -> profile)
cond	12:12	12:17	3	sys -> profile
water	12:12	0:0	4	sys
op	12:15	0:0	4	->
water	12:17	0:0	4	profile
stmts	13:4	19:4	3	
water	13:4	0:0	4	{
label	14:6	14:44	4	case VDP_DECODER_PROFILE_H264_BASELINE :
label	15:6	15:40	4	case VDP_DECODER_PROFILE_H264_MAIN :
label	16:6	16:40	4	case VDP_DECODER_PROFILE_H264_HIGH :
water	17:8	0:0	4	surfaces
op	17:17	0:0	4	=
water	17:19	0:0	4	16
water	17:21	0:0	4	;
break	18:8	18:13	4	
water	19:4	0:0	4	}
decl	20:4	20:74	2	vlc_vdp_video_field_t	**pool
op	20:33	0:0	2	=
call	20:35	20:73	3	malloc
arg	20:42	20:73	4	sizeof(*pool)*(surfaces+6)
op	20:42	0:0	5	sizeof
water	20:49	0:0	5	(
op	20:50	0:0	5	*
water	20:51	0:0	5	pool
water	20:55	0:0	5	)
op	20:57	0:0	5	*
water	20:59	0:0	5	(
water	20:60	0:0	5	surfaces
op	20:69	0:0	5	+
water	20:71	0:0	5	6
water	20:72	0:0	5	)
if	21:4	22:25	2	(unlikely (pool == NULL ))
cond	21:8	21:29	3	unlikely (pool == NULL )
call	21:8	21:29	4	unlikely
arg	21:17	21:29	5	pool==NULL
water	21:17	0:0	6	pool
op	21:22	0:0	6	==
water	21:25	0:0	6	NULL
stmts	22:8	22:25	3	
return	22:8	22:25	4	VLC_ENOMEM
water	22:15	0:0	5	VLC_ENOMEM
water	23:4	0:0	2	unsigned
water	23:13	0:0	2	i
op	23:15	0:0	2	=
water	23:17	0:0	2	0
water	23:18	0:0	2	;
while	24:4	30:4	2	(i < surfaces + 5)
cond	24:11	24:26	3	i < surfaces + 5
water	24:11	0:0	4	i
op	24:13	0:0	4	<
water	24:15	0:0	4	surfaces
op	24:24	0:0	4	+
water	24:26	0:0	4	5
stmts	25:4	30:4	3	
water	25:4	0:0	4	{
water	26:8	0:0	4	pool
op	26:12	0:0	4	[
water	26:13	0:0	4	i
op	26:14	0:0	4	]
op	26:16	0:0	4	=
call	26:18	26:34	4	CreateSurface
arg	26:32	26:34	5	va
water	26:32	0:0	6	va
water	26:35	0:0	4	;
if	27:8	28:17	4	(pool [ i ] == NULL)
cond	27:12	27:23	5	pool [ i ] == NULL
water	27:12	0:0	6	pool
op	27:16	0:0	6	[
water	27:17	0:0	6	i
op	27:18	0:0	6	]
op	27:20	0:0	6	==
water	27:23	0:0	6	NULL
stmts	28:12	28:17	5	
break	28:12	28:17	6	
water	29:8	0:0	4	i
op	29:9	0:0	4	++
water	29:11	0:0	4	;
water	30:4	0:0	4	}
water	31:4	0:0	2	pool
op	31:8	0:0	2	[
water	31:9	0:0	2	i
op	31:10	0:0	2	]
op	31:12	0:0	2	=
water	31:14	0:0	2	NULL
water	31:18	0:0	2	;
if	32:4	39:4	2	(i < surfaces + 3)
cond	32:8	32:23	3	i < surfaces + 3
water	32:8	0:0	4	i
op	32:10	0:0	4	<
water	32:12	0:0	4	surfaces
op	32:21	0:0	4	+
water	32:23	0:0	4	3
stmts	33:4	39:4	3	
water	33:4	0:0	4	{
call	34:8	34:42	4	msg_Err
arg	34:16	34:18	5	va
water	34:16	0:0	6	va
arg	34:20	34:42	5	"not enough video RAM"
water	34:20	0:0	6	"not enough video RAM"
water	34:43	0:0	4	;
while	35:8	36:37	4	(i > 0)
cond	35:15	35:19	5	i > 0
water	35:15	0:0	6	i
op	35:17	0:0	6	>
water	35:19	0:0	6	0
stmts	36:12	36:37	5	
call	36:12	36:36	6	DestroySurface
arg	36:27	36:36	7	pool[--i]
water	36:27	0:0	8	pool
op	36:31	0:0	8	[
op	36:32	0:0	8	--
water	36:34	0:0	8	i
op	36:35	0:0	8	]
water	36:37	0:0	6	;
call	37:8	37:17	4	free
arg	37:13	37:17	5	pool
water	37:13	0:0	6	pool
water	37:18	0:0	4	;
return	38:8	38:25	4	VLC_ENOMEM
water	38:15	0:0	5	VLC_ENOMEM
water	39:4	0:0	4	}
water	40:4	0:0	2	sys
op	40:7	0:0	2	->
water	40:9	0:0	2	pool
op	40:14	0:0	2	=
water	40:16	0:0	2	pool
water	40:20	0:0	2	;
water	41:4	0:0	2	err
op	41:8	0:0	2	=
call	41:10	42:69	2	vdp_decoder_create
arg	41:29	41:37	3	sys->vdp
water	41:29	0:0	4	sys
op	41:32	0:0	4	->
water	41:34	0:0	4	vdp
arg	41:39	41:50	3	sys->device
water	41:39	0:0	4	sys
op	41:42	0:0	4	->
water	41:44	0:0	4	device
arg	41:52	41:64	3	sys->profile
water	41:52	0:0	4	sys
op	41:55	0:0	4	->
water	41:57	0:0	4	profile
arg	41:66	41:71	3	width
water	41:66	0:0	4	width
arg	42:29	42:35	3	height
water	42:29	0:0	4	height
arg	42:37	42:45	3	surfaces
water	42:37	0:0	4	surfaces
arg	42:47	42:69	3	&sys->context->decoder
op	42:47	0:0	4	&
water	42:48	0:0	4	sys
op	42:51	0:0	4	->
water	42:53	0:0	4	context
op	42:60	0:0	4	->
water	42:62	0:0	4	decoder
water	42:70	0:0	2	;
if	43:4	52:4	2	(err != VDP_STATUS_OK)
cond	43:8	43:15	3	err != VDP_STATUS_OK
water	43:8	0:0	4	err
op	43:12	0:0	4	!=
water	43:15	0:0	4	VDP_STATUS_OK
stmts	44:4	52:4	3	
water	44:4	0:0	4	{
call	45:8	46:51	4	msg_Err
arg	45:16	45:18	5	va
water	45:16	0:0	6	va
arg	45:20	45:45	5	"%s creation failure: %s"
water	45:20	0:0	6	"%s creation failure: %s"
arg	45:47	45:56	5	"decoder"
water	45:47	0:0	6	"decoder"
arg	46:16	46:51	5	vdp_get_error_string(sys->vdp,err)
call	46:16	46:50	6	vdp_get_error_string
arg	46:37	46:45	7	sys->vdp
water	46:37	0:0	8	sys
op	46:40	0:0	8	->
water	46:42	0:0	8	vdp
arg	46:47	46:50	7	err
water	46:47	0:0	8	err
water	46:52	0:0	4	;
while	47:8	48:37	4	(i > 0)
cond	47:15	47:19	5	i > 0
water	47:15	0:0	6	i
op	47:17	0:0	6	>
water	47:19	0:0	6	0
stmts	48:12	48:37	5	
call	48:12	48:36	6	DestroySurface
arg	48:27	48:36	7	pool[--i]
water	48:27	0:0	8	pool
op	48:31	0:0	8	[
op	48:32	0:0	8	--
water	48:34	0:0	8	i
op	48:35	0:0	8	]
water	48:37	0:0	6	;
call	49:8	49:17	4	free
arg	49:13	49:17	5	pool
water	49:13	0:0	6	pool
water	49:18	0:0	4	;
water	50:8	0:0	4	sys
op	50:11	0:0	4	->
water	50:13	0:0	4	context
op	50:20	0:0	4	->
water	50:22	0:0	4	decoder
op	50:30	0:0	4	=
water	50:32	0:0	4	VDP_INVALID_HANDLE
water	50:50	0:0	4	;
return	51:8	51:27	4	VLC_EGENERIC
water	51:15	0:0	5	VLC_EGENERIC
water	52:4	0:0	4	}
op	53:4	0:0	2	*
water	53:5	0:0	2	ctxp
op	53:10	0:0	2	=
water	53:12	0:0	2	sys
op	53:15	0:0	2	->
water	53:17	0:0	2	context
water	53:24	0:0	2	;
op	55:4	0:0	2	*
water	55:5	0:0	2	chromap
op	55:13	0:0	2	=
water	55:15	0:0	2	VLC_CODEC_VDPAU_VIDEO_420
water	55:40	0:0	2	;
return	56:4	56:22	2	VLC_SUCCESS
water	56:11	0:0	3	VLC_SUCCESS
