func	1:0	662:0	0	int	OpenEncoder
params	1:15	0:0	1	
param	1:17	1:38	2	vlc_object_t *	p_this
stmnts	0:0	661:21	1	
decl	3:4	3:42	2	encoder_t	*p_enc
op	3:21	0:0	2	=
water	3:23	0:0	2	(
water	3:24	0:0	2	encoder_t
op	3:34	0:0	2	*
water	3:35	0:0	2	)
water	3:36	0:0	2	p_this
decl	4:4	4:24	2	encoder_sys_t	*p_sys
decl	5:4	5:29	2	AVCodecContext	*p_context
decl	6:4	6:27	2	AVCodec	*p_codec
op	6:21	0:0	2	=
water	6:23	0:0	2	NULL
water	7:4	0:0	2	unsigned
water	7:13	0:0	2	i_codec_id
water	7:23	0:0	2	;
decl	8:4	8:13	2	int	i_cat
decl	9:4	9:29	2	const char	*psz_namecodec
decl	10:4	10:15	2	float	f_val
decl	11:4	11:17	2	char	*psz_val
call	13:4	13:27	2	vlc_init_avcodec
arg	13:21	13:27	3	p_this
water	13:21	0:0	4	p_this
water	13:28	0:0	2	;
call	14:4	14:77	2	config_ChainParse
arg	14:23	14:28	3	p_enc
water	14:23	0:0	4	p_enc
arg	14:30	14:44	3	ENC_CFG_PREFIX
water	14:30	0:0	4	ENC_CFG_PREFIX
arg	14:46	14:62	3	ppsz_enc_options
water	14:46	0:0	4	ppsz_enc_options
arg	14:64	14:77	3	p_enc->p_cfg
water	14:64	0:0	4	p_enc
op	14:69	0:0	4	->
water	14:71	0:0	4	p_cfg
water	14:78	0:0	2	;
if	15:4	20:4	2	(p_enc -> fmt_out . i_codec == VLC_CODEC_MP1V)
cond	15:8	15:34	3	p_enc -> fmt_out . i_codec == VLC_CODEC_MP1V
water	15:8	0:0	4	p_enc
op	15:13	0:0	4	->
water	15:15	0:0	4	fmt_out
op	15:22	0:0	4	.
water	15:23	0:0	4	i_codec
op	15:31	0:0	4	==
water	15:34	0:0	4	VLC_CODEC_MP1V
stmts	16:4	20:4	3	
water	16:4	0:0	4	{
water	17:8	0:0	4	i_cat
op	17:14	0:0	4	=
water	17:16	0:0	4	VIDEO_ES
water	17:24	0:0	4	;
water	18:8	0:0	4	i_codec_id
op	18:19	0:0	4	=
water	18:21	0:0	4	AV_CODEC_ID_MPEG1VIDEO
water	18:43	0:0	4	;
water	19:8	0:0	4	psz_namecodec
op	19:22	0:0	4	=
water	19:24	0:0	4	"MPEG-1 video"
water	19:38	0:0	4	;
water	20:4	0:0	4	}
else	21:4	29:4	2
stmts	21:9	29:4	3	
if	21:9	29:4	4	(!GetFfmpegCodec (p_enc -> fmt_out . i_codec ,& i_cat ,& i_codec_id ,& psz_namecodec ))
cond	21:13	22:44	5	!GetFfmpegCodec (p_enc -> fmt_out . i_codec ,& i_cat ,& i_codec_id ,& psz_namecodec )
op	21:13	0:0	6	!
call	21:14	22:44	6	GetFfmpegCodec
arg	21:30	21:52	7	p_enc->fmt_out.i_codec
water	21:30	0:0	8	p_enc
op	21:35	0:0	8	->
water	21:37	0:0	8	fmt_out
op	21:44	0:0	8	.
water	21:45	0:0	8	i_codec
arg	21:54	21:60	7	&i_cat
op	21:54	0:0	8	&
water	21:55	0:0	8	i_cat
arg	21:62	21:73	7	&i_codec_id
op	21:62	0:0	8	&
water	21:63	0:0	8	i_codec_id
arg	22:29	22:44	7	&psz_namecodec
op	22:29	0:0	8	&
water	22:30	0:0	8	psz_namecodec
stmts	23:4	29:4	5	
water	23:4	0:0	6	{
if	24:8	25:31	6	(FindFfmpegChroma (p_enc -> fmt_out . i_codec ) == PIX_FMT_NONE)
cond	24:12	24:58	7	FindFfmpegChroma (p_enc -> fmt_out . i_codec ) == PIX_FMT_NONE
call	24:12	24:53	8	FindFfmpegChroma
arg	24:30	24:53	9	p_enc->fmt_out.i_codec
water	24:30	0:0	10	p_enc
op	24:35	0:0	10	->
water	24:37	0:0	10	fmt_out
op	24:44	0:0	10	.
water	24:45	0:0	10	i_codec
op	24:55	0:0	8	==
water	24:58	0:0	8	PIX_FMT_NONE
stmts	25:12	25:31	7	
return	25:12	25:31	8	VLC_EGENERIC
water	25:19	0:0	9	VLC_EGENERIC
water	26:8	0:0	6	i_cat
op	26:19	0:0	6	=
water	26:21	0:0	6	VIDEO_ES
water	26:29	0:0	6	;
water	27:8	0:0	6	i_codec_id
op	27:19	0:0	6	=
water	27:21	0:0	6	AV_CODEC_ID_RAWVIDEO
water	27:41	0:0	6	;
water	28:8	0:0	6	psz_namecodec
op	28:22	0:0	6	=
water	28:24	0:0	6	"Raw video"
water	28:35	0:0	6	;
water	29:4	0:0	6	}
if	30:4	31:27	2	(i_cat == UNKNOWN_ES)
cond	30:8	30:17	3	i_cat == UNKNOWN_ES
water	30:8	0:0	4	i_cat
op	30:14	0:0	4	==
water	30:17	0:0	4	UNKNOWN_ES
stmts	31:8	31:27	3	
return	31:8	31:27	4	VLC_EGENERIC
water	31:15	0:0	5	VLC_EGENERIC
if	32:4	38:4	2	(p_enc -> fmt_out . i_cat == VIDEO_ES && i_cat != VIDEO_ES)
cond	32:8	32:53	3	p_enc -> fmt_out . i_cat == VIDEO_ES && i_cat != VIDEO_ES
water	32:8	0:0	4	p_enc
op	32:13	0:0	4	->
water	32:15	0:0	4	fmt_out
op	32:22	0:0	4	.
water	32:23	0:0	4	i_cat
op	32:29	0:0	4	==
water	32:32	0:0	4	VIDEO_ES
op	32:41	0:0	4	&&
water	32:44	0:0	4	i_cat
op	32:50	0:0	4	!=
water	32:53	0:0	4	VIDEO_ES
stmts	33:4	38:4	3	
water	33:4	0:0	4	{
call	34:8	34:71	4	msg_Err
arg	34:17	34:22	5	p_enc
water	34:17	0:0	6	p_enc
arg	34:24	34:55	5	"\"%s\" is not a video encoder"
water	34:24	0:0	6	"\"%s\" is not a video encoder"
arg	34:57	34:71	5	psz_namecodec
water	34:57	0:0	6	psz_namecodec
water	34:72	0:0	4	;
call	35:8	36:72	4	dialog_Fatal
arg	35:22	35:27	5	p_enc
water	35:22	0:0	6	p_enc
arg	35:29	35:64	5	_("Streaming / Transcoding failed")
call	35:29	35:63	6	_
arg	35:31	35:63	7	"Streaming / Transcoding failed"
water	35:31	0:0	8	"Streaming / Transcoding failed"
arg	36:24	36:56	5	_("\"%s\" is no video encoder.")
call	36:24	36:55	6	_
arg	36:26	36:55	7	"\"%s\" is no video encoder."
water	36:26	0:0	8	"\"%s\" is no video encoder."
arg	36:58	36:72	5	psz_namecodec
water	36:58	0:0	6	psz_namecodec
water	36:73	0:0	4	;
return	37:8	37:27	4	VLC_EGENERIC
water	37:15	0:0	5	VLC_EGENERIC
water	38:4	0:0	4	}
if	39:4	45:4	2	(p_enc -> fmt_out . i_cat == AUDIO_ES && i_cat != AUDIO_ES)
cond	39:8	39:53	3	p_enc -> fmt_out . i_cat == AUDIO_ES && i_cat != AUDIO_ES
water	39:8	0:0	4	p_enc
op	39:13	0:0	4	->
water	39:15	0:0	4	fmt_out
op	39:22	0:0	4	.
water	39:23	0:0	4	i_cat
op	39:29	0:0	4	==
water	39:32	0:0	4	AUDIO_ES
op	39:41	0:0	4	&&
water	39:44	0:0	4	i_cat
op	39:50	0:0	4	!=
water	39:53	0:0	4	AUDIO_ES
stmts	40:4	45:4	3	
water	40:4	0:0	4	{
call	41:8	41:72	4	msg_Err
arg	41:17	41:22	5	p_enc
water	41:17	0:0	6	p_enc
arg	41:24	41:56	5	"\"%s\" is not an audio encoder"
water	41:24	0:0	6	"\"%s\" is not an audio encoder"
arg	41:58	41:72	5	psz_namecodec
water	41:58	0:0	6	psz_namecodec
water	41:73	0:0	4	;
call	42:8	43:72	4	dialog_Fatal
arg	42:22	42:27	5	p_enc
water	42:22	0:0	6	p_enc
arg	42:29	42:64	5	_("Streaming / Transcoding failed")
call	42:29	42:63	6	_
arg	42:31	42:63	7	"Streaming / Transcoding failed"
water	42:31	0:0	8	"Streaming / Transcoding failed"
arg	43:24	43:56	5	_("\"%s\" is no audio encoder.")
call	43:24	43:55	6	_
arg	43:26	43:55	7	"\"%s\" is no audio encoder."
water	43:26	0:0	8	"\"%s\" is no audio encoder."
arg	43:58	43:72	5	psz_namecodec
water	43:58	0:0	6	psz_namecodec
water	43:73	0:0	4	;
return	44:8	44:27	4	VLC_EGENERIC
water	44:15	0:0	5	VLC_EGENERIC
water	45:4	0:0	4	}
if	46:4	50:4	2	(p_enc -> fmt_out . i_cat == SPU_ES)
cond	46:8	46:32	3	p_enc -> fmt_out . i_cat == SPU_ES
water	46:8	0:0	4	p_enc
op	46:13	0:0	4	->
water	46:15	0:0	4	fmt_out
op	46:22	0:0	4	.
water	46:23	0:0	4	i_cat
op	46:29	0:0	4	==
water	46:32	0:0	4	SPU_ES
stmts	47:4	50:4	3	
water	47:4	0:0	4	{
return	49:8	49:27	4	VLC_EGENERIC
water	49:15	0:0	5	VLC_EGENERIC
water	50:4	0:0	4	}
decl	51:4	51:71	2	char	*psz_encoder
op	51:22	0:0	2	=
call	51:24	51:70	3	var_GetString
arg	51:39	51:45	4	p_this
water	51:39	0:0	5	p_this
arg	51:47	51:70	4	ENC_CFG_PREFIX"codec"
water	51:47	0:0	5	ENC_CFG_PREFIX
water	51:62	0:0	5	"codec"
if	52:4	63:4	2	(psz_encoder && * psz_encoder)
cond	52:8	52:24	3	psz_encoder && * psz_encoder
water	52:8	0:0	4	psz_encoder
op	52:20	0:0	4	&&
op	52:23	0:0	4	*
water	52:24	0:0	4	psz_encoder
stmts	53:4	63:4	3	
water	53:4	0:0	4	{
water	54:8	0:0	4	p_codec
op	54:16	0:0	4	=
call	54:18	54:60	4	avcodec_find_encoder_by_name
arg	54:48	54:60	5	psz_encoder
water	54:48	0:0	6	psz_encoder
water	54:61	0:0	4	;
if	55:8	56:68	4	(! p_codec)
cond	55:12	55:13	5	! p_codec
op	55:12	0:0	6	!
water	55:13	0:0	6	p_codec
stmts	56:12	56:68	5	
call	56:12	56:67	6	msg_Err
arg	56:21	56:27	7	p_this
water	56:21	0:0	8	p_this
arg	56:29	56:53	7	"Encoder `%s' not found"
water	56:29	0:0	8	"Encoder `%s' not found"
arg	56:55	56:67	7	psz_encoder
water	56:55	0:0	8	psz_encoder
water	56:68	0:0	6	;
else	57:8	62:8	4
stmts	57:13	62:8	5	
if	57:13	62:8	6	(p_codec -> id != i_codec_id)
cond	57:17	57:32	7	p_codec -> id != i_codec_id
water	57:17	0:0	8	p_codec
op	57:24	0:0	8	->
water	57:26	0:0	8	id
op	57:29	0:0	8	!=
water	57:32	0:0	8	i_codec_id
stmts	58:8	62:8	7	
water	58:8	0:0	8	{
call	59:12	60:64	8	msg_Err
arg	59:21	59:27	9	p_this
water	59:21	0:0	10	p_this
arg	59:29	59:62	9	"Encoder `%s' can't handle %4.4s"
water	59:29	0:0	10	"Encoder `%s' can't handle %4.4s"
arg	60:20	60:31	9	psz_encoder
water	60:20	0:0	10	psz_encoder
arg	60:33	60:64	9	(char*)&p_enc->fmt_out.i_codec
water	60:33	0:0	10	(
water	60:34	0:0	10	char
op	60:38	0:0	10	*
water	60:39	0:0	10	)
op	60:40	0:0	10	&
water	60:41	0:0	10	p_enc
op	60:46	0:0	10	->
water	60:48	0:0	10	fmt_out
op	60:55	0:0	10	.
water	60:56	0:0	10	i_codec
water	60:65	0:0	8	;
water	61:12	0:0	8	p_codec
op	61:20	0:0	8	=
water	61:22	0:0	8	NULL
water	61:26	0:0	8	;
water	62:8	0:0	8	}
water	63:4	0:0	4	}
call	64:4	64:22	2	free
arg	64:10	64:22	3	psz_encoder
water	64:10	0:0	4	psz_encoder
water	64:23	0:0	2	;
if	65:4	66:52	2	(! p_codec)
cond	65:8	65:9	3	! p_codec
op	65:8	0:0	4	!
water	65:9	0:0	4	p_codec
stmts	66:8	66:52	3	
water	66:8	0:0	4	p_codec
op	66:16	0:0	4	=
call	66:18	66:51	4	avcodec_find_encoder
arg	66:40	66:51	5	i_codec_id
water	66:40	0:0	6	i_codec_id
water	66:52	0:0	4	;
if	67:4	86:4	2	(! p_codec)
cond	67:8	67:9	3	! p_codec
op	67:8	0:0	4	!
water	67:9	0:0	4	p_codec
stmts	68:4	86:4	3	
water	68:4	0:0	4	{
call	69:8	72:65	4	msg_Err
arg	69:17	69:22	5	p_enc
water	69:17	0:0	6	p_enc
arg	69:24	72:49	5	"cannot find encoder %s\n""*** Your Libav/FFmpeg installation is crippled.   ***\n""*** Please check with your Libav/FFmpeg packager. ***\n""*** This is NOT a VLC media player issue.   ***"
water	69:24	0:0	6	"cannot find encoder %s\n"
water	70:0	0:0	6	"*** Your Libav/FFmpeg installation is crippled.   ***\n"
water	71:0	0:0	6	"*** Please check with your Libav/FFmpeg packager. ***\n"
water	72:0	0:0	6	"*** This is NOT a VLC media player issue.   ***"
arg	72:51	72:65	5	psz_namecodec
water	72:51	0:0	6	psz_namecodec
water	72:66	0:0	4	;
call	73:8	84:26	4	dialog_Fatal
arg	73:22	73:27	5	p_enc
water	73:22	0:0	6	p_enc
arg	73:29	73:64	5	_("Streaming / Transcoding failed")
call	73:29	73:63	6	_
arg	73:31	73:63	7	"Streaming / Transcoding failed"
water	73:31	0:0	8	"Streaming / Transcoding failed"
arg	73:66	83:58	5	_("It seems your Libav/FFmpeg (libavcodec) installation lacks the following encoder:\n""%s.\n""If you don't know how to fix this, ask for support from your distribution.\n""\n""This is not an error inside VLC media player.\n""Do not contact the VideoLAN project about this issue.\n")
call	73:66	83:57	6	_
arg	78:0	83:57	7	"It seems your Libav/FFmpeg (libavcodec) installation lacks the following encoder:\n""%s.\n""If you don't know how to fix this, ask for support from your distribution.\n""\n""This is not an error inside VLC media player.\n""Do not contact the VideoLAN project about this issue.\n"
water	78:0	0:0	8	"It seems your Libav/FFmpeg (libavcodec) installation lacks the following encoder:\n"
water	79:0	0:0	8	"%s.\n"
water	80:0	0:0	8	"If you don't know how to fix this, ask for support from your distribution.\n"
water	81:0	0:0	8	"\n"
water	82:0	0:0	8	"This is not an error inside VLC media player.\n"
water	83:0	0:0	8	"Do not contact the VideoLAN project about this issue.\n"
arg	84:12	84:26	5	psz_namecodec
water	84:12	0:0	6	psz_namecodec
water	84:27	0:0	4	;
return	85:8	85:27	4	VLC_EGENERIC
water	85:15	0:0	5	VLC_EGENERIC
water	86:4	0:0	4	}
if	88:4	89:25	2	(( p_sys =calloc (1 ,sizeof ( encoder_sys_t ) ) ) == NULL)
cond	88:8	88:58	3	( p_sys =calloc (1 ,sizeof ( encoder_sys_t ) ) ) == NULL
water	88:8	0:0	4	(
water	88:10	0:0	4	p_sys
op	88:16	0:0	4	=
call	88:18	88:51	4	calloc
arg	88:26	88:27	5	1
water	88:26	0:0	6	1
arg	88:29	88:51	5	sizeof(encoder_sys_t)
op	88:29	0:0	6	sizeof
water	88:35	0:0	6	(
water	88:36	0:0	6	encoder_sys_t
water	88:49	0:0	6	)
water	88:53	0:0	4	)
op	88:55	0:0	4	==
water	88:58	0:0	4	NULL
stmts	89:8	89:25	3	
return	89:8	89:25	4	VLC_ENOMEM
water	89:15	0:0	5	VLC_ENOMEM
water	90:4	0:0	2	p_enc
op	90:9	0:0	2	->
water	90:11	0:0	2	p_sys
op	90:17	0:0	2	=
water	90:19	0:0	2	p_sys
water	90:24	0:0	2	;
water	91:4	0:0	2	p_sys
op	91:9	0:0	2	->
water	91:11	0:0	2	i_samples_delay
op	91:27	0:0	2	=
water	91:29	0:0	2	0
water	91:30	0:0	2	;
water	92:4	0:0	2	p_sys
op	92:9	0:0	2	->
water	92:11	0:0	2	p_codec
op	92:19	0:0	2	=
water	92:21	0:0	2	p_codec
water	92:28	0:0	2	;
water	93:4	0:0	2	p_sys
op	93:9	0:0	2	->
water	93:11	0:0	2	b_planar
op	93:20	0:0	2	=
water	93:22	0:0	2	false
water	93:27	0:0	2	;
water	94:4	0:0	2	p_sys
op	94:9	0:0	2	->
water	94:11	0:0	2	p_buffer
op	94:20	0:0	2	=
water	94:22	0:0	2	NULL
water	94:26	0:0	2	;
water	95:4	0:0	2	p_sys
op	95:9	0:0	2	->
water	95:11	0:0	2	p_interleave_buf
op	95:28	0:0	2	=
water	95:30	0:0	2	NULL
water	95:34	0:0	2	;
water	96:4	0:0	2	p_sys
op	96:9	0:0	2	->
water	96:11	0:0	2	i_buffer_out
op	96:24	0:0	2	=
water	96:26	0:0	2	0
water	96:27	0:0	2	;
water	97:4	0:0	2	p_context
op	97:14	0:0	2	=
call	97:16	97:46	2	avcodec_alloc_context3
arg	97:39	97:46	3	p_codec
water	97:39	0:0	4	p_codec
water	97:47	0:0	2	;
water	98:4	0:0	2	p_sys
op	98:9	0:0	2	->
water	98:11	0:0	2	p_context
op	98:21	0:0	2	=
water	98:23	0:0	2	p_context
water	98:32	0:0	2	;
water	99:4	0:0	2	p_sys
op	99:9	0:0	2	->
water	99:11	0:0	2	p_context
op	99:20	0:0	2	->
water	99:22	0:0	2	codec_id
op	99:31	0:0	2	=
water	99:33	0:0	2	p_sys
op	99:38	0:0	2	->
water	99:40	0:0	2	p_codec
op	99:47	0:0	2	->
water	99:49	0:0	2	id
water	99:51	0:0	2	;
water	100:4	0:0	2	p_context
op	100:13	0:0	2	->
water	100:15	0:0	2	thread_type
op	100:27	0:0	2	=
water	100:29	0:0	2	0
water	100:30	0:0	2	;
water	101:4	0:0	2	p_context
op	101:13	0:0	2	->
water	101:15	0:0	2	debug
op	101:21	0:0	2	=
call	101:23	101:66	2	var_InheritInteger
arg	101:43	101:48	3	p_enc
water	101:43	0:0	4	p_enc
arg	101:50	101:66	3	"avcodec-debug"
water	101:50	0:0	4	"avcodec-debug"
water	101:67	0:0	2	;
water	102:4	0:0	2	p_context
op	102:13	0:0	2	->
water	102:15	0:0	2	opaque
op	102:22	0:0	2	=
water	102:24	0:0	2	(
water	102:25	0:0	2	void
op	102:30	0:0	2	*
water	102:31	0:0	2	)
water	102:32	0:0	2	p_this
water	102:38	0:0	2	;
water	103:4	0:0	2	p_sys
op	103:9	0:0	2	->
water	103:11	0:0	2	i_key_int
op	103:21	0:0	2	=
call	103:23	103:70	2	var_GetInteger
arg	103:39	103:44	3	p_enc
water	103:39	0:0	4	p_enc
arg	103:46	103:70	3	ENC_CFG_PREFIX"keyint"
water	103:46	0:0	4	ENC_CFG_PREFIX
water	103:61	0:0	4	"keyint"
water	103:71	0:0	2	;
water	104:4	0:0	2	p_sys
op	104:9	0:0	2	->
water	104:11	0:0	2	i_b_frames
op	104:22	0:0	2	=
call	104:24	104:72	2	var_GetInteger
arg	104:40	104:45	3	p_enc
water	104:40	0:0	4	p_enc
arg	104:47	104:72	3	ENC_CFG_PREFIX"bframes"
water	104:47	0:0	4	ENC_CFG_PREFIX
water	104:62	0:0	4	"bframes"
water	104:73	0:0	2	;
water	105:4	0:0	2	p_sys
op	105:9	0:0	2	->
water	105:11	0:0	2	i_vtolerance
op	105:24	0:0	2	=
call	105:26	105:69	2	var_GetInteger
arg	105:42	105:47	3	p_enc
water	105:42	0:0	4	p_enc
arg	105:49	105:69	3	ENC_CFG_PREFIX"vt"
water	105:49	0:0	4	ENC_CFG_PREFIX
water	105:64	0:0	4	"vt"
op	105:71	0:0	2	*
water	105:73	0:0	2	1000
water	105:77	0:0	2	;
water	106:4	0:0	2	p_sys
op	106:9	0:0	2	->
water	106:11	0:0	2	b_interlace
op	106:23	0:0	2	=
call	106:25	106:72	2	var_GetBool
arg	106:38	106:43	3	p_enc
water	106:38	0:0	4	p_enc
arg	106:45	106:72	3	ENC_CFG_PREFIX"interlace"
water	106:45	0:0	4	ENC_CFG_PREFIX
water	106:60	0:0	4	"interlace"
water	106:73	0:0	2	;
water	107:4	0:0	2	p_sys
op	107:9	0:0	2	->
water	107:11	0:0	2	b_interlace_me
op	107:26	0:0	2	=
call	107:28	107:78	2	var_GetBool
arg	107:41	107:46	3	p_enc
water	107:41	0:0	4	p_enc
arg	107:48	107:78	3	ENC_CFG_PREFIX"interlace-me"
water	107:48	0:0	4	ENC_CFG_PREFIX
water	107:63	0:0	4	"interlace-me"
water	107:79	0:0	2	;
water	108:4	0:0	2	p_sys
op	108:9	0:0	2	->
water	108:11	0:0	2	b_pre_me
op	108:20	0:0	2	=
call	108:22	108:66	2	var_GetBool
arg	108:35	108:40	3	p_enc
water	108:35	0:0	4	p_enc
arg	108:42	108:66	3	ENC_CFG_PREFIX"pre-me"
water	108:42	0:0	4	ENC_CFG_PREFIX
water	108:57	0:0	4	"pre-me"
water	108:67	0:0	2	;
water	109:4	0:0	2	p_sys
op	109:9	0:0	2	->
water	109:11	0:0	2	b_hurry_up
op	109:22	0:0	2	=
call	109:24	109:70	2	var_GetBool
arg	109:37	109:42	3	p_enc
water	109:37	0:0	4	p_enc
arg	109:44	109:70	3	ENC_CFG_PREFIX"hurry-up"
water	109:44	0:0	4	ENC_CFG_PREFIX
water	109:59	0:0	4	"hurry-up"
water	109:71	0:0	2	;
if	110:4	114:4	2	(p_sys -> b_hurry_up)
cond	110:8	110:15	3	p_sys -> b_hurry_up
water	110:8	0:0	4	p_sys
op	110:13	0:0	4	->
water	110:15	0:0	4	b_hurry_up
stmts	111:4	114:4	3	
water	111:4	0:0	4	{
water	113:8	0:0	4	p_sys
op	113:13	0:0	4	->
water	113:15	0:0	4	i_noise_reduction
op	113:33	0:0	4	=
water	113:35	0:0	4	1
water	113:36	0:0	4	;
water	114:4	0:0	4	}
water	115:4	0:0	2	p_sys
op	115:9	0:0	2	->
water	115:11	0:0	2	i_rc_buffer_size
op	115:28	0:0	2	=
call	115:30	115:85	2	var_GetInteger
arg	115:46	115:51	3	p_enc
water	115:46	0:0	4	p_enc
arg	115:53	115:85	3	ENC_CFG_PREFIX"rc-buffer-size"
water	115:53	0:0	4	ENC_CFG_PREFIX
water	115:68	0:0	4	"rc-buffer-size"
water	115:86	0:0	2	;
water	116:4	0:0	2	p_sys
op	116:9	0:0	2	->
water	116:11	0:0	2	f_rc_buffer_aggressivity
op	116:36	0:0	2	=
call	116:38	116:99	2	var_GetFloat
arg	116:52	116:57	3	p_enc
water	116:52	0:0	4	p_enc
arg	116:59	116:99	3	ENC_CFG_PREFIX"rc-buffer-aggressivity"
water	116:59	0:0	4	ENC_CFG_PREFIX
water	116:74	0:0	4	"rc-buffer-aggressivity"
water	116:100	0:0	2	;
water	117:4	0:0	2	p_sys
op	117:9	0:0	2	->
water	117:11	0:0	2	f_i_quant_factor
op	117:28	0:0	2	=
call	117:30	117:83	2	var_GetFloat
arg	117:44	117:49	3	p_enc
water	117:44	0:0	4	p_enc
arg	117:51	117:83	3	ENC_CFG_PREFIX"i-quant-factor"
water	117:51	0:0	4	ENC_CFG_PREFIX
water	117:66	0:0	4	"i-quant-factor"
water	117:84	0:0	2	;
water	118:4	0:0	2	p_sys
op	118:9	0:0	2	->
water	118:11	0:0	2	i_noise_reduction
op	118:29	0:0	2	=
call	118:31	118:87	2	var_GetInteger
arg	118:47	118:52	3	p_enc
water	118:47	0:0	4	p_enc
arg	118:54	118:87	3	ENC_CFG_PREFIX"noise-reduction"
water	118:54	0:0	4	ENC_CFG_PREFIX
water	118:69	0:0	4	"noise-reduction"
water	118:88	0:0	2	;
water	119:4	0:0	2	p_sys
op	119:9	0:0	2	->
water	119:11	0:0	2	b_mpeg4_matrix
op	119:26	0:0	2	=
call	119:28	119:78	2	var_GetBool
arg	119:41	119:46	3	p_enc
water	119:41	0:0	4	p_enc
arg	119:48	119:78	3	ENC_CFG_PREFIX"mpeg4-matrix"
water	119:48	0:0	4	ENC_CFG_PREFIX
water	119:63	0:0	4	"mpeg4-matrix"
water	119:79	0:0	2	;
water	120:4	0:0	2	f_val
op	120:10	0:0	2	=
call	120:12	120:57	2	var_GetFloat
arg	120:26	120:31	3	p_enc
water	120:26	0:0	4	p_enc
arg	120:33	120:57	3	ENC_CFG_PREFIX"qscale"
water	120:33	0:0	4	ENC_CFG_PREFIX
water	120:48	0:0	4	"qscale"
water	120:58	0:0	2	;
water	121:4	0:0	2	p_sys
op	121:9	0:0	2	->
water	121:11	0:0	2	i_quality
op	121:21	0:0	2	=
water	121:23	0:0	2	0
water	121:24	0:0	2	;
if	122:4	123:17	2	(f_val < 0 . 01 || f_val > 255 . 0)
cond	122:8	122:36	3	f_val < 0 . 01 || f_val > 255 . 0
water	122:8	0:0	4	f_val
op	122:14	0:0	4	<
water	122:16	0:0	4	0
op	122:17	0:0	4	.
water	122:18	0:0	4	01
op	122:21	0:0	4	||
water	122:24	0:0	4	f_val
op	122:30	0:0	4	>
water	122:32	0:0	4	255
op	122:35	0:0	4	.
water	122:36	0:0	4	0
stmts	123:8	123:17	3	
water	123:8	0:0	4	f_val
op	123:14	0:0	4	=
water	123:16	0:0	4	0
water	123:17	0:0	4	;
else	124:4	125:60	2
stmts	125:8	125:60	3	
water	125:8	0:0	4	p_sys
op	125:13	0:0	4	->
water	125:15	0:0	4	i_quality
op	125:25	0:0	4	=
call	125:27	125:59	4	(int)
arg	125:33	125:59	5	FF_QP2LAMBDA*f_val+0.5
water	125:33	0:0	6	FF_QP2LAMBDA
op	125:46	0:0	6	*
water	125:48	0:0	6	f_val
op	125:54	0:0	6	+
water	125:56	0:0	6	0
op	125:57	0:0	6	.
water	125:58	0:0	6	5
water	125:60	0:0	4	;
water	126:4	0:0	2	psz_val
op	126:12	0:0	2	=
call	126:14	126:56	2	var_GetString
arg	126:29	126:34	3	p_enc
water	126:29	0:0	4	p_enc
arg	126:36	126:56	3	ENC_CFG_PREFIX"hq"
water	126:36	0:0	4	ENC_CFG_PREFIX
water	126:51	0:0	4	"hq"
water	126:57	0:0	2	;
water	127:4	0:0	2	p_sys
op	127:9	0:0	2	->
water	127:11	0:0	2	i_hq
op	127:16	0:0	2	=
water	127:18	0:0	2	FF_MB_DECISION_RD
water	127:35	0:0	2	;
if	128:4	138:4	2	(psz_val && * psz_val)
cond	128:8	128:20	3	psz_val && * psz_val
water	128:8	0:0	4	psz_val
op	128:16	0:0	4	&&
op	128:19	0:0	4	*
water	128:20	0:0	4	psz_val
stmts	129:4	138:4	3	
water	129:4	0:0	4	{
if	130:8	131:43	4	(!strcmp (psz_val ,"rd" ))
cond	130:12	130:35	5	!strcmp (psz_val ,"rd" )
op	130:12	0:0	6	!
call	130:13	130:35	6	strcmp
arg	130:21	130:28	7	psz_val
water	130:21	0:0	8	psz_val
arg	130:30	130:35	7	"rd"
water	130:30	0:0	8	"rd"
stmts	131:12	131:43	5	
water	131:12	0:0	6	p_sys
op	131:17	0:0	6	->
water	131:19	0:0	6	i_hq
op	131:24	0:0	6	=
water	131:26	0:0	6	FF_MB_DECISION_RD
water	131:43	0:0	6	;
else	132:8	133:45	4
stmts	132:13	133:45	5	
if	132:13	133:45	6	(!strcmp (psz_val ,"bits" ))
cond	132:17	132:42	7	!strcmp (psz_val ,"bits" )
op	132:17	0:0	8	!
call	132:18	132:42	8	strcmp
arg	132:26	132:33	9	psz_val
water	132:26	0:0	10	psz_val
arg	132:35	132:42	9	"bits"
water	132:35	0:0	10	"bits"
stmts	133:12	133:45	7	
water	133:12	0:0	8	p_sys
op	133:17	0:0	8	->
water	133:19	0:0	8	i_hq
op	133:24	0:0	8	=
water	133:26	0:0	8	FF_MB_DECISION_BITS
water	133:45	0:0	8	;
else	134:8	135:47	4
stmts	134:13	135:47	5	
if	134:13	135:47	6	(!strcmp (psz_val ,"simple" ))
cond	134:17	134:44	7	!strcmp (psz_val ,"simple" )
op	134:17	0:0	8	!
call	134:18	134:44	8	strcmp
arg	134:26	134:33	9	psz_val
water	134:26	0:0	10	psz_val
arg	134:35	134:44	9	"simple"
water	134:35	0:0	10	"simple"
stmts	135:12	135:47	7	
water	135:12	0:0	8	p_sys
op	135:17	0:0	8	->
water	135:19	0:0	8	i_hq
op	135:24	0:0	8	=
water	135:26	0:0	8	FF_MB_DECISION_SIMPLE
water	135:47	0:0	8	;
else	136:8	137:43	4
stmts	137:12	137:43	5	
water	137:12	0:0	6	p_sys
op	137:17	0:0	6	->
water	137:19	0:0	6	i_hq
op	137:24	0:0	6	=
water	137:26	0:0	6	FF_MB_DECISION_RD
water	137:43	0:0	6	;
water	138:4	0:0	4	}
else	139:4	140:39	2
stmts	140:8	140:39	3	
water	140:8	0:0	4	p_sys
op	140:13	0:0	4	->
water	140:15	0:0	4	i_hq
op	140:20	0:0	4	=
water	140:22	0:0	4	FF_MB_DECISION_RD
water	140:39	0:0	4	;
call	141:4	141:18	2	free
arg	141:10	141:18	3	psz_val
water	141:10	0:0	4	psz_val
water	141:19	0:0	2	;
water	142:4	0:0	2	p_sys
op	142:9	0:0	2	->
water	142:11	0:0	2	i_qmin
op	142:18	0:0	2	=
call	142:20	142:65	2	var_GetInteger
arg	142:36	142:41	3	p_enc
water	142:36	0:0	4	p_enc
arg	142:43	142:65	3	ENC_CFG_PREFIX"qmin"
water	142:43	0:0	4	ENC_CFG_PREFIX
water	142:58	0:0	4	"qmin"
water	142:66	0:0	2	;
water	143:4	0:0	2	p_sys
op	143:9	0:0	2	->
water	143:11	0:0	2	i_qmax
op	143:18	0:0	2	=
call	143:20	143:65	2	var_GetInteger
arg	143:36	143:41	3	p_enc
water	143:36	0:0	4	p_enc
arg	143:43	143:65	3	ENC_CFG_PREFIX"qmax"
water	143:43	0:0	4	ENC_CFG_PREFIX
water	143:58	0:0	4	"qmax"
water	143:66	0:0	2	;
water	144:4	0:0	2	p_sys
op	144:9	0:0	2	->
water	144:11	0:0	2	b_trellis
op	144:21	0:0	2	=
call	144:23	144:68	2	var_GetBool
arg	144:36	144:41	3	p_enc
water	144:36	0:0	4	p_enc
arg	144:43	144:68	3	ENC_CFG_PREFIX"trellis"
water	144:43	0:0	4	ENC_CFG_PREFIX
water	144:58	0:0	4	"trellis"
water	144:69	0:0	2	;
water	145:4	0:0	2	p_context
op	145:13	0:0	2	->
water	145:15	0:0	2	strict_std_compliance
op	145:37	0:0	2	=
call	145:39	145:86	2	var_GetInteger
arg	145:55	145:60	3	p_enc
water	145:55	0:0	4	p_enc
arg	145:62	145:86	3	ENC_CFG_PREFIX"strict"
water	145:62	0:0	4	ENC_CFG_PREFIX
water	145:77	0:0	4	"strict"
water	145:87	0:0	2	;
water	146:4	0:0	2	p_sys
op	146:9	0:0	2	->
water	146:11	0:0	2	f_lumi_masking
op	146:26	0:0	2	=
call	146:28	146:79	2	var_GetFloat
arg	146:42	146:47	3	p_enc
water	146:42	0:0	4	p_enc
arg	146:49	146:79	3	ENC_CFG_PREFIX"lumi-masking"
water	146:49	0:0	4	ENC_CFG_PREFIX
water	146:64	0:0	4	"lumi-masking"
water	146:80	0:0	2	;
water	147:4	0:0	2	p_sys
op	147:9	0:0	2	->
water	147:11	0:0	2	f_dark_masking
op	147:26	0:0	2	=
call	147:28	147:79	2	var_GetFloat
arg	147:42	147:47	3	p_enc
water	147:42	0:0	4	p_enc
arg	147:49	147:79	3	ENC_CFG_PREFIX"dark-masking"
water	147:49	0:0	4	ENC_CFG_PREFIX
water	147:64	0:0	4	"dark-masking"
water	147:80	0:0	2	;
water	148:4	0:0	2	p_sys
op	148:9	0:0	2	->
water	148:11	0:0	2	f_p_masking
op	148:23	0:0	2	=
call	148:25	148:73	2	var_GetFloat
arg	148:39	148:44	3	p_enc
water	148:39	0:0	4	p_enc
arg	148:46	148:73	3	ENC_CFG_PREFIX"p-masking"
water	148:46	0:0	4	ENC_CFG_PREFIX
water	148:61	0:0	4	"p-masking"
water	148:74	0:0	2	;
water	149:4	0:0	2	p_sys
op	149:9	0:0	2	->
water	149:11	0:0	2	f_border_masking
op	149:28	0:0	2	=
call	149:30	149:83	2	var_GetFloat
arg	149:44	149:49	3	p_enc
water	149:44	0:0	4	p_enc
arg	149:51	149:83	3	ENC_CFG_PREFIX"border-masking"
water	149:51	0:0	4	ENC_CFG_PREFIX
water	149:66	0:0	4	"border-masking"
water	149:84	0:0	2	;
water	151:4	0:0	2	p_sys
op	151:9	0:0	2	->
water	151:11	0:0	2	i_luma_elim
op	151:23	0:0	2	=
call	151:25	151:85	2	var_GetInteger
arg	151:41	151:46	3	p_enc
water	151:41	0:0	4	p_enc
arg	151:48	151:85	3	ENC_CFG_PREFIX"luma-elim-threshold"
water	151:48	0:0	4	ENC_CFG_PREFIX
water	151:63	0:0	4	"luma-elim-threshold"
water	151:86	0:0	2	;
water	152:4	0:0	2	p_sys
op	152:9	0:0	2	->
water	152:11	0:0	2	i_chroma_elim
op	152:25	0:0	2	=
call	152:27	152:89	2	var_GetInteger
arg	152:43	152:48	3	p_enc
water	152:43	0:0	4	p_enc
arg	152:50	152:89	3	ENC_CFG_PREFIX"chroma-elim-threshold"
water	152:50	0:0	4	ENC_CFG_PREFIX
water	152:65	0:0	4	"chroma-elim-threshold"
water	152:90	0:0	2	;
water	154:4	0:0	2	psz_val
op	154:12	0:0	2	=
call	154:14	154:65	2	var_GetString
arg	154:29	154:34	3	p_enc
water	154:29	0:0	4	p_enc
arg	154:36	154:65	3	ENC_CFG_PREFIX"aac-profile"
water	154:36	0:0	4	ENC_CFG_PREFIX
water	154:51	0:0	4	"aac-profile"
water	154:66	0:0	2	;
water	157:4	0:0	2	p_sys
op	157:9	0:0	2	->
water	157:11	0:0	2	i_aac_profile
op	157:25	0:0	2	=
water	157:27	0:0	2	FF_PROFILE_AAC_LOW
water	157:45	0:0	2	;
if	158:4	184:4	2	(psz_val && * psz_val)
cond	158:8	158:20	3	psz_val && * psz_val
water	158:8	0:0	4	psz_val
op	158:16	0:0	4	&&
op	158:19	0:0	4	*
water	158:20	0:0	4	psz_val
stmts	159:4	184:4	3	
water	159:4	0:0	4	{
if	160:8	161:54	4	(!strncmp (psz_val ,"main" ,4 ))
cond	160:12	160:41	5	!strncmp (psz_val ,"main" ,4 )
op	160:12	0:0	6	!
call	160:13	160:41	6	strncmp
arg	160:22	160:29	7	psz_val
water	160:22	0:0	8	psz_val
arg	160:31	160:37	7	"main"
water	160:31	0:0	8	"main"
arg	160:39	160:41	7	4
water	160:39	0:0	8	4
stmts	161:12	161:54	5	
water	161:12	0:0	6	p_sys
op	161:17	0:0	6	->
water	161:19	0:0	6	i_aac_profile
op	161:33	0:0	6	=
water	161:35	0:0	6	FF_PROFILE_AAC_MAIN
water	161:54	0:0	6	;
else	162:8	163:53	4
stmts	162:13	163:53	5	
if	162:13	163:53	6	(!strncmp (psz_val ,"low" ,3 ))
cond	162:17	162:45	7	!strncmp (psz_val ,"low" ,3 )
op	162:17	0:0	8	!
call	162:18	162:45	8	strncmp
arg	162:27	162:34	9	psz_val
water	162:27	0:0	10	psz_val
arg	162:36	162:41	9	"low"
water	162:36	0:0	10	"low"
arg	162:43	162:45	9	3
water	162:43	0:0	10	3
stmts	163:12	163:53	7	
water	163:12	0:0	8	p_sys
op	163:17	0:0	8	->
water	163:19	0:0	8	i_aac_profile
op	163:33	0:0	8	=
water	163:35	0:0	8	FF_PROFILE_AAC_LOW
water	163:53	0:0	8	;
else	164:8	165:53	4
stmts	164:13	165:53	5	
if	164:13	165:53	6	(!strncmp (psz_val ,"ssr" ,3 ))
cond	164:17	164:45	7	!strncmp (psz_val ,"ssr" ,3 )
op	164:17	0:0	8	!
call	164:18	164:45	8	strncmp
arg	164:27	164:34	9	psz_val
water	164:27	0:0	10	psz_val
arg	164:36	164:41	9	"ssr"
water	164:36	0:0	10	"ssr"
arg	164:43	164:45	9	3
water	164:43	0:0	10	3
stmts	165:12	165:53	7	
water	165:12	0:0	8	p_sys
op	165:17	0:0	8	->
water	165:19	0:0	8	i_aac_profile
op	165:33	0:0	8	=
water	165:35	0:0	8	FF_PROFILE_AAC_SSR
water	165:53	0:0	8	;
else	166:8	167:53	4
stmts	166:13	167:53	5	
if	166:13	167:53	6	(!strncmp (psz_val ,"ltp" ,3 ))
cond	166:17	166:45	7	!strncmp (psz_val ,"ltp" ,3 )
op	166:17	0:0	8	!
call	166:18	166:45	8	strncmp
arg	166:27	166:34	9	psz_val
water	166:27	0:0	10	psz_val
arg	166:36	166:41	9	"ltp"
water	166:36	0:0	10	"ltp"
arg	166:43	166:45	9	3
water	166:43	0:0	10	3
stmts	167:12	167:53	7	
water	167:12	0:0	8	p_sys
op	167:17	0:0	8	->
water	167:19	0:0	8	i_aac_profile
op	167:33	0:0	8	=
water	167:35	0:0	8	FF_PROFILE_AAC_LTP
water	167:53	0:0	8	;
else	170:8	171:55	4
stmts	170:13	171:55	5	
if	170:13	171:55	6	(!strncmp (psz_val ,"hev2" ,4 ))
cond	170:17	170:46	7	!strncmp (psz_val ,"hev2" ,4 )
op	170:17	0:0	8	!
call	170:18	170:46	8	strncmp
arg	170:27	170:34	9	psz_val
water	170:27	0:0	10	psz_val
arg	170:36	170:42	9	"hev2"
water	170:36	0:0	10	"hev2"
arg	170:44	170:46	9	4
water	170:44	0:0	10	4
stmts	171:12	171:55	7	
water	171:12	0:0	8	p_sys
op	171:17	0:0	8	->
water	171:19	0:0	8	i_aac_profile
op	171:33	0:0	8	=
water	171:35	0:0	8	FF_PROFILE_AAC_HE_V2
water	171:55	0:0	8	;
else	172:8	173:52	4
stmts	172:13	173:52	5	
if	172:13	173:52	6	(!strncmp (psz_val ,"hev1" ,4 ))
cond	172:17	172:46	7	!strncmp (psz_val ,"hev1" ,4 )
op	172:17	0:0	8	!
call	172:18	172:46	8	strncmp
arg	172:27	172:34	9	psz_val
water	172:27	0:0	10	psz_val
arg	172:36	172:42	9	"hev1"
water	172:36	0:0	10	"hev1"
arg	172:44	172:46	9	4
water	172:44	0:0	10	4
stmts	173:12	173:52	7	
water	173:12	0:0	8	p_sys
op	173:17	0:0	8	->
water	173:19	0:0	8	i_aac_profile
op	173:33	0:0	8	=
water	173:35	0:0	8	FF_PROFILE_AAC_HE
water	173:52	0:0	8	;
else	174:8	175:52	4
stmts	174:13	175:52	5	
if	174:13	175:52	6	(!strncmp (psz_val ,"ld" ,2 ))
cond	174:17	174:44	7	!strncmp (psz_val ,"ld" ,2 )
op	174:17	0:0	8	!
call	174:18	174:44	8	strncmp
arg	174:27	174:34	9	psz_val
water	174:27	0:0	10	psz_val
arg	174:36	174:40	9	"ld"
water	174:36	0:0	10	"ld"
arg	174:42	174:44	9	2
water	174:42	0:0	10	2
stmts	175:12	175:52	7	
water	175:12	0:0	8	p_sys
op	175:17	0:0	8	->
water	175:19	0:0	8	i_aac_profile
op	175:33	0:0	8	=
water	175:35	0:0	8	FF_PROFILE_AAC_LD
water	175:52	0:0	8	;
else	176:8	177:53	4
stmts	176:13	177:53	5	
if	176:13	177:53	6	(!strncmp (psz_val ,"eld" ,3 ))
cond	176:17	176:45	7	!strncmp (psz_val ,"eld" ,3 )
op	176:17	0:0	8	!
call	176:18	176:45	8	strncmp
arg	176:27	176:34	9	psz_val
water	176:27	0:0	10	psz_val
arg	176:36	176:41	9	"eld"
water	176:36	0:0	10	"eld"
arg	176:43	176:45	9	3
water	176:43	0:0	10	3
stmts	177:12	177:53	7	
water	177:12	0:0	8	p_sys
op	177:17	0:0	8	->
water	177:19	0:0	8	i_aac_profile
op	177:33	0:0	8	=
water	177:35	0:0	8	FF_PROFILE_AAC_ELD
water	177:53	0:0	8	;
else	179:8	183:8	4
stmts	180:8	183:8	5	
water	180:8	0:0	6	{
call	181:12	181:80	6	msg_Warn
arg	181:22	181:27	7	p_enc
water	181:22	0:0	8	p_enc
arg	181:29	181:80	7	"unknown AAC profile requested, setting it to low"
water	181:29	0:0	8	"unknown AAC profile requested, setting it to low"
water	181:81	0:0	6	;
water	182:12	0:0	6	p_sys
op	182:17	0:0	6	->
water	182:19	0:0	6	i_aac_profile
op	182:33	0:0	6	=
water	182:35	0:0	6	FF_PROFILE_AAC_LOW
water	182:53	0:0	6	;
water	183:8	0:0	6	}
water	184:4	0:0	4	}
call	185:4	185:18	2	free
arg	185:10	185:18	3	psz_val
water	185:10	0:0	4	psz_val
water	185:19	0:0	2	;
if	186:4	340:4	2	(p_enc -> fmt_in . i_cat == VIDEO_ES)
cond	186:8	186:31	3	p_enc -> fmt_in . i_cat == VIDEO_ES
water	186:8	0:0	4	p_enc
op	186:13	0:0	4	->
water	186:15	0:0	4	fmt_in
op	186:21	0:0	4	.
water	186:22	0:0	4	i_cat
op	186:28	0:0	4	==
water	186:31	0:0	4	VIDEO_ES
stmts	187:4	340:4	3	
water	187:4	0:0	4	{
if	188:8	194:8	4	(! p_enc -> fmt_in . video . i_visible_width || ! p_enc -> fmt_in . video . i_visible_height)
cond	188:12	188:73	5	! p_enc -> fmt_in . video . i_visible_width || ! p_enc -> fmt_in . video . i_visible_height
op	188:12	0:0	6	!
water	188:13	0:0	6	p_enc
op	188:18	0:0	6	->
water	188:20	0:0	6	fmt_in
op	188:26	0:0	6	.
water	188:27	0:0	6	video
op	188:32	0:0	6	.
water	188:33	0:0	6	i_visible_width
op	188:49	0:0	6	||
op	188:52	0:0	6	!
water	188:53	0:0	6	p_enc
op	188:58	0:0	6	->
water	188:60	0:0	6	fmt_in
op	188:66	0:0	6	.
water	188:67	0:0	6	video
op	188:72	0:0	6	.
water	188:73	0:0	6	i_visible_height
stmts	189:8	194:8	5	
water	189:8	0:0	6	{
call	190:12	191:59	6	msg_Warn
arg	190:22	190:27	7	p_enc
water	190:22	0:0	8	p_enc
arg	190:29	190:49	7	"invalid size %ix%i"
water	190:29	0:0	8	"invalid size %ix%i"
arg	190:51	190:86	7	p_enc->fmt_in.video.i_visible_width
water	190:51	0:0	8	p_enc
op	190:56	0:0	8	->
water	190:58	0:0	8	fmt_in
op	190:64	0:0	8	.
water	190:65	0:0	8	video
op	190:70	0:0	8	.
water	190:71	0:0	8	i_visible_width
arg	191:22	191:59	7	p_enc->fmt_in.video.i_visible_height
water	191:22	0:0	8	p_enc
op	191:27	0:0	8	->
water	191:29	0:0	8	fmt_in
op	191:35	0:0	8	.
water	191:36	0:0	8	video
op	191:41	0:0	8	.
water	191:42	0:0	8	i_visible_height
water	191:60	0:0	6	;
call	192:12	192:24	6	free
arg	192:18	192:24	7	p_sys
water	192:18	0:0	8	p_sys
water	192:25	0:0	6	;
return	193:12	193:31	6	VLC_EGENERIC
water	193:19	0:0	7	VLC_EGENERIC
water	194:8	0:0	6	}
water	195:8	0:0	4	p_context
op	195:17	0:0	4	->
water	195:19	0:0	4	codec_type
op	195:30	0:0	4	=
water	195:32	0:0	4	AVMEDIA_TYPE_VIDEO
water	195:50	0:0	4	;
water	196:8	0:0	4	p_context
op	196:17	0:0	4	->
water	196:19	0:0	4	width
op	196:25	0:0	4	=
water	196:27	0:0	4	p_enc
op	196:32	0:0	4	->
water	196:34	0:0	4	fmt_in
op	196:40	0:0	4	.
water	196:41	0:0	4	video
op	196:46	0:0	4	.
water	196:47	0:0	4	i_visible_width
water	196:62	0:0	4	;
water	197:8	0:0	4	p_context
op	197:17	0:0	4	->
water	197:19	0:0	4	height
op	197:26	0:0	4	=
water	197:28	0:0	4	p_enc
op	197:33	0:0	4	->
water	197:35	0:0	4	fmt_in
op	197:41	0:0	4	.
water	197:42	0:0	4	video
op	197:47	0:0	4	.
water	197:48	0:0	4	i_visible_height
water	197:64	0:0	4	;
call	198:8	198:58	4	probe_video_frame_rate
arg	198:32	198:37	5	p_enc
water	198:32	0:0	6	p_enc
arg	198:39	198:48	5	p_context
water	198:39	0:0	6	p_context
arg	198:50	198:58	5	p_codec
water	198:50	0:0	6	p_codec
water	198:59	0:0	4	;
water	200:8	0:0	4	p_context
op	200:17	0:0	4	->
water	200:19	0:0	4	qblur
op	200:25	0:0	4	=
water	200:27	0:0	4	0
op	200:28	0:0	4	.
water	200:29	0:0	4	5
water	200:30	0:0	4	;
water	201:8	0:0	4	p_context
op	201:17	0:0	4	->
water	201:19	0:0	4	qcompress
op	201:29	0:0	4	=
water	201:31	0:0	4	0
op	201:32	0:0	4	.
water	201:33	0:0	4	5
water	201:34	0:0	4	;
water	202:8	0:0	4	p_context
op	202:17	0:0	4	->
water	202:19	0:0	4	b_quant_offset
op	202:34	0:0	4	=
water	202:36	0:0	4	1
op	202:37	0:0	4	.
water	202:38	0:0	4	25
water	202:40	0:0	4	;
water	203:8	0:0	4	p_context
op	203:17	0:0	4	->
water	203:19	0:0	4	b_quant_factor
op	203:34	0:0	4	=
water	203:36	0:0	4	1
op	203:37	0:0	4	.
water	203:38	0:0	4	25
water	203:40	0:0	4	;
water	204:8	0:0	4	p_context
op	204:17	0:0	4	->
water	204:19	0:0	4	i_quant_offset
op	204:34	0:0	4	=
water	204:36	0:0	4	0
op	204:37	0:0	4	.
water	204:38	0:0	4	0
water	204:39	0:0	4	;
water	205:8	0:0	4	p_context
op	205:17	0:0	4	->
water	205:19	0:0	4	i_quant_factor
op	205:34	0:0	4	=
op	205:36	0:0	4	-
water	205:37	0:0	4	0
op	205:38	0:0	4	.
water	205:39	0:0	4	8
water	205:40	0:0	4	;
water	206:8	0:0	4	p_context
op	206:17	0:0	4	->
water	206:19	0:0	4	lumi_masking
op	206:32	0:0	4	=
water	206:34	0:0	4	p_sys
op	206:39	0:0	4	->
water	206:41	0:0	4	f_lumi_masking
water	206:55	0:0	4	;
water	207:8	0:0	4	p_context
op	207:17	0:0	4	->
water	207:19	0:0	4	dark_masking
op	207:32	0:0	4	=
water	207:34	0:0	4	p_sys
op	207:39	0:0	4	->
water	207:41	0:0	4	f_dark_masking
water	207:55	0:0	4	;
water	208:8	0:0	4	p_context
op	208:17	0:0	4	->
water	208:19	0:0	4	p_masking
op	208:29	0:0	4	=
water	208:31	0:0	4	p_sys
op	208:36	0:0	4	->
water	208:38	0:0	4	f_p_masking
water	208:49	0:0	4	;
water	209:8	0:0	4	p_context
op	209:17	0:0	4	->
water	209:19	0:0	4	border_masking
op	209:34	0:0	4	=
water	209:36	0:0	4	p_sys
op	209:41	0:0	4	->
water	209:43	0:0	4	f_border_masking
water	209:59	0:0	4	;
water	211:8	0:0	4	p_context
op	211:17	0:0	4	->
water	211:19	0:0	4	luma_elim_threshold
op	211:39	0:0	4	=
water	211:41	0:0	4	p_sys
op	211:46	0:0	4	->
water	211:48	0:0	4	i_luma_elim
water	211:59	0:0	4	;
water	212:8	0:0	4	p_context
op	212:17	0:0	4	->
water	212:19	0:0	4	chroma_elim_threshold
op	212:41	0:0	4	=
water	212:43	0:0	4	p_sys
op	212:48	0:0	4	->
water	212:50	0:0	4	i_chroma_elim
water	212:63	0:0	4	;
if	214:8	215:50	4	(p_sys -> i_key_int > 0)
cond	214:12	214:31	5	p_sys -> i_key_int > 0
water	214:12	0:0	6	p_sys
op	214:17	0:0	6	->
water	214:19	0:0	6	i_key_int
op	214:29	0:0	6	>
water	214:31	0:0	6	0
stmts	215:12	215:50	5	
water	215:12	0:0	6	p_context
op	215:21	0:0	6	->
water	215:23	0:0	6	gop_size
op	215:32	0:0	6	=
water	215:34	0:0	6	p_sys
op	215:39	0:0	6	->
water	215:41	0:0	6	i_key_int
water	215:50	0:0	6	;
water	216:8	0:0	4	p_context
op	216:17	0:0	4	->
water	216:19	0:0	4	max_b_frames
op	216:32	0:0	4	=
call	217:12	217:60	4	VLC_CLIP
arg	217:22	217:39	5	p_sys->i_b_frames
water	217:22	0:0	6	p_sys
op	217:27	0:0	6	->
water	217:29	0:0	6	i_b_frames
arg	217:41	217:42	5	0
water	217:41	0:0	6	0
arg	217:44	217:60	5	FF_MAX_B_FRAMES
water	217:44	0:0	6	FF_MAX_B_FRAMES
water	217:61	0:0	4	;
water	218:8	0:0	4	p_context
op	218:17	0:0	4	->
water	218:19	0:0	4	b_frame_strategy
op	218:36	0:0	4	=
water	218:38	0:0	4	0
water	218:39	0:0	4	;
if	219:8	222:52	4	(! p_context -> max_b_frames && ( p_enc -> fmt_out . i_codec == VLC_CODEC_MPGV || p_enc -> fmt_out . i_codec == VLC_CODEC_MP2V ))
cond	219:12	221:56	5	! p_context -> max_b_frames && ( p_enc -> fmt_out . i_codec == VLC_CODEC_MPGV || p_enc -> fmt_out . i_codec == VLC_CODEC_MP2V )
op	219:12	0:0	6	!
water	219:13	0:0	6	p_context
op	219:22	0:0	6	->
water	219:24	0:0	6	max_b_frames
op	219:38	0:0	6	&&
water	220:12	0:0	6	(
water	220:15	0:0	6	p_enc
op	220:20	0:0	6	->
water	220:22	0:0	6	fmt_out
op	220:29	0:0	6	.
water	220:30	0:0	6	i_codec
op	220:38	0:0	6	==
water	220:41	0:0	6	VLC_CODEC_MPGV
op	220:56	0:0	6	||
water	221:15	0:0	6	p_enc
op	221:20	0:0	6	->
water	221:22	0:0	6	fmt_out
op	221:29	0:0	6	.
water	221:30	0:0	6	i_codec
op	221:38	0:0	6	==
water	221:41	0:0	6	VLC_CODEC_MP2V
water	221:56	0:0	6	)
stmts	222:12	222:52	5	
water	222:12	0:0	6	p_context
op	222:21	0:0	6	->
water	222:23	0:0	6	flags
op	222:29	0:0	6	|=
water	222:32	0:0	6	CODEC_FLAG_LOW_DELAY
water	222:52	0:0	6	;
call	223:8	226:58	4	av_reduce
arg	223:19	223:54	5	&p_context->sample_aspect_ratio.num
op	223:19	0:0	6	&
water	223:20	0:0	6	p_context
op	223:29	0:0	6	->
water	223:31	0:0	6	sample_aspect_ratio
op	223:50	0:0	6	.
water	223:51	0:0	6	num
arg	224:19	224:54	5	&p_context->sample_aspect_ratio.den
op	224:19	0:0	6	&
water	224:20	0:0	6	p_context
op	224:29	0:0	6	->
water	224:31	0:0	6	sample_aspect_ratio
op	224:50	0:0	6	.
water	224:51	0:0	6	den
arg	225:19	225:48	5	p_enc->fmt_in.video.i_sar_num
water	225:19	0:0	6	p_enc
op	225:24	0:0	6	->
water	225:26	0:0	6	fmt_in
op	225:32	0:0	6	.
water	225:33	0:0	6	video
op	225:38	0:0	6	.
water	225:39	0:0	6	i_sar_num
arg	226:19	226:48	5	p_enc->fmt_in.video.i_sar_den
water	226:19	0:0	6	p_enc
op	226:24	0:0	6	->
water	226:26	0:0	6	fmt_in
op	226:32	0:0	6	.
water	226:33	0:0	6	video
op	226:38	0:0	6	.
water	226:39	0:0	6	i_sar_den
arg	226:50	226:58	5	1<<30
water	226:50	0:0	6	1
op	226:52	0:0	6	<<
water	226:55	0:0	6	30
water	226:59	0:0	4	;
water	227:8	0:0	4	p_enc
op	227:13	0:0	4	->
water	227:15	0:0	4	fmt_in
op	227:21	0:0	4	.
water	227:22	0:0	4	i_codec
op	227:30	0:0	4	=
water	227:32	0:0	4	VLC_CODEC_I420
water	227:46	0:0	4	;
if	229:8	230:51	4	(p_enc -> fmt_out . i_codec == VLC_CODEC_TIFF)
cond	229:12	229:38	5	p_enc -> fmt_out . i_codec == VLC_CODEC_TIFF
water	229:12	0:0	6	p_enc
op	229:17	0:0	6	->
water	229:19	0:0	6	fmt_out
op	229:26	0:0	6	.
water	229:27	0:0	6	i_codec
op	229:35	0:0	6	==
water	229:38	0:0	6	VLC_CODEC_TIFF
stmts	230:12	230:51	5	
water	230:12	0:0	6	p_enc
op	230:17	0:0	6	->
water	230:19	0:0	6	fmt_in
op	230:25	0:0	6	.
water	230:26	0:0	6	i_codec
op	230:34	0:0	6	=
water	230:36	0:0	6	VLC_CODEC_RGB24
water	230:51	0:0	6	;
water	231:8	0:0	4	p_enc
op	231:13	0:0	4	->
water	231:15	0:0	4	fmt_in
op	231:21	0:0	4	.
water	231:22	0:0	4	video
op	231:27	0:0	4	.
water	231:28	0:0	4	i_chroma
op	231:37	0:0	4	=
water	231:39	0:0	4	p_enc
op	231:44	0:0	4	->
water	231:46	0:0	4	fmt_in
op	231:52	0:0	4	.
water	231:53	0:0	4	i_codec
water	231:60	0:0	4	;
call	232:8	232:67	4	GetFfmpegChroma
arg	232:25	232:44	5	&p_context->pix_fmt
op	232:25	0:0	6	&
water	232:26	0:0	6	p_context
op	232:35	0:0	6	->
water	232:37	0:0	6	pix_fmt
arg	232:46	232:67	5	&p_enc->fmt_in.video
op	232:46	0:0	6	&
water	232:47	0:0	6	p_enc
op	232:52	0:0	6	->
water	232:54	0:0	6	fmt_in
op	232:60	0:0	6	.
water	232:61	0:0	6	video
water	232:68	0:0	4	;
if	233:8	243:8	4	(p_codec -> pix_fmts)
cond	233:12	233:21	5	p_codec -> pix_fmts
water	233:12	0:0	6	p_codec
op	233:19	0:0	6	->
water	233:21	0:0	6	pix_fmts
stmts	234:8	243:8	5	
water	234:8	0:0	6	{
decl	235:12	235:57	6	const enum PixelFormat	*p
op	235:38	0:0	6	=
water	235:40	0:0	6	p_codec
op	235:47	0:0	6	->
water	235:49	0:0	6	pix_fmts
for	236:12	239:12	6	(;* p != - 1;p ++)
forinit	236:17	236:17	7	;
water	236:17	0:0	8	;
cond	236:19	236:26	7	* p != - 1
op	236:19	0:0	8	*
water	236:20	0:0	8	p
op	236:22	0:0	8	!=
op	236:25	0:0	8	-
water	236:26	0:0	8	1
forexpr	236:29	236:30	7	p ++
water	236:29	0:0	8	p
op	236:30	0:0	8	++
stmts	237:12	239:12	7	
water	237:12	0:0	8	{
if	238:16	238:52	8	(* p == p_context -> pix_fmt)
cond	238:20	238:37	9	* p == p_context -> pix_fmt
op	238:20	0:0	10	*
water	238:21	0:0	10	p
op	238:23	0:0	10	==
water	238:26	0:0	10	p_context
op	238:35	0:0	10	->
water	238:37	0:0	10	pix_fmt
stmts	238:47	238:52	9	
break	238:47	238:52	10	
water	239:12	0:0	8	}
if	240:12	240:68	6	(* p == - 1)
cond	240:16	240:23	7	* p == - 1
op	240:16	0:0	8	*
water	240:17	0:0	8	p
op	240:19	0:0	8	==
op	240:22	0:0	8	-
water	240:23	0:0	8	1
stmts	240:27	240:68	7	
water	240:27	0:0	8	p_context
op	240:36	0:0	8	->
water	240:38	0:0	8	pix_fmt
op	240:46	0:0	8	=
water	240:48	0:0	8	p_codec
op	240:55	0:0	8	->
water	240:57	0:0	8	pix_fmts
op	240:65	0:0	8	[
water	240:66	0:0	8	0
op	240:67	0:0	8	]
water	240:68	0:0	8	;
call	241:12	241:67	6	GetVlcChroma
arg	241:26	241:46	7	&p_enc->fmt_in.video
op	241:26	0:0	8	&
water	241:27	0:0	8	p_enc
op	241:32	0:0	8	->
water	241:34	0:0	8	fmt_in
op	241:40	0:0	8	.
water	241:41	0:0	8	video
arg	241:48	241:67	7	p_context->pix_fmt
water	241:48	0:0	8	p_context
op	241:57	0:0	8	->
water	241:59	0:0	8	pix_fmt
water	241:68	0:0	6	;
water	242:12	0:0	6	p_enc
op	242:17	0:0	6	->
water	242:19	0:0	6	fmt_in
op	242:25	0:0	6	.
water	242:26	0:0	6	i_codec
op	242:34	0:0	6	=
water	242:36	0:0	6	p_enc
op	242:41	0:0	6	->
water	242:43	0:0	6	fmt_in
op	242:49	0:0	6	.
water	242:50	0:0	6	video
op	242:55	0:0	6	.
water	242:56	0:0	6	i_chroma
water	242:64	0:0	6	;
water	243:8	0:0	6	}
if	244:8	245:63	4	(p_sys -> f_i_quant_factor != 0 . 0)
cond	244:13	244:42	5	p_sys -> f_i_quant_factor != 0 . 0
water	244:13	0:0	6	p_sys
op	244:18	0:0	6	->
water	244:20	0:0	6	f_i_quant_factor
op	244:37	0:0	6	!=
water	244:40	0:0	6	0
op	244:41	0:0	6	.
water	244:42	0:0	6	0
stmts	245:12	245:63	5	
water	245:12	0:0	6	p_context
op	245:21	0:0	6	->
water	245:23	0:0	6	i_quant_factor
op	245:38	0:0	6	=
water	245:40	0:0	6	p_sys
op	245:45	0:0	6	->
water	245:47	0:0	6	f_i_quant_factor
water	245:63	0:0	6	;
water	246:8	0:0	4	p_context
op	246:17	0:0	4	->
water	246:19	0:0	4	noise_reduction
op	246:35	0:0	4	=
water	246:37	0:0	4	p_sys
op	246:42	0:0	4	->
water	246:44	0:0	4	i_noise_reduction
water	246:61	0:0	4	;
if	247:8	251:8	4	(p_sys -> b_mpeg4_matrix)
cond	247:13	247:20	5	p_sys -> b_mpeg4_matrix
water	247:13	0:0	6	p_sys
op	247:18	0:0	6	->
water	247:20	0:0	6	b_mpeg4_matrix
stmts	248:8	251:8	5	
water	248:8	0:0	6	{
water	249:12	0:0	6	p_context
op	249:21	0:0	6	->
water	249:23	0:0	6	intra_matrix
op	249:36	0:0	6	=
water	249:38	0:0	6	mpeg4_default_intra_matrix
water	249:64	0:0	6	;
water	250:12	0:0	6	p_context
op	250:21	0:0	6	->
water	250:23	0:0	6	inter_matrix
op	250:36	0:0	6	=
water	250:38	0:0	6	mpeg4_default_non_intra_matrix
water	250:68	0:0	6	;
water	251:8	0:0	6	}
if	252:8	256:8	4	(p_sys -> b_pre_me)
cond	252:13	252:20	5	p_sys -> b_pre_me
water	252:13	0:0	6	p_sys
op	252:18	0:0	6	->
water	252:20	0:0	6	b_pre_me
stmts	253:8	256:8	5	
water	253:8	0:0	6	{
water	254:12	0:0	6	p_context
op	254:21	0:0	6	->
water	254:23	0:0	6	pre_me
op	254:30	0:0	6	=
water	254:32	0:0	6	1
water	254:33	0:0	6	;
water	255:12	0:0	6	p_context
op	255:21	0:0	6	->
water	255:23	0:0	6	me_pre_cmp
op	255:34	0:0	6	=
water	255:36	0:0	6	FF_CMP_CHROMA
water	255:49	0:0	6	;
water	256:8	0:0	6	}
if	257:8	272:8	4	(p_sys -> b_interlace)
cond	257:13	257:20	5	p_sys -> b_interlace
water	257:13	0:0	6	p_sys
op	257:18	0:0	6	->
water	257:20	0:0	6	b_interlace
stmts	258:8	272:8	5	
water	258:8	0:0	6	{
if	259:12	265:12	6	(p_context -> height <= 280)
cond	259:17	259:38	7	p_context -> height <= 280
water	259:17	0:0	8	p_context
op	259:26	0:0	8	->
water	259:28	0:0	8	height
op	259:35	0:0	8	<=
water	259:38	0:0	8	280
stmts	260:12	265:12	7	
water	260:12	0:0	8	{
if	261:16	264:43	8	(p_context -> height != 16 || p_context -> width != 16)
cond	261:21	261:68	9	p_context -> height != 16 || p_context -> width != 16
water	261:21	0:0	10	p_context
op	261:30	0:0	10	->
water	261:32	0:0	10	height
op	261:39	0:0	10	!=
water	261:42	0:0	10	16
op	261:45	0:0	10	||
water	261:48	0:0	10	p_context
op	261:57	0:0	10	->
water	261:59	0:0	10	width
op	261:65	0:0	10	!=
water	261:68	0:0	10	16
stmts	262:20	264:43	9	
call	262:20	264:42	10	msg_Warn
arg	262:30	262:35	11	p_enc
water	262:30	0:0	12	p_enc
arg	263:24	263:77	11	"disabling interlaced video because height=%d <= 280"
water	263:24	0:0	12	"disabling interlaced video because height=%d <= 280"
arg	264:24	264:42	11	p_context->height
water	264:24	0:0	12	p_context
op	264:33	0:0	12	->
water	264:35	0:0	12	height
water	264:43	0:0	10	;
water	265:12	0:0	8	}
else	266:12	271:12	6
stmts	267:12	271:12	7	
water	267:12	0:0	8	{
water	268:16	0:0	8	p_context
op	268:25	0:0	8	->
water	268:27	0:0	8	flags
op	268:33	0:0	8	|=
water	268:36	0:0	8	CODEC_FLAG_INTERLACED_DCT
water	268:61	0:0	8	;
if	269:16	270:64	8	(p_sys -> b_interlace_me)
cond	269:21	269:28	9	p_sys -> b_interlace_me
water	269:21	0:0	10	p_sys
op	269:26	0:0	10	->
water	269:28	0:0	10	b_interlace_me
stmts	270:20	270:64	9	
water	270:20	0:0	10	p_context
op	270:29	0:0	10	->
water	270:31	0:0	10	flags
op	270:37	0:0	10	|=
water	270:40	0:0	10	CODEC_FLAG_INTERLACED_ME
water	270:64	0:0	10	;
water	271:12	0:0	8	}
water	272:8	0:0	6	}
water	273:8	0:0	4	p_context
op	273:17	0:0	4	->
water	273:19	0:0	4	trellis
op	273:27	0:0	4	=
water	273:29	0:0	4	p_sys
op	273:34	0:0	4	->
water	273:36	0:0	4	b_trellis
water	273:45	0:0	4	;
if	274:8	275:49	4	(p_sys -> i_qmin > 0 && p_sys -> i_qmin == p_sys -> i_qmax)
cond	274:13	274:58	5	p_sys -> i_qmin > 0 && p_sys -> i_qmin == p_sys -> i_qmax
water	274:13	0:0	6	p_sys
op	274:18	0:0	6	->
water	274:20	0:0	6	i_qmin
op	274:27	0:0	6	>
water	274:29	0:0	6	0
op	274:31	0:0	6	&&
water	274:34	0:0	6	p_sys
op	274:39	0:0	6	->
water	274:41	0:0	6	i_qmin
op	274:48	0:0	6	==
water	274:51	0:0	6	p_sys
op	274:56	0:0	6	->
water	274:58	0:0	6	i_qmax
stmts	275:12	275:49	5	
water	275:12	0:0	6	p_context
op	275:21	0:0	6	->
water	275:23	0:0	6	flags
op	275:29	0:0	6	|=
water	275:32	0:0	6	CODEC_FLAG_QSCALE
water	275:49	0:0	6	;
if	280:8	294:32	4	(i_codec_id == AV_CODEC_ID_FLV1 || i_codec_id == AV_CODEC_ID_H261 || i_codec_id == AV_CODEC_ID_LJPEG || i_codec_id == AV_CODEC_ID_MJPEG || i_codec_id == AV_CODEC_ID_H263 || i_codec_id == AV_CODEC_ID_H263P || i_codec_id == AV_CODEC_ID_MSMPEG4V1 || i_codec_id == AV_CODEC_ID_MSMPEG4V2 || i_codec_id == AV_CODEC_ID_MSMPEG4V3 || i_codec_id == AV_CODEC_ID_WMV1 || i_codec_id == AV_CODEC_ID_WMV2 || i_codec_id == AV_CODEC_ID_RV10 || i_codec_id == AV_CODEC_ID_RV20 || i_codec_id == AV_CODEC_ID_SVQ3)
cond	280:13	293:27	5	i_codec_id == AV_CODEC_ID_FLV1 || i_codec_id == AV_CODEC_ID_H261 || i_codec_id == AV_CODEC_ID_LJPEG || i_codec_id == AV_CODEC_ID_MJPEG || i_codec_id == AV_CODEC_ID_H263 || i_codec_id == AV_CODEC_ID_H263P || i_codec_id == AV_CODEC_ID_MSMPEG4V1 || i_codec_id == AV_CODEC_ID_MSMPEG4V2 || i_codec_id == AV_CODEC_ID_MSMPEG4V3 || i_codec_id == AV_CODEC_ID_WMV1 || i_codec_id == AV_CODEC_ID_WMV2 || i_codec_id == AV_CODEC_ID_RV10 || i_codec_id == AV_CODEC_ID_RV20 || i_codec_id == AV_CODEC_ID_SVQ3
water	280:13	0:0	6	i_codec_id
op	280:24	0:0	6	==
water	280:27	0:0	6	AV_CODEC_ID_FLV1
op	280:44	0:0	6	||
water	281:13	0:0	6	i_codec_id
op	281:24	0:0	6	==
water	281:27	0:0	6	AV_CODEC_ID_H261
op	281:44	0:0	6	||
water	282:13	0:0	6	i_codec_id
op	282:24	0:0	6	==
water	282:27	0:0	6	AV_CODEC_ID_LJPEG
op	282:45	0:0	6	||
water	283:13	0:0	6	i_codec_id
op	283:24	0:0	6	==
water	283:27	0:0	6	AV_CODEC_ID_MJPEG
op	283:45	0:0	6	||
water	284:13	0:0	6	i_codec_id
op	284:24	0:0	6	==
water	284:27	0:0	6	AV_CODEC_ID_H263
op	284:44	0:0	6	||
water	285:13	0:0	6	i_codec_id
op	285:24	0:0	6	==
water	285:27	0:0	6	AV_CODEC_ID_H263P
op	285:45	0:0	6	||
water	286:13	0:0	6	i_codec_id
op	286:24	0:0	6	==
water	286:27	0:0	6	AV_CODEC_ID_MSMPEG4V1
op	286:49	0:0	6	||
water	287:13	0:0	6	i_codec_id
op	287:24	0:0	6	==
water	287:27	0:0	6	AV_CODEC_ID_MSMPEG4V2
op	287:49	0:0	6	||
water	288:13	0:0	6	i_codec_id
op	288:24	0:0	6	==
water	288:27	0:0	6	AV_CODEC_ID_MSMPEG4V3
op	288:49	0:0	6	||
water	289:13	0:0	6	i_codec_id
op	289:24	0:0	6	==
water	289:27	0:0	6	AV_CODEC_ID_WMV1
op	289:44	0:0	6	||
water	290:13	0:0	6	i_codec_id
op	290:24	0:0	6	==
water	290:27	0:0	6	AV_CODEC_ID_WMV2
op	290:44	0:0	6	||
water	291:13	0:0	6	i_codec_id
op	291:24	0:0	6	==
water	291:27	0:0	6	AV_CODEC_ID_RV10
op	291:44	0:0	6	||
water	292:13	0:0	6	i_codec_id
op	292:24	0:0	6	==
water	292:27	0:0	6	AV_CODEC_ID_RV20
op	292:44	0:0	6	||
water	293:13	0:0	6	i_codec_id
op	293:24	0:0	6	==
water	293:27	0:0	6	AV_CODEC_ID_SVQ3
stmts	294:12	294:32	5	
water	294:12	0:0	6	p_enc
op	294:17	0:0	6	->
water	294:19	0:0	6	i_threads
op	294:29	0:0	6	=
water	294:31	0:0	6	1
water	294:32	0:0	6	;
if	295:8	296:63	4	(p_sys -> i_vtolerance > 0)
cond	295:12	295:34	5	p_sys -> i_vtolerance > 0
water	295:12	0:0	6	p_sys
op	295:17	0:0	6	->
water	295:19	0:0	6	i_vtolerance
op	295:32	0:0	6	>
water	295:34	0:0	6	0
stmts	296:12	296:63	5	
water	296:12	0:0	6	p_context
op	296:21	0:0	6	->
water	296:23	0:0	6	bit_rate_tolerance
op	296:42	0:0	6	=
water	296:44	0:0	6	p_sys
op	296:49	0:0	6	->
water	296:51	0:0	6	i_vtolerance
water	296:63	0:0	6	;
if	300:8	304:8	4	(p_enc -> fmt_out . i_bitrate > 0 && p_sys -> i_qmax == 0 && p_sys -> i_qmin == 0)
cond	300:12	300:83	5	p_enc -> fmt_out . i_bitrate > 0 && p_sys -> i_qmax == 0 && p_sys -> i_qmin == 0
water	300:12	0:0	6	p_enc
op	300:17	0:0	6	->
water	300:19	0:0	6	fmt_out
op	300:26	0:0	6	.
water	300:27	0:0	6	i_bitrate
op	300:37	0:0	6	>
water	300:39	0:0	6	0
op	300:41	0:0	6	&&
water	300:44	0:0	6	p_sys
op	300:49	0:0	6	->
water	300:51	0:0	6	i_qmax
op	300:58	0:0	6	==
water	300:61	0:0	6	0
op	300:63	0:0	6	&&
water	300:66	0:0	6	p_sys
op	300:71	0:0	6	->
water	300:73	0:0	6	i_qmin
op	300:80	0:0	6	==
water	300:83	0:0	6	0
stmts	301:8	304:8	5	
water	301:8	0:0	6	{
water	302:12	0:0	6	p_sys
op	302:17	0:0	6	->
water	302:19	0:0	6	i_qmax
op	302:26	0:0	6	=
water	302:28	0:0	6	51
water	302:30	0:0	6	;
water	303:12	0:0	6	p_sys
op	303:17	0:0	6	->
water	303:19	0:0	6	i_qmin
op	303:26	0:0	6	=
water	303:28	0:0	6	3
water	303:29	0:0	6	;
water	304:8	0:0	6	}
if	305:8	309:8	4	(p_sys -> i_qmin > 0)
cond	305:12	305:28	5	p_sys -> i_qmin > 0
water	305:12	0:0	6	p_sys
op	305:17	0:0	6	->
water	305:19	0:0	6	i_qmin
op	305:26	0:0	6	>
water	305:28	0:0	6	0
stmts	306:8	309:8	5	
water	306:8	0:0	6	{
water	307:12	0:0	6	p_context
op	307:21	0:0	6	->
water	307:23	0:0	6	qmin
op	307:28	0:0	6	=
water	307:30	0:0	6	p_sys
op	307:35	0:0	6	->
water	307:37	0:0	6	i_qmin
water	307:43	0:0	6	;
water	308:12	0:0	6	p_context
op	308:21	0:0	6	->
water	308:23	0:0	6	mb_lmin
op	308:31	0:0	6	=
water	308:33	0:0	6	p_context
op	308:42	0:0	6	->
water	308:44	0:0	6	lmin
op	308:49	0:0	6	=
water	308:51	0:0	6	p_sys
op	308:56	0:0	6	->
water	308:58	0:0	6	i_qmin
op	308:65	0:0	6	*
water	308:67	0:0	6	FF_QP2LAMBDA
water	308:79	0:0	6	;
water	309:8	0:0	6	}
if	310:8	314:8	4	(p_sys -> i_qmax > 0)
cond	310:12	310:28	5	p_sys -> i_qmax > 0
water	310:12	0:0	6	p_sys
op	310:17	0:0	6	->
water	310:19	0:0	6	i_qmax
op	310:26	0:0	6	>
water	310:28	0:0	6	0
stmts	311:8	314:8	5	
water	311:8	0:0	6	{
water	312:12	0:0	6	p_context
op	312:21	0:0	6	->
water	312:23	0:0	6	qmax
op	312:28	0:0	6	=
water	312:30	0:0	6	p_sys
op	312:35	0:0	6	->
water	312:37	0:0	6	i_qmax
water	312:43	0:0	6	;
water	313:12	0:0	6	p_context
op	313:21	0:0	6	->
water	313:23	0:0	6	mb_lmax
op	313:31	0:0	6	=
water	313:33	0:0	6	p_context
op	313:42	0:0	6	->
water	313:44	0:0	6	lmax
op	313:49	0:0	6	=
water	313:51	0:0	6	p_sys
op	313:56	0:0	6	->
water	313:58	0:0	6	i_qmax
op	313:65	0:0	6	*
water	313:67	0:0	6	FF_QP2LAMBDA
water	313:79	0:0	6	;
water	314:8	0:0	6	}
water	315:8	0:0	4	p_context
op	315:17	0:0	4	->
water	315:19	0:0	4	max_qdiff
op	315:29	0:0	4	=
water	315:31	0:0	4	3
water	315:32	0:0	4	;
water	316:8	0:0	4	p_context
op	316:17	0:0	4	->
water	316:19	0:0	4	mb_decision
op	316:31	0:0	4	=
water	316:33	0:0	4	p_sys
op	316:38	0:0	4	->
water	316:40	0:0	4	i_hq
water	316:44	0:0	4	;
if	317:8	321:8	4	(p_sys -> i_quality && ! p_enc -> fmt_out . i_bitrate)
cond	317:12	317:48	5	p_sys -> i_quality && ! p_enc -> fmt_out . i_bitrate
water	317:12	0:0	6	p_sys
op	317:17	0:0	6	->
water	317:19	0:0	6	i_quality
op	317:29	0:0	6	&&
op	317:32	0:0	6	!
water	317:33	0:0	6	p_enc
op	317:38	0:0	6	->
water	317:40	0:0	6	fmt_out
op	317:47	0:0	6	.
water	317:48	0:0	6	i_bitrate
stmts	318:8	321:8	5	
water	318:8	0:0	6	{
water	319:12	0:0	6	p_context
op	319:21	0:0	6	->
water	319:23	0:0	6	flags
op	319:29	0:0	6	|=
water	319:32	0:0	6	CODEC_FLAG_QSCALE
water	319:49	0:0	6	;
water	320:12	0:0	6	p_context
op	320:21	0:0	6	->
water	320:23	0:0	6	global_quality
op	320:38	0:0	6	=
water	320:40	0:0	6	p_sys
op	320:45	0:0	6	->
water	320:47	0:0	6	i_quality
water	320:56	0:0	6	;
water	321:8	0:0	6	}
else	322:8	339:8	4
stmts	323:8	339:8	5	
water	323:8	0:0	6	{
water	324:12	0:0	6	p_context
op	324:21	0:0	6	->
water	324:23	0:0	6	rc_qsquish
op	324:34	0:0	6	=
water	324:36	0:0	6	1
op	324:37	0:0	6	.
water	324:38	0:0	6	0
water	324:39	0:0	6	;
if	326:12	329:12	6	(! p_sys -> i_rc_buffer_size)
cond	326:16	326:24	7	! p_sys -> i_rc_buffer_size
op	326:16	0:0	8	!
water	326:17	0:0	8	p_sys
op	326:22	0:0	8	->
water	326:24	0:0	8	i_rc_buffer_size
stmts	327:12	329:12	7	
water	327:12	0:0	8	{
water	328:16	0:0	8	p_sys
op	328:21	0:0	8	->
water	328:23	0:0	8	i_rc_buffer_size
op	328:40	0:0	8	=
water	328:42	0:0	8	p_enc
op	328:47	0:0	8	->
water	328:49	0:0	8	fmt_out
op	328:56	0:0	8	.
water	328:57	0:0	8	i_bitrate
op	328:67	0:0	8	*
water	328:69	0:0	8	8
op	328:71	0:0	8	/
water	328:73	0:0	8	2
water	328:74	0:0	8	;
water	329:12	0:0	8	}
call	330:12	330:78	6	msg_Dbg
arg	330:21	330:26	7	p_enc
water	330:21	0:0	8	p_enc
arg	330:28	330:52	7	"rc buffer size %d bits"
water	330:28	0:0	8	"rc buffer size %d bits"
arg	330:54	330:78	7	p_sys->i_rc_buffer_size
water	330:54	0:0	8	p_sys
op	330:59	0:0	8	->
water	330:61	0:0	8	i_rc_buffer_size
water	330:79	0:0	6	;
water	332:12	0:0	6	p_context
op	332:21	0:0	6	->
water	332:23	0:0	6	rc_max_rate
op	332:35	0:0	6	=
water	332:37	0:0	6	p_enc
op	332:42	0:0	6	->
water	332:44	0:0	6	fmt_out
op	332:51	0:0	6	.
water	332:52	0:0	6	i_bitrate
water	332:61	0:0	6	;
water	333:12	0:0	6	p_context
op	333:21	0:0	6	->
water	333:23	0:0	6	rc_min_rate
op	333:35	0:0	6	=
water	333:37	0:0	6	p_enc
op	333:42	0:0	6	->
water	333:44	0:0	6	fmt_out
op	333:51	0:0	6	.
water	333:52	0:0	6	i_bitrate
water	333:61	0:0	6	;
water	334:12	0:0	6	p_context
op	334:21	0:0	6	->
water	334:23	0:0	6	rc_buffer_size
op	334:38	0:0	6	=
water	334:40	0:0	6	p_sys
op	334:45	0:0	6	->
water	334:47	0:0	6	i_rc_buffer_size
water	334:63	0:0	6	;
water	336:12	0:0	6	p_context
op	336:21	0:0	6	->
water	336:23	0:0	6	rc_initial_buffer_occupancy
op	337:16	0:0	6	=
water	337:18	0:0	6	p_sys
op	337:23	0:0	6	->
water	337:25	0:0	6	i_rc_buffer_size
op	337:42	0:0	6	*
water	337:44	0:0	6	3
op	337:45	0:0	6	/
water	337:46	0:0	6	4
water	337:47	0:0	6	;
water	338:12	0:0	6	p_context
op	338:21	0:0	6	->
water	338:23	0:0	6	rc_buffer_aggressivity
op	338:46	0:0	6	=
water	338:48	0:0	6	p_sys
op	338:53	0:0	6	->
water	338:55	0:0	6	f_rc_buffer_aggressivity
water	338:79	0:0	6	;
water	339:8	0:0	6	}
water	340:4	0:0	4	}
else	341:4	442:4	2
stmts	341:9	442:4	3	
if	341:9	442:4	4	(p_enc -> fmt_in . i_cat == AUDIO_ES)
cond	341:13	341:36	5	p_enc -> fmt_in . i_cat == AUDIO_ES
water	341:13	0:0	6	p_enc
op	341:18	0:0	6	->
water	341:20	0:0	6	fmt_in
op	341:26	0:0	6	.
water	341:27	0:0	6	i_cat
op	341:33	0:0	6	==
water	341:36	0:0	6	AUDIO_ES
stmts	342:4	442:4	5	
water	342:4	0:0	6	{
if	344:8	345:47	6	(i_codec_id == AV_CODEC_ID_MP3 && p_enc -> fmt_out . audio . i_channels > 2)
cond	344:12	344:80	7	i_codec_id == AV_CODEC_ID_MP3 && p_enc -> fmt_out . audio . i_channels > 2
water	344:12	0:0	8	i_codec_id
op	344:23	0:0	8	==
water	344:26	0:0	8	AV_CODEC_ID_MP3
op	344:42	0:0	8	&&
water	344:45	0:0	8	p_enc
op	344:50	0:0	8	->
water	344:52	0:0	8	fmt_out
op	344:59	0:0	8	.
water	344:60	0:0	8	audio
op	344:65	0:0	8	.
water	344:66	0:0	8	i_channels
op	344:78	0:0	8	>
water	344:80	0:0	8	2
stmts	345:12	345:47	7	
water	345:12	0:0	8	p_enc
op	345:17	0:0	8	->
water	345:19	0:0	8	fmt_out
op	345:26	0:0	8	.
water	345:27	0:0	8	audio
op	345:32	0:0	8	.
water	345:33	0:0	8	i_channels
op	345:44	0:0	8	=
water	345:46	0:0	8	2
water	345:47	0:0	8	;
water	346:8	0:0	6	p_context
op	346:17	0:0	6	->
water	346:19	0:0	6	codec_type
op	346:31	0:0	6	=
water	346:33	0:0	6	AVMEDIA_TYPE_AUDIO
water	346:51	0:0	6	;
water	347:8	0:0	6	p_context
op	347:17	0:0	6	->
water	347:19	0:0	6	sample_fmt
op	347:31	0:0	6	=
water	347:33	0:0	6	p_codec
op	347:40	0:0	6	->
water	347:42	0:0	6	sample_fmts
water	347:54	0:0	6	?
water	348:36	0:0	6	p_codec
op	348:43	0:0	6	->
water	348:45	0:0	6	sample_fmts
op	348:56	0:0	6	[
water	348:57	0:0	6	0
op	348:58	0:0	6	]
water	348:60	0:0	6	:
water	349:36	0:0	6	AV_SAMPLE_FMT_S16
water	349:53	0:0	6	;
if	352:8	365:8	6	(GetVlcAudioFormat (p_context -> sample_fmt ) != p_enc -> fmt_in . i_codec && p_codec -> sample_fmts)
cond	352:12	353:24	7	GetVlcAudioFormat (p_context -> sample_fmt ) != p_enc -> fmt_in . i_codec && p_codec -> sample_fmts
call	352:12	352:53	8	GetVlcAudioFormat
arg	352:31	352:53	9	p_context->sample_fmt
water	352:31	0:0	10	p_context
op	352:40	0:0	10	->
water	352:42	0:0	10	sample_fmt
op	352:55	0:0	8	!=
water	352:58	0:0	8	p_enc
op	352:63	0:0	8	->
water	352:65	0:0	8	fmt_in
op	352:71	0:0	8	.
water	352:72	0:0	8	i_codec
op	353:12	0:0	8	&&
water	353:15	0:0	8	p_codec
op	353:22	0:0	8	->
water	353:24	0:0	8	sample_fmts
stmts	354:8	365:8	7	
water	354:8	0:0	8	{
call	355:12	355:136	8	msg_Dbg
arg	355:21	355:26	9	p_enc
water	355:21	0:0	10	p_enc
arg	355:28	355:86	9	"Trying to find more suitable sample format instead of %s"
water	355:28	0:0	10	"Trying to find more suitable sample format instead of %s"
arg	355:88	355:136	9	av_get_sample_fmt_name(p_context->sample_fmt)
call	355:88	355:134	10	av_get_sample_fmt_name
arg	355:112	355:134	11	p_context->sample_fmt
water	355:112	0:0	12	p_context
op	355:121	0:0	12	->
water	355:123	0:0	12	sample_fmt
water	355:137	0:0	8	;
for	356:12	364:12	8	( unsigned int i = 0 ;p_codec -> sample_fmts [ i ] != - 1;i ++)
forinit	0:0	356:33	9	 unsigned int i = 0 ;
decl	356:17	356:33	10	unsigned int	i
op	356:31	0:0	10	=
water	356:32	0:0	10	0
cond	356:35	356:63	9	p_codec -> sample_fmts [ i ] != - 1
water	356:35	0:0	10	p_codec
op	356:42	0:0	10	->
water	356:44	0:0	10	sample_fmts
op	356:55	0:0	10	[
water	356:56	0:0	10	i
op	356:57	0:0	10	]
op	356:59	0:0	10	!=
op	356:62	0:0	10	-
water	356:63	0:0	10	1
forexpr	356:66	356:67	9	i ++
water	356:66	0:0	10	i
op	356:67	0:0	10	++
stmts	357:12	364:12	9	
water	357:12	0:0	10	{
if	358:16	363:16	10	(GetVlcAudioFormat (p_codec -> sample_fmts [ i ] ) == p_enc -> fmt_in . i_codec)
cond	358:20	358:82	11	GetVlcAudioFormat (p_codec -> sample_fmts [ i ] ) == p_enc -> fmt_in . i_codec
call	358:20	358:63	12	GetVlcAudioFormat
arg	358:39	358:63	13	p_codec->sample_fmts[i]
water	358:39	0:0	14	p_codec
op	358:46	0:0	14	->
water	358:48	0:0	14	sample_fmts
op	358:59	0:0	14	[
water	358:60	0:0	14	i
op	358:61	0:0	14	]
op	358:65	0:0	12	==
water	358:68	0:0	12	p_enc
op	358:73	0:0	12	->
water	358:75	0:0	12	fmt_in
op	358:81	0:0	12	.
water	358:82	0:0	12	i_codec
stmts	359:16	363:16	11	
water	359:16	0:0	12	{
water	360:20	0:0	12	p_context
op	360:29	0:0	12	->
water	360:31	0:0	12	sample_fmt
op	360:42	0:0	12	=
water	360:44	0:0	12	p_codec
op	360:51	0:0	12	->
water	360:53	0:0	12	sample_fmts
op	360:64	0:0	12	[
water	360:65	0:0	12	i
op	360:66	0:0	12	]
water	360:67	0:0	12	;
call	361:20	361:117	12	msg_Dbg
arg	361:29	361:34	13	p_enc
water	361:29	0:0	14	p_enc
arg	361:36	361:67	13	"Using %s as new sample format"
water	361:36	0:0	14	"Using %s as new sample format"
arg	361:69	361:117	13	av_get_sample_fmt_name(p_context->sample_fmt)
call	361:69	361:115	14	av_get_sample_fmt_name
arg	361:93	361:115	15	p_context->sample_fmt
water	361:93	0:0	16	p_context
op	361:102	0:0	16	->
water	361:104	0:0	16	sample_fmt
water	361:118	0:0	12	;
break	362:20	362:25	12	
water	363:16	0:0	12	}
water	364:12	0:0	10	}
water	365:8	0:0	8	}
water	366:8	0:0	6	p_sys
op	366:13	0:0	6	->
water	366:15	0:0	6	b_planar
op	366:24	0:0	6	=
call	366:26	366:73	6	av_sample_fmt_is_planar
arg	366:51	366:73	7	p_context->sample_fmt
water	366:51	0:0	8	p_context
op	366:60	0:0	8	->
water	366:62	0:0	8	sample_fmt
water	366:74	0:0	6	;
if	369:8	381:8	6	(p_sys -> b_planar && p_codec -> sample_fmts)
cond	369:12	369:40	7	p_sys -> b_planar && p_codec -> sample_fmts
water	369:12	0:0	8	p_sys
op	369:17	0:0	8	->
water	369:19	0:0	8	b_planar
op	369:28	0:0	8	&&
water	369:31	0:0	8	p_codec
op	369:38	0:0	8	->
water	369:40	0:0	8	sample_fmts
stmts	370:8	381:8	7	
water	370:8	0:0	8	{
call	371:12	371:136	8	msg_Dbg
arg	371:21	371:26	9	p_enc
water	371:21	0:0	10	p_enc
arg	371:28	371:86	9	"Trying to find packet sample format instead of planar %s"
water	371:28	0:0	10	"Trying to find packet sample format instead of planar %s"
arg	371:88	371:136	9	av_get_sample_fmt_name(p_context->sample_fmt)
call	371:88	371:134	10	av_get_sample_fmt_name
arg	371:112	371:134	11	p_context->sample_fmt
water	371:112	0:0	12	p_context
op	371:121	0:0	12	->
water	371:123	0:0	12	sample_fmt
water	371:137	0:0	8	;
for	372:12	380:12	8	( unsigned int i = 0 ;p_codec -> sample_fmts [ i ] != - 1;i ++)
forinit	0:0	372:33	9	 unsigned int i = 0 ;
decl	372:17	372:33	10	unsigned int	i
op	372:31	0:0	10	=
water	372:32	0:0	10	0
cond	372:35	372:63	9	p_codec -> sample_fmts [ i ] != - 1
water	372:35	0:0	10	p_codec
op	372:42	0:0	10	->
water	372:44	0:0	10	sample_fmts
op	372:55	0:0	10	[
water	372:56	0:0	10	i
op	372:57	0:0	10	]
op	372:59	0:0	10	!=
op	372:62	0:0	10	-
water	372:63	0:0	10	1
forexpr	372:66	372:67	9	i ++
water	372:66	0:0	10	i
op	372:67	0:0	10	++
stmts	373:12	380:12	9	
water	373:12	0:0	10	{
if	374:16	379:16	10	(!av_sample_fmt_is_planar (p_codec -> sample_fmts [ i ] ))
cond	374:20	374:70	11	!av_sample_fmt_is_planar (p_codec -> sample_fmts [ i ] )
op	374:20	0:0	12	!
call	374:21	374:70	12	av_sample_fmt_is_planar
arg	374:46	374:70	13	p_codec->sample_fmts[i]
water	374:46	0:0	14	p_codec
op	374:53	0:0	14	->
water	374:55	0:0	14	sample_fmts
op	374:66	0:0	14	[
water	374:67	0:0	14	i
op	374:68	0:0	14	]
stmts	375:16	379:16	11	
water	375:16	0:0	12	{
water	376:20	0:0	12	p_context
op	376:29	0:0	12	->
water	376:31	0:0	12	sample_fmt
op	376:42	0:0	12	=
water	376:44	0:0	12	p_codec
op	376:51	0:0	12	->
water	376:53	0:0	12	sample_fmts
op	376:64	0:0	12	[
water	376:65	0:0	12	i
op	376:66	0:0	12	]
water	376:67	0:0	12	;
call	377:20	377:137	12	msg_Dbg
arg	377:29	377:34	13	p_enc
water	377:29	0:0	14	p_enc
arg	377:36	377:87	13	"Changing to packet format %s as new sample format"
water	377:36	0:0	14	"Changing to packet format %s as new sample format"
arg	377:89	377:137	13	av_get_sample_fmt_name(p_context->sample_fmt)
call	377:89	377:135	14	av_get_sample_fmt_name
arg	377:113	377:135	15	p_context->sample_fmt
water	377:113	0:0	16	p_context
op	377:122	0:0	16	->
water	377:124	0:0	16	sample_fmt
water	377:138	0:0	12	;
break	378:20	378:25	12	
water	379:16	0:0	12	}
water	380:12	0:0	10	}
water	381:8	0:0	8	}
call	382:8	382:110	6	msg_Dbg
arg	382:17	382:22	7	p_enc
water	382:17	0:0	8	p_enc
arg	382:24	382:60	7	"Ended up using %s as sample format"
water	382:24	0:0	8	"Ended up using %s as sample format"
arg	382:62	382:110	7	av_get_sample_fmt_name(p_context->sample_fmt)
call	382:62	382:108	8	av_get_sample_fmt_name
arg	382:86	382:108	9	p_context->sample_fmt
water	382:86	0:0	10	p_context
op	382:95	0:0	10	->
water	382:97	0:0	10	sample_fmt
water	382:111	0:0	6	;
water	383:8	0:0	6	p_enc
op	383:13	0:0	6	->
water	383:15	0:0	6	fmt_in
op	383:21	0:0	6	.
water	383:22	0:0	6	i_codec
op	383:31	0:0	6	=
call	383:33	383:74	6	GetVlcAudioFormat
arg	383:52	383:74	7	p_context->sample_fmt
water	383:52	0:0	8	p_context
op	383:61	0:0	8	->
water	383:63	0:0	8	sample_fmt
water	383:75	0:0	6	;
water	384:8	0:0	6	p_sys
op	384:13	0:0	6	->
water	384:15	0:0	6	b_planar
op	384:24	0:0	6	=
call	384:26	384:73	6	av_sample_fmt_is_planar
arg	384:51	384:73	7	p_context->sample_fmt
water	384:51	0:0	8	p_context
op	384:60	0:0	8	->
water	384:62	0:0	8	sample_fmt
water	384:74	0:0	6	;
water	385:8	0:0	6	p_context
op	385:17	0:0	6	->
water	385:19	0:0	6	sample_rate
op	385:31	0:0	6	=
water	385:33	0:0	6	p_enc
op	385:38	0:0	6	->
water	385:40	0:0	6	fmt_out
op	385:47	0:0	6	.
water	385:48	0:0	6	audio
op	385:53	0:0	6	.
water	385:54	0:0	6	i_rate
water	385:60	0:0	6	;
call	386:8	386:71	6	date_Init
arg	386:19	386:38	7	&p_sys->buffer_date
op	386:19	0:0	8	&
water	386:20	0:0	8	p_sys
op	386:25	0:0	8	->
water	386:27	0:0	8	buffer_date
arg	386:40	386:67	7	p_enc->fmt_out.audio.i_rate
water	386:40	0:0	8	p_enc
op	386:45	0:0	8	->
water	386:47	0:0	8	fmt_out
op	386:54	0:0	8	.
water	386:55	0:0	8	audio
op	386:60	0:0	8	.
water	386:61	0:0	8	i_rate
arg	386:69	386:71	7	1
water	386:69	0:0	8	1
water	386:72	0:0	6	;
call	387:8	387:54	6	date_Set
arg	387:18	387:37	7	&p_sys->buffer_date
op	387:18	0:0	8	&
water	387:19	0:0	8	p_sys
op	387:24	0:0	8	->
water	387:26	0:0	8	buffer_date
arg	387:39	387:54	7	AV_NOPTS_VALUE
water	387:39	0:0	8	AV_NOPTS_VALUE
water	387:55	0:0	6	;
water	388:8	0:0	6	p_context
op	388:17	0:0	6	->
water	388:19	0:0	6	time_base
op	388:28	0:0	6	.
water	388:29	0:0	6	num
op	388:33	0:0	6	=
water	388:35	0:0	6	1
water	388:36	0:0	6	;
water	389:8	0:0	6	p_context
op	389:17	0:0	6	->
water	389:19	0:0	6	time_base
op	389:28	0:0	6	.
water	389:29	0:0	6	den
op	389:33	0:0	6	=
water	389:35	0:0	6	p_context
op	389:44	0:0	6	->
water	389:46	0:0	6	sample_rate
water	389:57	0:0	6	;
water	390:8	0:0	6	p_context
op	390:17	0:0	6	->
water	390:19	0:0	6	channels
op	390:33	0:0	6	=
water	390:35	0:0	6	p_enc
op	390:40	0:0	6	->
water	390:42	0:0	6	fmt_out
op	390:49	0:0	6	.
water	390:50	0:0	6	audio
op	390:55	0:0	6	.
water	390:56	0:0	6	i_channels
water	390:66	0:0	6	;
water	392:8	0:0	6	p_context
op	392:17	0:0	6	->
water	392:19	0:0	6	channel_layout
op	392:34	0:0	6	=
water	392:36	0:0	6	channel_mask
op	392:48	0:0	6	[
water	392:49	0:0	6	p_context
op	392:58	0:0	6	->
water	392:60	0:0	6	channels
op	392:68	0:0	6	]
op	392:69	0:0	6	[
water	392:70	0:0	6	1
op	392:71	0:0	6	]
water	392:72	0:0	6	;
water	396:8	0:0	6	p_sys
op	396:13	0:0	6	->
water	396:15	0:0	6	i_channels_to_reorder
op	396:37	0:0	6	=
water	396:39	0:0	6	0
water	396:40	0:0	6	;
water	400:8	0:0	6	const
water	400:14	0:0	6	unsigned
water	400:23	0:0	6	i_order_max
op	400:35	0:0	6	=
water	400:37	0:0	6	8
op	400:39	0:0	6	*
op	400:41	0:0	6	sizeof
water	400:47	0:0	6	(
water	400:48	0:0	6	p_context
op	400:57	0:0	6	->
water	400:59	0:0	6	channel_layout
water	400:73	0:0	6	)
water	400:74	0:0	6	;
decl	401:8	401:44	6	uint32_t	pi_order_dst[AOUT_CHAN_MAX]
decl	402:8	402:30	6	int	i_channels_src
op	402:27	0:0	6	=
water	402:29	0:0	6	0
if	403:8	414:8	6	(p_context -> channel_layout)
cond	403:12	403:23	7	p_context -> channel_layout
water	403:12	0:0	8	p_context
op	403:21	0:0	8	->
water	403:23	0:0	8	channel_layout
stmts	404:8	414:8	7	
water	404:8	0:0	8	{
call	405:12	405:67	8	msg_Dbg
arg	405:21	405:26	9	p_enc
water	405:21	0:0	10	p_enc
arg	405:28	405:67	9	"Creating channel order for reordering"
water	405:28	0:0	10	"Creating channel order for reordering"
water	405:68	0:0	8	;
for	406:12	413:12	8	(unsigned i = 0 ;i < sizeof ( pi_channels_map ) / sizeof ( * pi_channels_map );i ++)
forinit	406:17	406:31	9	unsigned i = 0 ;
water	406:17	0:0	10	unsigned
water	406:26	0:0	10	i
op	406:28	0:0	10	=
water	406:30	0:0	10	0
water	406:31	0:0	10	;
cond	406:33	406:84	9	i < sizeof ( pi_channels_map ) / sizeof ( * pi_channels_map )
water	406:33	0:0	10	i
op	406:35	0:0	10	<
op	406:37	0:0	10	sizeof
water	406:43	0:0	10	(
water	406:44	0:0	10	pi_channels_map
water	406:59	0:0	10	)
op	406:60	0:0	10	/
op	406:61	0:0	10	sizeof
water	406:67	0:0	10	(
op	406:68	0:0	10	*
water	406:69	0:0	10	pi_channels_map
water	406:84	0:0	10	)
forexpr	406:87	406:88	9	i ++
water	406:87	0:0	10	i
op	406:88	0:0	10	++
stmts	407:12	413:12	9	
water	407:12	0:0	10	{
if	408:16	412:16	10	(p_context -> channel_layout & pi_channels_map [ i ] [ 0 ])
cond	408:20	408:68	11	p_context -> channel_layout & pi_channels_map [ i ] [ 0 ]
water	408:20	0:0	12	p_context
op	408:29	0:0	12	->
water	408:31	0:0	12	channel_layout
op	408:46	0:0	12	&
water	408:48	0:0	12	pi_channels_map
op	408:63	0:0	12	[
water	408:64	0:0	12	i
op	408:65	0:0	12	]
op	408:66	0:0	12	[
water	408:67	0:0	12	0
op	408:68	0:0	12	]
stmts	409:16	412:16	11	
water	409:16	0:0	12	{
call	410:20	410:132	12	msg_Dbg
arg	410:29	410:34	13	p_enc
water	410:29	0:0	14	p_enc
arg	410:36	410:70	13	"%d %"PRIx64" mapped to %"PRIx64""
water	410:36	0:0	14	"%d %"
water	410:42	0:0	14	PRIx64
water	410:48	0:0	14	" mapped to %"
water	410:62	0:0	14	PRIx64
water	410:68	0:0	14	""
arg	410:72	410:86	13	i_channels_src
water	410:72	0:0	14	i_channels_src
arg	410:88	410:109	13	pi_channels_map[i][0]
water	410:88	0:0	14	pi_channels_map
op	410:103	0:0	14	[
water	410:104	0:0	14	i
op	410:105	0:0	14	]
op	410:106	0:0	14	[
water	410:107	0:0	14	0
op	410:108	0:0	14	]
arg	410:111	410:132	13	pi_channels_map[i][1]
water	410:111	0:0	14	pi_channels_map
op	410:126	0:0	14	[
water	410:127	0:0	14	i
op	410:128	0:0	14	]
op	410:129	0:0	14	[
water	410:130	0:0	14	1
op	410:131	0:0	14	]
water	410:133	0:0	12	;
water	411:20	0:0	12	pi_order_dst
op	411:32	0:0	12	[
water	411:33	0:0	12	i_channels_src
op	411:47	0:0	12	++
op	411:49	0:0	12	]
op	411:51	0:0	12	=
water	411:53	0:0	12	pi_channels_map
op	411:68	0:0	12	[
water	411:69	0:0	12	i
op	411:70	0:0	12	]
op	411:71	0:0	12	[
water	411:72	0:0	12	1
op	411:73	0:0	12	]
water	411:74	0:0	12	;
water	412:16	0:0	12	}
water	413:12	0:0	10	}
water	414:8	0:0	8	}
else	415:8	427:8	6
stmts	416:8	427:8	7	
water	416:8	0:0	8	{
call	417:12	417:75	8	msg_Dbg
arg	417:21	417:26	9	p_enc
water	417:21	0:0	10	p_enc
arg	417:28	417:75	9	"Creating default channel order for reordering"
water	417:28	0:0	10	"Creating default channel order for reordering"
water	417:76	0:0	8	;
for	419:12	426:12	8	( unsigned int i = 0 ;i <__MIN (i_order_max ,( unsigned ) p_sys -> p_context -> channels );i ++)
forinit	0:0	419:35	9	 unsigned int i = 0 ;
decl	419:17	419:35	10	unsigned int	i
op	419:32	0:0	10	=
water	419:34	0:0	10	0
cond	419:37	419:98	9	i <__MIN (i_order_max ,( unsigned ) p_sys -> p_context -> channels )
water	419:37	0:0	10	i
op	419:39	0:0	10	<
call	419:41	419:98	10	__MIN
arg	419:48	419:59	11	i_order_max
water	419:48	0:0	12	i_order_max
arg	419:61	419:98	11	(unsigned)p_sys->p_context->channels
water	419:61	0:0	12	(
water	419:62	0:0	12	unsigned
water	419:70	0:0	12	)
water	419:71	0:0	12	p_sys
op	419:76	0:0	12	->
water	419:78	0:0	12	p_context
op	419:87	0:0	12	->
water	419:89	0:0	12	channels
forexpr	419:101	419:102	9	i ++
water	419:101	0:0	10	i
op	419:102	0:0	10	++
stmts	420:12	426:12	9	
water	420:12	0:0	10	{
if	421:16	425:16	10	(i < sizeof ( pi_channels_map ) / sizeof ( * pi_channels_map ))
cond	421:20	421:71	11	i < sizeof ( pi_channels_map ) / sizeof ( * pi_channels_map )
water	421:20	0:0	12	i
op	421:22	0:0	12	<
op	421:24	0:0	12	sizeof
water	421:30	0:0	12	(
water	421:31	0:0	12	pi_channels_map
water	421:46	0:0	12	)
op	421:47	0:0	12	/
op	421:48	0:0	12	sizeof
water	421:54	0:0	12	(
op	421:55	0:0	12	*
water	421:56	0:0	12	pi_channels_map
water	421:71	0:0	12	)
stmts	422:16	425:16	11	
water	422:16	0:0	12	{
call	423:20	423:100	12	msg_Dbg
arg	423:29	423:34	13	p_enc
water	423:29	0:0	14	p_enc
arg	423:36	423:61	13	"%d channel is %"PRIx64""
water	423:36	0:0	14	"%d channel is %"
water	423:53	0:0	14	PRIx64
water	423:59	0:0	14	""
arg	423:63	423:77	13	i_channels_src
water	423:63	0:0	14	i_channels_src
arg	423:79	423:100	13	pi_channels_map[i][1]
water	423:79	0:0	14	pi_channels_map
op	423:94	0:0	14	[
water	423:95	0:0	14	i
op	423:96	0:0	14	]
op	423:97	0:0	14	[
water	423:98	0:0	14	1
op	423:99	0:0	14	]
water	423:101	0:0	12	;
water	424:20	0:0	12	pi_order_dst
op	424:32	0:0	12	[
water	424:33	0:0	12	i_channels_src
op	424:47	0:0	12	++
op	424:49	0:0	12	]
op	424:51	0:0	12	=
water	424:53	0:0	12	pi_channels_map
op	424:68	0:0	12	[
water	424:69	0:0	12	i
op	424:70	0:0	12	]
op	424:71	0:0	12	[
water	424:72	0:0	12	1
op	424:73	0:0	12	]
water	424:74	0:0	12	;
water	425:16	0:0	12	}
water	426:12	0:0	10	}
water	427:8	0:0	8	}
if	428:8	429:61	6	(i_channels_src != p_context -> channels)
cond	428:12	428:41	7	i_channels_src != p_context -> channels
water	428:12	0:0	8	i_channels_src
op	428:27	0:0	8	!=
water	428:30	0:0	8	p_context
op	428:39	0:0	8	->
water	428:41	0:0	8	channels
stmts	429:12	429:61	7	
call	429:12	429:60	8	msg_Err
arg	429:21	429:26	9	p_enc
water	429:21	0:0	10	p_enc
arg	429:28	429:60	9	"Channel layout not understood"
water	429:28	0:0	10	"Channel layout not understood"
water	429:61	0:0	8	;
water	430:8	0:0	6	p_sys
op	430:13	0:0	6	->
water	430:15	0:0	6	i_channels_to_reorder
op	430:37	0:0	6	=
call	430:39	431:75	6	aout_CheckChannelReorder
arg	430:65	430:69	7	NULL
water	430:65	0:0	8	NULL
arg	430:71	430:83	7	pi_order_dst
water	430:71	0:0	8	pi_order_dst
arg	431:12	431:48	7	channel_mask[p_context->channels][0]
water	431:12	0:0	8	channel_mask
op	431:24	0:0	8	[
water	431:25	0:0	8	p_context
op	431:34	0:0	8	->
water	431:36	0:0	8	channels
op	431:44	0:0	8	]
op	431:45	0:0	8	[
water	431:46	0:0	8	0
op	431:47	0:0	8	]
arg	431:50	431:75	7	p_sys->pi_reorder_layout
water	431:50	0:0	8	p_sys
op	431:55	0:0	8	->
water	431:57	0:0	8	pi_reorder_layout
water	431:76	0:0	6	;
if	433:8	441:8	6	(p_enc -> fmt_out . i_codec == VLC_CODEC_MP4A)
cond	433:13	433:39	7	p_enc -> fmt_out . i_codec == VLC_CODEC_MP4A
water	433:13	0:0	8	p_enc
op	433:18	0:0	8	->
water	433:20	0:0	8	fmt_out
op	433:27	0:0	8	.
water	433:28	0:0	8	i_codec
op	433:36	0:0	8	==
water	433:39	0:0	8	VLC_CODEC_MP4A
stmts	434:8	441:8	7	
water	434:8	0:0	8	{
water	440:12	0:0	8	p_context
op	440:21	0:0	8	->
water	440:23	0:0	8	profile
op	440:31	0:0	8	=
water	440:33	0:0	8	p_sys
op	440:38	0:0	8	->
water	440:40	0:0	8	i_aac_profile
water	440:53	0:0	8	;
water	441:8	0:0	8	}
water	442:4	0:0	6	}
water	444:4	0:0	2	p_context
op	444:13	0:0	2	->
water	444:15	0:0	2	bit_rate
op	444:24	0:0	2	=
water	444:26	0:0	2	p_enc
op	444:31	0:0	2	->
water	444:33	0:0	2	fmt_out
op	444:40	0:0	2	.
water	444:41	0:0	2	i_bitrate
water	444:50	0:0	2	;
if	447:4	487:4	2	(i_codec_id == AV_CODEC_ID_VP8)
cond	447:8	447:22	3	i_codec_id == AV_CODEC_ID_VP8
water	447:8	0:0	4	i_codec_id
op	447:19	0:0	4	==
water	447:22	0:0	4	AV_CODEC_ID_VP8
stmts	448:4	487:4	3	
water	448:4	0:0	4	{
water	450:8	0:0	4	p_context
op	450:17	0:0	4	->
water	450:19	0:0	4	bit_rate_tolerance
op	450:38	0:0	4	=
call	450:40	450:101	4	__MAX
arg	450:46	450:79	5	2*(int)p_enc->fmt_out.i_bitrate
water	450:46	0:0	6	2
op	450:48	0:0	6	*
water	450:50	0:0	6	(
water	450:51	0:0	6	int
water	450:54	0:0	6	)
water	450:55	0:0	6	p_enc
op	450:60	0:0	6	->
water	450:62	0:0	6	fmt_out
op	450:69	0:0	6	.
water	450:70	0:0	6	i_bitrate
arg	450:81	450:101	5	p_sys->i_vtolerance
water	450:81	0:0	6	p_sys
op	450:86	0:0	6	->
water	450:88	0:0	6	i_vtolerance
water	450:102	0:0	4	;
if	452:8	453:37	4	(!var_GetInteger (p_enc ,ENC_CFG_PREFIX "keyint" ))
cond	452:12	452:60	5	!var_GetInteger (p_enc ,ENC_CFG_PREFIX "keyint" )
op	452:12	0:0	6	!
call	452:13	452:60	6	var_GetInteger
arg	452:29	452:34	7	p_enc
water	452:29	0:0	8	p_enc
arg	452:36	452:60	7	ENC_CFG_PREFIX"keyint"
water	452:36	0:0	8	ENC_CFG_PREFIX
water	452:51	0:0	8	"keyint"
stmts	453:12	453:37	5	
water	453:12	0:0	6	p_context
op	453:21	0:0	6	->
water	453:23	0:0	6	gop_size
op	453:32	0:0	6	=
water	453:34	0:0	6	120
water	453:37	0:0	6	;
if	459:8	472:12	4	(p_enc -> fmt_out . video . i_visible_height >= 720)
cond	459:12	459:53	5	p_enc -> fmt_out . video . i_visible_height >= 720
water	459:12	0:0	6	p_enc
op	459:17	0:0	6	->
water	459:19	0:0	6	fmt_out
op	459:26	0:0	6	.
water	459:27	0:0	6	video
op	459:32	0:0	6	.
water	459:33	0:0	6	i_visible_height
op	459:50	0:0	6	>=
water	459:53	0:0	6	720
stmts	460:8	472:12	5	
water	460:8	0:0	6	{
if	462:12	466:12	6	(!var_GetInteger (p_enc ,ENC_CFG_PREFIX "qmin" ))
cond	462:16	462:62	7	!var_GetInteger (p_enc ,ENC_CFG_PREFIX "qmin" )
op	462:16	0:0	8	!
call	462:17	462:62	8	var_GetInteger
arg	462:33	462:38	9	p_enc
water	462:33	0:0	10	p_enc
arg	462:40	462:62	9	ENC_CFG_PREFIX"qmin"
water	462:40	0:0	10	ENC_CFG_PREFIX
water	462:55	0:0	10	"qmin"
stmts	463:12	466:12	7	
water	463:12	0:0	8	{
water	464:16	0:0	8	p_context
op	464:25	0:0	8	->
water	464:27	0:0	8	qmin
op	464:32	0:0	8	=
water	464:34	0:0	8	10
water	464:36	0:0	8	;
water	465:16	0:0	8	p_context
op	465:25	0:0	8	->
water	465:27	0:0	8	mb_lmin
op	465:35	0:0	8	=
water	465:37	0:0	8	p_context
op	465:46	0:0	8	->
water	465:48	0:0	8	lmin
op	465:53	0:0	8	=
water	465:55	0:0	8	10
op	465:58	0:0	8	*
water	465:60	0:0	8	FF_QP2LAMBDA
water	465:72	0:0	8	;
water	466:12	0:0	8	}
if	467:12	471:12	6	(!var_GetInteger (p_enc ,ENC_CFG_PREFIX "qmax" ))
cond	467:16	467:62	7	!var_GetInteger (p_enc ,ENC_CFG_PREFIX "qmax" )
op	467:16	0:0	8	!
call	467:17	467:62	8	var_GetInteger
arg	467:33	467:38	9	p_enc
water	467:33	0:0	10	p_enc
arg	467:40	467:62	9	ENC_CFG_PREFIX"qmax"
water	467:40	0:0	10	ENC_CFG_PREFIX
water	467:55	0:0	10	"qmax"
stmts	468:12	471:12	7	
water	468:12	0:0	8	{
water	469:16	0:0	8	p_context
op	469:25	0:0	8	->
water	469:27	0:0	8	qmax
op	469:32	0:0	8	=
water	469:34	0:0	8	42
water	469:36	0:0	8	;
water	470:16	0:0	8	p_context
op	470:25	0:0	8	->
water	470:27	0:0	8	mb_lmax
op	470:35	0:0	8	=
water	470:37	0:0	8	p_context
op	470:46	0:0	8	->
water	470:48	0:0	8	lmax
op	470:53	0:0	8	=
water	470:55	0:0	8	42
op	470:58	0:0	8	*
water	470:60	0:0	8	FF_QP2LAMBDA
water	470:72	0:0	8	;
water	471:12	0:0	8	}
water	472:12	0:0	6	}
else	472:14	478:8	4
stmts	472:19	478:8	5	
water	472:19	0:0	6	{
if	473:12	477:12	6	(!var_GetInteger (p_enc ,ENC_CFG_PREFIX "qmin" ))
cond	473:16	473:62	7	!var_GetInteger (p_enc ,ENC_CFG_PREFIX "qmin" )
op	473:16	0:0	8	!
call	473:17	473:62	8	var_GetInteger
arg	473:33	473:38	9	p_enc
water	473:33	0:0	10	p_enc
arg	473:40	473:62	9	ENC_CFG_PREFIX"qmin"
water	473:40	0:0	10	ENC_CFG_PREFIX
water	473:55	0:0	10	"qmin"
stmts	474:12	477:12	7	
water	474:12	0:0	8	{
water	475:16	0:0	8	p_context
op	475:25	0:0	8	->
water	475:27	0:0	8	qmin
op	475:32	0:0	8	=
water	475:34	0:0	8	1
water	475:35	0:0	8	;
water	476:16	0:0	8	p_context
op	476:25	0:0	8	->
water	476:27	0:0	8	mb_lmin
op	476:35	0:0	8	=
water	476:37	0:0	8	p_context
op	476:46	0:0	8	->
water	476:48	0:0	8	lmin
op	476:53	0:0	8	=
water	476:55	0:0	8	FF_QP2LAMBDA
water	476:67	0:0	8	;
water	477:12	0:0	8	}
water	478:8	0:0	6	}
water	480:8	0:0	4	p_context
op	480:17	0:0	4	->
water	480:19	0:0	4	lag
op	480:23	0:0	4	=
water	480:25	0:0	4	16
water	480:27	0:0	4	;
water	481:8	0:0	4	p_context
op	481:17	0:0	4	->
water	481:19	0:0	4	level
op	481:25	0:0	4	=
water	481:27	0:0	4	216
water	481:30	0:0	4	;
water	482:8	0:0	4	p_context
op	482:17	0:0	4	->
water	482:19	0:0	4	profile
op	482:27	0:0	4	=
water	482:29	0:0	4	0
water	482:30	0:0	4	;
water	483:8	0:0	4	p_context
op	483:17	0:0	4	->
water	483:19	0:0	4	rc_buffer_aggressivity
op	483:42	0:0	4	=
water	483:44	0:0	4	0
op	483:45	0:0	4	.
water	483:46	0:0	4	95
water	483:48	0:0	4	;
water	484:8	0:0	4	p_context
op	484:17	0:0	4	->
water	484:19	0:0	4	token_partitions
op	484:36	0:0	4	=
water	484:38	0:0	4	4
water	484:39	0:0	4	;
water	485:8	0:0	4	p_context
op	485:17	0:0	4	->
water	485:19	0:0	4	mb_static_threshold
op	485:39	0:0	4	=
water	485:41	0:0	4	0
water	485:42	0:0	4	;
water	487:4	0:0	4	}
if	488:4	493:4	2	(i_codec_id == AV_CODEC_ID_RAWVIDEO)
cond	488:8	488:22	3	i_codec_id == AV_CODEC_ID_RAWVIDEO
water	488:8	0:0	4	i_codec_id
op	488:19	0:0	4	==
water	488:22	0:0	4	AV_CODEC_ID_RAWVIDEO
stmts	489:4	493:4	3	
water	489:4	0:0	4	{
water	491:8	0:0	4	p_enc
op	491:13	0:0	4	->
water	491:15	0:0	4	fmt_in
op	491:21	0:0	4	.
water	491:22	0:0	4	video
op	491:27	0:0	4	.
water	491:28	0:0	4	i_chroma
op	491:37	0:0	4	=
water	491:39	0:0	4	p_enc
op	491:44	0:0	4	->
water	491:46	0:0	4	fmt_in
op	491:52	0:0	4	.
water	491:53	0:0	4	i_codec
op	491:61	0:0	4	=
water	491:63	0:0	4	p_enc
op	491:68	0:0	4	->
water	491:70	0:0	4	fmt_out
op	491:77	0:0	4	.
water	491:78	0:0	4	i_codec
water	491:85	0:0	4	;
call	492:8	492:67	4	GetFfmpegChroma
arg	492:25	492:44	5	&p_context->pix_fmt
op	492:25	0:0	6	&
water	492:26	0:0	6	p_context
op	492:35	0:0	6	->
water	492:37	0:0	6	pix_fmt
arg	492:46	492:67	5	&p_enc->fmt_in.video
op	492:46	0:0	6	&
water	492:47	0:0	6	p_enc
op	492:52	0:0	6	->
water	492:54	0:0	6	fmt_in
op	492:60	0:0	6	.
water	492:61	0:0	6	video
water	492:68	0:0	4	;
water	493:4	0:0	4	}
water	495:4	0:0	2	p_context
op	495:13	0:0	2	->
water	495:15	0:0	2	extradata_size
op	495:30	0:0	2	=
water	495:32	0:0	2	0
water	495:33	0:0	2	;
water	496:4	0:0	2	p_context
op	496:13	0:0	2	->
water	496:15	0:0	2	extradata
op	496:25	0:0	2	=
water	496:27	0:0	2	NULL
water	496:31	0:0	2	;
water	497:4	0:0	2	p_context
op	497:13	0:0	2	->
water	497:15	0:0	2	flags
op	497:21	0:0	2	|=
water	497:24	0:0	2	CODEC_FLAG_GLOBAL_HEADER
water	497:48	0:0	2	;
if	498:4	499:50	2	(p_enc -> i_threads >= 1)
cond	498:8	498:28	3	p_enc -> i_threads >= 1
water	498:8	0:0	4	p_enc
op	498:13	0:0	4	->
water	498:15	0:0	4	i_threads
op	498:25	0:0	4	>=
water	498:28	0:0	4	1
stmts	499:8	499:50	3	
water	499:8	0:0	4	p_context
op	499:17	0:0	4	->
water	499:19	0:0	4	thread_count
op	499:32	0:0	4	=
water	499:34	0:0	4	p_enc
op	499:39	0:0	4	->
water	499:41	0:0	4	i_threads
water	499:50	0:0	4	;
else	500:4	501:51	2
stmts	501:8	501:51	3	
water	501:8	0:0	4	p_context
op	501:17	0:0	4	->
water	501:19	0:0	4	thread_count
op	501:32	0:0	4	=
call	501:34	501:50	4	vlc_GetCPUCount
water	501:51	0:0	4	;
decl	502:4	502:11	2	int	ret
decl	503:4	503:71	2	char	*psz_opts
op	503:19	0:0	2	=
call	503:21	503:70	3	var_InheritString
arg	503:39	503:44	4	p_enc
water	503:39	0:0	5	p_enc
arg	503:46	503:70	4	ENC_CFG_PREFIX"options"
water	503:46	0:0	5	ENC_CFG_PREFIX
water	503:61	0:0	5	"options"
decl	504:4	504:32	2	AVDictionary	*options
op	504:26	0:0	2	=
water	504:28	0:0	2	NULL
if	505:4	506:46	2	(psz_opts && * psz_opts)
cond	505:8	505:21	3	psz_opts && * psz_opts
water	505:8	0:0	4	psz_opts
op	505:17	0:0	4	&&
op	505:20	0:0	4	*
water	505:21	0:0	4	psz_opts
stmts	506:8	506:46	3	
water	506:8	0:0	4	options
op	506:16	0:0	4	=
call	506:18	506:45	4	vlc_av_get_options
arg	506:37	506:45	5	psz_opts
water	506:37	0:0	6	psz_opts
water	506:46	0:0	4	;
call	507:4	507:17	2	free
arg	507:9	507:17	3	psz_opts
water	507:9	0:0	4	psz_opts
water	507:18	0:0	2	;
call	508:4	508:21	2	vlc_avcodec_lock
water	508:22	0:0	2	;
water	509:4	0:0	2	ret
op	509:8	0:0	2	=
call	509:10	509:71	2	avcodec_open2
arg	509:25	509:34	3	p_context
water	509:25	0:0	4	p_context
arg	509:36	509:43	3	p_codec
water	509:36	0:0	4	p_codec
arg	509:45	509:71	3	options?&options:NULL
water	509:45	0:0	4	options
water	509:53	0:0	4	?
op	509:55	0:0	4	&
water	509:56	0:0	4	options
water	509:64	0:0	4	:
water	509:66	0:0	4	NULL
water	509:72	0:0	2	;
call	510:4	510:23	2	vlc_avcodec_unlock
water	510:24	0:0	2	;
decl	511:4	511:31	2	AVDictionaryEntry	*t
op	511:25	0:0	2	=
water	511:27	0:0	2	NULL
while	512:4	514:4	2	(( t =av_dict_get (options ,"" ,t ,AV_DICT_IGNORE_SUFFIX ) ))
cond	512:11	512:66	3	( t =av_dict_get (options ,"" ,t ,AV_DICT_IGNORE_SUFFIX ) )
water	512:11	0:0	4	(
water	512:12	0:0	4	t
op	512:14	0:0	4	=
call	512:16	512:65	4	av_dict_get
arg	512:28	512:35	5	options
water	512:28	0:0	6	options
arg	512:37	512:39	5	""
water	512:37	0:0	6	""
arg	512:41	512:42	5	t
water	512:41	0:0	6	t
arg	512:44	512:65	5	AV_DICT_IGNORE_SUFFIX
water	512:44	0:0	6	AV_DICT_IGNORE_SUFFIX
water	512:66	0:0	4	)
stmts	512:69	514:4	3	
water	512:69	0:0	4	{
call	513:8	513:54	4	msg_Err
arg	513:16	513:21	5	p_enc
water	513:16	0:0	6	p_enc
arg	513:23	513:46	5	"Unknown option \"%s\""
water	513:23	0:0	6	"Unknown option \"%s\""
arg	513:48	513:54	5	t->key
water	513:48	0:0	6	t
op	513:49	0:0	6	->
water	513:51	0:0	6	key
water	513:55	0:0	4	;
water	514:4	0:0	4	}
if	515:4	580:4	2	(ret)
cond	515:8	515:8	3	ret
water	515:8	0:0	4	ret
stmts	516:4	580:4	3	
water	516:4	0:0	4	{
if	517:8	520:6	4	(p_enc -> fmt_in . i_cat != AUDIO_ES || ( p_context -> channels <= 2 && i_codec_id != AV_CODEC_ID_MP2 && i_codec_id != AV_CODEC_ID_MP3 ))
cond	517:12	519:49	5	p_enc -> fmt_in . i_cat != AUDIO_ES || ( p_context -> channels <= 2 && i_codec_id != AV_CODEC_ID_MP2 && i_codec_id != AV_CODEC_ID_MP3 )
water	517:12	0:0	6	p_enc
op	517:17	0:0	6	->
water	517:19	0:0	6	fmt_in
op	517:25	0:0	6	.
water	517:26	0:0	6	i_cat
op	517:32	0:0	6	!=
water	517:35	0:0	6	AUDIO_ES
op	517:44	0:0	6	||
water	518:16	0:0	6	(
water	518:17	0:0	6	p_context
op	518:26	0:0	6	->
water	518:28	0:0	6	channels
op	518:37	0:0	6	<=
water	518:40	0:0	6	2
op	518:42	0:0	6	&&
water	518:45	0:0	6	i_codec_id
op	518:56	0:0	6	!=
water	518:59	0:0	6	AV_CODEC_ID_MP2
op	519:17	0:0	6	&&
water	519:20	0:0	6	i_codec_id
op	519:31	0:0	6	!=
water	519:34	0:0	6	AV_CODEC_ID_MP3
water	519:49	0:0	6	)
stmts	520:0	520:6	5	
label	520:0	520:6	6	errmsg :
water	521:8	0:0	4	{
water	522:12	0:0	4	static
water	522:19	0:0	4	const
water	522:25	0:0	4	char
water	522:30	0:0	4	types
op	522:35	0:0	4	[
op	522:36	0:0	4	]
op	522:37	0:0	4	[
water	522:38	0:0	4	12
op	522:40	0:0	4	]
op	522:42	0:0	4	=
water	522:44	0:0	4	{
op	523:16	0:0	4	[
water	523:17	0:0	4	UNKNOWN_ES
op	523:27	0:0	4	]
op	523:29	0:0	4	=
call	523:31	523:43	4	N_
arg	523:34	523:43	5	"unknown"
water	523:34	0:0	6	"unknown"
water	523:44	0:0	4	,
op	523:46	0:0	4	[
water	523:47	0:0	4	VIDEO_ES
op	523:55	0:0	4	]
op	523:57	0:0	4	=
call	523:59	523:69	4	N_
arg	523:62	523:69	5	"video"
water	523:62	0:0	6	"video"
water	523:70	0:0	4	,
op	524:16	0:0	4	[
water	524:17	0:0	4	AUDIO_ES
op	524:25	0:0	4	]
op	524:27	0:0	4	=
call	524:29	524:39	4	N_
arg	524:32	524:39	5	"audio"
water	524:32	0:0	6	"audio"
water	524:40	0:0	4	,
op	524:42	0:0	4	[
water	524:43	0:0	4	SPU_ES
op	524:49	0:0	4	]
op	524:51	0:0	4	=
call	524:53	524:68	4	N_
arg	524:56	524:68	5	"subpicture"
water	524:56	0:0	6	"subpicture"
water	524:69	0:0	4	,
water	525:12	0:0	4	}
water	525:13	0:0	4	;
decl	526:12	526:39	4	const char	*type
op	526:29	0:0	4	=
water	526:31	0:0	4	types
op	526:36	0:0	4	[
water	526:37	0:0	4	0
op	526:38	0:0	4	]
union	527:12	531:12	4	<anonymous_527:12>
decl	529:16	529:34	5	vlc_fourcc_t	value
decl	530:16	530:27	5	char	txt[4]
decl	527:12	531:55	4	<anonymous_527:12>	fcc
op	531:18	0:0	4	=
water	531:20	0:0	4	{
op	531:22	0:0	4	.
water	531:23	0:0	4	value
op	531:29	0:0	4	=
water	531:31	0:0	4	p_enc
op	531:36	0:0	4	->
water	531:38	0:0	4	fmt_out
op	531:45	0:0	4	.
water	531:46	0:0	4	i_codec
water	531:54	0:0	4	}
if	532:12	533:49	4	(likely (( unsigned ) p_enc -> fmt_in . i_cat < sizeof ( types ) / sizeof ( types [ 0 ] ) ))
cond	532:16	532:89	5	likely (( unsigned ) p_enc -> fmt_in . i_cat < sizeof ( types ) / sizeof ( types [ 0 ] ) )
call	532:16	532:89	6	likely
arg	532:23	532:89	7	(unsigned)p_enc->fmt_in.i_cat<sizeof(types)/sizeof(types[0])
water	532:23	0:0	8	(
water	532:24	0:0	8	unsigned
water	532:32	0:0	8	)
water	532:33	0:0	8	p_enc
op	532:38	0:0	8	->
water	532:40	0:0	8	fmt_in
op	532:46	0:0	8	.
water	532:47	0:0	8	i_cat
op	532:53	0:0	8	<
op	532:55	0:0	8	sizeof
water	532:62	0:0	8	(
water	532:63	0:0	8	types
water	532:68	0:0	8	)
op	532:70	0:0	8	/
op	532:72	0:0	8	sizeof
water	532:79	0:0	8	(
water	532:80	0:0	8	types
op	532:85	0:0	8	[
water	532:86	0:0	8	0
op	532:87	0:0	8	]
water	532:88	0:0	8	)
stmts	533:16	533:49	5	
water	533:16	0:0	6	type
op	533:21	0:0	6	=
water	533:23	0:0	6	types
op	533:28	0:0	6	[
water	533:29	0:0	6	p_enc
op	533:34	0:0	6	->
water	533:36	0:0	6	fmt_in
op	533:42	0:0	6	.
water	533:43	0:0	6	i_cat
op	533:48	0:0	6	]
water	533:49	0:0	6	;
call	534:12	534:74	4	msg_Err
arg	534:21	534:26	5	p_enc
water	534:21	0:0	6	p_enc
arg	534:28	534:58	5	"cannot open %4.4s %s encoder"
water	534:28	0:0	6	"cannot open %4.4s %s encoder"
arg	534:60	534:67	5	fcc.txt
water	534:60	0:0	6	fcc
op	534:63	0:0	6	.
water	534:64	0:0	6	txt
arg	534:69	534:74	5	type
water	534:69	0:0	6	type
water	534:75	0:0	4	;
call	535:12	537:53	4	dialog_Fatal
arg	535:26	535:31	5	p_enc
water	535:26	0:0	6	p_enc
arg	535:33	535:68	5	_("Streaming / Transcoding failed")
call	535:33	535:67	6	_
arg	535:35	535:67	7	"Streaming / Transcoding failed"
water	535:35	0:0	8	"Streaming / Transcoding failed"
arg	536:26	536:71	5	_("VLC could not open the %4.4s %s encoder.")
call	536:26	536:70	6	_
arg	536:28	536:70	7	"VLC could not open the %4.4s %s encoder."
water	536:28	0:0	8	"VLC could not open the %4.4s %s encoder."
arg	537:26	537:33	5	fcc.txt
water	537:26	0:0	6	fcc
op	537:29	0:0	6	.
water	537:30	0:0	6	txt
arg	537:35	537:53	5	vlc_gettext(type)
call	537:35	537:51	6	vlc_gettext
arg	537:47	537:51	7	type
water	537:47	0:0	8	type
water	537:54	0:0	4	;
call	538:12	538:33	4	av_dict_free
arg	538:25	538:33	5	&options
op	538:25	0:0	6	&
water	538:26	0:0	6	options
water	538:34	0:0	4	;
goto	539:12	539:22	4	error
water	539:17	0:0	5	error
water	540:8	0:0	4	}
if	541:8	546:8	4	(p_context -> channels > 2)
cond	541:12	541:34	5	p_context -> channels > 2
water	541:12	0:0	6	p_context
op	541:21	0:0	6	->
water	541:23	0:0	6	channels
op	541:32	0:0	6	>
water	541:34	0:0	6	2
stmts	542:8	546:8	5	
water	542:8	0:0	6	{
water	543:12	0:0	6	p_context
op	543:21	0:0	6	->
water	543:23	0:0	6	channels
op	543:32	0:0	6	=
water	543:34	0:0	6	2
water	543:35	0:0	6	;
water	544:12	0:0	6	p_enc
op	544:17	0:0	6	->
water	544:19	0:0	6	fmt_in
op	544:25	0:0	6	.
water	544:26	0:0	6	audio
op	544:31	0:0	6	.
water	544:32	0:0	6	i_channels
op	544:43	0:0	6	=
water	544:45	0:0	6	2
water	544:46	0:0	6	;
call	545:12	545:71	6	msg_Warn
arg	545:22	545:27	7	p_enc
water	545:22	0:0	8	p_enc
arg	545:29	545:71	7	"stereo mode selected (codec limitation)"
water	545:29	0:0	8	"stereo mode selected (codec limitation)"
water	545:72	0:0	6	;
water	546:8	0:0	6	}
if	547:8	573:8	4	(i_codec_id == AV_CODEC_ID_MP2 || i_codec_id == AV_CODEC_ID_MP3)
cond	547:12	547:59	5	i_codec_id == AV_CODEC_ID_MP2 || i_codec_id == AV_CODEC_ID_MP3
water	547:12	0:0	6	i_codec_id
op	547:23	0:0	6	==
water	547:26	0:0	6	AV_CODEC_ID_MP2
op	547:42	0:0	6	||
water	547:45	0:0	6	i_codec_id
op	547:56	0:0	6	==
water	547:59	0:0	6	AV_CODEC_ID_MP3
stmts	548:8	573:8	5	
water	548:8	0:0	6	{
decl	549:12	549:30	6	int	i_frequency
water	549:27	0:0	6	,
decl	549:12	549:30	6	int	i
decl	550:12	550:46	6	es_format_t	*fmt
op	550:29	0:0	6	=
op	550:31	0:0	6	&
water	550:32	0:0	6	p_enc
op	550:37	0:0	6	->
water	550:39	0:0	6	fmt_out
for	551:12	553:25	6	(i_frequency = 0 ;i_frequency < 6;i_frequency ++)
forinit	551:18	551:33	7	i_frequency = 0 ;
water	551:18	0:0	8	i_frequency
op	551:30	0:0	8	=
water	551:32	0:0	8	0
water	551:33	0:0	8	;
cond	551:35	551:49	7	i_frequency < 6
water	551:35	0:0	8	i_frequency
op	551:47	0:0	8	<
water	551:49	0:0	8	6
forexpr	551:52	551:63	7	i_frequency ++
water	551:52	0:0	8	i_frequency
op	551:63	0:0	8	++
stmts	552:16	553:25	7	
if	552:16	553:25	8	(fmt -> audio . i_rate == mpa_freq_tab [ i_frequency ])
cond	552:21	552:66	9	fmt -> audio . i_rate == mpa_freq_tab [ i_frequency ]
water	552:21	0:0	10	fmt
op	552:24	0:0	10	->
water	552:26	0:0	10	audio
op	552:31	0:0	10	.
water	552:32	0:0	10	i_rate
op	552:39	0:0	10	==
water	552:42	0:0	10	mpa_freq_tab
op	552:54	0:0	10	[
water	552:55	0:0	10	i_frequency
op	552:66	0:0	10	]
stmts	553:20	553:25	9	
break	553:20	553:25	10	
if	554:12	560:12	6	(i_frequency == 6)
cond	554:17	554:32	7	i_frequency == 6
water	554:17	0:0	8	i_frequency
op	554:29	0:0	8	==
water	554:32	0:0	8	6
stmts	555:12	560:12	7	
water	555:12	0:0	8	{
call	556:16	557:42	8	msg_Err
arg	556:25	556:30	9	p_enc
water	556:25	0:0	10	p_enc
arg	556:32	556:73	9	"MPEG audio doesn't support frequency=%d"
water	556:32	0:0	10	"MPEG audio doesn't support frequency=%d"
arg	557:24	557:42	9	fmt->audio.i_rate
water	557:24	0:0	10	fmt
op	557:27	0:0	10	->
water	557:29	0:0	10	audio
op	557:34	0:0	10	.
water	557:35	0:0	10	i_rate
water	557:43	0:0	8	;
call	558:16	558:37	8	av_dict_free
arg	558:29	558:37	9	&options
op	558:29	0:0	10	&
water	558:30	0:0	10	options
water	558:38	0:0	8	;
goto	559:16	559:26	8	error
water	559:21	0:0	9	error
water	560:12	0:0	8	}
for	561:12	563:25	6	(i = 1 ;i < 14;i ++)
forinit	561:18	561:23	7	i = 1 ;
water	561:18	0:0	8	i
op	561:20	0:0	8	=
water	561:22	0:0	8	1
water	561:23	0:0	8	;
cond	561:25	561:29	7	i < 14
water	561:25	0:0	8	i
op	561:27	0:0	8	<
water	561:29	0:0	8	14
forexpr	561:33	561:34	7	i ++
water	561:33	0:0	8	i
op	561:34	0:0	8	++
stmts	562:16	563:25	7	
if	562:16	563:25	8	(fmt -> i_bitrate / 1000 <= mpa_bitrate_tab [ i_frequency / 3 ] [ i ])
cond	562:20	562:77	9	fmt -> i_bitrate / 1000 <= mpa_bitrate_tab [ i_frequency / 3 ] [ i ]
water	562:20	0:0	10	fmt
op	562:23	0:0	10	->
water	562:25	0:0	10	i_bitrate
op	562:34	0:0	10	/
water	562:35	0:0	10	1000
op	562:40	0:0	10	<=
water	562:43	0:0	10	mpa_bitrate_tab
op	562:58	0:0	10	[
water	562:59	0:0	10	i_frequency
op	562:71	0:0	10	/
water	562:73	0:0	10	3
op	562:74	0:0	10	]
op	562:75	0:0	10	[
water	562:76	0:0	10	i
op	562:77	0:0	10	]
stmts	563:20	563:25	9	
break	563:20	563:25	10	
if	564:12	572:12	6	(fmt -> i_bitrate / 1000 != mpa_bitrate_tab [ i_frequency / 3 ] [ i ])
cond	564:16	564:75	7	fmt -> i_bitrate / 1000 != mpa_bitrate_tab [ i_frequency / 3 ] [ i ]
water	564:16	0:0	8	fmt
op	564:19	0:0	8	->
water	564:21	0:0	8	i_bitrate
op	564:31	0:0	8	/
water	564:33	0:0	8	1000
op	564:38	0:0	8	!=
water	564:41	0:0	8	mpa_bitrate_tab
op	564:56	0:0	8	[
water	564:57	0:0	8	i_frequency
op	564:69	0:0	8	/
water	564:71	0:0	8	3
op	564:72	0:0	8	]
op	564:73	0:0	8	[
water	564:74	0:0	8	i
op	564:75	0:0	8	]
stmts	565:12	572:12	7	
water	565:12	0:0	8	{
call	566:16	569:67	8	msg_Warn
arg	566:26	566:31	9	p_enc
water	566:26	0:0	10	p_enc
arg	567:24	567:73	9	"MPEG audio doesn't support bitrate=%d, using %d"
water	567:24	0:0	10	"MPEG audio doesn't support bitrate=%d, using %d"
arg	568:24	568:38	9	fmt->i_bitrate
water	568:24	0:0	10	fmt
op	568:27	0:0	10	->
water	568:29	0:0	10	i_bitrate
arg	569:24	569:67	9	mpa_bitrate_tab[i_frequency/3][i]*1000
water	569:24	0:0	10	mpa_bitrate_tab
op	569:39	0:0	10	[
water	569:40	0:0	10	i_frequency
op	569:52	0:0	10	/
water	569:54	0:0	10	3
op	569:55	0:0	10	]
op	569:56	0:0	10	[
water	569:57	0:0	10	i
op	569:58	0:0	10	]
op	569:60	0:0	10	*
water	569:62	0:0	10	1000
water	569:68	0:0	8	;
water	570:16	0:0	8	fmt
op	570:19	0:0	8	->
water	570:21	0:0	8	i_bitrate
op	570:31	0:0	8	=
water	570:33	0:0	8	mpa_bitrate_tab
op	570:48	0:0	8	[
water	570:49	0:0	8	i_frequency
op	570:61	0:0	8	/
water	570:63	0:0	8	3
op	570:64	0:0	8	]
op	570:65	0:0	8	[
water	570:66	0:0	8	i
op	570:67	0:0	8	]
op	570:69	0:0	8	*
water	570:71	0:0	8	1000
water	570:75	0:0	8	;
water	571:16	0:0	8	p_context
op	571:25	0:0	8	->
water	571:27	0:0	8	bit_rate
op	571:36	0:0	8	=
water	571:38	0:0	8	fmt
op	571:41	0:0	8	->
water	571:43	0:0	8	i_bitrate
water	571:52	0:0	8	;
water	572:12	0:0	8	}
water	573:8	0:0	6	}
water	574:8	0:0	4	p_context
op	574:17	0:0	4	->
water	574:19	0:0	4	codec
op	574:25	0:0	4	=
water	574:27	0:0	4	NULL
water	574:31	0:0	4	;
call	575:8	575:25	4	vlc_avcodec_lock
water	575:26	0:0	4	;
water	576:8	0:0	4	ret
op	576:12	0:0	4	=
call	576:14	576:75	4	avcodec_open2
arg	576:29	576:38	5	p_context
water	576:29	0:0	6	p_context
arg	576:40	576:47	5	p_codec
water	576:40	0:0	6	p_codec
arg	576:49	576:75	5	options?&options:NULL
water	576:49	0:0	6	options
water	576:57	0:0	6	?
op	576:59	0:0	6	&
water	576:60	0:0	6	options
water	576:68	0:0	6	:
water	576:70	0:0	6	NULL
water	576:76	0:0	4	;
call	577:8	577:27	4	vlc_avcodec_unlock
water	577:28	0:0	4	;
if	578:8	579:23	4	(ret)
cond	578:12	578:12	5	ret
water	578:12	0:0	6	ret
stmts	579:12	579:23	5	
goto	579:12	579:23	6	errmsg
water	579:17	0:0	7	errmsg
water	580:4	0:0	4	}
call	581:4	581:25	2	av_dict_free
arg	581:17	581:25	3	&options
op	581:17	0:0	4	&
water	581:18	0:0	4	options
water	581:26	0:0	2	;
if	582:4	603:4	2	(i_codec_id == AV_CODEC_ID_FLAC)
cond	582:8	582:22	3	i_codec_id == AV_CODEC_ID_FLAC
water	582:8	0:0	4	i_codec_id
op	582:19	0:0	4	==
water	582:22	0:0	4	AV_CODEC_ID_FLAC
stmts	583:4	603:4	3	
water	583:4	0:0	4	{
water	584:8	0:0	4	p_enc
op	584:13	0:0	4	->
water	584:15	0:0	4	fmt_out
op	584:22	0:0	4	.
water	584:23	0:0	4	i_extra
op	584:31	0:0	4	=
water	584:33	0:0	4	4
op	584:35	0:0	4	+
water	584:37	0:0	4	1
op	584:39	0:0	4	+
water	584:41	0:0	4	3
op	584:43	0:0	4	+
water	584:45	0:0	4	p_context
op	584:54	0:0	4	->
water	584:56	0:0	4	extradata_size
water	584:70	0:0	4	;
water	585:8	0:0	4	p_enc
op	585:13	0:0	4	->
water	585:15	0:0	4	fmt_out
op	585:22	0:0	4	.
water	585:23	0:0	4	p_extra
op	585:31	0:0	4	=
call	585:33	585:64	4	malloc
arg	585:41	585:64	5	p_enc->fmt_out.i_extra
water	585:41	0:0	6	p_enc
op	585:46	0:0	6	->
water	585:48	0:0	6	fmt_out
op	585:55	0:0	6	.
water	585:56	0:0	6	i_extra
water	585:65	0:0	4	;
if	586:8	598:8	4	(p_enc -> fmt_out . p_extra)
cond	586:12	586:27	5	p_enc -> fmt_out . p_extra
water	586:12	0:0	6	p_enc
op	586:17	0:0	6	->
water	586:19	0:0	6	fmt_out
op	586:26	0:0	6	.
water	586:27	0:0	6	p_extra
stmts	587:8	598:8	5	
water	587:8	0:0	6	{
decl	588:12	588:47	6	uint8_t	*p
op	588:23	0:0	6	=
water	588:25	0:0	6	p_enc
op	588:30	0:0	6	->
water	588:32	0:0	6	fmt_out
op	588:39	0:0	6	.
water	588:40	0:0	6	p_extra
water	589:12	0:0	6	p
op	589:13	0:0	6	[
water	589:14	0:0	6	0
op	589:15	0:0	6	]
op	589:17	0:0	6	=
water	589:19	0:0	6	0
water	589:20	0:0	6	x66
water	589:23	0:0	6	;
water	590:12	0:0	6	p
op	590:13	0:0	6	[
water	590:14	0:0	6	1
op	590:15	0:0	6	]
op	590:17	0:0	6	=
water	590:19	0:0	6	0
water	590:20	0:0	6	x4C
water	590:23	0:0	6	;
water	591:12	0:0	6	p
op	591:13	0:0	6	[
water	591:14	0:0	6	2
op	591:15	0:0	6	]
op	591:17	0:0	6	=
water	591:19	0:0	6	0
water	591:20	0:0	6	x61
water	591:23	0:0	6	;
water	592:12	0:0	6	p
op	592:13	0:0	6	[
water	592:14	0:0	6	3
op	592:15	0:0	6	]
op	592:17	0:0	6	=
water	592:19	0:0	6	0
water	592:20	0:0	6	x43
water	592:23	0:0	6	;
water	593:12	0:0	6	p
op	593:13	0:0	6	[
water	593:14	0:0	6	4
op	593:15	0:0	6	]
op	593:17	0:0	6	=
water	593:19	0:0	6	0
water	593:20	0:0	6	x80
water	593:23	0:0	6	;
water	594:12	0:0	6	p
op	594:13	0:0	6	[
water	594:14	0:0	6	5
op	594:15	0:0	6	]
op	594:17	0:0	6	=
water	594:19	0:0	6	(
water	594:21	0:0	6	p_context
op	594:30	0:0	6	->
water	594:32	0:0	6	extradata_size
op	594:47	0:0	6	>>
water	594:50	0:0	6	16
water	594:53	0:0	6	)
op	594:55	0:0	6	&
water	594:57	0:0	6	0
water	594:58	0:0	6	xff
water	594:61	0:0	6	;
water	595:12	0:0	6	p
op	595:13	0:0	6	[
water	595:14	0:0	6	6
op	595:15	0:0	6	]
op	595:17	0:0	6	=
water	595:19	0:0	6	(
water	595:21	0:0	6	p_context
op	595:30	0:0	6	->
water	595:32	0:0	6	extradata_size
op	595:47	0:0	6	>>
water	595:51	0:0	6	8
water	595:53	0:0	6	)
op	595:55	0:0	6	&
water	595:57	0:0	6	0
water	595:58	0:0	6	xff
water	595:61	0:0	6	;
water	596:12	0:0	6	p
op	596:13	0:0	6	[
water	596:14	0:0	6	7
op	596:15	0:0	6	]
op	596:17	0:0	6	=
water	596:19	0:0	6	(
water	596:21	0:0	6	p_context
op	596:30	0:0	6	->
water	596:32	0:0	6	extradata_size
water	596:53	0:0	6	)
op	596:55	0:0	6	&
water	596:57	0:0	6	0
water	596:58	0:0	6	xff
water	596:61	0:0	6	;
call	597:12	597:75	6	memcpy
arg	597:20	597:25	7	&p[8]
op	597:20	0:0	8	&
water	597:21	0:0	8	p
op	597:22	0:0	8	[
water	597:23	0:0	8	8
op	597:24	0:0	8	]
arg	597:27	597:47	7	p_context->extradata
water	597:27	0:0	8	p_context
op	597:36	0:0	8	->
water	597:38	0:0	8	extradata
arg	597:49	597:75	7	p_context->extradata_size
water	597:49	0:0	8	p_context
op	597:58	0:0	8	->
water	597:60	0:0	8	extradata_size
water	597:76	0:0	6	;
water	598:8	0:0	6	}
else	599:8	602:8	4
stmts	600:8	602:8	5	
water	600:8	0:0	6	{
water	601:12	0:0	6	p_enc
op	601:17	0:0	6	->
water	601:19	0:0	6	fmt_out
op	601:26	0:0	6	.
water	601:27	0:0	6	i_extra
op	601:35	0:0	6	=
water	601:37	0:0	6	0
water	601:38	0:0	6	;
water	602:8	0:0	6	}
water	603:4	0:0	4	}
else	604:4	617:4	2
stmts	605:4	617:4	3	
water	605:4	0:0	4	{
water	606:8	0:0	4	p_enc
op	606:13	0:0	4	->
water	606:15	0:0	4	fmt_out
op	606:22	0:0	4	.
water	606:23	0:0	4	i_extra
op	606:31	0:0	4	=
water	606:33	0:0	4	p_context
op	606:42	0:0	4	->
water	606:44	0:0	4	extradata_size
water	606:58	0:0	4	;
if	607:8	616:8	4	(p_enc -> fmt_out . i_extra)
cond	607:12	607:27	5	p_enc -> fmt_out . i_extra
water	607:12	0:0	6	p_enc
op	607:17	0:0	6	->
water	607:19	0:0	6	fmt_out
op	607:26	0:0	6	.
water	607:27	0:0	6	i_extra
stmts	608:8	616:8	5	
water	608:8	0:0	6	{
water	609:12	0:0	6	p_enc
op	609:17	0:0	6	->
water	609:19	0:0	6	fmt_out
op	609:26	0:0	6	.
water	609:27	0:0	6	p_extra
op	609:35	0:0	6	=
call	609:37	609:68	6	malloc
arg	609:45	609:68	7	p_enc->fmt_out.i_extra
water	609:45	0:0	8	p_enc
op	609:50	0:0	8	->
water	609:52	0:0	8	fmt_out
op	609:59	0:0	8	.
water	609:60	0:0	8	i_extra
water	609:69	0:0	6	;
if	610:12	613:12	6	(p_enc -> fmt_out . p_extra == NULL)
cond	610:17	610:43	7	p_enc -> fmt_out . p_extra == NULL
water	610:17	0:0	8	p_enc
op	610:22	0:0	8	->
water	610:24	0:0	8	fmt_out
op	610:31	0:0	8	.
water	610:32	0:0	8	p_extra
op	610:40	0:0	8	==
water	610:43	0:0	8	NULL
stmts	611:12	613:12	7	
water	611:12	0:0	8	{
goto	612:16	612:26	8	error
water	612:21	0:0	9	error
water	613:12	0:0	8	}
call	614:12	615:43	6	memcpy
arg	614:20	614:42	7	p_enc->fmt_out.p_extra
water	614:20	0:0	8	p_enc
op	614:25	0:0	8	->
water	614:27	0:0	8	fmt_out
op	614:34	0:0	8	.
water	614:35	0:0	8	p_extra
arg	614:44	614:64	7	p_context->extradata
water	614:44	0:0	8	p_context
op	614:53	0:0	8	->
water	614:55	0:0	8	extradata
arg	615:20	615:43	7	p_enc->fmt_out.i_extra
water	615:20	0:0	8	p_enc
op	615:25	0:0	8	->
water	615:27	0:0	8	fmt_out
op	615:34	0:0	8	.
water	615:35	0:0	8	i_extra
water	615:44	0:0	6	;
water	616:8	0:0	6	}
water	617:4	0:0	4	}
water	618:4	0:0	2	p_context
op	618:13	0:0	2	->
water	618:15	0:0	2	flags
op	618:21	0:0	2	&=
water	618:24	0:0	2	~CODEC_FLAG_GLOBAL_HEADER
water	618:49	0:0	2	;
if	619:4	646:4	2	(p_enc -> fmt_in . i_cat == AUDIO_ES)
cond	619:8	619:31	3	p_enc -> fmt_in . i_cat == AUDIO_ES
water	619:8	0:0	4	p_enc
op	619:13	0:0	4	->
water	619:15	0:0	4	fmt_in
op	619:21	0:0	4	.
water	619:22	0:0	4	i_cat
op	619:28	0:0	4	==
water	619:31	0:0	4	AUDIO_ES
stmts	620:4	646:4	3	
water	620:4	0:0	4	{
water	621:8	0:0	4	p_enc
op	621:13	0:0	4	->
water	621:15	0:0	4	fmt_in
op	621:21	0:0	4	.
water	621:22	0:0	4	i_codec
op	621:30	0:0	4	=
call	621:32	621:80	4	GetVlcAudioFormat
arg	621:51	621:80	5	p_sys->p_context->sample_fmt
water	621:51	0:0	6	p_sys
op	621:56	0:0	6	->
water	621:58	0:0	6	p_context
op	621:67	0:0	6	->
water	621:69	0:0	6	sample_fmt
water	621:81	0:0	4	;
water	622:8	0:0	4	p_enc
op	622:13	0:0	4	->
water	622:15	0:0	4	fmt_in
op	622:21	0:0	4	.
water	622:22	0:0	4	audio
op	622:27	0:0	4	.
water	622:28	0:0	4	i_bitspersample
op	622:44	0:0	4	=
call	622:46	622:88	4	aout_BitsPerSample
arg	622:66	622:88	5	p_enc->fmt_in.i_codec
water	622:66	0:0	6	p_enc
op	622:71	0:0	6	->
water	622:73	0:0	6	fmt_in
op	622:79	0:0	6	.
water	622:80	0:0	6	i_codec
water	622:89	0:0	4	;
water	623:8	0:0	4	p_sys
op	623:13	0:0	4	->
water	623:15	0:0	4	i_sample_bytes
op	623:30	0:0	4	=
water	623:32	0:0	4	(
water	623:33	0:0	4	p_enc
op	623:38	0:0	4	->
water	623:40	0:0	4	fmt_in
op	623:46	0:0	4	.
water	623:47	0:0	4	audio
op	623:52	0:0	4	.
water	623:53	0:0	4	i_bitspersample
op	623:69	0:0	4	/
water	623:71	0:0	4	8
water	623:72	0:0	4	)
water	623:73	0:0	4	;
water	624:8	0:0	4	p_sys
op	624:13	0:0	4	->
water	624:15	0:0	4	i_frame_size
op	624:28	0:0	4	=
water	624:30	0:0	4	p_context
op	624:39	0:0	4	->
water	624:41	0:0	4	frame_size
op	624:52	0:0	4	>
water	624:54	0:0	4	1
water	624:56	0:0	4	?
water	625:36	0:0	4	p_context
op	625:45	0:0	4	->
water	625:47	0:0	4	frame_size
water	625:58	0:0	4	:
water	626:36	0:0	4	FF_MIN_BUFFER_SIZE
water	626:54	0:0	4	;
water	627:8	0:0	4	p_sys
op	627:13	0:0	4	->
water	627:15	0:0	4	i_buffer_out
op	627:28	0:0	4	=
call	627:30	629:59	4	av_samples_get_buffer_size
arg	627:57	627:61	5	NULL
water	627:57	0:0	6	NULL
arg	628:16	628:42	5	p_sys->p_context->channels
water	628:16	0:0	6	p_sys
op	628:21	0:0	6	->
water	628:23	0:0	6	p_context
op	628:32	0:0	6	->
water	628:34	0:0	6	channels
arg	628:44	628:63	5	p_sys->i_frame_size
water	628:44	0:0	6	p_sys
op	628:49	0:0	6	->
water	628:51	0:0	6	i_frame_size
arg	629:16	629:44	5	p_sys->p_context->sample_fmt
water	629:16	0:0	6	p_sys
op	629:21	0:0	6	->
water	629:23	0:0	6	p_context
op	629:32	0:0	6	->
water	629:34	0:0	6	sample_fmt
arg	629:46	629:59	5	DEFAULT_ALIGN
water	629:46	0:0	6	DEFAULT_ALIGN
water	629:60	0:0	4	;
water	630:8	0:0	4	p_sys
op	630:13	0:0	4	->
water	630:15	0:0	4	p_buffer
op	630:24	0:0	4	=
call	630:26	630:57	4	av_malloc
arg	630:37	630:57	5	p_sys->i_buffer_out
water	630:37	0:0	6	p_sys
op	630:42	0:0	6	->
water	630:44	0:0	6	i_buffer_out
water	630:58	0:0	4	;
if	631:8	634:8	4	(unlikely (p_sys -> p_buffer == NULL ))
cond	631:13	631:47	5	unlikely (p_sys -> p_buffer == NULL )
call	631:13	631:47	6	unlikely
arg	631:23	631:47	7	p_sys->p_buffer==NULL
water	631:23	0:0	8	p_sys
op	631:28	0:0	8	->
water	631:30	0:0	8	p_buffer
op	631:39	0:0	8	==
water	631:42	0:0	8	NULL
stmts	632:8	634:8	5	
water	632:8	0:0	6	{
goto	633:12	633:22	6	error
water	633:17	0:0	7	error
water	634:8	0:0	6	}
water	635:8	0:0	4	p_enc
op	635:13	0:0	4	->
water	635:15	0:0	4	fmt_out
op	635:22	0:0	4	.
water	635:23	0:0	4	audio
op	635:28	0:0	4	.
water	635:29	0:0	4	i_frame_length
op	635:44	0:0	4	=
water	635:46	0:0	4	p_context
op	635:55	0:0	4	->
water	635:57	0:0	4	frame_size
water	635:67	0:0	4	;
water	636:8	0:0	4	p_enc
op	636:13	0:0	4	->
water	636:15	0:0	4	fmt_out
op	636:22	0:0	4	.
water	636:23	0:0	4	audio
op	636:28	0:0	4	.
water	636:29	0:0	4	i_blockalign
op	636:42	0:0	4	=
water	636:44	0:0	4	p_context
op	636:53	0:0	4	->
water	636:55	0:0	4	block_align
water	636:66	0:0	4	;
water	637:8	0:0	4	p_enc
op	637:13	0:0	4	->
water	637:15	0:0	4	fmt_out
op	637:22	0:0	4	.
water	637:23	0:0	4	audio
op	637:28	0:0	4	.
water	637:29	0:0	4	i_bitspersample
op	637:45	0:0	4	=
call	637:47	637:90	4	aout_BitsPerSample
arg	637:67	637:90	5	p_enc->fmt_out.i_codec
water	637:67	0:0	6	p_enc
op	637:72	0:0	6	->
water	637:74	0:0	6	fmt_out
op	637:81	0:0	6	.
water	637:82	0:0	6	i_codec
water	637:91	0:0	4	;
water	639:8	0:0	4	p_sys
op	639:13	0:0	4	->
water	639:15	0:0	4	b_variable
op	639:26	0:0	4	=
water	639:28	0:0	4	p_context
op	639:37	0:0	4	->
water	639:39	0:0	4	frame_size
water	639:50	0:0	4	?
water	639:52	0:0	4	false
water	639:58	0:0	4	:
water	639:60	0:0	4	true
water	639:64	0:0	4	;
if	640:8	645:8	4	(p_sys -> b_planar)
cond	640:12	640:19	5	p_sys -> b_planar
water	640:12	0:0	6	p_sys
op	640:17	0:0	6	->
water	640:19	0:0	6	b_planar
stmts	641:8	645:8	5	
water	641:8	0:0	6	{
water	642:12	0:0	6	p_sys
op	642:17	0:0	6	->
water	642:19	0:0	6	p_interleave_buf
op	642:36	0:0	6	=
call	642:38	642:69	6	av_malloc
arg	642:49	642:69	7	p_sys->i_buffer_out
water	642:49	0:0	8	p_sys
op	642:54	0:0	8	->
water	642:56	0:0	8	i_buffer_out
water	642:70	0:0	6	;
if	643:12	644:26	6	(unlikely (p_sys -> p_interleave_buf == NULL ))
cond	643:16	643:58	7	unlikely (p_sys -> p_interleave_buf == NULL )
call	643:16	643:58	8	unlikely
arg	643:26	643:58	9	p_sys->p_interleave_buf==NULL
water	643:26	0:0	10	p_sys
op	643:31	0:0	10	->
water	643:33	0:0	10	p_interleave_buf
op	643:50	0:0	10	==
water	643:53	0:0	10	NULL
stmts	644:16	644:26	7	
goto	644:16	644:26	8	error
water	644:21	0:0	9	error
water	645:8	0:0	6	}
water	646:4	0:0	4	}
water	647:4	0:0	2	p_sys
op	647:9	0:0	2	->
water	647:11	0:0	2	frame
op	647:17	0:0	2	=
call	647:19	647:39	2	avcodec_alloc_frame
water	647:40	0:0	2	;
if	648:4	651:4	2	(! p_sys -> frame)
cond	648:8	648:16	3	! p_sys -> frame
op	648:8	0:0	4	!
water	648:9	0:0	4	p_sys
op	648:14	0:0	4	->
water	648:16	0:0	4	frame
stmts	649:4	651:4	3	
water	649:4	0:0	4	{
goto	650:8	650:18	4	error
water	650:13	0:0	5	error
water	651:4	0:0	4	}
call	652:4	652:54	2	msg_Dbg
arg	652:13	652:18	3	p_enc
water	652:13	0:0	4	p_enc
arg	652:20	652:38	3	"found encoder %s"
water	652:20	0:0	4	"found encoder %s"
arg	652:40	652:54	3	psz_namecodec
water	652:40	0:0	4	psz_namecodec
water	652:55	0:0	2	;
water	653:4	0:0	2	p_enc
op	653:9	0:0	2	->
water	653:11	0:0	2	pf_encode_video
op	653:27	0:0	2	=
water	653:29	0:0	2	EncodeVideo
water	653:40	0:0	2	;
water	654:4	0:0	2	p_enc
op	654:9	0:0	2	->
water	654:11	0:0	2	pf_encode_audio
op	654:27	0:0	2	=
water	654:29	0:0	2	EncodeAudio
water	654:40	0:0	2	;
return	655:4	655:22	2	VLC_SUCCESS
water	655:11	0:0	3	VLC_SUCCESS
label	656:0	656:5	2	error :
call	657:4	657:33	2	free
arg	657:10	657:33	3	p_enc->fmt_out.p_extra
water	657:10	0:0	4	p_enc
op	657:15	0:0	4	->
water	657:17	0:0	4	fmt_out
op	657:24	0:0	4	.
water	657:25	0:0	4	p_extra
water	657:34	0:0	2	;
call	658:4	658:29	2	av_free
arg	658:13	658:29	3	p_sys->p_buffer
water	658:13	0:0	4	p_sys
op	658:18	0:0	4	->
water	658:20	0:0	4	p_buffer
water	658:30	0:0	2	;
call	659:4	659:37	2	av_free
arg	659:13	659:37	3	p_sys->p_interleave_buf
water	659:13	0:0	4	p_sys
op	659:18	0:0	4	->
water	659:20	0:0	4	p_interleave_buf
water	659:38	0:0	2	;
call	660:4	660:16	2	free
arg	660:10	660:16	3	p_sys
water	660:10	0:0	4	p_sys
water	660:17	0:0	2	;
return	661:4	661:21	2	VLC_ENOMEM
water	661:11	0:0	3	VLC_ENOMEM
