func	2:0	44:0	0	playlist_item_t *	GetNextUncle
params	2:29	0:0	1	
param	2:31	2:53	2	playlist_t *	p_playlist
param	2:55	2:78	2	playlist_item_t *	p_item
param	3:31	3:55	2	playlist_item_t *	p_root
stmnts	0:0	43:15	1	
decl	5:4	5:48	2	playlist_item_t	*p_parent
op	5:30	0:0	2	=
water	5:32	0:0	2	p_item
op	5:38	0:0	2	->
water	5:40	0:0	2	p_parent
decl	6:4	6:34	2	playlist_item_t	*p_grandparent
decl	7:4	7:24	2	bool	b_found
op	7:17	0:0	2	=
water	7:19	0:0	2	false
water	8:4	0:0	2	(
water	8:5	0:0	2	void
water	8:9	0:0	2	)
water	8:10	0:0	2	p_playlist
water	8:20	0:0	2	;
if	9:4	41:4	2	(p_parent != NULL)
cond	9:8	9:20	3	p_parent != NULL
water	9:8	0:0	4	p_parent
op	9:17	0:0	4	!=
water	9:20	0:0	4	NULL
stmts	10:4	41:4	3	
water	10:4	0:0	4	{
water	11:8	0:0	4	p_grandparent
op	11:22	0:0	4	=
water	11:24	0:0	4	p_parent
op	11:32	0:0	4	->
water	11:34	0:0	4	p_parent
water	11:42	0:0	4	;
while	12:8	40:8	4	(p_grandparent)
cond	12:15	12:15	5	p_grandparent
water	12:15	0:0	6	p_grandparent
stmts	13:8	40:8	5	
water	13:8	0:0	6	{
decl	14:12	14:17	6	int	i
for	15:12	25:12	6	(i = 0 ;i < p_grandparent -> i_children;i ++)
forinit	15:17	15:23	7	i = 0 ;
water	15:17	0:0	8	i
op	15:19	0:0	8	=
water	15:21	0:0	8	0
water	15:23	0:0	8	;
cond	15:25	15:43	7	i < p_grandparent -> i_children
water	15:25	0:0	8	i
op	15:26	0:0	8	<
water	15:28	0:0	8	p_grandparent
op	15:41	0:0	8	->
water	15:43	0:0	8	i_children
forexpr	15:56	15:57	7	i ++
water	15:56	0:0	8	i
op	15:57	0:0	8	++
stmts	16:12	25:12	7	
water	16:12	0:0	8	{
if	17:16	24:16	8	(p_parent == p_grandparent -> pp_children [ i ])
cond	17:20	17:60	9	p_parent == p_grandparent -> pp_children [ i ]
water	17:20	0:0	10	p_parent
op	17:29	0:0	10	==
water	17:32	0:0	10	p_grandparent
op	17:45	0:0	10	->
water	17:47	0:0	10	pp_children
op	17:58	0:0	10	[
water	17:59	0:0	10	i
op	17:60	0:0	10	]
stmts	18:16	24:16	9	
water	18:16	0:0	10	{
call	19:20	21:64	10	PL_DEBUG2
arg	19:31	19:78	11	"parent %s found as child %i of grandparent %s"
water	19:31	0:0	12	"parent %s found as child %i of grandparent %s"
arg	20:31	20:58	11	p_parent->p_input->psz_name
water	20:31	0:0	12	p_parent
op	20:39	0:0	12	->
water	20:41	0:0	12	p_input
op	20:48	0:0	12	->
water	20:50	0:0	12	psz_name
arg	20:60	20:61	11	i
water	20:60	0:0	12	i
arg	21:31	21:64	11	p_grandparent->p_input->psz_name
water	21:31	0:0	12	p_grandparent
op	21:44	0:0	12	->
water	21:46	0:0	12	p_input
op	21:53	0:0	12	->
water	21:55	0:0	12	psz_name
water	21:65	0:0	10	;
water	22:20	0:0	10	b_found
op	22:28	0:0	10	=
water	22:30	0:0	10	true
water	22:34	0:0	10	;
break	23:20	23:25	10	
water	24:16	0:0	10	}
water	25:12	0:0	8	}
if	26:12	29:12	6	(b_found && i + 1 < p_grandparent -> i_children)
cond	26:16	26:50	7	b_found && i + 1 < p_grandparent -> i_children
water	26:16	0:0	8	b_found
op	26:24	0:0	8	&&
water	26:27	0:0	8	i
op	26:29	0:0	8	+
water	26:31	0:0	8	1
op	26:33	0:0	8	<
water	26:35	0:0	8	p_grandparent
op	26:48	0:0	8	->
water	26:50	0:0	8	i_children
stmts	27:12	29:12	7	
water	27:12	0:0	8	{
return	28:20	28:58	8	p_grandparent->pp_children[i+1]
water	28:27	0:0	9	p_grandparent
op	28:40	0:0	9	->
water	28:42	0:0	9	pp_children
op	28:53	0:0	9	[
water	28:54	0:0	9	i
op	28:55	0:0	9	+
water	28:56	0:0	9	1
op	28:57	0:0	9	]
water	29:12	0:0	8	}
if	31:12	34:12	6	(p_grandparent == p_root)
cond	31:16	31:33	7	p_grandparent == p_root
water	31:16	0:0	8	p_grandparent
op	31:30	0:0	8	==
water	31:33	0:0	8	p_root
stmts	32:12	34:12	7	
water	32:12	0:0	8	{
return	33:16	33:27	8	NULL
water	33:23	0:0	9	NULL
water	34:12	0:0	8	}
else	35:12	39:12	6
stmts	36:12	39:12	7	
water	36:12	0:0	8	{
water	37:16	0:0	8	p_parent
op	37:25	0:0	8	=
water	37:27	0:0	8	p_grandparent
water	37:40	0:0	8	;
water	38:16	0:0	8	p_grandparent
op	38:30	0:0	8	=
water	38:32	0:0	8	p_parent
op	38:40	0:0	8	->
water	38:42	0:0	8	p_parent
water	38:50	0:0	8	;
water	39:12	0:0	8	}
water	40:8	0:0	6	}
water	41:4	0:0	4	}
return	43:4	43:15	2	NULL
water	43:11	0:0	3	NULL
