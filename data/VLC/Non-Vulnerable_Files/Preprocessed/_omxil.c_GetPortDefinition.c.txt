func	2:0	127:0	0	static OMX_ERRORTYPE	GetPortDefinition
params	2:38	0:0	1	
param	2:39	2:55	2	decoder_t *	p_dec
param	2:57	2:72	2	OmxPort *	p_port
param	3:39	3:57	2	es_format_t *	p_fmt
stmnts	0:0	126:20	1	
decl	5:4	5:39	2	decoder_sys_t	*p_sys
op	5:25	0:0	2	=
water	5:27	0:0	2	p_dec
op	5:32	0:0	2	->
water	5:34	0:0	2	p_sys
decl	6:4	6:59	2	OMX_PARAM_PORTDEFINITIONTYPE	*def
op	6:38	0:0	2	=
op	6:40	0:0	2	&
water	6:41	0:0	2	p_port
op	6:47	0:0	2	->
water	6:49	0:0	2	definition
decl	7:4	7:27	2	OMX_ERRORTYPE	omx_error
decl	8:4	8:33	2	OMX_CONFIG_RECTTYPE	crop_rect
water	9:4	0:0	2	omx_error
op	9:14	0:0	2	=
call	9:16	10:66	2	OMX_GetParameter
arg	9:33	9:51	3	p_port->omx_handle
water	9:33	0:0	4	p_port
op	9:39	0:0	4	->
water	9:41	0:0	4	omx_handle
arg	10:33	10:61	3	OMX_IndexParamPortDefinition
water	10:33	0:0	4	OMX_IndexParamPortDefinition
arg	10:63	10:66	3	def
water	10:63	0:0	4	def
water	10:67	0:0	2	;
call	11:4	12:51	2	CHECK_ERROR
arg	11:16	11:25	3	omx_error
water	11:16	0:0	4	omx_error
arg	11:27	11:62	3	"OMX_GetParameter failed (%x : %s)"
water	11:27	0:0	4	"OMX_GetParameter failed (%x : %s)"
arg	12:16	12:25	3	omx_error
water	12:16	0:0	4	omx_error
arg	12:27	12:51	3	ErrorToString(omx_error)
call	12:27	12:50	4	ErrorToString
arg	12:41	12:50	5	omx_error
water	12:41	0:0	6	omx_error
water	12:52	0:0	2	;
switch	13:4	124:4	2	(p_fmt -> i_cat)
cond	13:11	13:18	3	p_fmt -> i_cat
water	13:11	0:0	4	p_fmt
op	13:16	0:0	4	->
water	13:18	0:0	4	i_cat
stmts	14:4	124:4	3	
water	14:4	0:0	4	{
label	15:4	15:17	4	case VIDEO_ES :
water	16:8	0:0	4	p_fmt
op	16:13	0:0	4	->
water	16:15	0:0	4	video
op	16:20	0:0	4	.
water	16:21	0:0	4	i_width
op	16:29	0:0	4	=
water	16:31	0:0	4	def
op	16:34	0:0	4	->
water	16:36	0:0	4	format
op	16:42	0:0	4	.
water	16:43	0:0	4	video
op	16:48	0:0	4	.
water	16:49	0:0	4	nFrameWidth
water	16:60	0:0	4	;
water	17:8	0:0	4	p_fmt
op	17:13	0:0	4	->
water	17:15	0:0	4	video
op	17:20	0:0	4	.
water	17:21	0:0	4	i_visible_width
op	17:37	0:0	4	=
water	17:39	0:0	4	def
op	17:42	0:0	4	->
water	17:44	0:0	4	format
op	17:50	0:0	4	.
water	17:51	0:0	4	video
op	17:56	0:0	4	.
water	17:57	0:0	4	nFrameWidth
water	17:68	0:0	4	;
water	18:8	0:0	4	p_fmt
op	18:13	0:0	4	->
water	18:15	0:0	4	video
op	18:20	0:0	4	.
water	18:21	0:0	4	i_height
op	18:30	0:0	4	=
water	18:32	0:0	4	def
op	18:35	0:0	4	->
water	18:37	0:0	4	format
op	18:43	0:0	4	.
water	18:44	0:0	4	video
op	18:49	0:0	4	.
water	18:50	0:0	4	nFrameHeight
water	18:62	0:0	4	;
water	19:8	0:0	4	p_fmt
op	19:13	0:0	4	->
water	19:15	0:0	4	video
op	19:20	0:0	4	.
water	19:21	0:0	4	i_visible_height
op	19:38	0:0	4	=
water	19:40	0:0	4	def
op	19:43	0:0	4	->
water	19:45	0:0	4	format
op	19:51	0:0	4	.
water	19:52	0:0	4	video
op	19:57	0:0	4	.
water	19:58	0:0	4	nFrameHeight
water	19:70	0:0	4	;
water	20:8	0:0	4	p_fmt
op	20:13	0:0	4	->
water	20:15	0:0	4	video
op	20:20	0:0	4	.
water	20:21	0:0	4	i_frame_rate
op	20:34	0:0	4	=
water	20:36	0:0	4	p_dec
op	20:41	0:0	4	->
water	20:43	0:0	4	fmt_in
op	20:49	0:0	4	.
water	20:50	0:0	4	video
op	20:55	0:0	4	.
water	20:56	0:0	4	i_frame_rate
water	20:68	0:0	4	;
water	21:8	0:0	4	p_fmt
op	21:13	0:0	4	->
water	21:15	0:0	4	video
op	21:20	0:0	4	.
water	21:21	0:0	4	i_frame_rate_base
op	21:39	0:0	4	=
water	21:41	0:0	4	p_dec
op	21:46	0:0	4	->
water	21:48	0:0	4	fmt_in
op	21:54	0:0	4	.
water	21:55	0:0	4	video
op	21:60	0:0	4	.
water	21:61	0:0	4	i_frame_rate_base
water	21:78	0:0	4	;
call	22:8	22:36	4	OMX_INIT_STRUCTURE
arg	22:27	22:36	5	crop_rect
water	22:27	0:0	6	crop_rect
water	22:37	0:0	4	;
water	23:8	0:0	4	crop_rect
op	23:17	0:0	4	.
water	23:18	0:0	4	nPortIndex
op	23:29	0:0	4	=
water	23:31	0:0	4	def
op	23:34	0:0	4	->
water	23:36	0:0	4	nPortIndex
water	23:46	0:0	4	;
water	24:8	0:0	4	omx_error
op	24:18	0:0	4	=
call	24:20	24:97	4	OMX_GetConfig
arg	24:34	24:52	5	p_port->omx_handle
water	24:34	0:0	6	p_port
op	24:40	0:0	6	->
water	24:42	0:0	6	omx_handle
arg	24:54	24:85	5	OMX_IndexConfigCommonOutputCrop
water	24:54	0:0	6	OMX_IndexConfigCommonOutputCrop
arg	24:87	24:97	5	&crop_rect
op	24:87	0:0	6	&
water	24:88	0:0	6	crop_rect
water	24:98	0:0	4	;
if	25:8	37:8	4	(omx_error == OMX_ErrorNone)
cond	25:12	25:25	5	omx_error == OMX_ErrorNone
water	25:12	0:0	6	omx_error
op	25:22	0:0	6	==
water	25:25	0:0	6	OMX_ErrorNone
stmts	26:8	37:8	5	
water	26:8	0:0	6	{
if	27:12	28:79	6	(! def -> format . video . nSliceHeight)
cond	27:16	27:35	7	! def -> format . video . nSliceHeight
op	27:16	0:0	8	!
water	27:17	0:0	8	def
op	27:20	0:0	8	->
water	27:22	0:0	8	format
op	27:28	0:0	8	.
water	27:29	0:0	8	video
op	27:34	0:0	8	.
water	27:35	0:0	8	nSliceHeight
stmts	28:16	28:79	7	
water	28:16	0:0	8	def
op	28:19	0:0	8	->
water	28:21	0:0	8	format
op	28:27	0:0	8	.
water	28:28	0:0	8	video
op	28:33	0:0	8	.
water	28:34	0:0	8	nSliceHeight
op	28:47	0:0	8	=
water	28:49	0:0	8	def
op	28:52	0:0	8	->
water	28:54	0:0	8	format
op	28:60	0:0	8	.
water	28:61	0:0	8	video
op	28:66	0:0	8	.
water	28:67	0:0	8	nFrameHeight
water	28:79	0:0	8	;
if	29:12	30:73	6	(! def -> format . video . nStride)
cond	29:16	29:35	7	! def -> format . video . nStride
op	29:16	0:0	8	!
water	29:17	0:0	8	def
op	29:20	0:0	8	->
water	29:22	0:0	8	format
op	29:28	0:0	8	.
water	29:29	0:0	8	video
op	29:34	0:0	8	.
water	29:35	0:0	8	nStride
stmts	30:16	30:73	7	
water	30:16	0:0	8	def
op	30:19	0:0	8	->
water	30:21	0:0	8	format
op	30:27	0:0	8	.
water	30:28	0:0	8	video
op	30:33	0:0	8	.
water	30:34	0:0	8	nStride
op	30:42	0:0	8	=
water	30:44	0:0	8	def
op	30:47	0:0	8	->
water	30:49	0:0	8	format
op	30:55	0:0	8	.
water	30:56	0:0	8	video
op	30:61	0:0	8	.
water	30:62	0:0	8	nFrameWidth
water	30:73	0:0	8	;
water	31:12	0:0	6	p_fmt
op	31:17	0:0	6	->
water	31:19	0:0	6	video
op	31:24	0:0	6	.
water	31:25	0:0	6	i_width
op	31:33	0:0	6	=
water	31:35	0:0	6	crop_rect
op	31:44	0:0	6	.
water	31:45	0:0	6	nWidth
water	31:51	0:0	6	;
water	32:12	0:0	6	p_fmt
op	32:17	0:0	6	->
water	32:19	0:0	6	video
op	32:24	0:0	6	.
water	32:25	0:0	6	i_visible_width
op	32:41	0:0	6	=
water	32:43	0:0	6	crop_rect
op	32:52	0:0	6	.
water	32:53	0:0	6	nWidth
water	32:59	0:0	6	;
water	33:12	0:0	6	p_fmt
op	33:17	0:0	6	->
water	33:19	0:0	6	video
op	33:24	0:0	6	.
water	33:25	0:0	6	i_height
op	33:34	0:0	6	=
water	33:36	0:0	6	crop_rect
op	33:45	0:0	6	.
water	33:46	0:0	6	nHeight
water	33:53	0:0	6	;
water	34:12	0:0	6	p_fmt
op	34:17	0:0	6	->
water	34:19	0:0	6	video
op	34:24	0:0	6	.
water	34:25	0:0	6	i_visible_height
op	34:42	0:0	6	=
water	34:44	0:0	6	crop_rect
op	34:53	0:0	6	.
water	34:54	0:0	6	nHeight
water	34:61	0:0	6	;
if	35:12	36:66	6	(def -> format . video . eColorFormat == OMX_TI_COLOR_FormatYUV420PackedSemiPlanar)
cond	35:16	35:50	7	def -> format . video . eColorFormat == OMX_TI_COLOR_FormatYUV420PackedSemiPlanar
water	35:16	0:0	8	def
op	35:19	0:0	8	->
water	35:21	0:0	8	format
op	35:27	0:0	8	.
water	35:28	0:0	8	video
op	35:33	0:0	8	.
water	35:34	0:0	8	eColorFormat
op	35:47	0:0	8	==
water	35:50	0:0	8	OMX_TI_COLOR_FormatYUV420PackedSemiPlanar
stmts	36:16	36:66	7	
water	36:16	0:0	8	def
op	36:19	0:0	8	->
water	36:21	0:0	8	format
op	36:27	0:0	8	.
water	36:28	0:0	8	video
op	36:33	0:0	8	.
water	36:34	0:0	8	nSliceHeight
op	36:47	0:0	8	-=
water	36:50	0:0	8	crop_rect
op	36:59	0:0	8	.
water	36:60	0:0	8	nTop
op	36:64	0:0	8	/
water	36:65	0:0	8	2
water	36:66	0:0	8	;
water	37:8	0:0	6	}
else	38:8	42:8	4
stmts	39:8	42:8	5	
water	39:8	0:0	6	{
water	41:12	0:0	6	omx_error
op	41:22	0:0	6	=
water	41:24	0:0	6	OMX_ErrorNone
water	41:37	0:0	6	;
water	42:8	0:0	6	}
if	46:8	49:82	4	(def -> format . video . eColorFormat == OMX_COLOR_FormatYUV420Planar && !strncmp (p_sys -> psz_component ,"OMX.qcom.video.decoder" ,strlen ("OMX.qcom.video.decoder" ) ))
cond	46:11	48:52	5	def -> format . video . eColorFormat == OMX_COLOR_FormatYUV420Planar && !strncmp (p_sys -> psz_component ,"OMX.qcom.video.decoder" ,strlen ("OMX.qcom.video.decoder" ) )
water	46:11	0:0	6	def
op	46:14	0:0	6	->
water	46:16	0:0	6	format
op	46:22	0:0	6	.
water	46:23	0:0	6	video
op	46:28	0:0	6	.
water	46:29	0:0	6	eColorFormat
op	46:42	0:0	6	==
water	46:45	0:0	6	OMX_COLOR_FormatYUV420Planar
op	46:74	0:0	6	&&
op	47:11	0:0	6	!
call	47:12	48:52	6	strncmp
arg	47:20	47:40	7	p_sys->psz_component
water	47:20	0:0	8	p_sys
op	47:25	0:0	8	->
water	47:27	0:0	8	psz_component
arg	47:42	47:66	7	"OMX.qcom.video.decoder"
water	47:42	0:0	8	"OMX.qcom.video.decoder"
arg	48:20	48:52	7	strlen("OMX.qcom.video.decoder")
call	48:20	48:51	8	strlen
arg	48:27	48:51	9	"OMX.qcom.video.decoder"
water	48:27	0:0	10	"OMX.qcom.video.decoder"
stmts	49:12	49:82	5	
water	49:12	0:0	6	def
op	49:15	0:0	6	->
water	49:17	0:0	6	format
op	49:23	0:0	6	.
water	49:24	0:0	6	video
op	49:29	0:0	6	.
water	49:30	0:0	6	eColorFormat
op	49:43	0:0	6	=
water	49:45	0:0	6	OMX_QCOM_COLOR_FormatYVU420SemiPlanar
water	49:82	0:0	6	;
if	50:8	53:8	4	(IgnoreOmxDecoderPadding (p_sys -> psz_component ))
cond	50:12	50:56	5	IgnoreOmxDecoderPadding (p_sys -> psz_component )
call	50:12	50:56	6	IgnoreOmxDecoderPadding
arg	50:36	50:56	7	p_sys->psz_component
water	50:36	0:0	8	p_sys
op	50:41	0:0	8	->
water	50:43	0:0	8	psz_component
stmts	50:59	53:8	5	
water	50:59	0:0	6	{
water	51:12	0:0	6	def
op	51:15	0:0	6	->
water	51:17	0:0	6	format
op	51:23	0:0	6	.
water	51:24	0:0	6	video
op	51:29	0:0	6	.
water	51:30	0:0	6	nSliceHeight
op	51:43	0:0	6	=
water	51:45	0:0	6	0
water	51:46	0:0	6	;
water	52:12	0:0	6	def
op	52:15	0:0	6	->
water	52:17	0:0	6	format
op	52:23	0:0	6	.
water	52:24	0:0	6	video
op	52:29	0:0	6	.
water	52:30	0:0	6	nStride
op	52:38	0:0	6	=
water	52:40	0:0	6	p_fmt
op	52:45	0:0	6	->
water	52:47	0:0	6	video
op	52:52	0:0	6	.
water	52:53	0:0	6	i_width
water	52:60	0:0	6	;
water	53:8	0:0	6	}
if	54:8	69:8	4	(!GetVlcVideoFormat (def -> format . video . eCompressionFormat ,& p_fmt -> i_codec ,0 ))
cond	54:11	55:50	5	!GetVlcVideoFormat (def -> format . video . eCompressionFormat ,& p_fmt -> i_codec ,0 )
op	54:11	0:0	6	!
call	54:12	55:50	6	GetVlcVideoFormat
arg	54:31	54:67	7	def->format.video.eCompressionFormat
water	54:31	0:0	8	def
op	54:34	0:0	8	->
water	54:36	0:0	8	format
op	54:42	0:0	8	.
water	54:43	0:0	8	video
op	54:48	0:0	8	.
water	54:49	0:0	8	eCompressionFormat
arg	55:31	55:46	7	&p_fmt->i_codec
op	55:31	0:0	8	&
water	55:32	0:0	8	p_fmt
op	55:37	0:0	8	->
water	55:39	0:0	8	i_codec
arg	55:48	55:50	7	0
water	55:48	0:0	8	0
stmts	56:8	69:8	5	
water	56:8	0:0	6	{
if	57:12	63:12	6	(!GetVlcChromaFormat (def -> format . video . eColorFormat ,& p_fmt -> i_codec ,0 ))
cond	57:16	58:56	7	!GetVlcChromaFormat (def -> format . video . eColorFormat ,& p_fmt -> i_codec ,0 )
op	57:16	0:0	8	!
call	57:17	58:56	8	GetVlcChromaFormat
arg	57:37	57:67	9	def->format.video.eColorFormat
water	57:37	0:0	10	def
op	57:40	0:0	10	->
water	57:42	0:0	10	format
op	57:48	0:0	10	.
water	57:49	0:0	10	video
op	57:54	0:0	10	.
water	57:55	0:0	10	eColorFormat
arg	58:37	58:52	9	&p_fmt->i_codec
op	58:37	0:0	10	&
water	58:38	0:0	10	p_fmt
op	58:43	0:0	10	->
water	58:45	0:0	10	i_codec
arg	58:54	58:56	9	0
water	58:54	0:0	10	0
stmts	59:12	63:12	7	
water	59:12	0:0	8	{
water	60:16	0:0	8	omx_error
op	60:26	0:0	8	=
water	60:28	0:0	8	OMX_ErrorNotImplemented
water	60:51	0:0	8	;
call	61:16	62:64	8	CHECK_ERROR
arg	61:28	61:37	9	omx_error
water	61:28	0:0	10	omx_error
arg	61:39	61:74	9	"OMX color format %i not supported"
water	61:39	0:0	10	"OMX color format %i not supported"
arg	62:28	62:64	9	(int)def->format.video.eColorFormat
water	62:28	0:0	10	(
water	62:29	0:0	10	int
water	62:32	0:0	10	)
water	62:33	0:0	10	def
op	62:36	0:0	10	->
water	62:38	0:0	10	format
op	62:44	0:0	10	.
water	62:45	0:0	10	video
op	62:50	0:0	10	.
water	62:51	0:0	10	eColorFormat
water	62:65	0:0	8	;
water	63:12	0:0	8	}
call	64:12	68:66	6	GetVlcChromaSizes
arg	64:31	64:45	7	p_fmt->i_codec
water	64:31	0:0	8	p_fmt
op	64:36	0:0	8	->
water	64:38	0:0	8	i_codec
arg	65:31	65:60	7	def->format.video.nFrameWidth
water	65:31	0:0	8	def
op	65:34	0:0	8	->
water	65:36	0:0	8	format
op	65:42	0:0	8	.
water	65:43	0:0	8	video
op	65:48	0:0	8	.
water	65:49	0:0	8	nFrameWidth
arg	66:31	66:61	7	def->format.video.nFrameHeight
water	66:31	0:0	8	def
op	66:34	0:0	8	->
water	66:36	0:0	8	format
op	66:42	0:0	8	.
water	66:43	0:0	8	video
op	66:48	0:0	8	.
water	66:49	0:0	8	nFrameHeight
arg	67:31	67:52	7	&p_port->i_frame_size
op	67:31	0:0	8	&
water	67:32	0:0	8	p_port
op	67:38	0:0	8	->
water	67:40	0:0	8	i_frame_size
arg	67:54	67:77	7	&p_port->i_frame_stride
op	67:54	0:0	8	&
water	67:55	0:0	8	p_port
op	67:61	0:0	8	->
water	67:63	0:0	8	i_frame_stride
arg	68:31	68:66	7	&p_port->i_frame_stride_chroma_div
op	68:31	0:0	8	&
water	68:32	0:0	8	p_port
op	68:38	0:0	8	->
water	68:40	0:0	8	i_frame_stride_chroma_div
water	68:67	0:0	6	;
water	69:8	0:0	6	}
if	70:8	71:51	4	(p_port -> i_frame_size > def -> nBufferSize)
cond	70:11	70:39	5	p_port -> i_frame_size > def -> nBufferSize
water	70:11	0:0	6	p_port
op	70:17	0:0	6	->
water	70:19	0:0	6	i_frame_size
op	70:32	0:0	6	>
water	70:34	0:0	6	def
op	70:37	0:0	6	->
water	70:39	0:0	6	nBufferSize
stmts	71:12	71:51	5	
water	71:12	0:0	6	def
op	71:15	0:0	6	->
water	71:17	0:0	6	nBufferSize
op	71:29	0:0	6	=
water	71:31	0:0	6	p_port
op	71:37	0:0	6	->
water	71:39	0:0	6	i_frame_size
water	71:51	0:0	6	;
water	72:8	0:0	4	p_port
op	72:14	0:0	4	->
water	72:16	0:0	4	i_frame_size
op	72:29	0:0	4	=
water	72:31	0:0	4	def
op	72:34	0:0	4	->
water	72:36	0:0	4	nBufferSize
water	72:47	0:0	4	;
if	74:8	75:62	4	(( int ) p_port -> i_frame_stride > def -> format . video . nStride)
cond	74:11	74:59	5	( int ) p_port -> i_frame_stride > def -> format . video . nStride
water	74:11	0:0	6	(
water	74:12	0:0	6	int
water	74:15	0:0	6	)
water	74:16	0:0	6	p_port
op	74:22	0:0	6	->
water	74:24	0:0	6	i_frame_stride
op	74:39	0:0	6	>
water	74:41	0:0	6	def
op	74:44	0:0	6	->
water	74:46	0:0	6	format
op	74:52	0:0	6	.
water	74:53	0:0	6	video
op	74:58	0:0	6	.
water	74:59	0:0	6	nStride
stmts	75:12	75:62	5	
water	75:12	0:0	6	def
op	75:15	0:0	6	->
water	75:17	0:0	6	format
op	75:23	0:0	6	.
water	75:24	0:0	6	video
op	75:29	0:0	6	.
water	75:30	0:0	6	nStride
op	75:38	0:0	6	=
water	75:40	0:0	6	p_port
op	75:46	0:0	6	->
water	75:48	0:0	6	i_frame_stride
water	75:62	0:0	6	;
water	77:8	0:0	4	p_port
op	77:14	0:0	4	->
water	77:16	0:0	4	i_frame_stride
op	77:31	0:0	4	=
water	77:33	0:0	4	def
op	77:36	0:0	4	->
water	77:38	0:0	4	format
op	77:44	0:0	4	.
water	77:45	0:0	4	video
op	77:50	0:0	4	.
water	77:51	0:0	4	nStride
water	77:58	0:0	4	;
call	78:8	78:31	4	UpdatePixelAspect
arg	78:26	78:31	5	p_dec
water	78:26	0:0	6	p_dec
water	78:32	0:0	4	;
break	79:8	79:13	4	
label	80:4	80:17	4	case AUDIO_ES :
if	81:8	87:8	4	(!OmxToVlcAudioFormat (def -> format . audio . eEncoding ,& p_fmt -> i_codec ,0 ))
cond	81:12	82:51	5	!OmxToVlcAudioFormat (def -> format . audio . eEncoding ,& p_fmt -> i_codec ,0 )
op	81:12	0:0	6	!
call	81:13	82:51	6	OmxToVlcAudioFormat
arg	81:34	81:61	7	def->format.audio.eEncoding
water	81:34	0:0	8	def
op	81:37	0:0	8	->
water	81:39	0:0	8	format
op	81:45	0:0	8	.
water	81:46	0:0	8	audio
op	81:51	0:0	8	.
water	81:52	0:0	8	eEncoding
arg	82:32	82:47	7	&p_fmt->i_codec
op	82:32	0:0	8	&
water	82:33	0:0	8	p_fmt
op	82:38	0:0	8	->
water	82:40	0:0	8	i_codec
arg	82:49	82:51	7	0
water	82:49	0:0	8	0
stmts	83:8	87:8	5	
water	83:8	0:0	6	{
water	84:12	0:0	6	omx_error
op	84:22	0:0	6	=
water	84:24	0:0	6	OMX_ErrorNotImplemented
water	84:47	0:0	6	;
call	85:12	86:57	6	CHECK_ERROR
arg	85:24	85:33	7	omx_error
water	85:24	0:0	8	omx_error
arg	85:35	85:70	7	"OMX audio format %i not supported"
water	85:35	0:0	8	"OMX audio format %i not supported"
arg	86:24	86:57	7	(int)def->format.audio.eEncoding
water	86:24	0:0	8	(
water	86:25	0:0	8	int
water	86:28	0:0	8	)
water	86:29	0:0	8	def
op	86:32	0:0	8	->
water	86:34	0:0	8	format
op	86:40	0:0	8	.
water	86:41	0:0	8	audio
op	86:46	0:0	8	.
water	86:47	0:0	8	eEncoding
water	86:58	0:0	6	;
water	87:8	0:0	6	}
water	88:8	0:0	4	omx_error
op	88:18	0:0	4	=
call	88:20	95:65	4	GetAudioParameters
arg	88:39	88:57	5	p_port->omx_handle
water	88:39	0:0	6	p_port
op	88:45	0:0	6	->
water	88:47	0:0	6	omx_handle
arg	89:39	89:60	5	&p_port->format_param
op	89:39	0:0	6	&
water	89:40	0:0	6	p_port
op	89:46	0:0	6	->
water	89:48	0:0	6	format_param
arg	89:62	89:77	5	def->nPortIndex
water	89:62	0:0	6	def
op	89:65	0:0	6	->
water	89:67	0:0	6	nPortIndex
arg	90:39	90:66	5	def->format.audio.eEncoding
water	90:39	0:0	6	def
op	90:42	0:0	6	->
water	90:44	0:0	6	format
op	90:50	0:0	6	.
water	90:51	0:0	6	audio
op	90:56	0:0	6	.
water	90:57	0:0	6	eEncoding
arg	91:39	91:63	5	&p_fmt->audio.i_channels
op	91:39	0:0	6	&
water	91:40	0:0	6	p_fmt
op	91:45	0:0	6	->
water	91:47	0:0	6	audio
op	91:52	0:0	6	.
water	91:53	0:0	6	i_channels
arg	92:39	92:59	5	&p_fmt->audio.i_rate
op	92:39	0:0	6	&
water	92:40	0:0	6	p_fmt
op	92:45	0:0	6	->
water	92:47	0:0	6	audio
op	92:52	0:0	6	.
water	92:53	0:0	6	i_rate
arg	93:39	93:56	5	&p_fmt->i_bitrate
op	93:39	0:0	6	&
water	93:40	0:0	6	p_fmt
op	93:45	0:0	6	->
water	93:47	0:0	6	i_bitrate
arg	94:39	94:68	5	&p_fmt->audio.i_bitspersample
op	94:39	0:0	6	&
water	94:40	0:0	6	p_fmt
op	94:45	0:0	6	->
water	94:47	0:0	6	audio
op	94:52	0:0	6	.
water	94:53	0:0	6	i_bitspersample
arg	95:39	95:65	5	&p_fmt->audio.i_blockalign
op	95:39	0:0	6	&
water	95:40	0:0	6	p_fmt
op	95:45	0:0	6	->
water	95:47	0:0	6	audio
op	95:52	0:0	6	.
water	95:53	0:0	6	i_blockalign
water	95:66	0:0	4	;
call	96:8	97:55	4	CHECK_ERROR
arg	96:20	96:29	5	omx_error
water	96:20	0:0	6	omx_error
arg	96:31	96:68	5	"GetAudioParameters failed (%x : %s)"
water	96:31	0:0	6	"GetAudioParameters failed (%x : %s)"
arg	97:20	97:29	5	omx_error
water	97:20	0:0	6	omx_error
arg	97:31	97:55	5	ErrorToString(omx_error)
call	97:31	97:54	6	ErrorToString
arg	97:45	97:54	7	omx_error
water	97:45	0:0	8	omx_error
water	97:56	0:0	4	;
if	98:8	120:8	4	(p_fmt -> audio . i_channels < 9)
cond	98:11	98:37	5	p_fmt -> audio . i_channels < 9
water	98:11	0:0	6	p_fmt
op	98:16	0:0	6	->
water	98:18	0:0	6	audio
op	98:23	0:0	6	.
water	98:24	0:0	6	i_channels
op	98:35	0:0	6	<
water	98:37	0:0	6	9
stmts	99:8	120:8	5	
water	99:8	0:0	6	{
water	100:12	0:0	6	static
water	100:19	0:0	6	const
water	100:25	0:0	6	int
water	100:29	0:0	6	pi_channels_maps
op	100:45	0:0	6	[
water	100:46	0:0	6	9
op	100:47	0:0	6	]
op	100:49	0:0	6	=
water	101:12	0:0	6	{
water	102:16	0:0	6	0
water	102:17	0:0	6	,
water	102:19	0:0	6	AOUT_CHAN_CENTER
water	102:35	0:0	6	,
water	102:37	0:0	6	AOUT_CHAN_LEFT
op	102:52	0:0	6	|
water	102:54	0:0	6	AOUT_CHAN_RIGHT
water	102:69	0:0	6	,
water	103:16	0:0	6	AOUT_CHAN_CENTER
op	103:33	0:0	6	|
water	103:35	0:0	6	AOUT_CHAN_LEFT
op	103:50	0:0	6	|
water	103:52	0:0	6	AOUT_CHAN_RIGHT
water	103:67	0:0	6	,
water	104:16	0:0	6	AOUT_CHAN_LEFT
op	104:31	0:0	6	|
water	104:33	0:0	6	AOUT_CHAN_RIGHT
op	104:49	0:0	6	|
water	104:51	0:0	6	AOUT_CHAN_REARLEFT
op	105:16	0:0	6	|
water	105:18	0:0	6	AOUT_CHAN_REARRIGHT
water	105:37	0:0	6	,
water	106:16	0:0	6	AOUT_CHAN_LEFT
op	106:31	0:0	6	|
water	106:33	0:0	6	AOUT_CHAN_RIGHT
op	106:49	0:0	6	|
water	106:51	0:0	6	AOUT_CHAN_CENTER
op	107:16	0:0	6	|
water	107:18	0:0	6	AOUT_CHAN_REARLEFT
op	107:37	0:0	6	|
water	107:39	0:0	6	AOUT_CHAN_REARRIGHT
water	107:58	0:0	6	,
water	108:16	0:0	6	AOUT_CHAN_LEFT
op	108:31	0:0	6	|
water	108:33	0:0	6	AOUT_CHAN_RIGHT
op	108:49	0:0	6	|
water	108:51	0:0	6	AOUT_CHAN_CENTER
op	109:16	0:0	6	|
water	109:18	0:0	6	AOUT_CHAN_REARLEFT
op	109:37	0:0	6	|
water	109:39	0:0	6	AOUT_CHAN_REARRIGHT
op	109:59	0:0	6	|
water	109:61	0:0	6	AOUT_CHAN_LFE
water	109:74	0:0	6	,
water	110:16	0:0	6	AOUT_CHAN_LEFT
op	110:31	0:0	6	|
water	110:33	0:0	6	AOUT_CHAN_RIGHT
op	110:49	0:0	6	|
water	110:51	0:0	6	AOUT_CHAN_CENTER
op	111:16	0:0	6	|
water	111:18	0:0	6	AOUT_CHAN_REARLEFT
op	111:37	0:0	6	|
water	111:39	0:0	6	AOUT_CHAN_REARRIGHT
op	111:59	0:0	6	|
water	111:61	0:0	6	AOUT_CHAN_MIDDLELEFT
op	112:16	0:0	6	|
water	112:18	0:0	6	AOUT_CHAN_MIDDLERIGHT
water	112:39	0:0	6	,
water	113:16	0:0	6	AOUT_CHAN_LEFT
op	113:31	0:0	6	|
water	113:33	0:0	6	AOUT_CHAN_RIGHT
op	113:49	0:0	6	|
water	113:51	0:0	6	AOUT_CHAN_CENTER
op	113:68	0:0	6	|
water	113:70	0:0	6	AOUT_CHAN_REARLEFT
op	114:16	0:0	6	|
water	114:18	0:0	6	AOUT_CHAN_REARRIGHT
op	114:38	0:0	6	|
water	114:40	0:0	6	AOUT_CHAN_MIDDLELEFT
op	114:61	0:0	6	|
water	114:63	0:0	6	AOUT_CHAN_MIDDLERIGHT
op	115:16	0:0	6	|
water	115:18	0:0	6	AOUT_CHAN_LFE
water	116:12	0:0	6	}
water	116:13	0:0	6	;
water	117:12	0:0	6	p_fmt
op	117:17	0:0	6	->
water	117:19	0:0	6	audio
op	117:24	0:0	6	.
water	117:25	0:0	6	i_physical_channels
op	117:45	0:0	6	=
water	118:16	0:0	6	p_fmt
op	118:21	0:0	6	->
water	118:23	0:0	6	audio
op	118:28	0:0	6	.
water	118:29	0:0	6	i_original_channels
op	118:49	0:0	6	=
water	119:20	0:0	6	pi_channels_maps
op	119:36	0:0	6	[
water	119:37	0:0	6	p_fmt
op	119:42	0:0	6	->
water	119:44	0:0	6	audio
op	119:49	0:0	6	.
water	119:50	0:0	6	i_channels
op	119:60	0:0	6	]
water	119:61	0:0	6	;
water	120:8	0:0	6	}
call	121:8	121:67	4	date_Init
arg	121:19	121:42	5	&p_dec->p_sys->end_date
op	121:19	0:0	6	&
water	121:20	0:0	6	p_dec
op	121:25	0:0	6	->
water	121:27	0:0	6	p_sys
op	121:32	0:0	6	->
water	121:34	0:0	6	end_date
arg	121:44	121:63	5	p_fmt->audio.i_rate
water	121:44	0:0	6	p_fmt
op	121:49	0:0	6	->
water	121:51	0:0	6	audio
op	121:56	0:0	6	.
water	121:57	0:0	6	i_rate
arg	121:65	121:67	5	1
water	121:65	0:0	6	1
water	121:68	0:0	4	;
break	122:8	122:13	4	
label	123:4	123:11	4	default :
return	123:13	123:43	4	OMX_ErrorNotImplemented
water	123:20	0:0	5	OMX_ErrorNotImplemented
water	124:4	0:0	4	}
label	125:1	125:6	2	error :
return	126:4	126:20	2	omx_error
water	126:11	0:0	3	omx_error
