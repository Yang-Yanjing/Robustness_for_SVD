func	2:0	98:0	0	static int	Control
params	2:18	0:0	1	
param	2:20	2:36	2	demux_t *	p_demux
param	2:38	2:49	2	int	i_query
param	2:51	2:64	2	va_list	args
stmnts	0:0	97:4	1	
decl	4:4	4:39	2	demux_sys_t	*p_sys
op	4:23	0:0	2	=
water	4:25	0:0	2	p_demux
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:22	2	int64_t	*pi64
water	5:17	0:0	2	,
decl	5:4	5:22	2	int64_t	i64
decl	6:4	6:9	2	int	i
decl	7:4	7:17	2	double	*pf
water	7:14	0:0	2	,
decl	7:4	7:17	2	double	f
switch	8:4	97:4	2	(i_query)
cond	8:12	8:12	3	i_query
water	8:12	0:0	4	i_query
stmts	9:4	97:4	3	
water	9:4	0:0	4	{
label	10:8	10:29	4	case DEMUX_GET_LENGTH :
water	11:12	0:0	4	pi64
op	11:17	0:0	4	=
water	11:19	0:0	4	(
water	11:20	0:0	4	int64_t
op	11:27	0:0	4	*
water	11:28	0:0	4	)
call	11:29	11:53	4	va_arg
arg	11:37	11:41	5	args
water	11:37	0:0	6	args
arg	11:43	11:53	5	int64_t*
water	11:43	0:0	6	int64_t
op	11:51	0:0	6	*
water	11:54	0:0	4	;
op	12:12	0:0	4	*
water	12:13	0:0	4	pi64
op	12:18	0:0	4	=
water	12:20	0:0	4	(
water	12:21	0:0	4	int64_t
water	12:28	0:0	4	)
water	12:30	0:0	4	p_sys
op	12:35	0:0	4	->
water	12:37	0:0	4	i_length
water	12:45	0:0	4	;
return	13:12	13:30	4	VLC_SUCCESS
water	13:19	0:0	5	VLC_SUCCESS
label	14:8	14:27	4	case DEMUX_GET_TIME :
water	15:12	0:0	4	pi64
op	15:17	0:0	4	=
water	15:19	0:0	4	(
water	15:20	0:0	4	int64_t
op	15:27	0:0	4	*
water	15:28	0:0	4	)
call	15:29	15:53	4	va_arg
arg	15:37	15:41	5	args
water	15:37	0:0	6	args
arg	15:43	15:53	5	int64_t*
water	15:43	0:0	6	int64_t
op	15:51	0:0	6	*
water	15:54	0:0	4	;
for	16:12	23:12	4	(i = 0 ;i < p_sys -> i_tracks;i ++)
forinit	16:17	16:22	5	i = 0 ;
water	16:17	0:0	6	i
op	16:19	0:0	6	=
water	16:21	0:0	6	0
water	16:22	0:0	6	;
cond	16:24	16:35	5	i < p_sys -> i_tracks
water	16:24	0:0	6	i
op	16:26	0:0	6	<
water	16:28	0:0	6	p_sys
op	16:33	0:0	6	->
water	16:35	0:0	6	i_tracks
forexpr	16:45	16:46	5	i ++
water	16:45	0:0	6	i
op	16:46	0:0	6	++
stmts	17:12	23:12	5	
water	17:12	0:0	6	{
decl	18:16	18:31	6	bool	b_selected
call	20:16	21:66	6	es_out_Control
arg	20:32	20:44	7	p_demux->out
water	20:32	0:0	8	p_demux
op	20:39	0:0	8	->
water	20:41	0:0	8	out
arg	20:46	20:65	7	ES_OUT_GET_ES_STATE
water	20:46	0:0	8	ES_OUT_GET_ES_STATE
arg	21:32	21:52	7	p_sys->track[i].p_es
water	21:32	0:0	8	p_sys
op	21:37	0:0	8	->
water	21:39	0:0	8	track
op	21:44	0:0	8	[
water	21:45	0:0	8	i
op	21:46	0:0	8	]
op	21:47	0:0	8	.
water	21:48	0:0	8	p_es
arg	21:54	21:66	7	&b_selected
op	21:54	0:0	8	&
water	21:55	0:0	8	b_selected
water	21:67	0:0	6	;
if	22:16	22:38	6	(b_selected)
cond	22:20	22:20	7	b_selected
water	22:20	0:0	8	b_selected
stmts	22:33	22:38	7	
break	22:33	22:38	8	
water	23:12	0:0	6	}
if	24:12	28:12	4	(i < p_sys -> i_tracks && p_sys -> track [ i ] . i_current_subtitle < p_sys -> track [ i ] . i_subtitles)
cond	24:16	24:92	5	i < p_sys -> i_tracks && p_sys -> track [ i ] . i_current_subtitle < p_sys -> track [ i ] . i_subtitles
water	24:16	0:0	6	i
op	24:18	0:0	6	<
water	24:20	0:0	6	p_sys
op	24:25	0:0	6	->
water	24:27	0:0	6	i_tracks
op	24:36	0:0	6	&&
water	24:39	0:0	6	p_sys
op	24:44	0:0	6	->
water	24:46	0:0	6	track
op	24:51	0:0	6	[
water	24:52	0:0	6	i
op	24:53	0:0	6	]
op	24:54	0:0	6	.
water	24:55	0:0	6	i_current_subtitle
op	24:74	0:0	6	<
water	24:76	0:0	6	p_sys
op	24:81	0:0	6	->
water	24:83	0:0	6	track
op	24:88	0:0	6	[
water	24:89	0:0	6	i
op	24:90	0:0	6	]
op	24:91	0:0	6	.
water	24:92	0:0	6	i_subtitles
stmts	25:12	28:12	5	
water	25:12	0:0	6	{
op	26:16	0:0	6	*
water	26:17	0:0	6	pi64
op	26:22	0:0	6	=
water	26:24	0:0	6	p_sys
op	26:29	0:0	6	->
water	26:31	0:0	6	track
op	26:36	0:0	6	[
water	26:37	0:0	6	i
op	26:38	0:0	6	]
op	26:39	0:0	6	.
water	26:40	0:0	6	p_subtitles
op	26:51	0:0	6	[
water	26:52	0:0	6	p_sys
op	26:57	0:0	6	->
water	26:59	0:0	6	track
op	26:64	0:0	6	[
water	26:65	0:0	6	i
op	26:66	0:0	6	]
op	26:67	0:0	6	.
water	26:68	0:0	6	i_current_subtitle
op	26:86	0:0	6	]
op	26:87	0:0	6	.
water	26:88	0:0	6	i_start
water	26:95	0:0	6	;
return	27:16	27:34	6	VLC_SUCCESS
water	27:23	0:0	7	VLC_SUCCESS
water	28:12	0:0	6	}
return	29:12	29:31	4	VLC_EGENERIC
water	29:19	0:0	5	VLC_EGENERIC
label	30:8	30:27	4	case DEMUX_SET_TIME :
water	31:12	0:0	4	i64
op	31:16	0:0	4	=
water	31:18	0:0	4	(
water	31:19	0:0	4	int64_t
water	31:26	0:0	4	)
call	31:27	31:49	4	va_arg
arg	31:35	31:39	5	args
water	31:35	0:0	6	args
arg	31:41	31:49	5	int64_t
water	31:41	0:0	6	int64_t
water	31:50	0:0	4	;
for	32:12	42:12	4	(i = 0 ;i < p_sys -> i_tracks;i ++)
forinit	32:17	32:22	5	i = 0 ;
water	32:17	0:0	6	i
op	32:19	0:0	6	=
water	32:21	0:0	6	0
water	32:22	0:0	6	;
cond	32:24	32:35	5	i < p_sys -> i_tracks
water	32:24	0:0	6	i
op	32:26	0:0	6	<
water	32:28	0:0	6	p_sys
op	32:33	0:0	6	->
water	32:35	0:0	6	i_tracks
forexpr	32:45	32:46	5	i ++
water	32:45	0:0	6	i
op	32:46	0:0	6	++
stmts	33:12	42:12	5	
water	33:12	0:0	6	{
water	34:16	0:0	6	p_sys
op	34:21	0:0	6	->
water	34:23	0:0	6	track
op	34:28	0:0	6	[
water	34:29	0:0	6	i
op	34:30	0:0	6	]
op	34:31	0:0	6	.
water	34:32	0:0	6	i_current_subtitle
op	34:51	0:0	6	=
water	34:53	0:0	6	0
water	34:54	0:0	6	;
while	35:16	39:16	6	(p_sys -> track [ i ] . i_current_subtitle < p_sys -> track [ i ] . i_subtitles && p_sys -> track [ i ] . p_subtitles [ p_sys -> track [ i ] . i_current_subtitle ] . i_start < i64)
cond	35:23	36:97	7	p_sys -> track [ i ] . i_current_subtitle < p_sys -> track [ i ] . i_subtitles && p_sys -> track [ i ] . p_subtitles [ p_sys -> track [ i ] . i_current_subtitle ] . i_start < i64
water	35:23	0:0	8	p_sys
op	35:28	0:0	8	->
water	35:30	0:0	8	track
op	35:35	0:0	8	[
water	35:36	0:0	8	i
op	35:37	0:0	8	]
op	35:38	0:0	8	.
water	35:39	0:0	8	i_current_subtitle
op	35:58	0:0	8	<
water	35:60	0:0	8	p_sys
op	35:65	0:0	8	->
water	35:67	0:0	8	track
op	35:72	0:0	8	[
water	35:73	0:0	8	i
op	35:74	0:0	8	]
op	35:75	0:0	8	.
water	35:76	0:0	8	i_subtitles
op	35:88	0:0	8	&&
water	36:23	0:0	8	p_sys
op	36:28	0:0	8	->
water	36:30	0:0	8	track
op	36:35	0:0	8	[
water	36:36	0:0	8	i
op	36:37	0:0	8	]
op	36:38	0:0	8	.
water	36:39	0:0	8	p_subtitles
op	36:50	0:0	8	[
water	36:51	0:0	8	p_sys
op	36:56	0:0	8	->
water	36:58	0:0	8	track
op	36:63	0:0	8	[
water	36:64	0:0	8	i
op	36:65	0:0	8	]
op	36:66	0:0	8	.
water	36:67	0:0	8	i_current_subtitle
op	36:85	0:0	8	]
op	36:86	0:0	8	.
water	36:87	0:0	8	i_start
op	36:95	0:0	8	<
water	36:97	0:0	8	i64
stmts	37:16	39:16	7	
water	37:16	0:0	8	{
water	38:20	0:0	8	p_sys
op	38:25	0:0	8	->
water	38:27	0:0	8	track
op	38:32	0:0	8	[
water	38:33	0:0	8	i
op	38:34	0:0	8	]
op	38:35	0:0	8	.
water	38:36	0:0	8	i_current_subtitle
op	38:54	0:0	8	++
water	38:56	0:0	8	;
water	39:16	0:0	8	}
if	40:16	41:39	6	(p_sys -> track [ i ] . i_current_subtitle >= p_sys -> track [ i ] . i_subtitles)
cond	40:20	40:74	7	p_sys -> track [ i ] . i_current_subtitle >= p_sys -> track [ i ] . i_subtitles
water	40:20	0:0	8	p_sys
op	40:25	0:0	8	->
water	40:27	0:0	8	track
op	40:32	0:0	8	[
water	40:33	0:0	8	i
op	40:34	0:0	8	]
op	40:35	0:0	8	.
water	40:36	0:0	8	i_current_subtitle
op	40:55	0:0	8	>=
water	40:58	0:0	8	p_sys
op	40:63	0:0	8	->
water	40:65	0:0	8	track
op	40:70	0:0	8	[
water	40:71	0:0	8	i
op	40:72	0:0	8	]
op	40:73	0:0	8	.
water	40:74	0:0	8	i_subtitles
stmts	41:20	41:39	7	
return	41:20	41:39	8	VLC_EGENERIC
water	41:27	0:0	9	VLC_EGENERIC
water	42:12	0:0	6	}
return	43:12	43:30	4	VLC_SUCCESS
water	43:19	0:0	5	VLC_SUCCESS
label	44:8	44:31	4	case DEMUX_GET_POSITION :
water	45:12	0:0	4	pf
op	45:15	0:0	4	=
water	45:17	0:0	4	(
water	45:18	0:0	4	double
op	45:24	0:0	4	*
water	45:25	0:0	4	)
call	45:26	45:49	4	va_arg
arg	45:34	45:38	5	args
water	45:34	0:0	6	args
arg	45:40	45:49	5	double*
water	45:40	0:0	6	double
op	45:47	0:0	6	*
water	45:50	0:0	4	;
for	46:12	53:12	4	(i = 0 ;i < p_sys -> i_tracks;i ++)
forinit	46:17	46:22	5	i = 0 ;
water	46:17	0:0	6	i
op	46:19	0:0	6	=
water	46:21	0:0	6	0
water	46:22	0:0	6	;
cond	46:24	46:35	5	i < p_sys -> i_tracks
water	46:24	0:0	6	i
op	46:26	0:0	6	<
water	46:28	0:0	6	p_sys
op	46:33	0:0	6	->
water	46:35	0:0	6	i_tracks
forexpr	46:45	46:46	5	i ++
water	46:45	0:0	6	i
op	46:46	0:0	6	++
stmts	47:12	53:12	5	
water	47:12	0:0	6	{
decl	48:16	48:31	6	bool	b_selected
call	50:16	51:66	6	es_out_Control
arg	50:32	50:44	7	p_demux->out
water	50:32	0:0	8	p_demux
op	50:39	0:0	8	->
water	50:41	0:0	8	out
arg	50:46	50:65	7	ES_OUT_GET_ES_STATE
water	50:46	0:0	8	ES_OUT_GET_ES_STATE
arg	51:32	51:52	7	p_sys->track[i].p_es
water	51:32	0:0	8	p_sys
op	51:37	0:0	8	->
water	51:39	0:0	8	track
op	51:44	0:0	8	[
water	51:45	0:0	8	i
op	51:46	0:0	8	]
op	51:47	0:0	8	.
water	51:48	0:0	8	p_es
arg	51:54	51:66	7	&b_selected
op	51:54	0:0	8	&
water	51:55	0:0	8	b_selected
water	51:67	0:0	6	;
if	52:16	52:38	6	(b_selected)
cond	52:20	52:20	7	b_selected
water	52:20	0:0	8	b_selected
stmts	52:33	52:38	7	
break	52:33	52:38	8	
water	53:12	0:0	6	}
if	54:12	57:12	4	(p_sys -> track [ i ] . i_current_subtitle >= p_sys -> track [ i ] . i_subtitles)
cond	54:16	54:70	5	p_sys -> track [ i ] . i_current_subtitle >= p_sys -> track [ i ] . i_subtitles
water	54:16	0:0	6	p_sys
op	54:21	0:0	6	->
water	54:23	0:0	6	track
op	54:28	0:0	6	[
water	54:29	0:0	6	i
op	54:30	0:0	6	]
op	54:31	0:0	6	.
water	54:32	0:0	6	i_current_subtitle
op	54:51	0:0	6	>=
water	54:54	0:0	6	p_sys
op	54:59	0:0	6	->
water	54:61	0:0	6	track
op	54:66	0:0	6	[
water	54:67	0:0	6	i
op	54:68	0:0	6	]
op	54:69	0:0	6	.
water	54:70	0:0	6	i_subtitles
stmts	55:12	57:12	5	
water	55:12	0:0	6	{
op	56:16	0:0	6	*
water	56:17	0:0	6	pf
op	56:20	0:0	6	=
water	56:22	0:0	6	1
op	56:23	0:0	6	.
water	56:24	0:0	6	0
water	56:25	0:0	6	;
water	57:12	0:0	6	}
else	58:12	62:12	4
stmts	58:17	62:12	5	
if	58:17	62:12	6	(p_sys -> track [ i ] . i_subtitles > 0)
cond	58:21	58:51	7	p_sys -> track [ i ] . i_subtitles > 0
water	58:21	0:0	8	p_sys
op	58:26	0:0	8	->
water	58:28	0:0	8	track
op	58:33	0:0	8	[
water	58:34	0:0	8	i
op	58:35	0:0	8	]
op	58:36	0:0	8	.
water	58:37	0:0	8	i_subtitles
op	58:49	0:0	8	>
water	58:51	0:0	8	0
stmts	59:12	62:12	7	
water	59:12	0:0	8	{
op	60:16	0:0	8	*
water	60:17	0:0	8	pf
op	60:20	0:0	8	=
water	60:22	0:0	8	(
water	60:23	0:0	8	double
water	60:29	0:0	8	)
water	60:30	0:0	8	p_sys
op	60:35	0:0	8	->
water	60:37	0:0	8	track
op	60:42	0:0	8	[
water	60:43	0:0	8	i
op	60:44	0:0	8	]
op	60:45	0:0	8	.
water	60:46	0:0	8	p_subtitles
op	60:57	0:0	8	[
water	60:58	0:0	8	p_sys
op	60:63	0:0	8	->
water	60:65	0:0	8	track
op	60:70	0:0	8	[
water	60:71	0:0	8	i
op	60:72	0:0	8	]
op	60:73	0:0	8	.
water	60:74	0:0	8	i_current_subtitle
op	60:92	0:0	8	]
op	60:93	0:0	8	.
water	60:94	0:0	8	i_start
op	60:102	0:0	8	/
water	61:22	0:0	8	(
water	61:23	0:0	8	double
water	61:29	0:0	8	)
water	61:30	0:0	8	p_sys
op	61:35	0:0	8	->
water	61:37	0:0	8	i_length
water	61:45	0:0	8	;
water	62:12	0:0	8	}
else	63:12	66:12	4
stmts	64:12	66:12	5	
water	64:12	0:0	6	{
op	65:16	0:0	6	*
water	65:17	0:0	6	pf
op	65:20	0:0	6	=
water	65:22	0:0	6	0
op	65:23	0:0	6	.
water	65:24	0:0	6	0
water	65:25	0:0	6	;
water	66:12	0:0	6	}
return	67:12	67:30	4	VLC_SUCCESS
water	67:19	0:0	5	VLC_SUCCESS
label	68:8	68:31	4	case DEMUX_SET_POSITION :
water	69:12	0:0	4	f
op	69:14	0:0	4	=
water	69:16	0:0	4	(
water	69:17	0:0	4	double
water	69:23	0:0	4	)
call	69:24	69:45	4	va_arg
arg	69:32	69:36	5	args
water	69:32	0:0	6	args
arg	69:38	69:45	5	double
water	69:38	0:0	6	double
water	69:46	0:0	4	;
water	70:12	0:0	4	i64
op	70:16	0:0	4	=
water	70:18	0:0	4	(
water	70:19	0:0	4	int64_t
water	70:26	0:0	4	)
water	70:28	0:0	4	f
op	70:30	0:0	4	*
water	70:32	0:0	4	p_sys
op	70:37	0:0	4	->
water	70:39	0:0	4	i_length
water	70:47	0:0	4	;
for	71:12	81:12	4	(i = 0 ;i < p_sys -> i_tracks;i ++)
forinit	71:17	71:22	5	i = 0 ;
water	71:17	0:0	6	i
op	71:19	0:0	6	=
water	71:21	0:0	6	0
water	71:22	0:0	6	;
cond	71:24	71:35	5	i < p_sys -> i_tracks
water	71:24	0:0	6	i
op	71:26	0:0	6	<
water	71:28	0:0	6	p_sys
op	71:33	0:0	6	->
water	71:35	0:0	6	i_tracks
forexpr	71:45	71:46	5	i ++
water	71:45	0:0	6	i
op	71:46	0:0	6	++
stmts	72:12	81:12	5	
water	72:12	0:0	6	{
water	73:16	0:0	6	p_sys
op	73:21	0:0	6	->
water	73:23	0:0	6	track
op	73:28	0:0	6	[
water	73:29	0:0	6	i
op	73:30	0:0	6	]
op	73:31	0:0	6	.
water	73:32	0:0	6	i_current_subtitle
op	73:51	0:0	6	=
water	73:53	0:0	6	0
water	73:54	0:0	6	;
while	74:16	78:16	6	(p_sys -> track [ i ] . i_current_subtitle < p_sys -> track [ i ] . i_subtitles && p_sys -> track [ i ] . p_subtitles [ p_sys -> track [ i ] . i_current_subtitle ] . i_start < i64)
cond	74:23	75:97	7	p_sys -> track [ i ] . i_current_subtitle < p_sys -> track [ i ] . i_subtitles && p_sys -> track [ i ] . p_subtitles [ p_sys -> track [ i ] . i_current_subtitle ] . i_start < i64
water	74:23	0:0	8	p_sys
op	74:28	0:0	8	->
water	74:30	0:0	8	track
op	74:35	0:0	8	[
water	74:36	0:0	8	i
op	74:37	0:0	8	]
op	74:38	0:0	8	.
water	74:39	0:0	8	i_current_subtitle
op	74:58	0:0	8	<
water	74:60	0:0	8	p_sys
op	74:65	0:0	8	->
water	74:67	0:0	8	track
op	74:72	0:0	8	[
water	74:73	0:0	8	i
op	74:74	0:0	8	]
op	74:75	0:0	8	.
water	74:76	0:0	8	i_subtitles
op	74:88	0:0	8	&&
water	75:23	0:0	8	p_sys
op	75:28	0:0	8	->
water	75:30	0:0	8	track
op	75:35	0:0	8	[
water	75:36	0:0	8	i
op	75:37	0:0	8	]
op	75:38	0:0	8	.
water	75:39	0:0	8	p_subtitles
op	75:50	0:0	8	[
water	75:51	0:0	8	p_sys
op	75:56	0:0	8	->
water	75:58	0:0	8	track
op	75:63	0:0	8	[
water	75:64	0:0	8	i
op	75:65	0:0	8	]
op	75:66	0:0	8	.
water	75:67	0:0	8	i_current_subtitle
op	75:85	0:0	8	]
op	75:86	0:0	8	.
water	75:87	0:0	8	i_start
op	75:95	0:0	8	<
water	75:97	0:0	8	i64
stmts	76:16	78:16	7	
water	76:16	0:0	8	{
water	77:20	0:0	8	p_sys
op	77:25	0:0	8	->
water	77:27	0:0	8	track
op	77:32	0:0	8	[
water	77:33	0:0	8	i
op	77:34	0:0	8	]
op	77:35	0:0	8	.
water	77:36	0:0	8	i_current_subtitle
op	77:54	0:0	8	++
water	77:56	0:0	8	;
water	78:16	0:0	8	}
if	79:16	80:39	6	(p_sys -> track [ i ] . i_current_subtitle >= p_sys -> track [ i ] . i_subtitles)
cond	79:20	79:74	7	p_sys -> track [ i ] . i_current_subtitle >= p_sys -> track [ i ] . i_subtitles
water	79:20	0:0	8	p_sys
op	79:25	0:0	8	->
water	79:27	0:0	8	track
op	79:32	0:0	8	[
water	79:33	0:0	8	i
op	79:34	0:0	8	]
op	79:35	0:0	8	.
water	79:36	0:0	8	i_current_subtitle
op	79:55	0:0	8	>=
water	79:58	0:0	8	p_sys
op	79:63	0:0	8	->
water	79:65	0:0	8	track
op	79:70	0:0	8	[
water	79:71	0:0	8	i
op	79:72	0:0	8	]
op	79:73	0:0	8	.
water	79:74	0:0	8	i_subtitles
stmts	80:20	80:39	7	
return	80:20	80:39	8	VLC_EGENERIC
water	80:27	0:0	9	VLC_EGENERIC
water	81:12	0:0	6	}
return	82:12	82:30	4	VLC_SUCCESS
water	82:19	0:0	5	VLC_SUCCESS
label	83:8	83:38	4	case DEMUX_SET_NEXT_DEMUX_TIME :
water	84:12	0:0	4	p_sys
op	84:17	0:0	4	->
water	84:19	0:0	4	i_next_demux_date
op	84:37	0:0	4	=
water	84:39	0:0	4	(
water	84:40	0:0	4	int64_t
water	84:47	0:0	4	)
call	84:48	84:70	4	va_arg
arg	84:56	84:60	5	args
water	84:56	0:0	6	args
arg	84:62	84:70	5	int64_t
water	84:62	0:0	6	int64_t
water	84:71	0:0	4	;
return	85:12	85:30	4	VLC_SUCCESS
water	85:19	0:0	5	VLC_SUCCESS
label	86:8	86:32	4	case DEMUX_GET_PTS_DELAY :
label	87:8	87:26	4	case DEMUX_GET_FPS :
label	88:8	88:27	4	case DEMUX_GET_META :
label	89:8	89:33	4	case DEMUX_GET_TITLE_INFO :
label	90:8	90:39	4	case DEMUX_HAS_UNSUPPORTED_META :
label	91:8	91:34	4	case DEMUX_GET_ATTACHMENTS :
label	92:8	92:29	4	case DEMUX_CAN_RECORD :
return	93:12	93:31	4	VLC_EGENERIC
water	93:19	0:0	5	VLC_EGENERIC
label	94:8	94:15	4	default :
call	95:12	95:67	4	msg_Warn
arg	95:22	95:29	5	p_demux
water	95:22	0:0	6	p_demux
arg	95:31	95:67	5	"unknown query in subtitle control"
water	95:31	0:0	6	"unknown query in subtitle control"
water	95:68	0:0	4	;
return	96:12	96:31	4	VLC_EGENERIC
water	96:19	0:0	5	VLC_EGENERIC
water	97:4	0:0	4	}
