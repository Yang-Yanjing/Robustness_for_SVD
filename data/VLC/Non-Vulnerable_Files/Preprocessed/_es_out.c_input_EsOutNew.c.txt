func	2:0	59:0	0	es_out_t *	input_EsOutNew
params	2:24	0:0	1	
param	2:26	2:49	2	input_thread_t *	p_input
param	2:51	2:62	2	int	i_rate
stmnts	0:0	58:14	1	
decl	4:4	4:48	2	es_out_t	*out
op	4:22	0:0	2	=
call	4:24	4:47	3	malloc
arg	4:32	4:47	4	sizeof(*out)
op	4:32	0:0	5	sizeof
water	4:38	0:0	5	(
op	4:40	0:0	5	*
water	4:41	0:0	5	out
water	4:45	0:0	5	)
if	5:4	6:19	2	(! out)
cond	5:8	5:9	3	! out
op	5:8	0:0	4	!
water	5:9	0:0	4	out
stmts	6:8	6:19	3	
return	6:8	6:19	4	NULL
water	6:15	0:0	5	NULL
decl	7:4	7:55	2	es_out_sys_t	*p_sys
op	7:24	0:0	2	=
call	7:26	7:54	3	calloc
arg	7:34	7:35	4	1
water	7:34	0:0	5	1
arg	7:37	7:54	4	sizeof(*p_sys)
op	7:37	0:0	5	sizeof
water	7:43	0:0	5	(
op	7:45	0:0	5	*
water	7:46	0:0	5	p_sys
water	7:52	0:0	5	)
if	8:4	12:4	2	(! p_sys)
cond	8:8	8:9	3	! p_sys
op	8:8	0:0	4	!
water	8:9	0:0	4	p_sys
stmts	9:4	12:4	3	
water	9:4	0:0	4	{
call	10:8	10:18	4	free
arg	10:14	10:18	5	out
water	10:14	0:0	6	out
water	10:19	0:0	4	;
return	11:8	11:19	4	NULL
water	11:15	0:0	5	NULL
water	12:4	0:0	4	}
water	13:4	0:0	2	out
op	13:7	0:0	2	->
water	13:9	0:0	2	pf_add
op	13:20	0:0	2	=
water	13:22	0:0	2	EsOutAdd
water	13:30	0:0	2	;
water	14:4	0:0	2	out
op	14:7	0:0	2	->
water	14:9	0:0	2	pf_send
op	14:20	0:0	2	=
water	14:22	0:0	2	EsOutSend
water	14:31	0:0	2	;
water	15:4	0:0	2	out
op	15:7	0:0	2	->
water	15:9	0:0	2	pf_del
op	15:20	0:0	2	=
water	15:22	0:0	2	EsOutDel
water	15:30	0:0	2	;
water	16:4	0:0	2	out
op	16:7	0:0	2	->
water	16:9	0:0	2	pf_control
op	16:20	0:0	2	=
water	16:22	0:0	2	EsOutControl
water	16:34	0:0	2	;
water	17:4	0:0	2	out
op	17:7	0:0	2	->
water	17:9	0:0	2	pf_destroy
op	17:20	0:0	2	=
water	17:22	0:0	2	EsOutDelete
water	17:33	0:0	2	;
water	18:4	0:0	2	out
op	18:7	0:0	2	->
water	18:9	0:0	2	p_sys
op	18:20	0:0	2	=
water	18:22	0:0	2	p_sys
water	18:27	0:0	2	;
call	19:4	19:43	2	vlc_mutex_init_recursive
arg	19:30	19:43	3	&p_sys->lock
op	19:30	0:0	4	&
water	19:31	0:0	4	p_sys
op	19:36	0:0	4	->
water	19:38	0:0	4	lock
water	19:44	0:0	2	;
water	20:4	0:0	2	p_sys
op	20:9	0:0	2	->
water	20:11	0:0	2	p_input
op	20:19	0:0	2	=
water	20:21	0:0	2	p_input
water	20:28	0:0	2	;
water	21:4	0:0	2	p_sys
op	21:9	0:0	2	->
water	21:11	0:0	2	b_active
op	21:20	0:0	2	=
water	21:22	0:0	2	false
water	21:27	0:0	2	;
water	22:4	0:0	2	p_sys
op	22:9	0:0	2	->
water	22:11	0:0	2	i_mode
op	22:20	0:0	2	=
water	22:22	0:0	2	ES_OUT_MODE_NONE
water	22:38	0:0	2	;
call	23:4	23:41	2	TAB_INIT
arg	23:14	23:27	3	p_sys->i_pgrm
water	23:14	0:0	4	p_sys
op	23:19	0:0	4	->
water	23:21	0:0	4	i_pgrm
arg	23:29	23:41	3	p_sys->pgrm
water	23:29	0:0	4	p_sys
op	23:34	0:0	4	->
water	23:36	0:0	4	pgrm
water	23:42	0:0	2	;
call	24:4	24:37	2	TAB_INIT
arg	24:14	24:25	3	p_sys->i_es
water	24:14	0:0	4	p_sys
op	24:19	0:0	4	->
water	24:21	0:0	4	i_es
arg	24:27	24:37	3	p_sys->es
water	24:27	0:0	4	p_sys
op	24:32	0:0	4	->
water	24:34	0:0	4	es
water	24:38	0:0	2	;
water	26:4	0:0	2	p_sys
op	26:9	0:0	2	->
water	26:11	0:0	2	i_group_id
op	26:22	0:0	2	=
call	26:24	26:59	2	var_GetInteger
arg	26:40	26:47	3	p_input
water	26:40	0:0	4	p_input
arg	26:49	26:59	3	"program"
water	26:49	0:0	4	"program"
water	26:60	0:0	2	;
water	27:4	0:0	2	p_sys
op	27:9	0:0	2	->
water	27:11	0:0	2	i_audio_last
op	27:24	0:0	2	=
call	27:26	27:65	2	var_GetInteger
arg	27:42	27:49	3	p_input
water	27:42	0:0	4	p_input
arg	27:51	27:65	3	"audio-track"
water	27:51	0:0	4	"audio-track"
water	27:66	0:0	2	;
water	28:4	0:0	2	p_sys
op	28:9	0:0	2	->
water	28:11	0:0	2	i_sub_last
op	28:22	0:0	2	=
call	28:24	28:61	2	var_GetInteger
arg	28:40	28:47	3	p_input
water	28:40	0:0	4	p_input
arg	28:49	28:61	3	"sub-track"
water	28:49	0:0	4	"sub-track"
water	28:62	0:0	2	;
water	29:4	0:0	2	p_sys
op	29:9	0:0	2	->
water	29:11	0:0	2	i_default_sub_id
op	29:30	0:0	2	=
op	29:32	0:0	2	-
water	29:33	0:0	2	1
water	29:34	0:0	2	;
if	30:4	51:4	2	(! p_input -> b_preparsing)
cond	30:8	30:18	3	! p_input -> b_preparsing
op	30:8	0:0	4	!
water	30:9	0:0	4	p_input
op	30:16	0:0	4	->
water	30:18	0:0	4	b_preparsing
stmts	31:4	51:4	3	
water	31:4	0:0	4	{
decl	32:8	32:24	4	char	*psz_string
water	33:8	0:0	4	psz_string
op	33:19	0:0	4	=
call	33:21	33:62	4	var_GetString
arg	33:36	33:43	5	p_input
water	33:36	0:0	6	p_input
arg	33:45	33:62	5	"audio-language"
water	33:45	0:0	6	"audio-language"
water	33:63	0:0	4	;
water	34:8	0:0	4	p_sys
op	34:13	0:0	4	->
water	34:15	0:0	4	ppsz_audio_language
op	34:35	0:0	4	=
call	34:37	34:69	4	LanguageSplit
arg	34:52	34:62	5	psz_string
water	34:52	0:0	6	psz_string
arg	34:64	34:69	5	true
water	34:64	0:0	6	true
water	34:70	0:0	4	;
if	35:8	40:8	4	(p_sys -> ppsz_audio_language)
cond	35:12	35:19	5	p_sys -> ppsz_audio_language
water	35:12	0:0	6	p_sys
op	35:17	0:0	6	->
water	35:19	0:0	6	ppsz_audio_language
stmts	36:8	40:8	5	
water	36:8	0:0	6	{
for	37:12	39:59	6	( int i = 0 ;p_sys -> ppsz_audio_language [ i ];i ++)
forinit	0:0	37:26	7	 int i = 0 ;
decl	37:17	37:26	8	int	i
op	37:23	0:0	8	=
water	37:25	0:0	8	0
cond	37:28	37:56	7	p_sys -> ppsz_audio_language [ i ]
water	37:28	0:0	8	p_sys
op	37:33	0:0	8	->
water	37:35	0:0	8	ppsz_audio_language
op	37:54	0:0	8	[
water	37:55	0:0	8	i
op	37:56	0:0	8	]
forexpr	37:59	37:60	7	i ++
water	37:59	0:0	8	i
op	37:60	0:0	8	++
stmts	38:16	39:59	7	
call	38:16	39:58	8	msg_Dbg
arg	38:25	38:32	9	p_input
water	38:25	0:0	10	p_input
arg	38:34	38:66	9	"selected audio language[%d] %s"
water	38:34	0:0	10	"selected audio language[%d] %s"
arg	39:25	39:26	9	i
water	39:25	0:0	10	i
arg	39:28	39:58	9	p_sys->ppsz_audio_language[i]
water	39:28	0:0	10	p_sys
op	39:33	0:0	10	->
water	39:35	0:0	10	ppsz_audio_language
op	39:54	0:0	10	[
water	39:55	0:0	10	i
op	39:56	0:0	10	]
water	39:59	0:0	8	;
water	40:8	0:0	6	}
call	41:8	41:25	4	free
arg	41:14	41:25	5	psz_string
water	41:14	0:0	6	psz_string
water	41:26	0:0	4	;
water	42:8	0:0	4	psz_string
op	42:19	0:0	4	=
call	42:21	42:60	4	var_GetString
arg	42:36	42:43	5	p_input
water	42:36	0:0	6	p_input
arg	42:45	42:60	5	"sub-language"
water	42:45	0:0	6	"sub-language"
water	42:61	0:0	4	;
water	43:8	0:0	4	p_sys
op	43:13	0:0	4	->
water	43:15	0:0	4	ppsz_sub_language
op	43:33	0:0	4	=
call	43:35	43:68	4	LanguageSplit
arg	43:50	43:60	5	psz_string
water	43:50	0:0	6	psz_string
arg	43:62	43:68	5	false
water	43:62	0:0	6	false
water	43:69	0:0	4	;
if	44:8	49:8	4	(p_sys -> ppsz_sub_language)
cond	44:12	44:19	5	p_sys -> ppsz_sub_language
water	44:12	0:0	6	p_sys
op	44:17	0:0	6	->
water	44:19	0:0	6	ppsz_sub_language
stmts	45:8	49:8	5	
water	45:8	0:0	6	{
for	46:12	48:57	6	( int i = 0 ;p_sys -> ppsz_sub_language [ i ];i ++)
forinit	0:0	46:26	7	 int i = 0 ;
decl	46:17	46:26	8	int	i
op	46:23	0:0	8	=
water	46:25	0:0	8	0
cond	46:28	46:54	7	p_sys -> ppsz_sub_language [ i ]
water	46:28	0:0	8	p_sys
op	46:33	0:0	8	->
water	46:35	0:0	8	ppsz_sub_language
op	46:52	0:0	8	[
water	46:53	0:0	8	i
op	46:54	0:0	8	]
forexpr	46:57	46:58	7	i ++
water	46:57	0:0	8	i
op	46:58	0:0	8	++
stmts	47:16	48:57	7	
call	47:16	48:56	8	msg_Dbg
arg	47:25	47:32	9	p_input
water	47:25	0:0	10	p_input
arg	47:34	47:69	9	"selected subtitle language[%d] %s"
water	47:34	0:0	10	"selected subtitle language[%d] %s"
arg	48:25	48:26	9	i
water	48:25	0:0	10	i
arg	48:28	48:56	9	p_sys->ppsz_sub_language[i]
water	48:28	0:0	10	p_sys
op	48:33	0:0	10	->
water	48:35	0:0	10	ppsz_sub_language
op	48:52	0:0	10	[
water	48:53	0:0	10	i
op	48:54	0:0	10	]
water	48:57	0:0	8	;
water	49:8	0:0	6	}
call	50:8	50:25	4	free
arg	50:14	50:25	5	psz_string
water	50:14	0:0	6	psz_string
water	50:26	0:0	4	;
water	51:4	0:0	4	}
water	52:4	0:0	2	p_sys
op	52:9	0:0	2	->
water	52:11	0:0	2	i_audio_id
op	52:22	0:0	2	=
call	52:24	52:66	2	var_GetInteger
arg	52:40	52:47	3	p_input
water	52:40	0:0	4	p_input
arg	52:49	52:66	3	"audio-track-id"
water	52:49	0:0	4	"audio-track-id"
water	52:67	0:0	2	;
water	53:4	0:0	2	p_sys
op	53:9	0:0	2	->
water	53:11	0:0	2	i_sub_id
op	53:20	0:0	2	=
call	53:22	53:62	2	var_GetInteger
arg	53:38	53:45	3	p_input
water	53:38	0:0	4	p_input
arg	53:47	53:62	3	"sub-track-id"
water	53:47	0:0	4	"sub-track-id"
water	53:63	0:0	2	;
water	54:4	0:0	2	p_sys
op	54:9	0:0	2	->
water	54:11	0:0	2	i_pause_date
op	54:24	0:0	2	=
op	54:26	0:0	2	-
water	54:27	0:0	2	1
water	54:28	0:0	2	;
water	55:4	0:0	2	p_sys
op	55:9	0:0	2	->
water	55:11	0:0	2	i_rate
op	55:18	0:0	2	=
water	55:20	0:0	2	i_rate
water	55:26	0:0	2	;
water	56:4	0:0	2	p_sys
op	56:9	0:0	2	->
water	56:11	0:0	2	b_buffering
op	56:23	0:0	2	=
water	56:25	0:0	2	true
water	56:29	0:0	2	;
water	57:4	0:0	2	p_sys
op	57:9	0:0	2	->
water	57:11	0:0	2	i_preroll_end
op	57:25	0:0	2	=
op	57:27	0:0	2	-
water	57:28	0:0	2	1
water	57:29	0:0	2	;
return	58:4	58:14	2	out
water	58:11	0:0	3	out
