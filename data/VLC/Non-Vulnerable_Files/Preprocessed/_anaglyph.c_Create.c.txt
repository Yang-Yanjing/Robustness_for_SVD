func	2:0	69:0	0	static int	Create
params	2:17	0:0	1	
param	2:18	2:38	2	vlc_object_t *	p_this
stmnts	0:0	68:22	1	
decl	4:4	4:43	2	filter_t	*p_filter
op	4:23	0:0	2	=
water	4:25	0:0	2	(
water	4:26	0:0	2	filter_t
op	4:35	0:0	2	*
water	4:36	0:0	2	)
water	4:37	0:0	2	p_this
switch	5:4	15:4	2	(p_filter -> fmt_in . video . i_chroma)
cond	5:12	5:35	3	p_filter -> fmt_in . video . i_chroma
water	5:12	0:0	4	p_filter
op	5:20	0:0	4	->
water	5:22	0:0	4	fmt_in
op	5:28	0:0	4	.
water	5:29	0:0	4	video
op	5:34	0:0	4	.
water	5:35	0:0	4	i_chroma
stmts	6:4	15:4	3	
water	6:4	0:0	4	{
label	7:8	7:27	4	case VLC_CODEC_I420 :
label	8:8	8:27	4	case VLC_CODEC_J420 :
label	9:8	9:27	4	case VLC_CODEC_YV12 :
break	10:12	10:17	4	
label	11:8	11:15	4	default :
call	12:12	13:61	4	msg_Err
arg	12:20	12:28	5	p_filter
water	12:20	0:0	6	p_filter
arg	12:30	12:64	5	"Unsupported input chroma (%4.4s)"
water	12:30	0:0	6	"Unsupported input chroma (%4.4s)"
arg	13:20	13:61	5	(char*)&(p_filter->fmt_in.video.i_chroma)
water	13:20	0:0	6	(
water	13:21	0:0	6	char
op	13:25	0:0	6	*
water	13:26	0:0	6	)
op	13:27	0:0	6	&
water	13:28	0:0	6	(
water	13:29	0:0	6	p_filter
op	13:37	0:0	6	->
water	13:39	0:0	6	fmt_in
op	13:45	0:0	6	.
water	13:46	0:0	6	video
op	13:51	0:0	6	.
water	13:52	0:0	6	i_chroma
water	13:60	0:0	6	)
water	13:62	0:0	4	;
return	14:12	14:31	4	VLC_EGENERIC
water	14:19	0:0	5	VLC_EGENERIC
water	15:4	0:0	4	}
water	16:4	0:0	2	p_filter
op	16:12	0:0	2	->
water	16:14	0:0	2	p_sys
op	16:20	0:0	2	=
call	16:22	16:49	2	malloc
arg	16:29	16:49	3	sizeof(filter_sys_t)
op	16:29	0:0	4	sizeof
water	16:35	0:0	4	(
water	16:36	0:0	4	filter_sys_t
water	16:48	0:0	4	)
water	16:50	0:0	2	;
if	17:4	18:25	2	(! p_filter -> p_sys)
cond	17:8	17:19	3	! p_filter -> p_sys
op	17:8	0:0	4	!
water	17:9	0:0	4	p_filter
op	17:17	0:0	4	->
water	17:19	0:0	4	p_sys
stmts	18:8	18:25	3	
return	18:8	18:25	4	VLC_ENOMEM
water	18:15	0:0	5	VLC_ENOMEM
decl	19:4	19:41	2	filter_sys_t	*p_sys
op	19:24	0:0	2	=
water	19:26	0:0	2	p_filter
op	19:34	0:0	2	->
water	19:36	0:0	2	p_sys
call	20:4	21:37	2	config_ChainParse
arg	20:22	20:30	3	p_filter
water	20:22	0:0	4	p_filter
arg	20:32	20:45	3	FILTER_PREFIX
water	20:32	0:0	4	FILTER_PREFIX
arg	20:47	20:66	3	ppsz_filter_options
water	20:47	0:0	4	ppsz_filter_options
arg	21:22	21:37	3	p_filter->p_cfg
water	21:22	0:0	4	p_filter
op	21:30	0:0	4	->
water	21:32	0:0	4	p_cfg
water	21:38	0:0	2	;
decl	22:4	23:73	2	char	*psz_scheme
op	22:21	0:0	2	=
call	22:23	23:72	3	var_CreateGetStringCommand
arg	22:50	22:58	4	p_filter
water	22:50	0:0	5	p_filter
arg	23:50	23:72	4	FILTER_PREFIX"scheme"
water	23:50	0:0	5	FILTER_PREFIX
water	23:64	0:0	5	"scheme"
decl	24:4	24:35	2	enum scheme_e	scheme
op	24:25	0:0	2	=
water	24:27	0:0	2	red_cyan
if	25:4	39:4	2	(psz_scheme)
cond	25:8	25:8	3	psz_scheme
water	25:8	0:0	4	psz_scheme
stmts	26:4	39:4	3	
water	26:4	0:0	4	{
if	27:8	28:30	4	(!strcmp (psz_scheme ,"red-green" ))
cond	27:12	27:43	5	!strcmp (psz_scheme ,"red-green" )
op	27:12	0:0	6	!
call	27:13	27:43	6	strcmp
arg	27:20	27:30	7	psz_scheme
water	27:20	0:0	8	psz_scheme
arg	27:32	27:43	7	"red-green"
water	27:32	0:0	8	"red-green"
stmts	28:12	28:30	5	
water	28:12	0:0	6	scheme
op	28:19	0:0	6	=
water	28:21	0:0	6	red_green
water	28:30	0:0	6	;
else	29:8	30:29	4
stmts	29:13	30:29	5	
if	29:13	30:29	6	(!strcmp (psz_scheme ,"red-blue" ))
cond	29:17	29:47	7	!strcmp (psz_scheme ,"red-blue" )
op	29:17	0:0	8	!
call	29:18	29:47	8	strcmp
arg	29:25	29:35	9	psz_scheme
water	29:25	0:0	10	psz_scheme
arg	29:37	29:47	9	"red-blue"
water	29:37	0:0	10	"red-blue"
stmts	30:12	30:29	7	
water	30:12	0:0	8	scheme
op	30:19	0:0	8	=
water	30:21	0:0	8	red_blue
water	30:29	0:0	8	;
else	31:8	32:29	4
stmts	31:13	32:29	5	
if	31:13	32:29	6	(!strcmp (psz_scheme ,"red-cyan" ))
cond	31:17	31:47	7	!strcmp (psz_scheme ,"red-cyan" )
op	31:17	0:0	8	!
call	31:18	31:47	8	strcmp
arg	31:25	31:35	9	psz_scheme
water	31:25	0:0	10	psz_scheme
arg	31:37	31:47	9	"red-cyan"
water	31:37	0:0	10	"red-cyan"
stmts	32:12	32:29	7	
water	32:12	0:0	8	scheme
op	32:19	0:0	8	=
water	32:21	0:0	8	red_cyan
water	32:29	0:0	8	;
else	33:8	34:31	4
stmts	33:13	34:31	5	
if	33:13	34:31	6	(!strcmp (psz_scheme ,"trioscopic" ))
cond	33:17	33:49	7	!strcmp (psz_scheme ,"trioscopic" )
op	33:17	0:0	8	!
call	33:18	33:49	8	strcmp
arg	33:25	33:35	9	psz_scheme
water	33:25	0:0	10	psz_scheme
arg	33:37	33:49	9	"trioscopic"
water	33:37	0:0	10	"trioscopic"
stmts	34:12	34:31	7	
water	34:12	0:0	8	scheme
op	34:19	0:0	8	=
water	34:21	0:0	8	trioscopic
water	34:31	0:0	8	;
else	35:8	36:33	4
stmts	35:13	36:33	5	
if	35:13	36:33	6	(!strcmp (psz_scheme ,"magenta-cyan" ))
cond	35:17	35:51	7	!strcmp (psz_scheme ,"magenta-cyan" )
op	35:17	0:0	8	!
call	35:18	35:51	8	strcmp
arg	35:25	35:35	9	psz_scheme
water	35:25	0:0	10	psz_scheme
arg	35:37	35:51	9	"magenta-cyan"
water	35:37	0:0	10	"magenta-cyan"
stmts	36:12	36:33	7	
water	36:12	0:0	8	scheme
op	36:19	0:0	8	=
water	36:21	0:0	8	magenta_cyan
water	36:33	0:0	8	;
else	37:8	38:79	4
stmts	38:12	38:79	5	
call	38:12	38:78	6	msg_Err
arg	38:20	38:28	7	p_filter
water	38:20	0:0	8	p_filter
arg	38:30	38:66	7	"Unknown anaglyph color scheme '%s'"
water	38:30	0:0	8	"Unknown anaglyph color scheme '%s'"
arg	38:68	38:78	7	psz_scheme
water	38:68	0:0	8	psz_scheme
water	38:79	0:0	6	;
water	39:4	0:0	4	}
call	40:4	40:19	2	free
arg	40:9	40:19	3	psz_scheme
water	40:9	0:0	4	psz_scheme
water	40:20	0:0	2	;
switch	41:4	66:4	2	(scheme)
cond	41:12	41:12	3	scheme
water	41:12	0:0	4	scheme
stmts	42:4	66:4	3	
water	42:4	0:0	4	{
label	43:8	43:22	4	case red_green :
water	44:12	0:0	4	p_sys
op	44:17	0:0	4	->
water	44:19	0:0	4	left
op	44:24	0:0	4	=
water	44:26	0:0	4	0
water	44:27	0:0	4	xff0000
water	44:34	0:0	4	;
water	45:12	0:0	4	p_sys
op	45:17	0:0	4	->
water	45:19	0:0	4	right
op	45:25	0:0	4	=
water	45:27	0:0	4	0
water	45:28	0:0	4	x00ff00
water	45:35	0:0	4	;
break	46:12	46:17	4	
label	47:8	47:21	4	case red_blue :
water	48:12	0:0	4	p_sys
op	48:17	0:0	4	->
water	48:19	0:0	4	left
op	48:24	0:0	4	=
water	48:26	0:0	4	0
water	48:27	0:0	4	xff0000
water	48:34	0:0	4	;
water	49:12	0:0	4	p_sys
op	49:17	0:0	4	->
water	49:19	0:0	4	right
op	49:25	0:0	4	=
water	49:27	0:0	4	0
water	49:28	0:0	4	x0000ff
water	49:35	0:0	4	;
break	50:12	50:17	4	
label	51:8	51:21	4	case red_cyan :
water	52:12	0:0	4	p_sys
op	52:17	0:0	4	->
water	52:19	0:0	4	left
op	52:24	0:0	4	=
water	52:26	0:0	4	0
water	52:27	0:0	4	xff0000
water	52:34	0:0	4	;
water	53:12	0:0	4	p_sys
op	53:17	0:0	4	->
water	53:19	0:0	4	right
op	53:25	0:0	4	=
water	53:27	0:0	4	0
water	53:28	0:0	4	x00ffff
water	53:35	0:0	4	;
break	54:12	54:17	4	
label	55:8	55:23	4	case trioscopic :
water	56:12	0:0	4	p_sys
op	56:17	0:0	4	->
water	56:19	0:0	4	left
op	56:24	0:0	4	=
water	56:26	0:0	4	0
water	56:27	0:0	4	x00ff00
water	56:34	0:0	4	;
water	57:12	0:0	4	p_sys
op	57:17	0:0	4	->
water	57:19	0:0	4	right
op	57:25	0:0	4	=
water	57:27	0:0	4	0
water	57:28	0:0	4	xff00ff
water	57:35	0:0	4	;
break	58:12	58:17	4	
label	59:8	59:25	4	case magenta_cyan :
water	60:12	0:0	4	p_sys
op	60:17	0:0	4	->
water	60:19	0:0	4	left
op	60:24	0:0	4	=
water	60:26	0:0	4	0
water	60:27	0:0	4	xff00ff
water	60:34	0:0	4	;
water	61:12	0:0	4	p_sys
op	61:17	0:0	4	->
water	61:19	0:0	4	right
op	61:25	0:0	4	=
water	61:27	0:0	4	0
water	61:28	0:0	4	x00ffff
water	61:35	0:0	4	;
break	62:12	62:17	4	
label	63:8	63:20	4	case unknown :
call	64:12	64:36	4	msg_Err
arg	64:20	64:28	5	p_filter
water	64:20	0:0	6	p_filter
arg	64:30	64:36	5	"Oops"
water	64:30	0:0	6	"Oops"
water	64:37	0:0	4	;
break	65:12	65:17	4	
water	66:4	0:0	4	}
water	67:4	0:0	2	p_filter
op	67:12	0:0	2	->
water	67:14	0:0	2	pf_video_filter
op	67:30	0:0	2	=
water	67:32	0:0	2	Filter
water	67:38	0:0	2	;
return	68:4	68:22	2	VLC_SUCCESS
water	68:11	0:0	3	VLC_SUCCESS
