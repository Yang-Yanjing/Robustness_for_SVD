func	2:0	260:0	0	static block_t *	DecodeBlock
params	2:27	0:0	1	
param	2:29	2:45	2	decoder_t *	p_dec
param	2:47	2:66	2	block_t * *	pp_block
stmnts	0:0	259:15	1	
decl	4:4	4:39	2	decoder_sys_t	*p_sys
op	4:25	0:0	2	=
water	4:27	0:0	2	p_dec
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:38	2	uint8_t	p_header[MAD_BUFFER_GUARD]
decl	6:4	6:21	2	uint32_t	i_header
decl	7:4	7:18	2	uint8_t	*p_buf
decl	8:4	8:25	2	block_t	*p_out_buffer
decl	9:4	9:50	2	block_t	*p_block
op	9:21	0:0	2	=
water	9:23	0:0	2	pp_block
water	9:32	0:0	2	?
op	9:34	0:0	2	*
water	9:35	0:0	2	pp_block
water	9:44	0:0	2	:
water	9:46	0:0	2	NULL
if	10:4	31:4	2	(p_block)
cond	10:8	10:8	3	p_block
water	10:8	0:0	4	p_block
stmts	10:17	31:4	3	
water	10:17	0:0	4	{
if	11:8	22:8	4	(p_block -> i_flags & ( BLOCK_FLAG_DISCONTINUITY | BLOCK_FLAG_CORRUPTED ))
cond	11:12	11:75	5	p_block -> i_flags & ( BLOCK_FLAG_DISCONTINUITY | BLOCK_FLAG_CORRUPTED )
water	11:12	0:0	6	p_block
op	11:19	0:0	6	->
water	11:21	0:0	6	i_flags
op	11:28	0:0	6	&
water	11:29	0:0	6	(
water	11:30	0:0	6	BLOCK_FLAG_DISCONTINUITY
op	11:54	0:0	6	|
water	11:55	0:0	6	BLOCK_FLAG_CORRUPTED
water	11:75	0:0	6	)
stmts	12:8	22:8	5	
water	12:8	0:0	6	{
if	13:12	17:12	6	(p_block -> i_flags & BLOCK_FLAG_CORRUPTED)
cond	13:16	13:33	7	p_block -> i_flags & BLOCK_FLAG_CORRUPTED
water	13:16	0:0	8	p_block
op	13:23	0:0	8	->
water	13:25	0:0	8	i_flags
op	13:32	0:0	8	&
water	13:33	0:0	8	BLOCK_FLAG_CORRUPTED
stmts	14:12	17:12	7	
water	14:12	0:0	8	{
water	15:16	0:0	8	p_sys
op	15:21	0:0	8	->
water	15:23	0:0	8	i_state
op	15:31	0:0	8	=
water	15:33	0:0	8	STATE_NOSYNC
water	15:45	0:0	8	;
call	16:16	16:58	8	block_BytestreamEmpty
arg	16:39	16:58	9	&p_sys->bytestream
op	16:39	0:0	10	&
water	16:40	0:0	10	p_sys
op	16:45	0:0	10	->
water	16:47	0:0	10	bytestream
water	16:59	0:0	8	;
water	17:12	0:0	8	}
call	18:12	18:42	6	date_Set
arg	18:22	18:38	7	&p_sys->end_date
op	18:22	0:0	8	&
water	18:23	0:0	8	p_sys
op	18:28	0:0	8	->
water	18:30	0:0	8	end_date
arg	18:40	18:42	7	0
water	18:40	0:0	8	0
water	18:43	0:0	6	;
call	19:12	19:35	6	block_Release
arg	19:27	19:35	7	p_block
water	19:27	0:0	8	p_block
water	19:36	0:0	6	;
water	20:12	0:0	6	p_sys
op	20:17	0:0	6	->
water	20:19	0:0	6	b_discontinuity
op	20:35	0:0	6	=
water	20:37	0:0	6	true
water	20:41	0:0	6	;
return	21:12	21:23	6	NULL
water	21:19	0:0	7	NULL
water	22:8	0:0	6	}
if	23:8	29:8	4	(!date_Get (& p_sys -> end_date ) && p_block -> i_pts <= VLC_TS_INVALID)
cond	23:12	23:63	5	!date_Get (& p_sys -> end_date ) && p_block -> i_pts <= VLC_TS_INVALID
op	23:12	0:0	6	!
call	23:13	23:40	6	date_Get
arg	23:23	23:40	7	&p_sys->end_date
op	23:23	0:0	8	&
water	23:24	0:0	8	p_sys
op	23:29	0:0	8	->
water	23:31	0:0	8	end_date
op	23:42	0:0	6	&&
water	23:45	0:0	6	p_block
op	23:52	0:0	6	->
water	23:54	0:0	6	i_pts
op	23:60	0:0	6	<=
water	23:63	0:0	6	VLC_TS_INVALID
stmts	24:8	29:8	5	
water	24:8	0:0	6	{
call	26:12	26:46	6	msg_Dbg
arg	26:21	26:26	7	p_dec
water	26:21	0:0	8	p_dec
arg	26:28	26:46	7	"waiting for PTS"
water	26:28	0:0	8	"waiting for PTS"
water	26:47	0:0	6	;
call	27:12	27:35	6	block_Release
arg	27:27	27:35	7	p_block
water	27:27	0:0	8	p_block
water	27:36	0:0	6	;
return	28:12	28:23	6	NULL
water	28:19	0:0	7	NULL
water	29:8	0:0	6	}
call	30:8	30:58	4	block_BytestreamPush
arg	30:30	30:48	5	&p_sys->bytestream
op	30:30	0:0	6	&
water	30:31	0:0	6	p_sys
op	30:36	0:0	6	->
water	30:38	0:0	6	bytestream
arg	30:50	30:58	5	p_block
water	30:50	0:0	6	p_block
water	30:59	0:0	4	;
water	31:4	0:0	4	}
else	31:6	32:40	2
stmts	32:8	32:40	3	
water	32:8	0:0	4	p_sys
op	32:13	0:0	4	->
water	32:15	0:0	4	i_state
op	32:23	0:0	4	=
water	32:25	0:0	4	STATE_SEND_DATA
water	32:40	0:0	4	;
while	33:4	258:4	2	(1)
cond	33:11	33:11	3	1
water	33:11	0:0	4	1
stmts	34:4	258:4	3	
water	34:4	0:0	4	{
switch	35:8	257:8	4	(p_sys -> i_state)
cond	35:16	35:23	5	p_sys -> i_state
water	35:16	0:0	6	p_sys
op	35:21	0:0	6	->
water	35:23	0:0	6	i_state
stmts	36:8	257:8	5	
water	36:8	0:0	6	{
label	37:8	37:25	6	case STATE_NOSYNC :
while	38:12	48:12	6	(block_PeekBytes (& p_sys -> bytestream ,p_header ,2 ) == VLC_SUCCESS)
cond	38:19	39:22	7	block_PeekBytes (& p_sys -> bytestream ,p_header ,2 ) == VLC_SUCCESS
call	38:19	38:68	8	block_PeekBytes
arg	38:36	38:54	9	&p_sys->bytestream
op	38:36	0:0	10	&
water	38:37	0:0	10	p_sys
op	38:42	0:0	10	->
water	38:44	0:0	10	bytestream
arg	38:56	38:64	9	p_header
water	38:56	0:0	10	p_header
arg	38:66	38:68	9	2
water	38:66	0:0	10	2
op	39:19	0:0	8	==
water	39:22	0:0	8	VLC_SUCCESS
stmts	40:12	48:12	7	
water	40:12	0:0	8	{
if	42:16	46:16	8	(p_header [ 0 ] == 0 xff && ( p_header [ 1 ] & 0 xe0 ) == 0 xe0)
cond	42:20	42:68	9	p_header [ 0 ] == 0 xff && ( p_header [ 1 ] & 0 xe0 ) == 0 xe0
water	42:20	0:0	10	p_header
op	42:28	0:0	10	[
water	42:29	0:0	10	0
op	42:30	0:0	10	]
op	42:32	0:0	10	==
water	42:35	0:0	10	0
water	42:36	0:0	10	xff
op	42:40	0:0	10	&&
water	42:43	0:0	10	(
water	42:44	0:0	10	p_header
op	42:52	0:0	10	[
water	42:53	0:0	10	1
op	42:54	0:0	10	]
op	42:56	0:0	10	&
water	42:58	0:0	10	0
water	42:59	0:0	10	xe0
water	42:62	0:0	10	)
op	42:64	0:0	10	==
water	42:67	0:0	10	0
water	42:68	0:0	10	xe0
stmts	43:16	46:16	9	
water	43:16	0:0	10	{
water	44:20	0:0	10	p_sys
op	44:25	0:0	10	->
water	44:27	0:0	10	i_state
op	44:35	0:0	10	=
water	44:37	0:0	10	STATE_SYNC
water	44:47	0:0	10	;
break	45:20	45:25	10	
water	46:16	0:0	10	}
call	47:16	47:51	8	block_SkipByte
arg	47:32	47:51	9	&p_sys->bytestream
op	47:32	0:0	10	&
water	47:33	0:0	10	p_sys
op	47:38	0:0	10	->
water	47:40	0:0	10	bytestream
water	47:52	0:0	8	;
water	48:12	0:0	8	}
if	49:12	54:12	6	(p_sys -> i_state != STATE_SYNC)
cond	49:16	49:34	7	p_sys -> i_state != STATE_SYNC
water	49:16	0:0	8	p_sys
op	49:21	0:0	8	->
water	49:23	0:0	8	i_state
op	49:31	0:0	8	!=
water	49:34	0:0	8	STATE_SYNC
stmts	50:12	54:12	7	
water	50:12	0:0	8	{
call	51:16	51:58	8	block_BytestreamFlush
arg	51:39	51:58	9	&p_sys->bytestream
op	51:39	0:0	10	&
water	51:40	0:0	10	p_sys
op	51:45	0:0	10	->
water	51:47	0:0	10	bytestream
water	51:59	0:0	8	;
return	53:16	53:27	8	NULL
water	53:23	0:0	9	NULL
water	54:12	0:0	8	}
label	55:8	55:23	6	case STATE_SYNC :
water	57:12	0:0	6	p_sys
op	57:17	0:0	6	->
water	57:19	0:0	6	i_pts
op	57:25	0:0	6	=
water	57:27	0:0	6	p_sys
op	57:32	0:0	6	->
water	57:34	0:0	6	bytestream
op	57:44	0:0	6	.
water	57:45	0:0	6	p_block
op	57:52	0:0	6	->
water	57:54	0:0	6	i_pts
water	57:59	0:0	6	;
if	58:12	62:12	6	(p_sys -> i_pts > VLC_TS_INVALID && p_sys -> i_pts >date_Get (& p_sys -> end_date ))
cond	58:16	59:58	7	p_sys -> i_pts > VLC_TS_INVALID && p_sys -> i_pts >date_Get (& p_sys -> end_date )
water	58:16	0:0	8	p_sys
op	58:21	0:0	8	->
water	58:23	0:0	8	i_pts
op	58:29	0:0	8	>
water	58:31	0:0	8	VLC_TS_INVALID
op	58:46	0:0	8	&&
water	59:16	0:0	8	p_sys
op	59:21	0:0	8	->
water	59:23	0:0	8	i_pts
op	59:29	0:0	8	>
call	59:31	59:58	8	date_Get
arg	59:41	59:58	9	&p_sys->end_date
op	59:41	0:0	10	&
water	59:42	0:0	10	p_sys
op	59:47	0:0	10	->
water	59:49	0:0	10	end_date
stmts	60:12	62:12	7	
water	60:12	0:0	8	{
call	61:16	61:57	8	date_Set
arg	61:26	61:42	9	&p_sys->end_date
op	61:26	0:0	10	&
water	61:27	0:0	10	p_sys
op	61:32	0:0	10	->
water	61:34	0:0	10	end_date
arg	61:44	61:57	9	p_sys->i_pts
water	61:44	0:0	10	p_sys
op	61:49	0:0	10	->
water	61:51	0:0	10	i_pts
water	61:58	0:0	8	;
water	62:12	0:0	8	}
water	63:12	0:0	6	p_sys
op	63:17	0:0	6	->
water	63:19	0:0	6	i_state
op	63:27	0:0	6	=
water	63:29	0:0	6	STATE_HEADER
water	63:41	0:0	6	;
label	64:8	64:25	6	case STATE_HEADER :
if	66:12	71:12	6	(block_PeekBytes (& p_sys -> bytestream ,p_header ,MPGA_HEADER_SIZE ) != VLC_SUCCESS)
cond	66:16	67:55	7	block_PeekBytes (& p_sys -> bytestream ,p_header ,MPGA_HEADER_SIZE ) != VLC_SUCCESS
call	66:16	67:50	8	block_PeekBytes
arg	66:33	66:51	9	&p_sys->bytestream
op	66:33	0:0	10	&
water	66:34	0:0	10	p_sys
op	66:39	0:0	10	->
water	66:41	0:0	10	bytestream
arg	66:53	66:61	9	p_header
water	66:53	0:0	10	p_header
arg	67:33	67:50	9	MPGA_HEADER_SIZE
water	67:33	0:0	10	MPGA_HEADER_SIZE
op	67:52	0:0	8	!=
water	67:55	0:0	8	VLC_SUCCESS
stmts	68:12	71:12	7	
water	68:12	0:0	8	{
return	70:16	70:27	8	NULL
water	70:23	0:0	9	NULL
water	71:12	0:0	8	}
water	73:12	0:0	6	i_header
op	73:21	0:0	6	=
call	73:23	73:39	6	GetDWBE
arg	73:31	73:39	7	p_header
water	73:31	0:0	8	p_header
water	73:40	0:0	6	;
water	75:12	0:0	6	p_sys
op	75:17	0:0	6	->
water	75:19	0:0	6	i_frame_size
op	75:32	0:0	6	=
call	75:34	82:60	6	SyncInfo
arg	75:44	75:52	7	i_header
water	75:44	0:0	8	i_header
arg	76:44	76:62	7	&p_sys->i_channels
op	76:44	0:0	8	&
water	76:45	0:0	8	p_sys
op	76:50	0:0	8	->
water	76:52	0:0	8	i_channels
arg	77:44	77:67	7	&p_sys->i_channels_conf
op	77:44	0:0	8	&
water	77:45	0:0	8	p_sys
op	77:50	0:0	8	->
water	77:52	0:0	8	i_channels_conf
arg	78:44	78:58	7	&p_sys->i_rate
op	78:44	0:0	8	&
water	78:45	0:0	8	p_sys
op	78:50	0:0	8	->
water	78:52	0:0	8	i_rate
arg	79:44	79:62	7	&p_sys->i_bit_rate
op	79:44	0:0	8	&
water	79:45	0:0	8	p_sys
op	79:50	0:0	8	->
water	79:52	0:0	8	i_bit_rate
arg	80:44	80:66	7	&p_sys->i_frame_length
op	80:44	0:0	8	&
water	80:45	0:0	8	p_sys
op	80:50	0:0	8	->
water	80:52	0:0	8	i_frame_length
arg	81:44	81:68	7	&p_sys->i_max_frame_size
op	81:44	0:0	8	&
water	81:45	0:0	8	p_sys
op	81:50	0:0	8	->
water	81:52	0:0	8	i_max_frame_size
arg	82:44	82:60	7	&p_sys->i_layer
op	82:44	0:0	8	&
water	82:45	0:0	8	p_sys
op	82:50	0:0	8	->
water	82:52	0:0	8	i_layer
water	82:61	0:0	6	;
water	83:12	0:0	6	p_dec
op	83:17	0:0	6	->
water	83:19	0:0	6	fmt_in
op	83:25	0:0	6	.
water	83:26	0:0	6	i_profile
op	83:36	0:0	6	=
water	83:38	0:0	6	p_sys
op	83:43	0:0	6	->
water	83:45	0:0	6	i_layer
water	83:52	0:0	6	;
if	84:12	91:12	6	(p_sys -> i_frame_size == - 1)
cond	84:16	84:40	7	p_sys -> i_frame_size == - 1
water	84:16	0:0	8	p_sys
op	84:21	0:0	8	->
water	84:23	0:0	8	i_frame_size
op	84:36	0:0	8	==
op	84:39	0:0	8	-
water	84:40	0:0	8	1
stmts	85:12	91:12	7	
water	85:12	0:0	8	{
call	86:16	86:53	8	msg_Dbg
arg	86:25	86:30	9	p_dec
water	86:25	0:0	10	p_dec
arg	86:32	86:53	9	"emulated startcode"
water	86:32	0:0	10	"emulated startcode"
water	86:54	0:0	8	;
call	87:16	87:51	8	block_SkipByte
arg	87:32	87:51	9	&p_sys->bytestream
op	87:32	0:0	10	&
water	87:33	0:0	10	p_sys
op	87:38	0:0	10	->
water	87:40	0:0	10	bytestream
water	87:52	0:0	8	;
water	88:16	0:0	8	p_sys
op	88:21	0:0	8	->
water	88:23	0:0	8	i_state
op	88:31	0:0	8	=
water	88:33	0:0	8	STATE_NOSYNC
water	88:45	0:0	8	;
water	89:16	0:0	8	p_sys
op	89:21	0:0	8	->
water	89:23	0:0	8	b_discontinuity
op	89:39	0:0	8	=
water	89:41	0:0	8	true
water	89:45	0:0	8	;
break	90:16	90:21	8	
water	91:12	0:0	8	}
if	92:12	101:12	6	(p_sys -> i_bit_rate == 0)
cond	92:16	92:37	7	p_sys -> i_bit_rate == 0
water	92:16	0:0	8	p_sys
op	92:21	0:0	8	->
water	92:23	0:0	8	i_bit_rate
op	92:34	0:0	8	==
water	92:37	0:0	8	0
stmts	93:12	101:12	7	
water	93:12	0:0	8	{
if	95:16	98:16	8	(p_dec -> p_sys -> i_free_frame_size == MPGA_HEADER_SIZE)
cond	95:20	95:55	9	p_dec -> p_sys -> i_free_frame_size == MPGA_HEADER_SIZE
water	95:20	0:0	10	p_dec
op	95:25	0:0	10	->
water	95:27	0:0	10	p_sys
op	95:32	0:0	10	->
water	95:34	0:0	10	i_free_frame_size
op	95:52	0:0	10	==
water	95:55	0:0	10	MPGA_HEADER_SIZE
stmts	96:16	98:16	9	
water	96:16	0:0	10	{
call	97:20	97:55	10	msg_Dbg
arg	97:29	97:34	11	p_dec
water	97:29	0:0	12	p_dec
arg	97:36	97:55	11	"free bitrate mode"
water	97:36	0:0	12	"free bitrate mode"
water	97:56	0:0	10	;
water	98:16	0:0	10	}
water	100:16	0:0	8	p_sys
op	100:21	0:0	8	->
water	100:23	0:0	8	i_frame_size
op	100:36	0:0	8	=
water	100:38	0:0	8	p_sys
op	100:43	0:0	8	->
water	100:45	0:0	8	i_free_frame_size
op	100:63	0:0	8	-
water	100:65	0:0	8	1
water	100:66	0:0	8	;
water	101:12	0:0	8	}
water	102:12	0:0	6	p_sys
op	102:17	0:0	6	->
water	102:19	0:0	6	i_state
op	102:27	0:0	6	=
water	102:29	0:0	6	STATE_NEXT_SYNC
water	102:44	0:0	6	;
label	103:8	103:28	6	case STATE_NEXT_SYNC :
if	107:12	113:12	6	(block_PeekOffsetBytes (& p_sys -> bytestream ,p_sys -> i_frame_size ,p_header ,MAD_BUFFER_GUARD ) != VLC_SUCCESS)
cond	107:16	109:61	7	block_PeekOffsetBytes (& p_sys -> bytestream ,p_sys -> i_frame_size ,p_header ,MAD_BUFFER_GUARD ) != VLC_SUCCESS
call	107:16	109:56	8	block_PeekOffsetBytes
arg	107:39	107:57	9	&p_sys->bytestream
op	107:39	0:0	10	&
water	107:40	0:0	10	p_sys
op	107:45	0:0	10	->
water	107:47	0:0	10	bytestream
arg	108:39	108:58	9	p_sys->i_frame_size
water	108:39	0:0	10	p_sys
op	108:44	0:0	10	->
water	108:46	0:0	10	i_frame_size
arg	108:60	108:68	9	p_header
water	108:60	0:0	10	p_header
arg	109:39	109:56	9	MAD_BUFFER_GUARD
water	109:39	0:0	10	MAD_BUFFER_GUARD
op	109:58	0:0	8	!=
water	109:61	0:0	8	VLC_SUCCESS
stmts	110:12	113:12	7	
water	110:12	0:0	8	{
return	112:16	112:27	8	NULL
water	112:23	0:0	9	NULL
water	113:12	0:0	8	}
if	114:12	184:12	6	(p_header [ 0 ] == 0 xff && ( p_header [ 1 ] & 0 xe0 ) == 0 xe0)
cond	114:16	114:64	7	p_header [ 0 ] == 0 xff && ( p_header [ 1 ] & 0 xe0 ) == 0 xe0
water	114:16	0:0	8	p_header
op	114:24	0:0	8	[
water	114:25	0:0	8	0
op	114:26	0:0	8	]
op	114:28	0:0	8	==
water	114:31	0:0	8	0
water	114:32	0:0	8	xff
op	114:36	0:0	8	&&
water	114:39	0:0	8	(
water	114:40	0:0	8	p_header
op	114:48	0:0	8	[
water	114:49	0:0	8	1
op	114:50	0:0	8	]
op	114:52	0:0	8	&
water	114:54	0:0	8	0
water	114:55	0:0	8	xe0
water	114:58	0:0	8	)
op	114:60	0:0	8	==
water	114:63	0:0	8	0
water	114:64	0:0	8	xe0
stmts	115:12	184:12	7	
water	115:12	0:0	8	{
decl	117:16	117:37	8	int	i_next_frame_size
decl	118:16	118:66	8	unsigned int	i_next_channels
water	118:44	0:0	8	,
decl	118:16	118:66	8	unsigned int	i_next_channels_conf
decl	119:16	119:57	8	unsigned int	i_next_rate
water	119:40	0:0	8	,
decl	119:16	119:57	8	unsigned int	i_next_bit_rate
decl	120:16	120:71	8	unsigned int	i_next_frame_length
water	120:48	0:0	8	,
decl	120:16	120:71	8	unsigned int	i_next_max_frame_size
decl	121:16	121:41	8	unsigned int	i_next_layer
water	123:16	0:0	8	i_header
op	123:25	0:0	8	=
call	123:27	123:43	8	GetDWBE
arg	123:35	123:43	9	p_header
water	123:35	0:0	10	p_header
water	123:44	0:0	8	;
water	124:16	0:0	8	i_next_frame_size
op	124:34	0:0	8	=
call	124:36	131:60	8	SyncInfo
arg	124:46	124:54	9	i_header
water	124:46	0:0	10	i_header
arg	125:46	125:62	9	&i_next_channels
op	125:46	0:0	10	&
water	125:47	0:0	10	i_next_channels
arg	126:46	126:67	9	&i_next_channels_conf
op	126:46	0:0	10	&
water	126:47	0:0	10	i_next_channels_conf
arg	127:46	127:58	9	&i_next_rate
op	127:46	0:0	10	&
water	127:47	0:0	10	i_next_rate
arg	128:46	128:62	9	&i_next_bit_rate
op	128:46	0:0	10	&
water	128:47	0:0	10	i_next_bit_rate
arg	129:46	129:66	9	&i_next_frame_length
op	129:46	0:0	10	&
water	129:47	0:0	10	i_next_frame_length
arg	130:46	130:68	9	&i_next_max_frame_size
op	130:46	0:0	10	&
water	130:47	0:0	10	i_next_max_frame_size
arg	131:46	131:60	9	&i_next_layer
op	131:46	0:0	10	&
water	131:47	0:0	10	i_next_layer
water	131:61	0:0	8	;
if	133:16	148:16	8	(p_sys -> i_bit_rate == 0 && i_next_frame_size == - 1)
cond	133:20	133:68	9	p_sys -> i_bit_rate == 0 && i_next_frame_size == - 1
water	133:20	0:0	10	p_sys
op	133:25	0:0	10	->
water	133:27	0:0	10	i_bit_rate
op	133:38	0:0	10	==
water	133:41	0:0	10	0
op	133:43	0:0	10	&&
water	133:46	0:0	10	i_next_frame_size
op	133:64	0:0	10	==
op	133:67	0:0	10	-
water	133:68	0:0	10	1
stmts	134:16	148:16	9	
water	134:16	0:0	10	{
if	135:20	145:20	10	(( unsigned int ) p_sys -> i_frame_size > p_sys -> i_max_frame_size)
cond	135:24	136:31	11	( unsigned int ) p_sys -> i_frame_size > p_sys -> i_max_frame_size
water	135:24	0:0	12	(
water	135:25	0:0	12	unsigned
water	135:34	0:0	12	int
water	135:37	0:0	12	)
water	135:38	0:0	12	p_sys
op	135:43	0:0	12	->
water	135:45	0:0	12	i_frame_size
op	135:58	0:0	12	>
water	136:24	0:0	12	p_sys
op	136:29	0:0	12	->
water	136:31	0:0	12	i_max_frame_size
stmts	137:20	145:20	11	
water	137:20	0:0	12	{
call	138:24	140:57	12	msg_Dbg
arg	138:33	138:38	13	p_dec
water	138:33	0:0	14	p_dec
arg	138:40	139:57	13	"frame too big %d > %d ""(emulated startcode ?)"
water	138:40	0:0	14	"frame too big %d > %d "
water	139:33	0:0	14	"(emulated startcode ?)"
arg	139:59	139:78	13	p_sys->i_frame_size
water	139:59	0:0	14	p_sys
op	139:64	0:0	14	->
water	139:66	0:0	14	i_frame_size
arg	140:33	140:57	13	p_sys->i_max_frame_size
water	140:33	0:0	14	p_sys
op	140:38	0:0	14	->
water	140:40	0:0	14	i_max_frame_size
water	140:58	0:0	12	;
call	141:24	141:59	12	block_SkipByte
arg	141:40	141:59	13	&p_sys->bytestream
op	141:40	0:0	14	&
water	141:41	0:0	14	p_sys
op	141:46	0:0	14	->
water	141:48	0:0	14	bytestream
water	141:60	0:0	12	;
water	142:24	0:0	12	p_sys
op	142:29	0:0	12	->
water	142:31	0:0	12	i_state
op	142:39	0:0	12	=
water	142:41	0:0	12	STATE_NOSYNC
water	142:53	0:0	12	;
water	143:24	0:0	12	p_sys
op	143:29	0:0	12	->
water	143:31	0:0	12	i_free_frame_size
op	143:49	0:0	12	=
water	143:51	0:0	12	MPGA_HEADER_SIZE
water	143:67	0:0	12	;
break	144:24	144:29	12	
water	145:20	0:0	12	}
water	146:20	0:0	10	p_sys
op	146:25	0:0	10	->
water	146:27	0:0	10	i_frame_size
op	146:39	0:0	10	++
water	146:41	0:0	10	;
break	147:20	147:25	10	
water	148:16	0:0	10	}
if	149:16	156:16	8	(i_next_frame_size == - 1)
cond	149:20	149:42	9	i_next_frame_size == - 1
water	149:20	0:0	10	i_next_frame_size
op	149:38	0:0	10	==
op	149:41	0:0	10	-
water	149:42	0:0	10	1
stmts	150:16	156:16	9	
water	150:16	0:0	10	{
call	151:20	151:71	10	msg_Dbg
arg	151:29	151:34	11	p_dec
water	151:29	0:0	12	p_dec
arg	151:36	151:71	11	"emulated startcode on next frame"
water	151:36	0:0	12	"emulated startcode on next frame"
water	151:72	0:0	10	;
call	152:20	152:55	10	block_SkipByte
arg	152:36	152:55	11	&p_sys->bytestream
op	152:36	0:0	12	&
water	152:37	0:0	12	p_sys
op	152:42	0:0	12	->
water	152:44	0:0	12	bytestream
water	152:56	0:0	10	;
water	153:20	0:0	10	p_sys
op	153:25	0:0	10	->
water	153:27	0:0	10	i_state
op	153:35	0:0	10	=
water	153:37	0:0	10	STATE_NOSYNC
water	153:49	0:0	10	;
water	154:20	0:0	10	p_sys
op	154:25	0:0	10	->
water	154:27	0:0	10	b_discontinuity
op	154:43	0:0	10	=
water	154:45	0:0	10	true
water	154:49	0:0	10	;
break	155:20	155:25	10	
water	156:16	0:0	10	}
if	158:16	174:16	8	(i_next_channels_conf != p_sys -> i_channels_conf || i_next_rate != p_sys -> i_rate || i_next_layer != p_sys -> i_layer || i_next_frame_length != p_sys -> i_frame_length)
cond	158:20	161:50	9	i_next_channels_conf != p_sys -> i_channels_conf || i_next_rate != p_sys -> i_rate || i_next_layer != p_sys -> i_layer || i_next_frame_length != p_sys -> i_frame_length
water	158:20	0:0	10	i_next_channels_conf
op	158:41	0:0	10	!=
water	158:44	0:0	10	p_sys
op	158:49	0:0	10	->
water	158:51	0:0	10	i_channels_conf
op	158:67	0:0	10	||
water	159:20	0:0	10	i_next_rate
op	159:32	0:0	10	!=
water	159:35	0:0	10	p_sys
op	159:40	0:0	10	->
water	159:42	0:0	10	i_rate
op	159:49	0:0	10	||
water	160:20	0:0	10	i_next_layer
op	160:33	0:0	10	!=
water	160:36	0:0	10	p_sys
op	160:41	0:0	10	->
water	160:43	0:0	10	i_layer
op	160:51	0:0	10	||
water	161:20	0:0	10	i_next_frame_length
op	161:40	0:0	10	!=
water	161:43	0:0	10	p_sys
op	161:48	0:0	10	->
water	161:50	0:0	10	i_frame_length
stmts	162:16	174:16	9	
water	162:16	0:0	10	{
if	164:20	168:20	10	(p_sys -> i_bit_rate == 0)
cond	164:24	164:45	11	p_sys -> i_bit_rate == 0
water	164:24	0:0	12	p_sys
op	164:29	0:0	12	->
water	164:31	0:0	12	i_bit_rate
op	164:42	0:0	12	==
water	164:45	0:0	12	0
stmts	165:20	168:20	11	
water	165:20	0:0	12	{
water	166:24	0:0	12	p_sys
op	166:29	0:0	12	->
water	166:31	0:0	12	i_frame_size
op	166:43	0:0	12	++
water	166:45	0:0	12	;
break	167:24	167:29	12	
water	168:20	0:0	12	}
call	169:20	170:54	10	msg_Dbg
arg	169:29	169:34	11	p_dec
water	169:29	0:0	12	p_dec
arg	169:36	170:54	11	"parameters changed unexpectedly ""(emulated startcode ?)"
water	169:36	0:0	12	"parameters changed unexpectedly "
water	170:29	0:0	12	"(emulated startcode ?)"
water	170:55	0:0	10	;
call	171:20	171:55	10	block_SkipByte
arg	171:36	171:55	11	&p_sys->bytestream
op	171:36	0:0	12	&
water	171:37	0:0	12	p_sys
op	171:42	0:0	12	->
water	171:44	0:0	12	bytestream
water	171:56	0:0	10	;
water	172:20	0:0	10	p_sys
op	172:25	0:0	10	->
water	172:27	0:0	10	i_state
op	172:35	0:0	10	=
water	172:37	0:0	10	STATE_NOSYNC
water	172:49	0:0	10	;
break	173:20	173:25	10	
water	174:16	0:0	10	}
if	176:16	183:16	8	(p_sys -> i_bit_rate == 0)
cond	176:20	176:41	9	p_sys -> i_bit_rate == 0
water	176:20	0:0	10	p_sys
op	176:25	0:0	10	->
water	176:27	0:0	10	i_bit_rate
op	176:38	0:0	10	==
water	176:41	0:0	10	0
stmts	177:16	183:16	9	
water	177:16	0:0	10	{
if	178:20	182:20	10	(i_next_bit_rate != 0)
cond	178:24	178:43	11	i_next_bit_rate != 0
water	178:24	0:0	12	i_next_bit_rate
op	178:40	0:0	12	!=
water	178:43	0:0	12	0
stmts	179:20	182:20	11	
water	179:20	0:0	12	{
water	180:24	0:0	12	p_sys
op	180:29	0:0	12	->
water	180:31	0:0	12	i_frame_size
op	180:43	0:0	12	++
water	180:45	0:0	12	;
break	181:24	181:29	12	
water	182:20	0:0	12	}
water	183:16	0:0	10	}
water	184:12	0:0	8	}
else	185:12	209:12	6
stmts	186:12	209:12	7	
water	186:12	0:0	8	{
if	188:16	203:16	8	(p_sys -> i_bit_rate == 0)
cond	188:20	188:41	9	p_sys -> i_bit_rate == 0
water	188:20	0:0	10	p_sys
op	188:25	0:0	10	->
water	188:27	0:0	10	i_bit_rate
op	188:38	0:0	10	==
water	188:41	0:0	10	0
stmts	189:16	203:16	9	
water	189:16	0:0	10	{
if	190:20	200:20	10	(( unsigned int ) p_sys -> i_frame_size > p_sys -> i_max_frame_size)
cond	190:24	191:31	11	( unsigned int ) p_sys -> i_frame_size > p_sys -> i_max_frame_size
water	190:24	0:0	12	(
water	190:25	0:0	12	unsigned
water	190:34	0:0	12	int
water	190:37	0:0	12	)
water	190:38	0:0	12	p_sys
op	190:43	0:0	12	->
water	190:45	0:0	12	i_frame_size
op	190:58	0:0	12	>
water	191:24	0:0	12	p_sys
op	191:29	0:0	12	->
water	191:31	0:0	12	i_max_frame_size
stmts	192:20	200:20	11	
water	192:20	0:0	12	{
call	193:24	195:57	12	msg_Dbg
arg	193:33	193:38	13	p_dec
water	193:33	0:0	14	p_dec
arg	193:40	194:57	13	"frame too big %d > %d ""(emulated startcode ?)"
water	193:40	0:0	14	"frame too big %d > %d "
water	194:33	0:0	14	"(emulated startcode ?)"
arg	194:59	194:78	13	p_sys->i_frame_size
water	194:59	0:0	14	p_sys
op	194:64	0:0	14	->
water	194:66	0:0	14	i_frame_size
arg	195:33	195:57	13	p_sys->i_max_frame_size
water	195:33	0:0	14	p_sys
op	195:38	0:0	14	->
water	195:40	0:0	14	i_max_frame_size
water	195:58	0:0	12	;
call	196:24	196:59	12	block_SkipByte
arg	196:40	196:59	13	&p_sys->bytestream
op	196:40	0:0	14	&
water	196:41	0:0	14	p_sys
op	196:46	0:0	14	->
water	196:48	0:0	14	bytestream
water	196:60	0:0	12	;
water	197:24	0:0	12	p_sys
op	197:29	0:0	12	->
water	197:31	0:0	12	i_state
op	197:39	0:0	12	=
water	197:41	0:0	12	STATE_NOSYNC
water	197:53	0:0	12	;
water	198:24	0:0	12	p_sys
op	198:29	0:0	12	->
water	198:31	0:0	12	i_free_frame_size
op	198:49	0:0	12	=
water	198:51	0:0	12	MPGA_HEADER_SIZE
water	198:67	0:0	12	;
break	199:24	199:29	12	
water	200:20	0:0	12	}
water	201:20	0:0	10	p_sys
op	201:25	0:0	10	->
water	201:27	0:0	10	i_frame_size
op	201:39	0:0	10	++
water	201:41	0:0	10	;
break	202:20	202:25	10	
water	203:16	0:0	10	}
call	204:16	205:61	8	msg_Dbg
arg	204:25	204:30	9	p_dec
water	204:25	0:0	10	p_dec
arg	204:32	205:61	9	"emulated startcode ""(no startcode on following frame)"
water	204:32	0:0	10	"emulated startcode "
water	205:25	0:0	10	"(no startcode on following frame)"
water	205:62	0:0	8	;
water	206:16	0:0	8	p_sys
op	206:21	0:0	8	->
water	206:23	0:0	8	i_state
op	206:31	0:0	8	=
water	206:33	0:0	8	STATE_NOSYNC
water	206:45	0:0	8	;
call	207:16	207:51	8	block_SkipByte
arg	207:32	207:51	9	&p_sys->bytestream
op	207:32	0:0	10	&
water	207:33	0:0	10	p_sys
op	207:38	0:0	10	->
water	207:40	0:0	10	bytestream
water	207:52	0:0	8	;
break	208:16	208:21	8	
water	209:12	0:0	8	}
water	210:12	0:0	6	p_sys
op	210:17	0:0	6	->
water	210:19	0:0	6	i_state
op	210:27	0:0	6	=
water	210:29	0:0	6	STATE_SEND_DATA
water	210:44	0:0	6	;
break	211:12	211:17	6	
label	212:8	212:27	6	case STATE_GET_DATA :
if	215:12	220:12	6	(block_WaitBytes (& p_sys -> bytestream ,p_sys -> i_frame_size ) != VLC_SUCCESS)
cond	215:16	216:58	7	block_WaitBytes (& p_sys -> bytestream ,p_sys -> i_frame_size ) != VLC_SUCCESS
call	215:16	216:53	8	block_WaitBytes
arg	215:33	215:51	9	&p_sys->bytestream
op	215:33	0:0	10	&
water	215:34	0:0	10	p_sys
op	215:39	0:0	10	->
water	215:41	0:0	10	bytestream
arg	216:33	216:53	9	p_sys->i_frame_size
water	216:33	0:0	10	p_sys
op	216:38	0:0	10	->
water	216:40	0:0	10	i_frame_size
op	216:55	0:0	8	!=
water	216:58	0:0	8	VLC_SUCCESS
stmts	217:12	220:12	7	
water	217:12	0:0	8	{
return	219:16	219:27	8	NULL
water	219:23	0:0	9	NULL
water	220:12	0:0	8	}
water	221:12	0:0	6	p_sys
op	221:17	0:0	6	->
water	221:19	0:0	6	i_state
op	221:27	0:0	6	=
water	221:29	0:0	6	STATE_SEND_DATA
water	221:44	0:0	6	;
label	222:8	222:28	6	case STATE_SEND_DATA :
if	223:12	227:12	6	(! ( p_buf =GetOutBuffer (p_dec ,& p_out_buffer ) ))
cond	223:16	223:62	7	! ( p_buf =GetOutBuffer (p_dec ,& p_out_buffer ) )
op	223:16	0:0	8	!
water	223:17	0:0	8	(
water	223:18	0:0	8	p_buf
op	223:24	0:0	8	=
call	223:26	223:61	8	GetOutBuffer
arg	223:40	223:45	9	p_dec
water	223:40	0:0	10	p_dec
arg	223:47	223:61	9	&p_out_buffer
op	223:47	0:0	10	&
water	223:48	0:0	10	p_out_buffer
water	223:62	0:0	8	)
stmts	224:12	227:12	7	
water	224:12	0:0	8	{
return	226:16	226:27	8	NULL
water	226:23	0:0	9	NULL
water	227:12	0:0	8	}
if	229:12	232:12	6	(p_sys -> i_bit_rate == 0)
cond	229:16	229:37	7	p_sys -> i_bit_rate == 0
water	229:16	0:0	8	p_sys
op	229:21	0:0	8	->
water	229:23	0:0	8	i_bit_rate
op	229:34	0:0	8	==
water	229:37	0:0	8	0
stmts	230:12	232:12	7	
water	230:12	0:0	8	{
water	231:16	0:0	8	p_sys
op	231:21	0:0	8	->
water	231:23	0:0	8	i_free_frame_size
op	231:41	0:0	8	=
water	231:43	0:0	8	p_sys
op	231:48	0:0	8	->
water	231:50	0:0	8	i_frame_size
water	231:62	0:0	8	;
water	232:12	0:0	8	}
if	234:12	238:12	6	(block_GetBytes (& p_sys -> bytestream ,p_buf ,__MIN (( unsigned ) p_sys -> i_frame_size ,p_out_buffer -> i_buffer ) ))
cond	234:16	235:98	7	block_GetBytes (& p_sys -> bytestream ,p_buf ,__MIN (( unsigned ) p_sys -> i_frame_size ,p_out_buffer -> i_buffer ) )
call	234:16	235:98	8	block_GetBytes
arg	234:32	234:50	9	&p_sys->bytestream
op	234:32	0:0	10	&
water	234:33	0:0	10	p_sys
op	234:38	0:0	10	->
water	234:40	0:0	10	bytestream
arg	235:28	235:33	9	p_buf
water	235:28	0:0	10	p_buf
arg	235:35	235:98	9	__MIN((unsigned)p_sys->i_frame_size,p_out_buffer->i_buffer)
call	235:35	235:96	10	__MIN
arg	235:42	235:71	11	(unsigned)p_sys->i_frame_size
water	235:42	0:0	12	(
water	235:43	0:0	12	unsigned
water	235:51	0:0	12	)
water	235:52	0:0	12	p_sys
op	235:57	0:0	12	->
water	235:59	0:0	12	i_frame_size
arg	235:73	235:96	11	p_out_buffer->i_buffer
water	235:73	0:0	12	p_out_buffer
op	235:85	0:0	12	->
water	235:87	0:0	12	i_buffer
stmts	235:101	238:12	7	
water	235:101	0:0	8	{
call	236:16	236:42	8	block_Release
arg	236:30	236:42	9	p_out_buffer
water	236:30	0:0	10	p_out_buffer
water	236:43	0:0	8	;
return	237:16	237:27	8	NULL
water	237:23	0:0	9	NULL
water	238:12	0:0	8	}
if	240:12	245:12	6	(! p_sys -> b_packetizer)
cond	240:16	240:24	7	! p_sys -> b_packetizer
op	240:16	0:0	8	!
water	240:17	0:0	8	p_sys
op	240:22	0:0	8	->
water	240:24	0:0	8	b_packetizer
stmts	241:12	245:12	7	
water	241:12	0:0	8	{
call	242:16	242:99	8	assert
arg	242:24	242:99	9	p_out_buffer->i_buffer>=(unsigned)p_sys->i_frame_size+MAD_BUFFER_GUARD
water	242:24	0:0	10	p_out_buffer
op	242:36	0:0	10	->
water	242:38	0:0	10	i_buffer
op	242:47	0:0	10	>=
water	242:50	0:0	10	(
water	242:51	0:0	10	unsigned
water	242:59	0:0	10	)
water	242:60	0:0	10	p_sys
op	242:65	0:0	10	->
water	242:67	0:0	10	i_frame_size
op	242:80	0:0	10	+
water	242:82	0:0	10	MAD_BUFFER_GUARD
water	242:100	0:0	8	;
call	243:16	244:51	8	memcpy
arg	243:24	243:51	9	p_buf+p_sys->i_frame_size
water	243:24	0:0	10	p_buf
op	243:30	0:0	10	+
water	243:32	0:0	10	p_sys
op	243:37	0:0	10	->
water	243:39	0:0	10	i_frame_size
arg	244:24	244:32	9	p_header
water	244:24	0:0	10	p_header
arg	244:34	244:51	9	MAD_BUFFER_GUARD
water	244:34	0:0	10	MAD_BUFFER_GUARD
water	244:52	0:0	8	;
water	245:12	0:0	8	}
water	246:12	0:0	6	p_sys
op	246:17	0:0	6	->
water	246:19	0:0	6	i_state
op	246:27	0:0	6	=
water	246:29	0:0	6	STATE_NOSYNC
water	246:41	0:0	6	;
if	248:12	249:80	6	(p_sys -> i_pts == p_sys -> bytestream . p_block -> i_pts)
cond	248:16	248:59	7	p_sys -> i_pts == p_sys -> bytestream . p_block -> i_pts
water	248:16	0:0	8	p_sys
op	248:21	0:0	8	->
water	248:23	0:0	8	i_pts
op	248:29	0:0	8	==
water	248:32	0:0	8	p_sys
op	248:37	0:0	8	->
water	248:39	0:0	8	bytestream
op	248:49	0:0	8	.
water	248:50	0:0	8	p_block
op	248:57	0:0	8	->
water	248:59	0:0	8	i_pts
stmts	249:16	249:80	7	
water	249:16	0:0	8	p_sys
op	249:21	0:0	8	->
water	249:23	0:0	8	i_pts
op	249:29	0:0	8	=
water	249:31	0:0	8	p_sys
op	249:36	0:0	8	->
water	249:38	0:0	8	bytestream
op	249:48	0:0	8	.
water	249:49	0:0	8	p_block
op	249:56	0:0	8	->
water	249:58	0:0	8	i_pts
op	249:64	0:0	8	=
water	249:66	0:0	8	VLC_TS_INVALID
water	249:80	0:0	8	;
water	251:12	0:0	6	p_block
op	251:20	0:0	6	=
call	251:22	251:62	6	block_BytestreamPop
arg	251:43	251:62	7	&p_sys->bytestream
op	251:43	0:0	8	&
water	251:44	0:0	8	p_sys
op	251:49	0:0	8	->
water	251:51	0:0	8	bytestream
water	251:63	0:0	6	;
if	252:12	253:35	6	(pp_block)
cond	252:16	252:16	7	pp_block
water	252:16	0:0	8	pp_block
stmts	253:16	253:35	7	
op	253:16	0:0	8	*
water	253:17	0:0	8	pp_block
op	253:26	0:0	8	=
water	253:28	0:0	8	p_block
water	253:35	0:0	8	;
else	254:12	255:38	6
stmts	254:17	255:38	7	
if	254:17	255:38	8	(p_block)
cond	254:21	254:21	9	p_block
water	254:21	0:0	10	p_block
stmts	255:16	255:38	9	
call	255:16	255:37	10	block_Release
arg	255:30	255:37	11	p_block
water	255:30	0:0	12	p_block
water	255:38	0:0	10	;
return	256:12	256:31	6	p_out_buffer
water	256:19	0:0	7	p_out_buffer
water	257:8	0:0	6	}
water	258:4	0:0	4	}
return	259:4	259:15	2	NULL
water	259:11	0:0	3	NULL
