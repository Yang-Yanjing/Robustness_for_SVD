func	2:0	79:0	0	void	vout_EnableFilter
params	2:22	0:0	1	
param	2:24	2:45	2	vout_thread_t *	p_vout
param	2:47	2:67	2	const char *	psz_name
param	3:24	3:34	2	bool	b_add
param	3:36	3:53	2	bool	b_setconfig
stmnts	0:0	78:22	1	
decl	5:4	5:20	2	char	*psz_parser
decl	6:4	6:20	2	char	*psz_string
decl	7:4	7:31	2	const char	*psz_filter_type
decl	8:4	8:45	2	module_t	*p_obj
op	8:20	0:0	2	=
call	8:22	8:44	3	module_find
arg	8:35	8:44	4	psz_name
water	8:35	0:0	5	psz_name
if	9:4	13:4	2	(! p_obj)
cond	9:8	9:9	3	! p_obj
op	9:8	0:0	4	!
water	9:9	0:0	4	p_obj
stmts	10:4	13:4	3	
water	10:4	0:0	4	{
call	11:8	11:74	4	msg_Err
arg	11:17	11:23	5	p_vout
water	11:17	0:0	6	p_vout
arg	11:25	11:63	5	"Unable to find filter module \"%s\"."
water	11:25	0:0	6	"Unable to find filter module \"%s\"."
arg	11:65	11:74	5	psz_name
water	11:65	0:0	6	psz_name
water	11:75	0:0	4	;
return	12:8	12:14	4	
water	13:4	0:0	4	}
if	14:4	17:4	2	(module_provides (p_obj ,"video filter2" ))
cond	14:8	14:48	3	module_provides (p_obj ,"video filter2" )
call	14:8	14:48	4	module_provides
arg	14:25	14:30	5	p_obj
water	14:25	0:0	6	p_obj
arg	14:32	14:48	5	"video filter2"
water	14:32	0:0	6	"video filter2"
stmts	15:4	17:4	3	
water	15:4	0:0	4	{
water	16:8	0:0	4	psz_filter_type
op	16:24	0:0	4	=
water	16:26	0:0	4	"video-filter"
water	16:40	0:0	4	;
water	17:4	0:0	4	}
else	18:4	21:4	2
stmts	18:9	21:4	3	
if	18:9	21:4	4	(module_provides (p_obj ,"sub source" ))
cond	18:13	18:50	5	module_provides (p_obj ,"sub source" )
call	18:13	18:50	6	module_provides
arg	18:30	18:35	7	p_obj
water	18:30	0:0	8	p_obj
arg	18:37	18:50	7	"sub source"
water	18:37	0:0	8	"sub source"
stmts	19:4	21:4	5	
water	19:4	0:0	6	{
water	20:8	0:0	6	psz_filter_type
op	20:24	0:0	6	=
water	20:26	0:0	6	"sub-source"
water	20:38	0:0	6	;
water	21:4	0:0	6	}
else	22:4	25:4	2
stmts	22:9	25:4	3	
if	22:9	25:4	4	(module_provides (p_obj ,"sub filter" ))
cond	22:13	22:50	5	module_provides (p_obj ,"sub filter" )
call	22:13	22:50	6	module_provides
arg	22:30	22:35	7	p_obj
water	22:30	0:0	8	p_obj
arg	22:37	22:50	7	"sub filter"
water	22:37	0:0	8	"sub filter"
stmts	23:4	25:4	5	
water	23:4	0:0	6	{
water	24:8	0:0	6	psz_filter_type
op	24:24	0:0	6	=
water	24:26	0:0	6	"sub-filter"
water	24:38	0:0	6	;
water	25:4	0:0	6	}
else	26:4	30:4	2
stmts	27:4	30:4	3	
water	27:4	0:0	4	{
call	28:8	28:54	4	msg_Err
arg	28:17	28:23	5	p_vout
water	28:17	0:0	6	p_vout
arg	28:25	28:54	5	"Unknown video filter type."
water	28:25	0:0	6	"Unknown video filter type."
water	28:55	0:0	4	;
return	29:8	29:14	4	
water	30:4	0:0	4	}
water	31:4	0:0	2	psz_string
op	31:15	0:0	2	=
call	31:17	31:56	2	var_GetString
arg	31:32	31:38	3	p_vout
water	31:32	0:0	4	p_vout
arg	31:40	31:56	3	psz_filter_type
water	31:40	0:0	4	psz_filter_type
water	31:57	0:0	2	;
if	33:4	33:45	2	(! psz_string)
cond	33:8	33:9	3	! psz_string
op	33:8	0:0	4	!
water	33:9	0:0	4	psz_string
stmts	33:22	33:45	3	
water	33:22	0:0	4	psz_string
op	33:33	0:0	4	=
call	33:35	33:44	4	strdup
arg	33:42	33:44	5	""
water	33:42	0:0	6	""
water	33:45	0:0	4	;
water	34:4	0:0	2	psz_parser
op	34:15	0:0	2	=
call	34:17	34:46	2	strstr
arg	34:25	34:35	3	psz_string
water	34:25	0:0	4	psz_string
arg	34:37	34:46	3	psz_name
water	34:37	0:0	4	psz_name
water	34:47	0:0	2	;
if	35:4	53:4	2	(b_add)
cond	35:8	35:8	3	b_add
water	35:8	0:0	4	b_add
stmts	36:4	53:4	3	
water	36:4	0:0	4	{
if	37:8	47:8	4	(! psz_parser)
cond	37:12	37:13	5	! psz_parser
op	37:12	0:0	6	!
water	37:13	0:0	6	psz_parser
stmts	38:8	47:8	5	
water	38:8	0:0	6	{
water	39:12	0:0	6	psz_parser
op	39:23	0:0	6	=
water	39:25	0:0	6	psz_string
water	39:35	0:0	6	;
if	40:12	45:12	6	(asprintf (& psz_string ,( * psz_string ) ? "%s:%s" : "%s%s" ,psz_string ,psz_name ) == - 1)
cond	40:16	41:53	7	asprintf (& psz_string ,( * psz_string ) ? "%s:%s" : "%s%s" ,psz_string ,psz_name ) == - 1
call	40:16	41:47	8	asprintf
arg	40:26	40:37	9	&psz_string
op	40:26	0:0	10	&
water	40:27	0:0	10	psz_string
arg	40:39	40:71	9	(*psz_string)?"%s:%s":"%s%s"
water	40:39	0:0	10	(
op	40:40	0:0	10	*
water	40:41	0:0	10	psz_string
water	40:51	0:0	10	)
water	40:53	0:0	10	?
water	40:55	0:0	10	"%s:%s"
water	40:63	0:0	10	:
water	40:65	0:0	10	"%s%s"
arg	41:26	41:36	9	psz_string
water	41:26	0:0	10	psz_string
arg	41:38	41:47	9	psz_name
water	41:38	0:0	10	psz_name
op	41:49	0:0	8	==
op	41:52	0:0	8	-
water	41:53	0:0	8	1
stmts	42:12	45:12	7	
water	42:12	0:0	8	{
call	43:16	43:33	8	free
arg	43:22	43:33	9	psz_parser
water	43:22	0:0	10	psz_parser
water	43:34	0:0	8	;
return	44:16	44:22	8	
water	45:12	0:0	8	}
call	46:12	46:29	6	free
arg	46:18	46:29	7	psz_parser
water	46:18	0:0	8	psz_parser
water	46:30	0:0	6	;
water	47:8	0:0	6	}
else	48:8	52:8	4
stmts	49:8	52:8	5	
water	49:8	0:0	6	{
call	50:12	50:29	6	free
arg	50:18	50:29	7	psz_string
water	50:18	0:0	8	psz_string
water	50:30	0:0	6	;
return	51:12	51:18	6	
water	52:8	0:0	6	}
water	53:4	0:0	4	}
else	54:4	72:4	2
stmts	55:4	72:4	3	
water	55:4	0:0	4	{
if	56:8	66:9	4	(psz_parser)
cond	56:12	56:12	5	psz_parser
water	56:12	0:0	6	psz_parser
stmts	57:8	66:9	5	
water	57:8	0:0	6	{
call	58:12	60:70	6	memmove
arg	58:21	58:31	7	psz_parser
water	58:21	0:0	8	psz_parser
arg	58:33	59:78	7	psz_parser+strlen(psz_name)+(*(psz_parser+strlen(psz_name))==':'?1:0)
water	58:33	0:0	8	psz_parser
op	58:44	0:0	8	+
call	58:46	58:61	8	strlen
arg	58:53	58:61	9	psz_name
water	58:53	0:0	10	psz_name
op	58:63	0:0	8	+
water	59:28	0:0	8	(
op	59:29	0:0	8	*
water	59:30	0:0	8	(
water	59:31	0:0	8	psz_parser
op	59:42	0:0	8	+
call	59:44	59:59	8	strlen
arg	59:51	59:59	9	psz_name
water	59:51	0:0	10	psz_name
water	59:60	0:0	8	)
op	59:62	0:0	8	==
water	59:65	0:0	8	':'
water	59:69	0:0	8	?
water	59:71	0:0	8	1
water	59:73	0:0	8	:
water	59:75	0:0	8	0
water	59:77	0:0	8	)
arg	60:28	60:70	7	strlen(psz_parser+strlen(psz_name))+1
call	60:28	60:64	8	strlen
arg	60:35	60:64	9	psz_parser+strlen(psz_name)
water	60:35	0:0	10	psz_parser
op	60:46	0:0	10	+
call	60:48	60:63	10	strlen
arg	60:55	60:63	11	psz_name
water	60:55	0:0	12	psz_name
op	60:66	0:0	8	+
water	60:68	0:0	8	1
water	60:71	0:0	6	;
if	62:12	65:12	6	(* ( psz_string +strlen (psz_string ) - 1 ) == ':')
cond	62:16	62:57	7	* ( psz_string +strlen (psz_string ) - 1 ) == ':'
op	62:16	0:0	8	*
water	62:17	0:0	8	(
water	62:18	0:0	8	psz_string
op	62:28	0:0	8	+
call	62:29	62:47	8	strlen
arg	62:36	62:47	9	psz_string
water	62:36	0:0	10	psz_string
op	62:49	0:0	8	-
water	62:50	0:0	8	1
water	62:52	0:0	8	)
op	62:54	0:0	8	==
water	62:57	0:0	8	':'
stmts	63:12	65:12	7	
water	63:12	0:0	8	{
op	64:16	0:0	8	*
water	64:17	0:0	8	(
water	64:18	0:0	8	psz_string
op	64:28	0:0	8	+
call	64:29	64:47	8	strlen
arg	64:36	64:47	9	psz_string
water	64:36	0:0	10	psz_string
op	64:49	0:0	8	-
water	64:50	0:0	8	1
water	64:52	0:0	8	)
op	64:54	0:0	8	=
water	64:56	0:0	8	'\0'
water	64:60	0:0	8	;
water	65:12	0:0	8	}
water	66:9	0:0	6	}
else	67:9	71:9	4
stmts	68:9	71:9	5	
water	68:9	0:0	6	{
call	69:13	69:30	6	free
arg	69:19	69:30	7	psz_string
water	69:19	0:0	8	psz_string
water	69:31	0:0	6	;
return	70:13	70:19	6	
water	71:9	0:0	6	}
water	72:4	0:0	4	}
if	73:4	76:4	2	(b_setconfig)
cond	73:8	73:8	3	b_setconfig
water	73:8	0:0	4	b_setconfig
stmts	74:4	76:4	3	
water	74:4	0:0	4	{
call	75:8	75:59	4	config_PutPsz
arg	75:23	75:29	5	p_vout
water	75:23	0:0	6	p_vout
arg	75:31	75:46	5	psz_filter_type
water	75:31	0:0	6	psz_filter_type
arg	75:48	75:59	5	psz_string
water	75:48	0:0	6	psz_string
water	75:60	0:0	4	;
water	76:4	0:0	4	}
call	77:4	77:55	2	var_SetString
arg	77:19	77:25	3	p_vout
water	77:19	0:0	4	p_vout
arg	77:27	77:42	3	psz_filter_type
water	77:27	0:0	4	psz_filter_type
arg	77:44	77:55	3	psz_string
water	77:44	0:0	4	psz_string
water	77:56	0:0	2	;
call	78:4	78:21	2	free
arg	78:10	78:21	3	psz_string
water	78:10	0:0	4	psz_string
water	78:22	0:0	2	;
