func	2:0	59:0	0	static void	RegionDraw
params	2:22	0:0	1	
param	2:24	2:53	2	subpicture_region_t *	p_region
param	2:55	2:72	2	ASS_Image *	p_img
stmnts	0:0	56:61	1	
decl	4:4	4:49	2	const plane_t	*p
op	4:21	0:0	2	=
op	4:23	0:0	2	&
water	4:24	0:0	2	p_region
op	4:32	0:0	2	->
water	4:34	0:0	2	p_picture
op	4:43	0:0	2	->
water	4:45	0:0	2	p
op	4:46	0:0	2	[
water	4:47	0:0	2	0
op	4:48	0:0	2	]
decl	5:4	5:33	2	const int	i_x
op	5:18	0:0	2	=
water	5:20	0:0	2	p_region
op	5:28	0:0	2	->
water	5:30	0:0	2	i_x
decl	6:4	6:33	2	const int	i_y
op	6:18	0:0	2	=
water	6:20	0:0	2	p_region
op	6:28	0:0	2	->
water	6:30	0:0	2	i_y
decl	7:4	7:46	2	const int	i_width
op	7:23	0:0	2	=
water	7:25	0:0	2	p_region
op	7:33	0:0	2	->
water	7:35	0:0	2	fmt
op	7:38	0:0	2	.
water	7:39	0:0	2	i_width
decl	8:4	8:47	2	const int	i_height
op	8:23	0:0	2	=
water	8:25	0:0	2	p_region
op	8:33	0:0	2	->
water	8:35	0:0	2	fmt
op	8:38	0:0	2	.
water	8:39	0:0	2	i_height
call	9:4	9:55	2	memset
arg	9:12	9:23	3	p->p_pixels
water	9:12	0:0	4	p
op	9:13	0:0	4	->
water	9:15	0:0	4	p_pixels
arg	9:25	9:29	3	0x00
water	9:25	0:0	4	0
water	9:26	0:0	4	x00
arg	9:31	9:55	3	p->i_pitch*p->i_lines
water	9:31	0:0	4	p
op	9:32	0:0	4	->
water	9:34	0:0	4	i_pitch
op	9:42	0:0	4	*
water	9:44	0:0	4	p
op	9:45	0:0	4	->
water	9:47	0:0	4	i_lines
water	9:56	0:0	2	;
for	10:4	49:4	2	(;p_img != NULL;p_img = p_img -> next)
forinit	10:9	10:9	3	;
water	10:9	0:0	4	;
cond	10:11	10:20	3	p_img != NULL
water	10:11	0:0	4	p_img
op	10:17	0:0	4	!=
water	10:20	0:0	4	NULL
forexpr	10:26	10:41	3	p_img = p_img -> next
water	10:26	0:0	4	p_img
op	10:32	0:0	4	=
water	10:34	0:0	4	p_img
op	10:39	0:0	4	->
water	10:41	0:0	4	next
stmts	11:4	49:4	3	
water	11:4	0:0	4	{
if	12:8	14:20	4	(p_img -> dst_x < i_x || p_img -> dst_x + p_img -> w > i_x + i_width || p_img -> dst_y < i_y || p_img -> dst_y + p_img -> h > i_y + i_height)
cond	12:12	13:66	5	p_img -> dst_x < i_x || p_img -> dst_x + p_img -> w > i_x + i_width || p_img -> dst_y < i_y || p_img -> dst_y + p_img -> h > i_y + i_height
water	12:12	0:0	6	p_img
op	12:17	0:0	6	->
water	12:19	0:0	6	dst_x
op	12:25	0:0	6	<
water	12:27	0:0	6	i_x
op	12:31	0:0	6	||
water	12:34	0:0	6	p_img
op	12:39	0:0	6	->
water	12:41	0:0	6	dst_x
op	12:47	0:0	6	+
water	12:49	0:0	6	p_img
op	12:54	0:0	6	->
water	12:56	0:0	6	w
op	12:58	0:0	6	>
water	12:60	0:0	6	i_x
op	12:64	0:0	6	+
water	12:66	0:0	6	i_width
op	12:74	0:0	6	||
water	13:12	0:0	6	p_img
op	13:17	0:0	6	->
water	13:19	0:0	6	dst_y
op	13:25	0:0	6	<
water	13:27	0:0	6	i_y
op	13:31	0:0	6	||
water	13:34	0:0	6	p_img
op	13:39	0:0	6	->
water	13:41	0:0	6	dst_y
op	13:47	0:0	6	+
water	13:49	0:0	6	p_img
op	13:54	0:0	6	->
water	13:56	0:0	6	h
op	13:58	0:0	6	>
water	13:60	0:0	6	i_y
op	13:64	0:0	6	+
water	13:66	0:0	6	i_height
stmts	14:12	14:20	5	
continue	14:12	14:20	6	
water	15:8	0:0	4	const
water	15:14	0:0	4	unsigned
water	15:23	0:0	4	r
op	15:25	0:0	4	=
water	15:27	0:0	4	(
water	15:28	0:0	4	p_img
op	15:33	0:0	4	->
water	15:35	0:0	4	color
op	15:41	0:0	4	>>
water	15:44	0:0	4	24
water	15:46	0:0	4	)
op	15:47	0:0	4	&
water	15:48	0:0	4	0
water	15:49	0:0	4	xff
water	15:52	0:0	4	;
water	16:8	0:0	4	const
water	16:14	0:0	4	unsigned
water	16:23	0:0	4	g
op	16:25	0:0	4	=
water	16:27	0:0	4	(
water	16:28	0:0	4	p_img
op	16:33	0:0	4	->
water	16:35	0:0	4	color
op	16:41	0:0	4	>>
water	16:44	0:0	4	16
water	16:46	0:0	4	)
op	16:47	0:0	4	&
water	16:48	0:0	4	0
water	16:49	0:0	4	xff
water	16:52	0:0	4	;
water	17:8	0:0	4	const
water	17:14	0:0	4	unsigned
water	17:23	0:0	4	b
op	17:25	0:0	4	=
water	17:27	0:0	4	(
water	17:28	0:0	4	p_img
op	17:33	0:0	4	->
water	17:35	0:0	4	color
op	17:41	0:0	4	>>
water	17:45	0:0	4	8
water	17:46	0:0	4	)
op	17:47	0:0	4	&
water	17:48	0:0	4	0
water	17:49	0:0	4	xff
water	17:52	0:0	4	;
water	18:8	0:0	4	const
water	18:14	0:0	4	unsigned
water	18:23	0:0	4	a
op	18:25	0:0	4	=
water	18:27	0:0	4	(
water	18:28	0:0	4	p_img
op	18:33	0:0	4	->
water	18:35	0:0	4	color
water	18:46	0:0	4	)
op	18:47	0:0	4	&
water	18:48	0:0	4	0
water	18:49	0:0	4	xff
water	18:52	0:0	4	;
decl	19:8	19:16	4	int	x
water	19:13	0:0	4	,
decl	19:8	19:16	4	int	y
for	20:8	48:8	4	(y = 0 ;y < p_img -> h;y ++)
forinit	20:13	20:18	5	y = 0 ;
water	20:13	0:0	6	y
op	20:15	0:0	6	=
water	20:17	0:0	6	0
water	20:18	0:0	6	;
cond	20:20	20:31	5	y < p_img -> h
water	20:20	0:0	6	y
op	20:22	0:0	6	<
water	20:24	0:0	6	p_img
op	20:29	0:0	6	->
water	20:31	0:0	6	h
forexpr	20:34	20:35	5	y ++
water	20:34	0:0	6	y
op	20:35	0:0	6	++
stmts	21:8	48:8	5	
water	21:8	0:0	6	{
for	22:12	47:12	6	(x = 0 ;x < p_img -> w;x ++)
forinit	22:17	22:22	7	x = 0 ;
water	22:17	0:0	8	x
op	22:19	0:0	8	=
water	22:21	0:0	8	0
water	22:22	0:0	8	;
cond	22:24	22:35	7	x < p_img -> w
water	22:24	0:0	8	x
op	22:26	0:0	8	<
water	22:28	0:0	8	p_img
op	22:33	0:0	8	->
water	22:35	0:0	8	w
forexpr	22:38	22:39	7	x ++
water	22:38	0:0	8	x
op	22:39	0:0	8	++
stmts	23:12	47:12	7	
water	23:12	0:0	8	{
water	24:16	0:0	8	const
water	24:22	0:0	8	unsigned
water	24:31	0:0	8	alpha
op	24:37	0:0	8	=
water	24:39	0:0	8	p_img
op	24:44	0:0	8	->
water	24:46	0:0	8	bitmap
op	24:52	0:0	8	[
water	24:53	0:0	8	y
op	24:54	0:0	8	*
water	24:55	0:0	8	p_img
op	24:60	0:0	8	->
water	24:62	0:0	8	stride
op	24:68	0:0	8	+
water	24:69	0:0	8	x
op	24:70	0:0	8	]
water	24:71	0:0	8	;
water	25:16	0:0	8	const
water	25:22	0:0	8	unsigned
water	25:31	0:0	8	an
op	25:34	0:0	8	=
water	25:36	0:0	8	(
water	25:37	0:0	8	255
op	25:41	0:0	8	-
water	25:43	0:0	8	a
water	25:44	0:0	8	)
op	25:46	0:0	8	*
water	25:48	0:0	8	alpha
op	25:54	0:0	8	/
water	25:56	0:0	8	255
water	25:59	0:0	8	;
decl	26:16	26:108	8	uint8_t	*p_rgba
op	26:32	0:0	8	=
op	26:34	0:0	8	&
water	26:35	0:0	8	p
op	26:36	0:0	8	->
water	26:38	0:0	8	p_pixels
op	26:46	0:0	8	[
water	26:47	0:0	8	(
water	26:48	0:0	8	y
op	26:49	0:0	8	+
water	26:50	0:0	8	p_img
op	26:55	0:0	8	->
water	26:57	0:0	8	dst_y
op	26:62	0:0	8	-
water	26:63	0:0	8	i_y
water	26:66	0:0	8	)
op	26:68	0:0	8	*
water	26:70	0:0	8	p
op	26:71	0:0	8	->
water	26:73	0:0	8	i_pitch
op	26:81	0:0	8	+
water	26:83	0:0	8	4
op	26:85	0:0	8	*
water	26:87	0:0	8	(
water	26:88	0:0	8	x
op	26:89	0:0	8	+
water	26:90	0:0	8	p_img
op	26:95	0:0	8	->
water	26:97	0:0	8	dst_x
op	26:102	0:0	8	-
water	26:103	0:0	8	i_x
water	26:106	0:0	8	)
op	26:107	0:0	8	]
water	27:16	0:0	8	const
water	27:22	0:0	8	unsigned
water	27:31	0:0	8	ao
op	27:34	0:0	8	=
water	27:36	0:0	8	p_rgba
op	27:42	0:0	8	[
water	27:43	0:0	8	3
op	27:44	0:0	8	]
water	27:45	0:0	8	;
if	29:16	36:16	8	(ao == 0)
cond	29:20	29:26	9	ao == 0
water	29:20	0:0	10	ao
op	29:23	0:0	10	==
water	29:26	0:0	10	0
stmts	30:16	36:16	9	
water	30:16	0:0	10	{
water	32:20	0:0	10	p_rgba
op	32:26	0:0	10	[
water	32:27	0:0	10	0
op	32:28	0:0	10	]
op	32:30	0:0	10	=
water	32:32	0:0	10	r
water	32:33	0:0	10	;
water	33:20	0:0	10	p_rgba
op	33:26	0:0	10	[
water	33:27	0:0	10	1
op	33:28	0:0	10	]
op	33:30	0:0	10	=
water	33:32	0:0	10	g
water	33:33	0:0	10	;
water	34:20	0:0	10	p_rgba
op	34:26	0:0	10	[
water	34:27	0:0	10	2
op	34:28	0:0	10	]
op	34:30	0:0	10	=
water	34:32	0:0	10	b
water	34:33	0:0	10	;
water	35:20	0:0	10	p_rgba
op	35:26	0:0	10	[
water	35:27	0:0	10	3
op	35:28	0:0	10	]
op	35:30	0:0	10	=
water	35:32	0:0	10	an
water	35:34	0:0	10	;
water	36:16	0:0	10	}
else	37:16	46:16	8
stmts	38:16	46:16	9	
water	38:16	0:0	10	{
water	39:20	0:0	10	p_rgba
op	39:26	0:0	10	[
water	39:27	0:0	10	3
op	39:28	0:0	10	]
op	39:30	0:0	10	=
water	39:32	0:0	10	255
op	39:36	0:0	10	-
water	39:38	0:0	10	(
water	39:40	0:0	10	255
op	39:44	0:0	10	-
water	39:46	0:0	10	p_rgba
op	39:52	0:0	10	[
water	39:53	0:0	10	3
op	39:54	0:0	10	]
water	39:56	0:0	10	)
op	39:58	0:0	10	*
water	39:60	0:0	10	(
water	39:62	0:0	10	255
op	39:66	0:0	10	-
water	39:68	0:0	10	an
water	39:71	0:0	10	)
op	39:73	0:0	10	/
water	39:75	0:0	10	255
water	39:78	0:0	10	;
if	40:20	45:20	10	(p_rgba [ 3 ] != 0)
cond	40:24	40:37	11	p_rgba [ 3 ] != 0
water	40:24	0:0	12	p_rgba
op	40:30	0:0	12	[
water	40:31	0:0	12	3
op	40:32	0:0	12	]
op	40:34	0:0	12	!=
water	40:37	0:0	12	0
stmts	41:20	45:20	11	
water	41:20	0:0	12	{
water	42:24	0:0	12	p_rgba
op	42:30	0:0	12	[
water	42:31	0:0	12	0
op	42:32	0:0	12	]
op	42:34	0:0	12	=
water	42:36	0:0	12	(
water	42:38	0:0	12	p_rgba
op	42:44	0:0	12	[
water	42:45	0:0	12	0
op	42:46	0:0	12	]
op	42:48	0:0	12	*
water	42:50	0:0	12	ao
op	42:53	0:0	12	*
water	42:55	0:0	12	(
water	42:56	0:0	12	255
op	42:59	0:0	12	-
water	42:60	0:0	12	an
water	42:62	0:0	12	)
op	42:64	0:0	12	/
water	42:66	0:0	12	255
op	42:70	0:0	12	+
water	42:72	0:0	12	r
op	42:74	0:0	12	*
water	42:76	0:0	12	an
water	42:79	0:0	12	)
op	42:81	0:0	12	/
water	42:83	0:0	12	p_rgba
op	42:89	0:0	12	[
water	42:90	0:0	12	3
op	42:91	0:0	12	]
water	42:92	0:0	12	;
water	43:24	0:0	12	p_rgba
op	43:30	0:0	12	[
water	43:31	0:0	12	1
op	43:32	0:0	12	]
op	43:34	0:0	12	=
water	43:36	0:0	12	(
water	43:38	0:0	12	p_rgba
op	43:44	0:0	12	[
water	43:45	0:0	12	1
op	43:46	0:0	12	]
op	43:48	0:0	12	*
water	43:50	0:0	12	ao
op	43:53	0:0	12	*
water	43:55	0:0	12	(
water	43:56	0:0	12	255
op	43:59	0:0	12	-
water	43:60	0:0	12	an
water	43:62	0:0	12	)
op	43:64	0:0	12	/
water	43:66	0:0	12	255
op	43:70	0:0	12	+
water	43:72	0:0	12	g
op	43:74	0:0	12	*
water	43:76	0:0	12	an
water	43:79	0:0	12	)
op	43:81	0:0	12	/
water	43:83	0:0	12	p_rgba
op	43:89	0:0	12	[
water	43:90	0:0	12	3
op	43:91	0:0	12	]
water	43:92	0:0	12	;
water	44:24	0:0	12	p_rgba
op	44:30	0:0	12	[
water	44:31	0:0	12	2
op	44:32	0:0	12	]
op	44:34	0:0	12	=
water	44:36	0:0	12	(
water	44:38	0:0	12	p_rgba
op	44:44	0:0	12	[
water	44:45	0:0	12	2
op	44:46	0:0	12	]
op	44:48	0:0	12	*
water	44:50	0:0	12	ao
op	44:53	0:0	12	*
water	44:55	0:0	12	(
water	44:56	0:0	12	255
op	44:59	0:0	12	-
water	44:60	0:0	12	an
water	44:62	0:0	12	)
op	44:64	0:0	12	/
water	44:66	0:0	12	255
op	44:70	0:0	12	+
water	44:72	0:0	12	b
op	44:74	0:0	12	*
water	44:76	0:0	12	an
water	44:79	0:0	12	)
op	44:81	0:0	12	/
water	44:83	0:0	12	p_rgba
op	44:89	0:0	12	[
water	44:90	0:0	12	3
op	44:91	0:0	12	]
water	44:92	0:0	12	;
water	45:20	0:0	12	}
water	46:16	0:0	10	}
water	47:12	0:0	8	}
water	48:8	0:0	6	}
water	49:4	0:0	4	}
for	53:4	54:59	2	( int y = 0 ;y < p -> i_lines;y ++)
forinit	0:0	53:18	3	 int y = 0 ;
decl	53:9	53:18	4	int	y
op	53:15	0:0	4	=
water	53:17	0:0	4	0
cond	53:20	53:27	3	y < p -> i_lines
water	53:20	0:0	4	y
op	53:22	0:0	4	<
water	53:24	0:0	4	p
op	53:25	0:0	4	->
water	53:27	0:0	4	i_lines
forexpr	53:36	53:37	3	y ++
water	53:36	0:0	4	y
op	53:37	0:0	4	++
stmts	54:8	54:59	3	
call	54:8	54:14	4	*P
arg	54:11	54:12	5	0
water	54:11	0:0	6	0
arg	54:13	54:14	5	y
water	54:13	0:0	6	y
op	54:16	0:0	4	=
call	54:18	54:45	4	*P
arg	54:21	54:43	5	p->i_visible_pitch/4-1
water	54:21	0:0	6	p
op	54:22	0:0	6	->
water	54:24	0:0	6	i_visible_pitch
op	54:39	0:0	6	/
water	54:40	0:0	6	4
op	54:41	0:0	6	-
water	54:42	0:0	6	1
arg	54:44	54:45	5	y
water	54:44	0:0	6	y
op	54:47	0:0	4	=
water	54:49	0:0	4	0
water	54:50	0:0	4	xff000000
water	54:59	0:0	4	;
for	55:4	56:61	2	( int x = 0 ;x < p -> i_visible_pitch;x ++)
forinit	0:0	55:18	3	 int x = 0 ;
decl	55:9	55:18	4	int	x
op	55:15	0:0	4	=
water	55:17	0:0	4	0
cond	55:20	55:27	3	x < p -> i_visible_pitch
water	55:20	0:0	4	x
op	55:22	0:0	4	<
water	55:24	0:0	4	p
op	55:25	0:0	4	->
water	55:27	0:0	4	i_visible_pitch
forexpr	55:44	55:45	3	x ++
water	55:44	0:0	4	x
op	55:45	0:0	4	++
stmts	56:8	56:61	3	
call	56:8	56:16	4	*P
arg	56:11	56:14	5	x/4
water	56:11	0:0	6	x
op	56:12	0:0	6	/
water	56:13	0:0	6	4
arg	56:15	56:16	5	0
water	56:15	0:0	6	0
op	56:18	0:0	4	=
call	56:20	56:47	4	*P
arg	56:23	56:26	5	x/4
water	56:23	0:0	6	x
op	56:24	0:0	6	/
water	56:25	0:0	6	4
arg	56:27	56:47	5	p->i_visible_lines-1
water	56:27	0:0	6	p
op	56:28	0:0	6	->
water	56:30	0:0	6	i_visible_lines
op	56:45	0:0	6	-
water	56:46	0:0	6	1
op	56:49	0:0	4	=
water	56:51	0:0	4	0
water	56:52	0:0	4	xff000000
water	56:61	0:0	4	;
