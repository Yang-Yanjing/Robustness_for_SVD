func	2:0	42:0	0	static decoder_t *	decoder_New
params	2:29	0:0	1	
param	2:31	2:53	2	vlc_object_t *	p_parent
param	2:55	2:78	2	input_thread_t *	p_input
param	3:31	3:47	2	es_format_t *	fmt
param	3:49	3:71	2	input_clock_t *	p_clock
param	4:31	4:59	2	input_resource_t *	p_resource
param	5:31	5:56	2	sout_instance_t *	p_sout
stmnts	0:0	41:16	1	
decl	7:4	7:27	2	decoder_t	*p_dec
op	7:21	0:0	2	=
water	7:23	0:0	2	NULL
decl	8:4	8:68	2	const char	*psz_type
op	8:25	0:0	2	=
water	8:27	0:0	2	p_sout
water	8:34	0:0	2	?
call	8:36	8:51	3	N_
arg	8:39	8:51	4	"packetizer"
water	8:39	0:0	5	"packetizer"
water	8:53	0:0	2	:
call	8:55	8:67	3	N_
arg	8:58	8:67	4	"decoder"
water	8:58	0:0	5	"decoder"
decl	9:4	9:18	2	int	i_priority
water	11:4	0:0	2	p_dec
op	11:10	0:0	2	=
call	11:12	12:62	2	CreateDecoder
arg	11:27	11:35	3	p_parent
water	11:27	0:0	4	p_parent
arg	11:37	11:44	3	p_input
water	11:37	0:0	4	p_input
arg	11:46	11:49	3	fmt
water	11:46	0:0	4	fmt
arg	12:27	12:41	3	p_sout!=NULL
water	12:27	0:0	4	p_sout
op	12:34	0:0	4	!=
water	12:37	0:0	4	NULL
arg	12:43	12:53	3	p_resource
water	12:43	0:0	4	p_resource
arg	12:55	12:62	3	p_sout
water	12:55	0:0	4	p_sout
water	12:63	0:0	2	;
if	13:4	20:4	2	(p_dec == NULL)
cond	13:8	13:17	3	p_dec == NULL
water	13:8	0:0	4	p_dec
op	13:14	0:0	4	==
water	13:17	0:0	4	NULL
stmts	14:4	20:4	3	
water	14:4	0:0	4	{
call	15:8	15:59	4	msg_Err
arg	15:17	15:25	5	p_parent
water	15:17	0:0	6	p_parent
arg	15:27	15:48	5	"could not create %s"
water	15:27	0:0	6	"could not create %s"
arg	15:50	15:59	5	psz_type
water	15:50	0:0	6	psz_type
water	15:60	0:0	4	;
call	16:8	18:46	4	dialog_Fatal
arg	16:22	16:30	5	p_parent
water	16:22	0:0	6	p_parent
arg	16:32	16:67	5	_("Streaming / Transcoding failed")
call	16:32	16:66	6	_
arg	16:34	16:66	7	"Streaming / Transcoding failed"
water	16:34	0:0	8	"Streaming / Transcoding failed"
arg	17:22	17:60	5	_("VLC could not open the %s module.")
call	17:22	17:59	6	_
arg	17:24	17:59	7	"VLC could not open the %s module."
water	17:24	0:0	8	"VLC could not open the %s module."
arg	18:22	18:46	5	vlc_gettext(psz_type)
call	18:22	18:44	6	vlc_gettext
arg	18:35	18:44	7	psz_type
water	18:35	0:0	8	psz_type
water	18:47	0:0	4	;
return	19:8	19:19	4	NULL
water	19:15	0:0	5	NULL
water	20:4	0:0	4	}
if	21:4	26:4	2	(! p_dec -> p_module)
cond	21:8	21:16	3	! p_dec -> p_module
op	21:8	0:0	4	!
water	21:9	0:0	4	p_dec
op	21:14	0:0	4	->
water	21:16	0:0	4	p_module
stmts	22:4	26:4	3	
water	22:4	0:0	4	{
call	23:8	23:53	4	DecoderUnsupportedCodec
arg	23:33	23:38	5	p_dec
water	23:33	0:0	6	p_dec
arg	23:40	23:53	5	fmt->i_codec
water	23:40	0:0	6	fmt
op	23:43	0:0	6	->
water	23:45	0:0	6	i_codec
water	23:54	0:0	4	;
call	24:8	24:29	4	DeleteDecoder
arg	24:23	24:29	5	p_dec
water	24:23	0:0	6	p_dec
water	24:30	0:0	4	;
return	25:8	25:19	4	NULL
water	25:15	0:0	5	NULL
water	26:4	0:0	4	}
water	27:4	0:0	2	p_dec
op	27:9	0:0	2	->
water	27:11	0:0	2	p_owner
op	27:18	0:0	2	->
water	27:20	0:0	2	p_clock
op	27:28	0:0	2	=
water	27:30	0:0	2	p_clock
water	27:37	0:0	2	;
call	28:4	28:47	2	assert
arg	28:12	28:47	3	p_dec->fmt_out.i_cat!=UNKNOWN_ES
water	28:12	0:0	4	p_dec
op	28:17	0:0	4	->
water	28:19	0:0	4	fmt_out
op	28:26	0:0	4	.
water	28:27	0:0	4	i_cat
op	28:33	0:0	4	!=
water	28:36	0:0	4	UNKNOWN_ES
water	28:48	0:0	2	;
if	29:4	30:46	2	(p_dec -> fmt_out . i_cat == AUDIO_ES)
cond	29:8	29:32	3	p_dec -> fmt_out . i_cat == AUDIO_ES
water	29:8	0:0	4	p_dec
op	29:13	0:0	4	->
water	29:15	0:0	4	fmt_out
op	29:22	0:0	4	.
water	29:23	0:0	4	i_cat
op	29:29	0:0	4	==
water	29:32	0:0	4	AUDIO_ES
stmts	30:8	30:46	3	
water	30:8	0:0	4	i_priority
op	30:19	0:0	4	=
water	30:21	0:0	4	VLC_THREAD_PRIORITY_AUDIO
water	30:46	0:0	4	;
else	31:4	32:46	2
stmts	32:8	32:46	3	
water	32:8	0:0	4	i_priority
op	32:19	0:0	4	=
water	32:21	0:0	4	VLC_THREAD_PRIORITY_VIDEO
water	32:46	0:0	4	;
if	34:4	40:4	2	(vlc_clone (& p_dec -> p_owner -> thread ,DecoderThread ,p_dec ,i_priority ))
cond	34:8	34:77	3	vlc_clone (& p_dec -> p_owner -> thread ,DecoderThread ,p_dec ,i_priority )
call	34:8	34:77	4	vlc_clone
arg	34:19	34:42	5	&p_dec->p_owner->thread
op	34:19	0:0	6	&
water	34:20	0:0	6	p_dec
op	34:25	0:0	6	->
water	34:27	0:0	6	p_owner
op	34:34	0:0	6	->
water	34:36	0:0	6	thread
arg	34:44	34:57	5	DecoderThread
water	34:44	0:0	6	DecoderThread
arg	34:59	34:64	5	p_dec
water	34:59	0:0	6	p_dec
arg	34:66	34:77	5	i_priority
water	34:66	0:0	6	i_priority
stmts	35:4	40:4	3	
water	35:4	0:0	4	{
call	36:8	36:54	4	msg_Err
arg	36:17	36:22	5	p_dec
water	36:17	0:0	6	p_dec
arg	36:24	36:54	5	"cannot spawn decoder thread"
water	36:24	0:0	6	"cannot spawn decoder thread"
water	36:55	0:0	4	;
call	37:8	37:46	4	module_unneed
arg	37:23	37:28	5	p_dec
water	37:23	0:0	6	p_dec
arg	37:30	37:46	5	p_dec->p_module
water	37:30	0:0	6	p_dec
op	37:35	0:0	6	->
water	37:37	0:0	6	p_module
water	37:47	0:0	4	;
call	38:8	38:29	4	DeleteDecoder
arg	38:23	38:29	5	p_dec
water	38:23	0:0	6	p_dec
water	38:30	0:0	4	;
return	39:8	39:19	4	NULL
water	39:15	0:0	5	NULL
water	40:4	0:0	4	}
return	41:4	41:16	2	p_dec
water	41:11	0:0	3	p_dec
