func	2:0	116:0	0	static int	ExecuteMediaProperty
params	2:31	0:0	1	
param	2:33	2:45	2	vlm_t *	p_vlm
param	2:47	2:57	2	int64_t	id
param	2:59	2:69	2	bool	b_new
param	3:33	3:53	2	const int	i_property
param	3:55	3:76	2	char *	ppsz_property[]
param	3:78	3:104	2	vlm_message_t * *	pp_status
stmnts	0:0	115:23	1	
decl	5:4	5:49	2	const char	*psz_cmd
op	5:24	0:0	2	=
water	5:26	0:0	2	b_new
water	5:32	0:0	2	?
water	5:34	0:0	2	"new"
water	5:40	0:0	2	:
water	5:42	0:0	2	"setup"
decl	6:4	6:29	2	vlm_media_t	*p_cfg
op	6:23	0:0	2	=
water	6:25	0:0	2	NULL
decl	7:4	7:16	2	int	i_result
decl	8:4	8:9	2	int	i
if	12:4	13:32	2	(vlm_ControlInternal (p_vlm ,VLM_GET_MEDIA ,id ,& p_cfg ))
cond	12:8	12:62	3	vlm_ControlInternal (p_vlm ,VLM_GET_MEDIA ,id ,& p_cfg )
call	12:8	12:62	4	vlm_ControlInternal
arg	12:29	12:34	5	p_vlm
water	12:29	0:0	6	p_vlm
arg	12:36	12:49	5	VLM_GET_MEDIA
water	12:36	0:0	6	VLM_GET_MEDIA
arg	12:51	12:53	5	id
water	12:51	0:0	6	id
arg	12:55	12:62	5	&p_cfg
op	12:55	0:0	6	&
water	12:56	0:0	6	p_cfg
stmts	13:8	13:32	3	
call	13:8	13:31	4	ERROR
arg	13:15	13:31	5	"unknown media"
water	13:15	0:0	6	"unknown media"
water	13:32	0:0	4	;
for	15:4	100:4	2	(i = 0 ;i < i_property;i ++)
forinit	15:9	15:14	3	i = 0 ;
water	15:9	0:0	4	i
op	15:11	0:0	4	=
water	15:13	0:0	4	0
water	15:14	0:0	4	;
cond	15:16	15:20	3	i < i_property
water	15:16	0:0	4	i
op	15:18	0:0	4	<
water	15:20	0:0	4	i_property
forexpr	15:32	15:33	3	i ++
water	15:32	0:0	4	i
op	15:33	0:0	4	++
stmts	16:4	100:4	3	
water	16:4	0:0	4	{
decl	17:8	17:49	4	const char	*psz_option
op	17:31	0:0	4	=
water	17:33	0:0	4	ppsz_property
op	17:46	0:0	4	[
water	17:47	0:0	4	i
op	17:48	0:0	4	]
decl	18:8	18:77	4	const char	*psz_value
op	18:30	0:0	4	=
water	18:32	0:0	4	i
op	18:33	0:0	4	+
water	18:34	0:0	4	1
op	18:36	0:0	4	<
water	18:38	0:0	4	i_property
water	18:49	0:0	4	?
water	18:51	0:0	4	ppsz_property
op	18:64	0:0	4	[
water	18:65	0:0	4	i
op	18:66	0:0	4	+
water	18:67	0:0	4	1
op	18:68	0:0	4	]
water	18:70	0:0	4	:
water	18:73	0:0	4	NULL
if	19:8	22:8	4	(!strcmp (psz_option ,"enabled" ))
cond	19:12	19:43	5	!strcmp (psz_option ,"enabled" )
op	19:12	0:0	6	!
call	19:13	19:43	6	strcmp
arg	19:21	19:31	7	psz_option
water	19:21	0:0	8	psz_option
arg	19:33	19:43	7	"enabled"
water	19:33	0:0	8	"enabled"
stmts	20:8	22:8	5	
water	20:8	0:0	6	{
water	21:12	0:0	6	p_cfg
op	21:17	0:0	6	->
water	21:19	0:0	6	b_enabled
op	21:29	0:0	6	=
water	21:31	0:0	6	true
water	21:35	0:0	6	;
water	22:8	0:0	6	}
else	23:8	26:8	4
stmts	23:13	26:8	5	
if	23:13	26:8	6	(!strcmp (psz_option ,"disabled" ))
cond	23:17	23:49	7	!strcmp (psz_option ,"disabled" )
op	23:17	0:0	8	!
call	23:18	23:49	8	strcmp
arg	23:26	23:36	9	psz_option
water	23:26	0:0	10	psz_option
arg	23:38	23:49	9	"disabled"
water	23:38	0:0	10	"disabled"
stmts	24:8	26:8	7	
water	24:8	0:0	8	{
water	25:12	0:0	8	p_cfg
op	25:17	0:0	8	->
water	25:19	0:0	8	b_enabled
op	25:29	0:0	8	=
water	25:31	0:0	8	false
water	25:36	0:0	8	;
water	26:8	0:0	8	}
else	27:8	32:8	4
stmts	27:13	32:8	5	
if	27:13	32:8	6	(!strcmp (psz_option ,"input" ))
cond	27:17	27:46	7	!strcmp (psz_option ,"input" )
op	27:17	0:0	8	!
call	27:18	27:46	8	strcmp
arg	27:26	27:36	9	psz_option
water	27:26	0:0	10	psz_option
arg	27:38	27:46	9	"input"
water	27:38	0:0	10	"input"
stmts	28:8	32:8	7	
water	28:8	0:0	8	{
call	29:12	29:29	8	MISSING
arg	29:21	29:29	9	"input"
water	29:21	0:0	10	"input"
water	29:30	0:0	8	;
call	30:12	30:77	8	TAB_APPEND
arg	30:24	30:38	9	p_cfg->i_input
water	30:24	0:0	10	p_cfg
op	30:29	0:0	10	->
water	30:31	0:0	10	i_input
arg	30:40	30:57	9	p_cfg->ppsz_input
water	30:40	0:0	10	p_cfg
op	30:45	0:0	10	->
water	30:47	0:0	10	ppsz_input
arg	30:59	30:77	9	strdup(psz_value)
call	30:59	30:75	10	strdup
arg	30:66	30:75	11	psz_value
water	30:66	0:0	12	psz_value
water	30:78	0:0	8	;
water	31:12	0:0	8	i
op	31:13	0:0	8	++
water	31:15	0:0	8	;
water	32:8	0:0	8	}
else	33:8	38:8	4
stmts	33:13	38:8	5	
if	33:13	38:8	6	(!strcmp (psz_option ,"inputdel" ) && psz_value && !strcmp (psz_value ,"all" ))
cond	33:17	33:93	7	!strcmp (psz_option ,"inputdel" ) && psz_value && !strcmp (psz_value ,"all" )
op	33:17	0:0	8	!
call	33:18	33:49	8	strcmp
arg	33:26	33:36	9	psz_option
water	33:26	0:0	10	psz_option
arg	33:38	33:49	9	"inputdel"
water	33:38	0:0	10	"inputdel"
op	33:51	0:0	8	&&
water	33:54	0:0	8	psz_value
op	33:64	0:0	8	&&
op	33:67	0:0	8	!
call	33:68	33:93	8	strcmp
arg	33:76	33:85	9	psz_value
water	33:76	0:0	10	psz_value
arg	33:87	33:93	9	"all"
water	33:87	0:0	10	"all"
stmts	34:8	38:8	7	
water	34:8	0:0	8	{
while	35:12	36:85	8	(p_cfg -> i_input > 0)
cond	35:19	35:36	9	p_cfg -> i_input > 0
water	35:19	0:0	10	p_cfg
op	35:24	0:0	10	->
water	35:26	0:0	10	i_input
op	35:34	0:0	10	>
water	35:36	0:0	10	0
stmts	36:16	36:85	9	
call	36:16	36:84	10	TAB_REMOVE
arg	36:28	36:42	11	p_cfg->i_input
water	36:28	0:0	12	p_cfg
op	36:33	0:0	12	->
water	36:35	0:0	12	i_input
arg	36:44	36:61	11	p_cfg->ppsz_input
water	36:44	0:0	12	p_cfg
op	36:49	0:0	12	->
water	36:51	0:0	12	ppsz_input
arg	36:63	36:84	11	p_cfg->ppsz_input[0]
water	36:63	0:0	12	p_cfg
op	36:68	0:0	12	->
water	36:70	0:0	12	ppsz_input
op	36:80	0:0	12	[
water	36:81	0:0	12	0
op	36:82	0:0	12	]
water	36:85	0:0	10	;
water	37:12	0:0	8	i
op	37:13	0:0	8	++
water	37:15	0:0	8	;
water	38:8	0:0	8	}
else	39:8	52:8	4
stmts	39:13	52:8	5	
if	39:13	52:8	6	(!strcmp (psz_option ,"inputdel" ))
cond	39:17	39:49	7	!strcmp (psz_option ,"inputdel" )
op	39:17	0:0	8	!
call	39:18	39:49	8	strcmp
arg	39:26	39:36	9	psz_option
water	39:26	0:0	10	psz_option
arg	39:38	39:49	9	"inputdel"
water	39:38	0:0	10	"inputdel"
stmts	40:8	52:8	7	
water	40:8	0:0	8	{
decl	41:12	41:17	8	int	j
call	42:12	42:32	8	MISSING
arg	42:21	42:32	9	"inputdel"
water	42:21	0:0	10	"inputdel"
water	42:33	0:0	8	;
for	43:12	50:12	8	(j = 0 ;j < p_cfg -> i_input;j ++)
forinit	43:17	43:22	9	j = 0 ;
water	43:17	0:0	10	j
op	43:19	0:0	10	=
water	43:21	0:0	10	0
water	43:22	0:0	10	;
cond	43:24	43:35	9	j < p_cfg -> i_input
water	43:24	0:0	10	j
op	43:26	0:0	10	<
water	43:28	0:0	10	p_cfg
op	43:33	0:0	10	->
water	43:35	0:0	10	i_input
forexpr	43:44	43:45	9	j ++
water	43:44	0:0	10	j
op	43:45	0:0	10	++
stmts	44:12	50:12	9	
water	44:12	0:0	10	{
if	45:16	49:16	10	(!strcmp (p_cfg -> ppsz_input [ j ] ,psz_value ))
cond	45:20	45:61	11	!strcmp (p_cfg -> ppsz_input [ j ] ,psz_value )
op	45:20	0:0	12	!
call	45:21	45:61	12	strcmp
arg	45:29	45:49	13	p_cfg->ppsz_input[j]
water	45:29	0:0	14	p_cfg
op	45:34	0:0	14	->
water	45:36	0:0	14	ppsz_input
op	45:46	0:0	14	[
water	45:47	0:0	14	j
op	45:48	0:0	14	]
arg	45:51	45:61	13	psz_value
water	45:51	0:0	14	psz_value
stmts	46:16	49:16	11	
water	46:16	0:0	12	{
call	47:20	47:88	12	TAB_REMOVE
arg	47:32	47:46	13	p_cfg->i_input
water	47:32	0:0	14	p_cfg
op	47:37	0:0	14	->
water	47:39	0:0	14	i_input
arg	47:48	47:65	13	p_cfg->ppsz_input
water	47:48	0:0	14	p_cfg
op	47:53	0:0	14	->
water	47:55	0:0	14	ppsz_input
arg	47:67	47:88	13	p_cfg->ppsz_input[j]
water	47:67	0:0	14	p_cfg
op	47:72	0:0	14	->
water	47:74	0:0	14	ppsz_input
op	47:84	0:0	14	[
water	47:85	0:0	14	j
op	47:86	0:0	14	]
water	47:89	0:0	12	;
break	48:20	48:25	12	
water	49:16	0:0	12	}
water	50:12	0:0	10	}
water	51:12	0:0	8	i
op	51:13	0:0	8	++
water	51:15	0:0	8	;
water	52:8	0:0	8	}
else	53:8	60:8	4
stmts	53:13	60:8	5	
if	53:13	60:8	6	(!strcmp (psz_option ,"inputdeln" ))
cond	53:17	53:50	7	!strcmp (psz_option ,"inputdeln" )
op	53:17	0:0	8	!
call	53:18	53:50	8	strcmp
arg	53:26	53:36	9	psz_option
water	53:26	0:0	10	psz_option
arg	53:38	53:50	9	"inputdeln"
water	53:38	0:0	10	"inputdeln"
stmts	54:8	60:8	7	
water	54:8	0:0	8	{
call	55:12	55:33	8	MISSING
arg	55:21	55:33	9	"inputdeln"
water	55:21	0:0	10	"inputdeln"
water	55:34	0:0	8	;
decl	56:12	56:39	8	int	idx
op	56:20	0:0	8	=
call	56:22	56:38	9	atoi
arg	56:28	56:38	10	psz_value
water	56:28	0:0	11	psz_value
if	57:12	58:89	8	(idx > 0 && idx <= p_cfg -> i_input)
cond	57:16	57:41	9	idx > 0 && idx <= p_cfg -> i_input
water	57:16	0:0	10	idx
op	57:20	0:0	10	>
water	57:22	0:0	10	0
op	57:24	0:0	10	&&
water	57:27	0:0	10	idx
op	57:31	0:0	10	<=
water	57:34	0:0	10	p_cfg
op	57:39	0:0	10	->
water	57:41	0:0	10	i_input
stmts	58:16	58:89	9	
call	58:16	58:88	10	TAB_REMOVE
arg	58:28	58:42	11	p_cfg->i_input
water	58:28	0:0	12	p_cfg
op	58:33	0:0	12	->
water	58:35	0:0	12	i_input
arg	58:44	58:61	11	p_cfg->ppsz_input
water	58:44	0:0	12	p_cfg
op	58:49	0:0	12	->
water	58:51	0:0	12	ppsz_input
arg	58:63	58:88	11	p_cfg->ppsz_input[idx-1]
water	58:63	0:0	12	p_cfg
op	58:68	0:0	12	->
water	58:70	0:0	12	ppsz_input
op	58:80	0:0	12	[
water	58:81	0:0	12	idx
op	58:84	0:0	12	-
water	58:85	0:0	12	1
op	58:86	0:0	12	]
water	58:89	0:0	10	;
water	59:12	0:0	8	i
op	59:13	0:0	8	++
water	59:15	0:0	8	;
water	60:8	0:0	8	}
else	61:8	67:8	4
stmts	61:13	67:8	5	
if	61:13	67:8	6	(!strcmp (psz_option ,"output" ))
cond	61:17	61:47	7	!strcmp (psz_option ,"output" )
op	61:17	0:0	8	!
call	61:18	61:47	8	strcmp
arg	61:26	61:36	9	psz_option
water	61:26	0:0	10	psz_option
arg	61:38	61:47	9	"output"
water	61:38	0:0	10	"output"
stmts	62:8	67:8	7	
water	62:8	0:0	8	{
call	63:12	63:30	8	MISSING
arg	63:21	63:30	9	"output"
water	63:21	0:0	10	"output"
water	63:31	0:0	8	;
call	64:12	64:36	8	free
arg	64:18	64:36	9	p_cfg->psz_output
water	64:18	0:0	10	p_cfg
op	64:23	0:0	10	->
water	64:25	0:0	10	psz_output
water	64:37	0:0	8	;
water	65:12	0:0	8	p_cfg
op	65:17	0:0	8	->
water	65:19	0:0	8	psz_output
op	65:30	0:0	8	=
op	65:32	0:0	8	*
water	65:33	0:0	8	psz_value
water	65:43	0:0	8	?
call	65:45	65:63	8	strdup
arg	65:53	65:63	9	psz_value
water	65:53	0:0	10	psz_value
water	65:65	0:0	8	:
water	65:67	0:0	8	NULL
water	65:71	0:0	8	;
water	66:12	0:0	8	i
op	66:13	0:0	8	++
water	66:15	0:0	8	;
water	67:8	0:0	8	}
else	68:8	73:8	4
stmts	68:13	73:8	5	
if	68:13	73:8	6	(!strcmp (psz_option ,"option" ))
cond	68:17	68:47	7	!strcmp (psz_option ,"option" )
op	68:17	0:0	8	!
call	68:18	68:47	8	strcmp
arg	68:26	68:36	9	psz_option
water	68:26	0:0	10	psz_option
arg	68:38	68:47	9	"option"
water	68:38	0:0	10	"option"
stmts	69:8	73:8	7	
water	69:8	0:0	8	{
call	70:12	70:30	8	MISSING
arg	70:21	70:30	9	"option"
water	70:21	0:0	10	"option"
water	70:31	0:0	8	;
call	71:12	71:81	8	TAB_APPEND
arg	71:24	71:39	9	p_cfg->i_option
water	71:24	0:0	10	p_cfg
op	71:29	0:0	10	->
water	71:31	0:0	10	i_option
arg	71:41	71:59	9	p_cfg->ppsz_option
water	71:41	0:0	10	p_cfg
op	71:46	0:0	10	->
water	71:48	0:0	10	ppsz_option
arg	71:61	71:81	9	strdup(psz_value)
call	71:61	71:79	10	strdup
arg	71:69	71:79	11	psz_value
water	71:69	0:0	12	psz_value
water	71:82	0:0	8	;
water	72:12	0:0	8	i
op	72:13	0:0	8	++
water	72:15	0:0	8	;
water	73:8	0:0	8	}
else	74:8	79:8	4
stmts	74:13	79:8	5	
if	74:13	79:8	6	(!strcmp (psz_option ,"loop" ))
cond	74:17	74:45	7	!strcmp (psz_option ,"loop" )
op	74:17	0:0	8	!
call	74:18	74:45	8	strcmp
arg	74:26	74:36	9	psz_option
water	74:26	0:0	10	psz_option
arg	74:38	74:45	9	"loop"
water	74:38	0:0	10	"loop"
stmts	75:8	79:8	7	
water	75:8	0:0	8	{
if	76:12	77:54	8	(p_cfg -> b_vod)
cond	76:16	76:23	9	p_cfg -> b_vod
water	76:16	0:0	10	p_cfg
op	76:21	0:0	10	->
water	76:23	0:0	10	b_vod
stmts	77:16	77:54	9	
call	77:16	77:53	10	ERROR
arg	77:23	77:53	11	"invalid loop option for vod"
water	77:23	0:0	12	"invalid loop option for vod"
water	77:54	0:0	10	;
water	78:12	0:0	8	p_cfg
op	78:17	0:0	8	->
water	78:19	0:0	8	broadcast
op	78:28	0:0	8	.
water	78:29	0:0	8	b_loop
op	78:36	0:0	8	=
water	78:38	0:0	8	true
water	78:42	0:0	8	;
water	79:8	0:0	8	}
else	80:8	85:8	4
stmts	80:13	85:8	5	
if	80:13	85:8	6	(!strcmp (psz_option ,"unloop" ))
cond	80:17	80:47	7	!strcmp (psz_option ,"unloop" )
op	80:17	0:0	8	!
call	80:18	80:47	8	strcmp
arg	80:26	80:36	9	psz_option
water	80:26	0:0	10	psz_option
arg	80:38	80:47	9	"unloop"
water	80:38	0:0	10	"unloop"
stmts	81:8	85:8	7	
water	81:8	0:0	8	{
if	82:12	83:56	8	(p_cfg -> b_vod)
cond	82:16	82:23	9	p_cfg -> b_vod
water	82:16	0:0	10	p_cfg
op	82:21	0:0	10	->
water	82:23	0:0	10	b_vod
stmts	83:16	83:56	9	
call	83:16	83:55	10	ERROR
arg	83:23	83:55	11	"invalid unloop option for vod"
water	83:23	0:0	12	"invalid unloop option for vod"
water	83:56	0:0	10	;
water	84:12	0:0	8	p_cfg
op	84:17	0:0	8	->
water	84:19	0:0	8	broadcast
op	84:28	0:0	8	.
water	84:29	0:0	8	b_loop
op	84:36	0:0	8	=
water	84:38	0:0	8	false
water	84:43	0:0	8	;
water	85:8	0:0	8	}
else	86:8	94:8	4
stmts	86:13	94:8	5	
if	86:13	94:8	6	(!strcmp (psz_option ,"mux" ))
cond	86:17	86:44	7	!strcmp (psz_option ,"mux" )
op	86:17	0:0	8	!
call	86:18	86:44	8	strcmp
arg	86:26	86:36	9	psz_option
water	86:26	0:0	10	psz_option
arg	86:38	86:44	9	"mux"
water	86:38	0:0	10	"mux"
stmts	87:8	94:8	7	
water	87:8	0:0	8	{
call	88:12	88:27	8	MISSING
arg	88:21	88:27	9	"mux"
water	88:21	0:0	10	"mux"
water	88:28	0:0	8	;
if	89:12	90:59	8	(! p_cfg -> b_vod)
cond	89:16	89:24	9	! p_cfg -> b_vod
op	89:16	0:0	10	!
water	89:17	0:0	10	p_cfg
op	89:22	0:0	10	->
water	89:24	0:0	10	b_vod
stmts	90:16	90:59	9	
call	90:16	90:58	10	ERROR
arg	90:23	90:58	11	"invalid mux option for broadcast"
water	90:23	0:0	12	"invalid mux option for broadcast"
water	90:59	0:0	10	;
call	91:12	91:37	8	free
arg	91:18	91:37	9	p_cfg->vod.psz_mux
water	91:18	0:0	10	p_cfg
op	91:23	0:0	10	->
water	91:25	0:0	10	vod
op	91:28	0:0	10	.
water	91:29	0:0	10	psz_mux
water	91:38	0:0	8	;
water	92:12	0:0	8	p_cfg
op	92:17	0:0	8	->
water	92:19	0:0	8	vod
op	92:22	0:0	8	.
water	92:23	0:0	8	psz_mux
op	92:31	0:0	8	=
op	92:33	0:0	8	*
water	92:34	0:0	8	psz_value
water	92:44	0:0	8	?
call	92:46	92:64	8	strdup
arg	92:54	92:64	9	psz_value
water	92:54	0:0	10	psz_value
water	92:66	0:0	8	:
water	92:68	0:0	8	NULL
water	92:72	0:0	8	;
water	93:12	0:0	8	i
op	93:13	0:0	8	++
water	93:15	0:0	8	;
water	94:8	0:0	8	}
else	95:8	99:8	4
stmts	96:8	99:8	5	
water	96:8	0:0	6	{
call	97:12	97:67	6	fprintf
arg	97:21	97:27	7	stderr
water	97:21	0:0	8	stderr
arg	97:29	97:54	7	"PROP: name=%s unknown\n"
water	97:29	0:0	8	"PROP: name=%s unknown\n"
arg	97:56	97:67	7	psz_option
water	97:56	0:0	8	psz_option
water	97:68	0:0	6	;
call	98:12	98:42	6	ERROR
arg	98:19	98:42	7	"Wrong command syntax"
water	98:19	0:0	8	"Wrong command syntax"
water	98:43	0:0	6	;
water	99:8	0:0	6	}
water	100:4	0:0	4	}
water	104:4	0:0	2	i_result
op	104:13	0:0	2	=
call	104:15	104:67	2	vlm_ControlInternal
arg	104:36	104:41	3	p_vlm
water	104:36	0:0	4	p_vlm
arg	104:43	104:59	3	VLM_CHANGE_MEDIA
water	104:43	0:0	4	VLM_CHANGE_MEDIA
arg	104:61	104:67	3	p_cfg
water	104:61	0:0	4	p_cfg
water	104:68	0:0	2	;
call	105:4	105:28	2	vlm_media_Delete
arg	105:22	105:28	3	p_cfg
water	105:22	0:0	4	p_cfg
water	105:29	0:0	2	;
op	106:4	0:0	2	*
water	106:5	0:0	2	pp_status
op	106:15	0:0	2	=
call	106:17	106:47	2	vlm_MessageSimpleNew
arg	106:39	106:47	3	psz_cmd
water	106:39	0:0	4	psz_cmd
water	106:48	0:0	2	;
return	107:4	107:19	2	i_result
water	107:11	0:0	3	i_result
label	108:0	108:5	2	error :
if	109:4	114:4	2	(p_cfg)
cond	109:8	109:8	3	p_cfg
water	109:8	0:0	4	p_cfg
stmts	110:4	114:4	3	
water	110:4	0:0	4	{
if	111:8	112:66	4	(b_new)
cond	111:12	111:12	5	b_new
water	111:12	0:0	6	b_new
stmts	112:12	112:66	5	
call	112:12	112:65	6	vlm_ControlInternal
arg	112:33	112:38	7	p_vlm
water	112:33	0:0	8	p_vlm
arg	112:40	112:53	7	VLM_DEL_MEDIA
water	112:40	0:0	8	VLM_DEL_MEDIA
arg	112:55	112:65	7	p_cfg->id
water	112:55	0:0	8	p_cfg
op	112:60	0:0	8	->
water	112:62	0:0	8	id
water	112:66	0:0	6	;
call	113:8	113:32	4	vlm_media_Delete
arg	113:26	113:32	5	p_cfg
water	113:26	0:0	6	p_cfg
water	113:33	0:0	4	;
water	114:4	0:0	4	}
return	115:4	115:23	2	VLC_EGENERIC
water	115:11	0:0	3	VLC_EGENERIC
