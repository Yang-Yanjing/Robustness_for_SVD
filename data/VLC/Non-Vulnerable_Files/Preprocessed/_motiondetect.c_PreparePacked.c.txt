func	2:0	33:0	0	static int	PreparePacked
params	2:24	0:0	1	
param	2:26	2:44	2	filter_t *	p_filter
param	2:46	2:64	2	picture_t *	p_inpic
param	2:66	2:85	2	int *	pi_pix_offset
stmnts	0:0	32:22	1	
decl	4:4	4:41	2	filter_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	p_filter
op	4:34	0:0	2	->
water	4:36	0:0	2	p_sys
decl	5:4	5:57	2	const video_format_t	*p_fmt
op	5:32	0:0	2	=
op	5:34	0:0	2	&
water	5:35	0:0	2	p_filter
op	5:43	0:0	2	->
water	5:45	0:0	2	fmt_in
op	5:51	0:0	2	.
water	5:52	0:0	2	video
decl	6:4	6:42	2	int	i_y_offset
water	6:18	0:0	2	,
decl	6:4	6:42	2	int	i_u_offset
water	6:30	0:0	2	,
decl	6:4	6:42	2	int	i_v_offset
if	7:4	13:4	2	(GetPackedYuvOffsets (p_fmt -> i_chroma ,& i_y_offset ,& i_u_offset ,& i_v_offset ))
cond	7:8	8:67	3	GetPackedYuvOffsets (p_fmt -> i_chroma ,& i_y_offset ,& i_u_offset ,& i_v_offset )
call	7:8	8:67	4	GetPackedYuvOffsets
arg	7:29	7:44	5	p_fmt->i_chroma
water	7:29	0:0	6	p_fmt
op	7:34	0:0	6	->
water	7:36	0:0	6	i_chroma
arg	8:29	8:40	5	&i_y_offset
op	8:29	0:0	6	&
water	8:30	0:0	6	i_y_offset
arg	8:42	8:53	5	&i_u_offset
op	8:42	0:0	6	&
water	8:43	0:0	6	i_u_offset
arg	8:55	8:67	5	&i_v_offset
op	8:55	0:0	6	&
water	8:56	0:0	6	i_v_offset
stmts	9:4	13:4	3	
water	9:4	0:0	4	{
call	10:8	11:42	4	msg_Warn
arg	10:18	10:26	5	p_filter
water	10:18	0:0	6	p_filter
arg	10:28	10:62	5	"Unsupported input chroma (%4.4s)"
water	10:28	0:0	6	"Unsupported input chroma (%4.4s)"
arg	11:18	11:42	5	(char*)&p_fmt->i_chroma
water	11:18	0:0	6	(
water	11:19	0:0	6	char
op	11:23	0:0	6	*
water	11:24	0:0	6	)
op	11:25	0:0	6	&
water	11:26	0:0	6	p_fmt
op	11:31	0:0	6	->
water	11:33	0:0	6	i_chroma
water	11:43	0:0	4	;
return	12:8	12:27	4	VLC_EGENERIC
water	12:15	0:0	5	VLC_EGENERIC
water	13:4	0:0	4	}
op	14:4	0:0	2	*
water	14:5	0:0	2	pi_pix_offset
op	14:19	0:0	2	=
water	14:21	0:0	2	i_y_offset
water	14:31	0:0	2	;
decl	16:4	16:59	2	uint8_t	*p_oldpix
op	16:24	0:0	2	=
water	16:26	0:0	2	p_sys
op	16:31	0:0	2	->
water	16:33	0:0	2	p_old
op	16:38	0:0	2	->
water	16:40	0:0	2	p
op	16:41	0:0	2	[
water	16:42	0:0	2	Y_PLANE
op	16:49	0:0	2	]
op	16:50	0:0	2	.
water	16:51	0:0	2	p_pixels
decl	17:4	17:60	2	const int	i_old_pitch
op	17:26	0:0	2	=
water	17:28	0:0	2	p_sys
op	17:33	0:0	2	->
water	17:35	0:0	2	p_old
op	17:40	0:0	2	->
water	17:42	0:0	2	p
op	17:43	0:0	2	[
water	17:44	0:0	2	Y_PLANE
op	17:51	0:0	2	]
op	17:52	0:0	2	.
water	17:53	0:0	2	i_pitch
decl	18:4	18:57	2	const uint8_t	*p_inpix
op	18:27	0:0	2	=
water	18:29	0:0	2	p_inpic
op	18:36	0:0	2	->
water	18:38	0:0	2	p
op	18:39	0:0	2	[
water	18:40	0:0	2	Y_PLANE
op	18:47	0:0	2	]
op	18:48	0:0	2	.
water	18:49	0:0	2	p_pixels
decl	19:4	19:55	2	const int	i_src_pitch
op	19:26	0:0	2	=
water	19:28	0:0	2	p_inpic
op	19:35	0:0	2	->
water	19:37	0:0	2	p
op	19:38	0:0	2	[
water	19:39	0:0	2	Y_PLANE
op	19:46	0:0	2	]
op	19:47	0:0	2	.
water	19:48	0:0	2	i_pitch
for	20:4	31:4	2	(unsigned y = 0 ;y < p_fmt -> i_height;y ++)
forinit	20:9	20:23	3	unsigned y = 0 ;
water	20:9	0:0	4	unsigned
water	20:18	0:0	4	y
op	20:20	0:0	4	=
water	20:22	0:0	4	0
water	20:23	0:0	4	;
cond	20:25	20:36	3	y < p_fmt -> i_height
water	20:25	0:0	4	y
op	20:27	0:0	4	<
water	20:29	0:0	4	p_fmt
op	20:34	0:0	4	->
water	20:36	0:0	4	i_height
forexpr	20:46	20:47	3	y ++
water	20:46	0:0	4	y
op	20:47	0:0	4	++
stmts	21:4	31:4	3	
water	21:4	0:0	4	{
for	22:8	30:8	4	(unsigned x = 0 ;x < p_fmt -> i_width;x += 2)
forinit	22:13	22:27	5	unsigned x = 0 ;
water	22:13	0:0	6	unsigned
water	22:22	0:0	6	x
op	22:24	0:0	6	=
water	22:26	0:0	6	0
water	22:27	0:0	6	;
cond	22:29	22:40	5	x < p_fmt -> i_width
water	22:29	0:0	6	x
op	22:31	0:0	6	<
water	22:33	0:0	6	p_fmt
op	22:38	0:0	6	->
water	22:40	0:0	6	i_width
forexpr	22:49	22:52	5	x += 2
water	22:49	0:0	6	x
op	22:50	0:0	6	+=
water	22:52	0:0	6	2
stmts	23:8	30:8	5	
water	23:8	0:0	6	{
decl	24:12	24:17	6	int	d
water	25:12	0:0	6	d
op	25:14	0:0	6	=
call	25:16	25:100	6	abs
arg	25:21	25:100	7	p_inpix[y*i_src_pitch+2*x+i_u_offset]-p_oldpix[y*i_old_pitch+2*x+i_u_offset]
water	25:21	0:0	8	p_inpix
op	25:28	0:0	8	[
water	25:29	0:0	8	y
op	25:30	0:0	8	*
water	25:31	0:0	8	i_src_pitch
op	25:42	0:0	8	+
water	25:43	0:0	8	2
op	25:44	0:0	8	*
water	25:45	0:0	8	x
op	25:46	0:0	8	+
water	25:47	0:0	8	i_u_offset
op	25:57	0:0	8	]
op	25:59	0:0	8	-
water	25:61	0:0	8	p_oldpix
op	25:69	0:0	8	[
water	25:70	0:0	8	y
op	25:71	0:0	8	*
water	25:72	0:0	8	i_old_pitch
op	25:83	0:0	8	+
water	25:84	0:0	8	2
op	25:85	0:0	8	*
water	25:86	0:0	8	x
op	25:87	0:0	8	+
water	25:88	0:0	8	i_u_offset
op	25:98	0:0	8	]
op	25:102	0:0	6	+
call	26:16	26:100	6	abs
arg	26:21	26:100	7	p_inpix[y*i_src_pitch+2*x+i_v_offset]-p_oldpix[y*i_old_pitch+2*x+i_v_offset]
water	26:21	0:0	8	p_inpix
op	26:28	0:0	8	[
water	26:29	0:0	8	y
op	26:30	0:0	8	*
water	26:31	0:0	8	i_src_pitch
op	26:42	0:0	8	+
water	26:43	0:0	8	2
op	26:44	0:0	8	*
water	26:45	0:0	8	x
op	26:46	0:0	8	+
water	26:47	0:0	8	i_v_offset
op	26:57	0:0	8	]
op	26:59	0:0	8	-
water	26:61	0:0	8	p_oldpix
op	26:69	0:0	8	[
water	26:70	0:0	8	y
op	26:71	0:0	8	*
water	26:72	0:0	8	i_old_pitch
op	26:83	0:0	8	+
water	26:84	0:0	8	2
op	26:85	0:0	8	*
water	26:86	0:0	8	x
op	26:87	0:0	8	+
water	26:88	0:0	8	i_v_offset
op	26:98	0:0	8	]
water	26:101	0:0	6	;
for	27:12	29:117	6	( int i = 0 ;i < 2;i ++)
forinit	0:0	27:26	7	 int i = 0 ;
decl	27:17	27:26	8	int	i
op	27:23	0:0	8	=
water	27:25	0:0	8	0
cond	27:28	27:32	7	i < 2
water	27:28	0:0	8	i
op	27:30	0:0	8	<
water	27:32	0:0	8	2
forexpr	27:35	27:36	7	i ++
water	27:35	0:0	8	i
op	27:36	0:0	8	++
stmts	28:16	29:117	7	
water	28:16	0:0	8	p_sys
op	28:21	0:0	8	->
water	28:23	0:0	8	p_buf2
op	28:29	0:0	8	[
water	28:30	0:0	8	y
op	28:31	0:0	8	*
water	28:32	0:0	8	p_fmt
op	28:37	0:0	8	->
water	28:39	0:0	8	i_width
op	28:46	0:0	8	+
water	28:47	0:0	8	x
op	28:48	0:0	8	+
water	28:49	0:0	8	i
op	28:50	0:0	8	]
op	28:52	0:0	8	=
call	29:20	29:112	8	abs
arg	29:25	29:112	9	p_inpix[y*i_src_pitch+2*(x+i)+i_y_offset]-p_oldpix[y*i_old_pitch+2*(x+i)+i_y_offset]
water	29:25	0:0	10	p_inpix
op	29:32	0:0	10	[
water	29:33	0:0	10	y
op	29:34	0:0	10	*
water	29:35	0:0	10	i_src_pitch
op	29:46	0:0	10	+
water	29:47	0:0	10	2
op	29:48	0:0	10	*
water	29:49	0:0	10	(
water	29:50	0:0	10	x
op	29:51	0:0	10	+
water	29:52	0:0	10	i
water	29:53	0:0	10	)
op	29:54	0:0	10	+
water	29:55	0:0	10	i_y_offset
op	29:65	0:0	10	]
op	29:67	0:0	10	-
water	29:69	0:0	10	p_oldpix
op	29:77	0:0	10	[
water	29:78	0:0	10	y
op	29:79	0:0	10	*
water	29:80	0:0	10	i_old_pitch
op	29:91	0:0	10	+
water	29:92	0:0	10	2
op	29:93	0:0	10	*
water	29:94	0:0	10	(
water	29:95	0:0	10	x
op	29:96	0:0	10	+
water	29:97	0:0	10	i
water	29:98	0:0	10	)
op	29:99	0:0	10	+
water	29:100	0:0	10	i_y_offset
op	29:110	0:0	10	]
op	29:114	0:0	8	+
water	29:116	0:0	8	d
water	29:117	0:0	8	;
water	30:8	0:0	6	}
water	31:4	0:0	4	}
return	32:4	32:22	2	VLC_SUCCESS
water	32:11	0:0	3	VLC_SUCCESS
