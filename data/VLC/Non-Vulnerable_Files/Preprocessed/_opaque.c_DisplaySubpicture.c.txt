func	2:0	64:0	0	static void	DisplaySubpicture
params	2:29	0:0	1	
param	2:30	2:48	2	vout_display_t *	vd
param	2:50	2:74	2	subpicture_t *	subpicture
stmnts	0:0	63:30	1	
decl	4:4	4:37	2	vout_display_sys_t	*sys
op	4:28	0:0	2	=
water	4:30	0:0	2	vd
op	4:32	0:0	2	->
water	4:34	0:0	2	sys
decl	5:4	5:21	2	struct md5_s	hash
call	6:4	6:17	2	InitMD5
arg	6:12	6:17	3	&hash
op	6:12	0:0	4	&
water	6:13	0:0	4	hash
water	6:18	0:0	2	;
if	7:4	20:4	2	(subpicture)
cond	7:8	7:8	3	subpicture
water	7:8	0:0	4	subpicture
stmts	7:20	20:4	3	
water	7:20	0:0	4	{
for	8:8	19:8	4	( subpicture_region_t * r = subpicture -> p_region ;r != NULL;r = r -> p_next)
forinit	0:0	8:58	5	 subpicture_region_t * r = subpicture -> p_region ;
decl	8:13	8:58	6	subpicture_region_t	*r
op	8:36	0:0	6	=
water	8:38	0:0	6	subpicture
op	8:48	0:0	6	->
water	8:50	0:0	6	p_region
cond	8:60	8:65	5	r != NULL
water	8:60	0:0	6	r
op	8:62	0:0	6	!=
water	8:65	0:0	6	NULL
forexpr	8:71	8:78	5	r = r -> p_next
water	8:71	0:0	6	r
op	8:73	0:0	6	=
water	8:75	0:0	6	r
op	8:76	0:0	6	->
water	8:78	0:0	6	p_next
stmts	8:86	19:8	5	
water	8:86	0:0	6	{
call	9:12	9:49	6	AddMD5
arg	9:19	9:24	7	&hash
op	9:19	0:0	8	&
water	9:20	0:0	8	hash
arg	9:26	9:33	7	&r->i_x
op	9:26	0:0	8	&
water	9:27	0:0	8	r
op	9:28	0:0	8	->
water	9:30	0:0	8	i_x
arg	9:35	9:49	7	sizeof(r->i_x)
op	9:35	0:0	8	sizeof
water	9:41	0:0	8	(
water	9:42	0:0	8	r
op	9:43	0:0	8	->
water	9:45	0:0	8	i_x
water	9:48	0:0	8	)
water	9:50	0:0	6	;
call	10:12	10:49	6	AddMD5
arg	10:19	10:24	7	&hash
op	10:19	0:0	8	&
water	10:20	0:0	8	hash
arg	10:26	10:33	7	&r->i_y
op	10:26	0:0	8	&
water	10:27	0:0	8	r
op	10:28	0:0	8	->
water	10:30	0:0	8	i_y
arg	10:35	10:49	7	sizeof(r->i_y)
op	10:35	0:0	8	sizeof
water	10:41	0:0	8	(
water	10:42	0:0	8	r
op	10:43	0:0	8	->
water	10:45	0:0	8	i_y
water	10:48	0:0	8	)
water	10:50	0:0	6	;
call	11:12	11:81	6	AddMD5
arg	11:19	11:24	7	&hash
op	11:19	0:0	8	&
water	11:20	0:0	8	hash
arg	11:26	11:49	7	&r->fmt.i_visible_width
op	11:26	0:0	8	&
water	11:27	0:0	8	r
op	11:28	0:0	8	->
water	11:30	0:0	8	fmt
op	11:33	0:0	8	.
water	11:34	0:0	8	i_visible_width
arg	11:51	11:81	7	sizeof(r->fmt.i_visible_width)
op	11:51	0:0	8	sizeof
water	11:57	0:0	8	(
water	11:58	0:0	8	r
op	11:59	0:0	8	->
water	11:61	0:0	8	fmt
op	11:64	0:0	8	.
water	11:65	0:0	8	i_visible_width
water	11:80	0:0	8	)
water	11:82	0:0	6	;
call	12:12	12:83	6	AddMD5
arg	12:19	12:24	7	&hash
op	12:19	0:0	8	&
water	12:20	0:0	8	hash
arg	12:26	12:50	7	&r->fmt.i_visible_height
op	12:26	0:0	8	&
water	12:27	0:0	8	r
op	12:28	0:0	8	->
water	12:30	0:0	8	fmt
op	12:33	0:0	8	.
water	12:34	0:0	8	i_visible_height
arg	12:52	12:83	7	sizeof(r->fmt.i_visible_height)
op	12:52	0:0	8	sizeof
water	12:58	0:0	8	(
water	12:59	0:0	8	r
op	12:60	0:0	8	->
water	12:62	0:0	8	fmt
op	12:65	0:0	8	.
water	12:66	0:0	8	i_visible_height
water	12:82	0:0	8	)
water	12:84	0:0	6	;
call	13:12	13:71	6	AddMD5
arg	13:19	13:24	7	&hash
op	13:19	0:0	8	&
water	13:20	0:0	8	hash
arg	13:26	13:44	7	&r->fmt.i_x_offset
op	13:26	0:0	8	&
water	13:27	0:0	8	r
op	13:28	0:0	8	->
water	13:30	0:0	8	fmt
op	13:33	0:0	8	.
water	13:34	0:0	8	i_x_offset
arg	13:46	13:71	7	sizeof(r->fmt.i_x_offset)
op	13:46	0:0	8	sizeof
water	13:52	0:0	8	(
water	13:53	0:0	8	r
op	13:54	0:0	8	->
water	13:56	0:0	8	fmt
op	13:59	0:0	8	.
water	13:60	0:0	8	i_x_offset
water	13:70	0:0	8	)
water	13:72	0:0	6	;
call	14:12	14:71	6	AddMD5
arg	14:19	14:24	7	&hash
op	14:19	0:0	8	&
water	14:20	0:0	8	hash
arg	14:26	14:44	7	&r->fmt.i_y_offset
op	14:26	0:0	8	&
water	14:27	0:0	8	r
op	14:28	0:0	8	->
water	14:30	0:0	8	fmt
op	14:33	0:0	8	.
water	14:34	0:0	8	i_y_offset
arg	14:46	14:71	7	sizeof(r->fmt.i_y_offset)
op	14:46	0:0	8	sizeof
water	14:52	0:0	8	(
water	14:53	0:0	8	r
op	14:54	0:0	8	->
water	14:56	0:0	8	fmt
op	14:59	0:0	8	.
water	14:60	0:0	8	i_y_offset
water	14:70	0:0	8	)
water	14:72	0:0	6	;
decl	15:12	16:88	6	const int	pixels_offset
op	15:36	0:0	6	=
water	15:38	0:0	6	r
op	15:39	0:0	6	->
water	15:41	0:0	6	fmt
op	15:44	0:0	6	.
water	15:45	0:0	6	i_y_offset
op	15:56	0:0	6	*
water	15:58	0:0	6	r
op	15:59	0:0	6	->
water	15:61	0:0	6	p_picture
op	15:70	0:0	6	->
water	15:72	0:0	6	p
op	15:73	0:0	6	->
water	15:75	0:0	6	i_pitch
op	15:83	0:0	6	+
water	16:38	0:0	6	r
op	16:39	0:0	6	->
water	16:41	0:0	6	fmt
op	16:44	0:0	6	.
water	16:45	0:0	6	i_x_offset
op	16:56	0:0	6	*
water	16:58	0:0	6	r
op	16:59	0:0	6	->
water	16:61	0:0	6	p_picture
op	16:70	0:0	6	->
water	16:72	0:0	6	p
op	16:73	0:0	6	->
water	16:75	0:0	6	i_pixel_pitch
for	17:12	18:125	6	( int y = 0 ;y < r -> fmt . i_visible_height;y ++)
forinit	0:0	17:26	7	 int y = 0 ;
decl	17:17	17:26	8	int	y
op	17:23	0:0	8	=
water	17:25	0:0	8	0
cond	17:28	17:39	7	y < r -> fmt . i_visible_height
water	17:28	0:0	8	y
op	17:30	0:0	8	<
water	17:32	0:0	8	r
op	17:33	0:0	8	->
water	17:35	0:0	8	fmt
op	17:38	0:0	8	.
water	17:39	0:0	8	i_visible_height
forexpr	17:57	17:58	7	y ++
water	17:57	0:0	8	y
op	17:58	0:0	8	++
stmts	18:16	18:125	7	
call	18:16	18:124	8	AddMD5
arg	18:23	18:28	9	&hash
op	18:23	0:0	10	&
water	18:24	0:0	10	hash
arg	18:30	18:100	9	&r->p_picture->p->p_pixels[pixels_offset+y*r->p_picture->p->i_pitch]
op	18:30	0:0	10	&
water	18:31	0:0	10	r
op	18:32	0:0	10	->
water	18:34	0:0	10	p_picture
op	18:43	0:0	10	->
water	18:45	0:0	10	p
op	18:46	0:0	10	->
water	18:48	0:0	10	p_pixels
op	18:56	0:0	10	[
water	18:57	0:0	10	pixels_offset
op	18:71	0:0	10	+
water	18:73	0:0	10	y
op	18:74	0:0	10	*
water	18:75	0:0	10	r
op	18:76	0:0	10	->
water	18:78	0:0	10	p_picture
op	18:87	0:0	10	->
water	18:89	0:0	10	p
op	18:90	0:0	10	->
water	18:92	0:0	10	i_pitch
op	18:99	0:0	10	]
arg	18:102	18:124	9	r->fmt.i_visible_width
water	18:102	0:0	10	r
op	18:103	0:0	10	->
water	18:105	0:0	10	fmt
op	18:108	0:0	10	.
water	18:109	0:0	10	i_visible_width
water	18:125	0:0	8	;
water	19:8	0:0	6	}
water	20:4	0:0	4	}
call	21:4	21:16	2	EndMD5
arg	21:11	21:16	3	&hash
op	21:11	0:0	4	&
water	21:12	0:0	4	hash
water	21:17	0:0	2	;
if	22:4	23:14	2	(!memcmp (hash . buf ,sys -> hash ,16 ))
cond	22:8	22:39	3	!memcmp (hash . buf ,sys -> hash ,16 )
op	22:8	0:0	4	!
call	22:9	22:39	4	memcmp
arg	22:16	22:24	5	hash.buf
water	22:16	0:0	6	hash
op	22:20	0:0	6	.
water	22:21	0:0	6	buf
arg	22:26	22:35	5	sys->hash
water	22:26	0:0	6	sys
op	22:29	0:0	6	->
water	22:31	0:0	6	hash
arg	22:37	22:39	5	16
water	22:37	0:0	6	16
stmts	23:8	23:14	3	
return	23:8	23:14	4	
call	24:4	24:34	2	memcpy
arg	24:11	24:20	3	sys->hash
water	24:11	0:0	4	sys
op	24:14	0:0	4	->
water	24:16	0:0	4	hash
arg	24:22	24:30	3	hash.buf
water	24:22	0:0	4	hash
op	24:26	0:0	4	.
water	24:27	0:0	4	buf
arg	24:32	24:34	3	16
water	24:32	0:0	4	16
water	24:35	0:0	2	;
decl	25:4	25:52	2	jobject	jsurf
op	25:18	0:0	2	=
call	25:20	25:51	3	jni_LockAndGetSubtitlesSurface
if	26:4	30:4	2	(sys -> window && jsurf != sys -> jsurf)
cond	26:8	26:37	3	sys -> window && jsurf != sys -> jsurf
water	26:8	0:0	4	sys
op	26:11	0:0	4	->
water	26:13	0:0	4	window
op	26:20	0:0	4	&&
water	26:23	0:0	4	jsurf
op	26:29	0:0	4	!=
water	26:32	0:0	4	sys
op	26:35	0:0	4	->
water	26:37	0:0	4	jsurf
stmts	27:4	30:4	3	
water	27:4	0:0	4	{
call	28:8	28:49	4	sys->native_window.winRelease
arg	28:38	28:49	5	sys->window
water	28:38	0:0	6	sys
op	28:41	0:0	6	->
water	28:43	0:0	6	window
water	28:50	0:0	4	;
water	29:8	0:0	4	sys
op	29:11	0:0	4	->
water	29:13	0:0	4	window
op	29:20	0:0	4	=
water	29:22	0:0	4	NULL
water	29:26	0:0	4	;
water	30:4	0:0	4	}
water	31:4	0:0	2	sys
op	31:7	0:0	2	->
water	31:9	0:0	2	jsurf
op	31:15	0:0	2	=
water	31:17	0:0	2	jsurf
water	31:22	0:0	2	;
if	32:4	38:4	2	(! sys -> window)
cond	32:8	32:14	3	! sys -> window
op	32:8	0:0	4	!
water	32:9	0:0	4	sys
op	32:12	0:0	4	->
water	32:14	0:0	4	window
stmts	33:4	38:4	3	
water	33:4	0:0	4	{
decl	34:8	34:21	4	JNIEnv	*p_env
call	35:8	35:45	4	jni_attach_thread
arg	35:26	35:32	5	&p_env
op	35:26	0:0	6	&
water	35:27	0:0	6	p_env
arg	35:34	35:45	5	THREAD_NAME
water	35:34	0:0	6	THREAD_NAME
water	35:46	0:0	4	;
water	36:8	0:0	4	sys
op	36:11	0:0	4	->
water	36:13	0:0	4	window
op	36:20	0:0	4	=
call	36:22	36:68	4	sys->native_window.winFromSurface
arg	36:56	36:61	5	p_env
water	36:56	0:0	6	p_env
arg	36:63	36:68	5	jsurf
water	36:63	0:0	6	jsurf
water	36:69	0:0	4	;
call	37:8	37:26	4	jni_detach_thread
water	37:27	0:0	4	;
water	38:4	0:0	4	}
decl	39:4	39:36	2	ANativeWindow_Buffer	buf
op	39:29	0:0	2	=
water	39:31	0:0	2	{
water	39:33	0:0	2	0
water	39:35	0:0	2	}
decl	40:4	40:69	2	int32_t	err
op	40:16	0:0	2	=
call	40:18	40:68	3	sys->native_window.winLock
arg	40:45	40:56	4	sys->window
water	40:45	0:0	5	sys
op	40:48	0:0	5	->
water	40:50	0:0	5	window
arg	40:58	40:62	4	&buf
op	40:58	0:0	5	&
water	40:59	0:0	5	buf
arg	40:64	40:68	4	NULL
water	40:64	0:0	5	NULL
if	41:4	44:4	2	(err)
cond	41:8	41:8	3	err
water	41:8	0:0	4	err
stmts	41:13	44:4	3	
water	41:13	0:0	4	{
call	42:8	42:33	4	jni_UnlockAndroidSurface
water	42:34	0:0	4	;
return	43:8	43:14	4	
water	44:4	0:0	4	}
if	45:4	61:4	2	(buf . width >= sys -> fmt . i_width && buf . height >= sys -> fmt . i_height)
cond	45:8	45:64	3	buf . width >= sys -> fmt . i_width && buf . height >= sys -> fmt . i_height
water	45:8	0:0	4	buf
op	45:11	0:0	4	.
water	45:12	0:0	4	width
op	45:18	0:0	4	>=
water	45:21	0:0	4	sys
op	45:24	0:0	4	->
water	45:26	0:0	4	fmt
op	45:29	0:0	4	.
water	45:30	0:0	4	i_width
op	45:38	0:0	4	&&
water	45:41	0:0	4	buf
op	45:44	0:0	4	.
water	45:45	0:0	4	height
op	45:52	0:0	4	>=
water	45:55	0:0	4	sys
op	45:58	0:0	4	->
water	45:60	0:0	4	fmt
op	45:63	0:0	4	.
water	45:64	0:0	4	i_height
stmts	46:4	61:4	3	
water	46:4	0:0	4	{
decl	48:8	48:51	4	picture_t	*picture
op	48:27	0:0	4	=
water	48:29	0:0	4	sys
op	48:32	0:0	4	->
water	48:34	0:0	4	subtitles_picture
water	49:8	0:0	4	picture
op	49:15	0:0	4	->
water	49:17	0:0	4	p
op	49:18	0:0	4	[
water	49:19	0:0	4	0
op	49:20	0:0	4	]
op	49:21	0:0	4	.
water	49:22	0:0	4	p_pixels
op	49:31	0:0	4	=
water	49:33	0:0	4	(
water	49:34	0:0	4	uint8_t
op	49:41	0:0	4	*
water	49:42	0:0	4	)
water	49:43	0:0	4	buf
op	49:46	0:0	4	.
water	49:47	0:0	4	bits
water	49:51	0:0	4	;
water	50:8	0:0	4	picture
op	50:15	0:0	4	->
water	50:17	0:0	4	p
op	50:18	0:0	4	[
water	50:19	0:0	4	0
op	50:20	0:0	4	]
op	50:21	0:0	4	.
water	50:22	0:0	4	i_lines
op	50:30	0:0	4	=
water	50:32	0:0	4	buf
op	50:35	0:0	4	.
water	50:36	0:0	4	height
water	50:42	0:0	4	;
water	51:8	0:0	4	picture
op	51:15	0:0	4	->
water	51:17	0:0	4	p
op	51:18	0:0	4	[
water	51:19	0:0	4	0
op	51:20	0:0	4	]
op	51:21	0:0	4	.
water	51:22	0:0	4	i_pitch
op	51:30	0:0	4	=
water	51:32	0:0	4	picture
op	51:39	0:0	4	->
water	51:41	0:0	4	p
op	51:42	0:0	4	[
water	51:43	0:0	4	0
op	51:44	0:0	4	]
op	51:45	0:0	4	.
water	51:46	0:0	4	i_pixel_pitch
op	51:60	0:0	4	*
water	51:62	0:0	4	buf
op	51:65	0:0	4	.
water	51:66	0:0	4	stride
water	51:72	0:0	4	;
call	53:8	53:87	4	memset
arg	53:15	53:37	5	picture->p[0].p_pixels
water	53:15	0:0	6	picture
op	53:22	0:0	6	->
water	53:24	0:0	6	p
op	53:25	0:0	6	[
water	53:26	0:0	6	0
op	53:27	0:0	6	]
op	53:28	0:0	6	.
water	53:29	0:0	6	p_pixels
arg	53:39	53:40	5	0
water	53:39	0:0	6	0
arg	53:42	53:87	5	picture->p[0].i_pitch*picture->p[0].i_lines
water	53:42	0:0	6	picture
op	53:49	0:0	6	->
water	53:51	0:0	6	p
op	53:52	0:0	6	[
water	53:53	0:0	6	0
op	53:54	0:0	6	]
op	53:55	0:0	6	.
water	53:56	0:0	6	i_pitch
op	53:64	0:0	6	*
water	53:66	0:0	6	picture
op	53:73	0:0	6	->
water	53:75	0:0	6	p
op	53:76	0:0	6	[
water	53:77	0:0	6	0
op	53:78	0:0	6	]
op	53:79	0:0	6	.
water	53:80	0:0	6	i_lines
water	53:88	0:0	4	;
if	54:8	60:8	4	(subpicture)
cond	54:12	54:12	5	subpicture
water	54:12	0:0	6	subpicture
stmts	55:8	60:8	5	
water	55:8	0:0	6	{
if	57:12	58:84	6	(unlikely (! sys -> p_spu_blend ))
cond	57:16	57:42	7	unlikely (! sys -> p_spu_blend )
call	57:16	57:42	8	unlikely
arg	57:25	57:42	9	!sys->p_spu_blend
op	57:25	0:0	10	!
water	57:26	0:0	10	sys
op	57:29	0:0	10	->
water	57:31	0:0	10	p_spu_blend
stmts	58:16	58:84	7	
water	58:16	0:0	8	sys
op	58:19	0:0	8	->
water	58:21	0:0	8	p_spu_blend
op	58:33	0:0	8	=
call	58:35	58:83	8	filter_NewBlend
arg	58:51	58:65	9	VLC_OBJECT(vd)
call	58:51	58:64	10	VLC_OBJECT
arg	58:62	58:64	11	vd
water	58:62	0:0	12	vd
arg	58:67	58:83	9	&picture->format
op	58:67	0:0	10	&
water	58:68	0:0	10	picture
op	58:75	0:0	10	->
water	58:77	0:0	10	format
water	58:84	0:0	8	;
call	59:12	59:73	6	picture_BlendSubpicture
arg	59:36	59:43	7	picture
water	59:36	0:0	8	picture
arg	59:45	59:61	7	sys->p_spu_blend
water	59:45	0:0	8	sys
op	59:48	0:0	8	->
water	59:50	0:0	8	p_spu_blend
arg	59:63	59:73	7	subpicture
water	59:63	0:0	8	subpicture
water	59:74	0:0	6	;
water	60:8	0:0	6	}
water	61:4	0:0	4	}
call	62:4	62:48	2	sys->native_window.unlockAndPost
arg	62:37	62:48	3	sys->window
water	62:37	0:0	4	sys
op	62:40	0:0	4	->
water	62:42	0:0	4	window
water	62:49	0:0	2	;
call	63:4	63:29	2	jni_UnlockAndroidSurface
water	63:30	0:0	2	;
