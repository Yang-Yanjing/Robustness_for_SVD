func	2:0	62:0	0	void	spu_PutSubpicture
params	2:22	0:0	1	
param	2:23	2:33	2	spu_t *	spu
param	2:35	2:55	2	subpicture_t *	subpic
stmnts	0:0	61:32	1	
decl	4:4	4:31	2	spu_private_t	*sys
op	4:23	0:0	2	=
water	4:25	0:0	2	spu
op	4:28	0:0	2	->
water	4:30	0:0	2	p
call	6:4	6:29	2	vlc_mutex_lock
arg	6:19	6:29	3	&sys->lock
op	6:19	0:0	4	&
water	6:20	0:0	4	sys
op	6:23	0:0	4	->
water	6:25	0:0	4	lock
water	6:30	0:0	2	;
decl	7:4	7:49	2	char	*chain_update
op	7:23	0:0	2	=
water	7:25	0:0	2	sys
op	7:28	0:0	2	->
water	7:30	0:0	2	filter_chain_update
water	8:4	0:0	2	sys
op	8:7	0:0	2	->
water	8:9	0:0	2	filter_chain_update
op	8:29	0:0	2	=
water	8:31	0:0	2	NULL
water	8:35	0:0	2	;
call	9:4	9:31	2	vlc_mutex_unlock
arg	9:21	9:31	3	&sys->lock
op	9:21	0:0	4	&
water	9:22	0:0	4	sys
op	9:25	0:0	4	->
water	9:27	0:0	4	lock
water	9:32	0:0	2	;
decl	10:4	10:30	2	bool	is_left_empty
op	10:23	0:0	2	=
water	10:25	0:0	2	false
call	11:4	11:42	2	vlc_mutex_lock
arg	11:19	11:42	3	&sys->filter_chain_lock
op	11:19	0:0	4	&
water	11:20	0:0	4	sys
op	11:23	0:0	4	->
water	11:25	0:0	4	filter_chain_lock
water	11:43	0:0	2	;
if	12:4	23:4	2	(chain_update)
cond	12:8	12:8	3	chain_update
water	12:8	0:0	4	chain_update
stmts	12:22	23:4	3	
water	12:22	0:0	4	{
if	13:8	16:8	4	(* chain_update)
cond	13:12	13:13	5	* chain_update
op	13:12	0:0	6	*
water	13:13	0:0	6	chain_update
stmts	13:27	16:8	5	
water	13:27	0:0	6	{
call	14:12	14:60	6	filter_chain_Reset
arg	14:31	14:48	7	sys->filter_chain
water	14:31	0:0	8	sys
op	14:34	0:0	8	->
water	14:36	0:0	8	filter_chain
arg	14:50	14:54	7	NULL
water	14:50	0:0	8	NULL
arg	14:56	14:60	7	NULL
water	14:56	0:0	8	NULL
water	14:61	0:0	6	;
call	15:12	15:76	6	filter_chain_AppendFromString
arg	15:42	15:62	7	spu->p->filter_chain
water	15:42	0:0	8	spu
op	15:45	0:0	8	->
water	15:47	0:0	8	p
op	15:48	0:0	8	->
water	15:50	0:0	8	filter_chain
arg	15:64	15:76	7	chain_update
water	15:64	0:0	8	chain_update
water	15:77	0:0	6	;
water	16:8	0:0	6	}
else	17:8	18:61	4
stmts	17:13	18:61	5	
if	17:13	18:61	6	(filter_chain_GetLength (spu -> p -> filter_chain ) > 0)
cond	17:17	17:64	7	filter_chain_GetLength (spu -> p -> filter_chain ) > 0
call	17:17	17:60	8	filter_chain_GetLength
arg	17:40	17:60	9	spu->p->filter_chain
water	17:40	0:0	10	spu
op	17:43	0:0	10	->
water	17:45	0:0	10	p
op	17:46	0:0	10	->
water	17:48	0:0	10	filter_chain
op	17:62	0:0	8	>
water	17:64	0:0	8	0
stmts	18:12	18:61	7	
call	18:12	18:60	8	filter_chain_Reset
arg	18:31	18:48	9	sys->filter_chain
water	18:31	0:0	10	sys
op	18:34	0:0	10	->
water	18:36	0:0	10	filter_chain
arg	18:50	18:54	9	NULL
water	18:50	0:0	10	NULL
arg	18:56	18:60	9	NULL
water	18:56	0:0	10	NULL
water	18:61	0:0	8	;
water	22:8	0:0	4	is_left_empty
op	22:22	0:0	4	=
water	22:24	0:0	4	(
call	22:25	22:68	4	filter_chain_GetLength
arg	22:48	22:68	5	spu->p->filter_chain
water	22:48	0:0	6	spu
op	22:51	0:0	6	->
water	22:53	0:0	6	p
op	22:54	0:0	6	->
water	22:56	0:0	6	filter_chain
op	22:70	0:0	4	==
water	22:73	0:0	4	0
water	22:74	0:0	4	)
water	22:75	0:0	4	;
water	23:4	0:0	4	}
call	24:4	24:44	2	vlc_mutex_unlock
arg	24:21	24:44	3	&sys->filter_chain_lock
op	24:21	0:0	4	&
water	24:22	0:0	4	sys
op	24:25	0:0	4	->
water	24:27	0:0	4	filter_chain_lock
water	24:45	0:0	2	;
if	25:4	39:4	2	(is_left_empty)
cond	25:8	25:8	3	is_left_empty
water	25:8	0:0	4	is_left_empty
stmts	25:23	39:4	3	
water	25:23	0:0	4	{
if	29:8	38:8	4	(chain_update && * chain_update)
cond	29:12	29:29	5	chain_update && * chain_update
water	29:12	0:0	6	chain_update
op	29:25	0:0	6	&&
op	29:28	0:0	6	*
water	29:29	0:0	6	chain_update
stmts	29:43	38:8	5	
water	29:43	0:0	6	{
call	30:12	30:37	6	vlc_mutex_lock
arg	30:27	30:37	7	&sys->lock
op	30:27	0:0	8	&
water	30:28	0:0	8	sys
op	30:31	0:0	8	->
water	30:33	0:0	8	lock
water	30:38	0:0	6	;
if	31:12	36:12	6	(! sys -> source_chain_update || ! * sys -> source_chain_update)
cond	31:16	31:52	7	! sys -> source_chain_update || ! * sys -> source_chain_update
op	31:16	0:0	8	!
water	31:17	0:0	8	sys
op	31:20	0:0	8	->
water	31:22	0:0	8	source_chain_update
op	31:42	0:0	8	||
op	31:45	0:0	8	!
op	31:46	0:0	8	*
water	31:47	0:0	8	sys
op	31:50	0:0	8	->
water	31:52	0:0	8	source_chain_update
stmts	31:73	36:12	7	
water	31:73	0:0	8	{
if	32:16	33:50	8	(sys -> source_chain_update)
cond	32:20	32:25	9	sys -> source_chain_update
water	32:20	0:0	10	sys
op	32:23	0:0	10	->
water	32:25	0:0	10	source_chain_update
stmts	33:20	33:50	9	
call	33:20	33:49	10	free
arg	33:25	33:49	11	sys->source_chain_update
water	33:25	0:0	12	sys
op	33:28	0:0	12	->
water	33:30	0:0	12	source_chain_update
water	33:50	0:0	10	;
water	34:16	0:0	8	sys
op	34:19	0:0	8	->
water	34:21	0:0	8	source_chain_update
op	34:41	0:0	8	=
water	34:43	0:0	8	chain_update
water	34:55	0:0	8	;
water	35:16	0:0	8	chain_update
op	35:29	0:0	8	=
water	35:31	0:0	8	NULL
water	35:35	0:0	8	;
water	36:12	0:0	8	}
call	37:12	37:39	6	vlc_mutex_unlock
arg	37:29	37:39	7	&sys->lock
op	37:29	0:0	8	&
water	37:30	0:0	8	sys
op	37:33	0:0	8	->
water	37:35	0:0	8	lock
water	37:40	0:0	6	;
water	38:8	0:0	6	}
water	39:4	0:0	4	}
call	40:4	40:21	2	free
arg	40:9	40:21	3	chain_update
water	40:9	0:0	4	chain_update
water	40:22	0:0	2	;
call	42:4	42:42	2	vlc_mutex_lock
arg	42:19	42:42	3	&sys->filter_chain_lock
op	42:19	0:0	4	&
water	42:20	0:0	4	sys
op	42:23	0:0	4	->
water	42:25	0:0	4	filter_chain_lock
water	42:43	0:0	2	;
water	43:4	0:0	2	subpic
op	43:11	0:0	2	=
call	43:13	43:64	2	filter_chain_SubFilter
arg	43:36	43:56	3	spu->p->filter_chain
water	43:36	0:0	4	spu
op	43:39	0:0	4	->
water	43:41	0:0	4	p
op	43:42	0:0	4	->
water	43:44	0:0	4	filter_chain
arg	43:58	43:64	3	subpic
water	43:58	0:0	4	subpic
water	43:65	0:0	2	;
call	44:4	44:44	2	vlc_mutex_unlock
arg	44:21	44:44	3	&sys->filter_chain_lock
op	44:21	0:0	4	&
water	44:22	0:0	4	sys
op	44:25	0:0	4	->
water	44:27	0:0	4	filter_chain_lock
water	44:45	0:0	2	;
if	45:4	46:14	2	(! subpic)
cond	45:8	45:9	3	! subpic
op	45:8	0:0	4	!
water	45:9	0:0	4	subpic
stmts	46:8	46:14	3	
return	46:8	46:14	4	
if	48:4	49:50	2	(subpic -> i_channel == SPU_DEFAULT_CHANNEL)
cond	48:8	48:29	3	subpic -> i_channel == SPU_DEFAULT_CHANNEL
water	48:8	0:0	4	subpic
op	48:14	0:0	4	->
water	48:16	0:0	4	i_channel
op	48:26	0:0	4	==
water	48:29	0:0	4	SPU_DEFAULT_CHANNEL
stmts	49:8	49:50	3	
call	49:8	49:49	4	spu_ClearChannel
arg	49:25	49:28	5	spu
water	49:25	0:0	6	spu
arg	49:30	49:49	5	SPU_DEFAULT_CHANNEL
water	49:30	0:0	6	SPU_DEFAULT_CHANNEL
water	49:50	0:0	4	;
for	51:4	52:36	2	( subpicture_region_t * r = subpic -> p_region ;r != NULL;r = r -> p_next)
forinit	0:0	51:50	3	 subpicture_region_t * r = subpic -> p_region ;
decl	51:9	51:50	4	subpicture_region_t	*r
op	51:32	0:0	4	=
water	51:34	0:0	4	subpic
op	51:40	0:0	4	->
water	51:42	0:0	4	p_region
cond	51:52	51:57	3	r != NULL
water	51:52	0:0	4	r
op	51:54	0:0	4	!=
water	51:57	0:0	4	NULL
forexpr	51:63	51:70	3	r = r -> p_next
water	51:63	0:0	4	r
op	51:65	0:0	4	=
water	51:67	0:0	4	r
op	51:68	0:0	4	->
water	51:70	0:0	4	p_next
stmts	52:8	52:36	3	
call	52:8	52:35	4	assert
arg	52:15	52:35	5	r->p_private==NULL
water	52:15	0:0	6	r
op	52:16	0:0	6	->
water	52:18	0:0	6	p_private
op	52:28	0:0	6	==
water	52:31	0:0	6	NULL
water	52:36	0:0	4	;
call	54:4	54:29	2	vlc_mutex_lock
arg	54:19	54:29	3	&sys->lock
op	54:19	0:0	4	&
water	54:20	0:0	4	sys
op	54:23	0:0	4	->
water	54:25	0:0	4	lock
water	54:30	0:0	2	;
if	55:4	60:4	2	(SpuHeapPush (& sys -> heap ,subpic ))
cond	55:8	55:38	3	SpuHeapPush (& sys -> heap ,subpic )
call	55:8	55:38	4	SpuHeapPush
arg	55:20	55:30	5	&sys->heap
op	55:20	0:0	6	&
water	55:21	0:0	6	sys
op	55:24	0:0	6	->
water	55:26	0:0	6	heap
arg	55:32	55:38	5	subpic
water	55:32	0:0	6	subpic
stmts	55:41	60:4	3	
water	55:41	0:0	4	{
call	56:8	56:35	4	vlc_mutex_unlock
arg	56:25	56:35	5	&sys->lock
op	56:25	0:0	6	&
water	56:26	0:0	6	sys
op	56:29	0:0	6	->
water	56:31	0:0	6	lock
water	56:36	0:0	4	;
call	57:8	57:43	4	msg_Err
arg	57:16	57:19	5	spu
water	57:16	0:0	6	spu
arg	57:21	57:43	5	"subpicture heap full"
water	57:21	0:0	6	"subpicture heap full"
water	57:44	0:0	4	;
call	58:8	58:32	4	subpicture_Delete
arg	58:26	58:32	5	subpic
water	58:26	0:0	6	subpic
water	58:33	0:0	4	;
return	59:8	59:14	4	
water	60:4	0:0	4	}
call	61:4	61:31	2	vlc_mutex_unlock
arg	61:21	61:31	3	&sys->lock
op	61:21	0:0	4	&
water	61:22	0:0	4	sys
op	61:25	0:0	4	->
water	61:27	0:0	4	lock
water	61:32	0:0	2	;
