func	2:0	53:0	0	static void	LoadClpi
params	2:20	0:0	1	
param	2:22	2:38	2	demux_t *	p_demux
param	2:40	2:60	2	const char *	psz_name
param	2:62	2:71	2	int	i_id
stmnts	0:0	52:32	1	
decl	4:4	4:39	2	demux_sys_t	*p_sys
op	4:23	0:0	2	=
water	4:25	0:0	2	p_demux
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
call	6:4	6:45	2	msg_Err
arg	6:13	6:20	3	p_demux
water	6:13	0:0	4	p_demux
arg	6:22	6:34	3	"Loading %s"
water	6:22	0:0	4	"Loading %s"
arg	6:36	6:45	3	psz_name
water	6:36	0:0	4	psz_name
water	6:46	0:0	2	;
decl	8:4	8:53	2	block_t	*p_block
op	8:21	0:0	2	=
call	8:23	8:52	3	LoadBlock
arg	8:34	8:41	4	p_demux
water	8:34	0:0	5	p_demux
arg	8:43	8:52	4	psz_name
water	8:43	0:0	5	psz_name
if	9:4	10:18	2	(! p_block)
cond	9:8	9:9	3	! p_block
op	9:8	0:0	4	!
water	9:9	0:0	4	p_block
stmts	10:8	10:18	3	
goto	10:8	10:18	4	error
water	10:13	0:0	5	error
decl	12:4	12:49	2	bd_clpi_t	*p_clpi
op	12:22	0:0	2	=
call	12:24	12:48	3	malloc
arg	12:32	12:48	4	sizeof(*p_clpi)
op	12:32	0:0	5	sizeof
water	12:38	0:0	5	(
op	12:39	0:0	5	*
water	12:40	0:0	5	p_clpi
water	12:46	0:0	5	)
if	13:4	14:18	2	(! p_clpi)
cond	13:8	13:9	3	! p_clpi
op	13:8	0:0	4	!
water	13:9	0:0	4	p_clpi
stmts	14:8	14:18	3	
goto	14:8	14:18	4	error
water	14:13	0:0	5	error
decl	16:4	16:10	2	bs_t	s
call	17:4	17:54	2	bs_init
arg	17:13	17:15	3	&s
op	17:13	0:0	4	&
water	17:14	0:0	4	s
arg	17:17	17:34	3	p_block->p_buffer
water	17:17	0:0	4	p_block
op	17:24	0:0	4	->
water	17:26	0:0	4	p_buffer
arg	17:36	17:54	3	p_block->i_buffer
water	17:36	0:0	4	p_block
op	17:43	0:0	4	->
water	17:45	0:0	4	i_buffer
water	17:55	0:0	2	;
if	18:4	19:18	2	(bd_clpi_Parse (p_clpi ,& s ,i_id ))
cond	18:8	18:40	3	bd_clpi_Parse (p_clpi ,& s ,i_id )
call	18:8	18:40	4	bd_clpi_Parse
arg	18:23	18:29	5	p_clpi
water	18:23	0:0	6	p_clpi
arg	18:31	18:33	5	&s
op	18:31	0:0	6	&
water	18:32	0:0	6	s
arg	18:35	18:40	5	i_id
water	18:35	0:0	6	i_id
stmts	19:8	19:18	3	
goto	19:8	19:18	4	error
water	19:13	0:0	5	error
call	21:4	21:50	2	msg_Err
arg	21:13	21:20	3	p_demux
water	21:13	0:0	4	p_demux
arg	21:22	21:35	3	"CLPI: id=%d"
water	21:22	0:0	4	"CLPI: id=%d"
arg	21:37	21:50	3	p_clpi->i_id
water	21:37	0:0	4	p_clpi
op	21:43	0:0	4	->
water	21:45	0:0	4	i_id
water	21:51	0:0	2	;
call	22:4	22:52	2	msg_Err
arg	22:13	22:20	3	p_demux
water	22:13	0:0	4	p_demux
arg	22:22	22:36	3	"CLPI: STC=%d"
water	22:22	0:0	4	"CLPI: STC=%d"
arg	22:38	22:52	3	p_clpi->i_stc
water	22:38	0:0	4	p_clpi
op	22:44	0:0	4	->
water	22:46	0:0	4	i_stc
water	22:53	0:0	2	;
for	23:4	26:77	2	( int i = 0 ;i < p_clpi -> i_stc;i ++)
forinit	0:0	23:18	3	 int i = 0 ;
decl	23:9	23:18	4	int	i
op	23:15	0:0	4	=
water	23:17	0:0	4	0
cond	23:20	23:32	3	i < p_clpi -> i_stc
water	23:20	0:0	4	i
op	23:22	0:0	4	<
water	23:24	0:0	4	p_clpi
op	23:30	0:0	4	->
water	23:32	0:0	4	i_stc
forexpr	23:39	23:40	3	i ++
water	23:39	0:0	4	i
op	23:40	0:0	4	++
stmts	24:8	26:77	3	
call	24:8	26:76	4	msg_Err
arg	24:17	24:24	5	p_demux
water	24:17	0:0	6	p_demux
arg	24:26	24:75	5	"   STC[%d] pcr_pid=%d packet=%d start=%d end=%d"
water	24:26	0:0	6	"   STC[%d] pcr_pid=%d packet=%d start=%d end=%d"
arg	25:17	25:18	5	i
water	25:17	0:0	6	i
arg	25:20	25:46	5	p_clpi->p_stc[i].i_pcr_pid
water	25:20	0:0	6	p_clpi
op	25:26	0:0	6	->
water	25:28	0:0	6	p_stc
op	25:33	0:0	6	[
water	25:34	0:0	6	i
op	25:35	0:0	6	]
op	25:36	0:0	6	.
water	25:37	0:0	6	i_pcr_pid
arg	25:48	25:78	5	(int)p_clpi->p_stc[i].i_packet
water	25:48	0:0	6	(
water	25:49	0:0	6	int
water	25:52	0:0	6	)
water	25:53	0:0	6	p_clpi
op	25:59	0:0	6	->
water	25:61	0:0	6	p_stc
op	25:66	0:0	6	[
water	25:67	0:0	6	i
op	25:68	0:0	6	]
op	25:69	0:0	6	.
water	25:70	0:0	6	i_packet
arg	26:17	26:46	5	(int)p_clpi->p_stc[i].i_start
water	26:17	0:0	6	(
water	26:18	0:0	6	int
water	26:21	0:0	6	)
water	26:22	0:0	6	p_clpi
op	26:28	0:0	6	->
water	26:30	0:0	6	p_stc
op	26:35	0:0	6	[
water	26:36	0:0	6	i
op	26:37	0:0	6	]
op	26:38	0:0	6	.
water	26:39	0:0	6	i_start
arg	26:48	26:76	5	(int)p_clpi->p_stc[i].i_end
water	26:48	0:0	6	(
water	26:49	0:0	6	int
water	26:52	0:0	6	)
water	26:53	0:0	6	p_clpi
op	26:59	0:0	6	->
water	26:61	0:0	6	p_stc
op	26:66	0:0	6	[
water	26:67	0:0	6	i
op	26:68	0:0	6	]
op	26:69	0:0	6	.
water	26:70	0:0	6	i_end
water	26:77	0:0	4	;
call	27:4	27:58	2	msg_Err
arg	27:13	27:20	3	p_demux
water	27:13	0:0	4	p_demux
arg	27:22	27:39	3	"CLPI: Stream=%d"
water	27:22	0:0	4	"CLPI: Stream=%d"
arg	27:41	27:58	3	p_clpi->i_stream
water	27:41	0:0	4	p_clpi
op	27:47	0:0	4	->
water	27:49	0:0	4	i_stream
water	27:59	0:0	2	;
for	28:4	30:75	2	( int i = 0 ;i < p_clpi -> i_stream;i ++)
forinit	0:0	28:18	3	 int i = 0 ;
decl	28:9	28:18	4	int	i
op	28:15	0:0	4	=
water	28:17	0:0	4	0
cond	28:20	28:32	3	i < p_clpi -> i_stream
water	28:20	0:0	4	i
op	28:22	0:0	4	<
water	28:24	0:0	4	p_clpi
op	28:30	0:0	4	->
water	28:32	0:0	4	i_stream
forexpr	28:42	28:43	3	i ++
water	28:42	0:0	4	i
op	28:43	0:0	4	++
stmts	29:8	30:75	3	
call	29:8	30:74	4	msg_Err
arg	29:17	29:24	5	p_demux
water	29:17	0:0	6	p_demux
arg	29:26	29:58	5	"   Stream[%d] pid=%d type=0x%x"
water	29:26	0:0	6	"   Stream[%d] pid=%d type=0x%x"
arg	30:17	30:18	5	i
water	30:17	0:0	6	i
arg	30:20	30:45	5	p_clpi->p_stream[i].i_pid
water	30:20	0:0	6	p_clpi
op	30:26	0:0	6	->
water	30:28	0:0	6	p_stream
op	30:36	0:0	6	[
water	30:37	0:0	6	i
op	30:38	0:0	6	]
op	30:39	0:0	6	.
water	30:40	0:0	6	i_pid
arg	30:47	30:74	5	p_clpi->p_stream[i].i_type
water	30:47	0:0	6	p_clpi
op	30:53	0:0	6	->
water	30:55	0:0	6	p_stream
op	30:63	0:0	6	[
water	30:64	0:0	6	i
op	30:65	0:0	6	]
op	30:66	0:0	6	.
water	30:67	0:0	6	i_type
water	30:75	0:0	4	;
call	31:4	31:58	2	msg_Err
arg	31:13	31:20	3	p_demux
water	31:13	0:0	4	p_demux
arg	31:22	31:39	3	"CLPI: Ep Map=%d"
water	31:22	0:0	4	"CLPI: Ep Map=%d"
arg	31:41	31:58	3	p_clpi->i_ep_map
water	31:41	0:0	4	p_clpi
op	31:47	0:0	4	->
water	31:49	0:0	4	i_ep_map
water	31:59	0:0	2	;
for	32:4	42:4	2	( int i = 0 ;i < p_clpi -> i_ep_map;i ++)
forinit	0:0	32:18	3	 int i = 0 ;
decl	32:9	32:18	4	int	i
op	32:15	0:0	4	=
water	32:17	0:0	4	0
cond	32:20	32:32	3	i < p_clpi -> i_ep_map
water	32:20	0:0	4	i
op	32:22	0:0	4	<
water	32:24	0:0	4	p_clpi
op	32:30	0:0	4	->
water	32:32	0:0	4	i_ep_map
forexpr	32:42	32:43	3	i ++
water	32:42	0:0	4	i
op	32:43	0:0	4	++
stmts	33:4	42:4	3	
water	33:4	0:0	4	{
decl	34:8	34:63	4	const bd_clpi_ep_map_t	*p_ep_map
op	34:41	0:0	4	=
op	34:43	0:0	4	&
water	34:44	0:0	4	p_clpi
op	34:50	0:0	4	->
water	34:52	0:0	4	p_ep_map
op	34:60	0:0	4	[
water	34:61	0:0	4	i
op	34:62	0:0	4	]
call	35:8	36:70	4	msg_Err
arg	35:17	35:24	5	p_demux
water	35:17	0:0	6	p_demux
arg	35:26	35:73	5	"   Ep Map[%d] pid=%d type=0x%x entry_point=%d"
water	35:26	0:0	6	"   Ep Map[%d] pid=%d type=0x%x entry_point=%d"
arg	36:17	36:18	5	i
water	36:17	0:0	6	i
arg	36:20	36:35	5	p_ep_map->i_pid
water	36:20	0:0	6	p_ep_map
op	36:28	0:0	6	->
water	36:30	0:0	6	i_pid
arg	36:37	36:53	5	p_ep_map->i_type
water	36:37	0:0	6	p_ep_map
op	36:45	0:0	6	->
water	36:47	0:0	6	i_type
arg	36:55	36:70	5	p_ep_map->i_ep
water	36:55	0:0	6	p_ep_map
op	36:63	0:0	6	->
water	36:65	0:0	6	i_ep
water	36:71	0:0	4	;
for	37:8	41:8	4	( int j = 0 ;j < p_ep_map -> i_ep;j ++)
forinit	0:0	37:22	5	 int j = 0 ;
decl	37:13	37:22	6	int	j
op	37:19	0:0	6	=
water	37:21	0:0	6	0
cond	37:24	37:38	5	j < p_ep_map -> i_ep
water	37:24	0:0	6	j
op	37:26	0:0	6	<
water	37:28	0:0	6	p_ep_map
op	37:36	0:0	6	->
water	37:38	0:0	6	i_ep
forexpr	37:44	37:45	5	j ++
water	37:44	0:0	6	j
op	37:45	0:0	6	++
stmts	38:8	41:8	5	
water	38:8	0:0	6	{
call	39:12	40:86	6	msg_Err
arg	39:21	39:28	7	p_demux
water	39:21	0:0	8	p_demux
arg	39:30	39:61	7	"      Ep[%d] packet=%d pts=%d"
water	39:30	0:0	8	"      Ep[%d] packet=%d pts=%d"
arg	40:21	40:22	7	j
water	40:21	0:0	8	j
arg	40:24	40:55	7	(int)p_ep_map->p_ep[j].i_packet
water	40:24	0:0	8	(
water	40:25	0:0	8	int
water	40:28	0:0	8	)
water	40:29	0:0	8	p_ep_map
op	40:37	0:0	8	->
water	40:39	0:0	8	p_ep
op	40:43	0:0	8	[
water	40:44	0:0	8	j
op	40:45	0:0	8	]
op	40:46	0:0	8	.
water	40:47	0:0	8	i_packet
arg	40:57	40:86	7	(int)p_ep_map->p_ep[j].i_pts
water	40:57	0:0	8	(
water	40:58	0:0	8	int
water	40:61	0:0	8	)
water	40:62	0:0	8	p_ep_map
op	40:70	0:0	8	->
water	40:72	0:0	8	p_ep
op	40:76	0:0	8	[
water	40:77	0:0	8	j
op	40:78	0:0	8	]
op	40:79	0:0	8	.
water	40:80	0:0	8	i_pts
water	40:87	0:0	6	;
water	41:8	0:0	6	}
water	42:4	0:0	4	}
call	45:4	45:54	2	TAB_APPEND
arg	45:16	45:29	3	p_sys->i_clpi
water	45:16	0:0	4	p_sys
op	45:21	0:0	4	->
water	45:23	0:0	4	i_clpi
arg	45:31	45:45	3	p_sys->pp_clpi
water	45:31	0:0	4	p_sys
op	45:36	0:0	4	->
water	45:38	0:0	4	pp_clpi
arg	45:47	45:54	3	p_clpi
water	45:47	0:0	4	p_clpi
water	45:55	0:0	2	;
call	47:4	47:27	2	block_Release
arg	47:19	47:27	3	p_block
water	47:19	0:0	4	p_block
water	47:28	0:0	2	;
return	48:4	48:10	2	
label	49:0	49:5	2	error :
call	50:4	50:52	2	msg_Err
arg	50:13	50:20	3	p_demux
water	50:13	0:0	4	p_demux
arg	50:22	50:41	3	"Failed loading %s"
water	50:22	0:0	4	"Failed loading %s"
arg	50:43	50:52	3	psz_name
water	50:43	0:0	4	psz_name
water	50:53	0:0	2	;
if	51:4	52:32	2	(p_block)
cond	51:8	51:8	3	p_block
water	51:8	0:0	4	p_block
stmts	52:8	52:32	3	
call	52:8	52:31	4	block_Release
arg	52:23	52:31	5	p_block
water	52:23	0:0	6	p_block
water	52:32	0:0	4	;
