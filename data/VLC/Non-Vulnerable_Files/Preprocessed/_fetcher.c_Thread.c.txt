func	2:0	118:0	0	static void *	Thread
params	2:19	0:0	1	
param	2:21	2:34	2	void *	p_data
stmnts	0:0	117:15	1	
decl	4:4	4:42	2	playlist_fetcher_t	*p_fetcher
op	4:34	0:0	2	=
water	4:36	0:0	2	p_data
decl	5:4	5:41	2	vlc_object_t	*obj
op	5:22	0:0	2	=
water	5:24	0:0	2	p_fetcher
op	5:33	0:0	2	->
water	5:35	0:0	2	object
decl	6:4	6:39	2	fetcher_pass_t	e_pass
op	6:26	0:0	2	=
water	6:28	0:0	2	PASS1_LOCAL
for	7:4	116:4	2	(;;)
forinit	7:9	7:9	3	;
water	7:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	8:4	116:4	3	
water	8:4	0:0	4	{
decl	9:8	9:39	4	fetcher_entry_t	*p_entry
op	9:33	0:0	4	=
water	9:35	0:0	4	NULL
call	10:8	10:41	4	vlc_mutex_lock
arg	10:24	10:41	5	&p_fetcher->lock
op	10:24	0:0	6	&
water	10:25	0:0	6	p_fetcher
op	10:34	0:0	6	->
water	10:36	0:0	6	lock
water	10:42	0:0	4	;
for	11:8	18:8	4	( int i = 0 ;i < PASS_COUNT;i ++)
forinit	0:0	11:21	5	 int i = 0 ;
decl	11:14	11:21	6	int	i
op	11:19	0:0	6	=
water	11:20	0:0	6	0
cond	11:23	11:25	5	i < PASS_COUNT
water	11:23	0:0	6	i
op	11:24	0:0	6	<
water	11:25	0:0	6	PASS_COUNT
forexpr	11:37	11:38	5	i ++
water	11:37	0:0	6	i
op	11:38	0:0	6	++
stmts	12:8	18:8	5	
water	12:8	0:0	6	{
if	13:12	17:12	6	(p_fetcher -> p_waiting_head [ i ])
cond	13:17	13:44	7	p_fetcher -> p_waiting_head [ i ]
water	13:17	0:0	8	p_fetcher
op	13:26	0:0	8	->
water	13:28	0:0	8	p_waiting_head
op	13:42	0:0	8	[
water	13:43	0:0	8	i
op	13:44	0:0	8	]
stmts	14:12	17:12	7	
water	14:12	0:0	8	{
water	15:16	0:0	8	e_pass
op	15:23	0:0	8	=
water	15:25	0:0	8	i
water	15:26	0:0	8	;
break	16:16	16:21	8	
water	17:12	0:0	8	}
water	18:8	0:0	6	}
if	19:8	26:8	4	(p_fetcher -> p_waiting_head [ e_pass ])
cond	19:12	19:44	5	p_fetcher -> p_waiting_head [ e_pass ]
water	19:12	0:0	6	p_fetcher
op	19:21	0:0	6	->
water	19:23	0:0	6	p_waiting_head
op	19:37	0:0	6	[
water	19:38	0:0	6	e_pass
op	19:44	0:0	6	]
stmts	20:8	26:8	5	
water	20:8	0:0	6	{
water	21:12	0:0	6	p_entry
op	21:20	0:0	6	=
water	21:22	0:0	6	p_fetcher
op	21:31	0:0	6	->
water	21:33	0:0	6	p_waiting_head
op	21:47	0:0	6	[
water	21:48	0:0	6	e_pass
op	21:54	0:0	6	]
water	21:55	0:0	6	;
water	22:12	0:0	6	p_fetcher
op	22:21	0:0	6	->
water	22:23	0:0	6	p_waiting_head
op	22:37	0:0	6	[
water	22:38	0:0	6	e_pass
op	22:44	0:0	6	]
op	22:46	0:0	6	=
water	22:48	0:0	6	p_entry
op	22:55	0:0	6	->
water	22:57	0:0	6	p_next
water	22:63	0:0	6	;
if	23:12	24:56	6	(p_entry -> p_next == NULL)
cond	23:17	23:36	7	p_entry -> p_next == NULL
water	23:17	0:0	8	p_entry
op	23:24	0:0	8	->
water	23:26	0:0	8	p_next
op	23:33	0:0	8	==
water	23:36	0:0	8	NULL
stmts	24:16	24:56	7	
water	24:16	0:0	8	p_fetcher
op	24:25	0:0	8	->
water	24:27	0:0	8	p_waiting_tail
op	24:41	0:0	8	[
water	24:42	0:0	8	e_pass
op	24:48	0:0	8	]
op	24:50	0:0	8	=
water	24:52	0:0	8	NULL
water	24:56	0:0	8	;
water	25:12	0:0	6	p_entry
op	25:19	0:0	6	->
water	25:21	0:0	6	p_next
op	25:28	0:0	6	=
water	25:30	0:0	6	NULL
water	25:34	0:0	6	;
water	26:8	0:0	6	}
else	27:8	31:8	4
stmts	28:8	31:8	5	
water	28:8	0:0	6	{
water	29:12	0:0	6	p_fetcher
op	29:21	0:0	6	->
water	29:23	0:0	6	b_live
op	29:30	0:0	6	=
water	29:32	0:0	6	false
water	29:37	0:0	6	;
call	30:12	30:46	6	vlc_cond_signal
arg	30:29	30:46	7	&p_fetcher->wait
op	30:29	0:0	8	&
water	30:30	0:0	8	p_fetcher
op	30:39	0:0	8	->
water	30:41	0:0	8	wait
water	30:47	0:0	6	;
water	31:8	0:0	6	}
call	32:8	32:43	4	vlc_mutex_unlock
arg	32:26	32:43	5	&p_fetcher->lock
op	32:26	0:0	6	&
water	32:27	0:0	6	p_fetcher
op	32:36	0:0	6	->
water	32:38	0:0	6	lock
water	32:44	0:0	4	;
if	33:8	34:17	4	(! p_entry)
cond	33:12	33:13	5	! p_entry
op	33:12	0:0	6	!
water	33:13	0:0	6	p_entry
stmts	34:12	34:17	5	
break	34:12	34:17	6	
decl	35:8	35:62	4	meta_fetcher_scope_t	e_prev_scope
op	35:42	0:0	4	=
water	35:44	0:0	4	p_fetcher
op	35:53	0:0	4	->
water	35:55	0:0	4	e_scope
switch	37:8	50:8	4	(p_entry -> i_options)
cond	37:17	37:26	5	p_entry -> i_options
water	37:17	0:0	6	p_entry
op	37:24	0:0	6	->
water	37:26	0:0	6	i_options
stmts	37:38	50:8	5	
water	37:38	0:0	6	{
label	38:8	38:42	6	case META_REQUEST_OPTION_SCOPE_ANY :
water	39:12	0:0	6	p_fetcher
op	39:21	0:0	6	->
water	39:23	0:0	6	e_scope
op	39:31	0:0	6	=
water	39:33	0:0	6	FETCHER_SCOPE_ANY
water	39:50	0:0	6	;
break	40:12	40:17	6	
label	41:8	41:44	6	case META_REQUEST_OPTION_SCOPE_LOCAL :
water	42:12	0:0	6	p_fetcher
op	42:21	0:0	6	->
water	42:23	0:0	6	e_scope
op	42:31	0:0	6	=
water	42:33	0:0	6	FETCHER_SCOPE_LOCAL
water	42:52	0:0	6	;
break	43:12	43:17	6	
label	44:8	44:46	6	case META_REQUEST_OPTION_SCOPE_NETWORK :
water	45:12	0:0	6	p_fetcher
op	45:21	0:0	6	->
water	45:23	0:0	6	e_scope
op	45:31	0:0	6	=
water	45:33	0:0	6	FETCHER_SCOPE_NETWORK
water	45:54	0:0	6	;
break	46:12	46:17	6	
label	47:8	47:37	6	case META_REQUEST_OPTION_NONE :
label	48:8	48:15	6	default :
break	49:12	49:17	6	
water	50:8	0:0	6	}
decl	55:8	55:22	4	int	i_ret
op	55:18	0:0	4	=
op	55:20	0:0	4	-
water	55:21	0:0	4	1
if	56:8	60:8	4	(e_pass == PASS1_LOCAL && ( p_fetcher -> e_scope & FETCHER_SCOPE_LOCAL ))
cond	56:12	56:80	5	e_pass == PASS1_LOCAL && ( p_fetcher -> e_scope & FETCHER_SCOPE_LOCAL )
water	56:12	0:0	6	e_pass
op	56:19	0:0	6	==
water	56:22	0:0	6	PASS1_LOCAL
op	56:34	0:0	6	&&
water	56:37	0:0	6	(
water	56:39	0:0	6	p_fetcher
op	56:48	0:0	6	->
water	56:50	0:0	6	e_scope
op	56:58	0:0	6	&
water	56:60	0:0	6	FETCHER_SCOPE_LOCAL
water	56:80	0:0	6	)
stmts	57:8	60:8	5	
water	57:8	0:0	6	{
water	59:12	0:0	6	p_fetcher
op	59:21	0:0	6	->
water	59:23	0:0	6	e_scope
op	59:31	0:0	6	=
water	59:33	0:0	6	FETCHER_SCOPE_LOCAL
water	59:52	0:0	6	;
water	60:8	0:0	6	}
else	61:8	65:8	4
stmts	61:13	65:8	5	
if	61:13	65:8	6	(e_pass == PASS2_NETWORK && ( p_fetcher -> e_scope & FETCHER_SCOPE_NETWORK ))
cond	61:17	61:89	7	e_pass == PASS2_NETWORK && ( p_fetcher -> e_scope & FETCHER_SCOPE_NETWORK )
water	61:17	0:0	8	e_pass
op	61:24	0:0	8	==
water	61:27	0:0	8	PASS2_NETWORK
op	61:41	0:0	8	&&
water	61:44	0:0	8	(
water	61:46	0:0	8	p_fetcher
op	61:55	0:0	8	->
water	61:57	0:0	8	e_scope
op	61:65	0:0	8	&
water	61:67	0:0	8	FETCHER_SCOPE_NETWORK
water	61:89	0:0	8	)
stmts	62:8	65:8	7	
water	62:8	0:0	8	{
water	64:12	0:0	8	p_fetcher
op	64:21	0:0	8	->
water	64:23	0:0	8	e_scope
op	64:31	0:0	8	=
water	64:33	0:0	8	FETCHER_SCOPE_NETWORK
water	64:54	0:0	8	;
water	65:8	0:0	8	}
else	66:8	67:34	4
stmts	67:12	67:34	5	
water	67:12	0:0	6	p_fetcher
op	67:21	0:0	6	->
water	67:23	0:0	6	e_scope
op	67:31	0:0	6	=
water	67:33	0:0	6	0
water	67:34	0:0	6	;
if	68:8	83:8	4	(p_fetcher -> e_scope & FETCHER_SCOPE_ANY)
cond	68:13	68:34	5	p_fetcher -> e_scope & FETCHER_SCOPE_ANY
water	68:13	0:0	6	p_fetcher
op	68:22	0:0	6	->
water	68:24	0:0	6	e_scope
op	68:32	0:0	6	&
water	68:34	0:0	6	FETCHER_SCOPE_ANY
stmts	69:8	83:8	5	
water	69:8	0:0	6	{
call	70:12	70:50	6	FetchMeta
arg	70:23	70:32	7	p_fetcher
water	70:23	0:0	8	p_fetcher
arg	70:34	70:50	7	p_entry->p_item
water	70:34	0:0	8	p_entry
op	70:41	0:0	8	->
water	70:43	0:0	8	p_item
water	70:51	0:0	6	;
water	71:12	0:0	6	i_ret
op	71:18	0:0	6	=
call	71:20	71:56	6	FindArt
arg	71:29	71:38	7	p_fetcher
water	71:29	0:0	8	p_fetcher
arg	71:40	71:56	7	p_entry->p_item
water	71:40	0:0	8	p_entry
op	71:47	0:0	8	->
water	71:49	0:0	8	p_item
water	71:57	0:0	6	;
switch	72:12	82:12	6	(i_ret)
cond	72:20	72:20	7	i_ret
water	72:20	0:0	8	i_ret
stmts	73:12	82:12	7	
water	73:12	0:0	8	{
label	74:12	74:18	8	case 1 :
water	75:16	0:0	8	i_ret
op	75:22	0:0	8	=
call	75:24	75:64	8	DownloadArt
arg	75:37	75:46	9	p_fetcher
water	75:37	0:0	10	p_fetcher
arg	75:48	75:64	9	p_entry->p_item
water	75:48	0:0	10	p_entry
op	75:55	0:0	10	->
water	75:57	0:0	10	p_item
water	75:65	0:0	8	;
break	76:16	76:21	8	
label	77:12	77:18	8	case 0 :
water	78:16	0:0	8	i_ret
op	78:22	0:0	8	=
water	78:24	0:0	8	VLC_SUCCESS
water	78:35	0:0	8	;
label	80:12	80:19	8	default :
break	81:16	81:21	8	
water	82:12	0:0	8	}
water	83:8	0:0	6	}
water	84:8	0:0	4	p_fetcher
op	84:17	0:0	4	->
water	84:19	0:0	4	e_scope
op	84:27	0:0	4	=
water	84:29	0:0	4	e_prev_scope
water	84:41	0:0	4	;
if	86:8	96:8	4	(i_ret != VLC_SUCCESS && ( e_pass != PASS2_NETWORK ))
cond	86:13	86:61	5	i_ret != VLC_SUCCESS && ( e_pass != PASS2_NETWORK )
water	86:13	0:0	6	i_ret
op	86:19	0:0	6	!=
water	86:22	0:0	6	VLC_SUCCESS
op	86:34	0:0	6	&&
water	86:37	0:0	6	(
water	86:38	0:0	6	e_pass
op	86:45	0:0	6	!=
water	86:48	0:0	6	PASS2_NETWORK
water	86:61	0:0	6	)
stmts	87:8	96:8	5	
water	87:8	0:0	6	{
call	89:12	89:45	6	vlc_mutex_lock
arg	89:28	89:45	7	&p_fetcher->lock
op	89:28	0:0	8	&
water	89:29	0:0	8	p_fetcher
op	89:38	0:0	8	->
water	89:40	0:0	8	lock
water	89:46	0:0	6	;
if	90:12	91:71	6	(p_fetcher -> p_waiting_head [ e_pass + 1 ])
cond	90:17	90:53	7	p_fetcher -> p_waiting_head [ e_pass + 1 ]
water	90:17	0:0	8	p_fetcher
op	90:26	0:0	8	->
water	90:28	0:0	8	p_waiting_head
op	90:42	0:0	8	[
water	90:43	0:0	8	e_pass
op	90:50	0:0	8	+
water	90:52	0:0	8	1
op	90:53	0:0	8	]
stmts	91:16	91:71	7	
water	91:16	0:0	8	p_fetcher
op	91:25	0:0	8	->
water	91:27	0:0	8	p_waiting_tail
op	91:41	0:0	8	[
water	91:42	0:0	8	e_pass
op	91:49	0:0	8	+
water	91:51	0:0	8	1
op	91:52	0:0	8	]
op	91:53	0:0	8	->
water	91:55	0:0	8	p_next
op	91:62	0:0	8	=
water	91:64	0:0	8	p_entry
water	91:71	0:0	8	;
else	92:12	93:63	6
stmts	93:16	93:63	7	
water	93:16	0:0	8	p_fetcher
op	93:25	0:0	8	->
water	93:27	0:0	8	p_waiting_head
op	93:41	0:0	8	[
water	93:42	0:0	8	e_pass
op	93:49	0:0	8	+
water	93:51	0:0	8	1
op	93:52	0:0	8	]
op	93:54	0:0	8	=
water	93:56	0:0	8	p_entry
water	93:63	0:0	8	;
water	94:12	0:0	6	p_fetcher
op	94:21	0:0	6	->
water	94:23	0:0	6	p_waiting_tail
op	94:37	0:0	6	[
water	94:38	0:0	6	e_pass
op	94:45	0:0	6	+
water	94:47	0:0	6	1
op	94:48	0:0	6	]
op	94:50	0:0	6	=
water	94:52	0:0	6	p_entry
water	94:59	0:0	6	;
call	95:12	95:47	6	vlc_mutex_unlock
arg	95:30	95:47	7	&p_fetcher->lock
op	95:30	0:0	8	&
water	95:31	0:0	8	p_fetcher
op	95:40	0:0	8	->
water	95:42	0:0	8	lock
water	95:48	0:0	6	;
water	96:8	0:0	6	}
else	97:8	115:8	4
stmts	98:8	115:8	5	
water	98:8	0:0	6	{
decl	100:12	100:66	6	char	*psz_name
op	100:27	0:0	6	=
call	100:29	100:65	7	input_item_GetName
arg	100:49	100:65	8	p_entry->p_item
water	100:49	0:0	9	p_entry
op	100:56	0:0	9	->
water	100:58	0:0	9	p_item
if	101:12	106:12	6	(i_ret == VLC_SUCCESS)
cond	101:16	101:25	7	i_ret == VLC_SUCCESS
water	101:16	0:0	8	i_ret
op	101:22	0:0	8	==
water	101:25	0:0	8	VLC_SUCCESS
stmts	102:12	106:12	7	
water	102:12	0:0	8	{
call	103:16	103:68	8	msg_Dbg
arg	103:25	103:28	9	obj
water	103:25	0:0	10	obj
arg	103:30	103:57	9	"found art for %s in cache"
water	103:30	0:0	10	"found art for %s in cache"
arg	103:59	103:68	9	psz_name
water	103:59	0:0	10	psz_name
water	103:69	0:0	8	;
call	104:16	104:64	8	input_item_SetArtFetched
arg	104:42	104:57	9	p_entry->p_item
water	104:42	0:0	10	p_entry
op	104:49	0:0	10	->
water	104:51	0:0	10	p_item
arg	104:59	104:64	9	true
water	104:59	0:0	10	true
water	104:65	0:0	8	;
call	105:16	105:68	8	var_SetAddress
arg	105:32	105:35	9	obj
water	105:32	0:0	10	obj
arg	105:37	105:50	9	"item-change"
water	105:37	0:0	10	"item-change"
arg	105:52	105:68	9	p_entry->p_item
water	105:52	0:0	10	p_entry
op	105:59	0:0	10	->
water	105:61	0:0	10	p_item
water	105:69	0:0	8	;
water	106:12	0:0	8	}
else	107:12	111:12	6
stmts	108:12	111:12	7	
water	108:12	0:0	8	{
call	109:16	109:63	8	msg_Dbg
arg	109:25	109:28	9	obj
water	109:25	0:0	10	obj
arg	109:30	109:52	9	"art not found for %s"
water	109:30	0:0	10	"art not found for %s"
arg	109:54	109:63	9	psz_name
water	109:54	0:0	10	psz_name
water	109:64	0:0	8	;
call	110:16	110:65	8	input_item_SetArtNotFound
arg	110:43	110:58	9	p_entry->p_item
water	110:43	0:0	10	p_entry
op	110:50	0:0	10	->
water	110:52	0:0	10	p_item
arg	110:60	110:65	9	true
water	110:60	0:0	10	true
water	110:66	0:0	8	;
water	111:12	0:0	8	}
call	112:12	112:27	6	free
arg	112:18	112:27	7	psz_name
water	112:18	0:0	8	psz_name
water	112:28	0:0	6	;
call	113:12	113:43	6	vlc_gc_decref
arg	113:27	113:43	7	p_entry->p_item
water	113:27	0:0	8	p_entry
op	113:34	0:0	8	->
water	113:36	0:0	8	p_item
water	113:44	0:0	6	;
call	114:12	114:26	6	free
arg	114:18	114:26	7	p_entry
water	114:18	0:0	8	p_entry
water	114:27	0:0	6	;
water	115:8	0:0	6	}
water	116:4	0:0	4	}
return	117:4	117:15	2	NULL
water	117:11	0:0	3	NULL
