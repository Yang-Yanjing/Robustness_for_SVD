func	2:0	76:0	0	static int	DxFindVideoServiceConversion
params	2:39	0:0	1	
param	2:40	2:52	2	vlc_va_t *	va
param	2:54	2:65	2	GUID *	input
param	2:67	2:84	2	D3DFORMAT *	output
stmnts	0:0	75:23	1	
decl	4:4	4:31	2	vlc_va_sys_t	*sys
op	4:22	0:0	2	=
water	4:24	0:0	2	va
op	4:26	0:0	2	->
water	4:28	0:0	2	sys
decl	6:4	6:24	2	UINT	input_count
op	6:21	0:0	2	=
water	6:23	0:0	2	0
decl	7:4	7:27	2	GUID	*input_list
op	7:21	0:0	2	=
water	7:23	0:0	2	NULL
if	8:4	13:4	2	(FAILED (IDirectXVideoDecoderService_GetDecoderDeviceGuids (sys -> vs ,& input_count ,& input_list ) ))
cond	8:8	10:77	3	FAILED (IDirectXVideoDecoderService_GetDecoderDeviceGuids (sys -> vs ,& input_count ,& input_list ) )
call	8:8	10:77	4	FAILED
arg	8:15	10:77	5	IDirectXVideoDecoderService_GetDecoderDeviceGuids(sys->vs,&input_count,&input_list)
call	8:15	10:76	6	IDirectXVideoDecoderService_GetDecoderDeviceGuids
arg	8:65	8:72	7	sys->vs
water	8:65	0:0	8	sys
op	8:68	0:0	8	->
water	8:70	0:0	8	vs
arg	9:65	9:77	7	&input_count
op	9:65	0:0	8	&
water	9:66	0:0	8	input_count
arg	10:65	10:76	7	&input_list
op	10:65	0:0	8	&
water	10:66	0:0	8	input_list
stmts	10:80	13:4	3	
water	10:80	0:0	4	{
call	11:8	11:78	4	msg_Err
arg	11:16	11:18	5	va
water	11:16	0:0	6	va
arg	11:20	11:78	5	"IDirectXVideoDecoderService_GetDecoderDeviceGuids failed"
water	11:20	0:0	6	"IDirectXVideoDecoderService_GetDecoderDeviceGuids failed"
water	11:79	0:0	4	;
return	12:8	12:27	4	VLC_EGENERIC
water	12:15	0:0	5	VLC_EGENERIC
water	13:4	0:0	4	}
for	14:4	22:4	2	(unsigned i = 0 ;i < input_count;i ++)
forinit	14:9	14:23	3	unsigned i = 0 ;
water	14:9	0:0	4	unsigned
water	14:18	0:0	4	i
op	14:20	0:0	4	=
water	14:22	0:0	4	0
water	14:23	0:0	4	;
cond	14:25	14:29	3	i < input_count
water	14:25	0:0	4	i
op	14:27	0:0	4	<
water	14:29	0:0	4	input_count
forexpr	14:42	14:43	3	i ++
water	14:42	0:0	4	i
op	14:43	0:0	4	++
stmts	14:47	22:4	3	
water	14:47	0:0	4	{
decl	15:8	15:38	4	const GUID	*g
op	15:22	0:0	4	=
op	15:24	0:0	4	&
water	15:25	0:0	4	input_list
op	15:35	0:0	4	[
water	15:36	0:0	4	i
op	15:37	0:0	4	]
decl	16:8	16:51	4	const dxva2_mode_t	*mode
op	16:33	0:0	4	=
call	16:35	16:50	5	Dxva2FindMode
arg	16:49	16:50	6	g
water	16:49	0:0	7	g
if	17:8	19:8	4	(mode)
cond	17:12	17:12	5	mode
water	17:12	0:0	6	mode
stmts	17:18	19:8	5	
water	17:18	0:0	6	{
call	18:12	18:69	6	msg_Dbg
arg	18:20	18:22	7	va
water	18:20	0:0	8	va
arg	18:24	18:57	7	"- '%s' is supported by hardware"
water	18:24	0:0	8	"- '%s' is supported by hardware"
arg	18:59	18:69	7	mode->name
water	18:59	0:0	8	mode
op	18:63	0:0	8	->
water	18:65	0:0	8	name
water	18:70	0:0	6	;
water	19:8	0:0	6	}
else	19:10	21:8	4
stmts	19:15	21:8	5	
water	19:15	0:0	6	{
call	20:12	20:72	6	msg_Warn
arg	20:21	20:23	7	va
water	20:21	0:0	8	va
arg	20:25	20:53	7	"- Unknown GUID = "GUID_FMT
water	20:25	0:0	8	"- Unknown GUID = "
water	20:45	0:0	8	GUID_FMT
arg	20:55	20:72	7	GUID_PRINT(*g)
call	20:55	20:70	8	GUID_PRINT
arg	20:67	20:70	9	*g
op	20:67	0:0	10	*
water	20:68	0:0	10	g
water	20:73	0:0	6	;
water	21:8	0:0	6	}
water	22:4	0:0	4	}
for	24:4	73:4	2	(unsigned i = 0 ;dxva2_modes [ i ] . name;i ++)
forinit	24:9	24:23	3	unsigned i = 0 ;
water	24:9	0:0	4	unsigned
water	24:18	0:0	4	i
op	24:20	0:0	4	=
water	24:22	0:0	4	0
water	24:23	0:0	4	;
cond	24:25	24:40	3	dxva2_modes [ i ] . name
water	24:25	0:0	4	dxva2_modes
op	24:36	0:0	4	[
water	24:37	0:0	4	i
op	24:38	0:0	4	]
op	24:39	0:0	4	.
water	24:40	0:0	4	name
forexpr	24:46	24:47	3	i ++
water	24:46	0:0	4	i
op	24:47	0:0	4	++
stmts	24:51	73:4	3	
water	24:51	0:0	4	{
decl	25:8	25:50	4	const dxva2_mode_t	*mode
op	25:33	0:0	4	=
op	25:35	0:0	4	&
water	25:36	0:0	4	dxva2_modes
op	25:47	0:0	4	[
water	25:48	0:0	4	i
op	25:49	0:0	4	]
if	26:8	27:20	4	(! mode -> codec || mode -> codec != sys -> codec_id)
cond	26:12	26:48	5	! mode -> codec || mode -> codec != sys -> codec_id
op	26:12	0:0	6	!
water	26:13	0:0	6	mode
op	26:17	0:0	6	->
water	26:19	0:0	6	codec
op	26:25	0:0	6	||
water	26:28	0:0	6	mode
op	26:32	0:0	6	->
water	26:34	0:0	6	codec
op	26:40	0:0	6	!=
water	26:43	0:0	6	sys
op	26:46	0:0	6	->
water	26:48	0:0	6	codec_id
stmts	27:12	27:20	5	
continue	27:12	27:20	6	
decl	29:8	29:33	4	bool	is_supported
op	29:26	0:0	4	=
water	29:28	0:0	4	false
for	30:8	32:8	4	( const GUID * g = & input_list [ 0 ] ;! is_supported && g < & input_list [ input_count ];g ++)
forinit	0:0	30:43	5	 const GUID * g = & input_list [ 0 ] ;
decl	30:13	30:43	6	const GUID	*g
op	30:27	0:0	6	=
op	30:29	0:0	6	&
water	30:30	0:0	6	input_list
op	30:40	0:0	6	[
water	30:41	0:0	6	0
op	30:42	0:0	6	]
cond	30:45	30:89	5	! is_supported && g < & input_list [ input_count ]
op	30:45	0:0	6	!
water	30:46	0:0	6	is_supported
op	30:59	0:0	6	&&
water	30:62	0:0	6	g
op	30:64	0:0	6	<
op	30:66	0:0	6	&
water	30:67	0:0	6	input_list
op	30:77	0:0	6	[
water	30:78	0:0	6	input_count
op	30:89	0:0	6	]
forexpr	30:92	30:93	5	g ++
water	30:92	0:0	6	g
op	30:93	0:0	6	++
stmts	30:97	32:8	5	
water	30:97	0:0	6	{
water	31:12	0:0	6	is_supported
op	31:25	0:0	6	=
call	31:27	31:52	6	IsEqualGUID
arg	31:39	31:49	7	mode->guid
water	31:39	0:0	8	mode
op	31:43	0:0	8	->
water	31:45	0:0	8	guid
arg	31:51	31:52	7	g
water	31:51	0:0	8	g
water	31:53	0:0	6	;
water	32:8	0:0	6	}
if	33:8	34:20	4	(! is_supported)
cond	33:12	33:13	5	! is_supported
op	33:12	0:0	6	!
water	33:13	0:0	6	is_supported
stmts	34:12	34:20	5	
continue	34:12	34:20	6	
call	36:8	36:61	4	msg_Dbg
arg	36:16	36:18	5	va
water	36:16	0:0	6	va
arg	36:20	36:49	5	"Trying to use '%s' as input"
water	36:20	0:0	6	"Trying to use '%s' as input"
arg	36:51	36:61	5	mode->name
water	36:51	0:0	6	mode
op	36:55	0:0	6	->
water	36:57	0:0	6	name
water	36:62	0:0	4	;
decl	37:8	37:34	4	UINT	output_count
op	37:31	0:0	4	=
water	37:33	0:0	4	0
decl	38:8	38:37	4	D3DFORMAT	*output_list
op	38:31	0:0	4	=
water	38:33	0:0	4	NULL
if	39:8	44:8	4	(FAILED (IDirectXVideoDecoderService_GetDecoderRenderTargets (sys -> vs ,mode -> guid ,& output_count ,& output_list ) ))
cond	39:12	41:84	5	FAILED (IDirectXVideoDecoderService_GetDecoderRenderTargets (sys -> vs ,mode -> guid ,& output_count ,& output_list ) )
call	39:12	41:84	6	FAILED
arg	39:19	41:84	7	IDirectXVideoDecoderService_GetDecoderRenderTargets(sys->vs,mode->guid,&output_count,&output_list)
call	39:19	41:83	8	IDirectXVideoDecoderService_GetDecoderRenderTargets
arg	39:71	39:78	9	sys->vs
water	39:71	0:0	10	sys
op	39:74	0:0	10	->
water	39:76	0:0	10	vs
arg	39:80	39:90	9	mode->guid
water	39:80	0:0	10	mode
op	39:84	0:0	10	->
water	39:86	0:0	10	guid
arg	40:71	40:84	9	&output_count
op	40:71	0:0	10	&
water	40:72	0:0	10	output_count
arg	41:71	41:83	9	&output_list
op	41:71	0:0	10	&
water	41:72	0:0	10	output_list
stmts	41:87	44:8	5	
water	41:87	0:0	6	{
call	42:12	42:84	6	msg_Err
arg	42:20	42:22	7	va
water	42:20	0:0	8	va
arg	42:24	42:84	7	"IDirectXVideoDecoderService_GetDecoderRenderTargets failed"
water	42:24	0:0	8	"IDirectXVideoDecoderService_GetDecoderRenderTargets failed"
water	42:85	0:0	6	;
continue	43:12	43:20	6	
water	44:8	0:0	6	}
for	45:8	53:8	4	(unsigned j = 0 ;j < output_count;j ++)
forinit	45:13	45:27	5	unsigned j = 0 ;
water	45:13	0:0	6	unsigned
water	45:22	0:0	6	j
op	45:24	0:0	6	=
water	45:26	0:0	6	0
water	45:27	0:0	6	;
cond	45:29	45:33	5	j < output_count
water	45:29	0:0	6	j
op	45:31	0:0	6	<
water	45:33	0:0	6	output_count
forexpr	45:47	45:48	5	j ++
water	45:47	0:0	6	j
op	45:48	0:0	6	++
stmts	45:52	53:8	5	
water	45:52	0:0	6	{
decl	46:12	46:46	6	const D3DFORMAT	f
op	46:30	0:0	6	=
water	46:32	0:0	6	output_list
op	46:43	0:0	6	[
water	46:44	0:0	6	j
op	46:45	0:0	6	]
decl	47:12	47:57	6	const d3d_format_t	*format
op	47:39	0:0	6	=
call	47:41	47:56	7	D3dFindFormat
arg	47:55	47:56	8	f
water	47:55	0:0	9	f
if	48:12	50:12	6	(format)
cond	48:16	48:16	7	format
water	48:16	0:0	8	format
stmts	48:24	50:12	7	
water	48:24	0:0	8	{
call	49:16	49:70	8	msg_Dbg
arg	49:24	49:26	9	va
water	49:24	0:0	10	va
arg	49:28	49:56	9	"%s is supported for output"
water	49:28	0:0	10	"%s is supported for output"
arg	49:58	49:70	9	format->name
water	49:58	0:0	10	format
op	49:64	0:0	10	->
water	49:66	0:0	10	name
water	49:71	0:0	8	;
water	50:12	0:0	8	}
else	50:14	52:12	6
stmts	50:19	52:12	7	
water	50:19	0:0	8	{
call	51:16	51:84	8	msg_Dbg
arg	51:24	51:26	9	va
water	51:24	0:0	10	va
arg	51:28	51:64	9	"%d is supported for output (%4.4s)"
water	51:28	0:0	10	"%d is supported for output (%4.4s)"
arg	51:66	51:67	9	f
water	51:66	0:0	10	f
arg	51:69	51:84	9	(constchar*)&f
water	51:69	0:0	10	(
water	51:70	0:0	10	const
water	51:76	0:0	10	char
op	51:80	0:0	10	*
water	51:81	0:0	10	)
op	51:82	0:0	10	&
water	51:83	0:0	10	f
water	51:85	0:0	8	;
water	52:12	0:0	8	}
water	53:8	0:0	6	}
for	55:8	71:8	4	(unsigned j = 0 ;d3d_formats [ j ] . name;j ++)
forinit	55:13	55:27	5	unsigned j = 0 ;
water	55:13	0:0	6	unsigned
water	55:22	0:0	6	j
op	55:24	0:0	6	=
water	55:26	0:0	6	0
water	55:27	0:0	6	;
cond	55:29	55:44	5	d3d_formats [ j ] . name
water	55:29	0:0	6	d3d_formats
op	55:40	0:0	6	[
water	55:41	0:0	6	j
op	55:42	0:0	6	]
op	55:43	0:0	6	.
water	55:44	0:0	6	name
forexpr	55:50	55:51	5	j ++
water	55:50	0:0	6	j
op	55:51	0:0	6	++
stmts	55:55	71:8	5	
water	55:55	0:0	6	{
decl	56:12	56:56	6	const d3d_format_t	*format
op	56:39	0:0	6	=
op	56:41	0:0	6	&
water	56:42	0:0	6	d3d_formats
op	56:53	0:0	6	[
water	56:54	0:0	6	j
op	56:55	0:0	6	]
decl	58:12	58:37	6	bool	is_supported
op	58:30	0:0	6	=
water	58:32	0:0	6	false
for	59:12	61:12	6	(unsigned k = 0 ;! is_supported && k < output_count;k ++)
forinit	59:17	59:31	7	unsigned k = 0 ;
water	59:17	0:0	8	unsigned
water	59:26	0:0	8	k
op	59:28	0:0	8	=
water	59:30	0:0	8	0
water	59:31	0:0	8	;
cond	59:33	59:54	7	! is_supported && k < output_count
op	59:33	0:0	8	!
water	59:34	0:0	8	is_supported
op	59:47	0:0	8	&&
water	59:50	0:0	8	k
op	59:52	0:0	8	<
water	59:54	0:0	8	output_count
forexpr	59:68	59:69	7	k ++
water	59:68	0:0	8	k
op	59:69	0:0	8	++
stmts	59:73	61:12	7	
water	59:73	0:0	8	{
water	60:16	0:0	8	is_supported
op	60:29	0:0	8	=
water	60:31	0:0	8	format
op	60:37	0:0	8	->
water	60:39	0:0	8	format
op	60:46	0:0	8	==
water	60:49	0:0	8	output_list
op	60:60	0:0	8	[
water	60:61	0:0	8	k
op	60:62	0:0	8	]
water	60:63	0:0	8	;
water	61:12	0:0	8	}
if	62:12	63:24	6	(! is_supported)
cond	62:16	62:17	7	! is_supported
op	62:16	0:0	8	!
water	62:17	0:0	8	is_supported
stmts	63:16	63:24	7	
continue	63:16	63:24	8	
call	65:12	65:80	6	msg_Dbg
arg	65:20	65:22	7	va
water	65:20	0:0	8	va
arg	65:24	65:54	7	"Using '%s' to decode to '%s'"
water	65:24	0:0	8	"Using '%s' to decode to '%s'"
arg	65:56	65:66	7	mode->name
water	65:56	0:0	8	mode
op	65:60	0:0	8	->
water	65:62	0:0	8	name
arg	65:68	65:80	7	format->name
water	65:68	0:0	8	format
op	65:74	0:0	8	->
water	65:76	0:0	8	name
water	65:81	0:0	6	;
op	66:12	0:0	6	*
water	66:13	0:0	6	input
op	66:20	0:0	6	=
op	66:22	0:0	6	*
water	66:23	0:0	6	mode
op	66:27	0:0	6	->
water	66:29	0:0	6	guid
water	66:33	0:0	6	;
op	67:12	0:0	6	*
water	67:13	0:0	6	output
op	67:20	0:0	6	=
water	67:22	0:0	6	format
op	67:28	0:0	6	->
water	67:30	0:0	6	format
water	67:36	0:0	6	;
call	68:12	68:37	6	CoTaskMemFree
arg	68:26	68:37	7	output_list
water	68:26	0:0	8	output_list
water	68:38	0:0	6	;
call	69:12	69:36	6	CoTaskMemFree
arg	69:26	69:36	7	input_list
water	69:26	0:0	8	input_list
water	69:37	0:0	6	;
return	70:12	70:30	6	VLC_SUCCESS
water	70:19	0:0	7	VLC_SUCCESS
water	71:8	0:0	6	}
call	72:8	72:33	4	CoTaskMemFree
arg	72:22	72:33	5	output_list
water	72:22	0:0	6	output_list
water	72:34	0:0	4	;
water	73:4	0:0	4	}
call	74:4	74:28	2	CoTaskMemFree
arg	74:18	74:28	3	input_list
water	74:18	0:0	4	input_list
water	74:29	0:0	2	;
return	75:4	75:23	2	VLC_EGENERIC
water	75:11	0:0	3	VLC_EGENERIC
