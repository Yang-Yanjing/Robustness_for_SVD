func	2:0	62:0	0	static encoder_t *	CreateEncoder
params	2:31	0:0	1	
param	2:33	2:53	2	vlc_object_t *	p_this
param	2:55	2:77	2	video_format_t *	fmt_in
param	3:33	3:57	2	video_format_t *	fmt_out
stmnts	0:0	61:16	1	
decl	5:4	5:20	2	encoder_t	*p_enc
water	6:4	0:0	2	p_enc
op	6:10	0:0	2	=
call	6:12	6:39	2	sout_EncoderCreate
arg	6:32	6:39	3	p_this
water	6:32	0:0	4	p_this
water	6:40	0:0	2	;
if	7:4	8:19	2	(p_enc == NULL)
cond	7:8	7:17	3	p_enc == NULL
water	7:8	0:0	4	p_enc
op	7:14	0:0	4	==
water	7:17	0:0	4	NULL
stmts	8:8	8:19	3	
return	8:8	8:19	4	NULL
water	8:15	0:0	5	NULL
water	9:4	0:0	2	p_enc
op	9:9	0:0	2	->
water	9:11	0:0	2	p_module
op	9:20	0:0	2	=
water	9:22	0:0	2	NULL
water	9:26	0:0	2	;
call	10:4	10:63	2	es_format_Init
arg	10:20	10:34	3	&p_enc->fmt_in
op	10:20	0:0	4	&
water	10:21	0:0	4	p_enc
op	10:26	0:0	4	->
water	10:28	0:0	4	fmt_in
arg	10:36	10:44	3	VIDEO_ES
water	10:36	0:0	4	VIDEO_ES
arg	10:46	10:63	3	fmt_in->i_chroma
water	10:46	0:0	4	fmt_in
op	10:52	0:0	4	->
water	10:54	0:0	4	i_chroma
water	10:64	0:0	2	;
water	11:4	0:0	2	p_enc
op	11:9	0:0	2	->
water	11:11	0:0	2	fmt_in
op	11:17	0:0	2	.
water	11:18	0:0	2	video
op	11:24	0:0	2	=
op	11:26	0:0	2	*
water	11:27	0:0	2	fmt_in
water	11:33	0:0	2	;
if	12:4	33:4	2	(p_enc -> fmt_in . video . i_visible_width == 0 || p_enc -> fmt_in . video . i_visible_height == 0 || p_enc -> fmt_out . video . i_visible_width == 0 || p_enc -> fmt_out . video . i_visible_height == 0)
cond	12:8	15:49	3	p_enc -> fmt_in . video . i_visible_width == 0 || p_enc -> fmt_in . video . i_visible_height == 0 || p_enc -> fmt_out . video . i_visible_width == 0 || p_enc -> fmt_out . video . i_visible_height == 0
water	12:8	0:0	4	p_enc
op	12:13	0:0	4	->
water	12:15	0:0	4	fmt_in
op	12:21	0:0	4	.
water	12:22	0:0	4	video
op	12:27	0:0	4	.
water	12:28	0:0	4	i_visible_width
op	12:44	0:0	4	==
water	12:47	0:0	4	0
op	12:49	0:0	4	||
water	13:8	0:0	4	p_enc
op	13:13	0:0	4	->
water	13:15	0:0	4	fmt_in
op	13:21	0:0	4	.
water	13:22	0:0	4	video
op	13:27	0:0	4	.
water	13:28	0:0	4	i_visible_height
op	13:45	0:0	4	==
water	13:48	0:0	4	0
op	13:50	0:0	4	||
water	14:8	0:0	4	p_enc
op	14:13	0:0	4	->
water	14:15	0:0	4	fmt_out
op	14:22	0:0	4	.
water	14:23	0:0	4	video
op	14:28	0:0	4	.
water	14:29	0:0	4	i_visible_width
op	14:45	0:0	4	==
water	14:48	0:0	4	0
op	14:50	0:0	4	||
water	15:8	0:0	4	p_enc
op	15:13	0:0	4	->
water	15:15	0:0	4	fmt_out
op	15:22	0:0	4	.
water	15:23	0:0	4	video
op	15:28	0:0	4	.
water	15:29	0:0	4	i_visible_height
op	15:46	0:0	4	==
water	15:49	0:0	4	0
stmts	16:4	33:4	3	
water	16:4	0:0	4	{
if	17:8	32:8	4	(fmt_out -> i_width > 0 && fmt_out -> i_height > 0)
cond	17:12	17:56	5	fmt_out -> i_width > 0 && fmt_out -> i_height > 0
water	17:12	0:0	6	fmt_out
op	17:19	0:0	6	->
water	17:21	0:0	6	i_width
op	17:29	0:0	6	>
water	17:31	0:0	6	0
op	17:33	0:0	6	&&
water	17:36	0:0	6	fmt_out
op	17:43	0:0	6	->
water	17:45	0:0	6	i_height
op	17:54	0:0	6	>
water	17:56	0:0	6	0
stmts	18:8	32:8	5	
water	18:8	0:0	6	{
water	19:12	0:0	6	p_enc
op	19:17	0:0	6	->
water	19:19	0:0	6	fmt_in
op	19:25	0:0	6	.
water	19:26	0:0	6	video
op	19:31	0:0	6	.
water	19:32	0:0	6	i_width
op	19:40	0:0	6	=
water	19:42	0:0	6	fmt_out
op	19:49	0:0	6	->
water	19:51	0:0	6	i_width
water	19:58	0:0	6	;
water	20:12	0:0	6	p_enc
op	20:17	0:0	6	->
water	20:19	0:0	6	fmt_in
op	20:25	0:0	6	.
water	20:26	0:0	6	video
op	20:31	0:0	6	.
water	20:32	0:0	6	i_height
op	20:41	0:0	6	=
water	20:43	0:0	6	fmt_out
op	20:50	0:0	6	->
water	20:52	0:0	6	i_height
water	20:60	0:0	6	;
if	21:12	26:12	6	(fmt_out -> i_visible_width > 0 && fmt_out -> i_visible_height > 0)
cond	21:16	22:44	7	fmt_out -> i_visible_width > 0 && fmt_out -> i_visible_height > 0
water	21:16	0:0	8	fmt_out
op	21:23	0:0	8	->
water	21:25	0:0	8	i_visible_width
op	21:41	0:0	8	>
water	21:43	0:0	8	0
op	21:45	0:0	8	&&
water	22:16	0:0	8	fmt_out
op	22:23	0:0	8	->
water	22:25	0:0	8	i_visible_height
op	22:42	0:0	8	>
water	22:44	0:0	8	0
stmts	23:12	26:12	7	
water	23:12	0:0	8	{
water	24:16	0:0	8	p_enc
op	24:21	0:0	8	->
water	24:23	0:0	8	fmt_in
op	24:29	0:0	8	.
water	24:30	0:0	8	video
op	24:35	0:0	8	.
water	24:36	0:0	8	i_visible_width
op	24:52	0:0	8	=
water	24:54	0:0	8	fmt_out
op	24:61	0:0	8	->
water	24:63	0:0	8	i_visible_width
water	24:78	0:0	8	;
water	25:16	0:0	8	p_enc
op	25:21	0:0	8	->
water	25:23	0:0	8	fmt_in
op	25:29	0:0	8	.
water	25:30	0:0	8	video
op	25:35	0:0	8	.
water	25:36	0:0	8	i_visible_height
op	25:53	0:0	8	=
water	25:55	0:0	8	fmt_out
op	25:62	0:0	8	->
water	25:64	0:0	8	i_visible_height
water	25:80	0:0	8	;
water	26:12	0:0	8	}
else	27:12	31:12	6
stmts	28:12	31:12	7	
water	28:12	0:0	8	{
water	29:16	0:0	8	p_enc
op	29:21	0:0	8	->
water	29:23	0:0	8	fmt_in
op	29:29	0:0	8	.
water	29:30	0:0	8	video
op	29:35	0:0	8	.
water	29:36	0:0	8	i_visible_width
op	29:52	0:0	8	=
water	29:54	0:0	8	fmt_out
op	29:61	0:0	8	->
water	29:63	0:0	8	i_width
water	29:70	0:0	8	;
water	30:16	0:0	8	p_enc
op	30:21	0:0	8	->
water	30:23	0:0	8	fmt_in
op	30:29	0:0	8	.
water	30:30	0:0	8	video
op	30:35	0:0	8	.
water	30:36	0:0	8	i_visible_height
op	30:53	0:0	8	=
water	30:55	0:0	8	fmt_out
op	30:62	0:0	8	->
water	30:64	0:0	8	i_height
water	30:72	0:0	8	;
water	31:12	0:0	8	}
water	32:8	0:0	6	}
water	33:4	0:0	4	}
else	33:6	43:4	2
stmts	33:11	43:4	3	
if	33:11	43:4	4	(fmt_out -> i_sar_num && fmt_out -> i_sar_den && fmt_out -> i_sar_num * fmt_in -> i_sar_den != fmt_out -> i_sar_den * fmt_in -> i_sar_num)
cond	33:15	35:44	5	fmt_out -> i_sar_num && fmt_out -> i_sar_den && fmt_out -> i_sar_num * fmt_in -> i_sar_den != fmt_out -> i_sar_den * fmt_in -> i_sar_num
water	33:15	0:0	6	fmt_out
op	33:22	0:0	6	->
water	33:24	0:0	6	i_sar_num
op	33:34	0:0	6	&&
water	33:37	0:0	6	fmt_out
op	33:44	0:0	6	->
water	33:46	0:0	6	i_sar_den
op	33:56	0:0	6	&&
water	34:15	0:0	6	fmt_out
op	34:22	0:0	6	->
water	34:24	0:0	6	i_sar_num
op	34:34	0:0	6	*
water	34:36	0:0	6	fmt_in
op	34:42	0:0	6	->
water	34:44	0:0	6	i_sar_den
op	34:54	0:0	6	!=
water	35:15	0:0	6	fmt_out
op	35:22	0:0	6	->
water	35:24	0:0	6	i_sar_den
op	35:34	0:0	6	*
water	35:36	0:0	6	fmt_in
op	35:42	0:0	6	->
water	35:44	0:0	6	i_sar_num
stmts	36:4	43:4	5	
water	36:4	0:0	6	{
water	37:8	0:0	6	p_enc
op	37:13	0:0	6	->
water	37:15	0:0	6	fmt_in
op	37:21	0:0	6	.
water	37:22	0:0	6	video
op	37:27	0:0	6	.
water	37:28	0:0	6	i_width
op	37:36	0:0	6	=
water	38:12	0:0	6	fmt_in
op	38:18	0:0	6	->
water	38:20	0:0	6	i_sar_num
op	38:30	0:0	6	*
water	38:32	0:0	6	(
water	38:33	0:0	6	int64_t
water	38:40	0:0	6	)
water	38:41	0:0	6	fmt_out
op	38:48	0:0	6	->
water	38:50	0:0	6	i_sar_den
op	38:60	0:0	6	*
water	38:62	0:0	6	fmt_in
op	38:68	0:0	6	->
water	38:70	0:0	6	i_width
op	38:78	0:0	6	/
water	39:12	0:0	6	fmt_in
op	39:18	0:0	6	->
water	39:20	0:0	6	i_sar_den
op	39:30	0:0	6	/
water	39:32	0:0	6	fmt_out
op	39:39	0:0	6	->
water	39:41	0:0	6	i_sar_num
water	39:50	0:0	6	;
water	40:8	0:0	6	p_enc
op	40:13	0:0	6	->
water	40:15	0:0	6	fmt_in
op	40:21	0:0	6	.
water	40:22	0:0	6	video
op	40:27	0:0	6	.
water	40:28	0:0	6	i_visible_width
op	40:44	0:0	6	=
water	41:12	0:0	6	fmt_in
op	41:18	0:0	6	->
water	41:20	0:0	6	i_sar_num
op	41:30	0:0	6	*
water	41:32	0:0	6	(
water	41:33	0:0	6	int64_t
water	41:40	0:0	6	)
water	41:41	0:0	6	fmt_out
op	41:48	0:0	6	->
water	41:50	0:0	6	i_sar_den
op	41:60	0:0	6	*
water	42:12	0:0	6	fmt_in
op	42:18	0:0	6	->
water	42:20	0:0	6	i_visible_width
op	42:36	0:0	6	/
water	42:38	0:0	6	fmt_in
op	42:44	0:0	6	->
water	42:46	0:0	6	i_sar_den
op	42:56	0:0	6	/
water	42:58	0:0	6	fmt_out
op	42:65	0:0	6	->
water	42:67	0:0	6	i_sar_num
water	42:76	0:0	6	;
water	43:4	0:0	6	}
water	44:4	0:0	2	p_enc
op	44:9	0:0	2	->
water	44:11	0:0	2	fmt_in
op	44:17	0:0	2	.
water	44:18	0:0	2	video
op	44:23	0:0	2	.
water	44:24	0:0	2	i_frame_rate
op	44:37	0:0	2	=
water	44:39	0:0	2	25
water	44:41	0:0	2	;
water	45:4	0:0	2	p_enc
op	45:9	0:0	2	->
water	45:11	0:0	2	fmt_in
op	45:17	0:0	2	.
water	45:18	0:0	2	video
op	45:23	0:0	2	.
water	45:24	0:0	2	i_frame_rate_base
op	45:42	0:0	2	=
water	45:44	0:0	2	1
water	45:45	0:0	2	;
call	46:4	46:65	2	es_format_Init
arg	46:20	46:35	3	&p_enc->fmt_out
op	46:20	0:0	4	&
water	46:21	0:0	4	p_enc
op	46:26	0:0	4	->
water	46:28	0:0	4	fmt_out
arg	46:37	46:45	3	VIDEO_ES
water	46:37	0:0	4	VIDEO_ES
arg	46:47	46:65	3	fmt_out->i_chroma
water	46:47	0:0	4	fmt_out
op	46:54	0:0	4	->
water	46:56	0:0	4	i_chroma
water	46:66	0:0	2	;
water	47:4	0:0	2	p_enc
op	47:9	0:0	2	->
water	47:11	0:0	2	fmt_out
op	47:18	0:0	2	.
water	47:19	0:0	2	video
op	47:25	0:0	2	=
op	47:27	0:0	2	*
water	47:28	0:0	2	fmt_out
water	47:35	0:0	2	;
water	48:4	0:0	2	p_enc
op	48:9	0:0	2	->
water	48:11	0:0	2	fmt_out
op	48:18	0:0	2	.
water	48:19	0:0	2	video
op	48:24	0:0	2	.
water	48:25	0:0	2	i_width
op	48:33	0:0	2	=
water	48:35	0:0	2	p_enc
op	48:40	0:0	2	->
water	48:42	0:0	2	fmt_in
op	48:48	0:0	2	.
water	48:49	0:0	2	video
op	48:54	0:0	2	.
water	48:55	0:0	2	i_width
water	48:62	0:0	2	;
water	49:4	0:0	2	p_enc
op	49:9	0:0	2	->
water	49:11	0:0	2	fmt_out
op	49:18	0:0	2	.
water	49:19	0:0	2	video
op	49:24	0:0	2	.
water	49:25	0:0	2	i_height
op	49:34	0:0	2	=
water	49:36	0:0	2	p_enc
op	49:41	0:0	2	->
water	49:43	0:0	2	fmt_in
op	49:49	0:0	2	.
water	49:50	0:0	2	video
op	49:55	0:0	2	.
water	49:56	0:0	2	i_height
water	49:64	0:0	2	;
water	51:4	0:0	2	p_enc
op	51:9	0:0	2	->
water	51:11	0:0	2	p_module
op	51:20	0:0	2	=
call	51:22	51:65	2	module_need
arg	51:35	51:40	3	p_enc
water	51:35	0:0	4	p_enc
arg	51:42	51:51	3	"encoder"
water	51:42	0:0	4	"encoder"
arg	51:53	51:57	3	NULL
water	51:53	0:0	4	NULL
arg	51:59	51:65	3	false
water	51:59	0:0	4	false
water	51:66	0:0	2	;
if	52:4	59:4	2	(! p_enc -> p_module)
cond	52:8	52:16	3	! p_enc -> p_module
op	52:8	0:0	4	!
water	52:9	0:0	4	p_enc
op	52:14	0:0	4	->
water	52:16	0:0	4	p_module
stmts	53:4	59:4	3	
water	53:4	0:0	4	{
call	54:8	56:48	4	msg_Err
arg	54:17	54:22	5	p_enc
water	54:17	0:0	6	p_enc
arg	54:24	55:67	5	"no suitable encoder module for fourcc `%4.4s'.\n""VLC probably does not support this image format."
water	54:24	0:0	6	"no suitable encoder module for fourcc `%4.4s'.\n"
water	55:17	0:0	6	"VLC probably does not support this image format."
arg	56:17	56:48	5	(char*)&p_enc->fmt_out.i_codec
water	56:17	0:0	6	(
water	56:18	0:0	6	char
op	56:22	0:0	6	*
water	56:23	0:0	6	)
op	56:24	0:0	6	&
water	56:25	0:0	6	p_enc
op	56:30	0:0	6	->
water	56:32	0:0	6	fmt_out
op	56:39	0:0	6	.
water	56:40	0:0	6	i_codec
water	56:49	0:0	4	;
call	57:8	57:29	4	DeleteEncoder
arg	57:23	57:29	5	p_enc
water	57:23	0:0	6	p_enc
water	57:30	0:0	4	;
return	58:8	58:19	4	NULL
water	58:15	0:0	5	NULL
water	59:4	0:0	4	}
water	60:4	0:0	2	p_enc
op	60:9	0:0	2	->
water	60:11	0:0	2	fmt_in
op	60:17	0:0	2	.
water	60:18	0:0	2	video
op	60:23	0:0	2	.
water	60:24	0:0	2	i_chroma
op	60:33	0:0	2	=
water	60:35	0:0	2	p_enc
op	60:40	0:0	2	->
water	60:42	0:0	2	fmt_in
op	60:48	0:0	2	.
water	60:49	0:0	2	i_codec
water	60:56	0:0	2	;
return	61:4	61:16	2	p_enc
water	61:11	0:0	3	p_enc
