func	2:0	57:0	0	static void	Manage
params	2:18	0:0	1	
param	2:19	2:37	2	vout_display_t *	vd
stmnts	0:0	56:4	1	
decl	4:4	4:37	2	vout_display_sys_t	*sys
op	4:28	0:0	2	=
water	4:30	0:0	2	vd
op	4:32	0:0	2	->
water	4:34	0:0	2	sys
for	5:4	56:4	2	(;;)
forinit	5:9	5:9	3	;
water	5:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	5:13	56:4	3	
water	5:13	0:0	4	{
decl	6:8	6:57	4	const int	event
op	6:24	0:0	4	=
call	6:26	6:56	5	aa_getevent
arg	6:38	6:53	6	sys->aa_context
water	6:38	0:0	7	sys
op	6:41	0:0	7	->
water	6:43	0:0	7	aa_context
arg	6:55	6:56	6	0
water	6:55	0:0	7	0
if	7:8	8:18	4	(! event)
cond	7:12	7:13	5	! event
op	7:12	0:0	6	!
water	7:13	0:0	6	event
stmts	8:12	8:18	5	
return	8:12	8:18	6	
switch	9:8	55:8	4	(event)
cond	9:16	9:16	5	event
water	9:16	0:0	6	event
stmts	9:23	55:8	5	
water	9:23	0:0	6	{
label	10:8	10:21	6	case AA_MOUSE :
water	10:23	0:0	6	{
decl	11:12	11:20	6	int	x
water	11:17	0:0	6	,
decl	11:12	11:20	6	int	y
decl	12:12	12:22	6	int	button
decl	13:12	13:19	6	int	vlc
call	14:12	14:56	6	aa_getmouse
arg	14:24	14:39	7	sys->aa_context
water	14:24	0:0	8	sys
op	14:27	0:0	8	->
water	14:29	0:0	8	aa_context
arg	14:41	14:43	7	&x
op	14:41	0:0	8	&
water	14:42	0:0	8	x
arg	14:45	14:47	7	&y
op	14:45	0:0	8	&
water	14:46	0:0	8	y
arg	14:49	14:56	7	&button
op	14:49	0:0	8	&
water	14:50	0:0	8	button
water	14:57	0:0	6	;
water	15:12	0:0	6	vlc
op	15:16	0:0	6	=
water	15:18	0:0	6	0
water	15:19	0:0	6	;
if	16:12	17:45	6	(button & AA_BUTTON1)
cond	16:16	16:25	7	button & AA_BUTTON1
water	16:16	0:0	8	button
op	16:23	0:0	8	&
water	16:25	0:0	8	AA_BUTTON1
stmts	17:16	17:45	7	
water	17:16	0:0	8	vlc
op	17:20	0:0	8	|=
water	17:23	0:0	8	1
op	17:25	0:0	8	<<
water	17:28	0:0	8	MOUSE_BUTTON_LEFT
water	17:45	0:0	8	;
if	18:12	19:47	6	(button & AA_BUTTON2)
cond	18:16	18:25	7	button & AA_BUTTON2
water	18:16	0:0	8	button
op	18:23	0:0	8	&
water	18:25	0:0	8	AA_BUTTON2
stmts	19:16	19:47	7	
water	19:16	0:0	8	vlc
op	19:20	0:0	8	|=
water	19:23	0:0	8	1
op	19:25	0:0	8	<<
water	19:28	0:0	8	MOUSE_BUTTON_CENTER
water	19:47	0:0	8	;
if	20:12	21:46	6	(button & AA_BUTTON3)
cond	20:16	20:25	7	button & AA_BUTTON3
water	20:16	0:0	8	button
op	20:23	0:0	8	&
water	20:25	0:0	8	AA_BUTTON3
stmts	21:16	21:46	7	
water	21:16	0:0	8	vlc
op	21:20	0:0	8	|=
water	21:23	0:0	8	1
op	21:25	0:0	8	<<
water	21:28	0:0	8	MOUSE_BUTTON_RIGHT
water	21:46	0:0	8	;
call	22:12	22:58	6	vout_display_SendEventMouseState
arg	22:45	22:47	7	vd
water	22:45	0:0	8	vd
arg	22:49	22:50	7	x
water	22:49	0:0	8	x
arg	22:52	22:53	7	y
water	22:52	0:0	8	y
arg	22:55	22:58	7	vlc
water	22:55	0:0	8	vlc
water	22:59	0:0	6	;
call	23:12	23:41	6	aa_showcursor
arg	23:26	23:41	7	sys->aa_context
water	23:26	0:0	8	sys
op	23:29	0:0	8	->
water	23:31	0:0	8	aa_context
water	23:42	0:0	6	;
break	24:12	24:17	6	
water	25:8	0:0	6	}
label	26:8	26:22	6	case AA_RESIZE :
call	27:12	27:37	6	aa_resize
arg	27:22	27:37	7	sys->aa_context
water	27:22	0:0	8	sys
op	27:25	0:0	8	->
water	27:27	0:0	8	aa_context
water	27:38	0:0	6	;
call	28:12	30:82	6	vout_display_SendEventDisplaySize
arg	28:46	28:48	7	vd
water	28:46	0:0	8	vd
arg	29:46	29:74	7	aa_imgwidth(sys->aa_context)
call	29:46	29:73	8	aa_imgwidth
arg	29:58	29:73	9	sys->aa_context
water	29:58	0:0	10	sys
op	29:61	0:0	10	->
water	29:63	0:0	10	aa_context
arg	30:46	30:75	7	aa_imgheight(sys->aa_context)
call	30:46	30:74	8	aa_imgheight
arg	30:59	30:74	9	sys->aa_context
water	30:59	0:0	10	sys
op	30:62	0:0	10	->
water	30:64	0:0	10	aa_context
arg	30:77	30:82	7	false
water	30:77	0:0	8	false
water	30:83	0:0	6	;
break	31:12	31:17	6	
label	33:8	33:18	6	case AA_UP :
call	34:12	34:48	6	vout_display_SendEventKey
arg	34:38	34:40	7	vd
water	34:38	0:0	8	vd
arg	34:42	34:48	7	KEY_UP
water	34:42	0:0	8	KEY_UP
water	34:49	0:0	6	;
break	35:12	35:17	6	
label	36:8	36:20	6	case AA_DOWN :
call	37:12	37:50	6	vout_display_SendEventKey
arg	37:38	37:40	7	vd
water	37:38	0:0	8	vd
arg	37:42	37:50	7	KEY_DOWN
water	37:42	0:0	8	KEY_DOWN
water	37:51	0:0	6	;
break	38:12	38:17	6	
label	39:8	39:21	6	case AA_RIGHT :
call	40:12	40:51	6	vout_display_SendEventKey
arg	40:38	40:40	7	vd
water	40:38	0:0	8	vd
arg	40:42	40:51	7	KEY_RIGHT
water	40:42	0:0	8	KEY_RIGHT
water	40:52	0:0	6	;
break	41:12	41:17	6	
label	42:8	42:20	6	case AA_LEFT :
call	43:12	43:50	6	vout_display_SendEventKey
arg	43:38	43:40	7	vd
water	43:38	0:0	8	vd
arg	43:42	43:50	7	KEY_LEFT
water	43:42	0:0	8	KEY_LEFT
water	43:51	0:0	6	;
break	44:12	44:17	6	
label	45:8	45:25	6	case AA_BACKSPACE :
call	46:12	46:55	6	vout_display_SendEventKey
arg	46:38	46:40	7	vd
water	46:38	0:0	8	vd
arg	46:42	46:55	7	KEY_BACKSPACE
water	46:42	0:0	8	KEY_BACKSPACE
water	46:56	0:0	6	;
break	47:12	47:17	6	
label	48:8	48:19	6	case AA_ESC :
call	49:12	49:49	6	vout_display_SendEventKey
arg	49:38	49:40	7	vd
water	49:38	0:0	8	vd
arg	49:42	49:49	7	KEY_ESC
water	49:42	0:0	8	KEY_ESC
water	49:50	0:0	6	;
break	50:12	50:17	6	
label	51:8	51:15	6	default :
if	52:12	53:52	6	(event >= 0 x20 && event <= 0 x7f)
cond	52:16	52:43	7	event >= 0 x20 && event <= 0 x7f
water	52:16	0:0	8	event
op	52:22	0:0	8	>=
water	52:25	0:0	8	0
water	52:26	0:0	8	x20
op	52:30	0:0	8	&&
water	52:33	0:0	8	event
op	52:39	0:0	8	<=
water	52:42	0:0	8	0
water	52:43	0:0	8	x7f
stmts	53:16	53:52	7	
call	53:16	53:51	8	vout_display_SendEventKey
arg	53:42	53:44	9	vd
water	53:42	0:0	10	vd
arg	53:46	53:51	9	event
water	53:46	0:0	10	event
water	53:52	0:0	8	;
break	54:12	54:17	6	
water	55:8	0:0	6	}
water	56:4	0:0	4	}
