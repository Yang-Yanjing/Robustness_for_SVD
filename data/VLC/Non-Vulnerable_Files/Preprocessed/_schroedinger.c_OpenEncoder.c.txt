func	2:0	191:0	0	static int	OpenEncoder
params	2:22	0:0	1	
param	2:24	2:45	2	vlc_object_t *	p_this
stmnts	0:0	190:23	1	
decl	4:4	4:42	2	encoder_t	*p_enc
op	4:21	0:0	2	=
water	4:23	0:0	2	(
water	4:24	0:0	2	encoder_t
op	4:34	0:0	2	*
water	4:35	0:0	2	)
water	4:36	0:0	2	p_this
decl	5:4	5:24	2	encoder_sys_t	*p_sys
decl	6:4	6:13	2	int	i_tmp
decl	7:4	7:15	2	float	f_tmp
decl	8:4	8:17	2	char	*psz_tmp
if	9:4	13:4	2	(p_enc -> fmt_out . i_codec != VLC_CODEC_DIRAC && ! p_enc -> b_force)
cond	9:8	10:16	3	p_enc -> fmt_out . i_codec != VLC_CODEC_DIRAC && ! p_enc -> b_force
water	9:8	0:0	4	p_enc
op	9:13	0:0	4	->
water	9:15	0:0	4	fmt_out
op	9:22	0:0	4	.
water	9:23	0:0	4	i_codec
op	9:31	0:0	4	!=
water	9:34	0:0	4	VLC_CODEC_DIRAC
op	9:50	0:0	4	&&
op	10:8	0:0	4	!
water	10:9	0:0	4	p_enc
op	10:14	0:0	4	->
water	10:16	0:0	4	b_force
stmts	11:4	13:4	3	
water	11:4	0:0	4	{
return	12:8	12:27	4	VLC_EGENERIC
water	12:15	0:0	5	VLC_EGENERIC
water	13:4	0:0	4	}
if	14:4	19:4	2	(! p_enc -> fmt_in . video . i_frame_rate || ! p_enc -> fmt_in . video . i_frame_rate_base || ! p_enc -> fmt_in . video . i_visible_height || ! p_enc -> fmt_in . video . i_visible_width)
cond	14:8	15:70	3	! p_enc -> fmt_in . video . i_frame_rate || ! p_enc -> fmt_in . video . i_frame_rate_base || ! p_enc -> fmt_in . video . i_visible_height || ! p_enc -> fmt_in . video . i_visible_width
op	14:8	0:0	4	!
water	14:9	0:0	4	p_enc
op	14:14	0:0	4	->
water	14:16	0:0	4	fmt_in
op	14:22	0:0	4	.
water	14:23	0:0	4	video
op	14:28	0:0	4	.
water	14:29	0:0	4	i_frame_rate
op	14:42	0:0	4	||
op	14:45	0:0	4	!
water	14:46	0:0	4	p_enc
op	14:51	0:0	4	->
water	14:53	0:0	4	fmt_in
op	14:59	0:0	4	.
water	14:60	0:0	4	video
op	14:65	0:0	4	.
water	14:66	0:0	4	i_frame_rate_base
op	14:84	0:0	4	||
op	15:8	0:0	4	!
water	15:9	0:0	4	p_enc
op	15:14	0:0	4	->
water	15:16	0:0	4	fmt_in
op	15:22	0:0	4	.
water	15:23	0:0	4	video
op	15:28	0:0	4	.
water	15:29	0:0	4	i_visible_height
op	15:46	0:0	4	||
op	15:49	0:0	4	!
water	15:50	0:0	4	p_enc
op	15:55	0:0	4	->
water	15:57	0:0	4	fmt_in
op	15:63	0:0	4	.
water	15:64	0:0	4	video
op	15:69	0:0	4	.
water	15:70	0:0	4	i_visible_width
stmts	16:4	19:4	3	
water	16:4	0:0	4	{
call	17:8	17:76	4	msg_Err
arg	17:17	17:22	5	p_enc
water	17:17	0:0	6	p_enc
arg	17:24	17:76	5	"Framerate and picture dimensions must be non-zero"
water	17:24	0:0	6	"Framerate and picture dimensions must be non-zero"
water	17:77	0:0	4	;
return	18:8	18:27	4	VLC_EGENERIC
water	18:15	0:0	5	VLC_EGENERIC
water	19:4	0:0	4	}
if	21:4	22:25	2	(( p_sys =calloc (1 ,sizeof ( * p_sys ) ) ) == NULL)
cond	21:8	21:53	3	( p_sys =calloc (1 ,sizeof ( * p_sys ) ) ) == NULL
water	21:8	0:0	4	(
water	21:10	0:0	4	p_sys
op	21:16	0:0	4	=
call	21:18	21:46	4	calloc
arg	21:26	21:27	5	1
water	21:26	0:0	6	1
arg	21:29	21:46	5	sizeof(*p_sys)
op	21:29	0:0	6	sizeof
water	21:35	0:0	6	(
op	21:37	0:0	6	*
water	21:38	0:0	6	p_sys
water	21:44	0:0	6	)
water	21:48	0:0	4	)
op	21:50	0:0	4	==
water	21:53	0:0	4	NULL
stmts	22:8	22:25	3	
return	22:8	22:25	4	VLC_ENOMEM
water	22:15	0:0	5	VLC_ENOMEM
water	23:4	0:0	2	p_enc
op	23:9	0:0	2	->
water	23:11	0:0	2	p_sys
op	23:17	0:0	2	=
water	23:19	0:0	2	p_sys
water	23:24	0:0	2	;
water	24:4	0:0	2	p_enc
op	24:9	0:0	2	->
water	24:11	0:0	2	pf_encode_video
op	24:27	0:0	2	=
water	24:29	0:0	2	Encode
water	24:35	0:0	2	;
water	25:4	0:0	2	p_enc
op	25:9	0:0	2	->
water	25:11	0:0	2	fmt_out
op	25:18	0:0	2	.
water	25:19	0:0	2	i_codec
op	25:27	0:0	2	=
water	25:29	0:0	2	VLC_CODEC_DIRAC
water	25:44	0:0	2	;
water	26:4	0:0	2	p_enc
op	26:9	0:0	2	->
water	26:11	0:0	2	fmt_out
op	26:18	0:0	2	.
water	26:19	0:0	2	i_cat
op	26:25	0:0	2	=
water	26:27	0:0	2	VIDEO_ES
water	26:35	0:0	2	;
if	27:4	31:4	2	(( p_sys -> p_dts_fifo =block_FifoNew ( ) ) == NULL)
cond	27:8	27:51	3	( p_sys -> p_dts_fifo =block_FifoNew ( ) ) == NULL
water	27:8	0:0	4	(
water	27:10	0:0	4	p_sys
op	27:15	0:0	4	->
water	27:17	0:0	4	p_dts_fifo
op	27:28	0:0	4	=
call	27:30	27:44	4	block_FifoNew
water	27:46	0:0	4	)
op	27:48	0:0	4	==
water	27:51	0:0	4	NULL
stmts	28:4	31:4	3	
water	28:4	0:0	4	{
call	29:8	29:29	4	CloseEncoder
arg	29:22	29:29	5	p_this
water	29:22	0:0	6	p_this
water	29:30	0:0	4	;
return	30:8	30:25	4	VLC_ENOMEM
water	30:15	0:0	5	VLC_ENOMEM
water	31:4	0:0	4	}
call	32:4	32:23	2	ResetPTStlb
arg	32:17	32:23	3	p_enc
water	32:17	0:0	4	p_enc
water	32:24	0:0	2	;
decl	34:4	34:13	2	int	i
op	34:10	0:0	2	=
water	34:12	0:0	2	0
decl	35:4	35:70	2	SchroVideoFormatEnum	guessed_video_fmt
op	35:43	0:0	2	=
water	35:45	0:0	2	SCHRO_VIDEO_FORMAT_CUSTOM
do	40:4	55:4	2	(schro_format_guess [ ++ i ] . i_height)
cond	55:13	55:37	3	schro_format_guess [ ++ i ] . i_height
water	55:13	0:0	4	schro_format_guess
op	55:31	0:0	4	[
op	55:32	0:0	4	++
water	55:34	0:0	4	i
op	55:35	0:0	4	]
op	55:36	0:0	4	.
water	55:37	0:0	4	i_height
stmts	41:4	55:4	3	
water	41:4	0:0	4	{
if	42:8	46:8	4	(schro_format_guess [ i ] . i_height > p_enc -> fmt_in . video . i_height)
cond	42:12	42:65	5	schro_format_guess [ i ] . i_height > p_enc -> fmt_in . video . i_height
water	42:12	0:0	6	schro_format_guess
op	42:30	0:0	6	[
water	42:31	0:0	6	i
op	42:32	0:0	6	]
op	42:33	0:0	6	.
water	42:34	0:0	6	i_height
op	42:43	0:0	6	>
water	42:45	0:0	6	p_enc
op	42:50	0:0	6	->
water	42:52	0:0	6	fmt_in
op	42:58	0:0	6	.
water	42:59	0:0	6	video
op	42:64	0:0	6	.
water	42:65	0:0	6	i_height
stmts	43:8	46:8	5	
water	43:8	0:0	6	{
water	44:12	0:0	6	guessed_video_fmt
op	44:30	0:0	6	=
water	44:32	0:0	6	schro_format_guess
op	44:50	0:0	6	[
water	44:51	0:0	6	i
op	44:52	0:0	6	-
water	44:53	0:0	6	1
op	44:54	0:0	6	]
op	44:55	0:0	6	.
water	44:56	0:0	6	i_vf
water	44:60	0:0	6	;
break	45:12	45:17	6	
water	46:8	0:0	6	}
if	47:8	48:20	4	(schro_format_guess [ i ] . i_height != p_enc -> fmt_in . video . i_height)
cond	47:12	47:66	5	schro_format_guess [ i ] . i_height != p_enc -> fmt_in . video . i_height
water	47:12	0:0	6	schro_format_guess
op	47:30	0:0	6	[
water	47:31	0:0	6	i
op	47:32	0:0	6	]
op	47:33	0:0	6	.
water	47:34	0:0	6	i_height
op	47:43	0:0	6	!=
water	47:46	0:0	6	p_enc
op	47:51	0:0	6	->
water	47:53	0:0	6	fmt_in
op	47:59	0:0	6	.
water	47:60	0:0	6	video
op	47:65	0:0	6	.
water	47:66	0:0	6	i_height
stmts	48:12	48:20	5	
continue	48:12	48:20	6	
decl	49:8	49:94	4	int	src_fps
op	49:20	0:0	4	=
water	49:22	0:0	4	p_enc
op	49:27	0:0	4	->
water	49:29	0:0	4	fmt_in
op	49:35	0:0	4	.
water	49:36	0:0	4	video
op	49:41	0:0	4	.
water	49:42	0:0	4	i_frame_rate
op	49:55	0:0	4	/
water	49:57	0:0	4	p_enc
op	49:62	0:0	4	->
water	49:64	0:0	4	fmt_in
op	49:70	0:0	4	.
water	49:71	0:0	4	video
op	49:76	0:0	4	.
water	49:77	0:0	4	i_frame_rate_base
decl	50:8	50:75	4	int	delta_fps
op	50:22	0:0	4	=
call	50:24	50:74	5	abs
arg	50:29	50:74	6	schro_format_guess[i].i_approx_fps-src_fps
water	50:29	0:0	7	schro_format_guess
op	50:47	0:0	7	[
water	50:48	0:0	7	i
op	50:49	0:0	7	]
op	50:50	0:0	7	.
water	50:51	0:0	7	i_approx_fps
op	50:64	0:0	7	-
water	50:66	0:0	7	src_fps
if	51:8	52:20	4	(delta_fps > 2)
cond	51:12	51:24	5	delta_fps > 2
water	51:12	0:0	6	delta_fps
op	51:22	0:0	6	>
water	51:24	0:0	6	2
stmts	52:12	52:20	5	
continue	52:12	52:20	6	
water	53:8	0:0	4	guessed_video_fmt
op	53:26	0:0	4	=
water	53:28	0:0	4	schro_format_guess
op	53:46	0:0	4	[
water	53:47	0:0	4	i
op	53:48	0:0	4	]
op	53:49	0:0	4	.
water	53:50	0:0	4	i_vf
water	53:54	0:0	4	;
break	54:8	54:13	4	
water	55:4	0:0	4	}
water	55:47	0:0	2	;
call	56:4	56:15	2	schro_init
water	56:16	0:0	2	;
water	57:4	0:0	2	p_sys
op	57:9	0:0	2	->
water	57:11	0:0	2	p_schro
op	57:19	0:0	2	=
call	57:21	57:39	2	schro_encoder_new
water	57:40	0:0	2	;
if	58:4	61:4	2	(! p_sys -> p_schro)
cond	58:8	58:16	3	! p_sys -> p_schro
op	58:8	0:0	4	!
water	58:9	0:0	4	p_sys
op	58:14	0:0	4	->
water	58:16	0:0	4	p_schro
stmts	58:26	61:4	3	
water	58:26	0:0	4	{
call	59:8	59:71	4	msg_Err
arg	59:17	59:22	5	p_enc
water	59:17	0:0	6	p_enc
arg	59:24	59:71	5	"Failed to initialize libschroedinger encoder"
water	59:24	0:0	6	"Failed to initialize libschroedinger encoder"
water	59:72	0:0	4	;
return	60:8	60:27	4	VLC_EGENERIC
water	60:15	0:0	5	VLC_EGENERIC
water	61:4	0:0	4	}
call	62:4	62:60	2	schro_encoder_set_packet_assembly
arg	62:39	62:53	3	p_sys->p_schro
water	62:39	0:0	4	p_sys
op	62:44	0:0	4	->
water	62:46	0:0	4	p_schro
arg	62:55	62:60	3	true
water	62:55	0:0	4	true
water	62:61	0:0	2	;
if	63:4	67:4	2	(! ( p_sys -> p_format =schro_encoder_get_video_format (p_sys -> p_schro ) ))
cond	63:8	63:78	3	! ( p_sys -> p_format =schro_encoder_get_video_format (p_sys -> p_schro ) )
op	63:8	0:0	4	!
water	63:9	0:0	4	(
water	63:11	0:0	4	p_sys
op	63:16	0:0	4	->
water	63:18	0:0	4	p_format
op	63:27	0:0	4	=
call	63:29	63:76	4	schro_encoder_get_video_format
arg	63:61	63:76	5	p_sys->p_schro
water	63:61	0:0	6	p_sys
op	63:66	0:0	6	->
water	63:68	0:0	6	p_schro
water	63:78	0:0	4	)
stmts	63:82	67:4	3	
water	63:82	0:0	4	{
call	64:8	64:66	4	msg_Err
arg	64:17	64:22	5	p_enc
water	64:17	0:0	6	p_enc
arg	64:24	64:66	5	"Failed to get Schroedigner video format"
water	64:24	0:0	6	"Failed to get Schroedigner video format"
water	64:67	0:0	4	;
call	65:8	65:43	4	schro_encoder_free
arg	65:28	65:43	5	p_sys->p_schro
water	65:28	0:0	6	p_sys
op	65:33	0:0	6	->
water	65:35	0:0	6	p_schro
water	65:44	0:0	4	;
return	66:8	66:27	4	VLC_EGENERIC
water	66:15	0:0	5	VLC_EGENERIC
water	67:4	0:0	4	}
call	69:4	69:80	2	schro_video_format_set_std_video_format
arg	69:45	69:60	3	p_sys->p_format
water	69:45	0:0	4	p_sys
op	69:50	0:0	4	->
water	69:52	0:0	4	p_format
arg	69:62	69:80	3	guessed_video_fmt
water	69:62	0:0	4	guessed_video_fmt
water	69:81	0:0	2	;
water	71:4	0:0	2	p_sys
op	71:9	0:0	2	->
water	71:11	0:0	2	p_format
op	71:19	0:0	2	->
water	71:21	0:0	2	width
op	71:44	0:0	2	=
water	71:46	0:0	2	p_enc
op	71:51	0:0	2	->
water	71:53	0:0	2	fmt_in
op	71:59	0:0	2	.
water	71:60	0:0	2	video
op	71:65	0:0	2	.
water	71:66	0:0	2	i_visible_width
water	71:81	0:0	2	;
water	72:4	0:0	2	p_sys
op	72:9	0:0	2	->
water	72:11	0:0	2	p_format
op	72:19	0:0	2	->
water	72:21	0:0	2	height
op	72:44	0:0	2	=
water	72:46	0:0	2	p_enc
op	72:51	0:0	2	->
water	72:53	0:0	2	fmt_in
op	72:59	0:0	2	.
water	72:60	0:0	2	video
op	72:65	0:0	2	.
water	72:66	0:0	2	i_visible_height
water	72:82	0:0	2	;
water	73:4	0:0	2	p_sys
op	73:9	0:0	2	->
water	73:11	0:0	2	p_format
op	73:19	0:0	2	->
water	73:21	0:0	2	frame_rate_numerator
op	73:44	0:0	2	=
water	73:46	0:0	2	p_enc
op	73:51	0:0	2	->
water	73:53	0:0	2	fmt_in
op	73:59	0:0	2	.
water	73:60	0:0	2	video
op	73:65	0:0	2	.
water	73:66	0:0	2	i_frame_rate
water	73:78	0:0	2	;
water	74:4	0:0	2	p_sys
op	74:9	0:0	2	->
water	74:11	0:0	2	p_format
op	74:19	0:0	2	->
water	74:21	0:0	2	frame_rate_denominator
op	74:44	0:0	2	=
water	74:46	0:0	2	p_enc
op	74:51	0:0	2	->
water	74:53	0:0	2	fmt_in
op	74:59	0:0	2	.
water	74:60	0:0	2	video
op	74:65	0:0	2	.
water	74:66	0:0	2	i_frame_rate_base
water	74:83	0:0	2	;
water	75:4	0:0	2	unsigned
water	75:13	0:0	2	u_asr_num
water	75:22	0:0	2	,
water	75:24	0:0	2	u_asr_den
water	75:33	0:0	2	;
call	76:4	78:50	2	vlc_ureduce
arg	76:17	76:27	3	&u_asr_num
op	76:17	0:0	4	&
water	76:18	0:0	4	u_asr_num
arg	76:29	76:39	3	&u_asr_den
op	76:29	0:0	4	&
water	76:30	0:0	4	u_asr_den
arg	77:17	77:46	3	p_enc->fmt_in.video.i_sar_num
water	77:17	0:0	4	p_enc
op	77:22	0:0	4	->
water	77:24	0:0	4	fmt_in
op	77:30	0:0	4	.
water	77:31	0:0	4	video
op	77:36	0:0	4	.
water	77:37	0:0	4	i_sar_num
arg	78:17	78:46	3	p_enc->fmt_in.video.i_sar_den
water	78:17	0:0	4	p_enc
op	78:22	0:0	4	->
water	78:24	0:0	4	fmt_in
op	78:30	0:0	4	.
water	78:31	0:0	4	video
op	78:36	0:0	4	.
water	78:37	0:0	4	i_sar_den
arg	78:48	78:50	3	0
water	78:48	0:0	4	0
water	78:51	0:0	2	;
water	79:4	0:0	2	p_sys
op	79:9	0:0	2	->
water	79:11	0:0	2	p_format
op	79:19	0:0	2	->
water	79:21	0:0	2	aspect_ratio_numerator
op	79:46	0:0	2	=
water	79:48	0:0	2	u_asr_num
water	79:57	0:0	2	;
water	80:4	0:0	2	p_sys
op	80:9	0:0	2	->
water	80:11	0:0	2	p_format
op	80:19	0:0	2	->
water	80:21	0:0	2	aspect_ratio_denominator
op	80:46	0:0	2	=
water	80:48	0:0	2	u_asr_den
water	80:57	0:0	2	;
call	81:4	81:77	2	config_ChainParse
arg	81:23	81:28	3	p_enc
water	81:23	0:0	4	p_enc
arg	81:30	81:44	3	ENC_CFG_PREFIX
water	81:30	0:0	4	ENC_CFG_PREFIX
arg	81:46	81:62	3	ppsz_enc_options
water	81:46	0:0	4	ppsz_enc_options
arg	81:64	81:77	3	p_enc->p_cfg
water	81:64	0:0	4	p_enc
op	81:69	0:0	4	->
water	81:71	0:0	4	p_cfg
water	81:78	0:0	2	;
call	82:4	82:97	2	SCHRO_SET_ENUM
arg	82:19	82:40	3	enc_rate_control_list
water	82:19	0:0	4	enc_rate_control_list
arg	82:42	82:58	3	ENC_RATE_CONTROL
water	82:42	0:0	4	ENC_RATE_CONTROL
arg	82:60	82:81	3	ENC_RATE_CONTROL_TEXT
water	82:60	0:0	4	ENC_RATE_CONTROL_TEXT
arg	82:83	82:97	3	"rate_control"
water	82:83	0:0	4	"rate_control"
call	83:4	83:101	2	SCHRO_SET_ENUM
arg	83:19	83:41	3	enc_gop_structure_list
water	83:19	0:0	4	enc_gop_structure_list
arg	83:43	83:60	3	ENC_GOP_STRUCTURE
water	83:43	0:0	4	ENC_GOP_STRUCTURE
arg	83:62	83:84	3	ENC_GOP_STRUCTURE_TEXT
water	83:62	0:0	4	ENC_GOP_STRUCTURE_TEXT
arg	83:86	83:101	3	"gop_structure"
water	83:86	0:0	4	"gop_structure"
water	84:4	0:0	2	psz_tmp
op	84:12	0:0	2	=
call	84:14	84:65	2	var_GetString
arg	84:29	84:34	3	p_enc
water	84:29	0:0	4	p_enc
arg	84:36	84:65	3	ENC_CFG_PREFIXENC_CHROMAFMT
water	84:36	0:0	4	ENC_CFG_PREFIX
water	84:51	0:0	4	ENC_CHROMAFMT
water	84:66	0:0	2	;
if	85:4	86:18	2	(! psz_tmp)
cond	85:8	85:9	3	! psz_tmp
op	85:8	0:0	4	!
water	85:9	0:0	4	psz_tmp
stmts	86:8	86:18	3	
goto	86:8	86:18	4	error
water	86:13	0:0	5	error
else	87:4	104:4	2
stmts	87:9	104:4	3	
water	87:9	0:0	4	{
decl	88:8	88:24	4	uint32_t	i_codec
if	89:8	91:8	4	(!strcmp (psz_tmp ,"420" ))
cond	89:12	89:36	5	!strcmp (psz_tmp ,"420" )
op	89:12	0:0	6	!
call	89:13	89:36	6	strcmp
arg	89:21	89:28	7	psz_tmp
water	89:21	0:0	8	psz_tmp
arg	89:30	89:36	7	"420"
water	89:30	0:0	8	"420"
stmts	89:40	91:8	5	
water	89:40	0:0	6	{
water	90:12	0:0	6	i_codec
op	90:20	0:0	6	=
water	90:22	0:0	6	VLC_CODEC_I420
water	90:36	0:0	6	;
water	91:8	0:0	6	}
else	92:8	94:8	4
stmts	92:13	94:8	5	
if	92:13	94:8	6	(!strcmp (psz_tmp ,"422" ))
cond	92:17	92:41	7	!strcmp (psz_tmp ,"422" )
op	92:17	0:0	8	!
call	92:18	92:41	8	strcmp
arg	92:26	92:33	9	psz_tmp
water	92:26	0:0	10	psz_tmp
arg	92:35	92:41	9	"422"
water	92:35	0:0	10	"422"
stmts	92:45	94:8	7	
water	92:45	0:0	8	{
water	93:12	0:0	8	i_codec
op	93:20	0:0	8	=
water	93:22	0:0	8	VLC_CODEC_I422
water	93:36	0:0	8	;
water	94:8	0:0	8	}
else	95:8	97:8	4
stmts	95:13	97:8	5	
if	95:13	97:8	6	(!strcmp (psz_tmp ,"444" ))
cond	95:17	95:41	7	!strcmp (psz_tmp ,"444" )
op	95:17	0:0	8	!
call	95:18	95:41	8	strcmp
arg	95:26	95:33	9	psz_tmp
water	95:26	0:0	10	psz_tmp
arg	95:35	95:41	9	"444"
water	95:35	0:0	10	"444"
stmts	95:45	97:8	7	
water	95:45	0:0	8	{
water	96:12	0:0	8	i_codec
op	96:20	0:0	8	=
water	96:22	0:0	8	VLC_CODEC_I444
water	96:36	0:0	8	;
water	97:8	0:0	8	}
else	98:8	102:8	4
stmts	98:13	102:8	5	
water	98:13	0:0	6	{
call	99:12	99:65	6	msg_Err
arg	99:21	99:26	7	p_enc
water	99:21	0:0	8	p_enc
arg	99:28	99:55	7	"Invalid chroma format: %s"
water	99:28	0:0	8	"Invalid chroma format: %s"
arg	99:57	99:65	7	psz_tmp
water	99:57	0:0	8	psz_tmp
water	99:66	0:0	6	;
call	100:12	100:26	6	free
arg	100:18	100:26	7	psz_tmp
water	100:18	0:0	8	psz_tmp
water	100:27	0:0	6	;
goto	101:12	101:22	6	error
water	101:17	0:0	7	error
water	102:8	0:0	6	}
call	103:8	103:43	4	SetEncChromaFormat
arg	103:28	103:33	5	p_enc
water	103:28	0:0	6	p_enc
arg	103:35	103:43	5	i_codec
water	103:35	0:0	6	i_codec
water	103:44	0:0	4	;
water	104:4	0:0	4	}
call	105:4	105:18	2	free
arg	105:10	105:18	3	psz_tmp
water	105:10	0:0	4	psz_tmp
water	105:19	0:0	2	;
call	106:4	106:42	2	SCHRO_SET_FLOAT
arg	106:20	106:31	3	ENC_QUALITY
water	106:20	0:0	4	ENC_QUALITY
arg	106:33	106:42	3	"quality"
water	106:33	0:0	4	"quality"
call	107:4	107:58	2	SCHRO_SET_FLOAT
arg	107:20	107:39	3	ENC_NOISE_THRESHOLD
water	107:20	0:0	4	ENC_NOISE_THRESHOLD
arg	107:41	107:58	3	"noise_threshold"
water	107:41	0:0	4	"noise_threshold"
water	109:4	0:0	2	i_tmp
op	109:10	0:0	2	=
call	109:12	109:62	2	var_GetInteger
arg	109:28	109:33	3	p_enc
water	109:28	0:0	4	p_enc
arg	109:35	109:62	3	ENC_CFG_PREFIXENC_BITRATE
water	109:35	0:0	4	ENC_CFG_PREFIX
water	109:50	0:0	4	ENC_BITRATE
water	109:63	0:0	2	;
if	110:4	111:83	2	(i_tmp > - 1)
cond	110:8	110:17	3	i_tmp > - 1
water	110:8	0:0	4	i_tmp
op	110:14	0:0	4	>
op	110:16	0:0	4	-
water	110:17	0:0	4	1
stmts	111:8	111:83	3	
call	111:8	111:82	4	schro_encoder_setting_set_double
arg	111:42	111:56	5	p_sys->p_schro
water	111:42	0:0	6	p_sys
op	111:47	0:0	6	->
water	111:49	0:0	6	p_schro
arg	111:58	111:67	5	"bitrate"
water	111:58	0:0	6	"bitrate"
arg	111:69	111:82	5	i_tmp*1000
water	111:69	0:0	6	i_tmp
op	111:75	0:0	6	*
water	111:77	0:0	6	1000
water	111:83	0:0	4	;
else	112:4	113:95	2
stmts	113:8	113:95	3	
call	113:8	113:94	4	schro_encoder_setting_set_double
arg	113:42	113:56	5	p_sys->p_schro
water	113:42	0:0	6	p_sys
op	113:47	0:0	6	->
water	113:49	0:0	6	p_schro
arg	113:58	113:67	5	"bitrate"
water	113:58	0:0	6	"bitrate"
arg	113:69	113:94	5	p_enc->fmt_out.i_bitrate
water	113:69	0:0	6	p_enc
op	113:74	0:0	6	->
water	113:76	0:0	6	fmt_out
op	113:83	0:0	6	.
water	113:84	0:0	6	i_bitrate
water	113:95	0:0	4	;
water	114:7	0:0	2	p_enc
op	114:12	0:0	2	->
water	114:14	0:0	2	fmt_out
op	114:21	0:0	2	.
water	114:22	0:0	2	i_bitrate
op	114:32	0:0	2	=
call	114:34	114:94	2	schro_encoder_setting_get_double
arg	114:68	114:82	3	p_sys->p_schro
water	114:68	0:0	4	p_sys
op	114:73	0:0	4	->
water	114:75	0:0	4	p_schro
arg	114:84	114:94	3	"bitrate"
water	114:84	0:0	4	"bitrate"
water	114:95	0:0	2	;
water	115:4	0:0	2	i_tmp
op	115:10	0:0	2	=
call	115:12	115:66	2	var_GetInteger
arg	115:28	115:33	3	p_enc
water	115:28	0:0	4	p_enc
arg	115:35	115:66	3	ENC_CFG_PREFIXENC_MIN_BITRATE
water	115:35	0:0	4	ENC_CFG_PREFIX
water	115:50	0:0	4	ENC_MIN_BITRATE
water	115:67	0:0	2	;
if	116:4	117:87	2	(i_tmp > - 1)
cond	116:8	116:17	3	i_tmp > - 1
water	116:8	0:0	4	i_tmp
op	116:14	0:0	4	>
op	116:16	0:0	4	-
water	116:17	0:0	4	1
stmts	117:8	117:87	3	
call	117:8	117:86	4	schro_encoder_setting_set_double
arg	117:42	117:56	5	p_sys->p_schro
water	117:42	0:0	6	p_sys
op	117:47	0:0	6	->
water	117:49	0:0	6	p_schro
arg	117:58	117:71	5	"min_bitrate"
water	117:58	0:0	6	"min_bitrate"
arg	117:73	117:86	5	i_tmp*1000
water	117:73	0:0	6	i_tmp
op	117:79	0:0	6	*
water	117:81	0:0	6	1000
water	117:87	0:0	4	;
water	118:4	0:0	2	i_tmp
op	118:10	0:0	2	=
call	118:12	118:66	2	var_GetInteger
arg	118:28	118:33	3	p_enc
water	118:28	0:0	4	p_enc
arg	118:35	118:66	3	ENC_CFG_PREFIXENC_MAX_BITRATE
water	118:35	0:0	4	ENC_CFG_PREFIX
water	118:50	0:0	4	ENC_MAX_BITRATE
water	118:67	0:0	2	;
if	119:4	120:87	2	(i_tmp > - 1)
cond	119:8	119:17	3	i_tmp > - 1
water	119:8	0:0	4	i_tmp
op	119:14	0:0	4	>
op	119:16	0:0	4	-
water	119:17	0:0	4	1
stmts	120:8	120:87	3	
call	120:8	120:86	4	schro_encoder_setting_set_double
arg	120:42	120:56	5	p_sys->p_schro
water	120:42	0:0	6	p_sys
op	120:47	0:0	6	->
water	120:49	0:0	6	p_schro
arg	120:58	120:71	5	"max_bitrate"
water	120:58	0:0	6	"max_bitrate"
arg	120:73	120:86	5	i_tmp*1000
water	120:73	0:0	6	i_tmp
op	120:79	0:0	6	*
water	120:81	0:0	6	1000
water	120:87	0:0	4	;
call	121:4	121:56	2	SCHRO_SET_INTEGER
arg	121:22	121:37	3	ENC_AU_DISTANCE
water	121:22	0:0	4	ENC_AU_DISTANCE
arg	121:39	121:52	3	"au_distance"
water	121:39	0:0	4	"au_distance"
arg	121:54	121:56	3	-1
op	121:54	0:0	4	-
water	121:55	0:0	4	1
call	122:4	122:85	2	SCHRO_SET_ENUM
arg	122:19	122:37	3	enc_filtering_list
water	122:19	0:0	4	enc_filtering_list
arg	122:39	122:52	3	ENC_PREFILTER
water	122:39	0:0	4	ENC_PREFILTER
arg	122:54	122:72	3	ENC_PREFILTER_TEXT
water	122:54	0:0	4	ENC_PREFILTER_TEXT
arg	122:74	122:85	3	"filtering"
water	122:74	0:0	4	"filtering"
call	123:4	123:58	2	SCHRO_SET_FLOAT
arg	123:20	123:42	3	ENC_PREFILTER_STRENGTH
water	123:20	0:0	4	ENC_PREFILTER_STRENGTH
arg	123:44	123:58	3	"filter_value"
water	123:44	0:0	4	"filter_value"
water	124:4	0:0	2	psz_tmp
op	124:12	0:0	2	=
call	124:14	124:66	2	var_GetString
arg	124:29	124:34	3	p_enc
water	124:29	0:0	4	p_enc
arg	124:36	124:66	3	ENC_CFG_PREFIXENC_CODINGMODE
water	124:36	0:0	4	ENC_CFG_PREFIX
water	124:51	0:0	4	ENC_CODINGMODE
water	124:67	0:0	2	;
if	125:4	126:18	2	(! psz_tmp)
cond	125:8	125:9	3	! psz_tmp
op	125:8	0:0	4	!
water	125:9	0:0	4	psz_tmp
stmts	126:8	126:18	3	
goto	126:8	126:18	4	error
water	126:13	0:0	5	error
else	127:4	129:4	2
stmts	127:9	129:4	3	
if	127:9	129:4	4	(!strcmp (psz_tmp ,"auto" ))
cond	127:13	127:38	5	!strcmp (psz_tmp ,"auto" )
op	127:13	0:0	6	!
call	127:14	127:38	6	strcmp
arg	127:22	127:29	7	psz_tmp
water	127:22	0:0	8	psz_tmp
arg	127:31	127:38	7	"auto"
water	127:31	0:0	8	"auto"
stmts	127:42	129:4	5	
water	127:42	0:0	6	{
water	128:8	0:0	6	p_sys
op	128:13	0:0	6	->
water	128:15	0:0	6	b_auto_field_coding
op	128:35	0:0	6	=
water	128:37	0:0	6	true
water	128:41	0:0	6	;
water	129:4	0:0	6	}
else	130:4	133:4	2
stmts	130:9	133:4	3	
if	130:9	133:4	4	(!strcmp (psz_tmp ,"progressive" ))
cond	130:13	130:45	5	!strcmp (psz_tmp ,"progressive" )
op	130:13	0:0	6	!
call	130:14	130:45	6	strcmp
arg	130:22	130:29	7	psz_tmp
water	130:22	0:0	8	psz_tmp
arg	130:31	130:45	7	"progressive"
water	130:31	0:0	8	"progressive"
stmts	130:49	133:4	5	
water	130:49	0:0	6	{
water	131:8	0:0	6	p_sys
op	131:13	0:0	6	->
water	131:15	0:0	6	b_auto_field_coding
op	131:35	0:0	6	=
water	131:37	0:0	6	false
water	131:42	0:0	6	;
call	132:8	132:84	6	schro_encoder_setting_set_double
arg	132:42	132:56	7	p_sys->p_schro
water	132:42	0:0	8	p_sys
op	132:47	0:0	8	->
water	132:49	0:0	8	p_schro
arg	132:58	132:77	7	"interlaced_coding"
water	132:58	0:0	8	"interlaced_coding"
arg	132:79	132:84	7	false
water	132:79	0:0	8	false
water	132:85	0:0	6	;
water	133:4	0:0	6	}
else	134:4	137:4	2
stmts	134:9	137:4	3	
if	134:9	137:4	4	(!strcmp (psz_tmp ,"field" ))
cond	134:13	134:39	5	!strcmp (psz_tmp ,"field" )
op	134:13	0:0	6	!
call	134:14	134:39	6	strcmp
arg	134:22	134:29	7	psz_tmp
water	134:22	0:0	8	psz_tmp
arg	134:31	134:39	7	"field"
water	134:31	0:0	8	"field"
stmts	134:43	137:4	5	
water	134:43	0:0	6	{
water	135:8	0:0	6	p_sys
op	135:13	0:0	6	->
water	135:15	0:0	6	b_auto_field_coding
op	135:35	0:0	6	=
water	135:37	0:0	6	false
water	135:42	0:0	6	;
call	136:8	136:83	6	schro_encoder_setting_set_double
arg	136:42	136:56	7	p_sys->p_schro
water	136:42	0:0	8	p_sys
op	136:47	0:0	8	->
water	136:49	0:0	8	p_schro
arg	136:58	136:77	7	"interlaced_coding"
water	136:58	0:0	8	"interlaced_coding"
arg	136:79	136:83	7	true
water	136:79	0:0	8	true
water	136:84	0:0	6	;
water	137:4	0:0	6	}
else	138:4	142:4	2
stmts	138:9	142:4	3	
water	138:9	0:0	4	{
call	139:8	139:58	4	msg_Err
arg	139:17	139:22	5	p_enc
water	139:17	0:0	6	p_enc
arg	139:24	139:48	5	"Invalid codingmode: %s"
water	139:24	0:0	6	"Invalid codingmode: %s"
arg	139:50	139:58	5	psz_tmp
water	139:50	0:0	6	psz_tmp
water	139:59	0:0	4	;
call	140:8	140:22	4	free
arg	140:14	140:22	5	psz_tmp
water	140:14	0:0	6	psz_tmp
water	140:23	0:0	4	;
goto	141:8	141:18	4	error
water	141:13	0:0	5	error
water	142:4	0:0	4	}
call	143:4	143:18	2	free
arg	143:10	143:18	3	psz_tmp
water	143:10	0:0	4	psz_tmp
water	143:19	0:0	2	;
call	144:4	144:96	2	SCHRO_SET_ENUM
arg	144:19	144:38	3	enc_block_size_list
water	144:19	0:0	4	enc_block_size_list
arg	144:40	144:54	3	ENC_MCBLK_SIZE
water	144:40	0:0	4	ENC_MCBLK_SIZE
arg	144:56	144:75	3	ENC_MCBLK_SIZE_TEXT
water	144:56	0:0	4	ENC_MCBLK_SIZE_TEXT
arg	144:77	144:96	3	"motion_block_size"
water	144:77	0:0	4	"motion_block_size"
call	145:4	145:108	2	SCHRO_SET_ENUM
arg	145:19	145:41	3	enc_block_overlap_list
water	145:19	0:0	4	enc_block_overlap_list
arg	145:43	145:60	3	ENC_MCBLK_OVERLAP
water	145:43	0:0	4	ENC_MCBLK_OVERLAP
arg	145:62	145:84	3	ENC_MCBLK_OVERLAP_TEXT
water	145:62	0:0	4	ENC_MCBLK_OVERLAP_TEXT
arg	145:86	145:108	3	"motion_block_overlap"
water	145:86	0:0	4	"motion_block_overlap"
water	146:4	0:0	2	psz_tmp
op	146:12	0:0	2	=
call	146:14	146:62	2	var_GetString
arg	146:29	146:34	3	p_enc
water	146:29	0:0	4	p_enc
arg	146:36	146:62	3	ENC_CFG_PREFIXENC_MVPREC
water	146:36	0:0	4	ENC_CFG_PREFIX
water	146:51	0:0	4	ENC_MVPREC
water	146:63	0:0	2	;
if	147:4	148:18	2	(! psz_tmp)
cond	147:8	147:9	3	! psz_tmp
op	147:8	0:0	4	!
water	147:9	0:0	4	psz_tmp
stmts	148:8	148:18	3	
goto	148:8	148:18	4	error
water	148:13	0:0	5	error
else	149:4	167:4	2
stmts	149:9	167:4	3	
if	149:9	167:4	4	(* psz_tmp != '\0')
cond	149:13	149:25	5	* psz_tmp != '\0'
op	149:13	0:0	6	*
water	149:14	0:0	6	psz_tmp
op	149:22	0:0	6	!=
water	149:25	0:0	6	'\0'
stmts	149:31	167:4	5	
water	149:31	0:0	6	{
if	150:8	152:8	6	(!strcmp (psz_tmp ,"1" ))
cond	150:12	150:34	7	!strcmp (psz_tmp ,"1" )
op	150:12	0:0	8	!
call	150:13	150:34	8	strcmp
arg	150:21	150:28	9	psz_tmp
water	150:21	0:0	10	psz_tmp
arg	150:30	150:34	9	"1"
water	150:30	0:0	10	"1"
stmts	150:38	152:8	7	
water	150:38	0:0	8	{
call	151:12	151:80	8	schro_encoder_setting_set_double
arg	151:46	151:60	9	p_sys->p_schro
water	151:46	0:0	10	p_sys
op	151:51	0:0	10	->
water	151:53	0:0	10	p_schro
arg	151:62	151:76	9	"mv_precision"
water	151:62	0:0	10	"mv_precision"
arg	151:78	151:80	9	0
water	151:78	0:0	10	0
water	151:81	0:0	8	;
water	152:8	0:0	8	}
else	153:8	155:8	6
stmts	153:13	155:8	7	
if	153:13	155:8	8	(!strcmp (psz_tmp ,"1/2" ))
cond	153:17	153:41	9	!strcmp (psz_tmp ,"1/2" )
op	153:17	0:0	10	!
call	153:18	153:41	10	strcmp
arg	153:26	153:33	11	psz_tmp
water	153:26	0:0	12	psz_tmp
arg	153:35	153:41	11	"1/2"
water	153:35	0:0	12	"1/2"
stmts	153:45	155:8	9	
water	153:45	0:0	10	{
call	154:12	154:80	10	schro_encoder_setting_set_double
arg	154:46	154:60	11	p_sys->p_schro
water	154:46	0:0	12	p_sys
op	154:51	0:0	12	->
water	154:53	0:0	12	p_schro
arg	154:62	154:76	11	"mv_precision"
water	154:62	0:0	12	"mv_precision"
arg	154:78	154:80	11	1
water	154:78	0:0	12	1
water	154:81	0:0	10	;
water	155:8	0:0	10	}
else	156:8	158:8	6
stmts	156:13	158:8	7	
if	156:13	158:8	8	(!strcmp (psz_tmp ,"1/4" ))
cond	156:17	156:41	9	!strcmp (psz_tmp ,"1/4" )
op	156:17	0:0	10	!
call	156:18	156:41	10	strcmp
arg	156:26	156:33	11	psz_tmp
water	156:26	0:0	12	psz_tmp
arg	156:35	156:41	11	"1/4"
water	156:35	0:0	12	"1/4"
stmts	156:45	158:8	9	
water	156:45	0:0	10	{
call	157:12	157:80	10	schro_encoder_setting_set_double
arg	157:46	157:60	11	p_sys->p_schro
water	157:46	0:0	12	p_sys
op	157:51	0:0	12	->
water	157:53	0:0	12	p_schro
arg	157:62	157:76	11	"mv_precision"
water	157:62	0:0	12	"mv_precision"
arg	157:78	157:80	11	2
water	157:78	0:0	12	2
water	157:81	0:0	10	;
water	158:8	0:0	10	}
else	159:8	161:8	6
stmts	159:13	161:8	7	
if	159:13	161:8	8	(!strcmp (psz_tmp ,"1/8" ))
cond	159:17	159:41	9	!strcmp (psz_tmp ,"1/8" )
op	159:17	0:0	10	!
call	159:18	159:41	10	strcmp
arg	159:26	159:33	11	psz_tmp
water	159:26	0:0	12	psz_tmp
arg	159:35	159:41	11	"1/8"
water	159:35	0:0	12	"1/8"
stmts	159:45	161:8	9	
water	159:45	0:0	10	{
call	160:12	160:80	10	schro_encoder_setting_set_double
arg	160:46	160:60	11	p_sys->p_schro
water	160:46	0:0	12	p_sys
op	160:51	0:0	12	->
water	160:53	0:0	12	p_schro
arg	160:62	160:76	11	"mv_precision"
water	160:62	0:0	12	"mv_precision"
arg	160:78	160:80	11	3
water	160:78	0:0	12	3
water	160:81	0:0	10	;
water	161:8	0:0	10	}
else	162:8	166:8	6
stmts	162:13	166:8	7	
water	162:13	0:0	8	{
call	163:12	163:64	8	msg_Err
arg	163:21	163:26	9	p_enc
water	163:21	0:0	10	p_enc
arg	163:28	163:54	9	"Invalid mv_precision: %s"
water	163:28	0:0	10	"Invalid mv_precision: %s"
arg	163:56	163:64	9	psz_tmp
water	163:56	0:0	10	psz_tmp
water	163:65	0:0	8	;
call	164:12	164:26	8	free
arg	164:18	164:26	9	psz_tmp
water	164:18	0:0	10	psz_tmp
water	164:27	0:0	8	;
goto	165:12	165:22	8	error
water	165:17	0:0	9	error
water	166:8	0:0	8	}
water	167:4	0:0	6	}
call	168:4	168:18	2	free
arg	168:10	168:18	3	psz_tmp
water	168:10	0:0	4	psz_tmp
water	168:19	0:0	2	;
call	169:4	169:61	2	SCHRO_SET_INTEGER
arg	169:22	169:37	3	ENC_ME_COMBINED
water	169:22	0:0	4	ENC_ME_COMBINED
arg	169:39	169:57	3	"enable_chroma_me"
water	169:39	0:0	4	"enable_chroma_me"
arg	169:59	169:61	3	-1
op	169:59	0:0	4	-
water	169:60	0:0	4	1
call	170:4	170:85	2	SCHRO_SET_ENUM
arg	170:19	170:35	3	enc_wavelet_list
water	170:19	0:0	4	enc_wavelet_list
arg	170:37	170:49	3	ENC_DWTINTRA
water	170:37	0:0	4	ENC_DWTINTRA
arg	170:51	170:68	3	ENC_DWTINTRA_TEXT
water	170:51	0:0	4	ENC_DWTINTRA_TEXT
arg	170:70	170:85	3	"intra_wavelet"
water	170:70	0:0	4	"intra_wavelet"
call	171:4	171:85	2	SCHRO_SET_ENUM
arg	171:19	171:35	3	enc_wavelet_list
water	171:19	0:0	4	enc_wavelet_list
arg	171:37	171:49	3	ENC_DWTINTER
water	171:37	0:0	4	ENC_DWTINTER
arg	171:51	171:68	3	ENC_DWTINTER_TEXT
water	171:51	0:0	4	ENC_DWTINTER_TEXT
arg	171:70	171:85	3	"inter_wavelet"
water	171:70	0:0	4	"inter_wavelet"
call	172:4	172:57	2	SCHRO_SET_INTEGER
arg	172:22	172:34	3	ENC_DWTDEPTH
water	172:22	0:0	4	ENC_DWTDEPTH
arg	172:36	172:53	3	"transform_depth"
water	172:36	0:0	4	"transform_depth"
arg	172:55	172:57	3	-1
op	172:55	0:0	4	-
water	172:56	0:0	4	1
call	173:4	173:61	2	SCHRO_SET_INTEGER
arg	173:22	173:36	3	ENC_MULTIQUANT
water	173:22	0:0	4	ENC_MULTIQUANT
arg	173:38	173:57	3	"enable_multiquant"
water	173:38	0:0	4	"enable_multiquant"
arg	173:59	173:61	3	-1
op	173:59	0:0	4	-
water	173:60	0:0	4	1
call	174:4	174:52	2	SCHRO_SET_INTEGER
arg	174:22	174:30	3	ENC_NOAC
water	174:22	0:0	4	ENC_NOAC
arg	174:32	174:48	3	"enable_noarith"
water	174:32	0:0	4	"enable_noarith"
arg	174:50	174:52	3	-1
op	174:50	0:0	4	-
water	174:51	0:0	4	1
call	175:4	175:95	2	SCHRO_SET_ENUM
arg	175:19	175:48	3	enc_perceptual_weighting_list
water	175:19	0:0	4	enc_perceptual_weighting_list
arg	175:50	175:57	3	ENC_PWT
water	175:50	0:0	4	ENC_PWT
arg	175:59	175:71	3	ENC_PWT_TEXT
water	175:59	0:0	4	ENC_PWT_TEXT
arg	175:73	175:95	3	"perceptual_weighting"
water	175:73	0:0	4	"perceptual_weighting"
call	176:4	176:52	2	SCHRO_SET_FLOAT
arg	176:20	176:29	3	ENC_PDIST
water	176:20	0:0	4	ENC_PDIST
arg	176:31	176:52	3	"perceptual_distance"
water	176:31	0:0	4	"perceptual_distance"
call	177:4	177:53	2	SCHRO_SET_INTEGER
arg	177:22	177:33	3	ENC_HSLICES
water	177:22	0:0	4	ENC_HSLICES
arg	177:35	177:49	3	"horiz_slices"
water	177:35	0:0	4	"horiz_slices"
arg	177:51	177:53	3	-1
op	177:51	0:0	4	-
water	177:52	0:0	4	1
call	178:4	178:52	2	SCHRO_SET_INTEGER
arg	178:22	178:33	3	ENC_VSLICES
water	178:22	0:0	4	ENC_VSLICES
arg	178:35	178:48	3	"vert_slices"
water	178:35	0:0	4	"vert_slices"
arg	178:50	178:52	3	-1
op	178:50	0:0	4	-
water	178:51	0:0	4	1
call	179:4	179:97	2	SCHRO_SET_ENUM
arg	179:19	179:42	3	enc_codeblock_size_list
water	179:19	0:0	4	enc_codeblock_size_list
arg	179:44	179:58	3	ENC_SCBLK_SIZE
water	179:44	0:0	4	ENC_SCBLK_SIZE
arg	179:60	179:79	3	ENC_SCBLK_SIZE_TEXT
water	179:60	0:0	4	ENC_SCBLK_SIZE_TEXT
arg	179:81	179:97	3	"codeblock_size"
water	179:81	0:0	4	"codeblock_size"
call	180:4	180:79	2	SCHRO_SET_INTEGER
arg	180:22	180:41	3	ENC_ME_HIERARCHICAL
water	180:22	0:0	4	ENC_ME_HIERARCHICAL
arg	180:43	180:75	3	"enable_hierarchical_estimation"
water	180:43	0:0	4	"enable_hierarchical_estimation"
arg	180:77	180:79	3	-1
op	180:77	0:0	4	-
water	180:78	0:0	4	1
call	181:4	181:70	2	SCHRO_SET_INTEGER
arg	181:22	181:46	3	ENC_ME_DOWNSAMPLE_LEVELS
water	181:22	0:0	4	ENC_ME_DOWNSAMPLE_LEVELS
arg	181:48	181:67	3	"downsample_levels"
water	181:48	0:0	4	"downsample_levels"
arg	181:69	181:70	3	1
water	181:69	0:0	4	1
call	182:4	182:70	2	SCHRO_SET_INTEGER
arg	182:22	182:42	3	ENC_ME_GLOBAL_MOTION
water	182:22	0:0	4	ENC_ME_GLOBAL_MOTION
arg	182:44	182:66	3	"enable_global_motion"
water	182:44	0:0	4	"enable_global_motion"
arg	182:68	182:70	3	-1
op	182:68	0:0	4	-
water	182:69	0:0	4	1
call	183:4	183:73	2	SCHRO_SET_INTEGER
arg	183:22	183:38	3	ENC_ME_PHASECORR
water	183:22	0:0	4	ENC_ME_PHASECORR
arg	183:40	183:69	3	"enable_phasecorr_estimation"
water	183:40	0:0	4	"enable_phasecorr_estimation"
arg	183:71	183:73	3	-1
op	183:71	0:0	4	-
water	183:72	0:0	4	1
call	184:4	184:66	2	SCHRO_SET_INTEGER
arg	184:22	184:29	3	ENC_SCD
water	184:22	0:0	4	ENC_SCD
arg	184:31	184:62	3	"enable_scene_change_detection"
water	184:31	0:0	4	"enable_scene_change_detection"
arg	184:64	184:66	3	-1
op	184:64	0:0	4	-
water	184:65	0:0	4	1
call	185:4	185:95	2	SCHRO_SET_ENUM
arg	185:19	185:35	3	enc_profile_list
water	185:19	0:0	4	enc_profile_list
arg	185:37	185:54	3	ENC_FORCE_PROFILE
water	185:37	0:0	4	ENC_FORCE_PROFILE
arg	185:56	185:78	3	ENC_FORCE_PROFILE_TEXT
water	185:56	0:0	4	ENC_FORCE_PROFILE_TEXT
arg	185:80	185:95	3	"force_profile"
water	185:80	0:0	4	"force_profile"
water	186:4	0:0	2	p_sys
op	186:9	0:0	2	->
water	186:11	0:0	2	started
op	186:19	0:0	2	=
water	186:21	0:0	2	0
water	186:22	0:0	2	;
return	187:4	187:22	2	VLC_SUCCESS
water	187:11	0:0	3	VLC_SUCCESS
label	188:0	188:5	2	error :
call	189:4	189:25	2	CloseEncoder
arg	189:18	189:25	3	p_this
water	189:18	0:0	4	p_this
water	189:26	0:0	2	;
return	190:4	190:23	2	VLC_EGENERIC
water	190:11	0:0	3	VLC_EGENERIC
