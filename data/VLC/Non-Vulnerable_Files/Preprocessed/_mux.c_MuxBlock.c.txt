func	2:0	43:0	0	static int	MuxBlock
params	2:19	0:0	1	
param	2:21	2:38	2	sout_mux_t *	p_mux
param	2:40	2:62	2	sout_input_t *	p_input
stmnts	0:0	42:22	1	
decl	4:4	4:40	2	sout_mux_sys_t	*p_sys
op	4:26	0:0	2	=
water	4:28	0:0	2	p_mux
op	4:33	0:0	2	->
water	4:35	0:0	2	p_sys
decl	5:4	5:54	2	block_t	*p_data
op	5:20	0:0	2	=
call	5:22	5:53	3	block_FifoGet
arg	5:37	5:53	4	p_input->p_fifo
water	5:37	0:0	5	p_input
op	5:44	0:0	5	->
water	5:46	0:0	5	p_fifo
decl	6:4	6:43	2	int	i_stream
op	6:17	0:0	2	=
op	6:19	0:0	2	*
water	6:20	0:0	2	(
water	6:21	0:0	2	(
water	6:22	0:0	2	int
op	6:26	0:0	2	*
water	6:27	0:0	2	)
water	6:28	0:0	2	p_input
op	6:35	0:0	2	->
water	6:37	0:0	2	p_sys
water	6:42	0:0	2	)
decl	7:4	7:53	2	AVStream	*p_stream
op	7:23	0:0	2	=
water	7:25	0:0	2	p_sys
op	7:30	0:0	2	->
water	7:32	0:0	2	oc
op	7:34	0:0	2	->
water	7:36	0:0	2	streams
op	7:43	0:0	2	[
water	7:44	0:0	2	i_stream
op	7:52	0:0	2	]
decl	8:4	8:16	2	AVPacket	pkt
call	9:4	9:38	2	memset
arg	9:12	9:16	3	&pkt
op	9:12	0:0	4	&
water	9:13	0:0	4	pkt
arg	9:18	9:19	3	0
water	9:18	0:0	4	0
arg	9:21	9:38	3	sizeof(AVPacket)
op	9:21	0:0	4	sizeof
water	9:27	0:0	4	(
water	9:28	0:0	4	AVPacket
water	9:36	0:0	4	)
water	9:39	0:0	2	;
call	10:4	10:23	2	av_init_packet
arg	10:19	10:23	3	&pkt
op	10:19	0:0	4	&
water	10:20	0:0	4	pkt
water	10:24	0:0	2	;
water	11:4	0:0	2	pkt
op	11:7	0:0	2	.
water	11:8	0:0	2	data
op	11:13	0:0	2	=
water	11:15	0:0	2	p_data
op	11:21	0:0	2	->
water	11:23	0:0	2	p_buffer
water	11:31	0:0	2	;
water	12:4	0:0	2	pkt
op	12:7	0:0	2	.
water	12:8	0:0	2	size
op	12:13	0:0	2	=
water	12:15	0:0	2	p_data
op	12:21	0:0	2	->
water	12:23	0:0	2	i_buffer
water	12:31	0:0	2	;
water	13:4	0:0	2	pkt
op	13:7	0:0	2	.
water	13:8	0:0	2	stream_index
op	13:21	0:0	2	=
water	13:23	0:0	2	i_stream
water	13:31	0:0	2	;
if	14:4	23:4	2	(p_data -> i_flags & BLOCK_FLAG_TYPE_I)
cond	14:8	14:26	3	p_data -> i_flags & BLOCK_FLAG_TYPE_I
water	14:8	0:0	4	p_data
op	14:14	0:0	4	->
water	14:16	0:0	4	i_flags
op	14:24	0:0	4	&
water	14:26	0:0	4	BLOCK_FLAG_TYPE_I
stmts	15:4	23:4	3	
water	15:4	0:0	4	{
if	18:8	19:45	4	(p_sys -> oc -> oformat -> flags & AVFMT_ALLOW_FLUSH)
cond	18:12	18:40	5	p_sys -> oc -> oformat -> flags & AVFMT_ALLOW_FLUSH
water	18:12	0:0	6	p_sys
op	18:17	0:0	6	->
water	18:19	0:0	6	oc
op	18:21	0:0	6	->
water	18:23	0:0	6	oformat
op	18:30	0:0	6	->
water	18:32	0:0	6	flags
op	18:38	0:0	6	&
water	18:40	0:0	6	AVFMT_ALLOW_FLUSH
stmts	19:12	19:45	5	
call	19:12	19:44	6	av_write_frame
arg	19:28	19:37	7	p_sys->oc
water	19:28	0:0	8	p_sys
op	19:33	0:0	8	->
water	19:35	0:0	8	oc
arg	19:39	19:44	7	NULL
water	19:39	0:0	8	NULL
water	19:45	0:0	6	;
water	21:8	0:0	4	p_sys
op	21:13	0:0	4	->
water	21:15	0:0	4	b_write_keyframe
op	21:32	0:0	4	=
water	21:34	0:0	4	true
water	21:38	0:0	4	;
water	22:8	0:0	4	pkt
op	22:11	0:0	4	.
water	22:12	0:0	4	flags
op	22:18	0:0	4	|=
water	22:21	0:0	4	AV_PKT_FLAG_KEY
water	22:36	0:0	4	;
water	23:4	0:0	4	}
if	24:4	26:48	2	(p_data -> i_pts > 0)
cond	24:8	24:24	3	p_data -> i_pts > 0
water	24:8	0:0	4	p_data
op	24:14	0:0	4	->
water	24:16	0:0	4	i_pts
op	24:22	0:0	4	>
water	24:24	0:0	4	0
stmts	25:8	26:48	3	
water	25:8	0:0	4	pkt
op	25:11	0:0	4	.
water	25:12	0:0	4	pts
op	25:16	0:0	4	=
water	25:18	0:0	4	p_data
op	25:24	0:0	4	->
water	25:26	0:0	4	i_pts
op	25:32	0:0	4	*
water	25:34	0:0	4	p_stream
op	25:42	0:0	4	->
water	25:44	0:0	4	time_base
op	25:53	0:0	4	.
water	25:54	0:0	4	den
op	25:58	0:0	4	/
water	26:12	0:0	4	CLOCK_FREQ
op	26:23	0:0	4	/
water	26:25	0:0	4	p_stream
op	26:33	0:0	4	->
water	26:35	0:0	4	time_base
op	26:44	0:0	4	.
water	26:45	0:0	4	num
water	26:48	0:0	4	;
if	27:4	29:48	2	(p_data -> i_dts > 0)
cond	27:8	27:24	3	p_data -> i_dts > 0
water	27:8	0:0	4	p_data
op	27:14	0:0	4	->
water	27:16	0:0	4	i_dts
op	27:22	0:0	4	>
water	27:24	0:0	4	0
stmts	28:8	29:48	3	
water	28:8	0:0	4	pkt
op	28:11	0:0	4	.
water	28:12	0:0	4	dts
op	28:16	0:0	4	=
water	28:18	0:0	4	p_data
op	28:24	0:0	4	->
water	28:26	0:0	4	i_dts
op	28:32	0:0	4	*
water	28:34	0:0	4	p_stream
op	28:42	0:0	4	->
water	28:44	0:0	4	time_base
op	28:53	0:0	4	.
water	28:54	0:0	4	den
op	28:58	0:0	4	/
water	29:12	0:0	4	CLOCK_FREQ
op	29:23	0:0	4	/
water	29:25	0:0	4	p_stream
op	29:33	0:0	4	->
water	29:35	0:0	4	time_base
op	29:44	0:0	4	.
water	29:45	0:0	4	num
water	29:48	0:0	4	;
water	31:4	0:0	2	p_stream
op	31:12	0:0	2	->
water	31:14	0:0	2	cur_dts
op	31:22	0:0	2	=
water	31:24	0:0	2	(
water	31:26	0:0	2	p_data
op	31:32	0:0	2	->
water	31:34	0:0	2	i_dts
op	31:40	0:0	2	*
water	31:42	0:0	2	p_stream
op	31:50	0:0	2	->
water	31:52	0:0	2	time_base
op	31:61	0:0	2	.
water	31:62	0:0	2	den
op	31:66	0:0	2	/
water	32:12	0:0	2	CLOCK_FREQ
op	32:23	0:0	2	/
water	32:25	0:0	2	p_stream
op	32:33	0:0	2	->
water	32:35	0:0	2	time_base
op	32:44	0:0	2	.
water	32:45	0:0	2	num
water	32:49	0:0	2	)
op	32:51	0:0	2	-
water	32:53	0:0	2	1
water	32:54	0:0	2	;
if	33:4	40:4	2	(av_write_frame (p_sys -> oc ,& pkt ) < 0)
cond	33:8	33:44	3	av_write_frame (p_sys -> oc ,& pkt ) < 0
call	33:8	33:40	4	av_write_frame
arg	33:24	33:33	5	p_sys->oc
water	33:24	0:0	6	p_sys
op	33:29	0:0	6	->
water	33:31	0:0	6	oc
arg	33:35	33:40	5	&pkt
op	33:35	0:0	6	&
water	33:36	0:0	6	pkt
op	33:42	0:0	4	<
water	33:44	0:0	4	0
stmts	34:4	40:4	3	
water	34:4	0:0	4	{
call	35:8	37:64	4	msg_Err
arg	35:17	35:22	5	p_mux
water	35:17	0:0	6	p_mux
arg	35:24	36:55	5	"could not write frame (pts: %"PRId64", dts: %"PRId64") ""(pkt pts: %"PRId64", dts: %"PRId64")"
water	35:24	0:0	6	"could not write frame (pts: %"
water	35:55	0:0	6	PRId64
water	35:61	0:0	6	", dts: %"
water	35:71	0:0	6	PRId64
water	35:77	0:0	6	") "
water	36:17	0:0	6	"(pkt pts: %"
water	36:30	0:0	6	PRId64
water	36:36	0:0	6	", dts: %"
water	36:46	0:0	6	PRId64
water	36:52	0:0	6	")"
arg	37:17	37:30	5	p_data->i_pts
water	37:17	0:0	6	p_data
op	37:23	0:0	6	->
water	37:25	0:0	6	i_pts
arg	37:32	37:45	5	p_data->i_dts
water	37:32	0:0	6	p_data
op	37:38	0:0	6	->
water	37:40	0:0	6	i_dts
arg	37:47	37:54	5	pkt.pts
water	37:47	0:0	6	pkt
op	37:50	0:0	6	.
water	37:51	0:0	6	pts
arg	37:56	37:64	5	pkt.dts
water	37:56	0:0	6	pkt
op	37:59	0:0	6	.
water	37:60	0:0	6	dts
water	37:65	0:0	4	;
call	38:8	38:30	4	block_Release
arg	38:23	38:30	5	p_data
water	38:23	0:0	6	p_data
water	38:31	0:0	4	;
return	39:8	39:27	4	VLC_EGENERIC
water	39:15	0:0	5	VLC_EGENERIC
water	40:4	0:0	4	}
call	41:4	41:26	2	block_Release
arg	41:19	41:26	3	p_data
water	41:19	0:0	4	p_data
water	41:27	0:0	2	;
return	42:4	42:22	2	VLC_SUCCESS
water	42:11	0:0	3	VLC_SUCCESS
