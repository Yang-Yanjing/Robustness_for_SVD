func	2:0	91:0	0	static void *	ProcessPacket
params	2:26	0:0	1	
param	2:28	2:44	2	decoder_t *	p_dec
param	2:46	2:69	2	ogg_packet *	p_oggpacket
param	3:28	3:47	2	block_t * *	pp_block
stmnts	0:0	90:4	1	
decl	5:4	5:39	2	decoder_sys_t	*p_sys
op	5:25	0:0	2	=
water	5:27	0:0	2	p_dec
op	5:32	0:0	2	->
water	5:34	0:0	2	p_sys
decl	6:4	6:32	2	block_t	*p_block
op	6:21	0:0	2	=
op	6:23	0:0	2	*
water	6:24	0:0	2	pp_block
if	8:4	12:4	2	(p_block && p_block -> i_pts > VLC_TS_INVALID && p_block -> i_pts !=date_Get (& p_sys -> end_date ))
cond	8:8	9:53	3	p_block && p_block -> i_pts > VLC_TS_INVALID && p_block -> i_pts !=date_Get (& p_sys -> end_date )
water	8:8	0:0	4	p_block
op	8:16	0:0	4	&&
water	8:19	0:0	4	p_block
op	8:26	0:0	4	->
water	8:28	0:0	4	i_pts
op	8:34	0:0	4	>
water	8:36	0:0	4	VLC_TS_INVALID
op	8:51	0:0	4	&&
water	9:8	0:0	4	p_block
op	9:15	0:0	4	->
water	9:17	0:0	4	i_pts
op	9:23	0:0	4	!=
call	9:26	9:53	4	date_Get
arg	9:36	9:53	5	&p_sys->end_date
op	9:36	0:0	6	&
water	9:37	0:0	6	p_sys
op	9:42	0:0	6	->
water	9:44	0:0	6	end_date
stmts	10:4	12:4	3	
water	10:4	0:0	4	{
call	11:8	11:51	4	date_Set
arg	11:18	11:34	5	&p_sys->end_date
op	11:18	0:0	6	&
water	11:19	0:0	6	p_sys
op	11:24	0:0	6	->
water	11:26	0:0	6	end_date
arg	11:36	11:51	5	p_block->i_pts
water	11:36	0:0	6	p_block
op	11:43	0:0	6	->
water	11:45	0:0	6	i_pts
water	11:52	0:0	4	;
water	12:4	0:0	4	}
if	13:4	18:4	2	(!date_Get (& p_sys -> end_date ))
cond	13:8	13:36	3	!date_Get (& p_sys -> end_date )
op	13:8	0:0	4	!
call	13:9	13:36	4	date_Get
arg	13:19	13:36	5	&p_sys->end_date
op	13:19	0:0	6	&
water	13:20	0:0	6	p_sys
op	13:25	0:0	6	->
water	13:27	0:0	6	end_date
stmts	14:4	18:4	3	
water	14:4	0:0	4	{
if	16:8	16:46	4	(p_block)
cond	16:12	16:12	5	p_block
water	16:12	0:0	6	p_block
stmts	16:22	16:46	5	
call	16:22	16:45	6	block_Release
arg	16:37	16:45	7	p_block
water	16:37	0:0	8	p_block
water	16:46	0:0	6	;
return	17:8	17:19	4	NULL
water	17:15	0:0	5	NULL
water	18:4	0:0	4	}
op	19:4	0:0	2	*
water	19:5	0:0	2	pp_block
op	19:14	0:0	2	=
water	19:16	0:0	2	NULL
water	19:20	0:0	2	;
if	20:4	83:4	2	(p_sys -> b_packetizer)
cond	20:8	20:15	3	p_sys -> b_packetizer
water	20:8	0:0	4	p_sys
op	20:13	0:0	4	->
water	20:15	0:0	4	b_packetizer
stmts	21:4	83:4	3	
water	21:4	0:0	4	{
if	22:8	78:8	4	(p_sys -> p_header -> frames_per_packet > 1)
cond	22:13	22:50	5	p_sys -> p_header -> frames_per_packet > 1
water	22:13	0:0	6	p_sys
op	22:18	0:0	6	->
water	22:20	0:0	6	p_header
op	22:28	0:0	6	->
water	22:30	0:0	6	frames_per_packet
op	22:48	0:0	6	>
water	22:50	0:0	6	1
stmts	23:8	78:8	5	
water	23:8	0:0	6	{
decl	24:12	24:40	6	short	*p_frame_holder
op	24:34	0:0	6	=
water	24:36	0:0	6	NULL
decl	25:12	26:64	6	int	i_bits_before
op	25:30	0:0	6	=
water	25:32	0:0	6	0
water	25:33	0:0	6	,
decl	25:12	26:64	6	int	i_bits_after
op	25:48	0:0	6	=
water	25:50	0:0	6	0
water	25:51	0:0	6	,
decl	25:12	26:64	6	int	i_bytes_in_speex_frame
op	25:76	0:0	6	=
water	25:78	0:0	6	0
water	25:79	0:0	6	,
decl	25:12	26:64	6	int	i_pcm_output_size
op	26:34	0:0	6	=
water	26:36	0:0	6	0
water	26:37	0:0	6	,
decl	25:12	26:64	6	int	i_bits_in_speex_frame
op	26:61	0:0	6	=
water	26:63	0:0	6	0
decl	27:12	27:39	6	block_t	*p_new_block
op	27:33	0:0	6	=
water	27:35	0:0	6	NULL
water	28:12	0:0	6	i_pcm_output_size
op	28:30	0:0	6	=
water	28:32	0:0	6	p_sys
op	28:37	0:0	6	->
water	28:39	0:0	6	p_header
op	28:47	0:0	6	->
water	28:49	0:0	6	frame_size
water	28:59	0:0	6	;
water	29:12	0:0	6	p_frame_holder
op	29:27	0:0	6	=
water	29:29	0:0	6	(
water	29:30	0:0	6	short
op	29:35	0:0	6	*
water	29:36	0:0	6	)
call	29:37	29:78	6	xmalloc
arg	29:46	29:78	7	sizeof(short)*i_pcm_output_size
op	29:46	0:0	8	sizeof
water	29:52	0:0	8	(
water	29:53	0:0	8	short
water	29:58	0:0	8	)
op	29:59	0:0	8	*
water	29:60	0:0	8	i_pcm_output_size
water	29:79	0:0	6	;
call	30:12	31:34	6	speex_bits_read_from
arg	30:34	30:46	7	&p_sys->bits
op	30:34	0:0	8	&
water	30:35	0:0	8	p_sys
op	30:40	0:0	8	->
water	30:42	0:0	8	bits
arg	30:48	30:74	7	(char*)p_oggpacket->packet
water	30:48	0:0	8	(
water	30:49	0:0	8	char
op	30:53	0:0	8	*
water	30:54	0:0	8	)
water	30:55	0:0	8	p_oggpacket
op	30:66	0:0	8	->
water	30:68	0:0	8	packet
arg	31:16	31:34	7	p_oggpacket->bytes
water	31:16	0:0	8	p_oggpacket
op	31:27	0:0	8	->
water	31:29	0:0	8	bytes
water	31:35	0:0	6	;
water	32:12	0:0	6	i_bits_before
op	32:26	0:0	6	=
call	32:28	32:63	6	speex_bits_remaining
arg	32:50	32:63	7	&p_sys->bits
op	32:50	0:0	8	&
water	32:51	0:0	8	p_sys
op	32:56	0:0	8	->
water	32:58	0:0	8	bits
water	32:64	0:0	6	;
call	33:12	33:73	6	speex_decode_int
arg	33:29	33:43	7	p_sys->p_state
water	33:29	0:0	8	p_sys
op	33:34	0:0	8	->
water	33:36	0:0	8	p_state
arg	33:45	33:57	7	&p_sys->bits
op	33:45	0:0	8	&
water	33:46	0:0	8	p_sys
op	33:51	0:0	8	->
water	33:53	0:0	8	bits
arg	33:59	33:73	7	p_frame_holder
water	33:59	0:0	8	p_frame_holder
water	33:74	0:0	6	;
water	34:12	0:0	6	i_bits_after
op	34:25	0:0	6	=
call	34:27	34:62	6	speex_bits_remaining
arg	34:49	34:62	7	&p_sys->bits
op	34:49	0:0	8	&
water	34:50	0:0	8	p_sys
op	34:55	0:0	8	->
water	34:57	0:0	8	bits
water	34:63	0:0	6	;
water	35:12	0:0	6	i_bits_in_speex_frame
op	35:34	0:0	6	=
water	35:36	0:0	6	i_bits_before
op	35:50	0:0	6	-
water	35:52	0:0	6	i_bits_after
water	35:64	0:0	6	;
water	36:12	0:0	6	i_bytes_in_speex_frame
op	36:35	0:0	6	=
water	36:37	0:0	6	(
water	36:39	0:0	6	i_bits_in_speex_frame
op	36:61	0:0	6	+
water	37:16	0:0	6	(
water	37:17	0:0	6	8
op	37:19	0:0	6	-
water	37:21	0:0	6	(
water	37:22	0:0	6	i_bits_in_speex_frame
op	37:44	0:0	6	%
water	37:46	0:0	6	8
water	37:47	0:0	6	)
water	37:48	0:0	6	)
water	37:50	0:0	6	)
op	38:16	0:0	6	/
water	38:18	0:0	6	8
water	38:19	0:0	6	;
water	39:12	0:0	6	p_new_block
op	39:24	0:0	6	=
call	39:26	39:62	6	block_Alloc
arg	39:39	39:62	7	i_bytes_in_speex_frame
water	39:39	0:0	8	i_bytes_in_speex_frame
water	39:63	0:0	6	;
call	40:12	40:72	6	memset
arg	40:20	40:41	7	p_new_block->p_buffer
water	40:20	0:0	8	p_new_block
op	40:31	0:0	8	->
water	40:33	0:0	8	p_buffer
arg	40:43	40:47	7	0xff
water	40:43	0:0	8	0
water	40:44	0:0	8	xff
arg	40:49	40:72	7	i_bytes_in_speex_frame
water	40:49	0:0	8	i_bytes_in_speex_frame
water	40:73	0:0	6	;
call	44:12	44:44	6	speex_bits_rewind
arg	44:31	44:44	7	&p_sys->bits
op	44:31	0:0	8	&
water	44:32	0:0	8	p_sys
op	44:37	0:0	8	->
water	44:39	0:0	8	bits
water	44:45	0:0	6	;
call	45:12	47:44	6	speex_bits_write
arg	45:30	45:42	7	&p_sys->bits
op	45:30	0:0	8	&
water	45:31	0:0	8	p_sys
op	45:36	0:0	8	->
water	45:38	0:0	8	bits
arg	46:16	46:44	7	(char*)p_new_block->p_buffer
water	46:16	0:0	8	(
water	46:17	0:0	8	char
op	46:21	0:0	8	*
water	46:22	0:0	8	)
water	46:23	0:0	8	p_new_block
op	46:34	0:0	8	->
water	46:36	0:0	8	p_buffer
arg	47:16	47:44	7	(int)i_bytes_in_speex_frame
water	47:16	0:0	8	(
water	47:17	0:0	8	int
water	47:20	0:0	8	)
water	47:21	0:0	8	i_bytes_in_speex_frame
water	47:45	0:0	6	;
if	58:12	71:12	6	(i_bits_after > 7)
cond	58:17	58:32	7	i_bits_after > 7
water	58:17	0:0	8	i_bits_after
op	58:30	0:0	8	>
water	58:32	0:0	8	7
stmts	59:12	71:12	7	
water	59:12	0:0	8	{
water	63:16	0:0	8	i_bytes_in_speex_frame
op	63:38	0:0	8	--
water	63:40	0:0	8	;
call	64:16	66:63	8	speex_bits_write
arg	64:34	64:46	9	&p_sys->bits
op	64:34	0:0	10	&
water	64:35	0:0	10	p_sys
op	64:40	0:0	10	->
water	64:42	0:0	10	bits
arg	65:20	65:44	9	(char*)p_block->p_buffer
water	65:20	0:0	10	(
water	65:21	0:0	10	char
op	65:25	0:0	10	*
water	65:26	0:0	10	)
water	65:27	0:0	10	p_block
op	65:34	0:0	10	->
water	65:36	0:0	10	p_buffer
arg	66:20	66:63	9	p_block->i_buffer-i_bytes_in_speex_frame
water	66:20	0:0	10	p_block
op	66:27	0:0	10	->
water	66:29	0:0	10	i_buffer
op	66:38	0:0	10	-
water	66:40	0:0	10	i_bytes_in_speex_frame
water	66:64	0:0	8	;
water	67:16	0:0	8	p_block
op	67:24	0:0	8	=
call	67:26	69:61	8	block_Realloc
arg	67:41	67:48	9	p_block
water	67:41	0:0	10	p_block
arg	68:20	68:21	9	0
water	68:20	0:0	10	0
arg	69:20	69:61	9	p_block->i_buffer-i_bytes_in_speex_frame
water	69:20	0:0	10	p_block
op	69:27	0:0	10	->
water	69:29	0:0	10	i_buffer
op	69:37	0:0	10	-
water	69:38	0:0	10	i_bytes_in_speex_frame
water	69:62	0:0	8	;
op	70:16	0:0	8	*
water	70:17	0:0	8	pp_block
op	70:26	0:0	8	=
water	70:28	0:0	8	p_block
water	70:35	0:0	8	;
water	71:12	0:0	8	}
else	72:12	75:12	6
stmts	73:12	75:12	7	
water	73:12	0:0	8	{
call	74:16	74:47	8	speex_bits_reset
arg	74:34	74:47	9	&p_sys->bits
op	74:34	0:0	10	&
water	74:35	0:0	10	p_sys
op	74:40	0:0	10	->
water	74:42	0:0	10	bits
water	74:48	0:0	8	;
water	75:12	0:0	8	}
call	76:12	76:33	6	free
arg	76:18	76:33	7	p_frame_holder
water	76:18	0:0	8	p_frame_holder
water	76:34	0:0	6	;
return	77:12	77:50	6	SendPacket(p_dec,p_new_block)
call	77:19	77:49	7	SendPacket
arg	77:31	77:36	8	p_dec
water	77:31	0:0	9	p_dec
arg	77:38	77:49	8	p_new_block
water	77:38	0:0	9	p_new_block
water	78:8	0:0	6	}
else	79:8	82:8	4
stmts	80:8	82:8	5	
water	80:8	0:0	6	{
return	81:16	81:51	6	SendPacket(p_dec,p_block)
call	81:23	81:50	7	SendPacket
arg	81:35	81:40	8	p_dec
water	81:35	0:0	9	p_dec
arg	81:42	81:50	8	p_block
water	81:42	0:0	9	p_block
water	82:8	0:0	6	}
water	83:4	0:0	4	}
else	84:4	90:4	2
stmts	85:4	90:4	3	
water	85:4	0:0	4	{
decl	86:8	86:67	4	block_t	*p_aout_buffer
op	86:31	0:0	4	=
call	86:33	86:66	5	DecodePacket
arg	86:47	86:52	6	p_dec
water	86:47	0:0	7	p_dec
arg	86:54	86:66	6	p_oggpacket
water	86:54	0:0	7	p_oggpacket
if	87:8	88:36	4	(p_block)
cond	87:12	87:12	5	p_block
water	87:12	0:0	6	p_block
stmts	88:12	88:36	5	
call	88:12	88:35	6	block_Release
arg	88:27	88:35	7	p_block
water	88:27	0:0	8	p_block
water	88:36	0:0	6	;
return	89:8	89:28	4	p_aout_buffer
water	89:15	0:0	5	p_aout_buffer
water	90:4	0:0	4	}
