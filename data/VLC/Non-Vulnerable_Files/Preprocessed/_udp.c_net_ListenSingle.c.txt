func	2:0	50:0	0	static int	net_ListenSingle
params	2:28	0:0	1	
param	2:29	2:46	2	vlc_object_t *	obj
param	2:48	2:64	2	const char *	host
param	2:66	2:74	2	int	port
param	3:29	3:41	2	int	protocol
stmnts	0:0	49:14	1	
decl	5:4	9:11	2	struct addrinfo	hints
op	5:26	0:0	2	=
water	5:28	0:0	2	{
op	6:8	0:0	2	.
water	6:9	0:0	2	ai_socktype
op	6:21	0:0	2	=
water	6:23	0:0	2	SOCK_DGRAM
water	6:33	0:0	2	,
op	7:8	0:0	2	.
water	7:9	0:0	2	ai_protocol
op	7:21	0:0	2	=
water	7:23	0:0	2	protocol
water	7:31	0:0	2	,
op	8:8	0:0	2	.
water	8:9	0:0	2	ai_flags
op	8:18	0:0	2	=
water	8:20	0:0	2	AI_PASSIVE
op	8:31	0:0	2	|
water	8:33	0:0	2	AI_NUMERICSERV
op	8:48	0:0	2	|
water	8:50	0:0	2	AI_IDN
water	8:56	0:0	2	,
water	9:4	0:0	2	}
water	9:5	0:0	2	,
decl	5:4	9:11	2	struct addrinfo	*res
if	10:4	11:19	2	(host && ! * host)
cond	10:8	10:18	3	host && ! * host
water	10:8	0:0	4	host
op	10:13	0:0	4	&&
op	10:16	0:0	4	!
op	10:17	0:0	4	*
water	10:18	0:0	4	host
stmts	11:8	11:19	3	
water	11:8	0:0	4	host
op	11:13	0:0	4	=
water	11:15	0:0	4	NULL
water	11:19	0:0	4	;
call	12:4	13:38	2	msg_Dbg
arg	12:13	12:16	3	obj
water	12:13	0:0	4	obj
arg	12:18	12:52	3	"net: opening %s datagram port %d"
water	12:18	0:0	4	"net: opening %s datagram port %d"
arg	13:13	13:32	3	host?host:"any"
water	13:13	0:0	4	host
water	13:18	0:0	4	?
water	13:20	0:0	4	host
water	13:25	0:0	4	:
water	13:27	0:0	4	"any"
arg	13:34	13:38	3	port
water	13:34	0:0	4	port
water	13:39	0:0	2	;
decl	14:4	14:56	2	int	val
op	14:12	0:0	2	=
call	14:14	14:55	3	vlc_getaddrinfo
arg	14:31	14:35	4	host
water	14:31	0:0	5	host
arg	14:37	14:41	4	port
water	14:37	0:0	5	port
arg	14:43	14:49	4	&hints
op	14:43	0:0	5	&
water	14:44	0:0	5	hints
arg	14:51	14:55	4	&res
op	14:51	0:0	5	&
water	14:52	0:0	5	res
if	15:4	20:4	2	(val)
cond	15:8	15:8	3	val
water	15:8	0:0	4	val
stmts	16:4	20:4	3	
water	16:4	0:0	4	{
call	17:8	18:35	4	msg_Err
arg	17:17	17:20	5	obj
water	17:17	0:0	6	obj
arg	17:22	17:54	5	"Cannot resolve %s port %d : %s"
water	17:22	0:0	6	"Cannot resolve %s port %d : %s"
arg	17:56	17:60	5	host
water	17:56	0:0	6	host
arg	17:62	17:66	5	port
water	17:62	0:0	6	port
arg	18:17	18:35	5	gai_strerror(val)
call	18:17	18:34	6	gai_strerror
arg	18:31	18:34	7	val
water	18:31	0:0	8	val
water	18:36	0:0	4	;
return	19:8	19:17	4	-1
op	19:15	0:0	5	-
water	19:16	0:0	5	1
water	20:4	0:0	4	}
water	21:4	0:0	2	val
op	21:8	0:0	2	=
op	21:10	0:0	2	-
water	21:11	0:0	2	1
water	21:12	0:0	2	;
for	22:4	47:4	2	( const struct addrinfo * ptr = res ;ptr != NULL;ptr = ptr -> ai_next)
forinit	0:0	22:41	3	 const struct addrinfo * ptr = res ;
decl	22:9	22:41	4	const struct addrinfo	*ptr
op	22:36	0:0	4	=
water	22:38	0:0	4	res
cond	22:43	22:50	3	ptr != NULL
water	22:43	0:0	4	ptr
op	22:47	0:0	4	!=
water	22:50	0:0	4	NULL
forexpr	22:56	22:67	3	ptr = ptr -> ai_next
water	22:56	0:0	4	ptr
op	22:60	0:0	4	=
water	22:62	0:0	4	ptr
op	22:65	0:0	4	->
water	22:67	0:0	4	ai_next
stmts	23:4	47:4	3	
water	23:4	0:0	4	{
decl	24:8	25:46	4	int	fd
op	24:15	0:0	4	=
call	24:17	25:45	5	net_Socket
arg	24:29	24:32	6	obj
water	24:29	0:0	7	obj
arg	24:34	24:48	6	ptr->ai_family
water	24:34	0:0	7	ptr
op	24:37	0:0	7	->
water	24:39	0:0	7	ai_family
arg	24:50	24:66	6	ptr->ai_socktype
water	24:50	0:0	7	ptr
op	24:53	0:0	7	->
water	24:55	0:0	7	ai_socktype
arg	25:29	25:45	6	ptr->ai_protocol
water	25:29	0:0	7	ptr
op	25:32	0:0	7	->
water	25:34	0:0	7	ai_protocol
if	26:8	30:8	4	(fd == - 1)
cond	26:12	26:19	5	fd == - 1
water	26:12	0:0	6	fd
op	26:15	0:0	6	==
op	26:18	0:0	6	-
water	26:19	0:0	6	1
stmts	27:8	30:8	5	
water	27:8	0:0	6	{
call	28:12	28:71	6	msg_Dbg
arg	28:21	28:24	7	obj
water	28:21	0:0	8	obj
arg	28:26	28:44	7	"socket error: %s"
water	28:26	0:0	8	"socket error: %s"
arg	28:46	28:71	7	vlc_strerror_c(net_errno)
call	28:46	28:70	8	vlc_strerror_c
arg	28:61	28:70	9	net_errno
water	28:61	0:0	10	net_errno
water	28:72	0:0	6	;
continue	29:12	29:20	6	
water	30:8	0:0	6	}
if	33:8	34:77	4	(ptr -> ai_family == AF_INET6)
cond	33:12	33:30	5	ptr -> ai_family == AF_INET6
water	33:12	0:0	6	ptr
op	33:15	0:0	6	->
water	33:17	0:0	6	ai_family
op	33:27	0:0	6	==
water	33:30	0:0	6	AF_INET6
stmts	34:12	34:77	5	
call	34:12	34:76	6	setsockopt
arg	34:24	34:26	7	fd
water	34:24	0:0	8	fd
arg	34:28	34:36	7	SOL_IPV6
water	34:28	0:0	8	SOL_IPV6
arg	34:38	34:49	7	IPV6_V6ONLY
water	34:38	0:0	8	IPV6_V6ONLY
arg	34:51	34:62	7	&(int){0}
op	34:51	0:0	8	&
water	34:52	0:0	8	(
water	34:53	0:0	8	int
water	34:56	0:0	8	)
water	34:57	0:0	8	{
water	34:59	0:0	8	0
water	34:61	0:0	8	}
arg	34:64	34:76	7	sizeof(int)
op	34:64	0:0	8	sizeof
water	34:71	0:0	8	(
water	34:72	0:0	8	int
water	34:75	0:0	8	)
water	34:77	0:0	6	;
water	36:8	0:0	4	fd
op	36:11	0:0	4	=
call	36:13	36:48	4	net_SetupDgramSocket
arg	36:35	36:38	5	obj
water	36:35	0:0	6	obj
arg	36:40	36:42	5	fd
water	36:40	0:0	6	fd
arg	36:44	36:48	5	ptr
water	36:44	0:0	6	ptr
water	36:49	0:0	4	;
if	37:8	38:20	4	(fd == - 1)
cond	37:12	37:19	5	fd == - 1
water	37:12	0:0	6	fd
op	37:15	0:0	6	==
op	37:18	0:0	6	-
water	37:19	0:0	6	1
stmts	38:12	38:20	5	
continue	38:12	38:20	6	
if	39:8	44:8	4	(net_SockAddrIsMulticast (ptr -> ai_addr ,ptr -> ai_addrlen ) &&net_Subscribe (obj ,fd ,ptr -> ai_addr ,ptr -> ai_addrlen ))
cond	39:12	40:65	5	net_SockAddrIsMulticast (ptr -> ai_addr ,ptr -> ai_addrlen ) &&net_Subscribe (obj ,fd ,ptr -> ai_addr ,ptr -> ai_addrlen )
call	39:12	39:66	6	net_SockAddrIsMulticast
arg	39:37	39:49	7	ptr->ai_addr
water	39:37	0:0	8	ptr
op	39:40	0:0	8	->
water	39:42	0:0	8	ai_addr
arg	39:51	39:66	7	ptr->ai_addrlen
water	39:51	0:0	8	ptr
op	39:54	0:0	8	->
water	39:56	0:0	8	ai_addrlen
op	40:9	0:0	6	&&
call	40:12	40:65	6	net_Subscribe
arg	40:27	40:30	7	obj
water	40:27	0:0	8	obj
arg	40:32	40:34	7	fd
water	40:32	0:0	8	fd
arg	40:36	40:48	7	ptr->ai_addr
water	40:36	0:0	8	ptr
op	40:39	0:0	8	->
water	40:41	0:0	8	ai_addr
arg	40:50	40:65	7	ptr->ai_addrlen
water	40:50	0:0	8	ptr
op	40:53	0:0	8	->
water	40:55	0:0	8	ai_addrlen
stmts	41:8	44:8	5	
water	41:8	0:0	6	{
call	42:12	42:25	6	net_Close
arg	42:23	42:25	7	fd
water	42:23	0:0	8	fd
water	42:26	0:0	6	;
continue	43:12	43:20	6	
water	44:8	0:0	6	}
water	45:8	0:0	4	val
op	45:12	0:0	4	=
water	45:14	0:0	4	fd
water	45:16	0:0	4	;
break	46:8	46:13	4	
water	47:4	0:0	4	}
call	48:4	48:21	2	freeaddrinfo
arg	48:18	48:21	3	res
water	48:18	0:0	4	res
water	48:22	0:0	2	;
return	49:4	49:14	2	val
water	49:11	0:0	3	val
