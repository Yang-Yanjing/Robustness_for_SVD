func	2:0	22:0	0	void	RegisterCommand
params	2:20	0:0	1	
param	2:22	2:41	2	filter_t *	p_filter
stmnts	0:0	21:79	1	
decl	4:4	4:57	2	filter_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	(
water	4:27	0:0	2	filter_sys_t
op	4:39	0:0	2	*
water	4:40	0:0	2	)
water	4:42	0:0	2	p_filter
op	4:50	0:0	2	->
water	4:52	0:0	2	p_sys
decl	5:4	5:22	2	size_t	i_index
op	5:19	0:0	2	=
water	5:21	0:0	2	0
water	6:4	0:0	2	p_sys
op	6:9	0:0	2	->
water	6:11	0:0	2	i_commands
op	6:22	0:0	2	=
call	6:24	6:45	2	ARRAY_SIZE
arg	6:35	6:45	3	p_commands
water	6:35	0:0	4	p_commands
water	6:46	0:0	2	;
water	7:4	0:0	2	p_sys
op	7:9	0:0	2	->
water	7:11	0:0	2	pp_commands
op	7:23	0:0	2	=
water	7:25	0:0	2	(
water	7:26	0:0	2	commanddesc_t
op	7:40	0:0	2	*
op	7:41	0:0	2	*
water	7:42	0:0	2	)
call	7:44	7:94	2	calloc
arg	7:52	7:69	3	p_sys->i_commands
water	7:52	0:0	4	p_sys
op	7:57	0:0	4	->
water	7:59	0:0	4	i_commands
arg	7:71	7:94	3	sizeof(commanddesc_t*)
op	7:71	0:0	4	sizeof
water	7:77	0:0	4	(
water	7:78	0:0	4	commanddesc_t
op	7:91	0:0	4	*
water	7:92	0:0	4	)
water	7:95	0:0	2	;
if	8:4	8:36	2	(! p_sys -> pp_commands)
cond	8:8	8:16	3	! p_sys -> pp_commands
op	8:8	0:0	4	!
water	8:9	0:0	4	p_sys
op	8:14	0:0	4	->
water	8:16	0:0	4	pp_commands
stmts	8:30	8:36	3	
return	8:30	8:36	4	
for	9:4	18:4	2	(i_index = 0 ;i_index < p_sys -> i_commands;i_index ++)
forinit	9:9	9:20	3	i_index = 0 ;
water	9:9	0:0	4	i_index
op	9:17	0:0	4	=
water	9:19	0:0	4	0
water	9:20	0:0	4	;
cond	9:22	9:39	3	i_index < p_sys -> i_commands
water	9:22	0:0	4	i_index
op	9:30	0:0	4	<
water	9:32	0:0	4	p_sys
op	9:37	0:0	4	->
water	9:39	0:0	4	i_commands
forexpr	9:51	9:59	3	i_index ++
water	9:51	0:0	4	i_index
op	9:59	0:0	4	++
stmts	10:4	18:4	3	
water	10:4	0:0	4	{
water	11:8	0:0	4	p_sys
op	11:13	0:0	4	->
water	11:15	0:0	4	pp_commands
op	11:26	0:0	4	[
water	11:27	0:0	4	i_index
op	11:34	0:0	4	]
op	11:36	0:0	4	=
water	11:38	0:0	4	(
water	11:39	0:0	4	commanddesc_t
op	11:53	0:0	4	*
water	11:54	0:0	4	)
call	11:56	11:86	4	malloc
arg	11:64	11:86	5	sizeof(commanddesc_t)
op	11:64	0:0	6	sizeof
water	11:70	0:0	6	(
water	11:71	0:0	6	commanddesc_t
water	11:84	0:0	6	)
water	11:87	0:0	4	;
if	12:8	12:49	4	(! p_sys -> pp_commands [ i_index ])
cond	12:12	12:39	5	! p_sys -> pp_commands [ i_index ]
op	12:12	0:0	6	!
water	12:13	0:0	6	p_sys
op	12:18	0:0	6	->
water	12:20	0:0	6	pp_commands
op	12:31	0:0	6	[
water	12:32	0:0	6	i_index
op	12:39	0:0	6	]
stmts	12:43	12:49	5	
return	12:43	12:49	6	
water	13:8	0:0	4	p_sys
op	13:13	0:0	4	->
water	13:15	0:0	4	pp_commands
op	13:26	0:0	4	[
water	13:27	0:0	4	i_index
op	13:34	0:0	4	]
op	13:35	0:0	4	->
water	13:37	0:0	4	psz_command
op	13:49	0:0	4	=
call	13:51	13:91	4	strdup
arg	13:59	13:91	5	p_commands[i_index].psz_command
water	13:59	0:0	6	p_commands
op	13:69	0:0	6	[
water	13:70	0:0	6	i_index
op	13:77	0:0	6	]
op	13:78	0:0	6	.
water	13:79	0:0	6	psz_command
water	13:92	0:0	4	;
water	14:8	0:0	4	p_sys
op	14:13	0:0	4	->
water	14:15	0:0	4	pp_commands
op	14:26	0:0	4	[
water	14:27	0:0	4	i_index
op	14:34	0:0	4	]
op	14:35	0:0	4	->
water	14:37	0:0	4	b_atomic
op	14:46	0:0	4	=
water	14:48	0:0	4	p_commands
op	14:58	0:0	4	[
water	14:59	0:0	4	i_index
op	14:66	0:0	4	]
op	14:67	0:0	4	.
water	14:68	0:0	4	b_atomic
water	14:76	0:0	4	;
water	15:8	0:0	4	p_sys
op	15:13	0:0	4	->
water	15:15	0:0	4	pp_commands
op	15:26	0:0	4	[
water	15:27	0:0	4	i_index
op	15:34	0:0	4	]
op	15:35	0:0	4	->
water	15:37	0:0	4	pf_parser
op	15:47	0:0	4	=
water	15:49	0:0	4	p_commands
op	15:59	0:0	4	[
water	15:60	0:0	4	i_index
op	15:67	0:0	4	]
op	15:68	0:0	4	.
water	15:69	0:0	4	pf_parser
water	15:78	0:0	4	;
water	16:8	0:0	4	p_sys
op	16:13	0:0	4	->
water	16:15	0:0	4	pp_commands
op	16:26	0:0	4	[
water	16:27	0:0	4	i_index
op	16:34	0:0	4	]
op	16:35	0:0	4	->
water	16:37	0:0	4	pf_execute
op	16:48	0:0	4	=
water	16:50	0:0	4	p_commands
op	16:60	0:0	4	[
water	16:61	0:0	4	i_index
op	16:68	0:0	4	]
op	16:69	0:0	4	.
water	16:70	0:0	4	pf_execute
water	16:80	0:0	4	;
water	17:8	0:0	4	p_sys
op	17:13	0:0	4	->
water	17:15	0:0	4	pp_commands
op	17:26	0:0	4	[
water	17:27	0:0	4	i_index
op	17:34	0:0	4	]
op	17:35	0:0	4	->
water	17:37	0:0	4	pf_unparse
op	17:48	0:0	4	=
water	17:50	0:0	4	p_commands
op	17:60	0:0	4	[
water	17:61	0:0	4	i_index
op	17:68	0:0	4	]
op	17:69	0:0	4	.
water	17:70	0:0	4	pf_unparse
water	17:80	0:0	4	;
water	18:4	0:0	4	}
call	19:4	19:71	2	msg_Dbg
arg	19:13	19:21	3	p_filter
water	19:13	0:0	4	p_filter
arg	19:23	19:51	3	"%zu commands are available"
water	19:23	0:0	4	"%zu commands are available"
arg	19:53	19:71	3	p_sys->i_commands
water	19:53	0:0	4	p_sys
op	19:58	0:0	4	->
water	19:60	0:0	4	i_commands
water	19:72	0:0	2	;
for	20:4	21:79	2	( size_t i_index = 0 ;i_index < p_sys -> i_commands;i_index ++)
forinit	0:0	20:27	3	 size_t i_index = 0 ;
decl	20:9	20:27	4	size_t	i_index
op	20:24	0:0	4	=
water	20:26	0:0	4	0
cond	20:29	20:46	3	i_index < p_sys -> i_commands
water	20:29	0:0	4	i_index
op	20:37	0:0	4	<
water	20:39	0:0	4	p_sys
op	20:44	0:0	4	->
water	20:46	0:0	4	i_commands
forexpr	20:58	20:65	3	i_index ++
water	20:58	0:0	4	i_index
op	20:65	0:0	4	++
stmts	21:8	21:79	3	
call	21:8	21:78	4	msg_Dbg
arg	21:17	21:25	5	p_filter
water	21:17	0:0	6	p_filter
arg	21:27	21:35	5	"    %s"
water	21:27	0:0	6	"    %s"
arg	21:37	21:78	5	p_sys->pp_commands[i_index]->psz_command
water	21:37	0:0	6	p_sys
op	21:42	0:0	6	->
water	21:44	0:0	6	pp_commands
op	21:55	0:0	6	[
water	21:56	0:0	6	i_index
op	21:63	0:0	6	]
op	21:64	0:0	6	->
water	21:66	0:0	6	psz_command
water	21:79	0:0	4	;
