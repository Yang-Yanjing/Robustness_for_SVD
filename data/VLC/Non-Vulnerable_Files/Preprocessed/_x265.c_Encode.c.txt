func	2:0	59:0	0	static block_t *	Encode
params	2:22	0:0	1	
param	2:23	2:39	2	encoder_t *	p_enc
param	2:41	2:58	2	picture_t *	p_pict
stmnts	0:0	58:18	1	
decl	4:4	4:39	2	encoder_sys_t	*p_sys
op	4:25	0:0	2	=
water	4:27	0:0	2	p_enc
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:20	2	x265_picture	pic
call	6:4	6:41	2	x265_picture_init
arg	6:22	6:35	3	&p_sys->param
op	6:22	0:0	4	&
water	6:23	0:0	4	p_sys
op	6:28	0:0	4	->
water	6:30	0:0	4	param
arg	6:37	6:41	3	&pic
op	6:37	0:0	4	&
water	6:38	0:0	4	pic
water	6:42	0:0	2	;
if	7:4	19:4	2	(likely (p_pict ))
cond	7:8	7:21	3	likely (p_pict )
call	7:8	7:21	4	likely
arg	7:15	7:21	5	p_pict
water	7:15	0:0	6	p_pict
stmts	7:24	19:4	3	
water	7:24	0:0	4	{
water	8:8	0:0	4	pic
op	8:11	0:0	4	.
water	8:12	0:0	4	pts
op	8:16	0:0	4	=
water	8:18	0:0	4	p_pict
op	8:24	0:0	4	->
water	8:26	0:0	4	date
water	8:30	0:0	4	;
if	9:8	14:8	4	(unlikely (p_sys -> initial_date == 0 ))
cond	9:12	9:45	5	unlikely (p_sys -> initial_date == 0 )
call	9:12	9:45	6	unlikely
arg	9:21	9:45	7	p_sys->initial_date==0
water	9:21	0:0	8	p_sys
op	9:26	0:0	8	->
water	9:28	0:0	8	initial_date
op	9:41	0:0	8	==
water	9:44	0:0	8	0
stmts	9:48	14:8	5	
water	9:48	0:0	6	{
water	10:12	0:0	6	p_sys
op	10:17	0:0	6	->
water	10:19	0:0	6	initial_date
op	10:32	0:0	6	=
water	10:34	0:0	6	p_pict
op	10:40	0:0	6	->
water	10:42	0:0	6	date
water	10:46	0:0	6	;
water	12:12	0:0	6	p_sys
op	12:17	0:0	6	->
water	12:19	0:0	6	start
op	12:25	0:0	6	=
call	12:27	12:33	6	mdate
water	12:34	0:0	6	;
water	14:8	0:0	6	}
for	15:8	18:8	4	( int i = 0 ;i < p_pict -> i_planes;i ++)
forinit	0:0	15:22	5	 int i = 0 ;
decl	15:13	15:22	6	int	i
op	15:19	0:0	6	=
water	15:21	0:0	6	0
cond	15:24	15:36	5	i < p_pict -> i_planes
water	15:24	0:0	6	i
op	15:26	0:0	6	<
water	15:28	0:0	6	p_pict
op	15:34	0:0	6	->
water	15:36	0:0	6	i_planes
forexpr	15:46	15:47	5	i ++
water	15:46	0:0	6	i
op	15:47	0:0	6	++
stmts	15:51	18:8	5	
water	15:51	0:0	6	{
water	16:12	0:0	6	pic
op	16:15	0:0	6	.
water	16:16	0:0	6	planes
op	16:22	0:0	6	[
water	16:23	0:0	6	i
op	16:24	0:0	6	]
op	16:26	0:0	6	=
water	16:28	0:0	6	p_pict
op	16:34	0:0	6	->
water	16:36	0:0	6	p
op	16:37	0:0	6	[
water	16:38	0:0	6	i
op	16:39	0:0	6	]
op	16:40	0:0	6	.
water	16:41	0:0	6	p_pixels
water	16:49	0:0	6	;
water	17:12	0:0	6	pic
op	17:15	0:0	6	.
water	17:16	0:0	6	stride
op	17:22	0:0	6	[
water	17:23	0:0	6	i
op	17:24	0:0	6	]
op	17:26	0:0	6	=
water	17:28	0:0	6	p_pict
op	17:34	0:0	6	->
water	17:36	0:0	6	p
op	17:37	0:0	6	[
water	17:38	0:0	6	i
op	17:39	0:0	6	]
op	17:40	0:0	6	.
water	17:41	0:0	6	i_pitch
water	17:48	0:0	6	;
water	18:8	0:0	6	}
water	19:4	0:0	4	}
decl	20:4	20:17	2	x265_nal	*nal
decl	21:4	21:22	2	uint32_t	i_nal
op	21:19	0:0	2	=
water	21:21	0:0	2	0
call	22:4	23:46	2	x265_encoder_encode
arg	22:24	22:32	3	p_sys->h
water	22:24	0:0	4	p_sys
op	22:29	0:0	4	->
water	22:31	0:0	4	h
arg	22:34	22:38	3	&nal
op	22:34	0:0	4	&
water	22:35	0:0	4	nal
arg	22:40	22:46	3	&i_nal
op	22:40	0:0	4	&
water	22:41	0:0	4	i_nal
arg	23:12	23:40	3	likely(p_pict)?&pic:NULL
call	23:12	23:25	4	likely
arg	23:19	23:25	5	p_pict
water	23:19	0:0	6	p_pict
water	23:27	0:0	4	?
op	23:29	0:0	4	&
water	23:30	0:0	4	pic
water	23:34	0:0	4	:
water	23:36	0:0	4	NULL
arg	23:42	23:46	3	&pic
op	23:42	0:0	4	&
water	23:43	0:0	4	pic
water	23:47	0:0	2	;
if	24:4	25:19	2	(! i_nal)
cond	24:8	24:9	3	! i_nal
op	24:8	0:0	4	!
water	24:9	0:0	4	i_nal
stmts	25:8	25:19	3	
return	25:8	25:19	4	NULL
water	25:15	0:0	5	NULL
decl	26:4	26:17	2	int	i_out
op	26:14	0:0	2	=
water	26:16	0:0	2	0
for	27:4	28:33	2	( uint32_t i = 0 ;i < i_nal;i ++)
forinit	0:0	27:23	3	 uint32_t i = 0 ;
decl	27:9	27:23	4	uint32_t	i
op	27:20	0:0	4	=
water	27:22	0:0	4	0
cond	27:25	27:29	3	i < i_nal
water	27:25	0:0	4	i
op	27:27	0:0	4	<
water	27:29	0:0	4	i_nal
forexpr	27:36	27:37	3	i ++
water	27:36	0:0	4	i
op	27:37	0:0	4	++
stmts	28:8	28:33	3	
water	28:8	0:0	4	i_out
op	28:14	0:0	4	+=
water	28:17	0:0	4	nal
op	28:20	0:0	4	[
water	28:21	0:0	4	i
op	28:22	0:0	4	]
op	28:23	0:0	4	.
water	28:24	0:0	4	sizeBytes
water	28:33	0:0	4	;
decl	29:4	29:41	2	block_t	*p_block
op	29:21	0:0	2	=
call	29:23	29:40	3	block_Alloc
arg	29:35	29:40	4	i_out
water	29:35	0:0	5	i_out
if	30:4	31:19	2	(! p_block)
cond	30:8	30:9	3	! p_block
op	30:8	0:0	4	!
water	30:9	0:0	4	p_block
stmts	31:8	31:19	3	
return	31:8	31:19	4	NULL
water	31:15	0:0	5	NULL
call	33:4	33:51	2	memcpy
arg	33:11	33:28	3	p_block->p_buffer
water	33:11	0:0	4	p_block
op	33:18	0:0	4	->
water	33:20	0:0	4	p_buffer
arg	33:30	33:44	3	nal[0].payload
water	33:30	0:0	4	nal
op	33:33	0:0	4	[
water	33:34	0:0	4	0
op	33:35	0:0	4	]
op	33:36	0:0	4	.
water	33:37	0:0	4	payload
arg	33:46	33:51	3	i_out
water	33:46	0:0	4	i_out
water	33:52	0:0	2	;
water	35:4	0:0	2	p_block
op	35:11	0:0	2	->
water	35:13	0:0	2	i_length
op	35:22	0:0	2	=
water	35:24	0:0	2	CLOCK_FREQ
op	35:35	0:0	2	*
water	36:8	0:0	2	p_enc
op	36:13	0:0	2	->
water	36:15	0:0	2	fmt_in
op	36:21	0:0	2	.
water	36:22	0:0	2	video
op	36:27	0:0	2	.
water	36:28	0:0	2	i_frame_rate_base
op	36:46	0:0	2	/
water	37:12	0:0	2	p_enc
op	37:17	0:0	2	->
water	37:19	0:0	2	fmt_in
op	37:25	0:0	2	.
water	37:26	0:0	2	video
op	37:31	0:0	2	.
water	37:32	0:0	2	i_frame_rate
water	37:44	0:0	2	;
water	38:4	0:0	2	p_block
op	38:11	0:0	2	->
water	38:13	0:0	2	i_pts
op	38:19	0:0	2	=
water	38:21	0:0	2	p_sys
op	38:26	0:0	2	->
water	38:28	0:0	2	initial_date
op	38:41	0:0	2	+
water	38:43	0:0	2	pic
op	38:46	0:0	2	.
water	38:47	0:0	2	poc
op	38:51	0:0	2	*
water	38:53	0:0	2	p_block
op	38:60	0:0	2	->
water	38:62	0:0	2	i_length
water	38:70	0:0	2	;
water	39:4	0:0	2	p_block
op	39:11	0:0	2	->
water	39:13	0:0	2	i_dts
op	39:19	0:0	2	=
water	39:21	0:0	2	p_sys
op	39:26	0:0	2	->
water	39:28	0:0	2	initial_date
op	39:41	0:0	2	+
water	39:43	0:0	2	p_sys
op	39:48	0:0	2	->
water	39:50	0:0	2	dts
op	39:53	0:0	2	++
op	39:56	0:0	2	*
water	39:58	0:0	2	p_block
op	39:65	0:0	2	->
water	39:67	0:0	2	i_length
water	39:75	0:0	2	;
switch	40:4	53:4	2	(pic . sliceType)
cond	40:12	40:16	3	pic . sliceType
water	40:12	0:0	4	pic
op	40:15	0:0	4	.
water	40:16	0:0	4	sliceType
stmts	41:4	53:4	3	
water	41:4	0:0	4	{
label	42:4	42:20	4	case X265_TYPE_I :
label	43:4	43:22	4	case X265_TYPE_IDR :
water	44:8	0:0	4	p_block
op	44:15	0:0	4	->
water	44:17	0:0	4	i_flags
op	44:25	0:0	4	|=
water	44:28	0:0	4	BLOCK_FLAG_TYPE_I
water	44:45	0:0	4	;
break	45:8	45:13	4	
label	46:4	46:20	4	case X265_TYPE_P :
water	47:8	0:0	4	p_block
op	47:15	0:0	4	->
water	47:17	0:0	4	i_flags
op	47:25	0:0	4	|=
water	47:28	0:0	4	BLOCK_FLAG_TYPE_P
water	47:45	0:0	4	;
break	48:8	48:13	4	
label	49:4	49:20	4	case X265_TYPE_B :
label	50:4	50:23	4	case X265_TYPE_BREF :
water	51:8	0:0	4	p_block
op	51:15	0:0	4	->
water	51:17	0:0	4	i_flags
op	51:25	0:0	4	|=
water	51:28	0:0	4	BLOCK_FLAG_TYPE_B
water	51:45	0:0	4	;
break	52:8	52:13	4	
water	53:4	0:0	4	}
call	55:4	56:77	2	msg_Dbg
arg	55:12	55:17	3	p_enc
water	55:12	0:0	4	p_enc
arg	55:19	55:57	3	"%zu bytes (frame %"PRId64", %.2ffps)"
water	55:19	0:0	4	"%zu bytes (frame %"
water	55:39	0:0	4	PRId64
water	55:45	0:0	4	", %.2ffps)"
arg	55:59	55:76	3	p_block->i_buffer
water	55:59	0:0	4	p_block
op	55:66	0:0	4	->
water	55:68	0:0	4	i_buffer
arg	56:8	56:18	3	p_sys->dts
water	56:8	0:0	4	p_sys
op	56:13	0:0	4	->
water	56:15	0:0	4	dts
arg	56:20	56:77	3	(float)p_sys->dts*CLOCK_FREQ/(mdate()-p_sys->start)
water	56:20	0:0	4	(
water	56:21	0:0	4	float
water	56:26	0:0	4	)
water	56:27	0:0	4	p_sys
op	56:32	0:0	4	->
water	56:34	0:0	4	dts
op	56:38	0:0	4	*
water	56:40	0:0	4	CLOCK_FREQ
op	56:51	0:0	4	/
water	56:53	0:0	4	(
call	56:54	56:60	4	mdate
op	56:62	0:0	4	-
water	56:64	0:0	4	p_sys
op	56:69	0:0	4	->
water	56:71	0:0	4	start
water	56:76	0:0	4	)
water	56:78	0:0	2	;
return	58:4	58:18	2	p_block
water	58:11	0:0	3	p_block
