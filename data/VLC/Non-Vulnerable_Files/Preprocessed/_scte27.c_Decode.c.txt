func	2:0	78:0	0	static subpicture_t *	Decode
params	2:27	0:0	1	
param	2:28	2:42	2	decoder_t *	dec
param	2:44	2:59	2	block_t * *	block
stmnts	0:0	77:20	1	
decl	4:4	4:35	2	decoder_sys_t	*sys
op	4:23	0:0	2	=
water	4:25	0:0	2	dec
op	4:28	0:0	2	->
water	4:30	0:0	2	p_sys
if	5:4	6:19	2	(block == NULL || * block == NULL)
cond	5:8	5:35	3	block == NULL || * block == NULL
water	5:8	0:0	4	block
op	5:14	0:0	4	==
water	5:17	0:0	4	NULL
op	5:22	0:0	4	||
op	5:25	0:0	4	*
water	5:26	0:0	4	block
op	5:32	0:0	4	==
water	5:35	0:0	4	NULL
stmts	6:8	6:19	3	
return	6:8	6:19	4	NULL
water	6:15	0:0	5	NULL
decl	7:4	7:23	2	block_t	*b
op	7:15	0:0	2	=
op	7:17	0:0	2	*
water	7:18	0:0	2	block
op	7:25	0:0	2	*
water	7:26	0:0	2	block
op	7:32	0:0	2	=
water	7:34	0:0	2	NULL
water	7:38	0:0	2	;
decl	8:4	8:34	2	subpicture_t	*sub_first
op	8:28	0:0	2	=
water	8:30	0:0	2	NULL
decl	9:4	9:40	2	subpicture_t	**sub_last
op	9:28	0:0	2	=
op	9:30	0:0	2	&
water	9:31	0:0	2	sub_first
if	10:4	11:17	2	(b -> i_flags & ( BLOCK_FLAG_DISCONTINUITY | BLOCK_FLAG_CORRUPTED ))
cond	10:8	10:67	3	b -> i_flags & ( BLOCK_FLAG_DISCONTINUITY | BLOCK_FLAG_CORRUPTED )
water	10:8	0:0	4	b
op	10:9	0:0	4	->
water	10:11	0:0	4	i_flags
op	10:19	0:0	4	&
water	10:21	0:0	4	(
water	10:22	0:0	4	BLOCK_FLAG_DISCONTINUITY
op	10:46	0:0	4	|
water	10:47	0:0	4	BLOCK_FLAG_CORRUPTED
water	10:67	0:0	4	)
stmts	11:8	11:17	3	
goto	11:8	11:17	4	exit
water	11:13	0:0	5	exit
while	12:4	74:4	2	(b -> i_buffer > 3)
cond	12:11	12:25	3	b -> i_buffer > 3
water	12:11	0:0	4	b
op	12:12	0:0	4	->
water	12:14	0:0	4	i_buffer
op	12:23	0:0	4	>
water	12:25	0:0	4	3
stmts	12:28	74:4	3	
water	12:28	0:0	4	{
decl	13:8	13:44	4	const int	table_id
op	13:27	0:0	4	=
water	13:30	0:0	4	b
op	13:31	0:0	4	->
water	13:33	0:0	4	p_buffer
op	13:41	0:0	4	[
water	13:42	0:0	4	0
op	13:43	0:0	4	]
if	14:8	18:8	4	(table_id != 0 xc6)
cond	14:12	14:25	5	table_id != 0 xc6
water	14:12	0:0	6	table_id
op	14:21	0:0	6	!=
water	14:24	0:0	6	0
water	14:25	0:0	6	xc6
stmts	14:30	18:8	5	
water	14:30	0:0	6	{
break	17:12	17:17	6	
water	18:8	0:0	6	}
decl	19:8	19:81	4	const int	section_length
op	19:33	0:0	4	=
water	19:35	0:0	4	(
water	19:36	0:0	4	(
water	19:37	0:0	4	b
op	19:38	0:0	4	->
water	19:40	0:0	4	p_buffer
op	19:48	0:0	4	[
water	19:49	0:0	4	1
op	19:50	0:0	4	]
op	19:52	0:0	4	&
water	19:54	0:0	4	0
water	19:55	0:0	4	xf
water	19:57	0:0	4	)
op	19:59	0:0	4	<<
water	19:62	0:0	4	8
water	19:63	0:0	4	)
op	19:65	0:0	4	|
water	19:67	0:0	4	b
op	19:68	0:0	4	->
water	19:70	0:0	4	p_buffer
op	19:78	0:0	4	[
water	19:79	0:0	4	2
op	19:80	0:0	4	]
if	20:8	23:8	4	(section_length <= 1 + 4 || b -> i_buffer < 3 + ( unsigned ) section_length)
cond	20:12	20:67	5	section_length <= 1 + 4 || b -> i_buffer < 3 + ( unsigned ) section_length
water	20:12	0:0	6	section_length
op	20:27	0:0	6	<=
water	20:30	0:0	6	1
op	20:32	0:0	6	+
water	20:34	0:0	6	4
op	20:36	0:0	6	||
water	20:39	0:0	6	b
op	20:40	0:0	6	->
water	20:42	0:0	6	i_buffer
op	20:51	0:0	6	<
water	20:53	0:0	6	3
op	20:55	0:0	6	+
water	20:57	0:0	6	(
water	20:58	0:0	6	unsigned
water	20:66	0:0	6	)
water	20:67	0:0	6	section_length
stmts	20:83	23:8	5	
water	20:83	0:0	6	{
call	21:12	21:57	6	msg_Err
arg	21:20	21:23	7	dec
water	21:20	0:0	8	dec
arg	21:25	21:57	7	"Invalid SCTE-27 section length"
water	21:25	0:0	8	"Invalid SCTE-27 section length"
water	21:58	0:0	6	;
break	22:12	22:17	6	
water	23:8	0:0	6	}
decl	24:8	24:58	4	const int	protocol_version
op	24:35	0:0	4	=
water	24:37	0:0	4	b
op	24:38	0:0	4	->
water	24:40	0:0	4	p_buffer
op	24:48	0:0	4	[
water	24:49	0:0	4	3
op	24:50	0:0	4	]
op	24:52	0:0	4	&
water	24:54	0:0	4	0
water	24:55	0:0	4	x3f
if	25:8	28:8	4	(protocol_version != 0)
cond	25:12	25:32	5	protocol_version != 0
water	25:12	0:0	6	protocol_version
op	25:29	0:0	6	!=
water	25:32	0:0	6	0
stmts	25:35	28:8	5	
water	25:35	0:0	6	{
call	26:12	26:86	6	msg_Err
arg	26:20	26:23	7	dec
water	26:20	0:0	8	dec
arg	26:25	26:68	7	"Unsupported SCTE-27 protocol version (%d)"
water	26:25	0:0	8	"Unsupported SCTE-27 protocol version (%d)"
arg	26:70	26:86	7	protocol_version
water	26:70	0:0	8	protocol_version
water	26:87	0:0	6	;
break	27:12	27:17	6	
water	28:8	0:0	6	}
decl	29:8	29:63	4	const bool	segmentation_overlay
op	29:40	0:0	4	=
water	29:42	0:0	4	b
op	29:43	0:0	4	->
water	29:45	0:0	4	p_buffer
op	29:53	0:0	4	[
water	29:54	0:0	4	3
op	29:55	0:0	4	]
op	29:57	0:0	4	&
water	29:59	0:0	4	0
water	29:60	0:0	4	x40
decl	30:8	30:32	4	subpicture_t	*sub
op	30:26	0:0	4	=
water	30:28	0:0	4	NULL
if	31:8	62:8	4	(segmentation_overlay)
cond	31:12	31:12	5	segmentation_overlay
water	31:12	0:0	6	segmentation_overlay
stmts	31:34	62:8	5	
water	31:34	0:0	6	{
if	32:12	33:21	6	(section_length < 1 + 5 + 4)
cond	32:16	32:41	7	section_length < 1 + 5 + 4
water	32:16	0:0	8	section_length
op	32:31	0:0	8	<
water	32:33	0:0	8	1
op	32:35	0:0	8	+
water	32:37	0:0	8	5
op	32:39	0:0	8	+
water	32:41	0:0	8	4
stmts	33:16	33:21	7	
break	33:16	33:21	8	
decl	34:12	34:44	6	int	id
op	34:19	0:0	6	=
call	34:21	34:43	7	GetWBE
arg	34:28	34:43	8	&b->p_buffer[4]
op	34:28	0:0	9	&
water	34:29	0:0	9	b
op	34:30	0:0	9	->
water	34:32	0:0	9	p_buffer
op	34:40	0:0	9	[
water	34:41	0:0	9	4
op	34:42	0:0	9	]
decl	35:12	35:68	6	int	last
op	35:21	0:0	6	=
water	35:23	0:0	6	(
water	35:24	0:0	6	b
op	35:25	0:0	6	->
water	35:27	0:0	6	p_buffer
op	35:35	0:0	6	[
water	35:36	0:0	6	6
op	35:37	0:0	6	]
op	35:39	0:0	6	<<
water	35:42	0:0	6	4
water	35:43	0:0	6	)
op	35:45	0:0	6	|
water	35:47	0:0	6	(
water	35:48	0:0	6	b
op	35:49	0:0	6	->
water	35:51	0:0	6	p_buffer
op	35:59	0:0	6	[
water	35:60	0:0	6	7
op	35:61	0:0	6	]
op	35:63	0:0	6	>>
water	35:66	0:0	6	4
water	35:67	0:0	6	)
decl	36:12	36:71	6	int	index
op	36:22	0:0	6	=
water	36:24	0:0	6	(
water	36:25	0:0	6	(
water	36:26	0:0	6	b
op	36:27	0:0	6	->
water	36:29	0:0	6	p_buffer
op	36:37	0:0	6	[
water	36:38	0:0	6	7
op	36:39	0:0	6	]
op	36:41	0:0	6	&
water	36:43	0:0	6	0
water	36:44	0:0	6	x0f
water	36:47	0:0	6	)
op	36:49	0:0	6	<<
water	36:52	0:0	6	8
water	36:53	0:0	6	)
op	36:55	0:0	6	|
water	36:57	0:0	6	b
op	36:58	0:0	6	->
water	36:60	0:0	6	p_buffer
op	36:68	0:0	6	[
water	36:69	0:0	6	8
op	36:70	0:0	6	]
if	37:12	38:21	6	(index > last)
cond	37:16	37:24	7	index > last
water	37:16	0:0	8	index
op	37:22	0:0	8	>
water	37:24	0:0	8	last
stmts	38:16	38:21	7	
break	38:16	38:21	8	
if	39:12	43:12	6	(index == 0)
cond	39:16	39:25	7	index == 0
water	39:16	0:0	8	index
op	39:22	0:0	8	==
water	39:25	0:0	8	0
stmts	39:28	43:12	7	
water	39:28	0:0	8	{
water	40:16	0:0	8	sys
op	40:19	0:0	8	->
water	40:21	0:0	8	segment_id
op	40:32	0:0	8	=
water	40:34	0:0	8	id
water	40:36	0:0	8	;
water	41:16	0:0	8	sys
op	41:19	0:0	8	->
water	41:21	0:0	8	segment_size
op	41:34	0:0	8	=
water	41:36	0:0	8	0
water	41:37	0:0	8	;
water	42:16	0:0	8	sys
op	42:19	0:0	8	->
water	42:21	0:0	8	segment_date
op	42:34	0:0	8	=
water	42:36	0:0	8	b
op	42:37	0:0	8	->
water	42:39	0:0	8	i_pts
op	42:45	0:0	8	>
water	42:47	0:0	8	VLC_TS_INVALID
water	42:62	0:0	8	?
water	42:64	0:0	8	b
op	42:65	0:0	8	->
water	42:67	0:0	8	i_pts
water	42:73	0:0	8	:
water	42:75	0:0	8	b
op	42:76	0:0	8	->
water	42:78	0:0	8	i_dts
water	42:83	0:0	8	;
water	43:12	0:0	8	}
else	43:14	48:12	6
stmts	43:19	48:12	7	
water	43:19	0:0	8	{
if	44:16	47:16	8	(sys -> segment_id != id || sys -> segment_size <= 0)
cond	44:20	44:66	9	sys -> segment_id != id || sys -> segment_size <= 0
water	44:20	0:0	10	sys
op	44:23	0:0	10	->
water	44:25	0:0	10	segment_id
op	44:36	0:0	10	!=
water	44:39	0:0	10	id
op	44:42	0:0	10	||
water	44:45	0:0	10	sys
op	44:48	0:0	10	->
water	44:50	0:0	10	segment_size
op	44:63	0:0	10	<=
water	44:66	0:0	10	0
stmts	44:69	47:16	9	
water	44:69	0:0	10	{
water	45:20	0:0	10	sys
op	45:23	0:0	10	->
water	45:25	0:0	10	segment_id
op	45:36	0:0	10	=
op	45:38	0:0	10	-
water	45:39	0:0	10	1
water	45:40	0:0	10	;
break	46:20	46:25	10	
water	47:16	0:0	10	}
water	48:12	0:0	8	}
decl	49:12	49:57	6	int	segment_size
op	49:29	0:0	6	=
water	49:31	0:0	6	section_length
op	49:46	0:0	6	-
water	49:48	0:0	6	1
op	49:50	0:0	6	-
water	49:52	0:0	6	5
op	49:54	0:0	6	-
water	49:56	0:0	6	4
water	50:12	0:0	6	sys
op	50:15	0:0	6	->
water	50:17	0:0	6	segment_buffer
op	50:32	0:0	6	=
call	50:34	51:75	6	xrealloc
arg	50:43	50:62	7	sys->segment_buffer
water	50:43	0:0	8	sys
op	50:46	0:0	8	->
water	50:48	0:0	8	segment_buffer
arg	51:43	51:75	7	sys->segment_size+segment_size
water	51:43	0:0	8	sys
op	51:46	0:0	8	->
water	51:48	0:0	8	segment_size
op	51:61	0:0	8	+
water	51:63	0:0	8	segment_size
water	51:76	0:0	6	;
call	52:12	53:48	6	memcpy
arg	52:19	52:58	7	&sys->segment_buffer[sys->segment_size]
op	52:19	0:0	8	&
water	52:20	0:0	8	sys
op	52:23	0:0	8	->
water	52:25	0:0	8	segment_buffer
op	52:39	0:0	8	[
water	52:40	0:0	8	sys
op	52:43	0:0	8	->
water	52:45	0:0	8	segment_size
op	52:57	0:0	8	]
arg	53:19	53:34	7	&b->p_buffer[9]
op	53:19	0:0	8	&
water	53:20	0:0	8	b
op	53:21	0:0	8	->
water	53:23	0:0	8	p_buffer
op	53:31	0:0	8	[
water	53:32	0:0	8	9
op	53:33	0:0	8	]
arg	53:36	53:48	7	segment_size
water	53:36	0:0	8	segment_size
water	53:49	0:0	6	;
water	54:12	0:0	6	sys
op	54:15	0:0	6	->
water	54:17	0:0	6	segment_size
op	54:30	0:0	6	+=
water	54:33	0:0	6	segment_size
water	54:45	0:0	6	;
if	55:12	61:12	6	(index == last)
cond	55:16	55:25	7	index == last
water	55:16	0:0	8	index
op	55:22	0:0	8	==
water	55:25	0:0	8	last
stmts	55:31	61:12	7	
water	55:31	0:0	8	{
water	56:16	0:0	8	sub
op	56:20	0:0	8	=
call	56:22	59:61	8	DecodeSubtitleMessage
arg	56:44	56:47	9	dec
water	56:44	0:0	10	dec
arg	57:44	57:63	9	sys->segment_buffer
water	57:44	0:0	10	sys
op	57:47	0:0	10	->
water	57:49	0:0	10	segment_buffer
arg	58:44	58:61	9	sys->segment_size
water	58:44	0:0	10	sys
op	58:47	0:0	10	->
water	58:49	0:0	10	segment_size
arg	59:44	59:61	9	sys->segment_date
water	59:44	0:0	10	sys
op	59:47	0:0	10	->
water	59:49	0:0	10	segment_date
water	59:62	0:0	8	;
water	60:16	0:0	8	sys
op	60:19	0:0	8	->
water	60:21	0:0	8	segment_size
op	60:34	0:0	8	=
water	60:36	0:0	8	0
water	60:37	0:0	8	;
water	61:12	0:0	8	}
water	62:8	0:0	6	}
else	62:10	67:8	4
stmts	62:15	67:8	5	
water	62:15	0:0	6	{
water	63:12	0:0	6	sub
op	63:16	0:0	6	=
call	63:18	66:87	6	DecodeSubtitleMessage
arg	63:40	63:43	7	dec
water	63:40	0:0	8	dec
arg	64:40	64:55	7	&b->p_buffer[4]
op	64:40	0:0	8	&
water	64:41	0:0	8	b
op	64:42	0:0	8	->
water	64:44	0:0	8	p_buffer
op	64:52	0:0	8	[
water	64:53	0:0	8	4
op	64:54	0:0	8	]
arg	65:40	65:62	7	section_length-1-4
water	65:40	0:0	8	section_length
op	65:55	0:0	8	-
water	65:57	0:0	8	1
op	65:59	0:0	8	-
water	65:61	0:0	8	4
arg	66:40	66:87	7	b->i_pts>VLC_TS_INVALID?b->i_pts:b->i_dts
water	66:40	0:0	8	b
op	66:41	0:0	8	->
water	66:43	0:0	8	i_pts
op	66:49	0:0	8	>
water	66:51	0:0	8	VLC_TS_INVALID
water	66:66	0:0	8	?
water	66:68	0:0	8	b
op	66:69	0:0	8	->
water	66:71	0:0	8	i_pts
water	66:77	0:0	8	:
water	66:79	0:0	8	b
op	66:80	0:0	8	->
water	66:82	0:0	8	i_dts
water	66:88	0:0	6	;
water	67:8	0:0	6	}
op	68:8	0:0	4	*
water	68:9	0:0	4	sub_last
op	68:18	0:0	4	=
water	68:20	0:0	4	sub
water	68:23	0:0	4	;
if	69:8	70:43	4	(* sub_last)
cond	69:12	69:13	5	* sub_last
op	69:12	0:0	6	*
water	69:13	0:0	6	sub_last
stmts	70:12	70:43	5	
water	70:12	0:0	6	sub_last
op	70:21	0:0	6	=
op	70:23	0:0	6	&
water	70:24	0:0	6	(
op	70:25	0:0	6	*
water	70:26	0:0	6	sub_last
water	70:34	0:0	6	)
op	70:35	0:0	6	->
water	70:37	0:0	6	p_next
water	70:43	0:0	6	;
water	71:8	0:0	4	b
op	71:9	0:0	4	->
water	71:11	0:0	4	i_buffer
op	71:20	0:0	4	-=
water	71:23	0:0	4	3
op	71:25	0:0	4	+
water	71:27	0:0	4	section_length
water	71:41	0:0	4	;
water	72:8	0:0	4	b
op	72:9	0:0	4	->
water	72:11	0:0	4	p_buffer
op	72:20	0:0	4	+=
water	72:23	0:0	4	3
op	72:25	0:0	4	+
water	72:27	0:0	4	section_length
water	72:41	0:0	4	;
break	73:8	73:13	4	
water	74:4	0:0	4	}
label	75:0	75:4	2	exit :
call	76:4	76:19	2	block_Release
arg	76:18	76:19	3	b
water	76:18	0:0	4	b
water	76:20	0:0	2	;
return	77:4	77:20	2	sub_first
water	77:11	0:0	3	sub_first
