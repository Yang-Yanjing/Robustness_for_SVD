func	2:0	61:0	0	static void	encode_region_composition
params	2:37	0:0	1	
param	2:39	2:55	2	encoder_t *	p_enc
param	2:57	2:64	2	bs_t *	s
param	3:39	3:62	2	subpicture_t *	p_subpic
stmnts	0:0	60:4	1	
decl	5:4	5:39	2	encoder_sys_t	*p_sys
op	5:25	0:0	2	=
water	5:27	0:0	2	p_enc
op	5:32	0:0	2	->
water	5:34	0:0	2	p_sys
decl	6:4	6:33	2	subpicture_region_t	*p_region
decl	7:4	7:16	2	int	i_region
for	8:4	60:4	2	(i_region = 0 , p_region = p_subpic -> p_region ;p_region;p_region = p_region -> p_next , i_region ++)
forinit	8:9	8:52	3	i_region = 0 , p_region = p_subpic -> p_region ;
water	8:9	0:0	4	i_region
op	8:18	0:0	4	=
water	8:20	0:0	4	0
water	8:21	0:0	4	,
water	8:23	0:0	4	p_region
op	8:32	0:0	4	=
water	8:34	0:0	4	p_subpic
op	8:42	0:0	4	->
water	8:44	0:0	4	p_region
water	8:52	0:0	4	;
cond	8:54	8:54	3	p_region
water	8:54	0:0	4	p_region
forexpr	9:9	9:46	3	p_region = p_region -> p_next , i_region ++
water	9:9	0:0	4	p_region
op	9:18	0:0	4	=
water	9:20	0:0	4	p_region
op	9:28	0:0	4	->
water	9:30	0:0	4	p_next
water	9:36	0:0	4	,
water	9:38	0:0	4	i_region
op	9:46	0:0	4	++
stmts	10:4	60:4	3	
water	10:4	0:0	4	{
decl	11:8	11:50	4	int	i_entries
op	11:22	0:0	4	=
water	11:24	0:0	4	4
water	11:25	0:0	4	,
decl	11:8	11:50	4	int	i_depth
op	11:35	0:0	4	=
water	11:37	0:0	4	0
water	11:38	0:0	4	x1
water	11:40	0:0	4	,
decl	11:8	11:50	4	int	i_bg
op	11:47	0:0	4	=
water	11:49	0:0	4	0
decl	12:8	13:56	4	bool	b_text
op	12:20	0:0	4	=
water	13:12	0:0	4	(
water	13:14	0:0	4	p_region
op	13:22	0:0	4	->
water	13:24	0:0	4	fmt
op	13:27	0:0	4	.
water	13:28	0:0	4	i_chroma
op	13:37	0:0	4	==
water	13:40	0:0	4	VLC_CODEC_TEXT
water	13:55	0:0	4	)
if	14:8	28:8	4	(! b_text)
cond	14:12	14:13	5	! b_text
op	14:12	0:0	6	!
water	14:13	0:0	6	b_text
stmts	15:8	28:8	5	
water	15:8	0:0	6	{
decl	16:12	16:60	6	video_palette_t	*p_pal
op	16:35	0:0	6	=
water	16:37	0:0	6	p_region
op	16:45	0:0	6	->
water	16:47	0:0	6	fmt
op	16:50	0:0	6	.
water	16:51	0:0	6	p_palette
if	17:12	21:12	6	(! p_pal)
cond	17:16	17:17	7	! p_pal
op	17:16	0:0	8	!
water	17:17	0:0	8	p_pal
stmts	18:12	21:12	7	
water	18:12	0:0	8	{
call	19:16	19:74	8	msg_Err
arg	19:25	19:30	9	p_enc
water	19:25	0:0	10	p_enc
arg	19:32	19:74	9	"subpicture has no palette - ignoring it"
water	19:32	0:0	10	"subpicture has no palette - ignoring it"
water	19:75	0:0	8	;
break	20:16	20:21	8	
water	21:12	0:0	8	}
water	22:12	0:0	6	i_entries
op	22:22	0:0	6	=
water	22:24	0:0	6	p_pal
op	22:29	0:0	6	->
water	22:31	0:0	6	i_entries
water	22:40	0:0	6	;
water	23:12	0:0	6	i_depth
op	23:20	0:0	6	=
water	23:22	0:0	6	i_entries
op	23:32	0:0	6	==
water	23:35	0:0	6	4
water	23:37	0:0	6	?
water	23:39	0:0	6	0
water	23:40	0:0	6	x1
water	23:43	0:0	6	:
water	23:45	0:0	6	i_entries
op	23:55	0:0	6	==
water	23:58	0:0	6	16
water	23:61	0:0	6	?
water	23:63	0:0	6	0
water	23:64	0:0	6	x2
water	23:67	0:0	6	:
water	23:69	0:0	6	0
water	23:70	0:0	6	x3
water	23:72	0:0	6	;
for	24:12	27:12	6	(i_bg = 0 ;i_bg < p_pal -> i_entries;i_bg ++)
forinit	24:17	24:25	7	i_bg = 0 ;
water	24:17	0:0	8	i_bg
op	24:22	0:0	8	=
water	24:24	0:0	8	0
water	24:25	0:0	8	;
cond	24:27	24:41	7	i_bg < p_pal -> i_entries
water	24:27	0:0	8	i_bg
op	24:32	0:0	8	<
water	24:34	0:0	8	p_pal
op	24:39	0:0	8	->
water	24:41	0:0	8	i_entries
forexpr	24:52	24:56	7	i_bg ++
water	24:52	0:0	8	i_bg
op	24:56	0:0	8	++
stmts	25:12	27:12	7	
water	25:12	0:0	8	{
if	26:16	26:52	8	(! p_pal -> palette [ i_bg ] [ 3 ])
cond	26:20	26:43	9	! p_pal -> palette [ i_bg ] [ 3 ]
op	26:20	0:0	10	!
water	26:21	0:0	10	p_pal
op	26:26	0:0	10	->
water	26:28	0:0	10	palette
op	26:35	0:0	10	[
water	26:36	0:0	10	i_bg
op	26:40	0:0	10	]
op	26:41	0:0	10	[
water	26:42	0:0	10	3
op	26:43	0:0	10	]
stmts	26:47	26:52	9	
break	26:47	26:52	10	
water	27:12	0:0	8	}
water	28:8	0:0	6	}
call	29:8	29:29	4	bs_write
arg	29:18	29:19	5	s
water	29:18	0:0	6	s
arg	29:21	29:22	5	8
water	29:21	0:0	6	8
arg	29:24	29:29	5	0x0f
water	29:24	0:0	6	0
water	29:25	0:0	6	x0f
water	29:30	0:0	4	;
call	30:8	30:53	4	bs_write
arg	30:18	30:19	5	s
water	30:18	0:0	6	s
arg	30:21	30:22	5	8
water	30:21	0:0	6	8
arg	30:24	30:53	5	DVBSUB_ST_REGION_COMPOSITION
water	30:24	0:0	6	DVBSUB_ST_REGION_COMPOSITION
water	30:54	0:0	4	;
call	31:8	31:27	4	bs_write
arg	31:18	31:19	5	s
water	31:18	0:0	6	s
arg	31:21	31:23	5	16
water	31:21	0:0	6	16
arg	31:25	31:27	5	1
water	31:25	0:0	6	1
water	31:28	0:0	4	;
call	32:8	32:51	4	bs_write
arg	32:18	32:19	5	s
water	32:18	0:0	6	s
arg	32:21	32:23	5	16
water	32:21	0:0	6	16
arg	32:25	32:51	5	10+6+(b_text?2:0)
water	32:25	0:0	6	10
op	32:28	0:0	6	+
water	32:30	0:0	6	6
op	32:32	0:0	6	+
water	32:34	0:0	6	(
water	32:35	0:0	6	b_text
water	32:42	0:0	6	?
water	32:44	0:0	6	2
water	32:46	0:0	6	:
water	32:48	0:0	6	0
water	32:49	0:0	6	)
water	32:52	0:0	4	;
call	33:8	33:33	4	bs_write
arg	33:18	33:19	5	s
water	33:18	0:0	6	s
arg	33:21	33:22	5	8
water	33:21	0:0	6	8
arg	33:24	33:33	5	i_region
water	33:24	0:0	6	i_region
water	33:34	0:0	4	;
call	34:8	34:46	4	bs_write
arg	34:18	34:19	5	s
water	34:18	0:0	6	s
arg	34:21	34:22	5	4
water	34:21	0:0	6	4
arg	34:24	34:46	5	p_sys->i_region_ver++
water	34:24	0:0	6	p_sys
op	34:29	0:0	6	->
water	34:31	0:0	6	i_region_ver
op	34:43	0:0	6	++
water	34:47	0:0	4	;
call	36:8	36:41	4	bs_write
arg	36:18	36:19	5	s
water	36:18	0:0	6	s
arg	36:21	36:22	5	1
water	36:21	0:0	6	1
arg	36:24	36:41	5	i_bg<i_entries
water	36:24	0:0	6	i_bg
op	36:29	0:0	6	<
water	36:31	0:0	6	i_entries
water	36:42	0:0	4	;
call	37:8	37:26	4	bs_write
arg	37:18	37:19	5	s
water	37:18	0:0	6	s
arg	37:21	37:22	5	3
water	37:21	0:0	6	3
arg	37:24	37:26	5	0
water	37:24	0:0	6	0
water	37:27	0:0	4	;
call	38:8	38:60	4	bs_write
arg	38:18	38:19	5	s
water	38:18	0:0	6	s
arg	38:21	38:23	5	16
water	38:21	0:0	6	16
arg	38:25	38:60	5	p_sys->p_regions[i_region].i_width
water	38:25	0:0	6	p_sys
op	38:30	0:0	6	->
water	38:32	0:0	6	p_regions
op	38:41	0:0	6	[
water	38:42	0:0	6	i_region
op	38:50	0:0	6	]
op	38:51	0:0	6	.
water	38:52	0:0	6	i_width
water	38:61	0:0	4	;
call	39:8	39:61	4	bs_write
arg	39:18	39:19	5	s
water	39:18	0:0	6	s
arg	39:21	39:23	5	16
water	39:21	0:0	6	16
arg	39:25	39:61	5	p_sys->p_regions[i_region].i_height
water	39:25	0:0	6	p_sys
op	39:30	0:0	6	->
water	39:32	0:0	6	p_regions
op	39:41	0:0	6	[
water	39:42	0:0	6	i_region
op	39:50	0:0	6	]
op	39:51	0:0	6	.
water	39:52	0:0	6	i_height
water	39:62	0:0	4	;
call	40:8	40:32	4	bs_write
arg	40:18	40:19	5	s
water	40:18	0:0	6	s
arg	40:21	40:22	5	3
water	40:21	0:0	6	3
arg	40:24	40:32	5	i_depth
water	40:24	0:0	6	i_depth
water	40:33	0:0	4	;
call	41:8	41:33	4	bs_write
arg	41:18	41:19	5	s
water	41:18	0:0	6	s
arg	41:21	41:22	5	3
water	41:21	0:0	6	3
arg	41:24	41:33	5	i_depth
water	41:24	0:0	6	i_depth
water	41:34	0:0	4	;
call	42:8	42:26	4	bs_write
arg	42:18	42:19	5	s
water	42:18	0:0	6	s
arg	42:21	42:22	5	2
water	42:21	0:0	6	2
arg	42:24	42:26	5	0
water	42:24	0:0	6	0
water	42:27	0:0	4	;
call	43:8	43:26	4	bs_write
arg	43:18	43:19	5	s
water	43:18	0:0	6	s
arg	43:21	43:22	5	8
water	43:21	0:0	6	8
arg	43:24	43:26	5	1
water	43:24	0:0	6	1
water	43:27	0:0	4	;
call	44:8	44:29	4	bs_write
arg	44:18	44:19	5	s
water	44:18	0:0	6	s
arg	44:21	44:22	5	8
water	44:21	0:0	6	8
arg	44:24	44:29	5	i_bg
water	44:24	0:0	6	i_bg
water	44:30	0:0	4	;
call	45:8	45:29	4	bs_write
arg	45:18	45:19	5	s
water	45:18	0:0	6	s
arg	45:21	45:22	5	4
water	45:21	0:0	6	4
arg	45:24	45:29	5	i_bg
water	45:24	0:0	6	i_bg
water	45:30	0:0	4	;
call	46:8	46:29	4	bs_write
arg	46:18	46:19	5	s
water	46:18	0:0	6	s
arg	46:21	46:22	5	2
water	46:21	0:0	6	2
arg	46:24	46:29	5	i_bg
water	46:24	0:0	6	i_bg
water	46:30	0:0	4	;
call	47:8	47:26	4	bs_write
arg	47:18	47:19	5	s
water	47:18	0:0	6	s
arg	47:21	47:22	5	2
water	47:21	0:0	6	2
arg	47:24	47:26	5	0
water	47:24	0:0	6	0
water	47:27	0:0	4	;
call	49:8	49:34	4	bs_write
arg	49:18	49:19	5	s
water	49:18	0:0	6	s
arg	49:21	49:23	5	16
water	49:21	0:0	6	16
arg	49:25	49:34	5	i_region
water	49:25	0:0	6	i_region
water	49:35	0:0	4	;
call	50:8	50:77	4	bs_write
arg	50:18	50:19	5	s
water	50:18	0:0	6	s
arg	50:21	50:22	5	2
water	50:21	0:0	6	2
arg	50:24	50:77	5	b_text?DVBSUB_OT_BASIC_CHAR:DVBSUB_OT_BASIC_BITMAP
water	50:24	0:0	6	b_text
water	50:31	0:0	6	?
water	50:33	0:0	6	DVBSUB_OT_BASIC_CHAR
water	50:53	0:0	6	:
water	50:54	0:0	6	DVBSUB_OT_BASIC_BITMAP
water	50:78	0:0	4	;
call	51:8	51:26	4	bs_write
arg	51:18	51:19	5	s
water	51:18	0:0	6	s
arg	51:21	51:22	5	2
water	51:21	0:0	6	2
arg	51:24	51:26	5	0
water	51:24	0:0	6	0
water	51:27	0:0	4	;
call	52:8	52:27	4	bs_write
arg	52:18	52:19	5	s
water	52:18	0:0	6	s
arg	52:21	52:23	5	12
water	52:21	0:0	6	12
arg	52:25	52:27	5	0
water	52:25	0:0	6	0
water	52:28	0:0	4	;
call	53:8	53:26	4	bs_write
arg	53:18	53:19	5	s
water	53:18	0:0	6	s
arg	53:21	53:22	5	4
water	53:21	0:0	6	4
arg	53:24	53:26	5	0
water	53:24	0:0	6	0
water	53:27	0:0	4	;
call	54:8	54:27	4	bs_write
arg	54:18	54:19	5	s
water	54:18	0:0	6	s
arg	54:21	54:23	5	12
water	54:21	0:0	6	12
arg	54:25	54:27	5	0
water	54:25	0:0	6	0
water	54:28	0:0	4	;
if	55:8	59:8	4	(b_text)
cond	55:12	55:12	5	b_text
water	55:12	0:0	6	b_text
stmts	56:8	59:8	5	
water	56:8	0:0	6	{
call	57:12	57:30	6	bs_write
arg	57:22	57:23	7	s
water	57:22	0:0	8	s
arg	57:25	57:26	7	8
water	57:25	0:0	8	8
arg	57:28	57:30	7	1
water	57:28	0:0	8	1
water	57:31	0:0	6	;
call	58:12	58:30	6	bs_write
arg	58:22	58:23	7	s
water	58:22	0:0	8	s
arg	58:25	58:26	7	8
water	58:25	0:0	8	8
arg	58:28	58:30	7	0
water	58:28	0:0	8	0
water	58:31	0:0	6	;
water	59:8	0:0	6	}
water	60:4	0:0	4	}
