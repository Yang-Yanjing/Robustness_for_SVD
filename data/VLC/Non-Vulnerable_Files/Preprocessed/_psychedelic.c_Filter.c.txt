func	2:0	108:0	0	static picture_t *	Filter
params	2:24	0:0	1	
param	2:26	2:44	2	filter_t *	p_filter
param	2:46	2:63	2	picture_t *	p_pic
stmnts	0:0	107:48	1	
decl	4:4	4:23	2	picture_t	*p_outpic
decl	5:4	5:21	2	unsigned int	w
water	5:18	0:0	2	,
decl	5:4	5:21	2	unsigned int	h
decl	6:4	6:11	2	int	x
water	6:9	0:0	2	,
decl	6:4	6:11	2	int	y
decl	7:4	7:15	2	uint8_t	u
water	7:13	0:0	2	,
decl	7:4	7:15	2	uint8_t	v
decl	8:4	8:26	2	picture_t	*p_converted
decl	9:4	9:26	2	video_format_t	fmt_out
call	10:4	10:48	2	memset
arg	10:12	10:20	3	&fmt_out
op	10:12	0:0	4	&
water	10:13	0:0	4	fmt_out
arg	10:22	10:23	3	0
water	10:22	0:0	4	0
arg	10:25	10:48	3	sizeof(video_format_t)
op	10:25	0:0	4	sizeof
water	10:31	0:0	4	(
water	10:32	0:0	4	video_format_t
water	10:46	0:0	4	)
water	10:49	0:0	2	;
water	11:4	0:0	2	fmt_out
op	11:11	0:0	2	.
water	11:12	0:0	2	p_palette
op	11:22	0:0	2	=
water	11:24	0:0	2	NULL
water	11:28	0:0	2	;
if	12:4	12:28	2	(! p_pic)
cond	12:8	12:9	3	! p_pic
op	12:8	0:0	4	!
water	12:9	0:0	4	p_pic
stmts	12:17	12:28	3	
return	12:17	12:28	4	NULL
water	12:24	0:0	5	NULL
water	13:4	0:0	2	p_outpic
op	13:13	0:0	2	=
call	13:15	13:43	2	filter_NewPicture
arg	13:34	13:43	3	p_filter
water	13:34	0:0	4	p_filter
water	13:44	0:0	2	;
if	14:4	18:4	2	(! p_outpic)
cond	14:8	14:9	3	! p_outpic
op	14:8	0:0	4	!
water	14:9	0:0	4	p_outpic
stmts	15:4	18:4	3	
water	15:4	0:0	4	{
call	16:8	16:31	4	picture_Release
arg	16:25	16:31	5	p_pic
water	16:25	0:0	6	p_pic
water	16:32	0:0	4	;
return	17:8	17:19	4	NULL
water	17:15	0:0	5	NULL
water	18:4	0:0	4	}
if	19:4	20:66	2	(! p_filter -> p_sys -> p_image)
cond	19:8	19:26	3	! p_filter -> p_sys -> p_image
op	19:8	0:0	4	!
water	19:9	0:0	4	p_filter
op	19:17	0:0	4	->
water	19:19	0:0	4	p_sys
op	19:24	0:0	4	->
water	19:26	0:0	4	p_image
stmts	20:8	20:66	3	
water	20:8	0:0	4	p_filter
op	20:16	0:0	4	->
water	20:18	0:0	4	p_sys
op	20:23	0:0	4	->
water	20:25	0:0	4	p_image
op	20:33	0:0	4	=
call	20:35	20:65	4	image_HandlerCreate
arg	20:56	20:65	5	p_filter
water	20:56	0:0	6	p_filter
water	20:66	0:0	4	;
water	22:4	0:0	2	u
op	22:6	0:0	2	=
water	22:8	0:0	2	p_filter
op	22:16	0:0	2	->
water	22:18	0:0	2	p_sys
op	22:23	0:0	2	->
water	22:25	0:0	2	u
water	22:26	0:0	2	;
water	23:4	0:0	2	v
op	23:6	0:0	2	=
water	23:8	0:0	2	p_filter
op	23:16	0:0	2	->
water	23:18	0:0	2	p_sys
op	23:23	0:0	2	->
water	23:25	0:0	2	v
water	23:26	0:0	2	;
for	24:4	40:4	2	(y = 0 ;y < p_outpic -> p [ U_PLANE ] . i_lines;y ++)
forinit	24:9	24:14	3	y = 0 ;
water	24:9	0:0	4	y
op	24:11	0:0	4	=
water	24:13	0:0	4	0
water	24:14	0:0	4	;
cond	24:16	24:39	3	y < p_outpic -> p [ U_PLANE ] . i_lines
water	24:16	0:0	4	y
op	24:17	0:0	4	<
water	24:18	0:0	4	p_outpic
op	24:26	0:0	4	->
water	24:28	0:0	4	p
op	24:29	0:0	4	[
water	24:30	0:0	4	U_PLANE
op	24:37	0:0	4	]
op	24:38	0:0	4	.
water	24:39	0:0	4	i_lines
forexpr	24:48	24:49	3	y ++
water	24:48	0:0	4	y
op	24:49	0:0	4	++
stmts	25:4	40:4	3	
water	25:4	0:0	4	{
call	26:8	28:48	4	memset
arg	27:16	27:76	5	p_outpic->p[U_PLANE].p_pixels+y*p_outpic->p[U_PLANE].i_pitch
water	27:16	0:0	6	p_outpic
op	27:24	0:0	6	->
water	27:26	0:0	6	p
op	27:27	0:0	6	[
water	27:28	0:0	6	U_PLANE
op	27:35	0:0	6	]
op	27:36	0:0	6	.
water	27:37	0:0	6	p_pixels
op	27:45	0:0	6	+
water	27:46	0:0	6	y
op	27:47	0:0	6	*
water	27:48	0:0	6	p_outpic
op	27:56	0:0	6	->
water	27:58	0:0	6	p
op	27:59	0:0	6	[
water	27:60	0:0	6	U_PLANE
op	27:67	0:0	6	]
op	27:68	0:0	6	.
water	27:69	0:0	6	i_pitch
arg	28:16	28:17	5	u
water	28:16	0:0	6	u
arg	28:19	28:48	5	p_outpic->p[U_PLANE].i_pitch
water	28:19	0:0	6	p_outpic
op	28:27	0:0	6	->
water	28:29	0:0	6	p
op	28:30	0:0	6	[
water	28:31	0:0	6	U_PLANE
op	28:38	0:0	6	]
op	28:39	0:0	6	.
water	28:40	0:0	6	i_pitch
water	28:49	0:0	4	;
call	29:8	31:48	4	memset
arg	30:16	30:76	5	p_outpic->p[V_PLANE].p_pixels+y*p_outpic->p[V_PLANE].i_pitch
water	30:16	0:0	6	p_outpic
op	30:24	0:0	6	->
water	30:26	0:0	6	p
op	30:27	0:0	6	[
water	30:28	0:0	6	V_PLANE
op	30:35	0:0	6	]
op	30:36	0:0	6	.
water	30:37	0:0	6	p_pixels
op	30:45	0:0	6	+
water	30:46	0:0	6	y
op	30:47	0:0	6	*
water	30:48	0:0	6	p_outpic
op	30:56	0:0	6	->
water	30:58	0:0	6	p
op	30:59	0:0	6	[
water	30:60	0:0	6	V_PLANE
op	30:67	0:0	6	]
op	30:68	0:0	6	.
water	30:69	0:0	6	i_pitch
arg	31:16	31:17	5	v
water	31:16	0:0	6	v
arg	31:19	31:48	5	p_outpic->p[V_PLANE].i_pitch
water	31:19	0:0	6	p_outpic
op	31:27	0:0	6	->
water	31:29	0:0	6	p
op	31:30	0:0	6	[
water	31:31	0:0	6	V_PLANE
op	31:38	0:0	6	]
op	31:39	0:0	6	.
water	31:40	0:0	6	i_pitch
water	31:49	0:0	4	;
if	32:8	33:16	4	(v == 0 && u != 0)
cond	32:12	32:27	5	v == 0 && u != 0
water	32:12	0:0	6	v
op	32:14	0:0	6	==
water	32:17	0:0	6	0
op	32:19	0:0	6	&&
water	32:22	0:0	6	u
op	32:24	0:0	6	!=
water	32:27	0:0	6	0
stmts	33:12	33:16	5	
water	33:12	0:0	6	u
op	33:14	0:0	6	--
water	33:16	0:0	6	;
else	34:8	35:16	4
stmts	34:13	35:16	5	
if	34:13	35:16	6	(u == 0 xff)
cond	34:17	34:23	7	u == 0 xff
water	34:17	0:0	8	u
op	34:19	0:0	8	==
water	34:22	0:0	8	0
water	34:23	0:0	8	xff
stmts	35:12	35:16	7	
water	35:12	0:0	8	v
op	35:14	0:0	8	--
water	35:16	0:0	8	;
else	36:8	37:16	4
stmts	36:13	37:16	5	
if	36:13	37:16	6	(v == 0 xff)
cond	36:17	36:23	7	v == 0 xff
water	36:17	0:0	8	v
op	36:19	0:0	8	==
water	36:22	0:0	8	0
water	36:23	0:0	8	xff
stmts	37:12	37:16	7	
water	37:12	0:0	8	u
op	37:14	0:0	8	++
water	37:16	0:0	8	;
else	38:8	39:16	4
stmts	38:13	39:16	5	
if	38:13	39:16	6	(u == 0)
cond	38:17	38:22	7	u == 0
water	38:17	0:0	8	u
op	38:19	0:0	8	==
water	38:22	0:0	8	0
stmts	39:12	39:16	7	
water	39:12	0:0	8	v
op	39:14	0:0	8	++
water	39:16	0:0	8	;
water	40:4	0:0	4	}
call	42:4	42:64	2	plane_CopyPixels
arg	42:22	42:43	3	&p_outpic->p[Y_PLANE]
op	42:22	0:0	4	&
water	42:23	0:0	4	p_outpic
op	42:31	0:0	4	->
water	42:33	0:0	4	p
op	42:34	0:0	4	[
water	42:35	0:0	4	Y_PLANE
op	42:42	0:0	4	]
arg	42:45	42:64	3	&p_pic->p[Y_PLANE]
op	42:45	0:0	4	&
water	42:46	0:0	4	p_pic
op	42:51	0:0	4	->
water	42:53	0:0	4	p
op	42:54	0:0	4	[
water	42:55	0:0	4	Y_PLANE
op	42:62	0:0	4	]
water	42:65	0:0	2	;
water	44:4	0:0	2	fmt_out
op	44:12	0:0	2	=
water	44:14	0:0	2	p_filter
op	44:22	0:0	2	->
water	44:24	0:0	2	fmt_out
op	44:31	0:0	2	.
water	44:32	0:0	2	video
water	44:37	0:0	2	;
water	45:4	0:0	2	fmt_out
op	45:11	0:0	2	.
water	45:12	0:0	2	i_width
op	45:20	0:0	2	=
water	45:22	0:0	2	p_filter
op	45:30	0:0	2	->
water	45:32	0:0	2	fmt_out
op	45:39	0:0	2	.
water	45:40	0:0	2	video
op	45:45	0:0	2	.
water	45:46	0:0	2	i_width
op	45:53	0:0	2	*
water	45:54	0:0	2	p_filter
op	45:62	0:0	2	->
water	45:64	0:0	2	p_sys
op	45:69	0:0	2	->
water	45:71	0:0	2	scale
op	45:76	0:0	2	/
water	45:77	0:0	2	150
water	45:80	0:0	2	;
water	46:4	0:0	2	fmt_out
op	46:11	0:0	2	.
water	46:12	0:0	2	i_height
op	46:21	0:0	2	=
water	46:23	0:0	2	p_filter
op	46:31	0:0	2	->
water	46:33	0:0	2	fmt_out
op	46:40	0:0	2	.
water	46:41	0:0	2	video
op	46:46	0:0	2	.
water	46:47	0:0	2	i_height
op	46:55	0:0	2	*
water	46:56	0:0	2	p_filter
op	46:64	0:0	2	->
water	46:66	0:0	2	p_sys
op	46:71	0:0	2	->
water	46:73	0:0	2	scale
op	46:78	0:0	2	/
water	46:79	0:0	2	150
water	46:82	0:0	2	;
water	47:4	0:0	2	fmt_out
op	47:11	0:0	2	.
water	47:12	0:0	2	i_visible_width
op	47:28	0:0	2	=
water	47:30	0:0	2	fmt_out
op	47:37	0:0	2	.
water	47:38	0:0	2	i_width
water	47:45	0:0	2	;
water	48:4	0:0	2	fmt_out
op	48:11	0:0	2	.
water	48:12	0:0	2	i_visible_height
op	48:29	0:0	2	=
water	48:31	0:0	2	fmt_out
op	48:38	0:0	2	.
water	48:39	0:0	2	i_height
water	48:47	0:0	2	;
water	49:4	0:0	2	p_converted
op	49:16	0:0	2	=
call	49:18	50:60	2	image_Convert
arg	49:33	49:57	3	p_filter->p_sys->p_image
water	49:33	0:0	4	p_filter
op	49:41	0:0	4	->
water	49:43	0:0	4	p_sys
op	49:48	0:0	4	->
water	49:50	0:0	4	p_image
arg	49:59	49:64	3	p_pic
water	49:59	0:0	4	p_pic
arg	50:33	50:49	3	&(p_pic->format)
op	50:33	0:0	4	&
water	50:34	0:0	4	(
water	50:35	0:0	4	p_pic
op	50:40	0:0	4	->
water	50:42	0:0	4	format
water	50:48	0:0	4	)
arg	50:51	50:60	3	&fmt_out
op	50:51	0:0	4	&
water	50:52	0:0	4	fmt_out
water	50:61	0:0	2	;
if	51:4	72:4	2	(p_converted)
cond	51:8	51:8	3	p_converted
water	51:8	0:0	4	p_converted
stmts	52:4	72:4	3	
water	52:4	0:0	4	{
for	54:8	66:10	4	(y = 0 ;y < p_converted -> p [ plane ] . i_visible_lines;y ++)
forinit	54:13	54:16	5	y = 0 ;
water	54:13	0:0	6	y
op	54:14	0:0	6	=
water	54:15	0:0	6	0
water	54:16	0:0	6	;
cond	54:18	54:42	5	y < p_converted -> p [ plane ] . i_visible_lines
water	54:18	0:0	6	y
op	54:19	0:0	6	<
water	54:20	0:0	6	p_converted
op	54:31	0:0	6	->
water	54:33	0:0	6	p
op	54:34	0:0	6	[
water	54:35	0:0	6	plane
op	54:40	0:0	6	]
op	54:41	0:0	6	.
water	54:42	0:0	6	i_visible_lines
forexpr	54:59	54:60	5	y ++
water	54:59	0:0	6	y
op	54:60	0:0	6	++
stmts	54:64	66:10	5	
water	54:64	0:0	6	{
for	55:8	66:8	6	(x = 0 ;x < p_converted -> p [ plane ] . i_visible_pitch;x ++)
forinit	55:13	55:16	7	x = 0 ;
water	55:13	0:0	8	x
op	55:14	0:0	8	=
water	55:15	0:0	8	0
water	55:16	0:0	8	;
cond	55:18	55:42	7	x < p_converted -> p [ plane ] . i_visible_pitch
water	55:18	0:0	8	x
op	55:19	0:0	8	<
water	55:20	0:0	8	p_converted
op	55:31	0:0	8	->
water	55:33	0:0	8	p
op	55:34	0:0	8	[
water	55:35	0:0	8	plane
op	55:40	0:0	8	]
op	55:41	0:0	8	.
water	55:42	0:0	8	i_visible_pitch
forexpr	55:59	55:60	7	x ++
water	55:59	0:0	8	x
op	55:60	0:0	8	++
stmts	55:64	66:8	7	
water	55:64	0:0	8	{
decl	56:12	56:22	8	int	nx
water	56:18	0:0	8	,
decl	56:12	56:22	8	int	ny
if	57:12	58:21	8	(p_filter -> p_sys -> yinc == 1)
cond	57:16	57:41	9	p_filter -> p_sys -> yinc == 1
water	57:16	0:0	10	p_filter
op	57:24	0:0	10	->
water	57:26	0:0	10	p_sys
op	57:31	0:0	10	->
water	57:33	0:0	10	yinc
op	57:38	0:0	10	==
water	57:41	0:0	10	1
stmts	58:16	58:21	9	
water	58:16	0:0	10	ny
op	58:18	0:0	10	=
water	58:20	0:0	10	y
water	58:21	0:0	10	;
else	59:12	60:60	8
stmts	60:16	60:60	9	
water	60:16	0:0	10	ny
op	60:19	0:0	10	=
water	60:21	0:0	10	p_converted
op	60:32	0:0	10	->
water	60:34	0:0	10	p
op	60:35	0:0	10	[
water	60:36	0:0	10	plane
op	60:41	0:0	10	]
op	60:42	0:0	10	.
water	60:43	0:0	10	i_visible_lines
op	60:58	0:0	10	-
water	60:59	0:0	10	y
water	60:60	0:0	10	;
if	61:12	62:22	8	(p_filter -> p_sys -> xinc == 1)
cond	61:16	61:41	9	p_filter -> p_sys -> xinc == 1
water	61:16	0:0	10	p_filter
op	61:24	0:0	10	->
water	61:26	0:0	10	p_sys
op	61:31	0:0	10	->
water	61:33	0:0	10	xinc
op	61:38	0:0	10	==
water	61:41	0:0	10	1
stmts	62:16	62:22	9	
water	62:16	0:0	10	nx
op	62:19	0:0	10	=
water	62:21	0:0	10	x
water	62:22	0:0	10	;
else	63:12	64:60	8
stmts	64:16	64:60	9	
water	64:16	0:0	10	nx
op	64:19	0:0	10	=
water	64:21	0:0	10	p_converted
op	64:32	0:0	10	->
water	64:34	0:0	10	p
op	64:35	0:0	10	[
water	64:36	0:0	10	plane
op	64:41	0:0	10	]
op	64:42	0:0	10	.
water	64:43	0:0	10	i_visible_pitch
op	64:58	0:0	10	-
water	64:59	0:0	10	x
water	64:60	0:0	10	;
water	65:12	0:0	8	p_outpic
op	65:20	0:0	8	->
water	65:22	0:0	8	p
op	65:23	0:0	8	[
water	65:24	0:0	8	plane
op	65:29	0:0	8	]
op	65:30	0:0	8	.
water	65:31	0:0	8	p_pixels
op	65:39	0:0	8	[
water	65:40	0:0	8	(
water	65:41	0:0	8	p_filter
op	65:49	0:0	8	->
water	65:51	0:0	8	p_sys
op	65:56	0:0	8	->
water	65:58	0:0	8	x
op	65:59	0:0	8	*
water	65:60	0:0	8	b
op	65:61	0:0	8	+
water	65:62	0:0	8	nx
water	65:64	0:0	8	)
op	65:65	0:0	8	+
water	65:66	0:0	8	(
water	65:67	0:0	8	ny
op	65:69	0:0	8	+
water	65:70	0:0	8	p_filter
op	65:78	0:0	8	->
water	65:80	0:0	8	p_sys
op	65:85	0:0	8	->
water	65:87	0:0	8	y
op	65:88	0:0	8	*
water	65:89	0:0	8	b
water	65:90	0:0	8	)
op	65:91	0:0	8	*
water	65:92	0:0	8	p_outpic
op	65:100	0:0	8	->
water	65:102	0:0	8	p
op	65:103	0:0	8	[
water	65:104	0:0	8	plane
op	65:109	0:0	8	]
op	65:110	0:0	8	.
water	65:111	0:0	8	i_pitch
op	65:119	0:0	8	]
op	65:121	0:0	8	=
water	65:123	0:0	8	p_converted
op	65:134	0:0	8	->
water	65:136	0:0	8	p
op	65:137	0:0	8	[
water	65:138	0:0	8	plane
op	65:143	0:0	8	]
op	65:144	0:0	8	.
water	65:145	0:0	8	p_pixels
op	65:153	0:0	8	[
water	65:154	0:0	8	y
op	65:155	0:0	8	*
water	65:156	0:0	8	p_converted
op	65:167	0:0	8	->
water	65:169	0:0	8	p
op	65:170	0:0	8	[
water	65:171	0:0	8	plane
op	65:176	0:0	8	]
op	65:177	0:0	8	.
water	65:178	0:0	8	i_pitch
op	65:185	0:0	8	+
water	65:186	0:0	8	x
op	65:187	0:0	8	]
water	65:188	0:0	8	;
water	66:8	0:0	8	}
water	66:10	0:0	6	}
call	67:8	67:30	4	copyimage
arg	67:19	67:26	5	Y_PLANE
water	67:19	0:0	6	Y_PLANE
arg	67:28	67:30	5	2
water	67:28	0:0	6	2
water	67:31	0:0	4	;
call	68:8	68:30	4	copyimage
arg	68:19	68:26	5	U_PLANE
water	68:19	0:0	6	U_PLANE
arg	68:28	68:30	5	1
water	68:28	0:0	6	1
water	68:31	0:0	4	;
call	69:8	69:30	4	copyimage
arg	69:19	69:26	5	V_PLANE
water	69:19	0:0	6	V_PLANE
arg	69:28	69:30	5	1
water	69:28	0:0	6	1
water	69:31	0:0	4	;
call	71:8	71:37	4	picture_Release
arg	71:25	71:37	5	p_converted
water	71:25	0:0	6	p_converted
water	71:38	0:0	4	;
water	72:4	0:0	4	}
else	73:4	76:4	2
stmts	74:4	76:4	3	
water	74:4	0:0	4	{
call	75:8	75:61	4	msg_Err
arg	75:17	75:25	5	p_filter
water	75:17	0:0	6	p_filter
arg	75:27	75:61	5	"Image scaling failed miserably."
water	75:27	0:0	6	"Image scaling failed miserably."
water	75:62	0:0	4	;
water	76:4	0:0	4	}
water	77:4	0:0	2	p_filter
op	77:12	0:0	2	->
water	77:14	0:0	2	p_sys
op	77:19	0:0	2	->
water	77:21	0:0	2	x
op	77:23	0:0	2	+=
water	77:26	0:0	2	p_filter
op	77:34	0:0	2	->
water	77:36	0:0	2	p_sys
op	77:41	0:0	2	->
water	77:43	0:0	2	xinc
water	77:47	0:0	2	;
water	78:4	0:0	2	p_filter
op	78:12	0:0	2	->
water	78:14	0:0	2	p_sys
op	78:19	0:0	2	->
water	78:21	0:0	2	y
op	78:23	0:0	2	+=
water	78:26	0:0	2	p_filter
op	78:34	0:0	2	->
water	78:36	0:0	2	p_sys
op	78:41	0:0	2	->
water	78:43	0:0	2	yinc
water	78:47	0:0	2	;
water	79:4	0:0	2	p_filter
op	79:12	0:0	2	->
water	79:14	0:0	2	p_sys
op	79:19	0:0	2	->
water	79:21	0:0	2	scale
op	79:27	0:0	2	+=
water	79:30	0:0	2	p_filter
op	79:38	0:0	2	->
water	79:40	0:0	2	p_sys
op	79:45	0:0	2	->
water	79:47	0:0	2	scaleinc
water	79:55	0:0	2	;
if	80:4	80:69	2	(p_filter -> p_sys -> scale >= 50)
cond	80:8	80:34	3	p_filter -> p_sys -> scale >= 50
water	80:8	0:0	4	p_filter
op	80:16	0:0	4	->
water	80:18	0:0	4	p_sys
op	80:23	0:0	4	->
water	80:25	0:0	4	scale
op	80:31	0:0	4	>=
water	80:34	0:0	4	50
stmts	80:39	80:69	3	
water	80:39	0:0	4	p_filter
op	80:47	0:0	4	->
water	80:49	0:0	4	p_sys
op	80:54	0:0	4	->
water	80:56	0:0	4	scaleinc
op	80:65	0:0	4	=
op	80:67	0:0	4	-
water	80:68	0:0	4	1
water	80:69	0:0	4	;
if	81:4	81:67	2	(p_filter -> p_sys -> scale <= 1)
cond	81:8	81:34	3	p_filter -> p_sys -> scale <= 1
water	81:8	0:0	4	p_filter
op	81:16	0:0	4	->
water	81:18	0:0	4	p_sys
op	81:23	0:0	4	->
water	81:25	0:0	4	scale
op	81:31	0:0	4	<=
water	81:34	0:0	4	1
stmts	81:38	81:67	3	
water	81:38	0:0	4	p_filter
op	81:46	0:0	4	->
water	81:48	0:0	4	p_sys
op	81:53	0:0	4	->
water	81:55	0:0	4	scaleinc
op	81:64	0:0	4	=
water	81:66	0:0	4	1
water	81:67	0:0	4	;
water	82:4	0:0	2	w
op	82:6	0:0	2	=
water	82:8	0:0	2	p_filter
op	82:16	0:0	2	->
water	82:18	0:0	2	fmt_out
op	82:25	0:0	2	.
water	82:26	0:0	2	video
op	82:31	0:0	2	.
water	82:32	0:0	2	i_width
op	82:39	0:0	2	*
water	82:40	0:0	2	p_filter
op	82:48	0:0	2	->
water	82:50	0:0	2	p_sys
op	82:55	0:0	2	->
water	82:57	0:0	2	scale
op	82:62	0:0	2	/
water	82:63	0:0	2	150
water	82:66	0:0	2	;
water	83:4	0:0	2	h
op	83:6	0:0	2	=
water	83:8	0:0	2	p_filter
op	83:16	0:0	2	->
water	83:18	0:0	2	fmt_out
op	83:25	0:0	2	.
water	83:26	0:0	2	video
op	83:31	0:0	2	.
water	83:32	0:0	2	i_height
op	83:40	0:0	2	*
water	83:41	0:0	2	p_filter
op	83:49	0:0	2	->
water	83:51	0:0	2	p_sys
op	83:56	0:0	2	->
water	83:58	0:0	2	scale
op	83:63	0:0	2	/
water	83:64	0:0	2	150
water	83:67	0:0	2	;
if	84:4	85:34	2	(p_filter -> p_sys -> x * 2 + w >= p_filter -> fmt_out . video . i_width)
cond	84:8	84:60	3	p_filter -> p_sys -> x * 2 + w >= p_filter -> fmt_out . video . i_width
water	84:8	0:0	4	p_filter
op	84:16	0:0	4	->
water	84:18	0:0	4	p_sys
op	84:23	0:0	4	->
water	84:25	0:0	4	x
op	84:26	0:0	4	*
water	84:27	0:0	4	2
op	84:29	0:0	4	+
water	84:31	0:0	4	w
op	84:33	0:0	4	>=
water	84:36	0:0	4	p_filter
op	84:44	0:0	4	->
water	84:46	0:0	4	fmt_out
op	84:53	0:0	4	.
water	84:54	0:0	4	video
op	84:59	0:0	4	.
water	84:60	0:0	4	i_width
stmts	85:8	85:34	3	
water	85:8	0:0	4	p_filter
op	85:16	0:0	4	->
water	85:18	0:0	4	p_sys
op	85:23	0:0	4	->
water	85:25	0:0	4	xinc
op	85:30	0:0	4	=
op	85:32	0:0	4	-
water	85:33	0:0	4	1
water	85:34	0:0	4	;
if	86:4	87:33	2	(p_filter -> p_sys -> x <= 0)
cond	86:8	86:30	3	p_filter -> p_sys -> x <= 0
water	86:8	0:0	4	p_filter
op	86:16	0:0	4	->
water	86:18	0:0	4	p_sys
op	86:23	0:0	4	->
water	86:25	0:0	4	x
op	86:27	0:0	4	<=
water	86:30	0:0	4	0
stmts	87:8	87:33	3	
water	87:8	0:0	4	p_filter
op	87:16	0:0	4	->
water	87:18	0:0	4	p_sys
op	87:23	0:0	4	->
water	87:25	0:0	4	xinc
op	87:30	0:0	4	=
water	87:32	0:0	4	1
water	87:33	0:0	4	;
if	88:4	89:66	2	(p_filter -> p_sys -> x * 2 + w >= p_filter -> fmt_out . video . i_width)
cond	88:8	88:60	3	p_filter -> p_sys -> x * 2 + w >= p_filter -> fmt_out . video . i_width
water	88:8	0:0	4	p_filter
op	88:16	0:0	4	->
water	88:18	0:0	4	p_sys
op	88:23	0:0	4	->
water	88:25	0:0	4	x
op	88:26	0:0	4	*
water	88:27	0:0	4	2
op	88:29	0:0	4	+
water	88:31	0:0	4	w
op	88:33	0:0	4	>=
water	88:36	0:0	4	p_filter
op	88:44	0:0	4	->
water	88:46	0:0	4	fmt_out
op	88:53	0:0	4	.
water	88:54	0:0	4	video
op	88:59	0:0	4	.
water	88:60	0:0	4	i_width
stmts	89:8	89:66	3	
water	89:8	0:0	4	p_filter
op	89:16	0:0	4	->
water	89:18	0:0	4	p_sys
op	89:23	0:0	4	->
water	89:25	0:0	4	x
op	89:27	0:0	4	=
water	89:29	0:0	4	(
water	89:30	0:0	4	p_filter
op	89:38	0:0	4	->
water	89:40	0:0	4	fmt_out
op	89:47	0:0	4	.
water	89:48	0:0	4	video
op	89:53	0:0	4	.
water	89:54	0:0	4	i_width
op	89:61	0:0	4	-
water	89:62	0:0	4	w
water	89:63	0:0	4	)
op	89:64	0:0	4	/
water	89:65	0:0	4	2
water	89:66	0:0	4	;
if	90:4	91:67	2	(p_filter -> p_sys -> y * 2 + h >= p_filter -> fmt_out . video . i_height)
cond	90:8	90:60	3	p_filter -> p_sys -> y * 2 + h >= p_filter -> fmt_out . video . i_height
water	90:8	0:0	4	p_filter
op	90:16	0:0	4	->
water	90:18	0:0	4	p_sys
op	90:23	0:0	4	->
water	90:25	0:0	4	y
op	90:26	0:0	4	*
water	90:27	0:0	4	2
op	90:29	0:0	4	+
water	90:31	0:0	4	h
op	90:33	0:0	4	>=
water	90:36	0:0	4	p_filter
op	90:44	0:0	4	->
water	90:46	0:0	4	fmt_out
op	90:53	0:0	4	.
water	90:54	0:0	4	video
op	90:59	0:0	4	.
water	90:60	0:0	4	i_height
stmts	91:8	91:67	3	
water	91:8	0:0	4	p_filter
op	91:16	0:0	4	->
water	91:18	0:0	4	p_sys
op	91:23	0:0	4	->
water	91:25	0:0	4	y
op	91:27	0:0	4	=
water	91:29	0:0	4	(
water	91:30	0:0	4	p_filter
op	91:38	0:0	4	->
water	91:40	0:0	4	fmt_out
op	91:47	0:0	4	.
water	91:48	0:0	4	video
op	91:53	0:0	4	.
water	91:54	0:0	4	i_height
op	91:62	0:0	4	-
water	91:63	0:0	4	h
water	91:64	0:0	4	)
op	91:65	0:0	4	/
water	91:66	0:0	4	2
water	91:67	0:0	4	;
if	92:4	93:34	2	(p_filter -> p_sys -> y * 2 + h >= p_filter -> fmt_out . video . i_height)
cond	92:8	92:60	3	p_filter -> p_sys -> y * 2 + h >= p_filter -> fmt_out . video . i_height
water	92:8	0:0	4	p_filter
op	92:16	0:0	4	->
water	92:18	0:0	4	p_sys
op	92:23	0:0	4	->
water	92:25	0:0	4	y
op	92:26	0:0	4	*
water	92:27	0:0	4	2
op	92:29	0:0	4	+
water	92:31	0:0	4	h
op	92:33	0:0	4	>=
water	92:36	0:0	4	p_filter
op	92:44	0:0	4	->
water	92:46	0:0	4	fmt_out
op	92:53	0:0	4	.
water	92:54	0:0	4	video
op	92:59	0:0	4	.
water	92:60	0:0	4	i_height
stmts	93:8	93:34	3	
water	93:8	0:0	4	p_filter
op	93:16	0:0	4	->
water	93:18	0:0	4	p_sys
op	93:23	0:0	4	->
water	93:25	0:0	4	yinc
op	93:30	0:0	4	=
op	93:32	0:0	4	-
water	93:33	0:0	4	1
water	93:34	0:0	4	;
if	94:4	95:33	2	(p_filter -> p_sys -> y <= 0)
cond	94:8	94:30	3	p_filter -> p_sys -> y <= 0
water	94:8	0:0	4	p_filter
op	94:16	0:0	4	->
water	94:18	0:0	4	p_sys
op	94:23	0:0	4	->
water	94:25	0:0	4	y
op	94:27	0:0	4	<=
water	94:30	0:0	4	0
stmts	95:8	95:33	3	
water	95:8	0:0	4	p_filter
op	95:16	0:0	4	->
water	95:18	0:0	4	p_sys
op	95:23	0:0	4	->
water	95:25	0:0	4	yinc
op	95:30	0:0	4	=
water	95:32	0:0	4	1
water	95:33	0:0	4	;
for	96:4	106:4	2	(y = 0 ;y < 16;y ++)
forinit	96:9	96:14	3	y = 0 ;
water	96:9	0:0	4	y
op	96:11	0:0	4	=
water	96:13	0:0	4	0
water	96:14	0:0	4	;
cond	96:16	96:19	3	y < 16
water	96:16	0:0	4	y
op	96:17	0:0	4	<
water	96:19	0:0	4	16
forexpr	96:23	96:24	3	y ++
water	96:23	0:0	4	y
op	96:24	0:0	4	++
stmts	97:4	106:4	3	
water	97:4	0:0	4	{
if	98:8	99:35	4	(p_filter -> p_sys -> v == 0 && p_filter -> p_sys -> u != 0)
cond	98:12	98:61	5	p_filter -> p_sys -> v == 0 && p_filter -> p_sys -> u != 0
water	98:12	0:0	6	p_filter
op	98:20	0:0	6	->
water	98:22	0:0	6	p_sys
op	98:27	0:0	6	->
water	98:29	0:0	6	v
op	98:31	0:0	6	==
water	98:34	0:0	6	0
op	98:36	0:0	6	&&
water	98:39	0:0	6	p_filter
op	98:47	0:0	6	->
water	98:49	0:0	6	p_sys
op	98:54	0:0	6	->
water	98:56	0:0	6	u
op	98:58	0:0	6	!=
water	98:61	0:0	6	0
stmts	99:12	99:35	5	
water	99:12	0:0	6	p_filter
op	99:20	0:0	6	->
water	99:22	0:0	6	p_sys
op	99:27	0:0	6	->
water	99:29	0:0	6	u
op	99:31	0:0	6	-=
water	99:34	0:0	6	1
water	99:35	0:0	6	;
else	100:8	101:35	4
stmts	100:13	101:35	5	
if	100:13	101:35	6	(p_filter -> p_sys -> u == 0 xff)
cond	100:17	100:40	7	p_filter -> p_sys -> u == 0 xff
water	100:17	0:0	8	p_filter
op	100:25	0:0	8	->
water	100:27	0:0	8	p_sys
op	100:32	0:0	8	->
water	100:34	0:0	8	u
op	100:36	0:0	8	==
water	100:39	0:0	8	0
water	100:40	0:0	8	xff
stmts	101:12	101:35	7	
water	101:12	0:0	8	p_filter
op	101:20	0:0	8	->
water	101:22	0:0	8	p_sys
op	101:27	0:0	8	->
water	101:29	0:0	8	v
op	101:31	0:0	8	-=
water	101:34	0:0	8	1
water	101:35	0:0	8	;
else	102:8	103:35	4
stmts	102:13	103:35	5	
if	102:13	103:35	6	(p_filter -> p_sys -> v == 0 xff)
cond	102:17	102:40	7	p_filter -> p_sys -> v == 0 xff
water	102:17	0:0	8	p_filter
op	102:25	0:0	8	->
water	102:27	0:0	8	p_sys
op	102:32	0:0	8	->
water	102:34	0:0	8	v
op	102:36	0:0	8	==
water	102:39	0:0	8	0
water	102:40	0:0	8	xff
stmts	103:12	103:35	7	
water	103:12	0:0	8	p_filter
op	103:20	0:0	8	->
water	103:22	0:0	8	p_sys
op	103:27	0:0	8	->
water	103:29	0:0	8	u
op	103:31	0:0	8	+=
water	103:34	0:0	8	1
water	103:35	0:0	8	;
else	104:8	105:35	4
stmts	104:13	105:35	5	
if	104:13	105:35	6	(p_filter -> p_sys -> u == 0)
cond	104:17	104:39	7	p_filter -> p_sys -> u == 0
water	104:17	0:0	8	p_filter
op	104:25	0:0	8	->
water	104:27	0:0	8	p_sys
op	104:32	0:0	8	->
water	104:34	0:0	8	u
op	104:36	0:0	8	==
water	104:39	0:0	8	0
stmts	105:12	105:35	7	
water	105:12	0:0	8	p_filter
op	105:20	0:0	8	->
water	105:22	0:0	8	p_sys
op	105:27	0:0	8	->
water	105:29	0:0	8	v
op	105:31	0:0	8	+=
water	105:34	0:0	8	1
water	105:35	0:0	8	;
water	106:4	0:0	4	}
return	107:4	107:48	2	CopyInfoAndRelease(p_outpic,p_pic)
call	107:11	107:47	3	CopyInfoAndRelease
arg	107:31	107:39	4	p_outpic
water	107:31	0:0	5	p_outpic
arg	107:41	107:47	4	p_pic
water	107:41	0:0	5	p_pic
