func	2:0	166:0	0	static int	Open
params	2:15	0:0	1	
param	2:16	2:36	2	vlc_object_t *	p_this
stmnts	0:0	165:23	1	
decl	4:4	4:49	2	vout_display_t	*vd
op	4:23	0:0	2	=
water	4:25	0:0	2	(
water	4:26	0:0	2	vout_display_t
op	4:41	0:0	2	*
water	4:42	0:0	2	)
water	4:43	0:0	2	p_this
decl	5:4	5:30	2	vout_display_t	*p_dec
op	5:26	0:0	2	=
water	5:28	0:0	2	vd
water	6:4	0:0	2	char
water	6:9	0:0	2	ppsz_components
op	6:24	0:0	2	[
water	6:25	0:0	2	MAX_COMPONENTS_LIST_SIZE
op	6:49	0:0	2	]
op	6:50	0:0	2	[
water	6:51	0:0	2	OMX_MAX_STRINGNAME_SIZE
op	6:74	0:0	2	]
water	6:75	0:0	2	;
decl	7:4	7:31	2	picture_t	**pictures
op	7:25	0:0	2	=
water	7:27	0:0	2	NULL
decl	8:4	8:37	2	OMX_PARAM_PORTDEFINITIONTYPE	*def
water	9:4	0:0	2	static
water	9:11	0:0	2	OMX_CALLBACKTYPE
water	9:28	0:0	2	callbacks
op	9:38	0:0	2	=
water	10:8	0:0	2	{
water	10:10	0:0	2	OmxEventHandler
water	10:25	0:0	2	,
water	10:27	0:0	2	OmxEmptyBufferDone
water	10:45	0:0	2	,
water	10:47	0:0	2	OmxFillBufferDone
water	10:65	0:0	2	}
water	10:66	0:0	2	;
if	11:4	12:27	2	(InitOmxCore (p_this ) != VLC_SUCCESS)
cond	11:8	11:31	3	InitOmxCore (p_this ) != VLC_SUCCESS
call	11:8	11:26	4	InitOmxCore
arg	11:20	11:26	5	p_this
water	11:20	0:0	6	p_this
op	11:28	0:0	4	!=
water	11:31	0:0	4	VLC_SUCCESS
stmts	12:8	12:27	3	
return	12:8	12:27	4	VLC_EGENERIC
water	12:15	0:0	5	VLC_EGENERIC
decl	13:4	13:81	2	int	components
op	13:19	0:0	2	=
call	13:21	13:80	3	CreateComponentsList
arg	13:42	13:48	4	p_this
water	13:42	0:0	5	p_this
arg	13:50	13:63	4	"iv_renderer"
water	13:50	0:0	5	"iv_renderer"
arg	13:65	13:80	4	ppsz_components
water	13:65	0:0	5	ppsz_components
if	14:4	17:4	2	(components <= 0)
cond	14:8	14:22	3	components <= 0
water	14:8	0:0	4	components
op	14:19	0:0	4	<=
water	14:22	0:0	4	0
stmts	14:25	17:4	3	
water	14:25	0:0	4	{
call	15:8	15:22	4	DeinitOmxCore
water	15:23	0:0	4	;
return	16:8	16:27	4	VLC_EGENERIC
water	16:15	0:0	5	VLC_EGENERIC
water	17:4	0:0	4	}
decl	19:4	19:86	2	vout_display_sys_t	*p_sys
op	19:30	0:0	2	=
water	19:32	0:0	2	(
water	19:33	0:0	2	struct
water	19:40	0:0	2	vout_display_sys_t
op	19:58	0:0	2	*
water	19:59	0:0	2	)
call	19:61	19:85	3	calloc
arg	19:68	19:69	4	1
water	19:68	0:0	5	1
arg	19:71	19:85	4	sizeof(*p_sys)
op	19:71	0:0	5	sizeof
water	19:77	0:0	5	(
op	19:78	0:0	5	*
water	19:79	0:0	5	p_sys
water	19:84	0:0	5	)
if	20:4	23:4	2	(! p_sys)
cond	20:8	20:9	3	! p_sys
op	20:8	0:0	4	!
water	20:9	0:0	4	p_sys
stmts	20:16	23:4	3	
water	20:16	0:0	4	{
call	21:8	21:22	4	DeinitOmxCore
water	21:23	0:0	4	;
return	22:8	22:25	4	VLC_ENOMEM
water	22:15	0:0	5	VLC_ENOMEM
water	23:4	0:0	4	}
water	24:4	0:0	2	vd
op	24:6	0:0	2	->
water	24:8	0:0	2	sys
op	24:16	0:0	2	=
water	24:18	0:0	2	p_sys
water	24:23	0:0	2	;
call	25:4	25:51	2	strcpy
arg	25:11	25:31	3	p_sys->psz_component
water	25:11	0:0	4	p_sys
op	25:16	0:0	4	->
water	25:18	0:0	4	psz_component
arg	25:33	25:51	3	ppsz_components[0]
water	25:33	0:0	4	ppsz_components
op	25:48	0:0	4	[
water	25:49	0:0	4	0
op	25:50	0:0	4	]
water	25:52	0:0	2	;
decl	27:4	28:81	2	OMX_ERRORTYPE	omx_error
op	27:28	0:0	2	=
call	27:30	28:80	3	pf_get_handle
arg	27:44	27:62	4	&p_sys->omx_handle
op	27:44	0:0	5	&
water	27:45	0:0	5	p_sys
op	27:50	0:0	5	->
water	27:52	0:0	5	omx_handle
arg	28:44	28:64	4	p_sys->psz_component
water	28:44	0:0	5	p_sys
op	28:49	0:0	5	->
water	28:51	0:0	5	psz_component
arg	28:66	28:68	4	vd
water	28:66	0:0	5	vd
arg	28:70	28:80	4	&callbacks
op	28:70	0:0	5	&
water	28:71	0:0	5	callbacks
call	29:4	30:73	2	CHECK_ERROR
arg	29:16	29:25	3	omx_error
water	29:16	0:0	4	omx_error
arg	29:27	29:62	3	"OMX_GetHandle(%s) failed (%x: %s)"
water	29:27	0:0	4	"OMX_GetHandle(%s) failed (%x: %s)"
arg	30:16	30:36	3	p_sys->psz_component
water	30:16	0:0	4	p_sys
op	30:21	0:0	4	->
water	30:23	0:0	4	psz_component
arg	30:38	30:47	3	omx_error
water	30:38	0:0	4	omx_error
arg	30:49	30:73	3	ErrorToString(omx_error)
call	30:49	30:72	4	ErrorToString
arg	30:63	30:72	5	omx_error
water	30:63	0:0	6	omx_error
water	30:74	0:0	2	;
call	31:4	31:41	2	InitOmxEventQueue
arg	31:22	31:41	3	&p_sys->event_queue
op	31:22	0:0	4	&
water	31:23	0:0	4	p_sys
op	31:28	0:0	4	->
water	31:30	0:0	4	event_queue
water	31:42	0:0	2	;
call	32:4	32:42	2	vlc_mutex_init
arg	32:20	32:42	3	&p_sys->port.fifo.lock
op	32:20	0:0	4	&
water	32:21	0:0	4	p_sys
op	32:26	0:0	4	->
water	32:28	0:0	4	port
op	32:32	0:0	4	.
water	32:33	0:0	4	fifo
op	32:37	0:0	4	.
water	32:38	0:0	4	lock
water	32:43	0:0	2	;
call	33:4	33:41	2	vlc_cond_init
arg	33:19	33:41	3	&p_sys->port.fifo.wait
op	33:19	0:0	4	&
water	33:20	0:0	4	p_sys
op	33:25	0:0	4	->
water	33:27	0:0	4	port
op	33:31	0:0	4	.
water	33:32	0:0	4	fifo
op	33:36	0:0	4	.
water	33:37	0:0	4	wait
water	33:42	0:0	2	;
water	34:4	0:0	2	p_sys
op	34:9	0:0	2	->
water	34:11	0:0	2	port
op	34:15	0:0	2	.
water	34:16	0:0	2	fifo
op	34:20	0:0	2	.
water	34:21	0:0	2	offset
op	34:28	0:0	2	=
call	34:30	34:79	2	offsetof
arg	34:39	34:59	3	OMX_BUFFERHEADERTYPE
water	34:39	0:0	4	OMX_BUFFERHEADERTYPE
arg	34:61	34:79	3	pOutputPortPrivate
water	34:61	0:0	4	pOutputPortPrivate
op	34:81	0:0	2	/
op	34:83	0:0	2	sizeof
water	34:89	0:0	2	(
water	34:90	0:0	2	void
op	34:95	0:0	2	*
water	34:96	0:0	2	)
water	34:97	0:0	2	;
water	35:4	0:0	2	p_sys
op	35:9	0:0	2	->
water	35:11	0:0	2	port
op	35:15	0:0	2	.
water	35:16	0:0	2	fifo
op	35:20	0:0	2	.
water	35:21	0:0	2	pp_last
op	35:29	0:0	2	=
op	35:31	0:0	2	&
water	35:32	0:0	2	p_sys
op	35:37	0:0	2	->
water	35:39	0:0	2	port
op	35:43	0:0	2	.
water	35:44	0:0	2	fifo
op	35:48	0:0	2	.
water	35:49	0:0	2	p_first
water	35:56	0:0	2	;
water	36:4	0:0	2	p_sys
op	36:9	0:0	2	->
water	36:11	0:0	2	port
op	36:15	0:0	2	.
water	36:16	0:0	2	b_direct
op	36:25	0:0	2	=
water	36:27	0:0	2	false
water	36:32	0:0	2	;
water	37:4	0:0	2	p_sys
op	37:9	0:0	2	->
water	37:11	0:0	2	port
op	37:15	0:0	2	.
water	37:16	0:0	2	b_flushed
op	37:26	0:0	2	=
water	37:28	0:0	2	true
water	37:32	0:0	2	;
decl	38:4	38:29	2	OMX_PORT_PARAM_TYPE	param
call	39:4	39:28	2	OMX_INIT_STRUCTURE
arg	39:23	39:28	3	param
water	39:23	0:0	4	param
water	39:29	0:0	2	;
water	40:4	0:0	2	omx_error
op	40:14	0:0	2	=
call	40:16	40:83	2	OMX_GetParameter
arg	40:33	40:50	3	p_sys->omx_handle
water	40:33	0:0	4	p_sys
op	40:38	0:0	4	->
water	40:40	0:0	4	omx_handle
arg	40:52	40:75	3	OMX_IndexParamVideoInit
water	40:52	0:0	4	OMX_IndexParamVideoInit
arg	40:77	40:83	3	&param
op	40:77	0:0	4	&
water	40:78	0:0	4	param
water	40:84	0:0	2	;
call	41:4	42:51	2	CHECK_ERROR
arg	41:16	41:25	3	omx_error
water	41:16	0:0	4	omx_error
arg	41:27	41:86	3	"OMX_GetParameter(OMX_IndexParamVideoInit) failed (%x: %s)"
water	41:27	0:0	4	"OMX_GetParameter(OMX_IndexParamVideoInit) failed (%x: %s)"
arg	42:16	42:25	3	omx_error
water	42:16	0:0	4	omx_error
arg	42:27	42:51	3	ErrorToString(omx_error)
call	42:27	42:50	4	ErrorToString
arg	42:41	42:50	5	omx_error
water	42:41	0:0	6	omx_error
water	42:52	0:0	2	;
water	43:4	0:0	2	p_sys
op	43:9	0:0	2	->
water	43:11	0:0	2	port
op	43:15	0:0	2	.
water	43:16	0:0	2	i_port_index
op	43:29	0:0	2	=
water	43:31	0:0	2	param
op	43:36	0:0	2	.
water	43:37	0:0	2	nStartPortNumber
water	43:53	0:0	2	;
water	44:4	0:0	2	p_sys
op	44:9	0:0	2	->
water	44:11	0:0	2	port
op	44:15	0:0	2	.
water	44:16	0:0	2	b_valid
op	44:24	0:0	2	=
water	44:26	0:0	2	true
water	44:30	0:0	2	;
water	45:4	0:0	2	p_sys
op	45:9	0:0	2	->
water	45:11	0:0	2	port
op	45:15	0:0	2	.
water	45:16	0:0	2	omx_handle
op	45:27	0:0	2	=
water	45:29	0:0	2	p_sys
op	45:34	0:0	2	->
water	45:36	0:0	2	omx_handle
water	45:46	0:0	2	;
water	46:4	0:0	2	def
op	46:8	0:0	2	=
op	46:10	0:0	2	&
water	46:11	0:0	2	p_sys
op	46:16	0:0	2	->
water	46:18	0:0	2	port
op	46:22	0:0	2	.
water	46:23	0:0	2	definition
water	46:33	0:0	2	;
call	47:4	47:27	2	OMX_INIT_STRUCTURE
arg	47:23	47:27	3	*def
op	47:23	0:0	4	*
water	47:24	0:0	4	def
water	47:28	0:0	2	;
water	48:4	0:0	2	def
op	48:7	0:0	2	->
water	48:9	0:0	2	nPortIndex
op	48:20	0:0	2	=
water	48:22	0:0	2	p_sys
op	48:27	0:0	2	->
water	48:29	0:0	2	port
op	48:33	0:0	2	.
water	48:34	0:0	2	i_port_index
water	48:46	0:0	2	;
water	49:4	0:0	2	omx_error
op	49:14	0:0	2	=
call	49:16	49:85	2	OMX_GetParameter
arg	49:33	49:50	3	p_sys->omx_handle
water	49:33	0:0	4	p_sys
op	49:38	0:0	4	->
water	49:40	0:0	4	omx_handle
arg	49:52	49:80	3	OMX_IndexParamPortDefinition
water	49:52	0:0	4	OMX_IndexParamPortDefinition
arg	49:82	49:85	3	def
water	49:82	0:0	4	def
water	49:86	0:0	2	;
call	50:4	51:51	2	CHECK_ERROR
arg	50:16	50:25	3	omx_error
water	50:16	0:0	4	omx_error
arg	50:27	50:91	3	"OMX_GetParameter(OMX_IndexParamPortDefinition) failed (%x: %s)"
water	50:27	0:0	4	"OMX_GetParameter(OMX_IndexParamPortDefinition) failed (%x: %s)"
arg	51:16	51:25	3	omx_error
water	51:16	0:0	4	omx_error
arg	51:27	51:51	3	ErrorToString(omx_error)
call	51:27	51:50	4	ErrorToString
arg	51:41	51:50	5	omx_error
water	51:41	0:0	6	omx_error
water	51:52	0:0	2	;
water	53:4	0:0	2	def
op	53:7	0:0	2	->
water	53:9	0:0	2	format
op	53:15	0:0	2	.
water	53:16	0:0	2	video
op	53:21	0:0	2	.
water	53:22	0:0	2	nFrameWidth
op	53:34	0:0	2	=
water	53:36	0:0	2	vd
op	53:38	0:0	2	->
water	53:40	0:0	2	fmt
op	53:43	0:0	2	.
water	53:44	0:0	2	i_width
water	53:51	0:0	2	;
water	54:4	0:0	2	def
op	54:7	0:0	2	->
water	54:9	0:0	2	format
op	54:15	0:0	2	.
water	54:16	0:0	2	video
op	54:21	0:0	2	.
water	54:22	0:0	2	nFrameHeight
op	54:35	0:0	2	=
water	54:37	0:0	2	vd
op	54:39	0:0	2	->
water	54:41	0:0	2	fmt
op	54:44	0:0	2	.
water	54:45	0:0	2	i_height
water	54:53	0:0	2	;
water	55:4	0:0	2	def
op	55:7	0:0	2	->
water	55:9	0:0	2	format
op	55:15	0:0	2	.
water	55:16	0:0	2	video
op	55:21	0:0	2	.
water	55:22	0:0	2	nStride
op	55:30	0:0	2	=
water	55:32	0:0	2	0
water	55:33	0:0	2	;
water	56:4	0:0	2	def
op	56:7	0:0	2	->
water	56:9	0:0	2	format
op	56:15	0:0	2	.
water	56:16	0:0	2	video
op	56:21	0:0	2	.
water	56:22	0:0	2	nSliceHeight
op	56:35	0:0	2	=
water	56:37	0:0	2	0
water	56:38	0:0	2	;
water	57:4	0:0	2	p_sys
op	57:9	0:0	2	->
water	57:11	0:0	2	port
op	57:15	0:0	2	.
water	57:16	0:0	2	definition
op	57:26	0:0	2	.
water	57:27	0:0	2	format
op	57:33	0:0	2	.
water	57:34	0:0	2	video
op	57:39	0:0	2	.
water	57:40	0:0	2	eColorFormat
op	57:53	0:0	2	=
water	57:55	0:0	2	OMX_COLOR_FormatYUV420PackedPlanar
water	57:89	0:0	2	;
if	58:4	60:4	2	(!strcmp (p_sys -> psz_component ,"OMX.broadcom.video_render" ))
cond	58:8	58:65	3	!strcmp (p_sys -> psz_component ,"OMX.broadcom.video_render" )
op	58:8	0:0	4	!
call	58:9	58:65	4	strcmp
arg	58:16	58:36	5	p_sys->psz_component
water	58:16	0:0	6	p_sys
op	58:21	0:0	6	->
water	58:23	0:0	6	psz_component
arg	58:38	58:65	5	"OMX.broadcom.video_render"
water	58:38	0:0	6	"OMX.broadcom.video_render"
stmts	58:68	60:4	3	
water	58:68	0:0	4	{
water	59:8	0:0	4	def
op	59:11	0:0	4	->
water	59:13	0:0	4	format
op	59:19	0:0	4	.
water	59:20	0:0	4	video
op	59:25	0:0	4	.
water	59:26	0:0	4	nSliceHeight
op	59:39	0:0	4	=
call	59:41	59:81	4	ALIGN
arg	59:47	59:77	5	def->format.video.nFrameHeight
water	59:47	0:0	6	def
op	59:50	0:0	6	->
water	59:52	0:0	6	format
op	59:58	0:0	6	.
water	59:59	0:0	6	video
op	59:64	0:0	6	.
water	59:65	0:0	6	nFrameHeight
arg	59:79	59:81	5	16
water	59:79	0:0	6	16
water	59:82	0:0	4	;
water	60:4	0:0	4	}
water	61:4	0:0	2	omx_error
op	61:14	0:0	2	=
call	61:16	61:105	2	OMX_SetParameter
arg	61:33	61:50	3	p_sys->omx_handle
water	61:33	0:0	4	p_sys
op	61:38	0:0	4	->
water	61:40	0:0	4	omx_handle
arg	61:52	61:80	3	OMX_IndexParamPortDefinition
water	61:52	0:0	4	OMX_IndexParamPortDefinition
arg	61:82	61:105	3	&p_sys->port.definition
op	61:82	0:0	4	&
water	61:83	0:0	4	p_sys
op	61:88	0:0	4	->
water	61:90	0:0	4	port
op	61:94	0:0	4	.
water	61:95	0:0	4	definition
water	61:106	0:0	2	;
call	62:4	63:51	2	CHECK_ERROR
arg	62:16	62:25	3	omx_error
water	62:16	0:0	4	omx_error
arg	62:27	62:91	3	"OMX_SetParameter(OMX_IndexParamPortDefinition) failed (%x: %s)"
water	62:27	0:0	4	"OMX_SetParameter(OMX_IndexParamPortDefinition) failed (%x: %s)"
arg	63:16	63:25	3	omx_error
water	63:16	0:0	4	omx_error
arg	63:27	63:51	3	ErrorToString(omx_error)
call	63:27	63:50	4	ErrorToString
arg	63:41	63:50	5	omx_error
water	63:41	0:0	6	omx_error
water	63:52	0:0	2	;
call	64:4	64:93	2	OMX_GetParameter
arg	64:21	64:38	3	p_sys->omx_handle
water	64:21	0:0	4	p_sys
op	64:26	0:0	4	->
water	64:28	0:0	4	omx_handle
arg	64:40	64:68	3	OMX_IndexParamPortDefinition
water	64:40	0:0	4	OMX_IndexParamPortDefinition
arg	64:70	64:93	3	&p_sys->port.definition
op	64:70	0:0	4	&
water	64:71	0:0	4	p_sys
op	64:76	0:0	4	->
water	64:78	0:0	4	port
op	64:82	0:0	4	.
water	64:83	0:0	4	definition
water	64:94	0:0	2	;
if	65:4	66:65	2	(def -> format . video . nStride < ( int ) def -> format . video . nFrameWidth)
cond	65:8	65:60	3	def -> format . video . nStride < ( int ) def -> format . video . nFrameWidth
water	65:8	0:0	4	def
op	65:11	0:0	4	->
water	65:13	0:0	4	format
op	65:19	0:0	4	.
water	65:20	0:0	4	video
op	65:25	0:0	4	.
water	65:26	0:0	4	nStride
op	65:34	0:0	4	<
water	65:36	0:0	4	(
water	65:37	0:0	4	int
water	65:40	0:0	4	)
water	65:42	0:0	4	def
op	65:45	0:0	4	->
water	65:47	0:0	4	format
op	65:53	0:0	4	.
water	65:54	0:0	4	video
op	65:59	0:0	4	.
water	65:60	0:0	4	nFrameWidth
stmts	66:8	66:65	3	
water	66:8	0:0	4	def
op	66:11	0:0	4	->
water	66:13	0:0	4	format
op	66:19	0:0	4	.
water	66:20	0:0	4	video
op	66:25	0:0	4	.
water	66:26	0:0	4	nStride
op	66:34	0:0	4	=
water	66:36	0:0	4	def
op	66:39	0:0	4	->
water	66:41	0:0	4	format
op	66:47	0:0	4	.
water	66:48	0:0	4	video
op	66:53	0:0	4	.
water	66:54	0:0	4	nFrameWidth
water	66:65	0:0	4	;
if	67:4	68:71	2	(def -> format . video . nSliceHeight < def -> format . video . nFrameHeight)
cond	67:8	67:59	3	def -> format . video . nSliceHeight < def -> format . video . nFrameHeight
water	67:8	0:0	4	def
op	67:11	0:0	4	->
water	67:13	0:0	4	format
op	67:19	0:0	4	.
water	67:20	0:0	4	video
op	67:25	0:0	4	.
water	67:26	0:0	4	nSliceHeight
op	67:39	0:0	4	<
water	67:41	0:0	4	def
op	67:44	0:0	4	->
water	67:46	0:0	4	format
op	67:52	0:0	4	.
water	67:53	0:0	4	video
op	67:58	0:0	4	.
water	67:59	0:0	4	nFrameHeight
stmts	68:8	68:71	3	
water	68:8	0:0	4	def
op	68:11	0:0	4	->
water	68:13	0:0	4	format
op	68:19	0:0	4	.
water	68:20	0:0	4	video
op	68:25	0:0	4	.
water	68:26	0:0	4	nSliceHeight
op	68:39	0:0	4	=
water	68:41	0:0	4	def
op	68:44	0:0	4	->
water	68:46	0:0	4	format
op	68:52	0:0	4	.
water	68:53	0:0	4	video
op	68:58	0:0	4	.
water	68:59	0:0	4	nFrameHeight
water	68:71	0:0	4	;
water	69:4	0:0	2	p_sys
op	69:9	0:0	2	->
water	69:11	0:0	2	port
op	69:15	0:0	2	.
water	69:16	0:0	2	pp_buffers
op	69:27	0:0	2	=
call	70:12	71:48	2	malloc
arg	70:19	71:48	3	p_sys->port.definition.nBufferCountActual*sizeof(OMX_BUFFERHEADERTYPE*)
water	70:19	0:0	4	p_sys
op	70:24	0:0	4	->
water	70:26	0:0	4	port
op	70:30	0:0	4	.
water	70:31	0:0	4	definition
op	70:41	0:0	4	.
water	70:42	0:0	4	nBufferCountActual
op	70:61	0:0	4	*
op	71:19	0:0	4	sizeof
water	71:25	0:0	4	(
water	71:26	0:0	4	OMX_BUFFERHEADERTYPE
op	71:46	0:0	4	*
water	71:47	0:0	4	)
water	71:49	0:0	2	;
water	72:4	0:0	2	p_sys
op	72:9	0:0	2	->
water	72:11	0:0	2	port
op	72:15	0:0	2	.
water	72:16	0:0	2	i_buffers
op	72:26	0:0	2	=
water	72:28	0:0	2	p_sys
op	72:33	0:0	2	->
water	72:35	0:0	2	port
op	72:39	0:0	2	.
water	72:40	0:0	2	definition
op	72:50	0:0	2	.
water	72:51	0:0	2	nBufferCountActual
water	72:69	0:0	2	;
water	73:4	0:0	2	omx_error
op	73:14	0:0	2	=
call	73:16	73:88	2	OMX_SendCommand
arg	73:32	73:49	3	p_sys->omx_handle
water	73:32	0:0	4	p_sys
op	73:37	0:0	4	->
water	73:39	0:0	4	omx_handle
arg	73:51	73:70	3	OMX_CommandStateSet
water	73:51	0:0	4	OMX_CommandStateSet
arg	73:72	73:85	3	OMX_StateIdle
water	73:72	0:0	4	OMX_StateIdle
arg	73:87	73:88	3	0
water	73:87	0:0	4	0
water	73:89	0:0	2	;
call	74:4	75:51	2	CHECK_ERROR
arg	74:16	74:25	3	omx_error
water	74:16	0:0	4	omx_error
arg	74:27	74:69	3	"OMX_CommandStateSet Idle failed (%x: %s)"
water	74:27	0:0	4	"OMX_CommandStateSet Idle failed (%x: %s)"
arg	75:16	75:25	3	omx_error
water	75:16	0:0	4	omx_error
arg	75:27	75:51	3	ErrorToString(omx_error)
call	75:27	75:50	4	ErrorToString
arg	75:41	75:50	5	omx_error
water	75:41	0:0	6	omx_error
water	75:52	0:0	2	;
decl	76:4	76:18	2	unsigned int	i
for	77:4	84:4	2	(i = 0 ;i < p_sys -> port . i_buffers;i ++)
forinit	77:9	77:14	3	i = 0 ;
water	77:9	0:0	4	i
op	77:11	0:0	4	=
water	77:13	0:0	4	0
water	77:14	0:0	4	;
cond	77:16	77:32	3	i < p_sys -> port . i_buffers
water	77:16	0:0	4	i
op	77:18	0:0	4	<
water	77:20	0:0	4	p_sys
op	77:25	0:0	4	->
water	77:27	0:0	4	port
op	77:31	0:0	4	.
water	77:32	0:0	4	i_buffers
forexpr	77:43	77:44	3	i ++
water	77:43	0:0	4	i
op	77:44	0:0	4	++
stmts	77:48	84:4	3	
water	77:48	0:0	4	{
water	78:8	0:0	4	omx_error
op	78:18	0:0	4	=
call	78:20	80:73	4	OMX_AllocateBuffer
arg	78:39	78:56	5	p_sys->omx_handle
water	78:39	0:0	6	p_sys
op	78:44	0:0	6	->
water	78:46	0:0	6	omx_handle
arg	78:58	78:84	5	&p_sys->port.pp_buffers[i]
op	78:58	0:0	6	&
water	78:59	0:0	6	p_sys
op	78:64	0:0	6	->
water	78:66	0:0	6	port
op	78:70	0:0	6	.
water	78:71	0:0	6	pp_buffers
op	78:81	0:0	6	[
water	78:82	0:0	6	i
op	78:83	0:0	6	]
arg	79:39	79:63	5	p_sys->port.i_port_index
water	79:39	0:0	6	p_sys
op	79:44	0:0	6	->
water	79:46	0:0	6	port
op	79:50	0:0	6	.
water	79:51	0:0	6	i_port_index
arg	79:65	79:66	5	0
water	79:65	0:0	6	0
arg	80:39	80:73	5	p_sys->port.definition.nBufferSize
water	80:39	0:0	6	p_sys
op	80:44	0:0	6	->
water	80:46	0:0	6	port
op	80:50	0:0	6	.
water	80:51	0:0	6	definition
op	80:61	0:0	6	.
water	80:62	0:0	6	nBufferSize
water	80:74	0:0	4	;
if	81:8	82:17	4	(omx_error != OMX_ErrorNone)
cond	81:12	81:25	5	omx_error != OMX_ErrorNone
water	81:12	0:0	6	omx_error
op	81:22	0:0	6	!=
water	81:25	0:0	6	OMX_ErrorNone
stmts	82:12	82:17	5	
break	82:12	82:17	6	
call	83:8	83:65	4	OMX_FIFO_PUT
arg	83:21	83:38	5	&p_sys->port.fifo
op	83:21	0:0	6	&
water	83:22	0:0	6	p_sys
op	83:27	0:0	6	->
water	83:29	0:0	6	port
op	83:33	0:0	6	.
water	83:34	0:0	6	fifo
arg	83:40	83:65	5	p_sys->port.pp_buffers[i]
water	83:40	0:0	6	p_sys
op	83:45	0:0	6	->
water	83:47	0:0	6	port
op	83:51	0:0	6	.
water	83:52	0:0	6	pp_buffers
op	83:62	0:0	6	[
water	83:63	0:0	6	i
op	83:64	0:0	6	]
water	83:66	0:0	4	;
water	84:4	0:0	4	}
if	85:4	92:4	2	(omx_error != OMX_ErrorNone)
cond	85:8	85:21	3	omx_error != OMX_ErrorNone
water	85:8	0:0	4	omx_error
op	85:18	0:0	4	!=
water	85:21	0:0	4	OMX_ErrorNone
stmts	85:36	92:4	3	
water	85:36	0:0	4	{
water	86:8	0:0	4	p_sys
op	86:13	0:0	4	->
water	86:15	0:0	4	port
op	86:19	0:0	4	.
water	86:20	0:0	4	i_buffers
op	86:30	0:0	4	=
water	86:32	0:0	4	i
water	86:33	0:0	4	;
for	87:8	88:98	4	(i = 0 ;i < p_sys -> port . i_buffers;i ++)
forinit	87:13	87:18	5	i = 0 ;
water	87:13	0:0	6	i
op	87:15	0:0	6	=
water	87:17	0:0	6	0
water	87:18	0:0	6	;
cond	87:20	87:36	5	i < p_sys -> port . i_buffers
water	87:20	0:0	6	i
op	87:22	0:0	6	<
water	87:24	0:0	6	p_sys
op	87:29	0:0	6	->
water	87:31	0:0	6	port
op	87:35	0:0	6	.
water	87:36	0:0	6	i_buffers
forexpr	87:47	87:48	5	i ++
water	87:47	0:0	6	i
op	87:48	0:0	6	++
stmts	88:12	88:98	5	
call	88:12	88:97	6	OMX_FreeBuffer
arg	88:27	88:44	7	p_sys->omx_handle
water	88:27	0:0	8	p_sys
op	88:32	0:0	8	->
water	88:34	0:0	8	omx_handle
arg	88:46	88:70	7	p_sys->port.i_port_index
water	88:46	0:0	8	p_sys
op	88:51	0:0	8	->
water	88:53	0:0	8	port
op	88:57	0:0	8	.
water	88:58	0:0	8	i_port_index
arg	88:72	88:97	7	p_sys->port.pp_buffers[i]
water	88:72	0:0	8	p_sys
op	88:77	0:0	8	->
water	88:79	0:0	8	port
op	88:83	0:0	8	.
water	88:84	0:0	8	pp_buffers
op	88:94	0:0	8	[
water	88:95	0:0	8	i
op	88:96	0:0	8	]
water	88:98	0:0	6	;
call	89:8	90:51	4	msg_Err
arg	89:16	89:18	5	vd
water	89:16	0:0	6	vd
arg	89:20	89:56	5	"OMX_AllocateBuffer failed (%x: %s)"
water	89:20	0:0	6	"OMX_AllocateBuffer failed (%x: %s)"
arg	90:16	90:25	5	omx_error
water	90:16	0:0	6	omx_error
arg	90:27	90:51	5	ErrorToString(omx_error)
call	90:27	90:50	6	ErrorToString
arg	90:41	90:50	7	omx_error
water	90:41	0:0	8	omx_error
water	90:52	0:0	4	;
goto	91:8	91:18	4	error
water	91:13	0:0	5	error
water	92:4	0:0	4	}
water	93:4	0:0	2	omx_error
op	93:14	0:0	2	=
call	93:16	93:90	2	WaitForSpecificOmxEvent
arg	93:40	93:59	3	&p_sys->event_queue
op	93:40	0:0	4	&
water	93:41	0:0	4	p_sys
op	93:46	0:0	4	->
water	93:48	0:0	4	event_queue
arg	93:61	93:81	3	OMX_EventCmdComplete
water	93:61	0:0	4	OMX_EventCmdComplete
arg	93:83	93:84	3	0
water	93:83	0:0	4	0
arg	93:86	93:87	3	0
water	93:86	0:0	4	0
arg	93:89	93:90	3	0
water	93:89	0:0	4	0
water	93:91	0:0	2	;
call	94:4	95:51	2	CHECK_ERROR
arg	94:16	94:25	3	omx_error
water	94:16	0:0	4	omx_error
arg	94:27	94:58	3	"Wait for Idle failed (%x: %s)"
water	94:27	0:0	4	"Wait for Idle failed (%x: %s)"
arg	95:16	95:25	3	omx_error
water	95:16	0:0	4	omx_error
arg	95:27	95:51	3	ErrorToString(omx_error)
call	95:27	95:50	4	ErrorToString
arg	95:41	95:50	5	omx_error
water	95:41	0:0	6	omx_error
water	95:52	0:0	2	;
water	96:4	0:0	2	omx_error
op	96:14	0:0	2	=
call	96:16	97:53	2	OMX_SendCommand
arg	96:32	96:49	3	p_sys->omx_handle
water	96:32	0:0	4	p_sys
op	96:37	0:0	4	->
water	96:39	0:0	4	omx_handle
arg	96:51	96:70	3	OMX_CommandStateSet
water	96:51	0:0	4	OMX_CommandStateSet
arg	97:32	97:50	3	OMX_StateExecuting
water	97:32	0:0	4	OMX_StateExecuting
arg	97:52	97:53	3	0
water	97:52	0:0	4	0
water	97:54	0:0	2	;
call	98:4	99:51	2	CHECK_ERROR
arg	98:16	98:25	3	omx_error
water	98:16	0:0	4	omx_error
arg	98:27	98:74	3	"OMX_CommandStateSet Executing failed (%x: %s)"
water	98:27	0:0	4	"OMX_CommandStateSet Executing failed (%x: %s)"
arg	99:16	99:25	3	omx_error
water	99:16	0:0	4	omx_error
arg	99:27	99:51	3	ErrorToString(omx_error)
call	99:27	99:50	4	ErrorToString
arg	99:41	99:50	5	omx_error
water	99:41	0:0	6	omx_error
water	99:52	0:0	2	;
water	100:4	0:0	2	omx_error
op	100:14	0:0	2	=
call	100:16	100:90	2	WaitForSpecificOmxEvent
arg	100:40	100:59	3	&p_sys->event_queue
op	100:40	0:0	4	&
water	100:41	0:0	4	p_sys
op	100:46	0:0	4	->
water	100:48	0:0	4	event_queue
arg	100:61	100:81	3	OMX_EventCmdComplete
water	100:61	0:0	4	OMX_EventCmdComplete
arg	100:83	100:84	3	0
water	100:83	0:0	4	0
arg	100:86	100:87	3	0
water	100:86	0:0	4	0
arg	100:89	100:90	3	0
water	100:89	0:0	4	0
water	100:91	0:0	2	;
call	101:4	102:51	2	CHECK_ERROR
arg	101:16	101:25	3	omx_error
water	101:16	0:0	4	omx_error
arg	101:27	101:63	3	"Wait for Executing failed (%x: %s)"
water	101:27	0:0	4	"Wait for Executing failed (%x: %s)"
arg	102:16	102:25	3	omx_error
water	102:16	0:0	4	omx_error
arg	102:27	102:51	3	ErrorToString(omx_error)
call	102:27	102:50	4	ErrorToString
arg	102:41	102:50	5	omx_error
water	102:41	0:0	6	omx_error
water	102:52	0:0	2	;
if	103:4	115:4	2	(!strcmp (p_sys -> psz_component ,"OMX.broadcom.video_render" ))
cond	103:8	103:65	3	!strcmp (p_sys -> psz_component ,"OMX.broadcom.video_render" )
op	103:8	0:0	4	!
call	103:9	103:65	4	strcmp
arg	103:16	103:36	5	p_sys->psz_component
water	103:16	0:0	6	p_sys
op	103:21	0:0	6	->
water	103:23	0:0	6	psz_component
arg	103:38	103:65	5	"OMX.broadcom.video_render"
water	103:38	0:0	6	"OMX.broadcom.video_render"
stmts	103:68	115:4	3	
water	103:68	0:0	4	{
decl	104:8	104:51	4	OMX_CONFIG_DISPLAYREGIONTYPE	config_display
call	105:8	105:41	4	OMX_INIT_STRUCTURE
arg	105:27	105:41	5	config_display
water	105:27	0:0	6	config_display
water	105:42	0:0	4	;
water	106:8	0:0	4	config_display
op	106:22	0:0	4	.
water	106:23	0:0	4	nPortIndex
op	106:34	0:0	4	=
water	106:36	0:0	4	p_sys
op	106:41	0:0	4	->
water	106:43	0:0	4	port
op	106:47	0:0	4	.
water	106:48	0:0	4	i_port_index
water	106:60	0:0	4	;
water	107:8	0:0	4	config_display
op	107:22	0:0	4	.
water	107:23	0:0	4	set
op	107:27	0:0	4	=
water	107:29	0:0	4	OMX_DISPLAY_SET_SRC_RECT
water	107:53	0:0	4	;
water	108:8	0:0	4	config_display
op	108:22	0:0	4	.
water	108:23	0:0	4	src_rect
op	108:31	0:0	4	.
water	108:32	0:0	4	width
op	108:38	0:0	4	=
water	108:40	0:0	4	vd
op	108:42	0:0	4	->
water	108:44	0:0	4	cfg
op	108:47	0:0	4	->
water	108:49	0:0	4	display
op	108:56	0:0	4	.
water	108:57	0:0	4	width
water	108:62	0:0	4	;
water	109:8	0:0	4	config_display
op	109:22	0:0	4	.
water	109:23	0:0	4	src_rect
op	109:31	0:0	4	.
water	109:32	0:0	4	height
op	109:39	0:0	4	=
water	109:41	0:0	4	vd
op	109:43	0:0	4	->
water	109:45	0:0	4	cfg
op	109:48	0:0	4	->
water	109:50	0:0	4	display
op	109:57	0:0	4	.
water	109:58	0:0	4	height
water	109:64	0:0	4	;
call	110:8	110:86	4	OMX_SetConfig
arg	110:22	110:39	5	p_sys->omx_handle
water	110:22	0:0	6	p_sys
op	110:27	0:0	6	->
water	110:29	0:0	6	omx_handle
arg	110:41	110:69	5	OMX_IndexConfigDisplayRegion
water	110:41	0:0	6	OMX_IndexConfigDisplayRegion
arg	110:71	110:86	5	&config_display
op	110:71	0:0	6	&
water	110:72	0:0	6	config_display
water	110:87	0:0	4	;
water	111:8	0:0	4	config_display
op	111:22	0:0	4	.
water	111:23	0:0	4	set
op	111:27	0:0	4	=
water	111:29	0:0	4	OMX_DISPLAY_SET_FULLSCREEN
water	111:55	0:0	4	;
water	112:8	0:0	4	config_display
op	112:22	0:0	4	.
water	112:23	0:0	4	fullscreen
op	112:34	0:0	4	=
water	112:36	0:0	4	OMX_TRUE
water	112:44	0:0	4	;
call	113:8	113:86	4	OMX_SetConfig
arg	113:22	113:39	5	p_sys->omx_handle
water	113:22	0:0	6	p_sys
op	113:27	0:0	6	->
water	113:29	0:0	6	omx_handle
arg	113:41	113:69	5	OMX_IndexConfigDisplayRegion
water	113:41	0:0	6	OMX_IndexConfigDisplayRegion
arg	113:71	113:86	5	&config_display
op	113:71	0:0	6	&
water	113:72	0:0	6	config_display
water	113:87	0:0	4	;
call	114:8	114:37	4	UpdateDisplaySize
arg	114:26	114:28	5	vd
water	114:26	0:0	6	vd
arg	114:30	114:37	5	vd->cfg
water	114:30	0:0	6	vd
op	114:32	0:0	6	->
water	114:34	0:0	6	cfg
water	114:38	0:0	4	;
water	115:4	0:0	4	}
decl	117:4	117:32	2	video_format_t	fmt
op	117:23	0:0	2	=
water	117:25	0:0	2	vd
op	117:27	0:0	2	->
water	117:29	0:0	2	fmt
water	118:4	0:0	2	fmt
op	118:7	0:0	2	.
water	118:8	0:0	2	i_chroma
op	118:17	0:0	2	=
water	118:19	0:0	2	VLC_CODEC_I420
water	118:33	0:0	2	;
call	119:4	119:28	2	video_format_FixRgb
arg	119:24	119:28	3	&fmt
op	119:24	0:0	4	&
water	119:25	0:0	4	fmt
water	119:29	0:0	2	;
water	121:4	0:0	2	vd
op	121:6	0:0	2	->
water	121:8	0:0	2	fmt
op	121:16	0:0	2	=
water	121:18	0:0	2	fmt
water	121:21	0:0	2	;
water	122:4	0:0	2	vd
op	122:6	0:0	2	->
water	122:8	0:0	2	pool
op	122:16	0:0	2	=
water	122:18	0:0	2	Pool
water	122:22	0:0	2	;
water	123:4	0:0	2	vd
op	123:6	0:0	2	->
water	123:8	0:0	2	display
op	123:16	0:0	2	=
water	123:18	0:0	2	Display
water	123:25	0:0	2	;
water	124:4	0:0	2	vd
op	124:6	0:0	2	->
water	124:8	0:0	2	control
op	124:16	0:0	2	=
water	124:18	0:0	2	Control
water	124:25	0:0	2	;
water	125:4	0:0	2	vd
op	125:6	0:0	2	->
water	125:8	0:0	2	prepare
op	125:16	0:0	2	=
water	125:18	0:0	2	NULL
water	125:22	0:0	2	;
water	126:4	0:0	2	vd
op	126:6	0:0	2	->
water	126:8	0:0	2	manage
op	126:16	0:0	2	=
water	126:18	0:0	2	NULL
water	126:22	0:0	2	;
water	128:4	0:0	2	pictures
op	128:13	0:0	2	=
call	128:15	128:62	2	calloc
arg	128:22	128:43	3	p_sys->port.i_buffers
water	128:22	0:0	4	p_sys
op	128:27	0:0	4	->
water	128:29	0:0	4	port
op	128:33	0:0	4	.
water	128:34	0:0	4	i_buffers
arg	128:45	128:62	3	sizeof(*pictures)
op	128:45	0:0	4	sizeof
water	128:51	0:0	4	(
op	128:52	0:0	4	*
water	128:53	0:0	4	pictures
water	128:61	0:0	4	)
water	128:63	0:0	2	;
if	129:4	130:18	2	(! pictures)
cond	129:8	129:9	3	! pictures
op	129:8	0:0	4	!
water	129:9	0:0	4	pictures
stmts	130:8	130:18	3	
goto	130:8	130:18	4	error
water	130:13	0:0	5	error
for	131:4	144:4	2	( unsigned int i = 0 ;i < p_sys -> port . i_buffers;i ++)
forinit	0:0	131:27	3	 unsigned int i = 0 ;
decl	131:9	131:27	4	unsigned int	i
op	131:24	0:0	4	=
water	131:26	0:0	4	0
cond	131:29	131:45	3	i < p_sys -> port . i_buffers
water	131:29	0:0	4	i
op	131:31	0:0	4	<
water	131:33	0:0	4	p_sys
op	131:38	0:0	4	->
water	131:40	0:0	4	port
op	131:44	0:0	4	.
water	131:45	0:0	4	i_buffers
forexpr	131:56	131:57	3	i ++
water	131:56	0:0	4	i
op	131:57	0:0	4	++
stmts	131:61	144:4	3	
water	131:61	0:0	4	{
decl	132:8	132:55	4	picture_sys_t	*picsys
op	132:30	0:0	4	=
call	132:32	132:54	5	malloc
arg	132:39	132:54	6	sizeof(*picsys)
op	132:39	0:0	7	sizeof
water	132:45	0:0	7	(
op	132:46	0:0	7	*
water	132:47	0:0	7	picsys
water	132:53	0:0	7	)
if	133:8	134:22	4	(unlikely (picsys == NULL ))
cond	133:12	133:35	5	unlikely (picsys == NULL )
call	133:12	133:35	6	unlikely
arg	133:21	133:35	7	picsys==NULL
water	133:21	0:0	8	picsys
op	133:28	0:0	8	==
water	133:31	0:0	8	NULL
stmts	134:12	134:22	5	
goto	134:12	134:22	6	error
water	134:17	0:0	7	error
water	135:8	0:0	4	picsys
op	135:14	0:0	4	->
water	135:16	0:0	4	sys
op	135:20	0:0	4	=
water	135:22	0:0	4	p_sys
water	135:27	0:0	4	;
decl	136:8	136:57	4	picture_resource_t	resource
op	136:36	0:0	4	=
water	136:38	0:0	4	{
op	136:40	0:0	4	.
water	136:41	0:0	4	p_sys
op	136:47	0:0	4	=
water	136:49	0:0	4	picsys
water	136:56	0:0	4	}
decl	137:8	137:69	4	picture_t	*picture
op	137:27	0:0	4	=
call	137:29	137:68	5	picture_NewFromResource
arg	137:53	137:57	6	&fmt
op	137:53	0:0	7	&
water	137:54	0:0	7	fmt
arg	137:59	137:68	6	&resource
op	137:59	0:0	7	&
water	137:60	0:0	7	resource
if	138:8	142:8	4	(unlikely (picture == NULL ))
cond	138:12	138:36	5	unlikely (picture == NULL )
call	138:12	138:36	6	unlikely
arg	138:21	138:36	7	picture==NULL
water	138:21	0:0	8	picture
op	138:29	0:0	8	==
water	138:32	0:0	8	NULL
stmts	139:8	142:8	5	
water	139:8	0:0	6	{
call	140:12	140:23	6	free
arg	140:17	140:23	7	picsys
water	140:17	0:0	8	picsys
water	140:24	0:0	6	;
goto	141:12	141:22	6	error
water	141:17	0:0	7	error
water	142:8	0:0	6	}
water	143:8	0:0	4	pictures
op	143:16	0:0	4	[
water	143:17	0:0	4	i
op	143:18	0:0	4	]
op	143:20	0:0	4	=
water	143:22	0:0	4	picture
water	143:29	0:0	4	;
water	144:4	0:0	4	}
decl	146:4	146:41	2	picture_pool_configuration_t	pool_cfg
call	147:4	147:41	2	memset
arg	147:11	147:20	3	&pool_cfg
op	147:11	0:0	4	&
water	147:12	0:0	4	pool_cfg
arg	147:22	147:23	3	0
water	147:22	0:0	4	0
arg	147:25	147:41	3	sizeof(pool_cfg)
op	147:25	0:0	4	sizeof
water	147:31	0:0	4	(
water	147:32	0:0	4	pool_cfg
water	147:40	0:0	4	)
water	147:42	0:0	2	;
water	148:4	0:0	2	pool_cfg
op	148:12	0:0	2	.
water	148:13	0:0	2	picture_count
op	148:27	0:0	2	=
water	148:29	0:0	2	p_sys
op	148:34	0:0	2	->
water	148:36	0:0	2	port
op	148:40	0:0	2	.
water	148:41	0:0	2	i_buffers
water	148:50	0:0	2	;
water	149:4	0:0	2	pool_cfg
op	149:12	0:0	2	.
water	149:13	0:0	2	picture
op	149:27	0:0	2	=
water	149:29	0:0	2	pictures
water	149:37	0:0	2	;
water	150:4	0:0	2	pool_cfg
op	150:12	0:0	2	.
water	150:13	0:0	2	lock
op	150:27	0:0	2	=
water	150:29	0:0	2	LockSurface
water	150:40	0:0	2	;
water	151:4	0:0	2	pool_cfg
op	151:12	0:0	2	.
water	151:13	0:0	2	unlock
op	151:27	0:0	2	=
water	151:29	0:0	2	UnlockSurface
water	151:42	0:0	2	;
water	152:4	0:0	2	p_sys
op	152:9	0:0	2	->
water	152:11	0:0	2	pool
op	152:16	0:0	2	=
call	152:18	152:52	2	picture_pool_NewExtended
arg	152:43	152:52	3	&pool_cfg
op	152:43	0:0	4	&
water	152:44	0:0	4	pool_cfg
water	152:53	0:0	2	;
if	153:4	157:4	2	(! p_sys -> pool)
cond	153:8	153:16	3	! p_sys -> pool
op	153:8	0:0	4	!
water	153:9	0:0	4	p_sys
op	153:14	0:0	4	->
water	153:16	0:0	4	pool
stmts	153:22	157:4	3	
water	153:22	0:0	4	{
for	154:8	155:40	4	( unsigned int i = 0 ;i < p_sys -> port . i_buffers;i ++)
forinit	0:0	154:31	5	 unsigned int i = 0 ;
decl	154:13	154:31	6	unsigned int	i
op	154:28	0:0	6	=
water	154:30	0:0	6	0
cond	154:33	154:49	5	i < p_sys -> port . i_buffers
water	154:33	0:0	6	i
op	154:35	0:0	6	<
water	154:37	0:0	6	p_sys
op	154:42	0:0	6	->
water	154:44	0:0	6	port
op	154:48	0:0	6	.
water	154:49	0:0	6	i_buffers
forexpr	154:60	154:61	5	i ++
water	154:60	0:0	6	i
op	154:61	0:0	6	++
stmts	155:12	155:40	5	
call	155:12	155:39	6	picture_Release
arg	155:28	155:39	7	pictures[i]
water	155:28	0:0	8	pictures
op	155:36	0:0	8	[
water	155:37	0:0	8	i
op	155:38	0:0	8	]
water	155:40	0:0	6	;
goto	156:8	156:18	4	error
water	156:13	0:0	5	error
water	157:4	0:0	4	}
call	159:4	159:45	2	vout_display_SendEventFullscreen
arg	159:37	159:39	3	vd
water	159:37	0:0	4	vd
arg	159:41	159:45	3	true
water	159:41	0:0	4	true
water	159:46	0:0	2	;
call	160:4	160:17	2	free
arg	160:9	160:17	3	pictures
water	160:9	0:0	4	pictures
water	160:18	0:0	2	;
return	161:4	161:22	2	VLC_SUCCESS
water	161:11	0:0	3	VLC_SUCCESS
label	162:0	162:5	2	error :
call	163:4	163:17	2	free
arg	163:9	163:17	3	pictures
water	163:9	0:0	4	pictures
water	163:18	0:0	2	;
call	164:4	164:16	2	Close
arg	164:10	164:16	3	p_this
water	164:10	0:0	4	p_this
water	164:17	0:0	2	;
return	165:4	165:23	2	VLC_EGENERIC
water	165:11	0:0	3	VLC_EGENERIC
