func	2:0	50:0	0	static int	oldmovie_film_scratch_effect
params	2:39	0:0	1	
param	2:41	2:59	2	filter_t *	p_filter
param	2:61	2:82	2	picture_t *	p_pic_out
stmnts	0:0	49:22	1	
decl	4:4	4:41	2	filter_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	p_filter
op	4:34	0:0	2	->
water	4:36	0:0	2	p_sys
if	8:4	31:4	2	(p_sys -> i_scratch_trigger <= p_sys -> i_cur_time)
cond	8:9	8:44	3	p_sys -> i_scratch_trigger <= p_sys -> i_cur_time
water	8:9	0:0	4	p_sys
op	8:14	0:0	4	->
water	8:16	0:0	4	i_scratch_trigger
op	8:34	0:0	4	<=
water	8:37	0:0	4	p_sys
op	8:42	0:0	4	->
water	8:44	0:0	4	i_cur_time
stmts	8:57	31:4	3	
water	8:57	0:0	4	{
for	9:8	27:12	4	( uint32_t i_s = 0 ;i_s < MAX_SCRATCH;i_s ++)
forinit	0:0	9:30	5	 uint32_t i_s = 0 ;
decl	9:14	9:30	6	uint32_t	i_s
op	9:27	0:0	6	=
water	9:29	0:0	6	0
cond	9:32	9:38	5	i_s < MAX_SCRATCH
water	9:32	0:0	6	i_s
op	9:36	0:0	6	<
water	9:38	0:0	6	MAX_SCRATCH
forexpr	9:51	9:54	5	i_s ++
water	9:51	0:0	6	i_s
op	9:54	0:0	6	++
stmts	10:12	27:12	5	
if	10:12	27:12	6	(p_sys -> p_scratch [ i_s ] == NULL)
cond	10:17	10:42	7	p_sys -> p_scratch [ i_s ] == NULL
water	10:17	0:0	8	p_sys
op	10:22	0:0	8	->
water	10:24	0:0	8	p_scratch
op	10:33	0:0	8	[
water	10:34	0:0	8	i_s
op	10:37	0:0	8	]
op	10:39	0:0	8	==
water	10:42	0:0	8	NULL
stmts	10:49	27:12	7	
water	10:49	0:0	8	{
water	12:16	0:0	8	p_sys
op	12:21	0:0	8	->
water	12:23	0:0	8	p_scratch
op	12:32	0:0	8	[
water	12:33	0:0	8	i_s
op	12:36	0:0	8	]
op	12:38	0:0	8	=
call	12:40	12:69	8	calloc
arg	12:48	12:49	9	1
water	12:48	0:0	10	1
arg	12:51	12:69	9	sizeof(scratch_t)
op	12:51	0:0	10	sizeof
water	12:57	0:0	10	(
water	12:58	0:0	10	scratch_t
water	12:67	0:0	10	)
water	12:70	0:0	8	;
if	13:16	14:37	8	(unlikely (! p_sys -> p_scratch [ i_s ] ))
cond	13:21	13:54	9	unlikely (! p_sys -> p_scratch [ i_s ] )
call	13:21	13:54	10	unlikely
arg	13:31	13:54	11	!p_sys->p_scratch[i_s]
op	13:31	0:0	12	!
water	13:32	0:0	12	p_sys
op	13:37	0:0	12	->
water	13:39	0:0	12	p_scratch
op	13:48	0:0	12	[
water	13:49	0:0	12	i_s
op	13:52	0:0	12	]
stmts	14:20	14:37	9	
return	14:20	14:37	10	VLC_ENOMEM
water	14:27	0:0	11	VLC_ENOMEM
water	16:16	0:0	8	p_sys
op	16:21	0:0	8	->
water	16:23	0:0	8	p_scratch
op	16:32	0:0	8	[
water	16:33	0:0	8	i_s
op	16:36	0:0	8	]
op	16:37	0:0	8	->
water	16:39	0:0	8	i_offset
op	16:48	0:0	8	=
water	16:50	0:0	8	(
water	16:52	0:0	8	(
water	16:54	0:0	8	(
water	16:55	0:0	8	unsigned
water	16:63	0:0	8	)
call	16:64	16:76	8	vlc_mrand48
water	16:78	0:0	8	)
op	17:48	0:0	8	%
call	17:50	17:89	8	__MAX
arg	17:57	17:85	9	p_sys->i_width[Y_PLANE]-10
water	17:57	0:0	10	p_sys
op	17:62	0:0	10	->
water	17:64	0:0	10	i_width
op	17:71	0:0	10	[
water	17:72	0:0	10	Y_PLANE
op	17:79	0:0	10	]
op	17:81	0:0	10	-
water	17:83	0:0	10	10
arg	17:87	17:89	9	1
water	17:87	0:0	10	1
water	17:91	0:0	8	)
op	18:48	0:0	8	+
water	18:50	0:0	8	5
water	18:51	0:0	8	;
water	19:16	0:0	8	p_sys
op	19:21	0:0	8	->
water	19:23	0:0	8	p_scratch
op	19:32	0:0	8	[
water	19:33	0:0	8	i_s
op	19:36	0:0	8	]
op	19:37	0:0	8	->
water	19:39	0:0	8	i_width
op	19:48	0:0	8	=
water	19:50	0:0	8	(
water	19:52	0:0	8	(
water	19:54	0:0	8	(
water	19:55	0:0	8	unsigned
water	19:63	0:0	8	)
call	19:64	19:76	8	vlc_mrand48
water	19:78	0:0	8	)
op	20:48	0:0	8	%
call	20:50	20:90	8	__MAX
arg	20:57	20:86	9	p_sys->i_width[Y_PLANE]/500
water	20:57	0:0	10	p_sys
op	20:62	0:0	10	->
water	20:64	0:0	10	i_width
op	20:71	0:0	10	[
water	20:72	0:0	10	Y_PLANE
op	20:79	0:0	10	]
op	20:81	0:0	10	/
water	20:83	0:0	10	500
arg	20:88	20:90	9	1
water	20:88	0:0	10	1
water	20:92	0:0	8	)
op	21:48	0:0	8	+
water	21:50	0:0	8	1
water	21:51	0:0	8	;
water	22:16	0:0	8	p_sys
op	22:21	0:0	8	->
water	22:23	0:0	8	p_scratch
op	22:32	0:0	8	[
water	22:33	0:0	8	i_s
op	22:36	0:0	8	]
op	22:37	0:0	8	->
water	22:39	0:0	8	i_intensity
op	22:51	0:0	8	=
water	22:53	0:0	8	(
water	22:54	0:0	8	unsigned
water	22:62	0:0	8	)
call	22:64	22:76	8	vlc_mrand48
op	22:78	0:0	8	%
water	22:80	0:0	8	50
op	22:83	0:0	8	+
water	22:85	0:0	8	10
water	22:87	0:0	8	;
water	23:16	0:0	8	p_sys
op	23:21	0:0	8	->
water	23:23	0:0	8	p_scratch
op	23:32	0:0	8	[
water	23:33	0:0	8	i_s
op	23:36	0:0	8	]
op	23:37	0:0	8	->
water	23:39	0:0	8	i_stop_trigger
op	23:54	0:0	8	=
water	23:56	0:0	8	p_sys
op	23:61	0:0	8	->
water	23:63	0:0	8	i_cur_time
op	24:54	0:0	8	+
water	24:56	0:0	8	(
water	24:57	0:0	8	uint64_t
water	24:65	0:0	8	)
call	24:67	24:79	8	vlc_mrand48
op	24:81	0:0	8	%
water	24:83	0:0	8	SCRATCH_DURATION
op	25:54	0:0	8	+
water	25:56	0:0	8	SCRATCH_DURATION
op	25:73	0:0	8	/
water	25:75	0:0	8	2
water	25:76	0:0	8	;
break	26:16	26:21	8	
water	27:12	0:0	8	}
water	28:8	0:0	4	p_sys
op	28:13	0:0	4	->
water	28:15	0:0	4	i_scratch_trigger
op	28:33	0:0	4	=
water	28:35	0:0	4	p_sys
op	28:40	0:0	4	->
water	28:42	0:0	4	i_cur_time
op	29:33	0:0	4	+
water	29:35	0:0	4	(
water	29:37	0:0	4	(
water	29:38	0:0	4	uint64_t
water	29:46	0:0	4	)
call	29:47	29:59	4	vlc_mrand48
water	29:61	0:0	4	)
op	29:63	0:0	4	%
water	29:65	0:0	4	SCRATCH_GENERATOR_PERIOD
op	30:33	0:0	4	+
water	30:35	0:0	4	SCRATCH_GENERATOR_PERIOD
op	30:60	0:0	4	/
water	30:62	0:0	4	2
water	30:63	0:0	4	;
water	31:4	0:0	4	}
for	33:4	48:8	2	( uint32_t i_s = 0 ;i_s < MAX_SCRATCH;i_s ++)
forinit	0:0	33:26	3	 uint32_t i_s = 0 ;
decl	33:10	33:26	4	uint32_t	i_s
op	33:23	0:0	4	=
water	33:25	0:0	4	0
cond	33:28	33:34	3	i_s < MAX_SCRATCH
water	33:28	0:0	4	i_s
op	33:32	0:0	4	<
water	33:34	0:0	4	MAX_SCRATCH
forexpr	33:47	33:50	3	i_s ++
water	33:47	0:0	4	i_s
op	33:50	0:0	4	++
stmts	34:8	48:8	3	
if	34:8	48:8	4	(p_sys -> p_scratch [ i_s ])
cond	34:13	34:33	5	p_sys -> p_scratch [ i_s ]
water	34:13	0:0	6	p_sys
op	34:18	0:0	6	->
water	34:20	0:0	6	p_scratch
op	34:29	0:0	6	[
water	34:30	0:0	6	i_s
op	34:33	0:0	6	]
stmts	34:37	48:8	5	
water	34:37	0:0	6	{
if	36:12	39:12	6	(p_sys -> p_scratch [ i_s ] -> i_stop_trigger <= p_sys -> i_cur_time)
cond	36:17	36:65	7	p_sys -> p_scratch [ i_s ] -> i_stop_trigger <= p_sys -> i_cur_time
water	36:17	0:0	8	p_sys
op	36:22	0:0	8	->
water	36:24	0:0	8	p_scratch
op	36:33	0:0	8	[
water	36:34	0:0	8	i_s
op	36:37	0:0	8	]
op	36:38	0:0	8	->
water	36:40	0:0	8	i_stop_trigger
op	36:55	0:0	8	<=
water	36:58	0:0	8	p_sys
op	36:63	0:0	8	->
water	36:65	0:0	8	i_cur_time
stmts	36:78	39:12	7	
water	36:78	0:0	8	{
call	37:16	37:48	8	FREENULL
arg	37:26	37:48	9	p_sys->p_scratch[i_s]
water	37:26	0:0	10	p_sys
op	37:31	0:0	10	->
water	37:33	0:0	10	p_scratch
op	37:42	0:0	10	[
water	37:43	0:0	10	i_s
op	37:46	0:0	10	]
water	37:49	0:0	8	;
continue	38:16	38:24	8	
water	39:12	0:0	8	}
for	41:12	47:58	6	( int32_t i_y = 0 ;i_y < p_pic_out -> p [ Y_PLANE ] . i_visible_lines;i_y ++)
forinit	0:0	41:33	7	 int32_t i_y = 0 ;
decl	41:18	41:33	8	int32_t	i_y
op	41:30	0:0	8	=
water	41:32	0:0	8	0
cond	41:35	41:63	7	i_y < p_pic_out -> p [ Y_PLANE ] . i_visible_lines
water	41:35	0:0	8	i_y
op	41:39	0:0	8	<
water	41:41	0:0	8	p_pic_out
op	41:50	0:0	8	->
water	41:52	0:0	8	p
op	41:53	0:0	8	[
water	41:54	0:0	8	Y_PLANE
op	41:61	0:0	8	]
op	41:62	0:0	8	.
water	41:63	0:0	8	i_visible_lines
forexpr	41:80	41:83	7	i_y ++
water	41:80	0:0	8	i_y
op	41:83	0:0	8	++
stmts	42:16	47:58	7	
for	42:16	47:58	8	( int32_t i_x = p_sys -> p_scratch [ i_s ] -> i_offset ;i_x <__MIN (p_sys -> p_scratch [ i_s ] -> i_offset + p_sys -> p_scratch [ i_s ] -> i_width ,p_sys -> i_width [ Y_PLANE ] );i_x ++)
forinit	0:0	42:67	9	 int32_t i_x = p_sys -> p_scratch [ i_s ] -> i_offset ;
decl	42:22	42:67	10	int32_t	i_x
op	42:34	0:0	10	=
water	42:36	0:0	10	p_sys
op	42:41	0:0	10	->
water	42:43	0:0	10	p_scratch
op	42:52	0:0	10	[
water	42:53	0:0	10	i_s
op	42:56	0:0	10	]
op	42:57	0:0	10	->
water	42:59	0:0	10	i_offset
cond	43:22	44:80	9	i_x <__MIN (p_sys -> p_scratch [ i_s ] -> i_offset + p_sys -> p_scratch [ i_s ] -> i_width ,p_sys -> i_width [ Y_PLANE ] )
water	43:22	0:0	10	i_x
op	43:26	0:0	10	<
call	43:28	44:80	10	__MIN
arg	43:34	44:54	11	p_sys->p_scratch[i_s]->i_offset+p_sys->p_scratch[i_s]->i_width
water	43:34	0:0	12	p_sys
op	43:39	0:0	12	->
water	43:41	0:0	12	p_scratch
op	43:50	0:0	12	[
water	43:51	0:0	12	i_s
op	43:54	0:0	12	]
op	43:55	0:0	12	->
water	43:57	0:0	12	i_offset
op	44:22	0:0	12	+
water	44:24	0:0	12	p_sys
op	44:29	0:0	12	->
water	44:31	0:0	12	p_scratch
op	44:40	0:0	12	[
water	44:41	0:0	12	i_s
op	44:44	0:0	12	]
op	44:45	0:0	12	->
water	44:47	0:0	12	i_width
arg	44:56	44:80	11	p_sys->i_width[Y_PLANE]
water	44:56	0:0	12	p_sys
op	44:61	0:0	12	->
water	44:63	0:0	12	i_width
op	44:70	0:0	12	[
water	44:71	0:0	12	Y_PLANE
op	44:78	0:0	12	]
forexpr	45:22	45:25	9	i_x ++
water	45:22	0:0	10	i_x
op	45:25	0:0	10	++
stmts	46:20	47:58	9	
call	46:20	47:57	10	DARKEN_PIXEL
arg	46:34	46:37	11	i_x
water	46:34	0:0	12	i_x
arg	46:39	46:42	11	i_y
water	46:39	0:0	12	i_y
arg	46:44	46:78	11	p_sys->p_scratch[i_s]->i_intensity
water	46:44	0:0	12	p_sys
op	46:49	0:0	12	->
water	46:51	0:0	12	p_scratch
op	46:60	0:0	12	[
water	46:61	0:0	12	i_s
op	46:64	0:0	12	]
op	46:65	0:0	12	->
water	46:67	0:0	12	i_intensity
arg	47:34	47:57	11	&p_pic_out->p[Y_PLANE]
op	47:34	0:0	12	&
water	47:35	0:0	12	p_pic_out
op	47:44	0:0	12	->
water	47:46	0:0	12	p
op	47:47	0:0	12	[
water	47:48	0:0	12	Y_PLANE
op	47:55	0:0	12	]
water	47:58	0:0	10	;
water	48:8	0:0	6	}
return	49:4	49:22	2	VLC_SUCCESS
water	49:11	0:0	3	VLC_SUCCESS
