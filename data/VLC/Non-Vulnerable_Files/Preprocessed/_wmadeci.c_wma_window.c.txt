func	2:0	39:0	0	static void	wma_window
params	2:22	0:0	1	
param	2:23	2:42	2	WMADecodeContext *	s
param	2:44	2:55	2	int32_t *	in
param	2:57	2:69	2	int32_t *	out
stmnts	0:0	38:5	1	
decl	4:4	4:27	2	int	block_len
water	4:17	0:0	2	,
decl	4:4	4:27	2	int	bsize
water	4:24	0:0	2	,
decl	4:4	4:27	2	int	n
if	7:4	11:4	2	(s -> block_len_bits <= s -> prev_block_len_bits)
cond	7:8	7:32	3	s -> block_len_bits <= s -> prev_block_len_bits
water	7:8	0:0	4	s
op	7:9	0:0	4	->
water	7:11	0:0	4	block_len_bits
op	7:26	0:0	4	<=
water	7:29	0:0	4	s
op	7:30	0:0	4	->
water	7:32	0:0	4	prev_block_len_bits
stmts	7:53	11:4	3	
water	7:53	0:0	4	{
water	8:9	0:0	4	block_len
op	8:19	0:0	4	=
water	8:21	0:0	4	s
op	8:22	0:0	4	->
water	8:24	0:0	4	block_len
water	8:33	0:0	4	;
water	9:9	0:0	4	bsize
op	9:15	0:0	4	=
water	9:17	0:0	4	s
op	9:18	0:0	4	->
water	9:20	0:0	4	frame_len_bits
op	9:35	0:0	4	-
water	9:37	0:0	4	s
op	9:38	0:0	4	->
water	9:40	0:0	4	block_len_bits
water	9:54	0:0	4	;
call	10:9	10:66	4	vector_fmul_add_add
arg	10:29	10:32	5	out
water	10:29	0:0	6	out
arg	10:34	10:36	5	in
water	10:34	0:0	6	in
arg	10:38	10:55	5	s->windows[bsize]
water	10:38	0:0	6	s
op	10:39	0:0	6	->
water	10:41	0:0	6	windows
op	10:48	0:0	6	[
water	10:49	0:0	6	bsize
op	10:54	0:0	6	]
arg	10:57	10:66	5	block_len
water	10:57	0:0	6	block_len
water	10:67	0:0	4	;
water	11:4	0:0	4	}
else	11:6	19:4	2
stmts	11:11	19:4	3	
water	11:11	0:0	4	{
water	13:9	0:0	4	block_len
op	13:19	0:0	4	=
water	13:21	0:0	4	1
op	13:23	0:0	4	<<
water	13:26	0:0	4	s
op	13:27	0:0	4	->
water	13:29	0:0	4	prev_block_len_bits
water	13:48	0:0	4	;
water	15:9	0:0	4	n
op	15:11	0:0	4	=
water	15:13	0:0	4	(
water	15:14	0:0	4	s
op	15:15	0:0	4	->
water	15:17	0:0	4	block_len
op	15:27	0:0	4	-
water	15:29	0:0	4	block_len
water	15:38	0:0	4	)
op	15:40	0:0	4	>>
water	15:43	0:0	4	1
water	15:44	0:0	4	;
water	16:9	0:0	4	bsize
op	16:15	0:0	4	=
water	16:17	0:0	4	s
op	16:18	0:0	4	->
water	16:20	0:0	4	frame_len_bits
op	16:35	0:0	4	-
water	16:37	0:0	4	s
op	16:38	0:0	4	->
water	16:40	0:0	4	prev_block_len_bits
water	16:59	0:0	4	;
call	17:9	17:71	4	vector_fmul_add_add
arg	17:29	17:34	5	out+n
water	17:29	0:0	6	out
op	17:32	0:0	6	+
water	17:33	0:0	6	n
arg	17:36	17:40	5	in+n
water	17:36	0:0	6	in
op	17:38	0:0	6	+
water	17:39	0:0	6	n
arg	17:42	17:59	5	s->windows[bsize]
water	17:42	0:0	6	s
op	17:43	0:0	6	->
water	17:45	0:0	6	windows
op	17:52	0:0	6	[
water	17:53	0:0	6	bsize
op	17:58	0:0	6	]
arg	17:62	17:71	5	block_len
water	17:62	0:0	6	block_len
water	17:72	0:0	4	;
call	18:9	18:66	4	memcpy
arg	18:16	18:31	5	out+n+block_len
water	18:16	0:0	6	out
op	18:19	0:0	6	+
water	18:20	0:0	6	n
op	18:21	0:0	6	+
water	18:22	0:0	6	block_len
arg	18:33	18:47	5	in+n+block_len
water	18:33	0:0	6	in
op	18:35	0:0	6	+
water	18:36	0:0	6	n
op	18:37	0:0	6	+
water	18:38	0:0	6	block_len
arg	18:49	18:66	5	n*sizeof(int32_t)
water	18:49	0:0	6	n
op	18:50	0:0	6	*
op	18:51	0:0	6	sizeof
water	18:57	0:0	6	(
water	18:58	0:0	6	int32_t
water	18:65	0:0	6	)
water	18:67	0:0	4	;
water	19:4	0:0	4	}
water	24:5	0:0	2	out
op	24:9	0:0	2	+=
water	24:12	0:0	2	s
op	24:13	0:0	2	->
water	24:15	0:0	2	block_len
water	24:24	0:0	2	;
water	25:5	0:0	2	in
op	25:8	0:0	2	+=
water	25:11	0:0	2	s
op	25:12	0:0	2	->
water	25:14	0:0	2	block_len
water	25:23	0:0	2	;
if	27:5	31:5	2	(s -> block_len_bits <= s -> next_block_len_bits)
cond	27:9	27:33	3	s -> block_len_bits <= s -> next_block_len_bits
water	27:9	0:0	4	s
op	27:10	0:0	4	->
water	27:12	0:0	4	block_len_bits
op	27:27	0:0	4	<=
water	27:30	0:0	4	s
op	27:31	0:0	4	->
water	27:33	0:0	4	next_block_len_bits
stmts	27:54	31:5	3	
water	27:54	0:0	4	{
water	28:9	0:0	4	block_len
op	28:19	0:0	4	=
water	28:21	0:0	4	s
op	28:22	0:0	4	->
water	28:24	0:0	4	block_len
water	28:33	0:0	4	;
water	29:9	0:0	4	bsize
op	29:15	0:0	4	=
water	29:17	0:0	4	s
op	29:18	0:0	4	->
water	29:20	0:0	4	frame_len_bits
op	29:35	0:0	4	-
water	29:37	0:0	4	s
op	29:38	0:0	4	->
water	29:40	0:0	4	block_len_bits
water	29:54	0:0	4	;
call	30:9	30:66	4	vector_fmul_reverse
arg	30:29	30:32	5	out
water	30:29	0:0	6	out
arg	30:34	30:36	5	in
water	30:34	0:0	6	in
arg	30:38	30:55	5	s->windows[bsize]
water	30:38	0:0	6	s
op	30:39	0:0	6	->
water	30:41	0:0	6	windows
op	30:48	0:0	6	[
water	30:49	0:0	6	bsize
op	30:54	0:0	6	]
arg	30:57	30:66	5	block_len
water	30:57	0:0	6	block_len
water	30:67	0:0	4	;
water	31:5	0:0	4	}
else	31:7	38:5	2
stmts	31:12	38:5	3	
water	31:12	0:0	4	{
water	32:9	0:0	4	block_len
op	32:19	0:0	4	=
water	32:21	0:0	4	1
op	32:23	0:0	4	<<
water	32:26	0:0	4	s
op	32:27	0:0	4	->
water	32:29	0:0	4	next_block_len_bits
water	32:48	0:0	4	;
water	33:9	0:0	4	n
op	33:11	0:0	4	=
water	33:13	0:0	4	(
water	33:14	0:0	4	s
op	33:15	0:0	4	->
water	33:17	0:0	4	block_len
op	33:27	0:0	4	-
water	33:29	0:0	4	block_len
water	33:38	0:0	4	)
op	33:40	0:0	4	>>
water	33:43	0:0	4	1
water	33:44	0:0	4	;
water	34:9	0:0	4	bsize
op	34:15	0:0	4	=
water	34:17	0:0	4	s
op	34:18	0:0	4	->
water	34:20	0:0	4	frame_len_bits
op	34:35	0:0	4	-
water	34:37	0:0	4	s
op	34:38	0:0	4	->
water	34:40	0:0	4	next_block_len_bits
water	34:59	0:0	4	;
call	35:9	35:42	4	memcpy
arg	35:16	35:19	5	out
water	35:16	0:0	6	out
arg	35:21	35:23	5	in
water	35:21	0:0	6	in
arg	35:25	35:42	5	n*sizeof(int32_t)
water	35:25	0:0	6	n
op	35:26	0:0	6	*
op	35:27	0:0	6	sizeof
water	35:33	0:0	6	(
water	35:34	0:0	6	int32_t
water	35:41	0:0	6	)
water	35:43	0:0	4	;
call	36:9	36:70	4	vector_fmul_reverse
arg	36:29	36:34	5	out+n
water	36:29	0:0	6	out
op	36:32	0:0	6	+
water	36:33	0:0	6	n
arg	36:36	36:40	5	in+n
water	36:36	0:0	6	in
op	36:38	0:0	6	+
water	36:39	0:0	6	n
arg	36:42	36:59	5	s->windows[bsize]
water	36:42	0:0	6	s
op	36:43	0:0	6	->
water	36:45	0:0	6	windows
op	36:52	0:0	6	[
water	36:53	0:0	6	bsize
op	36:58	0:0	6	]
arg	36:61	36:70	5	block_len
water	36:61	0:0	6	block_len
water	36:71	0:0	4	;
call	37:9	37:53	4	memset
arg	37:16	37:31	5	out+n+block_len
water	37:16	0:0	6	out
op	37:19	0:0	6	+
water	37:20	0:0	6	n
op	37:21	0:0	6	+
water	37:22	0:0	6	block_len
arg	37:33	37:34	5	0
water	37:33	0:0	6	0
arg	37:36	37:53	5	n*sizeof(int32_t)
water	37:36	0:0	6	n
op	37:37	0:0	6	*
op	37:38	0:0	6	sizeof
water	37:44	0:0	6	(
water	37:45	0:0	6	int32_t
water	37:52	0:0	6	)
water	37:54	0:0	4	;
water	38:5	0:0	4	}
