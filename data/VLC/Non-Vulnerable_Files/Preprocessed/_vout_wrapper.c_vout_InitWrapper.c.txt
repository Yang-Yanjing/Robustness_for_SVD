func	2:0	41:0	0	int	vout_InitWrapper
params	2:20	0:0	1	
param	2:21	2:40	2	vout_thread_t *	vout
stmnts	0:0	40:22	1	
decl	4:4	4:36	2	vout_thread_sys_t	*sys
op	4:27	0:0	2	=
water	4:29	0:0	2	vout
op	4:33	0:0	2	->
water	4:35	0:0	2	p
decl	5:4	5:40	2	vout_display_t	*vd
op	5:23	0:0	2	=
water	5:25	0:0	2	sys
op	5:28	0:0	2	->
water	5:30	0:0	2	display
op	5:37	0:0	2	.
water	5:38	0:0	2	vd
decl	6:4	6:38	2	video_format_t	source
op	6:26	0:0	2	=
water	6:28	0:0	2	vd
op	6:30	0:0	2	->
water	6:32	0:0	2	source
water	7:4	0:0	2	sys
op	7:7	0:0	2	->
water	7:9	0:0	2	display
op	7:16	0:0	2	.
water	7:17	0:0	2	use_dr
op	7:24	0:0	2	=
op	7:26	0:0	2	!
call	7:27	7:52	2	vout_IsDisplayFiltered
arg	7:50	7:52	3	vd
water	7:50	0:0	4	vd
water	7:53	0:0	2	;
decl	8:4	8:100	2	const bool	allow_dr
op	8:24	0:0	2	=
op	8:26	0:0	2	!
water	8:27	0:0	2	vd
op	8:29	0:0	2	->
water	8:31	0:0	2	info
op	8:35	0:0	2	.
water	8:36	0:0	2	has_pictures_invalid
op	8:57	0:0	2	&&
op	8:60	0:0	2	!
water	8:61	0:0	2	vd
op	8:63	0:0	2	->
water	8:65	0:0	2	info
op	8:69	0:0	2	.
water	8:70	0:0	2	is_slow
op	8:78	0:0	2	&&
water	8:81	0:0	2	sys
op	8:84	0:0	2	->
water	8:86	0:0	2	display
op	8:93	0:0	2	.
water	8:94	0:0	2	use_dr
water	9:4	0:0	2	const
water	9:10	0:0	2	unsigned
water	9:19	0:0	2	private_picture
op	9:36	0:0	2	=
water	9:38	0:0	2	4
water	9:39	0:0	2	;
water	10:4	0:0	2	const
water	10:10	0:0	2	unsigned
water	10:19	0:0	2	decoder_picture
op	10:36	0:0	2	=
water	10:38	0:0	2	1
op	10:40	0:0	2	+
water	10:42	0:0	2	sys
op	10:45	0:0	2	->
water	10:47	0:0	2	dpb_size
water	10:55	0:0	2	;
water	11:4	0:0	2	const
water	11:10	0:0	2	unsigned
water	11:19	0:0	2	kept_picture
op	11:36	0:0	2	=
water	11:38	0:0	2	1
water	11:39	0:0	2	;
water	12:4	0:0	2	const
water	12:10	0:0	2	unsigned
water	12:19	0:0	2	reserved_picture
op	12:36	0:0	2	=
water	12:38	0:0	2	DISPLAY_PICTURE_COUNT
op	12:60	0:0	2	+
water	13:38	0:0	2	private_picture
op	13:54	0:0	2	+
water	14:38	0:0	2	kept_picture
water	14:50	0:0	2	;
decl	15:4	17:87	2	picture_pool_t	*display_pool
op	15:33	0:0	2	=
call	16:8	17:86	3	vout_display_Pool
arg	16:26	16:28	4	vd
water	16:26	0:0	5	vd
arg	16:30	17:86	4	allow_dr?__MAX(VOUT_MAX_PICTURES,reserved_picture+decoder_picture):3
water	16:30	0:0	5	allow_dr
water	16:39	0:0	5	?
call	16:41	17:81	5	__MAX
arg	16:47	16:64	6	VOUT_MAX_PICTURES
water	16:47	0:0	7	VOUT_MAX_PICTURES
arg	17:47	17:81	6	reserved_picture+decoder_picture
water	17:47	0:0	7	reserved_picture
op	17:64	0:0	7	+
water	17:66	0:0	7	decoder_picture
water	17:83	0:0	5	:
water	17:85	0:0	5	3
if	18:4	23:4	2	(allow_dr &&picture_pool_GetSize (display_pool ) >= reserved_picture + decoder_picture)
cond	18:8	19:65	3	allow_dr &&picture_pool_GetSize (display_pool ) >= reserved_picture + decoder_picture
water	18:8	0:0	4	allow_dr
op	18:17	0:0	4	&&
call	19:8	19:41	4	picture_pool_GetSize
arg	19:29	19:41	5	display_pool
water	19:29	0:0	6	display_pool
op	19:43	0:0	4	>=
water	19:46	0:0	4	reserved_picture
op	19:63	0:0	4	+
water	19:65	0:0	4	decoder_picture
stmts	19:82	23:4	3	
water	19:82	0:0	4	{
water	20:8	0:0	4	sys
op	20:11	0:0	4	->
water	20:13	0:0	4	dpb_size
op	20:26	0:0	4	=
call	20:28	20:61	4	picture_pool_GetSize
arg	20:49	20:61	5	display_pool
water	20:49	0:0	6	display_pool
op	20:63	0:0	4	-
water	20:65	0:0	4	reserved_picture
water	20:81	0:0	4	;
water	21:8	0:0	4	sys
op	21:11	0:0	4	->
water	21:13	0:0	4	decoder_pool
op	21:26	0:0	4	=
water	21:28	0:0	4	display_pool
water	21:40	0:0	4	;
water	22:8	0:0	4	sys
op	22:11	0:0	4	->
water	22:13	0:0	4	display_pool
op	22:26	0:0	4	=
water	22:28	0:0	4	display_pool
water	22:40	0:0	4	;
water	23:4	0:0	4	}
else	23:6	37:4	2
stmts	23:11	37:4	3	
if	23:11	37:4	4	(! sys -> decoder_pool)
cond	23:15	23:21	5	! sys -> decoder_pool
op	23:15	0:0	6	!
water	23:16	0:0	6	sys
op	23:19	0:0	6	->
water	23:21	0:0	6	decoder_pool
stmts	23:35	37:4	5	
water	23:35	0:0	6	{
water	24:8	0:0	6	sys
op	24:11	0:0	6	->
water	24:13	0:0	6	decoder_pool
op	24:26	0:0	6	=
call	25:12	27:104	6	picture_pool_NewFromFormat
arg	25:39	25:46	7	&source
op	25:39	0:0	8	&
water	25:40	0:0	8	source
arg	26:39	27:104	7	__MAX(VOUT_MAX_PICTURES,reserved_picture+decoder_picture-DISPLAY_PICTURE_COUNT)
call	26:39	27:103	8	__MAX
arg	26:45	26:62	9	VOUT_MAX_PICTURES
water	26:45	0:0	10	VOUT_MAX_PICTURES
arg	27:45	27:103	9	reserved_picture+decoder_picture-DISPLAY_PICTURE_COUNT
water	27:45	0:0	10	reserved_picture
op	27:62	0:0	10	+
water	27:64	0:0	10	decoder_picture
op	27:80	0:0	10	-
water	27:82	0:0	10	DISPLAY_PICTURE_COUNT
water	27:105	0:0	6	;
if	28:8	29:31	6	(! sys -> decoder_pool)
cond	28:12	28:18	7	! sys -> decoder_pool
op	28:12	0:0	8	!
water	28:13	0:0	8	sys
op	28:16	0:0	8	->
water	28:18	0:0	8	decoder_pool
stmts	29:12	29:31	7	
return	29:12	29:31	8	VLC_EGENERIC
water	29:19	0:0	9	VLC_EGENERIC
if	30:8	33:8	6	(allow_dr)
cond	30:12	30:12	7	allow_dr
water	30:12	0:0	8	allow_dr
stmts	30:22	33:8	7	
water	30:22	0:0	8	{
call	31:12	31:75	8	msg_Warn
arg	31:21	31:25	9	vout
water	31:21	0:0	10	vout
arg	31:27	31:75	9	"Not enough direct buffers, using system memory"
water	31:27	0:0	10	"Not enough direct buffers, using system memory"
water	31:76	0:0	8	;
water	32:12	0:0	8	sys
op	32:15	0:0	8	->
water	32:17	0:0	8	dpb_size
op	32:26	0:0	8	=
water	32:28	0:0	8	0
water	32:29	0:0	8	;
water	33:8	0:0	8	}
else	33:10	35:8	6
stmts	33:15	35:8	7	
water	33:15	0:0	8	{
water	34:12	0:0	8	sys
op	34:15	0:0	8	->
water	34:17	0:0	8	dpb_size
op	34:26	0:0	8	=
call	34:28	34:66	8	picture_pool_GetSize
arg	34:49	34:66	9	sys->decoder_pool
water	34:49	0:0	10	sys
op	34:52	0:0	10	->
water	34:54	0:0	10	decoder_pool
op	34:68	0:0	8	-
water	34:70	0:0	8	reserved_picture
water	34:86	0:0	8	;
water	35:8	0:0	8	}
call	36:8	36:21	6	NoDrInit
arg	36:17	36:21	7	vout
water	36:17	0:0	8	vout
water	36:22	0:0	6	;
water	37:4	0:0	6	}
water	38:4	0:0	2	sys
op	38:7	0:0	2	->
water	38:9	0:0	2	private_pool
op	38:22	0:0	2	=
call	38:24	38:79	2	picture_pool_Reserve
arg	38:45	38:62	3	sys->decoder_pool
water	38:45	0:0	4	sys
op	38:48	0:0	4	->
water	38:50	0:0	4	decoder_pool
arg	38:64	38:79	3	private_picture
water	38:64	0:0	4	private_picture
water	38:80	0:0	2	;
water	39:4	0:0	2	sys
op	39:7	0:0	2	->
water	39:9	0:0	2	display
op	39:16	0:0	2	.
water	39:17	0:0	2	filtered
op	39:26	0:0	2	=
water	39:28	0:0	2	NULL
water	39:32	0:0	2	;
return	40:4	40:22	2	VLC_SUCCESS
water	40:11	0:0	3	VLC_SUCCESS
