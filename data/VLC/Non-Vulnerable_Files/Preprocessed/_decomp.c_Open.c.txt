func	2:0	87:0	0	static int	Open
params	2:16	0:0	1	
param	2:17	2:33	2	stream_t *	stream
param	2:35	2:51	2	const char *	path
stmnts	0:0	86:14	1	
decl	4:4	4:66	2	stream_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	stream
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
op	4:40	0:0	2	=
call	4:42	4:65	3	malloc
arg	4:50	4:65	4	sizeof(*p_sys)
op	4:50	0:0	5	sizeof
water	4:57	0:0	5	(
op	4:58	0:0	5	*
water	4:59	0:0	5	p_sys
water	4:64	0:0	5	)
if	5:4	6:25	2	(p_sys == NULL)
cond	5:8	5:17	3	p_sys == NULL
water	5:8	0:0	4	p_sys
op	5:14	0:0	4	==
water	5:17	0:0	4	NULL
stmts	6:8	6:25	3	
return	6:8	6:25	4	VLC_ENOMEM
water	6:15	0:0	5	VLC_ENOMEM
water	7:4	0:0	2	stream
op	7:10	0:0	2	->
water	7:12	0:0	2	pf_read
op	7:20	0:0	2	=
water	7:22	0:0	2	Read
water	7:26	0:0	2	;
water	8:4	0:0	2	stream
op	8:10	0:0	2	->
water	8:12	0:0	2	pf_peek
op	8:20	0:0	2	=
water	8:22	0:0	2	Peek
water	8:26	0:0	2	;
water	9:4	0:0	2	stream
op	9:10	0:0	2	->
water	9:12	0:0	2	pf_control
op	9:23	0:0	2	=
water	9:25	0:0	2	Control
water	9:32	0:0	2	;
call	10:4	10:31	2	vlc_cond_init
arg	10:19	10:31	3	&p_sys->wait
op	10:19	0:0	4	&
water	10:20	0:0	4	p_sys
op	10:25	0:0	4	->
water	10:27	0:0	4	wait
water	10:32	0:0	2	;
call	11:4	11:32	2	vlc_mutex_init
arg	11:20	11:32	3	&p_sys->lock
op	11:20	0:0	4	&
water	11:21	0:0	4	p_sys
op	11:26	0:0	4	->
water	11:28	0:0	4	lock
water	11:33	0:0	2	;
water	12:4	0:0	2	p_sys
op	12:9	0:0	2	->
water	12:11	0:0	2	paused
op	12:18	0:0	2	=
water	12:20	0:0	2	false
water	12:25	0:0	2	;
water	13:4	0:0	2	p_sys
op	13:9	0:0	2	->
water	13:11	0:0	2	pid
op	13:15	0:0	2	=
op	13:17	0:0	2	-
water	13:18	0:0	2	1
water	13:19	0:0	2	;
water	14:4	0:0	2	p_sys
op	14:9	0:0	2	->
water	14:11	0:0	2	offset
op	14:18	0:0	2	=
water	14:20	0:0	2	0
water	14:21	0:0	2	;
water	15:4	0:0	2	p_sys
op	15:9	0:0	2	->
water	15:11	0:0	2	peeked
op	15:18	0:0	2	=
water	15:20	0:0	2	NULL
water	15:24	0:0	2	;
call	16:4	16:73	2	stream_Control
arg	16:20	16:36	3	stream->p_source
water	16:20	0:0	4	stream
op	16:26	0:0	4	->
water	16:28	0:0	4	p_source
arg	16:38	16:54	3	STREAM_CAN_PAUSE
water	16:38	0:0	4	STREAM_CAN_PAUSE
arg	16:56	16:73	3	&p_sys->can_pause
op	16:56	0:0	4	&
water	16:57	0:0	4	p_sys
op	16:62	0:0	4	->
water	16:64	0:0	4	can_pause
water	16:74	0:0	2	;
call	17:4	18:36	2	stream_Control
arg	17:20	17:36	3	stream->p_source
water	17:20	0:0	4	stream
op	17:26	0:0	4	->
water	17:28	0:0	4	p_source
arg	17:38	17:61	3	STREAM_CAN_CONTROL_PACE
water	17:38	0:0	4	STREAM_CAN_CONTROL_PACE
arg	18:20	18:36	3	&p_sys->can_pace
op	18:20	0:0	4	&
water	18:21	0:0	4	p_sys
op	18:26	0:0	4	->
water	18:28	0:0	4	can_pace
water	18:37	0:0	2	;
call	19:4	19:77	2	stream_Control
arg	19:20	19:36	3	stream->p_source
water	19:20	0:0	4	stream
op	19:26	0:0	4	->
water	19:28	0:0	4	p_source
arg	19:38	19:58	3	STREAM_GET_PTS_DELAY
water	19:38	0:0	4	STREAM_GET_PTS_DELAY
arg	19:60	19:77	3	&p_sys->pts_delay
op	19:60	0:0	4	&
water	19:61	0:0	4	p_sys
op	19:66	0:0	4	->
water	19:68	0:0	4	pts_delay
water	19:78	0:0	2	;
decl	22:4	22:26	2	int	ret
op	22:12	0:0	2	=
water	22:14	0:0	2	VLC_EGENERIC
decl	23:4	23:15	2	int	comp[2]
if	26:4	78:4	2	(vlc_pipe (comp ) == 0)
cond	26:8	26:27	3	vlc_pipe (comp ) == 0
call	26:8	26:22	4	vlc_pipe
arg	26:18	26:22	5	comp
water	26:18	0:0	6	comp
op	26:24	0:0	4	==
water	26:27	0:0	4	0
stmts	27:4	78:4	3	
water	27:4	0:0	4	{
water	28:8	0:0	4	p_sys
op	28:13	0:0	4	->
water	28:15	0:0	4	write_fd
op	28:24	0:0	4	=
water	28:26	0:0	4	comp
op	28:30	0:0	4	[
water	28:31	0:0	4	1
op	28:32	0:0	4	]
water	28:33	0:0	4	;
decl	29:8	29:21	4	int	uncomp[2]
if	30:8	74:8	4	(vlc_pipe (uncomp ) == 0)
cond	30:12	30:33	5	vlc_pipe (uncomp ) == 0
call	30:12	30:28	6	vlc_pipe
arg	30:22	30:28	7	uncomp
water	30:22	0:0	8	uncomp
op	30:30	0:0	6	==
water	30:33	0:0	6	0
stmts	31:8	74:8	5	
water	31:8	0:0	6	{
water	32:12	0:0	6	p_sys
op	32:17	0:0	6	->
water	32:19	0:0	6	read_fd
op	32:27	0:0	6	=
water	32:29	0:0	6	uncomp
op	32:35	0:0	6	[
water	32:36	0:0	6	0
op	32:37	0:0	6	]
water	32:38	0:0	6	;
decl	34:12	34:46	6	posix_spawn_file_actions_t	actions
if	35:12	53:12	6	(posix_spawn_file_actions_init (& actions ) == 0)
cond	35:16	35:60	7	posix_spawn_file_actions_init (& actions ) == 0
call	35:16	35:55	8	posix_spawn_file_actions_init
arg	35:47	35:55	9	&actions
op	35:47	0:0	10	&
water	35:48	0:0	10	actions
op	35:57	0:0	8	==
water	35:60	0:0	8	0
stmts	36:12	53:12	7	
water	36:12	0:0	8	{
water	37:16	0:0	8	char
op	37:21	0:0	8	*
water	37:22	0:0	8	const
water	37:28	0:0	8	argv
op	37:32	0:0	8	[
op	37:33	0:0	8	]
op	37:35	0:0	8	=
water	37:37	0:0	8	{
water	37:39	0:0	8	(
water	37:40	0:0	8	char
op	37:45	0:0	8	*
water	37:46	0:0	8	)
water	37:47	0:0	8	path
water	37:51	0:0	8	,
water	37:53	0:0	8	NULL
water	37:58	0:0	8	}
water	37:59	0:0	8	;
if	38:16	46:16	8	(!posix_spawn_file_actions_adddup2 (& actions ,comp [ 0 ] ,0 ) && !posix_spawn_file_actions_adddup2 (& actions ,uncomp [ 1 ] ,1 ) && !posix_spawnp (& p_sys -> pid ,path ,& actions ,NULL ,argv ,environ ))
cond	38:20	41:42	9	!posix_spawn_file_actions_adddup2 (& actions ,comp [ 0 ] ,0 ) && !posix_spawn_file_actions_adddup2 (& actions ,uncomp [ 1 ] ,1 ) && !posix_spawnp (& p_sys -> pid ,path ,& actions ,NULL ,argv ,environ )
op	38:20	0:0	10	!
call	38:21	38:75	10	posix_spawn_file_actions_adddup2
arg	38:55	38:63	11	&actions
op	38:55	0:0	12	&
water	38:56	0:0	12	actions
arg	38:65	38:72	11	comp[0]
water	38:65	0:0	12	comp
op	38:69	0:0	12	[
water	38:70	0:0	12	0
op	38:71	0:0	12	]
arg	38:74	38:75	11	0
water	38:74	0:0	12	0
op	39:17	0:0	10	&&
op	39:20	0:0	10	!
call	39:21	39:77	10	posix_spawn_file_actions_adddup2
arg	39:55	39:63	11	&actions
op	39:55	0:0	12	&
water	39:56	0:0	12	actions
arg	39:65	39:74	11	uncomp[1]
water	39:65	0:0	12	uncomp
op	39:71	0:0	12	[
water	39:72	0:0	12	1
op	39:73	0:0	12	]
arg	39:76	39:77	11	1
water	39:76	0:0	12	1
op	40:17	0:0	10	&&
op	40:20	0:0	10	!
call	40:21	41:42	10	posix_spawnp
arg	40:35	40:46	11	&p_sys->pid
op	40:35	0:0	12	&
water	40:36	0:0	12	p_sys
op	40:41	0:0	12	->
water	40:43	0:0	12	pid
arg	40:48	40:52	11	path
water	40:48	0:0	12	path
arg	40:54	40:62	11	&actions
op	40:54	0:0	12	&
water	40:55	0:0	12	actions
arg	40:64	40:68	11	NULL
water	40:64	0:0	12	NULL
arg	40:70	40:74	11	argv
water	40:70	0:0	12	argv
arg	41:35	41:42	11	environ
water	41:35	0:0	12	environ
stmts	42:16	46:16	9	
water	42:16	0:0	10	{
if	43:20	45:41	10	(vlc_clone (& p_sys -> thread ,Thread ,stream ,VLC_THREAD_PRIORITY_INPUT ) == 0)
cond	43:24	44:65	11	vlc_clone (& p_sys -> thread ,Thread ,stream ,VLC_THREAD_PRIORITY_INPUT ) == 0
call	43:24	44:60	12	vlc_clone
arg	43:35	43:49	13	&p_sys->thread
op	43:35	0:0	14	&
water	43:36	0:0	14	p_sys
op	43:41	0:0	14	->
water	43:43	0:0	14	thread
arg	43:51	43:57	13	Thread
water	43:51	0:0	14	Thread
arg	43:59	43:65	13	stream
water	43:59	0:0	14	stream
arg	44:35	44:60	13	VLC_THREAD_PRIORITY_INPUT
water	44:35	0:0	14	VLC_THREAD_PRIORITY_INPUT
op	44:62	0:0	12	==
water	44:65	0:0	12	0
stmts	45:24	45:41	11	
water	45:24	0:0	12	ret
op	45:28	0:0	12	=
water	45:30	0:0	12	VLC_SUCCESS
water	45:41	0:0	12	;
water	46:16	0:0	10	}
else	47:16	51:16	8
stmts	48:16	51:16	9	
water	48:16	0:0	10	{
call	49:20	49:62	10	msg_Err
arg	49:29	49:35	11	stream
water	49:29	0:0	12	stream
arg	49:37	49:56	11	"cannot execute %s"
water	49:37	0:0	12	"cannot execute %s"
arg	49:58	49:62	11	path
water	49:58	0:0	12	path
water	49:63	0:0	10	;
water	50:20	0:0	10	p_sys
op	50:25	0:0	10	->
water	50:27	0:0	10	pid
op	50:31	0:0	10	=
op	50:33	0:0	10	-
water	50:34	0:0	10	1
water	50:35	0:0	10	;
water	51:16	0:0	10	}
call	52:16	52:58	8	posix_spawn_file_actions_destroy
arg	52:50	52:58	9	&actions
op	52:50	0:0	10	&
water	52:51	0:0	10	actions
water	52:59	0:0	8	;
water	53:12	0:0	8	}
switch	55:12	69:12	6	(p_sys -> pid =fork ( ))
cond	55:20	55:39	7	p_sys -> pid =fork ( )
water	55:20	0:0	8	p_sys
op	55:25	0:0	8	->
water	55:27	0:0	8	pid
op	55:31	0:0	8	=
call	55:33	55:39	8	fork
stmts	56:12	69:12	7	
water	56:12	0:0	8	{
water	57:16	0:0	8	case
op	57:21	0:0	8	-
water	57:22	0:0	8	1
water	57:23	0:0	8	:
call	58:20	58:77	8	msg_Err
arg	58:29	58:35	9	stream
water	58:29	0:0	10	stream
arg	58:37	58:54	9	"cannot fork: %s"
water	58:37	0:0	10	"cannot fork: %s"
arg	58:56	58:77	9	vlc_strerror_c(errno)
call	58:56	58:76	10	vlc_strerror_c
arg	58:71	58:76	11	errno
water	58:71	0:0	12	errno
water	58:78	0:0	8	;
break	59:20	59:25	8	
label	60:16	60:22	8	case 0 :
call	61:20	61:36	8	dup2
arg	61:26	61:33	9	comp[0]
water	61:26	0:0	10	comp
op	61:30	0:0	10	[
water	61:31	0:0	10	0
op	61:32	0:0	10	]
arg	61:35	61:36	9	0
water	61:35	0:0	10	0
water	61:37	0:0	8	;
call	62:20	62:38	8	dup2
arg	62:26	62:35	9	uncomp[1]
water	62:26	0:0	10	uncomp
op	62:32	0:0	10	[
water	62:33	0:0	10	1
op	62:34	0:0	10	]
arg	62:37	62:38	9	1
water	62:37	0:0	10	1
water	62:39	0:0	8	;
call	63:20	63:52	8	execlp
arg	63:28	63:32	9	path
water	63:28	0:0	10	path
arg	63:34	63:38	9	path
water	63:34	0:0	10	path
arg	63:40	63:52	9	(char*)NULL
water	63:40	0:0	10	(
water	63:41	0:0	10	char
op	63:46	0:0	10	*
water	63:47	0:0	10	)
water	63:48	0:0	10	NULL
water	63:53	0:0	8	;
call	64:20	64:27	8	exit
arg	64:26	64:27	9	1
water	64:26	0:0	10	1
water	64:28	0:0	8	;
label	65:16	65:23	8	default :
if	66:20	68:41	8	(vlc_clone (& p_sys -> thread ,Thread ,stream ,VLC_THREAD_PRIORITY_INPUT ) == 0)
cond	66:24	67:65	9	vlc_clone (& p_sys -> thread ,Thread ,stream ,VLC_THREAD_PRIORITY_INPUT ) == 0
call	66:24	67:60	10	vlc_clone
arg	66:35	66:49	11	&p_sys->thread
op	66:35	0:0	12	&
water	66:36	0:0	12	p_sys
op	66:41	0:0	12	->
water	66:43	0:0	12	thread
arg	66:51	66:57	11	Thread
water	66:51	0:0	12	Thread
arg	66:59	66:65	11	stream
water	66:59	0:0	12	stream
arg	67:35	67:60	11	VLC_THREAD_PRIORITY_INPUT
water	67:35	0:0	12	VLC_THREAD_PRIORITY_INPUT
op	67:62	0:0	10	==
water	67:65	0:0	10	0
stmts	68:24	68:41	9	
water	68:24	0:0	10	ret
op	68:28	0:0	10	=
water	68:30	0:0	10	VLC_SUCCESS
water	68:41	0:0	10	;
water	69:12	0:0	8	}
call	71:12	71:28	6	close
arg	71:19	71:28	7	uncomp[1]
water	71:19	0:0	8	uncomp
op	71:25	0:0	8	[
water	71:26	0:0	8	1
op	71:27	0:0	8	]
water	71:29	0:0	6	;
if	72:12	73:33	6	(ret != VLC_SUCCESS)
cond	72:16	72:23	7	ret != VLC_SUCCESS
water	72:16	0:0	8	ret
op	72:20	0:0	8	!=
water	72:23	0:0	8	VLC_SUCCESS
stmts	73:16	73:33	7	
call	73:16	73:32	8	close
arg	73:23	73:32	9	uncomp[0]
water	73:23	0:0	10	uncomp
op	73:29	0:0	10	[
water	73:30	0:0	10	0
op	73:31	0:0	10	]
water	73:33	0:0	8	;
water	74:8	0:0	6	}
call	75:8	75:22	4	close
arg	75:15	75:22	5	comp[0]
water	75:15	0:0	6	comp
op	75:19	0:0	6	[
water	75:20	0:0	6	0
op	75:21	0:0	6	]
water	75:23	0:0	4	;
if	76:8	77:27	4	(ret != VLC_SUCCESS)
cond	76:12	76:19	5	ret != VLC_SUCCESS
water	76:12	0:0	6	ret
op	76:16	0:0	6	!=
water	76:19	0:0	6	VLC_SUCCESS
stmts	77:12	77:27	5	
call	77:12	77:26	6	close
arg	77:19	77:26	7	comp[1]
water	77:19	0:0	8	comp
op	77:23	0:0	8	[
water	77:24	0:0	8	1
op	77:25	0:0	8	]
water	77:27	0:0	6	;
water	78:4	0:0	4	}
if	79:4	80:26	2	(ret == VLC_SUCCESS)
cond	79:8	79:15	3	ret == VLC_SUCCESS
water	79:8	0:0	4	ret
op	79:12	0:0	4	==
water	79:15	0:0	4	VLC_SUCCESS
stmts	80:8	80:26	3	
return	80:8	80:26	4	VLC_SUCCESS
water	80:15	0:0	5	VLC_SUCCESS
if	81:4	82:58	2	(p_sys -> pid != - 1)
cond	81:8	81:23	3	p_sys -> pid != - 1
water	81:8	0:0	4	p_sys
op	81:13	0:0	4	->
water	81:15	0:0	4	pid
op	81:19	0:0	4	!=
op	81:22	0:0	4	-
water	81:23	0:0	4	1
stmts	82:8	82:58	3	
while	82:8	82:58	4	(waitpid (p_sys -> pid ,& ( int ) { 0 } ,0 ) == - 1)
cond	82:15	82:56	5	waitpid (p_sys -> pid ,& ( int ) { 0 } ,0 ) == - 1
call	82:15	82:50	6	waitpid
arg	82:24	82:34	7	p_sys->pid
water	82:24	0:0	8	p_sys
op	82:29	0:0	8	->
water	82:31	0:0	8	pid
arg	82:36	82:47	7	&(int){0}
op	82:36	0:0	8	&
water	82:37	0:0	8	(
water	82:38	0:0	8	int
water	82:41	0:0	8	)
water	82:42	0:0	8	{
water	82:44	0:0	8	0
water	82:46	0:0	8	}
arg	82:49	82:50	7	0
water	82:49	0:0	8	0
op	82:52	0:0	6	==
op	82:55	0:0	6	-
water	82:56	0:0	6	1
stmts	82:58	82:58	5	
water	82:58	0:0	6	;
call	83:4	83:35	2	vlc_mutex_destroy
arg	83:23	83:35	3	&p_sys->lock
op	83:23	0:0	4	&
water	83:24	0:0	4	p_sys
op	83:29	0:0	4	->
water	83:31	0:0	4	lock
water	83:36	0:0	2	;
call	84:4	84:34	2	vlc_cond_destroy
arg	84:22	84:34	3	&p_sys->wait
op	84:22	0:0	4	&
water	84:23	0:0	4	p_sys
op	84:28	0:0	4	->
water	84:30	0:0	4	wait
water	84:35	0:0	2	;
call	85:4	85:15	2	free
arg	85:10	85:15	3	p_sys
water	85:10	0:0	4	p_sys
water	85:16	0:0	2	;
return	86:4	86:14	2	ret
water	86:11	0:0	3	ret
