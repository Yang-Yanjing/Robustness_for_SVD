func	2:0	139:0	0	static int	Capture
params	2:18	0:0	1	
param	2:20	2:37	2	demux_t *	p_demux
stmnts	0:0	138:22	1	
decl	4:4	4:39	2	demux_sys_t	*p_sys
op	4:23	0:0	2	=
water	4:25	0:0	2	p_demux
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:24	2	struct pollfd	pfd[2]
water	6:4	0:0	2	pfd
op	6:7	0:0	2	[
water	6:8	0:0	2	0
op	6:9	0:0	2	]
op	6:10	0:0	2	.
water	6:11	0:0	2	fd
op	6:14	0:0	2	=
water	6:16	0:0	2	p_sys
op	6:21	0:0	2	->
water	6:23	0:0	2	i_vfd
water	6:28	0:0	2	;
water	7:4	0:0	2	pfd
op	7:7	0:0	2	[
water	7:8	0:0	2	0
op	7:9	0:0	2	]
op	7:10	0:0	2	.
water	7:11	0:0	2	events
op	7:18	0:0	2	=
water	7:20	0:0	2	POLLIN
op	7:27	0:0	2	|
water	7:29	0:0	2	POLLPRI
water	7:36	0:0	2	;
if	8:4	12:4	2	(p_sys -> i_max_channel != - 1)
cond	8:9	8:34	3	p_sys -> i_max_channel != - 1
water	8:9	0:0	4	p_sys
op	8:14	0:0	4	->
water	8:16	0:0	4	i_max_channel
op	8:30	0:0	4	!=
op	8:33	0:0	4	-
water	8:34	0:0	4	1
stmts	9:4	12:4	3	
water	9:4	0:0	4	{
water	10:8	0:0	4	pfd
op	10:11	0:0	4	[
water	10:12	0:0	4	1
op	10:13	0:0	4	]
op	10:14	0:0	4	.
water	10:15	0:0	4	fd
op	10:18	0:0	4	=
water	10:20	0:0	4	p_sys
op	10:25	0:0	4	->
water	10:27	0:0	4	i_afd
water	10:32	0:0	4	;
water	11:8	0:0	4	pfd
op	11:11	0:0	4	[
water	11:12	0:0	4	1
op	11:13	0:0	4	]
op	11:14	0:0	4	.
water	11:15	0:0	4	events
op	11:22	0:0	4	=
water	11:24	0:0	4	POLLIN
op	11:31	0:0	4	|
water	11:33	0:0	4	POLLPRI
water	11:40	0:0	4	;
water	12:4	0:0	4	}
if	13:4	17:4	2	(poll (pfd ,1 + ( p_sys -> i_max_channel != - 1 ) ,READ_TIMEOUT ) < 0)
cond	13:9	13:71	3	poll (pfd ,1 + ( p_sys -> i_max_channel != - 1 ) ,READ_TIMEOUT ) < 0
call	13:9	13:67	4	poll
arg	13:15	13:18	5	pfd
water	13:15	0:0	6	pfd
arg	13:20	13:52	5	1+(p_sys->i_max_channel!=-1)
water	13:20	0:0	6	1
op	13:22	0:0	6	+
water	13:24	0:0	6	(
water	13:25	0:0	6	p_sys
op	13:30	0:0	6	->
water	13:32	0:0	6	i_max_channel
op	13:46	0:0	6	!=
op	13:49	0:0	6	-
water	13:50	0:0	6	1
water	13:51	0:0	6	)
arg	13:54	13:67	5	READ_TIMEOUT
water	13:54	0:0	6	READ_TIMEOUT
op	13:69	0:0	4	<
water	13:71	0:0	4	0
stmts	14:4	17:4	3	
water	14:4	0:0	4	{
call	15:8	15:72	4	msg_Warn
arg	15:18	15:25	5	p_demux
water	15:18	0:0	6	p_demux
arg	15:27	15:48	5	"couldn't poll(): %s"
water	15:27	0:0	6	"couldn't poll(): %s"
arg	15:50	15:72	5	vlc_strerror_c(errno)
call	15:50	15:70	6	vlc_strerror_c
arg	15:65	15:70	7	errno
water	15:65	0:0	8	errno
water	15:73	0:0	4	;
return	16:8	16:27	4	VLC_EGENERIC
water	16:15	0:0	5	VLC_EGENERIC
water	17:4	0:0	4	}
if	18:4	39:4	2	(pfd [ 0 ] . revents & POLLPRI)
cond	18:9	18:26	3	pfd [ 0 ] . revents & POLLPRI
water	18:9	0:0	4	pfd
op	18:12	0:0	4	[
water	18:13	0:0	4	0
op	18:14	0:0	4	]
op	18:15	0:0	4	.
water	18:16	0:0	4	revents
op	18:24	0:0	4	&
water	18:26	0:0	4	POLLPRI
stmts	19:4	39:4	3	
water	19:4	0:0	4	{
decl	20:8	20:26	4	unsigned int	i_val
if	21:8	23:45	4	(ioctl (p_sys -> i_vfd ,SDIVIDEO_IOC_RXGETEVENTS ,& i_val ) < 0)
cond	21:13	21:71	5	ioctl (p_sys -> i_vfd ,SDIVIDEO_IOC_RXGETEVENTS ,& i_val ) < 0
call	21:13	21:67	6	ioctl
arg	21:20	21:32	7	p_sys->i_vfd
water	21:20	0:0	8	p_sys
op	21:25	0:0	8	->
water	21:27	0:0	8	i_vfd
arg	21:34	21:58	7	SDIVIDEO_IOC_RXGETEVENTS
water	21:34	0:0	8	SDIVIDEO_IOC_RXGETEVENTS
arg	21:60	21:67	7	&i_val
op	21:60	0:0	8	&
water	21:61	0:0	8	i_val
op	21:69	0:0	6	<
water	21:71	0:0	6	0
stmts	22:12	23:45	5	
call	22:12	23:44	6	msg_Warn
arg	22:22	22:29	7	p_demux
water	22:22	0:0	8	p_demux
arg	22:31	22:70	7	"couldn't SDIVIDEO_IOC_RXGETEVENTS: %s"
water	22:31	0:0	8	"couldn't SDIVIDEO_IOC_RXGETEVENTS: %s"
arg	23:22	23:44	7	vlc_strerror_c(errno)
call	23:22	23:42	8	vlc_strerror_c
arg	23:37	23:42	9	errno
water	23:37	0:0	10	errno
water	23:45	0:0	6	;
else	24:8	36:8	4
stmts	25:8	36:8	5	
water	25:8	0:0	6	{
if	26:12	27:74	6	(i_val & SDIVIDEO_EVENT_RX_BUFFER)
cond	26:17	26:25	7	i_val & SDIVIDEO_EVENT_RX_BUFFER
water	26:17	0:0	8	i_val
op	26:23	0:0	8	&
water	26:25	0:0	8	SDIVIDEO_EVENT_RX_BUFFER
stmts	27:16	27:74	7	
call	27:16	27:73	8	msg_Warn
arg	27:26	27:33	9	p_demux
water	27:26	0:0	10	p_demux
arg	27:35	27:73	9	"driver receive buffer queue overrun"
water	27:35	0:0	10	"driver receive buffer queue overrun"
water	27:74	0:0	8	;
if	28:12	29:66	6	(i_val & SDIVIDEO_EVENT_RX_FIFO)
cond	28:17	28:25	7	i_val & SDIVIDEO_EVENT_RX_FIFO
water	28:17	0:0	8	i_val
op	28:23	0:0	8	&
water	28:25	0:0	8	SDIVIDEO_EVENT_RX_FIFO
stmts	29:16	29:66	7	
call	29:16	29:65	8	msg_Warn
arg	29:26	29:33	9	p_demux
water	29:26	0:0	10	p_demux
arg	29:35	29:65	9	"onboard receive FIFO overrun"
water	29:35	0:0	10	"onboard receive FIFO overrun"
water	29:66	0:0	8	;
if	30:12	31:59	6	(i_val & SDIVIDEO_EVENT_RX_CARRIER)
cond	30:17	30:25	7	i_val & SDIVIDEO_EVENT_RX_CARRIER
water	30:17	0:0	8	i_val
op	30:23	0:0	8	&
water	30:25	0:0	8	SDIVIDEO_EVENT_RX_CARRIER
stmts	31:16	31:59	7	
call	31:16	31:58	8	msg_Warn
arg	31:26	31:33	9	p_demux
water	31:26	0:0	10	p_demux
arg	31:35	31:58	9	"carrier status change"
water	31:35	0:0	10	"carrier status change"
water	31:59	0:0	8	;
if	32:12	33:56	6	(i_val & SDIVIDEO_EVENT_RX_DATA)
cond	32:17	32:25	7	i_val & SDIVIDEO_EVENT_RX_DATA
water	32:17	0:0	8	i_val
op	32:23	0:0	8	&
water	32:25	0:0	8	SDIVIDEO_EVENT_RX_DATA
stmts	33:16	33:56	7	
call	33:16	33:55	8	msg_Warn
arg	33:26	33:33	9	p_demux
water	33:26	0:0	10	p_demux
arg	33:35	33:55	9	"data status change"
water	33:35	0:0	10	"data status change"
water	33:56	0:0	8	;
if	34:12	35:60	6	(i_val & SDIVIDEO_EVENT_RX_STD)
cond	34:17	34:25	7	i_val & SDIVIDEO_EVENT_RX_STD
water	34:17	0:0	8	i_val
op	34:23	0:0	8	&
water	34:25	0:0	8	SDIVIDEO_EVENT_RX_STD
stmts	35:16	35:60	7	
call	35:16	35:59	8	msg_Warn
arg	35:26	35:33	9	p_demux
water	35:26	0:0	10	p_demux
arg	35:35	35:59	9	"standard status change"
water	35:35	0:0	10	"standard status change"
water	35:60	0:0	8	;
water	36:8	0:0	6	}
water	37:8	0:0	4	p_sys
op	37:13	0:0	4	->
water	37:15	0:0	4	i_next_adate
op	37:28	0:0	4	+=
water	37:31	0:0	4	CLOCK_GAP
water	37:40	0:0	4	;
water	38:8	0:0	4	p_sys
op	38:13	0:0	4	->
water	38:15	0:0	4	i_next_vdate
op	38:28	0:0	4	+=
water	38:31	0:0	4	CLOCK_GAP
water	38:40	0:0	4	;
water	39:4	0:0	4	}
if	40:4	59:4	2	(p_sys -> i_max_channel != - 1 && pfd [ 1 ] . revents & POLLPRI)
cond	40:9	40:56	3	p_sys -> i_max_channel != - 1 && pfd [ 1 ] . revents & POLLPRI
water	40:9	0:0	4	p_sys
op	40:14	0:0	4	->
water	40:16	0:0	4	i_max_channel
op	40:30	0:0	4	!=
op	40:33	0:0	4	-
water	40:34	0:0	4	1
op	40:36	0:0	4	&&
water	40:39	0:0	4	pfd
op	40:42	0:0	4	[
water	40:43	0:0	4	1
op	40:44	0:0	4	]
op	40:45	0:0	4	.
water	40:46	0:0	4	revents
op	40:54	0:0	4	&
water	40:56	0:0	4	POLLPRI
stmts	41:4	59:4	3	
water	41:4	0:0	4	{
decl	42:8	42:26	4	unsigned int	i_val
if	43:8	45:45	4	(ioctl (p_sys -> i_afd ,SDIAUDIO_IOC_RXGETEVENTS ,& i_val ) < 0)
cond	43:13	43:71	5	ioctl (p_sys -> i_afd ,SDIAUDIO_IOC_RXGETEVENTS ,& i_val ) < 0
call	43:13	43:67	6	ioctl
arg	43:20	43:32	7	p_sys->i_afd
water	43:20	0:0	8	p_sys
op	43:25	0:0	8	->
water	43:27	0:0	8	i_afd
arg	43:34	43:58	7	SDIAUDIO_IOC_RXGETEVENTS
water	43:34	0:0	8	SDIAUDIO_IOC_RXGETEVENTS
arg	43:60	43:67	7	&i_val
op	43:60	0:0	8	&
water	43:61	0:0	8	i_val
op	43:69	0:0	6	<
water	43:71	0:0	6	0
stmts	44:12	45:45	5	
call	44:12	45:44	6	msg_Warn
arg	44:22	44:29	7	p_demux
water	44:22	0:0	8	p_demux
arg	44:31	44:70	7	"couldn't SDIAUDIO_IOC_RXGETEVENTS: %s"
water	44:31	0:0	8	"couldn't SDIAUDIO_IOC_RXGETEVENTS: %s"
arg	45:22	45:44	7	vlc_strerror_c(errno)
call	45:22	45:42	8	vlc_strerror_c
arg	45:37	45:42	9	errno
water	45:37	0:0	10	errno
water	45:45	0:0	6	;
else	46:8	56:8	4
stmts	47:8	56:8	5	
water	47:8	0:0	6	{
if	48:12	49:74	6	(i_val & SDIAUDIO_EVENT_RX_BUFFER)
cond	48:17	48:25	7	i_val & SDIAUDIO_EVENT_RX_BUFFER
water	48:17	0:0	8	i_val
op	48:23	0:0	8	&
water	48:25	0:0	8	SDIAUDIO_EVENT_RX_BUFFER
stmts	49:16	49:74	7	
call	49:16	49:73	8	msg_Warn
arg	49:26	49:33	9	p_demux
water	49:26	0:0	10	p_demux
arg	49:35	49:73	9	"driver receive buffer queue overrun"
water	49:35	0:0	10	"driver receive buffer queue overrun"
water	49:74	0:0	8	;
if	50:12	51:66	6	(i_val & SDIAUDIO_EVENT_RX_FIFO)
cond	50:17	50:25	7	i_val & SDIAUDIO_EVENT_RX_FIFO
water	50:17	0:0	8	i_val
op	50:23	0:0	8	&
water	50:25	0:0	8	SDIAUDIO_EVENT_RX_FIFO
stmts	51:16	51:66	7	
call	51:16	51:65	8	msg_Warn
arg	51:26	51:33	9	p_demux
water	51:26	0:0	10	p_demux
arg	51:35	51:65	9	"onboard receive FIFO overrun"
water	51:35	0:0	10	"onboard receive FIFO overrun"
water	51:66	0:0	8	;
if	52:12	53:59	6	(i_val & SDIAUDIO_EVENT_RX_CARRIER)
cond	52:17	52:25	7	i_val & SDIAUDIO_EVENT_RX_CARRIER
water	52:17	0:0	8	i_val
op	52:23	0:0	8	&
water	52:25	0:0	8	SDIAUDIO_EVENT_RX_CARRIER
stmts	53:16	53:59	7	
call	53:16	53:58	8	msg_Warn
arg	53:26	53:33	9	p_demux
water	53:26	0:0	10	p_demux
arg	53:35	53:58	9	"carrier status change"
water	53:35	0:0	10	"carrier status change"
water	53:59	0:0	8	;
if	54:12	55:56	6	(i_val & SDIAUDIO_EVENT_RX_DATA)
cond	54:17	54:25	7	i_val & SDIAUDIO_EVENT_RX_DATA
water	54:17	0:0	8	i_val
op	54:23	0:0	8	&
water	54:25	0:0	8	SDIAUDIO_EVENT_RX_DATA
stmts	55:16	55:56	7	
call	55:16	55:55	8	msg_Warn
arg	55:26	55:33	9	p_demux
water	55:26	0:0	10	p_demux
arg	55:35	55:55	9	"data status change"
water	55:35	0:0	10	"data status change"
water	55:56	0:0	8	;
water	56:8	0:0	6	}
water	57:8	0:0	4	p_sys
op	57:13	0:0	4	->
water	57:15	0:0	4	i_next_adate
op	57:28	0:0	4	+=
water	57:31	0:0	4	CLOCK_GAP
water	57:40	0:0	4	;
water	58:8	0:0	4	p_sys
op	58:13	0:0	4	->
water	58:15	0:0	4	i_next_vdate
op	58:28	0:0	4	+=
water	58:31	0:0	4	CLOCK_GAP
water	58:40	0:0	4	;
water	59:4	0:0	4	}
if	60:4	98:4	2	(pfd [ 0 ] . revents & POLLIN)
cond	60:9	60:26	3	pfd [ 0 ] . revents & POLLIN
water	60:9	0:0	4	pfd
op	60:12	0:0	4	[
water	60:13	0:0	4	0
op	60:14	0:0	4	]
op	60:15	0:0	4	.
water	60:16	0:0	4	revents
op	60:24	0:0	4	&
water	60:26	0:0	4	POLLIN
stmts	61:4	98:4	3	
water	61:4	0:0	4	{
if	63:8	69:8	4	(ioctl (p_sys -> i_vfd ,SDIVIDEO_IOC_DQBUF ,p_sys -> i_current_vbuffer ) < 0)
cond	63:13	64:16	5	ioctl (p_sys -> i_vfd ,SDIVIDEO_IOC_DQBUF ,p_sys -> i_current_vbuffer ) < 0
call	63:13	63:79	6	ioctl
arg	63:20	63:32	7	p_sys->i_vfd
water	63:20	0:0	8	p_sys
op	63:25	0:0	8	->
water	63:27	0:0	8	i_vfd
arg	63:34	63:52	7	SDIVIDEO_IOC_DQBUF
water	63:34	0:0	8	SDIVIDEO_IOC_DQBUF
arg	63:54	63:79	7	p_sys->i_current_vbuffer
water	63:54	0:0	8	p_sys
op	63:59	0:0	8	->
water	63:61	0:0	8	i_current_vbuffer
op	64:14	0:0	6	<
water	64:16	0:0	6	0
stmts	65:8	69:8	5	
water	65:8	0:0	6	{
call	66:12	67:44	6	msg_Warn
arg	66:22	66:29	7	p_demux
water	66:22	0:0	8	p_demux
arg	66:31	66:64	7	"couldn't SDIVIDEO_IOC_DQBUF: %s"
water	66:31	0:0	8	"couldn't SDIVIDEO_IOC_DQBUF: %s"
arg	67:22	67:44	7	vlc_strerror_c(errno)
call	67:22	67:42	8	vlc_strerror_c
arg	67:37	67:42	9	errno
water	67:37	0:0	10	errno
water	67:45	0:0	6	;
return	68:12	68:31	6	VLC_EGENERIC
water	68:19	0:0	7	VLC_EGENERIC
water	69:8	0:0	6	}
if	70:8	71:29	4	(HandleVideo (p_demux ,p_sys -> pp_vbuffers [ p_sys -> i_current_vbuffer ] ) != VLC_SUCCESS)
cond	70:12	70:84	5	HandleVideo (p_demux ,p_sys -> pp_vbuffers [ p_sys -> i_current_vbuffer ] ) != VLC_SUCCESS
call	70:12	70:79	6	HandleVideo
arg	70:25	70:32	7	p_demux
water	70:25	0:0	8	p_demux
arg	70:34	70:79	7	p_sys->pp_vbuffers[p_sys->i_current_vbuffer]
water	70:34	0:0	8	p_sys
op	70:39	0:0	8	->
water	70:41	0:0	8	pp_vbuffers
op	70:52	0:0	8	[
water	70:53	0:0	8	p_sys
op	70:58	0:0	8	->
water	70:60	0:0	8	i_current_vbuffer
op	70:77	0:0	8	]
op	70:81	0:0	6	!=
water	70:84	0:0	6	VLC_SUCCESS
stmts	71:12	71:29	5	
return	71:12	71:29	6	VLC_ENOMEM
water	71:19	0:0	7	VLC_ENOMEM
if	72:8	78:8	4	(ioctl (p_sys -> i_vfd ,SDIVIDEO_IOC_QBUF ,p_sys -> i_current_vbuffer ) < 0)
cond	72:13	73:16	5	ioctl (p_sys -> i_vfd ,SDIVIDEO_IOC_QBUF ,p_sys -> i_current_vbuffer ) < 0
call	72:13	72:78	6	ioctl
arg	72:20	72:32	7	p_sys->i_vfd
water	72:20	0:0	8	p_sys
op	72:25	0:0	8	->
water	72:27	0:0	8	i_vfd
arg	72:34	72:51	7	SDIVIDEO_IOC_QBUF
water	72:34	0:0	8	SDIVIDEO_IOC_QBUF
arg	72:53	72:78	7	p_sys->i_current_vbuffer
water	72:53	0:0	8	p_sys
op	72:58	0:0	8	->
water	72:60	0:0	8	i_current_vbuffer
op	73:14	0:0	6	<
water	73:16	0:0	6	0
stmts	74:8	78:8	5	
water	74:8	0:0	6	{
call	75:12	76:44	6	msg_Warn
arg	75:22	75:29	7	p_demux
water	75:22	0:0	8	p_demux
arg	75:31	75:63	7	"couldn't SDIVIDEO_IOC_QBUF: %s"
water	75:31	0:0	8	"couldn't SDIVIDEO_IOC_QBUF: %s"
arg	76:22	76:44	7	vlc_strerror_c(errno)
call	76:22	76:42	8	vlc_strerror_c
arg	76:37	76:42	9	errno
water	76:37	0:0	10	errno
water	76:45	0:0	6	;
return	77:12	77:31	6	VLC_EGENERIC
water	77:19	0:0	7	VLC_EGENERIC
water	78:8	0:0	6	}
water	79:8	0:0	4	p_sys
op	79:13	0:0	4	->
water	79:15	0:0	4	i_current_vbuffer
op	79:32	0:0	4	++
water	79:34	0:0	4	;
water	80:8	0:0	4	p_sys
op	80:13	0:0	4	->
water	80:15	0:0	4	i_current_vbuffer
op	80:33	0:0	4	%=
water	80:36	0:0	4	p_sys
op	80:41	0:0	4	->
water	80:43	0:0	4	i_vbuffers
water	80:53	0:0	4	;
decl	82:8	82:59	4	uint8_t	*p_buffer
op	82:26	0:0	4	=
call	82:28	82:58	5	malloc
arg	82:36	82:58	6	p_sys->i_vbuffer_size
water	82:36	0:0	7	p_sys
op	82:41	0:0	7	->
water	82:43	0:0	7	i_vbuffer_size
if	83:8	84:29	4	(unlikely (! p_buffer ))
cond	83:12	83:32	5	unlikely (! p_buffer )
call	83:12	83:32	6	unlikely
arg	83:22	83:32	7	!p_buffer
op	83:22	0:0	8	!
water	83:23	0:0	8	p_buffer
stmts	84:12	84:29	5	
return	84:12	84:29	6	VLC_ENOMEM
water	84:19	0:0	7	VLC_ENOMEM
if	85:8	90:8	4	(read (p_sys -> i_vfd ,p_buffer ,p_sys -> i_vbuffer_size ) < 0)
cond	85:13	85:69	5	read (p_sys -> i_vfd ,p_buffer ,p_sys -> i_vbuffer_size ) < 0
call	85:13	85:65	6	read
arg	85:19	85:31	7	p_sys->i_vfd
water	85:19	0:0	8	p_sys
op	85:24	0:0	8	->
water	85:26	0:0	8	i_vfd
arg	85:33	85:41	7	p_buffer
water	85:33	0:0	8	p_buffer
arg	85:43	85:65	7	p_sys->i_vbuffer_size
water	85:43	0:0	8	p_sys
op	85:48	0:0	8	->
water	85:50	0:0	8	i_vbuffer_size
op	85:67	0:0	6	<
water	85:69	0:0	6	0
stmts	86:8	90:8	5	
water	86:8	0:0	6	{
call	87:12	87:74	6	msg_Warn
arg	87:22	87:29	7	p_demux
water	87:22	0:0	8	p_demux
arg	87:31	87:50	7	"couldn't read: %s"
water	87:31	0:0	8	"couldn't read: %s"
arg	87:52	87:74	7	vlc_strerror_c(errno)
call	87:52	87:72	8	vlc_strerror_c
arg	87:67	87:72	9	errno
water	87:67	0:0	10	errno
water	87:75	0:0	6	;
call	88:12	88:27	6	free
arg	88:18	88:27	7	p_buffer
water	88:18	0:0	8	p_buffer
water	88:28	0:0	6	;
return	89:12	89:31	6	VLC_EGENERIC
water	89:19	0:0	7	VLC_EGENERIC
water	90:8	0:0	6	}
if	91:8	95:8	4	(HandleVideo (p_demux ,p_buffer ) != VLC_SUCCESS)
cond	91:12	91:48	5	HandleVideo (p_demux ,p_buffer ) != VLC_SUCCESS
call	91:12	91:43	6	HandleVideo
arg	91:25	91:32	7	p_demux
water	91:25	0:0	8	p_demux
arg	91:34	91:43	7	p_buffer
water	91:34	0:0	8	p_buffer
op	91:45	0:0	6	!=
water	91:48	0:0	6	VLC_SUCCESS
stmts	92:8	95:8	5	
water	92:8	0:0	6	{
call	93:12	93:27	6	free
arg	93:18	93:27	7	p_buffer
water	93:18	0:0	8	p_buffer
water	93:28	0:0	6	;
return	94:12	94:29	6	VLC_ENOMEM
water	94:19	0:0	7	VLC_ENOMEM
water	95:8	0:0	6	}
call	96:8	96:23	4	free
arg	96:14	96:23	5	p_buffer
water	96:14	0:0	6	p_buffer
water	96:24	0:0	4	;
water	98:4	0:0	4	}
if	99:4	137:4	2	(p_sys -> i_max_channel != - 1 && pfd [ 1 ] . revents & POLLIN)
cond	99:9	99:56	3	p_sys -> i_max_channel != - 1 && pfd [ 1 ] . revents & POLLIN
water	99:9	0:0	4	p_sys
op	99:14	0:0	4	->
water	99:16	0:0	4	i_max_channel
op	99:30	0:0	4	!=
op	99:33	0:0	4	-
water	99:34	0:0	4	1
op	99:36	0:0	4	&&
water	99:39	0:0	4	pfd
op	99:42	0:0	4	[
water	99:43	0:0	4	1
op	99:44	0:0	4	]
op	99:45	0:0	4	.
water	99:46	0:0	4	revents
op	99:54	0:0	4	&
water	99:56	0:0	4	POLLIN
stmts	100:4	137:4	3	
water	100:4	0:0	4	{
if	102:8	108:8	4	(ioctl (p_sys -> i_afd ,SDIAUDIO_IOC_DQBUF ,p_sys -> i_current_abuffer ) < 0)
cond	102:13	103:16	5	ioctl (p_sys -> i_afd ,SDIAUDIO_IOC_DQBUF ,p_sys -> i_current_abuffer ) < 0
call	102:13	102:79	6	ioctl
arg	102:20	102:32	7	p_sys->i_afd
water	102:20	0:0	8	p_sys
op	102:25	0:0	8	->
water	102:27	0:0	8	i_afd
arg	102:34	102:52	7	SDIAUDIO_IOC_DQBUF
water	102:34	0:0	8	SDIAUDIO_IOC_DQBUF
arg	102:54	102:79	7	p_sys->i_current_abuffer
water	102:54	0:0	8	p_sys
op	102:59	0:0	8	->
water	102:61	0:0	8	i_current_abuffer
op	103:14	0:0	6	<
water	103:16	0:0	6	0
stmts	104:8	108:8	5	
water	104:8	0:0	6	{
call	105:12	106:44	6	msg_Warn
arg	105:22	105:29	7	p_demux
water	105:22	0:0	8	p_demux
arg	105:31	105:64	7	"couldn't SDIAUDIO_IOC_DQBUF: %s"
water	105:31	0:0	8	"couldn't SDIAUDIO_IOC_DQBUF: %s"
arg	106:22	106:44	7	vlc_strerror_c(errno)
call	106:22	106:42	8	vlc_strerror_c
arg	106:37	106:42	9	errno
water	106:37	0:0	10	errno
water	106:45	0:0	6	;
return	107:12	107:31	6	VLC_EGENERIC
water	107:19	0:0	7	VLC_EGENERIC
water	108:8	0:0	6	}
if	109:8	110:29	4	(HandleAudio (p_demux ,p_sys -> pp_abuffers [ p_sys -> i_current_abuffer ] ) != VLC_SUCCESS)
cond	109:12	109:84	5	HandleAudio (p_demux ,p_sys -> pp_abuffers [ p_sys -> i_current_abuffer ] ) != VLC_SUCCESS
call	109:12	109:79	6	HandleAudio
arg	109:25	109:32	7	p_demux
water	109:25	0:0	8	p_demux
arg	109:34	109:79	7	p_sys->pp_abuffers[p_sys->i_current_abuffer]
water	109:34	0:0	8	p_sys
op	109:39	0:0	8	->
water	109:41	0:0	8	pp_abuffers
op	109:52	0:0	8	[
water	109:53	0:0	8	p_sys
op	109:58	0:0	8	->
water	109:60	0:0	8	i_current_abuffer
op	109:77	0:0	8	]
op	109:81	0:0	6	!=
water	109:84	0:0	6	VLC_SUCCESS
stmts	110:12	110:29	5	
return	110:12	110:29	6	VLC_ENOMEM
water	110:19	0:0	7	VLC_ENOMEM
if	111:8	117:8	4	(ioctl (p_sys -> i_afd ,SDIAUDIO_IOC_QBUF ,p_sys -> i_current_abuffer ) < 0)
cond	111:13	112:16	5	ioctl (p_sys -> i_afd ,SDIAUDIO_IOC_QBUF ,p_sys -> i_current_abuffer ) < 0
call	111:13	111:78	6	ioctl
arg	111:20	111:32	7	p_sys->i_afd
water	111:20	0:0	8	p_sys
op	111:25	0:0	8	->
water	111:27	0:0	8	i_afd
arg	111:34	111:51	7	SDIAUDIO_IOC_QBUF
water	111:34	0:0	8	SDIAUDIO_IOC_QBUF
arg	111:53	111:78	7	p_sys->i_current_abuffer
water	111:53	0:0	8	p_sys
op	111:58	0:0	8	->
water	111:60	0:0	8	i_current_abuffer
op	112:14	0:0	6	<
water	112:16	0:0	6	0
stmts	113:8	117:8	5	
water	113:8	0:0	6	{
call	114:12	115:44	6	msg_Warn
arg	114:22	114:29	7	p_demux
water	114:22	0:0	8	p_demux
arg	114:31	114:63	7	"couldn't SDIAUDIO_IOC_QBUF: %s"
water	114:31	0:0	8	"couldn't SDIAUDIO_IOC_QBUF: %s"
arg	115:22	115:44	7	vlc_strerror_c(errno)
call	115:22	115:42	8	vlc_strerror_c
arg	115:37	115:42	9	errno
water	115:37	0:0	10	errno
water	115:45	0:0	6	;
return	116:12	116:31	6	VLC_EGENERIC
water	116:19	0:0	7	VLC_EGENERIC
water	117:8	0:0	6	}
water	118:8	0:0	4	p_sys
op	118:13	0:0	4	->
water	118:15	0:0	4	i_current_abuffer
op	118:32	0:0	4	++
water	118:34	0:0	4	;
water	119:8	0:0	4	p_sys
op	119:13	0:0	4	->
water	119:15	0:0	4	i_current_abuffer
op	119:33	0:0	4	%=
water	119:36	0:0	4	p_sys
op	119:41	0:0	4	->
water	119:43	0:0	4	i_abuffers
water	119:53	0:0	4	;
decl	121:8	121:59	4	uint8_t	*p_buffer
op	121:26	0:0	4	=
call	121:28	121:58	5	malloc
arg	121:36	121:58	6	p_sys->i_abuffer_size
water	121:36	0:0	7	p_sys
op	121:41	0:0	7	->
water	121:43	0:0	7	i_abuffer_size
if	122:8	123:29	4	(unlikely (! p_buffer ))
cond	122:12	122:32	5	unlikely (! p_buffer )
call	122:12	122:32	6	unlikely
arg	122:22	122:32	7	!p_buffer
op	122:22	0:0	8	!
water	122:23	0:0	8	p_buffer
stmts	123:12	123:29	5	
return	123:12	123:29	6	VLC_ENOMEM
water	123:19	0:0	7	VLC_ENOMEM
if	124:8	129:8	4	(read (p_sys -> i_afd ,p_buffer ,p_sys -> i_abuffer_size ) < 0)
cond	124:13	124:69	5	read (p_sys -> i_afd ,p_buffer ,p_sys -> i_abuffer_size ) < 0
call	124:13	124:65	6	read
arg	124:19	124:31	7	p_sys->i_afd
water	124:19	0:0	8	p_sys
op	124:24	0:0	8	->
water	124:26	0:0	8	i_afd
arg	124:33	124:41	7	p_buffer
water	124:33	0:0	8	p_buffer
arg	124:43	124:65	7	p_sys->i_abuffer_size
water	124:43	0:0	8	p_sys
op	124:48	0:0	8	->
water	124:50	0:0	8	i_abuffer_size
op	124:67	0:0	6	<
water	124:69	0:0	6	0
stmts	125:8	129:8	5	
water	125:8	0:0	6	{
call	126:12	126:74	6	msg_Warn
arg	126:22	126:29	7	p_demux
water	126:22	0:0	8	p_demux
arg	126:31	126:50	7	"couldn't read: %s"
water	126:31	0:0	8	"couldn't read: %s"
arg	126:52	126:74	7	vlc_strerror_c(errno)
call	126:52	126:72	8	vlc_strerror_c
arg	126:67	126:72	9	errno
water	126:67	0:0	10	errno
water	126:75	0:0	6	;
call	127:12	127:27	6	free
arg	127:18	127:27	7	p_buffer
water	127:18	0:0	8	p_buffer
water	127:28	0:0	6	;
return	128:12	128:31	6	VLC_EGENERIC
water	128:19	0:0	7	VLC_EGENERIC
water	129:8	0:0	6	}
if	130:8	134:8	4	(HandleAudio (p_demux ,p_buffer ) != VLC_SUCCESS)
cond	130:12	130:48	5	HandleAudio (p_demux ,p_buffer ) != VLC_SUCCESS
call	130:12	130:43	6	HandleAudio
arg	130:25	130:32	7	p_demux
water	130:25	0:0	8	p_demux
arg	130:34	130:43	7	p_buffer
water	130:34	0:0	8	p_buffer
op	130:45	0:0	6	!=
water	130:48	0:0	6	VLC_SUCCESS
stmts	131:8	134:8	5	
water	131:8	0:0	6	{
call	132:12	132:27	6	free
arg	132:18	132:27	7	p_buffer
water	132:18	0:0	8	p_buffer
water	132:28	0:0	6	;
return	133:12	133:29	6	VLC_ENOMEM
water	133:19	0:0	7	VLC_ENOMEM
water	134:8	0:0	6	}
call	135:8	135:23	4	free
arg	135:14	135:23	5	p_buffer
water	135:14	0:0	6	p_buffer
water	135:24	0:0	4	;
water	137:4	0:0	4	}
return	138:4	138:22	2	VLC_SUCCESS
water	138:11	0:0	3	VLC_SUCCESS
