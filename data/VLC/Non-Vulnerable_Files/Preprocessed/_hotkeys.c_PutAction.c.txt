func	1:0	910:0	0	static int	PutAction
params	1:20	0:0	1	
param	1:22	1:43	2	intf_thread_t *	p_intf
param	1:45	1:58	2	int	i_action
stmnts	0:0	909:22	1	
decl	3:4	3:37	2	intf_sys_t	*p_sys
op	3:22	0:0	2	=
water	3:24	0:0	2	p_intf
op	3:30	0:0	2	->
water	3:32	0:0	2	p_sys
decl	4:4	4:45	2	playlist_t	*p_playlist
op	4:27	0:0	2	=
call	4:29	4:44	3	pl_Get
arg	4:37	4:44	4	p_intf
water	4:37	0:0	5	p_intf
decl	6:4	6:65	2	input_thread_t	*p_input
op	6:28	0:0	2	=
call	6:30	6:64	3	playlist_CurrentInput
arg	6:53	6:64	4	p_playlist
water	6:53	0:0	5	p_playlist
decl	8:4	8:69	2	vout_thread_t	*p_vout
op	8:26	0:0	2	=
water	8:28	0:0	2	p_input
water	8:36	0:0	2	?
call	8:38	8:61	3	input_GetVout
arg	8:53	8:61	4	p_input
water	8:53	0:0	5	p_input
water	8:63	0:0	2	:
water	8:65	0:0	2	NULL
if	13:4	14:69	2	(p_vout && p_vout != p_sys -> p_last_vout)
cond	13:8	13:35	3	p_vout && p_vout != p_sys -> p_last_vout
water	13:8	0:0	4	p_vout
op	13:15	0:0	4	&&
water	13:18	0:0	4	p_vout
op	13:25	0:0	4	!=
water	13:28	0:0	4	p_sys
op	13:33	0:0	4	->
water	13:35	0:0	4	p_last_vout
stmts	14:8	14:69	3	
water	14:8	0:0	4	p_sys
op	14:13	0:0	4	->
water	14:15	0:0	4	slider_chan
op	14:27	0:0	4	=
call	14:29	14:68	4	vout_RegisterSubpictureChannel
arg	14:61	14:68	5	p_vout
water	14:61	0:0	6	p_vout
water	14:69	0:0	4	;
water	15:4	0:0	2	p_sys
op	15:9	0:0	2	->
water	15:11	0:0	2	p_last_vout
op	15:23	0:0	2	=
water	15:25	0:0	2	p_vout
water	15:31	0:0	2	;
switch	17:4	904:4	2	(i_action)
cond	17:12	17:12	3	i_action
water	17:12	0:0	4	i_action
stmts	18:4	904:4	3	
water	18:4	0:0	4	{
label	20:8	20:26	4	case ACTIONID_QUIT :
call	21:12	21:42	4	libvlc_Quit
arg	21:25	21:42	5	p_intf->p_libvlc
water	21:25	0:0	6	p_intf
op	21:31	0:0	6	->
water	21:33	0:0	6	p_libvlc
water	21:43	0:0	4	;
call	22:12	22:42	4	ClearChannels
arg	22:27	22:33	5	p_intf
water	22:27	0:0	6	p_intf
arg	22:35	22:42	5	p_vout
water	22:35	0:0	6	p_vout
water	22:43	0:0	4	;
call	23:12	23:48	4	DisplayMessage
arg	23:28	23:34	5	p_vout
water	23:28	0:0	6	p_vout
arg	23:36	23:48	5	_("Quit")
call	23:36	23:46	6	_
arg	23:39	23:46	7	"Quit"
water	23:39	0:0	8	"Quit"
water	23:49	0:0	4	;
break	24:12	24:17	4	
label	25:8	25:37	4	case ACTIONID_INTF_TOGGLE_FSC :
label	26:8	26:31	4	case ACTIONID_INTF_HIDE :
call	27:12	27:75	4	var_TriggerCallback
arg	27:33	27:49	5	p_intf->p_libvlc
water	27:33	0:0	6	p_intf
op	27:39	0:0	6	->
water	27:41	0:0	6	p_libvlc
arg	27:51	27:75	5	"intf-toggle-fscontrol"
water	27:51	0:0	6	"intf-toggle-fscontrol"
water	27:76	0:0	4	;
break	28:12	28:17	4	
label	29:8	29:31	4	case ACTIONID_INTF_BOSS :
call	30:12	30:63	4	var_TriggerCallback
arg	30:33	30:49	5	p_intf->p_libvlc
water	30:33	0:0	6	p_intf
op	30:39	0:0	6	->
water	30:41	0:0	6	p_libvlc
arg	30:51	30:63	5	"intf-boss"
water	30:51	0:0	6	"intf-boss"
water	30:64	0:0	4	;
break	31:12	31:17	4	
label	32:8	32:37	4	case ACTIONID_INTF_POPUP_MENU :
call	33:12	33:68	4	var_TriggerCallback
arg	33:33	33:49	5	p_intf->p_libvlc
water	33:33	0:0	6	p_intf
op	33:39	0:0	6	->
water	33:41	0:0	6	p_libvlc
arg	33:51	33:68	5	"intf-popupmenu"
water	33:51	0:0	6	"intf-popupmenu"
water	33:69	0:0	4	;
break	34:12	34:17	4	
label	36:8	36:26	4	case ACTIONID_LOOP :
water	37:8	0:0	4	{
decl	39:12	39:28	4	const char	*mode
if	40:12	44:12	4	(var_GetBool (p_playlist ,"repeat" ))
cond	40:16	40:50	5	var_GetBool (p_playlist ,"repeat" )
call	40:16	40:50	6	var_GetBool
arg	40:29	40:39	7	p_playlist
water	40:29	0:0	8	p_playlist
arg	40:41	40:50	7	"repeat"
water	40:41	0:0	8	"repeat"
stmts	41:12	44:12	5	
water	41:12	0:0	6	{
call	42:16	42:57	6	var_SetBool
arg	42:29	42:39	7	p_playlist
water	42:29	0:0	8	p_playlist
arg	42:41	42:49	7	"repeat"
water	42:41	0:0	8	"repeat"
arg	42:51	42:57	7	false
water	42:51	0:0	8	false
water	42:58	0:0	6	;
water	43:16	0:0	6	mode
op	43:21	0:0	6	=
call	43:23	43:31	6	N_
arg	43:26	43:31	7	"Off"
water	43:26	0:0	8	"Off"
water	43:32	0:0	6	;
water	44:12	0:0	6	}
else	45:12	51:12	4
stmts	46:12	51:12	5	
if	46:12	51:12	6	(var_GetBool (p_playlist ,"loop" ))
cond	46:16	46:48	7	var_GetBool (p_playlist ,"loop" )
call	46:16	46:48	8	var_GetBool
arg	46:29	46:39	9	p_playlist
water	46:29	0:0	10	p_playlist
arg	46:41	46:48	9	"loop"
water	46:41	0:0	10	"loop"
stmts	47:12	51:12	7	
water	47:12	0:0	8	{
call	48:16	48:55	8	var_SetBool
arg	48:29	48:39	9	p_playlist
water	48:29	0:0	10	p_playlist
arg	48:41	48:47	9	"loop"
water	48:41	0:0	10	"loop"
arg	48:49	48:55	9	false
water	48:49	0:0	10	false
water	48:56	0:0	8	;
call	49:16	49:56	8	var_SetBool
arg	49:29	49:39	9	p_playlist
water	49:29	0:0	10	p_playlist
arg	49:41	49:49	9	"repeat"
water	49:41	0:0	10	"repeat"
arg	49:51	49:56	9	true
water	49:51	0:0	10	true
water	49:57	0:0	8	;
water	50:16	0:0	8	mode
op	50:21	0:0	8	=
call	50:23	50:31	8	N_
arg	50:26	50:31	9	"One"
water	50:26	0:0	10	"One"
water	50:32	0:0	8	;
water	51:12	0:0	8	}
else	52:12	56:12	4
stmts	53:12	56:12	5	
water	53:12	0:0	6	{
call	54:16	54:54	6	var_SetBool
arg	54:29	54:39	7	p_playlist
water	54:29	0:0	8	p_playlist
arg	54:41	54:47	7	"loop"
water	54:41	0:0	8	"loop"
arg	54:49	54:54	7	true
water	54:49	0:0	8	true
water	54:55	0:0	6	;
water	55:16	0:0	6	mode
op	55:21	0:0	6	=
call	55:23	55:31	6	N_
arg	55:26	55:31	7	"All"
water	55:26	0:0	8	"All"
water	55:32	0:0	6	;
water	56:12	0:0	6	}
call	57:12	57:69	4	DisplayMessage
arg	57:28	57:34	5	p_vout
water	57:28	0:0	6	p_vout
arg	57:36	57:49	5	_("Loop: %s")
call	57:36	57:48	6	_
arg	57:38	57:48	7	"Loop: %s"
water	57:38	0:0	8	"Loop: %s"
arg	57:51	57:69	5	vlc_gettext(mode)
call	57:51	57:67	6	vlc_gettext
arg	57:63	57:67	7	mode
water	57:63	0:0	8	mode
water	57:70	0:0	4	;
break	58:12	58:17	4	
water	59:8	0:0	4	}
label	60:8	60:28	4	case ACTIONID_RANDOM :
water	61:8	0:0	4	{
decl	62:12	62:69	4	const bool	state
op	62:29	0:0	4	=
call	62:31	62:68	5	var_ToggleBool
arg	62:47	62:57	6	p_playlist
water	62:47	0:0	7	p_playlist
arg	62:59	62:68	6	"random"
water	62:59	0:0	7	"random"
call	63:12	64:72	4	DisplayMessage
arg	63:28	63:34	5	p_vout
water	63:28	0:0	6	p_vout
arg	63:36	63:51	5	_("Random: %s")
call	63:36	63:50	6	_
arg	63:38	63:50	7	"Random: %s"
water	63:38	0:0	8	"Random: %s"
arg	64:28	64:72	5	vlc_gettext(state?N_("On"):N_("Off"))
call	64:28	64:70	6	vlc_gettext
arg	64:41	64:70	7	state?N_("On"):N_("Off")
water	64:41	0:0	8	state
water	64:47	0:0	8	?
call	64:49	64:56	8	N_
arg	64:52	64:56	9	"On"
water	64:52	0:0	10	"On"
water	64:58	0:0	8	:
call	64:60	64:68	8	N_
arg	64:63	64:68	9	"Off"
water	64:63	0:0	10	"Off"
water	64:73	0:0	4	;
break	65:12	65:17	4	
water	66:8	0:0	4	}
label	67:8	67:26	4	case ACTIONID_NEXT :
call	68:12	68:46	4	DisplayMessage
arg	68:28	68:34	5	p_vout
water	68:28	0:0	6	p_vout
arg	68:36	68:46	5	_("Next")
call	68:36	68:44	6	_
arg	68:38	68:44	7	"Next"
water	68:38	0:0	8	"Next"
water	68:47	0:0	4	;
call	69:12	69:38	4	playlist_Next
arg	69:27	69:38	5	p_playlist
water	69:27	0:0	6	p_playlist
water	69:39	0:0	4	;
break	70:12	70:17	4	
label	71:8	71:26	4	case ACTIONID_PREV :
call	72:12	72:50	4	DisplayMessage
arg	72:28	72:34	5	p_vout
water	72:28	0:0	6	p_vout
arg	72:36	72:50	5	_("Previous")
call	72:36	72:48	6	_
arg	72:38	72:48	7	"Previous"
water	72:38	0:0	8	"Previous"
water	72:51	0:0	4	;
call	73:12	73:38	4	playlist_Prev
arg	73:27	73:38	5	p_playlist
water	73:27	0:0	6	p_playlist
water	73:39	0:0	4	;
break	74:12	74:17	4	
label	75:8	75:26	4	case ACTIONID_STOP :
call	76:12	76:38	4	playlist_Stop
arg	76:27	76:38	5	p_playlist
water	76:27	0:0	6	p_playlist
water	76:39	0:0	4	;
break	77:12	77:17	4	
label	78:8	78:33	4	case ACTIONID_RATE_NORMAL :
call	79:12	79:50	4	var_SetFloat
arg	79:26	79:36	5	p_playlist
water	79:26	0:0	6	p_playlist
arg	79:38	79:44	5	"rate"
water	79:38	0:0	6	"rate"
arg	79:46	79:50	5	1.f
water	79:46	0:0	6	1
op	79:47	0:0	6	.
water	79:48	0:0	6	f
water	79:51	0:0	4	;
call	80:12	80:37	4	DisplayRate
arg	80:25	80:31	5	p_vout
water	80:25	0:0	6	p_vout
arg	80:33	80:37	5	1.f
water	80:33	0:0	6	1
op	80:34	0:0	6	.
water	80:35	0:0	6	f
water	80:38	0:0	4	;
break	81:12	81:17	4	
label	82:8	82:28	4	case ACTIONID_FASTER :
call	83:12	83:59	4	var_TriggerCallback
arg	83:33	83:43	5	p_playlist
water	83:33	0:0	6	p_playlist
arg	83:45	83:59	5	"rate-faster"
water	83:45	0:0	6	"rate-faster"
water	83:60	0:0	4	;
call	84:12	84:68	4	DisplayRate
arg	84:25	84:31	5	p_vout
water	84:25	0:0	6	p_vout
arg	84:33	84:68	5	var_GetFloat(p_playlist,"rate")
call	84:33	84:66	6	var_GetFloat
arg	84:47	84:57	7	p_playlist
water	84:47	0:0	8	p_playlist
arg	84:59	84:66	7	"rate"
water	84:59	0:0	8	"rate"
water	84:69	0:0	4	;
break	85:12	85:17	4	
label	86:8	86:28	4	case ACTIONID_SLOWER :
call	87:12	87:59	4	var_TriggerCallback
arg	87:33	87:43	5	p_playlist
water	87:33	0:0	6	p_playlist
arg	87:45	87:59	5	"rate-slower"
water	87:45	0:0	6	"rate-slower"
water	87:60	0:0	4	;
call	88:12	88:68	4	DisplayRate
arg	88:25	88:31	5	p_vout
water	88:25	0:0	6	p_vout
arg	88:33	88:68	5	var_GetFloat(p_playlist,"rate")
call	88:33	88:66	6	var_GetFloat
arg	88:47	88:57	7	p_playlist
water	88:47	0:0	8	p_playlist
arg	88:59	88:66	7	"rate"
water	88:59	0:0	8	"rate"
water	88:69	0:0	4	;
break	89:12	89:17	4	
label	90:8	90:38	4	case ACTIONID_RATE_FASTER_FINE :
label	91:8	91:38	4	case ACTIONID_RATE_SLOWER_FINE :
water	92:8	0:0	4	{
decl	93:12	93:76	4	const int	i_dir
op	93:28	0:0	4	=
water	93:30	0:0	4	i_action
op	93:39	0:0	4	==
water	93:42	0:0	4	ACTIONID_RATE_FASTER_FINE
water	93:68	0:0	4	?
water	93:70	0:0	4	1
water	93:72	0:0	4	:
op	93:74	0:0	4	-
water	93:75	0:0	4	1
decl	94:12	94:72	4	float	rate
op	94:23	0:0	4	=
call	94:25	94:71	5	AdjustRateFine
arg	94:41	94:63	6	VLC_OBJECT(p_playlist)
call	94:41	94:62	7	VLC_OBJECT
arg	94:52	94:62	8	p_playlist
water	94:52	0:0	9	p_playlist
arg	94:65	94:71	6	i_dir
water	94:65	0:0	7	i_dir
call	95:12	95:51	4	var_SetFloat
arg	95:26	95:36	5	p_playlist
water	95:26	0:0	6	p_playlist
arg	95:38	95:44	5	"rate"
water	95:38	0:0	6	"rate"
arg	95:46	95:51	5	rate
water	95:46	0:0	6	rate
water	95:52	0:0	4	;
call	96:12	96:38	4	DisplayRate
arg	96:25	96:31	5	p_vout
water	96:25	0:0	6	p_vout
arg	96:33	96:38	5	rate
water	96:33	0:0	6	rate
water	96:39	0:0	4	;
break	97:12	97:17	4	
water	98:8	0:0	4	}
label	99:8	99:36	4	case ACTIONID_PLAY_BOOKMARK1 :
label	100:8	100:36	4	case ACTIONID_PLAY_BOOKMARK2 :
label	101:8	101:36	4	case ACTIONID_PLAY_BOOKMARK3 :
label	102:8	102:36	4	case ACTIONID_PLAY_BOOKMARK4 :
label	103:8	103:36	4	case ACTIONID_PLAY_BOOKMARK5 :
label	104:8	104:36	4	case ACTIONID_PLAY_BOOKMARK6 :
label	105:8	105:36	4	case ACTIONID_PLAY_BOOKMARK7 :
label	106:8	106:36	4	case ACTIONID_PLAY_BOOKMARK8 :
label	107:8	107:36	4	case ACTIONID_PLAY_BOOKMARK9 :
label	108:8	108:37	4	case ACTIONID_PLAY_BOOKMARK10 :
call	109:12	109:73	4	PlayBookmark
arg	109:26	109:32	5	p_intf
water	109:26	0:0	6	p_intf
arg	109:34	109:73	5	i_action-ACTIONID_PLAY_BOOKMARK1+1
water	109:34	0:0	6	i_action
op	109:43	0:0	6	-
water	109:45	0:0	6	ACTIONID_PLAY_BOOKMARK1
op	109:69	0:0	6	+
water	109:71	0:0	6	1
water	109:74	0:0	4	;
break	110:12	110:17	4	
label	111:8	111:35	4	case ACTIONID_SET_BOOKMARK1 :
label	112:8	112:35	4	case ACTIONID_SET_BOOKMARK2 :
label	113:8	113:35	4	case ACTIONID_SET_BOOKMARK3 :
label	114:8	114:35	4	case ACTIONID_SET_BOOKMARK4 :
label	115:8	115:35	4	case ACTIONID_SET_BOOKMARK5 :
label	116:8	116:35	4	case ACTIONID_SET_BOOKMARK6 :
label	117:8	117:35	4	case ACTIONID_SET_BOOKMARK7 :
label	118:8	118:35	4	case ACTIONID_SET_BOOKMARK8 :
label	119:8	119:35	4	case ACTIONID_SET_BOOKMARK9 :
label	120:8	120:36	4	case ACTIONID_SET_BOOKMARK10 :
call	121:12	121:71	4	SetBookmark
arg	121:25	121:31	5	p_intf
water	121:25	0:0	6	p_intf
arg	121:33	121:71	5	i_action-ACTIONID_SET_BOOKMARK1+1
water	121:33	0:0	6	i_action
op	121:42	0:0	6	-
water	121:44	0:0	6	ACTIONID_SET_BOOKMARK1
op	121:67	0:0	6	+
water	121:69	0:0	6	1
water	121:72	0:0	4	;
break	122:12	122:17	4	
label	123:8	123:32	4	case ACTIONID_PLAY_CLEAR :
water	124:8	0:0	4	{
decl	125:12	125:53	4	playlist_t	*p_playlist
op	125:35	0:0	4	=
call	125:37	125:52	5	pl_Get
arg	125:45	125:52	6	p_intf
water	125:45	0:0	7	p_intf
call	126:12	126:52	4	playlist_Clear
arg	126:28	126:38	5	p_playlist
water	126:28	0:0	6	p_playlist
arg	126:40	126:52	5	pl_Unlocked
water	126:40	0:0	6	pl_Unlocked
water	126:53	0:0	4	;
break	127:12	127:17	4	
water	128:8	0:0	4	}
label	129:8	129:28	4	case ACTIONID_VOL_UP :
water	130:8	0:0	4	{
decl	131:12	131:21	4	float	vol
if	132:12	133:52	4	(playlist_VolumeUp (p_playlist ,1 ,& vol ) == 0)
cond	132:16	132:60	5	playlist_VolumeUp (p_playlist ,1 ,& vol ) == 0
call	132:16	132:55	6	playlist_VolumeUp
arg	132:35	132:45	7	p_playlist
water	132:35	0:0	8	p_playlist
arg	132:47	132:48	7	1
water	132:47	0:0	8	1
arg	132:50	132:55	7	&vol
op	132:50	0:0	8	&
water	132:51	0:0	8	vol
op	132:57	0:0	6	==
water	132:60	0:0	6	0
stmts	133:16	133:52	5	
call	133:16	133:51	6	DisplayVolume
arg	133:31	133:37	7	p_intf
water	133:31	0:0	8	p_intf
arg	133:39	133:45	7	p_vout
water	133:39	0:0	8	p_vout
arg	133:47	133:51	7	vol
water	133:47	0:0	8	vol
water	133:52	0:0	6	;
break	134:12	134:17	4	
water	135:8	0:0	4	}
label	136:8	136:30	4	case ACTIONID_VOL_DOWN :
water	137:8	0:0	4	{
decl	138:12	138:21	4	float	vol
if	139:12	140:52	4	(playlist_VolumeDown (p_playlist ,1 ,& vol ) == 0)
cond	139:16	139:62	5	playlist_VolumeDown (p_playlist ,1 ,& vol ) == 0
call	139:16	139:57	6	playlist_VolumeDown
arg	139:37	139:47	7	p_playlist
water	139:37	0:0	8	p_playlist
arg	139:49	139:50	7	1
water	139:49	0:0	8	1
arg	139:52	139:57	7	&vol
op	139:52	0:0	8	&
water	139:53	0:0	8	vol
op	139:59	0:0	6	==
water	139:62	0:0	6	0
stmts	140:16	140:52	5	
call	140:16	140:51	6	DisplayVolume
arg	140:31	140:37	7	p_intf
water	140:31	0:0	8	p_intf
arg	140:39	140:45	7	p_vout
water	140:39	0:0	8	p_vout
arg	140:47	140:51	7	vol
water	140:47	0:0	8	vol
water	140:52	0:0	6	;
break	141:12	141:17	4	
water	142:8	0:0	4	}
label	143:8	143:30	4	case ACTIONID_VOL_MUTE :
water	144:8	0:0	4	{
decl	145:12	145:53	4	int	mute
op	145:21	0:0	4	=
call	145:23	145:52	5	playlist_MuteGet
arg	145:41	145:52	6	p_playlist
water	145:41	0:0	7	p_playlist
if	146:12	147:21	4	(mute < 0)
cond	146:16	146:23	5	mute < 0
water	146:16	0:0	6	mute
op	146:21	0:0	6	<
water	146:23	0:0	6	0
stmts	147:16	147:21	5	
break	147:16	147:21	6	
water	148:12	0:0	4	mute
op	148:17	0:0	4	=
op	148:19	0:0	4	!
water	148:20	0:0	4	mute
water	148:24	0:0	4	;
if	149:12	150:21	4	(playlist_MuteSet (p_playlist ,mute ))
cond	149:16	149:51	5	playlist_MuteSet (p_playlist ,mute )
call	149:16	149:51	6	playlist_MuteSet
arg	149:34	149:44	7	p_playlist
water	149:34	0:0	8	p_playlist
arg	149:46	149:51	7	mute
water	149:46	0:0	8	mute
stmts	150:16	150:21	5	
break	150:16	150:21	6	
decl	151:12	151:56	4	float	vol
op	151:22	0:0	4	=
call	151:24	151:55	5	playlist_VolumeGet
arg	151:44	151:55	6	p_playlist
water	151:44	0:0	7	p_playlist
if	152:12	156:12	4	(mute || vol == 0 . f)
cond	152:16	152:33	5	mute || vol == 0 . f
water	152:16	0:0	6	mute
op	152:21	0:0	6	||
water	152:24	0:0	6	vol
op	152:28	0:0	6	==
water	152:31	0:0	6	0
op	152:32	0:0	6	.
water	152:33	0:0	6	f
stmts	153:12	156:12	5	
water	153:12	0:0	6	{
call	154:16	154:46	6	ClearChannels
arg	154:31	154:37	7	p_intf
water	154:31	0:0	8	p_intf
arg	154:39	154:46	7	p_vout
water	154:39	0:0	8	p_vout
water	154:47	0:0	6	;
call	155:16	155:51	6	DisplayIcon
arg	155:29	155:35	7	p_vout
water	155:29	0:0	8	p_vout
arg	155:37	155:51	7	OSD_MUTE_ICON
water	155:37	0:0	8	OSD_MUTE_ICON
water	155:52	0:0	6	;
water	156:12	0:0	6	}
else	157:12	158:52	4
stmts	158:16	158:52	5	
call	158:16	158:51	6	DisplayVolume
arg	158:31	158:37	7	p_intf
water	158:31	0:0	8	p_intf
arg	158:39	158:45	7	p_vout
water	158:39	0:0	8	p_vout
arg	158:47	158:51	7	vol
water	158:47	0:0	8	vol
water	158:52	0:0	6	;
break	159:12	159:17	4	
water	160:8	0:0	4	}
label	161:8	161:39	4	case ACTIONID_AUDIODEVICE_CYCLE :
water	162:8	0:0	4	{
decl	163:12	163:67	4	audio_output_t	*p_aout
op	163:35	0:0	4	=
call	163:37	163:66	5	playlist_GetAout
arg	163:55	163:66	6	p_playlist
water	163:55	0:0	7	p_playlist
if	164:12	165:21	4	(p_aout == NULL)
cond	164:16	164:26	5	p_aout == NULL
water	164:16	0:0	6	p_aout
op	164:23	0:0	6	==
water	164:26	0:0	6	NULL
stmts	165:16	165:21	5	
break	165:16	165:21	6	
decl	166:12	166:31	4	char	**ids
water	166:22	0:0	4	,
decl	166:12	166:31	4	char	**names
decl	167:12	167:60	4	int	n
op	167:18	0:0	4	=
call	167:20	167:59	5	aout_DevicesList
arg	167:38	167:44	6	p_aout
water	167:38	0:0	7	p_aout
arg	167:46	167:50	6	&ids
op	167:46	0:0	7	&
water	167:47	0:0	7	ids
arg	167:52	167:59	6	&names
op	167:52	0:0	7	&
water	167:53	0:0	7	names
if	168:12	169:21	4	(n == - 1)
cond	168:16	168:22	5	n == - 1
water	168:16	0:0	6	n
op	168:18	0:0	6	==
op	168:21	0:0	6	-
water	168:22	0:0	6	1
stmts	169:16	169:21	5	
break	169:16	169:21	6	
decl	170:12	170:48	4	char	*dev
op	170:22	0:0	4	=
call	170:24	170:47	5	aout_DeviceGet
arg	170:40	170:47	6	p_aout
water	170:40	0:0	7	p_aout
decl	171:12	171:57	4	const char	*devstr
op	171:31	0:0	4	=
water	171:33	0:0	4	(
water	171:34	0:0	4	dev
op	171:38	0:0	4	!=
water	171:41	0:0	4	NULL
water	171:45	0:0	4	)
water	171:47	0:0	4	?
water	171:49	0:0	4	dev
water	171:53	0:0	4	:
water	171:55	0:0	4	""
decl	172:12	172:23	4	int	idx
op	172:20	0:0	4	=
water	172:22	0:0	4	0
for	173:12	177:12	4	( int i = 0 ;i < n;i ++)
forinit	0:0	173:26	5	 int i = 0 ;
decl	173:17	173:26	6	int	i
op	173:23	0:0	6	=
water	173:25	0:0	6	0
cond	173:28	173:32	5	i < n
water	173:28	0:0	6	i
op	173:30	0:0	6	<
water	173:32	0:0	6	n
forexpr	173:35	173:36	5	i ++
water	173:35	0:0	6	i
op	173:36	0:0	6	++
stmts	174:12	177:12	5	
water	174:12	0:0	6	{
if	175:16	176:37	6	(!strcmp (devstr ,ids [ i ] ))
cond	175:20	175:42	7	!strcmp (devstr ,ids [ i ] )
op	175:20	0:0	8	!
call	175:21	175:42	8	strcmp
arg	175:28	175:34	9	devstr
water	175:28	0:0	10	devstr
arg	175:36	175:42	9	ids[i]
water	175:36	0:0	10	ids
op	175:39	0:0	10	[
water	175:40	0:0	10	i
op	175:41	0:0	10	]
stmts	176:20	176:37	7	
water	176:20	0:0	8	idx
op	176:24	0:0	8	=
water	176:26	0:0	8	(
water	176:27	0:0	8	i
op	176:29	0:0	8	+
water	176:31	0:0	8	1
water	176:32	0:0	8	)
op	176:34	0:0	8	%
water	176:36	0:0	8	n
water	176:37	0:0	8	;
water	177:12	0:0	6	}
call	178:12	178:22	4	free
arg	178:18	178:22	5	dev
water	178:18	0:0	6	dev
water	178:23	0:0	4	;
if	179:12	180:75	4	(!aout_DeviceSet (p_aout ,ids [ idx ] ))
cond	179:16	179:50	5	!aout_DeviceSet (p_aout ,ids [ idx ] )
op	179:16	0:0	6	!
call	179:17	179:50	6	aout_DeviceSet
arg	179:33	179:39	7	p_aout
water	179:33	0:0	8	p_aout
arg	179:41	179:50	7	ids[idx]
water	179:41	0:0	8	ids
op	179:44	0:0	8	[
water	179:45	0:0	8	idx
op	179:48	0:0	8	]
stmts	180:16	180:75	5	
call	180:16	180:74	6	DisplayMessage
arg	180:32	180:38	7	p_vout
water	180:32	0:0	8	p_vout
arg	180:40	180:61	7	_("Audio Device: %s")
call	180:40	180:60	8	_
arg	180:42	180:60	9	"Audio Device: %s"
water	180:42	0:0	10	"Audio Device: %s"
arg	180:63	180:74	7	names[idx]
water	180:63	0:0	8	names
op	180:68	0:0	8	[
water	180:69	0:0	8	idx
op	180:72	0:0	8	]
water	180:75	0:0	6	;
call	181:12	181:39	4	vlc_object_release
arg	181:32	181:39	5	p_aout
water	181:32	0:0	6	p_aout
water	181:40	0:0	4	;
for	182:12	186:12	4	( int i = 0 ;i < n;i ++)
forinit	0:0	182:26	5	 int i = 0 ;
decl	182:17	182:26	6	int	i
op	182:23	0:0	6	=
water	182:25	0:0	6	0
cond	182:28	182:32	5	i < n
water	182:28	0:0	6	i
op	182:30	0:0	6	<
water	182:32	0:0	6	n
forexpr	182:35	182:36	5	i ++
water	182:35	0:0	6	i
op	182:36	0:0	6	++
stmts	183:12	186:12	5	
water	183:12	0:0	6	{
call	184:16	184:29	6	free
arg	184:22	184:29	7	ids[i]
water	184:22	0:0	8	ids
op	184:25	0:0	8	[
water	184:26	0:0	8	i
op	184:27	0:0	8	]
water	184:30	0:0	6	;
call	185:16	185:31	6	free
arg	185:22	185:31	7	names[i]
water	185:22	0:0	8	names
op	185:27	0:0	8	[
water	185:28	0:0	8	i
op	185:29	0:0	8	]
water	185:32	0:0	6	;
water	186:12	0:0	6	}
call	187:12	187:22	4	free
arg	187:18	187:22	5	ids
water	187:18	0:0	6	ids
water	187:23	0:0	4	;
call	188:12	188:24	4	free
arg	188:18	188:24	5	names
water	188:18	0:0	6	names
water	188:25	0:0	4	;
break	189:12	189:17	4	
water	190:8	0:0	4	}
label	192:8	192:32	4	case ACTIONID_PLAY_PAUSE :
if	193:12	199:12	4	(p_input)
cond	193:16	193:16	5	p_input
water	193:16	0:0	6	p_input
stmts	194:12	199:12	5	
water	194:12	0:0	6	{
call	195:16	195:46	6	ClearChannels
arg	195:31	195:37	7	p_intf
water	195:31	0:0	8	p_intf
arg	195:39	195:46	7	p_vout
water	195:39	0:0	8	p_vout
water	195:47	0:0	6	;
decl	196:16	196:62	6	int	state
op	196:26	0:0	6	=
call	196:28	196:61	7	var_GetInteger
arg	196:44	196:51	8	p_input
water	196:44	0:0	9	p_input
arg	196:53	196:61	8	"state"
water	196:53	0:0	9	"state"
call	197:16	197:87	6	DisplayIcon
arg	197:29	197:35	7	p_vout
water	197:29	0:0	8	p_vout
arg	197:37	197:87	7	state!=PAUSE_S?OSD_PAUSE_ICON:OSD_PLAY_ICON
water	197:37	0:0	8	state
op	197:43	0:0	8	!=
water	197:46	0:0	8	PAUSE_S
water	197:54	0:0	8	?
water	197:56	0:0	8	OSD_PAUSE_ICON
water	197:71	0:0	8	:
water	197:73	0:0	8	OSD_PLAY_ICON
water	197:88	0:0	6	;
call	198:16	198:43	6	playlist_Pause
arg	198:32	198:43	7	p_playlist
water	198:32	0:0	8	p_playlist
water	198:44	0:0	6	;
water	199:12	0:0	6	}
else	200:12	201:43	4
stmts	201:16	201:43	5	
call	201:16	201:42	6	playlist_Play
arg	201:31	201:42	7	p_playlist
water	201:31	0:0	8	p_playlist
water	201:43	0:0	6	;
break	202:12	202:17	4	
label	203:8	203:26	4	case ACTIONID_PLAY :
if	204:12	206:51	4	(p_input &&var_GetFloat (p_input ,"rate" ) != 1 .)
cond	204:16	204:63	5	p_input &&var_GetFloat (p_input ,"rate" ) != 1 .
water	204:16	0:0	6	p_input
op	204:24	0:0	6	&&
call	204:27	204:57	6	var_GetFloat
arg	204:41	204:48	7	p_input
water	204:41	0:0	8	p_input
arg	204:50	204:57	7	"rate"
water	204:50	0:0	8	"rate"
op	204:59	0:0	6	!=
water	204:62	0:0	6	1
op	204:63	0:0	6	.
stmts	206:16	206:51	5	
call	206:16	206:50	6	var_SetFloat
arg	206:30	206:37	7	p_input
water	206:30	0:0	8	p_input
arg	206:39	206:45	7	"rate"
water	206:39	0:0	8	"rate"
arg	206:47	206:50	7	1.
water	206:47	0:0	8	1
op	206:48	0:0	8	.
water	206:51	0:0	6	;
else	207:12	212:12	4
stmts	208:12	212:12	5	
water	208:12	0:0	6	{
call	209:16	209:46	6	ClearChannels
arg	209:31	209:37	7	p_intf
water	209:31	0:0	8	p_intf
arg	209:39	209:46	7	p_vout
water	209:39	0:0	8	p_vout
water	209:47	0:0	6	;
call	210:16	210:51	6	DisplayIcon
arg	210:29	210:35	7	p_vout
water	210:29	0:0	8	p_vout
arg	210:37	210:51	7	OSD_PLAY_ICON
water	210:37	0:0	8	OSD_PLAY_ICON
water	210:52	0:0	6	;
call	211:16	211:42	6	playlist_Play
arg	211:31	211:42	7	p_playlist
water	211:31	0:0	8	p_playlist
water	211:43	0:0	6	;
water	212:12	0:0	6	}
break	213:12	213:17	4	
label	215:8	215:31	4	case ACTIONID_WALLPAPER :
water	216:8	0:0	4	{
decl	217:12	217:69	4	bool	wp
op	217:20	0:0	4	=
call	217:22	217:68	5	var_ToggleBool
arg	217:38	217:48	6	p_playlist
water	217:38	0:0	7	p_playlist
arg	217:50	217:68	6	"video-wallpaper"
water	217:50	0:0	7	"video-wallpaper"
if	218:12	219:60	4	(p_vout)
cond	218:16	218:16	5	p_vout
water	218:16	0:0	6	p_vout
stmts	219:16	219:60	5	
call	219:16	219:59	6	var_SetBool
arg	219:29	219:35	7	p_vout
water	219:29	0:0	8	p_vout
arg	219:37	219:54	7	"video-wallpaper"
water	219:37	0:0	8	"video-wallpaper"
arg	219:56	219:59	7	wp
water	219:56	0:0	8	wp
water	219:60	0:0	6	;
break	220:12	220:17	4	
water	221:8	0:0	4	}
label	223:8	223:27	4	case ACTIONID_PAUSE :
if	224:12	229:12	4	(p_input &&var_GetInteger (p_input ,"state" ) != PAUSE_S)
cond	224:16	224:65	5	p_input &&var_GetInteger (p_input ,"state" ) != PAUSE_S
water	224:16	0:0	6	p_input
op	224:24	0:0	6	&&
call	224:27	224:60	6	var_GetInteger
arg	224:43	224:50	7	p_input
water	224:43	0:0	8	p_input
arg	224:52	224:60	7	"state"
water	224:52	0:0	8	"state"
op	224:62	0:0	6	!=
water	224:65	0:0	6	PAUSE_S
stmts	225:12	229:12	5	
water	225:12	0:0	6	{
call	226:16	226:46	6	ClearChannels
arg	226:31	226:37	7	p_intf
water	226:31	0:0	8	p_intf
arg	226:39	226:46	7	p_vout
water	226:39	0:0	8	p_vout
water	226:47	0:0	6	;
call	227:16	227:52	6	DisplayIcon
arg	227:29	227:35	7	p_vout
water	227:29	0:0	8	p_vout
arg	227:37	227:52	7	OSD_PAUSE_ICON
water	227:37	0:0	8	OSD_PAUSE_ICON
water	227:53	0:0	6	;
call	228:16	228:58	6	var_SetInteger
arg	228:32	228:39	7	p_input
water	228:32	0:0	8	p_input
arg	228:41	228:48	7	"state"
water	228:41	0:0	8	"state"
arg	228:50	228:58	7	PAUSE_S
water	228:50	0:0	8	PAUSE_S
water	228:59	0:0	6	;
water	229:12	0:0	6	}
break	230:12	230:17	4	
label	231:8	231:28	4	case ACTIONID_RECORD :
if	232:12	237:12	4	(p_input &&var_GetBool (p_input ,"can-record" ))
cond	232:16	232:62	5	p_input &&var_GetBool (p_input ,"can-record" )
water	232:16	0:0	6	p_input
op	232:24	0:0	6	&&
call	232:27	232:62	6	var_GetBool
arg	232:40	232:47	7	p_input
water	232:40	0:0	8	p_input
arg	232:49	232:62	7	"can-record"
water	232:49	0:0	8	"can-record"
stmts	233:12	237:12	5	
water	233:12	0:0	6	{
decl	234:16	234:67	6	const bool	on
op	234:30	0:0	6	=
call	234:32	234:66	7	var_ToggleBool
arg	234:48	234:55	8	p_input
water	234:48	0:0	9	p_input
arg	234:57	234:66	8	"record"
water	234:57	0:0	9	"record"
call	235:16	236:77	6	DisplayMessage
arg	235:32	235:38	7	p_vout
water	235:32	0:0	8	p_vout
arg	235:40	236:77	7	vlc_gettext(on?N_("Recording"):N_("Recording done"))
call	235:40	236:75	8	vlc_gettext
arg	235:52	236:75	9	on?N_("Recording"):N_("Recording done")
water	235:52	0:0	10	on
water	236:35	0:0	10	?
call	236:37	236:51	10	N_
arg	236:40	236:51	11	"Recording"
water	236:40	0:0	12	"Recording"
water	236:53	0:0	10	:
call	236:55	236:74	10	N_
arg	236:58	236:74	11	"Recording done"
water	236:58	0:0	12	"Recording done"
water	236:78	0:0	6	;
water	237:12	0:0	6	}
break	238:12	238:17	4	
label	239:8	239:32	4	case ACTIONID_FRAME_NEXT :
if	240:12	244:12	4	(p_input)
cond	240:16	240:16	5	p_input
water	240:16	0:0	6	p_input
stmts	241:12	244:12	5	
water	241:12	0:0	6	{
call	242:16	242:59	6	var_TriggerCallback
arg	242:37	242:44	7	p_input
water	242:37	0:0	8	p_input
arg	242:46	242:59	7	"frame-next"
water	242:46	0:0	8	"frame-next"
water	242:60	0:0	6	;
call	243:16	243:56	6	DisplayMessage
arg	243:32	243:38	7	p_vout
water	243:32	0:0	8	p_vout
arg	243:40	243:56	7	_("Next frame")
call	243:40	243:54	8	_
arg	243:42	243:54	9	"Next frame"
water	243:42	0:0	10	"Next frame"
water	243:57	0:0	6	;
water	244:12	0:0	6	}
break	245:12	245:17	4	
label	246:8	246:39	4	case ACTIONID_SUBSYNC_MARKAUDIO :
water	247:8	0:0	4	{
water	248:12	0:0	4	p_sys
op	248:17	0:0	4	->
water	248:19	0:0	4	subtitle_delaybookmarks
op	248:42	0:0	4	.
water	248:43	0:0	4	i_time_audio
op	248:56	0:0	4	=
call	248:58	248:64	4	mdate
water	248:65	0:0	4	;
call	249:12	249:72	4	DisplayMessage
arg	249:28	249:34	5	p_vout
water	249:28	0:0	6	p_vout
arg	249:36	249:72	5	_("Sub sync: bookmarked audio time")
call	249:36	249:71	6	_
arg	249:38	249:71	7	"Sub sync: bookmarked audio time"
water	249:38	0:0	8	"Sub sync: bookmarked audio time"
water	249:73	0:0	4	;
break	250:12	250:17	4	
water	251:8	0:0	4	}
label	252:8	252:37	4	case ACTIONID_SUBSYNC_MARKSUB :
if	253:12	271:12	4	(p_input)
cond	253:16	253:16	5	p_input
water	253:16	0:0	6	p_input
stmts	254:12	271:12	5	
water	254:12	0:0	6	{
decl	255:16	255:44	6	vlc_value_t	val
water	255:31	0:0	6	,
decl	255:16	255:44	6	vlc_value_t	list
water	255:37	0:0	6	,
decl	255:16	255:44	6	vlc_value_t	list2
decl	256:16	256:27	6	int	i_count
call	257:16	257:49	6	var_Get
arg	257:25	257:32	7	p_input
water	257:25	0:0	8	p_input
arg	257:34	257:42	7	"spu-es"
water	257:34	0:0	8	"spu-es"
arg	257:44	257:49	7	&val
op	257:44	0:0	8	&
water	257:45	0:0	8	val
water	257:50	0:0	6	;
call	258:16	259:42	6	var_Change
arg	258:28	258:35	7	p_input
water	258:28	0:0	8	p_input
arg	258:37	258:45	7	"spu-es"
water	258:37	0:0	8	"spu-es"
arg	258:47	258:65	7	VLC_VAR_GETCHOICES
water	258:47	0:0	8	VLC_VAR_GETCHOICES
arg	259:28	259:33	7	&list
op	259:28	0:0	8	&
water	259:29	0:0	8	list
arg	259:35	259:42	7	&list2
op	259:35	0:0	8	&
water	259:36	0:0	8	list2
water	259:43	0:0	6	;
water	260:16	0:0	6	i_count
op	260:24	0:0	6	=
water	260:26	0:0	6	list
op	260:30	0:0	6	.
water	260:31	0:0	6	p_list
op	260:37	0:0	6	->
water	260:39	0:0	6	i_count
water	260:46	0:0	6	;
if	261:16	266:16	6	(i_count < 1 || val . i_int < 0)
cond	261:20	261:47	7	i_count < 1 || val . i_int < 0
water	261:20	0:0	8	i_count
op	261:28	0:0	8	<
water	261:30	0:0	8	1
op	261:32	0:0	8	||
water	261:35	0:0	8	val
op	261:38	0:0	8	.
water	261:39	0:0	8	i_int
op	261:45	0:0	8	<
water	261:47	0:0	8	0
stmts	262:16	266:16	7	
water	262:16	0:0	8	{
call	263:20	263:68	8	DisplayMessage
arg	263:36	263:42	9	p_vout
water	263:36	0:0	10	p_vout
arg	263:44	263:68	9	_("No active subtitle")
call	263:44	263:66	10	_
arg	263:46	263:66	11	"No active subtitle"
water	263:46	0:0	12	"No active subtitle"
water	263:69	0:0	8	;
call	264:20	264:48	8	var_FreeList
arg	264:34	264:39	9	&list
op	264:34	0:0	10	&
water	264:35	0:0	10	list
arg	264:41	264:48	9	&list2
op	264:41	0:0	10	&
water	264:42	0:0	10	list2
water	264:49	0:0	8	;
break	265:20	265:25	8	
water	266:16	0:0	8	}
water	267:16	0:0	6	p_sys
op	267:21	0:0	6	->
water	267:23	0:0	6	subtitle_delaybookmarks
op	267:46	0:0	6	.
water	267:47	0:0	6	i_time_subtitle
op	267:63	0:0	6	=
call	267:65	267:71	6	mdate
water	267:72	0:0	6	;
call	268:16	269:71	6	DisplayMessage
arg	268:32	268:38	7	p_vout
water	268:32	0:0	8	p_vout
arg	269:32	269:71	7	_("Sub sync: bookmarked subtitle time")
call	269:32	269:70	8	_
arg	269:34	269:70	9	"Sub sync: bookmarked subtitle time"
water	269:34	0:0	10	"Sub sync: bookmarked subtitle time"
water	269:72	0:0	6	;
call	270:16	270:44	6	var_FreeList
arg	270:30	270:35	7	&list
op	270:30	0:0	8	&
water	270:31	0:0	8	list
arg	270:37	270:44	7	&list2
op	270:37	0:0	8	&
water	270:38	0:0	8	list2
water	270:45	0:0	6	;
water	271:12	0:0	6	}
break	272:12	272:17	4	
label	273:8	273:35	4	case ACTIONID_SUBSYNC_APPLY :
water	274:8	0:0	4	{
if	285:12	304:12	4	(p_input)
cond	285:17	285:17	5	p_input
water	285:17	0:0	6	p_input
stmts	286:12	304:12	5	
water	286:12	0:0	6	{
if	287:16	290:16	6	(( p_sys -> subtitle_delaybookmarks . i_time_audio == 0 ) || ( p_sys -> subtitle_delaybookmarks . i_time_subtitle == 0 ))
cond	287:21	287:127	7	( p_sys -> subtitle_delaybookmarks . i_time_audio == 0 ) || ( p_sys -> subtitle_delaybookmarks . i_time_subtitle == 0 )
water	287:21	0:0	8	(
water	287:22	0:0	8	p_sys
op	287:27	0:0	8	->
water	287:29	0:0	8	subtitle_delaybookmarks
op	287:52	0:0	8	.
water	287:53	0:0	8	i_time_audio
op	287:66	0:0	8	==
water	287:69	0:0	8	0
water	287:70	0:0	8	)
op	287:72	0:0	8	||
water	287:75	0:0	8	(
water	287:76	0:0	8	p_sys
op	287:81	0:0	8	->
water	287:83	0:0	8	subtitle_delaybookmarks
op	287:106	0:0	8	.
water	287:107	0:0	8	i_time_subtitle
op	287:123	0:0	8	==
water	287:126	0:0	8	0
water	287:127	0:0	8	)
stmts	288:16	290:16	7	
water	288:16	0:0	8	{
call	289:20	289:82	8	DisplayMessage
arg	289:36	289:42	9	p_vout
water	289:36	0:0	10	p_vout
arg	289:44	289:82	9	_("Sub sync: set bookmarks first!")
call	289:44	289:80	10	_
arg	289:47	289:80	11	"Sub sync: set bookmarks first!"
water	289:47	0:0	12	"Sub sync: set bookmarks first!"
water	289:83	0:0	8	;
water	290:16	0:0	8	}
else	291:16	303:16	6
stmts	292:16	303:16	7	
water	292:16	0:0	8	{
decl	293:20	293:84	8	int64_t	i_current_subdelay
op	293:47	0:0	8	=
call	293:49	293:83	9	var_GetTime
arg	293:62	293:69	10	p_input
water	293:62	0:0	11	p_input
arg	293:71	293:83	10	"spu-delay"
water	293:71	0:0	11	"spu-delay"
decl	294:20	294:144	8	int64_t	i_additional_subdelay
op	294:50	0:0	8	=
water	294:52	0:0	8	p_sys
op	294:57	0:0	8	->
water	294:59	0:0	8	subtitle_delaybookmarks
op	294:82	0:0	8	.
water	294:83	0:0	8	i_time_audio
op	294:96	0:0	8	-
water	294:98	0:0	8	p_sys
op	294:103	0:0	8	->
water	294:105	0:0	8	subtitle_delaybookmarks
op	294:128	0:0	8	.
water	294:129	0:0	8	i_time_subtitle
decl	295:20	295:89	8	int64_t	i_total_subdelay
op	295:45	0:0	8	=
water	295:47	0:0	8	i_current_subdelay
op	295:66	0:0	8	+
water	295:68	0:0	8	i_additional_subdelay
call	296:20	296:71	8	var_SetTime
arg	296:33	296:40	9	p_input
water	296:33	0:0	10	p_input
arg	296:42	296:53	9	"spu-delay"
water	296:42	0:0	10	"spu-delay"
arg	296:55	296:71	9	i_total_subdelay
water	296:55	0:0	10	i_total_subdelay
water	296:72	0:0	8	;
call	297:20	297:50	8	ClearChannels
arg	297:35	297:41	9	p_intf
water	297:35	0:0	10	p_intf
arg	297:43	297:50	9	p_vout
water	297:43	0:0	10	p_vout
water	297:51	0:0	8	;
call	298:20	300:75	8	DisplayMessage
arg	298:36	298:42	9	p_vout
water	298:36	0:0	10	p_vout
arg	298:44	298:98	9	_("Sub sync: corrected %i ms (total delay = %i ms)")
call	298:44	298:97	10	_
arg	298:47	298:97	11	"Sub sync: corrected %i ms (total delay = %i ms)"
water	298:47	0:0	12	"Sub sync: corrected %i ms (total delay = %i ms)"
arg	299:44	299:79	9	(int)(i_additional_subdelay/1000)
call	299:44	299:78	10	(int)
arg	299:50	299:78	11	i_additional_subdelay/1000
water	299:50	0:0	12	i_additional_subdelay
op	299:72	0:0	12	/
water	299:74	0:0	12	1000
arg	300:44	300:75	9	(int)(i_total_subdelay/1000)
call	300:44	300:73	10	(int)
arg	300:50	300:73	11	i_total_subdelay/1000
water	300:50	0:0	12	i_total_subdelay
op	300:67	0:0	12	/
water	300:69	0:0	12	1000
water	300:76	0:0	8	;
water	301:20	0:0	8	p_sys
op	301:25	0:0	8	->
water	301:27	0:0	8	subtitle_delaybookmarks
op	301:50	0:0	8	.
water	301:51	0:0	8	i_time_audio
op	301:64	0:0	8	=
water	301:66	0:0	8	0
water	301:67	0:0	8	;
water	302:20	0:0	8	p_sys
op	302:25	0:0	8	->
water	302:27	0:0	8	subtitle_delaybookmarks
op	302:50	0:0	8	.
water	302:51	0:0	8	i_time_subtitle
op	302:67	0:0	8	=
water	302:69	0:0	8	0
water	302:70	0:0	8	;
water	303:16	0:0	8	}
water	304:12	0:0	6	}
break	305:12	305:17	4	
water	306:8	0:0	4	}
label	307:8	307:35	4	case ACTIONID_SUBSYNC_RESET :
water	308:8	0:0	4	{
call	309:12	309:48	4	var_SetTime
arg	309:25	309:32	5	p_input
water	309:25	0:0	6	p_input
arg	309:34	309:45	5	"spu-delay"
water	309:34	0:0	6	"spu-delay"
arg	309:47	309:48	5	0
water	309:47	0:0	6	0
water	309:49	0:0	4	;
call	310:12	310:42	4	ClearChannels
arg	310:27	310:33	5	p_intf
water	310:27	0:0	6	p_intf
arg	310:35	310:42	5	p_vout
water	310:35	0:0	6	p_vout
water	310:43	0:0	4	;
call	311:12	311:65	4	DisplayMessage
arg	311:28	311:34	5	p_vout
water	311:28	0:0	6	p_vout
arg	311:36	311:65	5	_("Sub sync: delay reset")
call	311:36	311:63	6	_
arg	311:39	311:63	7	"Sub sync: delay reset"
water	311:39	0:0	8	"Sub sync: delay reset"
water	311:66	0:0	4	;
water	312:12	0:0	4	p_sys
op	312:17	0:0	4	->
water	312:19	0:0	4	subtitle_delaybookmarks
op	312:42	0:0	4	.
water	312:43	0:0	4	i_time_audio
op	312:56	0:0	4	=
water	312:58	0:0	4	0
water	312:59	0:0	4	;
water	313:12	0:0	4	p_sys
op	313:17	0:0	4	->
water	313:19	0:0	4	subtitle_delaybookmarks
op	313:42	0:0	4	.
water	313:43	0:0	4	i_time_subtitle
op	313:59	0:0	4	=
water	313:61	0:0	4	0
water	313:62	0:0	4	;
break	314:12	314:17	4	
water	315:8	0:0	4	}
label	316:8	316:35	4	case ACTIONID_SUBDELAY_DOWN :
label	317:8	317:33	4	case ACTIONID_SUBDELAY_UP :
water	318:8	0:0	4	{
decl	319:12	319:74	4	int	diff
op	319:21	0:0	4	=
water	319:23	0:0	4	(
water	319:24	0:0	4	i_action
op	319:33	0:0	4	==
water	319:36	0:0	4	ACTIONID_SUBDELAY_UP
water	319:56	0:0	4	)
water	319:58	0:0	4	?
water	319:60	0:0	4	50000
water	319:66	0:0	4	:
op	319:68	0:0	4	-
water	319:69	0:0	4	50000
if	320:12	340:12	4	(p_input)
cond	320:16	320:16	5	p_input
water	320:16	0:0	6	p_input
stmts	321:12	340:12	5	
water	321:12	0:0	6	{
decl	322:16	322:44	6	vlc_value_t	val
water	322:31	0:0	6	,
decl	322:16	322:44	6	vlc_value_t	list
water	322:37	0:0	6	,
decl	322:16	322:44	6	vlc_value_t	list2
decl	323:16	323:27	6	int	i_count
call	324:16	324:49	6	var_Get
arg	324:25	324:32	7	p_input
water	324:25	0:0	8	p_input
arg	324:34	324:42	7	"spu-es"
water	324:34	0:0	8	"spu-es"
arg	324:44	324:49	7	&val
op	324:44	0:0	8	&
water	324:45	0:0	8	val
water	324:50	0:0	6	;
call	325:16	326:42	6	var_Change
arg	325:28	325:35	7	p_input
water	325:28	0:0	8	p_input
arg	325:37	325:45	7	"spu-es"
water	325:37	0:0	8	"spu-es"
arg	325:47	325:65	7	VLC_VAR_GETCHOICES
water	325:47	0:0	8	VLC_VAR_GETCHOICES
arg	326:28	326:33	7	&list
op	326:28	0:0	8	&
water	326:29	0:0	8	list
arg	326:35	326:42	7	&list2
op	326:35	0:0	8	&
water	326:36	0:0	8	list2
water	326:43	0:0	6	;
water	327:16	0:0	6	i_count
op	327:24	0:0	6	=
water	327:26	0:0	6	list
op	327:30	0:0	6	.
water	327:31	0:0	6	p_list
op	327:37	0:0	6	->
water	327:39	0:0	6	i_count
water	327:46	0:0	6	;
if	328:16	333:16	6	(i_count < 1 || val . i_int < 0)
cond	328:20	328:47	7	i_count < 1 || val . i_int < 0
water	328:20	0:0	8	i_count
op	328:28	0:0	8	<
water	328:30	0:0	8	1
op	328:32	0:0	8	||
water	328:35	0:0	8	val
op	328:38	0:0	8	.
water	328:39	0:0	8	i_int
op	328:45	0:0	8	<
water	328:47	0:0	8	0
stmts	329:16	333:16	7	
water	329:16	0:0	8	{
call	330:20	330:68	8	DisplayMessage
arg	330:36	330:42	9	p_vout
water	330:36	0:0	10	p_vout
arg	330:44	330:68	9	_("No active subtitle")
call	330:44	330:66	10	_
arg	330:46	330:66	11	"No active subtitle"
water	330:46	0:0	12	"No active subtitle"
water	330:69	0:0	8	;
call	331:20	331:48	8	var_FreeList
arg	331:34	331:39	9	&list
op	331:34	0:0	10	&
water	331:35	0:0	10	list
arg	331:41	331:48	9	&list2
op	331:41	0:0	10	&
water	331:42	0:0	10	list2
water	331:49	0:0	8	;
break	332:20	332:25	8	
water	333:16	0:0	8	}
decl	334:16	334:76	6	int64_t	i_delay
op	334:32	0:0	6	=
call	334:34	334:68	7	var_GetTime
arg	334:47	334:54	8	p_input
water	334:47	0:0	9	p_input
arg	334:56	334:68	8	"spu-delay"
water	334:56	0:0	9	"spu-delay"
op	334:70	0:0	6	+
water	334:72	0:0	6	diff
call	335:16	335:59	6	var_SetTime
arg	335:29	335:36	7	p_input
water	335:29	0:0	8	p_input
arg	335:38	335:49	7	"spu-delay"
water	335:38	0:0	8	"spu-delay"
arg	335:51	335:59	7	i_delay
water	335:51	0:0	8	i_delay
water	335:60	0:0	6	;
call	336:16	336:46	6	ClearChannels
arg	336:31	336:37	7	p_intf
water	336:31	0:0	8	p_intf
arg	336:39	336:46	7	p_vout
water	336:39	0:0	8	p_vout
water	336:47	0:0	6	;
call	337:16	338:52	6	DisplayMessage
arg	337:32	337:38	7	p_vout
water	337:32	0:0	8	p_vout
arg	337:40	337:67	7	_("Subtitle delay %i ms")
call	337:40	337:66	8	_
arg	337:43	337:66	9	"Subtitle delay %i ms"
water	337:43	0:0	10	"Subtitle delay %i ms"
arg	338:32	338:52	7	(int)(i_delay/1000)
call	338:32	338:50	8	(int)
arg	338:38	338:50	9	i_delay/1000
water	338:38	0:0	10	i_delay
op	338:45	0:0	10	/
water	338:46	0:0	10	1000
water	338:53	0:0	6	;
call	339:16	339:44	6	var_FreeList
arg	339:30	339:35	7	&list
op	339:30	0:0	8	&
water	339:31	0:0	8	list
arg	339:37	339:44	7	&list2
op	339:37	0:0	8	&
water	339:38	0:0	8	list2
water	339:45	0:0	6	;
water	340:12	0:0	6	}
break	341:12	341:17	4	
water	342:8	0:0	4	}
label	343:8	343:37	4	case ACTIONID_AUDIODELAY_DOWN :
label	344:8	344:35	4	case ACTIONID_AUDIODELAY_UP :
water	345:8	0:0	4	{
decl	346:12	346:76	4	int	diff
op	346:21	0:0	4	=
water	346:23	0:0	4	(
water	346:24	0:0	4	i_action
op	346:33	0:0	4	==
water	346:36	0:0	4	ACTIONID_AUDIODELAY_UP
water	346:58	0:0	4	)
water	346:60	0:0	4	?
water	346:62	0:0	4	50000
water	346:68	0:0	4	:
op	346:70	0:0	4	-
water	346:71	0:0	4	50000
if	347:12	354:12	4	(p_input)
cond	347:16	347:16	5	p_input
water	347:16	0:0	6	p_input
stmts	348:12	354:12	5	
water	348:12	0:0	6	{
decl	349:16	349:78	6	int64_t	i_delay
op	349:32	0:0	6	=
call	349:34	349:70	7	var_GetTime
arg	349:47	349:54	8	p_input
water	349:47	0:0	9	p_input
arg	349:56	349:70	8	"audio-delay"
water	349:56	0:0	9	"audio-delay"
op	349:72	0:0	6	+
water	349:74	0:0	6	diff
call	350:16	350:61	6	var_SetTime
arg	350:29	350:36	7	p_input
water	350:29	0:0	8	p_input
arg	350:38	350:51	7	"audio-delay"
water	350:38	0:0	8	"audio-delay"
arg	350:53	350:61	7	i_delay
water	350:53	0:0	8	i_delay
water	350:62	0:0	6	;
call	351:16	351:46	6	ClearChannels
arg	351:31	351:37	7	p_intf
water	351:31	0:0	8	p_intf
arg	351:39	351:46	7	p_vout
water	351:39	0:0	8	p_vout
water	351:47	0:0	6	;
call	352:16	353:53	6	DisplayMessage
arg	352:32	352:38	7	p_vout
water	352:32	0:0	8	p_vout
arg	352:40	352:64	7	_("Audio delay %i ms")
call	352:40	352:63	8	_
arg	352:43	352:63	9	"Audio delay %i ms"
water	352:43	0:0	10	"Audio delay %i ms"
arg	353:33	353:53	7	(int)(i_delay/1000)
call	353:33	353:51	8	(int)
arg	353:39	353:51	9	i_delay/1000
water	353:39	0:0	10	i_delay
op	353:46	0:0	10	/
water	353:47	0:0	10	1000
water	353:54	0:0	6	;
water	354:12	0:0	6	}
break	355:12	355:17	4	
water	356:8	0:0	4	}
label	357:8	357:33	4	case ACTIONID_AUDIO_TRACK :
if	358:12	391:12	4	(p_input)
cond	358:16	358:16	5	p_input
water	358:16	0:0	6	p_input
stmts	359:12	391:12	5	
water	359:12	0:0	6	{
decl	360:16	360:44	6	vlc_value_t	val
water	360:31	0:0	6	,
decl	360:16	360:44	6	vlc_value_t	list
water	360:37	0:0	6	,
decl	360:16	360:44	6	vlc_value_t	list2
decl	361:16	361:30	6	int	i_count
water	361:27	0:0	6	,
decl	361:16	361:30	6	int	i
call	362:16	362:51	6	var_Get
arg	362:25	362:32	7	p_input
water	362:25	0:0	8	p_input
arg	362:34	362:44	7	"audio-es"
water	362:34	0:0	8	"audio-es"
arg	362:46	362:51	7	&val
op	362:46	0:0	8	&
water	362:47	0:0	8	val
water	362:52	0:0	6	;
call	363:16	364:42	6	var_Change
arg	363:28	363:35	7	p_input
water	363:28	0:0	8	p_input
arg	363:37	363:47	7	"audio-es"
water	363:37	0:0	8	"audio-es"
arg	363:49	363:67	7	VLC_VAR_GETCHOICES
water	363:49	0:0	8	VLC_VAR_GETCHOICES
arg	364:28	364:33	7	&list
op	364:28	0:0	8	&
water	364:29	0:0	8	list
arg	364:35	364:42	7	&list2
op	364:35	0:0	8	&
water	364:36	0:0	8	list2
water	364:43	0:0	6	;
water	365:16	0:0	6	i_count
op	365:24	0:0	6	=
water	365:26	0:0	6	list
op	365:30	0:0	6	.
water	365:31	0:0	6	p_list
op	365:37	0:0	6	->
water	365:39	0:0	6	i_count
water	365:46	0:0	6	;
if	366:16	389:16	6	(i_count > 1)
cond	366:20	366:30	7	i_count > 1
water	366:20	0:0	8	i_count
op	366:28	0:0	8	>
water	366:30	0:0	8	1
stmts	367:16	389:16	7	
water	367:16	0:0	8	{
for	368:20	374:20	8	(i = 0 ;i < i_count;i ++)
forinit	368:25	368:30	9	i = 0 ;
water	368:25	0:0	10	i
op	368:27	0:0	10	=
water	368:29	0:0	10	0
water	368:30	0:0	10	;
cond	368:32	368:36	9	i < i_count
water	368:32	0:0	10	i
op	368:34	0:0	10	<
water	368:36	0:0	10	i_count
forexpr	368:45	368:46	9	i ++
water	368:45	0:0	10	i
op	368:46	0:0	10	++
stmts	369:20	374:20	9	
water	369:20	0:0	10	{
if	370:24	373:24	10	(val . i_int == list . p_list -> p_values [ i ] . i_int)
cond	370:28	370:66	11	val . i_int == list . p_list -> p_values [ i ] . i_int
water	370:28	0:0	12	val
op	370:31	0:0	12	.
water	370:32	0:0	12	i_int
op	370:38	0:0	12	==
water	370:41	0:0	12	list
op	370:45	0:0	12	.
water	370:46	0:0	12	p_list
op	370:52	0:0	12	->
water	370:54	0:0	12	p_values
op	370:62	0:0	12	[
water	370:63	0:0	12	i
op	370:64	0:0	12	]
op	370:65	0:0	12	.
water	370:66	0:0	12	i_int
stmts	371:24	373:24	11	
water	371:24	0:0	12	{
break	372:28	372:33	12	
water	373:24	0:0	12	}
water	374:20	0:0	10	}
if	376:20	381:20	8	(i == i_count)
cond	376:24	376:29	9	i == i_count
water	376:24	0:0	10	i
op	376:26	0:0	10	==
water	376:29	0:0	10	i_count
stmts	377:20	381:20	9	
water	377:20	0:0	10	{
call	378:24	379:77	10	msg_Warn
arg	378:34	378:41	11	p_input
water	378:34	0:0	12	p_input
arg	379:34	379:77	11	"invalid current audio track, selecting 0"
water	379:34	0:0	12	"invalid current audio track, selecting 0"
water	379:78	0:0	10	;
water	380:24	0:0	10	i
op	380:26	0:0	10	=
water	380:28	0:0	10	0
water	380:29	0:0	10	;
water	381:20	0:0	10	}
else	382:20	383:29	8
stmts	382:25	383:29	9	
if	382:25	383:29	10	(i == i_count - 1)
cond	382:29	382:44	11	i == i_count - 1
water	382:29	0:0	12	i
op	382:31	0:0	12	==
water	382:34	0:0	12	i_count
op	382:42	0:0	12	-
water	382:44	0:0	12	1
stmts	383:24	383:29	11	
water	383:24	0:0	12	i
op	383:26	0:0	12	=
water	383:28	0:0	12	1
water	383:29	0:0	12	;
else	384:20	385:27	8
stmts	385:24	385:27	9	
water	385:24	0:0	10	i
op	385:25	0:0	10	++
water	385:27	0:0	10	;
call	386:20	386:75	8	var_Set
arg	386:29	386:36	9	p_input
water	386:29	0:0	10	p_input
arg	386:38	386:48	9	"audio-es"
water	386:38	0:0	10	"audio-es"
arg	386:50	386:75	9	list.p_list->p_values[i]
water	386:50	0:0	10	list
op	386:54	0:0	10	.
water	386:55	0:0	10	p_list
op	386:61	0:0	10	->
water	386:63	0:0	10	p_values
op	386:71	0:0	10	[
water	386:72	0:0	10	i
op	386:73	0:0	10	]
water	386:76	0:0	8	;
call	387:20	388:73	8	DisplayMessage
arg	387:36	387:42	9	p_vout
water	387:36	0:0	10	p_vout
arg	387:44	387:64	9	_("Audio track: %s")
call	387:44	387:63	10	_
arg	387:46	387:63	11	"Audio track: %s"
water	387:46	0:0	12	"Audio track: %s"
arg	388:36	388:73	9	list2.p_list->p_values[i].psz_string
water	388:36	0:0	10	list2
op	388:41	0:0	10	.
water	388:42	0:0	10	p_list
op	388:48	0:0	10	->
water	388:50	0:0	10	p_values
op	388:58	0:0	10	[
water	388:59	0:0	10	i
op	388:60	0:0	10	]
op	388:61	0:0	10	.
water	388:62	0:0	10	psz_string
water	388:74	0:0	8	;
water	389:16	0:0	8	}
call	390:16	390:44	6	var_FreeList
arg	390:30	390:35	7	&list
op	390:30	0:0	8	&
water	390:31	0:0	8	list
arg	390:37	390:44	7	&list2
op	390:37	0:0	8	&
water	390:38	0:0	8	list2
water	390:45	0:0	6	;
water	391:12	0:0	6	}
break	392:12	392:17	4	
label	393:8	393:36	4	case ACTIONID_SUBTITLE_TRACK :
if	394:12	432:12	4	(p_input)
cond	394:16	394:16	5	p_input
water	394:16	0:0	6	p_input
stmts	395:12	432:12	5	
water	395:12	0:0	6	{
decl	396:16	396:44	6	vlc_value_t	val
water	396:31	0:0	6	,
decl	396:16	396:44	6	vlc_value_t	list
water	396:37	0:0	6	,
decl	396:16	396:44	6	vlc_value_t	list2
decl	397:16	397:30	6	int	i_count
water	397:27	0:0	6	,
decl	397:16	397:30	6	int	i
call	398:16	398:49	6	var_Get
arg	398:25	398:32	7	p_input
water	398:25	0:0	8	p_input
arg	398:34	398:42	7	"spu-es"
water	398:34	0:0	8	"spu-es"
arg	398:44	398:49	7	&val
op	398:44	0:0	8	&
water	398:45	0:0	8	val
water	398:50	0:0	6	;
call	399:16	400:42	6	var_Change
arg	399:28	399:35	7	p_input
water	399:28	0:0	8	p_input
arg	399:37	399:45	7	"spu-es"
water	399:37	0:0	8	"spu-es"
arg	399:47	399:65	7	VLC_VAR_GETCHOICES
water	399:47	0:0	8	VLC_VAR_GETCHOICES
arg	400:28	400:33	7	&list
op	400:28	0:0	8	&
water	400:29	0:0	8	list
arg	400:35	400:42	7	&list2
op	400:35	0:0	8	&
water	400:36	0:0	8	list2
water	400:43	0:0	6	;
water	401:16	0:0	6	i_count
op	401:24	0:0	6	=
water	401:26	0:0	6	list
op	401:30	0:0	6	.
water	401:31	0:0	6	p_list
op	401:37	0:0	6	->
water	401:39	0:0	6	i_count
water	401:46	0:0	6	;
if	402:16	408:16	6	(i_count <= 1)
cond	402:20	402:31	7	i_count <= 1
water	402:20	0:0	8	i_count
op	402:28	0:0	8	<=
water	402:31	0:0	8	1
stmts	403:16	408:16	7	
water	403:16	0:0	8	{
call	404:20	405:45	8	DisplayMessage
arg	404:36	404:42	9	p_vout
water	404:36	0:0	10	p_vout
arg	404:44	404:67	9	_("Subtitle track: %s")
call	404:44	404:66	10	_
arg	404:46	404:66	11	"Subtitle track: %s"
water	404:46	0:0	12	"Subtitle track: %s"
arg	405:36	405:45	9	_("N/A")
call	405:36	405:43	10	_
arg	405:38	405:43	11	"N/A"
water	405:38	0:0	12	"N/A"
water	405:46	0:0	8	;
call	406:20	406:48	8	var_FreeList
arg	406:34	406:39	9	&list
op	406:34	0:0	10	&
water	406:35	0:0	10	list
arg	406:41	406:48	9	&list2
op	406:41	0:0	10	&
water	406:42	0:0	10	list2
water	406:49	0:0	8	;
break	407:20	407:25	8	
water	408:16	0:0	8	}
for	409:16	415:16	6	(i = 0 ;i < i_count;i ++)
forinit	409:21	409:26	7	i = 0 ;
water	409:21	0:0	8	i
op	409:23	0:0	8	=
water	409:25	0:0	8	0
water	409:26	0:0	8	;
cond	409:28	409:32	7	i < i_count
water	409:28	0:0	8	i
op	409:30	0:0	8	<
water	409:32	0:0	8	i_count
forexpr	409:41	409:42	7	i ++
water	409:41	0:0	8	i
op	409:42	0:0	8	++
stmts	410:16	415:16	7	
water	410:16	0:0	8	{
if	411:20	414:20	8	(val . i_int == list . p_list -> p_values [ i ] . i_int)
cond	411:24	411:62	9	val . i_int == list . p_list -> p_values [ i ] . i_int
water	411:24	0:0	10	val
op	411:27	0:0	10	.
water	411:28	0:0	10	i_int
op	411:34	0:0	10	==
water	411:37	0:0	10	list
op	411:41	0:0	10	.
water	411:42	0:0	10	p_list
op	411:48	0:0	10	->
water	411:50	0:0	10	p_values
op	411:58	0:0	10	[
water	411:59	0:0	10	i
op	411:60	0:0	10	]
op	411:61	0:0	10	.
water	411:62	0:0	10	i_int
stmts	412:20	414:20	9	
water	412:20	0:0	10	{
break	413:24	413:29	10	
water	414:20	0:0	10	}
water	415:16	0:0	8	}
if	417:16	422:16	6	(i == i_count)
cond	417:20	417:25	7	i == i_count
water	417:20	0:0	8	i
op	417:22	0:0	8	==
water	417:25	0:0	8	i_count
stmts	418:16	422:16	7	
water	418:16	0:0	8	{
call	419:20	420:76	8	msg_Warn
arg	419:30	419:37	9	p_input
water	419:30	0:0	10	p_input
arg	420:30	420:76	9	"invalid current subtitle track, selecting 0"
water	420:30	0:0	10	"invalid current subtitle track, selecting 0"
water	420:77	0:0	8	;
water	421:20	0:0	8	i
op	421:22	0:0	8	=
water	421:24	0:0	8	0
water	421:25	0:0	8	;
water	422:16	0:0	8	}
else	423:16	424:25	6
stmts	423:21	424:25	7	
if	423:21	424:25	8	(i == i_count - 1)
cond	423:25	423:40	9	i == i_count - 1
water	423:25	0:0	10	i
op	423:27	0:0	10	==
water	423:30	0:0	10	i_count
op	423:38	0:0	10	-
water	423:40	0:0	10	1
stmts	424:20	424:25	9	
water	424:20	0:0	10	i
op	424:22	0:0	10	=
water	424:24	0:0	10	0
water	424:25	0:0	10	;
else	425:16	426:23	6
stmts	426:20	426:23	7	
water	426:20	0:0	8	i
op	426:21	0:0	8	++
water	426:23	0:0	8	;
call	427:16	427:82	6	var_SetInteger
arg	427:32	427:39	7	p_input
water	427:32	0:0	8	p_input
arg	427:41	427:49	7	"spu-es"
water	427:41	0:0	8	"spu-es"
arg	427:51	427:82	7	list.p_list->p_values[i].i_int
water	427:51	0:0	8	list
op	427:55	0:0	8	.
water	427:56	0:0	8	p_list
op	427:62	0:0	8	->
water	427:64	0:0	8	p_values
op	427:72	0:0	8	[
water	427:73	0:0	8	i
op	427:74	0:0	8	]
op	427:75	0:0	8	.
water	427:76	0:0	8	i_int
water	427:83	0:0	6	;
call	428:16	428:86	6	var_SetInteger
arg	428:32	428:39	7	p_input
water	428:32	0:0	8	p_input
arg	428:41	428:53	7	"spu-choice"
water	428:41	0:0	8	"spu-choice"
arg	428:55	428:86	7	list.p_list->p_values[i].i_int
water	428:55	0:0	8	list
op	428:59	0:0	8	.
water	428:60	0:0	8	p_list
op	428:66	0:0	8	->
water	428:68	0:0	8	p_values
op	428:76	0:0	8	[
water	428:77	0:0	8	i
op	428:78	0:0	8	]
op	428:79	0:0	8	.
water	428:80	0:0	8	i_int
water	428:87	0:0	6	;
call	429:16	430:69	6	DisplayMessage
arg	429:32	429:38	7	p_vout
water	429:32	0:0	8	p_vout
arg	429:40	429:63	7	_("Subtitle track: %s")
call	429:40	429:62	8	_
arg	429:42	429:62	9	"Subtitle track: %s"
water	429:42	0:0	10	"Subtitle track: %s"
arg	430:32	430:69	7	list2.p_list->p_values[i].psz_string
water	430:32	0:0	8	list2
op	430:37	0:0	8	.
water	430:38	0:0	8	p_list
op	430:44	0:0	8	->
water	430:46	0:0	8	p_values
op	430:54	0:0	8	[
water	430:55	0:0	8	i
op	430:56	0:0	8	]
op	430:57	0:0	8	.
water	430:58	0:0	8	psz_string
water	430:70	0:0	6	;
call	431:16	431:44	6	var_FreeList
arg	431:30	431:35	7	&list
op	431:30	0:0	8	&
water	431:31	0:0	8	list
arg	431:37	431:44	7	&list2
op	431:37	0:0	8	&
water	431:38	0:0	8	list2
water	431:45	0:0	6	;
water	432:12	0:0	6	}
break	433:12	433:17	4	
label	434:8	434:37	4	case ACTIONID_SUBTITLE_TOGGLE :
if	435:12	480:12	4	(p_input)
cond	435:16	435:16	5	p_input
water	435:16	0:0	6	p_input
stmts	436:12	480:12	5	
water	436:12	0:0	6	{
decl	437:16	437:39	6	vlc_value_t	list
water	437:32	0:0	6	,
decl	437:16	437:39	6	vlc_value_t	list2
decl	438:16	438:73	6	int	i_count
water	438:27	0:0	6	,
decl	438:16	438:73	6	int	i_sel_index
water	438:40	0:0	6	,
decl	438:16	438:73	6	int	i_sel_id
water	438:50	0:0	6	,
decl	438:16	438:73	6	int	i_old_id
water	438:60	0:0	6	,
decl	438:16	438:73	6	int	i_new_index
water	439:16	0:0	6	i_old_id
op	439:25	0:0	6	=
call	439:27	439:61	6	var_GetInteger
arg	439:43	439:50	7	p_input
water	439:43	0:0	8	p_input
arg	439:52	439:61	7	"spu-es"
water	439:52	0:0	8	"spu-es"
water	439:62	0:0	6	;
water	440:16	0:0	6	i_sel_id
op	440:25	0:0	6	=
call	440:27	440:65	6	var_GetInteger
arg	440:43	440:50	7	p_input
water	440:43	0:0	8	p_input
arg	440:52	440:65	7	"spu-choice"
water	440:52	0:0	8	"spu-choice"
water	440:66	0:0	6	;
call	441:16	442:42	6	var_Change
arg	441:28	441:35	7	p_input
water	441:28	0:0	8	p_input
arg	441:37	441:45	7	"spu-es"
water	441:37	0:0	8	"spu-es"
arg	441:47	441:65	7	VLC_VAR_GETCHOICES
water	441:47	0:0	8	VLC_VAR_GETCHOICES
arg	442:28	442:33	7	&list
op	442:28	0:0	8	&
water	442:29	0:0	8	list
arg	442:35	442:42	7	&list2
op	442:35	0:0	8	&
water	442:36	0:0	8	list2
water	442:43	0:0	6	;
water	443:16	0:0	6	i_count
op	443:24	0:0	6	=
water	443:26	0:0	6	list
op	443:30	0:0	6	.
water	443:31	0:0	6	p_list
op	443:37	0:0	6	->
water	443:39	0:0	6	i_count
water	443:46	0:0	6	;
if	444:16	450:16	6	(i_count <= 1)
cond	444:20	444:31	7	i_count <= 1
water	444:20	0:0	8	i_count
op	444:28	0:0	8	<=
water	444:31	0:0	8	1
stmts	445:16	450:16	7	
water	445:16	0:0	8	{
call	446:20	447:45	8	DisplayMessage
arg	446:36	446:42	9	p_vout
water	446:36	0:0	10	p_vout
arg	446:44	446:67	9	_("Subtitle track: %s")
call	446:44	446:66	10	_
arg	446:46	446:66	11	"Subtitle track: %s"
water	446:46	0:0	12	"Subtitle track: %s"
arg	447:36	447:45	9	_("N/A")
call	447:36	447:43	10	_
arg	447:38	447:43	11	"N/A"
water	447:38	0:0	12	"N/A"
water	447:46	0:0	8	;
call	448:20	448:48	8	var_FreeList
arg	448:34	448:39	9	&list
op	448:34	0:0	10	&
water	448:35	0:0	10	list
arg	448:41	448:48	9	&list2
op	448:41	0:0	10	&
water	448:42	0:0	10	list2
water	448:49	0:0	8	;
break	449:20	449:25	8	
water	450:16	0:0	8	}
for	451:16	457:16	6	(i_sel_index = 0 ;i_sel_index < i_count;i_sel_index ++)
forinit	451:21	451:36	7	i_sel_index = 0 ;
water	451:21	0:0	8	i_sel_index
op	451:33	0:0	8	=
water	451:35	0:0	8	0
water	451:36	0:0	8	;
cond	451:38	451:52	7	i_sel_index < i_count
water	451:38	0:0	8	i_sel_index
op	451:50	0:0	8	<
water	451:52	0:0	8	i_count
forexpr	451:61	451:72	7	i_sel_index ++
water	451:61	0:0	8	i_sel_index
op	451:72	0:0	8	++
stmts	452:16	457:16	7	
water	452:16	0:0	8	{
if	453:20	456:20	8	(i_sel_id == list . p_list -> p_values [ i_sel_index ] . i_int)
cond	453:24	453:71	9	i_sel_id == list . p_list -> p_values [ i_sel_index ] . i_int
water	453:24	0:0	10	i_sel_id
op	453:33	0:0	10	==
water	453:36	0:0	10	list
op	453:40	0:0	10	.
water	453:41	0:0	10	p_list
op	453:47	0:0	10	->
water	453:49	0:0	10	p_values
op	453:57	0:0	10	[
water	453:58	0:0	10	i_sel_index
op	453:69	0:0	10	]
op	453:70	0:0	10	.
water	453:71	0:0	10	i_int
stmts	454:20	456:20	9	
water	454:20	0:0	10	{
break	455:24	455:29	10	
water	456:20	0:0	10	}
water	457:16	0:0	8	}
if	459:16	463:16	6	(! i_sel_index)
cond	459:20	459:21	7	! i_sel_index
op	459:20	0:0	8	!
water	459:21	0:0	8	i_sel_index
stmts	459:35	463:16	7	
water	459:35	0:0	8	{
water	460:20	0:0	8	i_sel_index
op	460:32	0:0	8	=
water	460:34	0:0	8	1
water	460:35	0:0	8	;
water	461:20	0:0	8	i_sel_id
op	461:29	0:0	8	=
water	461:31	0:0	8	list
op	461:35	0:0	8	.
water	461:36	0:0	8	p_list
op	461:42	0:0	8	->
water	461:44	0:0	8	p_values
op	461:52	0:0	8	[
water	461:53	0:0	8	1
op	461:54	0:0	8	]
op	461:55	0:0	8	.
water	461:56	0:0	8	i_int
water	461:61	0:0	8	;
call	462:20	462:68	8	var_SetInteger
arg	462:36	462:43	9	p_input
water	462:36	0:0	10	p_input
arg	462:45	462:57	9	"spu-choice"
water	462:45	0:0	10	"spu-choice"
arg	462:59	462:68	9	i_sel_id
water	462:59	0:0	10	i_sel_id
water	462:69	0:0	8	;
water	463:16	0:0	8	}
water	464:16	0:0	6	i_new_index
op	464:28	0:0	6	=
water	464:30	0:0	6	0
water	464:31	0:0	6	;
if	465:16	475:16	6	(i_old_id != i_sel_id)
cond	465:20	465:32	7	i_old_id != i_sel_id
water	465:20	0:0	8	i_old_id
op	465:29	0:0	8	!=
water	465:32	0:0	8	i_sel_id
stmts	466:16	475:16	7	
water	466:16	0:0	8	{
if	467:20	470:20	8	(i_sel_index >= i_count)
cond	467:24	467:39	9	i_sel_index >= i_count
water	467:24	0:0	10	i_sel_index
op	467:36	0:0	10	>=
water	467:39	0:0	10	i_count
stmts	468:20	470:20	9	
water	468:20	0:0	10	{
call	469:24	469:94	10	var_SetInteger
arg	469:40	469:47	11	p_input
water	469:40	0:0	12	p_input
arg	469:49	469:61	11	"spu-choice"
water	469:49	0:0	12	"spu-choice"
arg	469:63	469:94	11	list.p_list->p_values[0].i_int
water	469:63	0:0	12	list
op	469:67	0:0	12	.
water	469:68	0:0	12	p_list
op	469:74	0:0	12	->
water	469:76	0:0	12	p_values
op	469:84	0:0	12	[
water	469:85	0:0	12	0
op	469:86	0:0	12	]
op	469:87	0:0	12	.
water	469:88	0:0	12	i_int
water	469:95	0:0	10	;
water	470:20	0:0	10	}
else	471:20	474:20	8
stmts	472:20	474:20	9	
water	472:20	0:0	10	{
water	473:24	0:0	10	i_new_index
op	473:36	0:0	10	=
water	473:38	0:0	10	i_sel_index
water	473:49	0:0	10	;
water	474:20	0:0	10	}
water	475:16	0:0	8	}
call	476:16	476:92	6	var_SetInteger
arg	476:32	476:39	7	p_input
water	476:32	0:0	8	p_input
arg	476:41	476:49	7	"spu-es"
water	476:41	0:0	8	"spu-es"
arg	476:51	476:92	7	list.p_list->p_values[i_new_index].i_int
water	476:51	0:0	8	list
op	476:55	0:0	8	.
water	476:56	0:0	8	p_list
op	476:62	0:0	8	->
water	476:64	0:0	8	p_values
op	476:72	0:0	8	[
water	476:73	0:0	8	i_new_index
op	476:84	0:0	8	]
op	476:85	0:0	8	.
water	476:86	0:0	8	i_int
water	476:93	0:0	6	;
call	477:16	478:79	6	DisplayMessage
arg	477:32	477:38	7	p_vout
water	477:32	0:0	8	p_vout
arg	477:40	477:63	7	_("Subtitle track: %s")
call	477:40	477:62	8	_
arg	477:42	477:62	9	"Subtitle track: %s"
water	477:42	0:0	10	"Subtitle track: %s"
arg	478:32	478:79	7	list2.p_list->p_values[i_new_index].psz_string
water	478:32	0:0	8	list2
op	478:37	0:0	8	.
water	478:38	0:0	8	p_list
op	478:44	0:0	8	->
water	478:46	0:0	8	p_values
op	478:54	0:0	8	[
water	478:55	0:0	8	i_new_index
op	478:66	0:0	8	]
op	478:67	0:0	8	.
water	478:68	0:0	8	psz_string
water	478:80	0:0	6	;
call	479:16	479:44	6	var_FreeList
arg	479:30	479:35	7	&list
op	479:30	0:0	8	&
water	479:31	0:0	8	list
arg	479:37	479:44	7	&list2
op	479:37	0:0	8	&
water	479:38	0:0	8	list2
water	479:45	0:0	6	;
water	480:12	0:0	6	}
break	481:12	481:17	4	
label	482:8	482:38	4	case ACTIONID_PROGRAM_SID_NEXT :
label	483:8	483:38	4	case ACTIONID_PROGRAM_SID_PREV :
if	484:12	529:12	4	(p_input)
cond	484:16	484:16	5	p_input
water	484:16	0:0	6	p_input
stmts	485:12	529:12	5	
water	485:12	0:0	6	{
decl	486:16	486:44	6	vlc_value_t	val
water	486:31	0:0	6	,
decl	486:16	486:44	6	vlc_value_t	list
water	486:37	0:0	6	,
decl	486:16	486:44	6	vlc_value_t	list2
decl	487:16	487:30	6	int	i_count
water	487:27	0:0	6	,
decl	487:16	487:30	6	int	i
call	488:16	488:50	6	var_Get
arg	488:25	488:32	7	p_input
water	488:25	0:0	8	p_input
arg	488:34	488:43	7	"program"
water	488:34	0:0	8	"program"
arg	488:45	488:50	7	&val
op	488:45	0:0	8	&
water	488:46	0:0	8	val
water	488:51	0:0	6	;
call	489:16	490:42	6	var_Change
arg	489:28	489:35	7	p_input
water	489:28	0:0	8	p_input
arg	489:37	489:46	7	"program"
water	489:37	0:0	8	"program"
arg	489:48	489:66	7	VLC_VAR_GETCHOICES
water	489:48	0:0	8	VLC_VAR_GETCHOICES
arg	490:28	490:33	7	&list
op	490:28	0:0	8	&
water	490:29	0:0	8	list
arg	490:35	490:42	7	&list2
op	490:35	0:0	8	&
water	490:36	0:0	8	list2
water	490:43	0:0	6	;
water	491:16	0:0	6	i_count
op	491:24	0:0	6	=
water	491:26	0:0	6	list
op	491:30	0:0	6	.
water	491:31	0:0	6	p_list
op	491:37	0:0	6	->
water	491:39	0:0	6	i_count
water	491:46	0:0	6	;
if	492:16	498:16	6	(i_count <= 1)
cond	492:20	492:31	7	i_count <= 1
water	492:20	0:0	8	i_count
op	492:28	0:0	8	<=
water	492:31	0:0	8	1
stmts	493:16	498:16	7	
water	493:16	0:0	8	{
call	494:20	495:45	8	DisplayMessage
arg	494:36	494:42	9	p_vout
water	494:36	0:0	10	p_vout
arg	494:44	494:71	9	_("Program Service ID: %s")
call	494:44	494:70	10	_
arg	494:46	494:70	11	"Program Service ID: %s"
water	494:46	0:0	12	"Program Service ID: %s"
arg	495:36	495:45	9	_("N/A")
call	495:36	495:43	10	_
arg	495:38	495:43	11	"N/A"
water	495:38	0:0	12	"N/A"
water	495:46	0:0	8	;
call	496:20	496:48	8	var_FreeList
arg	496:34	496:39	9	&list
op	496:34	0:0	10	&
water	496:35	0:0	10	list
arg	496:41	496:48	9	&list2
op	496:41	0:0	10	&
water	496:42	0:0	10	list2
water	496:49	0:0	8	;
break	497:20	497:25	8	
water	498:16	0:0	8	}
for	499:16	505:16	6	(i = 0 ;i < i_count;i ++)
forinit	499:21	499:26	7	i = 0 ;
water	499:21	0:0	8	i
op	499:23	0:0	8	=
water	499:25	0:0	8	0
water	499:26	0:0	8	;
cond	499:28	499:32	7	i < i_count
water	499:28	0:0	8	i
op	499:30	0:0	8	<
water	499:32	0:0	8	i_count
forexpr	499:41	499:42	7	i ++
water	499:41	0:0	8	i
op	499:42	0:0	8	++
stmts	500:16	505:16	7	
water	500:16	0:0	8	{
if	501:20	504:20	8	(val . i_int == list . p_list -> p_values [ i ] . i_int)
cond	501:24	501:62	9	val . i_int == list . p_list -> p_values [ i ] . i_int
water	501:24	0:0	10	val
op	501:27	0:0	10	.
water	501:28	0:0	10	i_int
op	501:34	0:0	10	==
water	501:37	0:0	10	list
op	501:41	0:0	10	.
water	501:42	0:0	10	p_list
op	501:48	0:0	10	->
water	501:50	0:0	10	p_values
op	501:58	0:0	10	[
water	501:59	0:0	10	i
op	501:60	0:0	10	]
op	501:61	0:0	10	.
water	501:62	0:0	10	i_int
stmts	502:20	504:20	9	
water	502:20	0:0	10	{
break	503:24	503:29	10	
water	504:20	0:0	10	}
water	505:16	0:0	8	}
if	507:16	512:16	6	(i == i_count)
cond	507:20	507:25	7	i == i_count
water	507:20	0:0	8	i
op	507:22	0:0	8	==
water	507:25	0:0	8	i_count
stmts	508:16	512:16	7	
water	508:16	0:0	8	{
call	509:20	510:73	8	msg_Warn
arg	509:30	509:37	9	p_input
water	509:30	0:0	10	p_input
arg	510:30	510:73	9	"invalid current program SID, selecting 0"
water	510:30	0:0	10	"invalid current program SID, selecting 0"
water	510:74	0:0	8	;
water	511:20	0:0	8	i
op	511:22	0:0	8	=
water	511:24	0:0	8	0
water	511:25	0:0	8	;
water	512:16	0:0	8	}
else	513:16	518:20	6
stmts	513:21	518:20	7	
if	513:21	518:20	8	(i_action == ACTIONID_PROGRAM_SID_NEXT)
cond	513:25	513:37	9	i_action == ACTIONID_PROGRAM_SID_NEXT
water	513:25	0:0	10	i_action
op	513:34	0:0	10	==
water	513:37	0:0	10	ACTIONID_PROGRAM_SID_NEXT
stmts	513:65	518:20	9	
water	513:65	0:0	10	{
if	514:20	515:29	10	(i == i_count - 1)
cond	514:24	514:39	11	i == i_count - 1
water	514:24	0:0	12	i
op	514:26	0:0	12	==
water	514:29	0:0	12	i_count
op	514:37	0:0	12	-
water	514:39	0:0	12	1
stmts	515:24	515:29	11	
water	515:24	0:0	12	i
op	515:26	0:0	12	=
water	515:28	0:0	12	0
water	515:29	0:0	12	;
else	516:20	517:27	10
stmts	517:24	517:27	11	
water	517:24	0:0	12	i
op	517:25	0:0	12	++
water	517:27	0:0	12	;
water	518:20	0:0	10	}
else	519:16	524:20	6
stmts	519:21	524:20	7	
water	519:21	0:0	8	{
if	520:20	521:39	8	(i == 0)
cond	520:24	520:29	9	i == 0
water	520:24	0:0	10	i
op	520:26	0:0	10	==
water	520:29	0:0	10	0
stmts	521:24	521:39	9	
water	521:24	0:0	10	i
op	521:26	0:0	10	=
water	521:28	0:0	10	i_count
op	521:36	0:0	10	-
water	521:38	0:0	10	1
water	521:39	0:0	10	;
else	522:20	523:27	8
stmts	523:24	523:27	9	
water	523:24	0:0	10	i
op	523:25	0:0	10	--
water	523:27	0:0	10	;
water	524:20	0:0	8	}
call	525:16	525:70	6	var_Set
arg	525:25	525:32	7	p_input
water	525:25	0:0	8	p_input
arg	525:34	525:43	7	"program"
water	525:34	0:0	8	"program"
arg	525:45	525:70	7	list.p_list->p_values[i]
water	525:45	0:0	8	list
op	525:49	0:0	8	.
water	525:50	0:0	8	p_list
op	525:56	0:0	8	->
water	525:58	0:0	8	p_values
op	525:66	0:0	8	[
water	525:67	0:0	8	i
op	525:68	0:0	8	]
water	525:71	0:0	6	;
call	526:16	527:69	6	DisplayMessage
arg	526:32	526:38	7	p_vout
water	526:32	0:0	8	p_vout
arg	526:40	526:67	7	_("Program Service ID: %s")
call	526:40	526:66	8	_
arg	526:42	526:66	9	"Program Service ID: %s"
water	526:42	0:0	10	"Program Service ID: %s"
arg	527:32	527:69	7	list2.p_list->p_values[i].psz_string
water	527:32	0:0	8	list2
op	527:37	0:0	8	.
water	527:38	0:0	8	p_list
op	527:44	0:0	8	->
water	527:46	0:0	8	p_values
op	527:54	0:0	8	[
water	527:55	0:0	8	i
op	527:56	0:0	8	]
op	527:57	0:0	8	.
water	527:58	0:0	8	psz_string
water	527:70	0:0	6	;
call	528:16	528:44	6	var_FreeList
arg	528:30	528:35	7	&list
op	528:30	0:0	8	&
water	528:31	0:0	8	list
arg	528:37	528:44	7	&list2
op	528:37	0:0	8	&
water	528:38	0:0	8	list2
water	528:45	0:0	6	;
water	529:12	0:0	6	}
break	530:12	530:17	4	
label	531:8	531:46	4	case ACTIONID_JUMP_BACKWARD_EXTRASHORT :
label	532:8	532:45	4	case ACTIONID_JUMP_FORWARD_EXTRASHORT :
label	533:8	533:41	4	case ACTIONID_JUMP_BACKWARD_SHORT :
label	534:8	534:40	4	case ACTIONID_JUMP_FORWARD_SHORT :
label	535:8	535:42	4	case ACTIONID_JUMP_BACKWARD_MEDIUM :
label	536:8	536:41	4	case ACTIONID_JUMP_FORWARD_MEDIUM :
label	537:8	537:40	4	case ACTIONID_JUMP_BACKWARD_LONG :
label	538:8	538:39	4	case ACTIONID_JUMP_FORWARD_LONG :
water	539:8	0:0	4	{
if	540:12	541:21	4	(p_input == NULL || !var_GetBool (p_input ,"can-seek" ))
cond	540:16	540:69	5	p_input == NULL || !var_GetBool (p_input ,"can-seek" )
water	540:16	0:0	6	p_input
op	540:24	0:0	6	==
water	540:27	0:0	6	NULL
op	540:32	0:0	6	||
op	540:35	0:0	6	!
call	540:36	540:69	6	var_GetBool
arg	540:49	540:56	7	p_input
water	540:49	0:0	8	p_input
arg	540:58	540:69	7	"can-seek"
water	540:58	0:0	8	"can-seek"
stmts	541:16	541:21	5	
break	541:16	541:21	6	
decl	542:12	542:31	4	const char	*varname
decl	543:12	543:25	4	int	sign
op	543:21	0:0	4	=
op	543:23	0:0	4	+
water	543:24	0:0	4	1
switch	544:12	566:12	4	(i_action)
cond	544:20	544:20	5	i_action
water	544:20	0:0	6	i_action
stmts	545:12	566:12	5	
water	545:12	0:0	6	{
label	546:16	546:54	6	case ACTIONID_JUMP_BACKWARD_EXTRASHORT :
water	547:20	0:0	6	sign
op	547:25	0:0	6	=
op	547:27	0:0	6	-
water	547:28	0:0	6	1
water	547:29	0:0	6	;
label	548:16	548:53	6	case ACTIONID_JUMP_FORWARD_EXTRASHORT :
water	549:20	0:0	6	varname
op	549:28	0:0	6	=
water	549:30	0:0	6	"extrashort-jump-size"
water	549:52	0:0	6	;
break	550:20	550:25	6	
label	551:16	551:49	6	case ACTIONID_JUMP_BACKWARD_SHORT :
water	552:20	0:0	6	sign
op	552:25	0:0	6	=
op	552:27	0:0	6	-
water	552:28	0:0	6	1
water	552:29	0:0	6	;
label	553:16	553:48	6	case ACTIONID_JUMP_FORWARD_SHORT :
water	554:20	0:0	6	varname
op	554:28	0:0	6	=
water	554:30	0:0	6	"short-jump-size"
water	554:47	0:0	6	;
break	555:20	555:25	6	
label	556:16	556:50	6	case ACTIONID_JUMP_BACKWARD_MEDIUM :
water	557:20	0:0	6	sign
op	557:25	0:0	6	=
op	557:27	0:0	6	-
water	557:28	0:0	6	1
water	557:29	0:0	6	;
label	558:16	558:49	6	case ACTIONID_JUMP_FORWARD_MEDIUM :
water	559:20	0:0	6	varname
op	559:28	0:0	6	=
water	559:30	0:0	6	"medium-jump-size"
water	559:48	0:0	6	;
break	560:20	560:25	6	
label	561:16	561:48	6	case ACTIONID_JUMP_BACKWARD_LONG :
water	562:20	0:0	6	sign
op	562:25	0:0	6	=
op	562:27	0:0	6	-
water	562:28	0:0	6	1
water	562:29	0:0	6	;
label	563:16	563:47	6	case ACTIONID_JUMP_FORWARD_LONG :
water	564:20	0:0	6	varname
op	564:28	0:0	6	=
water	564:30	0:0	6	"long-jump-size"
water	564:46	0:0	6	;
break	565:20	565:25	6	
water	566:12	0:0	6	}
decl	567:12	567:63	4	mtime_t	it
op	567:23	0:0	4	=
call	567:25	567:62	5	var_InheritInteger
arg	567:45	567:52	6	p_input
water	567:45	0:0	7	p_input
arg	567:54	567:62	6	varname
water	567:54	0:0	7	varname
if	568:12	569:21	4	(it < 0)
cond	568:16	568:21	5	it < 0
water	568:16	0:0	6	it
op	568:19	0:0	6	<
water	568:21	0:0	6	0
stmts	569:16	569:21	5	
break	569:16	569:21	6	
call	570:12	570:72	4	var_SetTime
arg	570:25	570:32	5	p_input
water	570:25	0:0	6	p_input
arg	570:34	570:47	5	"time-offset"
water	570:34	0:0	6	"time-offset"
arg	570:49	570:72	5	it*sign*CLOCK_FREQ
water	570:49	0:0	6	it
op	570:52	0:0	6	*
water	570:54	0:0	6	sign
op	570:59	0:0	6	*
water	570:61	0:0	6	CLOCK_FREQ
water	570:73	0:0	4	;
call	571:12	571:53	4	DisplayPosition
arg	571:29	571:35	5	p_intf
water	571:29	0:0	6	p_intf
arg	571:37	571:43	5	p_vout
water	571:37	0:0	6	p_vout
arg	571:45	571:53	5	p_input
water	571:45	0:0	6	p_input
water	571:54	0:0	4	;
break	572:12	572:17	4	
water	573:8	0:0	4	}
label	575:8	575:32	4	case ACTIONID_TITLE_PREV :
if	576:12	577:60	4	(p_input)
cond	576:16	576:16	5	p_input
water	576:16	0:0	6	p_input
stmts	577:16	577:60	5	
call	577:16	577:59	6	var_TriggerCallback
arg	577:37	577:44	7	p_input
water	577:37	0:0	8	p_input
arg	577:46	577:59	7	"prev-title"
water	577:46	0:0	8	"prev-title"
water	577:60	0:0	6	;
break	578:12	578:17	4	
label	579:8	579:32	4	case ACTIONID_TITLE_NEXT :
if	580:12	581:60	4	(p_input)
cond	580:16	580:16	5	p_input
water	580:16	0:0	6	p_input
stmts	581:16	581:60	5	
call	581:16	581:59	6	var_TriggerCallback
arg	581:37	581:44	7	p_input
water	581:37	0:0	8	p_input
arg	581:46	581:59	7	"next-title"
water	581:46	0:0	8	"next-title"
water	581:60	0:0	6	;
break	582:12	582:17	4	
label	583:8	583:34	4	case ACTIONID_CHAPTER_PREV :
if	584:12	585:62	4	(p_input)
cond	584:16	584:16	5	p_input
water	584:16	0:0	6	p_input
stmts	585:16	585:62	5	
call	585:16	585:61	6	var_TriggerCallback
arg	585:37	585:44	7	p_input
water	585:37	0:0	8	p_input
arg	585:46	585:61	7	"prev-chapter"
water	585:46	0:0	8	"prev-chapter"
water	585:62	0:0	6	;
break	586:12	586:17	4	
label	587:8	587:34	4	case ACTIONID_CHAPTER_NEXT :
if	588:12	589:62	4	(p_input)
cond	588:16	588:16	5	p_input
water	588:16	0:0	6	p_input
stmts	589:16	589:62	5	
call	589:16	589:61	6	var_TriggerCallback
arg	589:37	589:44	7	p_input
water	589:37	0:0	8	p_input
arg	589:46	589:61	7	"next-chapter"
water	589:46	0:0	8	"next-chapter"
water	589:62	0:0	6	;
break	590:12	590:17	4	
label	591:8	591:31	4	case ACTIONID_DISC_MENU :
if	592:12	593:56	4	(p_input)
cond	592:16	592:16	5	p_input
water	592:16	0:0	6	p_input
stmts	593:16	593:56	5	
call	593:16	593:55	6	var_SetInteger
arg	593:32	593:39	7	p_input
water	593:32	0:0	8	p_input
arg	593:41	593:51	7	"title  0"
water	593:41	0:0	8	"title  0"
arg	593:53	593:55	7	2
water	593:53	0:0	8	2
water	593:56	0:0	6	;
break	594:12	594:17	4	
label	595:8	595:34	4	case ACTIONID_NAV_ACTIVATE :
label	596:8	596:28	4	case ACTIONID_NAV_UP :
label	597:8	597:30	4	case ACTIONID_NAV_DOWN :
label	598:8	598:30	4	case ACTIONID_NAV_LEFT :
label	599:8	599:31	4	case ACTIONID_NAV_RIGHT :
if	600:12	602:59	4	(p_input)
cond	600:16	600:16	5	p_input
water	600:16	0:0	6	p_input
stmts	601:16	602:59	5	
call	601:16	602:58	6	input_Control
arg	601:31	601:38	7	p_input
water	601:31	0:0	8	p_input
arg	601:40	602:51	7	i_action-ACTIONID_NAV_ACTIVATE+INPUT_NAV_ACTIVATE
water	601:40	0:0	8	i_action
op	601:49	0:0	8	-
water	601:51	0:0	8	ACTIONID_NAV_ACTIVATE
op	602:31	0:0	8	+
water	602:33	0:0	8	INPUT_NAV_ACTIVATE
arg	602:53	602:58	7	NULL
water	602:53	0:0	8	NULL
water	602:59	0:0	6	;
break	603:12	603:17	4	
label	605:8	605:30	4	case ACTIONID_SNAPSHOT :
if	606:12	607:63	4	(p_vout)
cond	606:16	606:16	5	p_vout
water	606:16	0:0	6	p_vout
stmts	607:16	607:63	5	
call	607:16	607:62	6	var_TriggerCallback
arg	607:37	607:43	7	p_vout
water	607:37	0:0	8	p_vout
arg	607:45	607:62	7	"video-snapshot"
water	607:45	0:0	8	"video-snapshot"
water	607:63	0:0	6	;
break	608:12	608:17	4	
label	609:8	609:39	4	case ACTIONID_TOGGLE_FULLSCREEN :
water	610:8	0:0	4	{
if	611:12	615:12	4	(p_vout)
cond	611:16	611:16	5	p_vout
water	611:16	0:0	6	p_vout
stmts	612:12	615:12	5	
water	612:12	0:0	6	{
decl	613:16	613:64	6	bool	fs
op	613:24	0:0	6	=
call	613:26	613:63	7	var_ToggleBool
arg	613:42	613:48	8	p_vout
water	613:42	0:0	9	p_vout
arg	613:50	613:63	8	"fullscreen"
water	613:50	0:0	9	"fullscreen"
call	614:16	614:58	6	var_SetBool
arg	614:29	614:39	7	p_playlist
water	614:29	0:0	8	p_playlist
arg	614:41	614:53	7	"fullscreen"
water	614:41	0:0	8	"fullscreen"
arg	614:55	614:58	7	fs
water	614:55	0:0	8	fs
water	614:59	0:0	6	;
water	615:12	0:0	6	}
else	616:12	617:58	4
stmts	617:16	617:58	5	
call	617:16	617:57	6	var_ToggleBool
arg	617:32	617:42	7	p_playlist
water	617:32	0:0	8	p_playlist
arg	617:44	617:57	7	"fullscreen"
water	617:44	0:0	8	"fullscreen"
water	617:58	0:0	6	;
break	618:12	618:17	4	
water	619:8	0:0	4	}
label	620:8	620:38	4	case ACTIONID_LEAVE_FULLSCREEN :
if	621:12	622:58	4	(p_vout)
cond	621:16	621:16	5	p_vout
water	621:16	0:0	6	p_vout
stmts	622:16	622:58	5	
call	622:16	622:57	6	var_SetBool
arg	622:29	622:35	7	p_vout
water	622:29	0:0	8	p_vout
arg	622:37	622:49	7	"fullscreen"
water	622:37	0:0	8	"fullscreen"
arg	622:51	622:57	7	false
water	622:51	0:0	8	false
water	622:58	0:0	6	;
call	623:12	623:57	4	var_SetBool
arg	623:25	623:35	5	p_playlist
water	623:25	0:0	6	p_playlist
arg	623:37	623:49	5	"fullscreen"
water	623:37	0:0	6	"fullscreen"
arg	623:51	623:57	5	false
water	623:51	0:0	6	false
water	623:58	0:0	4	;
break	624:12	624:17	4	
label	625:8	625:34	4	case ACTIONID_ASPECT_RATIO :
if	626:12	651:12	4	(p_vout)
cond	626:16	626:16	5	p_vout
water	626:16	0:0	6	p_vout
stmts	627:12	651:12	5	
water	627:12	0:0	6	{
decl	628:16	628:56	6	vlc_value_t	val
op	628:31	0:0	6	=
water	628:32	0:0	6	{
water	628:33	0:0	6	0
water	628:34	0:0	6	}
water	628:35	0:0	6	,
decl	628:16	628:56	6	vlc_value_t	val_list
water	628:45	0:0	6	,
decl	628:16	628:56	6	vlc_value_t	text_list
call	629:16	629:54	6	var_Get
arg	629:25	629:31	7	p_vout
water	629:25	0:0	8	p_vout
arg	629:33	629:47	7	"aspect-ratio"
water	629:33	0:0	8	"aspect-ratio"
arg	629:49	629:54	7	&val
op	629:49	0:0	8	&
water	629:50	0:0	8	val
water	629:55	0:0	6	;
if	630:16	649:16	6	(var_Change (p_vout ,"aspect-ratio" ,VLC_VAR_GETLIST ,& val_list ,& text_list ) >= 0)
cond	630:20	631:59	7	var_Change (p_vout ,"aspect-ratio" ,VLC_VAR_GETLIST ,& val_list ,& text_list ) >= 0
call	630:20	631:54	8	var_Change
arg	630:32	630:38	9	p_vout
water	630:32	0:0	10	p_vout
arg	630:40	630:54	9	"aspect-ratio"
water	630:40	0:0	10	"aspect-ratio"
arg	630:56	630:71	9	VLC_VAR_GETLIST
water	630:56	0:0	10	VLC_VAR_GETLIST
arg	631:32	631:41	9	&val_list
op	631:32	0:0	10	&
water	631:33	0:0	10	val_list
arg	631:43	631:54	9	&text_list
op	631:43	0:0	10	&
water	631:44	0:0	10	text_list
op	631:56	0:0	8	>=
water	631:59	0:0	8	0
stmts	632:16	649:16	7	
water	632:16	0:0	8	{
decl	633:20	633:25	8	int	i
for	634:20	642:20	8	(i = 0 ;i < val_list . p_list -> i_count;i ++)
forinit	634:25	634:30	9	i = 0 ;
water	634:25	0:0	10	i
op	634:27	0:0	10	=
water	634:29	0:0	10	0
water	634:30	0:0	10	;
cond	634:32	634:53	9	i < val_list . p_list -> i_count
water	634:32	0:0	10	i
op	634:34	0:0	10	<
water	634:36	0:0	10	val_list
op	634:44	0:0	10	.
water	634:45	0:0	10	p_list
op	634:51	0:0	10	->
water	634:53	0:0	10	i_count
forexpr	634:62	634:63	9	i ++
water	634:62	0:0	10	i
op	634:63	0:0	10	++
stmts	635:20	642:20	9	
water	635:20	0:0	10	{
if	636:24	641:24	10	(!strcmp (val_list . p_list -> p_values [ i ] . psz_string ,val . psz_string ))
cond	636:28	637:52	11	!strcmp (val_list . p_list -> p_values [ i ] . psz_string ,val . psz_string )
op	636:28	0:0	12	!
call	636:29	637:52	12	strcmp
arg	636:37	636:76	13	val_list.p_list->p_values[i].psz_string
water	636:37	0:0	14	val_list
op	636:45	0:0	14	.
water	636:46	0:0	14	p_list
op	636:52	0:0	14	->
water	636:54	0:0	14	p_values
op	636:62	0:0	14	[
water	636:63	0:0	14	i
op	636:64	0:0	14	]
op	636:65	0:0	14	.
water	636:66	0:0	14	psz_string
arg	637:37	637:52	13	val.psz_string
water	637:37	0:0	14	val
op	637:40	0:0	14	.
water	637:41	0:0	14	psz_string
stmts	638:24	641:24	11	
water	638:24	0:0	12	{
water	639:28	0:0	12	i
op	639:29	0:0	12	++
water	639:31	0:0	12	;
break	640:28	640:33	12	
water	641:24	0:0	12	}
water	642:20	0:0	10	}
if	643:20	643:61	8	(i == val_list . p_list -> i_count)
cond	643:24	643:46	9	i == val_list . p_list -> i_count
water	643:24	0:0	10	i
op	643:26	0:0	10	==
water	643:29	0:0	10	val_list
op	643:37	0:0	10	.
water	643:38	0:0	10	p_list
op	643:44	0:0	10	->
water	643:46	0:0	10	i_count
stmts	643:56	643:61	9	
water	643:56	0:0	10	i
op	643:58	0:0	10	=
water	643:60	0:0	10	0
water	643:61	0:0	10	;
call	644:20	645:75	8	var_SetString
arg	644:35	644:41	9	p_vout
water	644:35	0:0	10	p_vout
arg	644:43	644:57	9	"aspect-ratio"
water	644:43	0:0	10	"aspect-ratio"
arg	645:35	645:75	9	val_list.p_list->p_values[i].psz_string
water	645:35	0:0	10	val_list
op	645:43	0:0	10	.
water	645:44	0:0	10	p_list
op	645:50	0:0	10	->
water	645:52	0:0	10	p_values
op	645:60	0:0	10	[
water	645:61	0:0	10	i
op	645:62	0:0	10	]
op	645:63	0:0	10	.
water	645:64	0:0	10	psz_string
water	645:76	0:0	8	;
call	646:20	647:77	8	DisplayMessage
arg	646:36	646:42	9	p_vout
water	646:36	0:0	10	p_vout
arg	646:44	646:65	9	_("Aspect ratio: %s")
call	646:44	646:64	10	_
arg	646:46	646:64	11	"Aspect ratio: %s"
water	646:46	0:0	12	"Aspect ratio: %s"
arg	647:36	647:77	9	text_list.p_list->p_values[i].psz_string
water	647:36	0:0	10	text_list
op	647:45	0:0	10	.
water	647:46	0:0	10	p_list
op	647:52	0:0	10	->
water	647:54	0:0	10	p_values
op	647:62	0:0	10	[
water	647:63	0:0	10	i
op	647:64	0:0	10	]
op	647:65	0:0	10	.
water	647:66	0:0	10	psz_string
water	647:78	0:0	8	;
call	648:20	648:56	8	var_FreeList
arg	648:34	648:43	9	&val_list
op	648:34	0:0	10	&
water	648:35	0:0	10	val_list
arg	648:45	648:56	9	&text_list
op	648:45	0:0	10	&
water	648:46	0:0	10	text_list
water	648:57	0:0	8	;
water	649:16	0:0	8	}
call	650:16	650:37	6	free
arg	650:22	650:37	7	val.psz_string
water	650:22	0:0	8	val
op	650:25	0:0	8	.
water	650:26	0:0	8	psz_string
water	650:38	0:0	6	;
water	651:12	0:0	6	}
break	652:12	652:17	4	
label	653:8	653:26	4	case ACTIONID_CROP :
if	654:12	679:12	4	(p_vout)
cond	654:16	654:16	5	p_vout
water	654:16	0:0	6	p_vout
stmts	655:12	679:12	5	
water	655:12	0:0	6	{
decl	656:16	656:56	6	vlc_value_t	val
op	656:31	0:0	6	=
water	656:32	0:0	6	{
water	656:33	0:0	6	0
water	656:34	0:0	6	}
water	656:35	0:0	6	,
decl	656:16	656:56	6	vlc_value_t	val_list
water	656:45	0:0	6	,
decl	656:16	656:56	6	vlc_value_t	text_list
call	657:16	657:46	6	var_Get
arg	657:25	657:31	7	p_vout
water	657:25	0:0	8	p_vout
arg	657:33	657:39	7	"crop"
water	657:33	0:0	8	"crop"
arg	657:41	657:46	7	&val
op	657:41	0:0	8	&
water	657:42	0:0	8	val
water	657:47	0:0	6	;
if	658:16	677:16	6	(var_Change (p_vout ,"crop" ,VLC_VAR_GETLIST ,& val_list ,& text_list ) >= 0)
cond	658:20	659:59	7	var_Change (p_vout ,"crop" ,VLC_VAR_GETLIST ,& val_list ,& text_list ) >= 0
call	658:20	659:54	8	var_Change
arg	658:32	658:38	9	p_vout
water	658:32	0:0	10	p_vout
arg	658:40	658:46	9	"crop"
water	658:40	0:0	10	"crop"
arg	658:48	658:63	9	VLC_VAR_GETLIST
water	658:48	0:0	10	VLC_VAR_GETLIST
arg	659:32	659:41	9	&val_list
op	659:32	0:0	10	&
water	659:33	0:0	10	val_list
arg	659:43	659:54	9	&text_list
op	659:43	0:0	10	&
water	659:44	0:0	10	text_list
op	659:56	0:0	8	>=
water	659:59	0:0	8	0
stmts	660:16	677:16	7	
water	660:16	0:0	8	{
decl	661:20	661:25	8	int	i
for	662:20	670:20	8	(i = 0 ;i < val_list . p_list -> i_count;i ++)
forinit	662:25	662:30	9	i = 0 ;
water	662:25	0:0	10	i
op	662:27	0:0	10	=
water	662:29	0:0	10	0
water	662:30	0:0	10	;
cond	662:32	662:53	9	i < val_list . p_list -> i_count
water	662:32	0:0	10	i
op	662:34	0:0	10	<
water	662:36	0:0	10	val_list
op	662:44	0:0	10	.
water	662:45	0:0	10	p_list
op	662:51	0:0	10	->
water	662:53	0:0	10	i_count
forexpr	662:62	662:63	9	i ++
water	662:62	0:0	10	i
op	662:63	0:0	10	++
stmts	663:20	670:20	9	
water	663:20	0:0	10	{
if	664:24	669:24	10	(!strcmp (val_list . p_list -> p_values [ i ] . psz_string ,val . psz_string ))
cond	664:28	665:52	11	!strcmp (val_list . p_list -> p_values [ i ] . psz_string ,val . psz_string )
op	664:28	0:0	12	!
call	664:29	665:52	12	strcmp
arg	664:37	664:76	13	val_list.p_list->p_values[i].psz_string
water	664:37	0:0	14	val_list
op	664:45	0:0	14	.
water	664:46	0:0	14	p_list
op	664:52	0:0	14	->
water	664:54	0:0	14	p_values
op	664:62	0:0	14	[
water	664:63	0:0	14	i
op	664:64	0:0	14	]
op	664:65	0:0	14	.
water	664:66	0:0	14	psz_string
arg	665:37	665:52	13	val.psz_string
water	665:37	0:0	14	val
op	665:40	0:0	14	.
water	665:41	0:0	14	psz_string
stmts	666:24	669:24	11	
water	666:24	0:0	12	{
water	667:28	0:0	12	i
op	667:29	0:0	12	++
water	667:31	0:0	12	;
break	668:28	668:33	12	
water	669:24	0:0	12	}
water	670:20	0:0	10	}
if	671:20	671:61	8	(i == val_list . p_list -> i_count)
cond	671:24	671:46	9	i == val_list . p_list -> i_count
water	671:24	0:0	10	i
op	671:26	0:0	10	==
water	671:29	0:0	10	val_list
op	671:37	0:0	10	.
water	671:38	0:0	10	p_list
op	671:44	0:0	10	->
water	671:46	0:0	10	i_count
stmts	671:56	671:61	9	
water	671:56	0:0	10	i
op	671:58	0:0	10	=
water	671:60	0:0	10	0
water	671:61	0:0	10	;
call	672:20	673:75	8	var_SetString
arg	672:35	672:41	9	p_vout
water	672:35	0:0	10	p_vout
arg	672:43	672:49	9	"crop"
water	672:43	0:0	10	"crop"
arg	673:35	673:75	9	val_list.p_list->p_values[i].psz_string
water	673:35	0:0	10	val_list
op	673:43	0:0	10	.
water	673:44	0:0	10	p_list
op	673:50	0:0	10	->
water	673:52	0:0	10	p_values
op	673:60	0:0	10	[
water	673:61	0:0	10	i
op	673:62	0:0	10	]
op	673:63	0:0	10	.
water	673:64	0:0	10	psz_string
water	673:76	0:0	8	;
call	674:20	675:77	8	DisplayMessage
arg	674:36	674:42	9	p_vout
water	674:36	0:0	10	p_vout
arg	674:44	674:57	9	_("Crop: %s")
call	674:44	674:56	10	_
arg	674:46	674:56	11	"Crop: %s"
water	674:46	0:0	12	"Crop: %s"
arg	675:36	675:77	9	text_list.p_list->p_values[i].psz_string
water	675:36	0:0	10	text_list
op	675:45	0:0	10	.
water	675:46	0:0	10	p_list
op	675:52	0:0	10	->
water	675:54	0:0	10	p_values
op	675:62	0:0	10	[
water	675:63	0:0	10	i
op	675:64	0:0	10	]
op	675:65	0:0	10	.
water	675:66	0:0	10	psz_string
water	675:78	0:0	8	;
call	676:20	676:56	8	var_FreeList
arg	676:34	676:43	9	&val_list
op	676:34	0:0	10	&
water	676:35	0:0	10	val_list
arg	676:45	676:56	9	&text_list
op	676:45	0:0	10	&
water	676:46	0:0	10	text_list
water	676:57	0:0	8	;
water	677:16	0:0	8	}
call	678:16	678:37	6	free
arg	678:22	678:37	7	val.psz_string
water	678:22	0:0	8	val
op	678:25	0:0	8	.
water	678:26	0:0	8	psz_string
water	678:38	0:0	6	;
water	679:12	0:0	6	}
break	680:12	680:17	4	
label	681:8	681:30	4	case ACTIONID_CROP_TOP :
if	682:12	683:52	4	(p_vout)
cond	682:16	682:16	5	p_vout
water	682:16	0:0	6	p_vout
stmts	683:16	683:52	5	
call	683:16	683:51	6	var_IncInteger
arg	683:32	683:38	7	p_vout
water	683:32	0:0	8	p_vout
arg	683:40	683:51	7	"crop-top"
water	683:40	0:0	8	"crop-top"
water	683:52	0:0	6	;
break	684:12	684:17	4	
label	685:8	685:32	4	case ACTIONID_UNCROP_TOP :
if	686:12	687:52	4	(p_vout)
cond	686:16	686:16	5	p_vout
water	686:16	0:0	6	p_vout
stmts	687:16	687:52	5	
call	687:16	687:51	6	var_DecInteger
arg	687:32	687:38	7	p_vout
water	687:32	0:0	8	p_vout
arg	687:40	687:51	7	"crop-top"
water	687:40	0:0	8	"crop-top"
water	687:52	0:0	6	;
break	688:12	688:17	4	
label	689:8	689:33	4	case ACTIONID_CROP_BOTTOM :
if	690:12	691:55	4	(p_vout)
cond	690:16	690:16	5	p_vout
water	690:16	0:0	6	p_vout
stmts	691:16	691:55	5	
call	691:16	691:54	6	var_IncInteger
arg	691:32	691:38	7	p_vout
water	691:32	0:0	8	p_vout
arg	691:40	691:54	7	"crop-bottom"
water	691:40	0:0	8	"crop-bottom"
water	691:55	0:0	6	;
break	692:12	692:17	4	
label	693:8	693:35	4	case ACTIONID_UNCROP_BOTTOM :
if	694:12	695:55	4	(p_vout)
cond	694:16	694:16	5	p_vout
water	694:16	0:0	6	p_vout
stmts	695:16	695:55	5	
call	695:16	695:54	6	var_DecInteger
arg	695:32	695:38	7	p_vout
water	695:32	0:0	8	p_vout
arg	695:40	695:54	7	"crop-bottom"
water	695:40	0:0	8	"crop-bottom"
water	695:55	0:0	6	;
break	696:12	696:17	4	
label	697:8	697:31	4	case ACTIONID_CROP_LEFT :
if	698:12	699:53	4	(p_vout)
cond	698:16	698:16	5	p_vout
water	698:16	0:0	6	p_vout
stmts	699:16	699:53	5	
call	699:16	699:52	6	var_IncInteger
arg	699:32	699:38	7	p_vout
water	699:32	0:0	8	p_vout
arg	699:40	699:52	7	"crop-left"
water	699:40	0:0	8	"crop-left"
water	699:53	0:0	6	;
break	700:12	700:17	4	
label	701:8	701:33	4	case ACTIONID_UNCROP_LEFT :
if	702:12	703:53	4	(p_vout)
cond	702:16	702:16	5	p_vout
water	702:16	0:0	6	p_vout
stmts	703:16	703:53	5	
call	703:16	703:52	6	var_DecInteger
arg	703:32	703:38	7	p_vout
water	703:32	0:0	8	p_vout
arg	703:40	703:52	7	"crop-left"
water	703:40	0:0	8	"crop-left"
water	703:53	0:0	6	;
break	704:12	704:17	4	
label	705:8	705:32	4	case ACTIONID_CROP_RIGHT :
if	706:12	707:54	4	(p_vout)
cond	706:16	706:16	5	p_vout
water	706:16	0:0	6	p_vout
stmts	707:16	707:54	5	
call	707:16	707:53	6	var_IncInteger
arg	707:32	707:38	7	p_vout
water	707:32	0:0	8	p_vout
arg	707:40	707:53	7	"crop-right"
water	707:40	0:0	8	"crop-right"
water	707:54	0:0	6	;
break	708:12	708:17	4	
label	709:8	709:34	4	case ACTIONID_UNCROP_RIGHT :
if	710:12	711:54	4	(p_vout)
cond	710:16	710:16	5	p_vout
water	710:16	0:0	6	p_vout
stmts	711:16	711:54	5	
call	711:16	711:53	6	var_DecInteger
arg	711:32	711:38	7	p_vout
water	711:32	0:0	8	p_vout
arg	711:40	711:53	7	"crop-right"
water	711:40	0:0	8	"crop-right"
water	711:54	0:0	6	;
break	712:12	712:17	4	
label	713:9	713:39	4	case ACTIONID_TOGGLE_AUTOSCALE :
if	714:12	731:12	4	(p_vout)
cond	714:16	714:16	5	p_vout
water	714:16	0:0	6	p_vout
stmts	715:12	731:12	5	
water	715:12	0:0	6	{
decl	716:16	716:69	6	float	f_scalefactor
op	716:36	0:0	6	=
call	716:38	716:68	7	var_GetFloat
arg	716:52	716:58	8	p_vout
water	716:52	0:0	9	p_vout
arg	716:60	716:68	8	"scale"
water	716:60	0:0	9	"scale"
if	717:16	721:16	6	(f_scalefactor != 1 . f)
cond	717:21	717:40	7	f_scalefactor != 1 . f
water	717:21	0:0	8	f_scalefactor
op	717:35	0:0	8	!=
water	717:38	0:0	8	1
op	717:39	0:0	8	.
water	717:40	0:0	8	f
stmts	718:16	721:16	7	
water	718:16	0:0	8	{
call	719:20	719:55	8	var_SetFloat
arg	719:34	719:40	9	p_vout
water	719:34	0:0	10	p_vout
arg	719:42	719:49	9	"scale"
water	719:42	0:0	10	"scale"
arg	719:51	719:55	9	1.f
water	719:51	0:0	10	1
op	719:52	0:0	10	.
water	719:53	0:0	10	f
water	719:56	0:0	8	;
call	720:20	720:63	8	DisplayMessage
arg	720:36	720:42	9	p_vout
water	720:36	0:0	10	p_vout
arg	720:44	720:63	9	_("Zooming reset")
call	720:44	720:61	10	_
arg	720:46	720:61	11	"Zooming reset"
water	720:46	0:0	12	"Zooming reset"
water	720:64	0:0	8	;
water	721:16	0:0	8	}
else	722:16	730:16	6
stmts	723:16	730:16	7	
water	723:16	0:0	8	{
decl	724:20	724:74	8	bool	b_autoscale
op	724:37	0:0	8	=
op	724:39	0:0	8	!
call	724:40	724:73	9	var_GetBool
arg	724:53	724:59	10	p_vout
water	724:53	0:0	11	p_vout
arg	724:61	724:73	10	"autoscale"
water	724:61	0:0	11	"autoscale"
call	725:20	725:66	8	var_SetBool
arg	725:33	725:39	9	p_vout
water	725:33	0:0	10	p_vout
arg	725:41	725:52	9	"autoscale"
water	725:41	0:0	10	"autoscale"
arg	725:54	725:66	9	b_autoscale
water	725:54	0:0	10	b_autoscale
water	725:67	0:0	8	;
if	726:20	727:71	8	(b_autoscale)
cond	726:24	726:24	9	b_autoscale
water	726:24	0:0	10	b_autoscale
stmts	727:24	727:71	9	
call	727:24	727:70	10	DisplayMessage
arg	727:40	727:46	11	p_vout
water	727:40	0:0	12	p_vout
arg	727:48	727:70	11	_("Scaled to screen")
call	727:48	727:68	12	_
arg	727:50	727:68	13	"Scaled to screen"
water	727:50	0:0	14	"Scaled to screen"
water	727:71	0:0	10	;
else	728:20	729:68	8
stmts	729:24	729:68	9	
call	729:24	729:67	10	DisplayMessage
arg	729:40	729:46	11	p_vout
water	729:40	0:0	12	p_vout
arg	729:48	729:67	11	_("Original Size")
call	729:48	729:65	12	_
arg	729:50	729:65	13	"Original Size"
water	729:50	0:0	14	"Original Size"
water	729:68	0:0	10	;
water	730:16	0:0	8	}
water	731:12	0:0	6	}
break	732:12	732:17	4	
label	733:8	733:30	4	case ACTIONID_SCALE_UP :
if	734:12	740:12	4	(p_vout)
cond	734:16	734:16	5	p_vout
water	734:16	0:0	6	p_vout
stmts	735:12	740:12	5	
water	735:12	0:0	6	{
decl	736:15	736:68	6	float	f_scalefactor
op	736:35	0:0	6	=
call	736:37	736:67	7	var_GetFloat
arg	736:51	736:57	8	p_vout
water	736:51	0:0	9	p_vout
arg	736:59	736:67	8	"scale"
water	736:59	0:0	9	"scale"
if	737:15	738:39	6	(f_scalefactor < 10 . f)
cond	737:19	737:38	7	f_scalefactor < 10 . f
water	737:19	0:0	8	f_scalefactor
op	737:33	0:0	8	<
water	737:35	0:0	8	10
op	737:37	0:0	8	.
water	737:38	0:0	8	f
stmts	738:19	738:39	7	
water	738:19	0:0	8	f_scalefactor
op	738:33	0:0	8	+=
op	738:36	0:0	8	.
water	738:37	0:0	8	1
water	738:38	0:0	8	f
water	738:39	0:0	8	;
call	739:15	739:60	6	var_SetFloat
arg	739:29	739:35	7	p_vout
water	739:29	0:0	8	p_vout
arg	739:37	739:44	7	"scale"
water	739:37	0:0	8	"scale"
arg	739:46	739:60	7	f_scalefactor
water	739:46	0:0	8	f_scalefactor
water	739:61	0:0	6	;
water	740:12	0:0	6	}
break	741:12	741:17	4	
label	742:8	742:32	4	case ACTIONID_SCALE_DOWN :
if	743:12	749:12	4	(p_vout)
cond	743:16	743:16	5	p_vout
water	743:16	0:0	6	p_vout
stmts	744:12	749:12	5	
water	744:12	0:0	6	{
decl	745:15	745:68	6	float	f_scalefactor
op	745:35	0:0	6	=
call	745:37	745:67	7	var_GetFloat
arg	745:51	745:57	8	p_vout
water	745:51	0:0	9	p_vout
arg	745:59	745:67	8	"scale"
water	745:59	0:0	9	"scale"
if	746:15	747:39	6	(f_scalefactor > . 3 f)
cond	746:19	746:37	7	f_scalefactor > . 3 f
water	746:19	0:0	8	f_scalefactor
op	746:33	0:0	8	>
op	746:35	0:0	8	.
water	746:36	0:0	8	3
water	746:37	0:0	8	f
stmts	747:19	747:39	7	
water	747:19	0:0	8	f_scalefactor
op	747:33	0:0	8	-=
op	747:36	0:0	8	.
water	747:37	0:0	8	1
water	747:38	0:0	8	f
water	747:39	0:0	8	;
call	748:15	748:60	6	var_SetFloat
arg	748:29	748:35	7	p_vout
water	748:29	0:0	8	p_vout
arg	748:37	748:44	7	"scale"
water	748:37	0:0	8	"scale"
arg	748:46	748:60	7	f_scalefactor
water	748:46	0:0	8	f_scalefactor
water	748:61	0:0	6	;
water	749:12	0:0	6	}
break	750:12	750:17	4	
label	751:8	751:34	4	case ACTIONID_ZOOM_QUARTER :
label	752:8	752:31	4	case ACTIONID_ZOOM_HALF :
label	753:8	753:35	4	case ACTIONID_ZOOM_ORIGINAL :
label	754:8	754:33	4	case ACTIONID_ZOOM_DOUBLE :
if	755:12	767:12	4	(p_vout)
cond	755:16	755:16	5	p_vout
water	755:16	0:0	6	p_vout
stmts	756:12	767:12	5	
water	756:12	0:0	6	{
decl	757:16	757:23	6	float	f
switch	758:16	765:16	6	(i_action)
cond	758:24	758:24	7	i_action
water	758:24	0:0	8	i_action
stmts	759:16	765:16	7	
water	759:16	0:0	8	{
label	760:20	760:46	8	case ACTIONID_ZOOM_QUARTER :
water	760:49	0:0	8	f
op	760:51	0:0	8	=
water	760:53	0:0	8	0
op	760:54	0:0	8	.
water	760:55	0:0	8	25
water	760:57	0:0	8	;
break	760:59	760:64	8	
label	761:20	761:43	8	case ACTIONID_ZOOM_HALF :
water	761:49	0:0	8	f
op	761:51	0:0	8	=
water	761:53	0:0	8	0
op	761:54	0:0	8	.
water	761:55	0:0	8	5
water	761:56	0:0	8	;
break	761:59	761:64	8	
label	762:20	762:47	8	case ACTIONID_ZOOM_ORIGINAL :
water	762:49	0:0	8	f
op	762:51	0:0	8	=
water	762:53	0:0	8	1
op	762:54	0:0	8	.
water	762:55	0:0	8	;
break	762:59	762:64	8	
label	764:20	764:27	8	default :
water	764:49	0:0	8	f
op	764:51	0:0	8	=
water	764:53	0:0	8	2
op	764:54	0:0	8	.
water	764:55	0:0	8	;
break	764:59	764:64	8	
water	765:16	0:0	8	}
call	766:16	766:48	6	var_SetFloat
arg	766:30	766:36	7	p_vout
water	766:30	0:0	8	p_vout
arg	766:38	766:44	7	"zoom"
water	766:38	0:0	8	"zoom"
arg	766:46	766:48	7	f
water	766:46	0:0	8	f
water	766:49	0:0	6	;
water	767:12	0:0	6	}
break	768:12	768:17	4	
label	769:8	769:26	4	case ACTIONID_ZOOM :
label	770:8	770:28	4	case ACTIONID_UNZOOM :
if	771:12	799:12	4	(p_vout)
cond	771:16	771:16	5	p_vout
water	771:16	0:0	6	p_vout
stmts	772:12	799:12	5	
water	772:12	0:0	6	{
decl	773:16	773:56	6	vlc_value_t	val
op	773:31	0:0	6	=
water	773:32	0:0	6	{
water	773:33	0:0	6	0
water	773:34	0:0	6	}
water	773:35	0:0	6	,
decl	773:16	773:56	6	vlc_value_t	val_list
water	773:45	0:0	6	,
decl	773:16	773:56	6	vlc_value_t	text_list
call	774:16	774:46	6	var_Get
arg	774:25	774:31	7	p_vout
water	774:25	0:0	8	p_vout
arg	774:33	774:39	7	"zoom"
water	774:33	0:0	8	"zoom"
arg	774:41	774:46	7	&val
op	774:41	0:0	8	&
water	774:42	0:0	8	val
water	774:47	0:0	6	;
if	775:16	798:16	6	(var_Change (p_vout ,"zoom" ,VLC_VAR_GETLIST ,& val_list ,& text_list ) >= 0)
cond	775:20	776:59	7	var_Change (p_vout ,"zoom" ,VLC_VAR_GETLIST ,& val_list ,& text_list ) >= 0
call	775:20	776:54	8	var_Change
arg	775:32	775:38	9	p_vout
water	775:32	0:0	10	p_vout
arg	775:40	775:46	9	"zoom"
water	775:40	0:0	10	"zoom"
arg	775:48	775:63	9	VLC_VAR_GETLIST
water	775:48	0:0	10	VLC_VAR_GETLIST
arg	776:32	776:41	9	&val_list
op	776:32	0:0	10	&
water	776:33	0:0	10	val_list
arg	776:43	776:54	9	&text_list
op	776:43	0:0	10	&
water	776:44	0:0	10	text_list
op	776:56	0:0	8	>=
water	776:59	0:0	8	0
stmts	777:16	798:16	7	
water	777:16	0:0	8	{
decl	778:20	778:25	8	int	i
for	779:20	790:20	8	(i = 0 ;i < val_list . p_list -> i_count;i ++)
forinit	779:25	779:30	9	i = 0 ;
water	779:25	0:0	10	i
op	779:27	0:0	10	=
water	779:29	0:0	10	0
water	779:30	0:0	10	;
cond	779:32	779:53	9	i < val_list . p_list -> i_count
water	779:32	0:0	10	i
op	779:34	0:0	10	<
water	779:36	0:0	10	val_list
op	779:44	0:0	10	.
water	779:45	0:0	10	p_list
op	779:51	0:0	10	->
water	779:53	0:0	10	i_count
forexpr	779:62	779:63	9	i ++
water	779:62	0:0	10	i
op	779:63	0:0	10	++
stmts	780:20	790:20	9	
water	780:20	0:0	10	{
if	781:24	789:24	10	(val_list . p_list -> p_values [ i ] . f_float == val . f_float)
cond	781:28	782:34	11	val_list . p_list -> p_values [ i ] . f_float == val . f_float
water	781:28	0:0	12	val_list
op	781:36	0:0	12	.
water	781:37	0:0	12	p_list
op	781:43	0:0	12	->
water	781:45	0:0	12	p_values
op	781:53	0:0	12	[
water	781:54	0:0	12	i
op	781:55	0:0	12	]
op	781:56	0:0	12	.
water	781:57	0:0	12	f_float
op	782:27	0:0	12	==
water	782:30	0:0	12	val
op	782:33	0:0	12	.
water	782:34	0:0	12	f_float
stmts	783:24	789:24	11	
water	783:24	0:0	12	{
if	784:28	785:35	12	(i_action == ACTIONID_ZOOM)
cond	784:32	784:44	13	i_action == ACTIONID_ZOOM
water	784:32	0:0	14	i_action
op	784:41	0:0	14	==
water	784:44	0:0	14	ACTIONID_ZOOM
stmts	785:32	785:35	13	
water	785:32	0:0	14	i
op	785:33	0:0	14	++
water	785:35	0:0	14	;
else	786:28	787:35	12
stmts	787:32	787:35	13	
water	787:32	0:0	14	i
op	787:33	0:0	14	--
water	787:35	0:0	14	;
break	788:28	788:33	12	
water	789:24	0:0	12	}
water	790:20	0:0	10	}
if	791:20	791:61	8	(i == val_list . p_list -> i_count)
cond	791:24	791:46	9	i == val_list . p_list -> i_count
water	791:24	0:0	10	i
op	791:26	0:0	10	==
water	791:29	0:0	10	val_list
op	791:37	0:0	10	.
water	791:38	0:0	10	p_list
op	791:44	0:0	10	->
water	791:46	0:0	10	i_count
stmts	791:56	791:61	9	
water	791:56	0:0	10	i
op	791:58	0:0	10	=
water	791:60	0:0	10	0
water	791:61	0:0	10	;
if	792:20	792:64	8	(i == - 1)
cond	792:24	792:30	9	i == - 1
water	792:24	0:0	10	i
op	792:26	0:0	10	==
op	792:29	0:0	10	-
water	792:30	0:0	10	1
stmts	792:34	792:64	9	
water	792:34	0:0	10	i
op	792:36	0:0	10	=
water	792:38	0:0	10	val_list
op	792:46	0:0	10	.
water	792:47	0:0	10	p_list
op	792:53	0:0	10	->
water	792:55	0:0	10	i_count
op	792:62	0:0	10	-
water	792:63	0:0	10	1
water	792:64	0:0	10	;
call	793:20	794:71	8	var_SetFloat
arg	793:34	793:40	9	p_vout
water	793:34	0:0	10	p_vout
arg	793:42	793:48	9	"zoom"
water	793:42	0:0	10	"zoom"
arg	794:34	794:71	9	val_list.p_list->p_values[i].f_float
water	794:34	0:0	10	val_list
op	794:42	0:0	10	.
water	794:43	0:0	10	p_list
op	794:49	0:0	10	->
water	794:51	0:0	10	p_values
op	794:59	0:0	10	[
water	794:60	0:0	10	i
op	794:61	0:0	10	]
op	794:62	0:0	10	.
water	794:63	0:0	10	f_float
water	794:72	0:0	8	;
call	795:20	796:77	8	DisplayMessage
arg	795:36	795:42	9	p_vout
water	795:36	0:0	10	p_vout
arg	795:44	795:62	9	_("Zoom mode: %s")
call	795:44	795:61	10	_
arg	795:46	795:61	11	"Zoom mode: %s"
water	795:46	0:0	12	"Zoom mode: %s"
arg	796:36	796:77	9	text_list.p_list->p_values[i].psz_string
water	796:36	0:0	10	text_list
op	796:45	0:0	10	.
water	796:46	0:0	10	p_list
op	796:52	0:0	10	->
water	796:54	0:0	10	p_values
op	796:62	0:0	10	[
water	796:63	0:0	10	i
op	796:64	0:0	10	]
op	796:65	0:0	10	.
water	796:66	0:0	10	psz_string
water	796:78	0:0	8	;
call	797:20	797:56	8	var_FreeList
arg	797:34	797:43	9	&val_list
op	797:34	0:0	10	&
water	797:35	0:0	10	val_list
arg	797:45	797:56	9	&text_list
op	797:45	0:0	10	&
water	797:46	0:0	10	text_list
water	797:57	0:0	8	;
water	798:16	0:0	8	}
water	799:12	0:0	6	}
break	800:12	800:17	4	
label	801:8	801:33	4	case ACTIONID_DEINTERLACE :
if	802:12	832:12	4	(p_vout)
cond	802:16	802:16	5	p_vout
water	802:16	0:0	6	p_vout
stmts	803:12	832:12	5	
water	803:12	0:0	6	{
decl	804:16	804:75	6	int	i_deinterlace
op	804:34	0:0	6	=
call	804:36	804:74	7	var_GetInteger
arg	804:52	804:58	8	p_vout
water	804:52	0:0	9	p_vout
arg	804:60	804:74	8	"deinterlace"
water	804:60	0:0	9	"deinterlace"
if	805:16	809:16	6	(i_deinterlace != 0)
cond	805:20	805:37	7	i_deinterlace != 0
water	805:20	0:0	8	i_deinterlace
op	805:34	0:0	8	!=
water	805:37	0:0	8	0
stmts	806:16	809:16	7	
water	806:16	0:0	8	{
call	807:20	807:61	8	var_SetInteger
arg	807:36	807:42	9	p_vout
water	807:36	0:0	10	p_vout
arg	807:44	807:57	9	"deinterlace"
water	807:44	0:0	10	"deinterlace"
arg	807:59	807:61	9	0
water	807:59	0:0	10	0
water	807:62	0:0	8	;
call	808:20	808:65	8	DisplayMessage
arg	808:36	808:42	9	p_vout
water	808:36	0:0	10	p_vout
arg	808:44	808:65	9	_("Deinterlace off")
call	808:44	808:63	10	_
arg	808:46	808:63	11	"Deinterlace off"
water	808:46	0:0	12	"Deinterlace off"
water	808:66	0:0	8	;
water	809:16	0:0	8	}
else	810:16	831:16	6
stmts	811:16	831:16	7	
water	811:16	0:0	8	{
call	812:20	812:61	8	var_SetInteger
arg	812:36	812:42	9	p_vout
water	812:36	0:0	10	p_vout
arg	812:44	812:57	9	"deinterlace"
water	812:44	0:0	10	"deinterlace"
arg	812:59	812:61	9	1
water	812:59	0:0	10	1
water	812:62	0:0	8	;
decl	813:20	813:80	8	char	*psz_mode
op	813:35	0:0	8	=
call	813:37	813:79	9	var_GetString
arg	813:52	813:58	10	p_vout
water	813:52	0:0	11	p_vout
arg	813:60	813:79	10	"deinterlace-mode"
water	813:60	0:0	11	"deinterlace-mode"
decl	814:20	814:44	8	vlc_value_t	vlist
water	814:37	0:0	8	,
decl	814:20	814:44	8	vlc_value_t	tlist
if	815:20	829:20	8	(psz_mode && !var_Change (p_vout ,"deinterlace-mode" ,VLC_VAR_GETCHOICES ,& vlist ,& tlist ))
cond	815:24	815:112	9	psz_mode && !var_Change (p_vout ,"deinterlace-mode" ,VLC_VAR_GETCHOICES ,& vlist ,& tlist )
water	815:24	0:0	10	psz_mode
op	815:33	0:0	10	&&
op	815:36	0:0	10	!
call	815:37	815:112	10	var_Change
arg	815:49	815:55	11	p_vout
water	815:49	0:0	12	p_vout
arg	815:57	815:75	11	"deinterlace-mode"
water	815:57	0:0	12	"deinterlace-mode"
arg	815:77	815:95	11	VLC_VAR_GETCHOICES
water	815:77	0:0	12	VLC_VAR_GETCHOICES
arg	815:97	815:103	11	&vlist
op	815:97	0:0	12	&
water	815:98	0:0	12	vlist
arg	815:105	815:112	11	&tlist
op	815:105	0:0	12	&
water	815:106	0:0	12	tlist
stmts	816:20	829:20	9	
water	816:20	0:0	10	{
decl	817:24	817:51	10	const char	*psz_text
op	817:45	0:0	10	=
water	817:47	0:0	10	NULL
for	818:24	825:24	10	( int i = 0 ;i < vlist . p_list -> i_count;i ++)
forinit	0:0	818:38	11	 int i = 0 ;
decl	818:29	818:38	12	int	i
op	818:35	0:0	12	=
water	818:37	0:0	12	0
cond	818:40	818:58	11	i < vlist . p_list -> i_count
water	818:40	0:0	12	i
op	818:42	0:0	12	<
water	818:44	0:0	12	vlist
op	818:49	0:0	12	.
water	818:50	0:0	12	p_list
op	818:56	0:0	12	->
water	818:58	0:0	12	i_count
forexpr	818:67	818:68	11	i ++
water	818:67	0:0	12	i
op	818:68	0:0	12	++
stmts	819:24	825:24	11	
water	819:24	0:0	12	{
if	820:28	824:28	12	(!strcmp (vlist . p_list -> p_values [ i ] . psz_string ,psz_mode ))
cond	820:32	820:88	13	!strcmp (vlist . p_list -> p_values [ i ] . psz_string ,psz_mode )
op	820:32	0:0	14	!
call	820:33	820:88	14	strcmp
arg	820:41	820:77	15	vlist.p_list->p_values[i].psz_string
water	820:41	0:0	16	vlist
op	820:46	0:0	16	.
water	820:47	0:0	16	p_list
op	820:53	0:0	16	->
water	820:55	0:0	16	p_values
op	820:63	0:0	16	[
water	820:64	0:0	16	i
op	820:65	0:0	16	]
op	820:66	0:0	16	.
water	820:67	0:0	16	psz_string
arg	820:79	820:88	15	psz_mode
water	820:79	0:0	16	psz_mode
stmts	821:28	824:28	13	
water	821:28	0:0	14	{
water	822:32	0:0	14	psz_text
op	822:41	0:0	14	=
water	822:43	0:0	14	tlist
op	822:48	0:0	14	.
water	822:49	0:0	14	p_list
op	822:55	0:0	14	->
water	822:57	0:0	14	p_values
op	822:65	0:0	14	[
water	822:66	0:0	14	i
op	822:67	0:0	14	]
op	822:68	0:0	14	.
water	822:69	0:0	14	psz_string
water	822:79	0:0	14	;
break	823:32	823:37	14	
water	824:28	0:0	14	}
water	825:24	0:0	12	}
call	826:24	827:71	10	DisplayMessage
arg	826:40	826:46	11	p_vout
water	826:40	0:0	12	p_vout
arg	826:48	826:57	11	"%s (%s)"
water	826:48	0:0	12	"%s (%s)"
arg	826:59	826:78	11	_("Deinterlace on")
call	826:59	826:77	12	_
arg	826:61	826:77	13	"Deinterlace on"
water	826:61	0:0	14	"Deinterlace on"
arg	827:40	827:71	11	psz_text?psz_text:psz_mode
water	827:40	0:0	12	psz_text
water	827:49	0:0	12	?
water	827:51	0:0	12	psz_text
water	827:60	0:0	12	:
water	827:62	0:0	12	psz_mode
water	827:72	0:0	10	;
call	828:24	828:53	10	var_FreeList
arg	828:38	828:44	11	&vlist
op	828:38	0:0	12	&
water	828:39	0:0	12	vlist
arg	828:46	828:53	11	&tlist
op	828:46	0:0	12	&
water	828:47	0:0	12	tlist
water	828:54	0:0	10	;
water	829:20	0:0	10	}
call	830:20	830:35	8	free
arg	830:26	830:35	9	psz_mode
water	830:26	0:0	10	psz_mode
water	830:36	0:0	8	;
water	831:16	0:0	8	}
water	832:12	0:0	6	}
break	833:12	833:17	4	
label	834:8	834:38	4	case ACTIONID_DEINTERLACE_MODE :
if	835:12	868:12	4	(p_vout)
cond	835:16	835:16	5	p_vout
water	835:16	0:0	6	p_vout
stmts	836:12	868:12	5	
water	836:12	0:0	6	{
decl	837:16	837:76	6	char	*psz_mode
op	837:31	0:0	6	=
call	837:33	837:75	7	var_GetString
arg	837:48	837:54	8	p_vout
water	837:48	0:0	9	p_vout
arg	837:56	837:75	8	"deinterlace-mode"
water	837:56	0:0	9	"deinterlace-mode"
decl	838:16	838:40	6	vlc_value_t	vlist
water	838:33	0:0	6	,
decl	838:16	838:40	6	vlc_value_t	tlist
if	839:16	866:16	6	(psz_mode && !var_Change (p_vout ,"deinterlace-mode" ,VLC_VAR_GETCHOICES ,& vlist ,& tlist ))
cond	839:20	839:108	7	psz_mode && !var_Change (p_vout ,"deinterlace-mode" ,VLC_VAR_GETCHOICES ,& vlist ,& tlist )
water	839:20	0:0	8	psz_mode
op	839:29	0:0	8	&&
op	839:32	0:0	8	!
call	839:33	839:108	8	var_Change
arg	839:45	839:51	9	p_vout
water	839:45	0:0	10	p_vout
arg	839:53	839:71	9	"deinterlace-mode"
water	839:53	0:0	10	"deinterlace-mode"
arg	839:73	839:91	9	VLC_VAR_GETCHOICES
water	839:73	0:0	10	VLC_VAR_GETCHOICES
arg	839:93	839:99	9	&vlist
op	839:93	0:0	10	&
water	839:94	0:0	10	vlist
arg	839:101	839:108	9	&tlist
op	839:101	0:0	10	&
water	839:102	0:0	10	tlist
stmts	840:16	866:16	7	
water	840:16	0:0	8	{
decl	841:20	841:47	8	const char	*psz_text
op	841:41	0:0	8	=
water	841:43	0:0	8	NULL
decl	842:20	842:25	8	int	i
for	843:20	850:20	8	(i = 0 ;i < vlist . p_list -> i_count;i ++)
forinit	843:25	843:30	9	i = 0 ;
water	843:25	0:0	10	i
op	843:27	0:0	10	=
water	843:29	0:0	10	0
water	843:30	0:0	10	;
cond	843:32	843:50	9	i < vlist . p_list -> i_count
water	843:32	0:0	10	i
op	843:34	0:0	10	<
water	843:36	0:0	10	vlist
op	843:41	0:0	10	.
water	843:42	0:0	10	p_list
op	843:48	0:0	10	->
water	843:50	0:0	10	i_count
forexpr	843:59	843:60	9	i ++
water	843:59	0:0	10	i
op	843:60	0:0	10	++
stmts	844:20	850:20	9	
water	844:20	0:0	10	{
if	845:24	849:24	10	(!strcmp (vlist . p_list -> p_values [ i ] . psz_string ,psz_mode ))
cond	845:28	845:84	11	!strcmp (vlist . p_list -> p_values [ i ] . psz_string ,psz_mode )
op	845:28	0:0	12	!
call	845:29	845:84	12	strcmp
arg	845:37	845:73	13	vlist.p_list->p_values[i].psz_string
water	845:37	0:0	14	vlist
op	845:42	0:0	14	.
water	845:43	0:0	14	p_list
op	845:49	0:0	14	->
water	845:51	0:0	14	p_values
op	845:59	0:0	14	[
water	845:60	0:0	14	i
op	845:61	0:0	14	]
op	845:62	0:0	14	.
water	845:63	0:0	14	psz_string
arg	845:75	845:84	13	psz_mode
water	845:75	0:0	14	psz_mode
stmts	846:24	849:24	11	
water	846:24	0:0	12	{
water	847:28	0:0	12	i
op	847:29	0:0	12	++
water	847:31	0:0	12	;
break	848:28	848:33	12	
water	849:24	0:0	12	}
water	850:20	0:0	10	}
if	851:20	851:58	8	(i == vlist . p_list -> i_count)
cond	851:24	851:43	9	i == vlist . p_list -> i_count
water	851:24	0:0	10	i
op	851:26	0:0	10	==
water	851:29	0:0	10	vlist
op	851:34	0:0	10	.
water	851:35	0:0	10	p_list
op	851:41	0:0	10	->
water	851:43	0:0	10	i_count
stmts	851:53	851:58	9	
water	851:53	0:0	10	i
op	851:55	0:0	10	=
water	851:57	0:0	10	0
water	851:58	0:0	10	;
water	852:20	0:0	8	psz_text
op	852:29	0:0	8	=
water	852:31	0:0	8	tlist
op	852:36	0:0	8	.
water	852:37	0:0	8	p_list
op	852:43	0:0	8	->
water	852:45	0:0	8	p_values
op	852:53	0:0	8	[
water	852:54	0:0	8	i
op	852:55	0:0	8	]
op	852:56	0:0	8	.
water	852:57	0:0	8	psz_string
water	852:67	0:0	8	;
call	853:20	853:100	8	var_SetString
arg	853:35	853:41	9	p_vout
water	853:35	0:0	10	p_vout
arg	853:43	853:61	9	"deinterlace-mode"
water	853:43	0:0	10	"deinterlace-mode"
arg	853:63	853:100	9	vlist.p_list->p_values[i].psz_string
water	853:63	0:0	10	vlist
op	853:68	0:0	10	.
water	853:69	0:0	10	p_list
op	853:75	0:0	10	->
water	853:77	0:0	10	p_values
op	853:85	0:0	10	[
water	853:86	0:0	10	i
op	853:87	0:0	10	]
op	853:88	0:0	10	.
water	853:89	0:0	10	psz_string
water	853:101	0:0	8	;
decl	854:20	854:79	8	int	i_deinterlace
op	854:38	0:0	8	=
call	854:40	854:78	9	var_GetInteger
arg	854:56	854:62	10	p_vout
water	854:56	0:0	11	p_vout
arg	854:64	854:78	10	"deinterlace"
water	854:64	0:0	11	"deinterlace"
if	855:20	859:20	8	(i_deinterlace != 0)
cond	855:24	855:41	9	i_deinterlace != 0
water	855:24	0:0	10	i_deinterlace
op	855:38	0:0	10	!=
water	855:41	0:0	10	0
stmts	856:20	859:20	9	
water	856:20	0:0	10	{
call	857:22	858:69	10	DisplayMessage
arg	857:38	857:44	11	p_vout
water	857:38	0:0	12	p_vout
arg	857:46	857:55	11	"%s (%s)"
water	857:46	0:0	12	"%s (%s)"
arg	857:57	857:76	11	_("Deinterlace on")
call	857:57	857:75	12	_
arg	857:59	857:75	13	"Deinterlace on"
water	857:59	0:0	14	"Deinterlace on"
arg	858:38	858:69	11	psz_text?psz_text:psz_mode
water	858:38	0:0	12	psz_text
water	858:47	0:0	12	?
water	858:49	0:0	12	psz_text
water	858:58	0:0	12	:
water	858:60	0:0	12	psz_mode
water	858:70	0:0	10	;
water	859:20	0:0	10	}
else	860:20	864:20	8
stmts	861:20	864:20	9	
water	861:20	0:0	10	{
call	862:22	863:69	10	DisplayMessage
arg	862:38	862:44	11	p_vout
water	862:38	0:0	12	p_vout
arg	862:46	862:55	11	"%s (%s)"
water	862:46	0:0	12	"%s (%s)"
arg	862:57	862:77	11	_("Deinterlace off")
call	862:57	862:76	12	_
arg	862:59	862:76	13	"Deinterlace off"
water	862:59	0:0	14	"Deinterlace off"
arg	863:38	863:69	11	psz_text?psz_text:psz_mode
water	863:38	0:0	12	psz_text
water	863:47	0:0	12	?
water	863:49	0:0	12	psz_text
water	863:58	0:0	12	:
water	863:60	0:0	12	psz_mode
water	863:70	0:0	10	;
water	864:20	0:0	10	}
call	865:20	865:49	8	var_FreeList
arg	865:34	865:40	9	&vlist
op	865:34	0:0	10	&
water	865:35	0:0	10	vlist
arg	865:42	865:49	9	&tlist
op	865:42	0:0	10	&
water	865:43	0:0	10	tlist
water	865:50	0:0	8	;
water	866:16	0:0	8	}
call	867:16	867:31	6	free
arg	867:22	867:31	7	psz_mode
water	867:22	0:0	8	psz_mode
water	867:32	0:0	6	;
water	868:12	0:0	6	}
break	869:12	869:17	4	
label	870:8	870:33	4	case ACTIONID_SUBPOS_DOWN :
label	871:8	871:31	4	case ACTIONID_SUBPOS_UP :
water	872:8	0:0	4	{
if	873:12	896:12	4	(p_input)
cond	873:16	873:16	5	p_input
water	873:16	0:0	6	p_input
stmts	874:12	896:12	5	
water	874:12	0:0	6	{
decl	875:16	875:44	6	vlc_value_t	val
water	875:31	0:0	6	,
decl	875:16	875:44	6	vlc_value_t	list
water	875:37	0:0	6	,
decl	875:16	875:44	6	vlc_value_t	list2
decl	876:16	876:27	6	int	i_count
call	877:16	877:49	6	var_Get
arg	877:25	877:32	7	p_input
water	877:25	0:0	8	p_input
arg	877:34	877:42	7	"spu-es"
water	877:34	0:0	8	"spu-es"
arg	877:44	877:49	7	&val
op	877:44	0:0	8	&
water	877:45	0:0	8	val
water	877:50	0:0	6	;
call	878:16	879:42	6	var_Change
arg	878:28	878:35	7	p_input
water	878:28	0:0	8	p_input
arg	878:37	878:45	7	"spu-es"
water	878:37	0:0	8	"spu-es"
arg	878:47	878:65	7	VLC_VAR_GETCHOICES
water	878:47	0:0	8	VLC_VAR_GETCHOICES
arg	879:28	879:33	7	&list
op	879:28	0:0	8	&
water	879:29	0:0	8	list
arg	879:35	879:42	7	&list2
op	879:35	0:0	8	&
water	879:36	0:0	8	list2
water	879:43	0:0	6	;
water	880:16	0:0	6	i_count
op	880:24	0:0	6	=
water	880:26	0:0	6	list
op	880:30	0:0	6	.
water	880:31	0:0	6	p_list
op	880:37	0:0	6	->
water	880:39	0:0	6	i_count
water	880:46	0:0	6	;
if	881:16	887:16	6	(i_count < 1 || val . i_int < 0)
cond	881:20	881:47	7	i_count < 1 || val . i_int < 0
water	881:20	0:0	8	i_count
op	881:28	0:0	8	<
water	881:30	0:0	8	1
op	881:32	0:0	8	||
water	881:35	0:0	8	val
op	881:38	0:0	8	.
water	881:39	0:0	8	i_int
op	881:45	0:0	8	<
water	881:47	0:0	8	0
stmts	882:16	887:16	7	
water	882:16	0:0	8	{
call	883:20	884:79	8	DisplayMessage
arg	883:36	883:42	9	p_vout
water	883:36	0:0	10	p_vout
arg	884:36	884:79	9	_("Subtitle position: no active subtitle")
call	884:36	884:77	10	_
arg	884:38	884:77	11	"Subtitle position: no active subtitle"
water	884:38	0:0	12	"Subtitle position: no active subtitle"
water	884:80	0:0	8	;
call	885:20	885:48	8	var_FreeList
arg	885:34	885:39	9	&list
op	885:34	0:0	10	&
water	885:35	0:0	10	list
arg	885:41	885:48	9	&list2
op	885:41	0:0	10	&
water	885:42	0:0	10	list2
water	885:49	0:0	8	;
break	886:20	886:25	8	
water	887:16	0:0	8	}
decl	888:16	888:25	6	int	i_pos
if	889:16	890:66	6	(i_action == ACTIONID_SUBPOS_DOWN)
cond	889:20	889:32	7	i_action == ACTIONID_SUBPOS_DOWN
water	889:20	0:0	8	i_action
op	889:29	0:0	8	==
water	889:32	0:0	8	ACTIONID_SUBPOS_DOWN
stmts	890:20	890:66	7	
water	890:20	0:0	8	i_pos
op	890:26	0:0	8	=
call	890:28	890:65	8	var_DecInteger
arg	890:44	890:50	9	p_vout
water	890:44	0:0	10	p_vout
arg	890:52	890:65	9	"sub-margin"
water	890:52	0:0	10	"sub-margin"
water	890:66	0:0	8	;
else	891:16	892:66	6
stmts	892:20	892:66	7	
water	892:20	0:0	8	i_pos
op	892:26	0:0	8	=
call	892:28	892:65	8	var_IncInteger
arg	892:44	892:50	9	p_vout
water	892:44	0:0	10	p_vout
arg	892:52	892:65	9	"sub-margin"
water	892:52	0:0	10	"sub-margin"
water	892:66	0:0	8	;
call	893:16	893:46	6	ClearChannels
arg	893:31	893:37	7	p_intf
water	893:31	0:0	8	p_intf
arg	893:39	893:46	7	p_vout
water	893:39	0:0	8	p_vout
water	893:47	0:0	6	;
call	894:16	894:78	6	DisplayMessage
arg	894:32	894:38	7	p_vout
water	894:32	0:0	8	p_vout
arg	894:40	894:70	7	_("Subtitle position %d px")
call	894:40	894:69	8	_
arg	894:43	894:69	9	"Subtitle position %d px"
water	894:43	0:0	10	"Subtitle position %d px"
arg	894:72	894:78	7	i_pos
water	894:72	0:0	8	i_pos
water	894:79	0:0	6	;
call	895:16	895:44	6	var_FreeList
arg	895:30	895:35	7	&list
op	895:30	0:0	8	&
water	895:31	0:0	8	list
arg	895:37	895:44	7	&list2
op	895:37	0:0	8	&
water	895:38	0:0	8	list2
water	895:45	0:0	6	;
water	896:12	0:0	6	}
break	897:12	897:17	4	
water	898:8	0:0	4	}
label	900:8	900:30	4	case ACTIONID_POSITION :
if	901:12	902:58	4	(p_vout &&vout_OSDEpg (p_vout ,input_GetItem (p_input ) ))
cond	901:16	901:72	5	p_vout &&vout_OSDEpg (p_vout ,input_GetItem (p_input ) )
water	901:16	0:0	6	p_vout
op	901:23	0:0	6	&&
call	901:26	901:72	6	vout_OSDEpg
arg	901:39	901:45	7	p_vout
water	901:39	0:0	8	p_vout
arg	901:47	901:72	7	input_GetItem(p_input)
call	901:47	901:70	8	input_GetItem
arg	901:62	901:70	9	p_input
water	901:62	0:0	10	p_input
stmts	902:16	902:58	5	
call	902:16	902:57	6	DisplayPosition
arg	902:33	902:39	7	p_intf
water	902:33	0:0	8	p_intf
arg	902:41	902:47	7	p_vout
water	902:41	0:0	8	p_vout
arg	902:49	902:57	7	p_input
water	902:49	0:0	8	p_input
water	902:58	0:0	6	;
break	903:12	903:17	4	
water	904:4	0:0	4	}
if	905:4	906:36	2	(p_vout)
cond	905:8	905:8	3	p_vout
water	905:8	0:0	4	p_vout
stmts	906:8	906:36	3	
call	906:8	906:35	4	vlc_object_release
arg	906:28	906:35	5	p_vout
water	906:28	0:0	6	p_vout
water	906:36	0:0	4	;
if	907:4	908:37	2	(p_input)
cond	907:8	907:8	3	p_input
water	907:8	0:0	4	p_input
stmts	908:8	908:37	3	
call	908:8	908:36	4	vlc_object_release
arg	908:28	908:36	5	p_input
water	908:28	0:0	6	p_input
water	908:37	0:0	4	;
return	909:4	909:22	2	VLC_SUCCESS
water	909:11	0:0	3	VLC_SUCCESS
