func	2:0	35:0	0	static int	vhs_sliding_effect_apply
params	2:35	0:0	1	
param	2:37	2:55	2	filter_t *	p_filter
param	2:57	2:78	2	picture_t *	p_pic_out
stmnts	0:0	34:22	1	
decl	4:4	4:41	2	filter_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	p_filter
op	4:34	0:0	2	->
water	4:36	0:0	2	p_sys
for	5:4	33:4	2	( uint8_t i_p = 0 ;i_p < p_pic_out -> i_planes;i_p ++)
forinit	0:0	5:25	3	 uint8_t i_p = 0 ;
decl	5:10	5:25	4	uint8_t	i_p
op	5:22	0:0	4	=
water	5:24	0:0	4	0
cond	5:27	5:44	3	i_p < p_pic_out -> i_planes
water	5:27	0:0	4	i_p
op	5:31	0:0	4	<
water	5:33	0:0	4	p_pic_out
op	5:42	0:0	4	->
water	5:44	0:0	4	i_planes
forexpr	5:54	5:57	3	i_p ++
water	5:54	0:0	4	i_p
op	5:57	0:0	4	++
stmts	5:62	33:4	3	
water	5:62	0:0	4	{
decl	7:8	7:27	4	uint8_t	*p_temp_buf
if	8:8	15:8	4	(! p_sys -> i_sliding_type_duplicate)
cond	8:13	8:21	5	! p_sys -> i_sliding_type_duplicate
op	8:13	0:0	6	!
water	8:14	0:0	6	p_sys
op	8:19	0:0	6	->
water	8:21	0:0	6	i_sliding_type_duplicate
stmts	8:48	15:8	5	
water	8:48	0:0	6	{
water	9:12	0:0	6	p_temp_buf
op	9:22	0:0	6	=
call	9:24	10:77	6	calloc
arg	9:32	10:59	7	p_pic_out->p[i_p].i_lines*p_pic_out->p[i_p].i_pitch
water	9:32	0:0	8	p_pic_out
op	9:41	0:0	8	->
water	9:43	0:0	8	p
op	9:44	0:0	8	[
water	9:45	0:0	8	i_p
op	9:48	0:0	8	]
op	9:49	0:0	8	.
water	9:50	0:0	8	i_lines
op	10:32	0:0	8	*
water	10:34	0:0	8	p_pic_out
op	10:43	0:0	8	->
water	10:45	0:0	8	p
op	10:46	0:0	8	[
water	10:47	0:0	8	i_p
op	10:50	0:0	8	]
op	10:51	0:0	8	.
water	10:52	0:0	8	i_pitch
arg	10:61	10:77	7	sizeof(uint8_t)
op	10:61	0:0	8	sizeof
water	10:67	0:0	8	(
water	10:68	0:0	8	uint8_t
water	10:75	0:0	8	)
water	10:78	0:0	6	;
if	11:12	12:33	6	(unlikely (! p_temp_buf ))
cond	11:17	11:39	7	unlikely (! p_temp_buf )
call	11:17	11:39	8	unlikely
arg	11:27	11:39	9	!p_temp_buf
op	11:27	0:0	10	!
water	11:28	0:0	10	p_temp_buf
stmts	12:16	12:33	7	
return	12:16	12:33	8	VLC_ENOMEM
water	12:23	0:0	9	VLC_ENOMEM
call	13:12	14:74	6	memcpy
arg	13:20	13:30	7	p_temp_buf
water	13:20	0:0	8	p_temp_buf
arg	13:32	13:58	7	p_pic_out->p[i_p].p_pixels
water	13:32	0:0	8	p_pic_out
op	13:41	0:0	8	->
water	13:43	0:0	8	p
op	13:44	0:0	8	[
water	13:45	0:0	8	i_p
op	13:48	0:0	8	]
op	13:49	0:0	8	.
water	13:50	0:0	8	p_pixels
arg	14:20	14:74	7	p_pic_out->p[i_p].i_lines*p_pic_out->p[i_p].i_pitch
water	14:20	0:0	8	p_pic_out
op	14:29	0:0	8	->
water	14:31	0:0	8	p
op	14:32	0:0	8	[
water	14:33	0:0	8	i_p
op	14:36	0:0	8	]
op	14:37	0:0	8	.
water	14:38	0:0	8	i_lines
op	14:46	0:0	8	*
water	14:48	0:0	8	p_pic_out
op	14:57	0:0	8	->
water	14:59	0:0	8	p
op	14:60	0:0	8	[
water	14:61	0:0	8	i_p
op	14:64	0:0	8	]
op	14:65	0:0	8	.
water	14:66	0:0	8	i_pitch
water	14:75	0:0	6	;
water	15:8	0:0	6	}
else	16:8	17:51	4
stmts	17:12	17:51	5	
water	17:12	0:0	6	p_temp_buf
op	17:23	0:0	6	=
water	17:25	0:0	6	p_pic_out
op	17:34	0:0	6	->
water	17:36	0:0	6	p
op	17:37	0:0	6	[
water	17:38	0:0	6	i_p
op	17:41	0:0	6	]
op	17:42	0:0	6	.
water	17:43	0:0	6	p_pixels
water	17:51	0:0	6	;
for	19:8	30:8	4	( int32_t i_y = 0 ;i_y < p_pic_out -> p [ i_p ] . i_visible_lines;i_y ++)
forinit	0:0	19:29	5	 int32_t i_y = 0 ;
decl	19:14	19:29	6	int32_t	i_y
op	19:26	0:0	6	=
water	19:28	0:0	6	0
cond	19:31	19:55	5	i_y < p_pic_out -> p [ i_p ] . i_visible_lines
water	19:31	0:0	6	i_y
op	19:35	0:0	6	<
water	19:37	0:0	6	p_pic_out
op	19:46	0:0	6	->
water	19:48	0:0	6	p
op	19:49	0:0	6	[
water	19:50	0:0	6	i_p
op	19:53	0:0	6	]
op	19:54	0:0	6	.
water	19:55	0:0	6	i_visible_lines
forexpr	19:72	19:75	5	i_y ++
water	19:72	0:0	6	i_y
op	19:75	0:0	6	++
stmts	20:8	30:8	5	
water	20:8	0:0	6	{
decl	21:12	21:70	6	int32_t	i_ofs
op	21:26	0:0	6	=
water	21:28	0:0	6	p_sys
op	21:33	0:0	6	->
water	21:35	0:0	6	i_offset_ofs
op	21:48	0:0	6	+
water	21:50	0:0	6	p_sys
op	21:55	0:0	6	->
water	21:57	0:0	6	i_sliding_ofs
if	22:12	23:43	6	(( p_sys -> i_sliding_speed == 0 ) || ! p_sys -> i_sliding_type_duplicate)
cond	22:17	22:60	7	( p_sys -> i_sliding_speed == 0 ) || ! p_sys -> i_sliding_type_duplicate
water	22:17	0:0	8	(
water	22:19	0:0	8	p_sys
op	22:24	0:0	8	->
water	22:26	0:0	8	i_sliding_speed
op	22:42	0:0	8	==
water	22:45	0:0	8	0
water	22:47	0:0	8	)
op	22:49	0:0	8	||
op	22:52	0:0	8	!
water	22:53	0:0	8	p_sys
op	22:58	0:0	8	->
water	22:60	0:0	8	i_sliding_type_duplicate
stmts	23:16	23:43	7	
water	23:16	0:0	8	i_ofs
op	23:22	0:0	8	+=
water	23:25	0:0	8	p_sys
op	23:30	0:0	8	->
water	23:32	0:0	8	i_phase_ofs
water	23:43	0:0	8	;
water	24:12	0:0	6	i_ofs
op	24:19	0:0	6	=
call	24:21	24:64	6	MOD
arg	24:26	24:37	7	i_ofs/100
water	24:26	0:0	8	i_ofs
op	24:32	0:0	8	/
water	24:34	0:0	8	100
arg	24:39	24:64	7	p_sys->i_height[Y_PLANE]
water	24:39	0:0	8	p_sys
op	24:44	0:0	8	->
water	24:46	0:0	8	i_height
op	24:54	0:0	8	[
water	24:55	0:0	8	Y_PLANE
op	24:62	0:0	8	]
water	24:65	0:0	6	;
water	25:12	0:0	6	i_ofs
op	25:18	0:0	6	*=
water	25:21	0:0	6	p_pic_out
op	25:30	0:0	6	->
water	25:32	0:0	6	p
op	25:33	0:0	6	[
water	25:34	0:0	6	i_p
op	25:37	0:0	6	]
op	25:38	0:0	6	.
water	25:39	0:0	6	i_visible_lines
water	25:54	0:0	6	;
water	26:12	0:0	6	i_ofs
op	26:18	0:0	6	/=
water	26:21	0:0	6	p_sys
op	26:26	0:0	6	->
water	26:28	0:0	6	i_height
op	26:36	0:0	6	[
water	26:37	0:0	6	Y_PLANE
op	26:44	0:0	6	]
water	26:45	0:0	6	;
call	27:12	29:54	6	memcpy
arg	27:20	27:82	7	&p_pic_out->p[i_p].p_pixels[i_y*p_pic_out->p[i_p].i_pitch]
op	27:20	0:0	8	&
water	27:21	0:0	8	p_pic_out
op	27:30	0:0	8	->
water	27:32	0:0	8	p
op	27:33	0:0	8	[
water	27:34	0:0	8	i_p
op	27:37	0:0	8	]
op	27:38	0:0	8	.
water	27:39	0:0	8	p_pixels
op	27:47	0:0	8	[
water	27:49	0:0	8	i_y
op	27:53	0:0	8	*
water	27:55	0:0	8	p_pic_out
op	27:64	0:0	8	->
water	27:66	0:0	8	p
op	27:67	0:0	8	[
water	27:68	0:0	8	i_p
op	27:71	0:0	8	]
op	27:72	0:0	8	.
water	27:73	0:0	8	i_pitch
op	27:81	0:0	8	]
arg	28:20	28:118	7	&p_temp_buf[((i_y+i_ofs)%p_pic_out->p[i_p].i_visible_lines)*p_pic_out->p[i_p].i_pitch]
op	28:20	0:0	8	&
water	28:21	0:0	8	p_temp_buf
op	28:31	0:0	8	[
water	28:33	0:0	8	(
water	28:35	0:0	8	(
water	28:37	0:0	8	i_y
op	28:41	0:0	8	+
water	28:43	0:0	8	i_ofs
water	28:49	0:0	8	)
op	28:51	0:0	8	%
water	28:53	0:0	8	p_pic_out
op	28:62	0:0	8	->
water	28:64	0:0	8	p
op	28:65	0:0	8	[
water	28:66	0:0	8	i_p
op	28:69	0:0	8	]
op	28:70	0:0	8	.
water	28:71	0:0	8	i_visible_lines
water	28:87	0:0	8	)
op	28:89	0:0	8	*
water	28:91	0:0	8	p_pic_out
op	28:100	0:0	8	->
water	28:102	0:0	8	p
op	28:103	0:0	8	[
water	28:104	0:0	8	i_p
op	28:107	0:0	8	]
op	28:108	0:0	8	.
water	28:109	0:0	8	i_pitch
op	28:117	0:0	8	]
arg	29:20	29:54	7	p_pic_out->p[i_p].i_visible_pitch
water	29:20	0:0	8	p_pic_out
op	29:29	0:0	8	->
water	29:31	0:0	8	p
op	29:32	0:0	8	[
water	29:33	0:0	8	i_p
op	29:36	0:0	8	]
op	29:37	0:0	8	.
water	29:38	0:0	8	i_visible_pitch
water	29:55	0:0	6	;
water	30:8	0:0	6	}
if	31:8	32:28	4	(! p_sys -> i_sliding_type_duplicate)
cond	31:13	31:21	5	! p_sys -> i_sliding_type_duplicate
op	31:13	0:0	6	!
water	31:14	0:0	6	p_sys
op	31:19	0:0	6	->
water	31:21	0:0	6	i_sliding_type_duplicate
stmts	32:12	32:28	5	
call	32:12	32:27	6	free
arg	32:17	32:27	7	p_temp_buf
water	32:17	0:0	8	p_temp_buf
water	32:28	0:0	6	;
water	33:4	0:0	4	}
return	34:4	34:22	2	VLC_SUCCESS
water	34:11	0:0	3	VLC_SUCCESS
