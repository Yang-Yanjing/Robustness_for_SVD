func	2:0	60:0	0	block_t *	scan_GetM3U
params	2:20	0:0	1	
param	2:22	2:37	2	scan_t *	p_scan
stmnts	0:0	59:62	1	
decl	4:4	4:39	2	vlc_object_t	*p_obj
op	4:24	0:0	2	=
water	4:26	0:0	2	p_scan
op	4:32	0:0	2	->
water	4:34	0:0	2	p_obj
decl	5:4	5:30	2	block_t	*p_playlist
op	5:24	0:0	2	=
water	5:26	0:0	2	NULL
if	6:4	7:19	2	(p_scan -> i_service <= 0)
cond	6:8	6:29	3	p_scan -> i_service <= 0
water	6:8	0:0	4	p_scan
op	6:14	0:0	4	->
water	6:16	0:0	4	i_service
op	6:26	0:0	4	<=
water	6:29	0:0	4	0
stmts	7:8	7:19	3	
return	7:8	7:19	4	NULL
water	7:15	0:0	5	NULL
call	9:4	9:90	2	qsort
arg	9:11	9:29	3	p_scan->pp_service
water	9:11	0:0	4	p_scan
op	9:17	0:0	4	->
water	9:19	0:0	4	pp_service
arg	9:31	9:48	3	p_scan->i_service
water	9:31	0:0	4	p_scan
op	9:37	0:0	4	->
water	9:39	0:0	4	i_service
arg	9:50	9:73	3	sizeof(scan_service_t*)
op	9:50	0:0	4	sizeof
water	9:56	0:0	4	(
water	9:57	0:0	4	scan_service_t
op	9:71	0:0	4	*
water	9:72	0:0	4	)
arg	9:75	9:90	3	ScanServiceCmp
water	9:75	0:0	4	ScanServiceCmp
water	9:91	0:0	2	;
water	11:4	0:0	2	p_playlist
op	11:15	0:0	2	=
call	11:17	11:44	2	BlockString
arg	11:30	11:44	3	"#EXTM3U\n\n"
water	11:30	0:0	4	"#EXTM3U\n\n"
water	11:45	0:0	2	;
for	12:4	58:4	2	( int i = 0 ;i < p_scan -> i_service;i ++)
forinit	0:0	12:18	3	 int i = 0 ;
decl	12:9	12:18	4	int	i
op	12:15	0:0	4	=
water	12:17	0:0	4	0
cond	12:20	12:32	3	i < p_scan -> i_service
water	12:20	0:0	4	i
op	12:22	0:0	4	<
water	12:24	0:0	4	p_scan
op	12:30	0:0	4	->
water	12:32	0:0	4	i_service
forexpr	12:43	12:44	3	i ++
water	12:43	0:0	4	i
op	12:44	0:0	4	++
stmts	13:4	58:4	3	
water	13:4	0:0	4	{
decl	14:8	14:49	4	scan_service_t	*s
op	14:26	0:0	4	=
water	14:28	0:0	4	p_scan
op	14:34	0:0	4	->
water	14:36	0:0	4	pp_service
op	14:46	0:0	4	[
water	14:47	0:0	4	i
op	14:48	0:0	4	]
if	15:8	20:8	4	(s -> type == SERVICE_UNKNOWN)
cond	15:12	15:23	5	s -> type == SERVICE_UNKNOWN
water	15:12	0:0	6	s
op	15:13	0:0	6	->
water	15:15	0:0	6	type
op	15:20	0:0	6	==
water	15:23	0:0	6	SERVICE_UNKNOWN
stmts	16:8	20:8	5	
water	16:8	0:0	6	{
call	18:12	18:84	6	msg_Dbg
arg	18:21	18:26	7	p_obj
water	18:21	0:0	8	p_obj
arg	18:28	18:69	7	"scan_GetM3U: ignoring service number %d"
water	18:28	0:0	8	"scan_GetM3U: ignoring service number %d"
arg	18:71	18:84	7	s->i_program
water	18:71	0:0	8	s
op	18:72	0:0	8	->
water	18:74	0:0	8	i_program
water	18:85	0:0	6	;
continue	19:12	19:20	6	
water	20:8	0:0	6	}
decl	21:8	21:28	4	const char	*psz_type
switch	22:8	31:8	4	(s -> type)
cond	22:16	22:19	5	s -> type
water	22:16	0:0	6	s
op	22:17	0:0	6	->
water	22:19	0:0	6	type
stmts	23:8	31:8	5	
water	23:8	0:0	6	{
label	24:8	24:39	6	case SERVICE_DIGITAL_TELEVISION :
water	24:47	0:0	6	psz_type
op	24:56	0:0	6	=
water	24:58	0:0	6	"Digital television"
water	24:78	0:0	6	;
break	24:80	24:85	6	
label	25:8	25:45	6	case SERVICE_DIGITAL_TELEVISION_AC_SD :
water	25:47	0:0	6	psz_type
op	25:56	0:0	6	=
water	25:58	0:0	6	"Digital television advanced codec SD"
water	25:96	0:0	6	;
break	25:98	25:103	6	
label	26:8	26:45	6	case SERVICE_DIGITAL_TELEVISION_AC_HD :
water	26:47	0:0	6	psz_type
op	26:56	0:0	6	=
water	26:58	0:0	6	"Digital television advanced codec HD"
water	26:96	0:0	6	;
break	26:98	26:103	6	
label	27:8	27:34	6	case SERVICE_DIGITAL_RADIO :
water	27:47	0:0	6	psz_type
op	27:56	0:0	6	=
water	27:58	0:0	6	"Digital radio"
water	27:73	0:0	6	;
break	27:75	27:80	6	
label	28:8	28:15	6	default :
water	29:12	0:0	6	psz_type
op	29:21	0:0	6	=
water	29:23	0:0	6	"Unknown"
water	29:32	0:0	6	;
break	30:12	30:17	6	
water	31:8	0:0	6	}
call	32:8	35:88	4	msg_Warn
arg	32:18	32:23	5	p_obj
water	32:18	0:0	6	p_obj
arg	32:25	32:162	5	"scan_GetM3U: service number %d type '%s' name '%s' channel %d cypted=%d| network_id %d (nit:%d sdt:%d)| f=%d bw=%d snr=%d modulation=%d"
water	32:25	0:0	6	"scan_GetM3U: service number %d type '%s' name '%s' channel %d cypted=%d| network_id %d (nit:%d sdt:%d)| f=%d bw=%d snr=%d modulation=%d"
arg	33:18	33:30	5	s->i_program
water	33:18	0:0	6	s
op	33:19	0:0	6	->
water	33:21	0:0	6	i_program
arg	33:32	33:40	5	psz_type
water	33:32	0:0	6	psz_type
arg	33:42	33:53	5	s->psz_name
water	33:42	0:0	6	s
op	33:43	0:0	6	->
water	33:45	0:0	6	psz_name
arg	33:55	33:67	5	s->i_channel
water	33:55	0:0	6	s
op	33:56	0:0	6	->
water	33:58	0:0	6	i_channel
arg	33:69	33:81	5	s->b_crypted
water	33:69	0:0	6	s
op	33:70	0:0	6	->
water	33:72	0:0	6	b_crypted
arg	34:18	34:33	5	s->i_network_id
water	34:18	0:0	6	s
op	34:19	0:0	6	->
water	34:21	0:0	6	i_network_id
arg	34:35	34:51	5	s->i_nit_version
water	34:35	0:0	6	s
op	34:36	0:0	6	->
water	34:38	0:0	6	i_nit_version
arg	34:53	34:69	5	s->i_sdt_version
water	34:53	0:0	6	s
op	34:54	0:0	6	->
water	34:56	0:0	6	i_sdt_version
arg	35:18	35:36	5	s->cfg.i_frequency
water	35:18	0:0	6	s
op	35:19	0:0	6	->
water	35:21	0:0	6	cfg
op	35:24	0:0	6	.
water	35:25	0:0	6	i_frequency
arg	35:38	35:56	5	s->cfg.i_bandwidth
water	35:38	0:0	6	s
op	35:39	0:0	6	->
water	35:41	0:0	6	cfg
op	35:44	0:0	6	.
water	35:45	0:0	6	i_bandwidth
arg	35:58	35:66	5	s->i_snr
water	35:58	0:0	6	s
op	35:59	0:0	6	->
water	35:61	0:0	6	i_snr
arg	35:68	35:88	5	s->cfg.i_modulation
water	35:68	0:0	6	s
op	35:69	0:0	6	->
water	35:71	0:0	6	cfg
op	35:74	0:0	6	.
water	35:75	0:0	6	i_modulation
water	35:89	0:0	4	;
if	36:8	37:28	4	(! s -> cfg . i_fec)
cond	36:12	36:20	5	! s -> cfg . i_fec
op	36:12	0:0	6	!
water	36:13	0:0	6	s
op	36:14	0:0	6	->
water	36:16	0:0	6	cfg
op	36:19	0:0	6	.
water	36:20	0:0	6	i_fec
stmts	37:12	37:28	5	
water	37:12	0:0	6	s
op	37:13	0:0	6	->
water	37:15	0:0	6	cfg
op	37:18	0:0	6	.
water	37:19	0:0	6	i_fec
op	37:25	0:0	6	=
water	37:27	0:0	6	9
water	37:28	0:0	6	;
decl	38:8	38:17	4	char	*psz
if	39:8	51:22	4	(asprintf (& psz ,"#EXTINF:,,%s\n" "#EXTVLCOPT:program=%d\n" "dvb://frequency=%d:bandwidth=%d:voltage=%d:fec=%d:modulation=%d:srate=%d\n" "\n" ,s -> psz_name && * s -> psz_name ? s -> psz_name : "Unknown" ,s -> i_program ,s -> cfg . i_frequency ,s -> cfg . i_bandwidth ,s -> cfg . c_polarization == 'H' ? 18 : 13 ,s -> cfg . i_fec ,s -> cfg . i_modulation ,s -> cfg . i_symbolrate ) < 0)
cond	39:12	50:46	5	asprintf (& psz ,"#EXTINF:,,%s\n" "#EXTVLCOPT:program=%d\n" "dvb://frequency=%d:bandwidth=%d:voltage=%d:fec=%d:modulation=%d:srate=%d\n" "\n" ,s -> psz_name && * s -> psz_name ? s -> psz_name : "Unknown" ,s -> i_program ,s -> cfg . i_frequency ,s -> cfg . i_bandwidth ,s -> cfg . c_polarization == 'H' ? 18 : 13 ,s -> cfg . i_fec ,s -> cfg . i_modulation ,s -> cfg . i_symbolrate ) < 0
call	39:12	50:42	6	asprintf
arg	39:22	39:26	7	&psz
op	39:22	0:0	8	&
water	39:23	0:0	8	psz
arg	39:28	42:28	7	"#EXTINF:,,%s\n""#EXTVLCOPT:program=%d\n""dvb://frequency=%d:bandwidth=%d:voltage=%d:fec=%d:modulation=%d:srate=%d\n""\n"
water	39:28	0:0	8	"#EXTINF:,,%s\n"
water	40:24	0:0	8	"#EXTVLCOPT:program=%d\n"
water	41:24	0:0	8	"dvb://frequency=%d:bandwidth=%d:voltage=%d:fec=%d:modulation=%d:srate=%d\n"
water	42:24	0:0	8	"\n"
arg	43:22	43:76	7	s->psz_name&&*s->psz_name?s->psz_name:"Unknown"
water	43:22	0:0	8	s
op	43:23	0:0	8	->
water	43:25	0:0	8	psz_name
op	43:34	0:0	8	&&
op	43:37	0:0	8	*
water	43:39	0:0	8	s
op	43:40	0:0	8	->
water	43:42	0:0	8	psz_name
water	43:51	0:0	8	?
water	43:53	0:0	8	s
op	43:54	0:0	8	->
water	43:56	0:0	8	psz_name
water	43:65	0:0	8	:
water	43:67	0:0	8	"Unknown"
arg	44:22	44:34	7	s->i_program
water	44:22	0:0	8	s
op	44:23	0:0	8	->
water	44:25	0:0	8	i_program
arg	45:22	45:40	7	s->cfg.i_frequency
water	45:22	0:0	8	s
op	45:23	0:0	8	->
water	45:25	0:0	8	cfg
op	45:28	0:0	8	.
water	45:29	0:0	8	i_frequency
arg	46:22	46:40	7	s->cfg.i_bandwidth
water	46:22	0:0	8	s
op	46:23	0:0	8	->
water	46:25	0:0	8	cfg
op	46:28	0:0	8	.
water	46:29	0:0	8	i_bandwidth
arg	47:22	47:60	7	s->cfg.c_polarization=='H'?18:13
water	47:22	0:0	8	s
op	47:23	0:0	8	->
water	47:25	0:0	8	cfg
op	47:28	0:0	8	.
water	47:29	0:0	8	c_polarization
op	47:44	0:0	8	==
water	47:47	0:0	8	'H'
water	47:51	0:0	8	?
water	47:53	0:0	8	18
water	47:56	0:0	8	:
water	47:58	0:0	8	13
arg	48:22	48:34	7	s->cfg.i_fec
water	48:22	0:0	8	s
op	48:23	0:0	8	->
water	48:25	0:0	8	cfg
op	48:28	0:0	8	.
water	48:29	0:0	8	i_fec
arg	49:22	49:41	7	s->cfg.i_modulation
water	49:22	0:0	8	s
op	49:23	0:0	8	->
water	49:25	0:0	8	cfg
op	49:28	0:0	8	.
water	49:29	0:0	8	i_modulation
arg	50:22	50:42	7	s->cfg.i_symbolrate
water	50:22	0:0	8	s
op	50:23	0:0	8	->
water	50:25	0:0	8	cfg
op	50:28	0:0	8	.
water	50:29	0:0	8	i_symbolrate
op	50:44	0:0	6	<
water	50:46	0:0	6	0
stmts	51:12	51:22	5	
water	51:12	0:0	6	psz
op	51:16	0:0	6	=
water	51:18	0:0	6	NULL
water	51:22	0:0	6	;
if	52:8	57:8	4	(psz)
cond	52:12	52:12	5	psz
water	52:12	0:0	6	psz
stmts	53:8	57:8	5	
water	53:8	0:0	6	{
decl	54:12	54:49	6	block_t	*p_block
op	54:29	0:0	6	=
call	54:31	54:48	7	BlockString
arg	54:44	54:48	8	psz
water	54:44	0:0	9	psz
if	55:12	56:57	6	(p_block)
cond	55:16	55:16	7	p_block
water	55:16	0:0	8	p_block
stmts	56:16	56:57	7	
call	56:16	56:56	8	block_ChainAppend
arg	56:35	56:46	9	&p_playlist
op	56:35	0:0	10	&
water	56:36	0:0	10	p_playlist
arg	56:48	56:56	9	p_block
water	56:48	0:0	10	p_block
water	56:57	0:0	8	;
water	57:8	0:0	6	}
water	58:4	0:0	4	}
return	59:4	59:62	2	p_playlist?block_ChainGather(p_playlist):NULL
water	59:11	0:0	3	p_playlist
water	59:22	0:0	3	?
call	59:24	59:54	3	block_ChainGather
arg	59:43	59:54	4	p_playlist
water	59:43	0:0	5	p_playlist
water	59:56	0:0	3	:
water	59:58	0:0	3	NULL
