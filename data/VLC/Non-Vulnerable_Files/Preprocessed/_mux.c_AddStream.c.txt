func	2:0	113:0	0	static int	AddStream
params	2:20	0:0	1	
param	2:22	2:39	2	sout_mux_t *	p_mux
param	2:41	2:63	2	sout_input_t *	p_input
stmnts	0:0	112:22	1	
decl	4:4	4:40	2	sout_mux_sys_t	*p_sys
op	4:26	0:0	2	=
water	4:28	0:0	2	p_mux
op	4:33	0:0	2	->
water	4:35	0:0	2	p_sys
decl	5:4	5:37	2	es_format_t	*fmt
op	5:21	0:0	2	=
water	5:23	0:0	2	p_input
op	5:30	0:0	2	->
water	5:32	0:0	2	p_fmt
decl	6:4	6:25	2	AVCodecContext	*codec
decl	7:4	7:20	2	AVStream	*stream
water	8:4	0:0	2	unsigned
water	8:13	0:0	2	i_codec_id
water	8:23	0:0	2	;
call	9:4	9:35	2	msg_Dbg
arg	9:13	9:18	3	p_mux
water	9:13	0:0	4	p_mux
arg	9:20	9:35	3	"adding input"
water	9:20	0:0	4	"adding input"
water	9:36	0:0	2	;
if	10:4	16:4	2	(!GetFfmpegCodec (fmt -> i_codec ,0 ,& i_codec_id ,0 ) || i_codec_id == AV_CODEC_ID_NONE)
cond	10:8	11:22	3	!GetFfmpegCodec (fmt -> i_codec ,0 ,& i_codec_id ,0 ) || i_codec_id == AV_CODEC_ID_NONE
op	10:8	0:0	4	!
call	10:9	10:57	4	GetFfmpegCodec
arg	10:25	10:37	5	fmt->i_codec
water	10:25	0:0	6	fmt
op	10:28	0:0	6	->
water	10:30	0:0	6	i_codec
arg	10:39	10:40	5	0
water	10:39	0:0	6	0
arg	10:42	10:53	5	&i_codec_id
op	10:42	0:0	6	&
water	10:43	0:0	6	i_codec_id
arg	10:55	10:57	5	0
water	10:55	0:0	6	0
op	11:5	0:0	4	||
water	11:8	0:0	4	i_codec_id
op	11:19	0:0	4	==
water	11:22	0:0	4	AV_CODEC_ID_NONE
stmts	12:4	16:4	3	
water	12:4	0:0	4	{
call	13:8	14:39	4	msg_Dbg
arg	13:17	13:22	5	p_mux
water	13:17	0:0	6	p_mux
arg	13:24	13:64	5	"couldn't find codec for fourcc '%4.4s'"
water	13:24	0:0	6	"couldn't find codec for fourcc '%4.4s'"
arg	14:17	14:39	5	(char*)&fmt->i_codec
water	14:17	0:0	6	(
water	14:18	0:0	6	char
op	14:23	0:0	6	*
water	14:24	0:0	6	)
op	14:25	0:0	6	&
water	14:26	0:0	6	fmt
op	14:29	0:0	6	->
water	14:31	0:0	6	i_codec
water	14:40	0:0	4	;
return	15:8	15:27	4	VLC_EGENERIC
water	15:15	0:0	5	VLC_EGENERIC
water	16:4	0:0	4	}
water	17:4	0:0	2	unsigned
water	17:13	0:0	2	opus_size
op	17:22	0:0	2	[
water	17:23	0:0	2	XIPH_MAX_HEADER_COUNT
op	17:44	0:0	2	]
water	17:45	0:0	2	;
decl	18:4	18:48	2	void	*opus_packet[XIPH_MAX_HEADER_COUNT]
if	19:4	30:4	2	(fmt -> i_codec == VLC_CODEC_OPUS)
cond	19:8	19:24	3	fmt -> i_codec == VLC_CODEC_OPUS
water	19:8	0:0	4	fmt
op	19:11	0:0	4	->
water	19:13	0:0	4	i_codec
op	19:21	0:0	4	==
water	19:24	0:0	4	VLC_CODEC_OPUS
stmts	20:4	30:4	3	
water	20:4	0:0	4	{
water	21:8	0:0	4	unsigned
water	21:17	0:0	4	count
water	21:22	0:0	4	;
if	23:8	25:8	4	(xiph_SplitHeaders (opus_size ,opus_packet ,& count ,fmt -> i_extra ,fmt -> p_extra ))
cond	23:12	23:89	5	xiph_SplitHeaders (opus_size ,opus_packet ,& count ,fmt -> i_extra ,fmt -> p_extra )
call	23:12	23:89	6	xiph_SplitHeaders
arg	23:30	23:39	7	opus_size
water	23:30	0:0	8	opus_size
arg	23:41	23:52	7	opus_packet
water	23:41	0:0	8	opus_packet
arg	23:54	23:60	7	&count
op	23:54	0:0	8	&
water	23:55	0:0	8	count
arg	23:62	23:74	7	fmt->i_extra
water	23:62	0:0	8	fmt
op	23:65	0:0	8	->
water	23:67	0:0	8	i_extra
arg	23:76	23:89	7	fmt->p_extra
water	23:76	0:0	8	fmt
op	23:79	0:0	8	->
water	23:81	0:0	8	p_extra
stmts	23:93	25:8	5	
water	23:93	0:0	6	{
water	24:12	0:0	6	count
op	24:18	0:0	6	=
water	24:20	0:0	6	0
water	24:21	0:0	6	;
water	25:8	0:0	6	}
if	26:8	29:8	4	(count != 2 || opus_size [ 0 ] < 19)
cond	26:12	26:41	5	count != 2 || opus_size [ 0 ] < 19
water	26:12	0:0	6	count
op	26:18	0:0	6	!=
water	26:21	0:0	6	2
op	26:23	0:0	6	||
water	26:26	0:0	6	opus_size
op	26:35	0:0	6	[
water	26:36	0:0	6	0
op	26:37	0:0	6	]
op	26:39	0:0	6	<
water	26:41	0:0	6	19
stmts	26:45	29:8	5	
water	26:45	0:0	6	{
call	27:12	27:48	6	msg_Err
arg	27:20	27:25	7	p_mux
water	27:20	0:0	8	p_mux
arg	27:27	27:48	7	"Invalid Opus header"
water	27:27	0:0	8	"Invalid Opus header"
water	27:49	0:0	6	;
return	28:12	28:31	6	VLC_EGENERIC
water	28:19	0:0	7	VLC_EGENERIC
water	29:8	0:0	6	}
water	30:4	0:0	4	}
water	31:4	0:0	2	p_input
op	31:11	0:0	2	->
water	31:13	0:0	2	p_sys
op	31:19	0:0	2	=
call	31:21	31:43	2	malloc
arg	31:29	31:43	3	sizeof(int)
op	31:29	0:0	4	sizeof
water	31:35	0:0	4	(
water	31:37	0:0	4	int
water	31:41	0:0	4	)
water	31:44	0:0	2	;
op	32:4	0:0	2	*
water	32:5	0:0	2	(
water	32:6	0:0	2	(
water	32:7	0:0	2	int
op	32:11	0:0	2	*
water	32:12	0:0	2	)
water	32:13	0:0	2	p_input
op	32:20	0:0	2	->
water	32:22	0:0	2	p_sys
water	32:27	0:0	2	)
op	32:29	0:0	2	=
water	32:31	0:0	2	p_sys
op	32:36	0:0	2	->
water	32:38	0:0	2	oc
op	32:40	0:0	2	->
water	32:42	0:0	2	nb_streams
water	32:52	0:0	2	;
if	33:4	37:4	2	(fmt -> i_cat != VIDEO_ES && fmt -> i_cat != AUDIO_ES)
cond	33:8	33:48	3	fmt -> i_cat != VIDEO_ES && fmt -> i_cat != AUDIO_ES
water	33:8	0:0	4	fmt
op	33:11	0:0	4	->
water	33:13	0:0	4	i_cat
op	33:19	0:0	4	!=
water	33:22	0:0	4	VIDEO_ES
op	33:31	0:0	4	&&
water	33:34	0:0	4	fmt
op	33:37	0:0	4	->
water	33:39	0:0	4	i_cat
op	33:45	0:0	4	!=
water	33:48	0:0	4	AUDIO_ES
stmts	34:4	37:4	3	
water	34:4	0:0	4	{
call	35:8	35:49	4	msg_Warn
arg	35:18	35:23	5	p_mux
water	35:18	0:0	6	p_mux
arg	35:25	35:49	5	"Unhandled ES category"
water	35:25	0:0	6	"Unhandled ES category"
water	35:50	0:0	4	;
return	36:8	36:27	4	VLC_EGENERIC
water	36:15	0:0	5	VLC_EGENERIC
water	37:4	0:0	4	}
water	38:4	0:0	2	stream
op	38:11	0:0	2	=
call	38:13	38:49	2	avformat_new_stream
arg	38:34	38:43	3	p_sys->oc
water	38:34	0:0	4	p_sys
op	38:39	0:0	4	->
water	38:41	0:0	4	oc
arg	38:45	38:49	3	NULL
water	38:45	0:0	4	NULL
water	38:50	0:0	2	;
if	39:4	43:4	2	(! stream)
cond	39:8	39:9	3	! stream
op	39:8	0:0	4	!
water	39:9	0:0	4	stream
stmts	40:4	43:4	3	
water	40:4	0:0	4	{
call	41:8	41:29	4	free
arg	41:14	41:29	5	p_input->p_sys
water	41:14	0:0	6	p_input
op	41:21	0:0	6	->
water	41:23	0:0	6	p_sys
water	41:30	0:0	4	;
return	42:8	42:27	4	VLC_EGENERIC
water	42:15	0:0	5	VLC_EGENERIC
water	43:4	0:0	4	}
water	44:4	0:0	2	codec
op	44:10	0:0	2	=
water	44:12	0:0	2	stream
op	44:18	0:0	2	->
water	44:20	0:0	2	codec
water	44:25	0:0	2	;
water	45:4	0:0	2	codec
op	45:9	0:0	2	->
water	45:11	0:0	2	opaque
op	45:18	0:0	2	=
water	45:20	0:0	2	p_mux
water	45:25	0:0	2	;
switch	46:4	88:4	2	(fmt -> i_cat)
cond	46:12	46:17	3	fmt -> i_cat
water	46:12	0:0	4	fmt
op	46:15	0:0	4	->
water	46:17	0:0	4	i_cat
stmts	47:4	88:4	3	
water	47:4	0:0	4	{
label	48:4	48:17	4	case AUDIO_ES :
water	49:8	0:0	4	codec
op	49:13	0:0	4	->
water	49:15	0:0	4	codec_type
op	49:26	0:0	4	=
water	49:28	0:0	4	AVMEDIA_TYPE_AUDIO
water	49:46	0:0	4	;
water	50:8	0:0	4	codec
op	50:13	0:0	4	->
water	50:15	0:0	4	channels
op	50:24	0:0	4	=
water	50:26	0:0	4	fmt
op	50:29	0:0	4	->
water	50:31	0:0	4	audio
op	50:36	0:0	4	.
water	50:37	0:0	4	i_channels
water	50:47	0:0	4	;
water	51:8	0:0	4	codec
op	51:13	0:0	4	->
water	51:15	0:0	4	sample_rate
op	51:27	0:0	4	=
water	51:29	0:0	4	fmt
op	51:32	0:0	4	->
water	51:34	0:0	4	audio
op	51:39	0:0	4	.
water	51:40	0:0	4	i_rate
water	51:46	0:0	4	;
water	52:8	0:0	4	stream
op	52:14	0:0	4	->
water	52:16	0:0	4	time_base
op	52:26	0:0	4	=
water	52:28	0:0	4	(
water	52:29	0:0	4	AVRational
water	52:39	0:0	4	)
water	52:40	0:0	4	{
water	52:41	0:0	4	1
water	52:42	0:0	4	,
water	52:44	0:0	4	codec
op	52:49	0:0	4	->
water	52:51	0:0	4	sample_rate
water	52:62	0:0	4	}
water	52:63	0:0	4	;
water	53:8	0:0	4	codec
op	53:13	0:0	4	->
water	53:15	0:0	4	frame_size
op	53:26	0:0	4	=
water	53:28	0:0	4	fmt
op	53:31	0:0	4	->
water	53:33	0:0	4	audio
op	53:38	0:0	4	.
water	53:39	0:0	4	i_frame_length
water	53:53	0:0	4	;
if	54:8	57:8	4	(fmt -> i_bitrate == 0)
cond	54:12	54:30	5	fmt -> i_bitrate == 0
water	54:12	0:0	6	fmt
op	54:15	0:0	6	->
water	54:17	0:0	6	i_bitrate
op	54:27	0:0	6	==
water	54:30	0:0	6	0
stmts	54:33	57:8	5	
water	54:33	0:0	6	{
call	55:12	55:67	6	msg_Warn
arg	55:22	55:27	7	p_mux
water	55:22	0:0	8	p_mux
arg	55:29	55:67	7	"Missing audio bitrate, assuming 64k"
water	55:29	0:0	8	"Missing audio bitrate, assuming 64k"
water	55:68	0:0	6	;
water	56:12	0:0	6	fmt
op	56:15	0:0	6	->
water	56:17	0:0	6	i_bitrate
op	56:27	0:0	6	=
water	56:29	0:0	6	64000
water	56:34	0:0	6	;
water	57:8	0:0	6	}
break	58:8	58:13	4	
label	59:4	59:17	4	case VIDEO_ES :
if	60:8	64:8	4	(! fmt -> video . i_frame_rate || ! fmt -> video . i_frame_rate_base)
cond	60:12	60:52	5	! fmt -> video . i_frame_rate || ! fmt -> video . i_frame_rate_base
op	60:12	0:0	6	!
water	60:13	0:0	6	fmt
op	60:16	0:0	6	->
water	60:18	0:0	6	video
op	60:23	0:0	6	.
water	60:24	0:0	6	i_frame_rate
op	60:37	0:0	6	||
op	60:40	0:0	6	!
water	60:41	0:0	6	fmt
op	60:44	0:0	6	->
water	60:46	0:0	6	video
op	60:51	0:0	6	.
water	60:52	0:0	6	i_frame_rate_base
stmts	60:72	64:8	5	
water	60:72	0:0	6	{
call	61:12	61:66	6	msg_Warn
arg	61:22	61:27	7	p_mux
water	61:22	0:0	8	p_mux
arg	61:29	61:66	7	"Missing frame rate, assuming 25fps"
water	61:29	0:0	8	"Missing frame rate, assuming 25fps"
water	61:67	0:0	6	;
water	62:12	0:0	6	fmt
op	62:15	0:0	6	->
water	62:17	0:0	6	video
op	62:22	0:0	6	.
water	62:23	0:0	6	i_frame_rate
op	62:36	0:0	6	=
water	62:38	0:0	6	25
water	62:40	0:0	6	;
water	63:12	0:0	6	fmt
op	63:15	0:0	6	->
water	63:17	0:0	6	video
op	63:22	0:0	6	.
water	63:23	0:0	6	i_frame_rate_base
op	63:41	0:0	6	=
water	63:43	0:0	6	1
water	63:44	0:0	6	;
water	64:8	0:0	6	}
else	64:10	68:90	4
stmts	65:12	68:90	5	
call	65:12	68:89	6	msg_Dbg
arg	65:21	65:26	7	p_mux
water	65:21	0:0	8	p_mux
arg	65:28	65:71	7	"Muxing framerate will be %d/%d = %.2f fps"
water	65:28	0:0	8	"Muxing framerate will be %d/%d = %.2f fps"
arg	66:20	66:43	7	fmt->video.i_frame_rate
water	66:20	0:0	8	fmt
op	66:23	0:0	8	->
water	66:25	0:0	8	video
op	66:30	0:0	8	.
water	66:31	0:0	8	i_frame_rate
arg	67:20	67:48	7	fmt->video.i_frame_rate_base
water	67:20	0:0	8	fmt
op	67:23	0:0	8	->
water	67:25	0:0	8	video
op	67:30	0:0	8	.
water	67:31	0:0	8	i_frame_rate_base
arg	68:20	68:89	7	(double)fmt->video.i_frame_rate/(double)fmt->video.i_frame_rate_base
water	68:20	0:0	8	(
water	68:21	0:0	8	double
water	68:27	0:0	8	)
water	68:28	0:0	8	fmt
op	68:31	0:0	8	->
water	68:33	0:0	8	video
op	68:38	0:0	8	.
water	68:39	0:0	8	i_frame_rate
op	68:51	0:0	8	/
water	68:52	0:0	8	(
water	68:53	0:0	8	double
water	68:59	0:0	8	)
water	68:60	0:0	8	fmt
op	68:63	0:0	8	->
water	68:65	0:0	8	video
op	68:70	0:0	8	.
water	68:71	0:0	8	i_frame_rate_base
water	68:90	0:0	6	;
water	69:8	0:0	4	codec
op	69:13	0:0	4	->
water	69:15	0:0	4	codec_type
op	69:26	0:0	4	=
water	69:28	0:0	4	AVMEDIA_TYPE_VIDEO
water	69:46	0:0	4	;
water	70:8	0:0	4	codec
op	70:13	0:0	4	->
water	70:15	0:0	4	width
op	70:21	0:0	4	=
water	70:23	0:0	4	fmt
op	70:26	0:0	4	->
water	70:28	0:0	4	video
op	70:33	0:0	4	.
water	70:34	0:0	4	i_visible_width
water	70:49	0:0	4	;
water	71:8	0:0	4	codec
op	71:13	0:0	4	->
water	71:15	0:0	4	height
op	71:22	0:0	4	=
water	71:24	0:0	4	fmt
op	71:27	0:0	4	->
water	71:29	0:0	4	video
op	71:34	0:0	4	.
water	71:35	0:0	4	i_visible_height
water	71:51	0:0	4	;
call	72:8	75:69	4	av_reduce
arg	72:19	72:50	5	&codec->sample_aspect_ratio.num
op	72:19	0:0	6	&
water	72:20	0:0	6	codec
op	72:25	0:0	6	->
water	72:27	0:0	6	sample_aspect_ratio
op	72:46	0:0	6	.
water	72:47	0:0	6	num
arg	73:19	73:50	5	&codec->sample_aspect_ratio.den
op	73:19	0:0	6	&
water	73:20	0:0	6	codec
op	73:25	0:0	6	->
water	73:27	0:0	6	sample_aspect_ratio
op	73:46	0:0	6	.
water	73:47	0:0	6	den
arg	74:19	74:39	5	fmt->video.i_sar_num
water	74:19	0:0	6	fmt
op	74:22	0:0	6	->
water	74:24	0:0	6	video
op	74:29	0:0	6	.
water	74:30	0:0	6	i_sar_num
arg	75:19	75:39	5	fmt->video.i_sar_den
water	75:19	0:0	6	fmt
op	75:22	0:0	6	->
water	75:24	0:0	6	video
op	75:29	0:0	6	.
water	75:30	0:0	6	i_sar_den
arg	75:41	75:69	5	1<<30
water	75:41	0:0	6	1
op	75:43	0:0	6	<<
water	75:46	0:0	6	30
water	75:70	0:0	4	;
call	76:8	77:58	4	msg_Dbg
arg	76:16	76:21	5	p_mux
water	76:16	0:0	6	p_mux
arg	76:23	76:58	5	"Muxing aspect ratio will be %d/%d"
water	76:23	0:0	6	"Muxing aspect ratio will be %d/%d"
arg	77:16	77:36	5	fmt->video.i_sar_num
water	77:16	0:0	6	fmt
op	77:19	0:0	6	->
water	77:21	0:0	6	video
op	77:26	0:0	6	.
water	77:27	0:0	6	i_sar_num
arg	77:38	77:58	5	fmt->video.i_sar_den
water	77:38	0:0	6	fmt
op	77:41	0:0	6	->
water	77:43	0:0	6	video
op	77:48	0:0	6	.
water	77:49	0:0	6	i_sar_den
water	77:59	0:0	4	;
water	78:8	0:0	4	stream
op	78:14	0:0	4	->
water	78:16	0:0	4	sample_aspect_ratio
op	78:35	0:0	4	.
water	78:36	0:0	4	den
op	78:40	0:0	4	=
water	78:42	0:0	4	codec
op	78:47	0:0	4	->
water	78:49	0:0	4	sample_aspect_ratio
op	78:68	0:0	4	.
water	78:69	0:0	4	den
water	78:72	0:0	4	;
water	79:8	0:0	4	stream
op	79:14	0:0	4	->
water	79:16	0:0	4	sample_aspect_ratio
op	79:35	0:0	4	.
water	79:36	0:0	4	num
op	79:40	0:0	4	=
water	79:42	0:0	4	codec
op	79:47	0:0	4	->
water	79:49	0:0	4	sample_aspect_ratio
op	79:68	0:0	4	.
water	79:69	0:0	4	num
water	79:72	0:0	4	;
water	80:8	0:0	4	stream
op	80:14	0:0	4	->
water	80:16	0:0	4	time_base
op	80:25	0:0	4	.
water	80:26	0:0	4	den
op	80:30	0:0	4	=
water	80:32	0:0	4	fmt
op	80:35	0:0	4	->
water	80:37	0:0	4	video
op	80:42	0:0	4	.
water	80:43	0:0	4	i_frame_rate
water	80:55	0:0	4	;
water	81:8	0:0	4	stream
op	81:14	0:0	4	->
water	81:16	0:0	4	time_base
op	81:25	0:0	4	.
water	81:26	0:0	4	num
op	81:30	0:0	4	=
water	81:32	0:0	4	fmt
op	81:35	0:0	4	->
water	81:37	0:0	4	video
op	81:42	0:0	4	.
water	81:43	0:0	4	i_frame_rate_base
water	81:60	0:0	4	;
if	82:8	85:8	4	(fmt -> i_bitrate == 0)
cond	82:12	82:30	5	fmt -> i_bitrate == 0
water	82:12	0:0	6	fmt
op	82:15	0:0	6	->
water	82:17	0:0	6	i_bitrate
op	82:27	0:0	6	==
water	82:30	0:0	6	0
stmts	82:33	85:8	5	
water	82:33	0:0	6	{
call	83:12	83:68	6	msg_Warn
arg	83:22	83:27	7	p_mux
water	83:22	0:0	8	p_mux
arg	83:29	83:68	7	"Missing video bitrate, assuming 512k"
water	83:29	0:0	8	"Missing video bitrate, assuming 512k"
water	83:69	0:0	6	;
water	84:12	0:0	6	fmt
op	84:15	0:0	6	->
water	84:17	0:0	6	i_bitrate
op	84:27	0:0	6	=
water	84:29	0:0	6	512000
water	84:35	0:0	6	;
water	85:8	0:0	6	}
else	85:10	86:79	4
stmts	86:12	86:79	5	
call	86:12	86:78	6	msg_Dbg
arg	86:21	86:26	7	p_mux
water	86:21	0:0	8	p_mux
arg	86:28	86:61	7	"Muxing video bitrate will be %d"
water	86:28	0:0	8	"Muxing video bitrate will be %d"
arg	86:63	86:78	7	fmt->i_bitrate
water	86:63	0:0	8	fmt
op	86:66	0:0	8	->
water	86:68	0:0	8	i_bitrate
water	86:79	0:0	6	;
break	87:8	87:13	4	
water	88:4	0:0	4	}
water	89:4	0:0	2	codec
op	89:9	0:0	2	->
water	89:11	0:0	2	bit_rate
op	89:20	0:0	2	=
water	89:22	0:0	2	fmt
op	89:25	0:0	2	->
water	89:27	0:0	2	i_bitrate
water	89:36	0:0	2	;
water	90:4	0:0	2	codec
op	90:9	0:0	2	->
water	90:11	0:0	2	codec_tag
op	90:21	0:0	2	=
call	90:23	90:83	2	av_codec_get_tag
arg	90:41	90:70	3	p_sys->oc->oformat->codec_tag
water	90:41	0:0	4	p_sys
op	90:46	0:0	4	->
water	90:48	0:0	4	oc
op	90:50	0:0	4	->
water	90:52	0:0	4	oformat
op	90:59	0:0	4	->
water	90:61	0:0	4	codec_tag
arg	90:72	90:83	3	i_codec_id
water	90:72	0:0	4	i_codec_id
water	90:84	0:0	2	;
if	91:4	95:4	2	(! codec -> codec_tag && i_codec_id == AV_CODEC_ID_MP2)
cond	91:8	91:43	3	! codec -> codec_tag && i_codec_id == AV_CODEC_ID_MP2
op	91:8	0:0	4	!
water	91:9	0:0	4	codec
op	91:14	0:0	4	->
water	91:16	0:0	4	codec_tag
op	91:26	0:0	4	&&
water	91:29	0:0	4	i_codec_id
op	91:40	0:0	4	==
water	91:43	0:0	4	AV_CODEC_ID_MP2
stmts	92:4	95:4	3	
water	92:4	0:0	4	{
water	93:8	0:0	4	i_codec_id
op	93:19	0:0	4	=
water	93:21	0:0	4	AV_CODEC_ID_MP3
water	93:36	0:0	4	;
water	94:8	0:0	4	codec
op	94:13	0:0	4	->
water	94:15	0:0	4	codec_tag
op	94:25	0:0	4	=
call	94:27	94:87	4	av_codec_get_tag
arg	94:45	94:74	5	p_sys->oc->oformat->codec_tag
water	94:45	0:0	6	p_sys
op	94:50	0:0	6	->
water	94:52	0:0	6	oc
op	94:54	0:0	6	->
water	94:56	0:0	6	oformat
op	94:63	0:0	6	->
water	94:65	0:0	6	codec_tag
arg	94:76	94:87	5	i_codec_id
water	94:76	0:0	6	i_codec_id
water	94:88	0:0	4	;
water	95:4	0:0	4	}
water	96:4	0:0	2	codec
op	96:9	0:0	2	->
water	96:11	0:0	2	codec_id
op	96:20	0:0	2	=
water	96:22	0:0	2	i_codec_id
water	96:32	0:0	2	;
if	97:4	111:4	2	(fmt -> i_extra)
cond	97:8	97:13	3	fmt -> i_extra
water	97:8	0:0	4	fmt
op	97:11	0:0	4	->
water	97:13	0:0	4	i_extra
stmts	98:4	111:4	3	
water	98:4	0:0	4	{
if	99:8	104:8	4	(fmt -> i_codec == VLC_CODEC_OPUS)
cond	99:12	99:28	5	fmt -> i_codec == VLC_CODEC_OPUS
water	99:12	0:0	6	fmt
op	99:15	0:0	6	->
water	99:17	0:0	6	i_codec
op	99:25	0:0	6	==
water	99:28	0:0	6	VLC_CODEC_OPUS
stmts	100:8	104:8	5	
water	100:8	0:0	6	{
water	101:12	0:0	6	codec
op	101:17	0:0	6	->
water	101:19	0:0	6	extradata_size
op	101:34	0:0	6	=
water	101:36	0:0	6	opus_size
op	101:45	0:0	6	[
water	101:46	0:0	6	0
op	101:47	0:0	6	]
water	101:48	0:0	6	;
water	102:12	0:0	6	codec
op	102:17	0:0	6	->
water	102:19	0:0	6	extradata
op	102:29	0:0	6	=
call	102:31	102:55	6	av_malloc
arg	102:42	102:55	7	opus_size[0]
water	102:42	0:0	8	opus_size
op	102:51	0:0	8	[
water	102:52	0:0	8	0
op	102:53	0:0	8	]
water	102:56	0:0	6	;
call	103:12	103:67	6	memcpy
arg	103:20	103:36	7	codec->extradata
water	103:20	0:0	8	codec
op	103:25	0:0	8	->
water	103:27	0:0	8	extradata
arg	103:38	103:52	7	opus_packet[0]
water	103:38	0:0	8	opus_packet
op	103:49	0:0	8	[
water	103:50	0:0	8	0
op	103:51	0:0	8	]
arg	103:54	103:67	7	opus_size[0]
water	103:54	0:0	8	opus_size
op	103:63	0:0	8	[
water	103:64	0:0	8	0
op	103:65	0:0	8	]
water	103:68	0:0	6	;
water	104:8	0:0	6	}
else	105:8	110:8	4
stmts	106:8	110:8	5	
water	106:8	0:0	6	{
water	107:12	0:0	6	codec
op	107:17	0:0	6	->
water	107:19	0:0	6	extradata_size
op	107:34	0:0	6	=
water	107:36	0:0	6	fmt
op	107:39	0:0	6	->
water	107:41	0:0	6	i_extra
water	107:48	0:0	6	;
water	108:12	0:0	6	codec
op	108:17	0:0	6	->
water	108:19	0:0	6	extradata
op	108:29	0:0	6	=
call	108:31	108:55	6	av_malloc
arg	108:42	108:55	7	fmt->i_extra
water	108:42	0:0	8	fmt
op	108:45	0:0	8	->
water	108:47	0:0	8	i_extra
water	108:56	0:0	6	;
call	109:12	109:65	6	memcpy
arg	109:20	109:36	7	codec->extradata
water	109:20	0:0	8	codec
op	109:25	0:0	8	->
water	109:27	0:0	8	extradata
arg	109:38	109:50	7	fmt->p_extra
water	109:38	0:0	8	fmt
op	109:41	0:0	8	->
water	109:43	0:0	8	p_extra
arg	109:52	109:65	7	fmt->i_extra
water	109:52	0:0	8	fmt
op	109:55	0:0	8	->
water	109:57	0:0	8	i_extra
water	109:66	0:0	6	;
water	110:8	0:0	6	}
water	111:4	0:0	4	}
return	112:4	112:22	2	VLC_SUCCESS
water	112:11	0:0	3	VLC_SUCCESS
