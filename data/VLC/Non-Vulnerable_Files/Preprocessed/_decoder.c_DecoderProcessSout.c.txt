func	2:0	47:0	0	static void	DecoderProcessSout
params	2:30	0:0	1	
param	2:32	2:48	2	decoder_t *	p_dec
param	2:50	2:67	2	block_t *	p_block
stmnts	0:0	46:4	1	
decl	4:4	4:72	2	decoder_owner_sys_t	*p_owner
op	4:33	0:0	2	=
water	4:35	0:0	2	(
water	4:36	0:0	2	decoder_owner_sys_t
op	4:56	0:0	2	*
water	4:57	0:0	2	)
water	4:58	0:0	2	p_dec
op	4:63	0:0	2	->
water	4:65	0:0	2	p_owner
decl	5:4	5:25	2	block_t	*p_sout_block
while	6:4	46:4	2	(( p_sout_block =p_dec -> pf_packetize (p_dec ,p_block ? & p_block : NULL ) ))
cond	6:11	7:73	3	( p_sout_block =p_dec -> pf_packetize (p_dec ,p_block ? & p_block : NULL ) )
water	6:11	0:0	4	(
water	6:13	0:0	4	p_sout_block
op	6:26	0:0	4	=
call	7:17	7:71	4	p_dec->pf_packetize
arg	7:38	7:43	5	p_dec
water	7:38	0:0	6	p_dec
arg	7:45	7:71	5	p_block?&p_block:NULL
water	7:45	0:0	6	p_block
water	7:53	0:0	6	?
op	7:55	0:0	6	&
water	7:56	0:0	6	p_block
water	7:64	0:0	6	:
water	7:66	0:0	6	NULL
water	7:73	0:0	4	)
stmts	8:4	46:4	3	
water	8:4	0:0	4	{
if	9:8	31:8	4	(! p_owner -> p_sout_input)
cond	9:12	9:22	5	! p_owner -> p_sout_input
op	9:12	0:0	6	!
water	9:13	0:0	6	p_owner
op	9:20	0:0	6	->
water	9:22	0:0	6	p_sout_input
stmts	10:8	31:8	5	
water	10:8	0:0	6	{
call	11:12	11:60	6	es_format_Copy
arg	11:28	11:42	7	&p_owner->sout
op	11:28	0:0	8	&
water	11:29	0:0	8	p_owner
op	11:36	0:0	8	->
water	11:38	0:0	8	sout
arg	11:44	11:60	7	&p_dec->fmt_out
op	11:44	0:0	8	&
water	11:45	0:0	8	p_dec
op	11:50	0:0	8	->
water	11:52	0:0	8	fmt_out
water	11:61	0:0	6	;
water	12:12	0:0	6	p_owner
op	12:19	0:0	6	->
water	12:21	0:0	6	sout
op	12:25	0:0	6	.
water	12:26	0:0	6	i_group
op	12:34	0:0	6	=
water	12:36	0:0	6	p_dec
op	12:41	0:0	6	->
water	12:43	0:0	6	fmt_in
op	12:49	0:0	6	.
water	12:50	0:0	6	i_group
water	12:57	0:0	6	;
water	13:12	0:0	6	p_owner
op	13:19	0:0	6	->
water	13:21	0:0	6	sout
op	13:25	0:0	6	.
water	13:26	0:0	6	i_id
op	13:31	0:0	6	=
water	13:33	0:0	6	p_dec
op	13:38	0:0	6	->
water	13:40	0:0	6	fmt_in
op	13:46	0:0	6	.
water	13:47	0:0	6	i_id
water	13:51	0:0	6	;
if	14:12	19:12	6	(p_dec -> fmt_in . psz_language)
cond	14:16	14:30	7	p_dec -> fmt_in . psz_language
water	14:16	0:0	8	p_dec
op	14:21	0:0	8	->
water	14:23	0:0	8	fmt_in
op	14:29	0:0	8	.
water	14:30	0:0	8	psz_language
stmts	15:12	19:12	7	
water	15:12	0:0	8	{
call	16:16	16:49	8	free
arg	16:22	16:49	9	p_owner->sout.psz_language
water	16:22	0:0	10	p_owner
op	16:29	0:0	10	->
water	16:31	0:0	10	sout
op	16:35	0:0	10	.
water	16:36	0:0	10	psz_language
water	16:50	0:0	8	;
water	17:16	0:0	8	p_owner
op	17:23	0:0	8	->
water	17:25	0:0	8	sout
op	17:29	0:0	8	.
water	17:30	0:0	8	psz_language
op	17:43	0:0	8	=
call	18:20	18:55	8	strdup
arg	18:28	18:55	9	p_dec->fmt_in.psz_language
water	18:28	0:0	10	p_dec
op	18:33	0:0	10	->
water	18:35	0:0	10	fmt_in
op	18:41	0:0	10	.
water	18:42	0:0	10	psz_language
water	18:56	0:0	8	;
water	19:12	0:0	8	}
water	20:12	0:0	6	p_owner
op	20:19	0:0	6	->
water	20:21	0:0	6	p_sout_input
op	20:34	0:0	6	=
call	21:16	22:46	6	sout_InputNew
arg	21:31	21:46	7	p_owner->p_sout
water	21:31	0:0	8	p_owner
op	21:38	0:0	8	->
water	21:40	0:0	8	p_sout
arg	22:31	22:46	7	&p_owner->sout
op	22:31	0:0	8	&
water	22:32	0:0	8	p_owner
op	22:39	0:0	8	->
water	22:41	0:0	8	sout
water	22:47	0:0	6	;
if	23:12	30:12	6	(p_owner -> p_sout_input == NULL)
cond	23:16	23:41	7	p_owner -> p_sout_input == NULL
water	23:16	0:0	8	p_owner
op	23:23	0:0	8	->
water	23:25	0:0	8	p_sout_input
op	23:38	0:0	8	==
water	23:41	0:0	8	NULL
stmts	24:12	30:12	7	
water	24:12	0:0	8	{
call	25:16	26:56	8	msg_Err
arg	25:25	25:30	9	p_dec
water	25:25	0:0	10	p_dec
arg	25:32	25:73	9	"cannot create packetizer output (%4.4s)"
water	25:32	0:0	10	"cannot create packetizer output (%4.4s)"
arg	26:25	26:56	9	(char*)&p_owner->sout.i_codec
water	26:25	0:0	10	(
water	26:26	0:0	10	char
op	26:31	0:0	10	*
water	26:32	0:0	10	)
op	26:33	0:0	10	&
water	26:34	0:0	10	p_owner
op	26:41	0:0	10	->
water	26:43	0:0	10	sout
op	26:47	0:0	10	.
water	26:48	0:0	10	i_codec
water	26:57	0:0	8	;
water	27:16	0:0	8	p_dec
op	27:21	0:0	8	->
water	27:23	0:0	8	b_error
op	27:31	0:0	8	=
water	27:33	0:0	8	true
water	27:37	0:0	8	;
call	28:16	28:47	8	block_ChainRelease
arg	28:35	28:47	9	p_sout_block
water	28:35	0:0	10	p_sout_block
water	28:48	0:0	8	;
break	29:16	29:21	8	
water	30:12	0:0	8	}
water	31:8	0:0	6	}
while	32:8	45:8	4	(p_sout_block)
cond	32:15	32:15	5	p_sout_block
water	32:15	0:0	6	p_sout_block
stmts	33:8	45:8	5	
water	33:8	0:0	6	{
decl	34:12	34:50	6	block_t	*p_next
op	34:28	0:0	6	=
water	34:30	0:0	6	p_sout_block
op	34:42	0:0	6	->
water	34:44	0:0	6	p_next
water	35:12	0:0	6	p_sout_block
op	35:24	0:0	6	->
water	35:26	0:0	6	p_next
op	35:33	0:0	6	=
water	35:35	0:0	6	NULL
water	35:39	0:0	6	;
if	36:12	43:12	6	(DecoderPlaySout (p_dec ,p_sout_block ) == VLC_EGENERIC)
cond	36:16	36:58	7	DecoderPlaySout (p_dec ,p_sout_block ) == VLC_EGENERIC
call	36:16	36:53	8	DecoderPlaySout
arg	36:33	36:38	9	p_dec
water	36:33	0:0	10	p_dec
arg	36:40	36:53	9	p_sout_block
water	36:40	0:0	10	p_sout_block
op	36:55	0:0	8	==
water	36:58	0:0	8	VLC_EGENERIC
stmts	37:12	43:12	7	
water	37:12	0:0	8	{
call	38:16	38:74	8	msg_Err
arg	38:25	38:30	9	p_dec
water	38:25	0:0	10	p_dec
arg	38:32	38:74	9	"cannot continue streaming due to errors"
water	38:32	0:0	10	"cannot continue streaming due to errors"
water	38:75	0:0	8	;
water	39:16	0:0	8	p_dec
op	39:21	0:0	8	->
water	39:23	0:0	8	b_error
op	39:31	0:0	8	=
water	39:33	0:0	8	true
water	39:37	0:0	8	;
call	41:16	41:43	8	block_ChainRelease
arg	41:36	41:43	9	p_next
water	41:36	0:0	10	p_next
water	41:44	0:0	8	;
return	42:16	42:22	8	
water	43:12	0:0	8	}
water	44:12	0:0	6	p_sout_block
op	44:25	0:0	6	=
water	44:27	0:0	6	p_next
water	44:33	0:0	6	;
water	45:8	0:0	6	}
water	46:4	0:0	4	}
