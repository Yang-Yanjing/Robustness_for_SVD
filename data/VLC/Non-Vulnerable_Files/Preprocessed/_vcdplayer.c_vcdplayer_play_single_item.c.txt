func	1:0	64:0	0	static bool	vcdplayer_play_single_item
params	2:26	0:0	1	
param	2:28	2:47	2	access_t *	p_access
param	2:49	2:72	2	vcdinfo_itemid_t	itemid
stmnts	0:0	63:13	1	
decl	4:2	4:61	2	vcdplayer_t	*p_vcdplayer
op	4:29	0:0	2	=
water	4:31	0:0	2	(
water	4:32	0:0	2	vcdplayer_t
op	4:44	0:0	2	*
water	4:45	0:0	2	)
water	4:46	0:0	2	p_access
op	4:54	0:0	2	->
water	4:56	0:0	2	p_sys
decl	5:2	5:45	2	vcdinfo_obj_t	*p_vcdinfo
op	5:27	0:0	2	=
water	5:29	0:0	2	p_vcdplayer
op	5:40	0:0	2	->
water	5:42	0:0	2	vcd
call	6:2	7:35	2	dbg_print
arg	6:12	6:26	3	INPUT_DBG_CALL
water	6:12	0:0	4	INPUT_DBG_CALL
arg	6:28	6:68	3	"called itemid.num: %d, itemid.type: %d"
water	6:28	0:0	4	"called itemid.num: %d, itemid.type: %d"
arg	7:12	7:22	3	itemid.num
water	7:12	0:0	4	itemid
op	7:18	0:0	4	.
water	7:19	0:0	4	num
arg	7:24	7:35	3	itemid.type
water	7:24	0:0	4	itemid
op	7:30	0:0	4	.
water	7:31	0:0	4	type
water	7:36	0:0	2	;
water	8:2	0:0	2	p_vcdplayer
op	8:13	0:0	2	->
water	8:15	0:0	2	i_still
op	8:23	0:0	2	=
water	8:25	0:0	2	0
water	8:26	0:0	2	;
switch	9:2	57:2	2	(itemid . type)
cond	9:10	9:17	3	itemid . type
water	9:10	0:0	4	itemid
op	9:16	0:0	4	.
water	9:17	0:0	4	type
stmts	9:23	57:2	3	
water	9:23	0:0	4	{
label	10:2	10:32	4	case VCDINFO_ITEM_TYPE_SEGMENT :
water	11:4	0:0	4	{
decl	12:6	13:55	4	vcdinfo_video_segment_type_t	segtype
op	13:8	0:0	4	=
call	13:10	13:54	5	vcdinfo_get_video_type
arg	13:33	13:42	6	p_vcdinfo
water	13:33	0:0	7	p_vcdinfo
arg	13:44	13:54	6	itemid.num
water	13:44	0:0	7	itemid
op	13:50	0:0	7	.
water	13:51	0:0	7	num
decl	14:6	14:59	4	segnum_t	i_segs
op	14:22	0:0	4	=
call	14:24	14:58	5	vcdinfo_get_num_segments
arg	14:49	14:58	6	p_vcdinfo
water	14:49	0:0	7	p_vcdinfo
call	15:6	17:41	4	dbg_print
arg	15:16	15:29	5	INPUT_DBG_PBC
water	15:16	0:0	6	INPUT_DBG_PBC
arg	15:31	15:56	5	"%s (%d), itemid.num: %d"
water	15:31	0:0	6	"%s (%d), itemid.num: %d"
arg	16:16	16:61	5	vcdinfo_video_type2str(p_vcdinfo,itemid.num)
call	16:16	16:60	6	vcdinfo_video_type2str
arg	16:39	16:48	7	p_vcdinfo
water	16:39	0:0	8	p_vcdinfo
arg	16:50	16:60	7	itemid.num
water	16:50	0:0	8	itemid
op	16:56	0:0	8	.
water	16:57	0:0	8	num
arg	17:16	17:29	5	(int)segtype
water	17:16	0:0	6	(
water	17:17	0:0	6	int
water	17:20	0:0	6	)
water	17:22	0:0	6	segtype
arg	17:31	17:41	5	itemid.num
water	17:31	0:0	6	itemid
op	17:37	0:0	6	.
water	17:38	0:0	6	num
water	17:42	0:0	4	;
if	18:6	18:44	4	(itemid . num >= i_segs)
cond	18:10	18:24	5	itemid . num >= i_segs
water	18:10	0:0	6	itemid
op	18:16	0:0	6	.
water	18:17	0:0	6	num
op	18:21	0:0	6	>=
water	18:24	0:0	6	i_segs
stmts	18:32	18:44	5	
return	18:32	18:44	6	false
water	18:39	0:0	7	false
call	19:6	19:49	4	_vcdplayer_set_segment
arg	19:29	19:37	5	p_access
water	19:29	0:0	6	p_access
arg	19:39	19:49	5	itemid.num
water	19:39	0:0	6	itemid
op	19:45	0:0	6	.
water	19:46	0:0	6	num
water	19:50	0:0	4	;
switch	20:6	30:8	4	(segtype)
cond	20:14	20:14	5	segtype
water	20:14	0:0	6	segtype
stmts	21:8	30:8	5	
water	21:8	0:0	6	{
label	22:8	22:43	6	case VCDINFO_FILES_VIDEO_NTSC_STILL :
label	23:8	23:44	6	case VCDINFO_FILES_VIDEO_NTSC_STILL2 :
label	24:8	24:42	6	case VCDINFO_FILES_VIDEO_PAL_STILL :
label	25:8	25:43	6	case VCDINFO_FILES_VIDEO_PAL_STILL2 :
water	26:10	0:0	6	p_vcdplayer
op	26:21	0:0	6	->
water	26:23	0:0	6	i_still
op	26:31	0:0	6	=
water	26:33	0:0	6	STILL_READING
water	26:46	0:0	6	;
break	27:10	27:15	6	
label	28:8	28:15	6	default :
water	29:10	0:0	6	p_vcdplayer
op	29:21	0:0	6	->
water	29:23	0:0	6	i_still
op	29:31	0:0	6	=
water	29:33	0:0	6	0
water	29:34	0:0	6	;
water	30:8	0:0	6	}
break	31:6	31:11	4	
water	32:4	0:0	4	}
label	33:2	33:30	4	case VCDINFO_ITEM_TYPE_TRACK :
call	34:4	34:51	4	dbg_print
arg	34:14	34:27	5	INPUT_DBG_PBC
water	34:14	0:0	6	INPUT_DBG_PBC
arg	34:29	34:39	5	"track %d"
water	34:29	0:0	6	"track %d"
arg	34:41	34:51	5	itemid.num
water	34:41	0:0	6	itemid
op	34:47	0:0	6	.
water	34:48	0:0	6	num
water	34:52	0:0	4	;
if	35:4	35:74	4	(itemid . num < 1 || itemid . num > p_vcdplayer -> i_tracks)
cond	35:8	35:52	5	itemid . num < 1 || itemid . num > p_vcdplayer -> i_tracks
water	35:8	0:0	6	itemid
op	35:14	0:0	6	.
water	35:15	0:0	6	num
op	35:19	0:0	6	<
water	35:21	0:0	6	1
op	35:23	0:0	6	||
water	35:26	0:0	6	itemid
op	35:32	0:0	6	.
water	35:33	0:0	6	num
op	35:37	0:0	6	>
water	35:39	0:0	6	p_vcdplayer
op	35:50	0:0	6	->
water	35:52	0:0	6	i_tracks
stmts	35:62	35:74	5	
return	35:62	35:74	6	false
water	35:69	0:0	7	false
call	36:4	36:45	4	_vcdplayer_set_track
arg	36:25	36:33	5	p_access
water	36:25	0:0	6	p_access
arg	36:35	36:45	5	itemid.num
water	36:35	0:0	6	itemid
op	36:41	0:0	6	.
water	36:42	0:0	6	num
water	36:46	0:0	4	;
break	37:4	37:9	4	
label	38:2	38:30	4	case VCDINFO_ITEM_TYPE_ENTRY :
water	39:4	0:0	4	{
decl	40:6	40:65	4	unsigned int	i_entries
op	40:29	0:0	4	=
call	40:31	40:64	5	vcdinfo_get_num_entries
arg	40:55	40:64	6	p_vcdinfo
water	40:55	0:0	7	p_vcdinfo
call	41:6	41:53	4	dbg_print
arg	41:16	41:29	5	INPUT_DBG_PBC
water	41:16	0:0	6	INPUT_DBG_PBC
arg	41:31	41:41	5	"entry %d"
water	41:31	0:0	6	"entry %d"
arg	41:43	41:53	5	itemid.num
water	41:43	0:0	6	itemid
op	41:49	0:0	6	.
water	41:50	0:0	6	num
water	41:54	0:0	4	;
if	42:6	42:47	4	(itemid . num >= i_entries)
cond	42:10	42:24	5	itemid . num >= i_entries
water	42:10	0:0	6	itemid
op	42:16	0:0	6	.
water	42:17	0:0	6	num
op	42:21	0:0	6	>=
water	42:24	0:0	6	i_entries
stmts	42:35	42:47	5	
return	42:35	42:47	6	false
water	42:42	0:0	7	false
call	43:6	43:47	4	_vcdplayer_set_entry
arg	43:27	43:35	5	p_access
water	43:27	0:0	6	p_access
arg	43:37	43:47	5	itemid.num
water	43:37	0:0	6	itemid
op	43:43	0:0	6	.
water	43:44	0:0	6	num
water	43:48	0:0	4	;
break	44:6	44:11	4	
water	45:4	0:0	4	}
label	46:2	46:28	4	case VCDINFO_ITEM_TYPE_LID :
call	47:4	47:59	4	LOG_ERR
arg	47:12	47:16	5	"%s"
water	47:12	0:0	6	"%s"
arg	47:18	47:59	5	"Should have converted p_vcdplayer above"
water	47:18	0:0	6	"Should have converted p_vcdplayer above"
water	47:60	0:0	4	;
return	48:4	48:16	4	false
water	48:11	0:0	5	false
break	49:4	49:9	4	
label	50:2	50:33	4	case VCDINFO_ITEM_TYPE_NOTFOUND :
call	51:4	51:43	4	dbg_print
arg	51:14	51:27	5	INPUT_DBG_PBC
water	51:14	0:0	6	INPUT_DBG_PBC
arg	51:29	51:43	5	"play nothing"
water	51:29	0:0	6	"play nothing"
water	51:44	0:0	4	;
water	52:4	0:0	4	p_vcdplayer
op	52:15	0:0	4	->
water	52:17	0:0	4	i_lsn
op	52:23	0:0	4	=
water	52:25	0:0	4	p_vcdplayer
op	52:36	0:0	4	->
water	52:38	0:0	4	end_lsn
water	52:45	0:0	4	;
return	53:4	53:16	4	false
water	53:11	0:0	5	false
label	54:2	54:9	4	default :
call	55:4	55:56	4	LOG_ERR
arg	55:12	55:43	5	"item type %d not implemented."
water	55:12	0:0	6	"item type %d not implemented."
arg	55:45	55:56	5	itemid.type
water	55:45	0:0	6	itemid
op	55:51	0:0	6	.
water	55:52	0:0	6	type
water	55:57	0:0	4	;
return	56:4	56:16	4	false
water	56:11	0:0	5	false
water	57:2	0:0	4	}
water	58:2	0:0	2	p_vcdplayer
op	58:13	0:0	2	->
water	58:15	0:0	2	play_item
op	58:25	0:0	2	=
water	58:27	0:0	2	itemid
water	58:33	0:0	2	;
return	63:2	63:13	2	true
water	63:9	0:0	3	true
