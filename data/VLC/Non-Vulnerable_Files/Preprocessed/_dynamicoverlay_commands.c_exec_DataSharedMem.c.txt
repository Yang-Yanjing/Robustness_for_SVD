func	2:0	119:0	0	static int	exec_DataSharedMem
params	2:29	0:0	1	
param	2:31	2:49	2	filter_t *	p_filter
param	3:31	3:62	2	const commandparams_t *	p_params
param	4:31	4:58	2	commandparams_t *	p_results
stmnts	0:0	117:23	1	
decl	7:4	7:57	2	filter_sys_t	*p_sys
op	7:24	0:0	2	=
water	7:26	0:0	2	(
water	7:27	0:0	2	filter_sys_t
op	7:39	0:0	2	*
water	7:40	0:0	2	)
water	7:42	0:0	2	p_filter
op	7:50	0:0	2	->
water	7:52	0:0	2	p_sys
decl	8:4	8:27	2	struct shmid_ds	shminfo
decl	9:4	9:20	2	overlay_t	*p_ovl
decl	10:4	10:17	2	size_t	i_size
call	11:4	11:24	2	VLC_UNUSED
arg	11:15	11:24	3	p_results
water	11:15	0:0	4	p_results
water	11:25	0:0	2	;
water	12:4	0:0	2	p_ovl
op	12:10	0:0	2	=
call	12:12	12:54	2	ListGet
arg	12:21	12:37	3	&p_sys->overlays
op	12:21	0:0	4	&
water	12:22	0:0	4	p_sys
op	12:27	0:0	4	->
water	12:29	0:0	4	overlays
arg	12:39	12:54	3	p_params->i_id
water	12:39	0:0	4	p_params
op	12:47	0:0	4	->
water	12:49	0:0	4	i_id
water	12:55	0:0	2	;
if	13:4	17:4	2	(p_ovl == NULL)
cond	13:8	13:17	3	p_ovl == NULL
water	13:8	0:0	4	p_ovl
op	13:14	0:0	4	==
water	13:17	0:0	4	NULL
stmts	14:4	17:4	3	
water	14:4	0:0	4	{
call	15:8	15:65	4	msg_Err
arg	15:17	15:25	5	p_filter
water	15:17	0:0	6	p_filter
arg	15:27	15:48	5	"Invalid overlay: %d"
water	15:27	0:0	6	"Invalid overlay: %d"
arg	15:50	15:65	5	p_params->i_id
water	15:50	0:0	6	p_params
op	15:58	0:0	6	->
water	15:60	0:0	6	i_id
water	15:66	0:0	4	;
return	16:8	16:27	4	VLC_EGENERIC
water	16:15	0:0	5	VLC_EGENERIC
water	17:4	0:0	4	}
if	18:4	22:4	2	(shmctl (p_params -> i_shmid ,IPC_STAT ,& shminfo ) == - 1)
cond	18:8	18:60	3	shmctl (p_params -> i_shmid ,IPC_STAT ,& shminfo ) == - 1
call	18:8	18:54	4	shmctl
arg	18:16	18:33	5	p_params->i_shmid
water	18:16	0:0	6	p_params
op	18:24	0:0	6	->
water	18:26	0:0	6	i_shmid
arg	18:35	18:43	5	IPC_STAT
water	18:35	0:0	6	IPC_STAT
arg	18:45	18:54	5	&shminfo
op	18:45	0:0	6	&
water	18:46	0:0	6	shminfo
op	18:56	0:0	4	==
op	18:59	0:0	4	-
water	18:60	0:0	4	1
stmts	19:4	22:4	3	
water	19:4	0:0	4	{
call	20:8	20:60	4	msg_Err
arg	20:17	20:25	5	p_filter
water	20:17	0:0	6	p_filter
arg	20:27	20:60	5	"Unable to access shared memory"
water	20:27	0:0	6	"Unable to access shared memory"
water	20:61	0:0	4	;
return	21:8	21:27	4	VLC_EGENERIC
water	21:15	0:0	5	VLC_EGENERIC
water	22:4	0:0	4	}
water	23:4	0:0	2	i_size
op	23:11	0:0	2	=
water	23:13	0:0	2	shminfo
op	23:20	0:0	2	.
water	23:21	0:0	2	shm_segsz
water	23:30	0:0	2	;
if	24:4	60:4	2	(p_params -> fourcc == VLC_CODEC_TEXT)
cond	24:8	24:28	3	p_params -> fourcc == VLC_CODEC_TEXT
water	24:8	0:0	4	p_params
op	24:16	0:0	4	->
water	24:18	0:0	4	fourcc
op	24:25	0:0	4	==
water	24:28	0:0	4	VLC_CODEC_TEXT
stmts	25:4	60:4	3	
water	25:4	0:0	4	{
decl	26:8	26:20	4	char	*p_data
if	27:8	34:8	4	(( p_params -> i_height != 1 ) || ( p_params -> i_width < 1 ))
cond	27:12	27:63	5	( p_params -> i_height != 1 ) || ( p_params -> i_width < 1 )
water	27:12	0:0	6	(
water	27:13	0:0	6	p_params
op	27:21	0:0	6	->
water	27:23	0:0	6	i_height
op	27:32	0:0	6	!=
water	27:35	0:0	6	1
water	27:36	0:0	6	)
op	27:38	0:0	6	||
water	27:41	0:0	6	(
water	27:42	0:0	6	p_params
op	27:50	0:0	6	->
water	27:52	0:0	6	i_width
op	27:60	0:0	6	<
water	27:62	0:0	6	1
water	27:63	0:0	6	)
stmts	28:8	34:8	5	
water	28:8	0:0	6	{
call	29:12	32:53	6	msg_Err
arg	29:21	29:29	7	p_filter
water	29:21	0:0	8	p_filter
arg	30:21	32:53	7	"Invalid width and/or height. when specifying text height ""must be 1 and width the number of bytes in the string, ""including the null terminator"
water	30:21	0:0	8	"Invalid width and/or height. when specifying text height "
water	31:21	0:0	8	"must be 1 and width the number of bytes in the string, "
water	32:21	0:0	8	"including the null terminator"
water	32:54	0:0	6	;
return	33:12	33:31	6	VLC_EGENERIC
water	33:19	0:0	7	VLC_EGENERIC
water	34:8	0:0	6	}
if	35:8	41:8	4	(( size_t ) p_params -> i_width > i_size)
cond	35:12	35:40	5	( size_t ) p_params -> i_width > i_size
water	35:12	0:0	6	(
water	35:13	0:0	6	size_t
water	35:19	0:0	6	)
water	35:20	0:0	6	p_params
op	35:28	0:0	6	->
water	35:30	0:0	6	i_width
op	35:38	0:0	6	>
water	35:40	0:0	6	i_size
stmts	36:8	41:8	5	
water	36:8	0:0	6	{
call	37:12	39:47	6	msg_Err
arg	37:21	37:29	7	p_filter
water	37:21	0:0	8	p_filter
arg	38:21	38:75	7	"Insufficient data in shared memory. need %d, got %zu"
water	38:21	0:0	8	"Insufficient data in shared memory. need %d, got %zu"
arg	39:21	39:38	7	p_params->i_width
water	39:21	0:0	8	p_params
op	39:29	0:0	8	->
water	39:31	0:0	8	i_width
arg	39:40	39:47	7	i_size
water	39:40	0:0	8	i_size
water	39:48	0:0	6	;
return	40:12	40:31	6	VLC_EGENERIC
water	40:19	0:0	7	VLC_EGENERIC
water	41:8	0:0	6	}
water	42:8	0:0	4	p_ovl
op	42:13	0:0	4	->
water	42:15	0:0	4	data
op	42:19	0:0	4	.
water	42:20	0:0	4	p_text
op	42:27	0:0	4	=
call	42:29	42:55	4	malloc
arg	42:37	42:55	5	p_params->i_width
water	42:37	0:0	6	p_params
op	42:45	0:0	6	->
water	42:47	0:0	6	i_width
water	42:56	0:0	4	;
if	43:8	47:8	4	(p_ovl -> data . p_text == NULL)
cond	43:12	43:34	5	p_ovl -> data . p_text == NULL
water	43:12	0:0	6	p_ovl
op	43:17	0:0	6	->
water	43:19	0:0	6	data
op	43:23	0:0	6	.
water	43:24	0:0	6	p_text
op	43:31	0:0	6	==
water	43:34	0:0	6	NULL
stmts	44:8	47:8	5	
water	44:8	0:0	6	{
call	45:12	45:67	6	msg_Err
arg	45:21	45:29	7	p_filter
water	45:21	0:0	8	p_filter
arg	45:31	45:67	7	"Unable to allocate string storage"
water	45:31	0:0	8	"Unable to allocate string storage"
water	45:68	0:0	6	;
return	46:12	46:29	6	VLC_ENOMEM
water	46:19	0:0	7	VLC_ENOMEM
water	47:8	0:0	6	}
call	48:8	49:45	4	video_format_Setup
arg	48:28	48:42	5	&p_ovl->format
op	48:28	0:0	6	&
water	48:29	0:0	6	p_ovl
op	48:34	0:0	6	->
water	48:36	0:0	6	format
arg	48:44	48:58	5	VLC_CODEC_TEXT
water	48:44	0:0	6	VLC_CODEC_TEXT
arg	49:28	49:29	5	0
water	49:28	0:0	6	0
arg	49:31	49:32	5	0
water	49:31	0:0	6	0
arg	49:34	49:35	5	0
water	49:34	0:0	6	0
arg	49:37	49:38	5	0
water	49:37	0:0	6	0
arg	49:40	49:41	5	0
water	49:40	0:0	6	0
arg	49:43	49:45	5	1
water	49:43	0:0	6	1
water	49:46	0:0	4	;
water	50:8	0:0	4	p_data
op	50:15	0:0	4	=
call	50:17	50:60	4	shmat
arg	50:24	50:41	5	p_params->i_shmid
water	50:24	0:0	6	p_params
op	50:32	0:0	6	->
water	50:34	0:0	6	i_shmid
arg	50:43	50:47	5	NULL
water	50:43	0:0	6	NULL
arg	50:49	50:60	5	SHM_RDONLY
water	50:49	0:0	6	SHM_RDONLY
water	50:61	0:0	4	;
if	51:8	57:8	4	(p_data == NULL)
cond	51:12	51:22	5	p_data == NULL
water	51:12	0:0	6	p_data
op	51:19	0:0	6	==
water	51:22	0:0	6	NULL
stmts	52:8	57:8	5	
water	52:8	0:0	6	{
call	53:12	53:67	6	msg_Err
arg	53:21	53:29	7	p_filter
water	53:21	0:0	8	p_filter
arg	53:31	53:67	7	"Unable to attach to shared memory"
water	53:31	0:0	8	"Unable to attach to shared memory"
water	53:68	0:0	6	;
call	54:12	54:37	6	free
arg	54:18	54:37	7	p_ovl->data.p_text
water	54:18	0:0	8	p_ovl
op	54:23	0:0	8	->
water	54:25	0:0	8	data
op	54:29	0:0	8	.
water	54:30	0:0	8	p_text
water	54:38	0:0	6	;
water	55:12	0:0	6	p_ovl
op	55:17	0:0	6	->
water	55:19	0:0	6	data
op	55:23	0:0	6	.
water	55:24	0:0	6	p_text
op	55:31	0:0	6	=
water	55:33	0:0	6	NULL
water	55:37	0:0	6	;
return	56:12	56:29	6	VLC_ENOMEM
water	56:19	0:0	7	VLC_ENOMEM
water	57:8	0:0	6	}
call	58:8	58:62	4	memcpy
arg	58:16	58:34	5	p_ovl->data.p_text
water	58:16	0:0	6	p_ovl
op	58:21	0:0	6	->
water	58:23	0:0	6	data
op	58:27	0:0	6	.
water	58:28	0:0	6	p_text
arg	58:36	58:42	5	p_data
water	58:36	0:0	6	p_data
arg	58:44	58:62	5	p_params->i_width
water	58:44	0:0	6	p_params
op	58:52	0:0	6	->
water	58:54	0:0	6	i_width
water	58:63	0:0	4	;
call	59:8	59:22	4	shmdt
arg	59:15	59:22	5	p_data
water	59:15	0:0	6	p_data
water	59:23	0:0	4	;
water	60:4	0:0	4	}
else	61:4	110:4	2
stmts	62:4	110:4	3	
water	62:4	0:0	4	{
decl	63:8	63:30	4	uint8_t	*p_data
water	63:23	0:0	4	,
decl	63:8	63:30	4	uint8_t	*p_in
decl	64:8	64:31	4	size_t	i_neededsize
op	64:28	0:0	4	=
water	64:30	0:0	4	0
water	65:8	0:0	4	p_ovl
op	65:13	0:0	4	->
water	65:15	0:0	4	data
op	65:19	0:0	4	.
water	65:20	0:0	4	p_pic
op	65:26	0:0	4	=
call	65:28	67:46	4	picture_New
arg	65:41	65:57	5	p_params->fourcc
water	65:41	0:0	6	p_params
op	65:49	0:0	6	->
water	65:51	0:0	6	fourcc
arg	66:41	66:58	5	p_params->i_width
water	66:41	0:0	6	p_params
op	66:49	0:0	6	->
water	66:51	0:0	6	i_width
arg	66:60	66:78	5	p_params->i_height
water	66:60	0:0	6	p_params
op	66:68	0:0	6	->
water	66:70	0:0	6	i_height
arg	67:41	67:42	5	1
water	67:41	0:0	6	1
arg	67:44	67:46	5	1
water	67:44	0:0	6	1
water	67:47	0:0	4	;
if	68:8	69:29	4	(p_ovl -> data . p_pic == NULL)
cond	68:12	68:33	5	p_ovl -> data . p_pic == NULL
water	68:12	0:0	6	p_ovl
op	68:17	0:0	6	->
water	68:19	0:0	6	data
op	68:23	0:0	6	.
water	68:24	0:0	6	p_pic
op	68:30	0:0	6	==
water	68:33	0:0	6	NULL
stmts	69:12	69:29	5	
return	69:12	69:29	6	VLC_ENOMEM
water	69:19	0:0	7	VLC_ENOMEM
water	70:8	0:0	4	p_ovl
op	70:13	0:0	4	->
water	70:15	0:0	4	format
op	70:22	0:0	4	=
water	70:24	0:0	4	p_ovl
op	70:29	0:0	4	->
water	70:31	0:0	4	data
op	70:35	0:0	4	.
water	70:36	0:0	4	p_pic
op	70:41	0:0	4	->
water	70:43	0:0	4	format
water	70:49	0:0	4	;
for	71:8	76:8	4	( size_t i_plane = 0 ;i_plane < ( size_t ) p_ovl -> data . p_pic -> i_planes;++ i_plane)
forinit	0:0	71:31	5	 size_t i_plane = 0 ;
decl	71:13	71:31	6	size_t	i_plane
op	71:28	0:0	6	=
water	71:30	0:0	6	0
cond	71:33	71:70	5	i_plane < ( size_t ) p_ovl -> data . p_pic -> i_planes
water	71:33	0:0	6	i_plane
op	71:41	0:0	6	<
water	71:43	0:0	6	(
water	71:44	0:0	6	size_t
water	71:50	0:0	6	)
water	71:51	0:0	6	p_ovl
op	71:56	0:0	6	->
water	71:58	0:0	6	data
op	71:62	0:0	6	.
water	71:63	0:0	6	p_pic
op	71:68	0:0	6	->
water	71:70	0:0	6	i_planes
forexpr	72:13	72:15	5	++ i_plane
op	72:13	0:0	6	++
water	72:15	0:0	6	i_plane
stmts	73:8	76:8	5	
water	73:8	0:0	6	{
water	74:12	0:0	6	i_neededsize
op	74:25	0:0	6	+=
water	74:28	0:0	6	p_ovl
op	74:33	0:0	6	->
water	74:35	0:0	6	data
op	74:39	0:0	6	.
water	74:40	0:0	6	p_pic
op	74:45	0:0	6	->
water	74:47	0:0	6	p
op	74:48	0:0	6	[
water	74:49	0:0	6	i_plane
op	74:56	0:0	6	]
op	74:57	0:0	6	.
water	74:58	0:0	6	i_visible_lines
op	74:74	0:0	6	*
water	75:28	0:0	6	p_ovl
op	75:33	0:0	6	->
water	75:35	0:0	6	data
op	75:39	0:0	6	.
water	75:40	0:0	6	p_pic
op	75:45	0:0	6	->
water	75:47	0:0	6	p
op	75:48	0:0	6	[
water	75:49	0:0	6	i_plane
op	75:56	0:0	6	]
op	75:57	0:0	6	.
water	75:58	0:0	6	i_visible_pitch
water	75:73	0:0	6	;
water	76:8	0:0	6	}
if	77:8	85:8	4	(i_neededsize > i_size)
cond	77:12	77:27	5	i_neededsize > i_size
water	77:12	0:0	6	i_neededsize
op	77:25	0:0	6	>
water	77:27	0:0	6	i_size
stmts	78:8	85:8	5	
water	78:8	0:0	6	{
call	79:12	81:42	6	msg_Err
arg	79:21	79:29	7	p_filter
water	79:21	0:0	8	p_filter
arg	80:21	80:76	7	"Insufficient data in shared memory. need %zu, got %zu"
water	80:21	0:0	8	"Insufficient data in shared memory. need %zu, got %zu"
arg	81:21	81:33	7	i_neededsize
water	81:21	0:0	8	i_neededsize
arg	81:35	81:42	7	i_size
water	81:35	0:0	8	i_size
water	81:43	0:0	6	;
call	82:12	82:47	6	picture_Release
arg	82:29	82:47	7	p_ovl->data.p_pic
water	82:29	0:0	8	p_ovl
op	82:34	0:0	8	->
water	82:36	0:0	8	data
op	82:40	0:0	8	.
water	82:41	0:0	8	p_pic
water	82:48	0:0	6	;
water	83:12	0:0	6	p_ovl
op	83:17	0:0	6	->
water	83:19	0:0	6	data
op	83:23	0:0	6	.
water	83:24	0:0	6	p_pic
op	83:30	0:0	6	=
water	83:32	0:0	6	NULL
water	83:36	0:0	6	;
return	84:12	84:31	6	VLC_EGENERIC
water	84:19	0:0	7	VLC_EGENERIC
water	85:8	0:0	6	}
water	86:8	0:0	4	p_data
op	86:15	0:0	4	=
call	86:17	86:60	4	shmat
arg	86:24	86:41	5	p_params->i_shmid
water	86:24	0:0	6	p_params
op	86:32	0:0	6	->
water	86:34	0:0	6	i_shmid
arg	86:43	86:47	5	NULL
water	86:43	0:0	6	NULL
arg	86:49	86:60	5	SHM_RDONLY
water	86:49	0:0	6	SHM_RDONLY
water	86:61	0:0	4	;
if	87:8	93:8	4	(p_data == NULL)
cond	87:12	87:22	5	p_data == NULL
water	87:12	0:0	6	p_data
op	87:19	0:0	6	==
water	87:22	0:0	6	NULL
stmts	88:8	93:8	5	
water	88:8	0:0	6	{
call	89:12	89:67	6	msg_Err
arg	89:21	89:29	7	p_filter
water	89:21	0:0	8	p_filter
arg	89:31	89:67	7	"Unable to attach to shared memory"
water	89:31	0:0	8	"Unable to attach to shared memory"
water	89:68	0:0	6	;
call	90:12	90:47	6	picture_Release
arg	90:29	90:47	7	p_ovl->data.p_pic
water	90:29	0:0	8	p_ovl
op	90:34	0:0	8	->
water	90:36	0:0	8	data
op	90:40	0:0	8	.
water	90:41	0:0	8	p_pic
water	90:48	0:0	6	;
water	91:12	0:0	6	p_ovl
op	91:17	0:0	6	->
water	91:19	0:0	6	data
op	91:23	0:0	6	.
water	91:24	0:0	6	p_pic
op	91:30	0:0	6	=
water	91:32	0:0	6	NULL
water	91:36	0:0	6	;
return	92:12	92:29	6	VLC_ENOMEM
water	92:19	0:0	7	VLC_ENOMEM
water	93:8	0:0	6	}
water	94:8	0:0	4	p_in
op	94:13	0:0	4	=
water	94:15	0:0	4	p_data
water	94:21	0:0	4	;
for	95:8	108:8	4	( size_t i_plane = 0 ;i_plane < ( size_t ) p_ovl -> data . p_pic -> i_planes;++ i_plane)
forinit	0:0	95:31	5	 size_t i_plane = 0 ;
decl	95:13	95:31	6	size_t	i_plane
op	95:28	0:0	6	=
water	95:30	0:0	6	0
cond	95:33	95:70	5	i_plane < ( size_t ) p_ovl -> data . p_pic -> i_planes
water	95:33	0:0	6	i_plane
op	95:41	0:0	6	<
water	95:43	0:0	6	(
water	95:44	0:0	6	size_t
water	95:50	0:0	6	)
water	95:51	0:0	6	p_ovl
op	95:56	0:0	6	->
water	95:58	0:0	6	data
op	95:62	0:0	6	.
water	95:63	0:0	6	p_pic
op	95:68	0:0	6	->
water	95:70	0:0	6	i_planes
forexpr	96:13	96:15	5	++ i_plane
op	96:13	0:0	6	++
water	96:15	0:0	6	i_plane
stmts	97:8	108:8	5	
water	97:8	0:0	6	{
decl	98:12	98:67	6	uint8_t	*p_out
op	98:27	0:0	6	=
water	98:29	0:0	6	p_ovl
op	98:34	0:0	6	->
water	98:36	0:0	6	data
op	98:40	0:0	6	.
water	98:41	0:0	6	p_pic
op	98:46	0:0	6	->
water	98:48	0:0	6	p
op	98:49	0:0	6	[
water	98:50	0:0	6	i_plane
op	98:57	0:0	6	]
op	98:58	0:0	6	.
water	98:59	0:0	6	p_pixels
for	99:12	107:12	6	( size_t i_line = 0 ;i_line < ( size_t ) p_ovl -> data . p_pic -> p [ i_plane ] . i_visible_lines;++ i_line)
forinit	0:0	99:34	7	 size_t i_line = 0 ;
decl	99:17	99:34	8	size_t	i_line
op	99:31	0:0	8	=
water	99:33	0:0	8	0
cond	100:17	100:64	7	i_line < ( size_t ) p_ovl -> data . p_pic -> p [ i_plane ] . i_visible_lines
water	100:17	0:0	8	i_line
op	100:24	0:0	8	<
water	100:26	0:0	8	(
water	100:27	0:0	8	size_t
water	100:33	0:0	8	)
water	100:34	0:0	8	p_ovl
op	100:39	0:0	8	->
water	100:41	0:0	8	data
op	100:45	0:0	8	.
water	100:46	0:0	8	p_pic
op	100:51	0:0	8	->
water	100:53	0:0	8	p
op	100:54	0:0	8	[
water	100:55	0:0	8	i_plane
op	100:62	0:0	8	]
op	100:63	0:0	8	.
water	100:64	0:0	8	i_visible_lines
forexpr	101:17	101:19	7	++ i_line
op	101:17	0:0	8	++
water	101:19	0:0	8	i_line
stmts	102:12	107:12	7	
water	102:12	0:0	8	{
call	103:16	104:74	8	memcpy
arg	103:24	103:29	9	p_out
water	103:24	0:0	10	p_out
arg	103:31	103:35	9	p_in
water	103:31	0:0	10	p_in
arg	104:28	104:74	9	p_ovl->data.p_pic->p[i_plane].i_visible_pitch
water	104:28	0:0	10	p_ovl
op	104:33	0:0	10	->
water	104:35	0:0	10	data
op	104:39	0:0	10	.
water	104:40	0:0	10	p_pic
op	104:45	0:0	10	->
water	104:47	0:0	10	p
op	104:48	0:0	10	[
water	104:49	0:0	10	i_plane
op	104:56	0:0	10	]
op	104:57	0:0	10	.
water	104:58	0:0	10	i_visible_pitch
water	104:75	0:0	8	;
water	105:16	0:0	8	p_out
op	105:22	0:0	8	+=
water	105:25	0:0	8	p_ovl
op	105:30	0:0	8	->
water	105:32	0:0	8	data
op	105:36	0:0	8	.
water	105:37	0:0	8	p_pic
op	105:42	0:0	8	->
water	105:44	0:0	8	p
op	105:45	0:0	8	[
water	105:46	0:0	8	i_plane
op	105:53	0:0	8	]
op	105:54	0:0	8	.
water	105:55	0:0	8	i_pitch
water	105:62	0:0	8	;
water	106:16	0:0	8	p_in
op	106:21	0:0	8	+=
water	106:24	0:0	8	p_ovl
op	106:29	0:0	8	->
water	106:31	0:0	8	data
op	106:35	0:0	8	.
water	106:36	0:0	8	p_pic
op	106:41	0:0	8	->
water	106:43	0:0	8	p
op	106:44	0:0	8	[
water	106:45	0:0	8	i_plane
op	106:52	0:0	8	]
op	106:53	0:0	8	.
water	106:54	0:0	8	i_visible_pitch
water	106:69	0:0	8	;
water	107:12	0:0	8	}
water	108:8	0:0	6	}
call	109:8	109:22	4	shmdt
arg	109:15	109:22	5	p_data
water	109:15	0:0	6	p_data
water	109:23	0:0	4	;
water	110:4	0:0	4	}
water	111:4	0:0	2	p_sys
op	111:9	0:0	2	->
water	111:11	0:0	2	b_updated
op	111:21	0:0	2	=
water	111:23	0:0	2	p_ovl
op	111:28	0:0	2	->
water	111:30	0:0	2	b_active
water	111:38	0:0	2	;
return	112:4	112:22	2	VLC_SUCCESS
water	112:11	0:0	3	VLC_SUCCESS
call	114:4	114:23	2	VLC_UNUSED
arg	114:15	114:23	3	p_params
water	114:15	0:0	4	p_params
water	114:24	0:0	2	;
call	115:4	115:24	2	VLC_UNUSED
arg	115:15	115:24	3	p_results
water	115:15	0:0	4	p_results
water	115:25	0:0	2	;
call	116:4	116:62	2	msg_Err
arg	116:13	116:21	3	p_filter
water	116:13	0:0	4	p_filter
arg	116:23	116:62	3	"system doesn't support shared memory"
water	116:23	0:0	4	"system doesn't support shared memory"
water	116:63	0:0	2	;
return	117:4	117:23	2	VLC_EGENERIC
water	117:11	0:0	3	VLC_EGENERIC
