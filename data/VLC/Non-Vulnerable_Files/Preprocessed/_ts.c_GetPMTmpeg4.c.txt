func	2:0	124:0	0	static void	GetPMTmpeg4
params	2:23	0:0	1	
param	2:24	2:41	2	sout_mux_t *	p_mux
stmnts	0:0	123:78	1	
decl	4:4	4:40	2	sout_mux_sys_t	*p_sys
op	4:26	0:0	2	=
water	4:28	0:0	2	p_mux
op	4:33	0:0	2	->
water	4:35	0:0	2	p_sys
decl	5:4	5:21	2	uint8_t	iod[4096]
decl	6:4	6:36	2	bits_buffer_t	bits
water	6:22	0:0	2	,
decl	6:4	6:36	2	bits_buffer_t	bits_fix_IOD
call	10:4	10:25	2	memset
arg	10:12	10:15	3	iod
water	10:12	0:0	4	iod
arg	10:17	10:18	3	0
water	10:17	0:0	4	0
arg	10:20	10:25	3	4096
water	10:20	0:0	4	4096
water	10:26	0:0	2	;
call	11:4	11:37	2	bits_initwrite
arg	11:20	11:25	3	&bits
op	11:20	0:0	4	&
water	11:21	0:0	4	bits
arg	11:27	11:31	3	4096
water	11:27	0:0	4	4096
arg	11:33	11:37	3	iod
water	11:33	0:0	4	iod
water	11:38	0:0	2	;
call	13:4	13:33	2	bits_write
arg	13:16	13:21	3	&bits
op	13:16	0:0	4	&
water	13:17	0:0	4	bits
arg	13:23	13:24	3	8
water	13:23	0:0	4	8
arg	13:28	13:33	3	0x11
water	13:28	0:0	4	0
water	13:29	0:0	4	x11
water	13:34	0:0	2	;
call	15:4	15:33	2	bits_write
arg	15:16	15:21	3	&bits
op	15:16	0:0	4	&
water	15:17	0:0	4	bits
arg	15:23	15:24	3	8
water	15:23	0:0	4	8
arg	15:28	15:33	3	0x01
water	15:28	0:0	4	0
water	15:29	0:0	4	x01
water	15:34	0:0	2	;
call	17:4	17:22	2	bits_align
arg	17:16	17:22	3	&bits
op	17:16	0:0	4	&
water	17:17	0:0	4	bits
water	17:23	0:0	2	;
call	18:4	18:33	2	bits_write
arg	18:16	18:21	3	&bits
op	18:16	0:0	4	&
water	18:17	0:0	4	bits
arg	18:23	18:24	3	8
water	18:23	0:0	4	8
arg	18:28	18:33	3	0x02
water	18:28	0:0	4	0
water	18:29	0:0	4	x02
water	18:34	0:0	2	;
water	19:4	0:0	2	bits_fix_IOD
op	19:17	0:0	2	=
water	19:19	0:0	2	bits
water	19:23	0:0	2	;
call	20:4	21:36	2	bits_write
arg	20:16	20:21	3	&bits
op	20:16	0:0	4	&
water	20:17	0:0	4	bits
arg	20:23	20:25	3	24
water	20:23	0:0	4	24
arg	21:8	21:36	3	GetDescriptorLength24b(0)
call	21:8	21:34	4	GetDescriptorLength24b
arg	21:32	21:34	5	0
water	21:32	0:0	6	0
water	21:37	0:0	2	;
call	22:4	22:33	2	bits_write
arg	22:16	22:21	3	&bits
op	22:16	0:0	4	&
water	22:17	0:0	4	bits
arg	22:23	22:25	3	10
water	22:23	0:0	4	10
arg	22:28	22:33	3	0x01
water	22:28	0:0	4	0
water	22:29	0:0	4	x01
water	22:34	0:0	2	;
call	23:4	23:33	2	bits_write
arg	23:16	23:21	3	&bits
op	23:16	0:0	4	&
water	23:17	0:0	4	bits
arg	23:23	23:24	3	1
water	23:23	0:0	4	1
arg	23:28	23:33	3	0x00
water	23:28	0:0	4	0
water	23:29	0:0	4	x00
water	23:34	0:0	2	;
call	24:4	24:33	2	bits_write
arg	24:16	24:21	3	&bits
op	24:16	0:0	4	&
water	24:17	0:0	4	bits
arg	24:23	24:24	3	1
water	24:23	0:0	4	1
arg	24:28	24:33	3	0x00
water	24:28	0:0	4	0
water	24:29	0:0	4	x00
water	24:34	0:0	2	;
call	25:4	25:33	2	bits_write
arg	25:16	25:21	3	&bits
op	25:16	0:0	4	&
water	25:17	0:0	4	bits
arg	25:23	25:24	3	4
water	25:23	0:0	4	4
arg	25:28	25:33	3	0x0f
water	25:28	0:0	4	0
water	25:29	0:0	4	x0f
water	25:34	0:0	2	;
call	26:4	26:33	2	bits_write
arg	26:16	26:21	3	&bits
op	26:16	0:0	4	&
water	26:17	0:0	4	bits
arg	26:23	26:24	3	8
water	26:23	0:0	4	8
arg	26:28	26:33	3	0xff
water	26:28	0:0	4	0
water	26:29	0:0	4	xff
water	26:34	0:0	2	;
call	27:4	27:33	2	bits_write
arg	27:16	27:21	3	&bits
op	27:16	0:0	4	&
water	27:17	0:0	4	bits
arg	27:23	27:24	3	8
water	27:23	0:0	4	8
arg	27:28	27:33	3	0xff
water	27:28	0:0	4	0
water	27:29	0:0	4	xff
water	27:34	0:0	2	;
call	28:4	28:33	2	bits_write
arg	28:16	28:21	3	&bits
op	28:16	0:0	4	&
water	28:17	0:0	4	bits
arg	28:23	28:24	3	8
water	28:23	0:0	4	8
arg	28:28	28:33	3	0xfe
water	28:28	0:0	4	0
water	28:29	0:0	4	xfe
water	28:34	0:0	2	;
call	29:4	29:33	2	bits_write
arg	29:16	29:21	3	&bits
op	29:16	0:0	4	&
water	29:17	0:0	4	bits
arg	29:23	29:24	3	8
water	29:23	0:0	4	8
arg	29:28	29:33	3	0xfe
water	29:28	0:0	4	0
water	29:29	0:0	4	xfe
water	29:34	0:0	2	;
call	30:4	30:33	2	bits_write
arg	30:16	30:21	3	&bits
op	30:16	0:0	4	&
water	30:17	0:0	4	bits
arg	30:23	30:24	3	8
water	30:23	0:0	4	8
arg	30:28	30:33	3	0xff
water	30:28	0:0	4	0
water	30:29	0:0	4	xff
water	30:34	0:0	2	;
for	31:4	118:4	2	( int i_stream = 0 ;i_stream < p_mux -> i_nb_inputs;i_stream ++)
forinit	0:0	31:25	3	 int i_stream = 0 ;
decl	31:9	31:25	4	int	i_stream
op	31:22	0:0	4	=
water	31:24	0:0	4	0
cond	31:27	31:45	3	i_stream < p_mux -> i_nb_inputs
water	31:27	0:0	4	i_stream
op	31:36	0:0	4	<
water	31:38	0:0	4	p_mux
op	31:43	0:0	4	->
water	31:45	0:0	4	i_nb_inputs
forexpr	31:58	31:66	3	i_stream ++
water	31:58	0:0	4	i_stream
op	31:66	0:0	4	++
stmts	32:4	118:4	3	
water	32:4	0:0	4	{
decl	33:8	33:79	4	ts_stream_t	*p_stream
op	33:30	0:0	4	=
water	33:32	0:0	4	(
water	33:33	0:0	4	ts_stream_t
op	33:44	0:0	4	*
water	33:45	0:0	4	)
water	33:46	0:0	4	p_mux
op	33:51	0:0	4	->
water	33:53	0:0	4	pp_inputs
op	33:62	0:0	4	[
water	33:63	0:0	4	i_stream
op	33:71	0:0	4	]
op	33:72	0:0	4	->
water	33:74	0:0	4	p_sys
if	34:8	36:20	4	(p_stream -> i_stream_id != 0 xfa && p_stream -> i_stream_id != 0 xfb && p_stream -> i_stream_id != 0 xfe)
cond	34:12	35:38	5	p_stream -> i_stream_id != 0 xfa && p_stream -> i_stream_id != 0 xfb && p_stream -> i_stream_id != 0 xfe
water	34:12	0:0	6	p_stream
op	34:20	0:0	6	->
water	34:22	0:0	6	i_stream_id
op	34:34	0:0	6	!=
water	34:37	0:0	6	0
water	34:38	0:0	6	xfa
op	34:42	0:0	6	&&
water	34:45	0:0	6	p_stream
op	34:53	0:0	6	->
water	34:55	0:0	6	i_stream_id
op	34:67	0:0	6	!=
water	34:70	0:0	6	0
water	34:71	0:0	6	xfb
op	34:75	0:0	6	&&
water	35:12	0:0	6	p_stream
op	35:20	0:0	6	->
water	35:22	0:0	6	i_stream_id
op	35:34	0:0	6	!=
water	35:37	0:0	6	0
water	35:38	0:0	6	xfe
stmts	36:12	36:20	5	
continue	36:12	36:20	6	
decl	37:8	37:56	4	bits_buffer_t	bits_fix_ESDescr
water	37:38	0:0	4	,
decl	37:8	37:56	4	bits_buffer_t	bits_fix_Decoder
call	39:8	39:26	4	bits_align
arg	39:20	39:26	5	&bits
op	39:20	0:0	6	&
water	39:21	0:0	6	bits
water	39:27	0:0	4	;
call	40:8	40:37	4	bits_write
arg	40:20	40:25	5	&bits
op	40:20	0:0	6	&
water	40:21	0:0	6	bits
arg	40:27	40:28	5	8
water	40:27	0:0	6	8
arg	40:32	40:37	5	0x03
water	40:32	0:0	6	0
water	40:33	0:0	6	x03
water	40:38	0:0	4	;
water	41:8	0:0	4	bits_fix_ESDescr
op	41:25	0:0	4	=
water	41:27	0:0	4	bits
water	41:31	0:0	4	;
call	42:8	43:48	4	bits_write
arg	42:20	42:25	5	&bits
op	42:20	0:0	6	&
water	42:21	0:0	6	bits
arg	42:27	42:29	5	24
water	42:27	0:0	6	24
arg	43:20	43:48	5	GetDescriptorLength24b(0)
call	43:20	43:46	6	GetDescriptorLength24b
arg	43:44	43:46	7	0
water	43:44	0:0	8	0
water	43:49	0:0	4	;
call	44:8	44:50	4	bits_write
arg	44:20	44:25	5	&bits
op	44:20	0:0	6	&
water	44:21	0:0	6	bits
arg	44:27	44:29	5	16
water	44:27	0:0	6	16
arg	44:32	44:50	5	p_stream->i_es_id
water	44:32	0:0	6	p_stream
op	44:40	0:0	6	->
water	44:42	0:0	6	i_es_id
water	44:51	0:0	4	;
call	45:8	45:37	4	bits_write
arg	45:20	45:25	5	&bits
op	45:20	0:0	6	&
water	45:21	0:0	6	bits
arg	45:27	45:28	5	1
water	45:27	0:0	6	1
arg	45:32	45:37	5	0x00
water	45:32	0:0	6	0
water	45:33	0:0	6	x00
water	45:38	0:0	4	;
call	46:8	46:37	4	bits_write
arg	46:20	46:25	5	&bits
op	46:20	0:0	6	&
water	46:21	0:0	6	bits
arg	46:27	46:28	5	1
water	46:27	0:0	6	1
arg	46:32	46:37	5	0x00
water	46:32	0:0	6	0
water	46:33	0:0	6	x00
water	46:38	0:0	4	;
call	47:8	47:37	4	bits_write
arg	47:20	47:25	5	&bits
op	47:20	0:0	6	&
water	47:21	0:0	6	bits
arg	47:27	47:28	5	1
water	47:27	0:0	6	1
arg	47:32	47:37	5	0x00
water	47:32	0:0	6	0
water	47:33	0:0	6	x00
water	47:38	0:0	4	;
call	48:8	48:37	4	bits_write
arg	48:20	48:25	5	&bits
op	48:20	0:0	6	&
water	48:21	0:0	6	bits
arg	48:27	48:28	5	5
water	48:27	0:0	6	5
arg	48:32	48:37	5	0x1f
water	48:32	0:0	6	0
water	48:33	0:0	6	x1f
water	48:38	0:0	4	;
call	50:8	50:26	4	bits_align
arg	50:20	50:26	5	&bits
op	50:20	0:0	6	&
water	50:21	0:0	6	bits
water	50:27	0:0	4	;
call	51:8	51:37	4	bits_write
arg	51:20	51:25	5	&bits
op	51:20	0:0	6	&
water	51:21	0:0	6	bits
arg	51:27	51:28	5	8
water	51:27	0:0	6	8
arg	51:32	51:37	5	0x04
water	51:32	0:0	6	0
water	51:33	0:0	6	x04
water	51:38	0:0	4	;
water	52:8	0:0	4	bits_fix_Decoder
op	52:25	0:0	4	=
water	52:27	0:0	4	bits
water	52:31	0:0	4	;
call	53:8	53:60	4	bits_write
arg	53:20	53:25	5	&bits
op	53:20	0:0	6	&
water	53:21	0:0	6	bits
arg	53:27	53:29	5	24
water	53:27	0:0	6	24
arg	53:32	53:60	5	GetDescriptorLength24b(0)
call	53:32	53:58	6	GetDescriptorLength24b
arg	53:56	53:58	7	0
water	53:56	0:0	8	0
water	53:61	0:0	4	;
if	54:8	58:8	4	(p_stream -> i_stream_type == 0 x10)
cond	54:12	54:40	5	p_stream -> i_stream_type == 0 x10
water	54:12	0:0	6	p_stream
op	54:20	0:0	6	->
water	54:22	0:0	6	i_stream_type
op	54:36	0:0	6	==
water	54:39	0:0	6	0
water	54:40	0:0	6	x10
stmts	55:8	58:8	5	
water	55:8	0:0	6	{
call	56:12	56:39	6	bits_write
arg	56:24	56:29	7	&bits
op	56:24	0:0	8	&
water	56:25	0:0	8	bits
arg	56:31	56:32	7	8
water	56:31	0:0	8	8
arg	56:34	56:39	7	0x20
water	56:34	0:0	8	0
water	56:35	0:0	8	x20
water	56:40	0:0	6	;
call	57:12	57:39	6	bits_write
arg	57:24	57:29	7	&bits
op	57:24	0:0	8	&
water	57:25	0:0	8	bits
arg	57:31	57:32	7	6
water	57:31	0:0	8	6
arg	57:34	57:39	7	0x04
water	57:34	0:0	8	0
water	57:35	0:0	8	x04
water	57:40	0:0	6	;
water	58:8	0:0	6	}
else	59:8	63:8	4
stmts	59:13	63:8	5	
if	59:13	63:8	6	(p_stream -> i_stream_type == 0 x1b)
cond	59:17	59:45	7	p_stream -> i_stream_type == 0 x1b
water	59:17	0:0	8	p_stream
op	59:25	0:0	8	->
water	59:27	0:0	8	i_stream_type
op	59:41	0:0	8	==
water	59:44	0:0	8	0
water	59:45	0:0	8	x1b
stmts	60:8	63:8	7	
water	60:8	0:0	8	{
call	61:12	61:39	8	bits_write
arg	61:24	61:29	9	&bits
op	61:24	0:0	10	&
water	61:25	0:0	10	bits
arg	61:31	61:32	9	8
water	61:31	0:0	10	8
arg	61:34	61:39	9	0x21
water	61:34	0:0	10	0
water	61:35	0:0	10	x21
water	61:40	0:0	8	;
call	62:12	62:39	8	bits_write
arg	62:24	62:29	9	&bits
op	62:24	0:0	10	&
water	62:25	0:0	10	bits
arg	62:31	62:32	9	6
water	62:31	0:0	10	6
arg	62:34	62:39	9	0x04
water	62:34	0:0	10	0
water	62:35	0:0	10	x04
water	62:40	0:0	8	;
water	63:8	0:0	8	}
else	64:8	69:8	4
stmts	64:13	69:8	5	
if	64:13	69:8	6	(p_stream -> i_stream_type == 0 x11 || p_stream -> i_stream_type == 0 x0f)
cond	64:17	65:45	7	p_stream -> i_stream_type == 0 x11 || p_stream -> i_stream_type == 0 x0f
water	64:17	0:0	8	p_stream
op	64:25	0:0	8	->
water	64:27	0:0	8	i_stream_type
op	64:41	0:0	8	==
water	64:44	0:0	8	0
water	64:45	0:0	8	x11
op	64:49	0:0	8	||
water	65:17	0:0	8	p_stream
op	65:25	0:0	8	->
water	65:27	0:0	8	i_stream_type
op	65:41	0:0	8	==
water	65:44	0:0	8	0
water	65:45	0:0	8	x0f
stmts	66:8	69:8	7	
water	66:8	0:0	8	{
call	67:12	67:39	8	bits_write
arg	67:24	67:29	9	&bits
op	67:24	0:0	10	&
water	67:25	0:0	10	bits
arg	67:31	67:32	9	8
water	67:31	0:0	10	8
arg	67:34	67:39	9	0x40
water	67:34	0:0	10	0
water	67:35	0:0	10	x40
water	67:40	0:0	8	;
call	68:12	68:39	8	bits_write
arg	68:24	68:29	9	&bits
op	68:24	0:0	10	&
water	68:25	0:0	10	bits
arg	68:31	68:32	9	6
water	68:31	0:0	10	6
arg	68:34	68:39	9	0x05
water	68:34	0:0	10	0
water	68:35	0:0	10	x05
water	68:40	0:0	8	;
water	69:8	0:0	8	}
else	70:8	75:8	4
stmts	70:13	75:8	5	
if	70:13	75:8	6	(p_stream -> i_stream_type == 0 x12 && p_stream -> i_codec == VLC_CODEC_SUBT)
cond	70:17	71:38	7	p_stream -> i_stream_type == 0 x12 && p_stream -> i_codec == VLC_CODEC_SUBT
water	70:17	0:0	8	p_stream
op	70:25	0:0	8	->
water	70:27	0:0	8	i_stream_type
op	70:41	0:0	8	==
water	70:44	0:0	8	0
water	70:45	0:0	8	x12
op	70:49	0:0	8	&&
water	71:17	0:0	8	p_stream
op	71:25	0:0	8	->
water	71:27	0:0	8	i_codec
op	71:35	0:0	8	==
water	71:38	0:0	8	VLC_CODEC_SUBT
stmts	72:8	75:8	7	
water	72:8	0:0	8	{
call	73:12	73:39	8	bits_write
arg	73:24	73:29	9	&bits
op	73:24	0:0	10	&
water	73:25	0:0	10	bits
arg	73:31	73:32	9	8
water	73:31	0:0	10	8
arg	73:34	73:39	9	0x0B
water	73:34	0:0	10	0
water	73:35	0:0	10	x0B
water	73:40	0:0	8	;
call	74:12	74:39	8	bits_write
arg	74:24	74:29	9	&bits
op	74:24	0:0	10	&
water	74:25	0:0	10	bits
arg	74:31	74:32	9	6
water	74:31	0:0	10	6
arg	74:34	74:39	9	0x04
water	74:34	0:0	10	0
water	74:35	0:0	10	x04
water	74:40	0:0	8	;
water	75:8	0:0	8	}
else	76:8	81:8	4
stmts	77:8	81:8	5	
water	77:8	0:0	6	{
call	78:12	78:39	6	bits_write
arg	78:24	78:29	7	&bits
op	78:24	0:0	8	&
water	78:25	0:0	8	bits
arg	78:31	78:32	7	8
water	78:31	0:0	8	8
arg	78:34	78:39	7	0x00
water	78:34	0:0	8	0
water	78:35	0:0	8	x00
water	78:40	0:0	6	;
call	79:12	79:39	6	bits_write
arg	79:24	79:29	7	&bits
op	79:24	0:0	8	&
water	79:25	0:0	8	bits
arg	79:31	79:32	7	6
water	79:31	0:0	8	6
arg	79:34	79:39	7	0x00
water	79:34	0:0	8	0
water	79:35	0:0	8	x00
water	79:40	0:0	6	;
call	80:12	80:68	6	msg_Err
arg	80:21	80:26	7	p_mux
water	80:21	0:0	8	p_mux
arg	80:28	80:68	7	"Unsupported stream_type => broken IOD"
water	80:28	0:0	8	"Unsupported stream_type => broken IOD"
water	80:69	0:0	6	;
water	81:8	0:0	6	}
call	82:8	82:37	4	bits_write
arg	82:20	82:25	5	&bits
op	82:20	0:0	6	&
water	82:21	0:0	6	bits
arg	82:27	82:28	5	1
water	82:27	0:0	6	1
arg	82:32	82:37	5	0x00
water	82:32	0:0	6	0
water	82:33	0:0	6	x00
water	82:38	0:0	4	;
call	83:8	83:37	4	bits_write
arg	83:20	83:25	5	&bits
op	83:20	0:0	6	&
water	83:21	0:0	6	bits
arg	83:27	83:28	5	1
water	83:27	0:0	6	1
arg	83:32	83:37	5	0x01
water	83:32	0:0	6	0
water	83:33	0:0	6	x01
water	83:38	0:0	4	;
call	84:8	84:44	4	bits_write
arg	84:20	84:25	5	&bits
op	84:20	0:0	6	&
water	84:21	0:0	6	bits
arg	84:27	84:29	5	24
water	84:27	0:0	6	24
arg	84:32	84:44	5	1024*1024
water	84:32	0:0	6	1024
op	84:37	0:0	6	*
water	84:39	0:0	6	1024
water	84:45	0:0	4	;
call	85:8	85:43	4	bits_write
arg	85:20	85:25	5	&bits
op	85:20	0:0	6	&
water	85:21	0:0	6	bits
arg	85:27	85:29	5	32
water	85:27	0:0	6	32
arg	85:32	85:43	5	0x7fffffff
water	85:32	0:0	6	0
water	85:33	0:0	6	x7fffffff
water	85:44	0:0	4	;
call	86:8	86:34	4	bits_write
arg	86:20	86:25	5	&bits
op	86:20	0:0	6	&
water	86:21	0:0	6	bits
arg	86:27	86:29	5	32
water	86:27	0:0	6	32
arg	86:32	86:34	5	0
water	86:32	0:0	6	0
water	86:35	0:0	4	;
if	87:8	99:8	4	(p_stream -> i_extra > 0)
cond	87:12	87:32	5	p_stream -> i_extra > 0
water	87:12	0:0	6	p_stream
op	87:20	0:0	6	->
water	87:22	0:0	6	i_extra
op	87:30	0:0	6	>
water	87:32	0:0	6	0
stmts	88:8	99:8	5	
water	88:8	0:0	6	{
call	90:12	90:30	6	bits_align
arg	90:24	90:30	7	&bits
op	90:24	0:0	8	&
water	90:25	0:0	8	bits
water	90:31	0:0	6	;
call	91:12	91:41	6	bits_write
arg	91:24	91:29	7	&bits
op	91:24	0:0	8	&
water	91:25	0:0	8	bits
arg	91:31	91:32	7	8
water	91:31	0:0	8	8
arg	91:36	91:41	7	0x05
water	91:36	0:0	8	0
water	91:37	0:0	8	x05
water	91:42	0:0	6	;
call	92:12	93:44	6	bits_write
arg	92:24	92:29	7	&bits
op	92:24	0:0	8	&
water	92:25	0:0	8	bits
arg	92:31	92:33	7	24
water	92:31	0:0	8	24
arg	92:35	93:44	7	GetDescriptorLength24b(p_stream->i_extra)
call	92:35	93:42	8	GetDescriptorLength24b
arg	93:24	93:42	9	p_stream->i_extra
water	93:24	0:0	10	p_stream
op	93:32	0:0	10	->
water	93:34	0:0	10	i_extra
water	93:45	0:0	6	;
for	94:12	98:12	6	( int i = 0 ;i < p_stream -> i_extra;i ++)
forinit	0:0	94:26	7	 int i = 0 ;
decl	94:17	94:26	8	int	i
op	94:23	0:0	8	=
water	94:25	0:0	8	0
cond	94:28	94:42	7	i < p_stream -> i_extra
water	94:28	0:0	8	i
op	94:30	0:0	8	<
water	94:32	0:0	8	p_stream
op	94:40	0:0	8	->
water	94:42	0:0	8	i_extra
forexpr	94:51	94:52	7	i ++
water	94:51	0:0	8	i
op	94:52	0:0	8	++
stmts	95:12	98:12	7	
water	95:12	0:0	8	{
call	96:16	97:53	8	bits_write
arg	96:28	96:33	9	&bits
op	96:28	0:0	10	&
water	96:29	0:0	10	bits
arg	96:35	96:36	9	8
water	96:35	0:0	10	8
arg	97:20	97:53	9	((uint8_t*)p_stream->p_extra)[i]
water	97:20	0:0	10	(
water	97:21	0:0	10	(
water	97:22	0:0	10	uint8_t
op	97:29	0:0	10	*
water	97:30	0:0	10	)
water	97:31	0:0	10	p_stream
op	97:39	0:0	10	->
water	97:41	0:0	10	p_extra
water	97:48	0:0	10	)
op	97:49	0:0	10	[
water	97:50	0:0	10	i
op	97:51	0:0	10	]
water	97:54	0:0	8	;
water	98:12	0:0	8	}
water	99:8	0:0	6	}
call	101:8	103:50	4	bits_write
arg	101:20	101:37	5	&bits_fix_Decoder
op	101:20	0:0	6	&
water	101:21	0:0	6	bits_fix_Decoder
arg	101:39	101:41	5	24
water	101:39	0:0	6	24
arg	102:20	103:50	5	GetDescriptorLength24b(bits.i_data-bits_fix_Decoder.i_data-3)
call	102:20	103:48	6	GetDescriptorLength24b
arg	102:44	103:48	7	bits.i_data-bits_fix_Decoder.i_data-3
water	102:44	0:0	8	bits
op	102:48	0:0	8	.
water	102:49	0:0	8	i_data
op	102:56	0:0	8	-
water	103:20	0:0	8	bits_fix_Decoder
op	103:36	0:0	8	.
water	103:37	0:0	8	i_data
op	103:44	0:0	8	-
water	103:46	0:0	8	3
water	103:51	0:0	4	;
call	105:8	105:26	4	bits_align
arg	105:20	105:26	5	&bits
op	105:20	0:0	6	&
water	105:21	0:0	6	bits
water	105:27	0:0	4	;
call	106:8	106:37	4	bits_write
arg	106:20	106:25	5	&bits
op	106:20	0:0	6	&
water	106:21	0:0	6	bits
arg	106:27	106:28	5	8
water	106:27	0:0	6	8
arg	106:32	106:37	5	0x06
water	106:32	0:0	6	0
water	106:33	0:0	6	x06
water	106:38	0:0	4	;
call	107:8	107:60	4	bits_write
arg	107:20	107:25	5	&bits
op	107:20	0:0	6	&
water	107:21	0:0	6	bits
arg	107:27	107:29	5	24
water	107:27	0:0	6	24
arg	107:32	107:60	5	GetDescriptorLength24b(8)
call	107:32	107:58	6	GetDescriptorLength24b
arg	107:56	107:58	7	8
water	107:56	0:0	8	8
water	107:61	0:0	4	;
call	108:8	108:37	4	bits_write
arg	108:20	108:25	5	&bits
op	108:20	0:0	6	&
water	108:21	0:0	6	bits
arg	108:27	108:28	5	8
water	108:27	0:0	6	8
arg	108:32	108:37	5	0x01
water	108:32	0:0	6	0
water	108:33	0:0	6	x01
water	108:38	0:0	4	;
call	109:8	109:34	4	bits_write
arg	109:20	109:25	5	&bits
op	109:20	0:0	6	&
water	109:21	0:0	6	bits
arg	109:27	109:28	5	1
water	109:27	0:0	6	1
arg	109:32	109:34	5	0
water	109:32	0:0	6	0
water	109:35	0:0	4	;
call	110:8	110:34	4	bits_write
arg	110:20	110:25	5	&bits
op	110:20	0:0	6	&
water	110:21	0:0	6	bits
arg	110:27	110:29	5	32
water	110:27	0:0	6	32
arg	110:32	110:34	5	0
water	110:32	0:0	6	0
water	110:35	0:0	4	;
call	111:8	111:34	4	bits_write
arg	111:20	111:25	5	&bits
op	111:20	0:0	6	&
water	111:21	0:0	6	bits
arg	111:27	111:28	5	8
water	111:27	0:0	6	8
arg	111:32	111:34	5	0
water	111:32	0:0	6	0
water	111:35	0:0	4	;
call	112:8	112:34	4	bits_write
arg	112:20	112:25	5	&bits
op	112:20	0:0	6	&
water	112:21	0:0	6	bits
arg	112:27	112:28	5	8
water	112:27	0:0	6	8
arg	112:32	112:34	5	0
water	112:32	0:0	6	0
water	112:35	0:0	4	;
call	113:8	113:26	4	bits_align
arg	113:20	113:26	5	&bits
op	113:20	0:0	6	&
water	113:21	0:0	6	bits
water	113:27	0:0	4	;
call	115:8	117:50	4	bits_write
arg	115:20	115:37	5	&bits_fix_ESDescr
op	115:20	0:0	6	&
water	115:21	0:0	6	bits_fix_ESDescr
arg	115:39	115:41	5	24
water	115:39	0:0	6	24
arg	116:20	117:50	5	GetDescriptorLength24b(bits.i_data-bits_fix_ESDescr.i_data-3)
call	116:20	117:48	6	GetDescriptorLength24b
arg	116:44	117:48	7	bits.i_data-bits_fix_ESDescr.i_data-3
water	116:44	0:0	8	bits
op	116:48	0:0	8	.
water	116:49	0:0	8	i_data
op	116:56	0:0	8	-
water	117:20	0:0	8	bits_fix_ESDescr
op	117:36	0:0	8	.
water	117:37	0:0	8	i_data
op	117:44	0:0	8	-
water	117:46	0:0	8	3
water	117:51	0:0	4	;
water	118:4	0:0	4	}
call	119:4	119:22	2	bits_align
arg	119:16	119:22	3	&bits
op	119:16	0:0	4	&
water	119:17	0:0	4	bits
water	119:23	0:0	2	;
call	121:4	122:78	2	bits_write
arg	121:16	121:29	3	&bits_fix_IOD
op	121:16	0:0	4	&
water	121:17	0:0	4	bits_fix_IOD
arg	121:31	121:33	3	24
water	121:31	0:0	4	24
arg	122:16	122:78	3	GetDescriptorLength24b(bits.i_data-bits_fix_IOD.i_data-3)
call	122:16	122:77	4	GetDescriptorLength24b
arg	122:39	122:77	5	bits.i_data-bits_fix_IOD.i_data-3
water	122:39	0:0	6	bits
op	122:43	0:0	6	.
water	122:44	0:0	6	i_data
op	122:51	0:0	6	-
water	122:53	0:0	6	bits_fix_IOD
op	122:65	0:0	6	.
water	122:66	0:0	6	i_data
op	122:73	0:0	6	-
water	122:75	0:0	6	3
water	122:79	0:0	2	;
call	123:4	123:77	2	dvbpsi_PMTAddDescriptor
arg	123:28	123:45	3	&p_sys->dvbpmt[0]
op	123:28	0:0	4	&
water	123:29	0:0	4	p_sys
op	123:34	0:0	4	->
water	123:36	0:0	4	dvbpmt
op	123:42	0:0	4	[
water	123:43	0:0	4	0
op	123:44	0:0	4	]
arg	123:47	123:51	3	0x1d
water	123:47	0:0	4	0
water	123:48	0:0	4	x1d
arg	123:53	123:64	3	bits.i_data
water	123:53	0:0	4	bits
op	123:57	0:0	4	.
water	123:58	0:0	4	i_data
arg	123:66	123:77	3	bits.p_data
water	123:66	0:0	4	bits
op	123:70	0:0	4	.
water	123:71	0:0	4	p_data
water	123:78	0:0	2	;
