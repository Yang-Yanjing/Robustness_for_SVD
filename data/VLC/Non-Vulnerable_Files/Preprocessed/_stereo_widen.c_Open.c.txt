func	2:0	35:0	0	static int	Open
params	2:15	0:0	1	
param	2:17	2:35	2	vlc_object_t *	obj
stmnts	0:0	34:22	1	
decl	4:4	4:41	2	filter_t	*p_filter
op	4:24	0:0	2	=
water	4:26	0:0	2	(
water	4:27	0:0	2	filter_t
op	4:36	0:0	2	*
water	4:37	0:0	2	)
water	4:38	0:0	2	obj
decl	5:4	5:23	2	filter_sys_t	*p_sys
if	6:4	8:27	2	(p_filter -> fmt_in . audio . i_format != VLC_CODEC_FL32 || !AOUT_FMTS_IDENTICAL (& p_filter -> fmt_in . audio ,& p_filter -> fmt_out . audio ))
cond	6:8	7:76	3	p_filter -> fmt_in . audio . i_format != VLC_CODEC_FL32 || !AOUT_FMTS_IDENTICAL (& p_filter -> fmt_in . audio ,& p_filter -> fmt_out . audio )
water	6:8	0:0	4	p_filter
op	6:16	0:0	4	->
water	6:18	0:0	4	fmt_in
op	6:24	0:0	4	.
water	6:25	0:0	4	audio
op	6:30	0:0	4	.
water	6:31	0:0	4	i_format
op	6:40	0:0	4	!=
water	6:43	0:0	4	VLC_CODEC_FL32
op	6:58	0:0	4	||
op	7:5	0:0	4	!
call	7:6	7:76	4	AOUT_FMTS_IDENTICAL
arg	7:27	7:50	5	&p_filter->fmt_in.audio
op	7:27	0:0	6	&
water	7:28	0:0	6	p_filter
op	7:36	0:0	6	->
water	7:38	0:0	6	fmt_in
op	7:44	0:0	6	.
water	7:45	0:0	6	audio
arg	7:52	7:76	5	&p_filter->fmt_out.audio
op	7:52	0:0	6	&
water	7:53	0:0	6	p_filter
op	7:61	0:0	6	->
water	7:63	0:0	6	fmt_out
op	7:70	0:0	6	.
water	7:71	0:0	6	audio
stmts	8:8	8:27	3	
return	8:8	8:27	4	VLC_EGENERIC
water	8:15	0:0	5	VLC_EGENERIC
if	9:4	13:4	2	(p_filter -> fmt_in . audio . i_channels != 2)
cond	9:8	9:45	3	p_filter -> fmt_in . audio . i_channels != 2
water	9:8	0:0	4	p_filter
op	9:16	0:0	4	->
water	9:18	0:0	4	fmt_in
op	9:24	0:0	4	.
water	9:25	0:0	4	audio
op	9:30	0:0	4	.
water	9:31	0:0	4	i_channels
op	9:42	0:0	4	!=
water	9:45	0:0	4	2
stmts	10:4	13:4	3	
water	10:4	0:0	4	{
call	11:8	11:61	4	msg_Err
arg	11:18	11:26	5	p_filter
water	11:18	0:0	6	p_filter
arg	11:28	11:61	5	"stereo enhance requires stereo"
water	11:28	0:0	6	"stereo enhance requires stereo"
water	11:62	0:0	4	;
return	12:8	12:27	4	VLC_EGENERIC
water	12:15	0:0	5	VLC_EGENERIC
water	13:4	0:0	4	}
water	14:4	0:0	2	p_sys
op	14:10	0:0	2	=
water	14:12	0:0	2	p_filter
op	14:20	0:0	2	->
water	14:22	0:0	2	p_sys
op	14:28	0:0	2	=
call	14:30	14:59	2	malloc
arg	14:38	14:59	3	sizeof(filter_sys_t)
op	14:38	0:0	4	sizeof
water	14:44	0:0	4	(
water	14:45	0:0	4	filter_sys_t
water	14:57	0:0	4	)
water	14:60	0:0	2	;
if	15:4	16:25	2	(unlikely (! p_sys ))
cond	15:8	15:23	3	unlikely (! p_sys )
call	15:8	15:23	4	unlikely
arg	15:17	15:23	5	!p_sys
op	15:17	0:0	6	!
water	15:18	0:0	6	p_sys
stmts	16:8	16:25	3	
return	16:8	16:25	4	VLC_ENOMEM
water	16:15	0:0	5	VLC_ENOMEM
water	18:4	0:0	2	p_sys
op	18:9	0:0	2	->
water	18:11	0:0	2	stor
op	18:16	0:0	2	=
call	18:18	18:47	2	var_CreateGetFloat
arg	18:38	18:41	3	obj
water	18:38	0:0	4	obj
arg	18:43	18:47	3	var
water	18:43	0:0	4	var
water	18:48	0:0	2	;
call	19:4	19:57	2	var_AddCallback
arg	19:21	19:29	3	p_filter
water	19:21	0:0	4	p_filter
arg	19:31	19:34	3	var
water	19:31	0:0	4	var
arg	19:36	19:49	3	paramCallback
water	19:36	0:0	4	paramCallback
arg	19:51	19:57	3	p_sys
water	19:51	0:0	4	p_sys
water	19:58	0:0	2	;
call	20:4	20:33	2	CREATE_VAR
arg	20:16	20:23	3	f_delay
water	20:16	0:0	4	f_delay
arg	20:25	20:33	3	"delay"
water	20:25	0:0	4	"delay"
call	21:4	21:39	2	CREATE_VAR
arg	21:16	21:26	3	f_feedback
water	21:16	0:0	4	f_feedback
arg	21:28	21:39	3	"feedback"
water	21:28	0:0	4	"feedback"
call	22:4	22:41	2	CREATE_VAR
arg	22:16	22:27	3	f_crossfeed
water	22:16	0:0	4	f_crossfeed
arg	22:29	22:41	3	"crossfeed"
water	22:29	0:0	4	"crossfeed"
call	23:4	23:37	2	CREATE_VAR
arg	23:16	23:25	3	f_dry_mix
water	23:16	0:0	4	f_dry_mix
arg	23:27	23:37	3	"dry-mix"
water	23:27	0:0	4	"dry-mix"
water	25:4	0:0	2	p_sys
op	25:9	0:0	2	->
water	25:11	0:0	2	pf_ringbuf
op	25:22	0:0	2	=
water	25:24	0:0	2	NULL
water	25:28	0:0	2	;
water	26:4	0:0	2	p_sys
op	26:9	0:0	2	->
water	26:11	0:0	2	i_len
op	26:17	0:0	2	=
water	26:19	0:0	2	0
water	26:20	0:0	2	;
if	27:4	32:4	2	(MakeRingBuffer (& p_sys -> pf_ringbuf ,& p_sys -> i_len ,& p_sys -> pf_write ,p_sys -> f_delay ,p_filter -> fmt_in . audio . i_rate ) != VLC_SUCCESS)
cond	27:8	28:75	3	MakeRingBuffer (& p_sys -> pf_ringbuf ,& p_sys -> i_len ,& p_sys -> pf_write ,p_sys -> f_delay ,p_filter -> fmt_in . audio . i_rate ) != VLC_SUCCESS
call	27:8	28:70	4	MakeRingBuffer
arg	27:24	27:42	5	&p_sys->pf_ringbuf
op	27:24	0:0	6	&
water	27:25	0:0	6	p_sys
op	27:30	0:0	6	->
water	27:32	0:0	6	pf_ringbuf
arg	27:44	27:57	5	&p_sys->i_len
op	27:44	0:0	6	&
water	27:45	0:0	6	p_sys
op	27:50	0:0	6	->
water	27:52	0:0	6	i_len
arg	27:59	27:75	5	&p_sys->pf_write
op	27:59	0:0	6	&
water	27:60	0:0	6	p_sys
op	27:65	0:0	6	->
water	27:67	0:0	6	pf_write
arg	28:24	28:38	5	p_sys->f_delay
water	28:24	0:0	6	p_sys
op	28:29	0:0	6	->
water	28:31	0:0	6	f_delay
arg	28:40	28:70	5	p_filter->fmt_in.audio.i_rate
water	28:40	0:0	6	p_filter
op	28:48	0:0	6	->
water	28:50	0:0	6	fmt_in
op	28:56	0:0	6	.
water	28:57	0:0	6	audio
op	28:62	0:0	6	.
water	28:63	0:0	6	i_rate
op	28:72	0:0	4	!=
water	28:75	0:0	4	VLC_SUCCESS
stmts	29:4	32:4	3	
water	29:4	0:0	4	{
call	30:8	30:20	4	free
arg	30:14	30:20	5	p_sys
water	30:14	0:0	6	p_sys
water	30:21	0:0	4	;
return	31:8	31:25	4	VLC_ENOMEM
water	31:15	0:0	5	VLC_ENOMEM
water	32:4	0:0	4	}
water	33:4	0:0	2	p_filter
op	33:12	0:0	2	->
water	33:14	0:0	2	pf_audio_filter
op	33:30	0:0	2	=
water	33:32	0:0	2	Filter
water	33:38	0:0	2	;
return	34:4	34:22	2	VLC_SUCCESS
water	34:11	0:0	3	VLC_SUCCESS
