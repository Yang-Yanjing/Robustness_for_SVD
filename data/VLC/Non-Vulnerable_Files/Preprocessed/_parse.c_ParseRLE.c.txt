func	2:0	206:0	0	static int	ParseRLE
params	2:19	0:0	1	
param	2:21	2:37	2	decoder_t *	p_dec
param	3:21	3:50	2	subpicture_data_t *	p_spu_data
param	4:21	4:62	2	const spu_properties_t *	p_spu_properties
stmnts	0:0	205:22	1	
decl	6:4	6:39	2	decoder_sys_t	*p_sys
op	6:25	0:0	2	=
water	6:27	0:0	2	p_dec
op	6:32	0:0	2	->
water	6:34	0:0	2	p_sys
decl	7:4	7:58	2	const unsigned int	i_width
op	7:31	0:0	2	=
water	7:33	0:0	2	p_spu_properties
op	7:49	0:0	2	->
water	7:51	0:0	2	i_width
decl	8:4	8:60	2	const unsigned int	i_height
op	8:32	0:0	2	=
water	8:34	0:0	2	p_spu_properties
op	8:50	0:0	2	->
water	8:52	0:0	2	i_height
decl	9:4	9:25	2	unsigned int	i_x
water	9:20	0:0	2	,
decl	9:4	9:25	2	unsigned int	i_y
decl	10:4	10:41	2	uint16_t	*p_dest
op	10:21	0:0	2	=
water	10:23	0:0	2	p_spu_data
op	10:33	0:0	2	->
water	10:35	0:0	2	p_data
decl	12:4	12:26	2	unsigned int	i_id
op	12:23	0:0	2	=
water	12:25	0:0	2	0
decl	13:4	13:31	2	unsigned int	pi_table[2]
decl	14:4	14:27	2	unsigned int	*pi_offset
decl	16:4	16:27	2	bool	b_empty_top
op	16:21	0:0	2	=
water	16:23	0:0	2	true
decl	17:4	17:56	2	unsigned int	i_skipped_top
op	17:31	0:0	2	=
water	17:33	0:0	2	0
water	17:34	0:0	2	,
decl	17:4	17:56	2	unsigned int	i_skipped_bottom
op	17:53	0:0	2	=
water	17:55	0:0	2	0
decl	18:4	18:39	2	unsigned int	i_transparent_code
op	18:36	0:0	2	=
water	18:38	0:0	2	0
decl	20:4	20:21	2	int	i_border
op	20:17	0:0	2	=
op	20:19	0:0	2	-
water	20:20	0:0	2	1
decl	21:4	21:16	2	int	stats[4]
water	21:18	0:0	2	stats
op	21:23	0:0	2	[
water	21:24	0:0	2	0
op	21:25	0:0	2	]
op	21:27	0:0	2	=
water	21:29	0:0	2	stats
op	21:34	0:0	2	[
water	21:35	0:0	2	1
op	21:36	0:0	2	]
op	21:38	0:0	2	=
water	21:40	0:0	2	stats
op	21:45	0:0	2	[
water	21:46	0:0	2	2
op	21:47	0:0	2	]
op	21:49	0:0	2	=
water	21:51	0:0	2	stats
op	21:56	0:0	2	[
water	21:57	0:0	2	3
op	21:58	0:0	2	]
op	21:60	0:0	2	=
water	21:62	0:0	2	0
water	21:63	0:0	2	;
water	22:4	0:0	2	pi_table
op	22:12	0:0	2	[
water	22:14	0:0	2	0
op	22:16	0:0	2	]
op	22:18	0:0	2	=
water	22:20	0:0	2	p_spu_data
op	22:30	0:0	2	->
water	22:32	0:0	2	pi_offset
op	22:41	0:0	2	[
water	22:43	0:0	2	0
op	22:45	0:0	2	]
op	22:47	0:0	2	<<
water	22:50	0:0	2	1
water	22:51	0:0	2	;
water	23:4	0:0	2	pi_table
op	23:12	0:0	2	[
water	23:14	0:0	2	1
op	23:16	0:0	2	]
op	23:18	0:0	2	=
water	23:20	0:0	2	p_spu_data
op	23:30	0:0	2	->
water	23:32	0:0	2	pi_offset
op	23:41	0:0	2	[
water	23:43	0:0	2	1
op	23:45	0:0	2	]
op	23:47	0:0	2	<<
water	23:50	0:0	2	1
water	23:51	0:0	2	;
for	24:4	118:4	2	(i_y = 0 ;i_y < i_height;i_y ++)
forinit	24:9	24:17	3	i_y = 0 ;
water	24:9	0:0	4	i_y
op	24:13	0:0	4	=
water	24:15	0:0	4	0
water	24:17	0:0	4	;
cond	24:19	24:25	3	i_y < i_height
water	24:19	0:0	4	i_y
op	24:23	0:0	4	<
water	24:25	0:0	4	i_height
forexpr	24:36	24:39	3	i_y ++
water	24:36	0:0	4	i_y
op	24:39	0:0	4	++
stmts	25:4	118:4	3	
water	25:4	0:0	4	{
decl	26:8	26:27	4	unsigned int	i_code
water	27:8	0:0	4	pi_offset
op	27:18	0:0	4	=
water	27:20	0:0	4	pi_table
op	27:29	0:0	4	+
water	27:31	0:0	4	i_id
water	27:35	0:0	4	;
for	28:8	104:8	4	(i_x = 0 ;i_x < i_width;i_x += i_code >> 2)
forinit	28:13	28:21	5	i_x = 0 ;
water	28:13	0:0	6	i_x
op	28:17	0:0	6	=
water	28:19	0:0	6	0
water	28:21	0:0	6	;
cond	28:23	28:29	5	i_x < i_width
water	28:23	0:0	6	i_x
op	28:27	0:0	6	<
water	28:29	0:0	6	i_width
forexpr	28:39	28:56	5	i_x += i_code >> 2
water	28:39	0:0	6	i_x
op	28:43	0:0	6	+=
water	28:46	0:0	6	i_code
op	28:53	0:0	6	>>
water	28:56	0:0	6	2
stmts	29:8	104:8	5	
water	29:8	0:0	6	{
water	30:12	0:0	6	i_code
op	30:19	0:0	6	=
water	30:21	0:0	6	0
water	30:22	0:0	6	;
for	31:12	39:12	6	( unsigned int i_min = 1 ;i_min <= 0 x40 && i_code < i_min;i_min <<= 2)
forinit	0:0	31:39	7	 unsigned int i_min = 1 ;
decl	31:17	31:39	8	unsigned int	i_min
op	31:36	0:0	8	=
water	31:38	0:0	8	1
cond	31:41	31:67	7	i_min <= 0 x40 && i_code < i_min
water	31:41	0:0	8	i_min
op	31:47	0:0	8	<=
water	31:50	0:0	8	0
water	31:51	0:0	8	x40
op	31:55	0:0	8	&&
water	31:58	0:0	8	i_code
op	31:65	0:0	8	<
water	31:67	0:0	8	i_min
forexpr	31:74	31:84	7	i_min <<= 2
water	31:74	0:0	8	i_min
op	31:80	0:0	8	<<=
water	31:84	0:0	8	2
stmts	32:12	39:12	7	
water	32:12	0:0	8	{
if	33:16	37:16	8	(( * pi_offset >> 1 ) >= p_sys -> i_spu_size)
cond	33:20	33:48	9	( * pi_offset >> 1 ) >= p_sys -> i_spu_size
water	33:20	0:0	10	(
op	33:21	0:0	10	*
water	33:22	0:0	10	pi_offset
op	33:32	0:0	10	>>
water	33:35	0:0	10	1
water	33:36	0:0	10	)
op	33:38	0:0	10	>=
water	33:41	0:0	10	p_sys
op	33:46	0:0	10	->
water	33:48	0:0	10	i_spu_size
stmts	34:16	37:16	9	
water	34:16	0:0	10	{
call	35:20	35:70	10	msg_Err
arg	35:29	35:34	11	p_dec
water	35:29	0:0	12	p_dec
arg	35:36	35:70	11	"out of bounds while reading rle"
water	35:36	0:0	12	"out of bounds while reading rle"
water	35:71	0:0	10	;
return	36:20	36:39	10	VLC_EGENERIC
water	36:27	0:0	11	VLC_EGENERIC
water	37:16	0:0	10	}
water	38:16	0:0	8	i_code
op	38:23	0:0	8	=
call	38:25	38:73	8	AddNibble
arg	38:36	38:42	9	i_code
water	38:36	0:0	10	i_code
arg	38:44	38:61	9	&p_sys->buffer[4]
op	38:44	0:0	10	&
water	38:45	0:0	10	p_sys
op	38:50	0:0	10	->
water	38:52	0:0	10	buffer
op	38:58	0:0	10	[
water	38:59	0:0	10	4
op	38:60	0:0	10	]
arg	38:63	38:73	9	pi_offset
water	38:63	0:0	10	pi_offset
water	38:74	0:0	8	;
water	39:12	0:0	8	}
if	40:12	45:12	6	(i_code < 0 x0004)
cond	40:16	40:26	7	i_code < 0 x0004
water	40:16	0:0	8	i_code
op	40:23	0:0	8	<
water	40:25	0:0	8	0
water	40:26	0:0	8	x0004
stmts	41:12	45:12	7	
water	41:12	0:0	8	{
water	44:16	0:0	8	i_code
op	44:23	0:0	8	|=
water	44:26	0:0	8	(
water	44:28	0:0	8	i_width
op	44:36	0:0	8	-
water	44:38	0:0	8	i_x
water	44:42	0:0	8	)
op	44:44	0:0	8	<<
water	44:47	0:0	8	2
water	44:48	0:0	8	;
water	45:12	0:0	8	}
if	46:12	51:12	6	(( ( i_code >> 2 ) + i_x + i_y * i_width ) > i_height * i_width)
cond	46:16	46:69	7	( ( i_code >> 2 ) + i_x + i_y * i_width ) > i_height * i_width
water	46:16	0:0	8	(
water	46:18	0:0	8	(
water	46:19	0:0	8	i_code
op	46:26	0:0	8	>>
water	46:29	0:0	8	2
water	46:30	0:0	8	)
op	46:32	0:0	8	+
water	46:34	0:0	8	i_x
op	46:38	0:0	8	+
water	46:40	0:0	8	i_y
op	46:44	0:0	8	*
water	46:46	0:0	8	i_width
water	46:54	0:0	8	)
op	46:56	0:0	8	>
water	46:58	0:0	8	i_height
op	46:67	0:0	8	*
water	46:69	0:0	8	i_width
stmts	47:12	51:12	7	
water	47:12	0:0	8	{
call	48:16	49:66	8	msg_Err
arg	48:25	48:30	9	p_dec
water	48:25	0:0	10	p_dec
arg	48:32	48:78	9	"out of bounds, %i at (%i,%i) is out of %ix%i"
water	48:32	0:0	10	"out of bounds, %i at (%i,%i) is out of %ix%i"
arg	49:25	49:36	9	i_code>>2
water	49:25	0:0	10	i_code
op	49:32	0:0	10	>>
water	49:35	0:0	10	2
arg	49:38	49:41	9	i_x
water	49:38	0:0	10	i_x
arg	49:43	49:46	9	i_y
water	49:43	0:0	10	i_y
arg	49:48	49:55	9	i_width
water	49:48	0:0	10	i_width
arg	49:57	49:66	9	i_height
water	49:57	0:0	10	i_height
water	49:67	0:0	8	;
return	50:16	50:35	8	VLC_EGENERIC
water	50:23	0:0	9	VLC_EGENERIC
water	51:12	0:0	8	}
if	53:12	57:12	6	(p_spu_data -> pi_alpha [ i_code & 0 x3 ] != 0 x00)
cond	53:16	53:57	7	p_spu_data -> pi_alpha [ i_code & 0 x3 ] != 0 x00
water	53:16	0:0	8	p_spu_data
op	53:26	0:0	8	->
water	53:28	0:0	8	pi_alpha
op	53:36	0:0	8	[
water	53:38	0:0	8	i_code
op	53:45	0:0	8	&
water	53:47	0:0	8	0
water	53:48	0:0	8	x3
op	53:51	0:0	8	]
op	53:53	0:0	8	!=
water	53:56	0:0	8	0
water	53:57	0:0	8	x00
stmts	54:12	57:12	7	
water	54:12	0:0	8	{
water	55:16	0:0	8	i_border
op	55:25	0:0	8	=
water	55:27	0:0	8	i_code
op	55:34	0:0	8	&
water	55:36	0:0	8	0
water	55:37	0:0	8	x3
water	55:39	0:0	8	;
water	56:16	0:0	8	stats
op	56:21	0:0	8	[
water	56:22	0:0	8	i_border
op	56:30	0:0	8	]
op	56:32	0:0	8	+=
water	56:35	0:0	8	i_code
op	56:42	0:0	8	>>
water	56:45	0:0	8	2
water	56:46	0:0	8	;
water	57:12	0:0	8	}
if	59:12	99:12	6	(p_spu_data -> b_auto_crop)
cond	59:16	59:28	7	p_spu_data -> b_auto_crop
water	59:16	0:0	8	p_spu_data
op	59:26	0:0	8	->
water	59:28	0:0	8	b_auto_crop
stmts	60:12	99:12	7	
water	60:12	0:0	8	{
if	61:16	75:16	8	(! i_y)
cond	61:20	61:21	9	! i_y
op	61:20	0:0	10	!
water	61:21	0:0	10	i_y
stmts	62:16	75:16	9	
water	62:16	0:0	10	{
if	66:20	70:20	10	(( i_code >> 2 ) == i_width && p_spu_data -> pi_alpha [ i_code & 0 x3 ] == 0 x00)
cond	66:24	67:65	11	( i_code >> 2 ) == i_width && p_spu_data -> pi_alpha [ i_code & 0 x3 ] == 0 x00
water	66:24	0:0	12	(
water	66:25	0:0	12	i_code
op	66:32	0:0	12	>>
water	66:35	0:0	12	2
water	66:36	0:0	12	)
op	66:38	0:0	12	==
water	66:41	0:0	12	i_width
op	66:49	0:0	12	&&
water	67:24	0:0	12	p_spu_data
op	67:34	0:0	12	->
water	67:36	0:0	12	pi_alpha
op	67:44	0:0	12	[
water	67:46	0:0	12	i_code
op	67:53	0:0	12	&
water	67:55	0:0	12	0
water	67:56	0:0	12	x3
op	67:59	0:0	12	]
op	67:61	0:0	12	==
water	67:64	0:0	12	0
water	67:65	0:0	12	x00
stmts	68:20	70:20	11	
water	68:20	0:0	12	{
water	69:24	0:0	12	i_transparent_code
op	69:43	0:0	12	=
water	69:45	0:0	12	i_code
water	69:51	0:0	12	;
water	70:20	0:0	12	}
else	71:20	74:20	10
stmts	72:20	74:20	11	
water	72:20	0:0	12	{
water	73:24	0:0	12	p_spu_data
op	73:34	0:0	12	->
water	73:36	0:0	12	b_auto_crop
op	73:48	0:0	12	=
water	73:50	0:0	12	false
water	73:55	0:0	12	;
water	74:20	0:0	12	}
water	75:16	0:0	10	}
if	76:16	90:16	8	(i_code == i_transparent_code)
cond	76:20	76:30	9	i_code == i_transparent_code
water	76:20	0:0	10	i_code
op	76:27	0:0	10	==
water	76:30	0:0	10	i_transparent_code
stmts	77:16	90:16	9	
water	77:16	0:0	10	{
if	78:20	82:20	10	(b_empty_top)
cond	78:24	78:24	11	b_empty_top
water	78:24	0:0	12	b_empty_top
stmts	79:20	82:20	11	
water	79:20	0:0	12	{
water	81:22	0:0	12	i_skipped_top
op	81:35	0:0	12	++
water	81:37	0:0	12	;
water	82:20	0:0	12	}
else	83:20	89:20	10
stmts	84:20	89:20	11	
water	84:20	0:0	12	{
op	87:22	0:0	12	*
water	87:23	0:0	12	p_dest
op	87:29	0:0	12	++
op	87:32	0:0	12	=
water	87:34	0:0	12	i_code
water	87:40	0:0	12	;
water	88:22	0:0	12	i_skipped_bottom
op	88:38	0:0	12	++
water	88:40	0:0	12	;
water	89:20	0:0	12	}
water	90:16	0:0	10	}
else	91:16	98:16	8
stmts	92:16	98:16	9	
water	92:16	0:0	10	{
op	94:20	0:0	10	*
water	94:21	0:0	10	p_dest
op	94:27	0:0	10	++
op	94:30	0:0	10	=
water	94:32	0:0	10	i_code
water	94:38	0:0	10	;
water	96:20	0:0	10	b_empty_top
op	96:32	0:0	10	=
water	96:34	0:0	10	false
water	96:39	0:0	10	;
water	97:20	0:0	10	i_skipped_bottom
op	97:37	0:0	10	=
water	97:39	0:0	10	0
water	97:40	0:0	10	;
water	98:16	0:0	10	}
water	99:12	0:0	8	}
else	100:12	103:12	6
stmts	101:12	103:12	7	
water	101:12	0:0	8	{
op	102:16	0:0	8	*
water	102:17	0:0	8	p_dest
op	102:23	0:0	8	++
op	102:26	0:0	8	=
water	102:28	0:0	8	i_code
water	102:34	0:0	8	;
water	103:12	0:0	8	}
water	104:8	0:0	6	}
if	106:8	110:8	4	(i_x > i_width)
cond	106:12	106:18	5	i_x > i_width
water	106:12	0:0	6	i_x
op	106:16	0:0	6	>
water	106:18	0:0	6	i_width
stmts	107:8	110:8	5	
water	107:8	0:0	6	{
call	108:12	108:68	6	msg_Err
arg	108:21	108:26	7	p_dec
water	108:21	0:0	8	p_dec
arg	108:28	108:53	7	"i_x overflowed, %i > %i"
water	108:28	0:0	8	"i_x overflowed, %i > %i"
arg	108:55	108:58	7	i_x
water	108:55	0:0	8	i_x
arg	108:60	108:68	7	i_width
water	108:60	0:0	8	i_width
water	108:69	0:0	6	;
return	109:12	109:31	6	VLC_EGENERIC
water	109:19	0:0	7	VLC_EGENERIC
water	110:8	0:0	6	}
if	112:8	115:8	4	(* pi_offset & 0 x1)
cond	112:12	112:26	5	* pi_offset & 0 x1
op	112:12	0:0	6	*
water	112:13	0:0	6	pi_offset
op	112:23	0:0	6	&
water	112:25	0:0	6	0
water	112:26	0:0	6	x1
stmts	113:8	115:8	5	
water	113:8	0:0	6	{
water	114:12	0:0	6	(
op	114:13	0:0	6	*
water	114:14	0:0	6	pi_offset
water	114:23	0:0	6	)
op	114:24	0:0	6	++
water	114:26	0:0	6	;
water	115:8	0:0	6	}
water	117:8	0:0	4	i_id
op	117:13	0:0	4	=
water	117:15	0:0	4	~i_id
op	117:21	0:0	4	&
water	117:23	0:0	4	0
water	117:24	0:0	4	x1
water	117:26	0:0	4	;
water	118:4	0:0	4	}
if	120:4	132:4	2	(i_y < i_height)
cond	120:8	120:14	3	i_y < i_height
water	120:8	0:0	4	i_y
op	120:12	0:0	4	<
water	120:14	0:0	4	i_height
stmts	121:4	132:4	3	
water	121:4	0:0	4	{
call	122:8	122:62	4	msg_Err
arg	122:17	122:22	5	p_dec
water	122:17	0:0	6	p_dec
arg	122:24	122:62	5	"padding bytes found in RLE sequence"
water	122:24	0:0	6	"padding bytes found in RLE sequence"
water	122:63	0:0	4	;
call	123:8	124:54	4	msg_Err
arg	123:17	123:22	5	p_dec
water	123:17	0:0	6	p_dec
arg	123:24	124:54	5	"send mail to <sam@zoy.org> if you ""want to help debugging this"
water	123:24	0:0	6	"send mail to <sam@zoy.org> if you "
water	124:24	0:0	6	"want to help debugging this"
water	124:55	0:0	4	;
while	126:8	130:8	4	(i_y < i_height)
cond	126:15	126:21	5	i_y < i_height
water	126:15	0:0	6	i_y
op	126:19	0:0	6	<
water	126:21	0:0	6	i_height
stmts	127:8	130:8	5	
water	127:8	0:0	6	{
op	128:12	0:0	6	*
water	128:13	0:0	6	p_dest
op	128:19	0:0	6	++
op	128:22	0:0	6	=
water	128:24	0:0	6	i_width
op	128:32	0:0	6	<<
water	128:35	0:0	6	2
water	128:36	0:0	6	;
water	129:12	0:0	6	i_y
op	129:15	0:0	6	++
water	129:17	0:0	6	;
water	130:8	0:0	6	}
return	131:8	131:27	4	VLC_EGENERIC
water	131:15	0:0	5	VLC_EGENERIC
water	132:4	0:0	4	}
call	134:4	135:69	2	msg_Dbg
arg	134:13	134:18	3	p_dec
water	134:13	0:0	4	p_dec
arg	134:20	134:66	3	"valid subtitle, size: %ix%i, position: %i,%i"
water	134:20	0:0	4	"valid subtitle, size: %ix%i, position: %i,%i"
arg	135:13	135:27	3	p_spu->i_width
water	135:13	0:0	4	p_spu
op	135:18	0:0	4	->
water	135:20	0:0	4	i_width
arg	135:29	135:44	3	p_spu->i_height
water	135:29	0:0	4	p_spu
op	135:34	0:0	4	->
water	135:36	0:0	4	i_height
arg	135:46	135:56	3	p_spu->i_x
water	135:46	0:0	4	p_spu
op	135:51	0:0	4	->
water	135:53	0:0	4	i_x
arg	135:58	135:69	3	p_spu->i_y
water	135:58	0:0	4	p_spu
op	135:63	0:0	4	->
water	135:65	0:0	4	i_y
water	135:70	0:0	2	;
if	138:4	150:4	2	(i_skipped_top || i_skipped_bottom)
cond	138:8	138:25	3	i_skipped_top || i_skipped_bottom
water	138:8	0:0	4	i_skipped_top
op	138:22	0:0	4	||
water	138:25	0:0	4	i_skipped_bottom
stmts	139:4	150:4	3	
water	139:4	0:0	4	{
decl	141:8	141:44	4	int	i_y
op	141:16	0:0	4	=
water	141:18	0:0	4	p_spu
op	141:23	0:0	4	->
water	141:25	0:0	4	i_y
op	141:29	0:0	4	+
water	141:31	0:0	4	i_skipped_top
decl	142:8	142:75	4	int	i_height
op	142:21	0:0	4	=
water	142:23	0:0	4	p_spu
op	142:28	0:0	4	->
water	142:30	0:0	4	i_height
op	142:39	0:0	4	-
water	142:41	0:0	4	(
water	142:42	0:0	4	i_skipped_top
op	142:56	0:0	4	+
water	142:58	0:0	4	i_skipped_bottom
water	142:74	0:0	4	)
water	144:8	0:0	4	p_spu_data
op	144:18	0:0	4	->
water	144:20	0:0	4	i_y_top_offset
op	144:35	0:0	4	=
water	144:37	0:0	4	i_skipped_top
water	144:50	0:0	4	;
water	145:8	0:0	4	p_spu_data
op	145:18	0:0	4	->
water	145:20	0:0	4	i_y_bottom_offset
op	145:38	0:0	4	=
water	145:40	0:0	4	i_skipped_bottom
water	145:56	0:0	4	;
call	147:8	148:59	4	msg_Dbg
arg	147:17	147:22	5	p_dec
water	147:17	0:0	6	p_dec
arg	147:24	147:60	5	"cropped to: %ix%i, position: %i,%i"
water	147:24	0:0	6	"cropped to: %ix%i, position: %i,%i"
arg	148:17	148:31	5	p_spu->i_width
water	148:17	0:0	6	p_spu
op	148:22	0:0	6	->
water	148:24	0:0	6	i_width
arg	148:33	148:41	5	i_height
water	148:33	0:0	6	i_height
arg	148:43	148:53	5	p_spu->i_x
water	148:43	0:0	6	p_spu
op	148:48	0:0	6	->
water	148:50	0:0	6	i_x
arg	148:55	148:59	5	i_y
water	148:55	0:0	6	i_y
water	148:60	0:0	4	;
water	150:4	0:0	4	}
if	152:4	204:4	2	(! p_spu_data -> b_palette)
cond	152:8	152:21	3	! p_spu_data -> b_palette
op	152:8	0:0	4	!
water	152:9	0:0	4	p_spu_data
op	152:19	0:0	4	->
water	152:21	0:0	4	b_palette
stmts	153:4	204:4	3	
water	153:4	0:0	4	{
decl	154:8	154:41	4	int	i
water	154:13	0:0	4	,
decl	154:8	154:41	4	int	i_inner
op	154:23	0:0	4	=
op	154:25	0:0	4	-
water	154:26	0:0	4	1
water	154:27	0:0	4	,
decl	154:8	154:41	4	int	i_shade
op	154:37	0:0	4	=
op	154:39	0:0	4	-
water	154:40	0:0	4	1
if	156:8	162:8	4	(i_border != - 1)
cond	156:12	156:25	5	i_border != - 1
water	156:12	0:0	6	i_border
op	156:21	0:0	6	!=
op	156:24	0:0	6	-
water	156:25	0:0	6	1
stmts	157:8	162:8	5	
water	157:8	0:0	6	{
water	158:12	0:0	6	p_spu_data
op	158:22	0:0	6	->
water	158:24	0:0	6	pi_yuv
op	158:30	0:0	6	[
water	158:31	0:0	6	i_border
op	158:39	0:0	6	]
op	158:40	0:0	6	[
water	158:41	0:0	6	0
op	158:42	0:0	6	]
op	158:44	0:0	6	=
water	158:46	0:0	6	0
water	158:47	0:0	6	x00
water	158:50	0:0	6	;
water	159:12	0:0	6	p_spu_data
op	159:22	0:0	6	->
water	159:24	0:0	6	pi_yuv
op	159:30	0:0	6	[
water	159:31	0:0	6	i_border
op	159:39	0:0	6	]
op	159:40	0:0	6	[
water	159:41	0:0	6	1
op	159:42	0:0	6	]
op	159:44	0:0	6	=
water	159:46	0:0	6	0
water	159:47	0:0	6	x80
water	159:50	0:0	6	;
water	160:12	0:0	6	p_spu_data
op	160:22	0:0	6	->
water	160:24	0:0	6	pi_yuv
op	160:30	0:0	6	[
water	160:31	0:0	6	i_border
op	160:39	0:0	6	]
op	160:40	0:0	6	[
water	160:41	0:0	6	2
op	160:42	0:0	6	]
op	160:44	0:0	6	=
water	160:46	0:0	6	0
water	160:47	0:0	6	x80
water	160:50	0:0	6	;
water	161:12	0:0	6	stats
op	161:17	0:0	6	[
water	161:18	0:0	6	i_border
op	161:26	0:0	6	]
op	161:28	0:0	6	=
water	161:30	0:0	6	0
water	161:31	0:0	6	;
water	162:8	0:0	6	}
for	164:8	170:8	4	(i = 0 ;i < 4 && i_inner == - 1;i ++)
forinit	164:13	164:19	5	i = 0 ;
water	164:13	0:0	6	i
op	164:15	0:0	6	=
water	164:17	0:0	6	0
water	164:19	0:0	6	;
cond	164:21	164:42	5	i < 4 && i_inner == - 1
water	164:21	0:0	6	i
op	164:23	0:0	6	<
water	164:25	0:0	6	4
op	164:27	0:0	6	&&
water	164:30	0:0	6	i_inner
op	164:38	0:0	6	==
op	164:41	0:0	6	-
water	164:42	0:0	6	1
forexpr	164:46	164:47	5	i ++
water	164:46	0:0	6	i
op	164:47	0:0	6	++
stmts	165:8	170:8	5	
water	165:8	0:0	6	{
if	166:12	169:12	6	(stats [ i ])
cond	166:16	166:23	7	stats [ i ]
water	166:16	0:0	8	stats
op	166:21	0:0	8	[
water	166:22	0:0	8	i
op	166:23	0:0	8	]
stmts	167:12	169:12	7	
water	167:12	0:0	8	{
water	168:16	0:0	8	i_inner
op	168:24	0:0	8	=
water	168:26	0:0	8	i
water	168:27	0:0	8	;
water	169:12	0:0	8	}
water	170:8	0:0	6	}
for	171:8	185:8	4	(;i < 4 && i_shade == - 1;i ++)
forinit	171:19	171:19	5	;
water	171:19	0:0	6	;
cond	171:21	171:42	5	i < 4 && i_shade == - 1
water	171:21	0:0	6	i
op	171:23	0:0	6	<
water	171:25	0:0	6	4
op	171:27	0:0	6	&&
water	171:30	0:0	6	i_shade
op	171:38	0:0	6	==
op	171:41	0:0	6	-
water	171:42	0:0	6	1
forexpr	171:46	171:47	5	i ++
water	171:46	0:0	6	i
op	171:47	0:0	6	++
stmts	172:8	185:8	5	
water	172:8	0:0	6	{
if	173:12	184:12	6	(stats [ i ])
cond	173:16	173:23	7	stats [ i ]
water	173:16	0:0	8	stats
op	173:21	0:0	8	[
water	173:22	0:0	8	i
op	173:23	0:0	8	]
stmts	174:12	184:12	7	
water	174:12	0:0	8	{
if	175:16	179:16	8	(stats [ i ] > stats [ i_inner ])
cond	175:20	175:44	9	stats [ i ] > stats [ i_inner ]
water	175:20	0:0	10	stats
op	175:25	0:0	10	[
water	175:26	0:0	10	i
op	175:27	0:0	10	]
op	175:29	0:0	10	>
water	175:31	0:0	10	stats
op	175:36	0:0	10	[
water	175:37	0:0	10	i_inner
op	175:44	0:0	10	]
stmts	176:16	179:16	9	
water	176:16	0:0	10	{
water	177:20	0:0	10	i_shade
op	177:28	0:0	10	=
water	177:30	0:0	10	i_inner
water	177:37	0:0	10	;
water	178:20	0:0	10	i_inner
op	178:28	0:0	10	=
water	178:30	0:0	10	i
water	178:31	0:0	10	;
water	179:16	0:0	10	}
else	180:16	183:16	8
stmts	181:16	183:16	9	
water	181:16	0:0	10	{
water	182:20	0:0	10	i_shade
op	182:28	0:0	10	=
water	182:30	0:0	10	i
water	182:31	0:0	10	;
water	183:16	0:0	10	}
water	184:12	0:0	8	}
water	185:8	0:0	6	}
if	187:8	192:8	4	(i_inner != - 1)
cond	187:12	187:24	5	i_inner != - 1
water	187:12	0:0	6	i_inner
op	187:20	0:0	6	!=
op	187:23	0:0	6	-
water	187:24	0:0	6	1
stmts	188:8	192:8	5	
water	188:8	0:0	6	{
water	189:12	0:0	6	p_spu_data
op	189:22	0:0	6	->
water	189:24	0:0	6	pi_yuv
op	189:30	0:0	6	[
water	189:31	0:0	6	i_inner
op	189:38	0:0	6	]
op	189:39	0:0	6	[
water	189:40	0:0	6	0
op	189:41	0:0	6	]
op	189:43	0:0	6	=
water	189:45	0:0	6	0
water	189:46	0:0	6	xff
water	189:49	0:0	6	;
water	190:12	0:0	6	p_spu_data
op	190:22	0:0	6	->
water	190:24	0:0	6	pi_yuv
op	190:30	0:0	6	[
water	190:31	0:0	6	i_inner
op	190:38	0:0	6	]
op	190:39	0:0	6	[
water	190:40	0:0	6	1
op	190:41	0:0	6	]
op	190:43	0:0	6	=
water	190:45	0:0	6	0
water	190:46	0:0	6	x80
water	190:49	0:0	6	;
water	191:12	0:0	6	p_spu_data
op	191:22	0:0	6	->
water	191:24	0:0	6	pi_yuv
op	191:30	0:0	6	[
water	191:31	0:0	6	i_inner
op	191:38	0:0	6	]
op	191:39	0:0	6	[
water	191:40	0:0	6	2
op	191:41	0:0	6	]
op	191:43	0:0	6	=
water	191:45	0:0	6	0
water	191:46	0:0	6	x80
water	191:49	0:0	6	;
water	192:8	0:0	6	}
if	194:8	199:8	4	(i_shade != - 1)
cond	194:12	194:24	5	i_shade != - 1
water	194:12	0:0	6	i_shade
op	194:20	0:0	6	!=
op	194:23	0:0	6	-
water	194:24	0:0	6	1
stmts	195:8	199:8	5	
water	195:8	0:0	6	{
water	196:12	0:0	6	p_spu_data
op	196:22	0:0	6	->
water	196:24	0:0	6	pi_yuv
op	196:30	0:0	6	[
water	196:31	0:0	6	i_shade
op	196:38	0:0	6	]
op	196:39	0:0	6	[
water	196:40	0:0	6	0
op	196:41	0:0	6	]
op	196:43	0:0	6	=
water	196:45	0:0	6	0
water	196:46	0:0	6	x80
water	196:49	0:0	6	;
water	197:12	0:0	6	p_spu_data
op	197:22	0:0	6	->
water	197:24	0:0	6	pi_yuv
op	197:30	0:0	6	[
water	197:31	0:0	6	i_shade
op	197:38	0:0	6	]
op	197:39	0:0	6	[
water	197:40	0:0	6	1
op	197:41	0:0	6	]
op	197:43	0:0	6	=
water	197:45	0:0	6	0
water	197:46	0:0	6	x80
water	197:49	0:0	6	;
water	198:12	0:0	6	p_spu_data
op	198:22	0:0	6	->
water	198:24	0:0	6	pi_yuv
op	198:30	0:0	6	[
water	198:31	0:0	6	i_shade
op	198:38	0:0	6	]
op	198:39	0:0	6	[
water	198:40	0:0	6	2
op	198:41	0:0	6	]
op	198:43	0:0	6	=
water	198:45	0:0	6	0
water	198:46	0:0	6	x80
water	198:49	0:0	6	;
water	199:8	0:0	6	}
call	201:8	202:44	4	msg_Dbg
arg	201:17	201:22	5	p_dec
water	201:17	0:0	6	p_dec
arg	201:24	201:78	5	"using custom palette (border %i, inner %i, shade %i)"
water	201:24	0:0	6	"using custom palette (border %i, inner %i, shade %i)"
arg	202:17	202:25	5	i_border
water	202:17	0:0	6	i_border
arg	202:27	202:34	5	i_inner
water	202:27	0:0	6	i_inner
arg	202:36	202:44	5	i_shade
water	202:36	0:0	6	i_shade
water	202:45	0:0	4	;
water	204:4	0:0	4	}
return	205:4	205:22	2	VLC_SUCCESS
water	205:11	0:0	3	VLC_SUCCESS
