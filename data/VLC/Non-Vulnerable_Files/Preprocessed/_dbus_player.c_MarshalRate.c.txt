func	1:0	17:0	0	static int	MarshalRate
params	2:11	0:0	1	
param	2:13	2:34	2	intf_thread_t *	p_intf
param	2:36	2:63	2	DBusMessageIter *	container
stmnts	0:0	16:22	1	
decl	4:4	4:17	2	double	d_rate
decl	5:4	5:55	2	input_thread_t	*p_input
op	5:28	0:0	2	=
call	5:30	5:54	3	pl_CurrentInput
arg	5:47	5:54	4	p_intf
water	5:47	0:0	5	p_intf
if	6:4	10:4	2	(p_input != NULL)
cond	6:8	6:19	3	p_input != NULL
water	6:8	0:0	4	p_input
op	6:16	0:0	4	!=
water	6:19	0:0	4	NULL
stmts	7:4	10:4	3	
water	7:4	0:0	4	{
water	8:8	0:0	4	d_rate
op	8:15	0:0	4	=
call	8:17	8:47	4	var_GetFloat
arg	8:31	8:38	5	p_input
water	8:31	0:0	6	p_input
arg	8:40	8:47	5	"rate"
water	8:40	0:0	6	"rate"
water	8:48	0:0	4	;
call	9:8	9:52	4	vlc_object_release
arg	9:28	9:52	5	(vlc_object_t*)p_input
water	9:28	0:0	6	(
water	9:29	0:0	6	vlc_object_t
op	9:41	0:0	6	*
water	9:42	0:0	6	)
water	9:44	0:0	6	p_input
water	9:53	0:0	4	;
water	10:4	0:0	4	}
else	11:4	12:20	2
stmts	12:8	12:20	3	
water	12:8	0:0	4	d_rate
op	12:15	0:0	4	=
water	12:17	0:0	4	1
op	12:18	0:0	4	.
water	12:19	0:0	4	0
water	12:20	0:0	4	;
if	13:4	15:25	2	(!dbus_message_iter_append_basic (container ,DBUS_TYPE_DOUBLE ,& d_rate ))
cond	13:8	14:49	3	!dbus_message_iter_append_basic (container ,DBUS_TYPE_DOUBLE ,& d_rate )
op	13:8	0:0	4	!
call	13:9	14:49	4	dbus_message_iter_append_basic
arg	13:41	13:50	5	container
water	13:41	0:0	6	container
arg	13:52	13:68	5	DBUS_TYPE_DOUBLE
water	13:52	0:0	6	DBUS_TYPE_DOUBLE
arg	14:41	14:49	5	&d_rate
op	14:41	0:0	6	&
water	14:42	0:0	6	d_rate
stmts	15:8	15:25	3	
return	15:8	15:25	4	VLC_ENOMEM
water	15:15	0:0	5	VLC_ENOMEM
return	16:4	16:22	2	VLC_SUCCESS
water	16:11	0:0	3	VLC_SUCCESS
