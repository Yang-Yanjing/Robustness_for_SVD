func	2:0	59:0	0	block_t *	block_File
params	2:20	0:0	1	
param	2:21	2:27	2	int	fd
stmnts	0:0	58:16	1	
decl	4:4	4:17	2	size_t	length
decl	5:4	5:18	2	struct stat	st
if	7:4	8:19	2	(fstat (fd ,& st ))
cond	7:8	7:22	3	fstat (fd ,& st )
call	7:8	7:22	4	fstat
arg	7:15	7:17	5	fd
water	7:15	0:0	6	fd
arg	7:19	7:22	5	&st
op	7:19	0:0	6	&
water	7:20	0:0	6	st
stmts	8:8	8:19	3	
return	8:8	8:19	4	NULL
water	8:15	0:0	5	NULL
if	15:4	19:4	2	(S_ISDIR (st . st_mode ))
cond	15:8	15:27	3	S_ISDIR (st . st_mode )
call	15:8	15:27	4	S_ISDIR
arg	15:17	15:27	5	st.st_mode
water	15:17	0:0	6	st
op	15:19	0:0	6	.
water	15:20	0:0	6	st_mode
stmts	16:4	19:4	3	
water	16:4	0:0	4	{
water	17:8	0:0	4	errno
op	17:14	0:0	4	=
water	17:16	0:0	4	EISDIR
water	17:22	0:0	4	;
return	18:8	18:19	4	NULL
water	18:15	0:0	5	NULL
water	19:4	0:0	4	}
if	20:4	24:4	2	(!S_ISREG (st . st_mode ) && !S_TYPEISSHM (& st ))
cond	20:8	20:50	3	!S_ISREG (st . st_mode ) && !S_TYPEISSHM (& st )
op	20:8	0:0	4	!
call	20:9	20:28	4	S_ISREG
arg	20:18	20:28	5	st.st_mode
water	20:18	0:0	6	st
op	20:20	0:0	6	.
water	20:21	0:0	6	st_mode
op	20:30	0:0	4	&&
op	20:33	0:0	4	!
call	20:34	20:50	4	S_TYPEISSHM
arg	20:47	20:50	5	&st
op	20:47	0:0	6	&
water	20:48	0:0	6	st
stmts	21:4	24:4	3	
water	21:4	0:0	4	{
water	22:8	0:0	4	errno
op	22:14	0:0	4	=
water	22:16	0:0	4	ESPIPE
water	22:22	0:0	4	;
return	23:8	23:19	4	NULL
water	23:15	0:0	5	NULL
water	24:4	0:0	4	}
if	26:4	30:4	2	(( uintmax_t ) st . st_size >= SIZE_MAX)
cond	26:8	26:33	3	( uintmax_t ) st . st_size >= SIZE_MAX
water	26:8	0:0	4	(
water	26:9	0:0	4	uintmax_t
water	26:18	0:0	4	)
water	26:19	0:0	4	st
op	26:21	0:0	4	.
water	26:22	0:0	4	st_size
op	26:30	0:0	4	>=
water	26:33	0:0	4	SIZE_MAX
stmts	27:4	30:4	3	
water	27:4	0:0	4	{
water	28:8	0:0	4	errno
op	28:14	0:0	4	=
water	28:16	0:0	4	ENOMEM
water	28:22	0:0	4	;
return	29:8	29:19	4	NULL
water	29:15	0:0	5	NULL
water	30:4	0:0	4	}
water	31:4	0:0	2	length
op	31:11	0:0	2	=
water	31:13	0:0	2	(
water	31:14	0:0	2	size_t
water	31:20	0:0	2	)
water	31:21	0:0	2	st
op	31:23	0:0	2	.
water	31:24	0:0	2	st_size
water	31:31	0:0	2	;
if	33:4	39:4	2	(length > 0)
cond	33:8	33:17	3	length > 0
water	33:8	0:0	4	length
op	33:15	0:0	4	>
water	33:17	0:0	4	0
stmts	34:4	39:4	3	
water	34:4	0:0	4	{
decl	35:8	35:18	4	void	*addr
water	36:8	0:0	4	addr
op	36:13	0:0	4	=
call	36:15	36:75	4	mmap
arg	36:21	36:25	5	NULL
water	36:21	0:0	6	NULL
arg	36:27	36:33	5	length
water	36:27	0:0	6	length
arg	36:35	36:55	5	PROT_READ|PROT_WRITE
water	36:35	0:0	6	PROT_READ
op	36:44	0:0	6	|
water	36:45	0:0	6	PROT_WRITE
arg	36:57	36:68	5	MAP_PRIVATE
water	36:57	0:0	6	MAP_PRIVATE
arg	36:70	36:72	5	fd
water	36:70	0:0	6	fd
arg	36:74	36:75	5	0
water	36:74	0:0	6	0
water	36:76	0:0	4	;
if	37:8	38:50	4	(addr != MAP_FAILED)
cond	37:12	37:20	5	addr != MAP_FAILED
water	37:12	0:0	6	addr
op	37:17	0:0	6	!=
water	37:20	0:0	6	MAP_FAILED
stmts	38:12	38:50	5	
return	38:12	38:50	6	block_mmap_Alloc(addr,length)
call	38:19	38:49	7	block_mmap_Alloc
arg	38:37	38:41	8	addr
water	38:37	0:0	9	addr
arg	38:43	38:49	8	length
water	38:43	0:0	9	length
water	39:4	0:0	4	}
decl	42:4	42:41	2	block_t	*block
op	42:19	0:0	2	=
call	42:21	42:40	3	block_Alloc
arg	42:34	42:40	4	length
water	42:34	0:0	5	length
if	43:4	44:19	2	(block == NULL)
cond	43:8	43:17	3	block == NULL
water	43:8	0:0	4	block
op	43:14	0:0	4	==
water	43:17	0:0	4	NULL
stmts	44:8	44:19	3	
return	44:8	44:19	4	NULL
water	44:15	0:0	5	NULL
call	45:4	45:29	2	block_cleanup_push
arg	45:24	45:29	3	block
water	45:24	0:0	4	block
water	45:30	0:0	2	;
for	46:4	56:4	2	( size_t i = 0 ;i < length;)
forinit	0:0	46:21	3	 size_t i = 0 ;
decl	46:9	46:21	4	size_t	i
op	46:18	0:0	4	=
water	46:20	0:0	4	0
cond	46:23	46:27	3	i < length
water	46:23	0:0	4	i
op	46:25	0:0	4	<
water	46:27	0:0	4	length
forexpr	0:0	0:0	3	
stmts	47:4	56:4	3	
water	47:4	0:0	4	{
decl	48:8	48:68	4	ssize_t	len
op	48:20	0:0	4	=
call	48:22	48:67	5	pread
arg	48:29	48:31	6	fd
water	48:29	0:0	7	fd
arg	48:33	48:52	6	block->p_buffer+i
water	48:33	0:0	7	block
op	48:38	0:0	7	->
water	48:40	0:0	7	p_buffer
op	48:49	0:0	7	+
water	48:51	0:0	7	i
arg	48:54	48:64	6	length-i
water	48:54	0:0	7	length
op	48:61	0:0	7	-
water	48:63	0:0	7	i
arg	48:66	48:67	6	i
water	48:66	0:0	7	i
if	49:8	54:8	4	(len == - 1)
cond	49:12	49:20	5	len == - 1
water	49:12	0:0	6	len
op	49:16	0:0	6	==
op	49:19	0:0	6	-
water	49:20	0:0	6	1
stmts	50:8	54:8	5	
water	50:8	0:0	6	{
call	51:12	51:32	6	block_Release
arg	51:27	51:32	7	block
water	51:27	0:0	8	block
water	51:33	0:0	6	;
water	52:12	0:0	6	block
op	52:18	0:0	6	=
water	52:20	0:0	6	NULL
water	52:24	0:0	6	;
break	53:12	53:17	6	
water	54:8	0:0	6	}
water	55:8	0:0	4	i
op	55:10	0:0	4	+=
water	55:13	0:0	4	len
water	55:16	0:0	4	;
water	56:4	0:0	4	}
call	57:4	57:21	2	vlc_cleanup_pop
water	57:22	0:0	2	;
return	58:4	58:16	2	block
water	58:11	0:0	3	block
