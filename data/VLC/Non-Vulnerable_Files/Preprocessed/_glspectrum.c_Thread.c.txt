func	2:0	185:0	0	static void *	Thread
params	2:19	0:0	1	
param	2:21	2:34	2	void *	p_data
stmnts	0:0	184:15	1	
decl	4:4	4:43	2	filter_t	*p_filter
op	4:24	0:0	2	=
water	4:26	0:0	2	(
water	4:27	0:0	2	filter_t
op	4:35	0:0	2	*
water	4:36	0:0	2	)
water	4:37	0:0	2	p_data
decl	5:4	5:41	2	filter_sys_t	*p_sys
op	5:24	0:0	2	=
water	5:26	0:0	2	p_filter
op	5:34	0:0	2	->
water	5:36	0:0	2	p_sys
decl	6:4	6:22	2	video_format_t	fmt
decl	7:4	7:16	2	vlc_gl_t	*gl
decl	8:4	8:33	2	unsigned int	i_last_width
op	8:30	0:0	2	=
water	8:32	0:0	2	0
decl	9:4	9:34	2	unsigned int	i_last_height
op	9:31	0:0	2	=
water	9:33	0:0	2	0
water	11:4	0:0	2	p_sys
op	11:9	0:0	2	->
water	11:11	0:0	2	p_vout
op	11:18	0:0	2	=
water	12:8	0:0	2	(
water	12:9	0:0	2	vout_thread_t
op	12:23	0:0	2	*
water	12:24	0:0	2	)
call	12:25	12:74	2	vlc_object_create
arg	12:43	12:51	3	p_filter
water	12:43	0:0	4	p_filter
arg	12:53	12:74	3	sizeof(vout_thread_t)
op	12:53	0:0	4	sizeof
water	12:59	0:0	4	(
water	12:60	0:0	4	vout_thread_t
water	12:73	0:0	4	)
water	12:75	0:0	2	;
if	13:4	14:18	2	(! p_sys -> p_vout)
cond	13:8	13:16	3	! p_sys -> p_vout
op	13:8	0:0	4	!
water	13:9	0:0	4	p_sys
op	13:14	0:0	4	->
water	13:16	0:0	4	p_vout
stmts	14:8	14:18	3	
goto	14:8	14:18	4	error
water	14:13	0:0	5	error
call	16:4	16:29	2	video_format_Init
arg	16:22	16:26	3	&fmt
op	16:22	0:0	4	&
water	16:23	0:0	4	fmt
arg	16:28	16:29	3	0
water	16:28	0:0	4	0
water	16:30	0:0	2	;
call	17:4	18:61	2	video_format_Setup
arg	17:23	17:27	3	&fmt
op	17:23	0:0	4	&
water	17:24	0:0	4	fmt
arg	17:29	17:44	3	VLC_CODEC_RGB32
water	17:29	0:0	4	VLC_CODEC_RGB32
arg	17:46	17:60	3	p_sys->i_width
water	17:46	0:0	4	p_sys
op	17:51	0:0	4	->
water	17:53	0:0	4	i_width
arg	17:62	17:77	3	p_sys->i_height
water	17:62	0:0	4	p_sys
op	17:67	0:0	4	->
water	17:69	0:0	4	i_height
arg	18:23	18:37	3	p_sys->i_width
water	18:23	0:0	4	p_sys
op	18:28	0:0	4	->
water	18:30	0:0	4	i_width
arg	18:39	18:54	3	p_sys->i_height
water	18:39	0:0	4	p_sys
op	18:44	0:0	4	->
water	18:46	0:0	4	i_height
arg	18:56	18:57	3	0
water	18:56	0:0	4	0
arg	18:59	18:61	3	1
water	18:59	0:0	4	1
water	18:62	0:0	2	;
water	19:4	0:0	2	fmt
op	19:7	0:0	2	.
water	19:8	0:0	2	i_sar_num
op	19:18	0:0	2	=
water	19:20	0:0	2	1
water	19:21	0:0	2	;
water	20:4	0:0	2	fmt
op	20:7	0:0	2	.
water	20:8	0:0	2	i_sar_den
op	20:18	0:0	2	=
water	20:20	0:0	2	1
water	20:21	0:0	2	;
decl	22:4	22:30	2	vout_display_state_t	state
call	23:4	23:35	2	memset
arg	23:11	23:17	3	&state
op	23:11	0:0	4	&
water	23:12	0:0	4	state
arg	23:19	23:20	3	0
water	23:19	0:0	4	0
arg	23:22	23:35	3	sizeof(state)
op	23:22	0:0	4	sizeof
water	23:28	0:0	4	(
water	23:29	0:0	4	state
water	23:34	0:0	4	)
water	23:36	0:0	2	;
water	24:4	0:0	2	state
op	24:9	0:0	2	.
water	24:10	0:0	2	cfg
op	24:13	0:0	2	.
water	24:14	0:0	2	display
op	24:21	0:0	2	.
water	24:22	0:0	2	sar
op	24:25	0:0	2	.
water	24:26	0:0	2	num
op	24:30	0:0	2	=
water	24:32	0:0	2	1
water	24:33	0:0	2	;
water	25:4	0:0	2	state
op	25:9	0:0	2	.
water	25:10	0:0	2	cfg
op	25:13	0:0	2	.
water	25:14	0:0	2	display
op	25:21	0:0	2	.
water	25:22	0:0	2	sar
op	25:25	0:0	2	.
water	25:26	0:0	2	den
op	25:30	0:0	2	=
water	25:32	0:0	2	1
water	25:33	0:0	2	;
water	26:4	0:0	2	state
op	26:9	0:0	2	.
water	26:10	0:0	2	cfg
op	26:13	0:0	2	.
water	26:14	0:0	2	is_display_filled
op	26:32	0:0	2	=
water	26:34	0:0	2	true
water	26:38	0:0	2	;
water	27:4	0:0	2	state
op	27:9	0:0	2	.
water	27:10	0:0	2	cfg
op	27:13	0:0	2	.
water	27:14	0:0	2	zoom
op	27:18	0:0	2	.
water	27:19	0:0	2	num
op	27:23	0:0	2	=
water	27:25	0:0	2	1
water	27:26	0:0	2	;
water	28:4	0:0	2	state
op	28:9	0:0	2	.
water	28:10	0:0	2	cfg
op	28:13	0:0	2	.
water	28:14	0:0	2	zoom
op	28:18	0:0	2	.
water	28:19	0:0	2	den
op	28:23	0:0	2	=
water	28:25	0:0	2	1
water	28:26	0:0	2	;
water	29:4	0:0	2	state
op	29:9	0:0	2	.
water	29:10	0:0	2	sar
op	29:13	0:0	2	.
water	29:14	0:0	2	num
op	29:18	0:0	2	=
water	29:20	0:0	2	1
water	29:21	0:0	2	;
water	30:4	0:0	2	state
op	30:9	0:0	2	.
water	30:10	0:0	2	sar
op	30:13	0:0	2	.
water	30:14	0:0	2	den
op	30:18	0:0	2	=
water	30:20	0:0	2	1
water	30:21	0:0	2	;
water	31:4	0:0	2	p_sys
op	31:9	0:0	2	->
water	31:11	0:0	2	p_vd
op	31:16	0:0	2	=
call	31:18	32:60	2	vout_NewDisplay
arg	31:34	31:47	3	p_sys->p_vout
water	31:34	0:0	4	p_sys
op	31:39	0:0	4	->
water	31:41	0:0	4	p_vout
arg	31:49	31:53	3	&fmt
op	31:49	0:0	4	&
water	31:50	0:0	4	fmt
arg	31:55	31:61	3	&state
op	31:55	0:0	4	&
water	31:56	0:0	4	state
arg	32:34	32:42	3	"opengl"
water	32:34	0:0	4	"opengl"
arg	32:44	32:51	3	1000000
water	32:44	0:0	4	1000000
arg	32:53	32:60	3	1000000
water	32:53	0:0	4	1000000
water	32:61	0:0	2	;
if	33:4	37:4	2	(! p_sys -> p_vd)
cond	33:8	33:16	3	! p_sys -> p_vd
op	33:8	0:0	4	!
water	33:9	0:0	4	p_sys
op	33:14	0:0	4	->
water	33:16	0:0	4	p_vd
stmts	34:4	37:4	3	
water	34:4	0:0	4	{
call	35:8	35:40	4	vlc_object_release
arg	35:27	35:40	5	p_sys->p_vout
water	35:27	0:0	6	p_sys
op	35:32	0:0	6	->
water	35:34	0:0	6	p_vout
water	35:41	0:0	4	;
goto	36:8	36:18	4	error
water	36:13	0:0	5	error
water	37:4	0:0	4	}
water	38:4	0:0	2	gl
op	38:7	0:0	2	=
call	38:9	38:42	2	vout_GetDisplayOpengl
arg	38:31	38:42	3	p_sys->p_vd
water	38:31	0:0	4	p_sys
op	38:36	0:0	4	->
water	38:38	0:0	4	p_vd
water	38:43	0:0	2	;
if	39:4	44:4	2	(! gl)
cond	39:8	39:9	3	! gl
op	39:8	0:0	4	!
water	39:9	0:0	4	gl
stmts	40:4	44:4	3	
water	40:4	0:0	4	{
call	41:8	41:44	4	vout_DeleteDisplay
arg	41:27	41:38	5	p_sys->p_vd
water	41:27	0:0	6	p_sys
op	41:32	0:0	6	->
water	41:34	0:0	6	p_vd
arg	41:40	41:44	5	NULL
water	41:40	0:0	6	NULL
water	41:45	0:0	4	;
call	42:8	42:40	4	vlc_object_release
arg	42:27	42:40	5	p_sys->p_vout
water	42:27	0:0	6	p_sys
op	42:32	0:0	6	->
water	42:34	0:0	6	p_vout
water	42:41	0:0	4	;
goto	43:8	43:18	4	error
water	43:13	0:0	5	error
water	44:4	0:0	4	}
call	45:4	45:30	2	vlc_sem_post
arg	45:17	45:30	3	&p_sys->ready
op	45:17	0:0	4	&
water	45:18	0:0	4	p_sys
op	45:23	0:0	4	->
water	45:25	0:0	4	ready
water	45:31	0:0	2	;
call	46:4	46:25	2	vlc_gl_MakeCurrent
arg	46:23	46:25	3	gl
water	46:23	0:0	4	gl
water	46:26	0:0	2	;
call	47:4	47:20	2	initOpenGLScene
water	47:21	0:0	2	;
call	48:4	48:28	2	vlc_gl_ReleaseCurrent
arg	48:26	48:28	3	gl
water	48:26	0:0	4	gl
water	48:29	0:0	2	;
decl	49:4	49:32	2	float	height[NB_BANDS]
op	49:27	0:0	2	=
water	49:29	0:0	2	{
water	49:30	0:0	2	0
water	49:31	0:0	2	}
while	50:4	179:4	2	(1)
cond	50:11	50:11	3	1
water	50:11	0:0	4	1
stmts	51:4	179:4	3	
water	51:4	0:0	4	{
decl	52:8	52:51	4	block_t	*block
op	52:23	0:0	4	=
call	52:25	52:50	5	block_FifoGet
arg	52:39	52:50	6	p_sys->fifo
water	52:39	0:0	7	p_sys
op	52:44	0:0	7	->
water	52:46	0:0	7	fifo
decl	53:8	53:35	4	int	canc
op	53:17	0:0	4	=
call	53:19	53:34	5	vlc_savecancel
call	54:8	54:29	4	vlc_gl_MakeCurrent
arg	54:27	54:29	5	gl
water	54:27	0:0	6	gl
water	54:30	0:0	4	;
call	56:8	56:44	4	vout_ManageDisplay
arg	56:27	56:38	5	p_sys->p_vd
water	56:27	0:0	6	p_sys
op	56:32	0:0	6	->
water	56:34	0:0	6	p_vd
arg	56:40	56:44	5	true
water	56:40	0:0	6	true
water	56:45	0:0	4	;
if	57:8	66:8	4	(p_sys -> p_vd -> cfg -> display . width != i_last_width || p_sys -> p_vd -> cfg -> display . height != i_last_height)
cond	57:12	58:48	5	p_sys -> p_vd -> cfg -> display . width != i_last_width || p_sys -> p_vd -> cfg -> display . height != i_last_height
water	57:12	0:0	6	p_sys
op	57:17	0:0	6	->
water	57:19	0:0	6	p_vd
op	57:23	0:0	6	->
water	57:25	0:0	6	cfg
op	57:28	0:0	6	->
water	57:30	0:0	6	display
op	57:37	0:0	6	.
water	57:38	0:0	6	width
op	57:44	0:0	6	!=
water	57:47	0:0	6	i_last_width
op	57:60	0:0	6	||
water	58:12	0:0	6	p_sys
op	58:17	0:0	6	->
water	58:19	0:0	6	p_vd
op	58:23	0:0	6	->
water	58:25	0:0	6	cfg
op	58:28	0:0	6	->
water	58:30	0:0	6	display
op	58:37	0:0	6	.
water	58:38	0:0	6	height
op	58:45	0:0	6	!=
water	58:48	0:0	6	i_last_height
stmts	59:8	66:8	5	
water	59:8	0:0	6	{
decl	61:12	61:38	6	vout_display_place_t	place
call	62:12	63:61	6	vout_display_PlacePicture
arg	62:38	62:44	7	&place
op	62:38	0:0	8	&
water	62:39	0:0	8	place
arg	62:46	62:66	7	&p_sys->p_vd->source
op	62:46	0:0	8	&
water	62:47	0:0	8	p_sys
op	62:52	0:0	8	->
water	62:54	0:0	8	p_vd
op	62:58	0:0	8	->
water	62:60	0:0	8	source
arg	63:38	63:54	7	p_sys->p_vd->cfg
water	63:38	0:0	8	p_sys
op	63:43	0:0	8	->
water	63:45	0:0	8	p_vd
op	63:49	0:0	8	->
water	63:51	0:0	8	cfg
arg	63:56	63:61	7	false
water	63:56	0:0	8	false
water	63:62	0:0	6	;
water	64:12	0:0	6	i_last_width
op	64:26	0:0	6	=
water	64:28	0:0	6	p_sys
op	64:33	0:0	6	->
water	64:35	0:0	6	p_vd
op	64:39	0:0	6	->
water	64:41	0:0	6	cfg
op	64:44	0:0	6	->
water	64:46	0:0	6	display
op	64:53	0:0	6	.
water	64:54	0:0	6	width
water	64:59	0:0	6	;
water	65:12	0:0	6	i_last_height
op	65:26	0:0	6	=
water	65:28	0:0	6	p_sys
op	65:33	0:0	6	->
water	65:35	0:0	6	p_vd
op	65:39	0:0	6	->
water	65:41	0:0	6	cfg
op	65:44	0:0	6	->
water	65:46	0:0	6	display
op	65:53	0:0	6	.
water	65:54	0:0	6	height
water	65:60	0:0	6	;
water	66:8	0:0	6	}
water	68:8	0:0	4	const
water	68:14	0:0	4	unsigned
water	68:23	0:0	4	xscale
op	68:29	0:0	4	[
op	68:30	0:0	4	]
op	68:32	0:0	4	=
water	68:34	0:0	4	{
water	68:35	0:0	4	0
water	68:36	0:0	4	,
water	68:37	0:0	4	1
water	68:38	0:0	4	,
water	68:39	0:0	4	2
water	68:40	0:0	4	,
water	68:41	0:0	4	3
water	68:42	0:0	4	,
water	68:43	0:0	4	4
water	68:44	0:0	4	,
water	68:45	0:0	4	5
water	68:46	0:0	4	,
water	68:47	0:0	4	6
water	68:48	0:0	4	,
water	68:49	0:0	4	7
water	68:50	0:0	4	,
water	68:51	0:0	4	8
water	68:52	0:0	4	,
water	68:53	0:0	4	11
water	68:55	0:0	4	,
water	68:56	0:0	4	15
water	68:58	0:0	4	,
water	68:59	0:0	4	20
water	68:61	0:0	4	,
water	68:62	0:0	4	27
water	68:64	0:0	4	,
water	69:35	0:0	4	36
water	69:37	0:0	4	,
water	69:38	0:0	4	47
water	69:40	0:0	4	,
water	69:41	0:0	4	62
water	69:43	0:0	4	,
water	69:44	0:0	4	82
water	69:46	0:0	4	,
water	69:47	0:0	4	107
water	69:50	0:0	4	,
water	69:51	0:0	4	141
water	69:54	0:0	4	,
water	69:55	0:0	4	184
water	69:58	0:0	4	,
water	69:59	0:0	4	255
water	69:62	0:0	4	}
water	69:63	0:0	4	;
decl	70:8	70:33	4	fft_state	*p_state
op	70:27	0:0	4	=
water	70:29	0:0	4	NULL
call	71:8	71:36	4	DEFINE_WIND_CONTEXT
arg	71:28	71:36	5	wind_ctx
water	71:28	0:0	6	wind_ctx
water	71:37	0:0	4	;
water	72:8	0:0	4	unsigned
water	72:17	0:0	4	i
water	72:18	0:0	4	,
water	72:20	0:0	4	j
water	72:21	0:0	4	;
decl	73:8	73:39	4	float	p_output[FFT_BUFFER_SIZE]
decl	74:8	74:42	4	int16_t	p_buffer1[FFT_BUFFER_SIZE]
decl	76:8	76:39	4	int16_t	p_dest[FFT_BUFFER_SIZE]
decl	77:8	77:48	4	float	*p_buffl
op	77:23	0:0	4	=
water	77:25	0:0	4	(
water	77:26	0:0	4	float
op	77:31	0:0	4	*
water	77:32	0:0	4	)
water	77:33	0:0	4	block
op	77:38	0:0	4	->
water	77:40	0:0	4	p_buffer
decl	78:8	78:25	4	int16_t	*p_buffs
decl	79:8	79:28	4	int16_t	*p_s16_buff
if	80:8	83:8	4	(! block -> i_nb_samples)
cond	80:12	80:20	5	! block -> i_nb_samples
op	80:12	0:0	6	!
water	80:13	0:0	6	block
op	80:18	0:0	6	->
water	80:20	0:0	6	i_nb_samples
stmts	80:34	83:8	5	
water	80:34	0:0	6	{
call	81:12	81:46	6	msg_Err
arg	81:20	81:28	7	p_filter
water	81:20	0:0	8	p_filter
arg	81:30	81:46	7	"no samples yet"
water	81:30	0:0	8	"no samples yet"
water	81:47	0:0	6	;
goto	82:12	82:24	6	release
water	82:17	0:0	7	release
water	83:8	0:0	6	}
if	85:8	94:8	4	(block -> i_nb_samples != p_sys -> i_prev_nb_samples)
cond	85:12	85:42	5	block -> i_nb_samples != p_sys -> i_prev_nb_samples
water	85:12	0:0	6	block
op	85:17	0:0	6	->
water	85:19	0:0	6	i_nb_samples
op	85:32	0:0	6	!=
water	85:35	0:0	6	p_sys
op	85:40	0:0	6	->
water	85:42	0:0	6	i_prev_nb_samples
stmts	86:8	94:8	5	
water	86:8	0:0	6	{
call	87:12	87:39	6	free
arg	87:17	87:39	7	p_sys->p_prev_s16_buff
water	87:17	0:0	8	p_sys
op	87:22	0:0	8	->
water	87:24	0:0	8	p_prev_s16_buff
water	87:40	0:0	6	;
water	88:12	0:0	6	p_sys
op	88:17	0:0	6	->
water	88:19	0:0	6	p_prev_s16_buff
op	88:35	0:0	6	=
call	88:37	90:59	6	malloc
arg	88:44	90:59	7	block->i_nb_samples*p_sys->i_channels*sizeof(int16_t)
water	88:44	0:0	8	block
op	88:49	0:0	8	->
water	88:51	0:0	8	i_nb_samples
op	88:64	0:0	8	*
water	89:44	0:0	8	p_sys
op	89:49	0:0	8	->
water	89:51	0:0	8	i_channels
op	89:62	0:0	8	*
op	90:44	0:0	8	sizeof
water	90:50	0:0	8	(
water	90:51	0:0	8	int16_t
water	90:58	0:0	8	)
water	90:60	0:0	6	;
if	91:12	92:28	6	(! p_sys -> p_prev_s16_buff)
cond	91:16	91:24	7	! p_sys -> p_prev_s16_buff
op	91:16	0:0	8	!
water	91:17	0:0	8	p_sys
op	91:22	0:0	8	->
water	91:24	0:0	8	p_prev_s16_buff
stmts	92:16	92:28	7	
goto	92:16	92:28	8	release
water	92:21	0:0	9	release
water	93:12	0:0	6	p_sys
op	93:17	0:0	6	->
water	93:19	0:0	6	i_prev_nb_samples
op	93:37	0:0	6	=
water	93:39	0:0	6	block
op	93:44	0:0	6	->
water	93:46	0:0	6	i_nb_samples
water	93:58	0:0	6	;
water	94:8	0:0	6	}
water	95:8	0:0	4	p_buffs
op	95:16	0:0	4	=
water	95:18	0:0	4	p_s16_buff
op	95:29	0:0	4	=
water	95:31	0:0	4	p_sys
op	95:36	0:0	4	->
water	95:38	0:0	4	p_prev_s16_buff
water	95:53	0:0	4	;
for	98:8	109:8	4	(i = block -> i_nb_samples * p_sys -> i_channels ;i --;)
forinit	98:13	98:56	5	i = block -> i_nb_samples * p_sys -> i_channels ;
water	98:13	0:0	6	i
op	98:15	0:0	6	=
water	98:17	0:0	6	block
op	98:22	0:0	6	->
water	98:24	0:0	6	i_nb_samples
op	98:37	0:0	6	*
water	98:39	0:0	6	p_sys
op	98:44	0:0	6	->
water	98:46	0:0	6	i_channels
water	98:56	0:0	6	;
cond	98:58	98:59	5	i --
water	98:58	0:0	6	i
op	98:59	0:0	6	--
forexpr	0:0	0:0	5	
stmts	99:8	109:8	5	
water	99:8	0:0	6	{
union	100:12	100:38	6	<anonymous_100:12>
decl	100:19	100:26	7	float	f
decl	100:28	100:37	7	int32_t	i
decl	100:12	100:41	6	<anonymous_100:12>	u
water	101:12	0:0	6	u
op	101:13	0:0	6	.
water	101:14	0:0	6	f
op	101:16	0:0	6	=
op	101:18	0:0	6	*
water	101:19	0:0	6	p_buffl
op	101:27	0:0	6	+
water	101:29	0:0	6	384
op	101:32	0:0	6	.
water	101:33	0:0	6	0
water	101:34	0:0	6	;
if	102:12	103:32	6	(u . i > 0 x43c07fff)
cond	102:16	102:23	7	u . i > 0 x43c07fff
water	102:16	0:0	8	u
op	102:17	0:0	8	.
water	102:18	0:0	8	i
op	102:20	0:0	8	>
water	102:22	0:0	8	0
water	102:23	0:0	8	x43c07fff
stmts	103:16	103:32	7	
op	103:16	0:0	8	*
water	103:17	0:0	8	p_buffs
op	103:25	0:0	8	=
water	103:27	0:0	8	32767
water	103:32	0:0	8	;
else	104:12	105:33	6
stmts	104:17	105:33	7	
if	104:17	105:33	8	(u . i < 0 x43bf8000)
cond	104:21	104:28	9	u . i < 0 x43bf8000
water	104:21	0:0	10	u
op	104:22	0:0	10	.
water	104:23	0:0	10	i
op	104:25	0:0	10	<
water	104:27	0:0	10	0
water	104:28	0:0	10	x43bf8000
stmts	105:16	105:33	9	
op	105:16	0:0	10	*
water	105:17	0:0	10	p_buffs
op	105:25	0:0	10	=
op	105:27	0:0	10	-
water	105:28	0:0	10	32768
water	105:33	0:0	10	;
else	106:12	107:43	6
stmts	107:16	107:43	7	
op	107:16	0:0	8	*
water	107:17	0:0	8	p_buffs
op	107:25	0:0	8	=
water	107:27	0:0	8	u
op	107:28	0:0	8	.
water	107:29	0:0	8	i
op	107:31	0:0	8	-
water	107:33	0:0	8	0
water	107:34	0:0	8	x43c00000
water	107:43	0:0	8	;
water	108:12	0:0	6	p_buffl
op	108:19	0:0	6	++
water	108:21	0:0	6	;
water	108:23	0:0	6	p_buffs
op	108:30	0:0	6	++
water	108:32	0:0	6	;
water	109:8	0:0	6	}
water	110:8	0:0	4	p_state
op	110:16	0:0	4	=
call	110:18	110:34	4	visual_fft_init
water	110:35	0:0	4	;
if	111:8	115:8	4	(! p_state)
cond	111:12	111:13	5	! p_state
op	111:12	0:0	6	!
water	111:13	0:0	6	p_state
stmts	112:8	115:8	5	
water	112:8	0:0	6	{
call	113:12	113:65	6	msg_Err
arg	113:20	113:28	7	p_filter
water	113:20	0:0	8	p_filter
arg	113:29	113:65	7	"unable to initialize FFT transform"
water	113:29	0:0	8	"unable to initialize FFT transform"
water	113:66	0:0	6	;
goto	114:12	114:24	6	release
water	114:17	0:0	7	release
water	115:8	0:0	6	}
if	116:8	120:8	4	(!window_init (FFT_BUFFER_SIZE ,& p_sys -> wind_param ,& wind_ctx ))
cond	116:12	116:71	5	!window_init (FFT_BUFFER_SIZE ,& p_sys -> wind_param ,& wind_ctx )
op	116:12	0:0	6	!
call	116:13	116:71	6	window_init
arg	116:25	116:40	7	FFT_BUFFER_SIZE
water	116:25	0:0	8	FFT_BUFFER_SIZE
arg	116:42	116:60	7	&p_sys->wind_param
op	116:42	0:0	8	&
water	116:43	0:0	8	p_sys
op	116:48	0:0	8	->
water	116:50	0:0	8	wind_param
arg	116:62	116:71	7	&wind_ctx
op	116:62	0:0	8	&
water	116:63	0:0	8	wind_ctx
stmts	117:8	120:8	5	
water	117:8	0:0	6	{
call	118:12	118:62	6	msg_Err
arg	118:20	118:28	7	p_filter
water	118:20	0:0	8	p_filter
arg	118:29	118:62	7	"unable to initialize FFT window"
water	118:29	0:0	8	"unable to initialize FFT window"
water	118:63	0:0	6	;
goto	119:12	119:24	6	release
water	119:17	0:0	7	release
water	120:8	0:0	6	}
water	121:8	0:0	4	p_buffs
op	121:16	0:0	4	=
water	121:18	0:0	4	p_s16_buff
water	121:28	0:0	4	;
for	122:8	129:8	4	(i = 0 ;i < FFT_BUFFER_SIZE;i ++)
forinit	122:13	122:19	5	i = 0 ;
water	122:13	0:0	6	i
op	122:15	0:0	6	=
water	122:17	0:0	6	0
water	122:19	0:0	6	;
cond	122:21	122:25	5	i < FFT_BUFFER_SIZE
water	122:21	0:0	6	i
op	122:23	0:0	6	<
water	122:25	0:0	6	FFT_BUFFER_SIZE
forexpr	122:42	122:43	5	i ++
water	122:42	0:0	6	i
op	122:43	0:0	6	++
stmts	123:8	129:8	5	
water	123:8	0:0	6	{
water	124:12	0:0	6	p_output
op	124:20	0:0	6	[
water	124:21	0:0	6	i
op	124:22	0:0	6	]
op	124:24	0:0	6	=
water	124:26	0:0	6	0
water	124:27	0:0	6	;
water	125:12	0:0	6	p_buffer1
op	125:21	0:0	6	[
water	125:22	0:0	6	i
op	125:23	0:0	6	]
op	125:25	0:0	6	=
op	125:27	0:0	6	*
water	125:28	0:0	6	p_buffs
water	125:35	0:0	6	;
water	126:12	0:0	6	p_buffs
op	126:20	0:0	6	+=
water	126:23	0:0	6	p_sys
op	126:28	0:0	6	->
water	126:30	0:0	6	i_channels
water	126:40	0:0	6	;
if	127:12	128:36	6	(p_buffs >= & p_s16_buff [ block -> i_nb_samples * p_sys -> i_channels ])
cond	127:16	127:78	7	p_buffs >= & p_s16_buff [ block -> i_nb_samples * p_sys -> i_channels ]
water	127:16	0:0	8	p_buffs
op	127:24	0:0	8	>=
op	127:27	0:0	8	&
water	127:28	0:0	8	p_s16_buff
op	127:38	0:0	8	[
water	127:39	0:0	8	block
op	127:44	0:0	8	->
water	127:46	0:0	8	i_nb_samples
op	127:59	0:0	8	*
water	127:61	0:0	8	p_sys
op	127:66	0:0	8	->
water	127:68	0:0	8	i_channels
op	127:78	0:0	8	]
stmts	128:16	128:36	7	
water	128:16	0:0	8	p_buffs
op	128:24	0:0	8	=
water	128:26	0:0	8	p_s16_buff
water	128:36	0:0	8	;
water	129:8	0:0	6	}
call	130:8	130:51	4	window_scale_in_place
arg	130:31	130:40	5	p_buffer1
water	130:31	0:0	6	p_buffer1
arg	130:42	130:51	5	&wind_ctx
op	130:42	0:0	6	&
water	130:43	0:0	6	wind_ctx
water	130:52	0:0	4	;
call	131:8	131:49	4	fft_perform
arg	131:21	131:30	5	p_buffer1
water	131:21	0:0	6	p_buffer1
arg	131:32	131:40	5	p_output
water	131:32	0:0	6	p_output
arg	131:42	131:49	5	p_state
water	131:42	0:0	6	p_state
water	131:50	0:0	4	;
for	132:8	134:61	4	(i = 0 ;i < FFT_BUFFER_SIZE;++ i)
forinit	132:13	132:18	5	i = 0 ;
water	132:13	0:0	6	i
op	132:15	0:0	6	=
water	132:17	0:0	6	0
water	132:18	0:0	6	;
cond	132:20	132:23	5	i < FFT_BUFFER_SIZE
water	132:20	0:0	6	i
op	132:21	0:0	6	<
water	132:23	0:0	6	FFT_BUFFER_SIZE
forexpr	132:40	132:42	5	++ i
op	132:40	0:0	6	++
water	132:42	0:0	6	i
stmts	133:12	134:61	5	
water	133:12	0:0	6	p_dest
op	133:18	0:0	6	[
water	133:19	0:0	6	i
op	133:20	0:0	6	]
op	133:22	0:0	6	=
water	133:24	0:0	6	p_output
op	133:32	0:0	6	[
water	133:33	0:0	6	i
op	133:34	0:0	6	]
op	133:36	0:0	6	*
water	133:39	0:0	6	(
water	133:40	0:0	6	2
op	133:42	0:0	6	^
water	133:44	0:0	6	16
water	133:46	0:0	6	)
op	134:24	0:0	6	/
water	134:26	0:0	6	(
water	134:27	0:0	6	(
water	134:28	0:0	6	FFT_BUFFER_SIZE
op	134:44	0:0	6	/
water	134:46	0:0	6	2
op	134:48	0:0	6	*
water	134:50	0:0	6	32768
water	134:55	0:0	6	)
op	134:57	0:0	6	^
water	134:59	0:0	6	2
water	134:60	0:0	6	)
water	134:61	0:0	6	;
for	135:8	153:8	4	(i = 0 ;i < NB_BANDS;i ++)
forinit	135:13	135:19	5	i = 0 ;
water	135:13	0:0	6	i
op	135:15	0:0	6	=
water	135:17	0:0	6	0
water	135:19	0:0	6	;
cond	135:21	135:25	5	i < NB_BANDS
water	135:21	0:0	6	i
op	135:23	0:0	6	<
water	135:25	0:0	6	NB_BANDS
forexpr	135:35	135:36	5	i ++
water	135:35	0:0	6	i
op	135:36	0:0	6	++
stmts	136:8	153:8	5	
water	136:8	0:0	6	{
water	138:12	0:0	6	height
op	138:18	0:0	6	[
water	138:19	0:0	6	i
op	138:20	0:0	6	]
op	138:22	0:0	6	-=
water	138:25	0:0	6	BAR_DECREMENT
water	138:38	0:0	6	;
if	139:12	140:29	6	(height [ i ] < 0)
cond	139:16	139:28	7	height [ i ] < 0
water	139:16	0:0	8	height
op	139:22	0:0	8	[
water	139:23	0:0	8	i
op	139:24	0:0	8	]
op	139:26	0:0	8	<
water	139:28	0:0	8	0
stmts	140:16	140:29	7	
water	140:16	0:0	8	height
op	140:22	0:0	8	[
water	140:23	0:0	8	i
op	140:24	0:0	8	]
op	140:26	0:0	8	=
water	140:28	0:0	8	0
water	140:29	0:0	8	;
decl	141:12	141:21	6	int	y
op	141:18	0:0	6	=
water	141:20	0:0	6	0
for	144:12	148:12	6	(j = xscale [ i ] ;j < xscale [ i + 1 ];j ++)
forinit	144:17	144:30	7	j = xscale [ i ] ;
water	144:17	0:0	8	j
op	144:19	0:0	8	=
water	144:21	0:0	8	xscale
op	144:27	0:0	8	[
water	144:28	0:0	8	i
op	144:29	0:0	8	]
water	144:30	0:0	8	;
cond	144:32	144:48	7	j < xscale [ i + 1 ]
water	144:32	0:0	8	j
op	144:34	0:0	8	<
water	144:36	0:0	8	xscale
op	144:42	0:0	8	[
water	144:43	0:0	8	i
op	144:45	0:0	8	+
water	144:47	0:0	8	1
op	144:48	0:0	8	]
forexpr	144:51	144:52	7	j ++
water	144:51	0:0	8	j
op	144:52	0:0	8	++
stmts	145:12	148:12	7	
water	145:12	0:0	8	{
if	146:16	147:34	8	(p_dest [ j ] > y)
cond	146:20	146:32	9	p_dest [ j ] > y
water	146:20	0:0	10	p_dest
op	146:26	0:0	10	[
water	146:27	0:0	10	j
op	146:28	0:0	10	]
op	146:30	0:0	10	>
water	146:32	0:0	10	y
stmts	147:21	147:34	9	
water	147:21	0:0	10	y
op	147:23	0:0	10	=
water	147:25	0:0	10	p_dest
op	147:31	0:0	10	[
water	147:32	0:0	10	j
op	147:33	0:0	10	]
water	147:34	0:0	10	;
water	148:12	0:0	8	}
decl	150:12	150:56	6	float	new_height
op	150:29	0:0	6	=
water	150:31	0:0	6	y
op	150:33	0:0	6	!=
water	150:36	0:0	6	0
water	150:38	0:0	6	?
call	150:40	150:45	7	log
arg	150:44	150:45	8	y
water	150:44	0:0	9	y
op	150:47	0:0	6	*
water	150:49	0:0	6	0
op	150:50	0:0	6	.
water	150:51	0:0	6	4
water	150:53	0:0	6	:
water	150:55	0:0	6	0
water	151:12	0:0	6	height
op	151:18	0:0	6	[
water	151:19	0:0	6	i
op	151:20	0:0	6	]
op	151:22	0:0	6	=
water	151:24	0:0	6	new_height
op	151:35	0:0	6	>
water	151:37	0:0	6	height
op	151:43	0:0	6	[
water	151:44	0:0	6	i
op	151:45	0:0	6	]
water	152:24	0:0	6	?
water	152:26	0:0	6	new_height
water	152:37	0:0	6	:
water	152:39	0:0	6	height
op	152:45	0:0	6	[
water	152:46	0:0	6	i
op	152:47	0:0	6	]
water	152:48	0:0	6	;
water	153:8	0:0	6	}
water	155:8	0:0	4	p_sys
op	155:13	0:0	4	->
water	155:15	0:0	4	f_rotationAngle
op	155:31	0:0	4	+=
water	155:34	0:0	4	p_sys
op	155:39	0:0	4	->
water	155:41	0:0	4	f_rotationIncrement
water	155:60	0:0	4	;
if	156:8	157:59	4	(p_sys -> f_rotationAngle <= - ROTATION_MAX)
cond	156:12	156:39	5	p_sys -> f_rotationAngle <= - ROTATION_MAX
water	156:12	0:0	6	p_sys
op	156:17	0:0	6	->
water	156:19	0:0	6	f_rotationAngle
op	156:35	0:0	6	<=
op	156:38	0:0	6	-
water	156:39	0:0	6	ROTATION_MAX
stmts	157:12	157:59	5	
water	157:12	0:0	6	p_sys
op	157:17	0:0	6	->
water	157:19	0:0	6	f_rotationIncrement
op	157:39	0:0	6	=
water	157:41	0:0	6	ROTATION_INCREMENT
water	157:59	0:0	6	;
else	158:8	159:60	4
stmts	158:13	159:60	5	
if	158:13	159:60	6	(p_sys -> f_rotationAngle >= ROTATION_MAX)
cond	158:17	158:43	7	p_sys -> f_rotationAngle >= ROTATION_MAX
water	158:17	0:0	8	p_sys
op	158:22	0:0	8	->
water	158:24	0:0	8	f_rotationAngle
op	158:40	0:0	8	>=
water	158:43	0:0	8	ROTATION_MAX
stmts	159:12	159:60	7	
water	159:12	0:0	8	p_sys
op	159:17	0:0	8	->
water	159:19	0:0	8	f_rotationIncrement
op	159:39	0:0	8	=
op	159:41	0:0	8	-
water	159:42	0:0	8	ROTATION_INCREMENT
water	159:60	0:0	8	;
call	161:8	161:57	4	glClear
arg	161:16	161:57	5	GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT
water	161:16	0:0	6	GL_COLOR_BUFFER_BIT
op	161:36	0:0	6	|
water	161:38	0:0	6	GL_DEPTH_BUFFER_BIT
water	161:58	0:0	4	;
call	162:8	162:21	4	glPushMatrix
water	162:22	0:0	4	;
call	163:12	163:53	4	glRotatef
arg	163:22	163:44	5	p_sys->f_rotationAngle
water	163:22	0:0	6	p_sys
op	163:27	0:0	6	->
water	163:29	0:0	6	f_rotationAngle
arg	163:46	163:47	5	0
water	163:46	0:0	6	0
arg	163:49	163:50	5	1
water	163:49	0:0	6	1
arg	163:52	163:53	5	0
water	163:52	0:0	6	0
water	163:54	0:0	4	;
call	164:12	164:27	4	drawBars
arg	164:21	164:27	5	height
water	164:21	0:0	6	height
water	164:28	0:0	4	;
call	165:8	165:20	4	glPopMatrix
water	165:21	0:0	4	;
call	167:8	167:50	4	mwait
arg	167:14	167:50	5	block->i_pts+(block->i_length/2)
water	167:14	0:0	6	block
op	167:19	0:0	6	->
water	167:21	0:0	6	i_pts
op	167:27	0:0	6	+
water	167:29	0:0	6	(
water	167:30	0:0	6	block
op	167:35	0:0	6	->
water	167:37	0:0	6	i_length
op	167:46	0:0	6	/
water	167:48	0:0	6	2
water	167:49	0:0	6	)
water	167:51	0:0	4	;
if	168:8	172:8	4	(!vlc_gl_Lock (gl ))
cond	168:12	168:27	5	!vlc_gl_Lock (gl )
op	168:12	0:0	6	!
call	168:13	168:27	6	vlc_gl_Lock
arg	168:25	168:27	7	gl
water	168:25	0:0	8	gl
stmts	169:8	172:8	5	
water	169:8	0:0	6	{
call	170:12	170:26	6	vlc_gl_Swap
arg	170:24	170:26	7	gl
water	170:24	0:0	8	gl
water	170:27	0:0	6	;
call	171:12	171:28	6	vlc_gl_Unlock
arg	171:26	171:28	7	gl
water	171:26	0:0	8	gl
water	171:29	0:0	6	;
water	172:8	0:0	6	}
label	173:0	173:7	4	release :
call	174:8	174:30	4	window_close
arg	174:21	174:30	5	&wind_ctx
op	174:21	0:0	6	&
water	174:22	0:0	6	wind_ctx
water	174:31	0:0	4	;
call	175:8	175:25	4	fft_close
arg	175:18	175:25	5	p_state
water	175:18	0:0	6	p_state
water	175:26	0:0	4	;
call	176:8	176:32	4	vlc_gl_ReleaseCurrent
arg	176:30	176:32	5	gl
water	176:30	0:0	6	gl
water	176:33	0:0	4	;
call	177:8	177:27	4	block_Release
arg	177:22	177:27	5	block
water	177:22	0:0	6	block
water	177:28	0:0	4	;
call	178:8	178:30	4	vlc_restorecancel
arg	178:26	178:30	5	canc
water	178:26	0:0	6	canc
water	178:31	0:0	4	;
water	179:4	0:0	4	}
call	180:4	180:12	2	assert
arg	180:11	180:12	3	0
water	180:11	0:0	4	0
water	180:13	0:0	2	;
label	181:0	181:5	2	error :
water	182:4	0:0	2	p_sys
op	182:9	0:0	2	->
water	182:11	0:0	2	b_error
op	182:19	0:0	2	=
water	182:21	0:0	2	true
water	182:25	0:0	2	;
call	183:4	183:30	2	vlc_sem_post
arg	183:17	183:30	3	&p_sys->ready
op	183:17	0:0	4	&
water	183:18	0:0	4	p_sys
op	183:23	0:0	4	->
water	183:25	0:0	4	ready
water	183:31	0:0	2	;
return	184:4	184:15	2	NULL
water	184:11	0:0	3	NULL
