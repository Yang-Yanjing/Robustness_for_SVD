func	2:0	106:0	0	static int	ParseManifest
params	2:24	0:0	1	
param	2:26	2:51	2	addons_finder_t *	p_finder
param	2:53	2:75	2	addon_entry_t *	p_entry
param	3:26	3:53	2	const char *	psz_tempfileuri
param	3:55	3:74	2	stream_t *	p_stream
stmnts	0:0	105:31	1	
decl	5:4	5:33	2	int	i_num_entries_created
op	5:30	0:0	2	=
water	5:32	0:0	2	0
decl	6:4	6:22	2	const char	*p_node
decl	7:4	7:27	2	int	i_current_node_type
decl	9:4	9:28	2	const char	*attr
water	9:20	0:0	2	,
decl	9:4	9:28	2	const char	*value
decl	11:4	11:35	2	const char	*psz_filename
op	11:29	0:0	2	=
water	11:31	0:0	2	NULL
decl	12:4	12:23	2	int	i_filetype
op	12:19	0:0	2	=
op	12:21	0:0	2	-
water	12:22	0:0	2	1
decl	13:4	13:71	2	xml_reader_t	*p_xml_reader
op	13:31	0:0	2	=
call	13:33	13:70	3	xml_ReaderCreate
arg	13:51	13:59	4	p_finder
water	13:51	0:0	5	p_finder
arg	13:61	13:70	4	p_stream
water	13:61	0:0	5	p_stream
if	14:4	14:32	2	(! p_xml_reader)
cond	14:8	14:9	3	! p_xml_reader
op	14:8	0:0	4	!
water	14:9	0:0	4	p_xml_reader
stmts	14:24	14:32	3	
return	14:24	14:32	4	0
water	14:31	0:0	5	0
if	15:4	19:4	2	(xml_ReaderNextNode (p_xml_reader ,& p_node ) != XML_READER_STARTELEM)
cond	15:8	15:55	3	xml_ReaderNextNode (p_xml_reader ,& p_node ) != XML_READER_STARTELEM
call	15:8	15:50	4	xml_ReaderNextNode
arg	15:28	15:40	5	p_xml_reader
water	15:28	0:0	6	p_xml_reader
arg	15:42	15:50	5	&p_node
op	15:42	0:0	6	&
water	15:43	0:0	6	p_node
op	15:52	0:0	4	!=
water	15:55	0:0	4	XML_READER_STARTELEM
stmts	16:4	19:4	3	
water	16:4	0:0	4	{
call	17:8	17:46	4	msg_Err
arg	17:17	17:25	5	p_finder
water	17:17	0:0	6	p_finder
arg	17:27	17:46	5	"invalid xml file"
water	17:27	0:0	6	"invalid xml file"
water	17:47	0:0	4	;
goto	18:8	18:16	4	end
water	18:13	0:0	5	end
water	19:4	0:0	4	}
if	20:4	24:4	2	(strcmp (p_node ,"videolan" ))
cond	20:9	20:35	3	strcmp (p_node ,"videolan" )
call	20:9	20:35	4	strcmp
arg	20:17	20:23	5	p_node
water	20:17	0:0	6	p_node
arg	20:25	20:35	5	"videolan"
water	20:25	0:0	6	"videolan"
stmts	21:4	24:4	3	
water	21:4	0:0	4	{
call	22:8	22:57	4	msg_Err
arg	22:17	22:25	5	p_finder
water	22:17	0:0	6	p_finder
arg	22:27	22:57	5	"unsupported XML data format"
water	22:27	0:0	6	"unsupported XML data format"
water	22:58	0:0	4	;
goto	23:8	23:16	4	end
water	23:13	0:0	5	end
water	24:4	0:0	4	}
while	25:4	102:4	2	(( i_current_node_type =xml_ReaderNextNode (p_xml_reader ,& p_node ) ) > 0)
cond	25:11	25:81	3	( i_current_node_type =xml_ReaderNextNode (p_xml_reader ,& p_node ) ) > 0
water	25:11	0:0	4	(
water	25:12	0:0	4	i_current_node_type
op	25:32	0:0	4	=
call	25:34	25:76	4	xml_ReaderNextNode
arg	25:54	25:66	5	p_xml_reader
water	25:54	0:0	6	p_xml_reader
arg	25:68	25:76	5	&p_node
op	25:68	0:0	6	&
water	25:69	0:0	6	p_node
water	25:77	0:0	4	)
op	25:79	0:0	4	>
water	25:81	0:0	4	0
stmts	26:4	102:4	3	
water	26:4	0:0	4	{
switch	27:8	101:8	4	(i_current_node_type)
cond	27:16	27:16	5	i_current_node_type
water	27:16	0:0	6	i_current_node_type
stmts	28:8	101:8	5	
water	28:8	0:0	6	{
label	29:8	29:33	6	case XML_READER_STARTELEM :
water	30:8	0:0	6	{
call	31:12	31:58	6	BINDNODE
arg	31:21	31:31	7	"resource"
water	31:21	0:0	8	"resource"
arg	31:33	31:45	7	psz_filename
water	31:33	0:0	8	psz_filename
arg	31:47	31:58	7	TYPE_STRING
water	31:47	0:0	8	TYPE_STRING
water	32:12	0:0	6	data_pointer
op	32:24	0:0	6	.
water	32:25	0:0	6	e_type
op	32:32	0:0	6	=
water	32:34	0:0	6	TYPE_NONE
water	32:43	0:0	6	;
if	38:12	47:12	6	(!strcmp (p_node ,"resource" ))
cond	38:17	38:46	7	!strcmp (p_node ,"resource" )
op	38:17	0:0	8	!
call	38:19	38:46	8	strcmp
arg	38:27	38:33	9	p_node
water	38:27	0:0	10	p_node
arg	38:35	38:46	9	"resource"
water	38:35	0:0	10	"resource"
stmts	39:12	47:12	7	
water	39:12	0:0	8	{
while	40:16	46:16	8	(( attr =xml_ReaderNextAttr (p_xml_reader ,& value ) ))
cond	40:23	40:73	9	( attr =xml_ReaderNextAttr (p_xml_reader ,& value ) )
water	40:23	0:0	10	(
water	40:24	0:0	10	attr
op	40:29	0:0	10	=
call	40:31	40:72	10	xml_ReaderNextAttr
arg	40:51	40:63	11	p_xml_reader
water	40:51	0:0	12	p_xml_reader
arg	40:65	40:72	11	&value
op	40:65	0:0	12	&
water	40:66	0:0	12	value
water	40:73	0:0	10	)
stmts	41:16	46:16	9	
water	41:16	0:0	10	{
if	42:20	45:20	10	(!strcmp (attr ,"type" ))
cond	42:25	42:47	11	!strcmp (attr ,"type" )
op	42:25	0:0	12	!
call	42:26	42:47	12	strcmp
arg	42:34	42:38	13	attr
water	42:34	0:0	14	attr
arg	42:40	42:47	13	"type"
water	42:40	0:0	14	"type"
stmts	43:20	45:20	11	
water	43:20	0:0	12	{
water	44:24	0:0	12	i_filetype
op	44:35	0:0	12	=
call	44:37	44:53	12	ReadType
arg	44:47	44:53	13	value
water	44:47	0:0	14	value
water	44:54	0:0	12	;
water	45:20	0:0	12	}
water	46:16	0:0	10	}
water	47:12	0:0	8	}
else	48:12	57:12	6
stmts	48:17	57:12	7	
if	48:17	57:12	8	(!strcmp (p_node ,"addon" ))
cond	48:22	48:48	9	!strcmp (p_node ,"addon" )
op	48:22	0:0	10	!
call	48:24	48:48	10	strcmp
arg	48:32	48:38	11	p_node
water	48:32	0:0	12	p_node
arg	48:40	48:48	11	"addon"
water	48:40	0:0	12	"addon"
stmts	49:12	57:12	9	
water	49:12	0:0	10	{
while	50:16	56:16	10	(( attr =xml_ReaderNextAttr (p_xml_reader ,& value ) ))
cond	50:23	50:73	11	( attr =xml_ReaderNextAttr (p_xml_reader ,& value ) )
water	50:23	0:0	12	(
water	50:24	0:0	12	attr
op	50:29	0:0	12	=
call	50:31	50:72	12	xml_ReaderNextAttr
arg	50:51	50:63	13	p_xml_reader
water	50:51	0:0	14	p_xml_reader
arg	50:65	50:72	13	&value
op	50:65	0:0	14	&
water	50:66	0:0	14	value
water	50:73	0:0	12	)
stmts	51:16	56:16	11	
water	51:16	0:0	12	{
if	52:20	55:20	12	(!strcmp (attr ,"type" ))
cond	52:25	52:47	13	!strcmp (attr ,"type" )
op	52:25	0:0	14	!
call	52:26	52:47	14	strcmp
arg	52:34	52:38	15	attr
water	52:34	0:0	16	attr
arg	52:40	52:47	15	"type"
water	52:40	0:0	16	"type"
stmts	53:20	55:20	13	
water	53:20	0:0	14	{
water	54:24	0:0	14	p_entry
op	54:31	0:0	14	->
water	54:33	0:0	14	e_type
op	54:40	0:0	14	=
call	54:42	54:58	14	ReadType
arg	54:52	54:58	15	value
water	54:52	0:0	16	value
water	54:59	0:0	14	;
water	55:20	0:0	14	}
water	56:16	0:0	12	}
water	57:12	0:0	10	}
break	58:12	58:17	6	
water	59:8	0:0	6	}
label	60:8	60:28	6	case XML_READER_TEXT :
if	61:12	61:69	6	(data_pointer . e_type == TYPE_NONE || ! p_entry)
cond	61:17	61:54	7	data_pointer . e_type == TYPE_NONE || ! p_entry
water	61:17	0:0	8	data_pointer
op	61:29	0:0	8	.
water	61:30	0:0	8	e_type
op	61:37	0:0	8	==
water	61:40	0:0	8	TYPE_NONE
op	61:50	0:0	8	||
op	61:53	0:0	8	!
water	61:54	0:0	8	p_entry
stmts	61:64	61:69	7	
break	61:64	61:69	8	
if	62:12	63:60	6	(data_pointer . e_type == TYPE_STRING)
cond	62:17	62:40	7	data_pointer . e_type == TYPE_STRING
water	62:17	0:0	8	data_pointer
op	62:29	0:0	8	.
water	62:30	0:0	8	e_type
op	62:37	0:0	8	==
water	62:40	0:0	8	TYPE_STRING
stmts	63:16	63:60	7	
op	63:16	0:0	8	*
water	63:17	0:0	8	data_pointer
op	63:29	0:0	8	.
water	63:30	0:0	8	u_data
op	63:36	0:0	8	.
water	63:37	0:0	8	ppsz
op	63:42	0:0	8	=
call	63:44	63:59	8	strdup
arg	63:52	63:59	9	p_node
water	63:52	0:0	10	p_node
water	63:60	0:0	8	;
else	64:12	66:56	6
stmts	65:12	66:56	7	
if	65:12	66:56	8	(data_pointer . e_type == TYPE_LONG)
cond	65:17	65:40	9	data_pointer . e_type == TYPE_LONG
water	65:17	0:0	10	data_pointer
op	65:29	0:0	10	.
water	65:30	0:0	10	e_type
op	65:37	0:0	10	==
water	65:40	0:0	10	TYPE_LONG
stmts	66:16	66:56	9	
op	66:16	0:0	10	*
water	66:17	0:0	10	data_pointer
op	66:29	0:0	10	.
water	66:30	0:0	10	u_data
op	66:36	0:0	10	.
water	66:37	0:0	10	pl
op	66:40	0:0	10	=
call	66:42	66:55	10	atol
arg	66:48	66:55	11	p_node
water	66:48	0:0	12	p_node
water	66:56	0:0	10	;
else	67:12	69:56	6
stmts	68:12	69:56	7	
if	68:12	69:56	8	(data_pointer . e_type == TYPE_INTEGER)
cond	68:17	68:40	9	data_pointer . e_type == TYPE_INTEGER
water	68:17	0:0	10	data_pointer
op	68:29	0:0	10	.
water	68:30	0:0	10	e_type
op	68:37	0:0	10	==
water	68:40	0:0	10	TYPE_INTEGER
stmts	69:16	69:56	9	
op	69:16	0:0	10	*
water	69:17	0:0	10	data_pointer
op	69:29	0:0	10	.
water	69:30	0:0	10	u_data
op	69:36	0:0	10	.
water	69:37	0:0	10	pi
op	69:40	0:0	10	=
call	69:42	69:55	10	atoi
arg	69:48	69:55	11	p_node
water	69:48	0:0	12	p_node
water	69:56	0:0	10	;
break	70:12	70:17	6	
label	71:8	71:31	6	case XML_READER_ENDELEM :
if	72:12	96:12	6	(!strcmp (p_node ,"resource" ))
cond	72:17	72:46	7	!strcmp (p_node ,"resource" )
op	72:17	0:0	8	!
call	72:19	72:46	8	strcmp
arg	72:27	72:33	9	p_node
water	72:27	0:0	10	p_node
arg	72:35	72:46	9	"resource"
water	72:35	0:0	10	"resource"
stmts	73:12	96:12	7	
water	73:12	0:0	8	{
if	74:16	92:16	8	(psz_filename && i_filetype >= 0)
cond	74:21	74:51	9	psz_filename && i_filetype >= 0
water	74:21	0:0	10	psz_filename
op	74:34	0:0	10	&&
water	74:37	0:0	10	i_filetype
op	74:48	0:0	10	>=
water	74:51	0:0	10	0
stmts	75:16	92:16	9	
water	75:16	0:0	10	{
decl	76:20	76:73	10	addon_file_t	*p_file
op	76:41	0:0	10	=
call	76:43	76:72	11	malloc
arg	76:51	76:72	12	sizeof(addon_file_t)
op	76:51	0:0	13	sizeof
water	76:57	0:0	13	(
water	76:58	0:0	13	addon_file_t
water	76:70	0:0	13	)
water	77:20	0:0	10	p_file
op	77:26	0:0	10	->
water	77:28	0:0	10	e_filetype
op	77:39	0:0	10	=
water	77:41	0:0	10	i_filetype
water	77:51	0:0	10	;
water	78:20	0:0	10	p_file
op	78:26	0:0	10	->
water	78:28	0:0	10	psz_filename
op	78:41	0:0	10	=
call	78:43	78:64	10	strdup
arg	78:51	78:64	11	psz_filename
water	78:51	0:0	12	psz_filename
water	78:65	0:0	10	;
if	79:20	86:20	10	(asprintf (& p_file -> psz_download_uri ,"%s!/%s" ,psz_tempfileuri ,psz_filename ) > 0)
cond	79:25	80:70	11	asprintf (& p_file -> psz_download_uri ,"%s!/%s" ,psz_tempfileuri ,psz_filename ) > 0
call	79:25	80:66	12	asprintf
arg	79:35	79:61	13	&p_file->psz_download_uri
op	79:35	0:0	14	&
water	79:37	0:0	14	p_file
op	79:43	0:0	14	->
water	79:45	0:0	14	psz_download_uri
arg	79:63	79:71	13	"%s!/%s"
water	79:63	0:0	14	"%s!/%s"
arg	80:35	80:50	13	psz_tempfileuri
water	80:35	0:0	14	psz_tempfileuri
arg	80:52	80:66	13	psz_filename
water	80:52	0:0	14	psz_filename
op	80:68	0:0	12	>
water	80:70	0:0	12	0
stmts	81:20	86:20	11	
water	81:20	0:0	12	{
call	82:24	82:61	12	ARRAY_APPEND
arg	82:38	82:52	13	p_entry->files
water	82:38	0:0	14	p_entry
op	82:45	0:0	14	->
water	82:47	0:0	14	files
arg	82:54	82:61	13	p_file
water	82:54	0:0	14	p_file
water	82:62	0:0	12	;
call	83:24	84:72	12	msg_Dbg
arg	83:33	83:41	13	p_finder
water	83:33	0:0	14	p_finder
arg	83:43	83:87	13	"manifest lists file %s extractable from %s"
water	83:43	0:0	14	"manifest lists file %s extractable from %s"
arg	84:33	84:45	13	psz_filename
water	84:33	0:0	14	psz_filename
arg	84:47	84:72	13	p_file->psz_download_uri
water	84:47	0:0	14	p_file
op	84:53	0:0	14	->
water	84:55	0:0	14	psz_download_uri
water	84:73	0:0	12	;
water	85:24	0:0	12	i_num_entries_created
op	85:45	0:0	12	++
water	85:47	0:0	12	;
water	86:20	0:0	12	}
else	87:20	91:20	10
stmts	88:20	91:20	11	
water	88:20	0:0	12	{
call	89:24	89:51	12	free
arg	89:30	89:51	13	p_file->psz_filename
water	89:30	0:0	14	p_file
op	89:36	0:0	14	->
water	89:38	0:0	14	psz_filename
water	89:52	0:0	12	;
call	90:24	90:37	12	free
arg	90:30	90:37	13	p_file
water	90:30	0:0	14	p_file
water	90:38	0:0	12	;
water	91:20	0:0	12	}
water	92:16	0:0	10	}
water	94:16	0:0	8	psz_filename
op	94:29	0:0	8	=
water	94:31	0:0	8	NULL
water	94:35	0:0	8	;
water	95:16	0:0	8	i_filetype
op	95:27	0:0	8	=
op	95:29	0:0	8	-
water	95:30	0:0	8	1
water	95:31	0:0	8	;
water	96:12	0:0	8	}
water	97:12	0:0	6	data_pointer
op	97:24	0:0	6	.
water	97:25	0:0	6	e_type
op	97:32	0:0	6	=
water	97:34	0:0	6	TYPE_NONE
water	97:43	0:0	6	;
break	98:12	98:17	6	
label	99:8	99:15	6	default :
break	100:12	100:17	6	
water	101:8	0:0	6	}
water	102:4	0:0	4	}
label	103:0	103:3	2	end :
call	104:3	104:34	2	xml_ReaderDelete
arg	104:21	104:34	3	p_xml_reader
water	104:21	0:0	4	p_xml_reader
water	104:35	0:0	2	;
return	105:3	105:31	2	i_num_entries_created
water	105:10	0:0	3	i_num_entries_created
