func	2:0	114:0	0	static int	Control
params	2:18	0:0	1	
param	2:20	2:36	2	demux_t *	p_demux
param	2:38	2:49	2	int	i_query
param	2:51	2:64	2	va_list	args
stmnts	0:0	113:4	1	
decl	4:4	4:39	2	demux_sys_t	*p_sys
op	4:23	0:0	2	=
water	4:25	0:0	2	p_demux
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:17	2	double	f
water	5:12	0:0	2	,
decl	5:4	5:17	2	double	*pf
decl	6:4	6:22	2	int64_t	i64
water	6:15	0:0	2	,
decl	6:4	6:22	2	int64_t	*pi64
switch	7:4	113:4	2	(i_query)
cond	7:12	7:12	3	i_query
water	7:12	0:0	4	i_query
stmts	8:4	113:4	3	
water	8:4	0:0	4	{
label	9:4	9:27	4	case DEMUX_GET_POSITION :
water	10:8	0:0	4	pf
op	10:11	0:0	4	=
water	10:13	0:0	4	(
water	10:14	0:0	4	double
op	10:20	0:0	4	*
water	10:21	0:0	4	)
call	10:23	10:45	4	va_arg
arg	10:31	10:35	5	args
water	10:31	0:0	6	args
arg	10:37	10:45	5	double*
water	10:37	0:0	6	double
op	10:43	0:0	6	*
water	10:46	0:0	4	;
if	11:8	17:8	4	(p_sys -> i_length > 0)
cond	11:12	11:30	5	p_sys -> i_length > 0
water	11:12	0:0	6	p_sys
op	11:17	0:0	6	->
water	11:19	0:0	6	i_length
op	11:28	0:0	6	>
water	11:30	0:0	6	0
stmts	12:8	17:8	5	
water	12:8	0:0	6	{
decl	13:12	13:52	6	double	current
op	13:27	0:0	6	=
call	13:29	13:51	7	date_Get
arg	13:39	13:51	8	&p_sys->pts
op	13:39	0:0	9	&
water	13:40	0:0	9	p_sys
op	13:45	0:0	9	->
water	13:47	0:0	9	pts
decl	14:12	14:43	6	double	length
op	14:26	0:0	6	=
water	14:28	0:0	6	p_sys
op	14:33	0:0	6	->
water	14:35	0:0	6	i_length
op	15:12	0:0	6	*
water	15:13	0:0	6	pf
op	15:16	0:0	6	=
water	15:18	0:0	6	current
op	15:26	0:0	6	/
water	15:28	0:0	6	length
water	15:34	0:0	6	;
return	16:12	16:30	6	VLC_SUCCESS
water	16:19	0:0	7	VLC_SUCCESS
water	17:8	0:0	6	}
return	18:8	18:27	4	VLC_EGENERIC
water	18:15	0:0	5	VLC_EGENERIC
label	19:4	19:27	4	case DEMUX_SET_POSITION :
water	20:8	0:0	4	f
op	20:10	0:0	4	=
water	20:12	0:0	4	(
water	20:13	0:0	4	double
water	20:19	0:0	4	)
call	20:21	20:42	4	va_arg
arg	20:29	20:33	5	args
water	20:29	0:0	6	args
arg	20:35	20:42	5	double
water	20:35	0:0	6	double
water	20:43	0:0	4	;
water	21:8	0:0	4	i64
op	21:12	0:0	4	=
water	21:14	0:0	4	f
op	21:16	0:0	4	*
water	21:18	0:0	4	p_sys
op	21:23	0:0	4	->
water	21:25	0:0	4	i_length
water	21:33	0:0	4	;
if	22:8	27:8	4	(i64 >= 0 && i64 <= p_sys -> i_length)
cond	22:12	22:38	5	i64 >= 0 && i64 <= p_sys -> i_length
water	22:12	0:0	6	i64
op	22:16	0:0	6	>=
water	22:19	0:0	6	0
op	22:21	0:0	6	&&
water	22:24	0:0	6	i64
op	22:28	0:0	6	<=
water	22:31	0:0	6	p_sys
op	22:36	0:0	6	->
water	22:38	0:0	6	i_length
stmts	23:8	27:8	5	
water	23:8	0:0	6	{
call	24:12	24:47	6	ModPlug_Seek
arg	24:26	24:34	7	p_sys->f
water	24:26	0:0	8	p_sys
op	24:31	0:0	8	->
water	24:33	0:0	8	f
arg	24:36	24:47	7	i64/1000
water	24:36	0:0	8	i64
op	24:40	0:0	8	/
water	24:42	0:0	8	1000
water	24:48	0:0	6	;
call	25:12	25:39	6	date_Set
arg	25:22	25:33	7	&p_sys->pts
op	25:22	0:0	8	&
water	25:23	0:0	8	p_sys
op	25:28	0:0	8	->
water	25:30	0:0	8	pts
arg	25:35	25:39	7	i64
water	25:35	0:0	8	i64
water	25:40	0:0	6	;
return	26:12	26:30	6	VLC_SUCCESS
water	26:19	0:0	7	VLC_SUCCESS
water	27:8	0:0	6	}
return	28:8	28:27	4	VLC_EGENERIC
water	28:15	0:0	5	VLC_EGENERIC
label	29:4	29:23	4	case DEMUX_GET_TIME :
water	30:8	0:0	4	pi64
op	30:13	0:0	4	=
water	30:15	0:0	4	(
water	30:16	0:0	4	int64_t
op	30:23	0:0	4	*
water	30:24	0:0	4	)
call	30:25	30:49	4	va_arg
arg	30:33	30:37	5	args
water	30:33	0:0	6	args
arg	30:39	30:49	5	int64_t*
water	30:39	0:0	6	int64_t
op	30:47	0:0	6	*
water	30:50	0:0	4	;
op	31:8	0:0	4	*
water	31:9	0:0	4	pi64
op	31:14	0:0	4	=
call	31:16	31:38	4	date_Get
arg	31:26	31:38	5	&p_sys->pts
op	31:26	0:0	6	&
water	31:27	0:0	6	p_sys
op	31:32	0:0	6	->
water	31:34	0:0	6	pts
water	31:39	0:0	4	;
return	32:8	32:26	4	VLC_SUCCESS
water	32:15	0:0	5	VLC_SUCCESS
label	33:4	33:25	4	case DEMUX_GET_LENGTH :
water	34:8	0:0	4	pi64
op	34:13	0:0	4	=
water	34:15	0:0	4	(
water	34:16	0:0	4	int64_t
op	34:23	0:0	4	*
water	34:24	0:0	4	)
call	34:25	34:49	4	va_arg
arg	34:33	34:37	5	args
water	34:33	0:0	6	args
arg	34:39	34:49	5	int64_t*
water	34:39	0:0	6	int64_t
op	34:47	0:0	6	*
water	34:50	0:0	4	;
op	35:8	0:0	4	*
water	35:9	0:0	4	pi64
op	35:14	0:0	4	=
water	35:16	0:0	4	p_sys
op	35:21	0:0	4	->
water	35:23	0:0	4	i_length
water	35:31	0:0	4	;
return	36:8	36:26	4	VLC_SUCCESS
water	36:15	0:0	5	VLC_SUCCESS
label	37:4	37:23	4	case DEMUX_SET_TIME :
water	38:8	0:0	4	i64
op	38:12	0:0	4	=
water	38:14	0:0	4	(
water	38:15	0:0	4	int64_t
water	38:22	0:0	4	)
call	38:23	38:45	4	va_arg
arg	38:31	38:35	5	args
water	38:31	0:0	6	args
arg	38:37	38:45	5	int64_t
water	38:37	0:0	6	int64_t
water	38:46	0:0	4	;
if	39:8	44:8	4	(i64 >= 0 && i64 <= p_sys -> i_length)
cond	39:12	39:38	5	i64 >= 0 && i64 <= p_sys -> i_length
water	39:12	0:0	6	i64
op	39:16	0:0	6	>=
water	39:19	0:0	6	0
op	39:21	0:0	6	&&
water	39:24	0:0	6	i64
op	39:28	0:0	6	<=
water	39:31	0:0	6	p_sys
op	39:36	0:0	6	->
water	39:38	0:0	6	i_length
stmts	40:8	44:8	5	
water	40:8	0:0	6	{
call	41:12	41:47	6	ModPlug_Seek
arg	41:26	41:34	7	p_sys->f
water	41:26	0:0	8	p_sys
op	41:31	0:0	8	->
water	41:33	0:0	8	f
arg	41:36	41:47	7	i64/1000
water	41:36	0:0	8	i64
op	41:40	0:0	8	/
water	41:42	0:0	8	1000
water	41:48	0:0	6	;
call	42:12	42:39	6	date_Set
arg	42:22	42:33	7	&p_sys->pts
op	42:22	0:0	8	&
water	42:23	0:0	8	p_sys
op	42:28	0:0	8	->
water	42:30	0:0	8	pts
arg	42:35	42:39	7	i64
water	42:35	0:0	8	i64
water	42:40	0:0	6	;
return	43:12	43:30	6	VLC_SUCCESS
water	43:19	0:0	7	VLC_SUCCESS
water	44:8	0:0	6	}
return	45:8	45:27	4	VLC_EGENERIC
water	45:15	0:0	5	VLC_EGENERIC
label	46:4	46:35	4	case DEMUX_HAS_UNSUPPORTED_META :
water	47:4	0:0	4	{
decl	48:8	48:52	4	bool	*pb_bool
op	48:22	0:0	4	=
water	48:24	0:0	4	(
water	48:25	0:0	4	bool
op	48:29	0:0	4	*
water	48:30	0:0	4	)
call	48:31	48:51	5	va_arg
arg	48:39	48:43	6	args
water	48:39	0:0	7	args
arg	48:45	48:51	6	bool*
water	48:45	0:0	7	bool
op	48:49	0:0	7	*
op	49:8	0:0	4	*
water	49:9	0:0	4	pb_bool
op	49:17	0:0	4	=
water	49:19	0:0	4	false
water	49:24	0:0	4	;
return	50:8	50:26	4	VLC_SUCCESS
water	50:15	0:0	5	VLC_SUCCESS
water	51:4	0:0	4	}
label	52:4	52:23	4	case DEMUX_GET_META :
water	53:4	0:0	4	{
decl	54:8	54:70	4	vlc_meta_t	*p_meta
op	54:27	0:0	4	=
water	54:29	0:0	4	(
water	54:30	0:0	4	vlc_meta_t
op	54:41	0:0	4	*
water	54:42	0:0	4	)
call	54:43	54:69	5	va_arg
arg	54:51	54:55	6	args
water	54:51	0:0	7	args
arg	54:57	54:69	6	vlc_meta_t*
water	54:57	0:0	7	vlc_meta_t
op	54:67	0:0	7	*
water	55:8	0:0	4	unsigned
water	55:17	0:0	4	i_num_samples
op	55:31	0:0	4	=
call	55:33	55:62	4	ModPlug_NumSamples
arg	55:53	55:62	5	p_sys->f
water	55:53	0:0	6	p_sys
op	55:58	0:0	6	->
water	55:60	0:0	6	f
water	55:63	0:0	4	,
water	56:17	0:0	4	i_num_instruments
op	56:35	0:0	4	=
call	56:37	56:70	4	ModPlug_NumInstruments
arg	56:61	56:70	5	p_sys->f
water	56:61	0:0	6	p_sys
op	56:66	0:0	6	->
water	56:68	0:0	6	f
water	56:71	0:0	4	;
water	57:8	0:0	4	unsigned
water	57:17	0:0	4	i_num_patterns
op	57:32	0:0	4	=
call	57:34	57:64	4	ModPlug_NumPatterns
arg	57:55	57:64	5	p_sys->f
water	57:55	0:0	6	p_sys
op	57:60	0:0	6	->
water	57:62	0:0	6	f
water	57:65	0:0	4	,
water	58:17	0:0	4	i_num_channels
op	58:32	0:0	4	=
call	58:34	58:64	4	ModPlug_NumChannels
arg	58:55	58:64	5	p_sys->f
water	58:55	0:0	6	p_sys
op	58:60	0:0	6	->
water	58:62	0:0	6	f
water	58:65	0:0	4	;
decl	60:8	60:27	4	char	psz_temp[2048]
decl	61:8	61:51	4	char	*psz_module_info
water	61:29	0:0	4	,
decl	61:8	61:51	4	char	*psz_instrument_info
water	62:8	0:0	4	unsigned
water	62:17	0:0	4	i_temp_index
op	62:30	0:0	4	=
water	62:32	0:0	4	0
water	62:33	0:0	4	;
decl	63:8	63:58	4	const char	*psz_name
op	63:29	0:0	4	=
call	63:31	63:57	5	ModPlug_GetName
arg	63:48	63:57	6	p_sys->f
water	63:48	0:0	7	p_sys
op	63:53	0:0	7	->
water	63:55	0:0	7	f
if	64:8	65:49	4	(psz_name && * psz_name &&IsUTF8 (psz_name ))
cond	64:12	64:54	5	psz_name && * psz_name &&IsUTF8 (psz_name )
water	64:12	0:0	6	psz_name
op	64:21	0:0	6	&&
op	64:24	0:0	6	*
water	64:25	0:0	6	psz_name
op	64:34	0:0	6	&&
call	64:37	64:54	6	IsUTF8
arg	64:45	64:54	7	psz_name
water	64:45	0:0	8	psz_name
stmts	65:12	65:49	5	
call	65:12	65:48	6	vlc_meta_SetTitle
arg	65:31	65:37	7	p_meta
water	65:31	0:0	8	p_meta
arg	65:39	65:48	7	psz_name
water	65:39	0:0	8	psz_name
water	65:49	0:0	6	;
water	67:8	0:0	4	psz_name
op	67:17	0:0	4	=
call	67:19	67:48	4	ModPlug_GetMessage
arg	67:39	67:48	5	p_sys->f
water	67:39	0:0	6	p_sys
op	67:44	0:0	6	->
water	67:46	0:0	6	f
water	67:49	0:0	4	;
if	68:8	69:55	4	(psz_name && * psz_name &&IsUTF8 (psz_name ))
cond	68:12	68:54	5	psz_name && * psz_name &&IsUTF8 (psz_name )
water	68:12	0:0	6	psz_name
op	68:21	0:0	6	&&
op	68:24	0:0	6	*
water	68:25	0:0	6	psz_name
op	68:34	0:0	6	&&
call	68:37	68:54	6	IsUTF8
arg	68:45	68:54	7	psz_name
water	68:45	0:0	8	psz_name
stmts	69:12	69:55	5	
call	69:12	69:54	6	vlc_meta_SetDescription
arg	69:37	69:43	7	p_meta
water	69:37	0:0	8	p_meta
arg	69:45	69:54	7	psz_name
water	69:45	0:0	8	psz_name
water	69:55	0:0	6	;
if	71:8	85:8	4	(asprintf (& psz_instrument_info ,", %i Instruments" ,i_num_instruments ) >= 0)
cond	71:12	72:45	5	asprintf (& psz_instrument_info ,", %i Instruments" ,i_num_instruments ) >= 0
call	71:12	72:40	6	asprintf
arg	71:22	71:42	7	&psz_instrument_info
op	71:22	0:0	8	&
water	71:23	0:0	8	psz_instrument_info
arg	71:44	71:62	7	", %i Instruments"
water	71:44	0:0	8	", %i Instruments"
arg	72:22	72:40	7	i_num_instruments
water	72:22	0:0	8	i_num_instruments
op	72:42	0:0	6	>=
water	72:45	0:0	6	0
stmts	73:8	85:8	5	
water	73:8	0:0	6	{
if	74:12	83:12	6	(asprintf (& psz_module_info ,"%i Channels, %i Patterns\n" "%i Samples%s\n" ,i_num_channels ,i_num_patterns ,i_num_samples ,( i_num_instruments ? psz_instrument_info : "" ) ) >= 0)
cond	74:16	78:80	7	asprintf (& psz_module_info ,"%i Channels, %i Patterns\n" "%i Samples%s\n" ,i_num_channels ,i_num_patterns ,i_num_samples ,( i_num_instruments ? psz_instrument_info : "" ) ) >= 0
call	74:16	78:75	8	asprintf
arg	74:26	74:42	9	&psz_module_info
op	74:26	0:0	10	&
water	74:27	0:0	10	psz_module_info
arg	75:26	76:42	9	"%i Channels, %i Patterns\n""%i Samples%s\n"
water	75:26	0:0	10	"%i Channels, %i Patterns\n"
water	76:26	0:0	10	"%i Samples%s\n"
arg	77:26	77:40	9	i_num_channels
water	77:26	0:0	10	i_num_channels
arg	77:42	77:56	9	i_num_patterns
water	77:42	0:0	10	i_num_patterns
arg	77:58	77:71	9	i_num_samples
water	77:58	0:0	10	i_num_samples
arg	78:26	78:75	9	(i_num_instruments?psz_instrument_info:"")
water	78:26	0:0	10	(
water	78:28	0:0	10	i_num_instruments
water	78:46	0:0	10	?
water	78:48	0:0	10	psz_instrument_info
water	78:68	0:0	10	:
water	78:70	0:0	10	""
water	78:73	0:0	10	)
op	78:77	0:0	8	>=
water	78:80	0:0	8	0
stmts	79:12	83:12	7	
water	79:12	0:0	8	{
call	80:16	81:51	8	vlc_meta_AddExtra
arg	80:35	80:41	9	p_meta
water	80:35	0:0	10	p_meta
arg	80:43	80:63	9	"Module Information"
water	80:43	0:0	10	"Module Information"
arg	81:35	81:51	9	psz_module_info
water	81:35	0:0	10	psz_module_info
water	81:52	0:0	8	;
call	82:16	82:38	8	free
arg	82:22	82:38	9	psz_module_info
water	82:22	0:0	10	psz_module_info
water	82:39	0:0	8	;
water	83:12	0:0	8	}
call	84:12	84:38	6	free
arg	84:18	84:38	7	psz_instrument_info
water	84:18	0:0	8	psz_instrument_info
water	84:39	0:0	6	;
water	85:8	0:0	6	}
if	87:8	98:8	4	(i_num_instruments)
cond	87:12	87:12	5	i_num_instruments
water	87:12	0:0	6	i_num_instruments
stmts	88:8	98:8	5	
water	88:8	0:0	6	{
water	89:12	0:0	6	i_temp_index
op	89:25	0:0	6	=
water	89:27	0:0	6	0
water	89:28	0:0	6	;
for	90:12	96:12	6	(unsigned i = 0 ;i < i_num_instruments && i_temp_index < sizeof ( psz_temp );i ++)
forinit	90:17	90:31	7	unsigned i = 0 ;
water	90:17	0:0	8	unsigned
water	90:26	0:0	8	i
op	90:28	0:0	8	=
water	90:30	0:0	8	0
water	90:31	0:0	8	;
cond	90:33	90:88	7	i < i_num_instruments && i_temp_index < sizeof ( psz_temp )
water	90:33	0:0	8	i
op	90:35	0:0	8	<
water	90:37	0:0	8	i_num_instruments
op	90:55	0:0	8	&&
water	90:58	0:0	8	i_temp_index
op	90:71	0:0	8	<
op	90:73	0:0	8	sizeof
water	90:79	0:0	8	(
water	90:80	0:0	8	psz_temp
water	90:88	0:0	8	)
forexpr	90:91	90:92	7	i ++
water	90:91	0:0	8	i
op	90:92	0:0	8	++
stmts	91:12	96:12	7	
water	91:12	0:0	8	{
decl	92:16	92:32	8	char	lBuffer[33]
call	93:16	93:61	8	ModPlug_InstrumentName
arg	93:40	93:48	9	p_sys->f
water	93:40	0:0	10	p_sys
op	93:45	0:0	10	->
water	93:47	0:0	10	f
arg	93:50	93:51	9	i
water	93:50	0:0	10	i
arg	93:53	93:61	9	lBuffer
water	93:53	0:0	10	lBuffer
water	93:62	0:0	8	;
if	94:16	94:65	8	(! lBuffer [ 0 ] || !IsUTF8 (lBuffer ))
cond	94:21	94:53	9	! lBuffer [ 0 ] || !IsUTF8 (lBuffer )
op	94:21	0:0	10	!
water	94:22	0:0	10	lBuffer
op	94:29	0:0	10	[
water	94:30	0:0	10	0
op	94:31	0:0	10	]
op	94:33	0:0	10	||
op	94:36	0:0	10	!
call	94:37	94:53	10	IsUTF8
arg	94:45	94:53	11	lBuffer
water	94:45	0:0	12	lBuffer
stmts	94:57	94:65	9	
continue	94:57	94:65	10	
water	95:16	0:0	8	i_temp_index
op	95:29	0:0	8	+=
call	95:32	95:116	8	snprintf
arg	95:42	95:65	9	&psz_temp[i_temp_index]
op	95:42	0:0	10	&
water	95:43	0:0	10	psz_temp
op	95:51	0:0	10	[
water	95:52	0:0	10	i_temp_index
op	95:64	0:0	10	]
arg	95:67	95:98	9	sizeof(psz_temp)-i_temp_index
op	95:67	0:0	10	sizeof
water	95:73	0:0	10	(
water	95:74	0:0	10	psz_temp
water	95:82	0:0	10	)
op	95:84	0:0	10	-
water	95:86	0:0	10	i_temp_index
arg	95:100	95:106	9	"%s\n"
water	95:100	0:0	10	"%s\n"
arg	95:108	95:116	9	lBuffer
water	95:108	0:0	10	lBuffer
water	95:117	0:0	8	;
water	96:12	0:0	8	}
call	97:12	97:63	6	vlc_meta_AddExtra
arg	97:31	97:37	7	p_meta
water	97:31	0:0	8	p_meta
arg	97:39	97:52	7	"Instruments"
water	97:39	0:0	8	"Instruments"
arg	97:54	97:63	7	psz_temp
water	97:54	0:0	8	psz_temp
water	97:64	0:0	6	;
water	98:8	0:0	6	}
for	100:8	106:8	4	( unsigned int i = 0 ;i < i_num_samples && i_temp_index < sizeof ( psz_temp );i ++)
forinit	0:0	100:31	5	 unsigned int i = 0 ;
decl	100:13	100:31	6	unsigned int	i
op	100:28	0:0	6	=
water	100:30	0:0	6	0
cond	100:33	100:84	5	i < i_num_samples && i_temp_index < sizeof ( psz_temp )
water	100:33	0:0	6	i
op	100:35	0:0	6	<
water	100:37	0:0	6	i_num_samples
op	100:51	0:0	6	&&
water	100:54	0:0	6	i_temp_index
op	100:67	0:0	6	<
op	100:69	0:0	6	sizeof
water	100:75	0:0	6	(
water	100:76	0:0	6	psz_temp
water	100:84	0:0	6	)
forexpr	100:87	100:88	5	i ++
water	100:87	0:0	6	i
op	100:88	0:0	6	++
stmts	101:8	106:8	5	
water	101:8	0:0	6	{
decl	102:12	102:31	6	char	psz_buffer[33]
call	103:12	103:56	6	ModPlug_SampleName
arg	103:32	103:40	7	p_sys->f
water	103:32	0:0	8	p_sys
op	103:37	0:0	8	->
water	103:39	0:0	8	f
arg	103:42	103:43	7	i
water	103:42	0:0	8	i
arg	103:45	103:56	7	psz_buffer
water	103:45	0:0	8	psz_buffer
water	103:57	0:0	6	;
if	104:12	104:67	6	(! psz_buffer [ 0 ] || !IsUTF8 (psz_buffer ))
cond	104:17	104:55	7	! psz_buffer [ 0 ] || !IsUTF8 (psz_buffer )
op	104:17	0:0	8	!
water	104:18	0:0	8	psz_buffer
op	104:28	0:0	8	[
water	104:29	0:0	8	0
op	104:30	0:0	8	]
op	104:32	0:0	8	||
op	104:35	0:0	8	!
call	104:36	104:55	8	IsUTF8
arg	104:44	104:55	9	psz_buffer
water	104:44	0:0	10	psz_buffer
stmts	104:59	104:67	7	
continue	104:59	104:67	8	
water	105:12	0:0	6	i_temp_index
op	105:25	0:0	6	+=
call	105:28	105:115	6	snprintf
arg	105:38	105:61	7	&psz_temp[i_temp_index]
op	105:38	0:0	8	&
water	105:39	0:0	8	psz_temp
op	105:47	0:0	8	[
water	105:48	0:0	8	i_temp_index
op	105:60	0:0	8	]
arg	105:63	105:94	7	sizeof(psz_temp)-i_temp_index
op	105:63	0:0	8	sizeof
water	105:69	0:0	8	(
water	105:70	0:0	8	psz_temp
water	105:78	0:0	8	)
op	105:80	0:0	8	-
water	105:82	0:0	8	i_temp_index
arg	105:96	105:102	7	"%s\n"
water	105:96	0:0	8	"%s\n"
arg	105:104	105:115	7	psz_buffer
water	105:104	0:0	8	psz_buffer
water	105:116	0:0	6	;
water	106:8	0:0	6	}
call	107:8	107:55	4	vlc_meta_AddExtra
arg	107:27	107:33	5	p_meta
water	107:27	0:0	6	p_meta
arg	107:35	107:44	5	"Samples"
water	107:35	0:0	6	"Samples"
arg	107:46	107:55	5	psz_temp
water	107:46	0:0	6	psz_temp
water	107:56	0:0	4	;
return	108:8	108:26	4	VLC_SUCCESS
water	108:15	0:0	5	VLC_SUCCESS
water	109:4	0:0	4	}
label	110:4	110:22	4	case DEMUX_GET_FPS :
label	111:4	111:11	4	default :
return	112:8	112:27	4	VLC_EGENERIC
water	112:15	0:0	5	VLC_EGENERIC
water	113:4	0:0	4	}
