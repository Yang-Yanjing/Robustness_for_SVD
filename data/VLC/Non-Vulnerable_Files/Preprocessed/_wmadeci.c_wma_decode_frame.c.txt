func	2:0	42:0	0	static int	wma_decode_frame
params	2:27	0:0	1	
param	2:28	2:47	2	WMADecodeContext *	s
param	2:49	2:65	2	int32_t *	samples
stmnts	0:0	41:12	1	
decl	4:4	4:27	2	int	ret
water	4:11	0:0	2	,
decl	4:4	4:27	2	int	i
water	4:14	0:0	2	,
decl	4:4	4:27	2	int	n
water	4:17	0:0	2	,
decl	4:4	4:27	2	int	ch
water	4:21	0:0	2	,
decl	4:4	4:27	2	int	incr
decl	5:4	5:16	2	int32_t	*ptr
decl	6:4	6:17	2	int32_t	*iptr
water	8:4	0:0	2	s
op	8:5	0:0	2	->
water	8:7	0:0	2	block_num
op	8:17	0:0	2	=
water	8:19	0:0	2	0
water	8:20	0:0	2	;
water	9:4	0:0	2	s
op	9:5	0:0	2	->
water	9:7	0:0	2	block_pos
op	9:17	0:0	2	=
water	9:19	0:0	2	0
water	9:20	0:0	2	;
for	10:4	24:4	2	(;;)
forinit	10:8	10:8	3	;
water	10:8	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	11:4	24:4	3	
water	11:4	0:0	4	{
water	12:8	0:0	4	ret
op	12:12	0:0	4	=
call	12:14	12:32	4	wma_decode_block
arg	12:31	12:32	5	s
water	12:31	0:0	6	s
water	12:33	0:0	4	;
if	13:8	19:8	4	(ret < 0)
cond	13:12	13:18	5	ret < 0
water	13:12	0:0	6	ret
op	13:16	0:0	6	<
water	13:18	0:0	6	0
stmts	14:8	19:8	5	
water	14:8	0:0	6	{
call	16:12	16:64	6	printf
arg	16:19	16:59	7	"wma_decode_block failed with code %d\n"
water	16:19	0:0	8	"wma_decode_block failed with code %d\n"
arg	16:61	16:64	7	ret
water	16:61	0:0	8	ret
water	16:65	0:0	6	;
return	18:12	18:21	6	-1
op	18:19	0:0	7	-
water	18:20	0:0	7	1
water	19:8	0:0	6	}
if	20:8	23:8	4	(ret)
cond	20:12	20:12	5	ret
water	20:12	0:0	6	ret
stmts	21:8	23:8	5	
water	21:8	0:0	6	{
break	22:12	22:17	6	
water	23:8	0:0	6	}
water	24:4	0:0	4	}
water	26:4	0:0	2	n
op	26:6	0:0	2	=
water	26:8	0:0	2	s
op	26:9	0:0	2	->
water	26:11	0:0	2	frame_len
water	26:20	0:0	2	;
water	27:4	0:0	2	incr
op	27:9	0:0	2	=
water	27:11	0:0	2	s
op	27:12	0:0	2	->
water	27:14	0:0	2	nb_channels
water	27:25	0:0	2	;
for	28:4	40:4	2	(ch = 0 ;ch < s -> nb_channels;++ ch)
forinit	28:8	28:14	3	ch = 0 ;
water	28:8	0:0	4	ch
op	28:11	0:0	4	=
water	28:13	0:0	4	0
water	28:14	0:0	4	;
cond	28:16	28:24	3	ch < s -> nb_channels
water	28:16	0:0	4	ch
op	28:19	0:0	4	<
water	28:21	0:0	4	s
op	28:22	0:0	4	->
water	28:24	0:0	4	nb_channels
forexpr	28:37	28:39	3	++ ch
op	28:37	0:0	4	++
water	28:39	0:0	4	ch
stmts	29:4	40:4	3	
water	29:4	0:0	4	{
water	30:8	0:0	4	ptr
op	30:12	0:0	4	=
water	30:14	0:0	4	samples
op	30:22	0:0	4	+
water	30:24	0:0	4	ch
water	30:26	0:0	4	;
water	31:8	0:0	4	iptr
op	31:13	0:0	4	=
water	31:15	0:0	4	s
op	31:16	0:0	4	->
water	31:18	0:0	4	frame_out
op	31:27	0:0	4	[
water	31:28	0:0	4	ch
op	31:30	0:0	4	]
water	31:31	0:0	4	;
for	32:8	36:8	4	(i = 0 ;i < n;++ i)
forinit	32:13	32:16	5	i = 0 ;
water	32:13	0:0	6	i
op	32:14	0:0	6	=
water	32:15	0:0	6	0
water	32:16	0:0	6	;
cond	32:17	32:19	5	i < n
water	32:17	0:0	6	i
op	32:18	0:0	6	<
water	32:19	0:0	6	n
forexpr	32:21	32:23	5	++ i
op	32:21	0:0	6	++
water	32:23	0:0	6	i
stmts	33:8	36:8	5	
water	33:8	0:0	6	{
op	34:12	0:0	6	*
water	34:13	0:0	6	ptr
op	34:17	0:0	6	=
water	34:19	0:0	6	(
op	34:20	0:0	6	*
water	34:21	0:0	6	iptr
op	34:25	0:0	6	++
water	34:27	0:0	6	)
water	34:28	0:0	6	;
water	35:12	0:0	6	ptr
op	35:16	0:0	6	+=
water	35:19	0:0	6	incr
water	35:23	0:0	6	;
water	36:8	0:0	6	}
call	38:8	39:46	4	memmove
arg	38:16	38:36	5	&s->frame_out[ch][0]
op	38:16	0:0	6	&
water	38:17	0:0	6	s
op	38:18	0:0	6	->
water	38:20	0:0	6	frame_out
op	38:29	0:0	6	[
water	38:30	0:0	6	ch
op	38:32	0:0	6	]
op	38:33	0:0	6	[
water	38:34	0:0	6	0
op	38:35	0:0	6	]
arg	38:38	38:69	5	&s->frame_out[ch][s->frame_len]
op	38:38	0:0	6	&
water	38:39	0:0	6	s
op	38:40	0:0	6	->
water	38:42	0:0	6	frame_out
op	38:51	0:0	6	[
water	38:52	0:0	6	ch
op	38:54	0:0	6	]
op	38:55	0:0	6	[
water	38:56	0:0	6	s
op	38:57	0:0	6	->
water	38:59	0:0	6	frame_len
op	38:68	0:0	6	]
arg	39:16	39:46	5	s->frame_len*sizeof(int32_t)
water	39:16	0:0	6	s
op	39:17	0:0	6	->
water	39:19	0:0	6	frame_len
op	39:29	0:0	6	*
op	39:31	0:0	6	sizeof
water	39:37	0:0	6	(
water	39:38	0:0	6	int32_t
water	39:45	0:0	6	)
water	39:47	0:0	4	;
water	40:4	0:0	4	}
return	41:4	41:12	2	0
water	41:11	0:0	3	0
