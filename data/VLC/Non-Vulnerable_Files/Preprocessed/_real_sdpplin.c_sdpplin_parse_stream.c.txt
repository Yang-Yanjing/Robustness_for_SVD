func	2:0	113:0	0	static sdpplin_stream_t *	sdpplin_parse_stream
params	2:45	0:0	1	
param	2:46	2:64	2	access_t *	p_access
param	2:66	2:77	2	char * *	data
stmnts	0:0	112:13	1	
decl	3:2	3:24	2	sdpplin_stream_t	*desc
decl	4:2	4:18	2	char	*buf
op	4:12	0:0	2	=
water	4:14	0:0	2	NULL
decl	5:2	5:31	2	unsigned char	*decoded
op	5:25	0:0	2	=
water	5:27	0:0	2	NULL
decl	6:2	6:13	2	int	handled
water	7:2	0:0	2	desc
op	7:7	0:0	2	=
call	7:9	7:45	2	calloc
arg	7:17	7:18	3	1
water	7:17	0:0	4	1
arg	7:20	7:45	3	sizeof(sdpplin_stream_t)
op	7:20	0:0	4	sizeof
water	7:26	0:0	4	(
water	7:27	0:0	4	sdpplin_stream_t
water	7:43	0:0	4	)
water	7:46	0:0	2	;
if	8:2	9:15	2	(! desc)
cond	8:6	8:7	3	! desc
op	8:6	0:0	4	!
water	8:7	0:0	4	desc
stmts	9:4	9:15	3	
return	9:4	9:15	4	NULL
water	9:11	0:0	5	NULL
water	10:2	0:0	2	buf
op	10:6	0:0	2	=
call	10:8	10:23	2	malloc
arg	10:16	10:23	3	BUFLEN
water	10:16	0:0	4	BUFLEN
water	10:24	0:0	2	;
if	11:2	12:14	2	(! buf)
cond	11:6	11:7	3	! buf
op	11:6	0:0	4	!
water	11:7	0:0	4	buf
stmts	12:4	12:14	3	
goto	12:4	12:14	4	error
water	12:9	0:0	5	error
water	13:2	0:0	2	decoded
op	13:10	0:0	2	=
call	13:12	13:27	2	malloc
arg	13:20	13:27	3	BUFLEN
water	13:20	0:0	4	BUFLEN
water	13:28	0:0	2	;
if	14:2	15:14	2	(! decoded)
cond	14:6	14:7	3	! decoded
op	14:6	0:0	4	!
water	14:7	0:0	4	decoded
stmts	15:4	15:14	3	
goto	15:4	15:14	4	error
water	15:9	0:0	5	error
if	16:2	18:2	2	(filter (p_access ,* data ,"m=" ,& buf ,BUFLEN ))
cond	16:6	16:48	3	filter (p_access ,* data ,"m=" ,& buf ,BUFLEN )
call	16:6	16:48	4	filter
arg	16:13	16:21	5	p_access
water	16:13	0:0	6	p_access
arg	16:23	16:28	5	*data
op	16:23	0:0	6	*
water	16:24	0:0	6	data
arg	16:30	16:34	5	"m="
water	16:30	0:0	6	"m="
arg	16:36	16:40	5	&buf
op	16:36	0:0	6	&
water	16:37	0:0	6	buf
arg	16:42	16:48	5	BUFLEN
water	16:42	0:0	6	BUFLEN
stmts	16:51	18:2	3	
water	16:51	0:0	4	{
water	17:4	0:0	4	desc
op	17:8	0:0	4	->
water	17:10	0:0	4	id
op	17:13	0:0	4	=
call	17:15	17:25	4	strdup
arg	17:22	17:25	5	buf
water	17:22	0:0	6	buf
water	17:26	0:0	4	;
water	18:2	0:0	4	}
else	18:4	21:2	2
stmts	18:9	21:2	3	
water	18:9	0:0	4	{
call	19:4	19:45	4	msg_Dbg
arg	19:12	19:20	5	p_access
water	19:12	0:0	6	p_access
arg	19:22	19:45	5	"sdpplin: no m= found."
water	19:22	0:0	6	"sdpplin: no m= found."
water	19:46	0:0	4	;
goto	20:4	20:14	4	error
water	20:9	0:0	5	error
water	21:2	0:0	4	}
op	22:2	0:0	2	*
water	22:3	0:0	2	data
op	22:7	0:0	2	=
call	22:8	22:16	2	nl
arg	22:11	22:16	3	*data
op	22:11	0:0	4	*
water	22:12	0:0	4	data
water	22:17	0:0	2	;
while	23:2	104:2	2	(* data && * * data && * data [ 0 ] != 'm')
cond	23:9	23:38	3	* data && * * data && * data [ 0 ] != 'm'
op	23:9	0:0	4	*
water	23:10	0:0	4	data
op	23:15	0:0	4	&&
op	23:18	0:0	4	*
op	23:19	0:0	4	*
water	23:20	0:0	4	data
op	23:25	0:0	4	&&
op	23:28	0:0	4	*
water	23:29	0:0	4	data
op	23:33	0:0	4	[
water	23:34	0:0	4	0
op	23:35	0:0	4	]
op	23:36	0:0	4	!=
water	23:38	0:0	4	'm'
stmts	23:43	104:2	3	
water	23:43	0:0	4	{
water	24:4	0:0	4	handled
op	24:11	0:0	4	=
water	24:12	0:0	4	0
water	24:13	0:0	4	;
if	25:4	36:4	4	(filter (p_access ,* data ,"a=control:streamid=" ,& buf ,BUFLEN ))
cond	25:7	25:64	5	filter (p_access ,* data ,"a=control:streamid=" ,& buf ,BUFLEN )
call	25:7	25:64	6	filter
arg	25:14	25:22	7	p_access
water	25:14	0:0	8	p_access
arg	25:24	25:29	7	*data
op	25:24	0:0	8	*
water	25:25	0:0	8	data
arg	25:30	25:51	7	"a=control:streamid="
water	25:30	0:0	8	"a=control:streamid="
arg	25:52	25:56	7	&buf
op	25:52	0:0	8	&
water	25:53	0:0	8	buf
arg	25:58	25:64	7	BUFLEN
water	25:58	0:0	8	BUFLEN
stmts	25:67	36:4	5	
water	25:67	0:0	6	{
decl	29:8	29:50	6	unsigned long	tmp
op	29:26	0:0	6	=
call	29:28	29:49	7	strtoul
arg	29:36	29:39	8	buf
water	29:36	0:0	9	buf
arg	29:41	29:45	8	NULL
water	29:41	0:0	9	NULL
arg	29:47	29:49	8	10
water	29:47	0:0	9	10
if	30:8	31:66	6	(tmp > UINT16_MAX)
cond	30:13	30:19	7	tmp > UINT16_MAX
water	30:13	0:0	8	tmp
op	30:17	0:0	8	>
water	30:19	0:0	8	UINT16_MAX
stmts	31:12	31:66	7	
call	31:12	31:65	8	msg_Warn
arg	31:21	31:29	9	p_access
water	31:21	0:0	10	p_access
arg	31:31	31:60	9	"stream id out of bound: %lu"
water	31:31	0:0	10	"stream id out of bound: %lu"
arg	31:62	31:65	9	tmp
water	31:62	0:0	10	tmp
water	31:66	0:0	8	;
else	32:8	33:31	6
stmts	33:12	33:31	7	
water	33:12	0:0	8	desc
op	33:16	0:0	8	->
water	33:18	0:0	8	stream_id
op	33:27	0:0	8	=
water	33:28	0:0	8	tmp
water	33:31	0:0	8	;
water	34:8	0:0	6	handled
op	34:15	0:0	6	=
water	34:16	0:0	6	1
water	34:17	0:0	6	;
op	35:8	0:0	6	*
water	35:9	0:0	6	data
op	35:13	0:0	6	=
call	35:14	35:22	6	nl
arg	35:17	35:22	7	*data
op	35:17	0:0	8	*
water	35:18	0:0	8	data
water	35:23	0:0	6	;
water	36:4	0:0	6	}
if	37:4	43:4	4	(filter (p_access ,* data ,"a=MaxBitRate:integer;" ,& buf ,BUFLEN ))
cond	37:7	37:66	5	filter (p_access ,* data ,"a=MaxBitRate:integer;" ,& buf ,BUFLEN )
call	37:7	37:66	6	filter
arg	37:14	37:22	7	p_access
water	37:14	0:0	8	p_access
arg	37:24	37:29	7	*data
op	37:24	0:0	8	*
water	37:25	0:0	8	data
arg	37:30	37:53	7	"a=MaxBitRate:integer;"
water	37:30	0:0	8	"a=MaxBitRate:integer;"
arg	37:54	37:58	7	&buf
op	37:54	0:0	8	&
water	37:55	0:0	8	buf
arg	37:60	37:66	7	BUFLEN
water	37:60	0:0	8	BUFLEN
stmts	37:69	43:4	5	
water	37:69	0:0	6	{
water	38:6	0:0	6	desc
op	38:10	0:0	6	->
water	38:12	0:0	6	max_bit_rate
op	38:24	0:0	6	=
call	38:25	38:33	6	atoi
arg	38:30	38:33	7	buf
water	38:30	0:0	8	buf
water	38:34	0:0	6	;
if	39:6	40:45	6	(! desc -> avg_bit_rate)
cond	39:10	39:17	7	! desc -> avg_bit_rate
op	39:10	0:0	8	!
water	39:11	0:0	8	desc
op	39:15	0:0	8	->
water	39:17	0:0	8	avg_bit_rate
stmts	40:8	40:45	7	
water	40:8	0:0	8	desc
op	40:12	0:0	8	->
water	40:14	0:0	8	avg_bit_rate
op	40:26	0:0	8	=
water	40:27	0:0	8	desc
op	40:31	0:0	8	->
water	40:33	0:0	8	max_bit_rate
water	40:45	0:0	8	;
water	41:6	0:0	6	handled
op	41:13	0:0	6	=
water	41:14	0:0	6	1
water	41:15	0:0	6	;
op	42:6	0:0	6	*
water	42:7	0:0	6	data
op	42:11	0:0	6	=
call	42:12	42:20	6	nl
arg	42:15	42:20	7	*data
op	42:15	0:0	8	*
water	42:16	0:0	8	data
water	42:21	0:0	6	;
water	43:4	0:0	6	}
if	44:4	50:4	4	(filter (p_access ,* data ,"a=MaxPacketSize:integer;" ,& buf ,BUFLEN ))
cond	44:7	44:69	5	filter (p_access ,* data ,"a=MaxPacketSize:integer;" ,& buf ,BUFLEN )
call	44:7	44:69	6	filter
arg	44:14	44:22	7	p_access
water	44:14	0:0	8	p_access
arg	44:24	44:29	7	*data
op	44:24	0:0	8	*
water	44:25	0:0	8	data
arg	44:30	44:56	7	"a=MaxPacketSize:integer;"
water	44:30	0:0	8	"a=MaxPacketSize:integer;"
arg	44:57	44:61	7	&buf
op	44:57	0:0	8	&
water	44:58	0:0	8	buf
arg	44:63	44:69	7	BUFLEN
water	44:63	0:0	8	BUFLEN
stmts	44:72	50:4	5	
water	44:72	0:0	6	{
water	45:6	0:0	6	desc
op	45:10	0:0	6	->
water	45:12	0:0	6	max_packet_size
op	45:27	0:0	6	=
call	45:28	45:36	6	atoi
arg	45:33	45:36	7	buf
water	45:33	0:0	8	buf
water	45:37	0:0	6	;
if	46:6	47:51	6	(! desc -> avg_packet_size)
cond	46:10	46:17	7	! desc -> avg_packet_size
op	46:10	0:0	8	!
water	46:11	0:0	8	desc
op	46:15	0:0	8	->
water	46:17	0:0	8	avg_packet_size
stmts	47:8	47:51	7	
water	47:8	0:0	8	desc
op	47:12	0:0	8	->
water	47:14	0:0	8	avg_packet_size
op	47:29	0:0	8	=
water	47:30	0:0	8	desc
op	47:34	0:0	8	->
water	47:36	0:0	8	max_packet_size
water	47:51	0:0	8	;
water	48:6	0:0	6	handled
op	48:13	0:0	6	=
water	48:14	0:0	6	1
water	48:15	0:0	6	;
op	49:6	0:0	6	*
water	49:7	0:0	6	data
op	49:11	0:0	6	=
call	49:12	49:20	6	nl
arg	49:15	49:20	7	*data
op	49:15	0:0	8	*
water	49:16	0:0	8	data
water	49:21	0:0	6	;
water	50:4	0:0	6	}
if	51:4	55:4	4	(filter (p_access ,* data ,"a=StartTime:integer;" ,& buf ,BUFLEN ))
cond	51:7	51:65	5	filter (p_access ,* data ,"a=StartTime:integer;" ,& buf ,BUFLEN )
call	51:7	51:65	6	filter
arg	51:14	51:22	7	p_access
water	51:14	0:0	8	p_access
arg	51:24	51:29	7	*data
op	51:24	0:0	8	*
water	51:25	0:0	8	data
arg	51:30	51:52	7	"a=StartTime:integer;"
water	51:30	0:0	8	"a=StartTime:integer;"
arg	51:53	51:57	7	&buf
op	51:53	0:0	8	&
water	51:54	0:0	8	buf
arg	51:59	51:65	7	BUFLEN
water	51:59	0:0	8	BUFLEN
stmts	51:68	55:4	5	
water	51:68	0:0	6	{
water	52:6	0:0	6	desc
op	52:10	0:0	6	->
water	52:12	0:0	6	start_time
op	52:22	0:0	6	=
call	52:23	52:31	6	atoi
arg	52:28	52:31	7	buf
water	52:28	0:0	8	buf
water	52:32	0:0	6	;
water	53:6	0:0	6	handled
op	53:13	0:0	6	=
water	53:14	0:0	6	1
water	53:15	0:0	6	;
op	54:6	0:0	6	*
water	54:7	0:0	6	data
op	54:11	0:0	6	=
call	54:12	54:20	6	nl
arg	54:15	54:20	7	*data
op	54:15	0:0	8	*
water	54:16	0:0	8	data
water	54:21	0:0	6	;
water	55:4	0:0	6	}
if	56:4	60:4	4	(filter (p_access ,* data ,"a=Preroll:integer;" ,& buf ,BUFLEN ))
cond	56:7	56:63	5	filter (p_access ,* data ,"a=Preroll:integer;" ,& buf ,BUFLEN )
call	56:7	56:63	6	filter
arg	56:14	56:22	7	p_access
water	56:14	0:0	8	p_access
arg	56:24	56:29	7	*data
op	56:24	0:0	8	*
water	56:25	0:0	8	data
arg	56:30	56:50	7	"a=Preroll:integer;"
water	56:30	0:0	8	"a=Preroll:integer;"
arg	56:51	56:55	7	&buf
op	56:51	0:0	8	&
water	56:52	0:0	8	buf
arg	56:57	56:63	7	BUFLEN
water	56:57	0:0	8	BUFLEN
stmts	56:66	60:4	5	
water	56:66	0:0	6	{
water	57:6	0:0	6	desc
op	57:10	0:0	6	->
water	57:12	0:0	6	preroll
op	57:19	0:0	6	=
call	57:20	57:28	6	atoi
arg	57:25	57:28	7	buf
water	57:25	0:0	8	buf
water	57:29	0:0	6	;
water	58:6	0:0	6	handled
op	58:13	0:0	6	=
water	58:14	0:0	6	1
water	58:15	0:0	6	;
op	59:6	0:0	6	*
water	59:7	0:0	6	data
op	59:11	0:0	6	=
call	59:12	59:20	6	nl
arg	59:15	59:20	7	*data
op	59:15	0:0	8	*
water	59:16	0:0	8	data
water	59:21	0:0	6	;
water	60:4	0:0	6	}
if	61:4	65:4	4	(filter (p_access ,* data ,"a=length:npt=" ,& buf ,BUFLEN ))
cond	61:7	61:58	5	filter (p_access ,* data ,"a=length:npt=" ,& buf ,BUFLEN )
call	61:7	61:58	6	filter
arg	61:14	61:22	7	p_access
water	61:14	0:0	8	p_access
arg	61:24	61:29	7	*data
op	61:24	0:0	8	*
water	61:25	0:0	8	data
arg	61:30	61:45	7	"a=length:npt="
water	61:30	0:0	8	"a=length:npt="
arg	61:46	61:50	7	&buf
op	61:46	0:0	8	&
water	61:47	0:0	8	buf
arg	61:52	61:58	7	BUFLEN
water	61:52	0:0	8	BUFLEN
stmts	61:61	65:4	5	
water	61:61	0:0	6	{
water	62:6	0:0	6	desc
op	62:10	0:0	6	->
water	62:12	0:0	6	duration
op	62:20	0:0	6	=
call	62:21	62:46	6	(uint32_t)
arg	62:32	62:46	7	atof(buf)*1000
call	62:32	62:40	8	atof
arg	62:37	62:40	9	buf
water	62:37	0:0	10	buf
op	62:41	0:0	8	*
water	62:42	0:0	8	1000
water	62:47	0:0	6	;
water	63:6	0:0	6	handled
op	63:13	0:0	6	=
water	63:14	0:0	6	1
water	63:15	0:0	6	;
op	64:6	0:0	6	*
water	64:7	0:0	6	data
op	64:11	0:0	6	=
call	64:12	64:20	6	nl
arg	64:15	64:20	7	*data
op	64:15	0:0	8	*
water	64:16	0:0	8	data
water	64:21	0:0	6	;
water	65:4	0:0	6	}
if	66:4	71:4	4	(filter (p_access ,* data ,"a=StreamName:string;" ,& buf ,BUFLEN ))
cond	66:7	66:65	5	filter (p_access ,* data ,"a=StreamName:string;" ,& buf ,BUFLEN )
call	66:7	66:65	6	filter
arg	66:14	66:22	7	p_access
water	66:14	0:0	8	p_access
arg	66:24	66:29	7	*data
op	66:24	0:0	8	*
water	66:25	0:0	8	data
arg	66:30	66:52	7	"a=StreamName:string;"
water	66:30	0:0	8	"a=StreamName:string;"
arg	66:53	66:57	7	&buf
op	66:53	0:0	8	&
water	66:54	0:0	8	buf
arg	66:59	66:65	7	BUFLEN
water	66:59	0:0	8	BUFLEN
stmts	66:68	71:4	5	
water	66:68	0:0	6	{
water	67:6	0:0	6	desc
op	67:10	0:0	6	->
water	67:12	0:0	6	stream_name
op	67:23	0:0	6	=
call	67:24	67:34	6	strdup
arg	67:31	67:34	7	buf
water	67:31	0:0	8	buf
water	67:35	0:0	6	;
water	68:6	0:0	6	desc
op	68:10	0:0	6	->
water	68:12	0:0	6	stream_name_size
op	68:28	0:0	6	=
call	68:29	68:53	6	strlen
arg	68:36	68:53	7	desc->stream_name
water	68:36	0:0	8	desc
op	68:40	0:0	8	->
water	68:42	0:0	8	stream_name
water	68:54	0:0	6	;
water	69:6	0:0	6	handled
op	69:13	0:0	6	=
water	69:14	0:0	6	1
water	69:15	0:0	6	;
op	70:6	0:0	6	*
water	70:7	0:0	6	data
op	70:11	0:0	6	=
call	70:12	70:20	6	nl
arg	70:15	70:20	7	*data
op	70:15	0:0	8	*
water	70:16	0:0	8	data
water	70:21	0:0	6	;
water	71:4	0:0	6	}
if	72:4	77:4	4	(filter (p_access ,* data ,"a=mimetype:string;" ,& buf ,BUFLEN ))
cond	72:7	72:63	5	filter (p_access ,* data ,"a=mimetype:string;" ,& buf ,BUFLEN )
call	72:7	72:63	6	filter
arg	72:14	72:22	7	p_access
water	72:14	0:0	8	p_access
arg	72:24	72:29	7	*data
op	72:24	0:0	8	*
water	72:25	0:0	8	data
arg	72:30	72:50	7	"a=mimetype:string;"
water	72:30	0:0	8	"a=mimetype:string;"
arg	72:51	72:55	7	&buf
op	72:51	0:0	8	&
water	72:52	0:0	8	buf
arg	72:57	72:63	7	BUFLEN
water	72:57	0:0	8	BUFLEN
stmts	72:66	77:4	5	
water	72:66	0:0	6	{
water	73:6	0:0	6	desc
op	73:10	0:0	6	->
water	73:12	0:0	6	mime_type
op	73:21	0:0	6	=
call	73:22	73:32	6	strdup
arg	73:29	73:32	7	buf
water	73:29	0:0	8	buf
water	73:33	0:0	6	;
water	74:6	0:0	6	desc
op	74:10	0:0	6	->
water	74:12	0:0	6	mime_type_size
op	74:26	0:0	6	=
call	74:27	74:49	6	strlen
arg	74:34	74:49	7	desc->mime_type
water	74:34	0:0	8	desc
op	74:38	0:0	8	->
water	74:40	0:0	8	mime_type
water	74:50	0:0	6	;
water	75:6	0:0	6	handled
op	75:13	0:0	6	=
water	75:14	0:0	6	1
water	75:15	0:0	6	;
op	76:6	0:0	6	*
water	76:7	0:0	6	data
op	76:11	0:0	6	=
call	76:12	76:20	6	nl
arg	76:15	76:20	7	*data
op	76:15	0:0	8	*
water	76:16	0:0	8	data
water	76:21	0:0	6	;
water	77:4	0:0	6	}
if	78:4	88:4	4	(filter (p_access ,* data ,"a=OpaqueData:buffer;" ,& buf ,BUFLEN ))
cond	78:7	78:65	5	filter (p_access ,* data ,"a=OpaqueData:buffer;" ,& buf ,BUFLEN )
call	78:7	78:65	6	filter
arg	78:14	78:22	7	p_access
water	78:14	0:0	8	p_access
arg	78:24	78:29	7	*data
op	78:24	0:0	8	*
water	78:25	0:0	8	data
arg	78:30	78:52	7	"a=OpaqueData:buffer;"
water	78:30	0:0	8	"a=OpaqueData:buffer;"
arg	78:53	78:57	7	&buf
op	78:53	0:0	8	&
water	78:54	0:0	8	buf
arg	78:59	78:65	7	BUFLEN
water	78:59	0:0	8	BUFLEN
stmts	78:68	88:4	5	
water	78:68	0:0	6	{
water	79:6	0:0	6	desc
op	79:10	0:0	6	->
water	79:12	0:0	6	mlti_data_size
op	79:27	0:0	6	=
call	80:10	80:63	6	vlc_b64_decode_binary_to_buffer
arg	80:42	80:49	7	decoded
water	80:42	0:0	8	decoded
arg	80:51	80:57	7	BUFLEN
water	80:51	0:0	8	BUFLEN
arg	80:59	80:63	7	buf
water	80:59	0:0	8	buf
water	80:64	0:0	6	;
if	81:6	87:6	6	(desc -> mlti_data_size)
cond	81:11	81:17	7	desc -> mlti_data_size
water	81:11	0:0	8	desc
op	81:15	0:0	8	->
water	81:17	0:0	8	mlti_data_size
stmts	81:34	87:6	7	
water	81:34	0:0	8	{
water	82:10	0:0	8	desc
op	82:14	0:0	8	->
water	82:16	0:0	8	mlti_data
op	82:26	0:0	8	=
call	82:28	82:55	8	malloc
arg	82:35	82:55	9	desc->mlti_data_size
water	82:35	0:0	10	desc
op	82:39	0:0	10	->
water	82:41	0:0	10	mlti_data_size
water	82:56	0:0	8	;
call	83:10	83:63	8	memcpy
arg	83:17	83:32	9	desc->mlti_data
water	83:17	0:0	10	desc
op	83:21	0:0	10	->
water	83:23	0:0	10	mlti_data
arg	83:34	83:41	9	decoded
water	83:34	0:0	10	decoded
arg	83:43	83:63	9	desc->mlti_data_size
water	83:43	0:0	10	desc
op	83:47	0:0	10	->
water	83:49	0:0	10	mlti_data_size
water	83:64	0:0	8	;
water	84:10	0:0	8	handled
op	84:17	0:0	8	=
water	84:18	0:0	8	1
water	84:19	0:0	8	;
op	85:10	0:0	8	*
water	85:11	0:0	8	data
op	85:15	0:0	8	=
call	85:16	85:24	8	nl
arg	85:19	85:24	9	*data
op	85:19	0:0	10	*
water	85:20	0:0	10	data
water	85:25	0:0	8	;
call	86:10	86:70	8	msg_Dbg
arg	86:18	86:26	9	p_access
water	86:18	0:0	10	p_access
arg	86:28	86:48	9	"mlti_data_size: %i"
water	86:28	0:0	10	"mlti_data_size: %i"
arg	86:50	86:70	9	desc->mlti_data_size
water	86:50	0:0	10	desc
op	86:54	0:0	10	->
water	86:56	0:0	10	mlti_data_size
water	86:71	0:0	8	;
water	87:6	0:0	8	}
water	88:4	0:0	6	}
if	89:4	93:4	4	(filter (p_access ,* data ,"a=ASMRuleBook:string;" ,& buf ,BUFLEN ))
cond	89:7	89:66	5	filter (p_access ,* data ,"a=ASMRuleBook:string;" ,& buf ,BUFLEN )
call	89:7	89:66	6	filter
arg	89:14	89:22	7	p_access
water	89:14	0:0	8	p_access
arg	89:24	89:29	7	*data
op	89:24	0:0	8	*
water	89:25	0:0	8	data
arg	89:30	89:53	7	"a=ASMRuleBook:string;"
water	89:30	0:0	8	"a=ASMRuleBook:string;"
arg	89:54	89:58	7	&buf
op	89:54	0:0	8	&
water	89:55	0:0	8	buf
arg	89:60	89:66	7	BUFLEN
water	89:60	0:0	8	BUFLEN
stmts	89:69	93:4	5	
water	89:69	0:0	6	{
water	90:6	0:0	6	desc
op	90:10	0:0	6	->
water	90:12	0:0	6	asm_rule_book
op	90:25	0:0	6	=
call	90:26	90:36	6	strdup
arg	90:33	90:36	7	buf
water	90:33	0:0	8	buf
water	90:37	0:0	6	;
water	91:6	0:0	6	handled
op	91:13	0:0	6	=
water	91:14	0:0	6	1
water	91:15	0:0	6	;
op	92:6	0:0	6	*
water	92:7	0:0	6	data
op	92:11	0:0	6	=
call	92:12	92:20	6	nl
arg	92:15	92:20	7	*data
op	92:15	0:0	8	*
water	92:16	0:0	8	data
water	92:21	0:0	6	;
water	93:4	0:0	6	}
if	94:4	103:4	4	(! handled)
cond	94:7	94:8	5	! handled
op	94:7	0:0	6	!
water	94:8	0:0	6	handled
stmts	94:17	103:4	5	
water	94:17	0:0	6	{
decl	96:6	96:34	6	int	len
op	96:14	0:0	6	=
call	96:16	96:33	7	line_length
arg	96:28	96:33	8	*data
op	96:28	0:0	9	*
water	96:29	0:0	9	data
water	97:6	0:0	6	;
water	97:10	0:0	6	len
op	97:14	0:0	6	=
water	97:16	0:0	6	len
op	97:20	0:0	6	<
water	97:22	0:0	6	BUFLEN
water	97:29	0:0	6	?
water	97:31	0:0	6	len
water	97:35	0:0	6	:
water	97:37	0:0	6	BUFLEN
op	97:43	0:0	6	-
water	97:44	0:0	6	1
water	97:45	0:0	6	;
water	98:6	0:0	6	buf
op	98:9	0:0	6	[
water	98:10	0:0	6	len
op	98:13	0:0	6	]
op	98:15	0:0	6	=
water	98:17	0:0	6	'\0'
water	98:21	0:0	6	;
call	99:6	99:30	6	strncpy
arg	99:15	99:18	7	buf
water	99:15	0:0	8	buf
arg	99:20	99:25	7	*data
op	99:20	0:0	8	*
water	99:21	0:0	8	data
arg	99:27	99:30	7	len
water	99:27	0:0	8	len
water	99:31	0:0	6	;
call	100:6	100:67	6	msg_Warn
arg	100:15	100:23	7	p_access
water	100:15	0:0	8	p_access
arg	100:25	100:62	7	"libreal: sdpplin: not handled: '%s'"
water	100:25	0:0	8	"libreal: sdpplin: not handled: '%s'"
arg	100:64	100:67	7	buf
water	100:64	0:0	8	buf
water	100:68	0:0	6	;
op	102:6	0:0	6	*
water	102:7	0:0	6	data
op	102:11	0:0	6	=
call	102:12	102:20	6	nl
arg	102:15	102:20	7	*data
op	102:15	0:0	8	*
water	102:16	0:0	8	data
water	102:21	0:0	6	;
water	103:4	0:0	6	}
water	104:2	0:0	4	}
call	105:2	105:12	2	free
arg	105:8	105:12	3	buf
water	105:8	0:0	4	buf
water	105:13	0:0	2	;
call	106:2	106:15	2	free
arg	106:8	106:15	3	decoded
water	106:8	0:0	4	decoded
water	106:17	0:0	2	;
return	107:2	107:13	2	desc
water	107:9	0:0	3	desc
label	108:0	108:5	2	error :
call	109:2	109:16	2	free
arg	109:8	109:16	3	decoded
water	109:8	0:0	4	decoded
water	109:17	0:0	2	;
call	110:2	110:13	2	free
arg	110:8	110:13	3	desc
water	110:8	0:0	4	desc
water	110:14	0:0	2	;
call	111:2	111:12	2	free
arg	111:8	111:12	3	buf
water	111:8	0:0	4	buf
water	111:13	0:0	2	;
return	112:2	112:13	2	NULL
water	112:9	0:0	3	NULL
