func	2:0	50:0	0	static int	Create
params	2:17	0:0	1	
param	2:19	2:40	2	vlc_object_t *	p_this
stmnts	0:0	49:22	1	
decl	4:4	4:43	2	filter_t	*p_filter
op	4:23	0:0	2	=
water	4:25	0:0	2	(
water	4:26	0:0	2	filter_t
op	4:35	0:0	2	*
water	4:36	0:0	2	)
water	4:37	0:0	2	p_this
decl	5:4	5:23	2	filter_sys_t	*p_sys
if	6:4	10:4	2	(p_filter -> fmt_in . video . i_chroma != p_filter -> fmt_out . video . i_chroma)
cond	6:8	6:67	3	p_filter -> fmt_in . video . i_chroma != p_filter -> fmt_out . video . i_chroma
water	6:8	0:0	4	p_filter
op	6:16	0:0	4	->
water	6:18	0:0	4	fmt_in
op	6:24	0:0	4	.
water	6:25	0:0	4	video
op	6:30	0:0	4	.
water	6:31	0:0	4	i_chroma
op	6:40	0:0	4	!=
water	6:43	0:0	4	p_filter
op	6:51	0:0	4	->
water	6:53	0:0	4	fmt_out
op	6:60	0:0	4	.
water	6:61	0:0	4	video
op	6:66	0:0	4	.
water	6:67	0:0	4	i_chroma
stmts	7:4	10:4	3	
water	7:4	0:0	4	{
call	8:8	8:66	4	msg_Err
arg	8:17	8:25	5	p_filter
water	8:17	0:0	6	p_filter
arg	8:27	8:66	5	"Input and output chromas don't match"
water	8:27	0:0	6	"Input and output chromas don't match"
water	8:67	0:0	4	;
return	9:8	9:27	4	VLC_EGENERIC
water	9:15	0:0	5	VLC_EGENERIC
water	10:4	0:0	4	}
switch	11:4	23:4	2	(p_filter -> fmt_in . video . i_chroma)
cond	11:12	11:35	3	p_filter -> fmt_in . video . i_chroma
water	11:12	0:0	4	p_filter
op	11:20	0:0	4	->
water	11:22	0:0	4	fmt_in
op	11:28	0:0	4	.
water	11:29	0:0	4	video
op	11:34	0:0	4	.
water	11:35	0:0	4	i_chroma
stmts	12:4	23:4	3	
water	12:4	0:0	4	{
water	13:8	0:0	4	CASE_PLANAR_YUV
water	14:12	0:0	4	p_filter
op	14:20	0:0	4	->
water	14:22	0:0	4	pf_video_filter
op	14:38	0:0	4	=
water	14:40	0:0	4	Filter
water	14:46	0:0	4	;
break	15:12	15:17	4	
water	16:8	0:0	4	CASE_PACKED_YUV_422
water	17:12	0:0	4	p_filter
op	17:20	0:0	4	->
water	17:22	0:0	4	pf_video_filter
op	17:38	0:0	4	=
water	17:40	0:0	4	FilterPacked
water	17:52	0:0	4	;
break	18:12	18:17	4	
label	19:8	19:15	4	default :
call	20:12	21:63	4	msg_Err
arg	20:21	20:29	5	p_filter
water	20:21	0:0	6	p_filter
arg	20:31	20:65	5	"Unsupported input chroma (%4.4s)"
water	20:31	0:0	6	"Unsupported input chroma (%4.4s)"
arg	21:21	21:63	5	(char*)&(p_filter->fmt_in.video.i_chroma)
water	21:21	0:0	6	(
water	21:22	0:0	6	char
op	21:26	0:0	6	*
water	21:27	0:0	6	)
op	21:28	0:0	6	&
water	21:29	0:0	6	(
water	21:30	0:0	6	p_filter
op	21:38	0:0	6	->
water	21:40	0:0	6	fmt_in
op	21:46	0:0	6	.
water	21:47	0:0	6	video
op	21:52	0:0	6	.
water	21:53	0:0	6	i_chroma
water	21:61	0:0	6	)
water	21:64	0:0	4	;
return	22:12	22:31	4	VLC_EGENERIC
water	22:19	0:0	5	VLC_EGENERIC
water	23:4	0:0	4	}
water	25:4	0:0	2	p_filter
op	25:12	0:0	2	->
water	25:14	0:0	2	p_sys
op	25:20	0:0	2	=
call	25:22	25:53	2	malloc
arg	25:30	25:53	3	sizeof(filter_sys_t)
op	25:30	0:0	4	sizeof
water	25:36	0:0	4	(
water	25:38	0:0	4	filter_sys_t
water	25:51	0:0	4	)
water	25:54	0:0	2	;
if	26:4	27:25	2	(p_filter -> p_sys == NULL)
cond	26:8	26:27	3	p_filter -> p_sys == NULL
water	26:8	0:0	4	p_filter
op	26:16	0:0	4	->
water	26:18	0:0	4	p_sys
op	26:24	0:0	4	==
water	26:27	0:0	4	NULL
stmts	27:8	27:25	3	
return	27:8	27:25	4	VLC_ENOMEM
water	27:15	0:0	5	VLC_ENOMEM
water	28:4	0:0	2	p_sys
op	28:10	0:0	2	=
water	28:12	0:0	2	p_filter
op	28:20	0:0	2	->
water	28:22	0:0	2	p_sys
water	28:27	0:0	2	;
call	29:4	30:39	2	config_ChainParse
arg	29:23	29:31	3	p_filter
water	29:23	0:0	4	p_filter
arg	29:33	29:46	3	FILTER_PREFIX
water	29:33	0:0	4	FILTER_PREFIX
arg	29:48	29:67	3	ppsz_filter_options
water	29:48	0:0	4	ppsz_filter_options
arg	30:23	30:39	3	p_filter->p_cfg
water	30:23	0:0	4	p_filter
op	30:31	0:0	4	->
water	30:33	0:0	4	p_cfg
water	30:40	0:0	2	;
if	31:4	39:4	2	(var_InheritBool (p_filter ,FILTER_PREFIX "use-motion" ))
cond	31:8	31:62	3	var_InheritBool (p_filter ,FILTER_PREFIX "use-motion" )
call	31:8	31:62	4	var_InheritBool
arg	31:25	31:33	5	p_filter
water	31:25	0:0	6	p_filter
arg	31:35	31:62	5	FILTER_PREFIX"use-motion"
water	31:35	0:0	6	FILTER_PREFIX
water	31:49	0:0	6	"use-motion"
stmts	32:4	39:4	3	
water	32:4	0:0	4	{
water	33:8	0:0	4	p_sys
op	33:13	0:0	4	->
water	33:15	0:0	4	p_motion
op	33:24	0:0	4	=
call	33:26	33:64	4	motion_create
arg	33:41	33:64	5	VLC_OBJECT(p_filter)
call	33:41	33:62	6	VLC_OBJECT
arg	33:53	33:62	7	p_filter
water	33:53	0:0	8	p_filter
water	33:65	0:0	4	;
if	34:8	38:8	4	(p_sys -> p_motion == NULL)
cond	34:12	34:31	5	p_sys -> p_motion == NULL
water	34:12	0:0	6	p_sys
op	34:17	0:0	6	->
water	34:19	0:0	6	p_motion
op	34:28	0:0	6	==
water	34:31	0:0	6	NULL
stmts	35:8	38:8	5	
water	35:8	0:0	6	{
call	36:12	36:24	6	free
arg	36:18	36:24	7	p_sys
water	36:18	0:0	8	p_sys
water	36:25	0:0	6	;
return	37:12	37:31	6	VLC_EGENERIC
water	37:19	0:0	7	VLC_EGENERIC
water	38:8	0:0	6	}
water	39:4	0:0	4	}
else	40:4	48:4	2
stmts	41:4	48:4	3	
water	41:4	0:0	4	{
decl	42:8	43:74	4	float	f_angle
op	42:22	0:0	4	=
call	42:24	43:73	5	var_CreateGetFloatCommand
arg	42:51	42:59	6	p_filter
water	42:51	0:0	7	p_filter
arg	43:51	43:73	6	FILTER_PREFIX"angle"
water	43:51	0:0	7	FILTER_PREFIX
water	43:65	0:0	7	"angle"
call	44:8	44:36	4	store_trigo
arg	44:21	44:26	5	p_sys
water	44:21	0:0	6	p_sys
arg	44:28	44:36	5	f_angle
water	44:28	0:0	6	f_angle
water	44:37	0:0	4	;
call	45:8	46:47	4	var_AddCallback
arg	45:25	45:33	5	p_filter
water	45:25	0:0	6	p_filter
arg	45:35	45:56	5	FILTER_PREFIX"angle"
water	45:35	0:0	6	FILTER_PREFIX
water	45:49	0:0	6	"angle"
arg	46:25	46:39	5	RotateCallback
water	46:25	0:0	6	RotateCallback
arg	46:41	46:47	5	p_sys
water	46:41	0:0	6	p_sys
water	46:48	0:0	4	;
water	47:8	0:0	4	p_sys
op	47:13	0:0	4	->
water	47:15	0:0	4	p_motion
op	47:24	0:0	4	=
water	47:26	0:0	4	NULL
water	47:30	0:0	4	;
water	48:4	0:0	4	}
return	49:4	49:22	2	VLC_SUCCESS
water	49:11	0:0	3	VLC_SUCCESS
