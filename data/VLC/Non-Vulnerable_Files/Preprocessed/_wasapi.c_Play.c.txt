func	2:0	59:0	0	static HRESULT	Play
params	2:19	0:0	1	
param	2:20	2:36	2	aout_stream_t *	s
param	2:38	2:52	2	block_t *	block
stmnts	0:0	58:13	1	
decl	4:4	4:35	2	aout_stream_sys_t	*sys
op	4:27	0:0	2	=
water	4:29	0:0	2	s
op	4:30	0:0	2	->
water	4:32	0:0	2	sys
decl	5:4	5:12	2	void	*pv
decl	6:4	6:14	2	HRESULT	hr
if	7:4	9:79	2	(sys -> chans_to_reorder)
cond	7:8	7:13	3	sys -> chans_to_reorder
water	7:8	0:0	4	sys
op	7:11	0:0	4	->
water	7:13	0:0	4	chans_to_reorder
stmts	8:8	9:79	3	
call	8:8	9:78	4	aout_ChannelReorder
arg	8:28	8:43	5	block->p_buffer
water	8:28	0:0	6	block
op	8:33	0:0	6	->
water	8:35	0:0	6	p_buffer
arg	8:45	8:60	5	block->i_buffer
water	8:45	0:0	6	block
op	8:50	0:0	6	->
water	8:52	0:0	6	i_buffer
arg	9:26	9:47	5	sys->chans_to_reorder
water	9:26	0:0	6	sys
op	9:29	0:0	6	->
water	9:31	0:0	6	chans_to_reorder
arg	9:49	9:65	5	sys->chans_table
water	9:49	0:0	6	sys
op	9:52	0:0	6	->
water	9:54	0:0	6	chans_table
arg	9:67	9:78	5	sys->format
water	9:67	0:0	6	sys
op	9:70	0:0	6	->
water	9:72	0:0	6	format
water	9:79	0:0	4	;
water	10:4	0:0	2	hr
op	10:7	0:0	2	=
call	10:9	10:74	2	IAudioClient_GetService
arg	10:33	10:44	3	sys->client
water	10:33	0:0	4	sys
op	10:36	0:0	4	->
water	10:38	0:0	4	client
arg	10:46	10:69	3	&IID_IAudioRenderClient
op	10:46	0:0	4	&
water	10:47	0:0	4	IID_IAudioRenderClient
arg	10:71	10:74	3	&pv
op	10:71	0:0	4	&
water	10:72	0:0	4	pv
water	10:75	0:0	2	;
if	11:4	15:4	2	(FAILED (hr ))
cond	11:8	11:17	3	FAILED (hr )
call	11:8	11:17	4	FAILED
arg	11:15	11:17	5	hr
water	11:15	0:0	6	hr
stmts	12:4	15:4	3	
water	12:4	0:0	4	{
call	13:8	13:63	4	msg_Err
arg	13:16	13:17	5	s
water	13:16	0:0	6	s
arg	13:19	13:59	5	"cannot get render client (error 0x%lx)"
water	13:19	0:0	6	"cannot get render client (error 0x%lx)"
arg	13:61	13:63	5	hr
water	13:61	0:0	6	hr
water	13:64	0:0	4	;
goto	14:8	14:16	4	out
water	14:13	0:0	5	out
water	15:4	0:0	4	}
decl	16:4	16:35	2	IAudioRenderClient	*render
op	16:31	0:0	2	=
water	16:33	0:0	2	pv
for	17:4	54:4	2	(;;)
forinit	17:9	17:9	3	;
water	17:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	18:4	54:4	3	
water	18:4	0:0	4	{
decl	19:8	19:21	4	UINT32	frames
water	20:8	0:0	4	hr
op	20:11	0:0	4	=
call	20:13	20:64	4	IAudioClient_GetCurrentPadding
arg	20:44	20:55	5	sys->client
water	20:44	0:0	6	sys
op	20:47	0:0	6	->
water	20:49	0:0	6	client
arg	20:57	20:64	5	&frames
op	20:57	0:0	6	&
water	20:58	0:0	6	frames
water	20:65	0:0	4	;
if	21:8	25:8	4	(FAILED (hr ))
cond	21:12	21:21	5	FAILED (hr )
call	21:12	21:21	6	FAILED
arg	21:19	21:21	7	hr
water	21:19	0:0	8	hr
stmts	22:8	25:8	5	
water	22:8	0:0	6	{
call	23:12	23:69	6	msg_Err
arg	23:20	23:21	7	s
water	23:20	0:0	8	s
arg	23:23	23:65	7	"cannot get current padding (error 0x%lx)"
water	23:23	0:0	8	"cannot get current padding (error 0x%lx)"
arg	23:67	23:69	7	hr
water	23:67	0:0	8	hr
water	23:70	0:0	6	;
break	24:12	24:17	6	
water	25:8	0:0	6	}
call	26:8	26:36	4	assert
arg	26:15	26:36	5	frames<=sys->frames
water	26:15	0:0	6	frames
op	26:22	0:0	6	<=
water	26:25	0:0	6	sys
op	26:28	0:0	6	->
water	26:30	0:0	6	frames
water	26:37	0:0	4	;
water	27:8	0:0	4	frames
op	27:15	0:0	4	=
water	27:17	0:0	4	sys
op	27:20	0:0	4	->
water	27:22	0:0	4	frames
op	27:29	0:0	4	-
water	27:31	0:0	4	frames
water	27:37	0:0	4	;
if	28:8	29:40	4	(frames > block -> i_nb_samples)
cond	28:12	28:28	5	frames > block -> i_nb_samples
water	28:12	0:0	6	frames
op	28:19	0:0	6	>
water	28:21	0:0	6	block
op	28:26	0:0	6	->
water	28:28	0:0	6	i_nb_samples
stmts	29:12	29:40	5	
water	29:12	0:0	6	frames
op	29:19	0:0	6	=
water	29:21	0:0	6	block
op	29:26	0:0	6	->
water	29:28	0:0	6	i_nb_samples
water	29:40	0:0	6	;
decl	30:8	30:17	4	BYTE	*dst
water	31:8	0:0	4	hr
op	31:11	0:0	4	=
call	31:13	31:62	4	IAudioRenderClient_GetBuffer
arg	31:42	31:48	5	render
water	31:42	0:0	6	render
arg	31:50	31:56	5	frames
water	31:50	0:0	6	frames
arg	31:58	31:62	5	&dst
op	31:58	0:0	6	&
water	31:59	0:0	6	dst
water	31:63	0:0	4	;
if	32:8	36:8	4	(FAILED (hr ))
cond	32:12	32:21	5	FAILED (hr )
call	32:12	32:21	6	FAILED
arg	32:19	32:21	7	hr
water	32:19	0:0	8	hr
stmts	33:8	36:8	5	
water	33:8	0:0	6	{
call	34:12	34:60	6	msg_Err
arg	34:20	34:21	7	s
water	34:20	0:0	8	s
arg	34:23	34:56	7	"cannot get buffer (error 0x%lx)"
water	34:23	0:0	8	"cannot get buffer (error 0x%lx)"
arg	34:58	34:60	7	hr
water	34:58	0:0	8	hr
water	34:61	0:0	6	;
break	35:12	35:17	6	
water	36:8	0:0	6	}
decl	37:8	37:57	4	const size_t	copy
op	37:26	0:0	4	=
water	37:28	0:0	4	frames
op	37:35	0:0	4	*
water	37:37	0:0	4	sys
op	37:40	0:0	4	->
water	37:42	0:0	4	bytes_per_frame
call	38:8	38:41	4	memcpy
arg	38:15	38:18	5	dst
water	38:15	0:0	6	dst
arg	38:20	38:35	5	block->p_buffer
water	38:20	0:0	6	block
op	38:25	0:0	6	->
water	38:27	0:0	6	p_buffer
arg	38:37	38:41	5	copy
water	38:37	0:0	6	copy
water	38:42	0:0	4	;
water	39:8	0:0	4	hr
op	39:11	0:0	4	=
call	39:13	39:63	4	IAudioRenderClient_ReleaseBuffer
arg	39:46	39:52	5	render
water	39:46	0:0	6	render
arg	39:54	39:60	5	frames
water	39:54	0:0	6	frames
arg	39:62	39:63	5	0
water	39:62	0:0	6	0
water	39:64	0:0	4	;
if	40:8	44:8	4	(FAILED (hr ))
cond	40:12	40:21	5	FAILED (hr )
call	40:12	40:21	6	FAILED
arg	40:19	40:21	7	hr
water	40:19	0:0	8	hr
stmts	41:8	44:8	5	
water	41:8	0:0	6	{
call	42:12	42:64	6	msg_Err
arg	42:20	42:21	7	s
water	42:20	0:0	8	s
arg	42:23	42:60	7	"cannot release buffer (error 0x%lx)"
water	42:23	0:0	8	"cannot release buffer (error 0x%lx)"
arg	42:62	42:64	7	hr
water	42:62	0:0	8	hr
water	42:65	0:0	6	;
break	43:12	43:17	6	
water	44:8	0:0	6	}
call	45:8	45:38	4	IAudioClient_Start
arg	45:27	45:38	5	sys->client
water	45:27	0:0	6	sys
op	45:30	0:0	6	->
water	45:32	0:0	6	client
water	45:39	0:0	4	;
water	46:8	0:0	4	block
op	46:13	0:0	4	->
water	46:15	0:0	4	p_buffer
op	46:24	0:0	4	+=
water	46:27	0:0	4	copy
water	46:31	0:0	4	;
water	47:8	0:0	4	block
op	47:13	0:0	4	->
water	47:15	0:0	4	i_buffer
op	47:24	0:0	4	-=
water	47:27	0:0	4	copy
water	47:31	0:0	4	;
water	48:8	0:0	4	block
op	48:13	0:0	4	->
water	48:15	0:0	4	i_nb_samples
op	48:28	0:0	4	-=
water	48:31	0:0	4	frames
water	48:37	0:0	4	;
water	49:8	0:0	4	sys
op	49:11	0:0	4	->
water	49:13	0:0	4	written
op	49:21	0:0	4	+=
water	49:24	0:0	4	frames
water	49:30	0:0	4	;
if	50:8	51:17	4	(block -> i_nb_samples == 0)
cond	50:12	50:35	5	block -> i_nb_samples == 0
water	50:12	0:0	6	block
op	50:17	0:0	6	->
water	50:19	0:0	6	i_nb_samples
op	50:32	0:0	6	==
water	50:35	0:0	6	0
stmts	51:12	51:17	5	
break	51:12	51:17	6	
call	53:8	53:57	4	msleep
arg	53:15	53:57	5	sys->frames*(CLOCK_FREQ/2)/sys->rate
water	53:15	0:0	6	sys
op	53:18	0:0	6	->
water	53:20	0:0	6	frames
op	53:27	0:0	6	*
water	53:29	0:0	6	(
water	53:30	0:0	6	CLOCK_FREQ
op	53:41	0:0	6	/
water	53:43	0:0	6	2
water	53:44	0:0	6	)
op	53:46	0:0	6	/
water	53:48	0:0	6	sys
op	53:51	0:0	6	->
water	53:53	0:0	6	rate
water	53:58	0:0	4	;
water	54:4	0:0	4	}
call	55:4	55:37	2	IAudioRenderClient_Release
arg	55:31	55:37	3	render
water	55:31	0:0	4	render
water	55:38	0:0	2	;
label	56:0	56:3	2	out :
call	57:4	57:23	2	block_Release
arg	57:18	57:23	3	block
water	57:18	0:0	4	block
water	57:24	0:0	2	;
return	58:4	58:13	2	hr
water	58:11	0:0	3	hr
