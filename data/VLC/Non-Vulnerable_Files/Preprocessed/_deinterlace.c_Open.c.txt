func	2:0	150:0	0	int	Open
params	2:8	0:0	1	
param	2:10	2:31	2	vlc_object_t *	p_this
stmnts	0:0	149:22	1	
decl	4:4	4:42	2	filter_t	*p_filter
op	4:23	0:0	2	=
water	4:25	0:0	2	(
water	4:26	0:0	2	filter_t
op	4:34	0:0	2	*
water	4:35	0:0	2	)
water	4:36	0:0	2	p_this
decl	5:4	5:23	2	filter_sys_t	*p_sys
decl	6:4	6:63	2	const vlc_fourcc_t	fourcc
op	6:30	0:0	2	=
water	6:32	0:0	2	p_filter
op	6:40	0:0	2	->
water	6:42	0:0	2	fmt_in
op	6:48	0:0	2	.
water	6:49	0:0	2	video
op	6:54	0:0	2	.
water	6:55	0:0	2	i_chroma
decl	7:4	7:86	2	const vlc_chroma_description_t	*chroma
op	7:43	0:0	2	=
call	7:45	7:85	3	vlc_fourcc_GetChromaDescription
arg	7:78	7:85	4	fourcc
water	7:78	0:0	5	fourcc
if	8:4	13:4	2	(chroma == NULL || chroma -> pixel_size > 2)
cond	8:8	8:47	3	chroma == NULL || chroma -> pixel_size > 2
water	8:8	0:0	4	chroma
op	8:15	0:0	4	==
water	8:18	0:0	4	NULL
op	8:23	0:0	4	||
water	8:26	0:0	4	chroma
op	8:32	0:0	4	->
water	8:34	0:0	4	pixel_size
op	8:45	0:0	4	>
water	8:47	0:0	4	2
stmts	9:4	13:4	3	
water	9:4	0:0	4	{
label	10:0	10:7	4	notsupp :
call	11:8	11:70	4	msg_Err
arg	11:17	11:25	5	p_filter
water	11:17	0:0	6	p_filter
arg	11:27	11:53	5	"unsupported chroma %4.4s"
water	11:27	0:0	6	"unsupported chroma %4.4s"
arg	11:55	11:70	5	(char*)&fourcc
water	11:55	0:0	6	(
water	11:56	0:0	6	char
op	11:60	0:0	6	*
water	11:61	0:0	6	)
op	11:62	0:0	6	&
water	11:63	0:0	6	fourcc
water	11:71	0:0	4	;
return	12:8	12:27	4	VLC_EGENERIC
water	12:15	0:0	5	VLC_EGENERIC
water	13:4	0:0	4	}
water	14:4	0:0	2	unsigned
water	14:13	0:0	2	pixel_size
op	14:24	0:0	2	=
water	14:26	0:0	2	chroma
op	14:32	0:0	2	->
water	14:34	0:0	2	pixel_size
water	14:44	0:0	2	;
decl	15:4	15:23	2	bool	packed
op	15:16	0:0	2	=
water	15:18	0:0	2	false
if	16:4	32:4	2	(chroma -> plane_count != 3)
cond	16:8	16:31	3	chroma -> plane_count != 3
water	16:8	0:0	4	chroma
op	16:14	0:0	4	->
water	16:16	0:0	4	plane_count
op	16:28	0:0	4	!=
water	16:31	0:0	4	3
stmts	17:4	32:4	3	
water	17:4	0:0	4	{
water	18:8	0:0	4	packed
op	18:15	0:0	4	=
water	18:17	0:0	4	true
water	18:21	0:0	4	;
switch	19:8	31:8	4	(fourcc)
cond	19:16	19:16	5	fourcc
water	19:16	0:0	6	fourcc
stmts	20:8	31:8	5	
water	20:8	0:0	6	{
label	21:12	21:31	6	case VLC_CODEC_YUYV :
label	22:12	22:31	6	case VLC_CODEC_UYVY :
label	23:12	23:31	6	case VLC_CODEC_YVYU :
label	24:12	24:31	6	case VLC_CODEC_VYUY :
label	25:12	25:31	6	case VLC_CODEC_NV12 :
label	26:12	26:31	6	case VLC_CODEC_NV21 :
water	27:16	0:0	6	pixel_size
op	27:27	0:0	6	=
water	27:29	0:0	6	1
water	27:30	0:0	6	;
break	28:16	28:21	6	
label	29:12	29:19	6	default :
goto	30:16	30:28	6	notsupp
water	30:21	0:0	7	notsupp
water	31:8	0:0	6	}
water	32:4	0:0	4	}
call	33:4	33:39	2	assert
arg	33:12	33:39	3	vlc_fourcc_IsYUV(fourcc)
call	33:12	33:37	4	vlc_fourcc_IsYUV
arg	33:30	33:37	5	fourcc
water	33:30	0:0	6	fourcc
water	33:40	0:0	2	;
water	35:4	0:0	2	p_sys
op	35:10	0:0	2	=
water	35:12	0:0	2	p_filter
op	35:20	0:0	2	->
water	35:22	0:0	2	p_sys
op	35:28	0:0	2	=
call	35:30	35:55	2	malloc
arg	35:38	35:55	3	sizeof(*p_sys)
op	35:38	0:0	4	sizeof
water	35:44	0:0	4	(
op	35:46	0:0	4	*
water	35:47	0:0	4	p_sys
water	35:53	0:0	4	)
water	35:56	0:0	2	;
if	36:4	37:25	2	(! p_sys)
cond	36:8	36:9	3	! p_sys
op	36:8	0:0	4	!
water	36:9	0:0	4	p_sys
stmts	37:8	37:25	3	
return	37:8	37:25	4	VLC_ENOMEM
water	37:15	0:0	5	VLC_ENOMEM
water	38:4	0:0	2	p_sys
op	38:9	0:0	2	->
water	38:11	0:0	2	chroma
op	38:18	0:0	2	=
water	38:20	0:0	2	chroma
water	38:26	0:0	2	;
call	39:4	40:39	2	config_ChainParse
arg	39:23	39:31	3	p_filter
water	39:23	0:0	4	p_filter
arg	39:33	39:50	3	FILTER_CFG_PREFIX
water	39:33	0:0	4	FILTER_CFG_PREFIX
arg	39:52	39:71	3	ppsz_filter_options
water	39:52	0:0	4	ppsz_filter_options
arg	40:23	40:39	3	p_filter->p_cfg
water	40:23	0:0	4	p_filter
op	40:31	0:0	4	->
water	40:33	0:0	4	p_cfg
water	40:40	0:0	2	;
decl	41:4	41:76	2	char	*psz_mode
op	41:19	0:0	2	=
call	41:21	41:75	3	var_InheritString
arg	41:40	41:48	4	p_filter
water	41:40	0:0	5	p_filter
arg	41:50	41:75	4	FILTER_CFG_PREFIX"mode"
water	41:50	0:0	5	FILTER_CFG_PREFIX
water	41:68	0:0	5	"mode"
call	42:4	42:48	2	SetFilterMethod
arg	42:21	42:29	3	p_filter
water	42:21	0:0	4	p_filter
arg	42:31	42:39	3	psz_mode
water	42:31	0:0	4	psz_mode
arg	42:41	42:48	3	packed
water	42:41	0:0	4	packed
water	42:49	0:0	2	;
call	43:4	43:19	2	free
arg	43:10	43:19	3	psz_mode
water	43:10	0:0	4	psz_mode
water	43:20	0:0	2	;
for	44:4	49:4	2	( int i = 0 ;i < METADATA_SIZE;i ++)
forinit	0:0	44:18	3	 int i = 0 ;
decl	44:9	44:18	4	int	i
op	44:15	0:0	4	=
water	44:17	0:0	4	0
cond	44:20	44:24	3	i < METADATA_SIZE
water	44:20	0:0	4	i
op	44:22	0:0	4	<
water	44:24	0:0	4	METADATA_SIZE
forexpr	44:39	44:40	3	i ++
water	44:39	0:0	4	i
op	44:40	0:0	4	++
stmts	45:4	49:4	3	
water	45:4	0:0	4	{
water	46:8	0:0	4	p_sys
op	46:13	0:0	4	->
water	46:15	0:0	4	meta
op	46:19	0:0	4	.
water	46:20	0:0	4	pi_date
op	46:27	0:0	4	[
water	46:28	0:0	4	i
op	46:29	0:0	4	]
op	46:31	0:0	4	=
water	46:33	0:0	4	VLC_TS_INVALID
water	46:47	0:0	4	;
water	47:8	0:0	4	p_sys
op	47:13	0:0	4	->
water	47:15	0:0	4	meta
op	47:19	0:0	4	.
water	47:20	0:0	4	pi_nb_fields
op	47:32	0:0	4	[
water	47:33	0:0	4	i
op	47:34	0:0	4	]
op	47:36	0:0	4	=
water	47:38	0:0	4	2
water	47:39	0:0	4	;
water	48:8	0:0	4	p_sys
op	48:13	0:0	4	->
water	48:15	0:0	4	meta
op	48:19	0:0	4	.
water	48:20	0:0	4	pb_top_field_first
op	48:38	0:0	4	[
water	48:39	0:0	4	i
op	48:40	0:0	4	]
op	48:42	0:0	4	=
water	48:44	0:0	4	true
water	48:48	0:0	4	;
water	49:4	0:0	4	}
water	50:4	0:0	2	p_sys
op	50:9	0:0	2	->
water	50:11	0:0	2	i_frame_offset
op	50:26	0:0	2	=
water	50:28	0:0	2	0
water	50:29	0:0	2	;
for	52:4	53:35	2	( int i = 0 ;i < HISTORY_SIZE;i ++)
forinit	0:0	52:18	3	 int i = 0 ;
decl	52:9	52:18	4	int	i
op	52:15	0:0	4	=
water	52:17	0:0	4	0
cond	52:20	52:24	3	i < HISTORY_SIZE
water	52:20	0:0	4	i
op	52:22	0:0	4	<
water	52:24	0:0	4	HISTORY_SIZE
forexpr	52:38	52:39	3	i ++
water	52:38	0:0	4	i
op	52:39	0:0	4	++
stmts	53:8	53:35	3	
water	53:8	0:0	4	p_sys
op	53:13	0:0	4	->
water	53:15	0:0	4	pp_history
op	53:25	0:0	4	[
water	53:26	0:0	4	i
op	53:27	0:0	4	]
op	53:29	0:0	4	=
water	53:31	0:0	4	NULL
water	53:35	0:0	4	;
call	54:4	54:29	2	IVTCClearState
arg	54:20	54:29	3	p_filter
water	54:20	0:0	4	p_filter
water	54:30	0:0	2	;
if	56:4	57:38	2	(pixel_size == 1 &&vlc_CPU_ALTIVEC ( ))
cond	56:8	56:43	3	pixel_size == 1 &&vlc_CPU_ALTIVEC ( )
water	56:8	0:0	4	pixel_size
op	56:19	0:0	4	==
water	56:22	0:0	4	1
op	56:24	0:0	4	&&
call	56:27	56:43	4	vlc_CPU_ALTIVEC
stmts	57:8	57:38	3	
water	57:8	0:0	4	p_sys
op	57:13	0:0	4	->
water	57:15	0:0	4	pf_merge
op	57:24	0:0	4	=
water	57:26	0:0	4	MergeAltivec
water	57:38	0:0	4	;
else	58:4	65:4	2
stmts	61:4	65:4	3	
if	61:4	65:4	4	(vlc_CPU_SSE2 ( ))
cond	61:8	61:21	5	vlc_CPU_SSE2 ( )
call	61:8	61:21	6	vlc_CPU_SSE2
stmts	62:4	65:4	5	
water	62:4	0:0	6	{
water	63:8	0:0	6	p_sys
op	63:13	0:0	6	->
water	63:15	0:0	6	pf_merge
op	63:24	0:0	6	=
water	63:26	0:0	6	pixel_size
op	63:37	0:0	6	==
water	63:40	0:0	6	1
water	63:42	0:0	6	?
water	63:44	0:0	6	Merge8BitSSE2
water	63:58	0:0	6	:
water	63:60	0:0	6	Merge16BitSSE2
water	63:74	0:0	6	;
water	64:8	0:0	6	p_sys
op	64:13	0:0	6	->
water	64:15	0:0	6	pf_end_merge
op	64:28	0:0	6	=
water	64:30	0:0	6	EndMMX
water	64:36	0:0	6	;
water	65:4	0:0	6	}
else	66:4	73:4	2
stmts	69:4	73:4	3	
if	69:4	73:4	4	(pixel_size == 1 &&vlc_CPU_MMXEXT ( ))
cond	69:8	69:42	5	pixel_size == 1 &&vlc_CPU_MMXEXT ( )
water	69:8	0:0	6	pixel_size
op	69:19	0:0	6	==
water	69:22	0:0	6	1
op	69:24	0:0	6	&&
call	69:27	69:42	6	vlc_CPU_MMXEXT
stmts	70:4	73:4	5	
water	70:4	0:0	6	{
water	71:8	0:0	6	p_sys
op	71:13	0:0	6	->
water	71:15	0:0	6	pf_merge
op	71:24	0:0	6	=
water	71:26	0:0	6	MergeMMXEXT
water	71:37	0:0	6	;
water	72:8	0:0	6	p_sys
op	72:13	0:0	6	->
water	72:15	0:0	6	pf_end_merge
op	72:28	0:0	6	=
water	72:30	0:0	6	EndMMX
water	72:36	0:0	6	;
water	73:4	0:0	6	}
else	74:4	81:4	2
stmts	77:4	81:4	3	
if	77:4	81:4	4	(pixel_size == 1 &&vlc_CPU_3dNOW ( ))
cond	77:8	77:41	5	pixel_size == 1 &&vlc_CPU_3dNOW ( )
water	77:8	0:0	6	pixel_size
op	77:19	0:0	6	==
water	77:22	0:0	6	1
op	77:24	0:0	6	&&
call	77:27	77:41	6	vlc_CPU_3dNOW
stmts	78:4	81:4	5	
water	78:4	0:0	6	{
water	79:8	0:0	6	p_sys
op	79:13	0:0	6	->
water	79:15	0:0	6	pf_merge
op	79:24	0:0	6	=
water	79:26	0:0	6	Merge3DNow
water	79:36	0:0	6	;
water	80:8	0:0	6	p_sys
op	80:13	0:0	6	->
water	80:15	0:0	6	pf_end_merge
op	80:28	0:0	6	=
water	80:30	0:0	6	End3DNow
water	80:38	0:0	6	;
water	81:4	0:0	6	}
else	82:4	86:78	2
stmts	85:4	86:78	3	
if	85:4	86:78	4	(vlc_CPU_ARM_NEON ( ))
cond	85:8	85:25	5	vlc_CPU_ARM_NEON ( )
call	85:8	85:25	6	vlc_CPU_ARM_NEON
stmts	86:8	86:78	5	
water	86:8	0:0	6	p_sys
op	86:13	0:0	6	->
water	86:15	0:0	6	pf_merge
op	86:24	0:0	6	=
water	86:26	0:0	6	pixel_size
op	86:37	0:0	6	==
water	86:40	0:0	6	1
water	86:42	0:0	6	?
water	86:44	0:0	6	merge8_arm_neon
water	86:60	0:0	6	:
water	86:62	0:0	6	merge16_arm_neon
water	86:78	0:0	6	;
else	87:4	89:72	2
stmts	88:4	89:72	3	
if	88:4	89:72	4	(vlc_CPU_ARMv6 ( ))
cond	88:8	88:22	5	vlc_CPU_ARMv6 ( )
call	88:8	88:22	6	vlc_CPU_ARMv6
stmts	89:8	89:72	5	
water	89:8	0:0	6	p_sys
op	89:13	0:0	6	->
water	89:15	0:0	6	pf_merge
op	89:24	0:0	6	=
water	89:26	0:0	6	pixel_size
op	89:37	0:0	6	==
water	89:40	0:0	6	1
water	89:42	0:0	6	?
water	89:44	0:0	6	merge8_armv6
water	89:57	0:0	6	:
water	89:59	0:0	6	merge16_armv6
water	89:72	0:0	6	;
else	90:4	97:4	2
stmts	92:4	97:4	3	
water	92:4	0:0	4	{
water	93:8	0:0	4	p_sys
op	93:13	0:0	4	->
water	93:15	0:0	4	pf_merge
op	93:24	0:0	4	=
water	93:26	0:0	4	pixel_size
op	93:37	0:0	4	==
water	93:40	0:0	4	1
water	93:42	0:0	4	?
water	93:44	0:0	4	Merge8BitGeneric
water	93:61	0:0	4	:
water	93:63	0:0	4	Merge16BitGeneric
water	93:80	0:0	4	;
water	95:8	0:0	4	p_sys
op	95:13	0:0	4	->
water	95:15	0:0	4	pf_end_merge
op	95:28	0:0	4	=
water	95:30	0:0	4	NULL
water	95:34	0:0	4	;
water	97:4	0:0	4	}
if	99:4	127:4	2	(p_sys -> i_mode == DEINTERLACE_PHOSPHOR)
cond	99:8	99:25	3	p_sys -> i_mode == DEINTERLACE_PHOSPHOR
water	99:8	0:0	4	p_sys
op	99:13	0:0	4	->
water	99:15	0:0	4	i_mode
op	99:22	0:0	4	==
water	99:25	0:0	4	DEINTERLACE_PHOSPHOR
stmts	100:4	127:4	3	
water	100:4	0:0	4	{
decl	101:8	102:74	4	int	i_c420
op	101:19	0:0	4	=
call	101:21	102:73	5	var_GetInteger
arg	101:37	101:45	6	p_filter
water	101:37	0:0	7	p_filter
arg	102:37	102:73	6	FILTER_CFG_PREFIX"phosphor-chroma"
water	102:37	0:0	7	FILTER_CFG_PREFIX
water	102:55	0:0	7	"phosphor-chroma"
if	103:8	110:8	4	(i_c420 != PC_LATEST && i_c420 != PC_ALTLINE && i_c420 != PC_BLEND && i_c420 != PC_UPCONVERT)
cond	103:12	104:46	5	i_c420 != PC_LATEST && i_c420 != PC_ALTLINE && i_c420 != PC_BLEND && i_c420 != PC_UPCONVERT
water	103:12	0:0	6	i_c420
op	103:19	0:0	6	!=
water	103:22	0:0	6	PC_LATEST
op	103:33	0:0	6	&&
water	103:37	0:0	6	i_c420
op	103:44	0:0	6	!=
water	103:47	0:0	6	PC_ALTLINE
op	103:59	0:0	6	&&
water	104:12	0:0	6	i_c420
op	104:19	0:0	6	!=
water	104:22	0:0	6	PC_BLEND
op	104:33	0:0	6	&&
water	104:36	0:0	6	i_c420
op	104:43	0:0	6	!=
water	104:46	0:0	6	PC_UPCONVERT
stmts	105:8	110:8	5	
water	105:8	0:0	6	{
call	106:12	108:47	6	msg_Dbg
arg	106:21	106:29	7	p_filter
water	106:21	0:0	8	p_filter
arg	106:31	108:47	7	"Phosphor 4:2:0 input chroma mode not set""or out of range (valid: 1, 2, 3 or 4), ""using default"
water	106:31	0:0	8	"Phosphor 4:2:0 input chroma mode not set"
water	107:31	0:0	8	"or out of range (valid: 1, 2, 3 or 4), "
water	108:31	0:0	8	"using default"
water	108:48	0:0	6	;
water	109:12	0:0	6	i_c420
op	109:19	0:0	6	=
water	109:21	0:0	6	PC_ALTLINE
water	109:31	0:0	6	;
water	110:8	0:0	6	}
call	111:8	112:34	4	msg_Dbg
arg	111:17	111:25	5	p_filter
water	111:17	0:0	6	p_filter
arg	111:27	111:70	5	"using Phosphor 4:2:0 input chroma mode %d"
water	111:27	0:0	6	"using Phosphor 4:2:0 input chroma mode %d"
arg	112:27	112:34	5	i_c420
water	112:27	0:0	6	i_c420
water	112:35	0:0	4	;
water	114:8	0:0	4	p_sys
op	114:13	0:0	4	->
water	114:15	0:0	4	phosphor
op	114:23	0:0	4	.
water	114:24	0:0	4	i_chroma_for_420
op	114:41	0:0	4	=
water	114:43	0:0	4	i_c420
water	114:49	0:0	4	;
decl	115:8	116:76	4	int	i_dimmer
op	115:21	0:0	4	=
call	115:23	116:75	5	var_GetInteger
arg	115:39	115:47	6	p_filter
water	115:39	0:0	7	p_filter
arg	116:39	116:75	6	FILTER_CFG_PREFIX"phosphor-dimmer"
water	116:39	0:0	7	FILTER_CFG_PREFIX
water	116:57	0:0	7	"phosphor-dimmer"
if	117:8	123:8	4	(i_dimmer < 1 || i_dimmer > 4)
cond	117:12	117:41	5	i_dimmer < 1 || i_dimmer > 4
water	117:12	0:0	6	i_dimmer
op	117:21	0:0	6	<
water	117:23	0:0	6	1
op	117:26	0:0	6	||
water	117:30	0:0	6	i_dimmer
op	117:39	0:0	6	>
water	117:41	0:0	6	4
stmts	118:8	123:8	5	
water	118:8	0:0	6	{
call	119:12	121:47	6	msg_Dbg
arg	119:21	119:29	7	p_filter
water	119:21	0:0	8	p_filter
arg	119:31	121:47	7	"Phosphor dimmer strength not set ""or out of range (valid: 1, 2, 3 or 4), ""using default"
water	119:31	0:0	8	"Phosphor dimmer strength not set "
water	120:31	0:0	8	"or out of range (valid: 1, 2, 3 or 4), "
water	121:31	0:0	8	"using default"
water	121:48	0:0	6	;
water	122:12	0:0	6	i_dimmer
op	122:21	0:0	6	=
water	122:23	0:0	6	2
water	122:24	0:0	6	;
water	123:8	0:0	6	}
call	124:8	124:73	4	msg_Dbg
arg	124:17	124:25	5	p_filter
water	124:17	0:0	6	p_filter
arg	124:27	124:62	5	"using Phosphor dimmer strength %d"
water	124:27	0:0	6	"using Phosphor dimmer strength %d"
arg	124:64	124:73	5	i_dimmer
water	124:64	0:0	6	i_dimmer
water	124:74	0:0	4	;
water	126:8	0:0	4	p_sys
op	126:13	0:0	4	->
water	126:15	0:0	4	phosphor
op	126:23	0:0	4	.
water	126:24	0:0	4	i_dimmer_strength
op	126:42	0:0	4	=
water	126:44	0:0	4	i_dimmer
op	126:53	0:0	4	-
water	126:55	0:0	4	1
water	126:56	0:0	4	;
water	127:4	0:0	4	}
else	128:4	132:4	2
stmts	129:4	132:4	3	
water	129:4	0:0	4	{
water	130:8	0:0	4	p_sys
op	130:13	0:0	4	->
water	130:15	0:0	4	phosphor
op	130:23	0:0	4	.
water	130:24	0:0	4	i_chroma_for_420
op	130:41	0:0	4	=
water	130:43	0:0	4	PC_ALTLINE
water	130:53	0:0	4	;
water	131:8	0:0	4	p_sys
op	131:13	0:0	4	->
water	131:15	0:0	4	phosphor
op	131:23	0:0	4	.
water	131:24	0:0	4	i_dimmer_strength
op	131:42	0:0	4	=
water	131:44	0:0	4	1
water	131:45	0:0	4	;
water	132:4	0:0	4	}
decl	134:4	134:22	2	video_format_t	fmt
call	135:4	135:61	2	GetOutputFormat
arg	135:21	135:29	3	p_filter
water	135:21	0:0	4	p_filter
arg	135:31	135:35	3	&fmt
op	135:31	0:0	4	&
water	135:32	0:0	4	fmt
arg	135:37	135:61	3	&p_filter->fmt_in.video
op	135:37	0:0	4	&
water	135:38	0:0	4	p_filter
op	135:46	0:0	4	->
water	135:48	0:0	4	fmt_in
op	135:54	0:0	4	.
water	135:55	0:0	4	video
water	135:62	0:0	2	;
if	136:4	142:4	2	(! p_filter -> b_allow_fmt_out_change && ( fmt . i_chroma != p_filter -> fmt_in . video . i_chroma || fmt . i_height != p_filter -> fmt_in . video . i_height ))
cond	136:8	138:58	3	! p_filter -> b_allow_fmt_out_change && ( fmt . i_chroma != p_filter -> fmt_in . video . i_chroma || fmt . i_height != p_filter -> fmt_in . video . i_height )
op	136:8	0:0	4	!
water	136:9	0:0	4	p_filter
op	136:17	0:0	4	->
water	136:19	0:0	4	b_allow_fmt_out_change
op	136:42	0:0	4	&&
water	137:8	0:0	4	(
water	137:10	0:0	4	fmt
op	137:13	0:0	4	.
water	137:14	0:0	4	i_chroma
op	137:23	0:0	4	!=
water	137:26	0:0	4	p_filter
op	137:34	0:0	4	->
water	137:36	0:0	4	fmt_in
op	137:42	0:0	4	.
water	137:43	0:0	4	video
op	137:48	0:0	4	.
water	137:49	0:0	4	i_chroma
op	137:58	0:0	4	||
water	138:10	0:0	4	fmt
op	138:13	0:0	4	.
water	138:14	0:0	4	i_height
op	138:23	0:0	4	!=
water	138:26	0:0	4	p_filter
op	138:34	0:0	4	->
water	138:36	0:0	4	fmt_in
op	138:42	0:0	4	.
water	138:43	0:0	4	video
op	138:48	0:0	4	.
water	138:49	0:0	4	i_height
water	138:58	0:0	4	)
stmts	139:4	142:4	3	
water	139:4	0:0	4	{
call	140:8	140:36	4	Close
arg	140:15	140:36	5	VLC_OBJECT(p_filter)
call	140:15	140:34	6	VLC_OBJECT
arg	140:26	140:34	7	p_filter
water	140:26	0:0	8	p_filter
water	140:37	0:0	4	;
return	141:8	141:27	4	VLC_EGENERIC
water	141:15	0:0	5	VLC_EGENERIC
water	142:4	0:0	4	}
water	143:4	0:0	2	p_filter
op	143:12	0:0	2	->
water	143:14	0:0	2	fmt_out
op	143:21	0:0	2	.
water	143:22	0:0	2	video
op	143:28	0:0	2	=
water	143:30	0:0	2	fmt
water	143:33	0:0	2	;
water	144:4	0:0	2	p_filter
op	144:12	0:0	2	->
water	144:14	0:0	2	fmt_out
op	144:21	0:0	2	.
water	144:22	0:0	2	i_codec
op	144:30	0:0	2	=
water	144:32	0:0	2	fmt
op	144:35	0:0	2	.
water	144:36	0:0	2	i_chroma
water	144:44	0:0	2	;
water	145:4	0:0	2	p_filter
op	145:12	0:0	2	->
water	145:14	0:0	2	pf_video_filter
op	145:30	0:0	2	=
water	145:32	0:0	2	Deinterlace
water	145:43	0:0	2	;
water	146:4	0:0	2	p_filter
op	146:12	0:0	2	->
water	146:14	0:0	2	pf_video_flush
op	146:30	0:0	2	=
water	146:32	0:0	2	Flush
water	146:37	0:0	2	;
water	147:4	0:0	2	p_filter
op	147:12	0:0	2	->
water	147:14	0:0	2	pf_video_mouse
op	147:30	0:0	2	=
water	147:32	0:0	2	Mouse
water	147:37	0:0	2	;
call	148:4	148:39	2	msg_Dbg
arg	148:13	148:21	3	p_filter
water	148:13	0:0	4	p_filter
arg	148:23	148:39	3	"deinterlacing"
water	148:23	0:0	4	"deinterlacing"
water	148:40	0:0	2	;
return	149:4	149:22	2	VLC_SUCCESS
water	149:11	0:0	3	VLC_SUCCESS
