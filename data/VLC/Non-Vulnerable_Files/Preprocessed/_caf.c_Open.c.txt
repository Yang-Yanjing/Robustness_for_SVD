func	2:0	106:0	0	static int	Open
params	2:15	0:0	1	
param	2:17	2:38	2	vlc_object_t *	p_this
stmnts	0:0	105:18	1	
decl	4:4	4:29	2	int	i_error
op	4:16	0:0	2	=
water	4:18	0:0	2	VLC_SUCCESS
decl	5:4	5:43	2	demux_t	*p_demux
op	5:25	0:0	2	=
water	5:27	0:0	2	(
water	5:28	0:0	2	demux_t
op	5:35	0:0	2	*
water	5:36	0:0	2	)
water	5:37	0:0	2	p_this
decl	6:4	6:22	2	demux_sys_t	*p_sys
decl	7:4	7:25	2	const uint8_t	*p_peek
if	8:4	9:27	2	(stream_Peek (p_demux -> s ,& p_peek ,8 ) < 8)
cond	8:8	8:48	3	stream_Peek (p_demux -> s ,& p_peek ,8 ) < 8
call	8:8	8:44	4	stream_Peek
arg	8:21	8:31	5	p_demux->s
water	8:21	0:0	6	p_demux
op	8:28	0:0	6	->
water	8:30	0:0	6	s
arg	8:33	8:40	5	&p_peek
op	8:33	0:0	6	&
water	8:34	0:0	6	p_peek
arg	8:42	8:44	5	8
water	8:42	0:0	6	8
op	8:46	0:0	4	<
water	8:48	0:0	4	8
stmts	9:8	9:27	3	
return	9:8	9:27	4	VLC_EGENERIC
water	9:15	0:0	5	VLC_EGENERIC
if	11:4	12:27	2	(memcmp (p_peek ,"caff" ,4 ))
cond	11:8	11:34	3	memcmp (p_peek ,"caff" ,4 )
call	11:8	11:34	4	memcmp
arg	11:16	11:22	5	p_peek
water	11:16	0:0	6	p_peek
arg	11:24	11:30	5	"caff"
water	11:24	0:0	6	"caff"
arg	11:32	11:34	5	4
water	11:32	0:0	6	4
stmts	12:8	12:27	3	
return	12:8	12:27	4	VLC_EGENERIC
water	12:15	0:0	5	VLC_EGENERIC
decl	14:4	14:45	2	uint16_t	i_version
op	14:23	0:0	2	=
call	14:25	14:44	3	GetWBE
arg	14:33	14:44	4	p_peek+4
water	14:33	0:0	5	p_peek
op	14:40	0:0	5	+
water	14:42	0:0	5	4
if	15:4	19:4	2	(i_version != 1)
cond	15:8	15:21	3	i_version != 1
water	15:8	0:0	4	i_version
op	15:18	0:0	4	!=
water	15:21	0:0	4	1
stmts	16:4	19:4	3	
water	16:4	0:0	4	{
call	17:8	17:68	4	msg_Dbg
arg	17:17	17:24	5	p_demux
water	17:17	0:0	6	p_demux
arg	17:26	17:56	5	"Unknown caf file version %d."
water	17:26	0:0	6	"Unknown caf file version %d."
arg	17:58	17:68	5	i_version
water	17:58	0:0	6	i_version
water	17:69	0:0	4	;
return	18:8	18:27	4	VLC_EGENERIC
water	18:15	0:0	5	VLC_EGENERIC
water	19:4	0:0	4	}
decl	21:4	21:43	2	uint16_t	i_flags
op	21:21	0:0	2	=
call	21:23	21:42	3	GetWBE
arg	21:31	21:42	4	p_peek+6
water	21:31	0:0	5	p_peek
op	21:38	0:0	5	+
water	21:40	0:0	5	6
if	22:4	26:4	2	(i_flags != 0)
cond	22:8	22:19	3	i_flags != 0
water	22:8	0:0	4	i_flags
op	22:16	0:0	4	!=
water	22:19	0:0	4	0
stmts	23:4	26:4	3	
water	23:4	0:0	4	{
call	24:8	24:64	4	msg_Dbg
arg	24:17	24:24	5	p_demux
water	24:17	0:0	6	p_demux
arg	24:26	24:54	5	"Unknown caf file flags %d."
water	24:26	0:0	6	"Unknown caf file flags %d."
arg	24:56	24:64	5	i_flags
water	24:56	0:0	6	i_flags
water	24:65	0:0	4	;
return	25:8	25:27	4	VLC_EGENERIC
water	25:15	0:0	5	VLC_EGENERIC
water	26:4	0:0	4	}
if	27:4	28:27	2	(stream_Read (p_demux -> s ,NULL ,8 ) < 8)
cond	27:8	27:45	3	stream_Read (p_demux -> s ,NULL ,8 ) < 8
call	27:8	27:41	4	stream_Read
arg	27:21	27:31	5	p_demux->s
water	27:21	0:0	6	p_demux
op	27:28	0:0	6	->
water	27:30	0:0	6	s
arg	27:33	27:37	5	NULL
water	27:33	0:0	6	NULL
arg	27:39	27:41	5	8
water	27:39	0:0	6	8
op	27:43	0:0	4	<
water	27:45	0:0	4	8
stmts	28:8	28:27	3	
return	28:8	28:27	4	VLC_EGENERIC
water	28:15	0:0	5	VLC_EGENERIC
water	29:4	0:0	2	p_demux
op	29:11	0:0	2	->
water	29:13	0:0	2	p_sys
op	29:19	0:0	2	=
call	29:21	29:53	2	calloc
arg	29:29	29:30	3	1
water	29:29	0:0	4	1
arg	29:32	29:53	3	sizeof(demux_sys_t)
op	29:32	0:0	4	sizeof
water	29:38	0:0	4	(
water	29:40	0:0	4	demux_sys_t
water	29:52	0:0	4	)
water	29:54	0:0	2	;
if	30:4	30:43	2	(! p_demux -> p_sys)
cond	30:8	30:18	3	! p_demux -> p_sys
op	30:8	0:0	4	!
water	30:9	0:0	4	p_demux
op	30:16	0:0	4	->
water	30:18	0:0	4	p_sys
stmts	30:26	30:43	3	
return	30:26	30:43	4	VLC_ENOMEM
water	30:33	0:0	5	VLC_ENOMEM
water	32:4	0:0	2	p_sys
op	32:10	0:0	2	=
water	32:12	0:0	2	p_demux
op	32:19	0:0	2	->
water	32:21	0:0	2	p_sys
water	32:26	0:0	2	;
call	33:4	33:47	2	es_format_Init
arg	33:20	33:31	3	&p_sys->fmt
op	33:20	0:0	4	&
water	33:21	0:0	4	p_sys
op	33:26	0:0	4	->
water	33:28	0:0	4	fmt
arg	33:33	33:43	3	UNKNOWN_ES
water	33:33	0:0	4	UNKNOWN_ES
arg	33:45	33:47	3	0
water	33:45	0:0	4	0
water	33:48	0:0	2	;
decl	34:4	34:22	2	vlc_fourcc_t	i_fcc
decl	35:4	35:19	2	uint64_t	i_size
decl	36:4	36:22	2	uint64_t	i_idx
op	36:19	0:0	2	=
water	36:21	0:0	2	0
while	37:4	75:4	2	(NextChunk (p_demux ,& i_fcc ,& i_size ) == VLC_SUCCESS)
cond	37:11	37:52	3	NextChunk (p_demux ,& i_fcc ,& i_size ) == VLC_SUCCESS
call	37:11	37:47	4	NextChunk
arg	37:22	37:29	5	p_demux
water	37:22	0:0	6	p_demux
arg	37:31	37:37	5	&i_fcc
op	37:31	0:0	6	&
water	37:32	0:0	6	i_fcc
arg	37:39	37:47	5	&i_size
op	37:39	0:0	6	&
water	37:40	0:0	6	i_size
op	37:49	0:0	4	==
water	37:52	0:0	4	VLC_SUCCESS
stmts	38:4	75:4	3	
water	38:4	0:0	4	{
decl	39:8	39:29	4	bool	b_handled
op	39:23	0:0	4	=
water	39:25	0:0	4	true
switch	40:8	63:8	4	(i_fcc)
cond	40:17	40:17	5	i_fcc
water	40:17	0:0	6	i_fcc
stmts	41:8	63:8	5	
water	41:8	0:0	6	{
water	42:12	0:0	6	case
call	42:17	42:48	6	VLC_FOURCC
arg	42:29	42:32	7	'd'
water	42:29	0:0	8	'd'
arg	42:34	42:37	7	'e'
water	42:34	0:0	8	'e'
arg	42:39	42:42	7	's'
water	42:39	0:0	8	's'
arg	42:44	42:48	7	'c'
water	42:44	0:0	8	'c'
water	42:49	0:0	6	:
water	43:16	0:0	6	if
water	43:18	0:0	6	(
water	43:20	0:0	6	i_idx
op	43:26	0:0	6	!=
water	43:29	0:0	6	0
water	43:31	0:0	6	)
water	44:16	0:0	6	{
call	45:20	45:107	6	msg_Err
arg	45:29	45:36	7	p_demux
water	45:29	0:0	8	p_demux
arg	45:38	45:107	7	"The audio description chunk must be the first chunk in a caf file."
water	45:38	0:0	8	"The audio description chunk must be the first chunk in a caf file."
water	45:108	0:0	6	;
water	46:20	0:0	6	i_error
op	46:28	0:0	6	=
water	46:30	0:0	6	VLC_EGENERIC
water	46:42	0:0	6	;
water	47:20	0:0	6	goto
water	47:25	0:0	6	caf_open_end
water	47:37	0:0	6	;
water	48:16	0:0	6	}
water	49:16	0:0	6	i_error
op	49:24	0:0	6	=
call	49:26	49:49	6	ReadDescChunk
arg	49:41	49:49	7	p_demux
water	49:41	0:0	8	p_demux
water	49:50	0:0	6	;
break	50:16	50:21	6	
water	51:12	0:0	6	case
call	51:17	51:48	6	VLC_FOURCC
arg	51:29	51:32	7	'd'
water	51:29	0:0	8	'd'
arg	51:34	51:37	7	'a'
water	51:34	0:0	8	'a'
arg	51:39	51:42	7	't'
water	51:39	0:0	8	't'
arg	51:44	51:48	7	'a'
water	51:44	0:0	8	'a'
water	51:49	0:0	6	:
water	52:16	0:0	6	i_error
op	52:24	0:0	6	=
call	52:26	52:57	6	ReadDataChunk
arg	52:41	52:48	7	p_demux
water	52:41	0:0	8	p_demux
arg	52:50	52:57	7	i_size
water	52:50	0:0	8	i_size
water	52:58	0:0	6	;
break	53:16	53:21	6	
water	54:12	0:0	6	case
call	54:17	54:48	6	VLC_FOURCC
arg	54:29	54:32	7	'p'
water	54:29	0:0	8	'p'
arg	54:34	54:37	7	'a'
water	54:34	0:0	8	'a'
arg	54:39	54:42	7	'k'
water	54:39	0:0	8	'k'
arg	54:44	54:48	7	't'
water	54:44	0:0	8	't'
water	54:49	0:0	6	:
water	55:16	0:0	6	i_error
op	55:24	0:0	6	=
call	55:26	55:49	6	ReadPaktChunk
arg	55:41	55:49	7	p_demux
water	55:41	0:0	8	p_demux
water	55:50	0:0	6	;
break	56:16	56:21	6	
water	57:12	0:0	6	case
call	57:17	57:48	6	VLC_FOURCC
arg	57:29	57:32	7	'k'
water	57:29	0:0	8	'k'
arg	57:34	57:37	7	'u'
water	57:34	0:0	8	'u'
arg	57:39	57:42	7	'k'
water	57:39	0:0	8	'k'
arg	57:44	57:48	7	'i'
water	57:44	0:0	8	'i'
water	57:49	0:0	6	:
water	58:16	0:0	6	i_error
op	58:24	0:0	6	=
call	58:26	58:57	6	ReadKukiChunk
arg	58:41	58:48	7	p_demux
water	58:41	0:0	8	p_demux
arg	58:50	58:57	7	i_size
water	58:50	0:0	8	i_size
water	58:58	0:0	6	;
break	59:16	59:21	6	
label	60:12	60:19	6	default :
water	61:16	0:0	6	b_handled
op	61:26	0:0	6	=
water	61:28	0:0	6	false
water	61:33	0:0	6	;
break	62:16	62:21	6	
water	63:8	0:0	6	}
if	64:8	65:29	4	(i_error)
cond	64:12	64:12	5	i_error
water	64:12	0:0	6	i_error
stmts	65:12	65:29	5	
goto	65:12	65:29	6	caf_open_end
water	65:17	0:0	7	caf_open_end
if	66:8	67:72	4	(b_handled)
cond	66:12	66:12	5	b_handled
water	66:12	0:0	6	b_handled
stmts	67:12	67:72	5	
call	67:12	67:71	6	msg_Dbg
arg	67:21	67:28	7	p_demux
water	67:21	0:0	8	p_demux
arg	67:30	67:52	7	"Found '%4.4s' chunk."
water	67:30	0:0	8	"Found '%4.4s' chunk."
arg	67:54	67:71	7	(char*)&i_fcc
water	67:54	0:0	8	(
water	67:56	0:0	8	char
op	67:61	0:0	8	*
water	67:63	0:0	8	)
op	67:64	0:0	8	&
water	67:65	0:0	8	i_fcc
water	67:72	0:0	6	;
else	68:8	69:75	4
stmts	69:12	69:75	5	
call	69:12	69:74	6	msg_Dbg
arg	69:21	69:28	7	p_demux
water	69:21	0:0	8	p_demux
arg	69:30	69:55	7	"Ignoring '%4.4s' chunk."
water	69:30	0:0	8	"Ignoring '%4.4s' chunk."
arg	69:57	69:74	7	(char*)&i_fcc
water	69:57	0:0	8	(
water	69:59	0:0	8	char
op	69:64	0:0	8	*
water	69:66	0:0	8	)
op	69:67	0:0	8	&
water	69:68	0:0	8	i_fcc
water	69:75	0:0	6	;
if	70:8	71:17	4	(i_size == kCHUNK_SIZE_EOF)
cond	70:12	70:22	5	i_size == kCHUNK_SIZE_EOF
water	70:12	0:0	6	i_size
op	70:19	0:0	6	==
water	70:22	0:0	6	kCHUNK_SIZE_EOF
stmts	71:12	71:17	5	
break	71:12	71:17	6	
if	72:8	73:17	4	(stream_Seek (p_demux -> s ,stream_Tell (p_demux -> s ) + i_size ) != VLC_SUCCESS)
cond	72:12	72:77	5	stream_Seek (p_demux -> s ,stream_Tell (p_demux -> s ) + i_size ) != VLC_SUCCESS
call	72:12	72:72	6	stream_Seek
arg	72:25	72:35	7	p_demux->s
water	72:25	0:0	8	p_demux
op	72:32	0:0	8	->
water	72:34	0:0	8	s
arg	72:37	72:72	7	stream_Tell(p_demux->s)+i_size
call	72:37	72:61	8	stream_Tell
arg	72:50	72:61	9	p_demux->s
water	72:50	0:0	10	p_demux
op	72:57	0:0	10	->
water	72:59	0:0	10	s
op	72:63	0:0	8	+
water	72:65	0:0	8	i_size
op	72:74	0:0	6	!=
water	72:77	0:0	6	VLC_SUCCESS
stmts	73:12	73:17	5	
break	73:12	73:17	6	
water	74:8	0:0	4	i_idx
op	74:13	0:0	4	++
water	74:15	0:0	4	;
water	75:4	0:0	4	}
if	76:4	82:4	2	(! p_sys -> i_data_offset || p_sys -> fmt . i_cat != AUDIO_ES || (NeedsPacketTable (p_sys ) && ! p_sys -> packet_table . i_descriptions_start ))
cond	76:9	77:81	3	! p_sys -> i_data_offset || p_sys -> fmt . i_cat != AUDIO_ES || (NeedsPacketTable (p_sys ) && ! p_sys -> packet_table . i_descriptions_start )
op	76:9	0:0	4	!
water	76:10	0:0	4	p_sys
op	76:15	0:0	4	->
water	76:17	0:0	4	i_data_offset
op	76:31	0:0	4	||
water	76:34	0:0	4	p_sys
op	76:39	0:0	4	->
water	76:41	0:0	4	fmt
op	76:44	0:0	4	.
water	76:45	0:0	4	i_cat
op	76:51	0:0	4	!=
water	76:54	0:0	4	AUDIO_ES
op	76:63	0:0	4	||
water	77:8	0:0	4	(
call	77:10	77:34	4	NeedsPacketTable
arg	77:28	77:34	5	p_sys
water	77:28	0:0	6	p_sys
op	77:36	0:0	4	&&
op	77:39	0:0	4	!
water	77:40	0:0	4	p_sys
op	77:45	0:0	4	->
water	77:47	0:0	4	packet_table
op	77:59	0:0	4	.
water	77:60	0:0	4	i_descriptions_start
water	77:81	0:0	4	)
stmts	78:4	82:4	3	
water	78:4	0:0	4	{
call	79:8	79:63	4	msg_Err
arg	79:17	79:24	5	p_demux
water	79:17	0:0	6	p_demux
arg	79:26	79:63	5	"Did not find all necessary chunks."
water	79:26	0:0	6	"Did not find all necessary chunks."
water	79:64	0:0	4	;
water	80:8	0:0	4	i_error
op	80:16	0:0	4	=
water	80:18	0:0	4	VLC_EGENERIC
water	80:30	0:0	4	;
goto	81:8	81:25	4	caf_open_end
water	81:13	0:0	5	caf_open_end
water	82:4	0:0	4	}
water	83:4	0:0	2	p_sys
op	83:9	0:0	2	->
water	83:11	0:0	2	es
op	83:14	0:0	2	=
call	83:16	83:54	2	es_out_Add
arg	83:28	83:40	3	p_demux->out
water	83:28	0:0	4	p_demux
op	83:35	0:0	4	->
water	83:37	0:0	4	out
arg	83:42	83:54	3	&p_sys->fmt
op	83:42	0:0	4	&
water	83:43	0:0	4	p_sys
op	83:48	0:0	4	->
water	83:50	0:0	4	fmt
water	83:55	0:0	2	;
if	84:4	89:4	2	(! p_sys -> es)
cond	84:8	84:16	3	! p_sys -> es
op	84:8	0:0	4	!
water	84:9	0:0	4	p_sys
op	84:14	0:0	4	->
water	84:16	0:0	4	es
stmts	85:4	89:4	3	
water	85:4	0:0	4	{
call	86:8	86:61	4	msg_Err
arg	86:17	86:24	5	p_demux
water	86:17	0:0	6	p_demux
arg	86:26	86:61	5	"Could not add elementary stream."
water	86:26	0:0	6	"Could not add elementary stream."
water	86:62	0:0	4	;
water	87:8	0:0	4	i_error
op	87:16	0:0	4	=
water	87:18	0:0	4	VLC_EGENERIC
water	87:30	0:0	4	;
goto	88:8	88:25	4	caf_open_end
water	88:13	0:0	5	caf_open_end
water	89:4	0:0	4	}
label	90:0	90:12	2	caf_open_end :
if	91:4	99:4	2	(i_error)
cond	91:8	91:8	3	i_error
water	91:8	0:0	4	i_error
stmts	92:4	99:4	3	
water	92:4	0:0	4	{
call	93:8	93:33	4	free
arg	93:14	93:33	5	p_sys->fmt.p_extra
water	93:14	0:0	6	p_sys
op	93:19	0:0	6	->
water	93:21	0:0	6	fmt
op	93:24	0:0	6	.
water	93:25	0:0	6	p_extra
water	93:34	0:0	4	;
call	94:8	94:21	4	free
arg	94:14	94:21	5	p_sys
water	94:14	0:0	6	p_sys
water	94:22	0:0	4	;
if	95:8	98:8	4	(stream_Seek (p_demux -> s ,0 ))
cond	95:12	95:39	5	stream_Seek (p_demux -> s ,0 )
call	95:12	95:39	6	stream_Seek
arg	95:25	95:35	7	p_demux->s
water	95:25	0:0	8	p_demux
op	95:32	0:0	8	->
water	95:34	0:0	8	s
arg	95:37	95:39	7	0
water	95:37	0:0	8	0
stmts	96:8	98:8	5	
water	96:8	0:0	6	{
call	97:12	97:69	6	msg_Warn
arg	97:21	97:28	7	p_demux
water	97:21	0:0	8	p_demux
arg	97:30	97:69	7	"Could not reset stream position to 0."
water	97:30	0:0	8	"Could not reset stream position to 0."
water	97:70	0:0	6	;
water	98:8	0:0	6	}
water	99:4	0:0	4	}
else	100:4	104:4	2
stmts	101:4	104:4	3	
water	101:4	0:0	4	{
water	102:8	0:0	4	p_demux
op	102:15	0:0	4	->
water	102:17	0:0	4	pf_control
op	102:28	0:0	4	=
water	102:30	0:0	4	Control
water	102:37	0:0	4	;
water	103:8	0:0	4	p_demux
op	103:15	0:0	4	->
water	103:17	0:0	4	pf_demux
op	103:26	0:0	4	=
water	103:28	0:0	4	Demux
water	103:33	0:0	4	;
water	104:4	0:0	4	}
return	105:4	105:18	2	i_error
water	105:11	0:0	3	i_error
