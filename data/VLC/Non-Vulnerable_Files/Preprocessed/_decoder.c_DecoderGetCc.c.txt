func	2:0	36:0	0	static void	DecoderGetCc
params	2:24	0:0	1	
param	2:26	2:42	2	decoder_t *	p_dec
param	2:44	2:64	2	decoder_t *	p_dec_cc
stmnts	0:0	35:29	1	
decl	4:4	4:49	2	decoder_owner_sys_t	*p_owner
op	4:33	0:0	2	=
water	4:35	0:0	2	p_dec
op	4:40	0:0	2	->
water	4:42	0:0	2	p_owner
decl	5:4	5:17	2	block_t	*p_cc
decl	6:4	6:22	2	bool	pb_present[4]
decl	7:4	7:28	2	bool	b_processed
op	7:21	0:0	2	=
water	7:23	0:0	2	false
decl	8:4	8:9	2	int	i
decl	9:4	9:20	2	int	i_cc_decoder
call	10:4	10:40	2	assert
arg	10:12	10:40	3	p_dec_cc->pf_get_cc!=NULL
water	10:12	0:0	4	p_dec_cc
op	10:20	0:0	4	->
water	10:22	0:0	4	pf_get_cc
op	10:32	0:0	4	!=
water	10:35	0:0	4	NULL
water	10:41	0:0	2	;
if	12:4	13:14	2	(! p_owner -> cc . b_supported)
cond	12:8	12:21	3	! p_owner -> cc . b_supported
op	12:8	0:0	4	!
water	12:9	0:0	4	p_owner
op	12:16	0:0	4	->
water	12:18	0:0	4	cc
op	12:20	0:0	4	.
water	12:21	0:0	4	b_supported
stmts	13:8	13:14	3	
return	13:8	13:14	4	
water	14:4	0:0	2	p_cc
op	14:9	0:0	2	=
call	14:11	14:53	2	p_dec_cc->pf_get_cc
arg	14:32	14:40	3	p_dec_cc
water	14:32	0:0	4	p_dec_cc
arg	14:42	14:53	3	pb_present
water	14:42	0:0	4	pb_present
water	14:54	0:0	2	;
if	15:4	16:14	2	(! p_cc)
cond	15:8	15:9	3	! p_cc
op	15:8	0:0	4	!
water	15:9	0:0	4	p_cc
stmts	16:8	16:14	3	
return	16:8	16:14	4	
call	17:4	17:35	2	vlc_mutex_lock
arg	17:20	17:35	3	&p_owner->lock
op	17:20	0:0	4	&
water	17:21	0:0	4	p_owner
op	17:28	0:0	4	->
water	17:30	0:0	4	lock
water	17:36	0:0	2	;
for	18:4	23:4	2	(i = 0 , i_cc_decoder = 0 ;i < 4;i ++)
forinit	18:9	18:32	3	i = 0 , i_cc_decoder = 0 ;
water	18:9	0:0	4	i
op	18:11	0:0	4	=
water	18:13	0:0	4	0
water	18:14	0:0	4	,
water	18:16	0:0	4	i_cc_decoder
op	18:29	0:0	4	=
water	18:31	0:0	4	0
water	18:32	0:0	4	;
cond	18:34	18:38	3	i < 4
water	18:34	0:0	4	i
op	18:36	0:0	4	<
water	18:38	0:0	4	4
forexpr	18:41	18:42	3	i ++
water	18:41	0:0	4	i
op	18:42	0:0	4	++
stmts	19:4	23:4	3	
water	19:4	0:0	4	{
water	20:8	0:0	4	p_owner
op	20:15	0:0	4	->
water	20:17	0:0	4	cc
op	20:19	0:0	4	.
water	20:20	0:0	4	pb_present
op	20:30	0:0	4	[
water	20:31	0:0	4	i
op	20:32	0:0	4	]
op	20:34	0:0	4	|=
water	20:37	0:0	4	pb_present
op	20:47	0:0	4	[
water	20:48	0:0	4	i
op	20:49	0:0	4	]
water	20:50	0:0	4	;
if	21:8	22:26	4	(p_owner -> cc . pp_decoder [ i ])
cond	21:12	21:36	5	p_owner -> cc . pp_decoder [ i ]
water	21:12	0:0	6	p_owner
op	21:19	0:0	6	->
water	21:21	0:0	6	cc
op	21:23	0:0	6	.
water	21:24	0:0	6	pp_decoder
op	21:34	0:0	6	[
water	21:35	0:0	6	i
op	21:36	0:0	6	]
stmts	22:12	22:26	5	
water	22:12	0:0	6	i_cc_decoder
op	22:24	0:0	6	++
water	22:26	0:0	6	;
water	23:4	0:0	4	}
for	24:4	32:4	2	(i = 0 ;i < 4;i ++)
forinit	24:9	24:14	3	i = 0 ;
water	24:9	0:0	4	i
op	24:11	0:0	4	=
water	24:13	0:0	4	0
water	24:14	0:0	4	;
cond	24:16	24:20	3	i < 4
water	24:16	0:0	4	i
op	24:18	0:0	4	<
water	24:20	0:0	4	4
forexpr	24:23	24:24	3	i ++
water	24:23	0:0	4	i
op	24:24	0:0	4	++
stmts	25:4	32:4	3	
water	25:4	0:0	4	{
if	26:8	27:20	4	(! p_owner -> cc . pp_decoder [ i ])
cond	26:12	26:37	5	! p_owner -> cc . pp_decoder [ i ]
op	26:12	0:0	6	!
water	26:13	0:0	6	p_owner
op	26:20	0:0	6	->
water	26:22	0:0	6	cc
op	26:24	0:0	6	.
water	26:25	0:0	6	pp_decoder
op	26:35	0:0	6	[
water	26:36	0:0	6	i
op	26:37	0:0	6	]
stmts	27:12	27:20	5	
continue	27:12	27:20	6	
call	28:8	29:61	4	block_FifoPut
arg	28:23	28:65	5	p_owner->cc.pp_decoder[i]->p_owner->p_fifo
water	28:23	0:0	6	p_owner
op	28:30	0:0	6	->
water	28:32	0:0	6	cc
op	28:34	0:0	6	.
water	28:35	0:0	6	pp_decoder
op	28:45	0:0	6	[
water	28:46	0:0	6	i
op	28:47	0:0	6	]
op	28:48	0:0	6	->
water	28:50	0:0	6	p_owner
op	28:57	0:0	6	->
water	28:59	0:0	6	p_fifo
arg	29:12	29:61	5	(i_cc_decoder>1)?block_Duplicate(p_cc):p_cc
water	29:12	0:0	6	(
water	29:13	0:0	6	i_cc_decoder
op	29:26	0:0	6	>
water	29:28	0:0	6	1
water	29:29	0:0	6	)
water	29:31	0:0	6	?
call	29:33	29:53	6	block_Duplicate
arg	29:49	29:53	7	p_cc
water	29:49	0:0	8	p_cc
water	29:55	0:0	6	:
water	29:57	0:0	6	p_cc
water	29:62	0:0	4	;
water	30:8	0:0	4	i_cc_decoder
op	30:20	0:0	4	--
water	30:22	0:0	4	;
water	31:8	0:0	4	b_processed
op	31:20	0:0	4	=
water	31:22	0:0	4	true
water	31:26	0:0	4	;
water	32:4	0:0	4	}
call	33:4	33:37	2	vlc_mutex_unlock
arg	33:22	33:37	3	&p_owner->lock
op	33:22	0:0	4	&
water	33:23	0:0	4	p_owner
op	33:30	0:0	4	->
water	33:32	0:0	4	lock
water	33:38	0:0	2	;
if	34:4	35:29	2	(! b_processed)
cond	34:8	34:9	3	! b_processed
op	34:8	0:0	4	!
water	34:9	0:0	4	b_processed
stmts	35:8	35:29	3	
call	35:8	35:28	4	block_Release
arg	35:23	35:28	5	p_cc
water	35:23	0:0	6	p_cc
water	35:29	0:0	4	;
