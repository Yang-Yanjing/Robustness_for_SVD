func	2:0	12:0	0	static void	FilterFL64
params	2:22	0:0	1	
param	2:24	2:48	2	audio_volume_t *	p_volume
param	2:50	2:67	2	block_t *	p_buffer
param	3:24	3:43	2	float	f_multiplier
stmnts	0:0	11:19	1	
decl	5:4	5:44	2	double	*p
op	5:14	0:0	2	=
water	5:16	0:0	2	(
water	5:17	0:0	2	double
op	5:24	0:0	2	*
water	5:25	0:0	2	)
water	5:26	0:0	2	p_buffer
op	5:34	0:0	2	->
water	5:36	0:0	2	p_buffer
decl	6:4	6:30	2	double	mult
op	6:16	0:0	2	=
water	6:18	0:0	2	f_multiplier
if	7:4	8:14	2	(mult == 1 .)
cond	7:8	7:17	3	mult == 1 .
water	7:8	0:0	4	mult
op	7:13	0:0	4	==
water	7:16	0:0	4	1
op	7:17	0:0	4	.
stmts	8:8	8:14	3	
return	8:8	8:14	4	
for	9:4	10:22	2	( size_t i = p_buffer -> i_buffer / sizeof ( * p ) ;i > 0;i --)
forinit	0:0	9:51	3	 size_t i = p_buffer -> i_buffer / sizeof ( * p ) ;
decl	9:9	9:51	4	size_t	i
op	9:18	0:0	4	=
water	9:20	0:0	4	p_buffer
op	9:28	0:0	4	->
water	9:30	0:0	4	i_buffer
op	9:39	0:0	4	/
op	9:41	0:0	4	sizeof
water	9:47	0:0	4	(
op	9:48	0:0	4	*
water	9:49	0:0	4	p
water	9:50	0:0	4	)
cond	9:53	9:57	3	i > 0
water	9:53	0:0	4	i
op	9:55	0:0	4	>
water	9:57	0:0	4	0
forexpr	9:60	9:61	3	i --
water	9:60	0:0	4	i
op	9:61	0:0	4	--
stmts	10:8	10:22	3	
op	10:8	0:0	4	*
water	10:9	0:0	4	(
water	10:10	0:0	4	p
op	10:11	0:0	4	++
water	10:13	0:0	4	)
op	10:15	0:0	4	*=
water	10:18	0:0	4	mult
water	10:22	0:0	4	;
water	11:4	0:0	2	(
water	11:5	0:0	2	void
water	11:9	0:0	2	)
water	11:11	0:0	2	p_volume
water	11:19	0:0	2	;
