func	2:0	134:4	0	static int	Open
params	2:15	0:0	1	
param	2:17	2:39	2	vlc_object_t *	p_this
stmnts	0:0	133:19	1	
decl	4:4	4:43	2	demux_t	*p_demux
op	4:25	0:0	2	=
water	4:27	0:0	2	(
water	4:28	0:0	2	demux_t
op	4:35	0:0	2	*
water	4:36	0:0	2	)
water	4:37	0:0	2	p_this
decl	5:4	5:22	2	demux_sys_t	*p_sys
decl	6:4	6:31	2	int	i_width
op	6:15	0:0	2	=
op	6:16	0:0	2	-
water	6:17	0:0	2	1
water	6:18	0:0	2	,
decl	6:4	6:31	2	int	i_height
op	6:28	0:0	2	=
op	6:29	0:0	2	-
water	6:30	0:0	2	1
water	7:4	0:0	2	unsigned
water	7:13	0:0	2	u_fps_num
water	7:22	0:0	2	,
water	7:24	0:0	2	u_fps_den
water	7:33	0:0	2	;
decl	8:4	8:29	2	vlc_fourcc_t	i_chroma
op	8:26	0:0	2	=
water	8:28	0:0	2	0
decl	9:4	9:26	2	unsigned int	i_sar_num
decl	10:4	10:26	2	unsigned int	i_sar_den
decl	11:4	11:42	2	const struct preset_t	*p_preset
op	11:36	0:0	2	=
water	11:38	0:0	2	NULL
decl	12:4	12:25	2	const uint8_t	*p_peek
decl	13:4	13:22	2	bool	b_y4m
op	13:15	0:0	2	=
water	13:17	0:0	2	false
if	14:4	22:4	2	(stream_Peek (p_demux -> s ,& p_peek ,9 ) == 9)
cond	14:8	14:49	3	stream_Peek (p_demux -> s ,& p_peek ,9 ) == 9
call	14:8	14:44	4	stream_Peek
arg	14:21	14:31	5	p_demux->s
water	14:21	0:0	6	p_demux
op	14:28	0:0	6	->
water	14:30	0:0	6	s
arg	14:33	14:40	5	&p_peek
op	14:33	0:0	6	&
water	14:34	0:0	6	p_peek
arg	14:42	14:44	5	9
water	14:42	0:0	6	9
op	14:46	0:0	4	==
water	14:49	0:0	4	9
stmts	15:4	22:4	3	
water	15:4	0:0	4	{
if	17:8	21:8	4	(!strncmp (( char * ) p_peek ,"YUV4MPEG2" ,9 ))
cond	17:12	17:53	5	!strncmp (( char * ) p_peek ,"YUV4MPEG2" ,9 )
op	17:12	0:0	6	!
call	17:13	17:53	6	strncmp
arg	17:22	17:36	7	(char*)p_peek
water	17:22	0:0	8	(
water	17:23	0:0	8	char
op	17:28	0:0	8	*
water	17:29	0:0	8	)
water	17:30	0:0	8	p_peek
arg	17:38	17:49	7	"YUV4MPEG2"
water	17:38	0:0	8	"YUV4MPEG2"
arg	17:51	17:53	7	9
water	17:51	0:0	8	9
stmts	18:8	21:8	5	
water	18:8	0:0	6	{
water	19:12	0:0	6	b_y4m
op	19:18	0:0	6	=
water	19:20	0:0	6	true
water	19:24	0:0	6	;
goto	20:12	20:22	6	valid
water	20:17	0:0	7	valid
water	21:8	0:0	6	}
water	22:4	0:0	4	}
if	23:4	41:4	2	(! p_demux -> b_force)
cond	23:8	23:18	3	! p_demux -> b_force
op	23:8	0:0	4	!
water	23:9	0:0	4	p_demux
op	23:16	0:0	4	->
water	23:18	0:0	4	b_force
stmts	24:4	41:4	3	
water	24:4	0:0	4	{
if	26:8	27:31	4	(! p_demux -> psz_file)
cond	26:12	26:22	5	! p_demux -> psz_file
op	26:12	0:0	6	!
water	26:13	0:0	6	p_demux
op	26:20	0:0	6	->
water	26:22	0:0	6	psz_file
stmts	27:12	27:31	5	
return	27:12	27:31	6	VLC_EGENERIC
water	27:19	0:0	7	VLC_EGENERIC
decl	28:8	28:63	4	const char	*psz_ext
op	28:28	0:0	4	=
call	28:30	28:62	5	strrchr
arg	28:39	28:56	6	p_demux->psz_file
water	28:39	0:0	7	p_demux
op	28:46	0:0	7	->
water	28:48	0:0	7	psz_file
arg	28:58	28:62	6	'.'
water	28:58	0:0	7	'.'
if	29:8	30:31	4	(! psz_ext)
cond	29:12	29:13	5	! psz_ext
op	29:12	0:0	6	!
water	29:13	0:0	6	psz_ext
stmts	30:12	30:31	5	
return	30:12	30:31	6	VLC_EGENERIC
water	30:19	0:0	7	VLC_EGENERIC
water	31:8	0:0	4	psz_ext
op	31:15	0:0	4	++
water	31:17	0:0	4	;
for	32:8	39:8	4	(unsigned i = 0 ;p_presets [ i ] . psz_ext;i ++)
forinit	32:13	32:27	5	unsigned i = 0 ;
water	32:13	0:0	6	unsigned
water	32:22	0:0	6	i
op	32:24	0:0	6	=
water	32:26	0:0	6	0
water	32:27	0:0	6	;
cond	32:29	32:42	5	p_presets [ i ] . psz_ext
water	32:29	0:0	6	p_presets
op	32:38	0:0	6	[
water	32:39	0:0	6	i
op	32:40	0:0	6	]
op	32:41	0:0	6	.
water	32:42	0:0	6	psz_ext
forexpr	32:52	32:53	5	i ++
water	32:52	0:0	6	i
op	32:53	0:0	6	++
stmts	33:8	39:8	5	
water	33:8	0:0	6	{
if	34:12	38:12	6	(!strcasecmp (psz_ext ,p_presets [ i ] . psz_ext ))
cond	34:16	34:59	7	!strcasecmp (psz_ext ,p_presets [ i ] . psz_ext )
op	34:16	0:0	8	!
call	34:17	34:59	8	strcasecmp
arg	34:29	34:36	9	psz_ext
water	34:29	0:0	10	psz_ext
arg	34:38	34:59	9	p_presets[i].psz_ext
water	34:38	0:0	10	p_presets
op	34:47	0:0	10	[
water	34:48	0:0	10	i
op	34:49	0:0	10	]
op	34:50	0:0	10	.
water	34:51	0:0	10	psz_ext
stmts	35:12	38:12	7	
water	35:12	0:0	8	{
water	36:16	0:0	8	p_preset
op	36:25	0:0	8	=
op	36:27	0:0	8	&
water	36:28	0:0	8	p_presets
op	36:37	0:0	8	[
water	36:38	0:0	8	i
op	36:39	0:0	8	]
water	36:40	0:0	8	;
goto	37:16	37:26	8	valid
water	37:21	0:0	9	valid
water	38:12	0:0	8	}
water	39:8	0:0	6	}
return	40:8	40:27	4	VLC_EGENERIC
water	40:15	0:0	5	VLC_EGENERIC
water	41:4	0:0	4	}
label	42:0	42:5	2	valid :
water	43:4	0:0	2	p_demux
op	43:11	0:0	2	->
water	43:13	0:0	2	p_sys
op	43:24	0:0	2	=
water	43:26	0:0	2	p_sys
op	43:32	0:0	2	=
call	43:34	43:64	2	malloc
arg	43:42	43:64	3	sizeof(demux_sys_t)
op	43:42	0:0	4	sizeof
water	43:48	0:0	4	(
water	43:50	0:0	4	demux_sys_t
water	43:62	0:0	4	)
water	43:65	0:0	2	;
if	44:4	45:25	2	(! p_sys)
cond	44:8	44:9	3	! p_sys
op	44:8	0:0	4	!
water	44:9	0:0	4	p_sys
stmts	45:8	45:25	3	
return	45:8	45:25	4	VLC_ENOMEM
water	45:15	0:0	5	VLC_ENOMEM
water	46:4	0:0	2	p_sys
op	46:9	0:0	2	->
water	46:11	0:0	2	b_y4m
op	46:17	0:0	2	=
water	46:19	0:0	2	b_y4m
water	46:24	0:0	2	;
if	48:4	57:4	2	(p_preset)
cond	48:8	48:8	3	p_preset
water	48:8	0:0	4	p_preset
stmts	49:4	57:4	3	
water	49:4	0:0	4	{
water	50:8	0:0	4	i_width
op	50:16	0:0	4	=
water	50:18	0:0	4	p_preset
op	50:26	0:0	4	->
water	50:28	0:0	4	i_width
water	50:35	0:0	4	;
water	51:8	0:0	4	i_height
op	51:17	0:0	4	=
water	51:19	0:0	4	p_preset
op	51:27	0:0	4	->
water	51:29	0:0	4	i_height
water	51:37	0:0	4	;
water	52:8	0:0	4	u_fps_num
op	52:18	0:0	4	=
water	52:20	0:0	4	p_preset
op	52:28	0:0	4	->
water	52:30	0:0	4	u_fps_num
water	52:39	0:0	4	;
water	53:8	0:0	4	u_fps_den
op	53:18	0:0	4	=
water	53:20	0:0	4	p_preset
op	53:28	0:0	4	->
water	53:30	0:0	4	u_fps_den
water	53:39	0:0	4	;
water	54:8	0:0	4	i_sar_num
op	54:18	0:0	4	=
water	54:20	0:0	4	p_preset
op	54:28	0:0	4	->
water	54:30	0:0	4	u_ar_num
op	54:39	0:0	4	*
water	54:41	0:0	4	p_preset
op	54:49	0:0	4	->
water	54:51	0:0	4	i_height
water	54:59	0:0	4	;
water	55:8	0:0	4	i_sar_den
op	55:18	0:0	4	=
water	55:20	0:0	4	p_preset
op	55:28	0:0	4	->
water	55:30	0:0	4	u_ar_den
op	55:39	0:0	4	*
water	55:41	0:0	4	p_preset
op	55:49	0:0	4	->
water	55:51	0:0	4	i_width
water	55:58	0:0	4	;
water	56:8	0:0	4	i_chroma
op	56:17	0:0	4	=
water	56:19	0:0	4	p_preset
op	56:27	0:0	4	->
water	56:29	0:0	4	i_chroma
water	56:37	0:0	4	;
water	57:4	0:0	4	}
if	59:4	90:10	2	(b_y4m)
cond	59:8	59:8	3	b_y4m
water	59:8	0:0	4	b_y4m
stmts	60:4	90:10	3	
water	60:4	0:0	4	{
decl	62:8	62:49	4	char	*psz
op	62:18	0:0	4	=
call	62:20	62:48	5	stream_ReadLine
arg	62:37	62:48	6	p_demux->s
water	62:37	0:0	7	p_demux
op	62:44	0:0	7	->
water	62:46	0:0	7	s
decl	63:8	63:21	4	char	*psz_buf
decl	64:8	64:17	4	int	a
op	64:14	0:0	4	=
water	64:16	0:0	4	1
decl	65:8	65:17	4	int	b
op	65:14	0:0	4	=
water	65:16	0:0	4	1
if	66:8	67:22	4	(unlikely (psz == NULL ))
cond	66:12	66:32	5	unlikely (psz == NULL )
call	66:12	66:32	6	unlikely
arg	66:21	66:32	7	psz==NULL
water	66:21	0:0	8	psz
op	66:25	0:0	8	==
water	66:28	0:0	8	NULL
stmts	67:12	67:22	5	
goto	67:12	67:22	6	error
water	67:17	0:0	7	error
water	71:8	0:0	4	psz_buf
op	71:16	0:0	4	=
call	71:18	71:37	4	strstr
arg	71:26	71:31	5	psz+9
water	71:26	0:0	6	psz
op	71:29	0:0	6	+
water	71:30	0:0	6	9
arg	71:33	71:37	5	key
water	71:33	0:0	6	key
water	71:38	0:0	4	;
if	72:8	90:8	4	(psz_buf)
cond	72:12	72:12	5	psz_buf
water	72:12	0:0	6	psz_buf
stmts	73:8	90:8	5	
water	73:8	0:0	6	{
decl	74:12	74:48	6	char	*end
op	74:22	0:0	6	=
call	74:24	74:47	7	strchr
arg	74:32	74:41	8	psz_buf+1
water	74:32	0:0	9	psz_buf
op	74:39	0:0	9	+
water	74:40	0:0	9	1
arg	74:43	74:47	8	' '
water	74:43	0:0	9	' '
decl	75:12	75:21	6	char	*sep
if	76:12	76:33	6	(end)
cond	76:16	76:16	7	end
water	76:16	0:0	8	end
stmts	76:22	76:33	7	
op	76:22	0:0	8	*
water	76:23	0:0	8	end
op	76:27	0:0	8	=
water	76:29	0:0	8	'\0'
water	76:33	0:0	8	;
water	77:12	0:0	6	sep
op	77:16	0:0	6	=
call	77:18	77:41	6	strchr
arg	77:26	77:35	7	psz_buf+1
water	77:26	0:0	8	psz_buf
op	77:33	0:0	8	+
water	77:34	0:0	8	1
arg	77:37	77:41	7	':'
water	77:37	0:0	8	':'
water	77:42	0:0	6	;
if	78:12	82:12	6	(sep)
cond	78:16	78:16	7	sep
water	78:16	0:0	8	sep
stmts	79:12	82:12	7	
water	79:12	0:0	8	{
op	80:16	0:0	8	*
water	80:17	0:0	8	sep
op	80:21	0:0	8	=
water	80:23	0:0	8	'\0'
water	80:27	0:0	8	;
water	81:16	0:0	8	den
op	81:20	0:0	8	=
call	81:22	81:34	8	atoi
arg	81:28	81:34	9	sep+1
water	81:28	0:0	10	sep
op	81:31	0:0	10	+
water	81:32	0:0	10	1
water	81:35	0:0	8	;
water	82:12	0:0	8	}
else	83:12	86:12	6
stmts	84:12	86:12	7	
water	84:12	0:0	8	{
water	85:16	0:0	8	den
op	85:20	0:0	8	=
water	85:22	0:0	8	1
water	85:23	0:0	8	;
water	86:12	0:0	8	}
water	87:12	0:0	6	num
op	87:16	0:0	6	=
call	87:18	87:34	6	atoi
arg	87:24	87:34	7	psz_buf+2
water	87:24	0:0	8	psz_buf
op	87:31	0:0	8	+
water	87:32	0:0	8	2
water	87:35	0:0	6	;
if	88:12	88:32	6	(sep)
cond	88:16	88:16	7	sep
water	88:16	0:0	8	sep
stmts	88:22	88:32	7	
op	88:22	0:0	8	*
water	88:23	0:0	8	sep
op	88:27	0:0	8	=
water	88:29	0:0	8	':'
water	88:32	0:0	8	;
if	89:12	89:32	6	(end)
cond	89:16	89:16	7	end
water	89:16	0:0	8	end
stmts	89:22	89:32	7	
op	89:22	0:0	8	*
water	89:23	0:0	8	end
op	89:27	0:0	8	=
water	89:29	0:0	8	' '
water	89:32	0:0	8	;
water	90:8	0:0	6	}
water	90:10	0:0	4	}
while	90:12	91:37	2	(0)
cond	90:18	90:18	3	0
water	90:18	0:0	4	0
stmts	91:8	91:37	3	
call	91:8	91:36	4	READ_FRAC
arg	91:19	91:23	5	" W"
water	91:19	0:0	6	" W"
arg	91:25	91:32	5	i_width
water	91:25	0:0	6	i_width
arg	91:34	91:36	5	a
water	91:34	0:0	6	a
water	91:37	0:0	4	;
call	92:8	92:37	2	READ_FRAC
arg	92:19	92:23	3	" H"
water	92:19	0:0	4	" H"
arg	92:25	92:33	3	i_height
water	92:25	0:0	4	i_height
arg	92:35	92:37	3	a
water	92:35	0:0	4	a
water	92:38	0:0	2	;
call	93:8	93:46	2	READ_FRAC
arg	93:19	93:23	3	" F"
water	93:19	0:0	4	" F"
arg	93:25	93:34	3	u_fps_num
water	93:25	0:0	4	u_fps_num
arg	93:36	93:46	3	u_fps_den
water	93:36	0:0	4	u_fps_den
water	93:47	0:0	2	;
call	94:8	94:30	2	READ_FRAC
arg	94:19	94:23	3	" A"
water	94:19	0:0	4	" A"
arg	94:25	94:26	3	a
water	94:25	0:0	4	a
arg	94:28	94:30	3	b
water	94:28	0:0	4	b
water	94:31	0:0	2	;
if	96:8	100:8	2	(b != 0)
cond	96:12	96:17	3	b != 0
water	96:12	0:0	4	b
op	96:14	0:0	4	!=
water	96:17	0:0	4	0
stmts	97:8	100:8	3	
water	97:8	0:0	4	{
water	98:12	0:0	4	i_sar_num
op	98:22	0:0	4	=
water	98:24	0:0	4	a
water	98:25	0:0	4	;
water	99:12	0:0	4	i_sar_den
op	99:22	0:0	4	=
water	99:24	0:0	4	b
water	99:25	0:0	4	;
water	100:8	0:0	4	}
water	101:8	0:0	2	psz_buf
op	101:16	0:0	2	=
call	101:18	101:38	2	strstr
arg	101:26	101:31	3	psz+9
water	101:26	0:0	4	psz
op	101:29	0:0	4	+
water	101:30	0:0	4	9
arg	101:33	101:38	3	" C"
water	101:33	0:0	4	" C"
water	101:39	0:0	2	;
if	102:8	132:8	2	(psz_buf)
cond	102:12	102:12	3	psz_buf
water	102:12	0:0	4	psz_buf
stmts	103:8	132:8	3	
water	103:8	0:0	4	{
water	104:12	0:0	4	static
water	104:19	0:0	4	const
water	104:25	0:0	4	struct
water	104:32	0:0	4	{
water	104:34	0:0	4	const
water	104:40	0:0	4	char
op	104:45	0:0	4	*
water	104:46	0:0	4	psz_name
water	104:54	0:0	4	;
water	104:56	0:0	4	vlc_fourcc_t
water	104:69	0:0	4	i_fcc
water	104:74	0:0	4	;
water	104:76	0:0	4	}
water	104:78	0:0	4	formats
op	104:85	0:0	4	[
op	104:86	0:0	4	]
op	104:88	0:0	4	=
water	105:12	0:0	4	{
water	106:16	0:0	4	{
water	106:18	0:0	4	"420jpeg"
water	106:27	0:0	4	,
water	106:32	0:0	4	VLC_CODEC_I420
water	106:47	0:0	4	}
water	106:48	0:0	4	,
water	107:16	0:0	4	{
water	107:18	0:0	4	"420paldv"
water	107:28	0:0	4	,
water	107:32	0:0	4	VLC_CODEC_I420
water	107:47	0:0	4	}
water	107:48	0:0	4	,
water	108:16	0:0	4	{
water	108:18	0:0	4	"420"
water	108:23	0:0	4	,
water	108:32	0:0	4	VLC_CODEC_I420
water	108:47	0:0	4	}
water	108:48	0:0	4	,
water	109:16	0:0	4	{
water	109:18	0:0	4	"422"
water	109:23	0:0	4	,
water	109:32	0:0	4	VLC_CODEC_I422
water	109:47	0:0	4	}
water	109:48	0:0	4	,
water	110:16	0:0	4	{
water	110:18	0:0	4	"444"
water	110:23	0:0	4	,
water	110:32	0:0	4	VLC_CODEC_I444
water	110:47	0:0	4	}
water	110:48	0:0	4	,
water	111:16	0:0	4	{
water	111:18	0:0	4	"mono"
water	111:24	0:0	4	,
water	111:32	0:0	4	VLC_CODEC_GREY
water	111:47	0:0	4	}
water	111:48	0:0	4	,
water	112:16	0:0	4	{
water	112:18	0:0	4	NULL
water	112:22	0:0	4	,
water	112:24	0:0	4	0
water	112:26	0:0	4	}
water	113:12	0:0	4	}
water	113:13	0:0	4	;
decl	114:12	114:32	4	bool	b_found
op	114:25	0:0	4	=
water	114:27	0:0	4	false
decl	115:12	115:52	4	char	*psz_end
op	115:26	0:0	4	=
call	115:28	115:51	5	strchr
arg	115:36	115:45	6	psz_buf+1
water	115:36	0:0	7	psz_buf
op	115:43	0:0	7	+
water	115:44	0:0	7	1
arg	115:47	115:51	6	' '
water	115:47	0:0	7	' '
if	116:12	117:31	4	(psz_end)
cond	116:16	116:16	5	psz_end
water	116:16	0:0	6	psz_end
stmts	117:16	117:31	5	
op	117:16	0:0	6	*
water	117:17	0:0	6	psz_end
op	117:25	0:0	6	=
water	117:27	0:0	6	'\0'
water	117:31	0:0	6	;
water	118:12	0:0	4	psz_buf
op	118:20	0:0	4	+=
water	118:23	0:0	4	2
water	118:24	0:0	4	;
for	119:12	127:12	4	( int i = 0 ;formats [ i ] . psz_name != NULL;i ++)
forinit	0:0	119:26	5	 int i = 0 ;
decl	119:17	119:26	6	int	i
op	119:23	0:0	6	=
water	119:25	0:0	6	0
cond	119:28	119:51	5	formats [ i ] . psz_name != NULL
water	119:28	0:0	6	formats
op	119:35	0:0	6	[
water	119:36	0:0	6	i
op	119:37	0:0	6	]
op	119:38	0:0	6	.
water	119:39	0:0	6	psz_name
op	119:48	0:0	6	!=
water	119:51	0:0	6	NULL
forexpr	119:57	119:58	5	i ++
water	119:57	0:0	6	i
op	119:58	0:0	6	++
stmts	120:12	127:12	5	
water	120:12	0:0	6	{
if	121:16	126:16	6	(!strncmp (psz_buf ,formats [ i ] . psz_name ,strlen (formats [ i ] . psz_name ) ))
cond	121:20	121:88	7	!strncmp (psz_buf ,formats [ i ] . psz_name ,strlen (formats [ i ] . psz_name ) )
op	121:20	0:0	8	!
call	121:21	121:88	8	strncmp
arg	121:30	121:37	9	psz_buf
water	121:30	0:0	10	psz_buf
arg	121:39	121:58	9	formats[i].psz_name
water	121:39	0:0	10	formats
op	121:46	0:0	10	[
water	121:47	0:0	10	i
op	121:48	0:0	10	]
op	121:49	0:0	10	.
water	121:50	0:0	10	psz_name
arg	121:60	121:88	9	strlen(formats[i].psz_name)
call	121:60	121:86	10	strlen
arg	121:67	121:86	11	formats[i].psz_name
water	121:67	0:0	12	formats
op	121:74	0:0	12	[
water	121:75	0:0	12	i
op	121:76	0:0	12	]
op	121:77	0:0	12	.
water	121:78	0:0	12	psz_name
stmts	122:16	126:16	7	
water	122:16	0:0	8	{
water	123:20	0:0	8	i_chroma
op	123:29	0:0	8	=
water	123:31	0:0	8	formats
op	123:38	0:0	8	[
water	123:39	0:0	8	i
op	123:40	0:0	8	]
op	123:41	0:0	8	.
water	123:42	0:0	8	i_fcc
water	123:47	0:0	8	;
water	124:20	0:0	8	b_found
op	124:28	0:0	8	=
water	124:30	0:0	8	true
water	124:34	0:0	8	;
break	125:20	125:25	8	
water	126:16	0:0	8	}
water	127:12	0:0	6	}
if	128:12	129:84	4	(! b_found)
cond	128:16	128:17	5	! b_found
op	128:16	0:0	6	!
water	128:17	0:0	6	b_found
stmts	129:16	129:84	5	
call	129:16	129:83	6	msg_Warn
arg	129:26	129:33	7	p_demux
water	129:26	0:0	8	p_demux
arg	129:35	129:73	7	"Unknown YUV4MPEG2 chroma type \"%s\""
water	129:35	0:0	8	"Unknown YUV4MPEG2 chroma type \"%s\""
arg	129:75	129:83	7	psz_buf
water	129:75	0:0	8	psz_buf
water	129:84	0:0	6	;
if	130:12	131:30	4	(psz_end)
cond	130:16	130:16	5	psz_end
water	130:16	0:0	6	psz_end
stmts	131:16	131:30	5	
op	131:16	0:0	6	*
water	131:17	0:0	6	psz_end
op	131:25	0:0	6	=
water	131:27	0:0	6	' '
water	131:30	0:0	6	;
water	132:8	0:0	4	}
call	133:8	133:18	2	free
arg	133:14	133:18	3	psz
water	133:14	0:0	4	psz
water	133:19	0:0	2	;
decl	136:4	136:13	0	int	i_tmp
decl	141:4	141:17	0	char	*psz_tmp
func	217:0	222:0	0	static void	Close
params	217:17	0:0	1	
param	217:19	217:40	2	vlc_object_t *	p_this
stmnts	0:0	221:17	1	
decl	219:4	219:43	2	demux_t	*p_demux
op	219:25	0:0	2	=
water	219:27	0:0	2	(
water	219:28	0:0	2	demux_t
op	219:35	0:0	2	*
water	219:36	0:0	2	)
water	219:37	0:0	2	p_this
decl	220:4	220:40	2	demux_sys_t	*p_sys
op	220:24	0:0	2	=
water	220:26	0:0	2	p_demux
op	220:33	0:0	2	->
water	220:35	0:0	2	p_sys
call	221:4	221:16	2	free
arg	221:10	221:16	3	p_sys
water	221:10	0:0	4	p_sys
water	221:17	0:0	2	;
func	228:0	260:0	0	static int	Demux
params	228:16	0:0	1	
param	228:18	228:35	2	demux_t *	p_demux
stmnts	0:0	259:12	1	
decl	230:4	230:40	2	demux_sys_t	*p_sys
op	230:24	0:0	2	=
water	230:26	0:0	2	p_demux
op	230:33	0:0	2	->
water	230:35	0:0	2	p_sys
decl	231:4	231:24	2	block_t	*p_block
decl	232:4	232:43	2	mtime_t	i_pcr
op	232:18	0:0	2	=
call	232:20	232:42	3	date_Get
arg	232:30	232:42	4	&p_sys->pcr
op	232:30	0:0	5	&
water	232:31	0:0	5	p_sys
op	232:36	0:0	5	->
water	232:38	0:0	5	pcr
call	234:4	234:67	2	es_out_Control
arg	234:20	234:32	3	p_demux->out
water	234:20	0:0	4	p_demux
op	234:27	0:0	4	->
water	234:29	0:0	4	out
arg	234:34	234:48	3	ES_OUT_SET_PCR
water	234:34	0:0	4	ES_OUT_SET_PCR
arg	234:50	234:67	3	VLC_TS_0+i_pcr
water	234:50	0:0	4	VLC_TS_0
op	234:59	0:0	4	+
water	234:61	0:0	4	i_pcr
water	234:68	0:0	2	;
if	235:4	250:4	2	(p_sys -> b_y4m)
cond	235:8	235:15	3	p_sys -> b_y4m
water	235:8	0:0	4	p_sys
op	235:13	0:0	4	->
water	235:15	0:0	4	b_y4m
stmts	236:4	250:4	3	
water	236:4	0:0	4	{
if	239:8	240:20	4	(stream_Read (p_demux -> s ,NULL ,5 ) < 5)
cond	239:12	239:49	5	stream_Read (p_demux -> s ,NULL ,5 ) < 5
call	239:12	239:45	6	stream_Read
arg	239:25	239:35	7	p_demux->s
water	239:25	0:0	8	p_demux
op	239:32	0:0	8	->
water	239:34	0:0	8	s
arg	239:37	239:41	7	NULL
water	239:37	0:0	8	NULL
arg	239:43	239:45	7	5
water	239:43	0:0	8	5
op	239:47	0:0	6	<
water	239:49	0:0	6	5
stmts	240:12	240:20	5	
return	240:12	240:20	6	0
water	240:19	0:0	7	0
for	242:8	249:8	4	(;;)
forinit	242:13	242:13	5	;
water	242:13	0:0	6	;
cond	0:0	0:0	5	
forexpr	0:0	0:0	5	
stmts	243:8	249:8	5	
water	243:8	0:0	6	{
decl	244:12	244:21	6	uint8_t	b
if	245:12	246:24	6	(stream_Read (p_demux -> s ,& b ,1 ) < 1)
cond	245:16	245:51	7	stream_Read (p_demux -> s ,& b ,1 ) < 1
call	245:16	245:47	8	stream_Read
arg	245:29	245:39	9	p_demux->s
water	245:29	0:0	10	p_demux
op	245:36	0:0	10	->
water	245:38	0:0	10	s
arg	245:41	245:43	9	&b
op	245:41	0:0	10	&
water	245:42	0:0	10	b
arg	245:45	245:47	9	1
water	245:45	0:0	10	1
op	245:49	0:0	8	<
water	245:51	0:0	8	1
stmts	246:16	246:24	7	
return	246:16	246:24	8	0
water	246:23	0:0	9	0
if	247:12	248:21	6	(b == 0 x0a)
cond	247:16	247:22	7	b == 0 x0a
water	247:16	0:0	8	b
op	247:18	0:0	8	==
water	247:21	0:0	8	0
water	247:22	0:0	8	x0a
stmts	248:16	248:21	7	
break	248:16	248:21	8	
water	249:8	0:0	6	}
water	250:4	0:0	4	}
if	251:4	255:4	2	(( p_block =stream_Block (p_demux -> s ,p_sys -> frame_size ) ) == NULL)
cond	251:8	251:71	3	( p_block =stream_Block (p_demux -> s ,p_sys -> frame_size ) ) == NULL
water	251:8	0:0	4	(
water	251:10	0:0	4	p_block
op	251:18	0:0	4	=
call	251:20	251:64	4	stream_Block
arg	251:34	251:44	5	p_demux->s
water	251:34	0:0	6	p_demux
op	251:41	0:0	6	->
water	251:43	0:0	6	s
arg	251:46	251:64	5	p_sys->frame_size
water	251:46	0:0	6	p_sys
op	251:51	0:0	6	->
water	251:53	0:0	6	frame_size
water	251:66	0:0	4	)
op	251:68	0:0	4	==
water	251:71	0:0	4	NULL
stmts	252:4	255:4	3	
water	252:4	0:0	4	{
return	254:8	254:16	4	0
water	254:15	0:0	5	0
water	255:4	0:0	4	}
water	256:4	0:0	2	p_block
op	256:11	0:0	2	->
water	256:13	0:0	2	i_dts
op	256:19	0:0	2	=
water	256:21	0:0	2	p_block
op	256:28	0:0	2	->
water	256:30	0:0	2	i_pts
op	256:36	0:0	2	=
water	256:38	0:0	2	VLC_TS_0
op	256:47	0:0	2	+
water	256:49	0:0	2	i_pcr
water	256:54	0:0	2	;
call	257:4	257:58	2	es_out_Send
arg	257:17	257:29	3	p_demux->out
water	257:17	0:0	4	p_demux
op	257:24	0:0	4	->
water	257:26	0:0	4	out
arg	257:31	257:48	3	p_sys->p_es_video
water	257:31	0:0	4	p_sys
op	257:36	0:0	4	->
water	257:38	0:0	4	p_es_video
arg	257:50	257:58	3	p_block
water	257:50	0:0	4	p_block
water	257:59	0:0	2	;
call	258:4	258:35	2	date_Increment
arg	258:20	258:31	3	&p_sys->pcr
op	258:20	0:0	4	&
water	258:21	0:0	4	p_sys
op	258:26	0:0	4	->
water	258:28	0:0	4	pcr
arg	258:33	258:35	3	1
water	258:33	0:0	4	1
water	258:36	0:0	2	;
return	259:4	259:12	2	1
water	259:11	0:0	3	1
func	264:0	273:0	0	static int	Control
params	264:18	0:0	1	
param	264:20	264:36	2	demux_t *	p_demux
param	264:38	264:49	2	int	i_query
param	264:51	264:64	2	va_list	args
stmnts	0:0	272:69	1	
decl	266:4	266:40	2	demux_sys_t	*p_sys
op	266:24	0:0	2	=
water	266:26	0:0	2	p_demux
op	266:33	0:0	2	->
water	266:35	0:0	2	p_sys
decl	268:4	269:76	2	const int64_t	i_bps
op	268:24	0:0	2	=
water	268:26	0:0	2	8
water	268:27	0:0	2	LL
op	268:30	0:0	2	*
water	268:32	0:0	2	p_sys
op	268:37	0:0	2	->
water	268:39	0:0	2	frame_size
op	268:50	0:0	2	*
water	268:52	0:0	2	p_sys
op	268:57	0:0	2	->
water	268:59	0:0	2	pcr
op	268:62	0:0	2	.
water	268:63	0:0	2	i_divider_num
op	268:77	0:0	2	/
water	269:52	0:0	2	p_sys
op	269:57	0:0	2	->
water	269:59	0:0	2	pcr
op	269:62	0:0	2	.
water	269:63	0:0	2	i_divider_den
return	271:4	272:69	2	demux_vaControlHelper(p_demux->s,0,-1,i_bps,p_sys->frame_size,i_query,args)
call	271:11	272:68	3	demux_vaControlHelper
arg	271:34	271:44	4	p_demux->s
water	271:34	0:0	5	p_demux
op	271:41	0:0	5	->
water	271:43	0:0	5	s
arg	271:46	271:47	4	0
water	271:46	0:0	5	0
arg	271:49	271:51	4	-1
op	271:49	0:0	5	-
water	271:50	0:0	5	1
arg	271:53	271:58	4	i_bps
water	271:53	0:0	5	i_bps
arg	272:35	272:52	4	p_sys->frame_size
water	272:35	0:0	5	p_sys
op	272:40	0:0	5	->
water	272:42	0:0	5	frame_size
arg	272:54	272:61	4	i_query
water	272:54	0:0	5	i_query
arg	272:63	272:68	4	args
water	272:63	0:0	5	args
