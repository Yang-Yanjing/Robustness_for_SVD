func	2:0	34:0	0	static int	ControlLockedSetPauseState
params	2:37	0:0	1	
param	2:39	2:54	2	es_out_t *	p_out
param	2:56	2:76	2	bool	b_source_paused
param	2:78	2:91	2	bool	b_paused
param	2:93	2:108	2	mtime_t	i_date
stmnts	0:0	33:16	1	
decl	4:4	4:38	2	es_out_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	p_out
op	4:31	0:0	2	->
water	4:33	0:0	2	p_sys
decl	5:4	5:13	2	int	i_ret
if	6:4	9:4	2	(! p_sys -> b_delayed && ! b_source_paused == ! b_paused)
cond	6:8	6:50	3	! p_sys -> b_delayed && ! b_source_paused == ! b_paused
op	6:8	0:0	4	!
water	6:9	0:0	4	p_sys
op	6:14	0:0	4	->
water	6:16	0:0	4	b_delayed
op	6:26	0:0	4	&&
op	6:29	0:0	4	!
water	6:30	0:0	4	b_source_paused
op	6:46	0:0	4	==
op	6:49	0:0	4	!
water	6:50	0:0	4	b_paused
stmts	7:4	9:4	3	
water	7:4	0:0	4	{
water	8:8	0:0	4	i_ret
op	8:14	0:0	4	=
call	8:16	8:86	4	es_out_SetPauseState
arg	8:38	8:50	5	p_sys->p_out
water	8:38	0:0	6	p_sys
op	8:43	0:0	6	->
water	8:45	0:0	6	p_out
arg	8:52	8:67	5	b_source_paused
water	8:52	0:0	6	b_source_paused
arg	8:69	8:77	5	b_paused
water	8:69	0:0	6	b_paused
arg	8:79	8:86	5	i_date
water	8:79	0:0	6	i_date
water	8:87	0:0	4	;
water	9:4	0:0	4	}
else	10:4	27:4	2
stmts	11:4	27:4	3	
water	11:4	0:0	4	{
water	12:8	0:0	4	i_ret
op	12:14	0:0	4	=
water	12:16	0:0	4	VLC_EGENERIC
water	12:28	0:0	4	;
if	13:8	19:8	4	(! p_sys -> p_input -> p -> b_can_pace_control)
cond	13:12	13:32	5	! p_sys -> p_input -> p -> b_can_pace_control
op	13:12	0:0	6	!
water	13:13	0:0	6	p_sys
op	13:18	0:0	6	->
water	13:20	0:0	6	p_input
op	13:27	0:0	6	->
water	13:29	0:0	6	p
op	13:30	0:0	6	->
water	13:32	0:0	6	b_can_pace_control
stmts	14:8	19:8	5	
water	14:8	0:0	6	{
if	15:12	16:32	6	(! p_sys -> b_delayed)
cond	15:16	15:24	7	! p_sys -> b_delayed
op	15:16	0:0	8	!
water	15:17	0:0	8	p_sys
op	15:22	0:0	8	->
water	15:24	0:0	8	b_delayed
stmts	16:16	16:32	7	
call	16:16	16:31	8	TsStart
arg	16:25	16:31	9	p_out
water	16:25	0:0	10	p_out
water	16:32	0:0	8	;
if	17:12	18:87	6	(p_sys -> b_delayed)
cond	17:16	17:23	7	p_sys -> b_delayed
water	17:16	0:0	8	p_sys
op	17:21	0:0	8	->
water	17:23	0:0	8	b_delayed
stmts	18:16	18:87	7	
water	18:16	0:0	8	i_ret
op	18:22	0:0	8	=
call	18:24	18:86	8	TsChangePause
arg	18:39	18:50	9	p_sys->p_ts
water	18:39	0:0	10	p_sys
op	18:44	0:0	10	->
water	18:46	0:0	10	p_ts
arg	18:52	18:67	9	b_source_paused
water	18:52	0:0	10	b_source_paused
arg	18:69	18:77	9	b_paused
water	18:69	0:0	10	b_paused
arg	18:79	18:86	9	i_date
water	18:79	0:0	10	i_date
water	18:87	0:0	8	;
water	19:8	0:0	6	}
else	20:8	26:8	4
stmts	21:8	26:8	5	
water	21:8	0:0	6	{
call	25:12	25:104	6	msg_Err
arg	25:21	25:35	7	p_sys->p_input
water	25:21	0:0	8	p_sys
op	25:26	0:0	8	->
water	25:28	0:0	8	p_input
arg	25:37	25:104	7	"EsOutTimeshift does not work with streams that have pace control"
water	25:37	0:0	8	"EsOutTimeshift does not work with streams that have pace control"
water	25:105	0:0	6	;
water	26:8	0:0	6	}
water	27:4	0:0	4	}
if	28:4	32:4	2	(! i_ret)
cond	28:8	28:9	3	! i_ret
op	28:8	0:0	4	!
water	28:9	0:0	4	i_ret
stmts	29:4	32:4	3	
water	29:4	0:0	4	{
water	30:8	0:0	4	p_sys
op	30:13	0:0	4	->
water	30:15	0:0	4	b_input_paused_source
op	30:37	0:0	4	=
water	30:39	0:0	4	b_source_paused
water	30:54	0:0	4	;
water	31:8	0:0	4	p_sys
op	31:13	0:0	4	->
water	31:15	0:0	4	b_input_paused
op	31:30	0:0	4	=
water	31:32	0:0	4	b_paused
water	31:40	0:0	4	;
water	32:4	0:0	4	}
return	33:4	33:16	2	i_ret
water	33:11	0:0	3	i_ret
