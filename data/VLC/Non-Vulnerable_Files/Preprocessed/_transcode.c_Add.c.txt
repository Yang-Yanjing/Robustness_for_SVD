func	2:0	70:0	0	static sout_stream_id_sys_t *	Add
params	2:32	0:0	1	
param	2:34	2:57	2	sout_stream_t *	p_stream
param	2:59	2:78	2	es_format_t *	p_fmt
stmnts	0:0	69:15	1	
decl	4:4	4:46	2	sout_stream_sys_t	*p_sys
op	4:29	0:0	2	=
water	4:31	0:0	2	p_stream
op	4:39	0:0	2	->
water	4:41	0:0	2	p_sys
decl	5:4	5:28	2	sout_stream_id_sys_t	*id
water	6:4	0:0	2	id
op	6:7	0:0	2	=
call	6:9	6:51	2	calloc
arg	6:17	6:18	3	1
water	6:17	0:0	4	1
arg	6:20	6:51	3	sizeof(sout_stream_id_sys_t)
op	6:20	0:0	4	sizeof
water	6:26	0:0	4	(
water	6:28	0:0	4	sout_stream_id_sys_t
water	6:49	0:0	4	)
water	6:52	0:0	2	;
if	7:4	8:18	2	(! id)
cond	7:8	7:9	3	! id
op	7:8	0:0	4	!
water	7:9	0:0	4	id
stmts	8:8	8:18	3	
goto	8:8	8:18	4	error
water	8:13	0:0	5	error
water	9:4	0:0	2	id
op	9:6	0:0	2	->
water	9:8	0:0	2	id
op	9:11	0:0	2	=
water	9:13	0:0	2	NULL
water	9:17	0:0	2	;
water	10:4	0:0	2	id
op	10:6	0:0	2	->
water	10:8	0:0	2	p_decoder
op	10:18	0:0	2	=
water	10:20	0:0	2	NULL
water	10:24	0:0	2	;
water	11:4	0:0	2	id
op	11:6	0:0	2	->
water	11:8	0:0	2	p_encoder
op	11:18	0:0	2	=
water	11:20	0:0	2	NULL
water	11:24	0:0	2	;
water	13:4	0:0	2	id
op	13:6	0:0	2	->
water	13:8	0:0	2	p_decoder
op	13:18	0:0	2	=
call	13:20	13:69	2	vlc_object_create
arg	13:39	13:47	3	p_stream
water	13:39	0:0	4	p_stream
arg	13:49	13:69	3	sizeof(decoder_t)
op	13:49	0:0	4	sizeof
water	13:55	0:0	4	(
water	13:57	0:0	4	decoder_t
water	13:67	0:0	4	)
water	13:70	0:0	2	;
if	14:4	15:18	2	(! id -> p_decoder)
cond	14:8	14:13	3	! id -> p_decoder
op	14:8	0:0	4	!
water	14:9	0:0	4	id
op	14:11	0:0	4	->
water	14:13	0:0	4	p_decoder
stmts	15:8	15:18	3	
goto	15:8	15:18	4	error
water	15:13	0:0	5	error
water	16:4	0:0	2	id
op	16:6	0:0	2	->
water	16:8	0:0	2	p_decoder
op	16:17	0:0	2	->
water	16:19	0:0	2	p_module
op	16:28	0:0	2	=
water	16:30	0:0	2	NULL
water	16:34	0:0	2	;
water	17:4	0:0	2	id
op	17:6	0:0	2	->
water	17:8	0:0	2	p_decoder
op	17:17	0:0	2	->
water	17:19	0:0	2	fmt_in
op	17:26	0:0	2	=
op	17:28	0:0	2	*
water	17:29	0:0	2	p_fmt
water	17:34	0:0	2	;
water	18:4	0:0	2	id
op	18:6	0:0	2	->
water	18:8	0:0	2	p_decoder
op	18:17	0:0	2	->
water	18:19	0:0	2	b_pace_control
op	18:34	0:0	2	=
water	18:36	0:0	2	true
water	18:40	0:0	2	;
water	20:4	0:0	2	id
op	20:6	0:0	2	->
water	20:8	0:0	2	p_encoder
op	20:18	0:0	2	=
call	20:20	20:49	2	sout_EncoderCreate
arg	20:40	20:49	3	p_stream
water	20:40	0:0	4	p_stream
water	20:50	0:0	2	;
if	21:4	22:18	2	(! id -> p_encoder)
cond	21:8	21:13	3	! id -> p_encoder
op	21:8	0:0	4	!
water	21:9	0:0	4	id
op	21:11	0:0	4	->
water	21:13	0:0	4	p_encoder
stmts	22:8	22:18	3	
goto	22:8	22:18	4	error
water	22:13	0:0	5	error
water	23:4	0:0	2	id
op	23:6	0:0	2	->
water	23:8	0:0	2	p_encoder
op	23:17	0:0	2	->
water	23:19	0:0	2	p_module
op	23:28	0:0	2	=
water	23:30	0:0	2	NULL
water	23:34	0:0	2	;
call	25:4	25:61	2	es_format_Init
arg	25:20	25:43	3	&id->p_encoder->fmt_out
op	25:20	0:0	4	&
water	25:21	0:0	4	id
op	25:23	0:0	4	->
water	25:25	0:0	4	p_encoder
op	25:34	0:0	4	->
water	25:36	0:0	4	fmt_out
arg	25:45	25:57	3	p_fmt->i_cat
water	25:45	0:0	4	p_fmt
op	25:50	0:0	4	->
water	25:52	0:0	4	i_cat
arg	25:59	25:61	3	0
water	25:59	0:0	4	0
water	25:62	0:0	2	;
water	26:4	0:0	2	id
op	26:6	0:0	2	->
water	26:8	0:0	2	p_encoder
op	26:17	0:0	2	->
water	26:19	0:0	2	fmt_out
op	26:26	0:0	2	.
water	26:27	0:0	2	i_id
op	26:35	0:0	2	=
water	26:37	0:0	2	p_fmt
op	26:42	0:0	2	->
water	26:44	0:0	2	i_id
water	26:48	0:0	2	;
water	27:4	0:0	2	id
op	27:6	0:0	2	->
water	27:8	0:0	2	p_encoder
op	27:17	0:0	2	->
water	27:19	0:0	2	fmt_out
op	27:26	0:0	2	.
water	27:27	0:0	2	i_group
op	27:35	0:0	2	=
water	27:37	0:0	2	p_fmt
op	27:42	0:0	2	->
water	27:44	0:0	2	i_group
water	27:51	0:0	2	;
if	28:4	29:72	2	(p_sys -> psz_alang)
cond	28:8	28:15	3	p_sys -> psz_alang
water	28:8	0:0	4	p_sys
op	28:13	0:0	4	->
water	28:15	0:0	4	psz_alang
stmts	29:8	29:72	3	
water	29:8	0:0	4	id
op	29:10	0:0	4	->
water	29:12	0:0	4	p_encoder
op	29:21	0:0	4	->
water	29:23	0:0	4	fmt_out
op	29:30	0:0	4	.
water	29:31	0:0	4	psz_language
op	29:44	0:0	4	=
call	29:46	29:71	4	strdup
arg	29:54	29:71	5	p_sys->psz_alang
water	29:54	0:0	6	p_sys
op	29:59	0:0	6	->
water	29:61	0:0	6	psz_alang
water	29:72	0:0	4	;
else	30:4	31:75	2
stmts	30:9	31:75	3	
if	30:9	31:75	4	(p_fmt -> psz_language)
cond	30:13	30:20	5	p_fmt -> psz_language
water	30:13	0:0	6	p_fmt
op	30:18	0:0	6	->
water	30:20	0:0	6	psz_language
stmts	31:8	31:75	5	
water	31:8	0:0	6	id
op	31:10	0:0	6	->
water	31:12	0:0	6	p_encoder
op	31:21	0:0	6	->
water	31:23	0:0	6	fmt_out
op	31:30	0:0	6	.
water	31:31	0:0	6	psz_language
op	31:44	0:0	6	=
call	31:46	31:74	6	strdup
arg	31:54	31:74	7	p_fmt->psz_language
water	31:54	0:0	8	p_fmt
op	31:59	0:0	8	->
water	31:61	0:0	8	psz_language
water	31:75	0:0	6	;
decl	32:4	32:16	2	bool	success
if	33:4	34:58	2	(p_fmt -> i_cat == AUDIO_ES && p_sys -> i_acodec)
cond	33:8	33:43	3	p_fmt -> i_cat == AUDIO_ES && p_sys -> i_acodec
water	33:8	0:0	4	p_fmt
op	33:13	0:0	4	->
water	33:15	0:0	4	i_cat
op	33:21	0:0	4	==
water	33:24	0:0	4	AUDIO_ES
op	33:33	0:0	4	&&
water	33:36	0:0	4	p_sys
op	33:41	0:0	4	->
water	33:43	0:0	4	i_acodec
stmts	34:8	34:58	3	
water	34:8	0:0	4	success
op	34:16	0:0	4	=
call	34:18	34:57	4	transcode_audio_add
arg	34:38	34:46	5	p_stream
water	34:38	0:0	6	p_stream
arg	34:48	34:53	5	p_fmt
water	34:48	0:0	6	p_fmt
arg	34:55	34:57	5	id
water	34:55	0:0	6	id
water	34:58	0:0	4	;
else	35:4	36:58	2
stmts	35:9	36:58	3	
if	35:9	36:58	4	(p_fmt -> i_cat == VIDEO_ES && p_sys -> i_vcodec)
cond	35:13	35:48	5	p_fmt -> i_cat == VIDEO_ES && p_sys -> i_vcodec
water	35:13	0:0	6	p_fmt
op	35:18	0:0	6	->
water	35:20	0:0	6	i_cat
op	35:26	0:0	6	==
water	35:29	0:0	6	VIDEO_ES
op	35:38	0:0	6	&&
water	35:41	0:0	6	p_sys
op	35:46	0:0	6	->
water	35:48	0:0	6	i_vcodec
stmts	36:8	36:58	5	
water	36:8	0:0	6	success
op	36:16	0:0	6	=
call	36:18	36:57	6	transcode_video_add
arg	36:38	36:46	7	p_stream
water	36:38	0:0	8	p_stream
arg	36:48	36:53	7	p_fmt
water	36:48	0:0	8	p_fmt
arg	36:55	36:57	7	id
water	36:55	0:0	8	id
water	36:58	0:0	6	;
else	37:4	39:56	2
stmts	37:9	39:56	3	
if	37:9	39:56	4	(( p_fmt -> i_cat == SPU_ES ) && ( p_sys -> i_scodec || p_sys -> b_soverlay ))
cond	37:13	38:52	5	( p_fmt -> i_cat == SPU_ES ) && ( p_sys -> i_scodec || p_sys -> b_soverlay )
water	37:13	0:0	6	(
water	37:15	0:0	6	p_fmt
op	37:20	0:0	6	->
water	37:22	0:0	6	i_cat
op	37:28	0:0	6	==
water	37:31	0:0	6	SPU_ES
water	37:38	0:0	6	)
op	37:40	0:0	6	&&
water	38:13	0:0	6	(
water	38:15	0:0	6	p_sys
op	38:20	0:0	6	->
water	38:22	0:0	6	i_scodec
op	38:31	0:0	6	||
water	38:34	0:0	6	p_sys
op	38:39	0:0	6	->
water	38:41	0:0	6	b_soverlay
water	38:52	0:0	6	)
stmts	39:8	39:56	5	
water	39:8	0:0	6	success
op	39:16	0:0	6	=
call	39:18	39:55	6	transcode_spu_add
arg	39:36	39:44	7	p_stream
water	39:36	0:0	8	p_stream
arg	39:46	39:51	7	p_fmt
water	39:46	0:0	8	p_fmt
arg	39:53	39:55	7	id
water	39:53	0:0	8	id
water	39:56	0:0	6	;
else	40:4	41:56	2
stmts	40:9	41:56	3	
if	40:9	41:56	4	(! p_sys -> b_osd && ( p_sys -> i_osdcodec != 0 || p_sys -> psz_osdenc ))
cond	40:13	40:74	5	! p_sys -> b_osd && ( p_sys -> i_osdcodec != 0 || p_sys -> psz_osdenc )
op	40:13	0:0	6	!
water	40:14	0:0	6	p_sys
op	40:19	0:0	6	->
water	40:21	0:0	6	b_osd
op	40:27	0:0	6	&&
water	40:30	0:0	6	(
water	40:31	0:0	6	p_sys
op	40:36	0:0	6	->
water	40:38	0:0	6	i_osdcodec
op	40:49	0:0	6	!=
water	40:52	0:0	6	0
op	40:54	0:0	6	||
water	40:57	0:0	6	p_sys
op	40:62	0:0	6	->
water	40:64	0:0	6	psz_osdenc
water	40:74	0:0	6	)
stmts	41:8	41:56	5	
water	41:8	0:0	6	success
op	41:16	0:0	6	=
call	41:18	41:55	6	transcode_osd_add
arg	41:36	41:44	7	p_stream
water	41:36	0:0	8	p_stream
arg	41:46	41:51	7	p_fmt
water	41:46	0:0	8	p_fmt
arg	41:53	41:55	7	id
water	41:53	0:0	8	id
water	41:56	0:0	6	;
else	42:4	49:4	2
stmts	43:4	49:4	3	
water	43:4	0:0	4	{
call	44:8	45:40	4	msg_Dbg
arg	44:17	44:25	5	p_stream
water	44:17	0:0	6	p_stream
arg	44:27	44:67	5	"not transcoding a stream (fcc=`%4.4s')"
water	44:27	0:0	6	"not transcoding a stream (fcc=`%4.4s')"
arg	45:17	45:40	5	(char*)&p_fmt->i_codec
water	45:17	0:0	6	(
water	45:18	0:0	6	char
op	45:22	0:0	6	*
water	45:23	0:0	6	)
op	45:24	0:0	6	&
water	45:25	0:0	6	p_fmt
op	45:30	0:0	6	->
water	45:32	0:0	6	i_codec
water	45:41	0:0	4	;
water	46:8	0:0	4	id
op	46:10	0:0	4	->
water	46:12	0:0	4	id
op	46:15	0:0	4	=
call	46:17	46:59	4	sout_StreamIdAdd
arg	46:35	46:51	5	p_stream->p_next
water	46:35	0:0	6	p_stream
op	46:43	0:0	6	->
water	46:45	0:0	6	p_next
arg	46:53	46:59	5	p_fmt
water	46:53	0:0	6	p_fmt
water	46:60	0:0	4	;
water	47:8	0:0	4	id
op	47:10	0:0	4	->
water	47:12	0:0	4	b_transcode
op	47:24	0:0	4	=
water	47:26	0:0	4	false
water	47:31	0:0	4	;
water	48:8	0:0	4	success
op	48:16	0:0	4	=
water	48:18	0:0	4	id
op	48:20	0:0	4	->
water	48:22	0:0	4	id
water	48:24	0:0	4	;
water	49:4	0:0	4	}
if	50:4	51:18	2	(! success)
cond	50:7	50:8	3	! success
op	50:7	0:0	4	!
water	50:8	0:0	4	success
stmts	51:8	51:18	3	
goto	51:8	51:18	4	error
water	51:13	0:0	5	error
return	52:4	52:13	2	id
water	52:11	0:0	3	id
label	53:0	53:5	2	error :
if	54:4	68:4	2	(id)
cond	54:8	54:8	3	id
water	54:8	0:0	4	id
stmts	55:4	68:4	3	
water	55:4	0:0	4	{
if	56:8	60:8	4	(id -> p_decoder)
cond	56:12	56:16	5	id -> p_decoder
water	56:12	0:0	6	id
op	56:14	0:0	6	->
water	56:16	0:0	6	p_decoder
stmts	57:8	60:8	5	
water	57:8	0:0	6	{
call	58:12	58:46	6	vlc_object_release
arg	58:32	58:46	7	id->p_decoder
water	58:32	0:0	8	id
op	58:34	0:0	8	->
water	58:36	0:0	8	p_decoder
water	58:47	0:0	6	;
water	59:12	0:0	6	id
op	59:14	0:0	6	->
water	59:16	0:0	6	p_decoder
op	59:26	0:0	6	=
water	59:28	0:0	6	NULL
water	59:32	0:0	6	;
water	60:8	0:0	6	}
if	61:8	66:8	4	(id -> p_encoder)
cond	61:12	61:16	5	id -> p_encoder
water	61:12	0:0	6	id
op	61:14	0:0	6	->
water	61:16	0:0	6	p_encoder
stmts	62:8	66:8	5	
water	62:8	0:0	6	{
call	63:12	63:53	6	es_format_Clean
arg	63:29	63:53	7	&id->p_encoder->fmt_out
op	63:29	0:0	8	&
water	63:30	0:0	8	id
op	63:32	0:0	8	->
water	63:34	0:0	8	p_encoder
op	63:43	0:0	8	->
water	63:45	0:0	8	fmt_out
water	63:54	0:0	6	;
call	64:12	64:46	6	vlc_object_release
arg	64:32	64:46	7	id->p_encoder
water	64:32	0:0	8	id
op	64:34	0:0	8	->
water	64:36	0:0	8	p_encoder
water	64:47	0:0	6	;
water	65:12	0:0	6	id
op	65:14	0:0	6	->
water	65:16	0:0	6	p_encoder
op	65:26	0:0	6	=
water	65:28	0:0	6	NULL
water	65:32	0:0	6	;
water	66:8	0:0	6	}
call	67:8	67:17	4	free
arg	67:14	67:17	5	id
water	67:14	0:0	6	id
water	67:18	0:0	4	;
water	68:4	0:0	4	}
return	69:4	69:15	2	NULL
water	69:11	0:0	3	NULL
