func	2:0	49:0	0	static OMX_ERRORTYPE	OmxEventHandler
params	2:36	0:0	1	
param	2:38	2:63	2	OMX_HANDLETYPE	omx_handle
param	3:4	3:20	2	OMX_PTR	app_data
param	3:22	3:41	2	OMX_EVENTTYPE	event
param	3:43	3:57	2	OMX_U32	data_1
param	4:4	4:18	2	OMX_U32	data_2
param	4:20	4:39	2	OMX_PTR	event_data
stmnts	0:0	48:24	1	
decl	6:4	6:44	2	decoder_t	*p_dec
op	6:21	0:0	2	=
water	6:23	0:0	2	(
water	6:24	0:0	2	decoder_t
op	6:34	0:0	2	*
water	6:35	0:0	2	)
water	6:36	0:0	2	app_data
decl	7:4	7:39	2	decoder_sys_t	*p_sys
op	7:25	0:0	2	=
water	7:27	0:0	2	p_dec
op	7:32	0:0	2	->
water	7:34	0:0	2	p_sys
decl	8:4	8:18	2	unsigned int	i
water	9:4	0:0	2	(
water	9:5	0:0	2	void
water	9:9	0:0	2	)
water	9:10	0:0	2	omx_handle
water	9:20	0:0	2	;
call	10:4	10:75	2	PrintOmxEvent
arg	10:18	10:40	3	(vlc_object_t*)p_dec
water	10:18	0:0	4	(
water	10:19	0:0	4	vlc_object_t
op	10:32	0:0	4	*
water	10:33	0:0	4	)
water	10:35	0:0	4	p_dec
arg	10:42	10:47	3	event
water	10:42	0:0	4	event
arg	10:49	10:55	3	data_1
water	10:49	0:0	4	data_1
arg	10:57	10:63	3	data_2
water	10:57	0:0	4	data_2
arg	10:65	10:75	3	event_data
water	10:65	0:0	4	event_data
water	10:76	0:0	2	;
switch	11:4	46:4	2	(event)
cond	11:12	11:12	3	event
water	11:12	0:0	4	event
stmts	12:4	46:4	3	
water	12:4	0:0	4	{
label	13:4	13:23	4	case OMX_EventError :
break	15:8	15:13	4	
label	16:4	16:37	4	case OMX_EventPortSettingsChanged :
if	17:8	29:8	4	(data_2 == 0 || data_2 == OMX_IndexParamPortDefinition || data_2 == OMX_IndexParamAudioPcm)
cond	17:12	18:22	5	data_2 == 0 || data_2 == OMX_IndexParamPortDefinition || data_2 == OMX_IndexParamAudioPcm
water	17:12	0:0	6	data_2
op	17:19	0:0	6	==
water	17:22	0:0	6	0
op	17:24	0:0	6	||
water	17:27	0:0	6	data_2
op	17:34	0:0	6	==
water	17:37	0:0	6	OMX_IndexParamPortDefinition
op	17:66	0:0	6	||
water	18:12	0:0	6	data_2
op	18:19	0:0	6	==
water	18:22	0:0	6	OMX_IndexParamAudioPcm
stmts	19:8	29:8	5	
water	19:8	0:0	6	{
decl	20:12	20:42	6	OMX_BUFFERHEADERTYPE	*sentinel
for	21:12	23:58	6	(i = 0 ;i < p_sys -> ports;i ++)
forinit	21:16	21:21	7	i = 0 ;
water	21:16	0:0	8	i
op	21:18	0:0	8	=
water	21:20	0:0	8	0
water	21:21	0:0	8	;
cond	21:23	21:34	7	i < p_sys -> ports
water	21:23	0:0	8	i
op	21:25	0:0	8	<
water	21:27	0:0	8	p_sys
op	21:32	0:0	8	->
water	21:34	0:0	8	ports
forexpr	21:41	21:42	7	i ++
water	21:41	0:0	8	i
op	21:42	0:0	8	++
stmts	22:16	23:58	7	
if	22:16	23:58	8	(p_sys -> p_ports [ i ] . definition . eDir == OMX_DirOutput)
cond	22:19	22:56	9	p_sys -> p_ports [ i ] . definition . eDir == OMX_DirOutput
water	22:19	0:0	10	p_sys
op	22:24	0:0	10	->
water	22:26	0:0	10	p_ports
op	22:33	0:0	10	[
water	22:34	0:0	10	i
op	22:35	0:0	10	]
op	22:36	0:0	10	.
water	22:37	0:0	10	definition
op	22:47	0:0	10	.
water	22:48	0:0	10	eDir
op	22:53	0:0	10	==
water	22:56	0:0	10	OMX_DirOutput
stmts	23:20	23:58	9	
water	23:20	0:0	10	p_sys
op	23:25	0:0	10	->
water	23:27	0:0	10	p_ports
op	23:34	0:0	10	[
water	23:35	0:0	10	i
op	23:36	0:0	10	]
op	23:37	0:0	10	.
water	23:38	0:0	10	b_reconfigure
op	23:52	0:0	10	=
water	23:54	0:0	10	true
water	23:58	0:0	10	;
water	24:12	0:0	6	sentinel
op	24:21	0:0	6	=
call	24:23	24:50	6	calloc
arg	24:30	24:31	7	1
water	24:30	0:0	8	1
arg	24:33	24:50	7	sizeof(*sentinel)
op	24:33	0:0	8	sizeof
water	24:39	0:0	8	(
op	24:40	0:0	8	*
water	24:41	0:0	8	sentinel
water	24:49	0:0	8	)
water	24:51	0:0	6	;
if	25:12	28:12	6	(sentinel)
cond	25:16	25:16	7	sentinel
water	25:16	0:0	8	sentinel
stmts	25:26	28:12	7	
water	25:26	0:0	8	{
water	26:16	0:0	8	sentinel
op	26:24	0:0	8	->
water	26:26	0:0	8	nFlags
op	26:33	0:0	8	=
water	26:35	0:0	8	SENTINEL_FLAG
water	26:48	0:0	8	;
call	27:16	27:54	8	OMX_FIFO_PUT
arg	27:29	27:44	9	&p_sys->in.fifo
op	27:29	0:0	10	&
water	27:30	0:0	10	p_sys
op	27:35	0:0	10	->
water	27:37	0:0	10	in
op	27:39	0:0	10	.
water	27:40	0:0	10	fifo
arg	27:46	27:54	9	sentinel
water	27:46	0:0	10	sentinel
water	27:55	0:0	8	;
water	28:12	0:0	8	}
water	29:8	0:0	6	}
else	30:8	35:8	4
stmts	30:13	35:8	5	
if	30:13	35:8	6	(data_2 == OMX_IndexConfigCommonOutputCrop)
cond	30:17	30:27	7	data_2 == OMX_IndexConfigCommonOutputCrop
water	30:17	0:0	8	data_2
op	30:24	0:0	8	==
water	30:27	0:0	8	OMX_IndexConfigCommonOutputCrop
stmts	31:8	35:8	7	
water	31:8	0:0	8	{
for	32:12	34:57	8	(i = 0 ;i < p_sys -> ports;i ++)
forinit	32:16	32:21	9	i = 0 ;
water	32:16	0:0	10	i
op	32:18	0:0	10	=
water	32:20	0:0	10	0
water	32:21	0:0	10	;
cond	32:23	32:34	9	i < p_sys -> ports
water	32:23	0:0	10	i
op	32:25	0:0	10	<
water	32:27	0:0	10	p_sys
op	32:32	0:0	10	->
water	32:34	0:0	10	ports
forexpr	32:41	32:42	9	i ++
water	32:41	0:0	10	i
op	32:42	0:0	10	++
stmts	33:16	34:57	9	
if	33:16	34:57	10	(p_sys -> p_ports [ i ] . definition . nPortIndex == data_1)
cond	33:19	33:62	11	p_sys -> p_ports [ i ] . definition . nPortIndex == data_1
water	33:19	0:0	12	p_sys
op	33:24	0:0	12	->
water	33:26	0:0	12	p_ports
op	33:33	0:0	12	[
water	33:34	0:0	12	i
op	33:35	0:0	12	]
op	33:36	0:0	12	.
water	33:37	0:0	12	definition
op	33:47	0:0	12	.
water	33:48	0:0	12	nPortIndex
op	33:59	0:0	12	==
water	33:62	0:0	12	data_1
stmts	34:20	34:57	11	
water	34:20	0:0	12	p_sys
op	34:25	0:0	12	->
water	34:27	0:0	12	p_ports
op	34:34	0:0	12	[
water	34:35	0:0	12	i
op	34:36	0:0	12	]
op	34:37	0:0	12	.
water	34:38	0:0	12	b_update_def
op	34:51	0:0	12	=
water	34:53	0:0	12	true
water	34:57	0:0	12	;
water	35:8	0:0	8	}
else	36:8	39:8	4
stmts	37:8	39:8	5	
water	37:8	0:0	6	{
call	38:12	38:80	6	msg_Dbg
arg	38:21	38:26	7	p_dec
water	38:21	0:0	8	p_dec
arg	38:28	38:57	7	"Unhandled setting change %x"
water	38:28	0:0	8	"Unhandled setting change %x"
arg	38:59	38:80	7	(unsignedint)data_2
water	38:59	0:0	8	(
water	38:60	0:0	8	unsigned
water	38:69	0:0	8	int
water	38:72	0:0	8	)
water	38:73	0:0	8	data_2
water	38:81	0:0	6	;
water	39:8	0:0	6	}
break	40:8	40:13	4	
label	41:4	41:38	4	case OMX_EventParamOrConfigChanged :
call	42:8	42:31	4	UpdatePixelAspect
arg	42:26	42:31	5	p_dec
water	42:26	0:0	6	p_dec
water	42:32	0:0	4	;
break	43:8	43:13	4	
label	44:4	44:11	4	default :
break	45:8	45:13	4	
water	46:4	0:0	4	}
call	47:4	47:71	2	PostOmxEvent
arg	47:17	47:36	3	&p_sys->event_queue
op	47:17	0:0	4	&
water	47:18	0:0	4	p_sys
op	47:23	0:0	4	->
water	47:25	0:0	4	event_queue
arg	47:38	47:43	3	event
water	47:38	0:0	4	event
arg	47:45	47:51	3	data_1
water	47:45	0:0	4	data_1
arg	47:53	47:59	3	data_2
water	47:53	0:0	4	data_2
arg	47:61	47:71	3	event_data
water	47:61	0:0	4	event_data
water	47:72	0:0	2	;
return	48:4	48:24	2	OMX_ErrorNone
water	48:11	0:0	3	OMX_ErrorNone
