func	2:0	68:0	0	static void	DarkenField
params	2:23	0:0	1	
param	2:25	2:41	2	picture_t *	p_dst
param	3:25	3:42	2	const int	i_field
param	3:44	3:64	2	const int	i_strength
param	4:25	4:45	2	bool	process_chroma
stmnts	6:4	67:4	1	
call	6:4	6:26	2	assert
arg	6:12	6:26	3	p_dst!=NULL
water	6:12	0:0	4	p_dst
op	6:18	0:0	4	!=
water	6:21	0:0	4	NULL
water	6:27	0:0	2	;
call	7:4	7:41	2	assert
arg	7:12	7:41	3	i_field==0||i_field==1
water	7:12	0:0	4	i_field
op	7:20	0:0	4	==
water	7:23	0:0	4	0
op	7:25	0:0	4	||
water	7:28	0:0	4	i_field
op	7:36	0:0	4	==
water	7:39	0:0	4	1
water	7:42	0:0	2	;
call	8:4	8:47	2	assert
arg	8:12	8:47	3	i_strength>=1&&i_strength<=3
water	8:12	0:0	4	i_strength
op	8:23	0:0	4	>=
water	8:26	0:0	4	1
op	8:28	0:0	4	&&
water	8:31	0:0	4	i_strength
op	8:42	0:0	4	<=
water	8:45	0:0	4	3
water	8:48	0:0	2	;
decl	11:4	11:54	2	const uint8_t	remove_high_u8
op	11:34	0:0	2	=
water	11:36	0:0	2	0
water	11:37	0:0	2	xFF
op	11:41	0:0	2	>>
water	11:44	0:0	2	i_strength
decl	12:4	13:71	2	const uint64_t	remove_high_u64
op	12:35	0:0	2	=
water	12:37	0:0	2	remove_high_u8
call	12:52	13:70	3	*INT64_C
arg	13:52	13:70	4	0x0101010101010101
water	13:52	0:0	5	0
water	13:53	0:0	5	x0101010101010101
decl	19:4	19:25	2	int	i_plane
op	19:16	0:0	2	=
water	19:18	0:0	2	Y_PLANE
decl	20:4	20:30	2	uint8_t	*p_out
water	20:18	0:0	2	,
decl	20:4	20:30	2	uint8_t	*p_out_end
decl	21:4	21:45	2	int	w
op	21:10	0:0	2	=
water	21:12	0:0	2	p_dst
op	21:17	0:0	2	->
water	21:19	0:0	2	p
op	21:20	0:0	2	[
water	21:21	0:0	2	i_plane
op	21:28	0:0	2	]
op	21:29	0:0	2	.
water	21:30	0:0	2	i_visible_pitch
water	22:4	0:0	2	p_out
op	22:10	0:0	2	=
water	22:12	0:0	2	p_dst
op	22:17	0:0	2	->
water	22:19	0:0	2	p
op	22:20	0:0	2	[
water	22:21	0:0	2	i_plane
op	22:28	0:0	2	]
op	22:29	0:0	2	.
water	22:30	0:0	2	p_pixels
water	22:38	0:0	2	;
water	23:4	0:0	2	p_out_end
op	23:14	0:0	2	=
water	23:16	0:0	2	p_out
op	23:22	0:0	2	+
water	23:24	0:0	2	p_dst
op	23:29	0:0	2	->
water	23:31	0:0	2	p
op	23:32	0:0	2	[
water	23:33	0:0	2	i_plane
op	23:40	0:0	2	]
op	23:41	0:0	2	.
water	23:42	0:0	2	i_pitch
op	24:22	0:0	2	*
water	24:24	0:0	2	p_dst
op	24:29	0:0	2	->
water	24:31	0:0	2	p
op	24:32	0:0	2	[
water	24:33	0:0	2	i_plane
op	24:40	0:0	2	]
op	24:41	0:0	2	.
water	24:42	0:0	2	i_visible_lines
water	24:57	0:0	2	;
if	26:4	27:42	2	(i_field == 1)
cond	26:8	26:19	3	i_field == 1
water	26:8	0:0	4	i_field
op	26:16	0:0	4	==
water	26:19	0:0	4	1
stmts	27:8	27:42	3	
water	27:8	0:0	4	p_out
op	27:14	0:0	4	+=
water	27:17	0:0	4	p_dst
op	27:22	0:0	4	->
water	27:24	0:0	4	p
op	27:25	0:0	4	[
water	27:26	0:0	4	i_plane
op	27:33	0:0	4	]
op	27:34	0:0	4	.
water	27:35	0:0	4	i_pitch
water	27:42	0:0	4	;
decl	28:4	28:19	2	int	wm8
op	28:12	0:0	2	=
water	28:14	0:0	2	w
op	28:16	0:0	2	%
water	28:18	0:0	2	8
decl	29:4	29:21	2	int	w8
op	29:12	0:0	2	=
water	29:14	0:0	2	w
op	29:16	0:0	2	-
water	29:18	0:0	2	wm8
for	30:4	40:4	2	(;p_out < p_out_end;p_out += 2 * p_dst -> p [ i_plane ] . i_pitch)
forinit	30:9	30:9	3	;
water	30:9	0:0	4	;
cond	30:11	30:19	3	p_out < p_out_end
water	30:11	0:0	4	p_out
op	30:17	0:0	4	<
water	30:19	0:0	4	p_out_end
forexpr	30:31	30:60	3	p_out += 2 * p_dst -> p [ i_plane ] . i_pitch
water	30:31	0:0	4	p_out
op	30:37	0:0	4	+=
water	30:40	0:0	4	2
op	30:41	0:0	4	*
water	30:42	0:0	4	p_dst
op	30:47	0:0	4	->
water	30:49	0:0	4	p
op	30:50	0:0	4	[
water	30:51	0:0	4	i_plane
op	30:58	0:0	4	]
op	30:59	0:0	4	.
water	30:60	0:0	4	i_pitch
stmts	31:4	40:4	3	
water	31:4	0:0	4	{
decl	32:8	32:40	4	uint64_t	*po
op	32:21	0:0	4	=
water	32:23	0:0	4	(
water	32:24	0:0	4	uint64_t
op	32:33	0:0	4	*
water	32:34	0:0	4	)
water	32:35	0:0	4	p_out
decl	33:8	33:17	4	int	x
op	33:14	0:0	4	=
water	33:16	0:0	4	0
for	34:8	35:63	4	(;x < w8;x += 8 , ++ po)
forinit	34:13	34:13	5	;
water	34:13	0:0	6	;
cond	34:15	34:19	5	x < w8
water	34:15	0:0	6	x
op	34:17	0:0	6	<
water	34:19	0:0	6	w8
forexpr	34:23	34:33	5	x += 8 , ++ po
water	34:23	0:0	6	x
op	34:25	0:0	6	+=
water	34:28	0:0	6	8
water	34:29	0:0	6	,
op	34:31	0:0	6	++
water	34:33	0:0	6	po
stmts	35:12	35:63	5	
water	35:12	0:0	6	(
op	35:13	0:0	6	*
water	35:14	0:0	6	po
water	35:16	0:0	6	)
op	35:18	0:0	6	=
water	35:20	0:0	6	(
water	35:22	0:0	6	(
water	35:23	0:0	6	(
op	35:24	0:0	6	*
water	35:25	0:0	6	po
water	35:27	0:0	6	)
op	35:29	0:0	6	>>
water	35:32	0:0	6	i_strength
water	35:42	0:0	6	)
op	35:44	0:0	6	&
water	35:46	0:0	6	remove_high_u64
water	35:62	0:0	6	)
water	35:63	0:0	6	;
decl	37:8	37:40	4	uint8_t	*po_temp
op	37:25	0:0	4	=
water	37:27	0:0	4	(
water	37:28	0:0	4	uint8_t
op	37:36	0:0	4	*
water	37:37	0:0	4	)
water	37:38	0:0	4	po
for	38:8	39:72	4	(;x < w;++ x , ++ po_temp)
forinit	38:13	38:13	5	;
water	38:13	0:0	6	;
cond	38:15	38:19	5	x < w
water	38:15	0:0	6	x
op	38:17	0:0	6	<
water	38:19	0:0	6	w
forexpr	38:22	38:29	5	++ x , ++ po_temp
op	38:22	0:0	6	++
water	38:24	0:0	6	x
water	38:25	0:0	6	,
op	38:27	0:0	6	++
water	38:29	0:0	6	po_temp
stmts	39:12	39:72	5	
water	39:12	0:0	6	(
op	39:13	0:0	6	*
water	39:14	0:0	6	po_temp
water	39:21	0:0	6	)
op	39:23	0:0	6	=
water	39:25	0:0	6	(
water	39:27	0:0	6	(
water	39:28	0:0	6	(
op	39:29	0:0	6	*
water	39:30	0:0	6	po_temp
water	39:37	0:0	6	)
op	39:39	0:0	6	>>
water	39:42	0:0	6	i_strength
water	39:52	0:0	6	)
op	39:54	0:0	6	&
water	39:56	0:0	6	remove_high_u8
water	39:71	0:0	6	)
water	39:72	0:0	6	;
water	40:4	0:0	4	}
if	46:4	67:4	2	(process_chroma)
cond	46:8	46:8	3	process_chroma
water	46:8	0:0	4	process_chroma
stmts	47:4	67:4	3	
water	47:4	0:0	4	{
for	48:8	66:8	4	(i_plane ++ ;i_plane < p_dst -> i_planes;i_plane ++)
forinit	48:13	48:48	5	i_plane ++ ;
water	48:13	0:0	6	i_plane
op	48:20	0:0	6	++
water	48:48	0:0	6	;
cond	49:13	49:30	5	i_plane < p_dst -> i_planes
water	49:13	0:0	6	i_plane
op	49:21	0:0	6	<
water	49:23	0:0	6	p_dst
op	49:28	0:0	6	->
water	49:30	0:0	6	i_planes
forexpr	50:13	50:20	5	i_plane ++
water	50:13	0:0	6	i_plane
op	50:20	0:0	6	++
stmts	51:8	66:8	5	
water	51:8	0:0	6	{
decl	52:12	52:53	6	int	w
op	52:18	0:0	6	=
water	52:20	0:0	6	p_dst
op	52:25	0:0	6	->
water	52:27	0:0	6	p
op	52:28	0:0	6	[
water	52:29	0:0	6	i_plane
op	52:36	0:0	6	]
op	52:37	0:0	6	.
water	52:38	0:0	6	i_visible_pitch
water	53:12	0:0	6	p_out
op	53:18	0:0	6	=
water	53:20	0:0	6	p_dst
op	53:25	0:0	6	->
water	53:27	0:0	6	p
op	53:28	0:0	6	[
water	53:29	0:0	6	i_plane
op	53:36	0:0	6	]
op	53:37	0:0	6	.
water	53:38	0:0	6	p_pixels
water	53:46	0:0	6	;
water	54:12	0:0	6	p_out_end
op	54:22	0:0	6	=
water	54:24	0:0	6	p_out
op	54:30	0:0	6	+
water	54:32	0:0	6	p_dst
op	54:37	0:0	6	->
water	54:39	0:0	6	p
op	54:40	0:0	6	[
water	54:41	0:0	6	i_plane
op	54:48	0:0	6	]
op	54:49	0:0	6	.
water	54:50	0:0	6	i_pitch
op	55:30	0:0	6	*
water	55:32	0:0	6	p_dst
op	55:37	0:0	6	->
water	55:39	0:0	6	p
op	55:40	0:0	6	[
water	55:41	0:0	6	i_plane
op	55:48	0:0	6	]
op	55:49	0:0	6	.
water	55:50	0:0	6	i_visible_lines
water	55:65	0:0	6	;
if	57:12	58:50	6	(i_field == 1)
cond	57:16	57:27	7	i_field == 1
water	57:16	0:0	8	i_field
op	57:24	0:0	8	==
water	57:27	0:0	8	1
stmts	58:16	58:50	7	
water	58:16	0:0	8	p_out
op	58:22	0:0	8	+=
water	58:25	0:0	8	p_dst
op	58:30	0:0	8	->
water	58:32	0:0	8	p
op	58:33	0:0	8	[
water	58:34	0:0	8	i_plane
op	58:41	0:0	8	]
op	58:42	0:0	8	.
water	58:43	0:0	8	i_pitch
water	58:50	0:0	8	;
for	59:12	65:12	6	(;p_out < p_out_end;p_out += 2 * p_dst -> p [ i_plane ] . i_pitch)
forinit	59:17	59:17	7	;
water	59:17	0:0	8	;
cond	59:19	59:27	7	p_out < p_out_end
water	59:19	0:0	8	p_out
op	59:25	0:0	8	<
water	59:27	0:0	8	p_out_end
forexpr	59:39	59:68	7	p_out += 2 * p_dst -> p [ i_plane ] . i_pitch
water	59:39	0:0	8	p_out
op	59:45	0:0	8	+=
water	59:48	0:0	8	2
op	59:49	0:0	8	*
water	59:50	0:0	8	p_dst
op	59:55	0:0	8	->
water	59:57	0:0	8	p
op	59:58	0:0	8	[
water	59:59	0:0	8	i_plane
op	59:66	0:0	8	]
op	59:67	0:0	8	.
water	59:68	0:0	8	i_pitch
stmts	60:12	65:12	7	
water	60:12	0:0	8	{
decl	62:16	62:35	8	uint8_t	*po
op	62:28	0:0	8	=
water	62:30	0:0	8	p_out
for	63:16	64:71	8	( int x = 0 ;x < w;++ x , ++ po)
forinit	0:0	63:30	9	 int x = 0 ;
decl	63:21	63:30	10	int	x
op	63:27	0:0	10	=
water	63:29	0:0	10	0
cond	63:32	63:36	9	x < w
water	63:32	0:0	10	x
op	63:34	0:0	10	<
water	63:36	0:0	10	w
forexpr	63:39	63:46	9	++ x , ++ po
op	63:39	0:0	10	++
water	63:41	0:0	10	x
water	63:42	0:0	10	,
op	63:44	0:0	10	++
water	63:46	0:0	10	po
stmts	64:20	64:71	9	
water	64:20	0:0	10	(
op	64:21	0:0	10	*
water	64:22	0:0	10	po
water	64:24	0:0	10	)
op	64:26	0:0	10	=
water	64:28	0:0	10	128
op	64:32	0:0	10	+
water	64:34	0:0	10	(
water	64:36	0:0	10	(
water	64:37	0:0	10	(
op	64:38	0:0	10	*
water	64:39	0:0	10	po
water	64:41	0:0	10	)
op	64:43	0:0	10	-
water	64:45	0:0	10	128
water	64:48	0:0	10	)
op	64:50	0:0	10	/
water	64:52	0:0	10	(
water	64:53	0:0	10	1
op	64:55	0:0	10	<<
water	64:58	0:0	10	i_strength
water	64:68	0:0	10	)
water	64:70	0:0	10	)
water	64:71	0:0	10	;
water	65:12	0:0	8	}
water	66:8	0:0	6	}
water	67:4	0:0	4	}
