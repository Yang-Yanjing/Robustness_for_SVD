func	2:0	141:0	0	static decoder_t *	CreateDecoder
params	2:32	0:0	1	
param	2:34	2:56	2	vlc_object_t *	p_parent
param	3:34	3:57	2	input_thread_t *	p_input
param	4:34	4:50	2	es_format_t *	fmt
param	4:52	4:69	2	bool	b_packetizer
param	5:34	5:62	2	input_resource_t *	p_resource
param	6:34	6:58	2	sout_instance_t *	p_sout
stmnts	0:0	140:16	1	
decl	8:4	8:20	2	decoder_t	*p_dec
decl	9:4	9:32	2	decoder_owner_sys_t	*p_owner
decl	10:4	10:30	2	es_format_t	null_es_format
water	11:4	0:0	2	p_dec
op	11:10	0:0	2	=
call	11:12	11:69	2	vlc_custom_create
arg	11:31	11:39	3	p_parent
water	11:31	0:0	4	p_parent
arg	11:41	11:57	3	sizeof(*p_dec)
op	11:41	0:0	4	sizeof
water	11:47	0:0	4	(
op	11:49	0:0	4	*
water	11:50	0:0	4	p_dec
water	11:56	0:0	4	)
arg	11:59	11:69	3	"decoder"
water	11:59	0:0	4	"decoder"
water	11:70	0:0	2	;
if	12:4	13:19	2	(p_dec == NULL)
cond	12:8	12:17	3	p_dec == NULL
water	12:8	0:0	4	p_dec
op	12:14	0:0	4	==
water	12:17	0:0	4	NULL
stmts	13:8	13:19	3	
return	13:8	13:19	4	NULL
water	13:15	0:0	5	NULL
water	14:4	0:0	2	p_dec
op	14:9	0:0	2	->
water	14:11	0:0	2	pf_decode_audio
op	14:27	0:0	2	=
water	14:29	0:0	2	NULL
water	14:33	0:0	2	;
water	15:4	0:0	2	p_dec
op	15:9	0:0	2	->
water	15:11	0:0	2	pf_decode_video
op	15:27	0:0	2	=
water	15:29	0:0	2	NULL
water	15:33	0:0	2	;
water	16:4	0:0	2	p_dec
op	16:9	0:0	2	->
water	16:11	0:0	2	pf_decode_sub
op	16:25	0:0	2	=
water	16:27	0:0	2	NULL
water	16:31	0:0	2	;
water	17:4	0:0	2	p_dec
op	17:9	0:0	2	->
water	17:11	0:0	2	pf_get_cc
op	17:21	0:0	2	=
water	17:23	0:0	2	NULL
water	17:27	0:0	2	;
water	18:4	0:0	2	p_dec
op	18:9	0:0	2	->
water	18:11	0:0	2	pf_packetize
op	18:24	0:0	2	=
water	18:26	0:0	2	NULL
water	18:30	0:0	2	;
water	20:4	0:0	2	p_dec
op	20:9	0:0	2	->
water	20:11	0:0	2	p_module
op	20:20	0:0	2	=
water	20:22	0:0	2	NULL
water	20:26	0:0	2	;
call	21:4	21:52	2	memset
arg	21:12	21:27	3	&null_es_format
op	21:12	0:0	4	&
water	21:13	0:0	4	null_es_format
arg	21:29	21:30	3	0
water	21:29	0:0	4	0
arg	21:32	21:52	3	sizeof(es_format_t)
op	21:32	0:0	4	sizeof
water	21:38	0:0	4	(
water	21:39	0:0	4	es_format_t
water	21:50	0:0	4	)
water	21:53	0:0	2	;
call	22:4	22:40	2	es_format_Copy
arg	22:20	22:34	3	&p_dec->fmt_in
op	22:20	0:0	4	&
water	22:21	0:0	4	p_dec
op	22:26	0:0	4	->
water	22:28	0:0	4	fmt_in
arg	22:36	22:40	3	fmt
water	22:36	0:0	4	fmt
water	22:41	0:0	2	;
call	23:4	23:53	2	es_format_Copy
arg	23:20	23:35	3	&p_dec->fmt_out
op	23:20	0:0	4	&
water	23:21	0:0	4	p_dec
op	23:26	0:0	4	->
water	23:28	0:0	4	fmt_out
arg	23:37	23:53	3	&null_es_format
op	23:37	0:0	4	&
water	23:38	0:0	4	null_es_format
water	23:54	0:0	2	;
water	24:4	0:0	2	p_dec
op	24:9	0:0	2	->
water	24:11	0:0	2	p_description
op	24:25	0:0	2	=
water	24:27	0:0	2	NULL
water	24:31	0:0	2	;
water	26:4	0:0	2	p_dec
op	26:9	0:0	2	->
water	26:11	0:0	2	p_owner
op	26:19	0:0	2	=
water	26:21	0:0	2	p_owner
op	26:29	0:0	2	=
call	26:31	26:69	2	malloc
arg	26:39	26:69	3	sizeof(decoder_owner_sys_t)
op	26:39	0:0	4	sizeof
water	26:45	0:0	4	(
water	26:47	0:0	4	decoder_owner_sys_t
water	26:67	0:0	4	)
water	26:70	0:0	2	;
if	27:4	31:4	2	(unlikely (p_owner == NULL ))
cond	27:8	27:32	3	unlikely (p_owner == NULL )
call	27:8	27:32	4	unlikely
arg	27:17	27:32	5	p_owner==NULL
water	27:17	0:0	6	p_owner
op	27:25	0:0	6	==
water	27:28	0:0	6	NULL
stmts	28:4	31:4	3	
water	28:4	0:0	4	{
call	29:8	29:34	4	vlc_object_release
arg	29:28	29:34	5	p_dec
water	29:28	0:0	6	p_dec
water	29:35	0:0	4	;
return	30:8	30:19	4	NULL
water	30:15	0:0	5	NULL
water	31:4	0:0	4	}
water	32:4	0:0	2	p_owner
op	32:11	0:0	2	->
water	32:13	0:0	2	i_preroll_end
op	32:27	0:0	2	=
water	32:29	0:0	2	VLC_TS_INVALID
water	32:43	0:0	2	;
water	33:4	0:0	2	p_owner
op	33:11	0:0	2	->
water	33:13	0:0	2	i_last_rate
op	33:25	0:0	2	=
water	33:27	0:0	2	INPUT_RATE_DEFAULT
water	33:45	0:0	2	;
water	34:4	0:0	2	p_owner
op	34:11	0:0	2	->
water	34:13	0:0	2	p_input
op	34:21	0:0	2	=
water	34:23	0:0	2	p_input
water	34:30	0:0	2	;
water	35:4	0:0	2	p_owner
op	35:11	0:0	2	->
water	35:13	0:0	2	p_resource
op	35:24	0:0	2	=
water	35:26	0:0	2	p_resource
water	35:36	0:0	2	;
water	36:4	0:0	2	p_owner
op	36:11	0:0	2	->
water	36:13	0:0	2	p_aout
op	36:20	0:0	2	=
water	36:22	0:0	2	NULL
water	36:26	0:0	2	;
water	37:4	0:0	2	p_owner
op	37:11	0:0	2	->
water	37:13	0:0	2	p_vout
op	37:20	0:0	2	=
water	37:22	0:0	2	NULL
water	37:26	0:0	2	;
water	38:4	0:0	2	p_owner
op	38:11	0:0	2	->
water	38:13	0:0	2	p_spu_vout
op	38:24	0:0	2	=
water	38:26	0:0	2	NULL
water	38:30	0:0	2	;
water	39:4	0:0	2	p_owner
op	39:11	0:0	2	->
water	39:13	0:0	2	i_spu_channel
op	39:27	0:0	2	=
water	39:29	0:0	2	0
water	39:30	0:0	2	;
water	40:4	0:0	2	p_owner
op	40:11	0:0	2	->
water	40:13	0:0	2	i_spu_order
op	40:25	0:0	2	=
water	40:27	0:0	2	0
water	40:28	0:0	2	;
water	41:4	0:0	2	p_owner
op	41:11	0:0	2	->
water	41:13	0:0	2	p_sout
op	41:20	0:0	2	=
water	41:22	0:0	2	p_sout
water	41:28	0:0	2	;
water	42:4	0:0	2	p_owner
op	42:11	0:0	2	->
water	42:13	0:0	2	p_sout_input
op	42:26	0:0	2	=
water	42:28	0:0	2	NULL
water	42:32	0:0	2	;
water	43:4	0:0	2	p_owner
op	43:11	0:0	2	->
water	43:13	0:0	2	p_packetizer
op	43:26	0:0	2	=
water	43:28	0:0	2	NULL
water	43:32	0:0	2	;
water	44:4	0:0	2	p_owner
op	44:11	0:0	2	->
water	44:13	0:0	2	b_packetizer
op	44:26	0:0	2	=
water	44:28	0:0	2	b_packetizer
water	44:40	0:0	2	;
water	46:4	0:0	2	p_owner
op	46:11	0:0	2	->
water	46:13	0:0	2	p_fifo
op	46:20	0:0	2	=
call	46:22	46:36	2	block_FifoNew
water	46:37	0:0	2	;
if	47:4	52:4	2	(unlikely (p_owner -> p_fifo == NULL ))
cond	47:8	47:40	3	unlikely (p_owner -> p_fifo == NULL )
call	47:8	47:40	4	unlikely
arg	47:17	47:40	5	p_owner->p_fifo==NULL
water	47:17	0:0	6	p_owner
op	47:24	0:0	6	->
water	47:26	0:0	6	p_fifo
op	47:33	0:0	6	==
water	47:36	0:0	6	NULL
stmts	48:4	52:4	3	
water	48:4	0:0	4	{
call	49:8	49:22	4	free
arg	49:14	49:22	5	p_owner
water	49:14	0:0	6	p_owner
water	49:23	0:0	4	;
call	50:8	50:34	4	vlc_object_release
arg	50:28	50:34	5	p_dec
water	50:28	0:0	6	p_dec
water	50:35	0:0	4	;
return	51:8	51:19	4	NULL
water	51:15	0:0	5	NULL
water	52:4	0:0	4	}
water	54:4	0:0	2	p_dec
op	54:9	0:0	2	->
water	54:11	0:0	2	pf_aout_format_update
op	54:33	0:0	2	=
water	54:35	0:0	2	aout_update_format
water	54:53	0:0	2	;
water	55:4	0:0	2	p_dec
op	55:9	0:0	2	->
water	55:11	0:0	2	pf_vout_buffer_new
op	55:30	0:0	2	=
water	55:32	0:0	2	vout_new_buffer
water	55:47	0:0	2	;
water	56:4	0:0	2	p_dec
op	56:9	0:0	2	->
water	56:11	0:0	2	pf_vout_buffer_del
op	56:30	0:0	2	=
water	56:32	0:0	2	vout_del_buffer
water	56:47	0:0	2	;
water	57:4	0:0	2	p_dec
op	57:9	0:0	2	->
water	57:11	0:0	2	pf_picture_link
op	57:30	0:0	2	=
water	57:32	0:0	2	vout_link_picture
water	57:49	0:0	2	;
water	58:4	0:0	2	p_dec
op	58:9	0:0	2	->
water	58:11	0:0	2	pf_picture_unlink
op	58:30	0:0	2	=
water	58:32	0:0	2	vout_unlink_picture
water	58:51	0:0	2	;
water	59:4	0:0	2	p_dec
op	59:9	0:0	2	->
water	59:11	0:0	2	pf_spu_buffer_new
op	59:30	0:0	2	=
water	59:32	0:0	2	spu_new_buffer
water	59:46	0:0	2	;
water	60:4	0:0	2	p_dec
op	60:9	0:0	2	->
water	60:11	0:0	2	pf_spu_buffer_del
op	60:30	0:0	2	=
water	60:32	0:0	2	spu_del_buffer
water	60:46	0:0	2	;
water	62:4	0:0	2	p_dec
op	62:9	0:0	2	->
water	62:11	0:0	2	pf_get_attachments
op	62:31	0:0	2	=
water	62:33	0:0	2	DecoderGetInputAttachments
water	62:59	0:0	2	;
water	63:4	0:0	2	p_dec
op	63:9	0:0	2	->
water	63:11	0:0	2	pf_get_display_date
op	63:31	0:0	2	=
water	63:33	0:0	2	DecoderGetDisplayDate
water	63:54	0:0	2	;
water	64:4	0:0	2	p_dec
op	64:9	0:0	2	->
water	64:11	0:0	2	pf_get_display_rate
op	64:31	0:0	2	=
water	64:33	0:0	2	DecoderGetDisplayRate
water	64:54	0:0	2	;
if	66:4	67:74	2	(! b_packetizer)
cond	66:8	66:9	3	! b_packetizer
op	66:8	0:0	4	!
water	66:9	0:0	4	b_packetizer
stmts	67:8	67:74	3	
water	67:8	0:0	4	p_dec
op	67:13	0:0	4	->
water	67:15	0:0	4	p_module
op	67:24	0:0	4	=
call	67:26	67:73	4	module_need
arg	67:39	67:44	5	p_dec
water	67:39	0:0	6	p_dec
arg	67:46	67:55	5	"decoder"
water	67:46	0:0	6	"decoder"
arg	67:57	67:65	5	"$codec"
water	67:57	0:0	6	"$codec"
arg	67:67	67:73	5	false
water	67:67	0:0	6	false
water	67:74	0:0	4	;
else	68:4	69:82	2
stmts	69:8	69:82	3	
water	69:8	0:0	4	p_dec
op	69:13	0:0	4	->
water	69:15	0:0	4	p_module
op	69:24	0:0	4	=
call	69:26	69:81	4	module_need
arg	69:39	69:44	5	p_dec
water	69:39	0:0	6	p_dec
arg	69:46	69:58	5	"packetizer"
water	69:46	0:0	6	"packetizer"
arg	69:60	69:73	5	"$packetizer"
water	69:60	0:0	6	"$packetizer"
arg	69:75	69:81	5	false
water	69:75	0:0	6	false
water	69:82	0:0	4	;
if	71:4	92:4	2	(! b_packetizer && p_dec -> b_need_packetized && ! p_dec -> fmt_in . b_packetized)
cond	71:8	72:51	3	! b_packetizer && p_dec -> b_need_packetized && ! p_dec -> fmt_in . b_packetized
op	71:8	0:0	4	!
water	71:9	0:0	4	b_packetizer
op	71:22	0:0	4	&&
water	72:8	0:0	4	p_dec
op	72:13	0:0	4	->
water	72:15	0:0	4	b_need_packetized
op	72:33	0:0	4	&&
op	72:36	0:0	4	!
water	72:37	0:0	4	p_dec
op	72:42	0:0	4	->
water	72:44	0:0	4	fmt_in
op	72:50	0:0	4	.
water	72:51	0:0	4	b_packetized
stmts	73:4	92:4	3	
water	73:4	0:0	4	{
water	74:8	0:0	4	p_owner
op	74:15	0:0	4	->
water	74:17	0:0	4	p_packetizer
op	74:30	0:0	4	=
call	75:12	75:75	4	vlc_custom_create
arg	75:31	75:39	5	p_parent
water	75:31	0:0	6	p_parent
arg	75:41	75:60	5	sizeof(decoder_t)
op	75:41	0:0	6	sizeof
water	75:47	0:0	6	(
water	75:49	0:0	6	decoder_t
water	75:59	0:0	6	)
arg	75:62	75:75	5	"packetizer"
water	75:62	0:0	6	"packetizer"
water	75:76	0:0	4	;
if	76:8	91:8	4	(p_owner -> p_packetizer)
cond	76:12	76:21	5	p_owner -> p_packetizer
water	76:12	0:0	6	p_owner
op	76:19	0:0	6	->
water	76:21	0:0	6	p_packetizer
stmts	77:8	91:8	5	
water	77:8	0:0	6	{
call	78:12	79:43	6	es_format_Copy
arg	78:28	78:58	7	&p_owner->p_packetizer->fmt_in
op	78:28	0:0	8	&
water	78:29	0:0	8	p_owner
op	78:36	0:0	8	->
water	78:38	0:0	8	p_packetizer
op	78:50	0:0	8	->
water	78:52	0:0	8	fmt_in
arg	79:28	79:43	7	&p_dec->fmt_in
op	79:28	0:0	8	&
water	79:29	0:0	8	p_dec
op	79:34	0:0	8	->
water	79:36	0:0	8	fmt_in
water	79:44	0:0	6	;
call	80:12	81:44	6	es_format_Copy
arg	80:28	80:59	7	&p_owner->p_packetizer->fmt_out
op	80:28	0:0	8	&
water	80:29	0:0	8	p_owner
op	80:36	0:0	8	->
water	80:38	0:0	8	p_packetizer
op	80:50	0:0	8	->
water	80:52	0:0	8	fmt_out
arg	81:28	81:44	7	&null_es_format
op	81:28	0:0	8	&
water	81:29	0:0	8	null_es_format
water	81:45	0:0	6	;
water	82:12	0:0	6	p_owner
op	82:19	0:0	6	->
water	82:21	0:0	6	p_packetizer
op	82:33	0:0	6	->
water	82:35	0:0	6	p_module
op	82:44	0:0	6	=
call	83:16	84:64	6	module_need
arg	83:29	83:50	7	p_owner->p_packetizer
water	83:29	0:0	8	p_owner
op	83:36	0:0	8	->
water	83:38	0:0	8	p_packetizer
arg	84:29	84:41	7	"packetizer"
water	84:29	0:0	8	"packetizer"
arg	84:43	84:56	7	"$packetizer"
water	84:43	0:0	8	"$packetizer"
arg	84:58	84:64	7	false
water	84:58	0:0	8	false
water	84:65	0:0	6	;
if	85:12	90:12	6	(! p_owner -> p_packetizer -> p_module)
cond	85:16	85:40	7	! p_owner -> p_packetizer -> p_module
op	85:16	0:0	8	!
water	85:17	0:0	8	p_owner
op	85:24	0:0	8	->
water	85:26	0:0	8	p_packetizer
op	85:38	0:0	8	->
water	85:40	0:0	8	p_module
stmts	86:12	90:12	7	
water	86:12	0:0	8	{
call	87:16	87:64	8	es_format_Clean
arg	87:33	87:64	9	&p_owner->p_packetizer->fmt_in
op	87:33	0:0	10	&
water	87:34	0:0	10	p_owner
op	87:41	0:0	10	->
water	87:43	0:0	10	p_packetizer
op	87:55	0:0	10	->
water	87:57	0:0	10	fmt_in
water	87:65	0:0	8	;
call	88:16	88:58	8	vlc_object_release
arg	88:36	88:58	9	p_owner->p_packetizer
water	88:36	0:0	10	p_owner
op	88:43	0:0	10	->
water	88:45	0:0	10	p_packetizer
water	88:59	0:0	8	;
water	89:16	0:0	8	p_owner
op	89:23	0:0	8	->
water	89:25	0:0	8	p_packetizer
op	89:38	0:0	8	=
water	89:40	0:0	8	NULL
water	89:44	0:0	8	;
water	90:12	0:0	8	}
water	91:8	0:0	6	}
water	92:4	0:0	4	}
if	94:4	109:4	2	(fmt -> i_cat == AUDIO_ES)
cond	94:8	94:22	3	fmt -> i_cat == AUDIO_ES
water	94:8	0:0	4	fmt
op	94:11	0:0	4	->
water	94:13	0:0	4	i_cat
op	94:19	0:0	4	==
water	94:22	0:0	4	AUDIO_ES
stmts	95:4	109:4	3	
water	95:4	0:0	4	{
for	96:8	108:8	4	(unsigned i = 0 ;i < AUDIO_REPLAY_GAIN_MAX;i ++)
forinit	96:13	96:27	5	unsigned i = 0 ;
water	96:13	0:0	6	unsigned
water	96:22	0:0	6	i
op	96:24	0:0	6	=
water	96:26	0:0	6	0
water	96:27	0:0	6	;
cond	96:29	96:33	5	i < AUDIO_REPLAY_GAIN_MAX
water	96:29	0:0	6	i
op	96:31	0:0	6	<
water	96:33	0:0	6	AUDIO_REPLAY_GAIN_MAX
forexpr	96:56	96:57	5	i ++
water	96:56	0:0	6	i
op	96:57	0:0	6	++
stmts	97:8	108:8	5	
water	97:8	0:0	6	{
if	98:12	102:12	6	(! p_dec -> fmt_out . audio_replay_gain . pb_peak [ i ])
cond	98:16	98:59	7	! p_dec -> fmt_out . audio_replay_gain . pb_peak [ i ]
op	98:16	0:0	8	!
water	98:17	0:0	8	p_dec
op	98:22	0:0	8	->
water	98:24	0:0	8	fmt_out
op	98:31	0:0	8	.
water	98:32	0:0	8	audio_replay_gain
op	98:49	0:0	8	.
water	98:50	0:0	8	pb_peak
op	98:57	0:0	8	[
water	98:58	0:0	8	i
op	98:59	0:0	8	]
stmts	99:12	102:12	7	
water	99:12	0:0	8	{
water	100:16	0:0	8	p_dec
op	100:21	0:0	8	->
water	100:23	0:0	8	fmt_out
op	100:30	0:0	8	.
water	100:31	0:0	8	audio_replay_gain
op	100:48	0:0	8	.
water	100:49	0:0	8	pb_peak
op	100:56	0:0	8	[
water	100:57	0:0	8	i
op	100:58	0:0	8	]
op	100:60	0:0	8	=
water	100:62	0:0	8	fmt
op	100:65	0:0	8	->
water	100:67	0:0	8	audio_replay_gain
op	100:84	0:0	8	.
water	100:85	0:0	8	pb_peak
op	100:92	0:0	8	[
water	100:93	0:0	8	i
op	100:94	0:0	8	]
water	100:95	0:0	8	;
water	101:16	0:0	8	p_dec
op	101:21	0:0	8	->
water	101:23	0:0	8	fmt_out
op	101:30	0:0	8	.
water	101:31	0:0	8	audio_replay_gain
op	101:48	0:0	8	.
water	101:49	0:0	8	pf_peak
op	101:56	0:0	8	[
water	101:57	0:0	8	i
op	101:58	0:0	8	]
op	101:60	0:0	8	=
water	101:62	0:0	8	fmt
op	101:65	0:0	8	->
water	101:67	0:0	8	audio_replay_gain
op	101:84	0:0	8	.
water	101:85	0:0	8	pf_peak
op	101:92	0:0	8	[
water	101:93	0:0	8	i
op	101:94	0:0	8	]
water	101:95	0:0	8	;
water	102:12	0:0	8	}
if	103:12	107:12	6	(! p_dec -> fmt_out . audio_replay_gain . pb_gain [ i ])
cond	103:16	103:59	7	! p_dec -> fmt_out . audio_replay_gain . pb_gain [ i ]
op	103:16	0:0	8	!
water	103:17	0:0	8	p_dec
op	103:22	0:0	8	->
water	103:24	0:0	8	fmt_out
op	103:31	0:0	8	.
water	103:32	0:0	8	audio_replay_gain
op	103:49	0:0	8	.
water	103:50	0:0	8	pb_gain
op	103:57	0:0	8	[
water	103:58	0:0	8	i
op	103:59	0:0	8	]
stmts	104:12	107:12	7	
water	104:12	0:0	8	{
water	105:16	0:0	8	p_dec
op	105:21	0:0	8	->
water	105:23	0:0	8	fmt_out
op	105:30	0:0	8	.
water	105:31	0:0	8	audio_replay_gain
op	105:48	0:0	8	.
water	105:49	0:0	8	pb_gain
op	105:56	0:0	8	[
water	105:57	0:0	8	i
op	105:58	0:0	8	]
op	105:60	0:0	8	=
water	105:62	0:0	8	fmt
op	105:65	0:0	8	->
water	105:67	0:0	8	audio_replay_gain
op	105:84	0:0	8	.
water	105:85	0:0	8	pb_gain
op	105:92	0:0	8	[
water	105:93	0:0	8	i
op	105:94	0:0	8	]
water	105:95	0:0	8	;
water	106:16	0:0	8	p_dec
op	106:21	0:0	8	->
water	106:23	0:0	8	fmt_out
op	106:30	0:0	8	.
water	106:31	0:0	8	audio_replay_gain
op	106:48	0:0	8	.
water	106:49	0:0	8	pf_gain
op	106:56	0:0	8	[
water	106:57	0:0	8	i
op	106:58	0:0	8	]
op	106:60	0:0	8	=
water	106:62	0:0	8	fmt
op	106:65	0:0	8	->
water	106:67	0:0	8	audio_replay_gain
op	106:84	0:0	8	.
water	106:85	0:0	8	pf_gain
op	106:92	0:0	8	[
water	106:93	0:0	8	i
op	106:94	0:0	8	]
water	106:95	0:0	8	;
water	107:12	0:0	8	}
water	108:8	0:0	6	}
water	109:4	0:0	4	}
call	111:4	111:35	2	vlc_mutex_init
arg	111:20	111:35	3	&p_owner->lock
op	111:20	0:0	4	&
water	111:21	0:0	4	p_owner
op	111:28	0:0	4	->
water	111:30	0:0	4	lock
water	111:36	0:0	2	;
call	112:4	112:42	2	vlc_cond_init
arg	112:19	112:42	3	&p_owner->wait_request
op	112:19	0:0	4	&
water	112:20	0:0	4	p_owner
op	112:27	0:0	4	->
water	112:29	0:0	4	wait_request
water	112:43	0:0	2	;
call	113:4	113:46	2	vlc_cond_init
arg	113:19	113:46	3	&p_owner->wait_acknowledge
op	113:19	0:0	4	&
water	113:20	0:0	4	p_owner
op	113:27	0:0	4	->
water	113:29	0:0	4	wait_acknowledge
water	113:47	0:0	2	;
water	114:4	0:0	2	p_owner
op	114:11	0:0	2	->
water	114:13	0:0	2	b_fmt_description
op	114:31	0:0	2	=
water	114:33	0:0	2	false
water	114:38	0:0	2	;
call	115:4	115:61	2	es_format_Init
arg	115:20	115:45	3	&p_owner->fmt_description
op	115:20	0:0	4	&
water	115:21	0:0	4	p_owner
op	115:28	0:0	4	->
water	115:30	0:0	4	fmt_description
arg	115:47	115:57	3	UNKNOWN_ES
water	115:47	0:0	4	UNKNOWN_ES
arg	115:59	115:61	3	0
water	115:59	0:0	4	0
water	115:62	0:0	2	;
water	116:4	0:0	2	p_owner
op	116:11	0:0	2	->
water	116:13	0:0	2	p_description
op	116:27	0:0	2	=
water	116:29	0:0	2	NULL
water	116:33	0:0	2	;
water	117:4	0:0	2	p_owner
op	117:11	0:0	2	->
water	117:13	0:0	2	b_exit
op	117:20	0:0	2	=
water	117:22	0:0	2	false
water	117:27	0:0	2	;
water	118:4	0:0	2	p_owner
op	118:11	0:0	2	->
water	118:13	0:0	2	b_paused
op	118:22	0:0	2	=
water	118:24	0:0	2	false
water	118:29	0:0	2	;
water	119:4	0:0	2	p_owner
op	119:11	0:0	2	->
water	119:13	0:0	2	pause
op	119:18	0:0	2	.
water	119:19	0:0	2	i_date
op	119:26	0:0	2	=
water	119:28	0:0	2	VLC_TS_INVALID
water	119:42	0:0	2	;
water	120:4	0:0	2	p_owner
op	120:11	0:0	2	->
water	120:13	0:0	2	pause
op	120:18	0:0	2	.
water	120:19	0:0	2	i_ignore
op	120:28	0:0	2	=
water	120:30	0:0	2	0
water	120:31	0:0	2	;
water	121:4	0:0	2	p_owner
op	121:11	0:0	2	->
water	121:13	0:0	2	b_waiting
op	121:23	0:0	2	=
water	121:25	0:0	2	false
water	121:30	0:0	2	;
water	122:4	0:0	2	p_owner
op	122:11	0:0	2	->
water	122:13	0:0	2	b_first
op	122:21	0:0	2	=
water	122:23	0:0	2	true
water	122:27	0:0	2	;
water	123:4	0:0	2	p_owner
op	123:11	0:0	2	->
water	123:13	0:0	2	b_has_data
op	123:24	0:0	2	=
water	123:26	0:0	2	false
water	123:31	0:0	2	;
water	124:4	0:0	2	p_owner
op	124:11	0:0	2	->
water	124:13	0:0	2	b_flushing
op	124:24	0:0	2	=
water	124:26	0:0	2	false
water	124:31	0:0	2	;
water	126:4	0:0	2	p_owner
op	126:11	0:0	2	->
water	126:13	0:0	2	cc
op	126:15	0:0	2	.
water	126:16	0:0	2	b_supported
op	126:28	0:0	2	=
water	126:30	0:0	2	false
water	126:35	0:0	2	;
if	127:4	133:4	2	(! b_packetizer)
cond	127:8	127:9	3	! b_packetizer
op	127:8	0:0	4	!
water	127:9	0:0	4	b_packetizer
stmts	128:4	133:4	3	
water	128:4	0:0	4	{
if	129:8	130:42	4	(p_owner -> p_packetizer && p_owner -> p_packetizer -> pf_get_cc)
cond	129:12	129:60	5	p_owner -> p_packetizer && p_owner -> p_packetizer -> pf_get_cc
water	129:12	0:0	6	p_owner
op	129:19	0:0	6	->
water	129:21	0:0	6	p_packetizer
op	129:34	0:0	6	&&
water	129:37	0:0	6	p_owner
op	129:44	0:0	6	->
water	129:46	0:0	6	p_packetizer
op	129:58	0:0	6	->
water	129:60	0:0	6	pf_get_cc
stmts	130:12	130:42	5	
water	130:12	0:0	6	p_owner
op	130:19	0:0	6	->
water	130:21	0:0	6	cc
op	130:23	0:0	6	.
water	130:24	0:0	6	b_supported
op	130:36	0:0	6	=
water	130:38	0:0	6	true
water	130:42	0:0	6	;
if	131:8	132:42	4	(p_dec -> pf_get_cc)
cond	131:12	131:19	5	p_dec -> pf_get_cc
water	131:12	0:0	6	p_dec
op	131:17	0:0	6	->
water	131:19	0:0	6	pf_get_cc
stmts	132:12	132:42	5	
water	132:12	0:0	6	p_owner
op	132:19	0:0	6	->
water	132:21	0:0	6	cc
op	132:23	0:0	6	.
water	132:24	0:0	6	b_supported
op	132:36	0:0	6	=
water	132:38	0:0	6	true
water	132:42	0:0	6	;
water	133:4	0:0	4	}
for	134:4	138:4	2	(unsigned i = 0 ;i < 4;i ++)
forinit	134:9	134:23	3	unsigned i = 0 ;
water	134:9	0:0	4	unsigned
water	134:18	0:0	4	i
op	134:20	0:0	4	=
water	134:22	0:0	4	0
water	134:23	0:0	4	;
cond	134:25	134:29	3	i < 4
water	134:25	0:0	4	i
op	134:27	0:0	4	<
water	134:29	0:0	4	4
forexpr	134:32	134:33	3	i ++
water	134:32	0:0	4	i
op	134:33	0:0	4	++
stmts	135:4	138:4	3	
water	135:4	0:0	4	{
water	136:8	0:0	4	p_owner
op	136:15	0:0	4	->
water	136:17	0:0	4	cc
op	136:19	0:0	4	.
water	136:20	0:0	4	pb_present
op	136:30	0:0	4	[
water	136:31	0:0	4	i
op	136:32	0:0	4	]
op	136:34	0:0	4	=
water	136:36	0:0	4	false
water	136:41	0:0	4	;
water	137:8	0:0	4	p_owner
op	137:15	0:0	4	->
water	137:17	0:0	4	cc
op	137:19	0:0	4	.
water	137:20	0:0	4	pp_decoder
op	137:30	0:0	4	[
water	137:31	0:0	4	i
op	137:32	0:0	4	]
op	137:34	0:0	4	=
water	137:36	0:0	4	NULL
water	137:40	0:0	4	;
water	138:4	0:0	4	}
water	139:4	0:0	2	p_owner
op	139:11	0:0	2	->
water	139:13	0:0	2	i_ts_delay
op	139:24	0:0	2	=
water	139:26	0:0	2	0
water	139:27	0:0	2	;
return	140:4	140:16	2	p_dec
water	140:11	0:0	3	p_dec
