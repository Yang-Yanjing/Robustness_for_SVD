func	1:0	337:0	0	static bool	OggCreateHeaders
params	1:28	0:0	1	
param	1:30	1:48	2	sout_mux_t *	p_mux
stmnts	0:0	336:15	1	
decl	3:4	3:25	2	block_t	*p_hdr
op	3:19	0:0	2	=
water	3:21	0:0	2	NULL
decl	4:4	4:24	2	block_t	*p_og
op	4:18	0:0	2	=
water	4:20	0:0	2	NULL
decl	5:4	5:17	2	ogg_packet	op
decl	6:4	6:26	2	ogg_stream_t	*p_stream
decl	7:4	7:40	2	sout_mux_sys_t	*p_sys
op	7:26	0:0	2	=
water	7:28	0:0	2	p_mux
op	7:33	0:0	2	->
water	7:35	0:0	2	p_sys
decl	8:4	8:9	2	int	i
if	9:4	14:4	2	(sout_AccessOutControl (p_mux -> p_access ,ACCESS_OUT_CAN_SEEK ,& p_sys -> skeleton . b_create ))
cond	9:8	11:57	3	sout_AccessOutControl (p_mux -> p_access ,ACCESS_OUT_CAN_SEEK ,& p_sys -> skeleton . b_create )
call	9:8	11:57	4	sout_AccessOutControl
arg	9:31	9:46	5	p_mux->p_access
water	9:31	0:0	6	p_mux
op	9:36	0:0	6	->
water	9:38	0:0	6	p_access
arg	10:31	10:50	5	ACCESS_OUT_CAN_SEEK
water	10:31	0:0	6	ACCESS_OUT_CAN_SEEK
arg	11:31	11:57	5	&p_sys->skeleton.b_create
op	11:31	0:0	6	&
water	11:32	0:0	6	p_sys
op	11:37	0:0	6	->
water	11:39	0:0	6	skeleton
op	11:47	0:0	6	.
water	11:48	0:0	6	b_create
stmts	12:4	14:4	3	
water	12:4	0:0	4	{
water	13:8	0:0	4	p_sys
op	13:13	0:0	4	->
water	13:15	0:0	4	skeleton
op	13:23	0:0	4	.
water	13:24	0:0	4	b_create
op	13:33	0:0	4	=
water	13:35	0:0	4	false
water	13:40	0:0	4	;
water	14:4	0:0	4	}
water	15:4	0:0	2	p_sys
op	15:9	0:0	2	->
water	15:11	0:0	2	skeleton
op	15:19	0:0	2	.
water	15:20	0:0	2	b_create
op	15:29	0:0	2	&=
op	15:32	0:0	2	!
op	15:33	0:0	2	!
water	15:35	0:0	2	p_mux
op	15:40	0:0	2	->
water	15:42	0:0	2	i_nb_inputs
water	15:53	0:0	2	;
if	17:4	20:4	2	(p_mux -> i_nb_inputs == 1 && p_mux -> pp_inputs [ 0 ] -> p_fmt -> i_cat == AUDIO_ES)
cond	17:9	17:73	3	p_mux -> i_nb_inputs == 1 && p_mux -> pp_inputs [ 0 ] -> p_fmt -> i_cat == AUDIO_ES
water	17:9	0:0	4	p_mux
op	17:14	0:0	4	->
water	17:16	0:0	4	i_nb_inputs
op	17:28	0:0	4	==
water	17:31	0:0	4	1
op	17:33	0:0	4	&&
water	17:36	0:0	4	p_mux
op	17:41	0:0	4	->
water	17:43	0:0	4	pp_inputs
op	17:52	0:0	4	[
water	17:53	0:0	4	0
op	17:54	0:0	4	]
op	17:55	0:0	4	->
water	17:57	0:0	4	p_fmt
op	17:62	0:0	4	->
water	17:64	0:0	4	i_cat
op	17:70	0:0	4	==
water	17:73	0:0	4	AUDIO_ES
stmts	18:4	20:4	3	
water	18:4	0:0	4	{
water	19:8	0:0	4	p_sys
op	19:13	0:0	4	->
water	19:15	0:0	4	skeleton
op	19:23	0:0	4	.
water	19:24	0:0	4	b_create
op	19:33	0:0	4	=
water	19:35	0:0	4	false
water	19:40	0:0	4	;
water	20:4	0:0	4	}
else	21:4	33:4	2
stmts	22:4	33:4	3	
water	22:4	0:0	4	{
for	23:8	32:8	4	( int i = 0 ;i < p_mux -> i_nb_inputs;i ++)
forinit	0:0	23:21	5	 int i = 0 ;
decl	23:14	23:21	6	int	i
op	23:19	0:0	6	=
water	23:20	0:0	6	0
cond	23:23	23:33	5	i < p_mux -> i_nb_inputs
water	23:23	0:0	6	i
op	23:24	0:0	6	<
water	23:26	0:0	6	p_mux
op	23:31	0:0	6	->
water	23:33	0:0	6	i_nb_inputs
forexpr	23:46	23:47	5	i ++
water	23:46	0:0	6	i
op	23:47	0:0	6	++
stmts	24:8	32:8	5	
water	24:8	0:0	6	{
water	25:12	0:0	6	p_stream
op	25:21	0:0	6	=
water	25:23	0:0	6	(
water	25:24	0:0	6	ogg_stream_t
op	25:36	0:0	6	*
water	25:37	0:0	6	)
water	25:39	0:0	6	p_mux
op	25:44	0:0	6	->
water	25:46	0:0	6	pp_inputs
op	25:55	0:0	6	[
water	25:56	0:0	6	i
op	25:57	0:0	6	]
op	25:58	0:0	6	->
water	25:60	0:0	6	p_sys
water	25:65	0:0	6	;
if	26:12	31:12	6	(p_stream -> p_oggds_header)
cond	26:17	26:27	7	p_stream -> p_oggds_header
water	26:17	0:0	8	p_stream
op	26:25	0:0	8	->
water	26:27	0:0	8	p_oggds_header
stmts	27:12	31:12	7	
water	27:12	0:0	8	{
water	29:16	0:0	8	p_sys
op	29:21	0:0	8	->
water	29:23	0:0	8	skeleton
op	29:31	0:0	8	.
water	29:32	0:0	8	b_create
op	29:41	0:0	8	=
water	29:43	0:0	8	false
water	29:48	0:0	8	;
break	30:16	30:21	8	
water	31:12	0:0	8	}
water	32:8	0:0	6	}
water	33:4	0:0	4	}
if	35:4	53:4	2	(p_sys -> skeleton . b_create && ! p_sys -> skeleton . b_head_done)
cond	35:9	35:54	3	p_sys -> skeleton . b_create && ! p_sys -> skeleton . b_head_done
water	35:9	0:0	4	p_sys
op	35:14	0:0	4	->
water	35:16	0:0	4	skeleton
op	35:24	0:0	4	.
water	35:25	0:0	4	b_create
op	35:34	0:0	4	&&
op	35:37	0:0	4	!
water	35:38	0:0	4	p_sys
op	35:43	0:0	4	->
water	35:45	0:0	4	skeleton
op	35:53	0:0	4	.
water	35:54	0:0	4	b_head_done
stmts	36:4	53:4	3	
water	36:4	0:0	4	{
call	37:8	37:55	4	msg_Dbg
arg	37:17	37:22	5	p_mux
water	37:17	0:0	6	p_mux
arg	37:24	37:55	5	"creating header for skeleton"
water	37:24	0:0	6	"creating header for skeleton"
water	37:56	0:0	4	;
water	38:8	0:0	4	p_sys
op	38:13	0:0	4	->
water	38:15	0:0	4	skeleton
op	38:23	0:0	4	.
water	38:24	0:0	4	i_serial_no
op	38:36	0:0	4	=
water	38:38	0:0	4	p_sys
op	38:43	0:0	4	->
water	38:45	0:0	4	i_next_serial_no
op	38:61	0:0	4	++
water	38:63	0:0	4	;
call	39:8	39:74	4	ogg_stream_init
arg	39:25	39:44	5	&p_sys->skeleton.os
op	39:25	0:0	6	&
water	39:26	0:0	6	p_sys
op	39:31	0:0	6	->
water	39:33	0:0	6	skeleton
op	39:41	0:0	6	.
water	39:42	0:0	6	os
arg	39:46	39:74	5	p_sys->skeleton.i_serial_no
water	39:46	0:0	6	p_sys
op	39:51	0:0	6	->
water	39:53	0:0	6	skeleton
op	39:61	0:0	6	.
water	39:62	0:0	6	i_serial_no
water	39:75	0:0	4	;
water	40:8	0:0	4	op
op	40:10	0:0	4	.
water	40:11	0:0	4	bytes
op	40:17	0:0	4	=
water	40:19	0:0	4	80
water	40:21	0:0	4	;
water	41:8	0:0	4	op
op	41:10	0:0	4	.
water	41:11	0:0	4	packet
op	41:18	0:0	4	=
call	41:20	41:40	4	calloc
arg	41:28	41:29	5	1
water	41:28	0:0	6	1
arg	41:31	41:40	5	op.bytes
water	41:31	0:0	6	op
op	41:33	0:0	6	.
water	41:34	0:0	6	bytes
water	41:41	0:0	4	;
if	42:8	42:45	4	(op . packet == NULL)
cond	42:13	42:26	5	op . packet == NULL
water	42:13	0:0	6	op
op	42:15	0:0	6	.
water	42:16	0:0	6	packet
op	42:23	0:0	6	==
water	42:26	0:0	6	NULL
stmts	42:33	42:45	5	
return	42:33	42:45	6	false
water	42:40	0:0	7	false
water	43:8	0:0	4	op
op	43:10	0:0	4	.
water	43:11	0:0	4	b_o_s
op	43:17	0:0	4	=
water	43:19	0:0	4	1
water	43:20	0:0	4	;
water	44:8	0:0	4	op
op	44:10	0:0	4	.
water	44:11	0:0	4	e_o_s
op	44:17	0:0	4	=
water	44:19	0:0	4	0
water	44:20	0:0	4	;
water	45:8	0:0	4	op
op	45:10	0:0	4	.
water	45:11	0:0	4	granulepos
op	45:22	0:0	4	=
water	45:24	0:0	4	0
water	45:25	0:0	4	;
water	46:8	0:0	4	op
op	46:10	0:0	4	.
water	46:11	0:0	4	packetno
op	46:20	0:0	4	=
water	46:22	0:0	4	0
water	46:23	0:0	4	;
call	47:8	47:49	4	OggFillSkeletonFishead
arg	47:32	47:41	5	op.packet
water	47:32	0:0	6	op
op	47:34	0:0	6	.
water	47:35	0:0	6	packet
arg	47:43	47:49	5	p_mux
water	47:43	0:0	6	p_mux
water	47:50	0:0	4	;
call	48:8	48:54	4	ogg_stream_packetin
arg	48:29	48:48	5	&p_sys->skeleton.os
op	48:29	0:0	6	&
water	48:30	0:0	6	p_sys
op	48:35	0:0	6	->
water	48:37	0:0	6	skeleton
op	48:45	0:0	6	.
water	48:46	0:0	6	os
arg	48:50	48:54	5	&op
op	48:50	0:0	6	&
water	48:51	0:0	6	op
water	48:55	0:0	4	;
water	49:8	0:0	4	p_og
op	49:13	0:0	4	=
call	49:15	49:61	4	OggStreamFlush
arg	49:31	49:36	5	p_mux
water	49:31	0:0	6	p_mux
arg	49:38	49:57	5	&p_sys->skeleton.os
op	49:38	0:0	6	&
water	49:39	0:0	6	p_sys
op	49:44	0:0	6	->
water	49:46	0:0	6	skeleton
op	49:54	0:0	6	.
water	49:55	0:0	6	os
arg	49:59	49:61	5	0
water	49:59	0:0	6	0
water	49:62	0:0	4	;
call	50:8	50:40	4	block_ChainAppend
arg	50:27	50:33	5	&p_hdr
op	50:27	0:0	6	&
water	50:28	0:0	6	p_hdr
arg	50:35	50:40	5	p_og
water	50:35	0:0	6	p_og
water	50:41	0:0	4	;
water	51:8	0:0	4	p_sys
op	51:13	0:0	4	->
water	51:15	0:0	4	skeleton
op	51:23	0:0	4	.
water	51:24	0:0	4	b_head_done
op	51:36	0:0	4	=
water	51:38	0:0	4	true
water	51:42	0:0	4	;
water	52:8	0:0	4	p_sys
op	52:13	0:0	4	->
water	52:15	0:0	4	skeleton
op	52:23	0:0	4	.
water	52:24	0:0	4	i_fishead_offset
op	52:41	0:0	4	=
water	52:43	0:0	4	p_sys
op	52:48	0:0	4	->
water	52:50	0:0	4	i_pos
water	52:55	0:0	4	;
water	53:4	0:0	4	}
for	56:4	160:4	2	( int pass = 0 ;pass < 2;pass ++)
forinit	0:0	56:21	3	 int pass = 0 ;
decl	56:9	56:21	4	int	pass
op	56:18	0:0	4	=
water	56:20	0:0	4	0
cond	56:23	56:30	3	pass < 2
water	56:23	0:0	4	pass
op	56:28	0:0	4	<
water	56:30	0:0	4	2
forexpr	56:33	56:37	3	pass ++
water	56:33	0:0	4	pass
op	56:37	0:0	4	++
stmts	57:4	160:4	3	
water	57:4	0:0	4	{
for	58:8	159:8	4	(i = 0 ;i < p_mux -> i_nb_inputs;i ++)
forinit	58:13	58:18	5	i = 0 ;
water	58:13	0:0	6	i
op	58:15	0:0	6	=
water	58:17	0:0	6	0
water	58:18	0:0	6	;
cond	58:20	58:31	5	i < p_mux -> i_nb_inputs
water	58:20	0:0	6	i
op	58:22	0:0	6	<
water	58:24	0:0	6	p_mux
op	58:29	0:0	6	->
water	58:31	0:0	6	i_nb_inputs
forexpr	58:44	58:45	5	i ++
water	58:44	0:0	6	i
op	58:45	0:0	6	++
stmts	59:8	159:8	5	
water	59:8	0:0	6	{
decl	60:12	60:55	6	sout_input_t	*p_input
op	60:34	0:0	6	=
water	60:36	0:0	6	p_mux
op	60:41	0:0	6	->
water	60:43	0:0	6	pp_inputs
op	60:52	0:0	6	[
water	60:53	0:0	6	i
op	60:54	0:0	6	]
water	61:12	0:0	6	p_stream
op	61:21	0:0	6	=
water	61:23	0:0	6	(
water	61:24	0:0	6	ogg_stream_t
op	61:36	0:0	6	*
water	61:37	0:0	6	)
water	61:38	0:0	6	p_input
op	61:45	0:0	6	->
water	61:47	0:0	6	p_sys
water	61:52	0:0	6	;
decl	62:12	62:108	6	bool	video
op	62:23	0:0	6	=
water	62:25	0:0	6	(
water	62:27	0:0	6	p_stream
op	62:35	0:0	6	->
water	62:37	0:0	6	i_fourcc
op	62:46	0:0	6	==
water	62:49	0:0	6	VLC_CODEC_THEORA
op	62:66	0:0	6	||
water	62:69	0:0	6	p_stream
op	62:77	0:0	6	->
water	62:79	0:0	6	i_fourcc
op	62:88	0:0	6	==
water	62:91	0:0	6	VLC_CODEC_DIRAC
water	62:107	0:0	6	)
if	63:12	64:24	6	(( ( pass == 0 && ! video ) || ( pass == 1 && video ) ))
cond	63:16	63:68	7	( ( pass == 0 && ! video ) || ( pass == 1 && video ) )
water	63:16	0:0	8	(
water	63:18	0:0	8	(
water	63:20	0:0	8	pass
op	63:25	0:0	8	==
water	63:28	0:0	8	0
op	63:30	0:0	8	&&
op	63:33	0:0	8	!
water	63:34	0:0	8	video
water	63:40	0:0	8	)
op	63:42	0:0	8	||
water	63:45	0:0	8	(
water	63:47	0:0	8	pass
op	63:52	0:0	8	==
water	63:55	0:0	8	1
op	63:57	0:0	8	&&
water	63:60	0:0	8	video
water	63:66	0:0	8	)
water	63:68	0:0	8	)
stmts	64:16	64:24	7	
continue	64:16	64:24	8	
call	65:12	66:49	6	msg_Dbg
arg	65:21	65:26	7	p_mux
water	65:21	0:0	8	p_mux
arg	65:28	65:55	7	"creating header for %4.4s"
water	65:28	0:0	8	"creating header for %4.4s"
arg	66:21	66:49	7	(char*)&p_stream->i_fourcc
water	66:21	0:0	8	(
water	66:22	0:0	8	char
op	66:27	0:0	8	*
water	66:28	0:0	8	)
op	66:29	0:0	8	&
water	66:30	0:0	8	p_stream
op	66:38	0:0	8	->
water	66:40	0:0	8	i_fourcc
water	66:50	0:0	6	;
call	67:12	67:66	6	ogg_stream_init
arg	67:29	67:42	7	&p_stream->os
op	67:29	0:0	8	&
water	67:30	0:0	8	p_stream
op	67:38	0:0	8	->
water	67:40	0:0	8	os
arg	67:44	67:66	7	p_stream->i_serial_no
water	67:44	0:0	8	p_stream
op	67:52	0:0	8	->
water	67:54	0:0	8	i_serial_no
water	67:67	0:0	6	;
water	68:12	0:0	6	p_stream
op	68:20	0:0	6	->
water	68:22	0:0	6	b_new
op	68:28	0:0	6	=
water	68:30	0:0	6	false
water	68:35	0:0	6	;
water	69:12	0:0	6	p_stream
op	69:20	0:0	6	->
water	69:22	0:0	6	i_packet_no
op	69:34	0:0	6	=
water	69:36	0:0	6	0
water	69:37	0:0	6	;
water	70:12	0:0	6	p_stream
op	70:20	0:0	6	->
water	70:22	0:0	6	b_started
op	70:32	0:0	6	=
water	70:34	0:0	6	true
water	70:38	0:0	6	;
if	71:12	103:12	6	(p_stream -> i_fourcc == VLC_CODEC_VORBIS || p_stream -> i_fourcc == VLC_CODEC_SPEEX || p_stream -> i_fourcc == VLC_CODEC_OPUS || p_stream -> i_fourcc == VLC_CODEC_THEORA)
cond	71:16	74:38	7	p_stream -> i_fourcc == VLC_CODEC_VORBIS || p_stream -> i_fourcc == VLC_CODEC_SPEEX || p_stream -> i_fourcc == VLC_CODEC_OPUS || p_stream -> i_fourcc == VLC_CODEC_THEORA
water	71:16	0:0	8	p_stream
op	71:24	0:0	8	->
water	71:26	0:0	8	i_fourcc
op	71:35	0:0	8	==
water	71:38	0:0	8	VLC_CODEC_VORBIS
op	71:55	0:0	8	||
water	72:16	0:0	8	p_stream
op	72:24	0:0	8	->
water	72:26	0:0	8	i_fourcc
op	72:35	0:0	8	==
water	72:38	0:0	8	VLC_CODEC_SPEEX
op	72:54	0:0	8	||
water	73:16	0:0	8	p_stream
op	73:24	0:0	8	->
water	73:26	0:0	8	i_fourcc
op	73:35	0:0	8	==
water	73:38	0:0	8	VLC_CODEC_OPUS
op	73:53	0:0	8	||
water	74:16	0:0	8	p_stream
op	74:24	0:0	8	->
water	74:26	0:0	8	i_fourcc
op	74:35	0:0	8	==
water	74:38	0:0	8	VLC_CODEC_THEORA
stmts	75:12	103:12	7	
water	75:12	0:0	8	{
water	77:16	0:0	8	unsigned
water	77:25	0:0	8	pi_size
op	77:32	0:0	8	[
water	77:33	0:0	8	XIPH_MAX_HEADER_COUNT
op	77:54	0:0	8	]
water	77:55	0:0	8	;
decl	78:16	78:56	8	void	*pp_data[XIPH_MAX_HEADER_COUNT]
water	79:16	0:0	8	unsigned
water	79:25	0:0	8	i_count
water	79:32	0:0	8	;
if	80:16	86:16	8	(xiph_SplitHeaders (pi_size ,pp_data ,& i_count ,p_input -> p_fmt -> i_extra ,p_input -> p_fmt -> p_extra ))
cond	80:20	81:88	9	xiph_SplitHeaders (pi_size ,pp_data ,& i_count ,p_input -> p_fmt -> i_extra ,p_input -> p_fmt -> p_extra )
call	80:20	81:88	10	xiph_SplitHeaders
arg	80:39	80:46	11	pi_size
water	80:39	0:0	12	pi_size
arg	80:48	80:55	11	pp_data
water	80:48	0:0	12	pp_data
arg	80:57	80:65	11	&i_count
op	80:57	0:0	12	&
water	80:58	0:0	12	i_count
arg	81:39	81:62	11	p_input->p_fmt->i_extra
water	81:39	0:0	12	p_input
op	81:46	0:0	12	->
water	81:48	0:0	12	p_fmt
op	81:53	0:0	12	->
water	81:55	0:0	12	i_extra
arg	81:64	81:88	11	p_input->p_fmt->p_extra
water	81:64	0:0	12	p_input
op	81:71	0:0	12	->
water	81:73	0:0	12	p_fmt
op	81:78	0:0	12	->
water	81:80	0:0	12	p_extra
stmts	82:16	86:16	9	
water	82:16	0:0	10	{
water	83:20	0:0	10	i_count
op	83:28	0:0	10	=
water	83:30	0:0	10	0
water	83:31	0:0	10	;
water	84:20	0:0	10	pi_size
op	84:27	0:0	10	[
water	84:28	0:0	10	0
op	84:29	0:0	10	]
op	84:31	0:0	10	=
water	84:33	0:0	10	0
water	84:34	0:0	10	;
water	85:20	0:0	10	pp_data
op	85:27	0:0	10	[
water	85:28	0:0	10	0
op	85:29	0:0	10	]
op	85:31	0:0	10	=
water	85:33	0:0	10	NULL
water	85:37	0:0	10	;
water	86:16	0:0	10	}
water	87:16	0:0	8	op
op	87:18	0:0	8	.
water	87:19	0:0	8	bytes
op	87:26	0:0	8	=
water	87:28	0:0	8	pi_size
op	87:35	0:0	8	[
water	87:36	0:0	8	0
op	87:37	0:0	8	]
water	87:38	0:0	8	;
water	88:16	0:0	8	op
op	88:18	0:0	8	.
water	88:19	0:0	8	packet
op	88:26	0:0	8	=
water	88:28	0:0	8	pp_data
op	88:35	0:0	8	[
water	88:36	0:0	8	0
op	88:37	0:0	8	]
water	88:38	0:0	8	;
if	89:16	90:60	8	(pi_size [ 0 ] <= 0)
cond	89:20	89:34	9	pi_size [ 0 ] <= 0
water	89:20	0:0	10	pi_size
op	89:27	0:0	10	[
water	89:28	0:0	10	0
op	89:29	0:0	10	]
op	89:31	0:0	10	<=
water	89:34	0:0	10	0
stmts	90:20	90:60	9	
call	90:20	90:59	10	msg_Err
arg	90:29	90:34	11	p_mux
water	90:29	0:0	12	p_mux
arg	90:36	90:59	11	"header data corrupted"
water	90:36	0:0	12	"header data corrupted"
water	90:60	0:0	10	;
water	91:16	0:0	8	op
op	91:18	0:0	8	.
water	91:19	0:0	8	b_o_s
op	91:26	0:0	8	=
water	91:28	0:0	8	1
water	91:29	0:0	8	;
water	92:16	0:0	8	op
op	92:18	0:0	8	.
water	92:19	0:0	8	e_o_s
op	92:26	0:0	8	=
water	92:28	0:0	8	0
water	92:29	0:0	8	;
water	93:16	0:0	8	op
op	93:18	0:0	8	.
water	93:19	0:0	8	granulepos
op	93:30	0:0	8	=
water	93:32	0:0	8	0
water	93:33	0:0	8	;
water	94:16	0:0	8	op
op	94:18	0:0	8	.
water	94:19	0:0	8	packetno
op	94:28	0:0	8	=
water	94:30	0:0	8	p_stream
op	94:38	0:0	8	->
water	94:40	0:0	8	i_packet_no
op	94:51	0:0	8	++
water	94:53	0:0	8	;
call	95:16	95:56	8	ogg_stream_packetin
arg	95:37	95:50	9	&p_stream->os
op	95:37	0:0	10	&
water	95:38	0:0	10	p_stream
op	95:46	0:0	10	->
water	95:48	0:0	10	os
arg	95:52	95:56	9	&op
op	95:52	0:0	10	&
water	95:53	0:0	10	op
water	95:57	0:0	8	;
water	96:16	0:0	8	p_og
op	96:21	0:0	8	=
call	96:23	96:63	8	OggStreamFlush
arg	96:39	96:44	9	p_mux
water	96:39	0:0	10	p_mux
arg	96:46	96:59	9	&p_stream->os
op	96:46	0:0	10	&
water	96:47	0:0	10	p_stream
op	96:55	0:0	10	->
water	96:57	0:0	10	os
arg	96:61	96:63	9	0
water	96:61	0:0	10	0
water	96:64	0:0	8	;
if	98:16	102:16	8	(p_stream -> i_fourcc == VLC_CODEC_THEORA)
cond	98:20	98:42	9	p_stream -> i_fourcc == VLC_CODEC_THEORA
water	98:20	0:0	10	p_stream
op	98:28	0:0	10	->
water	98:30	0:0	10	i_fourcc
op	98:39	0:0	10	==
water	98:42	0:0	10	VLC_CODEC_THEORA
stmts	99:16	102:16	9	
water	99:16	0:0	10	{
water	100:20	0:0	10	p_stream
op	100:28	0:0	10	->
water	100:30	0:0	10	i_keyframe_granule_shift
op	100:55	0:0	10	=
water	101:24	0:0	10	(
water	101:26	0:0	10	(
water	101:27	0:0	10	op
op	101:29	0:0	10	.
water	101:30	0:0	10	packet
op	101:36	0:0	10	[
water	101:37	0:0	10	40
op	101:39	0:0	10	]
op	101:41	0:0	10	&
water	101:43	0:0	10	0
water	101:44	0:0	10	x03
water	101:47	0:0	10	)
op	101:49	0:0	10	<<
water	101:52	0:0	10	3
water	101:54	0:0	10	)
op	101:56	0:0	10	|
water	101:58	0:0	10	(
water	101:60	0:0	10	(
water	101:61	0:0	10	op
op	101:63	0:0	10	.
water	101:64	0:0	10	packet
op	101:70	0:0	10	[
water	101:71	0:0	10	41
op	101:73	0:0	10	]
op	101:75	0:0	10	&
water	101:77	0:0	10	0
water	101:78	0:0	10	xe0
water	101:81	0:0	10	)
op	101:83	0:0	10	>>
water	101:86	0:0	10	5
water	101:88	0:0	10	)
water	101:89	0:0	10	;
water	102:16	0:0	10	}
water	103:12	0:0	8	}
else	104:12	114:12	6
stmts	104:17	114:12	7	
if	104:17	114:12	8	(p_stream -> i_fourcc == VLC_CODEC_DIRAC)
cond	104:21	104:43	9	p_stream -> i_fourcc == VLC_CODEC_DIRAC
water	104:21	0:0	10	p_stream
op	104:29	0:0	10	->
water	104:31	0:0	10	i_fourcc
op	104:40	0:0	10	==
water	104:43	0:0	10	VLC_CODEC_DIRAC
stmts	105:12	114:12	9	
water	105:12	0:0	10	{
water	106:16	0:0	10	op
op	106:18	0:0	10	.
water	106:19	0:0	10	packet
op	106:26	0:0	10	=
water	106:28	0:0	10	p_input
op	106:35	0:0	10	->
water	106:37	0:0	10	p_fmt
op	106:42	0:0	10	->
water	106:44	0:0	10	p_extra
water	106:51	0:0	10	;
water	107:16	0:0	10	op
op	107:18	0:0	10	.
water	107:19	0:0	10	bytes
op	107:26	0:0	10	=
water	107:28	0:0	10	p_input
op	107:35	0:0	10	->
water	107:37	0:0	10	p_fmt
op	107:42	0:0	10	->
water	107:44	0:0	10	i_extra
water	107:51	0:0	10	;
water	108:16	0:0	10	op
op	108:18	0:0	10	.
water	108:19	0:0	10	b_o_s
op	108:26	0:0	10	=
water	108:28	0:0	10	1
water	108:29	0:0	10	;
water	109:16	0:0	10	op
op	109:18	0:0	10	.
water	109:19	0:0	10	e_o_s
op	109:26	0:0	10	=
water	109:28	0:0	10	0
water	109:29	0:0	10	;
water	110:16	0:0	10	op
op	110:18	0:0	10	.
water	110:19	0:0	10	granulepos
op	110:30	0:0	10	=
water	110:32	0:0	10	~0
water	110:34	0:0	10	;
water	111:16	0:0	10	op
op	111:18	0:0	10	.
water	111:19	0:0	10	packetno
op	111:28	0:0	10	=
water	111:30	0:0	10	p_stream
op	111:38	0:0	10	->
water	111:40	0:0	10	i_packet_no
op	111:51	0:0	10	++
water	111:53	0:0	10	;
call	112:16	112:56	10	ogg_stream_packetin
arg	112:37	112:50	11	&p_stream->os
op	112:37	0:0	12	&
water	112:38	0:0	12	p_stream
op	112:46	0:0	12	->
water	112:48	0:0	12	os
arg	112:52	112:56	11	&op
op	112:52	0:0	12	&
water	112:53	0:0	12	op
water	112:57	0:0	10	;
water	113:16	0:0	10	p_og
op	113:21	0:0	10	=
call	113:23	113:63	10	OggStreamFlush
arg	113:39	113:44	11	p_mux
water	113:39	0:0	12	p_mux
arg	113:46	113:59	11	&p_stream->os
op	113:46	0:0	12	&
water	113:47	0:0	12	p_stream
op	113:55	0:0	12	->
water	113:57	0:0	12	os
arg	113:61	113:63	11	0
water	113:61	0:0	12	0
water	113:64	0:0	10	;
water	114:12	0:0	10	}
else	115:12	126:12	6
stmts	115:17	126:12	7	
if	115:17	126:12	8	(p_stream -> i_fourcc == VLC_CODEC_FLAC)
cond	115:21	115:43	9	p_stream -> i_fourcc == VLC_CODEC_FLAC
water	115:21	0:0	10	p_stream
op	115:29	0:0	10	->
water	115:31	0:0	10	i_fourcc
op	115:40	0:0	10	==
water	115:43	0:0	10	VLC_CODEC_FLAC
stmts	116:12	126:12	9	
water	116:12	0:0	10	{
water	118:16	0:0	10	op
op	118:18	0:0	10	.
water	118:19	0:0	10	packet
op	118:26	0:0	10	=
water	118:28	0:0	10	(
water	118:29	0:0	10	unsigned
water	118:38	0:0	10	char
op	118:43	0:0	10	*
water	118:44	0:0	10	)
water	118:45	0:0	10	"fLaC"
water	118:51	0:0	10	;
water	119:16	0:0	10	op
op	119:18	0:0	10	.
water	119:19	0:0	10	bytes
op	119:26	0:0	10	=
water	119:28	0:0	10	4
water	119:29	0:0	10	;
water	120:16	0:0	10	op
op	120:18	0:0	10	.
water	120:19	0:0	10	b_o_s
op	120:26	0:0	10	=
water	120:28	0:0	10	1
water	120:29	0:0	10	;
water	121:16	0:0	10	op
op	121:18	0:0	10	.
water	121:19	0:0	10	e_o_s
op	121:26	0:0	10	=
water	121:28	0:0	10	0
water	121:29	0:0	10	;
water	122:16	0:0	10	op
op	122:18	0:0	10	.
water	122:19	0:0	10	granulepos
op	122:30	0:0	10	=
water	122:32	0:0	10	0
water	122:33	0:0	10	;
water	123:16	0:0	10	op
op	123:18	0:0	10	.
water	123:19	0:0	10	packetno
op	123:28	0:0	10	=
water	123:30	0:0	10	p_stream
op	123:38	0:0	10	->
water	123:40	0:0	10	i_packet_no
op	123:51	0:0	10	++
water	123:53	0:0	10	;
call	124:16	124:56	10	ogg_stream_packetin
arg	124:37	124:50	11	&p_stream->os
op	124:37	0:0	12	&
water	124:38	0:0	12	p_stream
op	124:46	0:0	12	->
water	124:48	0:0	12	os
arg	124:52	124:56	11	&op
op	124:52	0:0	12	&
water	124:53	0:0	12	op
water	124:57	0:0	10	;
water	125:16	0:0	10	p_og
op	125:21	0:0	10	=
call	125:23	125:63	10	OggStreamFlush
arg	125:39	125:44	11	p_mux
water	125:39	0:0	12	p_mux
arg	125:46	125:59	11	&p_stream->os
op	125:46	0:0	12	&
water	125:47	0:0	12	p_stream
op	125:55	0:0	12	->
water	125:57	0:0	12	os
arg	125:61	125:63	11	0
water	125:61	0:0	12	0
water	125:64	0:0	10	;
water	126:12	0:0	10	}
else	127:12	142:12	6
stmts	127:17	142:12	7	
if	127:17	142:12	8	(p_stream -> i_fourcc == VLC_CODEC_VP8)
cond	127:21	127:43	9	p_stream -> i_fourcc == VLC_CODEC_VP8
water	127:21	0:0	10	p_stream
op	127:29	0:0	10	->
water	127:31	0:0	10	i_fourcc
op	127:40	0:0	10	==
water	127:43	0:0	10	VLC_CODEC_VP8
stmts	128:12	142:12	9	
water	128:12	0:0	10	{
water	130:16	0:0	10	op
op	130:18	0:0	10	.
water	130:19	0:0	10	packet
op	130:26	0:0	10	=
call	130:28	130:39	10	malloc
arg	130:36	130:39	11	26
water	130:36	0:0	12	26
water	130:40	0:0	10	;
if	131:16	132:32	10	(! op . packet)
cond	131:20	131:24	11	! op . packet
op	131:20	0:0	12	!
water	131:21	0:0	12	op
op	131:23	0:0	12	.
water	131:24	0:0	12	packet
stmts	132:20	132:32	11	
return	132:20	132:32	12	false
water	132:27	0:0	13	false
water	133:16	0:0	10	op
op	133:18	0:0	10	.
water	133:19	0:0	10	bytes
op	133:25	0:0	10	=
water	133:27	0:0	10	26
water	133:29	0:0	10	;
call	134:16	134:53	10	OggFillVP8Header
arg	134:34	134:43	11	op.packet
water	134:34	0:0	12	op
op	134:36	0:0	12	.
water	134:37	0:0	12	packet
arg	134:45	134:53	11	p_input
water	134:45	0:0	12	p_input
water	134:54	0:0	10	;
water	135:16	0:0	10	op
op	135:18	0:0	10	.
water	135:19	0:0	10	b_o_s
op	135:25	0:0	10	=
water	135:27	0:0	10	1
water	135:28	0:0	10	;
water	136:16	0:0	10	op
op	136:18	0:0	10	.
water	136:19	0:0	10	e_o_s
op	136:25	0:0	10	=
water	136:27	0:0	10	0
water	136:28	0:0	10	;
water	137:16	0:0	10	op
op	137:18	0:0	10	.
water	137:19	0:0	10	granulepos
op	137:30	0:0	10	=
water	137:32	0:0	10	0
water	137:33	0:0	10	;
water	138:16	0:0	10	op
op	138:18	0:0	10	.
water	138:19	0:0	10	packetno
op	138:28	0:0	10	=
water	138:30	0:0	10	p_stream
op	138:38	0:0	10	->
water	138:40	0:0	10	i_packet_no
op	138:51	0:0	10	++
water	138:53	0:0	10	;
call	139:16	139:56	10	ogg_stream_packetin
arg	139:37	139:50	11	&p_stream->os
op	139:37	0:0	12	&
water	139:38	0:0	12	p_stream
op	139:46	0:0	12	->
water	139:48	0:0	12	os
arg	139:52	139:56	11	&op
op	139:52	0:0	12	&
water	139:53	0:0	12	op
water	139:57	0:0	10	;
water	140:16	0:0	10	p_og
op	140:21	0:0	10	=
call	140:23	140:63	10	OggStreamFlush
arg	140:39	140:44	11	p_mux
water	140:39	0:0	12	p_mux
arg	140:46	140:59	11	&p_stream->os
op	140:46	0:0	12	&
water	140:47	0:0	12	p_stream
op	140:55	0:0	12	->
water	140:57	0:0	12	os
arg	140:61	140:63	11	0
water	140:61	0:0	12	0
water	140:64	0:0	10	;
call	141:16	141:32	10	free
arg	141:22	141:32	11	op.packet
water	141:22	0:0	12	op
op	141:24	0:0	12	.
water	141:25	0:0	12	packet
water	141:33	0:0	10	;
water	142:12	0:0	10	}
else	143:12	157:12	6
stmts	143:17	157:12	7	
if	143:17	157:12	8	(p_stream -> p_oggds_header)
cond	143:21	143:31	9	p_stream -> p_oggds_header
water	143:21	0:0	10	p_stream
op	143:29	0:0	10	->
water	143:31	0:0	10	p_oggds_header
stmts	144:12	157:12	9	
water	144:12	0:0	10	{
water	146:16	0:0	10	op
op	146:18	0:0	10	.
water	146:19	0:0	10	packet
op	146:26	0:0	10	=
call	146:28	146:105	10	malloc
arg	146:36	146:105	11	sizeof(*p_stream->p_oggds_header)+p_stream->p_oggds_header->i_size
op	146:36	0:0	12	sizeof
water	146:42	0:0	12	(
op	146:43	0:0	12	*
water	146:44	0:0	12	p_stream
op	146:52	0:0	12	->
water	146:54	0:0	12	p_oggds_header
water	146:68	0:0	12	)
op	146:70	0:0	12	+
water	146:72	0:0	12	p_stream
op	146:80	0:0	12	->
water	146:82	0:0	12	p_oggds_header
op	146:96	0:0	12	->
water	146:98	0:0	12	i_size
water	146:106	0:0	10	;
if	147:16	148:32	10	(! op . packet)
cond	147:20	147:24	11	! op . packet
op	147:20	0:0	12	!
water	147:21	0:0	12	op
op	147:23	0:0	12	.
water	147:24	0:0	12	packet
stmts	148:20	148:32	11	
return	148:20	148:32	12	false
water	148:27	0:0	13	false
water	149:16	0:0	10	op
op	149:18	0:0	10	.
water	149:19	0:0	10	bytes
op	149:26	0:0	10	=
call	149:28	149:98	10	OggFillDsHeader
arg	149:45	149:54	11	op.packet
water	149:45	0:0	12	op
op	149:47	0:0	12	.
water	149:48	0:0	12	packet
arg	149:56	149:80	11	p_stream->p_oggds_header
water	149:56	0:0	12	p_stream
op	149:64	0:0	12	->
water	149:66	0:0	12	p_oggds_header
arg	149:82	149:98	11	p_stream->i_cat
water	149:82	0:0	12	p_stream
op	149:90	0:0	12	->
water	149:92	0:0	12	i_cat
water	149:99	0:0	10	;
water	150:16	0:0	10	op
op	150:18	0:0	10	.
water	150:19	0:0	10	b_o_s
op	150:26	0:0	10	=
water	150:28	0:0	10	1
water	150:29	0:0	10	;
water	151:16	0:0	10	op
op	151:18	0:0	10	.
water	151:19	0:0	10	e_o_s
op	151:26	0:0	10	=
water	151:28	0:0	10	0
water	151:29	0:0	10	;
water	152:16	0:0	10	op
op	152:18	0:0	10	.
water	152:19	0:0	10	granulepos
op	152:30	0:0	10	=
water	152:32	0:0	10	0
water	152:33	0:0	10	;
water	153:16	0:0	10	op
op	153:18	0:0	10	.
water	153:19	0:0	10	packetno
op	153:28	0:0	10	=
water	153:30	0:0	10	p_stream
op	153:38	0:0	10	->
water	153:40	0:0	10	i_packet_no
op	153:51	0:0	10	++
water	153:53	0:0	10	;
call	154:16	154:56	10	ogg_stream_packetin
arg	154:37	154:50	11	&p_stream->os
op	154:37	0:0	12	&
water	154:38	0:0	12	p_stream
op	154:46	0:0	12	->
water	154:48	0:0	12	os
arg	154:52	154:56	11	&op
op	154:52	0:0	12	&
water	154:53	0:0	12	op
water	154:57	0:0	10	;
water	155:16	0:0	10	p_og
op	155:21	0:0	10	=
call	155:23	155:63	10	OggStreamFlush
arg	155:39	155:44	11	p_mux
water	155:39	0:0	12	p_mux
arg	155:46	155:59	11	&p_stream->os
op	155:46	0:0	12	&
water	155:47	0:0	12	p_stream
op	155:55	0:0	12	->
water	155:57	0:0	12	os
arg	155:61	155:63	11	0
water	155:61	0:0	12	0
water	155:64	0:0	10	;
call	156:16	156:32	10	free
arg	156:22	156:32	11	op.packet
water	156:22	0:0	12	op
op	156:24	0:0	12	.
water	156:25	0:0	12	packet
water	156:33	0:0	10	;
water	157:12	0:0	10	}
call	158:12	158:44	6	block_ChainAppend
arg	158:31	158:37	7	&p_hdr
op	158:31	0:0	8	&
water	158:32	0:0	8	p_hdr
arg	158:39	158:44	7	p_og
water	158:39	0:0	8	p_og
water	158:45	0:0	6	;
water	159:8	0:0	6	}
water	160:4	0:0	4	}
if	162:4	180:4	2	(p_sys -> skeleton . b_create)
cond	162:9	162:25	3	p_sys -> skeleton . b_create
water	162:9	0:0	4	p_sys
op	162:14	0:0	4	->
water	162:16	0:0	4	skeleton
op	162:24	0:0	4	.
water	162:25	0:0	4	b_create
stmts	163:4	180:4	3	
water	163:4	0:0	4	{
for	164:8	179:8	4	(i = 0 ;i < p_mux -> i_nb_inputs;i ++)
forinit	164:13	164:18	5	i = 0 ;
water	164:13	0:0	6	i
op	164:15	0:0	6	=
water	164:17	0:0	6	0
water	164:18	0:0	6	;
cond	164:20	164:31	5	i < p_mux -> i_nb_inputs
water	164:20	0:0	6	i
op	164:22	0:0	6	<
water	164:24	0:0	6	p_mux
op	164:29	0:0	6	->
water	164:31	0:0	6	i_nb_inputs
forexpr	164:44	164:45	5	i ++
water	164:44	0:0	6	i
op	164:45	0:0	6	++
stmts	165:8	179:8	5	
water	165:8	0:0	6	{
decl	166:12	166:55	6	sout_input_t	*p_input
op	166:34	0:0	6	=
water	166:36	0:0	6	p_mux
op	166:41	0:0	6	->
water	166:43	0:0	6	pp_inputs
op	166:52	0:0	6	[
water	166:53	0:0	6	i
op	166:54	0:0	6	]
decl	167:12	167:66	6	ogg_stream_t	*p_stream
op	167:35	0:0	6	=
water	167:37	0:0	6	(
water	167:38	0:0	6	ogg_stream_t
op	167:50	0:0	6	*
water	167:51	0:0	6	)
water	167:52	0:0	6	p_input
op	167:59	0:0	6	->
water	167:61	0:0	6	p_sys
if	168:12	168:61	6	(p_stream -> skeleton . b_fisbone_done)
cond	168:17	168:36	7	p_stream -> skeleton . b_fisbone_done
water	168:17	0:0	8	p_stream
op	168:25	0:0	8	->
water	168:27	0:0	8	skeleton
op	168:35	0:0	8	.
water	168:36	0:0	8	b_fisbone_done
stmts	168:53	168:61	7	
continue	168:53	168:61	8	
call	169:12	169:73	6	OggGetSkeletonFisbone
arg	169:35	169:45	7	&op.packet
op	169:35	0:0	8	&
water	169:36	0:0	8	op
op	169:38	0:0	8	.
water	169:39	0:0	8	packet
arg	169:47	169:56	7	&op.bytes
op	169:47	0:0	8	&
water	169:48	0:0	8	op
op	169:50	0:0	8	.
water	169:51	0:0	8	bytes
arg	169:58	169:65	7	p_input
water	169:58	0:0	8	p_input
arg	169:67	169:73	7	p_mux
water	169:67	0:0	8	p_mux
water	169:74	0:0	6	;
if	170:12	170:49	6	(op . packet == NULL)
cond	170:17	170:30	7	op . packet == NULL
water	170:17	0:0	8	op
op	170:19	0:0	8	.
water	170:20	0:0	8	packet
op	170:27	0:0	8	==
water	170:30	0:0	8	NULL
stmts	170:37	170:49	7	
return	170:37	170:49	8	false
water	170:44	0:0	9	false
water	171:12	0:0	6	op
op	171:14	0:0	6	.
water	171:15	0:0	6	b_o_s
op	171:21	0:0	6	=
water	171:23	0:0	6	0
water	171:24	0:0	6	;
water	172:12	0:0	6	op
op	172:14	0:0	6	.
water	172:15	0:0	6	e_o_s
op	172:21	0:0	6	=
water	172:23	0:0	6	0
water	172:24	0:0	6	;
water	173:12	0:0	6	op
op	173:14	0:0	6	.
water	173:15	0:0	6	granulepos
op	173:26	0:0	6	=
water	173:28	0:0	6	0
water	173:29	0:0	6	;
water	174:12	0:0	6	op
op	174:14	0:0	6	.
water	174:15	0:0	6	packetno
op	174:24	0:0	6	=
water	174:26	0:0	6	p_sys
op	174:31	0:0	6	->
water	174:33	0:0	6	skeleton
op	174:41	0:0	6	.
water	174:42	0:0	6	i_packet_no
op	174:53	0:0	6	++
water	174:55	0:0	6	;
call	175:12	175:58	6	ogg_stream_packetin
arg	175:33	175:52	7	&p_sys->skeleton.os
op	175:33	0:0	8	&
water	175:34	0:0	8	p_sys
op	175:39	0:0	8	->
water	175:41	0:0	8	skeleton
op	175:49	0:0	8	.
water	175:50	0:0	8	os
arg	175:54	175:58	7	&op
op	175:54	0:0	8	&
water	175:55	0:0	8	op
water	175:59	0:0	6	;
water	176:12	0:0	6	p_og
op	176:17	0:0	6	=
call	176:19	176:65	6	OggStreamFlush
arg	176:35	176:40	7	p_mux
water	176:35	0:0	8	p_mux
arg	176:42	176:61	7	&p_sys->skeleton.os
op	176:42	0:0	8	&
water	176:43	0:0	8	p_sys
op	176:48	0:0	8	->
water	176:50	0:0	8	skeleton
op	176:58	0:0	8	.
water	176:59	0:0	8	os
arg	176:63	176:65	7	0
water	176:63	0:0	8	0
water	176:66	0:0	6	;
call	177:12	177:44	6	block_ChainAppend
arg	177:31	177:37	7	&p_hdr
op	177:31	0:0	8	&
water	177:32	0:0	8	p_hdr
arg	177:39	177:44	7	p_og
water	177:39	0:0	8	p_og
water	177:45	0:0	6	;
water	178:12	0:0	6	p_stream
op	178:20	0:0	6	->
water	178:22	0:0	6	skeleton
op	178:30	0:0	6	.
water	178:31	0:0	6	b_fisbone_done
op	178:46	0:0	6	=
water	178:48	0:0	6	true
water	178:52	0:0	6	;
water	179:8	0:0	6	}
water	180:4	0:0	4	}
for	182:4	186:4	2	(p_og = p_hdr ;p_og != NULL;p_og = p_og -> p_next)
forinit	182:9	182:21	3	p_og = p_hdr ;
water	182:9	0:0	4	p_og
op	182:14	0:0	4	=
water	182:16	0:0	4	p_hdr
water	182:21	0:0	4	;
cond	182:23	182:31	3	p_og != NULL
water	182:23	0:0	4	p_og
op	182:28	0:0	4	!=
water	182:31	0:0	4	NULL
forexpr	182:37	182:50	3	p_og = p_og -> p_next
water	182:37	0:0	4	p_og
op	182:42	0:0	4	=
water	182:44	0:0	4	p_og
op	182:48	0:0	4	->
water	182:50	0:0	4	p_next
stmts	183:4	186:4	3	
water	183:4	0:0	4	{
water	185:8	0:0	4	p_og
op	185:12	0:0	4	->
water	185:14	0:0	4	i_flags
op	185:22	0:0	4	|=
water	185:25	0:0	4	BLOCK_FLAG_HEADER
water	185:42	0:0	4	;
water	186:4	0:0	4	}
water	187:4	0:0	2	p_mux
op	187:9	0:0	2	->
water	187:11	0:0	2	p_sys
op	187:16	0:0	2	->
water	187:18	0:0	2	i_pos
op	187:24	0:0	2	+=
call	187:27	187:71	2	sout_AccessOutWrite
arg	187:48	187:63	3	p_mux->p_access
water	187:48	0:0	4	p_mux
op	187:53	0:0	4	->
water	187:55	0:0	4	p_access
arg	187:65	187:71	3	p_hdr
water	187:65	0:0	4	p_hdr
water	187:72	0:0	2	;
water	188:4	0:0	2	p_hdr
op	188:10	0:0	2	=
water	188:12	0:0	2	NULL
water	188:16	0:0	2	;
for	190:4	217:4	2	(i = 0 ;i < p_mux -> i_nb_inputs;i ++)
forinit	190:9	190:14	3	i = 0 ;
water	190:9	0:0	4	i
op	190:11	0:0	4	=
water	190:13	0:0	4	0
water	190:14	0:0	4	;
cond	190:16	190:27	3	i < p_mux -> i_nb_inputs
water	190:16	0:0	4	i
op	190:18	0:0	4	<
water	190:20	0:0	4	p_mux
op	190:25	0:0	4	->
water	190:27	0:0	4	i_nb_inputs
forexpr	190:40	190:41	3	i ++
water	190:40	0:0	4	i
op	190:41	0:0	4	++
stmts	191:4	217:4	3	
water	191:4	0:0	4	{
decl	192:8	192:51	4	sout_input_t	*p_input
op	192:30	0:0	4	=
water	192:32	0:0	4	p_mux
op	192:37	0:0	4	->
water	192:39	0:0	4	pp_inputs
op	192:48	0:0	4	[
water	192:49	0:0	4	i
op	192:50	0:0	4	]
decl	193:8	193:62	4	ogg_stream_t	*p_stream
op	193:31	0:0	4	=
water	193:33	0:0	4	(
water	193:34	0:0	4	ogg_stream_t
op	193:46	0:0	4	*
water	193:47	0:0	4	)
water	193:48	0:0	4	p_input
op	193:55	0:0	4	->
water	193:57	0:0	4	p_sys
if	195:8	216:8	4	(p_sys -> skeleton . b_create && ! p_stream -> skeleton . b_index_done)
cond	195:13	195:61	5	p_sys -> skeleton . b_create && ! p_stream -> skeleton . b_index_done
water	195:13	0:0	6	p_sys
op	195:18	0:0	6	->
water	195:20	0:0	6	skeleton
op	195:28	0:0	6	.
water	195:29	0:0	6	b_create
op	195:38	0:0	6	&&
op	195:41	0:0	6	!
water	195:42	0:0	6	p_stream
op	195:50	0:0	6	->
water	195:52	0:0	6	skeleton
op	195:60	0:0	6	.
water	195:61	0:0	6	b_index_done
stmts	196:8	216:8	5	
water	196:8	0:0	6	{
if	197:12	197:78	6	(! p_stream -> skeleton . p_index)
cond	197:17	197:37	7	! p_stream -> skeleton . p_index
op	197:17	0:0	8	!
water	197:18	0:0	8	p_stream
op	197:26	0:0	8	->
water	197:28	0:0	8	skeleton
op	197:36	0:0	8	.
water	197:37	0:0	8	p_index
stmts	197:47	197:78	7	
call	197:47	197:77	8	AllocateIndex
arg	197:62	197:67	9	p_mux
water	197:62	0:0	10	p_mux
arg	197:69	197:77	9	p_input
water	197:69	0:0	10	p_input
water	197:78	0:0	8	;
if	198:12	214:12	6	(p_stream -> skeleton . p_index)
cond	198:17	198:36	7	p_stream -> skeleton . p_index
water	198:17	0:0	8	p_stream
op	198:25	0:0	8	->
water	198:27	0:0	8	skeleton
op	198:35	0:0	8	.
water	198:36	0:0	8	p_index
stmts	199:12	214:12	7	
water	199:12	0:0	8	{
call	200:16	200:86	8	msg_Dbg
arg	200:25	200:30	9	p_mux
water	200:25	0:0	10	p_mux
arg	200:32	200:62	9	"Creating index for stream %d"
water	200:32	0:0	10	"Creating index for stream %d"
arg	200:64	200:86	9	p_stream->i_serial_no
water	200:64	0:0	10	p_stream
op	200:72	0:0	10	->
water	200:74	0:0	10	i_serial_no
water	200:87	0:0	8	;
call	201:16	201:69	8	OggGetSkeletonIndex
arg	201:37	201:47	9	&op.packet
op	201:37	0:0	10	&
water	201:38	0:0	10	op
op	201:40	0:0	10	.
water	201:41	0:0	10	packet
arg	201:49	201:58	9	&op.bytes
op	201:49	0:0	10	&
water	201:50	0:0	10	op
op	201:52	0:0	10	.
water	201:53	0:0	10	bytes
arg	201:60	201:69	9	p_stream
water	201:60	0:0	10	p_stream
water	201:70	0:0	8	;
if	202:16	202:53	8	(op . packet == NULL)
cond	202:21	202:34	9	op . packet == NULL
water	202:21	0:0	10	op
op	202:23	0:0	10	.
water	202:24	0:0	10	packet
op	202:31	0:0	10	==
water	202:34	0:0	10	NULL
stmts	202:41	202:53	9	
return	202:41	202:53	10	false
water	202:48	0:0	11	false
water	203:16	0:0	8	op
op	203:18	0:0	8	.
water	203:19	0:0	8	b_o_s
op	203:25	0:0	8	=
water	203:27	0:0	8	0
water	203:28	0:0	8	;
water	204:16	0:0	8	op
op	204:18	0:0	8	.
water	204:19	0:0	8	e_o_s
op	204:25	0:0	8	=
water	204:27	0:0	8	0
water	204:28	0:0	8	;
water	205:16	0:0	8	op
op	205:18	0:0	8	.
water	205:19	0:0	8	granulepos
op	205:30	0:0	8	=
water	205:32	0:0	8	0
water	205:33	0:0	8	;
water	206:16	0:0	8	op
op	206:18	0:0	8	.
water	206:19	0:0	8	packetno
op	206:28	0:0	8	=
water	206:30	0:0	8	p_sys
op	206:35	0:0	8	->
water	206:37	0:0	8	skeleton
op	206:45	0:0	8	.
water	206:46	0:0	8	i_packet_no
op	206:57	0:0	8	++
water	206:59	0:0	8	;
water	208:16	0:0	8	p_stream
op	208:24	0:0	8	->
water	208:26	0:0	8	skeleton
op	208:34	0:0	8	.
water	208:35	0:0	8	i_index_offset
op	208:50	0:0	8	=
water	208:52	0:0	8	p_mux
op	208:57	0:0	8	->
water	208:59	0:0	8	p_sys
op	208:64	0:0	8	->
water	208:66	0:0	8	i_pos
water	208:71	0:0	8	;
water	209:16	0:0	8	p_stream
op	209:24	0:0	8	->
water	209:26	0:0	8	skeleton
op	209:34	0:0	8	.
water	209:35	0:0	8	i_index_packetno
op	209:52	0:0	8	=
water	209:54	0:0	8	p_sys
op	209:59	0:0	8	->
water	209:61	0:0	8	skeleton
op	209:69	0:0	8	.
water	209:70	0:0	8	os
op	209:72	0:0	8	.
water	209:73	0:0	8	packetno
water	209:81	0:0	8	;
water	210:16	0:0	8	p_stream
op	210:24	0:0	8	->
water	210:26	0:0	8	skeleton
op	210:34	0:0	8	.
water	210:35	0:0	8	i_index_pageno
op	210:50	0:0	8	=
water	210:52	0:0	8	p_sys
op	210:57	0:0	8	->
water	210:59	0:0	8	skeleton
op	210:67	0:0	8	.
water	210:68	0:0	8	os
op	210:70	0:0	8	.
water	210:71	0:0	8	pageno
water	210:77	0:0	8	;
call	211:16	211:62	8	ogg_stream_packetin
arg	211:37	211:56	9	&p_sys->skeleton.os
op	211:37	0:0	10	&
water	211:38	0:0	10	p_sys
op	211:43	0:0	10	->
water	211:45	0:0	10	skeleton
op	211:53	0:0	10	.
water	211:54	0:0	10	os
arg	211:58	211:62	9	&op
op	211:58	0:0	10	&
water	211:59	0:0	10	op
water	211:63	0:0	8	;
water	212:16	0:0	8	p_og
op	212:21	0:0	8	=
call	212:23	212:69	8	OggStreamFlush
arg	212:39	212:44	9	p_mux
water	212:39	0:0	10	p_mux
arg	212:46	212:65	9	&p_sys->skeleton.os
op	212:46	0:0	10	&
water	212:47	0:0	10	p_sys
op	212:52	0:0	10	->
water	212:54	0:0	10	skeleton
op	212:62	0:0	10	.
water	212:63	0:0	10	os
arg	212:67	212:69	9	0
water	212:67	0:0	10	0
water	212:70	0:0	8	;
water	213:16	0:0	8	p_mux
op	213:21	0:0	8	->
water	213:23	0:0	8	p_sys
op	213:28	0:0	8	->
water	213:30	0:0	8	i_pos
op	213:36	0:0	8	+=
call	213:39	213:82	8	sout_AccessOutWrite
arg	213:60	213:75	9	p_mux->p_access
water	213:60	0:0	10	p_mux
op	213:65	0:0	10	->
water	213:67	0:0	10	p_access
arg	213:77	213:82	9	p_og
water	213:77	0:0	10	p_og
water	213:83	0:0	8	;
water	214:12	0:0	8	}
water	215:12	0:0	6	p_stream
op	215:20	0:0	6	->
water	215:22	0:0	6	skeleton
op	215:30	0:0	6	.
water	215:31	0:0	6	b_index_done
op	215:44	0:0	6	=
water	215:46	0:0	6	true
water	215:50	0:0	6	;
water	216:8	0:0	6	}
water	217:4	0:0	4	}
for	219:4	314:4	2	(i = 0 ;i < p_mux -> i_nb_inputs;i ++)
forinit	219:9	219:14	3	i = 0 ;
water	219:9	0:0	4	i
op	219:11	0:0	4	=
water	219:13	0:0	4	0
water	219:14	0:0	4	;
cond	219:16	219:27	3	i < p_mux -> i_nb_inputs
water	219:16	0:0	4	i
op	219:18	0:0	4	<
water	219:20	0:0	4	p_mux
op	219:25	0:0	4	->
water	219:27	0:0	4	i_nb_inputs
forexpr	219:40	219:41	3	i ++
water	219:40	0:0	4	i
op	219:41	0:0	4	++
stmts	220:4	314:4	3	
water	220:4	0:0	4	{
decl	221:8	221:51	4	sout_input_t	*p_input
op	221:30	0:0	4	=
water	221:32	0:0	4	p_mux
op	221:37	0:0	4	->
water	221:39	0:0	4	pp_inputs
op	221:48	0:0	4	[
water	221:49	0:0	4	i
op	221:50	0:0	4	]
decl	222:8	222:62	4	ogg_stream_t	*p_stream
op	222:31	0:0	4	=
water	222:33	0:0	4	(
water	222:34	0:0	4	ogg_stream_t
op	222:46	0:0	4	*
water	222:47	0:0	4	)
water	222:48	0:0	4	p_input
op	222:55	0:0	4	->
water	222:57	0:0	4	p_sys
if	223:8	255:8	4	(p_stream -> i_fourcc == VLC_CODEC_VORBIS || p_stream -> i_fourcc == VLC_CODEC_SPEEX || p_stream -> i_fourcc == VLC_CODEC_OPUS || p_stream -> i_fourcc == VLC_CODEC_THEORA)
cond	223:12	226:34	5	p_stream -> i_fourcc == VLC_CODEC_VORBIS || p_stream -> i_fourcc == VLC_CODEC_SPEEX || p_stream -> i_fourcc == VLC_CODEC_OPUS || p_stream -> i_fourcc == VLC_CODEC_THEORA
water	223:12	0:0	6	p_stream
op	223:20	0:0	6	->
water	223:22	0:0	6	i_fourcc
op	223:31	0:0	6	==
water	223:34	0:0	6	VLC_CODEC_VORBIS
op	223:51	0:0	6	||
water	224:12	0:0	6	p_stream
op	224:20	0:0	6	->
water	224:22	0:0	6	i_fourcc
op	224:31	0:0	6	==
water	224:34	0:0	6	VLC_CODEC_SPEEX
op	224:50	0:0	6	||
water	225:12	0:0	6	p_stream
op	225:20	0:0	6	->
water	225:22	0:0	6	i_fourcc
op	225:31	0:0	6	==
water	225:34	0:0	6	VLC_CODEC_OPUS
op	225:49	0:0	6	||
water	226:12	0:0	6	p_stream
op	226:20	0:0	6	->
water	226:22	0:0	6	i_fourcc
op	226:31	0:0	6	==
water	226:34	0:0	6	VLC_CODEC_THEORA
stmts	227:8	255:8	5	
water	227:8	0:0	6	{
water	228:12	0:0	6	unsigned
water	228:21	0:0	6	pi_size
op	228:28	0:0	6	[
water	228:29	0:0	6	XIPH_MAX_HEADER_COUNT
op	228:50	0:0	6	]
water	228:51	0:0	6	;
decl	229:12	229:52	6	void	*pp_data[XIPH_MAX_HEADER_COUNT]
water	230:12	0:0	6	unsigned
water	230:21	0:0	6	i_count
water	230:28	0:0	6	;
if	231:12	233:27	6	(xiph_SplitHeaders (pi_size ,pp_data ,& i_count ,p_input -> p_fmt -> i_extra ,p_input -> p_fmt -> p_extra ))
cond	231:16	232:84	7	xiph_SplitHeaders (pi_size ,pp_data ,& i_count ,p_input -> p_fmt -> i_extra ,p_input -> p_fmt -> p_extra )
call	231:16	232:84	8	xiph_SplitHeaders
arg	231:35	231:42	9	pi_size
water	231:35	0:0	10	pi_size
arg	231:44	231:51	9	pp_data
water	231:44	0:0	10	pp_data
arg	231:53	231:61	9	&i_count
op	231:53	0:0	10	&
water	231:54	0:0	10	i_count
arg	232:35	232:58	9	p_input->p_fmt->i_extra
water	232:35	0:0	10	p_input
op	232:42	0:0	10	->
water	232:44	0:0	10	p_fmt
op	232:49	0:0	10	->
water	232:51	0:0	10	i_extra
arg	232:60	232:84	9	p_input->p_fmt->p_extra
water	232:60	0:0	10	p_input
op	232:67	0:0	10	->
water	232:69	0:0	10	p_fmt
op	232:74	0:0	10	->
water	232:76	0:0	10	p_extra
stmts	233:16	233:27	7	
water	233:16	0:0	8	i_count
op	233:24	0:0	8	=
water	233:26	0:0	8	0
water	233:27	0:0	8	;
for	236:12	254:12	6	(unsigned i = 1 ;i < i_count;i ++)
forinit	236:17	236:31	7	unsigned i = 1 ;
water	236:17	0:0	8	unsigned
water	236:26	0:0	8	i
op	236:28	0:0	8	=
water	236:30	0:0	8	1
water	236:31	0:0	8	;
cond	236:33	236:37	7	i < i_count
water	236:33	0:0	8	i
op	236:35	0:0	8	<
water	236:37	0:0	8	i_count
forexpr	236:46	236:47	7	i ++
water	236:46	0:0	8	i
op	236:47	0:0	8	++
stmts	237:12	254:12	7	
water	237:12	0:0	8	{
water	238:16	0:0	8	op
op	238:18	0:0	8	.
water	238:19	0:0	8	bytes
op	238:26	0:0	8	=
water	238:28	0:0	8	pi_size
op	238:35	0:0	8	[
water	238:36	0:0	8	i
op	238:37	0:0	8	]
water	238:38	0:0	8	;
water	239:16	0:0	8	op
op	239:18	0:0	8	.
water	239:19	0:0	8	packet
op	239:26	0:0	8	=
water	239:28	0:0	8	pp_data
op	239:35	0:0	8	[
water	239:36	0:0	8	i
op	239:37	0:0	8	]
water	239:38	0:0	8	;
if	240:16	241:60	8	(pi_size [ i ] <= 0)
cond	240:20	240:34	9	pi_size [ i ] <= 0
water	240:20	0:0	10	pi_size
op	240:27	0:0	10	[
water	240:28	0:0	10	i
op	240:29	0:0	10	]
op	240:31	0:0	10	<=
water	240:34	0:0	10	0
stmts	241:20	241:60	9	
call	241:20	241:59	10	msg_Err
arg	241:29	241:34	11	p_mux
water	241:29	0:0	12	p_mux
arg	241:36	241:59	11	"header data corrupted"
water	241:36	0:0	12	"header data corrupted"
water	241:60	0:0	10	;
water	242:16	0:0	8	op
op	242:18	0:0	8	.
water	242:19	0:0	8	b_o_s
op	242:26	0:0	8	=
water	242:28	0:0	8	0
water	242:29	0:0	8	;
water	243:16	0:0	8	op
op	243:18	0:0	8	.
water	243:19	0:0	8	e_o_s
op	243:26	0:0	8	=
water	243:28	0:0	8	0
water	243:29	0:0	8	;
water	244:16	0:0	8	op
op	244:18	0:0	8	.
water	244:19	0:0	8	granulepos
op	244:30	0:0	8	=
water	244:32	0:0	8	0
water	244:33	0:0	8	;
water	245:16	0:0	8	op
op	245:18	0:0	8	.
water	245:19	0:0	8	packetno
op	245:28	0:0	8	=
water	245:30	0:0	8	p_stream
op	245:38	0:0	8	->
water	245:40	0:0	8	i_packet_no
op	245:51	0:0	8	++
water	245:53	0:0	8	;
call	246:16	246:56	8	ogg_stream_packetin
arg	246:37	246:50	9	&p_stream->os
op	246:37	0:0	10	&
water	246:38	0:0	10	p_stream
op	246:46	0:0	10	->
water	246:48	0:0	10	os
arg	246:52	246:56	9	&op
op	246:52	0:0	10	&
water	246:53	0:0	10	op
water	246:57	0:0	8	;
call	247:16	247:67	8	msg_Dbg
arg	247:25	247:30	9	p_mux
water	247:25	0:0	10	p_mux
arg	247:32	247:67	9	"adding non bos, secondary header"
water	247:32	0:0	10	"adding non bos, secondary header"
water	247:68	0:0	8	;
if	248:16	249:68	8	(i == i_count - 1)
cond	248:20	248:35	9	i == i_count - 1
water	248:20	0:0	10	i
op	248:22	0:0	10	==
water	248:25	0:0	10	i_count
op	248:33	0:0	10	-
water	248:35	0:0	10	1
stmts	249:20	249:68	9	
water	249:20	0:0	10	p_og
op	249:25	0:0	10	=
call	249:27	249:67	10	OggStreamFlush
arg	249:43	249:48	11	p_mux
water	249:43	0:0	12	p_mux
arg	249:50	249:63	11	&p_stream->os
op	249:50	0:0	12	&
water	249:51	0:0	12	p_stream
op	249:59	0:0	12	->
water	249:61	0:0	12	os
arg	249:65	249:67	11	0
water	249:65	0:0	12	0
water	249:68	0:0	10	;
else	250:16	251:70	8
stmts	251:20	251:70	9	
water	251:20	0:0	10	p_og
op	251:25	0:0	10	=
call	251:27	251:69	10	OggStreamPageOut
arg	251:45	251:50	11	p_mux
water	251:45	0:0	12	p_mux
arg	251:52	251:65	11	&p_stream->os
op	251:52	0:0	12	&
water	251:53	0:0	12	p_stream
op	251:61	0:0	12	->
water	251:63	0:0	12	os
arg	251:67	251:69	11	0
water	251:67	0:0	12	0
water	251:70	0:0	10	;
if	252:16	253:53	8	(p_og)
cond	252:20	252:20	9	p_og
water	252:20	0:0	10	p_og
stmts	253:20	253:53	9	
call	253:20	253:52	10	block_ChainAppend
arg	253:39	253:45	11	&p_hdr
op	253:39	0:0	12	&
water	253:40	0:0	12	p_hdr
arg	253:47	253:52	11	p_og
water	253:47	0:0	12	p_og
water	253:53	0:0	10	;
water	254:12	0:0	8	}
water	255:8	0:0	6	}
else	256:8	275:8	4
stmts	256:13	275:8	5	
if	256:13	275:8	6	(p_stream -> i_fourcc != VLC_CODEC_FLAC && p_stream -> i_fourcc != VLC_CODEC_DIRAC)
cond	256:17	257:39	7	p_stream -> i_fourcc != VLC_CODEC_FLAC && p_stream -> i_fourcc != VLC_CODEC_DIRAC
water	256:17	0:0	8	p_stream
op	256:25	0:0	8	->
water	256:27	0:0	8	i_fourcc
op	256:36	0:0	8	!=
water	256:39	0:0	8	VLC_CODEC_FLAC
op	256:54	0:0	8	&&
water	257:17	0:0	8	p_stream
op	257:25	0:0	8	->
water	257:27	0:0	8	i_fourcc
op	257:36	0:0	8	!=
water	257:39	0:0	8	VLC_CODEC_DIRAC
stmts	258:8	275:8	7	
water	258:8	0:0	8	{
decl	259:12	259:28	8	uint8_t	com[128]
decl	260:12	260:25	8	int	i_com
water	262:12	0:0	8	com
op	262:15	0:0	8	[
water	262:16	0:0	8	0
op	262:17	0:0	8	]
op	262:19	0:0	8	=
water	262:21	0:0	8	PACKET_TYPE_COMMENT
water	262:40	0:0	8	;
water	263:12	0:0	8	i_com
op	263:18	0:0	8	=
call	263:20	264:62	8	snprintf
arg	263:30	263:45	9	(char*)(com+1)
call	263:30	263:44	10	(char*)
arg	263:39	263:44	11	com+1
water	263:39	0:0	12	com
op	263:42	0:0	12	+
water	263:43	0:0	12	1
arg	263:47	263:50	9	127
water	263:47	0:0	10	127
arg	264:30	264:62	9	PACKAGE_VERSION" stream output"
water	264:30	0:0	10	PACKAGE_VERSION
water	264:45	0:0	10	" stream output"
op	265:21	0:0	8	+
water	265:23	0:0	8	1
water	265:24	0:0	8	;
water	266:12	0:0	8	op
op	266:14	0:0	8	.
water	266:15	0:0	8	packet
op	266:22	0:0	8	=
water	266:24	0:0	8	com
water	266:27	0:0	8	;
water	267:12	0:0	8	op
op	267:14	0:0	8	.
water	267:15	0:0	8	bytes
op	267:22	0:0	8	=
water	267:24	0:0	8	i_com
water	267:29	0:0	8	;
water	268:12	0:0	8	op
op	268:14	0:0	8	.
water	268:15	0:0	8	b_o_s
op	268:22	0:0	8	=
water	268:24	0:0	8	0
water	268:25	0:0	8	;
water	269:12	0:0	8	op
op	269:14	0:0	8	.
water	269:15	0:0	8	e_o_s
op	269:22	0:0	8	=
water	269:24	0:0	8	0
water	269:25	0:0	8	;
water	270:12	0:0	8	op
op	270:14	0:0	8	.
water	270:15	0:0	8	granulepos
op	270:26	0:0	8	=
water	270:28	0:0	8	0
water	270:29	0:0	8	;
water	271:12	0:0	8	op
op	271:14	0:0	8	.
water	271:15	0:0	8	packetno
op	271:24	0:0	8	=
water	271:26	0:0	8	p_stream
op	271:34	0:0	8	->
water	271:36	0:0	8	i_packet_no
op	271:47	0:0	8	++
water	271:49	0:0	8	;
call	272:12	272:52	8	ogg_stream_packetin
arg	272:33	272:46	9	&p_stream->os
op	272:33	0:0	10	&
water	272:34	0:0	10	p_stream
op	272:42	0:0	10	->
water	272:44	0:0	10	os
arg	272:48	272:52	9	&op
op	272:48	0:0	10	&
water	272:49	0:0	10	op
water	272:53	0:0	8	;
water	273:12	0:0	8	p_og
op	273:17	0:0	8	=
call	273:19	273:59	8	OggStreamFlush
arg	273:35	273:40	9	p_mux
water	273:35	0:0	10	p_mux
arg	273:42	273:55	9	&p_stream->os
op	273:42	0:0	10	&
water	273:43	0:0	10	p_stream
op	273:51	0:0	10	->
water	273:53	0:0	10	os
arg	273:57	273:59	9	0
water	273:57	0:0	10	0
water	273:60	0:0	8	;
call	274:12	274:44	8	block_ChainAppend
arg	274:31	274:37	9	&p_hdr
op	274:31	0:0	10	&
water	274:32	0:0	10	p_hdr
arg	274:39	274:44	9	p_og
water	274:39	0:0	10	p_og
water	274:45	0:0	8	;
water	275:8	0:0	8	}
if	277:8	313:8	4	(( p_stream -> i_fourcc == VLC_CODEC_MP4V || p_stream -> i_fourcc == VLC_CODEC_FLAC ) && p_input -> p_fmt -> i_extra)
cond	277:12	279:28	5	( p_stream -> i_fourcc == VLC_CODEC_MP4V || p_stream -> i_fourcc == VLC_CODEC_FLAC ) && p_input -> p_fmt -> i_extra
water	277:12	0:0	6	(
water	277:14	0:0	6	p_stream
op	277:22	0:0	6	->
water	277:24	0:0	6	i_fourcc
op	277:33	0:0	6	==
water	277:36	0:0	6	VLC_CODEC_MP4V
op	277:51	0:0	6	||
water	278:14	0:0	6	p_stream
op	278:22	0:0	6	->
water	278:24	0:0	6	i_fourcc
op	278:33	0:0	6	==
water	278:36	0:0	6	VLC_CODEC_FLAC
water	278:51	0:0	6	)
op	278:53	0:0	6	&&
water	279:12	0:0	6	p_input
op	279:19	0:0	6	->
water	279:21	0:0	6	p_fmt
op	279:26	0:0	6	->
water	279:28	0:0	6	i_extra
stmts	280:8	313:8	5	
water	280:8	0:0	6	{
call	283:12	283:49	6	msg_Dbg
arg	283:21	283:26	7	p_mux
water	283:21	0:0	8	p_mux
arg	283:28	283:49	7	"writing extra data"
water	283:28	0:0	8	"writing extra data"
water	283:50	0:0	6	;
water	284:12	0:0	6	op
op	284:14	0:0	6	.
water	284:15	0:0	6	bytes
op	284:22	0:0	6	=
water	284:24	0:0	6	p_input
op	284:31	0:0	6	->
water	284:33	0:0	6	p_fmt
op	284:38	0:0	6	->
water	284:40	0:0	6	i_extra
water	284:47	0:0	6	;
water	285:12	0:0	6	op
op	285:14	0:0	6	.
water	285:15	0:0	6	packet
op	285:22	0:0	6	=
water	285:24	0:0	6	p_input
op	285:31	0:0	6	->
water	285:33	0:0	6	p_fmt
op	285:38	0:0	6	->
water	285:40	0:0	6	p_extra
water	285:47	0:0	6	;
decl	286:12	286:43	6	uint8_t	flac_streaminfo[34+4]
if	287:12	305:12	6	(p_stream -> i_fourcc == VLC_CODEC_FLAC)
cond	287:16	287:38	7	p_stream -> i_fourcc == VLC_CODEC_FLAC
water	287:16	0:0	8	p_stream
op	287:24	0:0	8	->
water	287:26	0:0	8	i_fourcc
op	287:35	0:0	8	==
water	287:38	0:0	8	VLC_CODEC_FLAC
stmts	288:12	305:12	7	
water	288:12	0:0	8	{
if	289:16	293:16	8	(op . bytes == 42 && !memcmp (op . packet ,"fLaC" ,4 ))
cond	289:20	289:66	9	op . bytes == 42 && !memcmp (op . packet ,"fLaC" ,4 )
water	289:20	0:0	10	op
op	289:22	0:0	10	.
water	289:23	0:0	10	bytes
op	289:29	0:0	10	==
water	289:32	0:0	10	42
op	289:35	0:0	10	&&
op	289:38	0:0	10	!
call	289:39	289:66	10	memcmp
arg	289:46	289:55	11	op.packet
water	289:46	0:0	12	op
op	289:48	0:0	12	.
water	289:49	0:0	12	packet
arg	289:57	289:63	11	"fLaC"
water	289:57	0:0	12	"fLaC"
arg	289:65	289:66	11	4
water	289:65	0:0	12	4
stmts	289:69	293:16	9	
water	289:69	0:0	10	{
water	290:20	0:0	10	op
op	290:22	0:0	10	.
water	290:23	0:0	10	bytes
op	290:29	0:0	10	-=
water	290:32	0:0	10	4
water	290:33	0:0	10	;
call	291:20	291:61	10	memcpy
arg	291:27	291:42	11	flac_streaminfo
water	291:27	0:0	12	flac_streaminfo
arg	291:44	291:57	11	op.packet+4
water	291:44	0:0	12	op
op	291:46	0:0	12	.
water	291:47	0:0	12	packet
op	291:54	0:0	12	+
water	291:56	0:0	12	4
arg	291:59	291:61	11	38
water	291:59	0:0	12	38
water	291:62	0:0	10	;
water	292:20	0:0	10	op
op	292:22	0:0	10	.
water	292:23	0:0	10	packet
op	292:30	0:0	10	=
water	292:32	0:0	10	flac_streaminfo
water	292:47	0:0	10	;
water	293:16	0:0	10	}
else	293:18	301:16	8
stmts	293:23	301:16	9	
if	293:23	301:16	10	(op . bytes == 34)
cond	293:27	293:39	11	op . bytes == 34
water	293:27	0:0	12	op
op	293:29	0:0	12	.
water	293:30	0:0	12	bytes
op	293:36	0:0	12	==
water	293:39	0:0	12	34
stmts	293:43	301:16	11	
water	293:43	0:0	12	{
water	294:20	0:0	12	op
op	294:22	0:0	12	.
water	294:23	0:0	12	bytes
op	294:29	0:0	12	+=
water	294:32	0:0	12	4
water	294:33	0:0	12	;
call	295:20	295:61	12	memcpy
arg	295:27	295:46	13	flac_streaminfo+4
water	295:27	0:0	14	flac_streaminfo
op	295:43	0:0	14	+
water	295:45	0:0	14	4
arg	295:48	295:57	13	op.packet
water	295:48	0:0	14	op
op	295:50	0:0	14	.
water	295:51	0:0	14	packet
arg	295:59	295:61	13	34
water	295:59	0:0	14	34
water	295:62	0:0	12	;
water	296:20	0:0	12	flac_streaminfo
op	296:35	0:0	12	[
water	296:36	0:0	12	0
op	296:37	0:0	12	]
op	296:39	0:0	12	=
water	296:41	0:0	12	0
water	296:42	0:0	12	x80
water	296:45	0:0	12	;
water	297:20	0:0	12	flac_streaminfo
op	297:35	0:0	12	[
water	297:36	0:0	12	1
op	297:37	0:0	12	]
op	297:39	0:0	12	=
water	297:41	0:0	12	0
water	297:42	0:0	12	;
water	298:20	0:0	12	flac_streaminfo
op	298:35	0:0	12	[
water	298:36	0:0	12	2
op	298:37	0:0	12	]
op	298:39	0:0	12	=
water	298:41	0:0	12	0
water	298:42	0:0	12	;
water	299:20	0:0	12	flac_streaminfo
op	299:35	0:0	12	[
water	299:36	0:0	12	3
op	299:37	0:0	12	]
op	299:39	0:0	12	=
water	299:41	0:0	12	34
water	299:43	0:0	12	;
water	300:20	0:0	12	op
op	300:22	0:0	12	.
water	300:23	0:0	12	packet
op	300:30	0:0	12	=
water	300:32	0:0	12	flac_streaminfo
water	300:47	0:0	12	;
water	301:16	0:0	12	}
else	301:18	304:16	8
stmts	301:23	304:16	9	
water	301:23	0:0	10	{
call	302:20	303:36	10	msg_Err
arg	302:28	302:33	11	p_mux
water	302:28	0:0	12	p_mux
arg	302:35	302:72	11	"Invalid FLAC streaminfo (%ld bytes)"
water	302:35	0:0	12	"Invalid FLAC streaminfo (%ld bytes)"
arg	303:28	303:36	11	op.bytes
water	303:28	0:0	12	op
op	303:30	0:0	12	.
water	303:31	0:0	12	bytes
water	303:37	0:0	10	;
water	304:16	0:0	10	}
water	305:12	0:0	8	}
water	306:12	0:0	6	op
op	306:14	0:0	6	.
water	306:15	0:0	6	b_o_s
op	306:22	0:0	6	=
water	306:24	0:0	6	0
water	306:25	0:0	6	;
water	307:12	0:0	6	op
op	307:14	0:0	6	.
water	307:15	0:0	6	e_o_s
op	307:22	0:0	6	=
water	307:24	0:0	6	0
water	307:25	0:0	6	;
water	308:12	0:0	6	op
op	308:14	0:0	6	.
water	308:15	0:0	6	granulepos
op	308:26	0:0	6	=
water	308:28	0:0	6	0
water	308:29	0:0	6	;
water	309:12	0:0	6	op
op	309:14	0:0	6	.
water	309:15	0:0	6	packetno
op	309:24	0:0	6	=
water	309:26	0:0	6	p_stream
op	309:34	0:0	6	->
water	309:36	0:0	6	i_packet_no
op	309:47	0:0	6	++
water	309:49	0:0	6	;
call	310:12	310:52	6	ogg_stream_packetin
arg	310:33	310:46	7	&p_stream->os
op	310:33	0:0	8	&
water	310:34	0:0	8	p_stream
op	310:42	0:0	8	->
water	310:44	0:0	8	os
arg	310:48	310:52	7	&op
op	310:48	0:0	8	&
water	310:49	0:0	8	op
water	310:53	0:0	6	;
water	311:12	0:0	6	p_og
op	311:17	0:0	6	=
call	311:19	311:59	6	OggStreamFlush
arg	311:35	311:40	7	p_mux
water	311:35	0:0	8	p_mux
arg	311:42	311:55	7	&p_stream->os
op	311:42	0:0	8	&
water	311:43	0:0	8	p_stream
op	311:51	0:0	8	->
water	311:53	0:0	8	os
arg	311:57	311:59	7	0
water	311:57	0:0	8	0
water	311:60	0:0	6	;
call	312:12	312:44	6	block_ChainAppend
arg	312:31	312:37	7	&p_hdr
op	312:31	0:0	8	&
water	312:32	0:0	8	p_hdr
arg	312:39	312:44	7	p_og
water	312:39	0:0	8	p_og
water	312:45	0:0	6	;
water	313:8	0:0	6	}
water	314:4	0:0	4	}
if	315:4	327:4	2	(p_sys -> skeleton . b_create)
cond	315:9	315:25	3	p_sys -> skeleton . b_create
water	315:9	0:0	4	p_sys
op	315:14	0:0	4	->
water	315:16	0:0	4	skeleton
op	315:24	0:0	4	.
water	315:25	0:0	4	b_create
stmts	316:4	327:4	3	
water	316:4	0:0	4	{
call	317:8	317:42	4	msg_Dbg
arg	317:17	317:22	5	p_mux
water	317:17	0:0	6	p_mux
arg	317:24	317:42	5	"ending skeleton"
water	317:24	0:0	6	"ending skeleton"
water	317:43	0:0	4	;
water	318:8	0:0	4	op
op	318:10	0:0	4	.
water	318:11	0:0	4	packet
op	318:18	0:0	4	=
water	318:20	0:0	4	NULL
water	318:24	0:0	4	;
water	319:8	0:0	4	op
op	319:10	0:0	4	.
water	319:11	0:0	4	bytes
op	319:17	0:0	4	=
water	319:19	0:0	4	0
water	319:20	0:0	4	;
water	320:8	0:0	4	op
op	320:10	0:0	4	.
water	320:11	0:0	4	b_o_s
op	320:17	0:0	4	=
water	320:19	0:0	4	0
water	320:20	0:0	4	;
water	321:8	0:0	4	op
op	321:10	0:0	4	.
water	321:11	0:0	4	e_o_s
op	321:17	0:0	4	=
water	321:19	0:0	4	1
water	321:20	0:0	4	;
water	322:8	0:0	4	op
op	322:10	0:0	4	.
water	322:11	0:0	4	granulepos
op	322:22	0:0	4	=
water	322:24	0:0	4	0
water	322:25	0:0	4	;
water	323:8	0:0	4	op
op	323:10	0:0	4	.
water	323:11	0:0	4	packetno
op	323:20	0:0	4	=
water	323:22	0:0	4	p_sys
op	323:27	0:0	4	->
water	323:29	0:0	4	skeleton
op	323:37	0:0	4	.
water	323:38	0:0	4	i_packet_no
op	323:49	0:0	4	++
water	323:51	0:0	4	;
call	324:8	324:54	4	ogg_stream_packetin
arg	324:29	324:48	5	&p_sys->skeleton.os
op	324:29	0:0	6	&
water	324:30	0:0	6	p_sys
op	324:35	0:0	6	->
water	324:37	0:0	6	skeleton
op	324:45	0:0	6	.
water	324:46	0:0	6	os
arg	324:50	324:54	5	&op
op	324:50	0:0	6	&
water	324:51	0:0	6	op
water	324:55	0:0	4	;
water	325:8	0:0	4	p_og
op	325:13	0:0	4	=
call	325:15	325:61	4	OggStreamFlush
arg	325:31	325:36	5	p_mux
water	325:31	0:0	6	p_mux
arg	325:38	325:57	5	&p_sys->skeleton.os
op	325:38	0:0	6	&
water	325:39	0:0	6	p_sys
op	325:44	0:0	6	->
water	325:46	0:0	6	skeleton
op	325:54	0:0	6	.
water	325:55	0:0	6	os
arg	325:59	325:61	5	0
water	325:59	0:0	6	0
water	325:62	0:0	4	;
call	326:8	326:40	4	block_ChainAppend
arg	326:27	326:33	5	&p_hdr
op	326:27	0:0	6	&
water	326:28	0:0	6	p_hdr
arg	326:35	326:40	5	p_og
water	326:35	0:0	6	p_og
water	326:41	0:0	4	;
water	327:4	0:0	4	}
for	330:4	333:4	2	(p_og = p_hdr ;p_og != NULL;p_og = p_og -> p_next)
forinit	330:9	330:21	3	p_og = p_hdr ;
water	330:9	0:0	4	p_og
op	330:14	0:0	4	=
water	330:16	0:0	4	p_hdr
water	330:21	0:0	4	;
cond	330:23	330:31	3	p_og != NULL
water	330:23	0:0	4	p_og
op	330:28	0:0	4	!=
water	330:31	0:0	4	NULL
forexpr	330:37	330:50	3	p_og = p_og -> p_next
water	330:37	0:0	4	p_og
op	330:42	0:0	4	=
water	330:44	0:0	4	p_og
op	330:48	0:0	4	->
water	330:50	0:0	4	p_next
stmts	331:4	333:4	3	
water	331:4	0:0	4	{
water	332:8	0:0	4	p_og
op	332:12	0:0	4	->
water	332:14	0:0	4	i_flags
op	332:22	0:0	4	|=
water	332:25	0:0	4	BLOCK_FLAG_HEADER
water	332:42	0:0	4	;
water	333:4	0:0	4	}
water	335:4	0:0	2	p_mux
op	335:9	0:0	2	->
water	335:11	0:0	2	p_sys
op	335:16	0:0	2	->
water	335:18	0:0	2	i_pos
op	335:24	0:0	2	+=
call	335:27	335:71	2	sout_AccessOutWrite
arg	335:48	335:63	3	p_mux->p_access
water	335:48	0:0	4	p_mux
op	335:53	0:0	4	->
water	335:55	0:0	4	p_access
arg	335:65	335:71	3	p_hdr
water	335:65	0:0	4	p_hdr
water	335:72	0:0	2	;
return	336:4	336:15	2	true
water	336:11	0:0	3	true
