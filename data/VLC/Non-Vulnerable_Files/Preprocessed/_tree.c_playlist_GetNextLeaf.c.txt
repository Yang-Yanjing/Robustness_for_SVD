func	2:0	31:0	0	playlist_item_t *	playlist_GetNextLeaf
params	2:37	0:0	1	
param	2:39	2:61	2	playlist_t *	p_playlist
param	3:39	3:62	2	playlist_item_t *	p_root
param	4:39	4:62	2	playlist_item_t *	p_item
param	5:39	5:49	2	bool	b_ena
param	5:51	5:67	2	bool	b_unplayed
stmnts	7:4	30:17	1	
water	7:4	0:0	2	PL_ASSERT_LOCKED
water	7:20	0:0	2	;
decl	8:4	8:27	2	playlist_item_t	*p_next
call	9:4	9:47	2	assert
arg	9:12	9:47	3	p_root&&p_root->i_children!=-1
water	9:12	0:0	4	p_root
op	9:19	0:0	4	&&
water	9:22	0:0	4	p_root
op	9:28	0:0	4	->
water	9:30	0:0	4	i_children
op	9:41	0:0	4	!=
op	9:44	0:0	4	-
water	9:45	0:0	4	1
water	9:48	0:0	2	;
call	10:4	11:54	2	PL_DEBUG2
arg	10:15	10:45	3	"finding next of %s within %s"
water	10:15	0:0	4	"finding next of %s within %s"
arg	11:15	11:33	3	PLI_NAME(p_item)
call	11:15	11:32	4	PLI_NAME
arg	11:25	11:32	5	p_item
water	11:25	0:0	6	p_item
arg	11:35	11:54	3	PLI_NAME(p_root)
call	11:35	11:52	4	PLI_NAME
arg	11:45	11:52	5	p_root
water	11:45	0:0	6	p_root
water	11:55	0:0	2	;
water	13:4	0:0	2	p_next
op	13:11	0:0	2	=
water	13:13	0:0	2	p_item
water	13:19	0:0	2	;
while	14:4	28:4	2	(1)
cond	14:11	14:11	3	1
water	14:11	0:0	4	1
stmts	15:4	28:4	3	
water	15:4	0:0	4	{
decl	16:8	16:50	4	bool	b_ena_ok
op	16:22	0:0	4	=
water	16:24	0:0	4	true
water	16:28	0:0	4	,
decl	16:8	16:50	4	bool	b_unplayed_ok
op	16:44	0:0	4	=
water	16:46	0:0	4	true
water	17:8	0:0	4	p_next
op	17:15	0:0	4	=
call	17:17	17:57	4	GetNextItem
arg	17:30	17:40	5	p_playlist
water	17:30	0:0	6	p_playlist
arg	17:42	17:48	5	p_root
water	17:42	0:0	6	p_root
arg	17:50	17:57	5	p_next
water	17:50	0:0	6	p_next
water	17:58	0:0	4	;
if	18:8	19:17	4	(! p_next || p_next == p_root)
cond	18:12	18:33	5	! p_next || p_next == p_root
op	18:12	0:0	6	!
water	18:13	0:0	6	p_next
op	18:20	0:0	6	||
water	18:23	0:0	6	p_next
op	18:30	0:0	6	==
water	18:33	0:0	6	p_root
stmts	19:12	19:17	5	
break	19:12	19:17	6	
if	20:8	27:8	4	(p_next -> i_children == - 1)
cond	20:12	20:35	5	p_next -> i_children == - 1
water	20:12	0:0	6	p_next
op	20:18	0:0	6	->
water	20:20	0:0	6	i_children
op	20:31	0:0	6	==
op	20:34	0:0	6	-
water	20:35	0:0	6	1
stmts	21:8	27:8	5	
water	21:8	0:0	6	{
if	22:12	23:32	6	(b_ena && p_next -> i_flags & PLAYLIST_DBL_FLAG)
cond	22:16	22:43	7	b_ena && p_next -> i_flags & PLAYLIST_DBL_FLAG
water	22:16	0:0	8	b_ena
op	22:22	0:0	8	&&
water	22:25	0:0	8	p_next
op	22:31	0:0	8	->
water	22:33	0:0	8	i_flags
op	22:41	0:0	8	&
water	22:43	0:0	8	PLAYLIST_DBL_FLAG
stmts	23:16	23:32	7	
water	23:16	0:0	8	b_ena_ok
op	23:25	0:0	8	=
water	23:27	0:0	8	false
water	23:32	0:0	8	;
if	24:12	25:37	6	(b_unplayed && p_next -> p_input -> i_nb_played != 0)
cond	24:16	24:62	7	b_unplayed && p_next -> p_input -> i_nb_played != 0
water	24:16	0:0	8	b_unplayed
op	24:27	0:0	8	&&
water	24:30	0:0	8	p_next
op	24:36	0:0	8	->
water	24:38	0:0	8	p_input
op	24:45	0:0	8	->
water	24:47	0:0	8	i_nb_played
op	24:59	0:0	8	!=
water	24:62	0:0	8	0
stmts	25:16	25:37	7	
water	25:16	0:0	8	b_unplayed_ok
op	25:30	0:0	8	=
water	25:32	0:0	8	false
water	25:37	0:0	8	;
if	26:12	26:49	6	(b_ena_ok && b_unplayed_ok)
cond	26:16	26:28	7	b_ena_ok && b_unplayed_ok
water	26:16	0:0	8	b_ena_ok
op	26:25	0:0	8	&&
water	26:28	0:0	8	b_unplayed_ok
stmts	26:44	26:49	7	
break	26:44	26:49	8	
water	27:8	0:0	6	}
water	28:4	0:0	4	}
if	29:4	29:54	2	(p_next == NULL)
cond	29:8	29:18	3	p_next == NULL
water	29:8	0:0	4	p_next
op	29:15	0:0	4	==
water	29:18	0:0	4	NULL
stmts	29:25	29:54	3	
call	29:25	29:53	4	PL_DEBUG2
arg	29:36	29:53	5	"at end of node"
water	29:36	0:0	6	"at end of node"
water	29:54	0:0	4	;
return	30:4	30:17	2	p_next
water	30:11	0:0	3	p_next
