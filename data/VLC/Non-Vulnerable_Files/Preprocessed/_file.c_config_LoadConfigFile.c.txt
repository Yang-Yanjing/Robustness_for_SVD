func	2:0	84:0	0	int	config_LoadConfigFile
params	2:25	0:0	1	
param	2:27	2:48	2	vlc_object_t *	p_this
stmnts	0:0	83:12	1	
decl	4:4	4:14	2	FILE	*file
water	5:4	0:0	2	file
op	5:9	0:0	2	=
call	5:11	5:40	2	config_OpenConfigFile
arg	5:34	5:40	3	p_this
water	5:34	0:0	4	p_this
water	5:41	0:0	2	;
if	6:4	7:27	2	(file == NULL)
cond	6:8	6:16	3	file == NULL
water	6:8	0:0	4	file
op	6:13	0:0	4	==
water	6:16	0:0	4	NULL
stmts	7:8	7:27	3	
return	7:8	7:27	4	VLC_EGENERIC
water	7:15	0:0	5	VLC_EGENERIC
water	9:4	0:0	2	char
call	9:9	9:35	2	*(*convert)
arg	9:23	9:35	3	constchar*
water	9:23	0:0	4	const
water	9:29	0:0	4	char
op	9:34	0:0	4	*
op	9:37	0:0	2	=
water	9:39	0:0	2	strdupnull
water	9:49	0:0	2	;
decl	10:4	10:15	2	char	bom[3]
if	11:4	16:4	2	((fread (bom ,1 ,3 ,file ) != 3 ) ||memcmp (bom ,"\xEF\xBB\xBF" ,3 ))
cond	11:8	12:38	3	(fread (bom ,1 ,3 ,file ) != 3 ) ||memcmp (bom ,"\xEF\xBB\xBF" ,3 )
water	11:8	0:0	4	(
call	11:9	11:31	4	fread
arg	11:16	11:19	5	bom
water	11:16	0:0	6	bom
arg	11:21	11:22	5	1
water	11:21	0:0	6	1
arg	11:24	11:25	5	3
water	11:24	0:0	6	3
arg	11:27	11:31	5	file
water	11:27	0:0	6	file
op	11:33	0:0	4	!=
water	11:36	0:0	4	3
water	11:37	0:0	4	)
op	12:5	0:0	4	||
call	12:8	12:38	4	memcmp
arg	12:16	12:19	5	bom
water	12:16	0:0	6	bom
arg	12:21	12:35	5	"\xEF\xBB\xBF"
water	12:21	0:0	6	"\xEF\xBB\xBF"
arg	12:37	12:38	5	3
water	12:37	0:0	6	3
stmts	13:4	16:4	3	
water	13:4	0:0	4	{
water	14:8	0:0	4	convert
op	14:16	0:0	4	=
water	14:18	0:0	4	FromLocaleDup
water	14:31	0:0	4	;
call	15:8	15:20	4	rewind
arg	15:16	15:20	5	file
water	15:16	0:0	6	file
water	15:21	0:0	4	;
water	16:4	0:0	4	}
decl	17:4	17:21	2	char	*line
op	17:15	0:0	2	=
water	17:17	0:0	2	NULL
decl	18:4	18:18	2	size_t	bufsize
decl	19:4	19:19	2	ssize_t	linelen
decl	21:4	21:57	2	locale_t	loc
op	21:17	0:0	2	=
call	21:19	21:56	3	newlocale
arg	21:30	21:45	4	LC_NUMERIC_MASK
water	21:30	0:0	5	LC_NUMERIC_MASK
arg	21:47	21:50	4	"C"
water	21:47	0:0	5	"C"
arg	21:52	21:56	4	NULL
water	21:52	0:0	5	NULL
decl	22:4	22:38	2	locale_t	baseloc
op	22:21	0:0	2	=
call	22:23	22:37	3	uselocale
arg	22:34	22:37	4	loc
water	22:34	0:0	5	loc
call	23:4	23:35	2	vlc_rwlock_wrlock
arg	23:23	23:35	3	&config_lock
op	23:23	0:0	4	&
water	23:24	0:0	4	config_lock
water	23:36	0:0	2	;
while	24:4	68:4	2	(( linelen =getline (& line ,& bufsize ,file ) ) != - 1)
cond	24:11	24:59	3	( linelen =getline (& line ,& bufsize ,file ) ) != - 1
water	24:11	0:0	4	(
water	24:12	0:0	4	linelen
op	24:20	0:0	4	=
call	24:22	24:52	4	getline
arg	24:31	24:36	5	&line
op	24:31	0:0	6	&
water	24:32	0:0	6	line
arg	24:38	24:46	5	&bufsize
op	24:38	0:0	6	&
water	24:39	0:0	6	bufsize
arg	24:48	24:52	5	file
water	24:48	0:0	6	file
water	24:53	0:0	4	)
op	24:55	0:0	4	!=
op	24:58	0:0	4	-
water	24:59	0:0	4	1
stmts	25:4	68:4	3	
water	25:4	0:0	4	{
water	26:8	0:0	4	line
op	26:12	0:0	4	[
water	26:13	0:0	4	linelen
op	26:21	0:0	4	-
water	26:23	0:0	4	1
op	26:24	0:0	4	]
op	26:26	0:0	4	=
water	26:28	0:0	4	'\0'
water	26:32	0:0	4	;
if	28:8	29:20	4	(memchr ("#[" ,line [ 0 ] ,3 ) != NULL)
cond	28:12	28:41	5	memchr ("#[" ,line [ 0 ] ,3 ) != NULL
call	28:12	28:36	6	memchr
arg	28:20	28:24	7	"#["
water	28:20	0:0	8	"#["
arg	28:26	28:33	7	line[0]
water	28:26	0:0	8	line
op	28:30	0:0	8	[
water	28:31	0:0	8	0
op	28:32	0:0	8	]
arg	28:35	28:36	7	3
water	28:35	0:0	8	3
op	28:38	0:0	6	!=
water	28:41	0:0	6	NULL
stmts	29:12	29:20	5	
continue	29:12	29:20	6	
decl	31:8	31:42	4	const char	*psz_option_name
op	31:36	0:0	4	=
water	31:38	0:0	4	line
decl	32:8	32:38	4	char	*ptr
op	32:18	0:0	4	=
call	32:20	32:37	5	strchr
arg	32:28	32:32	6	line
water	32:28	0:0	7	line
arg	32:34	32:37	6	'='
water	32:34	0:0	7	'='
if	33:8	34:20	4	(ptr == NULL)
cond	33:12	33:19	5	ptr == NULL
water	33:12	0:0	6	ptr
op	33:16	0:0	6	==
water	33:19	0:0	6	NULL
stmts	34:12	34:20	5	
continue	34:12	34:20	6	
op	35:8	0:0	4	*
water	35:9	0:0	4	ptr
op	35:13	0:0	4	=
water	35:15	0:0	4	'\0'
water	35:19	0:0	4	;
decl	36:8	36:75	4	module_config_t	*item
op	36:30	0:0	4	=
call	36:32	36:74	5	config_FindConfig
arg	36:51	36:57	6	p_this
water	36:51	0:0	7	p_this
arg	36:59	36:74	6	psz_option_name
water	36:59	0:0	7	psz_option_name
if	37:8	38:20	4	(item == NULL)
cond	37:12	37:20	5	item == NULL
water	37:12	0:0	6	item
op	37:17	0:0	6	==
water	37:20	0:0	6	NULL
stmts	38:12	38:20	5	
continue	38:12	38:20	6	
decl	39:8	39:46	4	const char	*psz_option_value
op	39:37	0:0	4	=
water	39:39	0:0	4	ptr
op	39:43	0:0	4	+
water	39:45	0:0	4	1
switch	40:8	67:8	4	(CONFIG_CLASS (item -> i_type ))
cond	40:16	40:41	5	CONFIG_CLASS (item -> i_type )
call	40:16	40:41	6	CONFIG_CLASS
arg	40:29	40:41	7	item->i_type
water	40:29	0:0	8	item
op	40:33	0:0	8	->
water	40:35	0:0	8	i_type
stmts	41:8	67:8	5	
water	41:8	0:0	6	{
label	42:12	42:33	6	case CONFIG_ITEM_BOOL :
label	43:12	43:36	6	case CONFIG_ITEM_INTEGER :
water	44:12	0:0	6	{
decl	45:16	45:25	6	int64_t	l
water	46:16	0:0	6	errno
op	46:22	0:0	6	=
water	46:24	0:0	6	0
water	46:25	0:0	6	;
water	47:16	0:0	6	l
op	47:18	0:0	6	=
call	47:20	47:44	6	strtoi
arg	47:28	47:44	7	psz_option_value
water	47:28	0:0	8	psz_option_value
water	47:45	0:0	6	;
if	48:16	49:34	6	(( l > item -> max . i ) || ( l < item -> min . i ))
cond	48:20	48:57	7	( l > item -> max . i ) || ( l < item -> min . i )
water	48:20	0:0	8	(
water	48:21	0:0	8	l
op	48:23	0:0	8	>
water	48:25	0:0	8	item
op	48:29	0:0	8	->
water	48:31	0:0	8	max
op	48:34	0:0	8	.
water	48:35	0:0	8	i
water	48:36	0:0	8	)
op	48:38	0:0	8	||
water	48:41	0:0	8	(
water	48:42	0:0	8	l
op	48:44	0:0	8	<
water	48:46	0:0	8	item
op	48:50	0:0	8	->
water	48:52	0:0	8	min
op	48:55	0:0	8	.
water	48:56	0:0	8	i
water	48:57	0:0	8	)
stmts	49:20	49:34	7	
water	49:20	0:0	8	errno
op	49:26	0:0	8	=
water	49:28	0:0	8	ERANGE
water	49:34	0:0	8	;
if	50:16	53:52	6	(errno)
cond	50:20	50:20	7	errno
water	50:20	0:0	8	errno
stmts	51:20	53:52	7	
call	51:20	53:51	8	msg_Warn
arg	51:30	51:36	9	p_this
water	51:30	0:0	10	p_this
arg	51:38	51:69	9	"Integer value (%s) for %s: %s"
water	51:38	0:0	10	"Integer value (%s) for %s: %s"
arg	52:30	52:46	9	psz_option_value
water	52:30	0:0	10	psz_option_value
arg	52:48	52:63	9	psz_option_name
water	52:48	0:0	10	psz_option_name
arg	53:30	53:51	9	vlc_strerror_c(errno)
call	53:30	53:50	10	vlc_strerror_c
arg	53:45	53:50	11	errno
water	53:45	0:0	12	errno
water	53:52	0:0	8	;
else	54:16	55:37	6
stmts	55:20	55:37	7	
water	55:20	0:0	8	item
op	55:24	0:0	8	->
water	55:26	0:0	8	value
op	55:31	0:0	8	.
water	55:32	0:0	8	i
op	55:34	0:0	8	=
water	55:36	0:0	8	l
water	55:37	0:0	8	;
break	56:16	56:21	6	
water	57:12	0:0	6	}
label	58:12	58:34	6	case CONFIG_ITEM_FLOAT :
if	59:16	60:25	6	(! * psz_option_value)
cond	59:20	59:22	7	! * psz_option_value
op	59:20	0:0	8	!
op	59:21	0:0	8	*
water	59:22	0:0	8	psz_option_value
stmts	60:20	60:25	7	
break	60:20	60:25	8	
water	61:16	0:0	6	item
op	61:20	0:0	6	->
water	61:22	0:0	6	value
op	61:27	0:0	6	.
water	61:28	0:0	6	f
op	61:30	0:0	6	=
water	61:32	0:0	6	(
water	61:33	0:0	6	float
water	61:38	0:0	6	)
call	61:39	61:61	6	atof
arg	61:45	61:61	7	psz_option_value
water	61:45	0:0	8	psz_option_value
water	61:62	0:0	6	;
break	62:16	62:21	6	
label	63:12	63:19	6	default :
call	64:16	64:45	6	free
arg	64:22	64:45	7	(char*)item->value.psz
water	64:22	0:0	8	(
water	64:23	0:0	8	char
op	64:28	0:0	8	*
water	64:29	0:0	8	)
water	64:30	0:0	8	item
op	64:34	0:0	8	->
water	64:36	0:0	8	value
op	64:41	0:0	8	.
water	64:42	0:0	8	psz
water	64:46	0:0	6	;
water	65:16	0:0	6	item
op	65:20	0:0	6	->
water	65:22	0:0	6	value
op	65:27	0:0	6	.
water	65:28	0:0	6	psz
op	65:32	0:0	6	=
call	65:34	65:59	6	convert
arg	65:43	65:59	7	psz_option_value
water	65:43	0:0	8	psz_option_value
water	65:60	0:0	6	;
break	66:16	66:21	6	
water	67:8	0:0	6	}
water	68:4	0:0	4	}
call	69:4	69:35	2	vlc_rwlock_unlock
arg	69:23	69:35	3	&config_lock
op	69:23	0:0	4	&
water	69:24	0:0	4	config_lock
water	69:36	0:0	2	;
call	70:4	70:14	2	free
arg	70:10	70:14	3	line
water	70:10	0:0	4	line
water	70:15	0:0	2	;
if	71:4	76:4	2	(ferror (file ))
cond	71:8	71:20	3	ferror (file )
call	71:8	71:20	4	ferror
arg	71:16	71:20	5	file
water	71:16	0:0	6	file
stmts	72:4	76:4	3	
water	72:4	0:0	4	{
call	73:8	74:38	4	msg_Err
arg	73:17	73:23	5	p_this
water	73:17	0:0	6	p_this
arg	73:25	73:58	5	"error reading configuration: %s"
water	73:25	0:0	6	"error reading configuration: %s"
arg	74:17	74:38	5	vlc_strerror_c(errno)
call	74:17	74:37	6	vlc_strerror_c
arg	74:32	74:37	7	errno
water	74:32	0:0	8	errno
water	74:39	0:0	4	;
call	75:8	75:22	4	clearerr
arg	75:18	75:22	5	file
water	75:18	0:0	6	file
water	75:23	0:0	4	;
water	76:4	0:0	4	}
call	77:4	77:16	2	fclose
arg	77:12	77:16	3	file
water	77:12	0:0	4	file
water	77:17	0:0	2	;
if	78:4	82:4	2	(loc != ( locale_t ) 0)
cond	78:8	78:25	3	loc != ( locale_t ) 0
water	78:8	0:0	4	loc
op	78:12	0:0	4	!=
water	78:15	0:0	4	(
water	78:16	0:0	4	locale_t
water	78:24	0:0	4	)
water	78:25	0:0	4	0
stmts	79:4	82:4	3	
water	79:4	0:0	4	{
call	80:8	80:26	4	uselocale
arg	80:19	80:26	5	baseloc
water	80:19	0:0	6	baseloc
water	80:27	0:0	4	;
call	81:8	81:23	4	freelocale
arg	81:20	81:23	5	loc
water	81:20	0:0	6	loc
water	81:24	0:0	4	;
water	82:4	0:0	4	}
return	83:4	83:12	2	0
water	83:11	0:0	3	0
