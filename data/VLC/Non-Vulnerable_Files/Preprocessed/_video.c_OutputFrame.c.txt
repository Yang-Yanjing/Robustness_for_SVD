func	2:0	124:0	0	static void	OutputFrame
params	2:23	0:0	1	
param	2:25	2:48	2	sout_stream_t *	p_stream
param	2:50	2:66	2	picture_t *	p_pic
param	2:68	2:92	2	sout_stream_id_sys_t *	id
param	2:94	2:108	2	block_t * *	out
stmnts	0:0	123:32	1	
decl	4:4	4:46	2	sout_stream_sys_t	*p_sys
op	4:29	0:0	2	=
water	4:31	0:0	2	p_stream
op	4:39	0:0	2	->
water	4:41	0:0	2	p_sys
decl	5:4	5:28	2	picture_t	*p_pic2
op	5:22	0:0	2	=
water	5:24	0:0	2	NULL
decl	6:4	6:45	2	const mtime_t	original_date
op	6:32	0:0	2	=
water	6:34	0:0	2	p_pic
op	6:39	0:0	2	->
water	6:41	0:0	2	date
decl	7:4	7:31	2	bool	b_need_duplicate
op	7:25	0:0	2	=
water	7:26	0:0	2	false
if	15:4	24:4	2	(( original_date ) < (date_Get (& id -> next_output_pts ) - ( mtime_t ) id -> i_output_frame_interval ))
cond	15:8	16:82	3	( original_date ) < (date_Get (& id -> next_output_pts ) - ( mtime_t ) id -> i_output_frame_interval )
water	15:8	0:0	4	(
water	15:10	0:0	4	original_date
water	15:24	0:0	4	)
op	15:26	0:0	4	<
water	16:8	0:0	4	(
call	16:10	16:41	4	date_Get
arg	16:20	16:41	5	&id->next_output_pts
op	16:20	0:0	6	&
water	16:21	0:0	6	id
op	16:23	0:0	6	->
water	16:25	0:0	6	next_output_pts
op	16:43	0:0	4	-
water	16:45	0:0	4	(
water	16:46	0:0	4	mtime_t
water	16:53	0:0	4	)
water	16:54	0:0	4	id
op	16:56	0:0	4	->
water	16:58	0:0	4	i_output_frame_interval
water	16:82	0:0	4	)
stmts	17:4	24:4	3	
water	17:4	0:0	4	{
call	19:8	20:89	4	msg_Dbg
arg	19:17	19:25	5	p_stream
water	19:17	0:0	6	p_stream
arg	19:27	19:80	5	"dropping frame (%"PRId64" + %"PRId64" vs %"PRId64")"
water	19:27	0:0	6	"dropping frame (%"
water	19:46	0:0	6	PRId64
water	19:52	0:0	6	" + %"
water	19:58	0:0	6	PRId64
water	19:64	0:0	6	" vs %"
water	19:71	0:0	6	PRId64
water	19:77	0:0	6	")"
arg	20:17	20:28	5	p_pic->date
water	20:17	0:0	6	p_pic
op	20:22	0:0	6	->
water	20:24	0:0	6	date
arg	20:30	20:56	5	id->i_input_frame_interval
water	20:30	0:0	6	id
op	20:32	0:0	6	->
water	20:34	0:0	6	i_input_frame_interval
arg	20:58	20:89	5	date_Get(&id->next_output_pts)
call	20:58	20:87	6	date_Get
arg	20:67	20:87	7	&id->next_output_pts
op	20:67	0:0	8	&
water	20:68	0:0	8	id
op	20:70	0:0	8	->
water	20:72	0:0	8	next_output_pts
water	20:90	0:0	4	;
call	22:8	22:31	4	picture_Release
arg	22:25	22:31	5	p_pic
water	22:25	0:0	6	p_pic
water	22:32	0:0	4	;
return	23:8	23:14	4	
water	24:4	0:0	4	}
if	29:4	62:4	2	(p_sys -> p_spu)
cond	29:8	29:15	3	p_sys -> p_spu
water	29:8	0:0	4	p_sys
op	29:13	0:0	4	->
water	29:15	0:0	4	p_spu
stmts	30:4	62:4	3	
water	30:4	0:0	4	{
decl	31:8	31:56	4	video_format_t	fmt
op	31:27	0:0	4	=
water	31:29	0:0	4	id
op	31:31	0:0	4	->
water	31:33	0:0	4	p_encoder
op	31:42	0:0	4	->
water	31:44	0:0	4	fmt_in
op	31:50	0:0	4	.
water	31:51	0:0	4	video
if	32:8	38:8	4	(fmt . i_visible_width <= 0 || fmt . i_visible_height <= 0)
cond	32:12	32:64	5	fmt . i_visible_width <= 0 || fmt . i_visible_height <= 0
water	32:12	0:0	6	fmt
op	32:15	0:0	6	.
water	32:16	0:0	6	i_visible_width
op	32:32	0:0	6	<=
water	32:35	0:0	6	0
op	32:37	0:0	6	||
water	32:40	0:0	6	fmt
op	32:43	0:0	6	.
water	32:44	0:0	6	i_visible_height
op	32:61	0:0	6	<=
water	32:64	0:0	6	0
stmts	33:8	38:8	5	
water	33:8	0:0	6	{
water	34:12	0:0	6	fmt
op	34:15	0:0	6	.
water	34:16	0:0	6	i_visible_width
op	34:33	0:0	6	=
water	34:35	0:0	6	fmt
op	34:38	0:0	6	.
water	34:39	0:0	6	i_width
water	34:46	0:0	6	;
water	35:12	0:0	6	fmt
op	35:15	0:0	6	.
water	35:16	0:0	6	i_visible_height
op	35:33	0:0	6	=
water	35:35	0:0	6	fmt
op	35:38	0:0	6	.
water	35:39	0:0	6	i_height
water	35:47	0:0	6	;
water	36:12	0:0	6	fmt
op	36:15	0:0	6	.
water	36:16	0:0	6	i_x_offset
op	36:33	0:0	6	=
water	36:35	0:0	6	0
water	36:36	0:0	6	;
water	37:12	0:0	6	fmt
op	37:15	0:0	6	.
water	37:16	0:0	6	i_y_offset
op	37:33	0:0	6	=
water	37:35	0:0	6	0
water	37:36	0:0	6	;
water	38:8	0:0	6	}
decl	39:8	40:78	4	subpicture_t	*p_subpic
op	39:31	0:0	4	=
call	39:33	40:77	5	spu_Render
arg	39:45	39:57	6	p_sys->p_spu
water	39:45	0:0	7	p_sys
op	39:50	0:0	7	->
water	39:52	0:0	7	p_spu
arg	39:59	39:63	6	NULL
water	39:59	0:0	7	NULL
arg	39:65	39:69	6	&fmt
op	39:65	0:0	7	&
water	39:66	0:0	7	fmt
arg	39:71	39:75	6	&fmt
op	39:71	0:0	7	&
water	39:72	0:0	7	fmt
arg	40:45	40:56	6	p_pic->date
water	40:45	0:0	7	p_pic
op	40:50	0:0	7	->
water	40:52	0:0	7	date
arg	40:58	40:69	6	p_pic->date
water	40:58	0:0	7	p_pic
op	40:63	0:0	7	->
water	40:65	0:0	7	date
arg	40:71	40:77	6	false
water	40:71	0:0	7	false
if	42:8	61:8	4	(p_subpic)
cond	42:12	42:12	5	p_subpic
water	42:12	0:0	6	p_subpic
stmts	43:8	61:8	5	
water	43:8	0:0	6	{
if	44:12	55:12	6	(picture_IsReferenced (p_pic ) && !filter_chain_GetLength (id -> p_f_chain ))
cond	44:16	44:88	7	picture_IsReferenced (p_pic ) && !filter_chain_GetLength (id -> p_f_chain )
call	44:16	44:44	8	picture_IsReferenced
arg	44:38	44:44	9	p_pic
water	44:38	0:0	10	p_pic
op	44:46	0:0	8	&&
op	44:49	0:0	8	!
call	44:50	44:88	8	filter_chain_GetLength
arg	44:74	44:88	9	id->p_f_chain
water	44:74	0:0	10	id
op	44:76	0:0	10	->
water	44:78	0:0	10	p_f_chain
stmts	45:12	55:12	7	
water	45:12	0:0	8	{
decl	48:16	48:76	8	picture_t	*p_tmp
op	48:33	0:0	8	=
call	48:35	48:75	9	video_new_buffer_encoder
arg	48:61	48:75	10	id->p_encoder
water	48:61	0:0	11	id
op	48:63	0:0	11	->
water	48:65	0:0	11	p_encoder
if	49:16	54:16	8	(likely (p_tmp ))
cond	49:20	49:34	9	likely (p_tmp )
call	49:20	49:34	10	likely
arg	49:28	49:34	11	p_tmp
water	49:28	0:0	12	p_tmp
stmts	50:16	54:16	9	
water	50:16	0:0	10	{
call	51:20	51:47	10	picture_Copy
arg	51:34	51:39	11	p_tmp
water	51:34	0:0	12	p_tmp
arg	51:41	51:47	11	p_pic
water	51:41	0:0	12	p_pic
water	51:48	0:0	10	;
call	52:20	52:43	10	picture_Release
arg	52:37	52:43	11	p_pic
water	52:37	0:0	12	p_pic
water	52:44	0:0	10	;
water	53:20	0:0	10	p_pic
op	53:26	0:0	10	=
water	53:28	0:0	10	p_tmp
water	53:33	0:0	10	;
water	54:16	0:0	10	}
water	55:12	0:0	8	}
if	56:12	57:88	6	(unlikely (! p_sys -> p_spu_blend ))
cond	56:16	56:46	7	unlikely (! p_sys -> p_spu_blend )
call	56:16	56:46	8	unlikely
arg	56:26	56:46	9	!p_sys->p_spu_blend
op	56:26	0:0	10	!
water	56:27	0:0	10	p_sys
op	56:32	0:0	10	->
water	56:34	0:0	10	p_spu_blend
stmts	57:16	57:88	7	
water	57:16	0:0	8	p_sys
op	57:21	0:0	8	->
water	57:23	0:0	8	p_spu_blend
op	57:35	0:0	8	=
call	57:37	57:87	8	filter_NewBlend
arg	57:54	57:80	9	VLC_OBJECT(p_sys->p_spu)
call	57:54	57:79	10	VLC_OBJECT
arg	57:66	57:79	11	p_sys->p_spu
water	57:66	0:0	12	p_sys
op	57:71	0:0	12	->
water	57:73	0:0	12	p_spu
arg	57:82	57:87	9	&fmt
op	57:82	0:0	10	&
water	57:83	0:0	10	fmt
water	57:88	0:0	8	;
if	58:12	59:78	6	(likely (p_sys -> p_spu_blend ))
cond	58:16	58:43	7	likely (p_sys -> p_spu_blend )
call	58:16	58:43	8	likely
arg	58:24	58:43	9	p_sys->p_spu_blend
water	58:24	0:0	10	p_sys
op	58:29	0:0	10	->
water	58:31	0:0	10	p_spu_blend
stmts	59:16	59:78	7	
call	59:16	59:77	8	picture_BlendSubpicture
arg	59:41	59:46	9	p_pic
water	59:41	0:0	10	p_pic
arg	59:48	59:66	9	p_sys->p_spu_blend
water	59:48	0:0	10	p_sys
op	59:53	0:0	10	->
water	59:55	0:0	10	p_spu_blend
arg	59:68	59:77	9	p_subpic
water	59:68	0:0	10	p_subpic
water	59:78	0:0	8	;
call	60:12	60:40	6	subpicture_Delete
arg	60:31	60:40	7	p_subpic
water	60:31	0:0	8	p_subpic
water	60:41	0:0	6	;
water	61:8	0:0	6	}
water	62:4	0:0	4	}
water	64:4	0:0	2	p_pic
op	64:9	0:0	2	->
water	64:11	0:0	2	date
op	64:16	0:0	2	=
call	64:18	64:49	2	date_Get
arg	64:28	64:49	3	&id->next_output_pts
op	64:28	0:0	4	&
water	64:29	0:0	4	id
op	64:31	0:0	4	->
water	64:33	0:0	4	next_output_pts
water	64:50	0:0	2	;
call	66:4	66:88	2	date_Increment
arg	66:20	66:40	3	&id->next_output_pts
op	66:20	0:0	4	&
water	66:21	0:0	4	id
op	66:23	0:0	4	->
water	66:25	0:0	4	next_output_pts
arg	66:42	66:88	3	id->p_encoder->fmt_in.video.i_frame_rate_base
water	66:42	0:0	4	id
op	66:44	0:0	4	->
water	66:46	0:0	4	p_encoder
op	66:55	0:0	4	->
water	66:57	0:0	4	fmt_in
op	66:63	0:0	4	.
water	66:64	0:0	4	video
op	66:69	0:0	4	.
water	66:70	0:0	4	i_frame_rate_base
water	66:89	0:0	2	;
if	67:4	72:4	2	(p_sys -> i_threads == 0)
cond	67:8	67:28	3	p_sys -> i_threads == 0
water	67:8	0:0	4	p_sys
op	67:13	0:0	4	->
water	67:15	0:0	4	i_threads
op	67:25	0:0	4	==
water	67:28	0:0	4	0
stmts	68:4	72:4	3	
water	68:4	0:0	4	{
decl	69:8	69:24	4	block_t	*p_block
water	70:8	0:0	4	p_block
op	70:16	0:0	4	=
call	70:18	70:71	4	id->p_encoder->pf_encode_video
arg	70:50	70:63	5	id->p_encoder
water	70:50	0:0	6	id
op	70:52	0:0	6	->
water	70:54	0:0	6	p_encoder
arg	70:65	70:71	5	p_pic
water	70:65	0:0	6	p_pic
water	70:72	0:0	4	;
call	71:8	71:40	4	block_ChainAppend
arg	71:27	71:30	5	out
water	71:27	0:0	6	out
arg	71:32	71:40	5	p_block
water	71:32	0:0	6	p_block
water	71:41	0:0	4	;
water	72:4	0:0	4	}
water	74:4	0:0	2	b_need_duplicate
op	74:21	0:0	2	=
water	74:23	0:0	2	(
call	74:25	74:56	2	date_Get
arg	74:35	74:56	3	&id->next_output_pts
op	74:35	0:0	4	&
water	74:36	0:0	4	id
op	74:38	0:0	4	->
water	74:40	0:0	4	next_output_pts
op	74:58	0:0	2	+
water	74:60	0:0	2	id
op	74:62	0:0	2	->
water	74:64	0:0	2	i_output_frame_interval
water	74:88	0:0	2	)
op	74:90	0:0	2	<
water	75:23	0:0	2	(
water	75:25	0:0	2	original_date
water	75:39	0:0	2	)
water	75:40	0:0	2	;
if	76:4	88:4	2	(p_sys -> i_threads)
cond	76:8	76:15	3	p_sys -> i_threads
water	76:8	0:0	4	p_sys
op	76:13	0:0	4	->
water	76:15	0:0	4	i_threads
stmts	77:4	88:4	3	
water	77:4	0:0	4	{
if	78:8	83:8	4	(p_sys -> b_master_sync)
cond	78:12	78:19	5	p_sys -> b_master_sync
water	78:12	0:0	6	p_sys
op	78:17	0:0	6	->
water	78:19	0:0	6	b_master_sync
stmts	79:8	83:8	5	
water	79:8	0:0	6	{
water	80:12	0:0	6	p_pic2
op	80:19	0:0	6	=
call	80:21	80:61	6	video_new_buffer_encoder
arg	80:47	80:61	7	id->p_encoder
water	80:47	0:0	8	id
op	80:49	0:0	8	->
water	80:51	0:0	8	p_encoder
water	80:62	0:0	6	;
if	81:12	82:45	6	(likely (p_pic2 != NULL ))
cond	81:16	81:39	7	likely (p_pic2 != NULL )
call	81:16	81:39	8	likely
arg	81:24	81:39	9	p_pic2!=NULL
water	81:24	0:0	10	p_pic2
op	81:31	0:0	10	!=
water	81:34	0:0	10	NULL
stmts	82:16	82:45	7	
call	82:16	82:44	8	picture_Copy
arg	82:30	82:36	9	p_pic2
water	82:30	0:0	10	p_pic2
arg	82:38	82:44	9	p_pic
water	82:38	0:0	10	p_pic
water	82:45	0:0	8	;
water	83:8	0:0	6	}
call	84:8	84:41	4	vlc_mutex_lock
arg	84:24	84:41	5	&p_sys->lock_out
op	84:24	0:0	6	&
water	84:25	0:0	6	p_sys
op	84:30	0:0	6	->
water	84:32	0:0	6	lock_out
water	84:42	0:0	4	;
call	85:8	85:49	4	picture_fifo_Push
arg	85:27	85:41	5	p_sys->pp_pics
water	85:27	0:0	6	p_sys
op	85:32	0:0	6	->
water	85:34	0:0	6	pp_pics
arg	85:43	85:49	5	p_pic
water	85:43	0:0	6	p_pic
water	85:50	0:0	4	;
call	86:8	86:38	4	vlc_cond_signal
arg	86:25	86:38	5	&p_sys->cond
op	86:25	0:0	6	&
water	86:26	0:0	6	p_sys
op	86:31	0:0	6	->
water	86:33	0:0	6	cond
water	86:39	0:0	4	;
call	87:8	87:43	4	vlc_mutex_unlock
arg	87:26	87:43	5	&p_sys->lock_out
op	87:26	0:0	6	&
water	87:27	0:0	6	p_sys
op	87:32	0:0	6	->
water	87:34	0:0	6	lock_out
water	87:44	0:0	4	;
water	88:4	0:0	4	}
while	89:4	119:4	2	(( p_sys -> b_master_sync && b_need_duplicate ))
cond	89:11	89:53	3	( p_sys -> b_master_sync && b_need_duplicate )
water	89:11	0:0	4	(
water	89:12	0:0	4	p_sys
op	89:17	0:0	4	->
water	89:19	0:0	4	b_master_sync
op	89:33	0:0	4	&&
water	89:36	0:0	4	b_need_duplicate
water	89:53	0:0	4	)
stmts	90:4	119:4	3	
water	90:4	0:0	4	{
if	91:8	105:8	4	(p_sys -> i_threads >= 1)
cond	91:12	91:32	5	p_sys -> i_threads >= 1
water	91:12	0:0	6	p_sys
op	91:17	0:0	6	->
water	91:19	0:0	6	i_threads
op	91:29	0:0	6	>=
water	91:32	0:0	6	1
stmts	92:8	105:8	5	
water	92:8	0:0	6	{
decl	93:12	93:35	6	picture_t	*p_tmp
op	93:29	0:0	6	=
water	93:31	0:0	6	NULL
water	95:12	0:0	6	p_tmp
op	95:18	0:0	6	=
call	95:20	95:60	6	video_new_buffer_encoder
arg	95:46	95:60	7	id->p_encoder
water	95:46	0:0	8	id
op	95:48	0:0	8	->
water	95:50	0:0	8	p_encoder
water	95:61	0:0	6	;
if	96:12	104:12	6	(likely (p_tmp != NULL ))
cond	96:16	96:38	7	likely (p_tmp != NULL )
call	96:16	96:38	8	likely
arg	96:24	96:38	9	p_tmp!=NULL
water	96:24	0:0	10	p_tmp
op	96:30	0:0	10	!=
water	96:33	0:0	10	NULL
stmts	97:12	104:12	7	
water	97:12	0:0	8	{
call	98:16	98:44	8	picture_Copy
arg	98:30	98:35	9	p_tmp
water	98:30	0:0	10	p_tmp
arg	98:37	98:44	9	p_pic2
water	98:37	0:0	10	p_pic2
water	98:45	0:0	8	;
water	99:16	0:0	8	p_tmp
op	99:21	0:0	8	->
water	99:23	0:0	8	date
op	99:28	0:0	8	=
call	99:30	99:61	8	date_Get
arg	99:40	99:61	9	&id->next_output_pts
op	99:40	0:0	10	&
water	99:41	0:0	10	id
op	99:43	0:0	10	->
water	99:45	0:0	10	next_output_pts
water	99:62	0:0	8	;
call	100:16	100:49	8	vlc_mutex_lock
arg	100:32	100:49	9	&p_sys->lock_out
op	100:32	0:0	10	&
water	100:33	0:0	10	p_sys
op	100:38	0:0	10	->
water	100:40	0:0	10	lock_out
water	100:50	0:0	8	;
call	101:16	101:57	8	picture_fifo_Push
arg	101:35	101:49	9	p_sys->pp_pics
water	101:35	0:0	10	p_sys
op	101:40	0:0	10	->
water	101:42	0:0	10	pp_pics
arg	101:51	101:57	9	p_tmp
water	101:51	0:0	10	p_tmp
water	101:58	0:0	8	;
call	102:16	102:46	8	vlc_cond_signal
arg	102:33	102:46	9	&p_sys->cond
op	102:33	0:0	10	&
water	102:34	0:0	10	p_sys
op	102:39	0:0	10	->
water	102:41	0:0	10	cond
water	102:47	0:0	8	;
call	103:16	103:51	8	vlc_mutex_unlock
arg	103:34	103:51	9	&p_sys->lock_out
op	103:34	0:0	10	&
water	103:35	0:0	10	p_sys
op	103:40	0:0	10	->
water	103:42	0:0	10	lock_out
water	103:52	0:0	8	;
water	104:12	0:0	8	}
water	105:8	0:0	6	}
else	106:8	112:8	4
stmts	107:8	112:8	5	
water	107:8	0:0	6	{
decl	108:12	108:28	6	block_t	*p_block
water	109:12	0:0	6	p_pic
op	109:17	0:0	6	->
water	109:19	0:0	6	date
op	109:24	0:0	6	=
call	109:26	109:57	6	date_Get
arg	109:36	109:57	7	&id->next_output_pts
op	109:36	0:0	8	&
water	109:37	0:0	8	id
op	109:39	0:0	8	->
water	109:41	0:0	8	next_output_pts
water	109:58	0:0	6	;
water	110:12	0:0	6	p_block
op	110:20	0:0	6	=
call	110:22	110:73	6	id->p_encoder->pf_encode_video
arg	110:53	110:66	7	id->p_encoder
water	110:53	0:0	8	id
op	110:55	0:0	8	->
water	110:57	0:0	8	p_encoder
arg	110:68	110:73	7	p_pic
water	110:68	0:0	8	p_pic
water	110:74	0:0	6	;
call	111:12	111:44	6	block_ChainAppend
arg	111:31	111:34	7	out
water	111:31	0:0	8	out
arg	111:36	111:44	7	p_block
water	111:36	0:0	8	p_block
water	111:45	0:0	6	;
water	112:8	0:0	6	}
call	114:8	114:45	4	msg_Dbg
arg	114:17	114:25	5	p_stream
water	114:17	0:0	6	p_stream
arg	114:27	114:45	5	"duplicated frame"
water	114:27	0:0	6	"duplicated frame"
water	114:46	0:0	4	;
call	116:8	116:92	4	date_Increment
arg	116:24	116:44	5	&id->next_output_pts
op	116:24	0:0	6	&
water	116:25	0:0	6	id
op	116:27	0:0	6	->
water	116:29	0:0	6	next_output_pts
arg	116:46	116:92	5	id->p_encoder->fmt_in.video.i_frame_rate_base
water	116:46	0:0	6	id
op	116:48	0:0	6	->
water	116:50	0:0	6	p_encoder
op	116:59	0:0	6	->
water	116:61	0:0	6	fmt_in
op	116:67	0:0	6	.
water	116:68	0:0	6	video
op	116:73	0:0	6	.
water	116:74	0:0	6	i_frame_rate_base
water	116:93	0:0	4	;
water	117:8	0:0	4	b_need_duplicate
op	117:25	0:0	4	=
water	117:27	0:0	4	(
call	117:29	117:60	4	date_Get
arg	117:39	117:60	5	&id->next_output_pts
op	117:39	0:0	6	&
water	117:40	0:0	6	id
op	117:42	0:0	6	->
water	117:44	0:0	6	next_output_pts
op	117:62	0:0	4	+
water	117:64	0:0	4	id
op	117:66	0:0	4	->
water	117:68	0:0	4	i_output_frame_interval
water	117:92	0:0	4	)
op	117:94	0:0	4	<
water	118:27	0:0	4	(
water	118:29	0:0	4	original_date
water	118:43	0:0	4	)
water	118:44	0:0	4	;
water	119:4	0:0	4	}
if	120:4	121:33	2	(p_sys -> i_threads && p_pic2)
cond	120:8	120:28	3	p_sys -> i_threads && p_pic2
water	120:8	0:0	4	p_sys
op	120:13	0:0	4	->
water	120:15	0:0	4	i_threads
op	120:25	0:0	4	&&
water	120:28	0:0	4	p_pic2
stmts	121:8	121:33	3	
call	121:8	121:32	4	picture_Release
arg	121:25	121:32	5	p_pic2
water	121:25	0:0	6	p_pic2
water	121:33	0:0	4	;
else	122:4	123:32	2
stmts	122:9	123:32	3	
if	122:9	123:32	4	(p_sys -> i_threads == 0)
cond	122:14	122:34	5	p_sys -> i_threads == 0
water	122:14	0:0	6	p_sys
op	122:19	0:0	6	->
water	122:21	0:0	6	i_threads
op	122:31	0:0	6	==
water	122:34	0:0	6	0
stmts	123:8	123:32	5	
call	123:8	123:31	6	picture_Release
arg	123:25	123:31	7	p_pic
water	123:25	0:0	8	p_pic
water	123:32	0:0	6	;
