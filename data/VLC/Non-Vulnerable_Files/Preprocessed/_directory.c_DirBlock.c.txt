func	2:0	191:0	0	block_t *	DirBlock
params	2:18	0:0	1	
param	2:19	2:37	2	access_t *	p_access
stmnts	0:0	190:15	1	
decl	4:4	4:41	2	access_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	p_access
op	4:34	0:0	2	->
water	4:36	0:0	2	p_sys
decl	5:4	5:41	2	directory_t	*current
op	5:25	0:0	2	=
water	5:27	0:0	2	p_sys
op	5:32	0:0	2	->
water	5:34	0:0	2	current
if	6:4	7:19	2	(p_access -> info . b_eof)
cond	6:8	6:23	3	p_access -> info . b_eof
water	6:8	0:0	4	p_access
op	6:16	0:0	4	->
water	6:18	0:0	4	info
op	6:22	0:0	4	.
water	6:23	0:0	4	b_eof
stmts	7:8	7:19	3	
return	7:8	7:19	4	NULL
water	7:15	0:0	5	NULL
if	8:4	20:4	2	(p_sys -> header)
cond	8:8	8:15	3	p_sys -> header
water	8:8	0:0	4	p_sys
op	8:13	0:0	4	->
water	8:15	0:0	4	header
stmts	9:4	20:4	3	
water	9:4	0:0	4	{
water	10:8	0:0	4	static
water	10:15	0:0	4	const
water	10:21	0:0	4	char
water	10:26	0:0	4	header
op	10:32	0:0	4	[
op	10:33	0:0	4	]
op	10:35	0:0	4	=
water	11:12	0:0	4	"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
water	12:12	0:0	4	"<playlist version=\"1\" xmlns=\"http://xspf.org/ns/0/\" xmlns:vlc=\"http://www.videolan.org/vlc/playlist/ns/0/\">\n"
water	13:12	0:0	4	" <trackList>\n"
water	13:28	0:0	4	;
decl	14:8	14:58	4	block_t	*block
op	14:23	0:0	4	=
call	14:25	14:57	5	block_Alloc
arg	14:38	14:57	6	sizeof(header)-1
op	14:38	0:0	7	sizeof
water	14:45	0:0	7	(
water	14:46	0:0	7	header
water	14:52	0:0	7	)
op	14:54	0:0	7	-
water	14:56	0:0	7	1
if	15:8	16:22	4	(! block)
cond	15:12	15:13	5	! block
op	15:12	0:0	6	!
water	15:13	0:0	6	block
stmts	16:12	16:22	5	
goto	16:12	16:22	6	fatal
water	16:17	0:0	7	fatal
call	17:8	17:60	4	memcpy
arg	17:16	17:31	5	block->p_buffer
water	17:16	0:0	6	block
op	17:21	0:0	6	->
water	17:23	0:0	6	p_buffer
arg	17:33	17:39	5	header
water	17:33	0:0	6	header
arg	17:41	17:60	5	sizeof(header)-1
op	17:41	0:0	6	sizeof
water	17:48	0:0	6	(
water	17:49	0:0	6	header
water	17:55	0:0	6	)
op	17:57	0:0	6	-
water	17:59	0:0	6	1
water	17:61	0:0	4	;
water	18:8	0:0	4	p_sys
op	18:13	0:0	4	->
water	18:15	0:0	4	header
op	18:22	0:0	4	=
water	18:24	0:0	4	false
water	18:29	0:0	4	;
return	19:8	19:20	4	block
water	19:15	0:0	5	block
water	20:4	0:0	4	}
if	21:4	58:4	2	(current -> i >= current -> filec)
cond	21:8	21:31	3	current -> i >= current -> filec
water	21:8	0:0	4	current
op	21:15	0:0	4	->
water	21:17	0:0	4	i
op	21:19	0:0	4	>=
water	21:22	0:0	4	current
op	21:29	0:0	4	->
water	21:31	0:0	4	filec
stmts	22:4	58:4	3	
water	22:4	0:0	4	{
call	23:8	23:33	4	closedir
arg	23:18	23:33	5	current->handle
water	23:18	0:0	6	current
op	23:25	0:0	6	->
water	23:27	0:0	6	handle
water	23:34	0:0	4	;
water	24:8	0:0	4	p_sys
op	24:13	0:0	4	->
water	24:15	0:0	4	current
op	24:23	0:0	4	=
water	24:25	0:0	4	current
op	24:32	0:0	4	->
water	24:34	0:0	4	parent
water	24:40	0:0	4	;
call	25:8	25:26	4	free
arg	25:14	25:26	5	current->uri
water	25:14	0:0	6	current
op	25:21	0:0	6	->
water	25:23	0:0	6	uri
water	25:27	0:0	4	;
call	26:8	26:28	4	free
arg	26:14	26:28	5	current->filev
water	26:14	0:0	6	current
op	26:21	0:0	6	->
water	26:23	0:0	6	filev
water	26:29	0:0	4	;
call	28:8	28:27	4	free
arg	28:14	28:27	5	current->path
water	28:14	0:0	6	current
op	28:21	0:0	6	->
water	28:23	0:0	6	path
water	28:28	0:0	4	;
call	30:8	30:21	4	free
arg	30:14	30:21	5	current
water	30:14	0:0	6	current
water	30:22	0:0	4	;
if	31:8	45:8	4	(p_sys -> current == NULL)
cond	31:12	31:30	5	p_sys -> current == NULL
water	31:12	0:0	6	p_sys
op	31:17	0:0	6	->
water	31:19	0:0	6	current
op	31:27	0:0	6	==
water	31:30	0:0	6	NULL
stmts	32:8	45:8	5	
water	32:8	0:0	6	{
decl	33:12	33:24	6	char	*footer
decl	34:12	39:72	6	int	len
op	34:20	0:0	6	=
call	34:22	39:71	7	asprintf
arg	34:32	34:39	8	&footer
op	34:32	0:0	9	&
water	34:33	0:0	9	footer
arg	34:41	39:31	8	" </trackList>\n"" <extension application=\"http://www.videolan.org/""vlc/playlist/0\">\n""%s"" </extension>\n""</playlist>\n"
water	34:41	0:0	9	" </trackList>\n"
water	35:16	0:0	9	" <extension application=\"http://www.videolan.org/"
water	36:45	0:0	9	"vlc/playlist/0\">\n"
water	37:16	0:0	9	"%s"
water	38:16	0:0	9	" </extension>\n"
water	39:16	0:0	9	"</playlist>\n"
arg	39:33	39:71	8	p_sys->xspf_ext?p_sys->xspf_ext:""
water	39:33	0:0	9	p_sys
op	39:38	0:0	9	->
water	39:40	0:0	9	xspf_ext
water	39:49	0:0	9	?
water	39:51	0:0	9	p_sys
op	39:56	0:0	9	->
water	39:58	0:0	9	xspf_ext
water	39:67	0:0	9	:
water	39:69	0:0	9	""
if	40:12	41:26	6	(unlikely (len == - 1 ))
cond	40:16	40:34	7	unlikely (len == - 1 )
call	40:16	40:34	8	unlikely
arg	40:25	40:34	9	len==-1
water	40:25	0:0	10	len
op	40:29	0:0	10	==
op	40:32	0:0	10	-
water	40:33	0:0	10	1
stmts	41:16	41:26	7	
goto	41:16	41:26	8	fatal
water	41:21	0:0	9	fatal
decl	42:12	42:59	6	block_t	*block
op	42:27	0:0	6	=
call	42:29	42:58	7	block_heap_Alloc
arg	42:47	42:53	8	footer
water	42:47	0:0	9	footer
arg	42:55	42:58	8	len
water	42:55	0:0	9	len
water	43:12	0:0	6	p_access
op	43:20	0:0	6	->
water	43:22	0:0	6	info
op	43:26	0:0	6	.
water	43:27	0:0	6	b_eof
op	43:33	0:0	6	=
water	43:35	0:0	6	true
water	43:39	0:0	6	;
return	44:12	44:24	6	block
water	44:19	0:0	7	block
water	45:8	0:0	6	}
else	46:8	56:8	4
stmts	47:8	56:8	5	
water	47:8	0:0	6	{
decl	50:12	50:48	6	char	*old_xspf_ext
op	50:31	0:0	6	=
water	50:33	0:0	6	p_sys
op	50:38	0:0	6	->
water	50:40	0:0	6	xspf_ext
if	51:12	54:38	6	(old_xspf_ext != NULL &&asprintf (& p_sys -> xspf_ext ,"%s  </vlc:node>\n" ,old_xspf_ext ? old_xspf_ext : "" ) == - 1)
cond	51:16	53:64	7	old_xspf_ext != NULL &&asprintf (& p_sys -> xspf_ext ,"%s  </vlc:node>\n" ,old_xspf_ext ? old_xspf_ext : "" ) == - 1
water	51:16	0:0	8	old_xspf_ext
op	51:29	0:0	8	!=
water	51:32	0:0	8	NULL
op	52:13	0:0	8	&&
call	52:16	53:58	8	asprintf
arg	52:26	52:42	9	&p_sys->xspf_ext
op	52:26	0:0	10	&
water	52:27	0:0	10	p_sys
op	52:32	0:0	10	->
water	52:34	0:0	10	xspf_ext
arg	52:44	52:63	9	"%s  </vlc:node>\n"
water	52:44	0:0	10	"%s  </vlc:node>\n"
arg	53:26	53:58	9	old_xspf_ext?old_xspf_ext:""
water	53:26	0:0	10	old_xspf_ext
water	53:39	0:0	10	?
water	53:41	0:0	10	old_xspf_ext
water	53:54	0:0	10	:
water	53:56	0:0	10	""
op	53:60	0:0	8	==
op	53:63	0:0	8	-
water	53:64	0:0	8	1
stmts	54:16	54:38	7	
water	54:16	0:0	8	p_sys
op	54:21	0:0	8	->
water	54:23	0:0	8	xspf_ext
op	54:32	0:0	8	=
water	54:34	0:0	8	NULL
water	54:38	0:0	8	;
call	55:12	55:30	6	free
arg	55:18	55:30	7	old_xspf_ext
water	55:18	0:0	8	old_xspf_ext
water	55:31	0:0	6	;
water	56:8	0:0	6	}
return	57:8	57:19	4	NULL
water	57:15	0:0	5	NULL
water	58:4	0:0	4	}
decl	59:4	59:46	2	char	*entry
op	59:16	0:0	2	=
water	59:18	0:0	2	current
op	59:25	0:0	2	->
water	59:27	0:0	2	filev
op	59:32	0:0	2	[
water	59:33	0:0	2	current
op	59:40	0:0	2	->
water	59:42	0:0	2	i
op	59:43	0:0	2	++
op	59:45	0:0	2	]
if	61:4	134:4	2	(p_sys -> mode != MODE_COLLAPSE)
cond	61:8	61:23	3	p_sys -> mode != MODE_COLLAPSE
water	61:8	0:0	4	p_sys
op	61:13	0:0	4	->
water	61:15	0:0	4	mode
op	61:20	0:0	4	!=
water	61:23	0:0	4	MODE_COLLAPSE
stmts	62:4	134:4	3	
water	62:4	0:0	4	{
decl	63:8	63:19	4	DIR	*handle
decl	65:8	66:52	4	int	fd
op	65:15	0:0	4	=
call	65:17	66:51	5	vlc_openat
arg	65:29	65:52	6	dirfd(current->handle)
call	65:29	65:51	7	dirfd
arg	65:36	65:51	8	current->handle
water	65:36	0:0	9	current
op	65:43	0:0	9	->
water	65:45	0:0	9	handle
arg	65:54	65:59	6	entry
water	65:54	0:0	7	entry
arg	66:29	66:51	6	O_RDONLY|O_DIRECTORY
water	66:29	0:0	7	O_RDONLY
op	66:38	0:0	7	|
water	66:40	0:0	7	O_DIRECTORY
if	67:8	72:8	4	(fd == - 1)
cond	67:12	67:19	5	fd == - 1
water	67:12	0:0	6	fd
op	67:15	0:0	6	==
op	67:18	0:0	6	-
water	67:19	0:0	6	1
stmts	68:8	72:8	5	
water	68:8	0:0	6	{
if	69:12	70:27	6	(errno == ENOTDIR)
cond	69:16	69:25	7	errno == ENOTDIR
water	69:16	0:0	8	errno
op	69:22	0:0	8	==
water	69:25	0:0	8	ENOTDIR
stmts	70:16	70:27	7	
goto	70:16	70:27	8	notdir
water	70:21	0:0	9	notdir
goto	71:12	71:21	6	skip
water	71:17	0:0	7	skip
water	72:8	0:0	6	}
decl	73:8	73:22	4	struct stat	st
if	74:8	81:8	4	(fstat (fd ,& st ) || p_sys -> mode == MODE_NONE ||has_inode_loop (current ,st . st_dev ,st . st_ino ) || ( handle =fdopendir (fd ) ) == NULL)
cond	74:12	77:41	5	fstat (fd ,& st ) || p_sys -> mode == MODE_NONE ||has_inode_loop (current ,st . st_dev ,st . st_ino ) || ( handle =fdopendir (fd ) ) == NULL
call	74:12	74:26	6	fstat
arg	74:19	74:21	7	fd
water	74:19	0:0	8	fd
arg	74:23	74:26	7	&st
op	74:23	0:0	8	&
water	74:24	0:0	8	st
op	75:9	0:0	6	||
water	75:12	0:0	6	p_sys
op	75:17	0:0	6	->
water	75:19	0:0	6	mode
op	75:24	0:0	6	==
water	75:27	0:0	6	MODE_NONE
op	76:9	0:0	6	||
call	76:12	76:57	6	has_inode_loop
arg	76:28	76:35	7	current
water	76:28	0:0	8	current
arg	76:37	76:46	7	st.st_dev
water	76:37	0:0	8	st
op	76:39	0:0	8	.
water	76:40	0:0	8	st_dev
arg	76:48	76:57	7	st.st_ino
water	76:48	0:0	8	st
op	76:50	0:0	8	.
water	76:51	0:0	8	st_ino
op	77:9	0:0	6	||
water	77:12	0:0	6	(
water	77:13	0:0	6	handle
op	77:20	0:0	6	=
call	77:22	77:35	6	fdopendir
arg	77:33	77:35	7	fd
water	77:33	0:0	8	fd
water	77:36	0:0	6	)
op	77:38	0:0	6	==
water	77:41	0:0	6	NULL
stmts	78:8	81:8	5	
water	78:8	0:0	6	{
call	79:12	79:21	6	close
arg	79:19	79:21	7	fd
water	79:19	0:0	8	fd
water	79:22	0:0	6	;
goto	80:12	80:21	6	skip
water	80:17	0:0	7	skip
water	81:8	0:0	6	}
decl	83:8	83:18	4	char	*path
if	84:8	85:21	4	(asprintf (& path ,"%s/%s" ,current -> path ,entry ) == - 1)
cond	84:12	84:64	5	asprintf (& path ,"%s/%s" ,current -> path ,entry ) == - 1
call	84:12	84:58	6	asprintf
arg	84:22	84:27	7	&path
op	84:22	0:0	8	&
water	84:23	0:0	8	path
arg	84:29	84:36	7	"%s/%s"
water	84:29	0:0	8	"%s/%s"
arg	84:38	84:51	7	current->path
water	84:38	0:0	8	current
op	84:45	0:0	8	->
water	84:47	0:0	8	path
arg	84:53	84:58	7	entry
water	84:53	0:0	8	entry
op	84:60	0:0	6	==
op	84:63	0:0	6	-
water	84:64	0:0	6	1
stmts	85:12	85:21	5	
goto	85:12	85:21	6	skip
water	85:17	0:0	7	skip
if	86:8	87:23	4	(( handle =vlc_opendir (path ) ) == NULL)
cond	86:12	86:45	5	( handle =vlc_opendir (path ) ) == NULL
water	86:12	0:0	6	(
water	86:13	0:0	6	handle
op	86:20	0:0	6	=
call	86:22	86:39	6	vlc_opendir
arg	86:35	86:39	7	path
water	86:35	0:0	8	path
water	86:40	0:0	6	)
op	86:42	0:0	6	==
water	86:45	0:0	6	NULL
stmts	87:12	87:23	5	
goto	87:12	87:23	6	notdir
water	87:17	0:0	7	notdir
if	88:8	89:21	4	(p_sys -> mode == MODE_NONE)
cond	88:12	88:27	5	p_sys -> mode == MODE_NONE
water	88:12	0:0	6	p_sys
op	88:17	0:0	6	->
water	88:19	0:0	6	mode
op	88:24	0:0	6	==
water	88:27	0:0	6	MODE_NONE
stmts	89:12	89:21	5	
goto	89:12	89:21	6	skip
water	89:17	0:0	7	skip
decl	91:8	91:49	4	directory_t	*sub
op	91:25	0:0	4	=
call	91:27	91:48	5	malloc
arg	91:35	91:48	6	sizeof(*sub)
op	91:35	0:0	7	sizeof
water	91:42	0:0	7	(
op	91:43	0:0	7	*
water	91:44	0:0	7	sub
water	91:47	0:0	7	)
if	92:8	99:8	4	(unlikely (sub == NULL ))
cond	92:12	92:32	5	unlikely (sub == NULL )
call	92:12	92:32	6	unlikely
arg	92:21	92:32	7	sub==NULL
water	92:21	0:0	8	sub
op	92:25	0:0	8	==
water	92:28	0:0	8	NULL
stmts	93:8	99:8	5	
water	93:8	0:0	6	{
call	94:12	94:28	6	closedir
arg	94:22	94:28	7	handle
water	94:22	0:0	8	handle
water	94:29	0:0	6	;
call	96:12	96:22	6	free
arg	96:18	96:22	7	path
water	96:18	0:0	8	path
water	96:23	0:0	6	;
goto	98:12	98:21	6	skip
water	98:17	0:0	7	skip
water	99:8	0:0	6	}
water	100:8	0:0	4	sub
op	100:11	0:0	4	->
water	100:13	0:0	4	parent
op	100:20	0:0	4	=
water	100:22	0:0	4	current
water	100:29	0:0	4	;
water	101:8	0:0	4	sub
op	101:11	0:0	4	->
water	101:13	0:0	4	handle
op	101:20	0:0	4	=
water	101:22	0:0	4	handle
water	101:28	0:0	4	;
water	102:8	0:0	4	sub
op	102:11	0:0	4	->
water	102:13	0:0	4	filec
op	102:19	0:0	4	=
call	102:21	102:77	4	vlc_loaddir
arg	102:34	102:40	5	handle
water	102:34	0:0	6	handle
arg	102:42	102:53	5	&sub->filev
op	102:42	0:0	6	&
water	102:43	0:0	6	sub
op	102:46	0:0	6	->
water	102:48	0:0	6	filev
arg	102:55	102:62	5	visible
water	102:55	0:0	6	visible
arg	102:64	102:77	5	p_sys->compar
water	102:64	0:0	6	p_sys
op	102:69	0:0	6	->
water	102:71	0:0	6	compar
water	102:78	0:0	4	;
if	103:8	104:29	4	(sub -> filec < 0)
cond	103:12	103:25	5	sub -> filec < 0
water	103:12	0:0	6	sub
op	103:15	0:0	6	->
water	103:17	0:0	6	filec
op	103:23	0:0	6	<
water	103:25	0:0	6	0
stmts	104:12	104:29	5	
water	104:12	0:0	6	sub
op	104:15	0:0	6	->
water	104:17	0:0	6	filev
op	104:23	0:0	6	=
water	104:25	0:0	6	NULL
water	104:29	0:0	6	;
water	105:8	0:0	4	sub
op	105:11	0:0	4	->
water	105:13	0:0	4	i
op	105:15	0:0	4	=
water	105:17	0:0	4	0
water	105:18	0:0	4	;
water	107:8	0:0	4	sub
op	107:11	0:0	4	->
water	107:13	0:0	4	device
op	107:20	0:0	4	=
water	107:22	0:0	4	st
op	107:24	0:0	4	.
water	107:25	0:0	4	st_dev
water	107:31	0:0	4	;
water	108:8	0:0	4	sub
op	108:11	0:0	4	->
water	108:13	0:0	4	inode
op	108:19	0:0	4	=
water	108:21	0:0	4	st
op	108:23	0:0	4	.
water	108:24	0:0	4	st_ino
water	108:30	0:0	4	;
water	110:8	0:0	4	sub
op	110:11	0:0	4	->
water	110:13	0:0	4	path
op	110:18	0:0	4	=
water	110:20	0:0	4	path
water	110:24	0:0	4	;
water	112:8	0:0	4	p_sys
op	112:13	0:0	4	->
water	112:15	0:0	4	current
op	112:23	0:0	4	=
water	112:25	0:0	4	sub
water	112:28	0:0	4	;
decl	113:8	113:52	4	char	*encoded
op	113:22	0:0	4	=
call	113:24	113:51	5	encode_URI_component
arg	113:46	113:51	6	entry
water	113:46	0:0	7	entry
if	114:8	116:28	4	(encoded == NULL || (asprintf (& sub -> uri ,"%s/%s" ,current -> uri ,encoded ) == - 1 ))
cond	114:12	115:71	5	encoded == NULL || (asprintf (& sub -> uri ,"%s/%s" ,current -> uri ,encoded ) == - 1 )
water	114:12	0:0	6	encoded
op	114:20	0:0	6	==
water	114:23	0:0	6	NULL
op	115:9	0:0	6	||
water	115:12	0:0	6	(
call	115:13	115:64	6	asprintf
arg	115:23	115:32	7	&sub->uri
op	115:23	0:0	8	&
water	115:24	0:0	8	sub
op	115:27	0:0	8	->
water	115:29	0:0	8	uri
arg	115:34	115:41	7	"%s/%s"
water	115:34	0:0	8	"%s/%s"
arg	115:43	115:55	7	current->uri
water	115:43	0:0	8	current
op	115:50	0:0	8	->
water	115:52	0:0	8	uri
arg	115:57	115:64	7	encoded
water	115:57	0:0	8	encoded
op	115:66	0:0	6	==
op	115:69	0:0	6	-
water	115:70	0:0	6	1
water	115:71	0:0	6	)
stmts	116:13	116:28	5	
water	116:13	0:0	6	sub
op	116:16	0:0	6	->
water	116:18	0:0	6	uri
op	116:22	0:0	6	=
water	116:24	0:0	6	NULL
water	116:28	0:0	6	;
call	117:8	117:21	4	free
arg	117:14	117:21	5	encoded
water	117:14	0:0	6	encoded
water	117:22	0:0	4	;
if	118:8	122:8	4	(unlikely (sub -> uri == NULL ))
cond	118:12	118:37	5	unlikely (sub -> uri == NULL )
call	118:12	118:37	6	unlikely
arg	118:21	118:37	7	sub->uri==NULL
water	118:21	0:0	8	sub
op	118:24	0:0	8	->
water	118:26	0:0	8	uri
op	118:30	0:0	8	==
water	118:33	0:0	8	NULL
stmts	119:8	122:8	5	
water	119:8	0:0	6	{
call	120:12	120:23	6	free
arg	120:18	120:23	7	entry
water	120:18	0:0	8	entry
water	120:24	0:0	6	;
goto	121:12	121:22	6	fatal
water	121:17	0:0	7	fatal
water	122:8	0:0	6	}
decl	124:8	124:44	4	char	*old_xspf_ext
op	124:27	0:0	4	=
water	124:29	0:0	4	p_sys
op	124:34	0:0	4	->
water	124:36	0:0	4	xspf_ext
call	125:8	125:25	4	EnsureUTF8
arg	125:20	125:25	5	entry
water	125:20	0:0	6	entry
water	125:26	0:0	4	;
decl	126:8	126:55	4	char	*title
op	126:20	0:0	4	=
call	126:22	126:54	5	convert_xml_special_chars
arg	126:49	126:54	6	entry
water	126:49	0:0	7	entry
if	127:8	130:34	4	(old_xspf_ext != NULL &&asprintf (& p_sys -> xspf_ext ,"%s  <vlc:node title=\"%s\">\n" ,old_xspf_ext ,title ? title : "?" ) == - 1)
cond	127:12	129:61	5	old_xspf_ext != NULL &&asprintf (& p_sys -> xspf_ext ,"%s  <vlc:node title=\"%s\">\n" ,old_xspf_ext ,title ? title : "?" ) == - 1
water	127:12	0:0	6	old_xspf_ext
op	127:25	0:0	6	!=
water	127:28	0:0	6	NULL
op	128:9	0:0	6	&&
call	128:12	129:55	6	asprintf
arg	128:22	128:38	7	&p_sys->xspf_ext
op	128:22	0:0	8	&
water	128:23	0:0	8	p_sys
op	128:28	0:0	8	->
water	128:30	0:0	8	xspf_ext
arg	128:40	128:71	7	"%s  <vlc:node title=\"%s\">\n"
water	128:40	0:0	8	"%s  <vlc:node title=\"%s\">\n"
arg	129:22	129:34	7	old_xspf_ext
water	129:22	0:0	8	old_xspf_ext
arg	129:36	129:55	7	title?title:"?"
water	129:36	0:0	8	title
water	129:42	0:0	8	?
water	129:44	0:0	8	title
water	129:50	0:0	8	:
water	129:52	0:0	8	"?"
op	129:57	0:0	6	==
op	129:60	0:0	6	-
water	129:61	0:0	6	1
stmts	130:12	130:34	5	
water	130:12	0:0	6	p_sys
op	130:17	0:0	6	->
water	130:19	0:0	6	xspf_ext
op	130:28	0:0	6	=
water	130:30	0:0	6	NULL
water	130:34	0:0	6	;
call	131:8	131:26	4	free
arg	131:14	131:26	5	old_xspf_ext
water	131:14	0:0	6	old_xspf_ext
water	131:27	0:0	4	;
call	132:8	132:19	4	free
arg	132:14	132:19	5	title
water	132:14	0:0	6	title
water	132:20	0:0	4	;
goto	133:8	133:17	4	skip
water	133:13	0:0	5	skip
water	134:4	0:0	4	}
label	135:0	135:6	2	notdir :
if	137:4	159:4	2	(p_sys -> ignored_exts != NULL)
cond	137:8	137:31	3	p_sys -> ignored_exts != NULL
water	137:8	0:0	4	p_sys
op	137:13	0:0	4	->
water	137:15	0:0	4	ignored_exts
op	137:28	0:0	4	!=
water	137:31	0:0	4	NULL
stmts	138:4	159:4	3	
water	138:4	0:0	4	{
decl	139:8	139:46	4	const char	*ext
op	139:24	0:0	4	=
call	139:26	139:45	5	strrchr
arg	139:35	139:40	6	entry
water	139:35	0:0	7	entry
arg	139:42	139:45	6	'.'
water	139:42	0:0	7	'.'
if	140:8	158:8	4	(ext != NULL)
cond	140:12	140:19	5	ext != NULL
water	140:12	0:0	6	ext
op	140:16	0:0	6	!=
water	140:19	0:0	6	NULL
stmts	141:8	158:8	5	
water	141:8	0:0	6	{
decl	142:12	142:42	6	size_t	extlen
op	142:26	0:0	6	=
call	142:28	142:41	7	strlen
arg	142:36	142:41	8	++ext
op	142:36	0:0	9	++
water	142:38	0:0	9	ext
for	143:12	157:12	6	( const char * type = p_sys -> ignored_exts ,* end ;type [ 0 ];type = end + 1)
forinit	0:0	143:61	7	 const char * type = p_sys -> ignored_exts ,* end ;
decl	143:17	143:61	8	const char	*type
op	143:34	0:0	8	=
water	143:36	0:0	8	p_sys
op	143:41	0:0	8	->
water	143:43	0:0	8	ignored_exts
water	143:55	0:0	8	,
decl	143:17	143:61	8	const char	*end
cond	144:17	144:23	7	type [ 0 ]
water	144:17	0:0	8	type
op	144:21	0:0	8	[
water	144:22	0:0	8	0
op	144:23	0:0	8	]
forexpr	144:26	144:39	7	type = end + 1
water	144:26	0:0	8	type
op	144:31	0:0	8	=
water	144:33	0:0	8	end
op	144:37	0:0	8	+
water	144:39	0:0	8	1
stmts	145:12	157:12	7	
water	145:12	0:0	8	{
water	146:16	0:0	8	end
op	146:20	0:0	8	=
call	146:22	146:39	8	strchr
arg	146:30	146:34	9	type
water	146:30	0:0	10	type
arg	146:36	146:39	9	','
water	146:36	0:0	10	','
water	146:40	0:0	8	;
if	147:16	148:46	8	(end == NULL)
cond	147:20	147:27	9	end == NULL
water	147:20	0:0	10	end
op	147:24	0:0	10	==
water	147:27	0:0	10	NULL
stmts	148:20	148:46	9	
water	148:20	0:0	10	end
op	148:24	0:0	10	=
water	148:26	0:0	10	type
op	148:31	0:0	10	+
call	148:33	148:45	10	strlen
arg	148:41	148:45	11	type
water	148:41	0:0	12	type
water	148:46	0:0	10	;
if	149:16	154:16	8	(type + extlen == end && !strncasecmp (ext ,type ,extlen ))
cond	149:20	150:51	9	type + extlen == end && !strncasecmp (ext ,type ,extlen )
water	149:20	0:0	10	type
op	149:25	0:0	10	+
water	149:27	0:0	10	extlen
op	149:34	0:0	10	==
water	149:37	0:0	10	end
op	150:17	0:0	10	&&
op	150:20	0:0	10	!
call	150:21	150:51	10	strncasecmp
arg	150:34	150:37	11	ext
water	150:34	0:0	12	ext
arg	150:39	150:43	11	type
water	150:39	0:0	12	type
arg	150:45	150:51	11	extlen
water	150:45	0:0	12	extlen
stmts	151:16	154:16	9	
water	151:16	0:0	10	{
call	152:20	152:31	10	free
arg	152:26	152:31	11	entry
water	152:26	0:0	12	entry
water	152:32	0:0	10	;
return	153:20	153:31	10	NULL
water	153:27	0:0	11	NULL
water	154:16	0:0	10	}
if	155:16	156:25	8	(* end == '\0')
cond	155:20	155:28	9	* end == '\0'
op	155:20	0:0	10	*
water	155:21	0:0	10	end
op	155:25	0:0	10	==
water	155:28	0:0	10	'\0'
stmts	156:20	156:25	9	
break	156:20	156:25	10	
water	157:12	0:0	8	}
water	158:8	0:0	6	}
water	159:4	0:0	4	}
decl	160:4	160:48	2	char	*encoded
op	160:18	0:0	2	=
call	160:20	160:47	3	encode_URI_component
arg	160:42	160:47	4	entry
water	160:42	0:0	5	entry
call	161:4	161:15	2	free
arg	161:10	161:15	3	entry
water	161:10	0:0	4	entry
water	161:16	0:0	2	;
if	162:4	163:18	2	(encoded == NULL)
cond	162:8	162:19	3	encoded == NULL
water	162:8	0:0	4	encoded
op	162:16	0:0	4	==
water	162:19	0:0	4	NULL
stmts	163:8	163:18	3	
goto	163:8	163:18	4	fatal
water	163:13	0:0	5	fatal
decl	164:4	170:69	2	int	len
op	164:12	0:0	2	=
call	164:14	170:68	3	asprintf
arg	164:24	164:30	4	&entry
op	164:24	0:0	5	&
water	164:25	0:0	5	entry
arg	165:24	169:38	4	"  <track><location>%s/%s</location>\n""   <extension application=\"http://www.videolan.org/vlc/playlist/0\">\n""    <vlc:id>%d</vlc:id>\n""   </extension>\n""  </track>\n"
water	165:24	0:0	5	"  <track><location>%s/%s</location>\n"
water	166:24	0:0	5	"   <extension application=\"http://www.videolan.org/vlc/playlist/0\">\n"
water	167:24	0:0	5	"    <vlc:id>%d</vlc:id>\n"
water	168:24	0:0	5	"   </extension>\n"
water	169:24	0:0	5	"  </track>\n"
arg	170:24	170:36	4	current->uri
water	170:24	0:0	5	current
op	170:31	0:0	5	->
water	170:33	0:0	5	uri
arg	170:38	170:45	4	encoded
water	170:38	0:0	5	encoded
arg	170:47	170:68	4	p_sys->i_item_count++
water	170:47	0:0	5	p_sys
op	170:52	0:0	5	->
water	170:54	0:0	5	i_item_count
op	170:66	0:0	5	++
call	171:4	171:17	2	free
arg	171:10	171:17	3	encoded
water	171:10	0:0	4	encoded
water	171:18	0:0	2	;
if	172:4	173:18	2	(len == - 1)
cond	172:8	172:16	3	len == - 1
water	172:8	0:0	4	len
op	172:12	0:0	4	==
op	172:15	0:0	4	-
water	172:16	0:0	4	1
stmts	173:8	173:18	3	
goto	173:8	173:18	4	fatal
water	173:13	0:0	5	fatal
decl	175:4	175:40	2	char	*old_xspf_ext
op	175:23	0:0	2	=
water	175:25	0:0	2	p_sys
op	175:30	0:0	2	->
water	175:32	0:0	2	xspf_ext
if	176:4	179:30	2	(old_xspf_ext != NULL &&asprintf (& p_sys -> xspf_ext ,"%s   <vlc:item tid=\"%i\" />\n" ,old_xspf_ext ,p_sys -> i_item_count - 1 ) == - 1)
cond	176:8	178:61	3	old_xspf_ext != NULL &&asprintf (& p_sys -> xspf_ext ,"%s   <vlc:item tid=\"%i\" />\n" ,old_xspf_ext ,p_sys -> i_item_count - 1 ) == - 1
water	176:8	0:0	4	old_xspf_ext
op	176:21	0:0	4	!=
water	176:24	0:0	4	NULL
op	177:5	0:0	4	&&
call	177:8	178:55	4	asprintf
arg	177:18	177:34	5	&p_sys->xspf_ext
op	177:18	0:0	6	&
water	177:19	0:0	6	p_sys
op	177:24	0:0	6	->
water	177:26	0:0	6	xspf_ext
arg	177:36	177:68	5	"%s   <vlc:item tid=\"%i\" />\n"
water	177:36	0:0	6	"%s   <vlc:item tid=\"%i\" />\n"
arg	178:18	178:30	5	old_xspf_ext
water	178:18	0:0	6	old_xspf_ext
arg	178:32	178:55	5	p_sys->i_item_count-1
water	178:32	0:0	6	p_sys
op	178:37	0:0	6	->
water	178:39	0:0	6	i_item_count
op	178:52	0:0	6	-
water	178:54	0:0	6	1
op	178:57	0:0	4	==
op	178:60	0:0	4	-
water	178:61	0:0	4	1
stmts	179:8	179:30	3	
water	179:8	0:0	4	p_sys
op	179:13	0:0	4	->
water	179:15	0:0	4	xspf_ext
op	179:24	0:0	4	=
water	179:26	0:0	4	NULL
water	179:30	0:0	4	;
call	180:4	180:22	2	free
arg	180:10	180:22	3	old_xspf_ext
water	180:10	0:0	4	old_xspf_ext
water	180:23	0:0	2	;
decl	181:4	181:50	2	block_t	*block
op	181:19	0:0	2	=
call	181:21	181:49	3	block_heap_Alloc
arg	181:39	181:44	4	entry
water	181:39	0:0	5	entry
arg	181:46	181:49	4	len
water	181:46	0:0	5	len
if	182:4	183:18	2	(unlikely (block == NULL ))
cond	182:8	182:30	3	unlikely (block == NULL )
call	182:8	182:30	4	unlikely
arg	182:17	182:30	5	block==NULL
water	182:17	0:0	6	block
op	182:23	0:0	6	==
water	182:26	0:0	6	NULL
stmts	183:8	183:18	3	
goto	183:8	183:18	4	fatal
water	183:13	0:0	5	fatal
return	184:4	184:16	2	block
water	184:11	0:0	3	block
label	185:0	185:5	2	fatal :
water	186:4	0:0	2	p_access
op	186:12	0:0	2	->
water	186:14	0:0	2	info
op	186:18	0:0	2	.
water	186:19	0:0	2	b_eof
op	186:25	0:0	2	=
water	186:27	0:0	2	true
water	186:31	0:0	2	;
return	187:4	187:15	2	NULL
water	187:11	0:0	3	NULL
label	188:0	188:4	2	skip :
call	189:4	189:15	2	free
arg	189:10	189:15	3	entry
water	189:10	0:0	4	entry
water	189:16	0:0	2	;
return	190:4	190:15	2	NULL
water	190:11	0:0	3	NULL
