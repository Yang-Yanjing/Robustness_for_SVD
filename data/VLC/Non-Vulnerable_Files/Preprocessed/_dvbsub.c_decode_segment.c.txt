func	2:0	91:0	0	static void	decode_segment
params	2:26	0:0	1	
param	2:28	2:44	2	decoder_t *	p_dec
param	2:46	2:54	2	bs_t *	s
stmnts	0:0	90:4	1	
decl	4:4	4:39	2	decoder_sys_t	*p_sys
op	4:25	0:0	2	=
water	4:27	0:0	2	p_dec
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:14	2	int	i_type
decl	6:4	6:17	2	int	i_page_id
decl	7:4	7:14	2	int	i_size
call	9:4	9:18	2	bs_skip
arg	9:13	9:14	3	s
water	9:13	0:0	4	s
arg	9:16	9:18	3	8
water	9:16	0:0	4	8
water	9:19	0:0	2	;
water	11:4	0:0	2	i_type
op	11:11	0:0	2	=
call	11:13	11:27	2	bs_read
arg	11:22	11:23	3	s
water	11:22	0:0	4	s
arg	11:25	11:27	3	8
water	11:25	0:0	4	8
water	11:28	0:0	2	;
water	13:4	0:0	2	i_page_id
op	13:14	0:0	2	=
call	13:16	13:31	2	bs_read
arg	13:25	13:26	3	s
water	13:25	0:0	4	s
arg	13:28	13:31	3	16
water	13:28	0:0	4	16
water	13:32	0:0	2	;
water	15:4	0:0	2	i_size
op	15:11	0:0	2	=
call	15:13	15:28	2	bs_show
arg	15:22	15:23	3	s
water	15:22	0:0	4	s
arg	15:25	15:28	3	16
water	15:25	0:0	4	16
water	15:29	0:0	2	;
if	16:4	25:4	2	(( i_page_id != p_sys -> i_id ) && ( i_page_id != p_sys -> i_ancillary_id ))
cond	16:8	17:45	3	( i_page_id != p_sys -> i_id ) && ( i_page_id != p_sys -> i_ancillary_id )
water	16:8	0:0	4	(
water	16:10	0:0	4	i_page_id
op	16:20	0:0	4	!=
water	16:23	0:0	4	p_sys
op	16:28	0:0	4	->
water	16:30	0:0	4	i_id
water	16:35	0:0	4	)
op	16:37	0:0	4	&&
water	17:8	0:0	4	(
water	17:10	0:0	4	i_page_id
op	17:20	0:0	4	!=
water	17:23	0:0	4	p_sys
op	17:28	0:0	4	->
water	17:30	0:0	4	i_ancillary_id
water	17:45	0:0	4	)
stmts	18:4	25:4	3	
water	18:4	0:0	4	{
call	20:8	21:40	4	msg_Dbg
arg	20:17	20:22	5	p_dec
water	20:17	0:0	6	p_dec
arg	20:24	20:60	5	"subtitle skipped (page id: %i, %i)"
water	20:24	0:0	6	"subtitle skipped (page id: %i, %i)"
arg	21:17	21:26	5	i_page_id
water	21:17	0:0	6	i_page_id
arg	21:28	21:40	5	p_sys->i_id
water	21:28	0:0	6	p_sys
op	21:33	0:0	6	->
water	21:35	0:0	6	i_id
water	21:41	0:0	4	;
call	23:8	23:40	4	bs_skip
arg	23:17	23:18	5	s
water	23:17	0:0	6	s
arg	23:21	23:40	5	8*(2+i_size)
water	23:21	0:0	6	8
op	23:23	0:0	6	*
water	23:25	0:0	6	(
water	23:27	0:0	6	2
op	23:29	0:0	6	+
water	23:31	0:0	6	i_size
water	23:38	0:0	6	)
water	23:41	0:0	4	;
return	24:8	24:14	4	
water	25:4	0:0	4	}
if	26:4	35:4	2	(( p_sys -> i_ancillary_id != p_sys -> i_id ) && ( i_type == DVBSUB_ST_PAGE_COMPOSITION ) && ( i_page_id == p_sys -> i_ancillary_id ))
cond	26:8	28:45	3	( p_sys -> i_ancillary_id != p_sys -> i_id ) && ( i_type == DVBSUB_ST_PAGE_COMPOSITION ) && ( i_page_id == p_sys -> i_ancillary_id )
water	26:8	0:0	4	(
water	26:10	0:0	4	p_sys
op	26:15	0:0	4	->
water	26:17	0:0	4	i_ancillary_id
op	26:32	0:0	4	!=
water	26:35	0:0	4	p_sys
op	26:40	0:0	4	->
water	26:42	0:0	4	i_id
water	26:47	0:0	4	)
op	26:49	0:0	4	&&
water	27:8	0:0	4	(
water	27:10	0:0	4	i_type
op	27:17	0:0	4	==
water	27:20	0:0	4	DVBSUB_ST_PAGE_COMPOSITION
water	27:47	0:0	4	)
op	27:49	0:0	4	&&
water	28:8	0:0	4	(
water	28:10	0:0	4	i_page_id
op	28:20	0:0	4	==
water	28:23	0:0	4	p_sys
op	28:28	0:0	4	->
water	28:30	0:0	4	i_ancillary_id
water	28:45	0:0	4	)
stmts	29:4	35:4	3	
water	29:4	0:0	4	{
call	31:8	31:68	4	msg_Dbg
arg	31:17	31:22	5	p_dec
water	31:17	0:0	6	p_dec
arg	31:24	31:68	5	"skipped invalid ancillary subtitle packet"
water	31:24	0:0	6	"skipped invalid ancillary subtitle packet"
water	31:69	0:0	4	;
call	33:8	33:40	4	bs_skip
arg	33:17	33:18	5	s
water	33:17	0:0	6	s
arg	33:21	33:40	5	8*(2+i_size)
water	33:21	0:0	6	8
op	33:23	0:0	6	*
water	33:25	0:0	6	(
water	33:27	0:0	6	2
op	33:29	0:0	6	+
water	33:31	0:0	6	i_size
water	33:38	0:0	6	)
water	33:41	0:0	4	;
return	34:8	34:14	4	
water	35:4	0:0	4	}
if	37:4	38:55	2	(i_page_id == p_sys -> i_id)
cond	37:8	37:28	3	i_page_id == p_sys -> i_id
water	37:8	0:0	4	i_page_id
op	37:18	0:0	4	==
water	37:21	0:0	4	p_sys
op	37:26	0:0	4	->
water	37:28	0:0	4	i_id
stmts	38:8	38:55	3	
call	38:8	38:54	4	msg_Dbg
arg	38:17	38:22	5	p_dec
water	38:17	0:0	6	p_dec
arg	38:24	38:42	5	"segment (id: %i)"
water	38:24	0:0	6	"segment (id: %i)"
arg	38:44	38:54	5	i_page_id
water	38:44	0:0	6	i_page_id
water	38:55	0:0	4	;
else	39:4	40:65	2
stmts	40:8	40:65	3	
call	40:8	40:64	4	msg_Dbg
arg	40:17	40:22	5	p_dec
water	40:17	0:0	6	p_dec
arg	40:24	40:52	5	"ancillary segment (id: %i)"
water	40:24	0:0	6	"ancillary segment (id: %i)"
arg	40:54	40:64	5	i_page_id
water	40:54	0:0	6	i_page_id
water	40:65	0:0	4	;
switch	42:4	90:4	2	(i_type)
cond	42:12	42:12	3	i_type
water	42:12	0:0	4	i_type
stmts	43:4	90:4	3	
water	43:4	0:0	4	{
label	44:4	44:35	4	case DVBSUB_ST_PAGE_COMPOSITION :
call	46:8	46:50	4	msg_Dbg
arg	46:17	46:22	5	p_dec
water	46:17	0:0	6	p_dec
arg	46:24	46:50	5	"decode_page_composition"
water	46:24	0:0	6	"decode_page_composition"
water	46:51	0:0	4	;
call	48:8	48:42	4	decode_page_composition
arg	48:33	48:38	5	p_dec
water	48:33	0:0	6	p_dec
arg	48:40	48:42	5	s
water	48:40	0:0	6	s
water	48:43	0:0	4	;
break	49:8	49:13	4	
label	50:4	50:37	4	case DVBSUB_ST_REGION_COMPOSITION :
call	52:8	52:52	4	msg_Dbg
arg	52:17	52:22	5	p_dec
water	52:17	0:0	6	p_dec
arg	52:24	52:52	5	"decode_region_composition"
water	52:24	0:0	6	"decode_region_composition"
water	52:53	0:0	4	;
call	54:8	54:44	4	decode_region_composition
arg	54:35	54:40	5	p_dec
water	54:35	0:0	6	p_dec
arg	54:42	54:44	5	s
water	54:42	0:0	6	s
water	54:45	0:0	4	;
break	55:8	55:13	4	
label	56:4	56:34	4	case DVBSUB_ST_CLUT_DEFINITION :
call	58:8	58:38	4	msg_Dbg
arg	58:17	58:22	5	p_dec
water	58:17	0:0	6	p_dec
arg	58:24	58:38	5	"decode_clut"
water	58:24	0:0	6	"decode_clut"
water	58:39	0:0	4	;
call	60:8	60:30	4	decode_clut
arg	60:21	60:26	5	p_dec
water	60:21	0:0	6	p_dec
arg	60:28	60:30	5	s
water	60:28	0:0	6	s
water	60:31	0:0	4	;
break	61:8	61:13	4	
label	62:4	62:30	4	case DVBSUB_ST_OBJECT_DATA :
call	64:8	64:40	4	msg_Dbg
arg	64:17	64:22	5	p_dec
water	64:17	0:0	6	p_dec
arg	64:24	64:40	5	"decode_object"
water	64:24	0:0	6	"decode_object"
water	64:41	0:0	4	;
call	66:8	66:32	4	decode_object
arg	66:23	66:28	5	p_dec
water	66:23	0:0	6	p_dec
arg	66:30	66:32	5	s
water	66:30	0:0	6	s
water	66:33	0:0	4	;
break	67:8	67:13	4	
label	68:4	68:37	4	case DVBSUB_ST_DISPLAY_DEFINITION :
call	70:8	70:52	4	msg_Dbg
arg	70:17	70:22	5	p_dec
water	70:17	0:0	6	p_dec
arg	70:24	70:52	5	"decode_display_definition"
water	70:24	0:0	6	"decode_display_definition"
water	70:53	0:0	4	;
call	72:8	72:44	4	decode_display_definition
arg	72:35	72:40	5	p_dec
water	72:35	0:0	6	p_dec
arg	72:42	72:44	5	s
water	72:42	0:0	6	s
water	72:45	0:0	4	;
break	73:8	73:13	4	
label	74:4	74:31	4	case DVBSUB_ST_ENDOFDISPLAY :
call	76:8	76:41	4	msg_Dbg
arg	76:17	76:22	5	p_dec
water	76:17	0:0	6	p_dec
arg	76:24	76:41	5	"end of display"
water	76:24	0:0	6	"end of display"
water	76:42	0:0	4	;
call	78:8	78:40	4	bs_skip
arg	78:17	78:18	5	s
water	78:17	0:0	6	s
arg	78:21	78:40	5	8*(2+i_size)
water	78:21	0:0	6	8
op	78:23	0:0	6	*
water	78:25	0:0	6	(
water	78:27	0:0	6	2
op	78:29	0:0	6	+
water	78:31	0:0	6	i_size
water	78:38	0:0	6	)
water	78:41	0:0	4	;
break	79:8	79:13	4	
label	80:4	80:27	4	case DVBSUB_ST_STUFFING :
call	82:8	82:40	4	msg_Dbg
arg	82:17	82:22	5	p_dec
water	82:17	0:0	6	p_dec
arg	82:24	82:40	5	"skip stuffing"
water	82:24	0:0	6	"skip stuffing"
water	82:41	0:0	4	;
call	84:8	84:40	4	bs_skip
arg	84:17	84:18	5	s
water	84:17	0:0	6	s
arg	84:21	84:40	5	8*(2+i_size)
water	84:21	0:0	6	8
op	84:23	0:0	6	*
water	84:25	0:0	6	(
water	84:27	0:0	6	2
op	84:29	0:0	6	+
water	84:31	0:0	6	i_size
water	84:38	0:0	6	)
water	84:41	0:0	4	;
break	85:8	85:13	4	
label	86:4	86:11	4	default :
call	87:8	87:68	4	msg_Warn
arg	87:18	87:23	5	p_dec
water	87:18	0:0	6	p_dec
arg	87:25	87:59	5	"unsupported segment type: (%04x)"
water	87:25	0:0	6	"unsupported segment type: (%04x)"
arg	87:61	87:68	5	i_type
water	87:61	0:0	6	i_type
water	87:69	0:0	4	;
call	88:8	88:40	4	bs_skip
arg	88:17	88:18	5	s
water	88:17	0:0	6	s
arg	88:21	88:40	5	8*(2+i_size)
water	88:21	0:0	6	8
op	88:23	0:0	6	*
water	88:25	0:0	6	(
water	88:27	0:0	6	2
op	88:29	0:0	6	+
water	88:31	0:0	6	i_size
water	88:38	0:0	6	)
water	88:41	0:0	4	;
break	89:8	89:13	4	
water	90:4	0:0	4	}
