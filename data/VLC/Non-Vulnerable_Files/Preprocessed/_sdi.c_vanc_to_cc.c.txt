func	2:0	105:0	0	block_t *	vanc_to_cc
params	2:19	0:0	1	
param	2:20	2:37	2	vlc_object_t *	obj
param	2:39	2:52	2	uint16_t *	buf
param	2:54	2:66	2	size_t	words
stmnts	4:4	104:13	1	
if	4:4	7:4	2	(words < 3)
cond	4:8	4:16	3	words < 3
water	4:8	0:0	4	words
op	4:14	0:0	4	<
water	4:16	0:0	4	3
stmts	4:19	7:4	3	
water	4:19	0:0	4	{
call	5:8	5:61	4	msg_Err
arg	5:16	5:19	5	obj
water	5:16	0:0	6	obj
arg	5:21	5:54	5	"VANC line too small (%zu words)"
water	5:21	0:0	6	"VANC line too small (%zu words)"
arg	5:56	5:61	5	words
water	5:56	0:0	6	words
water	5:62	0:0	4	;
return	6:8	6:19	4	NULL
water	6:15	0:0	5	NULL
water	7:4	0:0	4	}
water	8:4	0:0	2	static
water	8:11	0:0	2	const
water	8:17	0:0	2	uint8_t
water	8:25	0:0	2	vanc_header
op	8:36	0:0	2	[
water	8:37	0:0	2	6
op	8:38	0:0	2	]
op	8:40	0:0	2	=
water	8:42	0:0	2	{
water	8:44	0:0	2	0
water	8:45	0:0	2	x00
water	8:48	0:0	2	,
water	8:50	0:0	2	0
water	8:51	0:0	2	x00
water	8:54	0:0	2	,
water	8:56	0:0	2	0
water	8:57	0:0	2	xff
water	8:60	0:0	2	,
water	8:62	0:0	2	0
water	8:63	0:0	2	x03
water	8:66	0:0	2	,
water	8:68	0:0	2	0
water	8:69	0:0	2	xff
water	8:72	0:0	2	,
water	8:74	0:0	2	0
water	8:75	0:0	2	x03
water	8:79	0:0	2	}
water	8:80	0:0	2	;
if	9:4	12:4	2	(memcmp (vanc_header ,buf ,3 * 2 ))
cond	9:8	9:36	3	memcmp (vanc_header ,buf ,3 * 2 )
call	9:8	9:36	4	memcmp
arg	9:15	9:26	5	vanc_header
water	9:15	0:0	6	vanc_header
arg	9:28	9:31	5	buf
water	9:28	0:0	6	buf
arg	9:33	9:36	5	3*2
water	9:33	0:0	6	3
op	9:34	0:0	6	*
water	9:35	0:0	6	2
stmts	9:39	12:4	3	
water	9:39	0:0	4	{
return	11:8	11:19	4	NULL
water	11:15	0:0	5	NULL
water	12:4	0:0	4	}
decl	13:4	13:40	2	size_t	len
op	13:15	0:0	2	=
water	13:17	0:0	2	(
water	13:18	0:0	2	buf
op	13:21	0:0	2	[
water	13:22	0:0	2	5
op	13:23	0:0	2	]
op	13:25	0:0	2	&
water	13:27	0:0	2	0
water	13:28	0:0	2	xff
water	13:31	0:0	2	)
op	13:33	0:0	2	+
water	13:35	0:0	2	6
op	13:37	0:0	2	+
water	13:39	0:0	2	1
if	14:4	17:4	2	(len > words)
cond	14:8	14:14	3	len > words
water	14:8	0:0	4	len
op	14:12	0:0	4	>
water	14:14	0:0	4	words
stmts	14:21	17:4	3	
water	14:21	0:0	4	{
call	15:8	15:71	4	msg_Err
arg	15:16	15:19	5	obj
water	15:16	0:0	6	obj
arg	15:21	15:59	5	"Data Count (%zu) > line length (%zu)"
water	15:21	0:0	6	"Data Count (%zu) > line length (%zu)"
arg	15:61	15:64	5	len
water	15:61	0:0	6	len
arg	15:66	15:71	5	words
water	15:66	0:0	6	words
water	15:72	0:0	4	;
return	16:8	16:19	4	NULL
water	16:15	0:0	5	NULL
water	17:4	0:0	4	}
decl	18:4	18:25	2	uint16_t	vanc_sum
op	18:22	0:0	2	=
water	18:24	0:0	2	0
for	19:4	30:4	2	( size_t i = 3 ;i < len - 1;i ++)
forinit	0:0	19:21	3	 size_t i = 3 ;
decl	19:9	19:21	4	size_t	i
op	19:18	0:0	4	=
water	19:20	0:0	4	3
cond	19:23	19:33	3	i < len - 1
water	19:23	0:0	4	i
op	19:25	0:0	4	<
water	19:27	0:0	4	len
op	19:31	0:0	4	-
water	19:33	0:0	4	1
forexpr	19:36	19:37	3	i ++
water	19:36	0:0	4	i
op	19:37	0:0	4	++
stmts	19:41	30:4	3	
water	19:41	0:0	4	{
decl	20:8	20:27	4	uint16_t	v
op	20:19	0:0	4	=
water	20:21	0:0	4	buf
op	20:24	0:0	4	[
water	20:25	0:0	4	i
op	20:26	0:0	4	]
decl	21:8	21:23	4	int	np
op	21:15	0:0	4	=
water	21:17	0:0	4	v
op	21:19	0:0	4	>>
water	21:22	0:0	4	8
decl	22:8	22:32	4	int	p
op	22:14	0:0	4	=
call	22:16	22:31	5	parity
arg	22:23	22:31	6	v&0xff
water	22:23	0:0	7	v
op	22:25	0:0	7	&
water	22:27	0:0	7	0
water	22:28	0:0	7	xff
if	23:8	26:8	4	(( ! ! p ^ ! ! ( v & 0 x100 ) ) || ( np != 1 && np != 2 ))
cond	23:12	23:56	5	( ! ! p ^ ! ! ( v & 0 x100 ) ) || ( np != 1 && np != 2 )
water	23:12	0:0	6	(
op	23:13	0:0	6	!
op	23:14	0:0	6	!
water	23:15	0:0	6	p
op	23:17	0:0	6	^
op	23:19	0:0	6	!
op	23:20	0:0	6	!
water	23:21	0:0	6	(
water	23:22	0:0	6	v
op	23:24	0:0	6	&
water	23:26	0:0	6	0
water	23:27	0:0	6	x100
water	23:31	0:0	6	)
water	23:32	0:0	6	)
op	23:34	0:0	6	||
water	23:37	0:0	6	(
water	23:38	0:0	6	np
op	23:41	0:0	6	!=
water	23:44	0:0	6	1
op	23:46	0:0	6	&&
water	23:49	0:0	6	np
op	23:52	0:0	6	!=
water	23:55	0:0	6	2
water	23:56	0:0	6	)
stmts	23:59	26:8	5	
water	23:59	0:0	6	{
call	24:12	24:59	6	msg_Err
arg	24:20	24:23	7	obj
water	24:20	0:0	8	obj
arg	24:25	24:56	7	"Parity incorrect for word %zu"
water	24:25	0:0	8	"Parity incorrect for word %zu"
arg	24:58	24:59	7	i
water	24:58	0:0	8	i
water	24:60	0:0	6	;
return	25:12	25:23	6	NULL
water	25:19	0:0	7	NULL
water	26:8	0:0	6	}
water	27:8	0:0	4	vanc_sum
op	27:17	0:0	4	+=
water	27:20	0:0	4	v
water	27:21	0:0	4	;
water	28:8	0:0	4	vanc_sum
op	28:17	0:0	4	&=
water	28:20	0:0	4	0
water	28:21	0:0	4	x1ff
water	28:25	0:0	4	;
water	29:8	0:0	4	buf
op	29:11	0:0	4	[
water	29:12	0:0	4	i
op	29:13	0:0	4	]
op	29:15	0:0	4	&=
water	29:18	0:0	4	0
water	29:19	0:0	4	xff
water	29:22	0:0	4	;
water	30:4	0:0	4	}
water	31:4	0:0	2	vanc_sum
op	31:13	0:0	2	|=
water	31:16	0:0	2	(
water	31:17	0:0	2	(
water	31:18	0:0	2	~vanc_sum
op	31:28	0:0	2	&
water	31:30	0:0	2	0
water	31:31	0:0	2	x100
water	31:35	0:0	2	)
op	31:37	0:0	2	<<
water	31:40	0:0	2	1
water	31:41	0:0	2	)
water	31:42	0:0	2	;
if	32:4	35:4	2	(buf [ len - 1 ] != vanc_sum)
cond	32:8	32:24	3	buf [ len - 1 ] != vanc_sum
water	32:8	0:0	4	buf
op	32:11	0:0	4	[
water	32:12	0:0	4	len
op	32:16	0:0	4	-
water	32:18	0:0	4	1
op	32:19	0:0	4	]
op	32:21	0:0	4	!=
water	32:24	0:0	4	vanc_sum
stmts	32:34	35:4	3	
water	32:34	0:0	4	{
call	33:8	33:86	4	msg_Err
arg	33:16	33:19	5	obj
water	33:16	0:0	6	obj
arg	33:21	33:64	5	"VANC checksum incorrect: 0x%.4x != 0x%.4x"
water	33:21	0:0	6	"VANC checksum incorrect: 0x%.4x != 0x%.4x"
arg	33:66	33:74	5	vanc_sum
water	33:66	0:0	6	vanc_sum
arg	33:76	33:86	5	buf[len-1]
water	33:76	0:0	6	buf
op	33:79	0:0	6	[
water	33:80	0:0	6	len
op	33:83	0:0	6	-
water	33:84	0:0	6	1
op	33:85	0:0	6	]
water	33:87	0:0	4	;
return	34:8	34:19	4	NULL
water	34:15	0:0	5	NULL
water	35:4	0:0	4	}
if	36:4	40:4	2	(buf [ 3 ] != 0 x61 || buf [ 4 ] != 0 x01)
cond	36:8	36:47	3	buf [ 3 ] != 0 x61 || buf [ 4 ] != 0 x01
water	36:8	0:0	4	buf
op	36:11	0:0	4	[
water	36:12	0:0	4	3
op	36:13	0:0	4	]
op	36:15	0:0	4	!=
water	36:18	0:0	4	0
water	36:19	0:0	4	x61
op	36:33	0:0	4	||
water	36:36	0:0	4	buf
op	36:39	0:0	4	[
water	36:40	0:0	4	4
op	36:41	0:0	4	]
op	36:43	0:0	4	!=
water	36:46	0:0	4	0
water	36:47	0:0	4	x01
stmts	36:73	40:4	3	
water	36:73	0:0	4	{
return	39:8	39:19	4	NULL
water	39:15	0:0	5	NULL
water	40:4	0:0	4	}
decl	42:4	42:27	2	uint16_t	*cdp
op	42:18	0:0	2	=
op	42:20	0:0	2	&
water	42:21	0:0	2	buf
op	42:24	0:0	2	[
water	42:25	0:0	2	6
op	42:26	0:0	2	]
if	43:4	46:4	2	(cdp [ 0 ] != 0 x96 || cdp [ 1 ] != 0 x69)
cond	43:8	43:37	3	cdp [ 0 ] != 0 x96 || cdp [ 1 ] != 0 x69
water	43:8	0:0	4	cdp
op	43:11	0:0	4	[
water	43:12	0:0	4	0
op	43:13	0:0	4	]
op	43:15	0:0	4	!=
water	43:18	0:0	4	0
water	43:19	0:0	4	x96
op	43:23	0:0	4	||
water	43:26	0:0	4	cdp
op	43:29	0:0	4	[
water	43:30	0:0	4	1
op	43:31	0:0	4	]
op	43:33	0:0	4	!=
water	43:36	0:0	4	0
water	43:37	0:0	4	x69
stmts	43:42	46:4	3	
water	43:42	0:0	4	{
call	44:8	44:71	4	msg_Err
arg	44:16	44:19	5	obj
water	44:16	0:0	6	obj
arg	44:21	44:55	5	"Invalid CDP header 0x%.2x 0x%.2x"
water	44:21	0:0	6	"Invalid CDP header 0x%.2x 0x%.2x"
arg	44:57	44:63	5	cdp[0]
water	44:57	0:0	6	cdp
op	44:60	0:0	6	[
water	44:61	0:0	6	0
op	44:62	0:0	6	]
arg	44:65	44:71	5	cdp[1]
water	44:65	0:0	6	cdp
op	44:68	0:0	6	[
water	44:69	0:0	6	1
op	44:70	0:0	6	]
water	44:72	0:0	4	;
return	45:8	45:19	4	NULL
water	45:15	0:0	5	NULL
water	46:4	0:0	4	}
water	47:4	0:0	2	len
op	47:8	0:0	2	-=
water	47:11	0:0	2	7
water	47:12	0:0	2	;
if	48:4	51:4	2	(cdp [ 2 ] != len)
cond	48:8	48:18	3	cdp [ 2 ] != len
water	48:8	0:0	4	cdp
op	48:11	0:0	4	[
water	48:12	0:0	4	2
op	48:13	0:0	4	]
op	48:15	0:0	4	!=
water	48:18	0:0	4	len
stmts	48:23	51:4	3	
water	48:23	0:0	4	{
call	49:8	49:53	4	msg_Err
arg	49:16	49:19	5	obj
water	49:16	0:0	6	obj
arg	49:21	49:40	5	"CDP len %d != %zu"
water	49:21	0:0	6	"CDP len %d != %zu"
arg	49:42	49:48	5	cdp[2]
water	49:42	0:0	6	cdp
op	49:45	0:0	6	[
water	49:46	0:0	6	2
op	49:47	0:0	6	]
arg	49:50	49:53	5	len
water	49:50	0:0	6	len
water	49:54	0:0	4	;
return	50:8	50:19	4	NULL
water	50:15	0:0	5	NULL
water	51:4	0:0	4	}
decl	52:4	52:23	2	uint8_t	cdp_sum
op	52:20	0:0	2	=
water	52:22	0:0	2	0
for	53:4	54:25	2	( size_t i = 0 ;i < len - 1;i ++)
forinit	0:0	53:21	3	 size_t i = 0 ;
decl	53:9	53:21	4	size_t	i
op	53:18	0:0	4	=
water	53:20	0:0	4	0
cond	53:23	53:33	3	i < len - 1
water	53:23	0:0	4	i
op	53:25	0:0	4	<
water	53:27	0:0	4	len
op	53:31	0:0	4	-
water	53:33	0:0	4	1
forexpr	53:36	53:37	3	i ++
water	53:36	0:0	4	i
op	53:37	0:0	4	++
stmts	54:8	54:25	3	
water	54:8	0:0	4	cdp_sum
op	54:16	0:0	4	+=
water	54:19	0:0	4	cdp
op	54:22	0:0	4	[
water	54:23	0:0	4	i
op	54:24	0:0	4	]
water	54:25	0:0	4	;
water	55:4	0:0	2	cdp_sum
op	55:12	0:0	2	=
water	55:14	0:0	2	cdp_sum
water	55:22	0:0	2	?
water	55:24	0:0	2	256
op	55:28	0:0	2	-
water	55:30	0:0	2	cdp_sum
water	55:38	0:0	2	:
water	55:40	0:0	2	0
water	55:41	0:0	2	;
if	56:4	59:4	2	(cdp [ len - 1 ] != cdp_sum)
cond	56:8	56:24	3	cdp [ len - 1 ] != cdp_sum
water	56:8	0:0	4	cdp
op	56:11	0:0	4	[
water	56:12	0:0	4	len
op	56:16	0:0	4	-
water	56:18	0:0	4	1
op	56:19	0:0	4	]
op	56:21	0:0	4	!=
water	56:24	0:0	4	cdp_sum
stmts	56:33	59:4	3	
water	56:33	0:0	4	{
call	57:8	57:81	4	msg_Err
arg	57:16	57:19	5	obj
water	57:16	0:0	6	obj
arg	57:21	57:60	5	"CDP checksum invalid 0x%.4x != 0x%.4x"
water	57:21	0:0	6	"CDP checksum invalid 0x%.4x != 0x%.4x"
arg	57:62	57:69	5	cdp_sum
water	57:62	0:0	6	cdp_sum
arg	57:71	57:81	5	cdp[len-1]
water	57:71	0:0	6	cdp
op	57:74	0:0	6	[
water	57:75	0:0	6	len
op	57:78	0:0	6	-
water	57:79	0:0	6	1
op	57:80	0:0	6	]
water	57:82	0:0	4	;
return	58:8	58:19	4	NULL
water	58:15	0:0	5	NULL
water	59:4	0:0	4	}
decl	60:4	60:25	2	uint8_t	rate
op	60:17	0:0	2	=
water	60:19	0:0	2	cdp
op	60:22	0:0	2	[
water	60:23	0:0	2	3
op	60:24	0:0	2	]
if	61:4	64:4	2	(! ( rate & 0 x0f ))
cond	61:8	61:21	3	! ( rate & 0 x0f )
op	61:8	0:0	4	!
water	61:9	0:0	4	(
water	61:10	0:0	4	rate
op	61:15	0:0	4	&
water	61:17	0:0	4	0
water	61:18	0:0	4	x0f
water	61:21	0:0	4	)
stmts	61:24	64:4	3	
water	61:24	0:0	4	{
call	62:8	62:60	4	msg_Err
arg	62:16	62:19	5	obj
water	62:16	0:0	6	obj
arg	62:21	62:54	5	"CDP frame rate invalid (0x%.2x)"
water	62:21	0:0	6	"CDP frame rate invalid (0x%.2x)"
arg	62:56	62:60	5	rate
water	62:56	0:0	6	rate
water	62:61	0:0	4	;
return	63:8	63:19	4	NULL
water	63:15	0:0	5	NULL
water	64:4	0:0	4	}
water	65:4	0:0	2	rate
op	65:9	0:0	2	>>=
water	65:13	0:0	2	4
water	65:14	0:0	2	;
if	66:4	69:4	2	(rate > 8)
cond	66:8	66:15	3	rate > 8
water	66:8	0:0	4	rate
op	66:13	0:0	4	>
water	66:15	0:0	4	8
stmts	66:18	69:4	3	
water	66:18	0:0	4	{
call	67:8	67:60	4	msg_Err
arg	67:16	67:19	5	obj
water	67:16	0:0	6	obj
arg	67:21	67:54	5	"CDP frame rate invalid (0x%.2x)"
water	67:21	0:0	6	"CDP frame rate invalid (0x%.2x)"
arg	67:56	67:60	5	rate
water	67:56	0:0	6	rate
water	67:61	0:0	4	;
return	68:8	68:19	4	NULL
water	68:15	0:0	5	NULL
water	69:4	0:0	4	}
if	70:4	73:4	2	(! ( cdp [ 4 ] & 0 x43 ))
cond	70:8	70:23	3	! ( cdp [ 4 ] & 0 x43 )
op	70:8	0:0	4	!
water	70:9	0:0	4	(
water	70:10	0:0	4	cdp
op	70:13	0:0	4	[
water	70:14	0:0	4	4
op	70:15	0:0	4	]
op	70:17	0:0	4	&
water	70:19	0:0	4	0
water	70:20	0:0	4	x43
water	70:23	0:0	4	)
stmts	70:83	73:4	3	
water	70:83	0:0	4	{
call	71:8	71:57	4	msg_Err
arg	71:16	71:19	5	obj
water	71:16	0:0	6	obj
arg	71:21	71:49	5	"CDP flags invalid (0x%.2x)"
water	71:21	0:0	6	"CDP flags invalid (0x%.2x)"
arg	71:51	71:57	5	cdp[4]
water	71:51	0:0	6	cdp
op	71:54	0:0	6	[
water	71:55	0:0	6	4
op	71:56	0:0	6	]
water	71:58	0:0	4	;
return	72:8	72:19	4	NULL
water	72:15	0:0	5	NULL
water	73:4	0:0	4	}
decl	74:4	74:41	2	uint16_t	hdr
op	74:17	0:0	2	=
water	74:19	0:0	2	(
water	74:20	0:0	2	cdp
op	74:23	0:0	2	[
water	74:24	0:0	2	5
op	74:25	0:0	2	]
op	74:27	0:0	2	<<
water	74:30	0:0	2	8
water	74:31	0:0	2	)
op	74:33	0:0	2	|
water	74:35	0:0	2	cdp
op	74:38	0:0	2	[
water	74:39	0:0	2	6
op	74:40	0:0	2	]
if	75:4	78:4	2	(cdp [ 7 ] != 0 x72)
cond	75:8	75:19	3	cdp [ 7 ] != 0 x72
water	75:8	0:0	4	cdp
op	75:11	0:0	4	[
water	75:12	0:0	4	7
op	75:13	0:0	4	]
op	75:15	0:0	4	!=
water	75:18	0:0	4	0
water	75:19	0:0	4	x72
stmts	75:40	78:4	3	
water	75:40	0:0	4	{
call	76:8	76:55	4	msg_Err
arg	76:16	76:19	5	obj
water	76:16	0:0	6	obj
arg	76:21	76:47	5	"Invalid ccdata_id 0x%.2x"
water	76:21	0:0	6	"Invalid ccdata_id 0x%.2x"
arg	76:49	76:55	5	cdp[7]
water	76:49	0:0	6	cdp
op	76:52	0:0	6	[
water	76:53	0:0	6	7
op	76:54	0:0	6	]
water	76:56	0:0	4	;
return	77:8	77:19	4	NULL
water	77:15	0:0	5	NULL
water	78:4	0:0	4	}
water	79:4	0:0	2	unsigned
water	79:13	0:0	2	cc_count
op	79:22	0:0	2	=
water	79:24	0:0	2	cdp
op	79:27	0:0	2	[
water	79:28	0:0	2	8
op	79:29	0:0	2	]
water	79:30	0:0	2	;
if	80:4	83:4	2	(! ( cc_count & 0 xe0 ))
cond	80:8	80:25	3	! ( cc_count & 0 xe0 )
op	80:8	0:0	4	!
water	80:9	0:0	4	(
water	80:10	0:0	4	cc_count
op	80:19	0:0	4	&
water	80:21	0:0	4	0
water	80:22	0:0	4	xe0
water	80:25	0:0	4	)
stmts	80:28	83:4	3	
water	80:28	0:0	4	{
call	81:8	81:56	4	msg_Err
arg	81:16	81:19	5	obj
water	81:16	0:0	6	obj
arg	81:21	81:46	5	"Invalid cc_count 0x%.2x"
water	81:21	0:0	6	"Invalid cc_count 0x%.2x"
arg	81:48	81:56	5	cc_count
water	81:48	0:0	6	cc_count
water	81:57	0:0	4	;
return	82:8	82:19	4	NULL
water	82:15	0:0	5	NULL
water	83:4	0:0	4	}
water	84:4	0:0	2	cc_count
op	84:13	0:0	2	&=
water	84:16	0:0	2	0
water	84:17	0:0	2	x1f
water	84:20	0:0	2	;
if	85:4	88:4	2	(( len - 13 ) < cc_count * 3)
cond	85:8	85:32	3	( len - 13 ) < cc_count * 3
water	85:8	0:0	4	(
water	85:9	0:0	4	len
op	85:13	0:0	4	-
water	85:15	0:0	4	13
water	85:17	0:0	4	)
op	85:19	0:0	4	<
water	85:21	0:0	4	cc_count
op	85:30	0:0	4	*
water	85:32	0:0	4	3
stmts	85:35	88:4	3	
water	85:35	0:0	4	{
call	86:8	86:74	4	msg_Err
arg	86:16	86:19	5	obj
water	86:16	0:0	6	obj
arg	86:21	86:50	5	"Invalid cc_count %d (> %zu)"
water	86:21	0:0	6	"Invalid cc_count %d (> %zu)"
arg	86:52	86:64	5	cc_count*3
water	86:52	0:0	6	cc_count
op	86:61	0:0	6	*
water	86:63	0:0	6	3
arg	86:66	86:74	5	len-13
water	86:66	0:0	6	len
op	86:70	0:0	6	-
water	86:72	0:0	6	13
water	86:75	0:0	4	;
return	87:8	87:19	4	NULL
water	87:15	0:0	5	NULL
water	88:4	0:0	4	}
if	89:4	92:4	2	(cdp [ len - 4 ] != 0 x74)
cond	89:8	89:25	3	cdp [ len - 4 ] != 0 x74
water	89:8	0:0	4	cdp
op	89:11	0:0	4	[
water	89:12	0:0	4	len
op	89:16	0:0	4	-
water	89:18	0:0	4	4
op	89:19	0:0	4	]
op	89:21	0:0	4	!=
water	89:24	0:0	4	0
water	89:25	0:0	4	x74
stmts	89:46	92:4	3	
water	89:46	0:0	4	{
call	90:8	90:59	4	msg_Err
arg	90:16	90:19	5	obj
water	90:16	0:0	6	obj
arg	90:21	90:47	5	"Invalid footer id 0x%.2x"
water	90:21	0:0	6	"Invalid footer id 0x%.2x"
arg	90:49	90:59	5	cdp[len-4]
water	90:49	0:0	6	cdp
op	90:52	0:0	6	[
water	90:53	0:0	6	len
op	90:56	0:0	6	-
water	90:57	0:0	6	4
op	90:58	0:0	6	]
water	90:60	0:0	4	;
return	91:8	91:19	4	NULL
water	91:15	0:0	5	NULL
water	92:4	0:0	4	}
decl	93:4	93:53	2	uint16_t	ftr
op	93:17	0:0	2	=
water	93:19	0:0	2	(
water	93:20	0:0	2	cdp
op	93:23	0:0	2	[
water	93:24	0:0	2	len
op	93:28	0:0	2	-
water	93:30	0:0	2	3
op	93:31	0:0	2	]
op	93:33	0:0	2	<<
water	93:36	0:0	2	8
water	93:37	0:0	2	)
op	93:39	0:0	2	|
water	93:41	0:0	2	cdp
op	93:44	0:0	2	[
water	93:45	0:0	2	len
op	93:49	0:0	2	-
water	93:51	0:0	2	2
op	93:52	0:0	2	]
if	94:4	97:4	2	(ftr != hdr)
cond	94:8	94:15	3	ftr != hdr
water	94:8	0:0	4	ftr
op	94:12	0:0	4	!=
water	94:15	0:0	4	hdr
stmts	94:20	97:4	3	
water	94:20	0:0	4	{
call	95:8	95:63	4	msg_Err
arg	95:16	95:19	5	obj
water	95:16	0:0	6	obj
arg	95:21	95:53	5	"Header 0x%.4x != Footer 0x%.4x"
water	95:21	0:0	6	"Header 0x%.4x != Footer 0x%.4x"
arg	95:55	95:58	5	hdr
water	95:55	0:0	6	hdr
arg	95:60	95:63	5	ftr
water	95:60	0:0	6	ftr
water	95:64	0:0	4	;
return	96:8	96:19	4	NULL
water	96:15	0:0	5	NULL
water	97:4	0:0	4	}
decl	98:4	98:43	2	block_t	*cc
op	98:16	0:0	2	=
call	98:18	98:42	3	block_Alloc
arg	98:30	98:42	4	cc_count*3
water	98:30	0:0	5	cc_count
op	98:39	0:0	5	*
water	98:41	0:0	5	3
for	99:4	103:4	2	( size_t i = 0 ;i < cc_count;i ++)
forinit	0:0	99:21	3	 size_t i = 0 ;
decl	99:9	99:21	4	size_t	i
op	99:18	0:0	4	=
water	99:20	0:0	4	0
cond	99:23	99:27	3	i < cc_count
water	99:23	0:0	4	i
op	99:25	0:0	4	<
water	99:27	0:0	4	cc_count
forexpr	99:37	99:38	3	i ++
water	99:37	0:0	4	i
op	99:38	0:0	4	++
stmts	99:42	103:4	3	
water	99:42	0:0	4	{
water	100:8	0:0	4	cc
op	100:10	0:0	4	->
water	100:12	0:0	4	p_buffer
op	100:20	0:0	4	[
water	100:21	0:0	4	3
op	100:22	0:0	4	*
water	100:23	0:0	4	i
op	100:24	0:0	4	+
water	100:25	0:0	4	0
op	100:26	0:0	4	]
op	100:28	0:0	4	=
water	100:30	0:0	4	cdp
op	100:33	0:0	4	[
water	100:34	0:0	4	9
op	100:36	0:0	4	+
water	100:38	0:0	4	3
op	100:39	0:0	4	*
water	100:40	0:0	4	i
op	100:41	0:0	4	+
water	100:42	0:0	4	0
op	100:43	0:0	4	]
water	100:54	0:0	4	;
water	101:8	0:0	4	cc
op	101:10	0:0	4	->
water	101:12	0:0	4	p_buffer
op	101:20	0:0	4	[
water	101:21	0:0	4	3
op	101:22	0:0	4	*
water	101:23	0:0	4	i
op	101:24	0:0	4	+
water	101:25	0:0	4	1
op	101:26	0:0	4	]
op	101:28	0:0	4	=
water	101:30	0:0	4	cdp
op	101:33	0:0	4	[
water	101:34	0:0	4	9
op	101:36	0:0	4	+
water	101:38	0:0	4	3
op	101:39	0:0	4	*
water	101:40	0:0	4	i
op	101:41	0:0	4	+
water	101:42	0:0	4	1
op	101:43	0:0	4	]
water	101:44	0:0	4	;
water	102:8	0:0	4	cc
op	102:10	0:0	4	->
water	102:12	0:0	4	p_buffer
op	102:20	0:0	4	[
water	102:21	0:0	4	3
op	102:22	0:0	4	*
water	102:23	0:0	4	i
op	102:24	0:0	4	+
water	102:25	0:0	4	2
op	102:26	0:0	4	]
op	102:28	0:0	4	=
water	102:30	0:0	4	cdp
op	102:33	0:0	4	[
water	102:34	0:0	4	9
op	102:36	0:0	4	+
water	102:38	0:0	4	3
op	102:39	0:0	4	*
water	102:40	0:0	4	i
op	102:41	0:0	4	+
water	102:42	0:0	4	2
op	102:43	0:0	4	]
water	102:44	0:0	4	;
water	103:4	0:0	4	}
return	104:4	104:13	2	cc
water	104:11	0:0	3	cc
