decl	1:7	1:54	0	subpicture_t	*Convert
water	1:28	0:0	0	(
water	1:30	0:0	0	decoder_t
op	1:40	0:0	0	*
water	1:41	0:0	0	,
water	1:43	0:0	0	block_t
op	1:51	0:0	0	*
water	1:53	0:0	0	)
func	2:0	19:0	0	static subpicture_t *	Decode
params	2:27	0:0	1	
param	2:29	2:45	2	decoder_t *	p_dec
param	2:47	2:66	2	block_t * *	pp_block
stmnts	4:4	18:15	1	
if	4:4	8:4	2	(pp_block && * pp_block)
cond	4:8	4:21	3	pp_block && * pp_block
water	4:8	0:0	4	pp_block
op	4:17	0:0	4	&&
op	4:20	0:0	4	*
water	4:21	0:0	4	pp_block
stmts	5:4	8:4	3	
water	5:4	0:0	4	{
call	6:8	6:31	4	Push
arg	6:14	6:19	5	p_dec
water	6:14	0:0	6	p_dec
arg	6:21	6:31	5	*pp_block
op	6:21	0:0	6	*
water	6:22	0:0	6	pp_block
water	6:32	0:0	4	;
op	7:8	0:0	4	*
water	7:9	0:0	4	pp_block
op	7:18	0:0	4	=
water	7:20	0:0	4	NULL
water	7:24	0:0	4	;
water	8:4	0:0	4	}
for	9:4	17:4	2	(;;)
forinit	9:9	9:9	3	;
water	9:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	10:4	17:4	3	
water	10:4	0:0	4	{
decl	11:8	11:39	4	block_t	*p_block
op	11:25	0:0	4	=
call	11:27	11:38	5	Pop
arg	11:32	11:38	6	p_dec
water	11:32	0:0	7	p_dec
if	12:8	13:17	4	(! p_block)
cond	12:12	12:13	5	! p_block
op	12:12	0:0	6	!
water	12:13	0:0	6	p_block
stmts	13:12	13:17	5	
break	13:12	13:17	6	
decl	14:8	14:55	4	subpicture_t	*p_spu
op	14:28	0:0	4	=
call	14:30	14:54	5	Convert
arg	14:39	14:44	6	p_dec
water	14:39	0:0	7	p_dec
arg	14:46	14:54	6	p_block
water	14:46	0:0	7	p_block
if	15:8	16:24	4	(p_spu)
cond	15:12	15:12	5	p_spu
water	15:12	0:0	6	p_spu
stmts	16:12	16:24	5	
return	16:12	16:24	6	p_spu
water	16:19	0:0	7	p_spu
water	17:4	0:0	4	}
return	18:4	18:15	2	NULL
water	18:11	0:0	3	NULL
