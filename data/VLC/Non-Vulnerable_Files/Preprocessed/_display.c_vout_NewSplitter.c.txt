func	2:0	72:0	0	vout_display_t *	vout_NewSplitter
params	2:32	0:0	1	
param	2:33	2:52	2	vout_thread_t *	vout
param	3:33	3:61	2	const video_format_t *	source
param	4:33	4:66	2	const vout_display_state_t *	state
param	5:33	5:51	2	const char *	module
param	6:33	6:60	2	const char *	splitter_module
param	7:33	7:61	2	mtime_t	double_click_timeout
param	8:33	8:53	2	mtime_t	hide_timeout
stmnts	0:0	71:18	1	
decl	10:4	11:69	2	video_splitter_t	*splitter
op	10:31	0:0	2	=
call	11:8	11:68	3	video_splitter_New
arg	11:27	11:43	4	VLC_OBJECT(vout)
call	11:27	11:42	5	VLC_OBJECT
arg	11:38	11:42	6	vout
water	11:38	0:0	7	vout
arg	11:45	11:60	4	splitter_module
water	11:45	0:0	5	splitter_module
arg	11:62	11:68	4	source
water	11:62	0:0	5	source
if	12:4	13:19	2	(! splitter)
cond	12:8	12:9	3	! splitter
op	12:8	0:0	4	!
water	12:9	0:0	4	splitter
stmts	13:8	13:19	3	
return	13:8	13:19	4	NULL
water	13:15	0:0	5	NULL
decl	15:4	17:61	2	vout_display_t	*wrapper
op	15:28	0:0	2	=
call	16:8	17:60	3	DisplayNew
arg	16:19	16:23	4	vout
water	16:19	0:0	5	vout
arg	16:25	16:31	4	source
water	16:25	0:0	5	source
arg	16:33	16:38	4	state
water	16:33	0:0	5	state
arg	16:40	16:46	4	module
water	16:40	0:0	5	module
arg	16:48	16:52	4	true
water	16:48	0:0	5	true
arg	16:54	16:58	4	NULL
water	16:54	0:0	5	NULL
arg	17:20	17:40	4	double_click_timeout
water	17:20	0:0	5	double_click_timeout
arg	17:42	17:54	4	hide_timeout
water	17:42	0:0	5	hide_timeout
arg	17:56	17:60	4	NULL
water	17:56	0:0	5	NULL
if	18:4	21:4	2	(! wrapper)
cond	18:8	18:9	3	! wrapper
op	18:8	0:0	4	!
water	18:9	0:0	4	wrapper
stmts	18:18	21:4	3	
water	18:18	0:0	4	{
call	19:8	19:38	4	video_splitter_Delete
arg	19:30	19:38	5	splitter
water	19:30	0:0	6	splitter
water	19:39	0:0	4	;
return	20:8	20:19	4	NULL
water	20:15	0:0	5	NULL
water	21:4	0:0	4	}
decl	22:4	22:50	2	vout_display_sys_t	*sys
op	22:28	0:0	2	=
call	22:30	22:49	3	malloc
arg	22:37	22:49	4	sizeof(*sys)
op	22:37	0:0	5	sizeof
water	22:43	0:0	5	(
op	22:44	0:0	5	*
water	22:45	0:0	5	sys
water	22:48	0:0	5	)
if	23:4	24:15	2	(! sys)
cond	23:8	23:9	3	! sys
op	23:8	0:0	4	!
water	23:9	0:0	4	sys
stmts	24:8	24:15	3	
call	24:8	24:14	4	abort
water	24:15	0:0	4	;
water	25:4	0:0	2	sys
op	25:7	0:0	2	->
water	25:9	0:0	2	picture
op	25:17	0:0	2	=
call	25:19	25:67	2	calloc
arg	25:26	25:44	3	splitter->i_output
water	25:26	0:0	4	splitter
op	25:34	0:0	4	->
water	25:36	0:0	4	i_output
arg	25:46	25:67	3	sizeof(*sys->picture)
op	25:46	0:0	4	sizeof
water	25:52	0:0	4	(
op	25:53	0:0	4	*
water	25:54	0:0	4	sys
op	25:57	0:0	4	->
water	25:59	0:0	4	picture
water	25:66	0:0	4	)
water	25:68	0:0	2	;
if	26:4	27:15	2	(! sys -> picture)
cond	26:8	26:14	3	! sys -> picture
op	26:8	0:0	4	!
water	26:9	0:0	4	sys
op	26:12	0:0	4	->
water	26:14	0:0	4	picture
stmts	27:8	27:15	3	
call	27:8	27:14	4	abort
water	27:15	0:0	4	;
water	28:4	0:0	2	sys
op	28:7	0:0	2	->
water	28:9	0:0	2	splitter
op	28:18	0:0	2	=
water	28:20	0:0	2	splitter
water	28:28	0:0	2	;
water	29:4	0:0	2	sys
op	29:7	0:0	2	->
water	29:9	0:0	2	pool
op	29:18	0:0	2	=
water	29:20	0:0	2	NULL
water	29:24	0:0	2	;
water	30:4	0:0	2	wrapper
op	30:11	0:0	2	->
water	30:13	0:0	2	pool
op	30:21	0:0	2	=
water	30:23	0:0	2	SplitterPool
water	30:35	0:0	2	;
water	31:4	0:0	2	wrapper
op	31:11	0:0	2	->
water	31:13	0:0	2	prepare
op	31:21	0:0	2	=
water	31:23	0:0	2	SplitterPrepare
water	31:38	0:0	2	;
water	32:4	0:0	2	wrapper
op	32:11	0:0	2	->
water	32:13	0:0	2	display
op	32:21	0:0	2	=
water	32:23	0:0	2	SplitterDisplay
water	32:38	0:0	2	;
water	33:4	0:0	2	wrapper
op	33:11	0:0	2	->
water	33:13	0:0	2	control
op	33:21	0:0	2	=
water	33:23	0:0	2	SplitterControl
water	33:38	0:0	2	;
water	34:4	0:0	2	wrapper
op	34:11	0:0	2	->
water	34:13	0:0	2	manage
op	34:21	0:0	2	=
water	34:23	0:0	2	SplitterManage
water	34:37	0:0	2	;
water	35:4	0:0	2	wrapper
op	35:11	0:0	2	->
water	35:13	0:0	2	sys
op	35:21	0:0	2	=
water	35:23	0:0	2	sys
water	35:26	0:0	2	;
decl	37:4	37:58	2	video_splitter_owner_t	*owner
op	37:34	0:0	2	=
call	37:36	37:57	3	malloc
arg	37:43	37:57	4	sizeof(*owner)
op	37:43	0:0	5	sizeof
water	37:49	0:0	5	(
op	37:50	0:0	5	*
water	37:51	0:0	5	owner
water	37:56	0:0	5	)
if	38:4	39:15	2	(! owner)
cond	38:8	38:9	3	! owner
op	38:8	0:0	4	!
water	38:9	0:0	4	owner
stmts	39:8	39:15	3	
call	39:8	39:14	4	abort
water	39:15	0:0	4	;
water	40:4	0:0	2	owner
op	40:9	0:0	2	->
water	40:11	0:0	2	wrapper
op	40:19	0:0	2	=
water	40:21	0:0	2	wrapper
water	40:28	0:0	2	;
water	41:4	0:0	2	splitter
op	41:12	0:0	2	->
water	41:14	0:0	2	p_owner
op	41:22	0:0	2	=
water	41:24	0:0	2	owner
water	41:29	0:0	2	;
water	42:4	0:0	2	splitter
op	42:12	0:0	2	->
water	42:14	0:0	2	pf_picture_new
op	42:29	0:0	2	=
water	42:31	0:0	2	SplitterPictureNew
water	42:49	0:0	2	;
water	43:4	0:0	2	splitter
op	43:12	0:0	2	->
water	43:14	0:0	2	pf_picture_del
op	43:29	0:0	2	=
water	43:31	0:0	2	SplitterPictureDel
water	43:49	0:0	2	;
call	45:4	45:37	2	TAB_INIT
arg	45:13	45:23	3	sys->count
water	45:13	0:0	4	sys
op	45:16	0:0	4	->
water	45:18	0:0	4	count
arg	45:25	45:37	3	sys->display
water	45:25	0:0	4	sys
op	45:28	0:0	4	->
water	45:30	0:0	4	display
water	45:38	0:0	2	;
for	46:4	70:4	2	( int i = 0 ;i < splitter -> i_output;i ++)
forinit	0:0	46:18	3	 int i = 0 ;
decl	46:9	46:18	4	int	i
op	46:15	0:0	4	=
water	46:17	0:0	4	0
cond	46:20	46:34	3	i < splitter -> i_output
water	46:20	0:0	4	i
op	46:22	0:0	4	<
water	46:24	0:0	4	splitter
op	46:32	0:0	4	->
water	46:34	0:0	4	i_output
forexpr	46:44	46:45	3	i ++
water	46:44	0:0	4	i
op	46:45	0:0	4	++
stmts	46:49	70:4	3	
water	46:49	0:0	4	{
decl	47:8	47:34	4	vout_display_owner_t	owner
water	48:8	0:0	4	owner
op	48:13	0:0	4	.
water	48:14	0:0	4	event
op	48:25	0:0	4	=
water	48:27	0:0	4	SplitterEvent
water	48:40	0:0	4	;
water	49:8	0:0	4	owner
op	49:13	0:0	4	.
water	49:14	0:0	4	window_new
op	49:25	0:0	4	=
water	49:27	0:0	4	SplitterNewWindow
water	49:44	0:0	4	;
water	50:8	0:0	4	owner
op	50:13	0:0	4	.
water	50:14	0:0	4	window_del
op	50:25	0:0	4	=
water	50:27	0:0	4	SplitterDelWindow
water	50:44	0:0	4	;
decl	51:8	51:70	4	const video_splitter_output_t	*output
op	51:46	0:0	4	=
op	51:48	0:0	4	&
water	51:49	0:0	4	splitter
op	51:57	0:0	4	->
water	51:59	0:0	4	p_output
op	51:67	0:0	4	[
water	51:68	0:0	4	i
op	51:69	0:0	4	]
decl	52:8	52:35	4	vout_display_state_t	ostate
call	53:8	53:41	4	memset
arg	53:15	53:22	5	&ostate
op	53:15	0:0	6	&
water	53:16	0:0	6	ostate
arg	53:24	53:25	5	0
water	53:24	0:0	6	0
arg	53:27	53:41	5	sizeof(ostate)
op	53:27	0:0	6	sizeof
water	53:33	0:0	6	(
water	53:34	0:0	6	ostate
water	53:40	0:0	6	)
water	53:42	0:0	4	;
water	54:8	0:0	4	ostate
op	54:14	0:0	4	.
water	54:15	0:0	4	cfg
op	54:18	0:0	4	.
water	54:19	0:0	4	is_fullscreen
op	54:33	0:0	4	=
water	54:35	0:0	4	false
water	54:40	0:0	4	;
water	55:8	0:0	4	ostate
op	55:14	0:0	4	.
water	55:15	0:0	4	cfg
op	55:18	0:0	4	.
water	55:19	0:0	4	display
op	55:27	0:0	4	=
water	55:29	0:0	4	state
op	55:34	0:0	4	->
water	55:36	0:0	4	cfg
op	55:39	0:0	4	.
water	55:40	0:0	4	display
water	55:47	0:0	4	;
water	56:8	0:0	4	ostate
op	56:14	0:0	4	.
water	56:15	0:0	4	cfg
op	56:18	0:0	4	.
water	56:19	0:0	4	align
op	56:24	0:0	4	.
water	56:25	0:0	4	horizontal
op	56:36	0:0	4	=
water	56:38	0:0	4	0
water	56:39	0:0	4	;
water	57:8	0:0	4	ostate
op	57:14	0:0	4	.
water	57:15	0:0	4	cfg
op	57:18	0:0	4	.
water	57:19	0:0	4	align
op	57:24	0:0	4	.
water	57:25	0:0	4	vertical
op	57:34	0:0	4	=
water	57:36	0:0	4	0
water	57:37	0:0	4	;
water	58:8	0:0	4	ostate
op	58:14	0:0	4	.
water	58:15	0:0	4	cfg
op	58:18	0:0	4	.
water	58:19	0:0	4	is_display_filled
op	58:37	0:0	4	=
water	58:39	0:0	4	true
water	58:43	0:0	4	;
water	59:8	0:0	4	ostate
op	59:14	0:0	4	.
water	59:15	0:0	4	cfg
op	59:18	0:0	4	.
water	59:19	0:0	4	zoom
op	59:23	0:0	4	.
water	59:24	0:0	4	num
op	59:28	0:0	4	=
water	59:30	0:0	4	1
water	59:31	0:0	4	;
water	60:8	0:0	4	ostate
op	60:14	0:0	4	.
water	60:15	0:0	4	cfg
op	60:18	0:0	4	.
water	60:19	0:0	4	zoom
op	60:23	0:0	4	.
water	60:24	0:0	4	den
op	60:28	0:0	4	=
water	60:30	0:0	4	1
water	60:31	0:0	4	;
decl	61:8	64:86	4	vout_display_t	*vd
op	61:27	0:0	4	=
call	61:29	64:85	5	DisplayNew
arg	61:40	61:44	6	vout
water	61:40	0:0	7	vout
arg	61:46	61:58	6	&output->fmt
op	61:46	0:0	7	&
water	61:47	0:0	7	output
op	61:53	0:0	7	->
water	61:55	0:0	7	fmt
arg	61:60	61:67	6	&ostate
op	61:60	0:0	7	&
water	61:61	0:0	7	ostate
arg	62:43	62:91	6	output->psz_module?output->psz_module:module
water	62:43	0:0	7	output
op	62:49	0:0	7	->
water	62:51	0:0	7	psz_module
water	62:62	0:0	7	?
water	62:64	0:0	7	output
op	62:70	0:0	7	->
water	62:72	0:0	7	psz_module
water	62:83	0:0	7	:
water	62:85	0:0	7	module
arg	63:43	63:48	6	false
water	63:43	0:0	7	false
arg	63:50	63:57	6	wrapper
water	63:50	0:0	7	wrapper
arg	64:43	64:63	6	double_click_timeout
water	64:43	0:0	7	double_click_timeout
arg	64:65	64:77	6	hide_timeout
water	64:65	0:0	7	hide_timeout
arg	64:79	64:85	6	&owner
op	64:79	0:0	7	&
water	64:80	0:0	7	owner
if	65:8	68:8	4	(! vd)
cond	65:12	65:13	5	! vd
op	65:12	0:0	6	!
water	65:13	0:0	6	vd
stmts	65:17	68:8	5	
water	65:17	0:0	6	{
call	66:12	66:44	6	vout_DeleteDisplay
arg	66:31	66:38	7	wrapper
water	66:31	0:0	8	wrapper
arg	66:40	66:44	7	NULL
water	66:40	0:0	8	NULL
water	66:45	0:0	6	;
return	67:12	67:23	6	NULL
water	67:19	0:0	7	NULL
water	68:8	0:0	6	}
call	69:8	69:47	4	TAB_APPEND
arg	69:19	69:29	5	sys->count
water	69:19	0:0	6	sys
op	69:22	0:0	6	->
water	69:24	0:0	6	count
arg	69:31	69:43	5	sys->display
water	69:31	0:0	6	sys
op	69:34	0:0	6	->
water	69:36	0:0	6	display
arg	69:45	69:47	5	vd
water	69:45	0:0	6	vd
water	69:48	0:0	4	;
water	70:4	0:0	4	}
return	71:4	71:18	2	wrapper
water	71:11	0:0	3	wrapper
