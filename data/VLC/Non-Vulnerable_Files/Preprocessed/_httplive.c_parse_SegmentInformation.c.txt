func	2:0	47:0	0	static int	parse_SegmentInformation
params	2:35	0:0	1	
param	2:36	2:53	2	hls_stream_t *	hls
param	2:55	2:67	2	char *	p_read
param	2:69	2:82	2	int *	duration
stmnts	4:4	46:22	1	
call	4:4	4:14	2	assert
arg	4:11	4:14	3	hls
water	4:11	0:0	4	hls
water	4:15	0:0	2	;
call	5:4	5:17	2	assert
arg	5:11	5:17	3	p_read
water	5:11	0:0	4	p_read
water	5:18	0:0	2	;
decl	7:4	7:23	2	char	*p_next
op	7:17	0:0	2	=
water	7:19	0:0	2	NULL
decl	8:4	8:48	2	char	*token
op	8:16	0:0	2	=
call	8:18	8:47	3	strtok_r
arg	8:27	8:33	4	p_read
water	8:27	0:0	5	p_read
arg	8:35	8:38	4	":"
water	8:35	0:0	5	":"
arg	8:40	8:47	4	&p_next
op	8:40	0:0	5	&
water	8:41	0:0	5	p_next
if	9:4	10:27	2	(token == NULL)
cond	9:8	9:17	3	token == NULL
water	9:8	0:0	4	token
op	9:14	0:0	4	==
water	9:17	0:0	4	NULL
stmts	10:8	10:27	3	
return	10:8	10:27	4	VLC_EGENERIC
water	10:15	0:0	5	VLC_EGENERIC
water	12:4	0:0	2	token
op	12:10	0:0	2	=
call	12:12	12:39	2	strtok_r
arg	12:21	12:25	3	NULL
water	12:21	0:0	4	NULL
arg	12:27	12:30	3	","
water	12:27	0:0	4	","
arg	12:32	12:39	3	&p_next
op	12:32	0:0	4	&
water	12:33	0:0	4	p_next
water	12:40	0:0	2	;
if	13:4	14:27	2	(token == NULL)
cond	13:8	13:17	3	token == NULL
water	13:8	0:0	4	token
op	13:14	0:0	4	==
water	13:17	0:0	4	NULL
stmts	14:8	14:27	3	
return	14:8	14:27	4	VLC_EGENERIC
water	14:15	0:0	5	VLC_EGENERIC
decl	15:4	15:13	2	int	value
decl	16:4	16:16	2	char	*endptr
if	17:4	27:4	2	(hls -> version < 3)
cond	17:8	17:23	3	hls -> version < 3
water	17:8	0:0	4	hls
op	17:11	0:0	4	->
water	17:13	0:0	4	version
op	17:21	0:0	4	<
water	17:23	0:0	4	3
stmts	18:4	27:4	3	
water	18:4	0:0	4	{
water	19:8	0:0	4	errno
op	19:14	0:0	4	=
water	19:16	0:0	4	0
water	19:17	0:0	4	;
water	20:8	0:0	4	value
op	20:14	0:0	4	=
call	20:16	20:41	4	strtol
arg	20:23	20:28	5	token
water	20:23	0:0	6	token
arg	20:30	20:37	5	&endptr
op	20:30	0:0	6	&
water	20:31	0:0	6	endptr
arg	20:39	20:41	5	10
water	20:39	0:0	6	10
water	20:42	0:0	4	;
if	21:8	25:8	4	(token == endptr || errno == ERANGE)
cond	21:12	21:40	5	token == endptr || errno == ERANGE
water	21:12	0:0	6	token
op	21:18	0:0	6	==
water	21:21	0:0	6	endptr
op	21:28	0:0	6	||
water	21:31	0:0	6	errno
op	21:37	0:0	6	==
water	21:40	0:0	6	ERANGE
stmts	22:8	25:8	5	
water	22:8	0:0	6	{
op	23:12	0:0	6	*
water	23:13	0:0	6	duration
op	23:22	0:0	6	=
op	23:24	0:0	6	-
water	23:25	0:0	6	1
water	23:26	0:0	6	;
return	24:12	24:31	6	VLC_EGENERIC
water	24:19	0:0	7	VLC_EGENERIC
water	25:8	0:0	6	}
op	26:8	0:0	4	*
water	26:9	0:0	4	duration
op	26:18	0:0	4	=
water	26:20	0:0	4	value
water	26:25	0:0	4	;
water	27:4	0:0	4	}
else	28:4	42:4	2
stmts	29:4	42:4	3	
water	29:4	0:0	4	{
water	30:8	0:0	4	errno
op	30:14	0:0	4	=
water	30:16	0:0	4	0
water	30:17	0:0	4	;
decl	31:8	31:41	4	double	d
op	31:17	0:0	4	=
call	31:19	31:40	5	strtof
arg	31:26	31:31	6	token
water	31:26	0:0	7	token
arg	31:33	31:40	6	&endptr
op	31:33	0:0	7	&
water	31:34	0:0	7	endptr
if	32:8	36:8	4	(token == endptr || errno == ERANGE)
cond	32:12	32:40	5	token == endptr || errno == ERANGE
water	32:12	0:0	6	token
op	32:18	0:0	6	==
water	32:21	0:0	6	endptr
op	32:28	0:0	6	||
water	32:31	0:0	6	errno
op	32:37	0:0	6	==
water	32:40	0:0	6	ERANGE
stmts	33:8	36:8	5	
water	33:8	0:0	6	{
op	34:12	0:0	6	*
water	34:13	0:0	6	duration
op	34:22	0:0	6	=
op	34:24	0:0	6	-
water	34:25	0:0	6	1
water	34:26	0:0	6	;
return	35:12	35:31	6	VLC_EGENERIC
water	35:19	0:0	7	VLC_EGENERIC
water	36:8	0:0	6	}
if	37:8	38:32	4	(( d ) - ( ( int ) d ) >= 0 . 5)
cond	37:12	37:32	5	( d ) - ( ( int ) d ) >= 0 . 5
water	37:12	0:0	6	(
water	37:13	0:0	6	d
water	37:14	0:0	6	)
op	37:16	0:0	6	-
water	37:18	0:0	6	(
water	37:19	0:0	6	(
water	37:20	0:0	6	int
water	37:23	0:0	6	)
water	37:24	0:0	6	d
water	37:25	0:0	6	)
op	37:27	0:0	6	>=
water	37:30	0:0	6	0
op	37:31	0:0	6	.
water	37:32	0:0	6	5
stmts	38:12	38:32	5	
water	38:12	0:0	6	value
op	38:18	0:0	6	=
water	38:20	0:0	6	(
water	38:21	0:0	6	(
water	38:22	0:0	6	int
water	38:25	0:0	6	)
water	38:26	0:0	6	d
water	38:27	0:0	6	)
op	38:29	0:0	6	+
water	38:31	0:0	6	1
water	38:32	0:0	6	;
else	39:8	40:28	4
stmts	40:12	40:28	5	
water	40:12	0:0	6	value
op	40:18	0:0	6	=
water	40:20	0:0	6	(
water	40:21	0:0	6	(
water	40:22	0:0	6	int
water	40:25	0:0	6	)
water	40:26	0:0	6	d
water	40:27	0:0	6	)
water	40:28	0:0	6	;
op	41:8	0:0	4	*
water	41:9	0:0	4	duration
op	41:18	0:0	4	=
water	41:20	0:0	4	value
water	41:25	0:0	4	;
water	42:4	0:0	4	}
if	43:4	44:43	2	(* duration > hls -> max_segment_length)
cond	43:8	43:25	3	* duration > hls -> max_segment_length
op	43:8	0:0	4	*
water	43:9	0:0	4	duration
op	43:18	0:0	4	>
water	43:20	0:0	4	hls
op	43:23	0:0	4	->
water	43:25	0:0	4	max_segment_length
stmts	44:8	44:43	3	
water	44:8	0:0	4	hls
op	44:11	0:0	4	->
water	44:13	0:0	4	max_segment_length
op	44:32	0:0	4	=
op	44:34	0:0	4	*
water	44:35	0:0	4	duration
water	44:43	0:0	4	;
return	46:4	46:22	2	VLC_SUCCESS
water	46:11	0:0	3	VLC_SUCCESS
