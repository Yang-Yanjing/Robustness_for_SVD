func	2:0	50:0	0	static void	DecoderDecodeVideo
params	2:30	0:0	1	
param	2:32	2:48	2	decoder_t *	p_dec
param	2:50	2:67	2	block_t *	p_block
stmnts	0:0	49:4	1	
decl	4:4	4:49	2	decoder_owner_sys_t	*p_owner
op	4:33	0:0	2	=
water	4:35	0:0	2	p_dec
op	4:40	0:0	2	->
water	4:42	0:0	2	p_owner
decl	5:4	5:25	2	picture_t	*p_pic
decl	6:4	6:18	2	int	i_lost
op	6:15	0:0	2	=
water	6:17	0:0	2	0
decl	7:4	7:21	2	int	i_decoded
op	7:18	0:0	2	=
water	7:20	0:0	2	0
decl	8:4	8:23	2	int	i_displayed
op	8:20	0:0	2	=
water	8:22	0:0	2	0
while	9:4	38:4	2	(( p_pic =p_dec -> pf_decode_video (p_dec ,& p_block ) ))
cond	9:11	9:61	3	( p_pic =p_dec -> pf_decode_video (p_dec ,& p_block ) )
water	9:11	0:0	4	(
water	9:12	0:0	4	p_pic
op	9:18	0:0	4	=
call	9:20	9:60	4	p_dec->pf_decode_video
arg	9:44	9:49	5	p_dec
water	9:44	0:0	6	p_dec
arg	9:51	9:60	5	&p_block
op	9:51	0:0	6	&
water	9:52	0:0	6	p_block
water	9:61	0:0	4	)
stmts	10:4	38:4	3	
water	10:4	0:0	4	{
decl	11:8	11:48	4	vout_thread_t	*p_vout
op	11:31	0:0	4	=
water	11:33	0:0	4	p_owner
op	11:40	0:0	4	->
water	11:42	0:0	4	p_vout
if	12:8	19:8	4	(DecoderIsExitRequested (p_dec ))
cond	12:12	12:42	5	DecoderIsExitRequested (p_dec )
call	12:12	12:42	6	DecoderIsExitRequested
arg	12:36	12:42	7	p_dec
water	12:36	0:0	8	p_dec
stmts	13:8	19:8	5	
water	13:8	0:0	6	{
call	15:12	15:47	6	vout_ReleasePicture
arg	15:33	15:39	7	p_vout
water	15:33	0:0	8	p_vout
arg	15:41	15:47	7	p_pic
water	15:41	0:0	8	p_pic
water	15:48	0:0	6	;
if	16:12	17:40	6	(p_block)
cond	16:16	16:16	7	p_block
water	16:16	0:0	8	p_block
stmts	17:16	17:40	7	
call	17:16	17:39	8	block_Release
arg	17:31	17:39	9	p_block
water	17:31	0:0	10	p_block
water	17:40	0:0	8	;
break	18:12	18:17	6	
water	19:8	0:0	6	}
water	20:8	0:0	4	i_decoded
op	20:17	0:0	4	++
water	20:19	0:0	4	;
if	21:8	25:8	4	(p_owner -> i_preroll_end > VLC_TS_INVALID && p_pic -> date < p_owner -> i_preroll_end)
cond	21:12	21:78	5	p_owner -> i_preroll_end > VLC_TS_INVALID && p_pic -> date < p_owner -> i_preroll_end
water	21:12	0:0	6	p_owner
op	21:19	0:0	6	->
water	21:21	0:0	6	i_preroll_end
op	21:35	0:0	6	>
water	21:37	0:0	6	VLC_TS_INVALID
op	21:52	0:0	6	&&
water	21:55	0:0	6	p_pic
op	21:60	0:0	6	->
water	21:62	0:0	6	date
op	21:67	0:0	6	<
water	21:69	0:0	6	p_owner
op	21:76	0:0	6	->
water	21:78	0:0	6	i_preroll_end
stmts	22:8	25:8	5	
water	22:8	0:0	6	{
call	23:12	23:47	6	vout_ReleasePicture
arg	23:33	23:39	7	p_vout
water	23:33	0:0	8	p_vout
arg	23:41	23:47	7	p_pic
water	23:41	0:0	8	p_pic
water	23:48	0:0	6	;
continue	24:12	24:20	6	
water	25:8	0:0	6	}
if	26:8	33:8	4	(p_owner -> i_preroll_end > VLC_TS_INVALID)
cond	26:12	26:37	5	p_owner -> i_preroll_end > VLC_TS_INVALID
water	26:12	0:0	6	p_owner
op	26:19	0:0	6	->
water	26:21	0:0	6	i_preroll_end
op	26:35	0:0	6	>
water	26:37	0:0	6	VLC_TS_INVALID
stmts	27:8	33:8	5	
water	27:8	0:0	6	{
call	28:12	28:51	6	msg_Dbg
arg	28:21	28:26	7	p_dec
water	28:21	0:0	8	p_dec
arg	28:28	28:51	7	"End of video preroll"
water	28:28	0:0	8	"End of video preroll"
water	28:52	0:0	6	;
if	29:12	30:54	6	(p_vout)
cond	29:16	29:16	7	p_vout
water	29:16	0:0	8	p_vout
stmts	30:16	30:54	7	
call	30:16	30:53	8	vout_Flush
arg	30:28	30:34	9	p_vout
water	30:28	0:0	10	p_vout
arg	30:36	30:53	9	VLC_TS_INVALID+1
water	30:36	0:0	10	VLC_TS_INVALID
op	30:50	0:0	10	+
water	30:51	0:0	10	1
water	30:54	0:0	8	;
water	32:12	0:0	6	p_owner
op	32:19	0:0	6	->
water	32:21	0:0	6	i_preroll_end
op	32:35	0:0	6	=
water	32:37	0:0	6	VLC_TS_INVALID
water	32:51	0:0	6	;
water	33:8	0:0	6	}
if	34:8	36:40	4	(p_dec -> pf_get_cc && ( ! p_owner -> p_packetizer || ! p_owner -> p_packetizer -> pf_get_cc ))
cond	34:12	35:74	5	p_dec -> pf_get_cc && ( ! p_owner -> p_packetizer || ! p_owner -> p_packetizer -> pf_get_cc )
water	34:12	0:0	6	p_dec
op	34:17	0:0	6	->
water	34:19	0:0	6	pf_get_cc
op	34:29	0:0	6	&&
water	35:12	0:0	6	(
op	35:14	0:0	6	!
water	35:15	0:0	6	p_owner
op	35:22	0:0	6	->
water	35:24	0:0	6	p_packetizer
op	35:37	0:0	6	||
op	35:40	0:0	6	!
water	35:41	0:0	6	p_owner
op	35:48	0:0	6	->
water	35:50	0:0	6	p_packetizer
op	35:62	0:0	6	->
water	35:64	0:0	6	pf_get_cc
water	35:74	0:0	6	)
stmts	36:12	36:40	5	
call	36:12	36:39	6	DecoderGetCc
arg	36:26	36:31	7	p_dec
water	36:26	0:0	8	p_dec
arg	36:33	36:39	7	p_dec
water	36:33	0:0	8	p_dec
water	36:40	0:0	6	;
call	37:8	37:62	4	DecoderPlayVideo
arg	37:26	37:31	5	p_dec
water	37:26	0:0	6	p_dec
arg	37:33	37:38	5	p_pic
water	37:33	0:0	6	p_pic
arg	37:40	37:52	5	&i_displayed
op	37:40	0:0	6	&
water	37:41	0:0	6	i_displayed
arg	37:54	37:62	5	&i_lost
op	37:54	0:0	6	&
water	37:55	0:0	6	i_lost
water	37:63	0:0	4	;
water	38:4	0:0	4	}
decl	40:4	40:46	2	input_thread_t	*p_input
op	40:28	0:0	2	=
water	40:30	0:0	2	p_owner
op	40:37	0:0	2	->
water	40:39	0:0	2	p_input
if	41:4	49:4	2	(p_input != NULL && ( i_decoded > 0 || i_lost > 0 || i_displayed > 0 ))
cond	41:8	41:74	3	p_input != NULL && ( i_decoded > 0 || i_lost > 0 || i_displayed > 0 )
water	41:8	0:0	4	p_input
op	41:16	0:0	4	!=
water	41:19	0:0	4	NULL
op	41:24	0:0	4	&&
water	41:27	0:0	4	(
water	41:28	0:0	4	i_decoded
op	41:38	0:0	4	>
water	41:40	0:0	4	0
op	41:42	0:0	4	||
water	41:45	0:0	4	i_lost
op	41:52	0:0	4	>
water	41:54	0:0	4	0
op	41:56	0:0	4	||
water	41:59	0:0	4	i_displayed
op	41:71	0:0	4	>
water	41:73	0:0	4	0
water	41:74	0:0	4	)
stmts	42:4	49:4	3	
water	42:4	0:0	4	{
call	43:8	43:60	4	vlc_mutex_lock
arg	43:24	43:60	5	&p_input->p->counters.counters_lock
op	43:24	0:0	6	&
water	43:25	0:0	6	p_input
op	43:32	0:0	6	->
water	43:34	0:0	6	p
op	43:35	0:0	6	->
water	43:37	0:0	6	counters
op	43:45	0:0	6	.
water	43:46	0:0	6	counters_lock
water	43:61	0:0	4	;
call	44:8	44:76	4	stats_Update
arg	44:22	44:58	5	p_input->p->counters.p_decoded_video
water	44:22	0:0	6	p_input
op	44:29	0:0	6	->
water	44:31	0:0	6	p
op	44:32	0:0	6	->
water	44:34	0:0	6	counters
op	44:42	0:0	6	.
water	44:43	0:0	6	p_decoded_video
arg	44:60	44:69	5	i_decoded
water	44:60	0:0	6	i_decoded
arg	44:71	44:76	5	NULL
water	44:71	0:0	6	NULL
water	44:77	0:0	4	;
call	45:8	45:73	4	stats_Update
arg	45:22	45:58	5	p_input->p->counters.p_lost_pictures
water	45:22	0:0	6	p_input
op	45:29	0:0	6	->
water	45:31	0:0	6	p
op	45:32	0:0	6	->
water	45:34	0:0	6	counters
op	45:42	0:0	6	.
water	45:43	0:0	6	p_lost_pictures
arg	45:60	45:67	5	i_lost
water	45:60	0:0	6	i_lost
arg	45:69	45:73	5	NULL
water	45:69	0:0	6	NULL
water	45:74	0:0	4	;
call	46:8	47:39	4	stats_Update
arg	46:22	46:63	5	p_input->p->counters.p_displayed_pictures
water	46:22	0:0	6	p_input
op	46:29	0:0	6	->
water	46:31	0:0	6	p
op	46:32	0:0	6	->
water	46:34	0:0	6	counters
op	46:42	0:0	6	.
water	46:43	0:0	6	p_displayed_pictures
arg	47:22	47:33	5	i_displayed
water	47:22	0:0	6	i_displayed
arg	47:35	47:39	5	NULL
water	47:35	0:0	6	NULL
water	47:40	0:0	4	;
call	48:8	48:62	4	vlc_mutex_unlock
arg	48:26	48:62	5	&p_input->p->counters.counters_lock
op	48:26	0:0	6	&
water	48:27	0:0	6	p_input
op	48:34	0:0	6	->
water	48:36	0:0	6	p
op	48:37	0:0	6	->
water	48:39	0:0	6	counters
op	48:47	0:0	6	.
water	48:48	0:0	6	counters_lock
water	48:63	0:0	4	;
water	49:4	0:0	4	}
