func	2:0	104:0	0	static int	RenderYUVP
params	2:21	0:0	1	
param	2:23	2:41	2	filter_t *	p_filter
param	2:43	2:72	2	subpicture_region_t *	p_region
param	3:23	3:42	2	line_desc_t *	p_line
param	4:23	4:39	2	FT_BBox *	p_bbox
stmnts	6:4	103:22	1	
call	6:4	6:23	2	VLC_UNUSED
arg	6:15	6:23	3	p_filter
water	6:15	0:0	4	p_filter
water	6:24	0:0	2	;
water	7:4	0:0	2	static
water	7:11	0:0	2	const
water	7:17	0:0	2	uint8_t
water	7:25	0:0	2	pi_gamma
op	7:33	0:0	2	[
water	7:34	0:0	2	16
op	7:36	0:0	2	]
op	7:38	0:0	2	=
water	8:8	0:0	2	{
water	8:9	0:0	2	0
water	8:10	0:0	2	x00
water	8:13	0:0	2	,
water	8:15	0:0	2	0
water	8:16	0:0	2	x52
water	8:19	0:0	2	,
water	8:21	0:0	2	0
water	8:22	0:0	2	x84
water	8:25	0:0	2	,
water	8:27	0:0	2	0
water	8:28	0:0	2	x96
water	8:31	0:0	2	,
water	8:33	0:0	2	0
water	8:34	0:0	2	xb8
water	8:37	0:0	2	,
water	8:39	0:0	2	0
water	8:40	0:0	2	xca
water	8:43	0:0	2	,
water	8:45	0:0	2	0
water	8:46	0:0	2	xdc
water	8:49	0:0	2	,
water	8:51	0:0	2	0
water	8:52	0:0	2	xee
water	8:55	0:0	2	,
water	8:57	0:0	2	0
water	8:58	0:0	2	xff
water	8:61	0:0	2	,
water	9:10	0:0	2	0
water	9:11	0:0	2	xff
water	9:14	0:0	2	,
water	9:16	0:0	2	0
water	9:17	0:0	2	xff
water	9:20	0:0	2	,
water	9:22	0:0	2	0
water	9:23	0:0	2	xff
water	9:26	0:0	2	,
water	9:28	0:0	2	0
water	9:29	0:0	2	xff
water	9:32	0:0	2	,
water	9:34	0:0	2	0
water	9:35	0:0	2	xff
water	9:38	0:0	2	,
water	9:40	0:0	2	0
water	9:41	0:0	2	xff
water	9:44	0:0	2	,
water	9:46	0:0	2	0
water	9:47	0:0	2	xff
water	9:50	0:0	2	}
water	9:51	0:0	2	;
decl	10:4	10:18	2	uint8_t	*p_dst
decl	11:4	11:22	2	video_format_t	fmt
decl	12:4	12:24	2	int	i
water	12:9	0:0	2	,
decl	12:4	12:24	2	int	x
water	12:12	0:0	2	,
decl	12:4	12:24	2	int	y
water	12:15	0:0	2	,
decl	12:4	12:24	2	int	i_pitch
decl	13:4	13:25	2	uint8_t	i_y
water	13:15	0:0	2	,
decl	13:4	13:25	2	uint8_t	i_u
water	13:20	0:0	2	,
decl	13:4	13:25	2	uint8_t	i_v
call	15:4	15:44	2	video_format_Init
arg	15:23	15:27	3	&fmt
op	15:23	0:0	4	&
water	15:24	0:0	4	fmt
arg	15:29	15:44	3	VLC_CODEC_YUVP
water	15:29	0:0	4	VLC_CODEC_YUVP
water	15:45	0:0	2	;
water	16:4	0:0	2	fmt
op	16:7	0:0	2	.
water	16:8	0:0	2	i_width
op	16:25	0:0	2	=
water	17:4	0:0	2	fmt
op	17:7	0:0	2	.
water	17:8	0:0	2	i_visible_width
op	17:25	0:0	2	=
water	17:27	0:0	2	p_bbox
op	17:33	0:0	2	->
water	17:35	0:0	2	xMax
op	17:40	0:0	2	-
water	17:42	0:0	2	p_bbox
op	17:48	0:0	2	->
water	17:50	0:0	2	xMin
op	17:55	0:0	2	+
water	17:57	0:0	2	4
water	17:58	0:0	2	;
water	18:4	0:0	2	fmt
op	18:7	0:0	2	.
water	18:8	0:0	2	i_height
op	18:25	0:0	2	=
water	19:4	0:0	2	fmt
op	19:7	0:0	2	.
water	19:8	0:0	2	i_visible_height
op	19:25	0:0	2	=
water	19:27	0:0	2	p_bbox
op	19:33	0:0	2	->
water	19:35	0:0	2	yMax
op	19:40	0:0	2	-
water	19:42	0:0	2	p_bbox
op	19:48	0:0	2	->
water	19:50	0:0	2	yMin
op	19:55	0:0	2	+
water	19:57	0:0	2	4
water	19:58	0:0	2	;
call	20:4	20:33	2	assert
arg	20:12	20:33	3	!p_region->p_picture
op	20:12	0:0	4	!
water	20:13	0:0	4	p_region
op	20:21	0:0	4	->
water	20:23	0:0	4	p_picture
water	20:34	0:0	2	;
water	21:4	0:0	2	p_region
op	21:12	0:0	2	->
water	21:14	0:0	2	p_picture
op	21:24	0:0	2	=
call	21:26	21:54	2	picture_NewFromFormat
arg	21:49	21:54	3	&fmt
op	21:49	0:0	4	&
water	21:50	0:0	4	fmt
water	21:55	0:0	2	;
if	22:4	23:27	2	(! p_region -> p_picture)
cond	22:8	22:19	3	! p_region -> p_picture
op	22:8	0:0	4	!
water	22:9	0:0	4	p_region
op	22:17	0:0	4	->
water	22:19	0:0	4	p_picture
stmts	23:8	23:27	3	
return	23:8	23:27	4	VLC_EGENERIC
water	23:15	0:0	5	VLC_EGENERIC
water	24:4	0:0	2	fmt
op	24:7	0:0	2	.
water	24:8	0:0	2	p_palette
op	24:18	0:0	2	=
water	24:20	0:0	2	p_region
op	24:28	0:0	2	->
water	24:30	0:0	2	fmt
op	24:33	0:0	2	.
water	24:34	0:0	2	p_palette
water	24:44	0:0	2	?
water	24:46	0:0	2	p_region
op	24:54	0:0	2	->
water	24:56	0:0	2	fmt
op	24:59	0:0	2	.
water	24:60	0:0	2	p_palette
water	24:70	0:0	2	:
call	24:72	24:101	2	malloc
arg	24:79	24:101	3	sizeof(*fmt.p_palette)
op	24:79	0:0	4	sizeof
water	24:85	0:0	4	(
op	24:86	0:0	4	*
water	24:87	0:0	4	fmt
op	24:90	0:0	4	.
water	24:91	0:0	4	p_palette
water	24:100	0:0	4	)
water	24:102	0:0	2	;
water	25:4	0:0	2	p_region
op	25:12	0:0	2	->
water	25:14	0:0	2	fmt
op	25:18	0:0	2	=
water	25:20	0:0	2	fmt
water	25:23	0:0	2	;
decl	28:4	28:63	2	int	i_alpha
op	28:16	0:0	2	=
water	28:18	0:0	2	(
water	28:19	0:0	2	p_line
op	28:25	0:0	2	->
water	28:27	0:0	2	p_character
op	28:38	0:0	2	[
water	28:39	0:0	2	0
op	28:40	0:0	2	]
op	28:41	0:0	2	.
water	28:42	0:0	2	i_color
op	28:50	0:0	2	>>
water	28:53	0:0	2	24
water	28:55	0:0	2	)
op	28:57	0:0	2	&
water	28:59	0:0	2	0
water	28:60	0:0	2	xff
call	29:4	29:65	2	YUVFromRGB
arg	29:16	29:46	3	p_line->p_character[0].i_color
water	29:16	0:0	4	p_line
op	29:22	0:0	4	->
water	29:24	0:0	4	p_character
op	29:35	0:0	4	[
water	29:36	0:0	4	0
op	29:37	0:0	4	]
op	29:38	0:0	4	.
water	29:39	0:0	4	i_color
arg	29:48	29:52	3	&i_y
op	29:48	0:0	4	&
water	29:49	0:0	4	i_y
arg	29:54	29:58	3	&i_u
op	29:54	0:0	4	&
water	29:55	0:0	4	i_u
arg	29:60	29:65	3	&i_v
op	29:60	0:0	4	&
water	29:61	0:0	4	i_v
water	29:66	0:0	2	;
water	31:4	0:0	2	fmt
op	31:7	0:0	2	.
water	31:8	0:0	2	p_palette
op	31:17	0:0	2	->
water	31:19	0:0	2	i_entries
op	31:29	0:0	2	=
water	31:31	0:0	2	16
water	31:33	0:0	2	;
for	32:4	40:4	2	(i = 0 ;i < 8;i ++)
forinit	32:9	32:14	3	i = 0 ;
water	32:9	0:0	4	i
op	32:11	0:0	4	=
water	32:13	0:0	4	0
water	32:14	0:0	4	;
cond	32:16	32:20	3	i < 8
water	32:16	0:0	4	i
op	32:18	0:0	4	<
water	32:20	0:0	4	8
forexpr	32:23	32:24	3	i ++
water	32:23	0:0	4	i
op	32:24	0:0	4	++
stmts	33:4	40:4	3	
water	33:4	0:0	4	{
water	34:8	0:0	4	fmt
op	34:11	0:0	4	.
water	34:12	0:0	4	p_palette
op	34:21	0:0	4	->
water	34:23	0:0	4	palette
op	34:30	0:0	4	[
water	34:31	0:0	4	i
op	34:32	0:0	4	]
op	34:33	0:0	4	[
water	34:34	0:0	4	0
op	34:35	0:0	4	]
op	34:37	0:0	4	=
water	34:39	0:0	4	0
water	34:40	0:0	4	;
water	35:8	0:0	4	fmt
op	35:11	0:0	4	.
water	35:12	0:0	4	p_palette
op	35:21	0:0	4	->
water	35:23	0:0	4	palette
op	35:30	0:0	4	[
water	35:31	0:0	4	i
op	35:32	0:0	4	]
op	35:33	0:0	4	[
water	35:34	0:0	4	1
op	35:35	0:0	4	]
op	35:37	0:0	4	=
water	35:39	0:0	4	0
water	35:40	0:0	4	x80
water	35:43	0:0	4	;
water	36:8	0:0	4	fmt
op	36:11	0:0	4	.
water	36:12	0:0	4	p_palette
op	36:21	0:0	4	->
water	36:23	0:0	4	palette
op	36:30	0:0	4	[
water	36:31	0:0	4	i
op	36:32	0:0	4	]
op	36:33	0:0	4	[
water	36:34	0:0	4	2
op	36:35	0:0	4	]
op	36:37	0:0	4	=
water	36:39	0:0	4	0
water	36:40	0:0	4	x80
water	36:43	0:0	4	;
water	37:8	0:0	4	fmt
op	37:11	0:0	4	.
water	37:12	0:0	4	p_palette
op	37:21	0:0	4	->
water	37:23	0:0	4	palette
op	37:30	0:0	4	[
water	37:31	0:0	4	i
op	37:32	0:0	4	]
op	37:33	0:0	4	[
water	37:34	0:0	4	3
op	37:35	0:0	4	]
op	37:37	0:0	4	=
water	37:39	0:0	4	pi_gamma
op	37:47	0:0	4	[
water	37:48	0:0	4	i
op	37:49	0:0	4	]
water	37:50	0:0	4	;
water	38:8	0:0	4	fmt
op	38:11	0:0	4	.
water	38:12	0:0	4	p_palette
op	38:21	0:0	4	->
water	38:23	0:0	4	palette
op	38:30	0:0	4	[
water	38:31	0:0	4	i
op	38:32	0:0	4	]
op	38:33	0:0	4	[
water	38:34	0:0	4	3
op	38:35	0:0	4	]
op	38:37	0:0	4	=
water	39:12	0:0	4	(
water	39:13	0:0	4	int
water	39:16	0:0	4	)
water	39:17	0:0	4	fmt
op	39:20	0:0	4	.
water	39:21	0:0	4	p_palette
op	39:30	0:0	4	->
water	39:32	0:0	4	palette
op	39:39	0:0	4	[
water	39:40	0:0	4	i
op	39:41	0:0	4	]
op	39:42	0:0	4	[
water	39:43	0:0	4	3
op	39:44	0:0	4	]
op	39:46	0:0	4	*
water	39:48	0:0	4	i_alpha
op	39:56	0:0	4	/
water	39:58	0:0	4	255
water	39:61	0:0	4	;
water	40:4	0:0	4	}
for	41:4	49:4	2	(i = 8 ;i < fmt . p_palette -> i_entries;i ++)
forinit	41:9	41:14	3	i = 8 ;
water	41:9	0:0	4	i
op	41:11	0:0	4	=
water	41:13	0:0	4	8
water	41:14	0:0	4	;
cond	41:16	41:35	3	i < fmt . p_palette -> i_entries
water	41:16	0:0	4	i
op	41:18	0:0	4	<
water	41:20	0:0	4	fmt
op	41:23	0:0	4	.
water	41:24	0:0	4	p_palette
op	41:33	0:0	4	->
water	41:35	0:0	4	i_entries
forexpr	41:46	41:47	3	i ++
water	41:46	0:0	4	i
op	41:47	0:0	4	++
stmts	42:4	49:4	3	
water	42:4	0:0	4	{
water	43:8	0:0	4	fmt
op	43:11	0:0	4	.
water	43:12	0:0	4	p_palette
op	43:21	0:0	4	->
water	43:23	0:0	4	palette
op	43:30	0:0	4	[
water	43:31	0:0	4	i
op	43:32	0:0	4	]
op	43:33	0:0	4	[
water	43:34	0:0	4	0
op	43:35	0:0	4	]
op	43:37	0:0	4	=
water	43:39	0:0	4	i
op	43:41	0:0	4	*
water	43:43	0:0	4	16
op	43:46	0:0	4	*
water	43:48	0:0	4	i_y
op	43:52	0:0	4	/
water	43:54	0:0	4	256
water	43:57	0:0	4	;
water	44:8	0:0	4	fmt
op	44:11	0:0	4	.
water	44:12	0:0	4	p_palette
op	44:21	0:0	4	->
water	44:23	0:0	4	palette
op	44:30	0:0	4	[
water	44:31	0:0	4	i
op	44:32	0:0	4	]
op	44:33	0:0	4	[
water	44:34	0:0	4	1
op	44:35	0:0	4	]
op	44:37	0:0	4	=
water	44:39	0:0	4	i_u
water	44:42	0:0	4	;
water	45:8	0:0	4	fmt
op	45:11	0:0	4	.
water	45:12	0:0	4	p_palette
op	45:21	0:0	4	->
water	45:23	0:0	4	palette
op	45:30	0:0	4	[
water	45:31	0:0	4	i
op	45:32	0:0	4	]
op	45:33	0:0	4	[
water	45:34	0:0	4	2
op	45:35	0:0	4	]
op	45:37	0:0	4	=
water	45:39	0:0	4	i_v
water	45:42	0:0	4	;
water	46:8	0:0	4	fmt
op	46:11	0:0	4	.
water	46:12	0:0	4	p_palette
op	46:21	0:0	4	->
water	46:23	0:0	4	palette
op	46:30	0:0	4	[
water	46:31	0:0	4	i
op	46:32	0:0	4	]
op	46:33	0:0	4	[
water	46:34	0:0	4	3
op	46:35	0:0	4	]
op	46:37	0:0	4	=
water	46:39	0:0	4	pi_gamma
op	46:47	0:0	4	[
water	46:48	0:0	4	i
op	46:49	0:0	4	]
water	46:50	0:0	4	;
water	47:8	0:0	4	fmt
op	47:11	0:0	4	.
water	47:12	0:0	4	p_palette
op	47:21	0:0	4	->
water	47:23	0:0	4	palette
op	47:30	0:0	4	[
water	47:31	0:0	4	i
op	47:32	0:0	4	]
op	47:33	0:0	4	[
water	47:34	0:0	4	3
op	47:35	0:0	4	]
op	47:37	0:0	4	=
water	48:12	0:0	4	(
water	48:13	0:0	4	int
water	48:16	0:0	4	)
water	48:17	0:0	4	fmt
op	48:20	0:0	4	.
water	48:21	0:0	4	p_palette
op	48:30	0:0	4	->
water	48:32	0:0	4	palette
op	48:39	0:0	4	[
water	48:40	0:0	4	i
op	48:41	0:0	4	]
op	48:42	0:0	4	[
water	48:43	0:0	4	3
op	48:44	0:0	4	]
op	48:46	0:0	4	*
water	48:48	0:0	4	i_alpha
op	48:56	0:0	4	/
water	48:58	0:0	4	255
water	48:61	0:0	4	;
water	49:4	0:0	4	}
water	50:4	0:0	2	p_dst
op	50:10	0:0	2	=
water	50:12	0:0	2	p_region
op	50:20	0:0	2	->
water	50:22	0:0	2	p_picture
op	50:31	0:0	2	->
water	50:33	0:0	2	Y_PIXELS
water	50:41	0:0	2	;
water	51:4	0:0	2	i_pitch
op	51:12	0:0	2	=
water	51:14	0:0	2	p_region
op	51:22	0:0	2	->
water	51:24	0:0	2	p_picture
op	51:33	0:0	2	->
water	51:35	0:0	2	Y_PITCH
water	51:42	0:0	2	;
call	53:4	53:55	2	memset
arg	53:12	53:17	3	p_dst
water	53:12	0:0	4	p_dst
arg	53:19	53:20	3	0
water	53:19	0:0	4	0
arg	53:22	53:55	3	i_pitch*p_region->fmt.i_height
water	53:22	0:0	4	i_pitch
op	53:30	0:0	4	*
water	53:32	0:0	4	p_region
op	53:40	0:0	4	->
water	53:42	0:0	4	fmt
op	53:45	0:0	4	.
water	53:46	0:0	4	i_height
water	53:56	0:0	2	;
for	54:4	81:4	2	(;p_line != NULL;p_line = p_line -> p_next)
forinit	54:9	54:9	3	;
water	54:9	0:0	4	;
cond	54:11	54:21	3	p_line != NULL
water	54:11	0:0	4	p_line
op	54:18	0:0	4	!=
water	54:21	0:0	4	NULL
forexpr	54:27	54:44	3	p_line = p_line -> p_next
water	54:27	0:0	4	p_line
op	54:34	0:0	4	=
water	54:36	0:0	4	p_line
op	54:42	0:0	4	->
water	54:44	0:0	4	p_next
stmts	55:4	81:4	3	
water	55:4	0:0	4	{
decl	56:8	56:28	4	int	i_align_left
op	56:25	0:0	4	=
water	56:27	0:0	4	0
if	57:8	63:8	4	(p_line -> i_width < ( int ) fmt . i_visible_width)
cond	57:12	57:39	5	p_line -> i_width < ( int ) fmt . i_visible_width
water	57:12	0:0	6	p_line
op	57:18	0:0	6	->
water	57:20	0:0	6	i_width
op	57:28	0:0	6	<
water	57:30	0:0	6	(
water	57:31	0:0	6	int
water	57:34	0:0	6	)
water	57:35	0:0	6	fmt
op	57:38	0:0	6	.
water	57:39	0:0	6	i_visible_width
stmts	58:8	63:8	5	
water	58:8	0:0	6	{
if	59:12	60:72	6	(( p_region -> i_align & 0 x3 ) == SUBPICTURE_ALIGN_RIGHT)
cond	59:16	59:45	7	( p_region -> i_align & 0 x3 ) == SUBPICTURE_ALIGN_RIGHT
water	59:16	0:0	8	(
water	59:17	0:0	8	p_region
op	59:25	0:0	8	->
water	59:27	0:0	8	i_align
op	59:35	0:0	8	&
water	59:37	0:0	8	0
water	59:38	0:0	8	x3
water	59:40	0:0	8	)
op	59:42	0:0	8	==
water	59:45	0:0	8	SUBPICTURE_ALIGN_RIGHT
stmts	60:16	60:72	7	
water	60:16	0:0	8	i_align_left
op	60:29	0:0	8	=
water	60:31	0:0	8	(
water	60:33	0:0	8	fmt
op	60:36	0:0	8	.
water	60:37	0:0	8	i_visible_width
op	60:53	0:0	8	-
water	60:55	0:0	8	p_line
op	60:61	0:0	8	->
water	60:63	0:0	8	i_width
water	60:71	0:0	8	)
water	60:72	0:0	8	;
else	61:12	62:76	6
stmts	61:17	62:76	7	
if	61:17	62:76	8	(( p_region -> i_align & 0 x3 ) != SUBPICTURE_ALIGN_LEFT)
cond	61:21	61:50	9	( p_region -> i_align & 0 x3 ) != SUBPICTURE_ALIGN_LEFT
water	61:21	0:0	10	(
water	61:22	0:0	10	p_region
op	61:30	0:0	10	->
water	61:32	0:0	10	i_align
op	61:40	0:0	10	&
water	61:42	0:0	10	0
water	61:43	0:0	10	x3
water	61:45	0:0	10	)
op	61:47	0:0	10	!=
water	61:50	0:0	10	SUBPICTURE_ALIGN_LEFT
stmts	62:16	62:76	9	
water	62:16	0:0	10	i_align_left
op	62:29	0:0	10	=
water	62:31	0:0	10	(
water	62:33	0:0	10	fmt
op	62:36	0:0	10	.
water	62:37	0:0	10	i_visible_width
op	62:53	0:0	10	-
water	62:55	0:0	10	p_line
op	62:61	0:0	10	->
water	62:63	0:0	10	i_width
water	62:71	0:0	10	)
op	62:73	0:0	10	/
water	62:75	0:0	10	2
water	62:76	0:0	10	;
water	63:8	0:0	6	}
decl	64:8	64:27	4	int	i_align_top
op	64:24	0:0	4	=
water	64:26	0:0	4	0
for	65:8	80:8	4	(i = 0 ;i < p_line -> i_character_count;i ++)
forinit	65:13	65:18	5	i = 0 ;
water	65:13	0:0	6	i
op	65:15	0:0	6	=
water	65:17	0:0	6	0
water	65:18	0:0	6	;
cond	65:20	65:32	5	i < p_line -> i_character_count
water	65:20	0:0	6	i
op	65:22	0:0	6	<
water	65:24	0:0	6	p_line
op	65:30	0:0	6	->
water	65:32	0:0	6	i_character_count
forexpr	65:51	65:52	5	i ++
water	65:51	0:0	6	i
op	65:52	0:0	6	++
stmts	66:8	80:8	5	
water	66:8	0:0	6	{
decl	67:12	67:64	6	const line_character_t	*ch
op	67:39	0:0	6	=
op	67:41	0:0	6	&
water	67:42	0:0	6	p_line
op	67:48	0:0	6	->
water	67:50	0:0	6	p_character
op	67:61	0:0	6	[
water	67:62	0:0	6	i
op	67:63	0:0	6	]
decl	68:12	68:48	6	FT_BitmapGlyph	p_glyph
op	68:35	0:0	6	=
water	68:37	0:0	6	ch
op	68:39	0:0	6	->
water	68:41	0:0	6	p_glyph
decl	69:12	69:93	6	int	i_glyph_y
op	69:26	0:0	6	=
water	69:28	0:0	6	i_align_top
op	69:41	0:0	6	-
water	69:43	0:0	6	p_glyph
op	69:50	0:0	6	->
water	69:52	0:0	6	top
op	69:57	0:0	6	+
water	69:59	0:0	6	p_bbox
op	69:65	0:0	6	->
water	69:67	0:0	6	yMax
op	69:72	0:0	6	+
water	69:74	0:0	6	p_line
op	69:80	0:0	6	->
water	69:82	0:0	6	i_base_line
decl	70:12	70:71	6	int	i_glyph_x
op	70:26	0:0	6	=
water	70:28	0:0	6	i_align_left
op	70:41	0:0	6	+
water	70:43	0:0	6	p_glyph
op	70:50	0:0	6	->
water	70:52	0:0	6	left
op	70:57	0:0	6	-
water	70:59	0:0	6	p_bbox
op	70:65	0:0	6	->
water	70:67	0:0	6	xMin
for	71:12	79:12	6	(y = 0 ;y < p_glyph -> bitmap . rows;y ++)
forinit	71:17	71:22	7	y = 0 ;
water	71:17	0:0	8	y
op	71:19	0:0	8	=
water	71:21	0:0	8	0
water	71:22	0:0	8	;
cond	71:24	71:44	7	y < p_glyph -> bitmap . rows
water	71:24	0:0	8	y
op	71:26	0:0	8	<
water	71:28	0:0	8	p_glyph
op	71:35	0:0	8	->
water	71:37	0:0	8	bitmap
op	71:43	0:0	8	.
water	71:44	0:0	8	rows
forexpr	71:50	71:51	7	y ++
water	71:50	0:0	8	y
op	71:51	0:0	8	++
stmts	72:12	79:12	7	
water	72:12	0:0	8	{
for	73:16	78:16	8	(x = 0 ;x < p_glyph -> bitmap . width;x ++)
forinit	73:21	73:26	9	x = 0 ;
water	73:21	0:0	10	x
op	73:23	0:0	10	=
water	73:25	0:0	10	0
water	73:26	0:0	10	;
cond	73:28	73:48	9	x < p_glyph -> bitmap . width
water	73:28	0:0	10	x
op	73:30	0:0	10	<
water	73:32	0:0	10	p_glyph
op	73:39	0:0	10	->
water	73:41	0:0	10	bitmap
op	73:47	0:0	10	.
water	73:48	0:0	10	width
forexpr	73:55	73:56	9	x ++
water	73:55	0:0	10	x
op	73:56	0:0	10	++
stmts	74:16	78:16	9	
water	74:16	0:0	10	{
if	75:20	77:90	10	(p_glyph -> bitmap . buffer [ y * p_glyph -> bitmap . width + x ])
cond	75:24	75:76	11	p_glyph -> bitmap . buffer [ y * p_glyph -> bitmap . width + x ]
water	75:24	0:0	12	p_glyph
op	75:31	0:0	12	->
water	75:33	0:0	12	bitmap
op	75:39	0:0	12	.
water	75:40	0:0	12	buffer
op	75:46	0:0	12	[
water	75:47	0:0	12	y
op	75:49	0:0	12	*
water	75:51	0:0	12	p_glyph
op	75:58	0:0	12	->
water	75:60	0:0	12	bitmap
op	75:66	0:0	12	.
water	75:67	0:0	12	width
op	75:73	0:0	12	+
water	75:75	0:0	12	x
op	75:76	0:0	12	]
stmts	76:24	77:90	11	
water	76:24	0:0	12	p_dst
op	76:29	0:0	12	[
water	76:30	0:0	12	(
water	76:31	0:0	12	i_glyph_y
op	76:41	0:0	12	+
water	76:43	0:0	12	y
water	76:44	0:0	12	)
op	76:46	0:0	12	*
water	76:48	0:0	12	i_pitch
op	76:56	0:0	12	+
water	76:58	0:0	12	(
water	76:59	0:0	12	i_glyph_x
op	76:69	0:0	12	+
water	76:71	0:0	12	x
water	76:72	0:0	12	)
op	76:73	0:0	12	]
op	76:75	0:0	12	=
water	77:28	0:0	12	(
water	77:29	0:0	12	p_glyph
op	77:36	0:0	12	->
water	77:38	0:0	12	bitmap
op	77:44	0:0	12	.
water	77:45	0:0	12	buffer
op	77:51	0:0	12	[
water	77:52	0:0	12	y
op	77:54	0:0	12	*
water	77:56	0:0	12	p_glyph
op	77:63	0:0	12	->
water	77:65	0:0	12	bitmap
op	77:71	0:0	12	.
water	77:72	0:0	12	width
op	77:78	0:0	12	+
water	77:80	0:0	12	x
op	77:81	0:0	12	]
op	77:83	0:0	12	+
water	77:85	0:0	12	8
water	77:86	0:0	12	)
op	77:87	0:0	12	/
water	77:88	0:0	12	16
water	77:90	0:0	12	;
water	78:16	0:0	10	}
water	79:12	0:0	8	}
water	80:8	0:0	6	}
water	81:4	0:0	4	}
if	83:4	102:4	2	(1)
cond	83:8	83:8	3	1
water	83:8	0:0	4	1
stmts	84:4	102:4	3	
water	84:4	0:0	4	{
decl	85:8	85:54	4	uint8_t	*p_dst
op	85:23	0:0	4	=
water	85:25	0:0	4	p_region
op	85:33	0:0	4	->
water	85:35	0:0	4	p_picture
op	85:44	0:0	4	->
water	85:46	0:0	4	Y_PIXELS
decl	86:8	86:30	4	uint8_t	*p_top
op	86:23	0:0	4	=
water	86:25	0:0	4	p_dst
decl	87:8	87:29	4	uint8_t	left
water	87:20	0:0	4	,
decl	87:8	87:29	4	uint8_t	current
for	88:8	100:8	4	(y = 1 ;y < ( int ) fmt . i_height - 1;y ++)
forinit	88:13	88:18	5	y = 1 ;
water	88:13	0:0	6	y
op	88:15	0:0	6	=
water	88:17	0:0	6	1
water	88:18	0:0	6	;
cond	88:20	88:44	5	y < ( int ) fmt . i_height - 1
water	88:20	0:0	6	y
op	88:22	0:0	6	<
water	88:24	0:0	6	(
water	88:25	0:0	6	int
water	88:28	0:0	6	)
water	88:29	0:0	6	fmt
op	88:32	0:0	6	.
water	88:33	0:0	6	i_height
op	88:42	0:0	6	-
water	88:44	0:0	6	1
forexpr	88:47	88:48	5	y ++
water	88:47	0:0	6	y
op	88:48	0:0	6	++
stmts	89:8	100:8	5	
water	89:8	0:0	6	{
if	90:12	90:59	6	(y > 1)
cond	90:16	90:20	7	y > 1
water	90:16	0:0	8	y
op	90:18	0:0	8	>
water	90:20	0:0	8	1
stmts	90:24	90:59	7	
call	90:24	90:58	8	memcpy
arg	90:32	90:37	9	p_top
water	90:32	0:0	10	p_top
arg	90:39	90:44	9	p_dst
water	90:39	0:0	10	p_dst
arg	90:46	90:58	9	fmt.i_width
water	90:46	0:0	10	fmt
op	90:49	0:0	10	.
water	90:50	0:0	10	i_width
water	90:59	0:0	8	;
water	91:12	0:0	6	p_dst
op	91:18	0:0	6	+=
water	91:21	0:0	6	p_region
op	91:29	0:0	6	->
water	91:31	0:0	6	p_picture
op	91:40	0:0	6	->
water	91:42	0:0	6	Y_PITCH
water	91:49	0:0	6	;
water	92:12	0:0	6	left
op	92:17	0:0	6	=
water	92:19	0:0	6	0
water	92:20	0:0	6	;
for	93:12	99:12	6	(x = 1 ;x < ( int ) fmt . i_width - 1;x ++)
forinit	93:17	93:22	7	x = 1 ;
water	93:17	0:0	8	x
op	93:19	0:0	8	=
water	93:21	0:0	8	1
water	93:22	0:0	8	;
cond	93:24	93:47	7	x < ( int ) fmt . i_width - 1
water	93:24	0:0	8	x
op	93:26	0:0	8	<
water	93:28	0:0	8	(
water	93:29	0:0	8	int
water	93:32	0:0	8	)
water	93:33	0:0	8	fmt
op	93:36	0:0	8	.
water	93:37	0:0	8	i_width
op	93:45	0:0	8	-
water	93:47	0:0	8	1
forexpr	93:50	93:51	7	x ++
water	93:50	0:0	8	x
op	93:51	0:0	8	++
stmts	94:12	99:12	7	
water	94:12	0:0	8	{
water	95:16	0:0	8	current
op	95:24	0:0	8	=
water	95:26	0:0	8	p_dst
op	95:31	0:0	8	[
water	95:32	0:0	8	x
op	95:33	0:0	8	]
water	95:34	0:0	8	;
water	96:16	0:0	8	p_dst
op	96:21	0:0	8	[
water	96:22	0:0	8	x
op	96:23	0:0	8	]
op	96:25	0:0	8	=
water	96:27	0:0	8	(
water	96:29	0:0	8	8
op	96:31	0:0	8	*
water	96:33	0:0	8	(
water	96:34	0:0	8	int
water	96:37	0:0	8	)
water	96:38	0:0	8	p_dst
op	96:43	0:0	8	[
water	96:44	0:0	8	x
op	96:45	0:0	8	]
op	96:47	0:0	8	+
water	96:49	0:0	8	left
op	96:54	0:0	8	+
water	96:56	0:0	8	p_dst
op	96:61	0:0	8	[
water	96:62	0:0	8	x
op	96:63	0:0	8	+
water	96:64	0:0	8	1
op	96:65	0:0	8	]
op	96:67	0:0	8	+
water	96:69	0:0	8	p_top
op	96:74	0:0	8	[
water	96:75	0:0	8	x
op	96:77	0:0	8	-
water	96:78	0:0	8	1
op	96:79	0:0	8	]
op	96:80	0:0	8	+
water	96:82	0:0	8	p_top
op	96:87	0:0	8	[
water	96:88	0:0	8	x
op	96:89	0:0	8	]
op	96:91	0:0	8	+
water	96:93	0:0	8	p_top
op	96:98	0:0	8	[
water	96:99	0:0	8	x
op	96:100	0:0	8	+
water	96:101	0:0	8	1
op	96:102	0:0	8	]
op	96:104	0:0	8	+
water	97:29	0:0	8	p_dst
op	97:34	0:0	8	[
water	97:35	0:0	8	x
op	97:37	0:0	8	-
water	97:38	0:0	8	1
op	97:40	0:0	8	+
water	97:42	0:0	8	p_region
op	97:50	0:0	8	->
water	97:52	0:0	8	p_picture
op	97:61	0:0	8	->
water	97:63	0:0	8	Y_PITCH
op	97:71	0:0	8	]
op	97:73	0:0	8	+
water	97:75	0:0	8	p_dst
op	97:80	0:0	8	[
water	97:81	0:0	8	x
op	97:83	0:0	8	+
water	97:85	0:0	8	p_region
op	97:93	0:0	8	->
water	97:95	0:0	8	p_picture
op	97:104	0:0	8	->
water	97:106	0:0	8	Y_PITCH
op	97:113	0:0	8	]
op	97:115	0:0	8	+
water	97:117	0:0	8	p_dst
op	97:122	0:0	8	[
water	97:123	0:0	8	x
op	97:125	0:0	8	+
water	97:127	0:0	8	1
op	97:129	0:0	8	+
water	97:131	0:0	8	p_region
op	97:139	0:0	8	->
water	97:141	0:0	8	p_picture
op	97:150	0:0	8	->
water	97:152	0:0	8	Y_PITCH
op	97:159	0:0	8	]
water	97:160	0:0	8	)
op	97:162	0:0	8	/
water	97:164	0:0	8	16
water	97:166	0:0	8	;
water	98:16	0:0	8	left
op	98:21	0:0	8	=
water	98:23	0:0	8	current
water	98:30	0:0	8	;
water	99:12	0:0	8	}
water	100:8	0:0	6	}
call	101:8	101:38	4	memset
arg	101:16	101:21	5	p_top
water	101:16	0:0	6	p_top
arg	101:23	101:24	5	0
water	101:23	0:0	6	0
arg	101:26	101:38	5	fmt.i_width
water	101:26	0:0	6	fmt
op	101:29	0:0	6	.
water	101:30	0:0	6	i_width
water	101:39	0:0	4	;
water	102:4	0:0	4	}
return	103:4	103:22	2	VLC_SUCCESS
water	103:11	0:0	3	VLC_SUCCESS
