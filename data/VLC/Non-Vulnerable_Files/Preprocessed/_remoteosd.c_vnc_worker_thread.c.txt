func	2:0	109:0	0	static void *	vnc_worker_thread
params	2:30	0:0	1	
param	2:32	2:42	2	void *	obj
stmnts	0:0	108:15	1	
decl	4:4	4:39	2	filter_t	*p_filter
op	4:23	0:0	2	=
water	4:25	0:0	2	(
water	4:26	0:0	2	filter_t
op	4:34	0:0	2	*
water	4:35	0:0	2	)
water	4:36	0:0	2	obj
decl	5:4	5:41	2	filter_sys_t	*p_sys
op	5:24	0:0	2	=
water	5:26	0:0	2	p_filter
op	5:34	0:0	2	->
water	5:36	0:0	2	p_sys
decl	6:4	6:45	2	vlc_thread_t	update_request_thread_handle
decl	7:4	7:32	2	int	canc
op	7:13	0:0	2	=
call	7:15	7:31	3	vlc_savecancel
call	8:4	8:51	2	msg_Dbg
arg	8:13	8:21	3	p_filter
water	8:13	0:0	4	p_filter
arg	8:23	8:51	3	"VNC worker thread started"
water	8:23	0:0	4	"VNC worker thread started"
water	8:52	0:0	2	;
if	9:4	13:4	2	(!open_vnc_connection (p_filter ))
cond	9:8	9:40	3	!open_vnc_connection (p_filter )
op	9:8	0:0	4	!
call	9:9	9:40	4	open_vnc_connection
arg	9:31	9:40	5	p_filter
water	9:31	0:0	6	p_filter
stmts	10:4	13:4	3	
water	10:4	0:0	4	{
call	11:8	11:59	4	msg_Err
arg	11:17	11:25	5	p_filter
water	11:17	0:0	6	p_filter
arg	11:27	11:59	5	"Could not connect to vnc host"
water	11:27	0:0	6	"Could not connect to vnc host"
water	11:60	0:0	4	;
goto	12:8	12:17	4	exit
water	12:13	0:0	5	exit
water	13:4	0:0	4	}
if	14:4	18:4	2	(!handshaking (p_filter ))
cond	14:8	14:32	3	!handshaking (p_filter )
op	14:8	0:0	4	!
call	14:9	14:32	4	handshaking
arg	14:23	14:32	5	p_filter
water	14:23	0:0	6	p_filter
stmts	15:4	18:4	3	
water	15:4	0:0	4	{
call	16:8	16:71	4	msg_Err
arg	16:17	16:25	5	p_filter
water	16:17	0:0	6	p_filter
arg	16:27	16:71	5	"Error occurred while handshaking vnc host"
water	16:27	0:0	6	"Error occurred while handshaking vnc host"
water	16:72	0:0	4	;
goto	17:8	17:17	4	exit
water	17:13	0:0	5	exit
water	18:4	0:0	4	}
water	19:4	0:0	2	p_sys
op	19:9	0:0	2	->
water	19:11	0:0	2	b_connection_active
op	19:31	0:0	2	=
water	19:33	0:0	2	true
water	19:37	0:0	2	;
call	22:4	22:33	2	vlc_mutex_lock
arg	22:20	22:33	3	&p_sys->lock
op	22:20	0:0	4	&
water	22:21	0:0	4	p_sys
op	22:26	0:0	4	->
water	22:28	0:0	4	lock
water	22:34	0:0	2	;
water	23:4	0:0	2	p_sys
op	23:9	0:0	2	->
water	23:11	0:0	2	p_pic
op	23:17	0:0	2	=
call	23:19	24:78	2	picture_New
arg	23:32	23:46	3	VLC_CODEC_YUVA
water	23:32	0:0	4	VLC_CODEC_YUVA
arg	24:32	24:50	3	p_sys->i_vnc_width
water	24:32	0:0	4	p_sys
op	24:37	0:0	4	->
water	24:39	0:0	4	i_vnc_width
arg	24:52	24:71	3	p_sys->i_vnc_height
water	24:52	0:0	4	p_sys
op	24:57	0:0	4	->
water	24:59	0:0	4	i_vnc_height
arg	24:73	24:74	3	1
water	24:73	0:0	4	1
arg	24:76	24:78	3	1
water	24:76	0:0	4	1
water	24:79	0:0	2	;
if	25:4	29:4	2	(! p_sys -> p_pic)
cond	25:8	25:16	3	! p_sys -> p_pic
op	25:8	0:0	4	!
water	25:9	0:0	4	p_sys
op	25:14	0:0	4	->
water	25:16	0:0	4	p_pic
stmts	26:4	29:4	3	
water	26:4	0:0	4	{
call	27:8	27:39	4	vlc_mutex_unlock
arg	27:26	27:39	5	&p_sys->lock
op	27:26	0:0	6	&
water	27:27	0:0	6	p_sys
op	27:32	0:0	6	->
water	27:34	0:0	6	lock
water	27:40	0:0	4	;
goto	28:8	28:17	4	exit
water	28:13	0:0	5	exit
water	29:4	0:0	4	}
water	30:4	0:0	2	p_sys
op	30:9	0:0	2	->
water	30:11	0:0	2	i_vnc_pixels
op	30:24	0:0	2	=
water	30:26	0:0	2	p_sys
op	30:31	0:0	2	->
water	30:33	0:0	2	i_vnc_width
op	30:45	0:0	2	*
water	30:47	0:0	2	p_sys
op	30:52	0:0	2	->
water	30:54	0:0	2	i_vnc_height
water	30:66	0:0	2	;
call	31:4	31:35	2	vlc_mutex_unlock
arg	31:22	31:35	3	&p_sys->lock
op	31:22	0:0	4	&
water	31:23	0:0	4	p_sys
op	31:28	0:0	4	->
water	31:30	0:0	4	lock
water	31:36	0:0	2	;
if	33:4	39:4	2	(vlc_clone (& update_request_thread_handle ,update_request_thread ,p_filter ,VLC_THREAD_PRIORITY_LOW ))
cond	33:8	35:43	3	vlc_clone (& update_request_thread_handle ,update_request_thread ,p_filter ,VLC_THREAD_PRIORITY_LOW )
call	33:8	35:43	4	vlc_clone
arg	33:19	33:48	5	&update_request_thread_handle
op	33:19	0:0	6	&
water	33:20	0:0	6	update_request_thread_handle
arg	34:19	34:40	5	update_request_thread
water	34:19	0:0	6	update_request_thread
arg	34:42	34:50	5	p_filter
water	34:42	0:0	6	p_filter
arg	35:19	35:43	5	VLC_THREAD_PRIORITY_LOW
water	35:19	0:0	6	VLC_THREAD_PRIORITY_LOW
stmts	36:4	39:4	3	
water	36:4	0:0	4	{
call	37:8	37:68	4	msg_Err
arg	37:17	37:25	5	p_filter
water	37:17	0:0	6	p_filter
arg	37:27	37:68	5	"cannot spawn vnc update request thread"
water	37:27	0:0	6	"cannot spawn vnc update request thread"
water	37:69	0:0	4	;
goto	38:8	38:17	4	exit
water	38:13	0:0	5	exit
water	39:4	0:0	4	}
call	41:4	41:27	2	vlc_restorecancel
arg	41:23	41:27	3	canc
water	41:23	0:0	4	canc
water	41:28	0:0	2	;
for	42:4	89:4	2	(;;)
forinit	42:9	42:9	3	;
water	42:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	43:4	89:4	3	
water	43:4	0:0	4	{
decl	44:8	44:32	4	rfbServerToClientMsg	msg
decl	45:8	45:21	4	int	i_msgSize
call	46:8	46:37	4	memset
arg	46:16	46:20	5	&msg
op	46:16	0:0	6	&
water	46:17	0:0	6	msg
arg	46:22	46:23	5	0
water	46:22	0:0	6	0
arg	46:25	46:37	5	sizeof(msg)
op	46:25	0:0	6	sizeof
water	46:31	0:0	6	(
water	46:32	0:0	6	msg
water	46:35	0:0	6	)
water	46:38	0:0	4	;
if	47:8	51:8	4	(!read_exact (p_filter ,p_sys -> i_socket ,( char * ) & msg ,1 ))
cond	47:12	47:66	5	!read_exact (p_filter ,p_sys -> i_socket ,( char * ) & msg ,1 )
op	47:12	0:0	6	!
call	47:13	47:66	6	read_exact
arg	47:24	47:32	7	p_filter
water	47:24	0:0	8	p_filter
arg	47:34	47:49	7	p_sys->i_socket
water	47:34	0:0	8	p_sys
op	47:39	0:0	8	->
water	47:41	0:0	8	i_socket
arg	47:51	47:62	7	(char*)&msg
water	47:51	0:0	8	(
water	47:52	0:0	8	char
op	47:56	0:0	8	*
water	47:57	0:0	8	)
op	47:58	0:0	8	&
water	47:59	0:0	8	msg
arg	47:64	47:66	7	1
water	47:64	0:0	8	1
stmts	48:8	51:8	5	
water	48:8	0:0	6	{
call	49:12	49:76	6	msg_Err
arg	49:21	49:29	7	p_filter
water	49:21	0:0	8	p_filter
arg	49:31	49:76	7	"Error while waiting for next server message"
water	49:31	0:0	8	"Error while waiting for next server message"
water	49:77	0:0	6	;
break	50:12	50:17	6	
water	51:8	0:0	6	}
switch	52:8	73:8	4	(msg . type)
cond	52:16	52:20	5	msg . type
water	52:16	0:0	6	msg
op	52:19	0:0	6	.
water	52:20	0:0	6	type
stmts	53:8	73:8	5	
water	53:8	0:0	6	{
label	54:8	54:33	6	case rfbFramebufferUpdate :
water	55:12	0:0	6	i_msgSize
op	55:22	0:0	6	=
water	55:24	0:0	6	sz_rfbFramebufferUpdateMsg
water	55:50	0:0	6	;
break	56:12	56:17	6	
label	57:8	57:35	6	case rfbSetColourMapEntries :
water	58:12	0:0	6	i_msgSize
op	58:22	0:0	6	=
water	58:24	0:0	6	sz_rfbSetColourMapEntriesMsg
water	58:52	0:0	6	;
break	59:12	59:17	6	
label	60:8	60:20	6	case rfbBell :
water	61:12	0:0	6	i_msgSize
op	61:22	0:0	6	=
water	61:24	0:0	6	sz_rfbBellMsg
water	61:37	0:0	6	;
break	62:12	62:17	6	
label	63:8	63:29	6	case rfbServerCutText :
water	64:12	0:0	6	i_msgSize
op	64:22	0:0	6	=
water	64:24	0:0	6	sz_rfbServerCutTextMsg
water	64:46	0:0	6	;
break	65:12	65:17	6	
label	66:8	66:33	6	case rfbReSizeFrameBuffer :
water	67:12	0:0	6	i_msgSize
op	67:22	0:0	6	=
water	67:24	0:0	6	sz_rfbReSizeFrameBufferMsg
water	67:50	0:0	6	;
break	68:12	68:17	6	
label	69:8	69:15	6	default :
water	70:12	0:0	6	i_msgSize
op	70:22	0:0	6	=
water	70:24	0:0	6	0
water	70:25	0:0	6	;
call	71:12	71:71	6	msg_Err
arg	71:21	71:29	7	p_filter
water	71:21	0:0	8	p_filter
arg	71:31	71:60	7	"Invalid message %u received"
water	71:31	0:0	8	"Invalid message %u received"
arg	71:62	71:71	7	msg.type
water	71:62	0:0	8	msg
op	71:65	0:0	8	.
water	71:66	0:0	8	type
water	71:72	0:0	6	;
break	72:12	72:17	6	
water	73:8	0:0	6	}
if	74:8	75:17	4	(i_msgSize <= 0)
cond	74:12	74:25	5	i_msgSize <= 0
water	74:12	0:0	6	i_msgSize
op	74:22	0:0	6	<=
water	74:25	0:0	6	0
stmts	75:12	75:17	5	
break	75:12	75:17	6	
if	76:8	85:8	4	(-- i_msgSize > 0)
cond	76:12	76:26	5	-- i_msgSize > 0
op	76:12	0:0	6	--
water	76:14	0:0	6	i_msgSize
op	76:24	0:0	6	>
water	76:26	0:0	6	0
stmts	77:8	85:8	5	
water	77:8	0:0	6	{
if	78:12	84:12	6	(!read_exact (p_filter ,p_sys -> i_socket ,( ( char * ) & msg ) + 1 ,i_msgSize ))
cond	78:17	79:57	7	!read_exact (p_filter ,p_sys -> i_socket ,( ( char * ) & msg ) + 1 ,i_msgSize )
op	78:17	0:0	8	!
call	78:18	79:57	8	read_exact
arg	78:30	78:38	9	p_filter
water	78:30	0:0	10	p_filter
arg	78:40	78:55	9	p_sys->i_socket
water	78:40	0:0	10	p_sys
op	78:45	0:0	10	->
water	78:47	0:0	10	i_socket
arg	79:30	79:45	9	((char*)&msg)+1
water	79:30	0:0	10	(
water	79:31	0:0	10	(
water	79:32	0:0	10	char
op	79:36	0:0	10	*
water	79:37	0:0	10	)
op	79:38	0:0	10	&
water	79:39	0:0	10	msg
water	79:42	0:0	10	)
op	79:43	0:0	10	+
water	79:44	0:0	10	1
arg	79:47	79:57	9	i_msgSize
water	79:47	0:0	10	i_msgSize
stmts	80:12	84:12	7	
water	80:12	0:0	8	{
call	81:16	82:34	8	msg_Err
arg	81:25	81:33	9	p_filter
water	81:25	0:0	10	p_filter
arg	81:35	81:75	9	"Error while reading message of type %u"
water	81:35	0:0	10	"Error while reading message of type %u"
arg	82:25	82:34	9	msg.type
water	82:25	0:0	10	msg
op	82:28	0:0	10	.
water	82:29	0:0	10	type
water	82:35	0:0	8	;
break	83:16	83:21	8	
water	84:12	0:0	8	}
water	85:8	0:0	6	}
water	86:8	0:0	4	canc
op	86:13	0:0	4	=
call	86:15	86:31	4	vlc_savecancel
water	86:32	0:0	4	;
call	87:8	87:46	4	process_server_message
arg	87:32	87:40	5	p_filter
water	87:32	0:0	6	p_filter
arg	87:42	87:46	5	&msg
op	87:42	0:0	6	&
water	87:43	0:0	6	msg
water	87:47	0:0	4	;
call	88:8	88:31	4	vlc_restorecancel
arg	88:27	88:31	5	canc
water	88:27	0:0	6	canc
water	88:32	0:0	4	;
water	89:4	0:0	4	}
water	90:4	0:0	2	canc
op	90:9	0:0	2	=
call	90:11	90:27	2	vlc_savecancel
water	90:28	0:0	2	;
call	91:4	91:55	2	msg_Dbg
arg	91:13	91:21	3	p_filter
water	91:13	0:0	4	p_filter
arg	91:23	91:55	3	"joining update_request_thread"
water	91:23	0:0	4	"joining update_request_thread"
water	91:56	0:0	2	;
call	92:4	92:45	2	vlc_cancel
arg	92:16	92:45	3	update_request_thread_handle
water	92:16	0:0	4	update_request_thread_handle
water	92:46	0:0	2	;
call	93:4	93:49	2	vlc_join
arg	93:14	93:42	3	update_request_thread_handle
water	93:14	0:0	4	update_request_thread_handle
arg	93:44	93:49	3	NULL
water	93:44	0:0	4	NULL
water	93:50	0:0	2	;
call	94:4	94:56	2	msg_Dbg
arg	94:13	94:21	3	p_filter
water	94:13	0:0	4	p_filter
arg	94:23	94:56	3	"released update_request_thread"
water	94:23	0:0	4	"released update_request_thread"
water	94:57	0:0	2	;
label	95:0	95:4	2	exit :
call	96:4	96:33	2	vlc_mutex_lock
arg	96:20	96:33	3	&p_sys->lock
op	96:20	0:0	4	&
water	96:21	0:0	4	p_sys
op	96:26	0:0	4	->
water	96:28	0:0	4	lock
water	96:34	0:0	2	;
water	97:4	0:0	2	p_sys
op	97:9	0:0	2	->
water	97:11	0:0	2	b_connection_active
op	97:31	0:0	2	=
water	97:33	0:0	2	false
water	97:38	0:0	2	;
if	98:4	99:34	2	(p_sys -> i_socket >= 0)
cond	98:8	98:27	3	p_sys -> i_socket >= 0
water	98:8	0:0	4	p_sys
op	98:13	0:0	4	->
water	98:15	0:0	4	i_socket
op	98:24	0:0	4	>=
water	98:27	0:0	4	0
stmts	99:8	99:34	3	
call	99:8	99:33	4	net_Close
arg	99:18	99:33	5	p_sys->i_socket
water	99:18	0:0	6	p_sys
op	99:23	0:0	6	->
water	99:25	0:0	6	i_socket
water	99:34	0:0	4	;
if	100:4	101:39	2	(p_sys -> p_pic)
cond	100:8	100:15	3	p_sys -> p_pic
water	100:8	0:0	4	p_sys
op	100:13	0:0	4	->
water	100:15	0:0	4	p_pic
stmts	101:8	101:39	3	
call	101:8	101:38	4	picture_Release
arg	101:25	101:38	5	p_sys->p_pic
water	101:25	0:0	6	p_sys
op	101:30	0:0	6	->
water	101:32	0:0	6	p_pic
water	101:39	0:0	4	;
water	103:4	0:0	2	p_sys
op	103:9	0:0	2	->
water	103:11	0:0	2	b_continue
op	103:22	0:0	2	=
water	103:24	0:0	2	false
water	103:29	0:0	2	;
water	104:4	0:0	2	p_sys
op	104:9	0:0	2	->
water	104:11	0:0	2	b_need_update
op	104:25	0:0	2	=
water	104:27	0:0	2	true
water	104:31	0:0	2	;
call	105:4	105:35	2	vlc_mutex_unlock
arg	105:22	105:35	3	&p_sys->lock
op	105:22	0:0	4	&
water	105:23	0:0	4	p_sys
op	105:28	0:0	4	->
water	105:30	0:0	4	lock
water	105:36	0:0	2	;
call	106:4	106:57	2	msg_Dbg
arg	106:13	106:21	3	p_filter
water	106:13	0:0	4	p_filter
arg	106:23	106:57	3	"VNC message reader thread ended"
water	106:23	0:0	4	"VNC message reader thread ended"
water	106:58	0:0	2	;
call	107:4	107:27	2	vlc_restorecancel
arg	107:23	107:27	3	canc
water	107:23	0:0	4	canc
water	107:28	0:0	2	;
return	108:4	108:15	2	NULL
water	108:11	0:0	3	NULL
