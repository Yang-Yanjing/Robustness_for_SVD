func	2:0	111:0	0	static int	WriteCatalog
params	2:23	0:0	1	
param	2:25	2:52	2	addons_storage_t *	p_storage
param	3:25	3:51	2	addon_entry_t * *	pp_entries
param	3:53	3:67	2	int	i_entries
stmnts	0:0	110:22	1	
decl	5:4	5:26	2	addon_entry_t	*p_entry
decl	6:4	6:18	2	char	*psz_file
decl	7:4	7:22	2	char	*psz_file_tmp
decl	8:4	8:24	2	char	*psz_tempstring
decl	9:4	9:57	2	char	*psz_userdir
op	9:22	0:0	2	=
call	9:24	9:56	3	config_GetUserDir
arg	9:43	9:56	4	VLC_DATA_DIR
water	9:43	0:0	5	VLC_DATA_DIR
if	10:4	10:41	2	(! psz_userdir)
cond	10:9	10:10	3	! psz_userdir
op	10:9	0:0	4	!
water	10:10	0:0	4	psz_userdir
stmts	10:24	10:41	3	
return	10:24	10:41	4	VLC_ENOMEM
water	10:31	0:0	5	VLC_ENOMEM
if	11:4	15:4	2	(asprintf (& psz_file ,"%s%s" ,psz_userdir ,ADDONS_CATALOG ) < 1)
cond	11:9	11:70	3	asprintf (& psz_file ,"%s%s" ,psz_userdir ,ADDONS_CATALOG ) < 1
call	11:9	11:66	4	asprintf
arg	11:19	11:28	5	&psz_file
op	11:19	0:0	6	&
water	11:20	0:0	6	psz_file
arg	11:30	11:36	5	"%s%s"
water	11:30	0:0	6	"%s%s"
arg	11:38	11:49	5	psz_userdir
water	11:38	0:0	6	psz_userdir
arg	11:51	11:66	5	ADDONS_CATALOG
water	11:51	0:0	6	ADDONS_CATALOG
op	11:68	0:0	4	<
water	11:70	0:0	4	1
stmts	12:4	15:4	3	
water	12:4	0:0	4	{
call	13:8	13:26	4	free
arg	13:14	13:26	5	psz_userdir
water	13:14	0:0	6	psz_userdir
water	13:27	0:0	4	;
return	14:8	14:25	4	VLC_ENOMEM
water	14:15	0:0	5	VLC_ENOMEM
water	15:4	0:0	4	}
call	16:4	16:22	2	free
arg	16:10	16:22	3	psz_userdir
water	16:10	0:0	4	psz_userdir
water	16:23	0:0	2	;
if	17:4	21:4	2	(asprintf (& psz_file_tmp ,"%s.tmp%" PRIu32 ,psz_file ,( uint32_t )getpid ( ) ) < 1)
cond	17:9	17:84	3	asprintf (& psz_file_tmp ,"%s.tmp%" PRIu32 ,psz_file ,( uint32_t )getpid ( ) ) < 1
call	17:9	17:80	4	asprintf
arg	17:19	17:32	5	&psz_file_tmp
op	17:19	0:0	6	&
water	17:20	0:0	6	psz_file_tmp
arg	17:34	17:49	5	"%s.tmp%"PRIu32
water	17:34	0:0	6	"%s.tmp%"
water	17:43	0:0	6	PRIu32
arg	17:51	17:59	5	psz_file
water	17:51	0:0	6	psz_file
arg	17:61	17:80	5	(uint32_t)getpid()
water	17:61	0:0	6	(
water	17:62	0:0	6	uint32_t
water	17:70	0:0	6	)
call	17:71	17:78	6	getpid
op	17:82	0:0	4	<
water	17:84	0:0	4	1
stmts	18:4	21:4	3	
water	18:4	0:0	4	{
call	19:8	19:23	4	free
arg	19:14	19:23	5	psz_file
water	19:14	0:0	6	psz_file
water	19:24	0:0	4	;
return	20:8	20:25	4	VLC_ENOMEM
water	20:15	0:0	5	VLC_ENOMEM
water	21:4	0:0	4	}
decl	22:4	22:39	2	char	*psz_path
op	22:19	0:0	2	=
call	22:21	22:38	3	strdup
arg	22:29	22:38	4	psz_file
water	22:29	0:0	5	psz_file
if	23:4	28:4	2	(! psz_path)
cond	23:9	23:10	3	! psz_path
op	23:9	0:0	4	!
water	23:10	0:0	4	psz_path
stmts	24:4	28:4	3	
water	24:4	0:0	4	{
call	25:8	25:23	4	free
arg	25:14	25:23	5	psz_file
water	25:14	0:0	6	psz_file
water	25:24	0:0	4	;
call	26:8	26:27	4	free
arg	26:14	26:27	5	psz_file_tmp
water	26:14	0:0	6	psz_file_tmp
water	26:28	0:0	4	;
return	27:8	27:25	4	VLC_ENOMEM
water	27:15	0:0	5	VLC_ENOMEM
water	28:4	0:0	4	}
decl	29:4	29:53	2	char	*psz_buf
op	29:18	0:0	2	=
call	29:20	29:52	3	strrchr
arg	29:29	29:37	4	psz_path
water	29:29	0:0	5	psz_path
arg	29:39	29:52	4	DIR_SEP_CHAR
water	29:39	0:0	5	DIR_SEP_CHAR
if	30:4	35:4	2	(psz_buf)
cond	30:8	30:8	3	psz_buf
water	30:8	0:0	4	psz_buf
stmts	31:4	35:4	3	
water	31:4	0:0	4	{
op	32:8	0:0	4	*
op	32:9	0:0	4	++
water	32:11	0:0	4	psz_buf
op	32:19	0:0	4	=
water	32:21	0:0	4	'\0'
water	32:25	0:0	4	;
if	34:8	34:87	4	(!EMPTY_STR (psz_path ))
cond	34:12	34:33	5	!EMPTY_STR (psz_path )
op	34:12	0:0	6	!
call	34:13	34:33	6	EMPTY_STR
arg	34:24	34:33	7	psz_path
water	34:24	0:0	8	psz_path
stmts	34:37	34:87	5	
call	34:37	34:86	6	recursive_mkdir
arg	34:54	34:75	7	VLC_OBJECT(p_storage)
call	34:54	34:74	8	VLC_OBJECT
arg	34:65	34:74	9	p_storage
water	34:65	0:0	10	p_storage
arg	34:77	34:86	7	psz_path
water	34:77	0:0	8	psz_path
water	34:87	0:0	6	;
water	35:4	0:0	4	}
call	36:4	36:19	2	free
arg	36:10	36:19	3	psz_path
water	36:10	0:0	4	psz_path
water	36:20	0:0	2	;
decl	37:4	37:53	2	FILE	*p_catalog
op	37:20	0:0	2	=
call	37:22	37:52	3	vlc_fopen
arg	37:33	37:45	4	psz_file_tmp
water	37:33	0:0	5	psz_file_tmp
arg	37:47	37:52	4	"wt"
water	37:47	0:0	5	"wt"
if	38:4	43:4	2	(! p_catalog)
cond	38:9	38:10	3	! p_catalog
op	38:9	0:0	4	!
water	38:10	0:0	4	p_catalog
stmts	39:4	43:4	3	
water	39:4	0:0	4	{
call	40:8	40:23	4	free
arg	40:14	40:23	5	psz_file
water	40:14	0:0	6	psz_file
water	40:24	0:0	4	;
call	41:8	41:27	4	free
arg	41:14	41:27	5	psz_file_tmp
water	41:14	0:0	6	psz_file_tmp
water	41:28	0:0	4	;
return	42:8	42:27	4	VLC_EGENERIC
water	42:15	0:0	5	VLC_EGENERIC
water	43:4	0:0	4	}
call	45:4	45:71	2	fprintf
arg	45:13	45:22	3	p_catalog
water	45:13	0:0	4	p_catalog
arg	45:24	45:71	3	"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
water	45:24	0:0	4	"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
water	45:72	0:0	2	;
call	46:4	46:87	2	fprintf
arg	46:13	46:22	3	p_catalog
water	46:13	0:0	4	p_catalog
arg	46:24	46:87	3	"<videolan xmlns=\"http://videolan.org/ns/vlc/addons/1.0\">\n"
water	46:24	0:0	4	"<videolan xmlns=\"http://videolan.org/ns/vlc/addons/1.0\">\n"
water	46:88	0:0	2	;
call	47:4	47:39	2	fprintf
arg	47:13	47:22	3	p_catalog
water	47:13	0:0	4	p_catalog
arg	47:24	47:39	3	"\t<addons>\n"
water	47:24	0:0	4	"\t<addons>\n"
water	47:40	0:0	2	;
for	48:4	97:4	2	( int i = 0 ;i < i_entries;i ++)
forinit	0:0	48:17	3	 int i = 0 ;
decl	48:10	48:17	4	int	i
op	48:15	0:0	4	=
water	48:16	0:0	4	0
cond	48:19	48:21	3	i < i_entries
water	48:19	0:0	4	i
op	48:20	0:0	4	<
water	48:21	0:0	4	i_entries
forexpr	48:32	48:33	3	i ++
water	48:32	0:0	4	i
op	48:33	0:0	4	++
stmts	49:4	97:4	3	
water	49:4	0:0	4	{
water	50:8	0:0	4	p_entry
op	50:16	0:0	4	=
water	50:18	0:0	4	pp_entries
op	50:28	0:0	4	[
water	50:29	0:0	4	i
op	50:30	0:0	4	]
water	50:31	0:0	4	;
call	51:8	51:39	4	vlc_mutex_lock
arg	51:24	51:39	5	&p_entry->lock
op	51:24	0:0	6	&
water	51:25	0:0	6	p_entry
op	51:32	0:0	6	->
water	51:34	0:0	6	lock
water	51:40	0:0	4	;
water	52:8	0:0	4	psz_tempstring
op	52:23	0:0	4	=
water	52:25	0:0	4	NULL
water	52:29	0:0	4	;
if	53:8	58:8	4	(( p_entry -> e_state != ADDON_INSTALLED ) || ! ( p_entry -> e_flags & ADDON_MANAGEABLE ))
cond	53:13	54:52	5	( p_entry -> e_state != ADDON_INSTALLED ) || ! ( p_entry -> e_flags & ADDON_MANAGEABLE )
water	53:13	0:0	6	(
water	53:15	0:0	6	p_entry
op	53:22	0:0	6	->
water	53:24	0:0	6	e_state
op	53:32	0:0	6	!=
water	53:35	0:0	6	ADDON_INSTALLED
water	53:51	0:0	6	)
op	53:53	0:0	6	||
op	54:13	0:0	6	!
water	54:14	0:0	6	(
water	54:16	0:0	6	p_entry
op	54:23	0:0	6	->
water	54:25	0:0	6	e_flags
op	54:33	0:0	6	&
water	54:35	0:0	6	ADDON_MANAGEABLE
water	54:52	0:0	6	)
stmts	55:8	58:8	5	
water	55:8	0:0	6	{
call	56:12	56:45	6	vlc_mutex_unlock
arg	56:30	56:45	7	&p_entry->lock
op	56:30	0:0	8	&
water	56:31	0:0	8	p_entry
op	56:38	0:0	8	->
water	56:40	0:0	8	lock
water	56:46	0:0	6	;
continue	57:12	57:20	6	
water	58:8	0:0	6	}
if	59:8	60:84	4	(p_entry -> psz_source_module)
cond	59:13	59:22	5	p_entry -> psz_source_module
water	59:13	0:0	6	p_entry
op	59:20	0:0	6	->
water	59:22	0:0	6	psz_source_module
stmts	60:12	60:84	5	
water	60:12	0:0	6	psz_tempstring
op	60:27	0:0	6	=
call	60:29	60:83	6	convert_xml_special_chars
arg	60:56	60:83	7	p_entry->psz_source_module
water	60:56	0:0	8	p_entry
op	60:63	0:0	8	->
water	60:65	0:0	8	psz_source_module
water	60:84	0:0	6	;
decl	61:8	61:87	4	char	*psz_uuid
op	61:23	0:0	4	=
call	61:25	61:86	5	addons_uuid_to_psz
arg	61:45	61:86	6	(constaddon_uuid_t*)&p_entry->uuid
water	61:45	0:0	7	(
water	61:47	0:0	7	const
water	61:53	0:0	7	addon_uuid_t
op	61:66	0:0	7	*
water	61:68	0:0	7	)
op	61:70	0:0	7	&
water	61:72	0:0	7	p_entry
op	61:79	0:0	7	->
water	61:81	0:0	7	uuid
call	62:8	68:34	4	fprintf
arg	62:17	62:26	5	p_catalog
water	62:17	0:0	6	p_catalog
arg	62:28	63:65	5	"\t\t<addon source=\"%s\" type=\"%s\" id=\"%s\" ""downloads=\"%ld\" score=\"%d\""
water	62:28	0:0	6	"\t\t<addon source=\"%s\" type=\"%s\" id=\"%s\" "
water	63:33	0:0	6	"downloads=\"%ld\" score=\"%d\""
arg	64:17	64:57	5	(psz_tempstring)?psz_tempstring:""
water	64:17	0:0	6	(
water	64:19	0:0	6	psz_tempstring
water	64:34	0:0	6	)
water	64:36	0:0	6	?
water	64:38	0:0	6	psz_tempstring
water	64:53	0:0	6	:
water	64:55	0:0	6	""
arg	65:17	65:46	5	getTypePsz(p_entry->e_type)
call	65:17	65:45	6	getTypePsz
arg	65:29	65:45	7	p_entry->e_type
water	65:29	0:0	8	p_entry
op	65:36	0:0	8	->
water	65:38	0:0	8	e_type
arg	66:17	66:25	5	psz_uuid
water	66:17	0:0	6	psz_uuid
arg	67:17	67:37	5	p_entry->i_downloads
water	67:17	0:0	6	p_entry
op	67:24	0:0	6	->
water	67:26	0:0	6	i_downloads
arg	68:17	68:34	5	p_entry->i_score
water	68:17	0:0	6	p_entry
op	68:24	0:0	6	->
water	68:26	0:0	6	i_score
water	68:35	0:0	4	;
call	69:8	69:23	4	free
arg	69:14	69:23	5	psz_uuid
water	69:14	0:0	6	psz_uuid
water	69:24	0:0	4	;
call	70:8	70:29	4	free
arg	70:14	70:29	5	psz_tempstring
water	70:14	0:0	6	psz_tempstring
water	70:30	0:0	4	;
call	71:8	71:69	4	WRITE_WITH_ENTITIES
arg	71:29	71:46	5	" version=\"%s\""
water	71:29	0:0	6	" version=\"%s\""
arg	71:48	71:69	5	p_entry->psz_version
water	71:48	0:0	6	p_entry
op	71:55	0:0	6	->
water	71:57	0:0	6	psz_version
call	72:8	72:34	4	fprintf
arg	72:17	72:26	5	p_catalog
water	72:17	0:0	6	p_catalog
arg	72:28	72:34	5	">\n"
water	72:28	0:0	6	">\n"
water	72:35	0:0	4	;
call	73:8	73:74	4	WRITE_WITH_ENTITIES
arg	73:29	73:54	5	"\t\t\t<name>%s</name>\n"
water	73:29	0:0	6	"\t\t\t<name>%s</name>\n"
arg	73:56	73:74	5	p_entry->psz_name
water	73:56	0:0	6	p_entry
op	73:63	0:0	6	->
water	73:65	0:0	6	psz_name
call	74:8	74:83	4	WRITE_WITH_ENTITIES
arg	74:29	74:60	5	"\t\t\t<summary>%s</summary>\n"
water	74:29	0:0	6	"\t\t\t<summary>%s</summary>\n"
arg	74:62	74:83	5	p_entry->psz_summary
water	74:62	0:0	6	p_entry
op	74:69	0:0	6	->
water	74:71	0:0	6	psz_summary
water	75:8	0:0	4	if
water	75:11	0:0	4	(
water	75:13	0:0	4	p_entry
op	75:20	0:0	4	->
water	75:22	0:0	4	psz_description
water	75:38	0:0	4	)
water	76:8	0:0	4	{
water	77:12	0:0	4	psz_tempstring
op	77:27	0:0	4	=
water	77:29	0:0	4	p_entry
op	77:36	0:0	4	->
water	77:38	0:0	4	psz_description
water	77:53	0:0	4	;
water	79:12	0:0	4	while
water	79:17	0:0	4	(
water	79:19	0:0	4	(
water	79:21	0:0	4	psz_tempstring
op	79:36	0:0	4	=
call	79:38	79:68	4	strstr
arg	79:46	79:60	5	psz_tempstring
water	79:46	0:0	6	psz_tempstring
arg	79:62	79:68	5	"]]>"
water	79:62	0:0	6	"]]>"
water	79:70	0:0	4	)
water	79:72	0:0	4	)
op	80:16	0:0	4	*
water	80:17	0:0	4	psz_tempstring
op	80:32	0:0	4	=
water	80:34	0:0	4	' '
water	80:37	0:0	4	;
call	81:12	81:110	4	fprintf
arg	81:21	81:30	5	p_catalog
water	81:21	0:0	6	p_catalog
arg	81:32	81:83	5	"\t\t\t<description><![CDATA[%s]]></description>\n"
water	81:32	0:0	6	"\t\t\t<description><![CDATA[%s]]></description>\n"
arg	81:85	81:110	5	p_entry->psz_description
water	81:85	0:0	6	p_entry
op	81:92	0:0	6	->
water	81:94	0:0	6	psz_description
water	81:111	0:0	4	;
water	82:8	0:0	4	}
call	83:8	83:82	4	WRITE_WITH_ENTITIES
arg	83:29	83:56	5	"\t\t\t<image>%s</image>\n"
water	83:29	0:0	6	"\t\t\t<image>%s</image>\n"
arg	83:58	83:82	5	p_entry->psz_image_data
water	83:58	0:0	6	p_entry
op	83:65	0:0	6	->
water	83:67	0:0	6	psz_image_data
call	84:8	84:87	4	WRITE_WITH_ENTITIES
arg	84:29	84:60	5	"\t\t\t<archive>%s</archive>\n"
water	84:29	0:0	6	"\t\t\t<archive>%s</archive>\n"
arg	84:62	84:87	5	p_entry->psz_archive_uri
water	84:62	0:0	6	p_entry
op	84:69	0:0	6	->
water	84:71	0:0	6	psz_archive_uri
call	85:8	85:51	4	fprintf
arg	85:17	85:26	5	p_catalog
water	85:17	0:0	6	p_catalog
arg	85:28	85:51	5	"\t\t\t<authorship>\n"
water	85:28	0:0	6	"\t\t\t<authorship>\n"
water	85:52	0:0	4	;
call	86:8	86:84	4	WRITE_WITH_ENTITIES
arg	86:29	86:62	5	"\t\t\t\t<creator>%s</creator>\n"
water	86:29	0:0	6	"\t\t\t\t<creator>%s</creator>\n"
arg	86:64	86:84	5	p_entry->psz_author
water	86:64	0:0	6	p_entry
op	86:71	0:0	6	->
water	86:73	0:0	6	psz_author
call	87:8	87:92	4	WRITE_WITH_ENTITIES
arg	87:29	87:66	5	"\t\t\t\t<sourceurl>%s</sourceurl>\n"
water	87:29	0:0	6	"\t\t\t\t<sourceurl>%s</sourceurl>\n"
arg	87:68	87:92	5	p_entry->psz_source_uri
water	87:68	0:0	6	p_entry
op	87:75	0:0	6	->
water	87:77	0:0	6	psz_source_uri
call	88:8	88:52	4	fprintf
arg	88:17	88:26	5	p_catalog
water	88:17	0:0	6	p_catalog
arg	88:28	88:52	5	"\t\t\t</authorship>\n"
water	88:28	0:0	6	"\t\t\t</authorship>\n"
water	88:53	0:0	4	;
call	89:8	89:60	4	FOREACH_ARRAY
arg	89:23	89:43	5	addon_file_t*p_file
water	89:23	0:0	6	addon_file_t
op	89:36	0:0	6	*
water	89:37	0:0	6	p_file
arg	89:45	89:60	5	p_entry->files
water	89:45	0:0	6	p_entry
op	89:52	0:0	6	->
water	89:54	0:0	6	files
water	90:12	0:0	4	psz_tempstring
op	90:27	0:0	4	=
call	90:29	90:77	4	convert_xml_special_chars
arg	90:56	90:77	5	p_file->psz_filename
water	90:56	0:0	6	p_file
op	90:62	0:0	6	->
water	90:64	0:0	6	psz_filename
water	90:78	0:0	4	;
call	91:12	92:70	4	fprintf
arg	91:21	91:30	5	p_catalog
water	91:21	0:0	6	p_catalog
arg	91:32	91:77	5	"\t\t\t<resource type=\"%s\">%s</resource>\n"
water	91:32	0:0	6	"\t\t\t<resource type=\"%s\">%s</resource>\n"
arg	92:21	92:53	5	getTypePsz(p_file->e_filetype)
call	92:21	92:52	6	getTypePsz
arg	92:33	92:52	7	p_file->e_filetype
water	92:33	0:0	8	p_file
op	92:39	0:0	8	->
water	92:41	0:0	8	e_filetype
arg	92:55	92:70	5	psz_tempstring
water	92:55	0:0	6	psz_tempstring
water	92:71	0:0	4	;
call	93:12	93:33	4	free
arg	93:18	93:33	5	psz_tempstring
water	93:18	0:0	6	psz_tempstring
water	93:34	0:0	4	;
call	94:8	94:20	4	FOREACH_END
water	94:21	0:0	4	;
call	95:8	95:45	4	fprintf
arg	95:17	95:26	5	p_catalog
water	95:17	0:0	6	p_catalog
arg	95:28	95:45	5	"\t\t</addon>\n"
water	95:28	0:0	6	"\t\t</addon>\n"
water	95:46	0:0	4	;
call	96:8	96:41	4	vlc_mutex_unlock
arg	96:26	96:41	5	&p_entry->lock
op	96:26	0:0	6	&
water	96:27	0:0	6	p_entry
op	96:34	0:0	6	->
water	96:36	0:0	6	lock
water	96:42	0:0	4	;
water	97:4	0:0	4	}
call	98:4	98:40	2	fprintf
arg	98:13	98:22	3	p_catalog
water	98:13	0:0	4	p_catalog
arg	98:24	98:40	3	"\t</addons>\n"
water	98:24	0:0	4	"\t</addons>\n"
water	98:41	0:0	2	;
call	99:4	99:40	2	fprintf
arg	99:13	99:22	3	p_catalog
water	99:13	0:0	4	p_catalog
arg	99:24	99:40	3	"</videolan>\n"
water	99:24	0:0	4	"</videolan>\n"
water	99:41	0:0	2	;
call	100:4	100:22	2	fclose
arg	100:12	100:22	3	p_catalog
water	100:12	0:0	4	p_catalog
water	100:23	0:0	2	;
decl	101:4	101:52	2	int	i_ret
op	101:14	0:0	2	=
call	101:16	101:51	3	vlc_rename
arg	101:28	101:40	4	psz_file_tmp
water	101:28	0:0	5	psz_file_tmp
arg	101:42	101:51	4	psz_file
water	101:42	0:0	5	psz_file
call	102:4	102:19	2	free
arg	102:10	102:19	3	psz_file
water	102:10	0:0	4	psz_file
water	102:20	0:0	2	;
call	103:4	103:23	2	free
arg	103:10	103:23	3	psz_file_tmp
water	103:10	0:0	4	psz_file_tmp
water	103:24	0:0	2	;
if	104:4	109:4	2	(i_ret == - 1)
cond	104:8	104:18	3	i_ret == - 1
water	104:8	0:0	4	i_ret
op	104:14	0:0	4	==
op	104:17	0:0	4	-
water	104:18	0:0	4	1
stmts	105:4	109:4	3	
water	105:4	0:0	4	{
call	106:8	107:39	4	msg_Err
arg	106:17	106:26	5	p_storage
water	106:17	0:0	6	p_storage
arg	106:28	106:63	5	"could not rename temp catalog: %s"
water	106:28	0:0	6	"could not rename temp catalog: %s"
arg	107:17	107:39	5	vlc_strerror_c(errno)
call	107:17	107:37	6	vlc_strerror_c
arg	107:32	107:37	7	errno
water	107:32	0:0	8	errno
water	107:40	0:0	4	;
return	108:8	108:27	4	VLC_EGENERIC
water	108:15	0:0	5	VLC_EGENERIC
water	109:4	0:0	4	}
return	110:4	110:22	2	VLC_SUCCESS
water	110:11	0:0	3	VLC_SUCCESS
