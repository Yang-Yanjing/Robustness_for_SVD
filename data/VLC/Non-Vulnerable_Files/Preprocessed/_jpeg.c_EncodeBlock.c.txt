func	2:0	77:0	0	static block_t *	EncodeBlock
params	2:27	0:0	1	
param	2:28	2:44	2	encoder_t *	p_enc
param	2:46	2:62	2	picture_t *	p_pic
stmnts	0:0	76:15	1	
decl	4:4	4:39	2	encoder_sys_t	*p_sys
op	4:25	0:0	2	=
water	4:27	0:0	2	p_enc
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
if	5:4	8:4	2	(unlikely (! p_pic ))
cond	5:8	5:23	3	unlikely (! p_pic )
call	5:8	5:23	4	unlikely
arg	5:17	5:23	5	!p_pic
op	5:17	0:0	6	!
water	5:18	0:0	6	p_pic
stmts	6:4	8:4	3	
water	6:4	0:0	4	{
return	7:8	7:19	4	NULL
water	7:15	0:0	5	NULL
water	8:4	0:0	4	}
decl	9:4	9:54	2	block_t	*p_block
op	9:21	0:0	2	=
call	9:23	9:53	3	block_Alloc
arg	9:35	9:53	4	p_sys->i_blocksize
water	9:35	0:0	5	p_sys
op	9:40	0:0	5	->
water	9:42	0:0	5	i_blocksize
if	10:4	13:4	2	(p_block == NULL)
cond	10:8	10:19	3	p_block == NULL
water	10:8	0:0	4	p_block
op	10:16	0:0	4	==
water	10:19	0:0	4	NULL
stmts	11:4	13:4	3	
water	11:4	0:0	4	{
return	12:8	12:19	4	NULL
water	12:15	0:0	5	NULL
water	13:4	0:0	4	}
decl	14:4	14:36	2	JSAMPIMAGE	p_row_pointers
op	14:30	0:0	2	=
water	14:32	0:0	2	NULL
if	16:4	19:4	2	(setjmp (p_sys -> setjmp_buffer ))
cond	16:8	16:35	3	setjmp (p_sys -> setjmp_buffer )
call	16:8	16:35	4	setjmp
arg	16:15	16:35	5	p_sys->setjmp_buffer
water	16:15	0:0	6	p_sys
op	16:20	0:0	6	->
water	16:22	0:0	6	setjmp_buffer
stmts	17:4	19:4	3	
water	17:4	0:0	4	{
goto	18:8	18:18	4	error
water	18:13	0:0	5	error
water	19:4	0:0	4	}
call	20:4	20:39	2	jpeg_create_compress
arg	20:25	20:39	3	&p_sys->p_jpeg
op	20:25	0:0	4	&
water	20:26	0:0	4	p_sys
op	20:31	0:0	4	->
water	20:33	0:0	4	p_jpeg
water	20:40	0:0	2	;
call	21:4	21:72	2	jpeg_mem_dest
arg	21:18	21:32	3	&p_sys->p_jpeg
op	21:18	0:0	4	&
water	21:19	0:0	4	p_sys
op	21:24	0:0	4	->
water	21:26	0:0	4	p_jpeg
arg	21:34	21:52	3	&p_block->p_buffer
op	21:34	0:0	4	&
water	21:35	0:0	4	p_block
op	21:42	0:0	4	->
water	21:44	0:0	4	p_buffer
arg	21:54	21:72	3	&p_block->i_buffer
op	21:54	0:0	4	&
water	21:55	0:0	4	p_block
op	21:62	0:0	4	->
water	21:64	0:0	4	i_buffer
water	21:73	0:0	2	;
water	22:4	0:0	2	p_sys
op	22:9	0:0	2	->
water	22:11	0:0	2	p_jpeg
op	22:17	0:0	2	.
water	22:18	0:0	2	image_width
op	22:30	0:0	2	=
water	22:32	0:0	2	p_enc
op	22:37	0:0	2	->
water	22:39	0:0	2	fmt_in
op	22:45	0:0	2	.
water	22:46	0:0	2	video
op	22:51	0:0	2	.
water	22:52	0:0	2	i_visible_width
water	22:67	0:0	2	;
water	23:4	0:0	2	p_sys
op	23:9	0:0	2	->
water	23:11	0:0	2	p_jpeg
op	23:17	0:0	2	.
water	23:18	0:0	2	image_height
op	23:31	0:0	2	=
water	23:33	0:0	2	p_enc
op	23:38	0:0	2	->
water	23:40	0:0	2	fmt_in
op	23:46	0:0	2	.
water	23:47	0:0	2	video
op	23:52	0:0	2	.
water	23:53	0:0	2	i_visible_height
water	23:69	0:0	2	;
water	24:4	0:0	2	p_sys
op	24:9	0:0	2	->
water	24:11	0:0	2	p_jpeg
op	24:17	0:0	2	.
water	24:18	0:0	2	input_components
op	24:35	0:0	2	=
water	24:37	0:0	2	3
water	24:38	0:0	2	;
water	25:4	0:0	2	p_sys
op	25:9	0:0	2	->
water	25:11	0:0	2	p_jpeg
op	25:17	0:0	2	.
water	25:18	0:0	2	in_color_space
op	25:33	0:0	2	=
water	25:35	0:0	2	JCS_YCbCr
water	25:44	0:0	2	;
call	26:4	26:36	2	jpeg_set_defaults
arg	26:22	26:36	3	&p_sys->p_jpeg
op	26:22	0:0	4	&
water	26:23	0:0	4	p_sys
op	26:28	0:0	4	->
water	26:30	0:0	4	p_jpeg
water	26:37	0:0	2	;
call	27:4	27:49	2	jpeg_set_colorspace
arg	27:24	27:38	3	&p_sys->p_jpeg
op	27:24	0:0	4	&
water	27:25	0:0	4	p_sys
op	27:30	0:0	4	->
water	27:32	0:0	4	p_jpeg
arg	27:40	27:49	3	JCS_YCbCr
water	27:40	0:0	4	JCS_YCbCr
water	27:50	0:0	2	;
water	28:4	0:0	2	p_sys
op	28:9	0:0	2	->
water	28:11	0:0	2	p_jpeg
op	28:17	0:0	2	.
water	28:18	0:0	2	raw_data_in
op	28:30	0:0	2	=
water	28:32	0:0	2	TRUE
water	28:36	0:0	2	;
water	30:4	0:0	2	p_sys
op	30:9	0:0	2	->
water	30:11	0:0	2	p_jpeg
op	30:17	0:0	2	.
water	30:18	0:0	2	do_fancy_downsampling
op	30:40	0:0	2	=
water	30:42	0:0	2	FALSE
water	30:47	0:0	2	;
call	32:4	32:59	2	jpeg_set_quality
arg	32:21	32:35	3	&p_sys->p_jpeg
op	32:21	0:0	4	&
water	32:22	0:0	4	p_sys
op	32:27	0:0	4	->
water	32:29	0:0	4	p_jpeg
arg	32:37	32:53	3	p_sys->i_quality
water	32:37	0:0	4	p_sys
op	32:42	0:0	4	->
water	32:44	0:0	4	i_quality
arg	32:55	32:59	3	TRUE
water	32:55	0:0	4	TRUE
water	32:60	0:0	2	;
call	33:4	33:44	2	jpeg_start_compress
arg	33:24	33:38	3	&p_sys->p_jpeg
op	33:24	0:0	4	&
water	33:25	0:0	4	p_sys
op	33:30	0:0	4	->
water	33:32	0:0	4	p_jpeg
arg	33:40	33:44	3	TRUE
water	33:40	0:0	4	TRUE
water	33:45	0:0	2	;
water	35:4	0:0	2	p_row_pointers
op	35:19	0:0	2	=
call	35:21	35:64	2	malloc
arg	35:28	35:64	3	sizeof(JSAMPARRAY)*p_pic->i_planes
op	35:28	0:0	4	sizeof
water	35:34	0:0	4	(
water	35:35	0:0	4	JSAMPARRAY
water	35:45	0:0	4	)
op	35:47	0:0	4	*
water	35:49	0:0	4	p_pic
op	35:54	0:0	4	->
water	35:56	0:0	4	i_planes
water	35:65	0:0	2	;
if	36:4	39:4	2	(p_row_pointers == NULL)
cond	36:8	36:26	3	p_row_pointers == NULL
water	36:8	0:0	4	p_row_pointers
op	36:23	0:0	4	==
water	36:26	0:0	4	NULL
stmts	37:4	39:4	3	
water	37:4	0:0	4	{
goto	38:8	38:18	4	error
water	38:13	0:0	5	error
water	39:4	0:0	4	}
for	40:4	43:4	2	( int i = 0 ;i < p_pic -> i_planes;i ++)
forinit	0:0	40:18	3	 int i = 0 ;
decl	40:9	40:18	4	int	i
op	40:15	0:0	4	=
water	40:17	0:0	4	0
cond	40:20	40:31	3	i < p_pic -> i_planes
water	40:20	0:0	4	i
op	40:22	0:0	4	<
water	40:24	0:0	4	p_pic
op	40:29	0:0	4	->
water	40:31	0:0	4	i_planes
forexpr	40:41	40:42	3	i ++
water	40:41	0:0	4	i
op	40:42	0:0	4	++
stmts	41:4	43:4	3	
water	41:4	0:0	4	{
water	42:8	0:0	4	p_row_pointers
op	42:22	0:0	4	[
water	42:23	0:0	4	i
op	42:24	0:0	4	]
op	42:26	0:0	4	=
call	42:28	42:104	4	malloc
arg	42:35	42:104	5	sizeof(JSAMPROW)*p_sys->p_jpeg.comp_info[i].v_samp_factor*DCTSIZE
op	42:35	0:0	6	sizeof
water	42:41	0:0	6	(
water	42:42	0:0	6	JSAMPROW
water	42:50	0:0	6	)
op	42:52	0:0	6	*
water	42:54	0:0	6	p_sys
op	42:59	0:0	6	->
water	42:61	0:0	6	p_jpeg
op	42:67	0:0	6	.
water	42:68	0:0	6	comp_info
op	42:77	0:0	6	[
water	42:78	0:0	6	i
op	42:79	0:0	6	]
op	42:80	0:0	6	.
water	42:81	0:0	6	v_samp_factor
op	42:95	0:0	6	*
water	42:97	0:0	6	DCTSIZE
water	42:105	0:0	4	;
water	43:4	0:0	4	}
while	44:4	55:4	2	(p_sys -> p_jpeg . next_scanline < p_sys -> p_jpeg . image_height)
cond	44:11	44:55	3	p_sys -> p_jpeg . next_scanline < p_sys -> p_jpeg . image_height
water	44:11	0:0	4	p_sys
op	44:16	0:0	4	->
water	44:18	0:0	4	p_jpeg
op	44:24	0:0	4	.
water	44:25	0:0	4	next_scanline
op	44:39	0:0	4	<
water	44:41	0:0	4	p_sys
op	44:46	0:0	4	->
water	44:48	0:0	4	p_jpeg
op	44:54	0:0	4	.
water	44:55	0:0	4	image_height
stmts	45:4	55:4	3	
water	45:4	0:0	4	{
for	46:8	53:8	4	( int i = 0 ;i < p_pic -> i_planes;i ++)
forinit	0:0	46:22	5	 int i = 0 ;
decl	46:13	46:22	6	int	i
op	46:19	0:0	6	=
water	46:21	0:0	6	0
cond	46:24	46:35	5	i < p_pic -> i_planes
water	46:24	0:0	6	i
op	46:26	0:0	6	<
water	46:28	0:0	6	p_pic
op	46:33	0:0	6	->
water	46:35	0:0	6	i_planes
forexpr	46:45	46:46	5	i ++
water	46:45	0:0	6	i
op	46:46	0:0	6	++
stmts	47:8	53:8	5	
water	47:8	0:0	6	{
decl	48:12	48:131	6	int	i_offset
op	48:25	0:0	6	=
water	48:27	0:0	6	p_sys
op	48:32	0:0	6	->
water	48:34	0:0	6	p_jpeg
op	48:40	0:0	6	.
water	48:41	0:0	6	next_scanline
op	48:55	0:0	6	*
water	48:57	0:0	6	p_sys
op	48:62	0:0	6	->
water	48:64	0:0	6	p_jpeg
op	48:70	0:0	6	.
water	48:71	0:0	6	comp_info
op	48:80	0:0	6	[
water	48:81	0:0	6	i
op	48:82	0:0	6	]
op	48:83	0:0	6	.
water	48:84	0:0	6	v_samp_factor
op	48:98	0:0	6	/
water	48:100	0:0	6	p_sys
op	48:105	0:0	6	->
water	48:107	0:0	6	p_jpeg
op	48:113	0:0	6	.
water	48:114	0:0	6	max_v_samp_factor
for	49:12	52:12	6	( int j = 0 ;j < p_sys -> p_jpeg . comp_info [ i ] . v_samp_factor * DCTSIZE;j ++)
forinit	0:0	49:26	7	 int j = 0 ;
decl	49:17	49:26	8	int	j
op	49:23	0:0	8	=
water	49:25	0:0	8	0
cond	49:28	49:75	7	j < p_sys -> p_jpeg . comp_info [ i ] . v_samp_factor * DCTSIZE
water	49:28	0:0	8	j
op	49:30	0:0	8	<
water	49:32	0:0	8	p_sys
op	49:37	0:0	8	->
water	49:39	0:0	8	p_jpeg
op	49:45	0:0	8	.
water	49:46	0:0	8	comp_info
op	49:55	0:0	8	[
water	49:56	0:0	8	i
op	49:57	0:0	8	]
op	49:58	0:0	8	.
water	49:59	0:0	8	v_samp_factor
op	49:73	0:0	8	*
water	49:75	0:0	8	DCTSIZE
forexpr	49:84	49:85	7	j ++
water	49:84	0:0	8	j
op	49:85	0:0	8	++
stmts	50:12	52:12	7	
water	50:12	0:0	8	{
water	51:16	0:0	8	p_row_pointers
op	51:30	0:0	8	[
water	51:31	0:0	8	i
op	51:32	0:0	8	]
op	51:33	0:0	8	[
water	51:34	0:0	8	j
op	51:35	0:0	8	]
op	51:37	0:0	8	=
water	51:39	0:0	8	p_pic
op	51:44	0:0	8	->
water	51:46	0:0	8	p
op	51:47	0:0	8	[
water	51:48	0:0	8	i
op	51:49	0:0	8	]
op	51:50	0:0	8	.
water	51:51	0:0	8	p_pixels
op	51:60	0:0	8	+
water	51:62	0:0	8	p_pic
op	51:67	0:0	8	->
water	51:69	0:0	8	p
op	51:70	0:0	8	[
water	51:71	0:0	8	i
op	51:72	0:0	8	]
op	51:73	0:0	8	.
water	51:74	0:0	8	i_pitch
op	51:82	0:0	8	*
water	51:84	0:0	8	(
water	51:85	0:0	8	i_offset
op	51:94	0:0	8	+
water	51:96	0:0	8	j
water	51:97	0:0	8	)
water	51:98	0:0	8	;
water	52:12	0:0	8	}
water	53:8	0:0	6	}
call	54:8	54:101	4	jpeg_write_raw_data
arg	54:28	54:42	5	&p_sys->p_jpeg
op	54:28	0:0	6	&
water	54:29	0:0	6	p_sys
op	54:34	0:0	6	->
water	54:36	0:0	6	p_jpeg
arg	54:44	54:58	5	p_row_pointers
water	54:44	0:0	6	p_row_pointers
arg	54:60	54:101	5	p_sys->p_jpeg.max_v_samp_factor*DCTSIZE
water	54:60	0:0	6	p_sys
op	54:65	0:0	6	->
water	54:67	0:0	6	p_jpeg
op	54:73	0:0	6	.
water	54:74	0:0	6	max_v_samp_factor
op	54:92	0:0	6	*
water	54:94	0:0	6	DCTSIZE
water	54:102	0:0	4	;
water	55:4	0:0	4	}
call	56:4	56:39	2	jpeg_finish_compress
arg	56:25	56:39	3	&p_sys->p_jpeg
op	56:25	0:0	4	&
water	56:26	0:0	4	p_sys
op	56:31	0:0	4	->
water	56:33	0:0	4	p_jpeg
water	56:40	0:0	2	;
call	57:4	57:40	2	jpeg_destroy_compress
arg	57:26	57:40	3	&p_sys->p_jpeg
op	57:26	0:0	4	&
water	57:27	0:0	4	p_sys
op	57:32	0:0	4	->
water	57:34	0:0	4	p_jpeg
water	57:41	0:0	2	;
for	58:4	61:4	2	( int i = 0 ;i < p_pic -> i_planes;i ++)
forinit	0:0	58:18	3	 int i = 0 ;
decl	58:9	58:18	4	int	i
op	58:15	0:0	4	=
water	58:17	0:0	4	0
cond	58:20	58:31	3	i < p_pic -> i_planes
water	58:20	0:0	4	i
op	58:22	0:0	4	<
water	58:24	0:0	4	p_pic
op	58:29	0:0	4	->
water	58:31	0:0	4	i_planes
forexpr	58:41	58:42	3	i ++
water	58:41	0:0	4	i
op	58:42	0:0	4	++
stmts	59:4	61:4	3	
water	59:4	0:0	4	{
call	60:8	60:30	4	free
arg	60:13	60:30	5	p_row_pointers[i]
water	60:13	0:0	6	p_row_pointers
op	60:27	0:0	6	[
water	60:28	0:0	6	i
op	60:29	0:0	6	]
water	60:31	0:0	4	;
water	61:4	0:0	4	}
call	62:4	62:23	2	free
arg	62:9	62:23	3	p_row_pointers
water	62:9	0:0	4	p_row_pointers
water	62:24	0:0	2	;
water	63:4	0:0	2	p_block
op	63:11	0:0	2	->
water	63:13	0:0	2	i_dts
op	63:19	0:0	2	=
water	63:21	0:0	2	p_block
op	63:28	0:0	2	->
water	63:30	0:0	2	i_pts
op	63:36	0:0	2	=
water	63:38	0:0	2	p_pic
op	63:43	0:0	2	->
water	63:45	0:0	2	date
water	63:49	0:0	2	;
return	64:4	64:18	2	p_block
water	64:11	0:0	3	p_block
label	65:0	65:5	2	error :
call	66:4	66:40	2	jpeg_destroy_compress
arg	66:26	66:40	3	&p_sys->p_jpeg
op	66:26	0:0	4	&
water	66:27	0:0	4	p_sys
op	66:32	0:0	4	->
water	66:34	0:0	4	p_jpeg
water	66:41	0:0	2	;
if	67:4	73:4	2	(p_row_pointers != NULL)
cond	67:8	67:26	3	p_row_pointers != NULL
water	67:8	0:0	4	p_row_pointers
op	67:23	0:0	4	!=
water	67:26	0:0	4	NULL
stmts	68:4	73:4	3	
water	68:4	0:0	4	{
for	69:8	72:8	4	( int i = 0 ;i < p_pic -> i_planes;i ++)
forinit	0:0	69:22	5	 int i = 0 ;
decl	69:13	69:22	6	int	i
op	69:19	0:0	6	=
water	69:21	0:0	6	0
cond	69:24	69:35	5	i < p_pic -> i_planes
water	69:24	0:0	6	i
op	69:26	0:0	6	<
water	69:28	0:0	6	p_pic
op	69:33	0:0	6	->
water	69:35	0:0	6	i_planes
forexpr	69:45	69:46	5	i ++
water	69:45	0:0	6	i
op	69:46	0:0	6	++
stmts	70:8	72:8	5	
water	70:8	0:0	6	{
call	71:12	71:34	6	free
arg	71:17	71:34	7	p_row_pointers[i]
water	71:17	0:0	8	p_row_pointers
op	71:31	0:0	8	[
water	71:32	0:0	8	i
op	71:33	0:0	8	]
water	71:35	0:0	6	;
water	72:8	0:0	6	}
water	73:4	0:0	4	}
call	74:4	74:23	2	free
arg	74:9	74:23	3	p_row_pointers
water	74:9	0:0	4	p_row_pointers
water	74:24	0:0	2	;
call	75:4	75:25	2	block_Release
arg	75:18	75:25	3	p_block
water	75:18	0:0	4	p_block
water	75:26	0:0	2	;
return	76:4	76:15	2	NULL
water	76:11	0:0	3	NULL
