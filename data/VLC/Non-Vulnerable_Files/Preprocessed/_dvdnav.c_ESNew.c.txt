func	2:0	86:0	0	static void	ESNew
params	2:17	0:0	1	
param	2:19	2:35	2	demux_t *	p_demux
param	2:37	2:46	2	int	i_id
stmnts	0:0	85:66	1	
decl	4:4	4:39	2	demux_sys_t	*p_sys
op	4:23	0:0	2	=
water	4:25	0:0	2	p_demux
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:51	2	ps_track_t	*tk
op	5:20	0:0	2	=
op	5:22	0:0	2	&
water	5:23	0:0	2	p_sys
op	5:28	0:0	2	->
water	5:30	0:0	2	tk
op	5:32	0:0	2	[
call	5:33	5:49	3	PS_ID_TO_TK
arg	5:45	5:49	4	i_id
water	5:45	0:0	5	i_id
op	5:50	0:0	2	]
decl	6:4	6:26	2	bool	b_select
op	6:19	0:0	2	=
water	6:21	0:0	2	false
if	7:4	7:27	2	(tk -> b_seen)
cond	7:8	7:12	3	tk -> b_seen
water	7:8	0:0	4	tk
op	7:10	0:0	4	->
water	7:12	0:0	4	b_seen
stmts	7:21	7:27	3	
return	7:21	7:27	4	
if	8:4	12:4	2	(ps_track_fill (tk ,0 ,i_id ))
cond	8:8	8:35	3	ps_track_fill (tk ,0 ,i_id )
call	8:8	8:35	4	ps_track_fill
arg	8:23	8:25	5	tk
water	8:23	0:0	6	tk
arg	8:27	8:28	5	0
water	8:27	0:0	6	0
arg	8:30	8:35	5	i_id
water	8:30	0:0	6	i_id
stmts	9:4	12:4	3	
water	9:4	0:0	4	{
call	10:8	10:61	4	msg_Warn
arg	10:18	10:25	5	p_demux
water	10:18	0:0	6	p_demux
arg	10:27	10:54	5	"unknown codec for id=0x%x"
water	10:27	0:0	6	"unknown codec for id=0x%x"
arg	10:56	10:61	5	i_id
water	10:56	0:0	6	i_id
water	10:62	0:0	4	;
return	11:8	11:14	4	
water	12:4	0:0	4	}
if	14:4	19:4	2	(tk -> fmt . i_cat == VIDEO_ES)
cond	14:8	14:25	3	tk -> fmt . i_cat == VIDEO_ES
water	14:8	0:0	4	tk
op	14:10	0:0	4	->
water	14:12	0:0	4	fmt
op	14:15	0:0	4	.
water	14:16	0:0	4	i_cat
op	14:22	0:0	4	==
water	14:25	0:0	4	VIDEO_ES
stmts	15:4	19:4	3	
water	15:4	0:0	4	{
water	16:8	0:0	4	tk
op	16:10	0:0	4	->
water	16:12	0:0	4	fmt
op	16:15	0:0	4	.
water	16:16	0:0	4	video
op	16:21	0:0	4	.
water	16:22	0:0	4	i_sar_num
op	16:32	0:0	4	=
water	16:34	0:0	4	p_sys
op	16:39	0:0	4	->
water	16:41	0:0	4	sar
op	16:44	0:0	4	.
water	16:45	0:0	4	i_num
water	16:50	0:0	4	;
water	17:8	0:0	4	tk
op	17:10	0:0	4	->
water	17:12	0:0	4	fmt
op	17:15	0:0	4	.
water	17:16	0:0	4	video
op	17:21	0:0	4	.
water	17:22	0:0	4	i_sar_den
op	17:32	0:0	4	=
water	17:34	0:0	4	p_sys
op	17:39	0:0	4	->
water	17:41	0:0	4	sar
op	17:44	0:0	4	.
water	17:45	0:0	4	i_den
water	17:50	0:0	4	;
water	18:8	0:0	4	b_select
op	18:17	0:0	4	=
water	18:19	0:0	4	true
water	18:23	0:0	4	;
water	19:4	0:0	4	}
else	20:4	55:4	2
stmts	20:9	55:4	3	
if	20:9	55:4	4	(tk -> fmt . i_cat == AUDIO_ES)
cond	20:13	20:30	5	tk -> fmt . i_cat == AUDIO_ES
water	20:13	0:0	6	tk
op	20:15	0:0	6	->
water	20:17	0:0	6	fmt
op	20:20	0:0	6	.
water	20:21	0:0	6	i_cat
op	20:27	0:0	6	==
water	20:30	0:0	6	AUDIO_ES
stmts	21:4	55:4	5	
water	21:4	0:0	6	{
decl	22:8	22:24	6	int	i_audio
op	22:20	0:0	6	=
op	22:22	0:0	6	-
water	22:23	0:0	6	1
if	24:8	27:8	6	(( i_id & 0 xbdf8 ) == 0 xbd88)
cond	24:12	24:30	7	( i_id & 0 xbdf8 ) == 0 xbd88
water	24:12	0:0	8	(
water	24:13	0:0	8	i_id
op	24:17	0:0	8	&
water	24:18	0:0	8	0
water	24:19	0:0	8	xbdf8
water	24:24	0:0	8	)
op	24:26	0:0	8	==
water	24:29	0:0	8	0
water	24:30	0:0	8	xbd88
stmts	25:8	27:8	7	
water	25:8	0:0	8	{
water	26:12	0:0	8	i_audio
op	26:20	0:0	8	=
water	26:22	0:0	8	i_id
op	26:26	0:0	8	&
water	26:27	0:0	8	0
water	26:28	0:0	8	x07
water	26:31	0:0	8	;
water	27:8	0:0	8	}
else	28:8	31:8	6
stmts	28:13	31:8	7	
if	28:13	31:8	8	(( i_id & 0 xbdf0 ) == 0 xbd80)
cond	28:17	28:35	9	( i_id & 0 xbdf0 ) == 0 xbd80
water	28:17	0:0	10	(
water	28:18	0:0	10	i_id
op	28:22	0:0	10	&
water	28:23	0:0	10	0
water	28:24	0:0	10	xbdf0
water	28:29	0:0	10	)
op	28:31	0:0	10	==
water	28:34	0:0	10	0
water	28:35	0:0	10	xbd80
stmts	29:8	31:8	9	
water	29:8	0:0	10	{
water	30:12	0:0	10	i_audio
op	30:20	0:0	10	=
water	30:22	0:0	10	i_id
op	30:26	0:0	10	&
water	30:27	0:0	10	0
water	30:28	0:0	10	xf
water	30:30	0:0	10	;
water	31:8	0:0	10	}
else	32:8	35:8	6
stmts	32:13	35:8	7	
if	32:13	35:8	8	(( i_id & 0 xbdf0 ) == 0 xbda0)
cond	32:17	32:35	9	( i_id & 0 xbdf0 ) == 0 xbda0
water	32:17	0:0	10	(
water	32:18	0:0	10	i_id
op	32:22	0:0	10	&
water	32:23	0:0	10	0
water	32:24	0:0	10	xbdf0
water	32:29	0:0	10	)
op	32:31	0:0	10	==
water	32:34	0:0	10	0
water	32:35	0:0	10	xbda0
stmts	33:8	35:8	9	
water	33:8	0:0	10	{
water	34:12	0:0	10	i_audio
op	34:20	0:0	10	=
water	34:22	0:0	10	i_id
op	34:26	0:0	10	&
water	34:27	0:0	10	0
water	34:28	0:0	10	x1f
water	34:31	0:0	10	;
water	35:8	0:0	10	}
else	36:8	39:8	6
stmts	36:13	39:8	7	
if	36:13	39:8	8	(( i_id & 0 xe0 ) == 0 xc0)
cond	36:17	36:35	9	( i_id & 0 xe0 ) == 0 xc0
water	36:17	0:0	10	(
water	36:19	0:0	10	i_id
op	36:23	0:0	10	&
water	36:24	0:0	10	0
water	36:25	0:0	10	xe0
water	36:29	0:0	10	)
op	36:31	0:0	10	==
water	36:34	0:0	10	0
water	36:35	0:0	10	xc0
stmts	37:8	39:8	9	
water	37:8	0:0	10	{
water	38:12	0:0	10	i_audio
op	38:20	0:0	10	=
water	38:22	0:0	10	i_id
op	38:26	0:0	10	&
water	38:27	0:0	10	0
water	38:28	0:0	10	x1f
water	38:31	0:0	10	;
water	39:8	0:0	10	}
if	40:8	54:8	6	(i_audio >= 0)
cond	40:12	40:23	7	i_audio >= 0
water	40:12	0:0	8	i_audio
op	40:20	0:0	8	>=
water	40:23	0:0	8	0
stmts	41:8	54:8	7	
water	41:8	0:0	8	{
decl	42:12	42:78	8	int	i_lang
op	42:23	0:0	8	=
call	42:25	42:77	9	dvdnav_audio_stream_to_lang
arg	42:54	42:67	10	p_sys->dvdnav
water	42:54	0:0	11	p_sys
op	42:59	0:0	11	->
water	42:61	0:0	11	dvdnav
arg	42:69	42:77	10	i_audio
water	42:69	0:0	11	i_audio
if	43:12	49:12	8	(i_lang != 0 xffff)
cond	43:16	43:27	9	i_lang != 0 xffff
water	43:16	0:0	10	i_lang
op	43:23	0:0	10	!=
water	43:26	0:0	10	0
water	43:27	0:0	10	xffff
stmts	44:12	49:12	9	
water	44:12	0:0	10	{
water	45:16	0:0	10	tk
op	45:18	0:0	10	->
water	45:20	0:0	10	fmt
op	45:23	0:0	10	.
water	45:24	0:0	10	psz_language
op	45:37	0:0	10	=
call	45:39	45:49	10	malloc
arg	45:47	45:49	11	3
water	45:47	0:0	12	3
water	45:50	0:0	10	;
water	46:16	0:0	10	tk
op	46:18	0:0	10	->
water	46:20	0:0	10	fmt
op	46:23	0:0	10	.
water	46:24	0:0	10	psz_language
op	46:36	0:0	10	[
water	46:37	0:0	10	0
op	46:38	0:0	10	]
op	46:40	0:0	10	=
water	46:42	0:0	10	(
water	46:43	0:0	10	i_lang
op	46:50	0:0	10	>>
water	46:53	0:0	10	8
water	46:54	0:0	10	)
op	46:55	0:0	10	&
water	46:56	0:0	10	0
water	46:57	0:0	10	xff
water	46:60	0:0	10	;
water	47:16	0:0	10	tk
op	47:18	0:0	10	->
water	47:20	0:0	10	fmt
op	47:23	0:0	10	.
water	47:24	0:0	10	psz_language
op	47:36	0:0	10	[
water	47:37	0:0	10	1
op	47:38	0:0	10	]
op	47:40	0:0	10	=
water	47:42	0:0	10	(
water	47:43	0:0	10	i_lang
water	47:54	0:0	10	)
op	47:55	0:0	10	&
water	47:56	0:0	10	0
water	47:57	0:0	10	xff
water	47:60	0:0	10	;
water	48:16	0:0	10	tk
op	48:18	0:0	10	->
water	48:20	0:0	10	fmt
op	48:23	0:0	10	.
water	48:24	0:0	10	psz_language
op	48:36	0:0	10	[
water	48:37	0:0	10	2
op	48:38	0:0	10	]
op	48:40	0:0	10	=
water	48:42	0:0	10	0
water	48:43	0:0	10	;
water	49:12	0:0	10	}
if	50:12	53:12	8	(dvdnav_get_active_audio_stream (p_sys -> dvdnav ) == i_audio)
cond	50:16	50:67	9	dvdnav_get_active_audio_stream (p_sys -> dvdnav ) == i_audio
call	50:16	50:62	10	dvdnav_get_active_audio_stream
arg	50:48	50:62	11	p_sys->dvdnav
water	50:48	0:0	12	p_sys
op	50:53	0:0	12	->
water	50:55	0:0	12	dvdnav
op	50:64	0:0	10	==
water	50:67	0:0	10	i_audio
stmts	51:12	53:12	9	
water	51:12	0:0	10	{
water	52:16	0:0	10	b_select
op	52:25	0:0	10	=
water	52:27	0:0	10	true
water	52:31	0:0	10	;
water	53:12	0:0	10	}
water	54:8	0:0	8	}
water	55:4	0:0	6	}
else	56:4	78:4	2
stmts	56:9	78:4	3	
if	56:9	78:4	4	(tk -> fmt . i_cat == SPU_ES)
cond	56:13	56:30	5	tk -> fmt . i_cat == SPU_ES
water	56:13	0:0	6	tk
op	56:15	0:0	6	->
water	56:17	0:0	6	fmt
op	56:20	0:0	6	.
water	56:21	0:0	6	i_cat
op	56:27	0:0	6	==
water	56:30	0:0	6	SPU_ES
stmts	57:4	78:4	5	
water	57:4	0:0	6	{
decl	58:8	58:31	6	int32_t	i_title
water	58:23	0:0	6	,
decl	58:8	58:31	6	int32_t	i_part
decl	59:8	59:74	6	int	i_lang
op	59:19	0:0	6	=
call	59:21	59:73	7	dvdnav_spu_stream_to_lang
arg	59:48	59:61	8	p_sys->dvdnav
water	59:48	0:0	9	p_sys
op	59:53	0:0	9	->
water	59:55	0:0	9	dvdnav
arg	59:63	59:73	8	i_id&0x1f
water	59:63	0:0	9	i_id
op	59:67	0:0	9	&
water	59:68	0:0	9	0
water	59:69	0:0	9	x1f
if	60:8	66:8	6	(i_lang != 0 xffff)
cond	60:12	60:23	7	i_lang != 0 xffff
water	60:12	0:0	8	i_lang
op	60:19	0:0	8	!=
water	60:22	0:0	8	0
water	60:23	0:0	8	xffff
stmts	61:8	66:8	7	
water	61:8	0:0	8	{
water	62:12	0:0	8	tk
op	62:14	0:0	8	->
water	62:16	0:0	8	fmt
op	62:19	0:0	8	.
water	62:20	0:0	8	psz_language
op	62:33	0:0	8	=
call	62:35	62:45	8	malloc
arg	62:43	62:45	9	3
water	62:43	0:0	10	3
water	62:46	0:0	8	;
water	63:12	0:0	8	tk
op	63:14	0:0	8	->
water	63:16	0:0	8	fmt
op	63:19	0:0	8	.
water	63:20	0:0	8	psz_language
op	63:32	0:0	8	[
water	63:33	0:0	8	0
op	63:34	0:0	8	]
op	63:36	0:0	8	=
water	63:38	0:0	8	(
water	63:39	0:0	8	i_lang
op	63:46	0:0	8	>>
water	63:49	0:0	8	8
water	63:50	0:0	8	)
op	63:51	0:0	8	&
water	63:52	0:0	8	0
water	63:53	0:0	8	xff
water	63:56	0:0	8	;
water	64:12	0:0	8	tk
op	64:14	0:0	8	->
water	64:16	0:0	8	fmt
op	64:19	0:0	8	.
water	64:20	0:0	8	psz_language
op	64:32	0:0	8	[
water	64:33	0:0	8	1
op	64:34	0:0	8	]
op	64:36	0:0	8	=
water	64:38	0:0	8	(
water	64:39	0:0	8	i_lang
water	64:50	0:0	8	)
op	64:51	0:0	8	&
water	64:52	0:0	8	0
water	64:53	0:0	8	xff
water	64:56	0:0	8	;
water	65:12	0:0	8	tk
op	65:14	0:0	8	->
water	65:16	0:0	8	fmt
op	65:19	0:0	8	.
water	65:20	0:0	8	psz_language
op	65:32	0:0	8	[
water	65:33	0:0	8	2
op	65:34	0:0	8	]
op	65:36	0:0	8	=
water	65:38	0:0	8	0
water	65:39	0:0	8	;
water	66:8	0:0	8	}
water	68:8	0:0	6	tk
op	68:10	0:0	6	->
water	68:12	0:0	6	fmt
op	68:15	0:0	6	.
water	68:16	0:0	6	subs
op	68:20	0:0	6	.
water	68:21	0:0	6	spu
op	68:24	0:0	6	.
water	68:25	0:0	6	palette
op	68:32	0:0	6	[
water	68:33	0:0	6	0
op	68:34	0:0	6	]
op	68:36	0:0	6	=
water	68:38	0:0	6	0
water	68:39	0:0	6	xBeef
water	68:44	0:0	6	;
call	69:8	70:40	6	memcpy
arg	69:16	69:44	7	&tk->fmt.subs.spu.palette[1]
op	69:16	0:0	8	&
water	69:17	0:0	8	tk
op	69:19	0:0	8	->
water	69:21	0:0	8	fmt
op	69:24	0:0	8	.
water	69:25	0:0	8	subs
op	69:29	0:0	8	.
water	69:30	0:0	8	spu
op	69:33	0:0	8	.
water	69:34	0:0	8	palette
op	69:41	0:0	8	[
water	69:42	0:0	8	1
op	69:43	0:0	8	]
arg	69:46	69:57	7	p_sys->clut
water	69:46	0:0	8	p_sys
op	69:51	0:0	8	->
water	69:53	0:0	8	clut
arg	70:16	70:40	7	16*sizeof(uint32_t)
water	70:16	0:0	8	16
op	70:19	0:0	8	*
op	70:21	0:0	8	sizeof
water	70:27	0:0	8	(
water	70:29	0:0	8	uint32_t
water	70:38	0:0	8	)
water	70:41	0:0	6	;
call	72:8	72:68	6	dvdnav_current_title_info
arg	72:35	72:48	7	p_sys->dvdnav
water	72:35	0:0	8	p_sys
op	72:40	0:0	8	->
water	72:42	0:0	8	dvdnav
arg	72:50	72:58	7	&i_title
op	72:50	0:0	8	&
water	72:51	0:0	8	i_title
arg	72:60	72:68	7	&i_part
op	72:60	0:0	8	&
water	72:61	0:0	8	i_part
water	72:69	0:0	6	;
if	73:8	77:8	6	(i_title > 0 &&dvdnav_get_active_spu_stream (p_sys -> dvdnav ) == ( i_id & 0 x1f ))
cond	73:12	74:71	7	i_title > 0 &&dvdnav_get_active_spu_stream (p_sys -> dvdnav ) == ( i_id & 0 x1f )
water	73:12	0:0	8	i_title
op	73:20	0:0	8	>
water	73:22	0:0	8	0
op	73:24	0:0	8	&&
call	74:12	74:56	8	dvdnav_get_active_spu_stream
arg	74:42	74:56	9	p_sys->dvdnav
water	74:42	0:0	10	p_sys
op	74:47	0:0	10	->
water	74:49	0:0	10	dvdnav
op	74:58	0:0	8	==
water	74:61	0:0	8	(
water	74:62	0:0	8	i_id
op	74:66	0:0	8	&
water	74:67	0:0	8	0
water	74:68	0:0	8	x1f
water	74:71	0:0	8	)
stmts	75:8	77:8	7	
water	75:8	0:0	8	{
water	76:12	0:0	8	b_select
op	76:21	0:0	8	=
water	76:23	0:0	8	true
water	76:27	0:0	8	;
water	77:8	0:0	8	}
water	78:4	0:0	6	}
water	79:4	0:0	2	tk
op	79:6	0:0	2	->
water	79:8	0:0	2	es
op	79:11	0:0	2	=
call	79:13	79:48	2	es_out_Add
arg	79:25	79:37	3	p_demux->out
water	79:25	0:0	4	p_demux
op	79:32	0:0	4	->
water	79:34	0:0	4	out
arg	79:39	79:48	3	&tk->fmt
op	79:39	0:0	4	&
water	79:40	0:0	4	tk
op	79:42	0:0	4	->
water	79:44	0:0	4	fmt
water	79:49	0:0	2	;
if	80:4	83:4	2	(b_select)
cond	80:8	80:8	3	b_select
water	80:8	0:0	4	b_select
stmts	81:4	83:4	3	
water	81:4	0:0	4	{
call	82:8	82:60	4	es_out_Control
arg	82:24	82:36	5	p_demux->out
water	82:24	0:0	6	p_demux
op	82:31	0:0	6	->
water	82:33	0:0	6	out
arg	82:38	82:51	5	ES_OUT_SET_ES
water	82:38	0:0	6	ES_OUT_SET_ES
arg	82:53	82:60	5	tk->es
water	82:53	0:0	6	tk
op	82:55	0:0	6	->
water	82:57	0:0	6	es
water	82:61	0:0	4	;
water	83:4	0:0	4	}
water	84:4	0:0	2	tk
op	84:6	0:0	2	->
water	84:8	0:0	2	b_seen
op	84:15	0:0	2	=
water	84:17	0:0	2	true
water	84:21	0:0	2	;
if	85:4	85:66	2	(tk -> fmt . i_cat == VIDEO_ES)
cond	85:8	85:25	3	tk -> fmt . i_cat == VIDEO_ES
water	85:8	0:0	4	tk
op	85:10	0:0	4	->
water	85:12	0:0	4	fmt
op	85:15	0:0	4	.
water	85:16	0:0	4	i_cat
op	85:22	0:0	4	==
water	85:25	0:0	4	VIDEO_ES
stmts	85:36	85:66	3	
call	85:36	85:65	4	ButtonUpdate
arg	85:50	85:57	5	p_demux
water	85:50	0:0	6	p_demux
arg	85:59	85:65	5	false
water	85:59	0:0	6	false
water	85:66	0:0	4	;
