func	2:0	32:0	0	void	input_clock_SetJitter
params	2:26	0:0	1	
param	2:28	2:45	2	input_clock_t *	cl
param	3:28	3:47	2	mtime_t	i_pts_delay
param	3:49	3:66	2	int	i_cr_average
stmnts	5:4	31:33	1	
call	5:4	5:30	2	vlc_mutex_lock
arg	5:20	5:30	3	&cl->lock
op	5:20	0:0	4	&
water	5:21	0:0	4	cl
op	5:23	0:0	4	->
water	5:25	0:0	4	lock
water	5:31	0:0	2	;
decl	7:4	7:63	2	const mtime_t	i_delay_delta
op	7:32	0:0	2	=
water	7:34	0:0	2	i_pts_delay
op	7:46	0:0	2	-
water	7:48	0:0	2	cl
op	7:50	0:0	2	->
water	7:52	0:0	2	i_pts_delay
decl	8:4	8:43	2	mtime_t	pi_late[INPUT_CLOCK_LATE_COUNT]
for	9:4	10:117	2	( int i = 0 ;i < INPUT_CLOCK_LATE_COUNT;i ++)
forinit	0:0	9:18	3	 int i = 0 ;
decl	9:9	9:18	4	int	i
op	9:15	0:0	4	=
water	9:17	0:0	4	0
cond	9:20	9:24	3	i < INPUT_CLOCK_LATE_COUNT
water	9:20	0:0	4	i
op	9:22	0:0	4	<
water	9:24	0:0	4	INPUT_CLOCK_LATE_COUNT
forexpr	9:48	9:49	3	i ++
water	9:48	0:0	4	i
op	9:49	0:0	4	++
stmts	10:8	10:117	3	
water	10:8	0:0	4	pi_late
op	10:15	0:0	4	[
water	10:16	0:0	4	i
op	10:17	0:0	4	]
op	10:19	0:0	4	=
call	10:21	10:116	4	__MAX
arg	10:28	10:112	5	cl->late.pi_value[(cl->late.i_index+1+i)%INPUT_CLOCK_LATE_COUNT]-i_delay_delta
water	10:28	0:0	6	cl
op	10:30	0:0	6	->
water	10:32	0:0	6	late
op	10:36	0:0	6	.
water	10:37	0:0	6	pi_value
op	10:45	0:0	6	[
water	10:46	0:0	6	(
water	10:47	0:0	6	cl
op	10:49	0:0	6	->
water	10:51	0:0	6	late
op	10:55	0:0	6	.
water	10:56	0:0	6	i_index
op	10:64	0:0	6	+
water	10:66	0:0	6	1
op	10:68	0:0	6	+
water	10:70	0:0	6	i
water	10:71	0:0	6	)
op	10:72	0:0	6	%
water	10:73	0:0	6	INPUT_CLOCK_LATE_COUNT
op	10:95	0:0	6	]
op	10:97	0:0	6	-
water	10:99	0:0	6	i_delay_delta
arg	10:114	10:116	5	0
water	10:114	0:0	6	0
water	10:117	0:0	4	;
for	11:4	12:32	2	( int i = 0 ;i < INPUT_CLOCK_LATE_COUNT;i ++)
forinit	0:0	11:18	3	 int i = 0 ;
decl	11:9	11:18	4	int	i
op	11:15	0:0	4	=
water	11:17	0:0	4	0
cond	11:20	11:24	3	i < INPUT_CLOCK_LATE_COUNT
water	11:20	0:0	4	i
op	11:22	0:0	4	<
water	11:24	0:0	4	INPUT_CLOCK_LATE_COUNT
forexpr	11:48	11:49	3	i ++
water	11:48	0:0	4	i
op	11:49	0:0	4	++
stmts	12:8	12:32	3	
water	12:8	0:0	4	cl
op	12:10	0:0	4	->
water	12:12	0:0	4	late
op	12:16	0:0	4	.
water	12:17	0:0	4	pi_value
op	12:25	0:0	4	[
water	12:26	0:0	4	i
op	12:27	0:0	4	]
op	12:29	0:0	4	=
water	12:31	0:0	4	0
water	12:32	0:0	4	;
water	13:4	0:0	2	cl
op	13:6	0:0	2	->
water	13:8	0:0	2	late
op	13:12	0:0	2	.
water	13:13	0:0	2	i_index
op	13:21	0:0	2	=
water	13:23	0:0	2	0
water	13:24	0:0	2	;
for	14:4	20:4	2	( int i = 0 ;i < INPUT_CLOCK_LATE_COUNT;i ++)
forinit	0:0	14:18	3	 int i = 0 ;
decl	14:9	14:18	4	int	i
op	14:15	0:0	4	=
water	14:17	0:0	4	0
cond	14:20	14:24	3	i < INPUT_CLOCK_LATE_COUNT
water	14:20	0:0	4	i
op	14:22	0:0	4	<
water	14:24	0:0	4	INPUT_CLOCK_LATE_COUNT
forexpr	14:48	14:49	3	i ++
water	14:48	0:0	4	i
op	14:49	0:0	4	++
stmts	15:4	20:4	3	
water	15:4	0:0	4	{
if	16:8	17:20	4	(pi_late [ i ] <= 0)
cond	16:12	16:26	5	pi_late [ i ] <= 0
water	16:12	0:0	6	pi_late
op	16:19	0:0	6	[
water	16:20	0:0	6	i
op	16:21	0:0	6	]
op	16:23	0:0	6	<=
water	16:26	0:0	6	0
stmts	17:12	17:20	5	
continue	17:12	17:20	6	
water	18:8	0:0	4	cl
op	18:10	0:0	4	->
water	18:12	0:0	4	late
op	18:16	0:0	4	.
water	18:17	0:0	4	pi_value
op	18:25	0:0	4	[
water	18:26	0:0	4	cl
op	18:28	0:0	4	->
water	18:30	0:0	4	late
op	18:34	0:0	4	.
water	18:35	0:0	4	i_index
op	18:42	0:0	4	]
op	18:44	0:0	4	=
water	18:46	0:0	4	pi_late
op	18:53	0:0	4	[
water	18:54	0:0	4	i
op	18:55	0:0	4	]
water	18:56	0:0	4	;
water	19:8	0:0	4	cl
op	19:10	0:0	4	->
water	19:12	0:0	4	late
op	19:16	0:0	4	.
water	19:17	0:0	4	i_index
op	19:25	0:0	4	=
water	19:27	0:0	4	(
water	19:29	0:0	4	cl
op	19:31	0:0	4	->
water	19:33	0:0	4	late
op	19:37	0:0	4	.
water	19:38	0:0	4	i_index
op	19:46	0:0	4	+
water	19:48	0:0	4	1
water	19:50	0:0	4	)
op	19:52	0:0	4	%
water	19:54	0:0	4	INPUT_CLOCK_LATE_COUNT
water	19:76	0:0	4	;
water	20:4	0:0	4	}
if	24:4	25:37	2	(cl -> i_pts_delay < i_pts_delay)
cond	24:8	24:26	3	cl -> i_pts_delay < i_pts_delay
water	24:8	0:0	4	cl
op	24:10	0:0	4	->
water	24:12	0:0	4	i_pts_delay
op	24:24	0:0	4	<
water	24:26	0:0	4	i_pts_delay
stmts	25:8	25:37	3	
water	25:8	0:0	4	cl
op	25:10	0:0	4	->
water	25:12	0:0	4	i_pts_delay
op	25:24	0:0	4	=
water	25:26	0:0	4	i_pts_delay
water	25:37	0:0	4	;
if	27:4	28:25	2	(i_cr_average < 10)
cond	27:8	27:23	3	i_cr_average < 10
water	27:8	0:0	4	i_cr_average
op	27:21	0:0	4	<
water	27:23	0:0	4	10
stmts	28:8	28:25	3	
water	28:8	0:0	4	i_cr_average
op	28:21	0:0	4	=
water	28:23	0:0	4	10
water	28:25	0:0	4	;
if	29:4	30:46	2	(cl -> drift . i_divider != i_cr_average)
cond	29:8	29:31	3	cl -> drift . i_divider != i_cr_average
water	29:8	0:0	4	cl
op	29:10	0:0	4	->
water	29:12	0:0	4	drift
op	29:17	0:0	4	.
water	29:18	0:0	4	i_divider
op	29:28	0:0	4	!=
water	29:31	0:0	4	i_cr_average
stmts	30:8	30:46	3	
call	30:8	30:45	4	AvgRescale
arg	30:20	30:30	5	&cl->drift
op	30:20	0:0	6	&
water	30:21	0:0	6	cl
op	30:23	0:0	6	->
water	30:25	0:0	6	drift
arg	30:32	30:45	5	i_cr_average
water	30:32	0:0	6	i_cr_average
water	30:46	0:0	4	;
call	31:4	31:32	2	vlc_mutex_unlock
arg	31:22	31:32	3	&cl->lock
op	31:22	0:0	4	&
water	31:23	0:0	4	cl
op	31:25	0:0	4	->
water	31:27	0:0	4	lock
water	31:33	0:0	2	;
