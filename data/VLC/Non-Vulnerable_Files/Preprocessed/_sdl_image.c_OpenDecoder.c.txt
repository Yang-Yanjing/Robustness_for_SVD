func	2:0	30:0	0	static int	OpenDecoder
params	2:22	0:0	1	
param	2:24	2:45	2	vlc_object_t *	p_this
stmnts	0:0	29:22	1	
decl	4:4	4:42	2	decoder_t	*p_dec
op	4:21	0:0	2	=
water	4:23	0:0	2	(
water	4:24	0:0	2	decoder_t
op	4:34	0:0	2	*
water	4:35	0:0	2	)
water	4:36	0:0	2	p_this
decl	5:4	5:24	2	decoder_sys_t	*p_sys
decl	6:4	6:9	2	int	i
for	8:4	14:4	2	(i = 0 ;i <( int ) (sizeof ( p_supported_fmt ) / sizeof ( struct supported_fmt_t ) );i ++)
forinit	8:10	8:15	3	i = 0 ;
water	8:10	0:0	4	i
op	8:12	0:0	4	=
water	8:14	0:0	4	0
water	8:15	0:0	4	;
cond	9:10	9:74	3	i <( int ) (sizeof ( p_supported_fmt ) / sizeof ( struct supported_fmt_t ) )
water	9:10	0:0	4	i
op	9:12	0:0	4	<
call	9:14	9:74	4	(int)
arg	9:20	9:74	5	sizeof(p_supported_fmt)/sizeof(structsupported_fmt_t)
op	9:20	0:0	6	sizeof
water	9:26	0:0	6	(
water	9:27	0:0	6	p_supported_fmt
water	9:42	0:0	6	)
op	9:43	0:0	6	/
op	9:44	0:0	6	sizeof
water	9:50	0:0	6	(
water	9:51	0:0	6	struct
water	9:58	0:0	6	supported_fmt_t
water	9:73	0:0	6	)
forexpr	10:10	10:11	3	i ++
water	10:10	0:0	4	i
op	10:11	0:0	4	++
stmts	11:4	14:4	3	
water	11:4	0:0	4	{
if	12:8	13:17	4	(p_supported_fmt [ i ] . i_fourcc == p_dec -> fmt_in . i_codec)
cond	12:13	12:58	5	p_supported_fmt [ i ] . i_fourcc == p_dec -> fmt_in . i_codec
water	12:13	0:0	6	p_supported_fmt
op	12:28	0:0	6	[
water	12:29	0:0	6	i
op	12:30	0:0	6	]
op	12:31	0:0	6	.
water	12:32	0:0	6	i_fourcc
op	12:41	0:0	6	==
water	12:44	0:0	6	p_dec
op	12:49	0:0	6	->
water	12:51	0:0	6	fmt_in
op	12:57	0:0	6	.
water	12:58	0:0	6	i_codec
stmts	13:12	13:17	5	
break	13:12	13:17	6	
water	14:4	0:0	4	}
if	15:4	18:4	2	(i ==( int ) (sizeof ( p_supported_fmt ) / sizeof ( struct supported_fmt_t ) ))
cond	15:9	15:74	3	i ==( int ) (sizeof ( p_supported_fmt ) / sizeof ( struct supported_fmt_t ) )
water	15:9	0:0	4	i
op	15:11	0:0	4	==
call	15:14	15:74	4	(int)
arg	15:20	15:74	5	sizeof(p_supported_fmt)/sizeof(structsupported_fmt_t)
op	15:20	0:0	6	sizeof
water	15:26	0:0	6	(
water	15:27	0:0	6	p_supported_fmt
water	15:42	0:0	6	)
op	15:43	0:0	6	/
op	15:44	0:0	6	sizeof
water	15:50	0:0	6	(
water	15:51	0:0	6	struct
water	15:58	0:0	6	supported_fmt_t
water	15:73	0:0	6	)
stmts	16:4	18:4	3	
water	16:4	0:0	4	{
return	17:8	17:27	4	VLC_EGENERIC
water	17:15	0:0	5	VLC_EGENERIC
water	18:4	0:0	4	}
if	20:4	22:25	2	(( p_dec -> p_sys = p_sys = ( decoder_sys_t * )malloc (sizeof ( decoder_sys_t ) ) ) == NULL)
cond	20:8	21:62	3	( p_dec -> p_sys = p_sys = ( decoder_sys_t * )malloc (sizeof ( decoder_sys_t ) ) ) == NULL
water	20:8	0:0	4	(
water	20:10	0:0	4	p_dec
op	20:15	0:0	4	->
water	20:17	0:0	4	p_sys
op	20:23	0:0	4	=
water	20:25	0:0	4	p_sys
op	20:31	0:0	4	=
water	21:10	0:0	4	(
water	21:11	0:0	4	decoder_sys_t
op	21:25	0:0	4	*
water	21:26	0:0	4	)
call	21:27	21:55	4	malloc
arg	21:34	21:55	5	sizeof(decoder_sys_t)
op	21:34	0:0	6	sizeof
water	21:40	0:0	6	(
water	21:41	0:0	6	decoder_sys_t
water	21:54	0:0	6	)
water	21:57	0:0	4	)
op	21:59	0:0	4	==
water	21:62	0:0	4	NULL
stmts	22:8	22:25	3	
return	22:8	22:25	4	VLC_ENOMEM
water	22:15	0:0	5	VLC_ENOMEM
water	23:4	0:0	2	p_sys
op	23:9	0:0	2	->
water	23:11	0:0	2	psz_sdl_type
op	23:24	0:0	2	=
water	23:26	0:0	2	p_supported_fmt
op	23:41	0:0	2	[
water	23:42	0:0	2	i
op	23:43	0:0	2	]
op	23:44	0:0	2	.
water	23:45	0:0	2	psz_sdl_type
water	23:57	0:0	2	;
water	25:4	0:0	2	p_dec
op	25:9	0:0	2	->
water	25:11	0:0	2	fmt_out
op	25:18	0:0	2	.
water	25:19	0:0	2	i_cat
op	25:25	0:0	2	=
water	25:27	0:0	2	VIDEO_ES
water	25:35	0:0	2	;
water	26:4	0:0	2	p_dec
op	26:9	0:0	2	->
water	26:11	0:0	2	fmt_out
op	26:18	0:0	2	.
water	26:19	0:0	2	i_codec
op	26:27	0:0	2	=
water	26:29	0:0	2	VLC_CODEC_RGB32
water	26:44	0:0	2	;
water	28:4	0:0	2	p_dec
op	28:9	0:0	2	->
water	28:11	0:0	2	pf_decode_video
op	28:27	0:0	2	=
water	28:29	0:0	2	DecodeBlock
water	28:40	0:0	2	;
return	29:4	29:22	2	VLC_SUCCESS
water	29:11	0:0	3	VLC_SUCCESS
