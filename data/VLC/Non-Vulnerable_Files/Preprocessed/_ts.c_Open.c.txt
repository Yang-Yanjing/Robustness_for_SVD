func	2:0	190:0	0	static int	Open
params	2:15	0:0	1	
param	2:17	2:38	2	vlc_object_t *	p_this
stmnts	0:0	189:22	1	
decl	4:4	4:51	2	sout_mux_t	*p_mux
op	4:31	0:0	2	=
water	4:32	0:0	2	(
water	4:33	0:0	2	sout_mux_t
op	4:43	0:0	2	*
water	4:44	0:0	2	)
water	4:45	0:0	2	p_this
decl	5:4	5:37	2	sout_mux_sys_t	*p_sys
op	5:31	0:0	2	=
water	5:33	0:0	2	NULL
call	6:4	6:79	2	config_ChainParse
arg	6:23	6:28	3	p_mux
water	6:23	0:0	4	p_mux
arg	6:30	6:45	3	SOUT_CFG_PREFIX
water	6:30	0:0	4	SOUT_CFG_PREFIX
arg	6:47	6:64	3	ppsz_sout_options
water	6:47	0:0	4	ppsz_sout_options
arg	6:66	6:79	3	p_mux->p_cfg
water	6:66	0:0	4	p_mux
op	6:71	0:0	4	->
water	6:73	0:0	4	p_cfg
water	6:80	0:0	2	;
water	7:4	0:0	2	p_sys
op	7:10	0:0	2	=
call	7:12	7:48	2	calloc
arg	7:20	7:21	3	1
water	7:20	0:0	4	1
arg	7:23	7:48	3	sizeof(sout_mux_sys_t)
op	7:23	0:0	4	sizeof
water	7:29	0:0	4	(
water	7:31	0:0	4	sout_mux_sys_t
water	7:46	0:0	4	)
water	7:49	0:0	2	;
if	8:4	9:25	2	(! p_sys)
cond	8:8	8:9	3	! p_sys
op	8:8	0:0	4	!
water	8:9	0:0	4	p_sys
stmts	9:8	9:25	3	
return	9:8	9:25	4	VLC_ENOMEM
water	9:15	0:0	5	VLC_ENOMEM
water	10:4	0:0	2	p_sys
op	10:9	0:0	2	->
water	10:11	0:0	2	i_num_pmt
op	10:21	0:0	2	=
water	10:23	0:0	2	1
water	10:24	0:0	2	;
water	12:4	0:0	2	p_sys
op	12:9	0:0	2	->
water	12:11	0:0	2	p_dvbpsi
op	12:20	0:0	2	=
call	12:22	12:69	2	dvbpsi_new
arg	12:34	12:50	3	&dvbpsi_messages
op	12:34	0:0	4	&
water	12:35	0:0	4	dvbpsi_messages
arg	12:52	12:69	3	DVBPSI_MSG_DEBUG
water	12:52	0:0	4	DVBPSI_MSG_DEBUG
water	12:70	0:0	2	;
if	13:4	17:4	2	(! p_sys -> p_dvbpsi)
cond	13:8	13:16	3	! p_sys -> p_dvbpsi
op	13:8	0:0	4	!
water	13:9	0:0	4	p_sys
op	13:14	0:0	4	->
water	13:16	0:0	4	p_dvbpsi
stmts	14:4	17:4	3	
water	14:4	0:0	4	{
call	15:8	15:20	4	free
arg	15:14	15:20	5	p_sys
water	15:14	0:0	6	p_sys
water	15:21	0:0	4	;
return	16:8	16:25	4	VLC_ENOMEM
water	16:15	0:0	5	VLC_ENOMEM
water	17:4	0:0	4	}
water	18:4	0:0	2	p_sys
op	18:9	0:0	2	->
water	18:11	0:0	2	p_dvbpsi
op	18:19	0:0	2	->
water	18:21	0:0	2	p_sys
op	18:27	0:0	2	=
water	18:29	0:0	2	(
water	18:30	0:0	2	void
op	18:35	0:0	2	*
water	18:36	0:0	2	)
water	18:38	0:0	2	p_mux
water	18:43	0:0	2	;
water	20:4	0:0	2	p_sys
op	20:9	0:0	2	->
water	20:11	0:0	2	b_es_id_pid
op	20:23	0:0	2	=
call	20:25	20:73	2	var_GetBool
arg	20:38	20:43	3	p_mux
water	20:38	0:0	4	p_mux
arg	20:45	20:73	3	SOUT_CFG_PREFIX"es-id-pid"
water	20:45	0:0	4	SOUT_CFG_PREFIX
water	20:61	0:0	4	"es-id-pid"
water	20:74	0:0	2	;
decl	25:4	25:73	2	char	*muxpmt
op	25:17	0:0	2	=
call	25:19	25:72	3	var_GetNonEmptyString
arg	25:41	25:46	4	p_mux
water	25:41	0:0	5	p_mux
arg	25:48	25:72	4	SOUT_CFG_PREFIX"muxpmt"
water	25:48	0:0	5	SOUT_CFG_PREFIX
water	25:64	0:0	5	"muxpmt"
for	26:4	49:4	2	( char * psz = muxpmt ;psz;)
forinit	0:0	26:27	3	 char * psz = muxpmt ;
decl	26:9	26:27	4	char	*psz
op	26:19	0:0	4	=
water	26:21	0:0	4	muxpmt
cond	26:29	26:29	3	psz
water	26:29	0:0	4	psz
forexpr	0:0	0:0	3	
stmts	27:4	49:4	3	
water	27:4	0:0	4	{
decl	28:8	28:22	4	char	*psz_next
decl	29:8	29:53	4	uint16_t	i_pid
op	29:23	0:0	4	=
call	29:25	29:52	5	strtoul
arg	29:34	29:37	6	psz
water	29:34	0:0	7	psz
arg	29:39	29:48	6	&psz_next
op	29:39	0:0	7	&
water	29:40	0:0	7	psz_next
arg	29:50	29:52	6	0
water	29:50	0:0	7	0
water	30:8	0:0	4	psz
op	30:12	0:0	4	=
op	30:14	0:0	4	*
water	30:15	0:0	4	psz_next
water	30:24	0:0	4	?
op	30:26	0:0	4	&
water	30:27	0:0	4	psz_next
op	30:35	0:0	4	[
water	30:36	0:0	4	1
op	30:37	0:0	4	]
water	30:39	0:0	4	:
water	30:41	0:0	4	NULL
water	30:45	0:0	4	;
if	31:8	38:8	4	(i_pid == 0)
cond	31:13	31:22	5	i_pid == 0
water	31:13	0:0	6	i_pid
op	31:19	0:0	6	==
water	31:22	0:0	6	0
stmts	32:8	38:8	5	
water	32:8	0:0	6	{
if	33:12	37:12	6	(++ p_sys -> i_num_pmt > MAX_PMT)
cond	33:17	33:38	7	++ p_sys -> i_num_pmt > MAX_PMT
op	33:17	0:0	8	++
water	33:19	0:0	8	p_sys
op	33:24	0:0	8	->
water	33:26	0:0	8	i_num_pmt
op	33:36	0:0	8	>
water	33:38	0:0	8	MAX_PMT
stmts	34:12	37:12	7	
water	34:12	0:0	8	{
call	35:16	35:64	8	msg_Err
arg	35:25	35:30	9	p_mux
water	35:25	0:0	10	p_mux
arg	35:32	35:54	9	"Number of PMTs > %d)"
water	35:32	0:0	10	"Number of PMTs > %d)"
arg	35:56	35:64	9	MAX_PMT
water	35:56	0:0	10	MAX_PMT
water	35:65	0:0	8	;
water	36:16	0:0	8	p_sys
op	36:21	0:0	8	->
water	36:23	0:0	8	i_num_pmt
op	36:33	0:0	8	=
water	36:35	0:0	8	MAX_PMT
water	36:42	0:0	8	;
water	37:12	0:0	8	}
water	38:8	0:0	6	}
else	39:8	48:8	4
stmts	40:8	48:8	5	
water	40:8	0:0	6	{
water	41:12	0:0	6	p_sys
op	41:17	0:0	6	->
water	41:19	0:0	6	pmtmap
op	41:25	0:0	6	[
water	41:26	0:0	6	p_sys
op	41:31	0:0	6	->
water	41:33	0:0	6	i_pmtslots
op	41:43	0:0	6	]
op	41:44	0:0	6	.
water	41:45	0:0	6	i_pid
op	41:51	0:0	6	=
water	41:53	0:0	6	i_pid
water	41:58	0:0	6	;
water	42:12	0:0	6	p_sys
op	42:17	0:0	6	->
water	42:19	0:0	6	pmtmap
op	42:25	0:0	6	[
water	42:26	0:0	6	p_sys
op	42:31	0:0	6	->
water	42:33	0:0	6	i_pmtslots
op	42:43	0:0	6	]
op	42:44	0:0	6	.
water	42:45	0:0	6	i_prog
op	42:52	0:0	6	=
water	42:54	0:0	6	p_sys
op	42:59	0:0	6	->
water	42:61	0:0	6	i_num_pmt
op	42:71	0:0	6	-
water	42:73	0:0	6	1
water	42:74	0:0	6	;
if	43:12	47:12	6	(++ p_sys -> i_pmtslots >= MAX_PMT_PID)
cond	43:17	43:40	7	++ p_sys -> i_pmtslots >= MAX_PMT_PID
op	43:17	0:0	8	++
water	43:19	0:0	8	p_sys
op	43:24	0:0	8	->
water	43:26	0:0	8	i_pmtslots
op	43:37	0:0	8	>=
water	43:40	0:0	8	MAX_PMT_PID
stmts	44:12	47:12	7	
water	44:12	0:0	8	{
call	45:16	45:74	8	msg_Err
arg	45:25	45:30	9	p_mux
water	45:25	0:0	10	p_mux
arg	45:32	45:60	9	"Number of pids in PMT > %d"
water	45:32	0:0	10	"Number of pids in PMT > %d"
arg	45:62	45:74	9	MAX_PMT_PID
water	45:62	0:0	10	MAX_PMT_PID
water	45:75	0:0	8	;
water	46:16	0:0	8	p_sys
op	46:21	0:0	8	->
water	46:23	0:0	8	i_pmtslots
op	46:34	0:0	8	=
water	46:36	0:0	8	MAX_PMT_PID
op	46:48	0:0	8	-
water	46:50	0:0	8	1
water	46:51	0:0	8	;
water	47:12	0:0	8	}
water	48:8	0:0	6	}
water	49:4	0:0	4	}
call	51:4	52:42	2	qsort
arg	51:11	51:32	3	(void*)p_sys->pmtmap
water	51:11	0:0	4	(
water	51:12	0:0	4	void
op	51:17	0:0	4	*
water	51:18	0:0	4	)
water	51:19	0:0	4	p_sys
op	51:24	0:0	4	->
water	51:26	0:0	4	pmtmap
arg	51:34	51:51	3	p_sys->i_pmtslots
water	51:34	0:0	4	p_sys
op	51:39	0:0	4	->
water	51:41	0:0	4	i_pmtslots
arg	52:12	52:29	3	sizeof(pmt_map_t)
op	52:12	0:0	4	sizeof
water	52:18	0:0	4	(
water	52:19	0:0	4	pmt_map_t
water	52:28	0:0	4	)
arg	52:31	52:42	3	pmtcompare
water	52:31	0:0	4	pmtcompare
water	52:43	0:0	2	;
call	53:4	53:15	2	free
arg	53:9	53:15	3	muxpmt
water	53:9	0:0	4	muxpmt
water	53:16	0:0	2	;
decl	54:4	54:26	2	unsigned short	subi[3]
call	55:4	55:37	2	vlc_rand_bytes
arg	55:19	55:23	3	subi
water	55:19	0:0	4	subi
arg	55:25	55:37	3	sizeof(subi)
op	55:25	0:0	4	sizeof
water	55:31	0:0	4	(
water	55:32	0:0	4	subi
water	55:36	0:0	4	)
water	55:38	0:0	2	;
water	56:4	0:0	2	p_sys
op	56:9	0:0	2	->
water	56:11	0:0	2	i_pat_version_number
op	56:32	0:0	2	=
call	56:34	56:46	2	nrand48
arg	56:42	56:46	3	subi
water	56:42	0:0	4	subi
op	56:48	0:0	2	&
water	56:50	0:0	2	0
water	56:51	0:0	2	x1f
water	56:54	0:0	2	;
decl	57:4	57:19	2	vlc_value_t	val
call	58:4	58:49	2	var_Get
arg	58:13	58:18	3	p_mux
water	58:13	0:0	4	p_mux
arg	58:20	58:42	3	SOUT_CFG_PREFIX"tsid"
water	58:20	0:0	4	SOUT_CFG_PREFIX
water	58:36	0:0	4	"tsid"
arg	58:44	58:49	3	&val
op	58:44	0:0	4	&
water	58:45	0:0	4	val
water	58:50	0:0	2	;
if	59:4	60:33	2	(val . i_int)
cond	59:9	59:13	3	val . i_int
water	59:9	0:0	4	val
op	59:12	0:0	4	.
water	59:13	0:0	4	i_int
stmts	60:8	60:33	3	
water	60:8	0:0	4	p_sys
op	60:13	0:0	4	->
water	60:15	0:0	4	i_tsid
op	60:22	0:0	4	=
water	60:24	0:0	4	val
op	60:27	0:0	4	.
water	60:28	0:0	4	i_int
water	60:33	0:0	4	;
else	61:4	62:46	2
stmts	62:8	62:46	3	
water	62:8	0:0	4	p_sys
op	62:13	0:0	4	->
water	62:15	0:0	4	i_tsid
op	62:22	0:0	4	=
call	62:24	62:36	4	nrand48
arg	62:32	62:36	5	subi
water	62:32	0:0	6	subi
op	62:38	0:0	4	&
water	62:40	0:0	4	0
water	62:41	0:0	4	xffff
water	62:46	0:0	4	;
water	63:4	0:0	2	p_sys
op	63:9	0:0	2	->
water	63:11	0:0	2	i_netid
op	63:19	0:0	2	=
call	63:21	63:33	2	nrand48
arg	63:29	63:33	3	subi
water	63:29	0:0	4	subi
op	63:35	0:0	2	&
water	63:37	0:0	2	0
water	63:38	0:0	2	xffff
water	63:43	0:0	2	;
call	64:4	64:50	2	var_Get
arg	64:13	64:18	3	p_mux
water	64:13	0:0	4	p_mux
arg	64:20	64:43	3	SOUT_CFG_PREFIX"netid"
water	64:20	0:0	4	SOUT_CFG_PREFIX
water	64:36	0:0	4	"netid"
arg	64:45	64:50	3	&val
op	64:45	0:0	4	&
water	64:46	0:0	4	val
water	64:51	0:0	2	;
if	65:4	66:34	2	(val . i_int)
cond	65:9	65:13	3	val . i_int
water	65:9	0:0	4	val
op	65:12	0:0	4	.
water	65:13	0:0	4	i_int
stmts	66:8	66:34	3	
water	66:8	0:0	4	p_sys
op	66:13	0:0	4	->
water	66:15	0:0	4	i_netid
op	66:23	0:0	4	=
water	66:25	0:0	4	val
op	66:28	0:0	4	.
water	66:29	0:0	4	i_int
water	66:34	0:0	4	;
water	67:4	0:0	2	p_sys
op	67:9	0:0	2	->
water	67:11	0:0	2	i_pmt_version_number
op	67:32	0:0	2	=
call	67:34	67:46	2	nrand48
arg	67:42	67:46	3	subi
water	67:42	0:0	4	subi
op	67:48	0:0	2	&
water	67:50	0:0	2	0
water	67:51	0:0	2	x1f
water	67:54	0:0	2	;
water	68:4	0:0	2	p_sys
op	68:9	0:0	2	->
water	68:11	0:0	2	sdt
op	68:14	0:0	2	.
water	68:15	0:0	2	i_pid
op	68:21	0:0	2	=
water	68:23	0:0	2	0
water	68:24	0:0	2	x11
water	68:27	0:0	2	;
decl	69:4	69:77	2	char	*sdtdesc
op	69:18	0:0	2	=
call	69:20	69:76	3	var_GetNonEmptyString
arg	69:43	69:48	4	p_mux
water	69:43	0:0	5	p_mux
arg	69:50	69:76	4	SOUT_CFG_PREFIX"sdtdesc"
water	69:50	0:0	5	SOUT_CFG_PREFIX
water	69:66	0:0	5	"sdtdesc"
if	71:4	88:4	2	(sdtdesc)
cond	71:8	71:8	3	sdtdesc
water	71:8	0:0	4	sdtdesc
stmts	72:4	88:4	3	
water	72:4	0:0	4	{
water	73:8	0:0	4	p_sys
op	73:13	0:0	4	->
water	73:15	0:0	4	b_sdt
op	73:21	0:0	4	=
water	73:23	0:0	4	true
water	73:27	0:0	4	;
decl	74:8	74:36	4	char	*psz_sdttoken
op	74:27	0:0	4	=
water	74:29	0:0	4	sdtdesc
for	75:8	86:8	4	( int i = 0 ;i < MAX_PMT * 2 && psz_sdttoken;i ++)
forinit	0:0	75:22	5	 int i = 0 ;
decl	75:13	75:22	6	int	i
op	75:19	0:0	6	=
water	75:21	0:0	6	0
cond	75:24	75:43	5	i < MAX_PMT * 2 && psz_sdttoken
water	75:24	0:0	6	i
op	75:26	0:0	6	<
water	75:28	0:0	6	MAX_PMT
op	75:36	0:0	6	*
water	75:38	0:0	6	2
op	75:40	0:0	6	&&
water	75:43	0:0	6	psz_sdttoken
forexpr	75:57	75:58	5	i ++
water	75:57	0:0	6	i
op	75:58	0:0	6	++
stmts	76:8	86:8	5	
water	76:8	0:0	6	{
decl	77:12	77:58	6	sdt_desc_t	*sdt
op	77:28	0:0	6	=
op	77:30	0:0	6	&
water	77:31	0:0	6	p_sys
op	77:36	0:0	6	->
water	77:38	0:0	6	sdt_descriptors
op	77:53	0:0	6	[
water	77:54	0:0	6	i
op	77:55	0:0	6	/
water	77:56	0:0	6	2
op	77:57	0:0	6	]
decl	78:12	78:55	6	char	*psz_end
op	78:26	0:0	6	=
call	78:28	78:54	7	strchr
arg	78:36	78:48	8	psz_sdttoken
water	78:36	0:0	9	psz_sdttoken
arg	78:50	78:54	8	','
water	78:50	0:0	9	','
if	79:12	80:33	6	(psz_end)
cond	79:17	79:17	7	psz_end
water	79:17	0:0	8	psz_end
stmts	80:16	80:33	7	
op	80:16	0:0	8	*
water	80:17	0:0	8	psz_end
op	80:24	0:0	8	++
op	80:27	0:0	8	=
water	80:29	0:0	8	'\0'
water	80:33	0:0	8	;
if	81:12	82:60	6	(i % 2)
cond	81:16	81:20	7	i % 2
water	81:16	0:0	8	i
op	81:18	0:0	8	%
water	81:20	0:0	8	2
stmts	82:16	82:60	7	
water	82:16	0:0	8	sdt
op	82:19	0:0	8	->
water	82:21	0:0	8	psz_service_name
op	82:38	0:0	8	=
call	82:40	82:59	8	strdup
arg	82:47	82:59	9	psz_sdttoken
water	82:47	0:0	10	psz_sdttoken
water	82:60	0:0	8	;
else	83:12	84:56	6
stmts	84:16	84:56	7	
water	84:16	0:0	8	sdt
op	84:19	0:0	8	->
water	84:21	0:0	8	psz_provider
op	84:34	0:0	8	=
call	84:36	84:55	8	strdup
arg	84:43	84:55	9	psz_sdttoken
water	84:43	0:0	10	psz_sdttoken
water	84:56	0:0	8	;
water	85:12	0:0	6	psz_sdttoken
op	85:25	0:0	6	=
water	85:27	0:0	6	psz_end
water	85:34	0:0	6	;
water	86:8	0:0	6	}
call	87:8	87:20	4	free
arg	87:13	87:20	5	sdtdesc
water	87:13	0:0	6	sdtdesc
water	87:21	0:0	4	;
water	88:4	0:0	4	}
water	89:4	0:0	2	p_sys
op	89:9	0:0	2	->
water	89:11	0:0	2	b_data_alignment
op	89:28	0:0	2	=
call	89:30	89:78	2	var_GetBool
arg	89:43	89:48	3	p_mux
water	89:43	0:0	4	p_mux
arg	89:50	89:78	3	SOUT_CFG_PREFIX"alignment"
water	89:50	0:0	4	SOUT_CFG_PREFIX
water	89:66	0:0	4	"alignment"
water	89:79	0:0	2	;
decl	90:4	90:78	2	char	*pgrpmt
op	90:17	0:0	2	=
call	90:19	90:77	3	var_GetNonEmptyString
arg	90:41	90:46	4	p_mux
water	90:41	0:0	5	p_mux
arg	90:48	90:77	4	SOUT_CFG_PREFIX"program-pmt"
water	90:48	0:0	5	SOUT_CFG_PREFIX
water	90:64	0:0	5	"program-pmt"
if	91:4	114:4	2	(pgrpmt)
cond	91:8	91:8	3	pgrpmt
water	91:8	0:0	4	pgrpmt
stmts	92:4	114:4	3	
water	92:4	0:0	4	{
decl	93:8	93:26	4	char	*psz
op	93:18	0:0	4	=
water	93:20	0:0	4	pgrpmt
decl	94:8	94:28	4	char	*psz_next
op	94:23	0:0	4	=
water	94:25	0:0	4	psz
for	95:8	112:8	4	( int i = 0 ;psz;)
forinit	0:0	95:22	5	 int i = 0 ;
decl	95:13	95:22	6	int	i
op	95:19	0:0	6	=
water	95:21	0:0	6	0
cond	95:24	95:24	5	psz
water	95:24	0:0	6	psz
forexpr	0:0	0:0	5	
stmts	96:8	112:8	5	
water	96:8	0:0	6	{
decl	97:12	97:57	6	uint16_t	i_pid
op	97:27	0:0	6	=
call	97:29	97:56	7	strtoul
arg	97:38	97:41	8	psz
water	97:38	0:0	9	psz
arg	97:43	97:52	8	&psz_next
op	97:43	0:0	9	&
water	97:44	0:0	9	psz_next
arg	97:54	97:56	8	0
water	97:54	0:0	9	0
if	98:12	99:34	6	(psz_next [ 0 ] != '\0')
cond	98:16	98:31	7	psz_next [ 0 ] != '\0'
water	98:16	0:0	8	psz_next
op	98:24	0:0	8	[
water	98:25	0:0	8	0
op	98:26	0:0	8	]
op	98:28	0:0	8	!=
water	98:31	0:0	8	'\0'
stmts	99:16	99:34	7	
water	99:16	0:0	8	psz
op	99:20	0:0	8	=
op	99:22	0:0	8	&
water	99:23	0:0	8	psz_next
op	99:31	0:0	8	[
water	99:32	0:0	8	1
op	99:33	0:0	8	]
water	99:34	0:0	8	;
else	100:12	101:26	6
stmts	101:16	101:26	7	
water	101:16	0:0	8	psz
op	101:20	0:0	8	=
water	101:22	0:0	8	NULL
water	101:26	0:0	8	;
if	102:12	106:12	6	(i_pid == 0)
cond	102:16	102:25	7	i_pid == 0
water	102:16	0:0	8	i_pid
op	102:22	0:0	8	==
water	102:25	0:0	8	0
stmts	103:12	106:12	7	
water	103:12	0:0	8	{
if	104:16	105:78	8	(i >= MAX_PMT)
cond	104:20	104:25	9	i >= MAX_PMT
water	104:20	0:0	10	i
op	104:22	0:0	10	>=
water	104:25	0:0	10	MAX_PMT
stmts	105:20	105:78	9	
call	105:20	105:77	10	msg_Err
arg	105:29	105:34	11	p_mux
water	105:29	0:0	12	p_mux
arg	105:36	105:67	11	"Number of PMTs > maximum (%d)"
water	105:36	0:0	12	"Number of PMTs > maximum (%d)"
arg	105:69	105:77	11	MAX_PMT
water	105:69	0:0	12	MAX_PMT
water	105:78	0:0	10	;
water	106:12	0:0	8	}
else	107:12	111:12	6
stmts	108:12	111:12	7	
water	108:12	0:0	8	{
water	109:16	0:0	8	p_sys
op	109:21	0:0	8	->
water	109:23	0:0	8	i_pmt_program_number
op	109:43	0:0	8	[
water	109:44	0:0	8	i
op	109:45	0:0	8	]
op	109:47	0:0	8	=
water	109:49	0:0	8	i_pid
water	109:54	0:0	8	;
water	110:16	0:0	8	i
op	110:17	0:0	8	++
water	110:19	0:0	8	;
water	111:12	0:0	8	}
water	112:8	0:0	6	}
call	113:8	113:19	4	free
arg	113:13	113:19	5	pgrpmt
water	113:13	0:0	6	pgrpmt
water	113:20	0:0	4	;
water	114:4	0:0	4	}
else	115:4	120:4	2
stmts	116:4	120:4	3	
water	116:4	0:0	4	{
for	118:8	119:50	4	(unsigned i = 0 ;i < p_sys -> i_num_pmt;i ++)
forinit	118:13	118:27	5	unsigned i = 0 ;
water	118:13	0:0	6	unsigned
water	118:22	0:0	6	i
op	118:24	0:0	6	=
water	118:26	0:0	6	0
water	118:27	0:0	6	;
cond	118:29	118:40	5	i < p_sys -> i_num_pmt
water	118:29	0:0	6	i
op	118:31	0:0	6	<
water	118:33	0:0	6	p_sys
op	118:38	0:0	6	->
water	118:40	0:0	6	i_num_pmt
forexpr	118:51	118:52	5	i ++
water	118:51	0:0	6	i
op	118:52	0:0	6	++
stmts	119:12	119:50	5	
water	119:12	0:0	6	p_sys
op	119:17	0:0	6	->
water	119:19	0:0	6	i_pmt_program_number
op	119:39	0:0	6	[
water	119:40	0:0	6	i
op	119:41	0:0	6	]
op	119:43	0:0	6	=
water	119:45	0:0	6	i
op	119:47	0:0	6	+
water	119:49	0:0	6	1
water	119:50	0:0	6	;
water	120:4	0:0	4	}
call	121:4	121:52	2	var_Get
arg	121:13	121:18	3	p_mux
water	121:13	0:0	4	p_mux
arg	121:20	121:45	3	SOUT_CFG_PREFIX"pid-pmt"
water	121:20	0:0	4	SOUT_CFG_PREFIX
water	121:36	0:0	4	"pid-pmt"
arg	121:47	121:52	3	&val
op	121:47	0:0	4	&
water	121:48	0:0	4	val
water	121:53	0:0	2	;
if	122:4	123:24	2	(! val . i_int)
cond	122:8	122:13	3	! val . i_int
op	122:8	0:0	4	!
water	122:9	0:0	4	val
op	122:12	0:0	4	.
water	122:13	0:0	4	i_int
stmts	123:8	123:24	3	
water	123:8	0:0	4	val
op	123:11	0:0	4	.
water	123:12	0:0	4	i_int
op	123:18	0:0	4	=
water	123:20	0:0	4	0
water	123:21	0:0	4	x42
water	123:24	0:0	4	;
for	124:4	125:43	2	(unsigned i = 0 ;i < p_sys -> i_num_pmt;i ++)
forinit	124:9	124:23	3	unsigned i = 0 ;
water	124:9	0:0	4	unsigned
water	124:18	0:0	4	i
op	124:20	0:0	4	=
water	124:22	0:0	4	0
water	124:23	0:0	4	;
cond	124:25	124:36	3	i < p_sys -> i_num_pmt
water	124:25	0:0	4	i
op	124:27	0:0	4	<
water	124:29	0:0	4	p_sys
op	124:34	0:0	4	->
water	124:36	0:0	4	i_num_pmt
forexpr	124:47	124:48	3	i ++
water	124:47	0:0	4	i
op	124:48	0:0	4	++
stmts	125:8	125:43	3	
water	125:8	0:0	4	p_sys
op	125:13	0:0	4	->
water	125:15	0:0	4	pmt
op	125:18	0:0	4	[
water	125:19	0:0	4	i
op	125:20	0:0	4	]
op	125:21	0:0	4	.
water	125:22	0:0	4	i_pid
op	125:28	0:0	4	=
water	125:30	0:0	4	val
op	125:33	0:0	4	.
water	125:34	0:0	4	i_int
op	125:40	0:0	4	+
water	125:42	0:0	4	i
water	125:43	0:0	4	;
water	126:4	0:0	2	p_sys
op	126:9	0:0	2	->
water	126:11	0:0	2	i_pid_free
op	126:22	0:0	2	=
water	126:24	0:0	2	p_sys
op	126:29	0:0	2	->
water	126:31	0:0	2	pmt
op	126:34	0:0	2	[
water	126:35	0:0	2	p_sys
op	126:40	0:0	2	->
water	126:42	0:0	2	i_num_pmt
op	126:52	0:0	2	-
water	126:54	0:0	2	1
op	126:55	0:0	2	]
op	126:56	0:0	2	.
water	126:57	0:0	2	i_pid
op	126:63	0:0	2	+
water	126:65	0:0	2	1
water	126:66	0:0	2	;
water	127:4	0:0	2	p_sys
op	127:9	0:0	2	->
water	127:11	0:0	2	i_pid_video
op	127:23	0:0	2	=
call	127:25	127:76	2	var_GetInteger
arg	127:41	127:46	3	p_mux
water	127:41	0:0	4	p_mux
arg	127:48	127:76	3	SOUT_CFG_PREFIX"pid-video"
water	127:48	0:0	4	SOUT_CFG_PREFIX
water	127:64	0:0	4	"pid-video"
water	127:77	0:0	2	;
if	128:4	131:4	2	(p_sys -> i_pid_video > p_sys -> i_pid_free)
cond	128:9	128:37	3	p_sys -> i_pid_video > p_sys -> i_pid_free
water	128:9	0:0	4	p_sys
op	128:14	0:0	4	->
water	128:16	0:0	4	i_pid_video
op	128:28	0:0	4	>
water	128:30	0:0	4	p_sys
op	128:35	0:0	4	->
water	128:37	0:0	4	i_pid_free
stmts	129:4	131:4	3	
water	129:4	0:0	4	{
water	130:8	0:0	4	p_sys
op	130:13	0:0	4	->
water	130:15	0:0	4	i_pid_free
op	130:26	0:0	4	=
water	130:28	0:0	4	p_sys
op	130:33	0:0	4	->
water	130:35	0:0	4	i_pid_video
op	130:47	0:0	4	+
water	130:49	0:0	4	1
water	130:50	0:0	4	;
water	131:4	0:0	4	}
water	132:4	0:0	2	p_sys
op	132:9	0:0	2	->
water	132:11	0:0	2	i_pid_audio
op	132:23	0:0	2	=
call	132:25	132:76	2	var_GetInteger
arg	132:41	132:46	3	p_mux
water	132:41	0:0	4	p_mux
arg	132:48	132:76	3	SOUT_CFG_PREFIX"pid-audio"
water	132:48	0:0	4	SOUT_CFG_PREFIX
water	132:64	0:0	4	"pid-audio"
water	132:77	0:0	2	;
if	133:4	136:4	2	(p_sys -> i_pid_audio > p_sys -> i_pid_free)
cond	133:9	133:37	3	p_sys -> i_pid_audio > p_sys -> i_pid_free
water	133:9	0:0	4	p_sys
op	133:14	0:0	4	->
water	133:16	0:0	4	i_pid_audio
op	133:28	0:0	4	>
water	133:30	0:0	4	p_sys
op	133:35	0:0	4	->
water	133:37	0:0	4	i_pid_free
stmts	134:4	136:4	3	
water	134:4	0:0	4	{
water	135:8	0:0	4	p_sys
op	135:13	0:0	4	->
water	135:15	0:0	4	i_pid_free
op	135:26	0:0	4	=
water	135:28	0:0	4	p_sys
op	135:33	0:0	4	->
water	135:35	0:0	4	i_pid_audio
op	135:47	0:0	4	+
water	135:49	0:0	4	1
water	135:50	0:0	4	;
water	136:4	0:0	4	}
water	137:4	0:0	2	p_sys
op	137:9	0:0	2	->
water	137:11	0:0	2	i_pid_spu
op	137:21	0:0	2	=
call	137:23	137:72	2	var_GetInteger
arg	137:39	137:44	3	p_mux
water	137:39	0:0	4	p_mux
arg	137:46	137:72	3	SOUT_CFG_PREFIX"pid-spu"
water	137:46	0:0	4	SOUT_CFG_PREFIX
water	137:62	0:0	4	"pid-spu"
water	137:73	0:0	2	;
if	138:4	141:4	2	(p_sys -> i_pid_spu > p_sys -> i_pid_free)
cond	138:9	138:35	3	p_sys -> i_pid_spu > p_sys -> i_pid_free
water	138:9	0:0	4	p_sys
op	138:14	0:0	4	->
water	138:16	0:0	4	i_pid_spu
op	138:26	0:0	4	>
water	138:28	0:0	4	p_sys
op	138:33	0:0	4	->
water	138:35	0:0	4	i_pid_free
stmts	139:4	141:4	3	
water	139:4	0:0	4	{
water	140:8	0:0	4	p_sys
op	140:13	0:0	4	->
water	140:15	0:0	4	i_pid_free
op	140:26	0:0	4	=
water	140:28	0:0	4	p_sys
op	140:33	0:0	4	->
water	140:35	0:0	4	i_pid_spu
op	140:45	0:0	4	+
water	140:47	0:0	4	1
water	140:48	0:0	4	;
water	141:4	0:0	4	}
water	142:4	0:0	2	p_sys
op	142:9	0:0	2	->
water	142:11	0:0	2	i_pcr_pid
op	142:21	0:0	2	=
water	142:23	0:0	2	0
water	142:24	0:0	2	x1fff
water	142:29	0:0	2	;
water	144:4	0:0	2	p_sys
op	144:9	0:0	2	->
water	144:11	0:0	2	i_bitrate_min
op	144:25	0:0	2	=
call	144:27	144:73	2	var_GetInteger
arg	144:43	144:48	3	p_mux
water	144:43	0:0	4	p_mux
arg	144:50	144:73	3	SOUT_CFG_PREFIX"bmin"
water	144:50	0:0	4	SOUT_CFG_PREFIX
water	144:66	0:0	4	"bmin"
water	144:74	0:0	2	;
water	145:4	0:0	2	p_sys
op	145:9	0:0	2	->
water	145:11	0:0	2	i_bitrate_max
op	145:25	0:0	2	=
call	145:27	145:73	2	var_GetInteger
arg	145:43	145:48	3	p_mux
water	145:43	0:0	4	p_mux
arg	145:50	145:73	3	SOUT_CFG_PREFIX"bmax"
water	145:50	0:0	4	SOUT_CFG_PREFIX
water	145:66	0:0	4	"bmax"
water	145:74	0:0	2	;
if	146:4	153:4	2	(p_sys -> i_bitrate_min > 0 && p_sys -> i_bitrate_max > 0 && p_sys -> i_bitrate_min > p_sys -> i_bitrate_max)
cond	146:8	147:38	3	p_sys -> i_bitrate_min > 0 && p_sys -> i_bitrate_max > 0 && p_sys -> i_bitrate_min > p_sys -> i_bitrate_max
water	146:8	0:0	4	p_sys
op	146:13	0:0	4	->
water	146:15	0:0	4	i_bitrate_min
op	146:29	0:0	4	>
water	146:31	0:0	4	0
op	146:33	0:0	4	&&
water	146:36	0:0	4	p_sys
op	146:41	0:0	4	->
water	146:43	0:0	4	i_bitrate_max
op	146:57	0:0	4	>
water	146:59	0:0	4	0
op	146:61	0:0	4	&&
water	147:8	0:0	4	p_sys
op	147:13	0:0	4	->
water	147:15	0:0	4	i_bitrate_min
op	147:29	0:0	4	>
water	147:31	0:0	4	p_sys
op	147:36	0:0	4	->
water	147:38	0:0	4	i_bitrate_max
stmts	148:4	153:4	3	
water	148:4	0:0	4	{
call	149:8	150:45	4	msg_Err
arg	149:17	149:22	5	p_mux
water	149:17	0:0	6	p_mux
arg	149:24	150:45	5	"incompatible minimum and maximum bitrate, ""disabling bitrate control"
water	149:24	0:0	6	"incompatible minimum and maximum bitrate, "
water	150:17	0:0	6	"disabling bitrate control"
water	150:46	0:0	4	;
water	151:8	0:0	4	p_sys
op	151:13	0:0	4	->
water	151:15	0:0	4	i_bitrate_min
op	151:29	0:0	4	=
water	151:31	0:0	4	0
water	151:32	0:0	4	;
water	152:8	0:0	4	p_sys
op	152:13	0:0	4	->
water	152:15	0:0	4	i_bitrate_max
op	152:29	0:0	4	=
water	152:31	0:0	4	0
water	152:32	0:0	4	;
water	153:4	0:0	4	}
if	154:4	158:4	2	(p_sys -> i_bitrate_min > 0 || p_sys -> i_bitrate_max > 0)
cond	154:8	154:59	3	p_sys -> i_bitrate_min > 0 || p_sys -> i_bitrate_max > 0
water	154:8	0:0	4	p_sys
op	154:13	0:0	4	->
water	154:15	0:0	4	i_bitrate_min
op	154:29	0:0	4	>
water	154:31	0:0	4	0
op	154:33	0:0	4	||
water	154:36	0:0	4	p_sys
op	154:41	0:0	4	->
water	154:43	0:0	4	i_bitrate_max
op	154:57	0:0	4	>
water	154:59	0:0	4	0
stmts	155:4	158:4	3	
water	155:4	0:0	4	{
call	156:8	157:48	4	msg_Err
arg	156:17	156:22	5	p_mux
water	156:17	0:0	6	p_mux
arg	156:24	157:48	5	"bmin and bmax no more supported ""(if you need them report it)"
water	156:24	0:0	6	"bmin and bmax no more supported "
water	157:17	0:0	6	"(if you need them report it)"
water	157:49	0:0	4	;
water	158:4	0:0	4	}
call	159:4	159:52	2	var_Get
arg	159:13	159:18	3	p_mux
water	159:13	0:0	4	p_mux
arg	159:20	159:45	3	SOUT_CFG_PREFIX"shaping"
water	159:20	0:0	4	SOUT_CFG_PREFIX
water	159:36	0:0	4	"shaping"
arg	159:47	159:52	3	&val
op	159:47	0:0	4	&
water	159:48	0:0	4	val
water	159:53	0:0	2	;
water	160:4	0:0	2	p_sys
op	160:9	0:0	2	->
water	160:11	0:0	2	i_shaping_delay
op	160:27	0:0	2	=
water	160:29	0:0	2	val
op	160:32	0:0	2	.
water	160:33	0:0	2	i_int
op	160:39	0:0	2	*
water	160:41	0:0	2	1000
water	160:45	0:0	2	;
if	161:4	167:4	2	(p_sys -> i_shaping_delay <= 0)
cond	161:8	161:34	3	p_sys -> i_shaping_delay <= 0
water	161:8	0:0	4	p_sys
op	161:13	0:0	4	->
water	161:15	0:0	4	i_shaping_delay
op	161:31	0:0	4	<=
water	161:34	0:0	4	0
stmts	162:4	167:4	3	
water	162:4	0:0	4	{
call	163:8	165:47	4	msg_Err
arg	163:17	163:22	5	p_mux
water	163:17	0:0	6	p_mux
arg	164:17	164:67	5	"invalid shaping (%"PRId64"ms) resetting to 200ms"
water	164:17	0:0	6	"invalid shaping (%"
water	164:37	0:0	6	PRId64
water	164:43	0:0	6	"ms) resetting to 200ms"
arg	165:17	165:47	5	p_sys->i_shaping_delay/1000
water	165:17	0:0	6	p_sys
op	165:22	0:0	6	->
water	165:24	0:0	6	i_shaping_delay
op	165:40	0:0	6	/
water	165:42	0:0	6	1000
water	165:48	0:0	4	;
water	166:8	0:0	4	p_sys
op	166:13	0:0	4	->
water	166:15	0:0	4	i_shaping_delay
op	166:31	0:0	4	=
water	166:33	0:0	4	200000
water	166:39	0:0	4	;
water	167:4	0:0	4	}
call	168:4	168:48	2	var_Get
arg	168:13	168:18	3	p_mux
water	168:13	0:0	4	p_mux
arg	168:20	168:41	3	SOUT_CFG_PREFIX"pcr"
water	168:20	0:0	4	SOUT_CFG_PREFIX
water	168:36	0:0	4	"pcr"
arg	168:43	168:48	3	&val
op	168:43	0:0	4	&
water	168:44	0:0	4	val
water	168:49	0:0	2	;
water	169:4	0:0	2	p_sys
op	169:9	0:0	2	->
water	169:11	0:0	2	i_pcr_delay
op	169:23	0:0	2	=
water	169:25	0:0	2	val
op	169:28	0:0	2	.
water	169:29	0:0	2	i_int
op	169:35	0:0	2	*
water	169:37	0:0	2	1000
water	169:41	0:0	2	;
if	170:4	177:4	2	(p_sys -> i_pcr_delay <= 0 || p_sys -> i_pcr_delay >= p_sys -> i_shaping_delay)
cond	170:8	171:37	3	p_sys -> i_pcr_delay <= 0 || p_sys -> i_pcr_delay >= p_sys -> i_shaping_delay
water	170:8	0:0	4	p_sys
op	170:13	0:0	4	->
water	170:15	0:0	4	i_pcr_delay
op	170:27	0:0	4	<=
water	170:30	0:0	4	0
op	170:32	0:0	4	||
water	171:8	0:0	4	p_sys
op	171:13	0:0	4	->
water	171:15	0:0	4	i_pcr_delay
op	171:27	0:0	4	>=
water	171:30	0:0	4	p_sys
op	171:35	0:0	4	->
water	171:37	0:0	4	i_shaping_delay
stmts	172:4	177:4	3	
water	172:4	0:0	4	{
call	173:8	175:43	4	msg_Err
arg	173:17	173:22	5	p_mux
water	173:17	0:0	6	p_mux
arg	174:17	174:68	5	"invalid pcr delay (%"PRId64"ms) resetting to 70ms"
water	174:17	0:0	6	"invalid pcr delay (%"
water	174:39	0:0	6	PRId64
water	174:45	0:0	6	"ms) resetting to 70ms"
arg	175:17	175:43	5	p_sys->i_pcr_delay/1000
water	175:17	0:0	6	p_sys
op	175:22	0:0	6	->
water	175:24	0:0	6	i_pcr_delay
op	175:36	0:0	6	/
water	175:38	0:0	6	1000
water	175:44	0:0	4	;
water	176:8	0:0	4	p_sys
op	176:13	0:0	4	->
water	176:15	0:0	4	i_pcr_delay
op	176:27	0:0	4	=
water	176:29	0:0	4	70000
water	176:34	0:0	4	;
water	177:4	0:0	4	}
call	178:4	178:54	2	var_Get
arg	178:13	178:18	3	p_mux
water	178:13	0:0	4	p_mux
arg	178:20	178:47	3	SOUT_CFG_PREFIX"dts-delay"
water	178:20	0:0	4	SOUT_CFG_PREFIX
water	178:36	0:0	4	"dts-delay"
arg	178:49	178:54	3	&val
op	178:49	0:0	4	&
water	178:50	0:0	4	val
water	178:55	0:0	2	;
water	179:4	0:0	2	p_sys
op	179:9	0:0	2	->
water	179:11	0:0	2	i_dts_delay
op	179:23	0:0	2	=
water	179:25	0:0	2	val
op	179:28	0:0	2	.
water	179:29	0:0	2	i_int
op	179:35	0:0	2	*
water	179:37	0:0	2	1000
water	179:41	0:0	2	;
call	180:4	181:76	2	msg_Dbg
arg	180:13	180:18	3	p_mux
water	180:13	0:0	4	p_mux
arg	180:20	180:71	3	"shaping=%"PRId64" pcr=%"PRId64" dts_delay=%"PRId64
water	180:20	0:0	4	"shaping=%"
water	180:31	0:0	4	PRId64
water	180:37	0:0	4	" pcr=%"
water	180:45	0:0	4	PRId64
water	180:51	0:0	4	" dts_delay=%"
water	180:65	0:0	4	PRId64
arg	181:13	181:35	3	p_sys->i_shaping_delay
water	181:13	0:0	4	p_sys
op	181:18	0:0	4	->
water	181:20	0:0	4	i_shaping_delay
arg	181:37	181:55	3	p_sys->i_pcr_delay
water	181:37	0:0	4	p_sys
op	181:42	0:0	4	->
water	181:44	0:0	4	i_pcr_delay
arg	181:57	181:76	3	p_sys->i_dts_delay
water	181:57	0:0	4	p_sys
op	181:62	0:0	4	->
water	181:64	0:0	4	i_dts_delay
water	181:77	0:0	2	;
water	182:4	0:0	2	p_sys
op	182:9	0:0	2	->
water	182:11	0:0	2	b_use_key_frames
op	182:28	0:0	2	=
call	182:30	182:83	2	var_GetBool
arg	182:43	182:48	3	p_mux
water	182:43	0:0	4	p_mux
arg	182:50	182:83	3	SOUT_CFG_PREFIX"use-key-frames"
water	182:50	0:0	4	SOUT_CFG_PREFIX
water	182:66	0:0	4	"use-key-frames"
water	182:84	0:0	2	;
water	183:4	0:0	2	p_mux
op	183:9	0:0	2	->
water	183:11	0:0	2	p_sys
op	183:24	0:0	2	=
water	183:26	0:0	2	p_sys
water	183:31	0:0	2	;
water	184:4	0:0	2	p_sys
op	184:9	0:0	2	->
water	184:11	0:0	2	csa
op	184:15	0:0	2	=
call	184:17	184:32	2	csaSetup
arg	184:26	184:32	3	p_this
water	184:26	0:0	4	p_this
water	184:33	0:0	2	;
water	185:4	0:0	2	p_mux
op	185:9	0:0	2	->
water	185:11	0:0	2	pf_control
op	185:24	0:0	2	=
water	185:26	0:0	2	Control
water	185:33	0:0	2	;
water	186:4	0:0	2	p_mux
op	186:9	0:0	2	->
water	186:11	0:0	2	pf_addstream
op	186:24	0:0	2	=
water	186:26	0:0	2	AddStream
water	186:35	0:0	2	;
water	187:4	0:0	2	p_mux
op	187:9	0:0	2	->
water	187:11	0:0	2	pf_delstream
op	187:24	0:0	2	=
water	187:26	0:0	2	DelStream
water	187:35	0:0	2	;
water	188:4	0:0	2	p_mux
op	188:9	0:0	2	->
water	188:11	0:0	2	pf_mux
op	188:24	0:0	2	=
water	188:26	0:0	2	Mux
water	188:29	0:0	2	;
return	189:4	189:22	2	VLC_SUCCESS
water	189:11	0:0	3	VLC_SUCCESS
