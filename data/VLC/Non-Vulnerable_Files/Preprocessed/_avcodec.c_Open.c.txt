func	2:0	110:0	0	static int	Open
params	2:15	0:0	1	
param	2:16	2:28	2	vlc_va_t *	va
param	2:30	2:49	2	AVCodecContext *	ctx
param	2:51	2:73	2	const es_format_t *	fmt
stmnts	0:0	109:23	1	
decl	4:4	4:17	2	VdpStatus	err
decl	5:4	5:29	2	VdpDecoderProfile	profile
decl	6:4	6:28	2	int	level
op	6:14	0:0	2	=
water	6:16	0:0	2	fmt
op	6:19	0:0	2	->
water	6:21	0:0	2	i_level
if	7:4	12:4	2	(av_vdpau_get_profile (ctx ,& profile ))
cond	7:8	7:42	3	av_vdpau_get_profile (ctx ,& profile )
call	7:8	7:42	4	av_vdpau_get_profile
arg	7:29	7:32	5	ctx
water	7:29	0:0	6	ctx
arg	7:34	7:42	5	&profile
op	7:34	0:0	6	&
water	7:35	0:0	6	profile
stmts	8:4	12:4	3	
water	8:4	0:0	4	{
call	9:8	10:30	4	msg_Err
arg	9:16	9:18	5	va
water	9:16	0:0	6	va
arg	9:20	9:56	5	"unsupported codec %d or profile %d"
water	9:20	0:0	6	"unsupported codec %d or profile %d"
arg	9:58	9:71	5	ctx->codec_id
water	9:58	0:0	6	ctx
op	9:61	0:0	6	->
water	9:63	0:0	6	codec_id
arg	10:16	10:30	5	fmt->i_profile
water	10:16	0:0	6	fmt
op	10:19	0:0	6	->
water	10:21	0:0	6	i_profile
water	10:31	0:0	4	;
return	11:8	11:27	4	VLC_EGENERIC
water	11:15	0:0	5	VLC_EGENERIC
water	12:4	0:0	4	}
switch	13:4	30:4	2	(ctx -> codec_id)
cond	13:12	13:17	3	ctx -> codec_id
water	13:12	0:0	4	ctx
op	13:15	0:0	4	->
water	13:17	0:0	4	codec_id
stmts	14:4	30:4	3	
water	14:4	0:0	4	{
label	15:8	15:35	4	case AV_CODEC_ID_MPEG1VIDEO :
water	16:12	0:0	4	level
op	16:18	0:0	4	=
water	16:20	0:0	4	VDP_DECODER_LEVEL_MPEG1_NA
water	16:46	0:0	4	;
break	17:12	17:17	4	
label	18:8	18:35	4	case AV_CODEC_ID_MPEG2VIDEO :
water	19:12	0:0	4	level
op	19:18	0:0	4	=
water	19:20	0:0	4	VDP_DECODER_LEVEL_MPEG2_HL
water	19:46	0:0	4	;
break	20:12	20:17	4	
label	21:8	21:29	4	case AV_CODEC_ID_H263 :
water	22:12	0:0	4	level
op	22:18	0:0	4	=
water	22:20	0:0	4	VDP_DECODER_LEVEL_MPEG4_PART2_ASP_L5
water	22:56	0:0	4	;
break	23:12	23:17	4	
label	24:8	24:29	4	case AV_CODEC_ID_H264 :
if	25:12	27:49	4	(( fmt -> i_profile & FF_PROFILE_H264_INTRA ) && ( fmt -> i_level == 11 ))
cond	25:16	26:35	5	( fmt -> i_profile & FF_PROFILE_H264_INTRA ) && ( fmt -> i_level == 11 )
water	25:16	0:0	6	(
water	25:17	0:0	6	fmt
op	25:20	0:0	6	->
water	25:22	0:0	6	i_profile
op	25:32	0:0	6	&
water	25:34	0:0	6	FF_PROFILE_H264_INTRA
water	25:55	0:0	6	)
op	26:13	0:0	6	&&
water	26:16	0:0	6	(
water	26:17	0:0	6	fmt
op	26:20	0:0	6	->
water	26:22	0:0	6	i_level
op	26:30	0:0	6	==
water	26:33	0:0	6	11
water	26:35	0:0	6	)
stmts	27:16	27:49	5	
water	27:16	0:0	6	level
op	27:22	0:0	6	=
water	27:24	0:0	6	VDP_DECODER_LEVEL_H264_1b
water	27:49	0:0	6	;
label	28:8	28:15	4	default :
break	29:12	29:17	4	
water	30:4	0:0	4	}
if	31:4	35:4	2	(!vlc_xlib_init (VLC_OBJECT (va ) ))
cond	31:8	31:37	3	!vlc_xlib_init (VLC_OBJECT (va ) )
op	31:8	0:0	4	!
call	31:9	31:37	4	vlc_xlib_init
arg	31:23	31:37	5	VLC_OBJECT(va)
call	31:23	31:36	6	VLC_OBJECT
arg	31:34	31:36	7	va
water	31:34	0:0	8	va
stmts	32:4	35:4	3	
water	32:4	0:0	4	{
call	33:8	33:48	4	msg_Err
arg	33:16	33:18	5	va
water	33:16	0:0	6	va
arg	33:20	33:48	5	"Xlib is required for VDPAU"
water	33:20	0:0	6	"Xlib is required for VDPAU"
water	33:49	0:0	4	;
return	34:8	34:27	4	VLC_EGENERIC
water	34:15	0:0	5	VLC_EGENERIC
water	35:4	0:0	4	}
decl	36:4	36:45	2	vlc_va_sys_t	*sys
op	36:22	0:0	2	=
call	36:24	36:44	3	malloc
arg	36:31	36:44	4	sizeof(*sys)
op	36:31	0:0	5	sizeof
water	36:38	0:0	5	(
op	36:39	0:0	5	*
water	36:40	0:0	5	sys
water	36:43	0:0	5	)
if	37:4	38:24	2	(unlikely (sys == NULL ))
cond	37:8	37:28	3	unlikely (sys == NULL )
call	37:8	37:28	4	unlikely
arg	37:17	37:28	5	sys==NULL
water	37:17	0:0	6	sys
op	37:21	0:0	6	==
water	37:24	0:0	6	NULL
stmts	38:7	38:24	3	
return	38:7	38:24	4	VLC_ENOMEM
water	38:14	0:0	5	VLC_ENOMEM
water	39:4	0:0	2	sys
op	39:7	0:0	2	->
water	39:9	0:0	2	context
op	39:17	0:0	2	=
call	39:19	39:42	2	av_vdpau_alloc_context
water	39:43	0:0	2	;
if	40:4	44:4	2	(unlikely (sys -> context == NULL ))
cond	40:8	40:37	3	unlikely (sys -> context == NULL )
call	40:8	40:37	4	unlikely
arg	40:17	40:37	5	sys->context==NULL
water	40:17	0:0	6	sys
op	40:20	0:0	6	->
water	40:22	0:0	6	context
op	40:30	0:0	6	==
water	40:33	0:0	6	NULL
stmts	41:4	44:4	3	
water	41:4	0:0	4	{
call	42:8	42:16	4	free
arg	42:13	42:16	5	sys
water	42:13	0:0	6	sys
water	42:17	0:0	4	;
return	43:8	43:25	4	VLC_ENOMEM
water	43:15	0:0	5	VLC_ENOMEM
water	44:4	0:0	4	}
water	45:4	0:0	2	err
op	45:8	0:0	2	=
call	45:10	45:55	2	vdp_get_x11
arg	45:22	45:26	3	NULL
water	45:22	0:0	4	NULL
arg	45:28	45:30	3	-1
op	45:28	0:0	4	-
water	45:29	0:0	4	1
arg	45:32	45:41	3	&sys->vdp
op	45:32	0:0	4	&
water	45:33	0:0	4	sys
op	45:36	0:0	4	->
water	45:38	0:0	4	vdp
arg	45:43	45:55	3	&sys->device
op	45:43	0:0	4	&
water	45:44	0:0	4	sys
op	45:47	0:0	4	->
water	45:49	0:0	4	device
water	45:56	0:0	2	;
if	46:4	51:4	2	(err != VDP_STATUS_OK)
cond	46:8	46:15	3	err != VDP_STATUS_OK
water	46:8	0:0	4	err
op	46:12	0:0	4	!=
water	46:15	0:0	4	VDP_STATUS_OK
stmts	47:4	51:4	3	
water	47:4	0:0	4	{
call	48:8	48:28	4	av_free
arg	48:16	48:28	5	sys->context
water	48:16	0:0	6	sys
op	48:19	0:0	6	->
water	48:21	0:0	6	context
water	48:29	0:0	4	;
call	49:8	49:16	4	free
arg	49:13	49:16	5	sys
water	49:13	0:0	6	sys
water	49:17	0:0	4	;
return	50:8	50:27	4	VLC_EGENERIC
water	50:15	0:0	5	VLC_EGENERIC
water	51:4	0:0	4	}
decl	52:4	52:14	2	void	*func
water	53:4	0:0	2	err
op	53:8	0:0	2	=
call	53:10	54:64	2	vdp_get_proc_address
arg	53:31	53:39	3	sys->vdp
water	53:31	0:0	4	sys
op	53:34	0:0	4	->
water	53:36	0:0	4	vdp
arg	53:41	53:52	3	sys->device
water	53:41	0:0	4	sys
op	53:44	0:0	4	->
water	53:46	0:0	4	device
arg	54:31	54:57	3	VDP_FUNC_ID_DECODER_RENDER
water	54:31	0:0	4	VDP_FUNC_ID_DECODER_RENDER
arg	54:59	54:64	3	&func
op	54:59	0:0	4	&
water	54:60	0:0	4	func
water	54:65	0:0	2	;
if	55:4	56:18	2	(err != VDP_STATUS_OK)
cond	55:8	55:15	3	err != VDP_STATUS_OK
water	55:8	0:0	4	err
op	55:12	0:0	4	!=
water	55:15	0:0	4	VDP_STATUS_OK
stmts	56:8	56:18	3	
goto	56:8	56:18	4	error
water	56:13	0:0	5	error
water	57:4	0:0	2	sys
op	57:7	0:0	2	->
water	57:9	0:0	2	context
op	57:16	0:0	2	->
water	57:18	0:0	2	decoder
op	57:26	0:0	2	=
water	57:28	0:0	2	VDP_INVALID_HANDLE
water	57:46	0:0	2	;
water	58:4	0:0	2	sys
op	58:7	0:0	2	->
water	58:9	0:0	2	context
op	58:16	0:0	2	->
water	58:18	0:0	2	render
op	58:25	0:0	2	=
water	58:27	0:0	2	func
water	58:31	0:0	2	;
water	59:4	0:0	2	sys
op	59:7	0:0	2	->
water	59:9	0:0	2	profile
op	59:17	0:0	2	=
water	59:19	0:0	2	profile
water	59:26	0:0	2	;
decl	61:4	61:19	2	VdpBool	support
decl	62:4	62:24	2	uint32_t	l
water	62:14	0:0	2	,
decl	62:4	62:24	2	uint32_t	mb
water	62:18	0:0	2	,
decl	62:4	62:24	2	uint32_t	w
water	62:21	0:0	2	,
decl	62:4	62:24	2	uint32_t	h
if	63:4	65:27	2	(vdp_video_surface_query_capabilities (sys -> vdp ,sys -> device ,VDP_CHROMA_TYPE_420 ,& support ,& w ,& h ) != VDP_STATUS_OK)
cond	63:8	64:56	3	vdp_video_surface_query_capabilities (sys -> vdp ,sys -> device ,VDP_CHROMA_TYPE_420 ,& support ,& w ,& h ) != VDP_STATUS_OK
call	63:8	64:51	4	vdp_video_surface_query_capabilities
arg	63:45	63:53	5	sys->vdp
water	63:45	0:0	6	sys
op	63:48	0:0	6	->
water	63:50	0:0	6	vdp
arg	63:55	63:66	5	sys->device
water	63:55	0:0	6	sys
op	63:58	0:0	6	->
water	63:60	0:0	6	device
arg	64:14	64:33	5	VDP_CHROMA_TYPE_420
water	64:14	0:0	6	VDP_CHROMA_TYPE_420
arg	64:35	64:43	5	&support
op	64:35	0:0	6	&
water	64:36	0:0	6	support
arg	64:45	64:47	5	&w
op	64:45	0:0	6	&
water	64:46	0:0	6	w
arg	64:49	64:51	5	&h
op	64:49	0:0	6	&
water	64:50	0:0	6	h
op	64:53	0:0	4	!=
water	64:56	0:0	4	VDP_STATUS_OK
stmts	65:8	65:27	3	
water	65:8	0:0	4	support
op	65:16	0:0	4	=
water	65:18	0:0	4	VDP_FALSE
water	65:27	0:0	4	;
if	66:4	70:4	2	(! support)
cond	66:8	66:9	3	! support
op	66:8	0:0	4	!
water	66:9	0:0	4	support
stmts	67:4	70:4	3	
water	67:4	0:0	4	{
call	68:8	68:73	4	msg_Err
arg	68:16	68:18	5	va
water	68:16	0:0	6	va
arg	68:20	68:60	5	"video surface format not supported: %s"
water	68:20	0:0	6	"video surface format not supported: %s"
arg	68:62	68:73	5	"YUV 4:2:0"
water	68:62	0:0	6	"YUV 4:2:0"
water	68:74	0:0	4	;
goto	69:8	69:18	4	error
water	69:13	0:0	5	error
water	70:4	0:0	4	}
call	71:4	71:63	2	msg_Dbg
arg	71:12	71:14	3	va
water	71:12	0:0	4	va
arg	71:16	71:57	3	"video surface limits: %"PRIu32"x%"PRIu32
water	71:16	0:0	4	"video surface limits: %"
water	71:41	0:0	4	PRIu32
water	71:47	0:0	4	"x%"
water	71:51	0:0	4	PRIu32
arg	71:59	71:60	3	w
water	71:59	0:0	4	w
arg	71:62	71:63	3	h
water	71:62	0:0	4	h
water	71:64	0:0	2	;
if	72:4	77:4	2	(w < fmt -> video . i_width || h < fmt -> video . i_height)
cond	72:8	72:49	3	w < fmt -> video . i_width || h < fmt -> video . i_height
water	72:8	0:0	4	w
op	72:10	0:0	4	<
water	72:12	0:0	4	fmt
op	72:15	0:0	4	->
water	72:17	0:0	4	video
op	72:22	0:0	4	.
water	72:23	0:0	4	i_width
op	72:31	0:0	4	||
water	72:34	0:0	4	h
op	72:36	0:0	4	<
water	72:38	0:0	4	fmt
op	72:41	0:0	4	->
water	72:43	0:0	4	video
op	72:48	0:0	4	.
water	72:49	0:0	4	i_height
stmts	73:4	77:4	3	
water	73:4	0:0	4	{
call	74:8	75:55	4	msg_Err
arg	74:16	74:18	5	va
water	74:16	0:0	6	va
arg	74:20	74:55	5	"video surface above limits: %ux%u"
water	74:20	0:0	6	"video surface above limits: %ux%u"
arg	75:16	75:34	5	fmt->video.i_width
water	75:16	0:0	6	fmt
op	75:19	0:0	6	->
water	75:21	0:0	6	video
op	75:26	0:0	6	.
water	75:27	0:0	6	i_width
arg	75:36	75:55	5	fmt->video.i_height
water	75:36	0:0	6	fmt
op	75:39	0:0	6	->
water	75:41	0:0	6	video
op	75:46	0:0	6	.
water	75:47	0:0	6	i_height
water	75:56	0:0	4	;
goto	76:8	76:18	4	error
water	76:13	0:0	5	error
water	77:4	0:0	4	}
if	78:4	80:27	2	(vdp_decoder_query_capabilities (sys -> vdp ,sys -> device ,profile ,& support ,& l ,& mb ,& w ,& h ) != VDP_STATUS_OK)
cond	78:8	79:65	3	vdp_decoder_query_capabilities (sys -> vdp ,sys -> device ,profile ,& support ,& l ,& mb ,& w ,& h ) != VDP_STATUS_OK
call	78:8	79:60	4	vdp_decoder_query_capabilities
arg	78:39	78:47	5	sys->vdp
water	78:39	0:0	6	sys
op	78:42	0:0	6	->
water	78:44	0:0	6	vdp
arg	78:49	78:60	5	sys->device
water	78:49	0:0	6	sys
op	78:52	0:0	6	->
water	78:54	0:0	6	device
arg	78:62	78:69	5	profile
water	78:62	0:0	6	profile
arg	79:35	79:43	5	&support
op	79:35	0:0	6	&
water	79:36	0:0	6	support
arg	79:45	79:47	5	&l
op	79:45	0:0	6	&
water	79:46	0:0	6	l
arg	79:49	79:52	5	&mb
op	79:49	0:0	6	&
water	79:50	0:0	6	mb
arg	79:54	79:56	5	&w
op	79:54	0:0	6	&
water	79:55	0:0	6	w
arg	79:58	79:60	5	&h
op	79:58	0:0	6	&
water	79:59	0:0	6	h
op	79:62	0:0	4	!=
water	79:65	0:0	4	VDP_STATUS_OK
stmts	80:8	80:27	3	
water	80:8	0:0	4	support
op	80:16	0:0	4	=
water	80:18	0:0	4	VDP_FALSE
water	80:27	0:0	4	;
if	81:4	85:4	2	(! support)
cond	81:8	81:9	3	! support
op	81:8	0:0	4	!
water	81:9	0:0	4	support
stmts	82:4	85:4	3	
water	82:4	0:0	4	{
call	83:8	83:64	4	msg_Err
arg	83:16	83:18	5	va
water	83:16	0:0	6	va
arg	83:20	83:55	5	"decoder profile not supported: %u"
water	83:20	0:0	6	"decoder profile not supported: %u"
arg	83:57	83:64	5	profile
water	83:57	0:0	6	profile
water	83:65	0:0	4	;
goto	84:8	84:18	4	error
water	84:13	0:0	5	error
water	85:4	0:0	4	}
call	86:4	87:44	2	msg_Dbg
arg	86:12	86:14	3	va
water	86:12	0:0	4	va
arg	86:16	87:31	3	"decoder profile limits: level %"PRIu32" mb %"PRIu32" ""%"PRIu32"x%"PRIu32
water	86:16	0:0	4	"decoder profile limits: level %"
water	86:49	0:0	4	PRIu32
water	86:55	0:0	4	" mb %"
water	86:62	0:0	4	PRIu32
water	86:68	0:0	4	" "
water	87:12	0:0	4	"%"
water	87:15	0:0	4	PRIu32
water	87:21	0:0	4	"x%"
water	87:25	0:0	4	PRIu32
arg	87:33	87:34	3	l
water	87:33	0:0	4	l
arg	87:36	87:38	3	mb
water	87:36	0:0	4	mb
arg	87:40	87:41	3	w
water	87:40	0:0	4	w
arg	87:43	87:44	3	h
water	87:43	0:0	4	h
water	87:45	0:0	2	;
if	88:4	93:4	2	(( int ) l < level || w < fmt -> video . i_width || h < fmt -> video . i_height)
cond	88:8	88:67	3	( int ) l < level || w < fmt -> video . i_width || h < fmt -> video . i_height
water	88:8	0:0	4	(
water	88:9	0:0	4	int
water	88:12	0:0	4	)
water	88:13	0:0	4	l
op	88:15	0:0	4	<
water	88:17	0:0	4	level
op	88:23	0:0	4	||
water	88:26	0:0	4	w
op	88:28	0:0	4	<
water	88:30	0:0	4	fmt
op	88:33	0:0	4	->
water	88:35	0:0	4	video
op	88:40	0:0	4	.
water	88:41	0:0	4	i_width
op	88:49	0:0	4	||
water	88:52	0:0	4	h
op	88:54	0:0	4	<
water	88:56	0:0	4	fmt
op	88:59	0:0	4	->
water	88:61	0:0	4	video
op	88:66	0:0	4	.
water	88:67	0:0	4	i_height
stmts	89:4	93:4	3	
water	89:4	0:0	4	{
call	90:8	91:62	4	msg_Err
arg	90:16	90:18	5	va
water	90:16	0:0	6	va
arg	90:20	90:66	5	"decoder profile above limits: level %d %ux%u"
water	90:20	0:0	6	"decoder profile above limits: level %d %ux%u"
arg	91:16	91:21	5	level
water	91:16	0:0	6	level
arg	91:23	91:41	5	fmt->video.i_width
water	91:23	0:0	6	fmt
op	91:26	0:0	6	->
water	91:28	0:0	6	video
op	91:33	0:0	6	.
water	91:34	0:0	6	i_width
arg	91:43	91:62	5	fmt->video.i_height
water	91:43	0:0	6	fmt
op	91:46	0:0	6	->
water	91:48	0:0	6	video
op	91:53	0:0	6	.
water	91:54	0:0	6	i_height
water	91:63	0:0	4	;
goto	92:8	92:18	4	error
water	92:13	0:0	5	error
water	93:4	0:0	4	}
decl	94:4	94:21	2	const char	*infos
if	95:4	96:23	2	(vdp_get_information_string (sys -> vdp ,& infos ) != VDP_STATUS_OK)
cond	95:8	95:56	3	vdp_get_information_string (sys -> vdp ,& infos ) != VDP_STATUS_OK
call	95:8	95:51	4	vdp_get_information_string
arg	95:35	95:43	5	sys->vdp
water	95:35	0:0	6	sys
op	95:38	0:0	6	->
water	95:40	0:0	6	vdp
arg	95:45	95:51	5	&infos
op	95:45	0:0	6	&
water	95:46	0:0	6	infos
op	95:53	0:0	4	!=
water	95:56	0:0	4	VDP_STATUS_OK
stmts	96:8	96:23	3	
water	96:8	0:0	4	infos
op	96:14	0:0	4	=
water	96:16	0:0	4	"VDPAU"
water	96:23	0:0	4	;
water	97:4	0:0	2	va
op	97:6	0:0	2	->
water	97:8	0:0	2	sys
op	97:12	0:0	2	=
water	97:14	0:0	2	sys
water	97:17	0:0	2	;
water	98:4	0:0	2	va
op	98:6	0:0	2	->
water	98:8	0:0	2	description
op	98:20	0:0	2	=
water	98:22	0:0	2	infos
water	98:27	0:0	2	;
water	99:4	0:0	2	va
op	99:6	0:0	2	->
water	99:8	0:0	2	pix_fmt
op	99:16	0:0	2	=
water	99:18	0:0	2	AV_PIX_FMT_VDPAU
water	99:34	0:0	2	;
water	100:4	0:0	2	va
op	100:6	0:0	2	->
water	100:8	0:0	2	setup
op	100:14	0:0	2	=
water	100:16	0:0	2	Setup
water	100:21	0:0	2	;
water	101:4	0:0	2	va
op	101:6	0:0	2	->
water	101:8	0:0	2	get
op	101:12	0:0	2	=
water	101:14	0:0	2	Lock
water	101:18	0:0	2	;
water	102:4	0:0	2	va
op	102:6	0:0	2	->
water	102:8	0:0	2	release
op	102:16	0:0	2	=
water	102:18	0:0	2	Unlock
water	102:24	0:0	2	;
water	103:4	0:0	2	va
op	103:6	0:0	2	->
water	103:8	0:0	2	extract
op	103:16	0:0	2	=
water	103:18	0:0	2	Copy
water	103:22	0:0	2	;
return	104:4	104:22	2	VLC_SUCCESS
water	104:11	0:0	3	VLC_SUCCESS
label	105:0	105:5	2	error :
call	106:4	106:28	2	vdp_release_x11
arg	106:20	106:28	3	sys->vdp
water	106:20	0:0	4	sys
op	106:23	0:0	4	->
water	106:25	0:0	4	vdp
water	106:29	0:0	2	;
call	107:4	107:24	2	av_free
arg	107:12	107:24	3	sys->context
water	107:12	0:0	4	sys
op	107:15	0:0	4	->
water	107:17	0:0	4	context
water	107:25	0:0	2	;
call	108:4	108:12	2	free
arg	108:9	108:12	3	sys
water	108:9	0:0	4	sys
water	108:13	0:0	2	;
return	109:4	109:23	2	VLC_EGENERIC
water	109:11	0:0	3	VLC_EGENERIC
