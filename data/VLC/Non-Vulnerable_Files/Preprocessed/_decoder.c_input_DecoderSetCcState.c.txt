func	2:0	50:0	0	int	input_DecoderSetCcState
params	2:27	0:0	1	
param	2:29	2:45	2	decoder_t *	p_dec
param	2:47	2:60	2	bool	b_decode
param	2:62	2:76	2	int	i_channel
stmnts	0:0	49:22	1	
decl	4:4	4:49	2	decoder_owner_sys_t	*p_owner
op	4:33	0:0	2	=
water	4:35	0:0	2	p_dec
op	4:40	0:0	2	->
water	4:42	0:0	2	p_owner
if	6:4	7:27	2	(i_channel < 0 || i_channel >= 4 || ! p_owner -> cc . pb_present [ i_channel ])
cond	6:8	6:76	3	i_channel < 0 || i_channel >= 4 || ! p_owner -> cc . pb_present [ i_channel ]
water	6:8	0:0	4	i_channel
op	6:18	0:0	4	<
water	6:20	0:0	4	0
op	6:22	0:0	4	||
water	6:25	0:0	4	i_channel
op	6:35	0:0	4	>=
water	6:38	0:0	4	4
op	6:40	0:0	4	||
op	6:43	0:0	4	!
water	6:44	0:0	4	p_owner
op	6:51	0:0	4	->
water	6:53	0:0	4	cc
op	6:55	0:0	4	.
water	6:56	0:0	4	pb_present
op	6:66	0:0	4	[
water	6:67	0:0	4	i_channel
op	6:76	0:0	4	]
stmts	7:8	7:27	3	
return	7:8	7:27	4	VLC_EGENERIC
water	7:15	0:0	5	VLC_EGENERIC
if	8:4	38:4	2	(b_decode)
cond	8:8	8:8	3	b_decode
water	8:8	0:0	4	b_decode
stmts	9:4	38:4	3	
water	9:4	0:0	4	{
water	10:8	0:0	4	static
water	10:15	0:0	4	const
water	10:21	0:0	4	vlc_fourcc_t
water	10:34	0:0	4	fcc
op	10:37	0:0	4	[
water	10:38	0:0	4	4
op	10:39	0:0	4	]
op	10:41	0:0	4	=
water	10:43	0:0	4	{
call	11:12	11:41	4	VLC_FOURCC
arg	11:23	11:26	5	'c'
water	11:23	0:0	6	'c'
arg	11:28	11:31	5	'c'
water	11:28	0:0	6	'c'
arg	11:33	11:36	5	'1'
water	11:33	0:0	6	'1'
arg	11:38	11:41	5	' '
water	11:38	0:0	6	' '
water	11:42	0:0	4	,
call	12:12	12:41	4	VLC_FOURCC
arg	12:23	12:26	5	'c'
water	12:23	0:0	6	'c'
arg	12:28	12:31	5	'c'
water	12:28	0:0	6	'c'
arg	12:33	12:36	5	'2'
water	12:33	0:0	6	'2'
arg	12:38	12:41	5	' '
water	12:38	0:0	6	' '
water	12:42	0:0	4	,
call	13:12	13:41	4	VLC_FOURCC
arg	13:23	13:26	5	'c'
water	13:23	0:0	6	'c'
arg	13:28	13:31	5	'c'
water	13:28	0:0	6	'c'
arg	13:33	13:36	5	'3'
water	13:33	0:0	6	'3'
arg	13:38	13:41	5	' '
water	13:38	0:0	6	' '
water	13:42	0:0	4	,
call	14:12	14:41	4	VLC_FOURCC
arg	14:23	14:26	5	'c'
water	14:23	0:0	6	'c'
arg	14:28	14:31	5	'c'
water	14:28	0:0	6	'c'
arg	14:33	14:36	5	'4'
water	14:33	0:0	6	'4'
arg	14:38	14:41	5	' '
water	14:38	0:0	6	' '
water	14:42	0:0	4	,
water	15:8	0:0	4	}
water	15:9	0:0	4	;
decl	16:8	16:23	4	decoder_t	*p_cc
decl	17:8	17:23	4	es_format_t	fmt
call	18:8	18:53	4	es_format_Init
arg	18:24	18:28	5	&fmt
op	18:24	0:0	6	&
water	18:25	0:0	6	fmt
arg	18:30	18:36	5	SPU_ES
water	18:30	0:0	6	SPU_ES
arg	18:38	18:53	5	fcc[i_channel]
water	18:38	0:0	6	fcc
op	18:41	0:0	6	[
water	18:42	0:0	6	i_channel
op	18:51	0:0	6	]
water	18:54	0:0	4	;
water	19:8	0:0	4	p_cc
op	19:13	0:0	4	=
call	19:15	20:71	4	input_DecoderNew
arg	19:33	19:49	5	p_owner->p_input
water	19:33	0:0	6	p_owner
op	19:40	0:0	6	->
water	19:42	0:0	6	p_input
arg	19:51	19:55	5	&fmt
op	19:51	0:0	6	&
water	19:52	0:0	6	fmt
arg	20:30	20:53	5	p_dec->p_owner->p_clock
water	20:30	0:0	6	p_dec
op	20:35	0:0	6	->
water	20:37	0:0	6	p_owner
op	20:44	0:0	6	->
water	20:46	0:0	6	p_clock
arg	20:55	20:71	5	p_owner->p_sout
water	20:55	0:0	6	p_owner
op	20:62	0:0	6	->
water	20:64	0:0	6	p_sout
water	20:72	0:0	4	;
if	21:8	27:8	4	(! p_cc)
cond	21:12	21:13	5	! p_cc
op	21:12	0:0	6	!
water	21:13	0:0	6	p_cc
stmts	22:8	27:8	5	
water	22:8	0:0	6	{
call	23:12	23:55	6	msg_Err
arg	23:21	23:26	7	p_dec
water	23:21	0:0	8	p_dec
arg	23:28	23:55	7	"could not create decoder"
water	23:28	0:0	8	"could not create decoder"
water	23:56	0:0	6	;
call	24:12	25:70	6	dialog_Fatal
arg	24:26	24:31	7	p_dec
water	24:26	0:0	8	p_dec
arg	24:33	24:68	7	_("Streaming / Transcoding failed")
call	24:33	24:67	8	_
arg	24:35	24:67	9	"Streaming / Transcoding failed"
water	24:35	0:0	10	"Streaming / Transcoding failed"
arg	24:70	24:74	7	"%s"
water	24:70	0:0	8	"%s"
arg	25:26	25:70	7	_("VLC could not open the decoder module.")
call	25:26	25:68	8	_
arg	25:28	25:68	9	"VLC could not open the decoder module."
water	25:28	0:0	10	"VLC could not open the decoder module."
water	25:71	0:0	6	;
return	26:12	26:31	6	VLC_EGENERIC
water	26:19	0:0	7	VLC_EGENERIC
water	27:8	0:0	6	}
else	28:8	33:8	4
stmts	28:13	33:8	5	
if	28:13	33:8	6	(! p_cc -> p_module)
cond	28:17	28:24	7	! p_cc -> p_module
op	28:17	0:0	8	!
water	28:18	0:0	8	p_cc
op	28:22	0:0	8	->
water	28:24	0:0	8	p_module
stmts	29:8	33:8	7	
water	29:8	0:0	8	{
call	30:12	30:59	8	DecoderUnsupportedCodec
arg	30:37	30:42	9	p_dec
water	30:37	0:0	10	p_dec
arg	30:44	30:59	9	fcc[i_channel]
water	30:44	0:0	10	fcc
op	30:47	0:0	10	[
water	30:48	0:0	10	i_channel
op	30:57	0:0	10	]
water	30:60	0:0	8	;
call	31:12	31:36	8	input_DecoderDelete
arg	31:32	31:36	9	p_cc
water	31:32	0:0	10	p_cc
water	31:37	0:0	8	;
return	32:12	32:31	8	VLC_EGENERIC
water	32:19	0:0	9	VLC_EGENERIC
water	33:8	0:0	8	}
water	34:8	0:0	4	p_cc
op	34:12	0:0	4	->
water	34:14	0:0	4	p_owner
op	34:21	0:0	4	->
water	34:23	0:0	4	p_clock
op	34:31	0:0	4	=
water	34:33	0:0	4	p_owner
op	34:40	0:0	4	->
water	34:42	0:0	4	p_clock
water	34:49	0:0	4	;
call	35:8	35:39	4	vlc_mutex_lock
arg	35:24	35:39	5	&p_owner->lock
op	35:24	0:0	6	&
water	35:25	0:0	6	p_owner
op	35:32	0:0	6	->
water	35:34	0:0	6	lock
water	35:40	0:0	4	;
water	36:8	0:0	4	p_owner
op	36:15	0:0	4	->
water	36:17	0:0	4	cc
op	36:19	0:0	4	.
water	36:20	0:0	4	pp_decoder
op	36:30	0:0	4	[
water	36:31	0:0	4	i_channel
op	36:40	0:0	4	]
op	36:42	0:0	4	=
water	36:44	0:0	4	p_cc
water	36:48	0:0	4	;
call	37:8	37:41	4	vlc_mutex_unlock
arg	37:26	37:41	5	&p_owner->lock
op	37:26	0:0	6	&
water	37:27	0:0	6	p_owner
op	37:34	0:0	6	->
water	37:36	0:0	6	lock
water	37:42	0:0	4	;
water	38:4	0:0	4	}
else	39:4	48:4	2
stmts	40:4	48:4	3	
water	40:4	0:0	4	{
decl	41:8	41:23	4	decoder_t	*p_cc
call	42:8	42:39	4	vlc_mutex_lock
arg	42:24	42:39	5	&p_owner->lock
op	42:24	0:0	6	&
water	42:25	0:0	6	p_owner
op	42:32	0:0	6	->
water	42:34	0:0	6	lock
water	42:40	0:0	4	;
water	43:8	0:0	4	p_cc
op	43:13	0:0	4	=
water	43:15	0:0	4	p_owner
op	43:22	0:0	4	->
water	43:24	0:0	4	cc
op	43:26	0:0	4	.
water	43:27	0:0	4	pp_decoder
op	43:37	0:0	4	[
water	43:38	0:0	4	i_channel
op	43:47	0:0	4	]
water	43:48	0:0	4	;
water	44:8	0:0	4	p_owner
op	44:15	0:0	4	->
water	44:17	0:0	4	cc
op	44:19	0:0	4	.
water	44:20	0:0	4	pp_decoder
op	44:30	0:0	4	[
water	44:31	0:0	4	i_channel
op	44:40	0:0	4	]
op	44:42	0:0	4	=
water	44:44	0:0	4	NULL
water	44:48	0:0	4	;
call	45:8	45:41	4	vlc_mutex_unlock
arg	45:26	45:41	5	&p_owner->lock
op	45:26	0:0	6	&
water	45:27	0:0	6	p_owner
op	45:34	0:0	6	->
water	45:36	0:0	6	lock
water	45:42	0:0	4	;
if	46:8	47:37	4	(p_cc)
cond	46:12	46:12	5	p_cc
water	46:12	0:0	6	p_cc
stmts	47:12	47:37	5	
call	47:12	47:36	6	input_DecoderDelete
arg	47:32	47:36	7	p_cc
water	47:32	0:0	8	p_cc
water	47:37	0:0	6	;
water	48:4	0:0	4	}
return	49:4	49:22	2	VLC_SUCCESS
water	49:11	0:0	3	VLC_SUCCESS
