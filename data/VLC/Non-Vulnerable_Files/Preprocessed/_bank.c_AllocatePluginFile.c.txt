func	2:0	51:0	0	static int	AllocatePluginFile
params	2:30	0:0	1	
param	2:31	2:50	2	module_bank_t *	bank
param	2:52	2:71	2	const char *	abspath
param	3:31	3:50	2	const char *	relpath
param	3:52	3:73	2	const struct stat *	st
stmnts	0:0	50:13	1	
decl	5:4	5:27	2	module_t	*module
op	5:21	0:0	2	=
water	5:23	0:0	2	NULL
if	7:4	20:4	2	(bank -> mode == CACHE_USE)
cond	7:8	7:22	3	bank -> mode == CACHE_USE
water	7:8	0:0	4	bank
op	7:12	0:0	4	->
water	7:14	0:0	4	mode
op	7:19	0:0	4	==
water	7:22	0:0	4	CACHE_USE
stmts	8:4	20:4	3	
water	8:4	0:0	4	{
water	9:8	0:0	4	module
op	9:15	0:0	4	=
call	9:17	10:39	4	CacheFind
arg	9:28	9:46	5	bank->loaded_cache
water	9:28	0:0	6	bank
op	9:32	0:0	6	->
water	9:34	0:0	6	loaded_cache
arg	9:48	9:68	5	bank->i_loaded_cache
water	9:48	0:0	6	bank
op	9:52	0:0	6	->
water	9:54	0:0	6	i_loaded_cache
arg	10:28	10:35	5	relpath
water	10:28	0:0	6	relpath
arg	10:37	10:39	5	st
water	10:37	0:0	6	st
water	10:40	0:0	4	;
if	11:8	19:8	4	(module != NULL)
cond	11:12	11:22	5	module != NULL
water	11:12	0:0	6	module
op	11:19	0:0	6	!=
water	11:22	0:0	6	NULL
stmts	12:8	19:8	5	
water	12:8	0:0	6	{
water	13:12	0:0	6	module
op	13:18	0:0	6	->
water	13:20	0:0	6	psz_filename
op	13:33	0:0	6	=
call	13:35	13:50	6	strdup
arg	13:43	13:50	7	abspath
water	13:43	0:0	8	abspath
water	13:51	0:0	6	;
if	14:12	18:12	6	(unlikely (module -> psz_filename == NULL ))
cond	14:16	14:53	7	unlikely (module -> psz_filename == NULL )
call	14:16	14:53	8	unlikely
arg	14:25	14:53	9	module->psz_filename==NULL
water	14:25	0:0	10	module
op	14:31	0:0	10	->
water	14:33	0:0	10	psz_filename
op	14:46	0:0	10	==
water	14:49	0:0	10	NULL
stmts	15:12	18:12	7	
water	15:12	0:0	8	{
call	16:16	16:42	8	vlc_module_destroy
arg	16:36	16:42	9	module
water	16:36	0:0	10	module
water	16:43	0:0	8	;
water	17:16	0:0	8	module
op	17:23	0:0	8	=
water	17:25	0:0	8	NULL
water	17:29	0:0	8	;
water	18:12	0:0	8	}
water	19:8	0:0	6	}
water	20:4	0:0	4	}
if	21:4	22:62	2	(module == NULL)
cond	21:8	21:18	3	module == NULL
water	21:8	0:0	4	module
op	21:15	0:0	4	==
water	21:18	0:0	4	NULL
stmts	22:8	22:62	3	
water	22:8	0:0	4	module
op	22:15	0:0	4	=
call	22:17	22:61	4	module_InitDynamic
arg	22:37	22:46	5	bank->obj
water	22:37	0:0	6	bank
op	22:41	0:0	6	->
water	22:43	0:0	6	obj
arg	22:48	22:55	5	abspath
water	22:48	0:0	6	abspath
arg	22:57	22:61	5	true
water	22:57	0:0	6	true
water	22:62	0:0	4	;
if	23:4	24:17	2	(module == NULL)
cond	23:8	23:18	3	module == NULL
water	23:8	0:0	4	module
op	23:15	0:0	4	==
water	23:18	0:0	4	NULL
stmts	24:8	24:17	3	
return	24:8	24:17	4	-1
op	24:15	0:0	5	-
water	24:16	0:0	5	1
call	26:4	26:32	2	assert
arg	26:12	26:32	3	module->next==NULL
water	26:12	0:0	4	module
op	26:18	0:0	4	->
water	26:20	0:0	4	next
op	26:25	0:0	4	==
water	26:28	0:0	4	NULL
water	26:33	0:0	2	;
if	28:4	32:4	2	(module -> b_loaded && module -> b_unloadable)
cond	28:8	28:36	3	module -> b_loaded && module -> b_unloadable
water	28:8	0:0	4	module
op	28:14	0:0	4	->
water	28:16	0:0	4	b_loaded
op	28:25	0:0	4	&&
water	28:28	0:0	4	module
op	28:34	0:0	4	->
water	28:36	0:0	4	b_unloadable
stmts	29:4	32:4	3	
water	29:4	0:0	4	{
call	30:8	30:37	4	module_Unload
arg	30:23	30:37	5	module->handle
water	30:23	0:0	6	module
op	30:29	0:0	6	->
water	30:31	0:0	6	handle
water	30:38	0:0	4	;
water	31:8	0:0	4	module
op	31:14	0:0	4	->
water	31:16	0:0	4	b_loaded
op	31:25	0:0	4	=
water	31:27	0:0	4	false
water	31:32	0:0	4	;
water	32:4	0:0	4	}
for	35:4	45:9	2	( size_t n = module -> confsize ,i = 0 ;i < n;i ++)
forinit	0:0	35:43	3	 size_t n = module -> confsize ,i = 0 ;
decl	35:9	35:43	4	size_t	n
op	35:18	0:0	4	=
water	35:20	0:0	4	module
op	35:26	0:0	4	->
water	35:28	0:0	4	confsize
water	35:36	0:0	4	,
decl	35:9	35:43	4	size_t	i
op	35:40	0:0	4	=
water	35:42	0:0	4	0
cond	35:45	35:49	3	i < n
water	35:45	0:0	4	i
op	35:47	0:0	4	<
water	35:49	0:0	4	n
forexpr	35:52	35:53	3	i ++
water	35:52	0:0	4	i
op	35:53	0:0	4	++
stmts	36:9	45:9	3	
if	36:9	45:9	4	(module -> p_config [ i ] . list_count == 0 && ( module -> p_config [ i ] . list . psz_cb != NULL || module -> p_config [ i ] . list . i_cb != NULL ))
cond	36:13	37:94	5	module -> p_config [ i ] . list_count == 0 && ( module -> p_config [ i ] . list . psz_cb != NULL || module -> p_config [ i ] . list . i_cb != NULL )
water	36:13	0:0	6	module
op	36:19	0:0	6	->
water	36:21	0:0	6	p_config
op	36:29	0:0	6	[
water	36:30	0:0	6	i
op	36:31	0:0	6	]
op	36:32	0:0	6	.
water	36:33	0:0	6	list_count
op	36:44	0:0	6	==
water	36:47	0:0	6	0
op	37:10	0:0	6	&&
water	37:13	0:0	6	(
water	37:14	0:0	6	module
op	37:20	0:0	6	->
water	37:22	0:0	6	p_config
op	37:30	0:0	6	[
water	37:31	0:0	6	i
op	37:32	0:0	6	]
op	37:33	0:0	6	.
water	37:34	0:0	6	list
op	37:38	0:0	6	.
water	37:39	0:0	6	psz_cb
op	37:46	0:0	6	!=
water	37:49	0:0	6	NULL
op	37:54	0:0	6	||
water	37:57	0:0	6	module
op	37:63	0:0	6	->
water	37:65	0:0	6	p_config
op	37:73	0:0	6	[
water	37:74	0:0	6	i
op	37:75	0:0	6	]
op	37:76	0:0	6	.
water	37:77	0:0	6	list
op	37:81	0:0	6	.
water	37:82	0:0	6	i_cb
op	37:87	0:0	6	!=
water	37:90	0:0	6	NULL
water	37:94	0:0	6	)
stmts	38:9	45:9	5	
water	38:9	0:0	6	{
call	40:13	40:39	6	vlc_module_destroy
arg	40:33	40:39	7	module
water	40:33	0:0	8	module
water	40:40	0:0	6	;
water	41:13	0:0	6	module
op	41:20	0:0	6	=
call	41:22	41:67	6	module_InitDynamic
arg	41:42	41:51	7	bank->obj
water	41:42	0:0	8	bank
op	41:46	0:0	8	->
water	41:48	0:0	8	obj
arg	41:53	41:60	7	abspath
water	41:53	0:0	8	abspath
arg	41:62	41:67	7	false
water	41:62	0:0	8	false
water	41:68	0:0	6	;
if	42:13	43:26	6	(unlikely (module == NULL ))
cond	42:17	42:40	7	unlikely (module == NULL )
call	42:17	42:40	8	unlikely
arg	42:26	42:40	9	module==NULL
water	42:26	0:0	10	module
op	42:33	0:0	10	==
water	42:36	0:0	10	NULL
stmts	43:17	43:26	7	
return	43:17	43:26	8	-1
op	43:24	0:0	9	-
water	43:25	0:0	9	1
break	44:13	44:18	6	
water	45:9	0:0	6	}
call	46:4	46:28	2	module_StoreBank
arg	46:22	46:28	3	module
water	46:22	0:0	4	module
water	46:29	0:0	2	;
if	47:4	48:68	2	(bank -> mode != CACHE_IGNORE)
cond	47:8	47:22	3	bank -> mode != CACHE_IGNORE
water	47:8	0:0	4	bank
op	47:12	0:0	4	->
water	47:14	0:0	4	mode
op	47:19	0:0	4	!=
water	47:22	0:0	4	CACHE_IGNORE
stmts	48:8	48:68	3	
call	48:8	48:67	4	CacheAdd
arg	48:18	48:30	5	&bank->cache
op	48:18	0:0	6	&
water	48:19	0:0	6	bank
op	48:23	0:0	6	->
water	48:25	0:0	6	cache
arg	48:32	48:46	5	&bank->i_cache
op	48:32	0:0	6	&
water	48:33	0:0	6	bank
op	48:37	0:0	6	->
water	48:39	0:0	6	i_cache
arg	48:48	48:55	5	relpath
water	48:48	0:0	6	relpath
arg	48:57	48:59	5	st
water	48:57	0:0	6	st
arg	48:61	48:67	5	module
water	48:61	0:0	6	module
water	48:68	0:0	4	;
return	50:4	50:13	2	0
water	50:12	0:0	3	0
