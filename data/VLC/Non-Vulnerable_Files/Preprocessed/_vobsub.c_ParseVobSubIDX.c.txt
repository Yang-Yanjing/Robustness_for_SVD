func	2:0	155:0	0	static int	ParseVobSubIDX
params	2:25	0:0	1	
param	2:27	2:44	2	demux_t *	p_demux
stmnts	0:0	154:15	1	
decl	4:4	4:39	2	demux_sys_t	*p_sys
op	4:23	0:0	2	=
water	4:25	0:0	2	p_demux
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:34	2	text_t	*txt
op	5:21	0:0	2	=
op	5:23	0:0	2	&
water	5:24	0:0	2	p_sys
op	5:29	0:0	2	->
water	5:31	0:0	2	txt
decl	6:4	6:21	2	char	*line
decl	7:4	7:37	2	vobsub_track_t	*current_tk
op	7:31	0:0	2	=
water	7:33	0:0	2	NULL
for	8:4	153:4	2	(;;)
forinit	8:9	8:9	3	;
water	8:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	9:4	153:4	3	
water	9:4	0:0	4	{
if	10:8	13:8	4	(( line =TextGetLine (txt ) ) == NULL)
cond	10:12	10:45	5	( line =TextGetLine (txt ) ) == NULL
water	10:12	0:0	6	(
water	10:14	0:0	6	line
op	10:19	0:0	6	=
call	10:21	10:38	6	TextGetLine
arg	10:34	10:38	7	txt
water	10:34	0:0	8	txt
water	10:40	0:0	6	)
op	10:42	0:0	6	==
water	10:45	0:0	6	NULL
stmts	11:8	13:8	5	
water	11:8	0:0	6	{
return	12:12	12:34	6	(VLC_EGENERIC)
water	12:18	0:0	7	(
water	12:20	0:0	7	VLC_EGENERIC
water	12:33	0:0	7	)
water	13:8	0:0	6	}
if	14:8	17:8	4	(* line == 0 || * line == '\r' || * line == '\n' || * line == '#')
cond	14:12	14:69	5	* line == 0 || * line == '\r' || * line == '\n' || * line == '#'
op	14:12	0:0	6	*
water	14:13	0:0	6	line
op	14:18	0:0	6	==
water	14:21	0:0	6	0
op	14:23	0:0	6	||
op	14:26	0:0	6	*
water	14:27	0:0	6	line
op	14:32	0:0	6	==
water	14:35	0:0	6	'\r'
op	14:40	0:0	6	||
op	14:43	0:0	6	*
water	14:44	0:0	6	line
op	14:49	0:0	6	==
water	14:52	0:0	6	'\n'
op	14:57	0:0	6	||
op	14:60	0:0	6	*
water	14:61	0:0	6	line
op	14:66	0:0	6	==
water	14:69	0:0	6	'#'
stmts	15:8	17:8	5	
water	15:8	0:0	6	{
continue	16:12	16:20	6	
water	17:8	0:0	6	}
else	18:8	30:8	4
stmts	18:13	30:8	5	
if	18:13	30:8	6	(!strncmp ("size:" ,line ,5 ))
cond	18:17	18:44	7	!strncmp ("size:" ,line ,5 )
op	18:17	0:0	8	!
call	18:18	18:44	8	strncmp
arg	18:27	18:34	9	"size:"
water	18:27	0:0	10	"size:"
arg	18:36	18:40	9	line
water	18:36	0:0	10	line
arg	18:42	18:44	9	5
water	18:42	0:0	10	5
stmts	19:8	30:8	7	
water	19:8	0:0	8	{
if	21:12	25:12	8	(vobsub_size_parse (line ,& p_sys -> i_original_frame_width ,& p_sys -> i_original_frame_height ) == VLC_SUCCESS)
cond	21:16	22:72	9	vobsub_size_parse (line ,& p_sys -> i_original_frame_width ,& p_sys -> i_original_frame_height ) == VLC_SUCCESS
call	21:16	22:67	10	vobsub_size_parse
arg	21:35	21:39	11	line
water	21:35	0:0	12	line
arg	21:41	21:71	11	&p_sys->i_original_frame_width
op	21:41	0:0	12	&
water	21:42	0:0	12	p_sys
op	21:47	0:0	12	->
water	21:49	0:0	12	i_original_frame_width
arg	22:35	22:67	11	&p_sys->i_original_frame_height
op	22:35	0:0	12	&
water	22:36	0:0	12	p_sys
op	22:41	0:0	12	->
water	22:43	0:0	12	i_original_frame_height
op	22:69	0:0	10	==
water	22:72	0:0	10	VLC_SUCCESS
stmts	23:12	25:12	9	
water	23:12	0:0	10	{
call	24:16	24:126	10	msg_Dbg
arg	24:25	24:32	11	p_demux
water	24:25	0:0	12	p_demux
arg	24:34	24:62	11	"original frame size: %dx%d"
water	24:34	0:0	12	"original frame size: %dx%d"
arg	24:64	24:93	11	p_sys->i_original_frame_width
water	24:64	0:0	12	p_sys
op	24:69	0:0	12	->
water	24:71	0:0	12	i_original_frame_width
arg	24:95	24:126	11	p_sys->i_original_frame_height
water	24:95	0:0	12	p_sys
op	24:100	0:0	12	->
water	24:102	0:0	12	i_original_frame_height
water	24:127	0:0	10	;
water	25:12	0:0	10	}
else	26:12	29:12	8
stmts	27:12	29:12	9	
water	27:12	0:0	10	{
call	28:16	28:72	10	msg_Warn
arg	28:26	28:33	11	p_demux
water	28:26	0:0	12	p_demux
arg	28:35	28:72	11	"reading original frame size failed"
water	28:35	0:0	12	"reading original frame size failed"
water	28:73	0:0	10	;
water	29:12	0:0	10	}
water	30:8	0:0	8	}
else	31:8	42:8	4
stmts	31:13	42:8	5	
if	31:13	42:8	6	(!strncmp ("palette:" ,line ,8 ))
cond	31:17	31:47	7	!strncmp ("palette:" ,line ,8 )
op	31:17	0:0	8	!
call	31:18	31:47	8	strncmp
arg	31:27	31:37	9	"palette:"
water	31:27	0:0	10	"palette:"
arg	31:39	31:43	9	line
water	31:39	0:0	10	line
arg	31:45	31:47	9	8
water	31:45	0:0	10	8
stmts	32:8	42:8	7	
water	32:8	0:0	8	{
if	33:12	37:12	8	(vobsub_palette_parse (line ,p_sys -> palette ) == VLC_SUCCESS)
cond	33:16	33:64	9	vobsub_palette_parse (line ,p_sys -> palette ) == VLC_SUCCESS
call	33:16	33:59	10	vobsub_palette_parse
arg	33:38	33:42	11	line
water	33:38	0:0	12	line
arg	33:44	33:59	11	p_sys->palette
water	33:44	0:0	12	p_sys
op	33:49	0:0	12	->
water	33:51	0:0	12	palette
op	33:61	0:0	10	==
water	33:64	0:0	10	VLC_SUCCESS
stmts	34:12	37:12	9	
water	34:12	0:0	10	{
water	35:16	0:0	10	p_sys
op	35:21	0:0	10	->
water	35:23	0:0	10	b_palette
op	35:33	0:0	10	=
water	35:35	0:0	10	true
water	35:39	0:0	10	;
call	36:16	36:56	10	msg_Dbg
arg	36:25	36:32	11	p_demux
water	36:25	0:0	12	p_demux
arg	36:34	36:56	11	"vobsub palette read"
water	36:34	0:0	12	"vobsub palette read"
water	36:57	0:0	10	;
water	37:12	0:0	10	}
else	38:12	41:12	8
stmts	39:12	41:12	9	
water	39:12	0:0	10	{
call	40:16	40:69	10	msg_Warn
arg	40:26	40:33	11	p_demux
water	40:26	0:0	12	p_demux
arg	40:35	40:69	11	"reading original palette failed"
water	40:35	0:0	12	"reading original palette failed"
water	40:70	0:0	10	;
water	41:12	0:0	10	}
water	42:8	0:0	8	}
else	43:8	82:8	4
stmts	43:13	82:8	5	
if	43:13	82:8	6	(!strncmp ("id:" ,line ,3 ))
cond	43:17	43:42	7	!strncmp ("id:" ,line ,3 )
op	43:17	0:0	8	!
call	43:18	43:42	8	strncmp
arg	43:27	43:32	9	"id:"
water	43:27	0:0	10	"id:"
arg	43:34	43:38	9	line
water	43:34	0:0	10	line
arg	43:40	43:42	9	3
water	43:40	0:0	10	3
stmts	44:8	82:8	7	
water	44:8	0:0	8	{
decl	45:12	45:29	8	char	language[33]
decl	47:12	47:26	8	int	i_track_id
decl	48:12	48:27	8	es_format_t	fmt
if	50:12	59:12	8	(sscanf (line ,"id: %32[^ ,], index: %d" ,language ,& i_track_id ) != 2)
cond	50:16	51:51	9	sscanf (line ,"id: %32[^ ,], index: %d" ,language ,& i_track_id ) != 2
call	50:16	51:46	10	sscanf
arg	50:24	50:28	11	line
water	50:24	0:0	12	line
arg	50:30	50:55	11	"id: %32[^ ,], index: %d"
water	50:30	0:0	12	"id: %32[^ ,], index: %d"
arg	51:24	51:32	11	language
water	51:24	0:0	12	language
arg	51:34	51:46	11	&i_track_id
op	51:34	0:0	12	&
water	51:35	0:0	12	i_track_id
op	51:48	0:0	10	!=
water	51:51	0:0	10	2
stmts	52:12	59:12	9	
water	52:12	0:0	10	{
if	53:16	57:16	10	(sscanf (line ,"id: , index: %d" ,& i_track_id ) != 1)
cond	53:20	53:70	11	sscanf (line ,"id: , index: %d" ,& i_track_id ) != 1
call	53:20	53:65	12	sscanf
arg	53:28	53:32	13	line
water	53:28	0:0	14	line
arg	53:34	53:51	13	"id: , index: %d"
water	53:34	0:0	14	"id: , index: %d"
arg	53:53	53:65	13	&i_track_id
op	53:53	0:0	14	&
water	53:54	0:0	14	i_track_id
op	53:67	0:0	12	!=
water	53:70	0:0	12	1
stmts	54:16	57:16	11	
water	54:16	0:0	12	{
call	55:20	55:66	12	msg_Warn
arg	55:30	55:37	13	p_demux
water	55:30	0:0	14	p_demux
arg	55:39	55:66	13	"reading new track failed"
water	55:39	0:0	14	"reading new track failed"
water	55:67	0:0	12	;
continue	56:20	56:28	12	
water	57:16	0:0	12	}
water	58:16	0:0	10	language
op	58:24	0:0	10	[
water	58:25	0:0	10	0
op	58:26	0:0	10	]
op	58:28	0:0	10	=
water	58:30	0:0	10	'\0'
water	58:34	0:0	10	;
water	59:12	0:0	10	}
water	60:12	0:0	8	p_sys
op	60:17	0:0	8	->
water	60:19	0:0	8	i_tracks
op	60:27	0:0	8	++
water	60:29	0:0	8	;
water	61:12	0:0	8	p_sys
op	61:17	0:0	8	->
water	61:19	0:0	8	track
op	61:25	0:0	8	=
call	61:27	62:70	8	xrealloc
arg	61:37	61:49	9	p_sys->track
water	61:37	0:0	10	p_sys
op	61:42	0:0	10	->
water	61:44	0:0	10	track
arg	62:20	62:70	9	sizeof(vobsub_track_t)*(p_sys->i_tracks+1)
op	62:20	0:0	10	sizeof
water	62:26	0:0	10	(
water	62:28	0:0	10	vobsub_track_t
water	62:43	0:0	10	)
op	62:45	0:0	10	*
water	62:47	0:0	10	(
water	62:48	0:0	10	p_sys
op	62:53	0:0	10	->
water	62:55	0:0	10	i_tracks
op	62:64	0:0	10	+
water	62:66	0:0	10	1
water	62:68	0:0	10	)
water	62:71	0:0	8	;
water	64:12	0:0	8	current_tk
op	64:23	0:0	8	=
op	64:25	0:0	8	&
water	64:26	0:0	8	p_sys
op	64:31	0:0	8	->
water	64:33	0:0	8	track
op	64:38	0:0	8	[
water	64:39	0:0	8	p_sys
op	64:44	0:0	8	->
water	64:46	0:0	8	i_tracks
op	64:55	0:0	8	-
water	64:57	0:0	8	1
op	64:58	0:0	8	]
water	64:59	0:0	8	;
call	65:12	65:60	8	memset
arg	65:20	65:30	9	current_tk
water	65:20	0:0	10	current_tk
arg	65:32	65:33	9	0
water	65:32	0:0	10	0
arg	65:35	65:60	9	sizeof(vobsub_track_t)
op	65:35	0:0	10	sizeof
water	65:41	0:0	10	(
water	65:43	0:0	10	vobsub_track_t
water	65:58	0:0	10	)
water	65:61	0:0	8	;
water	66:12	0:0	8	current_tk
op	66:22	0:0	8	->
water	66:24	0:0	8	i_current_subtitle
op	66:43	0:0	8	=
water	66:45	0:0	8	0
water	66:46	0:0	8	;
water	67:12	0:0	8	current_tk
op	67:22	0:0	8	->
water	67:24	0:0	8	i_subtitles
op	67:36	0:0	8	=
water	67:38	0:0	8	0
water	67:39	0:0	8	;
water	68:12	0:0	8	current_tk
op	68:22	0:0	8	->
water	68:24	0:0	8	p_subtitles
op	68:36	0:0	8	=
call	68:38	68:68	8	xmalloc
arg	68:47	68:68	9	sizeof(subtitle_t)
op	68:47	0:0	10	sizeof
water	68:53	0:0	10	(
water	68:55	0:0	10	subtitle_t
water	68:66	0:0	10	)
water	68:69	0:0	8	;
water	69:12	0:0	8	current_tk
op	69:22	0:0	8	->
water	69:24	0:0	8	i_track_id
op	69:35	0:0	8	=
water	69:37	0:0	8	i_track_id
water	69:47	0:0	8	;
water	70:12	0:0	8	current_tk
op	70:22	0:0	8	->
water	70:24	0:0	8	i_delay
op	70:32	0:0	8	=
water	70:34	0:0	8	(
water	70:35	0:0	8	int64_t
water	70:42	0:0	8	)
water	70:43	0:0	8	0
water	70:44	0:0	8	;
call	71:12	71:56	8	es_format_Init
arg	71:28	71:32	9	&fmt
op	71:28	0:0	10	&
water	71:29	0:0	10	fmt
arg	71:34	71:40	9	SPU_ES
water	71:34	0:0	10	SPU_ES
arg	71:42	71:56	9	VLC_CODEC_SPU
water	71:42	0:0	10	VLC_CODEC_SPU
water	71:57	0:0	8	;
water	72:12	0:0	8	fmt
op	72:15	0:0	8	.
water	72:16	0:0	8	subs
op	72:20	0:0	8	.
water	72:21	0:0	8	spu
op	72:24	0:0	8	.
water	72:25	0:0	8	i_original_frame_width
op	72:48	0:0	8	=
water	72:50	0:0	8	p_sys
op	72:55	0:0	8	->
water	72:57	0:0	8	i_original_frame_width
water	72:79	0:0	8	;
water	73:12	0:0	8	fmt
op	73:15	0:0	8	.
water	73:16	0:0	8	subs
op	73:20	0:0	8	.
water	73:21	0:0	8	spu
op	73:24	0:0	8	.
water	73:25	0:0	8	i_original_frame_height
op	73:49	0:0	8	=
water	73:51	0:0	8	p_sys
op	73:56	0:0	8	->
water	73:58	0:0	8	i_original_frame_height
water	73:81	0:0	8	;
water	74:12	0:0	8	fmt
op	74:15	0:0	8	.
water	74:16	0:0	8	psz_language
op	74:29	0:0	8	=
water	74:31	0:0	8	language
water	74:39	0:0	8	;
if	75:12	79:12	8	(p_sys -> b_palette)
cond	75:16	75:23	9	p_sys -> b_palette
water	75:16	0:0	10	p_sys
op	75:21	0:0	10	->
water	75:23	0:0	10	b_palette
stmts	76:12	79:12	9	
water	76:12	0:0	10	{
water	77:16	0:0	10	fmt
op	77:19	0:0	10	.
water	77:20	0:0	10	subs
op	77:24	0:0	10	.
water	77:25	0:0	10	spu
op	77:28	0:0	10	.
water	77:29	0:0	10	palette
op	77:36	0:0	10	[
water	77:37	0:0	10	0
op	77:38	0:0	10	]
op	77:40	0:0	10	=
water	77:42	0:0	10	0
water	77:43	0:0	10	xBeef
water	77:48	0:0	10	;
call	78:16	78:90	10	memcpy
arg	78:24	78:48	11	&fmt.subs.spu.palette[1]
op	78:24	0:0	12	&
water	78:25	0:0	12	fmt
op	78:28	0:0	12	.
water	78:29	0:0	12	subs
op	78:33	0:0	12	.
water	78:34	0:0	12	spu
op	78:37	0:0	12	.
water	78:38	0:0	12	palette
op	78:45	0:0	12	[
water	78:46	0:0	12	1
op	78:47	0:0	12	]
arg	78:50	78:64	11	p_sys->palette
water	78:50	0:0	12	p_sys
op	78:55	0:0	12	->
water	78:57	0:0	12	palette
arg	78:66	78:90	11	16*sizeof(uint32_t)
water	78:66	0:0	12	16
op	78:69	0:0	12	*
op	78:71	0:0	12	sizeof
water	78:77	0:0	12	(
water	78:79	0:0	12	uint32_t
water	78:88	0:0	12	)
water	78:91	0:0	10	;
water	79:12	0:0	10	}
water	80:12	0:0	8	current_tk
op	80:22	0:0	8	->
water	80:24	0:0	8	p_es
op	80:29	0:0	8	=
call	80:31	80:62	8	es_out_Add
arg	80:43	80:55	9	p_demux->out
water	80:43	0:0	10	p_demux
op	80:50	0:0	10	->
water	80:52	0:0	10	out
arg	80:57	80:62	9	&fmt
op	80:57	0:0	10	&
water	80:58	0:0	10	fmt
water	80:63	0:0	8	;
call	81:12	81:58	8	msg_Dbg
arg	81:21	81:28	9	p_demux
water	81:21	0:0	10	p_demux
arg	81:30	81:58	9	"new vobsub track detected"
water	81:30	0:0	10	"new vobsub track detected"
water	81:59	0:0	8	;
water	82:8	0:0	8	}
else	83:8	121:8	4
stmts	83:13	121:8	5	
if	83:13	121:8	6	(!strncmp (line ,"timestamp:" ,10 ))
cond	83:17	83:50	7	!strncmp (line ,"timestamp:" ,10 )
op	83:17	0:0	8	!
call	83:18	83:50	8	strncmp
arg	83:27	83:31	9	line
water	83:27	0:0	10	line
arg	83:33	83:45	9	"timestamp:"
water	83:33	0:0	10	"timestamp:"
arg	83:47	83:50	9	10
water	83:47	0:0	10	10
stmts	84:8	121:8	7	
water	84:8	0:0	8	{
decl	89:12	89:43	8	int	h
water	89:17	0:0	8	,
decl	89:12	89:43	8	int	m
water	89:20	0:0	8	,
decl	89:12	89:43	8	int	s
water	89:23	0:0	8	,
decl	89:12	89:43	8	int	ms
water	89:27	0:0	8	,
decl	89:12	89:43	8	int	count
water	89:34	0:0	8	,
decl	89:12	89:43	8	int	loc
op	89:40	0:0	8	=
water	89:42	0:0	8	0
decl	90:12	90:26	8	int	i_sign
op	90:23	0:0	8	=
water	90:25	0:0	8	1
decl	91:12	91:43	8	int64_t	i_start
water	91:27	0:0	8	,
decl	91:12	91:43	8	int64_t	i_location
op	91:40	0:0	8	=
water	91:42	0:0	8	0
if	92:12	116:12	8	(p_sys -> i_tracks > 0 &&sscanf (line ,"timestamp: %d%n:%d:%d:%d, filepos: %x" ,& h ,& count ,& m ,& s ,& ms ,& loc ) >= 5)
cond	92:16	94:59	9	p_sys -> i_tracks > 0 &&sscanf (line ,"timestamp: %d%n:%d:%d:%d, filepos: %x" ,& h ,& count ,& m ,& s ,& ms ,& loc ) >= 5
water	92:16	0:0	10	p_sys
op	92:21	0:0	10	->
water	92:23	0:0	10	i_tracks
op	92:32	0:0	10	>
water	92:34	0:0	10	0
op	92:36	0:0	10	&&
call	93:16	94:54	10	sscanf
arg	93:24	93:28	11	line
water	93:24	0:0	12	line
arg	93:30	93:69	11	"timestamp: %d%n:%d:%d:%d, filepos: %x"
water	93:30	0:0	12	"timestamp: %d%n:%d:%d:%d, filepos: %x"
arg	94:24	94:26	11	&h
op	94:24	0:0	12	&
water	94:25	0:0	12	h
arg	94:28	94:34	11	&count
op	94:28	0:0	12	&
water	94:29	0:0	12	count
arg	94:36	94:38	11	&m
op	94:36	0:0	12	&
water	94:37	0:0	12	m
arg	94:40	94:42	11	&s
op	94:40	0:0	12	&
water	94:41	0:0	12	s
arg	94:44	94:47	11	&ms
op	94:44	0:0	12	&
water	94:45	0:0	12	ms
arg	94:49	94:54	11	&loc
op	94:49	0:0	12	&
water	94:50	0:0	12	loc
op	94:56	0:0	10	>=
water	94:59	0:0	10	5
stmts	95:12	116:12	9	
water	95:12	0:0	10	{
decl	96:16	96:79	10	vobsub_track_t	*current_tk
op	96:43	0:0	10	=
op	96:45	0:0	10	&
water	96:46	0:0	10	p_sys
op	96:51	0:0	10	->
water	96:53	0:0	10	track
op	96:58	0:0	10	[
water	96:59	0:0	10	p_sys
op	96:64	0:0	10	->
water	96:66	0:0	10	i_tracks
op	96:75	0:0	10	-
water	96:77	0:0	10	1
op	96:78	0:0	10	]
decl	97:16	97:39	10	subtitle_t	*current_sub
if	98:16	102:16	10	(line [ count - 3 ] == '-')
cond	98:20	98:37	11	line [ count - 3 ] == '-'
water	98:20	0:0	12	line
op	98:24	0:0	12	[
water	98:25	0:0	12	count
op	98:30	0:0	12	-
water	98:31	0:0	12	3
op	98:32	0:0	12	]
op	98:34	0:0	12	==
water	98:37	0:0	12	'-'
stmts	99:16	102:16	11	
water	99:16	0:0	12	{
water	100:20	0:0	12	i_sign
op	100:27	0:0	12	=
op	100:29	0:0	12	-
water	100:30	0:0	12	1
water	100:31	0:0	12	;
water	101:20	0:0	12	h
op	101:22	0:0	12	=
op	101:24	0:0	12	-
water	101:25	0:0	12	h
water	101:26	0:0	12	;
water	102:16	0:0	12	}
water	103:16	0:0	10	i_start
op	103:24	0:0	10	=
call	103:26	106:31	10	(int64_t)
arg	103:38	106:31	11	h*3600*1000+m*60*1000+s*1000+ms
water	103:38	0:0	12	h
op	103:40	0:0	12	*
water	103:42	0:0	12	3600
op	103:46	0:0	12	*
water	103:47	0:0	12	1000
op	103:52	0:0	12	+
water	104:28	0:0	12	m
op	104:30	0:0	12	*
water	104:32	0:0	12	60
op	104:34	0:0	12	*
water	104:35	0:0	12	1000
op	104:40	0:0	12	+
water	105:28	0:0	12	s
op	105:30	0:0	12	*
water	105:32	0:0	12	1000
op	105:37	0:0	12	+
water	106:28	0:0	12	ms
op	106:33	0:0	10	*
water	106:35	0:0	10	1000
water	106:39	0:0	10	;
water	107:16	0:0	10	i_location
op	107:27	0:0	10	=
water	107:29	0:0	10	loc
water	107:32	0:0	10	;
water	108:16	0:0	10	current_tk
op	108:26	0:0	10	->
water	108:28	0:0	10	i_subtitles
op	108:39	0:0	10	++
water	108:41	0:0	10	;
water	109:16	0:0	10	current_tk
op	109:26	0:0	10	->
water	109:28	0:0	10	p_subtitles
op	109:40	0:0	10	=
call	110:20	111:76	10	xrealloc
arg	110:30	110:53	11	current_tk->p_subtitles
water	110:30	0:0	12	current_tk
op	110:40	0:0	12	->
water	110:42	0:0	12	p_subtitles
arg	111:22	111:76	11	sizeof(subtitle_t)*(current_tk->i_subtitles+1)
op	111:22	0:0	12	sizeof
water	111:28	0:0	12	(
water	111:30	0:0	12	subtitle_t
water	111:41	0:0	12	)
op	111:43	0:0	12	*
water	111:45	0:0	12	(
water	111:46	0:0	12	current_tk
op	111:56	0:0	12	->
water	111:58	0:0	12	i_subtitles
op	111:70	0:0	12	+
water	111:72	0:0	12	1
water	111:74	0:0	12	)
water	111:77	0:0	10	;
water	112:16	0:0	10	current_sub
op	112:28	0:0	10	=
op	112:30	0:0	10	&
water	112:31	0:0	10	current_tk
op	112:41	0:0	10	->
water	112:43	0:0	10	p_subtitles
op	112:54	0:0	10	[
water	112:55	0:0	10	current_tk
op	112:65	0:0	10	->
water	112:67	0:0	10	i_subtitles
op	112:79	0:0	10	-
water	112:81	0:0	10	1
op	112:82	0:0	10	]
water	112:83	0:0	10	;
water	113:16	0:0	10	current_sub
op	113:27	0:0	10	->
water	113:29	0:0	10	i_start
op	113:37	0:0	10	=
water	113:39	0:0	10	i_start
op	113:47	0:0	10	*
water	113:49	0:0	10	i_sign
water	113:55	0:0	10	;
water	114:16	0:0	10	current_sub
op	114:27	0:0	10	->
water	114:29	0:0	10	i_start
op	114:37	0:0	10	+=
water	114:40	0:0	10	current_tk
op	114:50	0:0	10	->
water	114:52	0:0	10	i_delay
water	114:59	0:0	10	;
water	115:16	0:0	10	current_sub
op	115:27	0:0	10	->
water	115:29	0:0	10	i_vobsub_location
op	115:47	0:0	10	=
water	115:49	0:0	10	i_location
water	115:59	0:0	10	;
water	116:12	0:0	10	}
else	117:12	120:12	8
stmts	118:12	120:12	9	
water	118:12	0:0	10	{
call	119:16	119:62	10	msg_Warn
arg	119:26	119:33	11	p_demux
water	119:26	0:0	12	p_demux
arg	119:35	119:62	11	"reading timestamp failed"
water	119:35	0:0	12	"reading timestamp failed"
water	119:63	0:0	10	;
water	120:12	0:0	10	}
water	121:8	0:0	8	}
else	122:8	152:8	4
stmts	122:13	152:8	5	
if	122:13	152:8	6	(!strncasecmp (line ,"delay:" ,6 ))
cond	122:17	122:49	7	!strncasecmp (line ,"delay:" ,6 )
op	122:17	0:0	8	!
call	122:18	122:49	8	strncasecmp
arg	122:31	122:35	9	line
water	122:31	0:0	10	line
arg	122:37	122:45	9	"delay:"
water	122:37	0:0	10	"delay:"
arg	122:47	122:49	9	6
water	122:47	0:0	10	6
stmts	123:8	152:8	7	
water	123:8	0:0	8	{
decl	127:12	127:38	8	int	h
water	127:17	0:0	8	,
decl	127:12	127:38	8	int	m
water	127:20	0:0	8	,
decl	127:12	127:38	8	int	s
water	127:23	0:0	8	,
decl	127:12	127:38	8	int	ms
water	127:27	0:0	8	,
decl	127:12	127:38	8	int	count
op	127:35	0:0	8	=
water	127:37	0:0	8	0
decl	128:12	128:26	8	int	i_sign
op	128:23	0:0	8	=
water	128:25	0:0	8	1
decl	129:12	129:29	8	int64_t	i_gap
op	129:26	0:0	8	=
water	129:28	0:0	8	0
if	130:12	147:12	8	(p_sys -> i_tracks > 0 &&sscanf (line ,"%*celay: %d%n:%d:%d:%d" ,& h ,& count ,& m ,& s ,& ms ) >= 4)
cond	130:16	132:53	9	p_sys -> i_tracks > 0 &&sscanf (line ,"%*celay: %d%n:%d:%d:%d" ,& h ,& count ,& m ,& s ,& ms ) >= 4
water	130:16	0:0	10	p_sys
op	130:21	0:0	10	->
water	130:23	0:0	10	i_tracks
op	130:32	0:0	10	>
water	130:34	0:0	10	0
op	130:36	0:0	10	&&
call	131:16	132:48	10	sscanf
arg	131:24	131:28	11	line
water	131:24	0:0	12	line
arg	131:30	131:54	11	"%*celay: %d%n:%d:%d:%d"
water	131:30	0:0	12	"%*celay: %d%n:%d:%d:%d"
arg	132:24	132:26	11	&h
op	132:24	0:0	12	&
water	132:25	0:0	12	h
arg	132:28	132:34	11	&count
op	132:28	0:0	12	&
water	132:29	0:0	12	count
arg	132:36	132:38	11	&m
op	132:36	0:0	12	&
water	132:37	0:0	12	m
arg	132:40	132:42	11	&s
op	132:40	0:0	12	&
water	132:41	0:0	12	s
arg	132:44	132:48	11	&ms
op	132:44	0:0	12	&
water	132:45	0:0	12	ms
op	132:50	0:0	10	>=
water	132:53	0:0	10	4
stmts	133:12	147:12	9	
water	133:12	0:0	10	{
decl	134:16	134:79	10	vobsub_track_t	*current_tk
op	134:43	0:0	10	=
op	134:45	0:0	10	&
water	134:46	0:0	10	p_sys
op	134:51	0:0	10	->
water	134:53	0:0	10	track
op	134:58	0:0	10	[
water	134:59	0:0	10	p_sys
op	134:64	0:0	10	->
water	134:66	0:0	10	i_tracks
op	134:75	0:0	10	-
water	134:77	0:0	10	1
op	134:78	0:0	10	]
if	135:16	139:16	10	(line [ count - 3 ] == '-')
cond	135:20	135:37	11	line [ count - 3 ] == '-'
water	135:20	0:0	12	line
op	135:24	0:0	12	[
water	135:25	0:0	12	count
op	135:30	0:0	12	-
water	135:31	0:0	12	3
op	135:32	0:0	12	]
op	135:34	0:0	12	==
water	135:37	0:0	12	'-'
stmts	136:16	139:16	11	
water	136:16	0:0	12	{
water	137:20	0:0	12	i_sign
op	137:27	0:0	12	=
op	137:29	0:0	12	-
water	137:30	0:0	12	1
water	137:31	0:0	12	;
water	138:20	0:0	12	h
op	138:22	0:0	12	=
op	138:24	0:0	12	-
water	138:25	0:0	12	h
water	138:26	0:0	12	;
water	139:16	0:0	12	}
water	140:16	0:0	10	i_gap
op	140:22	0:0	10	=
call	140:24	143:31	10	(int64_t)
arg	140:36	143:31	11	h*3600*1000+m*60*1000+s*1000+ms
water	140:36	0:0	12	h
op	140:38	0:0	12	*
water	140:40	0:0	12	3600
op	140:44	0:0	12	*
water	140:45	0:0	12	1000
op	140:50	0:0	12	+
water	141:28	0:0	12	m
op	141:30	0:0	12	*
water	141:32	0:0	12	60
op	141:34	0:0	12	*
water	141:35	0:0	12	1000
op	141:40	0:0	12	+
water	142:28	0:0	12	s
op	142:30	0:0	12	*
water	142:32	0:0	12	1000
op	142:37	0:0	12	+
water	143:28	0:0	12	ms
op	143:33	0:0	10	*
water	143:35	0:0	10	1000
water	143:39	0:0	10	;
water	144:16	0:0	10	current_tk
op	144:26	0:0	10	->
water	144:28	0:0	10	i_delay
op	144:36	0:0	10	=
water	144:38	0:0	10	current_tk
op	144:48	0:0	10	->
water	144:50	0:0	10	i_delay
op	144:58	0:0	10	+
water	144:60	0:0	10	(
water	144:61	0:0	10	i_gap
op	144:67	0:0	10	*
water	144:69	0:0	10	i_sign
water	144:75	0:0	10	)
water	144:76	0:0	10	;
call	145:16	146:60	10	msg_Dbg
arg	145:25	145:32	11	p_demux
water	145:25	0:0	12	p_demux
arg	145:34	145:86	11	"sign: %+d gap: %+"PRId64" global delay: %+"PRId64""
water	145:34	0:0	12	"sign: %+d gap: %+"
water	145:53	0:0	12	PRId64
water	145:59	0:0	12	" global delay: %+"
water	145:78	0:0	12	PRId64
water	145:84	0:0	12	""
arg	146:25	146:31	11	i_sign
water	146:25	0:0	12	i_sign
arg	146:33	146:38	11	i_gap
water	146:33	0:0	12	i_gap
arg	146:40	146:60	11	current_tk->i_delay
water	146:40	0:0	12	current_tk
op	146:50	0:0	12	->
water	146:52	0:0	12	i_delay
water	146:61	0:0	10	;
water	147:12	0:0	10	}
else	148:12	151:12	8
stmts	149:12	151:12	9	
water	149:12	0:0	10	{
call	150:16	150:58	10	msg_Warn
arg	150:26	150:33	11	p_demux
water	150:26	0:0	12	p_demux
arg	150:35	150:58	11	"reading delay failed"
water	150:35	0:0	12	"reading delay failed"
water	150:59	0:0	10	;
water	151:12	0:0	10	}
water	152:8	0:0	8	}
water	153:4	0:0	4	}
return	154:4	154:15	2	(0)
water	154:10	0:0	3	(
water	154:12	0:0	3	0
water	154:14	0:0	3	)
