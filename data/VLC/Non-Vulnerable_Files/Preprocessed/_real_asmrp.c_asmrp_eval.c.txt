func	2:0	17:0	0	static int	asmrp_eval
params	2:22	0:0	1	
param	2:23	2:33	2	asmrp_t *	p
param	2:35	2:47	2	int *	matches
param	2:49	2:62	2	int	matchsize
stmnts	0:0	16:20	1	
decl	3:2	3:27	2	int	rule_num
water	3:14	0:0	2	,
decl	3:2	3:27	2	int	num_matches
call	4:2	4:19	2	lprintf
arg	4:11	4:19	3	"eval\n"
water	4:11	0:0	4	"eval\n"
water	4:20	0:0	2	;
call	5:2	5:18	2	asmrp_get_sym
arg	5:17	5:18	3	p
water	5:17	0:0	4	p
water	5:19	0:0	2	;
water	6:2	0:0	2	rule_num
op	6:11	0:0	2	=
water	6:13	0:0	2	0
water	6:14	0:0	2	;
water	6:16	0:0	2	num_matches
op	6:28	0:0	2	=
water	6:30	0:0	2	0
water	6:31	0:0	2	;
while	7:2	14:2	2	(p -> sym != ASMRP_SYM_EOF && num_matches < matchsize - 1)
cond	7:9	7:62	3	p -> sym != ASMRP_SYM_EOF && num_matches < matchsize - 1
water	7:9	0:0	4	p
op	7:10	0:0	4	->
water	7:12	0:0	4	sym
op	7:16	0:0	4	!=
water	7:19	0:0	4	ASMRP_SYM_EOF
op	7:33	0:0	4	&&
water	7:36	0:0	4	num_matches
op	7:48	0:0	4	<
water	7:50	0:0	4	matchsize
op	7:60	0:0	4	-
water	7:62	0:0	4	1
stmts	7:65	14:2	3	
water	7:65	0:0	4	{
if	8:4	12:4	4	(asmrp_rule (p ))
cond	8:8	8:21	5	asmrp_rule (p )
call	8:8	8:21	6	asmrp_rule
arg	8:20	8:21	7	p
water	8:20	0:0	8	p
stmts	8:24	12:4	5	
water	8:24	0:0	6	{
call	9:6	9:45	6	lprintf
arg	9:15	9:35	7	"rule #%d is true\n"
water	9:15	0:0	8	"rule #%d is true\n"
arg	9:37	9:45	7	rule_num
water	9:37	0:0	8	rule_num
water	9:46	0:0	6	;
water	10:6	0:0	6	matches
op	10:13	0:0	6	[
water	10:14	0:0	6	num_matches
op	10:25	0:0	6	]
op	10:27	0:0	6	=
water	10:29	0:0	6	rule_num
water	10:37	0:0	6	;
water	11:6	0:0	6	num_matches
op	11:17	0:0	6	++
water	11:19	0:0	6	;
water	12:4	0:0	6	}
water	13:4	0:0	4	rule_num
op	13:12	0:0	4	++
water	13:14	0:0	4	;
water	14:2	0:0	4	}
water	15:2	0:0	2	matches
op	15:9	0:0	2	[
water	15:10	0:0	2	num_matches
op	15:21	0:0	2	]
op	15:23	0:0	2	=
op	15:25	0:0	2	-
water	15:26	0:0	2	1
water	15:27	0:0	2	;
return	16:2	16:20	2	num_matches
water	16:9	0:0	3	num_matches
