func	2:0	186:0	0	static void	I420_YUY2
params	2:21	0:0	1	
param	2:23	2:41	2	filter_t *	p_filter
param	2:43	2:62	2	picture_t *	p_source
param	3:43	3:61	2	picture_t *	p_dest
stmnts	0:0	184:12	1	
decl	5:4	5:52	2	uint8_t	*p_line1
water	5:20	0:0	2	,
decl	5:4	5:52	2	uint8_t	*p_line2
op	5:31	0:0	2	=
water	5:33	0:0	2	p_dest
op	5:39	0:0	2	->
water	5:41	0:0	2	p
op	5:42	0:0	2	->
water	5:44	0:0	2	p_pixels
decl	6:4	6:45	2	uint8_t	*p_y1
water	6:17	0:0	2	,
decl	6:4	6:45	2	uint8_t	*p_y2
op	6:25	0:0	2	=
water	6:27	0:0	2	p_source
op	6:35	0:0	2	->
water	6:37	0:0	2	Y_PIXELS
decl	7:4	7:37	2	uint8_t	*p_u
op	7:17	0:0	2	=
water	7:19	0:0	2	p_source
op	7:27	0:0	2	->
water	7:29	0:0	2	U_PIXELS
decl	8:4	8:37	2	uint8_t	*p_v
op	8:17	0:0	2	=
water	8:19	0:0	2	p_source
op	8:27	0:0	2	->
water	8:29	0:0	2	V_PIXELS
decl	9:4	9:16	2	int	i_x
water	9:11	0:0	2	,
decl	9:4	9:16	2	int	i_y
water	12:4	0:0	2	p_line1
op	12:13	0:0	2	=
water	12:15	0:0	2	p_line2
water	12:22	0:0	2	;
water	13:4	0:0	2	p_line2
op	13:12	0:0	2	+=
water	13:15	0:0	2	p_dest
op	13:21	0:0	2	->
water	13:23	0:0	2	p
op	13:24	0:0	2	->
water	13:26	0:0	2	i_pitch
water	13:33	0:0	2	;
water	14:4	0:0	2	p_y1
op	14:13	0:0	2	=
water	14:15	0:0	2	p_y2
water	14:19	0:0	2	;
water	15:4	0:0	2	p_y2
op	15:12	0:0	2	+=
water	15:15	0:0	2	p_source
op	15:23	0:0	2	->
water	15:25	0:0	2	p
op	15:26	0:0	2	[
water	15:27	0:0	2	Y_PLANE
op	15:34	0:0	2	]
op	15:35	0:0	2	.
water	15:36	0:0	2	i_pitch
water	15:43	0:0	2	;
water	17:4	0:0	2	u_vec
op	17:10	0:0	2	=
call	17:12	17:27	2	vec_ld
arg	17:20	17:21	3	0
water	17:20	0:0	4	0
arg	17:23	17:27	3	p_u
water	17:23	0:0	4	p_u
water	17:28	0:0	2	;
water	17:30	0:0	2	p_u
op	17:34	0:0	2	+=
water	17:37	0:0	2	16
water	17:39	0:0	2	;
water	18:4	0:0	2	v_vec
op	18:10	0:0	2	=
call	18:12	18:27	2	vec_ld
arg	18:20	18:21	3	0
water	18:20	0:0	4	0
arg	18:23	18:27	3	p_v
water	18:23	0:0	4	p_v
water	18:28	0:0	2	;
water	18:30	0:0	2	p_v
op	18:34	0:0	2	+=
water	18:37	0:0	2	16
water	18:39	0:0	2	;
water	20:4	0:0	2	uv_vec
op	20:11	0:0	2	=
call	20:13	20:29	2	a
arg	20:16	20:21	3	u_vec
water	20:16	0:0	4	u_vec
arg	20:23	20:29	3	v_vec
water	20:23	0:0	4	v_vec
water	20:30	0:0	2	;
water	21:4	0:0	2	y_vec
op	21:10	0:0	2	=
call	21:12	21:28	2	vec_ld
arg	21:20	21:21	3	0
water	21:20	0:0	4	0
arg	21:23	21:28	3	p_y1
water	21:23	0:0	4	p_y1
water	21:29	0:0	2	;
water	21:31	0:0	2	p_y1
op	21:36	0:0	2	+=
water	21:39	0:0	2	16
water	21:41	0:0	2	;
call	22:4	22:52	2	vec_st
arg	22:12	22:39	3	vec_mergeh(y_vec,uv_vec)
call	22:12	22:38	4	vec_mergeh
arg	22:24	22:29	5	y_vec
water	22:24	0:0	6	y_vec
arg	22:31	22:38	5	uv_vec
water	22:31	0:0	6	uv_vec
arg	22:41	22:42	3	0
water	22:41	0:0	4	0
arg	22:44	22:52	3	p_line1
water	22:44	0:0	4	p_line1
water	22:53	0:0	2	;
water	22:55	0:0	2	p_line1
op	22:63	0:0	2	+=
water	22:66	0:0	2	16
water	22:68	0:0	2	;
call	23:4	23:52	2	vec_st
arg	23:12	23:39	3	vec_mergel(y_vec,uv_vec)
call	23:12	23:38	4	vec_mergel
arg	23:24	23:29	5	y_vec
water	23:24	0:0	6	y_vec
arg	23:31	23:38	5	uv_vec
water	23:31	0:0	6	uv_vec
arg	23:41	23:42	3	0
water	23:41	0:0	4	0
arg	23:44	23:52	3	p_line1
water	23:44	0:0	4	p_line1
water	23:53	0:0	2	;
water	23:55	0:0	2	p_line1
op	23:63	0:0	2	+=
water	23:66	0:0	2	16
water	23:68	0:0	2	;
water	24:4	0:0	2	y_vec
op	24:10	0:0	2	=
call	24:12	24:28	2	vec_ld
arg	24:20	24:21	3	0
water	24:20	0:0	4	0
arg	24:23	24:28	3	p_y2
water	24:23	0:0	4	p_y2
water	24:29	0:0	2	;
water	24:31	0:0	2	p_y2
op	24:36	0:0	2	+=
water	24:39	0:0	2	16
water	24:41	0:0	2	;
call	25:4	25:52	2	vec_st
arg	25:12	25:39	3	vec_mergeh(y_vec,uv_vec)
call	25:12	25:38	4	vec_mergeh
arg	25:24	25:29	5	y_vec
water	25:24	0:0	6	y_vec
arg	25:31	25:38	5	uv_vec
water	25:31	0:0	6	uv_vec
arg	25:41	25:42	3	0
water	25:41	0:0	4	0
arg	25:44	25:52	3	p_line2
water	25:44	0:0	4	p_line2
water	25:53	0:0	2	;
water	25:55	0:0	2	p_line2
op	25:63	0:0	2	+=
water	25:66	0:0	2	16
water	25:68	0:0	2	;
call	26:4	26:52	2	vec_st
arg	26:12	26:39	3	vec_mergel(y_vec,uv_vec)
call	26:12	26:38	4	vec_mergel
arg	26:24	26:29	5	y_vec
water	26:24	0:0	6	y_vec
arg	26:31	26:38	5	uv_vec
water	26:31	0:0	6	uv_vec
arg	26:41	26:42	3	0
water	26:41	0:0	4	0
arg	26:44	26:52	3	p_line2
water	26:44	0:0	4	p_line2
water	26:53	0:0	2	;
water	26:55	0:0	2	p_line2
op	26:63	0:0	2	+=
water	26:66	0:0	2	16
water	26:68	0:0	2	;
water	27:4	0:0	2	vector
water	27:11	0:0	2	unsigned
water	27:20	0:0	2	char
water	27:25	0:0	2	u_vec
water	27:30	0:0	2	;
water	28:4	0:0	2	vector
water	28:11	0:0	2	unsigned
water	28:20	0:0	2	char
water	28:25	0:0	2	v_vec
water	28:30	0:0	2	;
water	29:4	0:0	2	vector
water	29:11	0:0	2	unsigned
water	29:20	0:0	2	char
water	29:25	0:0	2	uv_vec
water	29:31	0:0	2	;
water	30:4	0:0	2	vector
water	30:11	0:0	2	unsigned
water	30:20	0:0	2	char
water	30:25	0:0	2	y_vec
water	30:30	0:0	2	;
if	31:4	45:4	2	(! ( ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 32 ) | ( ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) % 2 ) ))
cond	31:8	32:97	3	! ( ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 32 ) | ( ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) % 2 ) )
op	31:8	0:0	4	!
water	31:9	0:0	4	(
water	31:11	0:0	4	(
water	31:13	0:0	4	(
water	31:14	0:0	4	p_filter
op	31:22	0:0	4	->
water	31:24	0:0	4	fmt_in
op	31:30	0:0	4	.
water	31:31	0:0	4	video
op	31:36	0:0	4	.
water	31:37	0:0	4	i_x_offset
op	31:48	0:0	4	+
water	31:50	0:0	4	p_filter
op	31:58	0:0	4	->
water	31:60	0:0	4	fmt_in
op	31:66	0:0	4	.
water	31:67	0:0	4	video
op	31:72	0:0	4	.
water	31:73	0:0	4	i_visible_width
water	31:88	0:0	4	)
op	31:90	0:0	4	%
water	31:92	0:0	4	32
water	31:95	0:0	4	)
op	31:97	0:0	4	|
water	32:11	0:0	4	(
water	32:13	0:0	4	(
water	32:14	0:0	4	p_filter
op	32:22	0:0	4	->
water	32:24	0:0	4	fmt_in
op	32:30	0:0	4	.
water	32:31	0:0	4	video
op	32:36	0:0	4	.
water	32:37	0:0	4	i_y_offset
op	32:48	0:0	4	+
water	32:50	0:0	4	p_filter
op	32:58	0:0	4	->
water	32:60	0:0	4	fmt_in
op	32:66	0:0	4	.
water	32:67	0:0	4	video
op	32:72	0:0	4	.
water	32:73	0:0	4	i_visible_height
water	32:89	0:0	4	)
op	32:91	0:0	4	%
water	32:93	0:0	4	2
water	32:95	0:0	4	)
water	32:97	0:0	4	)
stmts	33:4	45:4	3	
water	33:4	0:0	4	{
for	35:8	44:8	4	(i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 2 ;i_y --;)
forinit	35:13	35:101	5	i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 2 ;
water	35:13	0:0	6	i_y
op	35:17	0:0	6	=
water	35:19	0:0	6	(
water	35:20	0:0	6	p_filter
op	35:28	0:0	6	->
water	35:30	0:0	6	fmt_in
op	35:36	0:0	6	.
water	35:37	0:0	6	video
op	35:42	0:0	6	.
water	35:43	0:0	6	i_y_offset
op	35:54	0:0	6	+
water	35:56	0:0	6	p_filter
op	35:64	0:0	6	->
water	35:66	0:0	6	fmt_in
op	35:72	0:0	6	.
water	35:73	0:0	6	video
op	35:78	0:0	6	.
water	35:79	0:0	6	i_visible_height
water	35:95	0:0	6	)
op	35:97	0:0	6	/
water	35:99	0:0	6	2
water	35:101	0:0	6	;
cond	35:103	35:106	5	i_y --
water	35:103	0:0	6	i_y
op	35:106	0:0	6	--
forexpr	0:0	0:0	5	
stmts	36:8	44:8	5	
water	36:8	0:0	6	{
call	37:12	37:28	6	VEC_NEXT_LINES
water	37:29	0:0	6	;
for	38:12	43:12	6	(i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 32 ;i_x --;)
forinit	38:17	38:105	7	i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 32 ;
water	38:17	0:0	8	i_x
op	38:21	0:0	8	=
water	38:23	0:0	8	(
water	38:24	0:0	8	p_filter
op	38:32	0:0	8	->
water	38:34	0:0	8	fmt_in
op	38:40	0:0	8	.
water	38:41	0:0	8	video
op	38:46	0:0	8	.
water	38:47	0:0	8	i_x_offset
op	38:58	0:0	8	+
water	38:60	0:0	8	p_filter
op	38:68	0:0	8	->
water	38:70	0:0	8	fmt_in
op	38:76	0:0	8	.
water	38:77	0:0	8	video
op	38:82	0:0	8	.
water	38:83	0:0	8	i_visible_width
water	38:98	0:0	8	)
op	38:100	0:0	8	/
water	38:102	0:0	8	32
water	38:105	0:0	8	;
cond	38:107	38:110	7	i_x --
water	38:107	0:0	8	i_x
op	38:110	0:0	8	--
forexpr	0:0	0:0	7	
stmts	39:12	43:12	7	
water	39:12	0:0	8	{
call	40:16	40:29	8	VEC_LOAD_UV
water	40:30	0:0	8	;
call	41:16	41:38	8	VEC_MERGE
arg	41:27	41:38	9	vec_mergeh
water	41:27	0:0	10	vec_mergeh
water	41:39	0:0	8	;
call	42:16	42:38	8	VEC_MERGE
arg	42:27	42:38	9	vec_mergel
water	42:27	0:0	10	vec_mergel
water	42:39	0:0	8	;
water	43:12	0:0	8	}
water	44:8	0:0	6	}
water	45:4	0:0	4	}
else	48:4	76:4	2
stmts	48:9	76:4	3	
if	48:9	76:4	4	(! ( ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 16 ) | ( ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) % 4 ) ))
cond	48:13	49:102	5	! ( ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 16 ) | ( ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) % 4 ) )
op	48:13	0:0	6	!
water	48:14	0:0	6	(
water	48:16	0:0	6	(
water	48:18	0:0	6	(
water	48:19	0:0	6	p_filter
op	48:27	0:0	6	->
water	48:29	0:0	6	fmt_in
op	48:35	0:0	6	.
water	48:36	0:0	6	video
op	48:41	0:0	6	.
water	48:42	0:0	6	i_x_offset
op	48:53	0:0	6	+
water	48:55	0:0	6	p_filter
op	48:63	0:0	6	->
water	48:65	0:0	6	fmt_in
op	48:71	0:0	6	.
water	48:72	0:0	6	video
op	48:77	0:0	6	.
water	48:78	0:0	6	i_visible_width
water	48:93	0:0	6	)
op	48:95	0:0	6	%
water	48:97	0:0	6	16
water	48:100	0:0	6	)
op	48:102	0:0	6	|
water	49:16	0:0	6	(
water	49:18	0:0	6	(
water	49:19	0:0	6	p_filter
op	49:27	0:0	6	->
water	49:29	0:0	6	fmt_in
op	49:35	0:0	6	.
water	49:36	0:0	6	video
op	49:41	0:0	6	.
water	49:42	0:0	6	i_y_offset
op	49:53	0:0	6	+
water	49:55	0:0	6	p_filter
op	49:63	0:0	6	->
water	49:65	0:0	6	fmt_in
op	49:71	0:0	6	.
water	49:72	0:0	6	video
op	49:77	0:0	6	.
water	49:78	0:0	6	i_visible_height
water	49:94	0:0	6	)
op	49:96	0:0	6	%
water	49:98	0:0	6	4
water	49:100	0:0	6	)
water	49:102	0:0	6	)
stmts	50:4	76:4	5	
water	50:4	0:0	6	{
for	52:8	75:8	6	(i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 4 ;i_y --;)
forinit	52:13	52:101	7	i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 4 ;
water	52:13	0:0	8	i_y
op	52:17	0:0	8	=
water	52:19	0:0	8	(
water	52:20	0:0	8	p_filter
op	52:28	0:0	8	->
water	52:30	0:0	8	fmt_in
op	52:36	0:0	8	.
water	52:37	0:0	8	video
op	52:42	0:0	8	.
water	52:43	0:0	8	i_y_offset
op	52:54	0:0	8	+
water	52:56	0:0	8	p_filter
op	52:64	0:0	8	->
water	52:66	0:0	8	fmt_in
op	52:72	0:0	8	.
water	52:73	0:0	8	video
op	52:78	0:0	8	.
water	52:79	0:0	8	i_visible_height
water	52:95	0:0	8	)
op	52:97	0:0	8	/
water	52:99	0:0	8	4
water	52:101	0:0	8	;
cond	52:103	52:106	7	i_y --
water	52:103	0:0	8	i_y
op	52:106	0:0	8	--
forexpr	0:0	0:0	7	
stmts	53:8	75:8	7	
water	53:8	0:0	8	{
call	55:12	55:28	8	VEC_NEXT_LINES
water	55:29	0:0	8	;
for	56:12	61:12	8	(i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 32 ;i_x --;)
forinit	56:17	56:105	9	i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 32 ;
water	56:17	0:0	10	i_x
op	56:21	0:0	10	=
water	56:23	0:0	10	(
water	56:24	0:0	10	p_filter
op	56:32	0:0	10	->
water	56:34	0:0	10	fmt_in
op	56:40	0:0	10	.
water	56:41	0:0	10	video
op	56:46	0:0	10	.
water	56:47	0:0	10	i_x_offset
op	56:58	0:0	10	+
water	56:60	0:0	10	p_filter
op	56:68	0:0	10	->
water	56:70	0:0	10	fmt_in
op	56:76	0:0	10	.
water	56:77	0:0	10	video
op	56:82	0:0	10	.
water	56:83	0:0	10	i_visible_width
water	56:98	0:0	10	)
op	56:100	0:0	10	/
water	56:102	0:0	10	32
water	56:105	0:0	10	;
cond	56:107	56:110	9	i_x --
water	56:107	0:0	10	i_x
op	56:110	0:0	10	--
forexpr	0:0	0:0	9	
stmts	57:12	61:12	9	
water	57:12	0:0	10	{
call	58:16	58:29	10	VEC_LOAD_UV
water	58:30	0:0	10	;
call	59:16	59:38	10	VEC_MERGE
arg	59:27	59:38	11	vec_mergeh
water	59:27	0:0	12	vec_mergeh
water	59:39	0:0	10	;
call	60:16	60:38	10	VEC_MERGE
arg	60:27	60:38	11	vec_mergel
water	60:27	0:0	12	vec_mergel
water	60:39	0:0	10	;
water	61:12	0:0	10	}
call	63:12	63:25	8	VEC_LOAD_UV
water	63:26	0:0	8	;
call	64:12	64:34	8	VEC_MERGE
arg	64:23	64:34	9	vec_mergeh
water	64:23	0:0	10	vec_mergeh
water	64:35	0:0	8	;
call	66:12	66:28	8	VEC_NEXT_LINES
water	66:29	0:0	8	;
call	67:12	67:34	8	VEC_MERGE
arg	67:23	67:34	9	vec_mergel
water	67:23	0:0	10	vec_mergel
water	67:35	0:0	8	;
for	69:12	74:12	8	(i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 32 ;i_x --;)
forinit	69:17	69:105	9	i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 32 ;
water	69:17	0:0	10	i_x
op	69:21	0:0	10	=
water	69:23	0:0	10	(
water	69:24	0:0	10	p_filter
op	69:32	0:0	10	->
water	69:34	0:0	10	fmt_in
op	69:40	0:0	10	.
water	69:41	0:0	10	video
op	69:46	0:0	10	.
water	69:47	0:0	10	i_x_offset
op	69:58	0:0	10	+
water	69:60	0:0	10	p_filter
op	69:68	0:0	10	->
water	69:70	0:0	10	fmt_in
op	69:76	0:0	10	.
water	69:77	0:0	10	video
op	69:82	0:0	10	.
water	69:83	0:0	10	i_visible_width
water	69:98	0:0	10	)
op	69:100	0:0	10	/
water	69:102	0:0	10	32
water	69:105	0:0	10	;
cond	69:107	69:110	9	i_x --
water	69:107	0:0	10	i_x
op	69:110	0:0	10	--
forexpr	0:0	0:0	9	
stmts	70:12	74:12	9	
water	70:12	0:0	10	{
call	71:16	71:29	10	VEC_LOAD_UV
water	71:30	0:0	10	;
call	72:16	72:38	10	VEC_MERGE
arg	72:27	72:38	11	vec_mergeh
water	72:27	0:0	12	vec_mergeh
water	72:39	0:0	10	;
call	73:16	73:38	10	VEC_MERGE
arg	73:27	73:38	11	vec_mergel
water	73:27	0:0	12	vec_mergel
water	73:39	0:0	10	;
water	74:12	0:0	10	}
water	75:8	0:0	8	}
water	76:4	0:0	6	}
else	78:4	129:4	2
stmts	79:4	129:4	3	
water	79:4	0:0	4	{
decl	85:4	87:68	4	const int	i_source_margin
op	85:30	0:0	4	=
water	85:32	0:0	4	p_source
op	85:40	0:0	4	->
water	85:42	0:0	4	p
op	85:43	0:0	4	[
water	85:44	0:0	4	0
op	85:45	0:0	4	]
op	85:46	0:0	4	.
water	85:47	0:0	4	i_pitch
op	86:33	0:0	4	-
water	86:35	0:0	4	p_source
op	86:43	0:0	4	->
water	86:45	0:0	4	p
op	86:46	0:0	4	[
water	86:47	0:0	4	0
op	86:48	0:0	4	]
op	86:49	0:0	4	.
water	86:50	0:0	4	i_visible_pitch
op	87:33	0:0	4	-
water	87:35	0:0	4	p_filter
op	87:43	0:0	4	->
water	87:45	0:0	4	fmt_in
op	87:51	0:0	4	.
water	87:52	0:0	4	video
op	87:57	0:0	4	.
water	87:58	0:0	4	i_x_offset
decl	88:4	90:76	4	const int	i_source_margin_c
op	88:32	0:0	4	=
water	88:34	0:0	4	p_source
op	88:42	0:0	4	->
water	88:44	0:0	4	p
op	88:45	0:0	4	[
water	88:46	0:0	4	1
op	88:47	0:0	4	]
op	88:48	0:0	4	.
water	88:49	0:0	4	i_pitch
op	89:33	0:0	4	-
water	89:35	0:0	4	p_source
op	89:43	0:0	4	->
water	89:45	0:0	4	p
op	89:46	0:0	4	[
water	89:47	0:0	4	1
op	89:48	0:0	4	]
op	89:49	0:0	4	.
water	89:50	0:0	4	i_visible_pitch
op	90:33	0:0	4	-
water	90:35	0:0	4	(
water	90:37	0:0	4	p_filter
op	90:45	0:0	4	->
water	90:47	0:0	4	fmt_in
op	90:53	0:0	4	.
water	90:54	0:0	4	video
op	90:59	0:0	4	.
water	90:60	0:0	4	i_x_offset
op	90:71	0:0	4	/
water	90:73	0:0	4	2
water	90:75	0:0	4	)
decl	91:4	93:75	4	const int	i_dest_margin
op	91:28	0:0	4	=
water	91:30	0:0	4	p_dest
op	91:36	0:0	4	->
water	91:38	0:0	4	p
op	91:39	0:0	4	->
water	91:41	0:0	4	i_pitch
op	92:31	0:0	4	-
water	92:33	0:0	4	p_dest
op	92:39	0:0	4	->
water	92:41	0:0	4	p
op	92:42	0:0	4	->
water	92:44	0:0	4	i_visible_pitch
op	93:31	0:0	4	-
water	93:33	0:0	4	(
water	93:35	0:0	4	p_filter
op	93:43	0:0	4	->
water	93:45	0:0	4	fmt_out
op	93:52	0:0	4	.
water	93:53	0:0	4	video
op	93:58	0:0	4	.
water	93:59	0:0	4	i_x_offset
op	93:70	0:0	4	*
water	93:72	0:0	4	2
water	93:74	0:0	4	)
for	95:4	123:4	4	(i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 2 ;i_y --;)
forinit	95:9	95:97	5	i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 2 ;
water	95:9	0:0	6	i_y
op	95:13	0:0	6	=
water	95:15	0:0	6	(
water	95:16	0:0	6	p_filter
op	95:24	0:0	6	->
water	95:26	0:0	6	fmt_in
op	95:32	0:0	6	.
water	95:33	0:0	6	video
op	95:38	0:0	6	.
water	95:39	0:0	6	i_y_offset
op	95:50	0:0	6	+
water	95:52	0:0	6	p_filter
op	95:60	0:0	6	->
water	95:62	0:0	6	fmt_in
op	95:68	0:0	6	.
water	95:69	0:0	6	video
op	95:74	0:0	6	.
water	95:75	0:0	6	i_visible_height
water	95:91	0:0	6	)
op	95:93	0:0	6	/
water	95:95	0:0	6	2
water	95:97	0:0	6	;
cond	95:99	95:102	5	i_y --
water	95:99	0:0	6	i_y
op	95:102	0:0	6	--
forexpr	0:0	0:0	5	
stmts	96:4	123:4	5	
water	96:4	0:0	6	{
water	97:8	0:0	6	p_line1
op	97:16	0:0	6	=
water	97:18	0:0	6	p_line2
water	97:25	0:0	6	;
water	98:8	0:0	6	p_line2
op	98:16	0:0	6	+=
water	98:19	0:0	6	p_dest
op	98:25	0:0	6	->
water	98:27	0:0	6	p
op	98:28	0:0	6	->
water	98:30	0:0	6	i_pitch
water	98:37	0:0	6	;
water	99:8	0:0	6	p_y1
op	99:13	0:0	6	=
water	99:15	0:0	6	p_y2
water	99:19	0:0	6	;
water	100:8	0:0	6	p_y2
op	100:13	0:0	6	+=
water	100:16	0:0	6	p_source
op	100:24	0:0	6	->
water	100:26	0:0	6	p
op	100:27	0:0	6	[
water	100:28	0:0	6	Y_PLANE
op	100:35	0:0	6	]
op	100:36	0:0	6	.
water	100:37	0:0	6	i_pitch
water	100:44	0:0	6	;
for	102:8	108:8	6	(i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 8 ;i_x --;)
forinit	102:13	102:99	7	i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 8 ;
water	102:13	0:0	8	i_x
op	102:17	0:0	8	=
water	102:19	0:0	8	(
water	102:20	0:0	8	p_filter
op	102:28	0:0	8	->
water	102:30	0:0	8	fmt_in
op	102:36	0:0	8	.
water	102:37	0:0	8	video
op	102:42	0:0	8	.
water	102:43	0:0	8	i_x_offset
op	102:54	0:0	8	+
water	102:56	0:0	8	p_filter
op	102:64	0:0	8	->
water	102:66	0:0	8	fmt_in
op	102:72	0:0	8	.
water	102:73	0:0	8	video
op	102:78	0:0	8	.
water	102:79	0:0	8	i_visible_width
water	102:94	0:0	8	)
op	102:96	0:0	8	/
water	102:98	0:0	8	8
water	102:99	0:0	8	;
cond	102:101	102:104	7	i_x --
water	102:101	0:0	8	i_x
op	102:104	0:0	8	--
forexpr	0:0	0:0	7	
stmts	103:8	108:8	7	
water	103:8	0:0	8	{
call	104:12	104:27	8	C_YUV420_YUYV
water	104:28	0:0	8	;
call	105:12	105:27	8	C_YUV420_YUYV
water	105:28	0:0	8	;
call	106:12	106:27	8	C_YUV420_YUYV
water	106:28	0:0	8	;
call	107:12	107:27	8	C_YUV420_YUYV
water	107:28	0:0	8	;
water	108:8	0:0	8	}
for	110:8	113:8	6	(i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 8 ;i_x --;)
forinit	110:13	110:100	7	i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 8 ;
water	110:13	0:0	8	i_x
op	110:17	0:0	8	=
water	110:19	0:0	8	(
water	110:20	0:0	8	p_filter
op	110:28	0:0	8	->
water	110:30	0:0	8	fmt_in
op	110:36	0:0	8	.
water	110:37	0:0	8	video
op	110:42	0:0	8	.
water	110:43	0:0	8	i_x_offset
op	110:54	0:0	8	+
water	110:56	0:0	8	p_filter
op	110:64	0:0	8	->
water	110:66	0:0	8	fmt_in
op	110:72	0:0	8	.
water	110:73	0:0	8	video
op	110:78	0:0	8	.
water	110:79	0:0	8	i_visible_width
water	110:94	0:0	8	)
op	110:96	0:0	8	/
water	110:98	0:0	8	8
water	110:100	0:0	8	;
cond	110:102	110:105	7	i_x --
water	110:102	0:0	8	i_x
op	110:105	0:0	8	--
forexpr	0:0	0:0	7	
stmts	111:8	113:8	7	
water	111:8	0:0	8	{
call	112:12	112:38	8	MMX_CALL
arg	112:22	112:38	9	MMX_YUV420_YUYV
water	112:22	0:0	10	MMX_YUV420_YUYV
water	112:39	0:0	8	;
water	113:8	0:0	8	}
for	115:8	118:8	6	(i_x = ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 8 ) / 2 ;i_x --;)
forinit	115:13	115:107	7	i_x = ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 8 ) / 2 ;
water	115:13	0:0	8	i_x
op	115:17	0:0	8	=
water	115:19	0:0	8	(
water	115:21	0:0	8	(
water	115:22	0:0	8	p_filter
op	115:30	0:0	8	->
water	115:32	0:0	8	fmt_in
op	115:38	0:0	8	.
water	115:39	0:0	8	video
op	115:44	0:0	8	.
water	115:45	0:0	8	i_x_offset
op	115:56	0:0	8	+
water	115:58	0:0	8	p_filter
op	115:66	0:0	8	->
water	115:68	0:0	8	fmt_in
op	115:74	0:0	8	.
water	115:75	0:0	8	video
op	115:80	0:0	8	.
water	115:81	0:0	8	i_visible_width
water	115:96	0:0	8	)
op	115:98	0:0	8	%
water	115:100	0:0	8	8
water	115:102	0:0	8	)
op	115:104	0:0	8	/
water	115:106	0:0	8	2
water	115:107	0:0	8	;
cond	115:109	115:112	7	i_x --
water	115:109	0:0	8	i_x
op	115:112	0:0	8	--
forexpr	0:0	0:0	7	
stmts	116:8	118:8	7	
water	116:8	0:0	8	{
call	117:12	117:27	8	C_YUV420_YUYV
water	117:28	0:0	8	;
water	118:8	0:0	8	}
water	119:8	0:0	6	p_y2
op	119:13	0:0	6	+=
water	119:16	0:0	6	i_source_margin
water	119:31	0:0	6	;
water	120:8	0:0	6	p_u
op	120:12	0:0	6	+=
water	120:15	0:0	6	i_source_margin_c
water	120:32	0:0	6	;
water	121:8	0:0	6	p_v
op	121:12	0:0	6	+=
water	121:15	0:0	6	i_source_margin_c
water	121:32	0:0	6	;
water	122:8	0:0	6	p_line2
op	122:16	0:0	6	+=
water	122:19	0:0	6	i_dest_margin
water	122:32	0:0	6	;
water	123:4	0:0	6	}
water	126:4	0:0	4	MMX_END
water	126:11	0:0	4	;
water	129:4	0:0	4	}
if	136:4	159:4	2	(0 == ( 15 & ( p_source -> p [ Y_PLANE ] . i_pitch | p_dest -> p -> i_pitch | ( ( intptr_t ) p_line2 | ( intptr_t ) p_y2 ) ) ))
cond	136:8	137:43	3	0 == ( 15 & ( p_source -> p [ Y_PLANE ] . i_pitch | p_dest -> p -> i_pitch | ( ( intptr_t ) p_line2 | ( intptr_t ) p_y2 ) ) )
water	136:8	0:0	4	0
op	136:10	0:0	4	==
water	136:13	0:0	4	(
water	136:14	0:0	4	15
op	136:17	0:0	4	&
water	136:19	0:0	4	(
water	136:20	0:0	4	p_source
op	136:28	0:0	4	->
water	136:30	0:0	4	p
op	136:31	0:0	4	[
water	136:32	0:0	4	Y_PLANE
op	136:39	0:0	4	]
op	136:40	0:0	4	.
water	136:41	0:0	4	i_pitch
op	136:48	0:0	4	|
water	136:49	0:0	4	p_dest
op	136:55	0:0	4	->
water	136:57	0:0	4	p
op	136:58	0:0	4	->
water	136:60	0:0	4	i_pitch
op	136:67	0:0	4	|
water	137:8	0:0	4	(
water	137:9	0:0	4	(
water	137:10	0:0	4	intptr_t
water	137:18	0:0	4	)
water	137:19	0:0	4	p_line2
op	137:26	0:0	4	|
water	137:27	0:0	4	(
water	137:28	0:0	4	intptr_t
water	137:36	0:0	4	)
water	137:37	0:0	4	p_y2
water	137:41	0:0	4	)
water	137:42	0:0	4	)
water	137:43	0:0	4	)
stmts	138:4	159:4	3	
water	138:4	0:0	4	{
for	140:8	158:8	4	(i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 2 ;i_y --;)
forinit	140:13	140:101	5	i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 2 ;
water	140:13	0:0	6	i_y
op	140:17	0:0	6	=
water	140:19	0:0	6	(
water	140:20	0:0	6	p_filter
op	140:28	0:0	6	->
water	140:30	0:0	6	fmt_in
op	140:36	0:0	6	.
water	140:37	0:0	6	video
op	140:42	0:0	6	.
water	140:43	0:0	6	i_y_offset
op	140:54	0:0	6	+
water	140:56	0:0	6	p_filter
op	140:64	0:0	6	->
water	140:66	0:0	6	fmt_in
op	140:72	0:0	6	.
water	140:73	0:0	6	video
op	140:78	0:0	6	.
water	140:79	0:0	6	i_visible_height
water	140:95	0:0	6	)
op	140:97	0:0	6	/
water	140:99	0:0	6	2
water	140:101	0:0	6	;
cond	140:103	140:106	5	i_y --
water	140:103	0:0	6	i_y
op	140:106	0:0	6	--
forexpr	0:0	0:0	5	
stmts	141:8	158:8	5	
water	141:8	0:0	6	{
water	142:12	0:0	6	p_line1
op	142:20	0:0	6	=
water	142:22	0:0	6	p_line2
water	142:29	0:0	6	;
water	143:12	0:0	6	p_line2
op	143:20	0:0	6	+=
water	143:23	0:0	6	p_dest
op	143:29	0:0	6	->
water	143:31	0:0	6	p
op	143:32	0:0	6	->
water	143:34	0:0	6	i_pitch
water	143:41	0:0	6	;
water	144:12	0:0	6	p_y1
op	144:17	0:0	6	=
water	144:19	0:0	6	p_y2
water	144:23	0:0	6	;
water	145:12	0:0	6	p_y2
op	145:17	0:0	6	+=
water	145:20	0:0	6	p_source
op	145:28	0:0	6	->
water	145:30	0:0	6	p
op	145:31	0:0	6	[
water	145:32	0:0	6	Y_PLANE
op	145:39	0:0	6	]
op	145:40	0:0	6	.
water	145:41	0:0	6	i_pitch
water	145:48	0:0	6	;
for	146:12	149:12	6	(i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 16 ;i_x --;)
forinit	146:17	146:105	7	i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 16 ;
water	146:17	0:0	8	i_x
op	146:21	0:0	8	=
water	146:23	0:0	8	(
water	146:24	0:0	8	p_filter
op	146:32	0:0	8	->
water	146:34	0:0	8	fmt_in
op	146:40	0:0	8	.
water	146:41	0:0	8	video
op	146:46	0:0	8	.
water	146:47	0:0	8	i_x_offset
op	146:58	0:0	8	+
water	146:60	0:0	8	p_filter
op	146:68	0:0	8	->
water	146:70	0:0	8	fmt_in
op	146:76	0:0	8	.
water	146:77	0:0	8	video
op	146:82	0:0	8	.
water	146:83	0:0	8	i_visible_width
water	146:98	0:0	8	)
op	146:100	0:0	8	/
water	146:102	0:0	8	16
water	146:105	0:0	8	;
cond	146:107	146:110	7	i_x --
water	146:107	0:0	8	i_x
op	146:110	0:0	8	--
forexpr	0:0	0:0	7	
stmts	147:12	149:12	7	
water	147:12	0:0	8	{
call	148:16	148:52	8	SSE2_CALL
arg	148:27	148:52	9	SSE2_YUV420_YUYV_ALIGNED
water	148:27	0:0	10	SSE2_YUV420_YUYV_ALIGNED
water	148:53	0:0	8	;
water	149:12	0:0	8	}
for	150:12	153:12	6	(i_x = ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 16 ) / 2 ;i_x --;)
forinit	150:17	150:112	7	i_x = ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 16 ) / 2 ;
water	150:17	0:0	8	i_x
op	150:21	0:0	8	=
water	150:23	0:0	8	(
water	150:25	0:0	8	(
water	150:26	0:0	8	p_filter
op	150:34	0:0	8	->
water	150:36	0:0	8	fmt_in
op	150:42	0:0	8	.
water	150:43	0:0	8	video
op	150:48	0:0	8	.
water	150:49	0:0	8	i_x_offset
op	150:60	0:0	8	+
water	150:62	0:0	8	p_filter
op	150:70	0:0	8	->
water	150:72	0:0	8	fmt_in
op	150:78	0:0	8	.
water	150:79	0:0	8	video
op	150:84	0:0	8	.
water	150:85	0:0	8	i_visible_width
water	150:100	0:0	8	)
op	150:102	0:0	8	%
water	150:104	0:0	8	16
water	150:107	0:0	8	)
op	150:109	0:0	8	/
water	150:111	0:0	8	2
water	150:112	0:0	8	;
cond	150:114	150:117	7	i_x --
water	150:114	0:0	8	i_x
op	150:117	0:0	8	--
forexpr	0:0	0:0	7	
stmts	151:12	153:12	7	
water	151:12	0:0	8	{
call	152:16	152:31	8	C_YUV420_YUYV
water	152:32	0:0	8	;
water	153:12	0:0	8	}
water	154:12	0:0	6	p_y2
op	154:17	0:0	6	+=
water	154:20	0:0	6	i_source_margin
water	154:35	0:0	6	;
water	155:12	0:0	6	p_u
op	155:16	0:0	6	+=
water	155:19	0:0	6	i_source_margin_c
water	155:36	0:0	6	;
water	156:12	0:0	6	p_v
op	156:16	0:0	6	+=
water	156:19	0:0	6	i_source_margin_c
water	156:36	0:0	6	;
water	157:12	0:0	6	p_line2
op	157:20	0:0	6	+=
water	157:23	0:0	6	i_dest_margin
water	157:36	0:0	6	;
water	158:8	0:0	6	}
water	159:4	0:0	4	}
else	160:4	182:4	2
stmts	161:4	182:4	3	
water	161:4	0:0	4	{
for	163:8	181:8	4	(i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 2 ;i_y --;)
forinit	163:13	163:101	5	i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 2 ;
water	163:13	0:0	6	i_y
op	163:17	0:0	6	=
water	163:19	0:0	6	(
water	163:20	0:0	6	p_filter
op	163:28	0:0	6	->
water	163:30	0:0	6	fmt_in
op	163:36	0:0	6	.
water	163:37	0:0	6	video
op	163:42	0:0	6	.
water	163:43	0:0	6	i_y_offset
op	163:54	0:0	6	+
water	163:56	0:0	6	p_filter
op	163:64	0:0	6	->
water	163:66	0:0	6	fmt_in
op	163:72	0:0	6	.
water	163:73	0:0	6	video
op	163:78	0:0	6	.
water	163:79	0:0	6	i_visible_height
water	163:95	0:0	6	)
op	163:97	0:0	6	/
water	163:99	0:0	6	2
water	163:101	0:0	6	;
cond	163:103	163:106	5	i_y --
water	163:103	0:0	6	i_y
op	163:106	0:0	6	--
forexpr	0:0	0:0	5	
stmts	164:8	181:8	5	
water	164:8	0:0	6	{
water	165:12	0:0	6	p_line1
op	165:20	0:0	6	=
water	165:22	0:0	6	p_line2
water	165:29	0:0	6	;
water	166:12	0:0	6	p_line2
op	166:20	0:0	6	+=
water	166:23	0:0	6	p_dest
op	166:29	0:0	6	->
water	166:31	0:0	6	p
op	166:32	0:0	6	->
water	166:34	0:0	6	i_pitch
water	166:41	0:0	6	;
water	167:12	0:0	6	p_y1
op	167:17	0:0	6	=
water	167:19	0:0	6	p_y2
water	167:23	0:0	6	;
water	168:12	0:0	6	p_y2
op	168:17	0:0	6	+=
water	168:20	0:0	6	p_source
op	168:28	0:0	6	->
water	168:30	0:0	6	p
op	168:31	0:0	6	[
water	168:32	0:0	6	Y_PLANE
op	168:39	0:0	6	]
op	168:40	0:0	6	.
water	168:41	0:0	6	i_pitch
water	168:48	0:0	6	;
for	169:12	172:12	6	(i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 16 ;i_x --;)
forinit	169:17	169:105	7	i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 16 ;
water	169:17	0:0	8	i_x
op	169:21	0:0	8	=
water	169:23	0:0	8	(
water	169:24	0:0	8	p_filter
op	169:32	0:0	8	->
water	169:34	0:0	8	fmt_in
op	169:40	0:0	8	.
water	169:41	0:0	8	video
op	169:46	0:0	8	.
water	169:47	0:0	8	i_x_offset
op	169:58	0:0	8	+
water	169:60	0:0	8	p_filter
op	169:68	0:0	8	->
water	169:70	0:0	8	fmt_in
op	169:76	0:0	8	.
water	169:77	0:0	8	video
op	169:82	0:0	8	.
water	169:83	0:0	8	i_visible_width
water	169:98	0:0	8	)
op	169:100	0:0	8	/
water	169:102	0:0	8	16
water	169:105	0:0	8	;
cond	169:107	169:110	7	i_x --
water	169:107	0:0	8	i_x
op	169:110	0:0	8	--
forexpr	0:0	0:0	7	
stmts	170:12	172:12	7	
water	170:12	0:0	8	{
call	171:16	171:54	8	SSE2_CALL
arg	171:27	171:54	9	SSE2_YUV420_YUYV_UNALIGNED
water	171:27	0:0	10	SSE2_YUV420_YUYV_UNALIGNED
water	171:55	0:0	8	;
water	172:12	0:0	8	}
for	173:12	176:12	6	(i_x = ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 16 ) / 2 ;i_x --;)
forinit	173:17	173:112	7	i_x = ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 16 ) / 2 ;
water	173:17	0:0	8	i_x
op	173:21	0:0	8	=
water	173:23	0:0	8	(
water	173:25	0:0	8	(
water	173:26	0:0	8	p_filter
op	173:34	0:0	8	->
water	173:36	0:0	8	fmt_in
op	173:42	0:0	8	.
water	173:43	0:0	8	video
op	173:48	0:0	8	.
water	173:49	0:0	8	i_x_offset
op	173:60	0:0	8	+
water	173:62	0:0	8	p_filter
op	173:70	0:0	8	->
water	173:72	0:0	8	fmt_in
op	173:78	0:0	8	.
water	173:79	0:0	8	video
op	173:84	0:0	8	.
water	173:85	0:0	8	i_visible_width
water	173:100	0:0	8	)
op	173:102	0:0	8	%
water	173:104	0:0	8	16
water	173:107	0:0	8	)
op	173:109	0:0	8	/
water	173:111	0:0	8	2
water	173:112	0:0	8	;
cond	173:114	173:117	7	i_x --
water	173:114	0:0	8	i_x
op	173:117	0:0	8	--
forexpr	0:0	0:0	7	
stmts	174:12	176:12	7	
water	174:12	0:0	8	{
call	175:16	175:31	8	C_YUV420_YUYV
water	175:32	0:0	8	;
water	176:12	0:0	8	}
water	177:12	0:0	6	p_y2
op	177:17	0:0	6	+=
water	177:20	0:0	6	i_source_margin
water	177:35	0:0	6	;
water	178:12	0:0	6	p_u
op	178:16	0:0	6	+=
water	178:19	0:0	6	i_source_margin_c
water	178:36	0:0	6	;
water	179:12	0:0	6	p_v
op	179:16	0:0	6	+=
water	179:19	0:0	6	i_source_margin_c
water	179:36	0:0	6	;
water	180:12	0:0	6	p_line2
op	180:20	0:0	6	+=
water	180:23	0:0	6	i_dest_margin
water	180:36	0:0	6	;
water	181:8	0:0	6	}
water	182:4	0:0	4	}
water	184:4	0:0	2	SSE2_END
water	184:12	0:0	2	;
