func	2:0	62:0	0	static picture_t *	Filter
params	2:24	0:0	1	
param	2:26	2:44	2	filter_t *	p_filter
param	2:46	2:63	2	picture_t *	p_pic
stmnts	0:0	61:48	1	
decl	4:4	4:23	2	picture_t	*p_outpic
decl	5:4	5:15	2	int	i_index
decl	6:4	6:16	2	int	i_planes
if	7:4	7:28	2	(! p_pic)
cond	7:8	7:9	3	! p_pic
op	7:8	0:0	4	!
water	7:9	0:0	4	p_pic
stmts	7:17	7:28	3	
return	7:17	7:28	4	NULL
water	7:24	0:0	5	NULL
water	8:4	0:0	2	p_outpic
op	8:13	0:0	2	=
call	8:15	8:43	2	filter_NewPicture
arg	8:34	8:43	3	p_filter
water	8:34	0:0	4	p_filter
water	8:44	0:0	2	;
if	9:4	14:4	2	(! p_outpic)
cond	9:8	9:9	3	! p_outpic
op	9:8	0:0	4	!
water	9:9	0:0	4	p_outpic
stmts	10:4	14:4	3	
water	10:4	0:0	4	{
call	11:8	11:55	4	msg_Warn
arg	11:18	11:26	5	p_filter
water	11:18	0:0	6	p_filter
arg	11:28	11:55	5	"can't get output picture"
water	11:28	0:0	6	"can't get output picture"
water	11:56	0:0	4	;
call	12:8	12:31	4	picture_Release
arg	12:25	12:31	5	p_pic
water	12:25	0:0	6	p_pic
water	12:32	0:0	4	;
return	13:8	13:19	4	NULL
water	13:15	0:0	5	NULL
water	14:4	0:0	4	}
if	15:4	22:4	2	(p_pic -> format . i_chroma == VLC_CODEC_YUVA)
cond	15:8	15:34	3	p_pic -> format . i_chroma == VLC_CODEC_YUVA
water	15:8	0:0	4	p_pic
op	15:13	0:0	4	->
water	15:15	0:0	4	format
op	15:21	0:0	4	.
water	15:22	0:0	4	i_chroma
op	15:31	0:0	4	==
water	15:34	0:0	4	VLC_CODEC_YUVA
stmts	16:4	22:4	3	
water	16:4	0:0	4	{
water	18:8	0:0	4	i_planes
op	18:17	0:0	4	=
water	18:19	0:0	4	p_pic
op	18:24	0:0	4	->
water	18:26	0:0	4	i_planes
op	18:35	0:0	4	-
water	18:37	0:0	4	1
water	18:38	0:0	4	;
call	19:8	21:67	4	memcpy
arg	20:12	20:41	5	p_outpic->p[A_PLANE].p_pixels
water	20:12	0:0	6	p_outpic
op	20:20	0:0	6	->
water	20:22	0:0	6	p
op	20:23	0:0	6	[
water	20:24	0:0	6	A_PLANE
op	20:31	0:0	6	]
op	20:32	0:0	6	.
water	20:33	0:0	6	p_pixels
arg	20:43	20:69	5	p_pic->p[A_PLANE].p_pixels
water	20:43	0:0	6	p_pic
op	20:48	0:0	6	->
water	20:50	0:0	6	p
op	20:51	0:0	6	[
water	20:52	0:0	6	A_PLANE
op	20:59	0:0	6	]
op	20:60	0:0	6	.
water	20:61	0:0	6	p_pixels
arg	21:12	21:67	5	p_pic->p[A_PLANE].i_pitch*p_pic->p[A_PLANE].i_lines
water	21:12	0:0	6	p_pic
op	21:17	0:0	6	->
water	21:19	0:0	6	p
op	21:20	0:0	6	[
water	21:21	0:0	6	A_PLANE
op	21:28	0:0	6	]
op	21:29	0:0	6	.
water	21:30	0:0	6	i_pitch
op	21:38	0:0	6	*
water	21:41	0:0	6	p_pic
op	21:46	0:0	6	->
water	21:48	0:0	6	p
op	21:49	0:0	6	[
water	21:50	0:0	6	A_PLANE
op	21:57	0:0	6	]
op	21:58	0:0	6	.
water	21:59	0:0	6	i_lines
water	21:68	0:0	4	;
water	22:4	0:0	4	}
else	23:4	26:4	2
stmts	24:4	26:4	3	
water	24:4	0:0	4	{
water	25:8	0:0	4	i_planes
op	25:17	0:0	4	=
water	25:19	0:0	4	p_pic
op	25:24	0:0	4	->
water	25:26	0:0	4	i_planes
water	25:34	0:0	4	;
water	26:4	0:0	4	}
for	27:4	60:4	2	(i_index = 0 ;i_index < i_planes;i_index ++)
forinit	27:9	27:21	3	i_index = 0 ;
water	27:9	0:0	4	i_index
op	27:17	0:0	4	=
water	27:19	0:0	4	0
water	27:21	0:0	4	;
cond	27:23	27:33	3	i_index < i_planes
water	27:23	0:0	4	i_index
op	27:31	0:0	4	<
water	27:33	0:0	4	i_planes
forexpr	27:44	27:51	3	i_index ++
water	27:44	0:0	4	i_index
op	27:51	0:0	4	++
stmts	28:4	60:4	3	
water	28:4	0:0	4	{
decl	29:8	29:53	4	uint8_t	*p_in
water	29:21	0:0	4	,
decl	29:8	29:53	4	uint8_t	*p_in_end
water	29:32	0:0	4	,
decl	29:8	29:53	4	uint8_t	*p_line_end
water	29:45	0:0	4	,
decl	29:8	29:53	4	uint8_t	*p_out
water	30:8	0:0	4	p_in
op	30:13	0:0	4	=
water	30:15	0:0	4	p_pic
op	30:20	0:0	4	->
water	30:22	0:0	4	p
op	30:23	0:0	4	[
water	30:24	0:0	4	i_index
op	30:31	0:0	4	]
op	30:32	0:0	4	.
water	30:33	0:0	4	p_pixels
water	30:41	0:0	4	;
water	31:8	0:0	4	p_in_end
op	31:17	0:0	4	=
water	31:19	0:0	4	p_in
op	31:24	0:0	4	+
water	31:26	0:0	4	p_pic
op	31:31	0:0	4	->
water	31:33	0:0	4	p
op	31:34	0:0	4	[
water	31:35	0:0	4	i_index
op	31:42	0:0	4	]
op	31:43	0:0	4	.
water	31:44	0:0	4	i_visible_lines
op	32:27	0:0	4	*
water	32:29	0:0	4	p_pic
op	32:34	0:0	4	->
water	32:36	0:0	4	p
op	32:37	0:0	4	[
water	32:38	0:0	4	i_index
op	32:45	0:0	4	]
op	32:46	0:0	4	.
water	32:47	0:0	4	i_pitch
water	32:54	0:0	4	;
water	33:8	0:0	4	p_out
op	33:14	0:0	4	=
water	33:16	0:0	4	p_outpic
op	33:24	0:0	4	->
water	33:26	0:0	4	p
op	33:27	0:0	4	[
water	33:28	0:0	4	i_index
op	33:35	0:0	4	]
op	33:36	0:0	4	.
water	33:37	0:0	4	p_pixels
water	33:45	0:0	4	;
for	34:8	59:8	4	(;p_in < p_in_end;)
forinit	34:13	34:13	5	;
water	34:13	0:0	6	;
cond	34:15	34:22	5	p_in < p_in_end
water	34:15	0:0	6	p_in
op	34:20	0:0	6	<
water	34:22	0:0	6	p_in_end
forexpr	0:0	0:0	5	
stmts	35:8	59:8	5	
water	35:8	0:0	6	{
decl	36:12	36:38	6	uint64_t	*p_in64
water	36:28	0:0	6	,
decl	36:12	36:38	6	uint64_t	*p_out64
water	37:12	0:0	6	p_line_end
op	37:23	0:0	6	=
water	37:25	0:0	6	p_in
op	37:30	0:0	6	+
water	37:32	0:0	6	p_pic
op	37:37	0:0	6	->
water	37:39	0:0	6	p
op	37:40	0:0	6	[
water	37:41	0:0	6	i_index
op	37:48	0:0	6	]
op	37:49	0:0	6	.
water	37:50	0:0	6	i_visible_pitch
op	37:66	0:0	6	-
water	37:68	0:0	6	64
water	37:70	0:0	6	;
water	38:12	0:0	6	p_in64
op	38:19	0:0	6	=
water	38:21	0:0	6	(
water	38:22	0:0	6	uint64_t
op	38:30	0:0	6	*
water	38:31	0:0	6	)
water	38:32	0:0	6	p_in
water	38:36	0:0	6	;
water	39:12	0:0	6	p_out64
op	39:20	0:0	6	=
water	39:22	0:0	6	(
water	39:23	0:0	6	uint64_t
op	39:31	0:0	6	*
water	39:32	0:0	6	)
water	39:33	0:0	6	p_out
water	39:38	0:0	6	;
while	40:12	47:12	6	(p_in64 < ( uint64_t * ) p_line_end)
cond	40:19	40:40	7	p_in64 < ( uint64_t * ) p_line_end
water	40:19	0:0	8	p_in64
op	40:26	0:0	8	<
water	40:28	0:0	8	(
water	40:29	0:0	8	uint64_t
op	40:38	0:0	8	*
water	40:39	0:0	8	)
water	40:40	0:0	8	p_line_end
stmts	41:12	47:12	7	
water	41:12	0:0	8	{
op	43:16	0:0	8	*
water	43:17	0:0	8	p_out64
op	43:24	0:0	8	++
op	43:27	0:0	8	=
op	43:29	0:0	8	~
op	43:30	0:0	8	*
water	43:31	0:0	8	p_in64
op	43:37	0:0	8	++
water	43:39	0:0	8	;
op	43:41	0:0	8	*
water	43:42	0:0	8	p_out64
op	43:49	0:0	8	++
op	43:52	0:0	8	=
op	43:54	0:0	8	~
op	43:55	0:0	8	*
water	43:56	0:0	8	p_in64
op	43:62	0:0	8	++
water	43:64	0:0	8	;
op	44:16	0:0	8	*
water	44:17	0:0	8	p_out64
op	44:24	0:0	8	++
op	44:27	0:0	8	=
op	44:29	0:0	8	~
op	44:30	0:0	8	*
water	44:31	0:0	8	p_in64
op	44:37	0:0	8	++
water	44:39	0:0	8	;
op	44:41	0:0	8	*
water	44:42	0:0	8	p_out64
op	44:49	0:0	8	++
op	44:52	0:0	8	=
op	44:54	0:0	8	~
op	44:55	0:0	8	*
water	44:56	0:0	8	p_in64
op	44:62	0:0	8	++
water	44:64	0:0	8	;
op	45:16	0:0	8	*
water	45:17	0:0	8	p_out64
op	45:24	0:0	8	++
op	45:27	0:0	8	=
op	45:29	0:0	8	~
op	45:30	0:0	8	*
water	45:31	0:0	8	p_in64
op	45:37	0:0	8	++
water	45:39	0:0	8	;
op	45:41	0:0	8	*
water	45:42	0:0	8	p_out64
op	45:49	0:0	8	++
op	45:52	0:0	8	=
op	45:54	0:0	8	~
op	45:55	0:0	8	*
water	45:56	0:0	8	p_in64
op	45:62	0:0	8	++
water	45:64	0:0	8	;
op	46:16	0:0	8	*
water	46:17	0:0	8	p_out64
op	46:24	0:0	8	++
op	46:27	0:0	8	=
op	46:29	0:0	8	~
op	46:30	0:0	8	*
water	46:31	0:0	8	p_in64
op	46:37	0:0	8	++
water	46:39	0:0	8	;
op	46:41	0:0	8	*
water	46:42	0:0	8	p_out64
op	46:49	0:0	8	++
op	46:52	0:0	8	=
op	46:54	0:0	8	~
op	46:55	0:0	8	*
water	46:56	0:0	8	p_in64
op	46:62	0:0	8	++
water	46:64	0:0	8	;
water	47:12	0:0	8	}
water	48:12	0:0	6	p_in
op	48:17	0:0	6	=
water	48:19	0:0	6	(
water	48:20	0:0	6	uint8_t
op	48:27	0:0	6	*
water	48:28	0:0	6	)
water	48:29	0:0	6	p_in64
water	48:35	0:0	6	;
water	49:12	0:0	6	p_out
op	49:18	0:0	6	=
water	49:20	0:0	6	(
water	49:21	0:0	6	uint8_t
op	49:28	0:0	6	*
water	49:29	0:0	6	)
water	49:30	0:0	6	p_out64
water	49:37	0:0	6	;
water	50:12	0:0	6	p_line_end
op	50:23	0:0	6	+=
water	50:26	0:0	6	64
water	50:28	0:0	6	;
for	51:12	54:12	6	(;p_in < p_line_end;)
forinit	51:17	51:17	7	;
water	51:17	0:0	8	;
cond	51:19	51:26	7	p_in < p_line_end
water	51:19	0:0	8	p_in
op	51:24	0:0	8	<
water	51:26	0:0	8	p_line_end
forexpr	0:0	0:0	7	
stmts	52:12	54:12	7	
water	52:12	0:0	8	{
op	53:16	0:0	8	*
water	53:17	0:0	8	p_out
op	53:22	0:0	8	++
op	53:25	0:0	8	=
op	53:27	0:0	8	~
water	53:28	0:0	8	(
op	53:30	0:0	8	*
water	53:31	0:0	8	p_in
op	53:35	0:0	8	++
water	53:38	0:0	8	)
water	53:39	0:0	8	;
water	54:12	0:0	8	}
water	55:12	0:0	6	p_in
op	55:17	0:0	6	+=
water	55:20	0:0	6	p_pic
op	55:25	0:0	6	->
water	55:27	0:0	6	p
op	55:28	0:0	6	[
water	55:29	0:0	6	i_index
op	55:36	0:0	6	]
op	55:37	0:0	6	.
water	55:38	0:0	6	i_pitch
op	56:21	0:0	6	-
water	56:23	0:0	6	p_pic
op	56:28	0:0	6	->
water	56:30	0:0	6	p
op	56:31	0:0	6	[
water	56:32	0:0	6	i_index
op	56:39	0:0	6	]
op	56:40	0:0	6	.
water	56:41	0:0	6	i_visible_pitch
water	56:56	0:0	6	;
water	57:12	0:0	6	p_out
op	57:18	0:0	6	+=
water	57:21	0:0	6	p_outpic
op	57:29	0:0	6	->
water	57:31	0:0	6	p
op	57:32	0:0	6	[
water	57:33	0:0	6	i_index
op	57:40	0:0	6	]
op	57:41	0:0	6	.
water	57:42	0:0	6	i_pitch
op	58:21	0:0	6	-
water	58:23	0:0	6	p_outpic
op	58:31	0:0	6	->
water	58:33	0:0	6	p
op	58:34	0:0	6	[
water	58:35	0:0	6	i_index
op	58:42	0:0	6	]
op	58:43	0:0	6	.
water	58:44	0:0	6	i_visible_pitch
water	58:59	0:0	6	;
water	59:8	0:0	6	}
water	60:4	0:0	4	}
return	61:4	61:48	2	CopyInfoAndRelease(p_outpic,p_pic)
call	61:11	61:47	3	CopyInfoAndRelease
arg	61:31	61:39	4	p_outpic
water	61:31	0:0	5	p_outpic
arg	61:41	61:47	4	p_pic
water	61:41	0:0	5	p_pic
