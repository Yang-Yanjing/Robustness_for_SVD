func	2:0	36:0	0	static block_t *	EncoderEncode
params	2:29	0:0	1	
param	2:31	2:47	2	encoder_t *	p_enc
param	2:49	2:69	2	block_t *	p_aout_buf
stmnts	4:4	35:18	1	
if	4:4	4:58	2	(! p_aout_buf || ! p_aout_buf -> i_buffer)
cond	4:8	4:36	3	! p_aout_buf || ! p_aout_buf -> i_buffer
op	4:8	0:0	4	!
water	4:9	0:0	4	p_aout_buf
op	4:20	0:0	4	||
op	4:23	0:0	4	!
water	4:24	0:0	4	p_aout_buf
op	4:34	0:0	4	->
water	4:36	0:0	4	i_buffer
stmts	4:47	4:58	3	
return	4:47	4:58	4	NULL
water	4:54	0:0	5	NULL
decl	5:4	5:62	2	block_t	*p_block
op	5:21	0:0	2	=
call	5:23	5:61	3	block_Alloc
arg	5:36	5:61	4	p_aout_buf->i_buffer/2
water	5:36	0:0	5	p_aout_buf
op	5:46	0:0	5	->
water	5:48	0:0	5	i_buffer
op	5:57	0:0	5	/
water	5:59	0:0	5	2
if	6:4	7:19	2	(unlikely (p_block == NULL ))
cond	6:8	6:33	3	unlikely (p_block == NULL )
call	6:8	6:33	4	unlikely
arg	6:17	6:33	5	p_block==NULL
water	6:17	0:0	6	p_block
op	6:25	0:0	6	==
water	6:28	0:0	6	NULL
stmts	7:8	7:19	3	
return	7:8	7:19	4	NULL
water	7:15	0:0	5	NULL
decl	8:4	8:56	2	const int16_t	*src
op	8:23	0:0	2	=
water	8:25	0:0	2	(
water	8:26	0:0	2	int16_t
op	8:34	0:0	2	*
water	8:35	0:0	2	)
water	8:36	0:0	2	p_aout_buf
op	8:46	0:0	2	->
water	8:48	0:0	2	p_buffer
decl	9:4	9:45	2	int8_t	*dst
op	9:16	0:0	2	=
water	9:18	0:0	2	(
water	9:19	0:0	2	int8_t
op	9:26	0:0	2	*
water	9:27	0:0	2	)
water	9:28	0:0	2	p_block
op	9:35	0:0	2	->
water	9:37	0:0	2	p_buffer
if	10:4	20:4	2	(p_enc -> fmt_out . i_codec == VLC_CODEC_ALAW)
cond	10:8	10:34	3	p_enc -> fmt_out . i_codec == VLC_CODEC_ALAW
water	10:8	0:0	4	p_enc
op	10:13	0:0	4	->
water	10:15	0:0	4	fmt_out
op	10:22	0:0	4	.
water	10:23	0:0	4	i_codec
op	10:31	0:0	4	==
water	10:34	0:0	4	VLC_CODEC_ALAW
stmts	11:4	20:4	3	
water	11:4	0:0	4	{
for	12:8	19:8	4	(unsigned i = 0 ;i < p_aout_buf -> i_buffer / 2;i ++)
forinit	12:13	12:27	5	unsigned i = 0 ;
water	12:13	0:0	6	unsigned
water	12:22	0:0	6	i
op	12:24	0:0	6	=
water	12:26	0:0	6	0
water	12:27	0:0	6	;
cond	12:29	12:56	5	i < p_aout_buf -> i_buffer / 2
water	12:29	0:0	6	i
op	12:31	0:0	6	<
water	12:33	0:0	6	p_aout_buf
op	12:43	0:0	6	->
water	12:45	0:0	6	i_buffer
op	12:54	0:0	6	/
water	12:56	0:0	6	2
forexpr	12:59	12:60	5	i ++
water	12:59	0:0	6	i
op	12:60	0:0	6	++
stmts	13:8	19:8	5	
water	13:8	0:0	6	{
decl	14:13	14:33	6	int16_t	s
op	14:23	0:0	6	=
op	14:25	0:0	6	*
water	14:26	0:0	6	(
water	14:27	0:0	6	src
op	14:30	0:0	6	++
water	14:32	0:0	6	)
if	15:13	16:47	6	(s >= 0)
cond	15:17	15:22	7	s >= 0
water	15:17	0:0	8	s
op	15:19	0:0	8	>=
water	15:22	0:0	8	0
stmts	16:17	16:47	7	
op	16:17	0:0	8	*
water	16:18	0:0	8	(
water	16:19	0:0	8	dst
op	16:22	0:0	8	++
water	16:24	0:0	8	)
op	16:26	0:0	8	=
water	16:28	0:0	8	alaw_encode
op	16:39	0:0	8	[
water	16:40	0:0	8	s
op	16:42	0:0	8	/
water	16:44	0:0	8	16
op	16:46	0:0	8	]
water	16:47	0:0	8	;
else	17:13	18:55	6
stmts	18:17	18:55	7	
op	18:17	0:0	8	*
water	18:18	0:0	8	(
water	18:19	0:0	8	dst
op	18:22	0:0	8	++
water	18:24	0:0	8	)
op	18:26	0:0	8	=
water	18:28	0:0	8	0
water	18:29	0:0	8	x7F
op	18:33	0:0	8	&
water	18:35	0:0	8	alaw_encode
op	18:46	0:0	8	[
water	18:47	0:0	8	s
op	18:49	0:0	8	/
op	18:51	0:0	8	-
water	18:52	0:0	8	16
op	18:54	0:0	8	]
water	18:55	0:0	8	;
water	19:8	0:0	6	}
water	20:4	0:0	4	}
else	21:4	31:4	2
stmts	22:4	31:4	3	
water	22:4	0:0	4	{
for	23:8	30:8	4	(unsigned i = 0 ;i < p_aout_buf -> i_buffer / 2;i ++)
forinit	23:13	23:27	5	unsigned i = 0 ;
water	23:13	0:0	6	unsigned
water	23:22	0:0	6	i
op	23:24	0:0	6	=
water	23:26	0:0	6	0
water	23:27	0:0	6	;
cond	23:29	23:56	5	i < p_aout_buf -> i_buffer / 2
water	23:29	0:0	6	i
op	23:31	0:0	6	<
water	23:33	0:0	6	p_aout_buf
op	23:43	0:0	6	->
water	23:45	0:0	6	i_buffer
op	23:54	0:0	6	/
water	23:56	0:0	6	2
forexpr	23:59	23:60	5	i ++
water	23:59	0:0	6	i
op	23:60	0:0	6	++
stmts	24:8	30:8	5	
water	24:8	0:0	6	{
decl	25:13	25:33	6	int16_t	s
op	25:23	0:0	6	=
op	25:25	0:0	6	*
water	25:26	0:0	6	(
water	25:27	0:0	6	src
op	25:30	0:0	6	++
water	25:32	0:0	6	)
if	26:13	27:46	6	(s >= 0)
cond	26:17	26:22	7	s >= 0
water	26:17	0:0	8	s
op	26:19	0:0	8	>=
water	26:22	0:0	8	0
stmts	27:17	27:46	7	
op	27:17	0:0	8	*
water	27:18	0:0	8	(
water	27:19	0:0	8	dst
op	27:22	0:0	8	++
water	27:24	0:0	8	)
op	27:26	0:0	8	=
water	27:28	0:0	8	ulaw_encode
op	27:39	0:0	8	[
water	27:40	0:0	8	s
op	27:42	0:0	8	/
water	27:44	0:0	8	4
op	27:45	0:0	8	]
water	27:46	0:0	8	;
else	28:13	29:54	6
stmts	29:17	29:54	7	
op	29:17	0:0	8	*
water	29:18	0:0	8	(
water	29:19	0:0	8	dst
op	29:22	0:0	8	++
water	29:24	0:0	8	)
op	29:26	0:0	8	=
water	29:28	0:0	8	0
water	29:29	0:0	8	x7F
op	29:33	0:0	8	&
water	29:35	0:0	8	ulaw_encode
op	29:46	0:0	8	[
water	29:47	0:0	8	s
op	29:49	0:0	8	/
op	29:51	0:0	8	-
water	29:52	0:0	8	4
op	29:53	0:0	8	]
water	29:54	0:0	8	;
water	30:8	0:0	6	}
water	31:4	0:0	4	}
water	32:4	0:0	2	p_block
op	32:11	0:0	2	->
water	32:13	0:0	2	i_dts
op	32:19	0:0	2	=
water	32:21	0:0	2	p_block
op	32:28	0:0	2	->
water	32:30	0:0	2	i_pts
op	32:36	0:0	2	=
water	32:38	0:0	2	p_aout_buf
op	32:48	0:0	2	->
water	32:50	0:0	2	i_pts
water	32:55	0:0	2	;
water	33:4	0:0	2	p_block
op	33:11	0:0	2	->
water	33:13	0:0	2	i_length
op	33:22	0:0	2	=
water	33:24	0:0	2	(
water	33:25	0:0	2	int64_t
water	33:32	0:0	2	)
water	33:33	0:0	2	p_aout_buf
op	33:43	0:0	2	->
water	33:45	0:0	2	i_nb_samples
op	33:58	0:0	2	*
water	34:24	0:0	2	CLOCK_FREQ
op	34:35	0:0	2	/
water	34:37	0:0	2	p_enc
op	34:42	0:0	2	->
water	34:44	0:0	2	fmt_in
op	34:50	0:0	2	.
water	34:51	0:0	2	audio
op	34:56	0:0	2	.
water	34:57	0:0	2	i_rate
water	34:63	0:0	2	;
return	35:4	35:18	2	p_block
water	35:11	0:0	3	p_block
