func	2:0	162:0	0	static int	Open
params	2:15	0:0	1	
param	2:17	2:38	2	vlc_object_t *	p_this
stmnts	0:0	161:22	1	
decl	4:4	4:45	2	decoder_t	*p_dec
op	4:25	0:0	2	=
water	4:27	0:0	2	(
water	4:28	0:0	2	decoder_t
op	4:37	0:0	2	*
water	4:38	0:0	2	)
water	4:39	0:0	2	p_this
decl	5:4	5:24	2	decoder_sys_t	*p_sys
decl	6:4	6:9	2	int	i
if	7:4	8:27	2	(p_dec -> fmt_in . i_codec != VLC_CODEC_H264)
cond	7:8	7:33	3	p_dec -> fmt_in . i_codec != VLC_CODEC_H264
water	7:8	0:0	4	p_dec
op	7:13	0:0	4	->
water	7:15	0:0	4	fmt_in
op	7:21	0:0	4	.
water	7:22	0:0	4	i_codec
op	7:30	0:0	4	!=
water	7:33	0:0	4	VLC_CODEC_H264
stmts	8:8	8:27	3	
return	8:8	8:27	4	VLC_EGENERIC
water	8:15	0:0	5	VLC_EGENERIC
if	9:4	11:27	2	(p_dec -> fmt_in . i_original_fourcc ==VLC_FOURCC ('a' ,'v' ,'c' ,'1' ) && p_dec -> fmt_in . i_extra < 7)
cond	9:8	10:32	3	p_dec -> fmt_in . i_original_fourcc ==VLC_FOURCC ('a' ,'v' ,'c' ,'1' ) && p_dec -> fmt_in . i_extra < 7
water	9:8	0:0	4	p_dec
op	9:13	0:0	4	->
water	9:15	0:0	4	fmt_in
op	9:21	0:0	4	.
water	9:22	0:0	4	i_original_fourcc
op	9:40	0:0	4	==
call	9:43	9:73	4	VLC_FOURCC
arg	9:55	9:58	5	'a'
water	9:55	0:0	6	'a'
arg	9:60	9:63	5	'v'
water	9:60	0:0	6	'v'
arg	9:65	9:68	5	'c'
water	9:65	0:0	6	'c'
arg	9:70	9:73	5	'1'
water	9:70	0:0	6	'1'
op	9:75	0:0	4	&&
water	10:8	0:0	4	p_dec
op	10:13	0:0	4	->
water	10:15	0:0	4	fmt_in
op	10:21	0:0	4	.
water	10:22	0:0	4	i_extra
op	10:30	0:0	4	<
water	10:32	0:0	4	7
stmts	11:8	11:27	3	
return	11:8	11:27	4	VLC_EGENERIC
water	11:15	0:0	5	VLC_EGENERIC
if	13:4	16:4	2	(( p_dec -> p_sys = p_sys =malloc (sizeof ( decoder_sys_t ) ) ) == NULL)
cond	13:8	13:70	3	( p_dec -> p_sys = p_sys =malloc (sizeof ( decoder_sys_t ) ) ) == NULL
water	13:8	0:0	4	(
water	13:10	0:0	4	p_dec
op	13:15	0:0	4	->
water	13:17	0:0	4	p_sys
op	13:23	0:0	4	=
water	13:25	0:0	4	p_sys
op	13:31	0:0	4	=
call	13:33	13:63	4	malloc
arg	13:41	13:63	5	sizeof(decoder_sys_t)
op	13:41	0:0	6	sizeof
water	13:47	0:0	6	(
water	13:48	0:0	6	decoder_sys_t
water	13:61	0:0	6	)
water	13:65	0:0	4	)
op	13:67	0:0	4	==
water	13:70	0:0	4	NULL
stmts	14:4	16:4	3	
water	14:4	0:0	4	{
return	15:8	15:25	4	VLC_ENOMEM
water	15:15	0:0	5	VLC_ENOMEM
water	16:4	0:0	4	}
call	17:4	20:78	2	packetizer_Init
arg	17:21	17:39	3	&p_sys->packetizer
op	17:21	0:0	4	&
water	17:22	0:0	4	p_sys
op	17:27	0:0	4	->
water	17:29	0:0	4	packetizer
arg	18:21	18:37	3	p_h264_startcode
water	18:21	0:0	4	p_h264_startcode
arg	18:39	18:63	3	sizeof(p_h264_startcode)
op	18:39	0:0	4	sizeof
water	18:45	0:0	4	(
water	18:46	0:0	4	p_h264_startcode
water	18:62	0:0	4	)
arg	19:21	19:37	3	p_h264_startcode
water	19:21	0:0	4	p_h264_startcode
arg	19:39	19:40	3	1
water	19:39	0:0	4	1
arg	19:42	19:43	3	5
water	19:42	0:0	4	5
arg	20:21	20:35	3	PacketizeReset
water	20:21	0:0	4	PacketizeReset
arg	20:37	20:51	3	PacketizeParse
water	20:37	0:0	4	PacketizeParse
arg	20:53	20:70	3	PacketizeValidate
water	20:53	0:0	4	PacketizeValidate
arg	20:72	20:78	3	p_dec
water	20:72	0:0	4	p_dec
water	20:79	0:0	2	;
water	21:4	0:0	2	p_sys
op	21:9	0:0	2	->
water	21:11	0:0	2	b_slice
op	21:19	0:0	2	=
water	21:21	0:0	2	false
water	21:26	0:0	2	;
water	22:4	0:0	2	p_sys
op	22:9	0:0	2	->
water	22:11	0:0	2	p_frame
op	22:19	0:0	2	=
water	22:21	0:0	2	NULL
water	22:25	0:0	2	;
water	23:4	0:0	2	p_sys
op	23:9	0:0	2	->
water	23:11	0:0	2	b_frame_sps
op	23:23	0:0	2	=
water	23:25	0:0	2	false
water	23:30	0:0	2	;
water	24:4	0:0	2	p_sys
op	24:9	0:0	2	->
water	24:11	0:0	2	b_frame_pps
op	24:23	0:0	2	=
water	24:25	0:0	2	false
water	24:30	0:0	2	;
water	25:4	0:0	2	p_sys
op	25:9	0:0	2	->
water	25:11	0:0	2	b_header
op	25:19	0:0	2	=
water	25:21	0:0	2	false
water	25:26	0:0	2	;
water	26:4	0:0	2	p_sys
op	26:9	0:0	2	->
water	26:11	0:0	2	b_sps
op	26:19	0:0	2	=
water	26:21	0:0	2	false
water	26:26	0:0	2	;
water	27:4	0:0	2	p_sys
op	27:9	0:0	2	->
water	27:11	0:0	2	b_pps
op	27:19	0:0	2	=
water	27:21	0:0	2	false
water	27:26	0:0	2	;
for	28:4	29:31	2	(i = 0 ;i < SPS_MAX;i ++)
forinit	28:9	28:14	3	i = 0 ;
water	28:9	0:0	4	i
op	28:11	0:0	4	=
water	28:13	0:0	4	0
water	28:14	0:0	4	;
cond	28:16	28:20	3	i < SPS_MAX
water	28:16	0:0	4	i
op	28:18	0:0	4	<
water	28:20	0:0	4	SPS_MAX
forexpr	28:29	28:30	3	i ++
water	28:29	0:0	4	i
op	28:30	0:0	4	++
stmts	29:8	29:31	3	
water	29:8	0:0	4	p_sys
op	29:13	0:0	4	->
water	29:15	0:0	4	pp_sps
op	29:21	0:0	4	[
water	29:22	0:0	4	i
op	29:23	0:0	4	]
op	29:25	0:0	4	=
water	29:27	0:0	4	NULL
water	29:31	0:0	4	;
for	30:4	31:31	2	(i = 0 ;i < PPS_MAX;i ++)
forinit	30:9	30:14	3	i = 0 ;
water	30:9	0:0	4	i
op	30:11	0:0	4	=
water	30:13	0:0	4	0
water	30:14	0:0	4	;
cond	30:16	30:20	3	i < PPS_MAX
water	30:16	0:0	4	i
op	30:18	0:0	4	<
water	30:20	0:0	4	PPS_MAX
forexpr	30:29	30:30	3	i ++
water	30:29	0:0	4	i
op	30:30	0:0	4	++
stmts	31:8	31:31	3	
water	31:8	0:0	4	p_sys
op	31:13	0:0	4	->
water	31:15	0:0	4	pp_pps
op	31:21	0:0	4	[
water	31:22	0:0	4	i
op	31:23	0:0	4	]
op	31:25	0:0	4	=
water	31:27	0:0	4	NULL
water	31:31	0:0	4	;
water	32:4	0:0	2	p_sys
op	32:9	0:0	2	->
water	32:11	0:0	2	i_recovery_frames
op	32:29	0:0	2	=
op	32:31	0:0	2	-
water	32:32	0:0	2	1
water	32:33	0:0	2	;
water	33:4	0:0	2	p_sys
op	33:9	0:0	2	->
water	33:11	0:0	2	slice
op	33:16	0:0	2	.
water	33:17	0:0	2	i_nal_type
op	33:28	0:0	2	=
op	33:30	0:0	2	-
water	33:31	0:0	2	1
water	33:32	0:0	2	;
water	34:4	0:0	2	p_sys
op	34:9	0:0	2	->
water	34:11	0:0	2	slice
op	34:16	0:0	2	.
water	34:17	0:0	2	i_nal_ref_idc
op	34:31	0:0	2	=
op	34:33	0:0	2	-
water	34:34	0:0	2	1
water	34:35	0:0	2	;
water	35:4	0:0	2	p_sys
op	35:9	0:0	2	->
water	35:11	0:0	2	slice
op	35:16	0:0	2	.
water	35:17	0:0	2	i_idr_pic_id
op	35:30	0:0	2	=
op	35:32	0:0	2	-
water	35:33	0:0	2	1
water	35:34	0:0	2	;
water	36:4	0:0	2	p_sys
op	36:9	0:0	2	->
water	36:11	0:0	2	slice
op	36:16	0:0	2	.
water	36:17	0:0	2	i_frame_num
op	36:29	0:0	2	=
op	36:31	0:0	2	-
water	36:32	0:0	2	1
water	36:33	0:0	2	;
water	37:4	0:0	2	p_sys
op	37:9	0:0	2	->
water	37:11	0:0	2	slice
op	37:16	0:0	2	.
water	37:17	0:0	2	i_frame_type
op	37:30	0:0	2	=
water	37:32	0:0	2	0
water	37:33	0:0	2	;
water	38:4	0:0	2	p_sys
op	38:9	0:0	2	->
water	38:11	0:0	2	slice
op	38:16	0:0	2	.
water	38:17	0:0	2	i_pic_parameter_set_id
op	38:40	0:0	2	=
op	38:42	0:0	2	-
water	38:43	0:0	2	1
water	38:44	0:0	2	;
water	39:4	0:0	2	p_sys
op	39:9	0:0	2	->
water	39:11	0:0	2	slice
op	39:16	0:0	2	.
water	39:17	0:0	2	i_field_pic_flag
op	39:34	0:0	2	=
water	39:36	0:0	2	0
water	39:37	0:0	2	;
water	40:4	0:0	2	p_sys
op	40:9	0:0	2	->
water	40:11	0:0	2	slice
op	40:16	0:0	2	.
water	40:17	0:0	2	i_bottom_field_flag
op	40:37	0:0	2	=
op	40:39	0:0	2	-
water	40:40	0:0	2	1
water	40:41	0:0	2	;
water	41:4	0:0	2	p_sys
op	41:9	0:0	2	->
water	41:11	0:0	2	slice
op	41:16	0:0	2	.
water	41:17	0:0	2	i_pic_order_cnt_lsb
op	41:37	0:0	2	=
op	41:39	0:0	2	-
water	41:40	0:0	2	1
water	41:41	0:0	2	;
water	42:4	0:0	2	p_sys
op	42:9	0:0	2	->
water	42:11	0:0	2	slice
op	42:16	0:0	2	.
water	42:17	0:0	2	i_delta_pic_order_cnt_bottom
op	42:46	0:0	2	=
op	42:48	0:0	2	-
water	42:49	0:0	2	1
water	42:50	0:0	2	;
water	43:4	0:0	2	p_sys
op	43:9	0:0	2	->
water	43:11	0:0	2	i_frame_dts
op	43:23	0:0	2	=
water	43:25	0:0	2	VLC_TS_INVALID
water	43:39	0:0	2	;
water	44:4	0:0	2	p_sys
op	44:9	0:0	2	->
water	44:11	0:0	2	i_frame_pts
op	44:23	0:0	2	=
water	44:25	0:0	2	VLC_TS_INVALID
water	44:39	0:0	2	;
call	46:4	46:52	2	es_format_Copy
arg	46:20	46:35	3	&p_dec->fmt_out
op	46:20	0:0	4	&
water	46:21	0:0	4	p_dec
op	46:26	0:0	4	->
water	46:28	0:0	4	fmt_out
arg	46:37	46:52	3	&p_dec->fmt_in
op	46:37	0:0	4	&
water	46:38	0:0	4	p_dec
op	46:43	0:0	4	->
water	46:45	0:0	4	fmt_in
water	46:53	0:0	2	;
water	47:4	0:0	2	p_dec
op	47:9	0:0	2	->
water	47:11	0:0	2	fmt_out
op	47:18	0:0	2	.
water	47:19	0:0	2	i_codec
op	47:27	0:0	2	=
water	47:29	0:0	2	VLC_CODEC_H264
water	47:43	0:0	2	;
if	48:4	141:4	2	(p_dec -> fmt_in . i_original_fourcc ==VLC_FOURCC ('a' ,'v' ,'c' ,'1' ))
cond	48:8	48:74	3	p_dec -> fmt_in . i_original_fourcc ==VLC_FOURCC ('a' ,'v' ,'c' ,'1' )
water	48:8	0:0	4	p_dec
op	48:13	0:0	4	->
water	48:15	0:0	4	fmt_in
op	48:21	0:0	4	.
water	48:22	0:0	4	i_original_fourcc
op	48:40	0:0	4	==
call	48:43	48:74	4	VLC_FOURCC
arg	48:55	48:58	5	'a'
water	48:55	0:0	6	'a'
arg	48:60	48:63	5	'v'
water	48:60	0:0	6	'v'
arg	48:65	48:68	5	'c'
water	48:65	0:0	6	'c'
arg	48:70	48:74	5	'1'
water	48:70	0:0	6	'1'
stmts	49:4	141:4	3	
water	49:4	0:0	4	{
decl	54:8	54:58	4	uint8_t	*p
op	54:19	0:0	4	=
op	54:21	0:0	4	&
water	54:22	0:0	4	(
water	54:23	0:0	4	(
water	54:24	0:0	4	uint8_t
op	54:31	0:0	4	*
water	54:32	0:0	4	)
water	54:33	0:0	4	p_dec
op	54:38	0:0	4	->
water	54:40	0:0	4	fmt_in
op	54:46	0:0	4	.
water	54:47	0:0	4	p_extra
water	54:54	0:0	4	)
op	54:55	0:0	4	[
water	54:56	0:0	4	4
op	54:57	0:0	4	]
decl	55:8	55:24	4	int	i_sps
water	55:17	0:0	4	,
decl	55:8	55:24	4	int	i_pps
decl	56:8	56:20	4	bool	b_dummy
decl	57:8	57:13	4	int	i
water	59:8	0:0	4	p_sys
op	59:13	0:0	4	->
water	59:15	0:0	4	i_avcC_length_size
op	59:34	0:0	4	=
water	59:36	0:0	4	1
op	59:38	0:0	4	+
water	59:40	0:0	4	(
water	59:41	0:0	4	(
op	59:42	0:0	4	*
water	59:43	0:0	4	p
op	59:44	0:0	4	++
water	59:46	0:0	4	)
op	59:47	0:0	4	&
water	59:48	0:0	4	0
water	59:49	0:0	4	x03
water	59:52	0:0	4	)
water	59:53	0:0	4	;
water	61:8	0:0	4	i_sps
op	61:14	0:0	4	=
water	61:16	0:0	4	(
op	61:17	0:0	4	*
water	61:18	0:0	4	p
op	61:19	0:0	4	++
water	61:21	0:0	4	)
op	61:22	0:0	4	&
water	61:23	0:0	4	0
water	61:24	0:0	4	x1f
water	61:27	0:0	4	;
for	62:8	75:8	4	(i = 0 ;i < i_sps;i ++)
forinit	62:13	62:18	5	i = 0 ;
water	62:13	0:0	6	i
op	62:15	0:0	6	=
water	62:17	0:0	6	0
water	62:18	0:0	6	;
cond	62:20	62:24	5	i < i_sps
water	62:20	0:0	6	i
op	62:22	0:0	6	<
water	62:24	0:0	6	i_sps
forexpr	62:31	62:32	5	i ++
water	62:31	0:0	6	i
op	62:32	0:0	6	++
stmts	63:8	75:8	5	
water	63:8	0:0	6	{
decl	64:12	64:43	6	uint16_t	i_length
op	64:30	0:0	6	=
call	64:32	64:42	7	GetWBE
arg	64:40	64:42	8	p
water	64:40	0:0	9	p
water	64:45	0:0	6	p
op	64:47	0:0	6	+=
water	64:50	0:0	6	2
water	64:51	0:0	6	;
if	65:12	69:12	6	(i_length > ( uint8_t * ) p_dec -> fmt_in . p_extra + p_dec -> fmt_in . i_extra - p)
cond	65:16	66:74	7	i_length > ( uint8_t * ) p_dec -> fmt_in . p_extra + p_dec -> fmt_in . i_extra - p
water	65:16	0:0	8	i_length
op	65:25	0:0	8	>
water	66:16	0:0	8	(
water	66:17	0:0	8	uint8_t
op	66:24	0:0	8	*
water	66:25	0:0	8	)
water	66:26	0:0	8	p_dec
op	66:31	0:0	8	->
water	66:33	0:0	8	fmt_in
op	66:39	0:0	8	.
water	66:40	0:0	8	p_extra
op	66:48	0:0	8	+
water	66:50	0:0	8	p_dec
op	66:55	0:0	8	->
water	66:57	0:0	8	fmt_in
op	66:63	0:0	8	.
water	66:64	0:0	8	i_extra
op	66:72	0:0	8	-
water	66:74	0:0	8	p
stmts	67:12	69:12	7	
water	67:12	0:0	8	{
return	68:16	68:35	8	VLC_EGENERIC
water	68:23	0:0	9	VLC_EGENERIC
water	69:12	0:0	8	}
decl	70:12	70:66	6	block_t	*p_sps
op	70:27	0:0	6	=
call	70:29	70:65	7	CreateAnnexbNAL
arg	70:46	70:51	8	p_dec
water	70:46	0:0	9	p_dec
arg	70:53	70:54	8	p
water	70:53	0:0	9	p
arg	70:56	70:65	8	i_length
water	70:56	0:0	9	i_length
if	71:12	72:35	6	(! p_sps)
cond	71:16	71:17	7	! p_sps
op	71:16	0:0	8	!
water	71:17	0:0	8	p_sps
stmts	72:16	72:35	7	
return	72:16	72:35	8	VLC_EGENERIC
water	72:23	0:0	9	VLC_EGENERIC
call	73:12	73:50	6	ParseNALBlock
arg	73:27	73:32	7	p_dec
water	73:27	0:0	8	p_dec
arg	73:34	73:42	7	&b_dummy
op	73:34	0:0	8	&
water	73:35	0:0	8	b_dummy
arg	73:44	73:50	7	p_sps
water	73:44	0:0	8	p_sps
water	73:51	0:0	6	;
water	74:12	0:0	6	p
op	74:14	0:0	6	+=
water	74:17	0:0	6	i_length
water	74:25	0:0	6	;
water	75:8	0:0	6	}
water	77:8	0:0	4	i_pps
op	77:14	0:0	4	=
op	77:16	0:0	4	*
water	77:17	0:0	4	p
op	77:18	0:0	4	++
water	77:20	0:0	4	;
for	78:8	91:8	4	(i = 0 ;i < i_pps;i ++)
forinit	78:13	78:18	5	i = 0 ;
water	78:13	0:0	6	i
op	78:15	0:0	6	=
water	78:17	0:0	6	0
water	78:18	0:0	6	;
cond	78:20	78:24	5	i < i_pps
water	78:20	0:0	6	i
op	78:22	0:0	6	<
water	78:24	0:0	6	i_pps
forexpr	78:31	78:32	5	i ++
water	78:31	0:0	6	i
op	78:32	0:0	6	++
stmts	79:8	91:8	5	
water	79:8	0:0	6	{
decl	80:12	80:43	6	uint16_t	i_length
op	80:30	0:0	6	=
call	80:32	80:42	7	GetWBE
arg	80:40	80:42	8	p
water	80:40	0:0	9	p
water	80:45	0:0	6	p
op	80:47	0:0	6	+=
water	80:50	0:0	6	2
water	80:51	0:0	6	;
if	81:12	85:12	6	(i_length > ( uint8_t * ) p_dec -> fmt_in . p_extra + p_dec -> fmt_in . i_extra - p)
cond	81:16	82:74	7	i_length > ( uint8_t * ) p_dec -> fmt_in . p_extra + p_dec -> fmt_in . i_extra - p
water	81:16	0:0	8	i_length
op	81:25	0:0	8	>
water	82:16	0:0	8	(
water	82:17	0:0	8	uint8_t
op	82:24	0:0	8	*
water	82:25	0:0	8	)
water	82:26	0:0	8	p_dec
op	82:31	0:0	8	->
water	82:33	0:0	8	fmt_in
op	82:39	0:0	8	.
water	82:40	0:0	8	p_extra
op	82:48	0:0	8	+
water	82:50	0:0	8	p_dec
op	82:55	0:0	8	->
water	82:57	0:0	8	fmt_in
op	82:63	0:0	8	.
water	82:64	0:0	8	i_extra
op	82:72	0:0	8	-
water	82:74	0:0	8	p
stmts	83:12	85:12	7	
water	83:12	0:0	8	{
return	84:16	84:35	8	VLC_EGENERIC
water	84:23	0:0	9	VLC_EGENERIC
water	85:12	0:0	8	}
decl	86:12	86:66	6	block_t	*p_pps
op	86:27	0:0	6	=
call	86:29	86:65	7	CreateAnnexbNAL
arg	86:46	86:51	8	p_dec
water	86:46	0:0	9	p_dec
arg	86:53	86:54	8	p
water	86:53	0:0	9	p
arg	86:56	86:65	8	i_length
water	86:56	0:0	9	i_length
if	87:12	88:35	6	(! p_pps)
cond	87:16	87:17	7	! p_pps
op	87:16	0:0	8	!
water	87:17	0:0	8	p_pps
stmts	88:16	88:35	7	
return	88:16	88:35	8	VLC_EGENERIC
water	88:23	0:0	9	VLC_EGENERIC
call	89:12	89:50	6	ParseNALBlock
arg	89:27	89:32	7	p_dec
water	89:27	0:0	8	p_dec
arg	89:34	89:42	7	&b_dummy
op	89:34	0:0	8	&
water	89:35	0:0	8	b_dummy
arg	89:44	89:50	7	p_pps
water	89:44	0:0	8	p_pps
water	89:51	0:0	6	;
water	90:12	0:0	6	p
op	90:14	0:0	6	+=
water	90:17	0:0	6	i_length
water	90:25	0:0	6	;
water	91:8	0:0	6	}
call	92:8	93:57	4	msg_Dbg
arg	92:17	92:22	5	p_dec
water	92:17	0:0	6	p_dec
arg	92:24	92:61	5	"avcC length size=%d, sps=%d, pps=%d"
water	92:24	0:0	6	"avcC length size=%d, sps=%d, pps=%d"
arg	93:17	93:42	5	p_sys->i_avcC_length_size
water	93:17	0:0	6	p_sys
op	93:22	0:0	6	->
water	93:24	0:0	6	i_avcC_length_size
arg	93:44	93:49	5	i_sps
water	93:44	0:0	6	i_sps
arg	93:51	93:57	5	i_pps
water	93:51	0:0	6	i_pps
water	93:58	0:0	4	;
if	94:8	95:31	4	(! p_sys -> b_sps || ! p_sys -> b_pps)
cond	94:12	94:37	5	! p_sys -> b_sps || ! p_sys -> b_pps
op	94:12	0:0	6	!
water	94:13	0:0	6	p_sys
op	94:18	0:0	6	->
water	94:20	0:0	6	b_sps
op	94:26	0:0	6	||
op	94:29	0:0	6	!
water	94:30	0:0	6	p_sys
op	94:35	0:0	6	->
water	94:37	0:0	6	b_pps
stmts	95:12	95:31	5	
return	95:12	95:31	6	VLC_EGENERIC
water	95:19	0:0	7	VLC_EGENERIC
if	97:8	98:42	4	(p_dec -> fmt_out . i_extra > 0)
cond	97:12	97:37	5	p_dec -> fmt_out . i_extra > 0
water	97:12	0:0	6	p_dec
op	97:17	0:0	6	->
water	97:19	0:0	6	fmt_out
op	97:26	0:0	6	.
water	97:27	0:0	6	i_extra
op	97:35	0:0	6	>
water	97:37	0:0	6	0
stmts	98:12	98:42	5	
call	98:12	98:41	6	free
arg	98:18	98:41	7	p_dec->fmt_out.p_extra
water	98:18	0:0	8	p_dec
op	98:23	0:0	8	->
water	98:25	0:0	8	fmt_out
op	98:32	0:0	8	.
water	98:33	0:0	8	p_extra
water	98:42	0:0	6	;
water	99:8	0:0	4	p_dec
op	99:13	0:0	4	->
water	99:15	0:0	4	fmt_out
op	99:22	0:0	4	.
water	99:23	0:0	4	i_extra
op	99:31	0:0	4	=
water	99:33	0:0	4	0
water	99:34	0:0	4	;
water	100:8	0:0	4	p_dec
op	100:13	0:0	4	->
water	100:15	0:0	4	fmt_out
op	100:22	0:0	4	.
water	100:23	0:0	4	p_extra
op	100:31	0:0	4	=
water	100:33	0:0	4	NULL
water	100:37	0:0	4	;
for	102:8	106:8	4	(i = 0 ;i < SPS_MAX;i ++)
forinit	102:13	102:18	5	i = 0 ;
water	102:13	0:0	6	i
op	102:15	0:0	6	=
water	102:17	0:0	6	0
water	102:18	0:0	6	;
cond	102:20	102:24	5	i < SPS_MAX
water	102:20	0:0	6	i
op	102:22	0:0	6	<
water	102:24	0:0	6	SPS_MAX
forexpr	102:33	102:34	5	i ++
water	102:33	0:0	6	i
op	102:34	0:0	6	++
stmts	103:8	106:8	5	
water	103:8	0:0	6	{
if	104:12	105:68	6	(p_sys -> pp_sps [ i ])
cond	104:16	104:31	7	p_sys -> pp_sps [ i ]
water	104:16	0:0	8	p_sys
op	104:21	0:0	8	->
water	104:23	0:0	8	pp_sps
op	104:29	0:0	8	[
water	104:30	0:0	8	i
op	104:31	0:0	8	]
stmts	105:16	105:68	7	
water	105:16	0:0	8	p_dec
op	105:21	0:0	8	->
water	105:23	0:0	8	fmt_out
op	105:30	0:0	8	.
water	105:31	0:0	8	i_extra
op	105:39	0:0	8	+=
water	105:42	0:0	8	p_sys
op	105:47	0:0	8	->
water	105:49	0:0	8	pp_sps
op	105:55	0:0	8	[
water	105:56	0:0	8	i
op	105:57	0:0	8	]
op	105:58	0:0	8	->
water	105:60	0:0	8	i_buffer
water	105:68	0:0	8	;
water	106:8	0:0	6	}
for	107:8	111:8	4	(i = 0 ;i < PPS_MAX;i ++)
forinit	107:13	107:18	5	i = 0 ;
water	107:13	0:0	6	i
op	107:15	0:0	6	=
water	107:17	0:0	6	0
water	107:18	0:0	6	;
cond	107:20	107:24	5	i < PPS_MAX
water	107:20	0:0	6	i
op	107:22	0:0	6	<
water	107:24	0:0	6	PPS_MAX
forexpr	107:33	107:34	5	i ++
water	107:33	0:0	6	i
op	107:34	0:0	6	++
stmts	108:8	111:8	5	
water	108:8	0:0	6	{
if	109:12	110:68	6	(p_sys -> pp_pps [ i ])
cond	109:16	109:31	7	p_sys -> pp_pps [ i ]
water	109:16	0:0	8	p_sys
op	109:21	0:0	8	->
water	109:23	0:0	8	pp_pps
op	109:29	0:0	8	[
water	109:30	0:0	8	i
op	109:31	0:0	8	]
stmts	110:16	110:68	7	
water	110:16	0:0	8	p_dec
op	110:21	0:0	8	->
water	110:23	0:0	8	fmt_out
op	110:30	0:0	8	.
water	110:31	0:0	8	i_extra
op	110:39	0:0	8	+=
water	110:42	0:0	8	p_sys
op	110:47	0:0	8	->
water	110:49	0:0	8	pp_pps
op	110:55	0:0	8	[
water	110:56	0:0	8	i
op	110:57	0:0	8	]
op	110:58	0:0	8	->
water	110:60	0:0	8	i_buffer
water	110:68	0:0	8	;
water	111:8	0:0	6	}
water	112:8	0:0	4	p_dec
op	112:13	0:0	4	->
water	112:15	0:0	4	fmt_out
op	112:22	0:0	4	.
water	112:23	0:0	4	p_extra
op	112:31	0:0	4	=
call	112:33	112:64	4	malloc
arg	112:41	112:64	5	p_dec->fmt_out.i_extra
water	112:41	0:0	6	p_dec
op	112:46	0:0	6	->
water	112:48	0:0	6	fmt_out
op	112:55	0:0	6	.
water	112:56	0:0	6	i_extra
water	112:65	0:0	4	;
if	113:8	133:8	4	(p_dec -> fmt_out . p_extra)
cond	113:12	113:27	5	p_dec -> fmt_out . p_extra
water	113:12	0:0	6	p_dec
op	113:17	0:0	6	->
water	113:19	0:0	6	fmt_out
op	113:26	0:0	6	.
water	113:27	0:0	6	p_extra
stmts	114:8	133:8	5	
water	114:8	0:0	6	{
decl	115:12	115:51	6	uint8_t	*p_dst
op	115:27	0:0	6	=
water	115:29	0:0	6	p_dec
op	115:34	0:0	6	->
water	115:36	0:0	6	fmt_out
op	115:43	0:0	6	.
water	115:44	0:0	6	p_extra
for	116:12	123:12	6	(i = 0 ;i < SPS_MAX;i ++)
forinit	116:17	116:22	7	i = 0 ;
water	116:17	0:0	8	i
op	116:19	0:0	8	=
water	116:21	0:0	8	0
water	116:22	0:0	8	;
cond	116:24	116:28	7	i < SPS_MAX
water	116:24	0:0	8	i
op	116:26	0:0	8	<
water	116:28	0:0	8	SPS_MAX
forexpr	116:37	116:38	7	i ++
water	116:37	0:0	8	i
op	116:38	0:0	8	++
stmts	117:12	123:12	7	
water	117:12	0:0	8	{
if	118:16	122:16	8	(p_sys -> pp_sps [ i ])
cond	118:20	118:35	9	p_sys -> pp_sps [ i ]
water	118:20	0:0	10	p_sys
op	118:25	0:0	10	->
water	118:27	0:0	10	pp_sps
op	118:33	0:0	10	[
water	118:34	0:0	10	i
op	118:35	0:0	10	]
stmts	119:16	122:16	9	
water	119:16	0:0	10	{
call	120:20	120:90	10	memcpy
arg	120:28	120:33	11	p_dst
water	120:28	0:0	12	p_dst
arg	120:35	120:61	11	p_sys->pp_sps[i]->p_buffer
water	120:35	0:0	12	p_sys
op	120:40	0:0	12	->
water	120:42	0:0	12	pp_sps
op	120:48	0:0	12	[
water	120:49	0:0	12	i
op	120:50	0:0	12	]
op	120:51	0:0	12	->
water	120:53	0:0	12	p_buffer
arg	120:63	120:90	11	p_sys->pp_sps[i]->i_buffer
water	120:63	0:0	12	p_sys
op	120:68	0:0	12	->
water	120:70	0:0	12	pp_sps
op	120:76	0:0	12	[
water	120:77	0:0	12	i
op	120:78	0:0	12	]
op	120:79	0:0	12	->
water	120:81	0:0	12	i_buffer
water	120:91	0:0	10	;
water	121:20	0:0	10	p_dst
op	121:26	0:0	10	+=
water	121:29	0:0	10	p_sys
op	121:34	0:0	10	->
water	121:36	0:0	10	pp_sps
op	121:42	0:0	10	[
water	121:43	0:0	10	i
op	121:44	0:0	10	]
op	121:45	0:0	10	->
water	121:47	0:0	10	i_buffer
water	121:55	0:0	10	;
water	122:16	0:0	10	}
water	123:12	0:0	8	}
for	124:12	131:12	6	(i = 0 ;i < PPS_MAX;i ++)
forinit	124:17	124:22	7	i = 0 ;
water	124:17	0:0	8	i
op	124:19	0:0	8	=
water	124:21	0:0	8	0
water	124:22	0:0	8	;
cond	124:24	124:28	7	i < PPS_MAX
water	124:24	0:0	8	i
op	124:26	0:0	8	<
water	124:28	0:0	8	PPS_MAX
forexpr	124:37	124:38	7	i ++
water	124:37	0:0	8	i
op	124:38	0:0	8	++
stmts	125:12	131:12	7	
water	125:12	0:0	8	{
if	126:16	130:16	8	(p_sys -> pp_pps [ i ])
cond	126:20	126:35	9	p_sys -> pp_pps [ i ]
water	126:20	0:0	10	p_sys
op	126:25	0:0	10	->
water	126:27	0:0	10	pp_pps
op	126:33	0:0	10	[
water	126:34	0:0	10	i
op	126:35	0:0	10	]
stmts	127:16	130:16	9	
water	127:16	0:0	10	{
call	128:20	128:90	10	memcpy
arg	128:28	128:33	11	p_dst
water	128:28	0:0	12	p_dst
arg	128:35	128:61	11	p_sys->pp_pps[i]->p_buffer
water	128:35	0:0	12	p_sys
op	128:40	0:0	12	->
water	128:42	0:0	12	pp_pps
op	128:48	0:0	12	[
water	128:49	0:0	12	i
op	128:50	0:0	12	]
op	128:51	0:0	12	->
water	128:53	0:0	12	p_buffer
arg	128:63	128:90	11	p_sys->pp_pps[i]->i_buffer
water	128:63	0:0	12	p_sys
op	128:68	0:0	12	->
water	128:70	0:0	12	pp_pps
op	128:76	0:0	12	[
water	128:77	0:0	12	i
op	128:78	0:0	12	]
op	128:79	0:0	12	->
water	128:81	0:0	12	i_buffer
water	128:91	0:0	10	;
water	129:20	0:0	10	p_dst
op	129:26	0:0	10	+=
water	129:29	0:0	10	p_sys
op	129:34	0:0	10	->
water	129:36	0:0	10	pp_pps
op	129:42	0:0	10	[
water	129:43	0:0	10	i
op	129:44	0:0	10	]
op	129:45	0:0	10	->
water	129:47	0:0	10	i_buffer
water	129:55	0:0	10	;
water	130:16	0:0	10	}
water	131:12	0:0	8	}
water	132:12	0:0	6	p_sys
op	132:17	0:0	6	->
water	132:19	0:0	6	b_header
op	132:28	0:0	6	=
water	132:30	0:0	6	true
water	132:34	0:0	6	;
water	133:8	0:0	6	}
else	134:8	137:8	4
stmts	135:8	137:8	5	
water	135:8	0:0	6	{
water	136:12	0:0	6	p_dec
op	136:17	0:0	6	->
water	136:19	0:0	6	fmt_out
op	136:26	0:0	6	.
water	136:27	0:0	6	i_extra
op	136:35	0:0	6	=
water	136:37	0:0	6	0
water	136:38	0:0	6	;
water	137:8	0:0	6	}
water	139:8	0:0	4	p_dec
op	139:13	0:0	4	->
water	139:15	0:0	4	pf_packetize
op	139:28	0:0	4	=
water	139:30	0:0	4	PacketizeAVC1
water	139:43	0:0	4	;
water	141:4	0:0	4	}
else	142:4	160:4	2
stmts	143:4	160:4	3	
water	143:4	0:0	4	{
water	148:8	0:0	4	p_dec
op	148:13	0:0	4	->
water	148:15	0:0	4	pf_packetize
op	148:28	0:0	4	=
water	148:30	0:0	4	Packetize
water	148:39	0:0	4	;
water	149:8	0:0	4	p_dec
op	149:13	0:0	4	->
water	149:15	0:0	4	pf_get_cc
op	149:25	0:0	4	=
water	149:27	0:0	4	GetCc
water	149:32	0:0	4	;
water	151:8	0:0	4	p_sys
op	151:13	0:0	4	->
water	151:15	0:0	4	i_cc_pts
op	151:24	0:0	4	=
water	151:26	0:0	4	VLC_TS_INVALID
water	151:40	0:0	4	;
water	152:8	0:0	4	p_sys
op	152:13	0:0	4	->
water	152:15	0:0	4	i_cc_dts
op	152:24	0:0	4	=
water	152:26	0:0	4	VLC_TS_INVALID
water	152:40	0:0	4	;
water	153:8	0:0	4	p_sys
op	153:13	0:0	4	->
water	153:15	0:0	4	i_cc_flags
op	153:26	0:0	4	=
water	153:28	0:0	4	0
water	153:29	0:0	4	;
call	154:8	154:28	4	cc_Init
arg	154:17	154:28	5	&p_sys->cc
op	154:17	0:0	6	&
water	154:18	0:0	6	p_sys
op	154:23	0:0	6	->
water	154:25	0:0	6	cc
water	154:29	0:0	4	;
call	155:8	155:33	4	cc_Init
arg	155:17	155:33	5	&p_sys->cc_next
op	155:17	0:0	6	&
water	155:18	0:0	6	p_sys
op	155:23	0:0	6	->
water	155:25	0:0	6	cc_next
water	155:34	0:0	4	;
if	157:8	159:77	4	(p_dec -> fmt_in . i_extra > 0)
cond	157:12	157:36	5	p_dec -> fmt_in . i_extra > 0
water	157:12	0:0	6	p_dec
op	157:17	0:0	6	->
water	157:19	0:0	6	fmt_in
op	157:25	0:0	6	.
water	157:26	0:0	6	i_extra
op	157:34	0:0	6	>
water	157:36	0:0	6	0
stmts	158:12	159:77	5	
call	158:12	159:76	6	packetizer_Header
arg	158:31	158:49	7	&p_sys->packetizer
op	158:31	0:0	8	&
water	158:32	0:0	8	p_sys
op	158:37	0:0	8	->
water	158:39	0:0	8	packetizer
arg	159:31	159:52	7	p_dec->fmt_in.p_extra
water	159:31	0:0	8	p_dec
op	159:36	0:0	8	->
water	159:38	0:0	8	fmt_in
op	159:44	0:0	8	.
water	159:45	0:0	8	p_extra
arg	159:54	159:76	7	p_dec->fmt_in.i_extra
water	159:54	0:0	8	p_dec
op	159:59	0:0	8	->
water	159:61	0:0	8	fmt_in
op	159:67	0:0	8	.
water	159:68	0:0	8	i_extra
water	159:77	0:0	6	;
water	160:4	0:0	4	}
return	161:4	161:22	2	VLC_SUCCESS
water	161:11	0:0	3	VLC_SUCCESS
