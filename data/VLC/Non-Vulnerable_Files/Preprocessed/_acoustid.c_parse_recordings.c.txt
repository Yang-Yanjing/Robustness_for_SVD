func	2:0	22:0	0	static void	parse_recordings
params	2:28	0:0	1	
param	2:30	2:49	2	vlc_object_t *	p_obj
param	2:51	2:67	2	json_value *	node
param	2:69	2:97	2	acoustid_result_t *	p_result
stmnts	4:4	21:4	1	
if	4:4	4:51	2	(! node || node -> type != json_array)
cond	4:9	4:32	3	! node || node -> type != json_array
op	4:9	0:0	4	!
water	4:10	0:0	4	node
op	4:15	0:0	4	||
water	4:18	0:0	4	node
op	4:22	0:0	4	->
water	4:24	0:0	4	type
op	4:29	0:0	4	!=
water	4:32	0:0	4	json_array
stmts	4:45	4:51	3	
return	4:45	4:51	4	
water	5:4	0:0	2	p_result
op	5:12	0:0	2	->
water	5:14	0:0	2	recordings
op	5:24	0:0	2	.
water	5:25	0:0	2	p_recordings
op	5:38	0:0	2	=
call	5:40	5:102	2	calloc
arg	5:48	5:68	3	node->u.array.length
water	5:48	0:0	4	node
op	5:52	0:0	4	->
water	5:54	0:0	4	u
op	5:55	0:0	4	.
water	5:56	0:0	4	array
op	5:61	0:0	4	.
water	5:62	0:0	4	length
arg	5:70	5:102	3	sizeof(musicbrainz_recording_t)
op	5:70	0:0	4	sizeof
water	5:76	0:0	4	(
water	5:77	0:0	4	musicbrainz_recording_t
water	5:100	0:0	4	)
water	5:103	0:0	2	;
if	6:4	6:53	2	(! p_result -> recordings . p_recordings)
cond	6:9	6:32	3	! p_result -> recordings . p_recordings
op	6:9	0:0	4	!
water	6:11	0:0	4	p_result
op	6:19	0:0	4	->
water	6:21	0:0	4	recordings
op	6:31	0:0	4	.
water	6:32	0:0	4	p_recordings
stmts	6:47	6:53	3	
return	6:47	6:53	4	
water	7:4	0:0	2	p_result
op	7:12	0:0	2	->
water	7:14	0:0	2	recordings
op	7:24	0:0	2	.
water	7:25	0:0	2	count
op	7:31	0:0	2	=
water	7:33	0:0	2	node
op	7:37	0:0	2	->
water	7:39	0:0	2	u
op	7:40	0:0	2	.
water	7:41	0:0	2	array
op	7:46	0:0	2	.
water	7:47	0:0	2	length
water	7:53	0:0	2	;
for	8:4	21:4	2	( unsigned int i = 0 ;i < node -> u . array . length;i ++)
forinit	0:0	8:25	3	 unsigned int i = 0 ;
decl	8:9	8:25	4	unsigned int	i
op	8:23	0:0	4	=
water	8:24	0:0	4	0
cond	8:27	8:43	3	i < node -> u . array . length
water	8:27	0:0	4	i
op	8:28	0:0	4	<
water	8:29	0:0	4	node
op	8:33	0:0	4	->
water	8:35	0:0	4	u
op	8:36	0:0	4	.
water	8:37	0:0	4	array
op	8:42	0:0	4	.
water	8:43	0:0	4	length
forexpr	8:51	8:52	3	i ++
water	8:51	0:0	4	i
op	8:52	0:0	4	++
stmts	9:4	21:4	3	
water	9:4	0:0	4	{
decl	10:8	10:82	4	musicbrainz_recording_t	*record
op	10:40	0:0	4	=
op	10:42	0:0	4	&
water	10:44	0:0	4	p_result
op	10:52	0:0	4	->
water	10:54	0:0	4	recordings
op	10:64	0:0	4	.
water	10:65	0:0	4	p_recordings
op	10:77	0:0	4	[
water	10:79	0:0	4	i
op	10:81	0:0	4	]
decl	11:8	11:58	4	json_value	*recordnode
op	11:31	0:0	4	=
water	11:33	0:0	4	node
op	11:37	0:0	4	->
water	11:39	0:0	4	u
op	11:40	0:0	4	.
water	11:41	0:0	4	array
op	11:46	0:0	4	.
water	11:47	0:0	4	values
op	11:53	0:0	4	[
water	11:55	0:0	4	i
op	11:57	0:0	4	]
if	12:8	12:67	4	(! recordnode || recordnode -> type != json_object)
cond	12:13	12:48	5	! recordnode || recordnode -> type != json_object
op	12:13	0:0	6	!
water	12:14	0:0	6	recordnode
op	12:25	0:0	6	||
water	12:28	0:0	6	recordnode
op	12:38	0:0	6	->
water	12:40	0:0	6	type
op	12:45	0:0	6	!=
water	12:48	0:0	6	json_object
stmts	12:62	12:67	5	
break	12:62	12:67	6	
decl	13:8	13:64	4	json_value	*value
op	13:26	0:0	4	=
call	13:28	13:63	5	jsongetbyname
arg	13:43	13:53	6	recordnode
water	13:43	0:0	7	recordnode
arg	13:55	13:63	6	"title"
water	13:55	0:0	7	"title"
if	14:8	15:61	4	(value && value -> type == json_string)
cond	14:13	14:37	5	value && value -> type == json_string
water	14:13	0:0	6	value
op	14:19	0:0	6	&&
water	14:22	0:0	6	value
op	14:27	0:0	6	->
water	14:29	0:0	6	type
op	14:34	0:0	6	==
water	14:37	0:0	6	json_string
stmts	15:12	15:61	5	
water	15:12	0:0	6	record
op	15:18	0:0	6	->
water	15:20	0:0	6	psz_title
op	15:30	0:0	6	=
call	15:32	15:60	6	strdup
arg	15:40	15:60	7	value->u.string.ptr
water	15:40	0:0	8	value
op	15:45	0:0	8	->
water	15:47	0:0	8	u
op	15:48	0:0	8	.
water	15:49	0:0	8	string
op	15:55	0:0	8	.
water	15:56	0:0	8	ptr
water	15:61	0:0	6	;
water	16:8	0:0	4	value
op	16:14	0:0	4	=
call	16:16	16:48	4	jsongetbyname
arg	16:31	16:41	5	recordnode
water	16:31	0:0	6	recordnode
arg	16:43	16:48	5	"id"
water	16:43	0:0	6	"id"
water	16:49	0:0	4	;
if	17:8	18:81	4	(value && value -> type == json_string)
cond	17:13	17:37	5	value && value -> type == json_string
water	17:13	0:0	6	value
op	17:19	0:0	6	&&
water	17:22	0:0	6	value
op	17:27	0:0	6	->
water	17:29	0:0	6	type
op	17:34	0:0	6	==
water	17:37	0:0	6	json_string
stmts	18:12	18:81	5	
call	18:12	18:80	6	strncpy
arg	18:21	18:46	7	record->sz_musicbrainz_id
water	18:21	0:0	8	record
op	18:27	0:0	8	->
water	18:29	0:0	8	sz_musicbrainz_id
arg	18:48	18:67	7	value->u.string.ptr
water	18:48	0:0	8	value
op	18:53	0:0	8	->
water	18:55	0:0	8	u
op	18:56	0:0	8	.
water	18:57	0:0	8	string
op	18:63	0:0	8	.
water	18:64	0:0	8	ptr
arg	18:69	18:80	7	MB_ID_SIZE
water	18:69	0:0	8	MB_ID_SIZE
water	18:81	0:0	6	;
call	19:8	19:70	4	parse_artists
arg	19:23	19:61	5	jsongetbyname(recordnode,"artists")
call	19:23	19:60	6	jsongetbyname
arg	19:38	19:48	7	recordnode
water	19:38	0:0	8	recordnode
arg	19:50	19:60	7	"artists"
water	19:50	0:0	8	"artists"
arg	19:63	19:70	5	record
water	19:63	0:0	6	record
water	19:71	0:0	4	;
call	20:8	20:125	4	msg_Dbg
arg	20:17	20:22	5	p_obj
water	20:17	0:0	6	p_obj
arg	20:24	20:55	5	"recording %d title %s %36s %s"
water	20:24	0:0	6	"recording %d title %s %36s %s"
arg	20:57	20:58	5	i
water	20:57	0:0	6	i
arg	20:60	20:77	5	record->psz_title
water	20:60	0:0	6	record
op	20:66	0:0	6	->
water	20:68	0:0	6	psz_title
arg	20:79	20:104	5	record->sz_musicbrainz_id
water	20:79	0:0	6	record
op	20:85	0:0	6	->
water	20:87	0:0	6	sz_musicbrainz_id
arg	20:106	20:125	5	record->psz_artist
water	20:106	0:0	6	record
op	20:112	0:0	6	->
water	20:114	0:0	6	psz_artist
water	20:126	0:0	4	;
water	21:4	0:0	4	}
