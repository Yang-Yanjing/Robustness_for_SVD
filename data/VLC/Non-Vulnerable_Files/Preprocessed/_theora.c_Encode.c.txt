func	2:0	89:0	0	static block_t *	Encode
params	2:22	0:0	1	
param	2:24	2:40	2	encoder_t *	p_enc
param	2:42	2:60	2	picture_t *	p_pict
stmnts	0:0	88:18	1	
decl	4:4	4:39	2	encoder_sys_t	*p_sys
op	4:25	0:0	2	=
water	4:27	0:0	2	p_enc
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:24	2	ogg_packet	oggpacket
decl	6:4	6:20	2	block_t	*p_block
decl	7:4	7:25	2	th_ycbcr_buffer	ycbcr
decl	8:4	8:9	2	int	i
if	9:4	9:29	2	(! p_pict)
cond	9:8	9:9	3	! p_pict
op	9:8	0:0	4	!
water	9:9	0:0	4	p_pict
stmts	9:18	9:29	3	
return	9:18	9:29	4	NULL
water	9:25	0:0	5	NULL
if	11:4	19:4	2	(p_pict -> p [ 0 ] . i_pitch < ( int ) p_sys -> i_width || p_pict -> p [ 0 ] . i_lines < ( int ) p_sys -> i_height)
cond	11:8	12:43	3	p_pict -> p [ 0 ] . i_pitch < ( int ) p_sys -> i_width || p_pict -> p [ 0 ] . i_lines < ( int ) p_sys -> i_height
water	11:8	0:0	4	p_pict
op	11:14	0:0	4	->
water	11:16	0:0	4	p
op	11:17	0:0	4	[
water	11:18	0:0	4	0
op	11:19	0:0	4	]
op	11:20	0:0	4	.
water	11:21	0:0	4	i_pitch
op	11:29	0:0	4	<
water	11:31	0:0	4	(
water	11:32	0:0	4	int
water	11:35	0:0	4	)
water	11:36	0:0	4	p_sys
op	11:41	0:0	4	->
water	11:43	0:0	4	i_width
op	11:51	0:0	4	||
water	12:8	0:0	4	p_pict
op	12:14	0:0	4	->
water	12:16	0:0	4	p
op	12:17	0:0	4	[
water	12:18	0:0	4	0
op	12:19	0:0	4	]
op	12:20	0:0	4	.
water	12:21	0:0	4	i_lines
op	12:29	0:0	4	<
water	12:31	0:0	4	(
water	12:32	0:0	4	int
water	12:35	0:0	4	)
water	12:36	0:0	4	p_sys
op	12:41	0:0	4	->
water	12:43	0:0	4	i_height
stmts	13:4	19:4	3	
water	13:4	0:0	4	{
call	14:8	17:50	4	msg_Warn
arg	14:18	14:23	5	p_enc
water	14:18	0:0	6	p_enc
arg	14:25	15:52	5	"frame is smaller than encoding size""(%ix%i->%ix%i) -> dropping frame"
water	14:25	0:0	6	"frame is smaller than encoding size"
water	15:18	0:0	6	"(%ix%i->%ix%i) -> dropping frame"
arg	16:18	16:38	5	p_pict->p[0].i_pitch
water	16:18	0:0	6	p_pict
op	16:24	0:0	6	->
water	16:26	0:0	6	p
op	16:27	0:0	6	[
water	16:28	0:0	6	0
op	16:29	0:0	6	]
op	16:30	0:0	6	.
water	16:31	0:0	6	i_pitch
arg	16:40	16:60	5	p_pict->p[0].i_lines
water	16:40	0:0	6	p_pict
op	16:46	0:0	6	->
water	16:48	0:0	6	p
op	16:49	0:0	6	[
water	16:50	0:0	6	0
op	16:51	0:0	6	]
op	16:52	0:0	6	.
water	16:53	0:0	6	i_lines
arg	17:18	17:32	5	p_sys->i_width
water	17:18	0:0	6	p_sys
op	17:23	0:0	6	->
water	17:25	0:0	6	i_width
arg	17:34	17:50	5	p_sys->i_height
water	17:34	0:0	6	p_sys
op	17:39	0:0	6	->
water	17:41	0:0	6	i_height
water	17:51	0:0	4	;
return	18:8	18:19	4	NULL
water	18:15	0:0	5	NULL
water	19:4	0:0	4	}
if	21:4	44:4	2	(p_pict -> p [ 0 ] . i_visible_pitch < ( int ) p_sys -> i_width)
cond	21:8	21:51	3	p_pict -> p [ 0 ] . i_visible_pitch < ( int ) p_sys -> i_width
water	21:8	0:0	4	p_pict
op	21:14	0:0	4	->
water	21:16	0:0	4	p
op	21:17	0:0	4	[
water	21:18	0:0	4	0
op	21:19	0:0	4	]
op	21:20	0:0	4	.
water	21:21	0:0	4	i_visible_pitch
op	21:37	0:0	4	<
water	21:39	0:0	4	(
water	21:40	0:0	4	int
water	21:43	0:0	4	)
water	21:44	0:0	4	p_sys
op	21:49	0:0	4	->
water	21:51	0:0	4	i_width
stmts	22:4	44:4	3	
water	22:4	0:0	4	{
for	23:8	30:8	4	(i = 0 ;i < p_sys -> i_height;i ++)
forinit	23:13	23:18	5	i = 0 ;
water	23:13	0:0	6	i
op	23:15	0:0	6	=
water	23:17	0:0	6	0
water	23:18	0:0	6	;
cond	23:20	23:31	5	i < p_sys -> i_height
water	23:20	0:0	6	i
op	23:22	0:0	6	<
water	23:24	0:0	6	p_sys
op	23:29	0:0	6	->
water	23:31	0:0	6	i_height
forexpr	23:41	23:42	5	i ++
water	23:41	0:0	6	i
op	23:42	0:0	6	++
stmts	24:8	30:8	5	
water	24:8	0:0	6	{
call	25:12	29:66	6	memset
arg	25:20	26:48	7	p_pict->p[0].p_pixels+i*p_pict->p[0].i_pitch+p_pict->p[0].i_visible_pitch
water	25:20	0:0	8	p_pict
op	25:26	0:0	8	->
water	25:28	0:0	8	p
op	25:29	0:0	8	[
water	25:30	0:0	8	0
op	25:31	0:0	8	]
op	25:32	0:0	8	.
water	25:33	0:0	8	p_pixels
op	25:42	0:0	8	+
water	25:44	0:0	8	i
op	25:46	0:0	8	*
water	25:48	0:0	8	p_pict
op	25:54	0:0	8	->
water	25:56	0:0	8	p
op	25:57	0:0	8	[
water	25:58	0:0	8	0
op	25:59	0:0	8	]
op	25:60	0:0	8	.
water	25:61	0:0	8	i_pitch
op	25:69	0:0	8	+
water	26:20	0:0	8	p_pict
op	26:26	0:0	8	->
water	26:28	0:0	8	p
op	26:29	0:0	8	[
water	26:30	0:0	8	0
op	26:31	0:0	8	]
op	26:32	0:0	8	.
water	26:33	0:0	8	i_visible_pitch
arg	27:20	28:57	7	*(p_pict->p[0].p_pixels+i*p_pict->p[0].i_pitch+p_pict->p[0].i_visible_pitch-1)
op	27:20	0:0	8	*
water	27:21	0:0	8	(
water	27:23	0:0	8	p_pict
op	27:29	0:0	8	->
water	27:31	0:0	8	p
op	27:32	0:0	8	[
water	27:33	0:0	8	0
op	27:34	0:0	8	]
op	27:35	0:0	8	.
water	27:36	0:0	8	p_pixels
op	27:45	0:0	8	+
water	27:47	0:0	8	i
op	27:49	0:0	8	*
water	27:51	0:0	8	p_pict
op	27:57	0:0	8	->
water	27:59	0:0	8	p
op	27:60	0:0	8	[
water	27:61	0:0	8	0
op	27:62	0:0	8	]
op	27:63	0:0	8	.
water	27:64	0:0	8	i_pitch
op	27:72	0:0	8	+
water	28:23	0:0	8	p_pict
op	28:29	0:0	8	->
water	28:31	0:0	8	p
op	28:32	0:0	8	[
water	28:33	0:0	8	0
op	28:34	0:0	8	]
op	28:35	0:0	8	.
water	28:36	0:0	8	i_visible_pitch
op	28:52	0:0	8	-
water	28:54	0:0	8	1
water	28:56	0:0	8	)
arg	29:20	29:66	7	p_sys->i_width-p_pict->p[0].i_visible_pitch
water	29:20	0:0	8	p_sys
op	29:25	0:0	8	->
water	29:27	0:0	8	i_width
op	29:35	0:0	8	-
water	29:37	0:0	8	p_pict
op	29:43	0:0	8	->
water	29:45	0:0	8	p
op	29:46	0:0	8	[
water	29:47	0:0	8	0
op	29:48	0:0	8	]
op	29:49	0:0	8	.
water	29:50	0:0	8	i_visible_pitch
water	29:67	0:0	6	;
water	30:8	0:0	6	}
for	31:8	43:8	4	(i = 0 ;i < p_sys -> i_height / 2;i ++)
forinit	31:13	31:18	5	i = 0 ;
water	31:13	0:0	6	i
op	31:15	0:0	6	=
water	31:17	0:0	6	0
water	31:18	0:0	6	;
cond	31:20	31:42	5	i < p_sys -> i_height / 2
water	31:20	0:0	6	i
op	31:22	0:0	6	<
water	31:24	0:0	6	p_sys
op	31:29	0:0	6	->
water	31:31	0:0	6	i_height
op	31:40	0:0	6	/
water	31:42	0:0	6	2
forexpr	31:45	31:46	5	i ++
water	31:45	0:0	6	i
op	31:46	0:0	6	++
stmts	32:8	43:8	5	
water	32:8	0:0	6	{
call	33:12	37:70	6	memset
arg	33:20	34:48	7	p_pict->p[1].p_pixels+i*p_pict->p[1].i_pitch+p_pict->p[1].i_visible_pitch
water	33:20	0:0	8	p_pict
op	33:26	0:0	8	->
water	33:28	0:0	8	p
op	33:29	0:0	8	[
water	33:30	0:0	8	1
op	33:31	0:0	8	]
op	33:32	0:0	8	.
water	33:33	0:0	8	p_pixels
op	33:42	0:0	8	+
water	33:44	0:0	8	i
op	33:46	0:0	8	*
water	33:48	0:0	8	p_pict
op	33:54	0:0	8	->
water	33:56	0:0	8	p
op	33:57	0:0	8	[
water	33:58	0:0	8	1
op	33:59	0:0	8	]
op	33:60	0:0	8	.
water	33:61	0:0	8	i_pitch
op	33:69	0:0	8	+
water	34:20	0:0	8	p_pict
op	34:26	0:0	8	->
water	34:28	0:0	8	p
op	34:29	0:0	8	[
water	34:30	0:0	8	1
op	34:31	0:0	8	]
op	34:32	0:0	8	.
water	34:33	0:0	8	i_visible_pitch
arg	35:20	36:57	7	*(p_pict->p[1].p_pixels+i*p_pict->p[1].i_pitch+p_pict->p[1].i_visible_pitch-1)
op	35:20	0:0	8	*
water	35:21	0:0	8	(
water	35:23	0:0	8	p_pict
op	35:29	0:0	8	->
water	35:31	0:0	8	p
op	35:32	0:0	8	[
water	35:33	0:0	8	1
op	35:34	0:0	8	]
op	35:35	0:0	8	.
water	35:36	0:0	8	p_pixels
op	35:45	0:0	8	+
water	35:47	0:0	8	i
op	35:49	0:0	8	*
water	35:51	0:0	8	p_pict
op	35:57	0:0	8	->
water	35:59	0:0	8	p
op	35:60	0:0	8	[
water	35:61	0:0	8	1
op	35:62	0:0	8	]
op	35:63	0:0	8	.
water	35:64	0:0	8	i_pitch
op	35:72	0:0	8	+
water	36:23	0:0	8	p_pict
op	36:29	0:0	8	->
water	36:31	0:0	8	p
op	36:32	0:0	8	[
water	36:33	0:0	8	1
op	36:34	0:0	8	]
op	36:35	0:0	8	.
water	36:36	0:0	8	i_visible_pitch
op	36:52	0:0	8	-
water	36:54	0:0	8	1
water	36:56	0:0	8	)
arg	37:20	37:70	7	p_sys->i_width/2-p_pict->p[1].i_visible_pitch
water	37:20	0:0	8	p_sys
op	37:25	0:0	8	->
water	37:27	0:0	8	i_width
op	37:35	0:0	8	/
water	37:37	0:0	8	2
op	37:39	0:0	8	-
water	37:41	0:0	8	p_pict
op	37:47	0:0	8	->
water	37:49	0:0	8	p
op	37:50	0:0	8	[
water	37:51	0:0	8	1
op	37:52	0:0	8	]
op	37:53	0:0	8	.
water	37:54	0:0	8	i_visible_pitch
water	37:71	0:0	6	;
call	38:12	42:70	6	memset
arg	38:20	39:48	7	p_pict->p[2].p_pixels+i*p_pict->p[2].i_pitch+p_pict->p[2].i_visible_pitch
water	38:20	0:0	8	p_pict
op	38:26	0:0	8	->
water	38:28	0:0	8	p
op	38:29	0:0	8	[
water	38:30	0:0	8	2
op	38:31	0:0	8	]
op	38:32	0:0	8	.
water	38:33	0:0	8	p_pixels
op	38:42	0:0	8	+
water	38:44	0:0	8	i
op	38:46	0:0	8	*
water	38:48	0:0	8	p_pict
op	38:54	0:0	8	->
water	38:56	0:0	8	p
op	38:57	0:0	8	[
water	38:58	0:0	8	2
op	38:59	0:0	8	]
op	38:60	0:0	8	.
water	38:61	0:0	8	i_pitch
op	38:69	0:0	8	+
water	39:20	0:0	8	p_pict
op	39:26	0:0	8	->
water	39:28	0:0	8	p
op	39:29	0:0	8	[
water	39:30	0:0	8	2
op	39:31	0:0	8	]
op	39:32	0:0	8	.
water	39:33	0:0	8	i_visible_pitch
arg	40:20	41:57	7	*(p_pict->p[2].p_pixels+i*p_pict->p[2].i_pitch+p_pict->p[2].i_visible_pitch-1)
op	40:20	0:0	8	*
water	40:21	0:0	8	(
water	40:23	0:0	8	p_pict
op	40:29	0:0	8	->
water	40:31	0:0	8	p
op	40:32	0:0	8	[
water	40:33	0:0	8	2
op	40:34	0:0	8	]
op	40:35	0:0	8	.
water	40:36	0:0	8	p_pixels
op	40:45	0:0	8	+
water	40:47	0:0	8	i
op	40:49	0:0	8	*
water	40:51	0:0	8	p_pict
op	40:57	0:0	8	->
water	40:59	0:0	8	p
op	40:60	0:0	8	[
water	40:61	0:0	8	2
op	40:62	0:0	8	]
op	40:63	0:0	8	.
water	40:64	0:0	8	i_pitch
op	40:72	0:0	8	+
water	41:23	0:0	8	p_pict
op	41:29	0:0	8	->
water	41:31	0:0	8	p
op	41:32	0:0	8	[
water	41:33	0:0	8	2
op	41:34	0:0	8	]
op	41:35	0:0	8	.
water	41:36	0:0	8	i_visible_pitch
op	41:52	0:0	8	-
water	41:54	0:0	8	1
water	41:56	0:0	8	)
arg	42:20	42:70	7	p_sys->i_width/2-p_pict->p[2].i_visible_pitch
water	42:20	0:0	8	p_sys
op	42:25	0:0	8	->
water	42:27	0:0	8	i_width
op	42:35	0:0	8	/
water	42:37	0:0	8	2
op	42:39	0:0	8	-
water	42:41	0:0	8	p_pict
op	42:47	0:0	8	->
water	42:49	0:0	8	p
op	42:50	0:0	8	[
water	42:51	0:0	8	2
op	42:52	0:0	8	]
op	42:53	0:0	8	.
water	42:54	0:0	8	i_visible_pitch
water	42:71	0:0	6	;
water	43:8	0:0	6	}
water	44:4	0:0	4	}
if	45:4	59:4	2	(p_pict -> p [ 0 ] . i_visible_lines < ( int ) p_sys -> i_height)
cond	45:8	45:51	3	p_pict -> p [ 0 ] . i_visible_lines < ( int ) p_sys -> i_height
water	45:8	0:0	4	p_pict
op	45:14	0:0	4	->
water	45:16	0:0	4	p
op	45:17	0:0	4	[
water	45:18	0:0	4	0
op	45:19	0:0	4	]
op	45:20	0:0	4	.
water	45:21	0:0	4	i_visible_lines
op	45:37	0:0	4	<
water	45:39	0:0	4	(
water	45:40	0:0	4	int
water	45:43	0:0	4	)
water	45:44	0:0	4	p_sys
op	45:49	0:0	4	->
water	45:51	0:0	4	i_height
stmts	46:4	59:4	3	
water	46:4	0:0	4	{
for	47:8	51:8	4	(i = p_pict -> p [ 0 ] . i_visible_lines ;i < p_sys -> i_height;i ++)
forinit	47:13	47:45	5	i = p_pict -> p [ 0 ] . i_visible_lines ;
water	47:13	0:0	6	i
op	47:15	0:0	6	=
water	47:17	0:0	6	p_pict
op	47:23	0:0	6	->
water	47:25	0:0	6	p
op	47:26	0:0	6	[
water	47:27	0:0	6	0
op	47:28	0:0	6	]
op	47:29	0:0	6	.
water	47:30	0:0	6	i_visible_lines
water	47:45	0:0	6	;
cond	47:47	47:58	5	i < p_sys -> i_height
water	47:47	0:0	6	i
op	47:49	0:0	6	<
water	47:51	0:0	6	p_sys
op	47:56	0:0	6	->
water	47:58	0:0	6	i_height
forexpr	47:68	47:69	5	i ++
water	47:68	0:0	6	i
op	47:69	0:0	6	++
stmts	48:8	51:8	5	
water	48:8	0:0	6	{
call	49:12	50:35	6	memset
arg	49:20	49:68	7	p_pict->p[0].p_pixels+i*p_pict->p[0].i_pitch
water	49:20	0:0	8	p_pict
op	49:26	0:0	8	->
water	49:28	0:0	8	p
op	49:29	0:0	8	[
water	49:30	0:0	8	0
op	49:31	0:0	8	]
op	49:32	0:0	8	.
water	49:33	0:0	8	p_pixels
op	49:42	0:0	8	+
water	49:44	0:0	8	i
op	49:46	0:0	8	*
water	49:48	0:0	8	p_pict
op	49:54	0:0	8	->
water	49:56	0:0	8	p
op	49:57	0:0	8	[
water	49:58	0:0	8	0
op	49:59	0:0	8	]
op	49:60	0:0	8	.
water	49:61	0:0	8	i_pitch
arg	49:70	49:71	7	0
water	49:70	0:0	8	0
arg	50:20	50:35	7	p_sys->i_width
water	50:20	0:0	8	p_sys
op	50:25	0:0	8	->
water	50:27	0:0	8	i_width
water	50:36	0:0	6	;
water	51:8	0:0	6	}
for	52:8	58:8	4	(i = p_pict -> p [ 1 ] . i_visible_lines ;i < p_sys -> i_height / 2;i ++)
forinit	52:13	52:45	5	i = p_pict -> p [ 1 ] . i_visible_lines ;
water	52:13	0:0	6	i
op	52:15	0:0	6	=
water	52:17	0:0	6	p_pict
op	52:23	0:0	6	->
water	52:25	0:0	6	p
op	52:26	0:0	6	[
water	52:27	0:0	6	1
op	52:28	0:0	6	]
op	52:29	0:0	6	.
water	52:30	0:0	6	i_visible_lines
water	52:45	0:0	6	;
cond	52:47	52:69	5	i < p_sys -> i_height / 2
water	52:47	0:0	6	i
op	52:49	0:0	6	<
water	52:51	0:0	6	p_sys
op	52:56	0:0	6	->
water	52:58	0:0	6	i_height
op	52:67	0:0	6	/
water	52:69	0:0	6	2
forexpr	52:72	52:73	5	i ++
water	52:72	0:0	6	i
op	52:73	0:0	6	++
stmts	53:8	58:8	5	
water	53:8	0:0	6	{
call	54:12	55:39	6	memset
arg	54:20	54:68	7	p_pict->p[1].p_pixels+i*p_pict->p[1].i_pitch
water	54:20	0:0	8	p_pict
op	54:26	0:0	8	->
water	54:28	0:0	8	p
op	54:29	0:0	8	[
water	54:30	0:0	8	1
op	54:31	0:0	8	]
op	54:32	0:0	8	.
water	54:33	0:0	8	p_pixels
op	54:42	0:0	8	+
water	54:44	0:0	8	i
op	54:46	0:0	8	*
water	54:48	0:0	8	p_pict
op	54:54	0:0	8	->
water	54:56	0:0	8	p
op	54:57	0:0	8	[
water	54:58	0:0	8	1
op	54:59	0:0	8	]
op	54:60	0:0	8	.
water	54:61	0:0	8	i_pitch
arg	54:70	54:74	7	0x80
water	54:70	0:0	8	0
water	54:71	0:0	8	x80
arg	55:20	55:39	7	p_sys->i_width/2
water	55:20	0:0	8	p_sys
op	55:25	0:0	8	->
water	55:27	0:0	8	i_width
op	55:35	0:0	8	/
water	55:37	0:0	8	2
water	55:40	0:0	6	;
call	56:12	57:39	6	memset
arg	56:20	56:68	7	p_pict->p[2].p_pixels+i*p_pict->p[2].i_pitch
water	56:20	0:0	8	p_pict
op	56:26	0:0	8	->
water	56:28	0:0	8	p
op	56:29	0:0	8	[
water	56:30	0:0	8	2
op	56:31	0:0	8	]
op	56:32	0:0	8	.
water	56:33	0:0	8	p_pixels
op	56:42	0:0	8	+
water	56:44	0:0	8	i
op	56:46	0:0	8	*
water	56:48	0:0	8	p_pict
op	56:54	0:0	8	->
water	56:56	0:0	8	p
op	56:57	0:0	8	[
water	56:58	0:0	8	2
op	56:59	0:0	8	]
op	56:60	0:0	8	.
water	56:61	0:0	8	i_pitch
arg	56:70	56:74	7	0x80
water	56:70	0:0	8	0
water	56:71	0:0	8	x80
arg	57:20	57:39	7	p_sys->i_width/2
water	57:20	0:0	8	p_sys
op	57:25	0:0	8	->
water	57:27	0:0	8	i_width
op	57:35	0:0	8	/
water	57:37	0:0	8	2
water	57:40	0:0	6	;
water	58:8	0:0	6	}
water	59:4	0:0	4	}
water	62:4	0:0	2	ycbcr
op	62:9	0:0	2	[
water	62:10	0:0	2	0
op	62:11	0:0	2	]
op	62:12	0:0	2	.
water	62:13	0:0	2	width
op	62:19	0:0	2	=
water	62:21	0:0	2	p_sys
op	62:26	0:0	2	->
water	62:28	0:0	2	i_width
water	62:35	0:0	2	;
water	63:4	0:0	2	ycbcr
op	63:9	0:0	2	[
water	63:10	0:0	2	0
op	63:11	0:0	2	]
op	63:12	0:0	2	.
water	63:13	0:0	2	height
op	63:20	0:0	2	=
water	63:22	0:0	2	p_sys
op	63:27	0:0	2	->
water	63:29	0:0	2	i_height
water	63:37	0:0	2	;
water	64:4	0:0	2	ycbcr
op	64:9	0:0	2	[
water	64:10	0:0	2	0
op	64:11	0:0	2	]
op	64:12	0:0	2	.
water	64:13	0:0	2	stride
op	64:20	0:0	2	=
water	64:22	0:0	2	p_pict
op	64:28	0:0	2	->
water	64:30	0:0	2	p
op	64:31	0:0	2	[
water	64:32	0:0	2	0
op	64:33	0:0	2	]
op	64:34	0:0	2	.
water	64:35	0:0	2	i_pitch
water	64:42	0:0	2	;
water	65:4	0:0	2	ycbcr
op	65:9	0:0	2	[
water	65:10	0:0	2	0
op	65:11	0:0	2	]
op	65:12	0:0	2	.
water	65:13	0:0	2	data
op	65:18	0:0	2	=
water	65:20	0:0	2	p_pict
op	65:26	0:0	2	->
water	65:28	0:0	2	p
op	65:29	0:0	2	[
water	65:30	0:0	2	0
op	65:31	0:0	2	]
op	65:32	0:0	2	.
water	65:33	0:0	2	p_pixels
water	65:41	0:0	2	;
water	66:4	0:0	2	ycbcr
op	66:9	0:0	2	[
water	66:10	0:0	2	1
op	66:11	0:0	2	]
op	66:12	0:0	2	.
water	66:13	0:0	2	width
op	66:19	0:0	2	=
water	66:21	0:0	2	p_sys
op	66:26	0:0	2	->
water	66:28	0:0	2	i_width
op	66:36	0:0	2	/
water	66:38	0:0	2	2
water	66:39	0:0	2	;
water	67:4	0:0	2	ycbcr
op	67:9	0:0	2	[
water	67:10	0:0	2	1
op	67:11	0:0	2	]
op	67:12	0:0	2	.
water	67:13	0:0	2	height
op	67:20	0:0	2	=
water	67:22	0:0	2	p_sys
op	67:27	0:0	2	->
water	67:29	0:0	2	i_height
op	67:38	0:0	2	/
water	67:40	0:0	2	2
water	67:41	0:0	2	;
water	68:4	0:0	2	ycbcr
op	68:9	0:0	2	[
water	68:10	0:0	2	1
op	68:11	0:0	2	]
op	68:12	0:0	2	.
water	68:13	0:0	2	stride
op	68:20	0:0	2	=
water	68:22	0:0	2	p_pict
op	68:28	0:0	2	->
water	68:30	0:0	2	p
op	68:31	0:0	2	[
water	68:32	0:0	2	1
op	68:33	0:0	2	]
op	68:34	0:0	2	.
water	68:35	0:0	2	i_pitch
water	68:42	0:0	2	;
water	69:4	0:0	2	ycbcr
op	69:9	0:0	2	[
water	69:10	0:0	2	1
op	69:11	0:0	2	]
op	69:12	0:0	2	.
water	69:13	0:0	2	data
op	69:18	0:0	2	=
water	69:20	0:0	2	p_pict
op	69:26	0:0	2	->
water	69:28	0:0	2	p
op	69:29	0:0	2	[
water	69:30	0:0	2	1
op	69:31	0:0	2	]
op	69:32	0:0	2	.
water	69:33	0:0	2	p_pixels
water	69:41	0:0	2	;
water	70:4	0:0	2	ycbcr
op	70:9	0:0	2	[
water	70:10	0:0	2	2
op	70:11	0:0	2	]
op	70:12	0:0	2	.
water	70:13	0:0	2	width
op	70:19	0:0	2	=
water	70:21	0:0	2	p_sys
op	70:26	0:0	2	->
water	70:28	0:0	2	i_width
op	70:36	0:0	2	/
water	70:38	0:0	2	2
water	70:39	0:0	2	;
water	71:4	0:0	2	ycbcr
op	71:9	0:0	2	[
water	71:10	0:0	2	2
op	71:11	0:0	2	]
op	71:12	0:0	2	.
water	71:13	0:0	2	height
op	71:20	0:0	2	=
water	71:22	0:0	2	p_sys
op	71:27	0:0	2	->
water	71:29	0:0	2	i_height
op	71:38	0:0	2	/
water	71:40	0:0	2	2
water	71:41	0:0	2	;
water	72:4	0:0	2	ycbcr
op	72:9	0:0	2	[
water	72:10	0:0	2	2
op	72:11	0:0	2	]
op	72:12	0:0	2	.
water	72:13	0:0	2	stride
op	72:20	0:0	2	=
water	72:22	0:0	2	p_pict
op	72:28	0:0	2	->
water	72:30	0:0	2	p
op	72:31	0:0	2	[
water	72:32	0:0	2	1
op	72:33	0:0	2	]
op	72:34	0:0	2	.
water	72:35	0:0	2	i_pitch
water	72:42	0:0	2	;
water	73:4	0:0	2	ycbcr
op	73:9	0:0	2	[
water	73:10	0:0	2	2
op	73:11	0:0	2	]
op	73:12	0:0	2	.
water	73:13	0:0	2	data
op	73:18	0:0	2	=
water	73:20	0:0	2	p_pict
op	73:26	0:0	2	->
water	73:28	0:0	2	p
op	73:29	0:0	2	[
water	73:30	0:0	2	2
op	73:31	0:0	2	]
op	73:32	0:0	2	.
water	73:33	0:0	2	p_pixels
water	73:41	0:0	2	;
if	74:4	78:4	2	(th_encode_ycbcr_in (p_sys -> tcx ,ycbcr ) < 0)
cond	74:8	74:50	3	th_encode_ycbcr_in (p_sys -> tcx ,ycbcr ) < 0
call	74:8	74:46	4	th_encode_ycbcr_in
arg	74:28	74:38	5	p_sys->tcx
water	74:28	0:0	6	p_sys
op	74:33	0:0	6	->
water	74:35	0:0	6	tcx
arg	74:40	74:46	5	ycbcr
water	74:40	0:0	6	ycbcr
op	74:48	0:0	4	<
water	74:50	0:0	4	0
stmts	75:4	78:4	3	
water	75:4	0:0	4	{
call	76:8	76:51	4	msg_Warn
arg	76:18	76:23	5	p_enc
water	76:18	0:0	6	p_enc
arg	76:25	76:51	5	"failed encoding a frame"
water	76:25	0:0	6	"failed encoding a frame"
water	76:52	0:0	4	;
return	77:8	77:19	4	NULL
water	77:15	0:0	5	NULL
water	78:4	0:0	4	}
call	79:4	79:51	2	th_encode_packetout
arg	79:25	79:35	3	p_sys->tcx
water	79:25	0:0	4	p_sys
op	79:30	0:0	4	->
water	79:32	0:0	4	tcx
arg	79:37	79:38	3	0
water	79:37	0:0	4	0
arg	79:40	79:51	3	&oggpacket
op	79:40	0:0	4	&
water	79:41	0:0	4	oggpacket
water	79:52	0:0	2	;
water	81:4	0:0	2	p_block
op	81:12	0:0	2	=
call	81:14	81:43	2	block_Alloc
arg	81:27	81:43	3	oggpacket.bytes
water	81:27	0:0	4	oggpacket
op	81:36	0:0	4	.
water	81:37	0:0	4	bytes
water	81:44	0:0	2	;
call	82:4	82:65	2	memcpy
arg	82:12	82:29	3	p_block->p_buffer
water	82:12	0:0	4	p_block
op	82:19	0:0	4	->
water	82:21	0:0	4	p_buffer
arg	82:31	82:47	3	oggpacket.packet
water	82:31	0:0	4	oggpacket
op	82:40	0:0	4	.
water	82:41	0:0	4	packet
arg	82:49	82:65	3	oggpacket.bytes
water	82:49	0:0	4	oggpacket
op	82:58	0:0	4	.
water	82:59	0:0	4	bytes
water	82:66	0:0	2	;
water	83:4	0:0	2	p_block
op	83:11	0:0	2	->
water	83:13	0:0	2	i_dts
op	83:19	0:0	2	=
water	83:21	0:0	2	p_block
op	83:28	0:0	2	->
water	83:30	0:0	2	i_pts
op	83:36	0:0	2	=
water	83:38	0:0	2	p_pict
op	83:44	0:0	2	->
water	83:46	0:0	2	date
water	83:50	0:0	2	;
if	84:4	87:4	2	(th_packet_iskeyframe (& oggpacket ))
cond	84:8	84:41	3	th_packet_iskeyframe (& oggpacket )
call	84:8	84:41	4	th_packet_iskeyframe
arg	84:30	84:41	5	&oggpacket
op	84:30	0:0	6	&
water	84:31	0:0	6	oggpacket
stmts	85:4	87:4	3	
water	85:4	0:0	4	{
water	86:8	0:0	4	p_block
op	86:15	0:0	4	->
water	86:17	0:0	4	i_flags
op	86:25	0:0	4	|=
water	86:28	0:0	4	BLOCK_FLAG_TYPE_I
water	86:45	0:0	4	;
water	87:4	0:0	4	}
return	88:4	88:18	2	p_block
water	88:11	0:0	3	p_block
