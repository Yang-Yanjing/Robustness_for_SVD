func	2:0	21:0	0	static int	oldmovie_dark_border_effect
params	2:38	0:0	1	
param	2:40	2:58	2	filter_t *	p_filter
param	2:60	2:81	2	picture_t *	p_pic_out
stmnts	0:0	20:22	1	
decl	4:4	4:41	2	filter_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	p_filter
op	4:34	0:0	2	->
water	4:36	0:0	2	p_sys
for	6:4	19:8	2	( int32_t i_y = 0 ;i_y < p_sys -> i_height [ Y_PLANE ];i_y ++)
forinit	0:0	6:25	3	 int32_t i_y = 0 ;
decl	6:10	6:25	4	int32_t	i_y
op	6:22	0:0	4	=
water	6:24	0:0	4	0
cond	6:27	6:56	3	i_y < p_sys -> i_height [ Y_PLANE ]
water	6:27	0:0	4	i_y
op	6:31	0:0	4	<
water	6:33	0:0	4	p_sys
op	6:38	0:0	4	->
water	6:40	0:0	4	i_height
op	6:48	0:0	4	[
water	6:49	0:0	4	Y_PLANE
op	6:56	0:0	4	]
forexpr	6:59	6:62	3	i_y ++
water	6:59	0:0	4	i_y
op	6:62	0:0	4	++
stmts	7:8	19:8	3	
for	7:8	19:8	4	( int32_t i_x = 0 ;i_x < p_sys -> i_width [ Y_PLANE ];i_x ++)
forinit	0:0	7:29	5	 int32_t i_x = 0 ;
decl	7:14	7:29	6	int32_t	i_x
op	7:26	0:0	6	=
water	7:28	0:0	6	0
cond	7:31	7:59	5	i_x < p_sys -> i_width [ Y_PLANE ]
water	7:31	0:0	6	i_x
op	7:35	0:0	6	<
water	7:37	0:0	6	p_sys
op	7:42	0:0	6	->
water	7:44	0:0	6	i_width
op	7:51	0:0	6	[
water	7:52	0:0	6	Y_PLANE
op	7:59	0:0	6	]
forexpr	7:62	7:65	5	i_x ++
water	7:62	0:0	6	i_x
op	7:65	0:0	6	++
stmts	7:70	19:8	5	
water	7:70	0:0	6	{
decl	8:12	8:80	6	int32_t	i_x_border_dist
op	8:36	0:0	6	=
call	8:38	8:79	7	__MIN
arg	8:45	8:48	8	i_x
water	8:45	0:0	9	i_x
arg	8:50	8:79	8	p_sys->i_width[Y_PLANE]-i_x
water	8:50	0:0	9	p_sys
op	8:55	0:0	9	->
water	8:57	0:0	9	i_width
op	8:64	0:0	9	[
water	8:65	0:0	9	Y_PLANE
op	8:72	0:0	9	]
op	8:74	0:0	9	-
water	8:76	0:0	9	i_x
decl	9:12	9:81	6	int32_t	i_y_border_dist
op	9:36	0:0	6	=
call	9:38	9:80	7	__MIN
arg	9:45	9:48	8	i_y
water	9:45	0:0	9	i_y
arg	9:50	9:80	8	p_sys->i_height[Y_PLANE]-i_y
water	9:50	0:0	9	p_sys
op	9:55	0:0	9	->
water	9:57	0:0	9	i_height
op	9:65	0:0	9	[
water	9:66	0:0	9	Y_PLANE
op	9:73	0:0	9	]
op	9:75	0:0	9	-
water	9:77	0:0	9	i_y
decl	10:12	11:74	6	int32_t	i_border_dist
op	10:34	0:0	6	=
call	10:36	10:73	7	__MAX
arg	10:42	10:71	8	BORDER_DIST-i_x_border_dist
water	10:42	0:0	9	BORDER_DIST
op	10:54	0:0	9	-
water	10:56	0:0	9	i_x_border_dist
arg	10:72	10:73	8	0
water	10:72	0:0	9	0
op	11:34	0:0	6	+
call	11:36	11:73	7	__MAX
arg	11:42	11:71	8	BORDER_DIST-i_y_border_dist
water	11:42	0:0	9	BORDER_DIST
op	11:54	0:0	9	-
water	11:56	0:0	9	i_y_border_dist
arg	11:72	11:73	8	0
water	11:72	0:0	9	0
water	12:12	0:0	6	i_border_dist
op	12:26	0:0	6	=
call	12:28	12:60	6	__MIN
arg	12:34	12:45	7	BORDER_DIST
water	12:34	0:0	8	BORDER_DIST
arg	12:47	12:60	7	i_border_dist
water	12:47	0:0	8	i_border_dist
water	12:61	0:0	6	;
if	13:12	14:24	6	(i_border_dist == 0)
cond	13:17	13:34	7	i_border_dist == 0
water	13:17	0:0	8	i_border_dist
op	13:31	0:0	8	==
water	13:34	0:0	8	0
stmts	14:16	14:24	7	
continue	14:16	14:24	8	
decl	15:12	16:68	6	uint32_t	i_pix_ofs
op	15:31	0:0	6	=
water	15:33	0:0	6	i_x
op	15:37	0:0	6	*
water	15:39	0:0	6	p_pic_out
op	15:48	0:0	6	->
water	15:50	0:0	6	p
op	15:51	0:0	6	[
water	15:52	0:0	6	Y_PLANE
op	15:59	0:0	6	]
op	15:60	0:0	6	.
water	15:61	0:0	6	i_pixel_pitch
op	16:31	0:0	6	+
water	16:33	0:0	6	i_y
op	16:37	0:0	6	*
water	16:39	0:0	6	p_pic_out
op	16:48	0:0	6	->
water	16:50	0:0	6	p
op	16:51	0:0	6	[
water	16:52	0:0	6	Y_PLANE
op	16:59	0:0	6	]
op	16:60	0:0	6	.
water	16:61	0:0	6	i_pitch
call	17:12	18:58	6	SUB_MIN
arg	17:21	17:62	7	p_pic_out->p[Y_PLANE].p_pixels[i_pix_ofs]
water	17:21	0:0	8	p_pic_out
op	17:30	0:0	8	->
water	17:32	0:0	8	p
op	17:33	0:0	8	[
water	17:34	0:0	8	Y_PLANE
op	17:41	0:0	8	]
op	17:42	0:0	8	.
water	17:43	0:0	8	p_pixels
op	17:51	0:0	8	[
water	17:52	0:0	8	i_pix_ofs
op	17:61	0:0	8	]
arg	18:21	18:54	7	i_border_dist*255/BORDER_DIST
water	18:21	0:0	8	i_border_dist
op	18:35	0:0	8	*
water	18:37	0:0	8	255
op	18:41	0:0	8	/
water	18:43	0:0	8	BORDER_DIST
arg	18:56	18:58	7	0
water	18:56	0:0	8	0
water	18:59	0:0	6	;
water	19:8	0:0	6	}
return	20:4	20:22	2	VLC_SUCCESS
water	20:11	0:0	3	VLC_SUCCESS
