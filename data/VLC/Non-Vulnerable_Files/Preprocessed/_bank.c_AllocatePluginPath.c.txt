func	2:0	48:0	0	static void	AllocatePluginPath
params	2:31	0:0	1	
param	2:32	2:52	2	vlc_object_t *	p_this
param	2:54	2:70	2	const char *	path
param	3:32	3:49	2	cache_mode_t	mode
stmnts	0:0	47:4	1	
decl	5:4	5:22	2	module_bank_t	bank
decl	6:4	6:32	2	module_cache_t	*cache
op	6:26	0:0	2	=
water	6:28	0:0	2	NULL
decl	7:4	7:20	2	size_t	count
op	7:17	0:0	2	=
water	7:19	0:0	2	0
switch	8:4	18:4	2	(mode)
cond	8:12	8:12	3	mode
water	8:12	0:0	4	mode
stmts	9:4	18:4	3	
water	9:4	0:0	4	{
label	10:8	10:22	4	case CACHE_USE :
water	11:12	0:0	4	count
op	11:18	0:0	4	=
call	11:20	11:52	4	CacheLoad
arg	11:31	11:37	5	p_this
water	11:31	0:0	6	p_this
arg	11:39	11:43	5	path
water	11:39	0:0	6	path
arg	11:45	11:52	5	&cache
op	11:45	0:0	6	&
water	11:46	0:0	6	cache
water	11:53	0:0	4	;
break	12:12	12:17	4	
label	13:8	13:24	4	case CACHE_RESET :
call	14:12	14:38	4	CacheDelete
arg	14:25	14:31	5	p_this
water	14:25	0:0	6	p_this
arg	14:33	14:38	5	path
water	14:33	0:0	6	path
water	14:39	0:0	4	;
break	15:12	15:17	4	
label	16:8	16:25	4	case CACHE_IGNORE :
call	17:12	17:59	4	msg_Dbg
arg	17:21	17:27	5	p_this
water	17:21	0:0	6	p_this
arg	17:29	17:59	5	"ignoring plugins cache file"
water	17:29	0:0	6	"ignoring plugins cache file"
water	17:60	0:0	4	;
water	18:4	0:0	4	}
call	19:4	19:55	2	msg_Dbg
arg	19:13	19:19	3	p_this
water	19:13	0:0	4	p_this
arg	19:21	19:48	3	"recursively browsing `%s'"
water	19:21	0:0	4	"recursively browsing `%s'"
arg	19:50	19:55	3	path
water	19:50	0:0	4	path
water	19:56	0:0	2	;
water	20:4	0:0	2	bank
op	20:8	0:0	2	.
water	20:9	0:0	2	obj
op	20:13	0:0	2	=
water	20:15	0:0	2	p_this
water	20:21	0:0	2	;
water	21:4	0:0	2	bank
op	21:8	0:0	2	.
water	21:9	0:0	2	base
op	21:14	0:0	2	=
water	21:16	0:0	2	path
water	21:20	0:0	2	;
water	22:4	0:0	2	bank
op	22:8	0:0	2	.
water	22:9	0:0	2	mode
op	22:14	0:0	2	=
water	22:16	0:0	2	mode
water	22:20	0:0	2	;
water	23:4	0:0	2	bank
op	23:8	0:0	2	.
water	23:9	0:0	2	cache
op	23:15	0:0	2	=
water	23:17	0:0	2	NULL
water	23:21	0:0	2	;
water	24:4	0:0	2	bank
op	24:8	0:0	2	.
water	24:9	0:0	2	i_cache
op	24:17	0:0	2	=
water	24:19	0:0	2	0
water	24:20	0:0	2	;
water	25:4	0:0	2	bank
op	25:8	0:0	2	.
water	25:9	0:0	2	loaded_cache
op	25:22	0:0	2	=
water	25:24	0:0	2	cache
water	25:29	0:0	2	;
water	26:4	0:0	2	bank
op	26:8	0:0	2	.
water	26:9	0:0	2	i_loaded_cache
op	26:24	0:0	2	=
water	26:26	0:0	2	count
water	26:31	0:0	2	;
call	28:4	28:43	2	AllocatePluginDir
arg	28:23	28:28	3	&bank
op	28:23	0:0	4	&
water	28:24	0:0	4	bank
arg	28:30	28:31	3	5
water	28:30	0:0	4	5
arg	28:33	28:37	3	path
water	28:33	0:0	4	path
arg	28:39	28:43	3	NULL
water	28:39	0:0	4	NULL
water	28:44	0:0	2	;
switch	29:4	47:4	2	(mode)
cond	29:12	29:12	3	mode
water	29:12	0:0	4	mode
stmts	30:4	47:4	3	
water	30:4	0:0	4	{
label	31:8	31:22	4	case CACHE_USE :
for	33:12	38:12	4	( size_t i = 0 ;i < count;i ++)
forinit	0:0	33:29	5	 size_t i = 0 ;
decl	33:17	33:29	6	size_t	i
op	33:26	0:0	6	=
water	33:28	0:0	6	0
cond	33:31	33:35	5	i < count
water	33:31	0:0	6	i
op	33:33	0:0	6	<
water	33:35	0:0	6	count
forexpr	33:42	33:43	5	i ++
water	33:42	0:0	6	i
op	33:43	0:0	6	++
stmts	34:12	38:12	5	
water	34:12	0:0	6	{
if	35:16	36:57	6	(cache [ i ] . p_module != NULL)
cond	35:20	35:41	7	cache [ i ] . p_module != NULL
water	35:20	0:0	8	cache
op	35:25	0:0	8	[
water	35:26	0:0	8	i
op	35:27	0:0	8	]
op	35:28	0:0	8	.
water	35:29	0:0	8	p_module
op	35:38	0:0	8	!=
water	35:41	0:0	8	NULL
stmts	36:19	36:57	7	
call	36:19	36:56	8	vlc_module_destroy
arg	36:39	36:56	9	cache[i].p_module
water	36:39	0:0	10	cache
op	36:44	0:0	10	[
water	36:45	0:0	10	i
op	36:46	0:0	10	]
op	36:47	0:0	10	.
water	36:48	0:0	10	p_module
water	36:57	0:0	8	;
call	37:16	37:35	6	free
arg	37:22	37:35	7	cache[i].path
water	37:22	0:0	8	cache
op	37:27	0:0	8	[
water	37:28	0:0	8	i
op	37:29	0:0	8	]
op	37:30	0:0	8	.
water	37:31	0:0	8	path
water	37:36	0:0	6	;
water	38:12	0:0	6	}
call	39:12	39:24	4	free
arg	39:18	39:24	5	cache
water	39:18	0:0	6	cache
water	39:25	0:0	4	;
break	41:12	41:17	4	
label	43:8	43:24	4	case CACHE_RESET :
call	44:12	44:61	4	CacheSave
arg	44:23	44:29	5	p_this
water	44:23	0:0	6	p_this
arg	44:31	44:35	5	path
water	44:31	0:0	6	path
arg	44:37	44:47	5	bank.cache
water	44:37	0:0	6	bank
op	44:41	0:0	6	.
water	44:42	0:0	6	cache
arg	44:49	44:61	5	bank.i_cache
water	44:49	0:0	6	bank
op	44:53	0:0	6	.
water	44:54	0:0	6	i_cache
water	44:62	0:0	4	;
label	45:8	45:25	4	case CACHE_IGNORE :
break	46:12	46:17	4	
water	47:4	0:0	4	}
