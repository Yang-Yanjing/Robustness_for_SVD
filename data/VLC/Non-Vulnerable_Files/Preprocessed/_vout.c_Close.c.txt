func	2:0	38:0	0	static void	Close
params	2:17	0:0	1	
param	2:18	2:38	2	vlc_object_t *	p_this
stmnts	0:0	37:19	1	
decl	4:4	4:49	2	vout_display_t	*vd
op	4:23	0:0	2	=
water	4:25	0:0	2	(
water	4:26	0:0	2	vout_display_t
op	4:41	0:0	2	*
water	4:42	0:0	2	)
water	4:43	0:0	2	p_this
decl	5:4	5:39	2	vout_display_sys_t	*p_sys
op	5:30	0:0	2	=
water	5:32	0:0	2	vd
op	5:34	0:0	2	->
water	5:36	0:0	2	sys
if	6:4	33:4	2	(p_sys -> omx_handle)
cond	6:8	6:15	3	p_sys -> omx_handle
water	6:8	0:0	4	p_sys
op	6:13	0:0	4	->
water	6:15	0:0	4	omx_handle
stmts	6:27	33:4	3	
water	6:27	0:0	4	{
decl	7:8	7:27	4	OMX_STATETYPE	state
call	8:8	8:46	4	OMX_GetState
arg	8:21	8:38	5	p_sys->omx_handle
water	8:21	0:0	6	p_sys
op	8:26	0:0	6	->
water	8:28	0:0	6	omx_handle
arg	8:40	8:46	5	&state
op	8:40	0:0	6	&
water	8:41	0:0	6	state
water	8:47	0:0	4	;
if	9:8	17:8	4	(state == OMX_StateExecuting)
cond	9:12	9:21	5	state == OMX_StateExecuting
water	9:12	0:0	6	state
op	9:18	0:0	6	==
water	9:21	0:0	6	OMX_StateExecuting
stmts	9:41	17:8	5	
water	9:41	0:0	6	{
call	10:12	10:84	6	OMX_SendCommand
arg	10:28	10:45	7	p_sys->omx_handle
water	10:28	0:0	8	p_sys
op	10:33	0:0	8	->
water	10:35	0:0	8	omx_handle
arg	10:47	10:66	7	OMX_CommandStateSet
water	10:47	0:0	8	OMX_CommandStateSet
arg	10:68	10:81	7	OMX_StateIdle
water	10:68	0:0	8	OMX_StateIdle
arg	10:83	10:84	7	0
water	10:83	0:0	8	0
water	10:85	0:0	6	;
while	11:12	16:12	6	(1)
cond	11:19	11:19	7	1
water	11:19	0:0	8	1
stmts	11:22	16:12	7	
water	11:22	0:0	8	{
decl	12:16	12:34	8	OMX_U32	cmd
water	12:27	0:0	8	,
decl	12:16	12:34	8	OMX_U32	state
call	13:16	13:98	8	WaitForSpecificOmxEvent
arg	13:40	13:59	9	&p_sys->event_queue
op	13:40	0:0	10	&
water	13:41	0:0	10	p_sys
op	13:46	0:0	10	->
water	13:48	0:0	10	event_queue
arg	13:61	13:81	9	OMX_EventCmdComplete
water	13:61	0:0	10	OMX_EventCmdComplete
arg	13:83	13:87	9	&cmd
op	13:83	0:0	10	&
water	13:84	0:0	10	cmd
arg	13:89	13:95	9	&state
op	13:89	0:0	10	&
water	13:90	0:0	10	state
arg	13:97	13:98	9	0
water	13:97	0:0	10	0
water	13:99	0:0	8	;
if	14:16	15:25	8	(cmd == OMX_CommandStateSet && state == OMX_StateIdle)
cond	14:20	14:59	9	cmd == OMX_CommandStateSet && state == OMX_StateIdle
water	14:20	0:0	10	cmd
op	14:24	0:0	10	==
water	14:27	0:0	10	OMX_CommandStateSet
op	14:47	0:0	10	&&
water	14:50	0:0	10	state
op	14:56	0:0	10	==
water	14:59	0:0	10	OMX_StateIdle
stmts	15:20	15:25	9	
break	15:20	15:25	10	
water	16:12	0:0	8	}
water	17:8	0:0	6	}
call	18:8	18:46	4	OMX_GetState
arg	18:21	18:38	5	p_sys->omx_handle
water	18:21	0:0	6	p_sys
op	18:26	0:0	6	->
water	18:28	0:0	6	omx_handle
arg	18:40	18:46	5	&state
op	18:40	0:0	6	&
water	18:41	0:0	6	state
water	18:47	0:0	4	;
if	19:8	27:8	4	(state == OMX_StateIdle)
cond	19:12	19:21	5	state == OMX_StateIdle
water	19:12	0:0	6	state
op	19:18	0:0	6	==
water	19:21	0:0	6	OMX_StateIdle
stmts	19:36	27:8	5	
water	19:36	0:0	6	{
call	20:12	20:86	6	OMX_SendCommand
arg	20:28	20:45	7	p_sys->omx_handle
water	20:28	0:0	8	p_sys
op	20:33	0:0	8	->
water	20:35	0:0	8	omx_handle
arg	20:47	20:66	7	OMX_CommandStateSet
water	20:47	0:0	8	OMX_CommandStateSet
arg	20:68	20:83	7	OMX_StateLoaded
water	20:68	0:0	8	OMX_StateLoaded
arg	20:85	20:86	7	0
water	20:85	0:0	8	0
water	20:87	0:0	6	;
for	21:12	25:12	6	( unsigned int i = 0 ;i < p_sys -> port . i_buffers;i ++)
forinit	0:0	21:35	7	 unsigned int i = 0 ;
decl	21:17	21:35	8	unsigned int	i
op	21:32	0:0	8	=
water	21:34	0:0	8	0
cond	21:37	21:53	7	i < p_sys -> port . i_buffers
water	21:37	0:0	8	i
op	21:39	0:0	8	<
water	21:41	0:0	8	p_sys
op	21:46	0:0	8	->
water	21:48	0:0	8	port
op	21:52	0:0	8	.
water	21:53	0:0	8	i_buffers
forexpr	21:64	21:65	7	i ++
water	21:64	0:0	8	i
op	21:65	0:0	8	++
stmts	21:69	25:12	7	
water	21:69	0:0	8	{
decl	22:16	22:46	8	OMX_BUFFERHEADERTYPE	*p_buffer
call	23:16	23:56	8	OMX_FIFO_GET
arg	23:29	23:46	9	&p_sys->port.fifo
op	23:29	0:0	10	&
water	23:30	0:0	10	p_sys
op	23:35	0:0	10	->
water	23:37	0:0	10	port
op	23:41	0:0	10	.
water	23:42	0:0	10	fifo
arg	23:48	23:56	9	p_buffer
water	23:48	0:0	10	p_buffer
water	23:57	0:0	8	;
call	24:16	24:84	8	OMX_FreeBuffer
arg	24:31	24:48	9	p_sys->omx_handle
water	24:31	0:0	10	p_sys
op	24:36	0:0	10	->
water	24:38	0:0	10	omx_handle
arg	24:50	24:74	9	p_sys->port.i_port_index
water	24:50	0:0	10	p_sys
op	24:55	0:0	10	->
water	24:57	0:0	10	port
op	24:61	0:0	10	.
water	24:62	0:0	10	i_port_index
arg	24:76	24:84	9	p_buffer
water	24:76	0:0	10	p_buffer
water	24:85	0:0	8	;
water	25:12	0:0	8	}
call	26:12	26:86	6	WaitForSpecificOmxEvent
arg	26:36	26:55	7	&p_sys->event_queue
op	26:36	0:0	8	&
water	26:37	0:0	8	p_sys
op	26:42	0:0	8	->
water	26:44	0:0	8	event_queue
arg	26:57	26:77	7	OMX_EventCmdComplete
water	26:57	0:0	8	OMX_EventCmdComplete
arg	26:79	26:80	7	0
water	26:79	0:0	8	0
arg	26:82	26:83	7	0
water	26:82	0:0	8	0
arg	26:85	26:86	7	0
water	26:85	0:0	8	0
water	26:87	0:0	6	;
water	27:8	0:0	6	}
call	28:8	28:35	4	free
arg	28:13	28:35	5	p_sys->port.pp_buffers
water	28:13	0:0	6	p_sys
op	28:18	0:0	6	->
water	28:20	0:0	6	port
op	28:24	0:0	6	.
water	28:25	0:0	6	pp_buffers
water	28:36	0:0	4	;
call	29:8	29:40	4	pf_free_handle
arg	29:23	29:40	5	p_sys->omx_handle
water	29:23	0:0	6	p_sys
op	29:28	0:0	6	->
water	29:30	0:0	6	omx_handle
water	29:41	0:0	4	;
call	30:8	30:47	4	DeinitOmxEventQueue
arg	30:28	30:47	5	&p_sys->event_queue
op	30:28	0:0	6	&
water	30:29	0:0	6	p_sys
op	30:34	0:0	6	->
water	30:36	0:0	6	event_queue
water	30:48	0:0	4	;
call	31:8	31:48	4	vlc_mutex_destroy
arg	31:26	31:48	5	&p_sys->port.fifo.lock
op	31:26	0:0	6	&
water	31:27	0:0	6	p_sys
op	31:32	0:0	6	->
water	31:34	0:0	6	port
op	31:38	0:0	6	.
water	31:39	0:0	6	fifo
op	31:43	0:0	6	.
water	31:44	0:0	6	lock
water	31:49	0:0	4	;
call	32:8	32:47	4	vlc_cond_destroy
arg	32:25	32:47	5	&p_sys->port.fifo.wait
op	32:25	0:0	6	&
water	32:26	0:0	6	p_sys
op	32:31	0:0	6	->
water	32:33	0:0	6	port
op	32:37	0:0	6	.
water	32:38	0:0	6	fifo
op	32:42	0:0	6	.
water	32:43	0:0	6	wait
water	32:48	0:0	4	;
water	33:4	0:0	4	}
if	34:4	35:40	2	(p_sys -> pool)
cond	34:8	34:15	3	p_sys -> pool
water	34:8	0:0	4	p_sys
op	34:13	0:0	4	->
water	34:15	0:0	4	pool
stmts	35:8	35:40	3	
call	35:8	35:39	4	picture_pool_Delete
arg	35:28	35:39	5	p_sys->pool
water	35:28	0:0	6	p_sys
op	35:33	0:0	6	->
water	35:35	0:0	6	pool
water	35:40	0:0	4	;
call	36:4	36:14	2	free
arg	36:9	36:14	3	p_sys
water	36:9	0:0	4	p_sys
water	36:15	0:0	2	;
call	37:4	37:18	2	DeinitOmxCore
water	37:19	0:0	2	;
