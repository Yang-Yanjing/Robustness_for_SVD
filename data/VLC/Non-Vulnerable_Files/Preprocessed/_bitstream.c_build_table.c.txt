func	2:0	97:0	0	static int	build_table
params	2:22	0:0	1	
param	2:23	2:31	2	VLC *	vlc
param	2:33	2:50	2	int	table_nb_bits
param	3:23	3:35	2	int	nb_codes
param	4:23	4:39	2	const void *	bits
param	4:41	4:54	2	int	bits_wrap
param	4:56	4:69	2	int	bits_size
param	5:23	5:40	2	const void *	codes
param	5:42	5:56	2	int	codes_wrap
param	5:58	5:72	2	int	codes_size
param	6:23	6:43	2	uint32_t	code_prefix
param	6:45	6:57	2	int	n_prefix
stmnts	0:0	96:22	1	
decl	8:4	8:72	2	int	i
water	8:9	0:0	2	,
decl	8:4	8:72	2	int	j
water	8:12	0:0	2	,
decl	8:4	8:72	2	int	k
water	8:15	0:0	2	,
decl	8:4	8:72	2	int	n
water	8:18	0:0	2	,
decl	8:4	8:72	2	int	table_size
water	8:30	0:0	2	,
decl	8:4	8:72	2	int	table_index
water	8:43	0:0	2	,
decl	8:4	8:72	2	int	nb
water	8:47	0:0	2	,
decl	8:4	8:72	2	int	n1
water	8:51	0:0	2	,
decl	8:4	8:72	2	int	index
water	8:58	0:0	2	,
decl	8:4	8:72	2	int	code_prefix2
decl	9:4	9:17	2	uint32_t	code
decl	10:4	10:17	2	int	flags
op	10:14	0:0	2	=
water	10:16	0:0	2	0
call	11:4	11:20	2	VLC_TYPE
arg	11:14	11:20	3	*table
op	11:14	0:0	4	*
water	11:15	0:0	4	table
op	11:21	0:0	2	[
water	11:22	0:0	2	2
op	11:23	0:0	2	]
water	11:24	0:0	2	;
water	12:4	0:0	2	table_size
op	12:15	0:0	2	=
water	12:17	0:0	2	1
op	12:19	0:0	2	<<
water	12:22	0:0	2	table_nb_bits
water	12:35	0:0	2	;
water	13:4	0:0	2	table_index
op	13:16	0:0	2	=
call	13:18	13:45	2	alloc_table
arg	13:30	13:33	3	vlc
water	13:30	0:0	4	vlc
arg	13:35	13:45	3	table_size
water	13:35	0:0	4	table_size
water	13:46	0:0	2	;
call	15:4	16:57	2	printf
arg	15:11	15:61	3	"new table index=%d size=%d code_prefix=%x n=%d\n"
water	15:11	0:0	4	"new table index=%d size=%d code_prefix=%x n=%d\n"
arg	16:11	16:22	3	table_index
water	16:11	0:0	4	table_index
arg	16:24	16:34	3	table_size
water	16:24	0:0	4	table_size
arg	16:36	16:47	3	code_prefix
water	16:36	0:0	4	code_prefix
arg	16:49	16:57	3	n_prefix
water	16:49	0:0	4	n_prefix
water	16:58	0:0	2	;
if	18:4	19:17	2	(table_index < 0)
cond	18:8	18:22	3	table_index < 0
water	18:8	0:0	4	table_index
op	18:20	0:0	4	<
water	18:22	0:0	4	0
stmts	19:8	19:17	3	
return	19:8	19:17	4	-1
op	19:15	0:0	5	-
water	19:16	0:0	5	1
water	20:4	0:0	2	table
op	20:10	0:0	2	=
op	20:12	0:0	2	&
water	20:13	0:0	2	vlc
op	20:16	0:0	2	->
water	20:18	0:0	2	table
op	20:23	0:0	2	[
water	20:24	0:0	2	table_index
op	20:35	0:0	2	]
water	20:36	0:0	2	;
for	21:4	24:4	2	(i = 0 ;i < table_size;i ++)
forinit	21:8	21:11	3	i = 0 ;
water	21:8	0:0	4	i
op	21:9	0:0	4	=
water	21:10	0:0	4	0
water	21:11	0:0	4	;
cond	21:12	21:14	3	i < table_size
water	21:12	0:0	4	i
op	21:13	0:0	4	<
water	21:14	0:0	4	table_size
forexpr	21:25	21:26	3	i ++
water	21:25	0:0	4	i
op	21:26	0:0	4	++
stmts	21:30	24:4	3	
water	21:30	0:0	4	{
water	22:8	0:0	4	table
op	22:13	0:0	4	[
water	22:14	0:0	4	i
op	22:15	0:0	4	]
op	22:16	0:0	4	[
water	22:17	0:0	4	1
op	22:18	0:0	4	]
op	22:20	0:0	4	=
water	22:22	0:0	4	0
water	22:23	0:0	4	;
water	23:8	0:0	4	table
op	23:13	0:0	4	[
water	23:14	0:0	4	i
op	23:15	0:0	4	]
op	23:16	0:0	4	[
water	23:17	0:0	4	0
op	23:18	0:0	4	]
op	23:20	0:0	4	=
op	23:22	0:0	4	-
water	23:23	0:0	4	1
water	23:24	0:0	4	;
water	24:4	0:0	4	}
for	26:4	74:4	2	(i = 0 ;i < nb_codes;i ++)
forinit	26:8	26:11	3	i = 0 ;
water	26:8	0:0	4	i
op	26:9	0:0	4	=
water	26:10	0:0	4	0
water	26:11	0:0	4	;
cond	26:12	26:14	3	i < nb_codes
water	26:12	0:0	4	i
op	26:13	0:0	4	<
water	26:14	0:0	4	nb_codes
forexpr	26:23	26:24	3	i ++
water	26:23	0:0	4	i
op	26:24	0:0	4	++
stmts	26:28	74:4	3	
water	26:28	0:0	4	{
call	27:8	27:49	4	GET_DATA
arg	27:17	27:18	5	n
water	27:17	0:0	6	n
arg	27:20	27:24	5	bits
water	27:20	0:0	6	bits
arg	27:26	27:27	5	i
water	27:26	0:0	6	i
arg	27:29	27:38	5	bits_wrap
water	27:29	0:0	6	bits_wrap
arg	27:40	27:49	5	bits_size
water	27:40	0:0	6	bits_size
water	27:50	0:0	4	;
call	28:8	28:55	4	GET_DATA
arg	28:17	28:21	5	code
water	28:17	0:0	6	code
arg	28:23	28:28	5	codes
water	28:23	0:0	6	codes
arg	28:30	28:31	5	i
water	28:30	0:0	6	i
arg	28:33	28:43	5	codes_wrap
water	28:33	0:0	6	codes_wrap
arg	28:45	28:55	5	codes_size
water	28:45	0:0	6	codes_size
water	28:56	0:0	4	;
if	30:8	31:20	4	(n <= 0)
cond	30:12	30:17	5	n <= 0
water	30:12	0:0	6	n
op	30:14	0:0	6	<=
water	30:17	0:0	6	0
stmts	31:12	31:20	5	
continue	31:12	31:20	6	
call	33:8	33:50	4	printf
arg	33:15	33:38	5	"i=%d n=%d code=0x%x\n"
water	33:15	0:0	6	"i=%d n=%d code=0x%x\n"
arg	33:40	33:41	5	i
water	33:40	0:0	6	i
arg	33:43	33:44	5	n
water	33:43	0:0	6	n
arg	33:46	33:50	5	code
water	33:46	0:0	6	code
water	33:51	0:0	4	;
water	36:8	0:0	4	n
op	36:10	0:0	4	-=
water	36:13	0:0	4	n_prefix
water	36:21	0:0	4	;
if	37:8	38:90	4	(flags & INIT_VLC_LE)
cond	37:11	37:19	5	flags & INIT_VLC_LE
water	37:11	0:0	6	flags
op	37:17	0:0	6	&
water	37:19	0:0	6	INIT_VLC_LE
stmts	38:12	38:90	5	
water	38:12	0:0	6	code_prefix2
op	38:24	0:0	6	=
water	38:26	0:0	6	code
op	38:31	0:0	6	&
water	38:33	0:0	6	(
water	38:34	0:0	6	n_prefix
op	38:42	0:0	6	>=
water	38:44	0:0	6	32
water	38:47	0:0	6	?
water	38:49	0:0	6	0
water	38:50	0:0	6	xffffffff
water	38:60	0:0	6	:
call	38:62	38:86	6	(uint32_t)
arg	38:73	38:86	7	1<<n_prefix
water	38:73	0:0	8	1
op	38:75	0:0	8	<<
water	38:78	0:0	8	n_prefix
op	38:87	0:0	6	-
water	38:88	0:0	6	1
water	38:89	0:0	6	)
water	38:90	0:0	6	;
else	39:8	40:35	4
stmts	40:12	40:35	5	
water	40:12	0:0	6	code_prefix2
op	40:24	0:0	6	=
water	40:26	0:0	6	code
op	40:31	0:0	6	>>
water	40:34	0:0	6	n
water	40:35	0:0	6	;
if	41:8	73:8	4	(n > 0 && ( int ) code_prefix2 == ( int ) code_prefix)
cond	41:12	41:47	5	n > 0 && ( int ) code_prefix2 == ( int ) code_prefix
water	41:12	0:0	6	n
op	41:14	0:0	6	>
water	41:16	0:0	6	0
op	41:18	0:0	6	&&
water	41:21	0:0	6	(
water	41:22	0:0	6	int
water	41:25	0:0	6	)
water	41:26	0:0	6	code_prefix2
op	41:39	0:0	6	==
water	41:42	0:0	6	(
water	41:43	0:0	6	int
water	41:46	0:0	6	)
water	41:47	0:0	6	code_prefix
stmts	41:60	73:8	5	
water	41:60	0:0	6	{
if	42:12	60:12	6	(n <= table_nb_bits)
cond	42:16	42:21	7	n <= table_nb_bits
water	42:16	0:0	8	n
op	42:18	0:0	8	<=
water	42:21	0:0	8	table_nb_bits
stmts	42:36	60:12	7	
water	42:36	0:0	8	{
water	44:16	0:0	8	j
op	44:18	0:0	8	=
water	44:20	0:0	8	(
water	44:21	0:0	8	code
op	44:26	0:0	8	<<
water	44:29	0:0	8	(
water	44:30	0:0	8	table_nb_bits
op	44:44	0:0	8	-
water	44:46	0:0	8	n
water	44:47	0:0	8	)
water	44:48	0:0	8	)
op	44:50	0:0	8	&
water	44:52	0:0	8	(
water	44:53	0:0	8	table_size
op	44:64	0:0	8	-
water	44:66	0:0	8	1
water	44:67	0:0	8	)
water	44:68	0:0	8	;
water	45:16	0:0	8	nb
op	45:19	0:0	8	=
water	45:21	0:0	8	1
op	45:23	0:0	8	<<
water	45:26	0:0	8	(
water	45:27	0:0	8	table_nb_bits
op	45:41	0:0	8	-
water	45:43	0:0	8	n
water	45:44	0:0	8	)
water	45:45	0:0	8	;
for	46:16	59:16	8	(k = 0 ;k < nb;k ++)
forinit	46:20	46:23	9	k = 0 ;
water	46:20	0:0	10	k
op	46:21	0:0	10	=
water	46:22	0:0	10	0
water	46:23	0:0	10	;
cond	46:24	46:26	9	k < nb
water	46:24	0:0	10	k
op	46:25	0:0	10	<
water	46:26	0:0	10	nb
forexpr	46:29	46:30	9	k ++
water	46:29	0:0	10	k
op	46:30	0:0	10	++
stmts	46:34	59:16	9	
water	46:34	0:0	10	{
if	47:20	48:55	10	(flags & INIT_VLC_LE)
cond	47:23	47:31	11	flags & INIT_VLC_LE
water	47:23	0:0	12	flags
op	47:29	0:0	12	&
water	47:31	0:0	12	INIT_VLC_LE
stmts	48:24	48:55	11	
water	48:24	0:0	12	j
op	48:26	0:0	12	=
water	48:28	0:0	12	(
water	48:29	0:0	12	code
op	48:34	0:0	12	>>
water	48:37	0:0	12	n_prefix
water	48:45	0:0	12	)
op	48:47	0:0	12	+
water	48:49	0:0	12	(
water	48:50	0:0	12	k
op	48:51	0:0	12	<<
water	48:53	0:0	12	n
water	48:54	0:0	12	)
water	48:55	0:0	12	;
call	50:20	51:34	10	av_log
arg	50:27	50:31	11	NULL
water	50:27	0:0	12	NULL
arg	50:33	50:34	11	0
water	50:33	0:0	12	0
arg	50:36	50:57	11	"%4x: code=%d n=%d\n"
water	50:36	0:0	12	"%4x: code=%d n=%d\n"
arg	51:27	51:28	11	j
water	51:27	0:0	12	j
arg	51:30	51:31	11	i
water	51:30	0:0	12	i
arg	51:33	51:34	11	n
water	51:33	0:0	12	n
water	51:35	0:0	10	;
if	53:20	55:20	10	(table [ j ] [ 1 ] != 0)
cond	53:24	53:48	11	table [ j ] [ 1 ] != 0
water	53:24	0:0	12	table
op	53:29	0:0	12	[
water	53:30	0:0	12	j
op	53:31	0:0	12	]
op	53:32	0:0	12	[
water	53:33	0:0	12	1
op	53:34	0:0	12	]
op	53:45	0:0	12	!=
water	53:48	0:0	12	0
stmts	53:51	55:20	11	
water	53:51	0:0	12	{
return	54:24	54:33	12	-1
op	54:31	0:0	13	-
water	54:32	0:0	13	1
water	55:20	0:0	12	}
water	56:20	0:0	10	table
op	56:25	0:0	10	[
water	56:26	0:0	10	j
op	56:27	0:0	10	]
op	56:28	0:0	10	[
water	56:29	0:0	10	1
op	56:30	0:0	10	]
op	56:32	0:0	10	=
water	56:34	0:0	10	n
water	56:35	0:0	10	;
water	57:20	0:0	10	table
op	57:25	0:0	10	[
water	57:26	0:0	10	j
op	57:27	0:0	10	]
op	57:28	0:0	10	[
water	57:29	0:0	10	0
op	57:30	0:0	10	]
op	57:32	0:0	10	=
water	57:34	0:0	10	i
water	57:35	0:0	10	;
water	58:20	0:0	10	j
op	58:21	0:0	10	++
water	58:23	0:0	10	;
water	59:16	0:0	10	}
water	60:12	0:0	8	}
else	60:14	72:12	6
stmts	60:19	72:12	7	
water	60:19	0:0	8	{
water	61:16	0:0	8	n
op	61:18	0:0	8	-=
water	61:21	0:0	8	table_nb_bits
water	61:34	0:0	8	;
water	62:16	0:0	8	j
op	62:18	0:0	8	=
water	62:20	0:0	8	(
water	62:21	0:0	8	code
op	62:26	0:0	8	>>
water	62:29	0:0	8	(
water	62:30	0:0	8	(
water	62:31	0:0	8	flags
op	62:37	0:0	8	&
water	62:39	0:0	8	INIT_VLC_LE
water	62:50	0:0	8	)
water	62:52	0:0	8	?
water	62:54	0:0	8	n_prefix
water	62:63	0:0	8	:
water	62:65	0:0	8	n
water	62:66	0:0	8	)
water	62:67	0:0	8	)
op	62:69	0:0	8	&
water	62:71	0:0	8	(
water	62:72	0:0	8	(
water	62:73	0:0	8	1
op	62:75	0:0	8	<<
water	62:78	0:0	8	table_nb_bits
water	62:91	0:0	8	)
op	62:93	0:0	8	-
water	62:95	0:0	8	1
water	62:96	0:0	8	)
water	62:97	0:0	8	;
call	64:16	65:27	8	av_log
arg	64:23	64:27	9	NULL
water	64:23	0:0	10	NULL
arg	64:29	64:30	9	0
water	64:29	0:0	10	0
arg	64:31	64:55	9	"%4x: n=%d (subtable)\n"
water	64:31	0:0	10	"%4x: n=%d (subtable)\n"
arg	65:23	65:24	9	j
water	65:23	0:0	10	j
arg	65:26	65:27	9	n
water	65:26	0:0	10	n
water	65:28	0:0	8	;
water	68:16	0:0	8	n1
op	68:19	0:0	8	=
op	68:21	0:0	8	-
water	68:22	0:0	8	table
op	68:27	0:0	8	[
water	68:28	0:0	8	j
op	68:29	0:0	8	]
op	68:30	0:0	8	[
water	68:31	0:0	8	1
op	68:32	0:0	8	]
water	68:33	0:0	8	;
if	69:16	70:26	8	(n > n1)
cond	69:20	69:24	9	n > n1
water	69:20	0:0	10	n
op	69:22	0:0	10	>
water	69:24	0:0	10	n1
stmts	70:20	70:26	9	
water	70:20	0:0	10	n1
op	70:23	0:0	10	=
water	70:25	0:0	10	n
water	70:26	0:0	10	;
water	71:16	0:0	8	table
op	71:21	0:0	8	[
water	71:22	0:0	8	j
op	71:23	0:0	8	]
op	71:24	0:0	8	[
water	71:25	0:0	8	1
op	71:26	0:0	8	]
op	71:28	0:0	8	=
op	71:30	0:0	8	-
water	71:31	0:0	8	n1
water	71:33	0:0	8	;
water	72:12	0:0	8	}
water	73:8	0:0	6	}
water	74:4	0:0	4	}
for	76:4	95:4	2	(i = 0 ;i < table_size;i ++)
forinit	76:8	76:11	3	i = 0 ;
water	76:8	0:0	4	i
op	76:9	0:0	4	=
water	76:10	0:0	4	0
water	76:11	0:0	4	;
cond	76:12	76:14	3	i < table_size
water	76:12	0:0	4	i
op	76:13	0:0	4	<
water	76:14	0:0	4	table_size
forexpr	76:25	76:26	3	i ++
water	76:25	0:0	4	i
op	76:26	0:0	4	++
stmts	76:30	95:4	3	
water	76:30	0:0	4	{
water	77:8	0:0	4	n
op	77:10	0:0	4	=
water	77:12	0:0	4	table
op	77:17	0:0	4	[
water	77:18	0:0	4	i
op	77:19	0:0	4	]
op	77:20	0:0	4	[
water	77:21	0:0	4	1
op	77:22	0:0	4	]
water	77:23	0:0	4	;
if	78:8	94:8	4	(n < 0)
cond	78:12	78:16	5	n < 0
water	78:12	0:0	6	n
op	78:14	0:0	6	<
water	78:16	0:0	6	0
stmts	78:19	94:8	5	
water	78:19	0:0	6	{
water	79:12	0:0	6	n
op	79:14	0:0	6	=
op	79:16	0:0	6	-
water	79:17	0:0	6	n
water	79:18	0:0	6	;
if	80:12	83:12	6	(n > table_nb_bits)
cond	80:16	80:20	7	n > table_nb_bits
water	80:16	0:0	8	n
op	80:18	0:0	8	>
water	80:20	0:0	8	table_nb_bits
stmts	80:35	83:12	7	
water	80:35	0:0	8	{
water	81:16	0:0	8	n
op	81:18	0:0	8	=
water	81:20	0:0	8	table_nb_bits
water	81:33	0:0	8	;
water	82:16	0:0	8	table
op	82:21	0:0	8	[
water	82:22	0:0	8	i
op	82:23	0:0	8	]
op	82:24	0:0	8	[
water	82:25	0:0	8	1
op	82:26	0:0	8	]
op	82:28	0:0	8	=
op	82:30	0:0	8	-
water	82:31	0:0	8	n
water	82:32	0:0	8	;
water	83:12	0:0	8	}
water	84:12	0:0	6	index
op	84:18	0:0	6	=
call	84:20	88:56	6	build_table
arg	84:32	84:35	7	vlc
water	84:32	0:0	8	vlc
arg	84:37	84:38	7	n
water	84:37	0:0	8	n
arg	84:40	84:48	7	nb_codes
water	84:40	0:0	8	nb_codes
arg	85:32	85:36	7	bits
water	85:32	0:0	8	bits
arg	85:38	85:47	7	bits_wrap
water	85:38	0:0	8	bits_wrap
arg	85:49	85:58	7	bits_size
water	85:49	0:0	8	bits_size
arg	86:32	86:37	7	codes
water	86:32	0:0	8	codes
arg	86:39	86:49	7	codes_wrap
water	86:39	0:0	8	codes_wrap
arg	86:51	86:61	7	codes_size
water	86:51	0:0	8	codes_size
arg	87:32	87:126	7	(flags&INIT_VLC_LE)?(code_prefix|(i<<n_prefix)):((code_prefix<<table_nb_bits)|i)
water	87:32	0:0	8	(
water	87:33	0:0	8	flags
op	87:39	0:0	8	&
water	87:41	0:0	8	INIT_VLC_LE
water	87:52	0:0	8	)
water	87:54	0:0	8	?
water	87:56	0:0	8	(
water	87:57	0:0	8	code_prefix
op	87:69	0:0	8	|
water	87:71	0:0	8	(
water	87:72	0:0	8	i
op	87:74	0:0	8	<<
water	87:77	0:0	8	n_prefix
water	87:85	0:0	8	)
water	87:86	0:0	8	)
water	87:88	0:0	8	:
water	87:90	0:0	8	(
water	87:91	0:0	8	(
water	87:92	0:0	8	code_prefix
op	87:104	0:0	8	<<
water	87:107	0:0	8	table_nb_bits
water	87:120	0:0	8	)
op	87:122	0:0	8	|
water	87:124	0:0	8	i
water	87:125	0:0	8	)
arg	88:32	88:56	7	n_prefix+table_nb_bits
water	88:32	0:0	8	n_prefix
op	88:41	0:0	8	+
water	88:43	0:0	8	table_nb_bits
water	88:57	0:0	6	;
if	89:12	90:25	6	(index < 0)
cond	89:16	89:24	7	index < 0
water	89:16	0:0	8	index
op	89:22	0:0	8	<
water	89:24	0:0	8	0
stmts	90:16	90:25	7	
return	90:16	90:25	8	-1
op	90:23	0:0	9	-
water	90:24	0:0	9	1
water	92:12	0:0	6	table
op	92:18	0:0	6	=
op	92:20	0:0	6	&
water	92:21	0:0	6	vlc
op	92:24	0:0	6	->
water	92:26	0:0	6	table
op	92:31	0:0	6	[
water	92:32	0:0	6	table_index
op	92:43	0:0	6	]
water	92:44	0:0	6	;
water	93:12	0:0	6	table
op	93:17	0:0	6	[
water	93:18	0:0	6	i
op	93:19	0:0	6	]
op	93:20	0:0	6	[
water	93:21	0:0	6	0
op	93:22	0:0	6	]
op	93:24	0:0	6	=
water	93:26	0:0	6	index
water	93:31	0:0	6	;
water	94:8	0:0	6	}
water	95:4	0:0	4	}
return	96:4	96:22	2	table_index
water	96:11	0:0	3	table_index
