func	2:0	47:0	0	bool	ReadCommand
params	2:16	0:0	1	
param	2:18	2:39	2	intf_thread_t *	p_intf
param	2:41	2:55	2	char *	p_buffer
param	2:57	2:70	2	int *	pi_size
stmnts	0:0	46:16	1	
decl	4:4	4:18	2	int	i_read
op	4:15	0:0	2	=
water	4:17	0:0	2	0
if	6:4	7:53	2	(p_intf -> p_sys -> i_socket == - 1 && ! p_intf -> p_sys -> b_quiet)
cond	6:8	6:57	3	p_intf -> p_sys -> i_socket == - 1 && ! p_intf -> p_sys -> b_quiet
water	6:8	0:0	4	p_intf
op	6:14	0:0	4	->
water	6:16	0:0	4	p_sys
op	6:21	0:0	4	->
water	6:23	0:0	4	i_socket
op	6:32	0:0	4	==
op	6:35	0:0	4	-
water	6:36	0:0	4	1
op	6:38	0:0	4	&&
op	6:41	0:0	4	!
water	6:42	0:0	4	p_intf
op	6:48	0:0	4	->
water	6:50	0:0	4	p_sys
op	6:55	0:0	4	->
water	6:57	0:0	4	b_quiet
stmts	7:8	7:53	3	
return	7:8	7:53	4	ReadWin32(p_intf,p_buffer,pi_size)
call	7:15	7:52	5	ReadWin32
arg	7:26	7:32	6	p_intf
water	7:26	0:0	7	p_intf
arg	7:34	7:42	6	p_buffer
water	7:34	0:0	7	p_buffer
arg	7:44	7:52	6	pi_size
water	7:44	0:0	7	pi_size
else	8:4	12:4	2
stmts	8:9	12:4	3	
if	8:9	12:4	4	(p_intf -> p_sys -> i_socket == - 1)
cond	8:13	8:41	5	p_intf -> p_sys -> i_socket == - 1
water	8:13	0:0	6	p_intf
op	8:19	0:0	6	->
water	8:21	0:0	6	p_sys
op	8:26	0:0	6	->
water	8:28	0:0	6	i_socket
op	8:37	0:0	6	==
op	8:40	0:0	6	-
water	8:41	0:0	6	1
stmts	9:4	12:4	5	
water	9:4	0:0	6	{
call	10:8	10:32	6	msleep
arg	10:16	10:32	7	INTF_IDLE_SLEEP
water	10:16	0:0	8	INTF_IDLE_SLEEP
water	10:33	0:0	6	;
return	11:8	11:20	6	false
water	11:15	0:0	7	false
water	12:4	0:0	6	}
while	14:4	22:4	2	(* pi_size < MAX_LINE_LENGTH && ( i_read =net_Read (p_intf ,p_intf -> p_sys -> i_socket == - 1 ? 0 : p_intf -> p_sys -> i_socket ,NULL ,( uint8_t * ) p_buffer + * pi_size ,1 ,false ) ) > 0)
cond	14:11	17:65	3	* pi_size < MAX_LINE_LENGTH && ( i_read =net_Read (p_intf ,p_intf -> p_sys -> i_socket == - 1 ? 0 : p_intf -> p_sys -> i_socket ,NULL ,( uint8_t * ) p_buffer + * pi_size ,1 ,false ) ) > 0
op	14:11	0:0	4	*
water	14:12	0:0	4	pi_size
op	14:20	0:0	4	<
water	14:22	0:0	4	MAX_LINE_LENGTH
op	14:38	0:0	4	&&
water	15:11	0:0	4	(
water	15:12	0:0	4	i_read
op	15:19	0:0	4	=
call	15:21	17:59	4	net_Read
arg	15:31	15:37	5	p_intf
water	15:31	0:0	6	p_intf
arg	15:39	16:67	5	p_intf->p_sys->i_socket==-1?0:p_intf->p_sys->i_socket
water	15:39	0:0	6	p_intf
op	15:45	0:0	6	->
water	15:47	0:0	6	p_sys
op	15:52	0:0	6	->
water	15:54	0:0	6	i_socket
op	15:63	0:0	6	==
op	15:66	0:0	6	-
water	15:67	0:0	6	1
water	15:69	0:0	6	?
water	16:23	0:0	6	0
water	16:42	0:0	6	:
water	16:44	0:0	6	p_intf
op	16:50	0:0	6	->
water	16:52	0:0	6	p_sys
op	16:57	0:0	6	->
water	16:59	0:0	6	i_socket
arg	16:69	16:73	5	NULL
water	16:69	0:0	6	NULL
arg	17:18	17:48	5	(uint8_t*)p_buffer+*pi_size
water	17:18	0:0	6	(
water	17:19	0:0	6	uint8_t
op	17:27	0:0	6	*
water	17:28	0:0	6	)
water	17:29	0:0	6	p_buffer
op	17:38	0:0	6	+
op	17:40	0:0	6	*
water	17:41	0:0	6	pi_size
arg	17:50	17:51	5	1
water	17:50	0:0	6	1
arg	17:53	17:59	5	false
water	17:53	0:0	6	false
water	17:61	0:0	4	)
op	17:63	0:0	4	>
water	17:65	0:0	4	0
stmts	18:4	22:4	3	
water	18:4	0:0	4	{
if	19:8	20:17	4	(p_buffer [ * pi_size ] == '\r' || p_buffer [ * pi_size ] == '\n')
cond	19:12	19:68	5	p_buffer [ * pi_size ] == '\r' || p_buffer [ * pi_size ] == '\n'
water	19:12	0:0	6	p_buffer
op	19:20	0:0	6	[
op	19:22	0:0	6	*
water	19:23	0:0	6	pi_size
op	19:31	0:0	6	]
op	19:33	0:0	6	==
water	19:36	0:0	6	'\r'
op	19:41	0:0	6	||
water	19:44	0:0	6	p_buffer
op	19:52	0:0	6	[
op	19:54	0:0	6	*
water	19:55	0:0	6	pi_size
op	19:63	0:0	6	]
op	19:65	0:0	6	==
water	19:68	0:0	6	'\n'
stmts	20:12	20:17	5	
break	20:12	20:17	6	
water	21:8	0:0	4	(
op	21:9	0:0	4	*
water	21:10	0:0	4	pi_size
water	21:17	0:0	4	)
op	21:18	0:0	4	++
water	21:20	0:0	4	;
water	22:4	0:0	4	}
if	24:4	39:4	2	(i_read <= 0)
cond	24:8	24:18	3	i_read <= 0
water	24:8	0:0	4	i_read
op	24:15	0:0	4	<=
water	24:18	0:0	4	0
stmts	25:4	39:4	3	
water	25:4	0:0	4	{
if	26:8	30:8	4	(p_intf -> p_sys -> i_socket != - 1)
cond	26:12	26:40	5	p_intf -> p_sys -> i_socket != - 1
water	26:12	0:0	6	p_intf
op	26:18	0:0	6	->
water	26:20	0:0	6	p_sys
op	26:25	0:0	6	->
water	26:27	0:0	6	i_socket
op	26:36	0:0	6	!=
op	26:39	0:0	6	-
water	26:40	0:0	6	1
stmts	27:8	30:8	5	
water	27:8	0:0	6	{
call	28:12	28:47	6	net_Close
arg	28:23	28:47	7	p_intf->p_sys->i_socket
water	28:23	0:0	8	p_intf
op	28:29	0:0	8	->
water	28:31	0:0	8	p_sys
op	28:36	0:0	8	->
water	28:38	0:0	8	i_socket
water	28:48	0:0	6	;
water	29:12	0:0	6	p_intf
op	29:18	0:0	6	->
water	29:20	0:0	6	p_sys
op	29:25	0:0	6	->
water	29:27	0:0	6	i_socket
op	29:36	0:0	6	=
op	29:38	0:0	6	-
water	29:39	0:0	6	1
water	29:40	0:0	6	;
water	30:8	0:0	6	}
else	31:8	36:8	4
stmts	32:8	36:8	5	
water	32:8	0:0	6	{
decl	34:12	34:29	6	vlc_value_t	empty
call	35:12	35:63	6	Quit
arg	35:18	35:36	7	VLC_OBJECT(p_intf)
call	35:18	35:35	8	VLC_OBJECT
arg	35:29	35:35	9	p_intf
water	35:29	0:0	10	p_intf
arg	35:38	35:42	7	NULL
water	35:38	0:0	8	NULL
arg	35:44	35:49	7	empty
water	35:44	0:0	8	empty
arg	35:51	35:56	7	empty
water	35:51	0:0	8	empty
arg	35:58	35:63	7	NULL
water	35:58	0:0	8	NULL
water	35:64	0:0	6	;
water	36:8	0:0	6	}
water	37:8	0:0	4	p_buffer
op	37:16	0:0	4	[
op	37:18	0:0	4	*
water	37:19	0:0	4	pi_size
op	37:27	0:0	4	]
op	37:29	0:0	4	=
water	37:31	0:0	4	0
water	37:32	0:0	4	;
return	38:8	38:19	4	true
water	38:15	0:0	5	true
water	39:4	0:0	4	}
if	40:4	45:4	2	(* pi_size == MAX_LINE_LENGTH || p_buffer [ * pi_size ] == '\r' || p_buffer [ * pi_size ] == '\n')
cond	40:8	41:64	3	* pi_size == MAX_LINE_LENGTH || p_buffer [ * pi_size ] == '\r' || p_buffer [ * pi_size ] == '\n'
op	40:8	0:0	4	*
water	40:9	0:0	4	pi_size
op	40:17	0:0	4	==
water	40:20	0:0	4	MAX_LINE_LENGTH
op	40:36	0:0	4	||
water	41:8	0:0	4	p_buffer
op	41:16	0:0	4	[
op	41:18	0:0	4	*
water	41:19	0:0	4	pi_size
op	41:27	0:0	4	]
op	41:29	0:0	4	==
water	41:32	0:0	4	'\r'
op	41:37	0:0	4	||
water	41:40	0:0	4	p_buffer
op	41:48	0:0	4	[
op	41:50	0:0	4	*
water	41:51	0:0	4	pi_size
op	41:59	0:0	4	]
op	41:61	0:0	4	==
water	41:64	0:0	4	'\n'
stmts	42:4	45:4	3	
water	42:4	0:0	4	{
water	43:8	0:0	4	p_buffer
op	43:16	0:0	4	[
op	43:18	0:0	4	*
water	43:19	0:0	4	pi_size
op	43:27	0:0	4	]
op	43:29	0:0	4	=
water	43:31	0:0	4	0
water	43:32	0:0	4	;
return	44:8	44:19	4	true
water	44:15	0:0	5	true
water	45:4	0:0	4	}
return	46:4	46:16	2	false
water	46:11	0:0	3	false
