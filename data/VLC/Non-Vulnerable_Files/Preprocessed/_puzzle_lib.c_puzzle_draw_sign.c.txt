func	2:0	21:0	0	void	puzzle_draw_sign
params	2:21	0:0	1	
param	2:22	2:42	2	picture_t *	p_pic_out
param	2:44	2:55	2	int32_t	i_x
param	2:57	2:68	2	int32_t	i_y
param	2:70	2:85	2	int32_t	i_width
param	2:87	2:102	2	int32_t	i_lines
param	2:104	2:126	2	const char * *	ppsz_sign
param	2:128	2:142	2	bool	b_reverse
stmnts	0:0	20:8	1	
decl	4:4	4:43	2	plane_t	*p_out
op	4:19	0:0	2	=
op	4:21	0:0	2	&
water	4:22	0:0	2	p_pic_out
op	4:31	0:0	2	->
water	4:33	0:0	2	p
op	4:34	0:0	2	[
water	4:35	0:0	2	Y_PLANE
op	4:42	0:0	2	]
decl	5:4	5:66	2	int32_t	i_pixel_pitch
op	5:29	0:0	2	=
water	5:31	0:0	2	p_pic_out
op	5:40	0:0	2	->
water	5:42	0:0	2	p
op	5:43	0:0	2	[
water	5:44	0:0	2	Y_PLANE
op	5:51	0:0	2	]
op	5:52	0:0	2	.
water	5:53	0:0	2	i_pixel_pitch
decl	6:4	6:15	2	uint8_t	i_Y
water	7:4	0:0	2	i_Y
op	7:8	0:0	2	=
water	7:10	0:0	2	(
water	7:12	0:0	2	p_out
op	7:17	0:0	2	->
water	7:19	0:0	2	p_pixels
op	7:27	0:0	2	[
water	7:29	0:0	2	i_y
op	7:33	0:0	2	*
water	7:35	0:0	2	p_out
op	7:40	0:0	2	->
water	7:42	0:0	2	i_pitch
op	7:50	0:0	2	+
water	7:52	0:0	2	i_x
op	7:56	0:0	2	]
op	7:58	0:0	2	>=
water	7:61	0:0	2	0
water	7:62	0:0	2	x7F
water	7:66	0:0	2	)
water	7:68	0:0	2	?
water	7:70	0:0	2	0
water	7:71	0:0	2	x00
water	7:75	0:0	2	:
water	7:77	0:0	2	0
water	7:78	0:0	2	xFF
water	7:81	0:0	2	;
for	8:4	20:8	2	( int32_t y = 0 ;y < i_lines;y ++)
forinit	0:0	8:22	3	 int32_t y = 0 ;
decl	8:9	8:22	4	int32_t	y
op	8:19	0:0	4	=
water	8:21	0:0	4	0
cond	8:24	8:28	3	y < i_lines
water	8:24	0:0	4	y
op	8:26	0:0	4	<
water	8:28	0:0	4	i_lines
forexpr	8:38	8:39	3	y ++
water	8:38	0:0	4	y
op	8:39	0:0	4	++
stmts	9:8	20:8	3	
for	9:8	20:8	4	( int32_t x = 0 ;x < i_width;x ++)
forinit	0:0	9:26	5	 int32_t x = 0 ;
decl	9:13	9:26	6	int32_t	x
op	9:23	0:0	6	=
water	9:25	0:0	6	0
cond	9:28	9:32	5	x < i_width
water	9:28	0:0	6	x
op	9:30	0:0	6	<
water	9:32	0:0	6	i_width
forexpr	9:41	9:42	5	x ++
water	9:41	0:0	6	x
op	9:42	0:0	6	++
stmts	9:47	20:8	5	
water	9:47	0:0	6	{
decl	10:12	10:57	6	int32_t	i_dst_x
op	10:28	0:0	6	=
water	10:30	0:0	6	(
water	10:32	0:0	6	x
op	10:34	0:0	6	+
water	10:36	0:0	6	i_x
water	10:40	0:0	6	)
op	10:42	0:0	6	*
water	10:44	0:0	6	i_pixel_pitch
decl	11:12	11:37	6	int32_t	i_dst_y
op	11:28	0:0	6	=
water	11:30	0:0	6	y
op	11:32	0:0	6	+
water	11:34	0:0	6	i_y
if	12:12	15:12	6	(ppsz_sign [ y ] [ b_reverse ? i_width - 1 - x : x ] == 'o')
cond	12:17	12:58	7	ppsz_sign [ y ] [ b_reverse ? i_width - 1 - x : x ] == 'o'
water	12:17	0:0	8	ppsz_sign
op	12:26	0:0	8	[
water	12:27	0:0	8	y
op	12:28	0:0	8	]
op	12:29	0:0	8	[
water	12:30	0:0	8	b_reverse
water	12:39	0:0	8	?
water	12:40	0:0	8	i_width
op	12:47	0:0	8	-
water	12:48	0:0	8	1
op	12:49	0:0	8	-
water	12:50	0:0	8	x
water	12:51	0:0	8	:
water	12:52	0:0	8	x
op	12:53	0:0	8	]
op	12:55	0:0	8	==
water	12:58	0:0	8	'o'
stmts	12:64	15:12	7	
water	12:64	0:0	8	{
if	13:16	14:114	8	(( i_dst_x < p_out -> i_visible_pitch ) && ( i_dst_y < p_out -> i_visible_lines ) && ( i_dst_x >= 0 ) && ( i_dst_y >= 0 ))
cond	13:20	13:128	9	( i_dst_x < p_out -> i_visible_pitch ) && ( i_dst_y < p_out -> i_visible_lines ) && ( i_dst_x >= 0 ) && ( i_dst_y >= 0 )
water	13:20	0:0	10	(
water	13:21	0:0	10	i_dst_x
op	13:29	0:0	10	<
water	13:31	0:0	10	p_out
op	13:36	0:0	10	->
water	13:38	0:0	10	i_visible_pitch
water	13:53	0:0	10	)
op	13:55	0:0	10	&&
water	13:58	0:0	10	(
water	13:59	0:0	10	i_dst_y
op	13:67	0:0	10	<
water	13:69	0:0	10	p_out
op	13:74	0:0	10	->
water	13:76	0:0	10	i_visible_lines
water	13:91	0:0	10	)
op	13:93	0:0	10	&&
water	13:96	0:0	10	(
water	13:97	0:0	10	i_dst_x
op	13:105	0:0	10	>=
water	13:108	0:0	10	0
water	13:110	0:0	10	)
op	13:112	0:0	10	&&
water	13:115	0:0	10	(
water	13:116	0:0	10	i_dst_y
op	13:124	0:0	10	>=
water	13:127	0:0	10	0
water	13:128	0:0	10	)
stmts	14:20	14:114	9	
call	14:20	14:113	10	memset
arg	14:28	14:82	11	&p_out->p_pixels[i_dst_y*p_out->i_pitch+i_dst_x]
op	14:28	0:0	12	&
water	14:29	0:0	12	p_out
op	14:34	0:0	12	->
water	14:36	0:0	12	p_pixels
op	14:44	0:0	12	[
water	14:46	0:0	12	i_dst_y
op	14:54	0:0	12	*
water	14:56	0:0	12	p_out
op	14:61	0:0	12	->
water	14:63	0:0	12	i_pitch
op	14:71	0:0	12	+
water	14:73	0:0	12	i_dst_x
op	14:81	0:0	12	]
arg	14:86	14:89	11	i_Y
water	14:86	0:0	12	i_Y
arg	14:92	14:113	11	p_out->i_pixel_pitch
water	14:92	0:0	12	p_out
op	14:97	0:0	12	->
water	14:99	0:0	12	i_pixel_pitch
water	14:114	0:0	10	;
water	15:12	0:0	8	}
else	16:12	19:12	6
stmts	16:17	19:12	7	
if	16:17	19:12	8	(ppsz_sign [ y ] [ b_reverse ? i_width - 1 - x : x ] == '.')
cond	16:22	16:63	9	ppsz_sign [ y ] [ b_reverse ? i_width - 1 - x : x ] == '.'
water	16:22	0:0	10	ppsz_sign
op	16:31	0:0	10	[
water	16:32	0:0	10	y
op	16:33	0:0	10	]
op	16:34	0:0	10	[
water	16:35	0:0	10	b_reverse
water	16:44	0:0	10	?
water	16:45	0:0	10	i_width
op	16:52	0:0	10	-
water	16:53	0:0	10	1
op	16:54	0:0	10	-
water	16:55	0:0	10	x
water	16:56	0:0	10	:
water	16:57	0:0	10	x
op	16:58	0:0	10	]
op	16:60	0:0	10	==
water	16:63	0:0	10	'.'
stmts	16:69	19:12	9	
water	16:69	0:0	10	{
if	17:16	18:143	10	(( i_dst_x < p_out -> i_visible_pitch ) && ( i_dst_y < p_out -> i_visible_lines ) && ( i_dst_x >= 0 ) && ( i_dst_y >= 0 ))
cond	17:20	17:128	11	( i_dst_x < p_out -> i_visible_pitch ) && ( i_dst_y < p_out -> i_visible_lines ) && ( i_dst_x >= 0 ) && ( i_dst_y >= 0 )
water	17:20	0:0	12	(
water	17:21	0:0	12	i_dst_x
op	17:29	0:0	12	<
water	17:31	0:0	12	p_out
op	17:36	0:0	12	->
water	17:38	0:0	12	i_visible_pitch
water	17:53	0:0	12	)
op	17:55	0:0	12	&&
water	17:58	0:0	12	(
water	17:59	0:0	12	i_dst_y
op	17:67	0:0	12	<
water	17:69	0:0	12	p_out
op	17:74	0:0	12	->
water	17:76	0:0	12	i_visible_lines
water	17:91	0:0	12	)
op	17:93	0:0	12	&&
water	17:96	0:0	12	(
water	17:97	0:0	12	i_dst_x
op	17:105	0:0	12	>=
water	17:108	0:0	12	0
water	17:110	0:0	12	)
op	17:112	0:0	12	&&
water	17:115	0:0	12	(
water	17:116	0:0	12	i_dst_y
op	17:124	0:0	12	>=
water	17:127	0:0	12	0
water	17:128	0:0	12	)
stmts	18:20	18:143	11	
water	18:20	0:0	12	p_out
op	18:25	0:0	12	->
water	18:27	0:0	12	p_pixels
op	18:35	0:0	12	[
water	18:37	0:0	12	i_dst_y
op	18:45	0:0	12	*
water	18:47	0:0	12	p_out
op	18:52	0:0	12	->
water	18:54	0:0	12	i_pitch
op	18:62	0:0	12	+
water	18:64	0:0	12	i_dst_x
op	18:72	0:0	12	]
op	18:74	0:0	12	=
water	18:76	0:0	12	p_out
op	18:81	0:0	12	->
water	18:83	0:0	12	p_pixels
op	18:91	0:0	12	[
water	18:93	0:0	12	i_dst_y
op	18:101	0:0	12	*
water	18:103	0:0	12	p_out
op	18:108	0:0	12	->
water	18:110	0:0	12	i_pitch
op	18:118	0:0	12	+
water	18:120	0:0	12	i_dst_x
op	18:128	0:0	12	]
op	18:130	0:0	12	/
water	18:132	0:0	12	2
op	18:134	0:0	12	+
water	18:136	0:0	12	i_Y
op	18:140	0:0	12	/
water	18:142	0:0	12	2
water	18:143	0:0	12	;
water	19:12	0:0	10	}
water	20:8	0:0	6	}
