func	2:0	50:0	0	static void	DecoderDecodeAudio
params	2:30	0:0	1	
param	2:32	2:48	2	decoder_t *	p_dec
param	2:50	2:67	2	block_t *	p_block
stmnts	0:0	49:4	1	
decl	4:4	4:49	2	decoder_owner_sys_t	*p_owner
op	4:33	0:0	2	=
water	4:35	0:0	2	p_dec
op	4:40	0:0	2	->
water	4:42	0:0	2	p_owner
decl	5:4	5:23	2	block_t	*p_aout_buf
decl	6:4	6:21	2	int	i_decoded
op	6:18	0:0	2	=
water	6:20	0:0	2	0
decl	7:4	7:18	2	int	i_lost
op	7:15	0:0	2	=
water	7:17	0:0	2	0
decl	8:4	8:20	2	int	i_played
op	8:17	0:0	2	=
water	8:19	0:0	2	0
if	9:4	12:4	2	(! p_block)
cond	9:8	9:9	3	! p_block
op	9:8	0:0	4	!
water	9:9	0:0	4	p_block
stmts	9:18	12:4	3	
water	9:18	0:0	4	{
call	11:8	11:58	4	DecoderPlayAudio
arg	11:26	11:31	5	p_dec
water	11:26	0:0	6	p_dec
arg	11:33	11:37	5	NULL
water	11:33	0:0	6	NULL
arg	11:39	11:48	5	&i_played
op	11:39	0:0	6	&
water	11:40	0:0	6	i_played
arg	11:50	11:58	5	&i_lost
op	11:50	0:0	6	&
water	11:51	0:0	6	i_lost
water	11:59	0:0	4	;
water	12:4	0:0	4	}
else	13:4	39:4	2
stmts	13:9	39:4	3	
while	13:9	39:4	4	(( p_aout_buf =p_dec -> pf_decode_audio (p_dec ,& p_block ) ))
cond	13:16	13:71	5	( p_aout_buf =p_dec -> pf_decode_audio (p_dec ,& p_block ) )
water	13:16	0:0	6	(
water	13:17	0:0	6	p_aout_buf
op	13:28	0:0	6	=
call	13:30	13:70	6	p_dec->pf_decode_audio
arg	13:54	13:59	7	p_dec
water	13:54	0:0	8	p_dec
arg	13:61	13:70	7	&p_block
op	13:61	0:0	8	&
water	13:62	0:0	8	p_block
water	13:71	0:0	6	)
stmts	14:4	39:4	5	
water	14:4	0:0	6	{
if	15:8	22:8	6	(DecoderIsExitRequested (p_dec ))
cond	15:12	15:42	7	DecoderIsExitRequested (p_dec )
call	15:12	15:42	8	DecoderIsExitRequested
arg	15:36	15:42	9	p_dec
water	15:36	0:0	10	p_dec
stmts	16:8	22:8	7	
water	16:8	0:0	8	{
call	18:12	18:38	8	block_Release
arg	18:27	18:38	9	p_aout_buf
water	18:27	0:0	10	p_aout_buf
water	18:39	0:0	8	;
if	19:12	20:40	8	(p_block)
cond	19:16	19:16	9	p_block
water	19:16	0:0	10	p_block
stmts	20:16	20:40	9	
call	20:16	20:39	10	block_Release
arg	20:31	20:39	11	p_block
water	20:31	0:0	12	p_block
water	20:40	0:0	10	;
break	21:12	21:17	8	
water	22:8	0:0	8	}
water	23:8	0:0	6	i_decoded
op	23:17	0:0	6	++
water	23:19	0:0	6	;
if	24:8	29:8	6	(p_owner -> i_preroll_end > VLC_TS_INVALID && p_aout_buf -> i_pts < p_owner -> i_preroll_end)
cond	24:12	25:41	7	p_owner -> i_preroll_end > VLC_TS_INVALID && p_aout_buf -> i_pts < p_owner -> i_preroll_end
water	24:12	0:0	8	p_owner
op	24:19	0:0	8	->
water	24:21	0:0	8	i_preroll_end
op	24:35	0:0	8	>
water	24:37	0:0	8	VLC_TS_INVALID
op	24:52	0:0	8	&&
water	25:12	0:0	8	p_aout_buf
op	25:22	0:0	8	->
water	25:24	0:0	8	i_pts
op	25:30	0:0	8	<
water	25:32	0:0	8	p_owner
op	25:39	0:0	8	->
water	25:41	0:0	8	i_preroll_end
stmts	26:8	29:8	7	
water	26:8	0:0	8	{
call	27:12	27:38	8	block_Release
arg	27:27	27:38	9	p_aout_buf
water	27:27	0:0	10	p_aout_buf
water	27:39	0:0	8	;
continue	28:12	28:20	8	
water	29:8	0:0	8	}
if	30:8	37:8	6	(p_owner -> i_preroll_end > VLC_TS_INVALID)
cond	30:12	30:37	7	p_owner -> i_preroll_end > VLC_TS_INVALID
water	30:12	0:0	8	p_owner
op	30:19	0:0	8	->
water	30:21	0:0	8	i_preroll_end
op	30:35	0:0	8	>
water	30:37	0:0	8	VLC_TS_INVALID
stmts	31:8	37:8	7	
water	31:8	0:0	8	{
call	32:12	32:51	8	msg_Dbg
arg	32:21	32:26	9	p_dec
water	32:21	0:0	10	p_dec
arg	32:28	32:51	9	"End of audio preroll"
water	32:28	0:0	10	"End of audio preroll"
water	32:52	0:0	8	;
if	33:12	34:48	8	(p_owner -> p_aout)
cond	33:16	33:25	9	p_owner -> p_aout
water	33:16	0:0	10	p_owner
op	33:23	0:0	10	->
water	33:25	0:0	10	p_aout
stmts	34:16	34:48	9	
call	34:16	34:47	10	aout_DecFlush
arg	34:31	34:47	11	p_owner->p_aout
water	34:31	0:0	12	p_owner
op	34:38	0:0	12	->
water	34:40	0:0	12	p_aout
water	34:48	0:0	10	;
water	36:12	0:0	8	p_owner
op	36:19	0:0	8	->
water	36:21	0:0	8	i_preroll_end
op	36:35	0:0	8	=
water	36:37	0:0	8	VLC_TS_INVALID
water	36:51	0:0	8	;
water	37:8	0:0	8	}
call	38:8	38:64	6	DecoderPlayAudio
arg	38:26	38:31	7	p_dec
water	38:26	0:0	8	p_dec
arg	38:33	38:43	7	p_aout_buf
water	38:33	0:0	8	p_aout_buf
arg	38:45	38:54	7	&i_played
op	38:45	0:0	8	&
water	38:46	0:0	8	i_played
arg	38:56	38:64	7	&i_lost
op	38:56	0:0	8	&
water	38:57	0:0	8	i_lost
water	38:65	0:0	6	;
water	39:4	0:0	6	}
decl	41:4	41:47	2	input_thread_t	*p_input
op	41:29	0:0	2	=
water	41:31	0:0	2	p_owner
op	41:38	0:0	2	->
water	41:40	0:0	2	p_input
if	42:4	49:4	2	(p_input != NULL && ( i_decoded > 0 || i_lost > 0 || i_played > 0 ))
cond	42:8	42:71	3	p_input != NULL && ( i_decoded > 0 || i_lost > 0 || i_played > 0 )
water	42:8	0:0	4	p_input
op	42:16	0:0	4	!=
water	42:19	0:0	4	NULL
op	42:24	0:0	4	&&
water	42:27	0:0	4	(
water	42:28	0:0	4	i_decoded
op	42:38	0:0	4	>
water	42:40	0:0	4	0
op	42:42	0:0	4	||
water	42:45	0:0	4	i_lost
op	42:52	0:0	4	>
water	42:54	0:0	4	0
op	42:56	0:0	4	||
water	42:59	0:0	4	i_played
op	42:68	0:0	4	>
water	42:70	0:0	4	0
water	42:71	0:0	4	)
stmts	43:4	49:4	3	
water	43:4	0:0	4	{
call	44:8	44:59	4	vlc_mutex_lock
arg	44:24	44:59	5	&p_input->p->counters.counters_lock
op	44:24	0:0	6	&
water	44:25	0:0	6	p_input
op	44:32	0:0	6	->
water	44:34	0:0	6	p
op	44:35	0:0	6	->
water	44:37	0:0	6	counters
op	44:45	0:0	6	.
water	44:46	0:0	6	counters_lock
water	44:60	0:0	4	;
call	45:8	45:73	4	stats_Update
arg	45:22	45:58	5	p_input->p->counters.p_lost_abuffers
water	45:22	0:0	6	p_input
op	45:29	0:0	6	->
water	45:31	0:0	6	p
op	45:32	0:0	6	->
water	45:34	0:0	6	counters
op	45:42	0:0	6	.
water	45:43	0:0	6	p_lost_abuffers
arg	45:60	45:66	5	i_lost
water	45:60	0:0	6	i_lost
arg	45:68	45:73	5	NULL
water	45:68	0:0	6	NULL
water	45:74	0:0	4	;
call	46:8	46:77	4	stats_Update
arg	46:22	46:60	5	p_input->p->counters.p_played_abuffers
water	46:22	0:0	6	p_input
op	46:29	0:0	6	->
water	46:31	0:0	6	p
op	46:32	0:0	6	->
water	46:34	0:0	6	counters
op	46:42	0:0	6	.
water	46:43	0:0	6	p_played_abuffers
arg	46:62	46:70	5	i_played
water	46:62	0:0	6	i_played
arg	46:72	46:77	5	NULL
water	46:72	0:0	6	NULL
water	46:78	0:0	4	;
call	47:8	47:76	4	stats_Update
arg	47:22	47:58	5	p_input->p->counters.p_decoded_audio
water	47:22	0:0	6	p_input
op	47:29	0:0	6	->
water	47:31	0:0	6	p
op	47:32	0:0	6	->
water	47:34	0:0	6	counters
op	47:42	0:0	6	.
water	47:43	0:0	6	p_decoded_audio
arg	47:60	47:69	5	i_decoded
water	47:60	0:0	6	i_decoded
arg	47:71	47:76	5	NULL
water	47:71	0:0	6	NULL
water	47:77	0:0	4	;
call	48:8	48:61	4	vlc_mutex_unlock
arg	48:26	48:61	5	&p_input->p->counters.counters_lock
op	48:26	0:0	6	&
water	48:27	0:0	6	p_input
op	48:34	0:0	6	->
water	48:36	0:0	6	p
op	48:37	0:0	6	->
water	48:39	0:0	6	counters
op	48:47	0:0	6	.
water	48:48	0:0	6	counters_lock
water	48:62	0:0	4	;
water	49:4	0:0	4	}
