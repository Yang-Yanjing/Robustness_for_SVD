func	2:0	27:0	0	audio_output_t *	input_resource_GetAout
params	2:38	0:0	1	
param	2:40	2:69	2	input_resource_t *	p_resource
stmnts	0:0	26:17	1	
decl	4:4	4:26	2	audio_output_t	*p_aout
call	5:4	5:43	2	vlc_mutex_lock
arg	5:20	5:43	3	&p_resource->lock_hold
op	5:20	0:0	4	&
water	5:21	0:0	4	p_resource
op	5:31	0:0	4	->
water	5:33	0:0	4	lock_hold
water	5:44	0:0	2	;
water	6:4	0:0	2	p_aout
op	6:11	0:0	2	=
water	6:13	0:0	2	p_resource
op	6:23	0:0	2	->
water	6:25	0:0	2	p_aout
water	6:31	0:0	2	;
if	7:4	17:4	2	(p_aout == NULL || p_resource -> b_aout_busy)
cond	7:8	7:38	3	p_aout == NULL || p_resource -> b_aout_busy
water	7:8	0:0	4	p_aout
op	7:15	0:0	4	==
water	7:18	0:0	4	NULL
op	7:23	0:0	4	||
water	7:26	0:0	4	p_resource
op	7:36	0:0	4	->
water	7:38	0:0	4	b_aout_busy
stmts	8:4	17:4	3	
water	8:4	0:0	4	{
call	9:8	9:63	4	msg_Dbg
arg	9:17	9:37	5	p_resource->p_parent
water	9:17	0:0	6	p_resource
op	9:27	0:0	6	->
water	9:29	0:0	6	p_parent
arg	9:39	9:63	5	"creating audio output"
water	9:39	0:0	6	"creating audio output"
water	9:64	0:0	4	;
call	10:8	10:49	4	vlc_mutex_unlock
arg	10:26	10:49	5	&p_resource->lock_hold
op	10:26	0:0	6	&
water	10:27	0:0	6	p_resource
op	10:37	0:0	6	->
water	10:39	0:0	6	lock_hold
water	10:50	0:0	4	;
water	11:8	0:0	4	p_aout
op	11:15	0:0	4	=
call	11:17	11:48	4	aout_New
arg	11:27	11:48	5	p_resource->p_parent
water	11:27	0:0	6	p_resource
op	11:37	0:0	6	->
water	11:39	0:0	6	p_parent
water	11:49	0:0	4	;
if	12:8	13:23	4	(p_aout == NULL)
cond	12:12	12:22	5	p_aout == NULL
water	12:12	0:0	6	p_aout
op	12:19	0:0	6	==
water	12:22	0:0	6	NULL
stmts	13:12	13:23	5	
return	13:12	13:23	6	NULL
water	13:19	0:0	7	NULL
call	14:8	14:47	4	vlc_mutex_lock
arg	14:24	14:47	5	&p_resource->lock_hold
op	14:24	0:0	6	&
water	14:25	0:0	6	p_resource
op	14:35	0:0	6	->
water	14:37	0:0	6	lock_hold
water	14:48	0:0	4	;
if	15:8	16:39	4	(p_resource -> p_aout == NULL)
cond	15:12	15:34	5	p_resource -> p_aout == NULL
water	15:12	0:0	6	p_resource
op	15:22	0:0	6	->
water	15:24	0:0	6	p_aout
op	15:31	0:0	6	==
water	15:34	0:0	6	NULL
stmts	16:12	16:39	5	
water	16:12	0:0	6	p_resource
op	16:22	0:0	6	->
water	16:24	0:0	6	p_aout
op	16:31	0:0	6	=
water	16:33	0:0	6	p_aout
water	16:39	0:0	6	;
water	17:4	0:0	4	}
else	18:4	19:63	2
stmts	19:8	19:63	3	
call	19:8	19:62	4	msg_Dbg
arg	19:17	19:37	5	p_resource->p_parent
water	19:17	0:0	6	p_resource
op	19:27	0:0	6	->
water	19:29	0:0	6	p_parent
arg	19:39	19:62	5	"reusing audio output"
water	19:39	0:0	6	"reusing audio output"
water	19:63	0:0	4	;
if	20:4	24:4	2	(p_resource -> p_aout == p_aout)
cond	20:8	20:30	3	p_resource -> p_aout == p_aout
water	20:8	0:0	4	p_resource
op	20:18	0:0	4	->
water	20:20	0:0	4	p_aout
op	20:27	0:0	4	==
water	20:30	0:0	4	p_aout
stmts	21:4	24:4	3	
water	21:4	0:0	4	{
call	22:8	22:41	4	assert
arg	22:16	22:41	5	!p_resource->b_aout_busy
op	22:16	0:0	6	!
water	22:17	0:0	6	p_resource
op	22:27	0:0	6	->
water	22:29	0:0	6	b_aout_busy
water	22:42	0:0	4	;
water	23:8	0:0	4	p_resource
op	23:18	0:0	4	->
water	23:20	0:0	4	b_aout_busy
op	23:32	0:0	4	=
water	23:34	0:0	4	true
water	23:38	0:0	4	;
water	24:4	0:0	4	}
call	25:4	25:45	2	vlc_mutex_unlock
arg	25:22	25:45	3	&p_resource->lock_hold
op	25:22	0:0	4	&
water	25:23	0:0	4	p_resource
op	25:33	0:0	4	->
water	25:35	0:0	4	lock_hold
water	25:46	0:0	2	;
return	26:4	26:17	2	p_aout
water	26:11	0:0	3	p_aout
