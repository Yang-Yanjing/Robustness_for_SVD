func	2:0	63:0	0	static void	Close
params	2:17	0:0	1	
param	2:19	2:41	2	vlc_object_t *	p_this
stmnts	0:0	62:56	1	
decl	4:4	4:60	2	sout_access_out_t	*p_access
op	4:32	0:0	2	=
water	4:34	0:0	2	(
water	4:35	0:0	2	sout_access_out_t
op	4:52	0:0	2	*
water	4:53	0:0	2	)
water	4:54	0:0	2	p_this
decl	5:4	5:50	2	sout_access_out_sys_t	*p_sys
op	5:33	0:0	2	=
water	5:35	0:0	2	p_access
op	5:43	0:0	2	->
water	5:45	0:0	2	p_sys
decl	6:4	6:47	2	block_t	*output_block
op	6:26	0:0	2	=
water	6:28	0:0	2	p_sys
op	6:33	0:0	2	->
water	6:35	0:0	2	block_buffer
water	7:4	0:0	2	p_sys
op	7:9	0:0	2	->
water	7:11	0:0	2	block_buffer
op	7:24	0:0	2	=
water	7:26	0:0	2	NULL
water	7:30	0:0	2	;
water	8:4	0:0	2	p_sys
op	8:9	0:0	2	->
water	8:11	0:0	2	last_block_buffer
op	8:29	0:0	2	=
op	8:31	0:0	2	&
water	8:32	0:0	2	p_sys
op	8:37	0:0	2	->
water	8:39	0:0	2	block_buffer
water	8:51	0:0	2	;
while	9:4	32:4	2	(output_block)
cond	9:11	9:11	3	output_block
water	9:11	0:0	4	output_block
stmts	10:4	32:4	3	
water	10:4	0:0	4	{
decl	11:8	11:46	4	block_t	*p_next
op	11:24	0:0	4	=
water	11:26	0:0	4	output_block
op	11:38	0:0	4	->
water	11:40	0:0	4	p_next
water	12:8	0:0	4	output_block
op	12:20	0:0	4	->
water	12:22	0:0	4	p_next
op	12:29	0:0	4	=
water	12:31	0:0	4	NULL
water	12:35	0:0	4	;
if	15:8	29:8	4	(p_sys -> b_segment_has_data &&( float ) (output_block -> i_length + p_sys -> i_dts_offset + output_block -> i_dts - p_sys -> i_opendts ) >= p_sys -> i_seglenm)
cond	15:12	16:71	5	p_sys -> b_segment_has_data &&( float ) (output_block -> i_length + p_sys -> i_dts_offset + output_block -> i_dts - p_sys -> i_opendts ) >= p_sys -> i_seglenm
water	15:12	0:0	6	p_sys
op	15:17	0:0	6	->
water	15:19	0:0	6	b_segment_has_data
op	15:38	0:0	6	&&
call	15:42	16:59	6	(float)
arg	15:50	16:59	7	output_block->i_length+p_sys->i_dts_offset+output_block->i_dts-p_sys->i_opendts
water	15:50	0:0	8	output_block
op	15:62	0:0	8	->
water	15:64	0:0	8	i_length
op	15:73	0:0	8	+
water	15:75	0:0	8	p_sys
op	15:80	0:0	8	->
water	15:82	0:0	8	i_dts_offset
op	15:95	0:0	8	+
water	16:21	0:0	8	output_block
op	16:33	0:0	8	->
water	16:35	0:0	8	i_dts
op	16:41	0:0	8	-
water	16:43	0:0	8	p_sys
op	16:48	0:0	8	->
water	16:50	0:0	8	i_opendts
op	16:61	0:0	6	>=
water	16:64	0:0	6	p_sys
op	16:69	0:0	6	->
water	16:71	0:0	6	i_seglenm
stmts	17:8	29:8	5	
water	17:8	0:0	6	{
call	18:12	18:56	6	closeCurrentSegment
arg	18:33	18:41	7	p_access
water	18:33	0:0	8	p_access
arg	18:43	18:48	7	p_sys
water	18:43	0:0	8	p_sys
arg	18:50	18:56	7	false
water	18:50	0:0	8	false
water	18:57	0:0	6	;
water	19:12	0:0	6	p_sys
op	19:17	0:0	6	->
water	19:19	0:0	6	i_dts_offset
op	19:32	0:0	6	=
water	19:34	0:0	6	0
water	19:35	0:0	6	;
if	20:12	27:12	6	(unlikely (openNextFile (p_access ,p_sys ) < 0 ))
cond	20:16	20:61	7	unlikely (openNextFile (p_access ,p_sys ) < 0 )
call	20:16	20:61	8	unlikely
arg	20:25	20:61	9	openNextFile(p_access,p_sys)<0
call	20:25	20:55	10	openNextFile
arg	20:39	20:47	11	p_access
water	20:39	0:0	12	p_access
arg	20:49	20:55	11	p_sys
water	20:49	0:0	12	p_sys
op	20:57	0:0	10	<
water	20:59	0:0	10	0
stmts	21:12	27:12	7	
water	21:12	0:0	8	{
call	22:16	22:49	8	block_ChainRelease
arg	22:36	22:49	9	output_block
water	22:36	0:0	10	output_block
water	22:50	0:0	8	;
water	23:16	0:0	8	output_block
op	23:29	0:0	8	=
water	23:31	0:0	8	NULL
water	23:35	0:0	8	;
call	24:16	24:43	8	block_ChainRelease
arg	24:36	24:43	9	p_next
water	24:36	0:0	10	p_next
water	24:44	0:0	8	;
continue	26:16	26:24	8	
water	27:12	0:0	8	}
water	28:12	0:0	6	p_sys
op	28:17	0:0	6	->
water	28:19	0:0	6	i_opendts
op	28:29	0:0	6	=
water	28:31	0:0	6	p_sys
op	28:36	0:0	6	->
water	28:38	0:0	6	block_buffer
water	28:51	0:0	6	?
water	28:53	0:0	6	p_sys
op	28:58	0:0	6	->
water	28:60	0:0	6	block_buffer
op	28:72	0:0	6	->
water	28:74	0:0	6	i_dts
water	28:80	0:0	6	:
water	28:82	0:0	6	output_block
op	28:94	0:0	6	->
water	28:96	0:0	6	i_dts
water	28:101	0:0	6	;
water	29:8	0:0	6	}
call	30:8	30:38	4	Write
arg	30:15	30:23	5	p_access
water	30:15	0:0	6	p_access
arg	30:25	30:38	5	output_block
water	30:25	0:0	6	output_block
water	30:39	0:0	4	;
water	31:8	0:0	4	output_block
op	31:21	0:0	4	=
water	31:23	0:0	4	p_next
water	31:29	0:0	4	;
water	32:4	0:0	4	}
decl	33:4	33:49	2	ssize_t	writevalue
op	33:23	0:0	2	=
call	33:25	33:48	3	writeSegment
arg	33:39	33:48	4	p_access
water	33:39	0:0	5	p_access
call	34:4	34:51	2	msg_Dbg
arg	34:13	34:21	3	p_access
water	34:13	0:0	4	p_access
arg	34:23	34:38	3	"Writing.. %zd"
water	34:23	0:0	4	"Writing.. %zd"
arg	34:40	34:51	3	writevalue
water	34:40	0:0	4	writevalue
water	34:52	0:0	2	;
if	35:4	40:4	2	(unlikely (writevalue < 0 ))
cond	35:8	35:33	3	unlikely (writevalue < 0 )
call	35:8	35:33	4	unlikely
arg	35:18	35:33	5	writevalue<0
water	35:18	0:0	6	writevalue
op	35:29	0:0	6	<
water	35:31	0:0	6	0
stmts	36:4	40:4	3	
water	36:4	0:0	4	{
call	37:8	37:48	4	block_ChainRelease
arg	37:28	37:48	5	p_sys->block_buffer
water	37:28	0:0	6	p_sys
op	37:33	0:0	6	->
water	37:35	0:0	6	block_buffer
water	37:49	0:0	4	;
water	38:8	0:0	4	p_sys
op	38:13	0:0	4	->
water	38:15	0:0	4	block_buffer
op	38:28	0:0	4	=
water	38:30	0:0	4	NULL
water	38:34	0:0	4	;
water	39:8	0:0	4	p_sys
op	39:13	0:0	4	->
water	39:15	0:0	4	last_block_buffer
op	39:33	0:0	4	=
op	39:35	0:0	4	&
water	39:36	0:0	4	p_sys
op	39:41	0:0	4	->
water	39:43	0:0	4	block_buffer
water	39:55	0:0	4	;
water	40:4	0:0	4	}
call	41:4	41:47	2	closeCurrentSegment
arg	41:25	41:33	3	p_access
water	41:25	0:0	4	p_access
arg	41:35	41:40	3	p_sys
water	41:35	0:0	4	p_sys
arg	41:42	41:47	3	true
water	41:42	0:0	4	true
water	41:48	0:0	2	;
if	42:4	46:4	2	(p_sys -> key_uri)
cond	42:8	42:15	3	p_sys -> key_uri
water	42:8	0:0	4	p_sys
op	42:13	0:0	4	->
water	42:15	0:0	4	key_uri
stmts	43:4	46:4	3	
water	43:4	0:0	4	{
call	44:8	44:42	4	gcry_cipher_close
arg	44:27	44:42	5	p_sys->aes_ctx
water	44:27	0:0	6	p_sys
op	44:32	0:0	6	->
water	44:34	0:0	6	aes_ctx
water	44:43	0:0	4	;
call	45:8	45:29	4	free
arg	45:14	45:29	5	p_sys->key_uri
water	45:14	0:0	6	p_sys
op	45:19	0:0	6	->
water	45:21	0:0	6	key_uri
water	45:30	0:0	4	;
water	46:4	0:0	4	}
while	47:4	57:4	2	(vlc_array_count (p_sys -> segments_t ) > 0)
cond	47:11	47:50	3	vlc_array_count (p_sys -> segments_t ) > 0
call	47:11	47:46	4	vlc_array_count
arg	47:28	47:46	5	p_sys->segments_t
water	47:28	0:0	6	p_sys
op	47:33	0:0	6	->
water	47:35	0:0	6	segments_t
op	47:48	0:0	4	>
water	47:50	0:0	4	0
stmts	48:4	57:4	3	
water	48:4	0:0	4	{
decl	49:8	49:83	4	output_segment_t	*segment
op	49:34	0:0	4	=
call	49:36	49:82	5	vlc_array_item_at_index
arg	49:61	49:78	6	p_sys->segments_t
water	49:61	0:0	7	p_sys
op	49:66	0:0	7	->
water	49:68	0:0	7	segments_t
arg	49:80	49:82	6	0
water	49:80	0:0	7	0
call	50:8	50:47	4	vlc_array_remove
arg	50:26	50:43	5	p_sys->segments_t
water	50:26	0:0	6	p_sys
op	50:31	0:0	6	->
water	50:33	0:0	6	segments_t
arg	50:45	50:47	5	0
water	50:45	0:0	6	0
water	50:48	0:0	4	;
if	51:8	55:8	4	(p_sys -> b_delsegs && p_sys -> i_numsegs && segment -> psz_filename)
cond	51:12	51:61	5	p_sys -> b_delsegs && p_sys -> i_numsegs && segment -> psz_filename
water	51:12	0:0	6	p_sys
op	51:17	0:0	6	->
water	51:19	0:0	6	b_delsegs
op	51:29	0:0	6	&&
water	51:32	0:0	6	p_sys
op	51:37	0:0	6	->
water	51:39	0:0	6	i_numsegs
op	51:49	0:0	6	&&
water	51:52	0:0	6	segment
op	51:59	0:0	6	->
water	51:61	0:0	6	psz_filename
stmts	52:8	55:8	5	
water	52:8	0:0	6	{
call	53:12	53:118	6	msg_Dbg
arg	53:21	53:29	7	p_access
water	53:21	0:0	8	p_access
arg	53:31	53:67	7	"Removing segment number %d name %s"
water	53:31	0:0	8	"Removing segment number %d name %s"
arg	53:69	53:94	7	segment->i_segment_number
water	53:69	0:0	8	segment
op	53:76	0:0	8	->
water	53:78	0:0	8	i_segment_number
arg	53:96	53:118	7	segment->psz_filename
water	53:96	0:0	8	segment
op	53:103	0:0	8	->
water	53:105	0:0	8	psz_filename
water	53:119	0:0	6	;
call	54:12	54:46	6	vlc_unlink
arg	54:24	54:46	7	segment->psz_filename
water	54:24	0:0	8	segment
op	54:31	0:0	8	->
water	54:33	0:0	8	psz_filename
water	54:47	0:0	6	;
water	55:8	0:0	6	}
call	56:8	56:32	4	destroySegment
arg	56:24	56:32	5	segment
water	56:24	0:0	6	segment
water	56:33	0:0	4	;
water	57:4	0:0	4	}
call	58:4	58:41	2	vlc_array_destroy
arg	58:23	58:41	3	p_sys->segments_t
water	58:23	0:0	4	p_sys
op	58:28	0:0	4	->
water	58:30	0:0	4	segments_t
water	58:42	0:0	2	;
call	59:4	59:30	2	free
arg	59:10	59:30	3	p_sys->psz_indexUrl
water	59:10	0:0	4	p_sys
op	59:15	0:0	4	->
water	59:17	0:0	4	psz_indexUrl
water	59:31	0:0	2	;
call	60:4	60:31	2	free
arg	60:10	60:31	3	p_sys->psz_indexPath
water	60:10	0:0	4	p_sys
op	60:15	0:0	4	->
water	60:17	0:0	4	psz_indexPath
water	60:32	0:0	2	;
call	61:4	61:16	2	free
arg	61:10	61:16	3	p_sys
water	61:10	0:0	4	p_sys
water	61:17	0:0	2	;
call	62:4	62:55	2	msg_Dbg
arg	62:13	62:21	3	p_access
water	62:13	0:0	4	p_access
arg	62:23	62:55	3	"livehttp access output closed"
water	62:23	0:0	4	"livehttp access output closed"
water	62:56	0:0	2	;
