func	2:0	18:0	0	void	vlc_rwlock_rdlock
params	2:23	0:0	1	
param	2:24	2:42	2	vlc_rwlock_t *	lock
stmnts	4:4	17:35	1	
call	4:4	4:32	2	vlc_mutex_lock
arg	4:20	4:32	3	&lock->mutex
op	4:20	0:0	4	&
water	4:21	0:0	4	lock
op	4:25	0:0	4	->
water	4:27	0:0	4	mutex
water	4:33	0:0	2	;
while	7:4	13:4	2	(lock -> state < 0)
cond	7:11	7:25	3	lock -> state < 0
water	7:11	0:0	4	lock
op	7:15	0:0	4	->
water	7:17	0:0	4	state
op	7:23	0:0	4	<
water	7:25	0:0	4	0
stmts	8:4	13:4	3	
water	8:4	0:0	4	{
call	9:8	9:41	4	assert
arg	9:16	9:41	5	lock->state==WRITER_BIT
water	9:16	0:0	6	lock
op	9:20	0:0	6	->
water	9:22	0:0	6	state
op	9:28	0:0	6	==
water	9:31	0:0	6	WRITER_BIT
water	9:42	0:0	4	;
call	10:8	10:40	4	mutex_cleanup_push
arg	10:28	10:40	5	&lock->mutex
op	10:28	0:0	6	&
water	10:29	0:0	6	lock
op	10:33	0:0	6	->
water	10:35	0:0	6	mutex
water	10:41	0:0	4	;
call	11:8	11:48	4	vlc_cond_wait
arg	11:23	11:34	5	&lock->wait
op	11:23	0:0	6	&
water	11:24	0:0	6	lock
op	11:28	0:0	6	->
water	11:30	0:0	6	wait
arg	11:36	11:48	5	&lock->mutex
op	11:36	0:0	6	&
water	11:37	0:0	6	lock
op	11:41	0:0	6	->
water	11:43	0:0	6	mutex
water	11:49	0:0	4	;
call	12:8	12:25	4	vlc_cleanup_pop
water	12:26	0:0	4	;
water	13:4	0:0	4	}
if	14:4	15:16	2	(unlikely (lock -> state >= READER_MASK ))
cond	14:8	14:43	3	unlikely (lock -> state >= READER_MASK )
call	14:8	14:43	4	unlikely
arg	14:17	14:43	5	lock->state>=READER_MASK
water	14:17	0:0	6	lock
op	14:21	0:0	6	->
water	14:23	0:0	6	state
op	14:29	0:0	6	>=
water	14:32	0:0	6	READER_MASK
stmts	15:8	15:16	3	
call	15:8	15:15	4	abort
water	15:16	0:0	4	;
water	16:4	0:0	2	lock
op	16:8	0:0	2	->
water	16:10	0:0	2	state
op	16:15	0:0	2	++
water	16:17	0:0	2	;
call	17:4	17:34	2	vlc_mutex_unlock
arg	17:22	17:34	3	&lock->mutex
op	17:22	0:0	4	&
water	17:23	0:0	4	lock
op	17:27	0:0	4	->
water	17:29	0:0	4	mutex
water	17:35	0:0	2	;
