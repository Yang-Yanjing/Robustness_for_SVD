func	2:0	185:0	0	static void	GetOutput
params	2:21	0:0	1	
param	2:22	2:38	2	decoder_t *	p_dec
param	2:40	2:51	2	JNIEnv *	env
param	2:53	2:71	2	picture_t * *	pp_pic
param	2:73	2:86	2	jlong	timeout
stmnts	0:0	184:4	1	
decl	4:4	4:39	2	decoder_sys_t	*p_sys
op	4:25	0:0	2	=
water	4:27	0:0	2	p_dec
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
while	5:4	184:4	2	(1)
cond	5:11	5:11	3	1
water	5:11	0:0	4	1
stmts	5:14	184:4	3	
water	5:14	0:0	4	{
decl	6:8	7:70	4	int	index
op	6:18	0:0	4	=
water	6:20	0:0	4	(
op	6:21	0:0	4	*
water	6:22	0:0	4	env
water	6:25	0:0	4	)
op	6:26	0:0	4	->
call	6:28	7:69	5	CallIntMethod
arg	6:42	6:45	6	env
water	6:42	0:0	7	env
arg	6:47	6:59	6	p_sys->codec
water	6:47	0:0	7	p_sys
op	6:52	0:0	7	->
water	6:54	0:0	7	codec
arg	6:61	6:89	6	p_sys->dequeue_output_buffer
water	6:61	0:0	7	p_sys
op	6:66	0:0	7	->
water	6:68	0:0	7	dequeue_output_buffer
arg	7:42	7:60	6	p_sys->buffer_info
water	7:42	0:0	7	p_sys
op	7:47	0:0	7	->
water	7:49	0:0	7	buffer_info
arg	7:62	7:69	6	timeout
water	7:62	0:0	7	timeout
if	8:8	13:8	4	(( * env ) ->ExceptionOccurred (env ))
cond	8:12	8:41	5	( * env ) ->ExceptionOccurred (env )
water	8:12	0:0	6	(
op	8:13	0:0	6	*
water	8:14	0:0	6	env
water	8:17	0:0	6	)
op	8:18	0:0	6	->
call	8:20	8:41	6	ExceptionOccurred
arg	8:38	8:41	7	env
water	8:38	0:0	8	env
stmts	8:44	13:8	5	
water	8:44	0:0	6	{
call	9:12	9:84	6	msg_Err
arg	9:20	9:25	7	p_dec
water	9:20	0:0	8	p_dec
arg	9:27	9:84	7	"Exception in MediaCodec.dequeueOutputBuffer (GetOutput)"
water	9:27	0:0	8	"Exception in MediaCodec.dequeueOutputBuffer (GetOutput)"
water	9:85	0:0	6	;
water	10:12	0:0	6	(
op	10:13	0:0	6	*
water	10:14	0:0	6	env
water	10:17	0:0	6	)
op	10:18	0:0	6	->
call	10:20	10:38	6	ExceptionClear
arg	10:35	10:38	7	env
water	10:35	0:0	8	env
water	10:39	0:0	6	;
water	11:12	0:0	6	p_sys
op	11:17	0:0	6	->
water	11:19	0:0	6	error_state
op	11:31	0:0	6	=
water	11:33	0:0	6	true
water	11:37	0:0	6	;
return	12:12	12:18	6	
water	13:8	0:0	6	}
if	14:8	99:8	4	(index >= 0)
cond	14:12	14:21	5	index >= 0
water	14:12	0:0	6	index
op	14:18	0:0	6	>=
water	14:21	0:0	6	0
stmts	14:24	99:8	5	
water	14:24	0:0	6	{
if	15:12	25:12	6	(! p_sys -> pixel_format)
cond	15:16	15:24	7	! p_sys -> pixel_format
op	15:16	0:0	8	!
water	15:17	0:0	8	p_sys
op	15:22	0:0	8	->
water	15:24	0:0	8	pixel_format
stmts	15:38	25:12	7	
water	15:38	0:0	8	{
call	16:16	16:94	8	msg_Warn
arg	16:25	16:30	9	p_dec
water	16:25	0:0	10	p_dec
arg	16:32	16:94	9	"Buffers returned before output format is set, dropping frame"
water	16:32	0:0	10	"Buffers returned before output format is set, dropping frame"
water	16:95	0:0	8	;
water	17:16	0:0	8	(
op	17:17	0:0	8	*
water	17:18	0:0	8	env
water	17:21	0:0	8	)
op	17:22	0:0	8	->
call	17:24	17:100	8	CallVoidMethod
arg	17:39	17:42	9	env
water	17:39	0:0	10	env
arg	17:44	17:56	9	p_sys->codec
water	17:44	0:0	10	p_sys
op	17:49	0:0	10	->
water	17:51	0:0	10	codec
arg	17:58	17:86	9	p_sys->release_output_buffer
water	17:58	0:0	10	p_sys
op	17:63	0:0	10	->
water	17:65	0:0	10	release_output_buffer
arg	17:88	17:93	9	index
water	17:88	0:0	10	index
arg	17:95	17:100	9	false
water	17:95	0:0	10	false
water	17:101	0:0	8	;
if	18:16	23:16	8	(( * env ) ->ExceptionOccurred (env ))
cond	18:20	18:49	9	( * env ) ->ExceptionOccurred (env )
water	18:20	0:0	10	(
op	18:21	0:0	10	*
water	18:22	0:0	10	env
water	18:25	0:0	10	)
op	18:26	0:0	10	->
call	18:28	18:49	10	ExceptionOccurred
arg	18:46	18:49	11	env
water	18:46	0:0	12	env
stmts	18:52	23:16	9	
water	18:52	0:0	10	{
call	19:20	19:80	10	msg_Err
arg	19:28	19:33	11	p_dec
water	19:28	0:0	12	p_dec
arg	19:35	19:80	11	"Exception in MediaCodec.releaseOutputBuffer"
water	19:35	0:0	12	"Exception in MediaCodec.releaseOutputBuffer"
water	19:81	0:0	10	;
water	20:20	0:0	10	(
op	20:21	0:0	10	*
water	20:22	0:0	10	env
water	20:25	0:0	10	)
op	20:26	0:0	10	->
call	20:28	20:46	10	ExceptionClear
arg	20:43	20:46	11	env
water	20:43	0:0	12	env
water	20:47	0:0	10	;
water	21:20	0:0	10	p_sys
op	21:25	0:0	10	->
water	21:27	0:0	10	error_state
op	21:39	0:0	10	=
water	21:41	0:0	10	true
water	21:45	0:0	10	;
return	22:20	22:26	10	
water	23:16	0:0	10	}
continue	24:16	24:24	8	
water	25:12	0:0	8	}
if	26:12	28:12	6	(! * pp_pic)
cond	26:16	26:18	7	! * pp_pic
op	26:16	0:0	8	!
op	26:17	0:0	8	*
water	26:18	0:0	8	pp_pic
stmts	26:26	28:12	7	
water	26:26	0:0	8	{
op	27:16	0:0	8	*
water	27:17	0:0	8	pp_pic
op	27:24	0:0	8	=
call	27:26	27:50	8	decoder_NewPicture
arg	27:45	27:50	9	p_dec
water	27:45	0:0	10	p_dec
water	27:51	0:0	8	;
water	28:12	0:0	8	}
else	28:14	42:12	6
stmts	28:19	42:12	7	
if	28:19	42:12	8	(p_sys -> direct_rendering)
cond	28:23	28:30	9	p_sys -> direct_rendering
water	28:23	0:0	10	p_sys
op	28:28	0:0	10	->
water	28:30	0:0	10	direct_rendering
stmts	28:48	42:12	9	
water	28:48	0:0	10	{
decl	29:16	29:42	10	picture_t	*p_pic
op	29:33	0:0	10	=
op	29:35	0:0	10	*
water	29:36	0:0	10	pp_pic
decl	30:16	30:54	10	picture_sys_t	*p_picsys
op	30:40	0:0	10	=
water	30:42	0:0	10	p_pic
op	30:47	0:0	10	->
water	30:49	0:0	10	p_sys
decl	31:16	31:52	10	int	i_prev_index
op	31:33	0:0	10	=
water	31:35	0:0	10	p_picsys
op	31:43	0:0	10	->
water	31:45	0:0	10	i_index
water	32:16	0:0	10	(
op	32:17	0:0	10	*
water	32:18	0:0	10	env
water	32:21	0:0	10	)
op	32:22	0:0	10	->
call	32:24	32:107	10	CallVoidMethod
arg	32:39	32:42	11	env
water	32:39	0:0	12	env
arg	32:44	32:56	11	p_sys->codec
water	32:44	0:0	12	p_sys
op	32:49	0:0	12	->
water	32:51	0:0	12	codec
arg	32:58	32:86	11	p_sys->release_output_buffer
water	32:58	0:0	12	p_sys
op	32:63	0:0	12	->
water	32:65	0:0	12	release_output_buffer
arg	32:88	32:100	11	i_prev_index
water	32:88	0:0	12	i_prev_index
arg	32:102	32:107	11	false
water	32:102	0:0	12	false
water	32:108	0:0	10	;
if	33:16	39:16	10	(( * env ) ->ExceptionOccurred (env ))
cond	33:20	33:49	11	( * env ) ->ExceptionOccurred (env )
water	33:20	0:0	12	(
op	33:21	0:0	12	*
water	33:22	0:0	12	env
water	33:25	0:0	12	)
op	33:26	0:0	12	->
call	33:28	33:49	12	ExceptionOccurred
arg	33:46	33:49	13	env
water	33:46	0:0	14	env
stmts	33:52	39:16	11	
water	33:52	0:0	12	{
call	34:20	35:71	12	msg_Err
arg	34:28	34:33	13	p_dec
water	34:28	0:0	14	p_dec
arg	34:35	35:71	13	"Exception in MediaCodec.releaseOutputBuffer ""(GetOutput, overwriting previous picture)"
water	34:35	0:0	14	"Exception in MediaCodec.releaseOutputBuffer "
water	35:28	0:0	14	"(GetOutput, overwriting previous picture)"
water	35:72	0:0	12	;
water	36:20	0:0	12	(
op	36:21	0:0	12	*
water	36:22	0:0	12	env
water	36:25	0:0	12	)
op	36:26	0:0	12	->
call	36:28	36:46	12	ExceptionClear
arg	36:43	36:46	13	env
water	36:43	0:0	14	env
water	36:47	0:0	12	;
water	37:20	0:0	12	p_sys
op	37:25	0:0	12	->
water	37:27	0:0	12	error_state
op	37:39	0:0	12	=
water	37:41	0:0	12	true
water	37:45	0:0	12	;
return	38:20	38:26	12	
water	39:16	0:0	12	}
water	41:16	0:0	10	p_sys
op	41:21	0:0	10	->
water	41:23	0:0	10	inflight_picture
op	41:39	0:0	10	[
water	41:40	0:0	10	i_prev_index
op	41:52	0:0	10	]
op	41:54	0:0	10	=
water	41:56	0:0	10	NULL
water	41:60	0:0	10	;
water	42:12	0:0	10	}
if	43:12	89:12	6	(* pp_pic)
cond	43:16	43:17	7	* pp_pic
op	43:16	0:0	8	*
water	43:17	0:0	8	pp_pic
stmts	43:25	89:12	7	
water	43:25	0:0	8	{
decl	44:16	44:42	8	picture_t	*p_pic
op	44:33	0:0	8	=
op	44:35	0:0	8	*
water	44:36	0:0	8	pp_pic
decl	51:16	51:76	8	int64_t	forced_ts
op	51:34	0:0	8	=
call	51:36	51:75	9	timestamp_FifoGet
arg	51:54	51:75	10	p_sys->timestamp_fifo
water	51:54	0:0	11	p_sys
op	51:59	0:0	11	->
water	51:61	0:0	11	timestamp_fifo
if	52:16	53:97	8	(forced_ts == VLC_TS_INVALID)
cond	52:20	52:33	9	forced_ts == VLC_TS_INVALID
water	52:20	0:0	10	forced_ts
op	52:30	0:0	10	==
water	52:33	0:0	10	VLC_TS_INVALID
stmts	53:20	53:97	9	
water	53:20	0:0	10	p_pic
op	53:25	0:0	10	->
water	53:27	0:0	10	date
op	53:32	0:0	10	=
water	53:34	0:0	10	(
op	53:35	0:0	10	*
water	53:36	0:0	10	env
water	53:39	0:0	10	)
op	53:40	0:0	10	->
call	53:42	53:96	10	GetLongField
arg	53:55	53:58	11	env
water	53:55	0:0	12	env
arg	53:60	53:78	11	p_sys->buffer_info
water	53:60	0:0	12	p_sys
op	53:65	0:0	12	->
water	53:67	0:0	12	buffer_info
arg	53:80	53:96	11	p_sys->pts_field
water	53:80	0:0	12	p_sys
op	53:85	0:0	12	->
water	53:87	0:0	12	pts_field
water	53:97	0:0	10	;
else	54:16	55:43	8
stmts	55:20	55:43	9	
water	55:20	0:0	10	p_pic
op	55:25	0:0	10	->
water	55:27	0:0	10	date
op	55:32	0:0	10	=
water	55:34	0:0	10	forced_ts
water	55:43	0:0	10	;
if	56:16	64:16	8	(p_sys -> direct_rendering)
cond	56:20	56:27	9	p_sys -> direct_rendering
water	56:20	0:0	10	p_sys
op	56:25	0:0	10	->
water	56:27	0:0	10	direct_rendering
stmts	56:45	64:16	9	
water	56:45	0:0	10	{
decl	57:20	57:58	10	picture_sys_t	*p_picsys
op	57:44	0:0	10	=
water	57:46	0:0	10	p_pic
op	57:51	0:0	10	->
water	57:53	0:0	10	p_sys
water	58:20	0:0	10	p_picsys
op	58:28	0:0	10	->
water	58:30	0:0	10	pf_display_callback
op	58:50	0:0	10	=
water	58:52	0:0	10	DisplayCallback
water	58:67	0:0	10	;
water	59:20	0:0	10	p_picsys
op	59:28	0:0	10	->
water	59:30	0:0	10	pf_unlock_callback
op	59:49	0:0	10	=
water	59:51	0:0	10	UnlockCallback
water	59:65	0:0	10	;
water	60:20	0:0	10	p_picsys
op	60:28	0:0	10	->
water	60:30	0:0	10	p_dec
op	60:36	0:0	10	=
water	60:38	0:0	10	p_dec
water	60:43	0:0	10	;
water	61:20	0:0	10	p_picsys
op	61:28	0:0	10	->
water	61:30	0:0	10	i_index
op	61:38	0:0	10	=
water	61:40	0:0	10	index
water	61:45	0:0	10	;
water	62:20	0:0	10	p_picsys
op	62:28	0:0	10	->
water	62:30	0:0	10	b_valid
op	62:38	0:0	10	=
water	62:40	0:0	10	true
water	62:44	0:0	10	;
water	63:20	0:0	10	p_sys
op	63:25	0:0	10	->
water	63:27	0:0	10	inflight_picture
op	63:43	0:0	10	[
water	63:44	0:0	10	index
op	63:49	0:0	10	]
op	63:51	0:0	10	=
water	63:53	0:0	10	p_pic
water	63:58	0:0	10	;
water	64:16	0:0	10	}
else	64:18	88:16	8
stmts	64:23	88:16	9	
water	64:23	0:0	10	{
decl	65:20	65:98	10	jobject	buf
op	65:32	0:0	10	=
water	65:34	0:0	10	(
op	65:35	0:0	10	*
water	65:36	0:0	10	env
water	65:39	0:0	10	)
op	65:40	0:0	10	->
call	65:42	65:97	11	GetObjectArrayElement
arg	65:64	65:67	12	env
water	65:64	0:0	13	env
arg	65:69	65:90	12	p_sys->output_buffers
water	65:69	0:0	13	p_sys
op	65:74	0:0	13	->
water	65:76	0:0	13	output_buffers
arg	65:92	65:97	12	index
water	65:92	0:0	13	index
decl	66:20	66:78	10	jsize	buf_size
op	66:35	0:0	10	=
water	66:37	0:0	10	(
op	66:38	0:0	10	*
water	66:39	0:0	10	env
water	66:42	0:0	10	)
op	66:43	0:0	10	->
call	66:45	66:77	11	GetDirectBufferCapacity
arg	66:69	66:72	12	env
water	66:69	0:0	13	env
arg	66:74	66:77	12	buf
water	66:74	0:0	13	buf
decl	67:20	67:75	10	uint8_t	*ptr
op	67:33	0:0	10	=
water	67:35	0:0	10	(
op	67:36	0:0	10	*
water	67:37	0:0	10	env
water	67:40	0:0	10	)
op	67:41	0:0	10	->
call	67:43	67:74	11	GetDirectBufferAddress
arg	67:66	67:69	12	env
water	67:66	0:0	13	env
arg	67:71	67:74	12	buf
water	67:71	0:0	13	buf
decl	68:20	68:94	10	int	size
op	68:29	0:0	10	=
water	68:31	0:0	10	(
op	68:32	0:0	10	*
water	68:33	0:0	10	env
water	68:36	0:0	10	)
op	68:37	0:0	10	->
call	68:39	68:93	11	GetIntField
arg	68:51	68:54	12	env
water	68:51	0:0	13	env
arg	68:56	68:74	12	p_sys->buffer_info
water	68:56	0:0	13	p_sys
op	68:61	0:0	13	->
water	68:63	0:0	13	buffer_info
arg	68:76	68:93	12	p_sys->size_field
water	68:76	0:0	13	p_sys
op	68:81	0:0	13	->
water	68:83	0:0	13	size_field
decl	69:20	69:98	10	int	offset
op	69:31	0:0	10	=
water	69:33	0:0	10	(
op	69:34	0:0	10	*
water	69:35	0:0	10	env
water	69:38	0:0	10	)
op	69:39	0:0	10	->
call	69:41	69:97	11	GetIntField
arg	69:53	69:56	12	env
water	69:53	0:0	13	env
arg	69:58	69:76	12	p_sys->buffer_info
water	69:58	0:0	13	p_sys
op	69:63	0:0	13	->
water	69:65	0:0	13	buffer_info
arg	69:78	69:97	12	p_sys->offset_field
water	69:78	0:0	13	p_sys
op	69:83	0:0	13	->
water	69:85	0:0	13	offset_field
water	70:20	0:0	10	ptr
op	70:24	0:0	10	+=
water	70:27	0:0	10	offset
water	70:33	0:0	10	;
decl	71:20	71:43	10	unsigned int	chroma_div
call	72:20	73:92	10	GetVlcChromaSizes
arg	72:38	72:60	11	p_dec->fmt_out.i_codec
water	72:38	0:0	12	p_dec
op	72:43	0:0	12	->
water	72:45	0:0	12	fmt_out
op	72:52	0:0	12	.
water	72:53	0:0	12	i_codec
arg	72:62	72:90	11	p_dec->fmt_out.video.i_width
water	72:62	0:0	12	p_dec
op	72:67	0:0	12	->
water	72:69	0:0	12	fmt_out
op	72:76	0:0	12	.
water	72:77	0:0	12	video
op	72:82	0:0	12	.
water	72:83	0:0	12	i_width
arg	73:38	73:67	11	p_dec->fmt_out.video.i_height
water	73:38	0:0	12	p_dec
op	73:43	0:0	12	->
water	73:45	0:0	12	fmt_out
op	73:52	0:0	12	.
water	73:53	0:0	12	video
op	73:58	0:0	12	.
water	73:59	0:0	12	i_height
arg	73:69	73:73	11	NULL
water	73:69	0:0	12	NULL
arg	73:75	73:79	11	NULL
water	73:75	0:0	12	NULL
arg	73:81	73:92	11	&chroma_div
op	73:81	0:0	12	&
water	73:82	0:0	12	chroma_div
water	73:93	0:0	10	;
call	74:20	75:86	10	CopyOmxPicture
arg	74:35	74:54	11	p_sys->pixel_format
water	74:35	0:0	12	p_sys
op	74:40	0:0	12	->
water	74:42	0:0	12	pixel_format
arg	74:56	74:61	11	p_pic
water	74:56	0:0	12	p_pic
arg	74:63	74:82	11	p_sys->slice_height
water	74:63	0:0	12	p_sys
op	74:68	0:0	12	->
water	74:70	0:0	12	slice_height
arg	74:84	74:97	11	p_sys->stride
water	74:84	0:0	12	p_sys
op	74:89	0:0	12	->
water	74:91	0:0	12	stride
arg	75:35	75:38	11	ptr
water	75:35	0:0	12	ptr
arg	75:40	75:50	11	chroma_div
water	75:40	0:0	12	chroma_div
arg	75:52	75:86	11	&p_sys->architecture_specific_data
op	75:52	0:0	12	&
water	75:53	0:0	12	p_sys
op	75:58	0:0	12	->
water	75:60	0:0	12	architecture_specific_data
water	75:87	0:0	10	;
water	76:20	0:0	10	(
op	76:21	0:0	10	*
water	76:22	0:0	10	env
water	76:25	0:0	10	)
op	76:26	0:0	10	->
call	76:28	76:104	10	CallVoidMethod
arg	76:43	76:46	11	env
water	76:43	0:0	12	env
arg	76:48	76:60	11	p_sys->codec
water	76:48	0:0	12	p_sys
op	76:53	0:0	12	->
water	76:55	0:0	12	codec
arg	76:62	76:90	11	p_sys->release_output_buffer
water	76:62	0:0	12	p_sys
op	76:67	0:0	12	->
water	76:69	0:0	12	release_output_buffer
arg	76:92	76:97	11	index
water	76:92	0:0	12	index
arg	76:99	76:104	11	false
water	76:99	0:0	12	false
water	76:105	0:0	10	;
decl	77:20	77:73	10	jthrowable	exception
op	77:41	0:0	10	=
water	77:43	0:0	10	(
op	77:44	0:0	10	*
water	77:45	0:0	10	env
water	77:48	0:0	10	)
op	77:49	0:0	10	->
call	77:51	77:72	11	ExceptionOccurred
arg	77:69	77:72	12	env
water	77:69	0:0	13	env
if	78:20	86:20	10	(exception != NULL)
cond	78:24	78:37	11	exception != NULL
water	78:24	0:0	12	exception
op	78:34	0:0	12	!=
water	78:37	0:0	12	NULL
stmts	78:43	86:20	11	
water	78:43	0:0	12	{
decl	79:24	79:112	12	jclass	illegalStateException
op	79:53	0:0	12	=
water	79:55	0:0	12	(
op	79:56	0:0	12	*
water	79:57	0:0	12	env
water	79:60	0:0	12	)
op	79:61	0:0	12	->
call	79:63	79:111	13	FindClass
arg	79:73	79:76	14	env
water	79:73	0:0	15	env
arg	79:78	79:111	14	"java/lang/IllegalStateException"
water	79:78	0:0	15	"java/lang/IllegalStateException"
if	80:24	85:24	12	(( * env ) ->IsInstanceOf (env ,exception ,illegalStateException ))
cond	80:27	80:85	13	( * env ) ->IsInstanceOf (env ,exception ,illegalStateException )
water	80:27	0:0	14	(
op	80:28	0:0	14	*
water	80:29	0:0	14	env
water	80:32	0:0	14	)
op	80:33	0:0	14	->
call	80:35	80:85	14	IsInstanceOf
arg	80:48	80:51	15	env
water	80:48	0:0	16	env
arg	80:53	80:62	15	exception
water	80:53	0:0	16	exception
arg	80:64	80:85	15	illegalStateException
water	80:64	0:0	16	illegalStateException
stmts	80:88	85:24	13	
water	80:88	0:0	14	{
call	81:28	81:114	14	msg_Err
arg	81:36	81:41	15	p_dec
water	81:36	0:0	16	p_dec
arg	81:43	81:114	15	"Codec error (IllegalStateException) in MediaCodec.releaseOutputBuffer"
water	81:43	0:0	16	"Codec error (IllegalStateException) in MediaCodec.releaseOutputBuffer"
water	81:115	0:0	14	;
water	82:28	0:0	14	(
op	82:29	0:0	14	*
water	82:30	0:0	14	env
water	82:33	0:0	14	)
op	82:34	0:0	14	->
call	82:36	82:54	14	ExceptionClear
arg	82:51	82:54	15	env
water	82:51	0:0	16	env
water	82:55	0:0	14	;
water	83:28	0:0	14	(
op	83:29	0:0	14	*
water	83:30	0:0	14	env
water	83:33	0:0	14	)
op	83:34	0:0	14	->
call	83:36	83:77	14	DeleteLocalRef
arg	83:51	83:54	15	env
water	83:51	0:0	16	env
arg	83:56	83:77	15	illegalStateException
water	83:56	0:0	16	illegalStateException
water	83:78	0:0	14	;
water	84:28	0:0	14	p_sys
op	84:33	0:0	14	->
water	84:35	0:0	14	error_state
op	84:47	0:0	14	=
water	84:49	0:0	14	true
water	84:53	0:0	14	;
water	85:24	0:0	14	}
water	86:20	0:0	12	}
water	87:20	0:0	10	(
op	87:21	0:0	10	*
water	87:22	0:0	10	env
water	87:25	0:0	10	)
op	87:26	0:0	10	->
call	87:28	87:51	10	DeleteLocalRef
arg	87:43	87:46	11	env
water	87:43	0:0	12	env
arg	87:48	87:51	11	buf
water	87:48	0:0	12	buf
water	87:52	0:0	10	;
water	88:16	0:0	10	}
water	89:12	0:0	8	}
else	89:14	97:12	6
stmts	89:19	97:12	7	
water	89:19	0:0	8	{
call	90:16	90:51	8	msg_Warn
arg	90:25	90:30	9	p_dec
water	90:25	0:0	10	p_dec
arg	90:32	90:51	9	"NewPicture failed"
water	90:32	0:0	10	"NewPicture failed"
water	90:52	0:0	8	;
water	91:16	0:0	8	(
op	91:17	0:0	8	*
water	91:18	0:0	8	env
water	91:21	0:0	8	)
op	91:22	0:0	8	->
call	91:24	91:100	8	CallVoidMethod
arg	91:39	91:42	9	env
water	91:39	0:0	10	env
arg	91:44	91:56	9	p_sys->codec
water	91:44	0:0	10	p_sys
op	91:49	0:0	10	->
water	91:51	0:0	10	codec
arg	91:58	91:86	9	p_sys->release_output_buffer
water	91:58	0:0	10	p_sys
op	91:63	0:0	10	->
water	91:65	0:0	10	release_output_buffer
arg	91:88	91:93	9	index
water	91:88	0:0	10	index
arg	91:95	91:100	9	false
water	91:95	0:0	10	false
water	91:101	0:0	8	;
if	92:16	96:16	8	(( * env ) ->ExceptionOccurred (env ))
cond	92:20	92:49	9	( * env ) ->ExceptionOccurred (env )
water	92:20	0:0	10	(
op	92:21	0:0	10	*
water	92:22	0:0	10	env
water	92:25	0:0	10	)
op	92:26	0:0	10	->
call	92:28	92:49	10	ExceptionOccurred
arg	92:46	92:49	11	env
water	92:46	0:0	12	env
stmts	92:52	96:16	9	
water	92:52	0:0	10	{
call	93:20	93:92	10	msg_Err
arg	93:28	93:33	11	p_dec
water	93:28	0:0	12	p_dec
arg	93:35	93:92	11	"Exception in MediaCodec.releaseOutputBuffer (GetOutput)"
water	93:35	0:0	12	"Exception in MediaCodec.releaseOutputBuffer (GetOutput)"
water	93:93	0:0	10	;
water	94:20	0:0	10	(
op	94:21	0:0	10	*
water	94:22	0:0	10	env
water	94:25	0:0	10	)
op	94:26	0:0	10	->
call	94:28	94:46	10	ExceptionClear
arg	94:43	94:46	11	env
water	94:43	0:0	12	env
water	94:47	0:0	10	;
water	95:20	0:0	10	p_sys
op	95:25	0:0	10	->
water	95:27	0:0	10	error_state
op	95:39	0:0	10	=
water	95:41	0:0	10	true
water	95:45	0:0	10	;
water	96:16	0:0	10	}
water	97:12	0:0	8	}
return	98:12	98:18	6	
water	99:8	0:0	6	}
else	99:10	117:8	4
stmts	99:15	117:8	5	
if	99:15	117:8	6	(index == INFO_OUTPUT_BUFFERS_CHANGED)
cond	99:19	99:28	7	index == INFO_OUTPUT_BUFFERS_CHANGED
water	99:19	0:0	8	index
op	99:25	0:0	8	==
water	99:28	0:0	8	INFO_OUTPUT_BUFFERS_CHANGED
stmts	99:57	117:8	7	
water	99:57	0:0	8	{
call	100:12	100:51	8	msg_Dbg
arg	100:20	100:25	9	p_dec
water	100:20	0:0	10	p_dec
arg	100:27	100:51	9	"output buffers changed"
water	100:27	0:0	10	"output buffers changed"
water	100:52	0:0	8	;
water	101:12	0:0	8	(
op	101:13	0:0	8	*
water	101:14	0:0	8	env
water	101:17	0:0	8	)
op	101:18	0:0	8	->
call	101:20	101:62	8	DeleteGlobalRef
arg	101:36	101:39	9	env
water	101:36	0:0	10	env
arg	101:41	101:62	9	p_sys->output_buffers
water	101:41	0:0	10	p_sys
op	101:46	0:0	10	->
water	101:48	0:0	10	output_buffers
water	101:63	0:0	8	;
water	102:12	0:0	8	p_sys
op	102:17	0:0	8	->
water	102:19	0:0	8	output_buffers
op	102:34	0:0	8	=
water	102:36	0:0	8	(
op	102:37	0:0	8	*
water	102:38	0:0	8	env
water	102:41	0:0	8	)
op	102:42	0:0	8	->
call	102:44	103:86	8	CallObjectMethod
arg	102:61	102:64	9	env
water	102:61	0:0	10	env
arg	102:66	102:78	9	p_sys->codec
water	102:66	0:0	10	p_sys
op	102:71	0:0	10	->
water	102:73	0:0	10	codec
arg	103:61	103:86	9	p_sys->get_output_buffers
water	103:61	0:0	10	p_sys
op	103:66	0:0	10	->
water	103:68	0:0	10	get_output_buffers
water	103:87	0:0	8	;
if	104:12	110:12	8	(( * env ) ->ExceptionOccurred (env ))
cond	104:16	104:45	9	( * env ) ->ExceptionOccurred (env )
water	104:16	0:0	10	(
op	104:17	0:0	10	*
water	104:18	0:0	10	env
water	104:21	0:0	10	)
op	104:22	0:0	10	->
call	104:24	104:45	10	ExceptionOccurred
arg	104:42	104:45	11	env
water	104:42	0:0	12	env
stmts	104:48	110:12	9	
water	104:48	0:0	10	{
call	105:16	105:84	10	msg_Err
arg	105:24	105:29	11	p_dec
water	105:24	0:0	12	p_dec
arg	105:31	105:84	11	"Exception in MediaCodec.getOutputBuffer (GetOutput)"
water	105:31	0:0	12	"Exception in MediaCodec.getOutputBuffer (GetOutput)"
water	105:85	0:0	10	;
water	106:16	0:0	10	(
op	106:17	0:0	10	*
water	106:18	0:0	10	env
water	106:21	0:0	10	)
op	106:22	0:0	10	->
call	106:24	106:42	10	ExceptionClear
arg	106:39	106:42	11	env
water	106:39	0:0	12	env
water	106:43	0:0	10	;
water	107:16	0:0	10	p_sys
op	107:21	0:0	10	->
water	107:23	0:0	10	output_buffers
op	107:38	0:0	10	=
water	107:40	0:0	10	NULL
water	107:44	0:0	10	;
water	108:16	0:0	10	p_sys
op	108:21	0:0	10	->
water	108:23	0:0	10	error_state
op	108:35	0:0	10	=
water	108:37	0:0	10	true
water	108:41	0:0	10	;
return	109:16	109:22	10	
water	110:12	0:0	10	}
water	111:12	0:0	8	p_sys
op	111:17	0:0	8	->
water	111:19	0:0	8	output_buffers
op	111:34	0:0	8	=
water	111:36	0:0	8	(
op	111:37	0:0	8	*
water	111:38	0:0	8	env
water	111:41	0:0	8	)
op	111:42	0:0	8	->
call	111:44	111:83	8	NewGlobalRef
arg	111:57	111:60	9	env
water	111:57	0:0	10	env
arg	111:62	111:83	9	p_sys->output_buffers
water	111:62	0:0	10	p_sys
op	111:67	0:0	10	->
water	111:69	0:0	10	output_buffers
water	111:84	0:0	8	;
call	112:12	112:53	8	vlc_mutex_lock
arg	112:27	112:53	9	get_android_opaque_mutex()
call	112:27	112:52	10	get_android_opaque_mutex
water	112:54	0:0	8	;
call	113:12	113:40	8	free
arg	113:17	113:40	9	p_sys->inflight_picture
water	113:17	0:0	10	p_sys
op	113:22	0:0	10	->
water	113:24	0:0	10	inflight_picture
water	113:41	0:0	8	;
water	114:12	0:0	8	p_sys
op	114:17	0:0	8	->
water	114:19	0:0	8	i_output_buffers
op	114:36	0:0	8	=
water	114:38	0:0	8	(
op	114:39	0:0	8	*
water	114:40	0:0	8	env
water	114:43	0:0	8	)
op	114:44	0:0	8	->
call	114:46	114:87	8	GetArrayLength
arg	114:61	114:64	9	env
water	114:61	0:0	10	env
arg	114:66	114:87	9	p_sys->output_buffers
water	114:66	0:0	10	p_sys
op	114:71	0:0	10	->
water	114:73	0:0	10	output_buffers
water	114:88	0:0	8	;
water	115:12	0:0	8	p_sys
op	115:17	0:0	8	->
water	115:19	0:0	8	inflight_picture
op	115:36	0:0	8	=
call	115:38	115:92	8	calloc
arg	115:45	115:46	9	1
water	115:45	0:0	10	1
arg	115:48	115:92	9	sizeof(picture_t*)*p_sys->i_output_buffers
op	115:48	0:0	10	sizeof
water	115:54	0:0	10	(
water	115:55	0:0	10	picture_t
op	115:64	0:0	10	*
water	115:65	0:0	10	)
op	115:67	0:0	10	*
water	115:69	0:0	10	p_sys
op	115:74	0:0	10	->
water	115:76	0:0	10	i_output_buffers
water	115:93	0:0	8	;
call	116:12	116:55	8	vlc_mutex_unlock
arg	116:29	116:55	9	get_android_opaque_mutex()
call	116:29	116:54	10	get_android_opaque_mutex
water	116:56	0:0	8	;
water	117:8	0:0	8	}
else	117:10	181:8	4
stmts	117:15	181:8	5	
if	117:15	181:8	6	(index == INFO_OUTPUT_FORMAT_CHANGED)
cond	117:19	117:28	7	index == INFO_OUTPUT_FORMAT_CHANGED
water	117:19	0:0	8	index
op	117:25	0:0	8	==
water	117:28	0:0	8	INFO_OUTPUT_FORMAT_CHANGED
stmts	117:56	181:8	7	
water	117:56	0:0	8	{
decl	118:12	118:98	8	jobject	format
op	118:27	0:0	8	=
water	118:29	0:0	8	(
op	118:30	0:0	8	*
water	118:31	0:0	8	env
water	118:34	0:0	8	)
op	118:35	0:0	8	->
call	118:37	118:97	9	CallObjectMethod
arg	118:54	118:57	10	env
water	118:54	0:0	11	env
arg	118:59	118:71	10	p_sys->codec
water	118:59	0:0	11	p_sys
op	118:64	0:0	11	->
water	118:66	0:0	11	codec
arg	118:73	118:97	10	p_sys->get_output_format
water	118:73	0:0	11	p_sys
op	118:78	0:0	11	->
water	118:80	0:0	11	get_output_format
if	119:12	124:12	8	(( * env ) ->ExceptionOccurred (env ))
cond	119:16	119:45	9	( * env ) ->ExceptionOccurred (env )
water	119:16	0:0	10	(
op	119:17	0:0	10	*
water	119:18	0:0	10	env
water	119:21	0:0	10	)
op	119:22	0:0	10	->
call	119:24	119:45	10	ExceptionOccurred
arg	119:42	119:45	11	env
water	119:42	0:0	12	env
stmts	119:48	124:12	9	
water	119:48	0:0	10	{
call	120:16	120:84	10	msg_Err
arg	120:24	120:29	11	p_dec
water	120:24	0:0	12	p_dec
arg	120:31	120:84	11	"Exception in MediaCodec.getOutputFormat (GetOutput)"
water	120:31	0:0	12	"Exception in MediaCodec.getOutputFormat (GetOutput)"
water	120:85	0:0	10	;
water	121:16	0:0	10	(
op	121:17	0:0	10	*
water	121:18	0:0	10	env
water	121:21	0:0	10	)
op	121:22	0:0	10	->
call	121:24	121:42	10	ExceptionClear
arg	121:39	121:42	11	env
water	121:39	0:0	12	env
water	121:43	0:0	10	;
water	122:16	0:0	10	p_sys
op	122:21	0:0	10	->
water	122:23	0:0	10	error_state
op	122:35	0:0	10	=
water	122:37	0:0	10	true
water	122:41	0:0	10	;
return	123:16	123:22	10	
water	124:12	0:0	10	}
decl	125:12	125:90	8	jobject	format_string
op	125:34	0:0	8	=
water	125:36	0:0	8	(
op	125:37	0:0	8	*
water	125:38	0:0	8	env
water	125:41	0:0	8	)
op	125:42	0:0	8	->
call	125:44	125:89	9	CallObjectMethod
arg	125:61	125:64	10	env
water	125:61	0:0	11	env
arg	125:66	125:72	10	format
water	125:66	0:0	11	format
arg	125:74	125:89	10	p_sys->tostring
water	125:74	0:0	11	p_sys
op	125:79	0:0	11	->
water	125:81	0:0	11	tostring
decl	126:12	126:77	8	jsize	format_len
op	126:29	0:0	8	=
water	126:31	0:0	8	(
op	126:32	0:0	8	*
water	126:33	0:0	8	env
water	126:36	0:0	8	)
op	126:37	0:0	8	->
call	126:39	126:76	9	GetStringUTFLength
arg	126:58	126:61	10	env
water	126:58	0:0	11	env
arg	126:63	126:76	10	format_string
water	126:63	0:0	11	format_string
decl	127:12	127:88	8	const char	*format_ptr
op	127:35	0:0	8	=
water	127:37	0:0	8	(
op	127:38	0:0	8	*
water	127:39	0:0	8	env
water	127:42	0:0	8	)
op	127:43	0:0	8	->
call	127:45	127:87	9	GetStringUTFChars
arg	127:63	127:66	10	env
water	127:63	0:0	11	env
arg	127:68	127:81	10	format_string
water	127:68	0:0	11	format_string
arg	127:83	127:87	10	NULL
water	127:83	0:0	11	NULL
call	128:12	128:80	8	msg_Dbg
arg	128:20	128:25	9	p_dec
water	128:20	0:0	10	p_dec
arg	128:27	128:56	9	"output format changed: %.*s"
water	128:27	0:0	10	"output format changed: %.*s"
arg	128:58	128:68	9	format_len
water	128:58	0:0	10	format_len
arg	128:70	128:80	9	format_ptr
water	128:70	0:0	10	format_ptr
water	128:81	0:0	8	;
water	129:12	0:0	8	(
op	129:13	0:0	8	*
water	129:14	0:0	8	env
water	129:17	0:0	8	)
op	129:18	0:0	8	->
call	129:20	129:72	8	ReleaseStringUTFChars
arg	129:42	129:45	9	env
water	129:42	0:0	10	env
arg	129:47	129:60	9	format_string
water	129:47	0:0	10	format_string
arg	129:62	129:72	9	format_ptr
water	129:62	0:0	10	format_ptr
water	129:73	0:0	8	;
call	130:12	130:104	8	ArchitectureSpecificCopyHooksDestroy
arg	130:49	130:68	9	p_sys->pixel_format
water	130:49	0:0	10	p_sys
op	130:54	0:0	10	->
water	130:56	0:0	10	pixel_format
arg	130:70	130:104	9	&p_sys->architecture_specific_data
op	130:70	0:0	10	&
water	130:71	0:0	10	p_sys
op	130:76	0:0	10	->
water	130:78	0:0	10	architecture_specific_data
water	130:105	0:0	8	;
decl	131:12	131:62	8	int	width
op	131:32	0:0	8	=
call	131:34	131:61	9	GET_INTEGER
arg	131:46	131:52	10	format
water	131:46	0:0	11	format
arg	131:54	131:61	10	"width"
water	131:54	0:0	11	"width"
decl	132:12	132:63	8	int	height
op	132:32	0:0	8	=
call	132:34	132:62	9	GET_INTEGER
arg	132:46	132:52	10	format
water	132:46	0:0	11	format
arg	132:54	132:62	10	"height"
water	132:54	0:0	11	"height"
water	133:12	0:0	8	p_sys
op	133:17	0:0	8	->
water	133:19	0:0	8	stride
op	133:32	0:0	8	=
call	133:34	133:62	8	GET_INTEGER
arg	133:46	133:52	9	format
water	133:46	0:0	10	format
arg	133:54	133:62	9	"stride"
water	133:54	0:0	10	"stride"
water	133:63	0:0	8	;
water	134:12	0:0	8	p_sys
op	134:17	0:0	8	->
water	134:19	0:0	8	slice_height
op	134:32	0:0	8	=
call	134:34	134:68	8	GET_INTEGER
arg	134:46	134:52	9	format
water	134:46	0:0	10	format
arg	134:54	134:68	9	"slice-height"
water	134:54	0:0	10	"slice-height"
water	134:69	0:0	8	;
water	135:12	0:0	8	p_sys
op	135:17	0:0	8	->
water	135:19	0:0	8	pixel_format
op	135:32	0:0	8	=
call	135:34	135:68	8	GET_INTEGER
arg	135:46	135:52	9	format
water	135:46	0:0	10	format
arg	135:54	135:68	9	"color-format"
water	135:54	0:0	10	"color-format"
water	135:69	0:0	8	;
water	136:12	0:0	8	p_sys
op	136:17	0:0	8	->
water	136:19	0:0	8	crop_left
op	136:32	0:0	8	=
call	136:34	136:65	8	GET_INTEGER
arg	136:46	136:52	9	format
water	136:46	0:0	10	format
arg	136:54	136:65	9	"crop-left"
water	136:54	0:0	10	"crop-left"
water	136:66	0:0	8	;
water	137:12	0:0	8	p_sys
op	137:17	0:0	8	->
water	137:19	0:0	8	crop_top
op	137:32	0:0	8	=
call	137:34	137:64	8	GET_INTEGER
arg	137:46	137:52	9	format
water	137:46	0:0	10	format
arg	137:54	137:64	9	"crop-top"
water	137:54	0:0	10	"crop-top"
water	137:65	0:0	8	;
decl	138:12	138:67	8	int	crop_right
op	138:32	0:0	8	=
call	138:34	138:66	9	GET_INTEGER
arg	138:46	138:52	10	format
water	138:46	0:0	11	format
arg	138:54	138:66	10	"crop-right"
water	138:54	0:0	11	"crop-right"
decl	139:12	139:68	8	int	crop_bottom
op	139:32	0:0	8	=
call	139:34	139:67	9	GET_INTEGER
arg	139:46	139:52	10	format
water	139:46	0:0	11	format
arg	139:54	139:67	10	"crop-bottom"
water	139:54	0:0	11	"crop-bottom"
decl	140:12	140:40	8	const char	*name
op	140:29	0:0	8	=
water	140:31	0:0	8	"unknown"
if	141:12	148:12	8	(p_sys -> direct_rendering)
cond	141:16	141:23	9	p_sys -> direct_rendering
water	141:16	0:0	10	p_sys
op	141:21	0:0	10	->
water	141:23	0:0	10	direct_rendering
stmts	141:41	148:12	9	
water	141:41	0:0	10	{
decl	142:16	142:44	10	int	sar_num
op	142:28	0:0	10	=
water	142:30	0:0	10	1
water	142:31	0:0	10	,
decl	142:16	142:44	10	int	sar_den
op	142:41	0:0	10	=
water	142:43	0:0	10	1
if	143:16	146:16	10	(p_dec -> fmt_in . video . i_sar_num != 0 && p_dec -> fmt_in . video . i_sar_den != 0)
cond	143:20	143:91	11	p_dec -> fmt_in . video . i_sar_num != 0 && p_dec -> fmt_in . video . i_sar_den != 0
water	143:20	0:0	12	p_dec
op	143:25	0:0	12	->
water	143:27	0:0	12	fmt_in
op	143:33	0:0	12	.
water	143:34	0:0	12	video
op	143:39	0:0	12	.
water	143:40	0:0	12	i_sar_num
op	143:50	0:0	12	!=
water	143:53	0:0	12	0
op	143:55	0:0	12	&&
water	143:58	0:0	12	p_dec
op	143:63	0:0	12	->
water	143:65	0:0	12	fmt_in
op	143:71	0:0	12	.
water	143:72	0:0	12	video
op	143:77	0:0	12	.
water	143:78	0:0	12	i_sar_den
op	143:88	0:0	12	!=
water	143:91	0:0	12	0
stmts	143:94	146:16	11	
water	143:94	0:0	12	{
water	144:20	0:0	12	sar_num
op	144:28	0:0	12	=
water	144:30	0:0	12	p_dec
op	144:35	0:0	12	->
water	144:37	0:0	12	fmt_in
op	144:43	0:0	12	.
water	144:44	0:0	12	video
op	144:49	0:0	12	.
water	144:50	0:0	12	i_sar_num
water	144:59	0:0	12	;
water	145:20	0:0	12	sar_den
op	145:28	0:0	12	=
water	145:30	0:0	12	p_dec
op	145:35	0:0	12	->
water	145:37	0:0	12	fmt_in
op	145:43	0:0	12	.
water	145:44	0:0	12	video
op	145:49	0:0	12	.
water	145:50	0:0	12	i_sar_den
water	145:59	0:0	12	;
water	146:16	0:0	12	}
call	147:16	147:96	10	jni_SetAndroidSurfaceSizeEnv
arg	147:45	147:48	11	env
water	147:45	0:0	12	env
arg	147:50	147:55	11	width
water	147:50	0:0	12	width
arg	147:57	147:63	11	height
water	147:57	0:0	12	height
arg	147:65	147:70	11	width
water	147:65	0:0	12	width
arg	147:72	147:78	11	height
water	147:72	0:0	12	height
arg	147:80	147:87	11	sar_num
water	147:80	0:0	12	sar_num
arg	147:89	147:96	11	sar_den
water	147:89	0:0	12	sar_den
water	147:97	0:0	10	;
water	148:12	0:0	10	}
else	148:14	155:12	8
stmts	148:19	155:12	9	
water	148:19	0:0	10	{
if	149:16	154:16	10	(!GetVlcChromaFormat (p_sys -> pixel_format ,& p_dec -> fmt_out . i_codec ,& name ))
cond	149:20	150:70	11	!GetVlcChromaFormat (p_sys -> pixel_format ,& p_dec -> fmt_out . i_codec ,& name )
op	149:20	0:0	12	!
call	149:21	150:70	12	GetVlcChromaFormat
arg	149:40	149:59	13	p_sys->pixel_format
water	149:40	0:0	14	p_sys
op	149:45	0:0	14	->
water	149:47	0:0	14	pixel_format
arg	150:40	150:63	13	&p_dec->fmt_out.i_codec
op	150:40	0:0	14	&
water	150:41	0:0	14	p_dec
op	150:46	0:0	14	->
water	150:48	0:0	14	fmt_out
op	150:55	0:0	14	.
water	150:56	0:0	14	i_codec
arg	150:65	150:70	13	&name
op	150:65	0:0	14	&
water	150:66	0:0	14	name
stmts	150:73	154:16	11	
water	150:73	0:0	12	{
call	151:20	151:64	12	msg_Err
arg	151:28	151:33	13	p_dec
water	151:28	0:0	14	p_dec
arg	151:35	151:64	13	"color-format not recognized"
water	151:35	0:0	14	"color-format not recognized"
water	151:65	0:0	12	;
water	152:20	0:0	12	p_sys
op	152:25	0:0	12	->
water	152:27	0:0	12	error_state
op	152:39	0:0	12	=
water	152:41	0:0	12	true
water	152:45	0:0	12	;
return	153:20	153:26	12	
water	154:16	0:0	12	}
water	155:12	0:0	10	}
call	156:12	158:78	8	msg_Dbg
arg	156:20	156:25	9	p_dec
water	156:20	0:0	10	p_dec
arg	156:27	156:80	9	"output: %d %s, %dx%d stride %d %d, crop %d %d %d %d"
water	156:27	0:0	10	"output: %d %s, %dx%d stride %d %d, crop %d %d %d %d"
arg	157:20	157:39	9	p_sys->pixel_format
water	157:20	0:0	10	p_sys
op	157:25	0:0	10	->
water	157:27	0:0	10	pixel_format
arg	157:41	157:45	9	name
water	157:41	0:0	10	name
arg	157:47	157:52	9	width
water	157:47	0:0	10	width
arg	157:54	157:60	9	height
water	157:54	0:0	10	height
arg	157:62	157:75	9	p_sys->stride
water	157:62	0:0	10	p_sys
op	157:67	0:0	10	->
water	157:69	0:0	10	stride
arg	157:77	157:96	9	p_sys->slice_height
water	157:77	0:0	10	p_sys
op	157:82	0:0	10	->
water	157:84	0:0	10	slice_height
arg	158:20	158:36	9	p_sys->crop_left
water	158:20	0:0	10	p_sys
op	158:25	0:0	10	->
water	158:27	0:0	10	crop_left
arg	158:38	158:53	9	p_sys->crop_top
water	158:38	0:0	10	p_sys
op	158:43	0:0	10	->
water	158:45	0:0	10	crop_top
arg	158:55	158:65	9	crop_right
water	158:55	0:0	10	crop_right
arg	158:67	158:78	9	crop_bottom
water	158:67	0:0	10	crop_bottom
water	158:79	0:0	8	;
water	159:12	0:0	8	p_dec
op	159:17	0:0	8	->
water	159:19	0:0	8	fmt_out
op	159:26	0:0	8	.
water	159:27	0:0	8	video
op	159:32	0:0	8	.
water	159:33	0:0	8	i_width
op	159:41	0:0	8	=
water	159:43	0:0	8	crop_right
op	159:54	0:0	8	+
water	159:56	0:0	8	1
op	159:58	0:0	8	-
water	159:60	0:0	8	p_sys
op	159:65	0:0	8	->
water	159:67	0:0	8	crop_left
water	159:76	0:0	8	;
water	160:12	0:0	8	p_dec
op	160:17	0:0	8	->
water	160:19	0:0	8	fmt_out
op	160:26	0:0	8	.
water	160:27	0:0	8	video
op	160:32	0:0	8	.
water	160:33	0:0	8	i_height
op	160:42	0:0	8	=
water	160:44	0:0	8	crop_bottom
op	160:56	0:0	8	+
water	160:58	0:0	8	1
op	160:60	0:0	8	-
water	160:62	0:0	8	p_sys
op	160:67	0:0	8	->
water	160:69	0:0	8	crop_top
water	160:77	0:0	8	;
if	161:12	162:37	8	(p_sys -> stride <= 0)
cond	161:16	161:33	9	p_sys -> stride <= 0
water	161:16	0:0	10	p_sys
op	161:21	0:0	10	->
water	161:23	0:0	10	stride
op	161:30	0:0	10	<=
water	161:33	0:0	10	0
stmts	162:16	162:37	9	
water	162:16	0:0	10	p_sys
op	162:21	0:0	10	->
water	162:23	0:0	10	stride
op	162:30	0:0	10	=
water	162:32	0:0	10	width
water	162:37	0:0	10	;
if	163:12	164:44	8	(p_sys -> slice_height <= 0)
cond	163:16	163:39	9	p_sys -> slice_height <= 0
water	163:16	0:0	10	p_sys
op	163:21	0:0	10	->
water	163:23	0:0	10	slice_height
op	163:36	0:0	10	<=
water	163:39	0:0	10	0
stmts	164:16	164:44	9	
water	164:16	0:0	10	p_sys
op	164:21	0:0	10	->
water	164:23	0:0	10	slice_height
op	164:36	0:0	10	=
water	164:38	0:0	10	height
water	164:44	0:0	10	;
if	165:12	166:43	8	(( * env ) ->ExceptionOccurred (env ))
cond	165:16	165:45	9	( * env ) ->ExceptionOccurred (env )
water	165:16	0:0	10	(
op	165:17	0:0	10	*
water	165:18	0:0	10	env
water	165:21	0:0	10	)
op	165:22	0:0	10	->
call	165:24	165:45	10	ExceptionOccurred
arg	165:42	165:45	11	env
water	165:42	0:0	12	env
stmts	166:16	166:43	9	
water	166:16	0:0	10	(
op	166:17	0:0	10	*
water	166:18	0:0	10	env
water	166:21	0:0	10	)
op	166:22	0:0	10	->
call	166:24	166:42	10	ExceptionClear
arg	166:39	166:42	11	env
water	166:39	0:0	12	env
water	166:43	0:0	10	;
call	167:12	168:91	8	ArchitectureSpecificCopyHooks
arg	167:42	167:47	9	p_dec
water	167:42	0:0	10	p_dec
arg	167:49	167:68	9	p_sys->pixel_format
water	167:49	0:0	10	p_sys
op	167:54	0:0	10	->
water	167:56	0:0	10	pixel_format
arg	167:70	167:89	9	p_sys->slice_height
water	167:70	0:0	10	p_sys
op	167:75	0:0	10	->
water	167:77	0:0	10	slice_height
arg	168:42	168:55	9	p_sys->stride
water	168:42	0:0	10	p_sys
op	168:47	0:0	10	->
water	168:49	0:0	10	stride
arg	168:57	168:91	9	&p_sys->architecture_specific_data
op	168:57	0:0	10	&
water	168:58	0:0	10	p_sys
op	168:63	0:0	10	->
water	168:65	0:0	10	architecture_specific_data
water	168:92	0:0	8	;
if	169:12	176:12	8	(p_sys -> pixel_format == OMX_TI_COLOR_FormatYUV420PackedSemiPlanar)
cond	169:16	169:39	9	p_sys -> pixel_format == OMX_TI_COLOR_FormatYUV420PackedSemiPlanar
water	169:16	0:0	10	p_sys
op	169:21	0:0	10	->
water	169:23	0:0	10	pixel_format
op	169:36	0:0	10	==
water	169:39	0:0	10	OMX_TI_COLOR_FormatYUV420PackedSemiPlanar
stmts	169:82	176:12	9	
water	169:82	0:0	10	{
water	170:16	0:0	10	p_sys
op	170:21	0:0	10	->
water	170:23	0:0	10	slice_height
op	170:36	0:0	10	-=
water	170:39	0:0	10	p_sys
op	170:44	0:0	10	->
water	170:46	0:0	10	crop_top
op	170:54	0:0	10	/
water	170:55	0:0	10	2
water	170:56	0:0	10	;
water	174:16	0:0	10	p_sys
op	174:21	0:0	10	->
water	174:23	0:0	10	crop_top
op	174:32	0:0	10	=
water	174:34	0:0	10	0
water	174:35	0:0	10	;
water	175:16	0:0	10	p_sys
op	175:21	0:0	10	->
water	175:23	0:0	10	crop_left
op	175:33	0:0	10	=
water	175:35	0:0	10	0
water	175:36	0:0	10	;
water	176:12	0:0	10	}
if	177:12	180:12	8	(IgnoreOmxDecoderPadding (p_sys -> name ))
cond	177:16	177:51	9	IgnoreOmxDecoderPadding (p_sys -> name )
call	177:16	177:51	10	IgnoreOmxDecoderPadding
arg	177:40	177:51	11	p_sys->name
water	177:40	0:0	12	p_sys
op	177:45	0:0	12	->
water	177:47	0:0	12	name
stmts	177:54	180:12	9	
water	177:54	0:0	10	{
water	178:16	0:0	10	p_sys
op	178:21	0:0	10	->
water	178:23	0:0	10	slice_height
op	178:36	0:0	10	=
water	178:38	0:0	10	0
water	178:39	0:0	10	;
water	179:16	0:0	10	p_sys
op	179:21	0:0	10	->
water	179:23	0:0	10	stride
op	179:30	0:0	10	=
water	179:32	0:0	10	p_dec
op	179:37	0:0	10	->
water	179:39	0:0	10	fmt_out
op	179:46	0:0	10	.
water	179:47	0:0	10	video
op	179:52	0:0	10	.
water	179:53	0:0	10	i_width
water	179:60	0:0	10	;
water	180:12	0:0	10	}
water	181:8	0:0	8	}
else	181:10	183:8	4
stmts	181:15	183:8	5	
water	181:15	0:0	6	{
return	182:12	182:18	6	
water	183:8	0:0	6	}
water	184:4	0:0	4	}
