func	2:0	74:0	0	static int	Control
params	2:18	0:0	1	
param	2:20	2:36	2	demux_t *	p_demux
param	2:38	2:49	2	int	i_query
param	2:51	2:64	2	va_list	args
stmnts	0:0	73:4	1	
decl	4:4	4:39	2	demux_sys_t	*p_sys
op	4:23	0:0	2	=
water	4:25	0:0	2	p_demux
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:19	2	double	f
water	5:14	0:0	2	,
decl	5:4	5:19	2	double	*pf
decl	6:4	6:22	2	int64_t	i64
water	6:15	0:0	2	,
decl	6:4	6:22	2	int64_t	*pi64
decl	7:4	7:17	2	bool	*pb_bool
switch	8:4	73:4	2	(i_query)
cond	8:12	8:12	3	i_query
water	8:12	0:0	4	i_query
stmts	9:4	73:4	3	
water	9:4	0:0	4	{
label	10:8	10:39	4	case DEMUX_HAS_UNSUPPORTED_META :
water	11:12	0:0	4	pb_bool
op	11:20	0:0	4	=
water	11:22	0:0	4	(
water	11:23	0:0	4	bool
op	11:27	0:0	4	*
water	11:28	0:0	4	)
call	11:29	11:49	4	va_arg
arg	11:37	11:41	5	args
water	11:37	0:0	6	args
arg	11:43	11:49	5	bool*
water	11:43	0:0	6	bool
op	11:47	0:0	6	*
water	11:50	0:0	4	;
op	12:12	0:0	4	*
water	12:13	0:0	4	pb_bool
op	12:21	0:0	4	=
water	12:23	0:0	4	true
water	12:27	0:0	4	;
return	13:12	13:30	4	VLC_SUCCESS
water	13:19	0:0	5	VLC_SUCCESS
label	14:8	14:29	4	case DEMUX_GET_LENGTH :
water	15:12	0:0	4	pi64
op	15:17	0:0	4	=
water	15:19	0:0	4	(
water	15:20	0:0	4	int64_t
op	15:27	0:0	4	*
water	15:28	0:0	4	)
call	15:29	15:53	4	va_arg
arg	15:37	15:41	5	args
water	15:37	0:0	6	args
arg	15:43	15:53	5	int64_t*
water	15:43	0:0	6	int64_t
op	15:51	0:0	6	*
water	15:54	0:0	4	;
op	17:12	0:0	4	*
water	17:13	0:0	4	pi64
op	17:18	0:0	4	=
call	17:20	17:35	4	INT64_C
arg	17:28	17:35	5	1000000
water	17:28	0:0	6	1000000
op	17:37	0:0	4	*
water	17:39	0:0	4	p_sys
op	17:44	0:0	4	->
water	17:46	0:0	4	info
op	17:50	0:0	4	.
water	17:51	0:0	4	pcm_samples
op	17:63	0:0	4	/
water	18:24	0:0	4	p_sys
op	18:29	0:0	4	->
water	18:31	0:0	4	info
op	18:35	0:0	4	.
water	18:36	0:0	4	sample_freq
water	18:47	0:0	4	;
op	20:12	0:0	4	*
water	20:13	0:0	4	pi64
op	20:18	0:0	4	=
call	20:20	20:35	4	INT64_C
arg	20:28	20:35	5	1000000
water	20:28	0:0	6	1000000
op	20:37	0:0	4	*
water	20:39	0:0	4	(
water	20:40	0:0	4	p_sys
op	20:45	0:0	4	->
water	20:47	0:0	4	info
op	20:51	0:0	4	.
water	20:52	0:0	4	samples
op	20:60	0:0	4	-
water	21:40	0:0	4	p_sys
op	21:45	0:0	4	->
water	21:47	0:0	4	info
op	21:51	0:0	4	.
water	21:52	0:0	4	beg_silence
water	21:63	0:0	4	)
op	21:65	0:0	4	/
water	22:16	0:0	4	p_sys
op	22:21	0:0	4	->
water	22:23	0:0	4	info
op	22:27	0:0	4	.
water	22:28	0:0	4	sample_freq
water	22:39	0:0	4	;
return	24:12	24:30	4	VLC_SUCCESS
water	24:19	0:0	5	VLC_SUCCESS
label	25:8	25:31	4	case DEMUX_GET_POSITION :
water	26:12	0:0	4	pf
op	26:15	0:0	4	=
water	26:17	0:0	4	(
water	26:18	0:0	4	double
op	26:24	0:0	4	*
water	26:25	0:0	4	)
call	26:26	26:49	4	va_arg
arg	26:34	26:38	5	args
water	26:34	0:0	6	args
arg	26:40	26:49	5	double*
water	26:40	0:0	6	double
op	26:47	0:0	6	*
water	26:50	0:0	4	;
if	28:12	30:53	4	(p_sys -> info . pcm_samples > 0)
cond	28:16	28:42	5	p_sys -> info . pcm_samples > 0
water	28:16	0:0	6	p_sys
op	28:21	0:0	6	->
water	28:23	0:0	6	info
op	28:27	0:0	6	.
water	28:28	0:0	6	pcm_samples
op	28:40	0:0	6	>
water	28:42	0:0	6	0
stmts	29:16	30:53	5	
op	29:16	0:0	6	*
water	29:17	0:0	6	pf
op	29:20	0:0	6	=
water	29:22	0:0	6	(
water	29:23	0:0	6	double
water	29:29	0:0	6	)
water	29:31	0:0	6	p_sys
op	29:36	0:0	6	->
water	29:38	0:0	6	i_position
op	29:49	0:0	6	/
water	30:22	0:0	6	(
water	30:23	0:0	6	double
water	30:29	0:0	6	)
water	30:30	0:0	6	p_sys
op	30:35	0:0	6	->
water	30:37	0:0	6	info
op	30:41	0:0	6	.
water	30:42	0:0	6	pcm_samples
water	30:53	0:0	6	;
if	32:12	34:77	4	(p_sys -> info . samples - p_sys -> info . beg_silence > 0)
cond	32:16	32:64	5	p_sys -> info . samples - p_sys -> info . beg_silence > 0
water	32:16	0:0	6	p_sys
op	32:21	0:0	6	->
water	32:23	0:0	6	info
op	32:27	0:0	6	.
water	32:28	0:0	6	samples
op	32:36	0:0	6	-
water	32:38	0:0	6	p_sys
op	32:43	0:0	6	->
water	32:45	0:0	6	info
op	32:49	0:0	6	.
water	32:50	0:0	6	beg_silence
op	32:62	0:0	6	>
water	32:64	0:0	6	0
stmts	33:16	34:77	5	
op	33:16	0:0	6	*
water	33:17	0:0	6	pf
op	33:20	0:0	6	=
water	33:22	0:0	6	(
water	33:23	0:0	6	double
water	33:29	0:0	6	)
water	33:31	0:0	6	p_sys
op	33:36	0:0	6	->
water	33:38	0:0	6	i_position
op	33:49	0:0	6	/
call	34:22	34:76	6	(double)
arg	34:31	34:76	7	p_sys->info.samples-p_sys->info.beg_silence
water	34:31	0:0	8	p_sys
op	34:36	0:0	8	->
water	34:38	0:0	8	info
op	34:42	0:0	8	.
water	34:43	0:0	8	samples
op	34:51	0:0	8	-
water	34:53	0:0	8	p_sys
op	34:58	0:0	8	->
water	34:60	0:0	8	info
op	34:64	0:0	8	.
water	34:65	0:0	8	beg_silence
water	34:77	0:0	6	;
else	36:12	37:25	4
stmts	37:16	37:25	5	
op	37:16	0:0	6	*
water	37:17	0:0	6	pf
op	37:20	0:0	6	=
water	37:22	0:0	6	0
op	37:23	0:0	6	.
water	37:24	0:0	6	0
water	37:25	0:0	6	;
return	38:12	38:30	4	VLC_SUCCESS
water	38:19	0:0	5	VLC_SUCCESS
label	39:8	39:27	4	case DEMUX_GET_TIME :
water	40:12	0:0	4	pi64
op	40:17	0:0	4	=
water	40:19	0:0	4	(
water	40:20	0:0	4	int64_t
op	40:27	0:0	4	*
water	40:28	0:0	4	)
call	40:29	40:53	4	va_arg
arg	40:37	40:41	5	args
water	40:37	0:0	6	args
arg	40:43	40:53	5	int64_t*
water	40:43	0:0	6	int64_t
op	40:51	0:0	6	*
water	40:54	0:0	4	;
op	41:12	0:0	4	*
water	41:13	0:0	4	pi64
op	41:18	0:0	4	=
call	41:20	41:35	4	INT64_C
arg	41:28	41:35	5	1000000
water	41:28	0:0	6	1000000
op	41:37	0:0	4	*
water	41:39	0:0	4	p_sys
op	41:44	0:0	4	->
water	41:46	0:0	4	i_position
op	41:57	0:0	4	/
water	42:24	0:0	4	p_sys
op	42:29	0:0	4	->
water	42:31	0:0	4	info
op	42:35	0:0	4	.
water	42:36	0:0	4	sample_freq
water	42:47	0:0	4	;
return	43:12	43:30	4	VLC_SUCCESS
water	43:19	0:0	5	VLC_SUCCESS
label	44:8	44:31	4	case DEMUX_SET_POSITION :
water	45:12	0:0	4	f
op	45:14	0:0	4	=
water	45:16	0:0	4	(
water	45:17	0:0	4	double
water	45:23	0:0	4	)
call	45:24	45:45	4	va_arg
arg	45:32	45:36	5	args
water	45:32	0:0	6	args
arg	45:38	45:45	5	double
water	45:38	0:0	6	double
water	45:46	0:0	4	;
water	47:12	0:0	4	i64
op	47:16	0:0	4	=
call	47:18	47:55	4	(int64_t)
arg	47:28	47:55	5	f*p_sys->info.pcm_samples
water	47:28	0:0	6	f
op	47:30	0:0	6	*
water	47:32	0:0	6	p_sys
op	47:37	0:0	6	->
water	47:39	0:0	6	info
op	47:43	0:0	6	.
water	47:44	0:0	6	pcm_samples
water	47:56	0:0	4	;
if	48:12	51:58	4	(mpc_decoder_seek_sample (& p_sys -> decoder ,i64 ))
cond	48:16	48:62	5	mpc_decoder_seek_sample (& p_sys -> decoder ,i64 )
call	48:16	48:62	6	mpc_decoder_seek_sample
arg	48:41	48:56	7	&p_sys->decoder
op	48:41	0:0	8	&
water	48:42	0:0	8	p_sys
op	48:47	0:0	8	->
water	48:49	0:0	8	decoder
arg	48:58	48:62	7	i64
water	48:58	0:0	8	i64
stmts	50:12	51:58	5	
water	50:12	0:0	6	i64
op	50:16	0:0	6	=
call	50:18	51:57	6	(int64_t)
arg	50:28	51:57	7	f*(p_sys->info.samples-p_sys->info.beg_silence)
water	50:28	0:0	8	f
op	50:30	0:0	8	*
water	50:32	0:0	8	(
water	50:33	0:0	8	p_sys
op	50:38	0:0	8	->
water	50:40	0:0	8	info
op	50:44	0:0	8	.
water	50:45	0:0	8	samples
op	50:53	0:0	8	-
water	51:33	0:0	8	p_sys
op	51:38	0:0	8	->
water	51:40	0:0	8	info
op	51:44	0:0	8	.
water	51:45	0:0	8	beg_silence
water	51:56	0:0	8	)
water	51:58	0:0	6	;
if	52:12	57:12	4	(mpc_demux_seek_sample (p_sys -> decoder ,i64 ) == MPC_STATUS_OK)
cond	52:16	52:64	5	mpc_demux_seek_sample (p_sys -> decoder ,i64 ) == MPC_STATUS_OK
call	52:16	52:59	6	mpc_demux_seek_sample
arg	52:39	52:53	7	p_sys->decoder
water	52:39	0:0	8	p_sys
op	52:44	0:0	8	->
water	52:46	0:0	8	decoder
arg	52:55	52:59	7	i64
water	52:55	0:0	8	i64
op	52:61	0:0	6	==
water	52:64	0:0	6	MPC_STATUS_OK
stmts	54:12	57:12	5	
water	54:12	0:0	6	{
water	55:16	0:0	6	p_sys
op	55:21	0:0	6	->
water	55:23	0:0	6	i_position
op	55:34	0:0	6	=
water	55:36	0:0	6	i64
water	55:39	0:0	6	;
return	56:16	56:34	6	VLC_SUCCESS
water	56:23	0:0	7	VLC_SUCCESS
water	57:12	0:0	6	}
return	58:12	58:31	4	VLC_EGENERIC
water	58:19	0:0	5	VLC_EGENERIC
label	59:8	59:27	4	case DEMUX_SET_TIME :
water	60:12	0:0	4	i64
op	60:16	0:0	4	=
water	60:18	0:0	4	(
water	60:19	0:0	4	int64_t
water	60:26	0:0	4	)
call	60:27	60:49	4	va_arg
arg	60:35	60:39	5	args
water	60:35	0:0	6	args
arg	60:41	60:49	5	int64_t
water	60:41	0:0	6	int64_t
water	60:50	0:0	4	;
if	62:12	69:12	4	(mpc_decoder_seek_sample (& p_sys -> decoder ,i64 ))
cond	62:16	62:62	5	mpc_decoder_seek_sample (& p_sys -> decoder ,i64 )
call	62:16	62:62	6	mpc_decoder_seek_sample
arg	62:41	62:56	7	&p_sys->decoder
op	62:41	0:0	8	&
water	62:42	0:0	8	p_sys
op	62:47	0:0	8	->
water	62:49	0:0	8	decoder
arg	62:58	62:62	7	i64
water	62:58	0:0	8	i64
stmts	64:13	69:12	5	
if	64:13	69:12	6	(mpc_demux_seek_sample (p_sys -> decoder ,i64 ) == MPC_STATUS_OK)
cond	64:17	64:65	7	mpc_demux_seek_sample (p_sys -> decoder ,i64 ) == MPC_STATUS_OK
call	64:17	64:60	8	mpc_demux_seek_sample
arg	64:40	64:54	9	p_sys->decoder
water	64:40	0:0	10	p_sys
op	64:45	0:0	10	->
water	64:47	0:0	10	decoder
arg	64:56	64:60	9	i64
water	64:56	0:0	10	i64
op	64:62	0:0	8	==
water	64:65	0:0	8	MPC_STATUS_OK
stmts	66:12	69:12	7	
water	66:12	0:0	8	{
water	67:16	0:0	8	p_sys
op	67:21	0:0	8	->
water	67:23	0:0	8	i_position
op	67:34	0:0	8	=
water	67:36	0:0	8	i64
water	67:39	0:0	8	;
return	68:16	68:34	8	VLC_SUCCESS
water	68:23	0:0	9	VLC_SUCCESS
water	69:12	0:0	8	}
return	70:12	70:31	4	VLC_EGENERIC
water	70:19	0:0	5	VLC_EGENERIC
label	71:8	71:15	4	default :
return	72:12	72:31	4	VLC_EGENERIC
water	72:19	0:0	5	VLC_EGENERIC
water	73:4	0:0	4	}
