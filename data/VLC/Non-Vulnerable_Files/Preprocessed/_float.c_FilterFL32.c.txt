func	2:0	11:0	0	static void	FilterFL32
params	2:22	0:0	1	
param	2:24	2:48	2	audio_volume_t *	p_volume
param	2:50	2:67	2	block_t *	p_buffer
param	3:24	3:43	2	float	f_multiplier
stmnts	5:4	10:19	1	
if	5:4	6:14	2	(f_multiplier == 1 . f)
cond	5:8	5:26	3	f_multiplier == 1 . f
water	5:8	0:0	4	f_multiplier
op	5:21	0:0	4	==
water	5:24	0:0	4	1
op	5:25	0:0	4	.
water	5:26	0:0	4	f
stmts	6:8	6:14	3	
return	6:8	6:14	4	
decl	7:4	7:42	2	float	*p
op	7:13	0:0	2	=
water	7:15	0:0	2	(
water	7:16	0:0	2	float
op	7:22	0:0	2	*
water	7:23	0:0	2	)
water	7:24	0:0	2	p_buffer
op	7:32	0:0	2	->
water	7:34	0:0	2	p_buffer
for	8:4	9:30	2	( size_t i = p_buffer -> i_buffer / sizeof ( * p ) ;i > 0;i --)
forinit	0:0	8:51	3	 size_t i = p_buffer -> i_buffer / sizeof ( * p ) ;
decl	8:9	8:51	4	size_t	i
op	8:18	0:0	4	=
water	8:20	0:0	4	p_buffer
op	8:28	0:0	4	->
water	8:30	0:0	4	i_buffer
op	8:39	0:0	4	/
op	8:41	0:0	4	sizeof
water	8:47	0:0	4	(
op	8:48	0:0	4	*
water	8:49	0:0	4	p
water	8:50	0:0	4	)
cond	8:53	8:57	3	i > 0
water	8:53	0:0	4	i
op	8:55	0:0	4	>
water	8:57	0:0	4	0
forexpr	8:60	8:61	3	i --
water	8:60	0:0	4	i
op	8:61	0:0	4	--
stmts	9:8	9:30	3	
op	9:8	0:0	4	*
water	9:9	0:0	4	(
water	9:10	0:0	4	p
op	9:11	0:0	4	++
water	9:13	0:0	4	)
op	9:15	0:0	4	*=
water	9:18	0:0	4	f_multiplier
water	9:30	0:0	4	;
water	10:4	0:0	2	(
water	10:5	0:0	2	void
water	10:9	0:0	2	)
water	10:11	0:0	2	p_volume
water	10:19	0:0	2	;
