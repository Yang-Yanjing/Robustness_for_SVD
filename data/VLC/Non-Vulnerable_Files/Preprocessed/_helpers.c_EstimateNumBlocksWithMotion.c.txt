func	2:0	56:0	0	int	EstimateNumBlocksWithMotion
params	2:31	0:0	1	
param	2:33	2:56	2	const picture_t *	p_prev
param	3:33	3:56	2	const picture_t *	p_curr
param	4:33	4:44	2	int *	pi_top
param	4:46	4:57	2	int *	pi_bot
stmnts	6:4	55:18	1	
call	6:4	6:27	2	assert
arg	6:12	6:27	3	p_prev!=NULL
water	6:12	0:0	4	p_prev
op	6:19	0:0	4	!=
water	6:22	0:0	4	NULL
water	6:28	0:0	2	;
call	7:4	7:27	2	assert
arg	7:12	7:27	3	p_curr!=NULL
water	7:12	0:0	4	p_curr
op	7:19	0:0	4	!=
water	7:22	0:0	4	NULL
water	7:28	0:0	2	;
decl	8:4	8:23	2	int	i_score_top
op	8:20	0:0	2	=
water	8:22	0:0	2	0
decl	9:4	9:23	2	int	i_score_bot
op	9:20	0:0	2	=
water	9:22	0:0	2	0
if	10:4	11:17	2	(p_prev -> i_planes != p_curr -> i_planes)
cond	10:8	10:36	3	p_prev -> i_planes != p_curr -> i_planes
water	10:8	0:0	4	p_prev
op	10:14	0:0	4	->
water	10:16	0:0	4	i_planes
op	10:25	0:0	4	!=
water	10:28	0:0	4	p_curr
op	10:34	0:0	4	->
water	10:36	0:0	4	i_planes
stmts	11:8	11:17	3	
return	11:8	11:17	4	-1
op	11:15	0:0	5	-
water	11:16	0:0	5	1
call	12:4	12:25	2	int
arg	12:9	12:25	3	*motion_in_block
op	12:9	0:0	4	*
water	12:10	0:0	4	motion_in_block
water	12:26	0:0	2	(
water	12:27	0:0	2	uint8_t
op	12:35	0:0	2	*
water	12:36	0:0	2	,
water	12:38	0:0	2	uint8_t
op	12:46	0:0	2	*
water	12:47	0:0	2	,
water	12:49	0:0	2	int
water	12:53	0:0	2	,
water	12:55	0:0	2	int
water	12:58	0:0	2	,
water	12:60	0:0	2	int
op	12:64	0:0	2	*
water	12:65	0:0	2	,
water	12:67	0:0	2	int
op	12:71	0:0	2	*
water	12:72	0:0	2	)
op	12:74	0:0	2	=
water	13:8	0:0	2	TestForMotionInBlock
water	13:28	0:0	2	;
if	16:4	17:49	2	(vlc_CPU_MMXEXT ( ))
cond	16:8	16:23	3	vlc_CPU_MMXEXT ( )
call	16:8	16:23	4	vlc_CPU_MMXEXT
stmts	17:8	17:49	3	
water	17:8	0:0	4	motion_in_block
op	17:24	0:0	4	=
water	17:26	0:0	4	TestForMotionInBlockMMX
water	17:49	0:0	4	;
decl	19:4	19:19	2	int	i_score
op	19:16	0:0	2	=
water	19:18	0:0	2	0
for	20:4	50:4	2	( int i_plane = 0 ;i_plane < p_prev -> i_planes;i_plane ++)
forinit	0:0	20:25	3	 int i_plane = 0 ;
decl	20:9	20:25	4	int	i_plane
op	20:21	0:0	4	=
water	20:23	0:0	4	0
cond	20:27	20:45	3	i_plane < p_prev -> i_planes
water	20:27	0:0	4	i_plane
op	20:35	0:0	4	<
water	20:37	0:0	4	p_prev
op	20:43	0:0	4	->
water	20:45	0:0	4	i_planes
forexpr	20:56	20:63	3	i_plane ++
water	20:56	0:0	4	i_plane
op	20:63	0:0	4	++
stmts	21:4	50:4	3	
water	21:4	0:0	4	{
if	23:8	25:21	4	(p_prev -> p [ i_plane ] . i_visible_lines != p_curr -> p [ i_plane ] . i_visible_lines)
cond	23:12	24:31	5	p_prev -> p [ i_plane ] . i_visible_lines != p_curr -> p [ i_plane ] . i_visible_lines
water	23:12	0:0	6	p_prev
op	23:18	0:0	6	->
water	23:20	0:0	6	p
op	23:21	0:0	6	[
water	23:22	0:0	6	i_plane
op	23:29	0:0	6	]
op	23:30	0:0	6	.
water	23:31	0:0	6	i_visible_lines
op	23:47	0:0	6	!=
water	24:12	0:0	6	p_curr
op	24:18	0:0	6	->
water	24:20	0:0	6	p
op	24:21	0:0	6	[
water	24:22	0:0	6	i_plane
op	24:29	0:0	6	]
op	24:30	0:0	6	.
water	24:31	0:0	6	i_visible_lines
stmts	25:12	25:21	5	
return	25:12	25:21	6	-1
op	25:19	0:0	7	-
water	25:20	0:0	7	1
decl	26:8	26:59	4	const int	i_pitch_prev
op	26:31	0:0	4	=
water	26:33	0:0	4	p_prev
op	26:39	0:0	4	->
water	26:41	0:0	4	p
op	26:42	0:0	4	[
water	26:43	0:0	4	i_plane
op	26:50	0:0	4	]
op	26:51	0:0	4	.
water	26:52	0:0	4	i_pitch
decl	27:8	27:59	4	const int	i_pitch_curr
op	27:31	0:0	4	=
water	27:33	0:0	4	p_curr
op	27:39	0:0	4	->
water	27:41	0:0	4	p
op	27:42	0:0	4	[
water	27:43	0:0	4	i_plane
op	27:50	0:0	4	]
op	27:51	0:0	4	.
water	27:52	0:0	4	i_pitch
decl	30:8	30:64	4	const int	i_mby
op	30:24	0:0	4	=
water	30:26	0:0	4	p_prev
op	30:32	0:0	4	->
water	30:34	0:0	4	p
op	30:35	0:0	4	[
water	30:36	0:0	4	i_plane
op	30:43	0:0	4	]
op	30:44	0:0	4	.
water	30:45	0:0	4	i_visible_lines
op	30:61	0:0	4	/
water	30:63	0:0	4	8
decl	31:8	32:65	4	const int	w
op	31:20	0:0	4	=
call	31:22	32:64	5	FFMIN
arg	31:29	31:63	6	p_prev->p[i_plane].i_visible_pitch
water	31:29	0:0	7	p_prev
op	31:35	0:0	7	->
water	31:37	0:0	7	p
op	31:38	0:0	7	[
water	31:39	0:0	7	i_plane
op	31:46	0:0	7	]
op	31:47	0:0	7	.
water	31:48	0:0	7	i_visible_pitch
arg	32:29	32:64	6	p_curr->p[i_plane].i_visible_pitch
water	32:29	0:0	7	p_curr
op	32:35	0:0	7	->
water	32:37	0:0	7	p
op	32:38	0:0	7	[
water	32:39	0:0	7	i_plane
op	32:46	0:0	7	]
op	32:47	0:0	7	.
water	32:48	0:0	7	i_visible_pitch
decl	33:8	33:31	4	const int	i_mbx
op	33:24	0:0	4	=
water	33:26	0:0	4	w
op	33:28	0:0	4	/
water	33:30	0:0	4	8
for	34:8	49:8	4	( int by = 0 ;by < i_mby;++ by)
forinit	0:0	34:23	5	 int by = 0 ;
decl	34:13	34:23	6	int	by
op	34:20	0:0	6	=
water	34:22	0:0	6	0
cond	34:25	34:30	5	by < i_mby
water	34:25	0:0	6	by
op	34:28	0:0	6	<
water	34:30	0:0	6	i_mby
forexpr	34:37	34:39	5	++ by
op	34:37	0:0	6	++
water	34:39	0:0	6	by
stmts	35:8	49:8	5	
water	35:8	0:0	6	{
decl	36:12	36:78	6	uint8_t	*p_pix_p
op	36:29	0:0	6	=
op	36:31	0:0	6	&
water	36:32	0:0	6	p_prev
op	36:38	0:0	6	->
water	36:40	0:0	6	p
op	36:41	0:0	6	[
water	36:42	0:0	6	i_plane
op	36:49	0:0	6	]
op	36:50	0:0	6	.
water	36:51	0:0	6	p_pixels
op	36:59	0:0	6	[
water	36:60	0:0	6	i_pitch_prev
op	36:72	0:0	6	*
water	36:73	0:0	6	8
op	36:74	0:0	6	*
water	36:75	0:0	6	by
op	36:77	0:0	6	]
decl	37:12	37:78	6	uint8_t	*p_pix_c
op	37:29	0:0	6	=
op	37:31	0:0	6	&
water	37:32	0:0	6	p_curr
op	37:38	0:0	6	->
water	37:40	0:0	6	p
op	37:41	0:0	6	[
water	37:42	0:0	6	i_plane
op	37:49	0:0	6	]
op	37:50	0:0	6	.
water	37:51	0:0	6	p_pixels
op	37:59	0:0	6	[
water	37:60	0:0	6	i_pitch_curr
op	37:72	0:0	6	*
water	37:73	0:0	6	8
op	37:74	0:0	6	*
water	37:75	0:0	6	by
op	37:77	0:0	6	]
for	38:12	48:12	6	( int bx = 0 ;bx < i_mbx;++ bx)
forinit	0:0	38:27	7	 int bx = 0 ;
decl	38:17	38:27	8	int	bx
op	38:24	0:0	8	=
water	38:26	0:0	8	0
cond	38:29	38:34	7	bx < i_mbx
water	38:29	0:0	8	bx
op	38:32	0:0	8	<
water	38:34	0:0	8	i_mbx
forexpr	38:41	38:43	7	++ bx
op	38:41	0:0	8	++
water	38:43	0:0	8	bx
stmts	39:12	48:12	7	
water	39:12	0:0	8	{
decl	40:16	40:42	8	int	i_top_temp
water	40:30	0:0	8	,
decl	40:16	40:42	8	int	i_bot_temp
water	41:16	0:0	8	i_score
op	41:24	0:0	8	+=
call	41:27	43:69	8	motion_in_block
arg	41:44	41:51	9	p_pix_p
water	41:44	0:0	10	p_pix_p
arg	41:53	41:60	9	p_pix_c
water	41:53	0:0	10	p_pix_c
arg	42:44	42:56	9	i_pitch_prev
water	42:44	0:0	10	i_pitch_prev
arg	42:58	42:70	9	i_pitch_curr
water	42:58	0:0	10	i_pitch_curr
arg	43:44	43:55	9	&i_top_temp
op	43:44	0:0	10	&
water	43:45	0:0	10	i_top_temp
arg	43:57	43:69	9	&i_bot_temp
op	43:57	0:0	10	&
water	43:58	0:0	10	i_bot_temp
water	43:70	0:0	8	;
water	44:16	0:0	8	i_score_top
op	44:28	0:0	8	+=
water	44:31	0:0	8	i_top_temp
water	44:41	0:0	8	;
water	45:16	0:0	8	i_score_bot
op	45:28	0:0	8	+=
water	45:31	0:0	8	i_bot_temp
water	45:41	0:0	8	;
water	46:16	0:0	8	p_pix_p
op	46:24	0:0	8	+=
water	46:27	0:0	8	8
water	46:28	0:0	8	;
water	47:16	0:0	8	p_pix_c
op	47:24	0:0	8	+=
water	47:27	0:0	8	8
water	47:28	0:0	8	;
water	48:12	0:0	8	}
water	49:8	0:0	6	}
water	50:4	0:0	4	}
if	51:4	52:31	2	(pi_top)
cond	51:8	51:8	3	pi_top
water	51:8	0:0	4	pi_top
stmts	52:8	52:31	3	
water	52:8	0:0	4	(
op	52:9	0:0	4	*
water	52:10	0:0	4	pi_top
water	52:16	0:0	4	)
op	52:18	0:0	4	=
water	52:20	0:0	4	i_score_top
water	52:31	0:0	4	;
if	53:4	54:31	2	(pi_bot)
cond	53:8	53:8	3	pi_bot
water	53:8	0:0	4	pi_bot
stmts	54:8	54:31	3	
water	54:8	0:0	4	(
op	54:9	0:0	4	*
water	54:10	0:0	4	pi_bot
water	54:16	0:0	4	)
op	54:18	0:0	4	=
water	54:20	0:0	4	i_score_bot
water	54:31	0:0	4	;
return	55:4	55:18	2	i_score
water	55:11	0:0	3	i_score
