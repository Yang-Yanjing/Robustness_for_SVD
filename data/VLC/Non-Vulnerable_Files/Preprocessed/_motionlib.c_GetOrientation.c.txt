func	2:0	64:0	0	static int	GetOrientation
params	2:25	0:0	1	
param	2:27	2:52	2	motion_sensors_t *	motion
stmnts	0:0	63:4	1	
decl	4:4	4:11	2	FILE	*f
decl	5:4	5:33	2	int	i_x
op	5:12	0:0	2	=
water	5:14	0:0	2	0
water	5:15	0:0	2	,
decl	5:4	5:33	2	int	i_y
op	5:21	0:0	2	=
water	5:23	0:0	2	0
water	5:24	0:0	2	,
decl	5:4	5:33	2	int	i_z
op	5:30	0:0	2	=
water	5:32	0:0	2	0
decl	6:4	6:13	2	int	i_ret
switch	7:4	63:4	2	(motion -> sensor)
cond	7:12	7:20	3	motion -> sensor
water	7:12	0:0	4	motion
op	7:18	0:0	4	->
water	7:20	0:0	4	sensor
stmts	8:4	63:4	3	
water	8:4	0:0	4	{
label	9:4	9:21	4	case HDAPS_SENSOR :
water	10:8	0:0	4	f
op	10:10	0:0	4	=
call	10:12	10:64	4	fopen
arg	10:19	10:57	5	"/sys/devices/platform/hdaps/position"
water	10:19	0:0	6	"/sys/devices/platform/hdaps/position"
arg	10:59	10:64	5	"re"
water	10:59	0:0	6	"re"
water	10:65	0:0	4	;
if	11:8	14:8	4	(! f)
cond	11:12	11:13	5	! f
op	11:12	0:0	6	!
water	11:13	0:0	6	f
stmts	12:8	14:8	5	
water	12:8	0:0	6	{
return	13:12	13:20	6	0
water	13:19	0:0	7	0
water	14:8	0:0	6	}
water	15:8	0:0	4	i_ret
op	15:14	0:0	4	=
call	15:16	15:49	4	fscanf
arg	15:24	15:25	5	f
water	15:24	0:0	6	f
arg	15:27	15:36	5	"(%d,%d)"
water	15:27	0:0	6	"(%d,%d)"
arg	15:38	15:42	5	&i_x
op	15:38	0:0	6	&
water	15:39	0:0	6	i_x
arg	15:44	15:49	5	&i_y
op	15:44	0:0	6	&
water	15:45	0:0	6	i_y
water	15:50	0:0	4	;
call	16:8	16:18	4	fclose
arg	16:16	16:18	5	f
water	16:16	0:0	6	f
water	16:19	0:0	4	;
if	17:8	18:20	4	(i_ret < 2)
cond	17:12	17:20	5	i_ret < 2
water	17:12	0:0	6	i_ret
op	17:18	0:0	6	<
water	17:20	0:0	6	2
stmts	18:12	18:20	5	
return	18:12	18:20	6	0
water	18:19	0:0	7	0
else	19:8	20:53	4
stmts	20:12	20:53	5	
return	20:12	20:53	6	(i_x-motion->i_calibrate)*10
water	20:19	0:0	7	(
water	20:21	0:0	7	i_x
op	20:25	0:0	7	-
water	20:27	0:0	7	motion
op	20:33	0:0	7	->
water	20:35	0:0	7	i_calibrate
water	20:47	0:0	7	)
op	20:49	0:0	7	*
water	20:51	0:0	7	10
label	21:4	21:19	4	case AMS_SENSOR :
water	22:8	0:0	4	f
op	22:10	0:0	4	=
call	22:12	22:46	4	fopen
arg	22:19	22:39	5	"/sys/devices/ams/x"
water	22:19	0:0	6	"/sys/devices/ams/x"
arg	22:41	22:46	5	"re"
water	22:41	0:0	6	"re"
water	22:47	0:0	4	;
if	23:8	26:8	4	(! f)
cond	23:12	23:13	5	! f
op	23:12	0:0	6	!
water	23:13	0:0	6	f
stmts	24:8	26:8	5	
water	24:8	0:0	6	{
return	25:12	25:20	6	0
water	25:19	0:0	7	0
water	26:8	0:0	6	}
water	27:8	0:0	4	i_ret
op	27:14	0:0	4	=
call	27:16	27:37	4	fscanf
arg	27:24	27:25	5	f
water	27:24	0:0	6	f
arg	27:27	27:31	5	"%d"
water	27:27	0:0	6	"%d"
arg	27:33	27:37	5	&i_x
op	27:33	0:0	6	&
water	27:34	0:0	6	i_x
water	27:38	0:0	4	;
call	28:8	28:18	4	fclose
arg	28:16	28:18	5	f
water	28:16	0:0	6	f
water	28:19	0:0	4	;
if	29:8	30:20	4	(i_ret < 1)
cond	29:12	29:20	5	i_ret < 1
water	29:12	0:0	6	i_ret
op	29:18	0:0	6	<
water	29:20	0:0	6	1
stmts	30:12	30:20	5	
return	30:12	30:20	6	0
water	30:19	0:0	7	0
else	31:8	32:29	4
stmts	32:12	32:29	5	
return	32:12	32:29	6	-i_x*30
op	32:19	0:0	7	-
water	32:21	0:0	7	i_x
op	32:25	0:0	7	*
water	32:27	0:0	7	30
label	33:4	33:24	4	case APPLESMC_SENSOR :
water	34:8	0:0	4	f
op	34:10	0:0	4	=
call	34:12	34:71	4	fopen
arg	34:19	34:64	5	"/sys/devices/platform/applesmc.768/position"
water	34:19	0:0	6	"/sys/devices/platform/applesmc.768/position"
arg	34:66	34:71	5	"re"
water	34:66	0:0	6	"re"
water	34:72	0:0	4	;
if	35:8	38:8	4	(! f)
cond	35:12	35:13	5	! f
op	35:12	0:0	6	!
water	35:13	0:0	6	f
stmts	36:8	38:8	5	
water	36:8	0:0	6	{
return	37:12	37:20	6	0
water	37:19	0:0	7	0
water	38:8	0:0	6	}
water	39:8	0:0	4	i_ret
op	39:14	0:0	4	=
call	39:16	39:58	4	fscanf
arg	39:24	39:25	5	f
water	39:24	0:0	6	f
arg	39:27	39:39	5	"(%d,%d,%d)"
water	39:27	0:0	6	"(%d,%d,%d)"
arg	39:41	39:45	5	&i_x
op	39:41	0:0	6	&
water	39:42	0:0	6	i_x
arg	39:47	39:51	5	&i_y
op	39:47	0:0	6	&
water	39:48	0:0	6	i_y
arg	39:53	39:58	5	&i_z
op	39:53	0:0	6	&
water	39:54	0:0	6	i_z
water	39:59	0:0	4	;
call	40:8	40:18	4	fclose
arg	40:16	40:18	5	f
water	40:16	0:0	6	f
water	40:19	0:0	4	;
if	41:8	42:20	4	(i_ret < 3)
cond	41:12	41:20	5	i_ret < 3
water	41:12	0:0	6	i_ret
op	41:18	0:0	6	<
water	41:20	0:0	6	3
stmts	42:12	42:20	5	
return	42:12	42:20	6	0
water	42:19	0:0	7	0
else	43:8	44:53	4
stmts	44:12	44:53	5	
return	44:12	44:53	6	(i_x-motion->i_calibrate)*10
water	44:19	0:0	7	(
water	44:21	0:0	7	i_x
op	44:25	0:0	7	-
water	44:27	0:0	7	motion
op	44:33	0:0	7	->
water	44:35	0:0	7	i_calibrate
water	44:47	0:0	7	)
op	44:49	0:0	7	*
water	44:51	0:0	7	10
label	46:4	46:25	4	case UNIMOTION_SENSOR :
if	47:8	57:8	4	(read_sms_raw (motion -> unimotion_hw ,& i_x ,& i_y ,& i_z ))
cond	47:12	47:65	5	read_sms_raw (motion -> unimotion_hw ,& i_x ,& i_y ,& i_z )
call	47:12	47:65	6	read_sms_raw
arg	47:26	47:46	7	motion->unimotion_hw
water	47:26	0:0	8	motion
op	47:32	0:0	8	->
water	47:34	0:0	8	unimotion_hw
arg	47:48	47:52	7	&i_x
op	47:48	0:0	8	&
water	47:49	0:0	8	i_x
arg	47:54	47:58	7	&i_y
op	47:54	0:0	8	&
water	47:55	0:0	8	i_y
arg	47:60	47:65	7	&i_z
op	47:60	0:0	8	&
water	47:61	0:0	8	i_z
stmts	48:8	57:8	5	
water	48:8	0:0	6	{
decl	49:12	49:51	6	double	d_norm
op	49:26	0:0	6	=
call	49:28	49:50	7	sqrt
arg	49:34	49:50	8	i_x*i_x+i_z*i_z
water	49:34	0:0	9	i_x
op	49:37	0:0	9	*
water	49:38	0:0	9	i_x
op	49:41	0:0	9	+
water	49:42	0:0	9	i_z
op	49:45	0:0	9	*
water	49:46	0:0	9	i_z
if	50:12	51:24	6	(d_norm < 100)
cond	50:16	50:25	7	d_norm < 100
water	50:16	0:0	8	d_norm
op	50:23	0:0	8	<
water	50:25	0:0	8	100
stmts	51:16	51:24	7	
return	51:16	51:24	8	0
water	51:23	0:0	9	0
decl	52:12	52:37	6	double	d_x
op	52:23	0:0	6	=
water	52:25	0:0	6	i_x
op	52:29	0:0	6	/
water	52:31	0:0	6	d_norm
if	53:12	54:44	6	(i_z > 0)
cond	53:16	53:22	7	i_z > 0
water	53:16	0:0	8	i_z
op	53:20	0:0	8	>
water	53:22	0:0	8	0
stmts	54:16	54:44	7	
return	54:16	54:44	8	-asin(d_x)*3600/3.141
op	54:23	0:0	9	-
call	54:24	54:32	9	asin
arg	54:29	54:32	10	d_x
water	54:29	0:0	11	d_x
op	54:33	0:0	9	*
water	54:34	0:0	9	3600
op	54:38	0:0	9	/
water	54:39	0:0	9	3
op	54:40	0:0	9	.
water	54:41	0:0	9	141
else	55:12	56:50	6
stmts	56:16	56:50	7	
return	56:16	56:50	8	3600+asin(d_x)*3600/3.141
water	56:23	0:0	9	3600
op	56:28	0:0	9	+
call	56:30	56:38	9	asin
arg	56:35	56:38	10	d_x
water	56:35	0:0	11	d_x
op	56:39	0:0	9	*
water	56:40	0:0	9	3600
op	56:44	0:0	9	/
water	56:45	0:0	9	3
op	56:46	0:0	9	.
water	56:47	0:0	9	141
water	57:8	0:0	6	}
else	58:8	59:20	4
stmts	59:12	59:20	5	
return	59:12	59:20	6	0
water	59:19	0:0	7	0
label	61:4	61:11	4	default :
call	62:8	62:18	4	assert
arg	62:16	62:18	5	0
water	62:16	0:0	6	0
water	62:19	0:0	4	;
water	63:4	0:0	4	}
