func	2:0	119:0	0	static es_out_id_t *	EsOutAdd
params	2:28	0:0	1	
param	2:30	2:43	2	es_out_t *	out
param	2:45	2:68	2	const es_format_t *	fmt
stmnts	0:0	118:13	1	
decl	4:4	4:41	2	es_out_sys_t	*p_sys
op	4:29	0:0	2	=
water	4:31	0:0	2	out
op	4:34	0:0	2	->
water	4:36	0:0	2	p_sys
decl	5:4	5:47	2	input_thread_t	*p_input
op	5:31	0:0	2	=
water	5:33	0:0	2	p_sys
op	5:38	0:0	2	->
water	5:40	0:0	2	p_input
if	6:4	10:4	2	(fmt -> i_group < 0)
cond	6:8	6:23	3	fmt -> i_group < 0
water	6:8	0:0	4	fmt
op	6:11	0:0	4	->
water	6:13	0:0	4	i_group
op	6:21	0:0	4	<
water	6:23	0:0	4	0
stmts	7:4	10:4	3	
water	7:4	0:0	4	{
call	8:8	8:49	4	msg_Err
arg	8:17	8:24	5	p_input
water	8:17	0:0	6	p_input
arg	8:26	8:49	5	"invalid group number"
water	8:26	0:0	6	"invalid group number"
water	8:50	0:0	4	;
return	9:8	9:19	4	NULL
water	9:15	0:0	5	NULL
water	10:4	0:0	4	}
decl	11:4	11:47	2	es_out_id_t	*es
op	11:22	0:0	2	=
call	11:24	11:46	3	malloc
arg	11:32	11:46	4	sizeof(*es)
op	11:32	0:0	5	sizeof
water	11:38	0:0	5	(
op	11:40	0:0	5	*
water	11:41	0:0	5	es
water	11:44	0:0	5	)
decl	12:4	12:25	2	es_out_pgrm_t	*p_pgrm
decl	13:4	13:9	2	int	i
if	14:4	15:19	2	(! es)
cond	14:8	14:9	3	! es
op	14:8	0:0	4	!
water	14:9	0:0	4	es
stmts	15:8	15:19	3	
return	15:8	15:19	4	NULL
water	15:15	0:0	5	NULL
call	16:4	16:33	2	vlc_mutex_lock
arg	16:20	16:33	3	&p_sys->lock
op	16:20	0:0	4	&
water	16:21	0:0	4	p_sys
op	16:26	0:0	4	->
water	16:28	0:0	4	lock
water	16:34	0:0	2	;
water	18:4	0:0	2	p_pgrm
op	18:11	0:0	2	=
call	18:13	18:49	2	EsOutProgramFind
arg	18:31	18:34	3	out
water	18:31	0:0	4	out
arg	18:36	18:49	3	fmt->i_group
water	18:36	0:0	4	fmt
op	18:39	0:0	4	->
water	18:41	0:0	4	i_group
water	18:50	0:0	2	;
if	19:4	24:4	2	(! p_pgrm)
cond	19:8	19:9	3	! p_pgrm
op	19:8	0:0	4	!
water	19:9	0:0	4	p_pgrm
stmts	20:4	24:4	3	
water	20:4	0:0	4	{
call	21:8	21:39	4	vlc_mutex_unlock
arg	21:26	21:39	5	&p_sys->lock
op	21:26	0:0	6	&
water	21:27	0:0	6	p_sys
op	21:32	0:0	6	->
water	21:34	0:0	6	lock
water	21:40	0:0	4	;
call	22:8	22:17	4	free
arg	22:14	22:17	5	es
water	22:14	0:0	6	es
water	22:18	0:0	4	;
return	23:8	23:19	4	NULL
water	23:15	0:0	5	NULL
water	24:4	0:0	4	}
water	26:4	0:0	2	p_pgrm
op	26:10	0:0	2	->
water	26:12	0:0	2	i_es
op	26:16	0:0	2	++
water	26:18	0:0	2	;
water	28:4	0:0	2	es
op	28:6	0:0	2	->
water	28:8	0:0	2	p_pgrm
op	28:15	0:0	2	=
water	28:17	0:0	2	p_pgrm
water	28:23	0:0	2	;
call	29:4	29:34	2	es_format_Copy
arg	29:20	29:28	3	&es->fmt
op	29:20	0:0	4	&
water	29:21	0:0	4	es
op	29:23	0:0	4	->
water	29:25	0:0	4	fmt
arg	29:30	29:34	3	fmt
water	29:30	0:0	4	fmt
water	29:35	0:0	2	;
if	30:4	31:39	2	(es -> fmt . i_id < 0)
cond	30:8	30:23	3	es -> fmt . i_id < 0
water	30:8	0:0	4	es
op	30:10	0:0	4	->
water	30:12	0:0	4	fmt
op	30:15	0:0	4	.
water	30:16	0:0	4	i_id
op	30:21	0:0	4	<
water	30:23	0:0	4	0
stmts	31:8	31:39	3	
water	31:8	0:0	4	es
op	31:10	0:0	4	->
water	31:12	0:0	4	fmt
op	31:15	0:0	4	.
water	31:16	0:0	4	i_id
op	31:21	0:0	4	=
water	31:23	0:0	4	out
op	31:26	0:0	4	->
water	31:28	0:0	4	p_sys
op	31:33	0:0	4	->
water	31:35	0:0	4	i_id
water	31:39	0:0	4	;
if	32:4	33:51	2	(! es -> fmt . i_original_fourcc)
cond	32:8	32:17	3	! es -> fmt . i_original_fourcc
op	32:8	0:0	4	!
water	32:9	0:0	4	es
op	32:11	0:0	4	->
water	32:13	0:0	4	fmt
op	32:16	0:0	4	.
water	32:17	0:0	4	i_original_fourcc
stmts	33:8	33:51	3	
water	33:8	0:0	4	es
op	33:10	0:0	4	->
water	33:12	0:0	4	fmt
op	33:15	0:0	4	.
water	33:16	0:0	4	i_original_fourcc
op	33:34	0:0	4	=
water	33:36	0:0	4	es
op	33:38	0:0	4	->
water	33:40	0:0	4	fmt
op	33:43	0:0	4	.
water	33:44	0:0	4	i_codec
water	33:51	0:0	4	;
if	34:4	36:83	2	(es -> fmt . i_cat == AUDIO_ES)
cond	34:8	34:25	3	es -> fmt . i_cat == AUDIO_ES
water	34:8	0:0	4	es
op	34:10	0:0	4	->
water	34:12	0:0	4	fmt
op	34:15	0:0	4	.
water	34:16	0:0	4	i_cat
op	34:22	0:0	4	==
water	34:25	0:0	4	AUDIO_ES
stmts	35:8	36:83	3	
water	35:8	0:0	4	es
op	35:10	0:0	4	->
water	35:12	0:0	4	fmt
op	35:15	0:0	4	.
water	35:16	0:0	4	i_codec
op	35:24	0:0	4	=
call	35:26	36:82	4	vlc_fourcc_GetCodecAudio
arg	35:52	35:67	5	es->fmt.i_codec
water	35:52	0:0	6	es
op	35:54	0:0	6	->
water	35:56	0:0	6	fmt
op	35:59	0:0	6	.
water	35:60	0:0	6	i_codec
arg	36:52	36:82	5	es->fmt.audio.i_bitspersample
water	36:52	0:0	6	es
op	36:54	0:0	6	->
water	36:56	0:0	6	fmt
op	36:59	0:0	6	.
water	36:60	0:0	6	audio
op	36:65	0:0	6	.
water	36:66	0:0	6	i_bitspersample
water	36:83	0:0	4	;
else	37:4	39:64	2
stmts	38:8	39:64	3	
water	38:8	0:0	4	es
op	38:10	0:0	4	->
water	38:12	0:0	4	fmt
op	38:15	0:0	4	.
water	38:16	0:0	4	i_codec
op	38:24	0:0	4	=
call	38:26	39:63	4	vlc_fourcc_GetCodec
arg	38:47	38:60	5	es->fmt.i_cat
water	38:47	0:0	6	es
op	38:49	0:0	6	->
water	38:51	0:0	6	fmt
op	38:54	0:0	6	.
water	38:55	0:0	6	i_cat
arg	39:47	39:63	5	es->fmt.i_codec
water	39:47	0:0	6	es
op	39:49	0:0	6	->
water	39:51	0:0	6	fmt
op	39:54	0:0	6	.
water	39:55	0:0	6	i_codec
water	39:64	0:0	4	;
if	40:4	45:4	2	(es -> fmt . i_cat == VIDEO_ES && ( ! es -> fmt . video . i_visible_width || ! es -> fmt . video . i_visible_height ))
cond	40:8	41:74	3	es -> fmt . i_cat == VIDEO_ES && ( ! es -> fmt . video . i_visible_width || ! es -> fmt . video . i_visible_height )
water	40:8	0:0	4	es
op	40:10	0:0	4	->
water	40:12	0:0	4	fmt
op	40:15	0:0	4	.
water	40:16	0:0	4	i_cat
op	40:22	0:0	4	==
water	40:25	0:0	4	VIDEO_ES
op	41:5	0:0	4	&&
water	41:8	0:0	4	(
op	41:9	0:0	4	!
water	41:10	0:0	4	es
op	41:12	0:0	4	->
water	41:14	0:0	4	fmt
op	41:17	0:0	4	.
water	41:18	0:0	4	video
op	41:23	0:0	4	.
water	41:24	0:0	4	i_visible_width
op	41:40	0:0	4	||
op	41:43	0:0	4	!
water	41:44	0:0	4	es
op	41:46	0:0	4	->
water	41:48	0:0	4	fmt
op	41:51	0:0	4	.
water	41:52	0:0	4	video
op	41:57	0:0	4	.
water	41:58	0:0	4	i_visible_height
water	41:74	0:0	4	)
stmts	42:4	45:4	3	
water	42:4	0:0	4	{
water	43:8	0:0	4	es
op	43:10	0:0	4	->
water	43:12	0:0	4	fmt
op	43:15	0:0	4	.
water	43:16	0:0	4	video
op	43:21	0:0	4	.
water	43:22	0:0	4	i_visible_width
op	43:38	0:0	4	=
water	43:40	0:0	4	es
op	43:42	0:0	4	->
water	43:44	0:0	4	fmt
op	43:47	0:0	4	.
water	43:48	0:0	4	video
op	43:53	0:0	4	.
water	43:54	0:0	4	i_width
water	43:61	0:0	4	;
water	44:8	0:0	4	es
op	44:10	0:0	4	->
water	44:12	0:0	4	fmt
op	44:15	0:0	4	.
water	44:16	0:0	4	video
op	44:21	0:0	4	.
water	44:22	0:0	4	i_visible_height
op	44:39	0:0	4	=
water	44:41	0:0	4	es
op	44:43	0:0	4	->
water	44:45	0:0	4	fmt
op	44:48	0:0	4	.
water	44:49	0:0	4	video
op	44:54	0:0	4	.
water	44:55	0:0	4	i_height
water	44:63	0:0	4	;
water	45:4	0:0	4	}
water	46:4	0:0	2	es
op	46:6	0:0	2	->
water	46:8	0:0	2	i_id
op	46:13	0:0	2	=
water	46:15	0:0	2	es
op	46:17	0:0	2	->
water	46:19	0:0	2	fmt
op	46:22	0:0	2	.
water	46:23	0:0	2	i_id
water	46:27	0:0	2	;
water	47:4	0:0	2	es
op	47:6	0:0	2	->
water	47:8	0:0	2	i_meta_id
op	47:18	0:0	2	=
water	47:20	0:0	2	out
op	47:23	0:0	2	->
water	47:25	0:0	2	p_sys
op	47:30	0:0	2	->
water	47:32	0:0	2	i_id
water	47:36	0:0	2	;
water	48:4	0:0	2	es
op	48:6	0:0	2	->
water	48:8	0:0	2	b_scrambled
op	48:20	0:0	2	=
water	48:22	0:0	2	false
water	48:27	0:0	2	;
switch	49:4	88:4	2	(es -> fmt . i_cat)
cond	49:12	49:20	3	es -> fmt . i_cat
water	49:12	0:0	4	es
op	49:14	0:0	4	->
water	49:16	0:0	4	fmt
op	49:19	0:0	4	.
water	49:20	0:0	4	i_cat
stmts	50:4	88:4	3	
water	50:4	0:0	4	{
label	51:4	51:17	4	case AUDIO_ES :
water	52:4	0:0	4	{
decl	53:8	53:30	4	audio_replay_gain_t	rg
water	54:8	0:0	4	es
op	54:10	0:0	4	->
water	54:12	0:0	4	i_channel
op	54:22	0:0	4	=
water	54:24	0:0	4	p_sys
op	54:29	0:0	4	->
water	54:31	0:0	4	i_audio
water	54:38	0:0	4	;
call	55:8	55:35	4	memset
arg	55:16	55:19	5	&rg
op	55:16	0:0	6	&
water	55:17	0:0	6	rg
arg	55:21	55:22	5	0
water	55:21	0:0	6	0
arg	55:24	55:35	5	sizeof(rg)
op	55:24	0:0	6	sizeof
water	55:30	0:0	6	(
water	55:31	0:0	6	rg
water	55:33	0:0	6	)
water	55:36	0:0	4	;
call	56:8	56:50	4	vlc_mutex_lock
arg	56:24	56:50	5	&p_input->p->p_item->lock
op	56:24	0:0	6	&
water	56:25	0:0	6	p_input
op	56:32	0:0	6	->
water	56:34	0:0	6	p
op	56:35	0:0	6	->
water	56:37	0:0	6	p_item
op	56:43	0:0	6	->
water	56:45	0:0	6	lock
water	56:51	0:0	4	;
call	57:8	57:77	4	vlc_audio_replay_gain_MergeFromMeta
arg	57:45	57:48	5	&rg
op	57:45	0:0	6	&
water	57:46	0:0	6	rg
arg	57:50	57:77	5	p_input->p->p_item->p_meta
water	57:50	0:0	6	p_input
op	57:57	0:0	6	->
water	57:59	0:0	6	p
op	57:60	0:0	6	->
water	57:62	0:0	6	p_item
op	57:68	0:0	6	->
water	57:70	0:0	6	p_meta
water	57:78	0:0	4	;
call	58:8	58:52	4	vlc_mutex_unlock
arg	58:26	58:52	5	&p_input->p->p_item->lock
op	58:26	0:0	6	&
water	58:27	0:0	6	p_input
op	58:34	0:0	6	->
water	58:36	0:0	6	p
op	58:37	0:0	6	->
water	58:39	0:0	6	p_item
op	58:45	0:0	6	->
water	58:47	0:0	6	lock
water	58:53	0:0	4	;
for	59:8	71:8	4	(i = 0 ;i < AUDIO_REPLAY_GAIN_MAX;i ++)
forinit	59:13	59:18	5	i = 0 ;
water	59:13	0:0	6	i
op	59:15	0:0	6	=
water	59:17	0:0	6	0
water	59:18	0:0	6	;
cond	59:20	59:24	5	i < AUDIO_REPLAY_GAIN_MAX
water	59:20	0:0	6	i
op	59:22	0:0	6	<
water	59:24	0:0	6	AUDIO_REPLAY_GAIN_MAX
forexpr	59:47	59:48	5	i ++
water	59:47	0:0	6	i
op	59:48	0:0	6	++
stmts	60:8	71:8	5	
water	60:8	0:0	6	{
if	61:12	65:12	6	(! es -> fmt . audio_replay_gain . pb_peak [ i ])
cond	61:16	61:52	7	! es -> fmt . audio_replay_gain . pb_peak [ i ]
op	61:16	0:0	8	!
water	61:17	0:0	8	es
op	61:19	0:0	8	->
water	61:21	0:0	8	fmt
op	61:24	0:0	8	.
water	61:25	0:0	8	audio_replay_gain
op	61:42	0:0	8	.
water	61:43	0:0	8	pb_peak
op	61:50	0:0	8	[
water	61:51	0:0	8	i
op	61:52	0:0	8	]
stmts	62:12	65:12	7	
water	62:12	0:0	8	{
water	63:16	0:0	8	es
op	63:18	0:0	8	->
water	63:20	0:0	8	fmt
op	63:23	0:0	8	.
water	63:24	0:0	8	audio_replay_gain
op	63:41	0:0	8	.
water	63:42	0:0	8	pb_peak
op	63:49	0:0	8	[
water	63:50	0:0	8	i
op	63:51	0:0	8	]
op	63:53	0:0	8	=
water	63:55	0:0	8	rg
op	63:57	0:0	8	.
water	63:58	0:0	8	pb_peak
op	63:65	0:0	8	[
water	63:66	0:0	8	i
op	63:67	0:0	8	]
water	63:68	0:0	8	;
water	64:16	0:0	8	es
op	64:18	0:0	8	->
water	64:20	0:0	8	fmt
op	64:23	0:0	8	.
water	64:24	0:0	8	audio_replay_gain
op	64:41	0:0	8	.
water	64:42	0:0	8	pf_peak
op	64:49	0:0	8	[
water	64:50	0:0	8	i
op	64:51	0:0	8	]
op	64:53	0:0	8	=
water	64:55	0:0	8	rg
op	64:57	0:0	8	.
water	64:58	0:0	8	pf_peak
op	64:65	0:0	8	[
water	64:66	0:0	8	i
op	64:67	0:0	8	]
water	64:68	0:0	8	;
water	65:12	0:0	8	}
if	66:12	70:12	6	(! es -> fmt . audio_replay_gain . pb_gain [ i ])
cond	66:16	66:52	7	! es -> fmt . audio_replay_gain . pb_gain [ i ]
op	66:16	0:0	8	!
water	66:17	0:0	8	es
op	66:19	0:0	8	->
water	66:21	0:0	8	fmt
op	66:24	0:0	8	.
water	66:25	0:0	8	audio_replay_gain
op	66:42	0:0	8	.
water	66:43	0:0	8	pb_gain
op	66:50	0:0	8	[
water	66:51	0:0	8	i
op	66:52	0:0	8	]
stmts	67:12	70:12	7	
water	67:12	0:0	8	{
water	68:16	0:0	8	es
op	68:18	0:0	8	->
water	68:20	0:0	8	fmt
op	68:23	0:0	8	.
water	68:24	0:0	8	audio_replay_gain
op	68:41	0:0	8	.
water	68:42	0:0	8	pb_gain
op	68:49	0:0	8	[
water	68:50	0:0	8	i
op	68:51	0:0	8	]
op	68:53	0:0	8	=
water	68:55	0:0	8	rg
op	68:57	0:0	8	.
water	68:58	0:0	8	pb_gain
op	68:65	0:0	8	[
water	68:66	0:0	8	i
op	68:67	0:0	8	]
water	68:68	0:0	8	;
water	69:16	0:0	8	es
op	69:18	0:0	8	->
water	69:20	0:0	8	fmt
op	69:23	0:0	8	.
water	69:24	0:0	8	audio_replay_gain
op	69:41	0:0	8	.
water	69:42	0:0	8	pf_gain
op	69:49	0:0	8	[
water	69:50	0:0	8	i
op	69:51	0:0	8	]
op	69:53	0:0	8	=
water	69:55	0:0	8	rg
op	69:57	0:0	8	.
water	69:58	0:0	8	pf_gain
op	69:65	0:0	8	[
water	69:66	0:0	8	i
op	69:67	0:0	8	]
water	69:68	0:0	8	;
water	70:12	0:0	8	}
water	71:8	0:0	6	}
break	72:8	72:13	4	
water	73:4	0:0	4	}
label	74:4	74:17	4	case VIDEO_ES :
water	75:8	0:0	4	es
op	75:10	0:0	4	->
water	75:12	0:0	4	i_channel
op	75:22	0:0	4	=
water	75:24	0:0	4	p_sys
op	75:29	0:0	4	->
water	75:31	0:0	4	i_video
water	75:38	0:0	4	;
if	76:8	80:61	4	(es -> fmt . video . i_frame_rate && es -> fmt . video . i_frame_rate_base)
cond	76:12	76:56	5	es -> fmt . video . i_frame_rate && es -> fmt . video . i_frame_rate_base
water	76:12	0:0	6	es
op	76:14	0:0	6	->
water	76:16	0:0	6	fmt
op	76:19	0:0	6	.
water	76:20	0:0	6	video
op	76:25	0:0	6	.
water	76:26	0:0	6	i_frame_rate
op	76:39	0:0	6	&&
water	76:42	0:0	6	es
op	76:44	0:0	6	->
water	76:46	0:0	6	fmt
op	76:49	0:0	6	.
water	76:50	0:0	6	video
op	76:55	0:0	6	.
water	76:56	0:0	6	i_frame_rate_base
stmts	77:12	80:61	5	
call	77:12	80:60	6	vlc_ureduce
arg	77:25	77:52	7	&es->fmt.video.i_frame_rate
op	77:25	0:0	8	&
water	77:26	0:0	8	es
op	77:28	0:0	8	->
water	77:30	0:0	8	fmt
op	77:33	0:0	8	.
water	77:34	0:0	8	video
op	77:39	0:0	8	.
water	77:40	0:0	8	i_frame_rate
arg	78:25	78:57	7	&es->fmt.video.i_frame_rate_base
op	78:25	0:0	8	&
water	78:26	0:0	8	es
op	78:28	0:0	8	->
water	78:30	0:0	8	fmt
op	78:33	0:0	8	.
water	78:34	0:0	8	video
op	78:39	0:0	8	.
water	78:40	0:0	8	i_frame_rate_base
arg	79:25	79:51	7	es->fmt.video.i_frame_rate
water	79:25	0:0	8	es
op	79:27	0:0	8	->
water	79:29	0:0	8	fmt
op	79:32	0:0	8	.
water	79:33	0:0	8	video
op	79:38	0:0	8	.
water	79:39	0:0	8	i_frame_rate
arg	80:25	80:56	7	es->fmt.video.i_frame_rate_base
water	80:25	0:0	8	es
op	80:27	0:0	8	->
water	80:29	0:0	8	fmt
op	80:32	0:0	8	.
water	80:33	0:0	8	video
op	80:38	0:0	8	.
water	80:39	0:0	8	i_frame_rate_base
arg	80:58	80:60	7	0
water	80:58	0:0	8	0
water	80:61	0:0	6	;
break	81:8	81:13	4	
label	82:4	82:15	4	case SPU_ES :
water	83:8	0:0	4	es
op	83:10	0:0	4	->
water	83:12	0:0	4	i_channel
op	83:22	0:0	4	=
water	83:24	0:0	4	p_sys
op	83:29	0:0	4	->
water	83:31	0:0	4	i_sub
water	83:36	0:0	4	;
break	84:8	84:13	4	
label	85:4	85:11	4	default :
water	86:8	0:0	4	es
op	86:10	0:0	4	->
water	86:12	0:0	4	i_channel
op	86:22	0:0	4	=
water	86:24	0:0	4	0
water	86:25	0:0	4	;
break	87:8	87:13	4	
water	88:4	0:0	4	}
water	89:4	0:0	2	es
op	89:6	0:0	2	->
water	89:8	0:0	2	psz_language
op	89:21	0:0	2	=
call	89:23	89:61	2	LanguageGetName
arg	89:40	89:61	3	es->fmt.psz_language
water	89:40	0:0	4	es
op	89:42	0:0	4	->
water	89:44	0:0	4	fmt
op	89:47	0:0	4	.
water	89:48	0:0	4	psz_language
water	89:62	0:0	2	;
water	90:4	0:0	2	es
op	90:6	0:0	2	->
water	90:8	0:0	2	psz_language_code
op	90:26	0:0	2	=
call	90:28	90:66	2	LanguageGetCode
arg	90:45	90:66	3	es->fmt.psz_language
water	90:45	0:0	4	es
op	90:47	0:0	4	->
water	90:49	0:0	4	fmt
op	90:52	0:0	4	.
water	90:53	0:0	4	psz_language
water	90:67	0:0	2	;
water	91:4	0:0	2	es
op	91:6	0:0	2	->
water	91:8	0:0	2	p_dec
op	91:14	0:0	2	=
water	91:16	0:0	2	NULL
water	91:20	0:0	2	;
water	92:4	0:0	2	es
op	92:6	0:0	2	->
water	92:8	0:0	2	p_dec_record
op	92:21	0:0	2	=
water	92:23	0:0	2	NULL
water	92:27	0:0	2	;
for	93:4	94:36	2	(i = 0 ;i < 4;i ++)
forinit	93:9	93:14	3	i = 0 ;
water	93:9	0:0	4	i
op	93:11	0:0	4	=
water	93:13	0:0	4	0
water	93:14	0:0	4	;
cond	93:16	93:20	3	i < 4
water	93:16	0:0	4	i
op	93:18	0:0	4	<
water	93:20	0:0	4	4
forexpr	93:23	93:24	3	i ++
water	93:23	0:0	4	i
op	93:24	0:0	4	++
stmts	94:8	94:36	3	
water	94:8	0:0	4	es
op	94:10	0:0	4	->
water	94:12	0:0	4	pb_cc_present
op	94:25	0:0	4	[
water	94:26	0:0	4	i
op	94:27	0:0	4	]
op	94:29	0:0	4	=
water	94:31	0:0	4	false
water	94:36	0:0	4	;
water	95:4	0:0	2	es
op	95:6	0:0	2	->
water	95:8	0:0	2	p_master
op	95:17	0:0	2	=
water	95:19	0:0	2	NULL
water	95:23	0:0	2	;
if	96:4	97:42	2	(es -> p_pgrm == p_sys -> p_pgrm)
cond	96:8	96:29	3	es -> p_pgrm == p_sys -> p_pgrm
water	96:8	0:0	4	es
op	96:10	0:0	4	->
water	96:12	0:0	4	p_pgrm
op	96:19	0:0	4	==
water	96:22	0:0	4	p_sys
op	96:27	0:0	4	->
water	96:29	0:0	4	p_pgrm
stmts	97:8	97:42	3	
call	97:8	97:41	4	EsOutESVarUpdate
arg	97:26	97:29	5	out
water	97:26	0:0	6	out
arg	97:31	97:33	5	es
water	97:31	0:0	6	es
arg	97:35	97:41	5	false
water	97:35	0:0	6	false
water	97:42	0:0	4	;
call	99:4	99:32	2	EsOutSelect
arg	99:17	99:20	3	out
water	99:17	0:0	4	out
arg	99:22	99:24	3	es
water	99:22	0:0	4	es
arg	99:26	99:32	3	false
water	99:26	0:0	4	false
water	99:33	0:0	2	;
call	100:4	100:53	2	TAB_APPEND
arg	100:16	100:32	3	out->p_sys->i_es
water	100:16	0:0	4	out
op	100:19	0:0	4	->
water	100:21	0:0	4	p_sys
op	100:26	0:0	4	->
water	100:28	0:0	4	i_es
arg	100:34	100:48	3	out->p_sys->es
water	100:34	0:0	4	out
op	100:37	0:0	4	->
water	100:39	0:0	4	p_sys
op	100:44	0:0	4	->
water	100:46	0:0	4	es
arg	100:50	100:53	3	es
water	100:50	0:0	4	es
water	100:54	0:0	2	;
water	101:4	0:0	2	p_sys
op	101:9	0:0	2	->
water	101:11	0:0	2	i_id
op	101:15	0:0	2	++
water	101:17	0:0	2	;
switch	102:4	113:4	2	(es -> fmt . i_cat)
cond	102:12	102:20	3	es -> fmt . i_cat
water	102:12	0:0	4	es
op	102:14	0:0	4	->
water	102:16	0:0	4	fmt
op	102:19	0:0	4	.
water	102:20	0:0	4	i_cat
stmts	103:4	113:4	3	
water	103:4	0:0	4	{
label	104:8	104:21	4	case AUDIO_ES :
water	105:12	0:0	4	p_sys
op	105:17	0:0	4	->
water	105:19	0:0	4	i_audio
op	105:26	0:0	4	++
water	105:28	0:0	4	;
break	106:12	106:17	4	
label	107:8	107:19	4	case SPU_ES :
water	108:12	0:0	4	p_sys
op	108:17	0:0	4	->
water	108:19	0:0	4	i_sub
op	108:24	0:0	4	++
water	108:26	0:0	4	;
break	109:12	109:17	4	
label	110:8	110:21	4	case VIDEO_ES :
water	111:12	0:0	4	p_sys
op	111:17	0:0	4	->
water	111:19	0:0	4	i_video
op	111:26	0:0	4	++
water	111:28	0:0	4	;
break	112:12	112:17	4	
water	113:4	0:0	4	}
call	114:4	114:45	2	EsOutUpdateInfo
arg	114:21	114:24	3	out
water	114:21	0:0	4	out
arg	114:26	114:28	3	es
water	114:26	0:0	4	es
arg	114:30	114:38	3	&es->fmt
op	114:30	0:0	4	&
water	114:31	0:0	4	es
op	114:33	0:0	4	->
water	114:35	0:0	4	fmt
arg	114:40	114:45	3	NULL
water	114:40	0:0	4	NULL
water	114:46	0:0	2	;
if	115:4	116:54	2	(es -> b_scrambled)
cond	115:8	115:12	3	es -> b_scrambled
water	115:8	0:0	4	es
op	115:10	0:0	4	->
water	115:12	0:0	4	b_scrambled
stmts	116:8	116:54	3	
call	116:8	116:53	4	EsOutProgramUpdateScrambled
arg	116:37	116:40	5	out
water	116:37	0:0	6	out
arg	116:42	116:53	5	es->p_pgrm
water	116:42	0:0	6	es
op	116:44	0:0	6	->
water	116:46	0:0	6	p_pgrm
water	116:54	0:0	4	;
call	117:4	117:35	2	vlc_mutex_unlock
arg	117:22	117:35	3	&p_sys->lock
op	117:22	0:0	4	&
water	117:23	0:0	4	p_sys
op	117:28	0:0	4	->
water	117:30	0:0	4	lock
water	117:36	0:0	2	;
return	118:4	118:13	2	es
water	118:11	0:0	3	es
