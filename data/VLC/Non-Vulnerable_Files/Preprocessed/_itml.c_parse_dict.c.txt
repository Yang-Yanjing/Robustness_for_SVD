func	2:0	90:0	0	static bool	parse_dict
params	2:22	0:0	1	
param	2:24	2:40	2	demux_t *	p_demux
param	2:42	2:73	2	input_item_node_t *	p_input_node
param	3:24	3:45	2	track_elem_t *	p_track
param	3:47	3:73	2	xml_reader_t *	p_xml_reader
param	4:24	4:47	2	const char *	psz_element
param	4:49	4:76	2	xml_elem_hnd_t *	p_handlers
stmnts	0:0	89:16	1	
decl	6:4	6:14	2	int	i_node
decl	7:4	7:20	2	const char	*node
decl	8:4	8:26	2	char	*psz_value
op	8:20	0:0	2	=
water	8:22	0:0	2	NULL
decl	9:4	9:24	2	char	*psz_key
op	9:18	0:0	2	=
water	9:20	0:0	2	NULL
decl	10:4	10:36	2	xml_elem_hnd_t	*p_handler
op	10:30	0:0	2	=
water	10:32	0:0	2	NULL
decl	11:4	11:22	2	bool	b_ret
op	11:15	0:0	2	=
water	11:17	0:0	2	false
while	12:4	84:4	2	(( i_node =xml_ReaderNextNode (p_xml_reader ,& node ) ) > 0)
cond	12:11	12:66	3	( i_node =xml_ReaderNextNode (p_xml_reader ,& node ) ) > 0
water	12:11	0:0	4	(
water	12:12	0:0	4	i_node
op	12:19	0:0	4	=
call	12:21	12:61	4	xml_ReaderNextNode
arg	12:41	12:53	5	p_xml_reader
water	12:41	0:0	6	p_xml_reader
arg	12:55	12:61	5	&node
op	12:55	0:0	6	&
water	12:56	0:0	6	node
water	12:62	0:0	4	)
op	12:64	0:0	4	>
water	12:66	0:0	4	0
stmts	13:4	84:4	3	
water	13:4	0:0	4	{
switch	14:8	83:8	4	(i_node)
cond	14:16	14:16	5	i_node
water	14:16	0:0	6	i_node
stmts	15:8	83:8	5	
water	15:8	0:0	6	{
label	17:8	17:33	6	case XML_READER_STARTELEM :
if	18:12	22:12	6	(! * node)
cond	18:16	18:18	7	! * node
op	18:16	0:0	8	!
op	18:17	0:0	8	*
water	18:18	0:0	8	node
stmts	19:12	22:12	7	
water	19:12	0:0	8	{
call	20:16	20:55	8	msg_Err
arg	20:25	20:32	9	p_demux
water	20:25	0:0	10	p_demux
arg	20:34	20:55	9	"invalid XML stream"
water	20:34	0:0	10	"invalid XML stream"
water	20:56	0:0	8	;
goto	21:16	21:24	8	end
water	21:21	0:0	9	end
water	22:12	0:0	8	}
for	24:12	26:34	6	(p_handler = p_handlers ;p_handler -> name &&strcmp (node ,p_handler -> name );p_handler ++)
forinit	24:17	24:39	7	p_handler = p_handlers ;
water	24:17	0:0	8	p_handler
op	24:27	0:0	8	=
water	24:29	0:0	8	p_handlers
water	24:39	0:0	8	;
cond	25:21	25:70	7	p_handler -> name &&strcmp (node ,p_handler -> name )
water	25:21	0:0	8	p_handler
op	25:30	0:0	8	->
water	25:32	0:0	8	name
op	25:37	0:0	8	&&
call	25:40	25:70	8	strcmp
arg	25:48	25:52	9	node
water	25:48	0:0	10	node
arg	25:54	25:70	9	p_handler->name
water	25:54	0:0	10	p_handler
op	25:63	0:0	10	->
water	25:65	0:0	10	name
forexpr	26:21	26:30	7	p_handler ++
water	26:21	0:0	8	p_handler
op	26:30	0:0	8	++
stmts	26:34	26:34	7	
water	26:34	0:0	8	;
if	27:12	31:12	6	(! p_handler -> name)
cond	27:16	27:28	7	! p_handler -> name
op	27:16	0:0	8	!
water	27:17	0:0	8	p_handler
op	27:26	0:0	8	->
water	27:28	0:0	8	name
stmts	28:12	31:12	7	
water	28:12	0:0	8	{
call	29:16	29:66	8	msg_Err
arg	29:25	29:32	9	p_demux
water	29:25	0:0	10	p_demux
arg	29:34	29:59	9	"unexpected element <%s>"
water	29:34	0:0	10	"unexpected element <%s>"
arg	29:61	29:66	9	node
water	29:61	0:0	10	node
water	29:67	0:0	8	;
goto	30:16	30:24	8	end
water	30:21	0:0	9	end
water	31:12	0:0	8	}
if	33:12	44:12	6	(p_handler -> type == COMPLEX_CONTENT)
cond	33:16	33:35	7	p_handler -> type == COMPLEX_CONTENT
water	33:16	0:0	8	p_handler
op	33:25	0:0	8	->
water	33:27	0:0	8	type
op	33:32	0:0	8	==
water	33:35	0:0	8	COMPLEX_CONTENT
stmts	34:12	44:12	7	
water	34:12	0:0	8	{
if	35:16	41:16	8	(p_handler -> pf_handler . cmplx (p_demux ,p_input_node ,NULL ,p_xml_reader ,p_handler -> name ,NULL ))
cond	35:20	37:54	9	p_handler -> pf_handler . cmplx (p_demux ,p_input_node ,NULL ,p_xml_reader ,p_handler -> name ,NULL )
call	35:20	37:54	10	p_handler->pf_handler.cmplx
arg	35:49	35:56	11	p_demux
water	35:49	0:0	12	p_demux
arg	35:58	35:70	11	p_input_node
water	35:58	0:0	12	p_input_node
arg	35:72	35:76	11	NULL
water	35:72	0:0	12	NULL
arg	36:49	36:61	11	p_xml_reader
water	36:49	0:0	12	p_xml_reader
arg	36:63	36:78	11	p_handler->name
water	36:63	0:0	12	p_handler
op	36:72	0:0	12	->
water	36:74	0:0	12	name
arg	37:49	37:54	11	NULL
water	37:49	0:0	12	NULL
stmts	38:16	41:16	9	
water	38:16	0:0	10	{
water	39:20	0:0	10	p_handler
op	39:30	0:0	10	=
water	39:32	0:0	10	NULL
water	39:36	0:0	10	;
call	40:20	40:33	10	FREE_ATT_KEY
water	40:34	0:0	10	;
water	41:16	0:0	10	}
else	42:16	43:28	8
stmts	43:20	43:28	9	
goto	43:20	43:28	10	end
water	43:25	0:0	11	end
water	44:12	0:0	8	}
break	45:12	45:17	6	
label	47:8	47:28	6	case XML_READER_TEXT :
call	48:12	48:28	6	free
arg	48:18	48:28	7	psz_value
water	48:18	0:0	8	psz_value
water	48:29	0:0	6	;
water	49:12	0:0	6	psz_value
op	49:22	0:0	6	=
call	49:24	49:37	6	strdup
arg	49:32	49:37	7	node
water	49:32	0:0	8	node
water	49:38	0:0	6	;
if	50:12	51:24	6	(unlikely (! psz_value ))
cond	50:16	50:35	7	unlikely (! psz_value )
call	50:16	50:35	8	unlikely
arg	50:25	50:35	9	!psz_value
op	50:25	0:0	10	!
water	50:26	0:0	10	psz_value
stmts	51:16	51:24	7	
goto	51:16	51:24	8	end
water	51:21	0:0	9	end
break	52:12	52:17	6	
label	54:8	54:31	6	case XML_READER_ENDELEM :
if	56:12	60:12	6	(!strcmp (node ,psz_element ))
cond	56:16	56:43	7	!strcmp (node ,psz_element )
op	56:16	0:0	8	!
call	56:17	56:43	8	strcmp
arg	56:25	56:29	9	node
water	56:25	0:0	10	node
arg	56:31	56:43	9	psz_element
water	56:31	0:0	10	psz_element
stmts	57:12	60:12	7	
water	57:12	0:0	8	{
water	58:16	0:0	8	b_ret
op	58:22	0:0	8	=
water	58:24	0:0	8	true
water	58:28	0:0	8	;
goto	59:16	59:24	8	end
water	59:21	0:0	9	end
water	60:12	0:0	8	}
if	62:12	68:12	6	(! p_handler || ! p_handler -> name ||strcmp (p_handler -> name ,node ))
cond	62:16	63:49	7	! p_handler || ! p_handler -> name ||strcmp (p_handler -> name ,node )
op	62:16	0:0	8	!
water	62:17	0:0	8	p_handler
op	62:27	0:0	8	||
op	62:30	0:0	8	!
water	62:31	0:0	8	p_handler
op	62:40	0:0	8	->
water	62:42	0:0	8	name
op	63:16	0:0	8	||
call	63:19	63:49	8	strcmp
arg	63:27	63:42	9	p_handler->name
water	63:27	0:0	10	p_handler
op	63:36	0:0	10	->
water	63:38	0:0	10	name
arg	63:44	63:49	9	node
water	63:44	0:0	10	node
stmts	64:12	68:12	7	
water	64:12	0:0	8	{
call	65:16	66:30	8	msg_Err
arg	65:25	65:32	9	p_demux
water	65:25	0:0	10	p_demux
arg	65:34	65:73	9	"there's no open element left for <%s>"
water	65:34	0:0	10	"there's no open element left for <%s>"
arg	66:25	66:30	9	node
water	66:25	0:0	10	node
water	66:31	0:0	8	;
goto	67:16	67:24	8	end
water	67:21	0:0	9	end
water	68:12	0:0	8	}
if	70:12	74:12	6	(!strcmp (p_handler -> name ,"key" ))
cond	70:16	70:48	7	!strcmp (p_handler -> name ,"key" )
op	70:16	0:0	8	!
call	70:17	70:48	8	strcmp
arg	70:25	70:40	9	p_handler->name
water	70:25	0:0	10	p_handler
op	70:34	0:0	10	->
water	70:36	0:0	10	name
arg	70:42	70:48	9	"key"
water	70:42	0:0	10	"key"
stmts	71:12	74:12	7	
water	71:12	0:0	8	{
call	72:16	72:30	8	free
arg	72:22	72:30	9	psz_key
water	72:22	0:0	10	psz_key
water	72:31	0:0	8	;
water	73:16	0:0	8	psz_key
op	73:24	0:0	8	=
call	73:26	73:44	8	strdup
arg	73:34	73:44	9	psz_value
water	73:34	0:0	10	psz_value
water	73:45	0:0	8	;
water	74:12	0:0	8	}
else	76:12	79:12	6
stmts	76:17	79:12	7	
if	76:17	79:12	8	(p_handler -> pf_handler . smpl)
cond	76:21	76:43	9	p_handler -> pf_handler . smpl
water	76:21	0:0	10	p_handler
op	76:30	0:0	10	->
water	76:32	0:0	10	pf_handler
op	76:42	0:0	10	.
water	76:43	0:0	10	smpl
stmts	77:12	79:12	9	
water	77:12	0:0	10	{
call	78:16	78:72	10	p_handler->pf_handler.smpl
arg	78:44	78:51	11	p_track
water	78:44	0:0	12	p_track
arg	78:53	78:60	11	psz_key
water	78:53	0:0	12	psz_key
arg	78:62	78:72	11	psz_value
water	78:62	0:0	12	psz_value
water	78:73	0:0	10	;
water	79:12	0:0	10	}
call	80:12	80:21	6	FREE_ATT
water	80:22	0:0	6	;
water	81:12	0:0	6	p_handler
op	81:22	0:0	6	=
water	81:24	0:0	6	NULL
water	81:28	0:0	6	;
break	82:12	82:17	6	
water	83:8	0:0	6	}
water	84:4	0:0	4	}
call	85:4	85:51	2	msg_Err
arg	85:13	85:20	3	p_demux
water	85:13	0:0	4	p_demux
arg	85:22	85:51	3	"unexpected end of XML data"
water	85:22	0:0	4	"unexpected end of XML data"
water	85:52	0:0	2	;
label	86:0	86:3	2	end :
call	87:4	87:20	2	free
arg	87:10	87:20	3	psz_value
water	87:10	0:0	4	psz_value
water	87:21	0:0	2	;
call	88:4	88:18	2	free
arg	88:10	88:18	3	psz_key
water	88:10	0:0	4	psz_key
water	88:19	0:0	2	;
return	89:4	89:16	2	b_ret
water	89:11	0:0	3	b_ret
