func	2:0	127:0	0	int	dvb_set_sec
params	2:16	0:0	1	
param	2:17	2:32	2	dvb_device_t *	d
param	2:34	2:50	2	uint64_t	freq_Hz
param	2:52	2:60	2	char	pol
param	3:17	3:30	2	uint32_t	lowf
param	3:32	3:46	2	uint32_t	highf
param	3:48	3:64	2	uint32_t	switchf
stmnts	0:0	126:68	1	
decl	5:4	5:34	2	uint32_t	freq
op	5:18	0:0	2	=
water	5:20	0:0	2	freq_Hz
op	5:28	0:0	2	/
water	5:30	0:0	2	1000
decl	7:4	7:58	2	int	val
op	7:12	0:0	2	=
call	7:14	7:57	3	var_InheritBool
arg	7:31	7:37	4	d->obj
water	7:31	0:0	5	d
op	7:32	0:0	5	->
water	7:34	0:0	5	obj
arg	7:39	7:57	4	"dvb-high-voltage"
water	7:39	0:0	5	"dvb-high-voltage"
if	8:4	10:39	2	(ioctl (d -> frontend ,FE_ENABLE_HIGH_LNB_VOLTAGE ,& val ) < 0 && val)
cond	8:8	8:69	3	ioctl (d -> frontend ,FE_ENABLE_HIGH_LNB_VOLTAGE ,& val ) < 0 && val
call	8:8	8:60	4	ioctl
arg	8:15	8:26	5	d->frontend
water	8:15	0:0	6	d
op	8:16	0:0	6	->
water	8:18	0:0	6	frontend
arg	8:28	8:54	5	FE_ENABLE_HIGH_LNB_VOLTAGE
water	8:28	0:0	6	FE_ENABLE_HIGH_LNB_VOLTAGE
arg	8:56	8:60	5	&val
op	8:56	0:0	6	&
water	8:57	0:0	6	val
op	8:62	0:0	4	<
water	8:64	0:0	4	0
op	8:66	0:0	4	&&
water	8:69	0:0	4	val
stmts	9:8	10:39	3	
call	9:8	10:38	4	msg_Err
arg	9:17	9:23	5	d->obj
water	9:17	0:0	6	d
op	9:18	0:0	6	->
water	9:20	0:0	6	obj
arg	9:25	9:61	5	"cannot enable high LNB voltage: %s"
water	9:25	0:0	6	"cannot enable high LNB voltage: %s"
arg	10:17	10:38	5	vlc_strerror_c(errno)
call	10:17	10:37	6	vlc_strerror_c
arg	10:32	10:37	7	errno
water	10:32	0:0	8	errno
water	10:39	0:0	4	;
if	13:4	38:4	2	(! lowf)
cond	13:8	13:9	3	! lowf
op	13:8	0:0	4	!
water	13:9	0:0	4	lowf
stmts	14:4	38:4	3	
water	14:4	0:0	4	{
water	15:8	0:0	4	static
water	15:15	0:0	4	const
water	15:21	0:0	4	struct
water	16:8	0:0	4	{
water	17:13	0:0	4	uint16_t
water	17:22	0:0	4	min
water	17:25	0:0	4	,
water	17:27	0:0	4	max
water	17:30	0:0	4	,
water	17:32	0:0	4	low
water	17:35	0:0	4	,
water	17:37	0:0	4	high
water	17:41	0:0	4	;
water	18:8	0:0	4	}
water	18:10	0:0	4	tab
op	18:13	0:0	4	[
op	18:14	0:0	4	]
op	18:16	0:0	4	=
water	19:8	0:0	4	{
water	20:13	0:0	4	{
water	20:15	0:0	4	10700
water	20:20	0:0	4	,
water	20:22	0:0	4	13250
water	20:27	0:0	4	,
water	20:30	0:0	4	9750
water	20:34	0:0	4	,
water	20:36	0:0	4	10600
water	20:42	0:0	4	}
water	20:43	0:0	4	,
water	21:13	0:0	4	{
water	21:16	0:0	4	4500
water	21:20	0:0	4	,
water	21:23	0:0	4	4800
water	21:27	0:0	4	,
water	21:30	0:0	4	5950
water	21:34	0:0	4	,
water	21:40	0:0	4	0
water	21:42	0:0	4	}
water	21:43	0:0	4	,
water	22:13	0:0	4	{
water	22:16	0:0	4	3400
water	22:20	0:0	4	,
water	22:23	0:0	4	4200
water	22:27	0:0	4	,
water	22:30	0:0	4	5150
water	22:34	0:0	4	,
water	22:40	0:0	4	0
water	22:42	0:0	4	}
water	22:43	0:0	4	,
water	23:13	0:0	4	{
water	23:16	0:0	4	2500
water	23:20	0:0	4	,
water	23:23	0:0	4	2700
water	23:27	0:0	4	,
water	23:30	0:0	4	3650
water	23:34	0:0	4	,
water	23:40	0:0	4	0
water	23:42	0:0	4	}
water	23:43	0:0	4	,
water	24:13	0:0	4	{
water	24:17	0:0	4	950
water	24:20	0:0	4	,
water	24:23	0:0	4	2150
water	24:27	0:0	4	,
water	24:33	0:0	4	0
water	24:34	0:0	4	,
water	24:40	0:0	4	0
water	24:42	0:0	4	}
water	24:43	0:0	4	,
water	25:8	0:0	4	}
water	25:9	0:0	4	;
decl	26:8	26:39	4	uint_fast16_t	mHz
op	26:26	0:0	4	=
water	26:28	0:0	4	freq
op	26:33	0:0	4	/
water	26:35	0:0	4	1000
for	27:8	33:13	4	( size_t i = 0 ;i < sizeof ( tab ) / sizeof ( tab [ 0 ] );i ++)
forinit	0:0	27:25	5	 size_t i = 0 ;
decl	27:13	27:25	6	size_t	i
op	27:22	0:0	6	=
water	27:24	0:0	6	0
cond	27:27	27:60	5	i < sizeof ( tab ) / sizeof ( tab [ 0 ] )
water	27:27	0:0	6	i
op	27:29	0:0	6	<
op	27:31	0:0	6	sizeof
water	27:38	0:0	6	(
water	27:39	0:0	6	tab
water	27:42	0:0	6	)
op	27:44	0:0	6	/
op	27:46	0:0	6	sizeof
water	27:53	0:0	6	(
water	27:54	0:0	6	tab
op	27:57	0:0	6	[
water	27:58	0:0	6	0
op	27:59	0:0	6	]
water	27:60	0:0	6	)
forexpr	27:63	27:64	5	i ++
water	27:63	0:0	6	i
op	27:64	0:0	6	++
stmts	28:13	33:13	5	
if	28:13	33:13	6	(mHz >= tab [ i ] . min && mHz <= tab [ i ] . max)
cond	28:17	28:52	7	mHz >= tab [ i ] . min && mHz <= tab [ i ] . max
water	28:17	0:0	8	mHz
op	28:21	0:0	8	>=
water	28:24	0:0	8	tab
op	28:27	0:0	8	[
water	28:28	0:0	8	i
op	28:29	0:0	8	]
op	28:30	0:0	8	.
water	28:31	0:0	8	min
op	28:35	0:0	8	&&
water	28:38	0:0	8	mHz
op	28:42	0:0	8	<=
water	28:45	0:0	8	tab
op	28:48	0:0	8	[
water	28:49	0:0	8	i
op	28:50	0:0	8	]
op	28:51	0:0	8	.
water	28:52	0:0	8	max
stmts	29:13	33:13	7	
water	29:13	0:0	8	{
water	30:17	0:0	8	lowf
op	30:22	0:0	8	=
water	30:24	0:0	8	tab
op	30:27	0:0	8	[
water	30:28	0:0	8	i
op	30:29	0:0	8	]
op	30:30	0:0	8	.
water	30:31	0:0	8	low
op	30:35	0:0	8	*
water	30:37	0:0	8	1000
water	30:41	0:0	8	;
water	31:17	0:0	8	highf
op	31:23	0:0	8	=
water	31:25	0:0	8	tab
op	31:28	0:0	8	[
water	31:29	0:0	8	i
op	31:30	0:0	8	]
op	31:31	0:0	8	.
water	31:32	0:0	8	high
op	31:37	0:0	8	*
water	31:39	0:0	8	1000
water	31:43	0:0	8	;
goto	32:17	32:27	8	known
water	32:22	0:0	9	known
water	33:13	0:0	8	}
call	34:8	34:67	4	msg_Err
arg	34:17	34:23	5	d->obj
water	34:17	0:0	6	d
op	34:18	0:0	6	->
water	34:20	0:0	6	obj
arg	34:25	34:61	5	"no known band for frequency %u kHz"
water	34:25	0:0	6	"no known band for frequency %u kHz"
arg	34:63	34:67	5	freq
water	34:63	0:0	6	freq
water	34:68	0:0	4	;
label	35:0	35:5	4	known :
call	36:8	37:28	4	msg_Dbg
arg	36:17	36:23	5	d->obj
water	36:17	0:0	6	d
op	36:18	0:0	6	->
water	36:20	0:0	6	obj
arg	36:25	36:69	5	"selected LNB low: %u kHz, LNB high: %u kHz"
water	36:25	0:0	6	"selected LNB low: %u kHz, LNB high: %u kHz"
arg	37:17	37:21	5	lowf
water	37:17	0:0	6	lowf
arg	37:23	37:28	5	highf
water	37:23	0:0	6	highf
water	37:29	0:0	4	;
water	38:4	0:0	4	}
decl	40:4	40:44	2	bool	high
op	40:14	0:0	2	=
water	40:16	0:0	2	highf
op	40:22	0:0	2	!=
water	40:25	0:0	2	0
op	40:27	0:0	2	&&
water	40:30	0:0	2	freq
op	40:35	0:0	2	>
water	40:37	0:0	2	switchf
water	41:4	0:0	2	freq
op	41:9	0:0	2	-=
water	41:12	0:0	2	high
water	41:17	0:0	2	?
water	41:19	0:0	2	highf
water	41:25	0:0	2	:
water	41:27	0:0	2	lowf
water	41:31	0:0	2	;
if	42:4	43:18	2	(( int32_t ) freq < 0)
cond	42:8	42:24	3	( int32_t ) freq < 0
water	42:8	0:0	4	(
water	42:9	0:0	4	int32_t
water	42:16	0:0	4	)
water	42:17	0:0	4	freq
op	42:22	0:0	4	<
water	42:24	0:0	4	0
stmts	43:8	43:18	3	
water	43:8	0:0	4	freq
op	43:13	0:0	4	*=
op	43:16	0:0	4	-
water	43:17	0:0	4	1
water	43:18	0:0	4	;
call	44:4	44:29	2	assert
arg	44:12	44:29	3	freq<0x7fffffff
water	44:12	0:0	4	freq
op	44:17	0:0	4	<
water	44:19	0:0	4	0
water	44:20	0:0	4	x7fffffff
water	44:30	0:0	2	;
decl	45:4	45:12	2	int	tone
switch	46:4	51:4	2	(var_InheritInteger (d -> obj ,"dvb-tone" ))
cond	46:12	46:50	3	var_InheritInteger (d -> obj ,"dvb-tone" )
call	46:12	46:50	4	var_InheritInteger
arg	46:32	46:38	5	d->obj
water	46:32	0:0	6	d
op	46:33	0:0	6	->
water	46:35	0:0	6	obj
arg	46:40	46:50	5	"dvb-tone"
water	46:40	0:0	6	"dvb-tone"
stmts	47:4	51:4	3	
water	47:4	0:0	4	{
label	48:8	48:14	4	case 0 :
water	48:17	0:0	4	tone
op	48:22	0:0	4	=
water	48:24	0:0	4	SEC_TONE_OFF
water	48:36	0:0	4	;
break	48:38	48:43	4	
label	49:8	49:14	4	case 1 :
water	49:17	0:0	4	tone
op	49:22	0:0	4	=
water	49:24	0:0	4	SEC_TONE_ON
water	49:35	0:0	4	;
break	49:38	49:43	4	
label	50:8	50:15	4	default :
water	50:17	0:0	4	tone
op	50:22	0:0	4	=
water	50:24	0:0	4	high
water	50:29	0:0	4	?
water	50:31	0:0	4	SEC_TONE_ON
water	50:43	0:0	4	:
water	50:45	0:0	4	SEC_TONE_OFF
water	50:57	0:0	4	;
water	51:4	0:0	4	}
water	53:4	0:0	2	unsigned
water	53:13	0:0	2	voltage
op	53:21	0:0	2	=
call	53:23	53:50	2	dvb_parse_polarization
arg	53:47	53:50	3	pol
water	53:47	0:0	4	pol
water	53:51	0:0	2	;
if	54:4	55:17	2	(dvb_set_props (d ,2 ,DTV_TONE ,SEC_TONE_OFF ,DTV_VOLTAGE ,voltage ))
cond	54:8	54:73	3	dvb_set_props (d ,2 ,DTV_TONE ,SEC_TONE_OFF ,DTV_VOLTAGE ,voltage )
call	54:8	54:73	4	dvb_set_props
arg	54:23	54:24	5	d
water	54:23	0:0	6	d
arg	54:26	54:27	5	2
water	54:26	0:0	6	2
arg	54:29	54:37	5	DTV_TONE
water	54:29	0:0	6	DTV_TONE
arg	54:39	54:51	5	SEC_TONE_OFF
water	54:39	0:0	6	SEC_TONE_OFF
arg	54:53	54:64	5	DTV_VOLTAGE
water	54:53	0:0	6	DTV_VOLTAGE
arg	54:66	54:73	5	voltage
water	54:66	0:0	6	voltage
stmts	55:8	55:17	3	
return	55:8	55:17	4	-1
op	55:15	0:0	5	-
water	55:16	0:0	5	1
water	56:4	0:0	2	unsigned
water	56:13	0:0	2	satno
op	56:19	0:0	2	=
call	56:21	56:60	2	var_InheritInteger
arg	56:41	56:47	3	d->obj
water	56:41	0:0	4	d
op	56:42	0:0	4	->
water	56:44	0:0	4	obj
arg	56:49	56:60	3	"dvb-satno"
water	56:49	0:0	4	"dvb-satno"
water	56:61	0:0	2	;
if	57:4	124:4	2	(satno > 0)
cond	57:8	57:16	3	satno > 0
water	57:8	0:0	4	satno
op	57:14	0:0	4	>
water	57:16	0:0	4	0
stmts	58:4	124:4	3	
water	58:4	0:0	4	{
decl	63:8	63:42	4	struct dvb_diseqc_master_cmd	uncmd
decl	65:8	65:40	4	struct dvb_diseqc_master_cmd	cmd
water	66:8	0:0	4	satno
op	66:14	0:0	4	=
water	66:16	0:0	4	(
water	66:17	0:0	4	satno
op	66:23	0:0	4	-
water	66:25	0:0	4	1
water	66:26	0:0	4	)
op	66:28	0:0	4	&
water	66:30	0:0	4	3
water	66:31	0:0	4	;
water	67:8	0:0	4	cmd
op	67:11	0:0	4	.
water	67:12	0:0	4	msg
op	67:15	0:0	4	[
water	67:16	0:0	4	0
op	67:17	0:0	4	]
op	67:19	0:0	4	=
water	67:21	0:0	4	0
water	67:22	0:0	4	xE0
water	67:25	0:0	4	;
water	68:8	0:0	4	cmd
op	68:11	0:0	4	.
water	68:12	0:0	4	msg
op	68:15	0:0	4	[
water	68:16	0:0	4	1
op	68:17	0:0	4	]
op	68:19	0:0	4	=
water	68:21	0:0	4	0
water	68:22	0:0	4	x10
water	68:25	0:0	4	;
water	69:8	0:0	4	cmd
op	69:11	0:0	4	.
water	69:12	0:0	4	msg
op	69:15	0:0	4	[
water	69:16	0:0	4	2
op	69:17	0:0	4	]
op	69:19	0:0	4	=
water	69:21	0:0	4	0
water	69:22	0:0	4	x38
water	69:25	0:0	4	;
water	70:8	0:0	4	cmd
op	70:11	0:0	4	.
water	70:12	0:0	4	msg
op	70:15	0:0	4	[
water	70:16	0:0	4	3
op	70:17	0:0	4	]
op	70:19	0:0	4	=
water	70:21	0:0	4	0
water	70:22	0:0	4	xF0
op	71:19	0:0	4	|
water	71:21	0:0	4	(
water	71:22	0:0	4	satno
op	71:28	0:0	4	<<
water	71:31	0:0	4	2
water	71:32	0:0	4	)
op	72:19	0:0	4	|
water	72:21	0:0	4	(
water	72:22	0:0	4	(
water	72:23	0:0	4	voltage
op	72:31	0:0	4	==
water	72:34	0:0	4	SEC_VOLTAGE_18
water	72:48	0:0	4	)
op	72:50	0:0	4	<<
water	72:53	0:0	4	1
water	72:54	0:0	4	)
op	73:19	0:0	4	|
water	73:21	0:0	4	(
water	73:22	0:0	4	tone
op	73:27	0:0	4	==
water	73:30	0:0	4	SEC_TONE_ON
water	73:41	0:0	4	)
water	73:42	0:0	4	;
water	74:8	0:0	4	cmd
op	74:11	0:0	4	.
water	74:12	0:0	4	msg
op	74:15	0:0	4	[
water	74:16	0:0	4	4
op	74:17	0:0	4	]
op	74:19	0:0	4	=
water	74:21	0:0	4	cmd
op	74:24	0:0	4	.
water	74:25	0:0	4	msg
op	74:28	0:0	4	[
water	74:29	0:0	4	5
op	74:30	0:0	4	]
op	74:32	0:0	4	=
water	74:34	0:0	4	0
water	74:35	0:0	4	;
water	75:8	0:0	4	cmd
op	75:11	0:0	4	.
water	75:12	0:0	4	msg_len
op	75:20	0:0	4	=
water	75:22	0:0	4	4
water	75:23	0:0	4	;
call	76:8	76:21	4	msleep
arg	76:16	76:21	5	15000
water	76:16	0:0	6	15000
water	76:22	0:0	4	;
water	77:8	0:0	4	unsigned
water	77:17	0:0	4	uncommitted
op	77:29	0:0	4	=
call	77:31	77:76	4	var_InheritInteger
arg	77:51	77:57	5	d->obj
water	77:51	0:0	6	d
op	77:52	0:0	6	->
water	77:54	0:0	6	obj
arg	77:59	77:76	5	"dvb-uncommitted"
water	77:59	0:0	6	"dvb-uncommitted"
water	77:77	0:0	4	;
if	78:8	106:8	4	(uncommitted > 0)
cond	78:12	78:26	5	uncommitted > 0
water	78:12	0:0	6	uncommitted
op	78:24	0:0	6	>
water	78:26	0:0	6	0
stmts	79:8	106:8	5	
water	79:8	0:0	6	{
water	80:10	0:0	6	uncommitted
op	80:22	0:0	6	=
water	80:24	0:0	6	(
water	80:25	0:0	6	uncommitted
op	80:37	0:0	6	-
water	80:39	0:0	6	1
water	80:40	0:0	6	)
op	80:42	0:0	6	&
water	80:44	0:0	6	3
water	80:45	0:0	6	;
water	81:10	0:0	6	uncmd
op	81:15	0:0	6	.
water	81:16	0:0	6	msg
op	81:19	0:0	6	[
water	81:20	0:0	6	0
op	81:21	0:0	6	]
op	81:23	0:0	6	=
water	81:25	0:0	6	0
water	81:26	0:0	6	xE0
water	81:29	0:0	6	;
water	82:10	0:0	6	uncmd
op	82:15	0:0	6	.
water	82:16	0:0	6	msg
op	82:19	0:0	6	[
water	82:20	0:0	6	1
op	82:21	0:0	6	]
op	82:23	0:0	6	=
water	82:25	0:0	6	0
water	82:26	0:0	6	x10
water	82:29	0:0	6	;
water	83:10	0:0	6	uncmd
op	83:15	0:0	6	.
water	83:16	0:0	6	msg
op	83:19	0:0	6	[
water	83:20	0:0	6	2
op	83:21	0:0	6	]
op	83:23	0:0	6	=
water	83:25	0:0	6	0
water	83:26	0:0	6	x39
water	83:29	0:0	6	;
water	84:10	0:0	6	uncmd
op	84:15	0:0	6	.
water	84:16	0:0	6	msg
op	84:19	0:0	6	[
water	84:20	0:0	6	3
op	84:21	0:0	6	]
op	84:23	0:0	6	=
water	84:25	0:0	6	0
water	84:26	0:0	6	xF0
op	85:23	0:0	6	|
water	85:25	0:0	6	(
water	85:26	0:0	6	uncommitted
op	85:38	0:0	6	<<
water	85:41	0:0	6	2
water	85:42	0:0	6	)
op	86:23	0:0	6	|
water	86:25	0:0	6	(
water	86:26	0:0	6	(
water	86:27	0:0	6	voltage
op	86:35	0:0	6	==
water	86:38	0:0	6	SEC_VOLTAGE_18
water	86:52	0:0	6	)
op	86:54	0:0	6	<<
water	86:57	0:0	6	1
water	86:58	0:0	6	)
op	87:23	0:0	6	|
water	87:25	0:0	6	(
water	87:26	0:0	6	tone
op	87:31	0:0	6	==
water	87:34	0:0	6	SEC_TONE_ON
water	87:45	0:0	6	)
water	87:46	0:0	6	;
water	88:10	0:0	6	uncmd
op	88:15	0:0	6	.
water	88:16	0:0	6	msg
op	88:19	0:0	6	[
water	88:20	0:0	6	4
op	88:21	0:0	6	]
op	88:23	0:0	6	=
water	88:25	0:0	6	uncmd
op	88:30	0:0	6	.
water	88:31	0:0	6	msg
op	88:34	0:0	6	[
water	88:35	0:0	6	5
op	88:36	0:0	6	]
op	88:38	0:0	6	=
water	88:40	0:0	6	0
water	88:41	0:0	6	;
water	89:10	0:0	6	uncmd
op	89:15	0:0	6	.
water	89:16	0:0	6	msg_len
op	89:24	0:0	6	=
water	89:26	0:0	6	4
water	89:27	0:0	6	;
if	90:10	95:10	6	(ioctl (d -> frontend ,FE_DISEQC_SEND_MASTER_CMD ,& uncmd ) < 0)
cond	90:14	90:71	7	ioctl (d -> frontend ,FE_DISEQC_SEND_MASTER_CMD ,& uncmd ) < 0
call	90:14	90:67	8	ioctl
arg	90:21	90:32	9	d->frontend
water	90:21	0:0	10	d
op	90:22	0:0	10	->
water	90:24	0:0	10	frontend
arg	90:34	90:59	9	FE_DISEQC_SEND_MASTER_CMD
water	90:34	0:0	10	FE_DISEQC_SEND_MASTER_CMD
arg	90:61	90:67	9	&uncmd
op	90:61	0:0	10	&
water	90:62	0:0	10	uncmd
op	90:69	0:0	8	<
water	90:71	0:0	8	0
stmts	91:10	95:10	7	
water	91:10	0:0	8	{
call	92:14	93:44	8	msg_Err
arg	92:23	92:29	9	d->obj
water	92:23	0:0	10	d
op	92:24	0:0	10	->
water	92:26	0:0	10	obj
arg	92:31	92:75	9	"cannot send uncommitted DiSEqC command: %s"
water	92:31	0:0	10	"cannot send uncommitted DiSEqC command: %s"
arg	93:23	93:44	9	vlc_strerror_c(errno)
call	93:23	93:43	10	vlc_strerror_c
arg	93:38	93:43	11	errno
water	93:38	0:0	12	errno
water	93:45	0:0	8	;
return	94:14	94:23	8	-1
op	94:21	0:0	9	-
water	94:22	0:0	9	1
water	95:10	0:0	8	}
water	97:10	0:0	6	uncmd
op	97:15	0:0	6	.
water	97:16	0:0	6	msg
op	97:19	0:0	6	[
water	97:20	0:0	6	0
op	97:21	0:0	6	]
op	97:23	0:0	6	=
water	97:25	0:0	6	0
water	97:26	0:0	6	xE1
water	97:29	0:0	6	;
if	98:10	104:10	6	(ioctl (d -> frontend ,FE_DISEQC_SEND_MASTER_CMD ,& uncmd ) < 0)
cond	98:14	98:71	7	ioctl (d -> frontend ,FE_DISEQC_SEND_MASTER_CMD ,& uncmd ) < 0
call	98:14	98:67	8	ioctl
arg	98:21	98:32	9	d->frontend
water	98:21	0:0	10	d
op	98:22	0:0	10	->
water	98:24	0:0	10	frontend
arg	98:34	98:59	9	FE_DISEQC_SEND_MASTER_CMD
water	98:34	0:0	10	FE_DISEQC_SEND_MASTER_CMD
arg	98:61	98:67	9	&uncmd
op	98:61	0:0	10	&
water	98:62	0:0	10	uncmd
op	98:69	0:0	8	<
water	98:71	0:0	8	0
stmts	99:10	104:10	7	
water	99:10	0:0	8	{
call	100:14	102:44	8	msg_Err
arg	100:23	100:29	9	d->obj
water	100:23	0:0	10	d
op	100:24	0:0	10	->
water	100:26	0:0	10	obj
arg	101:23	101:76	9	"cannot send repeated uncommitted DiSEqC command: %s"
water	101:23	0:0	10	"cannot send repeated uncommitted DiSEqC command: %s"
arg	102:23	102:44	9	vlc_strerror_c(errno)
call	102:23	102:43	10	vlc_strerror_c
arg	102:38	102:43	11	errno
water	102:38	0:0	12	errno
water	102:45	0:0	8	;
return	103:14	103:23	8	-1
op	103:21	0:0	9	-
water	103:22	0:0	9	1
water	104:10	0:0	8	}
call	105:10	105:23	6	msleep
arg	105:17	105:23	7	125000
water	105:17	0:0	8	125000
water	105:24	0:0	6	;
water	106:8	0:0	6	}
if	107:8	112:8	4	(ioctl (d -> frontend ,FE_DISEQC_SEND_MASTER_CMD ,& cmd ) < 0)
cond	107:12	107:67	5	ioctl (d -> frontend ,FE_DISEQC_SEND_MASTER_CMD ,& cmd ) < 0
call	107:12	107:63	6	ioctl
arg	107:19	107:30	7	d->frontend
water	107:19	0:0	8	d
op	107:20	0:0	8	->
water	107:22	0:0	8	frontend
arg	107:32	107:57	7	FE_DISEQC_SEND_MASTER_CMD
water	107:32	0:0	8	FE_DISEQC_SEND_MASTER_CMD
arg	107:59	107:63	7	&cmd
op	107:59	0:0	8	&
water	107:60	0:0	8	cmd
op	107:65	0:0	6	<
water	107:67	0:0	6	0
stmts	108:8	112:8	5	
water	108:8	0:0	6	{
call	109:12	110:42	6	msg_Err
arg	109:21	109:27	7	d->obj
water	109:21	0:0	8	d
op	109:22	0:0	8	->
water	109:24	0:0	8	obj
arg	109:29	109:71	7	"cannot send committed DiSEqC command: %s"
water	109:29	0:0	8	"cannot send committed DiSEqC command: %s"
arg	110:21	110:42	7	vlc_strerror_c(errno)
call	110:21	110:41	8	vlc_strerror_c
arg	110:36	110:41	9	errno
water	110:36	0:0	10	errno
water	110:43	0:0	6	;
return	111:12	111:21	6	-1
op	111:19	0:0	7	-
water	111:20	0:0	7	1
water	112:8	0:0	6	}
call	113:8	113:29	4	msleep
arg	113:16	113:29	5	54000+15000
water	113:16	0:0	6	54000
op	113:22	0:0	6	+
water	113:24	0:0	6	15000
water	113:30	0:0	4	;
water	115:8	0:0	4	satno
op	115:14	0:0	4	&=
water	115:17	0:0	4	1
water	115:18	0:0	4	;
if	116:8	122:8	4	(ioctl (d -> frontend ,FE_DISEQC_SEND_BURST ,satno ? SEC_MINI_B : SEC_MINI_A ) < 0)
cond	116:12	117:54	5	ioctl (d -> frontend ,FE_DISEQC_SEND_BURST ,satno ? SEC_MINI_B : SEC_MINI_A ) < 0
call	116:12	117:50	6	ioctl
arg	116:19	116:30	7	d->frontend
water	116:19	0:0	8	d
op	116:20	0:0	8	->
water	116:22	0:0	8	frontend
arg	116:32	116:52	7	FE_DISEQC_SEND_BURST
water	116:32	0:0	8	FE_DISEQC_SEND_BURST
arg	117:19	117:50	7	satno?SEC_MINI_B:SEC_MINI_A
water	117:19	0:0	8	satno
water	117:25	0:0	8	?
water	117:27	0:0	8	SEC_MINI_B
water	117:38	0:0	8	:
water	117:40	0:0	8	SEC_MINI_A
op	117:52	0:0	6	<
water	117:54	0:0	6	0
stmts	118:8	122:8	5	
water	118:8	0:0	6	{
call	119:12	120:42	6	msg_Err
arg	119:21	119:27	7	d->obj
water	119:21	0:0	8	d
op	119:22	0:0	8	->
water	119:24	0:0	8	obj
arg	119:29	119:69	7	"cannot send Mini-DiSEqC tone burst: %s"
water	119:29	0:0	8	"cannot send Mini-DiSEqC tone burst: %s"
arg	120:21	120:42	7	vlc_strerror_c(errno)
call	120:21	120:41	8	vlc_strerror_c
arg	120:36	120:41	9	errno
water	120:36	0:0	10	errno
water	120:43	0:0	6	;
return	121:12	121:21	6	-1
op	121:19	0:0	7	-
water	121:20	0:0	7	1
water	122:8	0:0	6	}
call	123:8	123:21	4	msleep
arg	123:16	123:21	5	15000
water	123:16	0:0	6	15000
water	123:22	0:0	4	;
water	124:4	0:0	4	}
return	126:4	126:68	2	dvb_set_props(d,2,DTV_FREQUENCY,freq,DTV_TONE,tone)
call	126:11	126:67	3	dvb_set_props
arg	126:26	126:27	4	d
water	126:26	0:0	5	d
arg	126:29	126:30	4	2
water	126:29	0:0	5	2
arg	126:32	126:45	4	DTV_FREQUENCY
water	126:32	0:0	5	DTV_FREQUENCY
arg	126:47	126:51	4	freq
water	126:47	0:0	5	freq
arg	126:53	126:61	4	DTV_TONE
water	126:53	0:0	5	DTV_TONE
arg	126:63	126:67	4	tone
water	126:63	0:0	5	tone
