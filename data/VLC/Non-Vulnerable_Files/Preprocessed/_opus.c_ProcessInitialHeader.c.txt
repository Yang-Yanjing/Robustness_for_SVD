func	2:0	59:0	0	static int	ProcessInitialHeader
params	2:31	0:0	1	
param	2:33	2:49	2	decoder_t *	p_dec
param	2:51	2:75	2	ogg_packet *	p_oggpacket
stmnts	0:0	58:22	1	
decl	4:4	4:11	2	int	err
decl	5:4	5:35	2	unsigned char	new_stream_map[8]
decl	6:4	6:39	2	decoder_sys_t	*p_sys
op	6:25	0:0	2	=
water	6:27	0:0	2	p_dec
op	6:32	0:0	2	->
water	6:34	0:0	2	p_sys
decl	7:4	7:41	2	OpusHeader	*p_header
op	7:25	0:0	2	=
op	7:27	0:0	2	&
water	7:28	0:0	2	p_sys
op	7:33	0:0	2	->
water	7:35	0:0	2	header
if	8:4	12:4	2	(!opus_header_parse (( unsigned char * ) p_oggpacket -> packet ,p_oggpacket -> bytes ,p_header ))
cond	8:8	8:91	3	!opus_header_parse (( unsigned char * ) p_oggpacket -> packet ,p_oggpacket -> bytes ,p_header )
op	8:8	0:0	4	!
call	8:9	8:91	4	opus_header_parse
arg	8:27	8:63	5	(unsignedchar*)p_oggpacket->packet
water	8:27	0:0	6	(
water	8:28	0:0	6	unsigned
water	8:37	0:0	6	char
op	8:42	0:0	6	*
water	8:43	0:0	6	)
water	8:44	0:0	6	p_oggpacket
op	8:55	0:0	6	->
water	8:57	0:0	6	packet
arg	8:64	8:82	5	p_oggpacket->bytes
water	8:64	0:0	6	p_oggpacket
op	8:75	0:0	6	->
water	8:77	0:0	6	bytes
arg	8:83	8:91	5	p_header
water	8:83	0:0	6	p_header
stmts	9:4	12:4	3	
water	9:4	0:0	4	{
call	10:8	10:50	4	msg_Err
arg	10:17	10:22	5	p_dec
water	10:17	0:0	6	p_dec
arg	10:24	10:50	5	"cannot read Opus header"
water	10:24	0:0	6	"cannot read Opus header"
water	10:51	0:0	4	;
return	11:8	11:27	4	VLC_EGENERIC
water	11:15	0:0	5	VLC_EGENERIC
water	12:4	0:0	4	}
call	13:4	13:69	2	msg_Dbg
arg	13:13	13:18	3	p_dec
water	13:13	0:0	4	p_dec
arg	13:20	13:49	3	"Opus audio with %d channels"
water	13:20	0:0	4	"Opus audio with %d channels"
arg	13:51	13:69	3	p_header->channels
water	13:51	0:0	4	p_header
op	13:59	0:0	4	->
water	13:61	0:0	4	channels
water	13:70	0:0	2	;
if	14:4	20:4	2	(( p_header -> channels > 2 && p_header -> channel_mapping == 0 ) || p_header -> channels > 8 || p_header -> channel_mapping > 1)
cond	14:7	16:34	3	( p_header -> channels > 2 && p_header -> channel_mapping == 0 ) || p_header -> channels > 8 || p_header -> channel_mapping > 1
water	14:7	0:0	4	(
water	14:8	0:0	4	p_header
op	14:16	0:0	4	->
water	14:18	0:0	4	channels
op	14:26	0:0	4	>
water	14:27	0:0	4	2
op	14:29	0:0	4	&&
water	14:32	0:0	4	p_header
op	14:40	0:0	4	->
water	14:42	0:0	4	channel_mapping
op	14:57	0:0	4	==
water	14:59	0:0	4	0
water	14:60	0:0	4	)
op	14:62	0:0	4	||
water	15:8	0:0	4	p_header
op	15:16	0:0	4	->
water	15:18	0:0	4	channels
op	15:26	0:0	4	>
water	15:27	0:0	4	8
op	15:29	0:0	4	||
water	16:8	0:0	4	p_header
op	16:16	0:0	4	->
water	16:18	0:0	4	channel_mapping
op	16:33	0:0	4	>
water	16:34	0:0	4	1
stmts	17:4	20:4	3	
water	17:4	0:0	4	{
call	18:8	18:54	4	msg_Err
arg	18:17	18:22	5	p_dec
water	18:17	0:0	6	p_dec
arg	18:24	18:54	5	"Unsupported channel mapping"
water	18:24	0:0	6	"Unsupported channel mapping"
water	18:55	0:0	4	;
return	19:8	19:27	4	VLC_EGENERIC
water	19:15	0:0	5	VLC_EGENERIC
water	20:4	0:0	4	}
water	22:4	0:0	2	p_dec
op	22:9	0:0	2	->
water	22:11	0:0	2	fmt_out
op	22:18	0:0	2	.
water	22:19	0:0	2	audio
op	22:24	0:0	2	.
water	22:25	0:0	2	i_physical_channels
op	22:45	0:0	2	=
water	23:8	0:0	2	p_dec
op	23:13	0:0	2	->
water	23:15	0:0	2	fmt_out
op	23:22	0:0	2	.
water	23:23	0:0	2	audio
op	23:28	0:0	2	.
water	23:29	0:0	2	i_original_channels
op	23:49	0:0	2	=
water	24:12	0:0	2	pi_channels_maps
op	24:28	0:0	2	[
water	24:29	0:0	2	p_header
op	24:37	0:0	2	->
water	24:39	0:0	2	channels
op	24:47	0:0	2	]
water	24:48	0:0	2	;
water	25:4	0:0	2	p_dec
op	25:9	0:0	2	->
water	25:11	0:0	2	fmt_out
op	25:18	0:0	2	.
water	25:19	0:0	2	audio
op	25:24	0:0	2	.
water	25:25	0:0	2	i_channels
op	25:36	0:0	2	=
water	25:38	0:0	2	p_header
op	25:46	0:0	2	->
water	25:48	0:0	2	channels
water	25:56	0:0	2	;
water	26:4	0:0	2	p_dec
op	26:9	0:0	2	->
water	26:11	0:0	2	fmt_out
op	26:18	0:0	2	.
water	26:19	0:0	2	audio
op	26:24	0:0	2	.
water	26:25	0:0	2	i_rate
op	26:32	0:0	2	=
water	26:34	0:0	2	48000
water	26:39	0:0	2	;
if	27:4	38:4	2	(p_header -> channels > 2)
cond	27:8	27:27	3	p_header -> channels > 2
water	27:8	0:0	4	p_header
op	27:16	0:0	4	->
water	27:18	0:0	4	channels
op	27:26	0:0	4	>
water	27:27	0:0	4	2
stmts	28:4	38:4	3	
water	28:4	0:0	4	{
water	29:8	0:0	4	static
water	29:15	0:0	4	const
water	29:21	0:0	4	uint32_t
op	29:30	0:0	4	*
water	29:31	0:0	4	pi_ch
op	29:36	0:0	4	[
water	29:37	0:0	4	6
op	29:38	0:0	4	]
op	29:40	0:0	4	=
water	29:42	0:0	4	{
water	29:44	0:0	4	pi_3channels_in
water	29:59	0:0	4	,
water	29:61	0:0	4	pi_4channels_in
water	29:76	0:0	4	,
water	30:44	0:0	4	pi_5channels_in
water	30:59	0:0	4	,
water	30:61	0:0	4	pi_6channels_in
water	30:76	0:0	4	,
water	31:44	0:0	4	pi_7channels_in
water	31:59	0:0	4	,
water	31:61	0:0	4	pi_8channels_in
water	31:77	0:0	4	}
water	31:78	0:0	4	;
decl	32:8	32:44	4	uint8_t	pi_chan_table[AOUT_CHAN_MAX]
call	33:8	35:48	4	aout_CheckChannelReorder
arg	33:34	33:61	5	pi_ch[p_header->channels-3]
water	33:34	0:0	6	pi_ch
op	33:39	0:0	6	[
water	33:40	0:0	6	p_header
op	33:48	0:0	6	->
water	33:50	0:0	6	channels
op	33:58	0:0	6	-
water	33:59	0:0	6	3
op	33:60	0:0	6	]
arg	33:63	33:67	5	NULL
water	33:63	0:0	6	NULL
arg	34:34	34:74	5	p_dec->fmt_out.audio.i_physical_channels
water	34:34	0:0	6	p_dec
op	34:39	0:0	6	->
water	34:41	0:0	6	fmt_out
op	34:48	0:0	6	.
water	34:49	0:0	6	audio
op	34:54	0:0	6	.
water	34:55	0:0	6	i_physical_channels
arg	35:34	35:48	5	pi_chan_table
water	35:34	0:0	6	pi_chan_table
water	35:49	0:0	4	;
for	36:8	37:68	4	( int i = 0 ;i < p_header -> channels;i ++)
forinit	0:0	36:19	5	 int i = 0 ;
decl	36:12	36:19	6	int	i
op	36:17	0:0	6	=
water	36:18	0:0	6	0
cond	36:20	36:32	5	i < p_header -> channels
water	36:20	0:0	6	i
op	36:21	0:0	6	<
water	36:22	0:0	6	p_header
op	36:30	0:0	6	->
water	36:32	0:0	6	channels
forexpr	36:41	36:42	5	i ++
water	36:41	0:0	6	i
op	36:42	0:0	6	++
stmts	37:12	37:68	5	
water	37:12	0:0	6	new_stream_map
op	37:26	0:0	6	[
water	37:27	0:0	6	pi_chan_table
op	37:40	0:0	6	[
water	37:41	0:0	6	i
op	37:42	0:0	6	]
op	37:43	0:0	6	]
op	37:44	0:0	6	=
water	37:45	0:0	6	p_header
op	37:53	0:0	6	->
water	37:55	0:0	6	stream_map
op	37:65	0:0	6	[
water	37:66	0:0	6	i
op	37:67	0:0	6	]
water	37:68	0:0	6	;
water	38:4	0:0	4	}
water	40:4	0:0	2	p_sys
op	40:9	0:0	2	->
water	40:11	0:0	2	p_st
op	40:16	0:0	2	=
call	40:18	43:25	2	opus_multistream_decoder_create
arg	40:51	40:56	3	48000
water	40:51	0:0	4	48000
arg	40:58	40:76	3	p_header->channels
water	40:58	0:0	4	p_header
op	40:66	0:0	4	->
water	40:68	0:0	4	channels
arg	41:20	41:40	3	p_header->nb_streams
water	41:20	0:0	4	p_header
op	41:28	0:0	4	->
water	41:30	0:0	4	nb_streams
arg	41:42	41:62	3	p_header->nb_coupled
water	41:42	0:0	4	p_header
op	41:50	0:0	4	->
water	41:52	0:0	4	nb_coupled
arg	42:20	42:76	3	p_header->channels>2?new_stream_map:p_header->stream_map
water	42:20	0:0	4	p_header
op	42:28	0:0	4	->
water	42:30	0:0	4	channels
op	42:38	0:0	4	>
water	42:39	0:0	4	2
water	42:40	0:0	4	?
water	42:41	0:0	4	new_stream_map
water	42:55	0:0	4	:
water	42:56	0:0	4	p_header
op	42:64	0:0	4	->
water	42:66	0:0	4	stream_map
arg	43:20	43:25	3	&err
op	43:20	0:0	4	&
water	43:21	0:0	4	err
water	43:26	0:0	2	;
if	44:4	48:4	2	(! p_sys -> p_st || err != OPUS_OK)
cond	44:8	44:29	3	! p_sys -> p_st || err != OPUS_OK
op	44:8	0:0	4	!
water	44:9	0:0	4	p_sys
op	44:14	0:0	4	->
water	44:16	0:0	4	p_st
op	44:21	0:0	4	||
water	44:24	0:0	4	err
op	44:27	0:0	4	!=
water	44:29	0:0	4	OPUS_OK
stmts	45:4	48:4	3	
water	45:4	0:0	4	{
call	46:8	46:56	4	msg_Err
arg	46:17	46:22	5	p_dec
water	46:17	0:0	6	p_dec
arg	46:24	46:56	5	"decoder initialization failed"
water	46:24	0:0	6	"decoder initialization failed"
water	46:57	0:0	4	;
return	47:8	47:27	4	VLC_EGENERIC
water	47:15	0:0	5	VLC_EGENERIC
water	48:4	0:0	4	}
if	50:4	55:4	2	(opus_multistream_decoder_ctl (p_sys -> p_st ,OPUS_SET_GAIN (p_header -> gain ) ) != OPUS_OK)
cond	50:8	50:85	3	opus_multistream_decoder_ctl (p_sys -> p_st ,OPUS_SET_GAIN (p_header -> gain ) ) != OPUS_OK
call	50:8	50:80	4	opus_multistream_decoder_ctl
arg	50:38	50:49	5	p_sys->p_st
water	50:38	0:0	6	p_sys
op	50:43	0:0	6	->
water	50:45	0:0	6	p_st
arg	50:50	50:80	5	OPUS_SET_GAIN(p_header->gain)
call	50:50	50:78	6	OPUS_SET_GAIN
arg	50:64	50:78	7	p_header->gain
water	50:64	0:0	8	p_header
op	50:72	0:0	8	->
water	50:74	0:0	8	gain
op	50:82	0:0	4	!=
water	50:85	0:0	4	OPUS_OK
stmts	51:4	55:4	3	
water	51:4	0:0	4	{
call	52:8	52:47	4	msg_Err
arg	52:17	52:22	5	p_dec
water	52:17	0:0	6	p_dec
arg	52:24	52:47	5	"OPUS_SET_GAIN failed"
water	52:24	0:0	6	"OPUS_SET_GAIN failed"
water	52:48	0:0	4	;
call	53:8	53:54	4	opus_multistream_decoder_destroy
arg	53:42	53:54	5	p_sys->p_st
water	53:42	0:0	6	p_sys
op	53:47	0:0	6	->
water	53:49	0:0	6	p_st
water	53:55	0:0	4	;
return	54:8	54:27	4	VLC_EGENERIC
water	54:15	0:0	5	VLC_EGENERIC
water	55:4	0:0	4	}
call	57:4	57:42	2	date_Init
arg	57:15	57:31	3	&p_sys->end_date
op	57:15	0:0	4	&
water	57:16	0:0	4	p_sys
op	57:21	0:0	4	->
water	57:23	0:0	4	end_date
arg	57:33	57:38	3	48000
water	57:33	0:0	4	48000
arg	57:40	57:42	3	1
water	57:40	0:0	4	1
water	57:43	0:0	2	;
return	58:4	58:22	2	VLC_SUCCESS
water	58:11	0:0	3	VLC_SUCCESS
