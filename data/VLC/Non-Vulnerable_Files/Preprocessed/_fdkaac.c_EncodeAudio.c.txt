func	2:0	127:0	0	static block_t *	EncodeAudio
params	2:27	0:0	1	
param	2:28	2:44	2	encoder_t *	p_enc
param	2:46	2:65	2	block_t *	p_aout_buf
stmnts	0:0	126:18	1	
decl	4:4	4:21	2	int16_t	*p_buffer
decl	5:4	5:17	2	int	i_samples
decl	6:4	6:21	2	mtime_t	i_pts_out
decl	7:4	7:39	2	encoder_sys_t	*p_sys
op	7:25	0:0	2	=
water	7:27	0:0	2	p_enc
op	7:32	0:0	2	->
water	7:34	0:0	2	p_sys
if	8:4	18:4	2	(likely (p_aout_buf ))
cond	8:8	8:25	3	likely (p_aout_buf )
call	8:8	8:25	4	likely
arg	8:15	8:25	5	p_aout_buf
water	8:15	0:0	6	p_aout_buf
stmts	8:28	18:4	3	
water	8:28	0:0	4	{
water	9:8	0:0	4	p_buffer
op	9:17	0:0	4	=
water	9:19	0:0	4	(
water	9:20	0:0	4	int16_t
op	9:28	0:0	4	*
water	9:29	0:0	4	)
water	9:30	0:0	4	p_aout_buf
op	9:40	0:0	4	->
water	9:42	0:0	4	p_buffer
water	9:50	0:0	4	;
water	10:8	0:0	4	i_samples
op	10:18	0:0	4	=
water	10:20	0:0	4	p_aout_buf
op	10:30	0:0	4	->
water	10:32	0:0	4	i_nb_samples
water	10:44	0:0	4	;
water	11:8	0:0	4	i_pts_out
op	11:18	0:0	4	=
water	11:20	0:0	4	p_aout_buf
op	11:30	0:0	4	->
water	11:32	0:0	4	i_pts
op	11:38	0:0	4	-
call	11:40	13:50	4	(mtime_t)
arg	11:50	13:50	5	(double)CLOCK_FREQ*(double)p_sys->i_encoderdelay/(double)p_enc->fmt_out.audio.i_rate
water	11:50	0:0	6	(
water	11:51	0:0	6	double
water	11:57	0:0	6	)
water	11:58	0:0	6	CLOCK_FREQ
op	11:69	0:0	6	*
water	12:15	0:0	6	(
water	12:16	0:0	6	double
water	12:22	0:0	6	)
water	12:23	0:0	6	p_sys
op	12:28	0:0	6	->
water	12:30	0:0	6	i_encoderdelay
op	12:45	0:0	6	/
water	13:15	0:0	6	(
water	13:16	0:0	6	double
water	13:22	0:0	6	)
water	13:23	0:0	6	p_enc
op	13:28	0:0	6	->
water	13:30	0:0	6	fmt_out
op	13:37	0:0	6	.
water	13:38	0:0	6	audio
op	13:43	0:0	6	.
water	13:44	0:0	6	i_rate
water	13:51	0:0	4	;
if	14:8	17:51	4	(p_sys -> i_pts_last == 0)
cond	14:12	14:33	5	p_sys -> i_pts_last == 0
water	14:12	0:0	6	p_sys
op	14:17	0:0	6	->
water	14:19	0:0	6	i_pts_last
op	14:30	0:0	6	==
water	14:33	0:0	6	0
stmts	15:12	17:51	5	
water	15:12	0:0	6	p_sys
op	15:17	0:0	6	->
water	15:19	0:0	6	i_pts_last
op	15:30	0:0	6	=
water	15:32	0:0	6	i_pts_out
op	15:42	0:0	6	-
call	15:44	17:50	6	(mtime_t)
arg	15:54	17:50	7	(double)CLOCK_FREQ*(double)(p_sys->i_frame_size)/(double)p_enc->fmt_out.audio.i_rate
water	15:54	0:0	8	(
water	15:55	0:0	8	double
water	15:61	0:0	8	)
water	15:62	0:0	8	CLOCK_FREQ
call	15:73	16:43	8	*(double)
arg	16:24	16:43	9	p_sys->i_frame_size
water	16:24	0:0	10	p_sys
op	16:29	0:0	10	->
water	16:31	0:0	10	i_frame_size
op	16:45	0:0	8	/
water	17:15	0:0	8	(
water	17:16	0:0	8	double
water	17:22	0:0	8	)
water	17:23	0:0	8	p_enc
op	17:28	0:0	8	->
water	17:30	0:0	8	fmt_out
op	17:37	0:0	8	.
water	17:38	0:0	8	audio
op	17:43	0:0	8	.
water	17:44	0:0	8	i_rate
water	17:51	0:0	6	;
water	18:4	0:0	4	}
else	18:6	21:4	2
stmts	18:11	21:4	3	
water	18:11	0:0	4	{
water	19:8	0:0	4	i_samples
op	19:18	0:0	4	=
water	19:20	0:0	4	0
water	19:21	0:0	4	;
water	20:8	0:0	4	i_pts_out
op	20:18	0:0	4	=
water	20:20	0:0	4	p_sys
op	20:25	0:0	4	->
water	20:27	0:0	4	i_pts_last
water	20:37	0:0	4	;
water	21:4	0:0	4	}
decl	22:4	22:34	2	int	i_samples_left
op	22:23	0:0	2	=
water	22:25	0:0	2	i_samples
decl	23:4	23:24	2	int	i_loop_count
op	23:21	0:0	2	=
water	23:23	0:0	2	0
decl	24:4	24:27	2	block_t	*p_chain
op	24:21	0:0	2	=
water	24:23	0:0	2	NULL
while	25:4	125:4	2	(i_samples_left >= 0)
cond	25:11	25:29	3	i_samples_left >= 0
water	25:11	0:0	4	i_samples_left
op	25:26	0:0	4	>=
water	25:29	0:0	4	0
stmts	25:32	125:4	3	
water	25:32	0:0	4	{
decl	26:8	26:54	4	AACENC_BufDesc	in_buf
op	26:30	0:0	4	=
water	26:32	0:0	4	{
water	26:34	0:0	4	0
water	26:36	0:0	4	}
water	26:37	0:0	4	,
decl	26:8	26:54	4	AACENC_BufDesc	out_buf
op	26:47	0:0	4	=
water	26:49	0:0	4	{
water	26:51	0:0	4	0
water	26:53	0:0	4	}
decl	27:8	27:37	4	AACENC_InArgs	in_args
op	27:30	0:0	4	=
water	27:32	0:0	4	{
water	27:34	0:0	4	0
water	27:36	0:0	4	}
decl	28:8	28:39	4	AACENC_OutArgs	out_args
op	28:32	0:0	4	=
water	28:34	0:0	4	{
water	28:36	0:0	4	0
water	28:38	0:0	4	}
decl	29:8	29:41	4	int	in_identifier
op	29:26	0:0	4	=
water	29:28	0:0	4	IN_AUDIO_DATA
decl	30:8	30:33	4	int	in_size
water	30:19	0:0	4	,
decl	30:8	30:33	4	int	in_elem_size
decl	31:8	31:47	4	int	out_identifier
op	31:27	0:0	4	=
water	31:29	0:0	4	OUT_BITSTREAM_DATA
decl	32:8	32:35	4	int	out_size
water	32:20	0:0	4	,
decl	32:8	32:35	4	int	out_elem_size
decl	33:8	33:30	4	void	*in_ptr
water	33:20	0:0	4	,
decl	33:8	33:30	4	void	*out_ptr
if	34:8	37:8	4	(unlikely (i_samples == 0 ))
cond	34:12	34:35	5	unlikely (i_samples == 0 )
call	34:12	34:35	6	unlikely
arg	34:21	34:35	7	i_samples==0
water	34:21	0:0	8	i_samples
op	34:31	0:0	8	==
water	34:34	0:0	8	0
stmts	34:38	37:8	5	
water	34:38	0:0	6	{
water	36:12	0:0	6	in_args
op	36:19	0:0	6	.
water	36:20	0:0	6	numInSamples
op	36:33	0:0	6	=
op	36:35	0:0	6	-
water	36:36	0:0	6	1
water	36:37	0:0	6	;
water	37:8	0:0	6	}
else	37:10	47:8	4
stmts	37:15	47:8	5	
water	37:15	0:0	6	{
water	38:12	0:0	6	in_ptr
op	38:19	0:0	6	=
water	38:21	0:0	6	p_buffer
op	38:30	0:0	6	+
water	38:32	0:0	6	(
water	38:33	0:0	6	i_samples
op	38:43	0:0	6	-
water	38:45	0:0	6	i_samples_left
water	38:59	0:0	6	)
op	38:60	0:0	6	*
water	38:61	0:0	6	p_enc
op	38:66	0:0	6	->
water	38:68	0:0	6	fmt_in
op	38:74	0:0	6	.
water	38:75	0:0	6	audio
op	38:80	0:0	6	.
water	38:81	0:0	6	i_channels
water	38:91	0:0	6	;
water	39:12	0:0	6	in_size
op	39:20	0:0	6	=
water	39:22	0:0	6	2
op	39:23	0:0	6	*
water	39:24	0:0	6	p_enc
op	39:29	0:0	6	->
water	39:31	0:0	6	fmt_in
op	39:37	0:0	6	.
water	39:38	0:0	6	audio
op	39:43	0:0	6	.
water	39:44	0:0	6	i_channels
op	39:54	0:0	6	*
water	39:55	0:0	6	i_samples_left
water	39:69	0:0	6	;
water	40:12	0:0	6	in_elem_size
op	40:25	0:0	6	=
water	40:27	0:0	6	2
water	40:28	0:0	6	;
water	41:12	0:0	6	in_args
op	41:19	0:0	6	.
water	41:20	0:0	6	numInSamples
op	41:33	0:0	6	=
water	41:35	0:0	6	p_enc
op	41:40	0:0	6	->
water	41:42	0:0	6	fmt_in
op	41:48	0:0	6	.
water	41:49	0:0	6	audio
op	41:54	0:0	6	.
water	41:55	0:0	6	i_channels
op	41:65	0:0	6	*
water	41:66	0:0	6	i_samples_left
water	41:80	0:0	6	;
water	42:12	0:0	6	in_buf
op	42:18	0:0	6	.
water	42:19	0:0	6	numBufs
op	42:27	0:0	6	=
water	42:29	0:0	6	1
water	42:30	0:0	6	;
water	43:12	0:0	6	in_buf
op	43:18	0:0	6	.
water	43:19	0:0	6	bufs
op	43:24	0:0	6	=
op	43:26	0:0	6	&
water	43:27	0:0	6	in_ptr
water	43:33	0:0	6	;
water	44:12	0:0	6	in_buf
op	44:18	0:0	6	.
water	44:19	0:0	6	bufferIdentifiers
op	44:37	0:0	6	=
op	44:39	0:0	6	&
water	44:40	0:0	6	in_identifier
water	44:53	0:0	6	;
water	45:12	0:0	6	in_buf
op	45:18	0:0	6	.
water	45:19	0:0	6	bufSizes
op	45:28	0:0	6	=
op	45:30	0:0	6	&
water	45:31	0:0	6	in_size
water	45:38	0:0	6	;
water	46:12	0:0	6	in_buf
op	46:18	0:0	6	.
water	46:19	0:0	6	bufElSizes
op	46:30	0:0	6	=
op	46:32	0:0	6	&
water	46:33	0:0	6	in_elem_size
water	46:45	0:0	6	;
water	47:8	0:0	6	}
decl	48:8	48:24	4	block_t	*p_block
water	49:8	0:0	4	p_block
op	49:16	0:0	4	=
call	49:18	49:52	4	block_Alloc
arg	49:30	49:52	5	p_sys->i_maxoutputsize
water	49:30	0:0	6	p_sys
op	49:35	0:0	6	->
water	49:37	0:0	6	i_maxoutputsize
water	49:53	0:0	4	;
water	50:8	0:0	4	p_block
op	50:15	0:0	4	->
water	50:17	0:0	4	i_buffer
op	50:26	0:0	4	=
water	50:28	0:0	4	p_sys
op	50:33	0:0	4	->
water	50:35	0:0	4	i_maxoutputsize
water	50:50	0:0	4	;
water	51:8	0:0	4	out_ptr
op	51:16	0:0	4	=
water	51:18	0:0	4	p_block
op	51:25	0:0	4	->
water	51:27	0:0	4	p_buffer
water	51:35	0:0	4	;
water	52:8	0:0	4	out_size
op	52:17	0:0	4	=
water	52:19	0:0	4	p_block
op	52:26	0:0	4	->
water	52:28	0:0	4	i_buffer
water	52:36	0:0	4	;
water	53:8	0:0	4	out_elem_size
op	53:22	0:0	4	=
water	53:24	0:0	4	1
water	53:25	0:0	4	;
water	54:8	0:0	4	out_buf
op	54:15	0:0	4	.
water	54:16	0:0	4	numBufs
op	54:24	0:0	4	=
water	54:26	0:0	4	1
water	54:27	0:0	4	;
water	55:8	0:0	4	out_buf
op	55:15	0:0	4	.
water	55:16	0:0	4	bufs
op	55:21	0:0	4	=
op	55:23	0:0	4	&
water	55:24	0:0	4	out_ptr
water	55:31	0:0	4	;
water	56:8	0:0	4	out_buf
op	56:15	0:0	4	.
water	56:16	0:0	4	bufferIdentifiers
op	56:34	0:0	4	=
op	56:36	0:0	4	&
water	56:37	0:0	4	out_identifier
water	56:51	0:0	4	;
water	57:8	0:0	4	out_buf
op	57:15	0:0	4	.
water	57:16	0:0	4	bufSizes
op	57:25	0:0	4	=
op	57:27	0:0	4	&
water	57:28	0:0	4	out_size
water	57:36	0:0	4	;
water	58:8	0:0	4	out_buf
op	58:15	0:0	4	.
water	58:16	0:0	4	bufElSizes
op	58:27	0:0	4	=
op	58:29	0:0	4	&
water	58:30	0:0	4	out_elem_size
water	58:43	0:0	4	;
decl	59:8	59:27	4	AACENC_ERROR	erraac
if	60:8	68:8	4	(( erraac =aacEncEncode (p_sys -> handle ,& in_buf ,& out_buf ,& in_args ,& out_args ) ) != AACENC_OK)
cond	60:12	60:94	5	( erraac =aacEncEncode (p_sys -> handle ,& in_buf ,& out_buf ,& in_args ,& out_args ) ) != AACENC_OK
water	60:12	0:0	6	(
water	60:13	0:0	6	erraac
op	60:20	0:0	6	=
call	60:22	60:88	6	aacEncEncode
arg	60:35	60:48	7	p_sys->handle
water	60:35	0:0	8	p_sys
op	60:40	0:0	8	->
water	60:42	0:0	8	handle
arg	60:50	60:57	7	&in_buf
op	60:50	0:0	8	&
water	60:51	0:0	8	in_buf
arg	60:59	60:67	7	&out_buf
op	60:59	0:0	8	&
water	60:60	0:0	8	out_buf
arg	60:69	60:77	7	&in_args
op	60:69	0:0	8	&
water	60:70	0:0	8	in_args
arg	60:79	60:88	7	&out_args
op	60:79	0:0	8	&
water	60:80	0:0	8	out_args
water	60:89	0:0	6	)
op	60:91	0:0	6	!=
water	60:94	0:0	6	AACENC_OK
stmts	60:105	68:8	5	
water	60:105	0:0	6	{
if	61:12	63:12	6	(erraac == AACENC_ENCODE_EOF)
cond	61:16	61:26	7	erraac == AACENC_ENCODE_EOF
water	61:16	0:0	8	erraac
op	61:23	0:0	8	==
water	61:26	0:0	8	AACENC_ENCODE_EOF
stmts	61:45	63:12	7	
water	61:45	0:0	8	{
call	62:16	62:60	8	msg_Info
arg	62:25	62:30	9	p_enc
water	62:25	0:0	10	p_enc
arg	62:32	62:60	9	"Encoding final bytes (EOF)"
water	62:32	0:0	10	"Encoding final bytes (EOF)"
water	62:61	0:0	8	;
water	63:12	0:0	8	}
else	63:14	67:12	6
stmts	63:19	67:12	7	
water	63:19	0:0	8	{
call	64:16	64:74	8	msg_Err
arg	64:24	64:29	9	p_enc
water	64:24	0:0	10	p_enc
arg	64:31	64:52	9	"Encoding failed: %s"
water	64:31	0:0	10	"Encoding failed: %s"
arg	64:54	64:74	9	fdkaac_error(erraac)
call	64:54	64:73	10	fdkaac_error
arg	64:67	64:73	11	erraac
water	64:67	0:0	12	erraac
water	64:75	0:0	8	;
call	65:16	65:37	8	block_Release
arg	65:30	65:37	9	p_block
water	65:30	0:0	10	p_block
water	65:38	0:0	8	;
break	66:16	66:21	8	
water	67:12	0:0	8	}
water	68:8	0:0	6	}
if	69:8	116:8	4	(out_args . numOutBytes > 0)
cond	69:12	69:35	5	out_args . numOutBytes > 0
water	69:12	0:0	6	out_args
op	69:20	0:0	6	.
water	69:21	0:0	6	numOutBytes
op	69:33	0:0	6	>
water	69:35	0:0	6	0
stmts	69:38	116:8	5	
water	69:38	0:0	6	{
water	70:12	0:0	6	p_block
op	70:19	0:0	6	->
water	70:21	0:0	6	i_buffer
op	70:30	0:0	6	=
water	70:32	0:0	6	out_args
op	70:40	0:0	6	.
water	70:41	0:0	6	numOutBytes
water	70:52	0:0	6	;
if	71:12	80:12	6	(unlikely (i_samples == 0 ))
cond	71:16	71:39	7	unlikely (i_samples == 0 )
call	71:16	71:39	8	unlikely
arg	71:25	71:39	9	i_samples==0
water	71:25	0:0	10	i_samples
op	71:35	0:0	10	==
water	71:38	0:0	10	0
stmts	71:42	80:12	7	
water	71:42	0:0	8	{
decl	73:16	73:98	8	double	d_samples_forward
op	73:41	0:0	8	=
water	73:43	0:0	8	p_sys
op	73:48	0:0	8	->
water	73:50	0:0	8	d_compression_ratio
op	73:69	0:0	8	*
water	73:70	0:0	8	(
water	73:71	0:0	8	double
water	73:77	0:0	8	)
water	73:78	0:0	8	out_args
op	73:86	0:0	8	.
water	73:87	0:0	8	numOutBytes
water	74:16	0:0	8	i_pts_out
op	74:26	0:0	8	+=
water	74:29	0:0	8	(
water	74:30	0:0	8	mtime_t
water	74:37	0:0	8	)
water	74:38	0:0	8	d_samples_forward
water	74:55	0:0	8	;
water	75:16	0:0	8	p_block
op	75:23	0:0	8	->
water	75:25	0:0	8	i_length
op	75:34	0:0	8	=
water	75:36	0:0	8	(
water	75:37	0:0	8	mtime_t
water	75:44	0:0	8	)
water	75:45	0:0	8	d_samples_forward
water	75:62	0:0	8	;
water	80:12	0:0	8	}
else	80:14	100:12	6
stmts	80:19	100:12	7	
water	80:19	0:0	8	{
if	81:16	92:16	8	(i_loop_count == 0)
cond	81:20	81:36	9	i_loop_count == 0
water	81:20	0:0	10	i_loop_count
op	81:33	0:0	10	==
water	81:36	0:0	10	0
stmts	81:39	92:16	9	
water	81:39	0:0	10	{
decl	84:20	85:83	10	double	d_samples_delay
op	84:43	0:0	10	=
water	84:45	0:0	10	(
water	84:46	0:0	10	double
water	84:52	0:0	10	)
water	84:53	0:0	10	p_sys
op	84:58	0:0	10	->
water	84:60	0:0	10	i_frame_size
op	84:73	0:0	10	-
water	84:75	0:0	10	(
water	84:76	0:0	10	double
water	84:82	0:0	10	)
water	84:83	0:0	10	out_args
op	84:91	0:0	10	.
water	84:92	0:0	10	numInSamples
op	84:105	0:0	10	/
water	85:45	0:0	10	(
water	85:46	0:0	10	double
water	85:52	0:0	10	)
water	85:53	0:0	10	p_enc
op	85:58	0:0	10	->
water	85:60	0:0	10	fmt_in
op	85:66	0:0	10	.
water	85:67	0:0	10	audio
op	85:72	0:0	10	.
water	85:73	0:0	10	i_channels
water	86:20	0:0	10	i_pts_out
op	86:30	0:0	10	-=
call	86:33	87:78	10	(mtime_t)
arg	86:43	87:78	11	(double)CLOCK_FREQ*d_samples_delay/(double)p_enc->fmt_out.audio.i_rate
water	86:43	0:0	12	(
water	86:44	0:0	12	double
water	86:50	0:0	12	)
water	86:51	0:0	12	CLOCK_FREQ
op	86:62	0:0	12	*
water	86:64	0:0	12	d_samples_delay
op	86:80	0:0	12	/
water	87:43	0:0	12	(
water	87:44	0:0	12	double
water	87:50	0:0	12	)
water	87:51	0:0	12	p_enc
op	87:56	0:0	12	->
water	87:58	0:0	12	fmt_out
op	87:65	0:0	12	.
water	87:66	0:0	12	audio
op	87:71	0:0	12	.
water	87:72	0:0	12	i_rate
water	87:79	0:0	10	;
water	88:20	0:0	10	p_block
op	88:27	0:0	10	->
water	88:29	0:0	10	i_length
op	88:38	0:0	10	=
call	88:40	89:59	10	(mtime_t)
arg	88:50	89:59	11	(double)CLOCK_FREQ*(double)p_sys->i_frame_size/(double)p_enc->fmt_out.audio.i_rate
water	88:50	0:0	12	(
water	88:51	0:0	12	double
water	88:57	0:0	12	)
water	88:58	0:0	12	CLOCK_FREQ
op	88:69	0:0	12	*
water	88:71	0:0	12	(
water	88:72	0:0	12	double
water	88:78	0:0	12	)
water	88:79	0:0	12	p_sys
op	88:84	0:0	12	->
water	88:86	0:0	12	i_frame_size
op	88:99	0:0	12	/
water	89:24	0:0	12	(
water	89:25	0:0	12	double
water	89:31	0:0	12	)
water	89:32	0:0	12	p_enc
op	89:37	0:0	12	->
water	89:39	0:0	12	fmt_out
op	89:46	0:0	12	.
water	89:47	0:0	12	audio
op	89:52	0:0	12	.
water	89:53	0:0	12	i_rate
water	89:60	0:0	10	;
water	90:20	0:0	10	p_block
op	90:27	0:0	10	->
water	90:29	0:0	10	i_nb_samples
op	90:42	0:0	10	=
water	90:44	0:0	10	d_samples_delay
water	90:59	0:0	10	;
water	92:16	0:0	10	}
else	92:18	99:16	8
stmts	92:23	99:16	9	
water	92:23	0:0	10	{
decl	93:20	93:115	10	double	d_samples_forward
op	93:45	0:0	10	=
water	93:47	0:0	10	(
water	93:48	0:0	10	double
water	93:54	0:0	10	)
water	93:55	0:0	10	out_args
op	93:63	0:0	10	.
water	93:64	0:0	10	numInSamples
op	93:76	0:0	10	/
water	93:77	0:0	10	(
water	93:78	0:0	10	double
water	93:84	0:0	10	)
water	93:85	0:0	10	p_enc
op	93:90	0:0	10	->
water	93:92	0:0	10	fmt_in
op	93:98	0:0	10	.
water	93:99	0:0	10	audio
op	93:104	0:0	10	.
water	93:105	0:0	10	i_channels
decl	94:20	95:80	10	double	d_length
op	94:36	0:0	10	=
water	94:38	0:0	10	(
water	94:39	0:0	10	(
water	94:40	0:0	10	double
water	94:46	0:0	10	)
water	94:47	0:0	10	CLOCK_FREQ
op	94:58	0:0	10	*
water	94:60	0:0	10	d_samples_forward
op	94:78	0:0	10	/
water	95:44	0:0	10	(
water	95:45	0:0	10	double
water	95:51	0:0	10	)
water	95:52	0:0	10	p_enc
op	95:57	0:0	10	->
water	95:59	0:0	10	fmt_out
op	95:66	0:0	10	.
water	95:67	0:0	10	audio
op	95:72	0:0	10	.
water	95:73	0:0	10	i_rate
water	95:79	0:0	10	)
water	96:20	0:0	10	i_pts_out
op	96:30	0:0	10	+=
water	96:33	0:0	10	(
water	96:34	0:0	10	mtime_t
water	96:41	0:0	10	)
water	96:43	0:0	10	d_length
water	96:51	0:0	10	;
water	97:20	0:0	10	p_block
op	97:27	0:0	10	->
water	97:29	0:0	10	i_length
op	97:38	0:0	10	=
water	97:40	0:0	10	(
water	97:41	0:0	10	mtime_t
water	97:48	0:0	10	)
water	97:50	0:0	10	d_length
water	97:58	0:0	10	;
water	98:20	0:0	10	p_block
op	98:27	0:0	10	->
water	98:29	0:0	10	i_nb_samples
op	98:42	0:0	10	=
water	98:44	0:0	10	d_samples_forward
water	98:61	0:0	10	;
water	99:16	0:0	10	}
water	100:12	0:0	8	}
water	101:12	0:0	6	p_block
op	101:19	0:0	6	->
water	101:21	0:0	6	i_dts
op	101:27	0:0	6	=
water	101:29	0:0	6	p_block
op	101:36	0:0	6	->
water	101:38	0:0	6	i_pts
op	101:44	0:0	6	=
water	101:46	0:0	6	i_pts_out
water	101:55	0:0	6	;
call	102:12	102:47	6	block_ChainAppend
arg	102:30	102:38	7	&p_chain
op	102:30	0:0	8	&
water	102:31	0:0	8	p_chain
arg	102:40	102:47	7	p_block
water	102:40	0:0	8	p_block
water	102:48	0:0	6	;
call	104:12	109:76	6	msg_Dbg
arg	104:20	104:25	7	p_enc
water	104:20	0:0	8	p_enc
arg	104:27	106:59	7	"dts %"PRId64", length %"PRId64", ""pts_last ""%"PRId64" numOutBytes = %i, numInSamples = %i, ""i_samples %i, i_loop_count %i"
water	104:27	0:0	8	"dts %"
water	104:34	0:0	8	PRId64
water	104:40	0:0	8	", length %"
water	104:52	0:0	8	PRId64
water	104:58	0:0	8	", "
water	104:63	0:0	8	"pts_last "
water	105:28	0:0	8	"%"
water	105:31	0:0	8	PRId64
water	105:37	0:0	8	" numOutBytes = %i, numInSamples = %i, "
water	106:28	0:0	8	"i_samples %i, i_loop_count %i"
arg	107:30	107:44	7	p_block->i_dts
water	107:30	0:0	8	p_block
op	107:37	0:0	8	->
water	107:39	0:0	8	i_dts
arg	107:46	107:63	7	p_block->i_length
water	107:46	0:0	8	p_block
op	107:53	0:0	8	->
water	107:55	0:0	8	i_length
arg	108:30	108:47	7	p_sys->i_pts_last
water	108:30	0:0	8	p_sys
op	108:35	0:0	8	->
water	108:37	0:0	8	i_pts_last
arg	108:49	108:69	7	out_args.numOutBytes
water	108:49	0:0	8	out_args
op	108:57	0:0	8	.
water	108:58	0:0	8	numOutBytes
arg	109:30	109:51	7	out_args.numInSamples
water	109:30	0:0	8	out_args
op	109:38	0:0	8	.
water	109:39	0:0	8	numInSamples
arg	109:53	109:62	7	i_samples
water	109:53	0:0	8	i_samples
arg	109:64	109:76	7	i_loop_count
water	109:64	0:0	8	i_loop_count
water	109:77	0:0	6	;
if	111:12	115:12	6	(likely (i_samples > 0 ))
cond	111:16	111:36	7	likely (i_samples > 0 )
call	111:16	111:36	8	likely
arg	111:23	111:36	9	i_samples>0
water	111:23	0:0	10	i_samples
op	111:33	0:0	10	>
water	111:35	0:0	10	0
stmts	111:39	115:12	7	
water	111:39	0:0	8	{
water	112:16	0:0	8	p_sys
op	112:21	0:0	8	->
water	112:23	0:0	8	d_compression_ratio
op	112:43	0:0	8	=
water	112:45	0:0	8	(
water	112:46	0:0	8	double
water	112:52	0:0	8	)
water	112:53	0:0	8	p_block
op	112:60	0:0	8	->
water	112:62	0:0	8	i_length
op	112:71	0:0	8	/
water	112:73	0:0	8	(
water	112:74	0:0	8	double
water	112:80	0:0	8	)
water	112:81	0:0	8	out_args
op	112:89	0:0	8	.
water	112:90	0:0	8	numOutBytes
water	112:101	0:0	8	;
water	113:16	0:0	8	i_samples_left
op	113:31	0:0	8	-=
water	113:34	0:0	8	out_args
op	113:42	0:0	8	.
water	113:43	0:0	8	numInSamples
op	113:55	0:0	8	/
water	113:56	0:0	8	p_enc
op	113:61	0:0	8	->
water	113:63	0:0	8	fmt_in
op	113:69	0:0	8	.
water	113:70	0:0	8	audio
op	113:75	0:0	8	.
water	113:76	0:0	8	i_channels
water	113:86	0:0	8	;
water	114:16	0:0	8	p_sys
op	114:21	0:0	8	->
water	114:23	0:0	8	i_pts_last
op	114:34	0:0	8	=
water	114:36	0:0	8	i_pts_out
water	114:45	0:0	8	;
water	115:12	0:0	8	}
water	116:8	0:0	6	}
else	116:10	120:8	4
stmts	116:15	120:8	5	
water	116:15	0:0	6	{
call	117:12	117:33	6	block_Release
arg	117:26	117:33	7	p_block
water	117:26	0:0	8	p_block
water	117:34	0:0	6	;
break	119:12	119:17	6	
water	120:8	0:0	6	}
if	121:8	124:8	4	(unlikely (i_loop_count ++ > 100 ))
cond	121:12	121:41	5	unlikely (i_loop_count ++ > 100 )
call	121:12	121:41	6	unlikely
arg	121:21	121:41	7	i_loop_count++>100
water	121:21	0:0	8	i_loop_count
op	121:33	0:0	8	++
op	121:36	0:0	8	>
water	121:38	0:0	8	100
stmts	121:44	124:8	5	
water	121:44	0:0	6	{
call	122:12	122:109	6	msg_Err
arg	122:20	122:25	7	p_enc
water	122:20	0:0	8	p_enc
arg	122:27	122:109	7	"Loop count greater than 100!!!, something must be wrong with the encoder library"
water	122:27	0:0	8	"Loop count greater than 100!!!, something must be wrong with the encoder library"
water	122:110	0:0	6	;
break	123:12	123:17	6	
water	124:8	0:0	6	}
water	125:4	0:0	4	}
return	126:4	126:18	2	p_chain
water	126:11	0:0	3	p_chain
