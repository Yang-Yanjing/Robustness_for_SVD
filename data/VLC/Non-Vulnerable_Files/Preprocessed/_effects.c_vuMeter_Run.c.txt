func	2:0	119:0	0	static int	vuMeter_Run
params	2:22	0:0	1	
param	2:23	2:49	2	visual_effect_t *	p_effect
param	2:51	2:71	2	vlc_object_t *	p_aout
param	3:23	3:48	2	const block_t *	p_buffer
param	3:50	3:71	2	picture_t *	p_picture
stmnts	5:4	118:12	1	
call	5:4	5:21	2	VLC_UNUSED
arg	5:15	5:21	3	p_aout
water	5:15	0:0	4	p_aout
water	5:22	0:0	2	;
decl	6:4	6:23	2	float	i_value_l
op	6:20	0:0	2	=
water	6:22	0:0	2	0
decl	7:4	7:23	2	float	i_value_r
op	7:20	0:0	2	=
water	7:22	0:0	2	0
for	9:4	20:4	2	(unsigned i = 0 ;i < p_buffer -> i_nb_samples;i ++)
forinit	9:10	9:25	3	unsigned i = 0 ;
water	9:10	0:0	4	unsigned
water	9:19	0:0	4	i
op	9:21	0:0	4	=
water	9:23	0:0	4	0
water	9:25	0:0	4	;
cond	9:27	9:41	3	i < p_buffer -> i_nb_samples
water	9:27	0:0	4	i
op	9:29	0:0	4	<
water	9:31	0:0	4	p_buffer
op	9:39	0:0	4	->
water	9:41	0:0	4	i_nb_samples
forexpr	9:55	9:56	3	i ++
water	9:55	0:0	4	i
op	9:56	0:0	4	++
stmts	10:4	20:4	3	
water	10:4	0:0	4	{
decl	11:8	11:59	4	const float	*p_sample
op	11:30	0:0	4	=
water	11:32	0:0	4	(
water	11:33	0:0	4	float
op	11:39	0:0	4	*
water	11:40	0:0	4	)
water	11:41	0:0	4	p_buffer
op	11:49	0:0	4	->
water	11:51	0:0	4	p_buffer
decl	12:8	12:16	4	float	ch
water	13:8	0:0	4	ch
op	13:11	0:0	4	=
water	13:13	0:0	4	p_sample
op	13:21	0:0	4	[
water	13:22	0:0	4	p_effect
op	13:30	0:0	4	->
water	13:32	0:0	4	i_idx_left
op	13:42	0:0	4	]
op	13:44	0:0	4	*
water	13:46	0:0	4	256
water	13:49	0:0	4	;
if	14:8	15:26	4	(ch > i_value_l)
cond	14:12	14:17	5	ch > i_value_l
water	14:12	0:0	6	ch
op	14:15	0:0	6	>
water	14:17	0:0	6	i_value_l
stmts	15:12	15:26	5	
water	15:12	0:0	6	i_value_l
op	15:22	0:0	6	=
water	15:24	0:0	6	ch
water	15:26	0:0	6	;
water	16:8	0:0	4	ch
op	16:11	0:0	4	=
water	16:13	0:0	4	p_sample
op	16:21	0:0	4	[
water	16:22	0:0	4	p_effect
op	16:30	0:0	4	->
water	16:32	0:0	4	i_idx_right
op	16:43	0:0	4	]
op	16:45	0:0	4	*
water	16:47	0:0	4	256
water	16:50	0:0	4	;
if	17:8	18:26	4	(ch > i_value_r)
cond	17:12	17:17	5	ch > i_value_r
water	17:12	0:0	6	ch
op	17:15	0:0	6	>
water	17:17	0:0	6	i_value_r
stmts	18:12	18:26	5	
water	18:12	0:0	6	i_value_r
op	18:22	0:0	6	=
water	18:24	0:0	6	ch
water	18:26	0:0	6	;
water	19:8	0:0	4	p_sample
op	19:17	0:0	4	+=
water	19:20	0:0	4	p_effect
op	19:28	0:0	4	->
water	19:30	0:0	4	i_nb_chans
water	19:40	0:0	4	;
water	20:4	0:0	4	}
water	21:4	0:0	2	i_value_l
op	21:14	0:0	2	=
call	21:16	21:31	2	fabsf
arg	21:22	21:31	3	i_value_l
water	21:22	0:0	4	i_value_l
water	21:32	0:0	2	;
water	22:4	0:0	2	i_value_r
op	22:14	0:0	2	=
call	22:16	22:31	2	fabsf
arg	22:22	22:31	3	i_value_r
water	22:22	0:0	4	i_value_r
water	22:32	0:0	2	;
if	24:4	25:32	2	(i_value_l > 200 * M_PI_2)
cond	24:9	24:27	3	i_value_l > 200 * M_PI_2
water	24:9	0:0	4	i_value_l
op	24:19	0:0	4	>
water	24:21	0:0	4	200
op	24:25	0:0	4	*
water	24:27	0:0	4	M_PI_2
stmts	25:8	25:32	3	
water	25:8	0:0	4	i_value_l
op	25:18	0:0	4	=
water	25:20	0:0	4	200
op	25:24	0:0	4	*
water	25:26	0:0	4	M_PI_2
water	25:32	0:0	4	;
if	26:4	27:32	2	(i_value_r > 200 * M_PI_2)
cond	26:9	26:27	3	i_value_r > 200 * M_PI_2
water	26:9	0:0	4	i_value_r
op	26:19	0:0	4	>
water	26:21	0:0	4	200
op	26:25	0:0	4	*
water	26:27	0:0	4	M_PI_2
stmts	27:8	27:32	3	
water	27:8	0:0	4	i_value_r
op	27:18	0:0	4	=
water	27:20	0:0	4	200
op	27:24	0:0	4	*
water	27:26	0:0	4	M_PI_2
water	27:32	0:0	4	;
decl	28:4	28:18	2	float	*i_value
if	29:4	36:4	2	(! p_effect -> p_data)
cond	29:8	29:19	3	! p_effect -> p_data
op	29:8	0:0	4	!
water	29:9	0:0	4	p_effect
op	29:17	0:0	4	->
water	29:19	0:0	4	p_data
stmts	30:4	36:4	3	
water	30:4	0:0	4	{
water	32:8	0:0	4	p_effect
op	32:16	0:0	4	->
water	32:18	0:0	4	p_data
op	32:25	0:0	4	=
call	32:27	32:53	4	malloc
arg	32:35	32:53	5	2*sizeof(float)
water	32:35	0:0	6	2
op	32:37	0:0	6	*
op	32:39	0:0	6	sizeof
water	32:45	0:0	6	(
water	32:46	0:0	6	float
water	32:51	0:0	6	)
water	32:54	0:0	4	;
water	33:8	0:0	4	i_value
op	33:16	0:0	4	=
water	33:18	0:0	4	p_effect
op	33:26	0:0	4	->
water	33:28	0:0	4	p_data
water	33:34	0:0	4	;
water	34:8	0:0	4	i_value
op	34:15	0:0	4	[
water	34:16	0:0	4	0
op	34:17	0:0	4	]
op	34:19	0:0	4	=
water	34:21	0:0	4	i_value_l
water	34:30	0:0	4	;
water	35:8	0:0	4	i_value
op	35:15	0:0	4	[
water	35:16	0:0	4	1
op	35:17	0:0	4	]
op	35:19	0:0	4	=
water	35:21	0:0	4	i_value_r
water	35:30	0:0	4	;
water	36:4	0:0	4	}
else	37:4	50:4	2
stmts	38:4	50:4	3	
water	38:4	0:0	4	{
water	41:8	0:0	4	i_value
op	41:16	0:0	4	=
water	41:18	0:0	4	p_effect
op	41:26	0:0	4	->
water	41:28	0:0	4	p_data
water	41:34	0:0	4	;
if	42:8	43:34	4	(i_value_l > i_value [ 0 ] - 6)
cond	42:13	42:38	5	i_value_l > i_value [ 0 ] - 6
water	42:13	0:0	6	i_value_l
op	42:23	0:0	6	>
water	42:25	0:0	6	i_value
op	42:32	0:0	6	[
water	42:33	0:0	6	0
op	42:34	0:0	6	]
op	42:36	0:0	6	-
water	42:38	0:0	6	6
stmts	43:12	43:34	5	
water	43:12	0:0	6	i_value
op	43:19	0:0	6	[
water	43:20	0:0	6	0
op	43:21	0:0	6	]
op	43:23	0:0	6	=
water	43:25	0:0	6	i_value_l
water	43:34	0:0	6	;
else	44:8	45:39	4
stmts	45:12	45:39	5	
water	45:12	0:0	6	i_value
op	45:19	0:0	6	[
water	45:20	0:0	6	0
op	45:21	0:0	6	]
op	45:23	0:0	6	=
water	45:25	0:0	6	i_value
op	45:32	0:0	6	[
water	45:33	0:0	6	0
op	45:34	0:0	6	]
op	45:36	0:0	6	-
water	45:38	0:0	6	6
water	45:39	0:0	6	;
if	46:8	47:34	4	(i_value_r > i_value [ 1 ] - 6)
cond	46:13	46:38	5	i_value_r > i_value [ 1 ] - 6
water	46:13	0:0	6	i_value_r
op	46:23	0:0	6	>
water	46:25	0:0	6	i_value
op	46:32	0:0	6	[
water	46:33	0:0	6	1
op	46:34	0:0	6	]
op	46:36	0:0	6	-
water	46:38	0:0	6	6
stmts	47:12	47:34	5	
water	47:12	0:0	6	i_value
op	47:19	0:0	6	[
water	47:20	0:0	6	1
op	47:21	0:0	6	]
op	47:23	0:0	6	=
water	47:25	0:0	6	i_value_r
water	47:34	0:0	6	;
else	48:8	49:39	4
stmts	49:12	49:39	5	
water	49:12	0:0	6	i_value
op	49:19	0:0	6	[
water	49:20	0:0	6	1
op	49:21	0:0	6	]
op	49:23	0:0	6	=
water	49:25	0:0	6	i_value
op	49:32	0:0	6	[
water	49:33	0:0	6	1
op	49:34	0:0	6	]
op	49:36	0:0	6	-
water	49:38	0:0	6	6
water	49:39	0:0	6	;
water	50:4	0:0	4	}
decl	51:4	51:12	2	int	x
water	51:9	0:0	2	,
decl	51:4	51:12	2	int	y
decl	52:4	52:14	2	float	teta
decl	53:4	53:19	2	float	teta_grad
decl	54:4	54:45	2	int	start_x
op	54:16	0:0	2	=
water	54:18	0:0	2	p_effect
op	54:26	0:0	2	->
water	54:28	0:0	2	i_width
op	54:36	0:0	2	/
water	54:38	0:0	2	2
op	54:40	0:0	2	-
water	54:42	0:0	2	120
for	55:4	117:4	2	( int j = 0 ;j < 2;j ++)
forinit	0:0	55:19	3	 int j = 0 ;
decl	55:10	55:19	4	int	j
op	55:16	0:0	4	=
water	55:18	0:0	4	0
cond	55:21	55:25	3	j < 2
water	55:21	0:0	4	j
op	55:23	0:0	4	<
water	55:25	0:0	4	2
forexpr	55:28	55:29	3	j ++
water	55:28	0:0	4	j
op	55:29	0:0	4	++
stmts	56:4	117:4	3	
water	56:4	0:0	4	{
decl	58:8	58:17	4	int	k
op	58:14	0:0	4	=
water	58:16	0:0	4	0
water	59:8	0:0	4	teta_grad
op	59:18	0:0	4	=
water	59:20	0:0	4	GRAD_ANGLE_MIN
water	59:34	0:0	4	;
for	60:8	82:8	4	(teta = - M_PI_4 ;teta <= M_PI_4;teta = teta + 0 . 003)
forinit	60:14	60:28	5	teta = - M_PI_4 ;
water	60:14	0:0	6	teta
op	60:19	0:0	6	=
op	60:21	0:0	6	-
water	60:22	0:0	6	M_PI_4
water	60:28	0:0	6	;
cond	60:30	60:38	5	teta <= M_PI_4
water	60:30	0:0	6	teta
op	60:35	0:0	6	<=
water	60:38	0:0	6	M_PI_4
forexpr	60:46	60:62	5	teta = teta + 0 . 003
water	60:46	0:0	6	teta
op	60:51	0:0	6	=
water	60:53	0:0	6	teta
op	60:58	0:0	6	+
water	60:60	0:0	6	0
op	60:61	0:0	6	.
water	60:62	0:0	6	003
stmts	61:8	82:8	5	
water	61:8	0:0	6	{
for	62:12	81:12	6	(unsigned i = 140 ;i <= 150;i ++)
forinit	62:18	62:34	7	unsigned i = 140 ;
water	62:18	0:0	8	unsigned
water	62:27	0:0	8	i
op	62:29	0:0	8	=
water	62:31	0:0	8	140
water	62:34	0:0	8	;
cond	62:36	62:41	7	i <= 150
water	62:36	0:0	8	i
op	62:38	0:0	8	<=
water	62:41	0:0	8	150
forexpr	62:46	62:47	7	i ++
water	62:46	0:0	8	i
op	62:47	0:0	8	++
stmts	63:12	81:12	7	
water	63:12	0:0	8	{
water	64:16	0:0	8	y
op	64:18	0:0	8	=
water	64:20	0:0	8	i
call	64:22	64:32	8	*cos
arg	64:28	64:32	9	teta
water	64:28	0:0	10	teta
op	64:34	0:0	8	+
water	64:36	0:0	8	20
water	64:38	0:0	8	;
water	65:16	0:0	8	x
op	65:18	0:0	8	=
water	65:20	0:0	8	i
call	65:22	65:32	8	*sin
arg	65:28	65:32	9	teta
water	65:28	0:0	10	teta
op	65:34	0:0	8	+
water	65:36	0:0	8	start_x
op	65:44	0:0	8	+
water	65:46	0:0	8	240
op	65:50	0:0	8	*
water	65:52	0:0	8	j
water	65:53	0:0	8	;
if	67:16	71:16	8	(teta >= teta_grad + GRAD_INCR && teta_grad <= GRAD_ANGLE_MAX)
cond	67:20	67:66	9	teta >= teta_grad + GRAD_INCR && teta_grad <= GRAD_ANGLE_MAX
water	67:20	0:0	10	teta
op	67:25	0:0	10	>=
water	67:28	0:0	10	teta_grad
op	67:38	0:0	10	+
water	67:40	0:0	10	GRAD_INCR
op	67:50	0:0	10	&&
water	67:53	0:0	10	teta_grad
op	67:63	0:0	10	<=
water	67:66	0:0	10	GRAD_ANGLE_MAX
stmts	68:16	71:16	9	
water	68:16	0:0	10	{
water	69:20	0:0	10	teta_grad
op	69:30	0:0	10	=
water	69:32	0:0	10	teta_grad
op	69:42	0:0	10	+
water	69:44	0:0	10	GRAD_INCR
water	69:53	0:0	10	;
water	70:20	0:0	10	k
op	70:22	0:0	10	=
water	70:24	0:0	10	k
op	70:26	0:0	10	+
water	70:28	0:0	10	5
water	70:29	0:0	10	;
water	71:16	0:0	10	}
op	72:16	0:0	8	*
water	72:17	0:0	8	(
water	72:18	0:0	8	p_picture
op	72:27	0:0	8	->
water	72:29	0:0	8	p
op	72:30	0:0	8	[
water	72:31	0:0	8	0
op	72:32	0:0	8	]
op	72:33	0:0	8	.
water	72:34	0:0	8	p_pixels
op	72:43	0:0	8	+
water	73:24	0:0	8	(
water	73:25	0:0	8	p_picture
op	73:34	0:0	8	->
water	73:36	0:0	8	p
op	73:37	0:0	8	[
water	73:38	0:0	8	0
op	73:39	0:0	8	]
op	73:40	0:0	8	.
water	73:41	0:0	8	i_lines
op	73:49	0:0	8	-
water	73:51	0:0	8	y
op	73:53	0:0	8	-
water	73:55	0:0	8	1
water	73:57	0:0	8	)
op	73:59	0:0	8	*
water	73:61	0:0	8	p_picture
op	73:70	0:0	8	->
water	73:72	0:0	8	p
op	73:73	0:0	8	[
water	73:74	0:0	8	0
op	73:75	0:0	8	]
op	73:76	0:0	8	.
water	73:77	0:0	8	i_pitch
op	74:24	0:0	8	+
water	74:26	0:0	8	x
water	74:28	0:0	8	)
op	74:30	0:0	8	=
water	74:32	0:0	8	0
water	74:33	0:0	8	x45
water	74:36	0:0	8	;
op	75:16	0:0	8	*
water	75:17	0:0	8	(
water	75:18	0:0	8	p_picture
op	75:27	0:0	8	->
water	75:29	0:0	8	p
op	75:30	0:0	8	[
water	75:31	0:0	8	1
op	75:32	0:0	8	]
op	75:33	0:0	8	.
water	75:34	0:0	8	p_pixels
op	75:43	0:0	8	+
water	76:24	0:0	8	(
water	76:25	0:0	8	p_picture
op	76:34	0:0	8	->
water	76:36	0:0	8	p
op	76:37	0:0	8	[
water	76:38	0:0	8	1
op	76:39	0:0	8	]
op	76:40	0:0	8	.
water	76:41	0:0	8	i_lines
op	76:49	0:0	8	-
water	76:51	0:0	8	y
op	76:53	0:0	8	/
water	76:55	0:0	8	2
op	76:57	0:0	8	-
water	76:59	0:0	8	1
water	76:61	0:0	8	)
op	76:63	0:0	8	*
water	76:65	0:0	8	p_picture
op	76:74	0:0	8	->
water	76:76	0:0	8	p
op	76:77	0:0	8	[
water	76:78	0:0	8	1
op	76:79	0:0	8	]
op	76:80	0:0	8	.
water	76:81	0:0	8	i_pitch
op	77:24	0:0	8	+
water	77:26	0:0	8	x
op	77:28	0:0	8	/
water	77:30	0:0	8	2
water	77:32	0:0	8	)
op	77:34	0:0	8	=
water	77:36	0:0	8	0
water	77:37	0:0	8	x0
water	77:39	0:0	8	;
op	78:16	0:0	8	*
water	78:17	0:0	8	(
water	78:18	0:0	8	p_picture
op	78:27	0:0	8	->
water	78:29	0:0	8	p
op	78:30	0:0	8	[
water	78:31	0:0	8	2
op	78:32	0:0	8	]
op	78:33	0:0	8	.
water	78:34	0:0	8	p_pixels
op	78:43	0:0	8	+
water	79:24	0:0	8	(
water	79:25	0:0	8	p_picture
op	79:34	0:0	8	->
water	79:36	0:0	8	p
op	79:37	0:0	8	[
water	79:38	0:0	8	2
op	79:39	0:0	8	]
op	79:40	0:0	8	.
water	79:41	0:0	8	i_lines
op	79:49	0:0	8	-
water	79:51	0:0	8	y
op	79:53	0:0	8	/
water	79:55	0:0	8	2
op	79:57	0:0	8	-
water	79:59	0:0	8	1
water	79:61	0:0	8	)
op	79:63	0:0	8	*
water	79:65	0:0	8	p_picture
op	79:74	0:0	8	->
water	79:76	0:0	8	p
op	79:77	0:0	8	[
water	79:78	0:0	8	2
op	79:79	0:0	8	]
op	79:80	0:0	8	.
water	79:81	0:0	8	i_pitch
op	80:24	0:0	8	+
water	80:26	0:0	8	x
op	80:28	0:0	8	/
water	80:30	0:0	8	2
water	80:32	0:0	8	)
op	80:34	0:0	8	=
water	80:36	0:0	8	0
water	80:37	0:0	8	x4D
op	80:41	0:0	8	+
water	80:43	0:0	8	k
water	80:44	0:0	8	;
water	81:12	0:0	8	}
water	82:8	0:0	6	}
water	84:8	0:0	4	teta
op	84:13	0:0	4	=
water	84:15	0:0	4	(
water	84:16	0:0	4	float
water	84:21	0:0	4	)
water	84:22	0:0	4	i_value
op	84:29	0:0	4	[
water	84:30	0:0	4	j
op	84:31	0:0	4	]
op	84:33	0:0	4	/
water	84:35	0:0	4	200
op	84:39	0:0	4	-
water	84:41	0:0	4	M_PI_4
water	84:47	0:0	4	;
for	85:8	98:8	4	( int i = 0 ;i <= 150;i ++)
forinit	0:0	85:23	5	 int i = 0 ;
decl	85:14	85:23	6	int	i
op	85:20	0:0	6	=
water	85:22	0:0	6	0
cond	85:25	85:30	5	i <= 150
water	85:25	0:0	6	i
op	85:27	0:0	6	<=
water	85:30	0:0	6	150
forexpr	85:35	85:36	5	i ++
water	85:35	0:0	6	i
op	85:36	0:0	6	++
stmts	86:8	98:8	5	
water	86:8	0:0	6	{
water	87:12	0:0	6	y
op	87:14	0:0	6	=
water	87:16	0:0	6	i
call	87:18	87:28	6	*cos
arg	87:24	87:28	7	teta
water	87:24	0:0	8	teta
op	87:30	0:0	6	+
water	87:32	0:0	6	20
water	87:34	0:0	6	;
water	88:12	0:0	6	x
op	88:14	0:0	6	=
water	88:16	0:0	6	i
call	88:18	88:28	6	*sin
arg	88:24	88:28	7	teta
water	88:24	0:0	8	teta
op	88:30	0:0	6	+
water	88:32	0:0	6	start_x
op	88:40	0:0	6	+
water	88:42	0:0	6	240
op	88:46	0:0	6	*
water	88:48	0:0	6	j
water	88:49	0:0	6	;
op	89:12	0:0	6	*
water	89:13	0:0	6	(
water	89:14	0:0	6	p_picture
op	89:23	0:0	6	->
water	89:25	0:0	6	p
op	89:26	0:0	6	[
water	89:27	0:0	6	0
op	89:28	0:0	6	]
op	89:29	0:0	6	.
water	89:30	0:0	6	p_pixels
op	89:39	0:0	6	+
water	90:20	0:0	6	(
water	90:21	0:0	6	p_picture
op	90:30	0:0	6	->
water	90:32	0:0	6	p
op	90:33	0:0	6	[
water	90:34	0:0	6	0
op	90:35	0:0	6	]
op	90:36	0:0	6	.
water	90:37	0:0	6	i_lines
op	90:45	0:0	6	-
water	90:47	0:0	6	y
op	90:49	0:0	6	-
water	90:51	0:0	6	1
water	90:53	0:0	6	)
op	90:55	0:0	6	*
water	90:57	0:0	6	p_picture
op	90:66	0:0	6	->
water	90:68	0:0	6	p
op	90:69	0:0	6	[
water	90:70	0:0	6	0
op	90:71	0:0	6	]
op	90:72	0:0	6	.
water	90:73	0:0	6	i_pitch
op	91:20	0:0	6	+
water	91:22	0:0	6	x
water	91:24	0:0	6	)
op	91:26	0:0	6	=
water	91:28	0:0	6	0
water	91:29	0:0	6	xAD
water	91:32	0:0	6	;
op	92:12	0:0	6	*
water	92:13	0:0	6	(
water	92:14	0:0	6	p_picture
op	92:23	0:0	6	->
water	92:25	0:0	6	p
op	92:26	0:0	6	[
water	92:27	0:0	6	1
op	92:28	0:0	6	]
op	92:29	0:0	6	.
water	92:30	0:0	6	p_pixels
op	92:39	0:0	6	+
water	93:20	0:0	6	(
water	93:21	0:0	6	p_picture
op	93:30	0:0	6	->
water	93:32	0:0	6	p
op	93:33	0:0	6	[
water	93:34	0:0	6	1
op	93:35	0:0	6	]
op	93:36	0:0	6	.
water	93:37	0:0	6	i_lines
op	93:45	0:0	6	-
water	93:47	0:0	6	y
op	93:49	0:0	6	/
water	93:51	0:0	6	2
op	93:53	0:0	6	-
water	93:55	0:0	6	1
water	93:57	0:0	6	)
op	93:59	0:0	6	*
water	93:61	0:0	6	p_picture
op	93:70	0:0	6	->
water	93:72	0:0	6	p
op	93:73	0:0	6	[
water	93:74	0:0	6	1
op	93:75	0:0	6	]
op	93:76	0:0	6	.
water	93:77	0:0	6	i_pitch
op	94:20	0:0	6	+
water	94:22	0:0	6	x
op	94:24	0:0	6	/
water	94:26	0:0	6	2
water	94:28	0:0	6	)
op	94:30	0:0	6	=
water	94:32	0:0	6	0
water	94:33	0:0	6	xFC
water	94:36	0:0	6	;
op	95:12	0:0	6	*
water	95:13	0:0	6	(
water	95:14	0:0	6	p_picture
op	95:23	0:0	6	->
water	95:25	0:0	6	p
op	95:26	0:0	6	[
water	95:27	0:0	6	2
op	95:28	0:0	6	]
op	95:29	0:0	6	.
water	95:30	0:0	6	p_pixels
op	95:39	0:0	6	+
water	96:20	0:0	6	(
water	96:21	0:0	6	p_picture
op	96:30	0:0	6	->
water	96:32	0:0	6	p
op	96:33	0:0	6	[
water	96:34	0:0	6	2
op	96:35	0:0	6	]
op	96:36	0:0	6	.
water	96:37	0:0	6	i_lines
op	96:45	0:0	6	-
water	96:47	0:0	6	y
op	96:49	0:0	6	/
water	96:51	0:0	6	2
op	96:53	0:0	6	-
water	96:55	0:0	6	1
water	96:57	0:0	6	)
op	96:59	0:0	6	*
water	96:61	0:0	6	p_picture
op	96:70	0:0	6	->
water	96:72	0:0	6	p
op	96:73	0:0	6	[
water	96:74	0:0	6	2
op	96:75	0:0	6	]
op	96:76	0:0	6	.
water	96:77	0:0	6	i_pitch
op	97:20	0:0	6	+
water	97:22	0:0	6	x
op	97:24	0:0	6	/
water	97:26	0:0	6	2
water	97:28	0:0	6	)
op	97:30	0:0	6	=
water	97:32	0:0	6	0
water	97:33	0:0	6	xAC
water	97:36	0:0	6	;
water	98:8	0:0	6	}
for	100:8	116:8	4	(teta = - M_PI_2 ;teta <= M_PI_2 + 0 . 01;teta = teta + 0 . 003)
forinit	100:14	100:28	5	teta = - M_PI_2 ;
water	100:14	0:0	6	teta
op	100:19	0:0	6	=
op	100:21	0:0	6	-
water	100:22	0:0	6	M_PI_2
water	100:28	0:0	6	;
cond	100:30	100:49	5	teta <= M_PI_2 + 0 . 01
water	100:30	0:0	6	teta
op	100:35	0:0	6	<=
water	100:38	0:0	6	M_PI_2
op	100:45	0:0	6	+
water	100:47	0:0	6	0
op	100:48	0:0	6	.
water	100:49	0:0	6	01
forexpr	100:53	100:69	5	teta = teta + 0 . 003
water	100:53	0:0	6	teta
op	100:58	0:0	6	=
water	100:60	0:0	6	teta
op	100:65	0:0	6	+
water	100:67	0:0	6	0
op	100:68	0:0	6	.
water	100:69	0:0	6	003
stmts	101:8	116:8	5	
water	101:8	0:0	6	{
for	102:12	115:12	6	( int i = 0 ;i < 10;i ++)
forinit	0:0	102:27	7	 int i = 0 ;
decl	102:18	102:27	8	int	i
op	102:24	0:0	8	=
water	102:26	0:0	8	0
cond	102:29	102:33	7	i < 10
water	102:29	0:0	8	i
op	102:31	0:0	8	<
water	102:33	0:0	8	10
forexpr	102:37	102:38	7	i ++
water	102:37	0:0	8	i
op	102:38	0:0	8	++
stmts	103:12	115:12	7	
water	103:12	0:0	8	{
water	104:16	0:0	8	y
op	104:18	0:0	8	=
water	104:20	0:0	8	i
call	104:22	104:32	8	*cos
arg	104:28	104:32	9	teta
water	104:28	0:0	10	teta
op	104:34	0:0	8	+
water	104:36	0:0	8	20
water	104:38	0:0	8	;
water	105:16	0:0	8	x
op	105:18	0:0	8	=
water	105:20	0:0	8	i
call	105:22	105:32	8	*sin
arg	105:28	105:32	9	teta
water	105:28	0:0	10	teta
op	105:34	0:0	8	+
water	105:36	0:0	8	start_x
op	105:44	0:0	8	+
water	105:46	0:0	8	240
op	105:50	0:0	8	*
water	105:52	0:0	8	j
water	105:53	0:0	8	;
op	106:16	0:0	8	*
water	106:17	0:0	8	(
water	106:18	0:0	8	p_picture
op	106:27	0:0	8	->
water	106:29	0:0	8	p
op	106:30	0:0	8	[
water	106:31	0:0	8	0
op	106:32	0:0	8	]
op	106:33	0:0	8	.
water	106:34	0:0	8	p_pixels
op	106:43	0:0	8	+
water	107:24	0:0	8	(
water	107:25	0:0	8	p_picture
op	107:34	0:0	8	->
water	107:36	0:0	8	p
op	107:37	0:0	8	[
water	107:38	0:0	8	0
op	107:39	0:0	8	]
op	107:40	0:0	8	.
water	107:41	0:0	8	i_lines
op	107:49	0:0	8	-
water	107:51	0:0	8	y
op	107:53	0:0	8	-
water	107:55	0:0	8	1
water	107:57	0:0	8	)
op	107:59	0:0	8	*
water	107:61	0:0	8	p_picture
op	107:70	0:0	8	->
water	107:72	0:0	8	p
op	107:73	0:0	8	[
water	107:74	0:0	8	0
op	107:75	0:0	8	]
op	107:76	0:0	8	.
water	107:77	0:0	8	i_pitch
op	108:24	0:0	8	+
water	108:26	0:0	8	x
water	108:28	0:0	8	)
op	108:30	0:0	8	=
water	108:32	0:0	8	0
water	108:33	0:0	8	xFF
water	108:36	0:0	8	;
op	109:16	0:0	8	*
water	109:17	0:0	8	(
water	109:18	0:0	8	p_picture
op	109:27	0:0	8	->
water	109:29	0:0	8	p
op	109:30	0:0	8	[
water	109:31	0:0	8	1
op	109:32	0:0	8	]
op	109:33	0:0	8	.
water	109:34	0:0	8	p_pixels
op	109:43	0:0	8	+
water	110:24	0:0	8	(
water	110:25	0:0	8	p_picture
op	110:34	0:0	8	->
water	110:36	0:0	8	p
op	110:37	0:0	8	[
water	110:38	0:0	8	1
op	110:39	0:0	8	]
op	110:40	0:0	8	.
water	110:41	0:0	8	i_lines
op	110:49	0:0	8	-
water	110:51	0:0	8	y
op	110:53	0:0	8	/
water	110:55	0:0	8	2
op	110:57	0:0	8	-
water	110:59	0:0	8	1
water	110:61	0:0	8	)
op	110:63	0:0	8	*
water	110:65	0:0	8	p_picture
op	110:74	0:0	8	->
water	110:76	0:0	8	p
op	110:77	0:0	8	[
water	110:78	0:0	8	1
op	110:79	0:0	8	]
op	110:80	0:0	8	.
water	110:81	0:0	8	i_pitch
op	111:24	0:0	8	+
water	111:26	0:0	8	x
op	111:28	0:0	8	/
water	111:30	0:0	8	2
water	111:32	0:0	8	)
op	111:34	0:0	8	=
water	111:36	0:0	8	0
water	111:37	0:0	8	x80
water	111:40	0:0	8	;
op	112:16	0:0	8	*
water	112:17	0:0	8	(
water	112:18	0:0	8	p_picture
op	112:27	0:0	8	->
water	112:29	0:0	8	p
op	112:30	0:0	8	[
water	112:31	0:0	8	2
op	112:32	0:0	8	]
op	112:33	0:0	8	.
water	112:34	0:0	8	p_pixels
op	112:43	0:0	8	+
water	113:24	0:0	8	(
water	113:25	0:0	8	p_picture
op	113:34	0:0	8	->
water	113:36	0:0	8	p
op	113:37	0:0	8	[
water	113:38	0:0	8	2
op	113:39	0:0	8	]
op	113:40	0:0	8	.
water	113:41	0:0	8	i_lines
op	113:49	0:0	8	-
water	113:51	0:0	8	y
op	113:53	0:0	8	/
water	113:55	0:0	8	2
op	113:57	0:0	8	-
water	113:59	0:0	8	1
water	113:61	0:0	8	)
op	113:63	0:0	8	*
water	113:65	0:0	8	p_picture
op	113:74	0:0	8	->
water	113:76	0:0	8	p
op	113:77	0:0	8	[
water	113:78	0:0	8	2
op	113:79	0:0	8	]
op	113:80	0:0	8	.
water	113:81	0:0	8	i_pitch
op	114:24	0:0	8	+
water	114:26	0:0	8	x
op	114:28	0:0	8	/
water	114:30	0:0	8	2
water	114:32	0:0	8	)
op	114:34	0:0	8	=
water	114:36	0:0	8	0
water	114:37	0:0	8	x80
water	114:40	0:0	8	;
water	115:12	0:0	8	}
water	116:8	0:0	6	}
water	117:4	0:0	4	}
return	118:4	118:12	2	0
water	118:11	0:0	3	0
