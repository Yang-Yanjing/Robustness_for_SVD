func	2:0	50:0	0	int	vout_OSDEpg
params	2:15	0:0	1	
param	2:16	2:35	2	vout_thread_t *	vout
param	2:37	2:56	2	input_item_t *	input
stmnts	0:0	49:22	1	
decl	4:4	4:57	2	char	*now_playing
op	4:22	0:0	2	=
call	4:24	4:56	3	input_item_GetNowPlayingFb
arg	4:51	4:56	4	input
water	4:51	0:0	5	input
decl	5:4	5:25	2	vlc_epg_t	*epg
op	5:19	0:0	2	=
water	5:21	0:0	2	NULL
call	6:4	6:31	2	vlc_mutex_lock
arg	6:19	6:31	3	&input->lock
op	6:19	0:0	4	&
water	6:20	0:0	4	input
op	6:25	0:0	4	->
water	6:27	0:0	4	lock
water	6:32	0:0	2	;
for	8:4	17:4	2	( int i = 0 ;i < input -> i_epg;i ++)
forinit	0:0	8:18	3	 int i = 0 ;
decl	8:9	8:18	4	int	i
op	8:15	0:0	4	=
water	8:17	0:0	4	0
cond	8:20	8:31	3	i < input -> i_epg
water	8:20	0:0	4	i
op	8:22	0:0	4	<
water	8:24	0:0	4	input
op	8:29	0:0	4	->
water	8:31	0:0	4	i_epg
forexpr	8:38	8:39	3	i ++
water	8:38	0:0	4	i
op	8:39	0:0	4	++
stmts	8:43	17:4	3	
water	8:43	0:0	4	{
decl	9:8	9:41	4	vlc_epg_t	*tmp
op	9:23	0:0	4	=
water	9:25	0:0	4	input
op	9:30	0:0	4	->
water	9:32	0:0	4	pp_epg
op	9:38	0:0	4	[
water	9:39	0:0	4	i
op	9:40	0:0	4	]
if	10:8	16:8	4	(tmp -> p_current && tmp -> p_current -> psz_name && now_playing != NULL && !strcmp (tmp -> p_current -> psz_name ,now_playing ))
cond	10:12	12:57	5	tmp -> p_current && tmp -> p_current -> psz_name && now_playing != NULL && !strcmp (tmp -> p_current -> psz_name ,now_playing )
water	10:12	0:0	6	tmp
op	10:15	0:0	6	->
water	10:17	0:0	6	p_current
op	10:27	0:0	6	&&
water	11:12	0:0	6	tmp
op	11:15	0:0	6	->
water	11:17	0:0	6	p_current
op	11:26	0:0	6	->
water	11:28	0:0	6	psz_name
op	11:37	0:0	6	&&
water	11:40	0:0	6	now_playing
op	11:52	0:0	6	!=
water	11:55	0:0	6	NULL
op	11:60	0:0	6	&&
op	12:12	0:0	6	!
call	12:13	12:57	6	strcmp
arg	12:20	12:44	7	tmp->p_current->psz_name
water	12:20	0:0	8	tmp
op	12:23	0:0	8	->
water	12:25	0:0	8	p_current
op	12:34	0:0	8	->
water	12:36	0:0	8	psz_name
arg	12:46	12:57	7	now_playing
water	12:46	0:0	8	now_playing
stmts	12:60	16:8	5	
water	12:60	0:0	6	{
water	13:12	0:0	6	epg
op	13:16	0:0	6	=
call	13:18	13:43	6	vlc_epg_New
arg	13:30	13:43	7	tmp->psz_name
water	13:30	0:0	8	tmp
op	13:33	0:0	8	->
water	13:35	0:0	8	psz_name
water	13:44	0:0	6	;
call	14:12	14:34	6	vlc_epg_Merge
arg	14:26	14:29	7	epg
water	14:26	0:0	8	epg
arg	14:31	14:34	7	tmp
water	14:31	0:0	8	tmp
water	14:35	0:0	6	;
break	15:12	15:17	6	
water	16:8	0:0	6	}
water	17:4	0:0	4	}
call	18:4	18:33	2	vlc_mutex_unlock
arg	18:21	18:33	3	&input->lock
op	18:21	0:0	4	&
water	18:22	0:0	4	input
op	18:27	0:0	4	->
water	18:29	0:0	4	lock
water	18:34	0:0	2	;
call	19:4	19:20	2	free
arg	19:9	19:20	3	now_playing
water	19:9	0:0	4	now_playing
water	19:21	0:0	2	;
if	21:4	22:27	2	(epg == NULL)
cond	21:8	21:15	3	epg == NULL
water	21:8	0:0	4	epg
op	21:12	0:0	4	==
water	21:15	0:0	4	NULL
stmts	22:8	22:27	3	
return	22:8	22:27	4	VLC_EGENERIC
water	22:15	0:0	5	VLC_EGENERIC
decl	23:4	23:56	2	subpicture_updater_sys_t	*sys
op	23:34	0:0	2	=
call	23:36	23:55	3	malloc
arg	23:43	23:55	4	sizeof(*sys)
op	23:43	0:0	5	sizeof
water	23:49	0:0	5	(
op	23:50	0:0	5	*
water	23:51	0:0	5	sys
water	23:54	0:0	5	)
if	24:4	27:4	2	(! sys)
cond	24:8	24:9	3	! sys
op	24:8	0:0	4	!
water	24:9	0:0	4	sys
stmts	24:14	27:4	3	
water	24:14	0:0	4	{
call	25:8	25:26	4	vlc_epg_Delete
arg	25:23	25:26	5	epg
water	25:23	0:0	6	epg
water	25:27	0:0	4	;
return	26:8	26:27	4	VLC_EGENERIC
water	26:15	0:0	5	VLC_EGENERIC
water	27:4	0:0	4	}
water	28:4	0:0	2	sys
op	28:7	0:0	2	->
water	28:9	0:0	2	epg
op	28:13	0:0	2	=
water	28:15	0:0	2	epg
water	28:18	0:0	2	;
decl	29:4	34:5	2	subpicture_updater_t	updater
op	29:33	0:0	2	=
water	29:35	0:0	2	{
op	30:8	0:0	2	.
water	30:9	0:0	2	pf_validate
op	30:21	0:0	2	=
water	30:23	0:0	2	OSDEpgValidate
water	30:37	0:0	2	,
op	31:8	0:0	2	.
water	31:9	0:0	2	pf_update
op	31:21	0:0	2	=
water	31:23	0:0	2	OSDEpgUpdate
water	31:35	0:0	2	,
op	32:8	0:0	2	.
water	32:9	0:0	2	pf_destroy
op	32:21	0:0	2	=
water	32:23	0:0	2	OSDEpgDestroy
water	32:36	0:0	2	,
op	33:8	0:0	2	.
water	33:9	0:0	2	p_sys
op	33:21	0:0	2	=
water	33:23	0:0	2	sys
water	34:4	0:0	2	}
decl	35:4	35:31	2	const mtime_t	now
op	35:22	0:0	2	=
call	35:24	35:30	3	mdate
decl	36:4	36:51	2	subpicture_t	*subpic
op	36:25	0:0	2	=
call	36:27	36:50	3	subpicture_New
arg	36:42	36:50	4	&updater
op	36:42	0:0	5	&
water	36:43	0:0	5	updater
if	37:4	41:4	2	(! subpic)
cond	37:8	37:9	3	! subpic
op	37:8	0:0	4	!
water	37:9	0:0	4	subpic
stmts	37:17	41:4	3	
water	37:17	0:0	4	{
call	38:8	38:31	4	vlc_epg_Delete
arg	38:23	38:31	5	sys->epg
water	38:23	0:0	6	sys
op	38:26	0:0	6	->
water	38:28	0:0	6	epg
water	38:32	0:0	4	;
call	39:8	39:16	4	free
arg	39:13	39:16	5	sys
water	39:13	0:0	6	sys
water	39:17	0:0	4	;
return	40:8	40:27	4	VLC_EGENERIC
water	40:15	0:0	5	VLC_EGENERIC
water	41:4	0:0	4	}
water	42:4	0:0	2	subpic
op	42:10	0:0	2	->
water	42:12	0:0	2	i_channel
op	42:23	0:0	2	=
water	42:25	0:0	2	SPU_DEFAULT_CHANNEL
water	42:44	0:0	2	;
water	43:4	0:0	2	subpic
op	43:10	0:0	2	->
water	43:12	0:0	2	i_start
op	43:23	0:0	2	=
water	43:25	0:0	2	now
water	43:28	0:0	2	;
water	44:4	0:0	2	subpic
op	44:10	0:0	2	->
water	44:12	0:0	2	i_stop
op	44:23	0:0	2	=
water	44:25	0:0	2	now
op	44:29	0:0	2	+
water	44:31	0:0	2	3000
call	44:36	44:50	2	*INT64_C
arg	44:46	44:50	3	1000
water	44:46	0:0	4	1000
water	44:51	0:0	2	;
water	45:4	0:0	2	subpic
op	45:10	0:0	2	->
water	45:12	0:0	2	b_ephemer
op	45:23	0:0	2	=
water	45:25	0:0	2	true
water	45:29	0:0	2	;
water	46:4	0:0	2	subpic
op	46:10	0:0	2	->
water	46:12	0:0	2	b_absolute
op	46:23	0:0	2	=
water	46:25	0:0	2	true
water	46:29	0:0	2	;
water	47:4	0:0	2	subpic
op	47:10	0:0	2	->
water	47:12	0:0	2	b_fade
op	47:23	0:0	2	=
water	47:25	0:0	2	true
water	47:29	0:0	2	;
call	48:4	48:35	2	vout_PutSubpicture
arg	48:23	48:27	3	vout
water	48:23	0:0	4	vout
arg	48:29	48:35	3	subpic
water	48:29	0:0	4	subpic
water	48:36	0:0	2	;
return	49:4	49:22	2	VLC_SUCCESS
water	49:11	0:0	3	VLC_SUCCESS
