func	2:0	35:0	0	static void	StopDecode
params	2:22	0:0	1	
param	2:24	2:41	2	demux_t *	p_demux
stmnts	0:0	34:4	1	
decl	4:4	4:39	2	demux_sys_t	*p_sys
op	4:23	0:0	2	=
water	4:25	0:0	2	p_demux
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
if	5:4	6:14	2	(p_sys -> i_state != STATE_SYNC)
cond	5:9	5:27	3	p_sys -> i_state != STATE_SYNC
water	5:9	0:0	4	p_sys
op	5:14	0:0	4	->
water	5:16	0:0	4	i_state
op	5:24	0:0	4	!=
water	5:27	0:0	4	STATE_SYNC
stmts	6:8	6:14	3	
return	6:8	6:14	4	
call	7:4	7:31	2	free
arg	7:10	7:31	3	p_sys->p_line_buffer
water	7:10	0:0	4	p_sys
op	7:15	0:0	4	->
water	7:17	0:0	4	p_line_buffer
water	7:32	0:0	2	;
call	8:4	8:44	2	block_Release
arg	8:19	8:44	3	p_sys->p_current_picture
water	8:19	0:0	4	p_sys
op	8:24	0:0	4	->
water	8:26	0:0	4	p_current_picture
water	8:45	0:0	2	;
water	9:4	0:0	2	p_sys
op	9:9	0:0	2	->
water	9:11	0:0	2	p_current_picture
op	9:29	0:0	2	=
water	9:31	0:0	2	NULL
water	9:35	0:0	2	;
call	10:4	10:48	2	es_out_Del
arg	10:16	10:28	3	p_demux->out
water	10:16	0:0	4	p_demux
op	10:23	0:0	4	->
water	10:25	0:0	4	out
arg	10:30	10:48	3	p_sys->p_es_video
water	10:30	0:0	4	p_sys
op	10:35	0:0	4	->
water	10:37	0:0	4	p_es_video
water	10:49	0:0	2	;
if	11:4	23:4	2	(p_sys -> b_vbi)
cond	11:9	11:16	3	p_sys -> b_vbi
water	11:9	0:0	4	p_sys
op	11:14	0:0	4	->
water	11:16	0:0	4	b_vbi
stmts	12:4	23:4	3	
water	12:4	0:0	4	{
call	13:8	13:34	4	free
arg	13:14	13:34	5	p_sys->p_wss_buffer
water	13:14	0:0	6	p_sys
op	13:19	0:0	6	->
water	13:21	0:0	6	p_wss_buffer
water	13:35	0:0	4	;
water	14:8	0:0	4	p_sys
op	14:13	0:0	4	->
water	14:15	0:0	4	p_wss_buffer
op	14:28	0:0	4	=
water	14:30	0:0	4	NULL
water	14:34	0:0	4	;
call	15:8	15:48	4	vbi_raw_decoder_destroy
arg	15:33	15:48	5	&p_sys->rd_wss
op	15:33	0:0	6	&
water	15:34	0:0	6	p_sys
op	15:39	0:0	6	->
water	15:41	0:0	6	rd_wss
water	15:49	0:0	4	;
if	16:8	22:8	4	(p_sys -> p_es_telx)
cond	16:13	16:20	5	p_sys -> p_es_telx
water	16:13	0:0	6	p_sys
op	16:18	0:0	6	->
water	16:20	0:0	6	p_es_telx
stmts	17:8	22:8	5	
water	17:8	0:0	6	{
call	18:12	18:55	6	es_out_Del
arg	18:24	18:36	7	p_demux->out
water	18:24	0:0	8	p_demux
op	18:31	0:0	8	->
water	18:33	0:0	8	out
arg	18:38	18:55	7	p_sys->p_es_telx
water	18:38	0:0	8	p_sys
op	18:43	0:0	8	->
water	18:45	0:0	8	p_es_telx
water	18:56	0:0	6	;
call	19:12	19:39	6	free
arg	19:18	19:39	7	p_sys->p_telx_buffer
water	19:18	0:0	8	p_sys
op	19:23	0:0	8	->
water	19:25	0:0	8	p_telx_buffer
water	19:40	0:0	6	;
water	20:12	0:0	6	p_sys
op	20:17	0:0	6	->
water	20:19	0:0	6	p_telx_buffer
op	20:33	0:0	6	=
water	20:35	0:0	6	NULL
water	20:39	0:0	6	;
call	21:12	21:53	6	vbi_raw_decoder_destroy
arg	21:37	21:53	7	&p_sys->rd_telx
op	21:37	0:0	8	&
water	21:38	0:0	8	p_sys
op	21:43	0:0	8	->
water	21:45	0:0	8	rd_telx
water	21:54	0:0	6	;
water	22:8	0:0	6	}
water	23:4	0:0	4	}
for	24:4	34:4	2	( int i = 0 ;i < MAX_AUDIOS;i ++)
forinit	0:0	24:19	3	 int i = 0 ;
decl	24:10	24:19	4	int	i
op	24:16	0:0	4	=
water	24:18	0:0	4	0
cond	24:21	24:25	3	i < MAX_AUDIOS
water	24:21	0:0	4	i
op	24:23	0:0	4	<
water	24:25	0:0	4	MAX_AUDIOS
forexpr	24:37	24:38	3	i ++
water	24:37	0:0	4	i
op	24:38	0:0	4	++
stmts	25:4	34:4	3	
water	25:4	0:0	4	{
decl	26:8	26:50	4	sdi_audio_t	*p_audio
op	26:29	0:0	4	=
op	26:31	0:0	4	&
water	26:32	0:0	4	p_sys
op	26:37	0:0	4	->
water	26:39	0:0	4	p_audios
op	26:47	0:0	4	[
water	26:48	0:0	4	i
op	26:49	0:0	4	]
if	27:8	33:8	4	(p_audio -> i_group && p_audio -> p_es != NULL)
cond	27:13	27:50	5	p_audio -> i_group && p_audio -> p_es != NULL
water	27:13	0:0	6	p_audio
op	27:20	0:0	6	->
water	27:22	0:0	6	i_group
op	27:30	0:0	6	&&
water	27:33	0:0	6	p_audio
op	27:40	0:0	6	->
water	27:42	0:0	6	p_es
op	27:47	0:0	6	!=
water	27:50	0:0	6	NULL
stmts	28:8	33:8	5	
water	28:8	0:0	6	{
call	29:12	29:52	6	es_out_Del
arg	29:24	29:36	7	p_demux->out
water	29:24	0:0	8	p_demux
op	29:31	0:0	8	->
water	29:33	0:0	8	out
arg	29:38	29:52	7	p_audio->p_es
water	29:38	0:0	8	p_audio
op	29:45	0:0	8	->
water	29:47	0:0	8	p_es
water	29:53	0:0	6	;
water	30:12	0:0	6	p_audio
op	30:19	0:0	6	->
water	30:21	0:0	6	p_es
op	30:26	0:0	6	=
water	30:28	0:0	6	NULL
water	30:32	0:0	6	;
call	31:12	31:36	6	free
arg	31:18	31:36	7	p_audio->p_buffer
water	31:18	0:0	8	p_audio
op	31:25	0:0	8	->
water	31:27	0:0	8	p_buffer
water	31:37	0:0	6	;
water	32:12	0:0	6	p_audio
op	32:19	0:0	6	->
water	32:21	0:0	6	p_buffer
op	32:30	0:0	6	=
water	32:32	0:0	6	NULL
water	32:36	0:0	6	;
water	33:8	0:0	6	}
water	34:4	0:0	4	}
