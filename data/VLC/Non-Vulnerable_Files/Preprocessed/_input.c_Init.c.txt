func	2:0	134:0	0	static int	Init
params	2:15	0:0	1	
param	2:17	2:42	2	input_thread_t *	p_input
stmnts	0:0	133:23	1	
decl	4:4	4:9	2	int	i
for	5:4	17:4	2	(i = 0 ;i < p_input -> p -> p_item -> i_options;i ++)
forinit	5:9	5:14	3	i = 0 ;
water	5:9	0:0	4	i
op	5:11	0:0	4	=
water	5:13	0:0	4	0
water	5:14	0:0	4	;
cond	5:16	5:40	3	i < p_input -> p -> p_item -> i_options
water	5:16	0:0	4	i
op	5:18	0:0	4	<
water	5:20	0:0	4	p_input
op	5:27	0:0	4	->
water	5:29	0:0	4	p
op	5:30	0:0	4	->
water	5:32	0:0	4	p_item
op	5:38	0:0	4	->
water	5:40	0:0	4	i_options
forexpr	5:51	5:52	3	i ++
water	5:51	0:0	4	i
op	5:52	0:0	4	++
stmts	6:4	17:4	3	
water	6:4	0:0	4	{
if	7:8	16:8	4	(!strncmp (p_input -> p -> p_item -> ppsz_options [ i ] ,"meta-file" ,9 ))
cond	7:12	7:74	5	!strncmp (p_input -> p -> p_item -> ppsz_options [ i ] ,"meta-file" ,9 )
op	7:12	0:0	6	!
call	7:13	7:74	6	strncmp
arg	7:22	7:57	7	p_input->p->p_item->ppsz_options[i]
water	7:22	0:0	8	p_input
op	7:29	0:0	8	->
water	7:31	0:0	8	p
op	7:32	0:0	8	->
water	7:34	0:0	8	p_item
op	7:40	0:0	8	->
water	7:42	0:0	8	ppsz_options
op	7:54	0:0	8	[
water	7:55	0:0	8	i
op	7:56	0:0	8	]
arg	7:59	7:70	7	"meta-file"
water	7:59	0:0	8	"meta-file"
arg	7:72	7:74	7	9
water	7:72	0:0	8	9
stmts	8:8	16:8	5	
water	8:8	0:0	6	{
call	9:12	9:81	6	msg_Dbg
arg	9:21	9:28	7	p_input
water	9:21	0:0	8	p_input
arg	9:30	9:81	7	"Input is a meta file: disabling unneeded options"
water	9:30	0:0	8	"Input is a meta file: disabling unneeded options"
water	9:82	0:0	6	;
call	10:12	10:47	6	var_SetString
arg	10:27	10:34	7	p_input
water	10:27	0:0	8	p_input
arg	10:36	10:42	7	"sout"
water	10:36	0:0	8	"sout"
arg	10:44	10:47	7	""
water	10:44	0:0	8	""
water	10:48	0:0	6	;
call	11:12	11:52	6	var_SetBool
arg	11:25	11:32	7	p_input
water	11:25	0:0	8	p_input
arg	11:34	11:44	7	"sout-all"
water	11:34	0:0	8	"sout-all"
arg	11:46	11:52	7	false
water	11:46	0:0	8	false
water	11:53	0:0	6	;
call	12:12	12:54	6	var_SetString
arg	12:27	12:34	7	p_input
water	12:27	0:0	8	p_input
arg	12:36	12:49	7	"input-slave"
water	12:36	0:0	8	"input-slave"
arg	12:51	12:54	7	""
water	12:51	0:0	8	""
water	12:55	0:0	6	;
call	13:12	13:55	6	var_SetInteger
arg	13:28	13:35	7	p_input
water	13:28	0:0	8	p_input
arg	13:37	13:51	7	"input-repeat"
water	13:37	0:0	8	"input-repeat"
arg	13:53	13:55	7	0
water	13:53	0:0	8	0
water	13:56	0:0	6	;
call	14:12	14:51	6	var_SetString
arg	14:27	14:34	7	p_input
water	14:27	0:0	8	p_input
arg	14:36	14:46	7	"sub-file"
water	14:36	0:0	8	"sub-file"
arg	14:48	14:51	7	""
water	14:48	0:0	8	""
water	14:52	0:0	6	;
call	15:12	15:63	6	var_SetBool
arg	15:25	15:32	7	p_input
water	15:25	0:0	8	p_input
arg	15:34	15:55	7	"sub-autodetect-file"
water	15:34	0:0	8	"sub-autodetect-file"
arg	15:57	15:63	7	false
water	15:57	0:0	8	false
water	15:64	0:0	6	;
water	16:8	0:0	6	}
water	17:4	0:0	4	}
call	18:4	18:28	2	InitStatistics
arg	18:20	18:28	3	p_input
water	18:20	0:0	4	p_input
water	18:29	0:0	2	;
if	20:4	21:18	2	(InitSout (p_input ))
cond	20:8	20:26	3	InitSout (p_input )
call	20:8	20:26	4	InitSout
arg	20:18	20:26	5	p_input
water	20:18	0:0	6	p_input
stmts	21:8	21:18	3	
goto	21:8	21:18	4	error
water	21:13	0:0	5	error
water	24:4	0:0	2	p_input
op	24:11	0:0	2	->
water	24:13	0:0	2	p
op	24:14	0:0	2	->
water	24:16	0:0	2	p_es_out
op	24:25	0:0	2	=
call	24:27	24:110	2	input_EsOutTimeshiftNew
arg	24:52	24:59	3	p_input
water	24:52	0:0	4	p_input
arg	24:61	24:89	3	p_input->p->p_es_out_display
water	24:61	0:0	4	p_input
op	24:68	0:0	4	->
water	24:70	0:0	4	p
op	24:71	0:0	4	->
water	24:73	0:0	4	p_es_out_display
arg	24:91	24:110	3	p_input->p->i_rate
water	24:91	0:0	4	p_input
op	24:98	0:0	4	->
water	24:100	0:0	4	p
op	24:101	0:0	4	->
water	24:103	0:0	4	i_rate
water	24:111	0:0	2	;
call	26:4	26:42	2	input_ChangeState
arg	26:23	26:30	3	p_input
water	26:23	0:0	4	p_input
arg	26:32	26:42	3	OPENING_S
water	26:32	0:0	4	OPENING_S
water	26:43	0:0	2	;
call	27:4	27:39	2	input_SendEventCache
arg	27:26	27:33	3	p_input
water	27:26	0:0	4	p_input
arg	27:35	27:39	3	0.0
water	27:35	0:0	4	0
op	27:36	0:0	4	.
water	27:37	0:0	4	0
water	27:40	0:0	2	;
if	29:4	33:4	2	(InputSourceInit (p_input ,& p_input -> p -> input ,p_input -> p -> p_item -> psz_uri ,NULL ,false ))
cond	29:8	30:66	3	InputSourceInit (p_input ,& p_input -> p -> input ,p_input -> p -> p_item -> psz_uri ,NULL ,false )
call	29:8	30:66	4	InputSourceInit
arg	29:25	29:32	5	p_input
water	29:25	0:0	6	p_input
arg	29:34	29:52	5	&p_input->p->input
op	29:34	0:0	6	&
water	29:35	0:0	6	p_input
op	29:42	0:0	6	->
water	29:44	0:0	6	p
op	29:45	0:0	6	->
water	29:47	0:0	6	input
arg	30:25	30:52	5	p_input->p->p_item->psz_uri
water	30:25	0:0	6	p_input
op	30:32	0:0	6	->
water	30:34	0:0	6	p
op	30:35	0:0	6	->
water	30:37	0:0	6	p_item
op	30:43	0:0	6	->
water	30:45	0:0	6	psz_uri
arg	30:54	30:58	5	NULL
water	30:54	0:0	6	NULL
arg	30:60	30:66	5	false
water	30:60	0:0	6	false
stmts	31:4	33:4	3	
water	31:4	0:0	4	{
goto	32:8	32:18	4	error
water	32:13	0:0	5	error
water	33:4	0:0	4	}
call	34:4	34:23	2	InitTitle
arg	34:15	34:23	3	p_input
water	34:15	0:0	4	p_input
water	34:24	0:0	2	;
decl	37:4	37:20	2	mtime_t	i_length
if	38:4	40:20	2	(demux_Control (p_input -> p -> input . p_demux ,DEMUX_GET_LENGTH ,& i_length ))
cond	38:8	39:35	3	demux_Control (p_input -> p -> input . p_demux ,DEMUX_GET_LENGTH ,& i_length )
call	38:8	39:35	4	demux_Control
arg	38:23	38:48	5	p_input->p->input.p_demux
water	38:23	0:0	6	p_input
op	38:30	0:0	6	->
water	38:32	0:0	6	p
op	38:33	0:0	6	->
water	38:35	0:0	6	input
op	38:40	0:0	6	.
water	38:41	0:0	6	p_demux
arg	38:50	38:66	5	DEMUX_GET_LENGTH
water	38:50	0:0	6	DEMUX_GET_LENGTH
arg	39:25	39:35	5	&i_length
op	39:25	0:0	6	&
water	39:26	0:0	6	i_length
stmts	40:8	40:20	3	
water	40:8	0:0	4	i_length
op	40:17	0:0	4	=
water	40:19	0:0	4	0
water	40:20	0:0	4	;
if	41:4	42:63	2	(i_length <= 0)
cond	41:8	41:20	3	i_length <= 0
water	41:8	0:0	4	i_length
op	41:17	0:0	4	<=
water	41:20	0:0	4	0
stmts	42:8	42:63	3	
water	42:8	0:0	4	i_length
op	42:17	0:0	4	=
call	42:19	42:62	4	input_item_GetDuration
arg	42:43	42:62	5	p_input->p->p_item
water	42:43	0:0	6	p_input
op	42:50	0:0	6	->
water	42:52	0:0	6	p
op	42:53	0:0	6	->
water	42:55	0:0	6	p_item
water	42:63	0:0	4	;
call	43:4	43:45	2	input_SendEventLength
arg	43:27	43:34	3	p_input
water	43:27	0:0	4	p_input
arg	43:36	43:45	3	i_length
water	43:36	0:0	4	i_length
water	43:46	0:0	2	;
call	44:4	44:45	2	input_SendEventPosition
arg	44:29	44:36	3	p_input
water	44:29	0:0	4	p_input
arg	44:38	44:41	3	0.0
water	44:38	0:0	4	0
op	44:39	0:0	4	.
water	44:40	0:0	4	0
arg	44:43	44:45	3	0
water	44:43	0:0	4	0
water	44:46	0:0	2	;
if	45:4	57:4	2	(! p_input -> b_preparsing)
cond	45:8	45:18	3	! p_input -> b_preparsing
op	45:8	0:0	4	!
water	45:9	0:0	4	p_input
op	45:16	0:0	4	->
water	45:18	0:0	4	b_preparsing
stmts	46:4	57:4	3	
water	46:4	0:0	4	{
call	47:8	47:28	4	StartTitle
arg	47:20	47:28	5	p_input
water	47:20	0:0	6	p_input
water	47:29	0:0	4	;
call	48:8	48:31	4	LoadSubtitles
arg	48:23	48:31	5	p_input
water	48:23	0:0	6	p_input
water	48:32	0:0	4	;
call	49:8	49:28	4	LoadSlaves
arg	49:20	49:28	5	p_input
water	49:20	0:0	6	p_input
water	49:29	0:0	4	;
call	50:8	50:30	4	InitPrograms
arg	50:22	50:30	5	p_input
water	50:22	0:0	6	p_input
water	50:31	0:0	4	;
decl	51:8	51:59	4	double	f_rate
op	51:22	0:0	4	=
call	51:24	51:58	5	var_InheritFloat
arg	51:42	51:49	6	p_input
water	51:42	0:0	7	p_input
arg	51:51	51:58	6	"rate"
water	51:51	0:0	7	"rate"
if	52:8	56:8	4	(f_rate != 0 . 0 && f_rate != 1 . 0)
cond	52:12	52:41	5	f_rate != 0 . 0 && f_rate != 1 . 0
water	52:12	0:0	6	f_rate
op	52:19	0:0	6	!=
water	52:22	0:0	6	0
op	52:23	0:0	6	.
water	52:24	0:0	6	0
op	52:26	0:0	6	&&
water	52:29	0:0	6	f_rate
op	52:36	0:0	6	!=
water	52:39	0:0	6	1
op	52:40	0:0	6	.
water	52:41	0:0	6	0
stmts	53:8	56:8	5	
water	53:8	0:0	6	{
decl	54:12	54:70	6	vlc_value_t	val
op	54:28	0:0	6	=
water	54:30	0:0	6	{
op	54:32	0:0	6	.
water	54:33	0:0	6	i_int
op	54:39	0:0	6	=
water	54:41	0:0	6	INPUT_RATE_DEFAULT
op	54:60	0:0	6	/
water	54:62	0:0	6	f_rate
water	54:69	0:0	6	}
call	55:12	55:69	6	input_ControlPush
arg	55:31	55:38	7	p_input
water	55:31	0:0	8	p_input
arg	55:40	55:62	7	INPUT_CONTROL_SET_RATE
water	55:40	0:0	8	INPUT_CONTROL_SET_RATE
arg	55:64	55:69	7	&val
op	55:64	0:0	8	&
water	55:65	0:0	8	val
water	55:70	0:0	6	;
water	56:8	0:0	6	}
water	57:4	0:0	4	}
if	58:4	69:4	2	(! p_input -> b_preparsing && p_input -> p -> p_sout)
cond	58:8	58:46	3	! p_input -> b_preparsing && p_input -> p -> p_sout
op	58:8	0:0	4	!
water	58:9	0:0	4	p_input
op	58:16	0:0	4	->
water	58:18	0:0	4	b_preparsing
op	58:31	0:0	4	&&
water	58:34	0:0	4	p_input
op	58:41	0:0	4	->
water	58:43	0:0	4	p
op	58:44	0:0	4	->
water	58:46	0:0	4	p_sout
stmts	59:4	69:4	3	
water	59:4	0:0	4	{
water	60:8	0:0	4	p_input
op	60:15	0:0	4	->
water	60:17	0:0	4	p
op	60:18	0:0	4	->
water	60:20	0:0	4	b_out_pace_control
op	60:39	0:0	4	=
water	60:41	0:0	4	(
water	60:42	0:0	4	p_input
op	60:49	0:0	4	->
water	60:51	0:0	4	p
op	60:52	0:0	4	->
water	60:54	0:0	4	p_sout
op	60:60	0:0	4	->
water	60:62	0:0	4	i_out_pace_nocontrol
op	60:83	0:0	4	>
water	60:85	0:0	4	0
water	60:86	0:0	4	)
water	60:87	0:0	4	;
if	61:8	66:8	4	(p_input -> p -> b_can_pace_control && p_input -> p -> b_out_pace_control)
cond	61:12	61:58	5	p_input -> p -> b_can_pace_control && p_input -> p -> b_out_pace_control
water	61:12	0:0	6	p_input
op	61:19	0:0	6	->
water	61:21	0:0	6	p
op	61:22	0:0	6	->
water	61:24	0:0	6	b_can_pace_control
op	61:43	0:0	6	&&
water	61:46	0:0	6	p_input
op	61:53	0:0	6	->
water	61:55	0:0	6	p
op	61:56	0:0	6	->
water	61:58	0:0	6	b_out_pace_control
stmts	62:8	66:8	5	
water	62:8	0:0	6	{
call	65:12	65:74	6	vlc_set_priority
arg	65:30	65:48	7	p_input->p->thread
water	65:30	0:0	8	p_input
op	65:37	0:0	8	->
water	65:39	0:0	8	p
op	65:40	0:0	8	->
water	65:42	0:0	8	thread
arg	65:50	65:74	7	VLC_THREAD_PRIORITY_LOW
water	65:50	0:0	8	VLC_THREAD_PRIORITY_LOW
water	65:75	0:0	6	;
water	66:8	0:0	6	}
call	67:8	68:67	4	msg_Dbg
arg	67:17	67:24	5	p_input
water	67:17	0:0	6	p_input
arg	67:26	67:47	5	"starting in %s mode"
water	67:26	0:0	6	"starting in %s mode"
arg	68:17	68:67	5	p_input->p->b_out_pace_control?"async":"sync"
water	68:17	0:0	6	p_input
op	68:24	0:0	6	->
water	68:26	0:0	6	p
op	68:27	0:0	6	->
water	68:29	0:0	6	b_out_pace_control
water	68:48	0:0	6	?
water	68:50	0:0	6	"async"
water	68:58	0:0	6	:
water	68:60	0:0	6	"sync"
water	68:68	0:0	4	;
water	69:4	0:0	4	}
decl	70:4	70:39	2	vlc_meta_t	*p_meta
op	70:23	0:0	2	=
call	70:25	70:38	3	vlc_meta_New
if	71:4	82:4	2	(p_meta != NULL)
cond	71:8	71:18	3	p_meta != NULL
water	71:8	0:0	4	p_meta
op	71:15	0:0	4	!=
water	71:18	0:0	4	NULL
stmts	72:4	82:4	3	
water	72:4	0:0	4	{
call	74:8	74:39	4	InputMetaUser
arg	74:23	74:30	5	p_input
water	74:23	0:0	6	p_input
arg	74:32	74:39	5	p_meta
water	74:32	0:0	6	p_meta
water	74:40	0:0	4	;
call	76:8	76:61	4	InputSourceMeta
arg	76:25	76:32	5	p_input
water	76:25	0:0	6	p_input
arg	76:34	76:52	5	&p_input->p->input
op	76:34	0:0	6	&
water	76:35	0:0	6	p_input
op	76:42	0:0	6	->
water	76:44	0:0	6	p
op	76:45	0:0	6	->
water	76:47	0:0	6	input
arg	76:54	76:61	5	p_meta
water	76:54	0:0	6	p_meta
water	76:62	0:0	4	;
for	78:8	79:68	4	( int i = 0 ;i < p_input -> p -> i_slave;i ++)
forinit	0:0	78:22	5	 int i = 0 ;
decl	78:13	78:22	6	int	i
op	78:19	0:0	6	=
water	78:21	0:0	6	0
cond	78:24	78:40	5	i < p_input -> p -> i_slave
water	78:24	0:0	6	i
op	78:26	0:0	6	<
water	78:28	0:0	6	p_input
op	78:35	0:0	6	->
water	78:37	0:0	6	p
op	78:38	0:0	6	->
water	78:40	0:0	6	i_slave
forexpr	78:49	78:50	5	i ++
water	78:49	0:0	6	i
op	78:50	0:0	6	++
stmts	79:12	79:68	5	
call	79:12	79:67	6	InputSourceMeta
arg	79:29	79:36	7	p_input
water	79:29	0:0	8	p_input
arg	79:38	79:58	7	p_input->p->slave[i]
water	79:38	0:0	8	p_input
op	79:45	0:0	8	->
water	79:47	0:0	8	p
op	79:48	0:0	8	->
water	79:50	0:0	8	slave
op	79:55	0:0	8	[
water	79:56	0:0	8	i
op	79:57	0:0	8	]
arg	79:60	79:67	7	p_meta
water	79:60	0:0	8	p_meta
water	79:68	0:0	6	;
call	80:8	80:60	4	es_out_ControlSetMeta
arg	80:31	80:51	5	p_input->p->p_es_out
water	80:31	0:0	6	p_input
op	80:38	0:0	6	->
water	80:40	0:0	6	p
op	80:41	0:0	6	->
water	80:43	0:0	6	p_es_out
arg	80:53	80:60	5	p_meta
water	80:53	0:0	6	p_meta
water	80:61	0:0	4	;
call	81:8	81:32	4	vlc_meta_Delete
arg	81:25	81:32	5	p_meta
water	81:25	0:0	6	p_meta
water	81:33	0:0	4	;
water	82:4	0:0	4	}
call	83:4	84:41	2	msg_Dbg
arg	83:13	83:20	3	p_input
water	83:13	0:0	4	p_input
arg	83:22	83:48	3	"`%s' successfully opened"
water	83:22	0:0	4	"`%s' successfully opened"
arg	84:13	84:41	3	p_input->p->p_item->psz_uri
water	84:13	0:0	4	p_input
op	84:20	0:0	4	->
water	84:22	0:0	4	p
op	84:23	0:0	4	->
water	84:25	0:0	4	p_item
op	84:31	0:0	4	->
water	84:33	0:0	4	psz_uri
water	84:42	0:0	2	;
call	86:4	86:42	2	input_ChangeState
arg	86:23	86:30	3	p_input
water	86:23	0:0	4	p_input
arg	86:32	86:42	3	PLAYING_S
water	86:32	0:0	4	PLAYING_S
water	86:43	0:0	2	;
return	87:4	87:22	2	VLC_SUCCESS
water	87:11	0:0	3	VLC_SUCCESS
label	88:0	88:5	2	error :
call	89:4	89:40	2	input_ChangeState
arg	89:23	89:30	3	p_input
water	89:23	0:0	4	p_input
arg	89:32	89:40	3	ERROR_S
water	89:32	0:0	4	ERROR_S
water	89:41	0:0	2	;
if	90:4	91:45	2	(p_input -> p -> p_es_out)
cond	90:8	90:20	3	p_input -> p -> p_es_out
water	90:8	0:0	4	p_input
op	90:15	0:0	4	->
water	90:17	0:0	4	p
op	90:18	0:0	4	->
water	90:20	0:0	4	p_es_out
stmts	91:8	91:45	3	
call	91:8	91:44	4	es_out_Delete
arg	91:23	91:44	5	p_input->p->p_es_out
water	91:23	0:0	6	p_input
op	91:30	0:0	6	->
water	91:32	0:0	6	p
op	91:33	0:0	6	->
water	91:35	0:0	6	p_es_out
water	91:45	0:0	4	;
call	92:4	92:66	2	es_out_SetMode
arg	92:20	92:48	3	p_input->p->p_es_out_display
water	92:20	0:0	4	p_input
op	92:27	0:0	4	->
water	92:29	0:0	4	p
op	92:30	0:0	4	->
water	92:32	0:0	4	p_es_out_display
arg	92:50	92:66	3	ES_OUT_MODE_END
water	92:50	0:0	4	ES_OUT_MODE_END
water	92:67	0:0	2	;
if	93:4	101:4	2	(p_input -> p -> p_resource)
cond	93:8	93:20	3	p_input -> p -> p_resource
water	93:8	0:0	4	p_input
op	93:15	0:0	4	->
water	93:17	0:0	4	p
op	93:18	0:0	4	->
water	93:20	0:0	4	p_resource
stmts	94:4	101:4	3	
water	94:4	0:0	4	{
if	95:8	97:67	4	(p_input -> p -> p_sout)
cond	95:12	95:24	5	p_input -> p -> p_sout
water	95:12	0:0	6	p_input
op	95:19	0:0	6	->
water	95:21	0:0	6	p
op	95:22	0:0	6	->
water	95:24	0:0	6	p_sout
stmts	96:12	97:67	5	
call	96:12	97:66	6	input_resource_RequestSout
arg	96:40	96:62	7	p_input->p->p_resource
water	96:40	0:0	8	p_input
op	96:47	0:0	8	->
water	96:49	0:0	8	p
op	96:50	0:0	8	->
water	96:52	0:0	8	p_resource
arg	97:41	97:59	7	p_input->p->p_sout
water	97:41	0:0	8	p_input
op	97:48	0:0	8	->
water	97:50	0:0	8	p
op	97:51	0:0	8	->
water	97:53	0:0	8	p_sout
arg	97:61	97:66	7	NULL
water	97:61	0:0	8	NULL
water	97:67	0:0	6	;
call	98:8	98:62	4	input_resource_SetInput
arg	98:33	98:55	5	p_input->p->p_resource
water	98:33	0:0	6	p_input
op	98:40	0:0	6	->
water	98:42	0:0	6	p
op	98:43	0:0	6	->
water	98:45	0:0	6	p_resource
arg	98:57	98:62	5	NULL
water	98:57	0:0	6	NULL
water	98:63	0:0	4	;
if	99:8	100:70	4	(p_input -> p -> p_resource_private)
cond	99:12	99:24	5	p_input -> p -> p_resource_private
water	99:12	0:0	6	p_input
op	99:19	0:0	6	->
water	99:21	0:0	6	p
op	99:22	0:0	6	->
water	99:24	0:0	6	p_resource_private
stmts	100:12	100:70	5	
call	100:12	100:69	6	input_resource_Terminate
arg	100:38	100:69	7	p_input->p->p_resource_private
water	100:38	0:0	8	p_input
op	100:45	0:0	8	->
water	100:47	0:0	8	p
op	100:48	0:0	8	->
water	100:50	0:0	8	p_resource_private
water	100:70	0:0	6	;
water	101:4	0:0	4	}
if	102:4	128:4	2	(! p_input -> b_preparsing &&libvlc_stats (p_input ))
cond	102:8	102:56	3	! p_input -> b_preparsing &&libvlc_stats (p_input )
op	102:8	0:0	4	!
water	102:9	0:0	4	p_input
op	102:16	0:0	4	->
water	102:18	0:0	4	b_preparsing
op	102:31	0:0	4	&&
call	102:34	102:56	4	libvlc_stats
arg	102:48	102:56	5	p_input
water	102:48	0:0	6	p_input
stmts	103:4	128:4	3	
water	103:4	0:0	4	{
water	105:35	0:0	4	stats_CounterClean
water	105:53	0:0	4	(
water	105:55	0:0	4	p_input
op	105:62	0:0	4	->
water	105:64	0:0	4	p
op	105:65	0:0	4	->
water	105:67	0:0	4	counters
op	105:75	0:0	4	.
water	105:76	0:0	4	p_
water	106:31	0:0	4	p_input
op	106:38	0:0	4	->
water	106:40	0:0	4	p
op	106:41	0:0	4	->
water	106:43	0:0	4	counters
op	106:51	0:0	4	.
water	106:52	0:0	4	p_
call	107:8	107:33	4	EXIT_COUNTER
arg	107:22	107:33	5	read_bytes
water	107:22	0:0	6	read_bytes
water	107:34	0:0	4	;
call	108:8	108:35	4	EXIT_COUNTER
arg	108:22	108:35	5	read_packets
water	108:22	0:0	6	read_packets
water	108:36	0:0	4	;
call	109:8	109:33	4	EXIT_COUNTER
arg	109:22	109:33	5	demux_read
water	109:22	0:0	6	demux_read
water	109:34	0:0	4	;
call	110:8	110:36	4	EXIT_COUNTER
arg	110:22	110:36	5	input_bitrate
water	110:22	0:0	6	input_bitrate
water	110:37	0:0	4	;
call	111:8	111:36	4	EXIT_COUNTER
arg	111:22	111:36	5	demux_bitrate
water	111:22	0:0	6	demux_bitrate
water	111:37	0:0	4	;
call	112:8	112:38	4	EXIT_COUNTER
arg	112:22	112:38	5	demux_corrupted
water	112:22	0:0	6	demux_corrupted
water	112:39	0:0	4	;
call	113:8	113:42	4	EXIT_COUNTER
arg	113:22	113:42	5	demux_discontinuity
water	113:22	0:0	6	demux_discontinuity
water	113:43	0:0	4	;
call	114:8	114:38	4	EXIT_COUNTER
arg	114:22	114:38	5	played_abuffers
water	114:22	0:0	6	played_abuffers
water	114:39	0:0	4	;
call	115:8	115:36	4	EXIT_COUNTER
arg	115:22	115:36	5	lost_abuffers
water	115:22	0:0	6	lost_abuffers
water	115:37	0:0	4	;
call	116:8	116:41	4	EXIT_COUNTER
arg	116:22	116:41	5	displayed_pictures
water	116:22	0:0	6	displayed_pictures
water	116:42	0:0	4	;
call	117:8	117:36	4	EXIT_COUNTER
arg	117:22	117:36	5	lost_pictures
water	117:22	0:0	6	lost_pictures
water	117:37	0:0	4	;
call	118:8	118:36	4	EXIT_COUNTER
arg	118:22	118:36	5	decoded_audio
water	118:22	0:0	6	decoded_audio
water	118:37	0:0	4	;
call	119:8	119:36	4	EXIT_COUNTER
arg	119:22	119:36	5	decoded_video
water	119:22	0:0	6	decoded_video
water	119:37	0:0	4	;
call	120:8	120:34	4	EXIT_COUNTER
arg	120:22	120:34	5	decoded_sub
water	120:22	0:0	6	decoded_sub
water	120:35	0:0	4	;
if	121:8	126:8	4	(p_input -> p -> p_sout)
cond	121:12	121:24	5	p_input -> p -> p_sout
water	121:12	0:0	6	p_input
op	121:19	0:0	6	->
water	121:21	0:0	6	p
op	121:22	0:0	6	->
water	121:24	0:0	6	p_sout
stmts	122:8	126:8	5	
water	122:8	0:0	6	{
call	123:12	123:44	6	EXIT_COUNTER
arg	123:26	123:44	7	sout_sent_packets
water	123:26	0:0	8	sout_sent_packets
water	123:45	0:0	6	;
call	124:12	124:42	6	EXIT_COUNTER
arg	124:26	124:42	7	sout_sent_bytes
water	124:26	0:0	8	sout_sent_bytes
water	124:43	0:0	6	;
call	125:12	125:44	6	EXIT_COUNTER
arg	125:26	125:44	7	sout_send_bitrate
water	125:26	0:0	8	sout_send_bitrate
water	125:45	0:0	6	;
water	126:8	0:0	6	}
water	128:4	0:0	4	}
water	130:4	0:0	2	p_input
op	130:11	0:0	2	->
water	130:13	0:0	2	p
op	130:14	0:0	2	->
water	130:16	0:0	2	input
op	130:21	0:0	2	.
water	130:22	0:0	2	p_demux
op	130:30	0:0	2	=
water	130:32	0:0	2	NULL
water	130:36	0:0	2	;
water	131:4	0:0	2	p_input
op	131:11	0:0	2	->
water	131:13	0:0	2	p
op	131:14	0:0	2	->
water	131:16	0:0	2	p_es_out
op	131:25	0:0	2	=
water	131:27	0:0	2	NULL
water	131:31	0:0	2	;
water	132:4	0:0	2	p_input
op	132:11	0:0	2	->
water	132:13	0:0	2	p
op	132:14	0:0	2	->
water	132:16	0:0	2	p_sout
op	132:23	0:0	2	=
water	132:25	0:0	2	NULL
water	132:29	0:0	2	;
return	133:4	133:23	2	VLC_EGENERIC
water	133:11	0:0	3	VLC_EGENERIC
