func	2:0	38:0	0	static void	SVCDSubRenderImage
params	2:30	0:0	1	
param	2:32	2:48	2	decoder_t *	p_dec
param	2:50	2:65	2	block_t *	p_data
param	3:16	3:46	2	subpicture_region_t *	p_region
stmnts	0:0	37:4	1	
decl	5:4	5:39	2	decoder_sys_t	*p_sys
op	5:25	0:0	2	=
water	5:27	0:0	2	p_dec
op	5:32	0:0	2	->
water	5:34	0:0	2	p_sys
decl	6:4	6:51	2	uint8_t	*p_dest
op	6:20	0:0	2	=
water	6:22	0:0	2	p_region
op	6:30	0:0	2	->
water	6:32	0:0	2	p_picture
op	6:41	0:0	2	->
water	6:43	0:0	2	Y_PIXELS
decl	7:4	7:15	2	int	i_field
decl	8:4	8:23	2	int	i_row
water	8:13	0:0	2	,
decl	8:4	8:23	2	int	i_column
decl	9:4	9:28	2	uint8_t	i_color
water	9:19	0:0	2	,
decl	9:4	9:28	2	uint8_t	i_count
decl	10:4	10:11	2	bs_t	bs
call	11:4	12:54	2	bs_init
arg	11:13	11:16	3	&bs
op	11:13	0:0	4	&
water	11:14	0:0	4	bs
arg	11:18	11:58	3	p_data->p_buffer+p_sys->i_image_offset
water	11:18	0:0	4	p_data
op	11:24	0:0	4	->
water	11:26	0:0	4	p_buffer
op	11:35	0:0	4	+
water	11:37	0:0	4	p_sys
op	11:42	0:0	4	->
water	11:44	0:0	4	i_image_offset
arg	12:13	12:54	3	p_data->i_buffer-p_sys->i_image_offset
water	12:13	0:0	4	p_data
op	12:19	0:0	4	->
water	12:21	0:0	4	i_buffer
op	12:30	0:0	4	-
water	12:32	0:0	4	p_sys
op	12:37	0:0	4	->
water	12:39	0:0	4	i_image_offset
water	12:55	0:0	2	;
for	13:4	37:4	2	(i_field = 0 ;i_field < 2;i_field ++)
forinit	13:9	13:20	3	i_field = 0 ;
water	13:9	0:0	4	i_field
op	13:17	0:0	4	=
water	13:19	0:0	4	0
water	13:20	0:0	4	;
cond	13:22	13:32	3	i_field < 2
water	13:22	0:0	4	i_field
op	13:30	0:0	4	<
water	13:32	0:0	4	2
forexpr	13:35	13:42	3	i_field ++
water	13:35	0:0	4	i_field
op	13:42	0:0	4	++
stmts	14:4	37:4	3	
water	14:4	0:0	4	{
for	15:8	31:8	4	(i_row = i_field ;i_row < p_sys -> i_height;i_row += 2)
forinit	15:13	15:28	5	i_row = i_field ;
water	15:13	0:0	6	i_row
op	15:19	0:0	6	=
water	15:21	0:0	6	i_field
water	15:28	0:0	6	;
cond	15:30	15:45	5	i_row < p_sys -> i_height
water	15:30	0:0	6	i_row
op	15:36	0:0	6	<
water	15:38	0:0	6	p_sys
op	15:43	0:0	6	->
water	15:45	0:0	6	i_height
forexpr	15:55	15:64	5	i_row += 2
water	15:55	0:0	6	i_row
op	15:61	0:0	6	+=
water	15:64	0:0	6	2
stmts	16:8	31:8	5	
water	16:8	0:0	6	{
for	17:12	29:12	6	(i_column = 0 ;i_column < p_sys -> i_width;i_column ++)
forinit	17:17	17:29	7	i_column = 0 ;
water	17:17	0:0	8	i_column
op	17:26	0:0	8	=
water	17:28	0:0	8	0
water	17:29	0:0	8	;
cond	17:31	17:49	7	i_column < p_sys -> i_width
water	17:31	0:0	8	i_column
op	17:40	0:0	8	<
water	17:42	0:0	8	p_sys
op	17:47	0:0	8	->
water	17:49	0:0	8	i_width
forexpr	17:58	17:66	7	i_column ++
water	17:58	0:0	8	i_column
op	17:66	0:0	8	++
stmts	18:12	29:12	7	
water	18:12	0:0	8	{
water	19:16	0:0	8	i_color
op	19:24	0:0	8	=
call	19:26	19:42	8	bs_read
arg	19:35	19:38	9	&bs
op	19:35	0:0	10	&
water	19:36	0:0	10	bs
arg	19:40	19:42	9	2
water	19:40	0:0	10	2
water	19:43	0:0	8	;
if	20:16	27:16	8	(i_color == 0 && ( i_count =bs_read (& bs ,2 ) ))
cond	20:20	20:64	9	i_color == 0 && ( i_count =bs_read (& bs ,2 ) )
water	20:20	0:0	10	i_color
op	20:28	0:0	10	==
water	20:31	0:0	10	0
op	20:33	0:0	10	&&
water	20:36	0:0	10	(
water	20:37	0:0	10	i_count
op	20:45	0:0	10	=
call	20:47	20:63	10	bs_read
arg	20:56	20:59	11	&bs
op	20:56	0:0	12	&
water	20:57	0:0	12	bs
arg	20:61	20:63	11	2
water	20:61	0:0	12	2
water	20:64	0:0	10	)
stmts	21:16	27:16	9	
water	21:16	0:0	10	{
water	22:20	0:0	10	i_count
op	22:28	0:0	10	=
call	22:30	22:72	10	__MIN
arg	22:37	22:44	11	i_count
water	22:37	0:0	12	i_count
arg	22:46	22:72	11	p_sys->i_width-i_column
water	22:46	0:0	12	p_sys
op	22:51	0:0	12	->
water	22:53	0:0	12	i_width
op	22:61	0:0	12	-
water	22:63	0:0	12	i_column
water	22:73	0:0	10	;
call	23:20	24:62	10	memset
arg	23:28	24:45	11	&p_dest[i_row*p_region->p_picture->Y_PITCH+i_column]
op	23:28	0:0	12	&
water	23:29	0:0	12	p_dest
op	23:35	0:0	12	[
water	23:36	0:0	12	i_row
op	23:42	0:0	12	*
water	23:44	0:0	12	p_region
op	23:52	0:0	12	->
water	23:54	0:0	12	p_picture
op	23:63	0:0	12	->
water	23:65	0:0	12	Y_PITCH
op	23:73	0:0	12	+
water	24:36	0:0	12	i_column
op	24:44	0:0	12	]
arg	24:47	24:48	11	0
water	24:47	0:0	12	0
arg	24:50	24:62	11	i_count+1
water	24:50	0:0	12	i_count
op	24:58	0:0	12	+
water	24:60	0:0	12	1
water	24:63	0:0	10	;
water	25:20	0:0	10	i_column
op	25:29	0:0	10	+=
water	25:32	0:0	10	i_count
water	25:39	0:0	10	;
continue	26:20	26:28	10	
water	27:16	0:0	10	}
water	28:16	0:0	8	p_dest
op	28:22	0:0	8	[
water	28:23	0:0	8	i_row
op	28:29	0:0	8	*
water	28:31	0:0	8	p_region
op	28:39	0:0	8	->
water	28:41	0:0	8	p_picture
op	28:50	0:0	8	->
water	28:52	0:0	8	Y_PITCH
op	28:60	0:0	8	+
water	28:62	0:0	8	i_column
op	28:70	0:0	8	]
op	28:72	0:0	8	=
water	28:74	0:0	8	i_color
water	28:81	0:0	8	;
water	29:12	0:0	8	}
call	30:12	30:26	6	bs_align
arg	30:22	30:26	7	&bs
op	30:22	0:0	8	&
water	30:23	0:0	8	bs
water	30:27	0:0	6	;
water	31:8	0:0	6	}
call	33:8	36:44	4	bs_init
arg	33:17	33:20	5	&bs
op	33:17	0:0	6	&
water	33:18	0:0	6	bs
arg	33:22	34:43	5	p_data->p_buffer+p_sys->i_image_offset+p_sys->second_field_offset
water	33:22	0:0	6	p_data
op	33:28	0:0	6	->
water	33:30	0:0	6	p_buffer
op	33:39	0:0	6	+
water	33:41	0:0	6	p_sys
op	33:46	0:0	6	->
water	33:48	0:0	6	i_image_offset
op	33:63	0:0	6	+
water	34:17	0:0	6	p_sys
op	34:22	0:0	6	->
water	34:24	0:0	6	second_field_offset
arg	35:17	36:44	5	p_data->i_buffer-p_sys->i_image_offset-p_sys->second_field_offset
water	35:17	0:0	6	p_data
op	35:23	0:0	6	->
water	35:25	0:0	6	i_buffer
op	35:34	0:0	6	-
water	35:36	0:0	6	p_sys
op	35:41	0:0	6	->
water	35:43	0:0	6	i_image_offset
op	35:58	0:0	6	-
water	36:17	0:0	6	p_sys
op	36:22	0:0	6	->
water	36:24	0:0	6	second_field_offset
water	36:45	0:0	4	;
water	37:4	0:0	4	}
