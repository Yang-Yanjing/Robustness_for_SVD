func	2:0	108:0	0	static int	ProcessNodes
params	2:23	0:0	1	
param	2:24	2:42	2	filter_t *	p_filter
param	3:25	3:51	2	xml_reader_t *	p_xml_reader
param	4:25	4:51	2	text_style_t *	p_font_style
param	5:25	5:66	2	CFMutableAttributedStringRef	p_attrString
stmnts	0:0	107:13	1	
decl	7:4	7:46	2	int	rv
op	7:33	0:0	2	=
water	7:35	0:0	2	VLC_SUCCESS
decl	8:4	8:50	2	filter_sys_t	*p_sys
op	8:33	0:0	2	=
water	8:35	0:0	2	p_filter
op	8:43	0:0	2	->
water	8:45	0:0	2	p_sys
decl	9:4	9:39	2	font_stack_t	*p_fonts
op	9:33	0:0	2	=
water	9:35	0:0	2	NULL
decl	10:4	10:12	2	int	type
decl	11:4	11:20	2	const char	*node
decl	12:4	12:25	2	bool	b_italic
op	12:18	0:0	2	=
water	12:20	0:0	2	false
decl	13:4	13:25	2	bool	b_bold
op	13:18	0:0	2	=
water	13:20	0:0	2	false
decl	14:4	14:25	2	bool	b_uline
op	14:18	0:0	2	=
water	14:20	0:0	2	false
if	15:4	27:4	2	(p_font_style)
cond	15:8	15:8	3	p_font_style
water	15:8	0:0	4	p_font_style
stmts	15:22	27:4	3	
water	15:22	0:0	4	{
water	16:8	0:0	4	rv
op	16:11	0:0	4	=
call	16:13	20:62	4	PushFont
arg	16:22	16:30	5	&p_fonts
op	16:22	0:0	6	&
water	16:23	0:0	6	p_fonts
arg	17:15	17:41	5	p_font_style->psz_fontname
water	17:15	0:0	6	p_font_style
op	17:27	0:0	6	->
water	17:29	0:0	6	psz_fontname
arg	18:15	18:40	5	p_font_style->i_font_size
water	18:15	0:0	6	p_font_style
op	18:27	0:0	6	->
water	18:29	0:0	6	i_font_size
arg	19:15	20:62	5	(p_font_style->i_font_color&0xffffff)|((p_font_style->i_font_alpha&0xff)<<24)
water	19:15	0:0	6	(
water	19:16	0:0	6	p_font_style
op	19:28	0:0	6	->
water	19:30	0:0	6	i_font_color
op	19:43	0:0	6	&
water	19:45	0:0	6	0
water	19:46	0:0	6	xffffff
water	19:53	0:0	6	)
op	19:55	0:0	6	|
water	20:19	0:0	6	(
water	20:20	0:0	6	(
water	20:21	0:0	6	p_font_style
op	20:33	0:0	6	->
water	20:35	0:0	6	i_font_alpha
op	20:48	0:0	6	&
water	20:50	0:0	6	0
water	20:51	0:0	6	xff
water	20:54	0:0	6	)
op	20:56	0:0	6	<<
water	20:59	0:0	6	24
water	20:61	0:0	6	)
water	20:63	0:0	4	;
if	21:8	22:25	4	(p_font_style -> i_style_flags & STYLE_BOLD)
cond	21:12	21:42	5	p_font_style -> i_style_flags & STYLE_BOLD
water	21:12	0:0	6	p_font_style
op	21:24	0:0	6	->
water	21:26	0:0	6	i_style_flags
op	21:40	0:0	6	&
water	21:42	0:0	6	STYLE_BOLD
stmts	22:12	22:25	5	
water	22:12	0:0	6	b_bold
op	22:19	0:0	6	=
water	22:21	0:0	6	true
water	22:25	0:0	6	;
if	23:8	24:27	4	(p_font_style -> i_style_flags & STYLE_ITALIC)
cond	23:12	23:42	5	p_font_style -> i_style_flags & STYLE_ITALIC
water	23:12	0:0	6	p_font_style
op	23:24	0:0	6	->
water	23:26	0:0	6	i_style_flags
op	23:40	0:0	6	&
water	23:42	0:0	6	STYLE_ITALIC
stmts	24:12	24:27	5	
water	24:12	0:0	6	b_italic
op	24:21	0:0	6	=
water	24:23	0:0	6	true
water	24:27	0:0	6	;
if	25:8	26:26	4	(p_font_style -> i_style_flags & STYLE_UNDERLINE)
cond	25:12	25:42	5	p_font_style -> i_style_flags & STYLE_UNDERLINE
water	25:12	0:0	6	p_font_style
op	25:24	0:0	6	->
water	25:26	0:0	6	i_style_flags
op	25:40	0:0	6	&
water	25:42	0:0	6	STYLE_UNDERLINE
stmts	26:12	26:26	5	
water	26:12	0:0	6	b_uline
op	26:20	0:0	6	=
water	26:22	0:0	6	true
water	26:26	0:0	6	;
water	27:4	0:0	4	}
else	27:6	32:4	2
stmts	27:11	32:4	3	
water	27:11	0:0	4	{
water	28:8	0:0	4	rv
op	28:11	0:0	4	=
call	28:13	31:42	4	PushFont
arg	28:22	28:30	5	&p_fonts
op	28:22	0:0	6	&
water	28:23	0:0	6	p_fonts
arg	29:23	29:43	5	p_sys->psz_font_name
water	29:23	0:0	6	p_sys
op	29:28	0:0	6	->
water	29:30	0:0	6	psz_font_name
arg	30:23	30:41	5	p_sys->i_font_size
water	30:23	0:0	6	p_sys
op	30:28	0:0	6	->
water	30:30	0:0	6	i_font_size
arg	31:23	31:42	5	p_sys->i_font_color
water	31:23	0:0	6	p_sys
op	31:28	0:0	6	->
water	31:30	0:0	6	i_font_color
water	31:43	0:0	4	;
water	32:4	0:0	4	}
if	33:4	34:17	2	(rv != VLC_SUCCESS)
cond	33:8	33:14	3	rv != VLC_SUCCESS
water	33:8	0:0	4	rv
op	33:11	0:0	4	!=
water	33:14	0:0	4	VLC_SUCCESS
stmts	34:8	34:17	3	
return	34:8	34:17	4	rv
water	34:15	0:0	5	rv
while	35:4	105:4	2	(( type =xml_ReaderNextNode (p_xml_reader ,& node ) ) > 0)
cond	35:11	35:62	3	( type =xml_ReaderNextNode (p_xml_reader ,& node ) ) > 0
water	35:11	0:0	4	(
water	35:12	0:0	4	type
op	35:17	0:0	4	=
call	35:19	35:57	4	xml_ReaderNextNode
arg	35:38	35:50	5	p_xml_reader
water	35:38	0:0	6	p_xml_reader
arg	35:52	35:57	5	&node
op	35:52	0:0	6	&
water	35:53	0:0	6	node
water	35:58	0:0	4	)
op	35:60	0:0	4	>
water	35:62	0:0	4	0
stmts	35:65	105:4	3	
water	35:65	0:0	4	{
switch	36:8	104:8	4	(type)
cond	36:16	36:16	5	type
water	36:16	0:0	6	type
stmts	36:22	104:8	5	
water	36:22	0:0	6	{
label	37:12	37:35	6	case XML_READER_ENDELEM :
if	38:16	39:37	6	(!strcasecmp ("font" ,node ))
cond	38:20	38:44	7	!strcasecmp ("font" ,node )
op	38:20	0:0	8	!
call	38:21	38:44	8	strcasecmp
arg	38:32	38:38	9	"font"
water	38:32	0:0	10	"font"
arg	38:40	38:44	9	node
water	38:40	0:0	10	node
stmts	39:20	39:37	7	
call	39:20	39:36	8	PopFont
arg	39:28	39:36	9	&p_fonts
op	39:28	0:0	10	&
water	39:29	0:0	10	p_fonts
water	39:37	0:0	8	;
else	40:16	41:36	6
stmts	40:21	41:36	7	
if	40:21	41:36	8	(!strcasecmp ("b" ,node ))
cond	40:25	40:46	9	!strcasecmp ("b" ,node )
op	40:25	0:0	10	!
call	40:26	40:46	10	strcasecmp
arg	40:37	40:40	11	"b"
water	40:37	0:0	12	"b"
arg	40:42	40:46	11	node
water	40:42	0:0	12	node
stmts	41:20	41:36	9	
water	41:20	0:0	10	b_bold
op	41:29	0:0	10	=
water	41:31	0:0	10	false
water	41:36	0:0	10	;
else	42:16	43:36	6
stmts	42:21	43:36	7	
if	42:21	43:36	8	(!strcasecmp ("i" ,node ))
cond	42:25	42:46	9	!strcasecmp ("i" ,node )
op	42:25	0:0	10	!
call	42:26	42:46	10	strcasecmp
arg	42:37	42:40	11	"i"
water	42:37	0:0	12	"i"
arg	42:42	42:46	11	node
water	42:42	0:0	12	node
stmts	43:20	43:36	9	
water	43:20	0:0	10	b_italic
op	43:29	0:0	10	=
water	43:31	0:0	10	false
water	43:36	0:0	10	;
else	44:16	45:36	6
stmts	44:21	45:36	7	
if	44:21	45:36	8	(!strcasecmp ("u" ,node ))
cond	44:25	44:46	9	!strcasecmp ("u" ,node )
op	44:25	0:0	10	!
call	44:26	44:46	10	strcasecmp
arg	44:37	44:40	11	"u"
water	44:37	0:0	12	"u"
arg	44:42	44:46	11	node
water	44:42	0:0	12	node
stmts	45:20	45:36	9	
water	45:20	0:0	10	b_uline
op	45:29	0:0	10	=
water	45:31	0:0	10	false
water	45:36	0:0	10	;
break	46:16	46:21	6	
label	47:12	47:37	6	case XML_READER_STARTELEM :
if	48:16	49:69	6	(!strcasecmp ("font" ,node ))
cond	48:20	48:44	7	!strcasecmp ("font" ,node )
op	48:20	0:0	8	!
call	48:21	48:44	8	strcasecmp
arg	48:32	48:38	9	"font"
water	48:32	0:0	10	"font"
arg	48:40	48:44	9	node
water	48:40	0:0	10	node
stmts	49:20	49:69	7	
water	49:20	0:0	8	rv
op	49:23	0:0	8	=
call	49:25	49:68	8	HandleFontAttributes
arg	49:46	49:58	9	p_xml_reader
water	49:46	0:0	10	p_xml_reader
arg	49:60	49:68	9	&p_fonts
op	49:60	0:0	10	&
water	49:61	0:0	10	p_fonts
water	49:69	0:0	8	;
else	50:16	51:33	6
stmts	50:21	51:33	7	
if	50:21	51:33	8	(!strcasecmp ("b" ,node ))
cond	50:25	50:46	9	!strcasecmp ("b" ,node )
op	50:25	0:0	10	!
call	50:26	50:46	10	strcasecmp
arg	50:37	50:40	11	"b"
water	50:37	0:0	12	"b"
arg	50:42	50:46	11	node
water	50:42	0:0	12	node
stmts	51:20	51:33	9	
water	51:20	0:0	10	b_bold
op	51:27	0:0	10	=
water	51:29	0:0	10	true
water	51:33	0:0	10	;
else	52:16	53:35	6
stmts	52:21	53:35	7	
if	52:21	53:35	8	(!strcasecmp ("i" ,node ))
cond	52:25	52:46	9	!strcasecmp ("i" ,node )
op	52:25	0:0	10	!
call	52:26	52:46	10	strcasecmp
arg	52:37	52:40	11	"i"
water	52:37	0:0	12	"i"
arg	52:42	52:46	11	node
water	52:42	0:0	12	node
stmts	53:20	53:35	9	
water	53:20	0:0	10	b_italic
op	53:29	0:0	10	=
water	53:31	0:0	10	true
water	53:35	0:0	10	;
else	54:16	55:34	6
stmts	54:21	55:34	7	
if	54:21	55:34	8	(!strcasecmp ("u" ,node ))
cond	54:25	54:46	9	!strcasecmp ("u" ,node )
op	54:25	0:0	10	!
call	54:26	54:46	10	strcasecmp
arg	54:37	54:40	11	"u"
water	54:37	0:0	12	"u"
arg	54:42	54:46	11	node
water	54:42	0:0	12	node
stmts	55:20	55:34	9	
water	55:20	0:0	10	b_uline
op	55:28	0:0	10	=
water	55:30	0:0	10	true
water	55:34	0:0	10	;
else	56:16	66:16	6
stmts	56:21	66:16	7	
if	56:21	66:16	8	(!strcasecmp ("br" ,node ))
cond	56:25	56:47	9	!strcasecmp ("br" ,node )
op	56:25	0:0	10	!
call	56:26	56:47	10	strcasecmp
arg	56:37	56:41	11	"br"
water	56:37	0:0	12	"br"
arg	56:43	56:47	11	node
water	56:43	0:0	12	node
stmts	56:50	66:16	9	
water	56:50	0:0	10	{
decl	57:20	57:117	10	CFMutableAttributedStringRef	p_attrnode
op	57:60	0:0	10	=
call	57:62	57:116	11	CFAttributedStringCreateMutable
arg	57:94	57:113	12	kCFAllocatorDefault
water	57:94	0:0	13	kCFAllocatorDefault
arg	57:115	57:116	12	0
water	57:115	0:0	13	0
call	58:20	58:94	10	CFAttributedStringReplaceString
arg	58:52	58:62	11	p_attrnode
water	58:52	0:0	12	p_attrnode
arg	58:64	58:81	11	CFRangeMake(0,0)
call	58:64	58:80	12	CFRangeMake
arg	58:76	58:77	13	0
water	58:76	0:0	14	0
arg	58:79	58:80	13	0
water	58:79	0:0	14	0
arg	58:83	58:94	11	CFSTR("\n")
call	58:83	58:93	12	CFSTR
arg	58:89	58:93	13	"\n"
water	58:89	0:0	14	"\n"
water	58:95	0:0	10	;
call	59:20	61:55	10	GetAttrStrFromFontStack
arg	59:44	59:52	11	&p_fonts
op	59:44	0:0	12	&
water	59:45	0:0	12	p_fonts
arg	59:54	59:60	11	b_bold
water	59:54	0:0	12	b_bold
arg	59:62	59:70	11	b_italic
water	59:62	0:0	12	b_italic
arg	59:72	59:79	11	b_uline
water	59:72	0:0	12	b_uline
arg	60:45	60:62	11	CFRangeMake(0,1)
call	60:45	60:61	12	CFRangeMake
arg	60:57	60:58	13	0
water	60:57	0:0	14	0
arg	60:60	60:61	13	1
water	60:60	0:0	14	1
arg	61:45	61:55	11	p_attrnode
water	61:45	0:0	12	p_attrnode
water	61:56	0:0	10	;
call	62:20	64:46	10	CFAttributedStringReplaceAttributedString
arg	62:62	62:74	11	p_attrString
water	62:62	0:0	12	p_attrString
arg	63:36	63:93	11	CFRangeMake(CFAttributedStringGetLength(p_attrString),0)
call	63:36	63:92	12	CFRangeMake
arg	63:48	63:89	13	CFAttributedStringGetLength(p_attrString)
call	63:48	63:88	14	CFAttributedStringGetLength
arg	63:76	63:88	15	p_attrString
water	63:76	0:0	16	p_attrString
arg	63:91	63:92	13	0
water	63:91	0:0	14	0
arg	64:36	64:46	11	p_attrnode
water	64:36	0:0	12	p_attrnode
water	64:47	0:0	10	;
call	65:20	65:40	10	CFRelease
arg	65:30	65:40	11	p_attrnode
water	65:30	0:0	12	p_attrnode
water	65:41	0:0	10	;
water	66:16	0:0	10	}
break	67:16	67:21	6	
label	68:12	68:32	6	case XML_READER_TEXT :
water	69:12	0:0	6	{
decl	70:16	70:40	6	CFStringRef	p_cfString
decl	71:16	71:33	6	int	len
if	73:16	74:25	6	(! node)
cond	73:20	73:21	7	! node
op	73:20	0:0	8	!
water	73:21	0:0	8	node
stmts	74:20	74:25	7	
break	74:20	74:25	8	
decl	75:16	75:40	6	char	*dup
op	75:26	0:0	6	=
call	75:28	75:39	7	strdup
arg	75:35	75:39	8	node
water	75:35	0:0	9	node
if	76:16	77:25	6	(! dup)
cond	76:20	76:21	7	! dup
op	76:20	0:0	8	!
water	76:21	0:0	8	dup
stmts	77:20	77:25	7	
break	77:20	77:25	8	
decl	78:16	78:49	6	char	*s
op	78:24	0:0	6	=
call	78:26	78:48	7	strpbrk
arg	78:34	78:37	8	dup
water	78:34	0:0	9	dup
arg	78:39	78:48	8	"\t\r\n "
water	78:39	0:0	9	"\t\r\n "
while	79:16	88:16	6	(s)
cond	79:22	79:22	7	s
water	79:22	0:0	8	s
stmts	80:16	88:16	7	
water	80:16	0:0	8	{
decl	81:20	81:59	8	int	i_whitespace
op	81:37	0:0	8	=
call	81:39	81:58	9	strspn
arg	81:46	81:47	10	s
water	81:46	0:0	11	s
arg	81:49	81:58	10	"\t\r\n "
water	81:49	0:0	11	"\t\r\n "
if	82:20	85:62	8	(i_whitespace > 1)
cond	82:24	82:39	9	i_whitespace > 1
water	82:24	0:0	10	i_whitespace
op	82:37	0:0	10	>
water	82:39	0:0	10	1
stmts	83:24	85:62	9	
call	83:24	85:61	10	memmove
arg	83:32	83:37	11	&s[1]
op	83:32	0:0	12	&
water	83:33	0:0	12	s
op	83:34	0:0	12	[
water	83:35	0:0	12	1
op	83:36	0:0	12	]
arg	84:33	84:49	11	&s[i_whitespace]
op	84:33	0:0	12	&
water	84:34	0:0	12	s
op	84:35	0:0	12	[
water	84:36	0:0	12	i_whitespace
op	84:48	0:0	12	]
arg	85:33	85:61	11	strlen(s)-i_whitespace+1
call	85:33	85:41	12	strlen
arg	85:40	85:41	13	s
water	85:40	0:0	14	s
op	85:43	0:0	12	-
water	85:45	0:0	12	i_whitespace
op	85:58	0:0	12	+
water	85:60	0:0	12	1
water	85:62	0:0	10	;
op	86:20	0:0	8	*
water	86:21	0:0	8	s
op	86:22	0:0	8	++
op	86:25	0:0	8	=
water	86:27	0:0	8	' '
water	86:30	0:0	8	;
water	87:20	0:0	8	s
op	87:22	0:0	8	=
call	87:24	87:44	8	strpbrk
arg	87:32	87:33	9	s
water	87:32	0:0	10	s
arg	87:35	87:44	9	"\t\r\n "
water	87:35	0:0	10	"\t\r\n "
water	87:45	0:0	8	;
water	88:16	0:0	8	}
decl	89:16	89:113	6	CFMutableAttributedStringRef	p_attrnode
op	89:56	0:0	6	=
call	89:58	89:112	7	CFAttributedStringCreateMutable
arg	89:90	89:109	8	kCFAllocatorDefault
water	89:90	0:0	9	kCFAllocatorDefault
arg	89:111	89:112	8	0
water	89:111	0:0	9	0
water	90:16	0:0	6	p_cfString
op	90:27	0:0	6	=
call	90:29	90:87	6	CFStringCreateWithCString
arg	90:55	90:59	7	NULL
water	90:55	0:0	8	NULL
arg	90:61	90:64	7	dup
water	90:61	0:0	8	dup
arg	90:66	90:87	7	kCFStringEncodingUTF8
water	90:66	0:0	8	kCFStringEncodingUTF8
water	90:88	0:0	6	;
call	91:16	91:89	6	CFAttributedStringReplaceString
arg	91:48	91:58	7	p_attrnode
water	91:48	0:0	8	p_attrnode
arg	91:60	91:77	7	CFRangeMake(0,0)
call	91:60	91:76	8	CFRangeMake
arg	91:72	91:73	9	0
water	91:72	0:0	10	0
arg	91:75	91:76	9	0
water	91:75	0:0	10	0
arg	91:79	91:89	7	p_cfString
water	91:79	0:0	8	p_cfString
water	91:90	0:0	6	;
call	92:16	92:36	6	CFRelease
arg	92:26	92:36	7	p_cfString
water	92:26	0:0	8	p_cfString
water	92:37	0:0	6	;
water	93:16	0:0	6	len
op	93:20	0:0	6	=
call	93:22	93:60	6	CFAttributedStringGetLength
arg	93:50	93:60	7	p_attrnode
water	93:50	0:0	8	p_attrnode
water	93:61	0:0	6	;
call	94:16	96:51	6	GetAttrStrFromFontStack
arg	94:40	94:48	7	&p_fonts
op	94:40	0:0	8	&
water	94:41	0:0	8	p_fonts
arg	94:50	94:56	7	b_bold
water	94:50	0:0	8	b_bold
arg	94:58	94:66	7	b_italic
water	94:58	0:0	8	b_italic
arg	94:68	94:75	7	b_uline
water	94:68	0:0	8	b_uline
arg	95:41	95:60	7	CFRangeMake(0,len)
call	95:41	95:59	8	CFRangeMake
arg	95:53	95:54	9	0
water	95:53	0:0	10	0
arg	95:56	95:59	9	len
water	95:56	0:0	10	len
arg	96:41	96:51	7	p_attrnode
water	96:41	0:0	8	p_attrnode
water	96:52	0:0	6	;
call	97:16	99:42	6	CFAttributedStringReplaceAttributedString
arg	97:58	97:70	7	p_attrString
water	97:58	0:0	8	p_attrString
arg	98:32	98:89	7	CFRangeMake(CFAttributedStringGetLength(p_attrString),0)
call	98:32	98:88	8	CFRangeMake
arg	98:44	98:85	9	CFAttributedStringGetLength(p_attrString)
call	98:44	98:84	10	CFAttributedStringGetLength
arg	98:72	98:84	11	p_attrString
water	98:72	0:0	12	p_attrString
arg	98:87	98:88	9	0
water	98:87	0:0	10	0
arg	99:32	99:42	7	p_attrnode
water	99:32	0:0	8	p_attrnode
water	99:43	0:0	6	;
call	100:16	100:36	6	CFRelease
arg	100:26	100:36	7	p_attrnode
water	100:26	0:0	8	p_attrnode
water	100:37	0:0	6	;
call	101:16	101:24	6	free
arg	101:21	101:24	7	dup
water	101:21	0:0	8	dup
water	101:25	0:0	6	;
break	102:16	102:21	6	
water	103:12	0:0	6	}
water	104:8	0:0	6	}
water	105:4	0:0	4	}
while	106:4	106:43	2	(VLC_SUCCESS ==PopFont (& p_fonts ))
cond	106:10	106:41	3	VLC_SUCCESS ==PopFont (& p_fonts )
water	106:10	0:0	4	VLC_SUCCESS
op	106:22	0:0	4	==
call	106:25	106:41	4	PopFont
arg	106:33	106:41	5	&p_fonts
op	106:33	0:0	6	&
water	106:34	0:0	6	p_fonts
stmts	106:43	106:43	3	
water	106:43	0:0	4	;
return	107:4	107:13	2	rv
water	107:11	0:0	3	rv
