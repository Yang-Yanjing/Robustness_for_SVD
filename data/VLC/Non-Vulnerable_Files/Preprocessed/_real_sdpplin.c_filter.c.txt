func	2:0	21:0	0	static int	filter
params	2:17	0:0	1	
param	2:18	2:36	2	access_t *	p_access
param	2:38	2:52	2	const char *	in
param	2:54	2:72	2	const char *	filter
param	2:74	2:84	2	char * *	out
param	2:86	2:99	2	size_t	outlen
stmnts	0:0	20:10	1	
decl	3:2	3:25	2	int	flen
op	3:10	0:0	2	=
call	3:11	3:24	3	strlen
arg	3:18	3:24	4	filter
water	3:18	0:0	5	filter
decl	4:2	4:12	2	size_t	len
if	5:2	5:19	2	(! in)
cond	5:6	5:7	3	! in
op	5:6	0:0	4	!
water	5:7	0:0	4	in
stmts	5:11	5:19	3	
return	5:11	5:19	4	0
water	5:18	0:0	5	0
water	6:2	0:0	2	len
op	6:6	0:0	2	=
water	6:8	0:0	2	(
call	6:9	6:23	2	strchr
arg	6:16	6:18	3	in
water	6:16	0:0	4	in
arg	6:19	6:23	3	'\n'
water	6:19	0:0	4	'\n'
water	6:24	0:0	2	)
water	6:26	0:0	2	?
call	6:28	6:55	2	(size_t)
arg	6:37	6:55	3	strchr(in,'\n')-in
call	6:37	6:51	4	strchr
arg	6:44	6:46	5	in
water	6:44	0:0	6	in
arg	6:47	6:51	5	'\n'
water	6:47	0:0	6	'\n'
op	6:52	0:0	4	-
water	6:53	0:0	4	in
water	6:57	0:0	2	:
call	6:59	6:68	2	strlen
arg	6:66	6:68	3	in
water	6:66	0:0	4	in
water	6:69	0:0	2	;
if	7:2	19:2	2	(!strncmp (in ,filter ,flen ))
cond	7:6	7:29	3	!strncmp (in ,filter ,flen )
op	7:6	0:0	4	!
call	7:7	7:29	4	strncmp
arg	7:15	7:17	5	in
water	7:15	0:0	6	in
arg	7:18	7:24	5	filter
water	7:18	0:0	6	filter
arg	7:25	7:29	5	flen
water	7:25	0:0	6	flen
stmts	7:32	19:2	3	
water	7:32	0:0	4	{
if	8:4	8:28	4	(in [ flen ] == '"')
cond	8:7	8:17	5	in [ flen ] == '"'
water	8:7	0:0	6	in
op	8:9	0:0	6	[
water	8:10	0:0	6	flen
op	8:14	0:0	6	]
op	8:15	0:0	6	==
water	8:17	0:0	6	'"'
stmts	8:22	8:28	5	
water	8:22	0:0	6	flen
op	8:26	0:0	6	++
water	8:28	0:0	6	;
if	9:4	9:27	4	(in [ len - 1 ] == 13)
cond	9:7	9:18	5	in [ len - 1 ] == 13
water	9:7	0:0	6	in
op	9:9	0:0	6	[
water	9:10	0:0	6	len
op	9:13	0:0	6	-
water	9:14	0:0	6	1
op	9:15	0:0	6	]
op	9:16	0:0	6	==
water	9:18	0:0	6	13
stmts	9:22	9:27	5	
water	9:22	0:0	6	len
op	9:25	0:0	6	--
water	9:27	0:0	6	;
if	10:4	10:28	4	(in [ len - 1 ] == '"')
cond	10:7	10:18	5	in [ len - 1 ] == '"'
water	10:7	0:0	6	in
op	10:9	0:0	6	[
water	10:10	0:0	6	len
op	10:13	0:0	6	-
water	10:14	0:0	6	1
op	10:15	0:0	6	]
op	10:16	0:0	6	==
water	10:18	0:0	6	'"'
stmts	10:23	10:28	5	
water	10:23	0:0	6	len
op	10:26	0:0	6	--
water	10:28	0:0	6	;
if	11:4	15:4	4	(len - flen + 1 > outlen)
cond	11:8	11:21	5	len - flen + 1 > outlen
water	11:8	0:0	6	len
op	11:11	0:0	6	-
water	11:12	0:0	6	flen
op	11:16	0:0	6	+
water	11:17	0:0	6	1
op	11:19	0:0	6	>
water	11:21	0:0	6	outlen
stmts	12:4	15:4	5	
water	12:4	0:0	6	{
call	13:8	13:71	6	msg_Warn
arg	13:17	13:25	7	p_access
water	13:17	0:0	8	p_access
arg	13:27	13:71	7	"Discarding end of string to avoid overflow"
water	13:27	0:0	8	"Discarding end of string to avoid overflow"
water	13:72	0:0	6	;
water	14:8	0:0	6	len
op	14:11	0:0	6	=
water	14:12	0:0	6	outlen
op	14:18	0:0	6	+
water	14:19	0:0	6	flen
op	14:23	0:0	6	-
water	14:24	0:0	6	1
water	14:25	0:0	6	;
water	15:4	0:0	6	}
call	16:4	16:36	4	memcpy
arg	16:11	16:15	5	*out
op	16:11	0:0	6	*
water	16:12	0:0	6	out
arg	16:17	16:24	5	in+flen
water	16:17	0:0	6	in
op	16:19	0:0	6	+
water	16:20	0:0	6	flen
arg	16:26	16:36	5	len-flen+1
water	16:26	0:0	6	len
op	16:29	0:0	6	-
water	16:30	0:0	6	flen
op	16:34	0:0	6	+
water	16:35	0:0	6	1
water	16:37	0:0	4	;
water	17:4	0:0	4	(
op	17:5	0:0	4	*
water	17:6	0:0	4	out
water	17:9	0:0	4	)
op	17:10	0:0	4	[
water	17:11	0:0	4	len
op	17:14	0:0	4	-
water	17:15	0:0	4	flen
op	17:19	0:0	4	]
op	17:20	0:0	4	=
water	17:21	0:0	4	0
water	17:22	0:0	4	;
return	18:4	18:19	4	len-flen
water	18:11	0:0	5	len
op	18:14	0:0	5	-
water	18:15	0:0	5	flen
water	19:2	0:0	4	}
return	20:2	20:10	2	0
water	20:9	0:0	3	0
