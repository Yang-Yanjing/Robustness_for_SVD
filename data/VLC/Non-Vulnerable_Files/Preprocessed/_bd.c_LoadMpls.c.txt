func	2:0	67:0	0	static void	LoadMpls
params	2:20	0:0	1	
param	2:22	2:38	2	demux_t *	p_demux
param	2:40	2:60	2	const char *	psz_name
param	2:62	2:71	2	int	i_id
stmnts	0:0	66:32	1	
decl	4:4	4:39	2	demux_sys_t	*p_sys
op	4:23	0:0	2	=
water	4:25	0:0	2	p_demux
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
call	6:4	6:45	2	msg_Err
arg	6:13	6:20	3	p_demux
water	6:13	0:0	4	p_demux
arg	6:22	6:34	3	"Loading %s"
water	6:22	0:0	4	"Loading %s"
arg	6:36	6:45	3	psz_name
water	6:36	0:0	4	psz_name
water	6:46	0:0	2	;
decl	8:4	8:53	2	block_t	*p_block
op	8:21	0:0	2	=
call	8:23	8:52	3	LoadBlock
arg	8:34	8:41	4	p_demux
water	8:34	0:0	5	p_demux
arg	8:43	8:52	4	psz_name
water	8:43	0:0	5	psz_name
if	9:4	10:18	2	(! p_block)
cond	9:8	9:9	3	! p_block
op	9:8	0:0	4	!
water	9:9	0:0	4	p_block
stmts	10:8	10:18	3	
goto	10:8	10:18	4	error
water	10:13	0:0	5	error
decl	12:4	12:49	2	bd_mpls_t	*p_mpls
op	12:22	0:0	2	=
call	12:24	12:48	3	malloc
arg	12:32	12:48	4	sizeof(*p_mpls)
op	12:32	0:0	5	sizeof
water	12:38	0:0	5	(
op	12:39	0:0	5	*
water	12:40	0:0	5	p_mpls
water	12:46	0:0	5	)
if	13:4	14:18	2	(! p_mpls)
cond	13:8	13:9	3	! p_mpls
op	13:8	0:0	4	!
water	13:9	0:0	4	p_mpls
stmts	14:8	14:18	3	
goto	14:8	14:18	4	error
water	14:13	0:0	5	error
decl	16:4	16:10	2	bs_t	s
call	17:4	17:54	2	bs_init
arg	17:13	17:15	3	&s
op	17:13	0:0	4	&
water	17:14	0:0	4	s
arg	17:17	17:34	3	p_block->p_buffer
water	17:17	0:0	4	p_block
op	17:24	0:0	4	->
water	17:26	0:0	4	p_buffer
arg	17:36	17:54	3	p_block->i_buffer
water	17:36	0:0	4	p_block
op	17:43	0:0	4	->
water	17:45	0:0	4	i_buffer
water	17:55	0:0	2	;
if	18:4	19:18	2	(bd_mpls_Parse (p_mpls ,& s ,i_id ))
cond	18:8	18:40	3	bd_mpls_Parse (p_mpls ,& s ,i_id )
call	18:8	18:40	4	bd_mpls_Parse
arg	18:23	18:29	5	p_mpls
water	18:23	0:0	6	p_mpls
arg	18:31	18:33	5	&s
op	18:31	0:0	6	&
water	18:32	0:0	6	s
arg	18:35	18:40	5	i_id
water	18:35	0:0	6	i_id
stmts	19:8	19:18	3	
goto	19:8	19:18	4	error
water	19:13	0:0	5	error
call	21:4	21:50	2	msg_Err
arg	21:13	21:20	3	p_demux
water	21:13	0:0	4	p_demux
arg	21:22	21:35	3	"MPLS: id=%d"
water	21:22	0:0	4	"MPLS: id=%d"
arg	21:37	21:50	3	p_mpls->i_id
water	21:37	0:0	4	p_mpls
op	21:43	0:0	4	->
water	21:45	0:0	4	i_id
water	21:51	0:0	2	;
call	22:4	23:53	2	msg_Err
arg	22:13	22:20	3	p_demux
water	22:13	0:0	4	p_demux
arg	22:22	22:54	3	"MPLS: play_item=%d sub_path=%d"
water	22:22	0:0	4	"MPLS: play_item=%d sub_path=%d"
arg	23:13	23:32	3	p_mpls->i_play_item
water	23:13	0:0	4	p_mpls
op	23:19	0:0	4	->
water	23:21	0:0	4	i_play_item
arg	23:34	23:53	3	p_mpls->i_sub_path
water	23:34	0:0	4	p_mpls
op	23:40	0:0	4	->
water	23:42	0:0	4	i_sub_path
water	23:54	0:0	2	;
for	24:4	44:4	2	( int i = 0 ;i < p_mpls -> i_play_item;i ++)
forinit	0:0	24:18	3	 int i = 0 ;
decl	24:9	24:18	4	int	i
op	24:15	0:0	4	=
water	24:17	0:0	4	0
cond	24:20	24:32	3	i < p_mpls -> i_play_item
water	24:20	0:0	4	i
op	24:22	0:0	4	<
water	24:24	0:0	4	p_mpls
op	24:30	0:0	4	->
water	24:32	0:0	4	i_play_item
forexpr	24:45	24:46	3	i ++
water	24:45	0:0	4	i
op	24:46	0:0	4	++
stmts	25:4	44:4	3	
water	25:4	0:0	4	{
decl	26:8	26:61	4	bd_mpls_play_item_t	*p_item
op	26:36	0:0	4	=
op	26:38	0:0	4	&
water	26:39	0:0	4	p_mpls
op	26:45	0:0	4	->
water	26:47	0:0	4	p_play_item
op	26:58	0:0	4	[
water	26:59	0:0	4	i
op	26:60	0:0	4	]
call	27:8	30:55	4	msg_Err
arg	27:17	27:24	5	p_demux
water	27:17	0:0	6	p_demux
arg	27:26	27:81	5	"PLAY_ITEM[%d] connection=%d in=%d out=%d still=%d(%d)"
water	27:26	0:0	6	"PLAY_ITEM[%d] connection=%d in=%d out=%d still=%d(%d)"
arg	28:17	28:18	5	i
water	28:17	0:0	6	i
arg	28:20	28:40	5	p_item->i_connection
water	28:20	0:0	6	p_item
op	28:26	0:0	6	->
water	28:28	0:0	6	i_connection
arg	29:17	29:39	5	(int)p_item->i_in_time
water	29:17	0:0	6	(
water	29:18	0:0	6	int
water	29:21	0:0	6	)
water	29:22	0:0	6	p_item
op	29:28	0:0	6	->
water	29:30	0:0	6	i_in_time
arg	29:41	29:64	5	(int)p_item->i_out_time
water	29:41	0:0	6	(
water	29:42	0:0	6	int
water	29:45	0:0	6	)
water	29:46	0:0	6	p_item
op	29:52	0:0	6	->
water	29:54	0:0	6	i_out_time
arg	30:17	30:32	5	p_item->i_still
water	30:17	0:0	6	p_item
op	30:23	0:0	6	->
water	30:25	0:0	6	i_still
arg	30:34	30:55	5	p_item->i_still_time
water	30:34	0:0	6	p_item
op	30:40	0:0	6	->
water	30:42	0:0	6	i_still_time
water	30:56	0:0	4	;
call	31:8	32:58	4	msg_Err
arg	31:17	31:24	5	p_demux
water	31:17	0:0	6	p_demux
arg	31:26	31:62	5	"     clpi_default: id=%d stc_id=%d"
water	31:26	0:0	6	"     clpi_default: id=%d stc_id=%d"
arg	32:17	32:34	5	p_item->clpi.i_id
water	32:17	0:0	6	p_item
op	32:23	0:0	6	->
water	32:25	0:0	6	clpi
op	32:29	0:0	6	.
water	32:30	0:0	6	i_id
arg	32:36	32:58	5	p_item->clpi.i_stc_id
water	32:36	0:0	6	p_item
op	32:42	0:0	6	->
water	32:44	0:0	6	clpi
op	32:48	0:0	6	.
water	32:49	0:0	6	i_stc_id
water	32:59	0:0	4	;
for	33:8	35:76	4	( int j = 0 ;j < p_item -> i_clpi;j ++)
forinit	0:0	33:22	5	 int j = 0 ;
decl	33:13	33:22	6	int	j
op	33:19	0:0	6	=
water	33:21	0:0	6	0
cond	33:24	33:36	5	j < p_item -> i_clpi
water	33:24	0:0	6	j
op	33:26	0:0	6	<
water	33:28	0:0	6	p_item
op	33:34	0:0	6	->
water	33:36	0:0	6	i_clpi
forexpr	33:44	33:45	5	j ++
water	33:44	0:0	6	j
op	33:45	0:0	6	++
stmts	34:12	35:76	5	
call	34:12	35:75	6	msg_Err
arg	34:21	34:28	7	p_demux
water	34:21	0:0	8	p_demux
arg	34:30	34:62	7	"     clpi[%d]: id=%d stc_id=%d"
water	34:30	0:0	8	"     clpi[%d]: id=%d stc_id=%d"
arg	35:21	35:22	7	j
water	35:21	0:0	8	j
arg	35:24	35:46	7	p_item->p_clpi[j].i_id
water	35:24	0:0	8	p_item
op	35:30	0:0	8	->
water	35:32	0:0	8	p_clpi
op	35:38	0:0	8	[
water	35:39	0:0	8	j
op	35:40	0:0	8	]
op	35:41	0:0	8	.
water	35:42	0:0	8	i_id
arg	35:48	35:75	7	p_item->p_clpi[j].i_stc_id
water	35:48	0:0	8	p_item
op	35:54	0:0	8	->
water	35:56	0:0	8	p_clpi
op	35:62	0:0	8	[
water	35:63	0:0	8	j
op	35:64	0:0	8	]
op	35:65	0:0	8	.
water	35:66	0:0	8	i_stc_id
water	35:76	0:0	6	;
for	36:8	43:52	4	( int j = 0 ;j < p_item -> i_stream;j ++)
forinit	0:0	36:22	5	 int j = 0 ;
decl	36:13	36:22	6	int	j
op	36:19	0:0	6	=
water	36:21	0:0	6	0
cond	36:24	36:36	5	j < p_item -> i_stream
water	36:24	0:0	6	j
op	36:26	0:0	6	<
water	36:28	0:0	6	p_item
op	36:34	0:0	6	->
water	36:36	0:0	6	i_stream
forexpr	36:46	36:47	5	j ++
water	36:46	0:0	6	j
op	36:47	0:0	6	++
stmts	37:12	43:52	5	
call	37:12	43:51	6	msg_Err
arg	37:21	37:28	7	p_demux
water	37:21	0:0	8	p_demux
arg	37:30	37:101	7	"     stream[%d]: type=%d class=%d stream_type=0x%x lang=%s charset=%d"
water	37:30	0:0	8	"     stream[%d]: type=%d class=%d stream_type=0x%x lang=%s charset=%d"
arg	38:21	38:22	7	j
water	38:21	0:0	8	j
arg	39:21	39:47	7	p_item->p_stream[j].i_type
water	39:21	0:0	8	p_item
op	39:27	0:0	8	->
water	39:29	0:0	8	p_stream
op	39:37	0:0	8	[
water	39:38	0:0	8	j
op	39:39	0:0	8	]
op	39:40	0:0	8	.
water	39:41	0:0	8	i_type
arg	40:21	40:48	7	p_item->p_stream[j].i_class
water	40:21	0:0	8	p_item
op	40:27	0:0	8	->
water	40:29	0:0	8	p_stream
op	40:37	0:0	8	[
water	40:38	0:0	8	j
op	40:39	0:0	8	]
op	40:40	0:0	8	.
water	40:41	0:0	8	i_class
arg	41:21	41:54	7	p_item->p_stream[j].i_stream_type
water	41:21	0:0	8	p_item
op	41:27	0:0	8	->
water	41:29	0:0	8	p_stream
op	41:37	0:0	8	[
water	41:38	0:0	8	j
op	41:39	0:0	8	]
op	41:40	0:0	8	.
water	41:41	0:0	8	i_stream_type
arg	42:21	42:53	7	p_item->p_stream[j].psz_language
water	42:21	0:0	8	p_item
op	42:27	0:0	8	->
water	42:29	0:0	8	p_stream
op	42:37	0:0	8	[
water	42:38	0:0	8	j
op	42:39	0:0	8	]
op	42:40	0:0	8	.
water	42:41	0:0	8	psz_language
arg	43:21	43:51	7	p_item->p_stream[j].i_charset
water	43:21	0:0	8	p_item
op	43:27	0:0	8	->
water	43:29	0:0	8	p_stream
op	43:37	0:0	8	[
water	43:38	0:0	8	j
op	43:39	0:0	8	]
op	43:40	0:0	8	.
water	43:41	0:0	8	i_charset
water	43:52	0:0	6	;
water	44:4	0:0	4	}
for	45:4	50:4	2	( int i = 0 ;i < p_mpls -> i_sub_path;i ++)
forinit	0:0	45:18	3	 int i = 0 ;
decl	45:9	45:18	4	int	i
op	45:15	0:0	4	=
water	45:17	0:0	4	0
cond	45:20	45:32	3	i < p_mpls -> i_sub_path
water	45:20	0:0	4	i
op	45:22	0:0	4	<
water	45:24	0:0	4	p_mpls
op	45:30	0:0	4	->
water	45:32	0:0	4	i_sub_path
forexpr	45:44	45:45	3	i ++
water	45:44	0:0	4	i
op	45:45	0:0	4	++
stmts	46:4	50:4	3	
water	46:4	0:0	4	{
decl	47:8	47:58	4	bd_mpls_sub_path_t	*p_sub
op	47:34	0:0	4	=
op	47:36	0:0	4	&
water	47:37	0:0	4	p_mpls
op	47:43	0:0	4	->
water	47:45	0:0	4	p_sub_path
op	47:55	0:0	4	[
water	47:56	0:0	4	i
op	47:57	0:0	4	]
call	48:8	49:66	4	msg_Err
arg	48:17	48:24	5	p_demux
water	48:17	0:0	6	p_demux
arg	48:26	48:66	5	"SUB_PATH[%d] type=%d repeat=%d item=%d"
water	48:26	0:0	6	"SUB_PATH[%d] type=%d repeat=%d item=%d"
arg	49:17	49:18	5	i
water	49:17	0:0	6	i
arg	49:20	49:33	5	p_sub->i_type
water	49:20	0:0	6	p_sub
op	49:25	0:0	6	->
water	49:27	0:0	6	i_type
arg	49:35	49:50	5	p_sub->b_repeat
water	49:35	0:0	6	p_sub
op	49:40	0:0	6	->
water	49:42	0:0	6	b_repeat
arg	49:52	49:66	5	p_sub->i_item
water	49:52	0:0	6	p_sub
op	49:57	0:0	6	->
water	49:59	0:0	6	i_item
water	49:67	0:0	4	;
water	50:4	0:0	4	}
for	51:4	56:4	2	( int i = 0 ;i < p_mpls -> i_mark;i ++)
forinit	0:0	51:18	3	 int i = 0 ;
decl	51:9	51:18	4	int	i
op	51:15	0:0	4	=
water	51:17	0:0	4	0
cond	51:20	51:32	3	i < p_mpls -> i_mark
water	51:20	0:0	4	i
op	51:22	0:0	4	<
water	51:24	0:0	4	p_mpls
op	51:30	0:0	4	->
water	51:32	0:0	4	i_mark
forexpr	51:40	51:41	3	i ++
water	51:40	0:0	4	i
op	51:41	0:0	4	++
stmts	52:4	56:4	3	
water	52:4	0:0	4	{
decl	53:8	53:51	4	bd_mpls_mark_t	*p_mark
op	53:31	0:0	4	=
op	53:33	0:0	4	&
water	53:34	0:0	4	p_mpls
op	53:40	0:0	4	->
water	53:42	0:0	4	p_mark
op	53:48	0:0	4	[
water	53:49	0:0	4	i
op	53:50	0:0	4	]
call	54:8	55:104	4	msg_Err
arg	54:17	54:24	5	p_demux
water	54:17	0:0	6	p_demux
arg	54:26	54:78	5	"M[%d] t=%d play_item_id=%d time=%d entry_es_pid=%d"
water	54:26	0:0	6	"M[%d] t=%d play_item_id=%d time=%d entry_es_pid=%d"
arg	55:17	55:18	5	i
water	55:17	0:0	6	i
arg	55:20	55:34	5	p_mark->i_type
water	55:20	0:0	6	p_mark
op	55:26	0:0	6	->
water	55:28	0:0	6	i_type
arg	55:36	55:58	5	p_mark->i_play_item_id
water	55:36	0:0	6	p_mark
op	55:42	0:0	6	->
water	55:44	0:0	6	i_play_item_id
arg	55:60	55:79	5	(int)p_mark->i_time
water	55:60	0:0	6	(
water	55:61	0:0	6	int
water	55:64	0:0	6	)
water	55:65	0:0	6	p_mark
op	55:71	0:0	6	->
water	55:73	0:0	6	i_time
arg	55:81	55:104	5	p_mark->i_entry_es_pid
water	55:81	0:0	6	p_mark
op	55:87	0:0	6	->
water	55:89	0:0	6	i_entry_es_pid
water	55:105	0:0	4	;
water	56:4	0:0	4	}
call	59:4	59:54	2	TAB_APPEND
arg	59:16	59:29	3	p_sys->i_mpls
water	59:16	0:0	4	p_sys
op	59:21	0:0	4	->
water	59:23	0:0	4	i_mpls
arg	59:31	59:45	3	p_sys->pp_mpls
water	59:31	0:0	4	p_sys
op	59:36	0:0	4	->
water	59:38	0:0	4	pp_mpls
arg	59:47	59:54	3	p_mpls
water	59:47	0:0	4	p_mpls
water	59:55	0:0	2	;
call	61:4	61:27	2	block_Release
arg	61:19	61:27	3	p_block
water	61:19	0:0	4	p_block
water	61:28	0:0	2	;
return	62:4	62:10	2	
label	63:0	63:5	2	error :
call	64:4	64:52	2	msg_Err
arg	64:13	64:20	3	p_demux
water	64:13	0:0	4	p_demux
arg	64:22	64:41	3	"Failed loading %s"
water	64:22	0:0	4	"Failed loading %s"
arg	64:43	64:52	3	psz_name
water	64:43	0:0	4	psz_name
water	64:53	0:0	2	;
if	65:4	66:32	2	(p_block)
cond	65:8	65:8	3	p_block
water	65:8	0:0	4	p_block
stmts	66:8	66:32	3	
call	66:8	66:31	4	block_Release
arg	66:23	66:31	5	p_block
water	66:23	0:0	6	p_block
water	66:32	0:0	4	;
