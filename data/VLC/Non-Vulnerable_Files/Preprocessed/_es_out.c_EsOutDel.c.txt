func	2:0	63:0	0	static void	EsOutDel
params	2:20	0:0	1	
param	2:22	2:35	2	es_out_t *	out
param	2:37	2:53	2	es_out_id_t *	es
stmnts	0:0	62:14	1	
decl	4:4	4:36	2	es_out_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	out
op	4:29	0:0	2	->
water	4:31	0:0	2	p_sys
decl	5:4	5:27	2	bool	b_reselect
op	5:20	0:0	2	=
water	5:22	0:0	2	false
decl	6:4	6:9	2	int	i
call	7:4	7:33	2	vlc_mutex_lock
arg	7:20	7:33	3	&p_sys->lock
op	7:20	0:0	4	&
water	7:21	0:0	4	p_sys
op	7:26	0:0	4	->
water	7:28	0:0	4	lock
water	7:34	0:0	2	;
if	9:4	21:4	2	(es -> p_dec)
cond	9:8	9:12	3	es -> p_dec
water	9:8	0:0	4	es
op	9:10	0:0	4	->
water	9:12	0:0	4	p_dec
stmts	10:4	21:4	3	
water	10:4	0:0	4	{
while	11:8	19:8	4	(vlc_object_alive (p_sys -> p_input ) && ! p_sys -> b_buffering && es -> p_dec)
cond	11:15	11:78	5	vlc_object_alive (p_sys -> p_input ) && ! p_sys -> b_buffering && es -> p_dec
call	11:15	11:46	6	vlc_object_alive
arg	11:32	11:46	7	p_sys->p_input
water	11:32	0:0	8	p_sys
op	11:37	0:0	8	->
water	11:39	0:0	8	p_input
op	11:48	0:0	6	&&
op	11:51	0:0	6	!
water	11:52	0:0	6	p_sys
op	11:57	0:0	6	->
water	11:59	0:0	6	b_buffering
op	11:71	0:0	6	&&
water	11:74	0:0	6	es
op	11:76	0:0	6	->
water	11:78	0:0	6	p_dec
stmts	12:8	19:8	5	
water	12:8	0:0	6	{
if	13:12	15:21	6	(input_DecoderIsEmpty (es -> p_dec ) && ( ! es -> p_dec_record ||input_DecoderIsEmpty (es -> p_dec_record ) ))
cond	13:16	14:80	7	input_DecoderIsEmpty (es -> p_dec ) && ( ! es -> p_dec_record ||input_DecoderIsEmpty (es -> p_dec_record ) )
call	13:16	13:48	8	input_DecoderIsEmpty
arg	13:38	13:48	9	es->p_dec
water	13:38	0:0	10	es
op	13:40	0:0	10	->
water	13:42	0:0	10	p_dec
op	13:50	0:0	8	&&
water	14:16	0:0	8	(
op	14:18	0:0	8	!
water	14:19	0:0	8	es
op	14:21	0:0	8	->
water	14:23	0:0	8	p_dec_record
op	14:36	0:0	8	||
call	14:39	14:78	8	input_DecoderIsEmpty
arg	14:61	14:78	9	es->p_dec_record
water	14:61	0:0	10	es
op	14:63	0:0	10	->
water	14:65	0:0	10	p_dec_record
water	14:80	0:0	8	)
stmts	15:16	15:21	7	
break	15:16	15:21	8	
call	18:12	18:28	6	msleep
arg	18:20	18:28	7	20*1000
water	18:20	0:0	8	20
op	18:22	0:0	8	*
water	18:23	0:0	8	1000
water	18:29	0:0	6	;
water	19:8	0:0	6	}
call	20:8	20:57	4	EsUnselect
arg	20:20	20:23	5	out
water	20:20	0:0	6	out
arg	20:25	20:27	5	es
water	20:25	0:0	6	es
arg	20:29	20:57	5	es->p_pgrm==p_sys->p_pgrm
water	20:29	0:0	6	es
op	20:31	0:0	6	->
water	20:33	0:0	6	p_pgrm
op	20:40	0:0	6	==
water	20:43	0:0	6	p_sys
op	20:48	0:0	6	->
water	20:50	0:0	6	p_pgrm
water	20:58	0:0	4	;
water	21:4	0:0	4	}
if	22:4	23:41	2	(es -> p_pgrm == p_sys -> p_pgrm)
cond	22:8	22:29	3	es -> p_pgrm == p_sys -> p_pgrm
water	22:8	0:0	4	es
op	22:10	0:0	4	->
water	22:12	0:0	4	p_pgrm
op	22:19	0:0	4	==
water	22:22	0:0	4	p_sys
op	22:27	0:0	4	->
water	22:29	0:0	4	p_pgrm
stmts	23:8	23:41	3	
call	23:8	23:40	4	EsOutESVarUpdate
arg	23:26	23:29	5	out
water	23:26	0:0	6	out
arg	23:31	23:33	5	es
water	23:31	0:0	6	es
arg	23:35	23:40	5	true
water	23:35	0:0	6	true
water	23:41	0:0	4	;
call	24:4	24:43	2	TAB_REMOVE
arg	24:16	24:27	3	p_sys->i_es
water	24:16	0:0	4	p_sys
op	24:21	0:0	4	->
water	24:23	0:0	4	i_es
arg	24:29	24:38	3	p_sys->es
water	24:29	0:0	4	p_sys
op	24:34	0:0	4	->
water	24:36	0:0	4	es
arg	24:40	24:43	3	es
water	24:40	0:0	4	es
water	24:44	0:0	2	;
water	26:4	0:0	2	es
op	26:6	0:0	2	->
water	26:8	0:0	2	p_pgrm
op	26:14	0:0	2	->
water	26:16	0:0	2	i_es
op	26:20	0:0	2	--
water	26:22	0:0	2	;
if	27:4	28:71	2	(es -> p_pgrm -> i_es == 0)
cond	27:8	27:28	3	es -> p_pgrm -> i_es == 0
water	27:8	0:0	4	es
op	27:10	0:0	4	->
water	27:12	0:0	4	p_pgrm
op	27:18	0:0	4	->
water	27:20	0:0	4	i_es
op	27:25	0:0	4	==
water	27:28	0:0	4	0
stmts	28:8	28:71	3	
call	28:8	28:70	4	msg_Dbg
arg	28:17	28:31	5	p_sys->p_input
water	28:17	0:0	6	p_sys
op	28:22	0:0	6	->
water	28:24	0:0	6	p_input
arg	28:33	28:70	5	"Program doesn't contain anymore ES"
water	28:33	0:0	6	"Program doesn't contain anymore ES"
water	28:71	0:0	4	;
if	29:4	30:54	2	(es -> b_scrambled)
cond	29:8	29:12	3	es -> b_scrambled
water	29:8	0:0	4	es
op	29:10	0:0	4	->
water	29:12	0:0	4	b_scrambled
stmts	30:8	30:54	3	
call	30:8	30:53	4	EsOutProgramUpdateScrambled
arg	30:37	30:40	5	out
water	30:37	0:0	6	out
arg	30:42	30:53	5	es->p_pgrm
water	30:42	0:0	6	es
op	30:44	0:0	6	->
water	30:46	0:0	6	p_pgrm
water	30:54	0:0	4	;
if	32:4	33:49	2	(p_sys -> p_es_audio == es || p_sys -> p_es_video == es || p_sys -> p_es_sub == es)
cond	32:8	33:27	3	p_sys -> p_es_audio == es || p_sys -> p_es_video == es || p_sys -> p_es_sub == es
water	32:8	0:0	4	p_sys
op	32:13	0:0	4	->
water	32:15	0:0	4	p_es_audio
op	32:26	0:0	4	==
water	32:29	0:0	4	es
op	32:32	0:0	4	||
water	32:35	0:0	4	p_sys
op	32:40	0:0	4	->
water	32:42	0:0	4	p_es_video
op	32:53	0:0	4	==
water	32:56	0:0	4	es
op	32:59	0:0	4	||
water	33:8	0:0	4	p_sys
op	33:13	0:0	4	->
water	33:15	0:0	4	p_es_sub
op	33:24	0:0	4	==
water	33:27	0:0	4	es
stmts	33:32	33:49	3	
water	33:32	0:0	4	b_reselect
op	33:43	0:0	4	=
water	33:45	0:0	4	true
water	33:49	0:0	4	;
if	34:4	34:58	2	(p_sys -> p_es_audio == es)
cond	34:8	34:29	3	p_sys -> p_es_audio == es
water	34:8	0:0	4	p_sys
op	34:13	0:0	4	->
water	34:15	0:0	4	p_es_audio
op	34:26	0:0	4	==
water	34:29	0:0	4	es
stmts	34:34	34:58	3	
water	34:34	0:0	4	p_sys
op	34:39	0:0	4	->
water	34:41	0:0	4	p_es_audio
op	34:52	0:0	4	=
water	34:54	0:0	4	NULL
water	34:58	0:0	4	;
if	35:4	35:58	2	(p_sys -> p_es_video == es)
cond	35:8	35:29	3	p_sys -> p_es_video == es
water	35:8	0:0	4	p_sys
op	35:13	0:0	4	->
water	35:15	0:0	4	p_es_video
op	35:26	0:0	4	==
water	35:29	0:0	4	es
stmts	35:34	35:58	3	
water	35:34	0:0	4	p_sys
op	35:39	0:0	4	->
water	35:41	0:0	4	p_es_video
op	35:52	0:0	4	=
water	35:54	0:0	4	NULL
water	35:58	0:0	4	;
if	36:4	36:58	2	(p_sys -> p_es_sub == es)
cond	36:8	36:29	3	p_sys -> p_es_sub == es
water	36:8	0:0	4	p_sys
op	36:13	0:0	4	->
water	36:15	0:0	4	p_es_sub
op	36:26	0:0	4	==
water	36:29	0:0	4	es
stmts	36:34	36:58	3	
water	36:34	0:0	4	p_sys
op	36:39	0:0	4	->
water	36:41	0:0	4	p_es_sub
op	36:52	0:0	4	=
water	36:54	0:0	4	NULL
water	36:58	0:0	4	;
switch	37:4	48:4	2	(es -> fmt . i_cat)
cond	37:12	37:20	3	es -> fmt . i_cat
water	37:12	0:0	4	es
op	37:14	0:0	4	->
water	37:16	0:0	4	fmt
op	37:19	0:0	4	.
water	37:20	0:0	4	i_cat
stmts	38:4	48:4	3	
water	38:4	0:0	4	{
label	39:8	39:21	4	case AUDIO_ES :
water	40:12	0:0	4	p_sys
op	40:17	0:0	4	->
water	40:19	0:0	4	i_audio
op	40:26	0:0	4	--
water	40:28	0:0	4	;
break	41:12	41:17	4	
label	42:8	42:19	4	case SPU_ES :
water	43:12	0:0	4	p_sys
op	43:17	0:0	4	->
water	43:19	0:0	4	i_sub
op	43:24	0:0	4	--
water	43:26	0:0	4	;
break	44:12	44:17	4	
label	45:8	45:21	4	case VIDEO_ES :
water	46:12	0:0	4	p_sys
op	46:17	0:0	4	->
water	46:19	0:0	4	i_video
op	46:26	0:0	4	--
water	46:28	0:0	4	;
break	47:12	47:17	4	
water	48:4	0:0	4	}
if	50:4	57:4	2	(b_reselect)
cond	50:8	50:8	3	b_reselect
water	50:8	0:0	4	b_reselect
stmts	51:4	57:4	3	
water	51:4	0:0	4	{
for	52:8	56:8	4	(i = 0 ;i < p_sys -> i_es;i ++)
forinit	52:13	52:18	5	i = 0 ;
water	52:13	0:0	6	i
op	52:15	0:0	6	=
water	52:17	0:0	6	0
water	52:18	0:0	6	;
cond	52:20	52:31	5	i < p_sys -> i_es
water	52:20	0:0	6	i
op	52:22	0:0	6	<
water	52:24	0:0	6	p_sys
op	52:29	0:0	6	->
water	52:31	0:0	6	i_es
forexpr	52:37	52:38	5	i ++
water	52:37	0:0	6	i
op	52:38	0:0	6	++
stmts	53:8	56:8	5	
water	53:8	0:0	6	{
if	54:12	55:55	6	(es -> fmt . i_cat == p_sys -> es [ i ] -> fmt . i_cat)
cond	54:16	54:51	7	es -> fmt . i_cat == p_sys -> es [ i ] -> fmt . i_cat
water	54:16	0:0	8	es
op	54:18	0:0	8	->
water	54:20	0:0	8	fmt
op	54:23	0:0	8	.
water	54:24	0:0	8	i_cat
op	54:30	0:0	8	==
water	54:33	0:0	8	p_sys
op	54:38	0:0	8	->
water	54:40	0:0	8	es
op	54:42	0:0	8	[
water	54:43	0:0	8	i
op	54:44	0:0	8	]
op	54:45	0:0	8	->
water	54:47	0:0	8	fmt
op	54:50	0:0	8	.
water	54:51	0:0	8	i_cat
stmts	55:16	55:55	7	
call	55:16	55:54	8	EsOutSelect
arg	55:29	55:32	9	out
water	55:29	0:0	10	out
arg	55:34	55:46	9	p_sys->es[i]
water	55:34	0:0	10	p_sys
op	55:39	0:0	10	->
water	55:41	0:0	10	es
op	55:43	0:0	10	[
water	55:44	0:0	10	i
op	55:45	0:0	10	]
arg	55:48	55:54	9	false
water	55:48	0:0	10	false
water	55:55	0:0	8	;
water	56:8	0:0	6	}
water	57:4	0:0	4	}
call	58:4	58:27	2	free
arg	58:10	58:27	3	es->psz_language
water	58:10	0:0	4	es
op	58:12	0:0	4	->
water	58:14	0:0	4	psz_language
water	58:28	0:0	2	;
call	59:4	59:32	2	free
arg	59:10	59:32	3	es->psz_language_code
water	59:10	0:0	4	es
op	59:12	0:0	4	->
water	59:14	0:0	4	psz_language_code
water	59:33	0:0	2	;
call	60:4	60:30	2	es_format_Clean
arg	60:21	60:30	3	&es->fmt
op	60:21	0:0	4	&
water	60:22	0:0	4	es
op	60:24	0:0	4	->
water	60:26	0:0	4	fmt
water	60:31	0:0	2	;
call	61:4	61:35	2	vlc_mutex_unlock
arg	61:22	61:35	3	&p_sys->lock
op	61:22	0:0	4	&
water	61:23	0:0	4	p_sys
op	61:28	0:0	4	->
water	61:30	0:0	4	lock
water	61:36	0:0	2	;
call	62:4	62:13	2	free
arg	62:10	62:13	3	es
water	62:10	0:0	4	es
water	62:14	0:0	2	;
