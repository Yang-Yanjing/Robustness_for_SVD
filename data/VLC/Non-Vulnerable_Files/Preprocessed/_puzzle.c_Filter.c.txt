func	2:0	287:0	0	picture_t *	Filter
params	2:17	0:0	1	
param	2:19	2:37	2	filter_t *	p_filter
param	2:39	2:59	2	picture_t *	p_pic_in
stmnts	3:4	286:52	1	
if	3:4	3:43	2	(! p_pic_in || ! p_filter)
cond	3:8	3:22	3	! p_pic_in || ! p_filter
op	3:8	0:0	4	!
water	3:9	0:0	4	p_pic_in
op	3:18	0:0	4	||
op	3:21	0:0	4	!
water	3:22	0:0	4	p_filter
stmts	3:32	3:43	3	
return	3:32	3:43	4	NULL
water	3:39	0:0	5	NULL
decl	4:4	4:61	2	const video_format_t	*p_fmt_in
op	4:36	0:0	2	=
op	4:38	0:0	2	&
water	4:39	0:0	2	p_filter
op	4:47	0:0	2	->
water	4:49	0:0	2	fmt_in
op	4:55	0:0	2	.
water	4:56	0:0	2	video
decl	5:4	5:41	2	filter_sys_t	*p_sys
op	5:24	0:0	2	=
water	5:26	0:0	2	p_filter
op	5:34	0:0	2	->
water	5:36	0:0	2	p_sys
decl	6:4	6:56	2	picture_t	*p_pic_out
op	6:25	0:0	2	=
call	6:27	6:55	3	filter_NewPicture
arg	6:46	6:55	4	p_filter
water	6:46	0:0	5	p_filter
if	7:4	10:4	2	(! p_pic_out)
cond	7:8	7:9	3	! p_pic_out
op	7:8	0:0	4	!
water	7:9	0:0	4	p_pic_out
stmts	7:21	10:4	3	
water	7:21	0:0	4	{
call	8:8	8:34	4	picture_Release
arg	8:25	8:34	5	p_pic_in
water	8:25	0:0	6	p_pic_in
water	8:35	0:0	4	;
return	9:8	9:19	4	NULL
water	9:15	0:0	5	NULL
water	10:4	0:0	4	}
decl	11:4	11:17	2	int	i_ret
op	11:14	0:0	2	=
water	11:16	0:0	2	0
water	12:4	0:0	2	p_sys
op	12:9	0:0	2	->
water	12:11	0:0	2	b_bake_request
op	12:26	0:0	2	=
water	12:28	0:0	2	false
water	12:33	0:0	2	;
if	13:4	14:29	2	(( p_sys -> pi_order == NULL ) || ( p_sys -> ps_desk_planes == NULL ) || ( p_sys -> ps_pict_planes == NULL ) || ( p_sys -> ps_puzzle_array == NULL ) || ( p_sys -> ps_pieces == NULL ))
cond	13:8	13:169	3	( p_sys -> pi_order == NULL ) || ( p_sys -> ps_desk_planes == NULL ) || ( p_sys -> ps_pict_planes == NULL ) || ( p_sys -> ps_puzzle_array == NULL ) || ( p_sys -> ps_pieces == NULL )
water	13:8	0:0	4	(
water	13:9	0:0	4	p_sys
op	13:14	0:0	4	->
water	13:16	0:0	4	pi_order
op	13:25	0:0	4	==
water	13:28	0:0	4	NULL
water	13:32	0:0	4	)
op	13:34	0:0	4	||
water	13:37	0:0	4	(
water	13:38	0:0	4	p_sys
op	13:43	0:0	4	->
water	13:45	0:0	4	ps_desk_planes
op	13:60	0:0	4	==
water	13:63	0:0	4	NULL
water	13:67	0:0	4	)
op	13:69	0:0	4	||
water	13:72	0:0	4	(
water	13:73	0:0	4	p_sys
op	13:78	0:0	4	->
water	13:80	0:0	4	ps_pict_planes
op	13:95	0:0	4	==
water	13:98	0:0	4	NULL
water	13:102	0:0	4	)
op	13:105	0:0	4	||
water	13:108	0:0	4	(
water	13:109	0:0	4	p_sys
op	13:114	0:0	4	->
water	13:116	0:0	4	ps_puzzle_array
op	13:132	0:0	4	==
water	13:135	0:0	4	NULL
water	13:139	0:0	4	)
op	13:141	0:0	4	||
water	13:144	0:0	4	(
water	13:145	0:0	4	p_sys
op	13:150	0:0	4	->
water	13:152	0:0	4	ps_pieces
op	13:162	0:0	4	==
water	13:165	0:0	4	NULL
water	13:169	0:0	4	)
stmts	14:8	14:29	3	
water	14:8	0:0	4	p_sys
op	14:13	0:0	4	->
water	14:15	0:0	4	b_init
op	14:22	0:0	4	=
water	14:24	0:0	4	false
water	14:29	0:0	4	;
if	15:4	16:29	2	(( p_sys -> ps_pieces_shapes == NULL ) && p_sys -> s_current_param . b_advanced && ( p_sys -> s_current_param . i_shape_size != 0 ))
cond	15:8	15:123	3	( p_sys -> ps_pieces_shapes == NULL ) && p_sys -> s_current_param . b_advanced && ( p_sys -> s_current_param . i_shape_size != 0 )
water	15:8	0:0	4	(
water	15:9	0:0	4	p_sys
op	15:14	0:0	4	->
water	15:16	0:0	4	ps_pieces_shapes
op	15:33	0:0	4	==
water	15:36	0:0	4	NULL
water	15:40	0:0	4	)
op	15:42	0:0	4	&&
water	15:45	0:0	4	p_sys
op	15:50	0:0	4	->
water	15:52	0:0	4	s_current_param
op	15:67	0:0	4	.
water	15:68	0:0	4	b_advanced
op	15:79	0:0	4	&&
water	15:82	0:0	4	(
water	15:83	0:0	4	p_sys
op	15:88	0:0	4	->
water	15:90	0:0	4	s_current_param
op	15:105	0:0	4	.
water	15:106	0:0	4	i_shape_size
op	15:119	0:0	4	!=
water	15:122	0:0	4	0
water	15:123	0:0	4	)
stmts	16:8	16:29	3	
water	16:8	0:0	4	p_sys
op	16:13	0:0	4	->
water	16:15	0:0	4	b_init
op	16:22	0:0	4	=
water	16:24	0:0	4	false
water	16:29	0:0	4	;
if	18:4	19:29	2	(p_sys -> s_allocated . i_planes != p_pic_out -> i_planes)
cond	18:9	18:51	3	p_sys -> s_allocated . i_planes != p_pic_out -> i_planes
water	18:9	0:0	4	p_sys
op	18:14	0:0	4	->
water	18:16	0:0	4	s_allocated
op	18:27	0:0	4	.
water	18:28	0:0	4	i_planes
op	18:37	0:0	4	!=
water	18:40	0:0	4	p_pic_out
op	18:49	0:0	4	->
water	18:51	0:0	4	i_planes
stmts	19:8	19:29	3	
water	19:8	0:0	4	p_sys
op	19:13	0:0	4	->
water	19:15	0:0	4	b_init
op	19:22	0:0	4	=
water	19:24	0:0	4	false
water	19:29	0:0	4	;
water	20:4	0:0	2	p_sys
op	20:9	0:0	2	->
water	20:11	0:0	2	s_current_param
op	20:26	0:0	2	.
water	20:27	0:0	2	i_planes
op	20:36	0:0	2	=
water	20:38	0:0	2	p_pic_out
op	20:47	0:0	2	->
water	20:49	0:0	2	i_planes
water	20:57	0:0	2	;
if	21:4	29:4	2	(p_sys -> ps_pict_planes != NULL)
cond	21:8	21:33	3	p_sys -> ps_pict_planes != NULL
water	21:8	0:0	4	p_sys
op	21:13	0:0	4	->
water	21:15	0:0	4	ps_pict_planes
op	21:30	0:0	4	!=
water	21:33	0:0	4	NULL
stmts	21:39	29:4	3	
water	21:39	0:0	4	{
for	22:8	28:8	4	( uint8_t i_plane = 0 ;i_plane < p_sys -> s_allocated . i_planes;i_plane ++)
forinit	0:0	22:32	5	 uint8_t i_plane = 0 ;
decl	22:13	22:32	6	uint8_t	i_plane
op	22:29	0:0	6	=
water	22:31	0:0	6	0
cond	22:34	22:63	5	i_plane < p_sys -> s_allocated . i_planes
water	22:34	0:0	6	i_plane
op	22:42	0:0	6	<
water	22:44	0:0	6	p_sys
op	22:49	0:0	6	->
water	22:51	0:0	6	s_allocated
op	22:62	0:0	6	.
water	22:63	0:0	6	i_planes
forexpr	22:73	22:80	5	i_plane ++
water	22:73	0:0	6	i_plane
op	22:80	0:0	6	++
stmts	22:84	28:8	5	
water	22:84	0:0	6	{
if	23:12	27:37	6	(( p_sys -> ps_pict_planes [ i_plane ] . i_lines != p_pic_in -> p [ i_plane ] . i_visible_lines ) || ( p_sys -> ps_pict_planes [ i_plane ] . i_width != p_pic_in -> p [ i_plane ] . i_visible_pitch / p_pic_in -> p [ i_plane ] . i_pixel_pitch ) || ( p_sys -> ps_desk_planes [ i_plane ] . i_lines != p_pic_out -> p [ i_plane ] . i_visible_lines ) || ( p_sys -> ps_desk_planes [ i_plane ] . i_width != p_pic_out -> p [ i_plane ] . i_visible_pitch / p_pic_out -> p [ i_plane ] . i_pixel_pitch ))
cond	23:17	26:141	7	( p_sys -> ps_pict_planes [ i_plane ] . i_lines != p_pic_in -> p [ i_plane ] . i_visible_lines ) || ( p_sys -> ps_pict_planes [ i_plane ] . i_width != p_pic_in -> p [ i_plane ] . i_visible_pitch / p_pic_in -> p [ i_plane ] . i_pixel_pitch ) || ( p_sys -> ps_desk_planes [ i_plane ] . i_lines != p_pic_out -> p [ i_plane ] . i_visible_lines ) || ( p_sys -> ps_desk_planes [ i_plane ] . i_width != p_pic_out -> p [ i_plane ] . i_visible_pitch / p_pic_out -> p [ i_plane ] . i_pixel_pitch )
water	23:17	0:0	8	(
water	23:18	0:0	8	p_sys
op	23:23	0:0	8	->
water	23:25	0:0	8	ps_pict_planes
op	23:39	0:0	8	[
water	23:40	0:0	8	i_plane
op	23:47	0:0	8	]
op	23:48	0:0	8	.
water	23:49	0:0	8	i_lines
op	23:57	0:0	8	!=
water	23:60	0:0	8	p_pic_in
op	23:68	0:0	8	->
water	23:70	0:0	8	p
op	23:71	0:0	8	[
water	23:72	0:0	8	i_plane
op	23:79	0:0	8	]
op	23:80	0:0	8	.
water	23:81	0:0	8	i_visible_lines
water	23:96	0:0	8	)
op	24:20	0:0	8	||
water	24:23	0:0	8	(
water	24:24	0:0	8	p_sys
op	24:29	0:0	8	->
water	24:31	0:0	8	ps_pict_planes
op	24:45	0:0	8	[
water	24:46	0:0	8	i_plane
op	24:53	0:0	8	]
op	24:54	0:0	8	.
water	24:55	0:0	8	i_width
op	24:63	0:0	8	!=
water	24:66	0:0	8	p_pic_in
op	24:74	0:0	8	->
water	24:76	0:0	8	p
op	24:77	0:0	8	[
water	24:78	0:0	8	i_plane
op	24:85	0:0	8	]
op	24:86	0:0	8	.
water	24:87	0:0	8	i_visible_pitch
op	24:103	0:0	8	/
water	24:105	0:0	8	p_pic_in
op	24:113	0:0	8	->
water	24:115	0:0	8	p
op	24:116	0:0	8	[
water	24:117	0:0	8	i_plane
op	24:124	0:0	8	]
op	24:125	0:0	8	.
water	24:126	0:0	8	i_pixel_pitch
water	24:139	0:0	8	)
op	25:20	0:0	8	||
water	25:23	0:0	8	(
water	25:24	0:0	8	p_sys
op	25:29	0:0	8	->
water	25:31	0:0	8	ps_desk_planes
op	25:45	0:0	8	[
water	25:46	0:0	8	i_plane
op	25:53	0:0	8	]
op	25:54	0:0	8	.
water	25:55	0:0	8	i_lines
op	25:63	0:0	8	!=
water	25:66	0:0	8	p_pic_out
op	25:75	0:0	8	->
water	25:77	0:0	8	p
op	25:78	0:0	8	[
water	25:79	0:0	8	i_plane
op	25:86	0:0	8	]
op	25:87	0:0	8	.
water	25:88	0:0	8	i_visible_lines
water	25:103	0:0	8	)
op	26:20	0:0	8	||
water	26:23	0:0	8	(
water	26:24	0:0	8	p_sys
op	26:29	0:0	8	->
water	26:31	0:0	8	ps_desk_planes
op	26:45	0:0	8	[
water	26:46	0:0	8	i_plane
op	26:53	0:0	8	]
op	26:54	0:0	8	.
water	26:55	0:0	8	i_width
op	26:63	0:0	8	!=
water	26:66	0:0	8	p_pic_out
op	26:75	0:0	8	->
water	26:77	0:0	8	p
op	26:78	0:0	8	[
water	26:79	0:0	8	i_plane
op	26:86	0:0	8	]
op	26:87	0:0	8	.
water	26:88	0:0	8	i_visible_pitch
op	26:104	0:0	8	/
water	26:106	0:0	8	p_pic_out
op	26:115	0:0	8	->
water	26:117	0:0	8	p
op	26:118	0:0	8	[
water	26:119	0:0	8	i_plane
op	26:126	0:0	8	]
op	26:127	0:0	8	.
water	26:128	0:0	8	i_pixel_pitch
water	26:141	0:0	8	)
stmts	27:16	27:37	7	
water	27:16	0:0	8	p_sys
op	27:21	0:0	8	->
water	27:23	0:0	8	b_init
op	27:30	0:0	8	=
water	27:32	0:0	8	false
water	27:37	0:0	8	;
water	28:8	0:0	6	}
water	29:4	0:0	4	}
water	30:4	0:0	2	p_sys
op	30:9	0:0	2	->
water	30:11	0:0	2	s_current_param
op	30:26	0:0	2	.
water	30:27	0:0	2	i_pict_width
op	30:41	0:0	2	=
water	30:43	0:0	2	(
water	30:44	0:0	2	int
water	30:47	0:0	2	)
water	30:49	0:0	2	p_pic_in
op	30:57	0:0	2	->
water	30:59	0:0	2	p
op	30:60	0:0	2	[
water	30:61	0:0	2	0
op	30:62	0:0	2	]
op	30:63	0:0	2	.
water	30:64	0:0	2	i_visible_pitch
op	30:80	0:0	2	/
water	30:82	0:0	2	p_pic_in
op	30:90	0:0	2	->
water	30:92	0:0	2	p
op	30:93	0:0	2	[
water	30:94	0:0	2	0
op	30:95	0:0	2	]
op	30:96	0:0	2	.
water	30:97	0:0	2	i_pixel_pitch
water	30:110	0:0	2	;
water	31:4	0:0	2	p_sys
op	31:9	0:0	2	->
water	31:11	0:0	2	s_current_param
op	31:26	0:0	2	.
water	31:27	0:0	2	i_pict_height
op	31:41	0:0	2	=
water	31:43	0:0	2	(
water	31:44	0:0	2	int
water	31:47	0:0	2	)
water	31:49	0:0	2	p_pic_in
op	31:57	0:0	2	->
water	31:59	0:0	2	p
op	31:60	0:0	2	[
water	31:61	0:0	2	0
op	31:62	0:0	2	]
op	31:63	0:0	2	.
water	31:64	0:0	2	i_visible_lines
water	31:79	0:0	2	;
water	32:4	0:0	2	p_sys
op	32:9	0:0	2	->
water	32:11	0:0	2	s_current_param
op	32:26	0:0	2	.
water	32:27	0:0	2	i_desk_width
op	32:41	0:0	2	=
water	32:43	0:0	2	(
water	32:44	0:0	2	int
water	32:47	0:0	2	)
water	32:49	0:0	2	p_pic_out
op	32:58	0:0	2	->
water	32:60	0:0	2	p
op	32:61	0:0	2	[
water	32:62	0:0	2	0
op	32:63	0:0	2	]
op	32:64	0:0	2	.
water	32:65	0:0	2	i_visible_pitch
op	32:81	0:0	2	/
water	32:83	0:0	2	p_pic_out
op	32:92	0:0	2	->
water	32:94	0:0	2	p
op	32:95	0:0	2	[
water	32:96	0:0	2	0
op	32:97	0:0	2	]
op	32:98	0:0	2	.
water	32:99	0:0	2	i_pixel_pitch
water	32:112	0:0	2	;
water	33:4	0:0	2	p_sys
op	33:9	0:0	2	->
water	33:11	0:0	2	s_current_param
op	33:26	0:0	2	.
water	33:27	0:0	2	i_desk_height
op	33:41	0:0	2	=
water	33:43	0:0	2	(
water	33:44	0:0	2	int
water	33:47	0:0	2	)
water	33:49	0:0	2	p_pic_out
op	33:58	0:0	2	->
water	33:60	0:0	2	p
op	33:61	0:0	2	[
water	33:62	0:0	2	0
op	33:63	0:0	2	]
op	33:64	0:0	2	.
water	33:65	0:0	2	i_visible_lines
water	33:80	0:0	2	;
if	35:4	42:4	2	(p_sys -> s_current_param . i_pict_width != p_sys -> s_current_param . i_desk_width || p_sys -> s_current_param . i_pict_height != p_sys -> s_current_param . i_desk_height || p_sys -> s_current_param . i_pict_width != ( int ) p_fmt_in -> i_visible_width || p_sys -> s_current_param . i_pict_height != ( int ) p_fmt_in -> i_visible_height)
cond	35:12	38:68	3	p_sys -> s_current_param . i_pict_width != p_sys -> s_current_param . i_desk_width || p_sys -> s_current_param . i_pict_height != p_sys -> s_current_param . i_desk_height || p_sys -> s_current_param . i_pict_width != ( int ) p_fmt_in -> i_visible_width || p_sys -> s_current_param . i_pict_height != ( int ) p_fmt_in -> i_visible_height
water	35:12	0:0	4	p_sys
op	35:17	0:0	4	->
water	35:19	0:0	4	s_current_param
op	35:34	0:0	4	.
water	35:35	0:0	4	i_pict_width
op	35:49	0:0	4	!=
water	35:52	0:0	4	p_sys
op	35:57	0:0	4	->
water	35:59	0:0	4	s_current_param
op	35:74	0:0	4	.
water	35:75	0:0	4	i_desk_width
op	36:9	0:0	4	||
water	36:12	0:0	4	p_sys
op	36:17	0:0	4	->
water	36:19	0:0	4	s_current_param
op	36:34	0:0	4	.
water	36:35	0:0	4	i_pict_height
op	36:49	0:0	4	!=
water	36:52	0:0	4	p_sys
op	36:57	0:0	4	->
water	36:59	0:0	4	s_current_param
op	36:74	0:0	4	.
water	36:75	0:0	4	i_desk_height
op	37:9	0:0	4	||
water	37:12	0:0	4	p_sys
op	37:17	0:0	4	->
water	37:19	0:0	4	s_current_param
op	37:34	0:0	4	.
water	37:35	0:0	4	i_pict_width
op	37:49	0:0	4	!=
water	37:52	0:0	4	(
water	37:53	0:0	4	int
water	37:56	0:0	4	)
water	37:58	0:0	4	p_fmt_in
op	37:66	0:0	4	->
water	37:68	0:0	4	i_visible_width
op	38:9	0:0	4	||
water	38:12	0:0	4	p_sys
op	38:17	0:0	4	->
water	38:19	0:0	4	s_current_param
op	38:34	0:0	4	.
water	38:35	0:0	4	i_pict_height
op	38:49	0:0	4	!=
water	38:52	0:0	4	(
water	38:53	0:0	4	int
water	38:56	0:0	4	)
water	38:58	0:0	4	p_fmt_in
op	38:66	0:0	4	->
water	38:68	0:0	4	i_visible_height
stmts	38:87	42:4	3	
water	38:87	0:0	4	{
call	39:8	39:32	4	picture_Release
arg	39:24	39:32	5	p_pic_in
water	39:24	0:0	6	p_pic_in
water	39:33	0:0	4	;
call	40:8	40:33	4	picture_Release
arg	40:24	40:33	5	p_pic_out
water	40:24	0:0	6	p_pic_out
water	40:34	0:0	4	;
return	41:8	41:19	4	NULL
water	41:15	0:0	5	NULL
water	42:4	0:0	4	}
call	43:4	43:33	2	vlc_mutex_lock
arg	43:20	43:33	3	&p_sys->lock
op	43:20	0:0	4	&
water	43:21	0:0	4	p_sys
op	43:26	0:0	4	->
water	43:28	0:0	4	lock
water	43:34	0:0	2	;
if	45:4	124:4	2	(p_sys -> b_change_param || p_sys -> b_bake_request || ! p_sys -> b_init)
cond	45:9	45:67	3	p_sys -> b_change_param || p_sys -> b_bake_request || ! p_sys -> b_init
water	45:9	0:0	4	p_sys
op	45:14	0:0	4	->
water	45:16	0:0	4	b_change_param
op	45:31	0:0	4	||
water	45:34	0:0	4	p_sys
op	45:39	0:0	4	->
water	45:41	0:0	4	b_bake_request
op	45:56	0:0	4	||
op	45:59	0:0	4	!
water	45:60	0:0	4	p_sys
op	45:65	0:0	4	->
water	45:67	0:0	4	b_init
stmts	45:76	124:4	3	
water	45:76	0:0	4	{
if	46:8	56:8	4	(p_sys -> s_allocated . i_rows != p_sys -> s_new_param . i_rows || p_sys -> s_allocated . i_cols != p_sys -> s_new_param . i_cols || p_sys -> s_allocated . i_rotate != p_sys -> s_new_param . i_rotate || p_sys -> s_allocated . i_mode != p_sys -> s_new_param . i_mode || p_sys -> b_bake_request || ! p_sys -> b_init)
cond	46:13	50:53	5	p_sys -> s_allocated . i_rows != p_sys -> s_new_param . i_rows || p_sys -> s_allocated . i_cols != p_sys -> s_new_param . i_cols || p_sys -> s_allocated . i_rotate != p_sys -> s_new_param . i_rotate || p_sys -> s_allocated . i_mode != p_sys -> s_new_param . i_mode || p_sys -> b_bake_request || ! p_sys -> b_init
water	46:13	0:0	6	p_sys
op	46:18	0:0	6	->
water	46:20	0:0	6	s_allocated
op	46:31	0:0	6	.
water	46:32	0:0	6	i_rows
op	46:39	0:0	6	!=
water	46:42	0:0	6	p_sys
op	46:47	0:0	6	->
water	46:49	0:0	6	s_new_param
op	46:60	0:0	6	.
water	46:61	0:0	6	i_rows
op	47:16	0:0	6	||
water	47:19	0:0	6	p_sys
op	47:24	0:0	6	->
water	47:26	0:0	6	s_allocated
op	47:37	0:0	6	.
water	47:38	0:0	6	i_cols
op	47:45	0:0	6	!=
water	47:48	0:0	6	p_sys
op	47:53	0:0	6	->
water	47:55	0:0	6	s_new_param
op	47:66	0:0	6	.
water	47:67	0:0	6	i_cols
op	48:16	0:0	6	||
water	48:19	0:0	6	p_sys
op	48:24	0:0	6	->
water	48:26	0:0	6	s_allocated
op	48:37	0:0	6	.
water	48:38	0:0	6	i_rotate
op	48:47	0:0	6	!=
water	48:50	0:0	6	p_sys
op	48:55	0:0	6	->
water	48:57	0:0	6	s_new_param
op	48:68	0:0	6	.
water	48:69	0:0	6	i_rotate
op	49:16	0:0	6	||
water	49:19	0:0	6	p_sys
op	49:24	0:0	6	->
water	49:26	0:0	6	s_allocated
op	49:37	0:0	6	.
water	49:38	0:0	6	i_mode
op	49:45	0:0	6	!=
water	49:48	0:0	6	p_sys
op	49:53	0:0	6	->
water	49:55	0:0	6	s_new_param
op	49:66	0:0	6	.
water	49:67	0:0	6	i_mode
op	50:16	0:0	6	||
water	50:19	0:0	6	p_sys
op	50:24	0:0	6	->
water	50:26	0:0	6	b_bake_request
op	50:42	0:0	6	||
op	50:45	0:0	6	!
water	50:46	0:0	6	p_sys
op	50:51	0:0	6	->
water	50:53	0:0	6	b_init
stmts	51:8	56:8	5	
water	51:8	0:0	6	{
water	52:12	0:0	6	p_sys
op	52:17	0:0	6	->
water	52:19	0:0	6	b_bake_request
op	52:34	0:0	6	=
water	52:36	0:0	6	true
water	52:40	0:0	6	;
water	53:12	0:0	6	p_sys
op	53:17	0:0	6	->
water	53:19	0:0	6	b_init
op	53:26	0:0	6	=
water	53:28	0:0	6	false
water	53:33	0:0	6	;
water	54:12	0:0	6	p_sys
op	54:17	0:0	6	->
water	54:19	0:0	6	b_shuffle_rqst
op	54:34	0:0	6	=
water	54:36	0:0	6	true
water	54:40	0:0	6	;
water	55:12	0:0	6	p_sys
op	55:17	0:0	6	->
water	55:19	0:0	6	b_shape_init
op	55:32	0:0	6	=
water	55:34	0:0	6	false
water	55:39	0:0	6	;
water	56:8	0:0	6	}
if	57:8	62:8	4	(p_sys -> s_current_param . i_border != p_sys -> s_new_param . i_border || p_sys -> s_current_param . i_shape_size != p_sys -> s_new_param . i_shape_size)
cond	57:13	58:77	5	p_sys -> s_current_param . i_border != p_sys -> s_new_param . i_border || p_sys -> s_current_param . i_shape_size != p_sys -> s_new_param . i_shape_size
water	57:13	0:0	6	p_sys
op	57:18	0:0	6	->
water	57:20	0:0	6	s_current_param
op	57:35	0:0	6	.
water	57:36	0:0	6	i_border
op	57:45	0:0	6	!=
water	57:48	0:0	6	p_sys
op	57:53	0:0	6	->
water	57:55	0:0	6	s_new_param
op	57:66	0:0	6	.
water	57:67	0:0	6	i_border
op	58:16	0:0	6	||
water	58:19	0:0	6	p_sys
op	58:24	0:0	6	->
water	58:26	0:0	6	s_current_param
op	58:41	0:0	6	.
water	58:42	0:0	6	i_shape_size
op	58:55	0:0	6	!=
water	58:58	0:0	6	p_sys
op	58:63	0:0	6	->
water	58:65	0:0	6	s_new_param
op	58:76	0:0	6	.
water	58:77	0:0	6	i_shape_size
stmts	59:8	62:8	5	
water	59:8	0:0	6	{
water	60:12	0:0	6	p_sys
op	60:17	0:0	6	->
water	60:19	0:0	6	b_bake_request
op	60:34	0:0	6	=
water	60:36	0:0	6	true
water	60:40	0:0	6	;
water	61:12	0:0	6	p_sys
op	61:17	0:0	6	->
water	61:19	0:0	6	b_shape_init
op	61:32	0:0	6	=
water	61:34	0:0	6	false
water	61:39	0:0	6	;
water	62:8	0:0	6	}
switch	64:8	86:8	4	(p_sys -> s_new_param . i_mode)
cond	64:17	64:36	5	p_sys -> s_new_param . i_mode
water	64:17	0:0	6	p_sys
op	64:22	0:0	6	->
water	64:24	0:0	6	s_new_param
op	64:35	0:0	6	.
water	64:36	0:0	6	i_mode
stmts	65:8	86:8	5	
water	65:8	0:0	6	{
label	66:10	66:16	6	case 0 :
water	67:12	0:0	6	p_sys
op	67:17	0:0	6	->
water	67:19	0:0	6	s_new_param
op	67:30	0:0	6	.
water	67:31	0:0	6	b_advanced
op	67:45	0:0	6	=
water	67:47	0:0	6	true
water	67:51	0:0	6	;
water	68:12	0:0	6	p_sys
op	68:17	0:0	6	->
water	68:19	0:0	6	s_new_param
op	68:30	0:0	6	.
water	68:31	0:0	6	b_blackslot
op	68:45	0:0	6	=
water	68:47	0:0	6	false
water	68:52	0:0	6	;
water	69:12	0:0	6	p_sys
op	69:17	0:0	6	->
water	69:19	0:0	6	s_new_param
op	69:30	0:0	6	.
water	69:31	0:0	6	b_near
op	69:45	0:0	6	=
water	69:47	0:0	6	false
water	69:52	0:0	6	;
break	70:12	70:17	6	
label	71:10	71:16	6	case 1 :
water	72:12	0:0	6	p_sys
op	72:17	0:0	6	->
water	72:19	0:0	6	s_new_param
op	72:30	0:0	6	.
water	72:31	0:0	6	b_advanced
op	72:45	0:0	6	=
water	72:47	0:0	6	false
water	72:52	0:0	6	;
water	73:12	0:0	6	p_sys
op	73:17	0:0	6	->
water	73:19	0:0	6	s_new_param
op	73:30	0:0	6	.
water	73:31	0:0	6	b_blackslot
op	73:45	0:0	6	=
water	73:47	0:0	6	true
water	73:51	0:0	6	;
water	74:12	0:0	6	p_sys
op	74:17	0:0	6	->
water	74:19	0:0	6	s_new_param
op	74:30	0:0	6	.
water	74:31	0:0	6	b_near
op	74:45	0:0	6	=
water	74:47	0:0	6	true
water	74:51	0:0	6	;
break	75:12	75:17	6	
label	76:10	76:16	6	case 2 :
water	77:12	0:0	6	p_sys
op	77:17	0:0	6	->
water	77:19	0:0	6	s_new_param
op	77:30	0:0	6	.
water	77:31	0:0	6	b_advanced
op	77:45	0:0	6	=
water	77:47	0:0	6	false
water	77:52	0:0	6	;
water	78:12	0:0	6	p_sys
op	78:17	0:0	6	->
water	78:19	0:0	6	s_new_param
op	78:30	0:0	6	.
water	78:31	0:0	6	b_blackslot
op	78:45	0:0	6	=
water	78:47	0:0	6	false
water	78:52	0:0	6	;
water	79:12	0:0	6	p_sys
op	79:17	0:0	6	->
water	79:19	0:0	6	s_new_param
op	79:30	0:0	6	.
water	79:31	0:0	6	b_near
op	79:45	0:0	6	=
water	79:47	0:0	6	true
water	79:51	0:0	6	;
break	80:12	80:17	6	
label	81:10	81:16	6	case 3 :
water	82:12	0:0	6	p_sys
op	82:17	0:0	6	->
water	82:19	0:0	6	s_new_param
op	82:30	0:0	6	.
water	82:31	0:0	6	b_advanced
op	82:45	0:0	6	=
water	82:47	0:0	6	false
water	82:52	0:0	6	;
water	83:12	0:0	6	p_sys
op	83:17	0:0	6	->
water	83:19	0:0	6	s_new_param
op	83:30	0:0	6	.
water	83:31	0:0	6	b_blackslot
op	83:45	0:0	6	=
water	83:47	0:0	6	false
water	83:52	0:0	6	;
water	84:12	0:0	6	p_sys
op	84:17	0:0	6	->
water	84:19	0:0	6	s_new_param
op	84:30	0:0	6	.
water	84:31	0:0	6	b_near
op	84:45	0:0	6	=
water	84:47	0:0	6	false
water	84:52	0:0	6	;
break	85:12	85:17	6	
water	86:8	0:0	6	}
water	87:8	0:0	4	p_sys
op	87:13	0:0	4	->
water	87:15	0:0	4	s_current_param
op	87:30	0:0	4	.
water	87:31	0:0	4	i_mode
op	87:38	0:0	4	=
water	87:40	0:0	4	p_sys
op	87:45	0:0	4	->
water	87:47	0:0	4	s_new_param
op	87:58	0:0	4	.
water	87:59	0:0	4	i_mode
water	87:65	0:0	4	;
if	88:8	91:33	4	(p_sys -> s_current_param . b_blackslot != p_sys -> s_new_param . b_blackslot && p_sys -> i_selected == NO_PCE && p_sys -> s_current_param . b_blackslot)
cond	88:13	90:42	5	p_sys -> s_current_param . b_blackslot != p_sys -> s_new_param . b_blackslot && p_sys -> i_selected == NO_PCE && p_sys -> s_current_param . b_blackslot
water	88:13	0:0	6	p_sys
op	88:18	0:0	6	->
water	88:20	0:0	6	s_current_param
op	88:35	0:0	6	.
water	88:36	0:0	6	b_blackslot
op	88:48	0:0	6	!=
water	88:51	0:0	6	p_sys
op	88:56	0:0	6	->
water	88:58	0:0	6	s_new_param
op	88:69	0:0	6	.
water	88:70	0:0	6	b_blackslot
op	89:16	0:0	6	&&
water	89:19	0:0	6	p_sys
op	89:24	0:0	6	->
water	89:26	0:0	6	i_selected
op	89:37	0:0	6	==
water	89:40	0:0	6	NO_PCE
op	90:16	0:0	6	&&
water	90:19	0:0	6	p_sys
op	90:24	0:0	6	->
water	90:26	0:0	6	s_current_param
op	90:41	0:0	6	.
water	90:42	0:0	6	b_blackslot
stmts	91:12	91:33	5	
water	91:12	0:0	6	p_sys
op	91:17	0:0	6	->
water	91:19	0:0	6	i_selected
op	91:30	0:0	6	=
water	91:32	0:0	6	0
water	91:33	0:0	6	;
if	92:8	93:105	4	(p_sys -> s_current_param . i_auto_shuffle_speed != p_sys -> s_new_param . i_auto_shuffle_speed)
cond	92:13	92:79	5	p_sys -> s_current_param . i_auto_shuffle_speed != p_sys -> s_new_param . i_auto_shuffle_speed
water	92:13	0:0	6	p_sys
op	92:18	0:0	6	->
water	92:20	0:0	6	s_current_param
op	92:35	0:0	6	.
water	92:36	0:0	6	i_auto_shuffle_speed
op	92:57	0:0	6	!=
water	92:60	0:0	6	p_sys
op	92:65	0:0	6	->
water	92:67	0:0	6	s_new_param
op	92:78	0:0	6	.
water	92:79	0:0	6	i_auto_shuffle_speed
stmts	93:12	93:105	5	
water	93:12	0:0	6	p_sys
op	93:17	0:0	6	->
water	93:19	0:0	6	i_auto_shuffle_countdown_val
op	93:48	0:0	6	=
call	93:50	93:104	6	init_countdown
arg	93:65	93:104	7	p_sys->s_new_param.i_auto_shuffle_speed
water	93:65	0:0	8	p_sys
op	93:70	0:0	8	->
water	93:72	0:0	8	s_new_param
op	93:83	0:0	8	.
water	93:84	0:0	8	i_auto_shuffle_speed
water	93:105	0:0	6	;
if	94:8	95:105	4	(p_sys -> s_current_param . i_auto_solve_speed != p_sys -> s_new_param . i_auto_solve_speed)
cond	94:13	94:77	5	p_sys -> s_current_param . i_auto_solve_speed != p_sys -> s_new_param . i_auto_solve_speed
water	94:13	0:0	6	p_sys
op	94:18	0:0	6	->
water	94:20	0:0	6	s_current_param
op	94:35	0:0	6	.
water	94:36	0:0	6	i_auto_solve_speed
op	94:55	0:0	6	!=
water	94:58	0:0	6	p_sys
op	94:63	0:0	6	->
water	94:65	0:0	6	s_new_param
op	94:76	0:0	6	.
water	94:77	0:0	6	i_auto_solve_speed
stmts	95:12	95:105	5	
water	95:12	0:0	6	p_sys
op	95:17	0:0	6	->
water	95:19	0:0	6	i_auto_solve_countdown_val
op	95:46	0:0	6	=
call	95:48	95:104	6	init_countdown
arg	95:63	95:104	7	p_sys->s_current_param.i_auto_solve_speed
water	95:63	0:0	8	p_sys
op	95:68	0:0	8	->
water	95:70	0:0	8	s_current_param
op	95:85	0:0	8	.
water	95:86	0:0	8	i_auto_solve_speed
water	95:105	0:0	6	;
water	96:8	0:0	4	p_sys
op	96:13	0:0	4	->
water	96:15	0:0	4	s_current_param
op	96:30	0:0	4	.
water	96:31	0:0	4	i_rows
op	96:44	0:0	4	=
water	96:46	0:0	4	p_sys
op	96:51	0:0	4	->
water	96:53	0:0	4	s_new_param
op	96:64	0:0	4	.
water	96:65	0:0	4	i_rows
water	96:71	0:0	4	;
water	97:8	0:0	4	p_sys
op	97:13	0:0	4	->
water	97:15	0:0	4	s_current_param
op	97:30	0:0	4	.
water	97:31	0:0	4	i_cols
op	97:44	0:0	4	=
water	97:46	0:0	4	p_sys
op	97:51	0:0	4	->
water	97:53	0:0	4	s_new_param
op	97:64	0:0	4	.
water	97:65	0:0	4	i_cols
water	97:71	0:0	4	;
water	98:8	0:0	4	p_sys
op	98:13	0:0	4	->
water	98:15	0:0	4	s_current_param
op	98:30	0:0	4	.
water	98:31	0:0	4	i_pieces_nbr
op	98:44	0:0	4	=
water	98:46	0:0	4	p_sys
op	98:51	0:0	4	->
water	98:53	0:0	4	s_current_param
op	98:68	0:0	4	.
water	98:69	0:0	4	i_rows
op	98:76	0:0	4	*
water	98:78	0:0	4	p_sys
op	98:83	0:0	4	->
water	98:85	0:0	4	s_current_param
op	98:100	0:0	4	.
water	98:101	0:0	4	i_cols
water	98:107	0:0	4	;
water	99:8	0:0	4	p_sys
op	99:13	0:0	4	->
water	99:15	0:0	4	s_current_param
op	99:30	0:0	4	.
water	99:31	0:0	4	b_advanced
op	99:44	0:0	4	=
water	99:46	0:0	4	p_sys
op	99:51	0:0	4	->
water	99:53	0:0	4	s_new_param
op	99:64	0:0	4	.
water	99:65	0:0	4	b_advanced
water	99:75	0:0	4	;
if	100:8	110:8	4	(! p_sys -> s_new_param . b_advanced)
cond	100:12	100:32	5	! p_sys -> s_new_param . b_advanced
op	100:12	0:0	6	!
water	100:13	0:0	6	p_sys
op	100:18	0:0	6	->
water	100:20	0:0	6	s_new_param
op	100:31	0:0	6	.
water	100:32	0:0	6	b_advanced
stmts	100:44	110:8	5	
water	100:44	0:0	6	{
water	101:12	0:0	6	p_sys
op	101:17	0:0	6	->
water	101:19	0:0	6	s_current_param
op	101:34	0:0	6	.
water	101:35	0:0	6	b_blackslot
op	101:49	0:0	6	=
water	101:51	0:0	6	p_sys
op	101:56	0:0	6	->
water	101:58	0:0	6	s_new_param
op	101:69	0:0	6	.
water	101:70	0:0	6	b_blackslot
water	101:81	0:0	6	;
water	102:12	0:0	6	p_sys
op	102:17	0:0	6	->
water	102:19	0:0	6	s_current_param
op	102:34	0:0	6	.
water	102:35	0:0	6	b_near
op	102:49	0:0	6	=
water	102:51	0:0	6	p_sys
op	102:56	0:0	6	->
water	102:58	0:0	6	s_new_param
op	102:69	0:0	6	.
water	102:70	0:0	6	b_near
op	102:77	0:0	6	||
water	102:80	0:0	6	p_sys
op	102:85	0:0	6	->
water	102:87	0:0	6	s_new_param
op	102:98	0:0	6	.
water	102:99	0:0	6	b_blackslot
water	102:110	0:0	6	;
water	103:12	0:0	6	p_sys
op	103:17	0:0	6	->
water	103:19	0:0	6	s_current_param
op	103:34	0:0	6	.
water	103:35	0:0	6	i_border
op	103:49	0:0	6	=
water	103:51	0:0	6	0
water	103:52	0:0	6	;
water	104:12	0:0	6	p_sys
op	104:17	0:0	6	->
water	104:19	0:0	6	s_current_param
op	104:34	0:0	6	.
water	104:35	0:0	6	b_preview
op	104:49	0:0	6	=
water	104:51	0:0	6	false
water	104:56	0:0	6	;
water	105:12	0:0	6	p_sys
op	105:17	0:0	6	->
water	105:19	0:0	6	s_current_param
op	105:34	0:0	6	.
water	105:35	0:0	6	i_preview_size
op	105:49	0:0	6	=
water	105:51	0:0	6	0
water	105:52	0:0	6	;
water	106:12	0:0	6	p_sys
op	106:17	0:0	6	->
water	106:19	0:0	6	s_current_param
op	106:34	0:0	6	.
water	106:35	0:0	6	i_shape_size
op	106:49	0:0	6	=
water	106:51	0:0	6	0
water	106:52	0:0	6	;
water	107:12	0:0	6	p_sys
op	107:17	0:0	6	->
water	107:19	0:0	6	s_current_param
op	107:34	0:0	6	.
water	107:35	0:0	6	i_auto_shuffle_speed
op	107:57	0:0	6	=
water	107:59	0:0	6	0
water	107:60	0:0	6	;
water	108:12	0:0	6	p_sys
op	108:17	0:0	6	->
water	108:19	0:0	6	s_current_param
op	108:34	0:0	6	.
water	108:35	0:0	6	i_auto_solve_speed
op	108:57	0:0	6	=
water	108:59	0:0	6	0
water	108:60	0:0	6	;
water	109:12	0:0	6	p_sys
op	109:17	0:0	6	->
water	109:19	0:0	6	s_current_param
op	109:34	0:0	6	.
water	109:35	0:0	6	i_rotate
op	109:49	0:0	6	=
water	109:51	0:0	6	0
water	109:52	0:0	6	;
water	110:8	0:0	6	}
else	111:8	122:8	4
stmts	112:8	122:8	5	
water	112:8	0:0	6	{
water	113:12	0:0	6	p_sys
op	113:17	0:0	6	->
water	113:19	0:0	6	s_current_param
op	113:34	0:0	6	.
water	113:35	0:0	6	b_blackslot
op	113:47	0:0	6	=
water	113:49	0:0	6	false
water	113:54	0:0	6	;
water	114:12	0:0	6	p_sys
op	114:17	0:0	6	->
water	114:19	0:0	6	s_current_param
op	114:34	0:0	6	.
water	114:35	0:0	6	b_near
op	114:47	0:0	6	=
water	114:49	0:0	6	false
water	114:54	0:0	6	;
water	115:12	0:0	6	p_sys
op	115:17	0:0	6	->
water	115:19	0:0	6	s_current_param
op	115:34	0:0	6	.
water	115:35	0:0	6	i_border
op	115:47	0:0	6	=
water	115:49	0:0	6	p_sys
op	115:54	0:0	6	->
water	115:56	0:0	6	s_new_param
op	115:67	0:0	6	.
water	115:68	0:0	6	i_border
water	115:76	0:0	6	;
water	116:12	0:0	6	p_sys
op	116:17	0:0	6	->
water	116:19	0:0	6	s_current_param
op	116:34	0:0	6	.
water	116:35	0:0	6	b_preview
op	116:47	0:0	6	=
water	116:49	0:0	6	p_sys
op	116:54	0:0	6	->
water	116:56	0:0	6	s_new_param
op	116:67	0:0	6	.
water	116:68	0:0	6	b_preview
water	116:77	0:0	6	;
water	117:12	0:0	6	p_sys
op	117:17	0:0	6	->
water	117:19	0:0	6	s_current_param
op	117:34	0:0	6	.
water	117:35	0:0	6	i_preview_size
op	117:57	0:0	6	=
water	117:59	0:0	6	p_sys
op	117:64	0:0	6	->
water	117:66	0:0	6	s_new_param
op	117:77	0:0	6	.
water	117:78	0:0	6	i_preview_size
water	117:92	0:0	6	;
water	118:12	0:0	6	p_sys
op	118:17	0:0	6	->
water	118:19	0:0	6	s_current_param
op	118:34	0:0	6	.
water	118:35	0:0	6	i_shape_size
op	118:57	0:0	6	=
water	118:59	0:0	6	p_sys
op	118:64	0:0	6	->
water	118:66	0:0	6	s_new_param
op	118:77	0:0	6	.
water	118:78	0:0	6	i_shape_size
water	118:90	0:0	6	;
water	119:12	0:0	6	p_sys
op	119:17	0:0	6	->
water	119:19	0:0	6	s_current_param
op	119:34	0:0	6	.
water	119:35	0:0	6	i_auto_shuffle_speed
op	119:57	0:0	6	=
water	119:59	0:0	6	p_sys
op	119:64	0:0	6	->
water	119:66	0:0	6	s_new_param
op	119:77	0:0	6	.
water	119:78	0:0	6	i_auto_shuffle_speed
water	119:98	0:0	6	;
water	120:12	0:0	6	p_sys
op	120:17	0:0	6	->
water	120:19	0:0	6	s_current_param
op	120:34	0:0	6	.
water	120:35	0:0	6	i_auto_solve_speed
op	120:57	0:0	6	=
water	120:59	0:0	6	p_sys
op	120:64	0:0	6	->
water	120:66	0:0	6	s_new_param
op	120:77	0:0	6	.
water	120:78	0:0	6	i_auto_solve_speed
water	120:96	0:0	6	;
water	121:12	0:0	6	p_sys
op	121:17	0:0	6	->
water	121:19	0:0	6	s_current_param
op	121:34	0:0	6	.
water	121:35	0:0	6	i_rotate
op	121:48	0:0	6	=
water	121:50	0:0	6	p_sys
op	121:55	0:0	6	->
water	121:57	0:0	6	s_new_param
op	121:68	0:0	6	.
water	121:69	0:0	6	i_rotate
water	121:77	0:0	6	;
water	122:8	0:0	6	}
water	123:8	0:0	4	p_sys
op	123:13	0:0	4	->
water	123:15	0:0	4	b_change_param
op	123:30	0:0	4	=
water	123:32	0:0	4	false
water	123:37	0:0	4	;
water	124:4	0:0	4	}
call	125:4	125:35	2	vlc_mutex_unlock
arg	125:22	125:35	3	&p_sys->lock
op	125:22	0:0	4	&
water	125:23	0:0	4	p_sys
op	125:28	0:0	4	->
water	125:30	0:0	4	lock
water	125:36	0:0	2	;
if	127:4	151:4	2	(p_sys -> b_bake_request)
cond	127:9	127:16	3	p_sys -> b_bake_request
water	127:9	0:0	4	p_sys
op	127:14	0:0	4	->
water	127:16	0:0	4	b_bake_request
stmts	127:33	151:4	3	
water	127:33	0:0	4	{
if	128:8	145:8	4	(! p_sys -> b_shuffle_rqst)
cond	128:12	128:20	5	! p_sys -> b_shuffle_rqst
op	128:12	0:0	6	!
water	128:13	0:0	6	p_sys
op	128:18	0:0	6	->
water	128:20	0:0	6	b_shuffle_rqst
stmts	128:36	145:8	5	
water	128:36	0:0	6	{
decl	132:12	132:61	6	save_game_t	*ps_save_game
op	132:38	0:0	6	=
call	132:40	132:60	7	puzzle_save
arg	132:52	132:60	8	p_filter
water	132:52	0:0	9	p_filter
if	133:12	134:64	6	(! ps_save_game)
cond	133:16	133:17	7	! ps_save_game
op	133:16	0:0	8	!
water	133:17	0:0	8	ps_save_game
stmts	134:16	134:64	7	
return	134:16	134:64	8	CopyInfoAndRelease(p_pic_out,p_pic_in)
call	134:23	134:63	9	CopyInfoAndRelease
arg	134:43	134:52	10	p_pic_out
water	134:43	0:0	11	p_pic_out
arg	134:54	134:63	10	p_pic_in
water	134:54	0:0	11	p_pic_in
water	135:12	0:0	6	i_ret
op	135:18	0:0	6	=
call	135:20	135:63	6	puzzle_bake
arg	135:33	135:41	7	p_filter
water	135:33	0:0	8	p_filter
arg	135:43	135:52	7	p_pic_out
water	135:43	0:0	8	p_pic_out
arg	135:54	135:63	7	p_pic_in
water	135:54	0:0	8	p_pic_in
water	135:64	0:0	6	;
if	136:12	141:12	6	(i_ret != VLC_SUCCESS)
cond	136:17	136:26	7	i_ret != VLC_SUCCESS
water	136:17	0:0	8	i_ret
op	136:23	0:0	8	!=
water	136:26	0:0	8	VLC_SUCCESS
stmts	137:12	141:12	7	
water	137:12	0:0	8	{
call	138:16	138:44	8	free
arg	138:21	138:44	9	ps_save_game->ps_pieces
water	138:21	0:0	10	ps_save_game
op	138:33	0:0	10	->
water	138:35	0:0	10	ps_pieces
water	138:45	0:0	8	;
call	139:16	139:33	8	free
arg	139:21	139:33	9	ps_save_game
water	139:21	0:0	10	ps_save_game
water	139:34	0:0	8	;
return	140:16	140:64	8	CopyInfoAndRelease(p_pic_out,p_pic_in)
call	140:23	140:63	9	CopyInfoAndRelease
arg	140:43	140:52	10	p_pic_out
water	140:43	0:0	11	p_pic_out
arg	140:54	140:63	10	p_pic_in
water	140:54	0:0	11	p_pic_in
water	141:12	0:0	8	}
call	142:12	142:47	6	puzzle_load
arg	142:25	142:33	7	p_filter
water	142:25	0:0	8	p_filter
arg	142:35	142:47	7	ps_save_game
water	142:35	0:0	8	ps_save_game
water	142:48	0:0	6	;
call	143:12	143:40	6	free
arg	143:17	143:40	7	ps_save_game->ps_pieces
water	143:17	0:0	8	ps_save_game
op	143:29	0:0	8	->
water	143:31	0:0	8	ps_pieces
water	143:41	0:0	6	;
call	144:12	144:29	6	free
arg	144:17	144:29	7	ps_save_game
water	144:17	0:0	8	ps_save_game
water	144:30	0:0	6	;
water	145:8	0:0	6	}
else	146:8	150:8	4
stmts	146:13	150:8	5	
water	146:13	0:0	6	{
water	147:12	0:0	6	i_ret
op	147:18	0:0	6	=
call	147:20	147:63	6	puzzle_bake
arg	147:33	147:41	7	p_filter
water	147:33	0:0	8	p_filter
arg	147:43	147:52	7	p_pic_out
water	147:43	0:0	8	p_pic_out
arg	147:54	147:63	7	p_pic_in
water	147:54	0:0	8	p_pic_in
water	147:64	0:0	6	;
if	148:12	149:64	6	(i_ret != VLC_SUCCESS)
cond	148:17	148:26	7	i_ret != VLC_SUCCESS
water	148:17	0:0	8	i_ret
op	148:23	0:0	8	!=
water	148:26	0:0	8	VLC_SUCCESS
stmts	149:16	149:64	7	
return	149:16	149:64	8	CopyInfoAndRelease(p_pic_out,p_pic_in)
call	149:23	149:63	9	CopyInfoAndRelease
arg	149:43	149:52	10	p_pic_out
water	149:43	0:0	11	p_pic_out
arg	149:54	149:63	10	p_pic_in
water	149:54	0:0	11	p_pic_in
water	150:8	0:0	6	}
water	151:4	0:0	4	}
if	153:4	157:4	2	(p_sys -> b_shuffle_rqst && p_sys -> b_init)
cond	153:9	153:41	3	p_sys -> b_shuffle_rqst && p_sys -> b_init
water	153:9	0:0	4	p_sys
op	153:14	0:0	4	->
water	153:16	0:0	4	b_shuffle_rqst
op	153:31	0:0	4	&&
water	153:34	0:0	4	p_sys
op	153:39	0:0	4	->
water	153:41	0:0	4	b_init
stmts	153:50	157:4	3	
water	153:50	0:0	4	{
water	154:8	0:0	4	i_ret
op	154:14	0:0	4	=
call	154:16	154:45	4	puzzle_bake_piece
arg	154:36	154:45	5	p_filter
water	154:36	0:0	6	p_filter
water	154:46	0:0	4	;
if	155:8	156:60	4	(i_ret != VLC_SUCCESS)
cond	155:12	155:21	5	i_ret != VLC_SUCCESS
water	155:12	0:0	6	i_ret
op	155:18	0:0	6	!=
water	155:21	0:0	6	VLC_SUCCESS
stmts	156:12	156:60	5	
return	156:12	156:60	6	CopyInfoAndRelease(p_pic_out,p_pic_in)
call	156:19	156:59	7	CopyInfoAndRelease
arg	156:39	156:48	8	p_pic_out
water	156:39	0:0	9	p_pic_out
arg	156:50	156:59	8	p_pic_in
water	156:50	0:0	9	p_pic_in
water	157:4	0:0	4	}
if	159:4	160:61	2	(! p_sys -> b_bake_request && ! p_sys -> b_shuffle_rqst && p_sys -> b_init && ! p_sys -> b_finished)
cond	159:9	159:86	3	! p_sys -> b_bake_request && ! p_sys -> b_shuffle_rqst && p_sys -> b_init && ! p_sys -> b_finished
op	159:9	0:0	4	!
water	159:10	0:0	4	p_sys
op	159:15	0:0	4	->
water	159:17	0:0	4	b_bake_request
op	159:32	0:0	4	&&
op	159:35	0:0	4	!
water	159:36	0:0	4	p_sys
op	159:41	0:0	4	->
water	159:43	0:0	4	b_shuffle_rqst
op	159:58	0:0	4	&&
water	159:61	0:0	4	p_sys
op	159:66	0:0	4	->
water	159:68	0:0	4	b_init
op	159:75	0:0	4	&&
op	159:78	0:0	4	!
water	159:79	0:0	4	p_sys
op	159:84	0:0	4	->
water	159:86	0:0	4	b_finished
stmts	160:8	160:61	3	
call	160:8	160:60	4	puzzle_preset_desk_background
arg	160:38	160:47	5	p_pic_out
water	160:38	0:0	6	p_pic_out
arg	160:49	160:50	5	0
water	160:49	0:0	6	0
arg	160:52	160:55	5	127
water	160:52	0:0	6	127
arg	160:57	160:60	5	127
water	160:57	0:0	6	127
water	160:61	0:0	4	;
else	161:4	166:4	2
stmts	161:9	166:4	3	
water	161:9	0:0	4	{
for	163:8	165:95	4	( uint8_t i_plane = 0 ;i_plane < p_pic_out -> i_planes;i_plane ++)
forinit	0:0	163:32	5	 uint8_t i_plane = 0 ;
decl	163:13	163:32	6	uint8_t	i_plane
op	163:29	0:0	6	=
water	163:31	0:0	6	0
cond	163:34	163:55	5	i_plane < p_pic_out -> i_planes
water	163:34	0:0	6	i_plane
op	163:42	0:0	6	<
water	163:44	0:0	6	p_pic_out
op	163:53	0:0	6	->
water	163:55	0:0	6	i_planes
forexpr	163:65	163:72	5	i_plane ++
water	163:65	0:0	6	i_plane
op	163:72	0:0	6	++
stmts	164:12	165:95	5	
call	164:12	165:94	6	memcpy
arg	164:20	164:50	7	p_pic_out->p[i_plane].p_pixels
water	164:20	0:0	8	p_pic_out
op	164:29	0:0	8	->
water	164:31	0:0	8	p
op	164:32	0:0	8	[
water	164:33	0:0	8	i_plane
op	164:40	0:0	8	]
op	164:41	0:0	8	.
water	164:42	0:0	8	p_pixels
arg	164:52	164:81	7	p_pic_in->p[i_plane].p_pixels
water	164:52	0:0	8	p_pic_in
op	164:60	0:0	8	->
water	164:62	0:0	8	p
op	164:63	0:0	8	[
water	164:64	0:0	8	i_plane
op	164:71	0:0	8	]
op	164:72	0:0	8	.
water	164:73	0:0	8	p_pixels
arg	165:16	165:94	7	p_pic_in->p[i_plane].i_pitch*(int32_t)p_pic_in->p[i_plane].i_visible_lines
water	165:16	0:0	8	p_pic_in
op	165:24	0:0	8	->
water	165:26	0:0	8	p
op	165:27	0:0	8	[
water	165:28	0:0	8	i_plane
op	165:35	0:0	8	]
op	165:36	0:0	8	.
water	165:37	0:0	8	i_pitch
op	165:45	0:0	8	*
water	165:47	0:0	8	(
water	165:48	0:0	8	int32_t
water	165:55	0:0	8	)
water	165:57	0:0	8	p_pic_in
op	165:65	0:0	8	->
water	165:67	0:0	8	p
op	165:68	0:0	8	[
water	165:69	0:0	8	i_plane
op	165:76	0:0	8	]
op	165:77	0:0	8	.
water	165:78	0:0	8	i_visible_lines
water	165:95	0:0	6	;
water	166:4	0:0	4	}
call	167:4	167:37	2	vlc_mutex_lock
arg	167:20	167:37	3	&p_sys->pce_lock
op	167:20	0:0	4	&
water	167:21	0:0	4	p_sys
op	167:26	0:0	4	->
water	167:28	0:0	4	pce_lock
water	167:38	0:0	2	;
for	169:4	174:4	2	( uint32_t i = 0 ;i <__MAX (4 ,p_sys -> s_allocated . i_pieces_nbr / 4 ) && ( ! p_sys -> b_bake_request && ! p_sys -> b_mouse_drag && p_sys -> b_init && p_sys -> s_current_param . b_advanced );i ++)
forinit	0:0	169:23	3	 uint32_t i = 0 ;
decl	169:9	169:23	4	uint32_t	i
op	169:20	0:0	4	=
water	169:22	0:0	4	0
cond	169:25	171:83	3	i <__MAX (4 ,p_sys -> s_allocated . i_pieces_nbr / 4 ) && ( ! p_sys -> b_bake_request && ! p_sys -> b_mouse_drag && p_sys -> b_init && p_sys -> s_current_param . b_advanced )
water	169:25	0:0	4	i
op	169:27	0:0	4	<
call	169:29	169:75	4	__MAX
arg	169:36	169:37	5	4
water	169:36	0:0	6	4
arg	169:39	169:75	5	p_sys->s_allocated.i_pieces_nbr/4
water	169:39	0:0	6	p_sys
op	169:44	0:0	6	->
water	169:46	0:0	6	s_allocated
op	169:57	0:0	6	.
water	169:58	0:0	6	i_pieces_nbr
op	169:71	0:0	6	/
water	169:73	0:0	6	4
op	170:29	0:0	4	&&
water	170:32	0:0	4	(
op	170:34	0:0	4	!
water	170:35	0:0	4	p_sys
op	170:40	0:0	4	->
water	170:42	0:0	4	b_bake_request
op	170:57	0:0	4	&&
op	170:60	0:0	4	!
water	170:61	0:0	4	p_sys
op	170:66	0:0	4	->
water	170:68	0:0	4	b_mouse_drag
op	171:29	0:0	4	&&
water	171:32	0:0	4	p_sys
op	171:37	0:0	4	->
water	171:39	0:0	4	b_init
op	171:46	0:0	4	&&
water	171:49	0:0	4	p_sys
op	171:54	0:0	4	->
water	171:56	0:0	4	s_current_param
op	171:71	0:0	4	.
water	171:72	0:0	4	b_advanced
water	171:83	0:0	4	)
forexpr	171:86	171:87	3	i ++
water	171:86	0:0	4	i
op	171:87	0:0	4	++
stmts	172:4	174:4	3	
water	172:4	0:0	4	{
call	173:8	173:45	4	puzzle_solve_pces_accuracy
arg	173:36	173:45	5	p_filter
water	173:36	0:0	6	p_filter
water	173:46	0:0	4	;
water	174:4	0:0	4	}
for	175:4	180:4	2	( uint32_t i = 0 ;i <__MAX (4 ,p_sys -> s_allocated . i_pieces_nbr / 4 ) && ( ! p_sys -> b_bake_request && ! p_sys -> b_mouse_drag && p_sys -> b_init && p_sys -> s_current_param . b_advanced );i ++)
forinit	0:0	175:23	3	 uint32_t i = 0 ;
decl	175:9	175:23	4	uint32_t	i
op	175:20	0:0	4	=
water	175:22	0:0	4	0
cond	175:25	177:83	3	i <__MAX (4 ,p_sys -> s_allocated . i_pieces_nbr / 4 ) && ( ! p_sys -> b_bake_request && ! p_sys -> b_mouse_drag && p_sys -> b_init && p_sys -> s_current_param . b_advanced )
water	175:25	0:0	4	i
op	175:27	0:0	4	<
call	175:29	175:75	4	__MAX
arg	175:36	175:37	5	4
water	175:36	0:0	6	4
arg	175:39	175:75	5	p_sys->s_allocated.i_pieces_nbr/4
water	175:39	0:0	6	p_sys
op	175:44	0:0	6	->
water	175:46	0:0	6	s_allocated
op	175:57	0:0	6	.
water	175:58	0:0	6	i_pieces_nbr
op	175:71	0:0	6	/
water	175:73	0:0	6	4
op	176:29	0:0	4	&&
water	176:32	0:0	4	(
op	176:34	0:0	4	!
water	176:35	0:0	4	p_sys
op	176:40	0:0	4	->
water	176:42	0:0	4	b_bake_request
op	176:57	0:0	4	&&
op	176:60	0:0	4	!
water	176:61	0:0	4	p_sys
op	176:66	0:0	4	->
water	176:68	0:0	4	b_mouse_drag
op	177:29	0:0	4	&&
water	177:32	0:0	4	p_sys
op	177:37	0:0	4	->
water	177:39	0:0	4	b_init
op	177:46	0:0	4	&&
water	177:49	0:0	4	p_sys
op	177:54	0:0	4	->
water	177:56	0:0	4	s_current_param
op	177:71	0:0	4	.
water	177:72	0:0	4	b_advanced
water	177:83	0:0	4	)
forexpr	177:86	177:87	3	i ++
water	177:86	0:0	4	i
op	177:87	0:0	4	++
stmts	178:4	180:4	3	
water	178:4	0:0	4	{
call	179:8	179:42	4	puzzle_solve_pces_group
arg	179:33	179:42	5	p_filter
water	179:33	0:0	6	p_filter
water	179:43	0:0	4	;
water	180:4	0:0	4	}
if	181:4	183:41	2	(! p_sys -> b_bake_request && ! p_sys -> b_mouse_drag && p_sys -> b_init && p_sys -> s_current_param . b_advanced)
cond	181:9	182:38	3	! p_sys -> b_bake_request && ! p_sys -> b_mouse_drag && p_sys -> b_init && p_sys -> s_current_param . b_advanced
op	181:9	0:0	4	!
water	181:10	0:0	4	p_sys
op	181:15	0:0	4	->
water	181:17	0:0	4	b_bake_request
op	181:32	0:0	4	&&
op	181:35	0:0	4	!
water	181:36	0:0	4	p_sys
op	181:41	0:0	4	->
water	181:43	0:0	4	b_mouse_drag
op	181:56	0:0	4	&&
water	181:59	0:0	4	p_sys
op	181:64	0:0	4	->
water	181:66	0:0	4	b_init
op	182:12	0:0	4	&&
water	182:15	0:0	4	p_sys
op	182:20	0:0	4	->
water	182:22	0:0	4	s_current_param
op	182:37	0:0	4	.
water	182:38	0:0	4	b_advanced
stmts	183:8	183:41	3	
call	183:8	183:40	4	puzzle_count_pce_group
arg	183:32	183:40	5	p_filter
water	183:32	0:0	6	p_filter
water	183:41	0:0	4	;
if	184:4	192:4	2	(! p_sys -> b_bake_request && ! p_sys -> b_mouse_drag && p_sys -> b_init && p_sys -> s_current_param . b_advanced)
cond	184:9	185:38	3	! p_sys -> b_bake_request && ! p_sys -> b_mouse_drag && p_sys -> b_init && p_sys -> s_current_param . b_advanced
op	184:9	0:0	4	!
water	184:10	0:0	4	p_sys
op	184:15	0:0	4	->
water	184:17	0:0	4	b_bake_request
op	184:32	0:0	4	&&
op	184:35	0:0	4	!
water	184:36	0:0	4	p_sys
op	184:41	0:0	4	->
water	184:43	0:0	4	b_mouse_drag
op	184:56	0:0	4	&&
water	184:59	0:0	4	p_sys
op	184:64	0:0	4	->
water	184:66	0:0	4	b_init
op	185:12	0:0	4	&&
water	185:15	0:0	4	p_sys
op	185:20	0:0	4	->
water	185:22	0:0	4	s_current_param
op	185:37	0:0	4	.
water	185:38	0:0	4	b_advanced
stmts	185:51	192:4	3	
water	185:51	0:0	4	{
water	186:8	0:0	4	i_ret
op	186:14	0:0	4	=
call	186:16	186:44	4	puzzle_sort_layers
arg	186:36	186:44	5	p_filter
water	186:36	0:0	6	p_filter
water	186:45	0:0	4	;
if	187:8	191:8	4	(i_ret != VLC_SUCCESS)
cond	187:12	187:21	5	i_ret != VLC_SUCCESS
water	187:12	0:0	6	i_ret
op	187:18	0:0	6	!=
water	187:21	0:0	6	VLC_SUCCESS
stmts	188:8	191:8	5	
water	188:8	0:0	6	{
call	189:12	189:47	6	vlc_mutex_unlock
arg	189:30	189:47	7	&p_sys->pce_lock
op	189:30	0:0	8	&
water	189:31	0:0	8	p_sys
op	189:36	0:0	8	->
water	189:38	0:0	8	pce_lock
water	189:48	0:0	6	;
return	190:12	190:60	6	CopyInfoAndRelease(p_pic_out,p_pic_in)
call	190:19	190:59	7	CopyInfoAndRelease
arg	190:39	190:48	8	p_pic_out
water	190:39	0:0	9	p_pic_out
arg	190:50	190:59	8	p_pic_in
water	190:50	0:0	9	p_pic_in
water	191:8	0:0	6	}
water	192:4	0:0	4	}
for	193:4	200:4	2	( uint32_t i = 0 ;i <__MAX (4 ,p_sys -> s_allocated . i_pieces_nbr / 24 ) && ( ! p_sys -> b_bake_request && ! p_sys -> b_mouse_drag && p_sys -> b_init && p_sys -> s_current_param . b_advanced );i ++)
forinit	0:0	193:23	3	 uint32_t i = 0 ;
decl	193:9	193:23	4	uint32_t	i
op	193:20	0:0	4	=
water	193:22	0:0	4	0
cond	193:25	195:82	3	i <__MAX (4 ,p_sys -> s_allocated . i_pieces_nbr / 24 ) && ( ! p_sys -> b_bake_request && ! p_sys -> b_mouse_drag && p_sys -> b_init && p_sys -> s_current_param . b_advanced )
water	193:25	0:0	4	i
op	193:27	0:0	4	<
call	193:29	193:76	4	__MAX
arg	193:36	193:37	5	4
water	193:36	0:0	6	4
arg	193:39	193:76	5	p_sys->s_allocated.i_pieces_nbr/24
water	193:39	0:0	6	p_sys
op	193:44	0:0	6	->
water	193:46	0:0	6	s_allocated
op	193:57	0:0	6	.
water	193:58	0:0	6	i_pieces_nbr
op	193:71	0:0	6	/
water	193:73	0:0	6	24
op	194:28	0:0	4	&&
water	194:31	0:0	4	(
op	194:33	0:0	4	!
water	194:34	0:0	4	p_sys
op	194:39	0:0	4	->
water	194:41	0:0	4	b_bake_request
op	194:56	0:0	4	&&
op	194:59	0:0	4	!
water	194:60	0:0	4	p_sys
op	194:65	0:0	4	->
water	194:67	0:0	4	b_mouse_drag
op	195:28	0:0	4	&&
water	195:31	0:0	4	p_sys
op	195:36	0:0	4	->
water	195:38	0:0	4	b_init
op	195:45	0:0	4	&&
water	195:48	0:0	4	p_sys
op	195:53	0:0	4	->
water	195:55	0:0	4	s_current_param
op	195:70	0:0	4	.
water	195:71	0:0	4	b_advanced
water	195:82	0:0	4	)
forexpr	195:85	195:86	3	i ++
water	195:85	0:0	4	i
op	195:86	0:0	4	++
stmts	196:4	200:4	3	
water	196:4	0:0	4	{
water	197:8	0:0	4	p_sys
op	197:13	0:0	4	->
water	197:15	0:0	4	i_calc_corn_loop
op	197:31	0:0	4	++
water	197:33	0:0	4	;
water	198:8	0:0	4	p_sys
op	198:13	0:0	4	->
water	198:15	0:0	4	i_calc_corn_loop
op	198:32	0:0	4	%=
water	198:35	0:0	4	p_sys
op	198:40	0:0	4	->
water	198:42	0:0	4	s_allocated
op	198:53	0:0	4	.
water	198:54	0:0	4	i_pieces_nbr
water	198:66	0:0	4	;
call	199:8	199:68	4	puzzle_calculate_corners
arg	199:34	199:42	5	p_filter
water	199:34	0:0	6	p_filter
arg	199:44	199:68	5	p_sys->i_calc_corn_loop
water	199:44	0:0	6	p_sys
op	199:49	0:0	6	->
water	199:51	0:0	6	i_calc_corn_loop
water	199:69	0:0	4	;
water	200:4	0:0	4	}
if	202:4	207:4	2	(! p_sys -> b_bake_request && ! p_sys -> b_mouse_drag && p_sys -> b_init && p_sys -> ps_puzzle_array != NULL && p_sys -> s_current_param . b_advanced)
cond	202:9	203:73	3	! p_sys -> b_bake_request && ! p_sys -> b_mouse_drag && p_sys -> b_init && p_sys -> ps_puzzle_array != NULL && p_sys -> s_current_param . b_advanced
op	202:9	0:0	4	!
water	202:10	0:0	4	p_sys
op	202:15	0:0	4	->
water	202:17	0:0	4	b_bake_request
op	202:32	0:0	4	&&
op	202:35	0:0	4	!
water	202:36	0:0	4	p_sys
op	202:41	0:0	4	->
water	202:43	0:0	4	b_mouse_drag
op	202:56	0:0	4	&&
water	202:59	0:0	4	p_sys
op	202:64	0:0	4	->
water	202:66	0:0	4	b_init
op	203:13	0:0	4	&&
water	203:16	0:0	4	p_sys
op	203:21	0:0	4	->
water	203:23	0:0	4	ps_puzzle_array
op	203:39	0:0	4	!=
water	203:42	0:0	4	NULL
op	203:47	0:0	4	&&
water	203:50	0:0	4	p_sys
op	203:55	0:0	4	->
water	203:57	0:0	4	s_current_param
op	203:72	0:0	4	.
water	203:73	0:0	4	b_advanced
stmts	204:4	207:4	3	
water	204:4	0:0	4	{
call	205:8	205:38	4	puzzle_auto_shuffle
arg	205:29	205:38	5	p_filter
water	205:29	0:0	6	p_filter
water	205:39	0:0	4	;
call	206:8	206:36	4	puzzle_auto_solve
arg	206:27	206:36	5	p_filter
water	206:27	0:0	6	p_filter
water	206:37	0:0	4	;
water	207:4	0:0	4	}
call	208:4	208:39	2	vlc_mutex_unlock
arg	208:22	208:39	3	&p_sys->pce_lock
op	208:22	0:0	4	&
water	208:23	0:0	4	p_sys
op	208:28	0:0	4	->
water	208:30	0:0	4	pce_lock
water	208:40	0:0	2	;
if	210:4	285:4	2	(! p_sys -> b_bake_request && p_sys -> b_init && p_sys -> ps_puzzle_array != NULL)
cond	210:9	210:79	3	! p_sys -> b_bake_request && p_sys -> b_init && p_sys -> ps_puzzle_array != NULL
op	210:9	0:0	4	!
water	210:10	0:0	4	p_sys
op	210:15	0:0	4	->
water	210:17	0:0	4	b_bake_request
op	210:32	0:0	4	&&
water	210:35	0:0	4	p_sys
op	210:40	0:0	4	->
water	210:42	0:0	4	b_init
op	210:50	0:0	4	&&
water	210:53	0:0	4	p_sys
op	210:58	0:0	4	->
water	210:60	0:0	4	ps_puzzle_array
op	210:76	0:0	4	!=
water	210:79	0:0	4	NULL
stmts	210:86	285:4	3	
water	210:86	0:0	4	{
call	211:8	211:57	4	puzzle_draw_borders
arg	211:28	211:36	5	p_filter
water	211:28	0:0	6	p_filter
arg	211:38	211:46	5	p_pic_in
water	211:38	0:0	6	p_pic_in
arg	211:48	211:57	5	p_pic_out
water	211:48	0:0	6	p_pic_out
water	211:58	0:0	4	;
water	212:8	0:0	4	p_sys
op	212:13	0:0	4	->
water	212:15	0:0	4	i_pointed_pce
op	212:29	0:0	4	=
water	212:31	0:0	4	NO_PCE
water	212:37	0:0	4	;
call	213:8	213:56	4	puzzle_draw_pieces
arg	213:27	213:35	5	p_filter
water	213:27	0:0	6	p_filter
arg	213:37	213:45	5	p_pic_in
water	213:37	0:0	6	p_pic_in
arg	213:47	213:56	5	p_pic_out
water	213:47	0:0	6	p_pic_out
water	213:57	0:0	4	;
if	217:8	218:106	4	(p_sys -> i_pointed_pce == NO_PCE)
cond	217:12	217:36	5	p_sys -> i_pointed_pce == NO_PCE
water	217:12	0:0	6	p_sys
op	217:17	0:0	6	->
water	217:19	0:0	6	i_pointed_pce
op	217:33	0:0	6	==
water	217:36	0:0	6	NO_PCE
stmts	218:12	218:106	5	
water	218:12	0:0	6	p_sys
op	218:17	0:0	6	->
water	218:19	0:0	6	i_mouse_drag_pce
op	218:36	0:0	6	=
call	218:38	218:105	6	puzzle_find_piece
arg	218:57	218:65	7	p_filter
water	218:57	0:0	8	p_filter
arg	218:67	218:83	7	p_sys->i_mouse_x
water	218:67	0:0	8	p_sys
op	218:72	0:0	8	->
water	218:74	0:0	8	i_mouse_x
arg	218:85	218:101	7	p_sys->i_mouse_y
water	218:85	0:0	8	p_sys
op	218:90	0:0	8	->
water	218:92	0:0	8	i_mouse_y
arg	218:103	218:105	7	-1
op	218:103	0:0	8	-
water	218:104	0:0	8	1
water	218:106	0:0	6	;
else	219:8	220:58	4
stmts	220:12	220:58	5	
water	220:12	0:0	6	p_sys
op	220:17	0:0	6	->
water	220:19	0:0	6	i_mouse_drag_pce
op	220:36	0:0	6	=
water	220:38	0:0	6	p_sys
op	220:43	0:0	6	->
water	220:45	0:0	6	i_pointed_pce
water	220:58	0:0	6	;
if	221:8	222:62	4	(p_sys -> s_current_param . b_preview)
cond	221:12	221:35	5	p_sys -> s_current_param . b_preview
water	221:12	0:0	6	p_sys
op	221:17	0:0	6	->
water	221:19	0:0	6	s_current_param
op	221:34	0:0	6	.
water	221:35	0:0	6	b_preview
stmts	222:12	222:62	5	
call	222:12	222:61	6	puzzle_draw_preview
arg	222:32	222:40	7	p_filter
water	222:32	0:0	8	p_filter
arg	222:42	222:50	7	p_pic_in
water	222:42	0:0	8	p_pic_in
arg	222:52	222:61	7	p_pic_out
water	222:52	0:0	8	p_pic_out
water	222:62	0:0	6	;
if	224:8	235:8	4	(p_sys -> i_selected != NO_PCE && ! p_sys -> s_current_param . b_blackslot && ! p_sys -> s_current_param . b_advanced)
cond	224:13	225:43	5	p_sys -> i_selected != NO_PCE && ! p_sys -> s_current_param . b_blackslot && ! p_sys -> s_current_param . b_advanced
water	224:13	0:0	6	p_sys
op	224:18	0:0	6	->
water	224:20	0:0	6	i_selected
op	224:31	0:0	6	!=
water	224:34	0:0	6	NO_PCE
op	224:41	0:0	6	&&
op	224:44	0:0	6	!
water	224:45	0:0	6	p_sys
op	224:50	0:0	6	->
water	224:52	0:0	6	s_current_param
op	224:67	0:0	6	.
water	224:68	0:0	6	b_blackslot
op	225:16	0:0	6	&&
op	225:19	0:0	6	!
water	225:20	0:0	6	p_sys
op	225:25	0:0	6	->
water	225:27	0:0	6	s_current_param
op	225:42	0:0	6	.
water	225:43	0:0	6	b_advanced
stmts	226:8	235:8	5	
water	226:8	0:0	6	{
decl	227:12	227:71	6	int32_t	c
op	227:22	0:0	6	=
water	227:24	0:0	6	(
water	227:25	0:0	6	p_sys
op	227:30	0:0	6	->
water	227:32	0:0	6	i_selected
op	227:43	0:0	6	%
water	227:45	0:0	6	p_sys
op	227:50	0:0	6	->
water	227:52	0:0	6	s_allocated
op	227:63	0:0	6	.
water	227:64	0:0	6	i_cols
water	227:70	0:0	6	)
decl	228:12	228:71	6	int32_t	r
op	228:22	0:0	6	=
water	228:24	0:0	6	(
water	228:25	0:0	6	p_sys
op	228:30	0:0	6	->
water	228:32	0:0	6	i_selected
op	228:43	0:0	6	/
water	228:45	0:0	6	p_sys
op	228:50	0:0	6	->
water	228:52	0:0	6	s_allocated
op	228:63	0:0	6	.
water	228:64	0:0	6	i_cols
water	228:70	0:0	6	)
call	229:12	234:29	6	puzzle_draw_rectangle
arg	229:34	229:43	7	p_pic_out
water	229:34	0:0	8	p_pic_out
arg	230:16	230:51	7	p_sys->ps_puzzle_array[r][c][0].i_x
water	230:16	0:0	8	p_sys
op	230:21	0:0	8	->
water	230:23	0:0	8	ps_puzzle_array
op	230:38	0:0	8	[
water	230:39	0:0	8	r
op	230:40	0:0	8	]
op	230:41	0:0	8	[
water	230:42	0:0	8	c
op	230:43	0:0	8	]
op	230:44	0:0	8	[
water	230:45	0:0	8	0
op	230:46	0:0	8	]
op	230:47	0:0	8	.
water	230:48	0:0	8	i_x
arg	231:16	231:51	7	p_sys->ps_puzzle_array[r][c][0].i_y
water	231:16	0:0	8	p_sys
op	231:21	0:0	8	->
water	231:23	0:0	8	ps_puzzle_array
op	231:38	0:0	8	[
water	231:39	0:0	8	r
op	231:40	0:0	8	]
op	231:41	0:0	8	[
water	231:42	0:0	8	c
op	231:43	0:0	8	]
op	231:44	0:0	8	[
water	231:45	0:0	8	0
op	231:46	0:0	8	]
op	231:47	0:0	8	.
water	231:48	0:0	8	i_y
arg	232:16	232:55	7	p_sys->ps_puzzle_array[r][c][0].i_width
water	232:16	0:0	8	p_sys
op	232:21	0:0	8	->
water	232:23	0:0	8	ps_puzzle_array
op	232:38	0:0	8	[
water	232:39	0:0	8	r
op	232:40	0:0	8	]
op	232:41	0:0	8	[
water	232:42	0:0	8	c
op	232:43	0:0	8	]
op	232:44	0:0	8	[
water	232:45	0:0	8	0
op	232:46	0:0	8	]
op	232:47	0:0	8	.
water	232:48	0:0	8	i_width
arg	233:16	233:55	7	p_sys->ps_puzzle_array[r][c][0].i_lines
water	233:16	0:0	8	p_sys
op	233:21	0:0	8	->
water	233:23	0:0	8	ps_puzzle_array
op	233:38	0:0	8	[
water	233:39	0:0	8	r
op	233:40	0:0	8	]
op	233:41	0:0	8	[
water	233:42	0:0	8	c
op	233:43	0:0	8	]
op	233:44	0:0	8	[
water	233:45	0:0	8	0
op	233:46	0:0	8	]
op	233:47	0:0	8	.
water	233:48	0:0	8	i_lines
arg	234:16	234:19	7	255
water	234:16	0:0	8	255
arg	234:21	234:24	7	127
water	234:21	0:0	8	127
arg	234:26	234:29	7	127
water	234:26	0:0	8	127
water	234:30	0:0	6	;
water	235:8	0:0	6	}
if	237:8	248:8	4	(p_sys -> i_selected != NO_PCE && p_sys -> s_current_param . b_blackslot && ! p_sys -> s_current_param . b_advanced)
cond	237:13	238:43	5	p_sys -> i_selected != NO_PCE && p_sys -> s_current_param . b_blackslot && ! p_sys -> s_current_param . b_advanced
water	237:13	0:0	6	p_sys
op	237:18	0:0	6	->
water	237:20	0:0	6	i_selected
op	237:31	0:0	6	!=
water	237:34	0:0	6	NO_PCE
op	237:41	0:0	6	&&
water	237:44	0:0	6	p_sys
op	237:49	0:0	6	->
water	237:51	0:0	6	s_current_param
op	237:66	0:0	6	.
water	237:67	0:0	6	b_blackslot
op	238:16	0:0	6	&&
op	238:19	0:0	6	!
water	238:20	0:0	6	p_sys
op	238:25	0:0	6	->
water	238:27	0:0	6	s_current_param
op	238:42	0:0	6	.
water	238:43	0:0	6	b_advanced
stmts	239:8	248:8	5	
water	239:8	0:0	6	{
decl	240:12	240:71	6	int32_t	c
op	240:22	0:0	6	=
water	240:24	0:0	6	(
water	240:25	0:0	6	p_sys
op	240:30	0:0	6	->
water	240:32	0:0	6	i_selected
op	240:43	0:0	6	%
water	240:45	0:0	6	p_sys
op	240:50	0:0	6	->
water	240:52	0:0	6	s_allocated
op	240:63	0:0	6	.
water	240:64	0:0	6	i_cols
water	240:70	0:0	6	)
decl	241:12	241:71	6	int32_t	r
op	241:22	0:0	6	=
water	241:24	0:0	6	(
water	241:25	0:0	6	p_sys
op	241:30	0:0	6	->
water	241:32	0:0	6	i_selected
op	241:43	0:0	6	/
water	241:45	0:0	6	p_sys
op	241:50	0:0	6	->
water	241:52	0:0	6	s_allocated
op	241:63	0:0	6	.
water	241:64	0:0	6	i_cols
water	241:70	0:0	6	)
call	242:12	247:27	6	puzzle_fill_rectangle
arg	242:34	242:43	7	p_pic_out
water	242:34	0:0	8	p_pic_out
arg	243:16	243:51	7	p_sys->ps_puzzle_array[r][c][0].i_x
water	243:16	0:0	8	p_sys
op	243:21	0:0	8	->
water	243:23	0:0	8	ps_puzzle_array
op	243:38	0:0	8	[
water	243:39	0:0	8	r
op	243:40	0:0	8	]
op	243:41	0:0	8	[
water	243:42	0:0	8	c
op	243:43	0:0	8	]
op	243:44	0:0	8	[
water	243:45	0:0	8	0
op	243:46	0:0	8	]
op	243:47	0:0	8	.
water	243:48	0:0	8	i_x
arg	244:16	244:51	7	p_sys->ps_puzzle_array[r][c][0].i_y
water	244:16	0:0	8	p_sys
op	244:21	0:0	8	->
water	244:23	0:0	8	ps_puzzle_array
op	244:38	0:0	8	[
water	244:39	0:0	8	r
op	244:40	0:0	8	]
op	244:41	0:0	8	[
water	244:42	0:0	8	c
op	244:43	0:0	8	]
op	244:44	0:0	8	[
water	244:45	0:0	8	0
op	244:46	0:0	8	]
op	244:47	0:0	8	.
water	244:48	0:0	8	i_y
arg	245:16	245:55	7	p_sys->ps_puzzle_array[r][c][0].i_width
water	245:16	0:0	8	p_sys
op	245:21	0:0	8	->
water	245:23	0:0	8	ps_puzzle_array
op	245:38	0:0	8	[
water	245:39	0:0	8	r
op	245:40	0:0	8	]
op	245:41	0:0	8	[
water	245:42	0:0	8	c
op	245:43	0:0	8	]
op	245:44	0:0	8	[
water	245:45	0:0	8	0
op	245:46	0:0	8	]
op	245:47	0:0	8	.
water	245:48	0:0	8	i_width
arg	246:16	246:55	7	p_sys->ps_puzzle_array[r][c][0].i_lines
water	246:16	0:0	8	p_sys
op	246:21	0:0	8	->
water	246:23	0:0	8	ps_puzzle_array
op	246:38	0:0	8	[
water	246:39	0:0	8	r
op	246:40	0:0	8	]
op	246:41	0:0	8	[
water	246:42	0:0	8	c
op	246:43	0:0	8	]
op	246:44	0:0	8	[
water	246:45	0:0	8	0
op	246:46	0:0	8	]
op	246:47	0:0	8	.
water	246:48	0:0	8	i_lines
arg	247:16	247:17	7	0
water	247:16	0:0	8	0
arg	247:19	247:22	7	127
water	247:19	0:0	8	127
arg	247:24	247:27	7	127
water	247:24	0:0	8	127
water	247:28	0:0	6	;
water	248:8	0:0	6	}
if	250:8	251:103	4	(p_sys -> b_finished)
cond	250:13	250:20	5	p_sys -> b_finished
water	250:13	0:0	6	p_sys
op	250:18	0:0	6	->
water	250:20	0:0	6	b_finished
stmts	251:12	251:103	5	
call	251:12	251:102	6	puzzle_draw_sign
arg	251:29	251:38	7	p_pic_out
water	251:29	0:0	8	p_pic_out
arg	251:40	251:41	7	0
water	251:40	0:0	8	0
arg	251:43	251:44	7	0
water	251:43	0:0	8	0
arg	251:46	251:59	7	SHUFFLE_WIDTH
water	251:46	0:0	8	SHUFFLE_WIDTH
arg	251:61	251:74	7	SHUFFLE_LINES
water	251:61	0:0	8	SHUFFLE_LINES
arg	251:76	251:95	7	ppsz_shuffle_button
water	251:76	0:0	8	ppsz_shuffle_button
arg	251:97	251:102	7	false
water	251:97	0:0	8	false
water	251:103	0:0	6	;
if	253:8	284:8	4	(( p_sys -> i_mouse_drag_pce != NO_PCE ) && ! p_sys -> b_mouse_drag && ! p_sys -> b_finished && p_sys -> s_current_param . b_advanced)
cond	253:12	254:64	5	( p_sys -> i_mouse_drag_pce != NO_PCE ) && ! p_sys -> b_mouse_drag && ! p_sys -> b_finished && p_sys -> s_current_param . b_advanced
water	253:12	0:0	6	(
water	253:13	0:0	6	p_sys
op	253:18	0:0	6	->
water	253:20	0:0	6	i_mouse_drag_pce
op	253:37	0:0	6	!=
water	253:40	0:0	6	NO_PCE
water	253:46	0:0	6	)
op	253:48	0:0	6	&&
op	253:51	0:0	6	!
water	253:52	0:0	6	p_sys
op	253:57	0:0	6	->
water	253:59	0:0	6	b_mouse_drag
op	254:16	0:0	6	&&
op	254:19	0:0	6	!
water	254:20	0:0	6	p_sys
op	254:25	0:0	6	->
water	254:27	0:0	6	b_finished
op	254:38	0:0	6	&&
water	254:41	0:0	6	p_sys
op	254:46	0:0	6	->
water	254:48	0:0	6	s_current_param
op	254:63	0:0	6	.
water	254:64	0:0	6	b_advanced
stmts	255:8	284:8	5	
water	255:8	0:0	6	{
call	256:12	256:45	6	vlc_mutex_lock
arg	256:28	256:45	7	&p_sys->pce_lock
op	256:28	0:0	8	&
water	256:29	0:0	8	p_sys
op	256:34	0:0	8	->
water	256:36	0:0	8	pce_lock
water	256:46	0:0	6	;
decl	257:12	257:29	6	int32_t	i_delta_x
if	258:12	259:29	6	(p_sys -> s_current_param . i_rotate != 3)
cond	258:16	258:51	7	p_sys -> s_current_param . i_rotate != 3
water	258:16	0:0	8	p_sys
op	258:21	0:0	8	->
water	258:23	0:0	8	s_current_param
op	258:38	0:0	8	.
water	258:39	0:0	8	i_rotate
op	258:48	0:0	8	!=
water	258:51	0:0	8	3
stmts	259:16	259:29	7	
water	259:16	0:0	8	i_delta_x
op	259:26	0:0	8	=
water	259:28	0:0	8	0
water	259:29	0:0	8	;
else	260:12	261:72	6
stmts	260:17	261:72	7	
if	260:17	261:72	8	(( p_sys -> ps_pieces [ p_sys -> i_mouse_drag_pce ] . i_actual_angle & 1 ) == 0)
cond	260:22	260:88	9	( p_sys -> ps_pieces [ p_sys -> i_mouse_drag_pce ] . i_actual_angle & 1 ) == 0
water	260:22	0:0	10	(
water	260:23	0:0	10	p_sys
op	260:28	0:0	10	->
water	260:30	0:0	10	ps_pieces
op	260:39	0:0	10	[
water	260:40	0:0	10	p_sys
op	260:45	0:0	10	->
water	260:47	0:0	10	i_mouse_drag_pce
op	260:63	0:0	10	]
op	260:64	0:0	10	.
water	260:65	0:0	10	i_actual_angle
op	260:80	0:0	10	&
water	260:82	0:0	10	1
water	260:83	0:0	10	)
op	260:85	0:0	10	==
water	260:88	0:0	10	0
stmts	261:16	261:72	9	
water	261:16	0:0	10	i_delta_x
op	261:26	0:0	10	=
water	261:28	0:0	10	p_sys
op	261:33	0:0	10	->
water	261:35	0:0	10	ps_desk_planes
op	261:49	0:0	10	[
water	261:50	0:0	10	0
op	261:51	0:0	10	]
op	261:52	0:0	10	.
water	261:53	0:0	10	i_pce_max_width
op	261:69	0:0	10	/
water	261:71	0:0	10	6
water	261:72	0:0	10	;
else	262:12	263:72	6
stmts	263:16	263:72	7	
water	263:16	0:0	8	i_delta_x
op	263:26	0:0	8	=
water	263:28	0:0	8	p_sys
op	263:33	0:0	8	->
water	263:35	0:0	8	ps_desk_planes
op	263:49	0:0	8	[
water	263:50	0:0	8	0
op	263:51	0:0	8	]
op	263:52	0:0	8	.
water	263:53	0:0	8	i_pce_max_lines
op	263:69	0:0	8	/
water	263:71	0:0	8	6
water	263:72	0:0	8	;
if	264:12	265:41	6	(p_sys -> s_current_param . i_rotate == 0)
cond	264:16	264:51	7	p_sys -> s_current_param . i_rotate == 0
water	264:16	0:0	8	p_sys
op	264:21	0:0	8	->
water	264:23	0:0	8	s_current_param
op	264:38	0:0	8	.
water	264:39	0:0	8	i_rotate
op	264:48	0:0	8	==
water	264:51	0:0	8	0
stmts	265:16	265:41	7	
water	265:16	0:0	8	p_sys
op	265:21	0:0	8	->
water	265:23	0:0	8	i_mouse_action
op	265:38	0:0	8	=
water	265:40	0:0	8	0
water	265:41	0:0	8	;
else	266:12	267:41	6
stmts	266:17	267:41	7	
if	266:17	267:41	8	(p_sys -> s_current_param . i_rotate == 1)
cond	266:21	266:56	9	p_sys -> s_current_param . i_rotate == 1
water	266:21	0:0	10	p_sys
op	266:26	0:0	10	->
water	266:28	0:0	10	s_current_param
op	266:43	0:0	10	.
water	266:44	0:0	10	i_rotate
op	266:53	0:0	10	==
water	266:56	0:0	10	1
stmts	267:16	267:41	9	
water	267:16	0:0	10	p_sys
op	267:21	0:0	10	->
water	267:23	0:0	10	i_mouse_action
op	267:38	0:0	10	=
water	267:40	0:0	10	2
water	267:41	0:0	10	;
else	268:12	269:42	6
stmts	268:17	269:42	7	
if	268:17	269:42	8	(p_sys -> i_mouse_x >= ( p_sys -> ps_pieces [ p_sys -> i_mouse_drag_pce ] . i_center_x + i_delta_x ))
cond	268:22	268:108	9	p_sys -> i_mouse_x >= ( p_sys -> ps_pieces [ p_sys -> i_mouse_drag_pce ] . i_center_x + i_delta_x )
water	268:22	0:0	10	p_sys
op	268:27	0:0	10	->
water	268:29	0:0	10	i_mouse_x
op	268:39	0:0	10	>=
water	268:42	0:0	10	(
water	268:44	0:0	10	p_sys
op	268:49	0:0	10	->
water	268:51	0:0	10	ps_pieces
op	268:60	0:0	10	[
water	268:61	0:0	10	p_sys
op	268:66	0:0	10	->
water	268:68	0:0	10	i_mouse_drag_pce
op	268:84	0:0	10	]
op	268:85	0:0	10	.
water	268:86	0:0	10	i_center_x
op	268:97	0:0	10	+
water	268:99	0:0	10	i_delta_x
water	268:108	0:0	10	)
stmts	269:16	269:42	9	
water	269:16	0:0	10	p_sys
op	269:21	0:0	10	->
water	269:23	0:0	10	i_mouse_action
op	269:38	0:0	10	=
op	269:40	0:0	10	-
water	269:41	0:0	10	1
water	269:42	0:0	10	;
else	270:12	271:42	6
stmts	270:17	271:42	7	
if	270:17	271:42	8	(p_sys -> i_mouse_x <= ( p_sys -> ps_pieces [ p_sys -> i_mouse_drag_pce ] . i_center_x - i_delta_x ))
cond	270:22	270:108	9	p_sys -> i_mouse_x <= ( p_sys -> ps_pieces [ p_sys -> i_mouse_drag_pce ] . i_center_x - i_delta_x )
water	270:22	0:0	10	p_sys
op	270:27	0:0	10	->
water	270:29	0:0	10	i_mouse_x
op	270:39	0:0	10	<=
water	270:42	0:0	10	(
water	270:44	0:0	10	p_sys
op	270:49	0:0	10	->
water	270:51	0:0	10	ps_pieces
op	270:60	0:0	10	[
water	270:61	0:0	10	p_sys
op	270:66	0:0	10	->
water	270:68	0:0	10	i_mouse_drag_pce
op	270:84	0:0	10	]
op	270:85	0:0	10	.
water	270:86	0:0	10	i_center_x
op	270:97	0:0	10	-
water	270:99	0:0	10	i_delta_x
water	270:108	0:0	10	)
stmts	271:16	271:42	9	
water	271:16	0:0	10	p_sys
op	271:21	0:0	10	->
water	271:23	0:0	10	i_mouse_action
op	271:38	0:0	10	=
op	271:40	0:0	10	+
water	271:41	0:0	10	1
water	271:42	0:0	10	;
else	272:12	273:41	6
stmts	273:16	273:41	7	
water	273:16	0:0	8	p_sys
op	273:21	0:0	8	->
water	273:23	0:0	8	i_mouse_action
op	273:38	0:0	8	=
water	273:40	0:0	8	4
water	273:41	0:0	8	;
if	274:12	276:104	6	(p_sys -> i_mouse_action == + 1)
cond	274:17	274:43	7	p_sys -> i_mouse_action == + 1
water	274:17	0:0	8	p_sys
op	274:22	0:0	8	->
water	274:24	0:0	8	i_mouse_action
op	274:39	0:0	8	==
op	274:42	0:0	8	+
water	274:43	0:0	8	1
stmts	275:16	276:104	7	
call	275:16	276:103	8	puzzle_draw_sign
arg	275:33	275:42	9	p_pic_out
water	275:33	0:0	10	p_pic_out
arg	275:44	275:74	9	p_sys->i_mouse_x-ARROW_WIDTH
water	275:44	0:0	10	p_sys
op	275:49	0:0	10	->
water	275:51	0:0	10	i_mouse_x
op	275:61	0:0	10	-
water	275:63	0:0	10	ARROW_WIDTH
arg	276:33	276:49	9	p_sys->i_mouse_y
water	276:33	0:0	10	p_sys
op	276:38	0:0	10	->
water	276:40	0:0	10	i_mouse_y
arg	276:51	276:62	9	ARROW_WIDTH
water	276:51	0:0	10	ARROW_WIDTH
arg	276:64	276:75	9	ARROW_LINES
water	276:64	0:0	10	ARROW_LINES
arg	276:77	276:96	9	ppsz_rot_arrow_sign
water	276:77	0:0	10	ppsz_rot_arrow_sign
arg	276:98	276:103	9	false
water	276:98	0:0	10	false
water	276:104	0:0	8	;
else	277:12	279:103	6
stmts	277:17	279:103	7	
if	277:17	279:103	8	(p_sys -> i_mouse_action == - 1)
cond	277:22	277:48	9	p_sys -> i_mouse_action == - 1
water	277:22	0:0	10	p_sys
op	277:27	0:0	10	->
water	277:29	0:0	10	i_mouse_action
op	277:44	0:0	10	==
op	277:47	0:0	10	-
water	277:48	0:0	10	1
stmts	278:16	279:103	9	
call	278:16	279:102	10	puzzle_draw_sign
arg	278:33	278:42	11	p_pic_out
water	278:33	0:0	12	p_pic_out
arg	278:44	278:74	11	p_sys->i_mouse_x-ARROW_WIDTH
water	278:44	0:0	12	p_sys
op	278:49	0:0	12	->
water	278:51	0:0	12	i_mouse_x
op	278:61	0:0	12	-
water	278:63	0:0	12	ARROW_WIDTH
arg	279:33	279:49	11	p_sys->i_mouse_y
water	279:33	0:0	12	p_sys
op	279:38	0:0	12	->
water	279:40	0:0	12	i_mouse_y
arg	279:51	279:62	11	ARROW_WIDTH
water	279:51	0:0	12	ARROW_WIDTH
arg	279:64	279:75	11	ARROW_LINES
water	279:64	0:0	12	ARROW_LINES
arg	279:77	279:96	11	ppsz_rot_arrow_sign
water	279:77	0:0	12	ppsz_rot_arrow_sign
arg	279:98	279:102	11	true
water	279:98	0:0	12	true
water	279:103	0:0	10	;
else	280:12	282:104	6
stmts	280:17	282:104	7	
if	280:17	282:104	8	(p_sys -> i_mouse_action == 4)
cond	280:22	280:47	9	p_sys -> i_mouse_action == 4
water	280:22	0:0	10	p_sys
op	280:27	0:0	10	->
water	280:29	0:0	10	i_mouse_action
op	280:44	0:0	10	==
water	280:47	0:0	10	4
stmts	281:16	282:104	9	
call	281:16	282:103	10	puzzle_draw_sign
arg	281:33	281:42	11	p_pic_out
water	281:33	0:0	12	p_pic_out
arg	281:44	281:74	11	p_sys->i_mouse_x-ARROW_WIDTH
water	281:44	0:0	12	p_sys
op	281:49	0:0	12	->
water	281:51	0:0	12	i_mouse_x
op	281:61	0:0	12	-
water	281:63	0:0	12	ARROW_WIDTH
arg	282:33	282:49	11	p_sys->i_mouse_y
water	282:33	0:0	12	p_sys
op	282:38	0:0	12	->
water	282:40	0:0	12	i_mouse_y
arg	282:51	282:62	11	ARROW_WIDTH
water	282:51	0:0	12	ARROW_WIDTH
arg	282:64	282:75	11	ARROW_LINES
water	282:64	0:0	12	ARROW_LINES
arg	282:77	282:96	11	ppsz_mir_arrow_sign
water	282:77	0:0	12	ppsz_mir_arrow_sign
arg	282:98	282:103	11	false
water	282:98	0:0	12	false
water	282:104	0:0	10	;
call	283:12	283:47	6	vlc_mutex_unlock
arg	283:30	283:47	7	&p_sys->pce_lock
op	283:30	0:0	8	&
water	283:31	0:0	8	p_sys
op	283:36	0:0	8	->
water	283:38	0:0	8	pce_lock
water	283:48	0:0	6	;
water	284:8	0:0	6	}
water	285:4	0:0	4	}
return	286:4	286:52	2	CopyInfoAndRelease(p_pic_out,p_pic_in)
call	286:11	286:51	3	CopyInfoAndRelease
arg	286:31	286:40	4	p_pic_out
water	286:31	0:0	5	p_pic_out
arg	286:42	286:51	4	p_pic_in
water	286:42	0:0	5	p_pic_in
