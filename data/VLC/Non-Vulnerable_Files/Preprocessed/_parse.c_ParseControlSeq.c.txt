func	2:0	239:0	0	static int	ParseControlSeq
params	2:26	0:0	1	
param	2:28	2:44	2	decoder_t *	p_dec
param	2:46	2:65	2	subpicture_t *	p_spu
param	3:28	3:57	2	subpicture_data_t *	p_spu_data
param	3:59	3:93	2	spu_properties_t *	p_spu_properties
param	3:95	3:109	2	mtime_t	i_pts
stmnts	0:0	238:22	1	
decl	5:4	5:39	2	decoder_sys_t	*p_sys
op	5:25	0:0	2	=
water	5:27	0:0	2	p_dec
op	5:32	0:0	2	->
water	5:34	0:0	2	p_sys
decl	7:4	7:24	2	unsigned int	i_index
decl	9:4	9:46	2	unsigned int	i_next_seq
op	9:28	0:0	2	=
water	9:30	0:0	2	0
water	9:31	0:0	2	,
decl	9:4	9:46	2	unsigned int	i_cur_seq
op	9:43	0:0	2	=
water	9:45	0:0	2	0
decl	11:4	11:35	2	uint8_t	i_command
op	11:22	0:0	2	=
water	11:24	0:0	2	SPU_CMD_END
decl	12:4	12:20	2	mtime_t	date
op	12:17	0:0	2	=
water	12:19	0:0	2	0
decl	13:4	13:29	2	bool	b_cmd_offset
op	13:22	0:0	2	=
water	13:24	0:0	2	false
decl	14:4	14:28	2	bool	b_cmd_alpha
op	14:21	0:0	2	=
water	14:23	0:0	2	false
decl	15:4	15:34	2	subpicture_data_t	spu_data_cmd
if	16:4	17:27	2	(! p_spu || ! p_spu_data)
cond	16:8	16:19	3	! p_spu || ! p_spu_data
op	16:8	0:0	4	!
water	16:9	0:0	4	p_spu
op	16:15	0:0	4	||
op	16:18	0:0	4	!
water	16:19	0:0	4	p_spu_data
stmts	17:8	17:27	3	
return	17:8	17:27	4	VLC_EGENERIC
water	17:15	0:0	5	VLC_EGENERIC
call	19:4	19:51	2	memset
arg	19:12	19:25	3	&spu_data_cmd
op	19:12	0:0	4	&
water	19:13	0:0	4	spu_data_cmd
arg	19:27	19:28	3	0
water	19:27	0:0	4	0
arg	19:30	19:51	3	sizeof(spu_data_cmd)
op	19:30	0:0	4	sizeof
water	19:36	0:0	4	(
water	19:37	0:0	4	spu_data_cmd
water	19:49	0:0	4	)
water	19:52	0:0	2	;
water	20:4	0:0	2	spu_data_cmd
op	20:16	0:0	2	.
water	20:17	0:0	2	pi_offset
op	20:26	0:0	2	[
water	20:27	0:0	2	0
op	20:28	0:0	2	]
op	20:30	0:0	2	=
op	20:32	0:0	2	-
water	20:33	0:0	2	1
water	20:34	0:0	2	;
water	21:4	0:0	2	spu_data_cmd
op	21:16	0:0	2	.
water	21:17	0:0	2	pi_offset
op	21:26	0:0	2	[
water	21:27	0:0	2	1
op	21:28	0:0	2	]
op	21:30	0:0	2	=
op	21:32	0:0	2	-
water	21:33	0:0	2	1
water	21:34	0:0	2	;
water	22:4	0:0	2	spu_data_cmd
op	22:16	0:0	2	.
water	22:17	0:0	2	p_data
op	22:24	0:0	2	=
water	22:26	0:0	2	NULL
water	22:30	0:0	2	;
water	23:4	0:0	2	spu_data_cmd
op	23:16	0:0	2	.
water	23:17	0:0	2	b_palette
op	23:27	0:0	2	=
water	23:29	0:0	2	false
water	23:34	0:0	2	;
water	24:4	0:0	2	spu_data_cmd
op	24:16	0:0	2	.
water	24:17	0:0	2	b_auto_crop
op	24:29	0:0	2	=
water	24:31	0:0	2	false
water	24:36	0:0	2	;
water	25:4	0:0	2	spu_data_cmd
op	25:16	0:0	2	.
water	25:17	0:0	2	i_y_top_offset
op	25:32	0:0	2	=
water	25:34	0:0	2	0
water	25:35	0:0	2	;
water	26:4	0:0	2	spu_data_cmd
op	26:16	0:0	2	.
water	26:17	0:0	2	i_y_bottom_offset
op	26:35	0:0	2	=
water	26:37	0:0	2	0
water	26:38	0:0	2	;
water	27:4	0:0	2	spu_data_cmd
op	27:16	0:0	2	.
water	27:17	0:0	2	pi_alpha
op	27:25	0:0	2	[
water	27:26	0:0	2	0
op	27:27	0:0	2	]
op	27:29	0:0	2	=
water	27:31	0:0	2	0
water	27:32	0:0	2	x00
water	27:35	0:0	2	;
water	28:4	0:0	2	spu_data_cmd
op	28:16	0:0	2	.
water	28:17	0:0	2	pi_alpha
op	28:25	0:0	2	[
water	28:26	0:0	2	1
op	28:27	0:0	2	]
op	28:29	0:0	2	=
water	28:31	0:0	2	0
water	28:32	0:0	2	x0f
water	28:35	0:0	2	;
water	29:4	0:0	2	spu_data_cmd
op	29:16	0:0	2	.
water	29:17	0:0	2	pi_alpha
op	29:25	0:0	2	[
water	29:26	0:0	2	2
op	29:27	0:0	2	]
op	29:29	0:0	2	=
water	29:31	0:0	2	0
water	29:32	0:0	2	x0f
water	29:35	0:0	2	;
water	30:4	0:0	2	spu_data_cmd
op	30:16	0:0	2	.
water	30:17	0:0	2	pi_alpha
op	30:25	0:0	2	[
water	30:26	0:0	2	3
op	30:27	0:0	2	]
op	30:29	0:0	2	=
water	30:31	0:0	2	0
water	30:32	0:0	2	x0f
water	30:35	0:0	2	;
water	32:4	0:0	2	p_spu
op	32:9	0:0	2	->
water	32:11	0:0	2	i_start
op	32:19	0:0	2	=
water	32:21	0:0	2	p_spu
op	32:26	0:0	2	->
water	32:28	0:0	2	i_stop
op	32:35	0:0	2	=
water	32:37	0:0	2	0
water	32:38	0:0	2	;
water	33:4	0:0	2	p_spu
op	33:9	0:0	2	->
water	33:11	0:0	2	b_ephemer
op	33:21	0:0	2	=
water	33:23	0:0	2	false
water	33:28	0:0	2	;
call	34:4	34:59	2	memset
arg	34:12	34:28	3	p_spu_properties
water	34:12	0:0	4	p_spu_properties
arg	34:30	34:31	3	0
water	34:30	0:0	4	0
arg	34:33	34:59	3	sizeof(*p_spu_properties)
op	34:33	0:0	4	sizeof
water	34:39	0:0	4	(
op	34:40	0:0	4	*
water	34:41	0:0	4	p_spu_properties
water	34:57	0:0	4	)
water	34:60	0:0	2	;
op	36:4	0:0	2	*
water	36:5	0:0	2	p_spu_data
op	36:16	0:0	2	=
water	36:18	0:0	2	spu_data_cmd
water	36:30	0:0	2	;
for	37:4	196:4	2	(i_index = 4 + p_sys -> i_rle_size ;i_index < p_sys -> i_spu_size;)
forinit	37:9	37:40	3	i_index = 4 + p_sys -> i_rle_size ;
water	37:9	0:0	4	i_index
op	37:17	0:0	4	=
water	37:19	0:0	4	4
op	37:21	0:0	4	+
water	37:23	0:0	4	p_sys
op	37:28	0:0	4	->
water	37:30	0:0	4	i_rle_size
water	37:40	0:0	4	;
cond	37:42	37:59	3	i_index < p_sys -> i_spu_size
water	37:42	0:0	4	i_index
op	37:50	0:0	4	<
water	37:52	0:0	4	p_sys
op	37:57	0:0	4	->
water	37:59	0:0	4	i_spu_size
forexpr	0:0	0:0	3	
stmts	38:4	196:4	3	
water	38:4	0:0	4	{
if	41:8	63:8	4	(i_command == SPU_CMD_END)
cond	41:12	41:25	5	i_command == SPU_CMD_END
water	41:12	0:0	6	i_command
op	41:22	0:0	6	==
water	41:25	0:0	6	SPU_CMD_END
stmts	42:8	63:8	5	
water	42:8	0:0	6	{
if	43:12	47:12	6	(i_index + 4 > p_sys -> i_spu_size)
cond	43:16	43:37	7	i_index + 4 > p_sys -> i_spu_size
water	43:16	0:0	8	i_index
op	43:24	0:0	8	+
water	43:26	0:0	8	4
op	43:28	0:0	8	>
water	43:30	0:0	8	p_sys
op	43:35	0:0	8	->
water	43:37	0:0	8	i_spu_size
stmts	44:12	47:12	7	
water	44:12	0:0	8	{
call	45:16	45:67	8	msg_Err
arg	45:25	45:30	9	p_dec
water	45:25	0:0	10	p_dec
arg	45:32	45:67	9	"overflow in SPU command sequence"
water	45:32	0:0	10	"overflow in SPU command sequence"
water	45:68	0:0	8	;
return	46:16	46:35	8	VLC_EGENERIC
water	46:23	0:0	9	VLC_EGENERIC
water	47:12	0:0	8	}
water	49:12	0:0	6	b_cmd_offset
op	49:25	0:0	6	=
water	49:27	0:0	6	false
water	49:32	0:0	6	;
water	50:12	0:0	6	b_cmd_alpha
op	50:24	0:0	6	=
water	50:26	0:0	6	false
water	50:31	0:0	6	;
water	52:12	0:0	6	date
op	52:17	0:0	6	=
water	52:19	0:0	6	(
water	52:20	0:0	6	mtime_t
water	52:27	0:0	6	)
call	52:28	52:60	6	GetWBE
arg	52:36	52:60	7	&p_sys->buffer[i_index]
op	52:36	0:0	8	&
water	52:37	0:0	8	p_sys
op	52:42	0:0	8	->
water	52:44	0:0	8	buffer
op	52:50	0:0	8	[
water	52:51	0:0	8	i_index
op	52:58	0:0	8	]
op	52:62	0:0	6	*
water	52:64	0:0	6	11000
water	52:69	0:0	6	;
water	54:12	0:0	6	i_cur_seq
op	54:22	0:0	6	=
water	54:24	0:0	6	i_index
water	54:31	0:0	6	;
water	55:12	0:0	6	i_next_seq
op	55:23	0:0	6	=
call	55:25	55:59	6	GetWBE
arg	55:33	55:59	7	&p_sys->buffer[i_index+2]
op	55:33	0:0	8	&
water	55:34	0:0	8	p_sys
op	55:39	0:0	8	->
water	55:41	0:0	8	buffer
op	55:47	0:0	8	[
water	55:48	0:0	8	i_index
op	55:55	0:0	8	+
water	55:56	0:0	8	2
op	55:57	0:0	8	]
water	55:60	0:0	6	;
if	56:12	60:12	6	(i_next_seq > p_sys -> i_spu_size)
cond	56:16	56:36	7	i_next_seq > p_sys -> i_spu_size
water	56:16	0:0	8	i_next_seq
op	56:27	0:0	8	>
water	56:29	0:0	8	p_sys
op	56:34	0:0	8	->
water	56:36	0:0	8	i_spu_size
stmts	57:12	60:12	7	
water	57:12	0:0	8	{
call	58:16	58:72	8	msg_Err
arg	58:25	58:30	9	p_dec
water	58:25	0:0	10	p_dec
arg	58:32	58:72	9	"overflow in SPU next command sequence"
water	58:32	0:0	10	"overflow in SPU next command sequence"
water	58:73	0:0	8	;
return	59:16	59:35	8	VLC_EGENERIC
water	59:23	0:0	9	VLC_EGENERIC
water	60:12	0:0	8	}
water	62:12	0:0	6	i_index
op	62:20	0:0	6	+=
water	62:23	0:0	6	4
water	62:24	0:0	6	;
water	63:8	0:0	6	}
water	64:8	0:0	4	i_command
op	64:18	0:0	4	=
water	64:20	0:0	4	p_sys
op	64:25	0:0	4	->
water	64:27	0:0	4	buffer
op	64:33	0:0	4	[
water	64:34	0:0	4	i_index
op	64:41	0:0	4	]
water	64:42	0:0	4	;
switch	65:8	192:8	4	(i_command)
cond	65:16	65:16	5	i_command
water	65:16	0:0	6	i_command
stmts	66:8	192:8	5	
water	66:8	0:0	6	{
label	67:8	67:34	6	case SPU_CMD_FORCE_DISPLAY :
water	68:12	0:0	6	p_spu
op	68:17	0:0	6	->
water	68:19	0:0	6	i_start
op	68:27	0:0	6	=
water	68:29	0:0	6	i_pts
op	68:35	0:0	6	+
water	68:37	0:0	6	date
water	68:41	0:0	6	;
water	69:12	0:0	6	p_spu
op	69:17	0:0	6	->
water	69:19	0:0	6	b_ephemer
op	69:29	0:0	6	=
water	69:31	0:0	6	true
water	69:35	0:0	6	;
water	70:12	0:0	6	i_index
op	70:20	0:0	6	+=
water	70:23	0:0	6	1
water	70:24	0:0	6	;
break	71:12	71:17	6	
label	73:8	73:34	6	case SPU_CMD_START_DISPLAY :
water	74:12	0:0	6	p_spu
op	74:17	0:0	6	->
water	74:19	0:0	6	i_start
op	74:27	0:0	6	=
water	74:29	0:0	6	i_pts
op	74:35	0:0	6	+
water	74:37	0:0	6	date
water	74:41	0:0	6	;
water	75:12	0:0	6	i_index
op	75:20	0:0	6	+=
water	75:23	0:0	6	1
water	75:24	0:0	6	;
break	76:12	76:17	6	
label	77:8	77:33	6	case SPU_CMD_STOP_DISPLAY :
water	78:12	0:0	6	p_spu
op	78:17	0:0	6	->
water	78:19	0:0	6	i_stop
op	78:26	0:0	6	=
water	78:28	0:0	6	i_pts
op	78:34	0:0	6	+
water	78:36	0:0	6	date
water	78:40	0:0	6	;
water	79:12	0:0	6	i_index
op	79:20	0:0	6	+=
water	79:23	0:0	6	1
water	79:24	0:0	6	;
break	80:12	80:17	6	
label	81:8	81:32	6	case SPU_CMD_SET_PALETTE :
if	83:12	87:12	6	(i_index + 3 > p_sys -> i_spu_size)
cond	83:16	83:37	7	i_index + 3 > p_sys -> i_spu_size
water	83:16	0:0	8	i_index
op	83:24	0:0	8	+
water	83:26	0:0	8	3
op	83:28	0:0	8	>
water	83:30	0:0	8	p_sys
op	83:35	0:0	8	->
water	83:37	0:0	8	i_spu_size
stmts	84:12	87:12	7	
water	84:12	0:0	8	{
call	85:16	85:58	8	msg_Err
arg	85:25	85:30	9	p_dec
water	85:25	0:0	10	p_dec
arg	85:32	85:58	9	"overflow in SPU command"
water	85:32	0:0	10	"overflow in SPU command"
water	85:59	0:0	8	;
return	86:16	86:35	8	VLC_EGENERIC
water	86:23	0:0	9	VLC_EGENERIC
water	87:12	0:0	8	}
if	88:12	105:12	6	(p_dec -> fmt_in . subs . spu . palette [ 0 ] == 0 xBeeF)
cond	88:16	88:54	7	p_dec -> fmt_in . subs . spu . palette [ 0 ] == 0 xBeeF
water	88:16	0:0	8	p_dec
op	88:21	0:0	8	->
water	88:23	0:0	8	fmt_in
op	88:29	0:0	8	.
water	88:30	0:0	8	subs
op	88:34	0:0	8	.
water	88:35	0:0	8	spu
op	88:38	0:0	8	.
water	88:39	0:0	8	palette
op	88:46	0:0	8	[
water	88:47	0:0	8	0
op	88:48	0:0	8	]
op	88:50	0:0	8	==
water	88:53	0:0	8	0
water	88:54	0:0	8	xBeeF
stmts	89:12	105:12	7	
water	89:12	0:0	8	{
decl	90:16	90:35	8	unsigned int	idx[4]
decl	91:16	91:21	8	int	i
water	92:16	0:0	8	spu_data_cmd
op	92:28	0:0	8	.
water	92:29	0:0	8	b_palette
op	92:39	0:0	8	=
water	92:41	0:0	8	true
water	92:45	0:0	8	;
water	93:16	0:0	8	idx
op	93:19	0:0	8	[
water	93:20	0:0	8	0
op	93:21	0:0	8	]
op	93:23	0:0	8	=
water	93:25	0:0	8	(
water	93:26	0:0	8	p_sys
op	93:31	0:0	8	->
water	93:33	0:0	8	buffer
op	93:39	0:0	8	[
water	93:40	0:0	8	i_index
op	93:47	0:0	8	+
water	93:48	0:0	8	1
op	93:49	0:0	8	]
op	93:50	0:0	8	>>
water	93:52	0:0	8	4
water	93:53	0:0	8	)
op	93:54	0:0	8	&
water	93:55	0:0	8	0
water	93:56	0:0	8	x0f
water	93:59	0:0	8	;
water	94:16	0:0	8	idx
op	94:19	0:0	8	[
water	94:20	0:0	8	1
op	94:21	0:0	8	]
op	94:23	0:0	8	=
water	94:25	0:0	8	(
water	94:26	0:0	8	p_sys
op	94:31	0:0	8	->
water	94:33	0:0	8	buffer
op	94:39	0:0	8	[
water	94:40	0:0	8	i_index
op	94:47	0:0	8	+
water	94:48	0:0	8	1
op	94:49	0:0	8	]
water	94:50	0:0	8	)
op	94:51	0:0	8	&
water	94:52	0:0	8	0
water	94:53	0:0	8	x0f
water	94:56	0:0	8	;
water	95:16	0:0	8	idx
op	95:19	0:0	8	[
water	95:20	0:0	8	2
op	95:21	0:0	8	]
op	95:23	0:0	8	=
water	95:25	0:0	8	(
water	95:26	0:0	8	p_sys
op	95:31	0:0	8	->
water	95:33	0:0	8	buffer
op	95:39	0:0	8	[
water	95:40	0:0	8	i_index
op	95:47	0:0	8	+
water	95:48	0:0	8	2
op	95:49	0:0	8	]
op	95:50	0:0	8	>>
water	95:52	0:0	8	4
water	95:53	0:0	8	)
op	95:54	0:0	8	&
water	95:55	0:0	8	0
water	95:56	0:0	8	x0f
water	95:59	0:0	8	;
water	96:16	0:0	8	idx
op	96:19	0:0	8	[
water	96:20	0:0	8	3
op	96:21	0:0	8	]
op	96:23	0:0	8	=
water	96:25	0:0	8	(
water	96:26	0:0	8	p_sys
op	96:31	0:0	8	->
water	96:33	0:0	8	buffer
op	96:39	0:0	8	[
water	96:40	0:0	8	i_index
op	96:47	0:0	8	+
water	96:48	0:0	8	2
op	96:49	0:0	8	]
water	96:50	0:0	8	)
op	96:51	0:0	8	&
water	96:52	0:0	8	0
water	96:53	0:0	8	x0f
water	96:56	0:0	8	;
for	97:16	104:16	8	(i = 0 ;i < 4;i ++)
forinit	97:21	97:26	9	i = 0 ;
water	97:21	0:0	10	i
op	97:23	0:0	10	=
water	97:25	0:0	10	0
water	97:26	0:0	10	;
cond	97:28	97:32	9	i < 4
water	97:28	0:0	10	i
op	97:30	0:0	10	<
water	97:32	0:0	10	4
forexpr	97:36	97:37	9	i ++
water	97:36	0:0	10	i
op	97:37	0:0	10	++
stmts	98:16	104:16	9	
water	98:16	0:0	10	{
decl	99:20	99:79	10	uint32_t	i_color
op	99:37	0:0	10	=
water	99:39	0:0	10	p_dec
op	99:44	0:0	10	->
water	99:46	0:0	10	fmt_in
op	99:52	0:0	10	.
water	99:53	0:0	10	subs
op	99:57	0:0	10	.
water	99:58	0:0	10	spu
op	99:61	0:0	10	.
water	99:62	0:0	10	palette
op	99:69	0:0	10	[
water	99:70	0:0	10	1
op	99:71	0:0	10	+
water	99:72	0:0	10	idx
op	99:75	0:0	10	[
water	99:76	0:0	10	i
op	99:77	0:0	10	]
op	99:78	0:0	10	]
water	101:20	0:0	10	spu_data_cmd
op	101:32	0:0	10	.
water	101:33	0:0	10	pi_yuv
op	101:39	0:0	10	[
water	101:40	0:0	10	3
op	101:41	0:0	10	-
water	101:42	0:0	10	i
op	101:43	0:0	10	]
op	101:44	0:0	10	[
water	101:45	0:0	10	0
op	101:46	0:0	10	]
op	101:48	0:0	10	=
water	101:50	0:0	10	(
water	101:51	0:0	10	i_color
op	101:58	0:0	10	>>
water	101:60	0:0	10	16
water	101:62	0:0	10	)
op	101:64	0:0	10	&
water	101:66	0:0	10	0
water	101:67	0:0	10	xff
water	101:70	0:0	10	;
water	102:20	0:0	10	spu_data_cmd
op	102:32	0:0	10	.
water	102:33	0:0	10	pi_yuv
op	102:39	0:0	10	[
water	102:40	0:0	10	3
op	102:41	0:0	10	-
water	102:42	0:0	10	i
op	102:43	0:0	10	]
op	102:44	0:0	10	[
water	102:45	0:0	10	1
op	102:46	0:0	10	]
op	102:48	0:0	10	=
water	102:50	0:0	10	(
water	102:51	0:0	10	i_color
op	102:58	0:0	10	>>
water	102:60	0:0	10	0
water	102:61	0:0	10	)
op	102:63	0:0	10	&
water	102:65	0:0	10	0
water	102:66	0:0	10	xff
water	102:69	0:0	10	;
water	103:20	0:0	10	spu_data_cmd
op	103:32	0:0	10	.
water	103:33	0:0	10	pi_yuv
op	103:39	0:0	10	[
water	103:40	0:0	10	3
op	103:41	0:0	10	-
water	103:42	0:0	10	i
op	103:43	0:0	10	]
op	103:44	0:0	10	[
water	103:45	0:0	10	2
op	103:46	0:0	10	]
op	103:48	0:0	10	=
water	103:50	0:0	10	(
water	103:51	0:0	10	i_color
op	103:58	0:0	10	>>
water	103:60	0:0	10	8
water	103:61	0:0	10	)
op	103:63	0:0	10	&
water	103:65	0:0	10	0
water	103:66	0:0	10	xff
water	103:69	0:0	10	;
water	104:16	0:0	10	}
water	105:12	0:0	8	}
water	106:12	0:0	6	i_index
op	106:20	0:0	6	+=
water	106:23	0:0	6	3
water	106:24	0:0	6	;
break	107:12	107:17	6	
label	108:8	108:37	6	case SPU_CMD_SET_ALPHACHANNEL :
if	109:12	113:12	6	(i_index + 3 > p_sys -> i_spu_size)
cond	109:16	109:37	7	i_index + 3 > p_sys -> i_spu_size
water	109:16	0:0	8	i_index
op	109:24	0:0	8	+
water	109:26	0:0	8	3
op	109:28	0:0	8	>
water	109:30	0:0	8	p_sys
op	109:35	0:0	8	->
water	109:37	0:0	8	i_spu_size
stmts	110:12	113:12	7	
water	110:12	0:0	8	{
call	111:16	111:58	8	msg_Err
arg	111:25	111:30	9	p_dec
water	111:25	0:0	10	p_dec
arg	111:32	111:58	9	"overflow in SPU command"
water	111:32	0:0	10	"overflow in SPU command"
water	111:59	0:0	8	;
return	112:16	112:35	8	VLC_EGENERIC
water	112:23	0:0	9	VLC_EGENERIC
water	113:12	0:0	8	}
if	114:12	121:12	6	(! p_sys -> b_disabletrans)
cond	114:15	114:23	7	! p_sys -> b_disabletrans
op	114:15	0:0	8	!
water	114:16	0:0	8	p_sys
op	114:21	0:0	8	->
water	114:23	0:0	8	b_disabletrans
stmts	115:12	121:12	7	
water	115:12	0:0	8	{
water	116:16	0:0	8	b_cmd_alpha
op	116:28	0:0	8	=
water	116:30	0:0	8	true
water	116:34	0:0	8	;
water	117:16	0:0	8	spu_data_cmd
op	117:28	0:0	8	.
water	117:29	0:0	8	pi_alpha
op	117:37	0:0	8	[
water	117:38	0:0	8	3
op	117:39	0:0	8	]
op	117:41	0:0	8	=
water	117:43	0:0	8	(
water	117:44	0:0	8	p_sys
op	117:49	0:0	8	->
water	117:51	0:0	8	buffer
op	117:57	0:0	8	[
water	117:58	0:0	8	i_index
op	117:65	0:0	8	+
water	117:66	0:0	8	1
op	117:67	0:0	8	]
op	117:68	0:0	8	>>
water	117:70	0:0	8	4
water	117:71	0:0	8	)
op	117:72	0:0	8	&
water	117:73	0:0	8	0
water	117:74	0:0	8	x0f
water	117:77	0:0	8	;
water	118:16	0:0	8	spu_data_cmd
op	118:28	0:0	8	.
water	118:29	0:0	8	pi_alpha
op	118:37	0:0	8	[
water	118:38	0:0	8	2
op	118:39	0:0	8	]
op	118:41	0:0	8	=
water	118:43	0:0	8	(
water	118:44	0:0	8	p_sys
op	118:49	0:0	8	->
water	118:51	0:0	8	buffer
op	118:57	0:0	8	[
water	118:58	0:0	8	i_index
op	118:65	0:0	8	+
water	118:66	0:0	8	1
op	118:67	0:0	8	]
water	118:68	0:0	8	)
op	118:69	0:0	8	&
water	118:70	0:0	8	0
water	118:71	0:0	8	x0f
water	118:74	0:0	8	;
water	119:16	0:0	8	spu_data_cmd
op	119:28	0:0	8	.
water	119:29	0:0	8	pi_alpha
op	119:37	0:0	8	[
water	119:38	0:0	8	1
op	119:39	0:0	8	]
op	119:41	0:0	8	=
water	119:43	0:0	8	(
water	119:44	0:0	8	p_sys
op	119:49	0:0	8	->
water	119:51	0:0	8	buffer
op	119:57	0:0	8	[
water	119:58	0:0	8	i_index
op	119:65	0:0	8	+
water	119:66	0:0	8	2
op	119:67	0:0	8	]
op	119:68	0:0	8	>>
water	119:70	0:0	8	4
water	119:71	0:0	8	)
op	119:72	0:0	8	&
water	119:73	0:0	8	0
water	119:74	0:0	8	x0f
water	119:77	0:0	8	;
water	120:16	0:0	8	spu_data_cmd
op	120:28	0:0	8	.
water	120:29	0:0	8	pi_alpha
op	120:37	0:0	8	[
water	120:38	0:0	8	0
op	120:39	0:0	8	]
op	120:41	0:0	8	=
water	120:43	0:0	8	(
water	120:44	0:0	8	p_sys
op	120:49	0:0	8	->
water	120:51	0:0	8	buffer
op	120:57	0:0	8	[
water	120:58	0:0	8	i_index
op	120:65	0:0	8	+
water	120:66	0:0	8	2
op	120:67	0:0	8	]
water	120:68	0:0	8	)
op	120:69	0:0	8	&
water	120:70	0:0	8	0
water	120:71	0:0	8	x0f
water	120:74	0:0	8	;
water	121:12	0:0	8	}
water	122:12	0:0	6	i_index
op	122:20	0:0	6	+=
water	122:23	0:0	6	3
water	122:24	0:0	6	;
break	123:12	123:17	6	
label	124:8	124:36	6	case SPU_CMD_SET_COORDINATES :
if	125:12	129:12	6	(i_index + 7 > p_sys -> i_spu_size)
cond	125:16	125:37	7	i_index + 7 > p_sys -> i_spu_size
water	125:16	0:0	8	i_index
op	125:24	0:0	8	+
water	125:26	0:0	8	7
op	125:28	0:0	8	>
water	125:30	0:0	8	p_sys
op	125:35	0:0	8	->
water	125:37	0:0	8	i_spu_size
stmts	126:12	129:12	7	
water	126:12	0:0	8	{
call	127:16	127:58	8	msg_Err
arg	127:25	127:30	9	p_dec
water	127:25	0:0	10	p_dec
arg	127:32	127:58	9	"overflow in SPU command"
water	127:32	0:0	10	"overflow in SPU command"
water	127:59	0:0	8	;
return	128:16	128:35	8	VLC_EGENERIC
water	128:23	0:0	9	VLC_EGENERIC
water	129:12	0:0	8	}
water	130:12	0:0	6	p_spu_properties
op	130:28	0:0	6	->
water	130:30	0:0	6	i_x
op	130:34	0:0	6	=
water	130:36	0:0	6	(
water	130:37	0:0	6	p_sys
op	130:42	0:0	6	->
water	130:44	0:0	6	buffer
op	130:50	0:0	6	[
water	130:51	0:0	6	i_index
op	130:58	0:0	6	+
water	130:59	0:0	6	1
op	130:60	0:0	6	]
op	130:61	0:0	6	<<
water	130:63	0:0	6	4
water	130:64	0:0	6	)
op	130:65	0:0	6	|
water	131:25	0:0	6	(
water	131:26	0:0	6	(
water	131:27	0:0	6	p_sys
op	131:32	0:0	6	->
water	131:34	0:0	6	buffer
op	131:40	0:0	6	[
water	131:41	0:0	6	i_index
op	131:48	0:0	6	+
water	131:49	0:0	6	2
op	131:50	0:0	6	]
op	131:51	0:0	6	>>
water	131:53	0:0	6	4
water	131:54	0:0	6	)
op	131:55	0:0	6	&
water	131:56	0:0	6	0
water	131:57	0:0	6	x0f
water	131:60	0:0	6	)
water	131:61	0:0	6	;
water	132:12	0:0	6	p_spu_properties
op	132:28	0:0	6	->
water	132:30	0:0	6	i_width
op	132:38	0:0	6	=
water	132:40	0:0	6	(
water	132:41	0:0	6	(
water	132:42	0:0	6	(
water	132:43	0:0	6	p_sys
op	132:48	0:0	6	->
water	132:50	0:0	6	buffer
op	132:56	0:0	6	[
water	132:57	0:0	6	i_index
op	132:64	0:0	6	+
water	132:65	0:0	6	2
op	132:66	0:0	6	]
op	132:67	0:0	6	&
water	132:68	0:0	6	0
water	132:69	0:0	6	x0f
water	132:72	0:0	6	)
op	132:73	0:0	6	<<
water	132:75	0:0	6	8
water	132:76	0:0	6	)
op	132:77	0:0	6	|
water	133:30	0:0	6	p_sys
op	133:35	0:0	6	->
water	133:37	0:0	6	buffer
op	133:43	0:0	6	[
water	133:44	0:0	6	i_index
op	133:51	0:0	6	+
water	133:52	0:0	6	3
op	133:53	0:0	6	]
water	133:54	0:0	6	)
op	133:56	0:0	6	-
water	133:58	0:0	6	p_spu_properties
op	133:74	0:0	6	->
water	133:76	0:0	6	i_x
op	133:80	0:0	6	+
water	133:82	0:0	6	1
water	133:83	0:0	6	;
water	134:12	0:0	6	p_spu_properties
op	134:28	0:0	6	->
water	134:30	0:0	6	i_y
op	134:34	0:0	6	=
water	134:36	0:0	6	(
water	134:37	0:0	6	p_sys
op	134:42	0:0	6	->
water	134:44	0:0	6	buffer
op	134:50	0:0	6	[
water	134:51	0:0	6	i_index
op	134:58	0:0	6	+
water	134:59	0:0	6	4
op	134:60	0:0	6	]
op	134:61	0:0	6	<<
water	134:63	0:0	6	4
water	134:64	0:0	6	)
op	134:65	0:0	6	|
water	135:25	0:0	6	(
water	135:26	0:0	6	(
water	135:27	0:0	6	p_sys
op	135:32	0:0	6	->
water	135:34	0:0	6	buffer
op	135:40	0:0	6	[
water	135:41	0:0	6	i_index
op	135:48	0:0	6	+
water	135:49	0:0	6	5
op	135:50	0:0	6	]
op	135:51	0:0	6	>>
water	135:53	0:0	6	4
water	135:54	0:0	6	)
op	135:55	0:0	6	&
water	135:56	0:0	6	0
water	135:57	0:0	6	x0f
water	135:60	0:0	6	)
water	135:61	0:0	6	;
water	136:12	0:0	6	p_spu_properties
op	136:28	0:0	6	->
water	136:30	0:0	6	i_height
op	136:39	0:0	6	=
water	136:41	0:0	6	(
water	136:42	0:0	6	(
water	136:43	0:0	6	(
water	136:44	0:0	6	p_sys
op	136:49	0:0	6	->
water	136:51	0:0	6	buffer
op	136:57	0:0	6	[
water	136:58	0:0	6	i_index
op	136:65	0:0	6	+
water	136:66	0:0	6	5
op	136:67	0:0	6	]
op	136:68	0:0	6	&
water	136:69	0:0	6	0
water	136:70	0:0	6	x0f
water	136:73	0:0	6	)
op	136:74	0:0	6	<<
water	136:76	0:0	6	8
water	136:77	0:0	6	)
op	136:78	0:0	6	|
water	137:30	0:0	6	p_sys
op	137:35	0:0	6	->
water	137:37	0:0	6	buffer
op	137:43	0:0	6	[
water	137:44	0:0	6	i_index
op	137:51	0:0	6	+
water	137:52	0:0	6	6
op	137:53	0:0	6	]
water	137:54	0:0	6	)
op	137:56	0:0	6	-
water	137:58	0:0	6	p_spu_properties
op	137:74	0:0	6	->
water	137:76	0:0	6	i_y
op	137:80	0:0	6	+
water	137:82	0:0	6	1
water	137:83	0:0	6	;
if	139:12	140:46	6	(p_spu_properties -> i_height > 250)
cond	139:16	139:45	7	p_spu_properties -> i_height > 250
water	139:16	0:0	8	p_spu_properties
op	139:32	0:0	8	->
water	139:34	0:0	8	i_height
op	139:43	0:0	8	>
water	139:45	0:0	8	250
stmts	140:16	140:46	7	
water	140:16	0:0	8	p_spu_data
op	140:26	0:0	8	->
water	140:28	0:0	8	b_auto_crop
op	140:40	0:0	8	=
water	140:42	0:0	8	true
water	140:46	0:0	8	;
water	141:12	0:0	6	i_index
op	141:20	0:0	6	+=
water	141:23	0:0	6	7
water	141:24	0:0	6	;
break	142:12	142:17	6	
label	143:8	143:32	6	case SPU_CMD_SET_OFFSETS :
if	144:12	148:12	6	(i_index + 5 > p_sys -> i_spu_size)
cond	144:16	144:37	7	i_index + 5 > p_sys -> i_spu_size
water	144:16	0:0	8	i_index
op	144:24	0:0	8	+
water	144:26	0:0	8	5
op	144:28	0:0	8	>
water	144:30	0:0	8	p_sys
op	144:35	0:0	8	->
water	144:37	0:0	8	i_spu_size
stmts	145:12	148:12	7	
water	145:12	0:0	8	{
call	146:16	146:58	8	msg_Err
arg	146:25	146:30	9	p_dec
water	146:25	0:0	10	p_dec
arg	146:32	146:58	9	"overflow in SPU command"
water	146:32	0:0	10	"overflow in SPU command"
water	146:59	0:0	8	;
return	147:16	147:35	8	VLC_EGENERIC
water	147:23	0:0	9	VLC_EGENERIC
water	148:12	0:0	8	}
water	149:12	0:0	6	b_cmd_offset
op	149:25	0:0	6	=
water	149:27	0:0	6	true
water	149:31	0:0	6	;
water	150:12	0:0	6	p_spu_data
op	150:22	0:0	6	->
water	150:24	0:0	6	pi_offset
op	150:33	0:0	6	[
water	150:34	0:0	6	0
op	150:35	0:0	6	]
op	150:37	0:0	6	=
call	150:39	150:71	6	GetWBE
arg	150:46	150:71	7	&p_sys->buffer[i_index+1]
op	150:46	0:0	8	&
water	150:47	0:0	8	p_sys
op	150:52	0:0	8	->
water	150:54	0:0	8	buffer
op	150:60	0:0	8	[
water	150:61	0:0	8	i_index
op	150:68	0:0	8	+
water	150:69	0:0	8	1
op	150:70	0:0	8	]
op	150:73	0:0	6	-
water	150:75	0:0	6	4
water	150:76	0:0	6	;
water	151:12	0:0	6	p_spu_data
op	151:22	0:0	6	->
water	151:24	0:0	6	pi_offset
op	151:33	0:0	6	[
water	151:34	0:0	6	1
op	151:35	0:0	6	]
op	151:37	0:0	6	=
call	151:39	151:71	6	GetWBE
arg	151:46	151:71	7	&p_sys->buffer[i_index+3]
op	151:46	0:0	8	&
water	151:47	0:0	8	p_sys
op	151:52	0:0	8	->
water	151:54	0:0	8	buffer
op	151:60	0:0	8	[
water	151:61	0:0	8	i_index
op	151:68	0:0	8	+
water	151:69	0:0	8	3
op	151:70	0:0	8	]
op	151:73	0:0	6	-
water	151:75	0:0	6	4
water	151:76	0:0	6	;
water	152:12	0:0	6	i_index
op	152:20	0:0	6	+=
water	152:23	0:0	6	5
water	152:24	0:0	6	;
break	153:12	153:17	6	
label	154:8	154:24	6	case SPU_CMD_END :
if	155:12	165:12	6	(b_cmd_offset)
cond	155:16	155:16	7	b_cmd_offset
water	155:16	0:0	8	b_cmd_offset
stmts	156:12	165:12	7	
water	156:12	0:0	8	{
water	160:16	0:0	8	p_spu_data
op	160:26	0:0	8	->
water	160:28	0:0	8	b_palette
op	160:38	0:0	8	=
water	160:40	0:0	8	spu_data_cmd
op	160:52	0:0	8	.
water	160:53	0:0	8	b_palette
water	160:62	0:0	8	;
if	161:16	162:98	8	(spu_data_cmd . b_palette)
cond	161:20	161:33	9	spu_data_cmd . b_palette
water	161:20	0:0	10	spu_data_cmd
op	161:32	0:0	10	.
water	161:33	0:0	10	b_palette
stmts	162:20	162:98	9	
call	162:20	162:97	10	memcpy
arg	162:28	162:46	11	p_spu_data->pi_yuv
water	162:28	0:0	12	p_spu_data
op	162:38	0:0	12	->
water	162:40	0:0	12	pi_yuv
arg	162:48	162:67	11	spu_data_cmd.pi_yuv
water	162:48	0:0	12	spu_data_cmd
op	162:60	0:0	12	.
water	162:61	0:0	12	pi_yuv
arg	162:69	162:97	11	sizeof(spu_data_cmd.pi_yuv)
op	162:69	0:0	12	sizeof
water	162:75	0:0	12	(
water	162:76	0:0	12	spu_data_cmd
op	162:88	0:0	12	.
water	162:89	0:0	12	pi_yuv
water	162:95	0:0	12	)
water	162:98	0:0	10	;
if	163:16	164:104	8	(b_cmd_alpha)
cond	163:20	163:20	9	b_cmd_alpha
water	163:20	0:0	10	b_cmd_alpha
stmts	164:20	164:104	9	
call	164:20	164:103	10	memcpy
arg	164:28	164:48	11	p_spu_data->pi_alpha
water	164:28	0:0	12	p_spu_data
op	164:38	0:0	12	->
water	164:40	0:0	12	pi_alpha
arg	164:50	164:71	11	spu_data_cmd.pi_alpha
water	164:50	0:0	12	spu_data_cmd
op	164:62	0:0	12	.
water	164:63	0:0	12	pi_alpha
arg	164:73	164:103	11	sizeof(spu_data_cmd.pi_alpha)
op	164:73	0:0	12	sizeof
water	164:79	0:0	12	(
water	164:80	0:0	12	spu_data_cmd
op	164:92	0:0	12	.
water	164:93	0:0	12	pi_alpha
water	164:101	0:0	12	)
water	164:104	0:0	10	;
water	165:12	0:0	8	}
water	166:12	0:0	6	i_index
op	166:20	0:0	6	+=
water	166:23	0:0	6	1
water	166:24	0:0	6	;
break	167:12	167:17	6	
label	168:8	168:15	6	default :
call	169:12	169:69	6	msg_Warn
arg	169:22	169:27	7	p_dec
water	169:22	0:0	8	p_dec
arg	169:29	169:57	7	"unknown SPU command 0x%.2x"
water	169:29	0:0	8	"unknown SPU command 0x%.2x"
arg	169:59	169:69	7	i_command
water	169:59	0:0	8	i_command
water	169:70	0:0	6	;
if	170:12	184:12	6	(i_index + 1 < i_next_seq)
cond	170:16	170:30	7	i_index + 1 < i_next_seq
water	170:16	0:0	8	i_index
op	170:24	0:0	8	+
water	170:26	0:0	8	1
op	170:28	0:0	8	<
water	170:30	0:0	8	i_next_seq
stmts	171:12	184:12	7	
water	171:12	0:0	8	{
if	173:17	177:17	8	(p_sys -> buffer [ i_next_seq - 1 ] == SPU_CMD_END)
cond	173:21	173:54	9	p_sys -> buffer [ i_next_seq - 1 ] == SPU_CMD_END
water	173:21	0:0	10	p_sys
op	173:26	0:0	10	->
water	173:28	0:0	10	buffer
op	173:34	0:0	10	[
water	173:35	0:0	10	i_next_seq
op	173:46	0:0	10	-
water	173:48	0:0	10	1
op	173:49	0:0	10	]
op	173:51	0:0	10	==
water	173:54	0:0	10	SPU_CMD_END
stmts	174:17	177:17	9	
water	174:17	0:0	10	{
water	176:21	0:0	10	i_index
op	176:29	0:0	10	=
water	176:31	0:0	10	i_next_seq
water	176:41	0:0	10	;
water	177:17	0:0	10	}
else	178:17	183:17	8
stmts	179:17	183:17	9	
water	179:17	0:0	10	{
call	181:21	181:74	10	msg_Warn
arg	181:31	181:36	11	p_dec
water	181:31	0:0	12	p_dec
arg	181:38	181:74	11	"cannot recover, dropping subtitle"
water	181:38	0:0	12	"cannot recover, dropping subtitle"
water	181:75	0:0	10	;
return	182:21	182:40	10	VLC_EGENERIC
water	182:28	0:0	11	VLC_EGENERIC
water	183:17	0:0	10	}
water	184:12	0:0	8	}
else	185:12	191:12	6
stmts	186:12	191:12	7	
water	186:12	0:0	8	{
water	189:16	0:0	8	i_command
op	189:26	0:0	8	=
water	189:28	0:0	8	SPU_CMD_END
water	189:39	0:0	8	;
water	190:16	0:0	8	i_index
op	190:23	0:0	8	++
water	190:25	0:0	8	;
water	191:12	0:0	8	}
water	192:8	0:0	6	}
if	194:8	195:17	4	(i_command == SPU_CMD_END && i_index != i_next_seq)
cond	194:12	194:51	5	i_command == SPU_CMD_END && i_index != i_next_seq
water	194:12	0:0	6	i_command
op	194:22	0:0	6	==
water	194:25	0:0	6	SPU_CMD_END
op	194:37	0:0	6	&&
water	194:40	0:0	6	i_index
op	194:48	0:0	6	!=
water	194:51	0:0	6	i_next_seq
stmts	195:12	195:17	5	
break	195:12	195:17	6	
water	196:4	0:0	4	}
if	198:4	203:4	2	(i_next_seq != i_cur_seq)
cond	198:8	198:22	3	i_next_seq != i_cur_seq
water	198:8	0:0	4	i_next_seq
op	198:19	0:0	4	!=
water	198:22	0:0	4	i_cur_seq
stmts	199:4	203:4	3	
water	199:4	0:0	4	{
call	200:8	201:39	4	msg_Err
arg	200:17	200:22	5	p_dec
water	200:17	0:0	6	p_dec
arg	200:24	200:59	5	"index mismatch (0x%.4x != 0x%.4x)"
water	200:24	0:0	6	"index mismatch (0x%.4x != 0x%.4x)"
arg	201:17	201:27	5	i_next_seq
water	201:17	0:0	6	i_next_seq
arg	201:29	201:39	5	i_cur_seq
water	201:29	0:0	6	i_cur_seq
water	201:40	0:0	4	;
return	202:8	202:27	4	VLC_EGENERIC
water	202:15	0:0	5	VLC_EGENERIC
water	203:4	0:0	4	}
if	204:4	209:4	2	(i_index > p_sys -> i_spu_size)
cond	204:8	204:25	3	i_index > p_sys -> i_spu_size
water	204:8	0:0	4	i_index
op	204:16	0:0	4	>
water	204:18	0:0	4	p_sys
op	204:23	0:0	4	->
water	204:25	0:0	4	i_spu_size
stmts	205:4	209:4	3	
water	205:4	0:0	4	{
call	206:8	207:44	4	msg_Err
arg	206:17	206:22	5	p_dec
water	206:17	0:0	6	p_dec
arg	206:24	206:66	5	"uh-oh, we went too far (0x%.4x > 0x%.4x)"
water	206:24	0:0	6	"uh-oh, we went too far (0x%.4x > 0x%.4x)"
arg	207:17	207:24	5	i_index
water	207:17	0:0	6	i_index
arg	207:26	207:44	5	p_sys->i_spu_size
water	207:26	0:0	6	p_sys
op	207:31	0:0	6	->
water	207:33	0:0	6	i_spu_size
water	207:45	0:0	4	;
return	208:8	208:27	4	VLC_EGENERIC
water	208:15	0:0	5	VLC_EGENERIC
water	209:4	0:0	4	}
decl	210:4	210:43	2	const int	i_spu_size
op	210:25	0:0	2	=
water	210:27	0:0	2	p_sys
op	210:32	0:0	2	->
water	210:34	0:0	2	i_spu
op	210:40	0:0	2	-
water	210:42	0:0	2	4
if	211:4	216:4	2	(p_spu_data -> pi_offset [ 0 ] < 0 || p_spu_data -> pi_offset [ 0 ] >= i_spu_size || p_spu_data -> pi_offset [ 1 ] < 0 || p_spu_data -> pi_offset [ 1 ] >= i_spu_size)
cond	211:8	212:68	3	p_spu_data -> pi_offset [ 0 ] < 0 || p_spu_data -> pi_offset [ 0 ] >= i_spu_size || p_spu_data -> pi_offset [ 1 ] < 0 || p_spu_data -> pi_offset [ 1 ] >= i_spu_size
water	211:8	0:0	4	p_spu_data
op	211:18	0:0	4	->
water	211:20	0:0	4	pi_offset
op	211:29	0:0	4	[
water	211:30	0:0	4	0
op	211:31	0:0	4	]
op	211:33	0:0	4	<
water	211:35	0:0	4	0
op	211:37	0:0	4	||
water	211:40	0:0	4	p_spu_data
op	211:50	0:0	4	->
water	211:52	0:0	4	pi_offset
op	211:61	0:0	4	[
water	211:62	0:0	4	0
op	211:63	0:0	4	]
op	211:65	0:0	4	>=
water	211:68	0:0	4	i_spu_size
op	211:79	0:0	4	||
water	212:8	0:0	4	p_spu_data
op	212:18	0:0	4	->
water	212:20	0:0	4	pi_offset
op	212:29	0:0	4	[
water	212:30	0:0	4	1
op	212:31	0:0	4	]
op	212:33	0:0	4	<
water	212:35	0:0	4	0
op	212:37	0:0	4	||
water	212:40	0:0	4	p_spu_data
op	212:50	0:0	4	->
water	212:52	0:0	4	pi_offset
op	212:61	0:0	4	[
water	212:62	0:0	4	1
op	212:63	0:0	4	]
op	212:65	0:0	4	>=
water	212:68	0:0	4	i_spu_size
stmts	213:4	216:4	3	
water	213:4	0:0	4	{
call	214:8	214:48	4	msg_Err
arg	214:17	214:22	5	p_dec
water	214:17	0:0	6	p_dec
arg	214:24	214:48	5	"invalid offset values"
water	214:24	0:0	6	"invalid offset values"
water	214:49	0:0	4	;
return	215:8	215:27	4	VLC_EGENERIC
water	215:15	0:0	5	VLC_EGENERIC
water	216:4	0:0	4	}
if	217:4	221:4	2	(! p_spu -> i_start)
cond	217:8	217:16	3	! p_spu -> i_start
op	217:8	0:0	4	!
water	217:9	0:0	4	p_spu
op	217:14	0:0	4	->
water	217:16	0:0	4	i_start
stmts	218:4	221:4	3	
water	218:4	0:0	4	{
call	219:8	219:53	4	msg_Err
arg	219:17	219:22	5	p_dec
water	219:17	0:0	6	p_dec
arg	219:24	219:53	5	"no `start display' command"
water	219:24	0:0	6	"no `start display' command"
water	219:54	0:0	4	;
return	220:8	220:27	4	VLC_EGENERIC
water	220:15	0:0	5	VLC_EGENERIC
water	221:4	0:0	4	}
if	222:4	227:4	2	(p_spu -> i_stop <= p_spu -> i_start && ! p_spu -> b_ephemer)
cond	222:8	222:51	3	p_spu -> i_stop <= p_spu -> i_start && ! p_spu -> b_ephemer
water	222:8	0:0	4	p_spu
op	222:13	0:0	4	->
water	222:15	0:0	4	i_stop
op	222:22	0:0	4	<=
water	222:25	0:0	4	p_spu
op	222:30	0:0	4	->
water	222:32	0:0	4	i_start
op	222:40	0:0	4	&&
op	222:43	0:0	4	!
water	222:44	0:0	4	p_spu
op	222:49	0:0	4	->
water	222:51	0:0	4	b_ephemer
stmts	223:4	227:4	3	
water	223:4	0:0	4	{
water	225:8	0:0	4	p_spu
op	225:13	0:0	4	->
water	225:15	0:0	4	i_stop
op	225:22	0:0	4	=
water	225:24	0:0	4	p_spu
op	225:29	0:0	4	->
water	225:31	0:0	4	i_start
op	225:39	0:0	4	+
water	225:41	0:0	4	(
water	225:42	0:0	4	mtime_t
water	225:49	0:0	4	)
water	225:50	0:0	4	500
op	225:54	0:0	4	*
water	225:56	0:0	4	11000
water	225:61	0:0	4	;
water	226:8	0:0	4	p_spu
op	226:13	0:0	4	->
water	226:15	0:0	4	b_ephemer
op	226:25	0:0	4	=
water	226:27	0:0	4	true
water	226:31	0:0	4	;
water	227:4	0:0	4	}
if	229:4	236:4	2	(p_sys -> i_spu_size > i_index + 1)
cond	229:8	229:38	3	p_sys -> i_spu_size > i_index + 1
water	229:8	0:0	4	p_sys
op	229:13	0:0	4	->
water	229:15	0:0	4	i_spu_size
op	229:26	0:0	4	>
water	229:28	0:0	4	i_index
op	229:36	0:0	4	+
water	229:38	0:0	4	1
stmts	230:4	236:4	3	
water	230:4	0:0	4	{
call	234:8	235:46	4	msg_Warn
arg	234:18	234:23	5	p_dec
water	234:18	0:0	6	p_dec
arg	234:25	234:74	5	"%i padding bytes, we usually get 0 or 1 of them"
water	234:25	0:0	6	"%i padding bytes, we usually get 0 or 1 of them"
arg	235:18	235:46	5	p_sys->i_spu_size-i_index
water	235:18	0:0	6	p_sys
op	235:23	0:0	6	->
water	235:25	0:0	6	i_spu_size
op	235:36	0:0	6	-
water	235:38	0:0	6	i_index
water	235:47	0:0	4	;
water	236:4	0:0	4	}
return	238:4	238:22	2	VLC_SUCCESS
water	238:11	0:0	3	VLC_SUCCESS
