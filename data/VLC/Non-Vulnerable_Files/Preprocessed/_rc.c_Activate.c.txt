func	2:0	125:0	0	static int	Activate
params	2:19	0:0	1	
param	2:21	2:42	2	vlc_object_t *	p_this
stmnts	0:0	124:22	1	
decl	5:4	5:50	2	intf_thread_t	*p_intf
op	5:26	0:0	2	=
water	5:28	0:0	2	(
water	5:29	0:0	2	intf_thread_t
op	5:42	0:0	2	*
water	5:43	0:0	2	)
water	5:44	0:0	2	p_this
decl	6:4	6:45	2	playlist_t	*p_playlist
op	6:27	0:0	2	=
call	6:29	6:44	3	pl_Get
arg	6:37	6:44	4	p_intf
water	6:37	0:0	5	p_intf
decl	7:4	7:41	2	char	*psz_host
water	7:18	0:0	2	,
decl	7:4	7:41	2	char	*psz_unix_path
op	7:35	0:0	2	=
water	7:37	0:0	2	NULL
decl	8:4	8:26	2	int	*pi_socket
op	8:20	0:0	2	=
water	8:22	0:0	2	NULL
if	12:4	16:4	2	(!var_InheritBool (p_intf ,"rc-fake-tty" ) && !isatty (0 ))
cond	12:8	12:64	3	!var_InheritBool (p_intf ,"rc-fake-tty" ) && !isatty (0 )
op	12:8	0:0	4	!
call	12:9	12:48	4	var_InheritBool
arg	12:26	12:32	5	p_intf
water	12:26	0:0	6	p_intf
arg	12:34	12:48	5	"rc-fake-tty"
water	12:34	0:0	6	"rc-fake-tty"
op	12:50	0:0	4	&&
op	12:53	0:0	4	!
call	12:54	12:64	4	isatty
arg	12:62	12:64	5	0
water	12:62	0:0	6	0
stmts	13:4	16:4	3	
water	13:4	0:0	4	{
call	14:8	14:46	4	msg_Warn
arg	14:18	14:24	5	p_intf
water	14:18	0:0	6	p_intf
arg	14:26	14:46	5	"fd 0 is not a TTY"
water	14:26	0:0	6	"fd 0 is not a TTY"
water	14:47	0:0	4	;
return	15:8	15:27	4	VLC_EGENERIC
water	15:15	0:0	5	VLC_EGENERIC
water	16:4	0:0	4	}
water	18:4	0:0	2	psz_unix_path
op	18:18	0:0	2	=
call	18:20	18:57	2	var_InheritString
arg	18:39	18:45	3	p_intf
water	18:39	0:0	4	p_intf
arg	18:47	18:57	3	"rc-unix"
water	18:47	0:0	4	"rc-unix"
water	18:58	0:0	2	;
if	19:4	74:4	2	(psz_unix_path)
cond	19:8	19:8	3	psz_unix_path
water	19:8	0:0	4	psz_unix_path
stmts	20:4	74:4	3	
water	20:4	0:0	4	{
decl	21:8	21:20	4	int	i_socket
call	23:8	23:71	4	msg_Warn
arg	23:18	23:24	5	p_intf
water	23:18	0:0	6	p_intf
arg	23:26	23:71	5	"your OS doesn't support filesystem sockets"
water	23:26	0:0	6	"your OS doesn't support filesystem sockets"
water	23:72	0:0	4	;
call	24:8	24:28	4	free
arg	24:14	24:28	5	psz_unix_path
water	24:14	0:0	6	psz_unix_path
water	24:29	0:0	4	;
return	25:8	25:27	4	VLC_EGENERIC
water	25:15	0:0	5	VLC_EGENERIC
decl	27:8	27:31	4	struct sockaddr_un	addr
call	28:8	28:53	4	memset
arg	28:16	28:21	5	&addr
op	28:16	0:0	6	&
water	28:17	0:0	6	addr
arg	28:23	28:24	5	0
water	28:23	0:0	6	0
arg	28:26	28:53	5	sizeof(structsockaddr_un)
op	28:26	0:0	6	sizeof
water	28:32	0:0	6	(
water	28:33	0:0	6	struct
water	28:40	0:0	6	sockaddr_un
water	28:51	0:0	6	)
water	28:54	0:0	4	;
call	29:8	29:46	4	msg_Dbg
arg	29:17	29:23	5	p_intf
water	29:17	0:0	6	p_intf
arg	29:25	29:46	5	"trying UNIX socket"
water	29:25	0:0	6	"trying UNIX socket"
water	29:47	0:0	4	;
if	30:8	35:8	4	(( i_socket =vlc_socket (PF_LOCAL ,SOCK_STREAM ,0 ,false ) ) < 0)
cond	30:12	30:74	5	( i_socket =vlc_socket (PF_LOCAL ,SOCK_STREAM ,0 ,false ) ) < 0
water	30:12	0:0	6	(
water	30:13	0:0	6	i_socket
op	30:22	0:0	6	=
call	30:24	30:68	6	vlc_socket
arg	30:36	30:44	7	PF_LOCAL
water	30:36	0:0	8	PF_LOCAL
arg	30:46	30:57	7	SOCK_STREAM
water	30:46	0:0	8	SOCK_STREAM
arg	30:59	30:60	7	0
water	30:59	0:0	8	0
arg	30:62	30:68	7	false
water	30:62	0:0	8	false
water	30:70	0:0	6	)
op	30:72	0:0	6	<
water	30:74	0:0	6	0
stmts	31:8	35:8	5	
water	31:8	0:0	6	{
call	32:12	32:77	6	msg_Warn
arg	32:22	32:28	7	p_intf
water	32:22	0:0	8	p_intf
arg	32:30	32:53	7	"can't open socket: %s"
water	32:30	0:0	8	"can't open socket: %s"
arg	32:55	32:77	7	vlc_strerror_c(errno)
call	32:55	32:75	8	vlc_strerror_c
arg	32:70	32:75	9	errno
water	32:70	0:0	10	errno
water	32:78	0:0	6	;
call	33:12	33:32	6	free
arg	33:18	33:32	7	psz_unix_path
water	33:18	0:0	8	psz_unix_path
water	33:33	0:0	6	;
return	34:12	34:31	6	VLC_EGENERIC
water	34:19	0:0	7	VLC_EGENERIC
water	35:8	0:0	6	}
water	36:8	0:0	4	addr
op	36:12	0:0	4	.
water	36:13	0:0	4	sun_family
op	36:24	0:0	4	=
water	36:26	0:0	4	AF_LOCAL
water	36:34	0:0	4	;
call	37:8	37:71	4	strncpy
arg	37:17	37:30	5	addr.sun_path
water	37:17	0:0	6	addr
op	37:21	0:0	6	.
water	37:22	0:0	6	sun_path
arg	37:32	37:45	5	psz_unix_path
water	37:32	0:0	6	psz_unix_path
arg	37:47	37:71	5	sizeof(addr.sun_path)
op	37:47	0:0	6	sizeof
water	37:53	0:0	6	(
water	37:55	0:0	6	addr
op	37:59	0:0	6	.
water	37:60	0:0	6	sun_path
water	37:69	0:0	6	)
water	37:72	0:0	4	;
water	38:8	0:0	4	addr
op	38:12	0:0	4	.
water	38:13	0:0	4	sun_path
op	38:21	0:0	4	[
op	38:22	0:0	4	sizeof
water	38:28	0:0	4	(
water	38:30	0:0	4	addr
op	38:34	0:0	4	.
water	38:35	0:0	4	sun_path
water	38:44	0:0	4	)
op	38:46	0:0	4	-
water	38:48	0:0	4	1
op	38:49	0:0	4	]
op	38:51	0:0	4	=
water	38:53	0:0	4	'\0'
water	38:57	0:0	4	;
if	39:8	54:8	4	(bind (i_socket ,( struct sockaddr * ) & addr ,sizeof ( addr ) ) && ( errno == EADDRINUSE ) &&connect (i_socket ,( struct sockaddr * ) & addr ,sizeof ( addr ) ) && ( errno == ECONNREFUSED ))
cond	39:12	42:34	5	bind (i_socket ,( struct sockaddr * ) & addr ,sizeof ( addr ) ) && ( errno == EADDRINUSE ) &&connect (i_socket ,( struct sockaddr * ) & addr ,sizeof ( addr ) ) && ( errno == ECONNREFUSED )
call	39:12	39:67	6	bind
arg	39:18	39:26	7	i_socket
water	39:18	0:0	8	i_socket
arg	39:28	39:52	7	(structsockaddr*)&addr
water	39:28	0:0	8	(
water	39:29	0:0	8	struct
water	39:36	0:0	8	sockaddr
op	39:45	0:0	8	*
water	39:46	0:0	8	)
op	39:47	0:0	8	&
water	39:48	0:0	8	addr
arg	39:54	39:67	7	sizeof(addr)
op	39:54	0:0	8	sizeof
water	39:61	0:0	8	(
water	39:62	0:0	8	addr
water	39:66	0:0	8	)
op	40:9	0:0	6	&&
water	40:12	0:0	6	(
water	40:13	0:0	6	errno
op	40:19	0:0	6	==
water	40:22	0:0	6	EADDRINUSE
water	40:32	0:0	6	)
op	41:9	0:0	6	&&
call	41:12	41:70	6	connect
arg	41:21	41:29	7	i_socket
water	41:21	0:0	8	i_socket
arg	41:31	41:55	7	(structsockaddr*)&addr
water	41:31	0:0	8	(
water	41:32	0:0	8	struct
water	41:39	0:0	8	sockaddr
op	41:48	0:0	8	*
water	41:49	0:0	8	)
op	41:50	0:0	8	&
water	41:51	0:0	8	addr
arg	41:57	41:70	7	sizeof(addr)
op	41:57	0:0	8	sizeof
water	41:64	0:0	8	(
water	41:65	0:0	8	addr
water	41:69	0:0	8	)
op	42:9	0:0	6	&&
water	42:12	0:0	6	(
water	42:13	0:0	6	errno
op	42:19	0:0	6	==
water	42:22	0:0	6	ECONNREFUSED
water	42:34	0:0	6	)
stmts	43:8	54:8	5	
water	43:8	0:0	6	{
call	44:12	44:76	6	msg_Info
arg	44:22	44:28	7	p_intf
water	44:22	0:0	8	p_intf
arg	44:30	44:61	7	"Removing dead UNIX socket: %s"
water	44:30	0:0	8	"Removing dead UNIX socket: %s"
arg	44:63	44:76	7	psz_unix_path
water	44:63	0:0	8	psz_unix_path
water	44:77	0:0	6	;
call	45:12	45:33	6	unlink
arg	45:20	45:33	7	psz_unix_path
water	45:20	0:0	8	psz_unix_path
water	45:34	0:0	6	;
if	46:12	53:12	6	(bind (i_socket ,( struct sockaddr * ) & addr ,sizeof ( addr ) ))
cond	46:16	46:71	7	bind (i_socket ,( struct sockaddr * ) & addr ,sizeof ( addr ) )
call	46:16	46:71	8	bind
arg	46:22	46:30	9	i_socket
water	46:22	0:0	10	i_socket
arg	46:32	46:56	9	(structsockaddr*)&addr
water	46:32	0:0	10	(
water	46:33	0:0	10	struct
water	46:40	0:0	10	sockaddr
op	46:49	0:0	10	*
water	46:50	0:0	10	)
op	46:51	0:0	10	&
water	46:52	0:0	10	addr
arg	46:58	46:71	9	sizeof(addr)
op	46:58	0:0	10	sizeof
water	46:65	0:0	10	(
water	46:66	0:0	10	addr
water	46:70	0:0	10	)
stmts	47:12	53:12	7	
water	47:12	0:0	8	{
call	48:16	49:61	8	msg_Err
arg	48:25	48:31	9	p_intf
water	48:25	0:0	10	p_intf
arg	48:33	48:68	9	"cannot bind UNIX socket at %s: %s"
water	48:33	0:0	10	"cannot bind UNIX socket at %s: %s"
arg	49:25	49:38	9	psz_unix_path
water	49:25	0:0	10	psz_unix_path
arg	49:40	49:61	9	vlc_strerror_c(errno)
call	49:40	49:60	10	vlc_strerror_c
arg	49:55	49:60	11	errno
water	49:55	0:0	12	errno
water	49:62	0:0	8	;
call	50:16	50:35	8	free
arg	50:22	50:35	9	psz_unix_path
water	50:22	0:0	10	psz_unix_path
water	50:36	0:0	8	;
call	51:16	51:35	8	net_Close
arg	51:27	51:35	9	i_socket
water	51:27	0:0	10	i_socket
water	51:36	0:0	8	;
return	52:16	52:35	8	VLC_EGENERIC
water	52:23	0:0	9	VLC_EGENERIC
water	53:12	0:0	8	}
water	54:8	0:0	6	}
if	55:8	62:8	4	(listen (i_socket ,1 ))
cond	55:12	55:32	5	listen (i_socket ,1 )
call	55:12	55:32	6	listen
arg	55:20	55:28	7	i_socket
water	55:20	0:0	8	i_socket
arg	55:30	55:32	7	1
water	55:30	0:0	8	1
stmts	56:8	62:8	5	
water	56:8	0:0	6	{
call	57:12	58:43	6	msg_Warn
arg	57:22	57:28	7	p_intf
water	57:22	0:0	8	p_intf
arg	57:30	57:58	7	"can't listen on socket: %s"
water	57:30	0:0	8	"can't listen on socket: %s"
arg	58:22	58:43	7	vlc_strerror_c(errno)
call	58:22	58:42	8	vlc_strerror_c
arg	58:37	58:42	9	errno
water	58:37	0:0	10	errno
water	58:44	0:0	6	;
call	59:12	59:32	6	free
arg	59:18	59:32	7	psz_unix_path
water	59:18	0:0	8	psz_unix_path
water	59:33	0:0	6	;
call	60:12	60:32	6	net_Close
arg	60:23	60:32	7	i_socket
water	60:23	0:0	8	i_socket
water	60:33	0:0	6	;
return	61:12	61:31	6	VLC_EGENERIC
water	61:19	0:0	7	VLC_EGENERIC
water	62:8	0:0	6	}
water	64:8	0:0	4	pi_socket
op	64:18	0:0	4	=
call	64:20	64:45	4	calloc
arg	64:28	64:29	5	2
water	64:28	0:0	6	2
arg	64:31	64:45	5	sizeof(int)
op	64:31	0:0	6	sizeof
water	64:37	0:0	6	(
water	64:39	0:0	6	int
water	64:43	0:0	6	)
water	64:46	0:0	4	;
if	65:8	70:8	4	(pi_socket == NULL)
cond	65:12	65:25	5	pi_socket == NULL
water	65:12	0:0	6	pi_socket
op	65:22	0:0	6	==
water	65:25	0:0	6	NULL
stmts	66:8	70:8	5	
water	66:8	0:0	6	{
call	67:12	67:32	6	free
arg	67:18	67:32	7	psz_unix_path
water	67:18	0:0	8	psz_unix_path
water	67:33	0:0	6	;
call	68:12	68:32	6	net_Close
arg	68:23	68:32	7	i_socket
water	68:23	0:0	8	i_socket
water	68:33	0:0	6	;
return	69:12	69:29	6	VLC_ENOMEM
water	69:19	0:0	7	VLC_ENOMEM
water	70:8	0:0	6	}
water	71:8	0:0	4	pi_socket
op	71:17	0:0	4	[
water	71:18	0:0	4	0
op	71:19	0:0	4	]
op	71:21	0:0	4	=
water	71:23	0:0	4	i_socket
water	71:31	0:0	4	;
water	72:8	0:0	4	pi_socket
op	72:17	0:0	4	[
water	72:18	0:0	4	1
op	72:19	0:0	4	]
op	72:21	0:0	4	=
op	72:23	0:0	4	-
water	72:24	0:0	4	1
water	72:25	0:0	4	;
water	74:4	0:0	4	}
if	76:4	93:4	2	(( pi_socket == NULL ) && ( psz_host =var_InheritString (p_intf ,"rc-host" ) ) != NULL)
cond	76:8	77:65	3	( pi_socket == NULL ) && ( psz_host =var_InheritString (p_intf ,"rc-host" ) ) != NULL
water	76:8	0:0	4	(
water	76:10	0:0	4	pi_socket
op	76:20	0:0	4	==
water	76:23	0:0	4	NULL
water	76:28	0:0	4	)
op	76:30	0:0	4	&&
water	77:8	0:0	4	(
water	77:10	0:0	4	psz_host
op	77:19	0:0	4	=
call	77:21	77:58	4	var_InheritString
arg	77:40	77:46	5	p_intf
water	77:40	0:0	6	p_intf
arg	77:48	77:58	5	"rc-host"
water	77:48	0:0	6	"rc-host"
water	77:60	0:0	4	)
op	77:62	0:0	4	!=
water	77:65	0:0	4	NULL
stmts	78:4	93:4	3	
water	78:4	0:0	4	{
decl	79:8	79:21	4	vlc_url_t	url
call	80:8	80:40	4	vlc_UrlParse
arg	80:22	80:26	5	&url
op	80:22	0:0	6	&
water	80:23	0:0	6	url
arg	80:28	80:36	5	psz_host
water	80:28	0:0	6	psz_host
arg	80:38	80:40	5	0
water	80:38	0:0	6	0
water	80:41	0:0	4	;
call	81:8	81:72	4	msg_Dbg
arg	81:17	81:23	5	p_intf
water	81:17	0:0	6	p_intf
arg	81:25	81:45	5	"base: %s, port: %d"
water	81:25	0:0	6	"base: %s, port: %d"
arg	81:47	81:59	5	url.psz_host
water	81:47	0:0	6	url
op	81:50	0:0	6	.
water	81:51	0:0	6	psz_host
arg	81:61	81:72	5	url.i_port
water	81:61	0:0	6	url
op	81:64	0:0	6	.
water	81:65	0:0	6	i_port
water	81:73	0:0	4	;
water	82:8	0:0	4	pi_socket
op	82:18	0:0	4	=
call	82:20	82:66	4	net_ListenTCP
arg	82:34	82:40	5	p_this
water	82:34	0:0	6	p_this
arg	82:42	82:54	5	url.psz_host
water	82:42	0:0	6	url
op	82:45	0:0	6	.
water	82:46	0:0	6	psz_host
arg	82:56	82:66	5	url.i_port
water	82:56	0:0	6	url
op	82:59	0:0	6	.
water	82:60	0:0	6	i_port
water	82:67	0:0	4	;
if	83:8	90:8	4	(pi_socket == NULL)
cond	83:12	83:25	5	pi_socket == NULL
water	83:12	0:0	6	pi_socket
op	83:22	0:0	6	==
water	83:25	0:0	6	NULL
stmts	84:8	90:8	5	
water	84:8	0:0	6	{
call	85:12	86:47	6	msg_Warn
arg	85:22	85:28	7	p_intf
water	85:22	0:0	8	p_intf
arg	85:30	85:58	7	"can't listen to %s port %i"
water	85:30	0:0	8	"can't listen to %s port %i"
arg	86:22	86:34	7	url.psz_host
water	86:22	0:0	8	url
op	86:25	0:0	8	.
water	86:26	0:0	8	psz_host
arg	86:36	86:47	7	url.i_port
water	86:36	0:0	8	url
op	86:39	0:0	8	.
water	86:40	0:0	8	i_port
water	86:48	0:0	6	;
call	87:12	87:31	6	vlc_UrlClean
arg	87:26	87:31	7	&url
op	87:26	0:0	8	&
water	87:27	0:0	8	url
water	87:32	0:0	6	;
call	88:12	88:27	6	free
arg	88:18	88:27	7	psz_host
water	88:18	0:0	8	psz_host
water	88:28	0:0	6	;
return	89:12	89:31	6	VLC_EGENERIC
water	89:19	0:0	7	VLC_EGENERIC
water	90:8	0:0	6	}
call	91:8	91:27	4	vlc_UrlClean
arg	91:22	91:27	5	&url
op	91:22	0:0	6	&
water	91:23	0:0	6	url
water	91:28	0:0	4	;
call	92:8	92:23	4	free
arg	92:14	92:23	5	psz_host
water	92:14	0:0	6	psz_host
water	92:24	0:0	4	;
water	93:4	0:0	4	}
decl	94:4	94:50	2	intf_sys_t	*p_sys
op	94:22	0:0	2	=
call	94:24	94:49	3	malloc
arg	94:32	94:49	4	sizeof(*p_sys)
op	94:32	0:0	5	sizeof
water	94:38	0:0	5	(
op	94:40	0:0	5	*
water	94:41	0:0	5	p_sys
water	94:47	0:0	5	)
if	95:4	100:4	2	(unlikely (p_sys == NULL ))
cond	95:8	95:30	3	unlikely (p_sys == NULL )
call	95:8	95:30	4	unlikely
arg	95:17	95:30	5	p_sys==NULL
water	95:17	0:0	6	p_sys
op	95:23	0:0	6	==
water	95:26	0:0	6	NULL
stmts	96:4	100:4	3	
water	96:4	0:0	4	{
call	97:8	97:35	4	net_ListenClose
arg	97:25	97:35	5	pi_socket
water	97:25	0:0	6	pi_socket
water	97:36	0:0	4	;
call	98:8	98:28	4	free
arg	98:14	98:28	5	psz_unix_path
water	98:14	0:0	6	psz_unix_path
water	98:29	0:0	4	;
return	99:8	99:25	4	VLC_ENOMEM
water	99:15	0:0	5	VLC_ENOMEM
water	100:4	0:0	4	}
water	101:4	0:0	2	p_intf
op	101:10	0:0	2	->
water	101:12	0:0	2	p_sys
op	101:18	0:0	2	=
water	101:20	0:0	2	p_sys
water	101:25	0:0	2	;
water	102:4	0:0	2	p_sys
op	102:9	0:0	2	->
water	102:11	0:0	2	pi_socket_listen
op	102:28	0:0	2	=
water	102:30	0:0	2	pi_socket
water	102:39	0:0	2	;
water	103:4	0:0	2	p_sys
op	103:9	0:0	2	->
water	103:11	0:0	2	i_socket
op	103:20	0:0	2	=
op	103:22	0:0	2	-
water	103:23	0:0	2	1
water	103:24	0:0	2	;
water	104:4	0:0	2	p_sys
op	104:9	0:0	2	->
water	104:11	0:0	2	psz_unix_path
op	104:25	0:0	2	=
water	104:27	0:0	2	psz_unix_path
water	104:40	0:0	2	;
call	105:4	105:40	2	vlc_mutex_init
arg	105:20	105:40	3	&p_sys->status_lock
op	105:20	0:0	4	&
water	105:21	0:0	4	p_sys
op	105:26	0:0	4	->
water	105:28	0:0	4	status_lock
water	105:41	0:0	2	;
water	106:4	0:0	2	p_sys
op	106:9	0:0	2	->
water	106:11	0:0	2	i_last_state
op	106:24	0:0	2	=
water	106:26	0:0	2	PLAYLIST_STOPPED
water	106:42	0:0	2	;
water	107:4	0:0	2	p_sys
op	107:9	0:0	2	->
water	107:11	0:0	2	b_input_buffering
op	107:29	0:0	2	=
water	107:31	0:0	2	false
water	107:36	0:0	2	;
water	108:4	0:0	2	p_sys
op	108:9	0:0	2	->
water	108:11	0:0	2	p_playlist
op	108:22	0:0	2	=
water	108:24	0:0	2	p_playlist
water	108:34	0:0	2	;
water	109:4	0:0	2	p_sys
op	109:9	0:0	2	->
water	109:11	0:0	2	p_input
op	109:19	0:0	2	=
water	109:21	0:0	2	NULL
water	109:25	0:0	2	;
call	111:4	111:45	2	setvbuf
arg	111:13	111:19	3	stdout
water	111:13	0:0	4	stdout
arg	111:21	111:33	3	(char*)NULL
water	111:21	0:0	4	(
water	111:22	0:0	4	char
op	111:27	0:0	4	*
water	111:28	0:0	4	)
water	111:29	0:0	4	NULL
arg	111:35	111:41	3	_IOLBF
water	111:35	0:0	4	_IOLBF
arg	111:43	111:45	3	0
water	111:43	0:0	4	0
water	111:46	0:0	2	;
water	113:4	0:0	2	p_sys
op	113:9	0:0	2	->
water	113:11	0:0	2	b_quiet
op	113:19	0:0	2	=
call	113:21	113:57	2	var_InheritBool
arg	113:38	113:44	3	p_intf
water	113:38	0:0	4	p_intf
arg	113:46	113:57	3	"rc-quiet"
water	113:46	0:0	4	"rc-quiet"
water	113:58	0:0	2	;
if	114:4	118:4	2	(! p_sys -> b_quiet)
cond	114:8	114:16	3	! p_sys -> b_quiet
op	114:8	0:0	4	!
water	114:9	0:0	4	p_sys
op	114:14	0:0	4	->
water	114:16	0:0	4	b_quiet
stmts	116:4	118:4	3	
water	116:4	0:0	4	{
water	117:8	0:0	4	CONSOLE_INTRO_MSG
water	117:25	0:0	4	;
water	118:4	0:0	4	}
if	119:4	120:15	2	(vlc_clone (& p_sys -> thread ,Run ,p_intf ,VLC_THREAD_PRIORITY_LOW ))
cond	119:8	119:72	3	vlc_clone (& p_sys -> thread ,Run ,p_intf ,VLC_THREAD_PRIORITY_LOW )
call	119:8	119:72	4	vlc_clone
arg	119:19	119:33	5	&p_sys->thread
op	119:19	0:0	6	&
water	119:20	0:0	6	p_sys
op	119:25	0:0	6	->
water	119:27	0:0	6	thread
arg	119:35	119:38	5	Run
water	119:35	0:0	6	Run
arg	119:40	119:46	5	p_intf
water	119:40	0:0	6	p_intf
arg	119:48	119:72	5	VLC_THREAD_PRIORITY_LOW
water	119:48	0:0	6	VLC_THREAD_PRIORITY_LOW
stmts	120:8	120:15	3	
call	120:8	120:14	4	abort
water	120:15	0:0	4	;
call	121:4	121:83	2	msg_rc
arg	121:12	121:16	3	"%s"
water	121:12	0:0	4	"%s"
arg	121:18	121:83	3	_("Remote control interface initialized. Type `help' for help.")
call	121:18	121:81	4	_
arg	121:20	121:81	5	"Remote control interface initialized. Type `help' for help."
water	121:20	0:0	6	"Remote control interface initialized. Type `help' for help."
water	121:84	0:0	2	;
call	123:4	123:72	2	var_AddCallback
arg	123:21	123:38	3	p_sys->p_playlist
water	123:21	0:0	4	p_sys
op	123:26	0:0	4	->
water	123:28	0:0	4	p_playlist
arg	123:40	123:48	3	"volume"
water	123:40	0:0	4	"volume"
arg	123:50	123:63	3	VolumeChanged
water	123:50	0:0	4	VolumeChanged
arg	123:65	123:72	3	p_intf
water	123:65	0:0	4	p_intf
water	123:73	0:0	2	;
return	124:4	124:22	2	VLC_SUCCESS
water	124:11	0:0	3	VLC_SUCCESS
