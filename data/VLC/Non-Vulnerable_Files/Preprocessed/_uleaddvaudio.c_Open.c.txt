func	2:0	34:0	0	static int	Open
params	2:15	0:0	1	
param	2:16	2:36	2	vlc_object_t *	object
stmnts	0:0	33:22	1	
decl	4:4	4:39	2	decoder_t	*dec
op	4:19	0:0	2	=
water	4:21	0:0	2	(
water	4:22	0:0	2	decoder_t
op	4:31	0:0	2	*
water	4:32	0:0	2	)
water	4:33	0:0	2	object
if	5:4	7:27	2	(dec -> fmt_in . i_codec != VLC_CODEC_ULEAD_DV_AUDIO_NTSC && dec -> fmt_in . i_codec != VLC_CODEC_ULEAD_DV_AUDIO_PAL)
cond	5:8	6:31	3	dec -> fmt_in . i_codec != VLC_CODEC_ULEAD_DV_AUDIO_NTSC && dec -> fmt_in . i_codec != VLC_CODEC_ULEAD_DV_AUDIO_PAL
water	5:8	0:0	4	dec
op	5:11	0:0	4	->
water	5:13	0:0	4	fmt_in
op	5:19	0:0	4	.
water	5:20	0:0	4	i_codec
op	5:28	0:0	4	!=
water	5:31	0:0	4	VLC_CODEC_ULEAD_DV_AUDIO_NTSC
op	5:61	0:0	4	&&
water	6:8	0:0	4	dec
op	6:11	0:0	4	->
water	6:13	0:0	4	fmt_in
op	6:19	0:0	4	.
water	6:20	0:0	4	i_codec
op	6:28	0:0	4	!=
water	6:31	0:0	4	VLC_CODEC_ULEAD_DV_AUDIO_PAL
stmts	7:8	7:27	3	
return	7:8	7:27	4	VLC_EGENERIC
water	7:15	0:0	5	VLC_EGENERIC
if	8:4	9:27	2	(dec -> fmt_in . audio . i_bitspersample != 12 && dec -> fmt_in . audio . i_bitspersample != 16)
cond	8:8	8:88	3	dec -> fmt_in . audio . i_bitspersample != 12 && dec -> fmt_in . audio . i_bitspersample != 16
water	8:8	0:0	4	dec
op	8:11	0:0	4	->
water	8:13	0:0	4	fmt_in
op	8:19	0:0	4	.
water	8:20	0:0	4	audio
op	8:25	0:0	4	.
water	8:26	0:0	4	i_bitspersample
op	8:42	0:0	4	!=
water	8:45	0:0	4	12
op	8:48	0:0	4	&&
water	8:51	0:0	4	dec
op	8:54	0:0	4	->
water	8:56	0:0	4	fmt_in
op	8:62	0:0	4	.
water	8:63	0:0	4	audio
op	8:68	0:0	4	.
water	8:69	0:0	4	i_bitspersample
op	8:85	0:0	4	!=
water	8:88	0:0	4	16
stmts	9:8	9:27	3	
return	9:8	9:27	4	VLC_EGENERIC
water	9:15	0:0	5	VLC_EGENERIC
if	10:4	11:27	2	(dec -> fmt_in . audio . i_channels != 2)
cond	10:8	10:40	3	dec -> fmt_in . audio . i_channels != 2
water	10:8	0:0	4	dec
op	10:11	0:0	4	->
water	10:13	0:0	4	fmt_in
op	10:19	0:0	4	.
water	10:20	0:0	4	audio
op	10:25	0:0	4	.
water	10:26	0:0	4	i_channels
op	10:37	0:0	4	!=
water	10:40	0:0	4	2
stmts	11:8	11:27	3	
return	11:8	11:27	4	VLC_EGENERIC
water	11:15	0:0	5	VLC_EGENERIC
if	12:4	13:27	2	(dec -> fmt_in . audio . i_rate <= 0)
cond	12:8	12:36	3	dec -> fmt_in . audio . i_rate <= 0
water	12:8	0:0	4	dec
op	12:11	0:0	4	->
water	12:13	0:0	4	fmt_in
op	12:19	0:0	4	.
water	12:20	0:0	4	audio
op	12:25	0:0	4	.
water	12:26	0:0	4	i_rate
op	12:33	0:0	4	<=
water	12:36	0:0	4	0
stmts	13:8	13:27	3	
return	13:8	13:27	4	VLC_EGENERIC
water	13:15	0:0	5	VLC_EGENERIC
decl	14:4	14:58	2	decoder_sys_t	*sys
op	14:23	0:0	2	=
water	14:25	0:0	2	dec
op	14:28	0:0	2	->
water	14:30	0:0	2	p_sys
op	14:36	0:0	2	=
call	14:38	14:57	3	malloc
arg	14:45	14:57	4	sizeof(*sys)
op	14:45	0:0	5	sizeof
water	14:51	0:0	5	(
op	14:52	0:0	5	*
water	14:53	0:0	5	sys
water	14:56	0:0	5	)
if	15:4	16:25	2	(! sys)
cond	15:8	15:9	3	! sys
op	15:8	0:0	4	!
water	15:9	0:0	4	sys
stmts	16:8	16:25	3	
return	16:8	16:25	4	VLC_ENOMEM
water	16:15	0:0	5	VLC_ENOMEM
water	17:4	0:0	2	sys
op	17:7	0:0	2	->
water	17:9	0:0	2	is_pal
op	17:16	0:0	2	=
water	17:18	0:0	2	dec
op	17:21	0:0	2	->
water	17:23	0:0	2	fmt_in
op	17:29	0:0	2	.
water	17:30	0:0	2	i_codec
op	17:38	0:0	2	==
water	17:41	0:0	2	VLC_CODEC_ULEAD_DV_AUDIO_PAL
water	17:69	0:0	2	;
water	18:4	0:0	2	sys
op	18:7	0:0	2	->
water	18:9	0:0	2	is_12bit
op	18:18	0:0	2	=
water	18:20	0:0	2	dec
op	18:23	0:0	2	->
water	18:25	0:0	2	fmt_in
op	18:31	0:0	2	.
water	18:32	0:0	2	audio
op	18:37	0:0	2	.
water	18:38	0:0	2	i_bitspersample
op	18:54	0:0	2	==
water	18:57	0:0	2	12
water	18:59	0:0	2	;
call	19:4	19:57	2	date_Init
arg	19:14	19:28	3	&sys->end_date
op	19:14	0:0	4	&
water	19:15	0:0	4	sys
op	19:18	0:0	4	->
water	19:20	0:0	4	end_date
arg	19:30	19:54	3	dec->fmt_in.audio.i_rate
water	19:30	0:0	4	dec
op	19:33	0:0	4	->
water	19:35	0:0	4	fmt_in
op	19:41	0:0	4	.
water	19:42	0:0	4	audio
op	19:47	0:0	4	.
water	19:48	0:0	4	i_rate
arg	19:56	19:57	3	1
water	19:56	0:0	4	1
water	19:58	0:0	2	;
call	20:4	20:30	2	date_Set
arg	20:13	20:27	3	&sys->end_date
op	20:13	0:0	4	&
water	20:14	0:0	4	sys
op	20:17	0:0	4	->
water	20:19	0:0	4	end_date
arg	20:29	20:30	3	0
water	20:29	0:0	4	0
water	20:31	0:0	2	;
for	21:4	26:4	2	(unsigned i = 0 ;i < sizeof ( sys -> shuffle ) / sizeof ( * sys -> shuffle );i ++)
forinit	21:9	21:23	3	unsigned i = 0 ;
water	21:9	0:0	4	unsigned
water	21:18	0:0	4	i
op	21:20	0:0	4	=
water	21:22	0:0	4	0
water	21:23	0:0	4	;
cond	21:25	21:72	3	i < sizeof ( sys -> shuffle ) / sizeof ( * sys -> shuffle )
water	21:25	0:0	4	i
op	21:27	0:0	4	<
op	21:29	0:0	4	sizeof
water	21:35	0:0	4	(
water	21:36	0:0	4	sys
op	21:39	0:0	4	->
water	21:41	0:0	4	shuffle
water	21:48	0:0	4	)
op	21:50	0:0	4	/
op	21:52	0:0	4	sizeof
water	21:58	0:0	4	(
op	21:59	0:0	4	*
water	21:60	0:0	4	sys
op	21:63	0:0	4	->
water	21:65	0:0	4	shuffle
water	21:72	0:0	4	)
forexpr	21:75	21:76	3	i ++
water	21:75	0:0	4	i
op	21:76	0:0	4	++
stmts	21:80	26:4	3	
water	21:80	0:0	4	{
water	22:8	0:0	4	const
water	22:14	0:0	4	unsigned
water	22:23	0:0	4	a
op	22:25	0:0	4	=
water	22:27	0:0	4	sys
op	22:30	0:0	4	->
water	22:32	0:0	4	is_pal
water	22:39	0:0	4	?
water	22:41	0:0	4	18
water	22:44	0:0	4	:
water	22:46	0:0	4	15
water	22:48	0:0	4	;
water	23:8	0:0	4	const
water	23:14	0:0	4	unsigned
water	23:23	0:0	4	b
op	23:25	0:0	4	=
water	23:27	0:0	4	3
op	23:29	0:0	4	*
water	23:31	0:0	4	a
water	23:32	0:0	4	;
water	24:8	0:0	4	sys
op	24:11	0:0	4	->
water	24:13	0:0	4	shuffle
op	24:20	0:0	4	[
water	24:21	0:0	4	i
op	24:22	0:0	4	]
op	24:24	0:0	4	=
water	24:26	0:0	4	80
op	24:29	0:0	4	*
water	24:31	0:0	4	(
water	24:32	0:0	4	(
water	24:33	0:0	4	21
op	24:36	0:0	4	*
water	24:38	0:0	4	(
water	24:39	0:0	4	i
op	24:41	0:0	4	%
water	24:43	0:0	4	3
water	24:44	0:0	4	)
op	24:46	0:0	4	+
water	24:48	0:0	4	9
op	24:50	0:0	4	*
water	24:52	0:0	4	(
water	24:53	0:0	4	i
op	24:55	0:0	4	/
water	24:57	0:0	4	3
water	24:58	0:0	4	)
op	24:60	0:0	4	+
water	24:62	0:0	4	(
water	24:63	0:0	4	(
water	24:64	0:0	4	i
op	24:66	0:0	4	/
water	24:68	0:0	4	a
water	24:69	0:0	4	)
op	24:71	0:0	4	%
water	24:73	0:0	4	3
water	24:74	0:0	4	)
water	24:75	0:0	4	)
op	24:77	0:0	4	%
water	24:79	0:0	4	b
water	24:80	0:0	4	)
op	24:82	0:0	4	+
water	25:26	0:0	4	(
water	25:27	0:0	4	2
op	25:29	0:0	4	+
water	25:31	0:0	4	sys
op	25:34	0:0	4	->
water	25:36	0:0	4	is_12bit
water	25:44	0:0	4	)
op	25:46	0:0	4	*
water	25:48	0:0	4	(
water	25:49	0:0	4	i
op	25:51	0:0	4	/
water	25:53	0:0	4	b
water	25:54	0:0	4	)
op	25:56	0:0	4	+
water	25:58	0:0	4	8
water	25:59	0:0	4	;
water	26:4	0:0	4	}
call	27:4	27:58	2	es_format_Init
arg	27:19	27:32	3	&dec->fmt_out
op	27:19	0:0	4	&
water	27:20	0:0	4	dec
op	27:23	0:0	4	->
water	27:25	0:0	4	fmt_out
arg	27:34	27:42	3	AUDIO_ES
water	27:34	0:0	4	AUDIO_ES
arg	27:44	27:58	3	VLC_CODEC_S16N
water	27:44	0:0	4	VLC_CODEC_S16N
water	27:59	0:0	2	;
water	28:4	0:0	2	dec
op	28:7	0:0	2	->
water	28:9	0:0	2	fmt_out
op	28:16	0:0	2	.
water	28:17	0:0	2	audio
op	28:22	0:0	2	.
water	28:23	0:0	2	i_rate
op	28:30	0:0	2	=
water	28:32	0:0	2	dec
op	28:35	0:0	2	->
water	28:37	0:0	2	fmt_in
op	28:43	0:0	2	.
water	28:44	0:0	2	audio
op	28:49	0:0	2	.
water	28:50	0:0	2	i_rate
water	28:56	0:0	2	;
water	29:4	0:0	2	dec
op	29:7	0:0	2	->
water	29:9	0:0	2	fmt_out
op	29:16	0:0	2	.
water	29:17	0:0	2	audio
op	29:22	0:0	2	.
water	29:23	0:0	2	i_channels
op	29:34	0:0	2	=
water	29:36	0:0	2	2
water	29:37	0:0	2	;
water	30:4	0:0	2	dec
op	30:7	0:0	2	->
water	30:9	0:0	2	fmt_out
op	30:16	0:0	2	.
water	30:17	0:0	2	audio
op	30:22	0:0	2	.
water	30:23	0:0	2	i_physical_channels
op	30:43	0:0	2	=
water	31:4	0:0	2	dec
op	31:7	0:0	2	->
water	31:9	0:0	2	fmt_out
op	31:16	0:0	2	.
water	31:17	0:0	2	audio
op	31:22	0:0	2	.
water	31:23	0:0	2	i_original_channels
op	31:43	0:0	2	=
water	31:45	0:0	2	AOUT_CHAN_LEFT
op	31:60	0:0	2	|
water	31:62	0:0	2	AOUT_CHAN_RIGHT
water	31:77	0:0	2	;
water	32:4	0:0	2	dec
op	32:7	0:0	2	->
water	32:9	0:0	2	pf_decode_audio
op	32:25	0:0	2	=
water	32:27	0:0	2	Decode
water	32:33	0:0	2	;
return	33:4	33:22	2	VLC_SUCCESS
water	33:11	0:0	3	VLC_SUCCESS
