func	2:0	227:0	0	static picture_t *	Render
params	2:24	0:0	1	
param	2:25	2:41	2	filter_t *	filter
param	2:43	2:57	2	picture_t *	src
param	2:59	2:70	2	bool	import
stmnts	0:0	226:13	1	
decl	4:4	4:37	2	filter_sys_t	*sys
op	4:22	0:0	2	=
water	4:24	0:0	2	filter
op	4:30	0:0	2	->
water	4:32	0:0	2	p_sys
decl	5:4	5:17	2	VdpStatus	err
if	6:4	11:4	2	(unlikely (src -> context == NULL ))
cond	6:8	6:37	3	unlikely (src -> context == NULL )
call	6:8	6:37	4	unlikely
arg	6:17	6:37	5	src->context==NULL
water	6:17	0:0	6	src
op	6:20	0:0	6	->
water	6:22	0:0	6	context
op	6:30	0:0	6	==
water	6:33	0:0	6	NULL
stmts	7:4	11:4	3	
water	7:4	0:0	4	{
call	8:8	8:53	4	msg_Err
arg	8:16	8:22	5	filter
water	8:16	0:0	6	filter
arg	8:24	8:53	5	"corrupt VDPAU video surface"
water	8:24	0:0	6	"corrupt VDPAU video surface"
water	8:54	0:0	4	;
call	9:8	9:27	4	picture_Release
arg	9:24	9:27	5	src
water	9:24	0:0	6	src
water	9:28	0:0	4	;
return	10:8	10:19	4	NULL
water	10:15	0:0	5	NULL
water	11:4	0:0	4	}
decl	12:4	12:43	2	picture_t	*dst
op	12:19	0:0	2	=
call	12:21	12:42	3	OutputAllocate
arg	12:36	12:42	4	filter
water	12:36	0:0	5	filter
decl	14:4	14:47	2	vlc_vdp_video_field_t	*field
op	14:33	0:0	2	=
water	14:35	0:0	2	src
op	14:38	0:0	2	->
water	14:40	0:0	2	context
if	15:4	39:4	2	(field -> frame -> vdp != sys -> vdp)
cond	15:8	15:34	3	field -> frame -> vdp != sys -> vdp
water	15:8	0:0	4	field
op	15:13	0:0	4	->
water	15:15	0:0	4	frame
op	15:20	0:0	4	->
water	15:22	0:0	4	vdp
op	15:26	0:0	4	!=
water	15:29	0:0	4	sys
op	15:32	0:0	4	->
water	15:34	0:0	4	vdp
stmts	16:4	39:4	3	
water	16:4	0:0	4	{
decl	17:8	17:40	4	video_format_t	fmt
op	17:27	0:0	4	=
water	17:29	0:0	4	src
op	17:32	0:0	4	->
water	17:34	0:0	4	format
switch	18:8	24:8	4	(sys -> chroma)
cond	18:16	18:21	5	sys -> chroma
water	18:16	0:0	6	sys
op	18:19	0:0	6	->
water	18:21	0:0	6	chroma
stmts	19:8	24:8	5	
water	19:8	0:0	6	{
label	20:13	20:37	6	case VDP_CHROMA_TYPE_420 :
water	20:39	0:0	6	fmt
op	20:42	0:0	6	.
water	20:43	0:0	6	i_chroma
op	20:52	0:0	6	=
water	20:54	0:0	6	VLC_CODEC_NV12
water	20:68	0:0	6	;
break	20:70	20:75	6	
label	21:13	21:37	6	case VDP_CHROMA_TYPE_422 :
water	21:39	0:0	6	fmt
op	21:42	0:0	6	.
water	21:43	0:0	6	i_chroma
op	21:52	0:0	6	=
water	21:54	0:0	6	VLC_CODEC_UYVY
water	21:68	0:0	6	;
break	21:70	21:75	6	
label	22:13	22:37	6	case VDP_CHROMA_TYPE_444 :
water	22:39	0:0	6	fmt
op	22:42	0:0	6	.
water	22:43	0:0	6	i_chroma
op	22:52	0:0	6	=
water	22:54	0:0	6	VLC_CODEC_NV24
water	22:68	0:0	6	;
break	22:70	22:75	6	
label	23:13	23:20	6	default :
call	23:22	23:30	6	assert
arg	23:29	23:30	7	0
water	23:29	0:0	8	0
water	23:31	0:0	6	;
water	24:8	0:0	6	}
decl	25:8	25:52	4	picture_t	*pic
op	25:23	0:0	4	=
call	25:25	25:51	5	picture_NewFromFormat
arg	25:47	25:51	6	&fmt
op	25:47	0:0	7	&
water	25:48	0:0	7	fmt
if	26:8	33:8	4	(likely (pic != NULL ))
cond	26:12	26:30	5	likely (pic != NULL )
call	26:12	26:30	6	likely
arg	26:19	26:30	7	pic!=NULL
water	26:19	0:0	8	pic
op	26:23	0:0	8	!=
water	26:26	0:0	8	NULL
stmts	27:8	33:8	5	
water	27:8	0:0	6	{
water	28:12	0:0	6	pic
op	28:16	0:0	6	=
call	28:18	28:46	6	VideoExport
arg	28:30	28:36	7	filter
water	28:30	0:0	8	filter
arg	28:38	28:41	7	src
water	28:38	0:0	8	src
arg	28:43	28:46	7	pic
water	28:43	0:0	8	pic
water	28:47	0:0	6	;
if	29:12	30:46	6	(pic != NULL)
cond	29:16	29:23	7	pic != NULL
water	29:16	0:0	8	pic
op	29:20	0:0	8	!=
water	29:23	0:0	8	NULL
stmts	30:16	30:46	7	
water	30:16	0:0	8	src
op	30:20	0:0	8	=
call	30:22	30:45	8	VideoImport
arg	30:34	30:40	9	filter
water	30:34	0:0	10	filter
arg	30:42	30:45	9	pic
water	30:42	0:0	10	pic
water	30:46	0:0	8	;
else	31:12	32:26	6
stmts	32:16	32:26	7	
water	32:16	0:0	8	src
op	32:20	0:0	8	=
water	32:22	0:0	8	NULL
water	32:26	0:0	8	;
water	33:8	0:0	6	}
else	34:8	38:8	4
stmts	35:8	38:8	5	
water	35:8	0:0	6	{
call	36:12	36:31	6	picture_Release
arg	36:28	36:31	7	src
water	36:28	0:0	8	src
water	36:32	0:0	6	;
water	37:12	0:0	6	src
op	37:16	0:0	6	=
water	37:18	0:0	6	NULL
water	37:22	0:0	6	;
water	38:8	0:0	6	}
water	39:4	0:0	4	}
if	41:4	48:4	2	(likely (src != NULL ))
cond	41:8	41:26	3	likely (src != NULL )
call	41:8	41:26	4	likely
arg	41:15	41:26	5	src!=NULL
water	41:15	0:0	6	src
op	41:19	0:0	6	!=
water	41:22	0:0	6	NULL
stmts	42:4	48:4	3	
water	42:4	0:0	4	{
water	43:8	0:0	4	sys
op	43:11	0:0	4	->
water	43:13	0:0	4	history
op	43:20	0:0	4	[
water	43:21	0:0	4	MAX_PAST
op	43:30	0:0	4	+
water	43:32	0:0	4	MAX_FUTURE
op	43:42	0:0	4	]
op	43:43	0:0	4	.
water	43:44	0:0	4	field
op	43:50	0:0	4	=
call	44:46	44:77	4	vlc_vdp_video_copy
arg	44:65	44:77	5	src->context
water	44:65	0:0	6	src
op	44:68	0:0	6	->
water	44:70	0:0	6	context
water	44:78	0:0	4	;
water	45:8	0:0	4	sys
op	45:11	0:0	4	->
water	45:13	0:0	4	history
op	45:20	0:0	4	[
water	45:21	0:0	4	MAX_PAST
op	45:30	0:0	4	+
water	45:32	0:0	4	MAX_FUTURE
op	45:42	0:0	4	]
op	45:43	0:0	4	.
water	45:44	0:0	4	date
op	45:49	0:0	4	=
water	45:51	0:0	4	src
op	45:54	0:0	4	->
water	45:56	0:0	4	date
water	45:60	0:0	4	;
water	46:8	0:0	4	sys
op	46:11	0:0	4	->
water	46:13	0:0	4	history
op	46:20	0:0	4	[
water	46:21	0:0	4	MAX_PAST
op	46:30	0:0	4	+
water	46:32	0:0	4	MAX_FUTURE
op	46:42	0:0	4	]
op	46:43	0:0	4	.
water	46:44	0:0	4	force
op	46:50	0:0	4	=
water	46:52	0:0	4	src
op	46:55	0:0	4	->
water	46:57	0:0	4	b_force
water	46:64	0:0	4	;
call	47:8	47:27	4	picture_Release
arg	47:24	47:27	5	src
water	47:24	0:0	6	src
water	47:28	0:0	4	;
water	48:4	0:0	4	}
else	49:4	53:4	2
stmts	50:4	53:4	3	
water	50:4	0:0	4	{
water	51:8	0:0	4	sys
op	51:11	0:0	4	->
water	51:13	0:0	4	history
op	51:20	0:0	4	[
water	51:21	0:0	4	MAX_PAST
op	51:30	0:0	4	+
water	51:32	0:0	4	MAX_FUTURE
op	51:42	0:0	4	]
op	51:43	0:0	4	.
water	51:44	0:0	4	field
op	51:50	0:0	4	=
water	51:52	0:0	4	NULL
water	51:56	0:0	4	;
water	52:8	0:0	4	sys
op	52:11	0:0	4	->
water	52:13	0:0	4	history
op	52:20	0:0	4	[
water	52:21	0:0	4	MAX_PAST
op	52:30	0:0	4	+
water	52:32	0:0	4	MAX_FUTURE
op	52:42	0:0	4	]
op	52:43	0:0	4	.
water	52:44	0:0	4	force
op	52:50	0:0	4	=
water	52:52	0:0	4	false
water	52:57	0:0	4	;
water	53:4	0:0	4	}
if	54:4	55:17	2	(dst == NULL)
cond	54:8	54:15	3	dst == NULL
water	54:8	0:0	4	dst
op	54:12	0:0	4	==
water	54:15	0:0	4	NULL
stmts	55:8	55:17	3	
goto	55:8	55:17	4	skip
water	55:13	0:0	5	skip
decl	56:4	56:59	2	vlc_vdp_video_field_t	*f
op	56:29	0:0	2	=
water	56:31	0:0	2	sys
op	56:34	0:0	2	->
water	56:36	0:0	2	history
op	56:43	0:0	2	[
water	56:44	0:0	2	MAX_PAST
op	56:52	0:0	2	]
op	56:53	0:0	2	.
water	56:54	0:0	2	field
if	57:4	74:4	2	(f == NULL)
cond	57:8	57:13	3	f == NULL
water	57:8	0:0	4	f
op	57:10	0:0	4	==
water	57:13	0:0	4	NULL
stmts	58:4	74:4	3	
water	58:4	0:0	4	{
if	59:8	60:22	4	(! sys -> history [ MAX_PAST + MAX_FUTURE ] . force)
cond	59:12	59:49	5	! sys -> history [ MAX_PAST + MAX_FUTURE ] . force
op	59:12	0:0	6	!
water	59:13	0:0	6	sys
op	59:16	0:0	6	->
water	59:18	0:0	6	history
op	59:25	0:0	6	[
water	59:26	0:0	6	MAX_PAST
op	59:35	0:0	6	+
water	59:37	0:0	6	MAX_FUTURE
op	59:47	0:0	6	]
op	59:48	0:0	6	.
water	59:49	0:0	6	force
stmts	60:12	60:22	5	
goto	60:12	60:22	6	error
water	60:17	0:0	7	error
while	64:8	72:8	4	(sys -> history [ MAX_PAST ] . field == NULL)
cond	64:15	64:47	5	sys -> history [ MAX_PAST ] . field == NULL
water	64:15	0:0	6	sys
op	64:18	0:0	6	->
water	64:20	0:0	6	history
op	64:27	0:0	6	[
water	64:28	0:0	6	MAX_PAST
op	64:36	0:0	6	]
op	64:37	0:0	6	.
water	64:38	0:0	6	field
op	64:44	0:0	6	==
water	64:47	0:0	6	NULL
stmts	65:8	72:8	5	
water	65:8	0:0	6	{
water	66:12	0:0	6	f
op	66:14	0:0	6	=
water	66:16	0:0	6	sys
op	66:19	0:0	6	->
water	66:21	0:0	6	history
op	66:28	0:0	6	[
water	66:29	0:0	6	0
op	66:30	0:0	6	]
op	66:31	0:0	6	.
water	66:32	0:0	6	field
water	66:37	0:0	6	;
if	67:12	68:29	6	(f != NULL)
cond	67:16	67:21	7	f != NULL
water	67:16	0:0	8	f
op	67:18	0:0	8	!=
water	67:21	0:0	8	NULL
stmts	68:16	68:29	7	
call	68:16	68:28	8	f->destroy
arg	68:27	68:28	9	f
water	68:27	0:0	10	f
water	68:29	0:0	8	;
call	69:12	70:70	6	memmove
arg	69:20	69:32	7	sys->history
water	69:20	0:0	8	sys
op	69:23	0:0	8	->
water	69:25	0:0	8	history
arg	69:34	69:50	7	sys->history+1
water	69:34	0:0	8	sys
op	69:37	0:0	8	->
water	69:39	0:0	8	history
op	69:47	0:0	8	+
water	69:49	0:0	8	1
arg	70:20	70:70	7	sizeof(sys->history[0])*(MAX_PAST+MAX_FUTURE)
op	70:20	0:0	8	sizeof
water	70:27	0:0	8	(
water	70:28	0:0	8	sys
op	70:31	0:0	8	->
water	70:33	0:0	8	history
op	70:40	0:0	8	[
water	70:41	0:0	8	0
op	70:42	0:0	8	]
water	70:43	0:0	8	)
op	70:45	0:0	8	*
water	70:47	0:0	8	(
water	70:48	0:0	8	MAX_PAST
op	70:57	0:0	8	+
water	70:59	0:0	8	MAX_FUTURE
water	70:69	0:0	8	)
water	70:71	0:0	6	;
water	71:12	0:0	6	sys
op	71:15	0:0	6	->
water	71:17	0:0	6	history
op	71:24	0:0	6	[
water	71:25	0:0	6	MAX_PAST
op	71:34	0:0	6	+
water	71:36	0:0	6	MAX_FUTURE
op	71:46	0:0	6	]
op	71:47	0:0	6	.
water	71:48	0:0	6	field
op	71:54	0:0	6	=
water	71:56	0:0	6	NULL
water	71:60	0:0	6	;
water	72:8	0:0	6	}
water	73:8	0:0	4	f
op	73:10	0:0	4	=
water	73:12	0:0	4	sys
op	73:15	0:0	4	->
water	73:17	0:0	4	history
op	73:24	0:0	4	[
water	73:25	0:0	4	MAX_PAST
op	73:33	0:0	4	]
op	73:34	0:0	4	.
water	73:35	0:0	4	field
water	73:40	0:0	4	;
water	74:4	0:0	4	}
water	75:4	0:0	2	dst
op	75:7	0:0	2	->
water	75:9	0:0	2	date
op	75:14	0:0	2	=
water	75:16	0:0	2	sys
op	75:19	0:0	2	->
water	75:21	0:0	2	history
op	75:28	0:0	2	[
water	75:29	0:0	2	MAX_PAST
op	75:37	0:0	2	]
op	75:38	0:0	2	.
water	75:39	0:0	2	date
water	75:43	0:0	2	;
water	76:4	0:0	2	dst
op	76:7	0:0	2	->
water	76:9	0:0	2	b_force
op	76:17	0:0	2	=
water	76:19	0:0	2	sys
op	76:22	0:0	2	->
water	76:24	0:0	2	history
op	76:31	0:0	2	[
water	76:32	0:0	2	MAX_PAST
op	76:40	0:0	2	]
op	76:41	0:0	2	.
water	76:42	0:0	2	force
water	76:47	0:0	2	;
decl	78:4	80:5	2	const VdpVideoMixerFeature	features[]
op	78:42	0:0	2	=
water	78:44	0:0	2	{
water	79:8	0:0	2	VDP_VIDEO_MIXER_FEATURE_SHARPNESS
water	79:41	0:0	2	,
water	80:4	0:0	2	}
decl	81:4	83:5	2	const VdpBool	enables[]
op	81:28	0:0	2	=
water	81:30	0:0	2	{
water	82:8	0:0	2	f
op	82:9	0:0	2	->
water	82:11	0:0	2	sharpen
op	82:19	0:0	2	!=
water	82:22	0:0	2	0
op	82:23	0:0	2	.
water	82:24	0:0	2	f
water	82:25	0:0	2	,
water	83:4	0:0	2	}
water	84:4	0:0	2	err
op	84:8	0:0	2	=
call	84:10	85:77	2	vdp_video_mixer_set_feature_enables
arg	84:46	84:54	3	sys->vdp
water	84:46	0:0	4	sys
op	84:49	0:0	4	->
water	84:51	0:0	4	vdp
arg	84:56	84:66	3	sys->mixer
water	84:56	0:0	4	sys
op	84:59	0:0	4	->
water	84:61	0:0	4	mixer
arg	85:18	85:58	3	sizeof(features)/sizeof(features[0])
op	85:18	0:0	4	sizeof
water	85:25	0:0	4	(
water	85:26	0:0	4	features
water	85:34	0:0	4	)
op	85:36	0:0	4	/
op	85:38	0:0	4	sizeof
water	85:45	0:0	4	(
water	85:46	0:0	4	features
op	85:54	0:0	4	[
water	85:55	0:0	4	0
op	85:56	0:0	4	]
water	85:57	0:0	4	)
arg	85:60	85:68	3	features
water	85:60	0:0	4	features
arg	85:70	85:77	3	enables
water	85:70	0:0	4	enables
water	85:78	0:0	2	;
if	86:4	88:52	2	(err != VDP_STATUS_OK)
cond	86:8	86:15	3	err != VDP_STATUS_OK
water	86:8	0:0	4	err
op	86:12	0:0	4	!=
water	86:15	0:0	4	VDP_STATUS_OK
stmts	87:8	88:52	3	
call	87:8	88:51	4	msg_Err
arg	87:16	87:22	5	filter
water	87:16	0:0	6	filter
arg	87:24	87:49	5	"video %s %s failure: %s"
water	87:24	0:0	6	"video %s %s failure: %s"
arg	87:51	87:58	5	"mixer"
water	87:51	0:0	6	"mixer"
arg	87:60	87:70	5	"features"
water	87:60	0:0	6	"features"
arg	88:16	88:51	5	vdp_get_error_string(sys->vdp,err)
call	88:16	88:50	6	vdp_get_error_string
arg	88:37	88:45	7	sys->vdp
water	88:37	0:0	8	sys
op	88:40	0:0	8	->
water	88:42	0:0	8	vdp
arg	88:47	88:50	7	err
water	88:47	0:0	8	err
water	88:52	0:0	4	;
decl	90:4	92:5	2	VdpVideoMixerAttribute	attrs[2]
op	90:36	0:0	2	=
water	90:38	0:0	2	{
water	91:8	0:0	2	VDP_VIDEO_MIXER_ATTRIBUTE_SHARPNESS_LEVEL
water	91:49	0:0	2	,
water	92:4	0:0	2	}
decl	93:4	95:5	2	const void	*values[2]
op	93:26	0:0	2	=
water	93:28	0:0	2	{
op	94:8	0:0	2	&
water	94:9	0:0	2	f
op	94:10	0:0	2	->
water	94:12	0:0	2	sharpen
water	94:19	0:0	2	,
water	95:4	0:0	2	}
water	96:4	0:0	2	unsigned
water	96:13	0:0	2	count
op	96:19	0:0	2	=
water	96:21	0:0	2	1
water	96:22	0:0	2	;
decl	97:4	97:20	2	VdpCSCMatrix	csc
if	98:4	107:4	2	(( sys -> procamp . brightness != f -> procamp . brightness || sys -> procamp . contrast != f -> procamp . contrast || sys -> procamp . saturation != f -> procamp . saturation || sys -> procamp . hue != f -> procamp . hue ) && (MixerSetupColors (filter ,& f -> procamp ,& csc ) == VDP_STATUS_OK ))
cond	98:8	102:69	3	( sys -> procamp . brightness != f -> procamp . brightness || sys -> procamp . contrast != f -> procamp . contrast || sys -> procamp . saturation != f -> procamp . saturation || sys -> procamp . hue != f -> procamp . hue ) && (MixerSetupColors (filter ,& f -> procamp ,& csc ) == VDP_STATUS_OK )
water	98:8	0:0	4	(
water	98:9	0:0	4	sys
op	98:12	0:0	4	->
water	98:14	0:0	4	procamp
op	98:21	0:0	4	.
water	98:22	0:0	4	brightness
op	98:33	0:0	4	!=
water	98:36	0:0	4	f
op	98:37	0:0	4	->
water	98:39	0:0	4	procamp
op	98:46	0:0	4	.
water	98:47	0:0	4	brightness
op	99:6	0:0	4	||
water	99:9	0:0	4	sys
op	99:12	0:0	4	->
water	99:14	0:0	4	procamp
op	99:21	0:0	4	.
water	99:22	0:0	4	contrast
op	99:31	0:0	4	!=
water	99:34	0:0	4	f
op	99:35	0:0	4	->
water	99:37	0:0	4	procamp
op	99:44	0:0	4	.
water	99:45	0:0	4	contrast
op	100:6	0:0	4	||
water	100:9	0:0	4	sys
op	100:12	0:0	4	->
water	100:14	0:0	4	procamp
op	100:21	0:0	4	.
water	100:22	0:0	4	saturation
op	100:33	0:0	4	!=
water	100:36	0:0	4	f
op	100:37	0:0	4	->
water	100:39	0:0	4	procamp
op	100:46	0:0	4	.
water	100:47	0:0	4	saturation
op	101:6	0:0	4	||
water	101:9	0:0	4	sys
op	101:12	0:0	4	->
water	101:14	0:0	4	procamp
op	101:21	0:0	4	.
water	101:22	0:0	4	hue
op	101:26	0:0	4	!=
water	101:29	0:0	4	f
op	101:30	0:0	4	->
water	101:32	0:0	4	procamp
op	101:39	0:0	4	.
water	101:40	0:0	4	hue
water	101:43	0:0	4	)
op	102:5	0:0	4	&&
water	102:8	0:0	4	(
call	102:9	102:51	4	MixerSetupColors
arg	102:26	102:32	5	filter
water	102:26	0:0	6	filter
arg	102:34	102:45	5	&f->procamp
op	102:34	0:0	6	&
water	102:35	0:0	6	f
op	102:36	0:0	6	->
water	102:38	0:0	6	procamp
arg	102:47	102:51	5	&csc
op	102:47	0:0	6	&
water	102:48	0:0	6	csc
op	102:53	0:0	4	==
water	102:56	0:0	4	VDP_STATUS_OK
water	102:69	0:0	4	)
stmts	103:4	107:4	3	
water	103:4	0:0	4	{
water	104:8	0:0	4	attrs
op	104:13	0:0	4	[
water	104:14	0:0	4	count
op	104:19	0:0	4	]
op	104:21	0:0	4	=
water	104:23	0:0	4	VDP_VIDEO_MIXER_ATTRIBUTE_CSC_MATRIX
water	104:59	0:0	4	;
water	105:8	0:0	4	values
op	105:14	0:0	4	[
water	105:15	0:0	4	count
op	105:20	0:0	4	]
op	105:22	0:0	4	=
op	105:24	0:0	4	&
water	105:25	0:0	4	csc
water	105:28	0:0	4	;
water	106:8	0:0	4	count
op	106:13	0:0	4	++
water	106:15	0:0	4	;
water	107:4	0:0	4	}
water	108:4	0:0	2	err
op	108:8	0:0	2	=
call	108:10	109:67	2	vdp_video_mixer_set_attribute_values
arg	108:47	108:55	3	sys->vdp
water	108:47	0:0	4	sys
op	108:50	0:0	4	->
water	108:52	0:0	4	vdp
arg	108:57	108:67	3	sys->mixer
water	108:57	0:0	4	sys
op	108:60	0:0	4	->
water	108:62	0:0	4	mixer
arg	109:47	109:52	3	count
water	109:47	0:0	4	count
arg	109:54	109:59	3	attrs
water	109:54	0:0	4	attrs
arg	109:61	109:67	3	values
water	109:61	0:0	4	values
water	109:68	0:0	2	;
if	110:4	112:52	2	(err != VDP_STATUS_OK)
cond	110:8	110:15	3	err != VDP_STATUS_OK
water	110:8	0:0	4	err
op	110:12	0:0	4	!=
water	110:15	0:0	4	VDP_STATUS_OK
stmts	111:8	112:52	3	
call	111:8	112:51	4	msg_Err
arg	111:16	111:22	5	filter
water	111:16	0:0	6	filter
arg	111:24	111:49	5	"video %s %s failure: %s"
water	111:24	0:0	6	"video %s %s failure: %s"
arg	111:51	111:58	5	"mixer"
water	111:51	0:0	6	"mixer"
arg	111:60	111:72	5	"attributes"
water	111:60	0:0	6	"attributes"
arg	112:16	112:51	5	vdp_get_error_string(sys->vdp,err)
call	112:16	112:50	6	vdp_get_error_string
arg	112:37	112:45	7	sys->vdp
water	112:37	0:0	8	sys
op	112:40	0:0	8	->
water	112:42	0:0	8	vdp
arg	112:47	112:50	7	err
water	112:47	0:0	8	err
water	112:52	0:0	4	;
decl	114:4	114:64	2	bool	swap
op	114:14	0:0	2	=
call	114:16	114:63	3	ORIENT_IS_SWAP
arg	114:31	114:63	4	filter->fmt_in.video.orientation
water	114:31	0:0	5	filter
op	114:37	0:0	5	->
water	114:39	0:0	5	fmt_in
op	114:45	0:0	5	.
water	114:46	0:0	5	video
op	114:51	0:0	5	.
water	114:52	0:0	5	orientation
decl	115:4	115:37	2	bool	hflip
op	115:15	0:0	2	=
water	115:17	0:0	2	false
water	115:22	0:0	2	,
decl	115:4	115:37	2	bool	vflip
op	115:30	0:0	2	=
water	115:32	0:0	2	false
switch	116:4	133:4	2	(filter -> fmt_in . video . orientation)
cond	116:12	116:33	3	filter -> fmt_in . video . orientation
water	116:12	0:0	4	filter
op	116:18	0:0	4	->
water	116:20	0:0	4	fmt_in
op	116:26	0:0	4	.
water	116:27	0:0	4	video
op	116:32	0:0	4	.
water	116:33	0:0	4	orientation
stmts	117:4	133:4	3	
water	117:4	0:0	4	{
label	118:8	118:28	4	case ORIENT_TOP_LEFT :
label	119:8	119:29	4	case ORIENT_RIGHT_TOP :
break	120:12	120:17	4	
label	121:8	121:29	4	case ORIENT_TOP_RIGHT :
label	122:8	122:32	4	case ORIENT_RIGHT_BOTTOM :
water	123:12	0:0	4	hflip
op	123:18	0:0	4	=
water	123:20	0:0	4	true
water	123:24	0:0	4	;
break	124:12	124:17	4	
label	125:8	125:31	4	case ORIENT_BOTTOM_LEFT :
label	126:8	126:28	4	case ORIENT_LEFT_TOP :
water	127:12	0:0	4	vflip
op	127:18	0:0	4	=
water	127:20	0:0	4	true
water	127:24	0:0	4	;
break	128:12	128:17	4	
label	129:8	129:32	4	case ORIENT_BOTTOM_RIGHT :
label	130:8	130:31	4	case ORIENT_LEFT_BOTTOM :
water	131:12	0:0	4	vflip
op	131:18	0:0	4	=
water	131:20	0:0	4	hflip
op	131:26	0:0	4	=
water	131:28	0:0	4	true
water	131:32	0:0	4	;
break	132:12	132:17	4	
water	133:4	0:0	4	}
decl	134:4	134:49	2	VdpOutputSurface	output
op	134:28	0:0	2	=
water	134:30	0:0	2	dst
op	134:33	0:0	2	->
water	134:35	0:0	2	p_sys
op	134:40	0:0	2	->
water	134:42	0:0	2	surface
if	135:4	155:4	2	(swap)
cond	135:8	135:8	3	swap
water	135:8	0:0	4	swap
stmts	136:4	155:4	3	
water	136:4	0:0	4	{
decl	137:8	137:25	4	VdpRGBAFormat	fmt
decl	138:8	138:30	4	uint32_t	width
water	138:22	0:0	4	,
decl	138:8	138:30	4	uint32_t	height
water	139:8	0:0	4	err
op	139:12	0:0	4	=
call	139:14	140:69	4	vdp_output_surface_get_parameters
arg	139:48	139:56	5	sys->vdp
water	139:48	0:0	6	sys
op	139:51	0:0	6	->
water	139:53	0:0	6	vdp
arg	139:58	139:64	5	output
water	139:58	0:0	6	output
arg	140:48	140:52	5	&fmt
op	140:48	0:0	6	&
water	140:49	0:0	6	fmt
arg	140:54	140:60	5	&width
op	140:54	0:0	6	&
water	140:55	0:0	6	width
arg	140:62	140:69	5	&height
op	140:62	0:0	6	&
water	140:63	0:0	6	height
water	140:70	0:0	4	;
if	141:8	146:8	4	(err != VDP_STATUS_OK)
cond	141:12	141:19	5	err != VDP_STATUS_OK
water	141:12	0:0	6	err
op	141:16	0:0	6	!=
water	141:19	0:0	6	VDP_STATUS_OK
stmts	142:8	146:8	5	
water	142:8	0:0	6	{
call	143:12	144:55	6	msg_Err
arg	143:20	143:26	7	filter
water	143:20	0:0	8	filter
arg	143:28	143:54	7	"output %s %s failure: %s"
water	143:28	0:0	8	"output %s %s failure: %s"
arg	143:56	143:65	7	"surface"
water	143:56	0:0	8	"surface"
arg	143:67	143:74	7	"query"
water	143:67	0:0	8	"query"
arg	144:20	144:55	7	vdp_get_error_string(sys->vdp,err)
call	144:20	144:54	8	vdp_get_error_string
arg	144:41	144:49	9	sys->vdp
water	144:41	0:0	10	sys
op	144:44	0:0	10	->
water	144:46	0:0	10	vdp
arg	144:51	144:54	9	err
water	144:51	0:0	10	err
water	144:56	0:0	6	;
goto	145:12	145:22	6	error
water	145:17	0:0	7	error
water	146:8	0:0	6	}
water	147:8	0:0	4	err
op	147:12	0:0	4	=
call	147:14	148:67	4	vdp_output_surface_create
arg	147:40	147:48	5	sys->vdp
water	147:40	0:0	6	sys
op	147:43	0:0	6	->
water	147:45	0:0	6	vdp
arg	147:50	147:61	5	sys->device
water	147:50	0:0	6	sys
op	147:53	0:0	6	->
water	147:55	0:0	6	device
arg	148:40	148:43	5	fmt
water	148:40	0:0	6	fmt
arg	148:45	148:51	5	height
water	148:45	0:0	6	height
arg	148:53	148:58	5	width
water	148:53	0:0	6	width
arg	148:60	148:67	5	&output
op	148:60	0:0	6	&
water	148:61	0:0	6	output
water	148:68	0:0	4	;
if	149:8	154:8	4	(err != VDP_STATUS_OK)
cond	149:12	149:19	5	err != VDP_STATUS_OK
water	149:12	0:0	6	err
op	149:16	0:0	6	!=
water	149:19	0:0	6	VDP_STATUS_OK
stmts	150:8	154:8	5	
water	150:8	0:0	6	{
call	151:12	152:55	6	msg_Err
arg	151:20	151:26	7	filter
water	151:20	0:0	8	filter
arg	151:28	151:54	7	"output %s %s failure: %s"
water	151:28	0:0	8	"output %s %s failure: %s"
arg	151:56	151:65	7	"surface"
water	151:56	0:0	8	"surface"
arg	151:67	151:77	7	"creation"
water	151:67	0:0	8	"creation"
arg	152:20	152:55	7	vdp_get_error_string(sys->vdp,err)
call	152:20	152:54	8	vdp_get_error_string
arg	152:41	152:49	9	sys->vdp
water	152:41	0:0	10	sys
op	152:44	0:0	10	->
water	152:46	0:0	10	vdp
arg	152:51	152:54	9	err
water	152:51	0:0	10	err
water	152:56	0:0	6	;
goto	153:12	153:22	6	error
water	153:17	0:0	7	error
water	154:8	0:0	6	}
water	155:4	0:0	4	}
decl	157:4	157:58	2	VdpVideoMixerPictureStructure	structure
op	157:44	0:0	2	=
water	157:46	0:0	2	f
op	157:47	0:0	2	->
water	157:49	0:0	2	structure
decl	158:4	158:34	2	VdpVideoSurface	past[MAX_PAST]
decl	159:4	159:47	2	VdpVideoSurface	surface
op	159:28	0:0	2	=
water	159:30	0:0	2	f
op	159:31	0:0	2	->
water	159:33	0:0	2	frame
op	159:38	0:0	2	->
water	159:40	0:0	2	surface
decl	160:4	160:38	2	VdpVideoSurface	future[MAX_FUTURE]
decl	161:4	164:5	2	VdpRect	src_rect
op	161:21	0:0	2	=
water	161:23	0:0	2	{
water	162:8	0:0	2	filter
op	162:14	0:0	2	->
water	162:16	0:0	2	fmt_in
op	162:22	0:0	2	.
water	162:23	0:0	2	video
op	162:28	0:0	2	.
water	162:29	0:0	2	i_x_offset
water	162:39	0:0	2	,
water	162:41	0:0	2	filter
op	162:47	0:0	2	->
water	162:49	0:0	2	fmt_in
op	162:55	0:0	2	.
water	162:56	0:0	2	video
op	162:61	0:0	2	.
water	162:62	0:0	2	i_y_offset
water	162:72	0:0	2	,
water	163:8	0:0	2	filter
op	163:14	0:0	2	->
water	163:16	0:0	2	fmt_in
op	163:22	0:0	2	.
water	163:23	0:0	2	video
op	163:28	0:0	2	.
water	163:29	0:0	2	i_x_offset
water	163:39	0:0	2	,
water	163:41	0:0	2	filter
op	163:47	0:0	2	->
water	163:49	0:0	2	fmt_in
op	163:55	0:0	2	.
water	163:56	0:0	2	video
op	163:61	0:0	2	.
water	163:62	0:0	2	i_y_offset
water	163:72	0:0	2	,
water	164:4	0:0	2	}
if	165:4	166:37	2	(import)
cond	165:8	165:8	3	import
water	165:8	0:0	4	import
stmts	166:8	166:37	3	
water	166:8	0:0	4	src_rect
op	166:16	0:0	4	.
water	166:17	0:0	4	y0
op	166:20	0:0	4	=
water	166:22	0:0	4	src_rect
op	166:30	0:0	4	.
water	166:31	0:0	4	y1
op	166:34	0:0	4	=
water	166:36	0:0	4	0
water	166:37	0:0	4	;
if	167:4	168:59	2	(hflip)
cond	167:8	167:8	3	hflip
water	167:8	0:0	4	hflip
stmts	168:8	168:59	3	
water	168:8	0:0	4	src_rect
op	168:16	0:0	4	.
water	168:17	0:0	4	x0
op	168:20	0:0	4	+=
water	168:23	0:0	4	filter
op	168:29	0:0	4	->
water	168:31	0:0	4	fmt_in
op	168:37	0:0	4	.
water	168:38	0:0	4	video
op	168:43	0:0	4	.
water	168:44	0:0	4	i_visible_width
water	168:59	0:0	4	;
else	169:4	170:59	2
stmts	170:8	170:59	3	
water	170:8	0:0	4	src_rect
op	170:16	0:0	4	.
water	170:17	0:0	4	x1
op	170:20	0:0	4	+=
water	170:23	0:0	4	filter
op	170:29	0:0	4	->
water	170:31	0:0	4	fmt_in
op	170:37	0:0	4	.
water	170:38	0:0	4	video
op	170:43	0:0	4	.
water	170:44	0:0	4	i_visible_width
water	170:59	0:0	4	;
if	171:4	172:60	2	(vflip)
cond	171:8	171:8	3	vflip
water	171:8	0:0	4	vflip
stmts	172:8	172:60	3	
water	172:8	0:0	4	src_rect
op	172:16	0:0	4	.
water	172:17	0:0	4	y0
op	172:20	0:0	4	+=
water	172:23	0:0	4	filter
op	172:29	0:0	4	->
water	172:31	0:0	4	fmt_in
op	172:37	0:0	4	.
water	172:38	0:0	4	video
op	172:43	0:0	4	.
water	172:44	0:0	4	i_visible_height
water	172:60	0:0	4	;
else	173:4	174:60	2
stmts	174:8	174:60	3	
water	174:8	0:0	4	src_rect
op	174:16	0:0	4	.
water	174:17	0:0	4	y1
op	174:20	0:0	4	+=
water	174:23	0:0	4	filter
op	174:29	0:0	4	->
water	174:31	0:0	4	fmt_in
op	174:37	0:0	4	.
water	174:38	0:0	4	video
op	174:43	0:0	4	.
water	174:44	0:0	4	i_visible_height
water	174:60	0:0	4	;
decl	175:4	181:5	2	VdpRect	dst_rect
op	175:21	0:0	2	=
water	175:23	0:0	2	{
water	176:8	0:0	2	0
water	176:9	0:0	2	,
water	176:11	0:0	2	0
water	176:12	0:0	2	,
water	177:8	0:0	2	swap
water	177:13	0:0	2	?
water	177:15	0:0	2	filter
op	177:21	0:0	2	->
water	177:23	0:0	2	fmt_out
op	177:30	0:0	2	.
water	177:31	0:0	2	video
op	177:36	0:0	2	.
water	177:37	0:0	2	i_visible_height
water	178:13	0:0	2	:
water	178:15	0:0	2	filter
op	178:21	0:0	2	->
water	178:23	0:0	2	fmt_out
op	178:30	0:0	2	.
water	178:31	0:0	2	video
op	178:36	0:0	2	.
water	178:37	0:0	2	i_visible_width
water	178:52	0:0	2	,
water	179:8	0:0	2	swap
water	179:13	0:0	2	?
water	179:15	0:0	2	filter
op	179:21	0:0	2	->
water	179:23	0:0	2	fmt_out
op	179:30	0:0	2	.
water	179:31	0:0	2	video
op	179:36	0:0	2	.
water	179:37	0:0	2	i_visible_width
water	180:13	0:0	2	:
water	180:15	0:0	2	filter
op	180:21	0:0	2	->
water	180:23	0:0	2	fmt_out
op	180:30	0:0	2	.
water	180:31	0:0	2	video
op	180:36	0:0	2	.
water	180:37	0:0	2	i_visible_height
water	180:53	0:0	2	,
water	181:4	0:0	2	}
for	182:4	186:4	2	(unsigned i = 0 ;i < MAX_PAST;i ++)
forinit	182:9	182:23	3	unsigned i = 0 ;
water	182:9	0:0	4	unsigned
water	182:18	0:0	4	i
op	182:20	0:0	4	=
water	182:22	0:0	4	0
water	182:23	0:0	4	;
cond	182:25	182:29	3	i < MAX_PAST
water	182:25	0:0	4	i
op	182:27	0:0	4	<
water	182:29	0:0	4	MAX_PAST
forexpr	182:39	182:40	3	i ++
water	182:39	0:0	4	i
op	182:40	0:0	4	++
stmts	183:4	186:4	3	
water	183:4	0:0	4	{
water	184:8	0:0	4	f
op	184:10	0:0	4	=
water	184:12	0:0	4	sys
op	184:15	0:0	4	->
water	184:17	0:0	4	history
op	184:24	0:0	4	[
water	184:25	0:0	4	(
water	184:26	0:0	4	MAX_PAST
op	184:35	0:0	4	-
water	184:37	0:0	4	1
water	184:38	0:0	4	)
op	184:40	0:0	4	-
water	184:42	0:0	4	i
op	184:43	0:0	4	]
op	184:44	0:0	4	.
water	184:45	0:0	4	field
water	184:50	0:0	4	;
water	185:8	0:0	4	past
op	185:12	0:0	4	[
water	185:13	0:0	4	i
op	185:14	0:0	4	]
op	185:16	0:0	4	=
water	185:18	0:0	4	(
water	185:19	0:0	4	f
op	185:21	0:0	4	!=
water	185:24	0:0	4	NULL
water	185:28	0:0	4	)
water	185:30	0:0	4	?
water	185:32	0:0	4	f
op	185:33	0:0	4	->
water	185:35	0:0	4	frame
op	185:40	0:0	4	->
water	185:42	0:0	4	surface
water	185:50	0:0	4	:
water	185:52	0:0	4	VDP_INVALID_HANDLE
water	185:70	0:0	4	;
water	186:4	0:0	4	}
for	187:4	191:4	2	(unsigned i = 0 ;i < MAX_FUTURE;i ++)
forinit	187:9	187:23	3	unsigned i = 0 ;
water	187:9	0:0	4	unsigned
water	187:18	0:0	4	i
op	187:20	0:0	4	=
water	187:22	0:0	4	0
water	187:23	0:0	4	;
cond	187:25	187:29	3	i < MAX_FUTURE
water	187:25	0:0	4	i
op	187:27	0:0	4	<
water	187:29	0:0	4	MAX_FUTURE
forexpr	187:41	187:42	3	i ++
water	187:41	0:0	4	i
op	187:42	0:0	4	++
stmts	188:4	191:4	3	
water	188:4	0:0	4	{
water	189:8	0:0	4	f
op	189:10	0:0	4	=
water	189:12	0:0	4	sys
op	189:15	0:0	4	->
water	189:17	0:0	4	history
op	189:24	0:0	4	[
water	189:25	0:0	4	(
water	189:26	0:0	4	MAX_PAST
op	189:35	0:0	4	+
water	189:37	0:0	4	1
water	189:38	0:0	4	)
op	189:40	0:0	4	+
water	189:42	0:0	4	i
op	189:43	0:0	4	]
op	189:44	0:0	4	.
water	189:45	0:0	4	field
water	189:50	0:0	4	;
water	190:8	0:0	4	future
op	190:14	0:0	4	[
water	190:15	0:0	4	i
op	190:16	0:0	4	]
op	190:18	0:0	4	=
water	190:20	0:0	4	(
water	190:21	0:0	4	f
op	190:23	0:0	4	!=
water	190:26	0:0	4	NULL
water	190:30	0:0	4	)
water	190:32	0:0	4	?
water	190:34	0:0	4	f
op	190:35	0:0	4	->
water	190:37	0:0	4	frame
op	190:42	0:0	4	->
water	190:44	0:0	4	surface
water	190:52	0:0	4	:
water	190:54	0:0	4	VDP_INVALID_HANDLE
water	190:72	0:0	4	;
water	191:4	0:0	4	}
water	192:4	0:0	2	err
op	192:8	0:0	2	=
call	192:10	196:37	2	vdp_video_mixer_render
arg	192:33	192:41	3	sys->vdp
water	192:33	0:0	4	sys
op	192:36	0:0	4	->
water	192:38	0:0	4	vdp
arg	192:43	192:53	3	sys->mixer
water	192:43	0:0	4	sys
op	192:46	0:0	4	->
water	192:48	0:0	4	mixer
arg	192:55	192:73	3	VDP_INVALID_HANDLE
water	192:55	0:0	4	VDP_INVALID_HANDLE
arg	193:33	193:37	3	NULL
water	193:33	0:0	4	NULL
arg	193:39	193:48	3	structure
water	193:39	0:0	4	structure
arg	194:33	194:41	3	MAX_PAST
water	194:33	0:0	4	MAX_PAST
arg	194:43	194:47	3	past
water	194:43	0:0	4	past
arg	194:49	194:56	3	surface
water	194:49	0:0	4	surface
arg	194:58	194:68	3	MAX_FUTURE
water	194:58	0:0	4	MAX_FUTURE
arg	194:70	194:76	3	future
water	194:70	0:0	4	future
arg	195:33	195:42	3	&src_rect
op	195:33	0:0	4	&
water	195:34	0:0	4	src_rect
arg	195:44	195:50	3	output
water	195:44	0:0	4	output
arg	195:52	195:61	3	&dst_rect
op	195:52	0:0	4	&
water	195:53	0:0	4	dst_rect
arg	195:63	195:72	3	&dst_rect
op	195:63	0:0	4	&
water	195:64	0:0	4	dst_rect
arg	195:74	195:75	3	0
water	195:74	0:0	4	0
arg	196:33	196:37	3	NULL
water	196:33	0:0	4	NULL
water	196:38	0:0	2	;
if	197:4	202:4	2	(err != VDP_STATUS_OK)
cond	197:8	197:15	3	err != VDP_STATUS_OK
water	197:8	0:0	4	err
op	197:12	0:0	4	!=
water	197:15	0:0	4	VDP_STATUS_OK
stmts	198:4	202:4	3	
water	198:4	0:0	4	{
call	199:8	200:51	4	msg_Err
arg	199:16	199:22	5	filter
water	199:16	0:0	6	filter
arg	199:24	199:49	5	"video %s %s failure: %s"
water	199:24	0:0	6	"video %s %s failure: %s"
arg	199:51	199:58	5	"mixer"
water	199:51	0:0	6	"mixer"
arg	199:60	199:71	5	"rendering"
water	199:60	0:0	6	"rendering"
arg	200:16	200:51	5	vdp_get_error_string(sys->vdp,err)
call	200:16	200:50	6	vdp_get_error_string
arg	200:37	200:45	7	sys->vdp
water	200:37	0:0	8	sys
op	200:40	0:0	8	->
water	200:42	0:0	8	vdp
arg	200:47	200:50	7	err
water	200:47	0:0	8	err
water	200:52	0:0	4	;
goto	201:8	201:18	4	error
water	201:13	0:0	5	error
water	202:4	0:0	4	}
if	203:4	215:4	2	(swap)
cond	203:8	203:8	3	swap
water	203:8	0:0	4	swap
stmts	204:4	215:4	3	
water	204:4	0:0	4	{
water	205:8	0:0	4	err
op	205:12	0:0	4	=
call	205:14	207:47	4	vdp_output_surface_render_output_surface
arg	205:55	205:63	5	sys->vdp
water	205:55	0:0	6	sys
op	205:58	0:0	6	->
water	205:60	0:0	6	vdp
arg	206:12	206:31	5	dst->p_sys->surface
water	206:12	0:0	6	dst
op	206:15	0:0	6	->
water	206:17	0:0	6	p_sys
op	206:22	0:0	6	->
water	206:24	0:0	6	surface
arg	206:33	206:37	5	NULL
water	206:33	0:0	6	NULL
arg	206:39	206:45	5	output
water	206:39	0:0	6	output
arg	206:47	206:51	5	NULL
water	206:47	0:0	6	NULL
arg	206:53	206:57	5	NULL
water	206:53	0:0	6	NULL
arg	206:59	206:63	5	NULL
water	206:59	0:0	6	NULL
arg	207:12	207:47	5	VDP_OUTPUT_SURFACE_RENDER_ROTATE_90
water	207:12	0:0	6	VDP_OUTPUT_SURFACE_RENDER_ROTATE_90
water	207:48	0:0	4	;
call	208:8	208:51	4	vdp_output_surface_destroy
arg	208:35	208:43	5	sys->vdp
water	208:35	0:0	6	sys
op	208:38	0:0	6	->
water	208:40	0:0	6	vdp
arg	208:45	208:51	5	output
water	208:45	0:0	6	output
water	208:52	0:0	4	;
if	209:8	214:8	4	(err != VDP_STATUS_OK)
cond	209:12	209:19	5	err != VDP_STATUS_OK
water	209:12	0:0	6	err
op	209:16	0:0	6	!=
water	209:19	0:0	6	VDP_STATUS_OK
stmts	210:8	214:8	5	
water	210:8	0:0	6	{
call	211:12	212:55	6	msg_Err
arg	211:20	211:26	7	filter
water	211:20	0:0	8	filter
arg	211:28	211:54	7	"output %s %s failure: %s"
water	211:28	0:0	8	"output %s %s failure: %s"
arg	211:56	211:65	7	"surface"
water	211:56	0:0	8	"surface"
arg	211:67	211:75	7	"render"
water	211:67	0:0	8	"render"
arg	212:20	212:55	7	vdp_get_error_string(sys->vdp,err)
call	212:20	212:54	8	vdp_get_error_string
arg	212:41	212:49	9	sys->vdp
water	212:41	0:0	10	sys
op	212:44	0:0	10	->
water	212:46	0:0	10	vdp
arg	212:51	212:54	9	err
water	212:51	0:0	10	err
water	212:56	0:0	6	;
goto	213:12	213:22	6	error
water	213:17	0:0	7	error
water	214:8	0:0	6	}
water	215:4	0:0	4	}
label	216:0	216:4	2	skip :
water	217:4	0:0	2	f
op	217:6	0:0	2	=
water	217:8	0:0	2	sys
op	217:11	0:0	2	->
water	217:13	0:0	2	history
op	217:20	0:0	2	[
water	217:21	0:0	2	0
op	217:22	0:0	2	]
op	217:23	0:0	2	.
water	217:24	0:0	2	field
water	217:29	0:0	2	;
if	218:4	219:21	2	(f != NULL)
cond	218:8	218:13	3	f != NULL
water	218:8	0:0	4	f
op	218:10	0:0	4	!=
water	218:13	0:0	4	NULL
stmts	219:8	219:21	3	
call	219:8	219:20	4	f->destroy
arg	219:19	219:20	5	f
water	219:19	0:0	6	f
water	219:21	0:0	4	;
call	220:4	221:62	2	memmove
arg	220:12	220:24	3	sys->history
water	220:12	0:0	4	sys
op	220:15	0:0	4	->
water	220:17	0:0	4	history
arg	220:26	220:42	3	sys->history+1
water	220:26	0:0	4	sys
op	220:29	0:0	4	->
water	220:31	0:0	4	history
op	220:39	0:0	4	+
water	220:41	0:0	4	1
arg	221:12	221:62	3	sizeof(sys->history[0])*(MAX_PAST+MAX_FUTURE)
op	221:12	0:0	4	sizeof
water	221:19	0:0	4	(
water	221:20	0:0	4	sys
op	221:23	0:0	4	->
water	221:25	0:0	4	history
op	221:32	0:0	4	[
water	221:33	0:0	4	0
op	221:34	0:0	4	]
water	221:35	0:0	4	)
op	221:37	0:0	4	*
water	221:39	0:0	4	(
water	221:40	0:0	4	MAX_PAST
op	221:49	0:0	4	+
water	221:51	0:0	4	MAX_FUTURE
water	221:61	0:0	4	)
water	221:63	0:0	2	;
return	222:4	222:14	2	dst
water	222:11	0:0	3	dst
label	223:0	223:5	2	error :
call	224:4	224:23	2	picture_Release
arg	224:20	224:23	3	dst
water	224:20	0:0	4	dst
water	224:24	0:0	2	;
water	225:4	0:0	2	dst
op	225:8	0:0	2	=
water	225:10	0:0	2	NULL
water	225:14	0:0	2	;
goto	226:4	226:13	2	skip
water	226:9	0:0	3	skip
