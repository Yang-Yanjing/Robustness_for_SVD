func	2:0	151:0	0	static int	Demux
params	2:16	0:0	1	
param	2:18	2:35	2	demux_t *	p_demux
stmnts	0:0	150:12	1	
decl	4:4	4:39	2	demux_sys_t	*p_sys
op	4:23	0:0	2	=
water	4:25	0:0	2	p_demux
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:25	2	uint8_t	header[5]
decl	6:4	6:25	2	const uint8_t	*p_peek
decl	7:4	7:22	2	int	i_size
decl	8:4	8:24	2	block_t	*p_frame
for	9:4	49:4	2	(;;)
forinit	9:9	9:9	3	;
water	9:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	10:4	49:4	3	
water	10:4	0:0	4	{
if	11:8	15:8	4	(stream_Peek (p_demux -> s ,& p_peek ,8 ) < 8)
cond	11:12	11:52	5	stream_Peek (p_demux -> s ,& p_peek ,8 ) < 8
call	11:12	11:48	6	stream_Peek
arg	11:25	11:35	7	p_demux->s
water	11:25	0:0	8	p_demux
op	11:32	0:0	8	->
water	11:34	0:0	8	s
arg	11:37	11:44	7	&p_peek
op	11:37	0:0	8	&
water	11:38	0:0	8	p_peek
arg	11:46	11:48	7	8
water	11:46	0:0	8	8
op	11:50	0:0	6	<
water	11:52	0:0	6	8
stmts	12:8	15:8	5	
water	12:8	0:0	6	{
call	13:12	13:45	6	msg_Warn
arg	13:22	13:29	7	p_demux
water	13:22	0:0	8	p_demux
arg	13:31	13:45	7	"cannot peek"
water	13:31	0:0	8	"cannot peek"
water	13:46	0:0	6	;
return	14:12	14:20	6	0
water	14:19	0:0	7	0
water	15:8	0:0	6	}
if	16:8	20:8	4	(!memcmp (p_peek ,"NSVf" ,4 ))
cond	16:12	16:39	5	!memcmp (p_peek ,"NSVf" ,4 )
op	16:12	0:0	6	!
call	16:13	16:39	6	memcmp
arg	16:21	16:27	7	p_peek
water	16:21	0:0	8	p_peek
arg	16:29	16:35	7	"NSVf"
water	16:29	0:0	8	"NSVf"
arg	16:37	16:39	7	4
water	16:37	0:0	8	4
stmts	17:8	20:8	5	
water	17:8	0:0	6	{
if	18:12	19:25	6	(ReadNSVf (p_demux ))
cond	18:16	18:34	7	ReadNSVf (p_demux )
call	18:16	18:34	8	ReadNSVf
arg	18:26	18:34	9	p_demux
water	18:26	0:0	10	p_demux
stmts	19:16	19:25	7	
return	19:16	19:25	8	-1
op	19:23	0:0	9	-
water	19:24	0:0	9	1
water	20:8	0:0	6	}
else	21:8	32:8	4
stmts	21:13	32:8	5	
if	21:13	32:8	6	(!memcmp (p_peek ,"NSVs" ,4 ))
cond	21:17	21:44	7	!memcmp (p_peek ,"NSVs" ,4 )
op	21:17	0:0	8	!
call	21:18	21:44	8	memcmp
arg	21:26	21:32	9	p_peek
water	21:26	0:0	10	p_peek
arg	21:34	21:40	9	"NSVs"
water	21:34	0:0	10	"NSVs"
arg	21:42	21:44	9	4
water	21:42	0:0	10	4
stmts	22:8	32:8	7	
water	22:8	0:0	8	{
if	23:12	28:12	8	(p_sys -> b_start_record)
cond	23:16	23:23	9	p_sys -> b_start_record
water	23:16	0:0	10	p_sys
op	23:21	0:0	10	->
water	23:23	0:0	10	b_start_record
stmts	24:12	28:12	9	
water	24:12	0:0	10	{
call	26:16	26:81	10	stream_Control
arg	26:32	26:42	11	p_demux->s
water	26:32	0:0	12	p_demux
op	26:39	0:0	12	->
water	26:41	0:0	12	s
arg	26:44	26:67	11	STREAM_SET_RECORD_STATE
water	26:44	0:0	12	STREAM_SET_RECORD_STATE
arg	26:69	26:73	11	true
water	26:69	0:0	12	true
arg	26:75	26:81	11	"nsv"
water	26:75	0:0	12	"nsv"
water	26:82	0:0	10	;
water	27:16	0:0	10	p_sys
op	27:21	0:0	10	->
water	27:23	0:0	10	b_start_record
op	27:38	0:0	10	=
water	27:40	0:0	10	false
water	27:45	0:0	10	;
water	28:12	0:0	10	}
if	29:12	30:25	8	(ReadNSVs (p_demux ))
cond	29:16	29:34	9	ReadNSVs (p_demux )
call	29:16	29:34	10	ReadNSVs
arg	29:26	29:34	11	p_demux
water	29:26	0:0	12	p_demux
stmts	30:16	30:25	9	
return	30:16	30:25	10	-1
op	30:23	0:0	11	-
water	30:24	0:0	11	1
break	31:12	31:17	8	
water	32:8	0:0	8	}
else	33:8	42:8	4
stmts	33:13	42:8	5	
if	33:13	42:8	6	(GetWLE (p_peek ) == 0 xbeef)
cond	33:17	33:38	7	GetWLE (p_peek ) == 0 xbeef
call	33:17	33:32	8	GetWLE
arg	33:25	33:32	9	p_peek
water	33:25	0:0	10	p_peek
op	33:34	0:0	8	==
water	33:37	0:0	8	0
water	33:38	0:0	8	xbeef
stmts	34:8	42:8	7	
water	34:8	0:0	8	{
if	36:12	40:12	8	(stream_Read (p_demux -> s ,NULL ,2 ) < 2)
cond	36:16	36:53	9	stream_Read (p_demux -> s ,NULL ,2 ) < 2
call	36:16	36:49	10	stream_Read
arg	36:29	36:39	11	p_demux->s
water	36:29	0:0	12	p_demux
op	36:36	0:0	12	->
water	36:38	0:0	12	s
arg	36:41	36:45	11	NULL
water	36:41	0:0	12	NULL
arg	36:47	36:49	11	2
water	36:47	0:0	12	2
op	36:51	0:0	10	<
water	36:53	0:0	10	2
stmts	37:12	40:12	9	
water	37:12	0:0	10	{
call	38:16	38:49	10	msg_Warn
arg	38:26	38:33	11	p_demux
water	38:26	0:0	12	p_demux
arg	38:35	38:49	11	"cannot read"
water	38:35	0:0	12	"cannot read"
water	38:50	0:0	10	;
return	39:16	39:24	10	0
water	39:23	0:0	11	0
water	40:12	0:0	10	}
break	41:12	41:17	8	
water	42:8	0:0	8	}
else	43:8	48:8	4
stmts	44:8	48:8	5	
water	44:8	0:0	6	{
call	45:12	45:103	6	msg_Err
arg	45:21	45:28	7	p_demux
water	45:21	0:0	8	p_demux
arg	45:30	45:62	7	"invalid signature 0x%x (%4.4s)"
water	45:30	0:0	8	"invalid signature 0x%x (%4.4s)"
arg	45:64	45:81	7	GetDWLE(p_peek)
call	45:64	45:80	8	GetDWLE
arg	45:73	45:80	9	p_peek
water	45:73	0:0	10	p_peek
arg	45:83	45:103	7	(constchar*)p_peek
water	45:83	0:0	8	(
water	45:84	0:0	8	const
water	45:90	0:0	8	char
op	45:94	0:0	8	*
water	45:95	0:0	8	)
water	45:96	0:0	8	p_peek
water	45:104	0:0	6	;
if	46:12	47:25	6	(ReSynch (p_demux ))
cond	46:16	46:33	7	ReSynch (p_demux )
call	46:16	46:33	8	ReSynch
arg	46:25	46:33	9	p_demux
water	46:25	0:0	10	p_demux
stmts	47:16	47:25	7	
return	47:16	47:25	8	-1
op	47:23	0:0	9	-
water	47:24	0:0	9	1
water	48:8	0:0	6	}
water	49:4	0:0	4	}
if	50:4	54:4	2	(stream_Read (p_demux -> s ,header ,5 ) < 5)
cond	50:8	50:47	3	stream_Read (p_demux -> s ,header ,5 ) < 5
call	50:8	50:43	4	stream_Read
arg	50:21	50:31	5	p_demux->s
water	50:21	0:0	6	p_demux
op	50:28	0:0	6	->
water	50:30	0:0	6	s
arg	50:33	50:39	5	header
water	50:33	0:0	6	header
arg	50:41	50:43	5	5
water	50:41	0:0	6	5
op	50:45	0:0	4	<
water	50:47	0:0	4	5
stmts	51:4	54:4	3	
water	51:4	0:0	4	{
call	52:8	52:41	4	msg_Warn
arg	52:18	52:25	5	p_demux
water	52:18	0:0	6	p_demux
arg	52:27	52:41	5	"cannot read"
water	52:27	0:0	6	"cannot read"
water	52:42	0:0	4	;
return	53:8	53:16	4	0
water	53:15	0:0	5	0
water	54:4	0:0	4	}
call	56:4	56:74	2	es_out_Control
arg	56:20	56:32	3	p_demux->out
water	56:20	0:0	4	p_demux
op	56:27	0:0	4	->
water	56:29	0:0	4	out
arg	56:34	56:48	3	ES_OUT_SET_PCR
water	56:34	0:0	4	ES_OUT_SET_PCR
arg	56:50	56:74	3	VLC_TS_0+p_sys->i_pcr
water	56:50	0:0	4	VLC_TS_0
op	56:59	0:0	4	+
water	56:61	0:0	4	p_sys
op	56:66	0:0	4	->
water	56:68	0:0	4	i_pcr
water	56:75	0:0	2	;
water	58:4	0:0	2	i_size
op	58:11	0:0	2	=
water	58:13	0:0	2	(
water	58:15	0:0	2	header
op	58:21	0:0	2	[
water	58:22	0:0	2	0
op	58:23	0:0	2	]
op	58:25	0:0	2	>>
water	58:28	0:0	2	4
water	58:30	0:0	2	)
op	58:32	0:0	2	|
water	58:34	0:0	2	(
water	58:36	0:0	2	header
op	58:42	0:0	2	[
water	58:43	0:0	2	1
op	58:44	0:0	2	]
op	58:46	0:0	2	<<
water	58:49	0:0	2	4
water	58:51	0:0	2	)
op	58:53	0:0	2	|
water	58:55	0:0	2	(
water	58:57	0:0	2	header
op	58:63	0:0	2	[
water	58:64	0:0	2	2
op	58:65	0:0	2	]
op	58:67	0:0	2	<<
water	58:70	0:0	2	12
water	58:73	0:0	2	)
water	58:74	0:0	2	;
if	59:4	120:4	2	(i_size > 0)
cond	59:8	59:17	3	i_size > 0
water	59:8	0:0	4	i_size
op	59:15	0:0	4	>
water	59:17	0:0	4	0
stmts	60:4	120:4	3	
water	60:4	0:0	4	{
if	62:8	113:8	4	(( header [ 0 ] & 0 x0f ) != 0 x0)
cond	62:12	62:33	5	( header [ 0 ] & 0 x0f ) != 0 x0
water	62:12	0:0	6	(
water	62:13	0:0	6	header
op	62:19	0:0	6	[
water	62:20	0:0	6	0
op	62:21	0:0	6	]
op	62:22	0:0	6	&
water	62:23	0:0	6	0
water	62:24	0:0	6	x0f
water	62:27	0:0	6	)
op	62:29	0:0	6	!=
water	62:32	0:0	6	0
water	62:33	0:0	6	x0
stmts	63:8	113:8	5	
water	63:8	0:0	6	{
decl	64:12	64:31	6	uint8_t	aux[6]
decl	65:12	65:30	6	int	i_aux
decl	66:12	66:28	6	vlc_fourcc_t	fcc
if	67:12	71:12	6	(stream_Read (p_demux -> s ,aux ,6 ) < 6)
cond	67:16	67:52	7	stream_Read (p_demux -> s ,aux ,6 ) < 6
call	67:16	67:48	8	stream_Read
arg	67:29	67:39	9	p_demux->s
water	67:29	0:0	10	p_demux
op	67:36	0:0	10	->
water	67:38	0:0	10	s
arg	67:41	67:44	9	aux
water	67:41	0:0	10	aux
arg	67:46	67:48	9	6
water	67:46	0:0	10	6
op	67:50	0:0	8	<
water	67:52	0:0	8	6
stmts	68:12	71:12	7	
water	68:12	0:0	8	{
call	69:16	69:49	8	msg_Warn
arg	69:26	69:33	9	p_demux
water	69:26	0:0	10	p_demux
arg	69:35	69:49	9	"cannot read"
water	69:35	0:0	10	"cannot read"
water	69:50	0:0	8	;
return	70:16	70:24	8	0
water	70:23	0:0	9	0
water	71:12	0:0	8	}
water	72:12	0:0	6	i_aux
op	72:18	0:0	6	=
call	72:20	72:32	6	GetWLE
arg	72:28	72:32	7	aux
water	72:28	0:0	8	aux
water	72:33	0:0	6	;
water	73:12	0:0	6	fcc
op	73:18	0:0	6	=
call	73:20	73:63	6	VLC_FOURCC
arg	73:32	73:38	7	aux[2]
water	73:32	0:0	8	aux
op	73:35	0:0	8	[
water	73:36	0:0	8	2
op	73:37	0:0	8	]
arg	73:40	73:46	7	aux[3]
water	73:40	0:0	8	aux
op	73:43	0:0	8	[
water	73:44	0:0	8	3
op	73:45	0:0	8	]
arg	73:48	73:54	7	aux[4]
water	73:48	0:0	8	aux
op	73:51	0:0	8	[
water	73:52	0:0	8	4
op	73:53	0:0	8	]
arg	73:56	73:63	7	aux[5]
water	73:56	0:0	8	aux
op	73:59	0:0	8	[
water	73:60	0:0	8	5
op	73:61	0:0	8	]
water	73:64	0:0	6	;
call	74:12	75:55	6	msg_Dbg
arg	74:21	74:28	7	p_demux
water	74:21	0:0	8	p_demux
arg	74:30	74:63	7	"Belekas: %d - size=%d fcc=%4.4s"
water	74:30	0:0	8	"Belekas: %d - size=%d fcc=%4.4s"
arg	75:21	75:34	7	header[0]&0xf
water	75:21	0:0	8	header
op	75:27	0:0	8	[
water	75:28	0:0	8	0
op	75:29	0:0	8	]
op	75:30	0:0	8	&
water	75:31	0:0	8	0
water	75:32	0:0	8	xf
arg	75:36	75:41	7	i_aux
water	75:36	0:0	8	i_aux
arg	75:43	75:55	7	(char*)&fcc
water	75:43	0:0	8	(
water	75:44	0:0	8	char
op	75:48	0:0	8	*
water	75:49	0:0	8	)
op	75:50	0:0	8	&
water	75:51	0:0	8	fcc
water	75:56	0:0	6	;
if	76:12	102:12	6	(fcc ==VLC_FOURCC ('S' ,'U' ,'B' ,'T' ) && i_aux > 2)
cond	76:16	76:67	7	fcc ==VLC_FOURCC ('S' ,'U' ,'B' ,'T' ) && i_aux > 2
water	76:16	0:0	8	fcc
op	76:20	0:0	8	==
call	76:23	76:54	8	VLC_FOURCC
arg	76:35	76:38	9	'S'
water	76:35	0:0	10	'S'
arg	76:40	76:43	9	'U'
water	76:40	0:0	10	'U'
arg	76:45	76:48	9	'B'
water	76:45	0:0	10	'B'
arg	76:50	76:54	9	'T'
water	76:50	0:0	10	'T'
op	76:56	0:0	8	&&
water	76:59	0:0	8	i_aux
op	76:65	0:0	8	>
water	76:67	0:0	8	2
stmts	77:12	102:12	7	
water	77:12	0:0	8	{
if	78:16	83:16	8	(p_sys -> p_sub == NULL)
cond	78:20	78:36	9	p_sys -> p_sub == NULL
water	78:20	0:0	10	p_sys
op	78:25	0:0	10	->
water	78:27	0:0	10	p_sub
op	78:33	0:0	10	==
water	78:36	0:0	10	NULL
stmts	79:16	83:16	9	
water	79:16	0:0	10	{
water	80:20	0:0	10	p_sys
op	80:25	0:0	10	->
water	80:27	0:0	10	fmt_sub
op	80:34	0:0	10	.
water	80:35	0:0	10	i_codec
op	80:43	0:0	10	=
call	80:45	80:76	10	VLC_FOURCC
arg	80:57	80:60	11	's'
water	80:57	0:0	12	's'
arg	80:62	80:65	11	'u'
water	80:62	0:0	12	'u'
arg	80:67	80:70	11	'b'
water	80:67	0:0	12	'b'
arg	80:72	80:76	11	't'
water	80:72	0:0	12	't'
water	80:77	0:0	10	;
water	81:20	0:0	10	p_sys
op	81:25	0:0	10	->
water	81:27	0:0	10	p_sub
op	81:33	0:0	10	=
call	81:35	81:77	10	es_out_Add
arg	81:47	81:59	11	p_demux->out
water	81:47	0:0	12	p_demux
op	81:54	0:0	12	->
water	81:56	0:0	12	out
arg	81:61	81:77	11	&p_sys->fmt_sub
op	81:61	0:0	12	&
water	81:62	0:0	12	p_sys
op	81:67	0:0	12	->
water	81:69	0:0	12	fmt_sub
water	81:78	0:0	10	;
call	82:20	82:78	10	es_out_Control
arg	82:36	82:48	11	p_demux->out
water	82:36	0:0	12	p_demux
op	82:43	0:0	12	->
water	82:45	0:0	12	out
arg	82:50	82:63	11	ES_OUT_SET_ES
water	82:50	0:0	12	ES_OUT_SET_ES
arg	82:65	82:78	11	p_sys->p_sub
water	82:65	0:0	12	p_sys
op	82:70	0:0	12	->
water	82:72	0:0	12	p_sub
water	82:79	0:0	10	;
water	83:16	0:0	10	}
call	84:16	84:49	8	stream_Read
arg	84:29	84:39	9	p_demux->s
water	84:29	0:0	10	p_demux
op	84:36	0:0	10	->
water	84:38	0:0	10	s
arg	84:41	84:45	9	NULL
water	84:41	0:0	10	NULL
arg	84:47	84:49	9	2
water	84:47	0:0	10	2
water	84:50	0:0	8	;
if	85:16	101:16	8	(( p_frame =stream_Block (p_demux -> s ,i_aux - 2 ) ))
cond	85:20	85:70	9	( p_frame =stream_Block (p_demux -> s ,i_aux - 2 ) )
water	85:20	0:0	10	(
water	85:22	0:0	10	p_frame
op	85:30	0:0	10	=
call	85:32	85:68	10	stream_Block
arg	85:46	85:56	11	p_demux->s
water	85:46	0:0	12	p_demux
op	85:53	0:0	12	->
water	85:55	0:0	12	s
arg	85:58	85:68	11	i_aux-2
water	85:58	0:0	12	i_aux
op	85:64	0:0	12	-
water	85:66	0:0	12	2
water	85:70	0:0	10	)
stmts	86:16	101:16	9	
water	86:16	0:0	10	{
decl	87:20	87:50	10	uint8_t	*p
op	87:31	0:0	10	=
water	87:33	0:0	10	p_frame
op	87:40	0:0	10	->
water	87:42	0:0	10	p_buffer
while	88:20	91:20	10	(p < & p_frame -> p_buffer [ p_frame -> i_buffer ] && * p != 0)
cond	88:27	88:78	11	p < & p_frame -> p_buffer [ p_frame -> i_buffer ] && * p != 0
water	88:27	0:0	12	p
op	88:29	0:0	12	<
op	88:31	0:0	12	&
water	88:32	0:0	12	p_frame
op	88:39	0:0	12	->
water	88:41	0:0	12	p_buffer
op	88:49	0:0	12	[
water	88:50	0:0	12	p_frame
op	88:57	0:0	12	->
water	88:59	0:0	12	i_buffer
op	88:67	0:0	12	]
op	88:69	0:0	12	&&
op	88:72	0:0	12	*
water	88:73	0:0	12	p
op	88:75	0:0	12	!=
water	88:78	0:0	12	0
stmts	89:20	91:20	11	
water	89:20	0:0	12	{
water	90:24	0:0	12	p
op	90:25	0:0	12	++
water	90:27	0:0	12	;
water	91:20	0:0	12	}
if	92:20	96:20	10	(* p == 0 && p + 1 < & p_frame -> p_buffer [ p_frame -> i_buffer ])
cond	92:24	92:79	11	* p == 0 && p + 1 < & p_frame -> p_buffer [ p_frame -> i_buffer ]
op	92:24	0:0	12	*
water	92:25	0:0	12	p
op	92:27	0:0	12	==
water	92:30	0:0	12	0
op	92:32	0:0	12	&&
water	92:35	0:0	12	p
op	92:37	0:0	12	+
water	92:39	0:0	12	1
op	92:41	0:0	12	<
op	92:43	0:0	12	&
water	92:44	0:0	12	p_frame
op	92:51	0:0	12	->
water	92:53	0:0	12	p_buffer
op	92:61	0:0	12	[
water	92:62	0:0	12	p_frame
op	92:69	0:0	12	->
water	92:71	0:0	12	i_buffer
op	92:79	0:0	12	]
stmts	93:20	96:20	11	
water	93:20	0:0	12	{
water	94:24	0:0	12	p_frame
op	94:31	0:0	12	->
water	94:33	0:0	12	i_buffer
op	94:42	0:0	12	-=
water	94:45	0:0	12	p
op	94:47	0:0	12	+
water	94:49	0:0	12	1
op	94:51	0:0	12	-
water	94:53	0:0	12	p_frame
op	94:60	0:0	12	->
water	94:62	0:0	12	p_buffer
water	94:70	0:0	12	;
water	95:24	0:0	12	p_frame
op	95:31	0:0	12	->
water	95:33	0:0	12	p_buffer
op	95:42	0:0	12	=
water	95:44	0:0	12	p
op	95:46	0:0	12	+
water	95:48	0:0	12	1
water	95:49	0:0	12	;
water	96:20	0:0	12	}
water	98:20	0:0	10	p_frame
op	98:27	0:0	10	->
water	98:29	0:0	10	i_pts
op	98:35	0:0	10	=
water	98:37	0:0	10	VLC_TS_0
op	98:46	0:0	10	+
water	98:48	0:0	10	p_sys
op	98:53	0:0	10	->
water	98:55	0:0	10	i_pcr
water	98:60	0:0	10	;
water	99:20	0:0	10	p_frame
op	99:27	0:0	10	->
water	99:29	0:0	10	i_dts
op	99:35	0:0	10	=
water	99:37	0:0	10	VLC_TS_0
op	99:46	0:0	10	+
water	99:48	0:0	10	p_sys
op	99:53	0:0	10	->
water	99:55	0:0	10	i_pcr
op	99:61	0:0	10	+
water	99:63	0:0	10	4000000
water	99:70	0:0	10	;
call	100:20	100:69	10	es_out_Send
arg	100:33	100:45	11	p_demux->out
water	100:33	0:0	12	p_demux
op	100:40	0:0	12	->
water	100:42	0:0	12	out
arg	100:47	100:59	11	p_sys->p_sub
water	100:47	0:0	12	p_sys
op	100:52	0:0	12	->
water	100:54	0:0	12	p_sub
arg	100:61	100:69	11	p_frame
water	100:61	0:0	12	p_frame
water	100:70	0:0	10	;
water	101:16	0:0	10	}
water	102:12	0:0	8	}
else	103:12	111:12	6
stmts	104:12	111:12	7	
water	104:12	0:0	8	{
if	106:16	110:16	8	(stream_Read (p_demux -> s ,NULL ,i_aux ) < i_aux)
cond	106:20	106:61	9	stream_Read (p_demux -> s ,NULL ,i_aux ) < i_aux
call	106:20	106:57	10	stream_Read
arg	106:33	106:43	11	p_demux->s
water	106:33	0:0	12	p_demux
op	106:40	0:0	12	->
water	106:42	0:0	12	s
arg	106:45	106:49	11	NULL
water	106:45	0:0	12	NULL
arg	106:51	106:57	11	i_aux
water	106:51	0:0	12	i_aux
op	106:59	0:0	10	<
water	106:61	0:0	10	i_aux
stmts	107:16	110:16	9	
water	107:16	0:0	10	{
call	108:20	108:53	10	msg_Warn
arg	108:30	108:37	11	p_demux
water	108:30	0:0	12	p_demux
arg	108:39	108:53	11	"cannot read"
water	108:39	0:0	12	"cannot read"
water	108:54	0:0	10	;
return	109:20	109:28	10	0
water	109:27	0:0	11	0
water	110:16	0:0	10	}
water	111:12	0:0	8	}
water	112:12	0:0	6	i_size
op	112:19	0:0	6	-=
water	112:22	0:0	6	6
op	112:24	0:0	6	+
water	112:26	0:0	6	i_aux
water	112:31	0:0	6	;
water	113:8	0:0	6	}
if	115:8	119:8	4	(i_size > 0 && ( p_frame =stream_Block (p_demux -> s ,i_size ) ))
cond	115:12	115:73	5	i_size > 0 && ( p_frame =stream_Block (p_demux -> s ,i_size ) )
water	115:12	0:0	6	i_size
op	115:19	0:0	6	>
water	115:21	0:0	6	0
op	115:23	0:0	6	&&
water	115:26	0:0	6	(
water	115:28	0:0	6	p_frame
op	115:36	0:0	6	=
call	115:38	115:71	6	stream_Block
arg	115:52	115:62	7	p_demux->s
water	115:52	0:0	8	p_demux
op	115:59	0:0	8	->
water	115:61	0:0	8	s
arg	115:64	115:71	7	i_size
water	115:64	0:0	8	i_size
water	115:73	0:0	6	)
stmts	116:8	119:8	5	
water	116:8	0:0	6	{
water	117:12	0:0	6	p_frame
op	117:19	0:0	6	->
water	117:21	0:0	6	i_dts
op	117:27	0:0	6	=
water	117:29	0:0	6	VLC_TS_0
op	117:38	0:0	6	+
water	117:40	0:0	6	p_sys
op	117:45	0:0	6	->
water	117:47	0:0	6	i_pcr
water	117:52	0:0	6	;
call	118:12	118:63	6	es_out_Send
arg	118:25	118:37	7	p_demux->out
water	118:25	0:0	8	p_demux
op	118:32	0:0	8	->
water	118:34	0:0	8	out
arg	118:39	118:53	7	p_sys->p_video
water	118:39	0:0	8	p_sys
op	118:44	0:0	8	->
water	118:46	0:0	8	p_video
arg	118:55	118:63	7	p_frame
water	118:55	0:0	8	p_frame
water	118:64	0:0	6	;
water	119:8	0:0	6	}
water	120:4	0:0	4	}
water	122:4	0:0	2	i_size
op	122:11	0:0	2	=
water	122:13	0:0	2	header
op	122:19	0:0	2	[
water	122:20	0:0	2	3
op	122:21	0:0	2	]
op	122:23	0:0	2	|
water	122:25	0:0	2	(
water	122:27	0:0	2	header
op	122:33	0:0	2	[
water	122:34	0:0	2	4
op	122:35	0:0	2	]
op	122:37	0:0	2	<<
water	122:40	0:0	2	8
water	122:42	0:0	2	)
water	122:43	0:0	2	;
if	123:4	144:4	2	(i_size > 0)
cond	123:8	123:17	3	i_size > 0
water	123:8	0:0	4	i_size
op	123:15	0:0	4	>
water	123:17	0:0	4	0
stmts	124:4	144:4	3	
water	124:4	0:0	4	{
if	126:8	133:8	4	(p_sys -> fmt_audio . i_codec ==VLC_FOURCC ('a' ,'r' ,'a' ,'w' ))
cond	126:12	126:71	5	p_sys -> fmt_audio . i_codec ==VLC_FOURCC ('a' ,'r' ,'a' ,'w' )
water	126:12	0:0	6	p_sys
op	126:17	0:0	6	->
water	126:19	0:0	6	fmt_audio
op	126:28	0:0	6	.
water	126:29	0:0	6	i_codec
op	126:37	0:0	6	==
call	126:40	126:71	6	VLC_FOURCC
arg	126:52	126:55	7	'a'
water	126:52	0:0	8	'a'
arg	126:57	126:60	7	'r'
water	126:57	0:0	8	'r'
arg	126:62	126:65	7	'a'
water	126:62	0:0	8	'a'
arg	126:67	126:71	7	'w'
water	126:67	0:0	8	'w'
stmts	127:8	133:8	5	
water	127:8	0:0	6	{
decl	128:12	128:24	6	uint8_t	h[4]
call	129:12	129:42	6	stream_Read
arg	129:25	129:35	7	p_demux->s
water	129:25	0:0	8	p_demux
op	129:32	0:0	8	->
water	129:34	0:0	8	s
arg	129:37	129:38	7	h
water	129:37	0:0	8	h
arg	129:40	129:42	7	4
water	129:40	0:0	8	4
water	129:43	0:0	6	;
water	130:12	0:0	6	p_sys
op	130:17	0:0	6	->
water	130:19	0:0	6	fmt_audio
op	130:28	0:0	6	.
water	130:29	0:0	6	audio
op	130:34	0:0	6	.
water	130:35	0:0	6	i_channels
op	130:46	0:0	6	=
water	130:48	0:0	6	h
op	130:49	0:0	6	[
water	130:50	0:0	6	1
op	130:51	0:0	6	]
water	130:52	0:0	6	;
water	131:12	0:0	6	p_sys
op	131:17	0:0	6	->
water	131:19	0:0	6	fmt_audio
op	131:28	0:0	6	.
water	131:29	0:0	6	audio
op	131:34	0:0	6	.
water	131:35	0:0	6	i_rate
op	131:42	0:0	6	=
call	131:44	131:58	6	GetWLE
arg	131:52	131:58	7	&h[2]
op	131:52	0:0	8	&
water	131:53	0:0	8	h
op	131:54	0:0	8	[
water	131:55	0:0	8	2
op	131:56	0:0	8	]
water	131:59	0:0	6	;
water	132:12	0:0	6	i_size
op	132:19	0:0	6	-=
water	132:22	0:0	6	4
water	132:23	0:0	6	;
water	133:8	0:0	6	}
if	134:8	137:8	4	(p_sys -> p_audio == NULL)
cond	134:12	134:30	5	p_sys -> p_audio == NULL
water	134:12	0:0	6	p_sys
op	134:17	0:0	6	->
water	134:19	0:0	6	p_audio
op	134:27	0:0	6	==
water	134:30	0:0	6	NULL
stmts	135:8	137:8	5	
water	135:8	0:0	6	{
water	136:12	0:0	6	p_sys
op	136:17	0:0	6	->
water	136:19	0:0	6	p_audio
op	136:27	0:0	6	=
call	136:29	136:73	6	es_out_Add
arg	136:41	136:53	7	p_demux->out
water	136:41	0:0	8	p_demux
op	136:48	0:0	8	->
water	136:50	0:0	8	out
arg	136:55	136:73	7	&p_sys->fmt_audio
op	136:55	0:0	8	&
water	136:56	0:0	8	p_sys
op	136:61	0:0	8	->
water	136:63	0:0	8	fmt_audio
water	136:74	0:0	6	;
water	137:8	0:0	6	}
if	138:8	143:8	4	(( p_frame =stream_Block (p_demux -> s ,i_size ) ))
cond	138:12	138:59	5	( p_frame =stream_Block (p_demux -> s ,i_size ) )
water	138:12	0:0	6	(
water	138:14	0:0	6	p_frame
op	138:22	0:0	6	=
call	138:24	138:57	6	stream_Block
arg	138:38	138:48	7	p_demux->s
water	138:38	0:0	8	p_demux
op	138:45	0:0	8	->
water	138:47	0:0	8	s
arg	138:50	138:57	7	i_size
water	138:50	0:0	8	i_size
water	138:59	0:0	6	)
stmts	139:8	143:8	5	
water	139:8	0:0	6	{
water	140:12	0:0	6	p_frame
op	140:19	0:0	6	->
water	140:21	0:0	6	i_dts
op	140:27	0:0	6	=
water	141:12	0:0	6	p_frame
op	141:19	0:0	6	->
water	141:21	0:0	6	i_pts
op	141:27	0:0	6	=
water	141:29	0:0	6	VLC_TS_0
op	141:38	0:0	6	+
water	141:40	0:0	6	p_sys
op	141:45	0:0	6	->
water	141:47	0:0	6	i_pcr
water	141:52	0:0	6	;
call	142:12	142:63	6	es_out_Send
arg	142:25	142:37	7	p_demux->out
water	142:25	0:0	8	p_demux
op	142:32	0:0	8	->
water	142:34	0:0	8	out
arg	142:39	142:53	7	p_sys->p_audio
water	142:39	0:0	8	p_sys
op	142:44	0:0	8	->
water	142:46	0:0	8	p_audio
arg	142:55	142:63	7	p_frame
water	142:55	0:0	8	p_frame
water	142:64	0:0	6	;
water	143:8	0:0	6	}
water	144:4	0:0	4	}
water	145:4	0:0	2	p_sys
op	145:9	0:0	2	->
water	145:11	0:0	2	i_pcr
op	145:17	0:0	2	+=
water	145:20	0:0	2	p_sys
op	145:25	0:0	2	->
water	145:27	0:0	2	i_pcr_inc
water	145:36	0:0	2	;
if	146:4	149:4	2	(p_sys -> i_time >= 0)
cond	146:8	146:25	3	p_sys -> i_time >= 0
water	146:8	0:0	4	p_sys
op	146:13	0:0	4	->
water	146:15	0:0	4	i_time
op	146:22	0:0	4	>=
water	146:25	0:0	4	0
stmts	147:4	149:4	3	
water	147:4	0:0	4	{
water	148:8	0:0	4	p_sys
op	148:13	0:0	4	->
water	148:15	0:0	4	i_time
op	148:22	0:0	4	+=
water	148:25	0:0	4	p_sys
op	148:30	0:0	4	->
water	148:32	0:0	4	i_pcr_inc
water	148:41	0:0	4	;
water	149:4	0:0	4	}
return	150:4	150:12	2	1
water	150:11	0:0	3	1
