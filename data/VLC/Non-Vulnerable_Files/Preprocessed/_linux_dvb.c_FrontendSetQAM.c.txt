func	2:0	36:0	0	static int	FrontendSetQAM
params	2:25	0:0	1	
param	2:27	2:46	2	access_t *	p_access
stmnts	0:0	35:22	1	
decl	4:4	4:41	2	access_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	p_access
op	4:34	0:0	2	->
water	4:36	0:0	2	p_sys
decl	5:4	5:46	2	frontend_t	*p_frontend
op	5:27	0:0	2	=
water	5:29	0:0	2	p_sys
op	5:34	0:0	2	->
water	5:36	0:0	2	p_frontend
decl	6:4	6:38	2	struct dvb_frontend_parameters	fep
decl	7:4	7:22	2	unsigned int	i_val
water	9:4	0:0	2	fep
op	9:7	0:0	2	.
water	9:8	0:0	2	frequency
op	9:18	0:0	2	=
call	9:20	9:62	2	var_GetInteger
arg	9:36	9:44	3	p_access
water	9:36	0:0	4	p_access
arg	9:46	9:62	3	"dvb-frequency"
water	9:46	0:0	4	"dvb-frequency"
water	9:63	0:0	2	;
water	10:4	0:0	2	fep
op	10:7	0:0	2	.
water	10:8	0:0	2	inversion
op	10:18	0:0	2	=
call	10:20	10:46	2	DecodeInversion
arg	10:37	10:46	3	p_access
water	10:37	0:0	4	p_access
water	10:47	0:0	2	;
water	15:4	0:0	2	i_val
op	15:10	0:0	2	=
call	15:12	15:50	2	var_GetInteger
arg	15:28	15:36	3	p_access
water	15:28	0:0	4	p_access
arg	15:38	15:50	3	"dvb-srate"
water	15:38	0:0	4	"dvb-srate"
water	15:51	0:0	2	;
if	16:4	18:37	2	(i_val < p_frontend -> info . symbol_rate_max && i_val > p_frontend -> info . symbol_rate_min)
cond	16:8	17:33	3	i_val < p_frontend -> info . symbol_rate_max && i_val > p_frontend -> info . symbol_rate_min
water	16:8	0:0	4	i_val
op	16:14	0:0	4	<
water	16:16	0:0	4	p_frontend
op	16:26	0:0	4	->
water	16:28	0:0	4	info
op	16:32	0:0	4	.
water	16:33	0:0	4	symbol_rate_max
op	16:49	0:0	4	&&
water	17:8	0:0	4	i_val
op	17:14	0:0	4	>
water	17:16	0:0	4	p_frontend
op	17:26	0:0	4	->
water	17:28	0:0	4	info
op	17:32	0:0	4	.
water	17:33	0:0	4	symbol_rate_min
stmts	18:8	18:37	3	
water	18:8	0:0	4	fep
op	18:11	0:0	4	.
water	18:12	0:0	4	u
op	18:13	0:0	4	.
water	18:14	0:0	4	qam
op	18:17	0:0	4	.
water	18:18	0:0	4	symbol_rate
op	18:30	0:0	4	=
water	18:32	0:0	4	i_val
water	18:37	0:0	4	;
water	19:4	0:0	2	fep
op	19:7	0:0	2	.
water	19:8	0:0	2	u
op	19:9	0:0	2	.
water	19:10	0:0	2	qam
op	19:13	0:0	2	.
water	19:14	0:0	2	fec_inner
op	19:24	0:0	2	=
water	19:26	0:0	2	FEC_NONE
water	19:34	0:0	2	;
water	20:4	0:0	2	fep
op	20:7	0:0	2	.
water	20:8	0:0	2	u
op	20:9	0:0	2	.
water	20:10	0:0	2	qam
op	20:13	0:0	2	.
water	20:14	0:0	2	modulation
op	20:25	0:0	2	=
water	20:27	0:0	2	QAM_AUTO
water	20:35	0:0	2	;
for	22:4	28:4	2	(;;)
forinit	22:9	22:9	3	;
water	22:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	23:4	28:4	3	
water	23:4	0:0	4	{
decl	24:8	24:39	4	struct dvb_frontend_event	event
if	25:8	27:17	4	(ioctl (p_sys -> i_frontend_handle ,FE_GET_EVENT ,& event ) < 0 && errno == EWOULDBLOCK)
cond	25:13	26:26	5	ioctl (p_sys -> i_frontend_handle ,FE_GET_EVENT ,& event ) < 0 && errno == EWOULDBLOCK
call	25:13	25:67	6	ioctl
arg	25:20	25:44	7	p_sys->i_frontend_handle
water	25:20	0:0	8	p_sys
op	25:25	0:0	8	->
water	25:27	0:0	8	i_frontend_handle
arg	25:46	25:58	7	FE_GET_EVENT
water	25:46	0:0	8	FE_GET_EVENT
arg	25:60	25:67	7	&event
op	25:60	0:0	8	&
water	25:61	0:0	8	event
op	25:69	0:0	6	<
water	25:71	0:0	6	0
op	26:14	0:0	6	&&
water	26:17	0:0	6	errno
op	26:23	0:0	6	==
water	26:26	0:0	6	EWOULDBLOCK
stmts	27:12	27:17	5	
break	27:12	27:17	6	
water	28:4	0:0	4	}
if	30:4	34:4	2	(ioctl (p_sys -> i_frontend_handle ,FE_SET_FRONTEND ,& fep ) < 0)
cond	30:8	30:67	3	ioctl (p_sys -> i_frontend_handle ,FE_SET_FRONTEND ,& fep ) < 0
call	30:8	30:63	4	ioctl
arg	30:15	30:39	5	p_sys->i_frontend_handle
water	30:15	0:0	6	p_sys
op	30:20	0:0	6	->
water	30:22	0:0	6	i_frontend_handle
arg	30:41	30:56	5	FE_SET_FRONTEND
water	30:41	0:0	6	FE_SET_FRONTEND
arg	30:58	30:63	5	&fep
op	30:58	0:0	6	&
water	30:59	0:0	6	fep
op	30:65	0:0	4	<
water	30:67	0:0	4	0
stmts	31:4	34:4	3	
water	31:4	0:0	4	{
call	32:8	32:71	4	msg_Err
arg	32:17	32:25	5	p_access
water	32:17	0:0	6	p_access
arg	32:27	32:47	5	"frontend error: %s"
water	32:27	0:0	6	"frontend error: %s"
arg	32:49	32:71	5	vlc_strerror_c(errno)
call	32:49	32:69	6	vlc_strerror_c
arg	32:64	32:69	7	errno
water	32:64	0:0	8	errno
water	32:72	0:0	4	;
return	33:8	33:27	4	VLC_EGENERIC
water	33:15	0:0	5	VLC_EGENERIC
water	34:4	0:0	4	}
return	35:4	35:22	2	VLC_SUCCESS
water	35:11	0:0	3	VLC_SUCCESS
