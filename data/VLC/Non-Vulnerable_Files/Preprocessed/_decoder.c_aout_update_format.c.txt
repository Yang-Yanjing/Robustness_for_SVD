func	2:0	76:0	0	static int	aout_update_format
params	2:29	0:0	1	
param	2:31	2:48	2	decoder_t *	p_dec
stmnts	0:0	75:12	1	
decl	4:4	4:49	2	decoder_owner_sys_t	*p_owner
op	4:33	0:0	2	=
water	4:35	0:0	2	p_dec
op	4:40	0:0	2	->
water	4:42	0:0	2	p_owner
if	5:4	16:4	2	(p_owner -> p_aout && ( !AOUT_FMTS_IDENTICAL (& p_dec -> fmt_out . audio ,& p_owner -> audio ) || p_dec -> fmt_out . i_codec != p_dec -> fmt_out . audio . i_format ))
cond	5:8	7:65	3	p_owner -> p_aout && ( !AOUT_FMTS_IDENTICAL (& p_dec -> fmt_out . audio ,& p_owner -> audio ) || p_dec -> fmt_out . i_codec != p_dec -> fmt_out . audio . i_format )
water	5:8	0:0	4	p_owner
op	5:15	0:0	4	->
water	5:17	0:0	4	p_aout
op	5:24	0:0	4	&&
water	6:7	0:0	4	(
op	6:9	0:0	4	!
call	6:10	6:68	4	AOUT_FMTS_IDENTICAL
arg	6:30	6:51	5	&p_dec->fmt_out.audio
op	6:30	0:0	6	&
water	6:31	0:0	6	p_dec
op	6:36	0:0	6	->
water	6:38	0:0	6	fmt_out
op	6:45	0:0	6	.
water	6:46	0:0	6	audio
arg	6:53	6:68	5	&p_owner->audio
op	6:53	0:0	6	&
water	6:54	0:0	6	p_owner
op	6:61	0:0	6	->
water	6:63	0:0	6	audio
op	6:70	0:0	4	||
water	7:9	0:0	4	p_dec
op	7:14	0:0	4	->
water	7:16	0:0	4	fmt_out
op	7:23	0:0	4	.
water	7:24	0:0	4	i_codec
op	7:32	0:0	4	!=
water	7:35	0:0	4	p_dec
op	7:40	0:0	4	->
water	7:42	0:0	4	fmt_out
op	7:49	0:0	4	.
water	7:50	0:0	4	audio
op	7:55	0:0	4	.
water	7:56	0:0	4	i_format
water	7:65	0:0	4	)
stmts	8:4	16:4	3	
water	8:4	0:0	4	{
decl	9:8	9:48	4	audio_output_t	*p_aout
op	9:31	0:0	4	=
water	9:33	0:0	4	p_owner
op	9:40	0:0	4	->
water	9:42	0:0	4	p_aout
call	11:8	11:39	4	vlc_mutex_lock
arg	11:24	11:39	5	&p_owner->lock
op	11:24	0:0	6	&
water	11:25	0:0	6	p_owner
op	11:32	0:0	6	->
water	11:34	0:0	6	lock
water	11:40	0:0	4	;
call	12:8	12:40	4	aout_DecDelete
arg	12:24	12:40	5	p_owner->p_aout
water	12:24	0:0	6	p_owner
op	12:31	0:0	6	->
water	12:33	0:0	6	p_aout
water	12:41	0:0	4	;
water	13:8	0:0	4	p_owner
op	13:15	0:0	4	->
water	13:17	0:0	4	p_aout
op	13:24	0:0	4	=
water	13:26	0:0	4	NULL
water	13:30	0:0	4	;
call	14:8	14:41	4	vlc_mutex_unlock
arg	14:26	14:41	5	&p_owner->lock
op	14:26	0:0	6	&
water	14:27	0:0	6	p_owner
op	14:34	0:0	6	->
water	14:36	0:0	6	lock
water	14:42	0:0	4	;
call	15:8	15:60	4	input_resource_PutAout
arg	15:32	15:51	5	p_owner->p_resource
water	15:32	0:0	6	p_owner
op	15:39	0:0	6	->
water	15:41	0:0	6	p_resource
arg	15:53	15:60	5	p_aout
water	15:53	0:0	6	p_aout
water	15:61	0:0	4	;
water	16:4	0:0	4	}
if	17:4	74:4	2	(p_owner -> p_aout == NULL)
cond	17:8	17:27	3	p_owner -> p_aout == NULL
water	17:8	0:0	4	p_owner
op	17:15	0:0	4	->
water	17:17	0:0	4	p_aout
op	17:24	0:0	4	==
water	17:27	0:0	4	NULL
stmts	18:4	74:4	3	
water	18:4	0:0	4	{
decl	19:8	19:85	4	const int	i_force_dolby
op	19:32	0:0	4	=
call	19:34	19:84	5	var_InheritInteger
arg	19:54	19:59	6	p_dec
water	19:54	0:0	7	p_dec
arg	19:61	19:84	6	"force-dolby-surround"
water	19:61	0:0	7	"force-dolby-surround"
decl	20:8	20:36	4	audio_sample_format_t	format
decl	21:8	21:30	4	audio_output_t	*p_aout
decl	22:8	22:40	4	aout_request_vout_t	request_vout
water	23:8	0:0	4	p_dec
op	23:13	0:0	4	->
water	23:15	0:0	4	fmt_out
op	23:22	0:0	4	.
water	23:23	0:0	4	audio
op	23:28	0:0	4	.
water	23:29	0:0	4	i_format
op	23:38	0:0	4	=
water	23:40	0:0	4	p_dec
op	23:45	0:0	4	->
water	23:47	0:0	4	fmt_out
op	23:54	0:0	4	.
water	23:55	0:0	4	i_codec
water	23:62	0:0	4	;
water	24:8	0:0	4	p_owner
op	24:15	0:0	4	->
water	24:17	0:0	4	audio
op	24:23	0:0	4	=
water	24:25	0:0	4	p_dec
op	24:30	0:0	4	->
water	24:32	0:0	4	fmt_out
op	24:39	0:0	4	.
water	24:40	0:0	4	audio
water	24:45	0:0	4	;
call	25:8	25:44	4	aout_FormatPrepare
arg	25:28	25:44	5	&p_owner->audio
op	25:28	0:0	6	&
water	25:29	0:0	6	p_owner
op	25:36	0:0	6	->
water	25:38	0:0	6	audio
water	25:45	0:0	4	;
call	26:8	26:74	4	memcpy
arg	26:16	26:23	5	&format
op	26:16	0:0	6	&
water	26:17	0:0	6	format
arg	26:25	26:40	5	&p_owner->audio
op	26:25	0:0	6	&
water	26:26	0:0	6	p_owner
op	26:33	0:0	6	->
water	26:35	0:0	6	audio
arg	26:42	26:74	5	sizeof(audio_sample_format_t)
op	26:42	0:0	6	sizeof
water	26:48	0:0	6	(
water	26:50	0:0	6	audio_sample_format_t
water	26:72	0:0	6	)
water	26:75	0:0	4	;
if	27:8	41:8	4	(i_force_dolby && ( format . i_original_channels & AOUT_CHAN_PHYSMASK ) == ( AOUT_CHAN_LEFT | AOUT_CHAN_RIGHT ))
cond	27:12	29:47	5	i_force_dolby && ( format . i_original_channels & AOUT_CHAN_PHYSMASK ) == ( AOUT_CHAN_LEFT | AOUT_CHAN_RIGHT )
water	27:12	0:0	6	i_force_dolby
op	27:26	0:0	6	&&
water	28:12	0:0	6	(
water	28:13	0:0	6	format
op	28:19	0:0	6	.
water	28:20	0:0	6	i_original_channels
op	28:39	0:0	6	&
water	28:40	0:0	6	AOUT_CHAN_PHYSMASK
water	28:58	0:0	6	)
op	28:60	0:0	6	==
water	29:16	0:0	6	(
water	29:17	0:0	6	AOUT_CHAN_LEFT
op	29:31	0:0	6	|
water	29:32	0:0	6	AOUT_CHAN_RIGHT
water	29:47	0:0	6	)
stmts	30:8	41:8	5	
water	30:8	0:0	6	{
if	31:12	35:12	6	(i_force_dolby == 1)
cond	31:16	31:33	7	i_force_dolby == 1
water	31:16	0:0	8	i_force_dolby
op	31:30	0:0	8	==
water	31:33	0:0	8	1
stmts	32:12	35:12	7	
water	32:12	0:0	8	{
water	33:16	0:0	8	format
op	33:22	0:0	8	.
water	33:23	0:0	8	i_original_channels
op	33:43	0:0	8	=
water	33:45	0:0	8	format
op	33:51	0:0	8	.
water	33:52	0:0	8	i_original_channels
op	33:72	0:0	8	|
water	34:45	0:0	8	AOUT_CHAN_DOLBYSTEREO
water	34:66	0:0	8	;
water	35:12	0:0	8	}
else	36:12	40:12	6
stmts	37:12	40:12	7	
water	37:12	0:0	8	{
water	38:16	0:0	8	format
op	38:22	0:0	8	.
water	38:23	0:0	8	i_original_channels
op	38:43	0:0	8	=
water	38:45	0:0	8	format
op	38:51	0:0	8	.
water	38:52	0:0	8	i_original_channels
op	38:72	0:0	8	&
water	39:45	0:0	8	~AOUT_CHAN_DOLBYSTEREO
water	39:67	0:0	8	;
water	40:12	0:0	8	}
water	41:8	0:0	6	}
water	42:8	0:0	4	request_vout
op	42:20	0:0	4	.
water	42:21	0:0	4	pf_request_vout
op	42:37	0:0	4	=
water	42:39	0:0	4	aout_request_vout
water	42:56	0:0	4	;
water	43:8	0:0	4	request_vout
op	43:20	0:0	4	.
water	43:21	0:0	4	p_private
op	43:31	0:0	4	=
water	43:33	0:0	4	p_dec
water	43:38	0:0	4	;
call	44:8	44:40	4	assert
arg	44:16	44:40	5	p_owner->p_aout==NULL
water	44:16	0:0	6	p_owner
op	44:23	0:0	6	->
water	44:25	0:0	6	p_aout
op	44:32	0:0	6	==
water	44:35	0:0	6	NULL
water	44:41	0:0	4	;
water	45:8	0:0	4	p_aout
op	45:15	0:0	4	=
call	45:17	45:61	4	input_resource_GetAout
arg	45:41	45:61	5	p_owner->p_resource
water	45:41	0:0	6	p_owner
op	45:48	0:0	6	->
water	45:50	0:0	6	p_resource
water	45:62	0:0	4	;
if	46:8	55:8	4	(p_aout)
cond	46:12	46:12	5	p_aout
water	46:12	0:0	6	p_aout
stmts	47:8	55:8	5	
water	47:8	0:0	6	{
if	48:12	54:12	6	(aout_DecNew (p_aout ,& format ,& p_dec -> fmt_out . audio_replay_gain ,& request_vout ))
cond	48:16	50:43	7	aout_DecNew (p_aout ,& format ,& p_dec -> fmt_out . audio_replay_gain ,& request_vout )
call	48:16	50:43	8	aout_DecNew
arg	48:29	48:35	9	p_aout
water	48:29	0:0	10	p_aout
arg	48:37	48:44	9	&format
op	48:37	0:0	10	&
water	48:38	0:0	10	format
arg	49:29	49:62	9	&p_dec->fmt_out.audio_replay_gain
op	49:29	0:0	10	&
water	49:30	0:0	10	p_dec
op	49:35	0:0	10	->
water	49:37	0:0	10	fmt_out
op	49:44	0:0	10	.
water	49:45	0:0	10	audio_replay_gain
arg	50:29	50:43	9	&request_vout
op	50:29	0:0	10	&
water	50:30	0:0	10	request_vout
stmts	51:12	54:12	7	
water	51:12	0:0	8	{
call	52:16	52:68	8	input_resource_PutAout
arg	52:40	52:59	9	p_owner->p_resource
water	52:40	0:0	10	p_owner
op	52:47	0:0	10	->
water	52:49	0:0	10	p_resource
arg	52:61	52:68	9	p_aout
water	52:61	0:0	10	p_aout
water	52:69	0:0	8	;
water	53:16	0:0	8	p_aout
op	53:23	0:0	8	=
water	53:25	0:0	8	NULL
water	53:29	0:0	8	;
water	54:12	0:0	8	}
water	55:8	0:0	6	}
call	56:8	56:39	4	vlc_mutex_lock
arg	56:24	56:39	5	&p_owner->lock
op	56:24	0:0	6	&
water	56:25	0:0	6	p_owner
op	56:32	0:0	6	->
water	56:34	0:0	6	lock
water	56:40	0:0	4	;
water	57:8	0:0	4	p_owner
op	57:15	0:0	4	->
water	57:17	0:0	4	p_aout
op	57:24	0:0	4	=
water	57:26	0:0	4	p_aout
water	57:32	0:0	4	;
call	58:8	58:41	4	DecoderUpdateFormatLocked
arg	58:35	58:41	5	p_dec
water	58:35	0:0	6	p_dec
water	58:42	0:0	4	;
if	59:8	61:56	4	(unlikely (p_owner -> b_paused ) && p_aout != NULL)
cond	59:12	59:53	5	unlikely (p_owner -> b_paused ) && p_aout != NULL
call	59:12	59:38	6	unlikely
arg	59:21	59:38	7	p_owner->b_paused
water	59:21	0:0	8	p_owner
op	59:28	0:0	8	->
water	59:30	0:0	8	b_paused
op	59:40	0:0	6	&&
water	59:43	0:0	6	p_aout
op	59:50	0:0	6	!=
water	59:53	0:0	6	NULL
stmts	61:12	61:56	5	
call	61:12	61:55	6	aout_DecChangePause
arg	61:33	61:39	7	p_aout
water	61:33	0:0	8	p_aout
arg	61:41	61:45	7	true
water	61:41	0:0	8	true
arg	61:47	61:55	7	mdate()
call	61:47	61:53	8	mdate
water	61:56	0:0	6	;
call	62:8	62:41	4	vlc_mutex_unlock
arg	62:26	62:41	5	&p_owner->lock
op	62:26	0:0	6	&
water	62:27	0:0	6	p_owner
op	62:34	0:0	6	->
water	62:36	0:0	6	lock
water	62:42	0:0	4	;
if	63:8	64:51	4	(p_owner -> p_input != NULL)
cond	63:12	63:32	5	p_owner -> p_input != NULL
water	63:12	0:0	6	p_owner
op	63:19	0:0	6	->
water	63:21	0:0	6	p_input
op	63:29	0:0	6	!=
water	63:32	0:0	6	NULL
stmts	64:12	64:51	5	
call	64:12	64:50	6	input_SendEventAout
arg	64:33	64:50	7	p_owner->p_input
water	64:33	0:0	8	p_owner
op	64:40	0:0	8	->
water	64:42	0:0	8	p_input
water	64:51	0:0	6	;
if	65:8	70:8	4	(p_aout == NULL)
cond	65:12	65:22	5	p_aout == NULL
water	65:12	0:0	6	p_aout
op	65:19	0:0	6	==
water	65:22	0:0	6	NULL
stmts	66:8	70:8	5	
water	66:8	0:0	6	{
call	67:12	67:60	6	msg_Err
arg	67:21	67:26	7	p_dec
water	67:21	0:0	8	p_dec
arg	67:28	67:60	7	"failed to create audio output"
water	67:28	0:0	8	"failed to create audio output"
water	67:61	0:0	6	;
water	68:12	0:0	6	p_dec
op	68:17	0:0	6	->
water	68:19	0:0	6	b_error
op	68:27	0:0	6	=
water	68:29	0:0	6	true
water	68:33	0:0	6	;
return	69:12	69:21	6	-1
op	69:19	0:0	7	-
water	69:20	0:0	7	1
water	70:8	0:0	6	}
water	71:8	0:0	4	p_dec
op	71:13	0:0	4	->
water	71:15	0:0	4	fmt_out
op	71:22	0:0	4	.
water	71:23	0:0	4	audio
op	71:28	0:0	4	.
water	71:29	0:0	4	i_bytes_per_frame
op	71:47	0:0	4	=
water	72:12	0:0	4	p_owner
op	72:19	0:0	4	->
water	72:21	0:0	4	audio
op	72:26	0:0	4	.
water	72:27	0:0	4	i_bytes_per_frame
water	72:44	0:0	4	;
water	73:8	0:0	4	p_dec
op	73:13	0:0	4	->
water	73:15	0:0	4	fmt_out
op	73:22	0:0	4	.
water	73:23	0:0	4	audio
op	73:28	0:0	4	.
water	73:29	0:0	4	i_frame_length
op	73:44	0:0	4	=
water	73:46	0:0	4	p_owner
op	73:53	0:0	4	->
water	73:55	0:0	4	audio
op	73:60	0:0	4	.
water	73:61	0:0	4	i_frame_length
water	73:75	0:0	4	;
water	74:4	0:0	4	}
return	75:4	75:12	2	0
water	75:11	0:0	3	0
