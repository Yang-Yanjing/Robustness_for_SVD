func	2:0	108:0	0	static void	Direct3DImportSubpicture
params	2:36	0:0	1	
param	2:37	2:55	2	vout_display_t *	vd
param	3:37	3:51	2	int *	count_ptr
param	3:53	3:74	2	d3d_region_t * *	region
param	4:37	4:61	2	subpicture_t *	subpicture
stmnts	0:0	107:4	1	
decl	6:4	6:37	2	vout_display_sys_t	*sys
op	6:28	0:0	2	=
water	6:30	0:0	2	vd
op	6:32	0:0	2	->
water	6:34	0:0	2	sys
decl	7:4	7:17	2	int	count
op	7:14	0:0	2	=
water	7:16	0:0	2	0
for	8:4	9:15	2	( subpicture_region_t * r = subpicture -> p_region ;r;r = r -> p_next)
forinit	0:0	8:54	3	 subpicture_region_t * r = subpicture -> p_region ;
decl	8:9	8:54	4	subpicture_region_t	*r
op	8:32	0:0	4	=
water	8:34	0:0	4	subpicture
op	8:44	0:0	4	->
water	8:46	0:0	4	p_region
cond	8:56	8:56	3	r
water	8:56	0:0	4	r
forexpr	8:59	8:66	3	r = r -> p_next
water	8:59	0:0	4	r
op	8:61	0:0	4	=
water	8:63	0:0	4	r
op	8:64	0:0	4	->
water	8:66	0:0	4	p_next
stmts	9:8	9:15	3	
water	9:8	0:0	4	count
op	9:13	0:0	4	++
water	9:15	0:0	4	;
op	10:4	0:0	2	*
water	10:5	0:0	2	count_ptr
op	10:15	0:0	2	=
water	10:17	0:0	2	count
water	10:22	0:0	2	;
op	11:4	0:0	2	*
water	11:5	0:0	2	region
op	11:15	0:0	2	=
call	11:17	11:47	2	calloc
arg	11:24	11:29	3	count
water	11:24	0:0	4	count
arg	11:31	11:47	3	sizeof(**region)
op	11:31	0:0	4	sizeof
water	11:37	0:0	4	(
op	11:38	0:0	4	*
op	11:39	0:0	4	*
water	11:40	0:0	4	region
water	11:46	0:0	4	)
water	11:48	0:0	2	;
if	12:4	15:4	2	(* region == NULL)
cond	12:8	12:19	3	* region == NULL
op	12:8	0:0	4	*
water	12:9	0:0	4	region
op	12:16	0:0	4	==
water	12:19	0:0	4	NULL
stmts	12:25	15:4	3	
water	12:25	0:0	4	{
op	13:8	0:0	4	*
water	13:9	0:0	4	count_ptr
op	13:19	0:0	4	=
water	13:21	0:0	4	0
water	13:22	0:0	4	;
return	14:8	14:14	4	
water	15:4	0:0	4	}
decl	16:4	16:13	2	int	i
op	16:10	0:0	2	=
water	16:12	0:0	2	0
for	17:4	107:4	2	( subpicture_region_t * r = subpicture -> p_region ;r;r = r -> p_next , i ++)
forinit	0:0	17:54	3	 subpicture_region_t * r = subpicture -> p_region ;
decl	17:9	17:54	4	subpicture_region_t	*r
op	17:32	0:0	4	=
water	17:34	0:0	4	subpicture
op	17:44	0:0	4	->
water	17:46	0:0	4	p_region
cond	17:56	17:56	3	r
water	17:56	0:0	4	r
forexpr	17:59	17:75	3	r = r -> p_next , i ++
water	17:59	0:0	4	r
op	17:61	0:0	4	=
water	17:63	0:0	4	r
op	17:64	0:0	4	->
water	17:66	0:0	4	p_next
water	17:72	0:0	4	,
water	17:74	0:0	4	i
op	17:75	0:0	4	++
stmts	17:79	107:4	3	
water	17:79	0:0	4	{
decl	18:8	18:42	4	d3d_region_t	*d3dr
op	18:27	0:0	4	=
op	18:29	0:0	4	&
water	18:30	0:0	4	(
op	18:31	0:0	4	*
water	18:32	0:0	4	region
water	18:38	0:0	4	)
op	18:39	0:0	4	[
water	18:40	0:0	4	i
op	18:41	0:0	4	]
decl	19:8	19:18	4	HRESULT	hr
water	20:8	0:0	4	d3dr
op	20:12	0:0	4	->
water	20:14	0:0	4	texture
op	20:22	0:0	4	=
water	20:24	0:0	4	NULL
water	20:28	0:0	4	;
for	21:8	35:8	4	( int j = 0 ;j < sys -> d3dregion_count;j ++)
forinit	0:0	21:22	5	 int j = 0 ;
decl	21:13	21:22	6	int	j
op	21:19	0:0	6	=
water	21:21	0:0	6	0
cond	21:24	21:33	5	j < sys -> d3dregion_count
water	21:24	0:0	6	j
op	21:26	0:0	6	<
water	21:28	0:0	6	sys
op	21:31	0:0	6	->
water	21:33	0:0	6	d3dregion_count
forexpr	21:50	21:51	5	j ++
water	21:50	0:0	6	j
op	21:51	0:0	6	++
stmts	21:55	35:8	5	
water	21:55	0:0	6	{
decl	22:12	22:52	6	d3d_region_t	*cache
op	22:32	0:0	6	=
op	22:34	0:0	6	&
water	22:35	0:0	6	sys
op	22:38	0:0	6	->
water	22:40	0:0	6	d3dregion
op	22:49	0:0	6	[
water	22:50	0:0	6	j
op	22:51	0:0	6	]
if	23:12	34:12	6	(cache -> texture && cache -> format == sys -> d3dregion_format && cache -> width == r -> fmt . i_width && cache -> height == r -> fmt . i_height)
cond	23:16	26:40	7	cache -> texture && cache -> format == sys -> d3dregion_format && cache -> width == r -> fmt . i_width && cache -> height == r -> fmt . i_height
water	23:16	0:0	8	cache
op	23:21	0:0	8	->
water	23:23	0:0	8	texture
op	23:31	0:0	8	&&
water	24:16	0:0	8	cache
op	24:21	0:0	8	->
water	24:23	0:0	8	format
op	24:30	0:0	8	==
water	24:33	0:0	8	sys
op	24:36	0:0	8	->
water	24:38	0:0	8	d3dregion_format
op	24:55	0:0	8	&&
water	25:16	0:0	8	cache
op	25:21	0:0	8	->
water	25:23	0:0	8	width
op	25:30	0:0	8	==
water	25:33	0:0	8	r
op	25:34	0:0	8	->
water	25:36	0:0	8	fmt
op	25:39	0:0	8	.
water	25:40	0:0	8	i_width
op	25:48	0:0	8	&&
water	26:16	0:0	8	cache
op	26:21	0:0	8	->
water	26:23	0:0	8	height
op	26:30	0:0	8	==
water	26:33	0:0	8	r
op	26:34	0:0	8	->
water	26:36	0:0	8	fmt
op	26:39	0:0	8	.
water	26:40	0:0	8	i_height
stmts	26:50	34:12	7	
water	26:50	0:0	8	{
call	28:16	29:51	8	msg_Dbg
arg	28:24	28:26	9	vd
water	28:24	0:0	10	vd
arg	28:28	28:59	9	"Reusing %dx%d texture for OSD"
water	28:28	0:0	10	"Reusing %dx%d texture for OSD"
arg	29:24	29:36	9	cache->width
water	29:24	0:0	10	cache
op	29:29	0:0	10	->
water	29:31	0:0	10	width
arg	29:38	29:51	9	cache->height
water	29:38	0:0	10	cache
op	29:43	0:0	10	->
water	29:45	0:0	10	height
water	29:52	0:0	8	;
op	31:16	0:0	8	*
water	31:17	0:0	8	d3dr
op	31:22	0:0	8	=
op	31:24	0:0	8	*
water	31:25	0:0	8	cache
water	31:30	0:0	8	;
call	32:16	32:47	8	memset
arg	32:23	32:28	9	cache
water	32:23	0:0	10	cache
arg	32:30	32:31	9	0
water	32:30	0:0	10	0
arg	32:33	32:47	9	sizeof(*cache)
op	32:33	0:0	10	sizeof
water	32:39	0:0	10	(
op	32:40	0:0	10	*
water	32:41	0:0	10	cache
water	32:46	0:0	10	)
water	32:48	0:0	8	;
break	33:16	33:21	8	
water	34:12	0:0	8	}
water	35:8	0:0	6	}
if	36:8	58:8	4	(! d3dr -> texture)
cond	36:12	36:19	5	! d3dr -> texture
op	36:12	0:0	6	!
water	36:13	0:0	6	d3dr
op	36:17	0:0	6	->
water	36:19	0:0	6	texture
stmts	36:28	58:8	5	
water	36:28	0:0	6	{
water	37:12	0:0	6	d3dr
op	37:16	0:0	6	->
water	37:18	0:0	6	format
op	37:25	0:0	6	=
water	37:27	0:0	6	sys
op	37:30	0:0	6	->
water	37:32	0:0	6	d3dregion_format
water	37:48	0:0	6	;
water	38:12	0:0	6	d3dr
op	38:16	0:0	6	->
water	38:18	0:0	6	width
op	38:25	0:0	6	=
water	38:27	0:0	6	r
op	38:28	0:0	6	->
water	38:30	0:0	6	fmt
op	38:33	0:0	6	.
water	38:34	0:0	6	i_width
water	38:41	0:0	6	;
water	39:12	0:0	6	d3dr
op	39:16	0:0	6	->
water	39:18	0:0	6	height
op	39:25	0:0	6	=
water	39:27	0:0	6	r
op	39:28	0:0	6	->
water	39:30	0:0	6	fmt
op	39:33	0:0	6	.
water	39:34	0:0	6	i_height
water	39:42	0:0	6	;
water	40:12	0:0	6	hr
op	40:15	0:0	6	=
call	40:17	47:52	6	IDirect3DDevice9_CreateTexture
arg	40:48	40:59	7	sys->d3ddev
water	40:48	0:0	8	sys
op	40:51	0:0	8	->
water	40:53	0:0	8	d3ddev
arg	41:48	41:59	7	d3dr->width
water	41:48	0:0	8	d3dr
op	41:52	0:0	8	->
water	41:54	0:0	8	width
arg	41:61	41:73	7	d3dr->height
water	41:61	0:0	8	d3dr
op	41:65	0:0	8	->
water	41:67	0:0	8	height
arg	42:48	42:49	7	1
water	42:48	0:0	8	1
arg	43:48	43:64	7	D3DUSAGE_DYNAMIC
water	43:48	0:0	8	D3DUSAGE_DYNAMIC
arg	44:48	44:60	7	d3dr->format
water	44:48	0:0	8	d3dr
op	44:52	0:0	8	->
water	44:54	0:0	8	format
arg	45:48	45:63	7	D3DPOOL_DEFAULT
water	45:48	0:0	8	D3DPOOL_DEFAULT
arg	46:48	46:62	7	&d3dr->texture
op	46:48	0:0	8	&
water	46:49	0:0	8	d3dr
op	46:53	0:0	8	->
water	46:55	0:0	8	texture
arg	47:48	47:52	7	NULL
water	47:48	0:0	8	NULL
water	47:53	0:0	6	;
if	48:12	53:12	6	(FAILED (hr ))
cond	48:16	48:25	7	FAILED (hr )
call	48:16	48:25	8	FAILED
arg	48:23	48:25	9	hr
water	48:23	0:0	10	hr
stmts	48:28	53:12	7	
water	48:28	0:0	8	{
water	49:16	0:0	8	d3dr
op	49:20	0:0	8	->
water	49:22	0:0	8	texture
op	49:30	0:0	8	=
water	49:32	0:0	8	NULL
water	49:36	0:0	8	;
call	50:16	51:53	8	msg_Err
arg	50:24	50:26	9	vd
water	50:24	0:0	10	vd
arg	50:28	50:80	9	"Failed to create %dx%d texture for OSD (hr=0x%0lX)"
water	50:28	0:0	10	"Failed to create %dx%d texture for OSD (hr=0x%0lX)"
arg	51:24	51:35	9	d3dr->width
water	51:24	0:0	10	d3dr
op	51:28	0:0	10	->
water	51:30	0:0	10	width
arg	51:37	51:49	9	d3dr->height
water	51:37	0:0	10	d3dr
op	51:41	0:0	10	->
water	51:43	0:0	10	height
arg	51:51	51:53	9	hr
water	51:51	0:0	10	hr
water	51:54	0:0	8	;
continue	52:16	52:24	8	
water	53:12	0:0	8	}
call	55:12	56:51	6	msg_Dbg
arg	55:20	55:22	7	vd
water	55:20	0:0	8	vd
arg	55:24	55:55	7	"Created %dx%d texture for OSD"
water	55:24	0:0	8	"Created %dx%d texture for OSD"
arg	56:20	56:34	7	r->fmt.i_width
water	56:20	0:0	8	r
op	56:21	0:0	8	->
water	56:23	0:0	8	fmt
op	56:26	0:0	8	.
water	56:27	0:0	8	i_width
arg	56:36	56:51	7	r->fmt.i_height
water	56:36	0:0	8	r
op	56:37	0:0	8	->
water	56:39	0:0	8	fmt
op	56:42	0:0	8	.
water	56:43	0:0	8	i_height
water	56:52	0:0	6	;
water	58:8	0:0	6	}
decl	59:8	59:27	4	D3DLOCKED_RECT	lock
water	60:8	0:0	4	hr
op	60:11	0:0	4	=
call	60:13	60:72	4	IDirect3DTexture9_LockRect
arg	60:40	60:53	5	d3dr->texture
water	60:40	0:0	6	d3dr
op	60:44	0:0	6	->
water	60:46	0:0	6	texture
arg	60:55	60:56	5	0
water	60:55	0:0	6	0
arg	60:58	60:63	5	&lock
op	60:58	0:0	6	&
water	60:59	0:0	6	lock
arg	60:65	60:69	5	NULL
water	60:65	0:0	6	NULL
arg	60:71	60:72	5	0
water	60:71	0:0	6	0
water	60:73	0:0	4	;
if	61:8	83:8	4	(SUCCEEDED (hr ))
cond	61:12	61:24	5	SUCCEEDED (hr )
call	61:12	61:24	6	SUCCEEDED
arg	61:22	61:24	7	hr
water	61:22	0:0	8	hr
stmts	61:27	83:8	5	
water	61:27	0:0	6	{
decl	62:12	62:45	6	uint8_t	*dst_data
op	62:33	0:0	6	=
water	62:35	0:0	6	lock
op	62:39	0:0	6	.
water	62:40	0:0	6	pBits
decl	63:12	63:45	6	int	dst_pitch
op	63:33	0:0	6	=
water	63:35	0:0	6	lock
op	63:39	0:0	6	.
water	63:40	0:0	6	Pitch
decl	64:12	64:60	6	uint8_t	*src_data
op	64:33	0:0	6	=
water	64:35	0:0	6	r
op	64:36	0:0	6	->
water	64:38	0:0	6	p_picture
op	64:47	0:0	6	->
water	64:49	0:0	6	p
op	64:50	0:0	6	->
water	64:52	0:0	6	p_pixels
decl	65:12	65:59	6	int	src_pitch
op	65:33	0:0	6	=
water	65:35	0:0	6	r
op	65:36	0:0	6	->
water	65:38	0:0	6	p_picture
op	65:47	0:0	6	->
water	65:49	0:0	6	p
op	65:50	0:0	6	->
water	65:52	0:0	6	i_pitch
for	66:12	79:12	6	(unsigned y = 0 ;y < r -> fmt . i_height;y ++)
forinit	66:17	66:31	7	unsigned y = 0 ;
water	66:17	0:0	8	unsigned
water	66:26	0:0	8	y
op	66:28	0:0	8	=
water	66:30	0:0	8	0
water	66:31	0:0	8	;
cond	66:33	66:44	7	y < r -> fmt . i_height
water	66:33	0:0	8	y
op	66:35	0:0	8	<
water	66:37	0:0	8	r
op	66:38	0:0	8	->
water	66:40	0:0	8	fmt
op	66:43	0:0	8	.
water	66:44	0:0	8	i_height
forexpr	66:54	66:55	7	y ++
water	66:54	0:0	8	y
op	66:55	0:0	8	++
stmts	66:59	79:12	7	
water	66:59	0:0	8	{
decl	67:16	67:75	8	int	copy_pitch
op	67:31	0:0	8	=
call	67:33	67:74	9	__MIN
arg	67:39	67:48	10	dst_pitch
water	67:39	0:0	11	dst_pitch
arg	67:50	67:74	10	r->p_picture->p->i_pitch
water	67:50	0:0	11	r
op	67:51	0:0	11	->
water	67:53	0:0	11	p_picture
op	67:62	0:0	11	->
water	67:64	0:0	11	p
op	67:65	0:0	11	->
water	67:67	0:0	11	i_pitch
if	68:16	71:16	8	(d3dr -> format == D3DFMT_A8B8G8R8)
cond	68:20	68:36	9	d3dr -> format == D3DFMT_A8B8G8R8
water	68:20	0:0	10	d3dr
op	68:24	0:0	10	->
water	68:26	0:0	10	format
op	68:33	0:0	10	==
water	68:36	0:0	10	D3DFMT_A8B8G8R8
stmts	68:53	71:16	9	
water	68:53	0:0	10	{
call	69:20	70:37	10	memcpy
arg	69:27	69:51	11	&dst_data[y*dst_pitch]
op	69:27	0:0	12	&
water	69:28	0:0	12	dst_data
op	69:36	0:0	12	[
water	69:37	0:0	12	y
op	69:39	0:0	12	*
water	69:41	0:0	12	dst_pitch
op	69:50	0:0	12	]
arg	69:53	69:77	11	&src_data[y*src_pitch]
op	69:53	0:0	12	&
water	69:54	0:0	12	src_data
op	69:62	0:0	12	[
water	69:63	0:0	12	y
op	69:65	0:0	12	*
water	69:67	0:0	12	src_pitch
op	69:76	0:0	12	]
arg	70:27	70:37	11	copy_pitch
water	70:27	0:0	12	copy_pitch
water	70:38	0:0	10	;
water	71:16	0:0	10	}
else	71:18	78:16	8
stmts	71:23	78:16	9	
water	71:23	0:0	10	{
for	72:20	77:20	10	( int x = 0 ;x < copy_pitch;x += 4)
forinit	0:0	72:34	11	 int x = 0 ;
decl	72:25	72:34	12	int	x
op	72:31	0:0	12	=
water	72:33	0:0	12	0
cond	72:36	72:40	11	x < copy_pitch
water	72:36	0:0	12	x
op	72:38	0:0	12	<
water	72:40	0:0	12	copy_pitch
forexpr	72:52	72:57	11	x += 4
water	72:52	0:0	12	x
op	72:54	0:0	12	+=
water	72:57	0:0	12	4
stmts	72:60	77:20	11	
water	72:60	0:0	12	{
water	73:24	0:0	12	dst_data
op	73:32	0:0	12	[
water	73:33	0:0	12	y
op	73:35	0:0	12	*
water	73:37	0:0	12	dst_pitch
op	73:47	0:0	12	+
water	73:49	0:0	12	x
op	73:51	0:0	12	+
water	73:53	0:0	12	0
op	73:54	0:0	12	]
op	73:56	0:0	12	=
water	73:58	0:0	12	src_data
op	73:66	0:0	12	[
water	73:67	0:0	12	y
op	73:69	0:0	12	*
water	73:71	0:0	12	src_pitch
op	73:81	0:0	12	+
water	73:83	0:0	12	x
op	73:85	0:0	12	+
water	73:87	0:0	12	2
op	73:88	0:0	12	]
water	73:89	0:0	12	;
water	74:24	0:0	12	dst_data
op	74:32	0:0	12	[
water	74:33	0:0	12	y
op	74:35	0:0	12	*
water	74:37	0:0	12	dst_pitch
op	74:47	0:0	12	+
water	74:49	0:0	12	x
op	74:51	0:0	12	+
water	74:53	0:0	12	1
op	74:54	0:0	12	]
op	74:56	0:0	12	=
water	74:58	0:0	12	src_data
op	74:66	0:0	12	[
water	74:67	0:0	12	y
op	74:69	0:0	12	*
water	74:71	0:0	12	src_pitch
op	74:81	0:0	12	+
water	74:83	0:0	12	x
op	74:85	0:0	12	+
water	74:87	0:0	12	1
op	74:88	0:0	12	]
water	74:89	0:0	12	;
water	75:24	0:0	12	dst_data
op	75:32	0:0	12	[
water	75:33	0:0	12	y
op	75:35	0:0	12	*
water	75:37	0:0	12	dst_pitch
op	75:47	0:0	12	+
water	75:49	0:0	12	x
op	75:51	0:0	12	+
water	75:53	0:0	12	2
op	75:54	0:0	12	]
op	75:56	0:0	12	=
water	75:58	0:0	12	src_data
op	75:66	0:0	12	[
water	75:67	0:0	12	y
op	75:69	0:0	12	*
water	75:71	0:0	12	src_pitch
op	75:81	0:0	12	+
water	75:83	0:0	12	x
op	75:85	0:0	12	+
water	75:87	0:0	12	0
op	75:88	0:0	12	]
water	75:89	0:0	12	;
water	76:24	0:0	12	dst_data
op	76:32	0:0	12	[
water	76:33	0:0	12	y
op	76:35	0:0	12	*
water	76:37	0:0	12	dst_pitch
op	76:47	0:0	12	+
water	76:49	0:0	12	x
op	76:51	0:0	12	+
water	76:53	0:0	12	3
op	76:54	0:0	12	]
op	76:56	0:0	12	=
water	76:58	0:0	12	src_data
op	76:66	0:0	12	[
water	76:67	0:0	12	y
op	76:69	0:0	12	*
water	76:71	0:0	12	src_pitch
op	76:81	0:0	12	+
water	76:83	0:0	12	x
op	76:85	0:0	12	+
water	76:87	0:0	12	3
op	76:88	0:0	12	]
water	76:89	0:0	12	;
water	77:20	0:0	12	}
water	78:16	0:0	10	}
water	79:12	0:0	8	}
water	80:12	0:0	6	hr
op	80:15	0:0	6	=
call	80:17	80:62	6	IDirect3DTexture9_UnlockRect
arg	80:46	80:59	7	d3dr->texture
water	80:46	0:0	8	d3dr
op	80:50	0:0	8	->
water	80:52	0:0	8	texture
arg	80:61	80:62	7	0
water	80:61	0:0	8	0
water	80:63	0:0	6	;
if	81:12	82:59	6	(FAILED (hr ))
cond	81:16	81:25	7	FAILED (hr )
call	81:16	81:25	8	FAILED
arg	81:23	81:25	9	hr
water	81:23	0:0	10	hr
stmts	82:16	82:59	7	
call	82:16	82:58	8	msg_Err
arg	82:24	82:26	9	vd
water	82:24	0:0	10	vd
arg	82:28	82:58	9	"Failed to unlock the texture"
water	82:28	0:0	10	"Failed to unlock the texture"
water	82:59	0:0	8	;
water	83:8	0:0	6	}
else	83:10	85:8	4
stmts	83:15	85:8	5	
water	83:15	0:0	6	{
call	84:12	84:52	6	msg_Err
arg	84:20	84:22	7	vd
water	84:20	0:0	8	vd
arg	84:24	84:52	7	"Failed to lock the texture"
water	84:24	0:0	8	"Failed to lock the texture"
water	84:53	0:0	6	;
water	85:8	0:0	6	}
decl	87:8	87:41	4	const RECT	video
op	87:25	0:0	4	=
water	87:27	0:0	4	sys
op	87:30	0:0	4	->
water	87:32	0:0	4	rect_dest
decl	88:8	88:103	4	const float	scale_w
op	88:28	0:0	4	=
call	88:30	88:63	5	(float)
arg	88:38	88:63	6	video.right-video.left
water	88:38	0:0	7	video
op	88:43	0:0	7	.
water	88:44	0:0	7	right
op	88:51	0:0	7	-
water	88:53	0:0	7	video
op	88:58	0:0	7	.
water	88:59	0:0	7	left
op	88:65	0:0	4	/
water	88:67	0:0	4	subpicture
op	88:77	0:0	4	->
water	88:79	0:0	4	i_original_picture_width
decl	89:8	89:104	4	const float	scale_h
op	89:28	0:0	4	=
call	89:30	89:62	5	(float)
arg	89:38	89:62	6	video.bottom-video.top
water	89:38	0:0	7	video
op	89:43	0:0	7	.
water	89:44	0:0	7	bottom
op	89:51	0:0	7	-
water	89:53	0:0	7	video
op	89:58	0:0	7	.
water	89:59	0:0	7	top
op	89:65	0:0	4	/
water	89:67	0:0	4	subpicture
op	89:77	0:0	4	->
water	89:79	0:0	4	i_original_picture_height
decl	90:8	90:16	4	RECT	dst
water	91:8	0:0	4	dst
op	91:11	0:0	4	.
water	91:12	0:0	4	left
op	91:19	0:0	4	=
water	91:21	0:0	4	video
op	91:26	0:0	4	.
water	91:27	0:0	4	left
op	91:32	0:0	4	+
water	91:34	0:0	4	scale_w
op	91:42	0:0	4	*
water	91:44	0:0	4	r
op	91:45	0:0	4	->
water	91:47	0:0	4	i_x
water	91:50	0:0	4	,
water	92:8	0:0	4	dst
op	92:11	0:0	4	.
water	92:12	0:0	4	right
op	92:19	0:0	4	=
water	92:21	0:0	4	dst
op	92:24	0:0	4	.
water	92:25	0:0	4	left
op	92:30	0:0	4	+
water	92:32	0:0	4	scale_w
op	92:40	0:0	4	*
water	92:42	0:0	4	r
op	92:43	0:0	4	->
water	92:45	0:0	4	fmt
op	92:48	0:0	4	.
water	92:49	0:0	4	i_visible_width
water	92:64	0:0	4	,
water	93:8	0:0	4	dst
op	93:11	0:0	4	.
water	93:12	0:0	4	top
op	93:19	0:0	4	=
water	93:21	0:0	4	video
op	93:26	0:0	4	.
water	93:27	0:0	4	top
op	93:32	0:0	4	+
water	93:34	0:0	4	scale_h
op	93:42	0:0	4	*
water	93:44	0:0	4	r
op	93:45	0:0	4	->
water	93:47	0:0	4	i_y
water	93:50	0:0	4	,
water	94:8	0:0	4	dst
op	94:11	0:0	4	.
water	94:12	0:0	4	bottom
op	94:19	0:0	4	=
water	94:21	0:0	4	dst
op	94:24	0:0	4	.
water	94:25	0:0	4	top
op	94:30	0:0	4	+
water	94:32	0:0	4	scale_h
op	94:40	0:0	4	*
water	94:42	0:0	4	r
op	94:43	0:0	4	->
water	94:45	0:0	4	fmt
op	94:48	0:0	4	.
water	94:49	0:0	4	i_visible_height
water	94:65	0:0	4	;
decl	95:8	95:16	4	RECT	src
water	96:8	0:0	4	src
op	96:11	0:0	4	.
water	96:12	0:0	4	left
op	96:17	0:0	4	=
water	96:19	0:0	4	0
water	96:20	0:0	4	;
water	97:8	0:0	4	src
op	97:11	0:0	4	.
water	97:12	0:0	4	right
op	97:18	0:0	4	=
water	97:20	0:0	4	r
op	97:21	0:0	4	->
water	97:23	0:0	4	fmt
op	97:26	0:0	4	.
water	97:27	0:0	4	i_width
water	97:34	0:0	4	;
water	98:8	0:0	4	src
op	98:11	0:0	4	.
water	98:12	0:0	4	top
op	98:16	0:0	4	=
water	98:18	0:0	4	0
water	98:19	0:0	4	;
water	99:8	0:0	4	src
op	99:11	0:0	4	.
water	99:12	0:0	4	bottom
op	99:19	0:0	4	=
water	99:21	0:0	4	r
op	99:22	0:0	4	->
water	99:24	0:0	4	fmt
op	99:27	0:0	4	.
water	99:28	0:0	4	i_height
water	99:36	0:0	4	;
decl	100:8	100:24	4	RECT	src_clipped
water	101:8	0:0	4	src_clipped
op	101:19	0:0	4	.
water	101:20	0:0	4	left
op	101:25	0:0	4	=
water	101:27	0:0	4	r
op	101:28	0:0	4	->
water	101:30	0:0	4	fmt
op	101:33	0:0	4	.
water	101:34	0:0	4	i_x_offset
water	101:44	0:0	4	;
water	102:8	0:0	4	src_clipped
op	102:19	0:0	4	.
water	102:20	0:0	4	right
op	102:26	0:0	4	=
water	102:28	0:0	4	r
op	102:29	0:0	4	->
water	102:31	0:0	4	fmt
op	102:34	0:0	4	.
water	102:35	0:0	4	i_x_offset
op	102:46	0:0	4	+
water	102:48	0:0	4	r
op	102:49	0:0	4	->
water	102:51	0:0	4	fmt
op	102:54	0:0	4	.
water	102:55	0:0	4	i_visible_width
water	102:70	0:0	4	;
water	103:8	0:0	4	src_clipped
op	103:19	0:0	4	.
water	103:20	0:0	4	top
op	103:24	0:0	4	=
water	103:26	0:0	4	r
op	103:27	0:0	4	->
water	103:29	0:0	4	fmt
op	103:32	0:0	4	.
water	103:33	0:0	4	i_y_offset
water	103:43	0:0	4	;
water	104:8	0:0	4	src_clipped
op	104:19	0:0	4	.
water	104:20	0:0	4	bottom
op	104:27	0:0	4	=
water	104:29	0:0	4	r
op	104:30	0:0	4	->
water	104:32	0:0	4	fmt
op	104:35	0:0	4	.
water	104:36	0:0	4	i_y_offset
op	104:47	0:0	4	+
water	104:49	0:0	4	r
op	104:50	0:0	4	->
water	104:52	0:0	4	fmt
op	104:55	0:0	4	.
water	104:56	0:0	4	i_visible_height
water	104:72	0:0	4	;
call	105:8	106:88	4	Direct3DSetupVertices
arg	105:30	105:42	5	d3dr->vertex
water	105:30	0:0	6	d3dr
op	105:34	0:0	6	->
water	105:36	0:0	6	vertex
arg	105:44	105:48	5	&src
op	105:44	0:0	6	&
water	105:45	0:0	6	src
arg	105:50	105:62	5	&src_clipped
op	105:50	0:0	6	&
water	105:51	0:0	6	src_clipped
arg	106:30	106:33	5	dst
water	106:30	0:0	6	dst
arg	106:35	106:73	5	subpicture->i_alpha*r->i_alpha/255
water	106:35	0:0	6	subpicture
op	106:45	0:0	6	->
water	106:47	0:0	6	i_alpha
op	106:55	0:0	6	*
water	106:57	0:0	6	r
op	106:58	0:0	6	->
water	106:60	0:0	6	i_alpha
op	106:68	0:0	6	/
water	106:70	0:0	6	255
arg	106:75	106:88	5	ORIENT_NORMAL
water	106:75	0:0	6	ORIENT_NORMAL
water	106:89	0:0	4	;
water	107:4	0:0	4	}
