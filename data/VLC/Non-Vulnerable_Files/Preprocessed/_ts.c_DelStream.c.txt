func	2:0	74:0	0	static int	DelStream
params	2:20	0:0	1	
param	2:22	2:39	2	sout_mux_t *	p_mux
param	2:41	2:63	2	sout_input_t *	p_input
stmnts	0:0	73:22	1	
decl	4:4	4:41	2	sout_mux_sys_t	*p_sys
op	4:27	0:0	2	=
water	4:29	0:0	2	p_mux
op	4:34	0:0	2	->
water	4:36	0:0	2	p_sys
decl	5:4	5:60	2	ts_stream_t	*p_stream
op	5:30	0:0	2	=
water	5:32	0:0	2	(
water	5:33	0:0	2	ts_stream_t
op	5:44	0:0	2	*
water	5:45	0:0	2	)
water	5:46	0:0	2	p_input
op	5:53	0:0	2	->
water	5:55	0:0	2	p_sys
decl	6:4	6:24	2	int	pid
call	7:4	7:61	2	msg_Dbg
arg	7:13	7:18	3	p_mux
water	7:13	0:0	4	p_mux
arg	7:20	7:43	3	"removing input pid=%d"
water	7:20	0:0	4	"removing input pid=%d"
arg	7:45	7:61	3	p_stream->i_pid
water	7:45	0:0	4	p_stream
op	7:53	0:0	4	->
water	7:55	0:0	4	i_pid
water	7:62	0:0	2	;
if	8:4	40:4	2	(p_sys -> i_pcr_pid == p_stream -> i_pid)
cond	8:8	8:38	3	p_sys -> i_pcr_pid == p_stream -> i_pid
water	8:8	0:0	4	p_sys
op	8:13	0:0	4	->
water	8:15	0:0	4	i_pcr_pid
op	8:25	0:0	4	==
water	8:28	0:0	4	p_stream
op	8:36	0:0	4	->
water	8:38	0:0	4	i_pid
stmts	9:4	40:4	3	
water	9:4	0:0	4	{
water	11:8	0:0	4	p_sys
op	11:13	0:0	4	->
water	11:15	0:0	4	i_pcr_pid
op	11:25	0:0	4	=
water	11:27	0:0	4	0
water	11:28	0:0	4	x1fff
water	11:33	0:0	4	;
water	12:8	0:0	4	p_sys
op	12:13	0:0	4	->
water	12:15	0:0	4	p_pcr_input
op	12:27	0:0	4	=
water	12:29	0:0	4	NULL
water	12:33	0:0	4	;
for	13:8	33:8	4	( int i = 0 ;i < p_mux -> i_nb_inputs;i ++)
forinit	0:0	13:22	5	 int i = 0 ;
decl	13:13	13:22	6	int	i
op	13:19	0:0	6	=
water	13:21	0:0	6	0
cond	13:24	13:35	5	i < p_mux -> i_nb_inputs
water	13:24	0:0	6	i
op	13:26	0:0	6	<
water	13:28	0:0	6	p_mux
op	13:33	0:0	6	->
water	13:35	0:0	6	i_nb_inputs
forexpr	13:48	13:49	5	i ++
water	13:48	0:0	6	i
op	13:49	0:0	6	++
stmts	14:8	33:8	5	
water	14:8	0:0	6	{
if	15:12	18:12	6	(p_mux -> pp_inputs [ i ] == p_input)
cond	15:16	15:39	7	p_mux -> pp_inputs [ i ] == p_input
water	15:16	0:0	8	p_mux
op	15:21	0:0	8	->
water	15:23	0:0	8	pp_inputs
op	15:32	0:0	8	[
water	15:33	0:0	8	i
op	15:34	0:0	8	]
op	15:36	0:0	8	==
water	15:39	0:0	8	p_input
stmts	16:12	18:12	7	
water	16:12	0:0	8	{
continue	17:16	17:24	8	
water	18:12	0:0	8	}
if	19:12	25:12	6	(p_mux -> pp_inputs [ i ] -> p_fmt -> i_cat == VIDEO_ES)
cond	19:16	19:53	7	p_mux -> pp_inputs [ i ] -> p_fmt -> i_cat == VIDEO_ES
water	19:16	0:0	8	p_mux
op	19:21	0:0	8	->
water	19:23	0:0	8	pp_inputs
op	19:32	0:0	8	[
water	19:33	0:0	8	i
op	19:34	0:0	8	]
op	19:35	0:0	8	->
water	19:37	0:0	8	p_fmt
op	19:42	0:0	8	->
water	19:44	0:0	8	i_cat
op	19:50	0:0	8	==
water	19:53	0:0	8	VIDEO_ES
stmts	20:12	25:12	7	
water	20:12	0:0	8	{
water	21:16	0:0	8	p_sys
op	21:21	0:0	8	->
water	21:23	0:0	8	i_pcr_pid
op	21:34	0:0	8	=
water	22:20	0:0	8	(
water	22:21	0:0	8	(
water	22:22	0:0	8	ts_stream_t
op	22:33	0:0	8	*
water	22:34	0:0	8	)
water	22:35	0:0	8	p_mux
op	22:40	0:0	8	->
water	22:42	0:0	8	pp_inputs
op	22:51	0:0	8	[
water	22:52	0:0	8	i
op	22:53	0:0	8	]
op	22:54	0:0	8	->
water	22:56	0:0	8	p_sys
water	22:61	0:0	8	)
op	22:62	0:0	8	->
water	22:64	0:0	8	i_pid
water	22:69	0:0	8	;
water	23:16	0:0	8	p_sys
op	23:21	0:0	8	->
water	23:23	0:0	8	p_pcr_input
op	23:34	0:0	8	=
water	23:36	0:0	8	p_mux
op	23:41	0:0	8	->
water	23:43	0:0	8	pp_inputs
op	23:52	0:0	8	[
water	23:53	0:0	8	i
op	23:54	0:0	8	]
water	23:55	0:0	8	;
break	24:16	24:21	8	
water	25:12	0:0	8	}
else	26:12	32:12	6
stmts	26:17	32:12	7	
if	26:17	32:12	8	(p_mux -> pp_inputs [ i ] -> p_fmt -> i_cat != SPU_ES && p_sys -> i_pcr_pid == 0 x1fff)
cond	26:21	27:42	9	p_mux -> pp_inputs [ i ] -> p_fmt -> i_cat != SPU_ES && p_sys -> i_pcr_pid == 0 x1fff
water	26:21	0:0	10	p_mux
op	26:26	0:0	10	->
water	26:28	0:0	10	pp_inputs
op	26:37	0:0	10	[
water	26:38	0:0	10	i
op	26:39	0:0	10	]
op	26:40	0:0	10	->
water	26:42	0:0	10	p_fmt
op	26:47	0:0	10	->
water	26:49	0:0	10	i_cat
op	26:55	0:0	10	!=
water	26:58	0:0	10	SPU_ES
op	26:65	0:0	10	&&
water	27:21	0:0	10	p_sys
op	27:26	0:0	10	->
water	27:28	0:0	10	i_pcr_pid
op	27:38	0:0	10	==
water	27:41	0:0	10	0
water	27:42	0:0	10	x1fff
stmts	28:12	32:12	9	
water	28:12	0:0	10	{
water	29:16	0:0	10	p_sys
op	29:21	0:0	10	->
water	29:23	0:0	10	i_pcr_pid
op	29:34	0:0	10	=
water	30:20	0:0	10	(
water	30:21	0:0	10	(
water	30:22	0:0	10	ts_stream_t
op	30:33	0:0	10	*
water	30:34	0:0	10	)
water	30:35	0:0	10	p_mux
op	30:40	0:0	10	->
water	30:42	0:0	10	pp_inputs
op	30:51	0:0	10	[
water	30:52	0:0	10	i
op	30:53	0:0	10	]
op	30:54	0:0	10	->
water	30:56	0:0	10	p_sys
water	30:61	0:0	10	)
op	30:62	0:0	10	->
water	30:64	0:0	10	i_pid
water	30:69	0:0	10	;
water	31:16	0:0	10	p_sys
op	31:21	0:0	10	->
water	31:23	0:0	10	p_pcr_input
op	31:34	0:0	10	=
water	31:36	0:0	10	p_mux
op	31:41	0:0	10	->
water	31:43	0:0	10	pp_inputs
op	31:52	0:0	10	[
water	31:53	0:0	10	i
op	31:54	0:0	10	]
water	31:55	0:0	10	;
water	32:12	0:0	10	}
water	33:8	0:0	6	}
if	34:8	38:8	4	(p_sys -> p_pcr_input)
cond	34:12	34:19	5	p_sys -> p_pcr_input
water	34:12	0:0	6	p_sys
op	34:17	0:0	6	->
water	34:19	0:0	6	p_pcr_input
stmts	35:8	38:8	5	
water	35:8	0:0	6	{
water	0:0	0:0	6	STATEMENTS
water	38:8	0:0	6	}
call	39:8	39:62	4	msg_Dbg
arg	39:17	39:22	5	p_mux
water	39:17	0:0	6	p_mux
arg	39:24	39:43	5	"new PCR PID is %d"
water	39:24	0:0	6	"new PCR PID is %d"
arg	39:45	39:62	5	p_sys->i_pcr_pid
water	39:45	0:0	6	p_sys
op	39:50	0:0	6	->
water	39:52	0:0	6	i_pcr_pid
water	39:63	0:0	4	;
water	40:4	0:0	4	}
call	42:4	42:43	2	BufferChainClean
arg	42:22	42:43	3	&p_stream->chain_pes
op	42:22	0:0	4	&
water	42:23	0:0	4	p_stream
op	42:31	0:0	4	->
water	42:33	0:0	4	chain_pes
water	42:44	0:0	2	;
call	43:4	43:23	2	free
arg	43:9	43:23	3	p_stream->lang
water	43:9	0:0	4	p_stream
op	43:17	0:0	4	->
water	43:19	0:0	4	lang
water	43:24	0:0	2	;
call	44:4	44:28	2	free
arg	44:10	44:28	3	p_stream->p_extra
water	44:10	0:0	4	p_stream
op	44:18	0:0	4	->
water	44:20	0:0	4	p_extra
water	44:29	0:0	2	;
if	45:4	50:4	2	(p_stream -> i_stream_id == 0 xfa || p_stream -> i_stream_id == 0 xfb || p_stream -> i_stream_id == 0 xfe)
cond	45:8	47:34	3	p_stream -> i_stream_id == 0 xfa || p_stream -> i_stream_id == 0 xfb || p_stream -> i_stream_id == 0 xfe
water	45:8	0:0	4	p_stream
op	45:16	0:0	4	->
water	45:18	0:0	4	i_stream_id
op	45:30	0:0	4	==
water	45:33	0:0	4	0
water	45:34	0:0	4	xfa
op	45:38	0:0	4	||
water	46:8	0:0	4	p_stream
op	46:16	0:0	4	->
water	46:18	0:0	4	i_stream_id
op	46:30	0:0	4	==
water	46:33	0:0	4	0
water	46:34	0:0	4	xfb
op	46:38	0:0	4	||
water	47:8	0:0	4	p_stream
op	47:16	0:0	4	->
water	47:18	0:0	4	i_stream_id
op	47:30	0:0	4	==
water	47:33	0:0	4	0
water	47:34	0:0	4	xfe
stmts	48:4	50:4	3	
water	48:4	0:0	4	{
water	49:8	0:0	4	p_sys
op	49:13	0:0	4	->
water	49:15	0:0	4	i_mpeg4_streams
op	49:30	0:0	4	--
water	49:32	0:0	4	;
water	50:4	0:0	4	}
water	51:4	0:0	2	pid
op	51:8	0:0	2	=
call	51:10	51:61	2	var_GetInteger
arg	51:26	51:31	3	p_mux
water	51:26	0:0	4	p_mux
arg	51:33	51:61	3	SOUT_CFG_PREFIX"pid-video"
water	51:33	0:0	4	SOUT_CFG_PREFIX
water	51:49	0:0	4	"pid-video"
water	51:62	0:0	2	;
if	52:4	56:4	2	(pid > 0 && pid == p_stream -> i_pid)
cond	52:9	52:37	3	pid > 0 && pid == p_stream -> i_pid
water	52:9	0:0	4	pid
op	52:13	0:0	4	>
water	52:15	0:0	4	0
op	52:17	0:0	4	&&
water	52:20	0:0	4	pid
op	52:24	0:0	4	==
water	52:27	0:0	4	p_stream
op	52:35	0:0	4	->
water	52:37	0:0	4	i_pid
stmts	53:4	56:4	3	
water	53:4	0:0	4	{
water	54:8	0:0	4	p_sys
op	54:13	0:0	4	->
water	54:15	0:0	4	i_pid_video
op	54:27	0:0	4	=
water	54:29	0:0	4	pid
water	54:32	0:0	4	;
call	55:8	55:51	4	msg_Dbg
arg	55:17	55:22	5	p_mux
water	55:17	0:0	6	p_mux
arg	55:24	55:46	5	"freeing video PID %d"
water	55:24	0:0	6	"freeing video PID %d"
arg	55:48	55:51	5	pid
water	55:48	0:0	6	pid
water	55:52	0:0	4	;
water	56:4	0:0	4	}
water	57:4	0:0	2	pid
op	57:8	0:0	2	=
call	57:10	57:61	2	var_GetInteger
arg	57:26	57:31	3	p_mux
water	57:26	0:0	4	p_mux
arg	57:33	57:61	3	SOUT_CFG_PREFIX"pid-audio"
water	57:33	0:0	4	SOUT_CFG_PREFIX
water	57:49	0:0	4	"pid-audio"
water	57:62	0:0	2	;
if	58:4	62:4	2	(pid > 0 && pid == p_stream -> i_pid)
cond	58:9	58:37	3	pid > 0 && pid == p_stream -> i_pid
water	58:9	0:0	4	pid
op	58:13	0:0	4	>
water	58:15	0:0	4	0
op	58:17	0:0	4	&&
water	58:20	0:0	4	pid
op	58:24	0:0	4	==
water	58:27	0:0	4	p_stream
op	58:35	0:0	4	->
water	58:37	0:0	4	i_pid
stmts	59:4	62:4	3	
water	59:4	0:0	4	{
water	60:8	0:0	4	p_sys
op	60:13	0:0	4	->
water	60:15	0:0	4	i_pid_audio
op	60:27	0:0	4	=
water	60:29	0:0	4	pid
water	60:32	0:0	4	;
call	61:8	61:51	4	msg_Dbg
arg	61:17	61:22	5	p_mux
water	61:17	0:0	6	p_mux
arg	61:24	61:46	5	"freeing audio PID %d"
water	61:24	0:0	6	"freeing audio PID %d"
arg	61:48	61:51	5	pid
water	61:48	0:0	6	pid
water	61:52	0:0	4	;
water	62:4	0:0	4	}
water	63:4	0:0	2	pid
op	63:8	0:0	2	=
call	63:10	63:59	2	var_GetInteger
arg	63:26	63:31	3	p_mux
water	63:26	0:0	4	p_mux
arg	63:33	63:59	3	SOUT_CFG_PREFIX"pid-spu"
water	63:33	0:0	4	SOUT_CFG_PREFIX
water	63:49	0:0	4	"pid-spu"
water	63:60	0:0	2	;
if	64:4	68:4	2	(pid > 0 && pid == p_stream -> i_pid)
cond	64:9	64:37	3	pid > 0 && pid == p_stream -> i_pid
water	64:9	0:0	4	pid
op	64:13	0:0	4	>
water	64:15	0:0	4	0
op	64:17	0:0	4	&&
water	64:20	0:0	4	pid
op	64:24	0:0	4	==
water	64:27	0:0	4	p_stream
op	64:35	0:0	4	->
water	64:37	0:0	4	i_pid
stmts	65:4	68:4	3	
water	65:4	0:0	4	{
water	66:8	0:0	4	p_sys
op	66:13	0:0	4	->
water	66:15	0:0	4	i_pid_spu
op	66:25	0:0	4	=
water	66:27	0:0	4	pid
water	66:30	0:0	4	;
call	67:8	67:49	4	msg_Dbg
arg	67:17	67:22	5	p_mux
water	67:17	0:0	6	p_mux
arg	67:24	67:44	5	"freeing spu PID %d"
water	67:24	0:0	6	"freeing spu PID %d"
arg	67:46	67:49	5	pid
water	67:46	0:0	6	pid
water	67:50	0:0	4	;
water	68:4	0:0	4	}
call	69:4	69:19	2	free
arg	69:10	69:19	3	p_stream
water	69:10	0:0	4	p_stream
water	69:20	0:0	2	;
water	71:4	0:0	2	p_sys
op	71:9	0:0	2	->
water	71:11	0:0	2	i_pmt_version_number
op	71:31	0:0	2	++
water	71:33	0:0	2	;
water	72:4	0:0	2	p_sys
op	72:9	0:0	2	->
water	72:11	0:0	2	i_pmt_version_number
op	72:32	0:0	2	%=
water	72:35	0:0	2	32
water	72:37	0:0	2	;
return	73:4	73:22	2	VLC_SUCCESS
water	73:11	0:0	3	VLC_SUCCESS
