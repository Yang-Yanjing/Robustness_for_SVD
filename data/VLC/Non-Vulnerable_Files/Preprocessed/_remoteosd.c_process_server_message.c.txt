func	2:0	233:0	0	static bool	process_server_message
params	2:35	0:0	1	
param	2:37	2:55	2	filter_t *	p_filter
param	3:37	3:63	2	rfbServerToClientMsg *	msg
stmnts	0:0	232:16	1	
decl	5:4	5:41	2	filter_sys_t	*p_sys
op	5:24	0:0	2	=
water	5:26	0:0	2	p_filter
op	5:34	0:0	2	->
water	5:36	0:0	2	p_sys
switch	6:4	231:4	2	(msg -> type)
cond	6:12	6:17	3	msg -> type
water	6:12	0:0	4	msg
op	6:15	0:0	4	->
water	6:17	0:0	4	type
stmts	7:4	231:4	3	
water	7:4	0:0	4	{
label	8:4	8:29	4	case rfbFramebufferUpdate :
water	9:8	0:0	4	{
water	10:12	0:0	4	msg
op	10:15	0:0	4	->
water	10:17	0:0	4	fu
op	10:19	0:0	4	.
water	10:20	0:0	4	nRects
op	10:27	0:0	4	=
call	10:29	10:49	4	htons
arg	10:35	10:49	5	msg->fu.nRects
water	10:35	0:0	6	msg
op	10:38	0:0	6	->
water	10:40	0:0	6	fu
op	10:42	0:0	6	.
water	10:43	0:0	6	nRects
water	10:50	0:0	4	;
decl	11:12	11:46	4	rfbFramebufferUpdateRectHeader	hdr
for	12:12	150:12	4	( int i_rect = 0 ;i_rect < msg -> fu . nRects;i_rect ++)
forinit	0:0	12:31	5	 int i_rect = 0 ;
decl	12:17	12:31	6	int	i_rect
op	12:28	0:0	6	=
water	12:30	0:0	6	0
cond	12:33	12:50	5	i_rect < msg -> fu . nRects
water	12:33	0:0	6	i_rect
op	12:40	0:0	6	<
water	12:42	0:0	6	msg
op	12:45	0:0	6	->
water	12:47	0:0	6	fu
op	12:49	0:0	6	.
water	12:50	0:0	6	nRects
forexpr	12:58	12:64	5	i_rect ++
water	12:58	0:0	6	i_rect
op	12:64	0:0	6	++
stmts	13:12	150:12	5	
water	13:12	0:0	6	{
if	14:16	19:16	6	(!read_exact (p_filter ,p_sys -> i_socket ,( char * ) & hdr ,sz_rfbFramebufferUpdateRectHeader ))
cond	14:20	15:54	7	!read_exact (p_filter ,p_sys -> i_socket ,( char * ) & hdr ,sz_rfbFramebufferUpdateRectHeader )
op	14:20	0:0	8	!
call	14:21	15:54	8	read_exact
arg	14:32	14:40	9	p_filter
water	14:32	0:0	10	p_filter
arg	14:42	14:57	9	p_sys->i_socket
water	14:42	0:0	10	p_sys
op	14:47	0:0	10	->
water	14:49	0:0	10	i_socket
arg	14:59	14:70	9	(char*)&hdr
water	14:59	0:0	10	(
water	14:60	0:0	10	char
op	14:64	0:0	10	*
water	14:65	0:0	10	)
op	14:66	0:0	10	&
water	14:67	0:0	10	hdr
arg	15:20	15:54	9	sz_rfbFramebufferUpdateRectHeader
water	15:20	0:0	10	sz_rfbFramebufferUpdateRectHeader
stmts	16:16	19:16	7	
water	16:16	0:0	8	{
call	17:20	17:81	8	msg_Err
arg	17:29	17:37	9	p_filter
water	17:29	0:0	10	p_filter
arg	17:39	17:81	9	"Could not read FrameBufferUpdate header"
water	17:39	0:0	10	"Could not read FrameBufferUpdate header"
water	17:82	0:0	8	;
return	18:20	18:32	8	false
water	18:27	0:0	9	false
water	19:16	0:0	8	}
water	20:16	0:0	6	hdr
op	20:19	0:0	6	.
water	20:20	0:0	6	r
op	20:21	0:0	6	.
water	20:22	0:0	6	x
op	20:24	0:0	6	=
call	20:26	20:39	6	htons
arg	20:32	20:39	7	hdr.r.x
water	20:32	0:0	8	hdr
op	20:35	0:0	8	.
water	20:36	0:0	8	r
op	20:37	0:0	8	.
water	20:38	0:0	8	x
water	20:40	0:0	6	;
water	21:16	0:0	6	hdr
op	21:19	0:0	6	.
water	21:20	0:0	6	r
op	21:21	0:0	6	.
water	21:22	0:0	6	y
op	21:24	0:0	6	=
call	21:26	21:39	6	htons
arg	21:32	21:39	7	hdr.r.y
water	21:32	0:0	8	hdr
op	21:35	0:0	8	.
water	21:36	0:0	8	r
op	21:37	0:0	8	.
water	21:38	0:0	8	y
water	21:40	0:0	6	;
water	22:16	0:0	6	hdr
op	22:19	0:0	6	.
water	22:20	0:0	6	r
op	22:21	0:0	6	.
water	22:22	0:0	6	w
op	22:24	0:0	6	=
call	22:26	22:39	6	htons
arg	22:32	22:39	7	hdr.r.w
water	22:32	0:0	8	hdr
op	22:35	0:0	8	.
water	22:36	0:0	8	r
op	22:37	0:0	8	.
water	22:38	0:0	8	w
water	22:40	0:0	6	;
water	23:16	0:0	6	hdr
op	23:19	0:0	6	.
water	23:20	0:0	6	r
op	23:21	0:0	6	.
water	23:22	0:0	6	h
op	23:24	0:0	6	=
call	23:26	23:39	6	htons
arg	23:32	23:39	7	hdr.r.h
water	23:32	0:0	8	hdr
op	23:35	0:0	8	.
water	23:36	0:0	8	r
op	23:37	0:0	8	.
water	23:38	0:0	8	h
water	23:40	0:0	6	;
water	24:16	0:0	6	hdr
op	24:19	0:0	6	.
water	24:20	0:0	6	encoding
op	24:29	0:0	6	=
call	24:31	24:49	6	htonl
arg	24:37	24:49	7	hdr.encoding
water	24:37	0:0	8	hdr
op	24:40	0:0	8	.
water	24:41	0:0	8	encoding
water	24:50	0:0	6	;
switch	25:16	149:16	6	(hdr . encoding)
cond	25:24	25:28	7	hdr . encoding
water	25:24	0:0	8	hdr
op	25:27	0:0	8	.
water	25:28	0:0	8	encoding
stmts	26:16	149:16	7	
water	26:16	0:0	8	{
label	27:16	27:35	8	case rfbEncodingRaw :
water	28:20	0:0	8	{
decl	29:24	29:34	8	int	i_line
for	30:24	49:24	8	(i_line = 0 ;i_line < hdr . r . h;i_line ++)
forinit	30:29	30:39	9	i_line = 0 ;
water	30:29	0:0	10	i_line
op	30:36	0:0	10	=
water	30:38	0:0	10	0
water	30:39	0:0	10	;
cond	30:41	30:56	9	i_line < hdr . r . h
water	30:41	0:0	10	i_line
op	30:48	0:0	10	<
water	30:50	0:0	10	hdr
op	30:53	0:0	10	.
water	30:54	0:0	10	r
op	30:55	0:0	10	.
water	30:56	0:0	10	h
forexpr	30:59	30:65	9	i_line ++
water	30:59	0:0	10	i_line
op	30:65	0:0	10	++
stmts	31:24	49:24	9	
water	31:24	0:0	10	{
if	32:28	38:28	10	(!read_exact (p_filter ,p_sys -> i_socket ,p_sys -> read_buffer ,hdr . r . w ))
cond	32:33	33:64	11	!read_exact (p_filter ,p_sys -> i_socket ,p_sys -> read_buffer ,hdr . r . w )
op	32:33	0:0	12	!
call	32:34	33:64	12	read_exact
arg	32:46	32:54	13	p_filter
water	32:46	0:0	14	p_filter
arg	32:56	32:71	13	p_sys->i_socket
water	32:56	0:0	14	p_sys
op	32:61	0:0	14	->
water	32:63	0:0	14	i_socket
arg	33:36	33:54	13	p_sys->read_buffer
water	33:36	0:0	14	p_sys
op	33:41	0:0	14	->
water	33:43	0:0	14	read_buffer
arg	33:56	33:64	13	hdr.r.w
water	33:56	0:0	14	hdr
op	33:59	0:0	14	.
water	33:60	0:0	14	r
op	33:61	0:0	14	.
water	33:62	0:0	14	w
stmts	34:28	38:28	11	
water	34:28	0:0	12	{
call	35:32	36:78	12	msg_Err
arg	35:41	35:49	13	p_filter
water	35:41	0:0	14	p_filter
arg	36:33	36:78	13	"Could not read FrameBufferUpdate line data"
water	36:33	0:0	14	"Could not read FrameBufferUpdate line data"
water	36:79	0:0	12	;
return	37:31	37:43	12	false
water	37:38	0:0	13	false
water	38:28	0:0	12	}
call	39:28	39:57	10	vlc_mutex_lock
arg	39:44	39:57	11	&p_sys->lock
op	39:44	0:0	12	&
water	39:45	0:0	12	p_sys
op	39:50	0:0	12	->
water	39:52	0:0	12	lock
water	39:58	0:0	10	;
if	40:28	47:28	10	(!raw_line (p_sys ,hdr . r . x ,hdr . r . y + i_line ,hdr . r . w ))
cond	40:33	42:52	11	!raw_line (p_sys ,hdr . r . x ,hdr . r . y + i_line ,hdr . r . w )
op	40:33	0:0	12	!
call	40:34	42:52	12	raw_line
arg	40:44	40:49	13	p_sys
water	40:44	0:0	14	p_sys
arg	40:51	40:58	13	hdr.r.x
water	40:51	0:0	14	hdr
op	40:54	0:0	14	.
water	40:55	0:0	14	r
op	40:56	0:0	14	.
water	40:57	0:0	14	x
arg	41:44	41:60	13	hdr.r.y+i_line
water	41:44	0:0	14	hdr
op	41:47	0:0	14	.
water	41:48	0:0	14	r
op	41:49	0:0	14	.
water	41:50	0:0	14	y
op	41:52	0:0	14	+
water	41:54	0:0	14	i_line
arg	42:44	42:52	13	hdr.r.w
water	42:44	0:0	14	hdr
op	42:47	0:0	14	.
water	42:48	0:0	14	r
op	42:49	0:0	14	.
water	42:50	0:0	14	w
stmts	43:28	47:28	11	
water	43:28	0:0	12	{
call	44:32	44:70	12	msg_Err
arg	44:41	44:49	13	p_filter
water	44:41	0:0	14	p_filter
arg	44:51	44:70	13	"raw_line failed."
water	44:51	0:0	14	"raw_line failed."
water	44:71	0:0	12	;
call	45:32	45:63	12	vlc_mutex_unlock
arg	45:50	45:63	13	&p_sys->lock
op	45:50	0:0	14	&
water	45:51	0:0	14	p_sys
op	45:56	0:0	14	->
water	45:58	0:0	14	lock
water	45:64	0:0	12	;
return	46:32	46:44	12	false
water	46:39	0:0	13	false
water	47:28	0:0	12	}
call	48:28	48:59	10	vlc_mutex_unlock
arg	48:46	48:59	11	&p_sys->lock
op	48:46	0:0	12	&
water	48:47	0:0	12	p_sys
op	48:52	0:0	12	->
water	48:54	0:0	12	lock
water	48:60	0:0	10	;
water	49:24	0:0	10	}
water	50:20	0:0	8	}
break	51:20	51:25	8	
label	52:16	52:40	8	case rfbEncodingCopyRect :
water	53:20	0:0	8	{
decl	54:24	54:40	8	rfbCopyRect	rect
if	55:24	61:24	8	(!read_exact (p_filter ,p_sys -> i_socket ,( char * ) & rect ,sz_rfbCopyRect ))
cond	55:29	57:57	9	!read_exact (p_filter ,p_sys -> i_socket ,( char * ) & rect ,sz_rfbCopyRect )
op	55:29	0:0	10	!
call	55:30	57:57	10	read_exact
arg	55:42	55:50	11	p_filter
water	55:42	0:0	12	p_filter
arg	55:52	55:67	11	p_sys->i_socket
water	55:52	0:0	12	p_sys
op	55:57	0:0	12	->
water	55:59	0:0	12	i_socket
arg	56:42	56:54	11	(char*)&rect
water	56:42	0:0	12	(
water	56:43	0:0	12	char
op	56:47	0:0	12	*
water	56:48	0:0	12	)
op	56:49	0:0	12	&
water	56:50	0:0	12	rect
arg	57:42	57:57	11	sz_rfbCopyRect
water	57:42	0:0	12	sz_rfbCopyRect
stmts	58:24	61:24	9	
water	58:24	0:0	10	{
call	59:28	59:76	10	msg_Err
arg	59:37	59:45	11	p_filter
water	59:37	0:0	12	p_filter
arg	59:47	59:76	11	"Could not read rfbCopyRect"
water	59:47	0:0	12	"Could not read rfbCopyRect"
water	59:77	0:0	10	;
return	60:28	60:40	10	false
water	60:35	0:0	11	false
water	61:24	0:0	10	}
water	62:24	0:0	8	rect
op	62:28	0:0	8	.
water	62:29	0:0	8	srcX
op	62:34	0:0	8	=
call	62:36	62:53	8	htons
arg	62:43	62:53	9	rect.srcX
water	62:43	0:0	10	rect
op	62:47	0:0	10	.
water	62:48	0:0	10	srcX
water	62:54	0:0	8	;
water	63:24	0:0	8	rect
op	63:28	0:0	8	.
water	63:29	0:0	8	srcY
op	63:34	0:0	8	=
call	63:36	63:53	8	htons
arg	63:43	63:53	9	rect.srcY
water	63:43	0:0	10	rect
op	63:47	0:0	10	.
water	63:48	0:0	10	srcY
water	63:54	0:0	8	;
call	64:24	64:53	8	vlc_mutex_lock
arg	64:40	64:53	9	&p_sys->lock
op	64:40	0:0	10	&
water	64:41	0:0	10	p_sys
op	64:46	0:0	10	->
water	64:48	0:0	10	lock
water	64:54	0:0	8	;
if	65:24	73:24	8	(!copy_rect (p_sys ,hdr . r . x ,hdr . r . y ,hdr . r . w ,hdr . r . h ,rect . srcX ,rect . srcY ))
cond	65:29	68:62	9	!copy_rect (p_sys ,hdr . r . x ,hdr . r . y ,hdr . r . w ,hdr . r . h ,rect . srcX ,rect . srcY )
op	65:29	0:0	10	!
call	65:30	68:62	10	copy_rect
arg	65:41	65:46	11	p_sys
water	65:41	0:0	12	p_sys
arg	66:41	66:48	11	hdr.r.x
water	66:41	0:0	12	hdr
op	66:44	0:0	12	.
water	66:45	0:0	12	r
op	66:46	0:0	12	.
water	66:47	0:0	12	x
arg	66:52	66:59	11	hdr.r.y
water	66:52	0:0	12	hdr
op	66:55	0:0	12	.
water	66:56	0:0	12	r
op	66:57	0:0	12	.
water	66:58	0:0	12	y
arg	67:41	67:48	11	hdr.r.w
water	67:41	0:0	12	hdr
op	67:44	0:0	12	.
water	67:45	0:0	12	r
op	67:46	0:0	12	.
water	67:47	0:0	12	w
arg	67:52	67:59	11	hdr.r.h
water	67:52	0:0	12	hdr
op	67:55	0:0	12	.
water	67:56	0:0	12	r
op	67:57	0:0	12	.
water	67:58	0:0	12	h
arg	68:41	68:50	11	rect.srcX
water	68:41	0:0	12	rect
op	68:45	0:0	12	.
water	68:46	0:0	12	srcX
arg	68:52	68:62	11	rect.srcY
water	68:52	0:0	12	rect
op	68:56	0:0	12	.
water	68:57	0:0	12	srcY
stmts	69:24	73:24	9	
water	69:24	0:0	10	{
call	70:28	70:67	10	msg_Err
arg	70:37	70:45	11	p_filter
water	70:37	0:0	12	p_filter
arg	70:47	70:67	11	"copy_rect failed."
water	70:47	0:0	12	"copy_rect failed."
water	70:68	0:0	10	;
call	71:28	71:59	10	vlc_mutex_unlock
arg	71:46	71:59	11	&p_sys->lock
op	71:46	0:0	12	&
water	71:47	0:0	12	p_sys
op	71:52	0:0	12	->
water	71:54	0:0	12	lock
water	71:60	0:0	10	;
return	72:28	72:40	10	false
water	72:35	0:0	11	false
water	73:24	0:0	10	}
call	74:24	74:55	8	vlc_mutex_unlock
arg	74:42	74:55	9	&p_sys->lock
op	74:42	0:0	10	&
water	74:43	0:0	10	p_sys
op	74:48	0:0	10	->
water	74:50	0:0	10	lock
water	74:56	0:0	8	;
water	75:20	0:0	8	}
break	76:20	76:25	8	
label	77:16	77:35	8	case rfbEncodingRRE :
water	78:20	0:0	8	{
decl	79:24	79:43	8	rfbRREHeader	rrehdr
if	80:24	86:24	8	(!read_exact (p_filter ,p_sys -> i_socket ,( char * ) & rrehdr ,sz_rfbRREHeader ))
cond	80:29	82:58	9	!read_exact (p_filter ,p_sys -> i_socket ,( char * ) & rrehdr ,sz_rfbRREHeader )
op	80:29	0:0	10	!
call	80:30	82:58	10	read_exact
arg	80:42	80:50	11	p_filter
water	80:42	0:0	12	p_filter
arg	80:52	80:67	11	p_sys->i_socket
water	80:52	0:0	12	p_sys
op	80:57	0:0	12	->
water	80:59	0:0	12	i_socket
arg	81:42	81:56	11	(char*)&rrehdr
water	81:42	0:0	12	(
water	81:43	0:0	12	char
op	81:47	0:0	12	*
water	81:48	0:0	12	)
op	81:49	0:0	12	&
water	81:50	0:0	12	rrehdr
arg	82:42	82:58	11	sz_rfbRREHeader
water	82:42	0:0	12	sz_rfbRREHeader
stmts	83:24	86:24	9	
water	83:24	0:0	10	{
call	84:28	84:77	10	msg_Err
arg	84:37	84:45	11	p_filter
water	84:37	0:0	12	p_filter
arg	84:47	84:77	11	"Could not read rfbRREHeader"
water	84:47	0:0	12	"Could not read rfbRREHeader"
water	84:78	0:0	10	;
return	85:28	85:40	10	false
water	85:35	0:0	11	false
water	86:24	0:0	10	}
decl	87:24	87:42	8	uint8_t	i_pixcolor
if	88:24	93:24	8	(!read_exact (p_filter ,p_sys -> i_socket ,( char * ) & i_pixcolor ,1 ))
cond	88:29	89:63	9	!read_exact (p_filter ,p_sys -> i_socket ,( char * ) & i_pixcolor ,1 )
op	88:29	0:0	10	!
call	88:30	89:63	10	read_exact
arg	88:41	88:49	11	p_filter
water	88:41	0:0	12	p_filter
arg	88:51	88:66	11	p_sys->i_socket
water	88:51	0:0	12	p_sys
op	88:56	0:0	12	->
water	88:58	0:0	12	i_socket
arg	89:41	89:59	11	(char*)&i_pixcolor
water	89:41	0:0	12	(
water	89:42	0:0	12	char
op	89:46	0:0	12	*
water	89:47	0:0	12	)
op	89:48	0:0	12	&
water	89:49	0:0	12	i_pixcolor
arg	89:61	89:63	11	1
water	89:61	0:0	12	1
stmts	90:24	93:24	9	
water	90:24	0:0	10	{
call	91:28	91:77	10	msg_Err
arg	91:37	91:45	11	p_filter
water	91:37	0:0	12	p_filter
arg	91:47	91:77	11	"Could not read RRE pixcolor"
water	91:47	0:0	12	"Could not read RRE pixcolor"
water	91:78	0:0	10	;
return	92:28	92:40	10	false
water	92:35	0:0	11	false
water	93:24	0:0	10	}
call	94:24	94:53	8	vlc_mutex_lock
arg	94:40	94:53	9	&p_sys->lock
op	94:40	0:0	10	&
water	94:41	0:0	10	p_sys
op	94:46	0:0	10	->
water	94:48	0:0	10	lock
water	94:54	0:0	8	;
if	95:24	103:24	8	(!fill_rect (p_sys ,hdr . r . x ,hdr . r . y ,hdr . r . w ,hdr . r . h ,i_pixcolor ))
cond	95:29	98:50	9	!fill_rect (p_sys ,hdr . r . x ,hdr . r . y ,hdr . r . w ,hdr . r . h ,i_pixcolor )
op	95:29	0:0	10	!
call	95:30	98:50	10	fill_rect
arg	95:41	95:46	11	p_sys
water	95:41	0:0	12	p_sys
arg	96:40	96:47	11	hdr.r.x
water	96:40	0:0	12	hdr
op	96:43	0:0	12	.
water	96:44	0:0	12	r
op	96:45	0:0	12	.
water	96:46	0:0	12	x
arg	96:49	96:56	11	hdr.r.y
water	96:49	0:0	12	hdr
op	96:52	0:0	12	.
water	96:53	0:0	12	r
op	96:54	0:0	12	.
water	96:55	0:0	12	y
arg	97:40	97:47	11	hdr.r.w
water	97:40	0:0	12	hdr
op	97:43	0:0	12	.
water	97:44	0:0	12	r
op	97:45	0:0	12	.
water	97:46	0:0	12	w
arg	97:49	97:56	11	hdr.r.h
water	97:49	0:0	12	hdr
op	97:52	0:0	12	.
water	97:53	0:0	12	r
op	97:54	0:0	12	.
water	97:55	0:0	12	h
arg	98:40	98:50	11	i_pixcolor
water	98:40	0:0	12	i_pixcolor
stmts	99:24	103:24	9	
water	99:24	0:0	10	{
call	100:28	100:72	10	msg_Err
arg	100:37	100:45	11	p_filter
water	100:37	0:0	12	p_filter
arg	100:47	100:72	11	"main fill_rect failed."
water	100:47	0:0	12	"main fill_rect failed."
water	100:73	0:0	10	;
call	101:28	101:59	10	vlc_mutex_unlock
arg	101:46	101:59	11	&p_sys->lock
op	101:46	0:0	12	&
water	101:47	0:0	12	p_sys
op	101:52	0:0	12	->
water	101:54	0:0	12	lock
water	101:60	0:0	10	;
return	102:28	102:40	10	false
water	102:35	0:0	11	false
water	103:24	0:0	10	}
call	104:24	104:55	8	vlc_mutex_unlock
arg	104:42	104:55	9	&p_sys->lock
op	104:42	0:0	10	&
water	104:43	0:0	10	p_sys
op	104:48	0:0	10	->
water	104:50	0:0	10	lock
water	104:56	0:0	8	;
water	105:24	0:0	8	rrehdr
op	105:30	0:0	8	.
water	105:31	0:0	8	nSubrects
op	105:41	0:0	8	=
call	105:43	105:65	8	htonl
arg	105:49	105:65	9	rrehdr.nSubrects
water	105:49	0:0	10	rrehdr
op	105:55	0:0	10	.
water	105:56	0:0	10	nSubrects
water	105:66	0:0	8	;
decl	106:24	107:78	8	int	i_datasize
op	106:39	0:0	8	=
water	106:41	0:0	8	rrehdr
op	106:47	0:0	8	.
water	106:48	0:0	8	nSubrects
op	106:58	0:0	8	*
water	107:37	0:0	8	(
op	107:39	0:0	8	sizeof
water	107:45	0:0	8	(
water	107:46	0:0	8	i_pixcolor
water	107:56	0:0	8	)
op	107:58	0:0	8	+
water	107:60	0:0	8	sz_rfbRectangle
water	107:76	0:0	8	)
if	108:24	113:24	8	(i_datasize > READ_BUFFER_SIZE)
cond	108:29	108:42	9	i_datasize > READ_BUFFER_SIZE
water	108:29	0:0	10	i_datasize
op	108:40	0:0	10	>
water	108:42	0:0	10	READ_BUFFER_SIZE
stmts	109:24	113:24	9	
water	109:24	0:0	10	{
call	110:28	111:65	10	msg_Err
arg	110:37	110:45	11	p_filter
water	110:37	0:0	12	p_filter
arg	110:47	111:52	11	"Buffer too small, ""need %u bytes"
water	110:47	0:0	12	"Buffer too small, "
water	111:37	0:0	12	"need %u bytes"
arg	111:54	111:65	11	i_datasize
water	111:54	0:0	12	i_datasize
water	111:66	0:0	10	;
return	112:28	112:40	10	false
water	112:35	0:0	11	false
water	113:24	0:0	10	}
if	114:24	120:24	8	(!read_exact (p_filter ,p_sys -> i_socket ,p_sys -> read_buffer ,i_datasize ))
cond	114:29	115:70	9	!read_exact (p_filter ,p_sys -> i_socket ,p_sys -> read_buffer ,i_datasize )
op	114:29	0:0	10	!
call	114:30	115:70	10	read_exact
arg	114:42	114:50	11	p_filter
water	114:42	0:0	12	p_filter
arg	114:52	114:67	11	p_sys->i_socket
water	114:52	0:0	12	p_sys
op	114:57	0:0	12	->
water	114:59	0:0	12	i_socket
arg	115:39	115:57	11	p_sys->read_buffer
water	115:39	0:0	12	p_sys
op	115:44	0:0	12	->
water	115:46	0:0	12	read_buffer
arg	115:59	115:70	11	i_datasize
water	115:59	0:0	12	i_datasize
stmts	116:24	120:24	9	
water	116:24	0:0	10	{
call	117:28	118:71	10	msg_Err
arg	117:37	117:45	11	p_filter
water	117:37	0:0	12	p_filter
arg	118:37	118:71	11	"Could not read RRE subrect data"
water	118:37	0:0	12	"Could not read RRE subrect data"
water	118:72	0:0	10	;
return	119:28	119:40	10	false
water	119:35	0:0	11	false
water	120:24	0:0	10	}
decl	121:24	121:42	8	uint32_t	i_subrect
decl	122:24	122:47	8	rfbRectangle	*p_subrect
decl	123:24	123:40	8	int	i_offset
op	123:37	0:0	8	=
water	123:39	0:0	8	0
call	124:24	124:53	8	vlc_mutex_lock
arg	124:40	124:53	9	&p_sys->lock
op	124:40	0:0	10	&
water	124:41	0:0	10	p_sys
op	124:46	0:0	10	->
water	124:48	0:0	10	lock
water	124:54	0:0	8	;
for	125:24	145:24	8	(i_subrect = 0 ;i_subrect < rrehdr . nSubrects;i_subrect ++)
forinit	125:30	125:43	9	i_subrect = 0 ;
water	125:30	0:0	10	i_subrect
op	125:40	0:0	10	=
water	125:42	0:0	10	0
water	125:43	0:0	10	;
cond	126:30	126:49	9	i_subrect < rrehdr . nSubrects
water	126:30	0:0	10	i_subrect
op	126:40	0:0	10	<
water	126:42	0:0	10	rrehdr
op	126:48	0:0	10	.
water	126:49	0:0	10	nSubrects
forexpr	126:60	126:69	9	i_subrect ++
water	126:60	0:0	10	i_subrect
op	126:69	0:0	10	++
stmts	127:24	145:24	9	
water	127:24	0:0	10	{
water	128:28	0:0	10	i_pixcolor
op	128:39	0:0	10	=
water	128:41	0:0	10	p_sys
op	128:46	0:0	10	->
water	128:48	0:0	10	read_buffer
op	128:59	0:0	10	[
water	128:60	0:0	10	i_offset
op	128:68	0:0	10	]
water	128:69	0:0	10	;
water	129:28	0:0	10	i_offset
op	129:37	0:0	10	+=
op	129:40	0:0	10	sizeof
water	129:46	0:0	10	(
water	129:47	0:0	10	i_pixcolor
water	129:57	0:0	10	)
water	129:58	0:0	10	;
water	130:28	0:0	10	p_subrect
op	130:38	0:0	10	=
call	131:31	131:76	10	(rfbRectangle*)
arg	131:47	131:76	11	p_sys->read_buffer+i_offset
water	131:47	0:0	12	p_sys
op	131:52	0:0	12	->
water	131:54	0:0	12	read_buffer
op	131:66	0:0	12	+
water	131:68	0:0	12	i_offset
water	131:77	0:0	10	;
water	132:28	0:0	10	i_offset
op	132:37	0:0	10	+=
water	132:40	0:0	10	sz_rfbRectangle
water	132:55	0:0	10	;
if	133:28	144:28	10	(!fill_rect (p_sys ,htons (p_subrect -> x ) + hdr . r . x ,htons (p_subrect -> y ) + hdr . r . y ,htons (p_subrect -> w ) ,htons (p_subrect -> h ) ,i_pixcolor ))
cond	133:32	138:54	11	!fill_rect (p_sys ,htons (p_subrect -> x ) + hdr . r . x ,htons (p_subrect -> y ) + hdr . r . y ,htons (p_subrect -> w ) ,htons (p_subrect -> h ) ,i_pixcolor )
op	133:32	0:0	12	!
call	133:33	138:54	12	fill_rect
arg	133:44	133:49	13	p_sys
water	133:44	0:0	14	p_sys
arg	134:44	134:73	13	htons(p_subrect->x)+hdr.r.x
call	134:44	134:62	14	htons
arg	134:50	134:62	15	p_subrect->x
water	134:50	0:0	16	p_subrect
op	134:59	0:0	16	->
water	134:61	0:0	16	x
op	134:64	0:0	14	+
water	134:66	0:0	14	hdr
op	134:69	0:0	14	.
water	134:70	0:0	14	r
op	134:71	0:0	14	.
water	134:72	0:0	14	x
arg	135:44	135:73	13	htons(p_subrect->y)+hdr.r.y
call	135:44	135:62	14	htons
arg	135:50	135:62	15	p_subrect->y
water	135:50	0:0	16	p_subrect
op	135:59	0:0	16	->
water	135:61	0:0	16	y
op	135:64	0:0	14	+
water	135:66	0:0	14	hdr
op	135:69	0:0	14	.
water	135:70	0:0	14	r
op	135:71	0:0	14	.
water	135:72	0:0	14	y
arg	136:44	136:63	13	htons(p_subrect->w)
call	136:44	136:62	14	htons
arg	136:50	136:62	15	p_subrect->w
water	136:50	0:0	16	p_subrect
op	136:59	0:0	16	->
water	136:61	0:0	16	w
arg	137:44	137:63	13	htons(p_subrect->h)
call	137:44	137:62	14	htons
arg	137:50	137:62	15	p_subrect->h
water	137:50	0:0	16	p_subrect
op	137:59	0:0	16	->
water	137:61	0:0	16	h
arg	138:44	138:54	13	i_pixcolor
water	138:44	0:0	14	i_pixcolor
stmts	139:28	144:28	11	
water	139:28	0:0	12	{
call	140:32	141:78	12	msg_Err
arg	140:41	140:49	13	p_filter
water	140:41	0:0	14	p_filter
arg	141:36	141:66	13	"subrect %u fill_rect failed."
water	141:36	0:0	14	"subrect %u fill_rect failed."
arg	141:68	141:78	13	i_subrect
water	141:68	0:0	14	i_subrect
water	141:79	0:0	12	;
call	142:32	142:63	12	vlc_mutex_unlock
arg	142:50	142:63	13	&p_sys->lock
op	142:50	0:0	14	&
water	142:51	0:0	14	p_sys
op	142:56	0:0	14	->
water	142:58	0:0	14	lock
water	142:64	0:0	12	;
return	143:32	143:44	12	false
water	143:39	0:0	13	false
water	144:28	0:0	12	}
water	145:24	0:0	10	}
call	146:24	146:55	8	vlc_mutex_unlock
arg	146:42	146:55	9	&p_sys->lock
op	146:42	0:0	10	&
water	146:43	0:0	10	p_sys
op	146:48	0:0	10	->
water	146:50	0:0	10	lock
water	146:56	0:0	8	;
water	147:20	0:0	8	}
break	148:20	148:25	8	
water	149:16	0:0	8	}
water	150:12	0:0	6	}
call	151:12	151:41	4	vlc_mutex_lock
arg	151:28	151:41	5	&p_sys->lock
op	151:28	0:0	6	&
water	151:29	0:0	6	p_sys
op	151:34	0:0	6	->
water	151:36	0:0	6	lock
water	151:42	0:0	4	;
water	152:12	0:0	4	p_sys
op	152:17	0:0	4	->
water	152:19	0:0	4	b_need_update
op	152:33	0:0	4	=
water	152:35	0:0	4	true
water	152:39	0:0	4	;
call	153:12	153:43	4	vlc_mutex_unlock
arg	153:30	153:43	5	&p_sys->lock
op	153:30	0:0	6	&
water	153:31	0:0	6	p_sys
op	153:36	0:0	6	->
water	153:38	0:0	6	lock
water	153:44	0:0	4	;
water	154:8	0:0	4	}
return	155:8	155:19	4	true
water	155:15	0:0	5	true
label	156:4	156:31	4	case rfbSetColourMapEntries :
water	157:8	0:0	4	{
water	158:12	0:0	4	msg
op	158:15	0:0	4	->
water	158:17	0:0	4	scme
op	158:21	0:0	4	.
water	158:22	0:0	4	nColours
op	158:31	0:0	4	=
call	158:33	158:57	4	htons
arg	158:39	158:57	5	msg->scme.nColours
water	158:39	0:0	6	msg
op	158:42	0:0	6	->
water	158:44	0:0	6	scme
op	158:48	0:0	6	.
water	158:49	0:0	6	nColours
water	158:58	0:0	4	;
water	159:12	0:0	4	msg
op	159:15	0:0	4	->
water	159:17	0:0	4	scme
op	159:21	0:0	4	.
water	159:22	0:0	4	firstColour
op	159:34	0:0	4	=
call	159:36	159:63	4	htons
arg	159:42	159:63	5	msg->scme.firstColour
water	159:42	0:0	6	msg
op	159:45	0:0	6	->
water	159:47	0:0	6	scme
op	159:51	0:0	6	.
water	159:52	0:0	6	firstColour
water	159:64	0:0	4	;
decl	160:12	160:26	4	int	i_datasize
if	161:12	164:12	4	(p_sys -> b_alpha_from_vnc)
cond	161:17	161:24	5	p_sys -> b_alpha_from_vnc
water	161:17	0:0	6	p_sys
op	161:22	0:0	6	->
water	161:24	0:0	6	b_alpha_from_vnc
stmts	162:12	164:12	5	
water	162:12	0:0	6	{
water	163:16	0:0	6	i_datasize
op	163:27	0:0	6	=
water	163:29	0:0	6	2
op	163:31	0:0	6	*
water	163:33	0:0	6	msg
op	163:36	0:0	6	->
water	163:38	0:0	6	scme
op	163:42	0:0	6	.
water	163:43	0:0	6	nColours
op	163:52	0:0	6	*
water	163:54	0:0	6	4
water	163:55	0:0	6	;
water	164:12	0:0	6	}
else	165:12	168:12	4
stmts	166:12	168:12	5	
water	166:12	0:0	6	{
water	167:16	0:0	6	i_datasize
op	167:27	0:0	6	=
water	167:29	0:0	6	2
op	167:31	0:0	6	*
water	167:33	0:0	6	msg
op	167:36	0:0	6	->
water	167:38	0:0	6	scme
op	167:42	0:0	6	.
water	167:43	0:0	6	nColours
op	167:52	0:0	6	*
water	167:54	0:0	6	3
water	167:55	0:0	6	;
water	168:12	0:0	6	}
if	169:12	174:12	4	(i_datasize > READ_BUFFER_SIZE)
cond	169:17	169:30	5	i_datasize > READ_BUFFER_SIZE
water	169:17	0:0	6	i_datasize
op	169:28	0:0	6	>
water	169:30	0:0	6	READ_BUFFER_SIZE
stmts	170:12	174:12	5	
water	170:12	0:0	6	{
call	171:16	172:46	6	msg_Err
arg	171:25	171:33	7	p_filter
water	171:25	0:0	8	p_filter
arg	171:35	171:68	7	"Buffer too small, need %u bytes"
water	171:35	0:0	8	"Buffer too small, need %u bytes"
arg	172:35	172:46	7	i_datasize
water	172:35	0:0	8	i_datasize
water	172:47	0:0	6	;
return	173:16	173:28	6	false
water	173:23	0:0	7	false
water	174:12	0:0	6	}
if	175:12	180:12	4	(!read_exact (p_filter ,p_sys -> i_socket ,p_sys -> read_buffer ,i_datasize ))
cond	175:17	176:61	5	!read_exact (p_filter ,p_sys -> i_socket ,p_sys -> read_buffer ,i_datasize )
op	175:17	0:0	6	!
call	175:18	176:61	6	read_exact
arg	175:30	175:38	7	p_filter
water	175:30	0:0	8	p_filter
arg	175:40	175:55	7	p_sys->i_socket
water	175:40	0:0	8	p_sys
op	175:45	0:0	8	->
water	175:47	0:0	8	i_socket
arg	176:30	176:48	7	p_sys->read_buffer
water	176:30	0:0	8	p_sys
op	176:35	0:0	8	->
water	176:37	0:0	8	read_buffer
arg	176:50	176:61	7	i_datasize
water	176:50	0:0	8	i_datasize
stmts	177:12	180:12	5	
water	177:12	0:0	6	{
call	178:16	178:67	6	msg_Err
arg	178:25	178:33	7	p_filter
water	178:25	0:0	8	p_filter
arg	178:35	178:67	7	"Could not read color map data"
water	178:35	0:0	8	"Could not read color map data"
water	178:68	0:0	6	;
return	179:16	179:28	6	false
water	179:23	0:0	7	false
water	180:12	0:0	6	}
decl	181:12	181:66	4	uint8_t	i_red
water	181:25	0:0	4	,
decl	181:12	181:66	4	uint8_t	i_green
water	181:34	0:0	4	,
decl	181:12	181:66	4	uint8_t	i_blue
water	181:42	0:0	4	,
decl	181:12	181:66	4	uint8_t	i_alpha
water	181:51	0:0	4	,
decl	181:12	181:66	4	uint8_t	i_color_index
decl	182:12	182:33	4	uint16_t	i_offset
op	182:30	0:0	4	=
water	182:32	0:0	4	0
water	183:12	0:0	4	i_alpha
op	183:20	0:0	4	=
water	183:22	0:0	4	255
water	183:25	0:0	4	;
for	184:12	205:12	4	( int i = 0 ;i < msg -> scme . nColours;i ++)
forinit	0:0	184:26	5	 int i = 0 ;
decl	184:17	184:26	6	int	i
op	184:23	0:0	6	=
water	184:25	0:0	6	0
cond	184:28	184:42	5	i < msg -> scme . nColours
water	184:28	0:0	6	i
op	184:30	0:0	6	<
water	184:32	0:0	6	msg
op	184:35	0:0	6	->
water	184:37	0:0	6	scme
op	184:41	0:0	6	.
water	184:42	0:0	6	nColours
forexpr	184:52	184:53	5	i ++
water	184:52	0:0	6	i
op	184:53	0:0	6	++
stmts	185:12	205:12	5	
water	185:12	0:0	6	{
water	186:16	0:0	6	i_color_index
op	186:30	0:0	6	=
water	186:32	0:0	6	i
op	186:33	0:0	6	+
water	186:34	0:0	6	msg
op	186:37	0:0	6	->
water	186:39	0:0	6	scme
op	186:43	0:0	6	.
water	186:44	0:0	6	firstColour
water	186:55	0:0	6	;
if	187:16	191:16	6	(p_sys -> b_alpha_from_vnc)
cond	187:21	187:28	7	p_sys -> b_alpha_from_vnc
water	187:21	0:0	8	p_sys
op	187:26	0:0	8	->
water	187:28	0:0	8	b_alpha_from_vnc
stmts	188:16	191:16	7	
water	188:16	0:0	8	{
water	189:20	0:0	8	i_alpha
op	189:28	0:0	8	=
water	189:30	0:0	8	p_sys
op	189:35	0:0	8	->
water	189:37	0:0	8	read_buffer
op	189:48	0:0	8	[
water	189:49	0:0	8	i_offset
op	189:57	0:0	8	]
water	189:58	0:0	8	;
water	190:20	0:0	8	i_offset
op	190:29	0:0	8	+=
water	190:32	0:0	8	2
water	190:33	0:0	8	;
water	191:16	0:0	8	}
water	192:16	0:0	6	i_red
op	192:24	0:0	6	=
water	192:26	0:0	6	p_sys
op	192:31	0:0	6	->
water	192:33	0:0	6	read_buffer
op	192:44	0:0	6	[
water	192:45	0:0	6	i_offset
op	192:53	0:0	6	]
water	192:54	0:0	6	;
water	193:16	0:0	6	i_offset
op	193:25	0:0	6	+=
water	193:28	0:0	6	2
water	193:29	0:0	6	;
water	194:16	0:0	6	i_green
op	194:24	0:0	6	=
water	194:26	0:0	6	p_sys
op	194:31	0:0	6	->
water	194:33	0:0	6	read_buffer
op	194:44	0:0	6	[
water	194:45	0:0	6	i_offset
op	194:53	0:0	6	]
water	194:54	0:0	6	;
water	195:16	0:0	6	i_offset
op	195:25	0:0	6	+=
water	195:28	0:0	6	2
water	195:29	0:0	6	;
water	196:16	0:0	6	i_blue
op	196:24	0:0	6	=
water	196:26	0:0	6	p_sys
op	196:31	0:0	6	->
water	196:33	0:0	6	read_buffer
op	196:44	0:0	6	[
water	196:45	0:0	6	i_offset
op	196:53	0:0	6	]
water	196:54	0:0	6	;
water	197:16	0:0	6	i_offset
op	197:25	0:0	6	+=
water	197:28	0:0	6	2
water	197:29	0:0	6	;
call	198:16	203:35	6	rgb_to_yuv
arg	198:28	198:72	7	&p_sys->ar_color_table_yuv[i_color_index][0]
op	198:28	0:0	8	&
water	198:29	0:0	8	p_sys
op	198:34	0:0	8	->
water	198:36	0:0	8	ar_color_table_yuv
op	198:54	0:0	8	[
water	198:55	0:0	8	i_color_index
op	198:68	0:0	8	]
op	198:69	0:0	8	[
water	198:70	0:0	8	0
op	198:71	0:0	8	]
arg	199:28	199:72	7	&p_sys->ar_color_table_yuv[i_color_index][1]
op	199:28	0:0	8	&
water	199:29	0:0	8	p_sys
op	199:34	0:0	8	->
water	199:36	0:0	8	ar_color_table_yuv
op	199:54	0:0	8	[
water	199:55	0:0	8	i_color_index
op	199:68	0:0	8	]
op	199:69	0:0	8	[
water	199:70	0:0	8	1
op	199:71	0:0	8	]
arg	200:28	200:72	7	&p_sys->ar_color_table_yuv[i_color_index][2]
op	200:28	0:0	8	&
water	200:29	0:0	8	p_sys
op	200:34	0:0	8	->
water	200:36	0:0	8	ar_color_table_yuv
op	200:54	0:0	8	[
water	200:55	0:0	8	i_color_index
op	200:68	0:0	8	]
op	200:69	0:0	8	[
water	200:70	0:0	8	2
op	200:71	0:0	8	]
arg	201:28	201:33	7	i_red
water	201:28	0:0	8	i_red
arg	202:28	202:35	7	i_green
water	202:28	0:0	8	i_green
arg	203:28	203:35	7	i_blue
water	203:28	0:0	8	i_blue
water	203:36	0:0	6	;
water	204:16	0:0	6	p_sys
op	204:21	0:0	6	->
water	204:23	0:0	6	ar_color_table_yuv
op	204:41	0:0	6	[
water	204:42	0:0	6	i
op	204:43	0:0	6	]
op	204:44	0:0	6	[
water	204:45	0:0	6	3
op	204:46	0:0	6	]
op	204:48	0:0	6	=
water	204:50	0:0	6	i_alpha
water	204:57	0:0	6	;
water	205:12	0:0	6	}
water	206:8	0:0	4	}
return	207:8	207:19	4	true
water	207:15	0:0	5	true
label	208:4	208:16	4	case rfbBell :
call	209:8	209:46	4	msg_Err
arg	209:17	209:25	5	p_filter
water	209:17	0:0	6	p_filter
arg	209:27	209:46	5	"rfbBell received"
water	209:27	0:0	6	"rfbBell received"
water	209:47	0:0	4	;
return	210:8	210:19	4	true
water	210:15	0:0	5	true
label	211:4	211:25	4	case rfbServerCutText :
water	212:8	0:0	4	msg
op	212:11	0:0	4	->
water	212:13	0:0	4	sct
op	212:16	0:0	4	.
water	212:17	0:0	4	length
op	212:24	0:0	4	=
call	212:26	212:47	4	htons
arg	212:32	212:47	5	msg->sct.length
water	212:32	0:0	6	msg
op	212:35	0:0	6	->
water	212:37	0:0	6	sct
op	212:40	0:0	6	.
water	212:41	0:0	6	length
water	212:48	0:0	4	;
if	213:8	217:8	4	(msg -> sct . length > READ_BUFFER_SIZE)
cond	213:13	213:31	5	msg -> sct . length > READ_BUFFER_SIZE
water	213:13	0:0	6	msg
op	213:16	0:0	6	->
water	213:18	0:0	6	sct
op	213:21	0:0	6	.
water	213:22	0:0	6	length
op	213:29	0:0	6	>
water	213:31	0:0	6	READ_BUFFER_SIZE
stmts	214:8	217:8	5	
water	214:8	0:0	6	{
call	215:12	215:82	6	msg_Err
arg	215:21	215:29	7	p_filter
water	215:21	0:0	8	p_filter
arg	215:31	215:64	7	"Buffer too small, need %u bytes"
water	215:31	0:0	8	"Buffer too small, need %u bytes"
arg	215:66	215:82	7	msg->sct.length
water	215:66	0:0	8	msg
op	215:69	0:0	8	->
water	215:71	0:0	8	sct
op	215:74	0:0	8	.
water	215:75	0:0	8	length
water	215:83	0:0	6	;
return	216:12	216:24	6	false
water	216:19	0:0	7	false
water	217:8	0:0	6	}
if	218:8	223:8	4	(!read_exact (p_filter ,p_sys -> i_socket ,p_sys -> read_buffer ,msg -> sct . length ))
cond	218:13	219:61	5	!read_exact (p_filter ,p_sys -> i_socket ,p_sys -> read_buffer ,msg -> sct . length )
op	218:13	0:0	6	!
call	218:14	219:61	6	read_exact
arg	218:25	218:33	7	p_filter
water	218:25	0:0	8	p_filter
arg	218:35	218:50	7	p_sys->i_socket
water	218:35	0:0	8	p_sys
op	218:40	0:0	8	->
water	218:42	0:0	8	i_socket
arg	219:25	219:43	7	p_sys->read_buffer
water	219:25	0:0	8	p_sys
op	219:30	0:0	8	->
water	219:32	0:0	8	read_buffer
arg	219:45	219:61	7	msg->sct.length
water	219:45	0:0	8	msg
op	219:48	0:0	8	->
water	219:50	0:0	8	sct
op	219:53	0:0	8	.
water	219:54	0:0	8	length
stmts	220:8	223:8	5	
water	220:8	0:0	6	{
call	221:12	221:78	6	msg_Err
arg	221:21	221:29	7	p_filter
water	221:21	0:0	8	p_filter
arg	221:31	221:78	7	"Could not read Reading rfbServerCutText data"
water	221:31	0:0	8	"Could not read Reading rfbServerCutText data"
water	221:79	0:0	6	;
return	222:12	222:24	6	false
water	222:19	0:0	7	false
water	223:8	0:0	6	}
return	224:8	224:19	4	true
water	224:15	0:0	5	true
label	225:4	225:29	4	case rfbReSizeFrameBuffer :
call	226:8	226:74	4	msg_Err
arg	226:17	226:25	5	p_filter
water	226:17	0:0	6	p_filter
arg	226:27	226:74	5	"Reading rfbReSizeFrameBuffer not implemented"
water	226:27	0:0	6	"Reading rfbReSizeFrameBuffer not implemented"
water	226:75	0:0	4	;
return	227:8	227:20	4	false
water	227:15	0:0	5	false
label	228:4	228:11	4	default :
call	229:8	229:68	4	msg_Err
arg	229:17	229:25	5	p_filter
water	229:17	0:0	6	p_filter
arg	229:27	229:56	5	"Invalid message %u received"
water	229:27	0:0	6	"Invalid message %u received"
arg	229:58	229:68	5	msg->type
water	229:58	0:0	6	msg
op	229:61	0:0	6	->
water	229:63	0:0	6	type
water	229:69	0:0	4	;
return	230:8	230:20	4	false
water	230:15	0:0	5	false
water	231:4	0:0	4	}
return	232:4	232:16	2	false
water	232:11	0:0	3	false
