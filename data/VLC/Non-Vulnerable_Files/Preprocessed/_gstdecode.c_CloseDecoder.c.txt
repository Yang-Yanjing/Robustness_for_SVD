func	2:0	60:0	0	static void	CloseDecoder
params	2:24	0:0	1	
param	2:26	2:47	2	vlc_object_t *	p_this
stmnts	0:0	59:17	1	
decl	4:4	4:43	2	decoder_t	*p_dec
op	4:21	0:0	2	=
water	4:23	0:0	2	(
water	4:25	0:0	2	decoder_t
op	4:34	0:0	2	*
water	4:36	0:0	2	)
water	4:37	0:0	2	p_this
decl	5:4	5:39	2	decoder_sys_t	*p_sys
op	5:25	0:0	2	=
water	5:27	0:0	2	p_dec
op	5:32	0:0	2	->
water	5:34	0:0	2	p_sys
if	6:4	34:4	2	(p_sys -> b_running)
cond	6:8	6:15	3	p_sys -> b_running
water	6:8	0:0	4	p_sys
op	6:13	0:0	4	->
water	6:15	0:0	4	b_running
stmts	7:4	34:4	3	
water	7:4	0:0	4	{
decl	8:8	8:25	4	GstMessage	*p_msg
decl	9:8	9:27	4	GstFlowReturn	i_ret
water	11:8	0:0	4	i_ret
op	11:14	0:0	4	=
call	11:16	12:56	4	gst_app_src_end_of_stream
arg	12:16	12:56	5	GST_APP_SRC_CAST(p_sys->p_decode_src)
call	12:16	12:54	6	GST_APP_SRC_CAST
arg	12:34	12:54	7	p_sys->p_decode_src
water	12:34	0:0	8	p_sys
op	12:39	0:0	8	->
water	12:41	0:0	8	p_decode_src
water	12:57	0:0	4	;
call	13:8	13:70	4	msg_Dbg
arg	13:17	13:22	5	p_dec
water	13:17	0:0	6	p_dec
arg	13:24	13:41	5	"app src eos: %s"
water	13:24	0:0	6	"app src eos: %s"
arg	13:43	13:70	5	gst_flow_get_name(i_ret)
call	13:43	13:68	6	gst_flow_get_name
arg	13:62	13:68	7	i_ret
water	13:62	0:0	8	i_ret
water	13:71	0:0	4	;
water	15:8	0:0	4	p_msg
op	15:14	0:0	4	=
call	15:16	16:67	4	gst_bus_timed_pop_filtered
arg	15:44	15:56	5	p_sys->p_bus
water	15:44	0:0	6	p_sys
op	15:49	0:0	6	->
water	15:51	0:0	6	p_bus
arg	16:16	16:29	5	2000000000ULL
water	16:16	0:0	6	2000000000
water	16:26	0:0	6	ULL
arg	16:31	16:67	5	GST_MESSAGE_EOS|GST_MESSAGE_ERROR
water	16:31	0:0	6	GST_MESSAGE_EOS
op	16:47	0:0	6	|
water	16:49	0:0	6	GST_MESSAGE_ERROR
water	16:68	0:0	4	;
if	17:8	30:8	4	(p_msg)
cond	17:12	17:12	5	p_msg
water	17:12	0:0	6	p_msg
stmts	18:8	30:8	5	
water	18:8	0:0	6	{
switch	19:12	28:12	6	(GST_MESSAGE_TYPE (p_msg ))
cond	19:20	19:44	7	GST_MESSAGE_TYPE (p_msg )
call	19:20	19:44	8	GST_MESSAGE_TYPE
arg	19:38	19:44	9	p_msg
water	19:38	0:0	10	p_msg
stmts	19:47	28:12	7	
water	19:47	0:0	8	{
label	20:12	20:32	8	case GST_MESSAGE_EOS :
call	21:16	21:42	8	msg_Dbg
arg	21:25	21:30	9	p_dec
water	21:25	0:0	10	p_dec
arg	21:32	21:42	9	"got eos"
water	21:32	0:0	10	"got eos"
water	21:43	0:0	8	;
break	22:16	22:21	8	
label	23:12	23:19	8	default :
water	24:16	0:0	8	p_dec
op	24:21	0:0	8	->
water	24:23	0:0	8	b_error
op	24:31	0:0	8	=
call	24:33	24:67	8	default_msg_handler
arg	24:54	24:59	9	p_dec
water	24:54	0:0	10	p_dec
arg	24:61	24:67	9	p_msg
water	24:61	0:0	10	p_msg
water	24:68	0:0	8	;
if	25:16	26:74	8	(p_dec -> b_error)
cond	25:20	25:27	9	p_dec -> b_error
water	25:20	0:0	10	p_dec
op	25:25	0:0	10	->
water	25:27	0:0	10	b_error
stmts	26:20	26:74	9	
call	26:20	26:73	10	msg_Warn
arg	26:30	26:35	11	p_dec
water	26:30	0:0	12	p_dec
arg	26:37	26:73	11	"pipeline may not close gracefully"
water	26:37	0:0	12	"pipeline may not close gracefully"
water	26:74	0:0	10	;
break	27:16	27:21	8	
water	28:12	0:0	8	}
call	29:12	29:37	6	gst_message_unref
arg	29:31	29:37	7	p_msg
water	29:31	0:0	8	p_msg
water	29:38	0:0	6	;
water	30:8	0:0	6	}
else	31:8	33:69	4
stmts	32:12	33:69	5	
call	32:12	33:68	6	msg_Warn
arg	32:22	32:27	7	p_dec
water	32:22	0:0	8	p_dec
arg	33:20	33:68	7	"no message, pipeline may not close gracefully"
water	33:20	0:0	8	"no message, pipeline may not close gracefully"
water	33:69	0:0	6	;
water	34:4	0:0	4	}
if	36:4	42:4	2	(p_sys -> p_que)
cond	36:8	36:15	3	p_sys -> p_que
water	36:8	0:0	4	p_sys
op	36:13	0:0	4	->
water	36:15	0:0	4	p_que
stmts	37:4	42:4	3	
water	37:4	0:0	4	{
decl	38:8	38:24	4	GstBuffer	*p_buf
while	39:8	40:37	4	(( p_buf =gst_atomic_queue_pop (p_sys -> p_que ) ))
cond	39:15	39:62	5	( p_buf =gst_atomic_queue_pop (p_sys -> p_que ) )
water	39:15	0:0	6	(
water	39:17	0:0	6	p_buf
op	39:23	0:0	6	=
call	39:25	39:60	6	gst_atomic_queue_pop
arg	39:47	39:60	7	p_sys->p_que
water	39:47	0:0	8	p_sys
op	39:52	0:0	8	->
water	39:54	0:0	8	p_que
water	39:62	0:0	6	)
stmts	40:12	40:37	5	
call	40:12	40:36	6	gst_buffer_unref
arg	40:30	40:36	7	p_buf
water	40:30	0:0	8	p_buf
water	40:37	0:0	6	;
call	41:8	41:45	4	gst_atomic_queue_unref
arg	41:32	41:45	5	p_sys->p_que
water	41:32	0:0	6	p_sys
op	41:37	0:0	6	->
water	41:39	0:0	6	p_que
water	41:46	0:0	4	;
water	42:4	0:0	4	}
if	43:4	48:53	2	(p_sys -> b_running &&gst_element_set_state (p_sys -> p_decoder ,GST_STATE_NULL ) != GST_STATE_CHANGE_SUCCESS)
cond	43:8	45:15	3	p_sys -> b_running &&gst_element_set_state (p_sys -> p_decoder ,GST_STATE_NULL ) != GST_STATE_CHANGE_SUCCESS
water	43:8	0:0	4	p_sys
op	43:13	0:0	4	->
water	43:15	0:0	4	b_running
op	43:25	0:0	4	&&
call	44:12	44:68	4	gst_element_set_state
arg	44:35	44:51	5	p_sys->p_decoder
water	44:35	0:0	6	p_sys
op	44:40	0:0	6	->
water	44:42	0:0	6	p_decoder
arg	44:53	44:68	5	GST_STATE_NULL
water	44:53	0:0	6	GST_STATE_NULL
op	45:12	0:0	4	!=
water	45:15	0:0	4	GST_STATE_CHANGE_SUCCESS
stmts	46:8	48:53	3	
call	46:8	48:52	4	msg_Warn
arg	46:18	46:23	5	p_dec
water	46:18	0:0	6	p_dec
arg	47:16	48:52	5	"failed to change the state to NULL,""pipeline may not close gracefully"
water	47:16	0:0	6	"failed to change the state to NULL,"
water	48:16	0:0	6	"pipeline may not close gracefully"
water	48:53	0:0	4	;
if	49:4	50:40	2	(p_sys -> p_bus)
cond	49:8	49:15	3	p_sys -> p_bus
water	49:8	0:0	4	p_sys
op	49:13	0:0	4	->
water	49:15	0:0	4	p_bus
stmts	50:8	50:40	3	
call	50:8	50:39	4	gst_object_unref
arg	50:26	50:39	5	p_sys->p_bus
water	50:26	0:0	6	p_sys
op	50:31	0:0	6	->
water	50:33	0:0	6	p_bus
water	50:40	0:0	4	;
if	51:4	52:47	2	(p_sys -> p_decode_src)
cond	51:8	51:15	3	p_sys -> p_decode_src
water	51:8	0:0	4	p_sys
op	51:13	0:0	4	->
water	51:15	0:0	4	p_decode_src
stmts	52:8	52:47	3	
call	52:8	52:46	4	gst_object_unref
arg	52:26	52:46	5	p_sys->p_decode_src
water	52:26	0:0	6	p_sys
op	52:31	0:0	6	->
water	52:33	0:0	6	p_decode_src
water	52:47	0:0	4	;
if	53:4	54:46	2	(p_sys -> p_decode_in)
cond	53:8	53:15	3	p_sys -> p_decode_in
water	53:8	0:0	4	p_sys
op	53:13	0:0	4	->
water	53:15	0:0	4	p_decode_in
stmts	54:8	54:46	3	
call	54:8	54:45	4	gst_object_unref
arg	54:26	54:45	5	p_sys->p_decode_in
water	54:26	0:0	6	p_sys
op	54:31	0:0	6	->
water	54:33	0:0	6	p_decode_in
water	54:46	0:0	4	;
if	55:4	56:47	2	(p_sys -> p_decode_out)
cond	55:8	55:15	3	p_sys -> p_decode_out
water	55:8	0:0	4	p_sys
op	55:13	0:0	4	->
water	55:15	0:0	4	p_decode_out
stmts	56:8	56:47	3	
call	56:8	56:46	4	gst_object_unref
arg	56:26	56:46	5	p_sys->p_decode_out
water	56:26	0:0	6	p_sys
op	56:31	0:0	6	->
water	56:33	0:0	6	p_decode_out
water	56:47	0:0	4	;
if	57:4	58:44	2	(p_sys -> p_decoder)
cond	57:8	57:15	3	p_sys -> p_decoder
water	57:8	0:0	4	p_sys
op	57:13	0:0	4	->
water	57:15	0:0	4	p_decoder
stmts	58:8	58:44	3	
call	58:8	58:43	4	gst_object_unref
arg	58:26	58:43	5	p_sys->p_decoder
water	58:26	0:0	6	p_sys
op	58:31	0:0	6	->
water	58:33	0:0	6	p_decoder
water	58:44	0:0	4	;
call	59:4	59:16	2	free
arg	59:10	59:16	3	p_sys
water	59:10	0:0	4	p_sys
water	59:17	0:0	2	;
