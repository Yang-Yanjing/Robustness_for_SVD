func	2:0	72:0	0	static void	HandleAudioData
params	2:27	0:0	1	
param	2:29	2:45	2	demux_t *	p_demux
param	2:47	2:68	2	const uint16_t *	p_anc
param	3:29	3:49	2	uint8_t	i_data_count
param	3:51	3:66	2	uint8_t	i_group
param	4:29	4:52	2	uint8_t	i_block_number
stmnts	0:0	71:4	1	
decl	6:4	6:39	2	demux_sys_t	*p_sys
op	6:23	0:0	2	=
water	6:25	0:0	2	p_demux
op	6:32	0:0	2	->
water	6:34	0:0	2	p_sys
if	7:4	11:4	2	(i_data_count % 3)
cond	7:9	7:24	3	i_data_count % 3
water	7:9	0:0	4	i_data_count
op	7:22	0:0	4	%
water	7:24	0:0	4	3
stmts	8:4	11:4	3	
water	8:4	0:0	4	{
call	9:8	9:72	4	msg_Warn
arg	9:18	9:25	5	p_demux
water	9:18	0:0	6	p_demux
arg	9:27	9:62	5	"malformed audio data for group %u"
water	9:27	0:0	6	"malformed audio data for group %u"
arg	9:64	9:72	5	i_group
water	9:64	0:0	6	i_group
water	9:73	0:0	4	;
return	10:8	10:14	4	
water	11:4	0:0	4	}
for	12:4	71:4	2	( int i = 0 ;i < MAX_AUDIOS;i ++)
forinit	0:0	12:19	3	 int i = 0 ;
decl	12:10	12:19	4	int	i
op	12:16	0:0	4	=
water	12:18	0:0	4	0
cond	12:21	12:25	3	i < MAX_AUDIOS
water	12:21	0:0	4	i
op	12:23	0:0	4	<
water	12:25	0:0	4	MAX_AUDIOS
forexpr	12:37	12:38	3	i ++
water	12:37	0:0	4	i
op	12:38	0:0	4	++
stmts	13:4	71:4	3	
water	13:4	0:0	4	{
decl	14:8	14:50	4	sdi_audio_t	*p_audio
op	14:29	0:0	4	=
op	14:31	0:0	4	&
water	14:32	0:0	4	p_sys
op	14:37	0:0	4	->
water	14:39	0:0	4	p_audios
op	14:47	0:0	4	[
water	14:48	0:0	4	i
op	14:49	0:0	4	]
if	15:8	70:8	4	(p_audio -> i_group == i_group)
cond	15:13	15:33	5	p_audio -> i_group == i_group
water	15:13	0:0	6	p_audio
op	15:20	0:0	6	->
water	15:22	0:0	6	i_group
op	15:30	0:0	6	==
water	15:33	0:0	6	i_group
stmts	16:8	70:8	5	
water	16:8	0:0	6	{
decl	17:12	17:37	6	const uint16_t	*x
op	17:30	0:0	6	=
water	17:32	0:0	6	p_anc
if	21:12	27:12	6	(p_audio -> p_es == NULL)
cond	21:17	21:34	7	p_audio -> p_es == NULL
water	21:17	0:0	8	p_audio
op	21:24	0:0	8	->
water	21:26	0:0	8	p_es
op	21:31	0:0	8	==
water	21:34	0:0	8	NULL
stmts	22:12	27:12	7	
water	22:12	0:0	8	{
water	23:16	0:0	8	p_audio
op	23:23	0:0	8	->
water	23:25	0:0	8	i_rate
op	23:32	0:0	8	=
water	23:34	0:0	8	48000
water	23:39	0:0	8	;
water	24:16	0:0	8	p_audio
op	24:23	0:0	8	->
water	24:25	0:0	8	i_delay
op	24:33	0:0	8	=
water	24:35	0:0	8	0
water	24:36	0:0	8	;
if	25:16	26:26	8	(InitAudio (p_demux ,p_audio ) != VLC_SUCCESS)
cond	25:20	25:53	9	InitAudio (p_demux ,p_audio ) != VLC_SUCCESS
call	25:20	25:48	10	InitAudio
arg	25:31	25:38	11	p_demux
water	25:31	0:0	12	p_demux
arg	25:40	25:48	11	p_audio
water	25:40	0:0	12	p_audio
op	25:50	0:0	10	!=
water	25:53	0:0	10	VLC_SUCCESS
stmts	26:20	26:26	9	
return	26:20	26:26	10	
water	27:12	0:0	8	}
if	28:12	39:12	6	(i_block_number)
cond	28:17	28:17	7	i_block_number
water	28:17	0:0	8	i_block_number
stmts	29:12	39:12	7	
water	29:12	0:0	8	{
if	30:16	34:39	8	(p_audio -> i_block_number + 1 != i_block_number)
cond	30:21	30:52	9	p_audio -> i_block_number + 1 != i_block_number
water	30:21	0:0	10	p_audio
op	30:28	0:0	10	->
water	30:30	0:0	10	i_block_number
op	30:45	0:0	10	+
water	30:47	0:0	10	1
op	30:49	0:0	10	!=
water	30:52	0:0	10	i_block_number
stmts	31:20	34:39	9	
call	31:20	34:38	10	msg_Warn
arg	31:30	31:37	11	p_demux
water	31:30	0:0	12	p_demux
arg	32:30	32:100	11	"audio data block discontinuity (%"PRIu8"->%"PRIu8") for group %"PRIu8
water	32:30	0:0	12	"audio data block discontinuity (%"
water	32:65	0:0	12	PRIu8
water	32:70	0:0	12	"->%"
water	32:75	0:0	12	PRIu8
water	32:80	0:0	12	") for group %"
water	32:95	0:0	12	PRIu8
arg	33:30	33:53	11	p_audio->i_block_number
water	33:30	0:0	12	p_audio
op	33:37	0:0	12	->
water	33:39	0:0	12	i_block_number
arg	33:55	33:69	11	i_block_number
water	33:55	0:0	12	i_block_number
arg	34:30	34:38	11	i_group
water	34:30	0:0	12	i_group
water	34:39	0:0	10	;
if	35:16	36:47	8	(i_block_number == 0 xff)
cond	35:21	35:40	9	i_block_number == 0 xff
water	35:21	0:0	10	i_block_number
op	35:36	0:0	10	==
water	35:39	0:0	10	0
water	35:40	0:0	10	xff
stmts	36:20	36:47	9	
water	36:20	0:0	10	p_audio
op	36:27	0:0	10	->
water	36:29	0:0	10	i_block_number
op	36:44	0:0	10	=
water	36:46	0:0	10	0
water	36:47	0:0	10	;
else	37:16	38:60	8
stmts	38:20	38:60	9	
water	38:20	0:0	10	p_audio
op	38:27	0:0	10	->
water	38:29	0:0	10	i_block_number
op	38:44	0:0	10	=
water	38:46	0:0	10	i_block_number
water	38:60	0:0	10	;
water	39:12	0:0	8	}
while	40:12	69:12	6	(x < p_anc + i_data_count)
cond	40:20	40:32	7	x < p_anc + i_data_count
water	40:20	0:0	8	x
op	40:22	0:0	8	<
water	40:24	0:0	8	p_anc
op	40:30	0:0	8	+
water	40:32	0:0	8	i_data_count
stmts	41:12	69:12	7	
water	41:12	0:0	8	{
if	42:16	67:16	8	(( ( * x & 0 x4 ) && p_audio -> i_pair == 2 ) || ( ! ( * x & 0 x4 ) && p_audio -> i_pair == 1 ))
cond	42:21	43:61	9	( ( * x & 0 x4 ) && p_audio -> i_pair == 2 ) || ( ! ( * x & 0 x4 ) && p_audio -> i_pair == 1 )
water	42:21	0:0	10	(
water	42:22	0:0	10	(
op	42:23	0:0	10	*
water	42:24	0:0	10	x
op	42:26	0:0	10	&
water	42:28	0:0	10	0
water	42:29	0:0	10	x4
water	42:31	0:0	10	)
op	42:33	0:0	10	&&
water	42:36	0:0	10	p_audio
op	42:43	0:0	10	->
water	42:45	0:0	10	i_pair
op	42:52	0:0	10	==
water	42:55	0:0	10	2
water	42:56	0:0	10	)
op	43:22	0:0	10	||
water	43:25	0:0	10	(
op	43:26	0:0	10	!
water	43:27	0:0	10	(
op	43:28	0:0	10	*
water	43:29	0:0	10	x
op	43:31	0:0	10	&
water	43:33	0:0	10	0
water	43:34	0:0	10	x4
water	43:36	0:0	10	)
op	43:38	0:0	10	&&
water	43:41	0:0	10	p_audio
op	43:48	0:0	10	->
water	43:50	0:0	10	i_pair
op	43:57	0:0	10	==
water	43:60	0:0	10	1
water	43:61	0:0	10	)
stmts	44:16	67:16	9	
water	44:16	0:0	10	{
decl	45:20	47:73	10	uint32_t	i_tmp
op	45:35	0:0	10	=
call	45:37	45:67	11	(uint32_t)
arg	45:48	45:67	12	(x[0]&0x1f1)>>3
water	45:48	0:0	13	(
water	45:49	0:0	13	x
op	45:50	0:0	13	[
water	45:51	0:0	13	0
op	45:52	0:0	13	]
op	45:54	0:0	13	&
water	45:56	0:0	13	0
water	45:57	0:0	13	x1f1
water	45:61	0:0	13	)
op	45:63	0:0	13	>>
water	45:66	0:0	13	3
op	46:50	0:0	10	|
water	46:52	0:0	10	(
water	46:53	0:0	10	(
water	46:54	0:0	10	x
op	46:55	0:0	10	[
water	46:56	0:0	10	1
op	46:57	0:0	10	]
op	46:59	0:0	10	&
water	46:61	0:0	10	0
water	46:62	0:0	10	x1ff
water	46:66	0:0	10	)
op	46:68	0:0	10	<<
water	46:71	0:0	10	6
water	46:72	0:0	10	)
op	47:50	0:0	10	|
water	47:52	0:0	10	(
water	47:53	0:0	10	(
water	47:54	0:0	10	x
op	47:55	0:0	10	[
water	47:56	0:0	10	2
op	47:57	0:0	10	]
op	47:59	0:0	10	&
water	47:61	0:0	10	0
water	47:62	0:0	10	x1f
water	47:65	0:0	10	)
op	47:67	0:0	10	<<
water	47:70	0:0	10	15
water	47:72	0:0	10	)
decl	48:20	48:36	10	int32_t	i_sample
if	49:20	50:53	10	(x [ 2 ] & 0 x10)
cond	49:25	49:33	11	x [ 2 ] & 0 x10
water	49:25	0:0	12	x
op	49:26	0:0	12	[
water	49:27	0:0	12	2
op	49:28	0:0	12	]
op	49:30	0:0	12	&
water	49:32	0:0	12	0
water	49:33	0:0	12	x10
stmts	50:24	50:53	11	
water	50:24	0:0	12	i_sample
op	50:33	0:0	12	=
water	50:35	0:0	12	i_tmp
op	50:41	0:0	12	|
water	50:43	0:0	12	0
water	50:44	0:0	12	xfff00000
water	50:53	0:0	12	;
else	51:20	52:40	10
stmts	52:24	52:40	11	
water	52:24	0:0	12	i_sample
op	52:33	0:0	12	=
water	52:35	0:0	12	i_tmp
water	52:40	0:0	12	;
if	53:20	59:20	10	(x [ 0 ] & 0 x2)
cond	53:25	53:33	11	x [ 0 ] & 0 x2
water	53:25	0:0	12	x
op	53:26	0:0	12	[
water	53:27	0:0	12	0
op	53:28	0:0	12	]
op	53:30	0:0	12	&
water	53:32	0:0	12	0
water	53:33	0:0	12	x2
stmts	54:20	59:20	11	
water	54:20	0:0	12	{
if	55:24	57:73	12	(p_audio -> i_right_samples < p_audio -> i_max_samples)
cond	55:29	55:65	13	p_audio -> i_right_samples < p_audio -> i_max_samples
water	55:29	0:0	14	p_audio
op	55:36	0:0	14	->
water	55:38	0:0	14	i_right_samples
op	55:54	0:0	14	<
water	55:56	0:0	14	p_audio
op	55:63	0:0	14	->
water	55:65	0:0	14	i_max_samples
stmts	56:28	57:73	13	
water	56:28	0:0	14	p_audio
op	56:35	0:0	14	->
water	56:37	0:0	14	p_buffer
op	56:45	0:0	14	[
water	56:46	0:0	14	2
op	56:48	0:0	14	*
water	56:50	0:0	14	p_audio
op	56:57	0:0	14	->
water	56:59	0:0	14	i_right_samples
op	57:47	0:0	14	+
water	57:49	0:0	14	1
op	57:50	0:0	14	]
op	57:52	0:0	14	=
water	57:54	0:0	14	(
water	57:55	0:0	14	i_sample
op	57:64	0:0	14	+
water	57:66	0:0	14	8
water	57:67	0:0	14	)
op	57:69	0:0	14	/
water	57:71	0:0	14	16
water	57:73	0:0	14	;
water	58:24	0:0	12	p_audio
op	58:31	0:0	12	->
water	58:33	0:0	12	i_right_samples
op	58:48	0:0	12	++
water	58:50	0:0	12	;
water	59:20	0:0	12	}
else	60:20	66:20	10
stmts	61:20	66:20	11	
water	61:20	0:0	12	{
if	62:24	64:53	12	(p_audio -> i_left_samples < p_audio -> i_max_samples)
cond	62:29	62:64	13	p_audio -> i_left_samples < p_audio -> i_max_samples
water	62:29	0:0	14	p_audio
op	62:36	0:0	14	->
water	62:38	0:0	14	i_left_samples
op	62:53	0:0	14	<
water	62:55	0:0	14	p_audio
op	62:62	0:0	14	->
water	62:64	0:0	14	i_max_samples
stmts	63:28	64:53	13	
water	63:28	0:0	14	p_audio
op	63:35	0:0	14	->
water	63:37	0:0	14	p_buffer
op	63:45	0:0	14	[
water	63:46	0:0	14	2
op	63:48	0:0	14	*
water	63:50	0:0	14	p_audio
op	63:57	0:0	14	->
water	63:59	0:0	14	i_left_samples
op	63:73	0:0	14	]
op	64:32	0:0	14	=
water	64:34	0:0	14	(
water	64:35	0:0	14	i_sample
op	64:44	0:0	14	+
water	64:46	0:0	14	8
water	64:47	0:0	14	)
op	64:49	0:0	14	/
water	64:51	0:0	14	16
water	64:53	0:0	14	;
water	65:24	0:0	12	p_audio
op	65:31	0:0	12	->
water	65:33	0:0	12	i_left_samples
op	65:47	0:0	12	++
water	65:49	0:0	12	;
water	66:20	0:0	12	}
water	67:16	0:0	10	}
water	68:16	0:0	8	x
op	68:18	0:0	8	+=
water	68:21	0:0	8	3
water	68:22	0:0	8	;
water	69:12	0:0	8	}
water	70:8	0:0	6	}
water	71:4	0:0	4	}
