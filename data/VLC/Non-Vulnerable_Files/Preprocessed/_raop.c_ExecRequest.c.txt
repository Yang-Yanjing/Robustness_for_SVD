func	2:0	90:0	0	static int	ExecRequest
params	2:22	0:0	1	
param	2:24	2:44	2	vlc_object_t *	p_this
param	2:46	2:68	2	const char *	psz_method
param	3:24	3:52	2	const char *	psz_content_type
param	3:54	3:74	2	const char *	psz_body
param	4:24	4:55	2	vlc_dictionary_t *	p_req_headers
param	5:24	5:57	2	vlc_dictionary_t *	p_resp_headers
stmnts	0:0	89:16	1	
decl	7:4	7:52	2	sout_stream_t	*p_stream
op	7:28	0:0	2	=
water	7:30	0:0	2	(
water	7:31	0:0	2	sout_stream_t
op	7:44	0:0	2	*
water	7:45	0:0	2	)
water	7:46	0:0	2	p_this
decl	8:4	8:46	2	sout_stream_sys_t	*p_sys
op	8:29	0:0	2	=
water	8:31	0:0	2	p_stream
op	8:39	0:0	2	->
water	8:41	0:0	2	p_sys
decl	9:4	9:34	2	char	*psz_authorization
op	9:28	0:0	2	=
water	9:30	0:0	2	NULL
decl	10:4	10:20	2	int	headers_done
decl	11:4	11:27	2	int	i_err
op	11:14	0:0	2	=
water	11:16	0:0	2	VLC_SUCCESS
decl	12:4	12:16	2	int	i_status
decl	13:4	13:20	2	int	i_auth_state
if	14:4	19:4	2	(p_sys -> i_control_fd < 0)
cond	14:9	14:31	3	p_sys -> i_control_fd < 0
water	14:9	0:0	4	p_sys
op	14:14	0:0	4	->
water	14:16	0:0	4	i_control_fd
op	14:29	0:0	4	<
water	14:31	0:0	4	0
stmts	15:4	19:4	3	
water	15:4	0:0	4	{
call	16:8	16:55	4	msg_Err
arg	16:17	16:23	5	p_this
water	16:17	0:0	6	p_this
arg	16:25	16:55	5	"Control connection not open"
water	16:25	0:0	6	"Control connection not open"
water	16:56	0:0	4	;
water	17:8	0:0	4	i_err
op	17:14	0:0	4	=
water	17:16	0:0	4	VLC_EGENERIC
water	17:28	0:0	4	;
goto	18:8	18:18	4	error
water	18:13	0:0	5	error
water	19:4	0:0	4	}
water	20:4	0:0	2	i_auth_state
op	20:17	0:0	2	=
water	20:19	0:0	2	0
water	20:20	0:0	2	;
while	21:4	85:4	2	(1)
cond	21:12	21:12	3	1
water	21:12	0:0	4	1
stmts	22:4	85:4	3	
water	22:4	0:0	4	{
if	24:8	39:8	4	(p_sys -> psz_password != NULL && p_sys -> auth . psz_nonce != NULL)
cond	24:13	24:69	5	p_sys -> psz_password != NULL && p_sys -> auth . psz_nonce != NULL
water	24:13	0:0	6	p_sys
op	24:18	0:0	6	->
water	24:20	0:0	6	psz_password
op	24:33	0:0	6	!=
water	24:36	0:0	6	NULL
op	24:41	0:0	6	&&
water	24:44	0:0	6	p_sys
op	24:49	0:0	6	->
water	24:51	0:0	6	auth
op	24:55	0:0	6	.
water	24:56	0:0	6	psz_nonce
op	24:66	0:0	6	!=
water	24:69	0:0	6	NULL
stmts	25:8	39:8	5	
water	25:8	0:0	6	{
call	26:12	26:40	6	FREENULL
arg	26:22	26:40	7	psz_authorization
water	26:22	0:0	8	psz_authorization
water	26:41	0:0	6	;
water	27:12	0:0	6	psz_authorization
op	27:30	0:0	6	=
call	28:16	31:73	6	http_auth_FormatAuthorizationHeader
arg	28:53	28:59	7	p_this
water	28:53	0:0	8	p_this
arg	28:61	28:73	7	&p_sys->auth
op	28:61	0:0	8	&
water	28:62	0:0	8	p_sys
op	28:67	0:0	8	->
water	28:69	0:0	8	auth
arg	29:53	29:63	7	psz_method
water	29:53	0:0	8	psz_method
arg	30:53	30:67	7	p_sys->psz_url
water	30:53	0:0	8	p_sys
op	30:58	0:0	8	->
water	30:60	0:0	8	psz_url
arg	30:69	30:71	7	""
water	30:69	0:0	8	""
arg	31:53	31:73	7	p_sys->psz_password
water	31:53	0:0	8	p_sys
op	31:58	0:0	8	->
water	31:60	0:0	8	psz_password
water	31:74	0:0	6	;
if	32:12	36:12	6	(psz_authorization == NULL)
cond	32:17	32:38	7	psz_authorization == NULL
water	32:17	0:0	8	psz_authorization
op	32:35	0:0	8	==
water	32:38	0:0	8	NULL
stmts	33:12	36:12	7	
water	33:12	0:0	8	{
water	34:16	0:0	8	i_err
op	34:22	0:0	8	=
water	34:24	0:0	8	VLC_EGENERIC
water	34:36	0:0	8	;
goto	35:16	35:26	8	error
water	35:21	0:0	9	error
water	36:12	0:0	8	}
call	37:12	38:53	6	vlc_dictionary_insert
arg	37:35	37:48	7	p_req_headers
water	37:35	0:0	8	p_req_headers
arg	37:50	37:65	7	"Authorization"
water	37:50	0:0	8	"Authorization"
arg	38:35	38:53	7	psz_authorization
water	38:35	0:0	8	psz_authorization
water	38:54	0:0	6	;
water	39:8	0:0	6	}
water	41:8	0:0	4	i_err
op	41:14	0:0	4	=
call	41:16	42:42	4	SendRequest
arg	41:29	41:35	5	p_this
water	41:29	0:0	6	p_this
arg	41:37	41:47	5	psz_method
water	41:37	0:0	6	psz_method
arg	41:49	41:65	5	psz_content_type
water	41:49	0:0	6	psz_content_type
arg	41:67	41:75	5	psz_body
water	41:67	0:0	6	psz_body
arg	42:29	42:42	5	p_req_headers
water	42:29	0:0	6	p_req_headers
water	42:43	0:0	4	;
if	43:8	44:22	4	(i_err != VLC_SUCCESS)
cond	43:13	43:22	5	i_err != VLC_SUCCESS
water	43:13	0:0	6	i_err
op	43:19	0:0	6	!=
water	43:22	0:0	6	VLC_SUCCESS
stmts	44:12	44:22	5	
goto	44:12	44:22	6	error
water	44:17	0:0	7	error
water	46:8	0:0	4	i_status
op	46:17	0:0	4	=
call	46:19	46:42	4	ReadStatusLine
arg	46:35	46:42	5	p_this
water	46:35	0:0	6	p_this
water	46:43	0:0	4	;
if	47:8	51:8	4	(i_status < 0)
cond	47:13	47:24	5	i_status < 0
water	47:13	0:0	6	i_status
op	47:22	0:0	6	<
water	47:24	0:0	6	0
stmts	48:8	51:8	5	
water	48:8	0:0	6	{
water	49:12	0:0	6	i_err
op	49:18	0:0	6	=
water	49:20	0:0	6	i_status
water	49:28	0:0	6	;
goto	50:12	50:22	6	error
water	50:17	0:0	7	error
water	51:8	0:0	6	}
call	52:8	52:63	4	vlc_dictionary_clear
arg	52:30	52:44	5	p_resp_headers
water	52:30	0:0	6	p_resp_headers
arg	52:46	52:56	5	FreeHeader
water	52:46	0:0	6	FreeHeader
arg	52:58	52:63	5	NULL
water	52:58	0:0	6	NULL
water	52:64	0:0	4	;
water	54:8	0:0	4	headers_done
op	54:21	0:0	4	=
water	54:23	0:0	4	0
water	54:24	0:0	4	;
while	55:8	60:8	4	(! headers_done)
cond	55:16	55:17	5	! headers_done
op	55:16	0:0	6	!
water	55:17	0:0	6	headers_done
stmts	56:8	60:8	5	
water	56:8	0:0	6	{
water	57:12	0:0	6	i_err
op	57:18	0:0	6	=
call	57:20	57:70	6	ReadHeader
arg	57:32	57:38	7	p_this
water	57:32	0:0	8	p_this
arg	57:40	57:54	7	p_resp_headers
water	57:40	0:0	8	p_resp_headers
arg	57:56	57:70	7	&headers_done
op	57:56	0:0	8	&
water	57:57	0:0	8	headers_done
water	57:71	0:0	6	;
if	58:12	59:26	6	(i_err != VLC_SUCCESS)
cond	58:17	58:26	7	i_err != VLC_SUCCESS
water	58:17	0:0	8	i_err
op	58:23	0:0	8	!=
water	58:26	0:0	8	VLC_SUCCESS
stmts	59:16	59:26	7	
goto	59:16	59:26	8	error
water	59:21	0:0	9	error
water	60:8	0:0	6	}
if	61:8	63:17	4	(i_status == 200)
cond	61:13	61:25	5	i_status == 200
water	61:13	0:0	6	i_status
op	61:22	0:0	6	==
water	61:25	0:0	6	200
stmts	63:12	63:17	5	
break	63:12	63:17	6	
else	64:8	77:8	4
stmts	64:13	77:8	5	
if	64:13	77:8	6	(i_status == 401)
cond	64:18	64:30	7	i_status == 401
water	64:18	0:0	8	i_status
op	64:27	0:0	8	==
water	64:30	0:0	8	401
stmts	65:8	77:8	7	
water	65:8	0:0	8	{
if	67:12	72:12	8	(i_auth_state == 1 || p_sys -> psz_password == NULL)
cond	67:17	67:61	9	i_auth_state == 1 || p_sys -> psz_password == NULL
water	67:17	0:0	10	i_auth_state
op	67:30	0:0	10	==
water	67:33	0:0	10	1
op	67:35	0:0	10	||
water	67:38	0:0	10	p_sys
op	67:43	0:0	10	->
water	67:45	0:0	10	psz_password
op	67:58	0:0	10	==
water	67:61	0:0	10	NULL
stmts	68:12	72:12	9	
water	68:12	0:0	10	{
call	69:16	69:67	10	msg_Err
arg	69:25	69:31	11	p_this
water	69:25	0:0	12	p_this
arg	69:33	69:67	11	"Access denied, password invalid"
water	69:33	0:0	12	"Access denied, password invalid"
water	69:68	0:0	10	;
water	70:16	0:0	10	i_err
op	70:22	0:0	10	=
water	70:24	0:0	10	VLC_EGENERIC
water	70:36	0:0	10	;
goto	71:16	71:26	10	error
water	71:21	0:0	11	error
water	72:12	0:0	10	}
water	73:12	0:0	8	i_err
op	73:18	0:0	8	=
call	73:20	73:68	8	ParseAuthenticateHeader
arg	73:45	73:51	9	p_this
water	73:45	0:0	10	p_this
arg	73:53	73:68	9	p_resp_headers
water	73:53	0:0	10	p_resp_headers
water	73:69	0:0	8	;
if	74:12	75:26	8	(i_err != VLC_SUCCESS)
cond	74:17	74:26	9	i_err != VLC_SUCCESS
water	74:17	0:0	10	i_err
op	74:23	0:0	10	!=
water	74:26	0:0	10	VLC_SUCCESS
stmts	75:16	75:26	9	
goto	75:16	75:26	10	error
water	75:21	0:0	11	error
water	76:12	0:0	8	i_auth_state
op	76:25	0:0	8	=
water	76:27	0:0	8	1
water	76:28	0:0	8	;
water	77:8	0:0	8	}
else	78:8	84:8	4
stmts	79:8	84:8	5	
water	79:8	0:0	6	{
call	80:12	81:59	6	msg_Err
arg	80:21	80:27	7	p_this
water	80:21	0:0	8	p_this
arg	80:29	80:64	7	"Request failed (%s), status is %d"
water	80:29	0:0	8	"Request failed (%s), status is %d"
arg	81:21	81:48	7	p_sys->psz_last_status_line
water	81:21	0:0	8	p_sys
op	81:26	0:0	8	->
water	81:28	0:0	8	psz_last_status_line
arg	81:50	81:59	7	i_status
water	81:50	0:0	8	i_status
water	81:60	0:0	6	;
water	82:12	0:0	6	i_err
op	82:18	0:0	6	=
water	82:20	0:0	6	VLC_EGENERIC
water	82:32	0:0	6	;
goto	83:12	83:22	6	error
water	83:17	0:0	7	error
water	84:8	0:0	6	}
water	85:4	0:0	4	}
label	86:0	86:5	2	error :
call	87:4	87:42	2	FREENULL
arg	87:14	87:42	3	p_sys->psz_last_status_line
water	87:14	0:0	4	p_sys
op	87:19	0:0	4	->
water	87:21	0:0	4	psz_last_status_line
water	87:43	0:0	2	;
call	88:4	88:28	2	free
arg	88:10	88:28	3	psz_authorization
water	88:10	0:0	4	psz_authorization
water	88:29	0:0	2	;
return	89:4	89:16	2	i_err
water	89:11	0:0	3	i_err
