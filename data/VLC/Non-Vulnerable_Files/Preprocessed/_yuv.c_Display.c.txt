func	2:0	71:0	0	static void	Display
params	2:19	0:0	1	
param	2:20	2:38	2	vout_display_t *	vd
param	2:40	2:58	2	picture_t *	picture
param	2:60	2:84	2	subpicture_t *	subpicture
stmnts	0:0	70:26	1	
decl	4:4	4:37	2	vout_display_sys_t	*sys
op	4:28	0:0	2	=
water	4:30	0:0	2	vd
op	4:32	0:0	2	->
water	4:34	0:0	2	sys
decl	6:4	6:32	2	video_format_t	fmt
op	6:23	0:0	2	=
water	6:25	0:0	2	vd
op	6:27	0:0	2	->
water	6:29	0:0	2	fmt
if	7:4	11:4	2	(ORIENT_IS_SWAP (vd -> source . orientation ))
cond	7:8	7:45	3	ORIENT_IS_SWAP (vd -> source . orientation )
call	7:8	7:45	4	ORIENT_IS_SWAP
arg	7:23	7:45	5	vd->source.orientation
water	7:23	0:0	6	vd
op	7:25	0:0	6	->
water	7:27	0:0	6	source
op	7:33	0:0	6	.
water	7:34	0:0	6	orientation
stmts	8:4	11:4	3	
water	8:4	0:0	4	{
water	9:8	0:0	4	fmt
op	9:11	0:0	4	.
water	9:12	0:0	4	i_sar_num
op	9:22	0:0	4	=
water	9:24	0:0	4	vd
op	9:26	0:0	4	->
water	9:28	0:0	4	source
op	9:34	0:0	4	.
water	9:35	0:0	4	i_sar_den
water	9:44	0:0	4	;
water	10:8	0:0	4	fmt
op	10:11	0:0	4	.
water	10:12	0:0	4	i_sar_den
op	10:22	0:0	4	=
water	10:24	0:0	4	vd
op	10:26	0:0	4	->
water	10:28	0:0	4	source
op	10:34	0:0	4	.
water	10:35	0:0	4	i_sar_num
water	10:44	0:0	4	;
water	11:4	0:0	4	}
else	12:4	16:4	2
stmts	13:4	16:4	3	
water	13:4	0:0	4	{
water	14:8	0:0	4	fmt
op	14:11	0:0	4	.
water	14:12	0:0	4	i_sar_num
op	14:22	0:0	4	=
water	14:24	0:0	4	vd
op	14:26	0:0	4	->
water	14:28	0:0	4	source
op	14:34	0:0	4	.
water	14:35	0:0	4	i_sar_num
water	14:44	0:0	4	;
water	15:8	0:0	4	fmt
op	15:11	0:0	4	.
water	15:12	0:0	4	i_sar_den
op	15:22	0:0	4	=
water	15:24	0:0	4	vd
op	15:26	0:0	4	->
water	15:28	0:0	4	source
op	15:34	0:0	4	.
water	15:35	0:0	4	i_sar_den
water	15:44	0:0	4	;
water	16:4	0:0	4	}
decl	18:4	18:13	2	char	type
if	19:4	20:18	2	(picture -> b_progressive)
cond	19:8	19:17	3	picture -> b_progressive
water	19:8	0:0	4	picture
op	19:15	0:0	4	->
water	19:17	0:0	4	b_progressive
stmts	20:8	20:18	3	
water	20:8	0:0	4	type
op	20:13	0:0	4	=
water	20:15	0:0	4	'p'
water	20:18	0:0	4	;
else	21:4	22:18	2
stmts	21:9	22:18	3	
if	21:9	22:18	4	(picture -> b_top_field_first)
cond	21:13	21:22	5	picture -> b_top_field_first
water	21:13	0:0	6	picture
op	21:20	0:0	6	->
water	21:22	0:0	6	b_top_field_first
stmts	22:8	22:18	5	
water	22:8	0:0	6	type
op	22:13	0:0	6	=
water	22:15	0:0	6	't'
water	22:18	0:0	6	;
else	23:4	24:18	2
stmts	24:8	24:18	3	
water	24:8	0:0	4	type
op	24:13	0:0	4	=
water	24:15	0:0	4	'b'
water	24:18	0:0	4	;
if	25:4	29:4	2	(type != 'p')
cond	25:8	25:16	3	type != 'p'
water	25:8	0:0	4	type
op	25:13	0:0	4	!=
water	25:16	0:0	4	'p'
stmts	25:21	29:4	3	
water	25:21	0:0	4	{
call	26:8	27:57	4	msg_Warn
arg	26:17	26:19	5	vd
water	26:17	0:0	6	vd
arg	26:21	27:57	5	"Received a non progressive frame, ""it will be written as progressive."
water	26:21	0:0	6	"Received a non progressive frame, "
water	27:21	0:0	6	"it will be written as progressive."
water	27:58	0:0	4	;
water	28:8	0:0	4	type
op	28:13	0:0	4	=
water	28:15	0:0	4	'p'
water	28:18	0:0	4	;
water	29:4	0:0	4	}
if	31:4	50:4	2	(! sys -> is_first)
cond	31:8	31:14	3	! sys -> is_first
op	31:8	0:0	4	!
water	31:9	0:0	4	sys
op	31:12	0:0	4	->
water	31:14	0:0	4	is_first
stmts	31:24	50:4	3	
water	31:24	0:0	4	{
decl	32:8	32:26	4	const char	*header
decl	33:8	33:22	4	char	buffer[5]
if	34:8	38:8	4	(sys -> is_yuv4mpeg2)
cond	34:12	34:17	5	sys -> is_yuv4mpeg2
water	34:12	0:0	6	sys
op	34:15	0:0	6	->
water	34:17	0:0	6	is_yuv4mpeg2
stmts	34:31	38:8	5	
water	34:31	0:0	6	{
water	37:12	0:0	6	header
op	37:19	0:0	6	=
water	37:21	0:0	6	"YUV4MPEG2"
water	37:32	0:0	6	;
water	38:8	0:0	6	}
else	38:10	42:8	4
stmts	38:15	42:8	5	
water	38:15	0:0	6	{
call	39:12	40:47	6	snprintf
arg	39:21	39:27	7	buffer
water	39:21	0:0	8	buffer
arg	39:29	39:43	7	sizeof(buffer)
op	39:29	0:0	8	sizeof
water	39:35	0:0	8	(
water	39:36	0:0	8	buffer
water	39:42	0:0	8	)
arg	39:45	39:52	7	"%4.4s"
water	39:45	0:0	8	"%4.4s"
arg	40:21	40:47	7	(constchar*)&fmt.i_chroma
water	40:21	0:0	8	(
water	40:22	0:0	8	const
water	40:28	0:0	8	char
op	40:32	0:0	8	*
water	40:33	0:0	8	)
op	40:34	0:0	8	&
water	40:35	0:0	8	fmt
op	40:38	0:0	8	.
water	40:39	0:0	8	i_chroma
water	40:48	0:0	6	;
water	41:12	0:0	6	header
op	41:19	0:0	6	=
water	41:21	0:0	6	buffer
water	41:27	0:0	6	;
water	42:8	0:0	6	}
call	43:8	48:44	4	fprintf
arg	43:16	43:22	5	sys->f
water	43:16	0:0	6	sys
op	43:19	0:0	6	->
water	43:21	0:0	6	f
arg	43:24	43:56	5	"%s W%d H%d F%d:%d I%c A%d:%d\n"
water	43:24	0:0	6	"%s W%d H%d F%d:%d I%c A%d:%d\n"
arg	44:16	44:22	5	header
water	44:16	0:0	6	header
arg	45:16	45:35	5	fmt.i_visible_width
water	45:16	0:0	6	fmt
op	45:19	0:0	6	.
water	45:20	0:0	6	i_visible_width
arg	45:37	45:57	5	fmt.i_visible_height
water	45:37	0:0	6	fmt
op	45:40	0:0	6	.
water	45:41	0:0	6	i_visible_height
arg	46:16	46:32	5	fmt.i_frame_rate
water	46:16	0:0	6	fmt
op	46:19	0:0	6	.
water	46:20	0:0	6	i_frame_rate
arg	46:34	46:55	5	fmt.i_frame_rate_base
water	46:34	0:0	6	fmt
op	46:37	0:0	6	.
water	46:38	0:0	6	i_frame_rate_base
arg	47:16	47:20	5	type
water	47:16	0:0	6	type
arg	48:16	48:29	5	fmt.i_sar_num
water	48:16	0:0	6	fmt
op	48:19	0:0	6	.
water	48:20	0:0	6	i_sar_num
arg	48:31	48:44	5	fmt.i_sar_den
water	48:31	0:0	6	fmt
op	48:34	0:0	6	.
water	48:35	0:0	6	i_sar_den
water	48:45	0:0	4	;
water	49:8	0:0	4	sys
op	49:11	0:0	4	->
water	49:13	0:0	4	is_first
op	49:22	0:0	4	=
water	49:24	0:0	4	true
water	49:28	0:0	4	;
water	50:4	0:0	4	}
call	52:4	52:29	2	fprintf
arg	52:12	52:18	3	sys->f
water	52:12	0:0	4	sys
op	52:15	0:0	4	->
water	52:17	0:0	4	f
arg	52:20	52:29	3	"FRAME\n"
water	52:20	0:0	4	"FRAME\n"
water	52:30	0:0	2	;
for	53:4	66:4	2	( int i = 0 ;i < picture -> i_planes;i ++)
forinit	0:0	53:18	3	 int i = 0 ;
decl	53:9	53:18	4	int	i
op	53:15	0:0	4	=
water	53:17	0:0	4	0
cond	53:20	53:33	3	i < picture -> i_planes
water	53:20	0:0	4	i
op	53:22	0:0	4	<
water	53:24	0:0	4	picture
op	53:31	0:0	4	->
water	53:33	0:0	4	i_planes
forexpr	53:43	53:44	3	i ++
water	53:43	0:0	4	i
op	53:44	0:0	4	++
stmts	53:48	66:4	3	
water	53:48	0:0	4	{
decl	54:8	54:45	4	const plane_t	*plane
op	54:29	0:0	4	=
op	54:31	0:0	4	&
water	54:32	0:0	4	picture
op	54:39	0:0	4	->
water	54:41	0:0	4	p
op	54:42	0:0	4	[
water	54:43	0:0	4	i
op	54:44	0:0	4	]
decl	55:8	55:47	4	const uint8_t	*pixels
op	55:30	0:0	4	=
water	55:32	0:0	4	plane
op	55:37	0:0	4	->
water	55:39	0:0	4	p_pixels
water	56:8	0:0	4	pixels
op	56:15	0:0	4	+=
water	56:18	0:0	4	(
water	56:19	0:0	4	vd
op	56:21	0:0	4	->
water	56:23	0:0	4	fmt
op	56:26	0:0	4	.
water	56:27	0:0	4	i_x_offset
op	56:38	0:0	4	*
water	56:40	0:0	4	plane
op	56:45	0:0	4	->
water	56:47	0:0	4	i_visible_pitch
water	56:62	0:0	4	)
op	57:18	0:0	4	/
water	57:20	0:0	4	vd
op	57:22	0:0	4	->
water	57:24	0:0	4	fmt
op	57:27	0:0	4	.
water	57:28	0:0	4	i_visible_height
water	57:44	0:0	4	;
for	58:8	65:8	4	( int y = 0 ;y < plane -> i_visible_lines;y ++)
forinit	0:0	58:22	5	 int y = 0 ;
decl	58:13	58:22	6	int	y
op	58:19	0:0	6	=
water	58:21	0:0	6	0
cond	58:24	58:35	5	y < plane -> i_visible_lines
water	58:24	0:0	6	y
op	58:26	0:0	6	<
water	58:28	0:0	6	plane
op	58:33	0:0	6	->
water	58:35	0:0	6	i_visible_lines
forexpr	58:52	58:53	5	y ++
water	58:52	0:0	6	y
op	58:53	0:0	6	++
stmts	58:57	65:8	5	
water	58:57	0:0	6	{
decl	59:12	60:49	6	const size_t	written
op	59:33	0:0	6	=
call	59:35	60:48	7	fwrite
arg	59:42	59:48	8	pixels
water	59:42	0:0	9	pixels
arg	59:50	59:51	8	1
water	59:50	0:0	9	1
arg	59:53	59:75	8	plane->i_visible_pitch
water	59:53	0:0	9	plane
op	59:58	0:0	9	->
water	59:60	0:0	9	i_visible_pitch
arg	60:42	60:48	8	sys->f
water	60:42	0:0	9	sys
op	60:45	0:0	9	->
water	60:47	0:0	9	f
if	61:12	63:57	6	(written != ( size_t ) plane -> i_visible_pitch)
cond	61:16	61:42	7	written != ( size_t ) plane -> i_visible_pitch
water	61:16	0:0	8	written
op	61:24	0:0	8	!=
water	61:27	0:0	8	(
water	61:28	0:0	8	size_t
water	61:34	0:0	8	)
water	61:35	0:0	8	plane
op	61:40	0:0	8	->
water	61:42	0:0	8	i_visible_pitch
stmts	62:16	63:57	7	
call	62:16	63:56	8	msg_Warn
arg	62:25	62:27	9	vd
water	62:25	0:0	10	vd
arg	62:29	62:59	9	"only %zd of %d bytes written"
water	62:29	0:0	10	"only %zd of %d bytes written"
arg	63:25	63:32	9	written
water	63:25	0:0	10	written
arg	63:34	63:56	9	plane->i_visible_pitch
water	63:34	0:0	10	plane
op	63:39	0:0	10	->
water	63:41	0:0	10	i_visible_pitch
water	63:57	0:0	8	;
water	64:12	0:0	6	pixels
op	64:19	0:0	6	+=
water	64:22	0:0	6	plane
op	64:27	0:0	6	->
water	64:29	0:0	6	i_pitch
water	64:36	0:0	6	;
water	65:8	0:0	6	}
water	66:4	0:0	4	}
call	67:4	67:17	2	fflush
arg	67:11	67:17	3	sys->f
water	67:11	0:0	4	sys
op	67:14	0:0	4	->
water	67:16	0:0	4	f
water	67:18	0:0	2	;
call	69:4	69:27	2	picture_Release
arg	69:20	69:27	3	picture
water	69:20	0:0	4	picture
water	69:28	0:0	2	;
call	70:4	70:25	2	VLC_UNUSED
arg	70:15	70:25	3	subpicture
water	70:15	0:0	4	subpicture
water	70:26	0:0	2	;
