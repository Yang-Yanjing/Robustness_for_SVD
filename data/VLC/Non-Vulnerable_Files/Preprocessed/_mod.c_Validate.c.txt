func	2:0	139:0	0	static int	Validate
params	2:19	0:0	1	
param	2:21	2:37	2	demux_t *	p_demux
param	2:39	2:59	2	const char *	psz_ext
stmnts	4:4	138:23	1	
water	4:4	0:0	2	static
water	4:11	0:0	2	const
water	4:17	0:0	2	struct
water	5:4	0:0	2	{
water	6:8	0:0	2	int
water	6:12	0:0	2	i_offset
water	6:20	0:0	2	;
water	7:8	0:0	2	const
water	7:14	0:0	2	char
op	7:19	0:0	2	*
water	7:20	0:0	2	psz_marker
water	7:30	0:0	2	;
water	8:4	0:0	2	}
water	8:6	0:0	2	p_marker
op	8:14	0:0	2	[
op	8:15	0:0	2	]
op	8:17	0:0	2	=
water	8:19	0:0	2	{
water	9:8	0:0	2	{
water	9:11	0:0	2	0
water	9:12	0:0	2	,
water	9:14	0:0	2	"ziRCONia"
water	9:25	0:0	2	}
water	9:26	0:0	2	,
water	10:8	0:0	2	{
water	10:11	0:0	2	0
water	10:12	0:0	2	,
water	10:14	0:0	2	"Extended Module"
water	10:32	0:0	2	}
water	10:33	0:0	2	,
water	11:8	0:0	2	{
water	11:10	0:0	2	44
water	11:12	0:0	2	,
water	11:14	0:0	2	"SCRM"
water	11:21	0:0	2	}
water	11:22	0:0	2	,
water	12:8	0:0	2	{
water	12:11	0:0	2	0
water	12:12	0:0	2	,
water	12:14	0:0	2	"IMPM"
water	12:21	0:0	2	}
water	12:22	0:0	2	,
water	13:8	0:0	2	{
water	13:11	0:0	2	0
water	13:12	0:0	2	,
water	13:14	0:0	2	"GF1PATCH110"
water	13:28	0:0	2	}
water	13:29	0:0	2	,
water	14:8	0:0	2	{
water	14:10	0:0	2	20
water	14:12	0:0	2	,
water	14:14	0:0	2	"!SCREAM!"
water	14:25	0:0	2	}
water	14:26	0:0	2	,
water	15:8	0:0	2	{
water	15:10	0:0	2	20
water	15:12	0:0	2	,
water	15:14	0:0	2	"!Scream!"
water	15:25	0:0	2	}
water	15:26	0:0	2	,
water	16:8	0:0	2	{
water	16:10	0:0	2	20
water	16:12	0:0	2	,
water	16:14	0:0	2	"BMOD2STM"
water	16:25	0:0	2	}
water	16:26	0:0	2	,
water	17:8	0:0	2	{
water	17:11	0:0	2	0
water	17:12	0:0	2	,
water	17:14	0:0	2	"MMD0"
water	17:21	0:0	2	}
water	17:22	0:0	2	,
water	18:8	0:0	2	{
water	18:11	0:0	2	0
water	18:12	0:0	2	,
water	18:14	0:0	2	"MMD1"
water	18:21	0:0	2	}
water	18:22	0:0	2	,
water	19:8	0:0	2	{
water	19:11	0:0	2	0
water	19:12	0:0	2	,
water	19:14	0:0	2	"MMD2"
water	19:21	0:0	2	}
water	19:22	0:0	2	,
water	20:8	0:0	2	{
water	20:11	0:0	2	0
water	20:12	0:0	2	,
water	20:14	0:0	2	"MMD3"
water	20:21	0:0	2	}
water	20:22	0:0	2	,
water	21:8	0:0	2	{
water	21:11	0:0	2	0
water	21:12	0:0	2	,
water	21:14	0:0	2	"MTM"
water	21:20	0:0	2	}
water	21:21	0:0	2	,
water	22:8	0:0	2	{
water	22:11	0:0	2	0
water	22:12	0:0	2	,
water	22:14	0:0	2	"DMDL"
water	22:21	0:0	2	}
water	22:22	0:0	2	,
water	23:8	0:0	2	{
water	23:11	0:0	2	0
water	23:12	0:0	2	,
water	23:14	0:0	2	"DBM0"
water	23:21	0:0	2	}
water	23:22	0:0	2	,
water	24:8	0:0	2	{
water	24:11	0:0	2	0
water	24:12	0:0	2	,
water	24:14	0:0	2	"if"
water	24:19	0:0	2	}
water	24:20	0:0	2	,
water	25:8	0:0	2	{
water	25:11	0:0	2	0
water	25:12	0:0	2	,
water	25:14	0:0	2	"JN"
water	25:19	0:0	2	}
water	25:20	0:0	2	,
water	26:8	0:0	2	{
water	26:11	0:0	2	0
water	26:12	0:0	2	,
water	26:14	0:0	2	"FAR\xfe"
water	26:24	0:0	2	}
water	26:25	0:0	2	,
water	27:8	0:0	2	{
water	27:11	0:0	2	0
water	27:12	0:0	2	,
water	27:14	0:0	2	"Extreme"
water	27:24	0:0	2	}
water	27:25	0:0	2	,
water	28:8	0:0	2	{
water	28:11	0:0	2	0
water	28:12	0:0	2	,
water	28:14	0:0	2	"OKTASONGCMOD"
water	28:29	0:0	2	}
water	28:30	0:0	2	,
water	29:8	0:0	2	{
water	29:10	0:0	2	44
water	29:12	0:0	2	,
water	29:14	0:0	2	"PTMF"
water	29:21	0:0	2	}
water	29:22	0:0	2	,
water	30:8	0:0	2	{
water	30:11	0:0	2	0
water	30:12	0:0	2	,
water	30:14	0:0	2	"MAS_UTrack_V00"
water	30:31	0:0	2	}
water	30:32	0:0	2	,
water	31:8	0:0	2	{
water	31:11	0:0	2	0
water	31:12	0:0	2	,
water	31:14	0:0	2	"DDMF"
water	31:21	0:0	2	}
water	31:22	0:0	2	,
water	32:8	0:0	2	{
water	32:11	0:0	2	8
water	32:12	0:0	2	,
water	32:14	0:0	2	"DSMFSONG"
water	32:25	0:0	2	}
water	32:26	0:0	2	,
water	33:8	0:0	2	{
water	33:11	0:0	2	0
water	33:12	0:0	2	,
water	33:14	0:0	2	"\xc1\x83\x2a\x9e"
water	33:33	0:0	2	}
water	33:34	0:0	2	,
water	34:8	0:0	2	{
water	34:11	0:0	2	0
water	34:12	0:0	2	,
water	34:14	0:0	2	"ASYLUM Music Format V1.0"
water	34:41	0:0	2	}
water	34:42	0:0	2	,
water	35:8	0:0	2	{
water	35:11	0:0	2	0
water	35:12	0:0	2	,
water	35:14	0:0	2	"AMF"
water	35:20	0:0	2	}
water	35:21	0:0	2	,
water	36:8	0:0	2	{
water	36:11	0:0	2	0
water	36:12	0:0	2	,
water	36:14	0:0	2	"PSM\xfe"
water	36:24	0:0	2	}
water	36:25	0:0	2	,
water	37:8	0:0	2	{
water	37:11	0:0	2	0
water	37:12	0:0	2	,
water	37:14	0:0	2	"PSM "
water	37:21	0:0	2	}
water	37:22	0:0	2	,
water	38:8	0:0	2	{
water	38:11	0:0	2	0
water	38:12	0:0	2	,
water	38:14	0:0	2	"MT20"
water	38:21	0:0	2	}
water	38:22	0:0	2	,
water	39:8	0:0	2	{
water	39:10	0:0	2	1080
water	39:14	0:0	2	,
water	39:16	0:0	2	"M.K."
water	39:23	0:0	2	}
water	39:24	0:0	2	,
water	40:8	0:0	2	{
water	40:10	0:0	2	1080
water	40:14	0:0	2	,
water	40:16	0:0	2	"M!K!"
water	40:23	0:0	2	}
water	40:24	0:0	2	,
water	41:8	0:0	2	{
water	41:10	0:0	2	1080
water	41:14	0:0	2	,
water	41:16	0:0	2	"M&K!"
water	41:23	0:0	2	}
water	41:24	0:0	2	,
water	42:8	0:0	2	{
water	42:10	0:0	2	1080
water	42:14	0:0	2	,
water	42:16	0:0	2	"N.T."
water	42:23	0:0	2	}
water	42:24	0:0	2	,
water	43:8	0:0	2	{
water	43:10	0:0	2	1080
water	43:14	0:0	2	,
water	43:16	0:0	2	"CD81"
water	43:23	0:0	2	}
water	43:24	0:0	2	,
water	44:8	0:0	2	{
water	44:10	0:0	2	1080
water	44:14	0:0	2	,
water	44:16	0:0	2	"OKTA"
water	44:23	0:0	2	}
water	44:24	0:0	2	,
water	45:8	0:0	2	{
water	45:10	0:0	2	1080
water	45:14	0:0	2	,
water	45:16	0:0	2	"16CN"
water	45:23	0:0	2	}
water	45:24	0:0	2	,
water	46:8	0:0	2	{
water	46:10	0:0	2	1080
water	46:14	0:0	2	,
water	46:16	0:0	2	"32CN"
water	46:23	0:0	2	}
water	46:24	0:0	2	,
water	47:8	0:0	2	{
water	47:10	0:0	2	1080
water	47:14	0:0	2	,
water	47:16	0:0	2	"FLT4"
water	47:23	0:0	2	}
water	47:24	0:0	2	,
water	48:8	0:0	2	{
water	48:10	0:0	2	1080
water	48:14	0:0	2	,
water	48:16	0:0	2	"FLT8"
water	48:23	0:0	2	}
water	48:24	0:0	2	,
water	49:8	0:0	2	{
water	49:10	0:0	2	1080
water	49:14	0:0	2	,
water	49:16	0:0	2	"6CHN"
water	49:23	0:0	2	}
water	49:24	0:0	2	,
water	50:8	0:0	2	{
water	50:10	0:0	2	1080
water	50:14	0:0	2	,
water	50:16	0:0	2	"8CHN"
water	50:23	0:0	2	}
water	50:24	0:0	2	,
water	51:8	0:0	2	{
water	51:10	0:0	2	1080
water	51:14	0:0	2	,
water	51:16	0:0	2	"FLT"
water	51:22	0:0	2	}
water	51:23	0:0	2	,
water	52:8	0:0	2	{
water	52:10	0:0	2	1080
water	52:14	0:0	2	,
water	52:16	0:0	2	"TDZ"
water	52:22	0:0	2	}
water	52:23	0:0	2	,
water	53:8	0:0	2	{
water	53:10	0:0	2	1081
water	53:14	0:0	2	,
water	53:16	0:0	2	"CHN"
water	53:22	0:0	2	}
water	53:23	0:0	2	,
water	54:8	0:0	2	{
water	54:10	0:0	2	1082
water	54:14	0:0	2	,
water	54:16	0:0	2	"CH"
water	54:21	0:0	2	}
water	54:22	0:0	2	,
water	55:8	0:0	2	{
op	55:11	0:0	2	-
water	55:12	0:0	2	1
water	55:13	0:0	2	,
water	55:15	0:0	2	NULL
water	55:20	0:0	2	}
water	56:4	0:0	2	}
water	56:5	0:0	2	;
water	57:4	0:0	2	static
water	57:11	0:0	2	const
water	57:17	0:0	2	char
op	57:22	0:0	2	*
water	57:23	0:0	2	ppsz_mod_ext
op	57:35	0:0	2	[
op	57:36	0:0	2	]
op	57:38	0:0	2	=
water	58:4	0:0	2	{
water	59:8	0:0	2	"mod"
water	59:13	0:0	2	,
water	59:15	0:0	2	"s3m"
water	59:20	0:0	2	,
water	59:22	0:0	2	"xm"
water	59:26	0:0	2	,
water	59:29	0:0	2	"it"
water	59:33	0:0	2	,
water	59:36	0:0	2	"669"
water	59:41	0:0	2	,
water	59:43	0:0	2	"amf"
water	59:48	0:0	2	,
water	59:50	0:0	2	"ams"
water	59:55	0:0	2	,
water	59:57	0:0	2	"dbm"
water	59:62	0:0	2	,
water	59:64	0:0	2	"dmf"
water	59:69	0:0	2	,
water	59:71	0:0	2	"dsm"
water	59:76	0:0	2	,
water	60:8	0:0	2	"far"
water	60:13	0:0	2	,
water	60:15	0:0	2	"mdl"
water	60:20	0:0	2	,
water	60:22	0:0	2	"med"
water	60:27	0:0	2	,
water	60:29	0:0	2	"mtm"
water	60:34	0:0	2	,
water	60:36	0:0	2	"okt"
water	60:41	0:0	2	,
water	60:43	0:0	2	"ptm"
water	60:48	0:0	2	,
water	60:50	0:0	2	"stm"
water	60:55	0:0	2	,
water	60:57	0:0	2	"ult"
water	60:62	0:0	2	,
water	60:64	0:0	2	"umx"
water	60:69	0:0	2	,
water	60:71	0:0	2	"mt2"
water	60:76	0:0	2	,
water	61:8	0:0	2	"psm"
water	61:13	0:0	2	,
water	61:15	0:0	2	"abc"
water	61:20	0:0	2	,
water	61:22	0:0	2	NULL
water	62:4	0:0	2	}
water	62:5	0:0	2	;
decl	63:4	63:36	2	bool	has_valid_extension
op	63:29	0:0	2	=
water	63:31	0:0	2	false
if	64:4	72:4	2	(psz_ext)
cond	64:8	64:8	3	psz_ext
water	64:8	0:0	4	psz_ext
stmts	65:4	72:4	3	
water	65:4	0:0	4	{
for	66:8	71:8	4	( int i = 0 ;ppsz_mod_ext [ i ] != NULL;i ++)
forinit	0:0	66:22	5	 int i = 0 ;
decl	66:13	66:22	6	int	i
op	66:19	0:0	6	=
water	66:21	0:0	6	0
cond	66:24	66:43	5	ppsz_mod_ext [ i ] != NULL
water	66:24	0:0	6	ppsz_mod_ext
op	66:36	0:0	6	[
water	66:37	0:0	6	i
op	66:38	0:0	6	]
op	66:40	0:0	6	!=
water	66:43	0:0	6	NULL
forexpr	66:49	66:50	5	i ++
water	66:49	0:0	6	i
op	66:50	0:0	6	++
stmts	67:8	71:8	5	
water	67:8	0:0	6	{
water	68:12	0:0	6	has_valid_extension
op	68:32	0:0	6	|=
op	68:35	0:0	6	!
call	68:36	68:73	6	strcasecmp
arg	68:48	68:55	7	psz_ext
water	68:48	0:0	8	psz_ext
arg	68:57	68:73	7	ppsz_mod_ext[i]
water	68:57	0:0	8	ppsz_mod_ext
op	68:69	0:0	8	[
water	68:70	0:0	8	i
op	68:71	0:0	8	]
water	68:74	0:0	6	;
if	69:12	70:21	6	(has_valid_extension)
cond	69:16	69:16	7	has_valid_extension
water	69:16	0:0	8	has_valid_extension
stmts	70:16	70:21	7	
break	70:16	70:21	8	
water	71:8	0:0	6	}
water	72:4	0:0	4	}
decl	73:4	73:25	2	const uint8_t	*p_peek
decl	74:4	74:63	2	const int	i_peek
op	74:21	0:0	2	=
call	74:23	74:62	3	stream_Peek
arg	74:36	74:46	4	p_demux->s
water	74:36	0:0	5	p_demux
op	74:43	0:0	5	->
water	74:45	0:0	5	s
arg	74:48	74:55	4	&p_peek
op	74:48	0:0	5	&
water	74:49	0:0	5	p_peek
arg	74:57	74:62	4	2048
water	74:57	0:0	5	2048
if	75:4	76:27	2	(i_peek < 4)
cond	75:8	75:17	3	i_peek < 4
water	75:8	0:0	4	i_peek
op	75:15	0:0	4	<
water	75:17	0:0	4	4
stmts	76:8	76:27	3	
return	76:8	76:27	4	VLC_EGENERIC
water	76:15	0:0	5	VLC_EGENERIC
for	77:4	89:4	2	( int i = 0 ;p_marker [ i ] . i_offset >= 0;i ++)
forinit	0:0	77:18	3	 int i = 0 ;
decl	77:9	77:18	4	int	i
op	77:15	0:0	4	=
water	77:17	0:0	4	0
cond	77:20	77:44	3	p_marker [ i ] . i_offset >= 0
water	77:20	0:0	4	p_marker
op	77:28	0:0	4	[
water	77:29	0:0	4	i
op	77:30	0:0	4	]
op	77:31	0:0	4	.
water	77:32	0:0	4	i_offset
op	77:41	0:0	4	>=
water	77:44	0:0	4	0
forexpr	77:47	77:48	3	i ++
water	77:47	0:0	4	i
op	77:48	0:0	4	++
stmts	78:4	89:4	3	
water	78:4	0:0	4	{
decl	79:8	79:55	4	const char	*psz_marker
op	79:31	0:0	4	=
water	79:33	0:0	4	p_marker
op	79:41	0:0	4	[
water	79:42	0:0	4	i
op	79:43	0:0	4	]
op	79:44	0:0	4	.
water	79:45	0:0	4	psz_marker
decl	80:8	80:47	4	const int	i_size
op	80:25	0:0	4	=
call	80:27	80:46	5	strlen
arg	80:35	80:46	6	psz_marker
water	80:35	0:0	7	psz_marker
decl	81:8	81:49	4	const int	i_offset
op	81:27	0:0	4	=
water	81:29	0:0	4	p_marker
op	81:37	0:0	4	[
water	81:38	0:0	4	i
op	81:39	0:0	4	]
op	81:40	0:0	4	.
water	81:41	0:0	4	i_offset
if	82:8	83:20	4	(i_peek < i_offset + i_size)
cond	82:12	82:32	5	i_peek < i_offset + i_size
water	82:12	0:0	6	i_peek
op	82:19	0:0	6	<
water	82:21	0:0	6	i_offset
op	82:30	0:0	6	+
water	82:32	0:0	6	i_size
stmts	83:12	83:20	5	
continue	83:12	83:20	6	
if	84:8	88:8	4	(!memcmp (& p_peek [ i_offset ] ,psz_marker ,i_size ))
cond	84:12	84:59	5	!memcmp (& p_peek [ i_offset ] ,psz_marker ,i_size )
op	84:12	0:0	6	!
call	84:13	84:59	6	memcmp
arg	84:21	84:38	7	&p_peek[i_offset]
op	84:21	0:0	8	&
water	84:22	0:0	8	p_peek
op	84:28	0:0	8	[
water	84:29	0:0	8	i_offset
op	84:37	0:0	8	]
arg	84:40	84:50	7	psz_marker
water	84:40	0:0	8	psz_marker
arg	84:52	84:59	7	i_size
water	84:52	0:0	8	i_size
stmts	85:8	88:8	5	
water	85:8	0:0	6	{
if	86:12	87:34	6	(i_size >= 4 || has_valid_extension)
cond	86:16	86:31	7	i_size >= 4 || has_valid_extension
water	86:16	0:0	8	i_size
op	86:23	0:0	8	>=
water	86:26	0:0	8	4
op	86:28	0:0	8	||
water	86:31	0:0	8	has_valid_extension
stmts	87:16	87:34	7	
return	87:16	87:34	8	VLC_SUCCESS
water	87:23	0:0	9	VLC_SUCCESS
water	88:8	0:0	6	}
water	89:4	0:0	4	}
if	94:4	106:4	2	(psz_ext && !strcasecmp (psz_ext ,"abc" ))
cond	94:8	94:47	3	psz_ext && !strcasecmp (psz_ext ,"abc" )
water	94:8	0:0	4	psz_ext
op	94:16	0:0	4	&&
op	94:19	0:0	4	!
call	94:20	94:47	4	strcasecmp
arg	94:32	94:39	5	psz_ext
water	94:32	0:0	6	psz_ext
arg	94:41	94:47	5	"abc"
water	94:41	0:0	6	"abc"
stmts	95:4	106:4	3	
water	95:4	0:0	4	{
decl	96:8	96:24	4	bool	b_k
op	96:17	0:0	4	=
water	96:19	0:0	4	false
decl	97:8	97:25	4	bool	b_tx
op	97:18	0:0	4	=
water	97:20	0:0	4	false
for	98:8	102:8	4	( int i = 0 ;i < i_peek - 1;i ++)
forinit	0:0	98:22	5	 int i = 0 ;
decl	98:13	98:22	6	int	i
op	98:19	0:0	6	=
water	98:21	0:0	6	0
cond	98:24	98:35	5	i < i_peek - 1
water	98:24	0:0	6	i
op	98:26	0:0	6	<
water	98:28	0:0	6	i_peek
op	98:34	0:0	6	-
water	98:35	0:0	6	1
forexpr	98:38	98:39	5	i ++
water	98:38	0:0	6	i
op	98:39	0:0	6	++
stmts	99:8	102:8	5	
water	99:8	0:0	6	{
water	100:12	0:0	6	b_k
op	100:16	0:0	6	|=
water	100:19	0:0	6	p_peek
op	100:25	0:0	6	[
water	100:26	0:0	6	i
op	100:27	0:0	6	+
water	100:28	0:0	6	0
op	100:29	0:0	6	]
op	100:31	0:0	6	==
water	100:34	0:0	6	'K'
op	100:38	0:0	6	&&
water	100:41	0:0	6	p_peek
op	100:47	0:0	6	[
water	100:48	0:0	6	i
op	100:49	0:0	6	+
water	100:50	0:0	6	1
op	100:51	0:0	6	]
op	100:53	0:0	6	==
water	100:56	0:0	6	':'
water	100:59	0:0	6	;
water	101:12	0:0	6	b_tx
op	101:17	0:0	6	|=
water	101:20	0:0	6	(
water	101:22	0:0	6	p_peek
op	101:28	0:0	6	[
water	101:29	0:0	6	i
op	101:30	0:0	6	+
water	101:31	0:0	6	0
op	101:32	0:0	6	]
op	101:34	0:0	6	==
water	101:37	0:0	6	'X'
op	101:41	0:0	6	||
water	101:44	0:0	6	p_peek
op	101:50	0:0	6	[
water	101:51	0:0	6	i
op	101:52	0:0	6	+
water	101:53	0:0	6	0
op	101:54	0:0	6	]
op	101:56	0:0	6	==
water	101:59	0:0	6	'T'
water	101:62	0:0	6	)
op	101:64	0:0	6	&&
water	101:67	0:0	6	p_peek
op	101:73	0:0	6	[
water	101:74	0:0	6	i
op	101:75	0:0	6	+
water	101:76	0:0	6	1
op	101:77	0:0	6	]
op	101:79	0:0	6	==
water	101:82	0:0	6	':'
water	101:85	0:0	6	;
water	102:8	0:0	6	}
if	103:8	104:31	4	(! b_k || ! b_tx)
cond	103:12	103:21	5	! b_k || ! b_tx
op	103:12	0:0	6	!
water	103:13	0:0	6	b_k
op	103:17	0:0	6	||
op	103:20	0:0	6	!
water	103:21	0:0	6	b_tx
stmts	104:12	104:31	5	
return	104:12	104:31	6	VLC_EGENERIC
water	104:19	0:0	7	VLC_EGENERIC
return	105:8	105:26	4	VLC_SUCCESS
water	105:15	0:0	5	VLC_SUCCESS
water	106:4	0:0	4	}
if	108:4	137:4	2	(psz_ext && !strcasecmp (psz_ext ,"mod" ) && i_peek >= 20 + 15 * 30)
cond	108:8	108:72	3	psz_ext && !strcasecmp (psz_ext ,"mod" ) && i_peek >= 20 + 15 * 30
water	108:8	0:0	4	psz_ext
op	108:16	0:0	4	&&
op	108:19	0:0	4	!
call	108:20	108:47	4	strcasecmp
arg	108:32	108:39	5	psz_ext
water	108:32	0:0	6	psz_ext
arg	108:41	108:47	5	"mod"
water	108:41	0:0	6	"mod"
op	108:49	0:0	4	&&
water	108:52	0:0	4	i_peek
op	108:59	0:0	4	>=
water	108:62	0:0	4	20
op	108:65	0:0	4	+
water	108:67	0:0	4	15
op	108:70	0:0	4	*
water	108:72	0:0	4	30
stmts	109:4	137:4	3	
water	109:4	0:0	4	{
decl	111:8	111:53	4	const uint8_t	*p
op	111:25	0:0	4	=
call	111:27	111:52	5	memchr
arg	111:35	111:41	6	p_peek
water	111:35	0:0	7	p_peek
arg	111:43	111:47	6	'\0'
water	111:43	0:0	7	'\0'
arg	111:49	111:52	6	20
water	111:49	0:0	7	20
if	112:8	119:8	4	(p)
cond	112:12	112:12	5	p
water	112:12	0:0	6	p
stmts	113:8	119:8	5	
water	113:8	0:0	6	{
for	114:12	118:12	6	(;p < & p_peek [ 20 ];p ++)
forinit	114:17	114:17	7	;
water	114:17	0:0	8	;
cond	114:19	114:33	7	p < & p_peek [ 20 ]
water	114:19	0:0	8	p
op	114:21	0:0	8	<
op	114:23	0:0	8	&
water	114:24	0:0	8	p_peek
op	114:30	0:0	8	[
water	114:31	0:0	8	20
op	114:33	0:0	8	]
forexpr	114:36	114:37	7	p ++
water	114:36	0:0	8	p
op	114:37	0:0	8	++
stmts	115:12	118:12	7	
water	115:12	0:0	8	{
if	116:16	117:39	8	(* p)
cond	116:20	116:21	9	* p
op	116:20	0:0	10	*
water	116:21	0:0	10	p
stmts	117:20	117:39	9	
return	117:20	117:39	10	VLC_EGENERIC
water	117:27	0:0	11	VLC_EGENERIC
water	118:12	0:0	8	}
water	119:8	0:0	6	}
for	120:8	135:8	4	( int i = 0 ;i < 15;i ++)
forinit	0:0	120:22	5	 int i = 0 ;
decl	120:13	120:22	6	int	i
op	120:19	0:0	6	=
water	120:21	0:0	6	0
cond	120:24	120:28	5	i < 15
water	120:24	0:0	6	i
op	120:26	0:0	6	<
water	120:28	0:0	6	15
forexpr	120:32	120:33	5	i ++
water	120:32	0:0	6	i
op	120:33	0:0	6	++
stmts	121:8	135:8	5	
water	121:8	0:0	6	{
decl	122:12	122:56	6	const uint8_t	*p_sample
op	122:36	0:0	6	=
op	122:38	0:0	6	&
water	122:39	0:0	6	p_peek
op	122:45	0:0	6	[
water	122:46	0:0	6	20
op	122:49	0:0	6	+
water	122:51	0:0	6	i
op	122:52	0:0	6	*
water	122:53	0:0	6	30
op	122:55	0:0	6	]
decl	124:12	124:63	6	const uint8_t	*p
op	124:29	0:0	6	=
call	124:31	124:62	7	memchr
arg	124:39	124:51	8	&p_sample[0]
op	124:39	0:0	9	&
water	124:40	0:0	9	p_sample
op	124:48	0:0	9	[
water	124:49	0:0	9	0
op	124:50	0:0	9	]
arg	124:53	124:57	8	'\0'
water	124:53	0:0	9	'\0'
arg	124:59	124:62	8	22
water	124:59	0:0	9	22
if	125:12	132:12	6	(p)
cond	125:16	125:16	7	p
water	125:16	0:0	8	p
stmts	126:12	132:12	7	
water	126:12	0:0	8	{
for	127:16	131:16	8	(;p < & p_sample [ 22 ];p ++)
forinit	127:21	127:21	9	;
water	127:21	0:0	10	;
cond	127:23	127:39	9	p < & p_sample [ 22 ]
water	127:23	0:0	10	p
op	127:25	0:0	10	<
op	127:27	0:0	10	&
water	127:28	0:0	10	p_sample
op	127:36	0:0	10	[
water	127:37	0:0	10	22
op	127:39	0:0	10	]
forexpr	127:42	127:43	9	p ++
water	127:42	0:0	10	p
op	127:43	0:0	10	++
stmts	128:16	131:16	9	
water	128:16	0:0	10	{
if	129:20	130:43	10	(* p)
cond	129:24	129:25	11	* p
op	129:24	0:0	12	*
water	129:25	0:0	12	p
stmts	130:24	130:43	11	
return	130:24	130:43	12	VLC_EGENERIC
water	130:31	0:0	13	VLC_EGENERIC
water	131:16	0:0	10	}
water	132:12	0:0	8	}
if	133:12	134:35	6	(p_sample [ 25 ] > 64)
cond	133:16	133:31	7	p_sample [ 25 ] > 64
water	133:16	0:0	8	p_sample
op	133:24	0:0	8	[
water	133:25	0:0	8	25
op	133:27	0:0	8	]
op	133:29	0:0	8	>
water	133:31	0:0	8	64
stmts	134:16	134:35	7	
return	134:16	134:35	8	VLC_EGENERIC
water	134:23	0:0	9	VLC_EGENERIC
water	135:8	0:0	6	}
return	136:8	136:26	4	VLC_SUCCESS
water	136:15	0:0	5	VLC_SUCCESS
water	137:4	0:0	4	}
return	138:4	138:23	2	VLC_EGENERIC
water	138:11	0:0	3	VLC_EGENERIC
