func	2:0	68:0	0	static void	EsOutESVarUpdateGeneric
params	2:35	0:0	1	
param	2:37	2:50	2	es_out_t *	out
param	2:52	2:60	2	int	i_id
param	3:37	3:59	2	const es_format_t *	fmt
param	3:61	3:85	2	const char *	psz_language
param	4:37	4:51	2	bool	b_delete
stmnts	0:0	67:27	1	
decl	6:4	6:41	2	es_out_sys_t	*p_sys
op	6:29	0:0	2	=
water	6:31	0:0	2	out
op	6:34	0:0	2	->
water	6:36	0:0	2	p_sys
decl	7:4	7:47	2	input_thread_t	*p_input
op	7:31	0:0	2	=
water	7:33	0:0	2	p_sys
op	7:38	0:0	2	->
water	7:40	0:0	2	p_input
decl	8:4	8:31	2	vlc_value_t	val
water	8:25	0:0	2	,
decl	8:4	8:31	2	vlc_value_t	text
if	9:4	15:4	2	(b_delete)
cond	9:8	9:8	3	b_delete
water	9:8	0:0	4	b_delete
stmts	10:4	15:4	3	
water	10:4	0:0	4	{
if	11:8	12:62	4	(EsFmtIsTeletext (fmt ))
cond	11:12	11:33	5	EsFmtIsTeletext (fmt )
call	11:12	11:33	6	EsFmtIsTeletext
arg	11:29	11:33	7	fmt
water	11:29	0:0	8	fmt
stmts	12:12	12:62	5	
call	12:12	12:61	6	input_SendEventTeletextDel
arg	12:40	12:54	7	p_sys->p_input
water	12:40	0:0	8	p_sys
op	12:45	0:0	8	->
water	12:47	0:0	8	p_input
arg	12:56	12:61	7	i_id
water	12:56	0:0	8	i_id
water	12:62	0:0	6	;
call	13:8	13:56	4	input_SendEventEsDel
arg	13:30	13:37	5	p_input
water	13:30	0:0	6	p_input
arg	13:39	13:49	5	fmt->i_cat
water	13:39	0:0	6	fmt
op	13:42	0:0	6	->
water	13:44	0:0	6	i_cat
arg	13:51	13:56	5	i_id
water	13:51	0:0	6	i_id
water	13:57	0:0	4	;
return	14:8	14:14	4	
water	15:4	0:0	4	}
decl	17:4	17:23	2	const char	*psz_var
if	18:4	19:28	2	(fmt -> i_cat == AUDIO_ES)
cond	18:8	18:22	3	fmt -> i_cat == AUDIO_ES
water	18:8	0:0	4	fmt
op	18:11	0:0	4	->
water	18:13	0:0	4	i_cat
op	18:19	0:0	4	==
water	18:22	0:0	4	AUDIO_ES
stmts	19:8	19:28	3	
water	19:8	0:0	4	psz_var
op	19:16	0:0	4	=
water	19:18	0:0	4	"audio-es"
water	19:28	0:0	4	;
else	20:4	21:28	2
stmts	20:9	21:28	3	
if	20:9	21:28	4	(fmt -> i_cat == VIDEO_ES)
cond	20:13	20:27	5	fmt -> i_cat == VIDEO_ES
water	20:13	0:0	6	fmt
op	20:16	0:0	6	->
water	20:18	0:0	6	i_cat
op	20:24	0:0	6	==
water	20:27	0:0	6	VIDEO_ES
stmts	21:8	21:28	5	
water	21:8	0:0	6	psz_var
op	21:16	0:0	6	=
water	21:18	0:0	6	"video-es"
water	21:28	0:0	6	;
else	22:4	23:26	2
stmts	23:8	23:26	3	
water	23:8	0:0	4	psz_var
op	23:16	0:0	4	=
water	23:18	0:0	4	"spu-es"
water	23:26	0:0	4	;
call	24:4	24:67	2	var_Change
arg	24:16	24:23	3	p_input
water	24:16	0:0	4	p_input
arg	24:25	24:32	3	psz_var
water	24:25	0:0	4	psz_var
arg	24:34	24:54	3	VLC_VAR_CHOICESCOUNT
water	24:34	0:0	4	VLC_VAR_CHOICESCOUNT
arg	24:56	24:60	3	&val
op	24:56	0:0	4	&
water	24:57	0:0	4	val
arg	24:62	24:67	3	NULL
water	24:62	0:0	4	NULL
water	24:68	0:0	2	;
if	25:4	32:4	2	(val . i_int == 0)
cond	25:8	25:21	3	val . i_int == 0
water	25:8	0:0	4	val
op	25:11	0:0	4	.
water	25:12	0:0	4	i_int
op	25:18	0:0	4	==
water	25:21	0:0	4	0
stmts	26:4	32:4	3	
water	26:4	0:0	4	{
decl	27:8	27:24	4	vlc_value_t	val2
water	29:8	0:0	4	val2
op	29:12	0:0	4	.
water	29:13	0:0	4	i_int
op	29:19	0:0	4	=
op	29:21	0:0	4	-
water	29:22	0:0	4	1
water	29:23	0:0	4	;
water	29:25	0:0	4	text
op	29:29	0:0	4	.
water	29:30	0:0	4	psz_string
op	29:41	0:0	4	=
call	29:43	29:54	4	_
arg	29:45	29:54	5	"Disable"
water	29:45	0:0	6	"Disable"
water	29:55	0:0	4	;
call	30:8	30:70	4	var_Change
arg	30:20	30:27	5	p_input
water	30:20	0:0	6	p_input
arg	30:29	30:36	5	psz_var
water	30:29	0:0	6	psz_var
arg	30:38	30:55	5	VLC_VAR_ADDCHOICE
water	30:38	0:0	6	VLC_VAR_ADDCHOICE
arg	30:57	30:62	5	&val2
op	30:57	0:0	6	&
water	30:58	0:0	6	val2
arg	30:64	30:70	5	&text
op	30:64	0:0	6	&
water	30:65	0:0	6	text
water	30:71	0:0	4	;
water	31:8	0:0	4	val
op	31:11	0:0	4	.
water	31:12	0:0	4	i_int
op	31:17	0:0	4	++
water	31:19	0:0	4	;
water	32:4	0:0	4	}
if	34:4	43:4	2	(fmt -> psz_description && * fmt -> psz_description)
cond	34:8	34:38	3	fmt -> psz_description && * fmt -> psz_description
water	34:8	0:0	4	fmt
op	34:11	0:0	4	->
water	34:13	0:0	4	psz_description
op	34:29	0:0	4	&&
op	34:32	0:0	4	*
water	34:33	0:0	4	fmt
op	34:36	0:0	4	->
water	34:38	0:0	4	psz_description
stmts	35:4	43:4	3	
water	35:4	0:0	4	{
if	36:8	41:8	4	(psz_language && * psz_language)
cond	36:12	36:29	5	psz_language && * psz_language
water	36:12	0:0	6	psz_language
op	36:25	0:0	6	&&
op	36:28	0:0	6	*
water	36:29	0:0	6	psz_language
stmts	37:8	41:8	5	
water	37:8	0:0	6	{
if	38:12	40:38	6	(asprintf (& text . psz_string ,"%s - [%s]" ,fmt -> psz_description ,psz_language ) == - 1)
cond	38:16	39:45	7	asprintf (& text . psz_string ,"%s - [%s]" ,fmt -> psz_description ,psz_language ) == - 1
call	38:16	39:39	8	asprintf
arg	38:26	38:42	9	&text.psz_string
op	38:26	0:0	10	&
water	38:27	0:0	10	text
op	38:31	0:0	10	.
water	38:32	0:0	10	psz_string
arg	38:44	38:55	9	"%s - [%s]"
water	38:44	0:0	10	"%s - [%s]"
arg	38:57	38:77	9	fmt->psz_description
water	38:57	0:0	10	fmt
op	38:60	0:0	10	->
water	38:62	0:0	10	psz_description
arg	39:26	39:39	9	psz_language
water	39:26	0:0	10	psz_language
op	39:41	0:0	8	==
op	39:44	0:0	8	-
water	39:45	0:0	8	1
stmts	40:16	40:38	7	
water	40:16	0:0	8	text
op	40:20	0:0	8	.
water	40:21	0:0	8	psz_string
op	40:32	0:0	8	=
water	40:34	0:0	8	NULL
water	40:38	0:0	8	;
water	41:8	0:0	6	}
else	42:8	42:61	4
stmts	42:13	42:61	5	
water	42:13	0:0	6	text
op	42:17	0:0	6	.
water	42:18	0:0	6	psz_string
op	42:29	0:0	6	=
call	42:31	42:60	6	strdup
arg	42:39	42:60	7	fmt->psz_description
water	42:39	0:0	8	fmt
op	42:42	0:0	8	->
water	42:44	0:0	8	psz_description
water	42:61	0:0	6	;
water	43:4	0:0	4	}
else	44:4	56:4	2
stmts	45:4	56:4	3	
water	45:4	0:0	4	{
if	46:8	50:8	4	(psz_language && * psz_language)
cond	46:12	46:29	5	psz_language && * psz_language
water	46:12	0:0	6	psz_language
op	46:25	0:0	6	&&
op	46:28	0:0	6	*
water	46:29	0:0	6	psz_language
stmts	47:8	50:8	5	
water	47:8	0:0	6	{
if	48:12	49:38	6	(asprintf (& text . psz_string ,"%s %" PRId64 " - [%s]" ,_ ("Track" ) ,val . i_int ,psz_language ) == - 1)
cond	48:16	48:111	7	asprintf (& text . psz_string ,"%s %" PRId64 " - [%s]" ,_ ("Track" ) ,val . i_int ,psz_language ) == - 1
call	48:16	48:105	8	asprintf
arg	48:26	48:42	9	&text.psz_string
op	48:26	0:0	10	&
water	48:27	0:0	10	text
op	48:31	0:0	10	.
water	48:32	0:0	10	psz_string
arg	48:44	48:65	9	"%s %"PRId64" - [%s]"
water	48:44	0:0	10	"%s %"
water	48:50	0:0	10	PRId64
water	48:56	0:0	10	" - [%s]"
arg	48:67	48:79	9	_("Track")
call	48:67	48:78	10	_
arg	48:70	48:78	11	"Track"
water	48:70	0:0	12	"Track"
arg	48:81	48:90	9	val.i_int
water	48:81	0:0	10	val
op	48:84	0:0	10	.
water	48:85	0:0	10	i_int
arg	48:92	48:105	9	psz_language
water	48:92	0:0	10	psz_language
op	48:107	0:0	8	==
op	48:110	0:0	8	-
water	48:111	0:0	8	1
stmts	49:16	49:38	7	
water	49:16	0:0	8	text
op	49:20	0:0	8	.
water	49:21	0:0	8	psz_string
op	49:32	0:0	8	=
water	49:34	0:0	8	NULL
water	49:38	0:0	8	;
water	50:8	0:0	6	}
else	51:8	55:8	4
stmts	52:8	55:8	5	
water	52:8	0:0	6	{
if	53:12	54:38	6	(asprintf (& text . psz_string ,"%s %" PRId64 ,_ ("Track" ) ,val . i_int ) == - 1)
cond	53:16	53:88	7	asprintf (& text . psz_string ,"%s %" PRId64 ,_ ("Track" ) ,val . i_int ) == - 1
call	53:16	53:82	8	asprintf
arg	53:26	53:42	9	&text.psz_string
op	53:26	0:0	10	&
water	53:27	0:0	10	text
op	53:31	0:0	10	.
water	53:32	0:0	10	psz_string
arg	53:44	53:56	9	"%s %"PRId64
water	53:44	0:0	10	"%s %"
water	53:50	0:0	10	PRId64
arg	53:58	53:70	9	_("Track")
call	53:58	53:69	10	_
arg	53:61	53:69	11	"Track"
water	53:61	0:0	12	"Track"
arg	53:72	53:82	9	val.i_int
water	53:72	0:0	10	val
op	53:75	0:0	10	.
water	53:76	0:0	10	i_int
op	53:84	0:0	8	==
op	53:87	0:0	8	-
water	53:88	0:0	8	1
stmts	54:16	54:38	7	
water	54:16	0:0	8	text
op	54:20	0:0	8	.
water	54:21	0:0	8	psz_string
op	54:32	0:0	8	=
water	54:34	0:0	8	NULL
water	54:38	0:0	8	;
water	55:8	0:0	6	}
water	56:4	0:0	4	}
call	57:4	57:69	2	input_SendEventEsAdd
arg	57:26	57:33	3	p_input
water	57:26	0:0	4	p_input
arg	57:35	57:45	3	fmt->i_cat
water	57:35	0:0	4	fmt
op	57:38	0:0	4	->
water	57:40	0:0	4	i_cat
arg	57:47	57:51	3	i_id
water	57:47	0:0	4	i_id
arg	57:53	57:69	3	text.psz_string
water	57:53	0:0	4	text
op	57:57	0:0	4	.
water	57:58	0:0	4	psz_string
water	57:70	0:0	2	;
if	58:4	66:4	2	(EsFmtIsTeletext (fmt ))
cond	58:8	58:29	3	EsFmtIsTeletext (fmt )
call	58:8	58:29	4	EsFmtIsTeletext
arg	58:25	58:29	5	fmt
water	58:25	0:0	6	fmt
stmts	59:4	66:4	3	
water	59:4	0:0	4	{
decl	60:8	60:26	4	char	psz_page[3+1]
call	61:8	63:44	4	snprintf
arg	61:18	61:26	5	psz_page
water	61:18	0:0	6	psz_page
arg	61:28	61:44	5	sizeof(psz_page)
op	61:28	0:0	6	sizeof
water	61:34	0:0	6	(
water	61:35	0:0	6	psz_page
water	61:43	0:0	6	)
arg	61:46	61:55	5	"%d%2.2x"
water	61:46	0:0	6	"%d%2.2x"
arg	62:18	62:47	5	fmt->subs.teletext.i_magazine
water	62:18	0:0	6	fmt
op	62:21	0:0	6	->
water	62:23	0:0	6	subs
op	62:27	0:0	6	.
water	62:28	0:0	6	teletext
op	62:36	0:0	6	.
water	62:37	0:0	6	i_magazine
arg	63:18	63:44	5	fmt->subs.teletext.i_page
water	63:18	0:0	6	fmt
op	63:21	0:0	6	->
water	63:23	0:0	6	subs
op	63:27	0:0	6	.
water	63:28	0:0	6	teletext
op	63:36	0:0	6	.
water	63:37	0:0	6	i_page
water	63:45	0:0	4	;
call	64:8	65:95	4	input_SendEventTeletextAdd
arg	64:36	64:50	5	p_sys->p_input
water	64:36	0:0	6	p_sys
op	64:41	0:0	6	->
water	64:43	0:0	6	p_input
arg	65:36	65:40	5	i_id
water	65:36	0:0	6	i_id
arg	65:42	65:95	5	fmt->subs.teletext.i_magazine>=0?psz_page:NULL
water	65:42	0:0	6	fmt
op	65:45	0:0	6	->
water	65:47	0:0	6	subs
op	65:51	0:0	6	.
water	65:52	0:0	6	teletext
op	65:60	0:0	6	.
water	65:61	0:0	6	i_magazine
op	65:72	0:0	6	>=
water	65:75	0:0	6	0
water	65:77	0:0	6	?
water	65:79	0:0	6	psz_page
water	65:88	0:0	6	:
water	65:90	0:0	6	NULL
water	65:96	0:0	4	;
water	66:4	0:0	4	}
call	67:4	67:26	2	free
arg	67:10	67:26	3	text.psz_string
water	67:10	0:0	4	text
op	67:14	0:0	4	.
water	67:15	0:0	4	psz_string
water	67:27	0:0	2	;
