func	2:0	42:0	0	int	Demux
params	2:9	0:0	1	
param	2:11	2:28	2	demux_t *	p_demux
stmnts	0:0	41:12	1	
decl	4:4	4:30	2	xml_reader_t	*p_xml_reader
decl	5:4	5:20	2	const char	*node
decl	6:4	6:59	2	input_item_t	*p_current_input
op	6:34	0:0	2	=
call	6:36	6:58	3	GetCurrentItem
arg	6:51	6:58	4	p_demux
water	6:51	0:0	5	p_demux
water	7:4	0:0	2	p_demux
op	7:11	0:0	2	->
water	7:13	0:0	2	p_sys
op	7:18	0:0	2	->
water	7:20	0:0	2	i_ntracks
op	7:30	0:0	2	=
water	7:32	0:0	2	0
water	7:33	0:0	2	;
water	9:4	0:0	2	p_xml_reader
op	9:17	0:0	2	=
call	9:19	9:57	2	xml_ReaderCreate
arg	9:37	9:44	3	p_demux
water	9:37	0:0	4	p_demux
arg	9:46	9:57	3	p_demux->s
water	9:46	0:0	4	p_demux
op	9:53	0:0	4	->
water	9:55	0:0	4	s
water	9:58	0:0	2	;
if	10:4	11:16	2	(! p_xml_reader)
cond	10:8	10:9	3	! p_xml_reader
op	10:8	0:0	4	!
water	10:9	0:0	4	p_xml_reader
stmts	11:8	11:16	3	
goto	11:8	11:16	4	end
water	11:13	0:0	5	end
decl	13:4	13:12	2	int	type
do	14:4	22:4	2	(type != XML_READER_STARTELEM)
cond	23:11	23:19	3	type != XML_READER_STARTELEM
water	23:11	0:0	4	type
op	23:16	0:0	4	!=
water	23:19	0:0	4	XML_READER_STARTELEM
stmts	15:4	22:4	3	
water	15:4	0:0	4	{
water	16:8	0:0	4	type
op	16:13	0:0	4	=
call	16:15	16:55	4	xml_ReaderNextNode
arg	16:35	16:47	5	p_xml_reader
water	16:35	0:0	6	p_xml_reader
arg	16:49	16:55	5	&node
op	16:49	0:0	6	&
water	16:50	0:0	6	node
water	16:56	0:0	4	;
if	17:8	21:8	4	(type <= 0)
cond	17:12	17:20	5	type <= 0
water	17:12	0:0	6	type
op	17:17	0:0	6	<=
water	17:20	0:0	6	0
stmts	18:8	21:8	5	
water	18:8	0:0	6	{
call	19:12	19:54	6	msg_Err
arg	19:21	19:28	7	p_demux
water	19:21	0:0	8	p_demux
arg	19:30	19:54	7	"can't read xml stream"
water	19:30	0:0	8	"can't read xml stream"
water	19:55	0:0	6	;
goto	20:12	20:20	6	end
water	20:17	0:0	7	end
water	21:8	0:0	6	}
water	22:4	0:0	4	}
water	23:41	0:0	2	;
if	25:4	29:4	2	(strcmp (node ,"plist" ))
cond	25:8	25:30	3	strcmp (node ,"plist" )
call	25:8	25:30	4	strcmp
arg	25:16	25:20	5	node
water	25:16	0:0	6	node
arg	25:22	25:30	5	"plist"
water	25:22	0:0	6	"plist"
stmts	26:4	29:4	3	
water	26:4	0:0	4	{
call	27:8	27:57	4	msg_Err
arg	27:17	27:24	5	p_demux
water	27:17	0:0	6	p_demux
arg	27:26	27:50	5	"invalid root node <%s>"
water	27:26	0:0	6	"invalid root node <%s>"
arg	27:52	27:57	5	node
water	27:52	0:0	6	node
water	27:58	0:0	4	;
goto	28:8	28:16	4	end
water	28:13	0:0	5	end
water	29:4	0:0	4	}
decl	30:4	30:77	2	input_item_node_t	*p_subitems
op	30:34	0:0	2	=
call	30:36	30:76	3	input_item_node_Create
arg	30:60	30:76	4	p_current_input
water	30:60	0:0	5	p_current_input
decl	31:4	32:70	2	xml_elem_hnd_t	pl_elements[]
op	31:33	0:0	2	=
water	32:8	0:0	2	{
water	32:10	0:0	2	{
water	32:11	0:0	2	"dict"
water	32:17	0:0	2	,
water	32:22	0:0	2	COMPLEX_CONTENT
water	32:37	0:0	2	,
water	32:39	0:0	2	{
op	32:40	0:0	2	.
water	32:41	0:0	2	cmplx
op	32:47	0:0	2	=
water	32:49	0:0	2	parse_plist_dict
water	32:65	0:0	2	}
water	32:67	0:0	2	}
water	32:69	0:0	2	}
call	33:4	34:34	2	parse_plist_node
arg	33:22	33:29	3	p_demux
water	33:22	0:0	4	p_demux
arg	33:31	33:41	3	p_subitems
water	33:31	0:0	4	p_subitems
arg	33:43	33:47	3	NULL
water	33:43	0:0	4	NULL
arg	33:49	33:61	3	p_xml_reader
water	33:49	0:0	4	p_xml_reader
arg	33:63	33:70	3	"plist"
water	33:63	0:0	4	"plist"
arg	34:22	34:34	3	pl_elements
water	34:22	0:0	4	pl_elements
water	34:35	0:0	2	;
call	35:4	35:46	2	input_item_node_PostAndDelete
arg	35:35	35:46	3	p_subitems
water	35:35	0:0	4	p_subitems
water	35:47	0:0	2	;
call	36:4	36:33	2	vlc_gc_decref
arg	36:18	36:33	3	p_current_input
water	36:18	0:0	4	p_current_input
water	36:34	0:0	2	;
label	37:0	37:3	2	end :
if	38:4	39:40	2	(p_xml_reader)
cond	38:8	38:8	3	p_xml_reader
water	38:8	0:0	4	p_xml_reader
stmts	39:8	39:40	3	
call	39:8	39:39	4	xml_ReaderDelete
arg	39:26	39:39	5	p_xml_reader
water	39:26	0:0	6	p_xml_reader
water	39:40	0:0	4	;
return	41:4	41:12	2	0
water	41:11	0:0	3	0
