func	2:0	73:0	0	static int	Open
params	2:15	0:0	1	
param	2:16	2:36	2	vlc_object_t *	p_this
stmnts	0:0	72:21	1	
decl	4:4	4:48	2	vout_display_t	*vd
op	4:23	0:0	2	=
water	4:25	0:0	2	(
water	4:26	0:0	2	vout_display_t
op	4:40	0:0	2	*
water	4:41	0:0	2	)
water	4:42	0:0	2	p_this
decl	5:4	5:32	2	video_format_t	fmt
op	5:23	0:0	2	=
water	5:25	0:0	2	vd
op	5:27	0:0	2	->
water	5:29	0:0	2	fmt
if	6:4	7:27	2	(fmt . i_chroma != VLC_CODEC_ANDROID_OPAQUE)
cond	6:8	6:24	3	fmt . i_chroma != VLC_CODEC_ANDROID_OPAQUE
water	6:8	0:0	4	fmt
op	6:11	0:0	4	.
water	6:12	0:0	4	i_chroma
op	6:21	0:0	4	!=
water	6:24	0:0	4	VLC_CODEC_ANDROID_OPAQUE
stmts	7:8	7:27	3	
return	7:8	7:27	4	VLC_EGENERIC
water	7:15	0:0	5	VLC_EGENERIC
decl	9:4	9:81	2	vout_display_sys_t	*sys
op	9:28	0:0	2	=
water	9:30	0:0	2	(
water	9:31	0:0	2	struct
water	9:38	0:0	2	vout_display_sys_t
op	9:56	0:0	2	*
water	9:57	0:0	2	)
call	9:58	9:80	3	calloc
arg	9:65	9:66	4	1
water	9:65	0:0	5	1
arg	9:68	9:80	4	sizeof(*sys)
op	9:68	0:0	5	sizeof
water	9:74	0:0	5	(
op	9:75	0:0	5	*
water	9:76	0:0	5	sys
water	9:79	0:0	5	)
if	10:4	11:25	2	(! sys)
cond	10:8	10:9	3	! sys
op	10:8	0:0	4	!
water	10:9	0:0	4	sys
stmts	11:8	11:25	3	
return	11:8	11:25	4	VLC_ENOMEM
water	11:15	0:0	5	VLC_ENOMEM
water	12:4	0:0	2	sys
op	12:7	0:0	2	->
water	12:9	0:0	2	p_library
op	12:19	0:0	2	=
call	12:21	12:60	2	LoadNativeWindowAPI
arg	12:41	12:60	3	&sys->native_window
op	12:41	0:0	4	&
water	12:42	0:0	4	sys
op	12:45	0:0	4	->
water	12:47	0:0	4	native_window
water	12:61	0:0	2	;
if	13:4	18:4	2	(! sys -> p_library)
cond	13:8	13:14	3	! sys -> p_library
op	13:8	0:0	4	!
water	13:9	0:0	4	sys
op	13:12	0:0	4	->
water	13:14	0:0	4	p_library
stmts	14:4	18:4	3	
water	14:4	0:0	4	{
call	15:8	15:16	4	free
arg	15:13	15:16	5	sys
water	15:13	0:0	6	sys
water	15:17	0:0	4	;
call	16:8	16:60	4	msg_Err
arg	16:16	16:18	5	vd
water	16:16	0:0	6	vd
arg	16:20	16:60	5	"Could not initialize NativeWindow API."
water	16:20	0:0	6	"Could not initialize NativeWindow API."
water	16:61	0:0	4	;
return	17:8	17:27	4	VLC_EGENERIC
water	17:15	0:0	5	VLC_EGENERIC
water	18:4	0:0	4	}
water	19:4	0:0	2	sys
op	19:7	0:0	2	->
water	19:9	0:0	2	fmt
op	19:13	0:0	2	=
water	19:15	0:0	2	fmt
water	19:18	0:0	2	;
decl	20:4	20:47	2	video_format_t	subpicture_format
op	20:37	0:0	2	=
water	20:39	0:0	2	sys
op	20:42	0:0	2	->
water	20:44	0:0	2	fmt
water	21:4	0:0	2	subpicture_format
op	21:21	0:0	2	.
water	21:22	0:0	2	i_chroma
op	21:31	0:0	2	=
water	21:33	0:0	2	VLC_CODEC_RGBA
water	21:47	0:0	2	;
water	23:4	0:0	2	sys
op	23:7	0:0	2	->
water	23:9	0:0	2	subtitles_picture
op	23:27	0:0	2	=
call	23:29	23:69	2	picture_NewFromFormat
arg	23:51	23:69	3	&subpicture_format
op	23:51	0:0	4	&
water	23:52	0:0	4	subpicture_format
water	23:70	0:0	2	;
water	25:4	0:0	2	vd
op	25:6	0:0	2	->
water	25:8	0:0	2	info
op	25:12	0:0	2	.
water	25:13	0:0	2	subpicture_chromas
op	25:32	0:0	2	=
water	25:34	0:0	2	subpicture_chromas
water	25:52	0:0	2	;
decl	26:4	26:30	2	int	i_pictures
op	26:19	0:0	2	=
water	26:21	0:0	2	POOL_SIZE
decl	27:4	27:64	2	picture_t	**pictures
op	27:25	0:0	2	=
call	27:27	27:63	3	calloc
arg	27:34	27:51	4	sizeof(*pictures)
op	27:34	0:0	5	sizeof
water	27:40	0:0	5	(
op	27:41	0:0	5	*
water	27:42	0:0	5	pictures
water	27:50	0:0	5	)
arg	27:53	27:63	4	i_pictures
water	27:53	0:0	5	i_pictures
if	28:4	29:18	2	(! pictures)
cond	28:8	28:9	3	! pictures
op	28:8	0:0	4	!
water	28:9	0:0	4	pictures
stmts	29:8	29:18	3	
goto	29:8	29:18	4	error
water	29:13	0:0	5	error
for	30:4	43:4	2	( int i = 0 ;i < i_pictures;i ++)
forinit	0:0	30:18	3	 int i = 0 ;
decl	30:9	30:18	4	int	i
op	30:15	0:0	4	=
water	30:17	0:0	4	0
cond	30:20	30:24	3	i < i_pictures
water	30:20	0:0	4	i
op	30:22	0:0	4	<
water	30:24	0:0	4	i_pictures
forexpr	30:36	30:37	3	i ++
water	30:36	0:0	4	i
op	30:37	0:0	4	++
stmts	31:4	43:4	3	
water	31:4	0:0	4	{
decl	32:8	32:62	4	picture_sys_t	*p_picsys
op	32:32	0:0	4	=
call	32:34	32:61	5	calloc
arg	32:41	32:42	6	1
water	32:41	0:0	7	1
arg	32:44	32:61	6	sizeof(*p_picsys)
op	32:44	0:0	7	sizeof
water	32:50	0:0	7	(
op	32:51	0:0	7	*
water	32:52	0:0	7	p_picsys
water	32:60	0:0	7	)
if	33:8	34:22	4	(unlikely (p_picsys == NULL ))
cond	33:12	33:37	5	unlikely (p_picsys == NULL )
call	33:12	33:37	6	unlikely
arg	33:21	33:37	7	p_picsys==NULL
water	33:21	0:0	8	p_picsys
op	33:30	0:0	8	==
water	33:33	0:0	8	NULL
stmts	34:12	34:22	5	
goto	34:12	34:22	6	error
water	34:17	0:0	7	error
decl	35:8	35:59	4	picture_resource_t	resource
op	35:36	0:0	4	=
water	35:38	0:0	4	{
op	35:40	0:0	4	.
water	35:41	0:0	4	p_sys
op	35:47	0:0	4	=
water	35:49	0:0	4	p_picsys
water	35:58	0:0	4	}
decl	36:8	36:69	4	picture_t	*picture
op	36:27	0:0	4	=
call	36:29	36:68	5	picture_NewFromResource
arg	36:53	36:57	6	&fmt
op	36:53	0:0	7	&
water	36:54	0:0	7	fmt
arg	36:59	36:68	6	&resource
op	36:59	0:0	7	&
water	36:60	0:0	7	resource
if	37:8	41:8	4	(! picture)
cond	37:12	37:13	5	! picture
op	37:12	0:0	6	!
water	37:13	0:0	6	picture
stmts	38:8	41:8	5	
water	38:8	0:0	6	{
call	39:12	39:25	6	free
arg	39:17	39:25	7	p_picsys
water	39:17	0:0	8	p_picsys
water	39:26	0:0	6	;
goto	40:12	40:22	6	error
water	40:17	0:0	7	error
water	41:8	0:0	6	}
water	42:8	0:0	4	pictures
op	42:16	0:0	4	[
water	42:17	0:0	4	i
op	42:18	0:0	4	]
op	42:20	0:0	4	=
water	42:22	0:0	4	picture
water	42:29	0:0	4	;
water	43:4	0:0	4	}
decl	45:4	45:41	2	picture_pool_configuration_t	pool_cfg
call	46:4	46:41	2	memset
arg	46:11	46:20	3	&pool_cfg
op	46:11	0:0	4	&
water	46:12	0:0	4	pool_cfg
arg	46:22	46:23	3	0
water	46:22	0:0	4	0
arg	46:25	46:41	3	sizeof(pool_cfg)
op	46:25	0:0	4	sizeof
water	46:31	0:0	4	(
water	46:32	0:0	4	pool_cfg
water	46:40	0:0	4	)
water	46:42	0:0	2	;
water	47:4	0:0	2	pool_cfg
op	47:12	0:0	2	.
water	47:13	0:0	2	picture_count
op	47:27	0:0	2	=
water	47:29	0:0	2	i_pictures
water	47:39	0:0	2	;
water	48:4	0:0	2	pool_cfg
op	48:12	0:0	2	.
water	48:13	0:0	2	picture
op	48:27	0:0	2	=
water	48:29	0:0	2	pictures
water	48:37	0:0	2	;
water	49:4	0:0	2	pool_cfg
op	49:12	0:0	2	.
water	49:13	0:0	2	lock
op	49:27	0:0	2	=
water	49:29	0:0	2	LockSurface
water	49:40	0:0	2	;
water	50:4	0:0	2	pool_cfg
op	50:12	0:0	2	.
water	50:13	0:0	2	unlock
op	50:27	0:0	2	=
water	50:29	0:0	2	UnlockSurface
water	50:42	0:0	2	;
water	51:4	0:0	2	sys
op	51:7	0:0	2	->
water	51:9	0:0	2	pool
op	51:14	0:0	2	=
call	51:16	51:50	2	picture_pool_NewExtended
arg	51:41	51:50	3	&pool_cfg
op	51:41	0:0	4	&
water	51:42	0:0	4	pool_cfg
water	51:51	0:0	2	;
if	52:4	57:4	2	(! sys -> pool)
cond	52:8	52:14	3	! sys -> pool
op	52:8	0:0	4	!
water	52:9	0:0	4	sys
op	52:12	0:0	4	->
water	52:14	0:0	4	pool
stmts	53:4	57:4	3	
water	53:4	0:0	4	{
for	54:8	55:40	4	( int i = 0 ;i < i_pictures;i ++)
forinit	0:0	54:22	5	 int i = 0 ;
decl	54:13	54:22	6	int	i
op	54:19	0:0	6	=
water	54:21	0:0	6	0
cond	54:24	54:28	5	i < i_pictures
water	54:24	0:0	6	i
op	54:26	0:0	6	<
water	54:28	0:0	6	i_pictures
forexpr	54:40	54:41	5	i ++
water	54:40	0:0	6	i
op	54:41	0:0	6	++
stmts	55:12	55:40	5	
call	55:12	55:39	6	picture_Release
arg	55:28	55:39	7	pictures[i]
water	55:28	0:0	8	pictures
op	55:36	0:0	8	[
water	55:37	0:0	8	i
op	55:38	0:0	8	]
water	55:40	0:0	6	;
goto	56:8	56:18	4	error
water	56:13	0:0	5	error
water	57:4	0:0	4	}
water	59:4	0:0	2	vd
op	59:6	0:0	2	->
water	59:8	0:0	2	sys
op	59:16	0:0	2	=
water	59:18	0:0	2	sys
water	59:21	0:0	2	;
water	60:4	0:0	2	vd
op	60:6	0:0	2	->
water	60:8	0:0	2	fmt
op	60:16	0:0	2	=
water	60:18	0:0	2	fmt
water	60:21	0:0	2	;
water	61:4	0:0	2	vd
op	61:6	0:0	2	->
water	61:8	0:0	2	pool
op	61:16	0:0	2	=
water	61:18	0:0	2	Pool
water	61:22	0:0	2	;
water	62:4	0:0	2	vd
op	62:6	0:0	2	->
water	62:8	0:0	2	display
op	62:16	0:0	2	=
water	62:18	0:0	2	Display
water	62:25	0:0	2	;
water	63:4	0:0	2	vd
op	63:6	0:0	2	->
water	63:8	0:0	2	control
op	63:16	0:0	2	=
water	63:18	0:0	2	Control
water	63:25	0:0	2	;
water	64:4	0:0	2	vd
op	64:6	0:0	2	->
water	64:8	0:0	2	prepare
op	64:16	0:0	2	=
water	64:18	0:0	2	NULL
water	64:22	0:0	2	;
water	65:4	0:0	2	vd
op	65:6	0:0	2	->
water	65:8	0:0	2	manage
op	65:16	0:0	2	=
water	65:18	0:0	2	Manage
water	65:24	0:0	2	;
call	67:4	67:46	2	vout_display_SendEventFullscreen
arg	67:37	67:39	3	vd
water	67:37	0:0	4	vd
arg	67:41	67:46	3	false
water	67:41	0:0	4	false
water	67:47	0:0	2	;
return	68:4	68:22	2	VLC_SUCCESS
water	68:11	0:0	3	VLC_SUCCESS
label	69:0	69:5	2	error :
call	70:4	70:17	2	free
arg	70:9	70:17	3	pictures
water	70:9	0:0	4	pictures
water	70:18	0:0	2	;
call	71:4	71:16	2	Close
arg	71:10	71:16	3	p_this
water	71:10	0:0	4	p_this
water	71:17	0:0	2	;
return	72:4	72:21	2	VLC_ENOMEM
water	72:11	0:0	3	VLC_ENOMEM
