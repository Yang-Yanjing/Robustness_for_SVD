func	2:0	55:0	0	static void	ComputeChannelOperations
params	2:36	0:0	1	
param	2:38	3:8	2	struct filter_sys_t *	p_data
param	3:10	3:29	2	unsigned int	i_rate
param	3:31	4:8	2	unsigned int	i_next_atomic_operation
param	4:10	4:37	2	int	i_source_channel_offset
param	4:39	4:49	2	double	d_x
param	4:51	5:8	2	double	d_z
param	5:10	5:38	2	double	d_compensation_length
param	5:40	5:74	2	double	d_channel_amplitude_factor
stmnts	0:0	54:4	1	
decl	7:4	7:20	2	double	d_c
op	7:15	0:0	2	=
water	7:17	0:0	2	340
decl	8:4	8:76	2	double	d_compensation_delay
op	8:32	0:0	2	=
water	8:34	0:0	2	(
water	8:35	0:0	2	d_compensation_length
op	8:56	0:0	2	-
water	8:57	0:0	2	0
op	8:58	0:0	2	.
water	8:59	0:0	2	1
water	8:60	0:0	2	)
op	8:62	0:0	2	/
water	8:64	0:0	2	d_c
op	8:68	0:0	2	*
water	8:70	0:0	2	i_rate
water	10:4	0:0	2	p_data
op	10:10	0:0	2	->
water	10:12	0:0	2	p_atomic_operations
op	10:31	0:0	2	[
water	10:32	0:0	2	i_next_atomic_operation
op	10:55	0:0	2	]
op	11:8	0:0	2	.
water	11:9	0:0	2	i_source_channel_offset
op	11:33	0:0	2	=
water	11:35	0:0	2	i_source_channel_offset
water	11:58	0:0	2	;
water	12:4	0:0	2	p_data
op	12:10	0:0	2	->
water	12:12	0:0	2	p_atomic_operations
op	12:31	0:0	2	[
water	12:32	0:0	2	i_next_atomic_operation
op	12:55	0:0	2	]
op	13:8	0:0	2	.
water	13:9	0:0	2	i_dest_channel_offset
op	13:31	0:0	2	=
water	13:33	0:0	2	0
water	13:34	0:0	2	;
water	14:4	0:0	2	p_data
op	14:10	0:0	2	->
water	14:12	0:0	2	p_atomic_operations
op	14:31	0:0	2	[
water	14:32	0:0	2	i_next_atomic_operation
op	14:55	0:0	2	]
op	15:8	0:0	2	.
water	15:9	0:0	2	i_delay
op	15:17	0:0	2	=
call	15:19	16:64	2	(int)
arg	15:26	16:64	3	sqrt((-0.1-d_x)*(-0.1-d_x)+(0-d_z)*(0-d_z))/d_c*i_rate-d_compensation_delay
call	15:26	15:72	4	sqrt
arg	15:32	15:72	5	(-0.1-d_x)*(-0.1-d_x)+(0-d_z)*(0-d_z)
water	15:32	0:0	6	(
op	15:33	0:0	6	-
water	15:34	0:0	6	0
op	15:35	0:0	6	.
water	15:36	0:0	6	1
op	15:37	0:0	6	-
water	15:38	0:0	6	d_x
water	15:41	0:0	6	)
op	15:42	0:0	6	*
water	15:43	0:0	6	(
op	15:44	0:0	6	-
water	15:45	0:0	6	0
op	15:46	0:0	6	.
water	15:47	0:0	6	1
op	15:48	0:0	6	-
water	15:49	0:0	6	d_x
water	15:52	0:0	6	)
op	15:54	0:0	6	+
water	15:56	0:0	6	(
water	15:57	0:0	6	0
op	15:58	0:0	6	-
water	15:59	0:0	6	d_z
water	15:62	0:0	6	)
op	15:63	0:0	6	*
water	15:64	0:0	6	(
water	15:65	0:0	6	0
op	15:66	0:0	6	-
water	15:67	0:0	6	d_z
water	15:70	0:0	6	)
op	16:26	0:0	4	/
water	16:28	0:0	4	d_c
op	16:32	0:0	4	*
water	16:34	0:0	4	i_rate
op	16:41	0:0	4	-
water	16:43	0:0	4	d_compensation_delay
water	16:65	0:0	2	;
if	17:4	21:4	2	(d_x < 0)
cond	17:8	17:14	3	d_x < 0
water	17:8	0:0	4	d_x
op	17:12	0:0	4	<
water	17:14	0:0	4	0
stmts	18:4	21:4	3	
water	18:4	0:0	4	{
water	19:8	0:0	4	p_data
op	19:14	0:0	4	->
water	19:16	0:0	4	p_atomic_operations
op	19:35	0:0	4	[
water	19:36	0:0	4	i_next_atomic_operation
op	19:59	0:0	4	]
op	20:12	0:0	4	.
water	20:13	0:0	4	d_amplitude_factor
op	20:32	0:0	4	=
water	20:34	0:0	4	d_channel_amplitude_factor
op	20:61	0:0	4	*
water	20:63	0:0	4	1
op	20:64	0:0	4	.
water	20:65	0:0	4	1
op	20:67	0:0	4	/
water	20:69	0:0	4	2
water	20:70	0:0	4	;
water	21:4	0:0	4	}
else	22:4	26:4	2
stmts	22:9	26:4	3	
if	22:9	26:4	4	(d_x > 0)
cond	22:13	22:19	5	d_x > 0
water	22:13	0:0	6	d_x
op	22:17	0:0	6	>
water	22:19	0:0	6	0
stmts	23:4	26:4	5	
water	23:4	0:0	6	{
water	24:8	0:0	6	p_data
op	24:14	0:0	6	->
water	24:16	0:0	6	p_atomic_operations
op	24:35	0:0	6	[
water	24:36	0:0	6	i_next_atomic_operation
op	24:59	0:0	6	]
op	25:12	0:0	6	.
water	25:13	0:0	6	d_amplitude_factor
op	25:32	0:0	6	=
water	25:34	0:0	6	d_channel_amplitude_factor
op	25:61	0:0	6	*
water	25:63	0:0	6	0
op	25:64	0:0	6	.
water	25:65	0:0	6	9
op	25:67	0:0	6	/
water	25:69	0:0	6	2
water	25:70	0:0	6	;
water	26:4	0:0	6	}
else	27:4	31:4	2
stmts	28:4	31:4	3	
water	28:4	0:0	4	{
water	29:8	0:0	4	p_data
op	29:14	0:0	4	->
water	29:16	0:0	4	p_atomic_operations
op	29:35	0:0	4	[
water	29:36	0:0	4	i_next_atomic_operation
op	29:59	0:0	4	]
op	30:12	0:0	4	.
water	30:13	0:0	4	d_amplitude_factor
op	30:32	0:0	4	=
water	30:34	0:0	4	d_channel_amplitude_factor
op	30:61	0:0	4	/
water	30:63	0:0	4	2
water	30:64	0:0	4	;
water	31:4	0:0	4	}
water	33:4	0:0	2	p_data
op	33:10	0:0	2	->
water	33:12	0:0	2	p_atomic_operations
op	33:31	0:0	2	[
water	33:32	0:0	2	i_next_atomic_operation
op	33:56	0:0	2	+
water	33:58	0:0	2	1
op	33:59	0:0	2	]
op	34:8	0:0	2	.
water	34:9	0:0	2	i_source_channel_offset
op	34:33	0:0	2	=
water	34:35	0:0	2	i_source_channel_offset
water	34:58	0:0	2	;
water	35:4	0:0	2	p_data
op	35:10	0:0	2	->
water	35:12	0:0	2	p_atomic_operations
op	35:31	0:0	2	[
water	35:32	0:0	2	i_next_atomic_operation
op	35:56	0:0	2	+
water	35:58	0:0	2	1
op	35:59	0:0	2	]
op	36:8	0:0	2	.
water	36:9	0:0	2	i_dest_channel_offset
op	36:31	0:0	2	=
water	36:33	0:0	2	1
water	36:34	0:0	2	;
water	37:4	0:0	2	p_data
op	37:10	0:0	2	->
water	37:12	0:0	2	p_atomic_operations
op	37:31	0:0	2	[
water	37:32	0:0	2	i_next_atomic_operation
op	37:56	0:0	2	+
water	37:58	0:0	2	1
op	37:59	0:0	2	]
op	38:8	0:0	2	.
water	38:9	0:0	2	i_delay
op	38:17	0:0	2	=
call	38:19	39:64	2	(int)
arg	38:26	39:64	3	sqrt((0.1-d_x)*(0.1-d_x)+(0-d_z)*(0-d_z))/d_c*i_rate-d_compensation_delay
call	38:26	38:70	4	sqrt
arg	38:32	38:70	5	(0.1-d_x)*(0.1-d_x)+(0-d_z)*(0-d_z)
water	38:32	0:0	6	(
water	38:33	0:0	6	0
op	38:34	0:0	6	.
water	38:35	0:0	6	1
op	38:36	0:0	6	-
water	38:37	0:0	6	d_x
water	38:40	0:0	6	)
op	38:41	0:0	6	*
water	38:42	0:0	6	(
water	38:43	0:0	6	0
op	38:44	0:0	6	.
water	38:45	0:0	6	1
op	38:46	0:0	6	-
water	38:47	0:0	6	d_x
water	38:50	0:0	6	)
op	38:52	0:0	6	+
water	38:54	0:0	6	(
water	38:55	0:0	6	0
op	38:56	0:0	6	-
water	38:57	0:0	6	d_z
water	38:60	0:0	6	)
op	38:61	0:0	6	*
water	38:62	0:0	6	(
water	38:63	0:0	6	0
op	38:64	0:0	6	-
water	38:65	0:0	6	d_z
water	38:68	0:0	6	)
op	39:26	0:0	4	/
water	39:28	0:0	4	d_c
op	39:32	0:0	4	*
water	39:34	0:0	4	i_rate
op	39:41	0:0	4	-
water	39:43	0:0	4	d_compensation_delay
water	39:65	0:0	2	;
if	40:4	44:4	2	(d_x < 0)
cond	40:8	40:14	3	d_x < 0
water	40:8	0:0	4	d_x
op	40:12	0:0	4	<
water	40:14	0:0	4	0
stmts	41:4	44:4	3	
water	41:4	0:0	4	{
water	42:8	0:0	4	p_data
op	42:14	0:0	4	->
water	42:16	0:0	4	p_atomic_operations
op	42:35	0:0	4	[
water	42:36	0:0	4	i_next_atomic_operation
op	42:60	0:0	4	+
water	42:62	0:0	4	1
op	42:63	0:0	4	]
op	43:12	0:0	4	.
water	43:13	0:0	4	d_amplitude_factor
op	43:32	0:0	4	=
water	43:34	0:0	4	d_channel_amplitude_factor
op	43:61	0:0	4	*
water	43:63	0:0	4	0
op	43:64	0:0	4	.
water	43:65	0:0	4	9
op	43:67	0:0	4	/
water	43:69	0:0	4	2
water	43:70	0:0	4	;
water	44:4	0:0	4	}
else	45:4	49:4	2
stmts	45:9	49:4	3	
if	45:9	49:4	4	(d_x > 0)
cond	45:13	45:19	5	d_x > 0
water	45:13	0:0	6	d_x
op	45:17	0:0	6	>
water	45:19	0:0	6	0
stmts	46:4	49:4	5	
water	46:4	0:0	6	{
water	47:8	0:0	6	p_data
op	47:14	0:0	6	->
water	47:16	0:0	6	p_atomic_operations
op	47:35	0:0	6	[
water	47:36	0:0	6	i_next_atomic_operation
op	47:60	0:0	6	+
water	47:62	0:0	6	1
op	47:63	0:0	6	]
op	48:12	0:0	6	.
water	48:13	0:0	6	d_amplitude_factor
op	48:32	0:0	6	=
water	48:34	0:0	6	d_channel_amplitude_factor
op	48:61	0:0	6	*
water	48:63	0:0	6	1
op	48:64	0:0	6	.
water	48:65	0:0	6	1
op	48:67	0:0	6	/
water	48:69	0:0	6	2
water	48:70	0:0	6	;
water	49:4	0:0	6	}
else	50:4	54:4	2
stmts	51:4	54:4	3	
water	51:4	0:0	4	{
water	52:8	0:0	4	p_data
op	52:14	0:0	4	->
water	52:16	0:0	4	p_atomic_operations
op	52:35	0:0	4	[
water	52:36	0:0	4	i_next_atomic_operation
op	52:60	0:0	4	+
water	52:62	0:0	4	1
op	52:63	0:0	4	]
op	53:12	0:0	4	.
water	53:13	0:0	4	d_amplitude_factor
op	53:32	0:0	4	=
water	53:34	0:0	4	d_channel_amplitude_factor
op	53:61	0:0	4	/
water	53:63	0:0	4	2
water	53:64	0:0	4	;
water	54:4	0:0	4	}
