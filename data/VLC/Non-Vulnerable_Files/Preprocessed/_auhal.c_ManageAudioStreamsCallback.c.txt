func	2:0	48:0	0	static int	ManageAudioStreamsCallback
params	2:37	0:0	1	
param	2:38	2:60	2	audio_output_t *	p_aout
param	2:62	2:84	2	AudioDeviceID	i_dev_id
param	2:86	2:101	2	bool	b_register
stmnts	0:0	47:22	1	
decl	4:4	4:43	2	OSStatus	err
op	4:36	0:0	2	=
water	4:38	0:0	2	noErr
decl	5:4	5:48	2	UInt32	i_param_size
op	5:45	0:0	2	=
water	5:47	0:0	2	0
decl	6:4	6:49	2	AudioStreamID	*p_streams
op	6:43	0:0	2	=
water	6:45	0:0	2	NULL
decl	7:4	7:45	2	int	i_streams
op	7:42	0:0	2	=
water	7:44	0:0	2	0
decl	9:4	9:147	2	AudioObjectPropertyAddress	streamsAddress
op	9:46	0:0	2	=
water	9:48	0:0	2	{
water	9:50	0:0	2	kAudioDevicePropertyStreams
water	9:77	0:0	2	,
water	9:79	0:0	2	kAudioDevicePropertyScopeOutput
water	9:110	0:0	2	,
water	9:112	0:0	2	kAudioObjectPropertyElementMaster
water	9:146	0:0	2	}
water	10:4	0:0	2	err
op	10:8	0:0	2	=
call	10:10	10:90	2	AudioObjectGetPropertyDataSize
arg	10:41	10:49	3	i_dev_id
water	10:41	0:0	4	i_dev_id
arg	10:51	10:66	3	&streamsAddress
op	10:51	0:0	4	&
water	10:52	0:0	4	streamsAddress
arg	10:68	10:69	3	0
water	10:68	0:0	4	0
arg	10:71	10:75	3	NULL
water	10:71	0:0	4	NULL
arg	10:77	10:90	3	&i_param_size
op	10:77	0:0	4	&
water	10:78	0:0	4	i_param_size
water	10:91	0:0	2	;
if	11:4	14:4	2	(err != noErr)
cond	11:8	11:15	3	err != noErr
water	11:8	0:0	4	err
op	11:12	0:0	4	!=
water	11:15	0:0	4	noErr
stmts	11:22	14:4	3	
water	11:22	0:0	4	{
call	12:8	12:106	4	msg_Err
arg	12:16	12:22	5	p_aout
water	12:16	0:0	6	p_aout
arg	12:24	12:82	5	"could not get number of streams for device id %i [%4.4s]"
water	12:24	0:0	6	"could not get number of streams for device id %i [%4.4s]"
arg	12:84	12:92	5	i_dev_id
water	12:84	0:0	6	i_dev_id
arg	12:94	12:106	5	(char*)&err
water	12:94	0:0	6	(
water	12:95	0:0	6	char
op	12:100	0:0	6	*
water	12:101	0:0	6	)
op	12:102	0:0	6	&
water	12:103	0:0	6	err
water	12:107	0:0	4	;
return	13:8	13:27	4	VLC_EGENERIC
water	13:15	0:0	5	VLC_EGENERIC
water	14:4	0:0	4	}
water	15:4	0:0	2	i_streams
op	15:14	0:0	2	=
water	15:16	0:0	2	i_param_size
op	15:29	0:0	2	/
op	15:31	0:0	2	sizeof
water	15:37	0:0	2	(
water	15:38	0:0	2	AudioStreamID
water	15:51	0:0	2	)
water	15:52	0:0	2	;
water	16:4	0:0	2	p_streams
op	16:14	0:0	2	=
water	16:16	0:0	2	(
water	16:17	0:0	2	AudioStreamID
op	16:31	0:0	2	*
water	16:32	0:0	2	)
call	16:33	16:52	2	malloc
arg	16:40	16:52	3	i_param_size
water	16:40	0:0	4	i_param_size
water	16:53	0:0	2	;
if	17:4	18:25	2	(p_streams == NULL)
cond	17:8	17:21	3	p_streams == NULL
water	17:8	0:0	4	p_streams
op	17:18	0:0	4	==
water	17:21	0:0	4	NULL
stmts	18:8	18:25	3	
return	18:8	18:25	4	VLC_ENOMEM
water	18:15	0:0	5	VLC_ENOMEM
water	19:4	0:0	2	err
op	19:8	0:0	2	=
call	19:10	19:97	2	AudioObjectGetPropertyData
arg	19:37	19:45	3	i_dev_id
water	19:37	0:0	4	i_dev_id
arg	19:47	19:62	3	&streamsAddress
op	19:47	0:0	4	&
water	19:48	0:0	4	streamsAddress
arg	19:64	19:65	3	0
water	19:64	0:0	4	0
arg	19:67	19:71	3	NULL
water	19:67	0:0	4	NULL
arg	19:73	19:86	3	&i_param_size
op	19:73	0:0	4	&
water	19:74	0:0	4	i_param_size
arg	19:88	19:97	3	p_streams
water	19:88	0:0	4	p_streams
water	19:98	0:0	2	;
if	20:4	24:4	2	(err != noErr)
cond	20:8	20:15	3	err != noErr
water	20:8	0:0	4	err
op	20:12	0:0	4	!=
water	20:15	0:0	4	noErr
stmts	20:22	24:4	3	
water	20:22	0:0	4	{
call	21:8	21:77	4	msg_Err
arg	21:16	21:22	5	p_aout
water	21:16	0:0	6	p_aout
arg	21:24	21:63	5	"could not get list of streams [%4.4s]"
water	21:24	0:0	6	"could not get list of streams [%4.4s]"
arg	21:65	21:77	5	(char*)&err
water	21:65	0:0	6	(
water	21:66	0:0	6	char
op	21:71	0:0	6	*
water	21:72	0:0	6	)
op	21:73	0:0	6	&
water	21:74	0:0	6	err
water	21:78	0:0	4	;
call	22:8	22:22	4	free
arg	22:13	22:22	5	p_streams
water	22:13	0:0	6	p_streams
water	22:23	0:0	4	;
return	23:8	23:27	4	VLC_EGENERIC
water	23:15	0:0	5	VLC_EGENERIC
water	24:4	0:0	4	}
for	25:4	45:4	2	( int i = 0 ;i < i_streams;i ++)
forinit	0:0	25:18	3	 int i = 0 ;
decl	25:9	25:18	4	int	i
op	25:15	0:0	4	=
water	25:17	0:0	4	0
cond	25:20	25:24	3	i < i_streams
water	25:20	0:0	4	i
op	25:22	0:0	4	<
water	25:24	0:0	4	i_streams
forexpr	25:35	25:36	3	i ++
water	25:35	0:0	4	i
op	25:36	0:0	4	++
stmts	25:40	45:4	3	
water	25:40	0:0	4	{
decl	27:8	27:144	4	AudioObjectPropertyAddress	physicalFormatsAddress
op	27:58	0:0	4	=
water	27:60	0:0	4	{
water	27:62	0:0	4	kAudioStreamPropertyAvailablePhysicalFormats
water	27:106	0:0	4	,
water	27:108	0:0	4	kAudioObjectPropertyScopeGlobal
water	27:139	0:0	4	,
water	27:141	0:0	4	0
water	27:143	0:0	4	}
if	28:8	40:8	4	(b_register)
cond	28:12	28:12	5	b_register
water	28:12	0:0	6	b_register
stmts	28:24	40:8	5	
water	28:24	0:0	6	{
water	29:12	0:0	6	err
op	29:16	0:0	6	=
call	29:18	29:126	6	AudioObjectAddPropertyListener
arg	29:49	29:61	7	p_streams[i]
water	29:49	0:0	8	p_streams
op	29:58	0:0	8	[
water	29:59	0:0	8	i
op	29:60	0:0	8	]
arg	29:63	29:86	7	&physicalFormatsAddress
op	29:63	0:0	8	&
water	29:64	0:0	8	physicalFormatsAddress
arg	29:88	29:110	7	StreamsChangedListener
water	29:88	0:0	8	StreamsChangedListener
arg	29:112	29:126	7	(void*)p_aout
water	29:112	0:0	8	(
water	29:113	0:0	8	void
op	29:118	0:0	8	*
water	29:119	0:0	8	)
water	29:120	0:0	8	p_aout
water	29:127	0:0	6	;
if	30:12	39:12	6	(err != noErr)
cond	30:16	30:23	7	err != noErr
water	30:16	0:0	8	err
op	30:20	0:0	8	!=
water	30:23	0:0	8	noErr
stmts	30:30	39:12	7	
water	30:30	0:0	8	{
if	32:16	35:16	8	(err == kAudioHardwareIllegalOperationError)
cond	32:20	32:27	9	err == kAudioHardwareIllegalOperationError
water	32:20	0:0	10	err
op	32:24	0:0	10	==
water	32:27	0:0	10	kAudioHardwareIllegalOperationError
stmts	32:64	35:16	9	
water	32:64	0:0	10	{
call	33:20	34:41	10	msg_Warn
arg	33:29	33:35	11	p_aout
water	33:29	0:0	12	p_aout
arg	33:37	33:138	11	"could not set audio stream formats property callback on stream id %i, callback already set? [%4.4s]"
water	33:37	0:0	12	"could not set audio stream formats property callback on stream id %i, callback already set? [%4.4s]"
arg	33:140	33:152	11	p_streams[i]
water	33:140	0:0	12	p_streams
op	33:149	0:0	12	[
water	33:150	0:0	12	i
op	33:151	0:0	12	]
arg	34:29	34:41	11	(char*)&err
water	34:29	0:0	12	(
water	34:30	0:0	12	char
op	34:35	0:0	12	*
water	34:36	0:0	12	)
op	34:37	0:0	12	&
water	34:38	0:0	12	err
water	34:42	0:0	10	;
water	35:16	0:0	10	}
else	35:18	38:16	8
stmts	35:23	38:16	9	
water	35:23	0:0	10	{
call	36:20	37:40	10	msg_Err
arg	36:28	36:34	11	p_aout
water	36:28	0:0	12	p_aout
arg	36:36	36:114	11	"could not set audio stream formats property callback on stream id %i [%4.4s]"
water	36:36	0:0	12	"could not set audio stream formats property callback on stream id %i [%4.4s]"
arg	36:116	36:128	11	p_streams[i]
water	36:116	0:0	12	p_streams
op	36:125	0:0	12	[
water	36:126	0:0	12	i
op	36:127	0:0	12	]
arg	37:28	37:40	11	(char*)&err
water	37:28	0:0	12	(
water	37:29	0:0	12	char
op	37:34	0:0	12	*
water	37:35	0:0	12	)
op	37:36	0:0	12	&
water	37:37	0:0	12	err
water	37:41	0:0	10	;
water	38:16	0:0	10	}
water	39:12	0:0	8	}
water	40:8	0:0	6	}
else	40:10	44:8	4
stmts	40:15	44:8	5	
water	40:15	0:0	6	{
water	41:12	0:0	6	err
op	41:16	0:0	6	=
call	41:18	41:129	6	AudioObjectRemovePropertyListener
arg	41:52	41:64	7	p_streams[i]
water	41:52	0:0	8	p_streams
op	41:61	0:0	8	[
water	41:62	0:0	8	i
op	41:63	0:0	8	]
arg	41:66	41:89	7	&physicalFormatsAddress
op	41:66	0:0	8	&
water	41:67	0:0	8	physicalFormatsAddress
arg	41:91	41:113	7	StreamsChangedListener
water	41:91	0:0	8	StreamsChangedListener
arg	41:115	41:129	7	(void*)p_aout
water	41:115	0:0	8	(
water	41:116	0:0	8	void
op	41:121	0:0	8	*
water	41:122	0:0	8	)
water	41:123	0:0	8	p_aout
water	41:130	0:0	6	;
if	42:12	43:112	6	(err != noErr)
cond	42:16	42:23	7	err != noErr
water	42:16	0:0	8	err
op	42:20	0:0	8	!=
water	42:23	0:0	8	noErr
stmts	43:16	43:112	7	
call	43:16	43:111	8	msg_Err
arg	43:24	43:30	9	p_aout
water	43:24	0:0	10	p_aout
arg	43:32	43:97	9	"failed to remove audio device property streams callback [%4.4s]"
water	43:32	0:0	10	"failed to remove audio device property streams callback [%4.4s]"
arg	43:99	43:111	9	(char*)&err
water	43:99	0:0	10	(
water	43:100	0:0	10	char
op	43:105	0:0	10	*
water	43:106	0:0	10	)
op	43:107	0:0	10	&
water	43:108	0:0	10	err
water	43:112	0:0	8	;
water	44:8	0:0	6	}
water	45:4	0:0	4	}
call	46:4	46:18	2	free
arg	46:9	46:18	3	p_streams
water	46:9	0:0	4	p_streams
water	46:19	0:0	2	;
return	47:4	47:22	2	VLC_SUCCESS
water	47:11	0:0	3	VLC_SUCCESS
