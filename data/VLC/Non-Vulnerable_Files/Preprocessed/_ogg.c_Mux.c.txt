func	2:0	85:0	0	static int	Mux
params	2:14	0:0	1	
param	2:16	2:34	2	sout_mux_t *	p_mux
stmnts	0:0	84:22	1	
decl	4:4	4:40	2	sout_mux_sys_t	*p_sys
op	4:26	0:0	2	=
water	4:28	0:0	2	p_mux
op	4:33	0:0	2	->
water	4:35	0:0	2	p_sys
decl	5:4	5:24	2	mtime_t	i_dts
if	7:4	18:4	2	(p_sys -> i_del_streams)
cond	7:9	7:16	3	p_sys -> i_del_streams
water	7:9	0:0	4	p_sys
op	7:14	0:0	4	->
water	7:16	0:0	4	i_del_streams
stmts	8:4	18:4	3	
water	8:4	0:0	4	{
for	10:8	15:8	4	( int i = 0 ;i < p_sys -> i_del_streams;i ++)
forinit	0:0	10:22	5	 int i = 0 ;
decl	10:13	10:22	6	int	i
op	10:19	0:0	6	=
water	10:21	0:0	6	0
cond	10:24	10:35	5	i < p_sys -> i_del_streams
water	10:24	0:0	6	i
op	10:26	0:0	6	<
water	10:28	0:0	6	p_sys
op	10:33	0:0	6	->
water	10:35	0:0	6	i_del_streams
forexpr	10:50	10:51	5	i ++
water	10:50	0:0	6	i
op	10:51	0:0	6	++
stmts	11:8	15:8	5	
water	11:8	0:0	6	{
call	12:12	12:67	6	OggCreateStreamFooter
arg	12:35	12:40	7	p_mux
water	12:35	0:0	8	p_mux
arg	12:42	12:67	7	p_sys->pp_del_streams[i]
water	12:42	0:0	8	p_sys
op	12:47	0:0	8	->
water	12:49	0:0	8	pp_del_streams
op	12:63	0:0	8	[
water	12:64	0:0	8	i
op	12:65	0:0	8	]
water	12:68	0:0	6	;
call	13:12	13:63	6	FREENULL
arg	13:22	13:63	7	p_sys->pp_del_streams[i]->p_oggds_header
water	13:22	0:0	8	p_sys
op	13:27	0:0	8	->
water	13:29	0:0	8	pp_del_streams
op	13:43	0:0	8	[
water	13:44	0:0	8	i
op	13:45	0:0	8	]
op	13:46	0:0	8	->
water	13:48	0:0	8	p_oggds_header
water	13:64	0:0	6	;
call	14:12	14:47	6	FREENULL
arg	14:22	14:47	7	p_sys->pp_del_streams[i]
water	14:22	0:0	8	p_sys
op	14:27	0:0	8	->
water	14:29	0:0	8	pp_del_streams
op	14:43	0:0	8	[
water	14:44	0:0	8	i
op	14:45	0:0	8	]
water	14:48	0:0	6	;
water	15:8	0:0	6	}
call	16:8	16:40	4	FREENULL
arg	16:18	16:40	5	p_sys->pp_del_streams
water	16:18	0:0	6	p_sys
op	16:23	0:0	6	->
water	16:25	0:0	6	pp_del_streams
water	16:41	0:0	4	;
water	17:8	0:0	4	p_sys
op	17:13	0:0	4	->
water	17:15	0:0	4	i_del_streams
op	17:29	0:0	4	=
water	17:31	0:0	4	0
water	17:32	0:0	4	;
water	18:4	0:0	4	}
if	19:4	26:4	2	(p_sys -> i_streams == 0)
cond	19:9	19:29	3	p_sys -> i_streams == 0
water	19:9	0:0	4	p_sys
op	19:14	0:0	4	->
water	19:16	0:0	4	i_streams
op	19:26	0:0	4	==
water	19:29	0:0	4	0
stmts	20:4	26:4	3	
water	20:4	0:0	4	{
water	23:8	0:0	4	p_sys
op	23:13	0:0	4	->
water	23:15	0:0	4	skeleton
op	23:23	0:0	4	.
water	23:24	0:0	4	b_head_done
op	23:36	0:0	4	=
water	23:38	0:0	4	false
water	23:43	0:0	4	;
water	24:8	0:0	4	p_sys
op	24:13	0:0	4	->
water	24:15	0:0	4	b_can_add_streams
op	24:33	0:0	4	=
water	24:35	0:0	4	true
water	24:39	0:0	4	;
water	25:8	0:0	4	p_sys
op	25:13	0:0	4	->
water	25:15	0:0	4	i_segment_start
op	25:31	0:0	4	=
water	25:33	0:0	4	p_sys
op	25:38	0:0	4	->
water	25:40	0:0	4	i_pos
water	25:45	0:0	4	;
water	26:4	0:0	4	}
if	27:4	75:4	2	(p_sys -> i_add_streams)
cond	27:9	27:16	3	p_sys -> i_add_streams
water	27:9	0:0	4	p_sys
op	27:14	0:0	4	->
water	27:16	0:0	4	i_add_streams
stmts	28:4	75:4	3	
water	28:4	0:0	4	{
if	29:8	51:8	4	(! p_sys -> b_can_add_streams)
cond	29:13	29:21	5	! p_sys -> b_can_add_streams
op	29:13	0:0	6	!
water	29:14	0:0	6	p_sys
op	29:19	0:0	6	->
water	29:21	0:0	6	b_can_add_streams
stmts	30:8	51:8	5	
water	30:8	0:0	6	{
call	31:12	31:153	6	msg_Warn
arg	31:22	31:27	7	p_mux
water	31:22	0:0	8	p_mux
arg	31:29	31:106	7	"Can't add new stream %d/%d: Considerer increasing sout-mux-caching variable"
water	31:29	0:0	8	"Can't add new stream %d/%d: Considerer increasing sout-mux-caching variable"
arg	31:108	31:128	7	p_sys->i_del_streams
water	31:108	0:0	8	p_sys
op	31:113	0:0	8	->
water	31:115	0:0	8	i_del_streams
arg	31:130	31:153	7	p_mux->p_sys->i_streams
water	31:130	0:0	8	p_mux
op	31:135	0:0	8	->
water	31:137	0:0	8	p_sys
op	31:142	0:0	8	->
water	31:144	0:0	8	i_streams
water	31:154	0:0	6	;
call	32:12	32:84	6	msg_Warn
arg	32:22	32:27	7	p_mux
water	32:22	0:0	8	p_mux
arg	32:29	32:84	7	"Resetting and setting new identity to current streams"
water	32:29	0:0	8	"Resetting and setting new identity to current streams"
water	32:85	0:0	6	;
for	34:12	42:12	6	( int i = 0 ;i < p_mux -> p_sys -> i_streams;i ++)
forinit	0:0	34:25	7	 int i = 0 ;
decl	34:18	34:25	8	int	i
op	34:23	0:0	8	=
water	34:24	0:0	8	0
cond	34:27	34:45	7	i < p_mux -> p_sys -> i_streams
water	34:27	0:0	8	i
op	34:29	0:0	8	<
water	34:31	0:0	8	p_mux
op	34:36	0:0	8	->
water	34:38	0:0	8	p_sys
op	34:43	0:0	8	->
water	34:45	0:0	8	i_streams
forexpr	34:56	34:57	7	i ++
water	34:56	0:0	8	i
op	34:57	0:0	8	++
stmts	35:12	42:12	7	
water	35:12	0:0	8	{
decl	36:16	36:85	8	ogg_stream_t	*p_stream
op	36:40	0:0	8	=
water	36:42	0:0	8	(
water	36:43	0:0	8	ogg_stream_t
op	36:56	0:0	8	*
water	36:57	0:0	8	)
water	36:59	0:0	8	p_mux
op	36:64	0:0	8	->
water	36:66	0:0	8	pp_inputs
op	36:75	0:0	8	[
water	36:76	0:0	8	i
op	36:77	0:0	8	]
op	36:78	0:0	8	->
water	36:80	0:0	8	p_sys
if	37:16	37:76	8	(p_stream -> b_finished || ! p_stream -> b_started)
cond	37:21	37:56	9	p_stream -> b_finished || ! p_stream -> b_started
water	37:21	0:0	10	p_stream
op	37:29	0:0	10	->
water	37:31	0:0	10	b_finished
op	37:42	0:0	10	||
op	37:45	0:0	10	!
water	37:46	0:0	10	p_stream
op	37:54	0:0	10	->
water	37:56	0:0	10	b_started
stmts	37:68	37:76	9	
continue	37:68	37:76	10	
call	38:16	38:55	8	OggCreateStreamFooter
arg	38:39	38:44	9	p_mux
water	38:39	0:0	10	p_mux
arg	38:46	38:55	9	p_stream
water	38:46	0:0	10	p_stream
water	38:56	0:0	8	;
water	39:16	0:0	8	p_stream
op	39:24	0:0	8	->
water	39:26	0:0	8	i_serial_no
op	39:38	0:0	8	=
water	39:40	0:0	8	p_sys
op	39:45	0:0	8	->
water	39:47	0:0	8	i_next_serial_no
op	39:63	0:0	8	++
water	39:65	0:0	8	;
water	40:16	0:0	8	p_stream
op	40:24	0:0	8	->
water	40:26	0:0	8	i_packet_no
op	40:38	0:0	8	=
water	40:40	0:0	8	0
water	40:41	0:0	8	;
water	41:16	0:0	8	p_stream
op	41:24	0:0	8	->
water	41:26	0:0	8	b_finished
op	41:37	0:0	8	=
water	41:39	0:0	8	true
water	41:43	0:0	8	;
water	42:12	0:0	8	}
if	44:12	47:12	6	(p_sys -> skeleton . b_head_done)
cond	44:17	44:33	7	p_sys -> skeleton . b_head_done
water	44:17	0:0	8	p_sys
op	44:22	0:0	8	->
water	44:24	0:0	8	skeleton
op	44:32	0:0	8	.
water	44:33	0:0	8	b_head_done
stmts	45:12	47:12	7	
water	45:12	0:0	8	{
call	46:16	46:45	8	OggRewriteFisheadPage
arg	46:39	46:45	9	p_mux
water	46:39	0:0	10	p_mux
water	46:46	0:0	8	;
water	47:12	0:0	8	}
water	48:12	0:0	6	p_sys
op	48:17	0:0	6	->
water	48:19	0:0	6	b_can_add_streams
op	48:37	0:0	6	=
water	48:39	0:0	6	true
water	48:43	0:0	6	;
water	49:12	0:0	6	p_sys
op	49:17	0:0	6	->
water	49:19	0:0	6	skeleton
op	49:27	0:0	6	.
water	49:28	0:0	6	b_head_done
op	49:40	0:0	6	=
water	49:42	0:0	6	false
water	49:47	0:0	6	;
water	50:12	0:0	6	p_sys
op	50:17	0:0	6	->
water	50:19	0:0	6	i_segment_start
op	50:35	0:0	6	=
water	50:37	0:0	6	p_sys
op	50:42	0:0	6	->
water	50:44	0:0	6	i_pos
water	50:49	0:0	6	;
water	51:8	0:0	6	}
if	53:8	57:8	4	(sout_MuxGetStream (p_mux ,1 ,& i_dts ) < 0)
cond	53:12	53:51	5	sout_MuxGetStream (p_mux ,1 ,& i_dts ) < 0
call	53:12	53:47	6	sout_MuxGetStream
arg	53:31	53:36	7	p_mux
water	53:31	0:0	8	p_mux
arg	53:38	53:39	7	1
water	53:38	0:0	8	1
arg	53:41	53:47	7	&i_dts
op	53:41	0:0	8	&
water	53:42	0:0	8	i_dts
op	53:49	0:0	6	<
water	53:51	0:0	6	0
stmts	54:8	57:8	5	
water	54:8	0:0	6	{
call	55:12	55:50	6	msg_Dbg
arg	55:21	55:26	7	p_mux
water	55:21	0:0	8	p_mux
arg	55:28	55:50	7	"waiting for data..."
water	55:28	0:0	8	"waiting for data..."
water	55:51	0:0	6	;
return	56:12	56:30	6	VLC_SUCCESS
water	56:19	0:0	7	VLC_SUCCESS
water	57:8	0:0	6	}
call	58:8	58:50	4	msg_Dbg
arg	58:17	58:22	5	p_mux
water	58:17	0:0	6	p_mux
arg	58:24	58:50	5	"writing streams headers"
water	58:24	0:0	6	"writing streams headers"
water	58:51	0:0	4	;
water	59:8	0:0	4	p_sys
op	59:13	0:0	4	->
water	59:15	0:0	4	i_start_dts
op	59:27	0:0	4	=
water	59:29	0:0	4	i_dts
water	59:34	0:0	4	;
water	60:8	0:0	4	p_sys
op	60:13	0:0	4	->
water	60:15	0:0	4	i_streams
op	60:25	0:0	4	=
water	60:27	0:0	4	p_mux
op	60:32	0:0	4	->
water	60:34	0:0	4	i_nb_inputs
water	60:45	0:0	4	;
water	61:8	0:0	4	p_sys
op	61:13	0:0	4	->
water	61:15	0:0	4	i_del_streams
op	61:29	0:0	4	=
water	61:31	0:0	4	0
water	61:32	0:0	4	;
water	62:8	0:0	4	p_sys
op	62:13	0:0	4	->
water	62:15	0:0	4	i_add_streams
op	62:29	0:0	4	=
water	62:31	0:0	4	0
water	62:32	0:0	4	;
water	63:8	0:0	4	p_sys
op	63:13	0:0	4	->
water	63:15	0:0	4	skeleton
op	63:23	0:0	4	.
water	63:24	0:0	4	b_create
op	63:33	0:0	4	=
water	63:35	0:0	4	true
water	63:39	0:0	4	;
if	64:8	65:29	4	(!OggCreateHeaders (p_mux ))
cond	64:13	64:39	5	!OggCreateHeaders (p_mux )
op	64:13	0:0	6	!
call	64:15	64:39	6	OggCreateHeaders
arg	64:33	64:39	7	p_mux
water	64:33	0:0	8	p_mux
stmts	65:12	65:29	5	
return	65:12	65:29	6	VLC_ENOMEM
water	65:19	0:0	7	VLC_ENOMEM
if	67:8	71:8	4	(p_sys -> b_can_add_streams)
cond	67:13	67:20	5	p_sys -> b_can_add_streams
water	67:13	0:0	6	p_sys
op	67:18	0:0	6	->
water	67:20	0:0	6	b_can_add_streams
stmts	68:8	71:8	5	
water	68:8	0:0	6	{
call	69:12	69:65	6	msg_Dbg
arg	69:21	69:26	7	p_mux
water	69:21	0:0	8	p_mux
arg	69:28	69:50	7	"data starts from %zu"
water	69:28	0:0	8	"data starts from %zu"
arg	69:52	69:65	7	p_sys->i_pos
water	69:52	0:0	8	p_sys
op	69:57	0:0	8	->
water	69:59	0:0	8	i_pos
water	69:66	0:0	6	;
water	70:12	0:0	6	p_sys
op	70:17	0:0	6	->
water	70:19	0:0	6	i_data_start
op	70:32	0:0	6	=
water	70:34	0:0	6	p_sys
op	70:39	0:0	6	->
water	70:41	0:0	6	i_pos
water	70:46	0:0	6	;
water	71:8	0:0	6	}
water	74:8	0:0	4	p_sys
op	74:13	0:0	4	->
water	74:15	0:0	4	b_can_add_streams
op	74:33	0:0	4	=
water	74:35	0:0	4	false
water	74:40	0:0	4	;
water	75:4	0:0	4	}
for	77:4	83:4	2	(;;)
forinit	77:9	77:9	3	;
water	77:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	78:4	83:4	3	
water	78:4	0:0	4	{
decl	79:8	79:58	4	int	i_stream
op	79:21	0:0	4	=
call	79:23	79:57	5	sout_MuxGetStream
arg	79:42	79:47	6	p_mux
water	79:42	0:0	7	p_mux
arg	79:49	79:50	6	1
water	79:49	0:0	7	1
arg	79:52	79:57	6	NULL
water	79:52	0:0	7	NULL
if	80:8	81:30	4	(i_stream < 0)
cond	80:12	80:23	5	i_stream < 0
water	80:12	0:0	6	i_stream
op	80:21	0:0	6	<
water	80:23	0:0	6	0
stmts	81:12	81:30	5	
return	81:12	81:30	6	VLC_SUCCESS
water	81:19	0:0	7	VLC_SUCCESS
call	82:8	82:52	4	MuxBlock
arg	82:18	82:23	5	p_mux
water	82:18	0:0	6	p_mux
arg	82:25	82:52	5	p_mux->pp_inputs[i_stream]
water	82:25	0:0	6	p_mux
op	82:30	0:0	6	->
water	82:32	0:0	6	pp_inputs
op	82:41	0:0	6	[
water	82:42	0:0	6	i_stream
op	82:50	0:0	6	]
water	82:53	0:0	4	;
water	83:4	0:0	4	}
return	84:4	84:22	2	VLC_SUCCESS
water	84:11	0:0	3	VLC_SUCCESS
