func	2:0	168:0	0	static int	Activate
params	2:19	0:0	1	
param	2:21	2:42	2	vlc_object_t *	p_this
stmnts	0:0	167:12	1	
decl	4:4	4:43	2	filter_t	*p_filter
op	4:23	0:0	2	=
water	4:25	0:0	2	(
water	4:26	0:0	2	filter_t
op	4:35	0:0	2	*
water	4:36	0:0	2	)
water	4:37	0:0	2	p_this
decl	6:4	6:24	2	size_t	i_tables_size
if	8:4	9:27	2	(!vlc_CPU_capable ( ))
cond	8:8	8:25	3	!vlc_CPU_capable ( )
op	8:8	0:0	4	!
call	8:9	8:25	4	vlc_CPU_capable
stmts	9:8	9:27	3	
return	9:8	9:27	4	VLC_EGENERIC
water	9:15	0:0	5	VLC_EGENERIC
if	10:4	14:4	2	(p_filter -> fmt_out . video . i_width & 1 || p_filter -> fmt_out . video . i_height & 1)
cond	10:8	11:43	3	p_filter -> fmt_out . video . i_width & 1 || p_filter -> fmt_out . video . i_height & 1
water	10:8	0:0	4	p_filter
op	10:16	0:0	4	->
water	10:18	0:0	4	fmt_out
op	10:25	0:0	4	.
water	10:26	0:0	4	video
op	10:31	0:0	4	.
water	10:32	0:0	4	i_width
op	10:40	0:0	4	&
water	10:42	0:0	4	1
op	11:5	0:0	4	||
water	11:8	0:0	4	p_filter
op	11:16	0:0	4	->
water	11:18	0:0	4	fmt_out
op	11:25	0:0	4	.
water	11:26	0:0	4	video
op	11:31	0:0	4	.
water	11:32	0:0	4	i_height
op	11:41	0:0	4	&
water	11:43	0:0	4	1
stmts	12:4	14:4	3	
water	12:4	0:0	4	{
return	13:8	13:27	4	VLC_EGENERIC
water	13:15	0:0	5	VLC_EGENERIC
water	14:4	0:0	4	}
if	15:4	18:4	2	(p_filter -> fmt_in . video . orientation != p_filter -> fmt_out . video . orientation)
cond	15:8	15:70	3	p_filter -> fmt_in . video . orientation != p_filter -> fmt_out . video . orientation
water	15:8	0:0	4	p_filter
op	15:16	0:0	4	->
water	15:18	0:0	4	fmt_in
op	15:24	0:0	4	.
water	15:25	0:0	4	video
op	15:30	0:0	4	.
water	15:31	0:0	4	orientation
op	15:43	0:0	4	!=
water	15:46	0:0	4	p_filter
op	15:54	0:0	4	->
water	15:56	0:0	4	fmt_out
op	15:63	0:0	4	.
water	15:64	0:0	4	video
op	15:69	0:0	4	.
water	15:70	0:0	4	orientation
stmts	16:4	18:4	3	
water	16:4	0:0	4	{
return	17:8	17:27	4	VLC_EGENERIC
water	17:15	0:0	5	VLC_EGENERIC
water	18:4	0:0	4	}
switch	19:4	103:4	2	(p_filter -> fmt_in . video . i_chroma)
cond	19:12	19:35	3	p_filter -> fmt_in . video . i_chroma
water	19:12	0:0	4	p_filter
op	19:20	0:0	4	->
water	19:22	0:0	4	fmt_in
op	19:28	0:0	4	.
water	19:29	0:0	4	video
op	19:34	0:0	4	.
water	19:35	0:0	4	i_chroma
stmts	20:4	103:4	3	
water	20:4	0:0	4	{
label	21:8	21:27	4	case VLC_CODEC_YV12 :
label	22:8	22:27	4	case VLC_CODEC_I420 :
switch	23:12	99:12	4	(p_filter -> fmt_out . video . i_chroma)
cond	23:20	23:44	5	p_filter -> fmt_out . video . i_chroma
water	23:20	0:0	6	p_filter
op	23:28	0:0	6	->
water	23:30	0:0	6	fmt_out
op	23:37	0:0	6	.
water	23:38	0:0	6	video
op	23:43	0:0	6	.
water	23:44	0:0	6	i_chroma
stmts	24:12	99:12	5	
water	24:12	0:0	6	{
label	26:16	26:36	6	case VLC_CODEC_RGB15 :
label	27:16	27:36	6	case VLC_CODEC_RGB16 :
if	29:20	36:20	6	(( p_filter -> fmt_out . video . i_rmask == 0 x7c00 && p_filter -> fmt_out . video . i_gmask == 0 x03e0 && p_filter -> fmt_out . video . i_bmask == 0 x001f ))
cond	29:24	31:68	7	( p_filter -> fmt_out . video . i_rmask == 0 x7c00 && p_filter -> fmt_out . video . i_gmask == 0 x03e0 && p_filter -> fmt_out . video . i_bmask == 0 x001f )
water	29:24	0:0	8	(
water	29:26	0:0	8	p_filter
op	29:34	0:0	8	->
water	29:36	0:0	8	fmt_out
op	29:43	0:0	8	.
water	29:44	0:0	8	video
op	29:49	0:0	8	.
water	29:50	0:0	8	i_rmask
op	29:58	0:0	8	==
water	29:61	0:0	8	0
water	29:62	0:0	8	x7c00
op	30:23	0:0	8	&&
water	30:26	0:0	8	p_filter
op	30:34	0:0	8	->
water	30:36	0:0	8	fmt_out
op	30:43	0:0	8	.
water	30:44	0:0	8	video
op	30:49	0:0	8	.
water	30:50	0:0	8	i_gmask
op	30:58	0:0	8	==
water	30:61	0:0	8	0
water	30:62	0:0	8	x03e0
op	31:23	0:0	8	&&
water	31:26	0:0	8	p_filter
op	31:34	0:0	8	->
water	31:36	0:0	8	fmt_out
op	31:43	0:0	8	.
water	31:44	0:0	8	video
op	31:49	0:0	8	.
water	31:50	0:0	8	i_bmask
op	31:58	0:0	8	==
water	31:61	0:0	8	0
water	31:62	0:0	8	x001f
water	31:68	0:0	8	)
stmts	32:20	36:20	7	
water	32:20	0:0	8	{
call	34:24	34:68	8	msg_Dbg
arg	34:32	34:38	9	p_this
water	34:32	0:0	10	p_this
arg	34:40	34:68	9	"RGB pixel format is R5G5B5"
water	34:40	0:0	10	"RGB pixel format is R5G5B5"
water	34:69	0:0	8	;
water	35:24	0:0	8	p_filter
op	35:32	0:0	8	->
water	35:34	0:0	8	pf_video_filter
op	35:50	0:0	8	=
water	35:52	0:0	8	I420_R5G5B5_Filter
water	35:70	0:0	8	;
water	36:20	0:0	8	}
else	37:20	44:20	6
stmts	37:25	44:20	7	
if	37:25	44:20	8	(( p_filter -> fmt_out . video . i_rmask == 0 xf800 && p_filter -> fmt_out . video . i_gmask == 0 x07e0 && p_filter -> fmt_out . video . i_bmask == 0 x001f ))
cond	37:29	39:73	9	( p_filter -> fmt_out . video . i_rmask == 0 xf800 && p_filter -> fmt_out . video . i_gmask == 0 x07e0 && p_filter -> fmt_out . video . i_bmask == 0 x001f )
water	37:29	0:0	10	(
water	37:31	0:0	10	p_filter
op	37:39	0:0	10	->
water	37:41	0:0	10	fmt_out
op	37:48	0:0	10	.
water	37:49	0:0	10	video
op	37:54	0:0	10	.
water	37:55	0:0	10	i_rmask
op	37:63	0:0	10	==
water	37:66	0:0	10	0
water	37:67	0:0	10	xf800
op	38:28	0:0	10	&&
water	38:31	0:0	10	p_filter
op	38:39	0:0	10	->
water	38:41	0:0	10	fmt_out
op	38:48	0:0	10	.
water	38:49	0:0	10	video
op	38:54	0:0	10	.
water	38:55	0:0	10	i_gmask
op	38:63	0:0	10	==
water	38:66	0:0	10	0
water	38:67	0:0	10	x07e0
op	39:28	0:0	10	&&
water	39:31	0:0	10	p_filter
op	39:39	0:0	10	->
water	39:41	0:0	10	fmt_out
op	39:48	0:0	10	.
water	39:49	0:0	10	video
op	39:54	0:0	10	.
water	39:55	0:0	10	i_bmask
op	39:63	0:0	10	==
water	39:66	0:0	10	0
water	39:67	0:0	10	x001f
water	39:73	0:0	10	)
stmts	40:20	44:20	9	
water	40:20	0:0	10	{
call	42:24	42:68	10	msg_Dbg
arg	42:32	42:38	11	p_this
water	42:32	0:0	12	p_this
arg	42:40	42:68	11	"RGB pixel format is R5G6B5"
water	42:40	0:0	12	"RGB pixel format is R5G6B5"
water	42:69	0:0	10	;
water	43:24	0:0	10	p_filter
op	43:32	0:0	10	->
water	43:34	0:0	10	pf_video_filter
op	43:50	0:0	10	=
water	43:52	0:0	10	I420_R5G6B5_Filter
water	43:70	0:0	10	;
water	44:20	0:0	10	}
else	45:20	46:43	6
stmts	46:24	46:43	7	
return	46:24	46:43	8	VLC_EGENERIC
water	46:31	0:0	9	VLC_EGENERIC
break	47:20	47:25	6	
label	48:16	48:36	6	case VLC_CODEC_RGB32 :
if	50:20	57:20	6	(p_filter -> fmt_out . video . i_rmask == 0 x00ff0000 && p_filter -> fmt_out . video . i_gmask == 0 x0000ff00 && p_filter -> fmt_out . video . i_bmask == 0 x000000ff)
cond	50:24	52:60	7	p_filter -> fmt_out . video . i_rmask == 0 x00ff0000 && p_filter -> fmt_out . video . i_gmask == 0 x0000ff00 && p_filter -> fmt_out . video . i_bmask == 0 x000000ff
water	50:24	0:0	8	p_filter
op	50:32	0:0	8	->
water	50:34	0:0	8	fmt_out
op	50:41	0:0	8	.
water	50:42	0:0	8	video
op	50:47	0:0	8	.
water	50:48	0:0	8	i_rmask
op	50:56	0:0	8	==
water	50:59	0:0	8	0
water	50:60	0:0	8	x00ff0000
op	51:21	0:0	8	&&
water	51:24	0:0	8	p_filter
op	51:32	0:0	8	->
water	51:34	0:0	8	fmt_out
op	51:41	0:0	8	.
water	51:42	0:0	8	video
op	51:47	0:0	8	.
water	51:48	0:0	8	i_gmask
op	51:56	0:0	8	==
water	51:59	0:0	8	0
water	51:60	0:0	8	x0000ff00
op	52:21	0:0	8	&&
water	52:24	0:0	8	p_filter
op	52:32	0:0	8	->
water	52:34	0:0	8	fmt_out
op	52:41	0:0	8	.
water	52:42	0:0	8	video
op	52:47	0:0	8	.
water	52:48	0:0	8	i_bmask
op	52:56	0:0	8	==
water	52:59	0:0	8	0
water	52:60	0:0	8	x000000ff
stmts	53:20	57:20	7	
water	53:20	0:0	8	{
call	55:24	55:70	8	msg_Dbg
arg	55:32	55:38	9	p_this
water	55:32	0:0	10	p_this
arg	55:40	55:70	9	"RGB pixel format is A8R8G8B8"
water	55:40	0:0	10	"RGB pixel format is A8R8G8B8"
water	55:71	0:0	8	;
water	56:24	0:0	8	p_filter
op	56:32	0:0	8	->
water	56:34	0:0	8	pf_video_filter
op	56:50	0:0	8	=
water	56:52	0:0	8	I420_A8R8G8B8_Filter
water	56:72	0:0	8	;
water	57:20	0:0	8	}
else	58:20	65:20	6
stmts	58:25	65:20	7	
if	58:25	65:20	8	(p_filter -> fmt_out . video . i_rmask == 0 xff000000 && p_filter -> fmt_out . video . i_gmask == 0 x00ff0000 && p_filter -> fmt_out . video . i_bmask == 0 x0000ff00)
cond	58:29	60:65	9	p_filter -> fmt_out . video . i_rmask == 0 xff000000 && p_filter -> fmt_out . video . i_gmask == 0 x00ff0000 && p_filter -> fmt_out . video . i_bmask == 0 x0000ff00
water	58:29	0:0	10	p_filter
op	58:37	0:0	10	->
water	58:39	0:0	10	fmt_out
op	58:46	0:0	10	.
water	58:47	0:0	10	video
op	58:52	0:0	10	.
water	58:53	0:0	10	i_rmask
op	58:61	0:0	10	==
water	58:64	0:0	10	0
water	58:65	0:0	10	xff000000
op	59:26	0:0	10	&&
water	59:29	0:0	10	p_filter
op	59:37	0:0	10	->
water	59:39	0:0	10	fmt_out
op	59:46	0:0	10	.
water	59:47	0:0	10	video
op	59:52	0:0	10	.
water	59:53	0:0	10	i_gmask
op	59:61	0:0	10	==
water	59:64	0:0	10	0
water	59:65	0:0	10	x00ff0000
op	60:26	0:0	10	&&
water	60:29	0:0	10	p_filter
op	60:37	0:0	10	->
water	60:39	0:0	10	fmt_out
op	60:46	0:0	10	.
water	60:47	0:0	10	video
op	60:52	0:0	10	.
water	60:53	0:0	10	i_bmask
op	60:61	0:0	10	==
water	60:64	0:0	10	0
water	60:65	0:0	10	x0000ff00
stmts	61:20	65:20	9	
water	61:20	0:0	10	{
call	63:24	63:70	10	msg_Dbg
arg	63:32	63:38	11	p_this
water	63:32	0:0	12	p_this
arg	63:40	63:70	11	"RGB pixel format is R8G8B8A8"
water	63:40	0:0	12	"RGB pixel format is R8G8B8A8"
water	63:71	0:0	10	;
water	64:24	0:0	10	p_filter
op	64:32	0:0	10	->
water	64:34	0:0	10	pf_video_filter
op	64:50	0:0	10	=
water	64:52	0:0	10	I420_R8G8B8A8_Filter
water	64:72	0:0	10	;
water	65:20	0:0	10	}
else	66:20	73:20	6
stmts	66:25	73:20	7	
if	66:25	73:20	8	(p_filter -> fmt_out . video . i_rmask == 0 x0000ff00 && p_filter -> fmt_out . video . i_gmask == 0 x00ff0000 && p_filter -> fmt_out . video . i_bmask == 0 xff000000)
cond	66:29	68:65	9	p_filter -> fmt_out . video . i_rmask == 0 x0000ff00 && p_filter -> fmt_out . video . i_gmask == 0 x00ff0000 && p_filter -> fmt_out . video . i_bmask == 0 xff000000
water	66:29	0:0	10	p_filter
op	66:37	0:0	10	->
water	66:39	0:0	10	fmt_out
op	66:46	0:0	10	.
water	66:47	0:0	10	video
op	66:52	0:0	10	.
water	66:53	0:0	10	i_rmask
op	66:61	0:0	10	==
water	66:64	0:0	10	0
water	66:65	0:0	10	x0000ff00
op	67:26	0:0	10	&&
water	67:29	0:0	10	p_filter
op	67:37	0:0	10	->
water	67:39	0:0	10	fmt_out
op	67:46	0:0	10	.
water	67:47	0:0	10	video
op	67:52	0:0	10	.
water	67:53	0:0	10	i_gmask
op	67:61	0:0	10	==
water	67:64	0:0	10	0
water	67:65	0:0	10	x00ff0000
op	68:26	0:0	10	&&
water	68:29	0:0	10	p_filter
op	68:37	0:0	10	->
water	68:39	0:0	10	fmt_out
op	68:46	0:0	10	.
water	68:47	0:0	10	video
op	68:52	0:0	10	.
water	68:53	0:0	10	i_bmask
op	68:61	0:0	10	==
water	68:64	0:0	10	0
water	68:65	0:0	10	xff000000
stmts	69:20	73:20	9	
water	69:20	0:0	10	{
call	71:24	71:70	10	msg_Dbg
arg	71:32	71:38	11	p_this
water	71:32	0:0	12	p_this
arg	71:40	71:70	11	"RGB pixel format is B8G8R8A8"
water	71:40	0:0	12	"RGB pixel format is B8G8R8A8"
water	71:71	0:0	10	;
water	72:24	0:0	10	p_filter
op	72:32	0:0	10	->
water	72:34	0:0	10	pf_video_filter
op	72:50	0:0	10	=
water	72:52	0:0	10	I420_B8G8R8A8_Filter
water	72:72	0:0	10	;
water	73:20	0:0	10	}
else	74:20	81:20	6
stmts	74:25	81:20	7	
if	74:25	81:20	8	(p_filter -> fmt_out . video . i_rmask == 0 x000000ff && p_filter -> fmt_out . video . i_gmask == 0 x0000ff00 && p_filter -> fmt_out . video . i_bmask == 0 x00ff0000)
cond	74:29	76:65	9	p_filter -> fmt_out . video . i_rmask == 0 x000000ff && p_filter -> fmt_out . video . i_gmask == 0 x0000ff00 && p_filter -> fmt_out . video . i_bmask == 0 x00ff0000
water	74:29	0:0	10	p_filter
op	74:37	0:0	10	->
water	74:39	0:0	10	fmt_out
op	74:46	0:0	10	.
water	74:47	0:0	10	video
op	74:52	0:0	10	.
water	74:53	0:0	10	i_rmask
op	74:61	0:0	10	==
water	74:64	0:0	10	0
water	74:65	0:0	10	x000000ff
op	75:26	0:0	10	&&
water	75:29	0:0	10	p_filter
op	75:37	0:0	10	->
water	75:39	0:0	10	fmt_out
op	75:46	0:0	10	.
water	75:47	0:0	10	video
op	75:52	0:0	10	.
water	75:53	0:0	10	i_gmask
op	75:61	0:0	10	==
water	75:64	0:0	10	0
water	75:65	0:0	10	x0000ff00
op	76:26	0:0	10	&&
water	76:29	0:0	10	p_filter
op	76:37	0:0	10	->
water	76:39	0:0	10	fmt_out
op	76:46	0:0	10	.
water	76:47	0:0	10	video
op	76:52	0:0	10	.
water	76:53	0:0	10	i_bmask
op	76:61	0:0	10	==
water	76:64	0:0	10	0
water	76:65	0:0	10	x00ff0000
stmts	77:20	81:20	9	
water	77:20	0:0	10	{
call	79:24	79:70	10	msg_Dbg
arg	79:32	79:38	11	p_this
water	79:32	0:0	12	p_this
arg	79:40	79:70	11	"RGB pixel format is A8B8G8R8"
water	79:40	0:0	12	"RGB pixel format is A8B8G8R8"
water	79:71	0:0	10	;
water	80:24	0:0	10	p_filter
op	80:32	0:0	10	->
water	80:34	0:0	10	pf_video_filter
op	80:50	0:0	10	=
water	80:52	0:0	10	I420_A8B8G8R8_Filter
water	80:72	0:0	10	;
water	81:20	0:0	10	}
else	82:20	83:43	6
stmts	83:24	83:43	7	
return	83:24	83:43	8	VLC_EGENERIC
water	83:31	0:0	9	VLC_EGENERIC
break	84:20	84:25	6	
label	86:16	86:35	6	case VLC_CODEC_RGB8 :
water	87:20	0:0	6	p_filter
op	87:28	0:0	6	->
water	87:30	0:0	6	pf_video_filter
op	87:46	0:0	6	=
water	87:48	0:0	6	I420_RGB8_Filter
water	87:64	0:0	6	;
break	88:20	88:25	6	
label	89:16	89:36	6	case VLC_CODEC_RGB15 :
label	90:16	90:36	6	case VLC_CODEC_RGB16 :
water	91:20	0:0	6	p_filter
op	91:28	0:0	6	->
water	91:30	0:0	6	pf_video_filter
op	91:46	0:0	6	=
water	91:48	0:0	6	I420_RGB16_Filter
water	91:65	0:0	6	;
break	92:20	92:25	6	
label	93:16	93:36	6	case VLC_CODEC_RGB32 :
water	94:20	0:0	6	p_filter
op	94:28	0:0	6	->
water	94:30	0:0	6	pf_video_filter
op	94:46	0:0	6	=
water	94:48	0:0	6	I420_RGB32_Filter
water	94:65	0:0	6	;
break	95:20	95:25	6	
label	97:16	97:23	6	default :
return	98:20	98:39	6	VLC_EGENERIC
water	98:27	0:0	7	VLC_EGENERIC
water	99:12	0:0	6	}
break	100:12	100:17	4	
label	101:8	101:15	4	default :
return	102:12	102:31	4	VLC_EGENERIC
water	102:19	0:0	5	VLC_EGENERIC
water	103:4	0:0	4	}
water	104:4	0:0	2	p_filter
op	104:12	0:0	2	->
water	104:14	0:0	2	p_sys
op	104:20	0:0	2	=
call	104:22	104:53	2	malloc
arg	104:30	104:53	3	sizeof(filter_sys_t)
op	104:30	0:0	4	sizeof
water	104:36	0:0	4	(
water	104:38	0:0	4	filter_sys_t
water	104:51	0:0	4	)
water	104:54	0:0	2	;
if	105:4	108:4	2	(p_filter -> p_sys == NULL)
cond	105:8	105:27	3	p_filter -> p_sys == NULL
water	105:8	0:0	4	p_filter
op	105:16	0:0	4	->
water	105:18	0:0	4	p_sys
op	105:24	0:0	4	==
water	105:27	0:0	4	NULL
stmts	106:4	108:4	3	
water	106:4	0:0	4	{
return	107:8	107:27	4	VLC_EGENERIC
water	107:15	0:0	5	VLC_EGENERIC
water	108:4	0:0	4	}
switch	109:4	127:4	2	(p_filter -> fmt_out . video . i_chroma)
cond	109:12	109:36	3	p_filter -> fmt_out . video . i_chroma
water	109:12	0:0	4	p_filter
op	109:20	0:0	4	->
water	109:22	0:0	4	fmt_out
op	109:29	0:0	4	.
water	109:30	0:0	4	video
op	109:35	0:0	4	.
water	109:36	0:0	4	i_chroma
stmts	110:4	127:4	3	
water	110:4	0:0	4	{
label	112:8	112:27	4	case VLC_CODEC_RGB8 :
water	113:12	0:0	4	p_filter
op	113:20	0:0	4	->
water	113:22	0:0	4	p_sys
op	113:27	0:0	4	->
water	113:29	0:0	4	p_buffer
op	113:38	0:0	4	=
call	113:40	113:63	4	malloc
arg	113:48	113:63	5	VOUT_MAX_WIDTH
water	113:48	0:0	6	VOUT_MAX_WIDTH
water	113:64	0:0	4	;
break	114:12	114:17	4	
label	116:8	116:28	4	case VLC_CODEC_RGB15 :
label	117:8	117:28	4	case VLC_CODEC_RGB16 :
water	118:12	0:0	4	p_filter
op	118:20	0:0	4	->
water	118:22	0:0	4	p_sys
op	118:27	0:0	4	->
water	118:29	0:0	4	p_buffer
op	118:38	0:0	4	=
call	118:40	118:67	4	malloc
arg	118:48	118:67	5	VOUT_MAX_WIDTH*2
water	118:48	0:0	6	VOUT_MAX_WIDTH
op	118:63	0:0	6	*
water	118:65	0:0	6	2
water	118:68	0:0	4	;
break	119:12	119:17	4	
label	120:8	120:28	4	case VLC_CODEC_RGB24 :
label	121:8	121:28	4	case VLC_CODEC_RGB32 :
water	122:12	0:0	4	p_filter
op	122:20	0:0	4	->
water	122:22	0:0	4	p_sys
op	122:27	0:0	4	->
water	122:29	0:0	4	p_buffer
op	122:38	0:0	4	=
call	122:40	122:67	4	malloc
arg	122:48	122:67	5	VOUT_MAX_WIDTH*4
water	122:48	0:0	6	VOUT_MAX_WIDTH
op	122:63	0:0	6	*
water	122:65	0:0	6	4
water	122:68	0:0	4	;
break	123:12	123:17	4	
label	124:8	124:15	4	default :
water	125:12	0:0	4	p_filter
op	125:20	0:0	4	->
water	125:22	0:0	4	p_sys
op	125:27	0:0	4	->
water	125:29	0:0	4	p_buffer
op	125:38	0:0	4	=
water	125:40	0:0	4	NULL
water	125:44	0:0	4	;
break	126:12	126:17	4	
water	127:4	0:0	4	}
if	128:4	132:4	2	(p_filter -> p_sys -> p_buffer == NULL)
cond	128:8	128:37	3	p_filter -> p_sys -> p_buffer == NULL
water	128:8	0:0	4	p_filter
op	128:16	0:0	4	->
water	128:18	0:0	4	p_sys
op	128:23	0:0	4	->
water	128:25	0:0	4	p_buffer
op	128:34	0:0	4	==
water	128:37	0:0	4	NULL
stmts	129:4	132:4	3	
water	129:4	0:0	4	{
call	130:8	130:30	4	free
arg	130:14	130:30	5	p_filter->p_sys
water	130:14	0:0	6	p_filter
op	130:22	0:0	6	->
water	130:24	0:0	6	p_sys
water	130:31	0:0	4	;
return	131:8	131:27	4	VLC_EGENERIC
water	131:15	0:0	5	VLC_EGENERIC
water	132:4	0:0	4	}
water	133:4	0:0	2	p_filter
op	133:12	0:0	2	->
water	133:14	0:0	2	p_sys
op	133:19	0:0	2	->
water	133:21	0:0	2	p_offset
op	133:30	0:0	2	=
call	133:32	136:36	2	malloc
arg	133:40	136:36	3	p_filter->fmt_out.video.i_width*((p_filter->fmt_out.video.i_chroma==VLC_CODEC_RGB8)?2:1)*sizeof(int)
water	133:40	0:0	4	p_filter
op	133:48	0:0	4	->
water	133:50	0:0	4	fmt_out
op	133:57	0:0	4	.
water	133:58	0:0	4	video
op	133:63	0:0	4	.
water	133:64	0:0	4	i_width
op	134:20	0:0	4	*
water	134:22	0:0	4	(
water	134:24	0:0	4	(
water	134:26	0:0	4	p_filter
op	134:34	0:0	4	->
water	134:36	0:0	4	fmt_out
op	134:43	0:0	4	.
water	134:44	0:0	4	video
op	134:49	0:0	4	.
water	134:50	0:0	4	i_chroma
op	135:27	0:0	4	==
water	135:30	0:0	4	VLC_CODEC_RGB8
water	135:45	0:0	4	)
water	135:47	0:0	4	?
water	135:49	0:0	4	2
water	135:51	0:0	4	:
water	135:53	0:0	4	1
water	135:55	0:0	4	)
op	136:20	0:0	4	*
op	136:22	0:0	4	sizeof
water	136:28	0:0	4	(
water	136:30	0:0	4	int
water	136:34	0:0	4	)
water	136:37	0:0	2	;
if	137:4	142:4	2	(p_filter -> p_sys -> p_offset == NULL)
cond	137:8	137:37	3	p_filter -> p_sys -> p_offset == NULL
water	137:8	0:0	4	p_filter
op	137:16	0:0	4	->
water	137:18	0:0	4	p_sys
op	137:23	0:0	4	->
water	137:25	0:0	4	p_offset
op	137:34	0:0	4	==
water	137:37	0:0	4	NULL
stmts	138:4	142:4	3	
water	138:4	0:0	4	{
call	139:8	139:40	4	free
arg	139:14	139:40	5	p_filter->p_sys->p_buffer
water	139:14	0:0	6	p_filter
op	139:22	0:0	6	->
water	139:24	0:0	6	p_sys
op	139:29	0:0	6	->
water	139:31	0:0	6	p_buffer
water	139:41	0:0	4	;
call	140:8	140:30	4	free
arg	140:14	140:30	5	p_filter->p_sys
water	140:14	0:0	6	p_filter
op	140:22	0:0	6	->
water	140:24	0:0	6	p_sys
water	140:31	0:0	4	;
return	141:8	141:27	4	VLC_EGENERIC
water	141:15	0:0	5	VLC_EGENERIC
water	142:4	0:0	4	}
switch	144:4	156:4	2	(p_filter -> fmt_out . video . i_chroma)
cond	144:12	144:36	3	p_filter -> fmt_out . video . i_chroma
water	144:12	0:0	4	p_filter
op	144:20	0:0	4	->
water	144:22	0:0	4	fmt_out
op	144:29	0:0	4	.
water	144:30	0:0	4	video
op	144:35	0:0	4	.
water	144:36	0:0	4	i_chroma
stmts	145:4	156:4	3	
water	145:4	0:0	4	{
label	146:4	146:23	4	case VLC_CODEC_RGB8 :
water	147:8	0:0	4	i_tables_size
op	147:22	0:0	4	=
op	147:24	0:0	4	sizeof
water	147:30	0:0	4	(
water	147:32	0:0	4	uint8_t
water	147:40	0:0	4	)
op	147:42	0:0	4	*
water	147:44	0:0	4	PALETTE_TABLE_SIZE
water	147:62	0:0	4	;
break	148:8	148:13	4	
label	149:4	149:24	4	case VLC_CODEC_RGB15 :
label	150:4	150:24	4	case VLC_CODEC_RGB16 :
water	151:8	0:0	4	i_tables_size
op	151:22	0:0	4	=
op	151:24	0:0	4	sizeof
water	151:30	0:0	4	(
water	151:32	0:0	4	uint16_t
water	151:41	0:0	4	)
op	151:43	0:0	4	*
water	151:45	0:0	4	RGB_TABLE_SIZE
water	151:59	0:0	4	;
break	152:8	152:13	4	
label	153:4	153:11	4	default :
water	154:8	0:0	4	i_tables_size
op	154:22	0:0	4	=
op	154:24	0:0	4	sizeof
water	154:30	0:0	4	(
water	154:32	0:0	4	uint32_t
water	154:41	0:0	4	)
op	154:43	0:0	4	*
water	154:45	0:0	4	RGB_TABLE_SIZE
water	154:59	0:0	4	;
break	155:8	155:13	4	
water	156:4	0:0	4	}
water	157:4	0:0	2	p_filter
op	157:12	0:0	2	->
water	157:14	0:0	2	p_sys
op	157:19	0:0	2	->
water	157:21	0:0	2	p_base
op	157:28	0:0	2	=
call	157:30	157:52	2	malloc
arg	157:38	157:52	3	i_tables_size
water	157:38	0:0	4	i_tables_size
water	157:53	0:0	2	;
if	158:4	164:4	2	(p_filter -> p_sys -> p_base == NULL)
cond	158:8	158:35	3	p_filter -> p_sys -> p_base == NULL
water	158:8	0:0	4	p_filter
op	158:16	0:0	4	->
water	158:18	0:0	4	p_sys
op	158:23	0:0	4	->
water	158:25	0:0	4	p_base
op	158:32	0:0	4	==
water	158:35	0:0	4	NULL
stmts	159:4	164:4	3	
water	159:4	0:0	4	{
call	160:8	160:40	4	free
arg	160:14	160:40	5	p_filter->p_sys->p_offset
water	160:14	0:0	6	p_filter
op	160:22	0:0	6	->
water	160:24	0:0	6	p_sys
op	160:29	0:0	6	->
water	160:31	0:0	6	p_offset
water	160:41	0:0	4	;
call	161:8	161:40	4	free
arg	161:14	161:40	5	p_filter->p_sys->p_buffer
water	161:14	0:0	6	p_filter
op	161:22	0:0	6	->
water	161:24	0:0	6	p_sys
op	161:29	0:0	6	->
water	161:31	0:0	6	p_buffer
water	161:41	0:0	4	;
call	162:8	162:30	4	free
arg	162:14	162:30	5	p_filter->p_sys
water	162:14	0:0	6	p_filter
op	162:22	0:0	6	->
water	162:24	0:0	6	p_sys
water	162:31	0:0	4	;
return	163:8	163:17	4	-1
op	163:15	0:0	5	-
water	163:16	0:0	5	1
water	164:4	0:0	4	}
call	165:4	165:21	2	SetYUV
arg	165:12	165:21	3	p_filter
water	165:12	0:0	4	p_filter
water	165:22	0:0	2	;
return	167:4	167:12	2	0
water	167:11	0:0	3	0
