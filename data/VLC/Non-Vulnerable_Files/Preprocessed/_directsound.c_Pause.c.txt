func	2:0	18:0	0	static HRESULT	Pause
params	2:20	0:0	1	
param	2:22	2:44	2	aout_stream_sys_t *	sys
param	2:46	2:57	2	bool	pause
stmnts	0:0	17:13	1	
decl	4:4	4:14	2	HRESULT	hr
if	5:4	6:55	2	(pause)
cond	5:8	5:8	3	pause
water	5:8	0:0	4	pause
stmts	6:8	6:55	3	
water	6:8	0:0	4	hr
op	6:11	0:0	4	=
call	6:13	6:54	4	IDirectSoundBuffer_Stop
arg	6:38	6:54	5	sys->p_dsbuffer
water	6:38	0:0	6	sys
op	6:41	0:0	6	->
water	6:43	0:0	6	p_dsbuffer
water	6:55	0:0	4	;
else	7:4	8:78	2
stmts	8:8	8:78	3	
water	8:8	0:0	4	hr
op	8:11	0:0	4	=
call	8:13	8:77	4	IDirectSoundBuffer_Play
arg	8:38	8:53	5	sys->p_dsbuffer
water	8:38	0:0	6	sys
op	8:41	0:0	6	->
water	8:43	0:0	6	p_dsbuffer
arg	8:55	8:56	5	0
water	8:55	0:0	6	0
arg	8:58	8:59	5	0
water	8:58	0:0	6	0
arg	8:61	8:77	5	DSBPLAY_LOOPING
water	8:61	0:0	6	DSBPLAY_LOOPING
water	8:78	0:0	4	;
if	9:4	16:4	2	(hr == DS_OK)
cond	9:8	9:14	3	hr == DS_OK
water	9:8	0:0	4	hr
op	9:11	0:0	4	==
water	9:14	0:0	4	DS_OK
stmts	10:4	16:4	3	
water	10:4	0:0	4	{
call	11:8	11:35	4	vlc_mutex_lock
arg	11:24	11:35	5	&sys->lock
op	11:24	0:0	6	&
water	11:25	0:0	6	sys
op	11:28	0:0	6	->
water	11:30	0:0	6	lock
water	11:36	0:0	4	;
water	12:8	0:0	4	sys
op	12:11	0:0	4	->
water	12:13	0:0	4	b_playing
op	12:23	0:0	4	=
op	12:25	0:0	4	!
water	12:26	0:0	4	pause
water	12:31	0:0	4	;
if	13:8	14:41	4	(sys -> b_playing)
cond	13:12	13:17	5	sys -> b_playing
water	13:12	0:0	6	sys
op	13:15	0:0	6	->
water	13:17	0:0	6	b_playing
stmts	14:12	14:41	5	
call	14:12	14:40	6	vlc_cond_signal
arg	14:29	14:40	7	&sys->cond
op	14:29	0:0	8	&
water	14:30	0:0	8	sys
op	14:33	0:0	8	->
water	14:35	0:0	8	cond
water	14:41	0:0	6	;
call	15:8	15:37	4	vlc_mutex_unlock
arg	15:26	15:37	5	&sys->lock
op	15:26	0:0	6	&
water	15:27	0:0	6	sys
op	15:30	0:0	6	->
water	15:32	0:0	6	lock
water	15:38	0:0	4	;
water	16:4	0:0	4	}
return	17:4	17:13	2	hr
water	17:11	0:0	3	hr
