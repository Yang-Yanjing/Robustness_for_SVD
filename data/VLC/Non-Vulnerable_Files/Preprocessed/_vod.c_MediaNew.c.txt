func	2:0	56:0	0	static vod_media_t *	MediaNew
params	2:28	0:0	1	
param	2:30	2:42	2	vod_t *	p_vod
param	2:44	2:64	2	const char *	psz_name
param	3:30	3:51	2	input_item_t *	p_item
stmnts	0:0	55:15	1	
decl	5:4	5:59	2	vod_media_t	*p_media
op	5:25	0:0	2	=
call	5:27	5:58	3	calloc
arg	5:35	5:36	4	1
water	5:35	0:0	5	1
arg	5:38	5:58	4	sizeof(vod_media_t)
op	5:38	0:0	5	sizeof
water	5:44	0:0	5	(
water	5:45	0:0	5	vod_media_t
water	5:56	0:0	5	)
if	6:4	7:19	2	(! p_media)
cond	6:8	6:9	3	! p_media
op	6:8	0:0	4	!
water	6:9	0:0	4	p_media
stmts	7:8	7:19	3	
return	7:8	7:19	4	NULL
water	7:15	0:0	5	NULL
water	8:4	0:0	2	p_media
op	8:11	0:0	2	->
water	8:13	0:0	2	p_vod
op	8:19	0:0	2	=
water	8:21	0:0	2	p_vod
water	8:26	0:0	2	;
water	9:4	0:0	2	p_media
op	9:11	0:0	2	->
water	9:13	0:0	2	rtsp
op	9:18	0:0	2	=
water	9:20	0:0	2	NULL
water	9:24	0:0	2	;
call	10:4	10:41	2	TAB_INIT
arg	10:14	10:27	3	p_media->i_es
water	10:14	0:0	4	p_media
op	10:21	0:0	4	->
water	10:23	0:0	4	i_es
arg	10:29	10:41	3	p_media->es
water	10:29	0:0	4	p_media
op	10:36	0:0	4	->
water	10:38	0:0	4	es
water	10:42	0:0	2	;
water	11:4	0:0	2	p_media
op	11:11	0:0	2	->
water	11:13	0:0	2	psz_mux
op	11:21	0:0	2	=
water	11:23	0:0	2	NULL
water	11:27	0:0	2	;
water	12:4	0:0	2	p_media
op	12:11	0:0	2	->
water	12:13	0:0	2	i_length
op	12:22	0:0	2	=
call	12:24	12:55	2	input_item_GetDuration
arg	12:48	12:55	3	p_item
water	12:48	0:0	4	p_item
water	12:56	0:0	2	;
call	13:4	13:34	2	vlc_mutex_lock
arg	13:20	13:34	3	&p_item->lock
op	13:20	0:0	4	&
water	13:21	0:0	4	p_item
op	13:27	0:0	4	->
water	13:29	0:0	4	lock
water	13:35	0:0	2	;
call	14:4	14:76	2	msg_Dbg
arg	14:13	14:18	3	p_vod
water	14:13	0:0	4	p_vod
arg	14:20	14:51	3	"media '%s' has %i declared ES"
water	14:20	0:0	4	"media '%s' has %i declared ES"
arg	14:53	14:61	3	psz_name
water	14:53	0:0	4	psz_name
arg	14:63	14:76	3	p_item->i_es
water	14:63	0:0	4	p_item
op	14:69	0:0	4	->
water	14:71	0:0	4	i_es
water	14:77	0:0	2	;
for	15:4	43:4	2	( int i = 0 ;i < p_item -> i_es;i ++)
forinit	0:0	15:18	3	 int i = 0 ;
decl	15:9	15:18	4	int	i
op	15:15	0:0	4	=
water	15:17	0:0	4	0
cond	15:20	15:32	3	i < p_item -> i_es
water	15:20	0:0	4	i
op	15:22	0:0	4	<
water	15:24	0:0	4	p_item
op	15:30	0:0	4	->
water	15:32	0:0	4	i_es
forexpr	15:38	15:39	3	i ++
water	15:38	0:0	4	i
op	15:39	0:0	4	++
stmts	16:4	43:4	3	
water	16:4	0:0	4	{
decl	17:8	17:42	4	es_format_t	*p_fmt
op	17:27	0:0	4	=
water	17:29	0:0	4	p_item
op	17:35	0:0	4	->
water	17:37	0:0	4	es
op	17:39	0:0	4	[
water	17:40	0:0	4	i
op	17:41	0:0	4	]
switch	18:8	26:8	4	(p_fmt -> i_codec)
cond	18:16	18:23	5	p_fmt -> i_codec
water	18:16	0:0	6	p_fmt
op	18:21	0:0	6	->
water	18:23	0:0	6	i_codec
stmts	19:8	26:8	5	
water	19:8	0:0	6	{
water	20:12	0:0	6	case
call	20:17	20:48	6	VLC_FOURCC
arg	20:29	20:32	7	'm'
water	20:29	0:0	8	'm'
arg	20:34	20:37	7	'p'
water	20:34	0:0	8	'p'
arg	20:39	20:42	7	'2'
water	20:39	0:0	8	'2'
arg	20:44	20:48	7	't'
water	20:44	0:0	8	't'
water	20:49	0:0	6	:
water	21:16	0:0	6	p_media
op	21:23	0:0	6	->
water	21:25	0:0	6	psz_mux
op	21:33	0:0	6	=
water	21:35	0:0	6	"ts"
water	21:39	0:0	6	;
break	22:16	22:21	6	
water	23:12	0:0	6	case
call	23:17	23:48	6	VLC_FOURCC
arg	23:29	23:32	7	'm'
water	23:29	0:0	8	'm'
arg	23:34	23:37	7	'p'
water	23:34	0:0	8	'p'
arg	23:39	23:42	7	'2'
water	23:39	0:0	8	'2'
arg	23:44	23:48	7	'p'
water	23:44	0:0	8	'p'
water	23:49	0:0	6	:
water	24:16	0:0	6	p_media
op	24:23	0:0	6	->
water	24:25	0:0	6	psz_mux
op	24:33	0:0	6	=
water	24:35	0:0	6	"ps"
water	24:39	0:0	6	;
break	25:16	25:21	6	
water	26:8	0:0	6	}
call	27:8	27:60	4	assert
arg	27:15	27:60	5	p_media->psz_mux==NULL||p_item->i_es==1
water	27:15	0:0	6	p_media
op	27:22	0:0	6	->
water	27:24	0:0	6	psz_mux
op	27:32	0:0	6	==
water	27:35	0:0	6	NULL
op	27:40	0:0	6	||
water	27:43	0:0	6	p_item
op	27:49	0:0	6	->
water	27:51	0:0	6	i_es
op	27:56	0:0	6	==
water	27:59	0:0	6	1
water	27:61	0:0	4	;
decl	28:8	28:58	4	media_es_t	*p_es
op	28:25	0:0	4	=
call	28:27	28:57	5	calloc
arg	28:35	28:36	6	1
water	28:35	0:0	7	1
arg	28:38	28:57	6	sizeof(media_es_t)
op	28:38	0:0	7	sizeof
water	28:44	0:0	7	(
water	28:45	0:0	7	media_es_t
water	28:55	0:0	7	)
if	29:8	30:20	4	(! p_es)
cond	29:12	29:13	5	! p_es
op	29:12	0:0	6	!
water	29:13	0:0	6	p_es
stmts	30:12	30:20	5	
continue	30:12	30:20	6	
water	31:8	0:0	4	p_es
op	31:12	0:0	4	->
water	31:14	0:0	4	es_id
op	31:20	0:0	4	=
water	31:22	0:0	4	p_fmt
op	31:27	0:0	4	->
water	31:29	0:0	4	i_id
water	31:33	0:0	4	;
water	32:8	0:0	4	p_es
op	32:12	0:0	4	->
water	32:14	0:0	4	rtsp_id
op	32:22	0:0	4	=
water	32:24	0:0	4	NULL
water	32:28	0:0	4	;
if	33:8	38:8	4	(rtp_get_fmt (VLC_OBJECT (p_vod ) ,p_fmt ,p_media -> psz_mux ,& p_es -> rtp_fmt ) != VLC_SUCCESS)
cond	33:12	34:43	5	rtp_get_fmt (VLC_OBJECT (p_vod ) ,p_fmt ,p_media -> psz_mux ,& p_es -> rtp_fmt ) != VLC_SUCCESS
call	33:12	34:38	6	rtp_get_fmt
arg	33:24	33:41	7	VLC_OBJECT(p_vod)
call	33:24	33:40	8	VLC_OBJECT
arg	33:35	33:40	9	p_vod
water	33:35	0:0	10	p_vod
arg	33:43	33:48	7	p_fmt
water	33:43	0:0	8	p_fmt
arg	33:50	33:66	7	p_media->psz_mux
water	33:50	0:0	8	p_media
op	33:57	0:0	8	->
water	33:59	0:0	8	psz_mux
arg	34:24	34:38	7	&p_es->rtp_fmt
op	34:24	0:0	8	&
water	34:25	0:0	8	p_es
op	34:29	0:0	8	->
water	34:31	0:0	8	rtp_fmt
op	34:40	0:0	6	!=
water	34:43	0:0	6	VLC_SUCCESS
stmts	35:8	38:8	5	
water	35:8	0:0	6	{
call	36:12	36:21	6	free
arg	36:17	36:21	7	p_es
water	36:17	0:0	8	p_es
water	36:22	0:0	6	;
continue	37:12	37:20	6	
water	38:8	0:0	6	}
call	39:8	39:53	4	TAB_APPEND
arg	39:20	39:33	5	p_media->i_es
water	39:20	0:0	6	p_media
op	39:27	0:0	6	->
water	39:29	0:0	6	i_es
arg	39:35	39:46	5	p_media->es
water	39:35	0:0	6	p_media
op	39:42	0:0	6	->
water	39:44	0:0	6	es
arg	39:48	39:53	5	p_es
water	39:48	0:0	6	p_es
water	39:54	0:0	4	;
call	40:8	42:39	4	msg_Dbg
arg	40:16	40:21	5	p_vod
water	40:16	0:0	6	p_vod
arg	40:23	40:51	5	"  - added ES %u %s (%4.4s)"
water	40:23	0:0	6	"  - added ES %u %s (%4.4s)"
arg	41:16	41:42	5	p_es->rtp_fmt.payload_type
water	41:16	0:0	6	p_es
op	41:20	0:0	6	->
water	41:22	0:0	6	rtp_fmt
op	41:29	0:0	6	.
water	41:30	0:0	6	payload_type
arg	41:44	41:64	5	p_es->rtp_fmt.ptname
water	41:44	0:0	6	p_es
op	41:48	0:0	6	->
water	41:50	0:0	6	rtp_fmt
op	41:57	0:0	6	.
water	41:58	0:0	6	ptname
arg	42:16	42:39	5	(char*)&p_fmt->i_codec
water	42:16	0:0	6	(
water	42:17	0:0	6	char
op	42:22	0:0	6	*
water	42:23	0:0	6	)
op	42:24	0:0	6	&
water	42:25	0:0	6	p_fmt
op	42:30	0:0	6	->
water	42:32	0:0	6	i_codec
water	42:40	0:0	4	;
water	43:4	0:0	4	}
call	44:4	44:36	2	vlc_mutex_unlock
arg	44:22	44:36	3	&p_item->lock
op	44:22	0:0	4	&
water	44:23	0:0	4	p_item
op	44:29	0:0	4	->
water	44:31	0:0	4	lock
water	44:37	0:0	2	;
if	45:4	49:4	2	(p_media -> i_es == 0)
cond	45:8	45:25	3	p_media -> i_es == 0
water	45:8	0:0	4	p_media
op	45:15	0:0	4	->
water	45:17	0:0	4	i_es
op	45:22	0:0	4	==
water	45:25	0:0	4	0
stmts	46:4	49:4	3	
water	46:4	0:0	4	{
call	47:8	47:63	4	msg_Err
arg	47:16	47:21	5	p_vod
water	47:16	0:0	6	p_vod
arg	47:23	47:63	5	"no ES was added to the media, aborting"
water	47:23	0:0	6	"no ES was added to the media, aborting"
water	47:64	0:0	4	;
goto	48:8	48:18	4	error
water	48:13	0:0	5	error
water	49:4	0:0	4	}
call	50:4	50:48	2	msg_Dbg
arg	50:12	50:17	3	p_vod
water	50:12	0:0	4	p_vod
arg	50:19	50:38	3	"adding media '%s'"
water	50:19	0:0	4	"adding media '%s'"
arg	50:40	50:48	3	psz_name
water	50:40	0:0	4	psz_name
water	50:49	0:0	2	;
call	51:4	51:61	2	CommandPush
arg	51:17	51:22	3	p_vod
water	51:17	0:0	4	p_vod
arg	51:24	51:41	3	RTSP_CMD_TYPE_ADD
water	51:24	0:0	4	RTSP_CMD_TYPE_ADD
arg	51:43	51:50	3	p_media
water	51:43	0:0	4	p_media
arg	51:52	51:61	3	psz_name
water	51:52	0:0	4	psz_name
water	51:62	0:0	2	;
return	52:4	52:18	2	p_media
water	52:11	0:0	3	p_media
label	53:0	53:5	2	error :
call	54:4	54:27	2	MediaDel
arg	54:13	54:18	3	p_vod
water	54:13	0:0	4	p_vod
arg	54:20	54:27	3	p_media
water	54:20	0:0	4	p_media
water	54:28	0:0	2	;
return	55:4	55:15	2	NULL
water	55:11	0:0	3	NULL
