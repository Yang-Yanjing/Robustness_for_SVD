func	2:0	130:0	0	static subpicture_t *	Decode
params	2:27	0:0	1	
param	2:29	2:45	2	decoder_t *	p_dec
param	2:47	2:66	2	block_t * *	pp_block
stmnts	0:0	129:16	1	
decl	4:4	4:26	2	block_t	*p_block
decl	5:4	5:31	2	subpicture_t	*p_spu
op	5:25	0:0	2	=
water	5:27	0:0	2	NULL
if	6:4	6:67	2	(( pp_block == NULL ) || ( * pp_block == NULL ))
cond	6:8	6:52	3	( pp_block == NULL ) || ( * pp_block == NULL )
water	6:8	0:0	4	(
water	6:10	0:0	4	pp_block
op	6:19	0:0	4	==
water	6:22	0:0	4	NULL
water	6:27	0:0	4	)
op	6:29	0:0	4	||
water	6:32	0:0	4	(
op	6:34	0:0	4	*
water	6:35	0:0	4	pp_block
op	6:44	0:0	4	==
water	6:47	0:0	4	NULL
water	6:52	0:0	4	)
stmts	6:56	6:67	3	
return	6:56	6:67	4	NULL
water	6:63	0:0	5	NULL
water	7:4	0:0	2	p_block
op	7:12	0:0	2	=
op	7:14	0:0	2	*
water	7:15	0:0	2	pp_block
water	7:23	0:0	2	;
op	8:4	0:0	2	*
water	8:5	0:0	2	pp_block
op	8:14	0:0	2	=
water	8:16	0:0	2	NULL
water	8:20	0:0	2	;
if	9:4	14:4	2	(( p_block -> i_flags & ( BLOCK_FLAG_DISCONTINUITY | BLOCK_FLAG_CORRUPTED ) ) || p_block -> i_buffer < sizeof ( uint16_t ))
cond	9:8	10:45	3	( p_block -> i_flags & ( BLOCK_FLAG_DISCONTINUITY | BLOCK_FLAG_CORRUPTED ) ) || p_block -> i_buffer < sizeof ( uint16_t )
water	9:8	0:0	4	(
water	9:10	0:0	4	p_block
op	9:17	0:0	4	->
water	9:19	0:0	4	i_flags
op	9:27	0:0	4	&
water	9:29	0:0	4	(
water	9:30	0:0	4	BLOCK_FLAG_DISCONTINUITY
op	9:54	0:0	4	|
water	9:55	0:0	4	BLOCK_FLAG_CORRUPTED
water	9:75	0:0	4	)
water	9:77	0:0	4	)
op	9:79	0:0	4	||
water	10:10	0:0	4	p_block
op	10:17	0:0	4	->
water	10:19	0:0	4	i_buffer
op	10:28	0:0	4	<
op	10:30	0:0	4	sizeof
water	10:36	0:0	4	(
water	10:37	0:0	4	uint16_t
water	10:45	0:0	4	)
stmts	11:4	14:4	3	
water	11:4	0:0	4	{
call	12:8	12:31	4	block_Release
arg	12:23	12:31	5	p_block
water	12:23	0:0	6	p_block
water	12:32	0:0	4	;
return	13:8	13:19	4	NULL
water	13:15	0:0	5	NULL
water	14:4	0:0	4	}
decl	15:4	15:38	2	uint8_t	*p_buf
op	15:19	0:0	2	=
water	15:21	0:0	2	p_block
op	15:28	0:0	2	->
water	15:30	0:0	2	p_buffer
decl	17:4	17:47	2	uint16_t	i_psz_bytelength
op	17:30	0:0	2	=
call	17:32	17:46	3	GetWBE
arg	17:40	17:46	4	p_buf
water	17:40	0:0	5	p_buf
decl	18:4	18:68	2	const uint8_t	*p_pszstart
op	18:30	0:0	2	=
water	18:32	0:0	2	p_block
op	18:39	0:0	2	->
water	18:41	0:0	2	p_buffer
op	18:50	0:0	2	+
op	18:52	0:0	2	sizeof
water	18:58	0:0	2	(
water	18:59	0:0	2	uint16_t
water	18:67	0:0	2	)
decl	19:4	19:22	2	char	*psz_subtitle
if	20:4	26:4	2	(i_psz_bytelength > 2 && ( !memcmp (p_pszstart ,"\xFE\xFF" ,2 ) || !memcmp (p_pszstart ,"\xFF\xFE" ,2 ) ))
cond	20:9	21:88	3	i_psz_bytelength > 2 && ( !memcmp (p_pszstart ,"\xFE\xFF" ,2 ) || !memcmp (p_pszstart ,"\xFF\xFE" ,2 ) )
water	20:9	0:0	4	i_psz_bytelength
op	20:26	0:0	4	>
water	20:28	0:0	4	2
op	20:30	0:0	4	&&
water	21:9	0:0	4	(
op	21:11	0:0	4	!
call	21:12	21:46	4	memcmp
arg	21:20	21:30	5	p_pszstart
water	21:20	0:0	6	p_pszstart
arg	21:32	21:42	5	"\xFE\xFF"
water	21:32	0:0	6	"\xFE\xFF"
arg	21:44	21:46	5	2
water	21:44	0:0	6	2
op	21:48	0:0	4	||
op	21:51	0:0	4	!
call	21:52	21:86	4	memcmp
arg	21:60	21:70	5	p_pszstart
water	21:60	0:0	6	p_pszstart
arg	21:72	21:82	5	"\xFF\xFE"
water	21:72	0:0	6	"\xFF\xFE"
arg	21:84	21:86	5	2
water	21:84	0:0	6	2
water	21:88	0:0	4	)
stmts	23:4	26:4	3	
water	23:4	0:0	4	{
water	24:8	0:0	4	psz_subtitle
op	24:21	0:0	4	=
call	24:23	24:75	4	FromCharset
arg	24:36	24:44	5	"UTF-16"
water	24:36	0:0	6	"UTF-16"
arg	24:46	24:56	5	p_pszstart
water	24:46	0:0	6	p_pszstart
arg	24:58	24:75	5	i_psz_bytelength
water	24:58	0:0	6	i_psz_bytelength
water	24:76	0:0	4	;
if	25:8	25:40	4	(! psz_subtitle)
cond	25:13	25:14	5	! psz_subtitle
op	25:13	0:0	6	!
water	25:14	0:0	6	psz_subtitle
stmts	25:29	25:40	5	
return	25:29	25:40	6	NULL
water	25:36	0:0	7	NULL
water	26:4	0:0	4	}
else	27:4	33:4	2
stmts	28:4	33:4	3	
water	28:4	0:0	4	{
water	29:8	0:0	4	psz_subtitle
op	29:21	0:0	4	=
call	29:23	29:52	4	malloc
arg	29:31	29:52	5	i_psz_bytelength+1
water	29:31	0:0	6	i_psz_bytelength
op	29:48	0:0	6	+
water	29:50	0:0	6	1
water	29:53	0:0	4	;
if	30:8	30:40	4	(! psz_subtitle)
cond	30:13	30:14	5	! psz_subtitle
op	30:13	0:0	6	!
water	30:14	0:0	6	psz_subtitle
stmts	30:29	30:40	5	
return	30:29	30:40	6	NULL
water	30:36	0:0	7	NULL
call	31:8	31:59	4	memcpy
arg	31:16	31:28	5	psz_subtitle
water	31:16	0:0	6	psz_subtitle
arg	31:30	31:40	5	p_pszstart
water	31:30	0:0	6	p_pszstart
arg	31:42	31:59	5	i_psz_bytelength
water	31:42	0:0	6	i_psz_bytelength
water	31:60	0:0	4	;
water	32:8	0:0	4	psz_subtitle
op	32:20	0:0	4	[
water	32:22	0:0	4	i_psz_bytelength
op	32:39	0:0	4	]
op	32:41	0:0	4	=
water	32:43	0:0	4	'\0'
water	32:47	0:0	4	;
water	33:4	0:0	4	}
water	34:4	0:0	2	p_buf
op	34:10	0:0	2	+=
water	34:13	0:0	2	i_psz_bytelength
op	34:30	0:0	2	+
op	34:32	0:0	2	sizeof
water	34:38	0:0	2	(
water	34:39	0:0	2	uint16_t
water	34:47	0:0	2	)
water	34:48	0:0	2	;
for	35:4	36:58	2	( uint16_t i = 0 ;i < i_psz_bytelength;i ++)
forinit	0:0	35:21	3	 uint16_t i = 0 ;
decl	35:9	35:21	4	uint16_t	i
op	35:19	0:0	4	=
water	35:20	0:0	4	0
cond	35:23	35:27	3	i < i_psz_bytelength
water	35:23	0:0	4	i
op	35:25	0:0	4	<
water	35:27	0:0	4	i_psz_bytelength
forexpr	35:45	35:46	3	i ++
water	35:45	0:0	4	i
op	35:46	0:0	4	++
stmts	36:5	36:58	3	
if	36:5	36:58	4	(psz_subtitle [ i ] == '\r')
cond	36:10	36:29	5	psz_subtitle [ i ] == '\r'
water	36:10	0:0	6	psz_subtitle
op	36:22	0:0	6	[
water	36:23	0:0	6	i
op	36:24	0:0	6	]
op	36:26	0:0	6	==
water	36:29	0:0	6	'\r'
stmts	36:36	36:58	5	
water	36:36	0:0	6	psz_subtitle
op	36:48	0:0	6	[
water	36:49	0:0	6	i
op	36:50	0:0	6	]
op	36:52	0:0	6	=
water	36:54	0:0	6	'\n'
water	36:58	0:0	6	;
decl	37:4	37:57	2	segment_t	*p_segment
op	37:25	0:0	2	=
call	37:27	37:56	3	calloc
arg	37:35	37:36	4	1
water	37:35	0:0	5	1
arg	37:38	37:56	4	sizeof(segment_t)
op	37:38	0:0	5	sizeof
water	37:44	0:0	5	(
water	37:45	0:0	5	segment_t
water	37:54	0:0	5	)
if	38:4	42:4	2	(! p_segment)
cond	38:9	38:10	3	! p_segment
op	38:9	0:0	4	!
water	38:10	0:0	4	p_segment
stmts	39:4	42:4	3	
water	39:4	0:0	4	{
call	40:8	40:27	4	free
arg	40:14	40:27	5	psz_subtitle
water	40:14	0:0	6	psz_subtitle
water	40:28	0:0	4	;
return	41:8	41:19	4	NULL
water	41:15	0:0	5	NULL
water	42:4	0:0	4	}
water	43:4	0:0	2	p_segment
op	43:13	0:0	2	->
water	43:15	0:0	2	psz_string
op	43:26	0:0	2	=
call	43:28	43:49	2	strdup
arg	43:36	43:49	3	psz_subtitle
water	43:36	0:0	4	psz_subtitle
water	43:50	0:0	2	;
water	44:4	0:0	2	p_segment
op	44:13	0:0	2	->
water	44:15	0:0	2	i_size
op	44:22	0:0	2	=
call	44:24	44:46	2	str8len
arg	44:33	44:46	3	psz_subtitle
water	44:33	0:0	4	psz_subtitle
water	44:47	0:0	2	;
if	45:4	52:4	2	(p_dec -> fmt_in . subs . p_style)
cond	45:9	45:28	3	p_dec -> fmt_in . subs . p_style
water	45:9	0:0	4	p_dec
op	45:14	0:0	4	->
water	45:16	0:0	4	fmt_in
op	45:22	0:0	4	.
water	45:23	0:0	4	subs
op	45:27	0:0	4	.
water	45:28	0:0	4	p_style
stmts	46:4	52:4	3	
water	46:4	0:0	4	{
water	47:8	0:0	4	p_segment
op	47:17	0:0	4	->
water	47:19	0:0	4	styles
op	47:25	0:0	4	.
water	47:26	0:0	4	i_color
op	47:34	0:0	4	=
water	47:36	0:0	4	p_dec
op	47:41	0:0	4	->
water	47:43	0:0	4	fmt_in
op	47:49	0:0	4	.
water	47:50	0:0	4	subs
op	47:54	0:0	4	.
water	47:55	0:0	4	p_style
op	47:62	0:0	4	->
water	47:64	0:0	4	i_font_color
water	47:76	0:0	4	;
water	48:8	0:0	4	p_segment
op	48:17	0:0	4	->
water	48:19	0:0	4	styles
op	48:25	0:0	4	.
water	48:26	0:0	4	i_color
op	48:34	0:0	4	|=
water	48:37	0:0	4	p_dec
op	48:42	0:0	4	->
water	48:44	0:0	4	fmt_in
op	48:50	0:0	4	.
water	48:51	0:0	4	subs
op	48:55	0:0	4	.
water	48:56	0:0	4	p_style
op	48:63	0:0	4	->
water	48:65	0:0	4	i_font_alpha
op	48:78	0:0	4	<<
water	48:81	0:0	4	24
water	48:83	0:0	4	;
if	49:8	50:81	4	(p_dec -> fmt_in . subs . p_style -> i_style_flags)
cond	49:13	49:41	5	p_dec -> fmt_in . subs . p_style -> i_style_flags
water	49:13	0:0	6	p_dec
op	49:18	0:0	6	->
water	49:20	0:0	6	fmt_in
op	49:26	0:0	6	.
water	49:27	0:0	6	subs
op	49:31	0:0	6	.
water	49:32	0:0	6	p_style
op	49:39	0:0	6	->
water	49:41	0:0	6	i_style_flags
stmts	50:12	50:81	5	
water	50:12	0:0	6	p_segment
op	50:21	0:0	6	->
water	50:23	0:0	6	styles
op	50:29	0:0	6	.
water	50:30	0:0	6	i_flags
op	50:38	0:0	6	=
water	50:40	0:0	6	p_dec
op	50:45	0:0	6	->
water	50:47	0:0	6	fmt_in
op	50:53	0:0	6	.
water	50:54	0:0	6	subs
op	50:58	0:0	6	.
water	50:59	0:0	6	p_style
op	50:66	0:0	6	->
water	50:68	0:0	6	i_style_flags
water	50:81	0:0	6	;
water	51:8	0:0	4	p_segment
op	51:17	0:0	4	->
water	51:19	0:0	4	styles
op	51:25	0:0	4	.
water	51:26	0:0	4	i_fontsize
op	51:37	0:0	4	=
water	51:39	0:0	4	p_dec
op	51:44	0:0	4	->
water	51:46	0:0	4	fmt_in
op	51:52	0:0	4	.
water	51:53	0:0	4	subs
op	51:57	0:0	4	.
water	51:58	0:0	4	p_style
op	51:65	0:0	4	->
water	51:67	0:0	4	i_font_size
water	51:78	0:0	4	;
water	52:4	0:0	4	}
if	53:4	58:4	2	(! p_segment -> psz_string)
cond	53:9	53:21	3	! p_segment -> psz_string
op	53:9	0:0	4	!
water	53:10	0:0	4	p_segment
op	53:19	0:0	4	->
water	53:21	0:0	4	psz_string
stmts	54:4	58:4	3	
water	54:4	0:0	4	{
call	55:8	55:31	4	SegmentFree
arg	55:21	55:31	5	p_segment
water	55:21	0:0	6	p_segment
water	55:32	0:0	4	;
call	56:8	56:27	4	free
arg	56:14	56:27	5	psz_subtitle
water	56:14	0:0	6	psz_subtitle
water	56:28	0:0	4	;
return	57:8	57:19	4	NULL
water	57:15	0:0	5	NULL
water	58:4	0:0	4	}
water	60:4	0:0	2	p_spu
op	60:10	0:0	2	=
call	60:12	60:45	2	decoder_NewSubpictureText
arg	60:39	60:45	3	p_dec
water	60:39	0:0	4	p_dec
water	60:46	0:0	2	;
if	61:4	66:4	2	(! p_spu)
cond	61:8	61:9	3	! p_spu
op	61:8	0:0	4	!
water	61:9	0:0	4	p_spu
stmts	62:4	66:4	3	
water	62:4	0:0	4	{
call	63:8	63:27	4	free
arg	63:14	63:27	5	psz_subtitle
water	63:14	0:0	6	psz_subtitle
water	63:28	0:0	4	;
call	64:8	64:31	4	SegmentFree
arg	64:21	64:31	5	p_segment
water	64:21	0:0	6	p_segment
water	64:32	0:0	4	;
return	65:8	65:19	4	NULL
water	65:15	0:0	5	NULL
water	66:4	0:0	4	}
decl	67:4	67:62	2	subpicture_updater_sys_t	*p_spu_sys
op	67:40	0:0	2	=
water	67:42	0:0	2	p_spu
op	67:47	0:0	2	->
water	67:49	0:0	2	updater
op	67:56	0:0	2	.
water	67:57	0:0	2	p_sys
while	69:4	120:4	2	(( size_t ) (p_buf - p_block -> p_buffer ) + 8 < p_block -> i_buffer)
cond	69:11	69:62	3	( size_t ) (p_buf - p_block -> p_buffer ) + 8 < p_block -> i_buffer
call	69:11	69:45	4	(size_t)
arg	69:20	69:45	5	p_buf-p_block->p_buffer
water	69:20	0:0	6	p_buf
op	69:26	0:0	6	-
water	69:28	0:0	6	p_block
op	69:35	0:0	6	->
water	69:37	0:0	6	p_buffer
op	69:47	0:0	4	+
water	69:49	0:0	4	8
op	69:51	0:0	4	<
water	69:53	0:0	4	p_block
op	69:60	0:0	4	->
water	69:62	0:0	4	i_buffer
stmts	70:4	120:4	3	
water	70:4	0:0	4	{
decl	71:8	71:46	4	uint32_t	i_atomsize
op	71:28	0:0	4	=
call	71:30	71:45	5	GetDWBE
arg	71:39	71:45	6	p_buf
water	71:39	0:0	7	p_buf
decl	72:8	72:81	4	vlc_fourcc_t	i_atomtype
op	72:32	0:0	4	=
call	72:34	72:80	5	VLC_FOURCC
arg	72:45	72:53	6	p_buf[4]
water	72:45	0:0	7	p_buf
op	72:50	0:0	7	[
water	72:51	0:0	7	4
op	72:52	0:0	7	]
arg	72:54	72:62	6	p_buf[5]
water	72:54	0:0	7	p_buf
op	72:59	0:0	7	[
water	72:60	0:0	7	5
op	72:61	0:0	7	]
arg	72:63	72:71	6	p_buf[6]
water	72:63	0:0	7	p_buf
op	72:68	0:0	7	[
water	72:69	0:0	7	6
op	72:70	0:0	7	]
arg	72:72	72:80	6	p_buf[7]
water	72:72	0:0	7	p_buf
op	72:77	0:0	7	[
water	72:78	0:0	7	7
op	72:79	0:0	7	]
water	73:8	0:0	4	p_buf
op	73:14	0:0	4	+=
water	73:17	0:0	4	8
water	73:18	0:0	4	;
switch	74:8	118:8	4	(i_atomtype)
cond	74:16	74:16	5	i_atomtype
water	74:16	0:0	6	i_atomtype
stmts	75:8	118:8	5	
water	75:8	0:0	6	{
water	76:8	0:0	6	case
call	76:13	76:39	6	VLC_FOURCC
arg	76:24	76:27	7	's'
water	76:24	0:0	8	's'
arg	76:28	76:31	7	't'
water	76:28	0:0	8	't'
arg	76:32	76:35	7	'y'
water	76:32	0:0	8	'y'
arg	76:36	76:39	7	'l'
water	76:36	0:0	8	'l'
water	76:40	0:0	6	:
water	77:8	0:0	6	{
water	78:12	0:0	6	if
water	78:15	0:0	6	(
call	78:17	78:51	6	(size_t)
arg	78:26	78:51	7	p_buf-p_block->p_buffer
water	78:26	0:0	8	p_buf
op	78:32	0:0	8	-
water	78:34	0:0	8	p_block
op	78:41	0:0	8	->
water	78:43	0:0	8	p_buffer
op	78:53	0:0	6	<
water	78:55	0:0	6	14
water	78:58	0:0	6	)
water	78:60	0:0	6	break
water	78:65	0:0	6	;
water	79:12	0:0	6	uint16_t
water	79:21	0:0	6	i_nbrecords
op	79:33	0:0	6	=
call	79:35	79:47	6	GetWBE
arg	79:42	79:47	7	p_buf
water	79:42	0:0	8	p_buf
water	79:48	0:0	6	;
water	80:12	0:0	6	uint16_t
water	80:21	0:0	6	i_cur_record
op	80:34	0:0	6	=
water	80:36	0:0	6	0
water	80:37	0:0	6	;
water	81:12	0:0	6	p_buf
op	81:18	0:0	6	+=
water	81:21	0:0	6	2
water	81:22	0:0	6	;
water	82:12	0:0	6	while
water	82:17	0:0	6	(
water	82:19	0:0	6	i_cur_record
op	82:31	0:0	6	++
op	82:34	0:0	6	<
water	82:36	0:0	6	i_nbrecords
water	82:48	0:0	6	)
water	83:12	0:0	6	{
water	84:16	0:0	6	if
water	84:19	0:0	6	(
call	84:21	84:55	6	(size_t)
arg	84:30	84:55	7	p_buf-p_block->p_buffer
water	84:30	0:0	8	p_buf
op	84:36	0:0	8	-
water	84:38	0:0	8	p_block
op	84:45	0:0	8	->
water	84:47	0:0	8	p_buffer
op	84:57	0:0	6	<
water	84:59	0:0	6	12
water	84:62	0:0	6	)
water	84:64	0:0	6	break
water	84:69	0:0	6	;
water	85:16	0:0	6	uint16_t
water	85:25	0:0	6	i_start
op	85:33	0:0	6	=
call	85:35	85:78	6	__MIN
arg	85:42	85:55	7	GetWBE(p_buf)
call	85:42	85:54	8	GetWBE
arg	85:49	85:54	9	p_buf
water	85:49	0:0	10	p_buf
arg	85:57	85:78	7	i_psz_bytelength-1
water	85:57	0:0	8	i_psz_bytelength
op	85:74	0:0	8	-
water	85:76	0:0	8	1
water	85:79	0:0	6	;
water	86:16	0:0	6	uint16_t
water	86:25	0:0	6	i_end
op	86:31	0:0	6	=
call	86:34	86:81	6	__MIN
arg	86:41	86:58	7	GetWBE(p_buf+2)
call	86:41	86:57	8	GetWBE
arg	86:48	86:57	9	p_buf+2
water	86:48	0:0	10	p_buf
op	86:54	0:0	10	+
water	86:56	0:0	10	2
arg	86:60	86:81	7	i_psz_bytelength-1
water	86:60	0:0	8	i_psz_bytelength
op	86:77	0:0	8	-
water	86:79	0:0	8	1
water	86:82	0:0	6	;
water	87:16	0:0	6	segment_style_t
water	87:32	0:0	6	style
water	87:37	0:0	6	;
water	88:16	0:0	6	style
op	88:21	0:0	6	.
water	88:22	0:0	6	i_flags
op	88:30	0:0	6	=
call	88:32	88:55	6	ConvertFlags
arg	88:46	88:55	7	p_buf[6]
water	88:46	0:0	8	p_buf
op	88:51	0:0	8	[
water	88:52	0:0	8	6
op	88:53	0:0	8	]
water	88:56	0:0	6	;
water	89:16	0:0	6	style
op	89:21	0:0	6	.
water	89:22	0:0	6	i_fontsize
op	89:33	0:0	6	=
water	89:35	0:0	6	p_buf
op	89:40	0:0	6	[
water	89:41	0:0	6	7
op	89:42	0:0	6	]
water	89:43	0:0	6	;
water	90:16	0:0	6	style
op	90:21	0:0	6	.
water	90:22	0:0	6	i_color
op	90:30	0:0	6	=
call	90:32	90:47	6	GetDWBE
arg	90:40	90:47	7	p_buf+8
water	90:40	0:0	8	p_buf
op	90:45	0:0	8	+
water	90:46	0:0	8	8
op	90:49	0:0	6	>>
water	90:52	0:0	6	8
water	90:53	0:0	6	;
water	91:16	0:0	6	style
op	91:21	0:0	6	.
water	91:22	0:0	6	i_color
op	91:30	0:0	6	|=
water	91:33	0:0	6	(
call	91:34	91:49	6	GetDWBE
arg	91:42	91:49	7	p_buf+8
water	91:42	0:0	8	p_buf
op	91:47	0:0	8	+
water	91:48	0:0	8	8
op	91:51	0:0	6	&
water	91:53	0:0	6	0
water	91:54	0:0	6	xFF
water	91:57	0:0	6	)
op	91:59	0:0	6	<<
water	91:62	0:0	6	24
water	91:64	0:0	6	;
call	92:16	92:70	6	ApplySegmentStyle
arg	92:35	92:45	7	&p_segment
op	92:35	0:0	8	&
water	92:36	0:0	8	p_segment
arg	92:47	92:54	7	i_start
water	92:47	0:0	8	i_start
arg	92:56	92:61	7	i_end
water	92:56	0:0	8	i_end
arg	92:63	92:70	7	&style
op	92:63	0:0	8	&
water	92:64	0:0	8	style
water	92:71	0:0	6	;
water	93:16	0:0	6	if
water	93:19	0:0	6	(
water	93:21	0:0	6	i_nbrecords
op	93:33	0:0	6	==
water	93:36	0:0	6	1
water	93:38	0:0	6	)
water	94:16	0:0	6	{
water	95:20	0:0	6	if
water	95:23	0:0	6	(
water	95:25	0:0	6	p_buf
op	95:30	0:0	6	[
water	95:31	0:0	6	6
op	95:32	0:0	6	]
water	95:34	0:0	6	)
water	96:20	0:0	6	{
water	97:24	0:0	6	p_spu_sys
op	97:33	0:0	6	->
water	97:35	0:0	6	style_flags
op	97:46	0:0	6	.
water	97:47	0:0	6	i_value
op	97:55	0:0	6	=
call	97:57	97:80	6	ConvertFlags
arg	97:71	97:80	7	p_buf[6]
water	97:71	0:0	8	p_buf
op	97:76	0:0	8	[
water	97:77	0:0	8	6
op	97:78	0:0	8	]
water	97:81	0:0	6	;
water	98:24	0:0	6	p_spu_sys
op	98:33	0:0	6	->
water	98:35	0:0	6	style_flags
op	98:46	0:0	6	.
water	98:47	0:0	6	b_set
op	98:53	0:0	6	=
water	98:55	0:0	6	true
water	98:59	0:0	6	;
water	99:20	0:0	6	}
water	100:20	0:0	6	p_spu_sys
op	100:29	0:0	6	->
water	100:31	0:0	6	i_font_height_abs_to_src
op	100:56	0:0	6	=
water	100:58	0:0	6	p_buf
op	100:63	0:0	6	[
water	100:64	0:0	6	7
op	100:65	0:0	6	]
water	100:66	0:0	6	;
water	101:20	0:0	6	p_spu_sys
op	101:29	0:0	6	->
water	101:31	0:0	6	font_color
op	101:41	0:0	6	.
water	101:42	0:0	6	i_value
op	101:50	0:0	6	=
call	101:52	101:67	6	GetDWBE
arg	101:60	101:67	7	p_buf+8
water	101:60	0:0	8	p_buf
op	101:65	0:0	8	+
water	101:66	0:0	8	8
op	101:69	0:0	6	>>
water	101:72	0:0	6	8
water	101:73	0:0	6	;
water	102:20	0:0	6	p_spu_sys
op	102:29	0:0	6	->
water	102:31	0:0	6	font_color
op	102:41	0:0	6	.
water	102:42	0:0	6	i_value
op	102:50	0:0	6	|=
water	102:53	0:0	6	(
call	102:54	102:69	6	GetDWBE
arg	102:62	102:69	7	p_buf+8
water	102:62	0:0	8	p_buf
op	102:67	0:0	8	+
water	102:68	0:0	8	8
op	102:71	0:0	6	&
water	102:73	0:0	6	0
water	102:74	0:0	6	xFF
water	102:77	0:0	6	)
op	102:79	0:0	6	<<
water	102:82	0:0	6	24
water	102:84	0:0	6	;
water	103:20	0:0	6	p_spu_sys
op	103:29	0:0	6	->
water	103:31	0:0	6	font_color
op	103:41	0:0	6	.
water	103:42	0:0	6	b_set
op	103:48	0:0	6	=
water	103:50	0:0	6	true
water	103:54	0:0	6	;
water	104:16	0:0	6	}
water	105:16	0:0	6	p_buf
op	105:22	0:0	6	+=
water	105:25	0:0	6	12
water	105:27	0:0	6	;
water	106:12	0:0	6	}
water	107:8	0:0	6	}
water	107:12	0:0	6	break
water	107:17	0:0	6	;
water	108:8	0:0	6	case
call	108:13	108:39	6	VLC_FOURCC
arg	108:24	108:27	7	'd'
water	108:24	0:0	8	'd'
arg	108:28	108:31	7	'r'
water	108:28	0:0	8	'r'
arg	108:32	108:35	7	'p'
water	108:32	0:0	8	'p'
arg	108:36	108:39	7	'o'
water	108:36	0:0	8	'o'
water	108:40	0:0	6	:
water	109:12	0:0	6	if
water	109:15	0:0	6	(
call	109:17	109:51	6	(size_t)
arg	109:26	109:51	7	p_buf-p_block->p_buffer
water	109:26	0:0	8	p_buf
op	109:32	0:0	8	-
water	109:34	0:0	8	p_block
op	109:41	0:0	8	->
water	109:43	0:0	8	p_buffer
op	109:53	0:0	6	<
water	109:55	0:0	6	4
water	109:57	0:0	6	)
water	109:59	0:0	6	break
water	109:64	0:0	6	;
water	110:12	0:0	6	p_spu_sys
op	110:21	0:0	6	->
water	110:23	0:0	6	i_drop_shadow
op	110:37	0:0	6	=
call	110:39	110:77	6	__MAX
arg	110:46	110:59	7	GetWBE(p_buf)
call	110:46	110:58	8	GetWBE
arg	110:53	110:58	9	p_buf
water	110:53	0:0	10	p_buf
arg	110:61	110:77	7	GetWBE(p_buf+2)
call	110:61	110:75	8	GetWBE
arg	110:68	110:75	9	p_buf+2
water	110:68	0:0	10	p_buf
op	110:73	0:0	10	+
water	110:74	0:0	10	2
water	110:78	0:0	6	;
break	111:12	111:17	6	
water	112:8	0:0	6	case
call	112:13	112:39	6	VLC_FOURCC
arg	112:24	112:27	7	'd'
water	112:24	0:0	8	'd'
arg	112:28	112:31	7	'r'
water	112:28	0:0	8	'r'
arg	112:32	112:35	7	'p'
water	112:32	0:0	8	'p'
arg	112:36	112:39	7	't'
water	112:36	0:0	8	't'
water	112:40	0:0	6	:
water	113:12	0:0	6	if
water	113:15	0:0	6	(
call	113:17	113:51	6	(size_t)
arg	113:26	113:51	7	p_buf-p_block->p_buffer
water	113:26	0:0	8	p_buf
op	113:32	0:0	8	-
water	113:34	0:0	8	p_block
op	113:41	0:0	8	->
water	113:43	0:0	8	p_buffer
op	113:53	0:0	6	<
water	113:55	0:0	6	2
water	113:57	0:0	6	)
water	113:59	0:0	6	break
water	113:64	0:0	6	;
water	114:12	0:0	6	p_spu_sys
op	114:21	0:0	6	->
water	114:23	0:0	6	i_drop_shadow_alpha
op	114:43	0:0	6	=
call	114:45	114:57	6	GetWBE
arg	114:52	114:57	7	p_buf
water	114:52	0:0	8	p_buf
water	114:58	0:0	6	;
break	115:12	115:17	6	
label	116:8	116:15	6	default :
break	117:12	117:17	6	
water	118:8	0:0	6	}
water	119:8	0:0	4	p_buf
op	119:14	0:0	4	+=
water	119:17	0:0	4	i_atomsize
water	119:27	0:0	4	;
water	120:4	0:0	4	}
water	121:4	0:0	2	p_spu
op	121:9	0:0	2	->
water	121:11	0:0	2	i_start
op	121:22	0:0	2	=
water	121:24	0:0	2	p_block
op	121:31	0:0	2	->
water	121:33	0:0	2	i_pts
water	121:38	0:0	2	;
water	122:4	0:0	2	p_spu
op	122:9	0:0	2	->
water	122:11	0:0	2	i_stop
op	122:22	0:0	2	=
water	122:24	0:0	2	p_block
op	122:31	0:0	2	->
water	122:33	0:0	2	i_pts
op	122:39	0:0	2	+
water	122:41	0:0	2	p_block
op	122:48	0:0	2	->
water	122:50	0:0	2	i_length
water	122:58	0:0	2	;
water	123:4	0:0	2	p_spu
op	123:9	0:0	2	->
water	123:11	0:0	2	b_ephemer
op	123:22	0:0	2	=
water	123:24	0:0	2	(
water	123:25	0:0	2	p_block
op	123:32	0:0	2	->
water	123:34	0:0	2	i_length
op	123:43	0:0	2	==
water	123:46	0:0	2	0
water	123:47	0:0	2	)
water	123:48	0:0	2	;
water	124:4	0:0	2	p_spu
op	124:9	0:0	2	->
water	124:11	0:0	2	b_absolute
op	124:22	0:0	2	=
water	124:24	0:0	2	false
water	124:29	0:0	2	;
water	125:4	0:0	2	p_spu_sys
op	125:13	0:0	2	->
water	125:15	0:0	2	align
op	125:21	0:0	2	=
water	125:23	0:0	2	SUBPICTURE_ALIGN_BOTTOM
water	125:46	0:0	2	;
water	126:4	0:0	2	p_spu_sys
op	126:13	0:0	2	->
water	126:15	0:0	2	text
op	126:21	0:0	2	=
water	126:23	0:0	2	psz_subtitle
water	126:35	0:0	2	;
water	127:4	0:0	2	p_spu_sys
op	127:13	0:0	2	->
water	127:15	0:0	2	p_htmlsegments
op	127:30	0:0	2	=
water	127:32	0:0	2	p_segment
water	127:41	0:0	2	;
call	128:4	128:27	2	block_Release
arg	128:19	128:27	3	p_block
water	128:19	0:0	4	p_block
water	128:28	0:0	2	;
return	129:4	129:16	2	p_spu
water	129:11	0:0	3	p_spu
