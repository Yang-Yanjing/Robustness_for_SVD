func	2:0	198:0	0	static int	Open
params	2:16	0:0	1	
param	2:17	2:34	2	vlc_object_t *	obj
stmnts	0:0	197:23	1	
decl	4:4	4:46	2	vout_display_t	*vd
op	4:23	0:0	2	=
water	4:25	0:0	2	(
water	4:26	0:0	2	vout_display_t
op	4:41	0:0	2	*
water	4:42	0:0	2	)
water	4:43	0:0	2	obj
decl	5:4	5:52	2	vout_display_sys_t	*sys
op	5:28	0:0	2	=
call	5:30	5:51	3	malloc
arg	5:38	5:51	4	sizeof(*sys)
op	5:38	0:0	5	sizeof
water	5:45	0:0	5	(
op	5:46	0:0	5	*
water	5:47	0:0	5	sys
water	5:50	0:0	5	)
if	6:4	7:25	2	(unlikely (sys == NULL ))
cond	6:8	6:28	3	unlikely (sys == NULL )
call	6:8	6:28	4	unlikely
arg	6:17	6:28	5	sys==NULL
water	6:17	0:0	6	sys
op	6:21	0:0	6	==
water	6:24	0:0	6	NULL
stmts	7:8	7:25	3	
return	7:8	7:25	4	VLC_ENOMEM
water	7:15	0:0	5	VLC_ENOMEM
water	8:4	0:0	2	vd
op	8:6	0:0	2	->
water	8:8	0:0	2	sys
op	8:12	0:0	2	=
water	8:14	0:0	2	sys
water	8:17	0:0	2	;
water	9:4	0:0	2	sys
op	9:7	0:0	2	->
water	9:9	0:0	2	pool
op	9:14	0:0	2	=
water	9:16	0:0	2	NULL
water	9:20	0:0	2	;
decl	11:4	11:26	2	xcb_connection_t	*conn
decl	12:4	12:27	2	const xcb_screen_t	*scr
decl	13:4	13:26	2	uint16_t	width
water	13:18	0:0	2	,
decl	13:4	13:26	2	uint16_t	height
water	14:4	0:0	2	sys
op	14:7	0:0	2	->
water	14:9	0:0	2	embed
op	14:15	0:0	2	=
call	14:17	14:68	2	XCB_parent_Create
arg	14:36	14:38	3	vd
water	14:36	0:0	4	vd
arg	14:40	14:45	3	&conn
op	14:40	0:0	4	&
water	14:41	0:0	4	conn
arg	14:47	14:51	3	&scr
op	14:47	0:0	4	&
water	14:48	0:0	4	scr
arg	14:53	14:59	3	&width
op	14:53	0:0	4	&
water	14:54	0:0	4	width
arg	14:61	14:68	3	&height
op	14:61	0:0	4	&
water	14:62	0:0	4	height
water	14:69	0:0	2	;
if	15:4	19:4	2	(sys -> embed == NULL)
cond	15:8	15:22	3	sys -> embed == NULL
water	15:8	0:0	4	sys
op	15:11	0:0	4	->
water	15:13	0:0	4	embed
op	15:19	0:0	4	==
water	15:22	0:0	4	NULL
stmts	16:4	19:4	3	
water	16:4	0:0	4	{
call	17:8	17:17	4	free
arg	17:14	17:17	5	sys
water	17:14	0:0	6	sys
water	17:18	0:0	4	;
return	18:8	18:27	4	VLC_EGENERIC
water	18:15	0:0	5	VLC_EGENERIC
water	19:4	0:0	4	}
water	20:4	0:0	2	sys
op	20:7	0:0	2	->
water	20:9	0:0	2	conn
op	20:14	0:0	2	=
water	20:16	0:0	2	conn
water	20:20	0:0	2	;
decl	21:4	21:51	2	const xcb_setup_t	*setup
op	21:29	0:0	2	=
call	21:31	21:50	3	xcb_get_setup
arg	21:46	21:50	4	conn
water	21:46	0:0	5	conn
decl	23:4	23:26	2	video_format_t	fmt_pic
decl	24:4	24:26	2	xcb_visualid_t	vid
op	24:23	0:0	2	=
water	24:25	0:0	2	0
water	25:4	0:0	2	sys
op	25:7	0:0	2	->
water	25:9	0:0	2	depth
op	25:15	0:0	2	=
water	25:17	0:0	2	0
water	25:18	0:0	2	;
for	26:4	114:4	2	( const xcb_format_t * fmt =xcb_setup_pixmap_formats (setup ) ,* end = fmt +xcb_setup_pixmap_formats_length (setup ) ;fmt < end;fmt ++)
forinit	0:0	27:65	3	 const xcb_format_t * fmt =xcb_setup_pixmap_formats (setup ) ,* end = fmt +xcb_setup_pixmap_formats_length (setup ) ;
decl	26:9	27:65	4	const xcb_format_t	*fmt
op	26:33	0:0	4	=
call	26:35	26:66	5	xcb_setup_pixmap_formats
arg	26:61	26:66	6	setup
water	26:61	0:0	7	setup
water	26:67	0:0	4	,
decl	26:9	27:65	4	const xcb_format_t	*end
op	27:18	0:0	4	=
water	27:20	0:0	4	fmt
op	27:24	0:0	4	+
call	27:26	27:64	5	xcb_setup_pixmap_formats_length
arg	27:59	27:64	6	setup
water	27:59	0:0	7	setup
cond	28:9	28:15	3	fmt < end
water	28:9	0:0	4	fmt
op	28:13	0:0	4	<
water	28:15	0:0	4	end
forexpr	29:9	29:12	3	fmt ++
water	29:9	0:0	4	fmt
op	29:12	0:0	4	++
stmts	30:4	114:4	3	
water	30:4	0:0	4	{
if	31:8	32:20	4	(fmt -> depth <= sys -> depth)
cond	31:12	31:31	5	fmt -> depth <= sys -> depth
water	31:12	0:0	6	fmt
op	31:15	0:0	6	->
water	31:17	0:0	6	depth
op	31:23	0:0	6	<=
water	31:26	0:0	6	sys
op	31:29	0:0	6	->
water	31:31	0:0	6	depth
stmts	32:12	32:20	5	
continue	32:12	32:20	6	
call	33:8	33:53	4	video_format_ApplyRotation
arg	33:35	33:43	5	&fmt_pic
op	33:35	0:0	6	&
water	33:36	0:0	6	fmt_pic
arg	33:45	33:53	5	&vd->fmt
op	33:45	0:0	6	&
water	33:46	0:0	6	vd
op	33:48	0:0	6	->
water	33:50	0:0	6	fmt
water	33:54	0:0	4	;
switch	35:8	67:8	4	(fmt -> depth)
cond	35:16	35:21	5	fmt -> depth
water	35:16	0:0	6	fmt
op	35:19	0:0	6	->
water	35:21	0:0	6	depth
stmts	36:8	67:8	5	
water	36:8	0:0	6	{
label	37:10	37:17	6	case 32 :
if	38:12	39:24	6	(fmt -> bits_per_pixel != 32)
cond	38:16	38:39	7	fmt -> bits_per_pixel != 32
water	38:16	0:0	8	fmt
op	38:19	0:0	8	->
water	38:21	0:0	8	bits_per_pixel
op	38:36	0:0	8	!=
water	38:39	0:0	8	32
stmts	39:16	39:24	7	
continue	39:16	39:24	8	
water	40:12	0:0	6	fmt_pic
op	40:19	0:0	6	.
water	40:20	0:0	6	i_chroma
op	40:29	0:0	6	=
water	40:31	0:0	6	VLC_CODEC_ARGB
water	40:45	0:0	6	;
break	41:12	41:17	6	
label	42:10	42:17	6	case 24 :
if	43:12	44:50	6	(fmt -> bits_per_pixel == 32)
cond	43:16	43:39	7	fmt -> bits_per_pixel == 32
water	43:16	0:0	8	fmt
op	43:19	0:0	8	->
water	43:21	0:0	8	bits_per_pixel
op	43:36	0:0	8	==
water	43:39	0:0	8	32
stmts	44:16	44:50	7	
water	44:16	0:0	8	fmt_pic
op	44:23	0:0	8	.
water	44:24	0:0	8	i_chroma
op	44:33	0:0	8	=
water	44:35	0:0	8	VLC_CODEC_RGB32
water	44:50	0:0	8	;
else	45:12	46:50	6
stmts	45:17	46:50	7	
if	45:17	46:50	8	(fmt -> bits_per_pixel == 24)
cond	45:21	45:44	9	fmt -> bits_per_pixel == 24
water	45:21	0:0	10	fmt
op	45:24	0:0	10	->
water	45:26	0:0	10	bits_per_pixel
op	45:41	0:0	10	==
water	45:44	0:0	10	24
stmts	46:16	46:50	9	
water	46:16	0:0	10	fmt_pic
op	46:23	0:0	10	.
water	46:24	0:0	10	i_chroma
op	46:33	0:0	10	=
water	46:35	0:0	10	VLC_CODEC_RGB24
water	46:50	0:0	10	;
else	47:12	48:24	6
stmts	48:16	48:24	7	
continue	48:16	48:24	8	
break	49:12	49:17	6	
label	50:10	50:17	6	case 16 :
if	51:12	52:24	6	(fmt -> bits_per_pixel != 16)
cond	51:16	51:39	7	fmt -> bits_per_pixel != 16
water	51:16	0:0	8	fmt
op	51:19	0:0	8	->
water	51:21	0:0	8	bits_per_pixel
op	51:36	0:0	8	!=
water	51:39	0:0	8	16
stmts	52:16	52:24	7	
continue	52:16	52:24	8	
water	53:12	0:0	6	fmt_pic
op	53:19	0:0	6	.
water	53:20	0:0	6	i_chroma
op	53:29	0:0	6	=
water	53:31	0:0	6	VLC_CODEC_RGB16
water	53:46	0:0	6	;
break	54:12	54:17	6	
label	55:10	55:17	6	case 15 :
if	56:12	57:24	6	(fmt -> bits_per_pixel != 16)
cond	56:16	56:39	7	fmt -> bits_per_pixel != 16
water	56:16	0:0	8	fmt
op	56:19	0:0	8	->
water	56:21	0:0	8	bits_per_pixel
op	56:36	0:0	8	!=
water	56:39	0:0	8	16
stmts	57:16	57:24	7	
continue	57:16	57:24	8	
water	58:12	0:0	6	fmt_pic
op	58:19	0:0	6	.
water	58:20	0:0	6	i_chroma
op	58:29	0:0	6	=
water	58:31	0:0	6	VLC_CODEC_RGB15
water	58:46	0:0	6	;
break	59:12	59:17	6	
label	60:10	60:16	6	case 8 :
if	61:12	62:24	6	(fmt -> bits_per_pixel != 8)
cond	61:16	61:39	7	fmt -> bits_per_pixel != 8
water	61:16	0:0	8	fmt
op	61:19	0:0	8	->
water	61:21	0:0	8	bits_per_pixel
op	61:36	0:0	8	!=
water	61:39	0:0	8	8
stmts	62:16	62:24	7	
continue	62:16	62:24	8	
water	63:12	0:0	6	fmt_pic
op	63:19	0:0	6	.
water	63:20	0:0	6	i_chroma
op	63:29	0:0	6	=
water	63:31	0:0	6	VLC_CODEC_RGB8
water	63:45	0:0	6	;
break	64:12	64:17	6	
label	65:10	65:17	6	default :
continue	66:12	66:20	6	
water	67:8	0:0	6	}
if	70:8	71:20	4	(fmt -> bits_per_pixel == 16 && setup -> image_byte_order != ORDER)
cond	70:12	70:68	5	fmt -> bits_per_pixel == 16 && setup -> image_byte_order != ORDER
water	70:12	0:0	6	fmt
op	70:15	0:0	6	->
water	70:17	0:0	6	bits_per_pixel
op	70:32	0:0	6	==
water	70:35	0:0	6	16
op	70:38	0:0	6	&&
water	70:41	0:0	6	setup
op	70:46	0:0	6	->
water	70:48	0:0	6	image_byte_order
op	70:65	0:0	6	!=
water	70:68	0:0	6	ORDER
stmts	71:12	71:20	5	
continue	71:12	71:20	6	
call	73:8	73:39	4	assert
arg	73:16	73:39	5	fmt->bits_per_pixel>0
water	73:16	0:0	6	fmt
op	73:19	0:0	6	->
water	73:21	0:0	6	bits_per_pixel
op	73:36	0:0	6	>
water	73:38	0:0	6	0
water	73:40	0:0	4	;
if	74:8	75:20	4	(unlikely (fmt -> scanline_pad % fmt -> bits_per_pixel ))
cond	74:12	74:60	5	unlikely (fmt -> scanline_pad % fmt -> bits_per_pixel )
call	74:12	74:60	6	unlikely
arg	74:21	74:60	7	fmt->scanline_pad%fmt->bits_per_pixel
water	74:21	0:0	8	fmt
op	74:24	0:0	8	->
water	74:26	0:0	8	scanline_pad
op	74:39	0:0	8	%
water	74:41	0:0	8	fmt
op	74:44	0:0	8	->
water	74:46	0:0	8	bits_per_pixel
stmts	75:12	75:20	5	
continue	75:12	75:20	6	
decl	77:8	77:58	4	const xcb_depth_t	*d
op	77:29	0:0	4	=
call	77:31	77:57	5	FindDepth
arg	77:42	77:45	6	scr
water	77:42	0:0	7	scr
arg	77:47	77:57	6	fmt->depth
water	77:47	0:0	7	fmt
op	77:50	0:0	7	->
water	77:52	0:0	7	depth
if	78:8	79:20	4	(d == NULL)
cond	78:12	78:17	5	d == NULL
water	78:12	0:0	6	d
op	78:14	0:0	6	==
water	78:17	0:0	6	NULL
stmts	79:12	79:20	5	
continue	79:12	79:20	6	
decl	81:8	81:58	4	const xcb_visualtype_t	*vt
op	81:35	0:0	4	=
call	81:37	81:57	5	xcb_depth_visuals
arg	81:56	81:57	6	d
water	81:56	0:0	7	d
for	83:8	100:8	4	( int i =xcb_depth_visuals_length (d ) ;i > 0;i --)
forinit	0:0	83:49	5	 int i =xcb_depth_visuals_length (d ) ;
decl	83:13	83:49	6	int	i
op	83:19	0:0	6	=
call	83:21	83:48	7	xcb_depth_visuals_length
arg	83:47	83:48	8	d
water	83:47	0:0	9	d
cond	83:51	83:55	5	i > 0
water	83:51	0:0	6	i
op	83:53	0:0	6	>
water	83:55	0:0	6	0
forexpr	83:58	83:59	5	i --
water	83:58	0:0	6	i
op	83:59	0:0	6	--
stmts	84:8	100:8	5	
water	84:8	0:0	6	{
if	85:12	98:12	6	(vt -> _class == XCB_VISUAL_CLASS_TRUE_COLOR)
cond	85:16	85:30	7	vt -> _class == XCB_VISUAL_CLASS_TRUE_COLOR
water	85:16	0:0	8	vt
op	85:18	0:0	8	->
water	85:20	0:0	8	_class
op	85:27	0:0	8	==
water	85:30	0:0	8	XCB_VISUAL_CLASS_TRUE_COLOR
stmts	86:12	98:12	7	
water	86:12	0:0	8	{
water	87:16	0:0	8	fmt_pic
op	87:23	0:0	8	.
water	87:24	0:0	8	i_rmask
op	87:32	0:0	8	=
water	87:34	0:0	8	vt
op	87:36	0:0	8	->
water	87:38	0:0	8	red_mask
water	87:46	0:0	8	;
water	88:16	0:0	8	fmt_pic
op	88:23	0:0	8	.
water	88:24	0:0	8	i_gmask
op	88:32	0:0	8	=
water	88:34	0:0	8	vt
op	88:36	0:0	8	->
water	88:38	0:0	8	green_mask
water	88:48	0:0	8	;
water	89:16	0:0	8	fmt_pic
op	89:23	0:0	8	.
water	89:24	0:0	8	i_bmask
op	89:32	0:0	8	=
water	89:34	0:0	8	vt
op	89:36	0:0	8	->
water	89:38	0:0	8	blue_mask
water	89:47	0:0	8	;
label	90:12	90:24	8	found_visual :
water	91:16	0:0	8	vid
op	91:20	0:0	8	=
water	91:22	0:0	8	vt
op	91:24	0:0	8	->
water	91:26	0:0	8	visual_id
water	91:35	0:0	8	;
call	92:16	92:65	8	msg_Dbg
arg	92:25	92:27	9	vd
water	92:25	0:0	10	vd
arg	92:29	92:60	9	"using X11 visual ID 0x%"PRIx32
water	92:29	0:0	10	"using X11 visual ID 0x%"
water	92:54	0:0	10	PRIx32
arg	92:62	92:65	9	vid
water	92:62	0:0	10	vid
water	92:66	0:0	8	;
water	93:16	0:0	8	sys
op	93:19	0:0	8	->
water	93:21	0:0	8	depth
op	93:27	0:0	8	=
water	93:29	0:0	8	fmt
op	93:32	0:0	8	->
water	93:34	0:0	8	depth
water	93:39	0:0	8	;
call	94:16	94:63	8	msg_Dbg
arg	94:25	94:27	9	vd
water	94:25	0:0	10	vd
arg	94:29	94:51	9	" %"PRIu8" bits depth"
water	94:29	0:0	10	" %"
water	94:33	0:0	10	PRIu8
water	94:38	0:0	10	" bits depth"
arg	94:53	94:63	9	sys->depth
water	94:53	0:0	10	sys
op	94:56	0:0	10	->
water	94:58	0:0	10	depth
water	94:64	0:0	8	;
call	95:16	95:76	8	msg_Dbg
arg	95:25	95:27	9	vd
water	95:25	0:0	10	vd
arg	95:29	95:55	9	" %"PRIu8" bits per pixel"
water	95:29	0:0	10	" %"
water	95:33	0:0	10	PRIu8
water	95:38	0:0	10	" bits per pixel"
arg	95:57	95:76	9	fmt->bits_per_pixel
water	95:57	0:0	10	fmt
op	95:60	0:0	10	->
water	95:62	0:0	10	bits_per_pixel
water	95:77	0:0	8	;
call	96:16	96:73	8	msg_Dbg
arg	96:25	96:27	9	vd
water	96:25	0:0	10	vd
arg	96:29	96:54	9	" %"PRIu8" bits line pad"
water	96:29	0:0	10	" %"
water	96:33	0:0	10	PRIu8
water	96:38	0:0	10	" bits line pad"
arg	96:56	96:73	9	fmt->scanline_pad
water	96:56	0:0	10	fmt
op	96:59	0:0	10	->
water	96:61	0:0	10	scanline_pad
water	96:74	0:0	8	;
goto	97:16	97:33	8	found_format
water	97:21	0:0	9	found_format
water	98:12	0:0	8	}
water	99:12	0:0	6	vt
op	99:14	0:0	6	++
water	99:16	0:0	6	;
water	100:8	0:0	6	}
if	102:8	103:20	4	(fmt -> depth != 8)
cond	102:12	102:26	5	fmt -> depth != 8
water	102:12	0:0	6	fmt
op	102:15	0:0	6	->
water	102:17	0:0	6	depth
op	102:23	0:0	6	!=
water	102:26	0:0	6	8
stmts	103:12	103:20	5	
continue	103:12	103:20	6	
water	104:8	0:0	4	vt
op	104:11	0:0	4	=
call	104:13	104:33	4	xcb_depth_visuals
arg	104:32	104:33	5	d
water	104:32	0:0	6	d
water	104:34	0:0	4	;
for	105:8	113:8	4	( int i =xcb_depth_visuals_length (d ) ;i > 0 && ! vid;i --)
forinit	0:0	105:49	5	 int i =xcb_depth_visuals_length (d ) ;
decl	105:13	105:49	6	int	i
op	105:19	0:0	6	=
call	105:21	105:48	7	xcb_depth_visuals_length
arg	105:47	105:48	8	d
water	105:47	0:0	9	d
cond	105:51	105:61	5	i > 0 && ! vid
water	105:51	0:0	6	i
op	105:53	0:0	6	>
water	105:55	0:0	6	0
op	105:57	0:0	6	&&
op	105:60	0:0	6	!
water	105:61	0:0	6	vid
forexpr	105:66	105:67	5	i --
water	105:66	0:0	6	i
op	105:67	0:0	6	--
stmts	106:8	113:8	5	
water	106:8	0:0	6	{
if	107:12	111:12	6	(vt -> _class == XCB_VISUAL_CLASS_STATIC_GRAY)
cond	107:16	107:30	7	vt -> _class == XCB_VISUAL_CLASS_STATIC_GRAY
water	107:16	0:0	8	vt
op	107:18	0:0	8	->
water	107:20	0:0	8	_class
op	107:27	0:0	8	==
water	107:30	0:0	8	XCB_VISUAL_CLASS_STATIC_GRAY
stmts	108:12	111:12	7	
water	108:12	0:0	8	{
water	109:16	0:0	8	fmt_pic
op	109:23	0:0	8	.
water	109:24	0:0	8	i_chroma
op	109:33	0:0	8	=
water	109:35	0:0	8	VLC_CODEC_GREY
water	109:49	0:0	8	;
goto	110:16	110:33	8	found_visual
water	110:21	0:0	9	found_visual
water	111:12	0:0	8	}
water	112:12	0:0	6	vt
op	112:14	0:0	6	++
water	112:16	0:0	6	;
water	113:8	0:0	6	}
water	114:4	0:0	4	}
call	115:4	115:54	2	msg_Err
arg	115:13	115:16	3	obj
water	115:13	0:0	4	obj
arg	115:18	115:54	3	"no supported pixel format & visual"
water	115:18	0:0	4	"no supported pixel format & visual"
water	115:55	0:0	2	;
goto	116:4	116:14	2	error
water	116:9	0:0	3	error
label	117:0	117:12	2	found_format :
water	117:13	0:0	2	;
decl	119:4	119:23	2	xcb_colormap_t	cmap
if	120:4	125:4	2	(vid != scr -> root_visual)
cond	120:8	120:20	3	vid != scr -> root_visual
water	120:8	0:0	4	vid
op	120:12	0:0	4	!=
water	120:15	0:0	4	scr
op	120:18	0:0	4	->
water	120:20	0:0	4	root_visual
stmts	121:4	125:4	3	
water	121:4	0:0	4	{
water	122:8	0:0	4	cmap
op	122:13	0:0	4	=
call	122:15	122:36	4	xcb_generate_id
arg	122:32	122:36	5	conn
water	122:32	0:0	6	conn
water	122:37	0:0	4	;
call	123:8	124:49	4	xcb_create_colormap
arg	123:29	123:33	5	conn
water	123:29	0:0	6	conn
arg	123:35	123:58	5	XCB_COLORMAP_ALLOC_NONE
water	123:35	0:0	6	XCB_COLORMAP_ALLOC_NONE
arg	124:29	124:33	5	cmap
water	124:29	0:0	6	cmap
arg	124:35	124:44	5	scr->root
water	124:35	0:0	6	scr
op	124:38	0:0	6	->
water	124:40	0:0	6	root
arg	124:46	124:49	5	vid
water	124:46	0:0	6	vid
water	124:50	0:0	4	;
water	125:4	0:0	4	}
else	126:4	127:36	2
stmts	127:8	127:36	3	
water	127:8	0:0	4	cmap
op	127:13	0:0	4	=
water	127:15	0:0	4	scr
op	127:18	0:0	4	->
water	127:20	0:0	4	default_colormap
water	127:36	0:0	4	;
water	129:4	0:0	2	sys
op	129:7	0:0	2	->
water	129:9	0:0	2	window
op	129:16	0:0	2	=
call	129:18	129:39	2	xcb_generate_id
arg	129:35	129:39	3	conn
water	129:35	0:0	4	conn
water	129:40	0:0	2	;
water	130:4	0:0	2	sys
op	130:7	0:0	2	->
water	130:9	0:0	2	gc
op	130:12	0:0	2	=
call	130:14	130:35	2	xcb_generate_id
arg	130:31	130:35	3	conn
water	130:31	0:0	4	conn
water	130:36	0:0	2	;
decl	131:4	131:48	2	xcb_pixmap_t	pixmap
op	131:24	0:0	2	=
call	131:26	131:47	3	xcb_generate_id
arg	131:43	131:47	4	conn
water	131:43	0:0	5	conn
water	132:4	0:0	2	{
decl	133:8	139:27	2	const uint32_t	mask
op	133:28	0:0	2	=
water	134:12	0:0	2	XCB_CW_BACK_PIXMAP
op	134:31	0:0	2	|
water	135:12	0:0	2	XCB_CW_BACK_PIXEL
op	135:30	0:0	2	|
water	136:12	0:0	2	XCB_CW_BORDER_PIXMAP
op	136:33	0:0	2	|
water	137:12	0:0	2	XCB_CW_BORDER_PIXEL
op	137:32	0:0	2	|
water	138:12	0:0	2	XCB_CW_EVENT_MASK
op	138:30	0:0	2	|
water	139:12	0:0	2	XCB_CW_COLORMAP
decl	140:8	153:9	2	const uint32_t	values[]
op	140:32	0:0	2	=
water	140:34	0:0	2	{
water	142:12	0:0	2	pixmap
water	142:18	0:0	2	,
water	144:12	0:0	2	scr
op	144:15	0:0	2	->
water	144:17	0:0	2	black_pixel
water	144:28	0:0	2	,
water	146:12	0:0	2	pixmap
water	146:18	0:0	2	,
water	148:12	0:0	2	scr
op	148:15	0:0	2	->
water	148:17	0:0	2	black_pixel
water	148:28	0:0	2	,
water	150:12	0:0	2	XCB_EVENT_MASK_VISIBILITY_CHANGE
water	150:44	0:0	2	,
water	152:12	0:0	2	cmap
water	152:16	0:0	2	,
water	153:8	0:0	2	}
decl	154:8	154:27	2	xcb_void_cookie_t	c
call	155:8	155:68	2	xcb_create_pixmap
arg	155:27	155:31	3	conn
water	155:27	0:0	4	conn
arg	155:33	155:43	3	sys->depth
water	155:33	0:0	4	sys
op	155:36	0:0	4	->
water	155:38	0:0	4	depth
arg	155:45	155:51	3	pixmap
water	155:45	0:0	4	pixmap
arg	155:53	155:62	3	scr->root
water	155:53	0:0	4	scr
op	155:56	0:0	4	->
water	155:58	0:0	4	root
arg	155:64	155:65	3	1
water	155:64	0:0	4	1
arg	155:67	155:68	3	1
water	155:67	0:0	4	1
water	155:69	0:0	2	;
water	156:8	0:0	2	c
op	156:10	0:0	2	=
call	156:12	160:56	2	xcb_create_window_checked
arg	156:39	156:43	3	conn
water	156:39	0:0	4	conn
arg	156:45	156:55	3	sys->depth
water	156:45	0:0	4	sys
op	156:48	0:0	4	->
water	156:50	0:0	4	depth
arg	156:57	156:68	3	sys->window
water	156:57	0:0	4	sys
op	156:60	0:0	4	->
water	156:62	0:0	4	window
arg	157:39	157:61	3	sys->embed->handle.xid
water	157:39	0:0	4	sys
op	157:42	0:0	4	->
water	157:44	0:0	4	embed
op	157:49	0:0	4	->
water	157:51	0:0	4	handle
op	157:57	0:0	4	.
water	157:58	0:0	4	xid
arg	157:63	157:64	3	0
water	157:63	0:0	4	0
arg	157:66	157:67	3	0
water	157:66	0:0	4	0
arg	158:39	158:44	3	width
water	158:39	0:0	4	width
arg	158:46	158:52	3	height
water	158:46	0:0	4	height
arg	158:54	158:55	3	0
water	158:54	0:0	4	0
arg	159:39	159:68	3	XCB_WINDOW_CLASS_INPUT_OUTPUT
water	159:39	0:0	4	XCB_WINDOW_CLASS_INPUT_OUTPUT
arg	160:39	160:42	3	vid
water	160:39	0:0	4	vid
arg	160:44	160:48	3	mask
water	160:44	0:0	4	mask
arg	160:50	160:56	3	values
water	160:50	0:0	4	values
water	160:57	0:0	2	;
call	161:8	161:41	2	xcb_map_window
arg	161:24	161:28	3	conn
water	161:24	0:0	4	conn
arg	161:30	161:41	3	sys->window
water	161:30	0:0	4	sys
op	161:33	0:0	4	->
water	161:35	0:0	4	window
water	161:42	0:0	2	;
call	163:8	163:58	2	xcb_create_gc
arg	163:23	163:27	3	conn
water	163:23	0:0	4	conn
arg	163:29	163:36	3	sys->gc
water	163:29	0:0	4	sys
op	163:32	0:0	4	->
water	163:34	0:0	4	gc
arg	163:38	163:49	3	sys->window
water	163:38	0:0	4	sys
op	163:41	0:0	4	->
water	163:43	0:0	4	window
arg	163:51	163:52	3	0
water	163:51	0:0	4	0
arg	163:54	163:58	3	NULL
water	163:54	0:0	4	NULL
water	163:59	0:0	2	;
if	164:8	165:22	2	(XCB_error_Check (vd ,conn ,"cannot create X11 window" ,c ))
cond	164:12	164:68	3	XCB_error_Check (vd ,conn ,"cannot create X11 window" ,c )
call	164:12	164:68	4	XCB_error_Check
arg	164:29	164:31	5	vd
water	164:29	0:0	6	vd
arg	164:33	164:37	5	conn
water	164:33	0:0	6	conn
arg	164:39	164:65	5	"cannot create X11 window"
water	164:39	0:0	6	"cannot create X11 window"
arg	164:67	164:68	5	c
water	164:67	0:0	6	c
stmts	165:12	165:22	3	
goto	165:12	165:22	4	error
water	165:17	0:0	5	error
water	166:4	0:0	2	}
call	167:4	167:58	2	msg_Dbg
arg	167:13	167:15	3	vd
water	167:13	0:0	4	vd
arg	167:17	167:45	3	"using X11 window %08"PRIx32
water	167:17	0:0	4	"using X11 window %08"
water	167:39	0:0	4	PRIx32
arg	167:47	167:58	3	sys->window
water	167:47	0:0	4	sys
op	167:50	0:0	4	->
water	167:52	0:0	4	window
water	167:59	0:0	2	;
call	168:4	168:63	2	msg_Dbg
arg	168:13	168:15	3	vd
water	168:13	0:0	4	vd
arg	168:17	168:54	3	"using X11 graphic context %08"PRIx32
water	168:17	0:0	4	"using X11 graphic context %08"
water	168:48	0:0	4	PRIx32
arg	168:56	168:63	3	sys->gc
water	168:56	0:0	4	sys
op	168:59	0:0	4	->
water	168:61	0:0	4	gc
water	168:64	0:0	2	;
water	169:4	0:0	2	sys
op	169:7	0:0	2	->
water	169:9	0:0	2	cursor
op	169:16	0:0	2	=
call	169:18	169:46	2	XCB_cursor_Create
arg	169:37	169:41	3	conn
water	169:37	0:0	4	conn
arg	169:43	169:46	3	scr
water	169:43	0:0	4	scr
water	169:47	0:0	2	;
water	170:4	0:0	2	sys
op	170:7	0:0	2	->
water	170:9	0:0	2	visible
op	170:17	0:0	2	=
water	170:19	0:0	2	false
water	170:24	0:0	2	;
if	171:4	176:4	2	(XCB_shm_Check (obj ,conn ))
cond	171:8	171:32	3	XCB_shm_Check (obj ,conn )
call	171:8	171:32	4	XCB_shm_Check
arg	171:23	171:26	5	obj
water	171:23	0:0	6	obj
arg	171:28	171:32	5	conn
water	171:28	0:0	6	conn
stmts	172:4	176:4	3	
water	172:4	0:0	4	{
water	173:8	0:0	4	sys
op	173:11	0:0	4	->
water	173:13	0:0	4	seg_base
op	173:22	0:0	4	=
call	173:24	173:45	4	xcb_generate_id
arg	173:41	173:45	5	conn
water	173:41	0:0	6	conn
water	173:46	0:0	4	;
for	174:8	175:35	4	(unsigned i = 1 ;i < MAX_PICTURES;i ++)
forinit	174:13	174:27	5	unsigned i = 1 ;
water	174:13	0:0	6	unsigned
water	174:22	0:0	6	i
op	174:24	0:0	6	=
water	174:26	0:0	6	1
water	174:27	0:0	6	;
cond	174:29	174:33	5	i < MAX_PICTURES
water	174:29	0:0	6	i
op	174:31	0:0	6	<
water	174:33	0:0	6	MAX_PICTURES
forexpr	174:47	174:48	5	i ++
water	174:47	0:0	6	i
op	174:48	0:0	6	++
stmts	175:13	175:35	5	
call	175:13	175:34	6	xcb_generate_id
arg	175:30	175:34	7	conn
water	175:30	0:0	8	conn
water	175:35	0:0	6	;
water	176:4	0:0	4	}
else	177:4	178:25	2
stmts	178:8	178:25	3	
water	178:8	0:0	4	sys
op	178:11	0:0	4	->
water	178:13	0:0	4	seg_base
op	178:22	0:0	4	=
water	178:24	0:0	4	0
water	178:25	0:0	4	;
water	180:4	0:0	2	vd
op	180:6	0:0	2	->
water	180:8	0:0	2	info
op	180:12	0:0	2	.
water	180:13	0:0	2	has_pictures_invalid
op	180:34	0:0	2	=
water	180:36	0:0	2	true
water	180:40	0:0	2	;
water	181:4	0:0	2	vd
op	181:6	0:0	2	->
water	181:8	0:0	2	info
op	181:12	0:0	2	.
water	181:13	0:0	2	has_event_thread
op	181:30	0:0	2	=
water	181:32	0:0	2	true
water	181:36	0:0	2	;
water	182:4	0:0	2	vd
op	182:6	0:0	2	->
water	182:8	0:0	2	fmt
op	182:12	0:0	2	=
water	182:14	0:0	2	fmt_pic
water	182:21	0:0	2	;
water	183:4	0:0	2	vd
op	183:6	0:0	2	->
water	183:8	0:0	2	pool
op	183:13	0:0	2	=
water	183:15	0:0	2	Pool
water	183:19	0:0	2	;
water	184:4	0:0	2	vd
op	184:6	0:0	2	->
water	184:8	0:0	2	prepare
op	184:16	0:0	2	=
water	184:18	0:0	2	NULL
water	184:22	0:0	2	;
water	185:4	0:0	2	vd
op	185:6	0:0	2	->
water	185:8	0:0	2	display
op	185:16	0:0	2	=
water	185:18	0:0	2	Display
water	185:25	0:0	2	;
water	186:4	0:0	2	vd
op	186:6	0:0	2	->
water	186:8	0:0	2	control
op	186:16	0:0	2	=
water	186:18	0:0	2	Control
water	186:25	0:0	2	;
water	187:4	0:0	2	vd
op	187:6	0:0	2	->
water	187:8	0:0	2	manage
op	187:15	0:0	2	=
water	187:17	0:0	2	Manage
water	187:23	0:0	2	;
decl	189:4	189:47	2	bool	is_fullscreen
op	189:23	0:0	2	=
water	189:25	0:0	2	vd
op	189:27	0:0	2	->
water	189:29	0:0	2	cfg
op	189:32	0:0	2	->
water	189:34	0:0	2	is_fullscreen
if	190:4	191:29	2	(is_fullscreen &&vout_window_SetFullScreen (sys -> embed ,true ))
cond	190:8	190:68	3	is_fullscreen &&vout_window_SetFullScreen (sys -> embed ,true )
water	190:8	0:0	4	is_fullscreen
op	190:22	0:0	4	&&
call	190:25	190:68	4	vout_window_SetFullScreen
arg	190:52	190:62	5	sys->embed
water	190:52	0:0	6	sys
op	190:55	0:0	6	->
water	190:57	0:0	6	embed
arg	190:64	190:68	5	true
water	190:64	0:0	6	true
stmts	191:8	191:29	3	
water	191:8	0:0	4	is_fullscreen
op	191:22	0:0	4	=
water	191:24	0:0	4	false
water	191:29	0:0	4	;
call	192:4	192:55	2	vout_display_SendEventFullscreen
arg	192:38	192:40	3	vd
water	192:38	0:0	4	vd
arg	192:42	192:55	3	is_fullscreen
water	192:42	0:0	4	is_fullscreen
water	192:56	0:0	2	;
call	193:4	193:71	2	vout_display_SendEventDisplaySize
arg	193:39	193:41	3	vd
water	193:39	0:0	4	vd
arg	193:43	193:48	3	width
water	193:43	0:0	4	width
arg	193:50	193:56	3	height
water	193:50	0:0	4	height
arg	193:58	193:71	3	is_fullscreen
water	193:58	0:0	4	is_fullscreen
water	193:72	0:0	2	;
return	194:4	194:22	2	VLC_SUCCESS
water	194:11	0:0	3	VLC_SUCCESS
label	195:0	195:5	2	error :
call	196:4	196:14	2	Close
arg	196:11	196:14	3	obj
water	196:11	0:0	4	obj
water	196:15	0:0	2	;
return	197:4	197:23	2	VLC_EGENERIC
water	197:11	0:0	3	VLC_EGENERIC
