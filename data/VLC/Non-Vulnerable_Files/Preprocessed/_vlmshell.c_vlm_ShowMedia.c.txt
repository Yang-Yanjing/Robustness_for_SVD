func	2:0	71:0	0	static vlm_message_t *	vlm_ShowMedia
params	2:35	0:0	1	
param	2:37	2:62	2	vlm_media_sys_t *	p_media
stmnts	0:0	70:16	1	
decl	4:4	4:38	2	vlm_media_t	*p_cfg
op	4:23	0:0	2	=
op	4:25	0:0	2	&
water	4:26	0:0	2	p_media
op	4:33	0:0	2	->
water	4:35	0:0	2	cfg
decl	5:4	5:24	2	vlm_message_t	*p_msg
decl	6:4	6:28	2	vlm_message_t	*p_msg_sub
decl	7:4	7:9	2	int	i
water	8:4	0:0	2	p_msg
op	8:10	0:0	2	=
call	8:12	8:50	2	vlm_MessageSimpleNew
arg	8:34	8:50	3	p_cfg->psz_name
water	8:34	0:0	4	p_cfg
op	8:39	0:0	4	->
water	8:41	0:0	4	psz_name
water	8:51	0:0	2	;
call	9:4	10:81	2	vlm_MessageAdd
arg	9:20	9:25	3	p_msg
water	9:20	0:0	4	p_msg
arg	10:20	10:81	3	vlm_MessageNew("type",p_cfg->b_vod?"vod":"broadcast")
call	10:20	10:79	4	vlm_MessageNew
arg	10:36	10:42	5	"type"
water	10:36	0:0	6	"type"
arg	10:44	10:79	5	p_cfg->b_vod?"vod":"broadcast"
water	10:44	0:0	6	p_cfg
op	10:49	0:0	6	->
water	10:51	0:0	6	b_vod
water	10:57	0:0	6	?
water	10:59	0:0	6	"vod"
water	10:65	0:0	6	:
water	10:67	0:0	6	"broadcast"
water	10:82	0:0	2	;
call	11:4	12:81	2	vlm_MessageAdd
arg	11:20	11:25	3	p_msg
water	11:20	0:0	4	p_msg
arg	12:20	12:81	3	vlm_MessageNew("enabled",p_cfg->b_enabled?"yes":"no")
call	12:20	12:79	4	vlm_MessageNew
arg	12:36	12:45	5	"enabled"
water	12:36	0:0	6	"enabled"
arg	12:47	12:79	5	p_cfg->b_enabled?"yes":"no"
water	12:47	0:0	6	p_cfg
op	12:52	0:0	6	->
water	12:54	0:0	6	b_enabled
water	12:64	0:0	6	?
water	12:66	0:0	6	"yes"
water	12:72	0:0	6	:
water	12:74	0:0	6	"no"
water	12:82	0:0	2	;
if	13:4	15:75	2	(p_cfg -> b_vod)
cond	13:8	13:15	3	p_cfg -> b_vod
water	13:8	0:0	4	p_cfg
op	13:13	0:0	4	->
water	13:15	0:0	4	b_vod
stmts	14:8	15:75	3	
call	14:8	15:74	4	vlm_MessageAdd
arg	14:24	14:29	5	p_msg
water	14:24	0:0	6	p_msg
arg	15:24	15:74	5	vlm_MessageNew("mux","%s",p_cfg->vod.psz_mux)
call	15:24	15:72	6	vlm_MessageNew
arg	15:40	15:45	7	"mux"
water	15:40	0:0	8	"mux"
arg	15:47	15:51	7	"%s"
water	15:47	0:0	8	"%s"
arg	15:53	15:72	7	p_cfg->vod.psz_mux
water	15:53	0:0	8	p_cfg
op	15:58	0:0	8	->
water	15:60	0:0	8	vod
op	15:63	0:0	8	.
water	15:64	0:0	8	psz_mux
water	15:75	0:0	4	;
else	16:4	18:90	2
stmts	17:8	18:90	3	
call	17:8	18:89	4	vlm_MessageAdd
arg	17:24	17:29	5	p_msg
water	17:24	0:0	6	p_msg
arg	18:24	18:89	5	vlm_MessageNew("loop",p_cfg->broadcast.b_loop?"yes":"no")
call	18:24	18:87	6	vlm_MessageNew
arg	18:40	18:46	7	"loop"
water	18:40	0:0	8	"loop"
arg	18:48	18:87	7	p_cfg->broadcast.b_loop?"yes":"no"
water	18:48	0:0	8	p_cfg
op	18:53	0:0	8	->
water	18:55	0:0	8	broadcast
op	18:64	0:0	8	.
water	18:65	0:0	8	b_loop
water	18:72	0:0	8	?
water	18:74	0:0	8	"yes"
water	18:80	0:0	8	:
water	18:82	0:0	8	"no"
water	18:90	0:0	4	;
water	19:4	0:0	2	p_msg_sub
op	19:14	0:0	2	=
call	19:16	19:72	2	vlm_MessageAdd
arg	19:32	19:37	3	p_msg
water	19:32	0:0	4	p_msg
arg	19:39	19:72	3	vlm_MessageSimpleNew("inputs")
call	19:39	19:70	4	vlm_MessageSimpleNew
arg	19:61	19:70	5	"inputs"
water	19:61	0:0	6	"inputs"
water	19:73	0:0	2	;
for	20:4	29:4	2	(i = 0 ;i < p_cfg -> i_input;i ++)
forinit	20:9	20:14	3	i = 0 ;
water	20:9	0:0	4	i
op	20:11	0:0	4	=
water	20:13	0:0	4	0
water	20:14	0:0	4	;
cond	20:16	20:27	3	i < p_cfg -> i_input
water	20:16	0:0	4	i
op	20:18	0:0	4	<
water	20:20	0:0	4	p_cfg
op	20:25	0:0	4	->
water	20:27	0:0	4	i_input
forexpr	20:36	20:37	3	i ++
water	20:36	0:0	4	i
op	20:37	0:0	4	++
stmts	21:4	29:4	3	
water	21:4	0:0	4	{
decl	22:8	22:21	4	char	*psz_tmp
if	23:8	28:8	4	(asprintf (& psz_tmp ,"%d" ,i + 1 ) != - 1)
cond	23:12	23:48	5	asprintf (& psz_tmp ,"%d" ,i + 1 ) != - 1
call	23:12	23:42	6	asprintf
arg	23:22	23:30	7	&psz_tmp
op	23:22	0:0	8	&
water	23:23	0:0	8	psz_tmp
arg	23:32	23:36	7	"%d"
water	23:32	0:0	8	"%d"
arg	23:38	23:42	7	i+1
water	23:38	0:0	8	i
op	23:39	0:0	8	+
water	23:40	0:0	8	1
op	23:44	0:0	6	!=
op	23:47	0:0	6	-
water	23:48	0:0	6	1
stmts	24:8	28:8	5	
water	24:8	0:0	6	{
call	25:12	26:77	6	vlm_MessageAdd
arg	25:28	25:37	7	p_msg_sub
water	25:28	0:0	8	p_msg_sub
arg	26:23	26:77	7	vlm_MessageNew(psz_tmp,"%s",p_cfg->ppsz_input[i])
call	26:23	26:75	8	vlm_MessageNew
arg	26:39	26:46	9	psz_tmp
water	26:39	0:0	10	psz_tmp
arg	26:48	26:52	9	"%s"
water	26:48	0:0	10	"%s"
arg	26:54	26:75	9	p_cfg->ppsz_input[i]
water	26:54	0:0	10	p_cfg
op	26:59	0:0	10	->
water	26:61	0:0	10	ppsz_input
op	26:71	0:0	10	[
water	26:72	0:0	10	i
op	26:73	0:0	10	]
water	26:78	0:0	6	;
call	27:12	27:26	6	free
arg	27:18	27:26	7	psz_tmp
water	27:18	0:0	8	psz_tmp
water	27:27	0:0	6	;
water	28:8	0:0	6	}
water	29:4	0:0	4	}
call	30:4	31:97	2	vlm_MessageAdd
arg	30:20	30:25	3	p_msg
water	30:20	0:0	4	p_msg
arg	31:20	31:97	3	vlm_MessageNew("output","%s",p_cfg->psz_output?p_cfg->psz_output:"")
call	31:20	31:95	4	vlm_MessageNew
arg	31:36	31:44	5	"output"
water	31:36	0:0	6	"output"
arg	31:46	31:50	5	"%s"
water	31:46	0:0	6	"%s"
arg	31:52	31:95	5	p_cfg->psz_output?p_cfg->psz_output:""
water	31:52	0:0	6	p_cfg
op	31:57	0:0	6	->
water	31:59	0:0	6	psz_output
water	31:70	0:0	6	?
water	31:72	0:0	6	p_cfg
op	31:77	0:0	6	->
water	31:79	0:0	6	psz_output
water	31:90	0:0	6	:
water	31:92	0:0	6	""
water	31:98	0:0	2	;
water	32:4	0:0	2	p_msg_sub
op	32:14	0:0	2	=
call	32:16	32:73	2	vlm_MessageAdd
arg	32:32	32:37	3	p_msg
water	32:32	0:0	4	p_msg
arg	32:39	32:73	3	vlm_MessageSimpleNew("options")
call	32:39	32:71	4	vlm_MessageSimpleNew
arg	32:61	32:71	5	"options"
water	32:61	0:0	6	"options"
water	32:74	0:0	2	;
for	33:4	34:82	2	(i = 0 ;i < p_cfg -> i_option;i ++)
forinit	33:9	33:14	3	i = 0 ;
water	33:9	0:0	4	i
op	33:11	0:0	4	=
water	33:13	0:0	4	0
water	33:14	0:0	4	;
cond	33:16	33:27	3	i < p_cfg -> i_option
water	33:16	0:0	4	i
op	33:18	0:0	4	<
water	33:20	0:0	4	p_cfg
op	33:25	0:0	4	->
water	33:27	0:0	4	i_option
forexpr	33:37	33:38	3	i ++
water	33:37	0:0	4	i
op	33:38	0:0	4	++
stmts	34:8	34:82	3	
call	34:8	34:81	4	vlm_MessageAdd
arg	34:24	34:33	5	p_msg_sub
water	34:24	0:0	6	p_msg_sub
arg	34:35	34:81	5	vlm_MessageSimpleNew(p_cfg->ppsz_option[i])
call	34:35	34:79	6	vlm_MessageSimpleNew
arg	34:57	34:79	7	p_cfg->ppsz_option[i]
water	34:57	0:0	8	p_cfg
op	34:62	0:0	8	->
water	34:64	0:0	8	ppsz_option
op	34:75	0:0	8	[
water	34:76	0:0	8	i
op	34:77	0:0	8	]
water	34:82	0:0	4	;
water	35:4	0:0	2	p_msg_sub
op	35:14	0:0	2	=
call	35:16	35:75	2	vlm_MessageAdd
arg	35:32	35:37	3	p_msg
water	35:32	0:0	4	p_msg
arg	35:39	35:75	3	vlm_MessageSimpleNew("instances")
call	35:39	35:73	4	vlm_MessageSimpleNew
arg	35:61	35:73	5	"instances"
water	35:61	0:0	6	"instances"
water	35:76	0:0	2	;
for	36:4	69:4	2	(i = 0 ;i < p_media -> i_instance;i ++)
forinit	36:9	36:14	3	i = 0 ;
water	36:9	0:0	4	i
op	36:11	0:0	4	=
water	36:13	0:0	4	0
water	36:14	0:0	4	;
cond	36:16	36:29	3	i < p_media -> i_instance
water	36:16	0:0	4	i
op	36:18	0:0	4	<
water	36:20	0:0	4	p_media
op	36:27	0:0	4	->
water	36:29	0:0	4	i_instance
forexpr	36:41	36:42	3	i ++
water	36:41	0:0	4	i
op	36:42	0:0	4	++
stmts	37:4	69:4	3	
water	37:4	0:0	4	{
decl	38:8	38:67	4	vlm_media_instance_sys_t	*p_instance
op	38:45	0:0	4	=
water	38:47	0:0	4	p_media
op	38:54	0:0	4	->
water	38:56	0:0	4	instance
op	38:64	0:0	4	[
water	38:65	0:0	4	i
op	38:66	0:0	4	]
decl	39:8	39:23	4	vlc_value_t	val
decl	40:8	40:37	4	vlm_message_t	*p_msg_instance
water	41:8	0:0	4	val
op	41:11	0:0	4	.
water	41:12	0:0	4	i_int
op	41:18	0:0	4	=
water	41:20	0:0	4	END_S
water	41:25	0:0	4	;
if	42:8	43:57	4	(p_instance -> p_input)
cond	42:12	42:24	5	p_instance -> p_input
water	42:12	0:0	6	p_instance
op	42:22	0:0	6	->
water	42:24	0:0	6	p_input
stmts	43:12	43:57	5	
call	43:12	43:56	6	var_Get
arg	43:21	43:40	7	p_instance->p_input
water	43:21	0:0	8	p_instance
op	43:31	0:0	8	->
water	43:33	0:0	8	p_input
arg	43:42	43:49	7	"state"
water	43:42	0:0	8	"state"
arg	43:51	43:56	7	&val
op	43:51	0:0	8	&
water	43:52	0:0	8	val
water	43:57	0:0	6	;
water	44:8	0:0	4	p_msg_instance
op	44:23	0:0	4	=
call	44:25	44:87	4	vlm_MessageAdd
arg	44:41	44:50	5	p_msg_sub
water	44:41	0:0	6	p_msg_sub
arg	44:52	44:87	5	vlm_MessageSimpleNew("instance")
call	44:52	44:85	6	vlm_MessageSimpleNew
arg	44:74	44:85	7	"instance"
water	44:74	0:0	8	"instance"
water	44:88	0:0	4	;
call	45:8	46:113	4	vlm_MessageAdd
arg	45:24	45:38	5	p_msg_instance
water	45:24	0:0	6	p_msg_instance
arg	46:24	46:113	5	vlm_MessageNew("name","%s",p_instance->psz_name?p_instance->psz_name:"default")
call	46:24	46:111	6	vlm_MessageNew
arg	46:40	46:47	7	"name"
water	46:40	0:0	8	"name"
arg	46:49	46:53	7	"%s"
water	46:49	0:0	8	"%s"
arg	46:55	46:111	7	p_instance->psz_name?p_instance->psz_name:"default"
water	46:55	0:0	8	p_instance
op	46:65	0:0	8	->
water	46:67	0:0	8	psz_name
water	46:76	0:0	8	?
water	46:78	0:0	8	p_instance
op	46:88	0:0	8	->
water	46:90	0:0	8	psz_name
water	46:99	0:0	8	:
water	46:101	0:0	8	"default"
water	46:114	0:0	4	;
call	47:8	51:40	4	vlm_MessageAdd
arg	47:24	47:38	5	p_msg_instance
water	47:24	0:0	6	p_msg_instance
arg	48:24	51:40	5	vlm_MessageNew("state",val.i_int==PLAYING_S?"playing":val.i_int==PAUSE_S?"paused":"stopped")
call	48:24	51:38	6	vlm_MessageNew
arg	48:40	48:47	7	"state"
water	48:40	0:0	8	"state"
arg	49:28	51:38	7	val.i_int==PLAYING_S?"playing":val.i_int==PAUSE_S?"paused":"stopped"
water	49:28	0:0	8	val
op	49:31	0:0	8	.
water	49:32	0:0	8	i_int
op	49:38	0:0	8	==
water	49:41	0:0	8	PLAYING_S
water	49:51	0:0	8	?
water	49:53	0:0	8	"playing"
water	49:63	0:0	8	:
water	50:28	0:0	8	val
op	50:31	0:0	8	.
water	50:32	0:0	8	i_int
op	50:38	0:0	8	==
water	50:41	0:0	8	PAUSE_S
water	50:49	0:0	8	?
water	50:51	0:0	8	"paused"
water	50:60	0:0	8	:
water	51:28	0:0	8	"stopped"
water	51:41	0:0	4	;
if	53:8	65:8	4	(p_instance -> p_input)
cond	53:12	53:24	5	p_instance -> p_input
water	53:12	0:0	6	p_instance
op	53:22	0:0	6	->
water	53:24	0:0	6	p_input
stmts	54:8	65:8	5	
water	54:8	0:0	6	{
water	56:12	0:0	6	vlm_MessageAdd
water	56:26	0:0	6	(
water	56:28	0:0	6	p_msg_instance
water	56:42	0:0	6	,
water	56:44	0:0	6	vlm_MessageNew
water	56:58	0:0	6	(
water	56:60	0:0	6	key
water	56:63	0:0	6	,
water	56:65	0:0	6	format
water	56:71	0:0	6	,
water	57:28	0:0	6	var_Get
call	58:12	58:55	6	APPEND_INPUT_INFO
arg	58:31	58:41	7	"position"
water	58:31	0:0	8	"position"
arg	58:43	58:47	7	"%f"
water	58:43	0:0	8	"%f"
arg	58:49	58:55	7	Float
water	58:49	0:0	8	Float
water	58:56	0:0	6	;
call	59:12	59:55	6	APPEND_INPUT_INFO
arg	59:31	59:37	7	"time"
water	59:31	0:0	8	"time"
arg	59:39	59:48	7	"%"PRIi64
water	59:39	0:0	8	"%"
water	59:42	0:0	8	PRIi64
arg	59:50	59:55	7	Time
water	59:50	0:0	8	Time
water	59:56	0:0	6	;
call	60:12	60:57	6	APPEND_INPUT_INFO
arg	60:31	60:39	7	"length"
water	60:31	0:0	8	"length"
arg	60:41	60:50	7	"%"PRIi64
water	60:41	0:0	8	"%"
water	60:44	0:0	8	PRIi64
arg	60:52	60:57	7	Time
water	60:52	0:0	8	Time
water	60:58	0:0	6	;
call	61:12	61:51	6	APPEND_INPUT_INFO
arg	61:31	61:37	7	"rate"
water	61:31	0:0	8	"rate"
arg	61:39	61:43	7	"%f"
water	61:39	0:0	8	"%f"
arg	61:45	61:51	7	Float
water	61:45	0:0	8	Float
water	61:52	0:0	6	;
call	62:12	62:59	6	APPEND_INPUT_INFO
arg	62:31	62:38	7	"title"
water	62:31	0:0	8	"title"
arg	62:40	62:49	7	"%"PRId64
water	62:40	0:0	8	"%"
water	62:43	0:0	8	PRId64
arg	62:51	62:59	7	Integer
water	62:51	0:0	8	Integer
water	62:60	0:0	6	;
call	63:12	63:61	6	APPEND_INPUT_INFO
arg	63:31	63:40	7	"chapter"
water	63:31	0:0	8	"chapter"
arg	63:42	63:51	7	"%"PRId64
water	63:42	0:0	8	"%"
water	63:45	0:0	8	PRId64
arg	63:53	63:61	7	Integer
water	63:53	0:0	8	Integer
water	63:62	0:0	6	;
call	64:12	64:54	6	APPEND_INPUT_INFO
arg	64:31	64:41	7	"can-seek"
water	64:31	0:0	8	"can-seek"
arg	64:43	64:47	7	"%d"
water	64:43	0:0	8	"%d"
arg	64:49	64:54	7	Bool
water	64:49	0:0	8	Bool
water	64:55	0:0	6	;
water	65:8	0:0	6	}
call	67:8	68:56	4	vlm_MessageAdd
arg	67:24	67:38	5	p_msg_instance
water	67:24	0:0	6	p_msg_instance
arg	67:40	68:56	5	vlm_MessageNew("playlistindex","%d",p_instance->i_index+1)
call	67:40	68:54	6	vlm_MessageNew
arg	67:56	67:71	7	"playlistindex"
water	67:56	0:0	8	"playlistindex"
arg	68:24	68:28	7	"%d"
water	68:24	0:0	8	"%d"
arg	68:30	68:54	7	p_instance->i_index+1
water	68:30	0:0	8	p_instance
op	68:40	0:0	8	->
water	68:42	0:0	8	i_index
op	68:50	0:0	8	+
water	68:52	0:0	8	1
water	68:57	0:0	4	;
water	69:4	0:0	4	}
return	70:4	70:16	2	p_msg
water	70:11	0:0	3	p_msg
