func	2:0	65:0	0	static ssize_t	writeSegment
params	2:27	0:0	1	
param	2:29	2:57	2	sout_access_out_t *	p_access
stmnts	0:0	64:18	1	
decl	4:4	4:50	2	sout_access_out_sys_t	*p_sys
op	4:33	0:0	2	=
water	4:35	0:0	2	p_access
op	4:43	0:0	2	->
water	4:45	0:0	2	p_sys
decl	5:4	5:41	2	block_t	*output
op	5:20	0:0	2	=
water	5:22	0:0	2	p_sys
op	5:27	0:0	2	->
water	5:29	0:0	2	block_buffer
water	6:4	0:0	2	p_sys
op	6:9	0:0	2	->
water	6:11	0:0	2	block_buffer
op	6:24	0:0	2	=
water	6:26	0:0	2	NULL
water	6:30	0:0	2	;
water	7:4	0:0	2	p_sys
op	7:9	0:0	2	->
water	7:11	0:0	2	last_block_buffer
op	7:29	0:0	2	=
op	7:31	0:0	2	&
water	7:32	0:0	2	p_sys
op	7:37	0:0	2	->
water	7:39	0:0	2	block_buffer
water	7:51	0:0	2	;
decl	8:4	8:21	2	ssize_t	i_write
op	8:19	0:0	2	=
water	8:20	0:0	2	0
decl	9:4	9:24	2	bool	crypted
op	9:17	0:0	2	=
water	9:19	0:0	2	false
while	10:4	63:4	2	(output)
cond	10:11	10:11	3	output
water	10:11	0:0	4	output
stmts	11:4	63:4	3	
water	11:4	0:0	4	{
if	12:8	39:8	4	(p_sys -> key_uri && ! crypted)
cond	12:12	12:31	5	p_sys -> key_uri && ! crypted
water	12:12	0:0	6	p_sys
op	12:17	0:0	6	->
water	12:19	0:0	6	key_uri
op	12:27	0:0	6	&&
op	12:30	0:0	6	!
water	12:31	0:0	6	crypted
stmts	13:8	39:8	5	
water	13:8	0:0	6	{
if	14:12	21:12	6	(p_sys -> stuffing_size)
cond	14:16	14:23	7	p_sys -> stuffing_size
water	14:16	0:0	8	p_sys
op	14:21	0:0	8	->
water	14:23	0:0	8	stuffing_size
stmts	15:12	21:12	7	
water	15:12	0:0	8	{
water	16:16	0:0	8	output
op	16:23	0:0	8	=
call	16:25	16:87	8	block_Realloc
arg	16:40	16:46	9	output
water	16:40	0:0	10	output
arg	16:48	16:68	9	p_sys->stuffing_size
water	16:48	0:0	10	p_sys
op	16:53	0:0	10	->
water	16:55	0:0	10	stuffing_size
arg	16:70	16:87	9	output->i_buffer
water	16:70	0:0	10	output
op	16:76	0:0	10	->
water	16:78	0:0	10	i_buffer
water	16:88	0:0	8	;
if	17:16	18:37	8	(unlikely (! output ))
cond	17:20	17:37	9	unlikely (! output )
call	17:20	17:37	10	unlikely
arg	17:29	17:37	11	!output
op	17:29	0:0	12	!
water	17:30	0:0	12	output
stmts	18:20	18:37	9	
return	18:20	18:37	10	VLC_ENOMEM
water	18:27	0:0	11	VLC_ENOMEM
call	19:16	19:86	8	memcpy
arg	19:24	19:40	9	output->p_buffer
water	19:24	0:0	10	output
op	19:30	0:0	10	->
water	19:32	0:0	10	p_buffer
arg	19:42	19:63	9	p_sys->stuffing_bytes
water	19:42	0:0	10	p_sys
op	19:47	0:0	10	->
water	19:49	0:0	10	stuffing_bytes
arg	19:65	19:86	9	p_sys->stuffing_size
water	19:65	0:0	10	p_sys
op	19:70	0:0	10	->
water	19:72	0:0	10	stuffing_size
water	19:87	0:0	8	;
water	20:16	0:0	8	p_sys
op	20:21	0:0	8	->
water	20:23	0:0	8	stuffing_size
op	20:37	0:0	8	=
water	20:39	0:0	8	0
water	20:40	0:0	8	;
water	21:12	0:0	8	}
decl	22:12	22:46	6	size_t	original
op	22:28	0:0	6	=
water	22:30	0:0	6	output
op	22:36	0:0	6	->
water	22:38	0:0	6	i_buffer
decl	23:12	23:58	6	size_t	padded
op	23:26	0:0	6	=
water	23:28	0:0	6	(
water	23:29	0:0	6	output
op	23:35	0:0	6	->
water	23:37	0:0	6	i_buffer
op	23:46	0:0	6	+
water	23:48	0:0	6	15
water	23:51	0:0	6	)
op	23:53	0:0	6	&
water	23:55	0:0	6	~15
decl	24:12	24:42	6	size_t	pad
op	24:23	0:0	6	=
water	24:25	0:0	6	padded
op	24:32	0:0	6	-
water	24:34	0:0	6	original
if	25:12	30:12	6	(pad)
cond	25:16	25:16	7	pad
water	25:16	0:0	8	pad
stmts	26:12	30:12	7	
water	26:12	0:0	8	{
water	27:16	0:0	8	p_sys
op	27:21	0:0	8	->
water	27:23	0:0	8	stuffing_size
op	27:37	0:0	8	=
water	27:39	0:0	8	16
op	27:41	0:0	8	-
water	27:42	0:0	8	pad
water	27:45	0:0	8	;
water	28:16	0:0	8	output
op	28:22	0:0	8	->
water	28:24	0:0	8	i_buffer
op	28:33	0:0	8	-=
water	28:36	0:0	8	p_sys
op	28:41	0:0	8	->
water	28:43	0:0	8	stuffing_size
water	28:56	0:0	8	;
call	29:16	29:103	8	memcpy
arg	29:23	29:44	9	p_sys->stuffing_bytes
water	29:23	0:0	10	p_sys
op	29:28	0:0	10	->
water	29:30	0:0	10	stuffing_bytes
arg	29:46	29:81	9	&output->p_buffer[output->i_buffer]
op	29:46	0:0	10	&
water	29:47	0:0	10	output
op	29:53	0:0	10	->
water	29:55	0:0	10	p_buffer
op	29:63	0:0	10	[
water	29:64	0:0	10	output
op	29:70	0:0	10	->
water	29:72	0:0	10	i_buffer
op	29:80	0:0	10	]
arg	29:83	29:103	9	p_sys->stuffing_size
water	29:83	0:0	10	p_sys
op	29:88	0:0	10	->
water	29:90	0:0	10	stuffing_size
water	29:104	0:0	8	;
water	30:12	0:0	8	}
decl	31:12	32:77	6	gcry_error_t	err
op	31:29	0:0	6	=
call	31:31	32:76	7	gcry_cipher_encrypt
arg	31:52	31:66	8	p_sys->aes_ctx
water	31:52	0:0	9	p_sys
op	31:57	0:0	9	->
water	31:59	0:0	9	aes_ctx
arg	32:32	32:48	8	output->p_buffer
water	32:32	0:0	9	output
op	32:38	0:0	9	->
water	32:40	0:0	9	p_buffer
arg	32:50	32:66	8	output->i_buffer
water	32:50	0:0	9	output
op	32:56	0:0	9	->
water	32:58	0:0	9	i_buffer
arg	32:68	32:72	8	NULL
water	32:68	0:0	9	NULL
arg	32:74	32:76	8	0
water	32:74	0:0	9	0
if	33:12	37:12	6	(err)
cond	33:16	33:16	7	err
water	33:16	0:0	8	err
stmts	34:12	37:12	7	
water	34:12	0:0	8	{
call	35:16	35:80	8	msg_Err
arg	35:25	35:33	9	p_access
water	35:25	0:0	10	p_access
arg	35:35	35:60	9	"Encryption failure: %s "
water	35:35	0:0	10	"Encryption failure: %s "
arg	35:62	35:80	9	gpg_strerror(err)
call	35:62	35:78	10	gpg_strerror
arg	35:75	35:78	11	err
water	35:75	0:0	12	err
water	35:81	0:0	8	;
return	36:16	36:25	8	-1
op	36:23	0:0	9	-
water	36:24	0:0	9	1
water	37:12	0:0	8	}
water	38:12	0:0	6	crypted
op	38:19	0:0	6	=
water	38:20	0:0	6	true
water	38:24	0:0	6	;
water	39:8	0:0	6	}
decl	40:8	40:82	4	ssize_t	val
op	40:20	0:0	4	=
call	40:22	40:81	5	write
arg	40:29	40:44	6	p_sys->i_handle
water	40:29	0:0	7	p_sys
op	40:34	0:0	7	->
water	40:36	0:0	7	i_handle
arg	40:46	40:62	6	output->p_buffer
water	40:46	0:0	7	output
op	40:52	0:0	7	->
water	40:54	0:0	7	p_buffer
arg	40:64	40:81	6	output->i_buffer
water	40:64	0:0	7	output
op	40:70	0:0	7	->
water	40:72	0:0	7	i_buffer
if	41:8	46:8	4	(val == - 1)
cond	41:13	41:21	5	val == - 1
water	41:13	0:0	6	val
op	41:17	0:0	6	==
op	41:20	0:0	6	-
water	41:21	0:0	6	1
stmts	42:8	46:8	5	
water	42:8	0:0	6	{
if	43:11	44:22	6	(errno == EINTR)
cond	43:16	43:25	7	errno == EINTR
water	43:16	0:0	8	errno
op	43:22	0:0	8	==
water	43:25	0:0	8	EINTR
stmts	44:14	44:22	7	
continue	44:14	44:22	8	
return	45:11	45:20	6	-1
op	45:18	0:0	7	-
water	45:19	0:0	7	1
water	46:8	0:0	6	}
water	47:8	0:0	4	p_sys
op	47:13	0:0	4	->
water	47:15	0:0	4	f_seglen
op	47:24	0:0	4	=
call	48:12	49:74	4	(float)
arg	48:20	49:74	5	output->i_length+output->i_dts-p_sys->i_opendts+p_sys->i_dts_offset
water	48:20	0:0	6	output
op	48:26	0:0	6	->
water	48:28	0:0	6	i_length
op	48:37	0:0	6	+
water	49:20	0:0	6	output
op	49:26	0:0	6	->
water	49:28	0:0	6	i_dts
op	49:34	0:0	6	-
water	49:36	0:0	6	p_sys
op	49:41	0:0	6	->
water	49:43	0:0	6	i_opendts
op	49:53	0:0	6	+
water	49:55	0:0	6	p_sys
op	49:60	0:0	6	->
water	49:62	0:0	6	i_dts_offset
op	49:76	0:0	4	/
water	49:78	0:0	4	CLOCK_FREQ
water	49:88	0:0	4	;
if	50:8	56:8	4	(( size_t ) val >= output -> i_buffer)
cond	50:13	50:36	5	( size_t ) val >= output -> i_buffer
water	50:13	0:0	6	(
water	50:14	0:0	6	size_t
water	50:20	0:0	6	)
water	50:21	0:0	6	val
op	50:25	0:0	6	>=
water	50:28	0:0	6	output
op	50:34	0:0	6	->
water	50:36	0:0	6	i_buffer
stmts	51:8	56:8	5	
water	51:8	0:0	6	{
decl	52:11	52:43	6	block_t	*p_next
op	52:27	0:0	6	=
water	52:29	0:0	6	output
op	52:35	0:0	6	->
water	52:37	0:0	6	p_next
call	53:11	53:32	6	block_Release
arg	53:26	53:32	7	output
water	53:26	0:0	8	output
water	53:33	0:0	6	;
water	54:11	0:0	6	output
op	54:18	0:0	6	=
water	54:20	0:0	6	p_next
water	54:26	0:0	6	;
water	55:11	0:0	6	crypted
op	55:18	0:0	6	=
water	55:19	0:0	6	false
water	55:24	0:0	6	;
water	56:8	0:0	6	}
else	57:8	61:8	4
stmts	58:8	61:8	5	
water	58:8	0:0	6	{
water	59:11	0:0	6	output
op	59:17	0:0	6	->
water	59:19	0:0	6	p_buffer
op	59:28	0:0	6	+=
water	59:31	0:0	6	val
water	59:34	0:0	6	;
water	60:11	0:0	6	output
op	60:17	0:0	6	->
water	60:19	0:0	6	i_buffer
op	60:28	0:0	6	-=
water	60:31	0:0	6	val
water	60:34	0:0	6	;
water	61:8	0:0	6	}
water	62:8	0:0	4	i_write
op	62:16	0:0	4	+=
water	62:19	0:0	4	val
water	62:22	0:0	4	;
water	63:4	0:0	4	}
return	64:4	64:18	2	i_write
water	64:11	0:0	3	i_write
