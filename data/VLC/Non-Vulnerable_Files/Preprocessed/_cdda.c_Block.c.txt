func	2:0	47:0	0	static block_t *	Block
params	2:21	0:0	1	
param	2:23	2:42	2	access_t *	p_access
stmnts	0:0	46:18	1	
decl	4:4	4:41	2	access_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	p_access
op	4:34	0:0	2	->
water	4:36	0:0	2	p_sys
decl	5:4	5:35	2	int	i_blocks
op	5:17	0:0	2	=
water	5:19	0:0	2	CDDA_BLOCKS_ONCE
decl	6:4	6:20	2	block_t	*p_block
if	7:4	7:56	2	(p_sys -> i_track < 0)
cond	7:8	7:25	3	p_sys -> i_track < 0
water	7:8	0:0	4	p_sys
op	7:13	0:0	4	->
water	7:15	0:0	4	i_track
op	7:23	0:0	4	<
water	7:25	0:0	4	0
stmts	7:29	7:56	3	
water	7:29	0:0	4	p_access
op	7:37	0:0	4	->
water	7:39	0:0	4	info
op	7:43	0:0	4	.
water	7:44	0:0	4	b_eof
op	7:50	0:0	4	=
water	7:52	0:0	4	true
water	7:56	0:0	4	;
if	9:4	9:42	2	(p_access -> info . b_eof)
cond	9:8	9:23	3	p_access -> info . b_eof
water	9:8	0:0	4	p_access
op	9:16	0:0	4	->
water	9:18	0:0	4	info
op	9:22	0:0	4	.
water	9:23	0:0	4	b_eof
stmts	9:31	9:42	3	
return	9:31	9:42	4	NULL
water	9:38	0:0	5	NULL
if	10:4	17:4	2	(! p_sys -> b_header)
cond	10:8	10:16	3	! p_sys -> b_header
op	10:8	0:0	4	!
water	10:9	0:0	4	p_sys
op	10:14	0:0	4	->
water	10:16	0:0	4	b_header
stmts	11:4	17:4	3	
water	11:4	0:0	4	{
water	13:8	0:0	4	p_block
op	13:16	0:0	4	=
call	13:18	13:52	4	block_Alloc
arg	13:31	13:52	5	sizeof(WAVEHEADER)
op	13:31	0:0	6	sizeof
water	13:37	0:0	6	(
water	13:39	0:0	6	WAVEHEADER
water	13:50	0:0	6	)
water	13:53	0:0	4	;
call	14:8	14:74	4	memcpy
arg	14:16	14:33	5	p_block->p_buffer
water	14:16	0:0	6	p_block
op	14:23	0:0	6	->
water	14:25	0:0	6	p_buffer
arg	14:35	14:53	5	&p_sys->waveheader
op	14:35	0:0	6	&
water	14:36	0:0	6	p_sys
op	14:41	0:0	6	->
water	14:43	0:0	6	waveheader
arg	14:55	14:74	5	sizeof(WAVEHEADER)
op	14:55	0:0	6	sizeof
water	14:61	0:0	6	(
water	14:62	0:0	6	WAVEHEADER
water	14:72	0:0	6	)
water	14:75	0:0	4	;
water	15:8	0:0	4	p_sys
op	15:13	0:0	4	->
water	15:15	0:0	4	b_header
op	15:24	0:0	4	=
water	15:26	0:0	4	true
water	15:30	0:0	4	;
return	16:8	16:22	4	p_block
water	16:15	0:0	5	p_block
water	17:4	0:0	4	}
if	18:4	22:4	2	(p_sys -> i_sector >= p_sys -> i_last_sector)
cond	18:8	18:34	3	p_sys -> i_sector >= p_sys -> i_last_sector
water	18:8	0:0	4	p_sys
op	18:13	0:0	4	->
water	18:15	0:0	4	i_sector
op	18:24	0:0	4	>=
water	18:27	0:0	4	p_sys
op	18:32	0:0	4	->
water	18:34	0:0	4	i_last_sector
stmts	19:4	22:4	3	
water	19:4	0:0	4	{
water	20:8	0:0	4	p_access
op	20:16	0:0	4	->
water	20:18	0:0	4	info
op	20:22	0:0	4	.
water	20:23	0:0	4	b_eof
op	20:29	0:0	4	=
water	20:31	0:0	4	true
water	20:35	0:0	4	;
return	21:8	21:19	4	NULL
water	21:15	0:0	5	NULL
water	22:4	0:0	4	}
if	24:4	25:57	2	(p_sys -> i_sector + i_blocks >= p_sys -> i_last_sector)
cond	24:8	24:45	3	p_sys -> i_sector + i_blocks >= p_sys -> i_last_sector
water	24:8	0:0	4	p_sys
op	24:13	0:0	4	->
water	24:15	0:0	4	i_sector
op	24:24	0:0	4	+
water	24:26	0:0	4	i_blocks
op	24:35	0:0	4	>=
water	24:38	0:0	4	p_sys
op	24:43	0:0	4	->
water	24:45	0:0	4	i_last_sector
stmts	25:8	25:57	3	
water	25:8	0:0	4	i_blocks
op	25:17	0:0	4	=
water	25:19	0:0	4	p_sys
op	25:24	0:0	4	->
water	25:26	0:0	4	i_last_sector
op	25:40	0:0	4	-
water	25:42	0:0	4	p_sys
op	25:47	0:0	4	->
water	25:49	0:0	4	i_sector
water	25:57	0:0	4	;
if	27:4	32:4	2	(! ( p_block =block_Alloc (i_blocks * CDDA_DATA_SIZE ) ))
cond	27:8	27:62	3	! ( p_block =block_Alloc (i_blocks * CDDA_DATA_SIZE ) )
op	27:8	0:0	4	!
water	27:9	0:0	4	(
water	27:11	0:0	4	p_block
op	27:19	0:0	4	=
call	27:21	27:60	4	block_Alloc
arg	27:34	27:60	5	i_blocks*CDDA_DATA_SIZE
water	27:34	0:0	6	i_blocks
op	27:43	0:0	6	*
water	27:45	0:0	6	CDDA_DATA_SIZE
water	27:62	0:0	4	)
stmts	28:4	32:4	3	
water	28:4	0:0	4	{
call	29:8	30:43	4	msg_Err
arg	29:17	29:25	5	p_access
water	29:17	0:0	6	p_access
arg	29:27	29:63	5	"cannot get a new block of size: %i"
water	29:27	0:0	6	"cannot get a new block of size: %i"
arg	30:17	30:43	5	i_blocks*CDDA_DATA_SIZE
water	30:17	0:0	6	i_blocks
op	30:26	0:0	6	*
water	30:28	0:0	6	CDDA_DATA_SIZE
water	30:44	0:0	4	;
return	31:8	31:19	4	NULL
water	31:15	0:0	5	NULL
water	32:4	0:0	4	}
if	33:4	42:4	2	(ioctl_ReadSectors (VLC_OBJECT (p_access ) ,p_sys -> vcddev ,p_sys -> i_sector ,p_block -> p_buffer ,i_blocks ,CDDA_TYPE ) < 0)
cond	33:8	34:72	3	ioctl_ReadSectors (VLC_OBJECT (p_access ) ,p_sys -> vcddev ,p_sys -> i_sector ,p_block -> p_buffer ,i_blocks ,CDDA_TYPE ) < 0
call	33:8	34:68	4	ioctl_ReadSectors
arg	33:27	33:47	5	VLC_OBJECT(p_access)
call	33:27	33:46	6	VLC_OBJECT
arg	33:38	33:46	7	p_access
water	33:38	0:0	8	p_access
arg	33:49	33:62	5	p_sys->vcddev
water	33:49	0:0	6	p_sys
op	33:54	0:0	6	->
water	33:56	0:0	6	vcddev
arg	34:12	34:27	5	p_sys->i_sector
water	34:12	0:0	6	p_sys
op	34:17	0:0	6	->
water	34:19	0:0	6	i_sector
arg	34:29	34:46	5	p_block->p_buffer
water	34:29	0:0	6	p_block
op	34:36	0:0	6	->
water	34:38	0:0	6	p_buffer
arg	34:48	34:56	5	i_blocks
water	34:48	0:0	6	i_blocks
arg	34:58	34:68	5	CDDA_TYPE
water	34:58	0:0	6	CDDA_TYPE
op	34:70	0:0	4	<
water	34:72	0:0	4	0
stmts	35:4	42:4	3	
water	35:4	0:0	4	{
call	36:8	36:68	4	msg_Err
arg	36:17	36:25	5	p_access
water	36:17	0:0	6	p_access
arg	36:27	36:50	5	"cannot read sector %i"
water	36:27	0:0	6	"cannot read sector %i"
arg	36:52	36:68	5	p_sys->i_sector
water	36:52	0:0	6	p_sys
op	36:57	0:0	6	->
water	36:59	0:0	6	i_sector
water	36:69	0:0	4	;
call	37:8	37:31	4	block_Release
arg	37:23	37:31	5	p_block
water	37:23	0:0	6	p_block
water	37:32	0:0	4	;
water	39:8	0:0	4	p_sys
op	39:13	0:0	4	->
water	39:15	0:0	4	i_sector
op	39:23	0:0	4	++
water	39:25	0:0	4	;
water	40:8	0:0	4	p_access
op	40:16	0:0	4	->
water	40:18	0:0	4	info
op	40:22	0:0	4	.
water	40:23	0:0	4	i_pos
op	40:29	0:0	4	+=
water	40:32	0:0	4	CDDA_DATA_SIZE
water	40:46	0:0	4	;
return	41:8	41:19	4	NULL
water	41:15	0:0	5	NULL
water	42:4	0:0	4	}
water	44:4	0:0	2	p_sys
op	44:9	0:0	2	->
water	44:11	0:0	2	i_sector
op	44:20	0:0	2	+=
water	44:23	0:0	2	i_blocks
water	44:31	0:0	2	;
water	45:4	0:0	2	p_access
op	45:12	0:0	2	->
water	45:14	0:0	2	info
op	45:18	0:0	2	.
water	45:19	0:0	2	i_pos
op	45:25	0:0	2	+=
water	45:28	0:0	2	p_block
op	45:35	0:0	2	->
water	45:37	0:0	2	i_buffer
water	45:45	0:0	2	;
return	46:4	46:18	2	p_block
water	46:11	0:0	3	p_block
