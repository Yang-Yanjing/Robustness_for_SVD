func	2:0	21:0	0	static void	SplitterPrepare
params	2:27	0:0	1	
param	2:28	2:46	2	vout_display_t *	vd
param	3:28	3:46	2	picture_t *	picture
param	4:28	4:52	2	subpicture_t *	subpicture
stmnts	0:0	20:4	1	
decl	6:4	6:37	2	vout_display_sys_t	*sys
op	6:28	0:0	2	=
water	6:30	0:0	2	vd
op	6:32	0:0	2	->
water	6:34	0:0	2	sys
call	7:4	7:24	2	picture_Hold
arg	7:17	7:24	3	picture
water	7:17	0:0	4	picture
water	7:25	0:0	2	;
call	8:4	8:22	2	assert
arg	8:11	8:22	3	!subpicture
op	8:11	0:0	4	!
water	8:12	0:0	4	subpicture
water	8:23	0:0	2	;
if	9:4	14:4	2	(video_splitter_Filter (sys -> splitter ,sys -> picture ,picture ))
cond	9:8	9:66	3	video_splitter_Filter (sys -> splitter ,sys -> picture ,picture )
call	9:8	9:66	4	video_splitter_Filter
arg	9:30	9:43	5	sys->splitter
water	9:30	0:0	6	sys
op	9:33	0:0	6	->
water	9:35	0:0	6	splitter
arg	9:45	9:57	5	sys->picture
water	9:45	0:0	6	sys
op	9:48	0:0	6	->
water	9:50	0:0	6	picture
arg	9:59	9:66	5	picture
water	9:59	0:0	6	picture
stmts	9:69	14:4	3	
water	9:69	0:0	4	{
for	10:8	11:34	4	( int i = 0 ;i < sys -> count;i ++)
forinit	0:0	10:22	5	 int i = 0 ;
decl	10:13	10:22	6	int	i
op	10:19	0:0	6	=
water	10:21	0:0	6	0
cond	10:24	10:33	5	i < sys -> count
water	10:24	0:0	6	i
op	10:26	0:0	6	<
water	10:28	0:0	6	sys
op	10:31	0:0	6	->
water	10:33	0:0	6	count
forexpr	10:40	10:41	5	i ++
water	10:40	0:0	6	i
op	10:41	0:0	6	++
stmts	11:12	11:34	5	
water	11:12	0:0	6	sys
op	11:15	0:0	6	->
water	11:17	0:0	6	picture
op	11:24	0:0	6	[
water	11:25	0:0	6	i
op	11:26	0:0	6	]
op	11:28	0:0	6	=
water	11:30	0:0	6	NULL
water	11:34	0:0	6	;
call	12:8	12:31	4	picture_Release
arg	12:24	12:31	5	picture
water	12:24	0:0	6	picture
water	12:32	0:0	4	;
return	13:8	13:14	4	
water	14:4	0:0	4	}
for	15:4	20:4	2	( int i = 0 ;i < sys -> count;i ++)
forinit	0:0	15:18	3	 int i = 0 ;
decl	15:9	15:18	4	int	i
op	15:15	0:0	4	=
water	15:17	0:0	4	0
cond	15:20	15:29	3	i < sys -> count
water	15:20	0:0	4	i
op	15:22	0:0	4	<
water	15:24	0:0	4	sys
op	15:27	0:0	4	->
water	15:29	0:0	4	count
forexpr	15:36	15:37	3	i ++
water	15:36	0:0	4	i
op	15:37	0:0	4	++
stmts	15:41	20:4	3	
water	15:41	0:0	4	{
if	16:8	17:82	4	(vout_IsDisplayFiltered (sys -> display [ i ] ))
cond	16:12	16:50	5	vout_IsDisplayFiltered (sys -> display [ i ] )
call	16:12	16:50	6	vout_IsDisplayFiltered
arg	16:35	16:50	7	sys->display[i]
water	16:35	0:0	8	sys
op	16:38	0:0	8	->
water	16:40	0:0	8	display
op	16:47	0:0	8	[
water	16:48	0:0	8	i
op	16:49	0:0	8	]
stmts	17:12	17:82	5	
water	17:12	0:0	6	sys
op	17:15	0:0	6	->
water	17:17	0:0	6	picture
op	17:24	0:0	6	[
water	17:25	0:0	6	i
op	17:26	0:0	6	]
op	17:28	0:0	6	=
call	17:30	17:81	6	vout_FilterDisplay
arg	17:49	17:64	7	sys->display[i]
water	17:49	0:0	8	sys
op	17:52	0:0	8	->
water	17:54	0:0	8	display
op	17:61	0:0	8	[
water	17:62	0:0	8	i
op	17:63	0:0	8	]
arg	17:66	17:81	7	sys->picture[i]
water	17:66	0:0	8	sys
op	17:69	0:0	8	->
water	17:71	0:0	8	picture
op	17:78	0:0	8	[
water	17:79	0:0	8	i
op	17:80	0:0	8	]
water	17:82	0:0	6	;
if	18:8	19:72	4	(sys -> picture [ i ])
cond	18:12	18:26	5	sys -> picture [ i ]
water	18:12	0:0	6	sys
op	18:15	0:0	6	->
water	18:17	0:0	6	picture
op	18:24	0:0	6	[
water	18:25	0:0	6	i
op	18:26	0:0	6	]
stmts	19:12	19:72	5	
call	19:12	19:71	6	vout_display_Prepare
arg	19:33	19:48	7	sys->display[i]
water	19:33	0:0	8	sys
op	19:36	0:0	8	->
water	19:38	0:0	8	display
op	19:45	0:0	8	[
water	19:46	0:0	8	i
op	19:47	0:0	8	]
arg	19:50	19:65	7	sys->picture[i]
water	19:50	0:0	8	sys
op	19:53	0:0	8	->
water	19:55	0:0	8	picture
op	19:62	0:0	8	[
water	19:63	0:0	8	i
op	19:64	0:0	8	]
arg	19:67	19:71	7	NULL
water	19:67	0:0	8	NULL
water	19:72	0:0	6	;
water	20:4	0:0	4	}
