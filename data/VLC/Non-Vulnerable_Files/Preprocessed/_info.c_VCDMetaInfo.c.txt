func	1:0	93:0	0	void	VCDMetaInfo
params	2:11	0:0	1	
param	2:13	2:31	2	access_t *	p_access
param	2:43	2:57	2	char *	psz_mrl
stmnts	0:0	92:2	1	
decl	4:2	4:64	2	vcdplayer_t	*p_vcdplayer
op	4:31	0:0	2	=
water	4:33	0:0	2	(
water	4:34	0:0	2	vcdplayer_t
op	4:46	0:0	2	*
water	4:47	0:0	2	)
water	4:49	0:0	2	p_access
op	4:57	0:0	2	->
water	4:59	0:0	2	p_sys
decl	5:2	5:48	2	input_thread_t	*p_input
op	5:26	0:0	2	=
water	5:28	0:0	2	p_vcdplayer
op	5:39	0:0	2	->
water	5:41	0:0	2	p_input
decl	6:2	6:44	2	vcdinfo_obj_t	*p_vcdev
op	6:26	0:0	2	=
water	6:28	0:0	2	p_vcdplayer
op	6:39	0:0	2	->
water	6:41	0:0	2	vcd
decl	7:2	7:53	2	size_t	i_entries
op	7:19	0:0	2	=
call	7:21	7:52	3	vcdinfo_get_num_entries
arg	7:45	7:52	4	p_vcdev
water	7:45	0:0	5	p_vcdev
decl	8:2	8:23	2	size_t	last_entry
op	8:20	0:0	2	=
water	8:22	0:0	2	0
decl	9:2	9:27	2	char	*psz_cat
op	9:16	0:0	2	=
call	9:18	9:26	3	_
arg	9:20	9:26	4	"Disc"
water	9:20	0:0	5	"Disc"
decl	10:2	10:17	2	track_t	i_track
call	14:2	14:66	2	addstr
arg	14:9	14:24	3	_("VCD Format")
call	14:9	14:23	4	_
arg	14:11	14:23	5	"VCD Format"
water	14:11	0:0	6	"VCD Format"
arg	14:27	14:66	3	vcdinfo_get_format_version_str(p_vcdev)
call	14:27	14:65	4	vcdinfo_get_format_version_str
arg	14:58	14:65	5	p_vcdev
water	14:58	0:0	6	p_vcdev
water	14:67	0:0	2	;
call	15:2	15:66	2	addstr
arg	15:9	15:19	3	_("Album")
call	15:9	15:18	4	_
arg	15:11	15:18	5	"Album"
water	15:11	0:0	6	"Album"
arg	15:27	15:66	3	vcdinfo_get_album_id(p_vcdev)
call	15:27	15:65	4	vcdinfo_get_album_id
arg	15:58	15:65	5	p_vcdev
water	15:58	0:0	6	p_vcdev
water	15:67	0:0	2	;
call	16:2	16:66	2	addstr
arg	16:9	16:25	3	_("Application")
call	16:9	16:24	4	_
arg	16:11	16:24	5	"Application"
water	16:11	0:0	6	"Application"
arg	16:27	16:66	3	vcdinfo_get_application_id(p_vcdev)
call	16:27	16:65	4	vcdinfo_get_application_id
arg	16:58	16:65	5	p_vcdev
water	16:58	0:0	6	p_vcdev
water	16:67	0:0	2	;
call	17:2	17:66	2	addstr
arg	17:9	17:22	3	_("Preparer")
call	17:9	17:21	4	_
arg	17:11	17:21	5	"Preparer"
water	17:11	0:0	6	"Preparer"
arg	17:27	17:66	3	vcdinfo_get_preparer_id(p_vcdev)
call	17:27	17:65	4	vcdinfo_get_preparer_id
arg	17:58	17:65	5	p_vcdev
water	17:58	0:0	6	p_vcdev
water	17:67	0:0	2	;
call	18:2	18:66	2	addnum
arg	18:9	18:19	3	_("Vol #")
call	18:9	18:18	4	_
arg	18:11	18:18	5	"Vol #"
water	18:11	0:0	6	"Vol #"
arg	18:27	18:66	3	vcdinfo_get_volume_num(p_vcdev)
call	18:27	18:65	4	vcdinfo_get_volume_num
arg	18:58	18:65	5	p_vcdev
water	18:58	0:0	6	p_vcdev
water	18:67	0:0	2	;
call	19:2	19:66	2	addnum
arg	19:9	19:23	3	_("Vol max #")
call	19:9	19:22	4	_
arg	19:11	19:22	5	"Vol max #"
water	19:11	0:0	6	"Vol max #"
arg	19:27	19:66	3	vcdinfo_get_volume_count(p_vcdev)
call	19:27	19:65	4	vcdinfo_get_volume_count
arg	19:58	19:65	5	p_vcdev
water	19:58	0:0	6	p_vcdev
water	19:67	0:0	2	;
call	20:2	20:66	2	addstr
arg	20:9	20:24	3	_("Volume Set")
call	20:9	20:23	4	_
arg	20:11	20:23	5	"Volume Set"
water	20:11	0:0	6	"Volume Set"
arg	20:27	20:66	3	vcdinfo_get_volumeset_id(p_vcdev)
call	20:27	20:65	4	vcdinfo_get_volumeset_id
arg	20:58	20:65	5	p_vcdev
water	20:58	0:0	6	p_vcdev
water	20:67	0:0	2	;
call	21:2	21:66	2	addstr
arg	21:9	21:20	3	_("Volume")
call	21:9	21:19	4	_
arg	21:11	21:19	5	"Volume"
water	21:11	0:0	6	"Volume"
arg	21:27	21:66	3	vcdinfo_get_volume_id(p_vcdev)
call	21:27	21:65	4	vcdinfo_get_volume_id
arg	21:58	21:65	5	p_vcdev
water	21:58	0:0	6	p_vcdev
water	21:67	0:0	2	;
call	22:2	22:66	2	addstr
arg	22:9	22:23	3	_("Publisher")
call	22:9	22:22	4	_
arg	22:11	22:22	5	"Publisher"
water	22:11	0:0	6	"Publisher"
arg	22:27	22:66	3	vcdinfo_get_publisher_id(p_vcdev)
call	22:27	22:65	4	vcdinfo_get_publisher_id
arg	22:58	22:65	5	p_vcdev
water	22:58	0:0	6	p_vcdev
water	22:67	0:0	2	;
call	23:2	23:66	2	addstr
arg	23:9	23:23	3	_("System Id")
call	23:9	23:22	4	_
arg	23:11	23:22	5	"System Id"
water	23:11	0:0	6	"System Id"
arg	23:27	23:66	3	vcdinfo_get_system_id(p_vcdev)
call	23:27	23:65	4	vcdinfo_get_system_id
arg	23:58	23:65	5	p_vcdev
water	23:58	0:0	6	p_vcdev
water	23:67	0:0	2	;
call	24:2	24:66	2	addnum
arg	24:9	24:15	3	"LIDs"
water	24:9	0:0	4	"LIDs"
arg	24:27	24:66	3	vcdinfo_get_num_LIDs(p_vcdev)
call	24:27	24:65	4	vcdinfo_get_num_LIDs
arg	24:58	24:65	5	p_vcdev
water	24:58	0:0	6	p_vcdev
water	24:67	0:0	2	;
call	25:2	25:66	2	addnum
arg	25:9	25:21	3	_("Entries")
call	25:9	25:20	4	_
arg	25:11	25:20	5	"Entries"
water	25:11	0:0	6	"Entries"
arg	25:27	25:66	3	vcdinfo_get_num_entries(p_vcdev)
call	25:27	25:65	4	vcdinfo_get_num_entries
arg	25:58	25:65	5	p_vcdev
water	25:58	0:0	6	p_vcdev
water	25:67	0:0	2	;
call	26:2	26:66	2	addnum
arg	26:9	26:22	3	_("Segments")
call	26:9	26:21	4	_
arg	26:11	26:21	5	"Segments"
water	26:11	0:0	6	"Segments"
arg	26:27	26:66	3	vcdinfo_get_num_segments(p_vcdev)
call	26:27	26:65	4	vcdinfo_get_num_segments
arg	26:58	26:65	5	p_vcdev
water	26:58	0:0	6	p_vcdev
water	26:67	0:0	2	;
call	27:2	27:66	2	addnum
arg	27:9	27:20	3	_("Tracks")
call	27:9	27:19	4	_
arg	27:11	27:19	5	"Tracks"
water	27:11	0:0	6	"Tracks"
arg	27:27	27:66	3	vcdinfo_get_num_tracks(p_vcdev)
call	27:27	27:65	4	vcdinfo_get_num_tracks
arg	27:58	27:65	5	p_vcdev
water	27:58	0:0	6	p_vcdev
water	27:67	0:0	2	;
for	31:2	43:2	2	(i_track = 1 ;i_track < p_vcdplayer -> i_tracks;i_track ++)
forinit	31:7	31:19	3	i_track = 1 ;
water	31:7	0:0	4	i_track
op	31:15	0:0	4	=
water	31:17	0:0	4	1
water	31:19	0:0	4	;
cond	31:21	31:44	3	i_track < p_vcdplayer -> i_tracks
water	31:21	0:0	4	i_track
op	31:29	0:0	4	<
water	31:31	0:0	4	p_vcdplayer
op	31:42	0:0	4	->
water	31:44	0:0	4	i_tracks
forexpr	31:55	31:62	3	i_track ++
water	31:55	0:0	4	i_track
op	31:62	0:0	4	++
stmts	31:67	43:2	3	
water	31:67	0:0	4	{
decl	32:4	32:76	4	unsigned int	audio_type
op	32:28	0:0	4	=
call	32:30	32:75	5	vcdinfo_get_track_audio_type
arg	32:59	32:66	6	p_vcdev
water	32:59	0:0	7	p_vcdev
arg	32:68	32:75	6	i_track
water	32:68	0:0	7	i_track
decl	33:4	33:71	4	uint32_t	i_secsize
op	33:23	0:0	4	=
call	33:25	33:70	5	vcdinfo_get_track_sect_count
arg	33:54	33:61	6	p_vcdev
water	33:54	0:0	7	p_vcdev
arg	33:63	33:70	6	i_track
water	33:63	0:0	7	i_track
if	34:4	37:4	4	(p_vcdplayer -> b_svd)
cond	34:8	34:21	5	p_vcdplayer -> b_svd
water	34:8	0:0	6	p_vcdplayer
op	34:19	0:0	6	->
water	34:21	0:0	6	b_svd
stmts	34:28	37:4	5	
water	34:28	0:0	6	{
call	35:6	36:66	6	addnum
arg	35:13	35:32	7	_("Audio Channels")
call	35:13	35:31	8	_
arg	35:15	35:31	9	"Audio Channels"
water	35:15	0:0	10	"Audio Channels"
arg	36:13	36:66	7	vcdinfo_audio_type_num_channels(p_vcdev,audio_type)
call	36:13	36:64	8	vcdinfo_audio_type_num_channels
arg	36:45	36:52	9	p_vcdev
water	36:45	0:0	10	p_vcdev
arg	36:54	36:64	9	audio_type
water	36:54	0:0	10	audio_type
water	36:67	0:0	6	;
water	37:4	0:0	6	}
call	38:4	38:37	4	addnum
arg	38:11	38:33	5	_("First Entry Point")
call	38:11	38:32	6	_
arg	38:13	38:32	7	"First Entry Point"
water	38:13	0:0	8	"First Entry Point"
arg	38:35	38:37	5	0
water	38:35	0:0	6	0
water	38:38	0:0	4	;
for	39:4	40:77	4	(last_entry = 0 ;last_entry < i_entries &&vcdinfo_get_track (p_vcdev ,last_entry ) == i_track;last_entry ++)
forinit	39:10	39:25	5	last_entry = 0 ;
water	39:10	0:0	6	last_entry
op	39:21	0:0	6	=
water	39:23	0:0	6	0
water	39:25	0:0	6	;
cond	39:27	40:53	5	last_entry < i_entries &&vcdinfo_get_track (p_vcdev ,last_entry ) == i_track
water	39:27	0:0	6	last_entry
op	39:38	0:0	6	<
water	39:40	0:0	6	i_entries
op	40:8	0:0	6	&&
call	40:11	40:48	6	vcdinfo_get_track
arg	40:29	40:36	7	p_vcdev
water	40:29	0:0	8	p_vcdev
arg	40:38	40:48	7	last_entry
water	40:38	0:0	8	last_entry
op	40:50	0:0	6	==
water	40:53	0:0	6	i_track
forexpr	40:62	40:72	5	last_entry ++
water	40:62	0:0	6	last_entry
op	40:72	0:0	6	++
stmts	40:77	40:77	5	
water	40:77	0:0	6	;
call	41:4	41:47	4	addnum
arg	41:11	41:32	5	_("Last Entry Point")
call	41:11	41:31	6	_
arg	41:13	41:31	7	"Last Entry Point"
water	41:13	0:0	8	"Last Entry Point"
arg	41:34	41:47	5	last_entry-1
water	41:34	0:0	6	last_entry
op	41:44	0:0	6	-
water	41:45	0:0	6	1
water	41:48	0:0	4	;
call	42:4	42:51	4	addnum
arg	42:11	42:39	5	_("Track size (in sectors)")
call	42:11	42:38	6	_
arg	42:13	42:38	7	"Track size (in sectors)"
water	42:13	0:0	8	"Track size (in sectors)"
arg	42:41	42:51	5	i_secsize
water	42:41	0:0	6	i_secsize
water	42:52	0:0	4	;
water	43:2	0:0	4	}
water	44:2	0:0	2	{
decl	45:4	45:15	2	lid_t	i_lid
for	46:4	79:4	2	(i_lid = 1 ;i_lid <= p_vcdplayer -> i_lids;i_lid ++)
forinit	46:9	46:19	3	i_lid = 1 ;
water	46:9	0:0	4	i_lid
op	46:15	0:0	4	=
water	46:17	0:0	4	1
water	46:19	0:0	4	;
cond	46:21	46:43	3	i_lid <= p_vcdplayer -> i_lids
water	46:21	0:0	4	i_lid
op	46:27	0:0	4	<=
water	46:30	0:0	4	p_vcdplayer
op	46:41	0:0	4	->
water	46:43	0:0	4	i_lids
forexpr	46:52	46:57	3	i_lid ++
water	46:52	0:0	4	i_lid
op	46:57	0:0	4	++
stmts	46:62	79:4	3	
water	46:62	0:0	4	{
decl	47:6	47:29	4	PsdListDescriptor_t	pxd
if	48:6	78:6	4	(vcdinfo_lid_get_pxd (p_vcdev ,& pxd ,i_lid ))
cond	48:10	48:50	5	vcdinfo_lid_get_pxd (p_vcdev ,& pxd ,i_lid )
call	48:10	48:50	6	vcdinfo_lid_get_pxd
arg	48:30	48:37	7	p_vcdev
water	48:30	0:0	8	p_vcdev
arg	48:39	48:43	7	&pxd
op	48:39	0:0	8	&
water	48:40	0:0	8	pxd
arg	48:45	48:50	7	i_lid
water	48:45	0:0	8	i_lid
stmts	48:53	78:6	5	
water	48:53	0:0	6	{
switch	49:4	77:4	6	(pxd . descriptor_type)
cond	49:12	49:16	7	pxd . descriptor_type
water	49:12	0:0	8	pxd
op	49:15	0:0	8	.
water	49:16	0:0	8	descriptor_type
stmts	49:33	77:4	7	
water	49:33	0:0	8	{
label	50:4	50:26	8	case PSD_TYPE_END_LIST :
call	51:6	51:32	8	addstr
arg	51:13	51:22	9	_("type")
call	51:13	51:21	10	_
arg	51:15	51:21	11	"type"
water	51:15	0:0	12	"type"
arg	51:24	51:32	9	_("end")
call	51:24	51:31	10	_
arg	51:26	51:31	11	"end"
water	51:26	0:0	12	"end"
water	51:33	0:0	8	;
break	52:6	52:11	8	
label	53:4	53:27	8	case PSD_TYPE_PLAY_LIST :
call	54:6	54:38	8	addstr
arg	54:13	54:22	9	_("type")
call	54:13	54:21	10	_
arg	54:15	54:21	11	"type"
water	54:15	0:0	12	"type"
arg	54:24	54:38	9	_("play list")
call	54:24	54:37	10	_
arg	54:26	54:37	11	"play list"
water	54:26	0:0	12	"play list"
water	54:39	0:0	8	;
call	55:6	55:53	8	addnum
arg	55:13	55:20	9	"items"
water	55:13	0:0	10	"items"
arg	55:26	55:53	9	vcdinf_pld_get_noi(pxd.pld)
call	55:26	55:52	10	vcdinf_pld_get_noi
arg	55:45	55:52	11	pxd.pld
water	55:45	0:0	12	pxd
op	55:48	0:0	12	.
water	55:49	0:0	12	pld
water	55:54	0:0	8	;
call	56:6	56:61	8	addhex
arg	56:13	56:19	9	"next"
water	56:13	0:0	10	"next"
arg	56:26	56:61	9	vcdinf_pld_get_next_offset(pxd.pld)
call	56:26	56:60	10	vcdinf_pld_get_next_offset
arg	56:53	56:60	11	pxd.pld
water	56:53	0:0	12	pxd
op	56:56	0:0	12	.
water	56:57	0:0	12	pld
water	56:62	0:0	8	;
call	57:6	57:61	8	addhex
arg	57:13	57:23	9	"previous"
water	57:13	0:0	10	"previous"
arg	57:26	57:61	9	vcdinf_pld_get_prev_offset(pxd.pld)
call	57:26	57:60	10	vcdinf_pld_get_prev_offset
arg	57:53	57:60	11	pxd.pld
water	57:53	0:0	12	pxd
op	57:56	0:0	12	.
water	57:57	0:0	12	pld
water	57:62	0:0	8	;
call	58:6	58:63	8	addhex
arg	58:13	58:21	9	"return"
water	58:13	0:0	10	"return"
arg	58:26	58:63	9	vcdinf_pld_get_return_offset(pxd.pld)
call	58:26	58:62	10	vcdinf_pld_get_return_offset
arg	58:55	58:62	11	pxd.pld
water	58:55	0:0	12	pxd
op	58:58	0:0	12	.
water	58:59	0:0	12	pld
water	58:64	0:0	8	;
call	59:6	59:55	8	addnum
arg	59:13	59:24	9	"wait time"
water	59:13	0:0	10	"wait time"
arg	59:26	59:55	9	vcdinf_get_wait_time(pxd.pld)
call	59:26	59:54	10	vcdinf_get_wait_time
arg	59:47	59:54	11	pxd.pld
water	59:47	0:0	12	pxd
op	59:50	0:0	12	.
water	59:51	0:0	12	pld
water	59:56	0:0	8	;
break	60:6	60:11	8	
label	61:4	61:32	8	case PSD_TYPE_SELECTION_LIST :
label	62:4	62:36	8	case PSD_TYPE_EXT_SELECTION_LIST :
call	63:6	64:66	8	addstr
arg	63:13	63:22	9	_("type")
call	63:13	63:21	10	_
arg	63:15	63:21	11	"type"
water	63:15	0:0	12	"type"
arg	63:24	64:66	9	PSD_TYPE_SELECTION_LIST==pxd.descriptor_type?_("extended selection list"):_("selection list")
water	63:24	0:0	10	PSD_TYPE_SELECTION_LIST
op	63:48	0:0	10	==
water	63:51	0:0	10	pxd
op	63:54	0:0	10	.
water	63:55	0:0	10	descriptor_type
water	64:13	0:0	10	?
call	64:15	64:42	10	_
arg	64:17	64:42	11	"extended selection list"
water	64:17	0:0	12	"extended selection list"
water	64:44	0:0	10	:
call	64:46	64:64	10	_
arg	64:48	64:64	11	"selection list"
water	64:48	0:0	12	"selection list"
water	64:67	0:0	8	;
call	65:6	65:71	8	addhex
arg	65:13	65:22	9	"default"
water	65:13	0:0	10	"default"
arg	65:33	65:71	9	vcdinf_psd_get_default_offset(pxd.psd)
call	65:33	65:70	10	vcdinf_psd_get_default_offset
arg	65:63	65:70	11	pxd.psd
water	65:63	0:0	12	pxd
op	65:66	0:0	12	.
water	65:67	0:0	12	psd
water	65:72	0:0	8	;
call	66:6	66:63	8	addhex
arg	66:13	66:25	9	"loop count"
water	66:13	0:0	10	"loop count"
arg	66:33	66:63	9	vcdinf_get_loop_count(pxd.psd)
call	66:33	66:62	10	vcdinf_get_loop_count
arg	66:55	66:62	11	pxd.psd
water	66:55	0:0	12	pxd
op	66:58	0:0	12	.
water	66:59	0:0	12	psd
water	66:64	0:0	8	;
call	67:6	67:68	8	addhex
arg	67:13	67:19	9	"next"
water	67:13	0:0	10	"next"
arg	67:33	67:68	9	vcdinf_psd_get_next_offset(pxd.psd)
call	67:33	67:67	10	vcdinf_psd_get_next_offset
arg	67:60	67:67	11	pxd.psd
water	67:60	0:0	12	pxd
op	67:63	0:0	12	.
water	67:64	0:0	12	psd
water	67:69	0:0	8	;
call	68:6	68:68	8	addhex
arg	68:13	68:23	9	"previous"
water	68:13	0:0	10	"previous"
arg	68:33	68:68	9	vcdinf_psd_get_prev_offset(pxd.psd)
call	68:33	68:67	10	vcdinf_psd_get_prev_offset
arg	68:60	68:67	11	pxd.psd
water	68:60	0:0	12	pxd
op	68:63	0:0	12	.
water	68:64	0:0	12	psd
water	68:69	0:0	8	;
call	69:6	69:70	8	addhex
arg	69:13	69:21	9	"return"
water	69:13	0:0	10	"return"
arg	69:33	69:70	9	vcdinf_psd_get_return_offset(pxd.psd)
call	69:33	69:69	10	vcdinf_psd_get_return_offset
arg	69:62	69:69	11	pxd.psd
water	69:62	0:0	12	pxd
op	69:65	0:0	12	.
water	69:66	0:0	12	psd
water	69:71	0:0	8	;
call	70:6	70:69	8	addhex
arg	70:13	70:23	9	"rejected"
water	70:13	0:0	10	"rejected"
arg	70:33	70:69	9	vcdinf_psd_get_lid_rejected(pxd.psd)
call	70:33	70:68	10	vcdinf_psd_get_lid_rejected
arg	70:61	70:68	11	pxd.psd
water	70:61	0:0	12	pxd
op	70:64	0:0	12	.
water	70:65	0:0	12	psd
water	70:70	0:0	8	;
call	71:6	71:67	8	addhex
arg	71:13	71:30	9	"time-out offset"
water	71:13	0:0	10	"time-out offset"
arg	71:33	71:67	9	vcdinf_get_timeout_offset(pxd.psd)
call	71:33	71:66	10	vcdinf_get_timeout_offset
arg	71:59	71:66	11	pxd.psd
water	71:59	0:0	12	pxd
op	71:62	0:0	12	.
water	71:63	0:0	12	psd
water	71:68	0:0	8	;
call	72:6	72:65	8	addnum
arg	72:13	72:28	9	"time-out time"
water	72:13	0:0	10	"time-out time"
arg	72:33	72:65	9	vcdinf_get_timeout_time(pxd.psd)
call	72:33	72:64	10	vcdinf_get_timeout_time
arg	72:57	72:64	11	pxd.psd
water	72:57	0:0	12	pxd
op	72:60	0:0	12	.
water	72:61	0:0	12	psd
water	72:66	0:0	8	;
break	73:6	73:11	8	
label	74:4	74:11	8	default :
call	75:6	75:41	8	addstr
arg	75:13	75:22	9	_("type")
call	75:13	75:21	10	_
arg	75:15	75:21	11	"type"
water	75:15	0:0	12	"type"
arg	75:24	75:41	9	_("unknown type")
call	75:24	75:40	10	_
arg	75:26	75:40	11	"unknown type"
water	75:26	0:0	12	"unknown type"
water	75:42	0:0	8	;
break	76:6	76:11	8	
water	77:4	0:0	8	}
water	78:6	0:0	6	}
water	79:4	0:0	4	}
water	80:2	0:0	2	}
if	84:2	92:2	2	(CDIO_INVALID_TRACK != i_track)
cond	84:7	84:29	3	CDIO_INVALID_TRACK != i_track
water	84:7	0:0	4	CDIO_INVALID_TRACK
op	84:26	0:0	4	!=
water	84:29	0:0	4	i_track
stmts	85:2	92:2	3	
water	85:2	0:0	4	{
decl	86:4	86:81	4	char	*psz_tfmt
op	86:19	0:0	4	=
call	86:21	86:80	5	var_InheritString
arg	86:40	86:48	6	p_access
water	86:40	0:0	7	p_access
arg	86:50	86:80	6	MODULE_STRING"-title-format"
water	86:50	0:0	7	MODULE_STRING
water	86:64	0:0	7	"-title-format"
decl	87:4	88:77	4	char	*psz_name
op	87:19	0:0	4	=
call	87:21	88:76	5	VCDFormatStr
arg	87:35	87:46	6	p_vcdplayer
water	87:35	0:0	7	p_vcdplayer
arg	87:48	87:56	6	psz_tfmt
water	87:48	0:0	7	psz_tfmt
arg	87:58	87:65	6	psz_mrl
water	87:58	0:0	7	psz_mrl
arg	88:50	88:76	6	&(p_vcdplayer->play_item)
op	88:50	0:0	7	&
water	88:51	0:0	7	(
water	88:52	0:0	7	p_vcdplayer
op	88:63	0:0	7	->
water	88:65	0:0	7	play_item
water	88:74	0:0	7	)
call	89:4	89:19	4	free
arg	89:10	89:19	5	psz_tfmt
water	89:10	0:0	6	psz_tfmt
water	89:20	0:0	4	;
call	90:4	90:53	4	input_Control
arg	90:19	90:26	5	p_input
water	90:19	0:0	6	p_input
arg	90:28	90:42	5	INPUT_SET_NAME
water	90:28	0:0	6	INPUT_SET_NAME
arg	90:44	90:53	5	psz_name
water	90:44	0:0	6	psz_name
water	90:54	0:0	4	;
call	91:4	91:19	4	free
arg	91:10	91:19	5	psz_name
water	91:10	0:0	6	psz_name
water	91:20	0:0	4	;
water	92:2	0:0	4	}
