func	2:0	58:0	0	int	es_format_Copy
params	2:18	0:0	1	
param	2:20	2:36	2	es_format_t *	dst
param	2:38	2:61	2	const es_format_t *	src
stmnts	0:0	57:22	1	
decl	4:4	4:9	2	int	i
call	5:4	5:44	2	memcpy
arg	5:12	5:15	3	dst
water	5:12	0:0	4	dst
arg	5:17	5:20	3	src
water	5:17	0:0	4	src
arg	5:22	5:44	3	sizeof(es_format_t)
op	5:22	0:0	4	sizeof
water	5:28	0:0	4	(
water	5:30	0:0	4	es_format_t
water	5:42	0:0	4	)
water	5:45	0:0	2	;
water	6:4	0:0	2	dst
op	6:7	0:0	2	->
water	6:9	0:0	2	psz_language
op	6:22	0:0	2	=
water	6:24	0:0	2	src
op	6:27	0:0	2	->
water	6:29	0:0	2	psz_language
water	6:42	0:0	2	?
call	6:44	6:70	2	strdup
arg	6:52	6:70	3	src->psz_language
water	6:52	0:0	4	src
op	6:55	0:0	4	->
water	6:57	0:0	4	psz_language
water	6:72	0:0	2	:
water	6:74	0:0	2	NULL
water	6:78	0:0	2	;
water	7:4	0:0	2	dst
op	7:7	0:0	2	->
water	7:9	0:0	2	psz_description
op	7:25	0:0	2	=
water	7:27	0:0	2	src
op	7:30	0:0	2	->
water	7:32	0:0	2	psz_description
water	7:48	0:0	2	?
call	7:50	7:79	2	strdup
arg	7:58	7:79	3	src->psz_description
water	7:58	0:0	4	src
op	7:61	0:0	4	->
water	7:63	0:0	4	psz_description
water	7:81	0:0	2	:
water	7:83	0:0	2	NULL
water	7:87	0:0	2	;
if	8:4	16:4	2	(src -> i_extra > 0 && dst -> p_extra)
cond	8:8	8:33	3	src -> i_extra > 0 && dst -> p_extra
water	8:8	0:0	4	src
op	8:11	0:0	4	->
water	8:13	0:0	4	i_extra
op	8:21	0:0	4	>
water	8:23	0:0	4	0
op	8:25	0:0	4	&&
water	8:28	0:0	4	dst
op	8:31	0:0	4	->
water	8:33	0:0	4	p_extra
stmts	9:4	16:4	3	
water	9:4	0:0	4	{
water	10:8	0:0	4	dst
op	10:11	0:0	4	->
water	10:13	0:0	4	i_extra
op	10:21	0:0	4	=
water	10:23	0:0	4	src
op	10:26	0:0	4	->
water	10:28	0:0	4	i_extra
water	10:35	0:0	4	;
water	11:8	0:0	4	dst
op	11:11	0:0	4	->
water	11:13	0:0	4	p_extra
op	11:21	0:0	4	=
call	11:23	11:44	4	malloc
arg	11:31	11:44	5	src->i_extra
water	11:31	0:0	6	src
op	11:34	0:0	6	->
water	11:36	0:0	6	i_extra
water	11:45	0:0	4	;
if	12:8	13:62	4	(dst -> p_extra)
cond	12:11	12:16	5	dst -> p_extra
water	12:11	0:0	6	dst
op	12:14	0:0	6	->
water	12:16	0:0	6	p_extra
stmts	13:12	13:62	5	
call	13:12	13:61	6	memcpy
arg	13:20	13:32	7	dst->p_extra
water	13:20	0:0	8	dst
op	13:23	0:0	8	->
water	13:25	0:0	8	p_extra
arg	13:34	13:46	7	src->p_extra
water	13:34	0:0	8	src
op	13:37	0:0	8	->
water	13:39	0:0	8	p_extra
arg	13:48	13:61	7	src->i_extra
water	13:48	0:0	8	src
op	13:51	0:0	8	->
water	13:53	0:0	8	i_extra
water	13:62	0:0	6	;
else	14:8	15:28	4
stmts	15:12	15:28	5	
water	15:12	0:0	6	dst
op	15:15	0:0	6	->
water	15:17	0:0	6	i_extra
op	15:25	0:0	6	=
water	15:27	0:0	6	0
water	15:28	0:0	6	;
water	16:4	0:0	4	}
else	17:4	21:4	2
stmts	18:4	21:4	3	
water	18:4	0:0	4	{
water	19:8	0:0	4	dst
op	19:11	0:0	4	->
water	19:13	0:0	4	i_extra
op	19:21	0:0	4	=
water	19:23	0:0	4	0
water	19:24	0:0	4	;
water	20:8	0:0	4	dst
op	20:11	0:0	4	->
water	20:13	0:0	4	p_extra
op	20:21	0:0	4	=
water	20:23	0:0	4	NULL
water	20:27	0:0	4	;
water	21:4	0:0	4	}
water	22:4	0:0	2	dst
op	22:7	0:0	2	->
water	22:9	0:0	2	subs
op	22:13	0:0	2	.
water	22:14	0:0	2	psz_encoding
op	22:27	0:0	2	=
water	22:29	0:0	2	dst
op	22:32	0:0	2	->
water	22:34	0:0	2	subs
op	22:38	0:0	2	.
water	22:39	0:0	2	psz_encoding
water	22:52	0:0	2	?
call	22:54	22:85	2	strdup
arg	22:62	22:85	3	src->subs.psz_encoding
water	22:62	0:0	4	src
op	22:65	0:0	4	->
water	22:67	0:0	4	subs
op	22:71	0:0	4	.
water	22:72	0:0	4	psz_encoding
water	22:87	0:0	2	:
water	22:89	0:0	2	NULL
water	22:93	0:0	2	;
water	23:4	0:0	2	dst
op	23:7	0:0	2	->
water	23:9	0:0	2	subs
op	23:13	0:0	2	.
water	23:14	0:0	2	p_style
op	23:22	0:0	2	=
water	23:24	0:0	2	src
op	23:27	0:0	2	->
water	23:29	0:0	2	subs
op	23:33	0:0	2	.
water	23:34	0:0	2	p_style
water	23:42	0:0	2	?
call	23:44	23:84	2	text_style_Duplicate
arg	23:66	23:84	3	src->subs.p_style
water	23:66	0:0	4	src
op	23:69	0:0	4	->
water	23:71	0:0	4	subs
op	23:75	0:0	4	.
water	23:76	0:0	4	p_style
water	23:86	0:0	2	:
water	23:88	0:0	2	NULL
water	23:92	0:0	2	;
if	24:4	33:4	2	(src -> video . p_palette)
cond	24:8	24:19	3	src -> video . p_palette
water	24:8	0:0	4	src
op	24:11	0:0	4	->
water	24:13	0:0	4	video
op	24:18	0:0	4	.
water	24:19	0:0	4	p_palette
stmts	25:4	33:4	3	
water	25:4	0:0	4	{
water	26:8	0:0	4	dst
op	26:11	0:0	4	->
water	26:13	0:0	4	video
op	26:18	0:0	4	.
water	26:19	0:0	4	p_palette
op	26:29	0:0	4	=
water	27:12	0:0	4	(
water	27:13	0:0	4	video_palette_t
op	27:28	0:0	4	*
water	27:29	0:0	4	)
call	27:30	27:64	4	malloc
arg	27:38	27:64	5	sizeof(video_palette_t)
op	27:38	0:0	6	sizeof
water	27:44	0:0	6	(
water	27:46	0:0	6	video_palette_t
water	27:62	0:0	6	)
water	27:65	0:0	4	;
if	28:8	32:8	4	(dst -> video . p_palette)
cond	28:11	28:22	5	dst -> video . p_palette
water	28:11	0:0	6	dst
op	28:14	0:0	6	->
water	28:16	0:0	6	video
op	28:21	0:0	6	.
water	28:22	0:0	6	p_palette
stmts	29:8	32:8	5	
water	29:8	0:0	6	{
call	30:12	31:42	6	memcpy
arg	30:20	30:40	7	dst->video.p_palette
water	30:20	0:0	8	dst
op	30:23	0:0	8	->
water	30:25	0:0	8	video
op	30:30	0:0	8	.
water	30:31	0:0	8	p_palette
arg	30:42	30:62	7	src->video.p_palette
water	30:42	0:0	8	src
op	30:45	0:0	8	->
water	30:47	0:0	8	video
op	30:52	0:0	8	.
water	30:53	0:0	8	p_palette
arg	31:16	31:42	7	sizeof(video_palette_t)
op	31:16	0:0	8	sizeof
water	31:22	0:0	8	(
water	31:24	0:0	8	video_palette_t
water	31:40	0:0	8	)
water	31:43	0:0	6	;
water	32:8	0:0	6	}
water	33:4	0:0	4	}
if	34:4	54:4	2	(dst -> i_extra_languages && src -> p_extra_languages)
cond	34:8	34:39	3	dst -> i_extra_languages && src -> p_extra_languages
water	34:8	0:0	4	dst
op	34:11	0:0	4	->
water	34:13	0:0	4	i_extra_languages
op	34:31	0:0	4	&&
water	34:34	0:0	4	src
op	34:37	0:0	4	->
water	34:39	0:0	4	p_extra_languages
stmts	35:4	54:4	3	
water	35:4	0:0	4	{
water	36:8	0:0	4	dst
op	36:11	0:0	4	->
water	36:13	0:0	4	i_extra_languages
op	36:31	0:0	4	=
water	36:33	0:0	4	src
op	36:36	0:0	4	->
water	36:38	0:0	4	i_extra_languages
water	36:55	0:0	4	;
water	37:8	0:0	4	dst
op	37:11	0:0	4	->
water	37:13	0:0	4	p_extra_languages
op	37:31	0:0	4	=
water	37:33	0:0	4	(
water	37:34	0:0	4	extra_languages_t
op	37:51	0:0	4	*
water	37:52	0:0	4	)
call	38:12	38:76	4	malloc
arg	38:19	38:76	5	dst->i_extra_languages*sizeof(*dst->p_extra_languages)
water	38:19	0:0	6	dst
op	38:22	0:0	6	->
water	38:24	0:0	6	i_extra_languages
op	38:42	0:0	6	*
op	38:44	0:0	6	sizeof
water	38:50	0:0	6	(
op	38:51	0:0	6	*
water	38:52	0:0	6	dst
op	38:55	0:0	6	->
water	38:57	0:0	6	p_extra_languages
water	38:75	0:0	6	)
water	38:77	0:0	4	;
if	39:8	51:8	4	(dst -> p_extra_languages)
cond	39:12	39:17	5	dst -> p_extra_languages
water	39:12	0:0	6	dst
op	39:15	0:0	6	->
water	39:17	0:0	6	p_extra_languages
stmts	40:8	51:8	5	
water	40:8	0:0	6	{
for	41:12	50:12	6	(i = 0 ;i < dst -> i_extra_languages;i ++)
forinit	41:17	41:22	7	i = 0 ;
water	41:17	0:0	8	i
op	41:19	0:0	8	=
water	41:21	0:0	8	0
water	41:22	0:0	8	;
cond	41:24	41:33	7	i < dst -> i_extra_languages
water	41:24	0:0	8	i
op	41:26	0:0	8	<
water	41:28	0:0	8	dst
op	41:31	0:0	8	->
water	41:33	0:0	8	i_extra_languages
forexpr	41:52	41:53	7	i ++
water	41:52	0:0	8	i
op	41:53	0:0	8	++
stmts	41:58	50:12	7	
water	41:58	0:0	8	{
if	42:16	43:109	8	(src -> p_extra_languages [ i ] . psz_language)
cond	42:20	42:46	9	src -> p_extra_languages [ i ] . psz_language
water	42:20	0:0	10	src
op	42:23	0:0	10	->
water	42:25	0:0	10	p_extra_languages
op	42:42	0:0	10	[
water	42:43	0:0	10	i
op	42:44	0:0	10	]
op	42:45	0:0	10	.
water	42:46	0:0	10	psz_language
stmts	43:20	43:109	9	
water	43:20	0:0	10	dst
op	43:23	0:0	10	->
water	43:25	0:0	10	p_extra_languages
op	43:42	0:0	10	[
water	43:43	0:0	10	i
op	43:44	0:0	10	]
op	43:45	0:0	10	.
water	43:46	0:0	10	psz_language
op	43:59	0:0	10	=
call	43:61	43:108	10	strdup
arg	43:69	43:108	11	src->p_extra_languages[i].psz_language
water	43:69	0:0	12	src
op	43:72	0:0	12	->
water	43:74	0:0	12	p_extra_languages
op	43:91	0:0	12	[
water	43:92	0:0	12	i
op	43:93	0:0	12	]
op	43:94	0:0	12	.
water	43:95	0:0	12	psz_language
water	43:109	0:0	10	;
else	44:16	45:65	8
stmts	45:20	45:65	9	
water	45:20	0:0	10	dst
op	45:23	0:0	10	->
water	45:25	0:0	10	p_extra_languages
op	45:42	0:0	10	[
water	45:43	0:0	10	i
op	45:44	0:0	10	]
op	45:45	0:0	10	.
water	45:46	0:0	10	psz_language
op	45:59	0:0	10	=
water	45:61	0:0	10	NULL
water	45:65	0:0	10	;
if	46:16	47:115	8	(src -> p_extra_languages [ i ] . psz_description)
cond	46:20	46:46	9	src -> p_extra_languages [ i ] . psz_description
water	46:20	0:0	10	src
op	46:23	0:0	10	->
water	46:25	0:0	10	p_extra_languages
op	46:42	0:0	10	[
water	46:43	0:0	10	i
op	46:44	0:0	10	]
op	46:45	0:0	10	.
water	46:46	0:0	10	psz_description
stmts	47:20	47:115	9	
water	47:20	0:0	10	dst
op	47:23	0:0	10	->
water	47:25	0:0	10	p_extra_languages
op	47:42	0:0	10	[
water	47:43	0:0	10	i
op	47:44	0:0	10	]
op	47:45	0:0	10	.
water	47:46	0:0	10	psz_description
op	47:62	0:0	10	=
call	47:64	47:114	10	strdup
arg	47:72	47:114	11	src->p_extra_languages[i].psz_description
water	47:72	0:0	12	src
op	47:75	0:0	12	->
water	47:77	0:0	12	p_extra_languages
op	47:94	0:0	12	[
water	47:95	0:0	12	i
op	47:96	0:0	12	]
op	47:97	0:0	12	.
water	47:98	0:0	12	psz_description
water	47:115	0:0	10	;
else	48:16	49:68	8
stmts	49:20	49:68	9	
water	49:20	0:0	10	dst
op	49:23	0:0	10	->
water	49:25	0:0	10	p_extra_languages
op	49:42	0:0	10	[
water	49:43	0:0	10	i
op	49:44	0:0	10	]
op	49:45	0:0	10	.
water	49:46	0:0	10	psz_description
op	49:62	0:0	10	=
water	49:64	0:0	10	NULL
water	49:68	0:0	10	;
water	50:12	0:0	8	}
water	51:8	0:0	6	}
else	52:8	53:38	4
stmts	53:12	53:38	5	
water	53:12	0:0	6	dst
op	53:15	0:0	6	->
water	53:17	0:0	6	i_extra_languages
op	53:35	0:0	6	=
water	53:37	0:0	6	0
water	53:38	0:0	6	;
water	54:4	0:0	4	}
else	55:4	56:34	2
stmts	56:8	56:34	3	
water	56:8	0:0	4	dst
op	56:11	0:0	4	->
water	56:13	0:0	4	i_extra_languages
op	56:31	0:0	4	=
water	56:33	0:0	4	0
water	56:34	0:0	4	;
return	57:4	57:22	2	VLC_SUCCESS
water	57:11	0:0	3	VLC_SUCCESS
