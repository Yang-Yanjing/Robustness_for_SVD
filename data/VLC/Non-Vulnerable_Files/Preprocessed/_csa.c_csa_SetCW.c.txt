func	2:0	45:0	0	int	csa_SetCW
params	2:13	0:0	1	
param	2:15	2:37	2	vlc_object_t *	p_caller
param	2:39	2:47	2	csa_t *	c
param	2:49	2:61	2	char *	psz_ck
param	2:63	2:76	2	bool	set_odd
stmnts	4:4	44:4	1	
if	4:4	8:4	2	(! c)
cond	4:9	4:10	3	! c
op	4:9	0:0	4	!
water	4:10	0:0	4	c
stmts	5:4	8:4	3	
water	5:4	0:0	4	{
call	6:8	6:42	4	msg_Dbg
arg	6:17	6:25	5	p_caller
water	6:17	0:0	6	p_caller
arg	6:27	6:42	5	"no CSA found"
water	6:27	0:0	6	"no CSA found"
water	6:43	0:0	4	;
return	7:8	7:25	4	VLC_ENOOBJ
water	7:15	0:0	5	VLC_ENOOBJ
water	8:4	0:0	4	}
if	10:4	13:4	2	(psz_ck [ 0 ] == '0' && ( psz_ck [ 1 ] == 'x' || psz_ck [ 1 ] == 'X' ))
cond	10:8	10:67	3	psz_ck [ 0 ] == '0' && ( psz_ck [ 1 ] == 'x' || psz_ck [ 1 ] == 'X' )
water	10:8	0:0	4	psz_ck
op	10:14	0:0	4	[
water	10:15	0:0	4	0
op	10:16	0:0	4	]
op	10:18	0:0	4	==
water	10:21	0:0	4	'0'
op	10:25	0:0	4	&&
water	10:28	0:0	4	(
water	10:30	0:0	4	psz_ck
op	10:36	0:0	4	[
water	10:37	0:0	4	1
op	10:38	0:0	4	]
op	10:40	0:0	4	==
water	10:43	0:0	4	'x'
op	10:47	0:0	4	||
water	10:50	0:0	4	psz_ck
op	10:56	0:0	4	[
water	10:57	0:0	4	1
op	10:58	0:0	4	]
op	10:60	0:0	4	==
water	10:63	0:0	4	'X'
water	10:67	0:0	4	)
stmts	11:4	13:4	3	
water	11:4	0:0	4	{
water	12:8	0:0	4	psz_ck
op	12:15	0:0	4	+=
water	12:18	0:0	4	2
water	12:19	0:0	4	;
water	13:4	0:0	4	}
if	14:4	18:4	2	(strlen (psz_ck ) != 16)
cond	14:8	14:28	3	strlen (psz_ck ) != 16
call	14:8	14:23	4	strlen
arg	14:16	14:23	5	psz_ck
water	14:16	0:0	6	psz_ck
op	14:25	0:0	4	!=
water	14:28	0:0	4	16
stmts	15:4	18:4	3	
water	15:4	0:0	4	{
call	16:8	16:72	4	msg_Warn
arg	16:18	16:26	5	p_caller
water	16:18	0:0	6	p_caller
arg	16:28	16:72	5	"invalid csa ck (it must be 16 chars long)"
water	16:28	0:0	6	"invalid csa ck (it must be 16 chars long)"
water	16:73	0:0	4	;
return	17:8	17:26	4	VLC_EBADVAR
water	17:15	0:0	5	VLC_EBADVAR
water	18:4	0:0	4	}
else	19:4	44:4	2
stmts	20:4	44:4	3	
water	20:4	0:0	4	{
decl	21:8	21:52	4	uint64_t	i_ck
op	21:22	0:0	4	=
call	21:24	21:51	5	strtoull
arg	21:34	21:40	6	psz_ck
water	21:34	0:0	7	psz_ck
arg	21:42	21:46	6	NULL
water	21:42	0:0	7	NULL
arg	21:48	21:51	6	16
water	21:48	0:0	7	16
decl	22:8	22:22	4	uint8_t	ck[8]
decl	23:8	23:18	4	int	i
for	24:8	27:8	4	(i = 0 ;i < 8;i ++)
forinit	24:13	24:18	5	i = 0 ;
water	24:13	0:0	6	i
op	24:15	0:0	6	=
water	24:17	0:0	6	0
water	24:18	0:0	6	;
cond	24:20	24:24	5	i < 8
water	24:20	0:0	6	i
op	24:22	0:0	6	<
water	24:24	0:0	6	8
forexpr	24:27	24:28	5	i ++
water	24:27	0:0	6	i
op	24:28	0:0	6	++
stmts	25:8	27:8	5	
water	25:8	0:0	6	{
water	26:12	0:0	6	ck
op	26:14	0:0	6	[
water	26:15	0:0	6	i
op	26:16	0:0	6	]
op	26:18	0:0	6	=
water	26:20	0:0	6	(
water	26:22	0:0	6	i_ck
op	26:27	0:0	6	>>
water	26:30	0:0	6	(
water	26:32	0:0	6	56
op	26:35	0:0	6	-
water	26:37	0:0	6	8
op	26:38	0:0	6	*
water	26:39	0:0	6	i
water	26:40	0:0	6	)
water	26:42	0:0	6	)
op	26:43	0:0	6	&
water	26:44	0:0	6	0
water	26:45	0:0	6	xff
water	26:48	0:0	6	;
water	27:8	0:0	6	}
call	29:8	31:72	4	msg_Dbg
arg	29:17	29:25	5	p_caller
water	29:17	0:0	6	p_caller
arg	29:27	30:46	5	"using CSA (de)scrambling with %s ""key=%x:%x:%x:%x:%x:%x:%x:%x"
water	29:27	0:0	6	"using CSA (de)scrambling with %s "
water	30:17	0:0	6	"key=%x:%x:%x:%x:%x:%x:%x:%x"
arg	30:48	30:72	5	set_odd?"odd":"even"
water	30:48	0:0	6	set_odd
water	30:56	0:0	6	?
water	30:58	0:0	6	"odd"
water	30:64	0:0	6	:
water	30:66	0:0	6	"even"
arg	31:17	31:22	5	ck[0]
water	31:17	0:0	6	ck
op	31:19	0:0	6	[
water	31:20	0:0	6	0
op	31:21	0:0	6	]
arg	31:24	31:29	5	ck[1]
water	31:24	0:0	6	ck
op	31:26	0:0	6	[
water	31:27	0:0	6	1
op	31:28	0:0	6	]
arg	31:31	31:36	5	ck[2]
water	31:31	0:0	6	ck
op	31:33	0:0	6	[
water	31:34	0:0	6	2
op	31:35	0:0	6	]
arg	31:38	31:43	5	ck[3]
water	31:38	0:0	6	ck
op	31:40	0:0	6	[
water	31:41	0:0	6	3
op	31:42	0:0	6	]
arg	31:45	31:50	5	ck[4]
water	31:45	0:0	6	ck
op	31:47	0:0	6	[
water	31:48	0:0	6	4
op	31:49	0:0	6	]
arg	31:52	31:57	5	ck[5]
water	31:52	0:0	6	ck
op	31:54	0:0	6	[
water	31:55	0:0	6	5
op	31:56	0:0	6	]
arg	31:59	31:64	5	ck[6]
water	31:59	0:0	6	ck
op	31:61	0:0	6	[
water	31:62	0:0	6	6
op	31:63	0:0	6	]
arg	31:66	31:72	5	ck[7]
water	31:66	0:0	6	ck
op	31:68	0:0	6	[
water	31:69	0:0	6	7
op	31:70	0:0	6	]
water	31:73	0:0	4	;
if	33:8	37:8	4	(set_odd)
cond	33:12	33:12	5	set_odd
water	33:12	0:0	6	set_odd
stmts	34:8	37:8	5	
water	34:8	0:0	6	{
call	35:12	35:35	6	memcpy
arg	35:20	35:27	7	c->o_ck
water	35:20	0:0	8	c
op	35:21	0:0	8	->
water	35:23	0:0	8	o_ck
arg	35:29	35:31	7	ck
water	35:29	0:0	8	ck
arg	35:33	35:35	7	8
water	35:33	0:0	8	8
water	35:36	0:0	6	;
call	36:12	36:40	6	csa_ComputeKey
arg	36:28	36:35	7	c->o_kk
water	36:28	0:0	8	c
op	36:29	0:0	8	->
water	36:31	0:0	8	o_kk
arg	36:37	36:40	7	ck
water	36:37	0:0	8	ck
water	36:41	0:0	6	;
water	37:8	0:0	6	}
else	38:8	42:8	4
stmts	39:8	42:8	5	
water	39:8	0:0	6	{
call	40:12	40:36	6	memcpy
arg	40:20	40:28	7	c->e_ck
water	40:20	0:0	8	c
op	40:21	0:0	8	->
water	40:23	0:0	8	e_ck
arg	40:30	40:32	7	ck
water	40:30	0:0	8	ck
arg	40:34	40:36	7	8
water	40:34	0:0	8	8
water	40:37	0:0	6	;
call	41:12	41:41	6	csa_ComputeKey
arg	41:28	41:36	7	c->e_kk
water	41:28	0:0	8	c
op	41:29	0:0	8	->
water	41:31	0:0	8	e_kk
arg	41:38	41:41	7	ck
water	41:38	0:0	8	ck
water	41:42	0:0	6	;
water	42:8	0:0	6	}
return	43:8	43:26	4	VLC_SUCCESS
water	43:15	0:0	5	VLC_SUCCESS
water	44:4	0:0	4	}
