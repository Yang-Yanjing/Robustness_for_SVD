func	2:0	63:0	0	static int	Capture
params	2:18	0:0	1	
param	2:20	2:37	2	demux_t *	p_demux
stmnts	0:0	62:22	1	
decl	4:4	4:39	2	demux_sys_t	*p_sys
op	4:23	0:0	2	=
water	4:25	0:0	2	p_demux
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:21	2	struct pollfd	pfd
water	6:4	0:0	2	pfd
op	6:7	0:0	2	.
water	6:8	0:0	2	fd
op	6:11	0:0	2	=
water	6:13	0:0	2	p_sys
op	6:18	0:0	2	->
water	6:20	0:0	2	i_fd
water	6:24	0:0	2	;
water	7:4	0:0	2	pfd
op	7:7	0:0	2	.
water	7:8	0:0	2	events
op	7:15	0:0	2	=
water	7:17	0:0	2	POLLIN
op	7:24	0:0	2	|
water	7:26	0:0	2	POLLPRI
water	7:33	0:0	2	;
if	8:4	12:4	2	(poll (& pfd ,1 ,READ_TIMEOUT ) < 0)
cond	8:9	8:41	3	poll (& pfd ,1 ,READ_TIMEOUT ) < 0
call	8:9	8:37	4	poll
arg	8:15	8:19	5	&pfd
op	8:15	0:0	6	&
water	8:16	0:0	6	pfd
arg	8:21	8:22	5	1
water	8:21	0:0	6	1
arg	8:24	8:37	5	READ_TIMEOUT
water	8:24	0:0	6	READ_TIMEOUT
op	8:39	0:0	4	<
water	8:41	0:0	4	0
stmts	9:4	12:4	3	
water	9:4	0:0	4	{
call	10:8	10:72	4	msg_Warn
arg	10:18	10:25	5	p_demux
water	10:18	0:0	6	p_demux
arg	10:27	10:48	5	"couldn't poll(): %s"
water	10:27	0:0	6	"couldn't poll(): %s"
arg	10:50	10:72	5	vlc_strerror_c(errno)
call	10:50	10:70	6	vlc_strerror_c
arg	10:65	10:70	7	errno
water	10:65	0:0	8	errno
water	10:73	0:0	4	;
return	11:8	11:27	4	VLC_EGENERIC
water	11:15	0:0	5	VLC_EGENERIC
water	12:4	0:0	4	}
if	13:4	29:4	2	(pfd . revents & POLLPRI)
cond	13:9	13:23	3	pfd . revents & POLLPRI
water	13:9	0:0	4	pfd
op	13:12	0:0	4	.
water	13:13	0:0	4	revents
op	13:21	0:0	4	&
water	13:23	0:0	4	POLLPRI
stmts	14:4	29:4	3	
water	14:4	0:0	4	{
decl	15:8	15:26	4	unsigned int	i_val
if	16:8	18:45	4	(ioctl (p_sys -> i_fd ,SDI_IOC_RXGETEVENTS ,& i_val ) < 0)
cond	16:13	16:65	5	ioctl (p_sys -> i_fd ,SDI_IOC_RXGETEVENTS ,& i_val ) < 0
call	16:13	16:61	6	ioctl
arg	16:20	16:31	7	p_sys->i_fd
water	16:20	0:0	8	p_sys
op	16:25	0:0	8	->
water	16:27	0:0	8	i_fd
arg	16:33	16:52	7	SDI_IOC_RXGETEVENTS
water	16:33	0:0	8	SDI_IOC_RXGETEVENTS
arg	16:54	16:61	7	&i_val
op	16:54	0:0	8	&
water	16:55	0:0	8	i_val
op	16:63	0:0	6	<
water	16:65	0:0	6	0
stmts	17:12	18:45	5	
call	17:12	18:44	6	msg_Warn
arg	17:22	17:29	7	p_demux
water	17:22	0:0	8	p_demux
arg	17:31	17:65	7	"couldn't SDI_IOC_RXGETEVENTS: %s"
water	17:31	0:0	8	"couldn't SDI_IOC_RXGETEVENTS: %s"
arg	18:22	18:44	7	vlc_strerror_c(errno)
call	18:22	18:42	8	vlc_strerror_c
arg	18:37	18:42	9	errno
water	18:37	0:0	10	errno
water	18:45	0:0	6	;
else	19:8	27:8	4
stmts	20:8	27:8	5	
water	20:8	0:0	6	{
if	21:12	22:74	6	(i_val & SDI_EVENT_RX_BUFFER)
cond	21:17	21:25	7	i_val & SDI_EVENT_RX_BUFFER
water	21:17	0:0	8	i_val
op	21:23	0:0	8	&
water	21:25	0:0	8	SDI_EVENT_RX_BUFFER
stmts	22:16	22:74	7	
call	22:16	22:73	8	msg_Warn
arg	22:26	22:33	9	p_demux
water	22:26	0:0	10	p_demux
arg	22:35	22:73	9	"driver receive buffer queue overrun"
water	22:35	0:0	10	"driver receive buffer queue overrun"
water	22:74	0:0	8	;
if	23:12	24:66	6	(i_val & SDI_EVENT_RX_FIFO)
cond	23:17	23:25	7	i_val & SDI_EVENT_RX_FIFO
water	23:17	0:0	8	i_val
op	23:23	0:0	8	&
water	23:25	0:0	8	SDI_EVENT_RX_FIFO
stmts	24:16	24:66	7	
call	24:16	24:65	8	msg_Warn
arg	24:26	24:33	9	p_demux
water	24:26	0:0	10	p_demux
arg	24:35	24:65	9	"onboard receive FIFO overrun"
water	24:35	0:0	10	"onboard receive FIFO overrun"
water	24:66	0:0	8	;
if	25:12	26:59	6	(i_val & SDI_EVENT_RX_CARRIER)
cond	25:17	25:25	7	i_val & SDI_EVENT_RX_CARRIER
water	25:17	0:0	8	i_val
op	25:23	0:0	8	&
water	25:25	0:0	8	SDI_EVENT_RX_CARRIER
stmts	26:16	26:59	7	
call	26:16	26:58	8	msg_Warn
arg	26:26	26:33	9	p_demux
water	26:26	0:0	10	p_demux
arg	26:35	26:58	9	"carrier status change"
water	26:35	0:0	10	"carrier status change"
water	26:59	0:0	8	;
water	27:8	0:0	6	}
water	28:8	0:0	4	p_sys
op	28:13	0:0	4	->
water	28:15	0:0	4	i_next_date
op	28:27	0:0	4	+=
water	28:30	0:0	4	CLOCK_GAP
water	28:39	0:0	4	;
water	29:4	0:0	4	}
if	30:4	61:4	2	(pfd . revents & POLLIN)
cond	30:9	30:23	3	pfd . revents & POLLIN
water	30:9	0:0	4	pfd
op	30:12	0:0	4	.
water	30:13	0:0	4	revents
op	30:21	0:0	4	&
water	30:23	0:0	4	POLLIN
stmts	31:4	61:4	3	
water	31:4	0:0	4	{
decl	32:8	32:17	4	int	i_ret
if	33:8	38:8	4	(ioctl (p_sys -> i_fd ,SDI_IOC_DQBUF ,p_sys -> i_current_buffer ) < 0)
cond	33:13	33:76	5	ioctl (p_sys -> i_fd ,SDI_IOC_DQBUF ,p_sys -> i_current_buffer ) < 0
call	33:13	33:72	6	ioctl
arg	33:20	33:31	7	p_sys->i_fd
water	33:20	0:0	8	p_sys
op	33:25	0:0	8	->
water	33:27	0:0	8	i_fd
arg	33:33	33:46	7	SDI_IOC_DQBUF
water	33:33	0:0	8	SDI_IOC_DQBUF
arg	33:48	33:72	7	p_sys->i_current_buffer
water	33:48	0:0	8	p_sys
op	33:53	0:0	8	->
water	33:55	0:0	8	i_current_buffer
op	33:74	0:0	6	<
water	33:76	0:0	6	0
stmts	34:8	38:8	5	
water	34:8	0:0	6	{
call	35:12	36:44	6	msg_Warn
arg	35:22	35:29	7	p_demux
water	35:22	0:0	8	p_demux
arg	35:31	35:59	7	"couldn't SDI_IOC_DQBUF: %s"
water	35:31	0:0	8	"couldn't SDI_IOC_DQBUF: %s"
arg	36:22	36:44	7	vlc_strerror_c(errno)
call	36:22	36:42	8	vlc_strerror_c
arg	36:37	36:42	9	errno
water	36:37	0:0	10	errno
water	36:45	0:0	6	;
return	37:12	37:31	6	VLC_EGENERIC
water	37:19	0:0	7	VLC_EGENERIC
water	38:8	0:0	6	}
water	39:8	0:0	4	i_ret
op	39:14	0:0	4	=
call	39:16	41:53	4	HandleSDBuffer
arg	39:32	39:39	5	p_demux
water	39:32	0:0	6	p_demux
arg	40:32	40:74	5	p_sys->pp_buffers[p_sys->i_current_buffer]
water	40:32	0:0	6	p_sys
op	40:37	0:0	6	->
water	40:39	0:0	6	pp_buffers
op	40:49	0:0	6	[
water	40:50	0:0	6	p_sys
op	40:55	0:0	6	->
water	40:57	0:0	6	i_current_buffer
op	40:73	0:0	6	]
arg	41:32	41:53	5	p_sys->i_buffer_size
water	41:32	0:0	6	p_sys
op	41:37	0:0	6	->
water	41:39	0:0	6	i_buffer_size
water	41:54	0:0	4	;
if	42:8	47:8	4	(ioctl (p_sys -> i_fd ,SDI_IOC_QBUF ,p_sys -> i_current_buffer ) < 0)
cond	42:13	42:75	5	ioctl (p_sys -> i_fd ,SDI_IOC_QBUF ,p_sys -> i_current_buffer ) < 0
call	42:13	42:71	6	ioctl
arg	42:20	42:31	7	p_sys->i_fd
water	42:20	0:0	8	p_sys
op	42:25	0:0	8	->
water	42:27	0:0	8	i_fd
arg	42:33	42:45	7	SDI_IOC_QBUF
water	42:33	0:0	8	SDI_IOC_QBUF
arg	42:47	42:71	7	p_sys->i_current_buffer
water	42:47	0:0	8	p_sys
op	42:52	0:0	8	->
water	42:54	0:0	8	i_current_buffer
op	42:73	0:0	6	<
water	42:75	0:0	6	0
stmts	43:8	47:8	5	
water	43:8	0:0	6	{
call	44:12	45:44	6	msg_Warn
arg	44:22	44:29	7	p_demux
water	44:22	0:0	8	p_demux
arg	44:31	44:58	7	"couldn't SDI_IOC_QBUF: %s"
water	44:31	0:0	8	"couldn't SDI_IOC_QBUF: %s"
arg	45:22	45:44	7	vlc_strerror_c(errno)
call	45:22	45:42	8	vlc_strerror_c
arg	45:37	45:42	9	errno
water	45:37	0:0	10	errno
water	45:45	0:0	6	;
return	46:12	46:31	6	VLC_EGENERIC
water	46:19	0:0	7	VLC_EGENERIC
water	47:8	0:0	6	}
if	48:8	52:8	4	(i_ret == VLC_SUCCESS)
cond	48:13	48:22	5	i_ret == VLC_SUCCESS
water	48:13	0:0	6	i_ret
op	48:19	0:0	6	==
water	48:22	0:0	6	VLC_SUCCESS
stmts	49:8	52:8	5	
water	49:8	0:0	6	{
water	50:12	0:0	6	p_sys
op	50:17	0:0	6	->
water	50:19	0:0	6	i_current_buffer
op	50:35	0:0	6	++
water	50:37	0:0	6	;
water	51:12	0:0	6	p_sys
op	51:17	0:0	6	->
water	51:19	0:0	6	i_current_buffer
op	51:36	0:0	6	%=
water	51:39	0:0	6	p_sys
op	51:44	0:0	6	->
water	51:46	0:0	6	i_buffers
water	51:55	0:0	6	;
water	52:8	0:0	6	}
else	53:8	60:8	4
stmts	54:8	60:8	5	
water	54:8	0:0	6	{
call	57:12	57:49	6	msg_Warn
arg	57:22	57:29	7	p_demux
water	57:22	0:0	8	p_demux
arg	57:31	57:49	7	"resetting board"
water	57:31	0:0	8	"resetting board"
water	57:50	0:0	6	;
call	58:12	58:34	6	CloseCapture
arg	58:26	58:34	7	p_demux
water	58:26	0:0	8	p_demux
water	58:35	0:0	6	;
call	59:12	59:33	6	InitCapture
arg	59:25	59:33	7	p_demux
water	59:25	0:0	8	p_demux
water	59:34	0:0	6	;
water	60:8	0:0	6	}
water	61:4	0:0	4	}
return	62:4	62:22	2	VLC_SUCCESS
water	62:11	0:0	3	VLC_SUCCESS
