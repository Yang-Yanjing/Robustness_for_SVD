func	2:0	57:0	0	static char *	es_print_url
params	2:26	0:0	1	
param	2:28	2:47	2	const char *	psz_fmt
param	2:49	2:70	2	vlc_fourcc_t	i_fourcc
param	2:72	2:83	2	int	i_count
param	3:28	3:50	2	const char *	psz_access
param	3:52	3:72	2	const char *	psz_mux
stmnts	0:0	56:21	1	
decl	5:4	5:21	2	char	*psz_dst
water	5:17	0:0	2	,
decl	5:4	5:21	2	char	*p
if	6:4	9:4	2	(psz_fmt == NULL || ! * psz_fmt)
cond	6:8	6:29	3	psz_fmt == NULL || ! * psz_fmt
water	6:8	0:0	4	psz_fmt
op	6:16	0:0	4	==
water	6:19	0:0	4	NULL
op	6:24	0:0	4	||
op	6:27	0:0	4	!
op	6:28	0:0	4	*
water	6:29	0:0	4	psz_fmt
stmts	7:4	9:4	3	
water	7:4	0:0	4	{
water	8:8	0:0	4	psz_fmt
op	8:16	0:0	4	=
water	8:18	0:0	4	(
water	8:19	0:0	4	char
op	8:23	0:0	4	*
water	8:24	0:0	4	)
water	8:25	0:0	4	"stream-%n-%c.%m"
water	8:42	0:0	4	;
water	9:4	0:0	4	}
water	10:4	0:0	2	p
op	10:6	0:0	2	=
water	10:8	0:0	2	psz_dst
op	10:16	0:0	2	=
call	10:18	10:31	2	malloc
arg	10:26	10:31	3	4096
water	10:26	0:0	4	4096
water	10:32	0:0	2	;
if	11:4	12:19	2	(! psz_dst)
cond	11:8	11:9	3	! psz_dst
op	11:8	0:0	4	!
water	11:9	0:0	4	psz_dst
stmts	12:8	12:19	3	
return	12:8	12:19	4	NULL
water	12:15	0:0	5	NULL
call	13:4	13:23	2	memset
arg	13:12	13:13	3	p
water	13:12	0:0	4	p
arg	13:15	13:16	3	0
water	13:15	0:0	4	0
arg	13:18	13:23	3	4096
water	13:18	0:0	4	4096
water	13:24	0:0	2	;
for	14:4	55:4	2	(;;)
forinit	14:9	14:9	3	;
water	14:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	15:4	55:4	3	
water	15:4	0:0	4	{
if	16:8	20:8	4	(* psz_fmt == '\0')
cond	16:12	16:24	5	* psz_fmt == '\0'
op	16:12	0:0	6	*
water	16:13	0:0	6	psz_fmt
op	16:21	0:0	6	==
water	16:24	0:0	6	'\0'
stmts	17:8	20:8	5	
water	17:8	0:0	6	{
op	18:12	0:0	6	*
water	18:13	0:0	6	p
op	18:15	0:0	6	=
water	18:17	0:0	6	'\0'
water	18:21	0:0	6	;
break	19:12	19:17	6	
water	20:8	0:0	6	}
if	21:8	24:8	4	(* psz_fmt != '%')
cond	21:12	21:24	5	* psz_fmt != '%'
op	21:12	0:0	6	*
water	21:13	0:0	6	psz_fmt
op	21:21	0:0	6	!=
water	21:24	0:0	6	'%'
stmts	22:8	24:8	5	
water	22:8	0:0	6	{
op	23:12	0:0	6	*
water	23:13	0:0	6	p
op	23:14	0:0	6	++
op	23:17	0:0	6	=
op	23:19	0:0	6	*
water	23:20	0:0	6	psz_fmt
op	23:27	0:0	6	++
water	23:29	0:0	6	;
water	24:8	0:0	6	}
else	25:8	54:8	4
stmts	26:8	54:8	5	
water	26:8	0:0	6	{
if	27:12	30:12	6	(psz_fmt [ 1 ] == 'n')
cond	27:16	27:30	7	psz_fmt [ 1 ] == 'n'
water	27:16	0:0	8	psz_fmt
op	27:23	0:0	8	[
water	27:24	0:0	8	1
op	27:25	0:0	8	]
op	27:27	0:0	8	==
water	27:30	0:0	8	'n'
stmts	28:12	30:12	7	
water	28:12	0:0	8	{
water	29:16	0:0	8	p
op	29:18	0:0	8	+=
call	29:21	29:47	8	sprintf
arg	29:30	29:31	9	p
water	29:30	0:0	10	p
arg	29:33	29:37	9	"%d"
water	29:33	0:0	10	"%d"
arg	29:39	29:47	9	i_count
water	29:39	0:0	10	i_count
water	29:48	0:0	8	;
water	30:12	0:0	8	}
else	31:12	34:12	6
stmts	31:17	34:12	7	
if	31:17	34:12	8	(psz_fmt [ 1 ] == 'c')
cond	31:21	31:35	9	psz_fmt [ 1 ] == 'c'
water	31:21	0:0	10	psz_fmt
op	31:28	0:0	10	[
water	31:29	0:0	10	1
op	31:30	0:0	10	]
op	31:32	0:0	10	==
water	31:35	0:0	10	'c'
stmts	32:12	34:12	9	
water	32:12	0:0	10	{
water	33:16	0:0	10	p
op	33:18	0:0	10	+=
call	33:21	33:59	10	sprintf
arg	33:30	33:31	11	p
water	33:30	0:0	12	p
arg	33:33	33:40	11	"%4.4s"
water	33:33	0:0	12	"%4.4s"
arg	33:42	33:59	11	(char*)&i_fourcc
water	33:42	0:0	12	(
water	33:43	0:0	12	char
op	33:47	0:0	12	*
water	33:48	0:0	12	)
op	33:49	0:0	12	&
water	33:50	0:0	12	i_fourcc
water	33:60	0:0	10	;
water	34:12	0:0	10	}
else	35:12	38:12	6
stmts	35:17	38:12	7	
if	35:17	38:12	8	(psz_fmt [ 1 ] == 'm')
cond	35:21	35:35	9	psz_fmt [ 1 ] == 'm'
water	35:21	0:0	10	psz_fmt
op	35:28	0:0	10	[
water	35:29	0:0	10	1
op	35:30	0:0	10	]
op	35:32	0:0	10	==
water	35:35	0:0	10	'm'
stmts	36:12	38:12	9	
water	36:12	0:0	10	{
water	37:16	0:0	10	p
op	37:18	0:0	10	+=
call	37:21	37:47	10	sprintf
arg	37:30	37:31	11	p
water	37:30	0:0	12	p
arg	37:33	37:37	11	"%s"
water	37:33	0:0	12	"%s"
arg	37:39	37:47	11	psz_mux
water	37:39	0:0	12	psz_mux
water	37:48	0:0	10	;
water	38:12	0:0	10	}
else	39:12	42:12	6
stmts	39:17	42:12	7	
if	39:17	42:12	8	(psz_fmt [ 1 ] == 'a')
cond	39:21	39:35	9	psz_fmt [ 1 ] == 'a'
water	39:21	0:0	10	psz_fmt
op	39:28	0:0	10	[
water	39:29	0:0	10	1
op	39:30	0:0	10	]
op	39:32	0:0	10	==
water	39:35	0:0	10	'a'
stmts	40:12	42:12	9	
water	40:12	0:0	10	{
water	41:16	0:0	10	p
op	41:18	0:0	10	+=
call	41:21	41:50	10	sprintf
arg	41:30	41:31	11	p
water	41:30	0:0	12	p
arg	41:33	41:37	11	"%s"
water	41:33	0:0	12	"%s"
arg	41:39	41:50	11	psz_access
water	41:39	0:0	12	psz_access
water	41:51	0:0	10	;
water	42:12	0:0	10	}
else	43:12	46:12	6
stmts	43:17	46:12	7	
if	43:17	46:12	8	(psz_fmt [ 1 ] != '\0')
cond	43:21	43:35	9	psz_fmt [ 1 ] != '\0'
water	43:21	0:0	10	psz_fmt
op	43:28	0:0	10	[
water	43:29	0:0	10	1
op	43:30	0:0	10	]
op	43:32	0:0	10	!=
water	43:35	0:0	10	'\0'
stmts	44:12	46:12	9	
water	44:12	0:0	10	{
water	45:16	0:0	10	p
op	45:18	0:0	10	+=
call	45:21	45:64	10	sprintf
arg	45:30	45:31	11	p
water	45:30	0:0	12	p
arg	45:33	45:39	11	"%c%c"
water	45:33	0:0	12	"%c%c"
arg	45:41	45:51	11	psz_fmt[0]
water	45:41	0:0	12	psz_fmt
op	45:48	0:0	12	[
water	45:49	0:0	12	0
op	45:50	0:0	12	]
arg	45:53	45:64	11	psz_fmt[1]
water	45:53	0:0	12	psz_fmt
op	45:60	0:0	12	[
water	45:61	0:0	12	1
op	45:62	0:0	12	]
water	45:65	0:0	10	;
water	46:12	0:0	10	}
else	47:12	52:12	6
stmts	48:12	52:12	7	
water	48:12	0:0	8	{
water	49:16	0:0	8	p
op	49:18	0:0	8	+=
call	49:21	49:50	8	sprintf
arg	49:30	49:31	9	p
water	49:30	0:0	10	p
arg	49:33	49:37	9	"%c"
water	49:33	0:0	10	"%c"
arg	49:39	49:50	9	psz_fmt[0]
water	49:39	0:0	10	psz_fmt
op	49:46	0:0	10	[
water	49:47	0:0	10	0
op	49:48	0:0	10	]
water	49:51	0:0	8	;
op	50:16	0:0	8	*
water	50:17	0:0	8	p
op	50:18	0:0	8	++
op	50:21	0:0	8	=
water	50:23	0:0	8	'\0'
water	50:27	0:0	8	;
break	51:16	51:21	8	
water	52:12	0:0	8	}
water	53:12	0:0	6	psz_fmt
op	53:20	0:0	6	+=
water	53:23	0:0	6	2
water	53:24	0:0	6	;
water	54:8	0:0	6	}
water	55:4	0:0	4	}
return	56:4	56:21	2	(psz_dst)
water	56:10	0:0	3	(
water	56:12	0:0	3	psz_dst
water	56:20	0:0	3	)
