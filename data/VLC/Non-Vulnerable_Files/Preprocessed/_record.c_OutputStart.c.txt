func	2:0	150:0	0	static void	OutputStart
params	2:23	0:0	1	
param	2:25	2:49	2	sout_stream_t *	p_stream
stmnts	0:0	149:4	1	
decl	4:4	4:46	2	sout_stream_sys_t	*p_sys
op	4:29	0:0	2	=
water	4:31	0:0	2	p_stream
op	4:39	0:0	2	->
water	4:41	0:0	2	p_sys
if	6:4	7:14	2	(p_sys -> b_drop)
cond	6:8	6:15	3	p_sys -> b_drop
water	6:8	0:0	4	p_sys
op	6:13	0:0	4	->
water	6:15	0:0	4	b_drop
stmts	7:8	7:14	3	
return	7:8	7:14	4	
water	9:4	0:0	2	p_sys
op	9:9	0:0	2	->
water	9:11	0:0	2	b_drop
op	9:18	0:0	2	=
water	9:20	0:0	2	true
water	9:24	0:0	2	;
decl	11:4	11:32	2	const char	*psz_muxer
op	11:26	0:0	2	=
water	11:28	0:0	2	NULL
decl	12:4	12:36	2	const char	*psz_extension
op	12:30	0:0	2	=
water	12:32	0:0	2	NULL
for	17:4	43:4	2	(unsigned i = 0 ;i < sizeof ( p_muxers ) / sizeof ( * p_muxers );i ++)
forinit	17:9	17:23	3	unsigned i = 0 ;
water	17:9	0:0	4	unsigned
water	17:18	0:0	4	i
op	17:20	0:0	4	=
water	17:22	0:0	4	0
water	17:23	0:0	4	;
cond	17:25	17:64	3	i < sizeof ( p_muxers ) / sizeof ( * p_muxers )
water	17:25	0:0	4	i
op	17:27	0:0	4	<
op	17:29	0:0	4	sizeof
water	17:35	0:0	4	(
water	17:36	0:0	4	p_muxers
water	17:44	0:0	4	)
op	17:46	0:0	4	/
op	17:48	0:0	4	sizeof
water	17:54	0:0	4	(
op	17:55	0:0	4	*
water	17:56	0:0	4	p_muxers
water	17:64	0:0	4	)
forexpr	17:67	17:68	3	i ++
water	17:67	0:0	4	i
op	17:68	0:0	4	++
stmts	18:4	43:4	3	
water	18:4	0:0	4	{
decl	19:8	19:17	4	bool	b_ok
if	20:8	21:20	4	(p_sys -> i_id > p_muxers [ i ] . i_es_max)
cond	20:12	20:38	5	p_sys -> i_id > p_muxers [ i ] . i_es_max
water	20:12	0:0	6	p_sys
op	20:17	0:0	6	->
water	20:19	0:0	6	i_id
op	20:24	0:0	6	>
water	20:26	0:0	6	p_muxers
op	20:34	0:0	6	[
water	20:35	0:0	6	i
op	20:36	0:0	6	]
op	20:37	0:0	6	.
water	20:38	0:0	6	i_es_max
stmts	21:12	21:20	5	
continue	21:12	21:20	6	
water	22:8	0:0	4	b_ok
op	22:13	0:0	4	=
water	22:15	0:0	4	true
water	22:19	0:0	4	;
for	23:8	37:8	4	( int j = 0 ;j < p_sys -> i_id;j ++)
forinit	0:0	23:22	5	 int j = 0 ;
decl	23:13	23:22	6	int	j
op	23:19	0:0	6	=
water	23:21	0:0	6	0
cond	23:24	23:35	5	j < p_sys -> i_id
water	23:24	0:0	6	j
op	23:26	0:0	6	<
water	23:28	0:0	6	p_sys
op	23:33	0:0	6	->
water	23:35	0:0	6	i_id
forexpr	23:41	23:42	5	j ++
water	23:41	0:0	6	j
op	23:42	0:0	6	++
stmts	24:8	37:8	5	
water	24:8	0:0	6	{
decl	25:12	25:51	6	es_format_t	*p_fmt
op	25:31	0:0	6	=
op	25:33	0:0	6	&
water	25:34	0:0	6	p_sys
op	25:39	0:0	6	->
water	25:41	0:0	6	id
op	25:43	0:0	6	[
water	25:44	0:0	6	j
op	25:45	0:0	6	]
op	25:46	0:0	6	->
water	25:48	0:0	6	fmt
water	26:12	0:0	6	b_ok
op	26:17	0:0	6	=
water	26:19	0:0	6	false
water	26:24	0:0	6	;
for	27:12	34:12	6	( int k = 0 ;p_muxers [ i ] . codec [ k ] != 0;k ++)
forinit	0:0	27:26	7	 int k = 0 ;
decl	27:17	27:26	8	int	k
op	27:23	0:0	8	=
water	27:25	0:0	8	0
cond	27:28	27:52	7	p_muxers [ i ] . codec [ k ] != 0
water	27:28	0:0	8	p_muxers
op	27:36	0:0	8	[
water	27:37	0:0	8	i
op	27:38	0:0	8	]
op	27:39	0:0	8	.
water	27:40	0:0	8	codec
op	27:45	0:0	8	[
water	27:46	0:0	8	k
op	27:47	0:0	8	]
op	27:49	0:0	8	!=
water	27:52	0:0	8	0
forexpr	27:55	27:56	7	k ++
water	27:55	0:0	8	k
op	27:56	0:0	8	++
stmts	28:12	34:12	7	
water	28:12	0:0	8	{
if	29:16	33:16	8	(p_fmt -> i_codec == p_muxers [ i ] . codec [ k ])
cond	29:20	29:57	9	p_fmt -> i_codec == p_muxers [ i ] . codec [ k ]
water	29:20	0:0	10	p_fmt
op	29:25	0:0	10	->
water	29:27	0:0	10	i_codec
op	29:35	0:0	10	==
water	29:38	0:0	10	p_muxers
op	29:46	0:0	10	[
water	29:47	0:0	10	i
op	29:48	0:0	10	]
op	29:49	0:0	10	.
water	29:50	0:0	10	codec
op	29:55	0:0	10	[
water	29:56	0:0	10	k
op	29:57	0:0	10	]
stmts	30:16	33:16	9	
water	30:16	0:0	10	{
water	31:20	0:0	10	b_ok
op	31:25	0:0	10	=
water	31:27	0:0	10	true
water	31:31	0:0	10	;
break	32:20	32:25	10	
water	33:16	0:0	10	}
water	34:12	0:0	8	}
if	35:12	36:21	6	(! b_ok)
cond	35:16	35:17	7	! b_ok
op	35:16	0:0	8	!
water	35:17	0:0	8	b_ok
stmts	36:16	36:21	7	
break	36:16	36:21	8	
water	37:8	0:0	6	}
if	38:8	39:20	4	(! b_ok)
cond	38:12	38:13	5	! b_ok
op	38:12	0:0	6	!
water	38:13	0:0	6	b_ok
stmts	39:12	39:20	5	
continue	39:12	39:20	6	
water	40:8	0:0	4	psz_muxer
op	40:18	0:0	4	=
water	40:20	0:0	4	p_muxers
op	40:28	0:0	4	[
water	40:29	0:0	4	i
op	40:30	0:0	4	]
op	40:31	0:0	4	.
water	40:32	0:0	4	psz_muxer
water	40:41	0:0	4	;
water	41:8	0:0	4	psz_extension
op	41:22	0:0	4	=
water	41:24	0:0	4	p_muxers
op	41:32	0:0	4	[
water	41:33	0:0	4	i
op	41:34	0:0	4	]
op	41:35	0:0	4	.
water	41:36	0:0	4	psz_extension
water	41:49	0:0	4	;
break	42:8	42:13	4	
water	43:4	0:0	4	}
if	46:4	106:4	2	(! psz_muxer || ! psz_extension)
cond	46:8	46:23	3	! psz_muxer || ! psz_extension
op	46:8	0:0	4	!
water	46:9	0:0	4	psz_muxer
op	46:19	0:0	4	||
op	46:22	0:0	4	!
water	46:23	0:0	4	psz_extension
stmts	47:4	106:4	3	
water	47:4	0:0	4	{
water	48:8	0:0	4	static
water	48:15	0:0	4	const
water	48:21	0:0	4	char
water	48:26	0:0	4	ppsz_muxers
op	48:37	0:0	4	[
op	48:38	0:0	4	]
op	48:39	0:0	4	[
water	48:40	0:0	4	2
op	48:41	0:0	4	]
op	48:42	0:0	4	[
water	48:43	0:0	4	4
op	48:44	0:0	4	]
op	48:46	0:0	4	=
water	48:48	0:0	4	{
water	49:12	0:0	4	{
water	49:14	0:0	4	"avi"
water	49:19	0:0	4	,
water	49:21	0:0	4	"avi"
water	49:27	0:0	4	}
water	49:28	0:0	4	,
water	49:30	0:0	4	{
water	49:32	0:0	4	"mp4"
water	49:37	0:0	4	,
water	49:39	0:0	4	"mp4"
water	49:45	0:0	4	}
water	49:46	0:0	4	,
water	49:48	0:0	4	{
water	49:50	0:0	4	"ogg"
water	49:55	0:0	4	,
water	49:57	0:0	4	"ogg"
water	49:63	0:0	4	}
water	49:64	0:0	4	,
water	50:12	0:0	4	{
water	50:14	0:0	4	"asf"
water	50:19	0:0	4	,
water	50:21	0:0	4	"asf"
water	50:27	0:0	4	}
water	50:28	0:0	4	,
water	50:30	0:0	4	{
water	50:33	0:0	4	"ts"
water	50:37	0:0	4	,
water	50:40	0:0	4	"ts"
water	50:45	0:0	4	}
water	50:46	0:0	4	,
water	50:48	0:0	4	{
water	50:51	0:0	4	"ps"
water	50:55	0:0	4	,
water	50:57	0:0	4	"mpg"
water	50:63	0:0	4	}
water	50:64	0:0	4	,
water	51:12	0:0	4	{
water	51:14	0:0	4	"mkv"
water	51:19	0:0	4	,
water	51:21	0:0	4	"mkv"
water	51:27	0:0	4	}
water	51:28	0:0	4	,
water	55:12	0:0	4	{
water	55:14	0:0	4	"avformat{mux=avi}"
water	55:33	0:0	4	,
water	55:35	0:0	4	"avi"
water	55:41	0:0	4	}
water	55:42	0:0	4	,
water	56:12	0:0	4	{
water	56:14	0:0	4	"avformat{mux=mov}"
water	56:33	0:0	4	,
water	56:35	0:0	4	"mov"
water	56:41	0:0	4	}
water	56:42	0:0	4	,
water	57:12	0:0	4	{
water	57:14	0:0	4	"avformat{mux=mp4}"
water	57:33	0:0	4	,
water	57:35	0:0	4	"mp4"
water	57:41	0:0	4	}
water	57:42	0:0	4	,
water	58:12	0:0	4	{
water	58:14	0:0	4	"avformat{mux=nsv}"
water	58:33	0:0	4	,
water	58:35	0:0	4	"nsv"
water	58:41	0:0	4	}
water	58:42	0:0	4	,
water	59:12	0:0	4	{
water	59:14	0:0	4	"avformat{mux=flv}"
water	59:33	0:0	4	,
water	59:35	0:0	4	"flv"
water	59:41	0:0	4	}
water	59:42	0:0	4	,
water	61:8	0:0	4	}
water	61:9	0:0	4	;
decl	62:8	62:22	4	int	i_best
op	62:19	0:0	4	=
water	62:21	0:0	4	0
decl	63:8	63:25	4	int	i_best_es
op	63:22	0:0	4	=
water	63:24	0:0	4	0
call	64:8	64:79	4	msg_Warn
arg	64:18	64:26	5	p_stream
water	64:18	0:0	6	p_stream
arg	64:28	64:79	5	"failed to find an adequate muxer, probing muxers"
water	64:28	0:0	6	"failed to find an adequate muxer, probing muxers"
water	64:80	0:0	4	;
for	65:8	100:8	4	(unsigned i = 0 ;i < sizeof ( ppsz_muxers ) / sizeof ( * ppsz_muxers );i ++)
forinit	65:13	65:27	5	unsigned i = 0 ;
water	65:13	0:0	6	unsigned
water	65:22	0:0	6	i
op	65:24	0:0	6	=
water	65:26	0:0	6	0
water	65:27	0:0	6	;
cond	65:29	65:74	5	i < sizeof ( ppsz_muxers ) / sizeof ( * ppsz_muxers )
water	65:29	0:0	6	i
op	65:31	0:0	6	<
op	65:33	0:0	6	sizeof
water	65:39	0:0	6	(
water	65:40	0:0	6	ppsz_muxers
water	65:51	0:0	6	)
op	65:53	0:0	6	/
op	65:55	0:0	6	sizeof
water	65:61	0:0	6	(
op	65:62	0:0	6	*
water	65:63	0:0	6	ppsz_muxers
water	65:74	0:0	6	)
forexpr	65:77	65:78	5	i ++
water	65:77	0:0	6	i
op	65:78	0:0	6	++
stmts	66:8	100:8	5	
water	66:8	0:0	6	{
decl	67:12	67:26	6	char	*psz_file
decl	68:12	68:20	6	int	i_es
water	69:12	0:0	6	psz_file
op	69:21	0:0	6	=
call	69:23	69:44	6	tempnam
arg	69:32	69:36	7	NULL
water	69:32	0:0	8	NULL
arg	69:38	69:44	7	"vlc"
water	69:38	0:0	8	"vlc"
water	69:45	0:0	6	;
if	70:12	71:24	6	(! psz_file)
cond	70:16	70:17	7	! psz_file
op	70:16	0:0	8	!
water	70:17	0:0	8	psz_file
stmts	71:16	71:24	7	
continue	71:16	71:24	8	
call	72:12	72:69	6	msg_Dbg
arg	72:21	72:29	7	p_stream
water	72:21	0:0	8	p_stream
arg	72:31	72:49	7	"probing muxer %s"
water	72:31	0:0	8	"probing muxer %s"
arg	72:51	72:69	7	ppsz_muxers[i][0]
water	72:51	0:0	8	ppsz_muxers
op	72:62	0:0	8	[
water	72:63	0:0	8	i
op	72:64	0:0	8	]
op	72:65	0:0	8	[
water	72:66	0:0	8	0
op	72:67	0:0	8	]
water	72:70	0:0	6	;
water	73:12	0:0	6	i_es
op	73:17	0:0	6	=
call	73:19	73:74	6	OutputNew
arg	73:30	73:38	7	p_stream
water	73:30	0:0	8	p_stream
arg	73:40	73:57	7	ppsz_muxers[i][0]
water	73:40	0:0	8	ppsz_muxers
op	73:51	0:0	8	[
water	73:52	0:0	8	i
op	73:53	0:0	8	]
op	73:54	0:0	8	[
water	73:55	0:0	8	0
op	73:56	0:0	8	]
arg	73:59	73:67	7	psz_file
water	73:59	0:0	8	psz_file
arg	73:69	73:74	7	NULL
water	73:69	0:0	8	NULL
water	73:75	0:0	6	;
if	74:12	79:12	6	(i_es < 0)
cond	74:16	74:23	7	i_es < 0
water	74:16	0:0	8	i_es
op	74:21	0:0	8	<
water	74:23	0:0	8	0
stmts	75:12	79:12	7	
water	75:12	0:0	8	{
call	76:16	76:37	8	vlc_unlink
arg	76:28	76:37	9	psz_file
water	76:28	0:0	10	psz_file
water	76:38	0:0	8	;
call	77:16	77:31	8	free
arg	77:22	77:31	9	psz_file
water	77:22	0:0	10	psz_file
water	77:32	0:0	8	;
continue	78:16	78:24	8	
water	79:12	0:0	8	}
for	81:12	87:12	6	( int i = 0 ;i < p_sys -> i_id;i ++)
forinit	0:0	81:26	7	 int i = 0 ;
decl	81:17	81:26	8	int	i
op	81:23	0:0	8	=
water	81:25	0:0	8	0
cond	81:28	81:39	7	i < p_sys -> i_id
water	81:28	0:0	8	i
op	81:30	0:0	8	<
water	81:32	0:0	8	p_sys
op	81:37	0:0	8	->
water	81:39	0:0	8	i_id
forexpr	81:45	81:46	7	i ++
water	81:45	0:0	8	i
op	81:46	0:0	8	++
stmts	82:12	87:12	7	
water	82:12	0:0	8	{
decl	83:16	83:55	8	sout_stream_id_sys_t	*id
op	83:41	0:0	8	=
water	83:43	0:0	8	p_sys
op	83:48	0:0	8	->
water	83:50	0:0	8	id
op	83:52	0:0	8	[
water	83:53	0:0	8	i
op	83:54	0:0	8	]
if	84:16	85:60	8	(id -> id)
cond	84:20	84:24	9	id -> id
water	84:20	0:0	10	id
op	84:22	0:0	10	->
water	84:24	0:0	10	id
stmts	85:20	85:60	9	
call	85:20	85:59	10	sout_StreamIdDel
arg	85:38	85:50	11	p_sys->p_out
water	85:38	0:0	12	p_sys
op	85:43	0:0	12	->
water	85:45	0:0	12	p_out
arg	85:52	85:59	11	id->id
water	85:52	0:0	12	id
op	85:54	0:0	12	->
water	85:56	0:0	12	id
water	85:60	0:0	10	;
water	86:16	0:0	8	id
op	86:18	0:0	8	->
water	86:20	0:0	8	id
op	86:23	0:0	8	=
water	86:25	0:0	8	NULL
water	86:29	0:0	8	;
water	87:12	0:0	8	}
if	88:12	89:68	6	(p_sys -> p_out)
cond	88:16	88:23	7	p_sys -> p_out
water	88:16	0:0	8	p_sys
op	88:21	0:0	8	->
water	88:23	0:0	8	p_out
stmts	89:16	89:68	7	
call	89:16	89:67	8	sout_StreamChainDelete
arg	89:40	89:52	9	p_sys->p_out
water	89:40	0:0	10	p_sys
op	89:45	0:0	10	->
water	89:47	0:0	10	p_out
arg	89:54	89:67	9	p_sys->p_out
water	89:54	0:0	10	p_sys
op	89:59	0:0	10	->
water	89:61	0:0	10	p_out
water	89:68	0:0	8	;
water	90:12	0:0	6	p_sys
op	90:17	0:0	6	->
water	90:19	0:0	6	p_out
op	90:25	0:0	6	=
water	90:27	0:0	6	NULL
water	90:31	0:0	6	;
if	91:12	97:12	6	(i_es > i_best_es)
cond	91:16	91:23	7	i_es > i_best_es
water	91:16	0:0	8	i_es
op	91:21	0:0	8	>
water	91:23	0:0	8	i_best_es
stmts	92:12	97:12	7	
water	92:12	0:0	8	{
water	93:16	0:0	8	i_best_es
op	93:26	0:0	8	=
water	93:28	0:0	8	i_es
water	93:32	0:0	8	;
water	94:16	0:0	8	i_best
op	94:23	0:0	8	=
water	94:25	0:0	8	i
water	94:26	0:0	8	;
if	95:16	96:25	8	(i_best_es >= p_sys -> i_id)
cond	95:20	95:40	9	i_best_es >= p_sys -> i_id
water	95:20	0:0	10	i_best_es
op	95:30	0:0	10	>=
water	95:33	0:0	10	p_sys
op	95:38	0:0	10	->
water	95:40	0:0	10	i_id
stmts	96:20	96:25	9	
break	96:20	96:25	10	
water	97:12	0:0	8	}
call	98:12	98:33	6	vlc_unlink
arg	98:24	98:33	7	psz_file
water	98:24	0:0	8	psz_file
water	98:34	0:0	6	;
call	99:12	99:27	6	free
arg	99:18	99:27	7	psz_file
water	99:18	0:0	8	psz_file
water	99:28	0:0	6	;
water	100:8	0:0	6	}
water	102:8	0:0	4	psz_muxer
op	102:18	0:0	4	=
water	102:20	0:0	4	ppsz_muxers
op	102:31	0:0	4	[
water	102:32	0:0	4	i_best
op	102:38	0:0	4	]
op	102:39	0:0	4	[
water	102:40	0:0	4	0
op	102:41	0:0	4	]
water	102:42	0:0	4	;
water	103:8	0:0	4	psz_extension
op	103:22	0:0	4	=
water	103:24	0:0	4	ppsz_muxers
op	103:35	0:0	4	[
water	103:36	0:0	4	i_best
op	103:42	0:0	4	]
op	103:43	0:0	4	[
water	103:44	0:0	4	1
op	103:45	0:0	4	]
water	103:46	0:0	4	;
call	104:8	105:66	4	msg_Dbg
arg	104:17	104:25	5	p_stream
water	104:17	0:0	6	p_stream
arg	104:27	104:86	5	"using muxer %s with extension %s (%d/%d streams accepted)"
water	104:27	0:0	6	"using muxer %s with extension %s (%d/%d streams accepted)"
arg	105:17	105:26	5	psz_muxer
water	105:17	0:0	6	psz_muxer
arg	105:28	105:41	5	psz_extension
water	105:28	0:0	6	psz_extension
arg	105:43	105:52	5	i_best_es
water	105:43	0:0	6	i_best_es
arg	105:54	105:66	5	p_sys->i_id
water	105:54	0:0	6	p_sys
op	105:59	0:0	6	->
water	105:61	0:0	6	i_id
water	105:67	0:0	4	;
water	106:4	0:0	4	}
if	108:4	112:4	2	(OutputNew (p_stream ,psz_muxer ,p_sys -> psz_prefix ,psz_extension ) < 0)
cond	108:8	108:77	3	OutputNew (p_stream ,psz_muxer ,p_sys -> psz_prefix ,psz_extension ) < 0
call	108:8	108:73	4	OutputNew
arg	108:19	108:27	5	p_stream
water	108:19	0:0	6	p_stream
arg	108:29	108:38	5	psz_muxer
water	108:29	0:0	6	psz_muxer
arg	108:40	108:57	5	p_sys->psz_prefix
water	108:40	0:0	6	p_sys
op	108:45	0:0	6	->
water	108:47	0:0	6	psz_prefix
arg	108:59	108:73	5	psz_extension
water	108:59	0:0	6	psz_extension
op	108:75	0:0	4	<
water	108:77	0:0	4	0
stmts	109:4	112:4	3	
water	109:4	0:0	4	{
call	110:8	110:50	4	msg_Err
arg	110:17	110:25	5	p_stream
water	110:17	0:0	6	p_stream
arg	110:27	110:50	5	"failed to open output"
water	110:27	0:0	6	"failed to open output"
water	110:51	0:0	4	;
return	111:8	111:14	4	
water	112:4	0:0	4	}
water	114:4	0:0	2	p_sys
op	114:9	0:0	2	->
water	114:11	0:0	2	i_dts_start
op	114:23	0:0	2	=
water	114:25	0:0	2	0
water	114:26	0:0	2	;
for	115:4	132:4	2	( int i = 0 ;i < p_sys -> i_id;i ++)
forinit	0:0	115:18	3	 int i = 0 ;
decl	115:9	115:18	4	int	i
op	115:15	0:0	4	=
water	115:17	0:0	4	0
cond	115:20	115:31	3	i < p_sys -> i_id
water	115:20	0:0	4	i
op	115:22	0:0	4	<
water	115:24	0:0	4	p_sys
op	115:29	0:0	4	->
water	115:31	0:0	4	i_id
forexpr	115:37	115:38	3	i ++
water	115:37	0:0	4	i
op	115:38	0:0	4	++
stmts	116:4	132:4	3	
water	116:4	0:0	4	{
decl	117:8	117:47	4	sout_stream_id_sys_t	*id
op	117:33	0:0	4	=
water	117:35	0:0	4	p_sys
op	117:40	0:0	4	->
water	117:42	0:0	4	id
op	117:44	0:0	4	[
water	117:45	0:0	4	i
op	117:46	0:0	4	]
decl	118:8	118:24	4	block_t	*p_block
if	119:8	120:20	4	(! id -> id || ! id -> p_first)
cond	119:12	119:28	5	! id -> id || ! id -> p_first
op	119:12	0:0	6	!
water	119:13	0:0	6	id
op	119:15	0:0	6	->
water	119:17	0:0	6	id
op	119:20	0:0	6	||
op	119:23	0:0	6	!
water	119:24	0:0	6	id
op	119:26	0:0	6	->
water	119:28	0:0	6	p_first
stmts	120:12	120:20	5	
continue	120:12	120:20	6	
decl	121:8	121:42	4	mtime_t	i_dts
op	121:22	0:0	4	=
water	121:24	0:0	4	id
op	121:26	0:0	4	->
water	121:28	0:0	4	p_first
op	121:35	0:0	4	->
water	121:37	0:0	4	i_dts
for	122:8	129:8	4	(p_block = id -> p_first ;p_block != NULL;p_block = p_block -> p_next)
forinit	122:13	122:34	5	p_block = id -> p_first ;
water	122:13	0:0	6	p_block
op	122:21	0:0	6	=
water	122:23	0:0	6	id
op	122:25	0:0	6	->
water	122:27	0:0	6	p_first
water	122:34	0:0	6	;
cond	122:36	122:47	5	p_block != NULL
water	122:36	0:0	6	p_block
op	122:44	0:0	6	!=
water	122:47	0:0	6	NULL
forexpr	122:53	122:72	5	p_block = p_block -> p_next
water	122:53	0:0	6	p_block
op	122:61	0:0	6	=
water	122:63	0:0	6	p_block
op	122:70	0:0	6	->
water	122:72	0:0	6	p_next
stmts	123:8	129:8	5	
water	123:8	0:0	6	{
if	124:12	128:12	6	(p_block -> i_flags & BLOCK_FLAG_TYPE_I)
cond	124:16	124:35	7	p_block -> i_flags & BLOCK_FLAG_TYPE_I
water	124:16	0:0	8	p_block
op	124:23	0:0	8	->
water	124:25	0:0	8	i_flags
op	124:33	0:0	8	&
water	124:35	0:0	8	BLOCK_FLAG_TYPE_I
stmts	125:12	128:12	7	
water	125:12	0:0	8	{
water	126:16	0:0	8	i_dts
op	126:22	0:0	8	=
water	126:24	0:0	8	p_block
op	126:31	0:0	8	->
water	126:33	0:0	8	i_dts
water	126:38	0:0	8	;
break	127:16	127:21	8	
water	128:12	0:0	8	}
water	129:8	0:0	6	}
if	130:8	131:38	4	(i_dts > p_sys -> i_dts_start)
cond	130:12	130:27	5	i_dts > p_sys -> i_dts_start
water	130:12	0:0	6	i_dts
op	130:18	0:0	6	>
water	130:20	0:0	6	p_sys
op	130:25	0:0	6	->
water	130:27	0:0	6	i_dts_start
stmts	131:12	131:38	5	
water	131:12	0:0	6	p_sys
op	131:17	0:0	6	->
water	131:19	0:0	6	i_dts_start
op	131:31	0:0	6	=
water	131:33	0:0	6	i_dts
water	131:38	0:0	6	;
water	132:4	0:0	4	}
for	134:4	149:4	2	( int i = 0 ;i < p_sys -> i_id;i ++)
forinit	0:0	134:18	3	 int i = 0 ;
decl	134:9	134:18	4	int	i
op	134:15	0:0	4	=
water	134:17	0:0	4	0
cond	134:20	134:31	3	i < p_sys -> i_id
water	134:20	0:0	4	i
op	134:22	0:0	4	<
water	134:24	0:0	4	p_sys
op	134:29	0:0	4	->
water	134:31	0:0	4	i_id
forexpr	134:37	134:38	3	i ++
water	134:37	0:0	4	i
op	134:38	0:0	4	++
stmts	135:4	149:4	3	
water	135:4	0:0	4	{
decl	136:8	136:47	4	sout_stream_id_sys_t	*id
op	136:33	0:0	4	=
water	136:35	0:0	4	p_sys
op	136:40	0:0	4	->
water	136:42	0:0	4	id
op	136:44	0:0	4	[
water	136:45	0:0	4	i
op	136:46	0:0	4	]
if	137:8	138:20	4	(! id -> id)
cond	137:12	137:17	5	! id -> id
op	137:12	0:0	6	!
water	137:13	0:0	6	id
op	137:15	0:0	6	->
water	137:17	0:0	6	id
stmts	138:12	138:20	5	
continue	138:12	138:20	6	
decl	139:8	139:38	4	block_t	*p_block
op	139:25	0:0	4	=
water	139:27	0:0	4	id
op	139:29	0:0	4	->
water	139:31	0:0	4	p_first
while	140:8	146:8	4	(p_block)
cond	140:15	140:15	5	p_block
water	140:15	0:0	6	p_block
stmts	141:8	146:8	5	
water	141:8	0:0	6	{
decl	142:12	142:45	6	block_t	*p_next
op	142:28	0:0	6	=
water	142:30	0:0	6	p_block
op	142:37	0:0	6	->
water	142:39	0:0	6	p_next
water	143:12	0:0	6	p_block
op	143:19	0:0	6	->
water	143:21	0:0	6	p_next
op	143:28	0:0	6	=
water	143:30	0:0	6	NULL
water	143:34	0:0	6	;
call	144:12	144:46	6	OutputSend
arg	144:24	144:32	7	p_stream
water	144:24	0:0	8	p_stream
arg	144:34	144:36	7	id
water	144:34	0:0	8	id
arg	144:38	144:46	7	p_block
water	144:38	0:0	8	p_block
water	144:47	0:0	6	;
water	145:12	0:0	6	p_block
op	145:20	0:0	6	=
water	145:22	0:0	6	p_next
water	145:28	0:0	6	;
water	146:8	0:0	6	}
water	147:8	0:0	4	id
op	147:10	0:0	4	->
water	147:12	0:0	4	p_first
op	147:20	0:0	4	=
water	147:22	0:0	4	NULL
water	147:26	0:0	4	;
water	148:8	0:0	4	id
op	148:10	0:0	4	->
water	148:12	0:0	4	pp_last
op	148:20	0:0	4	=
op	148:22	0:0	4	&
water	148:23	0:0	4	id
op	148:25	0:0	4	->
water	148:27	0:0	4	p_first
water	148:34	0:0	4	;
water	149:4	0:0	4	}
