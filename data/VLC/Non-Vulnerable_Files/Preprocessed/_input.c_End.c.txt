func	2:0	71:0	0	static void	End
params	2:15	0:0	1	
param	2:17	2:42	2	input_thread_t *	p_input
stmnts	0:0	70:66	1	
decl	4:4	4:9	2	int	i
call	6:4	6:38	2	input_ChangeState
arg	6:23	6:30	3	p_input
water	6:23	0:0	4	p_input
arg	6:32	6:38	3	END_S
water	6:32	0:0	4	END_S
water	6:39	0:0	2	;
call	8:4	8:34	2	input_ControlVarStop
arg	8:26	8:34	3	p_input
water	8:26	0:0	4	p_input
water	8:35	0:0	2	;
call	10:4	10:59	2	es_out_SetMode
arg	10:20	10:40	3	p_input->p->p_es_out
water	10:20	0:0	4	p_input
op	10:27	0:0	4	->
water	10:29	0:0	4	p
op	10:30	0:0	4	->
water	10:32	0:0	4	p_es_out
arg	10:42	10:59	3	ES_OUT_MODE_NONE
water	10:42	0:0	4	ES_OUT_MODE_NONE
water	10:60	0:0	2	;
call	12:4	12:41	2	InputSourceClean
arg	12:22	12:41	3	&p_input->p->input
op	12:22	0:0	4	&
water	12:23	0:0	4	p_input
op	12:30	0:0	4	->
water	12:32	0:0	4	p
op	12:33	0:0	4	->
water	12:35	0:0	4	input
water	12:42	0:0	2	;
for	14:4	18:4	2	(i = 0 ;i < p_input -> p -> i_slave;i ++)
forinit	14:9	14:14	3	i = 0 ;
water	14:9	0:0	4	i
op	14:11	0:0	4	=
water	14:13	0:0	4	0
water	14:14	0:0	4	;
cond	14:16	14:32	3	i < p_input -> p -> i_slave
water	14:16	0:0	4	i
op	14:18	0:0	4	<
water	14:20	0:0	4	p_input
op	14:27	0:0	4	->
water	14:29	0:0	4	p
op	14:30	0:0	4	->
water	14:32	0:0	4	i_slave
forexpr	14:41	14:42	3	i ++
water	14:41	0:0	4	i
op	14:42	0:0	4	++
stmts	15:4	18:4	3	
water	15:4	0:0	4	{
call	16:8	16:47	4	InputSourceClean
arg	16:26	16:47	5	p_input->p->slave[i]
water	16:26	0:0	6	p_input
op	16:33	0:0	6	->
water	16:35	0:0	6	p
op	16:36	0:0	6	->
water	16:38	0:0	6	slave
op	16:43	0:0	6	[
water	16:44	0:0	6	i
op	16:45	0:0	6	]
water	16:48	0:0	4	;
call	17:8	17:35	4	free
arg	17:14	17:35	5	p_input->p->slave[i]
water	17:14	0:0	6	p_input
op	17:21	0:0	6	->
water	17:23	0:0	6	p
op	17:24	0:0	6	->
water	17:26	0:0	6	slave
op	17:31	0:0	6	[
water	17:32	0:0	6	i
op	17:33	0:0	6	]
water	17:36	0:0	4	;
water	18:4	0:0	4	}
call	19:4	19:28	2	free
arg	19:10	19:28	3	p_input->p->slave
water	19:10	0:0	4	p_input
op	19:17	0:0	4	->
water	19:19	0:0	4	p
op	19:20	0:0	4	->
water	19:22	0:0	4	slave
water	19:29	0:0	2	;
if	21:4	22:45	2	(p_input -> p -> p_es_out)
cond	21:8	21:20	3	p_input -> p -> p_es_out
water	21:8	0:0	4	p_input
op	21:15	0:0	4	->
water	21:17	0:0	4	p
op	21:18	0:0	4	->
water	21:20	0:0	4	p_es_out
stmts	22:8	22:45	3	
call	22:8	22:44	4	es_out_Delete
arg	22:23	22:44	5	p_input->p->p_es_out
water	22:23	0:0	6	p_input
op	22:30	0:0	6	->
water	22:32	0:0	6	p
op	22:33	0:0	6	->
water	22:35	0:0	6	p_es_out
water	22:45	0:0	4	;
call	23:4	23:66	2	es_out_SetMode
arg	23:20	23:48	3	p_input->p->p_es_out_display
water	23:20	0:0	4	p_input
op	23:27	0:0	4	->
water	23:29	0:0	4	p
op	23:30	0:0	4	->
water	23:32	0:0	4	p_es_out_display
arg	23:50	23:66	3	ES_OUT_MODE_END
water	23:50	0:0	4	ES_OUT_MODE_END
water	23:67	0:0	2	;
if	24:4	54:4	2	(! p_input -> b_preparsing)
cond	24:8	24:18	3	! p_input -> b_preparsing
op	24:8	0:0	4	!
water	24:9	0:0	4	p_input
op	24:16	0:0	4	->
water	24:18	0:0	4	b_preparsing
stmts	25:4	54:4	3	
water	25:4	0:0	4	{
if	27:8	45:8	4	(libvlc_stats (p_input ))
cond	27:12	27:34	5	libvlc_stats (p_input )
call	27:12	27:34	6	libvlc_stats
arg	27:26	27:34	7	p_input
water	27:26	0:0	8	p_input
stmts	28:8	45:8	5	
water	28:8	0:0	6	{
call	30:12	30:74	6	stats_ComputeInputStats
arg	30:37	30:44	7	p_input
water	30:37	0:0	8	p_input
arg	30:46	30:74	7	p_input->p->p_item->p_stats
water	30:46	0:0	8	p_input
op	30:53	0:0	8	->
water	30:55	0:0	8	p
op	30:56	0:0	8	->
water	30:58	0:0	8	p_item
op	30:64	0:0	8	->
water	30:66	0:0	8	p_stats
water	30:75	0:0	6	;
call	31:12	31:30	6	CL_CO
arg	31:19	31:30	7	read_bytes
water	31:19	0:0	8	read_bytes
water	31:31	0:0	6	;
call	32:12	32:32	6	CL_CO
arg	32:19	32:32	7	read_packets
water	32:19	0:0	8	read_packets
water	32:33	0:0	6	;
call	33:12	33:30	6	CL_CO
arg	33:19	33:30	7	demux_read
water	33:19	0:0	8	demux_read
water	33:31	0:0	6	;
call	34:12	34:33	6	CL_CO
arg	34:19	34:33	7	input_bitrate
water	34:19	0:0	8	input_bitrate
water	34:34	0:0	6	;
call	35:12	35:33	6	CL_CO
arg	35:19	35:33	7	demux_bitrate
water	35:19	0:0	8	demux_bitrate
water	35:34	0:0	6	;
call	36:12	36:35	6	CL_CO
arg	36:19	36:35	7	demux_corrupted
water	36:19	0:0	8	demux_corrupted
water	36:36	0:0	6	;
call	37:12	37:39	6	CL_CO
arg	37:19	37:39	7	demux_discontinuity
water	37:19	0:0	8	demux_discontinuity
water	37:40	0:0	6	;
call	38:12	38:35	6	CL_CO
arg	38:19	38:35	7	played_abuffers
water	38:19	0:0	8	played_abuffers
water	38:36	0:0	6	;
call	39:12	39:33	6	CL_CO
arg	39:19	39:33	7	lost_abuffers
water	39:19	0:0	8	lost_abuffers
water	39:34	0:0	6	;
call	40:12	40:38	6	CL_CO
arg	40:19	40:38	7	displayed_pictures
water	40:19	0:0	8	displayed_pictures
water	40:39	0:0	6	;
call	41:12	41:33	6	CL_CO
arg	41:19	41:33	7	lost_pictures
water	41:19	0:0	8	lost_pictures
water	41:34	0:0	6	;
call	42:12	42:32	6	CL_CO
arg	42:19	42:32	7	decoded_audio
water	42:19	0:0	8	decoded_audio
water	42:34	0:0	6	;
call	43:12	43:33	6	CL_CO
arg	43:19	43:33	7	decoded_video
water	43:19	0:0	8	decoded_video
water	43:34	0:0	6	;
call	44:12	44:30	6	CL_CO
arg	44:19	44:30	7	decoded_sub
water	44:19	0:0	8	decoded_sub
water	44:32	0:0	6	;
water	45:8	0:0	6	}
if	47:8	52:8	4	(p_input -> p -> p_sout)
cond	47:12	47:24	5	p_input -> p -> p_sout
water	47:12	0:0	6	p_input
op	47:19	0:0	6	->
water	47:21	0:0	6	p
op	47:22	0:0	6	->
water	47:24	0:0	6	p_sout
stmts	48:8	52:8	5	
water	48:8	0:0	6	{
call	49:12	49:37	6	CL_CO
arg	49:19	49:37	7	sout_sent_packets
water	49:19	0:0	8	sout_sent_packets
water	49:38	0:0	6	;
call	50:12	50:35	6	CL_CO
arg	50:19	50:35	7	sout_sent_bytes
water	50:19	0:0	8	sout_sent_bytes
water	50:36	0:0	6	;
call	51:12	51:37	6	CL_CO
arg	51:19	51:37	7	sout_send_bitrate
water	51:19	0:0	8	sout_send_bitrate
water	51:38	0:0	6	;
water	52:8	0:0	6	}
water	54:4	0:0	4	}
call	55:4	55:46	2	vlc_mutex_lock
arg	55:20	55:46	3	&p_input->p->p_item->lock
op	55:20	0:0	4	&
water	55:21	0:0	4	p_input
op	55:28	0:0	4	->
water	55:30	0:0	4	p
op	55:31	0:0	4	->
water	55:33	0:0	4	p_item
op	55:39	0:0	4	->
water	55:41	0:0	4	lock
water	55:47	0:0	2	;
if	56:4	63:4	2	(p_input -> p -> i_attachment > 0)
cond	56:8	56:35	3	p_input -> p -> i_attachment > 0
water	56:8	0:0	4	p_input
op	56:15	0:0	4	->
water	56:17	0:0	4	p
op	56:18	0:0	4	->
water	56:20	0:0	4	i_attachment
op	56:33	0:0	4	>
water	56:35	0:0	4	0
stmts	57:4	63:4	3	
water	57:4	0:0	4	{
for	58:8	59:68	4	(i = 0 ;i < p_input -> p -> i_attachment;i ++)
forinit	58:13	58:18	5	i = 0 ;
water	58:13	0:0	6	i
op	58:15	0:0	6	=
water	58:17	0:0	6	0
water	58:18	0:0	6	;
cond	58:20	58:36	5	i < p_input -> p -> i_attachment
water	58:20	0:0	6	i
op	58:22	0:0	6	<
water	58:24	0:0	6	p_input
op	58:31	0:0	6	->
water	58:33	0:0	6	p
op	58:34	0:0	6	->
water	58:36	0:0	6	i_attachment
forexpr	58:50	58:51	5	i ++
water	58:50	0:0	6	i
op	58:51	0:0	6	++
stmts	59:12	59:68	5	
call	59:12	59:67	6	vlc_input_attachment_Delete
arg	59:41	59:67	7	p_input->p->attachment[i]
water	59:41	0:0	8	p_input
op	59:48	0:0	8	->
water	59:50	0:0	8	p
op	59:51	0:0	8	->
water	59:53	0:0	8	attachment
op	59:63	0:0	8	[
water	59:64	0:0	8	i
op	59:65	0:0	8	]
water	59:68	0:0	6	;
call	60:8	60:68	4	TAB_CLEAN
arg	60:19	60:43	5	p_input->p->i_attachment
water	60:19	0:0	6	p_input
op	60:26	0:0	6	->
water	60:28	0:0	6	p
op	60:29	0:0	6	->
water	60:31	0:0	6	i_attachment
arg	60:45	60:68	5	p_input->p->attachment
water	60:45	0:0	6	p_input
op	60:52	0:0	6	->
water	60:54	0:0	6	p
op	60:55	0:0	6	->
water	60:57	0:0	6	attachment
water	60:69	0:0	4	;
call	61:8	61:42	4	free
arg	61:14	61:42	5	p_input->p->attachment_demux
water	61:14	0:0	6	p_input
op	61:21	0:0	6	->
water	61:23	0:0	6	p
op	61:24	0:0	6	->
water	61:26	0:0	6	attachment_demux
water	61:43	0:0	4	;
water	62:8	0:0	4	p_input
op	62:15	0:0	4	->
water	62:17	0:0	4	p
op	62:18	0:0	4	->
water	62:20	0:0	4	attachment_demux
op	62:37	0:0	4	=
water	62:39	0:0	4	NULL
water	62:43	0:0	4	;
water	63:4	0:0	4	}
call	64:4	64:48	2	vlc_mutex_unlock
arg	64:22	64:48	3	&p_input->p->p_item->lock
op	64:22	0:0	4	&
water	64:23	0:0	4	p_input
op	64:30	0:0	4	->
water	64:32	0:0	4	p
op	64:33	0:0	4	->
water	64:35	0:0	4	p_item
op	64:41	0:0	4	->
water	64:43	0:0	4	lock
water	64:49	0:0	2	;
call	66:4	67:58	2	input_resource_RequestSout
arg	66:32	66:54	3	p_input->p->p_resource
water	66:32	0:0	4	p_input
op	66:39	0:0	4	->
water	66:41	0:0	4	p
op	66:42	0:0	4	->
water	66:44	0:0	4	p_resource
arg	67:33	67:51	3	p_input->p->p_sout
water	67:33	0:0	4	p_input
op	67:40	0:0	4	->
water	67:42	0:0	4	p
op	67:43	0:0	4	->
water	67:45	0:0	4	p_sout
arg	67:53	67:58	3	NULL
water	67:53	0:0	4	NULL
water	67:59	0:0	2	;
call	68:4	68:58	2	input_resource_SetInput
arg	68:29	68:51	3	p_input->p->p_resource
water	68:29	0:0	4	p_input
op	68:36	0:0	4	->
water	68:38	0:0	4	p
op	68:39	0:0	4	->
water	68:41	0:0	4	p_resource
arg	68:53	68:58	3	NULL
water	68:53	0:0	4	NULL
water	68:59	0:0	2	;
if	69:4	70:66	2	(p_input -> p -> p_resource_private)
cond	69:8	69:20	3	p_input -> p -> p_resource_private
water	69:8	0:0	4	p_input
op	69:15	0:0	4	->
water	69:17	0:0	4	p
op	69:18	0:0	4	->
water	69:20	0:0	4	p_resource_private
stmts	70:8	70:66	3	
call	70:8	70:65	4	input_resource_Terminate
arg	70:34	70:65	5	p_input->p->p_resource_private
water	70:34	0:0	6	p_input
op	70:41	0:0	6	->
water	70:43	0:0	6	p
op	70:44	0:0	6	->
water	70:46	0:0	6	p_resource_private
water	70:66	0:0	4	;
