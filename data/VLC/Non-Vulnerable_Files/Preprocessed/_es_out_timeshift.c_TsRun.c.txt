func	2:0	99:0	0	static void *	TsRun
params	2:18	0:0	1	
param	2:20	2:33	2	void *	p_data
stmnts	0:0	98:15	1	
decl	4:4	4:30	2	ts_thread_t	*p_ts
op	4:22	0:0	2	=
water	4:24	0:0	2	p_data
decl	5:4	5:33	2	mtime_t	i_buffering_date
op	5:29	0:0	2	=
op	5:31	0:0	2	-
water	5:32	0:0	2	1
for	6:4	97:4	2	(;;)
forinit	6:9	6:9	3	;
water	6:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	7:4	97:4	3	
water	7:4	0:0	4	{
decl	8:8	8:20	4	ts_cmd_t	cmd
decl	9:8	9:27	4	mtime_t	i_deadline
decl	10:8	10:24	4	bool	b_buffering
call	12:8	12:36	4	vlc_mutex_lock
arg	12:24	12:36	5	&p_ts->lock
op	12:24	0:0	6	&
water	12:25	0:0	6	p_ts
op	12:29	0:0	6	->
water	12:31	0:0	6	lock
water	12:37	0:0	4	;
call	13:8	13:40	4	mutex_cleanup_push
arg	13:28	13:40	5	&p_ts->lock
op	13:28	0:0	6	&
water	13:29	0:0	6	p_ts
op	13:33	0:0	6	->
water	13:35	0:0	6	lock
water	13:41	0:0	4	;
for	14:8	25:8	4	(;;)
forinit	14:13	14:13	5	;
water	14:13	0:0	6	;
cond	0:0	0:0	5	
forexpr	0:0	0:0	5	
stmts	15:8	25:8	5	
water	15:8	0:0	6	{
decl	16:12	16:45	6	const int	canc
op	16:27	0:0	6	=
call	16:29	16:44	7	vlc_savecancel
water	17:12	0:0	6	b_buffering
op	17:24	0:0	6	=
call	17:26	17:59	6	es_out_GetBuffering
arg	17:47	17:59	7	p_ts->p_out
water	17:47	0:0	8	p_ts
op	17:51	0:0	8	->
water	17:53	0:0	8	p_out
water	17:60	0:0	6	;
if	18:12	22:12	6	(( ! p_ts -> b_paused || b_buffering ) && !TsPopCmdLocked (p_ts ,& cmd ,false ))
cond	18:16	18:89	7	( ! p_ts -> b_paused || b_buffering ) && !TsPopCmdLocked (p_ts ,& cmd ,false )
water	18:16	0:0	8	(
op	18:18	0:0	8	!
water	18:19	0:0	8	p_ts
op	18:23	0:0	8	->
water	18:25	0:0	8	b_paused
op	18:34	0:0	8	||
water	18:37	0:0	8	b_buffering
water	18:49	0:0	8	)
op	18:51	0:0	8	&&
op	18:54	0:0	8	!
call	18:55	18:89	8	TsPopCmdLocked
arg	18:71	18:75	9	p_ts
water	18:71	0:0	10	p_ts
arg	18:77	18:81	9	&cmd
op	18:77	0:0	10	&
water	18:78	0:0	10	cmd
arg	18:83	18:89	9	false
water	18:83	0:0	10	false
stmts	19:12	22:12	7	
water	19:12	0:0	8	{
call	20:16	20:40	8	vlc_restorecancel
arg	20:35	20:40	9	canc
water	20:35	0:0	10	canc
water	20:41	0:0	8	;
break	21:16	21:21	8	
water	22:12	0:0	8	}
call	23:12	23:36	6	vlc_restorecancel
arg	23:31	23:36	7	canc
water	23:31	0:0	8	canc
water	23:37	0:0	6	;
call	24:12	24:52	6	vlc_cond_wait
arg	24:27	24:38	7	&p_ts->wait
op	24:27	0:0	8	&
water	24:28	0:0	8	p_ts
op	24:32	0:0	8	->
water	24:34	0:0	8	wait
arg	24:40	24:52	7	&p_ts->lock
op	24:40	0:0	8	&
water	24:41	0:0	8	p_ts
op	24:45	0:0	8	->
water	24:47	0:0	8	lock
water	24:53	0:0	6	;
water	25:8	0:0	6	}
if	26:8	29:8	4	(b_buffering && i_buffering_date < 0)
cond	26:12	26:46	5	b_buffering && i_buffering_date < 0
water	26:12	0:0	6	b_buffering
op	26:24	0:0	6	&&
water	26:27	0:0	6	i_buffering_date
op	26:44	0:0	6	<
water	26:46	0:0	6	0
stmts	27:8	29:8	5	
water	27:8	0:0	6	{
water	28:12	0:0	6	i_buffering_date
op	28:29	0:0	6	=
water	28:31	0:0	6	cmd
op	28:34	0:0	6	.
water	28:35	0:0	6	i_date
water	28:41	0:0	6	;
water	29:8	0:0	6	}
else	30:8	37:8	4
stmts	30:13	37:8	5	
if	30:13	37:8	6	(i_buffering_date > 0)
cond	30:17	30:36	7	i_buffering_date > 0
water	30:17	0:0	8	i_buffering_date
op	30:34	0:0	8	>
water	30:36	0:0	8	0
stmts	31:8	37:8	7	
water	31:8	0:0	8	{
water	32:12	0:0	8	p_ts
op	32:16	0:0	8	->
water	32:18	0:0	8	i_buffering_delay
op	32:36	0:0	8	+=
water	32:39	0:0	8	i_buffering_date
op	32:56	0:0	8	-
water	32:58	0:0	8	cmd
op	32:61	0:0	8	.
water	32:62	0:0	8	i_date
water	32:68	0:0	8	;
if	33:12	34:45	8	(b_buffering)
cond	33:16	33:16	9	b_buffering
water	33:16	0:0	10	b_buffering
stmts	34:16	34:45	9	
water	34:16	0:0	10	i_buffering_date
op	34:33	0:0	10	=
water	34:35	0:0	10	cmd
op	34:38	0:0	10	.
water	34:39	0:0	10	i_date
water	34:45	0:0	10	;
else	35:12	36:37	8
stmts	36:16	36:37	9	
water	36:16	0:0	10	i_buffering_date
op	36:33	0:0	10	=
op	36:35	0:0	10	-
water	36:36	0:0	10	1
water	36:37	0:0	10	;
water	37:8	0:0	8	}
if	38:8	39:42	4	(p_ts -> i_rate_date < 0)
cond	38:12	38:32	5	p_ts -> i_rate_date < 0
water	38:12	0:0	6	p_ts
op	38:16	0:0	6	->
water	38:18	0:0	6	i_rate_date
op	38:30	0:0	6	<
water	38:32	0:0	6	0
stmts	39:12	39:42	5	
water	39:12	0:0	6	p_ts
op	39:16	0:0	6	->
water	39:18	0:0	6	i_rate_date
op	39:30	0:0	6	=
water	39:32	0:0	6	cmd
op	39:35	0:0	6	.
water	39:36	0:0	6	i_date
water	39:42	0:0	6	;
water	40:8	0:0	4	p_ts
op	40:12	0:0	4	->
water	40:14	0:0	4	i_rate_delay
op	40:27	0:0	4	=
water	40:29	0:0	4	0
water	40:30	0:0	4	;
if	41:8	45:8	4	(p_ts -> i_rate_source != p_ts -> i_rate)
cond	41:12	41:41	5	p_ts -> i_rate_source != p_ts -> i_rate
water	41:12	0:0	6	p_ts
op	41:16	0:0	6	->
water	41:18	0:0	6	i_rate_source
op	41:32	0:0	6	!=
water	41:35	0:0	6	p_ts
op	41:39	0:0	6	->
water	41:41	0:0	6	i_rate
stmts	42:8	45:8	5	
water	42:8	0:0	6	{
decl	43:12	43:69	6	const mtime_t	i_duration
op	43:37	0:0	6	=
water	43:39	0:0	6	cmd
op	43:42	0:0	6	.
water	43:43	0:0	6	i_date
op	43:50	0:0	6	-
water	43:52	0:0	6	p_ts
op	43:56	0:0	6	->
water	43:58	0:0	6	i_rate_date
water	44:12	0:0	6	p_ts
op	44:16	0:0	6	->
water	44:18	0:0	6	i_rate_delay
op	44:31	0:0	6	=
water	44:33	0:0	6	i_duration
op	44:44	0:0	6	*
water	44:46	0:0	6	p_ts
op	44:50	0:0	6	->
water	44:52	0:0	6	i_rate
op	44:59	0:0	6	/
water	44:61	0:0	6	p_ts
op	44:65	0:0	6	->
water	44:67	0:0	6	i_rate_source
op	44:81	0:0	6	-
water	44:83	0:0	6	i_duration
water	44:93	0:0	6	;
water	45:8	0:0	6	}
if	46:8	65:8	4	(p_ts -> i_cmd_delay + p_ts -> i_rate_delay + p_ts -> i_buffering_delay < 0 && p_ts -> i_rate != p_ts -> i_rate_source)
cond	46:12	46:106	5	p_ts -> i_cmd_delay + p_ts -> i_rate_delay + p_ts -> i_buffering_delay < 0 && p_ts -> i_rate != p_ts -> i_rate_source
water	46:12	0:0	6	p_ts
op	46:16	0:0	6	->
water	46:18	0:0	6	i_cmd_delay
op	46:30	0:0	6	+
water	46:32	0:0	6	p_ts
op	46:36	0:0	6	->
water	46:38	0:0	6	i_rate_delay
op	46:51	0:0	6	+
water	46:53	0:0	6	p_ts
op	46:57	0:0	6	->
water	46:59	0:0	6	i_buffering_delay
op	46:77	0:0	6	<
water	46:79	0:0	6	0
op	46:81	0:0	6	&&
water	46:84	0:0	6	p_ts
op	46:88	0:0	6	->
water	46:90	0:0	6	i_rate
op	46:97	0:0	6	!=
water	46:100	0:0	6	p_ts
op	46:104	0:0	6	->
water	46:106	0:0	6	i_rate_source
stmts	47:8	65:8	5	
water	47:8	0:0	6	{
decl	48:12	48:45	6	const int	canc
op	48:27	0:0	6	=
call	48:29	48:44	7	vlc_savecancel
call	50:12	50:100	6	msg_Warn
arg	50:22	50:35	7	p_ts->p_input
water	50:22	0:0	8	p_ts
op	50:26	0:0	8	->
water	50:28	0:0	8	p_input
arg	50:37	50:78	7	"es out timeshift: auto reset rate to %d"
water	50:37	0:0	8	"es out timeshift: auto reset rate to %d"
arg	50:80	50:100	7	p_ts->i_rate_source
water	50:80	0:0	8	p_ts
op	50:84	0:0	8	->
water	50:86	0:0	8	i_rate_source
water	50:101	0:0	6	;
water	51:12	0:0	6	p_ts
op	51:16	0:0	6	->
water	51:18	0:0	6	i_cmd_delay
op	51:30	0:0	6	=
water	51:32	0:0	6	0
water	51:33	0:0	6	;
water	52:12	0:0	6	p_ts
op	52:16	0:0	6	->
water	52:18	0:0	6	i_buffering_delay
op	52:36	0:0	6	=
water	52:38	0:0	6	0
water	52:39	0:0	6	;
water	53:12	0:0	6	p_ts
op	53:16	0:0	6	->
water	53:18	0:0	6	i_rate_delay
op	53:31	0:0	6	=
water	53:33	0:0	6	0
water	53:34	0:0	6	;
water	54:12	0:0	6	p_ts
op	54:16	0:0	6	->
water	54:18	0:0	6	i_rate_date
op	54:30	0:0	6	=
op	54:32	0:0	6	-
water	54:33	0:0	6	1
water	54:34	0:0	6	;
water	55:12	0:0	6	p_ts
op	55:16	0:0	6	->
water	55:18	0:0	6	i_rate
op	55:25	0:0	6	=
water	55:27	0:0	6	p_ts
op	55:31	0:0	6	->
water	55:33	0:0	6	i_rate_source
water	55:46	0:0	6	;
if	56:12	63:12	6	(!es_out_SetRate (p_ts -> p_out ,p_ts -> i_rate_source ,p_ts -> i_rate ))
cond	56:16	56:80	7	!es_out_SetRate (p_ts -> p_out ,p_ts -> i_rate_source ,p_ts -> i_rate )
op	56:16	0:0	8	!
call	56:17	56:80	8	es_out_SetRate
arg	56:33	56:44	9	p_ts->p_out
water	56:33	0:0	10	p_ts
op	56:37	0:0	10	->
water	56:39	0:0	10	p_out
arg	56:46	56:65	9	p_ts->i_rate_source
water	56:46	0:0	10	p_ts
op	56:50	0:0	10	->
water	56:52	0:0	10	i_rate_source
arg	56:67	56:80	9	p_ts->i_rate
water	56:67	0:0	10	p_ts
op	56:71	0:0	10	->
water	56:73	0:0	10	i_rate
stmts	57:12	63:12	7	
water	57:12	0:0	8	{
decl	58:16	58:59	8	vlc_value_t	val
op	58:32	0:0	8	=
water	58:34	0:0	8	{
op	58:36	0:0	8	.
water	58:37	0:0	8	i_int
op	58:43	0:0	8	=
water	58:45	0:0	8	p_ts
op	58:49	0:0	8	->
water	58:51	0:0	8	i_rate
water	58:58	0:0	8	}
call	62:16	62:79	8	input_ControlPush
arg	62:35	62:48	9	p_ts->p_input
water	62:35	0:0	10	p_ts
op	62:39	0:0	10	->
water	62:41	0:0	10	p_input
arg	62:50	62:72	9	INPUT_CONTROL_SET_RATE
water	62:50	0:0	10	INPUT_CONTROL_SET_RATE
arg	62:74	62:79	9	&val
op	62:74	0:0	10	&
water	62:75	0:0	10	val
water	62:80	0:0	8	;
water	63:12	0:0	8	}
call	64:12	64:36	6	vlc_restorecancel
arg	64:31	64:36	7	canc
water	64:31	0:0	8	canc
water	64:37	0:0	6	;
water	65:8	0:0	6	}
water	66:8	0:0	4	i_deadline
op	66:19	0:0	4	=
water	66:21	0:0	4	cmd
op	66:24	0:0	4	.
water	66:25	0:0	4	i_date
op	66:32	0:0	4	+
water	66:34	0:0	4	p_ts
op	66:38	0:0	4	->
water	66:40	0:0	4	i_cmd_delay
op	66:52	0:0	4	+
water	66:54	0:0	4	p_ts
op	66:58	0:0	4	->
water	66:60	0:0	4	i_rate_delay
op	66:73	0:0	4	+
water	66:75	0:0	4	p_ts
op	66:79	0:0	4	->
water	66:81	0:0	4	i_buffering_delay
water	66:98	0:0	4	;
call	67:8	67:24	4	vlc_cleanup_run
water	67:25	0:0	4	;
call	70:8	70:52	4	vlc_cleanup_push
arg	70:26	70:45	5	cmd_cleanup_routine
water	70:26	0:0	6	cmd_cleanup_routine
arg	70:47	70:52	5	&cmd
op	70:47	0:0	6	&
water	70:48	0:0	6	cmd
water	70:53	0:0	4	;
call	71:8	71:26	4	mwait
arg	71:15	71:26	5	i_deadline
water	71:15	0:0	6	i_deadline
water	71:27	0:0	4	;
call	72:8	72:24	4	vlc_cleanup_pop
water	72:25	0:0	4	;
decl	74:8	74:41	4	const int	canc
op	74:23	0:0	4	=
call	74:25	74:40	5	vlc_savecancel
switch	75:8	95:8	4	(cmd . i_type)
cond	75:16	75:20	5	cmd . i_type
water	75:16	0:0	6	cmd
op	75:19	0:0	6	.
water	75:20	0:0	6	i_type
stmts	76:8	95:8	5	
water	76:8	0:0	6	{
label	77:8	77:18	6	case C_ADD :
call	78:12	78:45	6	CmdExecuteAdd
arg	78:27	78:38	7	p_ts->p_out
water	78:27	0:0	8	p_ts
op	78:31	0:0	8	->
water	78:33	0:0	8	p_out
arg	78:40	78:45	7	&cmd
op	78:40	0:0	8	&
water	78:41	0:0	8	cmd
water	78:46	0:0	6	;
call	79:12	79:30	6	CmdCleanAdd
arg	79:25	79:30	7	&cmd
op	79:25	0:0	8	&
water	79:26	0:0	8	cmd
water	79:31	0:0	6	;
break	80:12	80:17	6	
label	81:8	81:19	6	case C_SEND :
call	82:12	82:46	6	CmdExecuteSend
arg	82:28	82:39	7	p_ts->p_out
water	82:28	0:0	8	p_ts
op	82:32	0:0	8	->
water	82:34	0:0	8	p_out
arg	82:41	82:46	7	&cmd
op	82:41	0:0	8	&
water	82:42	0:0	8	cmd
water	82:47	0:0	6	;
call	83:12	83:31	6	CmdCleanSend
arg	83:26	83:31	7	&cmd
op	83:26	0:0	8	&
water	83:27	0:0	8	cmd
water	83:32	0:0	6	;
break	84:12	84:17	6	
label	85:8	85:22	6	case C_CONTROL :
call	86:12	86:49	6	CmdExecuteControl
arg	86:31	86:42	7	p_ts->p_out
water	86:31	0:0	8	p_ts
op	86:35	0:0	8	->
water	86:37	0:0	8	p_out
arg	86:44	86:49	7	&cmd
op	86:44	0:0	8	&
water	86:45	0:0	8	cmd
water	86:50	0:0	6	;
call	87:12	87:34	6	CmdCleanControl
arg	87:29	87:34	7	&cmd
op	87:29	0:0	8	&
water	87:30	0:0	8	cmd
water	87:35	0:0	6	;
break	88:12	88:17	6	
label	89:8	89:18	6	case C_DEL :
call	90:12	90:45	6	CmdExecuteDel
arg	90:27	90:38	7	p_ts->p_out
water	90:27	0:0	8	p_ts
op	90:31	0:0	8	->
water	90:33	0:0	8	p_out
arg	90:40	90:45	7	&cmd
op	90:40	0:0	8	&
water	90:41	0:0	8	cmd
water	90:46	0:0	6	;
break	91:12	91:17	6	
label	92:8	92:15	6	default :
call	93:12	93:20	6	assert
arg	93:19	93:20	7	0
water	93:19	0:0	8	0
water	93:21	0:0	6	;
break	94:12	94:17	6	
water	95:8	0:0	6	}
call	96:8	96:32	4	vlc_restorecancel
arg	96:27	96:32	5	canc
water	96:27	0:0	6	canc
water	96:33	0:0	4	;
water	97:4	0:0	4	}
return	98:4	98:15	2	NULL
water	98:11	0:0	3	NULL
