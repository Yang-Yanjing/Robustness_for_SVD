func	2:0	183:0	0	static subpicture_t *	YuvaYuvp
params	2:29	0:0	1	
param	2:31	2:54	2	subpicture_t *	p_subpic
stmnts	0:0	182:19	1	
decl	4:4	4:40	2	subpicture_region_t	*p_region
op	4:34	0:0	2	=
water	4:36	0:0	2	NULL
if	5:4	5:31	2	(! p_subpic)
cond	5:8	5:9	3	! p_subpic
op	5:8	0:0	4	!
water	5:9	0:0	4	p_subpic
stmts	5:20	5:31	3	
return	5:20	5:31	4	NULL
water	5:27	0:0	5	NULL
for	6:4	181:4	2	(p_region = p_subpic -> p_region ;p_region;p_region = p_region -> p_next)
forinit	6:9	6:38	3	p_region = p_subpic -> p_region ;
water	6:9	0:0	4	p_region
op	6:18	0:0	4	=
water	6:20	0:0	4	p_subpic
op	6:28	0:0	4	->
water	6:30	0:0	4	p_region
water	6:38	0:0	4	;
cond	6:40	6:40	3	p_region
water	6:40	0:0	4	p_region
forexpr	6:50	6:71	3	p_region = p_region -> p_next
water	6:50	0:0	4	p_region
op	6:59	0:0	4	=
water	6:61	0:0	4	p_region
op	6:69	0:0	4	->
water	6:71	0:0	4	p_next
stmts	7:4	181:4	3	
water	7:4	0:0	4	{
decl	8:8	8:46	4	video_format_t	*p_fmt
op	8:30	0:0	4	=
op	8:32	0:0	4	&
water	8:33	0:0	4	p_region
op	8:41	0:0	4	->
water	8:43	0:0	4	fmt
decl	9:8	9:38	4	int	i
op	9:14	0:0	4	=
water	9:16	0:0	4	0
water	9:17	0:0	4	,
decl	9:8	9:38	4	int	j
op	9:21	0:0	4	=
water	9:23	0:0	4	0
water	9:24	0:0	4	,
decl	9:8	9:38	4	int	n
op	9:28	0:0	4	=
water	9:30	0:0	4	0
water	9:31	0:0	4	,
decl	9:8	9:38	4	int	p
op	9:35	0:0	4	=
water	9:37	0:0	4	0
decl	10:8	10:31	4	int	i_max_entries
op	10:26	0:0	4	=
water	10:28	0:0	4	256
decl	12:8	12:31	4	int	i_seed
op	12:19	0:0	4	=
water	12:21	0:0	4	0
water	12:22	0:0	4	xdeadbeef
decl	14:8	14:21	4	int	*pi_delta
decl	16:8	17:59	4	int	i_pixels
op	16:21	0:0	4	=
water	16:23	0:0	4	p_region
op	16:31	0:0	4	->
water	16:33	0:0	4	p_picture
op	16:42	0:0	4	->
water	16:44	0:0	4	p
op	16:45	0:0	4	[
water	16:46	0:0	4	0
op	16:47	0:0	4	]
op	16:48	0:0	4	.
water	16:49	0:0	4	i_visible_lines
op	17:24	0:0	4	*
water	17:26	0:0	4	p_region
op	17:34	0:0	4	->
water	17:36	0:0	4	p_picture
op	17:45	0:0	4	->
water	17:47	0:0	4	p
op	17:48	0:0	4	[
water	17:49	0:0	4	0
op	17:50	0:0	4	]
op	17:51	0:0	4	.
water	17:52	0:0	4	i_pitch
decl	18:8	20:67	4	int	i_iterator
op	18:23	0:0	4	=
water	18:25	0:0	4	p_region
op	18:33	0:0	4	->
water	18:35	0:0	4	p_picture
op	18:44	0:0	4	->
water	18:46	0:0	4	p
op	18:47	0:0	4	[
water	18:48	0:0	4	0
op	18:49	0:0	4	]
op	18:50	0:0	4	.
water	18:51	0:0	4	i_visible_lines
op	18:67	0:0	4	*
water	18:69	0:0	4	3
op	18:71	0:0	4	/
water	18:73	0:0	4	4
op	19:28	0:0	4	*
water	19:30	0:0	4	p_region
op	19:38	0:0	4	->
water	19:40	0:0	4	p_picture
op	19:49	0:0	4	->
water	19:51	0:0	4	p
op	19:52	0:0	4	[
water	19:53	0:0	4	0
op	19:54	0:0	4	]
op	19:55	0:0	4	.
water	19:56	0:0	4	i_pitch
op	20:24	0:0	4	+
water	20:26	0:0	4	p_region
op	20:34	0:0	4	->
water	20:36	0:0	4	p_picture
op	20:45	0:0	4	->
water	20:47	0:0	4	p
op	20:48	0:0	4	[
water	20:49	0:0	4	0
op	20:50	0:0	4	]
op	20:51	0:0	4	.
water	20:52	0:0	4	i_pitch
op	20:60	0:0	4	*
water	20:62	0:0	4	1
op	20:64	0:0	4	/
water	20:66	0:0	4	3
decl	21:8	21:27	4	int	i_tolerance
op	21:24	0:0	4	=
water	21:26	0:0	4	0
call	24:8	24:85	4	msg_Dbg
arg	24:17	24:22	5	p_enc
water	24:17	0:0	6	p_enc
arg	24:24	24:62	5	"YuvaYuvp: i_pixels=%d, i_iterator=%d"
water	24:24	0:0	6	"YuvaYuvp: i_pixels=%d, i_iterator=%d"
arg	24:64	24:72	5	i_pixels
water	24:64	0:0	6	i_pixels
arg	24:74	24:85	5	i_iterator
water	24:74	0:0	6	i_iterator
water	24:86	0:0	4	;
water	26:8	0:0	4	p_fmt
op	26:13	0:0	4	->
water	26:15	0:0	4	i_chroma
op	26:24	0:0	4	=
water	26:26	0:0	4	VLC_CODEC_YUVP
water	26:40	0:0	4	;
water	27:8	0:0	4	p_fmt
op	27:13	0:0	4	->
water	27:15	0:0	4	p_palette
op	27:25	0:0	4	=
water	27:27	0:0	4	(
water	27:28	0:0	4	video_palette_t
op	27:44	0:0	4	*
water	27:45	0:0	4	)
call	27:47	27:81	4	malloc
arg	27:55	27:81	5	sizeof(video_palette_t)
op	27:55	0:0	6	sizeof
water	27:61	0:0	6	(
water	27:63	0:0	6	video_palette_t
water	27:79	0:0	6	)
water	27:82	0:0	4	;
if	28:8	28:37	4	(! p_fmt -> p_palette)
cond	28:12	28:20	5	! p_fmt -> p_palette
op	28:12	0:0	6	!
water	28:13	0:0	6	p_fmt
op	28:18	0:0	6	->
water	28:20	0:0	6	p_palette
stmts	28:32	28:37	5	
break	28:32	28:37	6	
water	29:8	0:0	4	p_fmt
op	29:13	0:0	4	->
water	29:15	0:0	4	p_palette
op	29:24	0:0	4	->
water	29:26	0:0	4	i_entries
op	29:36	0:0	4	=
water	29:38	0:0	4	0
water	29:39	0:0	4	;
for	31:8	46:8	4	(;i_iterator > 1;i_iterator --)
forinit	31:13	31:13	5	;
water	31:13	0:0	6	;
cond	31:15	31:28	5	i_iterator > 1
water	31:15	0:0	6	i_iterator
op	31:26	0:0	6	>
water	31:28	0:0	6	1
forexpr	31:32	31:42	5	i_iterator --
water	31:32	0:0	6	i_iterator
op	31:42	0:0	6	--
stmts	32:8	46:8	5	
water	32:8	0:0	6	{
decl	33:12	33:28	6	int	a
op	33:18	0:0	6	=
water	33:20	0:0	6	i_pixels
decl	34:12	34:30	6	int	b
op	34:18	0:0	6	=
water	34:20	0:0	6	i_iterator
decl	35:12	35:17	6	int	c
while	36:12	41:12	6	(b)
cond	36:19	36:19	7	b
water	36:19	0:0	8	b
stmts	37:12	41:12	7	
water	37:12	0:0	8	{
water	38:16	0:0	8	c
op	38:18	0:0	8	=
water	38:20	0:0	8	a
op	38:22	0:0	8	%
water	38:24	0:0	8	b
water	38:25	0:0	8	;
water	39:16	0:0	8	a
op	39:18	0:0	8	=
water	39:20	0:0	8	b
water	39:21	0:0	8	;
water	40:16	0:0	8	b
op	40:18	0:0	8	=
water	40:20	0:0	8	c
water	40:21	0:0	8	;
water	41:12	0:0	8	}
if	42:12	45:12	6	(a == 1)
cond	42:16	42:21	7	a == 1
water	42:16	0:0	8	a
op	42:18	0:0	8	==
water	42:21	0:0	8	1
stmts	43:12	45:12	7	
water	43:12	0:0	8	{
break	44:16	44:21	8	
water	45:12	0:0	8	}
water	46:8	0:0	6	}
for	48:8	92:8	4	(i_tolerance = 0 ;i_tolerance < 128;i_tolerance ++)
forinit	48:13	48:28	5	i_tolerance = 0 ;
water	48:13	0:0	6	i_tolerance
op	48:25	0:0	6	=
water	48:27	0:0	6	0
water	48:28	0:0	6	;
cond	48:30	48:44	5	i_tolerance < 128
water	48:30	0:0	6	i_tolerance
op	48:42	0:0	6	<
water	48:44	0:0	6	128
forexpr	48:49	48:60	5	i_tolerance ++
water	48:49	0:0	6	i_tolerance
op	48:60	0:0	6	++
stmts	49:8	92:8	5	
water	49:8	0:0	6	{
decl	50:12	50:33	6	bool	b_success
op	50:27	0:0	6	=
water	50:29	0:0	6	true
water	51:12	0:0	6	p_fmt
op	51:17	0:0	6	->
water	51:19	0:0	6	p_palette
op	51:28	0:0	6	->
water	51:30	0:0	6	i_entries
op	51:40	0:0	6	=
water	51:42	0:0	6	0
water	51:43	0:0	6	;
for	52:12	87:12	6	(i = 0 ;i < i_pixels;)
forinit	52:17	52:22	7	i = 0 ;
water	52:17	0:0	8	i
op	52:19	0:0	8	=
water	52:21	0:0	8	0
water	52:22	0:0	8	;
cond	52:24	52:28	7	i < i_pixels
water	52:24	0:0	8	i
op	52:26	0:0	8	<
water	52:28	0:0	8	i_pixels
forexpr	0:0	0:0	7	
stmts	53:12	87:12	7	
water	53:12	0:0	8	{
decl	54:16	54:34	8	uint8_t	y
water	54:25	0:0	8	,
decl	54:16	54:34	8	uint8_t	u
water	54:28	0:0	8	,
decl	54:16	54:34	8	uint8_t	v
water	54:31	0:0	8	,
decl	54:16	54:34	8	uint8_t	a
water	55:16	0:0	8	y
op	55:18	0:0	8	=
water	55:20	0:0	8	p_region
op	55:28	0:0	8	->
water	55:30	0:0	8	p_picture
op	55:39	0:0	8	->
water	55:41	0:0	8	p
op	55:42	0:0	8	[
water	55:43	0:0	8	0
op	55:44	0:0	8	]
op	55:45	0:0	8	.
water	55:46	0:0	8	p_pixels
op	55:54	0:0	8	[
water	55:55	0:0	8	i
op	55:56	0:0	8	]
water	55:57	0:0	8	;
water	56:16	0:0	8	u
op	56:18	0:0	8	=
water	56:20	0:0	8	p_region
op	56:28	0:0	8	->
water	56:30	0:0	8	p_picture
op	56:39	0:0	8	->
water	56:41	0:0	8	p
op	56:42	0:0	8	[
water	56:43	0:0	8	1
op	56:44	0:0	8	]
op	56:45	0:0	8	.
water	56:46	0:0	8	p_pixels
op	56:54	0:0	8	[
water	56:55	0:0	8	i
op	56:56	0:0	8	]
water	56:57	0:0	8	;
water	57:16	0:0	8	v
op	57:18	0:0	8	=
water	57:20	0:0	8	p_region
op	57:28	0:0	8	->
water	57:30	0:0	8	p_picture
op	57:39	0:0	8	->
water	57:41	0:0	8	p
op	57:42	0:0	8	[
water	57:43	0:0	8	2
op	57:44	0:0	8	]
op	57:45	0:0	8	.
water	57:46	0:0	8	p_pixels
op	57:54	0:0	8	[
water	57:55	0:0	8	i
op	57:56	0:0	8	]
water	57:57	0:0	8	;
water	58:16	0:0	8	a
op	58:18	0:0	8	=
water	58:20	0:0	8	p_region
op	58:28	0:0	8	->
water	58:30	0:0	8	p_picture
op	58:39	0:0	8	->
water	58:41	0:0	8	p
op	58:42	0:0	8	[
water	58:43	0:0	8	3
op	58:44	0:0	8	]
op	58:45	0:0	8	.
water	58:46	0:0	8	p_pixels
op	58:54	0:0	8	[
water	58:55	0:0	8	i
op	58:56	0:0	8	]
water	58:57	0:0	8	;
for	59:16	68:16	8	(j = 0 ;j < p_fmt -> p_palette -> i_entries;j ++)
forinit	59:21	59:26	9	j = 0 ;
water	59:21	0:0	10	j
op	59:23	0:0	10	=
water	59:25	0:0	10	0
water	59:26	0:0	10	;
cond	59:28	59:50	9	j < p_fmt -> p_palette -> i_entries
water	59:28	0:0	10	j
op	59:30	0:0	10	<
water	59:32	0:0	10	p_fmt
op	59:37	0:0	10	->
water	59:39	0:0	10	p_palette
op	59:48	0:0	10	->
water	59:50	0:0	10	i_entries
forexpr	59:61	59:62	9	j ++
water	59:61	0:0	10	j
op	59:62	0:0	10	++
stmts	60:16	68:16	9	
water	60:16	0:0	10	{
if	61:20	67:20	10	(abs (( int ) p_fmt -> p_palette -> palette [ j ] [ 0 ] - ( int ) y ) <= i_tolerance &&abs (( int ) p_fmt -> p_palette -> palette [ j ] [ 1 ] - ( int ) u ) <= i_tolerance &&abs (( int ) p_fmt -> p_palette -> palette [ j ] [ 2 ] - ( int ) v ) <= i_tolerance &&abs (( int ) p_fmt -> p_palette -> palette [ j ] [ 3 ] - ( int ) a ) <= i_tolerance / 2)
cond	61:24	64:92	11	abs (( int ) p_fmt -> p_palette -> palette [ j ] [ 0 ] - ( int ) y ) <= i_tolerance &&abs (( int ) p_fmt -> p_palette -> palette [ j ] [ 1 ] - ( int ) u ) <= i_tolerance &&abs (( int ) p_fmt -> p_palette -> palette [ j ] [ 2 ] - ( int ) v ) <= i_tolerance &&abs (( int ) p_fmt -> p_palette -> palette [ j ] [ 3 ] - ( int ) a ) <= i_tolerance / 2
call	61:24	61:73	12	abs
arg	61:28	61:73	13	(int)p_fmt->p_palette->palette[j][0]-(int)y
water	61:28	0:0	14	(
water	61:29	0:0	14	int
water	61:32	0:0	14	)
water	61:33	0:0	14	p_fmt
op	61:38	0:0	14	->
water	61:40	0:0	14	p_palette
op	61:49	0:0	14	->
water	61:51	0:0	14	palette
op	61:58	0:0	14	[
water	61:59	0:0	14	j
op	61:60	0:0	14	]
op	61:61	0:0	14	[
water	61:62	0:0	14	0
op	61:63	0:0	14	]
op	61:65	0:0	14	-
water	61:67	0:0	14	(
water	61:68	0:0	14	int
water	61:71	0:0	14	)
water	61:72	0:0	14	y
op	61:75	0:0	12	<=
water	61:78	0:0	12	i_tolerance
op	61:90	0:0	12	&&
call	62:24	62:73	12	abs
arg	62:28	62:73	13	(int)p_fmt->p_palette->palette[j][1]-(int)u
water	62:28	0:0	14	(
water	62:29	0:0	14	int
water	62:32	0:0	14	)
water	62:33	0:0	14	p_fmt
op	62:38	0:0	14	->
water	62:40	0:0	14	p_palette
op	62:49	0:0	14	->
water	62:51	0:0	14	palette
op	62:58	0:0	14	[
water	62:59	0:0	14	j
op	62:60	0:0	14	]
op	62:61	0:0	14	[
water	62:62	0:0	14	1
op	62:63	0:0	14	]
op	62:65	0:0	14	-
water	62:67	0:0	14	(
water	62:68	0:0	14	int
water	62:71	0:0	14	)
water	62:72	0:0	14	u
op	62:75	0:0	12	<=
water	62:78	0:0	12	i_tolerance
op	62:90	0:0	12	&&
call	63:24	63:73	12	abs
arg	63:28	63:73	13	(int)p_fmt->p_palette->palette[j][2]-(int)v
water	63:28	0:0	14	(
water	63:29	0:0	14	int
water	63:32	0:0	14	)
water	63:33	0:0	14	p_fmt
op	63:38	0:0	14	->
water	63:40	0:0	14	p_palette
op	63:49	0:0	14	->
water	63:51	0:0	14	palette
op	63:58	0:0	14	[
water	63:59	0:0	14	j
op	63:60	0:0	14	]
op	63:61	0:0	14	[
water	63:62	0:0	14	2
op	63:63	0:0	14	]
op	63:65	0:0	14	-
water	63:67	0:0	14	(
water	63:68	0:0	14	int
water	63:71	0:0	14	)
water	63:72	0:0	14	v
op	63:75	0:0	12	<=
water	63:78	0:0	12	i_tolerance
op	63:90	0:0	12	&&
call	64:24	64:73	12	abs
arg	64:28	64:73	13	(int)p_fmt->p_palette->palette[j][3]-(int)a
water	64:28	0:0	14	(
water	64:29	0:0	14	int
water	64:32	0:0	14	)
water	64:33	0:0	14	p_fmt
op	64:38	0:0	14	->
water	64:40	0:0	14	p_palette
op	64:49	0:0	14	->
water	64:51	0:0	14	palette
op	64:58	0:0	14	[
water	64:59	0:0	14	j
op	64:60	0:0	14	]
op	64:61	0:0	14	[
water	64:62	0:0	14	3
op	64:63	0:0	14	]
op	64:65	0:0	14	-
water	64:67	0:0	14	(
water	64:68	0:0	14	int
water	64:71	0:0	14	)
water	64:72	0:0	14	a
op	64:75	0:0	12	<=
water	64:78	0:0	12	i_tolerance
op	64:90	0:0	12	/
water	64:92	0:0	12	2
stmts	65:20	67:20	11	
water	65:20	0:0	12	{
break	66:24	66:29	12	
water	67:20	0:0	12	}
water	68:16	0:0	10	}
if	69:16	76:16	8	(j == p_fmt -> p_palette -> i_entries)
cond	69:20	69:43	9	j == p_fmt -> p_palette -> i_entries
water	69:20	0:0	10	j
op	69:22	0:0	10	==
water	69:25	0:0	10	p_fmt
op	69:30	0:0	10	->
water	69:32	0:0	10	p_palette
op	69:41	0:0	10	->
water	69:43	0:0	10	i_entries
stmts	70:16	76:16	9	
water	70:16	0:0	10	{
water	71:20	0:0	10	p_fmt
op	71:25	0:0	10	->
water	71:27	0:0	10	p_palette
op	71:36	0:0	10	->
water	71:38	0:0	10	palette
op	71:45	0:0	10	[
water	71:46	0:0	10	j
op	71:47	0:0	10	]
op	71:48	0:0	10	[
water	71:49	0:0	10	0
op	71:50	0:0	10	]
op	71:52	0:0	10	=
water	71:54	0:0	10	y
water	71:55	0:0	10	;
water	72:20	0:0	10	p_fmt
op	72:25	0:0	10	->
water	72:27	0:0	10	p_palette
op	72:36	0:0	10	->
water	72:38	0:0	10	palette
op	72:45	0:0	10	[
water	72:46	0:0	10	j
op	72:47	0:0	10	]
op	72:48	0:0	10	[
water	72:49	0:0	10	1
op	72:50	0:0	10	]
op	72:52	0:0	10	=
water	72:54	0:0	10	u
water	72:55	0:0	10	;
water	73:20	0:0	10	p_fmt
op	73:25	0:0	10	->
water	73:27	0:0	10	p_palette
op	73:36	0:0	10	->
water	73:38	0:0	10	palette
op	73:45	0:0	10	[
water	73:46	0:0	10	j
op	73:47	0:0	10	]
op	73:48	0:0	10	[
water	73:49	0:0	10	2
op	73:50	0:0	10	]
op	73:52	0:0	10	=
water	73:54	0:0	10	v
water	73:55	0:0	10	;
water	74:20	0:0	10	p_fmt
op	74:25	0:0	10	->
water	74:27	0:0	10	p_palette
op	74:36	0:0	10	->
water	74:38	0:0	10	palette
op	74:45	0:0	10	[
water	74:46	0:0	10	j
op	74:47	0:0	10	]
op	74:48	0:0	10	[
water	74:49	0:0	10	3
op	74:50	0:0	10	]
op	74:52	0:0	10	=
water	74:54	0:0	10	a
water	74:55	0:0	10	;
water	75:20	0:0	10	p_fmt
op	75:25	0:0	10	->
water	75:27	0:0	10	p_palette
op	75:36	0:0	10	->
water	75:38	0:0	10	i_entries
op	75:47	0:0	10	++
water	75:49	0:0	10	;
water	76:16	0:0	10	}
if	77:16	81:16	8	(p_fmt -> p_palette -> i_entries >= i_max_entries)
cond	77:20	77:51	9	p_fmt -> p_palette -> i_entries >= i_max_entries
water	77:20	0:0	10	p_fmt
op	77:25	0:0	10	->
water	77:27	0:0	10	p_palette
op	77:36	0:0	10	->
water	77:38	0:0	10	i_entries
op	77:48	0:0	10	>=
water	77:51	0:0	10	i_max_entries
stmts	78:16	81:16	9	
water	78:16	0:0	10	{
water	79:20	0:0	10	b_success
op	79:30	0:0	10	=
water	79:32	0:0	10	false
water	79:37	0:0	10	;
break	80:20	80:25	10	
water	81:16	0:0	10	}
water	82:16	0:0	8	i
op	82:18	0:0	8	+=
water	82:21	0:0	8	i_iterator
water	82:31	0:0	8	;
if	83:16	86:16	8	(i > i_pixels)
cond	83:20	83:24	9	i > i_pixels
water	83:20	0:0	10	i
op	83:22	0:0	10	>
water	83:24	0:0	10	i_pixels
stmts	84:16	86:16	9	
water	84:16	0:0	10	{
water	85:20	0:0	10	i
op	85:22	0:0	10	-=
water	85:25	0:0	10	i_pixels
water	85:33	0:0	10	;
water	86:16	0:0	10	}
water	87:12	0:0	8	}
if	88:12	91:12	6	(b_success)
cond	88:16	88:16	7	b_success
water	88:16	0:0	8	b_success
stmts	89:12	91:12	7	
water	89:12	0:0	8	{
break	90:16	90:21	8	
water	91:12	0:0	8	}
water	92:8	0:0	6	}
call	95:8	95:82	4	msg_Dbg
arg	95:17	95:22	5	p_enc
water	95:17	0:0	6	p_enc
arg	95:24	95:52	5	"best palette has %d colors"
water	95:24	0:0	6	"best palette has %d colors"
arg	95:54	95:82	5	p_fmt->p_palette->i_entries
water	95:54	0:0	6	p_fmt
op	95:59	0:0	6	->
water	95:61	0:0	6	p_palette
op	95:70	0:0	6	->
water	95:72	0:0	6	i_entries
water	95:83	0:0	4	;
water	98:8	0:0	4	pi_delta
op	98:17	0:0	4	=
call	98:19	99:47	4	xmalloc
arg	98:28	99:47	5	(p_region->p_picture->p[0].i_pitch+1)*sizeof(int)*4
water	98:28	0:0	6	(
water	98:30	0:0	6	p_region
op	98:38	0:0	6	->
water	98:40	0:0	6	p_picture
op	98:49	0:0	6	->
water	98:51	0:0	6	p
op	98:52	0:0	6	[
water	98:53	0:0	6	0
op	98:54	0:0	6	]
op	98:55	0:0	6	.
water	98:56	0:0	6	i_pitch
op	98:64	0:0	6	+
water	98:66	0:0	6	1
water	98:68	0:0	6	)
op	99:28	0:0	6	*
op	99:30	0:0	6	sizeof
water	99:36	0:0	6	(
water	99:37	0:0	6	int
water	99:40	0:0	6	)
op	99:42	0:0	6	*
water	99:44	0:0	6	4
water	99:48	0:0	4	;
for	100:8	103:8	4	(i = 0 ;i < ( p_region -> p_picture -> p [ 0 ] . i_pitch + 1 ) * 4;i ++)
forinit	100:13	100:18	5	i = 0 ;
water	100:13	0:0	6	i
op	100:15	0:0	6	=
water	100:17	0:0	6	0
water	100:18	0:0	6	;
cond	100:20	100:66	5	i < ( p_region -> p_picture -> p [ 0 ] . i_pitch + 1 ) * 4
water	100:20	0:0	6	i
op	100:22	0:0	6	<
water	100:24	0:0	6	(
water	100:25	0:0	6	p_region
op	100:33	0:0	6	->
water	100:35	0:0	6	p_picture
op	100:44	0:0	6	->
water	100:46	0:0	6	p
op	100:47	0:0	6	[
water	100:48	0:0	6	0
op	100:49	0:0	6	]
op	100:50	0:0	6	.
water	100:51	0:0	6	i_pitch
op	100:59	0:0	6	+
water	100:61	0:0	6	1
water	100:62	0:0	6	)
op	100:64	0:0	6	*
water	100:66	0:0	6	4
forexpr	100:70	100:71	5	i ++
water	100:70	0:0	6	i
op	100:71	0:0	6	++
stmts	101:8	103:8	5	
water	101:8	0:0	6	{
water	102:12	0:0	6	pi_delta
op	102:20	0:0	6	[
water	102:22	0:0	6	i
op	102:24	0:0	6	]
op	102:26	0:0	6	=
water	102:28	0:0	6	0
water	102:29	0:0	6	;
water	103:8	0:0	6	}
for	106:8	164:8	4	(p = 0 ;p < p_region -> p_picture -> p [ 0 ] . i_visible_lines;p ++)
forinit	106:13	106:18	5	p = 0 ;
water	106:13	0:0	6	p
op	106:15	0:0	6	=
water	106:17	0:0	6	0
water	106:18	0:0	6	;
cond	106:20	106:50	5	p < p_region -> p_picture -> p [ 0 ] . i_visible_lines
water	106:20	0:0	6	p
op	106:22	0:0	6	<
water	106:24	0:0	6	p_region
op	106:32	0:0	6	->
water	106:34	0:0	6	p_picture
op	106:43	0:0	6	->
water	106:45	0:0	6	p
op	106:46	0:0	6	[
water	106:47	0:0	6	0
op	106:48	0:0	6	]
op	106:49	0:0	6	.
water	106:50	0:0	6	i_visible_lines
forexpr	106:68	106:69	5	p ++
water	106:68	0:0	6	p
op	106:69	0:0	6	++
stmts	107:8	164:8	5	
water	107:8	0:0	6	{
decl	108:12	108:70	6	int	i_ydelta
op	108:25	0:0	6	=
water	108:27	0:0	6	0
water	108:28	0:0	6	,
decl	108:12	108:70	6	int	i_udelta
op	108:39	0:0	6	=
water	108:41	0:0	6	0
water	108:42	0:0	6	,
decl	108:12	108:70	6	int	i_vdelta
op	108:53	0:0	6	=
water	108:55	0:0	6	0
water	108:56	0:0	6	,
decl	108:12	108:70	6	int	i_adelta
op	108:67	0:0	6	=
water	108:69	0:0	6	0
for	109:12	163:12	6	(n = 0 ;n < p_region -> p_picture -> p [ 0 ] . i_pitch;n ++)
forinit	109:17	109:22	7	n = 0 ;
water	109:17	0:0	8	n
op	109:19	0:0	8	=
water	109:21	0:0	8	0
water	109:22	0:0	8	;
cond	109:24	109:54	7	n < p_region -> p_picture -> p [ 0 ] . i_pitch
water	109:24	0:0	8	n
op	109:26	0:0	8	<
water	109:28	0:0	8	p_region
op	109:36	0:0	8	->
water	109:38	0:0	8	p_picture
op	109:47	0:0	8	->
water	109:49	0:0	8	p
op	109:50	0:0	8	[
water	109:51	0:0	8	0
op	109:52	0:0	8	]
op	109:53	0:0	8	.
water	109:54	0:0	8	i_pitch
forexpr	109:64	109:65	7	n ++
water	109:64	0:0	8	n
op	109:65	0:0	8	++
stmts	110:12	163:12	7	
water	110:12	0:0	8	{
decl	111:16	111:72	8	int	i_offset
op	111:29	0:0	8	=
water	111:31	0:0	8	p
op	111:33	0:0	8	*
water	111:35	0:0	8	p_region
op	111:43	0:0	8	->
water	111:45	0:0	8	p_picture
op	111:54	0:0	8	->
water	111:56	0:0	8	p
op	111:57	0:0	8	[
water	111:58	0:0	8	0
op	111:59	0:0	8	]
op	111:60	0:0	8	.
water	111:61	0:0	8	i_pitch
op	111:69	0:0	8	+
water	111:71	0:0	8	n
decl	112:16	112:30	8	int	y
water	112:21	0:0	8	,
decl	112:16	112:30	8	int	u
water	112:24	0:0	8	,
decl	112:16	112:30	8	int	v
water	112:27	0:0	8	,
decl	112:16	112:30	8	int	a
decl	113:16	113:37	8	int	i_mindist
water	113:29	0:0	8	,
decl	113:16	113:37	8	int	i_best
water	114:16	0:0	8	y
op	114:18	0:0	8	=
water	114:20	0:0	8	(
water	114:21	0:0	8	int
water	114:24	0:0	8	)
water	114:25	0:0	8	p_region
op	114:33	0:0	8	->
water	114:35	0:0	8	p_picture
op	114:44	0:0	8	->
water	114:46	0:0	8	p
op	114:47	0:0	8	[
water	114:48	0:0	8	0
op	114:49	0:0	8	]
op	114:50	0:0	8	.
water	114:51	0:0	8	p_pixels
op	114:59	0:0	8	[
water	114:60	0:0	8	i_offset
op	114:68	0:0	8	]
water	114:69	0:0	8	;
water	115:16	0:0	8	u
op	115:18	0:0	8	=
water	115:20	0:0	8	(
water	115:21	0:0	8	int
water	115:24	0:0	8	)
water	115:25	0:0	8	p_region
op	115:33	0:0	8	->
water	115:35	0:0	8	p_picture
op	115:44	0:0	8	->
water	115:46	0:0	8	p
op	115:47	0:0	8	[
water	115:48	0:0	8	1
op	115:49	0:0	8	]
op	115:50	0:0	8	.
water	115:51	0:0	8	p_pixels
op	115:59	0:0	8	[
water	115:60	0:0	8	i_offset
op	115:68	0:0	8	]
water	115:69	0:0	8	;
water	116:16	0:0	8	v
op	116:18	0:0	8	=
water	116:20	0:0	8	(
water	116:21	0:0	8	int
water	116:24	0:0	8	)
water	116:25	0:0	8	p_region
op	116:33	0:0	8	->
water	116:35	0:0	8	p_picture
op	116:44	0:0	8	->
water	116:46	0:0	8	p
op	116:47	0:0	8	[
water	116:48	0:0	8	2
op	116:49	0:0	8	]
op	116:50	0:0	8	.
water	116:51	0:0	8	p_pixels
op	116:59	0:0	8	[
water	116:60	0:0	8	i_offset
op	116:68	0:0	8	]
water	116:69	0:0	8	;
water	117:16	0:0	8	a
op	117:18	0:0	8	=
water	117:20	0:0	8	(
water	117:21	0:0	8	int
water	117:24	0:0	8	)
water	117:25	0:0	8	p_region
op	117:33	0:0	8	->
water	117:35	0:0	8	p_picture
op	117:44	0:0	8	->
water	117:46	0:0	8	p
op	117:47	0:0	8	[
water	117:48	0:0	8	3
op	117:49	0:0	8	]
op	117:50	0:0	8	.
water	117:51	0:0	8	p_pixels
op	117:59	0:0	8	[
water	117:60	0:0	8	i_offset
op	117:68	0:0	8	]
water	117:69	0:0	8	;
water	120:16	0:0	8	y
op	120:18	0:0	8	+=
water	120:21	0:0	8	(
water	120:22	0:0	8	(
water	120:23	0:0	8	i_seed
op	120:30	0:0	8	&
water	120:32	0:0	8	0
water	120:33	0:0	8	xff
water	120:36	0:0	8	)
op	120:38	0:0	8	-
water	120:40	0:0	8	0
water	120:41	0:0	8	x80
water	120:44	0:0	8	)
op	120:46	0:0	8	*
water	120:48	0:0	8	i_tolerance
op	120:60	0:0	8	/
water	120:62	0:0	8	0
water	120:63	0:0	8	x80
water	120:66	0:0	8	;
water	121:16	0:0	8	u
op	121:18	0:0	8	+=
water	121:21	0:0	8	(
water	121:22	0:0	8	(
water	121:23	0:0	8	(
water	121:24	0:0	8	i_seed
op	121:31	0:0	8	>>
water	121:34	0:0	8	8
water	121:35	0:0	8	)
op	121:37	0:0	8	&
water	121:39	0:0	8	0
water	121:40	0:0	8	xff
water	121:43	0:0	8	)
op	121:45	0:0	8	-
water	121:47	0:0	8	0
water	121:48	0:0	8	x80
water	121:51	0:0	8	)
op	121:53	0:0	8	*
water	121:55	0:0	8	i_tolerance
op	121:67	0:0	8	/
water	121:69	0:0	8	0
water	121:70	0:0	8	x80
water	121:73	0:0	8	;
water	122:16	0:0	8	v
op	122:18	0:0	8	+=
water	122:21	0:0	8	(
water	122:22	0:0	8	(
water	122:23	0:0	8	(
water	122:24	0:0	8	i_seed
op	122:31	0:0	8	>>
water	122:34	0:0	8	16
water	122:36	0:0	8	)
op	122:38	0:0	8	&
water	122:40	0:0	8	0
water	122:41	0:0	8	xff
water	122:44	0:0	8	)
op	122:46	0:0	8	-
water	122:48	0:0	8	0
water	122:49	0:0	8	x80
water	122:52	0:0	8	)
op	122:54	0:0	8	*
water	122:56	0:0	8	i_tolerance
op	122:68	0:0	8	/
water	122:70	0:0	8	0
water	122:71	0:0	8	x80
water	122:74	0:0	8	;
water	123:16	0:0	8	a
op	123:18	0:0	8	+=
water	123:21	0:0	8	(
water	123:22	0:0	8	(
water	123:23	0:0	8	(
water	123:24	0:0	8	i_seed
op	123:31	0:0	8	>>
water	123:34	0:0	8	24
water	123:36	0:0	8	)
op	123:38	0:0	8	&
water	123:40	0:0	8	0
water	123:41	0:0	8	xff
water	123:44	0:0	8	)
op	123:46	0:0	8	-
water	123:48	0:0	8	0
water	123:49	0:0	8	x80
water	123:52	0:0	8	)
op	123:54	0:0	8	*
water	123:56	0:0	8	i_tolerance
op	123:68	0:0	8	/
water	123:70	0:0	8	0
water	123:71	0:0	8	x80
water	123:74	0:0	8	;
water	125:16	0:0	8	y
op	125:18	0:0	8	+=
water	125:21	0:0	8	i_ydelta
op	125:30	0:0	8	+
water	125:32	0:0	8	pi_delta
op	125:40	0:0	8	[
water	125:42	0:0	8	n
op	125:44	0:0	8	*
water	125:46	0:0	8	4
op	125:48	0:0	8	]
water	125:49	0:0	8	;
water	126:16	0:0	8	u
op	126:18	0:0	8	+=
water	126:21	0:0	8	i_udelta
op	126:30	0:0	8	+
water	126:32	0:0	8	pi_delta
op	126:40	0:0	8	[
water	126:42	0:0	8	n
op	126:44	0:0	8	*
water	126:46	0:0	8	4
op	126:48	0:0	8	+
water	126:50	0:0	8	1
op	126:52	0:0	8	]
water	126:53	0:0	8	;
water	127:16	0:0	8	v
op	127:18	0:0	8	+=
water	127:21	0:0	8	i_vdelta
op	127:30	0:0	8	+
water	127:32	0:0	8	pi_delta
op	127:40	0:0	8	[
water	127:42	0:0	8	n
op	127:44	0:0	8	*
water	127:46	0:0	8	4
op	127:48	0:0	8	+
water	127:50	0:0	8	2
op	127:52	0:0	8	]
water	127:53	0:0	8	;
water	128:16	0:0	8	a
op	128:18	0:0	8	+=
water	128:21	0:0	8	i_adelta
op	128:30	0:0	8	+
water	128:32	0:0	8	pi_delta
op	128:40	0:0	8	[
water	128:42	0:0	8	n
op	128:44	0:0	8	*
water	128:46	0:0	8	4
op	128:48	0:0	8	+
water	128:50	0:0	8	3
op	128:52	0:0	8	]
water	128:53	0:0	8	;
for	131:16	143:16	8	(i_mindist = 99999999 , i_best = 0 , j = 0 ;j < p_fmt -> p_palette -> i_entries;j ++)
forinit	131:21	131:60	9	i_mindist = 99999999 , i_best = 0 , j = 0 ;
water	131:21	0:0	10	i_mindist
op	131:31	0:0	10	=
water	131:33	0:0	10	99999999
water	131:41	0:0	10	,
water	131:43	0:0	10	i_best
op	131:50	0:0	10	=
water	131:52	0:0	10	0
water	131:53	0:0	10	,
water	131:55	0:0	10	j
op	131:57	0:0	10	=
water	131:59	0:0	10	0
water	131:60	0:0	10	;
cond	131:62	131:84	9	j < p_fmt -> p_palette -> i_entries
water	131:62	0:0	10	j
op	131:64	0:0	10	<
water	131:66	0:0	10	p_fmt
op	131:71	0:0	10	->
water	131:73	0:0	10	p_palette
op	131:82	0:0	10	->
water	131:84	0:0	10	i_entries
forexpr	131:95	131:96	9	j ++
water	131:95	0:0	10	j
op	131:96	0:0	10	++
stmts	132:16	143:16	9	
water	132:16	0:0	10	{
decl	133:20	133:34	10	int	i_dist
op	133:31	0:0	10	=
water	133:33	0:0	10	0
water	134:20	0:0	10	i_dist
op	134:27	0:0	10	+=
call	134:30	134:74	10	abs
arg	134:34	134:74	11	(int)p_fmt->p_palette->palette[j][0]-y
water	134:34	0:0	12	(
water	134:35	0:0	12	int
water	134:38	0:0	12	)
water	134:39	0:0	12	p_fmt
op	134:44	0:0	12	->
water	134:46	0:0	12	p_palette
op	134:55	0:0	12	->
water	134:57	0:0	12	palette
op	134:64	0:0	12	[
water	134:65	0:0	12	j
op	134:66	0:0	12	]
op	134:67	0:0	12	[
water	134:68	0:0	12	0
op	134:69	0:0	12	]
op	134:71	0:0	12	-
water	134:73	0:0	12	y
water	134:75	0:0	10	;
water	135:20	0:0	10	i_dist
op	135:27	0:0	10	+=
call	135:30	135:74	10	abs
arg	135:34	135:74	11	(int)p_fmt->p_palette->palette[j][1]-u
water	135:34	0:0	12	(
water	135:35	0:0	12	int
water	135:38	0:0	12	)
water	135:39	0:0	12	p_fmt
op	135:44	0:0	12	->
water	135:46	0:0	12	p_palette
op	135:55	0:0	12	->
water	135:57	0:0	12	palette
op	135:64	0:0	12	[
water	135:65	0:0	12	j
op	135:66	0:0	12	]
op	135:67	0:0	12	[
water	135:68	0:0	12	1
op	135:69	0:0	12	]
op	135:71	0:0	12	-
water	135:73	0:0	12	u
water	135:75	0:0	10	;
water	136:20	0:0	10	i_dist
op	136:27	0:0	10	+=
call	136:30	136:74	10	abs
arg	136:34	136:74	11	(int)p_fmt->p_palette->palette[j][2]-v
water	136:34	0:0	12	(
water	136:35	0:0	12	int
water	136:38	0:0	12	)
water	136:39	0:0	12	p_fmt
op	136:44	0:0	12	->
water	136:46	0:0	12	p_palette
op	136:55	0:0	12	->
water	136:57	0:0	12	palette
op	136:64	0:0	12	[
water	136:65	0:0	12	j
op	136:66	0:0	12	]
op	136:67	0:0	12	[
water	136:68	0:0	12	2
op	136:69	0:0	12	]
op	136:71	0:0	12	-
water	136:73	0:0	12	v
water	136:75	0:0	10	;
water	137:20	0:0	10	i_dist
op	137:27	0:0	10	+=
water	137:30	0:0	10	2
call	137:32	137:78	10	*abs
arg	137:38	137:78	11	(int)p_fmt->p_palette->palette[j][3]-a
water	137:38	0:0	12	(
water	137:39	0:0	12	int
water	137:42	0:0	12	)
water	137:43	0:0	12	p_fmt
op	137:48	0:0	12	->
water	137:50	0:0	12	p_palette
op	137:59	0:0	12	->
water	137:61	0:0	12	palette
op	137:68	0:0	12	[
water	137:69	0:0	12	j
op	137:70	0:0	12	]
op	137:71	0:0	12	[
water	137:72	0:0	12	3
op	137:73	0:0	12	]
op	137:75	0:0	12	-
water	137:77	0:0	12	a
water	137:79	0:0	10	;
if	138:20	142:20	10	(i_dist < i_mindist)
cond	138:24	138:33	11	i_dist < i_mindist
water	138:24	0:0	12	i_dist
op	138:31	0:0	12	<
water	138:33	0:0	12	i_mindist
stmts	139:20	142:20	11	
water	139:20	0:0	12	{
water	140:24	0:0	12	i_mindist
op	140:34	0:0	12	=
water	140:36	0:0	12	i_dist
water	140:42	0:0	12	;
water	141:24	0:0	12	i_best
op	141:31	0:0	12	=
water	141:33	0:0	12	j
water	141:34	0:0	12	;
water	142:20	0:0	12	}
water	143:16	0:0	10	}
water	145:16	0:0	8	p_region
op	145:24	0:0	8	->
water	145:26	0:0	8	p_picture
op	145:35	0:0	8	->
water	145:37	0:0	8	p
op	145:38	0:0	8	[
water	145:39	0:0	8	0
op	145:40	0:0	8	]
op	145:41	0:0	8	.
water	145:42	0:0	8	p_pixels
op	145:50	0:0	8	[
water	145:51	0:0	8	i_offset
op	145:59	0:0	8	]
op	145:61	0:0	8	=
water	145:63	0:0	8	i_best
water	145:69	0:0	8	;
water	148:16	0:0	8	i_seed
op	148:23	0:0	8	=
water	148:25	0:0	8	(
water	148:26	0:0	8	i_seed
op	148:33	0:0	8	*
water	148:35	0:0	8	0
water	148:36	0:0	8	x1283837
water	148:44	0:0	8	)
op	148:46	0:0	8	^
water	148:48	0:0	8	0
water	148:49	0:0	8	x789479
op	148:57	0:0	8	^
water	148:59	0:0	8	(
water	148:60	0:0	8	i_seed
op	148:67	0:0	8	>>
water	148:70	0:0	8	13
water	148:72	0:0	8	)
water	148:73	0:0	8	;
water	150:16	0:0	8	i_ydelta
op	150:25	0:0	8	=
water	150:27	0:0	8	y
op	150:29	0:0	8	-
water	150:31	0:0	8	(
water	150:32	0:0	8	int
water	150:35	0:0	8	)
water	150:36	0:0	8	p_fmt
op	150:41	0:0	8	->
water	150:43	0:0	8	p_palette
op	150:52	0:0	8	->
water	150:54	0:0	8	palette
op	150:61	0:0	8	[
water	150:62	0:0	8	i_best
op	150:68	0:0	8	]
op	150:69	0:0	8	[
water	150:70	0:0	8	0
op	150:71	0:0	8	]
water	150:72	0:0	8	;
water	151:16	0:0	8	i_udelta
op	151:25	0:0	8	=
water	151:27	0:0	8	u
op	151:29	0:0	8	-
water	151:31	0:0	8	(
water	151:32	0:0	8	int
water	151:35	0:0	8	)
water	151:36	0:0	8	p_fmt
op	151:41	0:0	8	->
water	151:43	0:0	8	p_palette
op	151:52	0:0	8	->
water	151:54	0:0	8	palette
op	151:61	0:0	8	[
water	151:62	0:0	8	i_best
op	151:68	0:0	8	]
op	151:69	0:0	8	[
water	151:70	0:0	8	1
op	151:71	0:0	8	]
water	151:72	0:0	8	;
water	152:16	0:0	8	i_vdelta
op	152:25	0:0	8	=
water	152:27	0:0	8	v
op	152:29	0:0	8	-
water	152:31	0:0	8	(
water	152:32	0:0	8	int
water	152:35	0:0	8	)
water	152:36	0:0	8	p_fmt
op	152:41	0:0	8	->
water	152:43	0:0	8	p_palette
op	152:52	0:0	8	->
water	152:54	0:0	8	palette
op	152:61	0:0	8	[
water	152:62	0:0	8	i_best
op	152:68	0:0	8	]
op	152:69	0:0	8	[
water	152:70	0:0	8	2
op	152:71	0:0	8	]
water	152:72	0:0	8	;
water	153:16	0:0	8	i_adelta
op	153:25	0:0	8	=
water	153:27	0:0	8	a
op	153:29	0:0	8	-
water	153:31	0:0	8	(
water	153:32	0:0	8	int
water	153:35	0:0	8	)
water	153:36	0:0	8	p_fmt
op	153:41	0:0	8	->
water	153:43	0:0	8	p_palette
op	153:52	0:0	8	->
water	153:54	0:0	8	palette
op	153:61	0:0	8	[
water	153:62	0:0	8	i_best
op	153:68	0:0	8	]
op	153:69	0:0	8	[
water	153:70	0:0	8	3
op	153:71	0:0	8	]
water	153:72	0:0	8	;
water	154:16	0:0	8	pi_delta
op	154:24	0:0	8	[
water	154:26	0:0	8	n
op	154:28	0:0	8	*
water	154:30	0:0	8	4
op	154:32	0:0	8	]
op	154:34	0:0	8	=
water	154:36	0:0	8	i_ydelta
op	154:45	0:0	8	*
water	154:47	0:0	8	3
op	154:49	0:0	8	/
water	154:51	0:0	8	8
water	154:52	0:0	8	;
water	155:16	0:0	8	pi_delta
op	155:24	0:0	8	[
water	155:26	0:0	8	n
op	155:28	0:0	8	*
water	155:30	0:0	8	4
op	155:32	0:0	8	+
water	155:34	0:0	8	1
op	155:36	0:0	8	]
op	155:38	0:0	8	=
water	155:40	0:0	8	i_udelta
op	155:49	0:0	8	*
water	155:51	0:0	8	3
op	155:53	0:0	8	/
water	155:55	0:0	8	8
water	155:56	0:0	8	;
water	156:16	0:0	8	pi_delta
op	156:24	0:0	8	[
water	156:26	0:0	8	n
op	156:28	0:0	8	*
water	156:30	0:0	8	4
op	156:32	0:0	8	+
water	156:34	0:0	8	2
op	156:36	0:0	8	]
op	156:38	0:0	8	=
water	156:40	0:0	8	i_vdelta
op	156:49	0:0	8	*
water	156:51	0:0	8	3
op	156:53	0:0	8	/
water	156:55	0:0	8	8
water	156:56	0:0	8	;
water	157:16	0:0	8	pi_delta
op	157:24	0:0	8	[
water	157:26	0:0	8	n
op	157:28	0:0	8	*
water	157:30	0:0	8	4
op	157:32	0:0	8	+
water	157:34	0:0	8	3
op	157:36	0:0	8	]
op	157:38	0:0	8	=
water	157:40	0:0	8	i_adelta
op	157:49	0:0	8	*
water	157:51	0:0	8	3
op	157:53	0:0	8	/
water	157:55	0:0	8	8
water	157:56	0:0	8	;
water	158:16	0:0	8	i_ydelta
op	158:25	0:0	8	=
water	158:27	0:0	8	i_ydelta
op	158:36	0:0	8	*
water	158:38	0:0	8	5
op	158:40	0:0	8	/
water	158:42	0:0	8	8
water	158:43	0:0	8	;
water	159:16	0:0	8	i_udelta
op	159:25	0:0	8	=
water	159:27	0:0	8	i_udelta
op	159:36	0:0	8	*
water	159:38	0:0	8	5
op	159:40	0:0	8	/
water	159:42	0:0	8	8
water	159:43	0:0	8	;
water	160:16	0:0	8	i_vdelta
op	160:25	0:0	8	=
water	160:27	0:0	8	i_vdelta
op	160:36	0:0	8	*
water	160:38	0:0	8	5
op	160:40	0:0	8	/
water	160:42	0:0	8	8
water	160:43	0:0	8	;
water	161:16	0:0	8	i_adelta
op	161:25	0:0	8	=
water	161:27	0:0	8	i_adelta
op	161:36	0:0	8	*
water	161:38	0:0	8	5
op	161:40	0:0	8	/
water	161:42	0:0	8	8
water	161:43	0:0	8	;
water	163:12	0:0	8	}
water	164:8	0:0	6	}
call	166:8	166:23	4	free
arg	166:14	166:23	5	pi_delta
water	166:14	0:0	6	pi_delta
water	166:24	0:0	4	;
for	169:8	175:8	4	(i = p_fmt -> p_palette -> i_entries ;i < i_max_entries;i ++)
forinit	169:13	169:44	5	i = p_fmt -> p_palette -> i_entries ;
water	169:13	0:0	6	i
op	169:15	0:0	6	=
water	169:17	0:0	6	p_fmt
op	169:22	0:0	6	->
water	169:24	0:0	6	p_palette
op	169:33	0:0	6	->
water	169:35	0:0	6	i_entries
water	169:44	0:0	6	;
cond	169:46	169:50	5	i < i_max_entries
water	169:46	0:0	6	i
op	169:48	0:0	6	<
water	169:50	0:0	6	i_max_entries
forexpr	169:65	169:66	5	i ++
water	169:65	0:0	6	i
op	169:66	0:0	6	++
stmts	170:8	175:8	5	
water	170:8	0:0	6	{
water	171:12	0:0	6	p_fmt
op	171:17	0:0	6	->
water	171:19	0:0	6	p_palette
op	171:28	0:0	6	->
water	171:30	0:0	6	palette
op	171:37	0:0	6	[
water	171:38	0:0	6	i
op	171:39	0:0	6	]
op	171:40	0:0	6	[
water	171:41	0:0	6	0
op	171:42	0:0	6	]
op	171:44	0:0	6	=
water	171:46	0:0	6	0
water	171:47	0:0	6	;
water	172:12	0:0	6	p_fmt
op	172:17	0:0	6	->
water	172:19	0:0	6	p_palette
op	172:28	0:0	6	->
water	172:30	0:0	6	palette
op	172:37	0:0	6	[
water	172:38	0:0	6	i
op	172:39	0:0	6	]
op	172:40	0:0	6	[
water	172:41	0:0	6	1
op	172:42	0:0	6	]
op	172:44	0:0	6	=
water	172:46	0:0	6	0
water	172:47	0:0	6	;
water	173:12	0:0	6	p_fmt
op	173:17	0:0	6	->
water	173:19	0:0	6	p_palette
op	173:28	0:0	6	->
water	173:30	0:0	6	palette
op	173:37	0:0	6	[
water	173:38	0:0	6	i
op	173:39	0:0	6	]
op	173:40	0:0	6	[
water	173:41	0:0	6	2
op	173:42	0:0	6	]
op	173:44	0:0	6	=
water	173:46	0:0	6	0
water	173:47	0:0	6	;
water	174:12	0:0	6	p_fmt
op	174:17	0:0	6	->
water	174:19	0:0	6	p_palette
op	174:28	0:0	6	->
water	174:30	0:0	6	palette
op	174:37	0:0	6	[
water	174:38	0:0	6	i
op	174:39	0:0	6	]
op	174:40	0:0	6	[
water	174:41	0:0	6	3
op	174:42	0:0	6	]
op	174:44	0:0	6	=
water	174:46	0:0	6	0
water	174:47	0:0	6	;
water	175:8	0:0	6	}
water	176:8	0:0	4	p_fmt
op	176:13	0:0	4	->
water	176:15	0:0	4	p_palette
op	176:24	0:0	4	->
water	176:26	0:0	4	i_entries
op	176:36	0:0	4	=
water	176:38	0:0	4	i_max_entries
water	176:51	0:0	4	;
call	179:8	179:82	4	msg_Dbg
arg	179:17	179:22	5	p_enc
water	179:17	0:0	6	p_enc
arg	179:24	179:52	5	"best palette has %d colors"
water	179:24	0:0	6	"best palette has %d colors"
arg	179:54	179:82	5	p_fmt->p_palette->i_entries
water	179:54	0:0	6	p_fmt
op	179:59	0:0	6	->
water	179:61	0:0	6	p_palette
op	179:70	0:0	6	->
water	179:72	0:0	6	i_entries
water	179:83	0:0	4	;
water	181:4	0:0	4	}
return	182:4	182:19	2	p_subpic
water	182:11	0:0	3	p_subpic
