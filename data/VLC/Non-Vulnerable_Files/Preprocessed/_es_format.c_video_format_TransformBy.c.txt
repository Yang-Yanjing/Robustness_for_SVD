func	2:0	44:0	0	void	video_format_TransformBy
params	2:29	0:0	1	
param	2:31	2:50	2	video_format_t *	fmt
param	2:52	2:80	2	video_transform_t	transform
stmnts	5:4	43:33	1	
water	5:4	0:0	2	unsigned
water	5:13	0:0	2	angle1
water	5:19	0:0	2	,
water	5:21	0:0	2	angle2
water	5:27	0:0	2	;
decl	6:4	6:23	2	bool	hflip1
water	6:15	0:0	2	,
decl	6:4	6:23	2	bool	hflip2
call	7:4	7:55	2	transform_GetBasicOps
arg	7:27	7:36	3	transform
water	7:27	0:0	4	transform
arg	7:38	7:45	3	&angle1
op	7:38	0:0	4	&
water	7:39	0:0	4	angle1
arg	7:47	7:55	3	&hflip1
op	7:47	0:0	4	&
water	7:48	0:0	4	hflip1
water	7:56	0:0	2	;
call	8:4	8:81	2	transform_GetBasicOps
arg	8:27	8:62	3	(video_transform_t)fmt->orientation
water	8:27	0:0	4	(
water	8:28	0:0	4	video_transform_t
water	8:45	0:0	4	)
water	8:46	0:0	4	fmt
op	8:49	0:0	4	->
water	8:51	0:0	4	orientation
arg	8:64	8:71	3	&angle2
op	8:64	0:0	4	&
water	8:65	0:0	4	angle2
arg	8:73	8:81	3	&hflip2
op	8:73	0:0	4	&
water	8:74	0:0	4	hflip2
water	8:82	0:0	2	;
water	9:4	0:0	2	unsigned
water	9:13	0:0	2	angle
op	9:19	0:0	2	=
water	9:21	0:0	2	(
water	9:22	0:0	2	angle2
op	9:29	0:0	2	-
water	9:31	0:0	2	angle1
op	9:38	0:0	2	+
water	9:40	0:0	2	360
water	9:43	0:0	2	)
op	9:45	0:0	2	%
water	9:47	0:0	2	360
water	9:50	0:0	2	;
decl	10:4	10:32	2	bool	hflip
op	10:15	0:0	2	=
water	10:17	0:0	2	hflip2
op	10:24	0:0	2	^
water	10:26	0:0	2	hflip1
decl	11:4	11:50	2	video_orientation_t	dst_orient
op	11:35	0:0	2	=
water	11:37	0:0	2	ORIENT_NORMAL
if	12:4	21:4	2	(hflip)
cond	12:8	12:8	3	hflip
water	12:8	0:0	4	hflip
stmts	12:16	21:4	3	
water	12:16	0:0	4	{
if	13:8	14:40	4	(angle == 0)
cond	13:12	13:21	5	angle == 0
water	13:12	0:0	6	angle
op	13:18	0:0	6	==
water	13:21	0:0	6	0
stmts	14:12	14:40	5	
water	14:12	0:0	6	dst_orient
op	14:23	0:0	6	=
water	14:25	0:0	6	ORIENT_HFLIPPED
water	14:40	0:0	6	;
else	15:8	16:47	4
stmts	15:13	16:47	5	
if	15:13	16:47	6	(angle == 90)
cond	15:17	15:26	7	angle == 90
water	15:17	0:0	8	angle
op	15:23	0:0	8	==
water	15:26	0:0	8	90
stmts	16:12	16:47	7	
water	16:12	0:0	8	dst_orient
op	16:23	0:0	8	=
water	16:25	0:0	8	ORIENT_ANTI_TRANSPOSED
water	16:47	0:0	8	;
else	17:8	18:40	4
stmts	17:13	18:40	5	
if	17:13	18:40	6	(angle == 180)
cond	17:17	17:26	7	angle == 180
water	17:17	0:0	8	angle
op	17:23	0:0	8	==
water	17:26	0:0	8	180
stmts	18:12	18:40	7	
water	18:12	0:0	8	dst_orient
op	18:23	0:0	8	=
water	18:25	0:0	8	ORIENT_VFLIPPED
water	18:40	0:0	8	;
else	19:8	20:42	4
stmts	19:13	20:42	5	
if	19:13	20:42	6	(angle == 270)
cond	19:17	19:26	7	angle == 270
water	19:17	0:0	8	angle
op	19:23	0:0	8	==
water	19:26	0:0	8	270
stmts	20:12	20:42	7	
water	20:12	0:0	8	dst_orient
op	20:23	0:0	8	=
water	20:25	0:0	8	ORIENT_TRANSPOSED
water	20:42	0:0	8	;
water	21:4	0:0	4	}
else	22:4	29:4	2
stmts	22:9	29:4	3	
water	22:9	0:0	4	{
if	23:8	24:42	4	(angle == 90)
cond	23:12	23:21	5	angle == 90
water	23:12	0:0	6	angle
op	23:18	0:0	6	==
water	23:21	0:0	6	90
stmts	24:12	24:42	5	
water	24:12	0:0	6	dst_orient
op	24:23	0:0	6	=
water	24:25	0:0	6	ORIENT_ROTATED_90
water	24:42	0:0	6	;
else	25:8	26:43	4
stmts	25:13	26:43	5	
if	25:13	26:43	6	(angle == 180)
cond	25:17	25:26	7	angle == 180
water	25:17	0:0	8	angle
op	25:23	0:0	8	==
water	25:26	0:0	8	180
stmts	26:12	26:43	7	
water	26:12	0:0	8	dst_orient
op	26:23	0:0	8	=
water	26:25	0:0	8	ORIENT_ROTATED_180
water	26:43	0:0	8	;
else	27:8	28:43	4
stmts	27:13	28:43	5	
if	27:13	28:43	6	(angle == 270)
cond	27:17	27:26	7	angle == 270
water	27:17	0:0	8	angle
op	27:23	0:0	8	==
water	27:26	0:0	8	270
stmts	28:12	28:43	7	
water	28:12	0:0	8	dst_orient
op	28:23	0:0	8	=
water	28:25	0:0	8	ORIENT_ROTATED_270
water	28:43	0:0	8	;
water	29:4	0:0	4	}
if	31:4	42:4	2	(ORIENT_IS_SWAP (fmt -> orientation ) !=ORIENT_IS_SWAP (dst_orient ))
cond	31:8	31:73	3	ORIENT_IS_SWAP (fmt -> orientation ) !=ORIENT_IS_SWAP (dst_orient )
call	31:8	31:41	4	ORIENT_IS_SWAP
arg	31:24	31:41	5	fmt->orientation
water	31:24	0:0	6	fmt
op	31:27	0:0	6	->
water	31:29	0:0	6	orientation
op	31:43	0:0	4	!=
call	31:46	31:73	4	ORIENT_IS_SWAP
arg	31:62	31:73	5	dst_orient
water	31:62	0:0	6	dst_orient
stmts	32:4	42:4	3	
water	32:4	0:0	4	{
decl	33:8	33:37	4	video_format_t	scratch
op	33:31	0:0	4	=
op	33:33	0:0	4	*
water	33:34	0:0	4	fmt
water	34:8	0:0	4	fmt
op	34:11	0:0	4	->
water	34:13	0:0	4	i_width
op	34:21	0:0	4	=
water	34:23	0:0	4	scratch
op	34:30	0:0	4	.
water	34:31	0:0	4	i_height
water	34:39	0:0	4	;
water	35:8	0:0	4	fmt
op	35:11	0:0	4	->
water	35:13	0:0	4	i_visible_width
op	35:29	0:0	4	=
water	35:31	0:0	4	scratch
op	35:38	0:0	4	.
water	35:39	0:0	4	i_visible_height
water	35:55	0:0	4	;
water	36:8	0:0	4	fmt
op	36:11	0:0	4	->
water	36:13	0:0	4	i_height
op	36:22	0:0	4	=
water	36:24	0:0	4	scratch
op	36:31	0:0	4	.
water	36:32	0:0	4	i_width
water	36:39	0:0	4	;
water	37:8	0:0	4	fmt
op	37:11	0:0	4	->
water	37:13	0:0	4	i_visible_height
op	37:30	0:0	4	=
water	37:32	0:0	4	scratch
op	37:39	0:0	4	.
water	37:40	0:0	4	i_visible_width
water	37:55	0:0	4	;
water	38:8	0:0	4	fmt
op	38:11	0:0	4	->
water	38:13	0:0	4	i_x_offset
op	38:24	0:0	4	=
water	38:26	0:0	4	scratch
op	38:33	0:0	4	.
water	38:34	0:0	4	i_y_offset
water	38:44	0:0	4	;
water	39:8	0:0	4	fmt
op	39:11	0:0	4	->
water	39:13	0:0	4	i_y_offset
op	39:24	0:0	4	=
water	39:26	0:0	4	scratch
op	39:33	0:0	4	.
water	39:34	0:0	4	i_x_offset
water	39:44	0:0	4	;
water	40:8	0:0	4	fmt
op	40:11	0:0	4	->
water	40:13	0:0	4	i_sar_num
op	40:23	0:0	4	=
water	40:25	0:0	4	scratch
op	40:32	0:0	4	.
water	40:33	0:0	4	i_sar_den
water	40:42	0:0	4	;
water	41:8	0:0	4	fmt
op	41:11	0:0	4	->
water	41:13	0:0	4	i_sar_den
op	41:23	0:0	4	=
water	41:25	0:0	4	scratch
op	41:32	0:0	4	.
water	41:33	0:0	4	i_sar_num
water	41:42	0:0	4	;
water	42:4	0:0	4	}
water	43:4	0:0	2	fmt
op	43:7	0:0	2	->
water	43:9	0:0	2	orientation
op	43:21	0:0	2	=
water	43:23	0:0	2	dst_orient
water	43:33	0:0	2	;
