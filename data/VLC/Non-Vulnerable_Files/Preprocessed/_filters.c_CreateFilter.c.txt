func	2:0	27:0	0	static filter_t *	CreateFilter
params	2:30	0:0	1	
param	2:31	2:48	2	vlc_object_t *	obj
param	2:50	2:66	2	const char *	type
param	3:31	3:47	2	const char *	name
param	3:49	3:74	2	filter_owner_sys_t *	owner
param	4:31	4:65	2	const audio_sample_format_t *	infmt
param	5:31	5:66	2	const audio_sample_format_t *	outfmt
stmnts	0:0	26:17	1	
decl	7:4	7:70	2	filter_t	*filter
op	7:21	0:0	2	=
call	7:23	7:69	3	vlc_custom_create
arg	7:42	7:45	4	obj
water	7:42	0:0	5	obj
arg	7:47	7:63	4	sizeof(*filter)
op	7:47	0:0	5	sizeof
water	7:54	0:0	5	(
op	7:55	0:0	5	*
water	7:56	0:0	5	filter
water	7:62	0:0	5	)
arg	7:65	7:69	4	type
water	7:65	0:0	5	type
if	8:4	9:19	2	(unlikely (filter == NULL ))
cond	8:8	8:31	3	unlikely (filter == NULL )
call	8:8	8:31	4	unlikely
arg	8:17	8:31	5	filter==NULL
water	8:17	0:0	6	filter
op	8:24	0:0	6	==
water	8:27	0:0	6	NULL
stmts	9:8	9:19	3	
return	9:8	9:19	4	NULL
water	9:15	0:0	5	NULL
water	10:4	0:0	2	filter
op	10:10	0:0	2	->
water	10:12	0:0	2	p_owner
op	10:20	0:0	2	=
water	10:22	0:0	2	owner
water	10:27	0:0	2	;
water	11:4	0:0	2	filter
op	11:10	0:0	2	->
water	11:12	0:0	2	fmt_in
op	11:18	0:0	2	.
water	11:19	0:0	2	audio
op	11:25	0:0	2	=
op	11:27	0:0	2	*
water	11:28	0:0	2	infmt
water	11:33	0:0	2	;
water	12:4	0:0	2	filter
op	12:10	0:0	2	->
water	12:12	0:0	2	fmt_in
op	12:18	0:0	2	.
water	12:19	0:0	2	i_codec
op	12:27	0:0	2	=
water	12:29	0:0	2	infmt
op	12:34	0:0	2	->
water	12:36	0:0	2	i_format
water	12:44	0:0	2	;
water	13:4	0:0	2	filter
op	13:10	0:0	2	->
water	13:12	0:0	2	fmt_out
op	13:19	0:0	2	.
water	13:20	0:0	2	audio
op	13:26	0:0	2	=
op	13:28	0:0	2	*
water	13:29	0:0	2	outfmt
water	13:35	0:0	2	;
water	14:4	0:0	2	filter
op	14:10	0:0	2	->
water	14:12	0:0	2	fmt_out
op	14:19	0:0	2	.
water	14:20	0:0	2	i_codec
op	14:28	0:0	2	=
water	14:30	0:0	2	outfmt
op	14:36	0:0	2	->
water	14:38	0:0	2	i_format
water	14:46	0:0	2	;
water	15:4	0:0	2	filter
op	15:10	0:0	2	->
water	15:12	0:0	2	p_module
op	15:21	0:0	2	=
call	15:23	15:61	2	module_need
arg	15:36	15:42	3	filter
water	15:36	0:0	4	filter
arg	15:44	15:48	3	type
water	15:44	0:0	4	type
arg	15:50	15:54	3	name
water	15:50	0:0	4	name
arg	15:56	15:61	3	false
water	15:56	0:0	4	false
water	15:62	0:0	2	;
if	16:4	23:4	2	(filter -> p_module == NULL)
cond	16:8	16:28	3	filter -> p_module == NULL
water	16:8	0:0	4	filter
op	16:14	0:0	4	->
water	16:16	0:0	4	p_module
op	16:25	0:0	4	==
water	16:28	0:0	4	NULL
stmts	17:4	23:4	3	
water	17:4	0:0	4	{
call	19:8	19:65	4	assert
arg	19:16	19:65	5	AOUT_FMTS_IDENTICAL(&filter->fmt_in.audio,infmt)
call	19:16	19:64	6	AOUT_FMTS_IDENTICAL
arg	19:36	19:57	7	&filter->fmt_in.audio
op	19:36	0:0	8	&
water	19:37	0:0	8	filter
op	19:43	0:0	8	->
water	19:45	0:0	8	fmt_in
op	19:51	0:0	8	.
water	19:52	0:0	8	audio
arg	19:59	19:64	7	infmt
water	19:59	0:0	8	infmt
water	19:66	0:0	4	;
call	20:8	20:67	4	assert
arg	20:16	20:67	5	AOUT_FMTS_IDENTICAL(&filter->fmt_out.audio,outfmt)
call	20:16	20:66	6	AOUT_FMTS_IDENTICAL
arg	20:36	20:58	7	&filter->fmt_out.audio
op	20:36	0:0	8	&
water	20:37	0:0	8	filter
op	20:43	0:0	8	->
water	20:45	0:0	8	fmt_out
op	20:52	0:0	8	.
water	20:53	0:0	8	audio
arg	20:60	20:66	7	outfmt
water	20:60	0:0	8	outfmt
water	20:68	0:0	4	;
call	21:8	21:34	4	vlc_object_release
arg	21:28	21:34	5	filter
water	21:28	0:0	6	filter
water	21:35	0:0	4	;
water	22:8	0:0	4	filter
op	22:15	0:0	4	=
water	22:17	0:0	4	NULL
water	22:21	0:0	4	;
water	23:4	0:0	4	}
else	24:4	25:48	2
stmts	25:8	25:48	3	
call	25:8	25:47	4	assert
arg	25:16	25:47	5	filter->pf_audio_filter!=NULL
water	25:16	0:0	6	filter
op	25:22	0:0	6	->
water	25:24	0:0	6	pf_audio_filter
op	25:40	0:0	6	!=
water	25:43	0:0	6	NULL
water	25:48	0:0	4	;
return	26:4	26:17	2	filter
water	26:11	0:0	3	filter
