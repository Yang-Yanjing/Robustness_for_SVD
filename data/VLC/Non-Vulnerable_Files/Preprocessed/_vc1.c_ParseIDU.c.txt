func	2:0	320:0	0	static block_t *	ParseIDU
params	2:24	0:0	1	
param	2:26	2:42	2	decoder_t *	p_dec
param	2:44	2:60	2	bool *	pb_ts_used
param	2:62	2:78	2	block_t *	p_frag
stmnts	0:0	319:16	1	
decl	4:4	4:39	2	decoder_sys_t	*p_sys
op	4:25	0:0	2	=
water	4:27	0:0	2	p_dec
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:18	2	block_t	*p_pic
decl	6:4	6:46	2	const idu_type_t	idu
op	6:25	0:0	2	=
water	6:27	0:0	2	p_frag
op	6:33	0:0	2	->
water	6:35	0:0	2	p_buffer
op	6:43	0:0	2	[
water	6:44	0:0	2	3
op	6:45	0:0	2	]
op	7:4	0:0	2	*
water	7:5	0:0	2	pb_ts_used
op	7:16	0:0	2	=
water	7:18	0:0	2	false
water	7:23	0:0	2	;
if	8:4	13:4	2	(! p_sys -> b_sequence_header && idu != IDU_TYPE_SEQUENCE_HEADER)
cond	8:8	8:44	3	! p_sys -> b_sequence_header && idu != IDU_TYPE_SEQUENCE_HEADER
op	8:8	0:0	4	!
water	8:9	0:0	4	p_sys
op	8:14	0:0	4	->
water	8:16	0:0	4	b_sequence_header
op	8:34	0:0	4	&&
water	8:37	0:0	4	idu
op	8:41	0:0	4	!=
water	8:44	0:0	4	IDU_TYPE_SEQUENCE_HEADER
stmts	9:4	13:4	3	
water	9:4	0:0	4	{
call	10:8	10:55	4	msg_Warn
arg	10:18	10:23	5	p_dec
water	10:18	0:0	6	p_dec
arg	10:25	10:55	5	"waiting for sequence header"
water	10:25	0:0	6	"waiting for sequence header"
water	10:56	0:0	4	;
call	11:8	11:30	4	block_Release
arg	11:23	11:30	5	p_frag
water	11:23	0:0	6	p_frag
water	11:31	0:0	4	;
return	12:8	12:19	4	NULL
water	12:15	0:0	5	NULL
water	13:4	0:0	4	}
if	14:4	19:4	2	(p_sys -> b_sequence_header && ! p_sys -> b_entry_point && idu != IDU_TYPE_ENTRY_POINT)
cond	14:8	14:68	3	p_sys -> b_sequence_header && ! p_sys -> b_entry_point && idu != IDU_TYPE_ENTRY_POINT
water	14:8	0:0	4	p_sys
op	14:13	0:0	4	->
water	14:15	0:0	4	b_sequence_header
op	14:33	0:0	4	&&
op	14:36	0:0	4	!
water	14:37	0:0	4	p_sys
op	14:42	0:0	4	->
water	14:44	0:0	4	b_entry_point
op	14:58	0:0	4	&&
water	14:61	0:0	4	idu
op	14:65	0:0	4	!=
water	14:68	0:0	4	IDU_TYPE_ENTRY_POINT
stmts	15:4	19:4	3	
water	15:4	0:0	4	{
call	16:8	16:51	4	msg_Warn
arg	16:18	16:23	5	p_dec
water	16:18	0:0	6	p_dec
arg	16:25	16:51	5	"waiting for entry point"
water	16:25	0:0	6	"waiting for entry point"
water	16:52	0:0	4	;
call	17:8	17:30	4	block_Release
arg	17:23	17:30	5	p_frag
water	17:23	0:0	6	p_frag
water	17:31	0:0	4	;
return	18:8	18:19	4	NULL
water	18:15	0:0	5	NULL
water	19:4	0:0	4	}
water	23:4	0:0	2	p_pic
op	23:10	0:0	2	=
water	23:12	0:0	2	NULL
water	23:16	0:0	2	;
if	24:4	71:4	2	(p_sys -> b_frame && idu != IDU_TYPE_FRAME_USER_DATA && idu != IDU_TYPE_FIELD && idu != IDU_TYPE_FIELD_USER_DATA && idu != IDU_TYPE_SLICE && idu != IDU_TYPE_SLICE_USER_DATA && idu != IDU_TYPE_END_OF_SEQUENCE)
cond	24:8	28:15	3	p_sys -> b_frame && idu != IDU_TYPE_FRAME_USER_DATA && idu != IDU_TYPE_FIELD && idu != IDU_TYPE_FIELD_USER_DATA && idu != IDU_TYPE_SLICE && idu != IDU_TYPE_SLICE_USER_DATA && idu != IDU_TYPE_END_OF_SEQUENCE
water	24:8	0:0	4	p_sys
op	24:13	0:0	4	->
water	24:15	0:0	4	b_frame
op	24:23	0:0	4	&&
water	25:8	0:0	4	idu
op	25:12	0:0	4	!=
water	25:15	0:0	4	IDU_TYPE_FRAME_USER_DATA
op	25:40	0:0	4	&&
water	26:8	0:0	4	idu
op	26:12	0:0	4	!=
water	26:15	0:0	4	IDU_TYPE_FIELD
op	26:30	0:0	4	&&
water	26:33	0:0	4	idu
op	26:37	0:0	4	!=
water	26:40	0:0	4	IDU_TYPE_FIELD_USER_DATA
op	26:65	0:0	4	&&
water	27:8	0:0	4	idu
op	27:12	0:0	4	!=
water	27:15	0:0	4	IDU_TYPE_SLICE
op	27:30	0:0	4	&&
water	27:33	0:0	4	idu
op	27:37	0:0	4	!=
water	27:40	0:0	4	IDU_TYPE_SLICE_USER_DATA
op	27:65	0:0	4	&&
water	28:8	0:0	4	idu
op	28:12	0:0	4	!=
water	28:15	0:0	4	IDU_TYPE_END_OF_SEQUENCE
stmts	29:4	71:4	3	
water	29:4	0:0	4	{
if	31:8	38:8	4	(p_sys -> p_frame -> i_flags & BLOCK_FLAG_TYPE_I)
cond	31:12	31:38	5	p_sys -> p_frame -> i_flags & BLOCK_FLAG_TYPE_I
water	31:12	0:0	6	p_sys
op	31:17	0:0	6	->
water	31:19	0:0	6	p_frame
op	31:26	0:0	6	->
water	31:28	0:0	6	i_flags
op	31:36	0:0	6	&
water	31:38	0:0	6	BLOCK_FLAG_TYPE_I
stmts	32:8	38:8	5	
water	32:8	0:0	6	{
decl	33:12	33:63	6	block_t	*p_list
op	33:28	0:0	6	=
call	33:30	33:62	7	block_Duplicate
arg	33:47	33:62	8	p_sys->sh.p_sh
water	33:47	0:0	9	p_sys
op	33:52	0:0	9	->
water	33:54	0:0	9	sh
op	33:56	0:0	9	.
water	33:57	0:0	9	p_sh
call	34:12	34:74	6	block_ChainAppend
arg	34:31	34:38	7	&p_list
op	34:31	0:0	8	&
water	34:32	0:0	8	p_list
arg	34:40	34:74	7	block_Duplicate(p_sys->ep.p_ep)
call	34:40	34:72	8	block_Duplicate
arg	34:57	34:72	9	p_sys->ep.p_ep
water	34:57	0:0	10	p_sys
op	34:62	0:0	10	->
water	34:64	0:0	10	ep
op	34:66	0:0	10	.
water	34:67	0:0	10	p_ep
water	34:75	0:0	6	;
call	35:12	35:55	6	block_ChainAppend
arg	35:31	35:38	7	&p_list
op	35:31	0:0	8	&
water	35:32	0:0	8	p_list
arg	35:40	35:55	7	p_sys->p_frame
water	35:40	0:0	8	p_sys
op	35:45	0:0	8	->
water	35:47	0:0	8	p_frame
water	35:56	0:0	6	;
water	36:12	0:0	6	p_list
op	36:18	0:0	6	->
water	36:20	0:0	6	i_flags
op	36:28	0:0	6	=
water	36:30	0:0	6	p_sys
op	36:35	0:0	6	->
water	36:37	0:0	6	p_frame
op	36:44	0:0	6	->
water	36:46	0:0	6	i_flags
water	36:53	0:0	6	;
water	37:12	0:0	6	p_sys
op	37:17	0:0	6	->
water	37:19	0:0	6	p_frame
op	37:27	0:0	6	=
water	37:29	0:0	6	p_list
water	37:35	0:0	6	;
water	38:8	0:0	6	}
water	40:8	0:0	4	p_pic
op	40:14	0:0	4	=
call	40:16	40:50	4	block_ChainGather
arg	40:35	40:50	5	p_sys->p_frame
water	40:35	0:0	6	p_sys
op	40:40	0:0	6	->
water	40:42	0:0	6	p_frame
water	40:51	0:0	4	;
water	41:8	0:0	4	p_pic
op	41:13	0:0	4	->
water	41:15	0:0	4	i_dts
op	41:21	0:0	4	=
water	41:23	0:0	4	p_sys
op	41:28	0:0	4	->
water	41:30	0:0	4	i_frame_dts
water	41:41	0:0	4	;
water	42:8	0:0	4	p_pic
op	42:13	0:0	4	->
water	42:15	0:0	4	i_pts
op	42:21	0:0	4	=
water	42:23	0:0	4	p_sys
op	42:28	0:0	4	->
water	42:30	0:0	4	i_frame_pts
water	42:41	0:0	4	;
if	44:8	45:52	4	(p_pic -> i_dts > VLC_TS_INVALID)
cond	44:12	44:27	5	p_pic -> i_dts > VLC_TS_INVALID
water	44:12	0:0	6	p_pic
op	44:17	0:0	6	->
water	44:19	0:0	6	i_dts
op	44:25	0:0	6	>
water	44:27	0:0	6	VLC_TS_INVALID
stmts	45:12	45:52	5	
water	45:12	0:0	6	p_sys
op	45:17	0:0	6	->
water	45:19	0:0	6	i_interpolated_dts
op	45:38	0:0	6	=
water	45:40	0:0	6	p_pic
op	45:45	0:0	6	->
water	45:47	0:0	6	i_dts
water	45:52	0:0	6	;
if	47:8	63:8	4	(p_dec -> fmt_out . video . i_frame_rate != 0 && p_dec -> fmt_out . video . i_frame_rate_base != 0)
cond	47:12	47:96	5	p_dec -> fmt_out . video . i_frame_rate != 0 && p_dec -> fmt_out . video . i_frame_rate_base != 0
water	47:12	0:0	6	p_dec
op	47:17	0:0	6	->
water	47:19	0:0	6	fmt_out
op	47:26	0:0	6	.
water	47:27	0:0	6	video
op	47:32	0:0	6	.
water	47:33	0:0	6	i_frame_rate
op	47:46	0:0	6	!=
water	47:49	0:0	6	0
op	47:51	0:0	6	&&
water	47:54	0:0	6	p_dec
op	47:59	0:0	6	->
water	47:61	0:0	6	fmt_out
op	47:68	0:0	6	.
water	47:69	0:0	6	video
op	47:74	0:0	6	.
water	47:75	0:0	6	i_frame_rate_base
op	47:93	0:0	6	!=
water	47:96	0:0	6	0
stmts	48:8	63:8	5	
water	48:8	0:0	6	{
if	49:12	52:78	6	(p_sys -> i_interpolated_dts > VLC_TS_INVALID)
cond	49:16	49:44	7	p_sys -> i_interpolated_dts > VLC_TS_INVALID
water	49:16	0:0	8	p_sys
op	49:21	0:0	8	->
water	49:23	0:0	8	i_interpolated_dts
op	49:42	0:0	8	>
water	49:44	0:0	8	VLC_TS_INVALID
stmts	50:16	52:78	7	
water	50:16	0:0	8	p_sys
op	50:21	0:0	8	->
water	50:23	0:0	8	i_interpolated_dts
op	50:42	0:0	8	+=
call	50:45	50:60	8	INT64_C
arg	50:53	50:60	9	1000000
water	50:53	0:0	10	1000000
op	50:62	0:0	8	*
water	51:45	0:0	8	p_dec
op	51:50	0:0	8	->
water	51:52	0:0	8	fmt_out
op	51:59	0:0	8	.
water	51:60	0:0	8	video
op	51:65	0:0	8	.
water	51:66	0:0	8	i_frame_rate_base
op	51:84	0:0	8	/
water	52:45	0:0	8	p_dec
op	52:50	0:0	8	->
water	52:52	0:0	8	fmt_out
op	52:59	0:0	8	.
water	52:60	0:0	8	video
op	52:65	0:0	8	.
water	52:66	0:0	8	i_frame_rate
water	52:78	0:0	8	;
if	55:12	56:56	6	(p_pic -> i_dts <= VLC_TS_INVALID)
cond	55:16	55:32	7	p_pic -> i_dts <= VLC_TS_INVALID
water	55:16	0:0	8	p_pic
op	55:21	0:0	8	->
water	55:23	0:0	8	i_dts
op	55:29	0:0	8	<=
water	55:32	0:0	8	VLC_TS_INVALID
stmts	56:16	56:56	7	
water	56:16	0:0	8	p_pic
op	56:21	0:0	8	->
water	56:23	0:0	8	i_dts
op	56:29	0:0	8	=
water	56:31	0:0	8	p_sys
op	56:36	0:0	8	->
water	56:38	0:0	8	i_interpolated_dts
water	56:56	0:0	8	;
if	57:12	62:12	6	(p_pic -> i_pts <= VLC_TS_INVALID)
cond	57:16	57:32	7	p_pic -> i_pts <= VLC_TS_INVALID
water	57:16	0:0	8	p_pic
op	57:21	0:0	8	->
water	57:23	0:0	8	i_pts
op	57:29	0:0	8	<=
water	57:32	0:0	8	VLC_TS_INVALID
stmts	58:12	62:12	7	
water	58:12	0:0	8	{
if	59:16	60:47	8	(! p_sys -> sh . b_has_bframe || ( p_pic -> i_flags & BLOCK_FLAG_TYPE_B ))
cond	59:20	59:83	9	! p_sys -> sh . b_has_bframe || ( p_pic -> i_flags & BLOCK_FLAG_TYPE_B )
op	59:20	0:0	10	!
water	59:21	0:0	10	p_sys
op	59:26	0:0	10	->
water	59:28	0:0	10	sh
op	59:30	0:0	10	.
water	59:31	0:0	10	b_has_bframe
op	59:44	0:0	10	||
water	59:47	0:0	10	(
water	59:48	0:0	10	p_pic
op	59:53	0:0	10	->
water	59:55	0:0	10	i_flags
op	59:63	0:0	10	&
water	59:65	0:0	10	BLOCK_FLAG_TYPE_B
water	59:83	0:0	10	)
stmts	60:20	60:47	9	
water	60:20	0:0	10	p_pic
op	60:25	0:0	10	->
water	60:27	0:0	10	i_pts
op	60:33	0:0	10	=
water	60:35	0:0	10	p_pic
op	60:40	0:0	10	->
water	60:42	0:0	10	i_dts
water	60:47	0:0	10	;
water	62:12	0:0	8	}
water	63:8	0:0	6	}
water	66:8	0:0	4	p_sys
op	66:13	0:0	4	->
water	66:15	0:0	4	b_frame
op	66:23	0:0	4	=
water	66:25	0:0	4	false
water	66:30	0:0	4	;
water	67:8	0:0	4	p_sys
op	67:13	0:0	4	->
water	67:15	0:0	4	i_frame_dts
op	67:27	0:0	4	=
water	67:29	0:0	4	VLC_TS_INVALID
water	67:43	0:0	4	;
water	68:8	0:0	4	p_sys
op	68:13	0:0	4	->
water	68:15	0:0	4	i_frame_pts
op	68:27	0:0	4	=
water	68:29	0:0	4	VLC_TS_INVALID
water	68:43	0:0	4	;
water	69:8	0:0	4	p_sys
op	69:13	0:0	4	->
water	69:15	0:0	4	p_frame
op	69:23	0:0	4	=
water	69:25	0:0	4	NULL
water	69:29	0:0	4	;
water	70:8	0:0	4	p_sys
op	70:13	0:0	4	->
water	70:15	0:0	4	pp_last
op	70:23	0:0	4	=
op	70:25	0:0	4	&
water	70:26	0:0	4	p_sys
op	70:31	0:0	4	->
water	70:33	0:0	4	p_frame
water	70:40	0:0	4	;
water	71:4	0:0	4	}
if	73:4	78:4	2	(p_sys -> i_frame_dts <= VLC_TS_INVALID && p_sys -> i_frame_pts <= VLC_TS_INVALID)
cond	73:8	73:70	3	p_sys -> i_frame_dts <= VLC_TS_INVALID && p_sys -> i_frame_pts <= VLC_TS_INVALID
water	73:8	0:0	4	p_sys
op	73:13	0:0	4	->
water	73:15	0:0	4	i_frame_dts
op	73:27	0:0	4	<=
water	73:30	0:0	4	VLC_TS_INVALID
op	73:45	0:0	4	&&
water	73:48	0:0	4	p_sys
op	73:53	0:0	4	->
water	73:55	0:0	4	i_frame_pts
op	73:67	0:0	4	<=
water	73:70	0:0	4	VLC_TS_INVALID
stmts	74:4	78:4	3	
water	74:4	0:0	4	{
water	75:8	0:0	4	p_sys
op	75:13	0:0	4	->
water	75:15	0:0	4	i_frame_dts
op	75:27	0:0	4	=
water	75:29	0:0	4	p_frag
op	75:35	0:0	4	->
water	75:37	0:0	4	i_dts
water	75:42	0:0	4	;
water	76:8	0:0	4	p_sys
op	76:13	0:0	4	->
water	76:15	0:0	4	i_frame_pts
op	76:27	0:0	4	=
water	76:29	0:0	4	p_frag
op	76:35	0:0	4	->
water	76:37	0:0	4	i_pts
water	76:42	0:0	4	;
op	77:8	0:0	4	*
water	77:9	0:0	4	pb_ts_used
op	77:20	0:0	4	=
water	77:22	0:0	4	true
water	77:26	0:0	4	;
water	78:4	0:0	4	}
decl	80:4	80:29	2	block_t	*p_release
op	80:23	0:0	2	=
water	80:25	0:0	2	NULL
if	81:4	82:56	2	(idu != IDU_TYPE_SEQUENCE_HEADER && idu != IDU_TYPE_ENTRY_POINT)
cond	81:8	81:50	3	idu != IDU_TYPE_SEQUENCE_HEADER && idu != IDU_TYPE_ENTRY_POINT
water	81:8	0:0	4	idu
op	81:12	0:0	4	!=
water	81:15	0:0	4	IDU_TYPE_SEQUENCE_HEADER
op	81:40	0:0	4	&&
water	81:43	0:0	4	idu
op	81:47	0:0	4	!=
water	81:50	0:0	4	IDU_TYPE_ENTRY_POINT
stmts	82:8	82:56	3	
call	82:8	82:55	4	block_ChainLastAppend
arg	82:31	82:46	5	&p_sys->pp_last
op	82:31	0:0	6	&
water	82:32	0:0	6	p_sys
op	82:37	0:0	6	->
water	82:39	0:0	6	pp_last
arg	82:48	82:55	5	p_frag
water	82:48	0:0	6	p_frag
water	82:56	0:0	4	;
else	83:4	84:26	2
stmts	84:8	84:26	3	
water	84:8	0:0	4	p_release
op	84:18	0:0	4	=
water	84:20	0:0	4	p_frag
water	84:26	0:0	4	;
if	86:4	231:4	2	(idu == IDU_TYPE_SEQUENCE_HEADER)
cond	86:8	86:15	3	idu == IDU_TYPE_SEQUENCE_HEADER
water	86:8	0:0	4	idu
op	86:12	0:0	4	==
water	86:15	0:0	4	IDU_TYPE_SEQUENCE_HEADER
stmts	87:4	231:4	3	
water	87:4	0:0	4	{
decl	88:8	88:43	4	es_format_t	*p_es
op	88:26	0:0	4	=
op	88:28	0:0	4	&
water	88:29	0:0	4	p_dec
op	88:34	0:0	4	->
water	88:36	0:0	4	fmt_out
decl	89:8	89:14	4	bs_t	s
decl	90:8	90:21	4	int	i_profile
decl	91:8	91:24	4	uint8_t	ridu[32]
decl	92:8	92:37	4	int	i_ridu
op	92:23	0:0	4	=
op	92:25	0:0	4	sizeof
water	92:31	0:0	4	(
water	92:32	0:0	4	ridu
water	92:36	0:0	4	)
if	94:8	95:43	4	(p_sys -> sh . p_sh)
cond	94:12	94:22	5	p_sys -> sh . p_sh
water	94:12	0:0	6	p_sys
op	94:17	0:0	6	->
water	94:19	0:0	6	sh
op	94:21	0:0	6	.
water	94:22	0:0	6	p_sh
stmts	95:12	95:43	5	
call	95:12	95:42	6	block_Release
arg	95:27	95:42	7	p_sys->sh.p_sh
water	95:27	0:0	8	p_sys
op	95:32	0:0	8	->
water	95:34	0:0	8	sh
op	95:36	0:0	8	.
water	95:37	0:0	8	p_sh
water	95:43	0:0	6	;
water	96:8	0:0	4	p_sys
op	96:13	0:0	4	->
water	96:15	0:0	4	sh
op	96:17	0:0	4	.
water	96:18	0:0	4	p_sh
op	96:23	0:0	4	=
call	96:25	96:49	4	block_Duplicate
arg	96:42	96:49	5	p_frag
water	96:42	0:0	6	p_frag
water	96:50	0:0	4	;
call	98:8	98:78	4	DecodeRIDU
arg	98:20	98:24	5	ridu
water	98:20	0:0	6	ridu
arg	98:26	98:33	5	&i_ridu
op	98:26	0:0	6	&
water	98:27	0:0	6	i_ridu
arg	98:35	98:55	5	&p_frag->p_buffer[4]
op	98:35	0:0	6	&
water	98:36	0:0	6	p_frag
op	98:42	0:0	6	->
water	98:44	0:0	6	p_buffer
op	98:52	0:0	6	[
water	98:53	0:0	6	4
op	98:54	0:0	6	]
arg	98:57	98:78	5	p_frag->i_buffer-4
water	98:57	0:0	6	p_frag
op	98:63	0:0	6	->
water	98:65	0:0	6	i_buffer
op	98:74	0:0	6	-
water	98:76	0:0	6	4
water	98:79	0:0	4	;
if	101:8	121:8	4	(i_ridu > 4 && ( ridu [ 0 ] & 0 x80 ) == 0)
cond	101:12	101:44	5	i_ridu > 4 && ( ridu [ 0 ] & 0 x80 ) == 0
water	101:12	0:0	6	i_ridu
op	101:19	0:0	6	>
water	101:21	0:0	6	4
op	101:23	0:0	6	&&
water	101:26	0:0	6	(
water	101:27	0:0	6	ridu
op	101:31	0:0	6	[
water	101:32	0:0	6	0
op	101:33	0:0	6	]
op	101:34	0:0	6	&
water	101:35	0:0	6	0
water	101:36	0:0	6	x80
water	101:39	0:0	6	)
op	101:41	0:0	6	==
water	101:44	0:0	6	0
stmts	102:8	121:8	5	
water	102:8	0:0	6	{
decl	103:12	103:54	6	video_format_t	*p_v
op	103:32	0:0	6	=
op	103:34	0:0	6	&
water	103:35	0:0	6	p_dec
op	103:40	0:0	6	->
water	103:42	0:0	6	fmt_in
op	103:48	0:0	6	.
water	103:49	0:0	6	video
decl	104:12	104:64	6	const size_t	i_potential_width
op	104:44	0:0	6	=
call	104:46	104:63	7	GetWBE
arg	104:54	104:63	8	&ridu[0]
op	104:54	0:0	9	&
water	104:55	0:0	9	ridu
op	104:59	0:0	9	[
water	104:60	0:0	9	0
op	104:61	0:0	9	]
decl	105:12	105:64	6	const size_t	i_potential_height
op	105:44	0:0	6	=
call	105:46	105:63	7	GetWBE
arg	105:54	105:63	8	&ridu[2]
op	105:54	0:0	9	&
water	105:55	0:0	9	ridu
op	105:59	0:0	9	[
water	105:60	0:0	9	2
op	105:61	0:0	9	]
if	106:12	120:12	6	(i_potential_width >= 2 && i_potential_width <= 8192 && i_potential_height >= 2 && i_potential_height <= 8192)
cond	106:16	107:65	7	i_potential_width >= 2 && i_potential_width <= 8192 && i_potential_height >= 2 && i_potential_height <= 8192
water	106:16	0:0	8	i_potential_width
op	106:34	0:0	8	>=
water	106:37	0:0	8	2
op	106:40	0:0	8	&&
water	106:43	0:0	8	i_potential_width
op	106:61	0:0	8	<=
water	106:64	0:0	8	8192
op	106:69	0:0	8	&&
water	107:16	0:0	8	i_potential_height
op	107:35	0:0	8	>=
water	107:38	0:0	8	2
op	107:40	0:0	8	&&
water	107:43	0:0	8	i_potential_height
op	107:62	0:0	8	<=
water	107:65	0:0	8	8192
stmts	108:12	120:12	7	
water	108:12	0:0	8	{
if	109:16	119:16	8	(( p_v -> i_width <= 0 && p_v -> i_height <= 0 ) || ( p_v -> i_width == i_potential_width && p_v -> i_height == i_potential_height ))
cond	109:20	110:97	9	( p_v -> i_width <= 0 && p_v -> i_height <= 0 ) || ( p_v -> i_width == i_potential_width && p_v -> i_height == i_potential_height )
water	109:20	0:0	10	(
water	109:22	0:0	10	p_v
op	109:25	0:0	10	->
water	109:27	0:0	10	i_width
op	109:35	0:0	10	<=
water	109:38	0:0	10	0
op	109:40	0:0	10	&&
water	109:43	0:0	10	p_v
op	109:46	0:0	10	->
water	109:48	0:0	10	i_height
op	109:57	0:0	10	<=
water	109:60	0:0	10	0
water	109:63	0:0	10	)
op	109:65	0:0	10	||
water	110:20	0:0	10	(
water	110:22	0:0	10	p_v
op	110:25	0:0	10	->
water	110:27	0:0	10	i_width
op	110:36	0:0	10	==
water	110:39	0:0	10	i_potential_width
op	110:57	0:0	10	&&
water	110:61	0:0	10	p_v
op	110:64	0:0	10	->
water	110:66	0:0	10	i_height
op	110:75	0:0	10	==
water	110:78	0:0	10	i_potential_height
water	110:97	0:0	10	)
stmts	111:16	119:16	9	
water	111:16	0:0	10	{
water	112:20	0:0	10	static
water	112:27	0:0	10	const
water	112:33	0:0	10	uint8_t
water	112:41	0:0	10	startcode
op	112:50	0:0	10	[
water	112:51	0:0	10	4
op	112:52	0:0	10	]
op	112:54	0:0	10	=
water	112:56	0:0	10	{
water	112:58	0:0	10	0
water	112:59	0:0	10	x00
water	112:62	0:0	10	,
water	112:64	0:0	10	0
water	112:65	0:0	10	x00
water	112:68	0:0	10	,
water	112:70	0:0	10	0
water	112:71	0:0	10	x01
water	112:74	0:0	10	,
water	112:76	0:0	10	IDU_TYPE_SEQUENCE_HEADER
water	112:101	0:0	10	}
water	112:102	0:0	10	;
water	113:20	0:0	10	p_es
op	113:24	0:0	10	->
water	113:26	0:0	10	video
op	113:31	0:0	10	.
water	113:32	0:0	10	i_width
op	113:41	0:0	10	=
water	113:43	0:0	10	i_potential_width
water	113:60	0:0	10	;
water	114:20	0:0	10	p_es
op	114:24	0:0	10	->
water	114:26	0:0	10	video
op	114:31	0:0	10	.
water	114:32	0:0	10	i_height
op	114:41	0:0	10	=
water	114:43	0:0	10	i_potential_height
water	114:61	0:0	10	;
water	116:20	0:0	10	p_frag
op	116:26	0:0	10	->
water	116:28	0:0	10	p_buffer
op	116:37	0:0	10	+=
water	116:40	0:0	10	4
water	116:41	0:0	10	;
water	117:20	0:0	10	p_frag
op	117:26	0:0	10	->
water	117:28	0:0	10	i_buffer
op	117:37	0:0	10	-=
water	117:40	0:0	10	4
water	117:41	0:0	10	;
call	118:20	118:75	10	memcpy
arg	118:28	118:44	11	p_frag->p_buffer
water	118:28	0:0	12	p_frag
op	118:34	0:0	12	->
water	118:36	0:0	12	p_buffer
arg	118:46	118:55	11	startcode
water	118:46	0:0	12	startcode
arg	118:57	118:75	11	sizeof(startcode)
op	118:57	0:0	12	sizeof
water	118:63	0:0	12	(
water	118:64	0:0	12	startcode
water	118:73	0:0	12	)
water	118:76	0:0	10	;
water	119:16	0:0	10	}
water	120:12	0:0	8	}
water	121:8	0:0	6	}
call	123:8	123:34	4	bs_init
arg	123:17	123:19	5	&s
op	123:17	0:0	6	&
water	123:18	0:0	6	s
arg	123:21	123:25	5	ridu
water	123:21	0:0	6	ridu
arg	123:27	123:34	5	i_ridu
water	123:27	0:0	6	i_ridu
water	123:35	0:0	4	;
water	124:8	0:0	4	i_profile
op	124:18	0:0	4	=
call	124:20	124:35	4	bs_read
arg	124:29	124:31	5	&s
op	124:29	0:0	6	&
water	124:30	0:0	6	s
arg	124:33	124:35	5	2
water	124:33	0:0	6	2
water	124:36	0:0	4	;
if	125:8	210:8	4	(i_profile == 3)
cond	125:12	125:25	5	i_profile == 3
water	125:12	0:0	6	i_profile
op	125:22	0:0	6	==
water	125:25	0:0	6	3
stmts	126:8	210:8	5	
water	126:8	0:0	6	{
decl	127:12	127:48	6	const int	i_level
op	127:30	0:0	6	=
call	127:32	127:47	7	bs_read
arg	127:41	127:43	8	&s
op	127:41	0:0	9	&
water	127:42	0:0	9	s
arg	127:45	127:47	8	3
water	127:45	0:0	9	3
water	129:12	0:0	6	p_sys
op	129:17	0:0	6	->
water	129:19	0:0	6	sh
op	129:21	0:0	6	.
water	129:22	0:0	6	b_advanced_profile
op	129:41	0:0	6	=
water	129:43	0:0	6	true
water	129:47	0:0	6	;
water	130:12	0:0	6	p_sys
op	130:17	0:0	6	->
water	130:19	0:0	6	sh
op	130:21	0:0	6	.
water	130:22	0:0	6	b_range_reduction
op	130:40	0:0	6	=
water	130:42	0:0	6	false
water	130:47	0:0	6	;
water	131:12	0:0	6	p_sys
op	131:17	0:0	6	->
water	131:19	0:0	6	sh
op	131:21	0:0	6	.
water	131:22	0:0	6	b_has_bframe
op	131:35	0:0	6	=
water	131:37	0:0	6	true
water	131:41	0:0	6	;
call	132:12	132:33	6	bs_skip
arg	132:21	132:23	7	&s
op	132:21	0:0	8	&
water	132:22	0:0	8	s
arg	132:25	132:33	7	2+3+5+1
water	132:25	0:0	8	2
op	132:26	0:0	8	+
water	132:27	0:0	8	3
op	132:28	0:0	8	+
water	132:29	0:0	8	5
op	132:30	0:0	8	+
water	132:31	0:0	8	1
water	132:34	0:0	6	;
water	133:12	0:0	6	p_es
op	133:16	0:0	6	->
water	133:18	0:0	6	video
op	133:23	0:0	6	.
water	133:24	0:0	6	i_width
op	133:33	0:0	6	=
water	133:35	0:0	6	2
call	133:36	133:53	6	*bs_read
arg	133:46	133:48	7	&s
op	133:46	0:0	8	&
water	133:47	0:0	8	s
arg	133:50	133:53	7	12
water	133:50	0:0	8	12
op	133:54	0:0	6	+
water	133:55	0:0	6	2
water	133:56	0:0	6	;
water	134:12	0:0	6	p_es
op	134:16	0:0	6	->
water	134:18	0:0	6	video
op	134:23	0:0	6	.
water	134:24	0:0	6	i_height
op	134:33	0:0	6	=
water	134:35	0:0	6	2
call	134:36	134:53	6	*bs_read
arg	134:46	134:48	7	&s
op	134:46	0:0	8	&
water	134:47	0:0	8	s
arg	134:50	134:53	7	12
water	134:50	0:0	8	12
op	134:54	0:0	6	+
water	134:55	0:0	6	2
water	134:56	0:0	6	;
if	135:12	137:76	6	(! p_sys -> b_sequence_header)
cond	135:16	135:24	7	! p_sys -> b_sequence_header
op	135:16	0:0	8	!
water	135:17	0:0	8	p_sys
op	135:22	0:0	8	->
water	135:24	0:0	8	b_sequence_header
stmts	136:16	137:76	7	
call	136:16	137:75	8	msg_Dbg
arg	136:25	136:30	9	p_dec
water	136:25	0:0	10	p_dec
arg	136:32	136:103	9	"found sequence header for advanced profile level L%d resolution %dx%d"
water	136:32	0:0	10	"found sequence header for advanced profile level L%d resolution %dx%d"
arg	137:25	137:32	9	i_level
water	137:25	0:0	10	i_level
arg	137:34	137:53	9	p_es->video.i_width
water	137:34	0:0	10	p_es
op	137:38	0:0	10	->
water	137:40	0:0	10	video
op	137:45	0:0	10	.
water	137:46	0:0	10	i_width
arg	137:55	137:75	9	p_es->video.i_height
water	137:55	0:0	10	p_es
op	137:59	0:0	10	->
water	137:61	0:0	10	video
op	137:66	0:0	10	.
water	137:67	0:0	10	i_height
water	137:76	0:0	8	;
call	138:12	138:27	6	bs_skip
arg	138:21	138:23	7	&s
op	138:21	0:0	8	&
water	138:22	0:0	8	s
arg	138:25	138:27	7	1
water	138:25	0:0	8	1
water	138:28	0:0	6	;
water	139:12	0:0	6	p_sys
op	139:17	0:0	6	->
water	139:19	0:0	6	sh
op	139:21	0:0	6	.
water	139:22	0:0	6	b_interlaced
op	139:35	0:0	6	=
call	139:37	139:52	6	bs_read
arg	139:46	139:48	7	&s
op	139:46	0:0	8	&
water	139:47	0:0	8	s
arg	139:50	139:52	7	1
water	139:50	0:0	8	1
water	139:53	0:0	6	;
call	140:12	140:27	6	bs_skip
arg	140:21	140:23	7	&s
op	140:21	0:0	8	&
water	140:22	0:0	8	s
arg	140:25	140:27	7	1
water	140:25	0:0	8	1
water	140:28	0:0	6	;
water	141:12	0:0	6	p_sys
op	141:17	0:0	6	->
water	141:19	0:0	6	sh
op	141:21	0:0	6	.
water	141:22	0:0	6	b_frame_interpolation
op	141:44	0:0	6	=
call	141:46	141:61	6	bs_read
arg	141:55	141:57	7	&s
op	141:55	0:0	8	&
water	141:56	0:0	8	s
arg	141:59	141:61	7	1
water	141:59	0:0	8	1
water	141:62	0:0	6	;
call	142:12	142:27	6	bs_skip
arg	142:21	142:23	7	&s
op	142:21	0:0	8	&
water	142:22	0:0	8	s
arg	142:25	142:27	7	1
water	142:25	0:0	8	1
water	142:28	0:0	6	;
call	143:12	143:27	6	bs_skip
arg	143:21	143:23	7	&s
op	143:21	0:0	8	&
water	143:22	0:0	8	s
arg	143:25	143:27	7	1
water	143:25	0:0	8	1
water	143:28	0:0	6	;
if	144:12	175:12	6	(bs_read (& s ,1 ))
cond	144:16	144:31	7	bs_read (& s ,1 )
call	144:16	144:31	8	bs_read
arg	144:25	144:27	9	&s
op	144:25	0:0	10	&
water	144:26	0:0	10	s
arg	144:29	144:31	9	1
water	144:29	0:0	10	1
stmts	145:12	175:12	7	
water	145:12	0:0	8	{
decl	146:16	146:64	8	const int	i_display_width
op	146:43	0:0	8	=
call	146:45	146:61	9	bs_read
arg	146:54	146:56	10	&s
op	146:54	0:0	11	&
water	146:55	0:0	11	s
arg	146:58	146:61	10	14
water	146:58	0:0	11	14
op	146:62	0:0	8	+
water	146:63	0:0	8	1
decl	147:16	147:64	8	const int	i_display_height
op	147:43	0:0	8	=
call	147:45	147:61	9	bs_read
arg	147:54	147:56	10	&s
op	147:54	0:0	11	&
water	147:55	0:0	11	s
arg	147:58	147:61	10	14
water	147:58	0:0	11	14
op	147:62	0:0	8	+
water	147:63	0:0	8	1
water	148:16	0:0	8	p_es
op	148:20	0:0	8	->
water	148:22	0:0	8	video
op	148:27	0:0	8	.
water	148:28	0:0	8	i_sar_num
op	148:38	0:0	8	=
water	148:40	0:0	8	i_display_width
op	148:57	0:0	8	*
water	148:59	0:0	8	p_es
op	148:63	0:0	8	->
water	148:65	0:0	8	video
op	148:70	0:0	8	.
water	148:71	0:0	8	i_height
water	148:79	0:0	8	;
water	149:16	0:0	8	p_es
op	149:20	0:0	8	->
water	149:22	0:0	8	video
op	149:27	0:0	8	.
water	149:28	0:0	8	i_sar_den
op	149:38	0:0	8	=
water	149:40	0:0	8	i_display_height
op	149:57	0:0	8	*
water	149:59	0:0	8	p_es
op	149:63	0:0	8	->
water	149:65	0:0	8	video
op	149:70	0:0	8	.
water	149:71	0:0	8	i_width
water	149:78	0:0	8	;
if	150:16	151:93	8	(! p_sys -> b_sequence_header)
cond	150:20	150:28	9	! p_sys -> b_sequence_header
op	150:20	0:0	10	!
water	150:21	0:0	10	p_sys
op	150:26	0:0	10	->
water	150:28	0:0	10	b_sequence_header
stmts	151:20	151:93	9	
call	151:20	151:92	10	msg_Dbg
arg	151:29	151:34	11	p_dec
water	151:29	0:0	12	p_dec
arg	151:36	151:56	11	"display size %dx%d"
water	151:36	0:0	12	"display size %dx%d"
arg	151:58	151:73	11	i_display_width
water	151:58	0:0	12	i_display_width
arg	151:75	151:92	11	i_display_height
water	151:75	0:0	12	i_display_height
water	151:93	0:0	10	;
if	152:16	174:16	8	(bs_read (& s ,1 ))
cond	152:20	152:35	9	bs_read (& s ,1 )
call	152:20	152:35	10	bs_read
arg	152:29	152:31	11	&s
op	152:29	0:0	12	&
water	152:30	0:0	12	s
arg	152:33	152:35	11	1
water	152:33	0:0	12	1
stmts	153:16	174:16	9	
water	153:16	0:0	10	{
water	154:20	0:0	10	static
water	154:27	0:0	10	const
water	154:33	0:0	10	int
water	154:37	0:0	10	p_ar
op	154:41	0:0	10	[
water	154:42	0:0	10	16
op	154:44	0:0	10	]
op	154:45	0:0	10	[
water	154:46	0:0	10	2
op	154:47	0:0	10	]
op	154:49	0:0	10	=
water	154:51	0:0	10	{
water	155:24	0:0	10	{
water	155:26	0:0	10	0
water	155:27	0:0	10	,
water	155:29	0:0	10	0
water	155:30	0:0	10	}
water	155:31	0:0	10	,
water	155:33	0:0	10	{
water	155:35	0:0	10	1
water	155:36	0:0	10	,
water	155:38	0:0	10	1
water	155:39	0:0	10	}
water	155:40	0:0	10	,
water	155:42	0:0	10	{
water	155:43	0:0	10	12
water	155:45	0:0	10	,
water	155:46	0:0	10	11
water	155:48	0:0	10	}
water	155:49	0:0	10	,
water	155:51	0:0	10	{
water	155:52	0:0	10	10
water	155:54	0:0	10	,
water	155:55	0:0	10	11
water	155:57	0:0	10	}
water	155:58	0:0	10	,
water	155:60	0:0	10	{
water	155:61	0:0	10	16
water	155:63	0:0	10	,
water	155:64	0:0	10	11
water	155:66	0:0	10	}
water	155:67	0:0	10	,
water	155:69	0:0	10	{
water	155:70	0:0	10	40
water	155:72	0:0	10	,
water	155:73	0:0	10	33
water	155:75	0:0	10	}
water	155:76	0:0	10	,
water	156:24	0:0	10	{
water	156:25	0:0	10	24
water	156:27	0:0	10	,
water	156:28	0:0	10	11
water	156:30	0:0	10	}
water	156:31	0:0	10	,
water	156:33	0:0	10	{
water	156:34	0:0	10	20
water	156:36	0:0	10	,
water	156:37	0:0	10	11
water	156:39	0:0	10	}
water	156:40	0:0	10	,
water	156:42	0:0	10	{
water	156:43	0:0	10	32
water	156:45	0:0	10	,
water	156:46	0:0	10	11
water	156:48	0:0	10	}
water	156:49	0:0	10	,
water	156:51	0:0	10	{
water	156:52	0:0	10	80
water	156:54	0:0	10	,
water	156:55	0:0	10	33
water	156:57	0:0	10	}
water	156:58	0:0	10	,
water	156:60	0:0	10	{
water	156:61	0:0	10	18
water	156:63	0:0	10	,
water	156:64	0:0	10	11
water	156:66	0:0	10	}
water	156:67	0:0	10	,
water	156:69	0:0	10	{
water	156:70	0:0	10	15
water	156:72	0:0	10	,
water	156:73	0:0	10	11
water	156:75	0:0	10	}
water	156:76	0:0	10	,
water	157:24	0:0	10	{
water	157:25	0:0	10	64
water	157:27	0:0	10	,
water	157:28	0:0	10	33
water	157:30	0:0	10	}
water	157:31	0:0	10	,
water	157:33	0:0	10	{
water	157:34	0:0	10	160
water	157:37	0:0	10	,
water	157:38	0:0	10	99
water	157:40	0:0	10	}
water	157:41	0:0	10	,
water	157:42	0:0	10	{
water	157:44	0:0	10	0
water	157:45	0:0	10	,
water	157:47	0:0	10	0
water	157:48	0:0	10	}
water	157:49	0:0	10	,
water	157:51	0:0	10	{
water	157:53	0:0	10	0
water	157:54	0:0	10	,
water	157:56	0:0	10	0
water	157:57	0:0	10	}
water	158:20	0:0	10	}
water	158:21	0:0	10	;
decl	159:20	159:47	10	int	i_ar
op	159:29	0:0	10	=
call	159:31	159:46	11	bs_read
arg	159:40	159:42	12	&s
op	159:40	0:0	13	&
water	159:41	0:0	13	s
arg	159:44	159:46	12	4
water	159:44	0:0	13	4
water	160:20	0:0	10	unsigned
water	160:29	0:0	10	i_ar_w
water	160:35	0:0	10	,
water	160:37	0:0	10	i_ar_h
water	160:43	0:0	10	;
if	161:20	165:20	10	(i_ar == 15)
cond	161:24	161:32	11	i_ar == 15
water	161:24	0:0	12	i_ar
op	161:29	0:0	12	==
water	161:32	0:0	12	15
stmts	162:20	165:20	11	
water	162:20	0:0	12	{
water	163:24	0:0	12	i_ar_w
op	163:31	0:0	12	=
call	163:33	163:48	12	bs_read
arg	163:42	163:44	13	&s
op	163:42	0:0	14	&
water	163:43	0:0	14	s
arg	163:46	163:48	13	8
water	163:46	0:0	14	8
water	163:49	0:0	12	;
water	164:24	0:0	12	i_ar_h
op	164:31	0:0	12	=
call	164:33	164:48	12	bs_read
arg	164:42	164:44	13	&s
op	164:42	0:0	14	&
water	164:43	0:0	14	s
arg	164:46	164:48	13	8
water	164:46	0:0	14	8
water	164:49	0:0	12	;
water	165:20	0:0	12	}
else	166:20	170:20	10
stmts	167:20	170:20	11	
water	167:20	0:0	12	{
water	168:24	0:0	12	i_ar_w
op	168:31	0:0	12	=
water	168:33	0:0	12	p_ar
op	168:37	0:0	12	[
water	168:38	0:0	12	i_ar
op	168:42	0:0	12	]
op	168:43	0:0	12	[
water	168:44	0:0	12	0
op	168:45	0:0	12	]
water	168:46	0:0	12	;
water	169:24	0:0	12	i_ar_h
op	169:31	0:0	12	=
water	169:33	0:0	12	p_ar
op	169:37	0:0	12	[
water	169:38	0:0	12	i_ar
op	169:42	0:0	12	]
op	169:43	0:0	12	[
water	169:44	0:0	12	1
op	169:45	0:0	12	]
water	169:46	0:0	12	;
water	170:20	0:0	12	}
call	171:20	171:69	10	vlc_ureduce
arg	171:33	171:40	11	&i_ar_w
op	171:33	0:0	12	&
water	171:34	0:0	12	i_ar_w
arg	171:42	171:49	11	&i_ar_h
op	171:42	0:0	12	&
water	171:43	0:0	12	i_ar_h
arg	171:51	171:57	11	i_ar_w
water	171:51	0:0	12	i_ar_w
arg	171:59	171:65	11	i_ar_h
water	171:59	0:0	12	i_ar_h
arg	171:67	171:69	11	0
water	171:67	0:0	12	0
water	171:70	0:0	10	;
if	172:20	173:78	10	(! p_sys -> b_sequence_header)
cond	172:24	172:32	11	! p_sys -> b_sequence_header
op	172:24	0:0	12	!
water	172:25	0:0	12	p_sys
op	172:30	0:0	12	->
water	172:32	0:0	12	b_sequence_header
stmts	173:24	173:78	11	
call	173:24	173:77	12	msg_Dbg
arg	173:33	173:38	13	p_dec
water	173:33	0:0	14	p_dec
arg	173:40	173:60	13	"aspect ratio %d:%d"
water	173:40	0:0	14	"aspect ratio %d:%d"
arg	173:62	173:68	13	i_ar_w
water	173:62	0:0	14	i_ar_w
arg	173:70	173:77	13	i_ar_h
water	173:70	0:0	14	i_ar_h
water	173:78	0:0	12	;
water	174:16	0:0	10	}
water	175:12	0:0	8	}
if	176:12	209:12	6	(bs_read (& s ,1 ))
cond	176:16	176:31	7	bs_read (& s ,1 )
call	176:16	176:31	8	bs_read
arg	176:25	176:27	9	&s
op	176:25	0:0	10	&
water	176:26	0:0	10	s
arg	176:29	176:31	9	1
water	176:29	0:0	10	1
stmts	177:12	209:12	7	
water	177:12	0:0	8	{
decl	178:16	178:33	8	int	i_fps_num
op	178:30	0:0	8	=
water	178:32	0:0	8	0
decl	179:16	179:33	8	int	i_fps_den
op	179:30	0:0	8	=
water	179:32	0:0	8	0
if	180:16	184:16	8	(bs_read (& s ,1 ))
cond	180:20	180:35	9	bs_read (& s ,1 )
call	180:20	180:35	10	bs_read
arg	180:29	180:31	11	&s
op	180:29	0:0	12	&
water	180:30	0:0	12	s
arg	180:33	180:35	11	1
water	180:33	0:0	12	1
stmts	181:16	184:16	9	
water	181:16	0:0	10	{
water	182:20	0:0	10	i_fps_num
op	182:30	0:0	10	=
call	182:32	182:48	10	bs_read
arg	182:41	182:43	11	&s
op	182:41	0:0	12	&
water	182:42	0:0	12	s
arg	182:45	182:48	11	16
water	182:45	0:0	12	16
op	182:49	0:0	10	+
water	182:50	0:0	10	1
water	182:51	0:0	10	;
water	183:20	0:0	10	i_fps_den
op	183:30	0:0	10	=
water	183:32	0:0	10	32
water	183:34	0:0	10	;
water	184:16	0:0	10	}
else	185:16	204:16	8
stmts	186:16	204:16	9	
water	186:16	0:0	10	{
decl	187:20	187:53	10	const int	i_nr
op	187:35	0:0	10	=
call	187:37	187:52	11	bs_read
arg	187:46	187:48	12	&s
op	187:46	0:0	13	&
water	187:47	0:0	13	s
arg	187:50	187:52	12	8
water	187:50	0:0	13	8
decl	188:20	188:53	10	const int	i_dn
op	188:35	0:0	10	=
call	188:37	188:52	11	bs_read
arg	188:46	188:48	12	&s
op	188:46	0:0	13	&
water	188:47	0:0	13	s
arg	188:50	188:52	12	4
water	188:50	0:0	13	4
switch	189:20	198:20	10	(i_nr)
cond	189:28	189:28	11	i_nr
water	189:28	0:0	12	i_nr
stmts	190:20	198:20	11	
water	190:20	0:0	12	{
label	191:20	191:26	12	case 1 :
water	191:28	0:0	12	i_fps_num
op	191:38	0:0	12	=
water	191:40	0:0	12	24000
water	191:45	0:0	12	;
break	191:47	191:52	12	
label	192:20	192:26	12	case 2 :
water	192:28	0:0	12	i_fps_num
op	192:38	0:0	12	=
water	192:40	0:0	12	25000
water	192:45	0:0	12	;
break	192:47	192:52	12	
label	193:20	193:26	12	case 3 :
water	193:28	0:0	12	i_fps_num
op	193:38	0:0	12	=
water	193:40	0:0	12	30000
water	193:45	0:0	12	;
break	193:47	193:52	12	
label	194:20	194:26	12	case 4 :
water	194:28	0:0	12	i_fps_num
op	194:38	0:0	12	=
water	194:40	0:0	12	50000
water	194:45	0:0	12	;
break	194:47	194:52	12	
label	195:20	195:26	12	case 5 :
water	195:28	0:0	12	i_fps_num
op	195:38	0:0	12	=
water	195:40	0:0	12	60000
water	195:45	0:0	12	;
break	195:47	195:52	12	
label	196:20	196:26	12	case 6 :
water	196:28	0:0	12	i_fps_num
op	196:38	0:0	12	=
water	196:40	0:0	12	48000
water	196:45	0:0	12	;
break	196:47	196:52	12	
label	197:20	197:26	12	case 7 :
water	197:28	0:0	12	i_fps_num
op	197:38	0:0	12	=
water	197:40	0:0	12	72000
water	197:45	0:0	12	;
break	197:47	197:52	12	
water	198:20	0:0	12	}
switch	199:20	203:20	10	(i_dn)
cond	199:28	199:28	11	i_dn
water	199:28	0:0	12	i_dn
stmts	200:20	203:20	11	
water	200:20	0:0	12	{
label	201:20	201:26	12	case 1 :
water	201:28	0:0	12	i_fps_den
op	201:38	0:0	12	=
water	201:40	0:0	12	1000
water	201:44	0:0	12	;
break	201:46	201:51	12	
label	202:20	202:26	12	case 2 :
water	202:28	0:0	12	i_fps_den
op	202:38	0:0	12	=
water	202:40	0:0	12	1001
water	202:44	0:0	12	;
break	202:46	202:51	12	
water	203:20	0:0	12	}
water	204:16	0:0	10	}
if	205:16	206:117	8	(i_fps_num != 0 && i_fps_den != 0)
cond	205:20	205:51	9	i_fps_num != 0 && i_fps_den != 0
water	205:20	0:0	10	i_fps_num
op	205:30	0:0	10	!=
water	205:33	0:0	10	0
op	205:35	0:0	10	&&
water	205:38	0:0	10	i_fps_den
op	205:48	0:0	10	!=
water	205:51	0:0	10	0
stmts	206:20	206:117	9	
call	206:20	206:116	10	vlc_ureduce
arg	206:33	206:58	11	&p_es->video.i_frame_rate
op	206:33	0:0	12	&
water	206:34	0:0	12	p_es
op	206:38	0:0	12	->
water	206:40	0:0	12	video
op	206:45	0:0	12	.
water	206:46	0:0	12	i_frame_rate
arg	206:60	206:90	11	&p_es->video.i_frame_rate_base
op	206:60	0:0	12	&
water	206:61	0:0	12	p_es
op	206:65	0:0	12	->
water	206:67	0:0	12	video
op	206:72	0:0	12	.
water	206:73	0:0	12	i_frame_rate_base
arg	206:92	206:101	11	i_fps_num
water	206:92	0:0	12	i_fps_num
arg	206:103	206:112	11	i_fps_den
water	206:103	0:0	12	i_fps_den
arg	206:114	206:116	11	0
water	206:114	0:0	12	0
water	206:117	0:0	10	;
if	207:16	208:113	8	(! p_sys -> b_sequence_header)
cond	207:20	207:28	9	! p_sys -> b_sequence_header
op	207:20	0:0	10	!
water	207:21	0:0	10	p_sys
op	207:26	0:0	10	->
water	207:28	0:0	10	b_sequence_header
stmts	208:20	208:113	9	
call	208:20	208:112	10	msg_Dbg
arg	208:29	208:34	11	p_dec
water	208:29	0:0	12	p_dec
arg	208:36	208:54	11	"frame rate %d/%d"
water	208:36	0:0	12	"frame rate %d/%d"
arg	208:56	208:80	11	p_es->video.i_frame_rate
water	208:56	0:0	12	p_es
op	208:60	0:0	12	->
water	208:62	0:0	12	video
op	208:67	0:0	12	.
water	208:68	0:0	12	i_frame_rate
arg	208:82	208:112	11	p_es->video.i_frame_rate_base
water	208:82	0:0	12	p_es
op	208:86	0:0	12	->
water	208:88	0:0	12	video
op	208:93	0:0	12	.
water	208:94	0:0	12	i_frame_rate_base
water	208:113	0:0	10	;
water	209:12	0:0	8	}
water	210:8	0:0	6	}
else	211:8	228:8	4
stmts	212:8	228:8	5	
water	212:8	0:0	6	{
water	214:12	0:0	6	p_sys
op	214:17	0:0	6	->
water	214:19	0:0	6	sh
op	214:21	0:0	6	.
water	214:22	0:0	6	b_advanced_profile
op	214:41	0:0	6	=
water	214:43	0:0	6	false
water	214:48	0:0	6	;
water	215:12	0:0	6	p_sys
op	215:17	0:0	6	->
water	215:19	0:0	6	sh
op	215:21	0:0	6	.
water	215:22	0:0	6	b_interlaced
op	215:35	0:0	6	=
water	215:37	0:0	6	false
water	215:42	0:0	6	;
if	216:12	217:108	6	(! p_sys -> b_sequence_header)
cond	216:16	216:24	7	! p_sys -> b_sequence_header
op	216:16	0:0	8	!
water	216:17	0:0	8	p_sys
op	216:22	0:0	8	->
water	216:24	0:0	8	b_sequence_header
stmts	217:16	217:108	7	
call	217:16	217:107	8	msg_Dbg
arg	217:25	217:30	9	p_dec
water	217:25	0:0	10	p_dec
arg	217:32	217:70	9	"found sequence header for %s profile"
water	217:32	0:0	10	"found sequence header for %s profile"
arg	217:72	217:107	9	i_profile==0?"simple":"main"
water	217:72	0:0	10	i_profile
op	217:82	0:0	10	==
water	217:85	0:0	10	0
water	217:87	0:0	10	?
water	217:89	0:0	10	"simple"
water	217:98	0:0	10	:
water	217:100	0:0	10	"main"
water	217:108	0:0	8	;
call	218:12	220:33	6	bs_skip
arg	218:21	218:23	7	&s
op	218:21	0:0	8	&
water	218:22	0:0	8	s
arg	218:25	220:33	7	2+3+5+1+1+1+1+1+1+2+1+1+1+1
water	218:25	0:0	8	2
op	218:26	0:0	8	+
water	218:27	0:0	8	3
op	218:28	0:0	8	+
water	218:29	0:0	8	5
op	218:30	0:0	8	+
water	218:31	0:0	8	1
op	218:32	0:0	8	+
water	218:33	0:0	8	1
op	218:34	0:0	8	+
water	219:25	0:0	8	1
op	219:26	0:0	8	+
water	219:27	0:0	8	1
op	219:28	0:0	8	+
water	219:29	0:0	8	1
op	219:30	0:0	8	+
water	219:31	0:0	8	1
op	219:32	0:0	8	+
water	219:33	0:0	8	2
op	219:34	0:0	8	+
water	220:25	0:0	8	1
op	220:26	0:0	8	+
water	220:27	0:0	8	1
op	220:28	0:0	8	+
water	220:29	0:0	8	1
op	220:30	0:0	8	+
water	220:31	0:0	8	1
water	220:34	0:0	6	;
water	221:12	0:0	6	p_sys
op	221:17	0:0	6	->
water	221:19	0:0	6	sh
op	221:21	0:0	6	.
water	221:22	0:0	6	b_range_reduction
op	221:40	0:0	6	=
call	221:42	221:57	6	bs_read
arg	221:51	221:53	7	&s
op	221:51	0:0	8	&
water	221:52	0:0	8	s
arg	221:55	221:57	7	1
water	221:55	0:0	8	1
water	221:58	0:0	6	;
if	222:12	223:45	6	(bs_read (& s ,3 ) > 0)
cond	222:16	222:35	7	bs_read (& s ,3 ) > 0
call	222:16	222:31	8	bs_read
arg	222:25	222:27	9	&s
op	222:25	0:0	10	&
water	222:26	0:0	10	s
arg	222:29	222:31	9	3
water	222:29	0:0	10	3
op	222:33	0:0	8	>
water	222:35	0:0	8	0
stmts	223:16	223:45	7	
water	223:16	0:0	8	p_sys
op	223:21	0:0	8	->
water	223:23	0:0	8	sh
op	223:25	0:0	8	.
water	223:26	0:0	8	b_has_bframe
op	223:39	0:0	8	=
water	223:41	0:0	8	true
water	223:45	0:0	8	;
else	224:12	225:46	6
stmts	225:16	225:46	7	
water	225:16	0:0	8	p_sys
op	225:21	0:0	8	->
water	225:23	0:0	8	sh
op	225:25	0:0	8	.
water	225:26	0:0	8	b_has_bframe
op	225:39	0:0	8	=
water	225:41	0:0	8	false
water	225:46	0:0	8	;
call	226:12	226:27	6	bs_skip
arg	226:21	226:23	7	&s
op	226:21	0:0	8	&
water	226:22	0:0	8	s
arg	226:25	226:27	7	2
water	226:25	0:0	8	2
water	226:28	0:0	6	;
water	227:12	0:0	6	p_sys
op	227:17	0:0	6	->
water	227:19	0:0	6	sh
op	227:21	0:0	6	.
water	227:22	0:0	6	b_frame_interpolation
op	227:44	0:0	6	=
call	227:46	227:61	6	bs_read
arg	227:55	227:57	7	&s
op	227:55	0:0	8	&
water	227:56	0:0	8	s
arg	227:59	227:61	7	1
water	227:59	0:0	8	1
water	227:62	0:0	6	;
water	228:8	0:0	6	}
water	229:8	0:0	4	p_sys
op	229:13	0:0	4	->
water	229:15	0:0	4	b_sequence_header
op	229:33	0:0	4	=
water	229:35	0:0	4	true
water	229:39	0:0	4	;
call	230:8	230:30	4	BuildExtraData
arg	230:24	230:30	5	p_dec
water	230:24	0:0	6	p_dec
water	230:31	0:0	4	;
water	231:4	0:0	4	}
else	232:4	241:4	2
stmts	232:9	241:4	3	
if	232:9	241:4	4	(idu == IDU_TYPE_ENTRY_POINT)
cond	232:13	232:20	5	idu == IDU_TYPE_ENTRY_POINT
water	232:13	0:0	6	idu
op	232:17	0:0	6	==
water	232:20	0:0	6	IDU_TYPE_ENTRY_POINT
stmts	233:4	241:4	5	
water	233:4	0:0	6	{
if	234:8	235:43	6	(p_sys -> ep . p_ep)
cond	234:12	234:22	7	p_sys -> ep . p_ep
water	234:12	0:0	8	p_sys
op	234:17	0:0	8	->
water	234:19	0:0	8	ep
op	234:21	0:0	8	.
water	234:22	0:0	8	p_ep
stmts	235:12	235:43	7	
call	235:12	235:42	8	block_Release
arg	235:27	235:42	9	p_sys->ep.p_ep
water	235:27	0:0	10	p_sys
op	235:32	0:0	10	->
water	235:34	0:0	10	ep
op	235:36	0:0	10	.
water	235:37	0:0	10	p_ep
water	235:43	0:0	8	;
water	236:8	0:0	6	p_sys
op	236:13	0:0	6	->
water	236:15	0:0	6	ep
op	236:17	0:0	6	.
water	236:18	0:0	6	p_ep
op	236:23	0:0	6	=
call	236:25	236:49	6	block_Duplicate
arg	236:42	236:49	7	p_frag
water	236:42	0:0	8	p_frag
water	236:50	0:0	6	;
if	237:8	238:49	6	(! p_sys -> b_entry_point)
cond	237:12	237:20	7	! p_sys -> b_entry_point
op	237:12	0:0	8	!
water	237:13	0:0	8	p_sys
op	237:18	0:0	8	->
water	237:20	0:0	8	b_entry_point
stmts	238:12	238:49	7	
call	238:12	238:48	8	msg_Dbg
arg	238:21	238:26	9	p_dec
water	238:21	0:0	10	p_dec
arg	238:28	238:48	9	"found entry point"
water	238:28	0:0	10	"found entry point"
water	238:49	0:0	8	;
water	239:8	0:0	6	p_sys
op	239:13	0:0	6	->
water	239:15	0:0	6	b_entry_point
op	239:29	0:0	6	=
water	239:31	0:0	6	true
water	239:35	0:0	6	;
call	240:8	240:30	6	BuildExtraData
arg	240:24	240:30	7	p_dec
water	240:24	0:0	8	p_dec
water	240:31	0:0	6	;
water	241:4	0:0	6	}
else	242:4	316:4	2
stmts	242:9	316:4	3	
if	242:9	316:4	4	(idu == IDU_TYPE_FRAME)
cond	242:13	242:20	5	idu == IDU_TYPE_FRAME
water	242:13	0:0	6	idu
op	242:17	0:0	6	==
water	242:20	0:0	6	IDU_TYPE_FRAME
stmts	243:4	316:4	5	
water	243:4	0:0	6	{
decl	244:8	244:14	6	bs_t	s
decl	245:8	245:23	6	uint8_t	ridu[8]
decl	246:8	246:37	6	int	i_ridu
op	246:23	0:0	6	=
op	246:25	0:0	6	sizeof
water	246:31	0:0	6	(
water	246:32	0:0	6	ridu
water	246:36	0:0	6	)
call	248:8	248:78	6	DecodeRIDU
arg	248:20	248:24	7	ridu
water	248:20	0:0	8	ridu
arg	248:26	248:33	7	&i_ridu
op	248:26	0:0	8	&
water	248:27	0:0	8	i_ridu
arg	248:35	248:55	7	&p_frag->p_buffer[4]
op	248:35	0:0	8	&
water	248:36	0:0	8	p_frag
op	248:42	0:0	8	->
water	248:44	0:0	8	p_buffer
op	248:52	0:0	8	[
water	248:53	0:0	8	4
op	248:54	0:0	8	]
arg	248:57	248:78	7	p_frag->i_buffer-4
water	248:57	0:0	8	p_frag
op	248:63	0:0	8	->
water	248:65	0:0	8	i_buffer
op	248:74	0:0	8	-
water	248:76	0:0	8	4
water	248:79	0:0	6	;
call	250:8	250:34	6	bs_init
arg	250:17	250:19	7	&s
op	250:17	0:0	8	&
water	250:18	0:0	8	s
arg	250:21	250:25	7	ridu
water	250:21	0:0	8	ridu
arg	250:27	250:34	7	i_ridu
water	250:27	0:0	8	i_ridu
water	250:35	0:0	6	;
if	251:8	300:8	6	(p_sys -> sh . b_advanced_profile)
cond	251:12	251:22	7	p_sys -> sh . b_advanced_profile
water	251:12	0:0	8	p_sys
op	251:17	0:0	8	->
water	251:19	0:0	8	sh
op	251:21	0:0	8	.
water	251:22	0:0	8	b_advanced_profile
stmts	252:8	300:8	7	
water	252:8	0:0	8	{
decl	253:12	253:25	8	int	i_fcm
op	253:22	0:0	8	=
water	253:24	0:0	8	0
if	254:12	263:12	8	(p_sys -> sh . b_interlaced)
cond	254:16	254:26	9	p_sys -> sh . b_interlaced
water	254:16	0:0	10	p_sys
op	254:21	0:0	10	->
water	254:23	0:0	10	sh
op	254:25	0:0	10	.
water	254:26	0:0	10	b_interlaced
stmts	255:12	263:12	9	
water	255:12	0:0	10	{
if	256:16	262:16	10	(bs_read (& s ,1 ))
cond	256:20	256:35	11	bs_read (& s ,1 )
call	256:20	256:35	12	bs_read
arg	256:29	256:31	13	&s
op	256:29	0:0	14	&
water	256:30	0:0	14	s
arg	256:33	256:35	13	1
water	256:33	0:0	14	1
stmts	257:16	262:16	11	
water	257:16	0:0	12	{
if	258:20	259:33	12	(bs_read (& s ,1 ))
cond	258:24	258:39	13	bs_read (& s ,1 )
call	258:24	258:39	14	bs_read
arg	258:33	258:35	15	&s
op	258:33	0:0	16	&
water	258:34	0:0	16	s
arg	258:37	258:39	15	1
water	258:37	0:0	16	1
stmts	259:24	259:33	13	
water	259:24	0:0	14	i_fcm
op	259:30	0:0	14	=
water	259:32	0:0	14	1
water	259:33	0:0	14	;
else	260:20	261:33	12
stmts	261:24	261:33	13	
water	261:24	0:0	14	i_fcm
op	261:30	0:0	14	=
water	261:32	0:0	14	2
water	261:33	0:0	14	;
water	262:16	0:0	12	}
water	263:12	0:0	10	}
if	264:12	286:12	8	(i_fcm == 1)
cond	264:16	264:25	9	i_fcm == 1
water	264:16	0:0	10	i_fcm
op	264:22	0:0	10	==
water	264:25	0:0	10	1
stmts	265:12	286:12	9	
water	265:12	0:0	10	{
switch	267:16	285:16	10	(bs_read (& s ,3 ))
cond	267:24	267:39	11	bs_read (& s ,3 )
call	267:24	267:39	12	bs_read
arg	267:33	267:35	13	&s
op	267:33	0:0	14	&
water	267:34	0:0	14	s
arg	267:37	267:39	13	3
water	267:37	0:0	14	3
stmts	268:16	285:16	11	
water	268:16	0:0	12	{
label	269:16	269:22	12	case 0 :
label	270:16	270:22	12	case 1 :
label	271:16	271:22	12	case 2 :
water	272:20	0:0	12	p_sys
op	272:25	0:0	12	->
water	272:27	0:0	12	p_frame
op	272:34	0:0	12	->
water	272:36	0:0	12	i_flags
op	272:44	0:0	12	|=
water	272:47	0:0	12	BLOCK_FLAG_TYPE_I
water	272:64	0:0	12	;
water	273:20	0:0	12	p_sys
op	273:25	0:0	12	->
water	273:27	0:0	12	p_frame
op	273:34	0:0	12	->
water	273:36	0:0	12	i_flags
op	273:44	0:0	12	|=
water	273:47	0:0	12	BLOCK_FLAG_TYPE_I
water	273:64	0:0	12	;
water	274:20	0:0	12	p_sys
op	274:25	0:0	12	->
water	274:27	0:0	12	p_frame
op	274:34	0:0	12	->
water	274:36	0:0	12	i_flags
op	274:44	0:0	12	|=
water	274:47	0:0	12	BLOCK_FLAG_TYPE_I
water	274:64	0:0	12	;
break	275:20	275:25	12	
label	276:16	276:22	12	case 3 :
water	277:20	0:0	12	p_sys
op	277:25	0:0	12	->
water	277:27	0:0	12	p_frame
op	277:34	0:0	12	->
water	277:36	0:0	12	i_flags
op	277:44	0:0	12	|=
water	277:47	0:0	12	BLOCK_FLAG_TYPE_P
water	277:64	0:0	12	;
break	278:20	278:25	12	
label	279:16	279:22	12	case 4 :
label	280:16	280:22	12	case 5 :
label	281:16	281:22	12	case 6 :
label	282:16	282:22	12	case 7 :
water	283:20	0:0	12	p_sys
op	283:25	0:0	12	->
water	283:27	0:0	12	p_frame
op	283:34	0:0	12	->
water	283:36	0:0	12	i_flags
op	283:44	0:0	12	|=
water	283:47	0:0	12	BLOCK_FLAG_TYPE_B
water	283:64	0:0	12	;
break	284:20	284:25	12	
water	285:16	0:0	12	}
water	286:12	0:0	10	}
else	287:12	299:12	8
stmts	288:12	299:12	9	
water	288:12	0:0	10	{
if	289:16	290:64	10	(!bs_read (& s ,1 ))
cond	289:20	289:36	11	!bs_read (& s ,1 )
op	289:20	0:0	12	!
call	289:21	289:36	12	bs_read
arg	289:30	289:32	13	&s
op	289:30	0:0	14	&
water	289:31	0:0	14	s
arg	289:34	289:36	13	1
water	289:34	0:0	14	1
stmts	290:20	290:64	11	
water	290:20	0:0	12	p_sys
op	290:25	0:0	12	->
water	290:27	0:0	12	p_frame
op	290:34	0:0	12	->
water	290:36	0:0	12	i_flags
op	290:44	0:0	12	|=
water	290:47	0:0	12	BLOCK_FLAG_TYPE_P
water	290:64	0:0	12	;
else	291:16	292:64	10
stmts	291:21	292:64	11	
if	291:21	292:64	12	(!bs_read (& s ,1 ))
cond	291:25	291:41	13	!bs_read (& s ,1 )
op	291:25	0:0	14	!
call	291:26	291:41	14	bs_read
arg	291:35	291:37	15	&s
op	291:35	0:0	16	&
water	291:36	0:0	16	s
arg	291:39	291:41	15	1
water	291:39	0:0	16	1
stmts	292:20	292:64	13	
water	292:20	0:0	14	p_sys
op	292:25	0:0	14	->
water	292:27	0:0	14	p_frame
op	292:34	0:0	14	->
water	292:36	0:0	14	i_flags
op	292:44	0:0	14	|=
water	292:47	0:0	14	BLOCK_FLAG_TYPE_B
water	292:64	0:0	14	;
else	293:16	294:64	10
stmts	293:21	294:64	11	
if	293:21	294:64	12	(!bs_read (& s ,1 ))
cond	293:25	293:41	13	!bs_read (& s ,1 )
op	293:25	0:0	14	!
call	293:26	293:41	14	bs_read
arg	293:35	293:37	15	&s
op	293:35	0:0	16	&
water	293:36	0:0	16	s
arg	293:39	293:41	15	1
water	293:39	0:0	16	1
stmts	294:20	294:64	13	
water	294:20	0:0	14	p_sys
op	294:25	0:0	14	->
water	294:27	0:0	14	p_frame
op	294:34	0:0	14	->
water	294:36	0:0	14	i_flags
op	294:44	0:0	14	|=
water	294:47	0:0	14	BLOCK_FLAG_TYPE_I
water	294:64	0:0	14	;
else	295:16	296:64	10
stmts	295:21	296:64	11	
if	295:21	296:64	12	(!bs_read (& s ,1 ))
cond	295:25	295:41	13	!bs_read (& s ,1 )
op	295:25	0:0	14	!
call	295:26	295:41	14	bs_read
arg	295:35	295:37	15	&s
op	295:35	0:0	16	&
water	295:36	0:0	16	s
arg	295:39	295:41	15	1
water	295:39	0:0	16	1
stmts	296:20	296:64	13	
water	296:20	0:0	14	p_sys
op	296:25	0:0	14	->
water	296:27	0:0	14	p_frame
op	296:34	0:0	14	->
water	296:36	0:0	14	i_flags
op	296:44	0:0	14	|=
water	296:47	0:0	14	BLOCK_FLAG_TYPE_B
water	296:64	0:0	14	;
else	297:16	298:64	10
stmts	298:20	298:64	11	
water	298:20	0:0	12	p_sys
op	298:25	0:0	12	->
water	298:27	0:0	12	p_frame
op	298:34	0:0	12	->
water	298:36	0:0	12	i_flags
op	298:44	0:0	12	|=
water	298:47	0:0	12	BLOCK_FLAG_TYPE_P
water	298:64	0:0	12	;
water	299:12	0:0	10	}
water	300:8	0:0	8	}
else	301:8	314:8	6
stmts	302:8	314:8	7	
water	302:8	0:0	8	{
if	303:12	304:32	8	(p_sys -> sh . b_frame_interpolation)
cond	303:16	303:26	9	p_sys -> sh . b_frame_interpolation
water	303:16	0:0	10	p_sys
op	303:21	0:0	10	->
water	303:23	0:0	10	sh
op	303:25	0:0	10	.
water	303:26	0:0	10	b_frame_interpolation
stmts	304:16	304:32	9	
call	304:16	304:31	10	bs_skip
arg	304:25	304:27	11	&s
op	304:25	0:0	12	&
water	304:26	0:0	12	s
arg	304:29	304:31	11	1
water	304:29	0:0	12	1
water	304:32	0:0	10	;
call	305:12	305:27	8	bs_skip
arg	305:21	305:23	9	&s
op	305:21	0:0	10	&
water	305:22	0:0	10	s
arg	305:25	305:27	9	2
water	305:25	0:0	10	2
water	305:28	0:0	8	;
if	306:12	307:32	8	(p_sys -> sh . b_range_reduction)
cond	306:16	306:26	9	p_sys -> sh . b_range_reduction
water	306:16	0:0	10	p_sys
op	306:21	0:0	10	->
water	306:23	0:0	10	sh
op	306:25	0:0	10	.
water	306:26	0:0	10	b_range_reduction
stmts	307:16	307:32	9	
call	307:16	307:31	10	bs_skip
arg	307:25	307:27	11	&s
op	307:25	0:0	12	&
water	307:26	0:0	12	s
arg	307:29	307:31	11	1
water	307:29	0:0	12	1
water	307:32	0:0	10	;
if	308:12	309:60	8	(bs_read (& s ,1 ))
cond	308:16	308:31	9	bs_read (& s ,1 )
call	308:16	308:31	10	bs_read
arg	308:25	308:27	11	&s
op	308:25	0:0	12	&
water	308:26	0:0	12	s
arg	308:29	308:31	11	1
water	308:29	0:0	12	1
stmts	309:16	309:60	9	
water	309:16	0:0	10	p_sys
op	309:21	0:0	10	->
water	309:23	0:0	10	p_frame
op	309:30	0:0	10	->
water	309:32	0:0	10	i_flags
op	309:40	0:0	10	|=
water	309:43	0:0	10	BLOCK_FLAG_TYPE_P
water	309:60	0:0	10	;
else	310:12	311:60	8
stmts	310:17	311:60	9	
if	310:17	311:60	10	(! p_sys -> sh . b_has_bframe ||bs_read (& s ,1 ))
cond	310:21	310:63	11	! p_sys -> sh . b_has_bframe ||bs_read (& s ,1 )
op	310:21	0:0	12	!
water	310:22	0:0	12	p_sys
op	310:27	0:0	12	->
water	310:29	0:0	12	sh
op	310:31	0:0	12	.
water	310:32	0:0	12	b_has_bframe
op	310:45	0:0	12	||
call	310:48	310:63	12	bs_read
arg	310:57	310:59	13	&s
op	310:57	0:0	14	&
water	310:58	0:0	14	s
arg	310:61	310:63	13	1
water	310:61	0:0	14	1
stmts	311:16	311:60	11	
water	311:16	0:0	12	p_sys
op	311:21	0:0	12	->
water	311:23	0:0	12	p_frame
op	311:30	0:0	12	->
water	311:32	0:0	12	i_flags
op	311:40	0:0	12	|=
water	311:43	0:0	12	BLOCK_FLAG_TYPE_I
water	311:60	0:0	12	;
else	312:12	313:60	8
stmts	313:16	313:60	9	
water	313:16	0:0	10	p_sys
op	313:21	0:0	10	->
water	313:23	0:0	10	p_frame
op	313:30	0:0	10	->
water	313:32	0:0	10	i_flags
op	313:40	0:0	10	|=
water	313:43	0:0	10	BLOCK_FLAG_TYPE_B
water	313:60	0:0	10	;
water	314:8	0:0	8	}
water	315:8	0:0	6	p_sys
op	315:13	0:0	6	->
water	315:15	0:0	6	b_frame
op	315:23	0:0	6	=
water	315:25	0:0	6	true
water	315:29	0:0	6	;
water	316:4	0:0	6	}
if	317:4	318:34	2	(p_release)
cond	317:8	317:8	3	p_release
water	317:8	0:0	4	p_release
stmts	318:8	318:34	3	
call	318:8	318:33	4	block_Release
arg	318:23	318:33	5	p_release
water	318:23	0:0	6	p_release
water	318:34	0:0	4	;
return	319:4	319:16	2	p_pic
water	319:11	0:0	3	p_pic
