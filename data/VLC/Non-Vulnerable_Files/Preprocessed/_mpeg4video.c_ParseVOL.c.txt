func	2:0	77:0	0	static int	ParseVOL
params	2:19	0:0	1	
param	2:21	2:37	2	decoder_t *	p_dec
param	2:39	2:55	2	es_format_t *	fmt
param	3:21	3:35	2	uint8_t *	p_vol
param	3:37	3:47	2	int	i_vol
stmnts	0:0	76:22	1	
decl	5:4	5:39	2	decoder_sys_t	*p_sys
op	5:25	0:0	2	=
water	5:27	0:0	2	p_dec
op	5:32	0:0	2	->
water	5:34	0:0	2	p_sys
decl	6:4	6:45	2	int	i_vo_type
water	6:17	0:0	2	,
decl	6:4	6:45	2	int	i_vo_ver_id
water	6:30	0:0	2	,
decl	6:4	6:45	2	int	i_ar
water	6:36	0:0	2	,
decl	6:4	6:45	2	int	i_shape
decl	7:4	7:10	2	bs_t	s
for	8:4	14:4	2	(;;)
forinit	8:9	8:9	3	;
water	8:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	9:4	14:4	3	
water	9:4	0:0	4	{
if	10:8	11:56	4	(p_vol [ 0 ] == 0 x00 && p_vol [ 1 ] == 0 x00 && p_vol [ 2 ] == 0 x01 && p_vol [ 3 ] >= 0 x20 && p_vol [ 3 ] <= 0 x2f)
cond	10:12	11:45	5	p_vol [ 0 ] == 0 x00 && p_vol [ 1 ] == 0 x00 && p_vol [ 2 ] == 0 x01 && p_vol [ 3 ] >= 0 x20 && p_vol [ 3 ] <= 0 x2f
water	10:12	0:0	6	p_vol
op	10:17	0:0	6	[
water	10:18	0:0	6	0
op	10:19	0:0	6	]
op	10:21	0:0	6	==
water	10:24	0:0	6	0
water	10:25	0:0	6	x00
op	10:29	0:0	6	&&
water	10:32	0:0	6	p_vol
op	10:37	0:0	6	[
water	10:38	0:0	6	1
op	10:39	0:0	6	]
op	10:41	0:0	6	==
water	10:44	0:0	6	0
water	10:45	0:0	6	x00
op	10:49	0:0	6	&&
water	10:52	0:0	6	p_vol
op	10:57	0:0	6	[
water	10:58	0:0	6	2
op	10:59	0:0	6	]
op	10:61	0:0	6	==
water	10:64	0:0	6	0
water	10:65	0:0	6	x01
op	10:69	0:0	6	&&
water	11:12	0:0	6	p_vol
op	11:17	0:0	6	[
water	11:18	0:0	6	3
op	11:19	0:0	6	]
op	11:21	0:0	6	>=
water	11:24	0:0	6	0
water	11:25	0:0	6	x20
op	11:29	0:0	6	&&
water	11:32	0:0	6	p_vol
op	11:37	0:0	6	[
water	11:38	0:0	6	3
op	11:39	0:0	6	]
op	11:41	0:0	6	<=
water	11:44	0:0	6	0
water	11:45	0:0	6	x2f
stmts	11:51	11:56	5	
break	11:51	11:56	6	
water	12:8	0:0	4	p_vol
op	12:13	0:0	4	++
water	12:15	0:0	4	;
water	12:17	0:0	4	i_vol
op	12:22	0:0	4	--
water	12:24	0:0	4	;
if	13:8	13:44	4	(i_vol <= 4)
cond	13:12	13:21	5	i_vol <= 4
water	13:12	0:0	6	i_vol
op	13:18	0:0	6	<=
water	13:21	0:0	6	4
stmts	13:25	13:44	5	
return	13:25	13:44	6	VLC_EGENERIC
water	13:32	0:0	7	VLC_EGENERIC
water	14:4	0:0	4	}
call	15:4	15:38	2	bs_init
arg	15:13	15:15	3	&s
op	15:13	0:0	4	&
water	15:14	0:0	4	s
arg	15:17	15:26	3	&p_vol[4]
op	15:17	0:0	4	&
water	15:18	0:0	4	p_vol
op	15:23	0:0	4	[
water	15:24	0:0	4	4
op	15:25	0:0	4	]
arg	15:28	15:38	3	i_vol-4
water	15:28	0:0	4	i_vol
op	15:34	0:0	4	-
water	15:36	0:0	4	4
water	15:39	0:0	2	;
call	16:4	16:19	2	bs_skip
arg	16:13	16:15	3	&s
op	16:13	0:0	4	&
water	16:14	0:0	4	s
arg	16:17	16:19	3	1
water	16:17	0:0	4	1
water	16:20	0:0	2	;
water	17:4	0:0	2	i_vo_type
op	17:14	0:0	2	=
call	17:16	17:31	2	bs_read
arg	17:25	17:27	3	&s
op	17:25	0:0	4	&
water	17:26	0:0	4	s
arg	17:29	17:31	3	8
water	17:29	0:0	4	8
water	17:32	0:0	2	;
if	18:4	22:4	2	(bs_read1 (& s ))
cond	18:8	18:21	3	bs_read1 (& s )
call	18:8	18:21	4	bs_read1
arg	18:18	18:21	5	&s
op	18:18	0:0	6	&
water	18:19	0:0	6	s
stmts	19:4	22:4	3	
water	19:4	0:0	4	{
water	20:8	0:0	4	i_vo_ver_id
op	20:20	0:0	4	=
call	20:22	20:37	4	bs_read
arg	20:31	20:33	5	&s
op	20:31	0:0	6	&
water	20:32	0:0	6	s
arg	20:35	20:37	5	4
water	20:35	0:0	6	4
water	20:38	0:0	4	;
call	21:8	21:23	4	bs_skip
arg	21:17	21:19	5	&s
op	21:17	0:0	6	&
water	21:18	0:0	6	s
arg	21:21	21:23	5	3
water	21:21	0:0	6	3
water	21:24	0:0	4	;
water	22:4	0:0	4	}
else	23:4	26:4	2
stmts	24:4	26:4	3	
water	24:4	0:0	4	{
water	25:8	0:0	4	i_vo_ver_id
op	25:20	0:0	4	=
water	25:22	0:0	4	1
water	25:23	0:0	4	;
water	26:4	0:0	4	}
water	27:4	0:0	2	i_ar
op	27:9	0:0	2	=
call	27:11	27:26	2	bs_read
arg	27:20	27:22	3	&s
op	27:20	0:0	4	&
water	27:21	0:0	4	s
arg	27:24	27:26	3	4
water	27:24	0:0	4	4
water	27:27	0:0	2	;
if	28:4	33:4	2	(i_ar == 0 xf)
cond	28:8	28:17	3	i_ar == 0 xf
water	28:8	0:0	4	i_ar
op	28:13	0:0	4	==
water	28:16	0:0	4	0
water	28:17	0:0	4	xf
stmts	29:4	33:4	3	
water	29:4	0:0	4	{
decl	30:8	30:35	4	int	i_ar_width
water	30:22	0:0	4	,
decl	30:8	30:35	4	int	i_ar_height
water	31:8	0:0	4	i_ar_width
op	31:19	0:0	4	=
call	31:21	31:36	4	bs_read
arg	31:30	31:32	5	&s
op	31:30	0:0	6	&
water	31:31	0:0	6	s
arg	31:34	31:36	5	8
water	31:34	0:0	6	8
water	31:37	0:0	4	;
water	32:8	0:0	4	i_ar_height
op	32:19	0:0	4	=
call	32:21	32:36	4	bs_read
arg	32:30	32:32	5	&s
op	32:30	0:0	6	&
water	32:31	0:0	6	s
arg	32:34	32:36	5	8
water	32:34	0:0	6	8
water	32:37	0:0	4	;
water	33:4	0:0	4	}
if	34:4	51:4	2	(bs_read1 (& s ))
cond	34:8	34:21	3	bs_read1 (& s )
call	34:8	34:21	4	bs_read1
arg	34:18	34:21	5	&s
op	34:18	0:0	6	&
water	34:19	0:0	6	s
stmts	35:4	51:4	3	
water	35:4	0:0	4	{
decl	36:8	36:27	4	int	i_chroma_format
decl	37:8	37:23	4	int	i_low_delay
water	39:8	0:0	4	i_chroma_format
op	39:24	0:0	4	=
call	39:26	39:41	4	bs_read
arg	39:35	39:37	5	&s
op	39:35	0:0	6	&
water	39:36	0:0	6	s
arg	39:39	39:41	5	2
water	39:39	0:0	6	2
water	39:42	0:0	4	;
water	40:8	0:0	4	i_low_delay
op	40:20	0:0	4	=
call	40:22	40:35	4	bs_read1
arg	40:32	40:35	5	&s
op	40:32	0:0	6	&
water	40:33	0:0	6	s
water	40:36	0:0	4	;
if	41:8	50:8	4	(bs_read1 (& s ))
cond	41:12	41:25	5	bs_read1 (& s )
call	41:12	41:25	6	bs_read1
arg	41:22	41:25	7	&s
op	41:22	0:0	8	&
water	41:23	0:0	8	s
stmts	42:8	50:8	5	
water	42:8	0:0	6	{
call	43:12	43:28	6	bs_skip
arg	43:21	43:23	7	&s
op	43:21	0:0	8	&
water	43:22	0:0	8	s
arg	43:25	43:28	7	16
water	43:25	0:0	8	16
water	43:29	0:0	6	;
call	44:12	44:28	6	bs_skip
arg	44:21	44:23	7	&s
op	44:21	0:0	8	&
water	44:22	0:0	8	s
arg	44:25	44:28	7	16
water	44:25	0:0	8	16
water	44:29	0:0	6	;
call	45:12	45:28	6	bs_skip
arg	45:21	45:23	7	&s
op	45:21	0:0	8	&
water	45:22	0:0	8	s
arg	45:25	45:28	7	16
water	45:25	0:0	8	16
water	45:29	0:0	6	;
call	46:12	46:27	6	bs_skip
arg	46:21	46:23	7	&s
op	46:21	0:0	8	&
water	46:22	0:0	8	s
arg	46:25	46:27	7	3
water	46:25	0:0	8	3
water	46:28	0:0	6	;
call	47:12	47:28	6	bs_skip
arg	47:21	47:23	7	&s
op	47:21	0:0	8	&
water	47:22	0:0	8	s
arg	47:25	47:28	7	11
water	47:25	0:0	8	11
water	47:29	0:0	6	;
call	48:12	48:27	6	bs_skip
arg	48:21	48:23	7	&s
op	48:21	0:0	8	&
water	48:22	0:0	8	s
arg	48:25	48:27	7	1
water	48:25	0:0	8	1
water	48:28	0:0	6	;
call	49:12	49:28	6	bs_skip
arg	49:21	49:23	7	&s
op	49:21	0:0	8	&
water	49:22	0:0	8	s
arg	49:25	49:28	7	16
water	49:25	0:0	8	16
water	49:29	0:0	6	;
water	50:8	0:0	6	}
water	51:4	0:0	4	}
water	53:4	0:0	2	i_shape
op	53:12	0:0	2	=
call	53:14	53:29	2	bs_read
arg	53:23	53:25	3	&s
op	53:23	0:0	4	&
water	53:24	0:0	4	s
arg	53:27	53:29	3	2
water	53:27	0:0	4	2
water	53:30	0:0	2	;
if	54:4	57:4	2	(i_shape == 3 && i_vo_ver_id != 1)
cond	54:8	54:39	3	i_shape == 3 && i_vo_ver_id != 1
water	54:8	0:0	4	i_shape
op	54:16	0:0	4	==
water	54:19	0:0	4	3
op	54:21	0:0	4	&&
water	54:24	0:0	4	i_vo_ver_id
op	54:36	0:0	4	!=
water	54:39	0:0	4	1
stmts	55:4	57:4	3	
water	55:4	0:0	4	{
call	56:8	56:23	4	bs_skip
arg	56:17	56:19	5	&s
op	56:17	0:0	6	&
water	56:18	0:0	6	s
arg	56:21	56:23	5	4
water	56:21	0:0	6	4
water	56:24	0:0	4	;
water	57:4	0:0	4	}
if	58:4	58:45	2	(!bs_read1 (& s ))
cond	58:8	58:22	3	!bs_read1 (& s )
op	58:8	0:0	4	!
call	58:9	58:22	4	bs_read1
arg	58:19	58:22	5	&s
op	58:19	0:0	6	&
water	58:20	0:0	6	s
stmts	58:26	58:45	3	
return	58:26	58:45	4	VLC_EGENERIC
water	58:33	0:0	5	VLC_EGENERIC
water	59:4	0:0	2	p_sys
op	59:9	0:0	2	->
water	59:11	0:0	2	i_fps_num
op	59:21	0:0	2	=
call	59:23	59:39	2	bs_read
arg	59:32	59:34	3	&s
op	59:32	0:0	4	&
water	59:33	0:0	4	s
arg	59:36	59:39	3	16
water	59:36	0:0	4	16
water	59:40	0:0	2	;
if	60:4	60:48	2	(! p_sys -> i_fps_num)
cond	60:8	60:16	3	! p_sys -> i_fps_num
op	60:8	0:0	4	!
water	60:9	0:0	4	p_sys
op	60:14	0:0	4	->
water	60:16	0:0	4	i_fps_num
stmts	60:28	60:48	3	
water	60:28	0:0	4	p_sys
op	60:33	0:0	4	->
water	60:35	0:0	4	i_fps_num
op	60:45	0:0	4	=
water	60:47	0:0	4	1
water	60:48	0:0	4	;
if	61:4	61:45	2	(!bs_read1 (& s ))
cond	61:8	61:22	3	!bs_read1 (& s )
op	61:8	0:0	4	!
call	61:9	61:22	4	bs_read1
arg	61:19	61:22	5	&s
op	61:19	0:0	6	&
water	61:20	0:0	6	s
stmts	61:26	61:45	3	
return	61:26	61:45	4	VLC_EGENERIC
water	61:33	0:0	5	VLC_EGENERIC
if	62:4	67:4	2	(bs_read1 (& s ))
cond	62:8	62:21	3	bs_read1 (& s )
call	62:8	62:21	4	bs_read1
arg	62:18	62:21	5	&s
op	62:18	0:0	6	&
water	62:19	0:0	6	s
stmts	63:4	67:4	3	
water	63:4	0:0	4	{
decl	64:8	64:72	4	int	i_time_increment_bits
op	64:34	0:0	4	=
call	64:36	64:67	5	vlc_log2
arg	64:46	64:67	6	p_sys->i_fps_num-1
water	64:46	0:0	7	p_sys
op	64:51	0:0	7	->
water	64:53	0:0	7	i_fps_num
op	64:63	0:0	7	-
water	64:65	0:0	7	1
op	64:69	0:0	4	+
water	64:71	0:0	4	1
if	65:8	65:65	4	(i_time_increment_bits < 1)
cond	65:12	65:36	5	i_time_increment_bits < 1
water	65:12	0:0	6	i_time_increment_bits
op	65:34	0:0	6	<
water	65:36	0:0	6	1
stmts	65:40	65:65	5	
water	65:40	0:0	6	i_time_increment_bits
op	65:62	0:0	6	=
water	65:64	0:0	6	1
water	65:65	0:0	6	;
water	66:8	0:0	4	p_sys
op	66:13	0:0	4	->
water	66:15	0:0	4	i_fps_den
op	66:25	0:0	4	=
call	66:27	66:62	4	bs_read
arg	66:36	66:38	5	&s
op	66:36	0:0	6	&
water	66:37	0:0	6	s
arg	66:40	66:62	5	i_time_increment_bits
water	66:40	0:0	6	i_time_increment_bits
water	66:63	0:0	4	;
water	67:4	0:0	4	}
if	68:4	75:4	2	(i_shape == 0)
cond	68:8	68:19	3	i_shape == 0
water	68:8	0:0	4	i_shape
op	68:16	0:0	4	==
water	68:19	0:0	4	0
stmts	69:4	75:4	3	
water	69:4	0:0	4	{
call	70:8	70:23	4	bs_skip
arg	70:17	70:19	5	&s
op	70:17	0:0	6	&
water	70:18	0:0	6	s
arg	70:21	70:23	5	1
water	70:21	0:0	6	1
water	70:24	0:0	4	;
water	71:8	0:0	4	fmt
op	71:11	0:0	4	->
water	71:13	0:0	4	video
op	71:18	0:0	4	.
water	71:19	0:0	4	i_width
op	71:27	0:0	4	=
call	71:29	71:45	4	bs_read
arg	71:38	71:40	5	&s
op	71:38	0:0	6	&
water	71:39	0:0	6	s
arg	71:42	71:45	5	13
water	71:42	0:0	6	13
water	71:46	0:0	4	;
call	72:8	72:23	4	bs_skip
arg	72:17	72:19	5	&s
op	72:17	0:0	6	&
water	72:18	0:0	6	s
arg	72:21	72:23	5	1
water	72:21	0:0	6	1
water	72:24	0:0	4	;
water	73:8	0:0	4	fmt
op	73:11	0:0	4	->
water	73:13	0:0	4	video
op	73:18	0:0	4	.
water	73:19	0:0	4	i_height
op	73:27	0:0	4	=
call	73:29	73:45	4	bs_read
arg	73:38	73:40	5	&s
op	73:38	0:0	6	&
water	73:39	0:0	6	s
arg	73:42	73:45	5	13
water	73:42	0:0	6	13
water	73:46	0:0	4	;
call	74:8	74:23	4	bs_skip
arg	74:17	74:19	5	&s
op	74:17	0:0	6	&
water	74:18	0:0	6	s
arg	74:21	74:23	5	1
water	74:21	0:0	6	1
water	74:24	0:0	4	;
water	75:4	0:0	4	}
return	76:4	76:22	2	VLC_SUCCESS
water	76:11	0:0	3	VLC_SUCCESS
