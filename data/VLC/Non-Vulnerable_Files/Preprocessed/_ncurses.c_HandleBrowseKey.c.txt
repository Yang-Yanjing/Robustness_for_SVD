func	2:0	56:0	0	static bool	HandleBrowseKey
params	2:27	0:0	1	
param	2:28	2:47	2	intf_thread_t *	intf
param	2:49	2:56	2	int	key
stmnts	0:0	55:16	1	
decl	4:4	4:33	2	intf_sys_t	*sys
op	4:20	0:0	2	=
water	4:22	0:0	2	intf
op	4:26	0:0	2	->
water	4:28	0:0	2	p_sys
decl	5:4	5:33	2	struct dir_entry_t	*dir_entry
switch	6:4	54:4	2	(key)
cond	6:11	6:11	3	key
water	6:11	0:0	4	key
stmts	7:4	54:4	3	
water	7:4	0:0	4	{
water	8:4	0:0	4	case
water	8:9	0:0	4	'.'
water	8:12	0:0	4	:
water	9:8	0:0	4	sys
op	9:11	0:0	4	->
water	9:13	0:0	4	show_hidden_files
op	9:31	0:0	4	=
op	9:33	0:0	4	!
water	9:34	0:0	4	sys
op	9:37	0:0	4	->
water	9:39	0:0	4	show_hidden_files
water	9:56	0:0	4	;
call	10:8	10:20	4	ReadDir
arg	10:16	10:20	5	intf
water	10:16	0:0	6	intf
water	10:21	0:0	4	;
return	11:8	11:19	4	true
water	11:15	0:0	5	true
label	12:4	12:18	4	case KEY_ENTER :
water	13:4	0:0	4	case
water	13:9	0:0	4	'\r'
water	13:13	0:0	4	:
water	14:4	0:0	4	case
water	14:9	0:0	4	'\n'
water	14:13	0:0	4	:
water	15:4	0:0	4	case
water	15:9	0:0	4	' '
water	15:12	0:0	4	:
water	16:8	0:0	4	dir_entry
op	16:18	0:0	4	=
water	16:20	0:0	4	sys
op	16:23	0:0	4	->
water	16:25	0:0	4	dir_entries
op	16:36	0:0	4	[
water	16:37	0:0	4	sys
op	16:40	0:0	4	->
water	16:42	0:0	4	box_idx
op	16:49	0:0	4	]
water	16:50	0:0	4	;
decl	17:8	17:18	4	char	*path
if	18:8	20:23	4	(asprintf (& path ,"%s" DIR_SEP "%s" ,sys -> current_dir ,dir_entry -> path ) == - 1)
cond	18:12	19:42	5	asprintf (& path ,"%s" DIR_SEP "%s" ,sys -> current_dir ,dir_entry -> path ) == - 1
call	18:12	19:36	6	asprintf
arg	18:21	18:26	7	&path
op	18:21	0:0	8	&
water	18:22	0:0	8	path
arg	18:28	18:45	7	"%s"DIR_SEP"%s"
water	18:28	0:0	8	"%s"
water	18:33	0:0	8	DIR_SEP
water	18:41	0:0	8	"%s"
arg	18:47	18:63	7	sys->current_dir
water	18:47	0:0	8	sys
op	18:50	0:0	8	->
water	18:52	0:0	8	current_dir
arg	19:21	19:36	7	dir_entry->path
water	19:21	0:0	8	dir_entry
op	19:30	0:0	8	->
water	19:32	0:0	8	path
op	19:38	0:0	6	==
op	19:41	0:0	6	-
water	19:42	0:0	6	1
stmts	20:12	20:23	5	
return	20:12	20:23	6	true
water	20:19	0:0	7	true
if	21:8	28:8	4	(! dir_entry -> file && key != ' ')
cond	21:12	21:39	5	! dir_entry -> file && key != ' '
op	21:12	0:0	6	!
water	21:13	0:0	6	dir_entry
op	21:22	0:0	6	->
water	21:24	0:0	6	file
op	21:29	0:0	6	&&
water	21:32	0:0	6	key
op	21:36	0:0	6	!=
water	21:39	0:0	6	' '
stmts	21:44	28:8	5	
water	21:44	0:0	6	{
call	22:12	22:33	6	free
arg	22:17	22:33	7	sys->current_dir
water	22:17	0:0	8	sys
op	22:20	0:0	8	->
water	22:22	0:0	8	current_dir
water	22:34	0:0	6	;
water	23:12	0:0	6	sys
op	23:15	0:0	6	->
water	23:17	0:0	6	current_dir
op	23:29	0:0	6	=
water	23:31	0:0	6	path
water	23:35	0:0	6	;
call	24:12	24:24	6	ReadDir
arg	24:20	24:24	7	intf
water	24:20	0:0	8	intf
water	24:25	0:0	6	;
water	25:12	0:0	6	sys
op	25:15	0:0	6	->
water	25:17	0:0	6	box_start
op	25:27	0:0	6	=
water	25:29	0:0	6	0
water	25:30	0:0	6	;
water	26:12	0:0	6	sys
op	26:15	0:0	6	->
water	26:17	0:0	6	box_idx
op	26:25	0:0	6	=
water	26:27	0:0	6	0
water	26:28	0:0	6	;
return	27:12	27:23	6	true
water	27:19	0:0	7	true
water	28:8	0:0	6	}
decl	29:8	29:46	4	char	*uri
op	29:18	0:0	4	=
call	29:20	29:45	5	vlc_path2uri
arg	29:33	29:37	6	path
water	29:33	0:0	7	path
arg	29:39	29:45	6	"file"
water	29:39	0:0	7	"file"
call	30:8	30:17	4	free
arg	30:13	30:17	5	path
water	30:13	0:0	6	path
water	30:18	0:0	4	;
if	31:8	32:23	4	(uri == NULL)
cond	31:12	31:19	5	uri == NULL
water	31:12	0:0	6	uri
op	31:16	0:0	6	==
water	31:19	0:0	6	NULL
stmts	32:12	32:23	5	
return	32:12	32:23	6	true
water	32:19	0:0	7	true
decl	33:8	33:45	4	playlist_t	*p_playlist
op	33:31	0:0	4	=
call	33:33	33:44	5	pl_Get
arg	33:40	33:44	6	intf
water	33:40	0:0	7	intf
call	34:8	34:36	4	vlc_mutex_lock
arg	34:23	34:36	5	&sys->pl_lock
op	34:23	0:0	6	&
water	34:24	0:0	6	sys
op	34:27	0:0	6	->
water	34:29	0:0	6	pl_lock
water	34:37	0:0	4	;
decl	35:8	35:45	4	playlist_item_t	*p_parent
op	35:34	0:0	4	=
water	35:36	0:0	4	sys
op	35:39	0:0	4	->
water	35:41	0:0	4	node
call	36:8	36:38	4	vlc_mutex_unlock
arg	36:25	36:38	5	&sys->pl_lock
op	36:25	0:0	6	&
water	36:26	0:0	6	sys
op	36:29	0:0	6	->
water	36:31	0:0	6	pl_lock
water	36:39	0:0	4	;
if	37:8	45:8	4	(! p_parent)
cond	37:12	37:13	5	! p_parent
op	37:12	0:0	6	!
water	37:13	0:0	6	p_parent
stmts	37:23	45:8	5	
water	37:23	0:0	6	{
decl	38:12	38:33	6	playlist_item_t	*item
water	39:12	0:0	6	PL_LOCK
water	39:19	0:0	6	;
water	40:12	0:0	6	item
op	40:17	0:0	6	=
call	40:19	40:57	6	playlist_CurrentPlayingItem
arg	40:47	40:57	7	p_playlist
water	40:47	0:0	8	p_playlist
water	40:58	0:0	6	;
water	41:12	0:0	6	p_parent
op	41:21	0:0	6	=
water	41:23	0:0	6	item
water	41:28	0:0	6	?
water	41:30	0:0	6	item
op	41:34	0:0	6	->
water	41:36	0:0	6	p_parent
water	41:45	0:0	6	:
water	41:47	0:0	6	NULL
water	41:51	0:0	6	;
water	42:12	0:0	6	PL_UNLOCK
water	42:21	0:0	6	;
if	43:12	44:55	6	(! p_parent)
cond	43:16	43:17	7	! p_parent
op	43:16	0:0	8	!
water	43:17	0:0	8	p_parent
stmts	44:16	44:55	7	
water	44:16	0:0	8	p_parent
op	44:25	0:0	8	=
water	44:27	0:0	8	p_playlist
op	44:37	0:0	8	->
water	44:39	0:0	8	p_local_onelevel
water	44:55	0:0	8	;
water	45:8	0:0	6	}
while	46:8	47:41	4	(p_parent -> p_parent && p_parent -> p_parent -> p_parent)
cond	46:15	46:57	5	p_parent -> p_parent && p_parent -> p_parent -> p_parent
water	46:15	0:0	6	p_parent
op	46:23	0:0	6	->
water	46:25	0:0	6	p_parent
op	46:34	0:0	6	&&
water	46:37	0:0	6	p_parent
op	46:45	0:0	6	->
water	46:47	0:0	6	p_parent
op	46:55	0:0	6	->
water	46:57	0:0	6	p_parent
stmts	47:12	47:41	5	
water	47:12	0:0	6	p_parent
op	47:21	0:0	6	=
water	47:23	0:0	6	p_parent
op	47:31	0:0	6	->
water	47:33	0:0	6	p_parent
water	47:41	0:0	6	;
decl	48:8	48:69	4	input_item_t	*p_input
op	48:30	0:0	4	=
water	48:32	0:0	4	p_playlist
op	48:42	0:0	4	->
water	48:44	0:0	4	p_local_onelevel
op	48:60	0:0	4	->
water	48:62	0:0	4	p_input
call	49:8	50:71	4	playlist_Add
arg	49:21	49:31	5	p_playlist
water	49:21	0:0	6	p_playlist
arg	49:33	49:36	5	uri
water	49:33	0:0	6	uri
arg	49:38	49:42	5	NULL
water	49:38	0:0	6	NULL
arg	49:44	49:59	5	PLAYLIST_APPEND
water	49:44	0:0	6	PLAYLIST_APPEND
arg	50:22	50:34	5	PLAYLIST_END
water	50:22	0:0	6	PLAYLIST_END
arg	50:36	50:64	5	p_parent->p_input==p_input
water	50:36	0:0	6	p_parent
op	50:44	0:0	6	->
water	50:46	0:0	6	p_input
op	50:54	0:0	6	==
water	50:57	0:0	6	p_input
arg	50:66	50:71	5	false
water	50:66	0:0	6	false
water	50:72	0:0	4	;
call	51:8	51:35	4	BoxSwitch
arg	51:18	51:21	5	sys
water	51:18	0:0	6	sys
arg	51:23	51:35	5	BOX_PLAYLIST
water	51:23	0:0	6	BOX_PLAYLIST
water	51:36	0:0	4	;
call	52:8	52:16	4	free
arg	52:13	52:16	5	uri
water	52:13	0:0	6	uri
water	52:17	0:0	4	;
return	53:8	53:19	4	true
water	53:15	0:0	5	true
water	54:4	0:0	4	}
return	55:4	55:16	2	false
water	55:11	0:0	3	false
