func	2:0	222:0	0	static int	Open
params	2:15	0:0	1	
param	2:17	2:38	2	vlc_object_t *	p_this
stmnts	0:0	221:22	1	
decl	4:4	4:60	2	video_splitter_t	*p_splitter
op	4:33	0:0	2	=
water	4:35	0:0	2	(
water	4:36	0:0	2	video_splitter_t
op	4:52	0:0	2	*
water	4:53	0:0	2	)
water	4:54	0:0	2	p_this
decl	5:4	5:31	2	video_splitter_sys_t	*p_sys
decl	6:4	7:67	2	const vlc_chroma_description_t	*p_chroma
op	6:45	0:0	2	=
call	7:8	7:66	3	vlc_fourcc_GetChromaDescription
arg	7:41	7:66	4	p_splitter->fmt.i_chroma
water	7:41	0:0	5	p_splitter
op	7:51	0:0	5	->
water	7:53	0:0	5	fmt
op	7:56	0:0	5	.
water	7:57	0:0	5	i_chroma
if	8:4	9:27	2	(p_chroma == NULL || p_chroma -> plane_count == 0)
cond	8:8	8:53	3	p_chroma == NULL || p_chroma -> plane_count == 0
water	8:8	0:0	4	p_chroma
op	8:17	0:0	4	==
water	8:20	0:0	4	NULL
op	8:25	0:0	4	||
water	8:28	0:0	4	p_chroma
op	8:36	0:0	4	->
water	8:38	0:0	4	plane_count
op	8:50	0:0	4	==
water	8:53	0:0	4	0
stmts	9:8	9:27	3	
return	9:8	9:27	4	VLC_EGENERIC
water	9:15	0:0	5	VLC_EGENERIC
water	10:4	0:0	2	p_splitter
op	10:14	0:0	2	->
water	10:16	0:0	2	p_sys
op	10:22	0:0	2	=
water	10:24	0:0	2	p_sys
op	10:30	0:0	2	=
call	10:32	10:55	2	malloc
arg	10:40	10:55	3	sizeof(*p_sys)
op	10:40	0:0	4	sizeof
water	10:46	0:0	4	(
op	10:47	0:0	4	*
water	10:48	0:0	4	p_sys
water	10:53	0:0	4	)
water	10:56	0:0	2	;
if	11:4	12:25	2	(! p_sys)
cond	11:8	11:9	3	! p_sys
op	11:8	0:0	4	!
water	11:9	0:0	4	p_sys
stmts	12:8	12:25	3	
return	12:8	12:25	4	VLC_ENOMEM
water	12:15	0:0	5	VLC_ENOMEM
call	13:4	14:41	2	config_ChainParse
arg	13:23	13:33	3	p_splitter
water	13:23	0:0	4	p_splitter
arg	13:35	13:45	3	CFG_PREFIX
water	13:35	0:0	4	CFG_PREFIX
arg	13:47	13:66	3	ppsz_filter_options
water	13:47	0:0	4	ppsz_filter_options
arg	14:23	14:41	3	p_splitter->p_cfg
water	14:23	0:0	4	p_splitter
op	14:33	0:0	4	->
water	14:35	0:0	4	p_cfg
water	14:42	0:0	2	;
water	16:4	0:0	2	p_sys
op	16:9	0:0	2	->
water	16:11	0:0	2	i_col
op	16:17	0:0	2	=
call	16:19	16:71	2	var_CreateGetInteger
arg	16:41	16:51	3	p_splitter
water	16:41	0:0	4	p_splitter
arg	16:53	16:71	3	CFG_PREFIX"cols"
water	16:53	0:0	4	CFG_PREFIX
water	16:64	0:0	4	"cols"
water	16:72	0:0	2	;
water	17:4	0:0	2	p_sys
op	17:9	0:0	2	->
water	17:11	0:0	2	i_col
op	17:17	0:0	2	=
call	17:19	17:54	2	VLC_CLIP
arg	17:29	17:41	3	p_sys->i_col
water	17:29	0:0	4	p_sys
op	17:34	0:0	4	->
water	17:36	0:0	4	i_col
arg	17:43	17:44	3	1
water	17:43	0:0	4	1
arg	17:46	17:54	3	COL_MAX
water	17:46	0:0	4	COL_MAX
water	17:55	0:0	2	;
water	18:4	0:0	2	p_sys
op	18:9	0:0	2	->
water	18:11	0:0	2	i_row
op	18:17	0:0	2	=
call	18:19	18:71	2	var_CreateGetInteger
arg	18:41	18:51	3	p_splitter
water	18:41	0:0	4	p_splitter
arg	18:53	18:71	3	CFG_PREFIX"rows"
water	18:53	0:0	4	CFG_PREFIX
water	18:64	0:0	4	"rows"
water	18:72	0:0	2	;
water	19:4	0:0	2	p_sys
op	19:9	0:0	2	->
water	19:11	0:0	2	i_row
op	19:17	0:0	2	=
call	19:19	19:54	2	VLC_CLIP
arg	19:29	19:41	3	p_sys->i_row
water	19:29	0:0	4	p_sys
op	19:34	0:0	4	->
water	19:36	0:0	4	i_row
arg	19:43	19:44	3	1
water	19:43	0:0	4	1
arg	19:46	19:54	3	ROW_MAX
water	19:46	0:0	4	ROW_MAX
water	19:55	0:0	2	;
call	20:4	21:40	2	msg_Dbg
arg	20:13	20:23	3	p_splitter
water	20:13	0:0	4	p_splitter
arg	20:25	20:49	3	"opening a %i x %i wall"
water	20:25	0:0	4	"opening a %i x %i wall"
arg	21:13	21:25	3	p_sys->i_col
water	21:13	0:0	4	p_sys
op	21:18	0:0	4	->
water	21:20	0:0	4	i_col
arg	21:27	21:40	3	p_sys->i_row
water	21:27	0:0	4	p_sys
op	21:32	0:0	4	->
water	21:34	0:0	4	i_row
water	21:41	0:0	2	;
decl	23:4	23:84	2	char	*psz_state
op	23:20	0:0	2	=
call	23:22	23:83	3	var_CreateGetNonEmptyString
arg	23:51	23:61	4	p_splitter
water	23:51	0:0	5	p_splitter
arg	23:63	23:83	4	CFG_PREFIX"active"
water	23:63	0:0	5	CFG_PREFIX
water	23:74	0:0	5	"active"
decl	25:4	25:35	2	bool	pb_active[COL_MAX*ROW_MAX]
for	26:4	27:40	2	( int i = 0 ;i < COL_MAX * ROW_MAX;i ++)
forinit	0:0	26:18	3	 int i = 0 ;
decl	26:9	26:18	4	int	i
op	26:15	0:0	4	=
water	26:17	0:0	4	0
cond	26:20	26:32	3	i < COL_MAX * ROW_MAX
water	26:20	0:0	4	i
op	26:22	0:0	4	<
water	26:24	0:0	4	COL_MAX
op	26:31	0:0	4	*
water	26:32	0:0	4	ROW_MAX
forexpr	26:41	26:42	3	i ++
water	26:41	0:0	4	i
op	26:42	0:0	4	++
stmts	27:8	27:40	3	
water	27:8	0:0	4	pb_active
op	27:17	0:0	4	[
water	27:18	0:0	4	i
op	27:19	0:0	4	]
op	27:21	0:0	4	=
water	27:23	0:0	4	psz_state
op	27:33	0:0	4	==
water	27:36	0:0	4	NULL
water	27:40	0:0	4	;
decl	29:4	29:29	2	char	*psz_tmp
op	29:18	0:0	2	=
water	29:20	0:0	2	psz_state
while	30:4	39:4	2	(psz_tmp && * psz_tmp)
cond	30:11	30:23	3	psz_tmp && * psz_tmp
water	30:11	0:0	4	psz_tmp
op	30:19	0:0	4	&&
op	30:22	0:0	4	*
water	30:23	0:0	4	psz_tmp
stmts	31:4	39:4	3	
water	31:4	0:0	4	{
decl	32:8	32:47	4	char	*psz_next
op	32:23	0:0	4	=
call	32:25	32:46	5	strchr
arg	32:33	32:40	6	psz_tmp
water	32:33	0:0	7	psz_tmp
arg	32:42	32:46	6	','
water	32:42	0:0	7	','
if	33:8	34:30	4	(psz_next)
cond	33:12	33:12	5	psz_next
water	33:12	0:0	6	psz_next
stmts	34:12	34:30	5	
op	34:12	0:0	6	*
water	34:13	0:0	6	psz_next
op	34:21	0:0	6	++
op	34:24	0:0	6	=
water	34:26	0:0	6	'\0'
water	34:30	0:0	6	;
decl	35:8	35:43	4	const int	i_index
op	35:26	0:0	4	=
call	35:28	35:42	5	atoi
arg	35:34	35:42	6	psz_tmp
water	35:34	0:0	7	psz_tmp
if	36:8	37:37	4	(i_index >= 0 && i_index < COL_MAX * ROW_MAX)
cond	36:12	36:46	5	i_index >= 0 && i_index < COL_MAX * ROW_MAX
water	36:12	0:0	6	i_index
op	36:20	0:0	6	>=
water	36:23	0:0	6	0
op	36:25	0:0	6	&&
water	36:28	0:0	6	i_index
op	36:36	0:0	6	<
water	36:38	0:0	6	COL_MAX
op	36:45	0:0	6	*
water	36:46	0:0	6	ROW_MAX
stmts	37:12	37:37	5	
water	37:12	0:0	6	pb_active
op	37:21	0:0	6	[
water	37:22	0:0	6	i_index
op	37:29	0:0	6	]
op	37:31	0:0	6	=
water	37:33	0:0	6	true
water	37:37	0:0	6	;
water	38:8	0:0	4	psz_tmp
op	38:16	0:0	4	=
water	38:18	0:0	4	psz_next
water	38:26	0:0	4	;
water	39:4	0:0	4	}
call	40:4	40:20	2	free
arg	40:10	40:20	3	psz_state
water	40:10	0:0	4	psz_state
water	40:21	0:0	2	;
decl	42:4	42:20	2	int	i_aspect
op	42:17	0:0	2	=
water	42:19	0:0	2	0
decl	43:4	44:81	2	char	*psz_aspect
op	43:21	0:0	2	=
call	43:23	44:80	3	var_CreateGetNonEmptyString
arg	43:52	43:62	4	p_splitter
water	43:52	0:0	5	p_splitter
arg	44:52	44:80	4	CFG_PREFIX"element-aspect"
water	44:52	0:0	5	CFG_PREFIX
water	44:63	0:0	5	"element-aspect"
if	45:4	58:4	2	(psz_aspect)
cond	45:8	45:8	3	psz_aspect
water	45:8	0:0	4	psz_aspect
stmts	46:4	58:4	3	
water	46:4	0:0	4	{
decl	47:8	47:30	4	int	i_ar_num
water	47:20	0:0	4	,
decl	47:8	47:30	4	int	i_ar_den
if	48:8	52:8	4	(sscanf (psz_aspect ,"%d:%d" ,& i_ar_num ,& i_ar_den ) == 2 && i_ar_num > 0 && i_ar_den > 0)
cond	48:12	49:39	5	sscanf (psz_aspect ,"%d:%d" ,& i_ar_num ,& i_ar_den ) == 2 && i_ar_num > 0 && i_ar_den > 0
call	48:12	48:62	6	sscanf
arg	48:20	48:30	7	psz_aspect
water	48:20	0:0	8	psz_aspect
arg	48:32	48:39	7	"%d:%d"
water	48:32	0:0	8	"%d:%d"
arg	48:41	48:50	7	&i_ar_num
op	48:41	0:0	8	&
water	48:42	0:0	8	i_ar_num
arg	48:52	48:62	7	&i_ar_den
op	48:52	0:0	8	&
water	48:53	0:0	8	i_ar_den
op	48:64	0:0	6	==
water	48:67	0:0	6	2
op	48:69	0:0	6	&&
water	49:12	0:0	6	i_ar_num
op	49:21	0:0	6	>
water	49:23	0:0	6	0
op	49:25	0:0	6	&&
water	49:28	0:0	6	i_ar_den
op	49:37	0:0	6	>
water	49:39	0:0	6	0
stmts	50:8	52:8	5	
water	50:8	0:0	6	{
water	51:12	0:0	6	i_aspect
op	51:21	0:0	6	=
water	51:23	0:0	6	i_ar_num
op	51:32	0:0	6	*
water	51:34	0:0	6	VOUT_ASPECT_FACTOR
op	51:53	0:0	6	/
water	51:55	0:0	6	i_ar_den
water	51:63	0:0	6	;
water	52:8	0:0	6	}
else	53:8	56:8	4
stmts	54:8	56:8	5	
water	54:8	0:0	6	{
call	55:12	55:71	6	msg_Warn
arg	55:22	55:32	7	p_splitter
water	55:22	0:0	8	p_splitter
arg	55:34	55:71	7	"invalid aspect ratio specification"
water	55:34	0:0	8	"invalid aspect ratio specification"
water	55:72	0:0	6	;
water	56:8	0:0	6	}
call	57:8	57:25	4	free
arg	57:14	57:25	5	psz_aspect
water	57:14	0:0	6	psz_aspect
water	57:26	0:0	4	;
water	58:4	0:0	4	}
if	59:4	60:45	2	(i_aspect <= 0)
cond	59:8	59:20	3	i_aspect <= 0
water	59:8	0:0	4	i_aspect
op	59:17	0:0	4	<=
water	59:20	0:0	4	0
stmts	60:8	60:45	3	
water	60:8	0:0	4	i_aspect
op	60:17	0:0	4	=
water	60:19	0:0	4	4
op	60:21	0:0	4	*
water	60:23	0:0	4	VOUT_ASPECT_FACTOR
op	60:42	0:0	4	/
water	60:44	0:0	4	3
water	60:45	0:0	4	;
water	62:4	0:0	2	const
water	62:10	0:0	2	unsigned
water	62:19	0:0	2	w1
op	62:22	0:0	2	=
water	62:24	0:0	2	(
water	62:26	0:0	2	p_splitter
op	62:36	0:0	2	->
water	62:38	0:0	2	fmt
op	62:41	0:0	2	.
water	62:42	0:0	2	i_width
op	62:50	0:0	2	/
water	62:52	0:0	2	p_sys
op	62:57	0:0	2	->
water	62:59	0:0	2	i_col
water	62:65	0:0	2	)
op	62:67	0:0	2	&
water	62:69	0:0	2	~1
water	62:71	0:0	2	;
water	63:4	0:0	2	const
water	63:10	0:0	2	unsigned
water	63:19	0:0	2	h1
op	63:22	0:0	2	=
water	63:24	0:0	2	(
water	63:26	0:0	2	w1
op	63:29	0:0	2	*
water	63:31	0:0	2	VOUT_ASPECT_FACTOR
op	63:50	0:0	2	/
water	63:52	0:0	2	i_aspect
water	63:61	0:0	2	)
op	63:63	0:0	2	&
water	63:65	0:0	2	~1
water	63:67	0:0	2	;
water	64:4	0:0	2	const
water	64:10	0:0	2	unsigned
water	64:19	0:0	2	h2
op	64:22	0:0	2	=
water	64:24	0:0	2	(
water	64:26	0:0	2	p_splitter
op	64:36	0:0	2	->
water	64:38	0:0	2	fmt
op	64:41	0:0	2	.
water	64:42	0:0	2	i_height
op	64:51	0:0	2	/
water	64:53	0:0	2	p_sys
op	64:58	0:0	2	->
water	64:60	0:0	2	i_row
water	64:66	0:0	2	)
op	64:68	0:0	2	&
water	64:70	0:0	2	~1
water	64:72	0:0	2	;
water	65:4	0:0	2	const
water	65:10	0:0	2	unsigned
water	65:19	0:0	2	w2
op	65:22	0:0	2	=
water	65:24	0:0	2	(
water	65:26	0:0	2	h2
op	65:29	0:0	2	*
water	65:31	0:0	2	i_aspect
op	65:40	0:0	2	/
water	65:42	0:0	2	VOUT_ASPECT_FACTOR
water	65:61	0:0	2	)
op	65:63	0:0	2	&
water	65:65	0:0	2	~1
water	65:67	0:0	2	;
water	66:4	0:0	2	unsigned
water	66:13	0:0	2	i_target_width
water	66:27	0:0	2	;
water	67:4	0:0	2	unsigned
water	67:13	0:0	2	i_target_height
water	67:28	0:0	2	;
water	68:4	0:0	2	unsigned
water	68:13	0:0	2	i_hstart
water	68:21	0:0	2	,
water	68:23	0:0	2	i_hend
water	68:29	0:0	2	;
water	69:4	0:0	2	unsigned
water	69:13	0:0	2	i_vstart
water	69:21	0:0	2	,
water	69:23	0:0	2	i_vend
water	69:29	0:0	2	;
decl	70:4	70:25	2	bool	b_vstart_rounded
decl	71:4	71:25	2	bool	b_hstart_rounded
if	72:4	86:4	2	(h1 * p_sys -> i_row < p_splitter -> fmt . i_height)
cond	72:8	72:44	3	h1 * p_sys -> i_row < p_splitter -> fmt . i_height
water	72:8	0:0	4	h1
op	72:11	0:0	4	*
water	72:13	0:0	4	p_sys
op	72:18	0:0	4	->
water	72:20	0:0	4	i_row
op	72:26	0:0	4	<
water	72:28	0:0	4	p_splitter
op	72:38	0:0	4	->
water	72:40	0:0	4	fmt
op	72:43	0:0	4	.
water	72:44	0:0	4	i_height
stmts	73:4	86:4	3	
water	73:4	0:0	4	{
water	74:8	0:0	4	i_target_width
op	74:23	0:0	4	=
water	74:25	0:0	4	w2
water	74:27	0:0	4	;
water	75:8	0:0	4	i_target_height
op	75:24	0:0	4	=
water	75:26	0:0	4	h2
water	75:28	0:0	4	;
water	76:8	0:0	4	i_vstart
op	76:17	0:0	4	=
water	76:19	0:0	4	0
water	76:20	0:0	4	;
water	77:8	0:0	4	b_vstart_rounded
op	77:25	0:0	4	=
water	77:27	0:0	4	false
water	77:32	0:0	4	;
water	78:8	0:0	4	i_vend
op	78:15	0:0	4	=
water	78:17	0:0	4	p_splitter
op	78:27	0:0	4	->
water	78:29	0:0	4	fmt
op	78:32	0:0	4	.
water	78:33	0:0	4	i_height
water	78:41	0:0	4	;
water	79:8	0:0	4	unsigned
water	79:17	0:0	4	i_tmp
op	79:23	0:0	4	=
water	79:25	0:0	4	i_target_width
op	79:40	0:0	4	*
water	79:42	0:0	4	p_sys
op	79:47	0:0	4	->
water	79:49	0:0	4	i_col
water	79:54	0:0	4	;
while	80:8	81:33	4	(i_tmp < p_splitter -> fmt . i_width)
cond	80:15	80:39	5	i_tmp < p_splitter -> fmt . i_width
water	80:15	0:0	6	i_tmp
op	80:21	0:0	6	<
water	80:23	0:0	6	p_splitter
op	80:33	0:0	6	->
water	80:35	0:0	6	fmt
op	80:38	0:0	6	.
water	80:39	0:0	6	i_width
stmts	81:12	81:33	5	
water	81:12	0:0	6	i_tmp
op	81:18	0:0	6	+=
water	81:21	0:0	6	p_sys
op	81:26	0:0	6	->
water	81:28	0:0	6	i_col
water	81:33	0:0	6	;
water	82:8	0:0	4	i_hstart
op	82:17	0:0	4	=
water	82:19	0:0	4	(
water	82:20	0:0	4	(
water	82:22	0:0	4	i_tmp
op	82:28	0:0	4	-
water	82:30	0:0	4	p_splitter
op	82:40	0:0	4	->
water	82:42	0:0	4	fmt
op	82:45	0:0	4	.
water	82:46	0:0	4	i_width
water	82:54	0:0	4	)
op	82:56	0:0	4	/
water	82:58	0:0	4	2
water	82:59	0:0	4	)
op	82:60	0:0	4	&
water	82:61	0:0	4	~1
water	82:63	0:0	4	;
water	83:8	0:0	4	b_hstart_rounded
op	83:26	0:0	4	=
water	83:28	0:0	4	(
water	83:30	0:0	4	(
water	83:32	0:0	4	i_tmp
op	83:38	0:0	4	-
water	83:40	0:0	4	p_splitter
op	83:50	0:0	4	->
water	83:52	0:0	4	fmt
op	83:55	0:0	4	.
water	83:56	0:0	4	i_width
water	83:64	0:0	4	)
op	83:66	0:0	4	%
water	83:68	0:0	4	2
water	83:70	0:0	4	)
op	83:72	0:0	4	||
water	84:12	0:0	4	(
water	84:14	0:0	4	(
water	84:16	0:0	4	(
water	84:18	0:0	4	i_tmp
op	84:24	0:0	4	-
water	84:26	0:0	4	p_splitter
op	84:36	0:0	4	->
water	84:38	0:0	4	fmt
op	84:41	0:0	4	.
water	84:42	0:0	4	i_width
water	84:50	0:0	4	)
op	84:52	0:0	4	/
water	84:54	0:0	4	2
water	84:56	0:0	4	)
op	84:58	0:0	4	&
water	84:60	0:0	4	1
water	84:62	0:0	4	)
water	84:63	0:0	4	;
water	85:8	0:0	4	i_hend
op	85:15	0:0	4	=
water	85:17	0:0	4	i_hstart
op	85:26	0:0	4	+
water	85:28	0:0	4	p_splitter
op	85:38	0:0	4	->
water	85:40	0:0	4	fmt
op	85:43	0:0	4	.
water	85:44	0:0	4	i_width
water	85:51	0:0	4	;
water	86:4	0:0	4	}
else	87:4	101:4	2
stmts	88:4	101:4	3	
water	88:4	0:0	4	{
water	89:8	0:0	4	i_target_height
op	89:24	0:0	4	=
water	89:26	0:0	4	h1
water	89:28	0:0	4	;
water	90:8	0:0	4	i_target_width
op	90:23	0:0	4	=
water	90:25	0:0	4	w1
water	90:27	0:0	4	;
water	91:8	0:0	4	i_hstart
op	91:17	0:0	4	=
water	91:19	0:0	4	0
water	91:20	0:0	4	;
water	92:8	0:0	4	b_hstart_rounded
op	92:25	0:0	4	=
water	92:27	0:0	4	false
water	92:32	0:0	4	;
water	93:8	0:0	4	i_hend
op	93:15	0:0	4	=
water	93:17	0:0	4	p_splitter
op	93:27	0:0	4	->
water	93:29	0:0	4	fmt
op	93:32	0:0	4	.
water	93:33	0:0	4	i_width
water	93:40	0:0	4	;
water	94:8	0:0	4	unsigned
water	94:17	0:0	4	i_tmp
op	94:23	0:0	4	=
water	94:25	0:0	4	i_target_height
op	94:41	0:0	4	*
water	94:43	0:0	4	p_sys
op	94:48	0:0	4	->
water	94:50	0:0	4	i_row
water	94:55	0:0	4	;
while	95:8	96:33	4	(i_tmp < p_splitter -> fmt . i_height)
cond	95:15	95:39	5	i_tmp < p_splitter -> fmt . i_height
water	95:15	0:0	6	i_tmp
op	95:21	0:0	6	<
water	95:23	0:0	6	p_splitter
op	95:33	0:0	6	->
water	95:35	0:0	6	fmt
op	95:38	0:0	6	.
water	95:39	0:0	6	i_height
stmts	96:12	96:33	5	
water	96:12	0:0	6	i_tmp
op	96:18	0:0	6	+=
water	96:21	0:0	6	p_sys
op	96:26	0:0	6	->
water	96:28	0:0	6	i_row
water	96:33	0:0	6	;
water	97:8	0:0	4	i_vstart
op	97:17	0:0	4	=
water	97:19	0:0	4	(
water	97:21	0:0	4	(
water	97:23	0:0	4	i_tmp
op	97:29	0:0	4	-
water	97:31	0:0	4	p_splitter
op	97:41	0:0	4	->
water	97:43	0:0	4	fmt
op	97:46	0:0	4	.
water	97:47	0:0	4	i_height
water	97:56	0:0	4	)
op	97:58	0:0	4	/
water	97:60	0:0	4	2
water	97:62	0:0	4	)
op	97:64	0:0	4	&
water	97:66	0:0	4	~1
water	97:68	0:0	4	;
water	98:8	0:0	4	b_vstart_rounded
op	98:26	0:0	4	=
water	98:28	0:0	4	(
water	98:30	0:0	4	(
water	98:32	0:0	4	i_tmp
op	98:38	0:0	4	-
water	98:40	0:0	4	p_splitter
op	98:50	0:0	4	->
water	98:52	0:0	4	fmt
op	98:55	0:0	4	.
water	98:56	0:0	4	i_height
water	98:65	0:0	4	)
op	98:67	0:0	4	%
water	98:69	0:0	4	2
water	98:71	0:0	4	)
op	98:73	0:0	4	||
water	99:12	0:0	4	(
water	99:14	0:0	4	(
water	99:16	0:0	4	(
water	99:18	0:0	4	i_tmp
op	99:24	0:0	4	-
water	99:26	0:0	4	p_splitter
op	99:36	0:0	4	->
water	99:38	0:0	4	fmt
op	99:41	0:0	4	.
water	99:42	0:0	4	i_height
water	99:51	0:0	4	)
op	99:53	0:0	4	/
water	99:55	0:0	4	2
water	99:57	0:0	4	)
op	99:59	0:0	4	&
water	99:61	0:0	4	1
water	99:63	0:0	4	)
water	99:64	0:0	4	;
water	100:8	0:0	4	i_vend
op	100:15	0:0	4	=
water	100:17	0:0	4	i_vstart
op	100:26	0:0	4	+
water	100:28	0:0	4	p_splitter
op	100:38	0:0	4	->
water	100:40	0:0	4	fmt
op	100:43	0:0	4	.
water	100:44	0:0	4	i_height
water	100:52	0:0	4	;
water	101:4	0:0	4	}
call	102:4	102:84	2	msg_Dbg
arg	102:13	102:23	3	p_splitter
water	102:13	0:0	4	p_splitter
arg	102:25	102:50	3	"target resolution %dx%d"
water	102:25	0:0	4	"target resolution %dx%d"
arg	102:52	102:66	3	i_target_width
water	102:52	0:0	4	i_target_width
arg	102:68	102:84	3	i_target_height
water	102:68	0:0	4	i_target_height
water	102:85	0:0	2	;
call	103:4	103:90	2	msg_Dbg
arg	103:13	103:23	3	p_splitter
water	103:13	0:0	4	p_splitter
arg	103:25	103:56	3	"target window (%d,%d)-(%d,%d)"
water	103:25	0:0	4	"target window (%d,%d)-(%d,%d)"
arg	103:58	103:66	3	i_hstart
water	103:58	0:0	4	i_hstart
arg	103:67	103:75	3	i_vstart
water	103:67	0:0	4	i_vstart
arg	103:76	103:82	3	i_hend
water	103:76	0:0	4	i_hend
arg	103:83	103:90	3	i_vend
water	103:83	0:0	4	i_vend
water	103:91	0:0	2	;
decl	104:4	104:20	2	int	i_active
op	104:17	0:0	2	=
water	104:19	0:0	2	0
for	105:4	180:4	2	( int y = 0 ,i_top = 0 ;y < p_sys -> i_row;y ++)
forinit	0:0	105:29	3	 int y = 0 ,i_top = 0 ;
decl	105:9	105:29	4	int	y
op	105:15	0:0	4	=
water	105:17	0:0	4	0
water	105:18	0:0	4	,
decl	105:9	105:29	4	int	i_top
op	105:26	0:0	4	=
water	105:28	0:0	4	0
cond	105:31	105:42	3	y < p_sys -> i_row
water	105:31	0:0	4	y
op	105:33	0:0	4	<
water	105:35	0:0	4	p_sys
op	105:40	0:0	4	->
water	105:42	0:0	4	i_row
forexpr	105:49	105:50	3	y ++
water	105:49	0:0	4	y
op	105:50	0:0	4	++
stmts	106:4	180:4	3	
water	106:4	0:0	4	{
decl	108:8	108:24	4	int	i_height
op	108:21	0:0	4	=
water	108:23	0:0	4	0
decl	109:8	109:24	4	int	i_halign
op	109:21	0:0	4	=
water	109:23	0:0	4	0
if	110:8	114:8	4	(y * i_target_height >= i_vstart && ( y + 1 ) * i_target_height <= i_vend)
cond	110:12	111:43	5	y * i_target_height >= i_vstart && ( y + 1 ) * i_target_height <= i_vend
water	110:12	0:0	6	y
op	110:14	0:0	6	*
water	110:16	0:0	6	i_target_height
op	110:32	0:0	6	>=
water	110:35	0:0	6	i_vstart
op	110:44	0:0	6	&&
water	111:12	0:0	6	(
water	111:14	0:0	6	y
op	111:16	0:0	6	+
water	111:18	0:0	6	1
water	111:20	0:0	6	)
op	111:22	0:0	6	*
water	111:24	0:0	6	i_target_height
op	111:40	0:0	6	<=
water	111:43	0:0	6	i_vend
stmts	112:8	114:8	5	
water	112:8	0:0	6	{
water	113:12	0:0	6	i_height
op	113:21	0:0	6	=
water	113:23	0:0	6	i_target_height
water	113:38	0:0	6	;
water	114:8	0:0	6	}
else	115:8	119:8	4
stmts	115:13	119:8	5	
if	115:13	119:8	6	(( y + 1 ) * i_target_height < i_vstart || ( y * i_target_height ) > i_vend)
cond	115:17	116:43	7	( y + 1 ) * i_target_height < i_vstart || ( y * i_target_height ) > i_vend
water	115:17	0:0	8	(
water	115:19	0:0	8	y
op	115:21	0:0	8	+
water	115:23	0:0	8	1
water	115:25	0:0	8	)
op	115:27	0:0	8	*
water	115:29	0:0	8	i_target_height
op	115:45	0:0	8	<
water	115:47	0:0	8	i_vstart
op	115:56	0:0	8	||
water	116:17	0:0	8	(
water	116:19	0:0	8	y
op	116:21	0:0	8	*
water	116:23	0:0	8	i_target_height
water	116:39	0:0	8	)
op	116:41	0:0	8	>
water	116:43	0:0	8	i_vend
stmts	117:8	119:8	7	
water	117:8	0:0	8	{
water	118:12	0:0	8	i_height
op	118:21	0:0	8	=
water	118:23	0:0	8	0
water	118:24	0:0	8	;
water	119:8	0:0	8	}
else	120:8	133:8	4
stmts	121:8	133:8	5	
water	121:8	0:0	6	{
water	122:12	0:0	6	i_height
op	122:21	0:0	6	=
water	122:23	0:0	6	(
water	122:25	0:0	6	i_target_height
op	122:41	0:0	6	-
water	123:25	0:0	6	i_vstart
op	123:33	0:0	6	%
water	123:34	0:0	6	i_target_height
water	123:50	0:0	6	)
water	123:51	0:0	6	;
if	124:12	128:12	6	(y >= ( p_sys -> i_row / 2 ))
cond	124:17	124:41	7	y >= ( p_sys -> i_row / 2 )
water	124:17	0:0	8	y
op	124:19	0:0	8	>=
water	124:22	0:0	8	(
water	124:24	0:0	8	p_sys
op	124:29	0:0	8	->
water	124:31	0:0	8	i_row
op	124:37	0:0	8	/
water	124:39	0:0	8	2
water	124:41	0:0	8	)
stmts	125:12	128:12	7	
water	125:12	0:0	8	{
water	126:16	0:0	8	i_halign
op	126:25	0:0	8	=
water	126:27	0:0	8	VOUT_ALIGN_TOP
water	126:41	0:0	8	;
water	127:16	0:0	8	i_height
op	127:25	0:0	8	-=
water	127:28	0:0	8	b_vstart_rounded
water	127:45	0:0	8	?
water	127:47	0:0	8	2
water	127:48	0:0	8	:
water	127:50	0:0	8	0
water	127:51	0:0	8	;
water	128:12	0:0	8	}
else	129:12	132:12	6
stmts	130:12	132:12	7	
water	130:12	0:0	8	{
water	131:16	0:0	8	i_halign
op	131:25	0:0	8	=
water	131:27	0:0	8	VOUT_ALIGN_BOTTOM
water	131:44	0:0	8	;
water	132:12	0:0	8	}
water	133:8	0:0	6	}
for	135:8	178:8	4	( int x = 0 ,i_left = 0 ;x < p_sys -> i_col;x ++)
forinit	0:0	135:34	5	 int x = 0 ,i_left = 0 ;
decl	135:13	135:34	6	int	x
op	135:19	0:0	6	=
water	135:21	0:0	6	0
water	135:22	0:0	6	,
decl	135:13	135:34	6	int	i_left
op	135:31	0:0	6	=
water	135:33	0:0	6	0
cond	135:36	135:47	5	x < p_sys -> i_col
water	135:36	0:0	6	x
op	135:38	0:0	6	<
water	135:40	0:0	6	p_sys
op	135:45	0:0	6	->
water	135:47	0:0	6	i_col
forexpr	135:54	135:55	5	x ++
water	135:54	0:0	6	x
op	135:55	0:0	6	++
stmts	136:8	178:8	5	
water	136:8	0:0	6	{
decl	137:12	137:61	6	wall_output_t	*p_output
op	137:36	0:0	6	=
op	137:38	0:0	6	&
water	137:39	0:0	6	p_sys
op	137:44	0:0	6	->
water	137:46	0:0	6	pp_output
op	137:55	0:0	6	[
water	137:56	0:0	6	x
op	137:57	0:0	6	]
op	137:58	0:0	6	[
water	137:59	0:0	6	y
op	137:60	0:0	6	]
decl	139:12	139:23	6	int	i_width
decl	140:12	140:28	6	int	i_valign
op	140:25	0:0	6	=
water	140:27	0:0	6	0
if	141:12	145:12	6	(x * i_target_width >= i_hstart && ( x + 1 ) * i_target_width <= i_hend)
cond	141:16	142:40	7	x * i_target_width >= i_hstart && ( x + 1 ) * i_target_width <= i_hend
water	141:16	0:0	8	x
op	141:17	0:0	8	*
water	141:18	0:0	8	i_target_width
op	141:33	0:0	8	>=
water	141:36	0:0	8	i_hstart
op	141:45	0:0	8	&&
water	142:16	0:0	8	(
water	142:17	0:0	8	x
op	142:18	0:0	8	+
water	142:19	0:0	8	1
water	142:20	0:0	8	)
op	142:21	0:0	8	*
water	142:22	0:0	8	i_target_width
op	142:37	0:0	8	<=
water	142:40	0:0	8	i_hend
stmts	143:12	145:12	7	
water	143:12	0:0	8	{
water	144:16	0:0	8	i_width
op	144:24	0:0	8	=
water	144:26	0:0	8	i_target_width
water	144:40	0:0	8	;
water	145:12	0:0	8	}
else	146:12	150:12	6
stmts	146:17	150:12	7	
if	146:17	150:12	8	(( x + 1 ) * i_target_width < i_hstart || ( x * i_target_width ) > i_hend)
cond	146:21	147:46	9	( x + 1 ) * i_target_width < i_hstart || ( x * i_target_width ) > i_hend
water	146:21	0:0	10	(
water	146:23	0:0	10	x
op	146:25	0:0	10	+
water	146:27	0:0	10	1
water	146:29	0:0	10	)
op	146:31	0:0	10	*
water	146:33	0:0	10	i_target_width
op	146:48	0:0	10	<
water	146:50	0:0	10	i_hstart
op	146:59	0:0	10	||
water	147:21	0:0	10	(
water	147:23	0:0	10	x
op	147:25	0:0	10	*
water	147:27	0:0	10	i_target_width
water	147:42	0:0	10	)
op	147:44	0:0	10	>
water	147:46	0:0	10	i_hend
stmts	148:12	150:12	9	
water	148:12	0:0	10	{
water	149:16	0:0	10	i_width
op	149:24	0:0	10	=
water	149:26	0:0	10	0
water	149:27	0:0	10	;
water	150:12	0:0	10	}
else	151:12	163:12	6
stmts	152:12	163:12	7	
water	152:12	0:0	8	{
water	153:16	0:0	8	i_width
op	153:24	0:0	8	=
water	153:26	0:0	8	(
water	153:28	0:0	8	i_target_width
op	153:43	0:0	8	-
water	153:45	0:0	8	i_hstart
op	153:54	0:0	8	%
water	153:56	0:0	8	i_target_width
water	153:71	0:0	8	)
water	153:72	0:0	8	;
if	154:16	158:16	8	(x >= ( p_sys -> i_col / 2 ))
cond	154:20	154:44	9	x >= ( p_sys -> i_col / 2 )
water	154:20	0:0	10	x
op	154:22	0:0	10	>=
water	154:25	0:0	10	(
water	154:27	0:0	10	p_sys
op	154:32	0:0	10	->
water	154:34	0:0	10	i_col
op	154:40	0:0	10	/
water	154:42	0:0	10	2
water	154:44	0:0	10	)
stmts	155:16	158:16	9	
water	155:16	0:0	10	{
water	156:20	0:0	10	i_valign
op	156:29	0:0	10	=
water	156:31	0:0	10	VOUT_ALIGN_LEFT
water	156:46	0:0	10	;
water	157:20	0:0	10	i_width
op	157:28	0:0	10	-=
water	157:31	0:0	10	b_hstart_rounded
water	157:48	0:0	10	?
water	157:50	0:0	10	2
water	157:51	0:0	10	:
water	157:53	0:0	10	0
water	157:54	0:0	10	;
water	158:16	0:0	10	}
else	159:16	162:16	8
stmts	160:16	162:16	9	
water	160:16	0:0	10	{
water	161:20	0:0	10	i_valign
op	161:29	0:0	10	=
water	161:31	0:0	10	VOUT_ALIGN_RIGHT
water	161:47	0:0	10	;
water	162:16	0:0	10	}
water	163:12	0:0	8	}
water	165:12	0:0	6	p_output
op	165:20	0:0	6	->
water	165:22	0:0	6	b_active
op	165:31	0:0	6	=
water	165:33	0:0	6	pb_active
op	165:42	0:0	6	[
water	165:43	0:0	6	y
op	165:45	0:0	6	*
water	165:47	0:0	6	p_sys
op	165:52	0:0	6	->
water	165:54	0:0	6	i_col
op	165:60	0:0	6	+
water	165:62	0:0	6	x
op	165:63	0:0	6	]
op	165:65	0:0	6	&&
water	166:33	0:0	6	i_height
op	166:42	0:0	6	>
water	166:44	0:0	6	0
op	166:46	0:0	6	&&
water	166:49	0:0	6	i_width
op	166:57	0:0	6	>
water	166:59	0:0	6	0
water	166:60	0:0	6	;
water	167:12	0:0	6	p_output
op	167:20	0:0	6	->
water	167:22	0:0	6	i_output
op	167:31	0:0	6	=
op	167:33	0:0	6	-
water	167:34	0:0	6	1
water	167:35	0:0	6	;
water	168:12	0:0	6	p_output
op	168:20	0:0	6	->
water	168:22	0:0	6	i_align
op	168:30	0:0	6	=
water	168:32	0:0	6	i_valign
op	168:41	0:0	6	|
water	168:43	0:0	6	i_halign
water	168:51	0:0	6	;
water	169:12	0:0	6	p_output
op	169:20	0:0	6	->
water	169:22	0:0	6	i_width
op	169:30	0:0	6	=
water	169:32	0:0	6	i_width
water	169:39	0:0	6	;
water	170:12	0:0	6	p_output
op	170:20	0:0	6	->
water	170:22	0:0	6	i_height
op	170:31	0:0	6	=
water	170:33	0:0	6	i_height
water	170:41	0:0	6	;
water	171:12	0:0	6	p_output
op	171:20	0:0	6	->
water	171:22	0:0	6	i_left
op	171:29	0:0	6	=
water	171:31	0:0	6	i_left
water	171:37	0:0	6	;
water	172:12	0:0	6	p_output
op	172:20	0:0	6	->
water	172:22	0:0	6	i_top
op	172:28	0:0	6	=
water	172:30	0:0	6	i_top
water	172:35	0:0	6	;
call	173:12	174:60	6	msg_Dbg
arg	173:21	173:31	7	p_splitter
water	173:21	0:0	8	p_splitter
arg	173:33	173:67	7	"window %dx%d at %d:%d size %dx%d"
water	173:33	0:0	8	"window %dx%d at %d:%d size %dx%d"
arg	174:21	174:22	7	x
water	174:21	0:0	8	x
arg	174:24	174:25	7	y
water	174:24	0:0	8	y
arg	174:27	174:33	7	i_left
water	174:27	0:0	8	i_left
arg	174:35	174:40	7	i_top
water	174:35	0:0	8	i_top
arg	174:42	174:49	7	i_width
water	174:42	0:0	8	i_width
arg	174:51	174:60	7	i_height
water	174:51	0:0	8	i_height
water	174:61	0:0	6	;
if	175:12	176:26	6	(p_output -> b_active)
cond	175:16	175:26	7	p_output -> b_active
water	175:16	0:0	8	p_output
op	175:24	0:0	8	->
water	175:26	0:0	8	b_active
stmts	176:16	176:26	7	
water	176:16	0:0	8	i_active
op	176:24	0:0	8	++
water	176:26	0:0	8	;
water	177:12	0:0	6	i_left
op	177:19	0:0	6	+=
water	177:22	0:0	6	i_width
water	177:29	0:0	6	;
water	178:8	0:0	6	}
water	179:8	0:0	4	i_top
op	179:14	0:0	4	+=
water	179:17	0:0	4	i_height
water	179:25	0:0	4	;
water	180:4	0:0	4	}
if	181:4	186:4	2	(i_active <= 0)
cond	181:8	181:20	3	i_active <= 0
water	181:8	0:0	4	i_active
op	181:17	0:0	4	<=
water	181:20	0:0	4	0
stmts	182:4	186:4	3	
water	182:4	0:0	4	{
call	183:8	183:54	4	msg_Err
arg	183:17	183:27	5	p_splitter
water	183:17	0:0	6	p_splitter
arg	183:29	183:54	5	"No active video output"
water	183:29	0:0	6	"No active video output"
water	183:55	0:0	4	;
call	184:8	184:20	4	free
arg	184:14	184:20	5	p_sys
water	184:14	0:0	6	p_sys
water	184:21	0:0	4	;
return	185:8	185:27	4	VLC_EGENERIC
water	185:15	0:0	5	VLC_EGENERIC
water	186:4	0:0	4	}
water	188:4	0:0	2	p_splitter
op	188:14	0:0	2	->
water	188:16	0:0	2	i_output
op	188:25	0:0	2	=
water	188:27	0:0	2	i_active
water	188:35	0:0	2	;
water	189:4	0:0	2	p_splitter
op	189:14	0:0	2	->
water	189:16	0:0	2	p_output
op	189:25	0:0	2	=
call	189:27	190:65	2	calloc
arg	189:35	189:55	3	p_splitter->i_output
water	189:35	0:0	4	p_splitter
op	189:45	0:0	4	->
water	189:47	0:0	4	i_output
arg	190:35	190:65	3	sizeof(*p_splitter->p_output)
op	190:35	0:0	4	sizeof
water	190:41	0:0	4	(
op	190:42	0:0	4	*
water	190:43	0:0	4	p_splitter
op	190:53	0:0	4	->
water	190:55	0:0	4	p_output
water	190:63	0:0	4	)
water	190:66	0:0	2	;
if	191:4	195:4	2	(! p_splitter -> p_output)
cond	191:8	191:21	3	! p_splitter -> p_output
op	191:8	0:0	4	!
water	191:9	0:0	4	p_splitter
op	191:19	0:0	4	->
water	191:21	0:0	4	p_output
stmts	192:4	195:4	3	
water	192:4	0:0	4	{
call	193:8	193:20	4	free
arg	193:14	193:20	5	p_sys
water	193:14	0:0	6	p_sys
water	193:21	0:0	4	;
return	194:8	194:25	4	VLC_ENOMEM
water	194:15	0:0	5	VLC_ENOMEM
water	195:4	0:0	4	}
for	196:4	217:4	2	( int y = 0 ,i_output = 0 ;y < p_sys -> i_row;y ++)
forinit	0:0	196:32	3	 int y = 0 ,i_output = 0 ;
decl	196:9	196:32	4	int	y
op	196:15	0:0	4	=
water	196:17	0:0	4	0
water	196:18	0:0	4	,
decl	196:9	196:32	4	int	i_output
op	196:29	0:0	4	=
water	196:31	0:0	4	0
cond	196:34	196:45	3	y < p_sys -> i_row
water	196:34	0:0	4	y
op	196:36	0:0	4	<
water	196:38	0:0	4	p_sys
op	196:43	0:0	4	->
water	196:45	0:0	4	i_row
forexpr	196:52	196:53	3	y ++
water	196:52	0:0	4	y
op	196:53	0:0	4	++
stmts	197:4	217:4	3	
water	197:4	0:0	4	{
for	198:8	216:8	4	( int x = 0 ;x < p_sys -> i_col;x ++)
forinit	0:0	198:22	5	 int x = 0 ;
decl	198:13	198:22	6	int	x
op	198:19	0:0	6	=
water	198:21	0:0	6	0
cond	198:24	198:35	5	x < p_sys -> i_col
water	198:24	0:0	6	x
op	198:26	0:0	6	<
water	198:28	0:0	6	p_sys
op	198:33	0:0	6	->
water	198:35	0:0	6	i_col
forexpr	198:42	198:43	5	x ++
water	198:42	0:0	6	x
op	198:43	0:0	6	++
stmts	199:8	216:8	5	
water	199:8	0:0	6	{
decl	200:12	200:61	6	wall_output_t	*p_output
op	200:36	0:0	6	=
op	200:38	0:0	6	&
water	200:39	0:0	6	p_sys
op	200:44	0:0	6	->
water	200:46	0:0	6	pp_output
op	200:55	0:0	6	[
water	200:56	0:0	6	x
op	200:57	0:0	6	]
op	200:58	0:0	6	[
water	200:59	0:0	6	y
op	200:60	0:0	6	]
if	201:12	202:24	6	(! p_output -> b_active)
cond	201:16	201:27	7	! p_output -> b_active
op	201:16	0:0	8	!
water	201:17	0:0	8	p_output
op	201:25	0:0	8	->
water	201:27	0:0	8	b_active
stmts	202:16	202:24	7	
continue	202:16	202:24	8	
water	203:12	0:0	6	p_output
op	203:20	0:0	6	->
water	203:22	0:0	6	i_output
op	203:31	0:0	6	=
water	203:33	0:0	6	i_output
op	203:41	0:0	6	++
water	203:43	0:0	6	;
decl	204:12	204:86	6	video_splitter_output_t	*p_cfg
op	204:43	0:0	6	=
op	204:45	0:0	6	&
water	204:46	0:0	6	p_splitter
op	204:56	0:0	6	->
water	204:58	0:0	6	p_output
op	204:66	0:0	6	[
water	204:67	0:0	6	p_output
op	204:75	0:0	6	->
water	204:77	0:0	6	i_output
op	204:85	0:0	6	]
call	205:12	205:61	6	video_format_Copy
arg	205:31	205:42	7	&p_cfg->fmt
op	205:31	0:0	8	&
water	205:32	0:0	8	p_cfg
op	205:37	0:0	8	->
water	205:39	0:0	8	fmt
arg	205:44	205:61	7	&p_splitter->fmt
op	205:44	0:0	8	&
water	205:45	0:0	8	p_splitter
op	205:55	0:0	8	->
water	205:57	0:0	8	fmt
water	205:62	0:0	6	;
water	206:12	0:0	6	p_cfg
op	206:17	0:0	6	->
water	206:19	0:0	6	fmt
op	206:22	0:0	6	.
water	206:23	0:0	6	i_visible_width
op	206:40	0:0	6	=
water	207:12	0:0	6	p_cfg
op	207:17	0:0	6	->
water	207:19	0:0	6	fmt
op	207:22	0:0	6	.
water	207:23	0:0	6	i_width
op	207:40	0:0	6	=
water	207:42	0:0	6	p_output
op	207:50	0:0	6	->
water	207:52	0:0	6	i_width
water	207:59	0:0	6	;
water	208:12	0:0	6	p_cfg
op	208:17	0:0	6	->
water	208:19	0:0	6	fmt
op	208:22	0:0	6	.
water	208:23	0:0	6	i_visible_height
op	208:40	0:0	6	=
water	209:12	0:0	6	p_cfg
op	209:17	0:0	6	->
water	209:19	0:0	6	fmt
op	209:22	0:0	6	.
water	209:23	0:0	6	i_height
op	209:40	0:0	6	=
water	209:42	0:0	6	p_output
op	209:50	0:0	6	->
water	209:52	0:0	6	i_height
water	209:60	0:0	6	;
water	210:12	0:0	6	p_cfg
op	210:17	0:0	6	->
water	210:19	0:0	6	fmt
op	210:22	0:0	6	.
water	210:23	0:0	6	i_sar_num
op	210:40	0:0	6	=
water	210:42	0:0	6	(
water	210:43	0:0	6	int64_t
water	210:50	0:0	6	)
water	210:51	0:0	6	i_aspect
op	210:60	0:0	6	*
water	210:62	0:0	6	i_target_height
water	210:77	0:0	6	;
water	211:12	0:0	6	p_cfg
op	211:17	0:0	6	->
water	211:19	0:0	6	fmt
op	211:22	0:0	6	.
water	211:23	0:0	6	i_sar_den
op	211:40	0:0	6	=
water	211:42	0:0	6	VOUT_ASPECT_FACTOR
op	211:61	0:0	6	*
water	211:63	0:0	6	i_target_width
water	211:77	0:0	6	;
water	212:12	0:0	6	p_cfg
op	212:17	0:0	6	->
water	212:19	0:0	6	window
op	212:25	0:0	6	.
water	212:26	0:0	6	i_x
op	212:34	0:0	6	=
water	212:36	0:0	6	p_output
op	212:44	0:0	6	->
water	212:46	0:0	6	i_left
water	212:52	0:0	6	;
water	213:12	0:0	6	p_cfg
op	213:17	0:0	6	->
water	213:19	0:0	6	window
op	213:25	0:0	6	.
water	213:26	0:0	6	i_y
op	213:34	0:0	6	=
water	213:36	0:0	6	p_output
op	213:44	0:0	6	->
water	213:46	0:0	6	i_top
water	213:51	0:0	6	;
water	214:12	0:0	6	p_cfg
op	214:17	0:0	6	->
water	214:19	0:0	6	window
op	214:25	0:0	6	.
water	214:26	0:0	6	i_align
op	214:34	0:0	6	=
water	214:36	0:0	6	p_output
op	214:44	0:0	6	->
water	214:46	0:0	6	i_align
water	214:53	0:0	6	;
water	215:12	0:0	6	p_cfg
op	215:17	0:0	6	->
water	215:19	0:0	6	psz_module
op	215:30	0:0	6	=
water	215:32	0:0	6	NULL
water	215:36	0:0	6	;
water	216:8	0:0	6	}
water	217:4	0:0	4	}
water	219:4	0:0	2	p_splitter
op	219:14	0:0	2	->
water	219:16	0:0	2	pf_filter
op	219:26	0:0	2	=
water	219:28	0:0	2	Filter
water	219:34	0:0	2	;
water	220:4	0:0	2	p_splitter
op	220:14	0:0	2	->
water	220:16	0:0	2	pf_mouse
op	220:25	0:0	2	=
water	220:27	0:0	2	Mouse
water	220:32	0:0	2	;
return	221:4	221:22	2	VLC_SUCCESS
water	221:11	0:0	3	VLC_SUCCESS
