func	2:0	45:0	0	static block_t *	DecodeBlock
params	2:27	0:0	1	
param	2:29	2:45	2	decoder_t *	p_dec
param	2:47	2:66	2	block_t * *	pp_block
stmnts	0:0	44:15	1	
decl	4:4	4:39	2	decoder_sys_t	*p_sys
op	4:25	0:0	2	=
water	4:27	0:0	2	p_dec
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
if	5:4	6:19	2	(pp_block == NULL)
cond	5:8	5:20	3	pp_block == NULL
water	5:8	0:0	4	pp_block
op	5:17	0:0	4	==
water	5:20	0:0	4	NULL
stmts	6:8	6:19	3	
return	6:8	6:19	4	NULL
water	6:15	0:0	5	NULL
decl	7:4	7:32	2	block_t	*p_block
op	7:21	0:0	2	=
op	7:23	0:0	2	*
water	7:24	0:0	2	pp_block
if	8:4	9:19	2	(p_block == NULL)
cond	8:8	8:19	3	p_block == NULL
water	8:8	0:0	4	p_block
op	8:16	0:0	4	==
water	8:19	0:0	4	NULL
stmts	9:8	9:19	3	
return	9:8	9:19	4	NULL
water	9:15	0:0	5	NULL
op	10:4	0:0	2	*
water	10:5	0:0	2	pp_block
op	10:14	0:0	2	=
water	10:16	0:0	2	NULL
water	10:20	0:0	2	;
if	11:4	15:4	2	(p_block -> i_pts > VLC_TS_INVALID && p_block -> i_pts !=date_Get (& p_sys -> end_date ))
cond	11:8	12:53	3	p_block -> i_pts > VLC_TS_INVALID && p_block -> i_pts !=date_Get (& p_sys -> end_date )
water	11:8	0:0	4	p_block
op	11:15	0:0	4	->
water	11:17	0:0	4	i_pts
op	11:23	0:0	4	>
water	11:25	0:0	4	VLC_TS_INVALID
op	11:40	0:0	4	&&
water	12:8	0:0	4	p_block
op	12:15	0:0	4	->
water	12:17	0:0	4	i_pts
op	12:23	0:0	4	!=
call	12:26	12:53	4	date_Get
arg	12:36	12:53	5	&p_sys->end_date
op	12:36	0:0	6	&
water	12:37	0:0	6	p_sys
op	12:42	0:0	6	->
water	12:44	0:0	6	end_date
stmts	13:4	15:4	3	
water	13:4	0:0	4	{
call	14:8	14:51	4	date_Set
arg	14:18	14:34	5	&p_sys->end_date
op	14:18	0:0	6	&
water	14:19	0:0	6	p_sys
op	14:24	0:0	6	->
water	14:26	0:0	6	end_date
arg	14:36	14:51	5	p_block->i_pts
water	14:36	0:0	6	p_block
op	14:43	0:0	6	->
water	14:45	0:0	6	i_pts
water	14:52	0:0	4	;
water	15:4	0:0	4	}
else	16:4	18:17	2
stmts	16:9	18:17	3	
if	16:9	18:17	4	(!date_Get (& p_sys -> end_date ))
cond	16:13	16:41	5	!date_Get (& p_sys -> end_date )
op	16:13	0:0	6	!
call	16:14	16:41	6	date_Get
arg	16:24	16:41	7	&p_sys->end_date
op	16:24	0:0	8	&
water	16:25	0:0	8	p_sys
op	16:30	0:0	8	->
water	16:32	0:0	8	end_date
stmts	18:8	18:17	5	
goto	18:8	18:17	6	skip
water	18:13	0:0	7	skip
water	19:4	0:0	2	unsigned
water	19:13	0:0	2	samples
op	19:21	0:0	2	=
water	19:23	0:0	2	(
water	19:24	0:0	2	8
op	19:26	0:0	2	*
water	19:28	0:0	2	p_block
op	19:35	0:0	2	->
water	19:37	0:0	2	i_buffer
water	19:45	0:0	2	)
op	19:47	0:0	2	/
water	19:49	0:0	2	p_sys
op	19:54	0:0	2	->
water	19:56	0:0	2	framebits
water	19:65	0:0	2	;
if	20:4	21:17	2	(samples == 0)
cond	20:8	20:19	3	samples == 0
water	20:8	0:0	4	samples
op	20:16	0:0	4	==
water	20:19	0:0	4	0
stmts	21:8	21:17	3	
goto	21:8	21:17	4	skip
water	21:13	0:0	5	skip
if	22:4	31:4	2	(p_sys -> decode != NULL)
cond	22:8	22:25	3	p_sys -> decode != NULL
water	22:8	0:0	4	p_sys
op	22:13	0:0	4	->
water	22:15	0:0	4	decode
op	22:22	0:0	4	!=
water	22:25	0:0	4	NULL
stmts	23:4	31:4	3	
water	23:4	0:0	4	{
decl	24:8	24:65	4	block_t	*p_out
op	24:23	0:0	4	=
call	24:25	24:64	5	decoder_NewAudioBuffer
arg	24:49	24:54	6	p_dec
water	24:49	0:0	7	p_dec
arg	24:56	24:64	6	samples
water	24:56	0:0	7	samples
if	25:8	26:21	4	(p_out == NULL)
cond	25:12	25:21	5	p_out == NULL
water	25:12	0:0	6	p_out
op	25:18	0:0	6	==
water	25:21	0:0	6	NULL
stmts	26:12	26:21	5	
goto	26:12	26:21	6	skip
water	26:17	0:0	7	skip
call	27:8	28:64	4	p_sys->decode
arg	27:23	27:38	5	p_out->p_buffer
water	27:23	0:0	6	p_out
op	27:28	0:0	6	->
water	27:30	0:0	6	p_buffer
arg	27:40	27:57	5	p_block->p_buffer
water	27:40	0:0	6	p_block
op	27:47	0:0	6	->
water	27:49	0:0	6	p_buffer
arg	28:23	28:64	5	samples*p_dec->fmt_in.audio.i_channels
water	28:23	0:0	6	samples
op	28:31	0:0	6	*
water	28:33	0:0	6	p_dec
op	28:38	0:0	6	->
water	28:40	0:0	6	fmt_in
op	28:46	0:0	6	.
water	28:47	0:0	6	audio
op	28:52	0:0	6	.
water	28:53	0:0	6	i_channels
water	28:65	0:0	4	;
call	29:8	29:31	4	block_Release
arg	29:23	29:31	5	p_block
water	29:23	0:0	6	p_block
water	29:32	0:0	4	;
water	30:8	0:0	4	p_block
op	30:16	0:0	4	=
water	30:18	0:0	4	p_out
water	30:23	0:0	4	;
water	31:4	0:0	4	}
else	32:4	37:4	2
stmts	33:4	37:4	3	
water	33:4	0:0	4	{
call	34:8	34:41	4	decoder_UpdateAudioFormat
arg	34:35	34:41	5	p_dec
water	34:35	0:0	6	p_dec
water	34:42	0:0	4	;
water	35:8	0:0	4	p_block
op	35:15	0:0	4	->
water	35:17	0:0	4	i_nb_samples
op	35:30	0:0	4	=
water	35:32	0:0	4	samples
water	35:39	0:0	4	;
water	36:8	0:0	4	p_block
op	36:15	0:0	4	->
water	36:17	0:0	4	i_buffer
op	36:26	0:0	4	=
water	36:28	0:0	4	samples
op	36:36	0:0	4	*
water	36:38	0:0	4	(
water	36:39	0:0	4	p_sys
op	36:44	0:0	4	->
water	36:46	0:0	4	framebits
op	36:56	0:0	4	/
water	36:58	0:0	4	8
water	36:59	0:0	4	)
water	36:60	0:0	4	;
water	37:4	0:0	4	}
water	38:4	0:0	2	p_block
op	38:11	0:0	2	->
water	38:13	0:0	2	i_pts
op	38:19	0:0	2	=
call	38:21	38:48	2	date_Get
arg	38:31	38:48	3	&p_sys->end_date
op	38:31	0:0	4	&
water	38:32	0:0	4	p_sys
op	38:37	0:0	4	->
water	38:39	0:0	4	end_date
water	38:49	0:0	2	;
water	39:4	0:0	2	p_block
op	39:11	0:0	2	->
water	39:13	0:0	2	i_length
op	39:22	0:0	2	=
call	39:24	39:66	2	date_Increment
arg	39:40	39:56	3	&p_sys->end_date
op	39:40	0:0	4	&
water	39:41	0:0	4	p_sys
op	39:46	0:0	4	->
water	39:48	0:0	4	end_date
arg	39:58	39:66	3	samples
water	39:58	0:0	4	samples
op	40:22	0:0	2	-
water	40:24	0:0	2	p_block
op	40:31	0:0	2	->
water	40:33	0:0	2	i_pts
water	40:38	0:0	2	;
return	41:4	41:18	2	p_block
water	41:11	0:0	3	p_block
label	42:0	42:4	2	skip :
call	43:4	43:27	2	block_Release
arg	43:19	43:27	3	p_block
water	43:19	0:0	4	p_block
water	43:28	0:0	2	;
return	44:4	44:15	2	NULL
water	44:11	0:0	3	NULL
