func	2:0	54:0	0	static int	LoadCryptFile
params	2:24	0:0	1	
param	2:26	2:54	2	sout_access_out_t *	p_access
stmnts	0:0	53:21	1	
decl	4:4	4:50	2	sout_access_out_sys_t	*p_sys
op	4:33	0:0	2	=
water	4:35	0:0	2	p_access
op	4:43	0:0	2	->
water	4:45	0:0	2	p_sys
decl	5:4	5:56	2	FILE	*stream
op	5:17	0:0	2	=
call	5:19	5:55	3	vlc_fopen
arg	5:30	5:48	4	p_sys->psz_keyfile
water	5:30	0:0	5	p_sys
op	5:35	0:0	5	->
water	5:37	0:0	5	psz_keyfile
arg	5:50	5:55	4	"rt"
water	5:50	0:0	5	"rt"
decl	6:4	6:37	2	char	*key_file
op	6:18	0:0	2	=
water	6:19	0:0	2	NULL
water	6:23	0:0	2	,
decl	6:4	6:37	2	char	*key_uri
op	6:32	0:0	2	=
water	6:33	0:0	2	NULL
if	7:4	12:4	2	(unlikely (stream == NULL ))
cond	7:8	7:33	3	unlikely (stream == NULL )
call	7:8	7:33	4	unlikely
arg	7:18	7:33	5	stream==NULL
water	7:18	0:0	6	stream
op	7:25	0:0	6	==
water	7:28	0:0	6	NULL
stmts	8:4	12:4	3	
water	8:4	0:0	4	{
call	9:8	10:59	4	msg_Err
arg	9:17	9:25	5	p_access
water	9:17	0:0	6	p_access
arg	9:27	9:62	5	"Unable to open keyloadfile %s: %s"
water	9:27	0:0	6	"Unable to open keyloadfile %s: %s"
arg	10:17	10:35	5	p_sys->psz_keyfile
water	10:17	0:0	6	p_sys
op	10:22	0:0	6	->
water	10:24	0:0	6	psz_keyfile
arg	10:37	10:59	5	vlc_strerror_c(errno)
call	10:37	10:57	6	vlc_strerror_c
arg	10:52	10:57	7	errno
water	10:52	0:0	8	errno
water	10:60	0:0	4	;
return	11:8	11:27	4	VLC_EGENERIC
water	11:15	0:0	5	VLC_EGENERIC
water	12:4	0:0	4	}
decl	14:4	14:59	2	ssize_t	len
op	14:16	0:0	2	=
call	14:18	14:58	3	getline
arg	14:27	14:35	4	&key_uri
op	14:27	0:0	5	&
water	14:28	0:0	5	key_uri
arg	14:37	14:49	4	&(size_t){0}
op	14:37	0:0	5	&
water	14:38	0:0	5	(
water	14:39	0:0	5	size_t
water	14:45	0:0	5	)
water	14:46	0:0	5	{
water	14:47	0:0	5	0
water	14:48	0:0	5	}
arg	14:51	14:58	4	stream
water	14:51	0:0	5	stream
if	15:4	23:4	2	(unlikely (len == - 1 ))
cond	15:8	15:28	3	unlikely (len == - 1 )
call	15:8	15:28	4	unlikely
arg	15:18	15:28	5	len==-1
water	15:18	0:0	6	len
op	15:22	0:0	6	==
op	15:25	0:0	6	-
water	15:26	0:0	6	1
stmts	16:4	23:4	3	
water	16:4	0:0	4	{
call	17:8	18:39	4	msg_Err
arg	17:17	17:25	5	p_access
water	17:17	0:0	6	p_access
arg	17:27	17:47	5	"Cannot read %s: %s"
water	17:27	0:0	6	"Cannot read %s: %s"
arg	17:49	17:67	5	p_sys->psz_keyfile
water	17:49	0:0	6	p_sys
op	17:54	0:0	6	->
water	17:56	0:0	6	psz_keyfile
arg	18:17	18:39	5	vlc_strerror_c(errno)
call	18:17	18:37	6	vlc_strerror_c
arg	18:32	18:37	7	errno
water	18:32	0:0	8	errno
water	18:40	0:0	4	;
call	19:8	19:25	4	clearerr
arg	19:18	19:25	5	stream
water	19:18	0:0	6	stream
water	19:26	0:0	4	;
call	20:8	20:23	4	fclose
arg	20:16	20:23	5	stream
water	20:16	0:0	6	stream
water	20:24	0:0	4	;
call	21:8	21:22	4	free
arg	21:14	21:22	5	key_uri
water	21:14	0:0	6	key_uri
water	21:23	0:0	4	;
return	22:8	22:27	4	VLC_EGENERIC
water	22:15	0:0	5	VLC_EGENERIC
water	23:4	0:0	4	}
water	25:4	0:0	2	key_uri
op	25:11	0:0	2	[
water	25:12	0:0	2	len
op	25:15	0:0	2	-
water	25:16	0:0	2	1
op	25:17	0:0	2	]
op	25:18	0:0	2	=
water	25:19	0:0	2	'\0'
water	25:23	0:0	2	;
water	26:4	0:0	2	len
op	26:8	0:0	2	=
call	26:10	26:51	2	getline
arg	26:19	26:28	3	&key_file
op	26:19	0:0	4	&
water	26:20	0:0	4	key_file
arg	26:30	26:42	3	&(size_t){0}
op	26:30	0:0	4	&
water	26:31	0:0	4	(
water	26:32	0:0	4	size_t
water	26:38	0:0	4	)
water	26:39	0:0	4	{
water	26:40	0:0	4	0
water	26:41	0:0	4	}
arg	26:44	26:51	3	stream
water	26:44	0:0	4	stream
water	26:52	0:0	2	;
if	27:4	36:4	2	(unlikely (len == - 1 ))
cond	27:8	27:28	3	unlikely (len == - 1 )
call	27:8	27:28	4	unlikely
arg	27:18	27:28	5	len==-1
water	27:18	0:0	6	len
op	27:22	0:0	6	==
op	27:25	0:0	6	-
water	27:26	0:0	6	1
stmts	28:4	36:4	3	
water	28:4	0:0	4	{
call	29:8	30:39	4	msg_Err
arg	29:17	29:25	5	p_access
water	29:17	0:0	6	p_access
arg	29:27	29:47	5	"Cannot read %s: %s"
water	29:27	0:0	6	"Cannot read %s: %s"
arg	29:49	29:67	5	p_sys->psz_keyfile
water	29:49	0:0	6	p_sys
op	29:54	0:0	6	->
water	29:56	0:0	6	psz_keyfile
arg	30:17	30:39	5	vlc_strerror_c(errno)
call	30:17	30:37	6	vlc_strerror_c
arg	30:32	30:37	7	errno
water	30:32	0:0	8	errno
water	30:40	0:0	4	;
call	31:8	31:25	4	clearerr
arg	31:18	31:25	5	stream
water	31:18	0:0	6	stream
water	31:26	0:0	4	;
call	32:8	32:23	4	fclose
arg	32:16	32:23	5	stream
water	32:16	0:0	6	stream
water	32:24	0:0	4	;
call	33:8	33:22	4	free
arg	33:14	33:22	5	key_uri
water	33:14	0:0	6	key_uri
water	33:23	0:0	4	;
call	34:8	34:23	4	free
arg	34:14	34:23	5	key_file
water	34:14	0:0	6	key_file
water	34:24	0:0	4	;
return	35:8	35:27	4	VLC_EGENERIC
water	35:15	0:0	5	VLC_EGENERIC
water	36:4	0:0	4	}
water	38:4	0:0	2	key_file
op	38:12	0:0	2	[
water	38:13	0:0	2	len
op	38:16	0:0	2	-
water	38:17	0:0	2	1
op	38:18	0:0	2	]
op	38:19	0:0	2	=
water	38:20	0:0	2	'\0'
water	38:24	0:0	2	;
call	39:4	39:19	2	fclose
arg	39:12	39:19	3	stream
water	39:12	0:0	4	stream
water	39:20	0:0	2	;
decl	40:4	40:32	2	int	returncode
op	40:19	0:0	2	=
water	40:21	0:0	2	VLC_SUCCESS
if	41:4	50:4	2	(! p_sys -> key_uri ||strcmp (p_sys -> key_uri ,key_uri ))
cond	41:8	41:59	3	! p_sys -> key_uri ||strcmp (p_sys -> key_uri ,key_uri )
op	41:8	0:0	4	!
water	41:9	0:0	4	p_sys
op	41:14	0:0	4	->
water	41:16	0:0	4	key_uri
op	41:24	0:0	4	||
call	41:27	41:59	4	strcmp
arg	41:35	41:49	5	p_sys->key_uri
water	41:35	0:0	6	p_sys
op	41:40	0:0	6	->
water	41:42	0:0	6	key_uri
arg	41:51	41:59	5	key_uri
water	41:51	0:0	6	key_uri
stmts	42:4	50:4	3	
water	42:4	0:0	4	{
if	43:8	47:8	4	(p_sys -> key_uri)
cond	43:12	43:19	5	p_sys -> key_uri
water	43:12	0:0	6	p_sys
op	43:17	0:0	6	->
water	43:19	0:0	6	key_uri
stmts	44:8	47:8	5	
water	44:8	0:0	6	{
call	45:12	45:33	6	free
arg	45:18	45:33	7	p_sys->key_uri
water	45:18	0:0	8	p_sys
op	45:23	0:0	8	->
water	45:25	0:0	8	key_uri
water	45:34	0:0	6	;
water	46:12	0:0	6	p_sys
op	46:17	0:0	6	->
water	46:19	0:0	6	key_uri
op	46:27	0:0	6	=
water	46:29	0:0	6	NULL
water	46:33	0:0	6	;
water	47:8	0:0	6	}
water	48:8	0:0	4	p_sys
op	48:13	0:0	4	->
water	48:15	0:0	4	key_uri
op	48:23	0:0	4	=
call	48:25	48:41	4	strdup
arg	48:33	48:41	5	key_uri
water	48:33	0:0	6	key_uri
water	48:42	0:0	4	;
water	49:8	0:0	4	returncode
op	49:19	0:0	4	=
call	49:21	49:52	4	CryptSetup
arg	49:33	49:41	5	p_access
water	49:33	0:0	6	p_access
arg	49:43	49:52	5	key_file
water	49:43	0:0	6	key_file
water	49:53	0:0	4	;
water	50:4	0:0	4	}
call	51:4	51:19	2	free
arg	51:10	51:19	3	key_file
water	51:10	0:0	4	key_file
water	51:20	0:0	2	;
call	52:4	52:18	2	free
arg	52:10	52:18	3	key_uri
water	52:10	0:0	4	key_uri
water	52:19	0:0	2	;
return	53:4	53:21	2	returncode
water	53:11	0:0	3	returncode
