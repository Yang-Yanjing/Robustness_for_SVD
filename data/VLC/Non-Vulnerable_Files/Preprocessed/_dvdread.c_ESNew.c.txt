func	2:0	59:0	0	static void	ESNew
params	2:17	0:0	1	
param	2:19	2:35	2	demux_t *	p_demux
param	2:37	2:45	2	int	i_id
param	2:47	2:58	2	int	i_lang
stmnts	0:0	58:21	1	
decl	4:4	4:39	2	demux_sys_t	*p_sys
op	4:23	0:0	2	=
water	4:25	0:0	2	p_demux
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:51	2	ps_track_t	*tk
op	5:20	0:0	2	=
op	5:22	0:0	2	&
water	5:23	0:0	2	p_sys
op	5:28	0:0	2	->
water	5:30	0:0	2	tk
op	5:32	0:0	2	[
call	5:33	5:49	3	PS_ID_TO_TK
arg	5:45	5:49	4	i_id
water	5:45	0:0	5	i_id
op	5:50	0:0	2	]
decl	6:4	6:24	2	char	psz_language[3]
if	7:4	7:27	2	(tk -> b_seen)
cond	7:8	7:12	3	tk -> b_seen
water	7:8	0:0	4	tk
op	7:10	0:0	4	->
water	7:12	0:0	4	b_seen
stmts	7:21	7:27	3	
return	7:21	7:27	4	
if	8:4	12:4	2	(ps_track_fill (tk ,0 ,i_id ))
cond	8:8	8:35	3	ps_track_fill (tk ,0 ,i_id )
call	8:8	8:35	4	ps_track_fill
arg	8:23	8:25	5	tk
water	8:23	0:0	6	tk
arg	8:27	8:28	5	0
water	8:27	0:0	6	0
arg	8:30	8:35	5	i_id
water	8:30	0:0	6	i_id
stmts	9:4	12:4	3	
water	9:4	0:0	4	{
call	10:8	10:61	4	msg_Warn
arg	10:18	10:25	5	p_demux
water	10:18	0:0	6	p_demux
arg	10:27	10:54	5	"unknown codec for id=0x%x"
water	10:27	0:0	6	"unknown codec for id=0x%x"
arg	10:56	10:61	5	i_id
water	10:56	0:0	6	i_id
water	10:62	0:0	4	;
return	11:8	11:14	4	
water	12:4	0:0	4	}
water	13:4	0:0	2	psz_language
op	13:16	0:0	2	[
water	13:17	0:0	2	0
op	13:18	0:0	2	]
op	13:20	0:0	2	=
water	13:22	0:0	2	psz_language
op	13:34	0:0	2	[
water	13:35	0:0	2	1
op	13:36	0:0	2	]
op	13:38	0:0	2	=
water	13:40	0:0	2	psz_language
op	13:52	0:0	2	[
water	13:53	0:0	2	2
op	13:54	0:0	2	]
op	13:56	0:0	2	=
water	13:58	0:0	2	0
water	13:59	0:0	2	;
if	14:4	18:4	2	(i_lang && i_lang != 0 xffff)
cond	14:8	14:29	3	i_lang && i_lang != 0 xffff
water	14:8	0:0	4	i_lang
op	14:15	0:0	4	&&
water	14:18	0:0	4	i_lang
op	14:25	0:0	4	!=
water	14:28	0:0	4	0
water	14:29	0:0	4	xffff
stmts	15:4	18:4	3	
water	15:4	0:0	4	{
water	16:8	0:0	4	psz_language
op	16:20	0:0	4	[
water	16:21	0:0	4	0
op	16:22	0:0	4	]
op	16:24	0:0	4	=
water	16:26	0:0	4	(
water	16:27	0:0	4	i_lang
op	16:34	0:0	4	>>
water	16:37	0:0	4	8
water	16:38	0:0	4	)
op	16:39	0:0	4	&
water	16:40	0:0	4	0
water	16:41	0:0	4	xff
water	16:44	0:0	4	;
water	17:8	0:0	4	psz_language
op	17:20	0:0	4	[
water	17:21	0:0	4	1
op	17:22	0:0	4	]
op	17:24	0:0	4	=
water	17:26	0:0	4	(
water	17:27	0:0	4	i_lang
water	17:38	0:0	4	)
op	17:39	0:0	4	&
water	17:40	0:0	4	0
water	17:41	0:0	4	xff
water	17:44	0:0	4	;
water	18:4	0:0	4	}
if	20:4	24:4	2	(tk -> fmt . i_cat == VIDEO_ES)
cond	20:8	20:25	3	tk -> fmt . i_cat == VIDEO_ES
water	20:8	0:0	4	tk
op	20:10	0:0	4	->
water	20:12	0:0	4	fmt
op	20:15	0:0	4	.
water	20:16	0:0	4	i_cat
op	20:22	0:0	4	==
water	20:25	0:0	4	VIDEO_ES
stmts	21:4	24:4	3	
water	21:4	0:0	4	{
water	22:8	0:0	4	tk
op	22:10	0:0	4	->
water	22:12	0:0	4	fmt
op	22:15	0:0	4	.
water	22:16	0:0	4	video
op	22:21	0:0	4	.
water	22:22	0:0	4	i_sar_num
op	22:32	0:0	4	=
water	22:34	0:0	4	p_sys
op	22:39	0:0	4	->
water	22:41	0:0	4	i_sar_num
water	22:50	0:0	4	;
water	23:8	0:0	4	tk
op	23:10	0:0	4	->
water	23:12	0:0	4	fmt
op	23:15	0:0	4	.
water	23:16	0:0	4	video
op	23:21	0:0	4	.
water	23:22	0:0	4	i_sar_den
op	23:32	0:0	4	=
water	23:34	0:0	4	p_sys
op	23:39	0:0	4	->
water	23:41	0:0	4	i_sar_den
water	23:50	0:0	4	;
water	24:4	0:0	4	}
else	25:4	48:4	2
stmts	25:9	48:4	3	
if	25:9	48:4	4	(tk -> fmt . i_cat == AUDIO_ES)
cond	25:13	25:30	5	tk -> fmt . i_cat == AUDIO_ES
water	25:13	0:0	6	tk
op	25:15	0:0	6	->
water	25:17	0:0	6	fmt
op	25:20	0:0	6	.
water	25:21	0:0	6	i_cat
op	25:27	0:0	6	==
water	25:30	0:0	6	AUDIO_ES
stmts	26:4	48:4	5	
water	26:4	0:0	6	{
decl	28:8	28:24	6	int	i_audio
op	28:20	0:0	6	=
op	28:22	0:0	6	-
water	28:23	0:0	6	1
if	30:8	33:8	6	(( i_id & 0 xbdf8 ) == 0 xbd88)
cond	30:12	30:30	7	( i_id & 0 xbdf8 ) == 0 xbd88
water	30:12	0:0	8	(
water	30:13	0:0	8	i_id
op	30:17	0:0	8	&
water	30:18	0:0	8	0
water	30:19	0:0	8	xbdf8
water	30:24	0:0	8	)
op	30:26	0:0	8	==
water	30:29	0:0	8	0
water	30:30	0:0	8	xbd88
stmts	31:8	33:8	7	
water	31:8	0:0	8	{
water	32:12	0:0	8	i_audio
op	32:20	0:0	8	=
water	32:22	0:0	8	i_id
op	32:26	0:0	8	&
water	32:27	0:0	8	0
water	32:28	0:0	8	x07
water	32:31	0:0	8	;
water	33:8	0:0	8	}
else	34:8	37:8	6
stmts	34:13	37:8	7	
if	34:13	37:8	8	(( i_id & 0 xbdf0 ) == 0 xbd80)
cond	34:17	34:35	9	( i_id & 0 xbdf0 ) == 0 xbd80
water	34:17	0:0	10	(
water	34:18	0:0	10	i_id
op	34:22	0:0	10	&
water	34:23	0:0	10	0
water	34:24	0:0	10	xbdf0
water	34:29	0:0	10	)
op	34:31	0:0	10	==
water	34:34	0:0	10	0
water	34:35	0:0	10	xbd80
stmts	35:8	37:8	9	
water	35:8	0:0	10	{
water	36:12	0:0	10	i_audio
op	36:20	0:0	10	=
water	36:22	0:0	10	i_id
op	36:26	0:0	10	&
water	36:27	0:0	10	0
water	36:28	0:0	10	xf
water	36:30	0:0	10	;
water	37:8	0:0	10	}
else	38:8	41:8	6
stmts	38:13	41:8	7	
if	38:13	41:8	8	(( i_id & 0 xbdf0 ) == 0 xbda0)
cond	38:17	38:35	9	( i_id & 0 xbdf0 ) == 0 xbda0
water	38:17	0:0	10	(
water	38:18	0:0	10	i_id
op	38:22	0:0	10	&
water	38:23	0:0	10	0
water	38:24	0:0	10	xbdf0
water	38:29	0:0	10	)
op	38:31	0:0	10	==
water	38:34	0:0	10	0
water	38:35	0:0	10	xbda0
stmts	39:8	41:8	9	
water	39:8	0:0	10	{
water	40:12	0:0	10	i_audio
op	40:20	0:0	10	=
water	40:22	0:0	10	i_id
op	40:26	0:0	10	&
water	40:27	0:0	10	0
water	40:28	0:0	10	x1f
water	40:31	0:0	10	;
water	41:8	0:0	10	}
else	42:8	45:8	6
stmts	42:13	45:8	7	
if	42:13	45:8	8	(( i_id & 0 xe0 ) == 0 xc0)
cond	42:17	42:35	9	( i_id & 0 xe0 ) == 0 xc0
water	42:17	0:0	10	(
water	42:19	0:0	10	i_id
op	42:23	0:0	10	&
water	42:24	0:0	10	0
water	42:25	0:0	10	xe0
water	42:29	0:0	10	)
op	42:31	0:0	10	==
water	42:34	0:0	10	0
water	42:35	0:0	10	xc0
stmts	43:8	45:8	9	
water	43:8	0:0	10	{
water	44:12	0:0	10	i_audio
op	44:20	0:0	10	=
water	44:22	0:0	10	i_id
op	44:26	0:0	10	&
water	44:27	0:0	10	0
water	44:28	0:0	10	x1f
water	44:31	0:0	10	;
water	45:8	0:0	10	}
if	47:8	47:75	6	(psz_language [ 0 ])
cond	47:12	47:26	7	psz_language [ 0 ]
water	47:12	0:0	8	psz_language
op	47:24	0:0	8	[
water	47:25	0:0	8	0
op	47:26	0:0	8	]
stmts	47:30	47:75	7	
water	47:30	0:0	8	tk
op	47:32	0:0	8	->
water	47:34	0:0	8	fmt
op	47:37	0:0	8	.
water	47:38	0:0	8	psz_language
op	47:51	0:0	8	=
call	47:53	47:74	8	strdup
arg	47:61	47:74	9	psz_language
water	47:61	0:0	10	psz_language
water	47:75	0:0	8	;
water	48:4	0:0	6	}
else	49:4	56:4	2
stmts	49:9	56:4	3	
if	49:9	56:4	4	(tk -> fmt . i_cat == SPU_ES)
cond	49:13	49:30	5	tk -> fmt . i_cat == SPU_ES
water	49:13	0:0	6	tk
op	49:15	0:0	6	->
water	49:17	0:0	6	fmt
op	49:20	0:0	6	.
water	49:21	0:0	6	i_cat
op	49:27	0:0	6	==
water	49:30	0:0	6	SPU_ES
stmts	50:4	56:4	5	
water	50:4	0:0	6	{
water	52:8	0:0	6	tk
op	52:10	0:0	6	->
water	52:12	0:0	6	fmt
op	52:15	0:0	6	.
water	52:16	0:0	6	subs
op	52:20	0:0	6	.
water	52:21	0:0	6	spu
op	52:24	0:0	6	.
water	52:25	0:0	6	palette
op	52:32	0:0	6	[
water	52:33	0:0	6	0
op	52:34	0:0	6	]
op	52:36	0:0	6	=
water	52:38	0:0	6	0
water	52:39	0:0	6	xBeef
water	52:44	0:0	6	;
call	53:8	54:40	6	memcpy
arg	53:16	53:44	7	&tk->fmt.subs.spu.palette[1]
op	53:16	0:0	8	&
water	53:17	0:0	8	tk
op	53:19	0:0	8	->
water	53:21	0:0	8	fmt
op	53:24	0:0	8	.
water	53:25	0:0	8	subs
op	53:29	0:0	8	.
water	53:30	0:0	8	spu
op	53:33	0:0	8	.
water	53:34	0:0	8	palette
op	53:41	0:0	8	[
water	53:42	0:0	8	1
op	53:43	0:0	8	]
arg	53:46	53:57	7	p_sys->clut
water	53:46	0:0	8	p_sys
op	53:51	0:0	8	->
water	53:53	0:0	8	clut
arg	54:16	54:40	7	16*sizeof(uint32_t)
water	54:16	0:0	8	16
op	54:19	0:0	8	*
op	54:21	0:0	8	sizeof
water	54:27	0:0	8	(
water	54:29	0:0	8	uint32_t
water	54:38	0:0	8	)
water	54:41	0:0	6	;
if	55:8	55:75	6	(psz_language [ 0 ])
cond	55:12	55:26	7	psz_language [ 0 ]
water	55:12	0:0	8	psz_language
op	55:24	0:0	8	[
water	55:25	0:0	8	0
op	55:26	0:0	8	]
stmts	55:30	55:75	7	
water	55:30	0:0	8	tk
op	55:32	0:0	8	->
water	55:34	0:0	8	fmt
op	55:37	0:0	8	.
water	55:38	0:0	8	psz_language
op	55:51	0:0	8	=
call	55:53	55:74	8	strdup
arg	55:61	55:74	9	psz_language
water	55:61	0:0	10	psz_language
water	55:75	0:0	8	;
water	56:4	0:0	6	}
water	57:4	0:0	2	tk
op	57:6	0:0	2	->
water	57:8	0:0	2	es
op	57:11	0:0	2	=
call	57:13	57:48	2	es_out_Add
arg	57:25	57:37	3	p_demux->out
water	57:25	0:0	4	p_demux
op	57:32	0:0	4	->
water	57:34	0:0	4	out
arg	57:39	57:48	3	&tk->fmt
op	57:39	0:0	4	&
water	57:40	0:0	4	tk
op	57:42	0:0	4	->
water	57:44	0:0	4	fmt
water	57:49	0:0	2	;
water	58:4	0:0	2	tk
op	58:6	0:0	2	->
water	58:8	0:0	2	b_seen
op	58:15	0:0	2	=
water	58:17	0:0	2	true
water	58:21	0:0	2	;
