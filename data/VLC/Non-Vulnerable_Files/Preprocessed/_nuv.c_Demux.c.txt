func	2:0	72:0	0	static int	Demux
params	2:16	0:0	1	
param	2:18	2:35	2	demux_t *	p_demux
stmnts	0:0	71:12	1	
decl	4:4	4:39	2	demux_sys_t	*p_sys
op	4:23	0:0	2	=
water	4:25	0:0	2	p_demux
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:21	2	frame_header_t	fh
decl	6:4	6:19	2	block_t	*p_data
for	7:4	21:4	2	(;;)
forinit	7:9	7:9	3	;
water	7:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	8:4	21:4	3	
water	8:4	0:0	4	{
if	9:8	10:21	4	(!vlc_object_alive (p_demux ))
cond	9:12	9:38	5	!vlc_object_alive (p_demux )
op	9:12	0:0	6	!
call	9:13	9:38	6	vlc_object_alive
arg	9:31	9:38	7	p_demux
water	9:31	0:0	8	p_demux
stmts	10:12	10:21	5	
return	10:12	10:21	6	-1
op	10:19	0:0	7	-
water	10:20	0:0	7	1
if	11:8	12:20	4	(FrameHeaderLoad (p_demux ,& fh ))
cond	11:12	11:42	5	FrameHeaderLoad (p_demux ,& fh )
call	11:12	11:42	6	FrameHeaderLoad
arg	11:29	11:36	7	p_demux
water	11:29	0:0	8	p_demux
arg	11:38	11:42	7	&fh
op	11:38	0:0	8	&
water	11:39	0:0	8	fh
stmts	12:12	12:20	5	
return	12:12	12:20	6	0
water	12:19	0:0	7	0
if	13:8	14:17	4	(fh . i_type == 'A' || fh . i_type == 'V')
cond	13:12	13:45	5	fh . i_type == 'A' || fh . i_type == 'V'
water	13:12	0:0	6	fh
op	13:14	0:0	6	.
water	13:15	0:0	6	i_type
op	13:22	0:0	6	==
water	13:25	0:0	6	'A'
op	13:29	0:0	6	||
water	13:32	0:0	6	fh
op	13:34	0:0	6	.
water	13:35	0:0	6	i_type
op	13:42	0:0	6	==
water	13:45	0:0	6	'V'
stmts	14:12	14:17	5	
break	14:12	14:17	6	
if	16:8	20:8	4	(fh . i_type != 'R' && fh . i_length > 0)
cond	16:12	16:46	5	fh . i_type != 'R' && fh . i_length > 0
water	16:12	0:0	6	fh
op	16:14	0:0	6	.
water	16:15	0:0	6	i_type
op	16:22	0:0	6	!=
water	16:25	0:0	6	'R'
op	16:29	0:0	6	&&
water	16:32	0:0	6	fh
op	16:34	0:0	6	.
water	16:35	0:0	6	i_length
op	16:44	0:0	6	>
water	16:46	0:0	6	0
stmts	17:8	20:8	5	
water	17:8	0:0	6	{
if	18:12	19:25	6	(stream_Read (p_demux -> s ,NULL ,fh . i_length ) != fh . i_length)
cond	18:16	18:67	7	stream_Read (p_demux -> s ,NULL ,fh . i_length ) != fh . i_length
call	18:16	18:59	8	stream_Read
arg	18:29	18:39	9	p_demux->s
water	18:29	0:0	10	p_demux
op	18:36	0:0	10	->
water	18:38	0:0	10	s
arg	18:41	18:45	9	NULL
water	18:41	0:0	10	NULL
arg	18:47	18:59	9	fh.i_length
water	18:47	0:0	10	fh
op	18:49	0:0	10	.
water	18:50	0:0	10	i_length
op	18:61	0:0	8	!=
water	18:64	0:0	8	fh
op	18:66	0:0	8	.
water	18:67	0:0	8	i_length
stmts	19:16	19:25	7	
return	19:16	19:25	8	-1
op	19:23	0:0	9	-
water	19:24	0:0	9	1
water	20:8	0:0	6	}
water	21:4	0:0	4	}
if	23:4	24:16	2	(( p_data =stream_Block (p_demux -> s ,fh . i_length ) ) == NULL)
cond	23:8	23:64	3	( p_data =stream_Block (p_demux -> s ,fh . i_length ) ) == NULL
water	23:8	0:0	4	(
water	23:10	0:0	4	p_data
op	23:17	0:0	4	=
call	23:19	23:57	4	stream_Block
arg	23:33	23:43	5	p_demux->s
water	23:33	0:0	6	p_demux
op	23:40	0:0	6	->
water	23:42	0:0	6	s
arg	23:45	23:57	5	fh.i_length
water	23:45	0:0	6	fh
op	23:47	0:0	6	.
water	23:48	0:0	6	i_length
water	23:59	0:0	4	)
op	23:61	0:0	4	==
water	23:64	0:0	4	NULL
stmts	24:8	24:16	3	
return	24:8	24:16	4	0
water	24:15	0:0	5	0
water	25:4	0:0	2	p_data
op	25:10	0:0	2	->
water	25:12	0:0	2	i_dts
op	25:18	0:0	2	=
water	25:20	0:0	2	VLC_TS_0
op	25:29	0:0	2	+
water	25:31	0:0	2	(
water	25:32	0:0	2	int64_t
water	25:39	0:0	2	)
water	25:40	0:0	2	fh
op	25:42	0:0	2	.
water	25:43	0:0	2	i_timecode
op	25:54	0:0	2	*
water	25:56	0:0	2	1000
water	25:60	0:0	2	;
water	26:4	0:0	2	p_data
op	26:10	0:0	2	->
water	26:12	0:0	2	i_pts
op	26:18	0:0	2	=
water	26:20	0:0	2	(
water	26:21	0:0	2	fh
op	26:23	0:0	2	.
water	26:24	0:0	2	i_type
op	26:31	0:0	2	==
water	26:34	0:0	2	'V'
water	26:37	0:0	2	)
water	26:39	0:0	2	?
water	26:41	0:0	2	VLC_TS_INVALID
water	26:56	0:0	2	:
water	26:58	0:0	2	p_data
op	26:64	0:0	2	->
water	26:66	0:0	2	i_dts
water	26:71	0:0	2	;
if	28:4	31:66	2	(! fh . i_keyframe && ! p_sys -> b_index)
cond	28:8	28:34	3	! fh . i_keyframe && ! p_sys -> b_index
op	28:8	0:0	4	!
water	28:9	0:0	4	fh
op	28:11	0:0	4	.
water	28:12	0:0	4	i_keyframe
op	28:23	0:0	4	&&
op	28:26	0:0	4	!
water	28:27	0:0	4	p_sys
op	28:32	0:0	4	->
water	28:34	0:0	4	b_index
stmts	29:8	31:66	3	
call	29:8	31:65	4	demux_IndexAppend
arg	29:27	29:38	5	&p_sys->idx
op	29:27	0:0	6	&
water	29:28	0:0	6	p_sys
op	29:33	0:0	6	->
water	29:35	0:0	6	idx
arg	30:27	30:51	5	p_data->i_dts-VLC_TS_0
water	30:27	0:0	6	p_data
op	30:33	0:0	6	->
water	30:35	0:0	6	i_dts
op	30:41	0:0	6	-
water	30:43	0:0	6	VLC_TS_0
arg	31:27	31:65	5	stream_Tell(p_demux->s)-NUV_FH_SIZE
call	31:27	31:49	6	stream_Tell
arg	31:39	31:49	7	p_demux->s
water	31:39	0:0	8	p_demux
op	31:46	0:0	8	->
water	31:48	0:0	8	s
op	31:51	0:0	6	-
water	31:53	0:0	6	NUV_FH_SIZE
water	31:66	0:0	4	;
if	33:4	37:4	2	(p_sys -> i_pcr < 0 || p_sys -> i_pcr < p_data -> i_dts - VLC_TS_0)
cond	33:8	33:59	3	p_sys -> i_pcr < 0 || p_sys -> i_pcr < p_data -> i_dts - VLC_TS_0
water	33:8	0:0	4	p_sys
op	33:13	0:0	4	->
water	33:15	0:0	4	i_pcr
op	33:21	0:0	4	<
water	33:23	0:0	4	0
op	33:25	0:0	4	||
water	33:28	0:0	4	p_sys
op	33:33	0:0	4	->
water	33:35	0:0	4	i_pcr
op	33:41	0:0	4	<
water	33:43	0:0	4	p_data
op	33:49	0:0	4	->
water	33:51	0:0	4	i_dts
op	33:57	0:0	4	-
water	33:59	0:0	4	VLC_TS_0
stmts	34:4	37:4	3	
water	34:4	0:0	4	{
water	35:8	0:0	4	p_sys
op	35:13	0:0	4	->
water	35:15	0:0	4	i_pcr
op	35:21	0:0	4	=
water	35:23	0:0	4	p_data
op	35:29	0:0	4	->
water	35:31	0:0	4	i_dts
op	35:37	0:0	4	-
water	35:39	0:0	4	VLC_TS_0
water	35:47	0:0	4	;
call	36:8	36:78	4	es_out_Control
arg	36:24	36:36	5	p_demux->out
water	36:24	0:0	6	p_demux
op	36:31	0:0	6	->
water	36:33	0:0	6	out
arg	36:38	36:52	5	ES_OUT_SET_PCR
water	36:38	0:0	6	ES_OUT_SET_PCR
arg	36:54	36:78	5	VLC_TS_0+p_sys->i_pcr
water	36:54	0:0	6	VLC_TS_0
op	36:63	0:0	6	+
water	36:65	0:0	6	p_sys
op	36:70	0:0	6	->
water	36:72	0:0	6	i_pcr
water	36:79	0:0	4	;
water	37:4	0:0	4	}
if	38:4	47:4	2	(fh . i_type == 'A' && p_sys -> p_es_audio)
cond	38:8	38:35	3	fh . i_type == 'A' && p_sys -> p_es_audio
water	38:8	0:0	4	fh
op	38:10	0:0	4	.
water	38:11	0:0	4	i_type
op	38:18	0:0	4	==
water	38:21	0:0	4	'A'
op	38:25	0:0	4	&&
water	38:28	0:0	4	p_sys
op	38:33	0:0	4	->
water	38:35	0:0	4	p_es_audio
stmts	39:4	47:4	3	
water	39:4	0:0	4	{
if	40:8	41:66	4	(fh . i_compression == '3')
cond	40:12	40:32	5	fh . i_compression == '3'
water	40:12	0:0	6	fh
op	40:14	0:0	6	.
water	40:15	0:0	6	i_compression
op	40:29	0:0	6	==
water	40:32	0:0	6	'3'
stmts	41:12	41:66	5	
call	41:12	41:65	6	es_out_Send
arg	41:25	41:37	7	p_demux->out
water	41:25	0:0	8	p_demux
op	41:32	0:0	8	->
water	41:34	0:0	8	out
arg	41:39	41:56	7	p_sys->p_es_audio
water	41:39	0:0	8	p_sys
op	41:44	0:0	8	->
water	41:46	0:0	8	p_es_audio
arg	41:58	41:65	7	p_data
water	41:58	0:0	8	p_data
water	41:66	0:0	6	;
else	42:8	46:8	4
stmts	43:8	46:8	5	
water	43:8	0:0	6	{
call	44:12	44:104	6	msg_Dbg
arg	44:21	44:28	7	p_demux
water	44:21	0:0	8	p_demux
arg	44:30	44:85	7	"unsupported compression %c for audio (upload samples)"
water	44:30	0:0	8	"unsupported compression %c for audio (upload samples)"
arg	44:87	44:104	7	fh.i_compression
water	44:87	0:0	8	fh
op	44:89	0:0	8	.
water	44:90	0:0	8	i_compression
water	44:105	0:0	6	;
call	45:12	45:34	6	block_Release
arg	45:27	45:34	7	p_data
water	45:27	0:0	8	p_data
water	45:35	0:0	6	;
water	46:8	0:0	6	}
water	47:4	0:0	4	}
else	48:4	66:4	2
stmts	48:9	66:4	3	
if	48:9	66:4	4	(fh . i_type == 'V' && p_sys -> p_es_video)
cond	48:13	48:40	5	fh . i_type == 'V' && p_sys -> p_es_video
water	48:13	0:0	6	fh
op	48:15	0:0	6	.
water	48:16	0:0	6	i_type
op	48:23	0:0	6	==
water	48:26	0:0	6	'V'
op	48:30	0:0	6	&&
water	48:33	0:0	6	p_sys
op	48:38	0:0	6	->
water	48:40	0:0	6	p_es_video
stmts	49:4	66:4	5	
water	49:4	0:0	6	{
if	50:8	57:8	6	(fh . i_compression >= '0' && fh . i_compression <= '3')
cond	50:12	50:57	7	fh . i_compression >= '0' && fh . i_compression <= '3'
water	50:12	0:0	8	fh
op	50:14	0:0	8	.
water	50:15	0:0	8	i_compression
op	50:29	0:0	8	>=
water	50:31	0:0	8	'0'
op	50:35	0:0	8	&&
water	50:38	0:0	8	fh
op	50:40	0:0	8	.
water	50:41	0:0	8	i_compression
op	50:55	0:0	8	<=
water	50:57	0:0	8	'3'
stmts	51:8	57:8	7	
water	51:8	0:0	8	{
water	53:12	0:0	8	p_data
op	53:19	0:0	8	=
call	53:21	53:69	8	block_Realloc
arg	53:36	53:42	9	p_data
water	53:36	0:0	10	p_data
arg	53:44	53:55	9	NUV_FH_SIZE
water	53:44	0:0	10	NUV_FH_SIZE
arg	53:57	53:69	9	fh.i_length
water	53:57	0:0	10	fh
op	53:59	0:0	10	.
water	53:60	0:0	10	i_length
water	53:70	0:0	8	;
if	54:12	55:23	8	(unlikely (! p_data ))
cond	54:16	54:32	9	unlikely (! p_data )
call	54:16	54:32	10	unlikely
arg	54:25	54:32	11	!p_data
op	54:25	0:0	12	!
water	54:26	0:0	12	p_data
stmts	55:16	55:23	9	
call	55:16	55:22	10	abort
water	55:23	0:0	10	;
call	56:12	56:68	8	memcpy
arg	56:20	56:36	9	p_data->p_buffer
water	56:20	0:0	10	p_data
op	56:26	0:0	10	->
water	56:28	0:0	10	p_buffer
arg	56:38	56:54	9	p_sys->fh_buffer
water	56:38	0:0	10	p_sys
op	56:43	0:0	10	->
water	56:45	0:0	10	fh_buffer
arg	56:56	56:68	9	NUV_FH_SIZE
water	56:56	0:0	10	NUV_FH_SIZE
water	56:69	0:0	8	;
water	57:8	0:0	8	}
if	59:8	60:66	6	(fh . i_compression >= '0')
cond	59:12	59:32	7	fh . i_compression >= '0'
water	59:12	0:0	8	fh
op	59:14	0:0	8	.
water	59:15	0:0	8	i_compression
op	59:29	0:0	8	>=
water	59:32	0:0	8	'0'
stmts	60:12	60:66	7	
call	60:12	60:65	8	es_out_Send
arg	60:25	60:37	9	p_demux->out
water	60:25	0:0	10	p_demux
op	60:32	0:0	10	->
water	60:34	0:0	10	out
arg	60:39	60:56	9	p_sys->p_es_video
water	60:39	0:0	10	p_sys
op	60:44	0:0	10	->
water	60:46	0:0	10	p_es_video
arg	60:58	60:65	9	p_data
water	60:58	0:0	10	p_data
water	60:66	0:0	8	;
else	61:8	65:8	6
stmts	62:8	65:8	7	
water	62:8	0:0	8	{
call	63:12	63:104	8	msg_Dbg
arg	63:21	63:28	9	p_demux
water	63:21	0:0	10	p_demux
arg	63:30	63:85	9	"unsupported compression %c for video (upload samples)"
water	63:30	0:0	10	"unsupported compression %c for video (upload samples)"
arg	63:87	63:104	9	fh.i_compression
water	63:87	0:0	10	fh
op	63:89	0:0	10	.
water	63:90	0:0	10	i_compression
water	63:105	0:0	8	;
call	64:12	64:34	8	block_Release
arg	64:27	64:34	9	p_data
water	64:27	0:0	10	p_data
water	64:35	0:0	8	;
water	65:8	0:0	8	}
water	66:4	0:0	6	}
else	67:4	70:4	2
stmts	68:4	70:4	3	
water	68:4	0:0	4	{
call	69:8	69:30	4	block_Release
arg	69:23	69:30	5	p_data
water	69:23	0:0	6	p_data
water	69:31	0:0	4	;
water	70:4	0:0	4	}
return	71:4	71:12	2	1
water	71:11	0:0	3	1
