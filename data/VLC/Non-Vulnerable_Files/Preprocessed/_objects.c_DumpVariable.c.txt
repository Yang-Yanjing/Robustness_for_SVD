func	2:0	65:0	0	static void	DumpVariable
params	2:25	0:0	1	
param	2:26	2:42	2	const void *	data
param	2:44	2:61	2	const VISIT	which
param	2:63	2:78	2	const int	depth
stmnts	4:4	64:25	1	
if	4:4	5:14	2	(which != postorder && which != leaf)
cond	4:8	4:39	3	which != postorder && which != leaf
water	4:8	0:0	4	which
op	4:14	0:0	4	!=
water	4:17	0:0	4	postorder
op	4:27	0:0	4	&&
water	4:30	0:0	4	which
op	4:36	0:0	4	!=
water	4:39	0:0	4	leaf
stmts	5:8	5:14	3	
return	5:8	5:14	4	
water	6:4	0:0	2	(
water	6:5	0:0	2	void
water	6:9	0:0	2	)
water	6:11	0:0	2	depth
water	6:16	0:0	2	;
decl	7:4	7:56	2	const variable_t	*p_var
op	7:28	0:0	2	=
op	7:30	0:0	2	*
water	7:31	0:0	2	(
water	7:32	0:0	2	const
water	7:38	0:0	2	variable_t
op	7:49	0:0	2	*
op	7:50	0:0	2	*
water	7:51	0:0	2	)
water	7:52	0:0	2	data
decl	8:4	8:36	2	const char	*psz_type
op	8:25	0:0	2	=
water	8:27	0:0	2	"unknown"
switch	9:4	26:4	2	(p_var -> i_type & VLC_VAR_TYPE)
cond	9:12	9:28	3	p_var -> i_type & VLC_VAR_TYPE
water	9:12	0:0	4	p_var
op	9:17	0:0	4	->
water	9:19	0:0	4	i_type
op	9:26	0:0	4	&
water	9:28	0:0	4	VLC_VAR_TYPE
stmts	10:4	26:4	3	
water	10:4	0:0	4	{
water	12:8	0:0	4	case
water	12:13	0:0	4	VLC_VAR_
water	13:12	0:0	4	psz_type
op	13:21	0:0	4	=
water	13:23	0:0	4	nice
water	13:27	0:0	4	;
break	14:12	14:17	4	
call	15:8	15:29	4	MYCASE
arg	15:16	15:20	5	VOID
water	15:16	0:0	6	VOID
arg	15:22	15:29	5	"void"
water	15:22	0:0	6	"void"
water	15:30	0:0	4	;
call	16:8	16:29	4	MYCASE
arg	16:16	16:20	5	BOOL
water	16:16	0:0	6	BOOL
arg	16:22	16:29	5	"bool"
water	16:22	0:0	6	"bool"
water	16:30	0:0	4	;
call	17:8	17:35	4	MYCASE
arg	17:16	17:23	5	INTEGER
water	17:16	0:0	6	INTEGER
arg	17:25	17:35	5	"integer"
water	17:25	0:0	6	"integer"
water	17:36	0:0	4	;
call	18:8	18:33	4	MYCASE
arg	18:16	18:22	5	HOTKEY
water	18:16	0:0	6	HOTKEY
arg	18:24	18:33	5	"hotkey"
water	18:24	0:0	6	"hotkey"
water	18:34	0:0	4	;
call	19:8	19:33	4	MYCASE
arg	19:16	19:22	5	STRING
water	19:16	0:0	6	STRING
arg	19:24	19:33	5	"string"
water	19:24	0:0	6	"string"
water	19:34	0:0	4	;
call	20:8	20:37	4	MYCASE
arg	20:16	20:24	5	VARIABLE
water	20:16	0:0	6	VARIABLE
arg	20:26	20:37	5	"variable"
water	20:26	0:0	6	"variable"
water	20:38	0:0	4	;
call	21:8	21:31	4	MYCASE
arg	21:16	21:21	5	FLOAT
water	21:16	0:0	6	FLOAT
arg	21:23	21:31	5	"float"
water	21:23	0:0	6	"float"
water	21:32	0:0	4	;
call	22:8	22:29	4	MYCASE
arg	22:16	22:20	5	TIME
water	22:16	0:0	6	TIME
arg	22:22	22:29	5	"time"
water	22:22	0:0	6	"time"
water	22:30	0:0	4	;
call	23:8	23:33	4	MYCASE
arg	23:16	23:22	5	COORDS
water	23:16	0:0	6	COORDS
arg	23:24	23:33	5	"coords"
water	23:24	0:0	6	"coords"
water	23:34	0:0	4	;
call	24:8	24:35	4	MYCASE
arg	24:16	24:23	5	ADDRESS
water	24:16	0:0	6	ADDRESS
arg	24:25	24:35	5	"address"
water	24:25	0:0	6	"address"
water	24:36	0:0	4	;
water	26:4	0:0	4	}
call	27:4	27:57	2	printf
arg	27:12	27:29	3	" *-o \"%s\" (%s"
water	27:12	0:0	4	" *-o \"%s\" (%s"
arg	27:31	27:46	3	p_var->psz_name
water	27:31	0:0	4	p_var
op	27:36	0:0	4	->
water	27:38	0:0	4	psz_name
arg	27:48	27:57	3	psz_type
water	27:48	0:0	4	psz_type
water	27:58	0:0	2	;
if	28:4	29:41	2	(p_var -> psz_text)
cond	28:8	28:15	3	p_var -> psz_text
water	28:8	0:0	4	p_var
op	28:13	0:0	4	->
water	28:15	0:0	4	psz_text
stmts	29:8	29:41	3	
call	29:8	29:40	4	printf
arg	29:16	29:22	5	", %s"
water	29:16	0:0	6	", %s"
arg	29:24	29:40	5	p_var->psz_text
water	29:24	0:0	6	p_var
op	29:29	0:0	6	->
water	29:31	0:0	6	psz_text
water	29:41	0:0	4	;
call	30:4	30:23	2	fputc
arg	30:11	30:14	3	')'
water	30:11	0:0	4	')'
arg	30:16	30:23	3	stdout
water	30:16	0:0	4	stdout
water	30:24	0:0	2	;
if	31:4	32:40	2	(p_var -> i_type & VLC_VAR_HASCHOICE)
cond	31:8	31:24	3	p_var -> i_type & VLC_VAR_HASCHOICE
water	31:8	0:0	4	p_var
op	31:13	0:0	4	->
water	31:15	0:0	4	i_type
op	31:22	0:0	4	&
water	31:24	0:0	4	VLC_VAR_HASCHOICE
stmts	32:8	32:40	3	
call	32:8	32:39	4	fputs
arg	32:15	32:30	5	", has choices"
water	32:15	0:0	6	", has choices"
arg	32:32	32:39	5	stdout
water	32:32	0:0	6	stdout
water	32:40	0:0	4	;
if	33:4	34:36	2	(p_var -> i_type & VLC_VAR_ISCOMMAND)
cond	33:8	33:24	3	p_var -> i_type & VLC_VAR_ISCOMMAND
water	33:8	0:0	4	p_var
op	33:13	0:0	4	->
water	33:15	0:0	4	i_type
op	33:22	0:0	4	&
water	33:24	0:0	4	VLC_VAR_ISCOMMAND
stmts	34:8	34:36	3	
call	34:8	34:35	4	fputs
arg	34:15	34:26	5	", command"
water	34:15	0:0	6	", command"
arg	34:28	34:35	5	stdout
water	34:28	0:0	6	stdout
water	34:36	0:0	4	;
if	35:4	36:52	2	(p_var -> i_entries)
cond	35:8	35:15	3	p_var -> i_entries
water	35:8	0:0	4	p_var
op	35:13	0:0	4	->
water	35:15	0:0	4	i_entries
stmts	36:8	36:52	3	
call	36:8	36:51	4	printf
arg	36:16	36:32	5	", %d callbacks"
water	36:16	0:0	6	", %d callbacks"
arg	36:34	36:51	5	p_var->i_entries
water	36:34	0:0	6	p_var
op	36:39	0:0	6	->
water	36:41	0:0	6	i_entries
water	36:52	0:0	4	;
switch	37:4	63:4	2	(p_var -> i_type & VLC_VAR_CLASS)
cond	37:12	37:28	3	p_var -> i_type & VLC_VAR_CLASS
water	37:12	0:0	4	p_var
op	37:17	0:0	4	->
water	37:19	0:0	4	i_type
op	37:26	0:0	4	&
water	37:28	0:0	4	VLC_VAR_CLASS
stmts	38:4	63:4	3	
water	38:4	0:0	4	{
label	39:8	39:25	4	case VLC_VAR_VOID :
break	40:12	40:17	4	
label	41:8	41:25	4	case VLC_VAR_BOOL :
call	42:12	42:65	4	printf
arg	42:20	42:26	5	": %s"
water	42:20	0:0	6	": %s"
arg	42:28	42:65	5	p_var->val.b_bool?"true":"false"
water	42:28	0:0	6	p_var
op	42:33	0:0	6	->
water	42:35	0:0	6	val
op	42:38	0:0	6	.
water	42:39	0:0	6	b_bool
water	42:46	0:0	6	?
water	42:48	0:0	6	"true"
water	42:55	0:0	6	:
water	42:57	0:0	6	"false"
water	42:66	0:0	4	;
break	43:12	43:17	4	
label	44:8	44:28	4	case VLC_VAR_INTEGER :
call	45:12	45:50	4	printf
arg	45:20	45:31	5	": %"PRId64
water	45:20	0:0	6	": %"
water	45:25	0:0	6	PRId64
arg	45:33	45:50	5	p_var->val.i_int
water	45:33	0:0	6	p_var
op	45:38	0:0	6	->
water	45:40	0:0	6	val
op	45:43	0:0	6	.
water	45:44	0:0	6	i_int
water	45:51	0:0	4	;
break	46:12	46:17	4	
label	47:8	47:27	4	case VLC_VAR_STRING :
call	48:12	48:54	4	printf
arg	48:20	48:30	5	": \"%s\""
water	48:20	0:0	6	": \"%s\""
arg	48:32	48:54	5	p_var->val.psz_string
water	48:32	0:0	6	p_var
op	48:37	0:0	6	->
water	48:39	0:0	6	val
op	48:42	0:0	6	.
water	48:43	0:0	6	psz_string
water	48:55	0:0	4	;
break	49:12	49:17	4	
label	50:8	50:26	4	case VLC_VAR_FLOAT :
call	51:12	51:47	4	printf
arg	51:20	51:26	5	": %f"
water	51:20	0:0	6	": %f"
arg	51:28	51:47	5	p_var->val.f_float
water	51:28	0:0	6	p_var
op	51:33	0:0	6	->
water	51:35	0:0	6	val
op	51:38	0:0	6	.
water	51:39	0:0	6	f_float
water	51:48	0:0	4	;
break	52:12	52:17	4	
label	53:8	53:25	4	case VLC_VAR_TIME :
call	54:12	54:60	4	printf
arg	54:20	54:31	5	": %"PRIi64
water	54:20	0:0	6	": %"
water	54:25	0:0	6	PRIi64
arg	54:33	54:60	5	(int64_t)p_var->val.i_time
water	54:33	0:0	6	(
water	54:34	0:0	6	int64_t
water	54:41	0:0	6	)
water	54:42	0:0	6	p_var
op	54:47	0:0	6	->
water	54:49	0:0	6	val
op	54:52	0:0	6	.
water	54:53	0:0	6	i_time
water	54:61	0:0	4	;
break	55:12	55:17	4	
label	56:8	56:27	4	case VLC_VAR_COORDS :
call	57:12	58:61	4	printf
arg	57:20	57:41	5	": %"PRId32"x%"PRId32
water	57:20	0:0	6	": %"
water	57:25	0:0	6	PRId32
water	57:31	0:0	6	"x%"
water	57:35	0:0	6	PRId32
arg	58:20	58:39	5	p_var->val.coords.x
water	58:20	0:0	6	p_var
op	58:25	0:0	6	->
water	58:27	0:0	6	val
op	58:30	0:0	6	.
water	58:31	0:0	6	coords
op	58:37	0:0	6	.
water	58:38	0:0	6	x
arg	58:41	58:61	5	p_var->val.coords.y
water	58:41	0:0	6	p_var
op	58:46	0:0	6	->
water	58:48	0:0	6	val
op	58:51	0:0	6	.
water	58:52	0:0	6	coords
op	58:58	0:0	6	.
water	58:59	0:0	6	y
water	58:62	0:0	4	;
break	59:12	59:17	4	
label	60:8	60:28	4	case VLC_VAR_ADDRESS :
call	61:12	61:49	4	printf
arg	61:20	61:26	5	": %p"
water	61:20	0:0	6	": %p"
arg	61:28	61:49	5	p_var->val.p_address
water	61:28	0:0	6	p_var
op	61:33	0:0	6	->
water	61:35	0:0	6	val
op	61:38	0:0	6	.
water	61:39	0:0	6	p_address
water	61:50	0:0	4	;
break	62:12	62:17	4	
water	63:4	0:0	4	}
call	64:4	64:24	2	fputc
arg	64:11	64:15	3	'\n'
water	64:11	0:0	4	'\n'
arg	64:17	64:24	3	stdout
water	64:17	0:0	4	stdout
water	64:25	0:0	2	;
