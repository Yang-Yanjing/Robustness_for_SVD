func	2:0	22:0	0	static int	Seek
params	2:15	0:0	1	
param	2:16	2:32	2	access_t *	access
param	2:34	2:51	2	uint64_t	position
stmnts	0:0	21:22	1	
decl	4:4	4:37	2	access_sys_t	*sys
op	4:22	0:0	2	=
water	4:24	0:0	2	access
op	4:30	0:0	2	->
water	4:32	0:0	2	p_sys
decl	5:4	5:11	2	int	ret
if	9:4	10:32	2	(position > INT64_MAX)
cond	9:8	9:19	3	position > INT64_MAX
water	9:8	0:0	4	position
op	9:17	0:0	4	>
water	9:19	0:0	4	INT64_MAX
stmts	10:8	10:32	3	
water	10:8	0:0	4	ret
op	10:12	0:0	4	=
call	10:14	10:31	4	AVERROR
arg	10:22	10:31	5	EOVERFLOW
water	10:22	0:0	6	EOVERFLOW
water	10:32	0:0	4	;
else	11:4	12:57	2
stmts	12:8	12:57	3	
water	12:8	0:0	4	ret
op	12:12	0:0	4	=
call	12:14	12:56	4	avio_seek
arg	12:24	12:36	5	sys->context
water	12:24	0:0	6	sys
op	12:27	0:0	6	->
water	12:29	0:0	6	context
arg	12:38	12:46	5	position
water	12:38	0:0	6	position
arg	12:48	12:56	5	SEEK_SET
water	12:48	0:0	6	SEEK_SET
water	12:57	0:0	4	;
if	13:4	18:4	2	(ret < 0)
cond	13:8	13:14	3	ret < 0
water	13:8	0:0	4	ret
op	13:12	0:0	4	<
water	13:14	0:0	4	0
stmts	13:17	18:4	3	
water	13:17	0:0	4	{
call	14:8	15:46	4	msg_Err
arg	14:16	14:22	5	access
water	14:16	0:0	6	access
arg	14:24	14:54	5	"Seek to %"PRIu64" failed: %s"
water	14:24	0:0	6	"Seek to %"
water	14:35	0:0	6	PRIu64
water	14:41	0:0	6	" failed: %s"
arg	14:56	14:64	5	position
water	14:56	0:0	6	position
arg	15:16	15:46	5	vlc_strerror_c(AVUNERROR(ret))
call	15:16	15:45	6	vlc_strerror_c
arg	15:31	15:45	7	AVUNERROR(ret)
call	15:31	15:44	8	AVUNERROR
arg	15:41	15:44	9	ret
water	15:41	0:0	10	ret
water	15:47	0:0	4	;
if	16:8	17:31	4	(sys -> size == 0 || position != sys -> size)
cond	16:12	16:47	5	sys -> size == 0 || position != sys -> size
water	16:12	0:0	6	sys
op	16:15	0:0	6	->
water	16:17	0:0	6	size
op	16:22	0:0	6	==
water	16:25	0:0	6	0
op	16:27	0:0	6	||
water	16:30	0:0	6	position
op	16:39	0:0	6	!=
water	16:42	0:0	6	sys
op	16:45	0:0	6	->
water	16:47	0:0	6	size
stmts	17:12	17:31	5	
return	17:12	17:31	6	VLC_EGENERIC
water	17:19	0:0	7	VLC_EGENERIC
water	18:4	0:0	4	}
water	19:4	0:0	2	access
op	19:10	0:0	2	->
water	19:12	0:0	2	info
op	19:16	0:0	2	.
water	19:17	0:0	2	i_pos
op	19:23	0:0	2	=
water	19:25	0:0	2	position
water	19:33	0:0	2	;
water	20:4	0:0	2	access
op	20:10	0:0	2	->
water	20:12	0:0	2	info
op	20:16	0:0	2	.
water	20:17	0:0	2	b_eof
op	20:23	0:0	2	=
water	20:25	0:0	2	false
water	20:30	0:0	2	;
return	21:4	21:22	2	VLC_SUCCESS
water	21:11	0:0	3	VLC_SUCCESS
