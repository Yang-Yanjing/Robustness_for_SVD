func	2:0	117:0	0	static sout_stream_id_sys_t *	Add
params	2:33	0:0	1	
param	2:35	2:58	2	sout_stream_t *	p_stream
param	2:60	2:79	2	es_format_t *	p_fmt
stmnts	0:0	116:40	1	
decl	4:4	4:46	2	sout_stream_sys_t	*p_sys
op	4:29	0:0	2	=
water	4:31	0:0	2	p_stream
op	4:39	0:0	2	->
water	4:41	0:0	2	p_sys
decl	5:4	5:22	2	bridge_t	*p_bridge
decl	6:4	6:22	2	bridged_es_t	*p_es
decl	7:4	7:19	2	char	*psz_chain
decl	8:4	8:9	2	int	i
if	9:4	10:19	2	(p_sys -> b_inited || p_fmt -> i_cat != VIDEO_ES)
cond	9:8	9:43	3	p_sys -> b_inited || p_fmt -> i_cat != VIDEO_ES
water	9:8	0:0	4	p_sys
op	9:13	0:0	4	->
water	9:15	0:0	4	b_inited
op	9:24	0:0	4	||
water	9:27	0:0	4	p_fmt
op	9:32	0:0	4	->
water	9:34	0:0	4	i_cat
op	9:40	0:0	4	!=
water	9:43	0:0	4	VIDEO_ES
stmts	10:8	10:19	3	
return	10:8	10:19	4	NULL
water	10:15	0:0	5	NULL
water	12:4	0:0	2	p_sys
op	12:9	0:0	2	->
water	12:11	0:0	2	p_decoder
op	12:21	0:0	2	=
call	12:23	12:72	2	vlc_object_create
arg	12:42	12:50	3	p_stream
water	12:42	0:0	4	p_stream
arg	12:52	12:72	3	sizeof(decoder_t)
op	12:52	0:0	4	sizeof
water	12:58	0:0	4	(
water	12:60	0:0	4	decoder_t
water	12:70	0:0	4	)
water	12:73	0:0	2	;
if	13:4	14:19	2	(! p_sys -> p_decoder)
cond	13:8	13:16	3	! p_sys -> p_decoder
op	13:8	0:0	4	!
water	13:9	0:0	4	p_sys
op	13:14	0:0	4	->
water	13:16	0:0	4	p_decoder
stmts	14:8	14:19	3	
return	14:8	14:19	4	NULL
water	14:15	0:0	5	NULL
water	15:4	0:0	2	p_sys
op	15:9	0:0	2	->
water	15:11	0:0	2	p_decoder
op	15:20	0:0	2	->
water	15:22	0:0	2	p_module
op	15:31	0:0	2	=
water	15:33	0:0	2	NULL
water	15:37	0:0	2	;
water	16:4	0:0	2	p_sys
op	16:9	0:0	2	->
water	16:11	0:0	2	p_decoder
op	16:20	0:0	2	->
water	16:22	0:0	2	fmt_in
op	16:29	0:0	2	=
op	16:31	0:0	2	*
water	16:32	0:0	2	p_fmt
water	16:37	0:0	2	;
water	17:4	0:0	2	p_sys
op	17:9	0:0	2	->
water	17:11	0:0	2	p_decoder
op	17:20	0:0	2	->
water	17:22	0:0	2	b_pace_control
op	17:37	0:0	2	=
water	17:39	0:0	2	false
water	17:44	0:0	2	;
water	18:4	0:0	2	p_sys
op	18:9	0:0	2	->
water	18:11	0:0	2	p_decoder
op	18:20	0:0	2	->
water	18:22	0:0	2	fmt_out
op	18:30	0:0	2	=
water	18:32	0:0	2	p_sys
op	18:37	0:0	2	->
water	18:39	0:0	2	p_decoder
op	18:48	0:0	2	->
water	18:50	0:0	2	fmt_in
water	18:56	0:0	2	;
water	19:4	0:0	2	p_sys
op	19:9	0:0	2	->
water	19:11	0:0	2	p_decoder
op	19:20	0:0	2	->
water	19:22	0:0	2	fmt_out
op	19:29	0:0	2	.
water	19:30	0:0	2	i_extra
op	19:38	0:0	2	=
water	19:40	0:0	2	0
water	19:41	0:0	2	;
water	20:4	0:0	2	p_sys
op	20:9	0:0	2	->
water	20:11	0:0	2	p_decoder
op	20:20	0:0	2	->
water	20:22	0:0	2	fmt_out
op	20:29	0:0	2	.
water	20:30	0:0	2	p_extra
op	20:38	0:0	2	=
water	20:40	0:0	2	0
water	20:41	0:0	2	;
water	21:4	0:0	2	p_sys
op	21:9	0:0	2	->
water	21:11	0:0	2	p_decoder
op	21:20	0:0	2	->
water	21:22	0:0	2	pf_decode_video
op	21:38	0:0	2	=
water	21:40	0:0	2	0
water	21:41	0:0	2	;
water	22:4	0:0	2	p_sys
op	22:9	0:0	2	->
water	22:11	0:0	2	p_decoder
op	22:20	0:0	2	->
water	22:22	0:0	2	pf_vout_buffer_new
op	22:41	0:0	2	=
water	22:43	0:0	2	video_new_buffer_decoder
water	22:67	0:0	2	;
water	23:4	0:0	2	p_sys
op	23:9	0:0	2	->
water	23:11	0:0	2	p_decoder
op	23:20	0:0	2	->
water	23:22	0:0	2	pf_vout_buffer_del
op	23:41	0:0	2	=
water	23:43	0:0	2	video_del_buffer_decoder
water	23:67	0:0	2	;
water	24:4	0:0	2	p_sys
op	24:9	0:0	2	->
water	24:11	0:0	2	p_decoder
op	24:20	0:0	2	->
water	24:22	0:0	2	pf_picture_link
op	24:41	0:0	2	=
water	24:43	0:0	2	video_link_picture_decoder
water	24:69	0:0	2	;
water	25:4	0:0	2	p_sys
op	25:9	0:0	2	->
water	25:11	0:0	2	p_decoder
op	25:20	0:0	2	->
water	25:22	0:0	2	pf_picture_unlink
op	25:41	0:0	2	=
water	25:43	0:0	2	video_unlink_picture_decoder
water	25:71	0:0	2	;
water	26:4	0:0	2	p_sys
op	26:9	0:0	2	->
water	26:11	0:0	2	p_decoder
op	26:20	0:0	2	->
water	26:22	0:0	2	p_owner
op	26:30	0:0	2	=
call	26:32	26:68	2	malloc
arg	26:40	26:68	3	sizeof(decoder_owner_sys_t)
op	26:40	0:0	4	sizeof
water	26:46	0:0	4	(
water	26:47	0:0	4	decoder_owner_sys_t
water	26:66	0:0	4	)
water	26:69	0:0	2	;
if	27:4	31:4	2	(! p_sys -> p_decoder -> p_owner)
cond	27:8	27:27	3	! p_sys -> p_decoder -> p_owner
op	27:8	0:0	4	!
water	27:9	0:0	4	p_sys
op	27:14	0:0	4	->
water	27:16	0:0	4	p_decoder
op	27:25	0:0	4	->
water	27:27	0:0	4	p_owner
stmts	28:4	31:4	3	
water	28:4	0:0	4	{
call	29:8	29:45	4	vlc_object_release
arg	29:28	29:45	5	p_sys->p_decoder
water	29:28	0:0	6	p_sys
op	29:33	0:0	6	->
water	29:35	0:0	6	p_decoder
water	29:46	0:0	4	;
return	30:8	30:19	4	NULL
water	30:15	0:0	5	NULL
water	31:4	0:0	4	}
water	32:4	0:0	2	p_sys
op	32:9	0:0	2	->
water	32:11	0:0	2	p_decoder
op	32:20	0:0	2	->
water	32:22	0:0	2	p_owner
op	32:29	0:0	2	->
water	32:31	0:0	2	video
op	32:37	0:0	2	=
water	32:39	0:0	2	p_fmt
op	32:44	0:0	2	->
water	32:46	0:0	2	video
water	32:51	0:0	2	;
water	34:4	0:0	2	p_sys
op	34:9	0:0	2	->
water	34:11	0:0	2	p_decoder
op	34:20	0:0	2	->
water	34:22	0:0	2	p_module
op	34:31	0:0	2	=
call	35:8	35:66	2	module_need
arg	35:21	35:37	3	p_sys->p_decoder
water	35:21	0:0	4	p_sys
op	35:26	0:0	4	->
water	35:28	0:0	4	p_decoder
arg	35:39	35:48	3	"decoder"
water	35:39	0:0	4	"decoder"
arg	35:50	35:58	3	"$codec"
water	35:50	0:0	4	"$codec"
arg	35:60	35:66	3	false
water	35:60	0:0	4	false
water	35:67	0:0	2	;
if	36:4	50:4	2	(! p_sys -> p_decoder -> p_module || ! p_sys -> p_decoder -> pf_decode_video)
cond	36:8	36:58	3	! p_sys -> p_decoder -> p_module || ! p_sys -> p_decoder -> pf_decode_video
op	36:8	0:0	4	!
water	36:9	0:0	4	p_sys
op	36:14	0:0	4	->
water	36:16	0:0	4	p_decoder
op	36:25	0:0	4	->
water	36:27	0:0	4	p_module
op	36:36	0:0	4	||
op	36:39	0:0	4	!
water	36:40	0:0	4	p_sys
op	36:45	0:0	4	->
water	36:47	0:0	4	p_decoder
op	36:56	0:0	4	->
water	36:58	0:0	4	pf_decode_video
stmts	37:4	50:4	3	
water	37:4	0:0	4	{
if	38:8	42:8	4	(p_sys -> p_decoder -> p_module)
cond	38:12	38:30	5	p_sys -> p_decoder -> p_module
water	38:12	0:0	6	p_sys
op	38:17	0:0	6	->
water	38:19	0:0	6	p_decoder
op	38:28	0:0	6	->
water	38:30	0:0	6	p_module
stmts	39:8	42:8	5	
water	39:8	0:0	6	{
call	40:12	40:66	6	msg_Err
arg	40:21	40:29	7	p_stream
water	40:21	0:0	8	p_stream
arg	40:31	40:66	7	"instanciated a non video decoder"
water	40:31	0:0	8	"instanciated a non video decoder"
water	40:67	0:0	6	;
call	41:12	41:72	6	module_unneed
arg	41:27	41:43	7	p_sys->p_decoder
water	41:27	0:0	8	p_sys
op	41:32	0:0	8	->
water	41:34	0:0	8	p_decoder
arg	41:45	41:72	7	p_sys->p_decoder->p_module
water	41:45	0:0	8	p_sys
op	41:50	0:0	8	->
water	41:52	0:0	8	p_decoder
op	41:61	0:0	8	->
water	41:63	0:0	8	p_module
water	41:73	0:0	6	;
water	42:8	0:0	6	}
else	43:8	46:8	4
stmts	44:8	46:8	5	
water	44:8	0:0	6	{
call	45:12	45:53	6	msg_Err
arg	45:21	45:29	7	p_stream
water	45:21	0:0	8	p_stream
arg	45:31	45:53	7	"cannot find decoder"
water	45:31	0:0	8	"cannot find decoder"
water	45:54	0:0	6	;
water	46:8	0:0	6	}
call	47:8	47:40	4	free
arg	47:14	47:40	5	p_sys->p_decoder->p_owner
water	47:14	0:0	6	p_sys
op	47:19	0:0	6	->
water	47:21	0:0	6	p_decoder
op	47:30	0:0	6	->
water	47:32	0:0	6	p_owner
water	47:41	0:0	4	;
call	48:8	48:45	4	vlc_object_release
arg	48:28	48:45	5	p_sys->p_decoder
water	48:28	0:0	6	p_sys
op	48:33	0:0	6	->
water	48:35	0:0	6	p_decoder
water	48:46	0:0	4	;
return	49:8	49:19	4	NULL
water	49:15	0:0	5	NULL
water	50:4	0:0	4	}
water	51:4	0:0	2	p_sys
op	51:9	0:0	2	->
water	51:11	0:0	2	b_inited
op	51:20	0:0	2	=
water	51:22	0:0	2	true
water	51:26	0:0	2	;
call	52:4	52:38	2	vlc_global_lock
arg	52:21	52:38	3	VLC_MOSAIC_MUTEX
water	52:21	0:0	4	VLC_MOSAIC_MUTEX
water	52:39	0:0	2	;
water	53:4	0:0	2	p_bridge
op	53:13	0:0	2	=
call	53:15	53:35	2	GetBridge
arg	53:26	53:35	3	p_stream
water	53:26	0:0	4	p_stream
water	53:36	0:0	2	;
if	54:4	64:4	2	(p_bridge == NULL)
cond	54:9	54:21	3	p_bridge == NULL
water	54:9	0:0	4	p_bridge
op	54:18	0:0	4	==
water	54:21	0:0	4	NULL
stmts	55:4	64:4	3	
water	55:4	0:0	4	{
decl	56:8	56:65	4	vlc_object_t	*p_libvlc
op	56:31	0:0	4	=
call	56:33	56:64	5	VLC_OBJECT
arg	56:45	56:64	6	p_stream->p_libvlc
water	56:45	0:0	7	p_stream
op	56:53	0:0	7	->
water	56:55	0:0	7	p_libvlc
decl	57:8	57:23	4	vlc_value_t	val
water	58:8	0:0	4	p_bridge
op	58:17	0:0	4	=
call	58:19	58:47	4	xmalloc
arg	58:28	58:47	5	sizeof(bridge_t)
op	58:28	0:0	6	sizeof
water	58:34	0:0	6	(
water	58:36	0:0	6	bridge_t
water	58:45	0:0	6	)
water	58:48	0:0	4	;
call	59:8	59:63	4	var_Create
arg	59:20	59:28	5	p_libvlc
water	59:20	0:0	6	p_libvlc
arg	59:30	59:45	5	"mosaic-struct"
water	59:30	0:0	6	"mosaic-struct"
arg	59:47	59:63	5	VLC_VAR_ADDRESS
water	59:47	0:0	6	VLC_VAR_ADDRESS
water	59:64	0:0	4	;
water	60:8	0:0	4	val
op	60:11	0:0	4	.
water	60:12	0:0	4	p_address
op	60:22	0:0	4	=
water	60:24	0:0	4	p_bridge
water	60:32	0:0	4	;
call	61:8	61:48	4	var_Set
arg	61:17	61:25	5	p_libvlc
water	61:17	0:0	6	p_libvlc
arg	61:27	61:42	5	"mosaic-struct"
water	61:27	0:0	6	"mosaic-struct"
arg	61:44	61:48	5	val
water	61:44	0:0	6	val
water	61:49	0:0	4	;
water	62:8	0:0	4	p_bridge
op	62:16	0:0	4	->
water	62:18	0:0	4	i_es_num
op	62:27	0:0	4	=
water	62:29	0:0	4	0
water	62:30	0:0	4	;
water	63:8	0:0	4	p_bridge
op	63:16	0:0	4	->
water	63:18	0:0	4	pp_es
op	63:24	0:0	4	=
water	63:26	0:0	4	NULL
water	63:30	0:0	4	;
water	64:4	0:0	4	}
for	65:4	69:4	2	(i = 0 ;i < p_bridge -> i_es_num;i ++)
forinit	65:10	65:15	3	i = 0 ;
water	65:10	0:0	4	i
op	65:12	0:0	4	=
water	65:14	0:0	4	0
water	65:15	0:0	4	;
cond	65:17	65:31	3	i < p_bridge -> i_es_num
water	65:17	0:0	4	i
op	65:19	0:0	4	<
water	65:21	0:0	4	p_bridge
op	65:29	0:0	4	->
water	65:31	0:0	4	i_es_num
forexpr	65:41	65:42	3	i ++
water	65:41	0:0	4	i
op	65:42	0:0	4	++
stmts	66:4	69:4	3	
water	66:4	0:0	4	{
if	67:8	68:17	4	(p_bridge -> pp_es [ i ] -> b_empty)
cond	67:13	67:33	5	p_bridge -> pp_es [ i ] -> b_empty
water	67:13	0:0	6	p_bridge
op	67:21	0:0	6	->
water	67:23	0:0	6	pp_es
op	67:28	0:0	6	[
water	67:29	0:0	6	i
op	67:30	0:0	6	]
op	67:31	0:0	6	->
water	67:33	0:0	6	b_empty
stmts	68:12	68:17	5	
break	68:12	68:17	6	
water	69:4	0:0	4	}
if	70:4	76:4	2	(i == p_bridge -> i_es_num)
cond	70:9	70:24	3	i == p_bridge -> i_es_num
water	70:9	0:0	4	i
op	70:11	0:0	4	==
water	70:14	0:0	4	p_bridge
op	70:22	0:0	4	->
water	70:24	0:0	4	i_es_num
stmts	71:4	76:4	3	
water	71:4	0:0	4	{
water	72:8	0:0	4	p_bridge
op	72:16	0:0	4	->
water	72:18	0:0	4	pp_es
op	72:24	0:0	4	=
call	72:26	73:76	4	xrealloc
arg	72:36	72:51	5	p_bridge->pp_es
water	72:36	0:0	6	p_bridge
op	72:44	0:0	6	->
water	72:46	0:0	6	pp_es
arg	73:26	73:76	5	(p_bridge->i_es_num+1)*sizeof(bridged_es_t*)
water	73:26	0:0	6	(
water	73:27	0:0	6	p_bridge
op	73:35	0:0	6	->
water	73:37	0:0	6	i_es_num
op	73:46	0:0	6	+
water	73:48	0:0	6	1
water	73:49	0:0	6	)
op	73:51	0:0	6	*
op	73:53	0:0	6	sizeof
water	73:59	0:0	6	(
water	73:60	0:0	6	bridged_es_t
op	73:73	0:0	6	*
water	73:74	0:0	6	)
water	73:77	0:0	4	;
water	74:8	0:0	4	p_bridge
op	74:16	0:0	4	->
water	74:18	0:0	4	i_es_num
op	74:26	0:0	4	++
water	74:28	0:0	4	;
water	75:8	0:0	4	p_bridge
op	75:16	0:0	4	->
water	75:18	0:0	4	pp_es
op	75:23	0:0	4	[
water	75:24	0:0	4	i
op	75:25	0:0	4	]
op	75:27	0:0	4	=
call	75:29	75:59	4	xmalloc
arg	75:38	75:59	5	sizeof(bridged_es_t)
op	75:38	0:0	6	sizeof
water	75:44	0:0	6	(
water	75:45	0:0	6	bridged_es_t
water	75:57	0:0	6	)
water	75:60	0:0	4	;
water	76:4	0:0	4	}
water	77:4	0:0	2	p_sys
op	77:9	0:0	2	->
water	77:11	0:0	2	p_es
op	77:16	0:0	2	=
water	77:18	0:0	2	p_es
op	77:23	0:0	2	=
water	77:25	0:0	2	p_bridge
op	77:33	0:0	2	->
water	77:35	0:0	2	pp_es
op	77:40	0:0	2	[
water	77:41	0:0	2	i
op	77:42	0:0	2	]
water	77:43	0:0	2	;
water	78:4	0:0	2	p_es
op	78:8	0:0	2	->
water	78:10	0:0	2	i_alpha
op	78:18	0:0	2	=
call	78:20	78:65	2	var_GetInteger
arg	78:36	78:44	3	p_stream
water	78:36	0:0	4	p_stream
arg	78:46	78:65	3	CFG_PREFIX"alpha"
water	78:46	0:0	4	CFG_PREFIX
water	78:57	0:0	4	"alpha"
water	78:66	0:0	2	;
water	79:4	0:0	2	p_es
op	79:8	0:0	2	->
water	79:10	0:0	2	i_x
op	79:14	0:0	2	=
call	79:16	79:57	2	var_GetInteger
arg	79:32	79:40	3	p_stream
water	79:32	0:0	4	p_stream
arg	79:42	79:57	3	CFG_PREFIX"x"
water	79:42	0:0	4	CFG_PREFIX
water	79:53	0:0	4	"x"
water	79:58	0:0	2	;
water	80:4	0:0	2	p_es
op	80:8	0:0	2	->
water	80:10	0:0	2	i_y
op	80:14	0:0	2	=
call	80:16	80:57	2	var_GetInteger
arg	80:32	80:40	3	p_stream
water	80:32	0:0	4	p_stream
arg	80:42	80:57	3	CFG_PREFIX"y"
water	80:42	0:0	4	CFG_PREFIX
water	80:53	0:0	4	"y"
water	80:58	0:0	2	;
water	82:4	0:0	2	p_es
op	82:8	0:0	2	->
water	82:10	0:0	2	psz_id
op	82:17	0:0	2	=
water	82:19	0:0	2	p_sys
op	82:24	0:0	2	->
water	82:26	0:0	2	psz_id
water	82:32	0:0	2	;
water	83:4	0:0	2	p_es
op	83:8	0:0	2	->
water	83:10	0:0	2	p_picture
op	83:20	0:0	2	=
water	83:22	0:0	2	NULL
water	83:26	0:0	2	;
water	84:4	0:0	2	p_es
op	84:8	0:0	2	->
water	84:10	0:0	2	pp_last
op	84:18	0:0	2	=
op	84:20	0:0	2	&
water	84:21	0:0	2	p_es
op	84:25	0:0	2	->
water	84:27	0:0	2	p_picture
water	84:36	0:0	2	;
water	85:4	0:0	2	p_es
op	85:8	0:0	2	->
water	85:10	0:0	2	b_empty
op	85:18	0:0	2	=
water	85:20	0:0	2	false
water	85:25	0:0	2	;
call	86:4	86:40	2	vlc_global_unlock
arg	86:23	86:40	3	VLC_MOSAIC_MUTEX
water	86:23	0:0	4	VLC_MOSAIC_MUTEX
water	86:41	0:0	2	;
if	87:4	90:4	2	(p_sys -> i_height || p_sys -> i_width)
cond	87:9	87:35	3	p_sys -> i_height || p_sys -> i_width
water	87:9	0:0	4	p_sys
op	87:14	0:0	4	->
water	87:16	0:0	4	i_height
op	87:25	0:0	4	||
water	87:28	0:0	4	p_sys
op	87:33	0:0	4	->
water	87:35	0:0	4	i_width
stmts	88:4	90:4	3	
water	88:4	0:0	4	{
water	89:8	0:0	4	p_sys
op	89:13	0:0	4	->
water	89:15	0:0	4	p_image
op	89:23	0:0	4	=
call	89:25	89:55	4	image_HandlerCreate
arg	89:46	89:55	5	p_stream
water	89:46	0:0	6	p_stream
water	89:56	0:0	4	;
water	90:4	0:0	4	}
else	91:4	94:4	2
stmts	92:4	94:4	3	
water	92:4	0:0	4	{
water	93:8	0:0	4	p_sys
op	93:13	0:0	4	->
water	93:15	0:0	4	p_image
op	93:23	0:0	4	=
water	93:25	0:0	4	NULL
water	93:29	0:0	4	;
water	94:4	0:0	4	}
call	95:4	95:69	2	msg_Dbg
arg	95:13	95:21	3	p_stream
water	95:13	0:0	4	p_stream
arg	95:23	95:51	3	"mosaic bridge id=%s pos=%d"
water	95:23	0:0	4	"mosaic bridge id=%s pos=%d"
arg	95:53	95:65	3	p_es->psz_id
water	95:53	0:0	4	p_es
op	95:57	0:0	4	->
water	95:59	0:0	4	psz_id
arg	95:67	95:69	3	i
water	95:67	0:0	4	i
water	95:70	0:0	2	;
water	97:4	0:0	2	psz_chain
op	97:14	0:0	2	=
call	97:16	97:70	2	var_GetNonEmptyString
arg	97:39	97:47	3	p_stream
water	97:39	0:0	4	p_stream
arg	97:49	97:70	3	CFG_PREFIX"vfilter"
water	97:49	0:0	4	CFG_PREFIX
water	97:60	0:0	4	"vfilter"
water	97:71	0:0	2	;
call	98:4	98:50	2	msg_Dbg
arg	98:13	98:21	3	p_stream
water	98:13	0:0	4	p_stream
arg	98:23	98:38	3	"psz_chain: %s"
water	98:23	0:0	4	"psz_chain: %s"
arg	98:40	98:50	3	psz_chain
water	98:40	0:0	4	psz_chain
water	98:51	0:0	2	;
if	99:4	111:4	2	(psz_chain)
cond	99:8	99:8	3	psz_chain
water	99:8	0:0	4	psz_chain
stmts	100:4	111:4	3	
water	100:4	0:0	4	{
water	101:8	0:0	4	p_sys
op	101:13	0:0	4	->
water	101:15	0:0	4	p_vf2
op	101:21	0:0	4	=
call	101:23	103:73	4	filter_chain_New
arg	101:41	101:49	5	p_stream
water	101:41	0:0	6	p_stream
arg	101:51	101:66	5	"video filter2"
water	101:51	0:0	6	"video filter2"
arg	101:68	101:73	5	false
water	101:68	0:0	6	false
arg	102:41	102:76	5	video_filter_buffer_allocation_init
water	102:41	0:0	6	video_filter_buffer_allocation_init
arg	103:41	103:45	5	NULL
water	103:41	0:0	6	NULL
arg	103:47	103:73	5	p_sys->p_decoder->p_owner
water	103:47	0:0	6	p_sys
op	103:52	0:0	6	->
water	103:54	0:0	6	p_decoder
op	103:63	0:0	6	->
water	103:65	0:0	6	p_owner
water	103:74	0:0	4	;
decl	104:8	104:23	4	es_format_t	fmt
call	105:8	105:57	4	es_format_Copy
arg	105:24	105:28	5	&fmt
op	105:24	0:0	6	&
water	105:25	0:0	6	fmt
arg	105:30	105:57	5	&p_sys->p_decoder->fmt_out
op	105:30	0:0	6	&
water	105:31	0:0	6	p_sys
op	105:36	0:0	6	->
water	105:38	0:0	6	p_decoder
op	105:47	0:0	6	->
water	105:49	0:0	6	fmt_out
water	105:58	0:0	4	;
if	106:8	107:48	4	(p_sys -> i_chroma)
cond	106:12	106:19	5	p_sys -> i_chroma
water	106:12	0:0	6	p_sys
op	106:17	0:0	6	->
water	106:19	0:0	6	i_chroma
stmts	107:12	107:48	5	
water	107:12	0:0	6	fmt
op	107:15	0:0	6	.
water	107:16	0:0	6	video
op	107:21	0:0	6	.
water	107:22	0:0	6	i_chroma
op	107:31	0:0	6	=
water	107:33	0:0	6	p_sys
op	107:38	0:0	6	->
water	107:40	0:0	6	i_chroma
water	107:48	0:0	6	;
call	108:8	108:53	4	filter_chain_Reset
arg	108:28	108:40	5	p_sys->p_vf2
water	108:28	0:0	6	p_sys
op	108:33	0:0	6	->
water	108:35	0:0	6	p_vf2
arg	108:42	108:46	5	&fmt
op	108:42	0:0	6	&
water	108:43	0:0	6	fmt
arg	108:48	108:53	5	&fmt
op	108:48	0:0	6	&
water	108:49	0:0	6	fmt
water	108:54	0:0	4	;
call	109:8	109:63	4	filter_chain_AppendFromString
arg	109:39	109:51	5	p_sys->p_vf2
water	109:39	0:0	6	p_sys
op	109:44	0:0	6	->
water	109:46	0:0	6	p_vf2
arg	109:53	109:63	5	psz_chain
water	109:53	0:0	6	psz_chain
water	109:64	0:0	4	;
call	110:8	110:24	4	free
arg	110:14	110:24	5	psz_chain
water	110:14	0:0	6	psz_chain
water	110:25	0:0	4	;
water	111:4	0:0	4	}
else	112:4	115:4	2
stmts	113:4	115:4	3	
water	113:4	0:0	4	{
water	114:8	0:0	4	p_sys
op	114:13	0:0	4	->
water	114:15	0:0	4	p_vf2
op	114:21	0:0	4	=
water	114:23	0:0	4	NULL
water	114:27	0:0	4	;
water	115:4	0:0	4	}
return	116:4	116:40	2	(sout_stream_id_sys_t*)p_sys
water	116:11	0:0	3	(
water	116:12	0:0	3	sout_stream_id_sys_t
op	116:33	0:0	3	*
water	116:34	0:0	3	)
water	116:35	0:0	3	p_sys
