func	2:0	232:0	0	static void	FilterBall
params	2:22	0:0	1	
param	2:24	2:42	2	filter_t *	p_filter
param	2:44	2:62	2	picture_t *	p_inpic
param	3:27	3:47	2	picture_t *	p_outpic
stmnts	0:0	231:4	1	
decl	5:4	5:12	2	int	x
water	5:9	0:0	2	,
decl	5:4	5:12	2	int	y
decl	6:4	6:41	2	filter_sys_t	*p_sys
op	6:24	0:0	2	=
water	6:26	0:0	2	p_filter
op	6:34	0:0	2	->
water	6:36	0:0	2	p_sys
decl	7:4	7:22	2	uint32_t	*p_smooth
decl	8:4	8:21	2	int32_t	*p_grad_x
decl	9:4	9:21	2	int32_t	*p_grad_y
decl	10:4	10:26	2	picture_t	*p_converted
decl	11:4	11:27	2	video_format_t	fmt_comp
call	12:4	12:43	2	memset
arg	12:12	12:21	3	&fmt_comp
op	12:12	0:0	4	&
water	12:13	0:0	4	fmt_comp
arg	12:23	12:24	3	0
water	12:23	0:0	4	0
arg	12:26	12:43	3	sizeof(fmt_comp)
op	12:26	0:0	4	sizeof
water	12:32	0:0	4	(
water	12:33	0:0	4	fmt_comp
water	12:41	0:0	4	)
water	12:44	0:0	2	;
switch	13:4	31:4	2	(p_filter -> fmt_in . video . i_chroma)
cond	13:12	13:35	3	p_filter -> fmt_in . video . i_chroma
water	13:12	0:0	4	p_filter
op	13:20	0:0	4	->
water	13:22	0:0	4	fmt_in
op	13:28	0:0	4	.
water	13:29	0:0	4	video
op	13:34	0:0	4	.
water	13:35	0:0	4	i_chroma
stmts	14:4	31:4	3	
water	14:4	0:0	4	{
label	15:8	15:28	4	case VLC_CODEC_RGB24 :
water	16:8	0:0	4	CASE_PACKED_YUV_422
water	17:12	0:0	4	fmt_comp
op	17:20	0:0	4	.
water	17:21	0:0	4	i_width
op	17:29	0:0	4	=
water	17:31	0:0	4	p_filter
op	17:39	0:0	4	->
water	17:41	0:0	4	fmt_in
op	17:47	0:0	4	.
water	17:48	0:0	4	video
op	17:53	0:0	4	.
water	17:54	0:0	4	i_width
water	17:61	0:0	4	;
water	18:12	0:0	4	fmt_comp
op	18:20	0:0	4	.
water	18:21	0:0	4	i_height
op	18:30	0:0	4	=
water	18:32	0:0	4	p_filter
op	18:40	0:0	4	->
water	18:42	0:0	4	fmt_in
op	18:48	0:0	4	.
water	18:49	0:0	4	video
op	18:54	0:0	4	.
water	18:55	0:0	4	i_height
water	18:63	0:0	4	;
water	19:12	0:0	4	fmt_comp
op	19:20	0:0	4	.
water	19:21	0:0	4	i_chroma
op	19:30	0:0	4	=
call	19:32	19:58	4	VLC_FOURCC
arg	19:43	19:46	5	'G'
water	19:43	0:0	6	'G'
arg	19:47	19:50	5	'R'
water	19:47	0:0	6	'R'
arg	19:51	19:54	5	'E'
water	19:51	0:0	6	'E'
arg	19:55	19:58	5	'Y'
water	19:55	0:0	6	'Y'
water	19:59	0:0	4	;
water	20:12	0:0	4	fmt_comp
op	20:20	0:0	4	.
water	20:21	0:0	4	i_visible_width
op	20:37	0:0	4	=
water	20:39	0:0	4	fmt_comp
op	20:47	0:0	4	.
water	20:48	0:0	4	i_width
water	20:55	0:0	4	;
water	21:12	0:0	4	fmt_comp
op	21:20	0:0	4	.
water	21:21	0:0	4	i_visible_height
op	21:38	0:0	4	=
water	21:40	0:0	4	fmt_comp
op	21:48	0:0	4	.
water	21:49	0:0	4	i_height
water	21:57	0:0	4	;
water	22:12	0:0	4	p_converted
op	22:24	0:0	4	=
call	22:26	24:51	4	image_Convert
arg	22:41	22:65	5	p_filter->p_sys->p_image
water	22:41	0:0	6	p_filter
op	22:49	0:0	6	->
water	22:51	0:0	6	p_sys
op	22:56	0:0	6	->
water	22:58	0:0	6	p_image
arg	22:67	22:74	5	p_inpic
water	22:67	0:0	6	p_inpic
arg	23:41	23:66	5	&(p_filter->fmt_in.video)
op	23:41	0:0	6	&
water	23:42	0:0	6	(
water	23:43	0:0	6	p_filter
op	23:51	0:0	6	->
water	23:53	0:0	6	fmt_in
op	23:59	0:0	6	.
water	23:60	0:0	6	video
water	23:65	0:0	6	)
arg	24:41	24:51	5	&fmt_comp
op	24:41	0:0	6	&
water	24:42	0:0	6	fmt_comp
water	24:52	0:0	4	;
if	25:12	26:22	4	(! p_converted)
cond	25:16	25:17	5	! p_converted
op	25:16	0:0	6	!
water	25:17	0:0	6	p_converted
stmts	26:16	26:22	5	
return	26:16	26:22	6	
break	27:12	27:17	4	
label	28:8	28:15	4	default :
water	29:12	0:0	4	p_converted
op	29:24	0:0	4	=
water	29:26	0:0	4	p_inpic
water	29:33	0:0	4	;
break	30:12	30:17	4	
water	31:4	0:0	4	}
decl	32:4	32:59	2	const int	i_numCols
op	32:24	0:0	2	=
water	32:26	0:0	2	p_converted
op	32:37	0:0	2	->
water	32:39	0:0	2	p
op	32:40	0:0	2	[
water	32:41	0:0	2	0
op	32:42	0:0	2	]
op	32:43	0:0	2	.
water	32:44	0:0	2	i_visible_pitch
decl	33:4	33:60	2	const int	i_numLines
op	33:25	0:0	2	=
water	33:27	0:0	2	p_converted
op	33:38	0:0	2	->
water	33:40	0:0	2	p
op	33:41	0:0	2	[
water	33:42	0:0	2	0
op	33:43	0:0	2	]
op	33:44	0:0	2	.
water	33:45	0:0	2	i_visible_lines
if	34:4	37:55	2	(! p_filter -> p_sys -> p_smooth)
cond	34:8	34:26	3	! p_filter -> p_sys -> p_smooth
op	34:8	0:0	4	!
water	34:9	0:0	4	p_filter
op	34:17	0:0	4	->
water	34:19	0:0	4	p_sys
op	34:24	0:0	4	->
water	34:26	0:0	4	p_smooth
stmts	35:8	37:55	3	
water	35:8	0:0	4	p_filter
op	35:16	0:0	4	->
water	35:18	0:0	4	p_sys
op	35:23	0:0	4	->
water	35:25	0:0	4	p_smooth
op	35:34	0:0	4	=
water	36:16	0:0	4	(
water	36:17	0:0	4	uint32_t
op	36:26	0:0	4	*
water	36:27	0:0	4	)
call	36:28	37:54	4	malloc
arg	36:36	37:54	5	i_numLines*i_numCols*sizeof(uint32_t)
water	36:36	0:0	6	i_numLines
op	36:47	0:0	6	*
water	36:49	0:0	6	i_numCols
op	37:36	0:0	6	*
op	37:38	0:0	6	sizeof
water	37:44	0:0	6	(
water	37:45	0:0	6	uint32_t
water	37:53	0:0	6	)
water	37:55	0:0	4	;
water	38:4	0:0	2	p_smooth
op	38:13	0:0	2	=
water	38:15	0:0	2	p_filter
op	38:23	0:0	2	->
water	38:25	0:0	2	p_sys
op	38:30	0:0	2	->
water	38:32	0:0	2	p_smooth
water	38:40	0:0	2	;
if	39:4	42:53	2	(! p_filter -> p_sys -> p_grad_x)
cond	39:8	39:26	3	! p_filter -> p_sys -> p_grad_x
op	39:8	0:0	4	!
water	39:9	0:0	4	p_filter
op	39:17	0:0	4	->
water	39:19	0:0	4	p_sys
op	39:24	0:0	4	->
water	39:26	0:0	4	p_grad_x
stmts	40:8	42:53	3	
water	40:8	0:0	4	p_filter
op	40:16	0:0	4	->
water	40:18	0:0	4	p_sys
op	40:23	0:0	4	->
water	40:25	0:0	4	p_grad_x
op	40:34	0:0	4	=
water	41:16	0:0	4	(
water	41:17	0:0	4	int32_t
op	41:25	0:0	4	*
water	41:26	0:0	4	)
call	41:27	42:52	4	malloc
arg	41:35	42:52	5	i_numLines*i_numCols*sizeof(int32_t)
water	41:35	0:0	6	i_numLines
op	41:46	0:0	6	*
water	41:48	0:0	6	i_numCols
op	42:35	0:0	6	*
op	42:37	0:0	6	sizeof
water	42:43	0:0	6	(
water	42:44	0:0	6	int32_t
water	42:51	0:0	6	)
water	42:53	0:0	4	;
water	43:4	0:0	2	p_grad_x
op	43:13	0:0	2	=
water	43:15	0:0	2	p_filter
op	43:23	0:0	2	->
water	43:25	0:0	2	p_sys
op	43:30	0:0	2	->
water	43:32	0:0	2	p_grad_x
water	43:40	0:0	2	;
if	44:4	47:53	2	(! p_filter -> p_sys -> p_grad_y)
cond	44:8	44:26	3	! p_filter -> p_sys -> p_grad_y
op	44:8	0:0	4	!
water	44:9	0:0	4	p_filter
op	44:17	0:0	4	->
water	44:19	0:0	4	p_sys
op	44:24	0:0	4	->
water	44:26	0:0	4	p_grad_y
stmts	45:8	47:53	3	
water	45:8	0:0	4	p_filter
op	45:16	0:0	4	->
water	45:18	0:0	4	p_sys
op	45:23	0:0	4	->
water	45:25	0:0	4	p_grad_y
op	45:34	0:0	4	=
water	46:16	0:0	4	(
water	46:17	0:0	4	int32_t
op	46:25	0:0	4	*
water	46:26	0:0	4	)
call	46:27	47:52	4	malloc
arg	46:35	47:52	5	i_numLines*i_numCols*sizeof(int32_t)
water	46:35	0:0	6	i_numLines
op	46:46	0:0	6	*
water	46:48	0:0	6	i_numCols
op	47:35	0:0	6	*
op	47:37	0:0	6	sizeof
water	47:43	0:0	6	(
water	47:44	0:0	6	int32_t
water	47:51	0:0	6	)
water	47:53	0:0	4	;
water	48:4	0:0	2	p_grad_y
op	48:13	0:0	2	=
water	48:15	0:0	2	p_filter
op	48:23	0:0	2	->
water	48:25	0:0	2	p_sys
op	48:30	0:0	2	->
water	48:32	0:0	2	p_grad_y
water	48:40	0:0	2	;
if	49:4	49:52	2	(! p_smooth || ! p_grad_x || ! p_grad_y)
cond	49:8	49:35	3	! p_smooth || ! p_grad_x || ! p_grad_y
op	49:8	0:0	4	!
water	49:9	0:0	4	p_smooth
op	49:18	0:0	4	||
op	49:21	0:0	4	!
water	49:22	0:0	4	p_grad_x
op	49:31	0:0	4	||
op	49:34	0:0	4	!
water	49:35	0:0	4	p_grad_y
stmts	49:46	49:52	3	
return	49:46	49:52	4	
call	50:4	51:64	2	memcpy
arg	50:12	50:35	3	p_outpic->p[0].p_pixels
water	50:12	0:0	4	p_outpic
op	50:20	0:0	4	->
water	50:22	0:0	4	p
op	50:23	0:0	4	[
water	50:24	0:0	4	0
op	50:25	0:0	4	]
op	50:26	0:0	4	.
water	50:27	0:0	4	p_pixels
arg	50:37	50:59	3	p_inpic->p[0].p_pixels
water	50:37	0:0	4	p_inpic
op	50:44	0:0	4	->
water	50:46	0:0	4	p
op	50:47	0:0	4	[
water	50:48	0:0	4	0
op	50:49	0:0	4	]
op	50:50	0:0	4	.
water	50:51	0:0	4	p_pixels
arg	51:16	51:64	3	p_outpic->p[0].i_lines*p_outpic->p[0].i_pitch
water	51:16	0:0	4	p_outpic
op	51:24	0:0	4	->
water	51:26	0:0	4	p
op	51:27	0:0	4	[
water	51:28	0:0	4	0
op	51:29	0:0	4	]
op	51:30	0:0	4	.
water	51:31	0:0	4	i_lines
op	51:39	0:0	4	*
water	51:41	0:0	4	p_outpic
op	51:49	0:0	4	->
water	51:51	0:0	4	p
op	51:52	0:0	4	[
water	51:53	0:0	4	0
op	51:54	0:0	4	]
op	51:55	0:0	4	.
water	51:56	0:0	4	i_pitch
water	51:65	0:0	2	;
call	52:4	53:64	2	memcpy
arg	52:12	52:35	3	p_outpic->p[1].p_pixels
water	52:12	0:0	4	p_outpic
op	52:20	0:0	4	->
water	52:22	0:0	4	p
op	52:23	0:0	4	[
water	52:24	0:0	4	1
op	52:25	0:0	4	]
op	52:26	0:0	4	.
water	52:27	0:0	4	p_pixels
arg	52:37	52:59	3	p_inpic->p[1].p_pixels
water	52:37	0:0	4	p_inpic
op	52:44	0:0	4	->
water	52:46	0:0	4	p
op	52:47	0:0	4	[
water	52:48	0:0	4	1
op	52:49	0:0	4	]
op	52:50	0:0	4	.
water	52:51	0:0	4	p_pixels
arg	53:16	53:64	3	p_outpic->p[1].i_lines*p_outpic->p[1].i_pitch
water	53:16	0:0	4	p_outpic
op	53:24	0:0	4	->
water	53:26	0:0	4	p
op	53:27	0:0	4	[
water	53:28	0:0	4	1
op	53:29	0:0	4	]
op	53:30	0:0	4	.
water	53:31	0:0	4	i_lines
op	53:39	0:0	4	*
water	53:41	0:0	4	p_outpic
op	53:49	0:0	4	->
water	53:51	0:0	4	p
op	53:52	0:0	4	[
water	53:53	0:0	4	1
op	53:54	0:0	4	]
op	53:55	0:0	4	.
water	53:56	0:0	4	i_pitch
water	53:65	0:0	2	;
call	54:4	55:64	2	memcpy
arg	54:12	54:35	3	p_outpic->p[2].p_pixels
water	54:12	0:0	4	p_outpic
op	54:20	0:0	4	->
water	54:22	0:0	4	p
op	54:23	0:0	4	[
water	54:24	0:0	4	2
op	54:25	0:0	4	]
op	54:26	0:0	4	.
water	54:27	0:0	4	p_pixels
arg	54:37	54:59	3	p_inpic->p[2].p_pixels
water	54:37	0:0	4	p_inpic
op	54:44	0:0	4	->
water	54:46	0:0	4	p
op	54:47	0:0	4	[
water	54:48	0:0	4	2
op	54:49	0:0	4	]
op	54:50	0:0	4	.
water	54:51	0:0	4	p_pixels
arg	55:16	55:64	3	p_outpic->p[2].i_lines*p_outpic->p[2].i_pitch
water	55:16	0:0	4	p_outpic
op	55:24	0:0	4	->
water	55:26	0:0	4	p
op	55:27	0:0	4	[
water	55:28	0:0	4	2
op	55:29	0:0	4	]
op	55:30	0:0	4	.
water	55:31	0:0	4	i_lines
op	55:39	0:0	4	*
water	55:41	0:0	4	p_outpic
op	55:49	0:0	4	->
water	55:51	0:0	4	p
op	55:52	0:0	4	[
water	55:53	0:0	4	2
op	55:54	0:0	4	]
op	55:55	0:0	4	.
water	55:56	0:0	4	i_pitch
water	55:65	0:0	2	;
call	56:4	56:47	2	GaussianConvolution
arg	56:25	56:36	3	p_converted
water	56:25	0:0	4	p_converted
arg	56:38	56:47	3	p_smooth
water	56:38	0:0	4	p_smooth
water	56:48	0:0	2	;
for	61:4	80:4	2	(y = 1 ;y < i_numLines - 1;y ++)
forinit	61:9	61:14	3	y = 1 ;
water	61:9	0:0	4	y
op	61:11	0:0	4	=
water	61:13	0:0	4	1
water	61:14	0:0	4	;
cond	61:16	61:33	3	y < i_numLines - 1
water	61:16	0:0	4	y
op	61:18	0:0	4	<
water	61:20	0:0	4	i_numLines
op	61:31	0:0	4	-
water	61:33	0:0	4	1
forexpr	61:36	61:37	3	y ++
water	61:36	0:0	4	y
op	61:37	0:0	4	++
stmts	62:4	80:4	3	
water	62:4	0:0	4	{
for	63:8	79:8	4	(x = 1 ;x < i_numCols - 1;x ++)
forinit	63:13	63:18	5	x = 1 ;
water	63:13	0:0	6	x
op	63:15	0:0	6	=
water	63:17	0:0	6	1
water	63:18	0:0	6	;
cond	63:20	63:36	5	x < i_numCols - 1
water	63:20	0:0	6	x
op	63:22	0:0	6	<
water	63:24	0:0	6	i_numCols
op	63:34	0:0	6	-
water	63:36	0:0	6	1
forexpr	63:39	63:40	5	x ++
water	63:39	0:0	6	x
op	63:40	0:0	6	++
stmts	64:8	79:8	5	
water	64:8	0:0	6	{
water	65:12	0:0	6	p_grad_x
op	65:20	0:0	6	[
water	65:22	0:0	6	y
op	65:24	0:0	6	*
water	65:26	0:0	6	i_numCols
op	65:36	0:0	6	+
water	65:38	0:0	6	x
op	65:40	0:0	6	]
op	65:42	0:0	6	=
water	66:20	0:0	6	(
water	66:22	0:0	6	p_smooth
op	66:30	0:0	6	[
water	66:31	0:0	6	(
water	66:32	0:0	6	y
op	66:33	0:0	6	-
water	66:34	0:0	6	1
water	66:35	0:0	6	)
op	66:36	0:0	6	*
water	66:37	0:0	6	i_numCols
op	66:46	0:0	6	+
water	66:47	0:0	6	x
op	66:48	0:0	6	-
water	66:49	0:0	6	1
op	66:50	0:0	6	]
op	67:20	0:0	6	-
water	67:22	0:0	6	p_smooth
op	67:30	0:0	6	[
water	67:31	0:0	6	(
water	67:32	0:0	6	y
op	67:33	0:0	6	+
water	67:34	0:0	6	1
water	67:35	0:0	6	)
op	67:36	0:0	6	*
water	67:37	0:0	6	i_numCols
op	67:46	0:0	6	+
water	67:47	0:0	6	x
op	67:48	0:0	6	-
water	67:49	0:0	6	1
op	67:50	0:0	6	]
water	67:52	0:0	6	)
op	68:20	0:0	6	+
water	68:22	0:0	6	(
water	68:24	0:0	6	(
water	68:26	0:0	6	p_smooth
op	68:34	0:0	6	[
water	68:35	0:0	6	(
water	68:36	0:0	6	y
op	68:37	0:0	6	-
water	68:38	0:0	6	1
water	68:39	0:0	6	)
op	68:40	0:0	6	*
water	68:41	0:0	6	i_numCols
op	68:50	0:0	6	+
water	68:51	0:0	6	x
op	68:52	0:0	6	]
op	69:20	0:0	6	-
water	69:22	0:0	6	p_smooth
op	69:30	0:0	6	[
water	69:31	0:0	6	(
water	69:32	0:0	6	y
op	69:33	0:0	6	+
water	69:34	0:0	6	1
water	69:35	0:0	6	)
op	69:36	0:0	6	*
water	69:37	0:0	6	i_numCols
op	69:46	0:0	6	+
water	69:47	0:0	6	x
op	69:48	0:0	6	]
water	69:50	0:0	6	)
op	69:52	0:0	6	<<
water	69:54	0:0	6	1
water	69:56	0:0	6	)
op	70:20	0:0	6	+
water	70:22	0:0	6	(
water	70:24	0:0	6	p_smooth
op	70:32	0:0	6	[
water	70:33	0:0	6	(
water	70:34	0:0	6	y
op	70:35	0:0	6	-
water	70:36	0:0	6	1
water	70:37	0:0	6	)
op	70:38	0:0	6	*
water	70:39	0:0	6	i_numCols
op	70:48	0:0	6	+
water	70:49	0:0	6	x
op	70:50	0:0	6	+
water	70:51	0:0	6	1
op	70:52	0:0	6	]
op	71:20	0:0	6	-
water	71:22	0:0	6	p_smooth
op	71:30	0:0	6	[
water	71:31	0:0	6	(
water	71:32	0:0	6	y
op	71:33	0:0	6	+
water	71:34	0:0	6	1
water	71:35	0:0	6	)
op	71:36	0:0	6	*
water	71:37	0:0	6	i_numCols
op	71:46	0:0	6	+
water	71:47	0:0	6	x
op	71:48	0:0	6	+
water	71:49	0:0	6	1
op	71:50	0:0	6	]
water	71:52	0:0	6	)
water	71:53	0:0	6	;
water	72:12	0:0	6	p_grad_y
op	72:20	0:0	6	[
water	72:22	0:0	6	y
op	72:24	0:0	6	*
water	72:26	0:0	6	i_numCols
op	72:36	0:0	6	+
water	72:38	0:0	6	x
op	72:40	0:0	6	]
op	72:42	0:0	6	=
water	73:20	0:0	6	(
water	73:22	0:0	6	p_smooth
op	73:30	0:0	6	[
water	73:31	0:0	6	(
water	73:32	0:0	6	y
op	73:33	0:0	6	-
water	73:34	0:0	6	1
water	73:35	0:0	6	)
op	73:36	0:0	6	*
water	73:37	0:0	6	i_numCols
op	73:46	0:0	6	+
water	73:47	0:0	6	x
op	73:48	0:0	6	-
water	73:49	0:0	6	1
op	73:50	0:0	6	]
op	74:20	0:0	6	-
water	74:22	0:0	6	p_smooth
op	74:30	0:0	6	[
water	74:31	0:0	6	(
water	74:32	0:0	6	y
op	74:33	0:0	6	-
water	74:34	0:0	6	1
water	74:35	0:0	6	)
op	74:36	0:0	6	*
water	74:37	0:0	6	i_numCols
op	74:46	0:0	6	+
water	74:47	0:0	6	x
op	74:48	0:0	6	+
water	74:49	0:0	6	1
op	74:50	0:0	6	]
water	74:52	0:0	6	)
op	75:20	0:0	6	+
water	75:22	0:0	6	(
water	75:24	0:0	6	(
water	75:26	0:0	6	p_smooth
op	75:34	0:0	6	[
water	75:35	0:0	6	y
op	75:36	0:0	6	*
water	75:37	0:0	6	i_numCols
op	75:46	0:0	6	+
water	75:47	0:0	6	x
op	75:48	0:0	6	-
water	75:49	0:0	6	1
op	75:50	0:0	6	]
op	76:20	0:0	6	-
water	76:22	0:0	6	p_smooth
op	76:30	0:0	6	[
water	76:31	0:0	6	y
op	76:32	0:0	6	*
water	76:33	0:0	6	i_numCols
op	76:42	0:0	6	+
water	76:43	0:0	6	x
op	76:44	0:0	6	+
water	76:45	0:0	6	1
op	76:46	0:0	6	]
water	76:48	0:0	6	)
op	76:50	0:0	6	<<
water	76:52	0:0	6	1
water	76:54	0:0	6	)
op	77:20	0:0	6	+
water	77:22	0:0	6	(
water	77:24	0:0	6	p_smooth
op	77:32	0:0	6	[
water	77:33	0:0	6	(
water	77:34	0:0	6	y
op	77:35	0:0	6	+
water	77:36	0:0	6	1
water	77:37	0:0	6	)
op	77:38	0:0	6	*
water	77:39	0:0	6	i_numCols
op	77:48	0:0	6	+
water	77:49	0:0	6	x
op	77:50	0:0	6	-
water	77:51	0:0	6	1
op	77:52	0:0	6	]
op	78:20	0:0	6	-
water	78:22	0:0	6	p_smooth
op	78:30	0:0	6	[
water	78:31	0:0	6	(
water	78:32	0:0	6	y
op	78:33	0:0	6	+
water	78:34	0:0	6	1
water	78:35	0:0	6	)
op	78:36	0:0	6	*
water	78:37	0:0	6	i_numCols
op	78:46	0:0	6	+
water	78:47	0:0	6	x
op	78:48	0:0	6	+
water	78:49	0:0	6	1
op	78:50	0:0	6	]
water	78:52	0:0	6	)
water	78:53	0:0	6	;
water	79:8	0:0	6	}
water	80:4	0:0	4	}
if	81:4	100:4	2	(p_sys -> b_edgeVisible)
cond	81:8	81:15	3	p_sys -> b_edgeVisible
water	81:8	0:0	4	p_sys
op	81:13	0:0	4	->
water	81:15	0:0	4	b_edgeVisible
stmts	82:4	100:4	3	
water	82:4	0:0	4	{
for	84:8	99:8	4	(y = 1 ;y < i_numLines - 1;y ++)
forinit	84:13	84:18	5	y = 1 ;
water	84:13	0:0	6	y
op	84:15	0:0	6	=
water	84:17	0:0	6	1
water	84:18	0:0	6	;
cond	84:20	84:37	5	y < i_numLines - 1
water	84:20	0:0	6	y
op	84:22	0:0	6	<
water	84:24	0:0	6	i_numLines
op	84:35	0:0	6	-
water	84:37	0:0	6	1
forexpr	84:40	84:41	5	y ++
water	84:40	0:0	6	y
op	84:41	0:0	6	++
stmts	85:8	99:8	5	
water	85:8	0:0	6	{
for	86:12	98:12	6	(x = 1 ;x < i_numCols - 1;x ++)
forinit	86:17	86:22	7	x = 1 ;
water	86:17	0:0	8	x
op	86:19	0:0	8	=
water	86:21	0:0	8	1
water	86:22	0:0	8	;
cond	86:24	86:40	7	x < i_numCols - 1
water	86:24	0:0	8	x
op	86:26	0:0	8	<
water	86:28	0:0	8	i_numCols
op	86:38	0:0	8	-
water	86:40	0:0	8	1
forexpr	86:43	86:44	7	x ++
water	86:43	0:0	8	x
op	86:44	0:0	8	++
stmts	87:12	98:12	7	
water	87:12	0:0	8	{
if	88:16	97:16	8	(abs (p_grad_x [ y * i_numCols + x ] ) +abs (p_grad_y [ y * i_numCols + x ] ) > p_sys -> i_gradThresh)
cond	88:20	90:29	9	abs (p_grad_x [ y * i_numCols + x ] ) +abs (p_grad_y [ y * i_numCols + x ] ) > p_sys -> i_gradThresh
call	88:20	88:55	10	abs
arg	88:25	88:55	11	p_grad_x[y*i_numCols+x]
water	88:25	0:0	12	p_grad_x
op	88:33	0:0	12	[
water	88:35	0:0	12	y
op	88:37	0:0	12	*
water	88:39	0:0	12	i_numCols
op	88:49	0:0	12	+
water	88:51	0:0	12	x
op	88:53	0:0	12	]
op	89:20	0:0	10	+
call	89:22	89:57	10	abs
arg	89:27	89:57	11	p_grad_y[y*i_numCols+x]
water	89:27	0:0	12	p_grad_y
op	89:35	0:0	12	[
water	89:37	0:0	12	y
op	89:39	0:0	12	*
water	89:41	0:0	12	i_numCols
op	89:51	0:0	12	+
water	89:53	0:0	12	x
op	89:55	0:0	12	]
op	90:20	0:0	10	>
water	90:22	0:0	10	p_sys
op	90:27	0:0	10	->
water	90:29	0:0	10	i_gradThresh
stmts	91:16	97:16	9	
water	91:16	0:0	10	{
call	92:20	96:62	10	(*p_sys->drawingPixelFunction)
arg	92:54	92:59	11	p_sys
water	92:54	0:0	12	p_sys
arg	92:61	92:69	11	p_outpic
water	92:61	0:0	12	p_outpic
arg	93:54	93:95	11	p_filter->p_sys->colorList[WHITE].comp1
water	93:54	0:0	12	p_filter
op	93:62	0:0	12	->
water	93:64	0:0	12	p_sys
op	93:69	0:0	12	->
water	93:71	0:0	12	colorList
op	93:80	0:0	12	[
water	93:82	0:0	12	WHITE
op	93:88	0:0	12	]
op	93:89	0:0	12	.
water	93:90	0:0	12	comp1
arg	94:54	94:95	11	p_filter->p_sys->colorList[WHITE].comp2
water	94:54	0:0	12	p_filter
op	94:62	0:0	12	->
water	94:64	0:0	12	p_sys
op	94:69	0:0	12	->
water	94:71	0:0	12	colorList
op	94:80	0:0	12	[
water	94:82	0:0	12	WHITE
op	94:88	0:0	12	]
op	94:89	0:0	12	.
water	94:90	0:0	12	comp2
arg	95:54	95:95	11	p_filter->p_sys->colorList[WHITE].comp3
water	95:54	0:0	12	p_filter
op	95:62	0:0	12	->
water	95:64	0:0	12	p_sys
op	95:69	0:0	12	->
water	95:71	0:0	12	colorList
op	95:80	0:0	12	[
water	95:82	0:0	12	WHITE
op	95:88	0:0	12	]
op	95:89	0:0	12	.
water	95:90	0:0	12	comp3
arg	96:54	96:55	11	x
water	96:54	0:0	12	x
arg	96:57	96:58	11	y
water	96:57	0:0	12	y
arg	96:60	96:62	11	0
water	96:60	0:0	12	0
water	96:63	0:0	10	;
water	97:16	0:0	10	}
water	98:12	0:0	8	}
water	99:8	0:0	6	}
water	100:4	0:0	4	}
decl	101:4	101:16	2	int	i_motion
decl	102:4	102:47	2	float	*pf_lastVect_x
op	102:25	0:0	2	=
op	102:27	0:0	2	&
water	102:28	0:0	2	p_sys
op	102:33	0:0	2	->
water	102:35	0:0	2	f_lastVect_x
decl	103:4	103:47	2	float	*pf_lastVect_y
op	103:25	0:0	2	=
op	103:27	0:0	2	&
water	103:28	0:0	2	p_sys
op	103:33	0:0	2	->
water	103:35	0:0	2	f_lastVect_y
decl	104:4	104:25	2	float	f_newVect_x
op	104:22	0:0	2	=
water	104:24	0:0	2	0
decl	105:4	105:25	2	float	f_newVect_y
op	105:22	0:0	2	=
water	105:24	0:0	2	0
decl	106:4	106:26	2	float	f_contVect_x
op	106:23	0:0	2	=
water	106:25	0:0	2	0
decl	107:4	107:26	2	float	f_contVect_y
op	107:23	0:0	2	=
water	107:25	0:0	2	0
decl	108:4	108:25	2	int	nb_collisions
op	108:22	0:0	2	=
water	108:24	0:0	2	0
decl	109:4	109:23	2	bool	bounce
op	109:16	0:0	2	=
water	109:18	0:0	2	false
for	112:4	181:4	2	(i_motion = 0 ;i_motion <= p_sys -> i_ballSpeed && ! bounce;i_motion ++)
forinit	112:10	112:22	3	i_motion = 0 ;
water	112:10	0:0	4	i_motion
op	112:19	0:0	4	=
water	112:21	0:0	4	0
water	112:22	0:0	4	;
cond	112:24	112:59	3	i_motion <= p_sys -> i_ballSpeed && ! bounce
water	112:24	0:0	4	i_motion
op	112:33	0:0	4	<=
water	112:36	0:0	4	p_sys
op	112:41	0:0	4	->
water	112:43	0:0	4	i_ballSpeed
op	112:55	0:0	4	&&
op	112:58	0:0	4	!
water	112:59	0:0	4	bounce
forexpr	112:67	112:75	3	i_motion ++
water	112:67	0:0	4	i_motion
op	112:75	0:0	4	++
stmts	113:4	181:4	3	
water	113:4	0:0	4	{
water	115:8	0:0	4	x
op	115:10	0:0	4	=
call	115:12	116:55	4	roundf
arg	115:20	116:55	5	(float)p_sys->i_ball_x+*pf_lastVect_x*(float)i_motion
water	115:20	0:0	6	(
water	115:21	0:0	6	float
water	115:26	0:0	6	)
water	115:27	0:0	6	p_sys
op	115:32	0:0	6	->
water	115:34	0:0	6	i_ball_x
op	116:20	0:0	6	+
op	116:22	0:0	6	*
water	116:23	0:0	6	pf_lastVect_x
op	116:37	0:0	6	*
water	116:39	0:0	6	(
water	116:40	0:0	6	float
water	116:45	0:0	6	)
water	116:46	0:0	6	i_motion
water	116:56	0:0	4	;
water	117:8	0:0	4	y
op	117:10	0:0	4	=
call	117:12	118:55	4	roundf
arg	117:20	118:55	5	(float)p_sys->i_ball_y+*pf_lastVect_y*(float)i_motion
water	117:20	0:0	6	(
water	117:21	0:0	6	float
water	117:26	0:0	6	)
water	117:27	0:0	6	p_sys
op	117:32	0:0	6	->
water	117:34	0:0	6	i_ball_y
op	118:20	0:0	6	+
op	118:22	0:0	6	*
water	118:23	0:0	6	pf_lastVect_y
op	118:37	0:0	6	*
water	118:39	0:0	6	(
water	118:40	0:0	6	float
water	118:45	0:0	6	)
water	118:46	0:0	6	i_motion
water	118:56	0:0	4	;
for	119:8	180:8	4	( int i = x - p_sys -> i_ballSize ;i <= x + p_sys -> i_ballSize;i ++)
forinit	0:0	119:42	5	 int i = x - p_sys -> i_ballSize ;
decl	119:13	119:42	6	int	i
op	119:19	0:0	6	=
water	119:21	0:0	6	x
op	119:23	0:0	6	-
water	119:25	0:0	6	p_sys
op	119:30	0:0	6	->
water	119:32	0:0	6	i_ballSize
cond	119:44	119:60	5	i <= x + p_sys -> i_ballSize
water	119:44	0:0	6	i
op	119:46	0:0	6	<=
water	119:49	0:0	6	x
op	119:51	0:0	6	+
water	119:53	0:0	6	p_sys
op	119:58	0:0	6	->
water	119:60	0:0	6	i_ballSize
forexpr	119:72	119:73	5	i ++
water	119:72	0:0	6	i
op	119:73	0:0	6	++
stmts	120:8	180:8	5	
water	120:8	0:0	6	{
for	121:12	179:12	6	( int j = y - p_sys -> i_ballSize ;j <= y + p_sys -> i_ballSize;j ++)
forinit	0:0	121:46	7	 int j = y - p_sys -> i_ballSize ;
decl	121:17	121:46	8	int	j
op	121:23	0:0	8	=
water	121:25	0:0	8	y
op	121:27	0:0	8	-
water	121:29	0:0	8	p_sys
op	121:34	0:0	8	->
water	121:36	0:0	8	i_ballSize
cond	122:17	122:33	7	j <= y + p_sys -> i_ballSize
water	122:17	0:0	8	j
op	122:19	0:0	8	<=
water	122:22	0:0	8	y
op	122:24	0:0	8	+
water	122:26	0:0	8	p_sys
op	122:31	0:0	8	->
water	122:33	0:0	8	i_ballSize
forexpr	122:45	122:46	7	j ++
water	122:45	0:0	8	j
op	122:46	0:0	8	++
stmts	123:12	179:12	7	
water	123:12	0:0	8	{
if	126:16	178:16	8	(( i - x ) * ( i - x ) + ( j - y ) * ( j - y ) == p_sys -> i_ballSize * p_sys -> i_ballSize && j <= i_numLines - 1 && x <= i_numCols - 1 && j >= 0 && i >= 0)
cond	126:20	129:38	9	( i - x ) * ( i - x ) + ( j - y ) * ( j - y ) == p_sys -> i_ballSize * p_sys -> i_ballSize && j <= i_numLines - 1 && x <= i_numCols - 1 && j >= 0 && i >= 0
water	126:20	0:0	10	(
water	126:22	0:0	10	i
op	126:24	0:0	10	-
water	126:26	0:0	10	x
water	126:28	0:0	10	)
op	126:30	0:0	10	*
water	126:32	0:0	10	(
water	126:34	0:0	10	i
op	126:36	0:0	10	-
water	126:38	0:0	10	x
water	126:40	0:0	10	)
op	126:42	0:0	10	+
water	126:44	0:0	10	(
water	126:46	0:0	10	j
op	126:48	0:0	10	-
water	126:50	0:0	10	y
water	126:52	0:0	10	)
op	126:54	0:0	10	*
water	126:56	0:0	10	(
water	126:58	0:0	10	j
op	126:60	0:0	10	-
water	126:62	0:0	10	y
water	126:64	0:0	10	)
op	127:20	0:0	10	==
water	127:23	0:0	10	p_sys
op	127:28	0:0	10	->
water	127:30	0:0	10	i_ballSize
op	127:41	0:0	10	*
water	127:43	0:0	10	p_sys
op	127:48	0:0	10	->
water	127:50	0:0	10	i_ballSize
op	128:20	0:0	10	&&
water	128:23	0:0	10	j
op	128:25	0:0	10	<=
water	128:28	0:0	10	i_numLines
op	128:39	0:0	10	-
water	128:41	0:0	10	1
op	128:43	0:0	10	&&
water	128:46	0:0	10	x
op	128:48	0:0	10	<=
water	128:51	0:0	10	i_numCols
op	128:61	0:0	10	-
water	128:63	0:0	10	1
op	129:20	0:0	10	&&
water	129:23	0:0	10	j
op	129:25	0:0	10	>=
water	129:28	0:0	10	0
op	129:30	0:0	10	&&
water	129:33	0:0	10	i
op	129:35	0:0	10	>=
water	129:38	0:0	10	0
stmts	130:16	178:16	9	
water	130:16	0:0	10	{
if	132:20	140:20	10	(i <= 2)
cond	132:24	132:29	11	i <= 2
water	132:24	0:0	12	i
op	132:26	0:0	12	<=
water	132:29	0:0	12	2
stmts	133:20	140:20	11	
water	133:20	0:0	12	{
water	134:24	0:0	12	f_contVect_x
op	134:37	0:0	12	=
water	134:39	0:0	12	x
op	134:41	0:0	12	-
water	134:43	0:0	12	i
water	134:44	0:0	12	;
water	135:24	0:0	12	f_contVect_y
op	135:37	0:0	12	=
water	135:39	0:0	12	0
water	135:40	0:0	12	;
water	136:24	0:0	12	x
op	136:25	0:0	12	++
water	136:27	0:0	12	;
water	137:24	0:0	12	bounce
op	137:31	0:0	12	=
water	137:33	0:0	12	true
water	137:37	0:0	12	;
water	138:24	0:0	12	nb_collisions
op	138:38	0:0	12	=
water	138:40	0:0	12	1
water	138:41	0:0	12	;
goto	139:24	139:36	12	endLoop
water	139:29	0:0	13	endLoop
water	140:20	0:0	12	}
if	141:20	149:20	10	(j <= 2)
cond	141:24	141:29	11	j <= 2
water	141:24	0:0	12	j
op	141:26	0:0	12	<=
water	141:29	0:0	12	2
stmts	142:20	149:20	11	
water	142:20	0:0	12	{
water	143:24	0:0	12	f_contVect_x
op	143:37	0:0	12	=
water	143:39	0:0	12	0
water	143:40	0:0	12	;
water	144:24	0:0	12	f_contVect_y
op	144:37	0:0	12	=
water	144:39	0:0	12	y
op	144:41	0:0	12	-
water	144:43	0:0	12	j
water	144:44	0:0	12	;
water	145:24	0:0	12	y
op	145:25	0:0	12	++
water	145:27	0:0	12	;
water	146:24	0:0	12	bounce
op	146:31	0:0	12	=
water	146:33	0:0	12	true
water	146:37	0:0	12	;
water	147:24	0:0	12	nb_collisions
op	147:38	0:0	12	=
water	147:40	0:0	12	1
water	147:41	0:0	12	;
goto	148:24	148:36	12	endLoop
water	148:29	0:0	13	endLoop
water	149:20	0:0	12	}
if	150:20	158:20	10	(j >= i_numLines - 3)
cond	150:24	150:42	11	j >= i_numLines - 3
water	150:24	0:0	12	j
op	150:26	0:0	12	>=
water	150:29	0:0	12	i_numLines
op	150:40	0:0	12	-
water	150:42	0:0	12	3
stmts	151:20	158:20	11	
water	151:20	0:0	12	{
water	152:24	0:0	12	f_contVect_x
op	152:37	0:0	12	=
water	152:39	0:0	12	0
water	152:40	0:0	12	;
water	153:24	0:0	12	f_contVect_y
op	153:37	0:0	12	=
water	153:39	0:0	12	y
op	153:41	0:0	12	-
water	153:43	0:0	12	j
water	153:44	0:0	12	;
water	154:24	0:0	12	y
op	154:25	0:0	12	--
water	154:27	0:0	12	;
water	155:24	0:0	12	bounce
op	155:31	0:0	12	=
water	155:33	0:0	12	true
water	155:37	0:0	12	;
water	156:24	0:0	12	nb_collisions
op	156:38	0:0	12	=
water	156:40	0:0	12	1
water	156:41	0:0	12	;
goto	157:24	157:36	12	endLoop
water	157:29	0:0	13	endLoop
water	158:20	0:0	12	}
if	159:20	167:20	10	(i >= i_numCols - 3)
cond	159:24	159:41	11	i >= i_numCols - 3
water	159:24	0:0	12	i
op	159:26	0:0	12	>=
water	159:29	0:0	12	i_numCols
op	159:39	0:0	12	-
water	159:41	0:0	12	3
stmts	160:20	167:20	11	
water	160:20	0:0	12	{
water	161:24	0:0	12	f_contVect_x
op	161:37	0:0	12	=
water	161:39	0:0	12	x
op	161:41	0:0	12	-
water	161:43	0:0	12	i
water	161:44	0:0	12	;
water	162:24	0:0	12	f_contVect_y
op	162:37	0:0	12	=
water	162:39	0:0	12	0
water	162:40	0:0	12	;
water	163:24	0:0	12	x
op	163:25	0:0	12	--
water	163:27	0:0	12	;
water	164:24	0:0	12	bounce
op	164:31	0:0	12	=
water	164:33	0:0	12	true
water	164:37	0:0	12	;
water	165:24	0:0	12	nb_collisions
op	165:38	0:0	12	=
water	165:40	0:0	12	1
water	165:41	0:0	12	;
goto	166:24	166:36	12	endLoop
water	166:29	0:0	13	endLoop
water	167:20	0:0	12	}
if	169:20	177:20	10	(abs (p_grad_x [ j * i_numCols + i ] ) +abs (p_grad_y [ j * i_numCols + i ] ) > p_sys -> i_gradThresh)
cond	169:24	171:33	11	abs (p_grad_x [ j * i_numCols + i ] ) +abs (p_grad_y [ j * i_numCols + i ] ) > p_sys -> i_gradThresh
call	169:24	169:59	12	abs
arg	169:29	169:59	13	p_grad_x[j*i_numCols+i]
water	169:29	0:0	14	p_grad_x
op	169:37	0:0	14	[
water	169:39	0:0	14	j
op	169:41	0:0	14	*
water	169:43	0:0	14	i_numCols
op	169:53	0:0	14	+
water	169:55	0:0	14	i
op	169:57	0:0	14	]
op	170:24	0:0	12	+
call	170:26	170:61	12	abs
arg	170:31	170:61	13	p_grad_y[j*i_numCols+i]
water	170:31	0:0	14	p_grad_y
op	170:39	0:0	14	[
water	170:41	0:0	14	j
op	170:43	0:0	14	*
water	170:45	0:0	14	i_numCols
op	170:55	0:0	14	+
water	170:57	0:0	14	i
op	170:59	0:0	14	]
op	171:24	0:0	12	>
water	171:26	0:0	12	p_sys
op	171:31	0:0	12	->
water	171:33	0:0	12	i_gradThresh
stmts	172:20	177:20	11	
water	172:20	0:0	12	{
water	173:24	0:0	12	f_contVect_x
op	173:37	0:0	12	+=
water	173:40	0:0	12	x
op	173:42	0:0	12	-
water	173:44	0:0	12	i
water	173:45	0:0	12	;
water	174:24	0:0	12	f_contVect_y
op	174:37	0:0	12	+=
water	174:40	0:0	12	y
op	174:42	0:0	12	-
water	174:44	0:0	12	j
water	174:45	0:0	12	;
water	175:24	0:0	12	nb_collisions
op	175:37	0:0	12	++
water	175:39	0:0	12	;
water	176:24	0:0	12	bounce
op	176:31	0:0	12	=
water	176:33	0:0	12	true
water	176:37	0:0	12	;
water	177:20	0:0	12	}
water	178:16	0:0	10	}
water	179:12	0:0	8	}
water	180:8	0:0	6	}
water	181:4	0:0	4	}
label	182:4	182:11	2	endLoop :
if	183:4	214:4	2	(bounce)
cond	183:8	183:8	3	bounce
water	183:8	0:0	4	bounce
stmts	184:4	214:4	3	
water	184:4	0:0	4	{
water	186:8	0:0	4	f_contVect_x
op	186:21	0:0	4	/=
water	186:24	0:0	4	nb_collisions
water	186:37	0:0	4	;
water	187:8	0:0	4	f_contVect_y
op	187:21	0:0	4	/=
water	187:24	0:0	4	nb_collisions
water	187:37	0:0	4	;
call	188:8	188:54	4	NormalizeVector
arg	188:25	188:38	5	&f_contVect_x
op	188:25	0:0	6	&
water	188:26	0:0	6	f_contVect_x
arg	188:40	188:54	5	&f_contVect_y
op	188:40	0:0	6	&
water	188:41	0:0	6	f_contVect_y
water	188:55	0:0	4	;
decl	190:8	191:55	4	float	cosinus
op	190:22	0:0	4	=
op	190:24	0:0	4	*
water	190:25	0:0	4	pf_lastVect_x
op	190:39	0:0	4	*
water	190:41	0:0	4	f_contVect_x
op	191:24	0:0	4	+
op	191:26	0:0	4	*
water	191:27	0:0	4	pf_lastVect_y
op	191:41	0:0	4	*
water	191:43	0:0	4	f_contVect_y
water	192:8	0:0	4	f_newVect_x
op	192:20	0:0	4	=
op	192:22	0:0	4	*
water	192:23	0:0	4	pf_lastVect_x
op	192:37	0:0	4	-
water	192:39	0:0	4	2
op	192:41	0:0	4	*
water	192:43	0:0	4	cosinus
op	192:51	0:0	4	*
water	192:53	0:0	4	f_contVect_x
water	192:65	0:0	4	;
water	193:8	0:0	4	f_newVect_y
op	193:20	0:0	4	=
op	193:22	0:0	4	*
water	193:23	0:0	4	pf_lastVect_y
op	193:37	0:0	4	-
water	193:39	0:0	4	2
op	193:41	0:0	4	*
water	193:43	0:0	4	cosinus
op	193:51	0:0	4	*
water	193:53	0:0	4	f_contVect_y
water	193:65	0:0	4	;
call	194:8	194:52	4	NormalizeVector
arg	194:25	194:37	5	&f_newVect_x
op	194:25	0:0	6	&
water	194:26	0:0	6	f_newVect_x
arg	194:39	194:52	5	&f_newVect_y
op	194:39	0:0	6	&
water	194:40	0:0	6	f_newVect_y
water	194:53	0:0	4	;
op	195:8	0:0	4	*
water	195:9	0:0	4	pf_lastVect_x
op	195:23	0:0	4	=
water	195:25	0:0	4	f_newVect_x
water	195:36	0:0	4	;
op	196:8	0:0	4	*
water	196:9	0:0	4	pf_lastVect_y
op	196:23	0:0	4	=
water	196:25	0:0	4	f_newVect_y
water	196:36	0:0	4	;
water	197:8	0:0	4	p_sys
op	197:13	0:0	4	->
water	197:15	0:0	4	i_ball_x
op	197:24	0:0	4	=
water	197:26	0:0	4	x
water	197:27	0:0	4	;
water	198:8	0:0	4	p_sys
op	198:13	0:0	4	->
water	198:15	0:0	4	i_ball_y
op	198:24	0:0	4	=
water	198:26	0:0	4	y
water	198:27	0:0	4	;
water	201:8	0:0	4	x
op	201:10	0:0	4	=
call	201:12	201:46	4	roundf
arg	201:20	201:46	5	(float)x+*pf_lastVect_x
water	201:20	0:0	6	(
water	201:21	0:0	6	float
water	201:26	0:0	6	)
water	201:27	0:0	6	x
op	201:29	0:0	6	+
op	201:31	0:0	6	*
water	201:32	0:0	6	pf_lastVect_x
water	201:47	0:0	4	;
water	202:8	0:0	4	y
op	202:10	0:0	4	=
call	202:12	202:46	4	roundf
arg	202:20	202:46	5	(float)y+*pf_lastVect_y
water	202:20	0:0	6	(
water	202:21	0:0	6	float
water	202:26	0:0	6	)
water	202:27	0:0	6	y
op	202:29	0:0	6	+
op	202:31	0:0	6	*
water	202:32	0:0	6	pf_lastVect_y
water	202:47	0:0	4	;
if	203:8	210:8	4	(x - p_sys -> i_ballSize < 2 || x + p_sys -> i_ballSize > i_numCols - 3 || y - p_sys -> i_ballSize < 2 || y + p_sys -> i_ballSize > i_numLines - 3)
cond	203:12	206:52	5	x - p_sys -> i_ballSize < 2 || x + p_sys -> i_ballSize > i_numCols - 3 || y - p_sys -> i_ballSize < 2 || y + p_sys -> i_ballSize > i_numLines - 3
water	203:12	0:0	6	x
op	203:14	0:0	6	-
water	203:16	0:0	6	p_sys
op	203:21	0:0	6	->
water	203:23	0:0	6	i_ballSize
op	203:34	0:0	6	<
water	203:36	0:0	6	2
op	204:12	0:0	6	||
water	204:15	0:0	6	x
op	204:17	0:0	6	+
water	204:19	0:0	6	p_sys
op	204:24	0:0	6	->
water	204:26	0:0	6	i_ballSize
op	204:37	0:0	6	>
water	204:39	0:0	6	i_numCols
op	204:49	0:0	6	-
water	204:51	0:0	6	3
op	205:12	0:0	6	||
water	205:15	0:0	6	y
op	205:17	0:0	6	-
water	205:19	0:0	6	p_sys
op	205:24	0:0	6	->
water	205:26	0:0	6	i_ballSize
op	205:37	0:0	6	<
water	205:39	0:0	6	2
op	206:12	0:0	6	||
water	206:15	0:0	6	y
op	206:17	0:0	6	+
water	206:19	0:0	6	p_sys
op	206:24	0:0	6	->
water	206:26	0:0	6	i_ballSize
op	206:37	0:0	6	>
water	206:39	0:0	6	i_numLines
op	206:50	0:0	6	-
water	206:52	0:0	6	3
stmts	207:8	210:8	5	
water	207:8	0:0	6	{
op	208:12	0:0	6	*
water	208:13	0:0	6	pf_lastVect_x
op	208:27	0:0	6	=
water	208:29	0:0	6	0
water	208:30	0:0	6	;
op	209:12	0:0	6	*
water	209:13	0:0	6	pf_lastVect_y
op	209:27	0:0	6	=
water	209:29	0:0	6	0
water	209:30	0:0	6	;
water	210:8	0:0	6	}
else	211:8	213:45	4
stmts	213:12	213:45	5	
water	213:12	0:0	6	i_motion
op	213:21	0:0	6	=
water	213:23	0:0	6	p_sys
op	213:28	0:0	6	->
water	213:30	0:0	6	i_ballSpeed
op	213:42	0:0	6	-
water	213:44	0:0	6	1
water	213:45	0:0	6	;
water	214:4	0:0	4	}
else	215:4	216:20	2
stmts	216:8	216:20	3	
water	216:8	0:0	4	i_motion
op	216:17	0:0	4	=
water	216:19	0:0	4	0
water	216:20	0:0	4	;
water	218:4	0:0	2	p_sys
op	218:9	0:0	2	->
water	218:11	0:0	2	i_ball_x
op	218:20	0:0	2	=
call	218:22	219:73	2	roundf
arg	218:30	219:73	3	(float)p_sys->i_ball_x+*pf_lastVect_x*(float)(p_sys->i_ballSpeed-i_motion)
water	218:30	0:0	4	(
water	218:31	0:0	4	float
water	218:36	0:0	4	)
water	218:37	0:0	4	p_sys
op	218:42	0:0	4	->
water	218:44	0:0	4	i_ball_x
op	218:53	0:0	4	+
op	218:55	0:0	4	*
water	218:56	0:0	4	pf_lastVect_x
call	219:30	219:71	4	*(float)
arg	219:41	219:71	5	p_sys->i_ballSpeed-i_motion
water	219:41	0:0	6	p_sys
op	219:46	0:0	6	->
water	219:48	0:0	6	i_ballSpeed
op	219:60	0:0	6	-
water	219:62	0:0	6	i_motion
water	219:74	0:0	2	;
water	220:4	0:0	2	p_sys
op	220:9	0:0	2	->
water	220:11	0:0	2	i_ball_y
op	220:20	0:0	2	=
call	220:22	221:73	2	roundf
arg	220:30	221:73	3	p_sys->i_ball_y+*pf_lastVect_y*(float)(p_sys->i_ballSpeed-i_motion)
water	220:30	0:0	4	p_sys
op	220:35	0:0	4	->
water	220:37	0:0	4	i_ball_y
op	220:46	0:0	4	+
op	220:48	0:0	4	*
water	220:49	0:0	4	pf_lastVect_y
call	221:30	221:71	4	*(float)
arg	221:41	221:71	5	p_sys->i_ballSpeed-i_motion
water	221:41	0:0	6	p_sys
op	221:46	0:0	6	->
water	221:48	0:0	6	i_ballSpeed
op	221:60	0:0	6	-
water	221:62	0:0	6	i_motion
water	221:74	0:0	2	;
call	223:4	223:30	2	drawBall
arg	223:14	223:19	3	p_sys
water	223:14	0:0	4	p_sys
arg	223:21	223:30	3	p_outpic
water	223:21	0:0	4	p_outpic
water	223:31	0:0	2	;
switch	224:4	231:4	2	(p_filter -> fmt_in . video . i_chroma)
cond	224:12	224:35	3	p_filter -> fmt_in . video . i_chroma
water	224:12	0:0	4	p_filter
op	224:20	0:0	4	->
water	224:22	0:0	4	fmt_in
op	224:28	0:0	4	.
water	224:29	0:0	4	video
op	224:34	0:0	4	.
water	224:35	0:0	4	i_chroma
stmts	225:4	231:4	3	
water	225:4	0:0	4	{
label	226:8	226:28	4	case VLC_CODEC_RGB24 :
decl	227:8	228:42	4	CASE_PACKED_YUV_422	picture_Release
water	228:27	0:0	4	(
water	228:29	0:0	4	p_converted
water	228:41	0:0	4	)
label	229:8	229:15	4	default :
break	230:12	230:17	4	
water	231:4	0:0	4	}
