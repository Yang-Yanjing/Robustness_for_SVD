func	2:0	122:0	0	static int	Open
params	2:15	0:0	1	
param	2:16	2:36	2	vlc_object_t *	object
stmnts	0:0	121:23	1	
decl	4:4	4:41	2	filter_t	*filter
op	4:21	0:0	2	=
water	4:23	0:0	2	(
water	4:24	0:0	2	filter_t
op	4:33	0:0	2	*
water	4:34	0:0	2	)
water	4:35	0:0	2	object
decl	5:4	5:53	2	const video_format_t	*src
op	5:30	0:0	2	=
op	5:32	0:0	2	&
water	5:33	0:0	2	filter
op	5:39	0:0	2	->
water	5:41	0:0	2	fmt_in
op	5:47	0:0	2	.
water	5:48	0:0	2	video
decl	6:4	6:54	2	video_format_t	*dst
op	6:30	0:0	2	=
op	6:32	0:0	2	&
water	6:33	0:0	2	filter
op	6:39	0:0	2	->
water	6:41	0:0	2	fmt_out
op	6:48	0:0	2	.
water	6:49	0:0	2	video
decl	7:4	8:54	2	const vlc_chroma_description_t	*chroma
op	7:43	0:0	2	=
call	8:8	8:53	3	vlc_fourcc_GetChromaDescription
arg	8:40	8:53	4	src->i_chroma
water	8:40	0:0	5	src
op	8:43	0:0	5	->
water	8:45	0:0	5	i_chroma
if	9:4	10:27	2	(chroma == NULL)
cond	9:8	9:18	3	chroma == NULL
water	9:8	0:0	4	chroma
op	9:15	0:0	4	==
water	9:18	0:0	4	NULL
stmts	10:8	10:27	3	
return	10:8	10:27	4	VLC_EGENERIC
water	10:15	0:0	5	VLC_EGENERIC
decl	11:4	11:44	2	filter_sys_t	*sys
op	11:22	0:0	2	=
call	11:24	11:43	3	malloc
arg	11:31	11:43	4	sizeof(*sys)
op	11:31	0:0	5	sizeof
water	11:37	0:0	5	(
op	11:38	0:0	5	*
water	11:39	0:0	5	sys
water	11:42	0:0	5	)
if	12:4	13:25	2	(! sys)
cond	12:8	12:9	3	! sys
op	12:8	0:0	4	!
water	12:9	0:0	4	sys
stmts	13:8	13:25	3	
return	13:8	13:25	4	VLC_ENOMEM
water	13:15	0:0	5	VLC_ENOMEM
water	14:4	0:0	2	sys
op	14:7	0:0	2	->
water	14:9	0:0	2	chroma
op	14:16	0:0	2	=
water	14:18	0:0	2	chroma
water	14:24	0:0	2	;
water	15:4	0:0	2	static
water	15:11	0:0	2	const
water	15:17	0:0	2	char
op	15:22	0:0	2	*
water	15:23	0:0	2	const
water	15:29	0:0	2	ppsz_filter_options
op	15:48	0:0	2	[
op	15:49	0:0	2	]
op	15:51	0:0	2	=
water	15:53	0:0	2	{
water	16:8	0:0	2	"type"
water	16:14	0:0	2	,
water	16:16	0:0	2	NULL
water	17:4	0:0	2	}
water	17:5	0:0	2	;
call	18:4	19:35	2	config_ChainParse
arg	18:22	18:28	3	filter
water	18:22	0:0	4	filter
arg	18:30	18:40	3	CFG_PREFIX
water	18:30	0:0	4	CFG_PREFIX
arg	18:42	18:61	3	ppsz_filter_options
water	18:42	0:0	4	ppsz_filter_options
arg	19:22	19:35	3	filter->p_cfg
water	19:22	0:0	4	filter
op	19:28	0:0	4	->
water	19:30	0:0	4	p_cfg
water	19:36	0:0	2	;
decl	20:4	20:65	2	char	*type_name
op	20:20	0:0	2	=
call	20:22	20:64	3	var_InheritString
arg	20:40	20:46	4	filter
water	20:40	0:0	5	filter
arg	20:48	20:64	4	CFG_PREFIX"type"
water	20:48	0:0	5	CFG_PREFIX
water	20:58	0:0	5	"type"
decl	21:4	21:45	2	const transform_description_t	*dsc
op	21:39	0:0	2	=
water	21:41	0:0	2	NULL
for	22:4	26:8	2	( size_t i = 0 ;i < n_transforms;i ++)
forinit	0:0	22:21	3	 size_t i = 0 ;
decl	22:9	22:21	4	size_t	i
op	22:18	0:0	4	=
water	22:20	0:0	4	0
cond	22:23	22:27	3	i < n_transforms
water	22:23	0:0	4	i
op	22:25	0:0	4	<
water	22:27	0:0	4	n_transforms
forexpr	22:41	22:42	3	i ++
water	22:41	0:0	4	i
op	22:42	0:0	4	++
stmts	23:8	26:8	3	
if	23:8	26:8	4	(type_name && !strcmp (descriptions [ i ] . name ,type_name ))
cond	23:12	23:64	5	type_name && !strcmp (descriptions [ i ] . name ,type_name )
water	23:12	0:0	6	type_name
op	23:22	0:0	6	&&
op	23:25	0:0	6	!
call	23:26	23:64	6	strcmp
arg	23:33	23:53	7	descriptions[i].name
water	23:33	0:0	8	descriptions
op	23:45	0:0	8	[
water	23:46	0:0	8	i
op	23:47	0:0	8	]
op	23:48	0:0	8	.
water	23:49	0:0	8	name
arg	23:55	23:64	7	type_name
water	23:55	0:0	8	type_name
stmts	23:67	26:8	5	
water	23:67	0:0	6	{
water	24:12	0:0	6	dsc
op	24:16	0:0	6	=
op	24:18	0:0	6	&
water	24:19	0:0	6	descriptions
op	24:31	0:0	6	[
water	24:32	0:0	6	i
op	24:33	0:0	6	]
water	24:34	0:0	6	;
break	25:12	25:17	6	
water	26:8	0:0	6	}
if	27:4	31:4	2	(dsc == NULL)
cond	27:8	27:15	3	dsc == NULL
water	27:8	0:0	4	dsc
op	27:12	0:0	4	==
water	27:15	0:0	4	NULL
stmts	27:21	31:4	3	
water	27:21	0:0	4	{
water	28:8	0:0	4	dsc
op	28:12	0:0	4	=
op	28:14	0:0	4	&
water	28:15	0:0	4	descriptions
op	28:27	0:0	4	[
water	28:28	0:0	4	0
op	28:29	0:0	4	]
water	28:30	0:0	4	;
call	29:8	30:26	4	msg_Warn
arg	29:17	29:23	5	filter
water	29:17	0:0	6	filter
arg	29:25	29:71	5	"No valid transform mode provided, using '%s'"
water	29:25	0:0	6	"No valid transform mode provided, using '%s'"
arg	30:17	30:26	5	dsc->name
water	30:17	0:0	6	dsc
op	30:20	0:0	6	->
water	30:22	0:0	6	name
water	30:27	0:0	4	;
water	31:4	0:0	4	}
call	32:4	32:18	2	free
arg	32:9	32:18	3	type_name
water	32:9	0:0	4	type_name
water	32:19	0:0	2	;
switch	33:4	47:4	2	(chroma -> pixel_size)
cond	33:12	33:20	3	chroma -> pixel_size
water	33:12	0:0	4	chroma
op	33:18	0:0	4	->
water	33:20	0:0	4	pixel_size
stmts	33:32	47:4	3	
water	33:32	0:0	4	{
label	34:8	34:14	4	case 1 :
water	35:12	0:0	4	sys
op	35:15	0:0	4	->
water	35:17	0:0	4	plane
op	35:22	0:0	4	[
water	35:23	0:0	4	0
op	35:24	0:0	4	]
op	35:26	0:0	4	=
water	35:28	0:0	4	dsc
op	35:31	0:0	4	->
water	35:33	0:0	4	plane8
water	35:39	0:0	4	;
break	36:12	36:17	4	
label	37:8	37:14	4	case 2 :
water	38:12	0:0	4	sys
op	38:15	0:0	4	->
water	38:17	0:0	4	plane
op	38:22	0:0	4	[
water	38:23	0:0	4	0
op	38:24	0:0	4	]
op	38:26	0:0	4	=
water	38:28	0:0	4	dsc
op	38:31	0:0	4	->
water	38:33	0:0	4	plane16
water	38:40	0:0	4	;
break	39:12	39:17	4	
label	40:8	40:14	4	case 4 :
water	41:12	0:0	4	sys
op	41:15	0:0	4	->
water	41:17	0:0	4	plane
op	41:22	0:0	4	[
water	41:23	0:0	4	0
op	41:24	0:0	4	]
op	41:26	0:0	4	=
water	41:28	0:0	4	dsc
op	41:31	0:0	4	->
water	41:33	0:0	4	plane32
water	41:40	0:0	4	;
break	42:12	42:17	4	
label	43:8	43:15	4	default :
call	44:12	45:62	4	msg_Err
arg	44:20	44:26	5	filter
water	44:20	0:0	6	filter
arg	44:28	44:70	5	"Unsupported pixel size %u (chroma %4.4s)"
water	44:28	0:0	6	"Unsupported pixel size %u (chroma %4.4s)"
arg	45:20	45:38	5	chroma->pixel_size
water	45:20	0:0	6	chroma
op	45:26	0:0	6	->
water	45:28	0:0	6	pixel_size
arg	45:40	45:62	5	(char*)&src->i_chroma
water	45:40	0:0	6	(
water	45:41	0:0	6	char
op	45:46	0:0	6	*
water	45:47	0:0	6	)
op	45:48	0:0	6	&
water	45:49	0:0	6	src
op	45:52	0:0	6	->
water	45:54	0:0	6	i_chroma
water	45:63	0:0	4	;
goto	46:12	46:22	4	error
water	46:17	0:0	5	error
water	47:4	0:0	4	}
for	48:4	49:37	2	(unsigned i = 1 ;i < PICTURE_PLANE_MAX;i ++)
forinit	48:9	48:23	3	unsigned i = 1 ;
water	48:9	0:0	4	unsigned
water	48:18	0:0	4	i
op	48:20	0:0	4	=
water	48:22	0:0	4	1
water	48:23	0:0	4	;
cond	48:25	48:29	3	i < PICTURE_PLANE_MAX
water	48:25	0:0	4	i
op	48:27	0:0	4	<
water	48:29	0:0	4	PICTURE_PLANE_MAX
forexpr	48:48	48:49	3	i ++
water	48:48	0:0	4	i
op	48:49	0:0	4	++
stmts	49:8	49:37	3	
water	49:8	0:0	4	sys
op	49:11	0:0	4	->
water	49:13	0:0	4	plane
op	49:18	0:0	4	[
water	49:19	0:0	4	i
op	49:20	0:0	4	]
op	49:22	0:0	4	=
water	49:24	0:0	4	sys
op	49:27	0:0	4	->
water	49:29	0:0	4	plane
op	49:34	0:0	4	[
water	49:35	0:0	4	0
op	49:36	0:0	4	]
water	49:37	0:0	4	;
water	50:4	0:0	2	sys
op	50:7	0:0	2	->
water	50:9	0:0	2	convert
op	50:17	0:0	2	=
water	50:19	0:0	2	dsc
op	50:22	0:0	2	->
water	50:24	0:0	2	convert
water	50:31	0:0	2	;
if	51:4	67:4	2	(dsc_is_rotated (dsc ))
cond	51:8	51:26	3	dsc_is_rotated (dsc )
call	51:8	51:26	4	dsc_is_rotated
arg	51:23	51:26	5	dsc
water	51:23	0:0	6	dsc
stmts	51:29	67:4	3	
water	51:29	0:0	4	{
switch	52:8	66:8	4	(src -> i_chroma)
cond	52:16	52:21	5	src -> i_chroma
water	52:16	0:0	6	src
op	52:19	0:0	6	->
water	52:21	0:0	6	i_chroma
stmts	52:31	66:8	5	
water	52:31	0:0	6	{
label	53:12	53:31	6	case VLC_CODEC_I422 :
label	54:12	54:31	6	case VLC_CODEC_J422 :
water	55:16	0:0	6	sys
op	55:19	0:0	6	->
water	55:21	0:0	6	plane
op	55:26	0:0	6	[
water	55:27	0:0	6	2
op	55:28	0:0	6	]
op	55:30	0:0	6	=
water	55:32	0:0	6	sys
op	55:35	0:0	6	->
water	55:37	0:0	6	plane
op	55:42	0:0	6	[
water	55:43	0:0	6	1
op	55:44	0:0	6	]
op	55:46	0:0	6	=
water	55:48	0:0	6	dsc
op	55:51	0:0	6	->
water	55:53	0:0	6	i422
water	55:57	0:0	6	;
break	56:16	56:21	6	
label	57:12	57:19	6	default :
for	58:16	65:12	6	(unsigned i = 0 ;i < chroma -> plane_count;i ++)
forinit	58:21	58:35	7	unsigned i = 0 ;
water	58:21	0:0	8	unsigned
water	58:30	0:0	8	i
op	58:32	0:0	8	=
water	58:34	0:0	8	0
water	58:35	0:0	8	;
cond	58:37	58:49	7	i < chroma -> plane_count
water	58:37	0:0	8	i
op	58:39	0:0	8	<
water	58:41	0:0	8	chroma
op	58:47	0:0	8	->
water	58:49	0:0	8	plane_count
forexpr	58:62	58:63	7	i ++
water	58:62	0:0	8	i
op	58:63	0:0	8	++
stmts	58:67	65:12	7	
water	58:67	0:0	8	{
if	59:20	64:20	8	(chroma -> p [ i ] . w . num * chroma -> p [ i ] . h . den != chroma -> p [ i ] . h . num * chroma -> p [ i ] . w . den)
cond	59:24	60:60	9	chroma -> p [ i ] . w . num * chroma -> p [ i ] . h . den != chroma -> p [ i ] . h . num * chroma -> p [ i ] . w . den
water	59:24	0:0	10	chroma
op	59:30	0:0	10	->
water	59:32	0:0	10	p
op	59:33	0:0	10	[
water	59:34	0:0	10	i
op	59:35	0:0	10	]
op	59:36	0:0	10	.
water	59:37	0:0	10	w
op	59:38	0:0	10	.
water	59:39	0:0	10	num
op	59:43	0:0	10	*
water	59:45	0:0	10	chroma
op	59:51	0:0	10	->
water	59:53	0:0	10	p
op	59:54	0:0	10	[
water	59:55	0:0	10	i
op	59:56	0:0	10	]
op	59:57	0:0	10	.
water	59:58	0:0	10	h
op	59:59	0:0	10	.
water	59:60	0:0	10	den
op	60:21	0:0	10	!=
water	60:24	0:0	10	chroma
op	60:30	0:0	10	->
water	60:32	0:0	10	p
op	60:33	0:0	10	[
water	60:34	0:0	10	i
op	60:35	0:0	10	]
op	60:36	0:0	10	.
water	60:37	0:0	10	h
op	60:38	0:0	10	.
water	60:39	0:0	10	num
op	60:43	0:0	10	*
water	60:45	0:0	10	chroma
op	60:51	0:0	10	->
water	60:53	0:0	10	p
op	60:54	0:0	10	[
water	60:55	0:0	10	i
op	60:56	0:0	10	]
op	60:57	0:0	10	.
water	60:58	0:0	10	w
op	60:59	0:0	10	.
water	60:60	0:0	10	den
stmts	60:65	64:20	9	
water	60:65	0:0	10	{
call	61:24	62:72	10	msg_Err
arg	61:32	61:38	11	filter
water	61:32	0:0	12	filter
arg	61:40	62:48	11	"Format rotation not possible ""(chroma %4.4s)"
water	61:40	0:0	12	"Format rotation not possible "
water	62:32	0:0	12	"(chroma %4.4s)"
arg	62:50	62:72	11	(char*)&src->i_chroma
water	62:50	0:0	12	(
water	62:51	0:0	12	char
op	62:56	0:0	12	*
water	62:57	0:0	12	)
op	62:58	0:0	12	&
water	62:59	0:0	12	src
op	62:62	0:0	12	->
water	62:64	0:0	12	i_chroma
water	62:73	0:0	10	;
goto	63:24	63:34	10	error
water	63:29	0:0	11	error
water	64:20	0:0	10	}
water	65:12	0:0	8	}
water	66:8	0:0	6	}
water	67:4	0:0	4	}
decl	73:4	73:35	2	video_format_t	src_trans
op	73:29	0:0	2	=
op	73:31	0:0	2	*
water	73:32	0:0	2	src
call	74:4	74:55	2	video_format_TransformBy
arg	74:29	74:39	3	&src_trans
op	74:29	0:0	4	&
water	74:30	0:0	4	src_trans
arg	74:41	74:55	3	dsc->operation
water	74:41	0:0	4	dsc
op	74:44	0:0	4	->
water	74:46	0:0	4	operation
water	74:56	0:0	2	;
if	75:4	86:4	2	(! filter -> b_allow_fmt_out_change && ( dst -> i_width != src_trans . i_width || dst -> i_visible_width != src_trans . i_visible_width || dst -> i_height != src_trans . i_height || dst -> i_visible_height != src_trans . i_visible_height || dst -> i_sar_num != src_trans . i_sar_num || dst -> i_sar_den != src_trans . i_sar_den || dst -> i_x_offset != src_trans . i_x_offset || dst -> i_y_offset != src_trans . i_y_offset ))
cond	75:8	83:54	3	! filter -> b_allow_fmt_out_change && ( dst -> i_width != src_trans . i_width || dst -> i_visible_width != src_trans . i_visible_width || dst -> i_height != src_trans . i_height || dst -> i_visible_height != src_trans . i_visible_height || dst -> i_sar_num != src_trans . i_sar_num || dst -> i_sar_den != src_trans . i_sar_den || dst -> i_x_offset != src_trans . i_x_offset || dst -> i_y_offset != src_trans . i_y_offset )
op	75:8	0:0	4	!
water	75:9	0:0	4	filter
op	75:15	0:0	4	->
water	75:17	0:0	4	b_allow_fmt_out_change
op	75:40	0:0	4	&&
water	76:8	0:0	4	(
water	76:9	0:0	4	dst
op	76:12	0:0	4	->
water	76:14	0:0	4	i_width
op	76:31	0:0	4	!=
water	76:34	0:0	4	src_trans
op	76:43	0:0	4	.
water	76:44	0:0	4	i_width
op	76:52	0:0	4	||
water	77:9	0:0	4	dst
op	77:12	0:0	4	->
water	77:14	0:0	4	i_visible_width
op	77:31	0:0	4	!=
water	77:34	0:0	4	src_trans
op	77:43	0:0	4	.
water	77:44	0:0	4	i_visible_width
op	77:60	0:0	4	||
water	78:9	0:0	4	dst
op	78:12	0:0	4	->
water	78:14	0:0	4	i_height
op	78:31	0:0	4	!=
water	78:34	0:0	4	src_trans
op	78:43	0:0	4	.
water	78:44	0:0	4	i_height
op	78:53	0:0	4	||
water	79:9	0:0	4	dst
op	79:12	0:0	4	->
water	79:14	0:0	4	i_visible_height
op	79:31	0:0	4	!=
water	79:34	0:0	4	src_trans
op	79:43	0:0	4	.
water	79:44	0:0	4	i_visible_height
op	79:61	0:0	4	||
water	80:9	0:0	4	dst
op	80:12	0:0	4	->
water	80:14	0:0	4	i_sar_num
op	80:31	0:0	4	!=
water	80:34	0:0	4	src_trans
op	80:43	0:0	4	.
water	80:44	0:0	4	i_sar_num
op	80:54	0:0	4	||
water	81:9	0:0	4	dst
op	81:12	0:0	4	->
water	81:14	0:0	4	i_sar_den
op	81:31	0:0	4	!=
water	81:34	0:0	4	src_trans
op	81:43	0:0	4	.
water	81:44	0:0	4	i_sar_den
op	81:54	0:0	4	||
water	82:9	0:0	4	dst
op	82:12	0:0	4	->
water	82:14	0:0	4	i_x_offset
op	82:31	0:0	4	!=
water	82:34	0:0	4	src_trans
op	82:43	0:0	4	.
water	82:44	0:0	4	i_x_offset
op	82:55	0:0	4	||
water	83:9	0:0	4	dst
op	83:12	0:0	4	->
water	83:14	0:0	4	i_y_offset
op	83:31	0:0	4	!=
water	83:34	0:0	4	src_trans
op	83:43	0:0	4	.
water	83:44	0:0	4	i_y_offset
water	83:54	0:0	4	)
stmts	83:57	86:4	3	
water	83:57	0:0	4	{
call	84:12	84:58	4	msg_Err
arg	84:20	84:26	5	filter
water	84:20	0:0	6	filter
arg	84:28	84:58	5	"Format change is not allowed"
water	84:28	0:0	6	"Format change is not allowed"
water	84:59	0:0	4	;
goto	85:12	85:22	4	error
water	85:17	0:0	5	error
water	86:4	0:0	4	}
else	87:4	96:4	2
stmts	87:9	96:4	3	
if	87:9	96:4	4	(filter -> b_allow_fmt_out_change)
cond	87:12	87:20	5	filter -> b_allow_fmt_out_change
water	87:12	0:0	6	filter
op	87:18	0:0	6	->
water	87:20	0:0	6	b_allow_fmt_out_change
stmts	87:44	96:4	5	
water	87:44	0:0	6	{
water	88:8	0:0	6	dst
op	88:11	0:0	6	->
water	88:13	0:0	6	i_width
op	88:30	0:0	6	=
water	88:32	0:0	6	src_trans
op	88:41	0:0	6	.
water	88:42	0:0	6	i_width
water	88:49	0:0	6	;
water	89:8	0:0	6	dst
op	89:11	0:0	6	->
water	89:13	0:0	6	i_visible_width
op	89:30	0:0	6	=
water	89:32	0:0	6	src_trans
op	89:41	0:0	6	.
water	89:42	0:0	6	i_visible_width
water	89:57	0:0	6	;
water	90:8	0:0	6	dst
op	90:11	0:0	6	->
water	90:13	0:0	6	i_height
op	90:30	0:0	6	=
water	90:32	0:0	6	src_trans
op	90:41	0:0	6	.
water	90:42	0:0	6	i_height
water	90:50	0:0	6	;
water	91:8	0:0	6	dst
op	91:11	0:0	6	->
water	91:13	0:0	6	i_visible_height
op	91:30	0:0	6	=
water	91:32	0:0	6	src_trans
op	91:41	0:0	6	.
water	91:42	0:0	6	i_visible_height
water	91:58	0:0	6	;
water	92:8	0:0	6	dst
op	92:11	0:0	6	->
water	92:13	0:0	6	i_sar_num
op	92:30	0:0	6	=
water	92:32	0:0	6	src_trans
op	92:41	0:0	6	.
water	92:42	0:0	6	i_sar_num
water	92:51	0:0	6	;
water	93:8	0:0	6	dst
op	93:11	0:0	6	->
water	93:13	0:0	6	i_sar_den
op	93:30	0:0	6	=
water	93:32	0:0	6	src_trans
op	93:41	0:0	6	.
water	93:42	0:0	6	i_sar_den
water	93:51	0:0	6	;
water	94:8	0:0	6	dst
op	94:11	0:0	6	->
water	94:13	0:0	6	i_x_offset
op	94:30	0:0	6	=
water	94:32	0:0	6	src_trans
op	94:41	0:0	6	.
water	94:42	0:0	6	i_x_offset
water	94:52	0:0	6	;
water	95:8	0:0	6	dst
op	95:11	0:0	6	->
water	95:13	0:0	6	i_y_offset
op	95:30	0:0	6	=
water	95:32	0:0	6	src_trans
op	95:41	0:0	6	.
water	95:42	0:0	6	i_y_offset
water	95:52	0:0	6	;
water	96:4	0:0	6	}
switch	98:4	114:4	2	(src -> i_chroma)
cond	98:12	98:17	3	src -> i_chroma
water	98:12	0:0	4	src
op	98:15	0:0	4	->
water	98:17	0:0	4	i_chroma
stmts	98:27	114:4	3	
water	98:27	0:0	4	{
label	99:8	99:27	4	case VLC_CODEC_UYVY :
label	100:8	100:27	4	case VLC_CODEC_VYUY :
if	101:12	105:12	4	(dsc_is_rotated (dsc ))
cond	101:16	101:34	5	dsc_is_rotated (dsc )
call	101:16	101:34	6	dsc_is_rotated
arg	101:31	101:34	7	dsc
water	101:31	0:0	8	dsc
stmts	101:37	105:12	5	
water	101:37	0:0	6	{
call	102:16	103:46	6	msg_Err
arg	102:24	102:30	7	filter
water	102:24	0:0	8	filter
arg	102:32	102:77	7	"Format rotation not possible (chroma %4.4s)"
water	102:32	0:0	8	"Format rotation not possible (chroma %4.4s)"
arg	103:24	103:46	7	(char*)&src->i_chroma
water	103:24	0:0	8	(
water	103:25	0:0	8	char
op	103:30	0:0	8	*
water	103:31	0:0	8	)
op	103:32	0:0	8	&
water	103:33	0:0	8	src
op	103:36	0:0	8	->
water	103:38	0:0	8	i_chroma
water	103:47	0:0	6	;
goto	104:16	104:26	6	error
water	104:21	0:0	7	error
water	105:12	0:0	6	}
label	107:8	107:27	4	case VLC_CODEC_YUYV :
label	108:8	108:27	4	case VLC_CODEC_YVYU :
water	109:12	0:0	4	sys
op	109:15	0:0	4	->
water	109:17	0:0	4	plane
op	109:22	0:0	4	[
water	109:23	0:0	4	0
op	109:24	0:0	4	]
op	109:26	0:0	4	=
water	109:28	0:0	4	dsc
op	109:31	0:0	4	->
water	109:33	0:0	4	yuyv
water	109:37	0:0	4	;
break	110:12	110:17	4	
label	111:8	111:27	4	case VLC_CODEC_NV12 :
label	112:8	112:27	4	case VLC_CODEC_NV21 :
goto	113:12	113:22	4	error
water	113:17	0:0	5	error
water	114:4	0:0	4	}
water	115:4	0:0	2	filter
op	115:10	0:0	2	->
water	115:12	0:0	2	p_sys
op	115:28	0:0	2	=
water	115:30	0:0	2	sys
water	115:33	0:0	2	;
water	116:4	0:0	2	filter
op	116:10	0:0	2	->
water	116:12	0:0	2	pf_video_filter
op	116:28	0:0	2	=
water	116:30	0:0	2	Filter
water	116:36	0:0	2	;
water	117:4	0:0	2	filter
op	117:10	0:0	2	->
water	117:12	0:0	2	pf_video_mouse
op	117:28	0:0	2	=
water	117:30	0:0	2	Mouse
water	117:35	0:0	2	;
return	118:4	118:22	2	VLC_SUCCESS
water	118:11	0:0	3	VLC_SUCCESS
label	119:0	119:5	2	error :
call	120:4	120:12	2	free
arg	120:9	120:12	3	sys
water	120:9	0:0	4	sys
water	120:13	0:0	2	;
return	121:4	121:23	2	VLC_EGENERIC
water	121:11	0:0	3	VLC_EGENERIC
