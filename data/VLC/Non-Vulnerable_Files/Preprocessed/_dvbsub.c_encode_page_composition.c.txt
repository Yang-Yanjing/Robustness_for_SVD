func	2:0	74:0	0	static void	encode_page_composition
params	2:35	0:0	1	
param	2:37	2:53	2	encoder_t *	p_enc
param	2:55	2:62	2	bs_t *	s
param	3:37	3:60	2	subpicture_t *	p_subpic
stmnts	0:0	73:4	1	
decl	5:4	5:39	2	encoder_sys_t	*p_sys
op	5:25	0:0	2	=
water	5:27	0:0	2	p_enc
op	5:32	0:0	2	->
water	5:34	0:0	2	p_sys
decl	6:4	6:33	2	subpicture_region_t	*p_region
decl	7:4	7:30	2	bool	b_mode_change
op	7:23	0:0	2	=
water	7:25	0:0	2	false
decl	8:4	8:28	2	int	i_regions
water	8:17	0:0	2	,
decl	8:4	8:28	2	int	i_timeout
call	9:4	9:25	2	bs_write
arg	9:14	9:15	3	s
water	9:14	0:0	4	s
arg	9:17	9:18	3	8
water	9:17	0:0	4	8
arg	9:20	9:25	3	0x0f
water	9:20	0:0	4	0
water	9:21	0:0	4	x0f
water	9:26	0:0	2	;
call	10:4	10:47	2	bs_write
arg	10:14	10:15	3	s
water	10:14	0:0	4	s
arg	10:17	10:18	3	8
water	10:17	0:0	4	8
arg	10:20	10:47	3	DVBSUB_ST_PAGE_COMPOSITION
water	10:20	0:0	4	DVBSUB_ST_PAGE_COMPOSITION
water	10:48	0:0	2	;
call	11:4	11:23	2	bs_write
arg	11:14	11:15	3	s
water	11:14	0:0	4	s
arg	11:17	11:19	3	16
water	11:17	0:0	4	16
arg	11:21	11:23	3	1
water	11:21	0:0	4	1
water	11:24	0:0	2	;
for	12:4	45:4	2	(i_regions = 0 , p_region = p_subpic ? p_subpic -> p_region : 0 ;p_region;p_region = p_region -> p_next , i_regions ++)
forinit	12:9	12:68	3	i_regions = 0 , p_region = p_subpic ? p_subpic -> p_region : 0 ;
water	12:9	0:0	4	i_regions
op	12:19	0:0	4	=
water	12:21	0:0	4	0
water	12:22	0:0	4	,
water	12:24	0:0	4	p_region
op	12:33	0:0	4	=
water	12:35	0:0	4	p_subpic
water	12:44	0:0	4	?
water	12:46	0:0	4	p_subpic
op	12:54	0:0	4	->
water	12:56	0:0	4	p_region
water	12:65	0:0	4	:
water	12:67	0:0	4	0
water	12:68	0:0	4	;
cond	13:9	13:9	3	p_region
water	13:9	0:0	4	p_region
forexpr	13:19	13:57	3	p_region = p_region -> p_next , i_regions ++
water	13:19	0:0	4	p_region
op	13:28	0:0	4	=
water	13:30	0:0	4	p_region
op	13:38	0:0	4	->
water	13:40	0:0	4	p_next
water	13:46	0:0	4	,
water	13:48	0:0	4	i_regions
op	13:57	0:0	4	++
stmts	14:4	45:4	3	
water	14:4	0:0	4	{
if	15:8	22:8	4	(i_regions >= p_sys -> i_regions)
cond	15:12	15:32	5	i_regions >= p_sys -> i_regions
water	15:12	0:0	6	i_regions
op	15:22	0:0	6	>=
water	15:25	0:0	6	p_sys
op	15:30	0:0	6	->
water	15:32	0:0	6	i_regions
stmts	16:8	22:8	5	
water	16:8	0:0	6	{
decl	17:12	17:35	6	encoder_region_t	region
water	18:12	0:0	6	region
op	18:18	0:0	6	.
water	18:19	0:0	6	i_width
op	18:27	0:0	6	=
water	18:29	0:0	6	region
op	18:35	0:0	6	.
water	18:36	0:0	6	i_height
op	18:45	0:0	6	=
water	18:47	0:0	6	0
water	18:48	0:0	6	;
water	19:12	0:0	6	p_sys
op	19:17	0:0	6	->
water	19:19	0:0	6	p_regions
op	19:29	0:0	6	=
call	19:31	20:76	6	xrealloc
arg	19:41	19:57	7	p_sys->p_regions
water	19:41	0:0	8	p_sys
op	19:46	0:0	8	->
water	19:48	0:0	8	p_regions
arg	20:26	20:76	7	sizeof(encoder_region_t)*(p_sys->i_regions+1)
op	20:26	0:0	8	sizeof
water	20:32	0:0	8	(
water	20:33	0:0	8	encoder_region_t
water	20:49	0:0	8	)
op	20:51	0:0	8	*
water	20:53	0:0	8	(
water	20:54	0:0	8	p_sys
op	20:59	0:0	8	->
water	20:61	0:0	8	i_regions
op	20:71	0:0	8	+
water	20:73	0:0	8	1
water	20:74	0:0	8	)
water	20:77	0:0	6	;
water	21:12	0:0	6	p_sys
op	21:17	0:0	6	->
water	21:19	0:0	6	p_regions
op	21:28	0:0	6	[
water	21:29	0:0	6	p_sys
op	21:34	0:0	6	->
water	21:36	0:0	6	i_regions
op	21:45	0:0	6	++
op	21:47	0:0	6	]
op	21:49	0:0	6	=
water	21:51	0:0	6	region
water	21:57	0:0	6	;
water	22:8	0:0	6	}
if	23:8	34:8	4	(( p_sys -> p_regions [ i_regions ] . i_width < ( int ) p_region -> fmt . i_visible_width ) || ( p_sys -> p_regions [ i_regions ] . i_width > ( int ) p_region -> fmt . i_visible_width ))
cond	23:12	26:49	5	( p_sys -> p_regions [ i_regions ] . i_width < ( int ) p_region -> fmt . i_visible_width ) || ( p_sys -> p_regions [ i_regions ] . i_width > ( int ) p_region -> fmt . i_visible_width )
water	23:12	0:0	6	(
water	23:14	0:0	6	p_sys
op	23:19	0:0	6	->
water	23:21	0:0	6	p_regions
op	23:30	0:0	6	[
water	23:31	0:0	6	i_regions
op	23:40	0:0	6	]
op	23:41	0:0	6	.
water	23:42	0:0	6	i_width
op	23:50	0:0	6	<
water	24:14	0:0	6	(
water	24:15	0:0	6	int
water	24:18	0:0	6	)
water	24:19	0:0	6	p_region
op	24:27	0:0	6	->
water	24:29	0:0	6	fmt
op	24:32	0:0	6	.
water	24:33	0:0	6	i_visible_width
water	24:49	0:0	6	)
op	24:51	0:0	6	||
water	25:12	0:0	6	(
water	25:14	0:0	6	p_sys
op	25:19	0:0	6	->
water	25:21	0:0	6	p_regions
op	25:30	0:0	6	[
water	25:31	0:0	6	i_regions
op	25:40	0:0	6	]
op	25:41	0:0	6	.
water	25:42	0:0	6	i_width
op	25:50	0:0	6	>
water	26:14	0:0	6	(
water	26:15	0:0	6	int
water	26:18	0:0	6	)
water	26:19	0:0	6	p_region
op	26:27	0:0	6	->
water	26:29	0:0	6	fmt
op	26:32	0:0	6	.
water	26:33	0:0	6	i_visible_width
water	26:49	0:0	6	)
stmts	27:8	34:8	5	
water	27:8	0:0	6	{
water	28:12	0:0	6	b_mode_change
op	28:26	0:0	6	=
water	28:28	0:0	6	true
water	28:32	0:0	6	;
call	29:12	31:51	6	msg_Dbg
arg	29:21	29:26	7	p_enc
water	29:21	0:0	8	p_enc
arg	29:28	29:62	7	"region %i width change: %i -> %i"
water	29:28	0:0	8	"region %i width change: %i -> %i"
arg	30:21	30:30	7	i_regions
water	30:21	0:0	8	i_regions
arg	30:32	30:67	7	p_sys->p_regions[i_regions].i_width
water	30:32	0:0	8	p_sys
op	30:37	0:0	8	->
water	30:39	0:0	8	p_regions
op	30:48	0:0	8	[
water	30:49	0:0	8	i_regions
op	30:58	0:0	8	]
op	30:59	0:0	8	.
water	30:60	0:0	8	i_width
arg	31:21	31:51	7	p_region->fmt.i_visible_width
water	31:21	0:0	8	p_region
op	31:29	0:0	8	->
water	31:31	0:0	8	fmt
op	31:34	0:0	8	.
water	31:35	0:0	8	i_visible_width
water	31:52	0:0	6	;
water	32:12	0:0	6	p_sys
op	32:17	0:0	6	->
water	32:19	0:0	6	p_regions
op	32:28	0:0	6	[
water	32:29	0:0	6	i_regions
op	32:38	0:0	6	]
op	32:39	0:0	6	.
water	32:40	0:0	6	i_width
op	32:48	0:0	6	=
water	33:16	0:0	6	p_region
op	33:24	0:0	6	->
water	33:26	0:0	6	fmt
op	33:29	0:0	6	.
water	33:30	0:0	6	i_visible_width
water	33:45	0:0	6	;
water	34:8	0:0	6	}
if	35:8	44:8	4	(p_sys -> p_regions [ i_regions ] . i_height < ( int ) p_region -> fmt . i_visible_height)
cond	35:12	36:32	5	p_sys -> p_regions [ i_regions ] . i_height < ( int ) p_region -> fmt . i_visible_height
water	35:12	0:0	6	p_sys
op	35:17	0:0	6	->
water	35:19	0:0	6	p_regions
op	35:28	0:0	6	[
water	35:29	0:0	6	i_regions
op	35:38	0:0	6	]
op	35:39	0:0	6	.
water	35:40	0:0	6	i_height
op	35:49	0:0	6	<
water	36:13	0:0	6	(
water	36:14	0:0	6	int
water	36:17	0:0	6	)
water	36:18	0:0	6	p_region
op	36:26	0:0	6	->
water	36:28	0:0	6	fmt
op	36:31	0:0	6	.
water	36:32	0:0	6	i_visible_height
stmts	37:8	44:8	5	
water	37:8	0:0	6	{
water	38:12	0:0	6	b_mode_change
op	38:26	0:0	6	=
water	38:28	0:0	6	true
water	38:32	0:0	6	;
call	39:12	41:52	6	msg_Dbg
arg	39:21	39:26	7	p_enc
water	39:21	0:0	8	p_enc
arg	39:28	39:63	7	"region %i height change: %i -> %i"
water	39:28	0:0	8	"region %i height change: %i -> %i"
arg	40:21	40:30	7	i_regions
water	40:21	0:0	8	i_regions
arg	40:32	40:68	7	p_sys->p_regions[i_regions].i_height
water	40:32	0:0	8	p_sys
op	40:37	0:0	8	->
water	40:39	0:0	8	p_regions
op	40:48	0:0	8	[
water	40:49	0:0	8	i_regions
op	40:58	0:0	8	]
op	40:59	0:0	8	.
water	40:60	0:0	8	i_height
arg	41:21	41:52	7	p_region->fmt.i_visible_height
water	41:21	0:0	8	p_region
op	41:29	0:0	8	->
water	41:31	0:0	8	fmt
op	41:34	0:0	8	.
water	41:35	0:0	8	i_visible_height
water	41:53	0:0	6	;
water	42:12	0:0	6	p_sys
op	42:17	0:0	6	->
water	42:19	0:0	6	p_regions
op	42:28	0:0	6	[
water	42:29	0:0	6	i_regions
op	42:38	0:0	6	]
op	42:39	0:0	6	.
water	42:40	0:0	6	i_height
op	42:49	0:0	6	=
water	43:16	0:0	6	p_region
op	43:24	0:0	6	->
water	43:26	0:0	6	fmt
op	43:29	0:0	6	.
water	43:30	0:0	6	i_visible_height
water	43:46	0:0	6	;
water	44:8	0:0	6	}
water	45:4	0:0	4	}
call	46:4	46:39	2	bs_write
arg	46:14	46:15	3	s
water	46:14	0:0	4	s
arg	46:17	46:19	3	16
water	46:17	0:0	4	16
arg	46:21	46:39	3	i_regions*6+2
water	46:21	0:0	4	i_regions
op	46:31	0:0	4	*
water	46:33	0:0	4	6
op	46:35	0:0	4	+
water	46:37	0:0	4	2
water	46:40	0:0	2	;
water	47:4	0:0	2	i_timeout
op	47:14	0:0	2	=
water	47:16	0:0	2	0
water	47:17	0:0	2	;
if	48:4	52:4	2	(p_subpic && ! p_subpic -> b_ephemer && ( p_subpic -> i_stop > p_subpic -> i_start ))
cond	48:8	49:47	3	p_subpic && ! p_subpic -> b_ephemer && ( p_subpic -> i_stop > p_subpic -> i_start )
water	48:8	0:0	4	p_subpic
op	48:17	0:0	4	&&
op	48:20	0:0	4	!
water	48:21	0:0	4	p_subpic
op	48:29	0:0	4	->
water	48:31	0:0	4	b_ephemer
op	48:41	0:0	4	&&
water	49:8	0:0	4	(
water	49:10	0:0	4	p_subpic
op	49:18	0:0	4	->
water	49:20	0:0	4	i_stop
op	49:27	0:0	4	>
water	49:29	0:0	4	p_subpic
op	49:37	0:0	4	->
water	49:39	0:0	4	i_start
water	49:47	0:0	4	)
stmts	50:4	52:4	3	
water	50:4	0:0	4	{
water	51:8	0:0	4	i_timeout
op	51:18	0:0	4	=
water	51:20	0:0	4	(
water	51:21	0:0	4	p_subpic
op	51:29	0:0	4	->
water	51:31	0:0	4	i_stop
op	51:38	0:0	4	-
water	51:40	0:0	4	p_subpic
op	51:48	0:0	4	->
water	51:50	0:0	4	i_start
water	51:57	0:0	4	)
op	51:59	0:0	4	/
water	51:61	0:0	4	1000000
water	51:68	0:0	4	;
water	52:4	0:0	4	}
call	53:4	53:30	2	bs_write
arg	53:14	53:15	3	s
water	53:14	0:0	4	s
arg	53:17	53:18	3	8
water	53:17	0:0	4	8
arg	53:20	53:30	3	i_timeout
water	53:20	0:0	4	i_timeout
water	53:31	0:0	2	;
call	54:4	54:40	2	bs_write
arg	54:14	54:15	3	s
water	54:14	0:0	4	s
arg	54:17	54:18	3	4
water	54:17	0:0	4	4
arg	54:20	54:40	3	p_sys->i_page_ver++
water	54:20	0:0	4	p_sys
op	54:25	0:0	4	->
water	54:27	0:0	4	i_page_ver
op	54:37	0:0	4	++
water	54:41	0:0	2	;
call	55:4	56:69	2	bs_write
arg	55:14	55:15	3	s
water	55:14	0:0	4	s
arg	55:17	55:18	3	2
water	55:17	0:0	4	2
arg	55:20	56:69	3	b_mode_change?DVBSUB_PCS_STATE_CHANGE:DVBSUB_PCS_STATE_ACQUISITION
water	55:20	0:0	4	b_mode_change
water	55:34	0:0	4	?
water	56:14	0:0	4	DVBSUB_PCS_STATE_CHANGE
water	56:38	0:0	4	:
water	56:40	0:0	4	DVBSUB_PCS_STATE_ACQUISITION
water	56:70	0:0	2	;
call	57:4	57:22	2	bs_write
arg	57:14	57:15	3	s
water	57:14	0:0	4	s
arg	57:17	57:18	3	2
water	57:17	0:0	4	2
arg	57:20	57:22	3	0
water	57:20	0:0	4	0
water	57:23	0:0	2	;
for	58:4	73:4	2	(i_regions = 0 , p_region = p_subpic ? p_subpic -> p_region : 0 ;p_region;p_region = p_region -> p_next , i_regions ++)
forinit	58:9	58:68	3	i_regions = 0 , p_region = p_subpic ? p_subpic -> p_region : 0 ;
water	58:9	0:0	4	i_regions
op	58:19	0:0	4	=
water	58:21	0:0	4	0
water	58:22	0:0	4	,
water	58:24	0:0	4	p_region
op	58:33	0:0	4	=
water	58:35	0:0	4	p_subpic
water	58:44	0:0	4	?
water	58:46	0:0	4	p_subpic
op	58:54	0:0	4	->
water	58:56	0:0	4	p_region
water	58:65	0:0	4	:
water	58:67	0:0	4	0
water	58:68	0:0	4	;
cond	59:9	59:9	3	p_region
water	59:9	0:0	4	p_region
forexpr	59:19	59:57	3	p_region = p_region -> p_next , i_regions ++
water	59:19	0:0	4	p_region
op	59:28	0:0	4	=
water	59:30	0:0	4	p_region
op	59:38	0:0	4	->
water	59:40	0:0	4	p_next
water	59:46	0:0	4	,
water	59:48	0:0	4	i_regions
op	59:57	0:0	4	++
stmts	60:4	73:4	3	
water	60:4	0:0	4	{
call	61:8	61:34	4	bs_write
arg	61:18	61:19	5	s
water	61:18	0:0	6	s
arg	61:21	61:22	5	8
water	61:21	0:0	6	8
arg	61:24	61:34	5	i_regions
water	61:24	0:0	6	i_regions
water	61:35	0:0	4	;
call	62:8	62:26	4	bs_write
arg	62:18	62:19	5	s
water	62:18	0:0	6	s
arg	62:21	62:22	5	8
water	62:21	0:0	6	8
arg	62:24	62:26	5	0
water	62:24	0:0	6	0
water	62:27	0:0	4	;
if	63:8	67:8	4	(( p_sys -> i_offset_x > 0 ) && ( p_sys -> i_offset_y > 0 ))
cond	63:12	63:61	5	( p_sys -> i_offset_x > 0 ) && ( p_sys -> i_offset_y > 0 )
water	63:12	0:0	6	(
water	63:13	0:0	6	p_sys
op	63:18	0:0	6	->
water	63:20	0:0	6	i_offset_x
op	63:31	0:0	6	>
water	63:33	0:0	6	0
water	63:34	0:0	6	)
op	63:36	0:0	6	&&
water	63:39	0:0	6	(
water	63:40	0:0	6	p_sys
op	63:45	0:0	6	->
water	63:47	0:0	6	i_offset_y
op	63:58	0:0	6	>
water	63:60	0:0	6	0
water	63:61	0:0	6	)
stmts	64:8	67:8	5	
water	64:8	0:0	6	{
call	65:12	65:47	6	bs_write
arg	65:22	65:23	7	s
water	65:22	0:0	8	s
arg	65:25	65:27	7	16
water	65:25	0:0	8	16
arg	65:29	65:47	7	p_sys->i_offset_x
water	65:29	0:0	8	p_sys
op	65:34	0:0	8	->
water	65:36	0:0	8	i_offset_x
water	65:48	0:0	6	;
call	66:12	66:47	6	bs_write
arg	66:22	66:23	7	s
water	66:22	0:0	8	s
arg	66:25	66:27	7	16
water	66:25	0:0	8	16
arg	66:29	66:47	7	p_sys->i_offset_y
water	66:29	0:0	8	p_sys
op	66:34	0:0	8	->
water	66:36	0:0	8	i_offset_y
water	66:48	0:0	6	;
water	67:8	0:0	6	}
else	68:8	72:8	4
stmts	69:8	72:8	5	
water	69:8	0:0	6	{
call	70:12	70:43	6	bs_write
arg	70:22	70:23	7	s
water	70:22	0:0	8	s
arg	70:25	70:27	7	16
water	70:25	0:0	8	16
arg	70:29	70:43	7	p_region->i_x
water	70:29	0:0	8	p_region
op	70:37	0:0	8	->
water	70:39	0:0	8	i_x
water	70:44	0:0	6	;
call	71:12	71:43	6	bs_write
arg	71:22	71:23	7	s
water	71:22	0:0	8	s
arg	71:25	71:27	7	16
water	71:25	0:0	8	16
arg	71:29	71:43	7	p_region->i_y
water	71:29	0:0	8	p_region
op	71:37	0:0	8	->
water	71:39	0:0	8	i_y
water	71:44	0:0	6	;
water	72:8	0:0	6	}
water	73:4	0:0	4	}
