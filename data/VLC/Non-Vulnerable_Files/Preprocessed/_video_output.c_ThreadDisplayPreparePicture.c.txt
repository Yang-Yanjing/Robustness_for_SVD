func	2:0	50:0	0	static int	ThreadDisplayPreparePicture
params	2:38	0:0	1	
param	2:39	2:58	2	vout_thread_t *	vout
param	2:60	2:70	2	bool	reuse
param	2:72	2:91	2	bool	frame_by_frame
stmnts	0:0	49:22	1	
decl	4:4	4:95	2	bool	is_late_dropped
op	4:25	0:0	2	=
water	4:27	0:0	2	vout
op	4:31	0:0	2	->
water	4:33	0:0	2	p
op	4:34	0:0	2	->
water	4:36	0:0	2	is_late_dropped
op	4:52	0:0	2	&&
op	4:55	0:0	2	!
water	4:56	0:0	2	vout
op	4:60	0:0	2	->
water	4:62	0:0	2	p
op	4:63	0:0	2	->
water	4:65	0:0	2	pause
op	4:70	0:0	2	.
water	4:71	0:0	2	is_on
op	4:77	0:0	2	&&
op	4:80	0:0	2	!
water	4:81	0:0	2	frame_by_frame
call	5:4	5:40	2	vlc_mutex_lock
arg	5:19	5:40	3	&vout->p->filter.lock
op	5:19	0:0	4	&
water	5:20	0:0	4	vout
op	5:24	0:0	4	->
water	5:26	0:0	4	p
op	5:27	0:0	4	->
water	5:29	0:0	4	filter
op	5:35	0:0	4	.
water	5:36	0:0	4	lock
water	5:41	0:0	2	;
decl	6:4	6:85	2	picture_t	*picture
op	6:23	0:0	2	=
call	6:25	6:84	3	filter_chain_VideoFilter
arg	6:50	6:78	4	vout->p->filter.chain_static
water	6:50	0:0	5	vout
op	6:54	0:0	5	->
water	6:56	0:0	5	p
op	6:57	0:0	5	->
water	6:59	0:0	5	filter
op	6:65	0:0	5	.
water	6:66	0:0	5	chain_static
arg	6:80	6:84	4	NULL
water	6:80	0:0	5	NULL
call	7:4	7:29	2	assert
arg	7:11	7:29	3	!reuse||!picture
op	7:11	0:0	4	!
water	7:12	0:0	4	reuse
op	7:18	0:0	4	||
op	7:21	0:0	4	!
water	7:22	0:0	4	picture
water	7:30	0:0	2	;
while	8:4	40:4	2	(! picture)
cond	8:11	8:12	3	! picture
op	8:11	0:0	4	!
water	8:12	0:0	4	picture
stmts	8:21	40:4	3	
water	8:21	0:0	4	{
decl	9:8	9:26	4	picture_t	*decoded
if	10:8	12:8	4	(reuse && vout -> p -> displayed . decoded)
cond	10:12	10:40	5	reuse && vout -> p -> displayed . decoded
water	10:12	0:0	6	reuse
op	10:18	0:0	6	&&
water	10:21	0:0	6	vout
op	10:25	0:0	6	->
water	10:27	0:0	6	p
op	10:28	0:0	6	->
water	10:30	0:0	6	displayed
op	10:39	0:0	6	.
water	10:40	0:0	6	decoded
stmts	10:49	12:8	5	
water	10:49	0:0	6	{
water	11:12	0:0	6	decoded
op	11:20	0:0	6	=
call	11:22	11:61	6	picture_Hold
arg	11:35	11:61	7	vout->p->displayed.decoded
water	11:35	0:0	8	vout
op	11:39	0:0	8	->
water	11:41	0:0	8	p
op	11:42	0:0	8	->
water	11:44	0:0	8	displayed
op	11:53	0:0	8	.
water	11:54	0:0	8	decoded
water	11:62	0:0	6	;
water	12:8	0:0	6	}
else	12:10	30:8	4
stmts	12:15	30:8	5	
water	12:15	0:0	6	{
water	13:12	0:0	6	decoded
op	13:20	0:0	6	=
call	13:22	13:60	6	picture_fifo_Pop
arg	13:39	13:60	7	vout->p->decoder_fifo
water	13:39	0:0	8	vout
op	13:43	0:0	8	->
water	13:45	0:0	8	p
op	13:46	0:0	8	->
water	13:48	0:0	8	decoder_fifo
water	13:61	0:0	6	;
if	14:12	29:12	6	(decoded)
cond	14:16	14:16	7	decoded
water	14:16	0:0	8	decoded
stmts	14:25	29:12	7	
water	14:25	0:0	8	{
if	15:16	26:16	8	(is_late_dropped && ! decoded -> b_force)
cond	15:20	15:49	9	is_late_dropped && ! decoded -> b_force
water	15:20	0:0	10	is_late_dropped
op	15:36	0:0	10	&&
op	15:39	0:0	10	!
water	15:40	0:0	10	decoded
op	15:47	0:0	10	->
water	15:49	0:0	10	b_force
stmts	15:58	26:16	9	
water	15:58	0:0	10	{
decl	16:20	16:57	10	const mtime_t	predicted
op	16:44	0:0	10	=
call	16:46	16:52	11	mdate
op	16:54	0:0	10	+
water	16:56	0:0	10	0
decl	17:20	17:66	10	const mtime_t	late
op	17:39	0:0	10	=
water	17:41	0:0	10	predicted
op	17:51	0:0	10	-
water	17:53	0:0	10	decoded
op	17:60	0:0	10	->
water	17:62	0:0	10	date
if	18:20	23:20	10	(late > VOUT_DISPLAY_LATE_THRESHOLD)
cond	18:24	18:31	11	late > VOUT_DISPLAY_LATE_THRESHOLD
water	18:24	0:0	12	late
op	18:29	0:0	12	>
water	18:31	0:0	12	VOUT_DISPLAY_LATE_THRESHOLD
stmts	18:60	23:20	11	
water	18:60	0:0	12	{
call	19:24	19:110	12	msg_Warn
arg	19:33	19:37	13	vout
water	19:33	0:0	14	vout
arg	19:39	19:99	13	"picture is too late to be displayed (missing %"PRId64" ms)"
water	19:39	0:0	14	"picture is too late to be displayed (missing %"
water	19:87	0:0	14	PRId64
water	19:93	0:0	14	" ms)"
arg	19:101	19:110	13	late/1000
water	19:101	0:0	14	late
op	19:105	0:0	14	/
water	19:106	0:0	14	1000
water	19:111	0:0	12	;
call	20:24	20:47	12	picture_Release
arg	20:40	20:47	13	decoded
water	20:40	0:0	14	decoded
water	20:48	0:0	12	;
call	21:24	21:69	12	vout_statistic_AddLost
arg	21:47	21:66	13	&vout->p->statistic
op	21:47	0:0	14	&
water	21:48	0:0	14	vout
op	21:52	0:0	14	->
water	21:54	0:0	14	p
op	21:55	0:0	14	->
water	21:57	0:0	14	statistic
arg	21:68	21:69	13	1
water	21:68	0:0	14	1
water	21:70	0:0	12	;
continue	22:24	22:32	12	
water	23:20	0:0	12	}
else	23:22	25:20	10
stmts	23:27	25:20	11	
if	23:27	25:20	12	(late > 0)
cond	23:31	23:38	13	late > 0
water	23:31	0:0	14	late
op	23:36	0:0	14	>
water	23:38	0:0	14	0
stmts	23:41	25:20	13	
water	23:41	0:0	14	{
call	24:24	24:105	14	msg_Dbg
arg	24:32	24:36	15	vout
water	24:32	0:0	16	vout
arg	24:38	24:94	15	"picture might be displayed late (missing %"PRId64" ms)"
water	24:38	0:0	16	"picture might be displayed late (missing %"
water	24:82	0:0	16	PRId64
water	24:88	0:0	16	" ms)"
arg	24:96	24:105	15	late/1000
water	24:96	0:0	16	late
op	24:100	0:0	16	/
water	24:101	0:0	16	1000
water	24:106	0:0	14	;
water	25:20	0:0	14	}
water	26:16	0:0	10	}
if	27:16	28:100	8	(!VideoFormatIsCropArEqual (& decoded -> format ,& vout -> p -> filter . format ))
cond	27:20	27:87	9	!VideoFormatIsCropArEqual (& decoded -> format ,& vout -> p -> filter . format )
op	27:20	0:0	10	!
call	27:21	27:87	10	VideoFormatIsCropArEqual
arg	27:46	27:62	11	&decoded->format
op	27:46	0:0	12	&
water	27:47	0:0	12	decoded
op	27:54	0:0	12	->
water	27:56	0:0	12	format
arg	27:64	27:87	11	&vout->p->filter.format
op	27:64	0:0	12	&
water	27:65	0:0	12	vout
op	27:69	0:0	12	->
water	27:71	0:0	12	p
op	27:72	0:0	12	->
water	27:74	0:0	12	filter
op	27:80	0:0	12	.
water	27:81	0:0	12	format
stmts	28:20	28:100	9	
call	28:20	28:99	10	ThreadChangeFilters
arg	28:40	28:44	11	vout
water	28:40	0:0	12	vout
arg	28:46	28:62	11	&decoded->format
op	28:46	0:0	12	&
water	28:47	0:0	12	decoded
op	28:54	0:0	12	->
water	28:56	0:0	12	format
arg	28:64	28:93	11	vout->p->filter.configuration
water	28:64	0:0	12	vout
op	28:68	0:0	12	->
water	28:70	0:0	12	p
op	28:71	0:0	12	->
water	28:73	0:0	12	filter
op	28:79	0:0	12	.
water	28:80	0:0	12	configuration
arg	28:95	28:99	11	true
water	28:95	0:0	12	true
water	28:100	0:0	10	;
water	29:12	0:0	8	}
water	30:8	0:0	6	}
if	31:8	32:17	4	(! decoded)
cond	31:12	31:13	5	! decoded
op	31:12	0:0	6	!
water	31:13	0:0	6	decoded
stmts	32:12	32:17	5	
break	32:12	32:17	6	
water	33:8	0:0	4	reuse
op	33:14	0:0	4	=
water	33:16	0:0	4	false
water	33:21	0:0	4	;
if	34:8	35:55	4	(vout -> p -> displayed . decoded)
cond	34:12	34:31	5	vout -> p -> displayed . decoded
water	34:12	0:0	6	vout
op	34:16	0:0	6	->
water	34:18	0:0	6	p
op	34:19	0:0	6	->
water	34:21	0:0	6	displayed
op	34:30	0:0	6	.
water	34:31	0:0	6	decoded
stmts	35:12	35:55	5	
call	35:12	35:54	6	picture_Release
arg	35:28	35:54	7	vout->p->displayed.decoded
water	35:28	0:0	8	vout
op	35:32	0:0	8	->
water	35:34	0:0	8	p
op	35:35	0:0	8	->
water	35:37	0:0	8	displayed
op	35:46	0:0	8	.
water	35:47	0:0	8	decoded
water	35:55	0:0	6	;
water	36:8	0:0	4	vout
op	36:12	0:0	4	->
water	36:14	0:0	4	p
op	36:15	0:0	4	->
water	36:17	0:0	4	displayed
op	36:26	0:0	4	.
water	36:27	0:0	4	decoded
op	36:41	0:0	4	=
call	36:43	36:63	4	picture_Hold
arg	36:56	36:63	5	decoded
water	36:56	0:0	6	decoded
water	36:64	0:0	4	;
water	37:8	0:0	4	vout
op	37:12	0:0	4	->
water	37:14	0:0	4	p
op	37:15	0:0	4	->
water	37:17	0:0	4	displayed
op	37:26	0:0	4	.
water	37:27	0:0	4	timestamp
op	37:41	0:0	4	=
water	37:43	0:0	4	decoded
op	37:50	0:0	4	->
water	37:52	0:0	4	date
water	37:56	0:0	4	;
water	38:8	0:0	4	vout
op	38:12	0:0	4	->
water	38:14	0:0	4	p
op	38:15	0:0	4	->
water	38:17	0:0	4	displayed
op	38:26	0:0	4	.
water	38:27	0:0	4	is_interlaced
op	38:41	0:0	4	=
op	38:43	0:0	4	!
water	38:44	0:0	4	decoded
op	38:51	0:0	4	->
water	38:53	0:0	4	b_progressive
water	38:66	0:0	4	;
water	39:8	0:0	4	picture
op	39:16	0:0	4	=
call	39:18	39:80	4	filter_chain_VideoFilter
arg	39:43	39:71	5	vout->p->filter.chain_static
water	39:43	0:0	6	vout
op	39:47	0:0	6	->
water	39:49	0:0	6	p
op	39:50	0:0	6	->
water	39:52	0:0	6	filter
op	39:58	0:0	6	.
water	39:59	0:0	6	chain_static
arg	39:73	39:80	5	decoded
water	39:73	0:0	6	decoded
water	39:81	0:0	4	;
water	40:4	0:0	4	}
call	41:4	41:42	2	vlc_mutex_unlock
arg	41:21	41:42	3	&vout->p->filter.lock
op	41:21	0:0	4	&
water	41:22	0:0	4	vout
op	41:26	0:0	4	->
water	41:28	0:0	4	p
op	41:29	0:0	4	->
water	41:31	0:0	4	filter
op	41:37	0:0	4	.
water	41:38	0:0	4	lock
water	41:43	0:0	2	;
if	42:4	43:27	2	(! picture)
cond	42:8	42:9	3	! picture
op	42:8	0:0	4	!
water	42:9	0:0	4	picture
stmts	43:8	43:27	3	
return	43:8	43:27	4	VLC_EGENERIC
water	43:15	0:0	5	VLC_EGENERIC
call	44:4	44:35	2	assert
arg	44:11	44:35	3	!vout->p->displayed.next
op	44:11	0:0	4	!
water	44:12	0:0	4	vout
op	44:16	0:0	4	->
water	44:18	0:0	4	p
op	44:19	0:0	4	->
water	44:21	0:0	4	displayed
op	44:30	0:0	4	.
water	44:31	0:0	4	next
water	44:36	0:0	2	;
if	45:4	46:44	2	(! vout -> p -> displayed . current)
cond	45:8	45:28	3	! vout -> p -> displayed . current
op	45:8	0:0	4	!
water	45:9	0:0	4	vout
op	45:13	0:0	4	->
water	45:15	0:0	4	p
op	45:16	0:0	4	->
water	45:18	0:0	4	displayed
op	45:27	0:0	4	.
water	45:28	0:0	4	current
stmts	46:8	46:44	3	
water	46:8	0:0	4	vout
op	46:12	0:0	4	->
water	46:14	0:0	4	p
op	46:15	0:0	4	->
water	46:17	0:0	4	displayed
op	46:26	0:0	4	.
water	46:27	0:0	4	current
op	46:35	0:0	4	=
water	46:37	0:0	4	picture
water	46:44	0:0	4	;
else	47:4	48:44	2
stmts	48:8	48:44	3	
water	48:8	0:0	4	vout
op	48:12	0:0	4	->
water	48:14	0:0	4	p
op	48:15	0:0	4	->
water	48:17	0:0	4	displayed
op	48:26	0:0	4	.
water	48:27	0:0	4	next
op	48:35	0:0	4	=
water	48:37	0:0	4	picture
water	48:44	0:0	4	;
return	49:4	49:22	2	VLC_SUCCESS
water	49:11	0:0	3	VLC_SUCCESS
