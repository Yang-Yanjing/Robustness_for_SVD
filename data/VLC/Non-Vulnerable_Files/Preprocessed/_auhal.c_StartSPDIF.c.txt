func	2:0	188:0	0	static int	StartSPDIF
params	2:21	0:0	1	
param	2:22	2:45	2	audio_output_t *	p_aout
param	2:47	2:73	2	audio_sample_format_t *	fmt
stmnts	0:0	187:15	1	
decl	4:4	4:48	2	struct aout_sys_t	*p_sys
op	4:35	0:0	2	=
water	4:37	0:0	2	p_aout
op	4:43	0:0	2	->
water	4:45	0:0	2	sys
decl	5:4	5:39	2	OSStatus	err
op	5:32	0:0	2	=
water	5:34	0:0	2	noErr
decl	6:4	6:55	2	UInt32	i_param_size
op	6:41	0:0	2	=
water	6:43	0:0	2	0
water	6:44	0:0	2	,
decl	6:4	6:55	2	UInt32	b_mix
op	6:52	0:0	2	=
water	6:54	0:0	2	0
decl	7:4	7:47	2	Boolean	b_writeable
op	7:40	0:0	2	=
water	7:42	0:0	2	false
decl	8:4	8:45	2	AudioStreamID	*p_streams
op	8:39	0:0	2	=
water	8:41	0:0	2	NULL
water	9:4	0:0	2	unsigned
water	9:28	0:0	2	i_streams
op	9:38	0:0	2	=
water	9:40	0:0	2	0
water	9:41	0:0	2	;
decl	10:4	10:53	2	AudioStreamBasicDescription	desired_stream_format
call	11:4	11:67	2	memset
arg	11:11	11:33	3	&desired_stream_format
op	11:11	0:0	4	&
water	11:12	0:0	4	desired_stream_format
arg	11:35	11:36	3	0
water	11:35	0:0	4	0
arg	11:38	11:67	3	sizeof(desired_stream_format)
op	11:38	0:0	4	sizeof
water	11:44	0:0	4	(
water	11:45	0:0	4	desired_stream_format
water	11:66	0:0	4	)
water	11:68	0:0	2	;
water	13:4	0:0	2	p_sys
op	13:9	0:0	2	->
water	13:11	0:0	2	b_digital
op	13:21	0:0	2	=
water	13:23	0:0	2	true
water	13:27	0:0	2	;
decl	15:4	15:158	2	AudioObjectPropertyAddress	audioDeviceHogModeAddress
op	15:57	0:0	2	=
water	15:59	0:0	2	{
water	15:61	0:0	2	kAudioDevicePropertyHogMode
water	15:88	0:0	2	,
water	15:90	0:0	2	kAudioDevicePropertyScopeOutput
water	15:121	0:0	2	,
water	15:123	0:0	2	kAudioObjectPropertyElementMaster
water	15:157	0:0	2	}
water	16:4	0:0	2	i_param_size
op	16:17	0:0	2	=
op	16:19	0:0	2	sizeof
water	16:25	0:0	2	(
water	16:26	0:0	2	p_sys
op	16:31	0:0	2	->
water	16:33	0:0	2	i_hog_pid
water	16:42	0:0	2	)
water	16:43	0:0	2	;
water	17:4	0:0	2	p_sys
op	17:9	0:0	2	->
water	17:11	0:0	2	i_hog_pid
op	17:21	0:0	2	=
call	17:23	17:30	2	getpid
water	17:32	0:0	2	;
water	22:4	0:0	2	p_sys
op	22:9	0:0	2	->
water	22:11	0:0	2	b_ignore_streams_changed_callback
op	22:45	0:0	2	=
water	22:47	0:0	2	true
water	22:51	0:0	2	;
water	23:4	0:0	2	err
op	23:8	0:0	2	=
call	23:10	23:128	2	AudioObjectSetPropertyData
arg	23:37	23:58	3	p_sys->i_selected_dev
water	23:37	0:0	4	p_sys
op	23:42	0:0	4	->
water	23:44	0:0	4	i_selected_dev
arg	23:60	23:86	3	&audioDeviceHogModeAddress
op	23:60	0:0	4	&
water	23:61	0:0	4	audioDeviceHogModeAddress
arg	23:88	23:89	3	0
water	23:88	0:0	4	0
arg	23:91	23:95	3	NULL
water	23:91	0:0	4	NULL
arg	23:97	23:109	3	i_param_size
water	23:97	0:0	4	i_param_size
arg	23:111	23:128	3	&p_sys->i_hog_pid
op	23:111	0:0	4	&
water	23:112	0:0	4	p_sys
op	23:117	0:0	4	->
water	23:119	0:0	4	i_hog_pid
water	23:129	0:0	2	;
water	24:4	0:0	2	p_sys
op	24:9	0:0	2	->
water	24:11	0:0	2	b_ignore_streams_changed_callback
op	24:45	0:0	2	=
water	24:47	0:0	2	false
water	24:52	0:0	2	;
if	25:4	28:4	2	(err != noErr)
cond	25:8	25:15	3	err != noErr
water	25:8	0:0	4	err
op	25:12	0:0	4	!=
water	25:15	0:0	4	noErr
stmts	25:22	28:4	3	
water	25:22	0:0	4	{
call	26:8	26:69	4	msg_Err
arg	26:16	26:22	5	p_aout
water	26:16	0:0	6	p_aout
arg	26:24	26:55	5	"failed to set hogmode [%4.4s]"
water	26:24	0:0	6	"failed to set hogmode [%4.4s]"
arg	26:57	26:69	5	(char*)&err
water	26:57	0:0	6	(
water	26:58	0:0	6	char
op	26:63	0:0	6	*
water	26:64	0:0	6	)
op	26:65	0:0	6	&
water	26:66	0:0	6	err
water	26:70	0:0	4	;
return	27:8	27:20	4	false
water	27:15	0:0	5	false
water	28:4	0:0	4	}
decl	29:4	29:173	2	AudioObjectPropertyAddress	audioDeviceSupportsMixingAddress
op	29:64	0:0	2	=
water	29:66	0:0	2	{
water	29:68	0:0	2	kAudioDevicePropertySupportsMixing
water	29:103	0:0	2	,
water	29:105	0:0	2	kAudioObjectPropertyScopeGlobal
water	29:136	0:0	2	,
water	29:138	0:0	2	kAudioObjectPropertyElementMaster
water	29:172	0:0	2	}
if	30:4	44:4	2	(AudioObjectHasProperty (p_sys -> i_selected_dev ,& audioDeviceSupportsMixingAddress ))
cond	30:8	30:87	3	AudioObjectHasProperty (p_sys -> i_selected_dev ,& audioDeviceSupportsMixingAddress )
call	30:8	30:87	4	AudioObjectHasProperty
arg	30:31	30:52	5	p_sys->i_selected_dev
water	30:31	0:0	6	p_sys
op	30:36	0:0	6	->
water	30:38	0:0	6	i_selected_dev
arg	30:54	30:87	5	&audioDeviceSupportsMixingAddress
op	30:54	0:0	6	&
water	30:55	0:0	6	audioDeviceSupportsMixingAddress
stmts	30:90	44:4	3	
water	30:90	0:0	4	{
water	32:8	0:0	4	err
op	32:12	0:0	4	=
call	32:14	32:114	4	AudioObjectIsPropertySettable
arg	32:44	32:65	5	p_sys->i_selected_dev
water	32:44	0:0	6	p_sys
op	32:49	0:0	6	->
water	32:51	0:0	6	i_selected_dev
arg	32:67	32:100	5	&audioDeviceSupportsMixingAddress
op	32:67	0:0	6	&
water	32:68	0:0	6	audioDeviceSupportsMixingAddress
arg	32:102	32:114	5	&b_writeable
op	32:102	0:0	6	&
water	32:103	0:0	6	b_writeable
water	32:115	0:0	4	;
water	33:8	0:0	4	err
op	33:12	0:0	4	=
call	33:14	33:125	4	AudioObjectGetPropertyDataSize
arg	33:45	33:66	5	p_sys->i_selected_dev
water	33:45	0:0	6	p_sys
op	33:50	0:0	6	->
water	33:52	0:0	6	i_selected_dev
arg	33:68	33:101	5	&audioDeviceSupportsMixingAddress
op	33:68	0:0	6	&
water	33:69	0:0	6	audioDeviceSupportsMixingAddress
arg	33:103	33:104	5	0
water	33:103	0:0	6	0
arg	33:106	33:110	5	NULL
water	33:106	0:0	6	NULL
arg	33:112	33:125	5	&i_param_size
op	33:112	0:0	6	&
water	33:113	0:0	6	i_param_size
water	33:126	0:0	4	;
water	34:8	0:0	4	err
op	34:12	0:0	4	=
call	34:14	34:129	4	AudioObjectGetPropertyData
arg	34:41	34:62	5	p_sys->i_selected_dev
water	34:41	0:0	6	p_sys
op	34:46	0:0	6	->
water	34:48	0:0	6	i_selected_dev
arg	34:64	34:97	5	&audioDeviceSupportsMixingAddress
op	34:64	0:0	6	&
water	34:65	0:0	6	audioDeviceSupportsMixingAddress
arg	34:99	34:100	5	0
water	34:99	0:0	6	0
arg	34:102	34:106	5	NULL
water	34:102	0:0	6	NULL
arg	34:108	34:121	5	&i_param_size
op	34:108	0:0	6	&
water	34:109	0:0	6	i_param_size
arg	34:123	34:129	5	&b_mix
op	34:123	0:0	6	&
water	34:124	0:0	6	b_mix
water	34:130	0:0	4	;
if	35:8	39:8	4	(err == noErr && b_writeable)
cond	35:12	35:28	5	err == noErr && b_writeable
water	35:12	0:0	6	err
op	35:16	0:0	6	==
water	35:19	0:0	6	noErr
op	35:25	0:0	6	&&
water	35:28	0:0	6	b_writeable
stmts	35:41	39:8	5	
water	35:41	0:0	6	{
water	36:12	0:0	6	b_mix
op	36:18	0:0	6	=
water	36:20	0:0	6	0
water	36:21	0:0	6	;
water	37:12	0:0	6	err
op	37:16	0:0	6	=
call	37:18	37:132	6	AudioObjectSetPropertyData
arg	37:45	37:66	7	p_sys->i_selected_dev
water	37:45	0:0	8	p_sys
op	37:50	0:0	8	->
water	37:52	0:0	8	i_selected_dev
arg	37:68	37:101	7	&audioDeviceSupportsMixingAddress
op	37:68	0:0	8	&
water	37:69	0:0	8	audioDeviceSupportsMixingAddress
arg	37:103	37:104	7	0
water	37:103	0:0	8	0
arg	37:106	37:110	7	NULL
water	37:106	0:0	8	NULL
arg	37:112	37:124	7	i_param_size
water	37:112	0:0	8	i_param_size
arg	37:126	37:132	7	&b_mix
op	37:126	0:0	8	&
water	37:127	0:0	8	b_mix
water	37:133	0:0	6	;
water	38:12	0:0	6	p_sys
op	38:17	0:0	6	->
water	38:19	0:0	6	b_changed_mixing
op	38:36	0:0	6	=
water	38:38	0:0	6	true
water	38:42	0:0	6	;
water	39:8	0:0	6	}
if	40:8	43:8	4	(err != noErr)
cond	40:12	40:19	5	err != noErr
water	40:12	0:0	6	err
op	40:16	0:0	6	!=
water	40:19	0:0	6	noErr
stmts	40:26	43:8	5	
water	40:26	0:0	6	{
call	41:12	41:73	6	msg_Err
arg	41:20	41:26	7	p_aout
water	41:20	0:0	8	p_aout
arg	41:28	41:59	7	"failed to set mixmode [%4.4s]"
water	41:28	0:0	8	"failed to set mixmode [%4.4s]"
arg	41:61	41:73	7	(char*)&err
water	41:61	0:0	8	(
water	41:62	0:0	8	char
op	41:67	0:0	8	*
water	41:68	0:0	8	)
op	41:69	0:0	8	&
water	41:70	0:0	8	err
water	41:74	0:0	6	;
return	42:12	42:24	6	false
water	42:19	0:0	7	false
water	43:8	0:0	6	}
water	44:4	0:0	4	}
decl	46:4	46:147	2	AudioObjectPropertyAddress	streamsAddress
op	46:46	0:0	2	=
water	46:48	0:0	2	{
water	46:50	0:0	2	kAudioDevicePropertyStreams
water	46:77	0:0	2	,
water	46:79	0:0	2	kAudioDevicePropertyScopeOutput
water	46:110	0:0	2	,
water	46:112	0:0	2	kAudioObjectPropertyElementMaster
water	46:146	0:0	2	}
water	47:4	0:0	2	err
op	47:8	0:0	2	=
call	47:10	47:103	2	AudioObjectGetPropertyDataSize
arg	47:41	47:62	3	p_sys->i_selected_dev
water	47:41	0:0	4	p_sys
op	47:46	0:0	4	->
water	47:48	0:0	4	i_selected_dev
arg	47:64	47:79	3	&streamsAddress
op	47:64	0:0	4	&
water	47:65	0:0	4	streamsAddress
arg	47:81	47:82	3	0
water	47:81	0:0	4	0
arg	47:84	47:88	3	NULL
water	47:84	0:0	4	NULL
arg	47:90	47:103	3	&i_param_size
op	47:90	0:0	4	&
water	47:91	0:0	4	i_param_size
water	47:104	0:0	2	;
if	48:4	51:4	2	(err != noErr)
cond	48:8	48:15	3	err != noErr
water	48:8	0:0	4	err
op	48:12	0:0	4	!=
water	48:15	0:0	4	noErr
stmts	48:22	51:4	3	
water	48:22	0:0	4	{
call	49:8	49:95	4	msg_Err
arg	49:16	49:22	5	p_aout
water	49:16	0:0	6	p_aout
arg	49:24	49:81	5	"could not get size of stream description packet [%4.4s]"
water	49:24	0:0	6	"could not get size of stream description packet [%4.4s]"
arg	49:83	49:95	5	(char*)&err
water	49:83	0:0	6	(
water	49:84	0:0	6	char
op	49:89	0:0	6	*
water	49:90	0:0	6	)
op	49:91	0:0	6	&
water	49:92	0:0	6	err
water	49:96	0:0	4	;
return	50:8	50:20	4	false
water	50:15	0:0	5	false
water	51:4	0:0	4	}
water	52:4	0:0	2	i_streams
op	52:14	0:0	2	=
water	52:16	0:0	2	i_param_size
op	52:29	0:0	2	/
op	52:31	0:0	2	sizeof
water	52:37	0:0	2	(
water	52:38	0:0	2	AudioStreamID
water	52:51	0:0	2	)
water	52:52	0:0	2	;
water	53:4	0:0	2	p_streams
op	53:14	0:0	2	=
water	53:16	0:0	2	(
water	53:17	0:0	2	AudioStreamID
op	53:31	0:0	2	*
water	53:32	0:0	2	)
call	53:33	53:52	2	malloc
arg	53:40	53:52	3	i_param_size
water	53:40	0:0	4	i_param_size
water	53:53	0:0	2	;
if	54:4	55:20	2	(p_streams == NULL)
cond	54:8	54:21	3	p_streams == NULL
water	54:8	0:0	4	p_streams
op	54:18	0:0	4	==
water	54:21	0:0	4	NULL
stmts	55:8	55:20	3	
return	55:8	55:20	4	false
water	55:15	0:0	5	false
water	56:4	0:0	2	err
op	56:8	0:0	2	=
call	56:10	56:110	2	AudioObjectGetPropertyData
arg	56:37	56:58	3	p_sys->i_selected_dev
water	56:37	0:0	4	p_sys
op	56:42	0:0	4	->
water	56:44	0:0	4	i_selected_dev
arg	56:60	56:75	3	&streamsAddress
op	56:60	0:0	4	&
water	56:61	0:0	4	streamsAddress
arg	56:77	56:78	3	0
water	56:77	0:0	4	0
arg	56:80	56:84	3	NULL
water	56:80	0:0	4	NULL
arg	56:86	56:99	3	&i_param_size
op	56:86	0:0	4	&
water	56:87	0:0	4	i_param_size
arg	56:101	56:110	3	p_streams
water	56:101	0:0	4	p_streams
water	56:111	0:0	2	;
if	57:4	61:4	2	(err != noErr)
cond	57:8	57:15	3	err != noErr
water	57:8	0:0	4	err
op	57:12	0:0	4	!=
water	57:15	0:0	4	noErr
stmts	57:22	61:4	3	
water	57:22	0:0	4	{
call	58:8	58:83	4	msg_Err
arg	58:16	58:22	5	p_aout
water	58:16	0:0	6	p_aout
arg	58:24	58:69	5	"could not fetch stream descriptions [%4.4s]"
water	58:24	0:0	6	"could not fetch stream descriptions [%4.4s]"
arg	58:71	58:83	5	(char*)&err
water	58:71	0:0	6	(
water	58:72	0:0	6	char
op	58:77	0:0	6	*
water	58:78	0:0	6	)
op	58:79	0:0	6	&
water	58:80	0:0	6	err
water	58:84	0:0	4	;
call	59:8	59:22	4	free
arg	59:13	59:22	5	p_streams
water	59:13	0:0	6	p_streams
water	59:23	0:0	4	;
return	60:8	60:20	4	false
water	60:15	0:0	5	false
water	61:4	0:0	4	}
decl	62:4	62:140	2	AudioObjectPropertyAddress	physicalFormatsAddress
op	62:54	0:0	2	=
water	62:56	0:0	2	{
water	62:58	0:0	2	kAudioStreamPropertyAvailablePhysicalFormats
water	62:102	0:0	2	,
water	62:104	0:0	2	kAudioObjectPropertyScopeGlobal
water	62:135	0:0	2	,
water	62:137	0:0	2	0
water	62:139	0:0	2	}
for	63:4	150:4	2	(unsigned i = 0 ;i < i_streams && p_sys -> i_stream_index < 0;i ++)
forinit	63:9	63:23	3	unsigned i = 0 ;
water	63:9	0:0	4	unsigned
water	63:18	0:0	4	i
op	63:20	0:0	4	=
water	63:22	0:0	4	0
water	63:23	0:0	4	;
cond	63:25	63:66	3	i < i_streams && p_sys -> i_stream_index < 0
water	63:25	0:0	4	i
op	63:27	0:0	4	<
water	63:29	0:0	4	i_streams
op	63:39	0:0	4	&&
water	63:42	0:0	4	p_sys
op	63:47	0:0	4	->
water	63:49	0:0	4	i_stream_index
op	63:64	0:0	4	<
water	63:66	0:0	4	0
forexpr	63:70	63:71	3	i ++
water	63:70	0:0	4	i
op	63:71	0:0	4	++
stmts	63:75	150:4	3	
water	63:75	0:0	4	{
decl	65:8	65:58	4	AudioStreamRangedDescription	*p_format_list
op	65:52	0:0	4	=
water	65:54	0:0	4	NULL
decl	66:8	66:50	4	int	i_formats
op	66:47	0:0	4	=
water	66:49	0:0	4	0
decl	67:8	67:54	4	bool	b_digital
op	67:47	0:0	4	=
water	67:49	0:0	4	false
water	69:8	0:0	4	err
op	69:12	0:0	4	=
call	69:14	69:106	4	AudioObjectGetPropertyDataSize
arg	69:45	69:57	5	p_streams[i]
water	69:45	0:0	6	p_streams
op	69:54	0:0	6	[
water	69:55	0:0	6	i
op	69:56	0:0	6	]
arg	69:59	69:82	5	&physicalFormatsAddress
op	69:59	0:0	6	&
water	69:60	0:0	6	physicalFormatsAddress
arg	69:84	69:85	5	0
water	69:84	0:0	6	0
arg	69:87	69:91	5	NULL
water	69:87	0:0	6	NULL
arg	69:93	69:106	5	&i_param_size
op	69:93	0:0	6	&
water	69:94	0:0	6	i_param_size
water	69:107	0:0	4	;
if	70:8	73:8	4	(err != noErr)
cond	70:12	70:19	5	err != noErr
water	70:12	0:0	6	err
op	70:16	0:0	6	!=
water	70:19	0:0	6	noErr
stmts	70:26	73:8	5	
water	70:26	0:0	6	{
call	71:12	71:109	6	msg_Err
arg	71:20	71:26	7	p_aout
water	71:20	0:0	8	p_aout
arg	71:28	71:81	7	"could not get number of streamformats: [%4.4s] (%i)"
water	71:28	0:0	8	"could not get number of streamformats: [%4.4s] (%i)"
arg	71:83	71:95	7	(char*)&err
water	71:83	0:0	8	(
water	71:84	0:0	8	char
op	71:89	0:0	8	*
water	71:90	0:0	8	)
op	71:91	0:0	8	&
water	71:92	0:0	8	err
arg	71:97	71:109	7	(int32_t)err
water	71:97	0:0	8	(
water	71:98	0:0	8	int32_t
water	71:105	0:0	8	)
water	71:106	0:0	8	err
water	71:110	0:0	6	;
continue	72:12	72:20	6	
water	73:8	0:0	6	}
water	74:8	0:0	4	i_formats
op	74:18	0:0	4	=
water	74:20	0:0	4	i_param_size
op	74:33	0:0	4	/
op	74:35	0:0	4	sizeof
water	74:41	0:0	4	(
water	74:42	0:0	4	AudioStreamRangedDescription
water	74:70	0:0	4	)
water	74:71	0:0	4	;
water	75:8	0:0	4	p_format_list
op	75:22	0:0	4	=
water	75:24	0:0	4	(
water	75:25	0:0	4	AudioStreamRangedDescription
op	75:54	0:0	4	*
water	75:55	0:0	4	)
call	75:56	75:75	4	malloc
arg	75:63	75:75	5	i_param_size
water	75:63	0:0	6	i_param_size
water	75:76	0:0	4	;
if	76:8	77:20	4	(p_format_list == NULL)
cond	76:12	76:29	5	p_format_list == NULL
water	76:12	0:0	6	p_format_list
op	76:26	0:0	6	==
water	76:29	0:0	6	NULL
stmts	77:12	77:20	5	
continue	77:12	77:20	6	
water	78:8	0:0	4	err
op	78:12	0:0	4	=
call	78:14	78:117	4	AudioObjectGetPropertyData
arg	78:41	78:53	5	p_streams[i]
water	78:41	0:0	6	p_streams
op	78:50	0:0	6	[
water	78:51	0:0	6	i
op	78:52	0:0	6	]
arg	78:55	78:78	5	&physicalFormatsAddress
op	78:55	0:0	6	&
water	78:56	0:0	6	physicalFormatsAddress
arg	78:80	78:81	5	0
water	78:80	0:0	6	0
arg	78:83	78:87	5	NULL
water	78:83	0:0	6	NULL
arg	78:89	78:102	5	&i_param_size
op	78:89	0:0	6	&
water	78:90	0:0	6	i_param_size
arg	78:104	78:117	5	p_format_list
water	78:104	0:0	6	p_format_list
water	78:118	0:0	4	;
if	79:8	83:8	4	(err != noErr)
cond	79:12	79:19	5	err != noErr
water	79:12	0:0	6	err
op	79:16	0:0	6	!=
water	79:19	0:0	6	noErr
stmts	79:26	83:8	5	
water	79:26	0:0	6	{
call	80:12	80:92	6	msg_Err
arg	80:20	80:26	7	p_aout
water	80:20	0:0	8	p_aout
arg	80:28	80:78	7	"could not get the list of streamformats: [%4.4s]"
water	80:28	0:0	8	"could not get the list of streamformats: [%4.4s]"
arg	80:80	80:92	7	(char*)&err
water	80:80	0:0	8	(
water	80:81	0:0	8	char
op	80:86	0:0	8	*
water	80:87	0:0	8	)
op	80:88	0:0	8	&
water	80:89	0:0	8	err
water	80:93	0:0	6	;
call	81:12	81:30	6	free
arg	81:17	81:30	7	p_format_list
water	81:17	0:0	8	p_format_list
water	81:31	0:0	6	;
continue	82:12	82:20	6	
water	83:8	0:0	6	}
for	85:8	93:8	4	( int j = 0 ;j < i_formats;j ++)
forinit	0:0	85:22	5	 int j = 0 ;
decl	85:13	85:22	6	int	j
op	85:19	0:0	6	=
water	85:21	0:0	6	0
cond	85:24	85:28	5	j < i_formats
water	85:24	0:0	6	j
op	85:26	0:0	6	<
water	85:28	0:0	6	i_formats
forexpr	85:39	85:40	5	j ++
water	85:39	0:0	6	j
op	85:40	0:0	6	++
stmts	85:44	93:8	5	
water	85:44	0:0	6	{
if	86:12	92:12	6	(p_format_list [ j ] . mFormat . mFormatID == 'IAC3' || p_format_list [ j ] . mFormat . mFormatID == 'iac3' || p_format_list [ j ] . mFormat . mFormatID == kAudioFormat60958AC3 || p_format_list [ j ] . mFormat . mFormatID == kAudioFormatAC3)
cond	86:16	89:53	7	p_format_list [ j ] . mFormat . mFormatID == 'IAC3' || p_format_list [ j ] . mFormat . mFormatID == 'iac3' || p_format_list [ j ] . mFormat . mFormatID == kAudioFormat60958AC3 || p_format_list [ j ] . mFormat . mFormatID == kAudioFormatAC3
water	86:16	0:0	8	p_format_list
op	86:29	0:0	8	[
water	86:30	0:0	8	j
op	86:31	0:0	8	]
op	86:32	0:0	8	.
water	86:33	0:0	8	mFormat
op	86:40	0:0	8	.
water	86:41	0:0	8	mFormatID
op	86:51	0:0	8	==
water	86:54	0:0	8	'IAC3'
op	86:61	0:0	8	||
water	87:15	0:0	8	p_format_list
op	87:28	0:0	8	[
water	87:29	0:0	8	j
op	87:30	0:0	8	]
op	87:31	0:0	8	.
water	87:32	0:0	8	mFormat
op	87:39	0:0	8	.
water	87:40	0:0	8	mFormatID
op	87:50	0:0	8	==
water	87:53	0:0	8	'iac3'
op	87:60	0:0	8	||
water	88:15	0:0	8	p_format_list
op	88:28	0:0	8	[
water	88:29	0:0	8	j
op	88:30	0:0	8	]
op	88:31	0:0	8	.
water	88:32	0:0	8	mFormat
op	88:39	0:0	8	.
water	88:40	0:0	8	mFormatID
op	88:50	0:0	8	==
water	88:53	0:0	8	kAudioFormat60958AC3
op	88:74	0:0	8	||
water	89:15	0:0	8	p_format_list
op	89:28	0:0	8	[
water	89:29	0:0	8	j
op	89:30	0:0	8	]
op	89:31	0:0	8	.
water	89:32	0:0	8	mFormat
op	89:39	0:0	8	.
water	89:40	0:0	8	mFormatID
op	89:50	0:0	8	==
water	89:53	0:0	8	kAudioFormatAC3
stmts	89:70	92:12	7	
water	89:70	0:0	8	{
water	90:16	0:0	8	b_digital
op	90:26	0:0	8	=
water	90:28	0:0	8	true
water	90:32	0:0	8	;
break	91:16	91:21	8	
water	92:12	0:0	8	}
water	93:8	0:0	6	}
if	94:8	148:8	4	(b_digital)
cond	94:12	94:12	5	b_digital
water	94:12	0:0	6	b_digital
stmts	94:23	148:8	5	
water	94:23	0:0	6	{
decl	96:12	96:44	6	int	i_requested_rate_format
op	96:40	0:0	6	=
op	96:42	0:0	6	-
water	96:43	0:0	6	1
decl	97:12	97:42	6	int	i_current_rate_format
op	97:38	0:0	6	=
op	97:40	0:0	6	-
water	97:41	0:0	6	1
decl	98:12	98:41	6	int	i_backup_rate_format
op	98:37	0:0	6	=
op	98:39	0:0	6	-
water	98:40	0:0	6	1
if	99:12	123:12	6	(! p_sys -> b_revert)
cond	99:16	99:24	7	! p_sys -> b_revert
op	99:16	0:0	8	!
water	99:17	0:0	8	p_sys
op	99:22	0:0	8	->
water	99:24	0:0	8	b_revert
stmts	99:34	123:12	7	
water	99:34	0:0	8	{
decl	100:16	100:180	8	AudioObjectPropertyAddress	currentPhysicalFormatAddress
op	100:72	0:0	8	=
water	100:74	0:0	8	{
water	100:76	0:0	8	kAudioStreamPropertyPhysicalFormat
water	100:110	0:0	8	,
water	100:112	0:0	8	kAudioObjectPropertyScopeGlobal
water	100:143	0:0	8	,
water	100:145	0:0	8	kAudioObjectPropertyElementMaster
water	100:179	0:0	8	}
decl	102:16	102:64	8	AudioStreamBasicDescription	current_streamformat
water	103:16	0:0	8	i_param_size
op	103:29	0:0	8	=
op	103:31	0:0	8	sizeof
water	103:37	0:0	8	(
water	103:38	0:0	8	current_streamformat
water	103:58	0:0	8	)
water	103:59	0:0	8	;
water	104:16	0:0	8	err
op	104:20	0:0	8	=
call	104:22	104:139	8	AudioObjectGetPropertyData
arg	104:49	104:61	9	p_streams[i]
water	104:49	0:0	10	p_streams
op	104:58	0:0	10	[
water	104:59	0:0	10	i
op	104:60	0:0	10	]
arg	104:63	104:92	9	&currentPhysicalFormatAddress
op	104:63	0:0	10	&
water	104:64	0:0	10	currentPhysicalFormatAddress
arg	104:94	104:95	9	0
water	104:94	0:0	10	0
arg	104:97	104:101	9	NULL
water	104:97	0:0	10	NULL
arg	104:103	104:116	9	&i_param_size
op	104:103	0:0	10	&
water	104:104	0:0	10	i_param_size
arg	104:118	104:139	9	&current_streamformat
op	104:118	0:0	10	&
water	104:119	0:0	10	current_streamformat
water	104:140	0:0	8	;
if	105:16	108:16	8	(err != noErr)
cond	105:20	105:27	9	err != noErr
water	105:20	0:0	10	err
op	105:24	0:0	10	!=
water	105:27	0:0	10	noErr
stmts	105:34	108:16	9	
water	105:34	0:0	10	{
call	106:20	106:104	10	msg_Err
arg	106:28	106:34	11	p_aout
water	106:28	0:0	12	p_aout
arg	106:36	106:90	11	"could not retrieve the original streamformat [%4.4s]"
water	106:36	0:0	12	"could not retrieve the original streamformat [%4.4s]"
arg	106:92	106:104	11	(char*)&err
water	106:92	0:0	12	(
water	106:93	0:0	12	char
op	106:98	0:0	12	*
water	106:99	0:0	12	)
op	106:100	0:0	12	&
water	106:101	0:0	12	err
water	106:105	0:0	10	;
continue	107:20	107:28	10	
water	108:16	0:0	10	}
if	115:16	119:16	8	(p_sys -> sfmt_revert . mFormatID > 0 && p_sys -> sfmt_revert . mFormatID != current_streamformat . mFormatID && p_streams [ i ] == p_sys -> i_stream_id)
cond	115:20	116:47	9	p_sys -> sfmt_revert . mFormatID > 0 && p_sys -> sfmt_revert . mFormatID != current_streamformat . mFormatID && p_streams [ i ] == p_sys -> i_stream_id
water	115:20	0:0	10	p_sys
op	115:25	0:0	10	->
water	115:27	0:0	10	sfmt_revert
op	115:38	0:0	10	.
water	115:39	0:0	10	mFormatID
op	115:49	0:0	10	>
water	115:51	0:0	10	0
op	115:53	0:0	10	&&
water	115:56	0:0	10	p_sys
op	115:61	0:0	10	->
water	115:63	0:0	10	sfmt_revert
op	115:74	0:0	10	.
water	115:75	0:0	10	mFormatID
op	115:85	0:0	10	!=
water	115:88	0:0	10	current_streamformat
op	115:108	0:0	10	.
water	115:109	0:0	10	mFormatID
op	115:119	0:0	10	&&
water	116:24	0:0	10	p_streams
op	116:33	0:0	10	[
water	116:34	0:0	10	i
op	116:35	0:0	10	]
op	116:37	0:0	10	==
water	116:40	0:0	10	p_sys
op	116:45	0:0	10	->
water	116:47	0:0	10	i_stream_id
stmts	116:60	119:16	9	
water	116:60	0:0	10	{
call	117:20	117:112	10	msg_Warn
arg	117:29	117:35	11	p_aout
water	117:29	0:0	12	p_aout
arg	117:37	117:112	11	STREAM_FORMAT_MSG("Detected current stream format: ",current_streamformat)
call	117:37	117:111	12	STREAM_FORMAT_MSG
arg	117:55	117:89	13	"Detected current stream format: "
water	117:55	0:0	14	"Detected current stream format: "
arg	117:91	117:111	13	current_streamformat
water	117:91	0:0	14	current_streamformat
water	117:113	0:0	10	;
call	118:20	118:116	10	msg_Warn
arg	118:29	118:35	11	p_aout
water	118:29	0:0	12	p_aout
arg	118:37	118:116	11	"... there is another stream format already stored, the current one is ignored"
water	118:37	0:0	12	"... there is another stream format already stored, the current one is ignored"
water	118:117	0:0	10	;
water	119:16	0:0	10	}
else	119:18	121:16	8
stmts	119:23	121:16	9	
water	119:23	0:0	10	{
water	120:20	0:0	10	p_sys
op	120:25	0:0	10	->
water	120:27	0:0	10	sfmt_revert
op	120:39	0:0	10	=
water	120:41	0:0	10	current_streamformat
water	120:61	0:0	10	;
water	121:16	0:0	10	}
water	122:16	0:0	8	p_sys
op	122:21	0:0	8	->
water	122:23	0:0	8	b_revert
op	122:32	0:0	8	=
water	122:34	0:0	8	true
water	122:38	0:0	8	;
water	123:12	0:0	8	}
water	124:12	0:0	6	p_sys
op	124:17	0:0	6	->
water	124:19	0:0	6	i_stream_id
op	124:31	0:0	6	=
water	124:33	0:0	6	p_streams
op	124:42	0:0	6	[
water	124:43	0:0	6	i
op	124:44	0:0	6	]
water	124:45	0:0	6	;
water	125:12	0:0	6	p_sys
op	125:17	0:0	6	->
water	125:19	0:0	6	i_stream_index
op	125:34	0:0	6	=
water	125:36	0:0	6	i
water	125:37	0:0	6	;
for	126:12	141:12	6	( int j = 0 ;j < i_formats;j ++)
forinit	0:0	126:26	7	 int j = 0 ;
decl	126:17	126:26	8	int	j
op	126:23	0:0	8	=
water	126:25	0:0	8	0
cond	126:28	126:32	7	j < i_formats
water	126:28	0:0	8	j
op	126:30	0:0	8	<
water	126:32	0:0	8	i_formats
forexpr	126:43	126:44	7	j ++
water	126:43	0:0	8	j
op	126:44	0:0	8	++
stmts	126:48	141:12	7	
water	126:48	0:0	8	{
if	127:16	140:16	8	(p_format_list [ j ] . mFormat . mFormatID == 'IAC3' || p_format_list [ j ] . mFormat . mFormatID == 'iac3' || p_format_list [ j ] . mFormat . mFormatID == kAudioFormat60958AC3 || p_format_list [ j ] . mFormat . mFormatID == kAudioFormatAC3)
cond	127:20	130:57	9	p_format_list [ j ] . mFormat . mFormatID == 'IAC3' || p_format_list [ j ] . mFormat . mFormatID == 'iac3' || p_format_list [ j ] . mFormat . mFormatID == kAudioFormat60958AC3 || p_format_list [ j ] . mFormat . mFormatID == kAudioFormatAC3
water	127:20	0:0	10	p_format_list
op	127:33	0:0	10	[
water	127:34	0:0	10	j
op	127:35	0:0	10	]
op	127:36	0:0	10	.
water	127:37	0:0	10	mFormat
op	127:44	0:0	10	.
water	127:45	0:0	10	mFormatID
op	127:55	0:0	10	==
water	127:58	0:0	10	'IAC3'
op	127:65	0:0	10	||
water	128:19	0:0	10	p_format_list
op	128:32	0:0	10	[
water	128:33	0:0	10	j
op	128:34	0:0	10	]
op	128:35	0:0	10	.
water	128:36	0:0	10	mFormat
op	128:43	0:0	10	.
water	128:44	0:0	10	mFormatID
op	128:54	0:0	10	==
water	128:57	0:0	10	'iac3'
op	128:64	0:0	10	||
water	129:19	0:0	10	p_format_list
op	129:32	0:0	10	[
water	129:33	0:0	10	j
op	129:34	0:0	10	]
op	129:35	0:0	10	.
water	129:36	0:0	10	mFormat
op	129:43	0:0	10	.
water	129:44	0:0	10	mFormatID
op	129:54	0:0	10	==
water	129:57	0:0	10	kAudioFormat60958AC3
op	129:78	0:0	10	||
water	130:19	0:0	10	p_format_list
op	130:32	0:0	10	[
water	130:33	0:0	10	j
op	130:34	0:0	10	]
op	130:35	0:0	10	.
water	130:36	0:0	10	mFormat
op	130:43	0:0	10	.
water	130:44	0:0	10	mFormatID
op	130:54	0:0	10	==
water	130:57	0:0	10	kAudioFormatAC3
stmts	130:74	140:16	9	
water	130:74	0:0	10	{
if	131:20	134:20	10	(p_format_list [ j ] . mFormat . mSampleRate == fmt -> i_rate)
cond	131:24	131:69	11	p_format_list [ j ] . mFormat . mSampleRate == fmt -> i_rate
water	131:24	0:0	12	p_format_list
op	131:37	0:0	12	[
water	131:38	0:0	12	j
op	131:39	0:0	12	]
op	131:40	0:0	12	.
water	131:41	0:0	12	mFormat
op	131:48	0:0	12	.
water	131:49	0:0	12	mSampleRate
op	131:61	0:0	12	==
water	131:64	0:0	12	fmt
op	131:67	0:0	12	->
water	131:69	0:0	12	i_rate
stmts	131:77	134:20	11	
water	131:77	0:0	12	{
water	132:24	0:0	12	i_requested_rate_format
op	132:48	0:0	12	=
water	132:50	0:0	12	j
water	132:51	0:0	12	;
break	133:24	133:29	12	
water	134:20	0:0	12	}
else	134:22	135:49	10
stmts	134:27	135:49	11	
if	134:27	135:49	12	(p_format_list [ j ] . mFormat . mSampleRate == p_sys -> sfmt_revert . mSampleRate)
cond	134:31	134:90	13	p_format_list [ j ] . mFormat . mSampleRate == p_sys -> sfmt_revert . mSampleRate
water	134:31	0:0	14	p_format_list
op	134:44	0:0	14	[
water	134:45	0:0	14	j
op	134:46	0:0	14	]
op	134:47	0:0	14	.
water	134:48	0:0	14	mFormat
op	134:55	0:0	14	.
water	134:56	0:0	14	mSampleRate
op	134:68	0:0	14	==
water	134:71	0:0	14	p_sys
op	134:76	0:0	14	->
water	134:78	0:0	14	sfmt_revert
op	134:89	0:0	14	.
water	134:90	0:0	14	mSampleRate
stmts	135:24	135:49	13	
water	135:24	0:0	14	i_current_rate_format
op	135:46	0:0	14	=
water	135:48	0:0	14	j
water	135:49	0:0	14	;
else	136:20	139:20	10
stmts	136:25	139:20	11	
water	136:25	0:0	12	{
if	137:24	138:52	12	(i_backup_rate_format < 0 || p_format_list [ j ] . mFormat . mSampleRate > p_format_list [ i_backup_rate_format ] . mFormat . mSampleRate)
cond	137:28	137:139	13	i_backup_rate_format < 0 || p_format_list [ j ] . mFormat . mSampleRate > p_format_list [ i_backup_rate_format ] . mFormat . mSampleRate
water	137:28	0:0	14	i_backup_rate_format
op	137:49	0:0	14	<
water	137:51	0:0	14	0
op	137:53	0:0	14	||
water	137:56	0:0	14	p_format_list
op	137:69	0:0	14	[
water	137:70	0:0	14	j
op	137:71	0:0	14	]
op	137:72	0:0	14	.
water	137:73	0:0	14	mFormat
op	137:80	0:0	14	.
water	137:81	0:0	14	mSampleRate
op	137:93	0:0	14	>
water	137:95	0:0	14	p_format_list
op	137:108	0:0	14	[
water	137:109	0:0	14	i_backup_rate_format
op	137:129	0:0	14	]
op	137:130	0:0	14	.
water	137:131	0:0	14	mFormat
op	137:138	0:0	14	.
water	137:139	0:0	14	mSampleRate
stmts	138:28	138:52	13	
water	138:28	0:0	14	i_backup_rate_format
op	138:49	0:0	14	=
water	138:51	0:0	14	j
water	138:52	0:0	14	;
water	139:20	0:0	12	}
water	140:16	0:0	10	}
water	141:12	0:0	8	}
if	142:12	143:86	6	(i_requested_rate_format >= 0)
cond	142:16	142:43	7	i_requested_rate_format >= 0
water	142:16	0:0	8	i_requested_rate_format
op	142:40	0:0	8	>=
water	142:43	0:0	8	0
stmts	143:16	143:86	7	
water	143:16	0:0	8	desired_stream_format
op	143:38	0:0	8	=
water	143:40	0:0	8	p_format_list
op	143:53	0:0	8	[
water	143:54	0:0	8	i_requested_rate_format
op	143:77	0:0	8	]
op	143:78	0:0	8	.
water	143:79	0:0	8	mFormat
water	143:86	0:0	8	;
else	144:12	145:84	6
stmts	144:17	145:84	7	
if	144:17	145:84	8	(i_current_rate_format >= 0)
cond	144:21	144:46	9	i_current_rate_format >= 0
water	144:21	0:0	10	i_current_rate_format
op	144:43	0:0	10	>=
water	144:46	0:0	10	0
stmts	145:16	145:84	9	
water	145:16	0:0	10	desired_stream_format
op	145:38	0:0	10	=
water	145:40	0:0	10	p_format_list
op	145:53	0:0	10	[
water	145:54	0:0	10	i_current_rate_format
op	145:75	0:0	10	]
op	145:76	0:0	10	.
water	145:77	0:0	10	mFormat
water	145:84	0:0	10	;
else	146:12	147:83	6
stmts	147:16	147:83	7	
water	147:16	0:0	8	desired_stream_format
op	147:38	0:0	8	=
water	147:40	0:0	8	p_format_list
op	147:53	0:0	8	[
water	147:54	0:0	8	i_backup_rate_format
op	147:74	0:0	8	]
op	147:75	0:0	8	.
water	147:76	0:0	8	mFormat
water	147:83	0:0	8	;
water	148:8	0:0	6	}
call	149:8	149:26	4	free
arg	149:13	149:26	5	p_format_list
water	149:13	0:0	6	p_format_list
water	149:27	0:0	4	;
water	150:4	0:0	4	}
call	151:4	151:18	2	free
arg	151:9	151:18	3	p_streams
water	151:9	0:0	4	p_streams
water	151:19	0:0	2	;
call	152:4	152:85	2	msg_Dbg
arg	152:12	152:18	3	p_aout
water	152:12	0:0	4	p_aout
arg	152:20	152:85	3	STREAM_FORMAT_MSG("original stream format: ",p_sys->sfmt_revert)
call	152:20	152:84	4	STREAM_FORMAT_MSG
arg	152:38	152:64	5	"original stream format: "
water	152:38	0:0	6	"original stream format: "
arg	152:66	152:84	5	p_sys->sfmt_revert
water	152:66	0:0	6	p_sys
op	152:71	0:0	6	->
water	152:73	0:0	6	sfmt_revert
water	152:86	0:0	2	;
if	153:4	156:4	2	(!AudioStreamChangeFormat (p_aout ,p_sys -> i_stream_id ,desired_stream_format ))
cond	153:8	153:82	3	!AudioStreamChangeFormat (p_aout ,p_sys -> i_stream_id ,desired_stream_format )
op	153:8	0:0	4	!
call	153:9	153:82	4	AudioStreamChangeFormat
arg	153:33	153:39	5	p_aout
water	153:33	0:0	6	p_aout
arg	153:41	153:59	5	p_sys->i_stream_id
water	153:41	0:0	6	p_sys
op	153:46	0:0	6	->
water	153:48	0:0	6	i_stream_id
arg	153:61	153:82	5	desired_stream_format
water	153:61	0:0	6	desired_stream_format
stmts	153:85	156:4	3	
water	153:85	0:0	4	{
call	154:8	154:73	4	msg_Err
arg	154:16	154:22	5	p_aout
water	154:16	0:0	6	p_aout
arg	154:24	154:73	5	"failed to change stream format for SPDIF output"
water	154:24	0:0	6	"failed to change stream format for SPDIF output"
water	154:74	0:0	4	;
return	155:8	155:20	4	false
water	155:15	0:0	5	false
water	156:4	0:0	4	}
if	158:4	159:40	2	(desired_stream_format . mFormatFlags & kAudioFormatFlagIsBigEndian)
cond	158:8	158:45	3	desired_stream_format . mFormatFlags & kAudioFormatFlagIsBigEndian
water	158:8	0:0	4	desired_stream_format
op	158:29	0:0	4	.
water	158:30	0:0	4	mFormatFlags
op	158:43	0:0	4	&
water	158:45	0:0	4	kAudioFormatFlagIsBigEndian
stmts	159:8	159:40	3	
water	159:8	0:0	4	fmt
op	159:11	0:0	4	->
water	159:13	0:0	4	i_format
op	159:22	0:0	4	=
water	159:24	0:0	4	VLC_CODEC_SPDIFB
water	159:40	0:0	4	;
else	160:4	161:40	2
stmts	161:8	161:40	3	
water	161:8	0:0	4	fmt
op	161:11	0:0	4	->
water	161:13	0:0	4	i_format
op	161:22	0:0	4	=
water	161:24	0:0	4	VLC_CODEC_SPDIFL
water	161:40	0:0	4	;
water	162:4	0:0	2	fmt
op	162:7	0:0	2	->
water	162:9	0:0	2	i_bytes_per_frame
op	162:27	0:0	2	=
water	162:29	0:0	2	AOUT_SPDIF_SIZE
water	162:44	0:0	2	;
water	163:4	0:0	2	fmt
op	163:7	0:0	2	->
water	163:9	0:0	2	i_frame_length
op	163:24	0:0	2	=
water	163:26	0:0	2	A52_FRAME_NB
water	163:38	0:0	2	;
water	164:4	0:0	2	fmt
op	164:7	0:0	2	->
water	164:9	0:0	2	i_rate
op	164:16	0:0	2	=
water	164:18	0:0	2	(
water	164:19	0:0	2	unsigned
water	164:28	0:0	2	int
water	164:31	0:0	2	)
water	164:32	0:0	2	desired_stream_format
op	164:53	0:0	2	.
water	164:54	0:0	2	mSampleRate
water	164:65	0:0	2	;
water	165:4	0:0	2	p_sys
op	165:9	0:0	2	->
water	165:11	0:0	2	i_rate
op	165:18	0:0	2	=
water	165:20	0:0	2	fmt
op	165:23	0:0	2	->
water	165:25	0:0	2	i_rate
water	165:31	0:0	2	;
call	166:4	166:26	2	aout_FormatPrepare
arg	166:23	166:26	3	fmt
water	166:23	0:0	4	fmt
water	166:27	0:0	2	;
water	168:4	0:0	2	err
op	168:8	0:0	2	=
call	168:10	171:51	2	AudioDeviceCreateIOProcID
arg	168:36	168:57	3	p_sys->i_selected_dev
water	168:36	0:0	4	p_sys
op	168:41	0:0	4	->
water	168:43	0:0	4	i_selected_dev
arg	169:35	169:73	3	(AudioDeviceIOProc)RenderCallbackSPDIF
water	169:35	0:0	4	(
water	169:36	0:0	4	AudioDeviceIOProc
water	169:53	0:0	4	)
water	169:54	0:0	4	RenderCallbackSPDIF
arg	170:35	170:49	3	(void*)p_aout
water	170:35	0:0	4	(
water	170:36	0:0	4	void
op	170:41	0:0	4	*
water	170:42	0:0	4	)
water	170:43	0:0	4	p_aout
arg	171:35	171:51	3	&p_sys->i_procID
op	171:35	0:0	4	&
water	171:36	0:0	4	p_sys
op	171:41	0:0	4	->
water	171:43	0:0	4	i_procID
water	171:52	0:0	2	;
if	172:4	175:4	2	(err != noErr)
cond	172:8	172:15	3	err != noErr
water	172:8	0:0	4	err
op	172:12	0:0	4	!=
water	172:15	0:0	4	noErr
stmts	172:22	175:4	3	
water	172:22	0:0	4	{
call	173:8	173:75	4	msg_Err
arg	173:16	173:22	5	p_aout
water	173:16	0:0	6	p_aout
arg	173:24	173:61	5	"Failed to create Process ID [%4.4s]"
water	173:24	0:0	6	"Failed to create Process ID [%4.4s]"
arg	173:63	173:75	5	(char*)&err
water	173:63	0:0	6	(
water	173:64	0:0	6	char
op	173:69	0:0	6	*
water	173:70	0:0	6	)
op	173:71	0:0	6	&
water	173:72	0:0	6	err
water	173:76	0:0	4	;
return	174:8	174:20	4	false
water	174:15	0:0	5	false
water	175:4	0:0	4	}
water	177:4	0:0	2	err
op	177:8	0:0	2	=
call	177:10	177:65	2	AudioDeviceStart
arg	177:27	177:48	3	p_sys->i_selected_dev
water	177:27	0:0	4	p_sys
op	177:32	0:0	4	->
water	177:34	0:0	4	i_selected_dev
arg	177:50	177:65	3	p_sys->i_procID
water	177:50	0:0	4	p_sys
op	177:55	0:0	4	->
water	177:57	0:0	4	i_procID
water	177:66	0:0	2	;
if	178:4	184:4	2	(err != noErr)
cond	178:8	178:15	3	err != noErr
water	178:8	0:0	4	err
op	178:12	0:0	4	!=
water	178:15	0:0	4	noErr
stmts	178:22	184:4	3	
water	178:22	0:0	4	{
call	179:8	179:76	4	msg_Err
arg	179:16	179:22	5	p_aout
water	179:16	0:0	6	p_aout
arg	179:24	179:62	5	"Failed to start audio device [%4.4s]"
water	179:24	0:0	6	"Failed to start audio device [%4.4s]"
arg	179:64	179:76	5	(char*)&err
water	179:64	0:0	6	(
water	179:65	0:0	6	char
op	179:70	0:0	6	*
water	179:71	0:0	6	)
op	179:72	0:0	6	&
water	179:73	0:0	6	err
water	179:77	0:0	4	;
water	180:8	0:0	4	err
op	180:12	0:0	4	=
call	180:14	180:79	4	AudioDeviceDestroyIOProcID
arg	180:41	180:62	5	p_sys->i_selected_dev
water	180:41	0:0	6	p_sys
op	180:46	0:0	6	->
water	180:48	0:0	6	i_selected_dev
arg	180:64	180:79	5	p_sys->i_procID
water	180:64	0:0	6	p_sys
op	180:69	0:0	6	->
water	180:71	0:0	6	i_procID
water	180:80	0:0	4	;
if	181:8	182:81	4	(err != noErr)
cond	181:12	181:19	5	err != noErr
water	181:12	0:0	6	err
op	181:16	0:0	6	!=
water	181:19	0:0	6	noErr
stmts	182:12	182:81	5	
call	182:12	182:80	6	msg_Err
arg	182:20	182:26	7	p_aout
water	182:20	0:0	8	p_aout
arg	182:28	182:66	7	"Failed to destroy process ID [%4.4s]"
water	182:28	0:0	8	"Failed to destroy process ID [%4.4s]"
arg	182:68	182:80	7	(char*)&err
water	182:68	0:0	8	(
water	182:69	0:0	8	char
op	182:74	0:0	8	*
water	182:75	0:0	8	)
op	182:76	0:0	8	&
water	182:77	0:0	8	err
water	182:81	0:0	6	;
return	183:8	183:20	4	false
water	183:15	0:0	5	false
water	184:4	0:0	4	}
call	186:4	186:71	2	TPCircularBufferInit
arg	186:25	186:48	3	&p_sys->circular_buffer
op	186:25	0:0	4	&
water	186:26	0:0	4	p_sys
op	186:31	0:0	4	->
water	186:33	0:0	4	circular_buffer
arg	186:50	186:71	3	200*AOUT_SPDIF_SIZE
water	186:50	0:0	4	200
op	186:54	0:0	4	*
water	186:56	0:0	4	AOUT_SPDIF_SIZE
water	186:72	0:0	2	;
return	187:4	187:15	2	true
water	187:11	0:0	3	true
