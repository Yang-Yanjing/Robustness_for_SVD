func	2:0	89:0	0	int	ExecuteCommand
params	2:18	0:0	1	
param	2:20	2:32	2	vlm_t *	p_vlm
param	2:34	2:57	2	const char *	psz_command
param	3:27	3:54	2	vlm_message_t * *	pp_message
stmnts	0:0	88:23	1	
decl	5:4	5:24	2	size_t	i_command
op	5:21	0:0	2	=
water	5:23	0:0	2	0
decl	6:4	6:48	2	size_t	i_command_len
op	6:25	0:0	2	=
call	6:27	6:47	3	strlen
arg	6:35	6:47	4	psz_command
water	6:35	0:0	5	psz_command
decl	7:4	7:59	2	char	*buf
op	7:14	0:0	2	=
call	7:16	7:42	3	malloc
arg	7:24	7:42	4	i_command_len+1
water	7:24	0:0	5	i_command_len
op	7:38	0:0	5	+
water	7:40	0:0	5	1
water	7:43	0:0	2	,
decl	7:4	7:59	2	char	*psz_buf
op	7:54	0:0	2	=
water	7:56	0:0	2	buf
decl	8:4	8:61	2	size_t	i_ppsz_command_len
op	8:30	0:0	2	=
water	8:32	0:0	2	(
water	8:33	0:0	2	3
op	8:35	0:0	2	+
water	8:37	0:0	2	(
water	8:38	0:0	2	i_command_len
op	8:52	0:0	2	+
water	8:54	0:0	2	1
water	8:55	0:0	2	)
op	8:57	0:0	2	/
water	8:59	0:0	2	2
water	8:60	0:0	2	)
decl	9:4	9:71	2	char	**ppsz_command
op	9:24	0:0	2	=
call	9:26	9:70	3	malloc
arg	9:34	9:70	4	i_ppsz_command_len*sizeof(char*)
water	9:34	0:0	5	i_ppsz_command_len
op	9:53	0:0	5	*
op	9:55	0:0	5	sizeof
water	9:61	0:0	5	(
water	9:62	0:0	5	char
op	9:67	0:0	5	*
water	9:68	0:0	5	)
decl	10:4	10:35	2	vlm_message_t	*p_message
op	10:29	0:0	2	=
water	10:31	0:0	2	NULL
decl	11:4	11:17	2	int	i_ret
op	11:14	0:0	2	=
water	11:16	0:0	2	0
if	12:4	18:4	2	(! psz_buf || ! ppsz_command)
cond	12:8	12:21	3	! psz_buf || ! ppsz_command
op	12:8	0:0	4	!
water	12:9	0:0	4	psz_buf
op	12:17	0:0	4	||
op	12:20	0:0	4	!
water	12:21	0:0	4	ppsz_command
stmts	13:4	18:4	3	
water	13:4	0:0	4	{
water	14:8	0:0	4	p_message
op	14:18	0:0	4	=
call	14:20	16:38	4	vlm_MessageNew
arg	14:36	14:50	5	"Memory error"
water	14:36	0:0	6	"Memory error"
arg	15:24	15:69	5	"allocation failed for command of length %zu"
water	15:24	0:0	6	"allocation failed for command of length %zu"
arg	16:24	16:38	5	i_command_len
water	16:24	0:0	6	i_command_len
water	16:39	0:0	4	;
goto	17:8	17:18	4	error
water	17:13	0:0	5	error
water	18:4	0:0	4	}
while	20:4	49:4	2	(* psz_command != '\0')
cond	20:11	20:27	3	* psz_command != '\0'
op	20:11	0:0	4	*
water	20:12	0:0	4	psz_command
op	20:24	0:0	4	!=
water	20:27	0:0	4	'\0'
stmts	21:4	49:4	3	
water	21:4	0:0	4	{
decl	22:8	22:28	4	const char	*psz_temp
if	23:8	27:8	4	(isspace (( unsigned char ) * psz_command ))
cond	23:11	23:47	5	isspace (( unsigned char ) * psz_command )
call	23:11	23:47	6	isspace
arg	23:20	23:47	7	(unsignedchar)*psz_command
water	23:20	0:0	8	(
water	23:21	0:0	8	unsigned
water	23:30	0:0	8	char
water	23:34	0:0	8	)
op	23:35	0:0	8	*
water	23:36	0:0	8	psz_command
stmts	24:8	27:8	5	
water	24:8	0:0	6	{
water	25:12	0:0	6	psz_command
op	25:23	0:0	6	++
water	25:25	0:0	6	;
continue	26:12	26:20	6	
water	27:8	0:0	6	}
if	29:8	33:8	4	(i_command == 0 && * psz_command == '#')
cond	29:12	29:46	5	i_command == 0 && * psz_command == '#'
water	29:12	0:0	6	i_command
op	29:22	0:0	6	==
water	29:25	0:0	6	0
op	29:27	0:0	6	&&
op	29:30	0:0	6	*
water	29:31	0:0	6	psz_command
op	29:43	0:0	6	==
water	29:46	0:0	6	'#'
stmts	30:8	33:8	5	
water	30:8	0:0	6	{
water	31:12	0:0	6	p_message
op	31:22	0:0	6	=
call	31:24	31:49	6	vlm_MessageSimpleNew
arg	31:46	31:49	7	""
water	31:46	0:0	8	""
water	31:50	0:0	6	;
goto	32:12	32:24	6	success
water	32:17	0:0	7	success
water	33:8	0:0	6	}
water	34:8	0:0	4	psz_temp
op	34:17	0:0	4	=
call	34:19	34:47	4	FindCommandEnd
arg	34:35	34:47	5	psz_command
water	34:35	0:0	6	psz_command
water	34:48	0:0	4	;
if	35:8	39:8	4	(psz_temp == NULL)
cond	35:12	35:24	5	psz_temp == NULL
water	35:12	0:0	6	psz_temp
op	35:21	0:0	6	==
water	35:24	0:0	6	NULL
stmts	36:8	39:8	5	
water	36:8	0:0	6	{
water	37:12	0:0	6	p_message
op	37:22	0:0	6	=
call	37:24	37:80	6	vlm_MessageNew
arg	37:40	37:60	7	"Incomplete command"
water	37:40	0:0	8	"Incomplete command"
arg	37:62	37:66	7	"%s"
water	37:62	0:0	8	"%s"
arg	37:68	37:80	7	psz_command
water	37:68	0:0	8	psz_command
water	37:81	0:0	6	;
goto	38:12	38:22	6	error
water	38:17	0:0	7	error
water	39:8	0:0	6	}
call	40:8	40:46	4	assert
arg	40:16	40:46	5	i_command<i_ppsz_command_len
water	40:16	0:0	6	i_command
op	40:26	0:0	6	<
water	40:28	0:0	6	i_ppsz_command_len
water	40:47	0:0	4	;
water	41:8	0:0	4	ppsz_command
op	41:20	0:0	4	[
water	41:21	0:0	4	i_command
op	41:30	0:0	4	]
op	41:32	0:0	4	=
water	41:34	0:0	4	psz_buf
water	41:41	0:0	4	;
call	42:8	42:60	4	memcpy
arg	42:16	42:23	5	psz_buf
water	42:16	0:0	6	psz_buf
arg	42:25	42:36	5	psz_command
water	42:25	0:0	6	psz_command
arg	42:38	42:60	5	psz_temp-psz_command
water	42:38	0:0	6	psz_temp
op	42:47	0:0	6	-
water	42:49	0:0	6	psz_command
water	42:61	0:0	4	;
water	43:8	0:0	4	psz_buf
op	43:15	0:0	4	[
water	43:16	0:0	4	psz_temp
op	43:25	0:0	4	-
water	43:27	0:0	4	psz_command
op	43:38	0:0	4	]
op	43:40	0:0	4	=
water	43:42	0:0	4	'\0'
water	43:46	0:0	4	;
call	44:8	44:34	4	Unescape
arg	44:18	44:25	5	psz_buf
water	44:18	0:0	6	psz_buf
arg	44:27	44:34	5	psz_buf
water	44:27	0:0	6	psz_buf
water	44:35	0:0	4	;
water	45:8	0:0	4	i_command
op	45:17	0:0	4	++
water	45:19	0:0	4	;
water	46:8	0:0	4	psz_buf
op	46:16	0:0	4	+=
water	46:19	0:0	4	psz_temp
op	46:28	0:0	4	-
water	46:30	0:0	4	psz_command
op	46:42	0:0	4	+
water	46:44	0:0	4	1
water	46:45	0:0	4	;
water	47:8	0:0	4	psz_command
op	47:20	0:0	4	=
water	47:22	0:0	4	psz_temp
water	47:30	0:0	4	;
call	48:8	48:50	4	assert
arg	48:16	48:50	5	buf+i_command_len+1>=psz_buf
water	48:16	0:0	6	buf
op	48:20	0:0	6	+
water	48:22	0:0	6	i_command_len
op	48:36	0:0	6	+
water	48:38	0:0	6	1
op	48:40	0:0	6	>=
water	48:43	0:0	6	psz_buf
water	48:51	0:0	4	;
water	49:4	0:0	4	}
if	54:4	58:4	2	(i_command == 0)
cond	54:8	54:21	3	i_command == 0
water	54:8	0:0	4	i_command
op	54:18	0:0	4	==
water	54:21	0:0	4	0
stmts	55:4	58:4	3	
water	55:4	0:0	4	{
water	56:8	0:0	4	p_message
op	56:18	0:0	4	=
call	56:20	56:45	4	vlm_MessageSimpleNew
arg	56:42	56:45	5	""
water	56:42	0:0	6	""
water	56:46	0:0	4	;
goto	57:8	57:20	4	success
water	57:13	0:0	5	success
water	58:4	0:0	4	}
else	59:4	75:27	2
stmts	59:9	75:27	3	
call	59:9	59:99	4	IF_EXECUTE
arg	59:21	59:26	5	"del"
water	59:21	0:0	6	"del"
arg	59:32	59:48	5	(i_command!=2)
water	59:32	0:0	6	(
water	59:33	0:0	6	i_command
op	59:43	0:0	6	!=
water	59:46	0:0	6	2
water	59:47	0:0	6	)
arg	59:52	59:99	5	ExecuteDel(p_vlm,ppsz_command[1],&p_message)
call	59:52	59:97	6	ExecuteDel
arg	59:63	59:68	7	p_vlm
water	59:63	0:0	8	p_vlm
arg	59:70	59:85	7	ppsz_command[1]
water	59:70	0:0	8	ppsz_command
op	59:82	0:0	8	[
water	59:83	0:0	8	1
op	59:84	0:0	8	]
arg	59:87	59:97	7	&p_message
op	59:87	0:0	8	&
water	59:88	0:0	8	p_message
water	60:4	0:0	4	else
call	60:9	60:123	4	IF_EXECUTE
arg	60:21	60:27	5	"show"
water	60:21	0:0	6	"show"
arg	60:32	60:47	5	(i_command>2)
water	60:32	0:0	6	(
water	60:33	0:0	6	i_command
op	60:43	0:0	6	>
water	60:45	0:0	6	2
water	60:46	0:0	6	)
arg	60:52	60:123	5	ExecuteShow(p_vlm,i_command>1?ppsz_command[1]:NULL,&p_message)
call	60:52	60:121	6	ExecuteShow
arg	60:64	60:69	7	p_vlm
water	60:64	0:0	8	p_vlm
arg	60:71	60:109	7	i_command>1?ppsz_command[1]:NULL
water	60:71	0:0	8	i_command
op	60:81	0:0	8	>
water	60:83	0:0	8	1
water	60:85	0:0	8	?
water	60:87	0:0	8	ppsz_command
op	60:99	0:0	8	[
water	60:100	0:0	8	1
op	60:101	0:0	8	]
water	60:103	0:0	8	:
water	60:105	0:0	8	NULL
arg	60:111	60:121	7	&p_message
op	60:111	0:0	8	&
water	60:112	0:0	8	p_message
water	61:4	0:0	4	else
call	61:9	61:78	4	IF_EXECUTE
arg	61:21	61:27	5	"help"
water	61:21	0:0	6	"help"
arg	61:32	61:48	5	(i_command!=1)
water	61:32	0:0	6	(
water	61:33	0:0	6	i_command
op	61:43	0:0	6	!=
water	61:46	0:0	6	1
water	61:47	0:0	6	)
arg	61:52	61:78	5	ExecuteHelp(&p_message)
call	61:52	61:76	6	ExecuteHelp
arg	61:65	61:76	7	&p_message
op	61:65	0:0	8	&
water	61:66	0:0	8	p_message
water	62:4	0:0	4	else
call	62:9	62:136	4	IF_EXECUTE
arg	62:21	62:30	5	"control"
water	62:21	0:0	6	"control"
arg	62:32	62:47	5	(i_command<3)
water	62:32	0:0	6	(
water	62:33	0:0	6	i_command
op	62:43	0:0	6	<
water	62:45	0:0	6	3
water	62:46	0:0	6	)
arg	62:52	62:136	5	ExecuteControl(p_vlm,ppsz_command[1],i_command-2,&ppsz_command[2],&p_message)
call	62:52	62:134	6	ExecuteControl
arg	62:67	62:72	7	p_vlm
water	62:67	0:0	8	p_vlm
arg	62:74	62:89	7	ppsz_command[1]
water	62:74	0:0	8	ppsz_command
op	62:86	0:0	8	[
water	62:87	0:0	8	1
op	62:88	0:0	8	]
arg	62:91	62:104	7	i_command-2
water	62:91	0:0	8	i_command
op	62:101	0:0	8	-
water	62:103	0:0	8	2
arg	62:106	62:122	7	&ppsz_command[2]
op	62:106	0:0	8	&
water	62:107	0:0	8	ppsz_command
op	62:119	0:0	8	[
water	62:120	0:0	8	2
op	62:121	0:0	8	]
arg	62:124	62:134	7	&p_message
op	62:124	0:0	8	&
water	62:125	0:0	8	p_message
water	63:4	0:0	4	else
call	63:9	63:100	4	IF_EXECUTE
arg	63:21	63:27	5	"save"
water	63:21	0:0	6	"save"
arg	63:32	63:48	5	(i_command!=2)
water	63:32	0:0	6	(
water	63:33	0:0	6	i_command
op	63:43	0:0	6	!=
water	63:46	0:0	6	2
water	63:47	0:0	6	)
arg	63:52	63:100	5	ExecuteSave(p_vlm,ppsz_command[1],&p_message)
call	63:52	63:98	6	ExecuteSave
arg	63:64	63:69	7	p_vlm
water	63:64	0:0	8	p_vlm
arg	63:71	63:86	7	ppsz_command[1]
water	63:71	0:0	8	ppsz_command
op	63:83	0:0	8	[
water	63:84	0:0	8	1
op	63:85	0:0	8	]
arg	63:88	63:98	7	&p_message
op	63:88	0:0	8	&
water	63:89	0:0	8	p_message
water	64:4	0:0	4	else
call	64:9	64:85	4	IF_EXECUTE
arg	64:21	64:29	5	"export"
water	64:21	0:0	6	"export"
arg	64:32	64:48	5	(i_command!=1)
water	64:32	0:0	6	(
water	64:33	0:0	6	i_command
op	64:43	0:0	6	!=
water	64:46	0:0	6	1
water	64:47	0:0	6	)
arg	64:52	64:85	5	ExecuteExport(p_vlm,&p_message)
call	64:52	64:83	6	ExecuteExport
arg	64:66	64:71	7	p_vlm
water	64:66	0:0	8	p_vlm
arg	64:73	64:83	7	&p_message
op	64:73	0:0	8	&
water	64:74	0:0	8	p_message
water	65:4	0:0	4	else
call	65:9	65:100	4	IF_EXECUTE
arg	65:21	65:27	5	"load"
water	65:21	0:0	6	"load"
arg	65:32	65:48	5	(i_command!=2)
water	65:32	0:0	6	(
water	65:33	0:0	6	i_command
op	65:43	0:0	6	!=
water	65:46	0:0	6	2
water	65:47	0:0	6	)
arg	65:52	65:100	5	ExecuteLoad(p_vlm,ppsz_command[1],&p_message)
call	65:52	65:98	6	ExecuteLoad
arg	65:64	65:69	7	p_vlm
water	65:64	0:0	8	p_vlm
arg	65:71	65:86	7	ppsz_command[1]
water	65:71	0:0	8	ppsz_command
op	65:83	0:0	8	[
water	65:84	0:0	8	1
op	65:85	0:0	8	]
arg	65:88	65:98	7	&p_message
op	65:88	0:0	8	&
water	65:89	0:0	8	p_message
water	66:4	0:0	4	else
call	66:9	66:147	4	IF_EXECUTE
arg	66:21	66:26	5	"new"
water	66:21	0:0	6	"new"
arg	66:32	66:47	5	(i_command<3)
water	66:32	0:0	6	(
water	66:33	0:0	6	i_command
op	66:43	0:0	6	<
water	66:45	0:0	6	3
water	66:46	0:0	6	)
arg	66:52	66:147	5	ExecuteNew(p_vlm,ppsz_command[1],ppsz_command[2],i_command-3,&ppsz_command[3],&p_message)
call	66:52	66:145	6	ExecuteNew
arg	66:63	66:68	7	p_vlm
water	66:63	0:0	8	p_vlm
arg	66:70	66:85	7	ppsz_command[1]
water	66:70	0:0	8	ppsz_command
op	66:82	0:0	8	[
water	66:83	0:0	8	1
op	66:84	0:0	8	]
arg	66:87	66:102	7	ppsz_command[2]
water	66:87	0:0	8	ppsz_command
op	66:99	0:0	8	[
water	66:100	0:0	8	2
op	66:101	0:0	8	]
arg	66:104	66:115	7	i_command-3
water	66:104	0:0	8	i_command
op	66:113	0:0	8	-
water	66:114	0:0	8	3
arg	66:117	66:133	7	&ppsz_command[3]
op	66:117	0:0	8	&
water	66:118	0:0	8	ppsz_command
op	66:130	0:0	8	[
water	66:131	0:0	8	3
op	66:132	0:0	8	]
arg	66:135	66:145	7	&p_message
op	66:135	0:0	8	&
water	66:136	0:0	8	p_message
water	67:4	0:0	4	else
call	67:9	67:132	4	IF_EXECUTE
arg	67:21	67:28	5	"setup"
water	67:21	0:0	6	"setup"
arg	67:32	67:47	5	(i_command<2)
water	67:32	0:0	6	(
water	67:33	0:0	6	i_command
op	67:43	0:0	6	<
water	67:45	0:0	6	2
water	67:46	0:0	6	)
arg	67:52	67:132	5	ExecuteSetup(p_vlm,ppsz_command[1],i_command-2,&ppsz_command[2],&p_message)
call	67:52	67:130	6	ExecuteSetup
arg	67:65	67:70	7	p_vlm
water	67:65	0:0	8	p_vlm
arg	67:72	67:87	7	ppsz_command[1]
water	67:72	0:0	8	ppsz_command
op	67:84	0:0	8	[
water	67:85	0:0	8	1
op	67:86	0:0	8	]
arg	67:89	67:100	7	i_command-2
water	67:89	0:0	8	i_command
op	67:98	0:0	8	-
water	67:99	0:0	8	2
arg	67:102	67:118	7	&ppsz_command[2]
op	67:102	0:0	8	&
water	67:103	0:0	8	ppsz_command
op	67:115	0:0	8	[
water	67:116	0:0	8	2
op	67:117	0:0	8	]
arg	67:120	67:130	7	&p_message
op	67:120	0:0	8	&
water	67:121	0:0	8	p_message
water	68:4	0:0	4	else
water	69:4	0:0	4	{
water	70:8	0:0	4	p_message
op	70:18	0:0	4	=
call	70:20	70:75	4	vlm_MessageNew
arg	70:36	70:51	5	ppsz_command[0]
water	70:36	0:0	6	ppsz_command
op	70:48	0:0	6	[
water	70:49	0:0	6	0
op	70:50	0:0	6	]
arg	70:53	70:75	5	"Unknown VLM command"
water	70:53	0:0	6	"Unknown VLM command"
water	70:76	0:0	4	;
water	71:8	0:0	4	goto
water	71:13	0:0	4	error
water	71:18	0:0	4	;
water	72:4	0:0	4	}
water	74:0	0:0	4	success
water	74:7	0:0	4	:
op	75:4	0:0	4	*
water	75:5	0:0	4	pp_message
op	75:16	0:0	4	=
water	75:18	0:0	4	p_message
water	75:27	0:0	4	;
call	76:4	76:14	2	free
arg	76:10	76:14	3	buf
water	76:10	0:0	4	buf
water	76:15	0:0	2	;
call	77:4	77:23	2	free
arg	77:10	77:23	3	ppsz_command
water	77:10	0:0	4	ppsz_command
water	77:24	0:0	2	;
return	78:4	78:22	2	VLC_SUCCESS
water	78:11	0:0	3	VLC_SUCCESS
label	79:0	79:12	2	syntax_error :
water	80:4	0:0	2	i_ret
op	80:10	0:0	2	=
call	80:12	80:60	2	ExecuteSyntaxError
arg	80:32	80:47	3	ppsz_command[0]
water	80:32	0:0	4	ppsz_command
op	80:44	0:0	4	[
water	80:45	0:0	4	0
op	80:46	0:0	4	]
arg	80:49	80:60	3	pp_message
water	80:49	0:0	4	pp_message
water	80:61	0:0	2	;
call	81:4	81:14	2	free
arg	81:10	81:14	3	buf
water	81:10	0:0	4	buf
water	81:15	0:0	2	;
call	82:4	82:23	2	free
arg	82:10	82:23	3	ppsz_command
water	82:10	0:0	4	ppsz_command
water	82:24	0:0	2	;
return	83:4	83:16	2	i_ret
water	83:11	0:0	3	i_ret
label	84:0	84:5	2	error :
op	85:4	0:0	2	*
water	85:5	0:0	2	pp_message
op	85:16	0:0	2	=
water	85:18	0:0	2	p_message
water	85:27	0:0	2	;
call	86:4	86:14	2	free
arg	86:10	86:14	3	buf
water	86:10	0:0	4	buf
water	86:15	0:0	2	;
call	87:4	87:23	2	free
arg	87:10	87:23	3	ppsz_command
water	87:10	0:0	4	ppsz_command
water	87:24	0:0	2	;
return	88:4	88:23	2	VLC_EGENERIC
water	88:11	0:0	3	VLC_EGENERIC
