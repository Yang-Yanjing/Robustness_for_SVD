func	2:0	54:0	0	static int	Send
params	2:15	0:0	1	
param	2:17	2:40	2	sout_stream_t *	p_stream
param	2:42	2:66	2	sout_stream_id_sys_t *	id
param	3:17	3:35	2	block_t *	p_buffer
stmnts	0:0	53:22	1	
decl	5:4	5:46	2	sout_stream_sys_t	*p_sys
op	5:29	0:0	2	=
water	5:31	0:0	2	p_stream
op	5:39	0:0	2	->
water	5:41	0:0	2	p_sys
decl	6:4	6:25	2	block_t	*p_out
op	6:19	0:0	2	=
water	6:21	0:0	2	NULL
if	7:4	13:4	2	(! id -> b_transcode)
cond	7:8	7:13	3	! id -> b_transcode
op	7:8	0:0	4	!
water	7:9	0:0	4	id
op	7:11	0:0	4	->
water	7:13	0:0	4	b_transcode
stmts	8:4	13:4	3	
water	8:4	0:0	4	{
if	9:8	10:74	4	(id -> id)
cond	9:12	9:16	5	id -> id
water	9:12	0:0	6	id
op	9:14	0:0	6	->
water	9:16	0:0	6	id
stmts	10:12	10:74	5	
return	10:12	10:74	6	sout_StreamIdSend(p_stream->p_next,id->id,p_buffer)
call	10:19	10:73	7	sout_StreamIdSend
arg	10:38	10:54	8	p_stream->p_next
water	10:38	0:0	9	p_stream
op	10:46	0:0	9	->
water	10:48	0:0	9	p_next
arg	10:56	10:62	8	id->id
water	10:56	0:0	9	id
op	10:58	0:0	9	->
water	10:60	0:0	9	id
arg	10:64	10:73	8	p_buffer
water	10:64	0:0	9	p_buffer
call	11:8	11:32	4	block_Release
arg	11:23	11:32	5	p_buffer
water	11:23	0:0	6	p_buffer
water	11:33	0:0	4	;
return	12:8	12:27	4	VLC_EGENERIC
water	12:15	0:0	5	VLC_EGENERIC
water	13:4	0:0	4	}
switch	14:4	50:4	2	(id -> p_decoder -> fmt_in . i_cat)
cond	14:12	14:34	3	id -> p_decoder -> fmt_in . i_cat
water	14:12	0:0	4	id
op	14:14	0:0	4	->
water	14:16	0:0	4	p_decoder
op	14:25	0:0	4	->
water	14:27	0:0	4	fmt_in
op	14:33	0:0	4	.
water	14:34	0:0	4	i_cat
stmts	15:4	50:4	3	
water	15:4	0:0	4	{
label	16:4	16:17	4	case AUDIO_ES :
if	17:8	21:8	4	(transcode_audio_process (p_stream ,id ,p_buffer ,& p_out ) != VLC_SUCCESS)
cond	17:12	18:15	5	transcode_audio_process (p_stream ,id ,p_buffer ,& p_out ) != VLC_SUCCESS
call	17:12	17:68	6	transcode_audio_process
arg	17:37	17:45	7	p_stream
water	17:37	0:0	8	p_stream
arg	17:47	17:49	7	id
water	17:47	0:0	8	id
arg	17:51	17:59	7	p_buffer
water	17:51	0:0	8	p_buffer
arg	17:61	17:68	7	&p_out
op	17:61	0:0	8	&
water	17:62	0:0	8	p_out
op	18:12	0:0	6	!=
water	18:15	0:0	6	VLC_SUCCESS
stmts	19:8	21:8	5	
water	19:8	0:0	6	{
return	20:12	20:31	6	VLC_EGENERIC
water	20:19	0:0	7	VLC_EGENERIC
water	21:8	0:0	6	}
break	22:8	22:13	4	
label	23:4	23:17	4	case VIDEO_ES :
if	24:8	28:8	4	(transcode_video_process (p_stream ,id ,p_buffer ,& p_out ) != VLC_SUCCESS)
cond	24:12	25:15	5	transcode_video_process (p_stream ,id ,p_buffer ,& p_out ) != VLC_SUCCESS
call	24:12	24:68	6	transcode_video_process
arg	24:37	24:45	7	p_stream
water	24:37	0:0	8	p_stream
arg	24:47	24:49	7	id
water	24:47	0:0	8	id
arg	24:51	24:59	7	p_buffer
water	24:51	0:0	8	p_buffer
arg	24:61	24:68	7	&p_out
op	24:61	0:0	8	&
water	24:62	0:0	8	p_out
op	25:12	0:0	6	!=
water	25:15	0:0	6	VLC_SUCCESS
stmts	26:8	28:8	5	
water	26:8	0:0	6	{
return	27:12	27:31	6	VLC_EGENERIC
water	27:19	0:0	7	VLC_EGENERIC
water	28:8	0:0	6	}
break	29:8	29:13	4	
label	30:4	30:15	4	case SPU_ES :
if	32:8	39:8	4	(p_sys -> b_osd)
cond	32:12	32:19	5	p_sys -> b_osd
water	32:12	0:0	6	p_sys
op	32:17	0:0	6	->
water	32:19	0:0	6	b_osd
stmts	33:8	39:8	5	
water	33:8	0:0	6	{
if	34:12	38:12	6	(transcode_osd_process (p_stream ,id ,p_buffer ,& p_out ) != VLC_SUCCESS)
cond	34:16	35:16	7	transcode_osd_process (p_stream ,id ,p_buffer ,& p_out ) != VLC_SUCCESS
call	34:16	34:70	8	transcode_osd_process
arg	34:39	34:47	9	p_stream
water	34:39	0:0	10	p_stream
arg	34:49	34:51	9	id
water	34:49	0:0	10	id
arg	34:53	34:61	9	p_buffer
water	34:53	0:0	10	p_buffer
arg	34:63	34:70	9	&p_out
op	34:63	0:0	10	&
water	34:64	0:0	10	p_out
op	34:72	0:0	8	!=
water	35:16	0:0	8	VLC_SUCCESS
stmts	36:12	38:12	7	
water	36:12	0:0	8	{
return	37:16	37:35	8	VLC_EGENERIC
water	37:23	0:0	9	VLC_EGENERIC
water	38:12	0:0	8	}
water	39:8	0:0	6	}
else	40:8	44:8	4
stmts	40:13	44:8	5	
if	40:13	44:8	6	(transcode_spu_process (p_stream ,id ,p_buffer ,& p_out ) != VLC_SUCCESS)
cond	40:18	41:12	7	transcode_spu_process (p_stream ,id ,p_buffer ,& p_out ) != VLC_SUCCESS
call	40:18	40:72	8	transcode_spu_process
arg	40:41	40:49	9	p_stream
water	40:41	0:0	10	p_stream
arg	40:51	40:53	9	id
water	40:51	0:0	10	id
arg	40:55	40:63	9	p_buffer
water	40:55	0:0	10	p_buffer
arg	40:65	40:72	9	&p_out
op	40:65	0:0	10	&
water	40:66	0:0	10	p_out
op	40:74	0:0	8	!=
water	41:12	0:0	8	VLC_SUCCESS
stmts	42:8	44:8	7	
water	42:8	0:0	8	{
return	43:12	43:31	8	VLC_EGENERIC
water	43:19	0:0	9	VLC_EGENERIC
water	44:8	0:0	8	}
break	45:8	45:13	4	
label	46:4	46:11	4	default :
water	47:8	0:0	4	p_out
op	47:14	0:0	4	=
water	47:16	0:0	4	NULL
water	47:20	0:0	4	;
call	48:8	48:32	4	block_Release
arg	48:23	48:32	5	p_buffer
water	48:23	0:0	6	p_buffer
water	48:33	0:0	4	;
break	49:8	49:13	4	
water	50:4	0:0	4	}
if	51:4	52:67	2	(p_out)
cond	51:8	51:8	3	p_out
water	51:8	0:0	4	p_out
stmts	52:8	52:67	3	
return	52:8	52:67	4	sout_StreamIdSend(p_stream->p_next,id->id,p_out)
call	52:15	52:66	5	sout_StreamIdSend
arg	52:34	52:50	6	p_stream->p_next
water	52:34	0:0	7	p_stream
op	52:42	0:0	7	->
water	52:44	0:0	7	p_next
arg	52:52	52:58	6	id->id
water	52:52	0:0	7	id
op	52:54	0:0	7	->
water	52:56	0:0	7	id
arg	52:60	52:66	6	p_out
water	52:60	0:0	7	p_out
return	53:4	53:22	2	VLC_SUCCESS
water	53:11	0:0	3	VLC_SUCCESS
