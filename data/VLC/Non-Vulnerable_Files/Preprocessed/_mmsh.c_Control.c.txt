func	2:0	86:0	0	static int	Control
params	2:18	0:0	1	
param	2:20	2:38	2	access_t *	p_access
param	2:40	2:51	2	int	i_query
param	2:53	2:66	2	va_list	args
stmnts	0:0	85:22	1	
decl	4:4	4:41	2	access_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	p_access
op	4:34	0:0	2	->
water	4:36	0:0	2	p_sys
decl	5:4	5:19	2	bool	*pb_bool
decl	6:4	6:18	2	bool	b_bool
decl	7:4	7:23	2	int64_t	*pi_64
decl	8:4	8:22	2	int	i_int
switch	9:4	84:4	2	(i_query)
cond	9:12	9:12	3	i_query
water	9:12	0:0	4	i_query
stmts	10:4	84:4	3	
water	10:4	0:0	4	{
label	11:8	11:28	4	case ACCESS_CAN_SEEK :
water	12:12	0:0	4	pb_bool
op	12:20	0:0	4	=
water	12:22	0:0	4	(
water	12:23	0:0	4	bool
op	12:27	0:0	4	*
water	12:28	0:0	4	)
call	12:29	12:49	4	va_arg
arg	12:37	12:41	5	args
water	12:37	0:0	6	args
arg	12:43	12:49	5	bool*
water	12:43	0:0	6	bool
op	12:47	0:0	6	*
water	12:50	0:0	4	;
op	13:12	0:0	4	*
water	13:13	0:0	4	pb_bool
op	13:21	0:0	4	=
op	13:23	0:0	4	!
water	13:24	0:0	4	p_sys
op	13:29	0:0	4	->
water	13:31	0:0	4	b_broadcast
water	13:42	0:0	4	;
break	14:12	14:17	4	
label	15:8	15:32	4	case ACCESS_CAN_FASTSEEK :
water	16:12	0:0	4	pb_bool
op	16:20	0:0	4	=
water	16:22	0:0	4	(
water	16:23	0:0	4	bool
op	16:27	0:0	4	*
water	16:28	0:0	4	)
call	16:29	16:49	4	va_arg
arg	16:37	16:41	5	args
water	16:37	0:0	6	args
arg	16:43	16:49	5	bool*
water	16:43	0:0	6	bool
op	16:47	0:0	6	*
water	16:50	0:0	4	;
op	17:12	0:0	4	*
water	17:13	0:0	4	pb_bool
op	17:21	0:0	4	=
water	17:23	0:0	4	false
water	17:28	0:0	4	;
break	18:12	18:17	4	
label	19:8	19:29	4	case ACCESS_CAN_PAUSE :
label	20:8	20:36	4	case ACCESS_CAN_CONTROL_PACE :
water	21:12	0:0	4	pb_bool
op	21:20	0:0	4	=
water	21:22	0:0	4	(
water	21:23	0:0	4	bool
op	21:27	0:0	4	*
water	21:28	0:0	4	)
call	21:29	21:49	4	va_arg
arg	21:37	21:41	5	args
water	21:37	0:0	6	args
arg	21:43	21:49	5	bool*
water	21:43	0:0	6	bool
op	21:47	0:0	6	*
water	21:50	0:0	4	;
op	22:12	0:0	4	*
water	22:13	0:0	4	pb_bool
op	22:21	0:0	4	=
water	22:23	0:0	4	true
water	22:27	0:0	4	;
break	23:12	23:17	4	
label	24:8	24:28	4	case ACCESS_GET_SIZE :
water	25:8	0:0	4	{
decl	26:12	26:52	4	uint64_t	*s
op	26:24	0:0	4	=
call	26:26	26:51	5	va_arg
arg	26:34	26:38	6	args
water	26:34	0:0	7	args
arg	26:40	26:51	6	uint64_t*
water	26:40	0:0	7	uint64_t
op	26:49	0:0	7	*
op	27:12	0:0	4	*
water	27:13	0:0	4	s
op	27:15	0:0	4	=
water	27:17	0:0	4	p_sys
op	27:22	0:0	4	->
water	27:24	0:0	4	b_broadcast
water	27:36	0:0	4	?
water	27:38	0:0	4	0
water	27:40	0:0	4	:
water	27:42	0:0	4	p_sys
op	27:47	0:0	4	->
water	27:49	0:0	4	asfh
op	27:53	0:0	4	.
water	27:54	0:0	4	i_file_size
water	27:65	0:0	4	;
return	28:12	28:30	4	VLC_SUCCESS
water	28:19	0:0	5	VLC_SUCCESS
water	29:8	0:0	4	}
label	30:8	30:33	4	case ACCESS_GET_PTS_DELAY :
water	31:12	0:0	4	pi_64
op	31:18	0:0	4	=
water	31:20	0:0	4	(
water	31:21	0:0	4	int64_t
op	31:28	0:0	4	*
water	31:29	0:0	4	)
call	31:30	31:54	4	va_arg
arg	31:38	31:42	5	args
water	31:38	0:0	6	args
arg	31:44	31:54	5	int64_t*
water	31:44	0:0	6	int64_t
op	31:52	0:0	6	*
water	31:55	0:0	4	;
op	32:12	0:0	4	*
water	32:13	0:0	4	pi_64
op	32:19	0:0	4	=
call	32:21	32:33	4	INT64_C
arg	32:29	32:33	5	1000
water	32:29	0:0	6	1000
call	33:19	33:69	4	*var_InheritInteger
arg	33:41	33:49	5	p_access
water	33:41	0:0	6	p_access
arg	33:51	33:69	5	"network-caching"
water	33:51	0:0	6	"network-caching"
water	33:70	0:0	4	;
break	34:12	34:17	4	
label	35:8	35:40	4	case ACCESS_GET_PRIVATE_ID_STATE :
water	36:12	0:0	4	i_int
op	36:18	0:0	4	=
water	36:20	0:0	4	(
water	36:21	0:0	4	int
water	36:24	0:0	4	)
call	36:25	36:43	4	va_arg
arg	36:33	36:37	5	args
water	36:33	0:0	6	args
arg	36:39	36:43	5	int
water	36:39	0:0	6	int
water	36:44	0:0	4	;
water	37:12	0:0	4	pb_bool
op	37:20	0:0	4	=
water	37:22	0:0	4	(
water	37:23	0:0	4	bool
op	37:28	0:0	4	*
water	37:29	0:0	4	)
call	37:30	37:51	4	va_arg
arg	37:38	37:42	5	args
water	37:38	0:0	6	args
arg	37:44	37:51	5	bool*
water	37:44	0:0	6	bool
op	37:49	0:0	6	*
water	37:52	0:0	4	;
if	38:12	39:35	4	(( i_int < 0 ) || ( i_int > 127 ))
cond	38:16	38:43	5	( i_int < 0 ) || ( i_int > 127 )
water	38:16	0:0	6	(
water	38:17	0:0	6	i_int
op	38:23	0:0	6	<
water	38:25	0:0	6	0
water	38:26	0:0	6	)
op	38:28	0:0	6	||
water	38:31	0:0	6	(
water	38:32	0:0	6	i_int
op	38:38	0:0	6	>
water	38:40	0:0	6	127
water	38:43	0:0	6	)
stmts	39:16	39:35	5	
return	39:16	39:35	6	VLC_EGENERIC
water	39:23	0:0	7	VLC_EGENERIC
op	40:12	0:0	4	*
water	40:13	0:0	4	pb_bool
op	40:21	0:0	4	=
water	40:24	0:0	4	p_sys
op	40:29	0:0	4	->
water	40:31	0:0	4	asfh
op	40:35	0:0	4	.
water	40:36	0:0	4	stream
op	40:42	0:0	4	[
water	40:43	0:0	4	i_int
op	40:48	0:0	4	]
op	40:49	0:0	4	.
water	40:50	0:0	4	i_selected
water	40:61	0:0	4	?
water	40:63	0:0	4	true
water	40:68	0:0	4	:
water	40:70	0:0	4	false
water	40:75	0:0	4	;
break	41:12	41:17	4	
label	42:8	42:40	4	case ACCESS_SET_PRIVATE_ID_STATE :
water	43:8	0:0	4	{
water	44:12	0:0	4	i_int
op	44:18	0:0	4	=
water	44:20	0:0	4	(
water	44:21	0:0	4	int
water	44:24	0:0	4	)
call	44:25	44:43	4	va_arg
arg	44:33	44:37	5	args
water	44:33	0:0	6	args
arg	44:39	44:43	5	int
water	44:39	0:0	6	int
water	44:44	0:0	4	;
water	45:12	0:0	4	b_bool
op	45:19	0:0	4	=
water	45:21	0:0	4	(
water	45:22	0:0	4	bool
water	45:26	0:0	4	)
call	45:27	45:45	4	va_arg
arg	45:35	45:39	5	args
water	45:35	0:0	6	args
arg	45:41	45:45	5	int
water	45:41	0:0	6	int
water	45:46	0:0	4	;
decl	46:12	46:21	4	int	i_cat
if	47:12	48:35	4	(i_int > 127)
cond	47:16	47:24	5	i_int > 127
water	47:16	0:0	6	i_int
op	47:22	0:0	6	>
water	47:24	0:0	6	127
stmts	48:16	48:35	5	
return	48:16	48:35	6	VLC_EGENERIC
water	48:23	0:0	7	VLC_EGENERIC
else	49:12	56:12	4
stmts	49:17	56:12	5	
if	49:17	56:12	6	(i_int < 0)
cond	49:22	49:30	7	i_int < 0
water	49:22	0:0	8	i_int
op	49:28	0:0	8	<
water	49:30	0:0	8	0
stmts	50:12	56:12	7	
water	50:12	0:0	8	{
call	52:16	52:32	8	assert
arg	52:24	52:32	9	!b_bool
op	52:24	0:0	10	!
water	52:25	0:0	10	b_bool
water	52:33	0:0	8	;
water	53:16	0:0	8	i_cat
op	53:22	0:0	8	=
op	53:24	0:0	8	-
water	53:25	0:0	8	1
op	53:27	0:0	8	*
water	53:29	0:0	8	i_int
water	53:34	0:0	8	;
if	54:16	55:39	8	(i_cat > ES_CATEGORY_COUNT)
cond	54:21	54:29	9	i_cat > ES_CATEGORY_COUNT
water	54:21	0:0	10	i_cat
op	54:27	0:0	10	>
water	54:29	0:0	10	ES_CATEGORY_COUNT
stmts	55:20	55:39	9	
return	55:20	55:39	10	VLC_EGENERIC
water	55:27	0:0	11	VLC_EGENERIC
water	56:12	0:0	8	}
else	57:12	62:12	4
stmts	58:12	62:12	5	
water	58:12	0:0	6	{
call	60:16	60:31	6	assert
arg	60:24	60:31	7	b_bool
water	60:24	0:0	8	b_bool
water	60:32	0:0	6	;
water	61:16	0:0	6	i_cat
op	61:22	0:0	6	=
water	61:24	0:0	6	p_sys
op	61:29	0:0	6	->
water	61:31	0:0	6	asfh
op	61:35	0:0	6	.
water	61:36	0:0	6	stream
op	61:42	0:0	6	[
water	61:43	0:0	6	i_int
op	61:48	0:0	6	]
op	61:49	0:0	6	.
water	61:50	0:0	6	i_cat
water	61:55	0:0	6	;
water	62:12	0:0	6	}
for	63:12	68:12	4	( int i = 0 ;i < 128;i ++)
forinit	0:0	63:25	5	 int i = 0 ;
decl	63:18	63:25	6	int	i
op	63:23	0:0	6	=
water	63:24	0:0	6	0
cond	63:27	63:30	5	i < 128
water	63:27	0:0	6	i
op	63:28	0:0	6	<
water	63:30	0:0	6	128
forexpr	63:35	63:36	5	i ++
water	63:35	0:0	6	i
op	63:36	0:0	6	++
stmts	64:12	68:12	5	
water	64:12	0:0	6	{
if	66:16	67:60	6	(i_cat == p_sys -> asfh . stream [ i ] . i_cat)
cond	66:21	66:52	7	i_cat == p_sys -> asfh . stream [ i ] . i_cat
water	66:21	0:0	8	i_cat
op	66:27	0:0	8	==
water	66:30	0:0	8	p_sys
op	66:35	0:0	8	->
water	66:37	0:0	8	asfh
op	66:41	0:0	8	.
water	66:42	0:0	8	stream
op	66:48	0:0	8	[
water	66:49	0:0	8	i
op	66:50	0:0	8	]
op	66:51	0:0	8	.
water	66:52	0:0	8	i_cat
stmts	67:20	67:60	7	
water	67:20	0:0	8	p_sys
op	67:25	0:0	8	->
water	67:27	0:0	8	asfh
op	67:31	0:0	8	.
water	67:32	0:0	8	stream
op	67:38	0:0	8	[
water	67:39	0:0	8	i
op	67:40	0:0	8	]
op	67:41	0:0	8	.
water	67:42	0:0	8	i_selected
op	67:53	0:0	8	=
water	67:55	0:0	8	false
water	67:60	0:0	8	;
water	68:12	0:0	6	}
if	69:12	70:59	4	(i_int > 0)
cond	69:17	69:25	5	i_int > 0
water	69:17	0:0	6	i_int
op	69:23	0:0	6	>
water	69:25	0:0	6	0
stmts	70:16	70:59	5	
water	70:16	0:0	6	p_sys
op	70:21	0:0	6	->
water	70:23	0:0	6	asfh
op	70:27	0:0	6	.
water	70:28	0:0	6	stream
op	70:34	0:0	6	[
water	70:35	0:0	6	i_int
op	70:40	0:0	6	]
op	70:41	0:0	6	.
water	70:42	0:0	6	i_selected
op	70:53	0:0	6	=
water	70:55	0:0	6	true
water	70:59	0:0	6	;
call	71:12	71:27	4	Stop
arg	71:18	71:27	5	p_access
water	71:18	0:0	6	p_access
water	71:28	0:0	4	;
call	72:12	72:49	4	Seek
arg	72:18	72:26	5	p_access
water	72:18	0:0	6	p_access
arg	72:28	72:49	5	p_access->info.i_pos
water	72:28	0:0	6	p_access
op	72:36	0:0	6	->
water	72:38	0:0	6	info
op	72:42	0:0	6	.
water	72:43	0:0	6	i_pos
water	72:50	0:0	4	;
return	73:12	73:30	4	VLC_SUCCESS
water	73:19	0:0	5	VLC_SUCCESS
water	74:8	0:0	4	}
label	75:8	75:35	4	case ACCESS_SET_PAUSE_STATE :
water	76:12	0:0	4	b_bool
op	76:19	0:0	4	=
water	76:21	0:0	4	(
water	76:22	0:0	4	bool
water	76:26	0:0	4	)
call	76:27	76:45	4	va_arg
arg	76:35	76:39	5	args
water	76:35	0:0	6	args
arg	76:41	76:45	5	int
water	76:41	0:0	6	int
water	76:46	0:0	4	;
if	77:12	78:32	4	(b_bool)
cond	77:16	77:16	5	b_bool
water	77:16	0:0	6	b_bool
stmts	78:16	78:32	5	
call	78:16	78:31	6	Stop
arg	78:22	78:31	7	p_access
water	78:22	0:0	8	p_access
water	78:32	0:0	6	;
else	79:12	80:54	4
stmts	80:16	80:54	5	
call	80:16	80:53	6	Seek
arg	80:22	80:30	7	p_access
water	80:22	0:0	8	p_access
arg	80:32	80:53	7	p_access->info.i_pos
water	80:32	0:0	8	p_access
op	80:40	0:0	8	->
water	80:42	0:0	8	info
op	80:46	0:0	8	.
water	80:47	0:0	8	i_pos
water	80:54	0:0	6	;
break	81:12	81:17	4	
label	82:8	82:15	4	default :
return	83:12	83:31	4	VLC_EGENERIC
water	83:19	0:0	5	VLC_EGENERIC
water	84:4	0:0	4	}
return	85:4	85:22	2	VLC_SUCCESS
water	85:11	0:0	3	VLC_SUCCESS
