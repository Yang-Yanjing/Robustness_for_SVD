func	2:0	363:0	0	int	wma_decode_init
params	2:19	0:0	1	
param	2:20	2:39	2	WMADecodeContext *	s
param	2:41	2:64	2	asf_waveformatex_t *	wfx
stmnts	0:0	362:12	1	
decl	4:4	4:25	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:25	2	int	flags1
water	4:17	0:0	2	,
decl	4:4	4:25	2	int	flags2
decl	5:4	5:19	2	int32_t	*window
decl	6:4	6:22	2	uint8_t	*extradata
decl	7:4	7:16	2	int64_t	bps1
decl	8:4	8:21	2	int32_t	high_freq
decl	9:4	9:15	2	int64_t	bps
decl	10:4	10:20	2	int	sample_rate1
decl	11:4	11:22	2	int	coef_vlc_table
call	13:4	13:54	2	coldfire_set_macsr
arg	13:23	13:54	3	EMAC_FRACTIONAL|EMAC_SATURATE
water	13:23	0:0	4	EMAC_FRACTIONAL
op	13:39	0:0	4	|
water	13:41	0:0	4	EMAC_SATURATE
water	13:55	0:0	2	;
water	15:4	0:0	2	s
op	15:5	0:0	2	->
water	15:7	0:0	2	sample_rate
op	15:19	0:0	2	=
water	15:21	0:0	2	wfx
op	15:24	0:0	2	->
water	15:26	0:0	2	rate
water	15:30	0:0	2	;
water	16:4	0:0	2	s
op	16:5	0:0	2	->
water	16:7	0:0	2	nb_channels
op	16:19	0:0	2	=
water	16:21	0:0	2	wfx
op	16:24	0:0	2	->
water	16:26	0:0	2	channels
water	16:34	0:0	2	;
water	17:4	0:0	2	s
op	17:5	0:0	2	->
water	17:7	0:0	2	bit_rate
op	17:16	0:0	2	=
water	17:18	0:0	2	wfx
op	17:21	0:0	2	->
water	17:23	0:0	2	bitrate
water	17:30	0:0	2	;
water	18:4	0:0	2	s
op	18:5	0:0	2	->
water	18:7	0:0	2	block_align
op	18:19	0:0	2	=
water	18:21	0:0	2	wfx
op	18:24	0:0	2	->
water	18:26	0:0	2	blockalign
water	18:36	0:0	2	;
water	19:4	0:0	2	s
op	19:5	0:0	2	->
water	19:7	0:0	2	coefs
op	19:13	0:0	2	=
op	19:15	0:0	2	&
water	19:16	0:0	2	coefsarray
water	19:26	0:0	2	;
if	20:4	22:4	2	(wfx -> codec_id == ASF_CODEC_ID_WMAV1)
cond	20:8	20:25	3	wfx -> codec_id == ASF_CODEC_ID_WMAV1
water	20:8	0:0	4	wfx
op	20:11	0:0	4	->
water	20:13	0:0	4	codec_id
op	20:22	0:0	4	==
water	20:25	0:0	4	ASF_CODEC_ID_WMAV1
stmts	20:45	22:4	3	
water	20:45	0:0	4	{
water	21:8	0:0	4	s
op	21:9	0:0	4	->
water	21:11	0:0	4	version
op	21:19	0:0	4	=
water	21:21	0:0	4	1
water	21:22	0:0	4	;
water	22:4	0:0	4	}
else	22:6	24:4	2
stmts	22:11	24:4	3	
if	22:11	24:4	4	(wfx -> codec_id == ASF_CODEC_ID_WMAV2)
cond	22:15	22:32	5	wfx -> codec_id == ASF_CODEC_ID_WMAV2
water	22:15	0:0	6	wfx
op	22:18	0:0	6	->
water	22:20	0:0	6	codec_id
op	22:29	0:0	6	==
water	22:32	0:0	6	ASF_CODEC_ID_WMAV2
stmts	22:53	24:4	5	
water	22:53	0:0	6	{
water	23:8	0:0	6	s
op	23:9	0:0	6	->
water	23:11	0:0	6	version
op	23:19	0:0	6	=
water	23:21	0:0	6	2
water	23:22	0:0	6	;
water	24:4	0:0	6	}
else	24:6	27:4	2
stmts	24:11	27:4	3	
water	24:11	0:0	4	{
return	26:8	26:17	4	-1
op	26:15	0:0	5	-
water	26:16	0:0	5	1
water	27:4	0:0	4	}
water	29:4	0:0	2	flags1
op	29:11	0:0	2	=
water	29:13	0:0	2	0
water	29:14	0:0	2	;
water	30:4	0:0	2	flags2
op	30:11	0:0	2	=
water	30:13	0:0	2	0
water	30:14	0:0	2	;
water	31:4	0:0	2	extradata
op	31:14	0:0	2	=
water	31:16	0:0	2	wfx
op	31:19	0:0	2	->
water	31:21	0:0	2	data
water	31:25	0:0	2	;
if	32:4	35:4	2	(s -> version == 1 && wfx -> datalen >= 4)
cond	32:8	32:43	3	s -> version == 1 && wfx -> datalen >= 4
water	32:8	0:0	4	s
op	32:9	0:0	4	->
water	32:11	0:0	4	version
op	32:19	0:0	4	==
water	32:22	0:0	4	1
op	32:24	0:0	4	&&
water	32:27	0:0	4	wfx
op	32:30	0:0	4	->
water	32:32	0:0	4	datalen
op	32:40	0:0	4	>=
water	32:43	0:0	4	4
stmts	32:46	35:4	3	
water	32:46	0:0	4	{
water	33:8	0:0	4	flags1
op	33:15	0:0	4	=
water	33:17	0:0	4	extradata
op	33:26	0:0	4	[
water	33:27	0:0	4	0
op	33:28	0:0	4	]
op	33:30	0:0	4	|
water	33:32	0:0	4	(
water	33:33	0:0	4	extradata
op	33:42	0:0	4	[
water	33:43	0:0	4	1
op	33:44	0:0	4	]
op	33:46	0:0	4	<<
water	33:49	0:0	4	8
water	33:50	0:0	4	)
water	33:51	0:0	4	;
water	34:8	0:0	4	flags2
op	34:15	0:0	4	=
water	34:17	0:0	4	extradata
op	34:26	0:0	4	[
water	34:27	0:0	4	2
op	34:28	0:0	4	]
op	34:30	0:0	4	|
water	34:32	0:0	4	(
water	34:33	0:0	4	extradata
op	34:42	0:0	4	[
water	34:43	0:0	4	3
op	34:44	0:0	4	]
op	34:46	0:0	4	<<
water	34:49	0:0	4	8
water	34:50	0:0	4	)
water	34:51	0:0	4	;
water	35:4	0:0	4	}
else	35:5	39:4	2
stmts	35:10	39:4	3	
if	35:10	39:4	4	(s -> version == 2 && wfx -> datalen >= 6)
cond	35:14	35:49	5	s -> version == 2 && wfx -> datalen >= 6
water	35:14	0:0	6	s
op	35:15	0:0	6	->
water	35:17	0:0	6	version
op	35:25	0:0	6	==
water	35:28	0:0	6	2
op	35:30	0:0	6	&&
water	35:33	0:0	6	wfx
op	35:36	0:0	6	->
water	35:38	0:0	6	datalen
op	35:46	0:0	6	>=
water	35:49	0:0	6	6
stmts	35:51	39:4	5	
water	35:51	0:0	6	{
water	36:8	0:0	6	flags1
op	36:15	0:0	6	=
water	36:17	0:0	6	extradata
op	36:26	0:0	6	[
water	36:27	0:0	6	0
op	36:28	0:0	6	]
op	36:30	0:0	6	|
water	36:32	0:0	6	(
water	36:33	0:0	6	extradata
op	36:42	0:0	6	[
water	36:43	0:0	6	1
op	36:44	0:0	6	]
op	36:46	0:0	6	<<
water	36:49	0:0	6	8
water	36:50	0:0	6	)
op	36:52	0:0	6	|
water	37:17	0:0	6	(
water	37:18	0:0	6	extradata
op	37:27	0:0	6	[
water	37:28	0:0	6	2
op	37:29	0:0	6	]
op	37:31	0:0	6	<<
water	37:34	0:0	6	16
water	37:36	0:0	6	)
op	37:38	0:0	6	|
water	37:40	0:0	6	(
water	37:41	0:0	6	extradata
op	37:50	0:0	6	[
water	37:51	0:0	6	3
op	37:52	0:0	6	]
op	37:54	0:0	6	<<
water	37:57	0:0	6	24
water	37:59	0:0	6	)
water	37:60	0:0	6	;
water	38:8	0:0	6	flags2
op	38:15	0:0	6	=
water	38:17	0:0	6	extradata
op	38:26	0:0	6	[
water	38:27	0:0	6	4
op	38:28	0:0	6	]
op	38:30	0:0	6	|
water	38:32	0:0	6	(
water	38:33	0:0	6	extradata
op	38:42	0:0	6	[
water	38:43	0:0	6	5
op	38:44	0:0	6	]
op	38:46	0:0	6	<<
water	38:49	0:0	6	8
water	38:50	0:0	6	)
water	38:51	0:0	6	;
water	39:4	0:0	6	}
water	40:4	0:0	2	s
op	40:5	0:0	2	->
water	40:7	0:0	2	use_exp_vlc
op	40:19	0:0	2	=
water	40:21	0:0	2	flags2
op	40:28	0:0	2	&
water	40:30	0:0	2	0
water	40:31	0:0	2	x0001
water	40:36	0:0	2	;
water	41:4	0:0	2	s
op	41:5	0:0	2	->
water	41:7	0:0	2	use_bit_reservoir
op	41:25	0:0	2	=
water	41:27	0:0	2	flags2
op	41:34	0:0	2	&
water	41:36	0:0	2	0
water	41:37	0:0	2	x0002
water	41:42	0:0	2	;
water	42:4	0:0	2	s
op	42:5	0:0	2	->
water	42:7	0:0	2	use_variable_block_len
op	42:30	0:0	2	=
water	42:32	0:0	2	flags2
op	42:39	0:0	2	&
water	42:41	0:0	2	0
water	42:42	0:0	2	x0004
water	42:47	0:0	2	;
if	44:4	46:4	2	(s -> sample_rate <= 16000)
cond	44:8	44:26	3	s -> sample_rate <= 16000
water	44:8	0:0	4	s
op	44:9	0:0	4	->
water	44:11	0:0	4	sample_rate
op	44:23	0:0	4	<=
water	44:26	0:0	4	16000
stmts	44:32	46:4	3	
water	44:32	0:0	4	{
water	45:8	0:0	4	s
op	45:9	0:0	4	->
water	45:11	0:0	4	frame_len_bits
op	45:26	0:0	4	=
water	45:28	0:0	4	9
water	45:29	0:0	4	;
water	46:4	0:0	4	}
else	46:5	49:4	2
stmts	46:10	49:4	3	
if	46:10	49:4	4	(s -> sample_rate <= 22050 || ( s -> sample_rate <= 32000 && s -> version == 1 ))
cond	46:14	47:56	5	s -> sample_rate <= 22050 || ( s -> sample_rate <= 32000 && s -> version == 1 )
water	46:14	0:0	6	s
op	46:15	0:0	6	->
water	46:17	0:0	6	sample_rate
op	46:29	0:0	6	<=
water	46:32	0:0	6	22050
op	46:38	0:0	6	||
water	47:13	0:0	6	(
water	47:14	0:0	6	s
op	47:15	0:0	6	->
water	47:17	0:0	6	sample_rate
op	47:29	0:0	6	<=
water	47:32	0:0	6	32000
op	47:38	0:0	6	&&
water	47:41	0:0	6	s
op	47:42	0:0	6	->
water	47:44	0:0	6	version
op	47:52	0:0	6	==
water	47:55	0:0	6	1
water	47:56	0:0	6	)
stmts	47:58	49:4	5	
water	47:58	0:0	6	{
water	48:8	0:0	6	s
op	48:9	0:0	6	->
water	48:11	0:0	6	frame_len_bits
op	48:26	0:0	6	=
water	48:28	0:0	6	10
water	48:30	0:0	6	;
water	49:4	0:0	6	}
else	49:5	51:4	2
stmts	49:9	51:4	3	
water	49:9	0:0	4	{
water	50:8	0:0	4	s
op	50:9	0:0	4	->
water	50:11	0:0	4	frame_len_bits
op	50:26	0:0	4	=
water	50:28	0:0	4	11
water	50:30	0:0	4	;
water	51:4	0:0	4	}
water	52:4	0:0	2	s
op	52:5	0:0	2	->
water	52:7	0:0	2	frame_len
op	52:17	0:0	2	=
water	52:19	0:0	2	1
op	52:21	0:0	2	<<
water	52:24	0:0	2	s
op	52:25	0:0	2	->
water	52:27	0:0	2	frame_len_bits
water	52:41	0:0	2	;
if	53:4	65:4	2	(s -> use_variable_block_len)
cond	53:8	53:12	3	s -> use_variable_block_len
water	53:8	0:0	4	s
op	53:9	0:0	4	->
water	53:12	0:0	4	use_variable_block_len
stmts	54:4	65:4	3	
water	54:4	0:0	4	{
decl	55:8	55:22	4	int	nb_max
water	55:18	0:0	4	,
decl	55:8	55:22	4	int	nb
water	56:8	0:0	4	nb
op	56:11	0:0	4	=
water	56:13	0:0	4	(
water	56:14	0:0	4	(
water	56:15	0:0	4	flags2
op	56:22	0:0	4	>>
water	56:25	0:0	4	3
water	56:26	0:0	4	)
op	56:28	0:0	4	&
water	56:30	0:0	4	3
water	56:31	0:0	4	)
op	56:33	0:0	4	+
water	56:35	0:0	4	1
water	56:36	0:0	4	;
if	57:8	60:8	4	(( s -> bit_rate / s -> nb_channels ) >= 32000)
cond	57:12	57:46	5	( s -> bit_rate / s -> nb_channels ) >= 32000
water	57:12	0:0	6	(
water	57:13	0:0	6	s
op	57:14	0:0	6	->
water	57:16	0:0	6	bit_rate
op	57:25	0:0	6	/
water	57:27	0:0	6	s
op	57:28	0:0	6	->
water	57:30	0:0	6	nb_channels
water	57:41	0:0	6	)
op	57:43	0:0	6	>=
water	57:46	0:0	6	32000
stmts	58:8	60:8	5	
water	58:8	0:0	6	{
water	59:12	0:0	6	nb
op	59:15	0:0	6	+=
water	59:18	0:0	6	2
water	59:19	0:0	6	;
water	60:8	0:0	6	}
water	61:8	0:0	4	nb_max
op	61:15	0:0	4	=
water	61:17	0:0	4	s
op	61:18	0:0	4	->
water	61:20	0:0	4	frame_len_bits
op	61:35	0:0	4	-
water	61:37	0:0	4	BLOCK_MIN_BITS
water	61:51	0:0	4	;
if	62:8	63:23	4	(nb > nb_max)
cond	62:12	62:17	5	nb > nb_max
water	62:12	0:0	6	nb
op	62:15	0:0	6	>
water	62:17	0:0	6	nb_max
stmts	63:12	63:23	5	
water	63:12	0:0	6	nb
op	63:15	0:0	6	=
water	63:17	0:0	6	nb_max
water	63:23	0:0	6	;
water	64:8	0:0	4	s
op	64:9	0:0	4	->
water	64:11	0:0	4	nb_block_sizes
op	64:26	0:0	4	=
water	64:28	0:0	4	nb
op	64:31	0:0	4	+
water	64:33	0:0	4	1
water	64:34	0:0	4	;
water	65:4	0:0	4	}
else	66:4	69:4	2
stmts	67:4	69:4	3	
water	67:4	0:0	4	{
water	68:8	0:0	4	s
op	68:9	0:0	4	->
water	68:11	0:0	4	nb_block_sizes
op	68:26	0:0	4	=
water	68:28	0:0	4	1
water	68:29	0:0	4	;
water	69:4	0:0	4	}
water	71:4	0:0	2	s
op	71:5	0:0	2	->
water	71:7	0:0	2	use_noise_coding
op	71:24	0:0	2	=
water	71:26	0:0	2	1
water	71:27	0:0	2	;
water	72:4	0:0	2	high_freq
op	72:14	0:0	2	=
call	72:16	72:39	2	itofix64
arg	72:25	72:39	3	s->sample_rate
water	72:25	0:0	4	s
op	72:26	0:0	4	->
water	72:28	0:0	4	sample_rate
op	72:41	0:0	2	>>
water	72:44	0:0	2	1
water	72:45	0:0	2	;
water	74:4	0:0	2	sample_rate1
op	74:17	0:0	2	=
water	74:19	0:0	2	s
op	74:20	0:0	2	->
water	74:22	0:0	2	sample_rate
water	74:33	0:0	2	;
if	75:4	87:4	2	(s -> version == 2)
cond	75:8	75:22	3	s -> version == 2
water	75:8	0:0	4	s
op	75:9	0:0	4	->
water	75:11	0:0	4	version
op	75:19	0:0	4	==
water	75:22	0:0	4	2
stmts	76:4	87:4	3	
water	76:4	0:0	4	{
if	77:8	78:32	4	(sample_rate1 >= 44100)
cond	77:12	77:28	5	sample_rate1 >= 44100
water	77:12	0:0	6	sample_rate1
op	77:25	0:0	6	>=
water	77:28	0:0	6	44100
stmts	78:12	78:32	5	
water	78:12	0:0	6	sample_rate1
op	78:25	0:0	6	=
water	78:27	0:0	6	44100
water	78:32	0:0	6	;
else	79:8	80:32	4
stmts	79:13	80:32	5	
if	79:13	80:32	6	(sample_rate1 >= 22050)
cond	79:17	79:33	7	sample_rate1 >= 22050
water	79:17	0:0	8	sample_rate1
op	79:30	0:0	8	>=
water	79:33	0:0	8	22050
stmts	80:12	80:32	7	
water	80:12	0:0	8	sample_rate1
op	80:25	0:0	8	=
water	80:27	0:0	8	22050
water	80:32	0:0	8	;
else	81:8	82:32	4
stmts	81:13	82:32	5	
if	81:13	82:32	6	(sample_rate1 >= 16000)
cond	81:17	81:33	7	sample_rate1 >= 16000
water	81:17	0:0	8	sample_rate1
op	81:30	0:0	8	>=
water	81:33	0:0	8	16000
stmts	82:12	82:32	7	
water	82:12	0:0	8	sample_rate1
op	82:25	0:0	8	=
water	82:27	0:0	8	16000
water	82:32	0:0	8	;
else	83:8	84:32	4
stmts	83:13	84:32	5	
if	83:13	84:32	6	(sample_rate1 >= 11025)
cond	83:17	83:33	7	sample_rate1 >= 11025
water	83:17	0:0	8	sample_rate1
op	83:30	0:0	8	>=
water	83:33	0:0	8	11025
stmts	84:12	84:32	7	
water	84:12	0:0	8	sample_rate1
op	84:25	0:0	8	=
water	84:27	0:0	8	11025
water	84:32	0:0	8	;
else	85:8	86:31	4
stmts	85:13	86:31	5	
if	85:13	86:31	6	(sample_rate1 >= 8000)
cond	85:17	85:33	7	sample_rate1 >= 8000
water	85:17	0:0	8	sample_rate1
op	85:30	0:0	8	>=
water	85:33	0:0	8	8000
stmts	86:12	86:31	7	
water	86:12	0:0	8	sample_rate1
op	86:25	0:0	8	=
water	86:27	0:0	8	8000
water	86:31	0:0	8	;
water	87:4	0:0	4	}
decl	88:4	88:39	2	int64_t	tmp
op	88:16	0:0	2	=
call	88:18	88:38	3	itofix64
arg	88:27	88:38	4	s->bit_rate
water	88:27	0:0	5	s
op	88:28	0:0	5	->
water	88:30	0:0	5	bit_rate
decl	89:4	89:60	2	int64_t	tmp2
op	89:17	0:0	2	=
call	89:19	89:59	3	itofix64
arg	89:28	89:59	4	s->nb_channels*s->sample_rate
water	89:28	0:0	5	s
op	89:29	0:0	5	->
water	89:31	0:0	5	nb_channels
op	89:43	0:0	5	*
water	89:45	0:0	5	s
op	89:46	0:0	5	->
water	89:48	0:0	5	sample_rate
water	90:4	0:0	2	bps
op	90:8	0:0	2	=
call	90:10	90:28	2	fixdiv64
arg	90:19	90:22	3	tmp
water	90:19	0:0	4	tmp
arg	90:24	90:28	3	tmp2
water	90:24	0:0	4	tmp2
water	90:29	0:0	2	;
decl	91:4	91:36	2	int64_t	tim
op	91:16	0:0	2	=
water	91:18	0:0	2	bps
op	91:22	0:0	2	*
water	91:24	0:0	2	s
op	91:25	0:0	2	->
water	91:27	0:0	2	frame_len
decl	92:4	92:44	2	int64_t	tmpi
op	92:17	0:0	2	=
call	92:19	92:43	3	fixdiv64
arg	92:28	92:31	4	tim
water	92:28	0:0	5	tim
arg	92:32	92:43	4	itofix64(8)
call	92:32	92:42	5	itofix64
arg	92:41	92:42	6	8
water	92:41	0:0	7	8
water	93:4	0:0	2	s
op	93:5	0:0	2	->
water	93:7	0:0	2	byte_offset_bits
op	93:24	0:0	2	=
call	93:26	93:55	2	av_log2
arg	93:34	93:55	3	fixtoi64(tmpi+0x8000)
call	93:34	93:54	4	fixtoi64
arg	93:43	93:54	5	tmpi+0x8000
water	93:43	0:0	6	tmpi
op	93:47	0:0	6	+
water	93:48	0:0	6	0
water	93:49	0:0	6	x8000
op	93:57	0:0	2	+
water	93:59	0:0	2	2
water	93:60	0:0	2	;
water	96:4	0:0	2	bps1
op	96:9	0:0	2	=
water	96:11	0:0	2	bps
water	96:14	0:0	2	;
if	97:4	98:36	2	(s -> nb_channels == 2)
cond	97:8	97:26	3	s -> nb_channels == 2
water	97:8	0:0	4	s
op	97:9	0:0	4	->
water	97:11	0:0	4	nb_channels
op	97:23	0:0	4	==
water	97:26	0:0	4	2
stmts	98:8	98:36	3	
water	98:8	0:0	4	bps1
op	98:13	0:0	4	=
call	98:15	98:35	4	fixmul32
arg	98:24	98:27	5	bps
water	98:24	0:0	6	bps
arg	98:28	98:35	5	0x1999a
water	98:28	0:0	6	0
water	98:29	0:0	6	x1999a
water	98:36	0:0	4	;
if	99:4	105:4	2	(sample_rate1 == 44100)
cond	99:8	99:24	3	sample_rate1 == 44100
water	99:8	0:0	4	sample_rate1
op	99:21	0:0	4	==
water	99:24	0:0	4	44100
stmts	100:4	105:4	3	
water	100:4	0:0	4	{
if	101:8	102:35	4	(bps1 >= 0 x9c29)
cond	101:12	101:21	5	bps1 >= 0 x9c29
water	101:12	0:0	6	bps1
op	101:17	0:0	6	>=
water	101:20	0:0	6	0
water	101:21	0:0	6	x9c29
stmts	102:12	102:35	5	
water	102:12	0:0	6	s
op	102:13	0:0	6	->
water	102:15	0:0	6	use_noise_coding
op	102:32	0:0	6	=
water	102:34	0:0	6	0
water	102:35	0:0	6	;
else	103:8	104:50	4
stmts	104:12	104:50	5	
water	104:12	0:0	6	high_freq
op	104:22	0:0	6	=
call	104:24	104:49	6	fixmul32
arg	104:33	104:42	7	high_freq
water	104:33	0:0	8	high_freq
arg	104:43	104:49	7	0x6666
water	104:43	0:0	8	0
water	104:44	0:0	8	x6666
water	104:50	0:0	6	;
water	105:4	0:0	4	}
else	106:4	114:4	2
stmts	106:9	114:4	3	
if	106:9	114:4	4	(sample_rate1 == 22050)
cond	106:13	106:29	5	sample_rate1 == 22050
water	106:13	0:0	6	sample_rate1
op	106:26	0:0	6	==
water	106:29	0:0	6	22050
stmts	107:4	114:4	5	
water	107:4	0:0	6	{
if	108:8	109:35	6	(bps1 >= 0 x128f6)
cond	108:12	108:21	7	bps1 >= 0 x128f6
water	108:12	0:0	8	bps1
op	108:17	0:0	8	>=
water	108:20	0:0	8	0
water	108:21	0:0	8	x128f6
stmts	109:12	109:35	7	
water	109:12	0:0	8	s
op	109:13	0:0	8	->
water	109:15	0:0	8	use_noise_coding
op	109:32	0:0	8	=
water	109:34	0:0	8	0
water	109:35	0:0	8	;
else	110:8	111:50	6
stmts	110:13	111:50	7	
if	110:13	111:50	8	(bps1 >= 0 xb852)
cond	110:17	110:26	9	bps1 >= 0 xb852
water	110:17	0:0	10	bps1
op	110:22	0:0	10	>=
water	110:25	0:0	10	0
water	110:26	0:0	10	xb852
stmts	111:12	111:50	9	
water	111:12	0:0	10	high_freq
op	111:22	0:0	10	=
call	111:24	111:49	10	fixmul32
arg	111:33	111:42	11	high_freq
water	111:33	0:0	12	high_freq
arg	111:43	111:49	11	0xb333
water	111:43	0:0	12	0
water	111:44	0:0	12	xb333
water	111:50	0:0	10	;
else	112:8	113:50	6
stmts	113:12	113:50	7	
water	113:12	0:0	8	high_freq
op	113:22	0:0	8	=
call	113:24	113:49	8	fixmul32
arg	113:33	113:42	9	high_freq
water	113:33	0:0	10	high_freq
arg	113:43	113:49	9	0x999a
water	113:43	0:0	10	0
water	113:44	0:0	10	x999a
water	113:50	0:0	8	;
water	114:4	0:0	6	}
else	115:4	121:4	2
stmts	115:9	121:4	3	
if	115:9	121:4	4	(sample_rate1 == 16000)
cond	115:13	115:29	5	sample_rate1 == 16000
water	115:13	0:0	6	sample_rate1
op	115:26	0:0	6	==
water	115:29	0:0	6	16000
stmts	116:4	121:4	5	
water	116:4	0:0	6	{
if	117:8	118:50	6	(bps > 0 x8000)
cond	117:12	117:19	7	bps > 0 x8000
water	117:12	0:0	8	bps
op	117:16	0:0	8	>
water	117:18	0:0	8	0
water	117:19	0:0	8	x8000
stmts	118:12	118:50	7	
water	118:12	0:0	8	high_freq
op	118:22	0:0	8	=
call	118:24	118:49	8	fixmul32
arg	118:33	118:42	9	high_freq
water	118:33	0:0	10	high_freq
arg	118:43	118:49	9	0x8000
water	118:43	0:0	10	0
water	118:44	0:0	10	x8000
water	118:50	0:0	8	;
else	119:8	120:50	6
stmts	120:12	120:50	7	
water	120:12	0:0	8	high_freq
op	120:22	0:0	8	=
call	120:24	120:49	8	fixmul32
arg	120:33	120:42	9	high_freq
water	120:33	0:0	10	high_freq
arg	120:43	120:49	9	0x4ccd
water	120:43	0:0	10	0
water	120:44	0:0	10	x4ccd
water	120:50	0:0	8	;
water	121:4	0:0	6	}
else	122:4	125:4	2
stmts	122:9	125:4	3	
if	122:9	125:4	4	(sample_rate1 == 11025)
cond	122:13	122:29	5	sample_rate1 == 11025
water	122:13	0:0	6	sample_rate1
op	122:26	0:0	6	==
water	122:29	0:0	6	11025
stmts	123:4	125:4	5	
water	123:4	0:0	6	{
water	124:8	0:0	6	high_freq
op	124:18	0:0	6	=
call	124:20	124:45	6	fixmul32
arg	124:29	124:38	7	high_freq
water	124:29	0:0	8	high_freq
arg	124:39	124:45	7	0xb333
water	124:39	0:0	8	0
water	124:40	0:0	8	xb333
water	124:46	0:0	6	;
water	125:4	0:0	6	}
else	126:4	140:4	2
stmts	126:9	140:4	3	
if	126:9	140:4	4	(sample_rate1 == 8000)
cond	126:13	126:29	5	sample_rate1 == 8000
water	126:13	0:0	6	sample_rate1
op	126:26	0:0	6	==
water	126:29	0:0	6	8000
stmts	127:4	140:4	5	
water	127:4	0:0	6	{
if	128:8	131:8	6	(bps <= 0 xa000)
cond	128:12	128:20	7	bps <= 0 xa000
water	128:12	0:0	8	bps
op	128:16	0:0	8	<=
water	128:19	0:0	8	0
water	128:20	0:0	8	xa000
stmts	129:8	131:8	7	
water	129:8	0:0	8	{
water	130:11	0:0	8	high_freq
op	130:21	0:0	8	=
call	130:23	130:48	8	fixmul32
arg	130:32	130:41	9	high_freq
water	130:32	0:0	10	high_freq
arg	130:42	130:48	9	0x8000
water	130:42	0:0	10	0
water	130:43	0:0	10	x8000
water	130:49	0:0	8	;
water	131:8	0:0	8	}
else	132:8	135:8	6
stmts	132:13	135:8	7	
if	132:13	135:8	8	(bps > 0 xc000)
cond	132:17	132:24	9	bps > 0 xc000
water	132:17	0:0	10	bps
op	132:21	0:0	10	>
water	132:23	0:0	10	0
water	132:24	0:0	10	xc000
stmts	133:8	135:8	9	
water	133:8	0:0	10	{
water	134:12	0:0	10	s
op	134:13	0:0	10	->
water	134:15	0:0	10	use_noise_coding
op	134:32	0:0	10	=
water	134:34	0:0	10	0
water	134:35	0:0	10	;
water	135:8	0:0	10	}
else	136:8	139:8	6
stmts	137:8	139:8	7	
water	137:8	0:0	8	{
water	138:12	0:0	8	high_freq
op	138:22	0:0	8	=
call	138:24	138:49	8	fixmul32
arg	138:33	138:42	9	high_freq
water	138:33	0:0	10	high_freq
arg	138:43	138:49	9	0xa666
water	138:43	0:0	10	0
water	138:44	0:0	10	xa666
water	138:50	0:0	8	;
water	139:8	0:0	8	}
water	140:4	0:0	6	}
else	141:4	155:4	2
stmts	142:4	155:4	3	
water	142:4	0:0	4	{
if	143:8	146:8	4	(bps >= 0 xcccd)
cond	143:12	143:20	5	bps >= 0 xcccd
water	143:12	0:0	6	bps
op	143:16	0:0	6	>=
water	143:19	0:0	6	0
water	143:20	0:0	6	xcccd
stmts	144:8	146:8	5	
water	144:8	0:0	6	{
water	145:12	0:0	6	high_freq
op	145:22	0:0	6	=
call	145:24	145:49	6	fixmul32
arg	145:33	145:42	7	high_freq
water	145:33	0:0	8	high_freq
arg	145:43	145:49	7	0xc000
water	145:43	0:0	8	0
water	145:44	0:0	8	xc000
water	145:50	0:0	6	;
water	146:8	0:0	6	}
else	147:8	150:8	4
stmts	147:13	150:8	5	
if	147:13	150:8	6	(bps >= 0 x999a)
cond	147:17	147:25	7	bps >= 0 x999a
water	147:17	0:0	8	bps
op	147:21	0:0	8	>=
water	147:24	0:0	8	0
water	147:25	0:0	8	x999a
stmts	148:8	150:8	7	
water	148:8	0:0	8	{
water	149:12	0:0	8	high_freq
op	149:22	0:0	8	=
call	149:24	149:49	8	fixmul32
arg	149:33	149:42	9	high_freq
water	149:33	0:0	10	high_freq
arg	149:43	149:49	9	0x999a
water	149:43	0:0	10	0
water	149:44	0:0	10	x999a
water	149:50	0:0	8	;
water	150:8	0:0	8	}
else	151:8	154:8	4
stmts	152:8	154:8	5	
water	152:8	0:0	6	{
water	153:12	0:0	6	high_freq
op	153:22	0:0	6	=
call	153:24	153:49	6	fixmul32
arg	153:33	153:42	7	high_freq
water	153:33	0:0	8	high_freq
arg	153:43	153:49	7	0x8000
water	153:43	0:0	8	0
water	153:44	0:0	8	x8000
water	153:50	0:0	6	;
water	154:8	0:0	6	}
water	155:4	0:0	4	}
water	157:4	0:0	2	{
decl	158:8	158:50	2	int	a
water	158:13	0:0	2	,
decl	158:8	158:50	2	int	b
water	158:16	0:0	2	,
decl	158:8	158:50	2	int	pos
water	158:21	0:0	2	,
decl	158:8	158:50	2	int	lpos
water	158:27	0:0	2	,
decl	158:8	158:50	2	int	k
water	158:30	0:0	2	,
decl	158:8	158:50	2	int	block_len
water	158:41	0:0	2	,
decl	158:8	158:50	2	int	i
water	158:44	0:0	2	,
decl	158:8	158:50	2	int	j
water	158:47	0:0	2	,
decl	158:8	158:50	2	int	n
decl	159:8	159:28	2	const uint8_t	*table
if	160:8	163:8	2	(s -> version == 1)
cond	160:12	160:26	3	s -> version == 1
water	160:12	0:0	4	s
op	160:13	0:0	4	->
water	160:15	0:0	4	version
op	160:23	0:0	4	==
water	160:26	0:0	4	1
stmts	161:8	163:8	3	
water	161:8	0:0	4	{
water	162:12	0:0	4	s
op	162:13	0:0	4	->
water	162:15	0:0	4	coefs_start
op	162:27	0:0	4	=
water	162:29	0:0	4	3
water	162:30	0:0	4	;
water	163:8	0:0	4	}
else	164:8	167:8	2
stmts	165:8	167:8	3	
water	165:8	0:0	4	{
water	166:12	0:0	4	s
op	166:13	0:0	4	->
water	166:15	0:0	4	coefs_start
op	166:27	0:0	4	=
water	166:29	0:0	4	0
water	166:30	0:0	4	;
water	167:8	0:0	4	}
for	168:8	259:8	2	(k = 0 ;k < s -> nb_block_sizes;++ k)
forinit	168:12	168:17	3	k = 0 ;
water	168:12	0:0	4	k
op	168:14	0:0	4	=
water	168:16	0:0	4	0
water	168:17	0:0	4	;
cond	168:19	168:26	3	k < s -> nb_block_sizes
water	168:19	0:0	4	k
op	168:21	0:0	4	<
water	168:23	0:0	4	s
op	168:24	0:0	4	->
water	168:26	0:0	4	nb_block_sizes
forexpr	168:42	168:44	3	++ k
op	168:42	0:0	4	++
water	168:44	0:0	4	k
stmts	169:8	259:8	3	
water	169:8	0:0	4	{
water	170:12	0:0	4	block_len
op	170:22	0:0	4	=
water	170:24	0:0	4	s
op	170:25	0:0	4	->
water	170:27	0:0	4	frame_len
op	170:37	0:0	4	>>
water	170:40	0:0	4	k
water	170:41	0:0	4	;
if	171:12	190:12	4	(s -> version == 1)
cond	171:16	171:30	5	s -> version == 1
water	171:16	0:0	6	s
op	171:17	0:0	6	->
water	171:19	0:0	6	version
op	171:27	0:0	6	==
water	171:30	0:0	6	1
stmts	172:12	190:12	5	
water	172:12	0:0	6	{
water	173:16	0:0	6	lpos
op	173:21	0:0	6	=
water	173:23	0:0	6	0
water	173:24	0:0	6	;
for	174:16	188:16	6	(i = 0 ;i < 25;++ i)
forinit	174:20	174:23	7	i = 0 ;
water	174:20	0:0	8	i
op	174:21	0:0	8	=
water	174:22	0:0	8	0
water	174:23	0:0	8	;
cond	174:24	174:26	7	i < 25
water	174:24	0:0	8	i
op	174:25	0:0	8	<
water	174:26	0:0	8	25
forexpr	174:29	174:31	7	++ i
op	174:29	0:0	8	++
water	174:31	0:0	8	i
stmts	175:16	188:16	7	
water	175:16	0:0	8	{
water	176:20	0:0	8	a
op	176:22	0:0	8	=
water	176:24	0:0	8	wma_critical_freqs
op	176:42	0:0	8	[
water	176:43	0:0	8	i
op	176:44	0:0	8	]
water	176:45	0:0	8	;
water	177:20	0:0	8	b
op	177:22	0:0	8	=
water	177:24	0:0	8	s
op	177:25	0:0	8	->
water	177:27	0:0	8	sample_rate
water	177:38	0:0	8	;
water	178:20	0:0	8	pos
op	178:24	0:0	8	=
water	178:26	0:0	8	(
water	178:27	0:0	8	(
water	178:28	0:0	8	block_len
op	178:38	0:0	8	*
water	178:40	0:0	8	2
op	178:42	0:0	8	*
water	178:44	0:0	8	a
water	178:45	0:0	8	)
op	178:48	0:0	8	+
water	178:50	0:0	8	(
water	178:51	0:0	8	b
op	178:53	0:0	8	>>
water	178:56	0:0	8	1
water	178:57	0:0	8	)
water	178:58	0:0	8	)
op	178:60	0:0	8	/
water	178:62	0:0	8	b
water	178:63	0:0	8	;
if	179:20	180:39	8	(pos > block_len)
cond	179:24	179:30	9	pos > block_len
water	179:24	0:0	10	pos
op	179:28	0:0	10	>
water	179:30	0:0	10	block_len
stmts	180:24	180:39	9	
water	180:24	0:0	10	pos
op	180:28	0:0	10	=
water	180:30	0:0	10	block_len
water	180:39	0:0	10	;
water	181:20	0:0	8	s
op	181:21	0:0	8	->
water	181:23	0:0	8	exponent_bands
op	181:37	0:0	8	[
water	181:38	0:0	8	0
op	181:39	0:0	8	]
op	181:40	0:0	8	[
water	181:41	0:0	8	i
op	181:42	0:0	8	]
op	181:44	0:0	8	=
water	181:46	0:0	8	pos
op	181:50	0:0	8	-
water	181:52	0:0	8	lpos
water	181:56	0:0	8	;
if	182:20	186:20	8	(pos >= block_len)
cond	182:24	182:31	9	pos >= block_len
water	182:24	0:0	10	pos
op	182:28	0:0	10	>=
water	182:31	0:0	10	block_len
stmts	183:20	186:20	9	
water	183:20	0:0	10	{
op	184:24	0:0	10	++
water	184:26	0:0	10	i
water	184:27	0:0	10	;
break	185:24	185:29	10	
water	186:20	0:0	10	}
water	187:20	0:0	8	lpos
op	187:25	0:0	8	=
water	187:27	0:0	8	pos
water	187:30	0:0	8	;
water	188:16	0:0	8	}
water	189:16	0:0	6	s
op	189:17	0:0	6	->
water	189:19	0:0	6	exponent_sizes
op	189:33	0:0	6	[
water	189:34	0:0	6	0
op	189:35	0:0	6	]
op	189:37	0:0	6	=
water	189:39	0:0	6	i
water	189:40	0:0	6	;
water	190:12	0:0	6	}
else	191:12	232:12	4
stmts	192:12	232:12	5	
water	192:12	0:0	6	{
water	194:16	0:0	6	table
op	194:22	0:0	6	=
water	194:24	0:0	6	NULL
water	194:28	0:0	6	;
water	195:16	0:0	6	a
op	195:18	0:0	6	=
water	195:20	0:0	6	s
op	195:21	0:0	6	->
water	195:23	0:0	6	frame_len_bits
op	195:38	0:0	6	-
water	195:40	0:0	6	BLOCK_MIN_BITS
op	195:55	0:0	6	-
water	195:57	0:0	6	k
water	195:58	0:0	6	;
if	196:16	204:16	6	(a < 3)
cond	196:20	196:24	7	a < 3
water	196:20	0:0	8	a
op	196:22	0:0	8	<
water	196:24	0:0	8	3
stmts	197:16	204:16	7	
water	197:16	0:0	8	{
if	198:20	199:54	8	(s -> sample_rate >= 44100)
cond	198:24	198:42	9	s -> sample_rate >= 44100
water	198:24	0:0	10	s
op	198:25	0:0	10	->
water	198:27	0:0	10	sample_rate
op	198:39	0:0	10	>=
water	198:42	0:0	10	44100
stmts	199:24	199:54	9	
water	199:24	0:0	10	table
op	199:30	0:0	10	=
water	199:32	0:0	10	exponent_band_44100
op	199:51	0:0	10	[
water	199:52	0:0	10	a
op	199:53	0:0	10	]
water	199:54	0:0	10	;
else	200:20	201:54	8
stmts	200:25	201:54	9	
if	200:25	201:54	10	(s -> sample_rate >= 32000)
cond	200:29	200:47	11	s -> sample_rate >= 32000
water	200:29	0:0	12	s
op	200:30	0:0	12	->
water	200:32	0:0	12	sample_rate
op	200:44	0:0	12	>=
water	200:47	0:0	12	32000
stmts	201:24	201:54	11	
water	201:24	0:0	12	table
op	201:30	0:0	12	=
water	201:32	0:0	12	exponent_band_32000
op	201:51	0:0	12	[
water	201:52	0:0	12	a
op	201:53	0:0	12	]
water	201:54	0:0	12	;
else	202:20	203:54	8
stmts	202:25	203:54	9	
if	202:25	203:54	10	(s -> sample_rate >= 22050)
cond	202:29	202:47	11	s -> sample_rate >= 22050
water	202:29	0:0	12	s
op	202:30	0:0	12	->
water	202:32	0:0	12	sample_rate
op	202:44	0:0	12	>=
water	202:47	0:0	12	22050
stmts	203:24	203:54	11	
water	203:24	0:0	12	table
op	203:30	0:0	12	=
water	203:32	0:0	12	exponent_band_22050
op	203:51	0:0	12	[
water	203:52	0:0	12	a
op	203:53	0:0	12	]
water	203:54	0:0	12	;
water	204:16	0:0	8	}
if	205:16	211:16	6	(table)
cond	205:20	205:20	7	table
water	205:20	0:0	8	table
stmts	206:16	211:16	7	
water	206:16	0:0	8	{
water	207:20	0:0	8	n
op	207:22	0:0	8	=
op	207:24	0:0	8	*
water	207:25	0:0	8	table
op	207:30	0:0	8	++
water	207:32	0:0	8	;
for	208:20	209:58	8	(i = 0 ;i < n;++ i)
forinit	208:24	208:27	9	i = 0 ;
water	208:24	0:0	10	i
op	208:25	0:0	10	=
water	208:26	0:0	10	0
water	208:27	0:0	10	;
cond	208:28	208:30	9	i < n
water	208:28	0:0	10	i
op	208:29	0:0	10	<
water	208:30	0:0	10	n
forexpr	208:32	208:34	9	++ i
op	208:32	0:0	10	++
water	208:34	0:0	10	i
stmts	209:24	209:58	9	
water	209:24	0:0	10	s
op	209:25	0:0	10	->
water	209:27	0:0	10	exponent_bands
op	209:41	0:0	10	[
water	209:42	0:0	10	k
op	209:43	0:0	10	]
op	209:44	0:0	10	[
water	209:45	0:0	10	i
op	209:46	0:0	10	]
op	209:48	0:0	10	=
water	209:50	0:0	10	table
op	209:55	0:0	10	[
water	209:56	0:0	10	i
op	209:57	0:0	10	]
water	209:58	0:0	10	;
water	210:20	0:0	8	s
op	210:21	0:0	8	->
water	210:23	0:0	8	exponent_sizes
op	210:37	0:0	8	[
water	210:38	0:0	8	k
op	210:39	0:0	8	]
op	210:41	0:0	8	=
water	210:43	0:0	8	n
water	210:44	0:0	8	;
water	211:16	0:0	8	}
else	212:16	231:16	6
stmts	213:16	231:16	7	
water	213:16	0:0	8	{
water	214:20	0:0	8	j
op	214:22	0:0	8	=
water	214:24	0:0	8	0
water	214:25	0:0	8	;
water	215:20	0:0	8	lpos
op	215:25	0:0	8	=
water	215:27	0:0	8	0
water	215:28	0:0	8	;
for	216:20	229:20	8	(i = 0 ;i < 25;++ i)
forinit	216:24	216:27	9	i = 0 ;
water	216:24	0:0	10	i
op	216:25	0:0	10	=
water	216:26	0:0	10	0
water	216:27	0:0	10	;
cond	216:28	216:30	9	i < 25
water	216:28	0:0	10	i
op	216:29	0:0	10	<
water	216:30	0:0	10	25
forexpr	216:33	216:35	9	++ i
op	216:33	0:0	10	++
water	216:35	0:0	10	i
stmts	217:20	229:20	9	
water	217:20	0:0	10	{
water	218:24	0:0	10	a
op	218:26	0:0	10	=
water	218:28	0:0	10	wma_critical_freqs
op	218:46	0:0	10	[
water	218:47	0:0	10	i
op	218:48	0:0	10	]
water	218:49	0:0	10	;
water	219:24	0:0	10	b
op	219:26	0:0	10	=
water	219:28	0:0	10	s
op	219:29	0:0	10	->
water	219:31	0:0	10	sample_rate
water	219:42	0:0	10	;
water	220:24	0:0	10	pos
op	220:28	0:0	10	=
water	220:30	0:0	10	(
water	220:31	0:0	10	(
water	220:32	0:0	10	block_len
op	220:42	0:0	10	*
water	220:44	0:0	10	2
op	220:46	0:0	10	*
water	220:48	0:0	10	a
water	220:49	0:0	10	)
op	220:52	0:0	10	+
water	220:54	0:0	10	(
water	220:55	0:0	10	b
op	220:57	0:0	10	<<
water	220:60	0:0	10	1
water	220:61	0:0	10	)
water	220:62	0:0	10	)
op	220:64	0:0	10	/
water	220:66	0:0	10	(
water	220:67	0:0	10	4
op	220:69	0:0	10	*
water	220:71	0:0	10	b
water	220:72	0:0	10	)
water	220:73	0:0	10	;
water	221:24	0:0	10	pos
op	221:28	0:0	10	<<=
water	221:32	0:0	10	2
water	221:33	0:0	10	;
if	222:24	223:43	10	(pos > block_len)
cond	222:28	222:34	11	pos > block_len
water	222:28	0:0	12	pos
op	222:32	0:0	12	>
water	222:34	0:0	12	block_len
stmts	223:28	223:43	11	
water	223:28	0:0	12	pos
op	223:32	0:0	12	=
water	223:34	0:0	12	block_len
water	223:43	0:0	12	;
if	224:24	225:66	10	(pos > lpos)
cond	224:28	224:34	11	pos > lpos
water	224:28	0:0	12	pos
op	224:32	0:0	12	>
water	224:34	0:0	12	lpos
stmts	225:28	225:66	11	
water	225:28	0:0	12	s
op	225:29	0:0	12	->
water	225:31	0:0	12	exponent_bands
op	225:45	0:0	12	[
water	225:46	0:0	12	k
op	225:47	0:0	12	]
op	225:48	0:0	12	[
water	225:49	0:0	12	j
op	225:50	0:0	12	++
op	225:52	0:0	12	]
op	225:54	0:0	12	=
water	225:56	0:0	12	pos
op	225:60	0:0	12	-
water	225:62	0:0	12	lpos
water	225:66	0:0	12	;
if	226:24	227:33	10	(pos >= block_len)
cond	226:28	226:35	11	pos >= block_len
water	226:28	0:0	12	pos
op	226:32	0:0	12	>=
water	226:35	0:0	12	block_len
stmts	227:28	227:33	11	
break	227:28	227:33	12	
water	228:24	0:0	10	lpos
op	228:29	0:0	10	=
water	228:31	0:0	10	pos
water	228:34	0:0	10	;
water	229:20	0:0	10	}
water	230:20	0:0	8	s
op	230:21	0:0	8	->
water	230:23	0:0	8	exponent_sizes
op	230:37	0:0	8	[
water	230:38	0:0	8	k
op	230:39	0:0	8	]
op	230:41	0:0	8	=
water	230:43	0:0	8	j
water	230:44	0:0	8	;
water	231:16	0:0	8	}
water	232:12	0:0	6	}
water	234:12	0:0	4	s
op	234:13	0:0	4	->
water	234:15	0:0	4	coefs_end
op	234:24	0:0	4	[
water	234:25	0:0	4	k
op	234:26	0:0	4	]
op	234:28	0:0	4	=
water	234:30	0:0	4	(
water	234:31	0:0	4	s
op	234:32	0:0	4	->
water	234:34	0:0	4	frame_len
op	234:44	0:0	4	-
water	234:46	0:0	4	(
water	234:47	0:0	4	(
water	234:48	0:0	4	s
op	234:49	0:0	4	->
water	234:51	0:0	4	frame_len
op	234:61	0:0	4	*
water	234:63	0:0	4	9
water	234:64	0:0	4	)
op	234:66	0:0	4	/
water	234:68	0:0	4	100
water	234:71	0:0	4	)
water	234:72	0:0	4	)
op	234:74	0:0	4	>>
water	234:77	0:0	4	k
water	234:78	0:0	4	;
decl	236:12	236:38	4	int32_t	tmp1
op	236:25	0:0	4	=
water	236:27	0:0	4	high_freq
op	236:36	0:0	4	*
water	236:37	0:0	4	2
decl	237:12	237:52	4	int32_t	tmp2
op	237:24	0:0	4	=
call	237:25	237:51	5	itofix32
arg	237:34	237:51	6	s->sample_rate>>1
water	237:34	0:0	7	s
op	237:35	0:0	7	->
water	237:37	0:0	7	sample_rate
op	237:48	0:0	7	>>
water	237:50	0:0	7	1
water	238:12	0:0	4	s
op	238:13	0:0	4	->
water	238:15	0:0	4	high_band_start
op	238:30	0:0	4	[
water	238:31	0:0	4	k
op	238:32	0:0	4	]
op	238:34	0:0	4	=
call	238:36	238:91	4	fixtoi32
arg	238:46	238:91	5	fixdiv32(tmp1,tmp2)*(block_len>>1)+0x8000
call	238:46	238:65	6	fixdiv32
arg	238:55	238:59	7	tmp1
water	238:55	0:0	8	tmp1
arg	238:61	238:65	7	tmp2
water	238:61	0:0	8	tmp2
op	238:67	0:0	6	*
water	238:69	0:0	6	(
water	238:70	0:0	6	block_len
op	238:79	0:0	6	>>
water	238:81	0:0	6	1
water	238:82	0:0	6	)
op	238:84	0:0	6	+
water	238:85	0:0	6	0
water	238:86	0:0	6	x8000
water	238:92	0:0	4	;
water	242:12	0:0	4	n
op	242:14	0:0	4	=
water	242:16	0:0	4	s
op	242:17	0:0	4	->
water	242:19	0:0	4	exponent_sizes
op	242:33	0:0	4	[
water	242:34	0:0	4	k
op	242:35	0:0	4	]
water	242:36	0:0	4	;
water	243:12	0:0	4	j
op	243:14	0:0	4	=
water	243:16	0:0	4	0
water	243:17	0:0	4	;
water	244:12	0:0	4	pos
op	244:16	0:0	4	=
water	244:18	0:0	4	0
water	244:19	0:0	4	;
for	245:12	257:12	4	(i = 0 ;i < n;++ i)
forinit	245:16	245:19	5	i = 0 ;
water	245:16	0:0	6	i
op	245:17	0:0	6	=
water	245:18	0:0	6	0
water	245:19	0:0	6	;
cond	245:20	245:22	5	i < n
water	245:20	0:0	6	i
op	245:21	0:0	6	<
water	245:22	0:0	6	n
forexpr	245:24	245:26	5	++ i
op	245:24	0:0	6	++
water	245:26	0:0	6	i
stmts	246:12	257:12	5	
water	246:12	0:0	6	{
decl	247:16	247:30	6	int	start
water	247:25	0:0	6	,
decl	247:16	247:30	6	int	end
water	248:16	0:0	6	start
op	248:22	0:0	6	=
water	248:24	0:0	6	pos
water	248:27	0:0	6	;
water	249:16	0:0	6	pos
op	249:20	0:0	6	+=
water	249:23	0:0	6	s
op	249:24	0:0	6	->
water	249:26	0:0	6	exponent_bands
op	249:40	0:0	6	[
water	249:41	0:0	6	k
op	249:42	0:0	6	]
op	249:43	0:0	6	[
water	249:44	0:0	6	i
op	249:45	0:0	6	]
water	249:46	0:0	6	;
water	250:16	0:0	6	end
op	250:20	0:0	6	=
water	250:22	0:0	6	pos
water	250:25	0:0	6	;
if	251:16	252:49	6	(start < s -> high_band_start [ k ])
cond	251:20	251:48	7	start < s -> high_band_start [ k ]
water	251:20	0:0	8	start
op	251:26	0:0	8	<
water	251:28	0:0	8	s
op	251:29	0:0	8	->
water	251:31	0:0	8	high_band_start
op	251:46	0:0	8	[
water	251:47	0:0	8	k
op	251:48	0:0	8	]
stmts	252:20	252:49	7	
water	252:20	0:0	8	start
op	252:26	0:0	8	=
water	252:28	0:0	8	s
op	252:29	0:0	8	->
water	252:31	0:0	8	high_band_start
op	252:46	0:0	8	[
water	252:47	0:0	8	k
op	252:48	0:0	8	]
water	252:49	0:0	8	;
if	253:16	254:41	6	(end > s -> coefs_end [ k ])
cond	253:20	253:40	7	end > s -> coefs_end [ k ]
water	253:20	0:0	8	end
op	253:24	0:0	8	>
water	253:26	0:0	8	s
op	253:27	0:0	8	->
water	253:29	0:0	8	coefs_end
op	253:38	0:0	8	[
water	253:39	0:0	8	k
op	253:40	0:0	8	]
stmts	254:20	254:41	7	
water	254:20	0:0	8	end
op	254:24	0:0	8	=
water	254:26	0:0	8	s
op	254:27	0:0	8	->
water	254:29	0:0	8	coefs_end
op	254:38	0:0	8	[
water	254:39	0:0	8	k
op	254:40	0:0	8	]
water	254:41	0:0	8	;
if	255:16	256:64	6	(end > start)
cond	255:20	255:26	7	end > start
water	255:20	0:0	8	end
op	255:24	0:0	8	>
water	255:26	0:0	8	start
stmts	256:20	256:64	7	
water	256:20	0:0	8	s
op	256:21	0:0	8	->
water	256:23	0:0	8	exponent_high_bands
op	256:42	0:0	8	[
water	256:43	0:0	8	k
op	256:44	0:0	8	]
op	256:45	0:0	8	[
water	256:46	0:0	8	j
op	256:47	0:0	8	++
op	256:49	0:0	8	]
op	256:51	0:0	8	=
water	256:53	0:0	8	end
op	256:57	0:0	8	-
water	256:59	0:0	8	start
water	256:64	0:0	8	;
water	257:12	0:0	6	}
water	258:12	0:0	4	s
op	258:13	0:0	4	->
water	258:15	0:0	4	exponent_high_sizes
op	258:34	0:0	4	[
water	258:35	0:0	4	k
op	258:36	0:0	4	]
op	258:38	0:0	4	=
water	258:40	0:0	4	j
water	258:41	0:0	4	;
water	259:8	0:0	4	}
water	260:4	0:0	2	}
call	261:4	261:21	2	mdct_init_global
water	261:22	0:0	2	;
for	262:4	265:4	2	(i = 0 ;i < s -> nb_block_sizes;++ i)
forinit	262:8	262:13	3	i = 0 ;
water	262:8	0:0	4	i
op	262:10	0:0	4	=
water	262:12	0:0	4	0
water	262:13	0:0	4	;
cond	262:15	262:22	3	i < s -> nb_block_sizes
water	262:15	0:0	4	i
op	262:17	0:0	4	<
water	262:19	0:0	4	s
op	262:20	0:0	4	->
water	262:22	0:0	4	nb_block_sizes
forexpr	262:38	262:40	3	++ i
op	262:38	0:0	4	++
water	262:40	0:0	4	i
stmts	263:4	265:4	3	
water	263:4	0:0	4	{
call	264:8	264:66	4	ff_mdct_init
arg	264:21	264:36	5	&s->mdct_ctx[i]
op	264:21	0:0	6	&
water	264:22	0:0	6	s
op	264:23	0:0	6	->
water	264:25	0:0	6	mdct_ctx
op	264:33	0:0	6	[
water	264:34	0:0	6	i
op	264:35	0:0	6	]
arg	264:38	264:63	5	s->frame_len_bits-i+1
water	264:38	0:0	6	s
op	264:39	0:0	6	->
water	264:41	0:0	6	frame_len_bits
op	264:56	0:0	6	-
water	264:58	0:0	6	i
op	264:60	0:0	6	+
water	264:62	0:0	6	1
arg	264:65	264:66	5	1
water	264:65	0:0	6	1
water	264:67	0:0	4	;
water	265:4	0:0	4	}
decl	272:4	272:20	2	int32_t	*temp[5]
water	273:4	0:0	2	temp
op	273:8	0:0	2	[
water	273:9	0:0	2	0
op	273:10	0:0	2	]
op	273:12	0:0	2	=
water	273:14	0:0	2	stat0
water	273:19	0:0	2	;
water	274:4	0:0	2	temp
op	274:8	0:0	2	[
water	274:9	0:0	2	1
op	274:10	0:0	2	]
op	274:12	0:0	2	=
water	274:14	0:0	2	stat1
water	274:19	0:0	2	;
water	275:4	0:0	2	temp
op	275:8	0:0	2	[
water	275:9	0:0	2	2
op	275:10	0:0	2	]
op	275:12	0:0	2	=
water	275:14	0:0	2	stat2
water	275:19	0:0	2	;
water	276:4	0:0	2	temp
op	276:8	0:0	2	[
water	276:9	0:0	2	3
op	276:10	0:0	2	]
op	276:12	0:0	2	=
water	276:14	0:0	2	stat3
water	276:19	0:0	2	;
water	277:4	0:0	2	temp
op	277:8	0:0	2	[
water	277:9	0:0	2	4
op	277:10	0:0	2	]
op	277:12	0:0	2	=
water	277:14	0:0	2	stat4
water	277:19	0:0	2	;
for	279:4	292:4	2	(i = 0 ;i < s -> nb_block_sizes;i ++)
forinit	279:8	279:13	3	i = 0 ;
water	279:8	0:0	4	i
op	279:10	0:0	4	=
water	279:12	0:0	4	0
water	279:13	0:0	4	;
cond	279:15	279:22	3	i < s -> nb_block_sizes
water	279:15	0:0	4	i
op	279:17	0:0	4	<
water	279:19	0:0	4	s
op	279:20	0:0	4	->
water	279:22	0:0	4	nb_block_sizes
forexpr	279:38	279:39	3	i ++
water	279:38	0:0	4	i
op	279:39	0:0	4	++
stmts	280:4	292:4	3	
water	280:4	0:0	4	{
decl	281:8	281:16	4	int	n
water	281:13	0:0	4	,
decl	281:8	281:16	4	int	j
decl	282:8	282:21	4	int32_t	alpha
water	283:8	0:0	4	n
op	283:10	0:0	4	=
water	283:12	0:0	4	1
op	283:14	0:0	4	<<
water	283:17	0:0	4	(
water	283:18	0:0	4	s
op	283:19	0:0	4	->
water	283:21	0:0	4	frame_len_bits
op	283:36	0:0	4	-
water	283:38	0:0	4	i
water	283:39	0:0	4	)
water	283:40	0:0	4	;
water	284:8	0:0	4	window
op	284:15	0:0	4	=
water	284:17	0:0	4	temp
op	284:21	0:0	4	[
water	284:22	0:0	4	i
op	284:23	0:0	4	]
water	284:24	0:0	4	;
water	285:8	0:0	4	alpha
op	285:14	0:0	4	=
water	285:16	0:0	4	(
water	285:17	0:0	4	1
op	285:18	0:0	4	<<
water	285:20	0:0	4	15
water	285:22	0:0	4	)
op	285:23	0:0	4	>>
water	285:25	0:0	4	(
water	285:26	0:0	4	s
op	285:27	0:0	4	->
water	285:29	0:0	4	frame_len_bits
op	285:44	0:0	4	-
water	285:46	0:0	4	i
op	285:47	0:0	4	+
water	285:48	0:0	4	1
water	285:49	0:0	4	)
water	285:50	0:0	4	;
for	286:8	290:8	4	(j = 0 ;j < n;++ j)
forinit	286:12	286:15	5	j = 0 ;
water	286:12	0:0	6	j
op	286:13	0:0	6	=
water	286:14	0:0	6	0
water	286:15	0:0	6	;
cond	286:16	286:18	5	j < n
water	286:16	0:0	6	j
op	286:17	0:0	6	<
water	286:18	0:0	6	n
forexpr	286:20	286:22	5	++ j
op	286:20	0:0	6	++
water	286:22	0:0	6	j
stmts	287:8	290:8	5	
water	287:8	0:0	6	{
decl	288:12	288:45	6	int32_t	j2
op	288:23	0:0	6	=
call	288:25	288:35	7	itofix32
arg	288:34	288:35	8	j
water	288:34	0:0	9	j
op	288:37	0:0	6	+
water	288:39	0:0	6	0
water	288:40	0:0	6	x8000
water	289:12	0:0	6	window
op	289:18	0:0	6	[
water	289:19	0:0	6	j
op	289:20	0:0	6	]
op	289:22	0:0	6	=
call	289:24	289:57	6	fsincos
arg	289:32	289:54	7	fixmul32(j2,alpha)<<16
call	289:32	289:49	8	fixmul32
arg	289:41	289:43	9	j2
water	289:41	0:0	10	j2
arg	289:44	289:49	9	alpha
water	289:44	0:0	10	alpha
op	289:50	0:0	8	<<
water	289:52	0:0	8	16
arg	289:56	289:57	7	0
water	289:56	0:0	8	0
water	289:58	0:0	6	;
water	290:8	0:0	6	}
water	291:8	0:0	4	s
op	291:9	0:0	4	->
water	291:11	0:0	4	windows
op	291:18	0:0	4	[
water	291:19	0:0	4	i
op	291:20	0:0	4	]
op	291:22	0:0	4	=
water	291:24	0:0	4	window
water	291:30	0:0	4	;
water	292:4	0:0	4	}
water	293:4	0:0	2	s
op	293:5	0:0	2	->
water	293:7	0:0	2	reset_block_lengths
op	293:27	0:0	2	=
water	293:29	0:0	2	1
water	293:30	0:0	2	;
if	294:4	328:4	2	(s -> use_noise_coding)
cond	294:8	294:11	3	s -> use_noise_coding
water	294:8	0:0	4	s
op	294:9	0:0	4	->
water	294:11	0:0	4	use_noise_coding
stmts	295:4	328:4	3	
water	295:4	0:0	4	{
if	297:8	301:8	4	(s -> use_exp_vlc)
cond	297:12	297:15	5	s -> use_exp_vlc
water	297:12	0:0	6	s
op	297:13	0:0	6	->
water	297:15	0:0	6	use_exp_vlc
stmts	298:8	301:8	5	
water	298:8	0:0	6	{
water	299:12	0:0	6	s
op	299:13	0:0	6	->
water	299:15	0:0	6	noise_mult
op	299:26	0:0	6	=
water	299:28	0:0	6	0
water	299:29	0:0	6	x51f
water	299:33	0:0	6	;
water	300:12	0:0	6	s
op	300:13	0:0	6	->
water	300:15	0:0	6	noise_table
op	300:27	0:0	6	=
water	300:29	0:0	6	noisetable_exp
water	300:43	0:0	6	;
water	301:8	0:0	6	}
else	302:8	309:8	4
stmts	303:8	309:8	5	
water	303:8	0:0	6	{
water	304:12	0:0	6	s
op	304:13	0:0	6	->
water	304:15	0:0	6	noise_mult
op	304:26	0:0	6	=
water	304:28	0:0	6	0
water	304:29	0:0	6	xa3d
water	304:33	0:0	6	;
for	306:12	307:57	6	(i = 0 ;i < NOISE_TAB_SIZE;++ i)
forinit	306:17	306:20	7	i = 0 ;
water	306:17	0:0	8	i
op	306:18	0:0	8	=
water	306:19	0:0	8	0
water	306:20	0:0	8	;
cond	306:21	306:23	7	i < NOISE_TAB_SIZE
water	306:21	0:0	8	i
op	306:22	0:0	8	<
water	306:23	0:0	8	NOISE_TAB_SIZE
forexpr	306:38	306:40	7	++ i
op	306:38	0:0	8	++
water	306:40	0:0	8	i
stmts	307:16	307:57	7	
water	307:16	0:0	8	noisetable_exp
op	307:30	0:0	8	[
water	307:31	0:0	8	i
op	307:32	0:0	8	]
op	307:34	0:0	8	=
water	307:36	0:0	8	noisetable_exp
op	307:50	0:0	8	[
water	307:51	0:0	8	i
op	307:52	0:0	8	]
op	307:53	0:0	8	<<
water	307:56	0:0	8	1
water	307:57	0:0	8	;
water	308:12	0:0	6	s
op	308:13	0:0	6	->
water	308:15	0:0	6	noise_table
op	308:27	0:0	6	=
water	308:29	0:0	6	noisetable_exp
water	308:43	0:0	6	;
water	309:8	0:0	6	}
water	311:8	0:0	4	{
decl	312:12	312:29	4	unsigned int	seed
decl	313:12	313:24	4	int32_t	norm
water	314:12	0:0	4	seed
op	314:17	0:0	4	=
water	314:19	0:0	4	1
water	314:20	0:0	4	;
water	315:12	0:0	4	norm
op	315:17	0:0	4	=
water	315:19	0:0	4	0
water	315:20	0:0	4	;
for	316:12	320:12	4	(i = 0 ;i < NOISE_TAB_SIZE;++ i)
forinit	316:17	316:20	5	i = 0 ;
water	316:17	0:0	6	i
op	316:18	0:0	6	=
water	316:19	0:0	6	0
water	316:20	0:0	6	;
cond	316:21	316:23	5	i < NOISE_TAB_SIZE
water	316:21	0:0	6	i
op	316:22	0:0	6	<
water	316:23	0:0	6	NOISE_TAB_SIZE
forexpr	316:38	316:40	5	++ i
op	316:38	0:0	6	++
water	316:40	0:0	6	i
stmts	317:12	320:12	5	
water	317:12	0:0	6	{
water	318:16	0:0	6	seed
op	318:21	0:0	6	=
water	318:23	0:0	6	seed
op	318:28	0:0	6	*
water	318:30	0:0	6	314159
op	318:37	0:0	6	+
water	318:39	0:0	6	1
water	318:40	0:0	6	;
water	319:16	0:0	6	s
op	319:17	0:0	6	->
water	319:19	0:0	6	noise_table
op	319:30	0:0	6	[
water	319:31	0:0	6	i
op	319:32	0:0	6	]
op	319:34	0:0	6	=
call	319:36	319:54	6	itofix32
arg	319:45	319:54	7	(int)seed
water	319:45	0:0	8	(
water	319:46	0:0	8	int
water	319:49	0:0	8	)
water	319:50	0:0	8	seed
op	319:56	0:0	6	*
water	319:58	0:0	6	norm
water	319:62	0:0	6	;
water	320:12	0:0	6	}
water	321:8	0:0	4	}
water	323:9	0:0	4	s
op	323:10	0:0	4	->
water	323:12	0:0	4	hgain_vlc
op	323:21	0:0	4	.
water	323:22	0:0	4	table
op	323:28	0:0	4	=
water	323:30	0:0	4	vlcbuf4
water	323:37	0:0	4	;
water	324:9	0:0	4	s
op	324:10	0:0	4	->
water	324:12	0:0	4	hgain_vlc
op	324:21	0:0	4	.
water	324:22	0:0	4	table_allocated
op	324:38	0:0	4	=
water	324:40	0:0	4	VLCBUF4SIZE
water	324:51	0:0	4	;
call	325:9	327:42	4	init_vlc
arg	325:18	325:31	5	&s->hgain_vlc
op	325:18	0:0	6	&
water	325:19	0:0	6	s
op	325:20	0:0	6	->
water	325:22	0:0	6	hgain_vlc
arg	325:33	325:45	5	HGAINVLCBITS
water	325:33	0:0	6	HGAINVLCBITS
arg	325:47	325:69	5	sizeof(hgain_huffbits)
op	325:47	0:0	6	sizeof
water	325:53	0:0	6	(
water	325:54	0:0	6	hgain_huffbits
water	325:68	0:0	6	)
arg	326:18	326:32	5	hgain_huffbits
water	326:18	0:0	6	hgain_huffbits
arg	326:34	326:35	5	1
water	326:34	0:0	6	1
arg	326:37	326:38	5	1
water	326:37	0:0	6	1
arg	327:18	327:33	5	hgain_huffcodes
water	327:18	0:0	6	hgain_huffcodes
arg	327:35	327:36	5	2
water	327:35	0:0	6	2
arg	327:38	327:39	5	2
water	327:38	0:0	6	2
arg	327:41	327:42	5	0
water	327:41	0:0	6	0
water	327:43	0:0	4	;
water	328:4	0:0	4	}
if	329:4	336:4	2	(s -> use_exp_vlc)
cond	329:8	329:11	3	s -> use_exp_vlc
water	329:8	0:0	4	s
op	329:9	0:0	4	->
water	329:11	0:0	4	use_exp_vlc
stmts	330:4	336:4	3	
water	330:4	0:0	4	{
water	331:8	0:0	4	s
op	331:9	0:0	4	->
water	331:11	0:0	4	exp_vlc
op	331:18	0:0	4	.
water	331:19	0:0	4	table
op	331:25	0:0	4	=
water	331:27	0:0	4	vlcbuf3
water	331:34	0:0	4	;
water	332:8	0:0	4	s
op	332:9	0:0	4	->
water	332:11	0:0	4	exp_vlc
op	332:18	0:0	4	.
water	332:19	0:0	4	table_allocated
op	332:35	0:0	4	=
water	332:37	0:0	4	VLCBUF3SIZE
water	332:48	0:0	4	;
call	333:9	335:42	4	init_vlc
arg	333:18	333:29	5	&s->exp_vlc
op	333:18	0:0	6	&
water	333:19	0:0	6	s
op	333:20	0:0	6	->
water	333:22	0:0	6	exp_vlc
arg	333:31	333:41	5	EXPVLCBITS
water	333:31	0:0	6	EXPVLCBITS
arg	333:43	333:65	5	sizeof(scale_huffbits)
op	333:43	0:0	6	sizeof
water	333:49	0:0	6	(
water	333:50	0:0	6	scale_huffbits
water	333:64	0:0	6	)
arg	334:18	334:32	5	scale_huffbits
water	334:18	0:0	6	scale_huffbits
arg	334:34	334:35	5	1
water	334:34	0:0	6	1
arg	334:37	334:38	5	1
water	334:37	0:0	6	1
arg	335:18	335:33	5	scale_huffcodes
water	335:18	0:0	6	scale_huffcodes
arg	335:35	335:36	5	4
water	335:35	0:0	6	4
arg	335:38	335:39	5	4
water	335:38	0:0	6	4
arg	335:41	335:42	5	0
water	335:41	0:0	6	0
water	335:43	0:0	4	;
water	336:4	0:0	4	}
else	337:4	340:4	2
stmts	338:4	340:4	3	
water	338:4	0:0	4	{
call	339:8	339:45	4	wma_lsp_to_curve_init
arg	339:30	339:31	5	s
water	339:30	0:0	6	s
arg	339:33	339:45	5	s->frame_len
water	339:33	0:0	6	s
op	339:34	0:0	6	->
water	339:36	0:0	6	frame_len
water	339:46	0:0	4	;
water	340:4	0:0	4	}
water	342:4	0:0	2	coef_vlc_table
op	342:19	0:0	2	=
water	342:21	0:0	2	2
water	342:22	0:0	2	;
if	343:4	349:4	2	(s -> sample_rate >= 32000)
cond	343:8	343:26	3	s -> sample_rate >= 32000
water	343:8	0:0	4	s
op	343:9	0:0	4	->
water	343:11	0:0	4	sample_rate
op	343:23	0:0	4	>=
water	343:26	0:0	4	32000
stmts	344:4	349:4	3	
water	344:4	0:0	4	{
if	345:8	346:30	4	(bps1 < 0 xb852)
cond	345:12	345:20	5	bps1 < 0 xb852
water	345:12	0:0	6	bps1
op	345:17	0:0	6	<
water	345:19	0:0	6	0
water	345:20	0:0	6	xb852
stmts	346:12	346:30	5	
water	346:12	0:0	6	coef_vlc_table
op	346:27	0:0	6	=
water	346:29	0:0	6	0
water	346:30	0:0	6	;
else	347:8	348:30	4
stmts	347:13	348:30	5	
if	347:13	348:30	6	(bps1 < 0 x128f6)
cond	347:17	347:25	7	bps1 < 0 x128f6
water	347:17	0:0	8	bps1
op	347:22	0:0	8	<
water	347:24	0:0	8	0
water	347:25	0:0	8	x128f6
stmts	348:12	348:30	7	
water	348:12	0:0	8	coef_vlc_table
op	348:27	0:0	8	=
water	348:29	0:0	8	1
water	348:30	0:0	8	;
water	349:4	0:0	4	}
water	350:4	0:0	2	runtabarray
op	350:15	0:0	2	[
water	350:16	0:0	2	0
op	350:17	0:0	2	]
op	350:19	0:0	2	=
water	350:21	0:0	2	runtab0
water	350:28	0:0	2	;
water	350:30	0:0	2	runtabarray
op	350:41	0:0	2	[
water	350:42	0:0	2	1
op	350:43	0:0	2	]
op	350:45	0:0	2	=
water	350:47	0:0	2	runtab1
water	350:54	0:0	2	;
water	351:4	0:0	2	levtabarray
op	351:15	0:0	2	[
water	351:16	0:0	2	0
op	351:17	0:0	2	]
op	351:19	0:0	2	=
water	351:21	0:0	2	levtab0
water	351:28	0:0	2	;
water	351:30	0:0	2	levtabarray
op	351:41	0:0	2	[
water	351:42	0:0	2	1
op	351:43	0:0	2	]
op	351:45	0:0	2	=
water	351:47	0:0	2	levtab1
water	351:54	0:0	2	;
water	352:4	0:0	2	s
op	352:5	0:0	2	->
water	352:7	0:0	2	coef_vlc
op	352:15	0:0	2	[
water	352:16	0:0	2	0
op	352:17	0:0	2	]
op	352:18	0:0	2	.
water	352:19	0:0	2	table
op	352:25	0:0	2	=
water	352:27	0:0	2	vlcbuf1
water	352:34	0:0	2	;
water	353:4	0:0	2	s
op	353:5	0:0	2	->
water	353:7	0:0	2	coef_vlc
op	353:15	0:0	2	[
water	353:16	0:0	2	0
op	353:17	0:0	2	]
op	353:18	0:0	2	.
water	353:19	0:0	2	table_allocated
op	353:35	0:0	2	=
water	353:37	0:0	2	VLCBUF1SIZE
water	353:48	0:0	2	;
water	354:4	0:0	2	s
op	354:5	0:0	2	->
water	354:7	0:0	2	coef_vlc
op	354:15	0:0	2	[
water	354:16	0:0	2	1
op	354:17	0:0	2	]
op	354:18	0:0	2	.
water	354:19	0:0	2	table
op	354:25	0:0	2	=
water	354:27	0:0	2	vlcbuf2
water	354:34	0:0	2	;
water	355:4	0:0	2	s
op	355:5	0:0	2	->
water	355:7	0:0	2	coef_vlc
op	355:15	0:0	2	[
water	355:16	0:0	2	1
op	355:17	0:0	2	]
op	355:18	0:0	2	.
water	355:19	0:0	2	table_allocated
op	355:35	0:0	2	=
water	355:37	0:0	2	VLCBUF2SIZE
water	355:48	0:0	2	;
call	356:4	357:51	2	init_coef_vlc
arg	356:18	356:33	3	&s->coef_vlc[0]
op	356:18	0:0	4	&
water	356:19	0:0	4	s
op	356:20	0:0	4	->
water	356:22	0:0	4	coef_vlc
op	356:30	0:0	4	[
water	356:31	0:0	4	0
op	356:32	0:0	4	]
arg	356:35	356:51	3	&s->run_table[0]
op	356:35	0:0	4	&
water	356:36	0:0	4	s
op	356:37	0:0	4	->
water	356:39	0:0	4	run_table
op	356:48	0:0	4	[
water	356:49	0:0	4	0
op	356:50	0:0	4	]
arg	356:53	356:71	3	&s->level_table[0]
op	356:53	0:0	4	&
water	356:54	0:0	4	s
op	356:55	0:0	4	->
water	356:57	0:0	4	level_table
op	356:68	0:0	4	[
water	356:69	0:0	4	0
op	356:70	0:0	4	]
arg	357:18	357:48	3	&coef_vlcs[coef_vlc_table*2]
op	357:18	0:0	4	&
water	357:19	0:0	4	coef_vlcs
op	357:28	0:0	4	[
water	357:29	0:0	4	coef_vlc_table
op	357:44	0:0	4	*
water	357:46	0:0	4	2
op	357:47	0:0	4	]
arg	357:50	357:51	3	0
water	357:50	0:0	4	0
water	357:52	0:0	2	;
call	358:4	359:55	2	init_coef_vlc
arg	358:18	358:33	3	&s->coef_vlc[1]
op	358:18	0:0	4	&
water	358:19	0:0	4	s
op	358:20	0:0	4	->
water	358:22	0:0	4	coef_vlc
op	358:30	0:0	4	[
water	358:31	0:0	4	1
op	358:32	0:0	4	]
arg	358:35	358:51	3	&s->run_table[1]
op	358:35	0:0	4	&
water	358:36	0:0	4	s
op	358:37	0:0	4	->
water	358:39	0:0	4	run_table
op	358:48	0:0	4	[
water	358:49	0:0	4	1
op	358:50	0:0	4	]
arg	358:53	358:71	3	&s->level_table[1]
op	358:53	0:0	4	&
water	358:54	0:0	4	s
op	358:55	0:0	4	->
water	358:57	0:0	4	level_table
op	358:68	0:0	4	[
water	358:69	0:0	4	1
op	358:70	0:0	4	]
arg	359:18	359:52	3	&coef_vlcs[coef_vlc_table*2+1]
op	359:18	0:0	4	&
water	359:19	0:0	4	coef_vlcs
op	359:28	0:0	4	[
water	359:29	0:0	4	coef_vlc_table
op	359:44	0:0	4	*
water	359:46	0:0	4	2
op	359:48	0:0	4	+
water	359:50	0:0	4	1
op	359:51	0:0	4	]
arg	359:54	359:55	3	1
water	359:54	0:0	4	1
water	359:56	0:0	2	;
water	360:4	0:0	2	s
op	360:5	0:0	2	->
water	360:7	0:0	2	last_superframe_len
op	360:27	0:0	2	=
water	360:29	0:0	2	0
water	360:30	0:0	2	;
water	361:4	0:0	2	s
op	361:5	0:0	2	->
water	361:7	0:0	2	last_bitoffset
op	361:22	0:0	2	=
water	361:24	0:0	2	0
water	361:25	0:0	2	;
return	362:4	362:12	2	0
water	362:11	0:0	3	0
