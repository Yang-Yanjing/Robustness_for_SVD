func	2:0	156:0	0	static void	EsOutUpdateInfo
params	2:27	0:0	1	
param	2:29	2:42	2	es_out_t *	out
param	2:44	2:59	2	es_out_id_t *	es
param	2:61	2:83	2	const es_format_t *	fmt
param	2:85	2:110	2	const vlc_meta_t *	p_meta
stmnts	0:0	155:56	1	
decl	4:4	4:38	2	es_out_sys_t	*p_sys
op	4:26	0:0	2	=
water	4:28	0:0	2	out
op	4:31	0:0	2	->
water	4:33	0:0	2	p_sys
decl	5:4	5:44	2	input_thread_t	*p_input
op	5:28	0:0	2	=
water	5:30	0:0	2	p_sys
op	5:35	0:0	2	->
water	5:37	0:0	2	p_input
decl	6:4	6:42	2	const es_format_t	*p_fmt_es
op	6:32	0:0	2	=
op	6:34	0:0	2	&
water	6:35	0:0	2	es
op	6:37	0:0	2	->
water	6:39	0:0	2	fmt
decl	7:4	7:23	2	lldiv_t	div
if	8:4	15:4	2	(es -> fmt . i_cat == fmt -> i_cat)
cond	8:8	8:30	3	es -> fmt . i_cat == fmt -> i_cat
water	8:8	0:0	4	es
op	8:10	0:0	4	->
water	8:12	0:0	4	fmt
op	8:15	0:0	4	.
water	8:16	0:0	4	i_cat
op	8:22	0:0	4	==
water	8:25	0:0	4	fmt
op	8:28	0:0	4	->
water	8:30	0:0	4	i_cat
stmts	9:4	15:4	3	
water	9:4	0:0	4	{
decl	10:8	10:33	4	es_format_t	update
op	10:27	0:0	4	=
op	10:29	0:0	4	*
water	10:30	0:0	4	fmt
water	11:8	0:0	4	update
op	11:14	0:0	4	.
water	11:15	0:0	4	i_id
op	11:20	0:0	4	=
water	11:22	0:0	4	es
op	11:24	0:0	4	->
water	11:26	0:0	4	i_meta_id
water	11:35	0:0	4	;
water	12:8	0:0	4	update
op	12:14	0:0	4	.
water	12:15	0:0	4	i_codec
op	12:23	0:0	4	=
water	12:25	0:0	4	es
op	12:27	0:0	4	->
water	12:29	0:0	4	fmt
op	12:32	0:0	4	.
water	12:33	0:0	4	i_codec
water	12:40	0:0	4	;
water	13:8	0:0	4	update
op	13:14	0:0	4	.
water	13:15	0:0	4	i_original_fourcc
op	13:33	0:0	4	=
water	13:35	0:0	4	es
op	13:37	0:0	4	->
water	13:39	0:0	4	fmt
op	13:42	0:0	4	.
water	13:43	0:0	4	i_original_fourcc
water	13:60	0:0	4	;
call	14:8	14:67	4	input_item_UpdateTracksInfo
arg	14:36	14:58	5	input_GetItem(p_input)
call	14:36	14:57	6	input_GetItem
arg	14:50	14:57	7	p_input
water	14:50	0:0	8	p_input
arg	14:60	14:67	5	&update
op	14:60	0:0	6	&
water	14:61	0:0	6	update
water	14:68	0:0	4	;
water	15:4	0:0	4	}
decl	17:4	17:21	2	char	psz_cat[128]
call	18:4	18:69	2	snprintf
arg	18:14	18:21	3	psz_cat
water	18:14	0:0	4	psz_cat
arg	18:23	18:38	3	sizeof(psz_cat)
op	18:23	0:0	4	sizeof
water	18:29	0:0	4	(
water	18:30	0:0	4	psz_cat
water	18:37	0:0	4	)
arg	18:39	18:53	3	_("Stream %d")
call	18:39	18:52	4	_
arg	18:41	18:52	5	"Stream %d"
water	18:41	0:0	6	"Stream %d"
arg	18:55	18:69	3	es->i_meta_id
water	18:55	0:0	4	es
op	18:57	0:0	4	->
water	18:59	0:0	4	i_meta_id
water	18:70	0:0	2	;
decl	19:4	19:57	2	info_category_t	*p_cat
op	19:27	0:0	2	=
call	19:29	19:56	3	info_category_New
arg	19:48	19:56	4	psz_cat
water	19:48	0:0	5	psz_cat
if	20:4	21:14	2	(! p_cat)
cond	20:8	20:9	3	! p_cat
op	20:8	0:0	4	!
water	20:9	0:0	4	p_cat
stmts	21:8	21:14	3	
return	21:8	21:14	4	
decl	23:4	23:24	2	const char	*psz_type
switch	24:4	38:4	2	(fmt -> i_cat)
cond	24:12	24:17	3	fmt -> i_cat
water	24:12	0:0	4	fmt
op	24:15	0:0	4	->
water	24:17	0:0	4	i_cat
stmts	25:4	38:4	3	
water	25:4	0:0	4	{
label	26:4	26:17	4	case AUDIO_ES :
water	27:8	0:0	4	psz_type
op	27:17	0:0	4	=
call	27:19	27:28	4	_
arg	27:21	27:28	5	"Audio"
water	27:21	0:0	6	"Audio"
water	27:29	0:0	4	;
break	28:8	28:13	4	
label	29:4	29:17	4	case VIDEO_ES :
water	30:8	0:0	4	psz_type
op	30:17	0:0	4	=
call	30:19	30:28	4	_
arg	30:21	30:28	5	"Video"
water	30:21	0:0	6	"Video"
water	30:29	0:0	4	;
break	31:8	31:13	4	
label	32:4	32:15	4	case SPU_ES :
water	33:8	0:0	4	psz_type
op	33:17	0:0	4	=
call	33:19	33:31	4	_
arg	33:21	33:31	5	"Subtitle"
water	33:21	0:0	6	"Subtitle"
water	33:32	0:0	4	;
break	34:8	34:13	4	
label	35:4	35:11	4	default :
water	36:8	0:0	4	psz_type
op	36:17	0:0	4	=
water	36:19	0:0	4	NULL
water	36:23	0:0	4	;
break	37:8	37:13	4	
water	38:4	0:0	4	}
if	39:4	40:65	2	(psz_type)
cond	39:8	39:8	3	psz_type
water	39:8	0:0	4	psz_type
stmts	40:8	40:65	3	
call	40:8	40:64	4	info_category_AddInfo
arg	40:31	40:36	5	p_cat
water	40:31	0:0	6	p_cat
arg	40:38	40:47	5	_("Type")
call	40:38	40:46	6	_
arg	40:40	40:46	7	"Type"
water	40:40	0:0	8	"Type"
arg	40:49	40:53	5	"%s"
water	40:49	0:0	6	"%s"
arg	40:55	40:64	5	psz_type
water	40:55	0:0	6	psz_type
water	40:65	0:0	4	;
if	41:4	43:39	2	(es -> i_meta_id != es -> i_id)
cond	41:8	41:29	3	es -> i_meta_id != es -> i_id
water	41:8	0:0	4	es
op	41:10	0:0	4	->
water	41:12	0:0	4	i_meta_id
op	41:22	0:0	4	!=
water	41:25	0:0	4	es
op	41:27	0:0	4	->
water	41:29	0:0	4	i_id
stmts	42:8	43:39	3	
call	42:8	43:38	4	info_category_AddInfo
arg	42:31	42:36	5	p_cat
water	42:31	0:0	6	p_cat
arg	42:38	42:54	5	_("Original ID")
call	42:38	42:53	6	_
arg	42:40	42:53	7	"Original ID"
water	42:40	0:0	8	"Original ID"
arg	43:23	43:27	5	"%d"
water	43:23	0:0	6	"%d"
arg	43:29	43:38	5	es->i_id
water	43:29	0:0	6	es
op	43:31	0:0	6	->
water	43:33	0:0	6	i_id
water	43:39	0:0	4	;
decl	44:4	45:71	2	const char	*psz_codec_description
op	44:38	0:0	2	=
call	45:8	45:70	3	vlc_fourcc_GetDescription
arg	45:35	45:50	4	p_fmt_es->i_cat
water	45:35	0:0	5	p_fmt_es
op	45:43	0:0	5	->
water	45:45	0:0	5	i_cat
arg	45:52	45:70	4	p_fmt_es->i_codec
water	45:52	0:0	5	p_fmt_es
op	45:60	0:0	5	->
water	45:62	0:0	5	i_codec
decl	46:4	47:78	2	const vlc_fourcc_t	i_codec_fourcc
op	46:38	0:0	2	=
water	46:40	0:0	2	(
water	46:42	0:0	2	p_fmt_es
op	46:50	0:0	2	->
water	46:52	0:0	2	i_original_fourcc
water	46:70	0:0	2	)
water	46:71	0:0	2	?
water	47:31	0:0	2	p_fmt_es
op	47:39	0:0	2	->
water	47:41	0:0	2	i_original_fourcc
water	47:59	0:0	2	:
water	47:61	0:0	2	p_fmt_es
op	47:69	0:0	2	->
water	47:71	0:0	2	i_codec
if	48:4	50:78	2	(psz_codec_description && * psz_codec_description)
cond	48:8	48:34	3	psz_codec_description && * psz_codec_description
water	48:8	0:0	4	psz_codec_description
op	48:30	0:0	4	&&
op	48:33	0:0	4	*
water	48:34	0:0	4	psz_codec_description
stmts	49:8	50:78	3	
call	49:8	50:77	4	info_category_AddInfo
arg	49:31	49:36	5	p_cat
water	49:31	0:0	6	p_cat
arg	49:38	49:48	5	_("Codec")
call	49:38	49:47	6	_
arg	49:40	49:47	7	"Codec"
water	49:40	0:0	8	"Codec"
arg	49:50	49:61	5	"%s (%.4s)"
water	49:50	0:0	6	"%s (%.4s)"
arg	50:31	50:52	5	psz_codec_description
water	50:31	0:0	6	psz_codec_description
arg	50:54	50:77	5	(char*)&i_codec_fourcc
water	50:54	0:0	6	(
water	50:55	0:0	6	char
op	50:59	0:0	6	*
water	50:60	0:0	6	)
op	50:61	0:0	6	&
water	50:62	0:0	6	i_codec_fourcc
water	50:78	0:0	4	;
else	51:4	53:55	2
stmts	51:9	53:55	3	
if	51:9	53:55	4	(i_codec_fourcc !=VLC_FOURCC (0 ,0 ,0 ,0 ))
cond	51:14	51:50	5	i_codec_fourcc !=VLC_FOURCC (0 ,0 ,0 ,0 )
water	51:14	0:0	6	i_codec_fourcc
op	51:29	0:0	6	!=
call	51:32	51:50	6	VLC_FOURCC
arg	51:43	51:44	7	0
water	51:43	0:0	8	0
arg	51:45	51:46	7	0
water	51:45	0:0	8	0
arg	51:47	51:48	7	0
water	51:47	0:0	8	0
arg	51:49	51:50	7	0
water	51:49	0:0	8	0
stmts	52:8	53:55	5	
call	52:8	53:54	6	info_category_AddInfo
arg	52:31	52:36	7	p_cat
water	52:31	0:0	8	p_cat
arg	52:38	52:48	7	_("Codec")
call	52:38	52:47	8	_
arg	52:40	52:47	9	"Codec"
water	52:40	0:0	10	"Codec"
arg	52:50	52:56	7	"%.4s"
water	52:50	0:0	8	"%.4s"
arg	53:31	53:54	7	(char*)&i_codec_fourcc
water	53:31	0:0	8	(
water	53:32	0:0	8	char
op	53:36	0:0	8	*
water	53:37	0:0	8	)
op	53:38	0:0	8	&
water	53:39	0:0	8	i_codec_fourcc
water	53:55	0:0	6	;
if	54:4	56:49	2	(es -> psz_language && * es -> psz_language)
cond	54:8	54:33	3	es -> psz_language && * es -> psz_language
water	54:8	0:0	4	es
op	54:10	0:0	4	->
water	54:12	0:0	4	psz_language
op	54:25	0:0	4	&&
op	54:28	0:0	4	*
water	54:29	0:0	4	es
op	54:31	0:0	4	->
water	54:33	0:0	4	psz_language
stmts	55:8	56:49	3	
call	55:8	56:48	4	info_category_AddInfo
arg	55:31	55:36	5	p_cat
water	55:31	0:0	6	p_cat
arg	55:38	55:51	5	_("Language")
call	55:38	55:50	6	_
arg	55:40	55:50	7	"Language"
water	55:40	0:0	8	"Language"
arg	55:53	55:57	5	"%s"
water	55:53	0:0	6	"%s"
arg	56:31	56:48	5	es->psz_language
water	56:31	0:0	6	es
op	56:33	0:0	6	->
water	56:35	0:0	6	psz_language
water	56:49	0:0	4	;
if	57:4	59:53	2	(fmt -> psz_description && * fmt -> psz_description)
cond	57:8	57:38	3	fmt -> psz_description && * fmt -> psz_description
water	57:8	0:0	4	fmt
op	57:11	0:0	4	->
water	57:13	0:0	4	psz_description
op	57:29	0:0	4	&&
op	57:32	0:0	4	*
water	57:33	0:0	4	fmt
op	57:36	0:0	4	->
water	57:38	0:0	4	psz_description
stmts	58:8	59:53	3	
call	58:8	59:52	4	info_category_AddInfo
arg	58:31	58:36	5	p_cat
water	58:31	0:0	6	p_cat
arg	58:38	58:54	5	_("Description")
call	58:38	58:53	6	_
arg	58:40	58:53	7	"Description"
water	58:40	0:0	8	"Description"
arg	58:56	58:60	5	"%s"
water	58:56	0:0	6	"%s"
arg	59:31	59:52	5	fmt->psz_description
water	59:31	0:0	6	fmt
op	59:34	0:0	6	->
water	59:36	0:0	6	psz_description
water	59:53	0:0	4	;
switch	60:4	138:4	2	(fmt -> i_cat)
cond	60:12	60:17	3	fmt -> i_cat
water	60:12	0:0	4	fmt
op	60:15	0:0	4	->
water	60:17	0:0	4	i_cat
stmts	61:4	138:4	3	
water	61:4	0:0	4	{
label	62:4	62:17	4	case AUDIO_ES :
call	63:8	63:60	4	info_category_AddInfo
arg	63:31	63:36	5	p_cat
water	63:31	0:0	6	p_cat
arg	63:38	63:47	5	_("Type")
call	63:38	63:46	6	_
arg	63:40	63:46	7	"Type"
water	63:40	0:0	8	"Type"
arg	63:49	63:60	5	_("Audio")
call	63:49	63:58	6	_
arg	63:51	63:58	7	"Audio"
water	63:51	0:0	8	"Audio"
water	63:61	0:0	4	;
if	64:8	66:81	4	(fmt -> audio . i_physical_channels)
cond	64:12	64:23	5	fmt -> audio . i_physical_channels
water	64:12	0:0	6	fmt
op	64:15	0:0	6	->
water	64:17	0:0	6	audio
op	64:22	0:0	6	.
water	64:23	0:0	6	i_physical_channels
stmts	65:12	66:81	5	
call	65:12	66:80	6	info_category_AddInfo
arg	65:35	65:40	7	p_cat
water	65:35	0:0	8	p_cat
arg	65:42	65:55	7	_("Channels")
call	65:42	65:54	8	_
arg	65:44	65:54	9	"Channels"
water	65:44	0:0	10	"Channels"
arg	65:57	65:61	7	"%s"
water	65:57	0:0	8	"%s"
arg	66:35	66:80	7	_(aout_FormatPrintChannels(&fmt->audio))
call	66:35	66:78	8	_
arg	66:38	66:78	9	aout_FormatPrintChannels(&fmt->audio)
call	66:38	66:76	10	aout_FormatPrintChannels
arg	66:64	66:76	11	&fmt->audio
op	66:64	0:0	12	&
water	66:65	0:0	12	fmt
op	66:68	0:0	12	->
water	66:70	0:0	12	audio
water	66:81	0:0	6	;
if	67:8	73:8	4	(fmt -> audio . i_rate > 0)
cond	67:12	67:32	5	fmt -> audio . i_rate > 0
water	67:12	0:0	6	fmt
op	67:15	0:0	6	->
water	67:17	0:0	6	audio
op	67:22	0:0	6	.
water	67:23	0:0	6	i_rate
op	67:30	0:0	6	>
water	67:32	0:0	6	0
stmts	68:8	73:8	5	
water	68:8	0:0	6	{
call	69:12	70:53	6	info_category_AddInfo
arg	69:35	69:40	7	p_cat
water	69:35	0:0	8	p_cat
arg	69:42	69:58	7	_("Sample rate")
call	69:42	69:57	8	_
arg	69:44	69:57	9	"Sample rate"
water	69:44	0:0	10	"Sample rate"
arg	69:60	69:70	7	_("%u Hz")
call	69:60	69:69	8	_
arg	69:62	69:69	9	"%u Hz"
water	69:62	0:0	10	"%u Hz"
arg	70:35	70:53	7	fmt->audio.i_rate
water	70:35	0:0	8	fmt
op	70:38	0:0	8	->
water	70:40	0:0	8	audio
op	70:45	0:0	8	.
water	70:46	0:0	8	i_rate
water	70:54	0:0	6	;
call	72:12	72:70	6	var_SetInteger
arg	72:28	72:35	7	p_input
water	72:28	0:0	8	p_input
arg	72:37	72:50	7	"sample-rate"
water	72:37	0:0	8	"sample-rate"
arg	72:52	72:70	7	fmt->audio.i_rate
water	72:52	0:0	8	fmt
op	72:55	0:0	8	->
water	72:57	0:0	8	audio
op	72:62	0:0	8	.
water	72:63	0:0	8	i_rate
water	72:71	0:0	6	;
water	73:8	0:0	6	}
decl	74:8	74:65	4	unsigned int	i_bitspersample
op	74:37	0:0	4	=
water	74:39	0:0	4	fmt
op	74:42	0:0	4	->
water	74:44	0:0	4	audio
op	74:49	0:0	4	.
water	74:50	0:0	4	i_bitspersample
if	75:8	76:69	4	(i_bitspersample <= 0)
cond	75:12	75:31	5	i_bitspersample <= 0
water	75:12	0:0	6	i_bitspersample
op	75:28	0:0	6	<=
water	75:31	0:0	6	0
stmts	76:12	76:69	5	
water	76:12	0:0	6	i_bitspersample
op	76:28	0:0	6	=
call	76:30	76:68	6	aout_BitsPerSample
arg	76:50	76:68	7	p_fmt_es->i_codec
water	76:50	0:0	8	p_fmt_es
op	76:58	0:0	8	->
water	76:60	0:0	8	i_codec
water	76:69	0:0	6	;
if	77:8	79:52	4	(i_bitspersample > 0)
cond	77:12	77:30	5	i_bitspersample > 0
water	77:12	0:0	6	i_bitspersample
op	77:28	0:0	6	>
water	77:30	0:0	6	0
stmts	78:12	79:52	5	
call	78:12	79:51	6	info_category_AddInfo
arg	78:35	78:40	7	p_cat
water	78:35	0:0	8	p_cat
arg	78:42	78:62	7	_("Bits per sample")
call	78:42	78:61	8	_
arg	78:44	78:61	9	"Bits per sample"
water	78:44	0:0	10	"Bits per sample"
arg	78:64	78:68	7	"%u"
water	78:64	0:0	8	"%u"
arg	79:35	79:51	7	i_bitspersample
water	79:35	0:0	8	i_bitspersample
water	79:52	0:0	6	;
if	80:8	86:8	4	(fmt -> i_bitrate > 0)
cond	80:12	80:29	5	fmt -> i_bitrate > 0
water	80:12	0:0	6	fmt
op	80:15	0:0	6	->
water	80:17	0:0	6	i_bitrate
op	80:27	0:0	6	>
water	80:29	0:0	6	0
stmts	81:8	86:8	5	
water	81:8	0:0	6	{
call	82:12	83:57	6	info_category_AddInfo
arg	82:35	82:40	7	p_cat
water	82:35	0:0	8	p_cat
arg	82:42	82:54	7	_("Bitrate")
call	82:42	82:53	8	_
arg	82:44	82:53	9	"Bitrate"
water	82:44	0:0	10	"Bitrate"
arg	82:56	82:68	7	_("%u kb/s")
call	82:56	82:67	8	_
arg	82:58	82:67	9	"%u kb/s"
water	82:58	0:0	10	"%u kb/s"
arg	83:35	83:57	7	fmt->i_bitrate/1000
water	83:35	0:0	8	fmt
op	83:38	0:0	8	->
water	83:40	0:0	8	i_bitrate
op	83:50	0:0	8	/
water	83:52	0:0	8	1000
water	83:58	0:0	6	;
call	85:12	85:64	6	var_SetInteger
arg	85:28	85:35	7	p_input
water	85:28	0:0	8	p_input
arg	85:37	85:47	7	"bit-rate"
water	85:37	0:0	8	"bit-rate"
arg	85:49	85:64	7	fmt->i_bitrate
water	85:49	0:0	8	fmt
op	85:52	0:0	8	->
water	85:54	0:0	8	i_bitrate
water	85:65	0:0	6	;
water	86:8	0:0	6	}
for	87:8	99:8	4	( int i = 0 ;i < AUDIO_REPLAY_GAIN_MAX;i ++)
forinit	0:0	87:22	5	 int i = 0 ;
decl	87:13	87:22	6	int	i
op	87:19	0:0	6	=
water	87:21	0:0	6	0
cond	87:24	87:28	5	i < AUDIO_REPLAY_GAIN_MAX
water	87:24	0:0	6	i
op	87:26	0:0	6	<
water	87:28	0:0	6	AUDIO_REPLAY_GAIN_MAX
forexpr	87:51	87:52	5	i ++
water	87:51	0:0	6	i
op	87:52	0:0	6	++
stmts	88:8	99:8	5	
water	88:8	0:0	6	{
decl	89:12	89:69	6	const audio_replay_gain_t	*p_rg
op	89:44	0:0	6	=
op	89:46	0:0	6	&
water	89:47	0:0	6	fmt
op	89:50	0:0	6	->
water	89:52	0:0	6	audio_replay_gain
if	90:12	91:24	6	(! p_rg -> pb_gain [ i ])
cond	90:16	90:32	7	! p_rg -> pb_gain [ i ]
op	90:16	0:0	8	!
water	90:17	0:0	8	p_rg
op	90:21	0:0	8	->
water	90:23	0:0	8	pb_gain
op	90:30	0:0	8	[
water	90:31	0:0	8	i
op	90:32	0:0	8	]
stmts	91:16	91:24	7	
continue	91:16	91:24	8	
decl	92:12	92:32	6	const char	*psz_name
if	93:12	94:49	6	(i == AUDIO_REPLAY_GAIN_TRACK)
cond	93:16	93:21	7	i == AUDIO_REPLAY_GAIN_TRACK
water	93:16	0:0	8	i
op	93:18	0:0	8	==
water	93:21	0:0	8	AUDIO_REPLAY_GAIN_TRACK
stmts	94:16	94:49	7	
water	94:16	0:0	8	psz_name
op	94:25	0:0	8	=
call	94:27	94:48	8	_
arg	94:29	94:48	9	"Track replay gain"
water	94:29	0:0	10	"Track replay gain"
water	94:49	0:0	8	;
else	95:12	96:49	6
stmts	96:16	96:49	7	
water	96:16	0:0	8	psz_name
op	96:25	0:0	8	=
call	96:27	96:48	8	_
arg	96:29	96:48	9	"Album replay gain"
water	96:29	0:0	10	"Album replay gain"
water	96:49	0:0	8	;
call	97:12	98:52	6	info_category_AddInfo
arg	97:35	97:40	7	p_cat
water	97:35	0:0	8	p_cat
arg	97:42	97:50	7	psz_name
water	97:42	0:0	8	psz_name
arg	97:52	97:64	7	_("%.2f dB")
call	97:52	97:63	8	_
arg	97:54	97:63	9	"%.2f dB"
water	97:54	0:0	10	"%.2f dB"
arg	98:35	98:52	7	p_rg->pf_gain[i]
water	98:35	0:0	8	p_rg
op	98:39	0:0	8	->
water	98:41	0:0	8	pf_gain
op	98:48	0:0	8	[
water	98:49	0:0	8	i
op	98:50	0:0	8	]
water	98:53	0:0	6	;
water	99:8	0:0	6	}
break	100:8	100:13	4	
label	101:4	101:17	4	case VIDEO_ES :
call	102:8	102:60	4	info_category_AddInfo
arg	102:31	102:36	5	p_cat
water	102:31	0:0	6	p_cat
arg	102:38	102:47	5	_("Type")
call	102:38	102:46	6	_
arg	102:40	102:46	7	"Type"
water	102:40	0:0	8	"Type"
arg	102:49	102:60	5	_("Video")
call	102:49	102:58	6	_
arg	102:51	102:58	7	"Video"
water	102:51	0:0	8	"Video"
water	102:61	0:0	4	;
if	103:8	105:76	4	(fmt -> video . i_width > 0 && fmt -> video . i_height > 0)
cond	103:12	103:60	5	fmt -> video . i_width > 0 && fmt -> video . i_height > 0
water	103:12	0:0	6	fmt
op	103:15	0:0	6	->
water	103:17	0:0	6	video
op	103:22	0:0	6	.
water	103:23	0:0	6	i_width
op	103:31	0:0	6	>
water	103:33	0:0	6	0
op	103:35	0:0	6	&&
water	103:38	0:0	6	fmt
op	103:41	0:0	6	->
water	103:43	0:0	6	video
op	103:48	0:0	6	.
water	103:49	0:0	6	i_height
op	103:58	0:0	6	>
water	103:60	0:0	6	0
stmts	104:12	105:76	5	
call	104:12	105:75	6	info_category_AddInfo
arg	104:35	104:40	7	p_cat
water	104:35	0:0	8	p_cat
arg	104:42	104:57	7	_("Resolution")
call	104:42	104:56	8	_
arg	104:44	104:56	9	"Resolution"
water	104:44	0:0	10	"Resolution"
arg	104:59	104:66	7	"%ux%u"
water	104:59	0:0	8	"%ux%u"
arg	105:35	105:53	7	fmt->video.i_width
water	105:35	0:0	8	fmt
op	105:38	0:0	8	->
water	105:40	0:0	8	video
op	105:45	0:0	8	.
water	105:46	0:0	8	i_width
arg	105:55	105:75	7	fmt->video.i_height
water	105:55	0:0	8	fmt
op	105:58	0:0	8	->
water	105:60	0:0	8	video
op	105:65	0:0	8	.
water	105:66	0:0	8	i_height
water	105:76	0:0	6	;
if	106:8	110:63	4	(fmt -> video . i_visible_width > 0 && fmt -> video . i_visible_height > 0)
cond	106:12	107:42	5	fmt -> video . i_visible_width > 0 && fmt -> video . i_visible_height > 0
water	106:12	0:0	6	fmt
op	106:15	0:0	6	->
water	106:17	0:0	6	video
op	106:22	0:0	6	.
water	106:23	0:0	6	i_visible_width
op	106:39	0:0	6	>
water	106:41	0:0	6	0
op	106:43	0:0	6	&&
water	107:12	0:0	6	fmt
op	107:15	0:0	6	->
water	107:17	0:0	6	video
op	107:22	0:0	6	.
water	107:23	0:0	6	i_visible_height
op	107:40	0:0	6	>
water	107:42	0:0	6	0
stmts	108:12	110:63	5	
call	108:12	110:62	6	info_category_AddInfo
arg	108:35	108:40	7	p_cat
water	108:35	0:0	8	p_cat
arg	108:42	108:65	7	_("Display resolution")
call	108:42	108:64	8	_
arg	108:44	108:64	9	"Display resolution"
water	108:44	0:0	10	"Display resolution"
arg	108:67	108:74	7	"%ux%u"
water	108:67	0:0	8	"%ux%u"
arg	109:35	109:61	7	fmt->video.i_visible_width
water	109:35	0:0	8	fmt
op	109:38	0:0	8	->
water	109:40	0:0	8	video
op	109:45	0:0	8	.
water	109:46	0:0	8	i_visible_width
arg	110:35	110:62	7	fmt->video.i_visible_height
water	110:35	0:0	8	fmt
op	110:38	0:0	8	->
water	110:40	0:0	8	video
op	110:45	0:0	8	.
water	110:46	0:0	8	i_visible_height
water	110:63	0:0	6	;
if	111:7	123:7	4	(fmt -> video . i_frame_rate > 0 && fmt -> video . i_frame_rate_base > 0)
cond	111:11	112:42	5	fmt -> video . i_frame_rate > 0 && fmt -> video . i_frame_rate_base > 0
water	111:11	0:0	6	fmt
op	111:14	0:0	6	->
water	111:16	0:0	6	video
op	111:21	0:0	6	.
water	111:22	0:0	6	i_frame_rate
op	111:35	0:0	6	>
water	111:37	0:0	6	0
op	111:39	0:0	6	&&
water	112:11	0:0	6	fmt
op	112:14	0:0	6	->
water	112:16	0:0	6	video
op	112:21	0:0	6	.
water	112:22	0:0	6	i_frame_rate_base
op	112:40	0:0	6	>
water	112:42	0:0	6	0
stmts	113:7	123:7	5	
water	113:7	0:0	6	{
water	114:11	0:0	6	div
op	114:15	0:0	6	=
call	114:17	116:39	6	lldiv
arg	114:24	115:69	7	(float)fmt->video.i_frame_rate/fmt->video.i_frame_rate_base*1000000
water	114:24	0:0	8	(
water	114:25	0:0	8	float
water	114:30	0:0	8	)
water	114:31	0:0	8	fmt
op	114:34	0:0	8	->
water	114:36	0:0	8	video
op	114:41	0:0	8	.
water	114:42	0:0	8	i_frame_rate
op	114:55	0:0	8	/
water	115:31	0:0	8	fmt
op	115:34	0:0	8	->
water	115:36	0:0	8	video
op	115:41	0:0	8	.
water	115:42	0:0	8	i_frame_rate_base
op	115:60	0:0	8	*
water	115:62	0:0	8	1000000
arg	116:31	116:39	7	1000000
water	116:31	0:0	8	1000000
water	116:40	0:0	6	;
if	117:11	119:72	6	(div . rem > 0)
cond	117:15	117:25	7	div . rem > 0
water	117:15	0:0	8	div
op	117:18	0:0	8	.
water	117:19	0:0	8	rem
op	117:23	0:0	8	>
water	117:25	0:0	8	0
stmts	118:15	119:72	7	
call	118:15	119:71	8	info_category_AddInfo
arg	118:38	118:43	9	p_cat
water	118:38	0:0	10	p_cat
arg	118:45	118:60	9	_("Frame rate")
call	118:45	118:59	10	_
arg	118:47	118:59	11	"Frame rate"
water	118:47	0:0	12	"Frame rate"
arg	118:62	118:78	9	"%"PRId64".%06u"
water	118:62	0:0	10	"%"
water	118:65	0:0	10	PRId64
water	118:71	0:0	10	".%06u"
arg	119:38	119:46	9	div.quot
water	119:38	0:0	10	div
op	119:41	0:0	10	.
water	119:42	0:0	10	quot
arg	119:48	119:71	9	(unsignedint)div.rem
water	119:48	0:0	10	(
water	119:49	0:0	10	unsigned
water	119:58	0:0	10	int
water	119:62	0:0	10	)
water	119:63	0:0	10	div
op	119:66	0:0	10	.
water	119:67	0:0	10	rem
water	119:72	0:0	8	;
else	120:11	122:48	6
stmts	121:15	122:48	7	
call	121:15	122:47	8	info_category_AddInfo
arg	121:38	121:43	9	p_cat
water	121:38	0:0	10	p_cat
arg	121:45	121:60	9	_("Frame rate")
call	121:45	121:59	10	_
arg	121:47	121:59	11	"Frame rate"
water	121:47	0:0	12	"Frame rate"
arg	121:62	121:71	9	"%"PRId64
water	121:62	0:0	10	"%"
water	121:65	0:0	10	PRId64
arg	122:38	122:47	9	div.quot
water	122:38	0:0	10	div
op	122:41	0:0	10	.
water	122:42	0:0	10	quot
water	122:48	0:0	8	;
water	123:7	0:0	6	}
if	124:7	131:7	4	(fmt -> i_codec != p_fmt_es -> i_codec)
cond	124:11	124:37	5	fmt -> i_codec != p_fmt_es -> i_codec
water	124:11	0:0	6	fmt
op	124:14	0:0	6	->
water	124:16	0:0	6	i_codec
op	124:24	0:0	6	!=
water	124:27	0:0	6	p_fmt_es
op	124:35	0:0	6	->
water	124:37	0:0	6	i_codec
stmts	125:7	131:7	5	
water	125:7	0:0	6	{
decl	126:11	127:67	6	const char	*psz_chroma_description
op	126:46	0:0	6	=
call	127:16	127:66	7	vlc_fourcc_GetDescription
arg	127:43	127:51	8	VIDEO_ES
water	127:43	0:0	9	VIDEO_ES
arg	127:53	127:66	8	fmt->i_codec
water	127:53	0:0	9	fmt
op	127:56	0:0	9	->
water	127:58	0:0	9	i_codec
if	128:11	130:62	6	(psz_chroma_description)
cond	128:15	128:15	7	psz_chroma_description
water	128:15	0:0	8	psz_chroma_description
stmts	129:15	130:62	7	
call	129:15	130:61	8	info_category_AddInfo
arg	129:38	129:43	9	p_cat
water	129:38	0:0	10	p_cat
arg	129:45	129:64	9	_("Decoded format")
call	129:45	129:63	10	_
arg	129:47	129:63	11	"Decoded format"
water	129:47	0:0	12	"Decoded format"
arg	129:66	129:70	9	"%s"
water	129:66	0:0	10	"%s"
arg	130:38	130:61	9	psz_chroma_description
water	130:38	0:0	10	psz_chroma_description
water	130:62	0:0	8	;
water	131:7	0:0	6	}
break	132:7	132:12	4	
label	133:4	133:15	4	case SPU_ES :
call	134:8	134:63	4	info_category_AddInfo
arg	134:31	134:36	5	p_cat
water	134:31	0:0	6	p_cat
arg	134:38	134:47	5	_("Type")
call	134:38	134:46	6	_
arg	134:40	134:46	7	"Type"
water	134:40	0:0	8	"Type"
arg	134:49	134:63	5	_("Subtitle")
call	134:49	134:61	6	_
arg	134:51	134:61	7	"Subtitle"
water	134:51	0:0	8	"Subtitle"
water	134:64	0:0	4	;
break	135:8	135:13	4	
label	136:4	136:11	4	default :
break	137:8	137:13	4	
water	138:4	0:0	4	}
if	140:4	153:4	2	(p_meta)
cond	140:8	140:8	3	p_meta
water	140:8	0:0	4	p_meta
stmts	141:4	153:4	3	
water	141:4	0:0	4	{
decl	142:8	142:64	4	char	**ppsz_all_keys
op	142:29	0:0	4	=
call	142:31	142:63	5	vlc_meta_CopyExtraNames
arg	142:56	142:63	6	p_meta
water	142:56	0:0	7	p_meta
for	143:8	151:8	4	( int i = 0 ;ppsz_all_keys && ppsz_all_keys [ i ];i ++)
forinit	0:0	143:22	5	 int i = 0 ;
decl	143:13	143:22	6	int	i
op	143:19	0:0	6	=
water	143:21	0:0	6	0
cond	143:24	143:56	5	ppsz_all_keys && ppsz_all_keys [ i ]
water	143:24	0:0	6	ppsz_all_keys
op	143:38	0:0	6	&&
water	143:41	0:0	6	ppsz_all_keys
op	143:54	0:0	6	[
water	143:55	0:0	6	i
op	143:56	0:0	6	]
forexpr	143:59	143:60	5	i ++
water	143:59	0:0	6	i
op	143:60	0:0	6	++
stmts	144:8	151:8	5	
water	144:8	0:0	6	{
decl	145:12	145:44	6	char	*psz_key
op	145:26	0:0	6	=
water	145:28	0:0	6	ppsz_all_keys
op	145:41	0:0	6	[
water	145:42	0:0	6	i
op	145:43	0:0	6	]
decl	146:12	146:72	6	const char	*psz_value
op	146:34	0:0	6	=
call	146:36	146:71	7	vlc_meta_GetExtra
arg	146:55	146:61	8	p_meta
water	146:55	0:0	9	p_meta
arg	146:63	146:71	8	psz_key
water	146:63	0:0	9	psz_key
if	147:12	149:63	6	(psz_value)
cond	147:16	147:16	7	psz_value
water	147:16	0:0	8	psz_value
stmts	148:16	149:63	7	
call	148:16	149:62	8	info_category_AddInfo
arg	148:39	148:44	9	p_cat
water	148:39	0:0	10	p_cat
arg	148:46	148:66	9	vlc_gettext(psz_key)
call	148:46	148:65	10	vlc_gettext
arg	148:58	148:65	11	psz_key
water	148:58	0:0	12	psz_key
arg	148:68	148:72	9	"%s"
water	148:68	0:0	10	"%s"
arg	149:39	149:62	9	vlc_gettext(psz_value)
call	149:39	149:60	10	vlc_gettext
arg	149:51	149:60	11	psz_value
water	149:51	0:0	12	psz_value
water	149:63	0:0	8	;
call	150:12	150:26	6	free
arg	150:18	150:26	7	psz_key
water	150:18	0:0	8	psz_key
water	150:27	0:0	6	;
water	151:8	0:0	6	}
call	152:8	152:28	4	free
arg	152:14	152:28	5	ppsz_all_keys
water	152:14	0:0	6	ppsz_all_keys
water	152:29	0:0	4	;
water	153:4	0:0	4	}
call	155:4	155:55	2	input_Control
arg	155:19	155:26	3	p_input
water	155:19	0:0	4	p_input
arg	155:28	155:47	3	INPUT_REPLACE_INFOS
water	155:28	0:0	4	INPUT_REPLACE_INFOS
arg	155:49	155:55	3	p_cat
water	155:49	0:0	4	p_cat
water	155:56	0:0	2	;
