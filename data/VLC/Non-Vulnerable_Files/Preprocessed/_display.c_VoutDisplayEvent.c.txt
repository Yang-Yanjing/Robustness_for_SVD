func	2:0	79:0	0	static void	VoutDisplayEvent
params	2:28	0:0	1	
param	2:29	2:47	2	vout_display_t *	vd
param	2:49	2:58	2	int	event
param	2:60	2:72	2	va_list	args
stmnts	0:0	78:4	1	
decl	4:4	4:50	2	vout_display_owner_sys_t	*osys
op	4:35	0:0	2	=
water	4:37	0:0	2	vd
op	4:39	0:0	2	->
water	4:41	0:0	2	owner
op	4:46	0:0	2	.
water	4:47	0:0	2	sys
switch	5:4	78:4	2	(event)
cond	5:12	5:12	3	event
water	5:12	0:0	4	event
stmts	5:19	78:4	3	
water	5:19	0:0	4	{
label	6:4	6:33	4	case VOUT_DISPLAY_EVENT_CLOSE :
water	6:35	0:0	4	{
call	7:8	7:46	4	msg_Dbg
arg	7:16	7:18	5	vd
water	7:16	0:0	6	vd
arg	7:20	7:46	5	"VoutDisplayEvent 'close'"
water	7:20	0:0	6	"VoutDisplayEvent 'close'"
water	7:47	0:0	4	;
call	8:8	8:38	4	vout_SendEventClose
arg	8:28	8:38	5	osys->vout
water	8:28	0:0	6	osys
op	8:32	0:0	6	->
water	8:34	0:0	6	vout
water	8:39	0:0	4	;
break	9:8	9:13	4	
water	10:4	0:0	4	}
label	11:4	11:31	4	case VOUT_DISPLAY_EVENT_KEY :
water	11:33	0:0	4	{
decl	12:8	12:46	4	const int	key
op	12:22	0:0	4	=
water	12:24	0:0	4	(
water	12:25	0:0	4	int
water	12:28	0:0	4	)
call	12:29	12:45	5	va_arg
arg	12:36	12:40	6	args
water	12:36	0:0	7	args
arg	12:42	12:45	6	int
water	12:42	0:0	7	int
call	13:8	13:57	4	msg_Dbg
arg	13:16	13:18	5	vd
water	13:16	0:0	6	vd
arg	13:20	13:52	5	"VoutDisplayEvent 'key' 0x%2.2x"
water	13:20	0:0	6	"VoutDisplayEvent 'key' 0x%2.2x"
arg	13:54	13:57	5	key
water	13:54	0:0	6	key
water	13:58	0:0	4	;
if	14:8	15:46	4	(vd -> info . has_event_thread)
cond	14:12	14:21	5	vd -> info . has_event_thread
water	14:12	0:0	6	vd
op	14:14	0:0	6	->
water	14:16	0:0	6	info
op	14:20	0:0	6	.
water	14:21	0:0	6	has_event_thread
stmts	15:12	15:46	5	
call	15:12	15:45	6	vout_SendEventKey
arg	15:30	15:40	7	osys->vout
water	15:30	0:0	8	osys
op	15:34	0:0	8	->
water	15:36	0:0	8	vout
arg	15:42	15:45	7	key
water	15:42	0:0	8	key
water	15:46	0:0	6	;
else	16:8	17:40	4
stmts	17:12	17:40	5	
call	17:12	17:39	6	VoutDisplayEventKey
arg	17:32	17:34	7	vd
water	17:32	0:0	8	vd
arg	17:36	17:39	7	key
water	17:36	0:0	8	key
water	17:40	0:0	6	;
break	18:8	18:13	4	
water	19:4	0:0	4	}
label	20:4	20:39	4	case VOUT_DISPLAY_EVENT_MOUSE_STATE :
label	21:4	21:39	4	case VOUT_DISPLAY_EVENT_MOUSE_MOVED :
label	22:4	22:41	4	case VOUT_DISPLAY_EVENT_MOUSE_PRESSED :
label	23:4	23:42	4	case VOUT_DISPLAY_EVENT_MOUSE_RELEASED :
label	24:4	24:46	4	case VOUT_DISPLAY_EVENT_MOUSE_DOUBLE_CLICK :
call	25:8	25:45	4	VoutDisplayEventMouse
arg	25:30	25:32	5	vd
water	25:30	0:0	6	vd
arg	25:34	25:39	5	event
water	25:34	0:0	6	event
arg	25:41	25:45	5	args
water	25:41	0:0	6	args
water	25:46	0:0	4	;
break	26:8	26:13	4	
label	27:4	27:38	4	case VOUT_DISPLAY_EVENT_FULLSCREEN :
water	27:40	0:0	4	{
decl	28:8	28:56	4	const int	is_fullscreen
op	28:32	0:0	4	=
water	28:34	0:0	4	(
water	28:35	0:0	4	int
water	28:38	0:0	4	)
call	28:39	28:55	5	va_arg
arg	28:46	28:50	6	args
water	28:46	0:0	7	args
arg	28:52	28:55	6	int
water	28:52	0:0	7	int
call	29:8	29:69	4	msg_Dbg
arg	29:16	29:18	5	vd
water	29:16	0:0	6	vd
arg	29:20	29:54	5	"VoutDisplayEvent 'fullscreen' %d"
water	29:20	0:0	6	"VoutDisplayEvent 'fullscreen' %d"
arg	29:56	29:69	5	is_fullscreen
water	29:56	0:0	6	is_fullscreen
water	29:70	0:0	4	;
call	30:8	30:34	4	vlc_mutex_lock
arg	30:23	30:34	5	&osys->lock
op	30:23	0:0	6	&
water	30:24	0:0	6	osys
op	30:28	0:0	6	->
water	30:30	0:0	6	lock
water	30:35	0:0	4	;
if	31:8	34:8	4	(! is_fullscreen != ! osys -> is_fullscreen)
cond	31:12	31:37	5	! is_fullscreen != ! osys -> is_fullscreen
op	31:12	0:0	6	!
water	31:13	0:0	6	is_fullscreen
op	31:27	0:0	6	!=
op	31:30	0:0	6	!
water	31:31	0:0	6	osys
op	31:35	0:0	6	->
water	31:37	0:0	6	is_fullscreen
stmts	31:52	34:8	5	
water	31:52	0:0	6	{
water	32:12	0:0	6	osys
op	32:16	0:0	6	->
water	32:18	0:0	6	ch_fullscreen
op	32:32	0:0	6	=
water	32:34	0:0	6	true
water	32:38	0:0	6	;
water	33:12	0:0	6	osys
op	33:16	0:0	6	->
water	33:18	0:0	6	is_fullscreen
op	33:32	0:0	6	=
water	33:34	0:0	6	is_fullscreen
water	33:47	0:0	6	;
water	34:8	0:0	6	}
call	35:8	35:36	4	vlc_mutex_unlock
arg	35:25	35:36	5	&osys->lock
op	35:25	0:0	6	&
water	35:26	0:0	6	osys
op	35:30	0:0	6	->
water	35:32	0:0	6	lock
water	35:37	0:0	4	;
break	36:8	36:13	4	
water	37:4	0:0	4	}
label	38:4	38:40	4	case VOUT_DISPLAY_EVENT_WINDOW_STATE :
water	38:42	0:0	4	{
water	39:8	0:0	4	const
water	39:14	0:0	4	unsigned
water	39:23	0:0	4	state
op	39:29	0:0	4	=
call	39:31	39:52	4	va_arg
arg	39:38	39:42	5	args
water	39:38	0:0	6	args
arg	39:44	39:52	5	unsigned
water	39:44	0:0	6	unsigned
water	39:53	0:0	4	;
call	40:8	40:63	4	msg_Dbg
arg	40:16	40:18	5	vd
water	40:16	0:0	6	vd
arg	40:20	40:56	5	"VoutDisplayEvent 'window state' %u"
water	40:20	0:0	6	"VoutDisplayEvent 'window state' %u"
arg	40:58	40:63	5	state
water	40:58	0:0	6	state
water	40:64	0:0	4	;
call	41:8	41:34	4	vlc_mutex_lock
arg	41:23	41:34	5	&osys->lock
op	41:23	0:0	6	&
water	41:24	0:0	6	osys
op	41:28	0:0	6	->
water	41:30	0:0	6	lock
water	41:35	0:0	4	;
if	42:8	45:8	4	(state != osys -> wm_state)
cond	42:12	42:27	5	state != osys -> wm_state
water	42:12	0:0	6	state
op	42:18	0:0	6	!=
water	42:21	0:0	6	osys
op	42:25	0:0	6	->
water	42:27	0:0	6	wm_state
stmts	42:37	45:8	5	
water	42:37	0:0	6	{
water	43:12	0:0	6	osys
op	43:16	0:0	6	->
water	43:18	0:0	6	ch_wm_state
op	43:30	0:0	6	=
water	43:32	0:0	6	true
water	43:36	0:0	6	;
water	44:12	0:0	6	osys
op	44:16	0:0	6	->
water	44:18	0:0	6	wm_state
op	44:27	0:0	6	=
water	44:29	0:0	6	state
water	44:34	0:0	6	;
water	45:8	0:0	6	}
call	46:8	46:36	4	vlc_mutex_unlock
arg	46:25	46:36	5	&osys->lock
op	46:25	0:0	6	&
water	46:26	0:0	6	osys
op	46:30	0:0	6	->
water	46:32	0:0	6	lock
water	46:37	0:0	4	;
break	47:8	47:13	4	
water	48:4	0:0	4	}
label	49:4	49:40	4	case VOUT_DISPLAY_EVENT_DISPLAY_SIZE :
water	49:42	0:0	4	{
decl	50:8	50:49	4	const int	width
op	50:25	0:0	4	=
water	50:27	0:0	4	(
water	50:28	0:0	4	int
water	50:31	0:0	4	)
call	50:32	50:48	5	va_arg
arg	50:39	50:43	6	args
water	50:39	0:0	7	args
arg	50:45	50:48	6	int
water	50:45	0:0	7	int
decl	51:8	51:49	4	const int	height
op	51:25	0:0	4	=
water	51:27	0:0	4	(
water	51:28	0:0	4	int
water	51:31	0:0	4	)
call	51:32	51:48	5	va_arg
arg	51:39	51:43	6	args
water	51:39	0:0	7	args
arg	51:45	51:48	6	int
water	51:45	0:0	7	int
decl	52:8	52:58	4	const bool	is_fullscreen
op	52:33	0:0	4	=
water	52:35	0:0	4	(
water	52:36	0:0	4	bool
water	52:40	0:0	4	)
call	52:41	52:57	5	va_arg
arg	52:48	52:52	6	args
water	52:48	0:0	7	args
arg	52:54	52:57	6	int
water	52:54	0:0	7	int
call	53:8	54:70	4	msg_Dbg
arg	53:16	53:18	5	vd
water	53:16	0:0	6	vd
arg	53:20	53:56	5	"VoutDisplayEvent 'resize' %dx%d %s"
water	53:20	0:0	6	"VoutDisplayEvent 'resize' %dx%d %s"
arg	54:16	54:21	5	width
water	54:16	0:0	6	width
arg	54:23	54:29	5	height
water	54:23	0:0	6	height
arg	54:31	54:70	5	is_fullscreen?"fullscreen":"window"
water	54:31	0:0	6	is_fullscreen
water	54:45	0:0	6	?
water	54:47	0:0	6	"fullscreen"
water	54:60	0:0	6	:
water	54:62	0:0	6	"window"
water	54:71	0:0	4	;
call	56:8	56:34	4	vlc_mutex_lock
arg	56:23	56:34	5	&osys->lock
op	56:23	0:0	6	&
water	56:24	0:0	6	osys
op	56:28	0:0	6	->
water	56:30	0:0	6	lock
water	56:35	0:0	4	;
water	57:8	0:0	4	osys
op	57:12	0:0	4	->
water	57:14	0:0	4	ch_display_size
op	57:36	0:0	4	=
water	57:38	0:0	4	true
water	57:42	0:0	4	;
water	58:8	0:0	4	osys
op	58:12	0:0	4	->
water	58:14	0:0	4	display_width
op	58:36	0:0	4	=
water	58:38	0:0	4	width
water	58:43	0:0	4	;
water	59:8	0:0	4	osys
op	59:12	0:0	4	->
water	59:14	0:0	4	display_height
op	59:36	0:0	4	=
water	59:38	0:0	4	height
water	59:44	0:0	4	;
water	60:8	0:0	4	osys
op	60:12	0:0	4	->
water	60:14	0:0	4	display_is_fullscreen
op	60:36	0:0	4	=
water	60:38	0:0	4	is_fullscreen
water	60:51	0:0	4	;
water	61:8	0:0	4	osys
op	61:12	0:0	4	->
water	61:14	0:0	4	display_is_forced
op	61:36	0:0	4	=
water	61:38	0:0	4	false
water	61:43	0:0	4	;
call	62:8	62:36	4	vlc_mutex_unlock
arg	62:25	62:36	5	&osys->lock
op	62:25	0:0	6	&
water	62:26	0:0	6	osys
op	62:30	0:0	6	->
water	62:32	0:0	6	lock
water	62:37	0:0	4	;
break	63:8	63:13	4	
water	64:4	0:0	4	}
label	65:4	65:44	4	case VOUT_DISPLAY_EVENT_PICTURES_INVALID :
water	65:46	0:0	4	{
call	66:8	66:58	4	msg_Warn
arg	66:17	66:19	5	vd
water	66:17	0:0	6	vd
arg	66:21	66:58	5	"VoutDisplayEvent 'pictures invalid'"
water	66:21	0:0	6	"VoutDisplayEvent 'pictures invalid'"
water	66:59	0:0	4	;
call	68:8	68:44	4	assert
arg	68:15	68:44	5	vd->info.has_pictures_invalid
water	68:15	0:0	6	vd
op	68:17	0:0	6	->
water	68:19	0:0	6	info
op	68:23	0:0	6	.
water	68:24	0:0	6	has_pictures_invalid
water	68:45	0:0	4	;
call	69:8	69:34	4	vlc_mutex_lock
arg	69:23	69:34	5	&osys->lock
op	69:23	0:0	6	&
water	69:24	0:0	6	osys
op	69:28	0:0	6	->
water	69:30	0:0	6	lock
water	69:35	0:0	4	;
water	70:8	0:0	4	osys
op	70:12	0:0	4	->
water	70:14	0:0	4	reset_pictures
op	70:29	0:0	4	=
water	70:31	0:0	4	true
water	70:35	0:0	4	;
call	71:8	71:36	4	vlc_mutex_unlock
arg	71:25	71:36	5	&osys->lock
op	71:25	0:0	6	&
water	71:26	0:0	6	osys
op	71:30	0:0	6	->
water	71:32	0:0	6	lock
water	71:37	0:0	4	;
break	72:8	72:13	4	
water	73:4	0:0	4	}
label	74:4	74:11	4	default :
call	75:8	75:63	4	msg_Err
arg	75:16	75:18	5	vd
water	75:16	0:0	6	vd
arg	75:20	75:56	5	"VoutDisplayEvent received event %d"
water	75:20	0:0	6	"VoutDisplayEvent received event %d"
arg	75:58	75:63	5	event
water	75:58	0:0	6	event
water	75:64	0:0	4	;
break	77:8	77:13	4	
water	78:4	0:0	4	}
