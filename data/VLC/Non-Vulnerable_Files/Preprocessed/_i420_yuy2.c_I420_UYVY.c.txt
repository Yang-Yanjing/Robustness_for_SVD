func	2:0	186:0	0	static void	I420_UYVY
params	2:21	0:0	1	
param	2:23	2:41	2	filter_t *	p_filter
param	2:43	2:62	2	picture_t *	p_source
param	3:43	3:61	2	picture_t *	p_dest
stmnts	0:0	184:12	1	
decl	5:4	5:52	2	uint8_t	*p_line1
water	5:20	0:0	2	,
decl	5:4	5:52	2	uint8_t	*p_line2
op	5:31	0:0	2	=
water	5:33	0:0	2	p_dest
op	5:39	0:0	2	->
water	5:41	0:0	2	p
op	5:42	0:0	2	->
water	5:44	0:0	2	p_pixels
decl	6:4	6:45	2	uint8_t	*p_y1
water	6:17	0:0	2	,
decl	6:4	6:45	2	uint8_t	*p_y2
op	6:25	0:0	2	=
water	6:27	0:0	2	p_source
op	6:35	0:0	2	->
water	6:37	0:0	2	Y_PIXELS
decl	7:4	7:37	2	uint8_t	*p_u
op	7:17	0:0	2	=
water	7:19	0:0	2	p_source
op	7:27	0:0	2	->
water	7:29	0:0	2	U_PIXELS
decl	8:4	8:37	2	uint8_t	*p_v
op	8:17	0:0	2	=
water	8:19	0:0	2	p_source
op	8:27	0:0	2	->
water	8:29	0:0	2	V_PIXELS
decl	9:4	9:16	2	int	i_x
water	9:11	0:0	2	,
decl	9:4	9:16	2	int	i_y
water	12:4	0:0	2	p_line1
op	12:13	0:0	2	=
water	12:15	0:0	2	p_line2
water	12:22	0:0	2	;
water	13:4	0:0	2	p_line2
op	13:12	0:0	2	+=
water	13:15	0:0	2	p_dest
op	13:21	0:0	2	->
water	13:23	0:0	2	p
op	13:24	0:0	2	->
water	13:26	0:0	2	i_pitch
water	13:33	0:0	2	;
water	14:4	0:0	2	p_y1
op	14:13	0:0	2	=
water	14:15	0:0	2	p_y2
water	14:19	0:0	2	;
water	15:4	0:0	2	p_y2
op	15:12	0:0	2	+=
water	15:15	0:0	2	p_source
op	15:23	0:0	2	->
water	15:25	0:0	2	p
op	15:26	0:0	2	[
water	15:27	0:0	2	Y_PLANE
op	15:34	0:0	2	]
op	15:35	0:0	2	.
water	15:36	0:0	2	i_pitch
water	15:43	0:0	2	;
water	17:4	0:0	2	u_vec
op	17:10	0:0	2	=
call	17:12	17:27	2	vec_ld
arg	17:20	17:21	3	0
water	17:20	0:0	4	0
arg	17:23	17:27	3	p_u
water	17:23	0:0	4	p_u
water	17:28	0:0	2	;
water	17:30	0:0	2	p_u
op	17:34	0:0	2	+=
water	17:37	0:0	2	16
water	17:39	0:0	2	;
water	18:4	0:0	2	v_vec
op	18:10	0:0	2	=
call	18:12	18:27	2	vec_ld
arg	18:20	18:21	3	0
water	18:20	0:0	4	0
arg	18:23	18:27	3	p_v
water	18:23	0:0	4	p_v
water	18:28	0:0	2	;
water	18:30	0:0	2	p_v
op	18:34	0:0	2	+=
water	18:37	0:0	2	16
water	18:39	0:0	2	;
water	20:4	0:0	2	uv_vec
op	20:11	0:0	2	=
call	20:13	20:29	2	a
arg	20:16	20:21	3	u_vec
water	20:16	0:0	4	u_vec
arg	20:23	20:29	3	v_vec
water	20:23	0:0	4	v_vec
water	20:30	0:0	2	;
water	21:4	0:0	2	y_vec
op	21:10	0:0	2	=
call	21:12	21:28	2	vec_ld
arg	21:20	21:21	3	0
water	21:20	0:0	4	0
arg	21:23	21:28	3	p_y1
water	21:23	0:0	4	p_y1
water	21:29	0:0	2	;
water	21:31	0:0	2	p_y1
op	21:36	0:0	2	+=
water	21:39	0:0	2	16
water	21:41	0:0	2	;
call	22:4	22:52	2	vec_st
arg	22:12	22:39	3	vec_mergeh(uv_vec,y_vec)
call	22:12	22:38	4	vec_mergeh
arg	22:24	22:30	5	uv_vec
water	22:24	0:0	6	uv_vec
arg	22:32	22:38	5	y_vec
water	22:32	0:0	6	y_vec
arg	22:41	22:42	3	0
water	22:41	0:0	4	0
arg	22:44	22:52	3	p_line1
water	22:44	0:0	4	p_line1
water	22:53	0:0	2	;
water	22:55	0:0	2	p_line1
op	22:63	0:0	2	+=
water	22:66	0:0	2	16
water	22:68	0:0	2	;
call	23:4	23:52	2	vec_st
arg	23:12	23:39	3	vec_mergel(uv_vec,y_vec)
call	23:12	23:38	4	vec_mergel
arg	23:24	23:30	5	uv_vec
water	23:24	0:0	6	uv_vec
arg	23:32	23:38	5	y_vec
water	23:32	0:0	6	y_vec
arg	23:41	23:42	3	0
water	23:41	0:0	4	0
arg	23:44	23:52	3	p_line1
water	23:44	0:0	4	p_line1
water	23:53	0:0	2	;
water	23:55	0:0	2	p_line1
op	23:63	0:0	2	+=
water	23:66	0:0	2	16
water	23:68	0:0	2	;
water	24:4	0:0	2	y_vec
op	24:10	0:0	2	=
call	24:12	24:28	2	vec_ld
arg	24:20	24:21	3	0
water	24:20	0:0	4	0
arg	24:23	24:28	3	p_y2
water	24:23	0:0	4	p_y2
water	24:29	0:0	2	;
water	24:31	0:0	2	p_y2
op	24:36	0:0	2	+=
water	24:39	0:0	2	16
water	24:41	0:0	2	;
call	25:4	25:52	2	vec_st
arg	25:12	25:39	3	vec_mergeh(uv_vec,y_vec)
call	25:12	25:38	4	vec_mergeh
arg	25:24	25:30	5	uv_vec
water	25:24	0:0	6	uv_vec
arg	25:32	25:38	5	y_vec
water	25:32	0:0	6	y_vec
arg	25:41	25:42	3	0
water	25:41	0:0	4	0
arg	25:44	25:52	3	p_line2
water	25:44	0:0	4	p_line2
water	25:53	0:0	2	;
water	25:55	0:0	2	p_line2
op	25:63	0:0	2	+=
water	25:66	0:0	2	16
water	25:68	0:0	2	;
call	26:4	26:52	2	vec_st
arg	26:12	26:39	3	vec_mergel(uv_vec,y_vec)
call	26:12	26:38	4	vec_mergel
arg	26:24	26:30	5	uv_vec
water	26:24	0:0	6	uv_vec
arg	26:32	26:38	5	y_vec
water	26:32	0:0	6	y_vec
arg	26:41	26:42	3	0
water	26:41	0:0	4	0
arg	26:44	26:52	3	p_line2
water	26:44	0:0	4	p_line2
water	26:53	0:0	2	;
water	26:55	0:0	2	p_line2
op	26:63	0:0	2	+=
water	26:66	0:0	2	16
water	26:68	0:0	2	;
water	27:4	0:0	2	vector
water	27:11	0:0	2	unsigned
water	27:20	0:0	2	char
water	27:25	0:0	2	u_vec
water	27:30	0:0	2	;
water	28:4	0:0	2	vector
water	28:11	0:0	2	unsigned
water	28:20	0:0	2	char
water	28:25	0:0	2	v_vec
water	28:30	0:0	2	;
water	29:4	0:0	2	vector
water	29:11	0:0	2	unsigned
water	29:20	0:0	2	char
water	29:25	0:0	2	uv_vec
water	29:31	0:0	2	;
water	30:4	0:0	2	vector
water	30:11	0:0	2	unsigned
water	30:20	0:0	2	char
water	30:25	0:0	2	y_vec
water	30:30	0:0	2	;
if	31:4	45:4	2	(! ( ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 32 ) | ( ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) % 2 ) ))
cond	31:8	32:97	3	! ( ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 32 ) | ( ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) % 2 ) )
op	31:8	0:0	4	!
water	31:9	0:0	4	(
water	31:11	0:0	4	(
water	31:13	0:0	4	(
water	31:14	0:0	4	p_filter
op	31:22	0:0	4	->
water	31:24	0:0	4	fmt_in
op	31:30	0:0	4	.
water	31:31	0:0	4	video
op	31:36	0:0	4	.
water	31:37	0:0	4	i_x_offset
op	31:48	0:0	4	+
water	31:50	0:0	4	p_filter
op	31:58	0:0	4	->
water	31:60	0:0	4	fmt_in
op	31:66	0:0	4	.
water	31:67	0:0	4	video
op	31:72	0:0	4	.
water	31:73	0:0	4	i_visible_width
water	31:88	0:0	4	)
op	31:90	0:0	4	%
water	31:92	0:0	4	32
water	31:95	0:0	4	)
op	31:97	0:0	4	|
water	32:11	0:0	4	(
water	32:13	0:0	4	(
water	32:14	0:0	4	p_filter
op	32:22	0:0	4	->
water	32:24	0:0	4	fmt_in
op	32:30	0:0	4	.
water	32:31	0:0	4	video
op	32:36	0:0	4	.
water	32:37	0:0	4	i_y_offset
op	32:48	0:0	4	+
water	32:50	0:0	4	p_filter
op	32:58	0:0	4	->
water	32:60	0:0	4	fmt_in
op	32:66	0:0	4	.
water	32:67	0:0	4	video
op	32:72	0:0	4	.
water	32:73	0:0	4	i_visible_height
water	32:89	0:0	4	)
op	32:91	0:0	4	%
water	32:93	0:0	4	2
water	32:95	0:0	4	)
water	32:97	0:0	4	)
stmts	33:4	45:4	3	
water	33:4	0:0	4	{
for	35:8	44:8	4	(i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 2 ;i_y --;)
forinit	35:13	35:101	5	i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 2 ;
water	35:13	0:0	6	i_y
op	35:17	0:0	6	=
water	35:19	0:0	6	(
water	35:20	0:0	6	p_filter
op	35:28	0:0	6	->
water	35:30	0:0	6	fmt_in
op	35:36	0:0	6	.
water	35:37	0:0	6	video
op	35:42	0:0	6	.
water	35:43	0:0	6	i_y_offset
op	35:54	0:0	6	+
water	35:56	0:0	6	p_filter
op	35:64	0:0	6	->
water	35:66	0:0	6	fmt_in
op	35:72	0:0	6	.
water	35:73	0:0	6	video
op	35:78	0:0	6	.
water	35:79	0:0	6	i_visible_height
water	35:95	0:0	6	)
op	35:97	0:0	6	/
water	35:99	0:0	6	2
water	35:101	0:0	6	;
cond	35:103	35:106	5	i_y --
water	35:103	0:0	6	i_y
op	35:106	0:0	6	--
forexpr	0:0	0:0	5	
stmts	36:8	44:8	5	
water	36:8	0:0	6	{
call	37:12	37:28	6	VEC_NEXT_LINES
water	37:29	0:0	6	;
for	38:12	43:12	6	(i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 32 ;i_x --;)
forinit	38:17	38:105	7	i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 32 ;
water	38:17	0:0	8	i_x
op	38:21	0:0	8	=
water	38:23	0:0	8	(
water	38:24	0:0	8	p_filter
op	38:32	0:0	8	->
water	38:34	0:0	8	fmt_in
op	38:40	0:0	8	.
water	38:41	0:0	8	video
op	38:46	0:0	8	.
water	38:47	0:0	8	i_x_offset
op	38:58	0:0	8	+
water	38:60	0:0	8	p_filter
op	38:68	0:0	8	->
water	38:70	0:0	8	fmt_in
op	38:76	0:0	8	.
water	38:77	0:0	8	video
op	38:82	0:0	8	.
water	38:83	0:0	8	i_visible_width
water	38:98	0:0	8	)
op	38:100	0:0	8	/
water	38:102	0:0	8	32
water	38:105	0:0	8	;
cond	38:107	38:110	7	i_x --
water	38:107	0:0	8	i_x
op	38:110	0:0	8	--
forexpr	0:0	0:0	7	
stmts	39:12	43:12	7	
water	39:12	0:0	8	{
call	40:16	40:29	8	VEC_LOAD_UV
water	40:30	0:0	8	;
call	41:16	41:38	8	VEC_MERGE
arg	41:27	41:38	9	vec_mergeh
water	41:27	0:0	10	vec_mergeh
water	41:39	0:0	8	;
call	42:16	42:38	8	VEC_MERGE
arg	42:27	42:38	9	vec_mergel
water	42:27	0:0	10	vec_mergel
water	42:39	0:0	8	;
water	43:12	0:0	8	}
water	44:8	0:0	6	}
water	45:4	0:0	4	}
else	46:4	74:4	2
stmts	46:9	74:4	3	
if	46:9	74:4	4	(! ( ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 16 ) | ( ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) % 4 ) ))
cond	46:13	47:102	5	! ( ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 16 ) | ( ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) % 4 ) )
op	46:13	0:0	6	!
water	46:14	0:0	6	(
water	46:16	0:0	6	(
water	46:18	0:0	6	(
water	46:19	0:0	6	p_filter
op	46:27	0:0	6	->
water	46:29	0:0	6	fmt_in
op	46:35	0:0	6	.
water	46:36	0:0	6	video
op	46:41	0:0	6	.
water	46:42	0:0	6	i_x_offset
op	46:53	0:0	6	+
water	46:55	0:0	6	p_filter
op	46:63	0:0	6	->
water	46:65	0:0	6	fmt_in
op	46:71	0:0	6	.
water	46:72	0:0	6	video
op	46:77	0:0	6	.
water	46:78	0:0	6	i_visible_width
water	46:93	0:0	6	)
op	46:95	0:0	6	%
water	46:97	0:0	6	16
water	46:100	0:0	6	)
op	46:102	0:0	6	|
water	47:16	0:0	6	(
water	47:18	0:0	6	(
water	47:19	0:0	6	p_filter
op	47:27	0:0	6	->
water	47:29	0:0	6	fmt_in
op	47:35	0:0	6	.
water	47:36	0:0	6	video
op	47:41	0:0	6	.
water	47:42	0:0	6	i_y_offset
op	47:53	0:0	6	+
water	47:55	0:0	6	p_filter
op	47:63	0:0	6	->
water	47:65	0:0	6	fmt_in
op	47:71	0:0	6	.
water	47:72	0:0	6	video
op	47:77	0:0	6	.
water	47:78	0:0	6	i_visible_height
water	47:94	0:0	6	)
op	47:96	0:0	6	%
water	47:98	0:0	6	4
water	47:100	0:0	6	)
water	47:102	0:0	6	)
stmts	48:4	74:4	5	
water	48:4	0:0	6	{
for	50:8	73:8	6	(i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 4 ;i_y --;)
forinit	50:13	50:101	7	i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 4 ;
water	50:13	0:0	8	i_y
op	50:17	0:0	8	=
water	50:19	0:0	8	(
water	50:20	0:0	8	p_filter
op	50:28	0:0	8	->
water	50:30	0:0	8	fmt_in
op	50:36	0:0	8	.
water	50:37	0:0	8	video
op	50:42	0:0	8	.
water	50:43	0:0	8	i_y_offset
op	50:54	0:0	8	+
water	50:56	0:0	8	p_filter
op	50:64	0:0	8	->
water	50:66	0:0	8	fmt_in
op	50:72	0:0	8	.
water	50:73	0:0	8	video
op	50:78	0:0	8	.
water	50:79	0:0	8	i_visible_height
water	50:95	0:0	8	)
op	50:97	0:0	8	/
water	50:99	0:0	8	4
water	50:101	0:0	8	;
cond	50:103	50:106	7	i_y --
water	50:103	0:0	8	i_y
op	50:106	0:0	8	--
forexpr	0:0	0:0	7	
stmts	51:8	73:8	7	
water	51:8	0:0	8	{
call	53:12	53:28	8	VEC_NEXT_LINES
water	53:29	0:0	8	;
for	54:12	59:12	8	(i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 32 ;i_x --;)
forinit	54:17	54:105	9	i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 32 ;
water	54:17	0:0	10	i_x
op	54:21	0:0	10	=
water	54:23	0:0	10	(
water	54:24	0:0	10	p_filter
op	54:32	0:0	10	->
water	54:34	0:0	10	fmt_in
op	54:40	0:0	10	.
water	54:41	0:0	10	video
op	54:46	0:0	10	.
water	54:47	0:0	10	i_x_offset
op	54:58	0:0	10	+
water	54:60	0:0	10	p_filter
op	54:68	0:0	10	->
water	54:70	0:0	10	fmt_in
op	54:76	0:0	10	.
water	54:77	0:0	10	video
op	54:82	0:0	10	.
water	54:83	0:0	10	i_visible_width
water	54:98	0:0	10	)
op	54:100	0:0	10	/
water	54:102	0:0	10	32
water	54:105	0:0	10	;
cond	54:107	54:110	9	i_x --
water	54:107	0:0	10	i_x
op	54:110	0:0	10	--
forexpr	0:0	0:0	9	
stmts	55:12	59:12	9	
water	55:12	0:0	10	{
call	56:16	56:29	10	VEC_LOAD_UV
water	56:30	0:0	10	;
call	57:16	57:38	10	VEC_MERGE
arg	57:27	57:38	11	vec_mergeh
water	57:27	0:0	12	vec_mergeh
water	57:39	0:0	10	;
call	58:16	58:38	10	VEC_MERGE
arg	58:27	58:38	11	vec_mergel
water	58:27	0:0	12	vec_mergel
water	58:39	0:0	10	;
water	59:12	0:0	10	}
call	61:12	61:25	8	VEC_LOAD_UV
water	61:26	0:0	8	;
call	62:12	62:34	8	VEC_MERGE
arg	62:23	62:34	9	vec_mergeh
water	62:23	0:0	10	vec_mergeh
water	62:35	0:0	8	;
call	64:12	64:28	8	VEC_NEXT_LINES
water	64:29	0:0	8	;
call	65:12	65:34	8	VEC_MERGE
arg	65:23	65:34	9	vec_mergel
water	65:23	0:0	10	vec_mergel
water	65:35	0:0	8	;
for	67:12	72:12	8	(i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 32 ;i_x --;)
forinit	67:17	67:105	9	i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 32 ;
water	67:17	0:0	10	i_x
op	67:21	0:0	10	=
water	67:23	0:0	10	(
water	67:24	0:0	10	p_filter
op	67:32	0:0	10	->
water	67:34	0:0	10	fmt_in
op	67:40	0:0	10	.
water	67:41	0:0	10	video
op	67:46	0:0	10	.
water	67:47	0:0	10	i_x_offset
op	67:58	0:0	10	+
water	67:60	0:0	10	p_filter
op	67:68	0:0	10	->
water	67:70	0:0	10	fmt_in
op	67:76	0:0	10	.
water	67:77	0:0	10	video
op	67:82	0:0	10	.
water	67:83	0:0	10	i_visible_width
water	67:98	0:0	10	)
op	67:100	0:0	10	/
water	67:102	0:0	10	32
water	67:105	0:0	10	;
cond	67:107	67:110	9	i_x --
water	67:107	0:0	10	i_x
op	67:110	0:0	10	--
forexpr	0:0	0:0	9	
stmts	68:12	72:12	9	
water	68:12	0:0	10	{
call	69:16	69:29	10	VEC_LOAD_UV
water	69:30	0:0	10	;
call	70:16	70:38	10	VEC_MERGE
arg	70:27	70:38	11	vec_mergeh
water	70:27	0:0	12	vec_mergeh
water	70:39	0:0	10	;
call	71:16	71:38	10	VEC_MERGE
arg	71:27	71:38	11	vec_mergel
water	71:27	0:0	12	vec_mergel
water	71:39	0:0	10	;
water	72:12	0:0	10	}
water	73:8	0:0	8	}
water	74:4	0:0	6	}
else	75:4	125:4	2
stmts	76:4	125:4	3	
water	76:4	0:0	4	{
decl	82:4	84:68	4	const int	i_source_margin
op	82:30	0:0	4	=
water	82:32	0:0	4	p_source
op	82:40	0:0	4	->
water	82:42	0:0	4	p
op	82:43	0:0	4	[
water	82:44	0:0	4	0
op	82:45	0:0	4	]
op	82:46	0:0	4	.
water	82:47	0:0	4	i_pitch
op	83:33	0:0	4	-
water	83:35	0:0	4	p_source
op	83:43	0:0	4	->
water	83:45	0:0	4	p
op	83:46	0:0	4	[
water	83:47	0:0	4	0
op	83:48	0:0	4	]
op	83:49	0:0	4	.
water	83:50	0:0	4	i_visible_pitch
op	84:33	0:0	4	-
water	84:35	0:0	4	p_filter
op	84:43	0:0	4	->
water	84:45	0:0	4	fmt_in
op	84:51	0:0	4	.
water	84:52	0:0	4	video
op	84:57	0:0	4	.
water	84:58	0:0	4	i_x_offset
decl	85:4	87:76	4	const int	i_source_margin_c
op	85:32	0:0	4	=
water	85:34	0:0	4	p_source
op	85:42	0:0	4	->
water	85:44	0:0	4	p
op	85:45	0:0	4	[
water	85:46	0:0	4	1
op	85:47	0:0	4	]
op	85:48	0:0	4	.
water	85:49	0:0	4	i_pitch
op	86:33	0:0	4	-
water	86:35	0:0	4	p_source
op	86:43	0:0	4	->
water	86:45	0:0	4	p
op	86:46	0:0	4	[
water	86:47	0:0	4	1
op	86:48	0:0	4	]
op	86:49	0:0	4	.
water	86:50	0:0	4	i_visible_pitch
op	87:33	0:0	4	-
water	87:35	0:0	4	(
water	87:37	0:0	4	p_filter
op	87:45	0:0	4	->
water	87:47	0:0	4	fmt_in
op	87:53	0:0	4	.
water	87:54	0:0	4	video
op	87:59	0:0	4	.
water	87:60	0:0	4	i_x_offset
op	87:71	0:0	4	/
water	87:73	0:0	4	2
water	87:75	0:0	4	)
decl	88:4	90:75	4	const int	i_dest_margin
op	88:28	0:0	4	=
water	88:30	0:0	4	p_dest
op	88:36	0:0	4	->
water	88:38	0:0	4	p
op	88:39	0:0	4	->
water	88:41	0:0	4	i_pitch
op	89:31	0:0	4	-
water	89:33	0:0	4	p_dest
op	89:39	0:0	4	->
water	89:41	0:0	4	p
op	89:42	0:0	4	->
water	89:44	0:0	4	i_visible_pitch
op	90:31	0:0	4	-
water	90:33	0:0	4	(
water	90:35	0:0	4	p_filter
op	90:43	0:0	4	->
water	90:45	0:0	4	fmt_out
op	90:52	0:0	4	.
water	90:53	0:0	4	video
op	90:58	0:0	4	.
water	90:59	0:0	4	i_x_offset
op	90:70	0:0	4	*
water	90:72	0:0	4	2
water	90:74	0:0	4	)
for	92:4	119:4	4	(i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 2 ;i_y --;)
forinit	92:9	92:97	5	i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 2 ;
water	92:9	0:0	6	i_y
op	92:13	0:0	6	=
water	92:15	0:0	6	(
water	92:16	0:0	6	p_filter
op	92:24	0:0	6	->
water	92:26	0:0	6	fmt_in
op	92:32	0:0	6	.
water	92:33	0:0	6	video
op	92:38	0:0	6	.
water	92:39	0:0	6	i_y_offset
op	92:50	0:0	6	+
water	92:52	0:0	6	p_filter
op	92:60	0:0	6	->
water	92:62	0:0	6	fmt_in
op	92:68	0:0	6	.
water	92:69	0:0	6	video
op	92:74	0:0	6	.
water	92:75	0:0	6	i_visible_height
water	92:91	0:0	6	)
op	92:93	0:0	6	/
water	92:95	0:0	6	2
water	92:97	0:0	6	;
cond	92:99	92:102	5	i_y --
water	92:99	0:0	6	i_y
op	92:102	0:0	6	--
forexpr	0:0	0:0	5	
stmts	93:4	119:4	5	
water	93:4	0:0	6	{
water	94:8	0:0	6	p_line1
op	94:16	0:0	6	=
water	94:18	0:0	6	p_line2
water	94:25	0:0	6	;
water	95:8	0:0	6	p_line2
op	95:16	0:0	6	+=
water	95:19	0:0	6	p_dest
op	95:25	0:0	6	->
water	95:27	0:0	6	p
op	95:28	0:0	6	->
water	95:30	0:0	6	i_pitch
water	95:37	0:0	6	;
water	96:8	0:0	6	p_y1
op	96:13	0:0	6	=
water	96:15	0:0	6	p_y2
water	96:19	0:0	6	;
water	97:8	0:0	6	p_y2
op	97:13	0:0	6	+=
water	97:16	0:0	6	p_source
op	97:24	0:0	6	->
water	97:26	0:0	6	p
op	97:27	0:0	6	[
water	97:28	0:0	6	Y_PLANE
op	97:35	0:0	6	]
op	97:36	0:0	6	.
water	97:37	0:0	6	i_pitch
water	97:44	0:0	6	;
for	98:8	108:8	6	(i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 8 ;i_x --;)
forinit	98:13	98:100	7	i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 8 ;
water	98:13	0:0	8	i_x
op	98:17	0:0	8	=
water	98:19	0:0	8	(
water	98:20	0:0	8	p_filter
op	98:28	0:0	8	->
water	98:30	0:0	8	fmt_in
op	98:36	0:0	8	.
water	98:37	0:0	8	video
op	98:42	0:0	8	.
water	98:43	0:0	8	i_x_offset
op	98:54	0:0	8	+
water	98:56	0:0	8	p_filter
op	98:64	0:0	8	->
water	98:66	0:0	8	fmt_in
op	98:72	0:0	8	.
water	98:73	0:0	8	video
op	98:78	0:0	8	.
water	98:79	0:0	8	i_visible_width
water	98:94	0:0	8	)
op	98:96	0:0	8	/
water	98:98	0:0	8	8
water	98:100	0:0	8	;
cond	98:102	98:105	7	i_x --
water	98:102	0:0	8	i_x
op	98:105	0:0	8	--
forexpr	0:0	0:0	7	
stmts	99:8	108:8	7	
water	99:8	0:0	8	{
call	101:12	101:27	8	C_YUV420_UYVY
water	101:28	0:0	8	;
call	102:12	102:27	8	C_YUV420_UYVY
water	102:28	0:0	8	;
call	103:12	103:27	8	C_YUV420_UYVY
water	103:28	0:0	8	;
call	104:12	104:27	8	C_YUV420_UYVY
water	104:28	0:0	8	;
call	106:12	106:38	8	MMX_CALL
arg	106:22	106:38	9	MMX_YUV420_UYVY
water	106:22	0:0	10	MMX_YUV420_UYVY
water	106:39	0:0	8	;
water	108:8	0:0	8	}
for	109:8	112:8	6	(i_x = ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 8 ) / 2 ;i_x --;)
forinit	109:13	109:107	7	i_x = ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 8 ) / 2 ;
water	109:13	0:0	8	i_x
op	109:17	0:0	8	=
water	109:19	0:0	8	(
water	109:21	0:0	8	(
water	109:22	0:0	8	p_filter
op	109:30	0:0	8	->
water	109:32	0:0	8	fmt_in
op	109:38	0:0	8	.
water	109:39	0:0	8	video
op	109:44	0:0	8	.
water	109:45	0:0	8	i_x_offset
op	109:56	0:0	8	+
water	109:58	0:0	8	p_filter
op	109:66	0:0	8	->
water	109:68	0:0	8	fmt_in
op	109:74	0:0	8	.
water	109:75	0:0	8	video
op	109:80	0:0	8	.
water	109:81	0:0	8	i_visible_width
water	109:96	0:0	8	)
op	109:98	0:0	8	%
water	109:100	0:0	8	8
water	109:102	0:0	8	)
op	109:104	0:0	8	/
water	109:106	0:0	8	2
water	109:107	0:0	8	;
cond	109:109	109:112	7	i_x --
water	109:109	0:0	8	i_x
op	109:112	0:0	8	--
forexpr	0:0	0:0	7	
stmts	110:8	112:8	7	
water	110:8	0:0	8	{
call	111:12	111:27	8	C_YUV420_UYVY
water	111:28	0:0	8	;
water	112:8	0:0	8	}
water	113:8	0:0	6	p_y1
op	113:13	0:0	6	+=
water	113:16	0:0	6	i_source_margin
water	113:31	0:0	6	;
water	114:8	0:0	6	p_y2
op	114:13	0:0	6	+=
water	114:16	0:0	6	i_source_margin
water	114:31	0:0	6	;
water	115:8	0:0	6	p_u
op	115:12	0:0	6	+=
water	115:15	0:0	6	i_source_margin_c
water	115:32	0:0	6	;
water	116:8	0:0	6	p_v
op	116:12	0:0	6	+=
water	116:15	0:0	6	i_source_margin_c
water	116:32	0:0	6	;
water	117:8	0:0	6	p_line1
op	117:16	0:0	6	+=
water	117:19	0:0	6	i_dest_margin
water	117:32	0:0	6	;
water	118:8	0:0	6	p_line2
op	118:16	0:0	6	+=
water	118:19	0:0	6	i_dest_margin
water	118:32	0:0	6	;
water	119:4	0:0	6	}
water	122:4	0:0	4	MMX_END
water	122:11	0:0	4	;
water	125:4	0:0	4	}
if	132:4	157:4	2	(0 == ( 15 & ( p_source -> p [ Y_PLANE ] . i_pitch | p_dest -> p -> i_pitch | ( ( intptr_t ) p_line2 | ( intptr_t ) p_y2 ) ) ))
cond	132:8	133:43	3	0 == ( 15 & ( p_source -> p [ Y_PLANE ] . i_pitch | p_dest -> p -> i_pitch | ( ( intptr_t ) p_line2 | ( intptr_t ) p_y2 ) ) )
water	132:8	0:0	4	0
op	132:10	0:0	4	==
water	132:13	0:0	4	(
water	132:14	0:0	4	15
op	132:17	0:0	4	&
water	132:19	0:0	4	(
water	132:20	0:0	4	p_source
op	132:28	0:0	4	->
water	132:30	0:0	4	p
op	132:31	0:0	4	[
water	132:32	0:0	4	Y_PLANE
op	132:39	0:0	4	]
op	132:40	0:0	4	.
water	132:41	0:0	4	i_pitch
op	132:48	0:0	4	|
water	132:49	0:0	4	p_dest
op	132:55	0:0	4	->
water	132:57	0:0	4	p
op	132:58	0:0	4	->
water	132:60	0:0	4	i_pitch
op	132:67	0:0	4	|
water	133:8	0:0	4	(
water	133:9	0:0	4	(
water	133:10	0:0	4	intptr_t
water	133:18	0:0	4	)
water	133:19	0:0	4	p_line2
op	133:26	0:0	4	|
water	133:27	0:0	4	(
water	133:28	0:0	4	intptr_t
water	133:36	0:0	4	)
water	133:37	0:0	4	p_y2
water	133:41	0:0	4	)
water	133:42	0:0	4	)
water	133:43	0:0	4	)
stmts	134:4	157:4	3	
water	134:4	0:0	4	{
for	136:8	156:8	4	(i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 2 ;i_y --;)
forinit	136:13	136:101	5	i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 2 ;
water	136:13	0:0	6	i_y
op	136:17	0:0	6	=
water	136:19	0:0	6	(
water	136:20	0:0	6	p_filter
op	136:28	0:0	6	->
water	136:30	0:0	6	fmt_in
op	136:36	0:0	6	.
water	136:37	0:0	6	video
op	136:42	0:0	6	.
water	136:43	0:0	6	i_y_offset
op	136:54	0:0	6	+
water	136:56	0:0	6	p_filter
op	136:64	0:0	6	->
water	136:66	0:0	6	fmt_in
op	136:72	0:0	6	.
water	136:73	0:0	6	video
op	136:78	0:0	6	.
water	136:79	0:0	6	i_visible_height
water	136:95	0:0	6	)
op	136:97	0:0	6	/
water	136:99	0:0	6	2
water	136:101	0:0	6	;
cond	136:103	136:106	5	i_y --
water	136:103	0:0	6	i_y
op	136:106	0:0	6	--
forexpr	0:0	0:0	5	
stmts	137:8	156:8	5	
water	137:8	0:0	6	{
water	138:12	0:0	6	p_line1
op	138:20	0:0	6	=
water	138:22	0:0	6	p_line2
water	138:29	0:0	6	;
water	139:12	0:0	6	p_line2
op	139:20	0:0	6	+=
water	139:23	0:0	6	p_dest
op	139:29	0:0	6	->
water	139:31	0:0	6	p
op	139:32	0:0	6	->
water	139:34	0:0	6	i_pitch
water	139:41	0:0	6	;
water	140:12	0:0	6	p_y1
op	140:17	0:0	6	=
water	140:19	0:0	6	p_y2
water	140:23	0:0	6	;
water	141:12	0:0	6	p_y2
op	141:17	0:0	6	+=
water	141:20	0:0	6	p_source
op	141:28	0:0	6	->
water	141:30	0:0	6	p
op	141:31	0:0	6	[
water	141:32	0:0	6	Y_PLANE
op	141:39	0:0	6	]
op	141:40	0:0	6	.
water	141:41	0:0	6	i_pitch
water	141:48	0:0	6	;
for	142:12	145:12	6	(i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 16 ;i_x --;)
forinit	142:17	142:105	7	i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 16 ;
water	142:17	0:0	8	i_x
op	142:21	0:0	8	=
water	142:23	0:0	8	(
water	142:24	0:0	8	p_filter
op	142:32	0:0	8	->
water	142:34	0:0	8	fmt_in
op	142:40	0:0	8	.
water	142:41	0:0	8	video
op	142:46	0:0	8	.
water	142:47	0:0	8	i_x_offset
op	142:58	0:0	8	+
water	142:60	0:0	8	p_filter
op	142:68	0:0	8	->
water	142:70	0:0	8	fmt_in
op	142:76	0:0	8	.
water	142:77	0:0	8	video
op	142:82	0:0	8	.
water	142:83	0:0	8	i_visible_width
water	142:98	0:0	8	)
op	142:100	0:0	8	/
water	142:102	0:0	8	16
water	142:105	0:0	8	;
cond	142:107	142:110	7	i_x --
water	142:107	0:0	8	i_x
op	142:110	0:0	8	--
forexpr	0:0	0:0	7	
stmts	143:12	145:12	7	
water	143:12	0:0	8	{
call	144:16	144:52	8	SSE2_CALL
arg	144:27	144:52	9	SSE2_YUV420_UYVY_ALIGNED
water	144:27	0:0	10	SSE2_YUV420_UYVY_ALIGNED
water	144:53	0:0	8	;
water	145:12	0:0	8	}
for	146:12	149:12	6	(i_x = ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 16 ) / 2 ;i_x --;)
forinit	146:17	146:112	7	i_x = ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 16 ) / 2 ;
water	146:17	0:0	8	i_x
op	146:21	0:0	8	=
water	146:23	0:0	8	(
water	146:25	0:0	8	(
water	146:26	0:0	8	p_filter
op	146:34	0:0	8	->
water	146:36	0:0	8	fmt_in
op	146:42	0:0	8	.
water	146:43	0:0	8	video
op	146:48	0:0	8	.
water	146:49	0:0	8	i_x_offset
op	146:60	0:0	8	+
water	146:62	0:0	8	p_filter
op	146:70	0:0	8	->
water	146:72	0:0	8	fmt_in
op	146:78	0:0	8	.
water	146:79	0:0	8	video
op	146:84	0:0	8	.
water	146:85	0:0	8	i_visible_width
water	146:100	0:0	8	)
op	146:102	0:0	8	%
water	146:104	0:0	8	16
water	146:107	0:0	8	)
op	146:109	0:0	8	/
water	146:111	0:0	8	2
water	146:112	0:0	8	;
cond	146:114	146:117	7	i_x --
water	146:114	0:0	8	i_x
op	146:117	0:0	8	--
forexpr	0:0	0:0	7	
stmts	147:12	149:12	7	
water	147:12	0:0	8	{
call	148:16	148:31	8	C_YUV420_UYVY
water	148:32	0:0	8	;
water	149:12	0:0	8	}
water	150:12	0:0	6	p_y1
op	150:17	0:0	6	+=
water	150:20	0:0	6	i_source_margin
water	150:35	0:0	6	;
water	151:12	0:0	6	p_y2
op	151:17	0:0	6	+=
water	151:20	0:0	6	i_source_margin
water	151:35	0:0	6	;
water	152:12	0:0	6	p_u
op	152:16	0:0	6	+=
water	152:19	0:0	6	i_source_margin_c
water	152:36	0:0	6	;
water	153:12	0:0	6	p_v
op	153:16	0:0	6	+=
water	153:19	0:0	6	i_source_margin_c
water	153:36	0:0	6	;
water	154:12	0:0	6	p_line1
op	154:20	0:0	6	+=
water	154:23	0:0	6	i_dest_margin
water	154:36	0:0	6	;
water	155:12	0:0	6	p_line2
op	155:20	0:0	6	+=
water	155:23	0:0	6	i_dest_margin
water	155:36	0:0	6	;
water	156:8	0:0	6	}
water	157:4	0:0	4	}
else	158:4	182:4	2
stmts	159:4	182:4	3	
water	159:4	0:0	4	{
for	161:8	181:8	4	(i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 2 ;i_y --;)
forinit	161:13	161:101	5	i_y = ( p_filter -> fmt_in . video . i_y_offset + p_filter -> fmt_in . video . i_visible_height ) / 2 ;
water	161:13	0:0	6	i_y
op	161:17	0:0	6	=
water	161:19	0:0	6	(
water	161:20	0:0	6	p_filter
op	161:28	0:0	6	->
water	161:30	0:0	6	fmt_in
op	161:36	0:0	6	.
water	161:37	0:0	6	video
op	161:42	0:0	6	.
water	161:43	0:0	6	i_y_offset
op	161:54	0:0	6	+
water	161:56	0:0	6	p_filter
op	161:64	0:0	6	->
water	161:66	0:0	6	fmt_in
op	161:72	0:0	6	.
water	161:73	0:0	6	video
op	161:78	0:0	6	.
water	161:79	0:0	6	i_visible_height
water	161:95	0:0	6	)
op	161:97	0:0	6	/
water	161:99	0:0	6	2
water	161:101	0:0	6	;
cond	161:103	161:106	5	i_y --
water	161:103	0:0	6	i_y
op	161:106	0:0	6	--
forexpr	0:0	0:0	5	
stmts	162:8	181:8	5	
water	162:8	0:0	6	{
water	163:12	0:0	6	p_line1
op	163:20	0:0	6	=
water	163:22	0:0	6	p_line2
water	163:29	0:0	6	;
water	164:12	0:0	6	p_line2
op	164:20	0:0	6	+=
water	164:23	0:0	6	p_dest
op	164:29	0:0	6	->
water	164:31	0:0	6	p
op	164:32	0:0	6	->
water	164:34	0:0	6	i_pitch
water	164:41	0:0	6	;
water	165:12	0:0	6	p_y1
op	165:17	0:0	6	=
water	165:19	0:0	6	p_y2
water	165:23	0:0	6	;
water	166:12	0:0	6	p_y2
op	166:17	0:0	6	+=
water	166:20	0:0	6	p_source
op	166:28	0:0	6	->
water	166:30	0:0	6	p
op	166:31	0:0	6	[
water	166:32	0:0	6	Y_PLANE
op	166:39	0:0	6	]
op	166:40	0:0	6	.
water	166:41	0:0	6	i_pitch
water	166:48	0:0	6	;
for	167:12	170:12	6	(i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 16 ;i_x --;)
forinit	167:17	167:105	7	i_x = ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) / 16 ;
water	167:17	0:0	8	i_x
op	167:21	0:0	8	=
water	167:23	0:0	8	(
water	167:24	0:0	8	p_filter
op	167:32	0:0	8	->
water	167:34	0:0	8	fmt_in
op	167:40	0:0	8	.
water	167:41	0:0	8	video
op	167:46	0:0	8	.
water	167:47	0:0	8	i_x_offset
op	167:58	0:0	8	+
water	167:60	0:0	8	p_filter
op	167:68	0:0	8	->
water	167:70	0:0	8	fmt_in
op	167:76	0:0	8	.
water	167:77	0:0	8	video
op	167:82	0:0	8	.
water	167:83	0:0	8	i_visible_width
water	167:98	0:0	8	)
op	167:100	0:0	8	/
water	167:102	0:0	8	16
water	167:105	0:0	8	;
cond	167:107	167:110	7	i_x --
water	167:107	0:0	8	i_x
op	167:110	0:0	8	--
forexpr	0:0	0:0	7	
stmts	168:12	170:12	7	
water	168:12	0:0	8	{
call	169:16	169:54	8	SSE2_CALL
arg	169:27	169:54	9	SSE2_YUV420_UYVY_UNALIGNED
water	169:27	0:0	10	SSE2_YUV420_UYVY_UNALIGNED
water	169:55	0:0	8	;
water	170:12	0:0	8	}
for	171:12	174:12	6	(i_x = ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 16 ) / 2 ;i_x --;)
forinit	171:17	171:112	7	i_x = ( ( p_filter -> fmt_in . video . i_x_offset + p_filter -> fmt_in . video . i_visible_width ) % 16 ) / 2 ;
water	171:17	0:0	8	i_x
op	171:21	0:0	8	=
water	171:23	0:0	8	(
water	171:25	0:0	8	(
water	171:26	0:0	8	p_filter
op	171:34	0:0	8	->
water	171:36	0:0	8	fmt_in
op	171:42	0:0	8	.
water	171:43	0:0	8	video
op	171:48	0:0	8	.
water	171:49	0:0	8	i_x_offset
op	171:60	0:0	8	+
water	171:62	0:0	8	p_filter
op	171:70	0:0	8	->
water	171:72	0:0	8	fmt_in
op	171:78	0:0	8	.
water	171:79	0:0	8	video
op	171:84	0:0	8	.
water	171:85	0:0	8	i_visible_width
water	171:100	0:0	8	)
op	171:102	0:0	8	%
water	171:104	0:0	8	16
water	171:107	0:0	8	)
op	171:109	0:0	8	/
water	171:111	0:0	8	2
water	171:112	0:0	8	;
cond	171:114	171:117	7	i_x --
water	171:114	0:0	8	i_x
op	171:117	0:0	8	--
forexpr	0:0	0:0	7	
stmts	172:12	174:12	7	
water	172:12	0:0	8	{
call	173:16	173:31	8	C_YUV420_UYVY
water	173:32	0:0	8	;
water	174:12	0:0	8	}
water	175:12	0:0	6	p_y1
op	175:17	0:0	6	+=
water	175:20	0:0	6	i_source_margin
water	175:35	0:0	6	;
water	176:12	0:0	6	p_y2
op	176:17	0:0	6	+=
water	176:20	0:0	6	i_source_margin
water	176:35	0:0	6	;
water	177:12	0:0	6	p_u
op	177:16	0:0	6	+=
water	177:19	0:0	6	i_source_margin_c
water	177:36	0:0	6	;
water	178:12	0:0	6	p_v
op	178:16	0:0	6	+=
water	178:19	0:0	6	i_source_margin_c
water	178:36	0:0	6	;
water	179:12	0:0	6	p_line1
op	179:20	0:0	6	+=
water	179:23	0:0	6	i_dest_margin
water	179:36	0:0	6	;
water	180:12	0:0	6	p_line2
op	180:20	0:0	6	+=
water	180:23	0:0	6	i_dest_margin
water	180:36	0:0	6	;
water	181:8	0:0	6	}
water	182:4	0:0	4	}
water	184:4	0:0	2	SSE2_END
water	184:12	0:0	2	;
