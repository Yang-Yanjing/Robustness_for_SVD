func	2:0	45:0	0	void	GrabVBI
params	2:13	0:0	1	
param	2:14	2:30	2	demux_t *	p_demux
param	2:32	2:51	2	vlc_v4l2_vbi_t *	vbi
stmnts	0:0	44:28	1	
decl	4:4	4:36	2	vbi_capture_buffer	*sliced_bytes
decl	5:4	5:32	2	struct timeval	timeout
op	5:26	0:0	2	=
water	5:27	0:0	2	{
water	5:28	0:0	2	0
water	5:29	0:0	2	,
water	5:30	0:0	2	0
water	5:31	0:0	2	}
decl	6:4	6:32	2	int	canc
op	6:13	0:0	2	=
call	6:15	6:31	3	vlc_savecancel
decl	7:4	7:71	2	int	r
op	7:10	0:0	2	=
call	7:12	7:70	3	vbi_capture_pull_sliced
arg	7:37	7:45	4	vbi->cap
water	7:37	0:0	5	vbi
op	7:40	0:0	5	->
water	7:42	0:0	5	cap
arg	7:47	7:60	4	&sliced_bytes
op	7:47	0:0	5	&
water	7:48	0:0	5	sliced_bytes
arg	7:62	7:70	4	&timeout
op	7:62	0:0	5	&
water	7:63	0:0	5	timeout
switch	8:4	43:4	2	(r)
cond	8:12	8:12	3	r
water	8:12	0:0	4	r
stmts	8:15	43:4	3	
water	8:15	0:0	4	{
water	9:8	0:0	4	case
op	9:13	0:0	4	-
water	9:14	0:0	4	1
water	9:15	0:0	4	:
call	10:12	10:76	4	msg_Err
arg	10:21	10:28	5	p_demux
water	10:21	0:0	6	p_demux
arg	10:30	10:53	5	"error reading VBI: %s"
water	10:30	0:0	6	"error reading VBI: %s"
arg	10:55	10:76	5	vlc_strerror_c(errno)
call	10:55	10:75	6	vlc_strerror_c
arg	10:70	10:75	7	errno
water	10:70	0:0	8	errno
water	10:77	0:0	4	;
label	11:8	11:15	4	case 0 :
break	12:12	12:17	4	
label	13:8	13:15	4	case 1 :
water	14:8	0:0	4	{
decl	15:12	15:65	4	int	n_lines
op	15:24	0:0	4	=
water	15:26	0:0	4	sliced_bytes
op	15:38	0:0	4	->
water	15:40	0:0	4	size
op	15:45	0:0	4	/
op	15:47	0:0	4	sizeof
water	15:53	0:0	4	(
water	15:54	0:0	4	vbi_sliced
water	15:64	0:0	4	)
if	16:12	17:21	4	(! n_lines)
cond	16:16	16:17	5	! n_lines
op	16:16	0:0	6	!
water	16:17	0:0	6	n_lines
stmts	17:16	17:21	5	
break	17:16	17:21	6	
decl	18:12	18:31	4	int	sliced_size
op	18:28	0:0	4	=
water	18:30	0:0	4	2
decl	19:12	19:50	4	int	size
op	19:21	0:0	4	=
water	19:23	0:0	4	(
water	19:24	0:0	4	sliced_size
op	19:36	0:0	4	+
water	19:38	0:0	4	1
water	19:39	0:0	4	)
op	19:41	0:0	4	*
water	19:43	0:0	4	n_lines
decl	20:12	20:49	4	block_t	*p_block
op	20:29	0:0	4	=
call	20:31	20:48	5	block_Alloc
arg	20:44	20:48	6	size
water	20:44	0:0	7	size
if	21:12	22:21	4	(unlikely (p_block == NULL ))
cond	21:16	21:40	5	unlikely (p_block == NULL )
call	21:16	21:40	6	unlikely
arg	21:25	21:40	7	p_block==NULL
water	21:25	0:0	8	p_block
op	21:33	0:0	8	==
water	21:36	0:0	8	NULL
stmts	22:16	22:21	5	
break	22:16	22:21	6	
decl	23:12	23:45	4	uint8_t	*data
op	23:26	0:0	4	=
water	23:28	0:0	4	p_block
op	23:35	0:0	4	->
water	23:37	0:0	4	p_buffer
decl	24:12	24:57	4	vbi_sliced	*sliced_array
op	24:37	0:0	4	=
water	24:39	0:0	4	sliced_bytes
op	24:51	0:0	4	->
water	24:53	0:0	4	data
for	25:12	31:12	4	( int field = 0 ;field < n_lines;field ++)
forinit	0:0	25:30	5	 int field = 0 ;
decl	25:17	25:30	6	int	field
op	25:27	0:0	6	=
water	25:29	0:0	6	0
cond	25:32	25:40	5	field < n_lines
water	25:32	0:0	6	field
op	25:38	0:0	6	<
water	25:40	0:0	6	n_lines
forexpr	25:49	25:54	5	field ++
water	25:49	0:0	6	field
op	25:54	0:0	6	++
stmts	26:12	31:12	5	
water	26:12	0:0	6	{
op	27:16	0:0	6	*
water	27:17	0:0	6	data
op	27:22	0:0	6	=
water	27:24	0:0	6	field
water	27:29	0:0	6	;
water	28:16	0:0	6	data
op	28:20	0:0	6	++
water	28:22	0:0	6	;
call	29:16	29:66	6	memcpy
arg	29:23	29:27	7	data
water	29:23	0:0	8	data
arg	29:29	29:53	7	sliced_array[field].data
water	29:29	0:0	8	sliced_array
op	29:41	0:0	8	[
water	29:42	0:0	8	field
op	29:47	0:0	8	]
op	29:48	0:0	8	.
water	29:49	0:0	8	data
arg	29:55	29:66	7	sliced_size
water	29:55	0:0	8	sliced_size
water	29:67	0:0	6	;
water	30:16	0:0	6	data
op	30:21	0:0	6	+=
water	30:24	0:0	6	sliced_size
water	30:35	0:0	6	;
water	31:12	0:0	6	}
water	32:12	0:0	4	p_block
op	32:19	0:0	4	->
water	32:21	0:0	4	i_pts
op	32:27	0:0	4	=
call	32:29	32:35	4	mdate
water	32:36	0:0	4	;
for	33:12	40:12	4	(unsigned i = 0 ;i < VBI_NUM_CC_STREAMS;i ++)
forinit	33:17	33:31	5	unsigned i = 0 ;
water	33:17	0:0	6	unsigned
water	33:26	0:0	6	i
op	33:28	0:0	6	=
water	33:30	0:0	6	0
water	33:31	0:0	6	;
cond	33:33	33:37	5	i < VBI_NUM_CC_STREAMS
water	33:33	0:0	6	i
op	33:35	0:0	6	<
water	33:37	0:0	6	VBI_NUM_CC_STREAMS
forexpr	33:57	33:58	5	i ++
water	33:57	0:0	6	i
op	33:58	0:0	6	++
stmts	34:12	40:12	5	
water	34:12	0:0	6	{
if	35:16	36:28	6	(vbi -> es [ i ] == NULL)
cond	35:20	35:34	7	vbi -> es [ i ] == NULL
water	35:20	0:0	8	vbi
op	35:23	0:0	8	->
water	35:25	0:0	8	es
op	35:27	0:0	8	[
water	35:28	0:0	8	i
op	35:29	0:0	8	]
op	35:31	0:0	8	==
water	35:34	0:0	8	NULL
stmts	36:20	36:28	7	
continue	36:20	36:28	8	
decl	37:16	37:55	6	block_t	*dup
op	37:29	0:0	6	=
call	37:31	37:54	7	block_Duplicate
arg	37:47	37:54	8	p_block
water	37:47	0:0	9	p_block
if	38:16	39:62	6	(likely (dup != NULL ))
cond	38:20	38:38	7	likely (dup != NULL )
call	38:20	38:38	8	likely
arg	38:27	38:38	9	dup!=NULL
water	38:27	0:0	10	dup
op	38:31	0:0	10	!=
water	38:34	0:0	10	NULL
stmts	39:20	39:62	7	
call	39:20	39:61	8	es_out_Send
arg	39:32	39:44	9	p_demux->out
water	39:32	0:0	10	p_demux
op	39:39	0:0	10	->
water	39:41	0:0	10	out
arg	39:46	39:56	9	vbi->es[i]
water	39:46	0:0	10	vbi
op	39:49	0:0	10	->
water	39:51	0:0	10	es
op	39:53	0:0	10	[
water	39:54	0:0	10	i
op	39:55	0:0	10	]
arg	39:58	39:61	9	dup
water	39:58	0:0	10	dup
water	39:62	0:0	8	;
water	40:12	0:0	6	}
call	41:12	41:33	4	block_Release
arg	41:26	41:33	5	p_block
water	41:26	0:0	6	p_block
water	41:34	0:0	4	;
water	42:8	0:0	4	}
water	43:4	0:0	4	}
call	44:4	44:27	2	vlc_restorecancel
arg	44:23	44:27	3	canc
water	44:23	0:0	4	canc
water	44:28	0:0	2	;
