func	2:0	134:0	0	static void *	Thread
params	2:19	0:0	1	
param	2:21	2:34	2	void *	p_data
stmnts	0:0	133:15	1	
decl	4:4	4:15	2	MSG	message
decl	5:4	5:34	2	intf_thread_t	*p_intf
op	5:26	0:0	2	=
water	5:28	0:0	2	p_data
decl	6:4	6:37	2	intf_sys_t	*p_sys
op	6:22	0:0	2	=
water	6:24	0:0	2	p_intf
op	6:30	0:0	2	->
water	6:32	0:0	2	p_sys
call	8:4	8:33	2	vlc_mutex_lock
arg	8:20	8:33	3	&p_sys->lock
op	8:20	0:0	4	&
water	8:21	0:0	4	p_sys
op	8:26	0:0	4	->
water	8:28	0:0	4	lock
water	8:34	0:0	2	;
water	9:4	0:0	2	p_sys
op	9:9	0:0	2	->
water	9:11	0:0	2	hotkeyWindow
op	9:24	0:0	2	=
water	10:8	0:0	2	(
water	10:9	0:0	2	void
op	10:13	0:0	2	*
water	10:14	0:0	2	)
call	10:15	20:21	2	CreateWindow
arg	10:29	10:41	3	_T("STATIC")
call	10:29	10:40	4	_T
arg	10:32	10:40	5	"STATIC"
water	10:32	0:0	6	"STATIC"
arg	11:16	11:42	3	_T("VLC ghk ")_T(VERSION)
call	11:16	11:29	4	_T
arg	11:19	11:29	5	"VLC ghk "
water	11:19	0:0	6	"VLC ghk "
call	11:31	11:41	4	_T
arg	11:34	11:41	5	VERSION
water	11:34	0:0	6	VERSION
arg	12:16	12:17	3	0
water	12:16	0:0	4	0
arg	13:16	13:17	3	0
water	13:16	0:0	4	0
arg	14:16	14:17	3	0
water	14:16	0:0	4	0
arg	15:16	15:17	3	0
water	15:16	0:0	4	0
arg	16:16	16:17	3	0
water	16:16	0:0	4	0
arg	17:16	17:20	3	NULL
water	17:16	0:0	4	NULL
arg	18:16	18:20	3	NULL
water	18:16	0:0	4	NULL
arg	19:16	19:37	3	GetModuleHandle(NULL)
call	19:16	19:36	4	GetModuleHandle
arg	19:32	19:36	5	NULL
water	19:32	0:0	6	NULL
arg	20:16	20:21	3	NULL
water	20:16	0:0	4	NULL
water	20:22	0:0	2	;
if	21:4	27:4	2	(p_sys -> hotkeyWindow == NULL)
cond	21:8	21:31	3	p_sys -> hotkeyWindow == NULL
water	21:8	0:0	4	p_sys
op	21:13	0:0	4	->
water	21:15	0:0	4	hotkeyWindow
op	21:28	0:0	4	==
water	21:31	0:0	4	NULL
stmts	22:4	27:4	3	
water	22:4	0:0	4	{
water	23:8	0:0	4	p_sys
op	23:13	0:0	4	->
water	23:15	0:0	4	hotkeyWindow
op	23:28	0:0	4	=
water	23:30	0:0	4	INVALID_HANDLE_VALUE
water	23:50	0:0	4	;
call	24:8	24:38	4	vlc_cond_signal
arg	24:25	24:38	5	&p_sys->wait
op	24:25	0:0	6	&
water	24:26	0:0	6	p_sys
op	24:31	0:0	6	->
water	24:33	0:0	6	wait
water	24:39	0:0	4	;
call	25:8	25:39	4	vlc_mutex_unlock
arg	25:26	25:39	5	&p_sys->lock
op	25:26	0:0	6	&
water	25:27	0:0	6	p_sys
op	25:32	0:0	6	->
water	25:34	0:0	6	lock
water	25:40	0:0	4	;
return	26:8	26:19	4	NULL
water	26:15	0:0	5	NULL
water	27:4	0:0	4	}
call	28:4	28:34	2	vlc_cond_signal
arg	28:21	28:34	3	&p_sys->wait
op	28:21	0:0	4	&
water	28:22	0:0	4	p_sys
op	28:27	0:0	4	->
water	28:29	0:0	4	wait
water	28:35	0:0	2	;
call	29:4	29:35	2	vlc_mutex_unlock
arg	29:22	29:35	3	&p_sys->lock
op	29:22	0:0	4	&
water	29:23	0:0	4	p_sys
op	29:28	0:0	4	->
water	29:30	0:0	4	lock
water	29:36	0:0	2	;
call	30:4	31:35	2	SetWindowLongPtr
arg	30:22	30:41	3	p_sys->hotkeyWindow
water	30:22	0:0	4	p_sys
op	30:27	0:0	4	->
water	30:29	0:0	4	hotkeyWindow
arg	30:43	30:55	3	GWLP_WNDPROC
water	30:43	0:0	4	GWLP_WNDPROC
arg	31:12	31:35	3	(LONG_PTR)WMHOTKEYPROC
water	31:12	0:0	4	(
water	31:13	0:0	4	LONG_PTR
water	31:21	0:0	4	)
water	31:22	0:0	4	WMHOTKEYPROC
water	31:36	0:0	2	;
call	32:4	33:29	2	SetWindowLongPtr
arg	32:22	32:41	3	p_sys->hotkeyWindow
water	32:22	0:0	4	p_sys
op	32:27	0:0	4	->
water	32:29	0:0	4	hotkeyWindow
arg	32:43	32:56	3	GWLP_USERDATA
water	32:43	0:0	4	GWLP_USERDATA
arg	33:12	33:29	3	(LONG_PTR)p_intf
water	33:12	0:0	4	(
water	33:13	0:0	4	LONG_PTR
water	33:21	0:0	4	)
water	33:22	0:0	4	p_intf
water	33:30	0:0	2	;
for	35:4	114:4	2	( const struct hotkey * p_hotkey = p_intf -> p_libvlc -> p_hotkeys ;p_hotkey -> psz_action != NULL;p_hotkey ++)
forinit	0:0	35:68	3	 const struct hotkey * p_hotkey = p_intf -> p_libvlc -> p_hotkeys ;
decl	35:9	35:68	4	const struct hotkey	*p_hotkey
op	35:39	0:0	4	=
water	35:41	0:0	4	p_intf
op	35:47	0:0	4	->
water	35:49	0:0	4	p_libvlc
op	35:57	0:0	4	->
water	35:59	0:0	4	p_hotkeys
cond	36:12	36:36	3	p_hotkey -> psz_action != NULL
water	36:12	0:0	4	p_hotkey
op	36:20	0:0	4	->
water	36:22	0:0	4	psz_action
op	36:33	0:0	4	!=
water	36:36	0:0	4	NULL
forexpr	37:12	37:20	3	p_hotkey ++
water	37:12	0:0	4	p_hotkey
op	37:20	0:0	4	++
stmts	38:4	114:4	3	
water	38:4	0:0	4	{
decl	39:8	39:57	4	char	varname[12+strlen(p_hotkey->psz_action)]
call	40:8	40:64	4	sprintf
arg	40:17	40:24	5	varname
water	40:17	0:0	6	varname
arg	40:26	40:41	5	"global-key-%s"
water	40:26	0:0	6	"global-key-%s"
arg	40:43	40:64	5	p_hotkey->psz_action
water	40:43	0:0	6	p_hotkey
op	40:51	0:0	6	->
water	40:53	0:0	6	psz_action
water	40:65	0:0	4	;
decl	41:8	41:56	4	char	*key
op	41:18	0:0	4	=
call	41:20	41:55	5	var_InheritString
arg	41:39	41:45	6	p_intf
water	41:39	0:0	7	p_intf
arg	41:47	41:55	6	varname
water	41:47	0:0	7	varname
if	42:8	43:20	4	(key == NULL)
cond	42:12	42:19	5	key == NULL
water	42:12	0:0	6	key
op	42:16	0:0	6	==
water	42:19	0:0	6	NULL
stmts	43:12	43:20	5	
continue	43:12	43:20	6	
decl	44:8	44:43	4	UINT	i_key
op	44:19	0:0	4	=
call	44:21	44:42	5	vlc_str2keycode
arg	44:38	44:42	6	key
water	44:38	0:0	7	key
call	45:8	45:18	4	free
arg	45:14	45:18	5	key
water	45:14	0:0	6	key
water	45:19	0:0	4	;
if	46:8	47:20	4	(i_key == KEY_UNSET)
cond	46:12	46:21	5	i_key == KEY_UNSET
water	46:12	0:0	6	i_key
op	46:18	0:0	6	==
water	46:21	0:0	6	KEY_UNSET
stmts	47:12	47:20	5	
continue	47:12	47:20	6	
decl	48:8	48:25	4	UINT	i_keyMod
op	48:22	0:0	4	=
water	48:24	0:0	4	0
if	49:8	49:62	4	(i_key & KEY_MODIFIER_SHIFT)
cond	49:12	49:20	5	i_key & KEY_MODIFIER_SHIFT
water	49:12	0:0	6	i_key
op	49:18	0:0	6	&
water	49:20	0:0	6	KEY_MODIFIER_SHIFT
stmts	49:41	49:62	5	
water	49:41	0:0	6	i_keyMod
op	49:50	0:0	6	|=
water	49:53	0:0	6	MOD_SHIFT
water	49:62	0:0	6	;
if	50:8	50:58	4	(i_key & KEY_MODIFIER_ALT)
cond	50:12	50:20	5	i_key & KEY_MODIFIER_ALT
water	50:12	0:0	6	i_key
op	50:18	0:0	6	&
water	50:20	0:0	6	KEY_MODIFIER_ALT
stmts	50:39	50:58	5	
water	50:39	0:0	6	i_keyMod
op	50:48	0:0	6	|=
water	50:51	0:0	6	MOD_ALT
water	50:58	0:0	6	;
if	51:8	51:63	4	(i_key & KEY_MODIFIER_CTRL)
cond	51:12	51:20	5	i_key & KEY_MODIFIER_CTRL
water	51:12	0:0	6	i_key
op	51:18	0:0	6	&
water	51:20	0:0	6	KEY_MODIFIER_CTRL
stmts	51:40	51:63	5	
water	51:40	0:0	6	i_keyMod
op	51:49	0:0	6	|=
water	51:52	0:0	6	MOD_CONTROL
water	51:63	0:0	6	;
decl	69:8	69:21	4	UINT	i_vk
op	69:18	0:0	4	=
water	69:20	0:0	4	0
switch	70:8	106:8	4	(i_key & ~KEY_MODIFIER)
cond	70:16	70:24	5	i_key & ~KEY_MODIFIER
water	70:16	0:0	6	i_key
op	70:22	0:0	6	&
water	70:24	0:0	6	~KEY_MODIFIER
stmts	71:8	106:8	5	
water	71:8	0:0	6	{
call	72:12	72:25	6	HANDLE
arg	72:20	72:25	7	LEFT
water	72:20	0:0	8	LEFT
water	72:26	0:0	6	;
call	73:12	73:26	6	HANDLE
arg	73:20	73:26	7	RIGHT
water	73:20	0:0	8	RIGHT
water	73:27	0:0	6	;
call	74:12	74:23	6	HANDLE
arg	74:20	74:23	7	UP
water	74:20	0:0	8	UP
water	74:24	0:0	6	;
call	75:12	75:25	6	HANDLE
arg	75:20	75:25	7	DOWN
water	75:20	0:0	8	DOWN
water	75:26	0:0	6	;
call	76:12	76:26	6	HANDLE
arg	76:20	76:26	7	SPACE
water	76:20	0:0	8	SPACE
water	76:27	0:0	6	;
call	77:12	77:33	6	HANDLE2
arg	77:21	77:24	7	ESC
water	77:21	0:0	8	ESC
arg	77:26	77:33	7	ESCAPE
water	77:26	0:0	8	ESCAPE
water	77:34	0:0	6	;
call	78:12	78:35	6	HANDLE2
arg	78:21	78:26	7	ENTER
water	78:21	0:0	8	ENTER
arg	78:28	78:35	7	RETURN
water	78:28	0:0	8	RETURN
water	78:36	0:0	6	;
call	79:12	79:23	6	HANDLE
arg	79:20	79:23	7	F1
water	79:20	0:0	8	F1
water	79:24	0:0	6	;
call	80:12	80:23	6	HANDLE
arg	80:20	80:23	7	F2
water	80:20	0:0	8	F2
water	80:24	0:0	6	;
call	81:12	81:23	6	HANDLE
arg	81:20	81:23	7	F3
water	81:20	0:0	8	F3
water	81:24	0:0	6	;
call	82:12	82:23	6	HANDLE
arg	82:20	82:23	7	F4
water	82:20	0:0	8	F4
water	82:24	0:0	6	;
call	83:12	83:23	6	HANDLE
arg	83:20	83:23	7	F5
water	83:20	0:0	8	F5
water	83:24	0:0	6	;
call	84:12	84:23	6	HANDLE
arg	84:20	84:23	7	F6
water	84:20	0:0	8	F6
water	84:24	0:0	6	;
call	85:12	85:23	6	HANDLE
arg	85:20	85:23	7	F7
water	85:20	0:0	8	F7
water	85:24	0:0	6	;
call	86:12	86:23	6	HANDLE
arg	86:20	86:23	7	F8
water	86:20	0:0	8	F8
water	86:24	0:0	6	;
call	87:12	87:23	6	HANDLE
arg	87:20	87:23	7	F9
water	87:20	0:0	8	F9
water	87:24	0:0	6	;
call	88:12	88:24	6	HANDLE
arg	88:20	88:24	7	F10
water	88:20	0:0	8	F10
water	88:25	0:0	6	;
call	89:12	89:24	6	HANDLE
arg	89:20	89:24	7	F11
water	89:20	0:0	8	F11
water	89:25	0:0	6	;
call	90:12	90:24	6	HANDLE
arg	90:20	90:24	7	F12
water	90:20	0:0	8	F12
water	90:25	0:0	6	;
call	91:12	91:27	6	HANDLE
arg	91:20	91:27	7	PAGEUP
water	91:20	0:0	8	PAGEUP
water	91:28	0:0	6	;
call	92:12	92:29	6	HANDLE
arg	92:20	92:29	7	PAGEDOWN
water	92:20	0:0	8	PAGEDOWN
water	92:30	0:0	6	;
call	93:12	93:25	6	HANDLE
arg	93:20	93:25	7	HOME
water	93:20	0:0	8	HOME
water	93:26	0:0	6	;
call	94:12	94:24	6	HANDLE
arg	94:20	94:24	7	END
water	94:20	0:0	8	END
water	94:25	0:0	6	;
call	95:12	95:27	6	HANDLE
arg	95:20	95:27	7	INSERT
water	95:20	0:0	8	INSERT
water	95:28	0:0	6	;
call	96:12	96:27	6	HANDLE
arg	96:20	96:27	7	DELETE
water	96:20	0:0	8	DELETE
water	96:28	0:0	6	;
call	97:12	97:32	6	HANDLE
arg	97:20	97:32	7	VOLUME_DOWN
water	97:20	0:0	8	VOLUME_DOWN
water	97:33	0:0	6	;
call	98:12	98:30	6	HANDLE
arg	98:20	98:30	7	VOLUME_UP
water	98:20	0:0	8	VOLUME_UP
water	98:31	0:0	6	;
call	99:12	99:37	6	HANDLE
arg	99:20	99:37	7	MEDIA_PLAY_PAUSE
water	99:20	0:0	8	MEDIA_PLAY_PAUSE
water	99:38	0:0	6	;
call	100:12	100:31	6	HANDLE
arg	100:20	100:31	7	MEDIA_STOP
water	100:20	0:0	8	MEDIA_STOP
water	100:32	0:0	6	;
call	101:12	101:37	6	HANDLE
arg	101:20	101:37	7	MEDIA_PREV_TRACK
water	101:20	0:0	8	MEDIA_PREV_TRACK
water	101:38	0:0	6	;
call	102:12	102:37	6	HANDLE
arg	102:20	102:37	7	MEDIA_NEXT_TRACK
water	102:20	0:0	8	MEDIA_NEXT_TRACK
water	102:38	0:0	6	;
label	103:12	103:19	6	default :
water	104:16	0:0	6	i_vk
op	104:21	0:0	6	=
call	104:23	104:65	6	toupper
arg	104:32	104:65	7	(uint8_t)(i_key&~KEY_MODIFIER)
call	104:32	104:63	8	(uint8_t)
arg	104:42	104:63	9	i_key&~KEY_MODIFIER
water	104:42	0:0	10	i_key
op	104:48	0:0	10	&
water	104:50	0:0	10	~KEY_MODIFIER
water	104:66	0:0	6	;
break	105:16	105:21	6	
water	106:8	0:0	6	}
if	107:8	107:28	4	(! i_vk)
cond	107:12	107:13	5	! i_vk
op	107:12	0:0	6	!
water	107:13	0:0	6	i_vk
stmts	107:20	107:28	5	
continue	107:20	107:28	6	
decl	110:8	110:58	4	ATOM	atom
op	110:18	0:0	4	=
call	110:20	110:57	5	GlobalAddAtomA
arg	110:36	110:57	6	p_hotkey->psz_action
water	110:36	0:0	7	p_hotkey
op	110:44	0:0	7	->
water	110:46	0:0	7	psz_action
if	111:8	111:28	4	(! atom)
cond	111:12	111:13	5	! atom
op	111:12	0:0	6	!
water	111:13	0:0	6	atom
stmts	111:20	111:28	5	
continue	111:20	111:28	6	
if	112:8	113:36	4	(!RegisterHotKey (p_sys -> hotkeyWindow ,atom ,i_keyMod ,i_vk ))
cond	112:12	112:71	5	!RegisterHotKey (p_sys -> hotkeyWindow ,atom ,i_keyMod ,i_vk )
op	112:12	0:0	6	!
call	112:13	112:71	6	RegisterHotKey
arg	112:29	112:48	7	p_sys->hotkeyWindow
water	112:29	0:0	8	p_sys
op	112:34	0:0	8	->
water	112:36	0:0	8	hotkeyWindow
arg	112:50	112:54	7	atom
water	112:50	0:0	8	atom
arg	112:56	112:64	7	i_keyMod
water	112:56	0:0	8	i_keyMod
arg	112:66	112:71	7	i_vk
water	112:66	0:0	8	i_vk
stmts	113:12	113:36	5	
call	113:12	113:35	6	GlobalDeleteAtom
arg	113:30	113:35	7	atom
water	113:30	0:0	8	atom
water	113:36	0:0	6	;
water	114:4	0:0	4	}
while	116:4	117:35	2	(GetMessage (& message ,NULL ,0 ,0 ))
cond	116:11	116:44	3	GetMessage (& message ,NULL ,0 ,0 )
call	116:11	116:44	4	GetMessage
arg	116:23	116:31	5	&message
op	116:23	0:0	6	&
water	116:24	0:0	6	message
arg	116:33	116:37	5	NULL
water	116:33	0:0	6	NULL
arg	116:39	116:40	5	0
water	116:39	0:0	6	0
arg	116:42	116:44	5	0
water	116:42	0:0	6	0
stmts	117:8	117:35	3	
call	117:8	117:34	4	DispatchMessage
arg	117:25	117:34	5	&message
op	117:25	0:0	6	&
water	117:26	0:0	6	message
water	117:35	0:0	4	;
for	119:4	127:4	2	( const struct hotkey * p_hotkey = p_intf -> p_libvlc -> p_hotkeys ;p_hotkey -> psz_action != NULL;p_hotkey ++)
forinit	0:0	119:68	3	 const struct hotkey * p_hotkey = p_intf -> p_libvlc -> p_hotkeys ;
decl	119:9	119:68	4	const struct hotkey	*p_hotkey
op	119:39	0:0	4	=
water	119:41	0:0	4	p_intf
op	119:47	0:0	4	->
water	119:49	0:0	4	p_libvlc
op	119:57	0:0	4	->
water	119:59	0:0	4	p_hotkeys
cond	120:12	120:36	3	p_hotkey -> psz_action != NULL
water	120:12	0:0	4	p_hotkey
op	120:20	0:0	4	->
water	120:22	0:0	4	psz_action
op	120:33	0:0	4	!=
water	120:36	0:0	4	NULL
forexpr	121:12	121:20	3	p_hotkey ++
water	121:12	0:0	4	p_hotkey
op	121:20	0:0	4	++
stmts	122:4	127:4	3	
water	122:4	0:0	4	{
decl	123:8	123:59	4	ATOM	atom
op	123:18	0:0	4	=
call	123:20	123:58	5	GlobalFindAtomA
arg	123:37	123:58	6	p_hotkey->psz_action
water	123:37	0:0	7	p_hotkey
op	123:45	0:0	7	->
water	123:47	0:0	7	psz_action
if	124:8	124:28	4	(! atom)
cond	124:12	124:13	5	! atom
op	124:12	0:0	6	!
water	124:13	0:0	6	atom
stmts	124:20	124:28	5	
continue	124:20	124:28	6	
if	125:8	126:36	4	(UnregisterHotKey (p_sys -> hotkeyWindow ,atom ))
cond	125:12	125:56	5	UnregisterHotKey (p_sys -> hotkeyWindow ,atom )
call	125:12	125:56	6	UnregisterHotKey
arg	125:30	125:49	7	p_sys->hotkeyWindow
water	125:30	0:0	8	p_sys
op	125:35	0:0	8	->
water	125:37	0:0	8	hotkeyWindow
arg	125:51	125:56	7	atom
water	125:51	0:0	8	atom
stmts	126:12	126:36	5	
call	126:12	126:35	6	GlobalDeleteAtom
arg	126:30	126:35	7	atom
water	126:30	0:0	8	atom
water	126:36	0:0	6	;
water	127:4	0:0	4	}
call	129:4	129:33	2	vlc_mutex_lock
arg	129:20	129:33	3	&p_sys->lock
op	129:20	0:0	4	&
water	129:21	0:0	4	p_sys
op	129:26	0:0	4	->
water	129:28	0:0	4	lock
water	129:34	0:0	2	;
call	130:4	130:39	2	DestroyWindow
arg	130:19	130:39	3	p_sys->hotkeyWindow
water	130:19	0:0	4	p_sys
op	130:24	0:0	4	->
water	130:26	0:0	4	hotkeyWindow
water	130:40	0:0	2	;
water	131:4	0:0	2	p_sys
op	131:9	0:0	2	->
water	131:11	0:0	2	hotkeyWindow
op	131:24	0:0	2	=
water	131:26	0:0	2	NULL
water	131:30	0:0	2	;
call	132:4	132:35	2	vlc_mutex_unlock
arg	132:22	132:35	3	&p_sys->lock
op	132:22	0:0	4	&
water	132:23	0:0	4	p_sys
op	132:28	0:0	4	->
water	132:30	0:0	4	lock
water	132:36	0:0	2	;
return	133:4	133:15	2	NULL
water	133:11	0:0	3	NULL
