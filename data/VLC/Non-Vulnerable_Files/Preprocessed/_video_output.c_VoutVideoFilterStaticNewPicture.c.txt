func	2:0	9:0	0	static picture_t *	VoutVideoFilterStaticNewPicture
params	2:49	0:0	1	
param	2:50	2:66	2	filter_t *	filter
stmnts	0:0	8:56	1	
decl	4:4	4:57	2	vout_thread_t	*vout
op	4:24	0:0	2	=
water	4:26	0:0	2	(
water	4:27	0:0	2	vout_thread_t
op	4:40	0:0	2	*
water	4:41	0:0	2	)
water	4:42	0:0	2	filter
op	4:48	0:0	2	->
water	4:50	0:0	2	p_owner
call	5:4	5:43	2	vlc_assert_locked
arg	5:22	5:43	3	&vout->p->filter.lock
op	5:22	0:0	4	&
water	5:23	0:0	4	vout
op	5:27	0:0	4	->
water	5:29	0:0	4	p
op	5:30	0:0	4	->
water	5:32	0:0	4	filter
op	5:38	0:0	4	.
water	5:39	0:0	4	lock
water	5:44	0:0	2	;
if	6:4	7:59	2	(filter_chain_GetLength (vout -> p -> filter . chain_interactive ) == 0)
cond	6:8	6:69	3	filter_chain_GetLength (vout -> p -> filter . chain_interactive ) == 0
call	6:8	6:64	4	filter_chain_GetLength
arg	6:31	6:64	5	vout->p->filter.chain_interactive
water	6:31	0:0	6	vout
op	6:35	0:0	6	->
water	6:37	0:0	6	p
op	6:38	0:0	6	->
water	6:40	0:0	6	filter
op	6:46	0:0	6	.
water	6:47	0:0	6	chain_interactive
op	6:66	0:0	4	==
water	6:69	0:0	4	0
stmts	7:8	7:59	3	
return	7:8	7:59	4	VoutVideoFilterInteractiveNewPicture(filter)
call	7:15	7:58	5	VoutVideoFilterInteractiveNewPicture
arg	7:52	7:58	6	filter
water	7:52	0:0	7	filter
return	8:4	8:56	2	picture_NewFromFormat(&filter->fmt_out.video)
call	8:11	8:55	3	picture_NewFromFormat
arg	8:33	8:55	4	&filter->fmt_out.video
op	8:33	0:0	5	&
water	8:34	0:0	5	filter
op	8:40	0:0	5	->
water	8:42	0:0	5	fmt_out
op	8:49	0:0	5	.
water	8:50	0:0	5	video
