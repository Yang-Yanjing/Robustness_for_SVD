func	2:9	129:0	0		dvb_enum_systems
params	2:26	0:0	1	
param	2:27	2:42	2	dvb_device_t *	d
stmnts	4:4	128:18	1	
if	4:4	5:16	2	(dvb_open_frontend (d ))
cond	4:8	4:28	3	dvb_open_frontend (d )
call	4:8	4:28	4	dvb_open_frontend
arg	4:27	4:28	5	d
water	4:27	0:0	6	d
stmts	5:8	5:16	3	
return	5:8	5:16	4	0
water	5:15	0:0	5	0
decl	7:4	10:5	2	struct dtv_property	prop[2]
op	7:32	0:0	2	=
water	7:34	0:0	2	{
water	8:8	0:0	2	{
op	8:10	0:0	2	.
water	8:11	0:0	2	cmd
op	8:15	0:0	2	=
water	8:17	0:0	2	DTV_API_VERSION
water	8:33	0:0	2	}
water	8:34	0:0	2	,
water	9:8	0:0	2	{
op	9:10	0:0	2	.
water	9:11	0:0	2	cmd
op	9:15	0:0	2	=
water	9:17	0:0	2	DTV_ENUM_DELSYS
water	9:33	0:0	2	}
water	9:34	0:0	2	,
water	10:4	0:0	2	}
decl	11:4	14:5	2	struct dtv_properties	props
op	11:32	0:0	2	=
water	11:34	0:0	2	{
op	12:8	0:0	2	.
water	12:9	0:0	2	num
op	12:13	0:0	2	=
water	12:15	0:0	2	2
water	12:16	0:0	2	,
op	13:8	0:0	2	.
water	13:9	0:0	2	props
op	13:15	0:0	2	=
water	13:17	0:0	2	prop
water	14:4	0:0	2	}
if	15:4	20:4	2	(ioctl (d -> frontend ,FE_GET_PROPERTY ,& props ) < 0)
cond	15:8	15:55	3	ioctl (d -> frontend ,FE_GET_PROPERTY ,& props ) < 0
call	15:8	15:51	4	ioctl
arg	15:15	15:26	5	d->frontend
water	15:15	0:0	6	d
op	15:16	0:0	6	->
water	15:18	0:0	6	frontend
arg	15:28	15:43	5	FE_GET_PROPERTY
water	15:28	0:0	6	FE_GET_PROPERTY
arg	15:45	15:51	5	&props
op	15:45	0:0	6	&
water	15:46	0:0	6	props
op	15:53	0:0	4	<
water	15:55	0:0	4	0
stmts	16:4	20:4	3	
water	16:4	0:0	4	{
call	17:9	18:39	4	msg_Err
arg	17:18	17:24	5	d->obj
water	17:18	0:0	6	d
op	17:19	0:0	6	->
water	17:21	0:0	6	obj
arg	17:26	17:65	5	"cannot enumerate frontend systems: %s"
water	17:26	0:0	6	"cannot enumerate frontend systems: %s"
arg	18:18	18:39	5	vlc_strerror_c(errno)
call	18:18	18:38	6	vlc_strerror_c
arg	18:33	18:38	7	errno
water	18:33	0:0	8	errno
water	18:40	0:0	4	;
goto	19:9	19:20	4	legacy
water	19:14	0:0	5	legacy
water	20:4	0:0	4	}
water	21:4	0:0	2	static
water	21:11	0:0	2	const
water	21:17	0:0	2	unsigned
water	21:26	0:0	2	systab
op	21:32	0:0	2	[
op	21:33	0:0	2	]
op	21:35	0:0	2	=
water	21:37	0:0	2	{
op	22:8	0:0	2	[
water	22:9	0:0	2	SYS_UNDEFINED
op	22:22	0:0	2	]
op	22:27	0:0	2	=
water	22:29	0:0	2	0
water	22:30	0:0	2	,
op	23:8	0:0	2	[
water	23:9	0:0	2	SYS_DVBC_ANNEX_A
op	23:25	0:0	2	]
op	23:27	0:0	2	=
water	23:29	0:0	2	DVB_C
water	23:34	0:0	2	,
op	24:8	0:0	2	[
water	24:9	0:0	2	SYS_DVBC_ANNEX_B
op	24:25	0:0	2	]
op	24:27	0:0	2	=
water	24:29	0:0	2	CQAM
water	24:33	0:0	2	,
op	25:8	0:0	2	[
water	25:9	0:0	2	SYS_DVBT
op	25:17	0:0	2	]
op	25:27	0:0	2	=
water	25:29	0:0	2	DVB_T
water	25:34	0:0	2	,
op	27:8	0:0	2	[
water	27:9	0:0	2	SYS_DVBS
op	27:17	0:0	2	]
op	27:27	0:0	2	=
water	27:29	0:0	2	DVB_S
water	27:34	0:0	2	,
op	28:8	0:0	2	[
water	28:9	0:0	2	SYS_DVBS2
op	28:18	0:0	2	]
op	28:27	0:0	2	=
water	28:29	0:0	2	DVB_S2
water	28:35	0:0	2	,
op	30:8	0:0	2	[
water	30:9	0:0	2	SYS_ISDBT
op	30:18	0:0	2	]
op	30:27	0:0	2	=
water	30:29	0:0	2	ISDB_T
water	30:35	0:0	2	,
op	31:8	0:0	2	[
water	31:9	0:0	2	SYS_ISDBS
op	31:18	0:0	2	]
op	31:27	0:0	2	=
water	31:29	0:0	2	ISDB_S
water	31:35	0:0	2	,
op	32:8	0:0	2	[
water	32:9	0:0	2	SYS_ISDBC
op	32:18	0:0	2	]
op	32:27	0:0	2	=
water	32:29	0:0	2	ISDB_C
water	32:35	0:0	2	,
op	33:8	0:0	2	[
water	33:9	0:0	2	SYS_ATSC
op	33:17	0:0	2	]
op	33:27	0:0	2	=
water	33:29	0:0	2	ATSC
water	33:33	0:0	2	,
op	38:8	0:0	2	[
water	38:9	0:0	2	SYS_DVBT2
op	38:18	0:0	2	]
op	38:27	0:0	2	=
water	38:29	0:0	2	DVB_T2
water	38:35	0:0	2	,
op	40:8	0:0	2	[
water	40:9	0:0	2	SYS_DVBC_ANNEX_C
op	40:25	0:0	2	]
op	40:27	0:0	2	=
water	40:29	0:0	2	ISDB_C
water	40:35	0:0	2	,
water	41:4	0:0	2	}
water	41:5	0:0	2	;
water	42:4	0:0	2	unsigned
water	42:13	0:0	2	systems
op	42:21	0:0	2	=
water	42:23	0:0	2	0
water	42:24	0:0	2	;
call	43:4	45:51	2	msg_Dbg
arg	43:13	43:19	3	d->obj
water	43:13	0:0	4	d
op	43:14	0:0	4	->
water	43:16	0:0	4	obj
arg	43:21	43:76	3	"probing frontend (kernel API v%u.%u, user API v%u.%u)"
water	43:21	0:0	4	"probing frontend (kernel API v%u.%u, user API v%u.%u)"
arg	44:13	44:32	3	prop[0].u.data>>8
water	44:13	0:0	4	prop
op	44:17	0:0	4	[
water	44:18	0:0	4	0
op	44:19	0:0	4	]
op	44:20	0:0	4	.
water	44:21	0:0	4	u
op	44:22	0:0	4	.
water	44:23	0:0	4	data
op	44:28	0:0	4	>>
water	44:31	0:0	4	8
arg	44:34	44:55	3	prop[0].u.data&0xFF
water	44:34	0:0	4	prop
op	44:38	0:0	4	[
water	44:39	0:0	4	0
op	44:40	0:0	4	]
op	44:41	0:0	4	.
water	44:42	0:0	4	u
op	44:43	0:0	4	.
water	44:44	0:0	4	data
op	44:49	0:0	4	&
water	44:51	0:0	4	0
water	44:52	0:0	4	xFF
arg	45:13	45:28	3	DVB_API_VERSION
water	45:13	0:0	4	DVB_API_VERSION
arg	45:30	45:51	3	DVB_API_VERSION_MINOR
water	45:30	0:0	4	DVB_API_VERSION_MINOR
water	45:52	0:0	2	;
for	46:4	56:4	2	( size_t i = 0 ;i < prop [ 1 ] . u . buffer . len;i ++)
forinit	0:0	46:21	3	 size_t i = 0 ;
decl	46:9	46:21	4	size_t	i
op	46:18	0:0	4	=
water	46:20	0:0	4	0
cond	46:23	46:44	3	i < prop [ 1 ] . u . buffer . len
water	46:23	0:0	4	i
op	46:25	0:0	4	<
water	46:27	0:0	4	prop
op	46:31	0:0	4	[
water	46:32	0:0	4	1
op	46:33	0:0	4	]
op	46:34	0:0	4	.
water	46:35	0:0	4	u
op	46:36	0:0	4	.
water	46:37	0:0	4	buffer
op	46:43	0:0	4	.
water	46:44	0:0	4	len
forexpr	46:49	46:50	3	i ++
water	46:49	0:0	4	i
op	46:50	0:0	4	++
stmts	47:4	56:4	3	
water	47:4	0:0	4	{
water	48:8	0:0	4	unsigned
water	48:17	0:0	4	sys
op	48:21	0:0	4	=
water	48:23	0:0	4	prop
op	48:27	0:0	4	[
water	48:28	0:0	4	1
op	48:29	0:0	4	]
op	48:30	0:0	4	.
water	48:31	0:0	4	u
op	48:32	0:0	4	.
water	48:33	0:0	4	buffer
op	48:39	0:0	4	.
water	48:40	0:0	4	data
op	48:44	0:0	4	[
water	48:45	0:0	4	i
op	48:46	0:0	4	]
water	48:47	0:0	4	;
if	49:8	53:8	4	(sys >= ( sizeof ( systab ) / sizeof ( systab [ 0 ] ) ) || ! systab [ sys ])
cond	49:12	49:72	5	sys >= ( sizeof ( systab ) / sizeof ( systab [ 0 ] ) ) || ! systab [ sys ]
water	49:12	0:0	6	sys
op	49:16	0:0	6	>=
water	49:19	0:0	6	(
op	49:20	0:0	6	sizeof
water	49:27	0:0	6	(
water	49:28	0:0	6	systab
water	49:34	0:0	6	)
op	49:36	0:0	6	/
op	49:38	0:0	6	sizeof
water	49:45	0:0	6	(
water	49:46	0:0	6	systab
op	49:52	0:0	6	[
water	49:53	0:0	6	0
op	49:54	0:0	6	]
water	49:55	0:0	6	)
water	49:56	0:0	6	)
op	49:58	0:0	6	||
op	49:61	0:0	6	!
water	49:62	0:0	6	systab
op	49:68	0:0	6	[
water	49:69	0:0	6	sys
op	49:72	0:0	6	]
stmts	50:8	53:8	5	
water	50:8	0:0	6	{
call	51:12	51:63	6	msg_Warn
arg	51:22	51:28	7	d->obj
water	51:22	0:0	8	d
op	51:23	0:0	8	->
water	51:25	0:0	8	obj
arg	51:30	51:58	7	"unknown delivery system %u"
water	51:30	0:0	8	"unknown delivery system %u"
arg	51:60	51:63	7	sys
water	51:60	0:0	8	sys
water	51:64	0:0	6	;
continue	52:12	52:20	6	
water	53:8	0:0	6	}
call	54:8	54:42	4	msg_Dbg
arg	54:17	54:23	5	d->obj
water	54:17	0:0	6	d
op	54:18	0:0	6	->
water	54:20	0:0	6	obj
arg	54:25	54:37	5	" system %u"
water	54:25	0:0	6	" system %u"
arg	54:39	54:42	5	sys
water	54:39	0:0	6	sys
water	54:43	0:0	4	;
water	55:8	0:0	4	systems
op	55:16	0:0	4	|=
water	55:19	0:0	4	systab
op	55:25	0:0	4	[
water	55:26	0:0	4	sys
op	55:29	0:0	4	]
water	55:30	0:0	4	;
water	56:4	0:0	4	}
return	57:4	57:18	2	systems
water	57:11	0:0	3	systems
label	58:0	58:6	2	legacy :
water	59:4	0:0	2	props
op	59:9	0:0	2	.
water	59:10	0:0	2	num
op	59:14	0:0	2	=
water	59:16	0:0	2	1
water	59:17	0:0	2	;
decl	61:4	63:5	2	struct dtv_property	prop[1]
op	61:32	0:0	2	=
water	61:34	0:0	2	{
water	62:8	0:0	2	{
op	62:10	0:0	2	.
water	62:11	0:0	2	cmd
op	62:15	0:0	2	=
water	62:17	0:0	2	DTV_API_VERSION
water	62:33	0:0	2	}
water	62:34	0:0	2	,
water	63:4	0:0	2	}
decl	64:4	67:5	2	struct dtv_properties	props
op	64:32	0:0	2	=
water	64:34	0:0	2	{
op	65:8	0:0	2	.
water	65:9	0:0	2	num
op	65:13	0:0	2	=
water	65:15	0:0	2	1
water	65:16	0:0	2	,
op	66:8	0:0	2	.
water	66:9	0:0	2	props
op	66:15	0:0	2	=
water	66:17	0:0	2	prop
water	67:4	0:0	2	}
water	68:4	0:0	2	unsigned
water	68:13	0:0	2	systems
op	68:21	0:0	2	=
water	68:23	0:0	2	0
water	68:24	0:0	2	;
if	70:4	75:4	2	(ioctl (d -> frontend ,FE_GET_PROPERTY ,& props ) < 0)
cond	70:8	70:55	3	ioctl (d -> frontend ,FE_GET_PROPERTY ,& props ) < 0
call	70:8	70:51	4	ioctl
arg	70:15	70:26	5	d->frontend
water	70:15	0:0	6	d
op	70:16	0:0	6	->
water	70:18	0:0	6	frontend
arg	70:28	70:43	5	FE_GET_PROPERTY
water	70:28	0:0	6	FE_GET_PROPERTY
arg	70:45	70:51	5	&props
op	70:45	0:0	6	&
water	70:46	0:0	6	props
op	70:53	0:0	4	<
water	70:55	0:0	4	0
stmts	71:4	75:4	3	
water	71:4	0:0	4	{
call	72:8	73:38	4	msg_Err
arg	72:17	72:23	5	d->obj
water	72:17	0:0	6	d
op	72:18	0:0	6	->
water	72:20	0:0	6	obj
arg	72:25	72:73	5	"unsupported kernel DVB version 3 or older (%s)"
water	72:25	0:0	6	"unsupported kernel DVB version 3 or older (%s)"
arg	73:17	73:38	5	vlc_strerror_c(errno)
call	73:17	73:37	6	vlc_strerror_c
arg	73:32	73:37	7	errno
water	73:32	0:0	8	errno
water	73:39	0:0	4	;
return	74:8	74:16	4	0
water	74:15	0:0	5	0
water	75:4	0:0	4	}
call	76:4	78:51	2	msg_Dbg
arg	76:13	76:19	3	d->obj
water	76:13	0:0	4	d
op	76:14	0:0	4	->
water	76:16	0:0	4	obj
arg	76:21	76:76	3	"probing frontend (kernel API v%u.%u, user API v%u.%u)"
water	76:21	0:0	4	"probing frontend (kernel API v%u.%u, user API v%u.%u)"
arg	77:13	77:32	3	prop[0].u.data>>8
water	77:13	0:0	4	prop
op	77:17	0:0	4	[
water	77:18	0:0	4	0
op	77:19	0:0	4	]
op	77:20	0:0	4	.
water	77:21	0:0	4	u
op	77:22	0:0	4	.
water	77:23	0:0	4	data
op	77:28	0:0	4	>>
water	77:31	0:0	4	8
arg	77:34	77:55	3	prop[0].u.data&0xFF
water	77:34	0:0	4	prop
op	77:38	0:0	4	[
water	77:39	0:0	4	0
op	77:40	0:0	4	]
op	77:41	0:0	4	.
water	77:42	0:0	4	u
op	77:43	0:0	4	.
water	77:44	0:0	4	data
op	77:49	0:0	4	&
water	77:51	0:0	4	0
water	77:52	0:0	4	xFF
arg	78:13	78:28	3	DVB_API_VERSION
water	78:13	0:0	4	DVB_API_VERSION
arg	78:30	78:51	3	DVB_API_VERSION_MINOR
water	78:30	0:0	4	DVB_API_VERSION_MINOR
water	78:52	0:0	2	;
if	83:4	85:77	2	(( prop [ 0 ] . u . data >> 8 ) > 5 || ( ( prop [ 0 ] . u . data >> 8 ) == 5 && ( prop [ 0 ] . u . data & 0 xFF ) >= 5 ))
cond	83:8	84:67	3	( prop [ 0 ] . u . data >> 8 ) > 5 || ( ( prop [ 0 ] . u . data >> 8 ) == 5 && ( prop [ 0 ] . u . data & 0 xFF ) >= 5 )
water	83:8	0:0	4	(
water	83:9	0:0	4	prop
op	83:13	0:0	4	[
water	83:14	0:0	4	0
op	83:15	0:0	4	]
op	83:16	0:0	4	.
water	83:17	0:0	4	u
op	83:18	0:0	4	.
water	83:19	0:0	4	data
op	83:24	0:0	4	>>
water	83:27	0:0	4	8
water	83:28	0:0	4	)
op	83:30	0:0	4	>
water	83:32	0:0	4	5
op	84:5	0:0	4	||
water	84:8	0:0	4	(
water	84:9	0:0	4	(
water	84:10	0:0	4	prop
op	84:14	0:0	4	[
water	84:15	0:0	4	0
op	84:16	0:0	4	]
op	84:17	0:0	4	.
water	84:18	0:0	4	u
op	84:19	0:0	4	.
water	84:20	0:0	4	data
op	84:25	0:0	4	>>
water	84:28	0:0	4	8
water	84:29	0:0	4	)
op	84:31	0:0	4	==
water	84:34	0:0	4	5
op	84:36	0:0	4	&&
water	84:39	0:0	4	(
water	84:40	0:0	4	prop
op	84:44	0:0	4	[
water	84:45	0:0	4	0
op	84:46	0:0	4	]
op	84:47	0:0	4	.
water	84:48	0:0	4	u
op	84:49	0:0	4	.
water	84:50	0:0	4	data
op	84:55	0:0	4	&
water	84:57	0:0	4	0
water	84:58	0:0	4	xFF
water	84:61	0:0	4	)
op	84:63	0:0	4	>=
water	84:66	0:0	4	5
water	84:67	0:0	4	)
stmts	85:8	85:77	3	
call	85:8	85:76	4	msg_Err
arg	85:17	85:23	5	d->obj
water	85:17	0:0	6	d
op	85:18	0:0	6	->
water	85:20	0:0	6	obj
arg	85:25	85:76	5	"obsolete user API version running on a new kernel"
water	85:25	0:0	6	"obsolete user API version running on a new kernel"
water	85:77	0:0	4	;
call	86:8	86:75	2	msg_Info
arg	86:18	86:24	3	d->obj
water	86:18	0:0	4	d
op	86:19	0:0	4	->
water	86:21	0:0	4	obj
arg	86:26	86:75	3	"please recompile "PACKAGE_NAME" "PACKAGE_VERSION
water	86:26	0:0	4	"please recompile "
water	86:45	0:0	4	PACKAGE_NAME
water	86:57	0:0	4	" "
water	86:60	0:0	4	PACKAGE_VERSION
water	86:76	0:0	2	;
decl	88:4	88:33	2	struct dvb_frontend_info	info
if	89:4	94:4	2	(ioctl (d -> frontend ,FE_GET_INFO ,& info ) < 0)
cond	89:8	89:50	3	ioctl (d -> frontend ,FE_GET_INFO ,& info ) < 0
call	89:8	89:46	4	ioctl
arg	89:15	89:26	5	d->frontend
water	89:15	0:0	6	d
op	89:16	0:0	6	->
water	89:18	0:0	6	frontend
arg	89:28	89:39	5	FE_GET_INFO
water	89:28	0:0	6	FE_GET_INFO
arg	89:41	89:46	5	&info
op	89:41	0:0	6	&
water	89:42	0:0	6	info
op	89:48	0:0	4	<
water	89:50	0:0	4	0
stmts	90:4	94:4	3	
water	90:4	0:0	4	{
call	91:8	92:38	4	msg_Err
arg	91:17	91:23	5	d->obj
water	91:17	0:0	6	d
op	91:18	0:0	6	->
water	91:20	0:0	6	obj
arg	91:25	91:55	5	"cannot get frontend info: %s"
water	91:25	0:0	6	"cannot get frontend info: %s"
arg	92:17	92:38	5	vlc_strerror_c(errno)
call	92:17	92:37	6	vlc_strerror_c
arg	92:32	92:37	7	errno
water	92:32	0:0	8	errno
water	92:39	0:0	4	;
return	93:8	93:16	4	0
water	93:15	0:0	5	0
water	94:4	0:0	4	}
call	95:4	95:42	2	msg_Dbg
arg	95:13	95:19	3	d->obj
water	95:13	0:0	4	d
op	95:14	0:0	4	->
water	95:16	0:0	4	obj
arg	95:21	95:31	3	" name %s"
water	95:21	0:0	4	" name %s"
arg	95:33	95:42	3	info.name
water	95:33	0:0	4	info
op	95:37	0:0	4	.
water	95:38	0:0	4	name
water	95:43	0:0	2	;
call	96:4	96:74	2	msg_Dbg
arg	96:13	96:19	3	d->obj
water	96:13	0:0	4	d
op	96:14	0:0	4	->
water	96:16	0:0	4	obj
arg	96:21	96:52	3	" type %u, capabilities 0x%08X"
water	96:21	0:0	4	" type %u, capabilities 0x%08X"
arg	96:54	96:63	3	info.type
water	96:54	0:0	4	info
op	96:58	0:0	4	.
water	96:59	0:0	4	type
arg	96:65	96:74	3	info.caps
water	96:65	0:0	4	info
op	96:69	0:0	4	.
water	96:70	0:0	4	caps
water	96:75	0:0	2	;
call	97:4	98:51	2	msg_Dbg
arg	97:13	97:19	3	d->obj
water	97:13	0:0	4	d
op	97:14	0:0	4	->
water	97:16	0:0	4	obj
arg	97:21	97:60	3	" frequencies %10"PRIu32" to %10"PRIu32
water	97:21	0:0	4	" frequencies %10"
water	97:39	0:0	4	PRIu32
water	97:45	0:0	4	" to %10"
water	97:54	0:0	4	PRIu32
arg	98:13	98:31	3	info.frequency_min
water	98:13	0:0	4	info
op	98:17	0:0	4	.
water	98:18	0:0	4	frequency_min
arg	98:33	98:51	3	info.frequency_max
water	98:33	0:0	4	info
op	98:37	0:0	4	.
water	98:38	0:0	4	frequency_max
water	98:52	0:0	2	;
call	99:4	100:62	2	msg_Dbg
arg	99:13	99:19	3	d->obj
water	99:13	0:0	4	d
op	99:14	0:0	4	->
water	99:16	0:0	4	obj
arg	99:21	99:65	3	" (%"PRIu32" tolerance, %"PRIu32" per step)"
water	99:21	0:0	4	" (%"
water	99:26	0:0	4	PRIu32
water	99:32	0:0	4	" tolerance, %"
water	99:47	0:0	4	PRIu32
water	99:53	0:0	4	" per step)"
arg	100:13	100:37	3	info.frequency_tolerance
water	100:13	0:0	4	info
op	100:17	0:0	4	.
water	100:18	0:0	4	frequency_tolerance
arg	100:39	100:62	3	info.frequency_stepsize
water	100:39	0:0	4	info
op	100:43	0:0	4	.
water	100:44	0:0	4	frequency_stepsize
water	100:63	0:0	2	;
call	101:4	102:55	2	msg_Dbg
arg	101:13	101:19	3	d->obj
water	101:13	0:0	4	d
op	101:14	0:0	4	->
water	101:16	0:0	4	obj
arg	101:21	101:60	3	" bauds rates %10"PRIu32" to %10"PRIu32
water	101:21	0:0	4	" bauds rates %10"
water	101:39	0:0	4	PRIu32
water	101:45	0:0	4	" to %10"
water	101:54	0:0	4	PRIu32
arg	102:13	102:33	3	info.symbol_rate_min
water	102:13	0:0	4	info
op	102:17	0:0	4	.
water	102:18	0:0	4	symbol_rate_min
arg	102:35	102:55	3	info.symbol_rate_max
water	102:35	0:0	4	info
op	102:39	0:0	4	.
water	102:40	0:0	4	symbol_rate_max
water	102:56	0:0	2	;
call	103:4	103:73	2	msg_Dbg
arg	103:13	103:19	3	d->obj
water	103:13	0:0	4	d
op	103:14	0:0	4	->
water	103:16	0:0	4	obj
arg	103:21	103:45	3	" (%"PRIu32" tolerance)"
water	103:21	0:0	4	" (%"
water	103:26	0:0	4	PRIu32
water	103:32	0:0	4	" tolerance)"
arg	103:47	103:73	3	info.symbol_rate_tolerance
water	103:47	0:0	4	info
op	103:51	0:0	4	.
water	103:52	0:0	4	symbol_rate_tolerance
water	103:74	0:0	2	;
switch	105:4	113:4	2	(info . type)
cond	105:12	105:17	3	info . type
water	105:12	0:0	4	info
op	105:16	0:0	4	.
water	105:17	0:0	4	type
stmts	106:4	113:4	3	
water	106:4	0:0	4	{
label	107:8	107:20	4	case FE_QPSK :
water	107:22	0:0	4	systems
op	107:30	0:0	4	=
water	107:32	0:0	4	DVB_S
water	107:37	0:0	4	;
break	107:39	107:44	4	
label	108:8	108:19	4	case FE_QAM :
water	108:22	0:0	4	systems
op	108:30	0:0	4	=
water	108:32	0:0	4	DVB_C
water	108:37	0:0	4	;
break	108:39	108:44	4	
label	109:8	109:20	4	case FE_OFDM :
water	109:22	0:0	4	systems
op	109:30	0:0	4	=
water	109:32	0:0	4	DVB_T
water	109:37	0:0	4	;
break	109:39	109:44	4	
label	110:8	110:20	4	case FE_ATSC :
water	110:22	0:0	4	systems
op	110:30	0:0	4	=
water	110:32	0:0	4	ATSC
op	110:37	0:0	4	|
water	110:39	0:0	4	CQAM
water	110:43	0:0	4	;
break	110:45	110:50	4	
label	111:8	111:15	4	default :
call	112:12	112:66	4	msg_Err
arg	112:21	112:27	5	d->obj
water	112:21	0:0	6	d
op	112:22	0:0	6	->
water	112:24	0:0	6	obj
arg	112:29	112:55	5	"unknown frontend type %u"
water	112:29	0:0	6	"unknown frontend type %u"
arg	112:57	112:66	5	info.type
water	112:57	0:0	6	info
op	112:61	0:0	6	.
water	112:62	0:0	6	type
water	112:67	0:0	4	;
water	113:4	0:0	4	}
switch	115:4	124:4	2	(info . type)
cond	115:12	115:17	3	info . type
water	115:12	0:0	4	info
op	115:16	0:0	4	.
water	115:17	0:0	4	type
stmts	116:4	124:4	3	
water	116:4	0:0	4	{
label	117:8	117:20	4	case FE_QPSK :
label	118:8	118:19	4	case FE_QAM :
label	119:8	119:20	4	case FE_OFDM :
if	120:12	121:39	4	(info . caps & FE_CAN_2G_MODULATION)
cond	120:16	120:28	5	info . caps & FE_CAN_2G_MODULATION
water	120:16	0:0	6	info
op	120:20	0:0	6	.
water	120:21	0:0	6	caps
op	120:26	0:0	6	&
water	120:28	0:0	6	FE_CAN_2G_MODULATION
stmts	121:16	121:39	5	
water	121:16	0:0	6	systems
op	121:24	0:0	6	|=
water	121:27	0:0	6	systems
op	121:35	0:0	6	<<
water	121:38	0:0	6	1
water	121:39	0:0	6	;
label	122:8	122:15	4	default :
break	123:12	123:17	4	
water	124:4	0:0	4	}
if	126:4	127:25	2	(info . type == FE_OFDM)
cond	126:8	126:21	3	info . type == FE_OFDM
water	126:8	0:0	4	info
op	126:12	0:0	4	.
water	126:13	0:0	4	type
op	126:18	0:0	4	==
water	126:21	0:0	4	FE_OFDM
stmts	127:8	127:25	3	
water	127:8	0:0	4	systems
op	127:16	0:0	4	|=
water	127:19	0:0	4	ISDB_T
water	127:25	0:0	4	;
return	128:4	128:18	2	systems
water	128:11	0:0	3	systems
