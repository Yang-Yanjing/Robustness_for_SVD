func	2:0	57:0	0	static int	new_value
params	3:3	0:0	1	
param	3:4	3:22	2	json_state *	state
param	3:24	3:41	2	json_value * *	top
param	3:43	3:61	2	json_value * *	root
param	3:63	3:82	2	json_value * *	alloc
param	3:84	3:98	2	json_type	type
stmnts	0:0	56:11	1	
decl	5:3	5:21	2	json_value	*value
decl	6:3	6:18	2	int	values_size
if	7:3	45:3	2	(! state -> first_pass)
cond	7:7	7:15	3	! state -> first_pass
op	7:7	0:0	4	!
water	7:8	0:0	4	state
op	7:13	0:0	4	->
water	7:15	0:0	4	first_pass
stmts	8:3	45:3	3	
water	8:3	0:0	4	{
water	9:6	0:0	4	value
op	9:12	0:0	4	=
op	9:14	0:0	4	*
water	9:15	0:0	4	top
op	9:19	0:0	4	=
op	9:21	0:0	4	*
water	9:22	0:0	4	alloc
water	9:27	0:0	4	;
op	10:6	0:0	4	*
water	10:7	0:0	4	alloc
op	10:13	0:0	4	=
water	10:15	0:0	4	(
op	10:16	0:0	4	*
water	10:17	0:0	4	alloc
water	10:22	0:0	4	)
op	10:23	0:0	4	->
water	10:25	0:0	4	_reserved
op	10:34	0:0	4	.
water	10:35	0:0	4	next_alloc
water	10:45	0:0	4	;
if	11:6	12:22	4	(! * root)
cond	11:10	11:12	5	! * root
op	11:10	0:0	6	!
op	11:11	0:0	6	*
water	11:12	0:0	6	root
stmts	12:9	12:22	5	
op	12:9	0:0	6	*
water	12:10	0:0	6	root
op	12:15	0:0	6	=
water	12:17	0:0	6	value
water	12:22	0:0	6	;
switch	13:6	43:6	4	(value -> type)
cond	13:14	13:21	5	value -> type
water	13:14	0:0	6	value
op	13:19	0:0	6	->
water	13:21	0:0	6	type
stmts	14:6	43:6	5	
water	14:6	0:0	6	{
label	15:9	15:24	6	case json_array :
if	16:12	20:12	6	(! ( value -> u . array . values = ( json_value * * )json_alloc (state ,value -> u . array . length * sizeof ( json_value * ) ,0 ) ))
cond	16:16	17:72	7	! ( value -> u . array . values = ( json_value * * )json_alloc (state ,value -> u . array . length * sizeof ( json_value * ) ,0 ) )
op	16:16	0:0	8	!
water	16:18	0:0	8	(
water	16:19	0:0	8	value
op	16:24	0:0	8	->
water	16:26	0:0	8	u
op	16:27	0:0	8	.
water	16:28	0:0	8	array
op	16:33	0:0	8	.
water	16:34	0:0	8	values
op	16:41	0:0	8	=
water	16:43	0:0	8	(
water	16:44	0:0	8	json_value
op	16:55	0:0	8	*
op	16:56	0:0	8	*
water	16:57	0:0	8	)
call	16:59	17:71	8	json_alloc
arg	17:16	17:21	9	state
water	17:16	0:0	10	state
arg	17:23	17:68	9	value->u.array.length*sizeof(json_value*)
water	17:23	0:0	10	value
op	17:28	0:0	10	->
water	17:30	0:0	10	u
op	17:31	0:0	10	.
water	17:32	0:0	10	array
op	17:37	0:0	10	.
water	17:38	0:0	10	length
op	17:45	0:0	10	*
op	17:47	0:0	10	sizeof
water	17:54	0:0	10	(
water	17:55	0:0	10	json_value
op	17:66	0:0	10	*
water	17:67	0:0	10	)
arg	17:70	17:71	9	0
water	17:70	0:0	10	0
water	17:72	0:0	8	)
stmts	18:12	20:12	7	
water	18:12	0:0	8	{
return	19:15	19:23	8	0
water	19:22	0:0	9	0
water	20:12	0:0	8	}
water	21:12	0:0	6	value
op	21:17	0:0	6	->
water	21:19	0:0	6	u
op	21:20	0:0	6	.
water	21:21	0:0	6	array
op	21:26	0:0	6	.
water	21:27	0:0	6	length
op	21:34	0:0	6	=
water	21:36	0:0	6	0
water	21:37	0:0	6	;
break	22:12	22:17	6	
label	23:9	23:25	6	case json_object :
water	24:12	0:0	6	values_size
op	24:24	0:0	6	=
op	24:26	0:0	6	sizeof
water	24:33	0:0	6	(
op	24:34	0:0	6	*
water	24:35	0:0	6	value
op	24:40	0:0	6	->
water	24:42	0:0	6	u
op	24:43	0:0	6	.
water	24:44	0:0	6	object
op	24:50	0:0	6	.
water	24:51	0:0	6	values
water	24:57	0:0	6	)
op	24:59	0:0	6	*
water	24:61	0:0	6	value
op	24:66	0:0	6	->
water	24:68	0:0	6	u
op	24:69	0:0	6	.
water	24:70	0:0	6	object
op	24:76	0:0	6	.
water	24:77	0:0	6	length
water	24:83	0:0	6	;
if	25:12	29:12	6	(! ( ( * ( void * * ) & value -> u . object . values ) =json_alloc (state ,values_size + ( ( unsigned long ) value -> u . object . values ) ,0 ) ))
cond	25:16	26:84	7	! ( ( * ( void * * ) & value -> u . object . values ) =json_alloc (state ,values_size + ( ( unsigned long ) value -> u . object . values ) ,0 ) )
op	25:16	0:0	8	!
water	25:18	0:0	8	(
water	25:19	0:0	8	(
op	25:20	0:0	8	*
water	25:21	0:0	8	(
water	25:22	0:0	8	void
op	25:27	0:0	8	*
op	25:28	0:0	8	*
water	25:29	0:0	8	)
op	25:31	0:0	8	&
water	25:32	0:0	8	value
op	25:37	0:0	8	->
water	25:39	0:0	8	u
op	25:40	0:0	8	.
water	25:41	0:0	8	object
op	25:47	0:0	8	.
water	25:48	0:0	8	values
water	25:54	0:0	8	)
op	25:56	0:0	8	=
call	25:58	26:83	8	json_alloc
arg	26:19	26:24	9	state
water	26:19	0:0	10	state
arg	26:26	26:80	9	values_size+((unsignedlong)value->u.object.values)
water	26:26	0:0	10	values_size
op	26:38	0:0	10	+
water	26:40	0:0	10	(
water	26:41	0:0	10	(
water	26:42	0:0	10	unsigned
water	26:51	0:0	10	long
water	26:55	0:0	10	)
water	26:57	0:0	10	value
op	26:62	0:0	10	->
water	26:64	0:0	10	u
op	26:65	0:0	10	.
water	26:66	0:0	10	object
op	26:72	0:0	10	.
water	26:73	0:0	10	values
water	26:79	0:0	10	)
arg	26:82	26:83	9	0
water	26:82	0:0	10	0
water	26:84	0:0	8	)
stmts	27:12	29:12	7	
water	27:12	0:0	8	{
return	28:15	28:23	8	0
water	28:22	0:0	9	0
water	29:12	0:0	8	}
water	30:12	0:0	6	value
op	30:17	0:0	6	->
water	30:19	0:0	6	_reserved
op	30:28	0:0	6	.
water	30:29	0:0	6	object_mem
op	30:40	0:0	6	=
water	30:42	0:0	6	(
op	30:43	0:0	6	*
water	30:44	0:0	6	(
water	30:45	0:0	6	char
op	30:50	0:0	6	*
op	30:51	0:0	6	*
water	30:52	0:0	6	)
op	30:54	0:0	6	&
water	30:55	0:0	6	value
op	30:60	0:0	6	->
water	30:62	0:0	6	u
op	30:63	0:0	6	.
water	30:64	0:0	6	object
op	30:70	0:0	6	.
water	30:71	0:0	6	values
water	30:77	0:0	6	)
op	30:79	0:0	6	+
water	30:81	0:0	6	values_size
water	30:92	0:0	6	;
water	31:12	0:0	6	value
op	31:17	0:0	6	->
water	31:19	0:0	6	u
op	31:20	0:0	6	.
water	31:21	0:0	6	object
op	31:27	0:0	6	.
water	31:28	0:0	6	length
op	31:35	0:0	6	=
water	31:37	0:0	6	0
water	31:38	0:0	6	;
break	32:12	32:17	6	
label	33:9	33:25	6	case json_string :
if	34:12	38:12	6	(! ( value -> u . string . ptr = ( json_char * )json_alloc (state ,( value -> u . string . length + 1 ) * sizeof ( json_char ) ,0 ) ))
cond	34:16	35:76	7	! ( value -> u . string . ptr = ( json_char * )json_alloc (state ,( value -> u . string . length + 1 ) * sizeof ( json_char ) ,0 ) )
op	34:16	0:0	8	!
water	34:18	0:0	8	(
water	34:19	0:0	8	value
op	34:24	0:0	8	->
water	34:26	0:0	8	u
op	34:27	0:0	8	.
water	34:28	0:0	8	string
op	34:34	0:0	8	.
water	34:35	0:0	8	ptr
op	34:39	0:0	8	=
water	34:41	0:0	8	(
water	34:42	0:0	8	json_char
op	34:52	0:0	8	*
water	34:53	0:0	8	)
call	34:55	35:75	8	json_alloc
arg	35:16	35:21	9	state
water	35:16	0:0	10	state
arg	35:23	35:72	9	(value->u.string.length+1)*sizeof(json_char)
water	35:23	0:0	10	(
water	35:24	0:0	10	value
op	35:29	0:0	10	->
water	35:31	0:0	10	u
op	35:32	0:0	10	.
water	35:33	0:0	10	string
op	35:39	0:0	10	.
water	35:40	0:0	10	length
op	35:47	0:0	10	+
water	35:49	0:0	10	1
water	35:50	0:0	10	)
op	35:52	0:0	10	*
op	35:54	0:0	10	sizeof
water	35:61	0:0	10	(
water	35:62	0:0	10	json_char
water	35:71	0:0	10	)
arg	35:74	35:75	9	0
water	35:74	0:0	10	0
water	35:76	0:0	8	)
stmts	36:12	38:12	7	
water	36:12	0:0	8	{
return	37:15	37:23	8	0
water	37:22	0:0	9	0
water	38:12	0:0	8	}
water	39:12	0:0	6	value
op	39:17	0:0	6	->
water	39:19	0:0	6	u
op	39:20	0:0	6	.
water	39:21	0:0	6	string
op	39:27	0:0	6	.
water	39:28	0:0	6	length
op	39:35	0:0	6	=
water	39:37	0:0	6	0
water	39:38	0:0	6	;
break	40:12	40:17	6	
label	41:9	41:16	6	default :
break	42:12	42:17	6	
water	43:6	0:0	6	}
water	43:7	0:0	4	;
return	44:6	44:14	4	1
water	44:13	0:0	5	1
water	45:3	0:0	4	}
water	46:3	0:0	2	value
op	46:9	0:0	2	=
water	46:11	0:0	2	(
water	46:12	0:0	2	json_value
op	46:23	0:0	2	*
water	46:24	0:0	2	)
call	46:26	46:67	2	json_alloc
arg	46:38	46:43	3	state
water	46:38	0:0	4	state
arg	46:45	46:64	3	sizeof(json_value)
op	46:45	0:0	4	sizeof
water	46:52	0:0	4	(
water	46:53	0:0	4	json_value
water	46:63	0:0	4	)
arg	46:66	46:67	3	1
water	46:66	0:0	4	1
water	46:68	0:0	2	;
if	47:3	48:14	2	(! value)
cond	47:7	47:8	3	! value
op	47:7	0:0	4	!
water	47:8	0:0	4	value
stmts	48:6	48:14	3	
return	48:6	48:14	4	0
water	48:13	0:0	5	0
if	49:3	50:19	2	(! * root)
cond	49:7	49:9	3	! * root
op	49:7	0:0	4	!
op	49:8	0:0	4	*
water	49:9	0:0	4	root
stmts	50:6	50:19	3	
op	50:6	0:0	4	*
water	50:7	0:0	4	root
op	50:12	0:0	4	=
water	50:14	0:0	4	value
water	50:19	0:0	4	;
water	51:3	0:0	2	value
op	51:8	0:0	2	->
water	51:10	0:0	2	type
op	51:15	0:0	2	=
water	51:17	0:0	2	type
water	51:21	0:0	2	;
water	52:3	0:0	2	value
op	52:8	0:0	2	->
water	52:10	0:0	2	parent
op	52:17	0:0	2	=
op	52:19	0:0	2	*
water	52:20	0:0	2	top
water	52:23	0:0	2	;
if	53:3	54:44	2	(* alloc)
cond	53:7	53:8	3	* alloc
op	53:7	0:0	4	*
water	53:8	0:0	4	alloc
stmts	54:6	54:44	3	
water	54:6	0:0	4	(
op	54:7	0:0	4	*
water	54:8	0:0	4	alloc
water	54:13	0:0	4	)
op	54:14	0:0	4	->
water	54:16	0:0	4	_reserved
op	54:25	0:0	4	.
water	54:26	0:0	4	next_alloc
op	54:37	0:0	4	=
water	54:39	0:0	4	value
water	54:44	0:0	4	;
op	55:3	0:0	2	*
water	55:4	0:0	2	alloc
op	55:10	0:0	2	=
op	55:12	0:0	2	*
water	55:13	0:0	2	top
op	55:17	0:0	2	=
water	55:19	0:0	2	value
water	55:24	0:0	2	;
return	56:3	56:11	2	1
water	56:10	0:0	3	1
