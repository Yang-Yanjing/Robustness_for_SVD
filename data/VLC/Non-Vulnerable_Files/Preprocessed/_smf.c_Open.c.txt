func	2:0	147:0	0	static int	Open
params	2:16	0:0	1	
param	2:17	2:34	2	vlc_object_t *	obj
stmnts	0:0	146:23	1	
decl	4:4	4:35	2	demux_t	*demux
op	4:19	0:0	2	=
water	4:21	0:0	2	(
water	4:22	0:0	2	demux_t
op	4:30	0:0	2	*
water	4:31	0:0	2	)
water	4:32	0:0	2	obj
decl	5:4	5:31	2	stream_t	*stream
op	5:21	0:0	2	=
water	5:23	0:0	2	demux
op	5:28	0:0	2	->
water	5:30	0:0	2	s
decl	6:4	6:23	2	const uint8_t	*peek
decl	7:4	7:19	2	bool	multitrack
if	10:4	11:27	2	(stream_Peek (stream ,& peek ,14 ) < 14)
cond	10:8	10:42	3	stream_Peek (stream ,& peek ,14 ) < 14
call	10:8	10:38	4	stream_Peek
arg	10:21	10:27	5	stream
water	10:21	0:0	6	stream
arg	10:29	10:34	5	&peek
op	10:29	0:0	6	&
water	10:30	0:0	6	peek
arg	10:36	10:38	5	14
water	10:36	0:0	6	14
op	10:40	0:0	4	<
water	10:42	0:0	4	14
stmts	11:8	11:27	3	
return	11:8	11:27	4	VLC_EGENERIC
water	11:15	0:0	5	VLC_EGENERIC
if	13:4	40:4	2	(!memcmp (peek ,"RIFF" ,4 ) && !memcmp (peek + 8 ,"RMID" ,4 ))
cond	13:8	13:65	3	!memcmp (peek ,"RIFF" ,4 ) && !memcmp (peek + 8 ,"RMID" ,4 )
op	13:8	0:0	4	!
call	13:9	13:32	4	memcmp
arg	13:17	13:21	5	peek
water	13:17	0:0	6	peek
arg	13:23	13:29	5	"RIFF"
water	13:23	0:0	6	"RIFF"
arg	13:31	13:32	5	4
water	13:31	0:0	6	4
op	13:34	0:0	4	&&
op	13:37	0:0	4	!
call	13:38	13:65	4	memcmp
arg	13:46	13:54	5	peek+8
water	13:46	0:0	6	peek
op	13:51	0:0	6	+
water	13:53	0:0	6	8
arg	13:56	13:62	5	"RMID"
water	13:56	0:0	6	"RMID"
arg	13:64	13:65	5	4
water	13:64	0:0	6	4
stmts	14:4	40:4	3	
water	14:4	0:0	4	{
decl	15:8	15:46	4	uint32_t	riff_len
op	15:26	0:0	4	=
call	15:28	15:45	5	GetDWLE
arg	15:37	15:45	6	peek+4
water	15:37	0:0	7	peek
op	15:42	0:0	7	+
water	15:44	0:0	7	4
call	16:8	16:77	4	msg_Dbg
arg	16:17	16:22	5	demux
water	16:17	0:0	6	demux
arg	16:24	16:67	5	"detected RIFF MIDI file (%"PRIu32" bytes)"
water	16:24	0:0	6	"detected RIFF MIDI file (%"
water	16:52	0:0	6	PRIu32
water	16:58	0:0	6	" bytes)"
arg	16:69	16:77	5	riff_len
water	16:69	0:0	6	riff_len
water	16:78	0:0	4	;
if	17:8	18:31	4	((stream_Read (stream ,NULL ,12 ) < 12 ))
cond	17:12	17:48	5	(stream_Read (stream ,NULL ,12 ) < 12 )
water	17:12	0:0	6	(
call	17:13	17:42	6	stream_Read
arg	17:26	17:32	7	stream
water	17:26	0:0	8	stream
arg	17:34	17:38	7	NULL
water	17:34	0:0	8	NULL
arg	17:40	17:42	7	12
water	17:40	0:0	8	12
op	17:44	0:0	6	<
water	17:46	0:0	6	12
water	17:48	0:0	6	)
stmts	18:12	18:31	5	
return	18:12	18:31	6	VLC_EGENERIC
water	18:19	0:0	7	VLC_EGENERIC
for	20:8	36:8	4	(;;)
forinit	20:13	20:13	5	;
water	20:13	0:0	6	;
cond	0:0	0:0	5	
forexpr	0:0	0:0	5	
stmts	21:8	36:8	5	
water	21:8	0:0	6	{
decl	22:12	22:28	6	char	chnk_hdr[8]
decl	23:12	23:29	6	uint32_t	chnk_len
if	24:12	26:35	6	(( riff_len < 8 ) || (stream_Read (stream ,chnk_hdr ,8 ) < 8 ))
cond	24:16	25:54	7	( riff_len < 8 ) || (stream_Read (stream ,chnk_hdr ,8 ) < 8 )
water	24:16	0:0	8	(
water	24:17	0:0	8	riff_len
op	24:26	0:0	8	<
water	24:28	0:0	8	8
water	24:29	0:0	8	)
op	25:13	0:0	8	||
water	25:16	0:0	8	(
call	25:17	25:49	8	stream_Read
arg	25:30	25:36	9	stream
water	25:30	0:0	10	stream
arg	25:38	25:46	9	chnk_hdr
water	25:38	0:0	10	chnk_hdr
arg	25:48	25:49	9	8
water	25:48	0:0	10	8
op	25:51	0:0	8	<
water	25:53	0:0	8	8
water	25:54	0:0	8	)
stmts	26:16	26:35	7	
return	26:16	26:35	8	VLC_EGENERIC
water	26:23	0:0	9	VLC_EGENERIC
water	27:12	0:0	6	riff_len
op	27:21	0:0	6	-=
water	27:24	0:0	6	8
water	27:25	0:0	6	;
water	28:12	0:0	6	chnk_len
op	28:21	0:0	6	=
call	28:23	28:44	6	GetDWLE
arg	28:32	28:44	7	chnk_hdr+4
water	28:32	0:0	8	chnk_hdr
op	28:41	0:0	8	+
water	28:43	0:0	8	4
water	28:45	0:0	6	;
if	29:12	30:35	6	(riff_len < chnk_len)
cond	29:16	29:27	7	riff_len < chnk_len
water	29:16	0:0	8	riff_len
op	29:25	0:0	8	<
water	29:27	0:0	8	chnk_len
stmts	30:16	30:35	7	
return	30:16	30:35	8	VLC_EGENERIC
water	30:23	0:0	9	VLC_EGENERIC
water	31:12	0:0	6	riff_len
op	31:21	0:0	6	-=
water	31:24	0:0	6	chnk_len
water	31:32	0:0	6	;
if	32:12	33:21	6	(!memcmp (chnk_hdr ,"data" ,4 ))
cond	32:16	32:44	7	!memcmp (chnk_hdr ,"data" ,4 )
op	32:16	0:0	8	!
call	32:17	32:44	8	memcmp
arg	32:25	32:33	9	chnk_hdr
water	32:25	0:0	10	chnk_hdr
arg	32:35	32:41	9	"data"
water	32:35	0:0	10	"data"
arg	32:43	32:44	9	4
water	32:43	0:0	10	4
stmts	33:16	33:21	7	
break	33:16	33:21	8	
if	34:12	35:35	6	(stream_Read (stream ,NULL ,chnk_len ) < ( ssize_t ) chnk_len)
cond	34:16	34:64	7	stream_Read (stream ,NULL ,chnk_len ) < ( ssize_t ) chnk_len
call	34:16	34:51	8	stream_Read
arg	34:29	34:35	9	stream
water	34:29	0:0	10	stream
arg	34:37	34:41	9	NULL
water	34:37	0:0	10	NULL
arg	34:43	34:51	9	chnk_len
water	34:43	0:0	10	chnk_len
op	34:53	0:0	8	<
water	34:55	0:0	8	(
water	34:56	0:0	8	ssize_t
water	34:63	0:0	8	)
water	34:64	0:0	8	chnk_len
stmts	35:16	35:35	7	
return	35:16	35:35	8	VLC_EGENERIC
water	35:23	0:0	9	VLC_EGENERIC
water	36:8	0:0	6	}
if	38:8	39:31	4	(stream_Peek (stream ,& peek ,14 ) < 14)
cond	38:12	38:46	5	stream_Peek (stream ,& peek ,14 ) < 14
call	38:12	38:42	6	stream_Peek
arg	38:25	38:31	7	stream
water	38:25	0:0	8	stream
arg	38:33	38:38	7	&peek
op	38:33	0:0	8	&
water	38:34	0:0	8	peek
arg	38:40	38:42	7	14
water	38:40	0:0	8	14
op	38:44	0:0	6	<
water	38:46	0:0	6	14
stmts	39:12	39:31	5	
return	39:12	39:31	6	VLC_EGENERIC
water	39:19	0:0	7	VLC_EGENERIC
water	40:4	0:0	4	}
if	41:4	42:27	2	(memcmp (peek ,"MThd\x00\x00\x00\x06" ,8 ))
cond	41:8	41:47	3	memcmp (peek ,"MThd\x00\x00\x00\x06" ,8 )
call	41:8	41:47	4	memcmp
arg	41:16	41:20	5	peek
water	41:16	0:0	6	peek
arg	41:22	41:44	5	"MThd\x00\x00\x00\x06"
water	41:22	0:0	6	"MThd\x00\x00\x00\x06"
arg	41:46	41:47	5	8
water	41:46	0:0	6	8
stmts	42:8	42:27	3	
return	42:8	42:27	4	VLC_EGENERIC
water	42:15	0:0	5	VLC_EGENERIC
water	43:4	0:0	2	peek
op	43:9	0:0	2	+=
water	43:12	0:0	2	8
water	43:13	0:0	2	;
switch	45:4	57:4	2	(GetWBE (peek ))
cond	45:12	45:24	3	GetWBE (peek )
call	45:12	45:24	4	GetWBE
arg	45:20	45:24	5	peek
water	45:20	0:0	6	peek
stmts	46:4	57:4	3	
water	46:4	0:0	4	{
label	47:8	47:14	4	case 0 :
water	48:12	0:0	4	multitrack
op	48:23	0:0	4	=
water	48:25	0:0	4	false
water	48:30	0:0	4	;
break	49:12	49:17	4	
label	50:8	50:14	4	case 1 :
water	51:12	0:0	4	multitrack
op	51:23	0:0	4	=
water	51:25	0:0	4	true
water	51:29	0:0	4	;
break	52:12	52:17	4	
label	53:8	53:15	4	default :
call	55:12	55:73	4	msg_Err
arg	55:21	55:26	5	demux
water	55:21	0:0	6	demux
arg	55:28	55:58	5	"unsupported SMF file type %u"
water	55:28	0:0	6	"unsupported SMF file type %u"
arg	55:60	55:73	5	GetWBE(peek)
call	55:60	55:72	6	GetWBE
arg	55:68	55:72	7	peek
water	55:68	0:0	8	peek
water	55:74	0:0	4	;
return	56:12	56:31	4	VLC_EGENERIC
water	56:19	0:0	5	VLC_EGENERIC
water	57:4	0:0	4	}
water	58:4	0:0	2	peek
op	58:9	0:0	2	+=
water	58:12	0:0	2	2
water	58:13	0:0	2	;
water	60:4	0:0	2	unsigned
water	60:13	0:0	2	tracks
op	60:20	0:0	2	=
call	60:22	60:34	2	GetWBE
arg	60:30	60:34	3	peek
water	60:30	0:0	4	peek
water	60:35	0:0	2	;
water	61:4	0:0	2	peek
op	61:9	0:0	2	+=
water	61:12	0:0	2	2
water	61:13	0:0	2	;
if	62:4	66:4	2	(! multitrack && ( tracks != 1 ))
cond	62:8	62:35	3	! multitrack && ( tracks != 1 )
op	62:8	0:0	4	!
water	62:9	0:0	4	multitrack
op	62:20	0:0	4	&&
water	62:23	0:0	4	(
water	62:24	0:0	4	tracks
op	62:31	0:0	4	!=
water	62:34	0:0	4	1
water	62:35	0:0	4	)
stmts	63:4	66:4	3	
water	63:4	0:0	4	{
call	64:8	64:49	4	msg_Err
arg	64:17	64:22	5	demux
water	64:17	0:0	6	demux
arg	64:24	64:49	5	"invalid SMF type 0 file"
water	64:24	0:0	6	"invalid SMF type 0 file"
water	64:50	0:0	4	;
return	65:8	65:27	4	VLC_EGENERIC
water	65:15	0:0	5	VLC_EGENERIC
water	66:4	0:0	4	}
call	67:4	68:31	2	msg_Dbg
arg	67:13	67:18	3	demux
water	67:13	0:0	4	demux
arg	67:20	67:76	3	"detected Standard MIDI File (type %u) with %u track(s)"
water	67:20	0:0	4	"detected Standard MIDI File (type %u) with %u track(s)"
arg	68:13	68:23	3	multitrack
water	68:13	0:0	4	multitrack
arg	68:25	68:31	3	tracks
water	68:25	0:0	4	tracks
water	68:32	0:0	2	;
water	70:4	0:0	2	unsigned
water	70:13	0:0	2	ppqn
op	70:18	0:0	2	=
call	70:20	70:32	2	GetWBE
arg	70:28	70:32	3	peek
water	70:28	0:0	4	peek
water	70:33	0:0	2	;
if	71:4	75:4	2	(ppqn & 0 x8000)
cond	71:8	71:16	3	ppqn & 0 x8000
water	71:8	0:0	4	ppqn
op	71:13	0:0	4	&
water	71:15	0:0	4	0
water	71:16	0:0	4	x8000
stmts	72:4	75:4	3	
water	72:4	0:0	4	{
call	73:8	73:58	4	msg_Err
arg	73:17	73:22	5	demux
water	73:17	0:0	6	demux
arg	73:24	73:58	5	"SMPTE timestamps not implemented"
water	73:24	0:0	6	"SMPTE timestamps not implemented"
water	73:59	0:0	4	;
return	74:8	74:27	4	VLC_EGENERIC
water	74:15	0:0	5	VLC_EGENERIC
water	75:4	0:0	4	}
else	76:4	84:4	2
stmts	77:4	84:4	3	
water	77:4	0:0	4	{
if	78:8	82:8	4	(ppqn == 0)
cond	78:12	78:20	5	ppqn == 0
water	78:12	0:0	6	ppqn
op	78:17	0:0	6	==
water	78:20	0:0	6	0
stmts	79:8	82:8	5	
water	79:8	0:0	6	{
call	80:12	80:60	6	msg_Err
arg	80:20	80:25	7	demux
water	80:20	0:0	8	demux
arg	80:27	80:54	7	"invalid SMF file PPQN: %u"
water	80:27	0:0	8	"invalid SMF file PPQN: %u"
arg	80:56	80:60	7	ppqn
water	80:56	0:0	8	ppqn
water	80:61	0:0	6	;
return	81:12	81:31	6	VLC_EGENERIC
water	81:19	0:0	7	VLC_EGENERIC
water	82:8	0:0	6	}
call	83:8	83:59	4	msg_Dbg
arg	83:17	83:22	5	demux
water	83:17	0:0	6	demux
arg	83:24	83:53	5	" %u pulses per quarter note"
water	83:24	0:0	6	" %u pulses per quarter note"
arg	83:55	83:59	5	ppqn
water	83:55	0:0	6	ppqn
water	83:60	0:0	4	;
water	84:4	0:0	4	}
decl	85:4	85:74	2	demux_sys_t	*sys
op	85:21	0:0	2	=
call	85:23	85:73	3	malloc
arg	85:31	85:73	4	sizeof(*sys)+(sizeof(mtrk_t)*tracks)
op	85:31	0:0	5	sizeof
water	85:38	0:0	5	(
op	85:39	0:0	5	*
water	85:40	0:0	5	sys
water	85:43	0:0	5	)
op	85:45	0:0	5	+
water	85:47	0:0	5	(
op	85:48	0:0	5	sizeof
water	85:55	0:0	5	(
water	85:56	0:0	5	mtrk_t
water	85:62	0:0	5	)
op	85:64	0:0	5	*
water	85:66	0:0	5	tracks
water	85:72	0:0	5	)
if	86:4	87:25	2	(unlikely (sys == NULL ))
cond	86:8	86:28	3	unlikely (sys == NULL )
call	86:8	86:28	4	unlikely
arg	86:17	86:28	5	sys==NULL
water	86:17	0:0	6	sys
op	86:21	0:0	6	==
water	86:24	0:0	6	NULL
stmts	87:8	87:25	3	
return	87:8	87:25	4	VLC_ENOMEM
water	87:15	0:0	5	VLC_ENOMEM
if	89:4	90:18	2	(stream_Read (stream ,NULL ,14 ) < 14)
cond	89:8	89:41	3	stream_Read (stream ,NULL ,14 ) < 14
call	89:8	89:37	4	stream_Read
arg	89:21	89:27	5	stream
water	89:21	0:0	6	stream
arg	89:29	89:33	5	NULL
water	89:29	0:0	6	NULL
arg	89:35	89:37	5	14
water	89:35	0:0	6	14
op	89:39	0:0	4	<
water	89:41	0:0	4	14
stmts	90:8	90:18	3	
goto	90:8	90:18	4	error
water	90:13	0:0	5	error
water	91:4	0:0	2	demux
op	91:9	0:0	2	->
water	91:11	0:0	2	p_sys
op	91:17	0:0	2	=
water	91:19	0:0	2	sys
water	91:22	0:0	2	;
water	92:4	0:0	2	sys
op	92:7	0:0	2	->
water	92:9	0:0	2	duration
op	92:18	0:0	2	=
water	92:20	0:0	2	0
water	92:21	0:0	2	;
water	93:4	0:0	2	sys
op	93:7	0:0	2	->
water	93:9	0:0	2	ppqn
op	93:14	0:0	2	=
water	93:16	0:0	2	ppqn
water	93:20	0:0	2	;
water	94:4	0:0	2	sys
op	94:7	0:0	2	->
water	94:9	0:0	2	trackc
op	94:16	0:0	2	=
water	94:18	0:0	2	tracks
water	94:24	0:0	2	;
for	96:4	123:4	2	(unsigned i = 0 ;i < tracks;i ++)
forinit	96:9	96:23	3	unsigned i = 0 ;
water	96:9	0:0	4	unsigned
water	96:18	0:0	4	i
op	96:20	0:0	4	=
water	96:22	0:0	4	0
water	96:23	0:0	4	;
cond	96:25	96:29	3	i < tracks
water	96:25	0:0	4	i
op	96:27	0:0	4	<
water	96:29	0:0	4	tracks
forexpr	96:37	96:38	3	i ++
water	96:37	0:0	4	i
op	96:38	0:0	4	++
stmts	97:4	123:4	3	
water	97:4	0:0	4	{
decl	98:8	98:36	4	mtrk_t	*tr
op	98:19	0:0	4	=
water	98:21	0:0	4	sys
op	98:24	0:0	4	->
water	98:26	0:0	4	trackv
op	98:33	0:0	4	+
water	98:35	0:0	4	i
decl	99:8	99:23	4	uint8_t	head[8]
if	103:8	107:8	4	(i > 0 &&stream_Seek (stream ,tr [ - 1 ] . start + tr [ - 1 ] . length ))
cond	103:12	103:70	5	i > 0 &&stream_Seek (stream ,tr [ - 1 ] . start + tr [ - 1 ] . length )
water	103:12	0:0	6	i
op	103:14	0:0	6	>
water	103:16	0:0	6	0
op	103:18	0:0	6	&&
call	103:21	103:70	6	stream_Seek
arg	103:34	103:40	7	stream
water	103:34	0:0	8	stream
arg	103:42	103:70	7	tr[-1].start+tr[-1].length
water	103:42	0:0	8	tr
op	103:44	0:0	8	[
op	103:45	0:0	8	-
water	103:46	0:0	8	1
op	103:47	0:0	8	]
op	103:48	0:0	8	.
water	103:49	0:0	8	start
op	103:55	0:0	8	+
water	103:57	0:0	8	tr
op	103:59	0:0	8	[
op	103:60	0:0	8	-
water	103:61	0:0	8	1
op	103:62	0:0	8	]
op	103:63	0:0	8	.
water	103:64	0:0	8	length
stmts	104:8	107:8	5	
water	104:8	0:0	6	{
call	105:12	105:70	6	msg_Err
arg	105:21	105:26	7	demux
water	105:21	0:0	8	demux
arg	105:28	105:70	7	"cannot build SMF index (corrupted file?)"
water	105:28	0:0	8	"cannot build SMF index (corrupted file?)"
water	105:71	0:0	6	;
goto	106:12	106:22	6	error
water	106:17	0:0	7	error
water	107:8	0:0	6	}
for	108:8	120:8	4	(;;)
forinit	108:13	108:13	5	;
water	108:13	0:0	6	;
cond	0:0	0:0	5	
forexpr	0:0	0:0	5	
stmts	109:8	120:8	5	
water	109:8	0:0	6	{
if	110:12	115:12	6	(stream_Read (stream ,head ,8 ) < 8)
cond	110:16	110:48	7	stream_Read (stream ,head ,8 ) < 8
call	110:16	110:44	8	stream_Read
arg	110:29	110:35	9	stream
water	110:29	0:0	10	stream
arg	110:37	110:41	9	head
water	110:37	0:0	10	head
arg	110:43	110:44	9	8
water	110:43	0:0	10	8
op	110:46	0:0	8	<
water	110:48	0:0	8	8
stmts	111:12	115:12	7	
water	111:12	0:0	8	{
call	113:16	113:73	8	msg_Err
arg	113:25	113:30	9	demux
water	113:25	0:0	10	demux
arg	113:32	113:73	9	"incomplete SMF chunk, file is corrupted"
water	113:32	0:0	10	"incomplete SMF chunk, file is corrupted"
water	113:74	0:0	8	;
goto	114:16	114:26	8	error
water	114:21	0:0	9	error
water	115:12	0:0	8	}
if	116:12	117:21	6	(memcmp (head ,"MTrk" ,4 ) == 0)
cond	116:16	116:44	7	memcmp (head ,"MTrk" ,4 ) == 0
call	116:16	116:39	8	memcmp
arg	116:24	116:28	9	head
water	116:24	0:0	10	head
arg	116:30	116:36	9	"MTrk"
water	116:30	0:0	10	"MTrk"
arg	116:38	116:39	9	4
water	116:38	0:0	10	4
op	116:41	0:0	8	==
water	116:44	0:0	8	0
stmts	117:16	117:21	7	
break	117:16	117:21	8	
call	118:12	118:56	6	msg_Dbg
arg	118:21	118:26	7	demux
water	118:21	0:0	8	demux
arg	118:28	118:56	7	"skipping unknown SMF chunk"
water	118:28	0:0	8	"skipping unknown SMF chunk"
water	118:57	0:0	6	;
call	119:12	119:57	6	stream_Read
arg	119:25	119:31	7	stream
water	119:25	0:0	8	stream
arg	119:33	119:37	7	NULL
water	119:33	0:0	8	NULL
arg	119:39	119:57	7	GetDWBE(head+4)
call	119:39	119:56	8	GetDWBE
arg	119:48	119:56	9	head+4
water	119:48	0:0	10	head
op	119:53	0:0	10	+
water	119:55	0:0	10	4
water	119:58	0:0	6	;
water	120:8	0:0	6	}
water	121:8	0:0	4	tr
op	121:10	0:0	4	->
water	121:12	0:0	4	start
op	121:18	0:0	4	=
call	121:20	121:39	4	stream_Tell
arg	121:33	121:39	5	stream
water	121:33	0:0	6	stream
water	121:40	0:0	4	;
water	122:8	0:0	4	tr
op	122:10	0:0	4	->
water	122:12	0:0	4	length
op	122:19	0:0	4	=
call	122:21	122:38	4	GetDWBE
arg	122:30	122:38	5	head+4
water	122:30	0:0	6	head
op	122:35	0:0	6	+
water	122:37	0:0	6	4
water	122:39	0:0	4	;
water	123:4	0:0	4	}
decl	124:4	124:10	2	bool	b
if	125:4	133:4	2	(stream_Control (stream ,STREAM_CAN_FASTSEEK ,& b ) == 0 && b)
cond	125:8	125:65	3	stream_Control (stream ,STREAM_CAN_FASTSEEK ,& b ) == 0 && b
call	125:8	125:55	4	stream_Control
arg	125:24	125:30	5	stream
water	125:24	0:0	6	stream
arg	125:32	125:51	5	STREAM_CAN_FASTSEEK
water	125:32	0:0	6	STREAM_CAN_FASTSEEK
arg	125:53	125:55	5	&b
op	125:53	0:0	6	&
water	125:54	0:0	6	b
op	125:57	0:0	4	==
water	125:60	0:0	4	0
op	125:62	0:0	4	&&
water	125:65	0:0	4	b
stmts	126:4	133:4	3	
water	126:4	0:0	4	{
if	127:8	128:22	4	(SeekSet0 (demux ))
cond	127:12	127:27	5	SeekSet0 (demux )
call	127:12	127:27	6	SeekSet0
arg	127:22	127:27	7	demux
water	127:22	0:0	8	demux
stmts	128:12	128:22	5	
goto	128:12	128:22	6	error
water	128:17	0:0	7	error
for	129:8	131:22	4	( uint64_t pulse = 0 ;pulse != UINT64_MAX;)
forinit	0:0	129:31	5	 uint64_t pulse = 0 ;
decl	129:13	129:31	6	uint64_t	pulse
op	129:28	0:0	6	=
water	129:30	0:0	6	0
cond	129:33	129:42	5	pulse != UINT64_MAX
water	129:33	0:0	6	pulse
op	129:39	0:0	6	!=
water	129:42	0:0	6	UINT64_MAX
forexpr	0:0	0:0	5	
stmts	130:13	131:22	5	
if	130:13	131:22	6	(ReadEvents (demux ,& pulse ,NULL ))
cond	130:17	130:48	7	ReadEvents (demux ,& pulse ,NULL )
call	130:17	130:48	8	ReadEvents
arg	130:29	130:34	9	demux
water	130:29	0:0	10	demux
arg	130:36	130:42	9	&pulse
op	130:36	0:0	10	&
water	130:37	0:0	10	pulse
arg	130:44	130:48	9	NULL
water	130:44	0:0	10	NULL
stmts	131:17	131:22	7	
break	131:17	131:22	8	
water	132:8	0:0	4	sys
op	132:11	0:0	4	->
water	132:13	0:0	4	duration
op	132:22	0:0	4	=
call	132:24	132:43	4	date_Get
arg	132:34	132:43	5	&sys->pts
op	132:34	0:0	6	&
water	132:35	0:0	6	sys
op	132:38	0:0	6	->
water	132:40	0:0	6	pts
water	132:44	0:0	4	;
water	133:4	0:0	4	}
if	134:4	135:18	2	(SeekSet0 (demux ))
cond	134:8	134:23	3	SeekSet0 (demux )
call	134:8	134:23	4	SeekSet0
arg	134:18	134:23	5	demux
water	134:18	0:0	6	demux
stmts	135:8	135:18	3	
goto	135:8	135:18	4	error
water	135:13	0:0	5	error
decl	136:4	136:20	2	es_format_t	fmt
call	137:4	137:50	2	es_format_Init
arg	137:20	137:24	3	&fmt
op	137:20	0:0	4	&
water	137:21	0:0	4	fmt
arg	137:26	137:34	3	AUDIO_ES
water	137:26	0:0	4	AUDIO_ES
arg	137:36	137:50	3	VLC_CODEC_MIDI
water	137:36	0:0	4	VLC_CODEC_MIDI
water	137:51	0:0	2	;
water	138:4	0:0	2	fmt
op	138:7	0:0	2	.
water	138:8	0:0	2	audio
op	138:13	0:0	2	.
water	138:14	0:0	2	i_channels
op	138:25	0:0	2	=
water	138:27	0:0	2	2
water	138:28	0:0	2	;
water	139:4	0:0	2	fmt
op	139:7	0:0	2	.
water	139:8	0:0	2	audio
op	139:13	0:0	2	.
water	139:14	0:0	2	i_rate
op	139:21	0:0	2	=
water	139:23	0:0	2	44100
water	139:28	0:0	2	;
water	140:4	0:0	2	sys
op	140:7	0:0	2	->
water	140:9	0:0	2	es
op	140:12	0:0	2	=
call	140:14	140:42	2	es_out_Add
arg	140:26	140:36	3	demux->out
water	140:26	0:0	4	demux
op	140:31	0:0	4	->
water	140:33	0:0	4	out
arg	140:38	140:42	3	&fmt
op	140:38	0:0	4	&
water	140:39	0:0	4	fmt
water	140:43	0:0	2	;
water	141:4	0:0	2	demux
op	141:9	0:0	2	->
water	141:11	0:0	2	pf_demux
op	141:20	0:0	2	=
water	141:22	0:0	2	Demux
water	141:27	0:0	2	;
water	142:4	0:0	2	demux
op	142:9	0:0	2	->
water	142:11	0:0	2	pf_control
op	142:22	0:0	2	=
water	142:24	0:0	2	Control
water	142:31	0:0	2	;
return	143:4	143:22	2	VLC_SUCCESS
water	143:11	0:0	3	VLC_SUCCESS
label	144:0	144:5	2	error :
call	145:4	145:13	2	free
arg	145:10	145:13	3	sys
water	145:10	0:0	4	sys
water	145:14	0:0	2	;
return	146:4	146:23	2	VLC_EGENERIC
water	146:11	0:0	3	VLC_EGENERIC
