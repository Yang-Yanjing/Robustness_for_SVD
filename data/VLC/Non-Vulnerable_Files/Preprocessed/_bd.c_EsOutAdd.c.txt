func	2:0	53:0	0	static es_out_id_t *	EsOutAdd
params	2:28	0:0	1	
param	2:30	2:45	2	es_out_t *	p_out
param	2:47	2:72	2	const es_format_t *	p_fmt
stmnts	0:0	52:15	1	
decl	4:4	4:44	2	demux_t	*p_demux
op	4:21	0:0	2	=
water	4:23	0:0	2	p_out
op	4:28	0:0	2	->
water	4:30	0:0	2	p_sys
op	4:35	0:0	2	->
water	4:37	0:0	2	p_demux
decl	5:4	5:76	2	const bd_mpls_t	*p_mpls
op	5:28	0:0	2	=
water	5:30	0:0	2	p_demux
op	5:37	0:0	2	->
water	5:39	0:0	2	p_sys
op	5:44	0:0	2	->
water	5:46	0:0	2	pp_mpls
op	5:53	0:0	2	[
water	5:54	0:0	2	p_demux
op	5:61	0:0	2	->
water	5:63	0:0	2	info
op	5:67	0:0	2	.
water	5:68	0:0	2	i_title
op	5:75	0:0	2	]
decl	6:4	6:89	2	const bd_mpls_play_item_t	*p_item
op	6:38	0:0	2	=
op	6:40	0:0	2	&
water	6:41	0:0	2	p_mpls
op	6:47	0:0	2	->
water	6:49	0:0	2	p_play_item
op	6:60	0:0	2	[
water	6:61	0:0	2	p_demux
op	6:68	0:0	2	->
water	6:70	0:0	2	p_sys
op	6:75	0:0	2	->
water	6:77	0:0	2	i_play_item
op	6:88	0:0	2	]
decl	7:4	7:19	2	es_format_t	fmt
call	8:4	8:32	2	es_format_Copy
arg	8:20	8:24	3	&fmt
op	8:20	0:0	4	&
water	8:21	0:0	4	fmt
arg	8:26	8:32	3	p_fmt
water	8:26	0:0	4	p_fmt
water	8:33	0:0	2	;
water	9:4	0:0	2	fmt
op	9:7	0:0	2	.
water	9:8	0:0	2	i_priority
op	9:19	0:0	2	=
water	9:21	0:0	2	ES_PRIORITY_NOT_SELECTABLE
water	9:47	0:0	2	;
for	10:4	46:4	2	( int i = 0 ;i < p_item -> i_stream;i ++)
forinit	0:0	10:18	3	 int i = 0 ;
decl	10:9	10:18	4	int	i
op	10:15	0:0	4	=
water	10:17	0:0	4	0
cond	10:20	10:32	3	i < p_item -> i_stream
water	10:20	0:0	4	i
op	10:22	0:0	4	<
water	10:24	0:0	4	p_item
op	10:30	0:0	4	->
water	10:32	0:0	4	i_stream
forexpr	10:42	10:43	3	i ++
water	10:42	0:0	4	i
op	10:43	0:0	4	++
stmts	11:4	46:4	3	
water	11:4	0:0	4	{
decl	12:8	12:63	4	const bd_mpls_stream_t	*p_stream
op	12:41	0:0	4	=
op	12:43	0:0	4	&
water	12:44	0:0	4	p_item
op	12:50	0:0	4	->
water	12:52	0:0	4	p_stream
op	12:60	0:0	4	[
water	12:61	0:0	4	i
op	12:62	0:0	4	]
if	13:8	15:20	4	(p_stream -> i_type != BD_MPLS_STREAM_TYPE_PLAY_ITEM || p_stream -> play_item . i_pid != fmt . i_id)
cond	13:12	14:45	5	p_stream -> i_type != BD_MPLS_STREAM_TYPE_PLAY_ITEM || p_stream -> play_item . i_pid != fmt . i_id
water	13:12	0:0	6	p_stream
op	13:20	0:0	6	->
water	13:22	0:0	6	i_type
op	13:29	0:0	6	!=
water	13:32	0:0	6	BD_MPLS_STREAM_TYPE_PLAY_ITEM
op	13:62	0:0	6	||
water	14:12	0:0	6	p_stream
op	14:20	0:0	6	->
water	14:22	0:0	6	play_item
op	14:31	0:0	6	.
water	14:32	0:0	6	i_pid
op	14:38	0:0	6	!=
water	14:41	0:0	6	fmt
op	14:44	0:0	6	.
water	14:45	0:0	6	i_id
stmts	15:12	15:20	5	
continue	15:12	15:20	6	
water	19:8	0:0	4	fmt
op	19:11	0:0	4	.
water	19:12	0:0	4	i_priority
op	19:23	0:0	4	=
water	19:25	0:0	4	ES_PRIORITY_SELECTABLE_MIN
water	19:51	0:0	4	;
call	22:8	22:34	4	free
arg	22:14	22:34	5	fmt.psz_description
water	22:14	0:0	6	fmt
op	22:17	0:0	6	.
water	22:18	0:0	6	psz_description
water	22:35	0:0	4	;
switch	23:8	31:8	4	(p_stream -> i_class)
cond	23:16	23:26	5	p_stream -> i_class
water	23:16	0:0	6	p_stream
op	23:24	0:0	6	->
water	23:26	0:0	6	i_class
stmts	24:8	31:8	5	
water	24:8	0:0	6	{
label	25:8	25:49	6	case BD_MPLS_STREAM_CLASS_SECONDARY_AUDIO :
water	26:12	0:0	6	fmt
op	26:15	0:0	6	.
water	26:16	0:0	6	psz_description
op	26:32	0:0	6	=
call	26:34	26:60	6	strdup
arg	26:42	26:60	7	"Secondary audio"
water	26:42	0:0	8	"Secondary audio"
water	26:61	0:0	6	;
break	27:12	27:17	6	
label	28:8	28:15	6	default :
water	29:12	0:0	6	fmt
op	29:15	0:0	6	.
water	29:16	0:0	6	psz_description
op	29:32	0:0	6	=
water	29:34	0:0	6	NULL
water	29:38	0:0	6	;
break	30:12	30:17	6	
water	31:8	0:0	6	}
if	34:8	38:8	4	(* p_stream -> psz_language && ( ! fmt . psz_language || * fmt . psz_language == '\0' ))
cond	34:12	34:88	5	* p_stream -> psz_language && ( ! fmt . psz_language || * fmt . psz_language == '\0' )
op	34:12	0:0	6	*
water	34:13	0:0	6	p_stream
op	34:21	0:0	6	->
water	34:23	0:0	6	psz_language
op	34:36	0:0	6	&&
water	34:39	0:0	6	(
op	34:41	0:0	6	!
water	34:42	0:0	6	fmt
op	34:45	0:0	6	.
water	34:46	0:0	6	psz_language
op	34:59	0:0	6	||
op	34:62	0:0	6	*
water	34:63	0:0	6	fmt
op	34:66	0:0	6	.
water	34:67	0:0	6	psz_language
op	34:80	0:0	6	==
water	34:83	0:0	6	'\0'
water	34:88	0:0	6	)
stmts	35:8	38:8	5	
water	35:8	0:0	6	{
call	36:12	36:35	6	free
arg	36:18	36:35	7	fmt.psz_language
water	36:18	0:0	8	fmt
op	36:21	0:0	8	.
water	36:22	0:0	8	psz_language
water	36:36	0:0	6	;
water	37:12	0:0	6	fmt
op	37:15	0:0	6	.
water	37:16	0:0	6	psz_language
op	37:29	0:0	6	=
call	37:31	37:62	6	strdup
arg	37:39	37:62	7	p_stream->psz_language
water	37:39	0:0	8	p_stream
op	37:47	0:0	8	->
water	37:49	0:0	8	psz_language
water	37:63	0:0	6	;
water	38:8	0:0	6	}
switch	39:8	44:8	4	(p_stream -> i_charset)
cond	39:16	39:26	5	p_stream -> i_charset
water	39:16	0:0	6	p_stream
op	39:24	0:0	6	->
water	39:26	0:0	6	i_charset
stmts	40:8	44:8	5	
water	40:8	0:0	6	{
label	42:8	42:15	6	default :
break	43:12	43:17	6	
water	44:8	0:0	6	}
break	45:8	45:13	4	
water	46:4	0:0	4	}
if	47:4	48:66	2	(fmt . i_priority < ES_PRIORITY_SELECTABLE_MIN)
cond	47:8	47:25	3	fmt . i_priority < ES_PRIORITY_SELECTABLE_MIN
water	47:8	0:0	4	fmt
op	47:11	0:0	4	.
water	47:12	0:0	4	i_priority
op	47:23	0:0	4	<
water	47:25	0:0	4	ES_PRIORITY_SELECTABLE_MIN
stmts	48:8	48:66	3	
call	48:8	48:65	4	msg_Dbg
arg	48:17	48:24	5	p_demux
water	48:17	0:0	6	p_demux
arg	48:26	48:54	5	"Hiding one stream (pid=%d)"
water	48:26	0:0	6	"Hiding one stream (pid=%d)"
arg	48:56	48:65	5	fmt.i_id
water	48:56	0:0	6	fmt
op	48:59	0:0	6	.
water	48:60	0:0	6	i_id
water	48:66	0:0	4	;
decl	50:4	50:56	2	es_out_id_t	*p_es
op	50:22	0:0	2	=
call	50:24	50:55	3	es_out_Add
arg	50:36	50:48	4	p_demux->out
water	50:36	0:0	5	p_demux
op	50:43	0:0	5	->
water	50:45	0:0	5	out
arg	50:50	50:55	4	&fmt
op	50:50	0:0	5	&
water	50:51	0:0	5	fmt
call	51:4	51:26	2	es_format_Clean
arg	51:21	51:26	3	&fmt
op	51:21	0:0	4	&
water	51:22	0:0	4	fmt
water	51:27	0:0	2	;
return	52:4	52:15	2	p_es
water	52:11	0:0	3	p_es
