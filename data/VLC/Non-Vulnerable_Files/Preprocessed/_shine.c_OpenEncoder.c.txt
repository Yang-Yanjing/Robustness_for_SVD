func	2:0	66:0	0	static int	OpenEncoder
params	2:22	0:0	1	
param	2:24	2:45	2	vlc_object_t *	p_this
stmnts	0:0	65:21	1	
decl	4:4	4:41	2	encoder_t	*p_enc
op	4:21	0:0	2	=
water	4:23	0:0	2	(
water	4:24	0:0	2	encoder_t
op	4:33	0:0	2	*
water	4:34	0:0	2	)
water	4:35	0:0	2	p_this
decl	5:4	5:24	2	encoder_sys_t	*p_sys
if	7:4	9:27	2	(( p_enc -> fmt_out . i_codec != VLC_CODEC_MP3 && p_enc -> fmt_out . i_codec != VLC_CODEC_MPGA ) || p_enc -> fmt_out . audio . i_channels > 2)
cond	7:8	8:42	3	( p_enc -> fmt_out . i_codec != VLC_CODEC_MP3 && p_enc -> fmt_out . i_codec != VLC_CODEC_MPGA ) || p_enc -> fmt_out . audio . i_channels > 2
water	7:8	0:0	4	(
water	7:9	0:0	4	p_enc
op	7:14	0:0	4	->
water	7:16	0:0	4	fmt_out
op	7:23	0:0	4	.
water	7:24	0:0	4	i_codec
op	7:32	0:0	4	!=
water	7:35	0:0	4	VLC_CODEC_MP3
op	7:49	0:0	4	&&
water	7:52	0:0	4	p_enc
op	7:57	0:0	4	->
water	7:59	0:0	4	fmt_out
op	7:66	0:0	4	.
water	7:67	0:0	4	i_codec
op	7:75	0:0	4	!=
water	7:78	0:0	4	VLC_CODEC_MPGA
water	7:92	0:0	4	)
op	7:94	0:0	4	||
water	8:8	0:0	4	p_enc
op	8:13	0:0	4	->
water	8:15	0:0	4	fmt_out
op	8:22	0:0	4	.
water	8:23	0:0	4	audio
op	8:28	0:0	4	.
water	8:29	0:0	4	i_channels
op	8:40	0:0	4	>
water	8:42	0:0	4	2
stmts	9:8	9:27	3	
return	9:8	9:27	4	VLC_EGENERIC
water	9:15	0:0	5	VLC_EGENERIC
if	11:4	16:4	2	(p_enc -> fmt_in . audio . i_channels != 2)
cond	11:8	11:42	3	p_enc -> fmt_in . audio . i_channels != 2
water	11:8	0:0	4	p_enc
op	11:13	0:0	4	->
water	11:15	0:0	4	fmt_in
op	11:21	0:0	4	.
water	11:22	0:0	4	audio
op	11:27	0:0	4	.
water	11:28	0:0	4	i_channels
op	11:39	0:0	4	!=
water	11:42	0:0	4	2
stmts	12:4	16:4	3	
water	12:4	0:0	4	{
call	13:8	14:43	4	msg_Err
arg	13:17	13:22	5	p_enc
water	13:17	0:0	6	p_enc
arg	13:24	13:78	5	"Only stereo input is accepted, rejecting %d channels"
water	13:24	0:0	6	"Only stereo input is accepted, rejecting %d channels"
arg	14:12	14:43	5	p_enc->fmt_in.audio.i_channels
water	14:12	0:0	6	p_enc
op	14:17	0:0	6	->
water	14:19	0:0	6	fmt_in
op	14:25	0:0	6	.
water	14:26	0:0	6	audio
op	14:31	0:0	6	.
water	14:32	0:0	6	i_channels
water	14:44	0:0	4	;
return	15:8	15:27	4	VLC_EGENERIC
water	15:15	0:0	5	VLC_EGENERIC
water	16:4	0:0	4	}
if	17:4	21:4	2	(p_enc -> fmt_out . i_bitrate <= 0)
cond	17:8	17:36	3	p_enc -> fmt_out . i_bitrate <= 0
water	17:8	0:0	4	p_enc
op	17:13	0:0	4	->
water	17:15	0:0	4	fmt_out
op	17:22	0:0	4	.
water	17:23	0:0	4	i_bitrate
op	17:33	0:0	4	<=
water	17:36	0:0	4	0
stmts	18:4	21:4	3	
water	18:4	0:0	4	{
call	19:8	19:42	4	msg_Err
arg	19:17	19:22	5	p_enc
water	19:17	0:0	6	p_enc
arg	19:24	19:42	5	"unknown bitrate"
water	19:24	0:0	6	"unknown bitrate"
water	19:43	0:0	4	;
return	20:8	20:27	4	VLC_EGENERIC
water	20:15	0:0	5	VLC_EGENERIC
water	21:4	0:0	4	}
call	22:4	24:45	2	msg_Dbg
arg	22:13	22:18	3	p_enc
water	22:13	0:0	4	p_enc
arg	22:20	22:60	3	"bitrate %d, samplerate %d, channels %d"
water	22:20	0:0	4	"bitrate %d, samplerate %d, channels %d"
arg	23:13	23:37	3	p_enc->fmt_out.i_bitrate
water	23:13	0:0	4	p_enc
op	23:18	0:0	4	->
water	23:20	0:0	4	fmt_out
op	23:27	0:0	4	.
water	23:28	0:0	4	i_bitrate
arg	23:39	23:66	3	p_enc->fmt_out.audio.i_rate
water	23:39	0:0	4	p_enc
op	23:44	0:0	4	->
water	23:46	0:0	4	fmt_out
op	23:53	0:0	4	.
water	23:54	0:0	4	audio
op	23:59	0:0	4	.
water	23:60	0:0	4	i_rate
arg	24:13	24:45	3	p_enc->fmt_out.audio.i_channels
water	24:13	0:0	4	p_enc
op	24:18	0:0	4	->
water	24:20	0:0	4	fmt_out
op	24:27	0:0	4	.
water	24:28	0:0	4	audio
op	24:33	0:0	4	.
water	24:34	0:0	4	i_channels
water	24:46	0:0	2	;
call	25:4	25:34	2	vlc_mutex_lock
arg	25:20	25:34	3	&entrant.lock
op	25:20	0:0	4	&
water	25:21	0:0	4	entrant
op	25:28	0:0	4	.
water	25:29	0:0	4	lock
water	25:35	0:0	2	;
if	26:4	31:4	2	(entrant . busy)
cond	26:8	26:16	3	entrant . busy
water	26:8	0:0	4	entrant
op	26:15	0:0	4	.
water	26:16	0:0	4	busy
stmts	27:4	31:4	3	
water	27:4	0:0	4	{
call	28:8	28:54	4	msg_Err
arg	28:17	28:22	5	p_enc
water	28:17	0:0	6	p_enc
arg	28:24	28:54	5	"encoder already in progress"
water	28:24	0:0	6	"encoder already in progress"
water	28:55	0:0	4	;
call	29:8	29:40	4	vlc_mutex_unlock
arg	29:26	29:40	5	&entrant.lock
op	29:26	0:0	6	&
water	29:27	0:0	6	entrant
op	29:34	0:0	6	.
water	29:35	0:0	6	lock
water	29:41	0:0	4	;
return	30:8	30:27	4	VLC_EGENERIC
water	30:15	0:0	5	VLC_EGENERIC
water	31:4	0:0	4	}
water	32:4	0:0	2	entrant
op	32:11	0:0	2	.
water	32:12	0:0	2	busy
op	32:17	0:0	2	=
water	32:19	0:0	2	true
water	32:23	0:0	2	;
call	33:4	33:36	2	vlc_mutex_unlock
arg	33:22	33:36	3	&entrant.lock
op	33:22	0:0	4	&
water	33:23	0:0	4	entrant
op	33:30	0:0	4	.
water	33:31	0:0	4	lock
water	33:37	0:0	2	;
water	34:4	0:0	2	p_enc
op	34:9	0:0	2	->
water	34:11	0:0	2	p_sys
op	34:17	0:0	2	=
water	34:19	0:0	2	p_sys
op	34:25	0:0	2	=
call	34:27	34:55	2	calloc
arg	34:35	34:36	3	1
water	34:35	0:0	4	1
arg	34:38	34:55	3	sizeof(*p_sys)
op	34:38	0:0	4	sizeof
water	34:44	0:0	4	(
op	34:46	0:0	4	*
water	34:47	0:0	4	p_sys
water	34:53	0:0	4	)
water	34:56	0:0	2	;
if	35:4	36:19	2	(! p_sys)
cond	35:8	35:9	3	! p_sys
op	35:8	0:0	4	!
water	35:9	0:0	4	p_sys
stmts	36:8	36:19	3	
goto	36:8	36:19	4	enomem
water	36:13	0:0	5	enomem
if	37:4	41:4	2	(! ( p_sys -> p_fifo =block_FifoNew ( ) ))
cond	37:8	37:43	3	! ( p_sys -> p_fifo =block_FifoNew ( ) )
op	37:8	0:0	4	!
water	37:9	0:0	4	(
water	37:11	0:0	4	p_sys
op	37:16	0:0	4	->
water	37:18	0:0	4	p_fifo
op	37:25	0:0	4	=
call	37:27	37:41	4	block_FifoNew
water	37:43	0:0	4	)
stmts	38:4	41:4	3	
water	38:4	0:0	4	{
call	39:8	39:20	4	free
arg	39:14	39:20	5	p_sys
water	39:14	0:0	6	p_sys
water	39:21	0:0	4	;
goto	40:8	40:19	4	enomem
water	40:13	0:0	5	enomem
water	41:4	0:0	4	}
decl	42:4	47:5	2	shine_config_t	cfg
op	42:23	0:0	2	=
water	42:25	0:0	2	{
op	43:8	0:0	2	.
water	43:9	0:0	2	wave
op	43:14	0:0	2	=
water	43:16	0:0	2	{
op	44:12	0:0	2	.
water	44:13	0:0	2	channels
op	44:22	0:0	2	=
water	44:24	0:0	2	p_enc
op	44:29	0:0	2	->
water	44:31	0:0	2	fmt_out
op	44:38	0:0	2	.
water	44:39	0:0	2	audio
op	44:44	0:0	2	.
water	44:45	0:0	2	i_channels
water	44:55	0:0	2	,
op	45:12	0:0	2	.
water	45:13	0:0	2	samplerate
op	45:24	0:0	2	=
water	45:26	0:0	2	p_enc
op	45:31	0:0	2	->
water	45:33	0:0	2	fmt_out
op	45:40	0:0	2	.
water	45:41	0:0	2	audio
op	45:46	0:0	2	.
water	45:47	0:0	2	i_rate
water	45:53	0:0	2	,
water	46:8	0:0	2	}
water	46:9	0:0	2	,
water	47:4	0:0	2	}
call	48:4	48:44	2	shine_set_config_mpeg_defaults
arg	48:35	48:44	3	&cfg.mpeg
op	48:35	0:0	4	&
water	48:36	0:0	4	cfg
op	48:39	0:0	4	.
water	48:40	0:0	4	mpeg
water	48:45	0:0	2	;
water	49:4	0:0	2	cfg
op	49:7	0:0	2	.
water	49:8	0:0	2	mpeg
op	49:12	0:0	2	.
water	49:13	0:0	2	bitr
op	49:18	0:0	2	=
water	49:20	0:0	2	p_enc
op	49:25	0:0	2	->
water	49:27	0:0	2	fmt_out
op	49:34	0:0	2	.
water	49:35	0:0	2	i_bitrate
op	49:45	0:0	2	/
water	49:47	0:0	2	1000
water	49:51	0:0	2	;
if	50:4	54:4	2	(shine_check_config (cfg . wave . samplerate ,cfg . mpeg . bitr ) == - 1)
cond	50:8	50:67	3	shine_check_config (cfg . wave . samplerate ,cfg . mpeg . bitr ) == - 1
call	50:8	50:61	4	shine_check_config
arg	50:27	50:46	5	cfg.wave.samplerate
water	50:27	0:0	6	cfg
op	50:30	0:0	6	.
water	50:31	0:0	6	wave
op	50:35	0:0	6	.
water	50:36	0:0	6	samplerate
arg	50:48	50:61	5	cfg.mpeg.bitr
water	50:48	0:0	6	cfg
op	50:51	0:0	6	.
water	50:52	0:0	6	mpeg
op	50:56	0:0	6	.
water	50:57	0:0	6	bitr
op	50:63	0:0	4	==
op	50:66	0:0	4	-
water	50:67	0:0	4	1
stmts	50:70	54:4	3	
water	50:70	0:0	4	{
call	51:8	51:60	4	msg_Err
arg	51:16	51:21	5	p_enc
water	51:16	0:0	6	p_enc
arg	51:23	51:45	5	"Invalid bitrate %d\n"
water	51:23	0:0	6	"Invalid bitrate %d\n"
arg	51:47	51:60	5	cfg.mpeg.bitr
water	51:47	0:0	6	cfg
op	51:50	0:0	6	.
water	51:51	0:0	6	mpeg
op	51:55	0:0	6	.
water	51:56	0:0	6	bitr
water	51:61	0:0	4	;
call	52:8	52:18	4	free
arg	52:13	52:18	5	p_sys
water	52:13	0:0	6	p_sys
water	52:19	0:0	4	;
return	53:8	53:27	4	VLC_EGENERIC
water	53:15	0:0	5	VLC_EGENERIC
water	54:4	0:0	4	}
water	55:4	0:0	2	p_sys
op	55:9	0:0	2	->
water	55:11	0:0	2	s
op	55:13	0:0	2	=
call	55:15	55:36	2	shine_initialise
arg	55:32	55:36	3	&cfg
op	55:32	0:0	4	&
water	55:33	0:0	4	cfg
water	55:37	0:0	2	;
water	56:4	0:0	2	p_sys
op	56:9	0:0	2	->
water	56:11	0:0	2	samples_per_frame
op	56:29	0:0	2	=
call	56:31	56:62	2	shine_samples_per_pass
arg	56:54	56:62	3	p_sys->s
water	56:54	0:0	4	p_sys
op	56:59	0:0	4	->
water	56:61	0:0	4	s
water	56:63	0:0	2	;
water	57:4	0:0	2	p_enc
op	57:9	0:0	2	->
water	57:11	0:0	2	pf_encode_audio
op	57:27	0:0	2	=
water	57:29	0:0	2	EncodeFrame
water	57:40	0:0	2	;
water	58:4	0:0	2	p_enc
op	58:9	0:0	2	->
water	58:11	0:0	2	fmt_out
op	58:18	0:0	2	.
water	58:19	0:0	2	i_cat
op	58:25	0:0	2	=
water	58:27	0:0	2	AUDIO_ES
water	58:35	0:0	2	;
water	59:4	0:0	2	p_enc
op	59:9	0:0	2	->
water	59:11	0:0	2	fmt_in
op	59:17	0:0	2	.
water	59:18	0:0	2	i_codec
op	59:26	0:0	2	=
water	59:28	0:0	2	VLC_CODEC_S16N
water	59:42	0:0	2	;
return	60:4	60:22	2	VLC_SUCCESS
water	60:11	0:0	3	VLC_SUCCESS
label	61:0	61:6	2	enomem :
call	62:4	62:34	2	vlc_mutex_lock
arg	62:20	62:34	3	&entrant.lock
op	62:20	0:0	4	&
water	62:21	0:0	4	entrant
op	62:28	0:0	4	.
water	62:29	0:0	4	lock
water	62:35	0:0	2	;
water	63:4	0:0	2	entrant
op	63:11	0:0	2	.
water	63:12	0:0	2	busy
op	63:17	0:0	2	=
water	63:19	0:0	2	false
water	63:24	0:0	2	;
call	64:4	64:36	2	vlc_mutex_unlock
arg	64:22	64:36	3	&entrant.lock
op	64:22	0:0	4	&
water	64:23	0:0	4	entrant
op	64:30	0:0	4	.
water	64:31	0:0	4	lock
water	64:37	0:0	2	;
return	65:4	65:21	2	VLC_ENOMEM
water	65:11	0:0	3	VLC_ENOMEM
