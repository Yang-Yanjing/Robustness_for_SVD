func	2:0	106:0	0	static int	StartDecode
params	2:22	0:0	1	
param	2:24	2:41	2	demux_t *	p_demux
stmnts	0:0	105:22	1	
decl	4:4	4:39	2	demux_sys_t	*p_sys
op	4:23	0:0	2	=
water	4:25	0:0	2	p_demux
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:19	2	es_format_t	fmt
decl	6:4	6:20	2	char	*psz_parser
water	7:4	0:0	2	p_sys
op	7:9	0:0	2	->
water	7:11	0:0	2	i_next_date
op	7:23	0:0	2	=
water	7:25	0:0	2	START_DATE
water	7:35	0:0	2	;
water	8:4	0:0	2	p_sys
op	8:9	0:0	2	->
water	8:11	0:0	2	i_incr
op	8:18	0:0	2	=
water	8:20	0:0	2	1000000
op	8:28	0:0	2	*
water	8:30	0:0	2	p_sys
op	8:35	0:0	2	->
water	8:37	0:0	2	i_frame_rate_base
op	8:55	0:0	2	/
water	8:57	0:0	2	p_sys
op	8:62	0:0	2	->
water	8:64	0:0	2	i_frame_rate
water	8:76	0:0	2	;
water	9:4	0:0	2	p_sys
op	9:9	0:0	2	->
water	9:11	0:0	2	i_block_size
op	9:24	0:0	2	=
water	9:26	0:0	2	p_sys
op	9:31	0:0	2	->
water	9:33	0:0	2	i_width
op	9:41	0:0	2	*
water	9:43	0:0	2	p_sys
op	9:48	0:0	2	->
water	9:50	0:0	2	i_height
op	9:59	0:0	2	*
water	9:61	0:0	2	3
op	9:63	0:0	2	/
water	9:65	0:0	2	2
op	10:27	0:0	2	+
op	10:29	0:0	2	sizeof
water	10:35	0:0	2	(
water	10:36	0:0	2	struct
water	10:43	0:0	2	block_extension_t
water	10:60	0:0	2	)
water	10:61	0:0	2	;
if	11:4	12:25	2	(NewFrame (p_demux ) != VLC_SUCCESS)
cond	11:8	11:31	3	NewFrame (p_demux ) != VLC_SUCCESS
call	11:8	11:26	4	NewFrame
arg	11:18	11:26	5	p_demux
water	11:18	0:0	6	p_demux
op	11:28	0:0	4	!=
water	11:31	0:0	4	VLC_SUCCESS
stmts	12:8	12:25	3	
return	12:8	12:25	4	VLC_ENOMEM
water	12:15	0:0	5	VLC_ENOMEM
call	14:4	14:51	2	es_format_Init
arg	14:20	14:24	3	&fmt
op	14:20	0:0	4	&
water	14:21	0:0	4	fmt
arg	14:26	14:34	3	VIDEO_ES
water	14:26	0:0	4	VIDEO_ES
arg	14:36	14:51	3	VLC_CODEC_I420
water	14:36	0:0	4	VLC_CODEC_I420
water	14:52	0:0	2	;
water	15:4	0:0	2	fmt
op	15:7	0:0	2	.
water	15:8	0:0	2	i_id
op	15:32	0:0	2	=
water	15:34	0:0	2	p_sys
op	15:39	0:0	2	->
water	15:41	0:0	2	i_id_video
water	15:51	0:0	2	;
water	16:4	0:0	2	fmt
op	16:7	0:0	2	.
water	16:8	0:0	2	video
op	16:13	0:0	2	.
water	16:14	0:0	2	i_frame_rate
op	16:32	0:0	2	=
water	16:34	0:0	2	p_sys
op	16:39	0:0	2	->
water	16:41	0:0	2	i_frame_rate
water	16:53	0:0	2	;
water	17:4	0:0	2	fmt
op	17:7	0:0	2	.
water	17:8	0:0	2	video
op	17:13	0:0	2	.
water	17:14	0:0	2	i_frame_rate_base
op	17:32	0:0	2	=
water	17:34	0:0	2	p_sys
op	17:39	0:0	2	->
water	17:41	0:0	2	i_frame_rate_base
water	17:58	0:0	2	;
water	18:4	0:0	2	fmt
op	18:7	0:0	2	.
water	18:8	0:0	2	video
op	18:13	0:0	2	.
water	18:14	0:0	2	i_width
op	18:32	0:0	2	=
water	18:34	0:0	2	p_sys
op	18:39	0:0	2	->
water	18:41	0:0	2	i_width
water	18:48	0:0	2	;
water	19:4	0:0	2	fmt
op	19:7	0:0	2	.
water	19:8	0:0	2	video
op	19:13	0:0	2	.
water	19:14	0:0	2	i_height
op	19:32	0:0	2	=
water	19:34	0:0	2	p_sys
op	19:39	0:0	2	->
water	19:41	0:0	2	i_height
water	19:49	0:0	2	;
decl	20:4	21:59	2	int	i_aspect
op	20:17	0:0	2	=
water	20:19	0:0	2	p_sys
op	20:24	0:0	2	->
water	20:26	0:0	2	i_forced_aspect
water	20:42	0:0	2	?
water	20:44	0:0	2	p_sys
op	20:49	0:0	2	->
water	20:51	0:0	2	i_forced_aspect
water	21:42	0:0	2	:
water	21:44	0:0	2	p_sys
op	21:49	0:0	2	->
water	21:51	0:0	2	i_aspect
water	22:4	0:0	2	fmt
op	22:7	0:0	2	.
water	22:8	0:0	2	video
op	22:13	0:0	2	.
water	22:14	0:0	2	i_sar_num
op	22:24	0:0	2	=
water	22:26	0:0	2	i_aspect
op	22:35	0:0	2	*
water	22:37	0:0	2	fmt
op	22:40	0:0	2	.
water	22:41	0:0	2	video
op	22:46	0:0	2	.
water	22:47	0:0	2	i_height
op	23:27	0:0	2	/
water	23:29	0:0	2	fmt
op	23:32	0:0	2	.
water	23:33	0:0	2	video
op	23:38	0:0	2	.
water	23:39	0:0	2	i_width
water	23:46	0:0	2	;
water	24:4	0:0	2	fmt
op	24:7	0:0	2	.
water	24:8	0:0	2	video
op	24:13	0:0	2	.
water	24:14	0:0	2	i_sar_den
op	24:24	0:0	2	=
water	24:26	0:0	2	VOUT_ASPECT_FACTOR
water	24:44	0:0	2	;
water	25:4	0:0	2	p_sys
op	25:9	0:0	2	->
water	25:11	0:0	2	p_es_video
op	25:24	0:0	2	=
call	25:26	25:57	2	es_out_Add
arg	25:38	25:50	3	p_demux->out
water	25:38	0:0	4	p_demux
op	25:45	0:0	4	->
water	25:47	0:0	4	out
arg	25:52	25:57	3	&fmt
op	25:52	0:0	4	&
water	25:53	0:0	4	fmt
water	25:58	0:0	2	;
if	26:4	27:24	2	(p_sys -> b_vbi &&InitWSS (p_demux ) != VLC_SUCCESS)
cond	26:9	26:47	3	p_sys -> b_vbi &&InitWSS (p_demux ) != VLC_SUCCESS
water	26:9	0:0	4	p_sys
op	26:14	0:0	4	->
water	26:16	0:0	4	b_vbi
op	26:22	0:0	4	&&
call	26:25	26:42	4	InitWSS
arg	26:34	26:42	5	p_demux
water	26:34	0:0	6	p_demux
op	26:44	0:0	4	!=
water	26:47	0:0	4	VLC_SUCCESS
stmts	27:8	27:24	3	
water	27:8	0:0	4	p_sys
op	27:13	0:0	4	->
water	27:15	0:0	4	b_vbi
op	27:21	0:0	4	=
water	27:23	0:0	4	0
water	27:24	0:0	4	;
water	29:4	0:0	2	psz_parser
op	29:15	0:0	2	=
water	29:17	0:0	2	p_sys
op	29:22	0:0	2	->
water	29:24	0:0	2	psz_telx
water	29:32	0:0	2	;
if	30:4	104:4	2	(psz_parser != NULL && * psz_parser)
cond	30:9	30:32	3	psz_parser != NULL && * psz_parser
water	30:9	0:0	4	psz_parser
op	30:20	0:0	4	!=
water	30:23	0:0	4	NULL
op	30:28	0:0	4	&&
op	30:31	0:0	4	*
water	30:32	0:0	4	psz_parser
stmts	31:4	104:4	3	
water	31:4	0:0	4	{
if	32:8	35:8	4	(! p_sys -> b_vbi)
cond	32:13	32:21	5	! p_sys -> b_vbi
op	32:13	0:0	6	!
water	32:14	0:0	6	p_sys
op	32:19	0:0	6	->
water	32:21	0:0	6	b_vbi
stmts	33:8	35:8	5	
water	33:8	0:0	6	{
call	34:12	34:73	6	msg_Warn
arg	34:22	34:29	7	p_demux
water	34:22	0:0	8	p_demux
arg	34:31	34:73	7	"VBI is unsupported on this input stream"
water	34:31	0:0	8	"VBI is unsupported on this input stream"
water	34:74	0:0	6	;
water	35:8	0:0	6	}
else	36:8	103:8	4
stmts	37:8	103:8	5	
water	37:8	0:0	6	{
decl	38:12	38:20	6	int	i_id
decl	39:12	39:54	6	char	*psz_next
op	39:27	0:0	6	=
call	39:29	39:53	7	strchr
arg	39:37	39:47	8	psz_parser
water	39:37	0:0	9	psz_parser
arg	39:49	39:53	8	'='
water	39:49	0:0	9	'='
if	40:12	45:12	6	(psz_next != NULL)
cond	40:17	40:29	7	psz_next != NULL
water	40:17	0:0	8	psz_next
op	40:26	0:0	8	!=
water	40:29	0:0	8	NULL
stmts	41:12	45:12	7	
water	41:12	0:0	8	{
op	42:16	0:0	8	*
water	42:17	0:0	8	psz_next
op	42:26	0:0	8	=
water	42:28	0:0	8	'\0'
water	42:32	0:0	8	;
water	43:16	0:0	8	i_id
op	43:21	0:0	8	=
call	43:23	43:51	8	strtol
arg	43:31	43:41	9	psz_parser
water	43:31	0:0	10	psz_parser
arg	43:43	43:47	9	NULL
water	43:43	0:0	10	NULL
arg	43:49	43:51	9	0
water	43:49	0:0	10	0
water	43:52	0:0	8	;
water	44:16	0:0	8	psz_parser
op	44:27	0:0	8	=
water	44:29	0:0	8	psz_next
op	44:38	0:0	8	+
water	44:40	0:0	8	1
water	44:41	0:0	8	;
water	45:12	0:0	8	}
else	46:12	47:24	6
stmts	47:16	47:24	7	
water	47:16	0:0	8	i_id
op	47:21	0:0	8	=
water	47:23	0:0	8	0
water	47:24	0:0	8	;
water	48:12	0:0	6	psz_next
op	48:21	0:0	6	=
call	48:23	48:47	6	strchr
arg	48:31	48:41	7	psz_parser
water	48:31	0:0	8	psz_parser
arg	48:43	48:47	7	'-'
water	48:43	0:0	8	'-'
water	48:48	0:0	6	;
if	49:12	50:34	6	(psz_next != NULL)
cond	49:17	49:29	7	psz_next != NULL
water	49:17	0:0	8	psz_next
op	49:26	0:0	8	!=
water	49:29	0:0	8	NULL
stmts	50:16	50:34	7	
op	50:16	0:0	8	*
water	50:17	0:0	8	psz_next
op	50:25	0:0	8	++
op	50:28	0:0	8	=
water	50:30	0:0	8	'\0'
water	50:34	0:0	8	;
water	51:12	0:0	6	p_sys
op	51:17	0:0	6	->
water	51:19	0:0	6	i_telx_line
op	51:31	0:0	6	=
call	51:33	51:61	6	strtol
arg	51:41	51:51	7	psz_parser
water	51:41	0:0	8	psz_parser
arg	51:53	51:57	7	NULL
water	51:53	0:0	8	NULL
arg	51:59	51:61	7	0
water	51:59	0:0	8	0
op	51:63	0:0	6	-
water	51:65	0:0	6	1
water	51:66	0:0	6	;
if	52:12	54:67	6	(psz_next != NULL)
cond	52:17	52:29	7	psz_next != NULL
water	52:17	0:0	8	psz_next
op	52:26	0:0	8	!=
water	52:29	0:0	8	NULL
stmts	53:16	54:67	7	
water	53:16	0:0	8	p_sys
op	53:21	0:0	8	->
water	53:23	0:0	8	i_telx_count
op	53:36	0:0	8	=
call	53:38	53:64	8	strtol
arg	53:46	53:54	9	psz_next
water	53:46	0:0	10	psz_next
arg	53:56	53:60	9	NULL
water	53:56	0:0	10	NULL
arg	53:62	53:64	9	0
water	53:62	0:0	10	0
op	54:39	0:0	8	-
water	54:41	0:0	8	p_sys
op	54:46	0:0	8	->
water	54:48	0:0	8	i_telx_line
op	54:60	0:0	8	-
water	54:62	0:0	8	1
op	54:64	0:0	8	+
water	54:66	0:0	8	1
water	54:67	0:0	8	;
else	55:12	56:39	6
stmts	56:16	56:39	7	
water	56:16	0:0	8	p_sys
op	56:21	0:0	8	->
water	56:23	0:0	8	i_telx_count
op	56:36	0:0	8	=
water	56:38	0:0	8	1
water	56:39	0:0	8	;
if	57:12	100:12	6	(InitTelx (p_demux ) == VLC_SUCCESS)
cond	57:17	57:40	7	InitTelx (p_demux ) == VLC_SUCCESS
call	57:17	57:35	8	InitTelx
arg	57:27	57:35	9	p_demux
water	57:27	0:0	10	p_demux
op	57:37	0:0	8	==
water	57:40	0:0	8	VLC_SUCCESS
stmts	58:12	100:12	7	
water	58:12	0:0	8	{
decl	59:16	59:33	8	int	i_dr_size
op	59:30	0:0	8	=
water	59:32	0:0	8	0
decl	60:16	60:36	8	uint8_t	*p_dr
op	60:30	0:0	8	=
water	60:32	0:0	8	NULL
call	61:16	66:74	8	msg_Dbg
arg	61:25	61:32	9	p_demux
water	61:25	0:0	10	p_demux
arg	61:34	61:71	9	"capturing VBI lines %d-%d and %d-%d"
water	61:34	0:0	10	"capturing VBI lines %d-%d and %d-%d"
arg	62:25	62:47	9	p_sys->i_telx_line+1
water	62:25	0:0	10	p_sys
op	62:30	0:0	10	->
water	62:32	0:0	10	i_telx_line
op	62:44	0:0	10	+
water	62:46	0:0	10	1
arg	63:25	63:73	9	p_sys->i_telx_line+1+p_sys->i_telx_count-1
water	63:25	0:0	10	p_sys
op	63:30	0:0	10	->
water	63:32	0:0	10	i_telx_line
op	63:44	0:0	10	+
water	63:46	0:0	10	1
op	63:48	0:0	10	+
water	63:50	0:0	10	p_sys
op	63:55	0:0	10	->
water	63:57	0:0	10	i_telx_count
op	63:70	0:0	10	-
water	63:72	0:0	10	1
arg	64:25	64:53	9	p_sys->i_telx_line+1+313
water	64:25	0:0	10	p_sys
op	64:30	0:0	10	->
water	64:32	0:0	10	i_telx_line
op	64:44	0:0	10	+
water	64:46	0:0	10	1
op	64:48	0:0	10	+
water	64:50	0:0	10	313
arg	65:25	66:74	9	p_sys->i_telx_line+1+313+p_sys->i_telx_count-1
water	65:25	0:0	10	p_sys
op	65:30	0:0	10	->
water	65:32	0:0	10	i_telx_line
op	65:44	0:0	10	+
water	65:46	0:0	10	1
op	65:48	0:0	10	+
water	65:50	0:0	10	313
op	66:48	0:0	10	+
water	66:50	0:0	10	p_sys
op	66:55	0:0	10	->
water	66:57	0:0	10	i_telx_count
op	66:70	0:0	10	-
water	66:72	0:0	10	1
water	66:75	0:0	8	;
call	67:16	67:65	8	es_format_Init
arg	67:32	67:36	9	&fmt
op	67:32	0:0	10	&
water	67:33	0:0	10	fmt
arg	67:38	67:44	9	SPU_ES
water	67:38	0:0	10	SPU_ES
arg	67:46	67:65	9	VLC_CODEC_TELETEXT
water	67:46	0:0	10	VLC_CODEC_TELETEXT
water	67:66	0:0	8	;
water	68:16	0:0	8	fmt
op	68:19	0:0	8	.
water	68:20	0:0	8	i_id
op	68:25	0:0	8	=
water	68:27	0:0	8	i_id
water	68:31	0:0	8	;
water	70:16	0:0	8	psz_parser
op	70:27	0:0	8	=
water	70:29	0:0	8	p_sys
op	70:34	0:0	8	->
water	70:36	0:0	8	psz_telx_lang
water	70:49	0:0	8	;
while	71:16	96:16	8	(( psz_next =strchr (psz_parser ,'=' ) ) != NULL)
cond	71:24	71:66	9	( psz_next =strchr (psz_parser ,'=' ) ) != NULL
water	71:24	0:0	10	(
water	71:25	0:0	10	psz_next
op	71:34	0:0	10	=
call	71:36	71:60	10	strchr
arg	71:44	71:54	11	psz_parser
water	71:44	0:0	12	psz_parser
arg	71:56	71:60	11	'='
water	71:56	0:0	12	'='
water	71:61	0:0	10	)
op	71:63	0:0	10	!=
water	71:66	0:0	10	NULL
stmts	72:16	96:16	9	
water	72:16	0:0	10	{
decl	73:20	73:30	10	int	i_page
op	74:20	0:0	10	*
water	74:21	0:0	10	psz_next
op	74:29	0:0	10	++
op	74:32	0:0	10	=
water	74:34	0:0	10	'\0'
water	74:38	0:0	10	;
if	75:20	76:29	10	(! psz_next [ 0 ] || ! psz_next [ 1 ] || ! psz_next [ 2 ])
cond	75:25	75:68	11	! psz_next [ 0 ] || ! psz_next [ 1 ] || ! psz_next [ 2 ]
op	75:25	0:0	12	!
water	75:26	0:0	12	psz_next
op	75:34	0:0	12	[
water	75:35	0:0	12	0
op	75:36	0:0	12	]
op	75:38	0:0	12	||
op	75:41	0:0	12	!
water	75:42	0:0	12	psz_next
op	75:50	0:0	12	[
water	75:51	0:0	12	1
op	75:52	0:0	12	]
op	75:54	0:0	12	||
op	75:57	0:0	12	!
water	75:58	0:0	12	psz_next
op	75:66	0:0	12	[
water	75:67	0:0	12	2
op	75:68	0:0	12	]
stmts	76:24	76:29	11	
break	76:24	76:29	12	
water	77:20	0:0	10	i_page
op	77:27	0:0	10	=
call	77:29	77:57	10	strtol
arg	77:37	77:47	11	psz_parser
water	77:37	0:0	12	psz_parser
arg	77:49	77:53	11	NULL
water	77:49	0:0	12	NULL
arg	77:55	77:57	11	0
water	77:55	0:0	12	0
water	77:58	0:0	10	;
water	78:20	0:0	10	i_dr_size
op	78:30	0:0	10	+=
water	78:33	0:0	10	5
water	78:34	0:0	10	;
water	79:20	0:0	10	p_dr
op	79:25	0:0	10	=
call	79:27	79:52	10	realloc
arg	79:36	79:40	11	p_dr
water	79:36	0:0	12	p_dr
arg	79:42	79:52	11	i_dr_size
water	79:42	0:0	12	i_dr_size
water	79:53	0:0	10	;
water	80:20	0:0	10	p_dr
op	80:24	0:0	10	[
water	80:25	0:0	10	i_dr_size
op	80:35	0:0	10	-
water	80:37	0:0	10	5
op	80:38	0:0	10	]
op	80:40	0:0	10	=
op	80:42	0:0	10	*
water	80:43	0:0	10	psz_next
op	80:51	0:0	10	++
water	80:53	0:0	10	;
water	81:20	0:0	10	p_dr
op	81:24	0:0	10	[
water	81:25	0:0	10	i_dr_size
op	81:35	0:0	10	-
water	81:37	0:0	10	4
op	81:38	0:0	10	]
op	81:40	0:0	10	=
op	81:42	0:0	10	*
water	81:43	0:0	10	psz_next
op	81:51	0:0	10	++
water	81:53	0:0	10	;
water	82:20	0:0	10	p_dr
op	82:24	0:0	10	[
water	82:25	0:0	10	i_dr_size
op	82:35	0:0	10	-
water	82:37	0:0	10	3
op	82:38	0:0	10	]
op	82:40	0:0	10	=
op	82:42	0:0	10	*
water	82:43	0:0	10	psz_next
op	82:51	0:0	10	++
water	82:53	0:0	10	;
if	83:20	88:20	10	(* psz_next == '/')
cond	83:25	83:38	11	* psz_next == '/'
op	83:25	0:0	12	*
water	83:26	0:0	12	psz_next
op	83:35	0:0	12	==
water	83:38	0:0	12	'/'
stmts	84:20	88:20	11	
water	84:20	0:0	12	{
water	85:24	0:0	12	psz_next
op	85:32	0:0	12	++
water	85:34	0:0	12	;
water	86:24	0:0	12	p_dr
op	86:28	0:0	12	[
water	86:29	0:0	12	i_dr_size
op	86:39	0:0	12	-
water	86:41	0:0	12	2
op	86:42	0:0	12	]
op	86:44	0:0	12	=
call	86:46	86:77	12	strtol
arg	86:54	86:62	13	psz_next
water	86:54	0:0	14	psz_next
arg	86:64	86:73	13	&psz_next
op	86:64	0:0	14	&
water	86:65	0:0	14	psz_next
arg	86:75	86:77	13	0
water	86:75	0:0	14	0
op	87:47	0:0	12	<<
water	87:50	0:0	12	3
water	87:51	0:0	12	;
water	88:20	0:0	12	}
else	89:20	90:54	10
stmts	90:24	90:54	11	
water	90:24	0:0	12	p_dr
op	90:28	0:0	12	[
water	90:29	0:0	12	i_dr_size
op	90:39	0:0	12	-
water	90:41	0:0	12	2
op	90:42	0:0	12	]
op	90:44	0:0	12	=
water	90:46	0:0	12	0
water	90:47	0:0	12	x5
op	90:50	0:0	12	<<
water	90:53	0:0	12	3
water	90:54	0:0	12	;
water	91:20	0:0	10	p_dr
op	91:24	0:0	10	[
water	91:25	0:0	10	i_dr_size
op	91:35	0:0	10	-
water	91:37	0:0	10	2
op	91:38	0:0	10	]
op	91:40	0:0	10	|=
water	91:43	0:0	10	(
water	91:44	0:0	10	i_page
op	91:51	0:0	10	/
water	91:53	0:0	10	100
water	91:56	0:0	10	)
op	91:58	0:0	10	&
water	91:60	0:0	10	0
water	91:61	0:0	10	x7
water	91:63	0:0	10	;
water	92:20	0:0	10	p_dr
op	92:24	0:0	10	[
water	92:25	0:0	10	i_dr_size
op	92:35	0:0	10	-
water	92:37	0:0	10	1
op	92:38	0:0	10	]
op	92:40	0:0	10	=
water	92:42	0:0	10	i_page
op	92:49	0:0	10	%
water	92:51	0:0	10	100
water	92:54	0:0	10	;
if	93:20	94:34	10	(* psz_next == ',')
cond	93:25	93:38	11	* psz_next == ','
op	93:25	0:0	12	*
water	93:26	0:0	12	psz_next
op	93:35	0:0	12	==
water	93:38	0:0	12	','
stmts	94:24	94:34	11	
water	94:24	0:0	12	psz_next
op	94:32	0:0	12	++
water	94:34	0:0	12	;
water	95:20	0:0	10	psz_parser
op	95:31	0:0	10	=
water	95:33	0:0	10	psz_next
water	95:41	0:0	10	;
water	96:16	0:0	10	}
water	97:16	0:0	8	fmt
op	97:19	0:0	8	.
water	97:20	0:0	8	i_extra
op	97:28	0:0	8	=
water	97:30	0:0	8	i_dr_size
water	97:39	0:0	8	;
water	98:16	0:0	8	fmt
op	98:19	0:0	8	.
water	98:20	0:0	8	p_extra
op	98:28	0:0	8	=
water	98:30	0:0	8	p_dr
water	98:34	0:0	8	;
water	99:16	0:0	8	p_sys
op	99:21	0:0	8	->
water	99:23	0:0	8	p_es_telx
op	99:33	0:0	8	=
call	99:35	99:66	8	es_out_Add
arg	99:47	99:59	9	p_demux->out
water	99:47	0:0	10	p_demux
op	99:54	0:0	10	->
water	99:56	0:0	10	out
arg	99:61	99:66	9	&fmt
op	99:61	0:0	10	&
water	99:62	0:0	10	fmt
water	99:67	0:0	8	;
water	100:12	0:0	8	}
else	101:12	102:39	6
stmts	102:16	102:39	7	
water	102:16	0:0	8	p_sys
op	102:21	0:0	8	->
water	102:23	0:0	8	i_telx_count
op	102:36	0:0	8	=
water	102:38	0:0	8	0
water	102:39	0:0	8	;
water	103:8	0:0	6	}
water	104:4	0:0	4	}
return	105:4	105:22	2	VLC_SUCCESS
water	105:11	0:0	3	VLC_SUCCESS
