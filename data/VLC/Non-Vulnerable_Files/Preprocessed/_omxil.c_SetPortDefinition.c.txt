func	2:0	137:0	0	static OMX_ERRORTYPE	SetPortDefinition
params	2:38	0:0	1	
param	2:39	2:55	2	decoder_t *	p_dec
param	2:57	2:72	2	OmxPort *	p_port
param	3:39	3:57	2	es_format_t *	p_fmt
stmnts	0:0	136:20	1	
decl	5:4	5:59	2	OMX_PARAM_PORTDEFINITIONTYPE	*def
op	5:38	0:0	2	=
op	5:40	0:0	2	&
water	5:41	0:0	2	p_port
op	5:47	0:0	2	->
water	5:49	0:0	2	definition
decl	6:4	6:27	2	OMX_ERRORTYPE	omx_error
water	7:4	0:0	2	omx_error
op	7:14	0:0	2	=
call	7:16	8:66	2	OMX_GetParameter
arg	7:33	7:51	3	p_port->omx_handle
water	7:33	0:0	4	p_port
op	7:39	0:0	4	->
water	7:41	0:0	4	omx_handle
arg	8:33	8:61	3	OMX_IndexParamPortDefinition
water	8:33	0:0	4	OMX_IndexParamPortDefinition
arg	8:63	8:66	3	def
water	8:63	0:0	4	def
water	8:67	0:0	2	;
call	9:4	10:51	2	CHECK_ERROR
arg	9:16	9:25	3	omx_error
water	9:16	0:0	4	omx_error
arg	9:27	9:62	3	"OMX_GetParameter failed (%x : %s)"
water	9:27	0:0	4	"OMX_GetParameter failed (%x : %s)"
arg	10:16	10:25	3	omx_error
water	10:16	0:0	4	omx_error
arg	10:27	10:51	3	ErrorToString(omx_error)
call	10:27	10:50	4	ErrorToString
arg	10:41	10:50	5	omx_error
water	10:41	0:0	6	omx_error
water	10:52	0:0	2	;
switch	11:4	90:4	2	(p_fmt -> i_cat)
cond	11:11	11:18	3	p_fmt -> i_cat
water	11:11	0:0	4	p_fmt
op	11:16	0:0	4	->
water	11:18	0:0	4	i_cat
stmts	12:4	90:4	3	
water	12:4	0:0	4	{
label	13:4	13:17	4	case VIDEO_ES :
water	14:8	0:0	4	def
op	14:11	0:0	4	->
water	14:13	0:0	4	format
op	14:19	0:0	4	.
water	14:20	0:0	4	video
op	14:25	0:0	4	.
water	14:26	0:0	4	nFrameWidth
op	14:38	0:0	4	=
water	14:40	0:0	4	p_fmt
op	14:45	0:0	4	->
water	14:47	0:0	4	video
op	14:52	0:0	4	.
water	14:53	0:0	4	i_width
water	14:60	0:0	4	;
water	15:8	0:0	4	def
op	15:11	0:0	4	->
water	15:13	0:0	4	format
op	15:19	0:0	4	.
water	15:20	0:0	4	video
op	15:25	0:0	4	.
water	15:26	0:0	4	nFrameHeight
op	15:39	0:0	4	=
water	15:41	0:0	4	p_fmt
op	15:46	0:0	4	->
water	15:48	0:0	4	video
op	15:53	0:0	4	.
water	15:54	0:0	4	i_height
water	15:62	0:0	4	;
if	16:8	17:69	4	(def -> format . video . eCompressionFormat == OMX_VIDEO_CodingUnused)
cond	16:11	16:51	5	def -> format . video . eCompressionFormat == OMX_VIDEO_CodingUnused
water	16:11	0:0	6	def
op	16:14	0:0	6	->
water	16:16	0:0	6	format
op	16:22	0:0	6	.
water	16:23	0:0	6	video
op	16:28	0:0	6	.
water	16:29	0:0	6	eCompressionFormat
op	16:48	0:0	6	==
water	16:51	0:0	6	OMX_VIDEO_CodingUnused
stmts	17:12	17:69	5	
water	17:12	0:0	6	def
op	17:15	0:0	6	->
water	17:17	0:0	6	format
op	17:23	0:0	6	.
water	17:24	0:0	6	video
op	17:29	0:0	6	.
water	17:30	0:0	6	nStride
op	17:38	0:0	6	=
water	17:40	0:0	6	def
op	17:43	0:0	6	->
water	17:45	0:0	6	format
op	17:51	0:0	6	.
water	17:52	0:0	6	video
op	17:57	0:0	6	.
water	17:58	0:0	6	nFrameWidth
water	17:69	0:0	6	;
if	18:8	21:46	4	(p_fmt -> video . i_frame_rate > 0 && p_fmt -> video . i_frame_rate_base > 0)
cond	18:12	19:45	5	p_fmt -> video . i_frame_rate > 0 && p_fmt -> video . i_frame_rate_base > 0
water	18:12	0:0	6	p_fmt
op	18:17	0:0	6	->
water	18:19	0:0	6	video
op	18:24	0:0	6	.
water	18:25	0:0	6	i_frame_rate
op	18:38	0:0	6	>
water	18:40	0:0	6	0
op	18:42	0:0	6	&&
water	19:12	0:0	6	p_fmt
op	19:17	0:0	6	->
water	19:19	0:0	6	video
op	19:24	0:0	6	.
water	19:25	0:0	6	i_frame_rate_base
op	19:43	0:0	6	>
water	19:45	0:0	6	0
stmts	20:12	21:46	5	
water	20:12	0:0	6	def
op	20:15	0:0	6	->
water	20:17	0:0	6	format
op	20:23	0:0	6	.
water	20:24	0:0	6	video
op	20:29	0:0	6	.
water	20:30	0:0	6	xFramerate
op	20:41	0:0	6	=
water	20:43	0:0	6	(
water	20:44	0:0	6	p_fmt
op	20:49	0:0	6	->
water	20:51	0:0	6	video
op	20:56	0:0	6	.
water	20:57	0:0	6	i_frame_rate
op	20:70	0:0	6	<<
water	20:73	0:0	6	16
water	20:75	0:0	6	)
op	20:77	0:0	6	/
water	21:16	0:0	6	p_fmt
op	21:21	0:0	6	->
water	21:23	0:0	6	video
op	21:28	0:0	6	.
water	21:29	0:0	6	i_frame_rate_base
water	21:46	0:0	6	;
if	22:8	46:8	4	(def -> eDir == OMX_DirInput || p_dec -> p_sys -> b_enc)
cond	22:11	22:54	5	def -> eDir == OMX_DirInput || p_dec -> p_sys -> b_enc
water	22:11	0:0	6	def
op	22:14	0:0	6	->
water	22:16	0:0	6	eDir
op	22:21	0:0	6	==
water	22:24	0:0	6	OMX_DirInput
op	22:37	0:0	6	||
water	22:40	0:0	6	p_dec
op	22:45	0:0	6	->
water	22:47	0:0	6	p_sys
op	22:52	0:0	6	->
water	22:54	0:0	6	b_enc
stmts	23:8	46:8	5	
water	23:8	0:0	6	{
if	24:12	26:52	6	(def -> eDir == OMX_DirInput && p_dec -> p_sys -> b_enc)
cond	24:16	24:59	7	def -> eDir == OMX_DirInput && p_dec -> p_sys -> b_enc
water	24:16	0:0	8	def
op	24:19	0:0	8	->
water	24:21	0:0	8	eDir
op	24:26	0:0	8	==
water	24:29	0:0	8	OMX_DirInput
op	24:42	0:0	8	&&
water	24:45	0:0	8	p_dec
op	24:50	0:0	8	->
water	24:52	0:0	8	p_sys
op	24:57	0:0	8	->
water	24:59	0:0	8	b_enc
stmts	25:16	26:52	7	
water	25:16	0:0	8	def
op	25:19	0:0	8	->
water	25:21	0:0	8	nBufferSize
op	25:33	0:0	8	=
water	25:35	0:0	8	def
op	25:38	0:0	8	->
water	25:40	0:0	8	format
op	25:46	0:0	8	.
water	25:47	0:0	8	video
op	25:52	0:0	8	.
water	25:53	0:0	8	nFrameWidth
op	25:65	0:0	8	*
water	26:18	0:0	8	def
op	26:21	0:0	8	->
water	26:23	0:0	8	format
op	26:29	0:0	8	.
water	26:30	0:0	8	video
op	26:35	0:0	8	.
water	26:36	0:0	8	nFrameHeight
op	26:49	0:0	8	*
water	26:51	0:0	8	2
water	26:52	0:0	8	;
water	27:12	0:0	6	p_port
op	27:18	0:0	6	->
water	27:20	0:0	6	i_frame_size
op	27:33	0:0	6	=
water	27:35	0:0	6	def
op	27:38	0:0	6	->
water	27:40	0:0	6	nBufferSize
water	27:51	0:0	6	;
if	28:12	45:12	6	(!GetOmxVideoFormat (p_fmt -> i_codec ,& def -> format . video . eCompressionFormat ,0 ))
cond	28:15	29:74	7	!GetOmxVideoFormat (p_fmt -> i_codec ,& def -> format . video . eCompressionFormat ,0 )
op	28:15	0:0	8	!
call	28:16	29:74	8	GetOmxVideoFormat
arg	28:34	28:48	9	p_fmt->i_codec
water	28:34	0:0	10	p_fmt
op	28:39	0:0	10	->
water	28:41	0:0	10	i_codec
arg	29:34	29:71	9	&def->format.video.eCompressionFormat
op	29:34	0:0	10	&
water	29:35	0:0	10	def
op	29:38	0:0	10	->
water	29:40	0:0	10	format
op	29:46	0:0	10	.
water	29:47	0:0	10	video
op	29:52	0:0	10	.
water	29:53	0:0	10	eCompressionFormat
arg	29:73	29:74	9	0
water	29:73	0:0	10	0
stmts	30:12	45:12	7	
water	30:12	0:0	8	{
if	31:16	37:16	8	(!GetOmxChromaFormat (p_fmt -> i_codec ,& def -> format . video . eColorFormat ,0 ))
cond	31:19	32:73	9	!GetOmxChromaFormat (p_fmt -> i_codec ,& def -> format . video . eColorFormat ,0 )
op	31:19	0:0	10	!
call	31:20	32:73	10	GetOmxChromaFormat
arg	31:39	31:53	11	p_fmt->i_codec
water	31:39	0:0	12	p_fmt
op	31:44	0:0	12	->
water	31:46	0:0	12	i_codec
arg	32:39	32:70	11	&def->format.video.eColorFormat
op	32:39	0:0	12	&
water	32:40	0:0	12	def
op	32:43	0:0	12	->
water	32:45	0:0	12	format
op	32:51	0:0	12	.
water	32:52	0:0	12	video
op	32:57	0:0	12	.
water	32:58	0:0	12	eColorFormat
arg	32:72	32:73	11	0
water	32:72	0:0	12	0
stmts	33:16	37:16	9	
water	33:16	0:0	10	{
water	34:20	0:0	10	omx_error
op	34:30	0:0	10	=
water	34:32	0:0	10	OMX_ErrorNotImplemented
water	34:55	0:0	10	;
call	35:20	36:56	10	CHECK_ERROR
arg	35:32	35:41	11	omx_error
water	35:32	0:0	12	omx_error
arg	35:43	35:85	11	"codec %4.4s doesn't match any OMX format"
water	35:43	0:0	12	"codec %4.4s doesn't match any OMX format"
arg	36:32	36:56	11	(char*)&p_fmt->i_codec
water	36:32	0:0	12	(
water	36:33	0:0	12	char
op	36:38	0:0	12	*
water	36:39	0:0	12	)
op	36:40	0:0	12	&
water	36:41	0:0	12	p_fmt
op	36:46	0:0	12	->
water	36:48	0:0	12	i_codec
water	36:57	0:0	10	;
water	37:16	0:0	10	}
call	38:16	42:70	8	GetVlcChromaSizes
arg	38:35	38:49	9	p_fmt->i_codec
water	38:35	0:0	10	p_fmt
op	38:40	0:0	10	->
water	38:42	0:0	10	i_codec
arg	39:35	39:64	9	def->format.video.nFrameWidth
water	39:35	0:0	10	def
op	39:38	0:0	10	->
water	39:40	0:0	10	format
op	39:46	0:0	10	.
water	39:47	0:0	10	video
op	39:52	0:0	10	.
water	39:53	0:0	10	nFrameWidth
arg	40:35	40:65	9	def->format.video.nFrameHeight
water	40:35	0:0	10	def
op	40:38	0:0	10	->
water	40:40	0:0	10	format
op	40:46	0:0	10	.
water	40:47	0:0	10	video
op	40:52	0:0	10	.
water	40:53	0:0	10	nFrameHeight
arg	41:35	41:56	9	&p_port->i_frame_size
op	41:35	0:0	10	&
water	41:36	0:0	10	p_port
op	41:42	0:0	10	->
water	41:44	0:0	10	i_frame_size
arg	41:58	41:81	9	&p_port->i_frame_stride
op	41:58	0:0	10	&
water	41:59	0:0	10	p_port
op	41:65	0:0	10	->
water	41:67	0:0	10	i_frame_stride
arg	42:35	42:70	9	&p_port->i_frame_stride_chroma_div
op	42:35	0:0	10	&
water	42:36	0:0	10	p_port
op	42:42	0:0	10	->
water	42:44	0:0	10	i_frame_stride_chroma_div
water	42:71	0:0	8	;
water	43:16	0:0	8	def
op	43:19	0:0	8	->
water	43:21	0:0	8	format
op	43:27	0:0	8	.
water	43:28	0:0	8	video
op	43:33	0:0	8	.
water	43:34	0:0	8	nStride
op	43:42	0:0	8	=
water	43:44	0:0	8	p_port
op	43:50	0:0	8	->
water	43:52	0:0	8	i_frame_stride
water	43:66	0:0	8	;
water	44:16	0:0	8	def
op	44:19	0:0	8	->
water	44:21	0:0	8	nBufferSize
op	44:33	0:0	8	=
water	44:35	0:0	8	p_port
op	44:41	0:0	8	->
water	44:43	0:0	8	i_frame_size
water	44:55	0:0	8	;
water	45:12	0:0	8	}
water	46:8	0:0	6	}
else	47:8	64:8	4
stmts	48:8	64:8	5	
water	48:8	0:0	6	{
if	49:12	55:12	6	(!GetVlcChromaFormat (def -> format . video . eColorFormat ,& p_fmt -> i_codec ,0 ))
cond	49:16	50:56	7	!GetVlcChromaFormat (def -> format . video . eColorFormat ,& p_fmt -> i_codec ,0 )
op	49:16	0:0	8	!
call	49:17	50:56	8	GetVlcChromaFormat
arg	49:37	49:67	9	def->format.video.eColorFormat
water	49:37	0:0	10	def
op	49:40	0:0	10	->
water	49:42	0:0	10	format
op	49:48	0:0	10	.
water	49:49	0:0	10	video
op	49:54	0:0	10	.
water	49:55	0:0	10	eColorFormat
arg	50:37	50:52	9	&p_fmt->i_codec
op	50:37	0:0	10	&
water	50:38	0:0	10	p_fmt
op	50:43	0:0	10	->
water	50:45	0:0	10	i_codec
arg	50:54	50:56	9	0
water	50:54	0:0	10	0
stmts	51:12	55:12	7	
water	51:12	0:0	8	{
water	52:16	0:0	8	omx_error
op	52:26	0:0	8	=
water	52:28	0:0	8	OMX_ErrorNotImplemented
water	52:51	0:0	8	;
call	53:16	54:64	8	CHECK_ERROR
arg	53:28	53:37	9	omx_error
water	53:28	0:0	10	omx_error
arg	53:39	53:74	9	"OMX color format %i not supported"
water	53:39	0:0	10	"OMX color format %i not supported"
arg	54:28	54:64	9	(int)def->format.video.eColorFormat
water	54:28	0:0	10	(
water	54:29	0:0	10	int
water	54:32	0:0	10	)
water	54:33	0:0	10	def
op	54:36	0:0	10	->
water	54:38	0:0	10	format
op	54:44	0:0	10	.
water	54:45	0:0	10	video
op	54:50	0:0	10	.
water	54:51	0:0	10	eColorFormat
water	54:65	0:0	8	;
water	55:12	0:0	8	}
call	56:12	60:66	6	GetVlcChromaSizes
arg	56:31	56:45	7	p_fmt->i_codec
water	56:31	0:0	8	p_fmt
op	56:36	0:0	8	->
water	56:38	0:0	8	i_codec
arg	57:31	57:60	7	def->format.video.nFrameWidth
water	57:31	0:0	8	def
op	57:34	0:0	8	->
water	57:36	0:0	8	format
op	57:42	0:0	8	.
water	57:43	0:0	8	video
op	57:48	0:0	8	.
water	57:49	0:0	8	nFrameWidth
arg	58:31	58:61	7	def->format.video.nFrameHeight
water	58:31	0:0	8	def
op	58:34	0:0	8	->
water	58:36	0:0	8	format
op	58:42	0:0	8	.
water	58:43	0:0	8	video
op	58:48	0:0	8	.
water	58:49	0:0	8	nFrameHeight
arg	59:31	59:52	7	&p_port->i_frame_size
op	59:31	0:0	8	&
water	59:32	0:0	8	p_port
op	59:38	0:0	8	->
water	59:40	0:0	8	i_frame_size
arg	59:54	59:77	7	&p_port->i_frame_stride
op	59:54	0:0	8	&
water	59:55	0:0	8	p_port
op	59:61	0:0	8	->
water	59:63	0:0	8	i_frame_stride
arg	60:31	60:66	7	&p_port->i_frame_stride_chroma_div
op	60:31	0:0	8	&
water	60:32	0:0	8	p_port
op	60:38	0:0	8	->
water	60:40	0:0	8	i_frame_stride_chroma_div
water	60:67	0:0	6	;
water	61:12	0:0	6	def
op	61:15	0:0	6	->
water	61:17	0:0	6	format
op	61:23	0:0	6	.
water	61:24	0:0	6	video
op	61:29	0:0	6	.
water	61:30	0:0	6	nStride
op	61:38	0:0	6	=
water	61:40	0:0	6	p_port
op	61:46	0:0	6	->
water	61:48	0:0	6	i_frame_stride
water	61:62	0:0	6	;
if	62:12	63:55	6	(p_port -> i_frame_size > def -> nBufferSize)
cond	62:16	62:44	7	p_port -> i_frame_size > def -> nBufferSize
water	62:16	0:0	8	p_port
op	62:22	0:0	8	->
water	62:24	0:0	8	i_frame_size
op	62:37	0:0	8	>
water	62:39	0:0	8	def
op	62:42	0:0	8	->
water	62:44	0:0	8	nBufferSize
stmts	63:16	63:55	7	
water	63:16	0:0	8	def
op	63:19	0:0	8	->
water	63:21	0:0	8	nBufferSize
op	63:33	0:0	8	=
water	63:35	0:0	8	p_port
op	63:41	0:0	8	->
water	63:43	0:0	8	i_frame_size
water	63:55	0:0	8	;
water	64:8	0:0	6	}
break	65:8	65:13	4	
label	66:4	66:17	4	case AUDIO_ES :
water	67:8	0:0	4	p_port
op	67:14	0:0	4	->
water	67:16	0:0	4	i_frame_size
op	67:29	0:0	4	=
water	67:31	0:0	4	def
op	67:34	0:0	4	->
water	67:36	0:0	4	nBufferSize
water	67:47	0:0	4	;
if	68:8	77:8	4	(def -> eDir == OMX_DirInput)
cond	68:11	68:24	5	def -> eDir == OMX_DirInput
water	68:11	0:0	6	def
op	68:14	0:0	6	->
water	68:16	0:0	6	eDir
op	68:21	0:0	6	==
water	68:24	0:0	6	OMX_DirInput
stmts	69:8	77:8	5	
water	69:8	0:0	6	{
if	70:12	76:12	6	(!GetOmxAudioFormat (p_fmt -> i_codec ,& def -> format . audio . eEncoding ,0 ))
cond	70:15	71:65	7	!GetOmxAudioFormat (p_fmt -> i_codec ,& def -> format . audio . eEncoding ,0 )
op	70:15	0:0	8	!
call	70:16	71:65	8	GetOmxAudioFormat
arg	70:34	70:48	9	p_fmt->i_codec
water	70:34	0:0	10	p_fmt
op	70:39	0:0	10	->
water	70:41	0:0	10	i_codec
arg	71:34	71:62	9	&def->format.audio.eEncoding
op	71:34	0:0	10	&
water	71:35	0:0	10	def
op	71:38	0:0	10	->
water	71:40	0:0	10	format
op	71:46	0:0	10	.
water	71:47	0:0	10	audio
op	71:52	0:0	10	.
water	71:53	0:0	10	eEncoding
arg	71:64	71:65	9	0
water	71:64	0:0	10	0
stmts	72:12	76:12	7	
water	72:12	0:0	8	{
water	73:16	0:0	8	omx_error
op	73:26	0:0	8	=
water	73:28	0:0	8	OMX_ErrorNotImplemented
water	73:51	0:0	8	;
call	74:16	75:52	8	CHECK_ERROR
arg	74:28	74:37	9	omx_error
water	74:28	0:0	10	omx_error
arg	74:39	74:81	9	"codec %4.4s doesn't match any OMX format"
water	74:39	0:0	10	"codec %4.4s doesn't match any OMX format"
arg	75:28	75:52	9	(char*)&p_fmt->i_codec
water	75:28	0:0	10	(
water	75:29	0:0	10	char
op	75:34	0:0	10	*
water	75:35	0:0	10	)
op	75:36	0:0	10	&
water	75:37	0:0	10	p_fmt
op	75:42	0:0	10	->
water	75:44	0:0	10	i_codec
water	75:53	0:0	8	;
water	76:12	0:0	8	}
water	77:8	0:0	6	}
else	78:8	87:8	4
stmts	79:8	87:8	5	
water	79:8	0:0	6	{
if	80:12	86:12	6	(!OmxToVlcAudioFormat (def -> format . audio . eEncoding ,& p_fmt -> i_codec ,0 ))
cond	80:16	81:54	7	!OmxToVlcAudioFormat (def -> format . audio . eEncoding ,& p_fmt -> i_codec ,0 )
op	80:16	0:0	8	!
call	80:17	81:54	8	OmxToVlcAudioFormat
arg	80:37	80:64	9	def->format.audio.eEncoding
water	80:37	0:0	10	def
op	80:40	0:0	10	->
water	80:42	0:0	10	format
op	80:48	0:0	10	.
water	80:49	0:0	10	audio
op	80:54	0:0	10	.
water	80:55	0:0	10	eEncoding
arg	81:35	81:50	9	&p_fmt->i_codec
op	81:35	0:0	10	&
water	81:36	0:0	10	p_fmt
op	81:41	0:0	10	->
water	81:43	0:0	10	i_codec
arg	81:52	81:54	9	0
water	81:52	0:0	10	0
stmts	82:12	86:12	7	
water	82:12	0:0	8	{
water	83:16	0:0	8	omx_error
op	83:26	0:0	8	=
water	83:28	0:0	8	OMX_ErrorNotImplemented
water	83:51	0:0	8	;
call	84:16	85:61	8	CHECK_ERROR
arg	84:28	84:37	9	omx_error
water	84:28	0:0	10	omx_error
arg	84:39	84:76	9	"OMX audio encoding %i not supported"
water	84:39	0:0	10	"OMX audio encoding %i not supported"
arg	85:28	85:61	9	(int)def->format.audio.eEncoding
water	85:28	0:0	10	(
water	85:29	0:0	10	int
water	85:32	0:0	10	)
water	85:33	0:0	10	def
op	85:36	0:0	10	->
water	85:38	0:0	10	format
op	85:44	0:0	10	.
water	85:45	0:0	10	audio
op	85:50	0:0	10	.
water	85:51	0:0	10	eEncoding
water	85:62	0:0	8	;
water	86:12	0:0	8	}
water	87:8	0:0	6	}
break	88:8	88:13	4	
label	89:4	89:11	4	default :
return	89:13	89:43	4	OMX_ErrorNotImplemented
water	89:20	0:0	5	OMX_ErrorNotImplemented
water	90:4	0:0	4	}
water	91:4	0:0	2	omx_error
op	91:14	0:0	2	=
call	91:16	91:70	2	ImplementationSpecificWorkarounds
arg	91:50	91:55	3	p_dec
water	91:50	0:0	4	p_dec
arg	91:57	91:63	3	p_port
water	91:57	0:0	4	p_port
arg	91:65	91:70	3	p_fmt
water	91:65	0:0	4	p_fmt
water	91:71	0:0	2	;
call	92:4	93:51	2	CHECK_ERROR
arg	92:16	92:25	3	omx_error
water	92:16	0:0	4	omx_error
arg	92:27	92:79	3	"ImplementationSpecificWorkarounds failed (%x : %s)"
water	92:27	0:0	4	"ImplementationSpecificWorkarounds failed (%x : %s)"
arg	93:16	93:25	3	omx_error
water	93:16	0:0	4	omx_error
arg	93:27	93:51	3	ErrorToString(omx_error)
call	93:27	93:50	4	ErrorToString
arg	93:41	93:50	5	omx_error
water	93:41	0:0	6	omx_error
water	93:52	0:0	2	;
water	94:4	0:0	2	omx_error
op	94:14	0:0	2	=
call	94:16	95:66	2	OMX_SetParameter
arg	94:33	94:51	3	p_port->omx_handle
water	94:33	0:0	4	p_port
op	94:39	0:0	4	->
water	94:41	0:0	4	omx_handle
arg	95:33	95:61	3	OMX_IndexParamPortDefinition
water	95:33	0:0	4	OMX_IndexParamPortDefinition
arg	95:63	95:66	3	def
water	95:63	0:0	4	def
water	95:67	0:0	2	;
call	96:4	97:51	2	CHECK_ERROR
arg	96:16	96:25	3	omx_error
water	96:16	0:0	4	omx_error
arg	96:27	96:62	3	"OMX_SetParameter failed (%x : %s)"
water	96:27	0:0	4	"OMX_SetParameter failed (%x : %s)"
arg	97:16	97:25	3	omx_error
water	97:16	0:0	4	omx_error
arg	97:27	97:51	3	ErrorToString(omx_error)
call	97:27	97:50	4	ErrorToString
arg	97:41	97:50	5	omx_error
water	97:41	0:0	6	omx_error
water	97:52	0:0	2	;
water	98:4	0:0	2	omx_error
op	98:14	0:0	2	=
call	98:16	99:66	2	OMX_GetParameter
arg	98:33	98:51	3	p_port->omx_handle
water	98:33	0:0	4	p_port
op	98:39	0:0	4	->
water	98:41	0:0	4	omx_handle
arg	99:33	99:61	3	OMX_IndexParamPortDefinition
water	99:33	0:0	4	OMX_IndexParamPortDefinition
arg	99:63	99:66	3	def
water	99:63	0:0	4	def
water	99:67	0:0	2	;
call	100:4	101:51	2	CHECK_ERROR
arg	100:16	100:25	3	omx_error
water	100:16	0:0	4	omx_error
arg	100:27	100:62	3	"OMX_GetParameter failed (%x : %s)"
water	100:27	0:0	4	"OMX_GetParameter failed (%x : %s)"
arg	101:16	101:25	3	omx_error
water	101:16	0:0	4	omx_error
arg	101:27	101:51	3	ErrorToString(omx_error)
call	101:27	101:50	4	ErrorToString
arg	101:41	101:50	5	omx_error
water	101:41	0:0	6	omx_error
water	101:52	0:0	2	;
if	102:4	103:47	2	(p_port -> i_frame_size > def -> nBufferSize)
cond	102:7	102:35	3	p_port -> i_frame_size > def -> nBufferSize
water	102:7	0:0	4	p_port
op	102:13	0:0	4	->
water	102:15	0:0	4	i_frame_size
op	102:28	0:0	4	>
water	102:30	0:0	4	def
op	102:33	0:0	4	->
water	102:35	0:0	4	nBufferSize
stmts	103:8	103:47	3	
water	103:8	0:0	4	def
op	103:11	0:0	4	->
water	103:13	0:0	4	nBufferSize
op	103:25	0:0	4	=
water	103:27	0:0	4	p_port
op	103:33	0:0	4	->
water	103:35	0:0	4	i_frame_size
water	103:47	0:0	4	;
water	104:4	0:0	2	p_port
op	104:10	0:0	2	->
water	104:12	0:0	2	i_frame_size
op	104:25	0:0	2	=
water	104:27	0:0	2	def
op	104:30	0:0	2	->
water	104:32	0:0	2	nBufferSize
water	104:43	0:0	2	;
if	106:4	125:4	2	(p_fmt -> i_cat == AUDIO_ES)
cond	106:7	106:23	3	p_fmt -> i_cat == AUDIO_ES
water	106:7	0:0	4	p_fmt
op	106:12	0:0	4	->
water	106:14	0:0	4	i_cat
op	106:20	0:0	4	==
water	106:23	0:0	4	AUDIO_ES
stmts	107:4	125:4	3	
water	107:4	0:0	4	{
water	108:8	0:0	4	omx_error
op	108:18	0:0	4	=
call	108:20	116:64	4	SetAudioParameters
arg	108:39	108:57	5	p_port->omx_handle
water	108:39	0:0	6	p_port
op	108:45	0:0	6	->
water	108:47	0:0	6	omx_handle
arg	109:39	109:60	5	&p_port->format_param
op	109:39	0:0	6	&
water	109:40	0:0	6	p_port
op	109:46	0:0	6	->
water	109:48	0:0	6	format_param
arg	109:62	109:77	5	def->nPortIndex
water	109:62	0:0	6	def
op	109:65	0:0	6	->
water	109:67	0:0	6	nPortIndex
arg	110:39	110:66	5	def->format.audio.eEncoding
water	110:39	0:0	6	def
op	110:42	0:0	6	->
water	110:44	0:0	6	format
op	110:50	0:0	6	.
water	110:51	0:0	6	audio
op	110:56	0:0	6	.
water	110:57	0:0	6	eEncoding
arg	111:39	111:53	5	p_fmt->i_codec
water	111:39	0:0	6	p_fmt
op	111:44	0:0	6	->
water	111:46	0:0	6	i_codec
arg	112:39	112:62	5	p_fmt->audio.i_channels
water	112:39	0:0	6	p_fmt
op	112:44	0:0	6	->
water	112:46	0:0	6	audio
op	112:51	0:0	6	.
water	112:52	0:0	6	i_channels
arg	113:39	113:58	5	p_fmt->audio.i_rate
water	113:39	0:0	6	p_fmt
op	113:44	0:0	6	->
water	113:46	0:0	6	audio
op	113:51	0:0	6	.
water	113:52	0:0	6	i_rate
arg	114:39	114:55	5	p_fmt->i_bitrate
water	114:39	0:0	6	p_fmt
op	114:44	0:0	6	->
water	114:46	0:0	6	i_bitrate
arg	115:39	115:67	5	p_fmt->audio.i_bitspersample
water	115:39	0:0	6	p_fmt
op	115:44	0:0	6	->
water	115:46	0:0	6	audio
op	115:51	0:0	6	.
water	115:52	0:0	6	i_bitspersample
arg	116:39	116:64	5	p_fmt->audio.i_blockalign
water	116:39	0:0	6	p_fmt
op	116:44	0:0	6	->
water	116:46	0:0	6	audio
op	116:51	0:0	6	.
water	116:52	0:0	6	i_blockalign
water	116:65	0:0	4	;
if	117:8	120:8	4	(def -> eDir == OMX_DirInput)
cond	117:12	117:25	5	def -> eDir == OMX_DirInput
water	117:12	0:0	6	def
op	117:15	0:0	6	->
water	117:17	0:0	6	eDir
op	117:22	0:0	6	==
water	117:25	0:0	6	OMX_DirInput
stmts	117:39	120:8	5	
water	117:39	0:0	6	{
call	118:12	119:59	6	CHECK_ERROR
arg	118:24	118:33	7	omx_error
water	118:24	0:0	8	omx_error
arg	118:35	118:72	7	"SetAudioParameters failed (%x : %s)"
water	118:35	0:0	8	"SetAudioParameters failed (%x : %s)"
arg	119:24	119:33	7	omx_error
water	119:24	0:0	8	omx_error
arg	119:35	119:59	7	ErrorToString(omx_error)
call	119:35	119:58	8	ErrorToString
arg	119:49	119:58	9	omx_error
water	119:49	0:0	10	omx_error
water	119:60	0:0	6	;
water	120:8	0:0	6	}
else	120:10	124:8	4
stmts	120:15	124:8	5	
if	120:15	124:8	6	(omx_error != OMX_ErrorNone)
cond	120:19	120:32	7	omx_error != OMX_ErrorNone
water	120:19	0:0	8	omx_error
op	120:29	0:0	8	!=
water	120:32	0:0	8	OMX_ErrorNone
stmts	120:47	124:8	7	
water	120:47	0:0	8	{
call	121:12	122:56	8	msg_Warn
arg	121:21	121:26	9	p_dec
water	121:21	0:0	10	p_dec
arg	121:28	121:80	9	"SetAudioParameters failed (%x : %s) on output port"
water	121:28	0:0	10	"SetAudioParameters failed (%x : %s) on output port"
arg	122:21	122:30	9	omx_error
water	122:21	0:0	10	omx_error
arg	122:32	122:56	9	ErrorToString(omx_error)
call	122:32	122:55	10	ErrorToString
arg	122:46	122:55	11	omx_error
water	122:46	0:0	12	omx_error
water	122:57	0:0	8	;
water	123:12	0:0	8	omx_error
op	123:22	0:0	8	=
water	123:24	0:0	8	OMX_ErrorNone
water	123:37	0:0	8	;
water	124:8	0:0	8	}
water	125:4	0:0	4	}
if	126:4	134:4	2	(!strcmp (p_dec -> p_sys -> psz_component ,"OMX.TI.DUCATI1.VIDEO.DECODER" ) && def -> eDir == OMX_DirOutput)
cond	126:8	127:29	3	!strcmp (p_dec -> p_sys -> psz_component ,"OMX.TI.DUCATI1.VIDEO.DECODER" ) && def -> eDir == OMX_DirOutput
op	126:8	0:0	4	!
call	126:9	126:75	4	strcmp
arg	126:16	126:43	5	p_dec->p_sys->psz_component
water	126:16	0:0	6	p_dec
op	126:21	0:0	6	->
water	126:23	0:0	6	p_sys
op	126:28	0:0	6	->
water	126:30	0:0	6	psz_component
arg	126:45	126:75	5	"OMX.TI.DUCATI1.VIDEO.DECODER"
water	126:45	0:0	6	"OMX.TI.DUCATI1.VIDEO.DECODER"
op	126:77	0:0	4	&&
water	127:16	0:0	4	def
op	127:19	0:0	4	->
water	127:21	0:0	4	eDir
op	127:26	0:0	4	==
water	127:29	0:0	4	OMX_DirOutput
stmts	128:4	134:4	3	
water	128:4	0:0	4	{
water	133:8	0:0	4	def
op	133:11	0:0	4	->
water	133:13	0:0	4	nBufferSize
op	133:25	0:0	4	*=
water	133:28	0:0	4	2
water	133:29	0:0	4	;
water	134:4	0:0	4	}
label	135:1	135:6	2	error :
return	136:4	136:20	2	omx_error
water	136:11	0:0	3	omx_error
