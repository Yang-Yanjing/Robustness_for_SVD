func	2:0	96:0	0	static void	DarkenFieldMMX
params	2:26	0:0	1	
param	2:28	2:44	2	picture_t *	p_dst
param	3:28	3:45	2	const int	i_field
param	3:47	3:67	2	const int	i_strength
param	4:28	4:48	2	bool	process_chroma
stmnts	6:4	95:10	1	
call	6:4	6:26	2	assert
arg	6:12	6:26	3	p_dst!=NULL
water	6:12	0:0	4	p_dst
op	6:18	0:0	4	!=
water	6:21	0:0	4	NULL
water	6:27	0:0	2	;
call	7:4	7:41	2	assert
arg	7:12	7:41	3	i_field==0||i_field==1
water	7:12	0:0	4	i_field
op	7:20	0:0	4	==
water	7:23	0:0	4	0
op	7:25	0:0	4	||
water	7:28	0:0	4	i_field
op	7:36	0:0	4	==
water	7:39	0:0	4	1
water	7:42	0:0	2	;
call	8:4	8:47	2	assert
arg	8:12	8:47	3	i_strength>=1&&i_strength<=3
water	8:12	0:0	4	i_strength
op	8:23	0:0	4	>=
water	8:26	0:0	4	1
op	8:28	0:0	4	&&
water	8:31	0:0	4	i_strength
op	8:42	0:0	4	<=
water	8:45	0:0	4	3
water	8:48	0:0	2	;
decl	9:4	9:40	2	uint64_t	i_strength_u64
op	9:28	0:0	2	=
water	9:30	0:0	2	i_strength
decl	10:4	10:54	2	const uint8_t	remove_high_u8
op	10:34	0:0	2	=
water	10:36	0:0	2	0
water	10:37	0:0	2	xFF
op	10:41	0:0	2	>>
water	10:44	0:0	2	i_strength
decl	11:4	12:71	2	const uint64_t	remove_high_u64
op	11:35	0:0	2	=
water	11:37	0:0	2	remove_high_u8
call	11:52	12:70	3	*INT64_C
arg	12:52	12:70	4	0x0101010101010101
water	12:52	0:0	5	0
water	12:53	0:0	5	x0101010101010101
decl	13:4	13:25	2	int	i_plane
op	13:16	0:0	2	=
water	13:18	0:0	2	Y_PLANE
decl	14:4	14:30	2	uint8_t	*p_out
water	14:18	0:0	2	,
decl	14:4	14:30	2	uint8_t	*p_out_end
decl	15:4	15:45	2	int	w
op	15:10	0:0	2	=
water	15:12	0:0	2	p_dst
op	15:17	0:0	2	->
water	15:19	0:0	2	p
op	15:20	0:0	2	[
water	15:21	0:0	2	i_plane
op	15:28	0:0	2	]
op	15:29	0:0	2	.
water	15:30	0:0	2	i_visible_pitch
water	16:4	0:0	2	p_out
op	16:10	0:0	2	=
water	16:12	0:0	2	p_dst
op	16:17	0:0	2	->
water	16:19	0:0	2	p
op	16:20	0:0	2	[
water	16:21	0:0	2	i_plane
op	16:28	0:0	2	]
op	16:29	0:0	2	.
water	16:30	0:0	2	p_pixels
water	16:38	0:0	2	;
water	17:4	0:0	2	p_out_end
op	17:14	0:0	2	=
water	17:16	0:0	2	p_out
op	17:22	0:0	2	+
water	17:24	0:0	2	p_dst
op	17:29	0:0	2	->
water	17:31	0:0	2	p
op	17:32	0:0	2	[
water	17:33	0:0	2	i_plane
op	17:40	0:0	2	]
op	17:41	0:0	2	.
water	17:42	0:0	2	i_pitch
op	18:22	0:0	2	*
water	18:24	0:0	2	p_dst
op	18:29	0:0	2	->
water	18:31	0:0	2	p
op	18:32	0:0	2	[
water	18:33	0:0	2	i_plane
op	18:40	0:0	2	]
op	18:41	0:0	2	.
water	18:42	0:0	2	i_visible_lines
water	18:57	0:0	2	;
if	20:4	21:42	2	(i_field == 1)
cond	20:8	20:19	3	i_field == 1
water	20:8	0:0	4	i_field
op	20:16	0:0	4	==
water	20:19	0:0	4	1
stmts	21:8	21:42	3	
water	21:8	0:0	4	p_out
op	21:14	0:0	4	+=
water	21:17	0:0	4	p_dst
op	21:22	0:0	4	->
water	21:24	0:0	4	p
op	21:25	0:0	4	[
water	21:26	0:0	4	i_plane
op	21:33	0:0	4	]
op	21:34	0:0	4	.
water	21:35	0:0	4	i_pitch
water	21:42	0:0	4	;
decl	22:4	22:19	2	int	wm8
op	22:12	0:0	2	=
water	22:14	0:0	2	w
op	22:16	0:0	2	%
water	22:18	0:0	2	8
decl	23:4	23:21	2	int	w8
op	23:12	0:0	2	=
water	23:14	0:0	2	w
op	23:16	0:0	2	-
water	23:18	0:0	2	wm8
for	24:4	41:4	2	(;p_out < p_out_end;p_out += 2 * p_dst -> p [ i_plane ] . i_pitch)
forinit	24:9	24:9	3	;
water	24:9	0:0	4	;
cond	24:11	24:19	3	p_out < p_out_end
water	24:11	0:0	4	p_out
op	24:17	0:0	4	<
water	24:19	0:0	4	p_out_end
forexpr	24:31	24:60	3	p_out += 2 * p_dst -> p [ i_plane ] . i_pitch
water	24:31	0:0	4	p_out
op	24:37	0:0	4	+=
water	24:40	0:0	4	2
op	24:41	0:0	4	*
water	24:42	0:0	4	p_dst
op	24:47	0:0	4	->
water	24:49	0:0	4	p
op	24:50	0:0	4	[
water	24:51	0:0	4	i_plane
op	24:58	0:0	4	]
op	24:59	0:0	4	.
water	24:60	0:0	4	i_pitch
stmts	25:4	41:4	3	
water	25:4	0:0	4	{
decl	26:8	26:40	4	uint64_t	*po
op	26:21	0:0	4	=
water	26:23	0:0	4	(
water	26:24	0:0	4	uint64_t
op	26:33	0:0	4	*
water	26:34	0:0	4	)
water	26:35	0:0	4	p_out
decl	27:8	27:17	4	int	x
op	27:14	0:0	4	=
water	27:16	0:0	4	0
call	28:8	28:39	4	movq_m2r
arg	28:18	28:32	5	i_strength_u64
water	28:18	0:0	6	i_strength_u64
arg	28:35	28:39	5	mm1
water	28:35	0:0	6	mm1
water	28:40	0:0	4	;
call	29:8	29:39	4	movq_m2r
arg	29:18	29:33	5	remove_high_u64
water	29:18	0:0	6	remove_high_u64
arg	29:35	29:39	5	mm2
water	29:35	0:0	6	mm2
water	29:40	0:0	4	;
for	30:8	36:8	4	(;x < w8;x += 8)
forinit	30:13	30:13	5	;
water	30:13	0:0	6	;
cond	30:15	30:19	5	x < w8
water	30:15	0:0	6	x
op	30:17	0:0	6	<
water	30:19	0:0	6	w8
forexpr	30:23	30:28	5	x += 8
water	30:23	0:0	6	x
op	30:25	0:0	6	+=
water	30:28	0:0	6	8
stmts	31:8	36:8	5	
water	31:8	0:0	6	{
call	32:12	32:33	6	movq_m2r
arg	32:22	32:27	7	(*po)
water	32:22	0:0	8	(
op	32:23	0:0	8	*
water	32:24	0:0	8	po
water	32:26	0:0	8	)
arg	32:29	32:33	7	mm0
water	32:29	0:0	8	mm0
water	32:34	0:0	6	;
call	33:12	33:32	6	psrlq_r2r
arg	33:23	33:26	7	mm1
water	33:23	0:0	8	mm1
arg	33:28	33:32	7	mm0
water	33:28	0:0	8	mm0
water	33:33	0:0	6	;
call	34:12	34:32	6	pand_r2r
arg	34:23	34:26	7	mm2
water	34:23	0:0	8	mm2
arg	34:28	34:32	7	mm0
water	34:28	0:0	8	mm0
water	34:33	0:0	6	;
call	35:12	35:35	6	movq_r2m
arg	35:22	35:25	7	mm0
water	35:22	0:0	8	mm0
arg	35:27	35:35	7	(*po++)
water	35:27	0:0	8	(
op	35:28	0:0	8	*
water	35:29	0:0	8	po
op	35:31	0:0	8	++
water	35:33	0:0	8	)
water	35:36	0:0	6	;
water	36:8	0:0	6	}
decl	38:8	38:40	4	uint8_t	*po_temp
op	38:25	0:0	4	=
water	38:27	0:0	4	(
water	38:28	0:0	4	uint8_t
op	38:36	0:0	4	*
water	38:37	0:0	4	)
water	38:38	0:0	4	po
for	39:8	40:72	4	(;x < w;++ x , ++ po_temp)
forinit	39:13	39:13	5	;
water	39:13	0:0	6	;
cond	39:15	39:19	5	x < w
water	39:15	0:0	6	x
op	39:17	0:0	6	<
water	39:19	0:0	6	w
forexpr	39:22	39:29	5	++ x , ++ po_temp
op	39:22	0:0	6	++
water	39:24	0:0	6	x
water	39:25	0:0	6	,
op	39:27	0:0	6	++
water	39:29	0:0	6	po_temp
stmts	40:12	40:72	5	
water	40:12	0:0	6	(
op	40:13	0:0	6	*
water	40:14	0:0	6	po_temp
water	40:21	0:0	6	)
op	40:23	0:0	6	=
water	40:25	0:0	6	(
water	40:27	0:0	6	(
water	40:28	0:0	6	(
op	40:29	0:0	6	*
water	40:30	0:0	6	po_temp
water	40:37	0:0	6	)
op	40:39	0:0	6	>>
water	40:42	0:0	6	i_strength
water	40:52	0:0	6	)
op	40:54	0:0	6	&
water	40:56	0:0	6	remove_high_u8
water	40:71	0:0	6	)
water	40:72	0:0	6	;
water	41:4	0:0	4	}
if	47:4	94:4	2	(process_chroma)
cond	47:8	47:8	3	process_chroma
water	47:8	0:0	4	process_chroma
stmts	48:4	94:4	3	
water	48:4	0:0	4	{
for	49:8	93:8	4	(i_plane ++ ;i_plane < p_dst -> i_planes;i_plane ++)
forinit	49:13	49:49	5	i_plane ++ ;
water	49:13	0:0	6	i_plane
op	49:20	0:0	6	++
water	49:49	0:0	6	;
cond	50:13	50:30	5	i_plane < p_dst -> i_planes
water	50:13	0:0	6	i_plane
op	50:21	0:0	6	<
water	50:23	0:0	6	p_dst
op	50:28	0:0	6	->
water	50:30	0:0	6	i_planes
forexpr	51:13	51:20	5	i_plane ++
water	51:13	0:0	6	i_plane
op	51:20	0:0	6	++
stmts	52:8	93:8	5	
water	52:8	0:0	6	{
decl	53:12	53:53	6	int	w
op	53:18	0:0	6	=
water	53:20	0:0	6	p_dst
op	53:25	0:0	6	->
water	53:27	0:0	6	p
op	53:28	0:0	6	[
water	53:29	0:0	6	i_plane
op	53:36	0:0	6	]
op	53:37	0:0	6	.
water	53:38	0:0	6	i_visible_pitch
decl	54:12	54:27	6	int	wm8
op	54:20	0:0	6	=
water	54:22	0:0	6	w
op	54:24	0:0	6	%
water	54:26	0:0	6	8
decl	55:12	55:29	6	int	w8
op	55:20	0:0	6	=
water	55:22	0:0	6	w
op	55:24	0:0	6	-
water	55:26	0:0	6	wm8
water	56:12	0:0	6	p_out
op	56:18	0:0	6	=
water	56:20	0:0	6	p_dst
op	56:25	0:0	6	->
water	56:27	0:0	6	p
op	56:28	0:0	6	[
water	56:29	0:0	6	i_plane
op	56:36	0:0	6	]
op	56:37	0:0	6	.
water	56:38	0:0	6	p_pixels
water	56:46	0:0	6	;
water	57:12	0:0	6	p_out_end
op	57:22	0:0	6	=
water	57:24	0:0	6	p_out
op	57:30	0:0	6	+
water	57:32	0:0	6	p_dst
op	57:37	0:0	6	->
water	57:39	0:0	6	p
op	57:40	0:0	6	[
water	57:41	0:0	6	i_plane
op	57:48	0:0	6	]
op	57:49	0:0	6	.
water	57:50	0:0	6	i_pitch
op	58:30	0:0	6	*
water	58:32	0:0	6	p_dst
op	58:37	0:0	6	->
water	58:39	0:0	6	p
op	58:40	0:0	6	[
water	58:41	0:0	6	i_plane
op	58:48	0:0	6	]
op	58:49	0:0	6	.
water	58:50	0:0	6	i_visible_lines
water	58:65	0:0	6	;
if	60:12	61:50	6	(i_field == 1)
cond	60:16	60:27	7	i_field == 1
water	60:16	0:0	8	i_field
op	60:24	0:0	8	==
water	60:27	0:0	8	1
stmts	61:16	61:50	7	
water	61:16	0:0	8	p_out
op	61:22	0:0	8	+=
water	61:25	0:0	8	p_dst
op	61:30	0:0	8	->
water	61:32	0:0	8	p
op	61:33	0:0	8	[
water	61:34	0:0	8	i_plane
op	61:41	0:0	8	]
op	61:42	0:0	8	.
water	61:43	0:0	8	i_pitch
water	61:50	0:0	8	;
for	62:12	92:12	6	(;p_out < p_out_end;p_out += 2 * p_dst -> p [ i_plane ] . i_pitch)
forinit	62:17	62:17	7	;
water	62:17	0:0	8	;
cond	62:19	62:27	7	p_out < p_out_end
water	62:19	0:0	8	p_out
op	62:25	0:0	8	<
water	62:27	0:0	8	p_out_end
forexpr	62:39	62:68	7	p_out += 2 * p_dst -> p [ i_plane ] . i_pitch
water	62:39	0:0	8	p_out
op	62:45	0:0	8	+=
water	62:48	0:0	8	2
op	62:49	0:0	8	*
water	62:50	0:0	8	p_dst
op	62:55	0:0	8	->
water	62:57	0:0	8	p
op	62:58	0:0	8	[
water	62:59	0:0	8	i_plane
op	62:66	0:0	8	]
op	62:67	0:0	8	.
water	62:68	0:0	8	i_pitch
stmts	63:12	92:12	7	
water	63:12	0:0	8	{
decl	64:16	64:25	8	int	x
op	64:22	0:0	8	=
water	64:24	0:0	8	0
water	66:16	0:0	8	static
water	66:23	0:0	8	const
water	66:29	0:0	8	mmx_t
water	66:35	0:0	8	b128
op	66:40	0:0	8	=
water	66:42	0:0	8	{
op	66:44	0:0	8	.
water	66:45	0:0	8	uq
op	66:48	0:0	8	=
water	66:50	0:0	8	0
water	66:51	0:0	8	x8080808080808080ULL
water	66:72	0:0	8	}
water	66:73	0:0	8	;
call	67:16	67:36	8	movq_m2r
arg	67:26	67:30	9	b128
water	67:26	0:0	10	b128
arg	67:32	67:36	9	mm5
water	67:32	0:0	10	mm5
water	67:37	0:0	8	;
call	68:16	68:47	8	movq_m2r
arg	68:26	68:40	9	i_strength_u64
water	68:26	0:0	10	i_strength_u64
arg	68:43	68:47	9	mm6
water	68:43	0:0	10	mm6
water	68:48	0:0	8	;
call	69:16	69:47	8	movq_m2r
arg	69:26	69:41	9	remove_high_u64
water	69:26	0:0	10	remove_high_u64
arg	69:43	69:47	9	mm7
water	69:43	0:0	10	mm7
water	69:48	0:0	8	;
decl	70:16	70:49	8	uint64_t	*po8
op	70:30	0:0	8	=
water	70:32	0:0	8	(
water	70:33	0:0	8	uint64_t
op	70:42	0:0	8	*
water	70:43	0:0	8	)
water	70:44	0:0	8	p_out
for	71:16	87:16	8	(;x < w8;x += 8)
forinit	71:21	71:21	9	;
water	71:21	0:0	10	;
cond	71:23	71:27	9	x < w8
water	71:23	0:0	10	x
op	71:25	0:0	10	<
water	71:27	0:0	10	w8
forexpr	71:31	71:36	9	x += 8
water	71:31	0:0	10	x
op	71:33	0:0	10	+=
water	71:36	0:0	10	8
stmts	72:16	87:16	9	
water	72:16	0:0	10	{
call	73:20	73:42	10	movq_m2r
arg	73:30	73:36	11	(*po8)
water	73:30	0:0	12	(
op	73:31	0:0	12	*
water	73:32	0:0	12	po8
water	73:35	0:0	12	)
arg	73:38	73:42	11	mm0
water	73:38	0:0	12	mm0
water	73:43	0:0	10	;
call	74:20	74:39	10	movq_r2r
arg	74:30	74:33	11	mm5
water	74:30	0:0	12	mm5
arg	74:35	74:39	11	mm2
water	74:35	0:0	12	mm2
water	74:40	0:0	10	;
call	75:20	75:39	10	movq_r2r
arg	75:30	75:33	11	mm0
water	75:30	0:0	12	mm0
arg	75:35	75:39	11	mm1
water	75:35	0:0	12	mm1
water	75:40	0:0	10	;
call	76:20	76:42	10	psubusb_r2r
arg	76:33	76:36	11	mm2
water	76:33	0:0	12	mm2
arg	76:38	76:42	11	mm1
water	76:38	0:0	12	mm1
water	76:43	0:0	10	;
call	77:20	77:42	10	psubusb_r2r
arg	77:33	77:36	11	mm0
water	77:33	0:0	12	mm0
arg	77:38	77:42	11	mm2
water	77:38	0:0	12	mm2
water	77:43	0:0	10	;
call	79:20	79:40	10	psrlq_r2r
arg	79:31	79:34	11	mm6
water	79:31	0:0	12	mm6
arg	79:36	79:40	11	mm1
water	79:36	0:0	12	mm1
water	79:41	0:0	10	;
call	80:20	80:40	10	psrlq_r2r
arg	80:31	80:34	11	mm6
water	80:31	0:0	12	mm6
arg	80:36	80:40	11	mm2
water	80:36	0:0	12	mm2
water	80:41	0:0	10	;
call	81:20	81:40	10	pand_r2r
arg	81:31	81:34	11	mm7
water	81:31	0:0	12	mm7
arg	81:36	81:40	11	mm1
water	81:36	0:0	12	mm1
water	81:41	0:0	10	;
call	82:20	82:40	10	pand_r2r
arg	82:31	82:34	11	mm7
water	82:31	0:0	12	mm7
arg	82:36	82:40	11	mm2
water	82:36	0:0	12	mm2
water	82:41	0:0	10	;
call	84:20	84:40	10	psubb_r2r
arg	84:31	84:34	11	mm2
water	84:31	0:0	12	mm2
arg	84:36	84:40	11	mm1
water	84:36	0:0	12	mm1
water	84:41	0:0	10	;
call	85:20	85:40	10	paddb_r2r
arg	85:31	85:34	11	mm5
water	85:31	0:0	12	mm5
arg	85:36	85:40	11	mm1
water	85:36	0:0	12	mm1
water	85:41	0:0	10	;
call	86:20	86:44	10	movq_r2m
arg	86:30	86:33	11	mm1
water	86:30	0:0	12	mm1
arg	86:35	86:44	11	(*po8++)
water	86:35	0:0	12	(
op	86:36	0:0	12	*
water	86:37	0:0	12	po8
op	86:40	0:0	12	++
water	86:42	0:0	12	)
water	86:45	0:0	10	;
water	87:16	0:0	10	}
decl	89:16	89:35	8	uint8_t	*po
op	89:28	0:0	8	=
water	89:30	0:0	8	p_out
for	90:16	91:71	8	(;x < w;++ x , ++ po)
forinit	90:21	90:21	9	;
water	90:21	0:0	10	;
cond	90:23	90:27	9	x < w
water	90:23	0:0	10	x
op	90:25	0:0	10	<
water	90:27	0:0	10	w
forexpr	90:30	90:37	9	++ x , ++ po
op	90:30	0:0	10	++
water	90:32	0:0	10	x
water	90:33	0:0	10	,
op	90:35	0:0	10	++
water	90:37	0:0	10	po
stmts	91:20	91:71	9	
water	91:20	0:0	10	(
op	91:21	0:0	10	*
water	91:22	0:0	10	po
water	91:24	0:0	10	)
op	91:26	0:0	10	=
water	91:28	0:0	10	128
op	91:32	0:0	10	+
water	91:34	0:0	10	(
water	91:36	0:0	10	(
water	91:37	0:0	10	(
op	91:38	0:0	10	*
water	91:39	0:0	10	po
water	91:41	0:0	10	)
op	91:43	0:0	10	-
water	91:45	0:0	10	128
water	91:48	0:0	10	)
op	91:50	0:0	10	/
water	91:52	0:0	10	(
water	91:53	0:0	10	1
op	91:55	0:0	10	<<
water	91:58	0:0	10	i_strength
water	91:68	0:0	10	)
water	91:70	0:0	10	)
water	91:71	0:0	10	;
water	92:12	0:0	8	}
water	93:8	0:0	6	}
water	94:4	0:0	4	}
call	95:4	95:9	2	emms
water	95:10	0:0	2	;
