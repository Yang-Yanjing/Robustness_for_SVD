func	2:0	119:0	0	static int	ReadNSVs
params	2:19	0:0	1	
param	2:21	2:38	2	demux_t *	p_demux
stmnts	0:0	118:22	1	
decl	4:4	4:39	2	demux_sys_t	*p_sys
op	4:23	0:0	2	=
water	4:25	0:0	2	p_demux
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:27	2	uint8_t	header[19]
decl	6:4	6:20	2	vlc_fourcc_t	fcc
if	7:4	11:4	2	(stream_Read (p_demux -> s ,header ,19 ) < 19)
cond	7:8	7:48	3	stream_Read (p_demux -> s ,header ,19 ) < 19
call	7:8	7:44	4	stream_Read
arg	7:21	7:31	5	p_demux->s
water	7:21	0:0	6	p_demux
op	7:28	0:0	6	->
water	7:30	0:0	6	s
arg	7:33	7:39	5	header
water	7:33	0:0	6	header
arg	7:41	7:44	5	19
water	7:41	0:0	6	19
op	7:46	0:0	4	<
water	7:48	0:0	4	19
stmts	8:4	11:4	3	
water	8:4	0:0	4	{
call	9:8	9:41	4	msg_Warn
arg	9:18	9:25	5	p_demux
water	9:18	0:0	6	p_demux
arg	9:27	9:41	5	"cannot read"
water	9:27	0:0	6	"cannot read"
water	9:42	0:0	4	;
return	10:8	10:27	4	VLC_EGENERIC
water	10:15	0:0	5	VLC_EGENERIC
water	11:4	0:0	4	}
switch	13:4	36:4	2	(( fcc =VLC_FOURCC (header [ 4 ] ,header [ 5 ] ,header [ 6 ] ,header [ 7 ] ) ))
cond	13:12	13:77	3	( fcc =VLC_FOURCC (header [ 4 ] ,header [ 5 ] ,header [ 6 ] ,header [ 7 ] ) )
water	13:12	0:0	4	(
water	13:14	0:0	4	fcc
op	13:18	0:0	4	=
call	13:20	13:75	4	VLC_FOURCC
arg	13:32	13:41	5	header[4]
water	13:32	0:0	6	header
op	13:38	0:0	6	[
water	13:39	0:0	6	4
op	13:40	0:0	6	]
arg	13:43	13:52	5	header[5]
water	13:43	0:0	6	header
op	13:49	0:0	6	[
water	13:50	0:0	6	5
op	13:51	0:0	6	]
arg	13:54	13:63	5	header[6]
water	13:54	0:0	6	header
op	13:60	0:0	6	[
water	13:61	0:0	6	6
op	13:62	0:0	6	]
arg	13:65	13:75	5	header[7]
water	13:65	0:0	6	header
op	13:71	0:0	6	[
water	13:72	0:0	6	7
op	13:73	0:0	6	]
water	13:77	0:0	4	)
stmts	14:4	36:4	3	
water	14:4	0:0	4	{
water	15:8	0:0	4	case
call	15:13	15:44	4	VLC_FOURCC
arg	15:25	15:28	5	'V'
water	15:25	0:0	6	'V'
arg	15:30	15:33	5	'P'
water	15:30	0:0	6	'P'
arg	15:35	15:38	5	'3'
water	15:35	0:0	6	'3'
arg	15:40	15:44	5	' '
water	15:40	0:0	6	' '
water	15:45	0:0	4	:
water	16:8	0:0	4	case
call	16:13	16:44	4	VLC_FOURCC
arg	16:25	16:28	5	'V'
water	16:25	0:0	6	'V'
arg	16:30	16:33	5	'P'
water	16:30	0:0	6	'P'
arg	16:35	16:38	5	'3'
water	16:35	0:0	6	'3'
arg	16:40	16:44	5	'0'
water	16:40	0:0	6	'0'
water	16:45	0:0	4	:
water	17:12	0:0	4	fcc
op	17:16	0:0	4	=
call	17:18	17:49	4	VLC_FOURCC
arg	17:30	17:33	5	'V'
water	17:30	0:0	6	'V'
arg	17:35	17:38	5	'P'
water	17:35	0:0	6	'P'
arg	17:40	17:43	5	'3'
water	17:40	0:0	6	'3'
arg	17:45	17:49	5	'0'
water	17:45	0:0	6	'0'
water	17:50	0:0	4	;
break	18:12	18:17	4	
water	19:8	0:0	4	case
call	19:13	19:44	4	VLC_FOURCC
arg	19:25	19:28	5	'V'
water	19:25	0:0	6	'V'
arg	19:30	19:33	5	'P'
water	19:30	0:0	6	'P'
arg	19:35	19:38	5	'3'
water	19:35	0:0	6	'3'
arg	19:40	19:44	5	'1'
water	19:40	0:0	6	'1'
water	19:45	0:0	4	:
water	20:12	0:0	4	fcc
op	20:16	0:0	4	=
call	20:18	20:49	4	VLC_FOURCC
arg	20:30	20:33	5	'V'
water	20:30	0:0	6	'V'
arg	20:35	20:38	5	'P'
water	20:35	0:0	6	'P'
arg	20:40	20:43	5	'3'
water	20:40	0:0	6	'3'
arg	20:45	20:49	5	'1'
water	20:45	0:0	6	'1'
water	20:50	0:0	4	;
break	21:12	21:17	4	
water	22:8	0:0	4	case
call	22:13	22:44	4	VLC_FOURCC
arg	22:25	22:28	5	'V'
water	22:25	0:0	6	'V'
arg	22:30	22:33	5	'P'
water	22:30	0:0	6	'P'
arg	22:35	22:38	5	'5'
water	22:35	0:0	6	'5'
arg	22:40	22:44	5	' '
water	22:40	0:0	6	' '
water	22:45	0:0	4	:
water	23:8	0:0	4	case
call	23:13	23:44	4	VLC_FOURCC
arg	23:25	23:28	5	'V'
water	23:25	0:0	6	'V'
arg	23:30	23:33	5	'P'
water	23:30	0:0	6	'P'
arg	23:35	23:38	5	'5'
water	23:35	0:0	6	'5'
arg	23:40	23:44	5	'0'
water	23:40	0:0	6	'0'
water	23:45	0:0	4	:
water	24:12	0:0	4	fcc
op	24:16	0:0	4	=
call	24:18	24:49	4	VLC_FOURCC
arg	24:30	24:33	5	'V'
water	24:30	0:0	6	'V'
arg	24:35	24:38	5	'P'
water	24:35	0:0	6	'P'
arg	24:40	24:43	5	'5'
water	24:40	0:0	6	'5'
arg	24:45	24:49	5	'0'
water	24:45	0:0	6	'0'
water	24:50	0:0	4	;
break	25:12	25:17	4	
water	26:8	0:0	4	case
call	26:13	26:44	4	VLC_FOURCC
arg	26:25	26:28	5	'V'
water	26:25	0:0	6	'V'
arg	26:30	26:33	5	'P'
water	26:30	0:0	6	'P'
arg	26:35	26:38	5	'6'
water	26:35	0:0	6	'6'
arg	26:40	26:44	5	'0'
water	26:40	0:0	6	'0'
water	26:45	0:0	4	:
water	27:8	0:0	4	case
call	27:13	27:44	4	VLC_FOURCC
arg	27:25	27:28	5	'V'
water	27:25	0:0	6	'V'
arg	27:30	27:33	5	'P'
water	27:30	0:0	6	'P'
arg	27:35	27:38	5	'6'
water	27:35	0:0	6	'6'
arg	27:40	27:44	5	'1'
water	27:40	0:0	6	'1'
water	27:45	0:0	4	:
water	28:8	0:0	4	case
call	28:13	28:44	4	VLC_FOURCC
arg	28:25	28:28	5	'V'
water	28:25	0:0	6	'V'
arg	28:30	28:33	5	'P'
water	28:30	0:0	6	'P'
arg	28:35	28:38	5	'6'
water	28:35	0:0	6	'6'
arg	28:40	28:44	5	'2'
water	28:40	0:0	6	'2'
water	28:45	0:0	4	:
water	29:8	0:0	4	case
call	29:13	29:44	4	VLC_FOURCC
arg	29:25	29:28	5	'V'
water	29:25	0:0	6	'V'
arg	29:30	29:33	5	'P'
water	29:30	0:0	6	'P'
arg	29:35	29:38	5	'8'
water	29:35	0:0	6	'8'
arg	29:40	29:44	5	'0'
water	29:40	0:0	6	'0'
water	29:45	0:0	4	:
water	30:8	0:0	4	case
call	30:13	30:44	4	VLC_FOURCC
arg	30:25	30:28	5	'H'
water	30:25	0:0	6	'H'
arg	30:30	30:33	5	'2'
water	30:30	0:0	6	'2'
arg	30:35	30:38	5	'6'
water	30:35	0:0	6	'6'
arg	30:40	30:44	5	'4'
water	30:40	0:0	6	'4'
water	30:45	0:0	4	:
water	31:8	0:0	4	case
call	31:13	31:44	4	VLC_FOURCC
arg	31:25	31:28	5	'N'
water	31:25	0:0	6	'N'
arg	31:30	31:33	5	'O'
water	31:30	0:0	6	'O'
arg	31:35	31:38	5	'N'
water	31:35	0:0	6	'N'
arg	31:40	31:44	5	'E'
water	31:40	0:0	6	'E'
water	31:45	0:0	4	:
water	32:12	0:0	4	break
water	32:17	0:0	4	;
label	33:8	33:15	4	default :
call	34:12	34:67	4	msg_Warn
arg	34:22	34:29	5	p_demux
water	34:22	0:0	6	p_demux
arg	34:31	34:52	5	"unknown codec %4.4s"
water	34:31	0:0	6	"unknown codec %4.4s"
arg	34:54	34:67	5	(char*)&fcc
water	34:54	0:0	6	(
water	34:55	0:0	6	char
op	34:60	0:0	6	*
water	34:61	0:0	6	)
op	34:62	0:0	6	&
water	34:63	0:0	6	fcc
water	34:68	0:0	4	;
break	35:12	35:17	4	
water	36:4	0:0	4	}
if	37:4	51:4	2	(fcc !=VLC_FOURCC ('N' ,'O' ,'N' ,'E' ) && fcc != p_sys -> fmt_video . i_codec)
cond	37:8	37:75	3	fcc !=VLC_FOURCC ('N' ,'O' ,'N' ,'E' ) && fcc != p_sys -> fmt_video . i_codec
water	37:8	0:0	4	fcc
op	37:12	0:0	4	!=
call	37:15	37:46	4	VLC_FOURCC
arg	37:27	37:30	5	'N'
water	37:27	0:0	6	'N'
arg	37:32	37:35	5	'O'
water	37:32	0:0	6	'O'
arg	37:37	37:40	5	'N'
water	37:37	0:0	6	'N'
arg	37:42	37:46	5	'E'
water	37:42	0:0	6	'E'
op	37:48	0:0	4	&&
water	37:51	0:0	4	fcc
op	37:55	0:0	4	!=
water	37:58	0:0	4	p_sys
op	37:63	0:0	4	->
water	37:65	0:0	4	fmt_video
op	37:74	0:0	4	.
water	37:75	0:0	4	i_codec
stmts	38:4	51:4	3	
water	38:4	0:0	4	{
call	39:8	39:57	4	es_format_Init
arg	39:24	39:41	5	&p_sys->fmt_video
op	39:24	0:0	6	&
water	39:25	0:0	6	p_sys
op	39:30	0:0	6	->
water	39:32	0:0	6	fmt_video
arg	39:43	39:51	5	VIDEO_ES
water	39:43	0:0	6	VIDEO_ES
arg	39:53	39:57	5	fcc
water	39:53	0:0	6	fcc
water	39:58	0:0	4	;
water	40:8	0:0	4	p_sys
op	40:13	0:0	4	->
water	40:15	0:0	4	fmt_video
op	40:24	0:0	4	.
water	40:25	0:0	4	video
op	40:30	0:0	4	.
water	40:31	0:0	4	i_width
op	40:39	0:0	4	=
call	40:41	40:61	4	GetWLE
arg	40:49	40:61	5	&header[12]
op	40:49	0:0	6	&
water	40:50	0:0	6	header
op	40:56	0:0	6	[
water	40:57	0:0	6	12
op	40:59	0:0	6	]
water	40:62	0:0	4	;
water	41:8	0:0	4	p_sys
op	41:13	0:0	4	->
water	41:15	0:0	4	fmt_video
op	41:24	0:0	4	.
water	41:25	0:0	4	video
op	41:30	0:0	4	.
water	41:31	0:0	4	i_height
op	41:40	0:0	4	=
call	41:42	41:62	4	GetWLE
arg	41:50	41:62	5	&header[14]
op	41:50	0:0	6	&
water	41:51	0:0	6	header
op	41:57	0:0	6	[
water	41:58	0:0	6	14
op	41:60	0:0	6	]
water	41:63	0:0	4	;
if	42:8	45:8	4	(p_sys -> p_video)
cond	42:12	42:19	5	p_sys -> p_video
water	42:12	0:0	6	p_sys
op	42:17	0:0	6	->
water	42:19	0:0	6	p_video
stmts	43:8	45:8	5	
water	43:8	0:0	6	{
call	44:12	44:53	6	es_out_Del
arg	44:24	44:36	7	p_demux->out
water	44:24	0:0	8	p_demux
op	44:31	0:0	8	->
water	44:33	0:0	8	out
arg	44:38	44:53	7	p_sys->p_video
water	44:38	0:0	8	p_sys
op	44:43	0:0	8	->
water	44:45	0:0	8	p_video
water	44:54	0:0	6	;
water	45:8	0:0	6	}
water	46:8	0:0	4	p_sys
op	46:13	0:0	4	->
water	46:15	0:0	4	p_video
op	46:23	0:0	4	=
call	46:25	46:69	4	es_out_Add
arg	46:37	46:49	5	p_demux->out
water	46:37	0:0	6	p_demux
op	46:44	0:0	6	->
water	46:46	0:0	6	out
arg	46:51	46:69	5	&p_sys->fmt_video
op	46:51	0:0	6	&
water	46:52	0:0	6	p_sys
op	46:57	0:0	6	->
water	46:59	0:0	6	fmt_video
water	46:70	0:0	4	;
call	47:8	50:49	4	msg_Dbg
arg	47:17	47:24	5	p_demux
water	47:17	0:0	6	p_demux
arg	47:26	47:53	5	"    - video `%4.4s' %dx%d"
water	47:26	0:0	6	"    - video `%4.4s' %dx%d"
arg	48:17	48:28	5	(char*)&fcc
water	48:17	0:0	6	(
water	48:18	0:0	6	char
op	48:22	0:0	6	*
water	48:23	0:0	6	)
op	48:24	0:0	6	&
water	48:25	0:0	6	fcc
arg	49:17	49:47	5	p_sys->fmt_video.video.i_width
water	49:17	0:0	6	p_sys
op	49:22	0:0	6	->
water	49:24	0:0	6	fmt_video
op	49:33	0:0	6	.
water	49:34	0:0	6	video
op	49:39	0:0	6	.
water	49:40	0:0	6	i_width
arg	50:17	50:49	5	p_sys->fmt_video.video.i_height
water	50:17	0:0	6	p_sys
op	50:22	0:0	6	->
water	50:24	0:0	6	fmt_video
op	50:33	0:0	6	.
water	50:34	0:0	6	video
op	50:39	0:0	6	.
water	50:40	0:0	6	i_height
water	50:50	0:0	4	;
water	51:4	0:0	4	}
switch	53:4	73:4	2	(( fcc =VLC_FOURCC (header [ 8 ] ,header [ 9 ] ,header [ 10 ] ,header [ 11 ] ) ))
cond	53:12	53:79	3	( fcc =VLC_FOURCC (header [ 8 ] ,header [ 9 ] ,header [ 10 ] ,header [ 11 ] ) )
water	53:12	0:0	4	(
water	53:14	0:0	4	fcc
op	53:18	0:0	4	=
call	53:20	53:77	4	VLC_FOURCC
arg	53:32	53:41	5	header[8]
water	53:32	0:0	6	header
op	53:38	0:0	6	[
water	53:39	0:0	6	8
op	53:40	0:0	6	]
arg	53:43	53:52	5	header[9]
water	53:43	0:0	6	header
op	53:49	0:0	6	[
water	53:50	0:0	6	9
op	53:51	0:0	6	]
arg	53:54	53:64	5	header[10]
water	53:54	0:0	6	header
op	53:60	0:0	6	[
water	53:61	0:0	6	10
op	53:63	0:0	6	]
arg	53:66	53:77	5	header[11]
water	53:66	0:0	6	header
op	53:72	0:0	6	[
water	53:73	0:0	6	11
op	53:75	0:0	6	]
water	53:79	0:0	4	)
stmts	54:4	73:4	3	
water	54:4	0:0	4	{
water	55:8	0:0	4	case
call	55:13	55:44	4	VLC_FOURCC
arg	55:25	55:28	5	'M'
water	55:25	0:0	6	'M'
arg	55:30	55:33	5	'P'
water	55:30	0:0	6	'P'
arg	55:35	55:38	5	'3'
water	55:35	0:0	6	'3'
arg	55:40	55:44	5	' '
water	55:40	0:0	6	' '
water	55:45	0:0	4	:
water	56:12	0:0	4	fcc
op	56:16	0:0	4	=
call	56:18	56:49	4	VLC_FOURCC
arg	56:30	56:33	5	'm'
water	56:30	0:0	6	'm'
arg	56:35	56:38	5	'p'
water	56:35	0:0	6	'p'
arg	56:40	56:43	5	'g'
water	56:40	0:0	6	'g'
arg	56:45	56:49	5	'a'
water	56:45	0:0	6	'a'
water	56:50	0:0	4	;
break	57:12	57:17	4	
water	58:8	0:0	4	case
call	58:13	58:44	4	VLC_FOURCC
arg	58:25	58:28	5	'P'
water	58:25	0:0	6	'P'
arg	58:30	58:33	5	'C'
water	58:30	0:0	6	'C'
arg	58:35	58:38	5	'M'
water	58:35	0:0	6	'M'
arg	58:40	58:44	5	' '
water	58:40	0:0	6	' '
water	58:45	0:0	4	:
water	59:12	0:0	4	fcc
op	59:16	0:0	4	=
call	59:18	59:49	4	VLC_FOURCC
arg	59:30	59:33	5	'a'
water	59:30	0:0	6	'a'
arg	59:35	59:38	5	'r'
water	59:35	0:0	6	'r'
arg	59:40	59:43	5	'a'
water	59:40	0:0	6	'a'
arg	59:45	59:49	5	'w'
water	59:45	0:0	6	'w'
water	59:50	0:0	4	;
break	60:12	60:17	4	
water	61:8	0:0	4	case
call	61:13	61:44	4	VLC_FOURCC
arg	61:25	61:28	5	'A'
water	61:25	0:0	6	'A'
arg	61:30	61:33	5	'A'
water	61:30	0:0	6	'A'
arg	61:35	61:38	5	'C'
water	61:35	0:0	6	'C'
arg	61:40	61:44	5	' '
water	61:40	0:0	6	' '
water	61:45	0:0	4	:
water	62:8	0:0	4	case
call	62:13	62:44	4	VLC_FOURCC
arg	62:25	62:28	5	'A'
water	62:25	0:0	6	'A'
arg	62:30	62:33	5	'A'
water	62:30	0:0	6	'A'
arg	62:35	62:38	5	'C'
water	62:35	0:0	6	'C'
arg	62:40	62:44	5	'P'
water	62:40	0:0	6	'P'
water	62:45	0:0	4	:
water	63:12	0:0	4	fcc
op	63:16	0:0	4	=
call	63:18	63:49	4	VLC_FOURCC
arg	63:30	63:33	5	'm'
water	63:30	0:0	6	'm'
arg	63:35	63:38	5	'p'
water	63:35	0:0	6	'p'
arg	63:40	63:43	5	'4'
water	63:40	0:0	6	'4'
arg	63:45	63:49	5	'a'
water	63:45	0:0	6	'a'
water	63:50	0:0	4	;
break	64:12	64:17	4	
water	65:8	0:0	4	case
call	65:13	65:44	4	VLC_FOURCC
arg	65:25	65:28	5	'S'
water	65:25	0:0	6	'S'
arg	65:30	65:33	5	'P'
water	65:30	0:0	6	'P'
arg	65:35	65:38	5	'X'
water	65:35	0:0	6	'X'
arg	65:40	65:44	5	' '
water	65:40	0:0	6	' '
water	65:45	0:0	4	:
water	66:12	0:0	4	fcc
op	66:16	0:0	4	=
call	66:18	66:49	4	VLC_FOURCC
arg	66:30	66:33	5	's'
water	66:30	0:0	6	's'
arg	66:35	66:38	5	'p'
water	66:35	0:0	6	'p'
arg	66:40	66:43	5	'x'
water	66:40	0:0	6	'x'
arg	66:45	66:49	5	' '
water	66:45	0:0	6	' '
water	66:50	0:0	4	;
break	67:12	67:17	4	
water	68:8	0:0	4	case
call	68:13	68:44	4	VLC_FOURCC
arg	68:25	68:28	5	'N'
water	68:25	0:0	6	'N'
arg	68:30	68:33	5	'O'
water	68:30	0:0	6	'O'
arg	68:35	68:38	5	'N'
water	68:35	0:0	6	'N'
arg	68:40	68:44	5	'E'
water	68:40	0:0	6	'E'
water	68:45	0:0	4	:
water	69:12	0:0	4	break
water	69:17	0:0	4	;
label	70:8	70:15	4	default :
call	71:12	71:67	4	msg_Warn
arg	71:22	71:29	5	p_demux
water	71:22	0:0	6	p_demux
arg	71:31	71:52	5	"unknown codec %4.4s"
water	71:31	0:0	6	"unknown codec %4.4s"
arg	71:54	71:67	5	(char*)&fcc
water	71:54	0:0	6	(
water	71:55	0:0	6	char
op	71:60	0:0	6	*
water	71:61	0:0	6	)
op	71:62	0:0	6	&
water	71:63	0:0	6	fcc
water	71:68	0:0	4	;
break	72:12	72:17	4	
water	73:4	0:0	4	}
if	74:4	83:4	2	(fcc !=VLC_FOURCC ('N' ,'O' ,'N' ,'E' ) && fcc != p_sys -> fmt_audio . i_codec)
cond	74:8	74:75	3	fcc !=VLC_FOURCC ('N' ,'O' ,'N' ,'E' ) && fcc != p_sys -> fmt_audio . i_codec
water	74:8	0:0	4	fcc
op	74:12	0:0	4	!=
call	74:15	74:46	4	VLC_FOURCC
arg	74:27	74:30	5	'N'
water	74:27	0:0	6	'N'
arg	74:32	74:35	5	'O'
water	74:32	0:0	6	'O'
arg	74:37	74:40	5	'N'
water	74:37	0:0	6	'N'
arg	74:42	74:46	5	'E'
water	74:42	0:0	6	'E'
op	74:48	0:0	4	&&
water	74:51	0:0	4	fcc
op	74:55	0:0	4	!=
water	74:58	0:0	4	p_sys
op	74:63	0:0	4	->
water	74:65	0:0	4	fmt_audio
op	74:74	0:0	4	.
water	74:75	0:0	4	i_codec
stmts	75:4	83:4	3	
water	75:4	0:0	4	{
call	76:8	76:61	4	msg_Dbg
arg	76:17	76:24	5	p_demux
water	76:17	0:0	6	p_demux
arg	76:26	76:47	5	"    - audio `%4.4s'"
water	76:26	0:0	6	"    - audio `%4.4s'"
arg	76:49	76:61	5	(char*)&fcc
water	76:49	0:0	6	(
water	76:50	0:0	6	char
op	76:54	0:0	6	*
water	76:55	0:0	6	)
op	76:56	0:0	6	&
water	76:57	0:0	6	fcc
water	76:62	0:0	4	;
if	77:8	81:8	4	(p_sys -> p_audio)
cond	77:12	77:19	5	p_sys -> p_audio
water	77:12	0:0	6	p_sys
op	77:17	0:0	6	->
water	77:19	0:0	6	p_audio
stmts	78:8	81:8	5	
water	78:8	0:0	6	{
call	79:12	79:53	6	es_out_Del
arg	79:24	79:36	7	p_demux->out
water	79:24	0:0	8	p_demux
op	79:31	0:0	8	->
water	79:33	0:0	8	out
arg	79:38	79:53	7	p_sys->p_audio
water	79:38	0:0	8	p_sys
op	79:43	0:0	8	->
water	79:45	0:0	8	p_audio
water	79:54	0:0	6	;
water	80:12	0:0	6	p_sys
op	80:17	0:0	6	->
water	80:19	0:0	6	p_audio
op	80:27	0:0	6	=
water	80:29	0:0	6	NULL
water	80:33	0:0	6	;
water	81:8	0:0	6	}
call	82:8	82:57	4	es_format_Init
arg	82:24	82:41	5	&p_sys->fmt_audio
op	82:24	0:0	6	&
water	82:25	0:0	6	p_sys
op	82:30	0:0	6	->
water	82:32	0:0	6	fmt_audio
arg	82:43	82:51	5	AUDIO_ES
water	82:43	0:0	6	AUDIO_ES
arg	82:53	82:57	5	fcc
water	82:53	0:0	6	fcc
water	82:58	0:0	4	;
water	83:4	0:0	4	}
if	84:4	106:4	2	(header [ 16 ] & 0 x80)
cond	84:8	84:20	3	header [ 16 ] & 0 x80
water	84:8	0:0	4	header
op	84:14	0:0	4	[
water	84:15	0:0	4	16
op	84:17	0:0	4	]
op	84:18	0:0	4	&
water	84:19	0:0	4	0
water	84:20	0:0	4	x80
stmts	85:4	106:4	3	
water	85:4	0:0	4	{
switch	87:8	101:8	4	(header [ 16 ] & 0 x03)
cond	87:16	87:28	5	header [ 16 ] & 0 x03
water	87:16	0:0	6	header
op	87:22	0:0	6	[
water	87:23	0:0	6	16
op	87:25	0:0	6	]
op	87:26	0:0	6	&
water	87:27	0:0	6	0
water	87:28	0:0	6	x03
stmts	88:8	101:8	5	
water	88:8	0:0	6	{
label	89:12	89:18	6	case 0 :
water	90:16	0:0	6	p_sys
op	90:21	0:0	6	->
water	90:23	0:0	6	i_pcr_inc
op	90:33	0:0	6	=
water	90:35	0:0	6	33333
water	90:40	0:0	6	;
break	91:16	91:21	6	
label	92:12	92:18	6	case 1 :
water	93:16	0:0	6	p_sys
op	93:21	0:0	6	->
water	93:23	0:0	6	i_pcr_inc
op	93:33	0:0	6	=
water	93:35	0:0	6	33367
water	93:40	0:0	6	;
break	94:16	94:21	6	
label	95:12	95:18	6	case 2 :
water	96:16	0:0	6	p_sys
op	96:21	0:0	6	->
water	96:23	0:0	6	i_pcr_inc
op	96:33	0:0	6	=
water	96:35	0:0	6	40000
water	96:40	0:0	6	;
break	97:16	97:21	6	
label	98:12	98:18	6	case 3 :
water	99:16	0:0	6	p_sys
op	99:21	0:0	6	->
water	99:23	0:0	6	i_pcr_inc
op	99:33	0:0	6	=
water	99:35	0:0	6	41700
water	99:40	0:0	6	;
break	100:16	100:21	6	
water	101:8	0:0	6	}
if	102:8	103:83	4	(header [ 16 ] < 0 xc0)
cond	102:12	102:26	5	header [ 16 ] < 0 xc0
water	102:12	0:0	6	header
op	102:18	0:0	6	[
water	102:19	0:0	6	16
op	102:21	0:0	6	]
op	102:23	0:0	6	<
water	102:25	0:0	6	0
water	102:26	0:0	6	xc0
stmts	103:12	103:83	5	
water	103:12	0:0	6	p_sys
op	103:17	0:0	6	->
water	103:19	0:0	6	i_pcr_inc
op	103:29	0:0	6	=
water	103:31	0:0	6	p_sys
op	103:36	0:0	6	->
water	103:38	0:0	6	i_pcr_inc
op	103:48	0:0	6	*
water	103:50	0:0	6	(
water	103:51	0:0	6	(
water	103:52	0:0	6	(
water	103:53	0:0	6	header
op	103:59	0:0	6	[
water	103:60	0:0	6	16
op	103:62	0:0	6	]
op	103:64	0:0	6	^
water	103:66	0:0	6	0
water	103:67	0:0	6	x80
water	103:70	0:0	6	)
op	103:72	0:0	6	>>
water	103:75	0:0	6	2
water	103:77	0:0	6	)
op	103:79	0:0	6	+
water	103:80	0:0	6	1
water	103:82	0:0	6	)
water	103:83	0:0	6	;
else	104:8	105:83	4
stmts	105:12	105:83	5	
water	105:12	0:0	6	p_sys
op	105:17	0:0	6	->
water	105:19	0:0	6	i_pcr_inc
op	105:29	0:0	6	=
water	105:31	0:0	6	p_sys
op	105:36	0:0	6	->
water	105:38	0:0	6	i_pcr_inc
op	105:48	0:0	6	/
water	105:50	0:0	6	(
water	105:51	0:0	6	(
water	105:52	0:0	6	(
water	105:53	0:0	6	header
op	105:59	0:0	6	[
water	105:60	0:0	6	16
op	105:62	0:0	6	]
op	105:64	0:0	6	^
water	105:66	0:0	6	0
water	105:67	0:0	6	xc0
water	105:70	0:0	6	)
op	105:72	0:0	6	>>
water	105:75	0:0	6	2
water	105:77	0:0	6	)
op	105:79	0:0	6	+
water	105:80	0:0	6	1
water	105:82	0:0	6	)
water	105:83	0:0	6	;
water	106:4	0:0	4	}
else	107:4	111:4	2
stmts	107:9	111:4	3	
if	107:9	111:4	4	(header [ 16 ] != 0)
cond	107:13	107:27	5	header [ 16 ] != 0
water	107:13	0:0	6	header
op	107:19	0:0	6	[
water	107:20	0:0	6	16
op	107:22	0:0	6	]
op	107:24	0:0	6	!=
water	107:27	0:0	6	0
stmts	108:4	111:4	5	
water	108:4	0:0	6	{
water	110:8	0:0	6	p_sys
op	110:13	0:0	6	->
water	110:15	0:0	6	i_pcr_inc
op	110:25	0:0	6	=
water	110:27	0:0	6	1000000
op	110:35	0:0	6	/
water	110:37	0:0	6	header
op	110:43	0:0	6	[
water	110:44	0:0	6	16
op	110:46	0:0	6	]
water	110:47	0:0	6	;
water	111:4	0:0	6	}
else	112:4	116:4	2
stmts	113:4	116:4	3	
water	113:4	0:0	4	{
call	114:8	114:47	4	msg_Dbg
arg	114:17	114:24	5	p_demux
water	114:17	0:0	6	p_demux
arg	114:26	114:47	5	"invalid fps (0x00)"
water	114:26	0:0	6	"invalid fps (0x00)"
water	114:48	0:0	4	;
water	115:8	0:0	4	p_sys
op	115:13	0:0	4	->
water	115:15	0:0	4	i_pcr_inc
op	115:25	0:0	4	=
water	115:27	0:0	4	40000
water	115:32	0:0	4	;
water	116:4	0:0	4	}
return	118:4	118:22	2	VLC_SUCCESS
water	118:11	0:0	3	VLC_SUCCESS
