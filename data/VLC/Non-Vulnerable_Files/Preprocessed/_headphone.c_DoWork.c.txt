func	2:0	89:0	0	static void	DoWork
params	2:18	0:0	1	
param	2:20	2:39	2	filter_t *	p_filter
param	3:20	3:38	2	block_t *	p_in_buf
param	3:40	3:60	2	block_t *	p_out_buf
stmnts	0:0	88:4	1	
decl	5:4	5:41	2	filter_sys_t	*p_sys
op	5:24	0:0	2	=
water	5:26	0:0	2	p_filter
op	5:34	0:0	2	->
water	5:36	0:0	2	p_sys
decl	6:4	6:69	2	int	i_input_nb
op	6:19	0:0	2	=
call	6:21	6:68	3	aout_FormatNbChannels
arg	6:44	6:68	4	&p_filter->fmt_in.audio
op	6:44	0:0	5	&
water	6:45	0:0	5	p_filter
op	6:53	0:0	5	->
water	6:55	0:0	5	fmt_in
op	6:61	0:0	5	.
water	6:62	0:0	5	audio
decl	7:4	7:71	2	int	i_output_nb
op	7:20	0:0	2	=
call	7:22	7:70	3	aout_FormatNbChannels
arg	7:45	7:70	4	&p_filter->fmt_out.audio
op	7:45	0:0	5	&
water	7:46	0:0	5	p_filter
op	7:54	0:0	5	->
water	7:56	0:0	5	fmt_out
op	7:63	0:0	5	.
water	7:64	0:0	5	audio
decl	8:4	8:46	2	float	*p_in
op	8:17	0:0	2	=
water	8:19	0:0	2	(
water	8:20	0:0	2	float
op	8:25	0:0	2	*
water	8:26	0:0	2	)
water	8:28	0:0	2	p_in_buf
op	8:36	0:0	2	->
water	8:38	0:0	2	p_buffer
decl	9:4	9:17	2	float	*p_out
decl	10:4	10:24	2	uint8_t	*p_overflow
decl	11:4	11:28	2	uint8_t	*p_end_overflow
decl	12:4	12:21	2	uint8_t	*p_slide
decl	13:4	13:26	2	size_t	i_overflow_size
decl	14:4	14:21	2	size_t	i_out_size
decl	15:4	15:21	2	unsigned int	i
water	15:18	0:0	2	,
decl	15:4	15:21	2	unsigned int	j
decl	16:4	16:31	2	int	i_source_channel_offset
decl	17:4	17:29	2	int	i_dest_channel_offset
decl	18:4	18:24	2	unsigned int	i_delay
decl	19:4	19:29	2	double	d_amplitude_factor
water	20:4	0:0	2	p_out
op	20:10	0:0	2	=
water	20:12	0:0	2	(
water	20:13	0:0	2	float
op	20:19	0:0	2	*
water	20:20	0:0	2	)
water	20:21	0:0	2	p_out_buf
op	20:30	0:0	2	->
water	20:32	0:0	2	p_buffer
water	20:40	0:0	2	;
water	21:4	0:0	2	i_out_size
op	21:15	0:0	2	=
water	21:17	0:0	2	p_out_buf
op	21:26	0:0	2	->
water	21:28	0:0	2	i_buffer
water	21:36	0:0	2	;
water	23:4	0:0	2	p_overflow
op	23:15	0:0	2	=
water	23:17	0:0	2	(
water	23:18	0:0	2	uint8_t
op	23:26	0:0	2	*
water	23:27	0:0	2	)
water	23:29	0:0	2	p_sys
op	23:34	0:0	2	->
water	23:36	0:0	2	p_overflow_buffer
water	23:53	0:0	2	;
water	24:4	0:0	2	i_overflow_size
op	24:20	0:0	2	=
water	24:22	0:0	2	p_sys
op	24:27	0:0	2	->
water	24:29	0:0	2	i_overflow_buffer_size
water	24:51	0:0	2	;
water	25:4	0:0	2	p_end_overflow
op	25:19	0:0	2	=
water	25:21	0:0	2	p_overflow
op	25:32	0:0	2	+
water	25:34	0:0	2	i_overflow_size
water	25:49	0:0	2	;
call	26:4	26:33	2	memset
arg	26:12	26:17	3	p_out
water	26:12	0:0	4	p_out
arg	26:19	26:20	3	0
water	26:19	0:0	4	0
arg	26:22	26:33	3	i_out_size
water	26:22	0:0	4	i_out_size
water	26:34	0:0	2	;
call	27:4	27:68	2	memcpy
arg	27:12	27:17	3	p_out
water	27:12	0:0	4	p_out
arg	27:19	27:29	3	p_overflow
water	27:19	0:0	4	p_overflow
arg	27:31	27:68	3	__MIN(i_out_size,i_overflow_size)
call	27:31	27:66	4	__MIN
arg	27:38	27:48	5	i_out_size
water	27:38	0:0	6	i_out_size
arg	27:50	27:66	5	i_overflow_size
water	27:50	0:0	6	i_overflow_size
water	27:69	0:0	2	;
water	28:4	0:0	2	p_slide
op	28:12	0:0	2	=
water	28:14	0:0	2	(
water	28:15	0:0	2	uint8_t
op	28:23	0:0	2	*
water	28:24	0:0	2	)
water	28:26	0:0	2	p_sys
op	28:31	0:0	2	->
water	28:33	0:0	2	p_overflow_buffer
water	28:50	0:0	2	;
while	29:4	47:4	2	(p_slide < p_end_overflow)
cond	29:11	29:21	3	p_slide < p_end_overflow
water	29:11	0:0	4	p_slide
op	29:19	0:0	4	<
water	29:21	0:0	4	p_end_overflow
stmts	30:4	47:4	3	
water	30:4	0:0	4	{
decl	31:8	31:29	4	size_t	i_bytes_copied
if	32:8	40:8	4	(p_slide + i_out_size < p_end_overflow)
cond	32:12	32:35	5	p_slide + i_out_size < p_end_overflow
water	32:12	0:0	6	p_slide
op	32:20	0:0	6	+
water	32:22	0:0	6	i_out_size
op	32:33	0:0	6	<
water	32:35	0:0	6	p_end_overflow
stmts	33:8	40:8	5	
water	33:8	0:0	6	{
call	34:12	34:43	6	memset
arg	34:20	34:27	7	p_slide
water	34:20	0:0	8	p_slide
arg	34:29	34:30	7	0
water	34:29	0:0	8	0
arg	34:32	34:43	7	i_out_size
water	34:32	0:0	8	i_out_size
water	34:44	0:0	6	;
if	35:12	36:43	6	(p_slide + 2 * i_out_size < p_end_overflow)
cond	35:16	35:43	7	p_slide + 2 * i_out_size < p_end_overflow
water	35:16	0:0	8	p_slide
op	35:24	0:0	8	+
water	35:26	0:0	8	2
op	35:28	0:0	8	*
water	35:30	0:0	8	i_out_size
op	35:41	0:0	8	<
water	35:43	0:0	8	p_end_overflow
stmts	36:16	36:43	7	
water	36:16	0:0	8	i_bytes_copied
op	36:31	0:0	8	=
water	36:33	0:0	8	i_out_size
water	36:43	0:0	8	;
else	37:12	38:74	6
stmts	38:16	38:74	7	
water	38:16	0:0	8	i_bytes_copied
op	38:31	0:0	8	=
water	38:33	0:0	8	p_end_overflow
op	38:48	0:0	8	-
water	38:50	0:0	8	(
water	38:52	0:0	8	p_slide
op	38:60	0:0	8	+
water	38:62	0:0	8	i_out_size
water	38:73	0:0	8	)
water	38:74	0:0	8	;
call	39:12	39:66	6	memcpy
arg	39:20	39:27	7	p_slide
water	39:20	0:0	8	p_slide
arg	39:29	39:49	7	p_slide+i_out_size
water	39:29	0:0	8	p_slide
op	39:37	0:0	8	+
water	39:39	0:0	8	i_out_size
arg	39:51	39:66	7	i_bytes_copied
water	39:51	0:0	8	i_bytes_copied
water	39:67	0:0	6	;
water	40:8	0:0	6	}
else	41:8	45:8	4
stmts	42:8	45:8	5	
water	42:8	0:0	6	{
water	43:12	0:0	6	i_bytes_copied
op	43:27	0:0	6	=
water	43:29	0:0	6	p_end_overflow
op	43:44	0:0	6	-
water	43:46	0:0	6	p_slide
water	43:53	0:0	6	;
call	44:12	44:47	6	memset
arg	44:20	44:27	7	p_slide
water	44:20	0:0	8	p_slide
arg	44:29	44:30	7	0
water	44:29	0:0	8	0
arg	44:32	44:47	7	i_bytes_copied
water	44:32	0:0	8	i_bytes_copied
water	44:48	0:0	6	;
water	45:8	0:0	6	}
water	46:8	0:0	4	p_slide
op	46:16	0:0	4	+=
water	46:19	0:0	4	i_bytes_copied
water	46:33	0:0	4	;
water	47:4	0:0	4	}
for	49:4	88:4	2	(i = 0 ;i < p_sys -> i_nb_atomic_operations;i ++)
forinit	49:9	49:14	3	i = 0 ;
water	49:9	0:0	4	i
op	49:11	0:0	4	=
water	49:13	0:0	4	0
water	49:14	0:0	4	;
cond	49:16	49:27	3	i < p_sys -> i_nb_atomic_operations
water	49:16	0:0	4	i
op	49:18	0:0	4	<
water	49:20	0:0	4	p_sys
op	49:25	0:0	4	->
water	49:27	0:0	4	i_nb_atomic_operations
forexpr	49:51	49:52	3	i ++
water	49:51	0:0	4	i
op	49:52	0:0	4	++
stmts	50:4	88:4	3	
water	50:4	0:0	4	{
water	52:8	0:0	4	i_source_channel_offset
op	53:12	0:0	4	=
water	53:14	0:0	4	p_sys
op	53:19	0:0	4	->
water	53:21	0:0	4	p_atomic_operations
op	53:40	0:0	4	[
water	53:41	0:0	4	i
op	53:42	0:0	4	]
op	53:43	0:0	4	.
water	53:44	0:0	4	i_source_channel_offset
water	53:67	0:0	4	;
water	54:8	0:0	4	i_dest_channel_offset
op	55:12	0:0	4	=
water	55:14	0:0	4	p_sys
op	55:19	0:0	4	->
water	55:21	0:0	4	p_atomic_operations
op	55:40	0:0	4	[
water	55:41	0:0	4	i
op	55:42	0:0	4	]
op	55:43	0:0	4	.
water	55:44	0:0	4	i_dest_channel_offset
water	55:65	0:0	4	;
water	56:8	0:0	4	i_delay
op	56:16	0:0	4	=
water	56:18	0:0	4	p_sys
op	56:23	0:0	4	->
water	56:25	0:0	4	p_atomic_operations
op	56:44	0:0	4	[
water	56:45	0:0	4	i
op	56:46	0:0	4	]
op	56:47	0:0	4	.
water	56:48	0:0	4	i_delay
water	56:55	0:0	4	;
water	57:8	0:0	4	d_amplitude_factor
op	58:12	0:0	4	=
water	58:14	0:0	4	p_sys
op	58:19	0:0	4	->
water	58:21	0:0	4	p_atomic_operations
op	58:40	0:0	4	[
water	58:41	0:0	4	i
op	58:42	0:0	4	]
op	58:43	0:0	4	.
water	58:44	0:0	4	d_amplitude_factor
water	58:62	0:0	4	;
if	59:8	76:8	4	(p_out_buf -> i_nb_samples > i_delay)
cond	59:12	59:38	5	p_out_buf -> i_nb_samples > i_delay
water	59:12	0:0	6	p_out_buf
op	59:21	0:0	6	->
water	59:23	0:0	6	i_nb_samples
op	59:36	0:0	6	>
water	59:38	0:0	6	i_delay
stmts	60:8	76:8	5	
water	60:8	0:0	6	{
for	62:12	67:12	6	(j = 0 ;j < p_out_buf -> i_nb_samples - i_delay;j ++)
forinit	62:17	62:22	7	j = 0 ;
water	62:17	0:0	8	j
op	62:19	0:0	8	=
water	62:21	0:0	8	0
water	62:22	0:0	8	;
cond	62:24	62:54	7	j < p_out_buf -> i_nb_samples - i_delay
water	62:24	0:0	8	j
op	62:26	0:0	8	<
water	62:28	0:0	8	p_out_buf
op	62:37	0:0	8	->
water	62:39	0:0	8	i_nb_samples
op	62:52	0:0	8	-
water	62:54	0:0	8	i_delay
forexpr	62:63	62:64	7	j ++
water	62:63	0:0	8	j
op	62:64	0:0	8	++
stmts	63:12	67:12	7	
water	63:12	0:0	8	{
water	64:16	0:0	8	(
water	64:17	0:0	8	(
water	64:18	0:0	8	float
op	64:23	0:0	8	*
water	64:24	0:0	8	)
water	64:25	0:0	8	p_out
water	64:30	0:0	8	)
op	64:31	0:0	8	[
water	64:33	0:0	8	(
water	64:34	0:0	8	i_delay
op	64:41	0:0	8	+
water	64:42	0:0	8	j
water	64:43	0:0	8	)
op	64:44	0:0	8	*
water	64:45	0:0	8	i_output_nb
op	64:57	0:0	8	+
water	64:59	0:0	8	i_dest_channel_offset
op	64:81	0:0	8	]
op	65:20	0:0	8	+=
water	65:23	0:0	8	p_in
op	65:27	0:0	8	[
water	65:29	0:0	8	j
op	65:31	0:0	8	*
water	65:33	0:0	8	i_input_nb
op	65:44	0:0	8	+
water	65:46	0:0	8	i_source_channel_offset
op	65:70	0:0	8	]
op	66:23	0:0	8	*
water	66:25	0:0	8	d_amplitude_factor
water	66:43	0:0	8	;
water	67:12	0:0	8	}
for	69:12	75:12	6	(j = 0 ;j < i_delay;j ++)
forinit	69:17	69:22	7	j = 0 ;
water	69:17	0:0	8	j
op	69:19	0:0	8	=
water	69:21	0:0	8	0
water	69:22	0:0	8	;
cond	69:24	69:28	7	j < i_delay
water	69:24	0:0	8	j
op	69:26	0:0	8	<
water	69:28	0:0	8	i_delay
forexpr	69:37	69:38	7	j ++
water	69:37	0:0	8	j
op	69:38	0:0	8	++
stmts	70:12	75:12	7	
water	70:12	0:0	8	{
water	71:16	0:0	8	(
water	71:17	0:0	8	(
water	71:18	0:0	8	float
op	71:23	0:0	8	*
water	71:24	0:0	8	)
water	71:25	0:0	8	p_overflow
water	71:35	0:0	8	)
op	71:36	0:0	8	[
water	71:38	0:0	8	j
op	71:39	0:0	8	*
water	71:40	0:0	8	i_output_nb
op	71:52	0:0	8	+
water	71:54	0:0	8	i_dest_channel_offset
op	71:76	0:0	8	]
op	72:20	0:0	8	+=
water	72:23	0:0	8	p_in
op	72:27	0:0	8	[
water	72:29	0:0	8	(
water	72:30	0:0	8	p_out_buf
op	72:39	0:0	8	->
water	72:41	0:0	8	i_nb_samples
op	72:54	0:0	8	-
water	72:56	0:0	8	i_delay
op	72:64	0:0	8	+
water	72:66	0:0	8	j
water	72:67	0:0	8	)
op	73:23	0:0	8	*
water	73:25	0:0	8	i_input_nb
op	73:36	0:0	8	+
water	73:38	0:0	8	i_source_channel_offset
op	73:62	0:0	8	]
op	74:23	0:0	8	*
water	74:25	0:0	8	d_amplitude_factor
water	74:43	0:0	8	;
water	75:12	0:0	8	}
water	76:8	0:0	6	}
else	77:8	87:8	4
stmts	78:8	87:8	5	
water	78:8	0:0	6	{
for	80:12	86:12	6	(j = 0 ;j < p_out_buf -> i_nb_samples;j ++)
forinit	80:17	80:22	7	j = 0 ;
water	80:17	0:0	8	j
op	80:19	0:0	8	=
water	80:21	0:0	8	0
water	80:22	0:0	8	;
cond	80:24	80:39	7	j < p_out_buf -> i_nb_samples
water	80:24	0:0	8	j
op	80:26	0:0	8	<
water	80:28	0:0	8	p_out_buf
op	80:37	0:0	8	->
water	80:39	0:0	8	i_nb_samples
forexpr	80:53	80:54	7	j ++
water	80:53	0:0	8	j
op	80:54	0:0	8	++
stmts	81:12	86:12	7	
water	81:12	0:0	8	{
water	82:16	0:0	8	(
water	82:17	0:0	8	(
water	82:18	0:0	8	float
op	82:23	0:0	8	*
water	82:24	0:0	8	)
water	82:25	0:0	8	p_overflow
water	82:35	0:0	8	)
op	82:36	0:0	8	[
water	82:38	0:0	8	(
water	82:39	0:0	8	i_delay
op	82:47	0:0	8	-
water	82:49	0:0	8	p_out_buf
op	82:58	0:0	8	->
water	82:60	0:0	8	i_nb_samples
op	82:73	0:0	8	+
water	82:75	0:0	8	j
water	82:76	0:0	8	)
op	83:40	0:0	8	*
water	83:42	0:0	8	i_output_nb
op	83:54	0:0	8	+
water	83:56	0:0	8	i_dest_channel_offset
op	83:78	0:0	8	]
op	84:20	0:0	8	+=
water	84:23	0:0	8	p_in
op	84:27	0:0	8	[
water	84:29	0:0	8	j
op	84:31	0:0	8	*
water	84:33	0:0	8	i_input_nb
op	84:44	0:0	8	+
water	84:46	0:0	8	i_source_channel_offset
op	84:70	0:0	8	]
op	85:23	0:0	8	*
water	85:25	0:0	8	d_amplitude_factor
water	85:43	0:0	8	;
water	86:12	0:0	8	}
water	87:8	0:0	6	}
water	88:4	0:0	4	}
