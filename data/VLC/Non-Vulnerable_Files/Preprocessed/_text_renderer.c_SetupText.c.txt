func	2:9	40:0	0		SetupText
params	2:18	0:0	1	
param	2:20	2:38	2	filter_t *	p_filter
param	3:27	3:51	2	uni_char_t *	psz_text_out
param	4:27	4:51	2	text_style_t * *	pp_styles
param	5:27	5:47	2	uint32_t *	pi_k_dates
param	6:27	6:50	2	const char *	psz_text_in
param	7:27	7:48	2	text_style_t *	p_style
param	8:27	8:45	2	uint32_t	i_k_date
stmnts	0:0	39:26	1	
decl	10:4	10:26	2	size_t	i_string_length
decl	11:4	11:25	2	size_t	i_string_bytes
decl	12:4	12:84	2	uni_char_t	*psz_tmp
op	12:24	0:0	2	=
call	12:26	12:83	3	ToCharset
arg	12:37	12:52	4	FREETYPE_TO_UCS
water	12:37	0:0	5	FREETYPE_TO_UCS
arg	12:54	12:65	4	psz_text_in
water	12:54	0:0	5	psz_text_in
arg	12:67	12:83	4	&i_string_bytes
op	12:67	0:0	5	&
water	12:68	0:0	5	i_string_bytes
if	13:4	18:4	2	(psz_tmp)
cond	13:8	13:8	3	psz_tmp
water	13:8	0:0	4	psz_tmp
stmts	14:4	18:4	3	
water	14:4	0:0	4	{
call	15:8	15:54	4	memcpy
arg	15:16	15:28	5	psz_text_out
water	15:16	0:0	6	psz_text_out
arg	15:30	15:37	5	psz_tmp
water	15:30	0:0	6	psz_tmp
arg	15:39	15:54	5	i_string_bytes
water	15:39	0:0	6	i_string_bytes
water	15:55	0:0	4	;
water	16:8	0:0	4	i_string_length
op	16:24	0:0	4	=
water	16:26	0:0	4	i_string_bytes
op	16:41	0:0	4	/
op	16:43	0:0	4	sizeof
water	16:49	0:0	4	(
op	16:51	0:0	4	*
water	16:52	0:0	4	psz_tmp
water	16:60	0:0	4	)
water	16:61	0:0	4	;
call	17:8	17:22	4	free
arg	17:14	17:22	5	psz_tmp
water	17:14	0:0	6	psz_tmp
water	17:23	0:0	4	;
water	18:4	0:0	4	}
else	19:4	24:4	2
stmts	20:4	24:4	3	
water	20:4	0:0	4	{
call	21:8	22:40	4	msg_Warn
arg	21:18	21:26	5	p_filter
water	21:18	0:0	6	p_filter
arg	21:28	21:70	5	"failed to convert string to unicode (%s)"
water	21:28	0:0	6	"failed to convert string to unicode (%s)"
arg	22:18	22:40	5	vlc_strerror_c(errno)
call	22:18	22:38	6	vlc_strerror_c
arg	22:33	22:38	7	errno
water	22:33	0:0	8	errno
water	22:41	0:0	4	;
water	23:8	0:0	4	i_string_length
op	23:24	0:0	4	=
water	23:26	0:0	4	0
water	23:27	0:0	4	;
water	24:4	0:0	4	}
if	25:4	29:4	2	(i_string_length > 0)
cond	25:8	25:26	3	i_string_length > 0
water	25:8	0:0	4	i_string_length
op	25:24	0:0	4	>
water	25:26	0:0	4	0
stmts	26:4	29:4	3	
water	26:4	0:0	4	{
for	27:8	28:34	4	(unsigned i = 0 ;i < i_string_length;i ++)
forinit	27:13	27:27	5	unsigned i = 0 ;
water	27:13	0:0	6	unsigned
water	27:22	0:0	6	i
op	27:24	0:0	6	=
water	27:26	0:0	6	0
water	27:27	0:0	6	;
cond	27:29	27:33	5	i < i_string_length
water	27:29	0:0	6	i
op	27:31	0:0	6	<
water	27:33	0:0	6	i_string_length
forexpr	27:50	27:51	5	i ++
water	27:50	0:0	6	i
op	27:51	0:0	6	++
stmts	28:12	28:34	5	
water	28:12	0:0	6	pp_styles
op	28:21	0:0	6	[
water	28:22	0:0	6	i
op	28:23	0:0	6	]
op	28:25	0:0	6	=
water	28:27	0:0	6	p_style
water	28:34	0:0	6	;
water	29:4	0:0	4	}
else	30:4	33:4	2
stmts	31:4	33:4	3	
water	31:4	0:0	4	{
call	32:8	32:35	4	text_style_Delete
arg	32:27	32:35	5	p_style
water	32:27	0:0	6	p_style
water	32:36	0:0	4	;
water	33:4	0:0	4	}
if	34:4	38:4	2	(i_string_length > 0 && pi_k_dates)
cond	34:8	34:31	3	i_string_length > 0 && pi_k_dates
water	34:8	0:0	4	i_string_length
op	34:24	0:0	4	>
water	34:26	0:0	4	0
op	34:28	0:0	4	&&
water	34:31	0:0	4	pi_k_dates
stmts	35:4	38:4	3	
water	35:4	0:0	4	{
for	36:8	37:36	4	(unsigned i = 0 ;i < i_string_length;i ++)
forinit	36:13	36:27	5	unsigned i = 0 ;
water	36:13	0:0	6	unsigned
water	36:22	0:0	6	i
op	36:24	0:0	6	=
water	36:26	0:0	6	0
water	36:27	0:0	6	;
cond	36:29	36:33	5	i < i_string_length
water	36:29	0:0	6	i
op	36:31	0:0	6	<
water	36:33	0:0	6	i_string_length
forexpr	36:50	36:51	5	i ++
water	36:50	0:0	6	i
op	36:51	0:0	6	++
stmts	37:12	37:36	5	
water	37:12	0:0	6	pi_k_dates
op	37:22	0:0	6	[
water	37:23	0:0	6	i
op	37:24	0:0	6	]
op	37:26	0:0	6	=
water	37:28	0:0	6	i_k_date
water	37:36	0:0	6	;
water	38:4	0:0	4	}
return	39:4	39:26	2	i_string_length
water	39:11	0:0	3	i_string_length
