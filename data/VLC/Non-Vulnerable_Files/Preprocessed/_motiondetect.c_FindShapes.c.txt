func	2:0	131:0	0	static int	FindShapes
params	2:21	0:0	1	
param	2:23	2:39	2	uint32_t *	p_diff
param	2:41	2:59	2	uint32_t *	p_smooth
param	3:23	3:34	2	int	i_pitch
param	3:36	3:49	2	int	i_visible
param	3:51	3:62	2	int	i_lines
param	4:23	4:34	2	int *	colors
param	5:23	5:39	2	int *	color_x_min
param	5:41	5:57	2	int *	color_x_max
param	6:23	6:39	2	int *	color_y_min
param	6:41	6:58	2	int *	color_y_max
stmnts	0:0	130:15	1	
decl	8:4	8:16	2	int	last
op	8:13	0:0	2	=
water	8:15	0:0	2	1
decl	9:4	9:12	2	int	i
water	9:9	0:0	2	,
decl	9:4	9:12	2	int	j
call	13:4	13:71	2	GaussianConvolution
arg	13:25	13:31	3	p_diff
water	13:25	0:0	4	p_diff
arg	13:33	13:41	3	p_smooth
water	13:33	0:0	4	p_smooth
arg	13:43	13:50	3	i_pitch
water	13:43	0:0	4	i_pitch
arg	13:52	13:59	3	i_lines
water	13:52	0:0	4	i_lines
arg	13:61	13:71	3	i_visible
water	13:61	0:0	4	i_visible
water	13:72	0:0	2	;
for	17:4	21:4	2	(j = 0 ;j < i_pitch;j ++)
forinit	17:9	17:14	3	j = 0 ;
water	17:9	0:0	4	j
op	17:11	0:0	4	=
water	17:13	0:0	4	0
water	17:14	0:0	4	;
cond	17:16	17:20	3	j < i_pitch
water	17:16	0:0	4	j
op	17:18	0:0	4	<
water	17:20	0:0	4	i_pitch
forexpr	17:29	17:30	3	j ++
water	17:29	0:0	4	j
op	17:30	0:0	4	++
stmts	18:4	21:4	3	
water	18:4	0:0	4	{
water	19:8	0:0	4	p_smooth
op	19:16	0:0	4	[
water	19:17	0:0	4	j
op	19:18	0:0	4	]
op	19:20	0:0	4	=
water	19:22	0:0	4	0
water	19:23	0:0	4	;
water	20:8	0:0	4	p_smooth
op	20:16	0:0	4	[
water	20:17	0:0	4	(
water	20:18	0:0	4	i_lines
op	20:25	0:0	4	-
water	20:26	0:0	4	1
water	20:27	0:0	4	)
op	20:28	0:0	4	*
water	20:29	0:0	4	i_pitch
op	20:36	0:0	4	+
water	20:37	0:0	4	j
op	20:38	0:0	4	]
op	20:40	0:0	4	=
water	20:42	0:0	4	0
water	20:43	0:0	4	;
water	21:4	0:0	4	}
for	22:4	66:4	2	(i = 1 ;i < i_lines - 1;i ++)
forinit	22:9	22:14	3	i = 1 ;
water	22:9	0:0	4	i
op	22:11	0:0	4	=
water	22:13	0:0	4	1
water	22:14	0:0	4	;
cond	22:16	22:28	3	i < i_lines - 1
water	22:16	0:0	4	i
op	22:18	0:0	4	<
water	22:20	0:0	4	i_lines
op	22:27	0:0	4	-
water	22:28	0:0	4	1
forexpr	22:31	22:32	3	i ++
water	22:31	0:0	4	i
op	22:32	0:0	4	++
stmts	23:4	66:4	3	
water	23:4	0:0	4	{
water	24:8	0:0	4	p_smooth
op	24:16	0:0	4	[
water	24:17	0:0	4	i
op	24:18	0:0	4	*
water	24:19	0:0	4	i_pitch
op	24:26	0:0	4	]
op	24:28	0:0	4	=
water	24:30	0:0	4	0
water	24:31	0:0	4	;
for	25:8	64:8	4	(j = 1 ;j < i_pitch - 1;j ++)
forinit	25:13	25:18	5	j = 1 ;
water	25:13	0:0	6	j
op	25:15	0:0	6	=
water	25:17	0:0	6	1
water	25:18	0:0	6	;
cond	25:20	25:32	5	j < i_pitch - 1
water	25:20	0:0	6	j
op	25:22	0:0	6	<
water	25:24	0:0	6	i_pitch
op	25:31	0:0	6	-
water	25:32	0:0	6	1
forexpr	25:35	25:36	5	j ++
water	25:35	0:0	6	j
op	25:36	0:0	6	++
stmts	26:8	64:8	5	
water	26:8	0:0	6	{
if	27:12	59:12	6	(p_smooth [ i * i_pitch + j ] > 15)
cond	27:16	27:40	7	p_smooth [ i * i_pitch + j ] > 15
water	27:16	0:0	8	p_smooth
op	27:24	0:0	8	[
water	27:25	0:0	8	i
op	27:26	0:0	8	*
water	27:27	0:0	8	i_pitch
op	27:34	0:0	8	+
water	27:35	0:0	8	j
op	27:36	0:0	8	]
op	27:38	0:0	8	>
water	27:40	0:0	8	15
stmts	28:12	59:12	7	
water	28:12	0:0	8	{
if	29:16	32:16	8	(p_smooth [ ( i - 1 ) * i_pitch + j - 1 ])
cond	29:20	29:46	9	p_smooth [ ( i - 1 ) * i_pitch + j - 1 ]
water	29:20	0:0	10	p_smooth
op	29:28	0:0	10	[
water	29:29	0:0	10	(
water	29:30	0:0	10	i
op	29:31	0:0	10	-
water	29:32	0:0	10	1
water	29:33	0:0	10	)
op	29:34	0:0	10	*
water	29:35	0:0	10	i_pitch
op	29:42	0:0	10	+
water	29:43	0:0	10	j
op	29:44	0:0	10	-
water	29:45	0:0	10	1
op	29:46	0:0	10	]
stmts	30:16	32:16	9	
water	30:16	0:0	10	{
water	31:20	0:0	10	p_smooth
op	31:28	0:0	10	[
water	31:29	0:0	10	i
op	31:30	0:0	10	*
water	31:31	0:0	10	i_pitch
op	31:38	0:0	10	+
water	31:39	0:0	10	j
op	31:40	0:0	10	]
op	31:42	0:0	10	=
water	31:44	0:0	10	p_smooth
op	31:52	0:0	10	[
water	31:53	0:0	10	(
water	31:54	0:0	10	i
op	31:55	0:0	10	-
water	31:56	0:0	10	1
water	31:57	0:0	10	)
op	31:58	0:0	10	*
water	31:59	0:0	10	i_pitch
op	31:66	0:0	10	+
water	31:67	0:0	10	j
op	31:68	0:0	10	-
water	31:69	0:0	10	1
op	31:70	0:0	10	]
water	31:71	0:0	10	;
water	32:16	0:0	10	}
else	33:16	34:69	8
stmts	33:21	34:69	9	
if	33:21	34:69	10	(p_smooth [ ( i - 1 ) * i_pitch + j ])
cond	33:25	33:49	11	p_smooth [ ( i - 1 ) * i_pitch + j ]
water	33:25	0:0	12	p_smooth
op	33:33	0:0	12	[
water	33:34	0:0	12	(
water	33:35	0:0	12	i
op	33:36	0:0	12	-
water	33:37	0:0	12	1
water	33:38	0:0	12	)
op	33:39	0:0	12	*
water	33:40	0:0	12	i_pitch
op	33:47	0:0	12	+
water	33:48	0:0	12	j
op	33:49	0:0	12	]
stmts	34:20	34:69	11	
water	34:20	0:0	12	p_smooth
op	34:28	0:0	12	[
water	34:29	0:0	12	i
op	34:30	0:0	12	*
water	34:31	0:0	12	i_pitch
op	34:38	0:0	12	+
water	34:39	0:0	12	j
op	34:40	0:0	12	]
op	34:42	0:0	12	=
water	34:44	0:0	12	p_smooth
op	34:52	0:0	12	[
water	34:53	0:0	12	(
water	34:54	0:0	12	i
op	34:55	0:0	12	-
water	34:56	0:0	12	1
water	34:57	0:0	12	)
op	34:58	0:0	12	*
water	34:59	0:0	12	i_pitch
op	34:66	0:0	12	+
water	34:67	0:0	12	j
op	34:68	0:0	12	]
water	34:69	0:0	12	;
else	35:16	36:67	8
stmts	35:21	36:67	9	
if	35:21	36:67	10	(p_smooth [ i * i_pitch + j - 1 ])
cond	35:25	35:47	11	p_smooth [ i * i_pitch + j - 1 ]
water	35:25	0:0	12	p_smooth
op	35:33	0:0	12	[
water	35:34	0:0	12	i
op	35:35	0:0	12	*
water	35:36	0:0	12	i_pitch
op	35:43	0:0	12	+
water	35:44	0:0	12	j
op	35:45	0:0	12	-
water	35:46	0:0	12	1
op	35:47	0:0	12	]
stmts	36:20	36:67	11	
water	36:20	0:0	12	p_smooth
op	36:28	0:0	12	[
water	36:29	0:0	12	i
op	36:30	0:0	12	*
water	36:31	0:0	12	i_pitch
op	36:38	0:0	12	+
water	36:39	0:0	12	j
op	36:40	0:0	12	]
op	36:42	0:0	12	=
water	36:44	0:0	12	p_smooth
op	36:52	0:0	12	[
water	36:53	0:0	12	i
op	36:54	0:0	12	*
water	36:55	0:0	12	i_pitch
op	36:62	0:0	12	+
water	36:63	0:0	12	j
op	36:64	0:0	12	-
water	36:65	0:0	12	1
op	36:66	0:0	12	]
water	36:67	0:0	12	;
else	37:16	45:16	8
stmts	38:16	45:16	9	
water	38:16	0:0	10	{
if	39:20	44:20	10	(last < NUM_COLORS)
cond	39:24	39:31	11	last < NUM_COLORS
water	39:24	0:0	12	last
op	39:29	0:0	12	<
water	39:31	0:0	12	NUM_COLORS
stmts	40:20	44:20	11	
water	40:20	0:0	12	{
water	41:24	0:0	12	p_smooth
op	41:32	0:0	12	[
water	41:33	0:0	12	i
op	41:34	0:0	12	*
water	41:35	0:0	12	i_pitch
op	41:42	0:0	12	+
water	41:43	0:0	12	j
op	41:44	0:0	12	]
op	41:46	0:0	12	=
water	41:48	0:0	12	last
water	41:52	0:0	12	;
water	42:24	0:0	12	colors
op	42:30	0:0	12	[
water	42:31	0:0	12	last
op	42:35	0:0	12	]
op	42:37	0:0	12	=
water	42:39	0:0	12	last
water	42:43	0:0	12	;
water	43:24	0:0	12	last
op	43:28	0:0	12	++
water	43:30	0:0	12	;
water	44:20	0:0	12	}
water	45:16	0:0	10	}
if	47:16	53:16	8	(p_smooth [ A ] && p_smooth [ A ] != p_smooth [ i * i_pitch + j ])
cond	47:20	47:70	9	p_smooth [ A ] && p_smooth [ A ] != p_smooth [ i * i_pitch + j ]
water	47:20	0:0	10	p_smooth
op	47:28	0:0	10	[
water	47:29	0:0	10	A
op	47:30	0:0	10	]
op	47:32	0:0	10	&&
water	47:35	0:0	10	p_smooth
op	47:43	0:0	10	[
water	47:44	0:0	10	A
op	47:45	0:0	10	]
op	47:47	0:0	10	!=
water	47:50	0:0	10	p_smooth
op	47:58	0:0	10	[
water	47:59	0:0	10	i
op	47:60	0:0	10	*
water	47:61	0:0	10	i_pitch
op	47:68	0:0	10	+
water	47:69	0:0	10	j
op	47:70	0:0	10	]
stmts	48:16	53:16	9	
water	48:16	0:0	10	{
if	49:20	50:67	10	(p_smooth [ A ] < p_smooth [ i * i_pitch + j ])
cond	49:24	49:58	11	p_smooth [ A ] < p_smooth [ i * i_pitch + j ]
water	49:24	0:0	12	p_smooth
op	49:32	0:0	12	[
water	49:33	0:0	12	A
op	49:34	0:0	12	]
op	49:36	0:0	12	<
water	49:38	0:0	12	p_smooth
op	49:46	0:0	12	[
water	49:47	0:0	12	i
op	49:48	0:0	12	*
water	49:49	0:0	12	i_pitch
op	49:56	0:0	12	+
water	49:57	0:0	12	j
op	49:58	0:0	12	]
stmts	50:24	50:67	11	
water	50:24	0:0	12	colors
op	50:30	0:0	12	[
water	50:31	0:0	12	p_smooth
op	50:39	0:0	12	[
water	50:40	0:0	12	i
op	50:41	0:0	12	*
water	50:42	0:0	12	i_pitch
op	50:49	0:0	12	+
water	50:50	0:0	12	j
op	50:51	0:0	12	]
op	50:52	0:0	12	]
op	50:54	0:0	12	=
water	50:56	0:0	12	p_smooth
op	50:64	0:0	12	[
water	50:65	0:0	12	A
op	50:66	0:0	12	]
water	50:67	0:0	12	;
else	51:20	52:67	10
stmts	52:24	52:67	11	
water	52:24	0:0	12	colors
op	52:30	0:0	12	[
water	52:31	0:0	12	p_smooth
op	52:39	0:0	12	[
water	52:40	0:0	12	A
op	52:41	0:0	12	]
op	52:42	0:0	12	]
op	52:44	0:0	12	=
water	52:46	0:0	12	p_smooth
op	52:54	0:0	12	[
water	52:55	0:0	12	i
op	52:56	0:0	12	*
water	52:57	0:0	12	i_pitch
op	52:64	0:0	12	+
water	52:65	0:0	12	j
op	52:66	0:0	12	]
water	52:67	0:0	12	;
water	53:16	0:0	10	}
call	54:16	54:37	8	CHECK
arg	54:23	54:37	9	i*i_pitch+j-1
water	54:23	0:0	10	i
op	54:24	0:0	10	*
water	54:25	0:0	10	i_pitch
op	54:32	0:0	10	+
water	54:33	0:0	10	j
op	54:34	0:0	10	-
water	54:35	0:0	10	1
water	54:38	0:0	8	;
call	55:16	55:41	8	CHECK
arg	55:23	55:41	9	(i-1)*i_pitch+j-1
water	55:23	0:0	10	(
water	55:24	0:0	10	i
op	55:25	0:0	10	-
water	55:26	0:0	10	1
water	55:27	0:0	10	)
op	55:28	0:0	10	*
water	55:29	0:0	10	i_pitch
op	55:36	0:0	10	+
water	55:37	0:0	10	j
op	55:38	0:0	10	-
water	55:39	0:0	10	1
water	55:42	0:0	8	;
call	56:16	56:39	8	CHECK
arg	56:23	56:39	9	(i-1)*i_pitch+j
water	56:23	0:0	10	(
water	56:24	0:0	10	i
op	56:25	0:0	10	-
water	56:26	0:0	10	1
water	56:27	0:0	10	)
op	56:28	0:0	10	*
water	56:29	0:0	10	i_pitch
op	56:36	0:0	10	+
water	56:37	0:0	10	j
water	56:40	0:0	8	;
call	57:16	57:41	8	CHECK
arg	57:23	57:41	9	(i-1)*i_pitch+j+1
water	57:23	0:0	10	(
water	57:24	0:0	10	i
op	57:25	0:0	10	-
water	57:26	0:0	10	1
water	57:27	0:0	10	)
op	57:28	0:0	10	*
water	57:29	0:0	10	i_pitch
op	57:36	0:0	10	+
water	57:37	0:0	10	j
op	57:38	0:0	10	+
water	57:39	0:0	10	1
water	57:42	0:0	8	;
water	59:12	0:0	8	}
else	60:12	63:12	6
stmts	61:12	63:12	7	
water	61:12	0:0	8	{
water	62:16	0:0	8	p_smooth
op	62:24	0:0	8	[
water	62:25	0:0	8	i
op	62:26	0:0	8	*
water	62:27	0:0	8	i_pitch
op	62:34	0:0	8	+
water	62:35	0:0	8	j
op	62:36	0:0	8	]
op	62:38	0:0	8	=
water	62:40	0:0	8	0
water	62:41	0:0	8	;
water	63:12	0:0	8	}
water	64:8	0:0	6	}
water	65:8	0:0	4	p_smooth
op	65:16	0:0	4	[
water	65:17	0:0	4	i
op	65:18	0:0	4	*
water	65:19	0:0	4	i_pitch
op	65:26	0:0	4	+
water	65:27	0:0	4	j
op	65:28	0:0	4	]
op	65:30	0:0	4	=
water	65:32	0:0	4	0
water	65:33	0:0	4	;
water	66:4	0:0	4	}
for	70:4	76:4	2	(i = 1 ;i < last;i ++)
forinit	70:9	70:14	3	i = 1 ;
water	70:9	0:0	4	i
op	70:11	0:0	4	=
water	70:13	0:0	4	1
water	70:14	0:0	4	;
cond	70:16	70:20	3	i < last
water	70:16	0:0	4	i
op	70:18	0:0	4	<
water	70:20	0:0	4	last
forexpr	70:26	70:27	3	i ++
water	70:26	0:0	4	i
op	70:27	0:0	4	++
stmts	71:4	76:4	3	
water	71:4	0:0	4	{
water	72:8	0:0	4	color_x_min
op	72:19	0:0	4	[
water	72:20	0:0	4	i
op	72:21	0:0	4	]
op	72:23	0:0	4	=
op	72:25	0:0	4	-
water	72:26	0:0	4	1
water	72:27	0:0	4	;
water	73:8	0:0	4	color_x_max
op	73:19	0:0	4	[
water	73:20	0:0	4	i
op	73:21	0:0	4	]
op	73:23	0:0	4	=
op	73:25	0:0	4	-
water	73:26	0:0	4	1
water	73:27	0:0	4	;
water	74:8	0:0	4	color_y_min
op	74:19	0:0	4	[
water	74:20	0:0	4	i
op	74:21	0:0	4	]
op	74:23	0:0	4	=
op	74:25	0:0	4	-
water	74:26	0:0	4	1
water	74:27	0:0	4	;
water	75:8	0:0	4	color_y_max
op	75:19	0:0	4	[
water	75:20	0:0	4	i
op	75:21	0:0	4	]
op	75:23	0:0	4	=
op	75:25	0:0	4	-
water	75:26	0:0	4	1
water	75:27	0:0	4	;
water	76:4	0:0	4	}
for	80:4	106:4	2	(i = 0 ;i < i_pitch * i_lines;i ++)
forinit	80:9	80:14	3	i = 0 ;
water	80:9	0:0	4	i
op	80:11	0:0	4	=
water	80:13	0:0	4	0
water	80:14	0:0	4	;
cond	80:16	80:30	3	i < i_pitch * i_lines
water	80:16	0:0	4	i
op	80:18	0:0	4	<
water	80:20	0:0	4	i_pitch
op	80:28	0:0	4	*
water	80:30	0:0	4	i_lines
forexpr	80:39	80:40	3	i ++
water	80:39	0:0	4	i
op	80:40	0:0	4	++
stmts	81:4	106:4	3	
water	81:4	0:0	4	{
if	82:8	105:8	4	(p_smooth [ i ])
cond	82:12	82:22	5	p_smooth [ i ]
water	82:12	0:0	6	p_smooth
op	82:20	0:0	6	[
water	82:21	0:0	6	i
op	82:22	0:0	6	]
stmts	83:8	105:8	5	
water	83:8	0:0	6	{
while	84:12	85:49	6	(colors [ p_smooth [ i ] ] != ( int ) p_smooth [ i ])
cond	84:19	84:57	7	colors [ p_smooth [ i ] ] != ( int ) p_smooth [ i ]
water	84:19	0:0	8	colors
op	84:25	0:0	8	[
water	84:26	0:0	8	p_smooth
op	84:34	0:0	8	[
water	84:35	0:0	8	i
op	84:36	0:0	8	]
op	84:37	0:0	8	]
op	84:39	0:0	8	!=
water	84:42	0:0	8	(
water	84:43	0:0	8	int
water	84:46	0:0	8	)
water	84:47	0:0	8	p_smooth
op	84:55	0:0	8	[
water	84:56	0:0	8	i
op	84:57	0:0	8	]
stmts	85:16	85:49	7	
water	85:16	0:0	8	p_smooth
op	85:24	0:0	8	[
water	85:25	0:0	8	i
op	85:26	0:0	8	]
op	85:28	0:0	8	=
water	85:30	0:0	8	colors
op	85:36	0:0	8	[
water	85:37	0:0	8	p_smooth
op	85:45	0:0	8	[
water	85:46	0:0	8	i
op	85:47	0:0	8	]
op	85:48	0:0	8	]
water	85:49	0:0	8	;
if	86:12	92:12	6	(color_x_min [ p_smooth [ i ] ] == - 1)
cond	86:16	86:45	7	color_x_min [ p_smooth [ i ] ] == - 1
water	86:16	0:0	8	color_x_min
op	86:27	0:0	8	[
water	86:28	0:0	8	p_smooth
op	86:36	0:0	8	[
water	86:37	0:0	8	i
op	86:38	0:0	8	]
op	86:39	0:0	8	]
op	86:41	0:0	8	==
op	86:44	0:0	8	-
water	86:45	0:0	8	1
stmts	87:12	92:12	7	
water	87:12	0:0	8	{
water	88:16	0:0	8	color_x_min
op	88:27	0:0	8	[
water	88:28	0:0	8	p_smooth
op	88:36	0:0	8	[
water	88:37	0:0	8	i
op	88:38	0:0	8	]
op	88:39	0:0	8	]
op	88:41	0:0	8	=
water	89:16	0:0	8	color_x_max
op	89:27	0:0	8	[
water	89:28	0:0	8	p_smooth
op	89:36	0:0	8	[
water	89:37	0:0	8	i
op	89:38	0:0	8	]
op	89:39	0:0	8	]
op	89:41	0:0	8	=
water	89:43	0:0	8	i
op	89:45	0:0	8	%
water	89:47	0:0	8	i_pitch
water	89:54	0:0	8	;
water	90:16	0:0	8	color_y_min
op	90:27	0:0	8	[
water	90:28	0:0	8	p_smooth
op	90:36	0:0	8	[
water	90:37	0:0	8	i
op	90:38	0:0	8	]
op	90:39	0:0	8	]
op	90:41	0:0	8	=
water	91:16	0:0	8	color_y_max
op	91:27	0:0	8	[
water	91:28	0:0	8	p_smooth
op	91:36	0:0	8	[
water	91:37	0:0	8	i
op	91:38	0:0	8	]
op	91:39	0:0	8	]
op	91:41	0:0	8	=
water	91:43	0:0	8	i
op	91:45	0:0	8	/
water	91:47	0:0	8	i_pitch
water	91:54	0:0	8	;
water	92:12	0:0	8	}
else	93:12	104:12	6
stmts	94:12	104:12	7	
water	94:12	0:0	8	{
decl	95:16	95:52	8	int	x
op	95:22	0:0	8	=
water	95:24	0:0	8	i
op	95:26	0:0	8	%
water	95:28	0:0	8	i_pitch
water	95:35	0:0	8	,
decl	95:16	95:52	8	int	y
op	95:39	0:0	8	=
water	95:41	0:0	8	i
op	95:43	0:0	8	/
water	95:45	0:0	8	i_pitch
if	96:16	97:48	8	(x < color_x_min [ p_smooth [ i ] ])
cond	96:20	96:47	9	x < color_x_min [ p_smooth [ i ] ]
water	96:20	0:0	10	x
op	96:22	0:0	10	<
water	96:24	0:0	10	color_x_min
op	96:35	0:0	10	[
water	96:36	0:0	10	p_smooth
op	96:44	0:0	10	[
water	96:45	0:0	10	i
op	96:46	0:0	10	]
op	96:47	0:0	10	]
stmts	97:20	97:48	9	
water	97:20	0:0	10	color_x_min
op	97:31	0:0	10	[
water	97:32	0:0	10	p_smooth
op	97:40	0:0	10	[
water	97:41	0:0	10	i
op	97:42	0:0	10	]
op	97:43	0:0	10	]
op	97:45	0:0	10	=
water	97:47	0:0	10	x
water	97:48	0:0	10	;
if	98:16	99:48	8	(x > color_x_max [ p_smooth [ i ] ])
cond	98:20	98:47	9	x > color_x_max [ p_smooth [ i ] ]
water	98:20	0:0	10	x
op	98:22	0:0	10	>
water	98:24	0:0	10	color_x_max
op	98:35	0:0	10	[
water	98:36	0:0	10	p_smooth
op	98:44	0:0	10	[
water	98:45	0:0	10	i
op	98:46	0:0	10	]
op	98:47	0:0	10	]
stmts	99:20	99:48	9	
water	99:20	0:0	10	color_x_max
op	99:31	0:0	10	[
water	99:32	0:0	10	p_smooth
op	99:40	0:0	10	[
water	99:41	0:0	10	i
op	99:42	0:0	10	]
op	99:43	0:0	10	]
op	99:45	0:0	10	=
water	99:47	0:0	10	x
water	99:48	0:0	10	;
if	100:16	101:48	8	(y < color_y_min [ p_smooth [ i ] ])
cond	100:20	100:47	9	y < color_y_min [ p_smooth [ i ] ]
water	100:20	0:0	10	y
op	100:22	0:0	10	<
water	100:24	0:0	10	color_y_min
op	100:35	0:0	10	[
water	100:36	0:0	10	p_smooth
op	100:44	0:0	10	[
water	100:45	0:0	10	i
op	100:46	0:0	10	]
op	100:47	0:0	10	]
stmts	101:20	101:48	9	
water	101:20	0:0	10	color_y_min
op	101:31	0:0	10	[
water	101:32	0:0	10	p_smooth
op	101:40	0:0	10	[
water	101:41	0:0	10	i
op	101:42	0:0	10	]
op	101:43	0:0	10	]
op	101:45	0:0	10	=
water	101:47	0:0	10	y
water	101:48	0:0	10	;
if	102:16	103:48	8	(y > color_y_max [ p_smooth [ i ] ])
cond	102:20	102:47	9	y > color_y_max [ p_smooth [ i ] ]
water	102:20	0:0	10	y
op	102:22	0:0	10	>
water	102:24	0:0	10	color_y_max
op	102:35	0:0	10	[
water	102:36	0:0	10	p_smooth
op	102:44	0:0	10	[
water	102:45	0:0	10	i
op	102:46	0:0	10	]
op	102:47	0:0	10	]
stmts	103:20	103:48	9	
water	103:20	0:0	10	color_y_max
op	103:31	0:0	10	[
water	103:32	0:0	10	p_smooth
op	103:40	0:0	10	[
water	103:41	0:0	10	i
op	103:42	0:0	10	]
op	103:43	0:0	10	]
op	103:45	0:0	10	=
water	103:47	0:0	10	y
water	103:48	0:0	10	;
water	104:12	0:0	8	}
water	105:8	0:0	6	}
water	106:4	0:0	4	}
for	110:4	129:4	2	(i = 1 ;i < last;i ++)
forinit	110:9	110:14	3	i = 1 ;
water	110:9	0:0	4	i
op	110:11	0:0	4	=
water	110:13	0:0	4	1
water	110:14	0:0	4	;
cond	110:16	110:20	3	i < last
water	110:16	0:0	4	i
op	110:18	0:0	4	<
water	110:20	0:0	4	last
forexpr	110:26	110:27	3	i ++
water	110:26	0:0	4	i
op	110:27	0:0	4	++
stmts	111:4	129:4	3	
water	111:4	0:0	4	{
if	112:8	112:37	4	(colors [ i ] != i)
cond	112:12	112:25	5	colors [ i ] != i
water	112:12	0:0	6	colors
op	112:18	0:0	6	[
water	112:19	0:0	6	i
op	112:20	0:0	6	]
op	112:22	0:0	6	!=
water	112:25	0:0	6	i
stmts	112:29	112:37	5	
continue	112:29	112:37	6	
if	113:8	113:43	4	(color_x_min [ i ] == - 1)
cond	113:12	113:31	5	color_x_min [ i ] == - 1
water	113:12	0:0	6	color_x_min
op	113:23	0:0	6	[
water	113:24	0:0	6	i
op	113:25	0:0	6	]
op	113:27	0:0	6	==
op	113:30	0:0	6	-
water	113:31	0:0	6	1
stmts	113:35	113:43	5	
continue	113:35	113:43	6	
for	114:8	128:8	4	(j = i + 1 ;j < last;j ++)
forinit	114:13	114:20	5	j = i + 1 ;
water	114:13	0:0	6	j
op	114:15	0:0	6	=
water	114:17	0:0	6	i
op	114:18	0:0	6	+
water	114:19	0:0	6	1
water	114:20	0:0	6	;
cond	114:22	114:26	5	j < last
water	114:22	0:0	6	j
op	114:24	0:0	6	<
water	114:26	0:0	6	last
forexpr	114:32	114:33	5	j ++
water	114:32	0:0	6	j
op	114:33	0:0	6	++
stmts	115:8	128:8	5	
water	115:8	0:0	6	{
if	116:12	116:41	6	(colors [ j ] != j)
cond	116:16	116:29	7	colors [ j ] != j
water	116:16	0:0	8	colors
op	116:22	0:0	8	[
water	116:23	0:0	8	j
op	116:24	0:0	8	]
op	116:26	0:0	8	!=
water	116:29	0:0	8	j
stmts	116:33	116:41	7	
continue	116:33	116:41	8	
if	117:12	117:47	6	(color_x_min [ j ] == - 1)
cond	117:16	117:35	7	color_x_min [ j ] == - 1
water	117:16	0:0	8	color_x_min
op	117:27	0:0	8	[
water	117:28	0:0	8	j
op	117:29	0:0	8	]
op	117:31	0:0	8	==
op	117:34	0:0	8	-
water	117:35	0:0	8	1
stmts	117:39	117:47	7	
continue	117:39	117:47	8	
if	118:12	127:12	6	(__MAX (color_x_min [ i ] ,color_x_min [ j ] ) <__MIN (color_x_max [ i ] ,color_x_max [ j ] ) &&__MAX (color_y_min [ i ] ,color_y_min [ j ] ) <__MIN (color_y_max [ i ] ,color_y_max [ j ] ))
cond	118:16	119:96	7	__MAX (color_x_min [ i ] ,color_x_min [ j ] ) <__MIN (color_x_max [ i ] ,color_x_max [ j ] ) &&__MAX (color_y_min [ i ] ,color_y_min [ j ] ) <__MIN (color_y_max [ i ] ,color_y_max [ j ] )
call	118:16	118:54	8	__MAX
arg	118:23	118:37	9	color_x_min[i]
water	118:23	0:0	10	color_x_min
op	118:34	0:0	10	[
water	118:35	0:0	10	i
op	118:36	0:0	10	]
arg	118:39	118:54	9	color_x_min[j]
water	118:39	0:0	10	color_x_min
op	118:50	0:0	10	[
water	118:51	0:0	10	j
op	118:52	0:0	10	]
op	118:56	0:0	8	<
call	118:58	118:96	8	__MIN
arg	118:65	118:79	9	color_x_max[i]
water	118:65	0:0	10	color_x_max
op	118:76	0:0	10	[
water	118:77	0:0	10	i
op	118:78	0:0	10	]
arg	118:81	118:96	9	color_x_max[j]
water	118:81	0:0	10	color_x_max
op	118:92	0:0	10	[
water	118:93	0:0	10	j
op	118:94	0:0	10	]
op	118:98	0:0	8	&&
call	119:16	119:54	8	__MAX
arg	119:23	119:37	9	color_y_min[i]
water	119:23	0:0	10	color_y_min
op	119:34	0:0	10	[
water	119:35	0:0	10	i
op	119:36	0:0	10	]
arg	119:39	119:54	9	color_y_min[j]
water	119:39	0:0	10	color_y_min
op	119:50	0:0	10	[
water	119:51	0:0	10	j
op	119:52	0:0	10	]
op	119:56	0:0	8	<
call	119:58	119:96	8	__MIN
arg	119:65	119:79	9	color_y_max[i]
water	119:65	0:0	10	color_y_max
op	119:76	0:0	10	[
water	119:77	0:0	10	i
op	119:78	0:0	10	]
arg	119:81	119:96	9	color_y_max[j]
water	119:81	0:0	10	color_y_max
op	119:92	0:0	10	[
water	119:93	0:0	10	j
op	119:94	0:0	10	]
stmts	120:12	127:12	7	
water	120:12	0:0	8	{
water	121:16	0:0	8	color_x_min
op	121:27	0:0	8	[
water	121:28	0:0	8	i
op	121:29	0:0	8	]
op	121:31	0:0	8	=
call	121:33	121:71	8	__MIN
arg	121:40	121:54	9	color_x_min[i]
water	121:40	0:0	10	color_x_min
op	121:51	0:0	10	[
water	121:52	0:0	10	i
op	121:53	0:0	10	]
arg	121:56	121:71	9	color_x_min[j]
water	121:56	0:0	10	color_x_min
op	121:67	0:0	10	[
water	121:68	0:0	10	j
op	121:69	0:0	10	]
water	121:72	0:0	8	;
water	122:16	0:0	8	color_x_max
op	122:27	0:0	8	[
water	122:28	0:0	8	i
op	122:29	0:0	8	]
op	122:31	0:0	8	=
call	122:33	122:71	8	__MAX
arg	122:40	122:54	9	color_x_max[i]
water	122:40	0:0	10	color_x_max
op	122:51	0:0	10	[
water	122:52	0:0	10	i
op	122:53	0:0	10	]
arg	122:56	122:71	9	color_x_max[j]
water	122:56	0:0	10	color_x_max
op	122:67	0:0	10	[
water	122:68	0:0	10	j
op	122:69	0:0	10	]
water	122:72	0:0	8	;
water	123:16	0:0	8	color_y_min
op	123:27	0:0	8	[
water	123:28	0:0	8	i
op	123:29	0:0	8	]
op	123:31	0:0	8	=
call	123:33	123:71	8	__MIN
arg	123:40	123:54	9	color_y_min[i]
water	123:40	0:0	10	color_y_min
op	123:51	0:0	10	[
water	123:52	0:0	10	i
op	123:53	0:0	10	]
arg	123:56	123:71	9	color_y_min[j]
water	123:56	0:0	10	color_y_min
op	123:67	0:0	10	[
water	123:68	0:0	10	j
op	123:69	0:0	10	]
water	123:72	0:0	8	;
water	124:16	0:0	8	color_y_max
op	124:27	0:0	8	[
water	124:28	0:0	8	i
op	124:29	0:0	8	]
op	124:31	0:0	8	=
call	124:33	124:71	8	__MAX
arg	124:40	124:54	9	color_y_max[i]
water	124:40	0:0	10	color_y_max
op	124:51	0:0	10	[
water	124:52	0:0	10	i
op	124:53	0:0	10	]
arg	124:56	124:71	9	color_y_max[j]
water	124:56	0:0	10	color_y_max
op	124:67	0:0	10	[
water	124:68	0:0	10	j
op	124:69	0:0	10	]
water	124:72	0:0	8	;
water	125:16	0:0	8	color_x_min
op	125:27	0:0	8	[
water	125:28	0:0	8	j
op	125:29	0:0	8	]
op	125:31	0:0	8	=
op	125:33	0:0	8	-
water	125:34	0:0	8	1
water	125:35	0:0	8	;
water	126:16	0:0	8	j
op	126:18	0:0	8	=
water	126:20	0:0	8	0
water	126:21	0:0	8	;
water	127:12	0:0	8	}
water	128:8	0:0	6	}
water	129:4	0:0	4	}
return	130:4	130:15	2	last
water	130:11	0:0	3	last
