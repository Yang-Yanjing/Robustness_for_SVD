func	2:0	283:0	0	char *	str_format_meta
params	2:21	0:0	1	
param	2:22	2:43	2	input_thread_t *	input
param	2:45	2:58	2	const char *	s
stmnts	0:0	281:14	1	
decl	4:4	4:13	2	char	*str
decl	5:4	5:14	2	size_t	len
decl	7:4	7:45	2	FILE	*stream
op	7:17	0:0	2	=
call	7:19	7:44	3	open_memstream
arg	7:34	7:38	4	&str
op	7:34	0:0	5	&
water	7:35	0:0	5	str
arg	7:40	7:44	4	&len
op	7:40	0:0	5	&
water	7:41	0:0	5	len
decl	9:4	9:38	2	FILE	*stream
op	9:17	0:0	2	=
call	9:19	9:37	3	vlc_win32_tmpfile
decl	11:4	11:28	2	FILE	*stream
op	11:17	0:0	2	=
call	11:19	11:27	3	tmpfile
if	13:4	14:19	2	(stream == NULL)
cond	13:8	13:18	3	stream == NULL
water	13:8	0:0	4	stream
op	13:15	0:0	4	==
water	13:18	0:0	4	NULL
stmts	14:8	14:19	3	
return	14:8	14:19	4	NULL
water	14:15	0:0	5	NULL
decl	15:4	15:70	2	input_item_t	*item
op	15:23	0:0	2	=
water	15:25	0:0	2	(
water	15:26	0:0	2	input
op	15:32	0:0	2	!=
water	15:35	0:0	2	NULL
water	15:39	0:0	2	)
water	15:41	0:0	2	?
call	15:43	15:62	3	input_GetItem
arg	15:57	15:62	4	input
water	15:57	0:0	5	input
water	15:64	0:0	2	:
water	15:66	0:0	2	NULL
decl	16:4	16:10	2	char	c
decl	17:4	17:28	2	bool	b_is_format
op	17:21	0:0	2	=
water	17:23	0:0	2	false
decl	18:4	18:30	2	bool	b_empty_if_na
op	18:23	0:0	2	=
water	18:25	0:0	2	false
call	19:4	19:20	2	assert
arg	19:11	19:20	3	s!=NULL
water	19:11	0:0	4	s
op	19:13	0:0	4	!=
water	19:16	0:0	4	NULL
water	19:21	0:0	2	;
while	20:4	266:4	2	(( c = * s ) != '\0')
cond	20:11	20:23	3	( c = * s ) != '\0'
water	20:11	0:0	4	(
water	20:12	0:0	4	c
op	20:14	0:0	4	=
op	20:16	0:0	4	*
water	20:17	0:0	4	s
water	20:18	0:0	4	)
op	20:20	0:0	4	!=
water	20:23	0:0	4	'\0'
stmts	21:4	266:4	3	
water	21:4	0:0	4	{
water	22:8	0:0	4	s
op	22:9	0:0	4	++
water	22:11	0:0	4	;
if	23:8	33:8	4	(! b_is_format)
cond	23:12	23:13	5	! b_is_format
op	23:12	0:0	6	!
water	23:13	0:0	6	b_is_format
stmts	24:8	33:8	5	
water	24:8	0:0	6	{
if	25:12	30:12	6	(c == '$')
cond	25:16	25:21	7	c == '$'
water	25:16	0:0	8	c
op	25:18	0:0	8	==
water	25:21	0:0	8	'$'
stmts	26:12	30:12	7	
water	26:12	0:0	8	{
water	27:16	0:0	8	b_is_format
op	27:28	0:0	8	=
water	27:30	0:0	8	true
water	27:34	0:0	8	;
water	28:16	0:0	8	b_empty_if_na
op	28:30	0:0	8	=
water	28:32	0:0	8	false
water	28:37	0:0	8	;
continue	29:16	29:24	8	
water	30:12	0:0	8	}
call	31:12	31:27	6	fputc
arg	31:18	31:19	7	c
water	31:18	0:0	8	c
arg	31:21	31:27	7	stream
water	31:21	0:0	8	stream
water	31:28	0:0	6	;
continue	32:12	32:20	6	
water	33:8	0:0	6	}
water	34:8	0:0	4	b_is_format
op	34:20	0:0	4	=
water	34:22	0:0	4	false
water	34:27	0:0	4	;
switch	35:8	265:8	4	(c)
cond	35:16	35:16	5	c
water	35:16	0:0	6	c
stmts	36:8	265:8	5	
water	36:8	0:0	6	{
water	37:12	0:0	6	case
water	37:17	0:0	6	'a'
water	37:20	0:0	6	:
call	38:16	38:56	6	write_meta
arg	38:27	38:33	7	stream
water	38:27	0:0	8	stream
arg	38:35	38:39	7	item
water	38:35	0:0	8	item
arg	38:41	38:56	7	vlc_meta_Artist
water	38:41	0:0	8	vlc_meta_Artist
water	38:57	0:0	6	;
break	39:16	39:21	6	
water	40:12	0:0	6	case
water	40:17	0:0	6	'b'
water	40:20	0:0	6	:
call	41:16	41:55	6	write_meta
arg	41:27	41:33	7	stream
water	41:27	0:0	8	stream
arg	41:35	41:39	7	item
water	41:35	0:0	8	item
arg	41:41	41:55	7	vlc_meta_Album
water	41:41	0:0	8	vlc_meta_Album
water	41:56	0:0	6	;
break	42:16	42:21	6	
water	43:12	0:0	6	case
water	43:17	0:0	6	'c'
water	43:20	0:0	6	:
call	44:16	44:59	6	write_meta
arg	44:27	44:33	7	stream
water	44:27	0:0	8	stream
arg	44:35	44:39	7	item
water	44:35	0:0	8	item
arg	44:41	44:59	7	vlc_meta_Copyright
water	44:41	0:0	8	vlc_meta_Copyright
water	44:60	0:0	6	;
break	45:16	45:21	6	
water	46:12	0:0	6	case
water	46:17	0:0	6	'd'
water	46:20	0:0	6	:
call	47:16	47:61	6	write_meta
arg	47:27	47:33	7	stream
water	47:27	0:0	8	stream
arg	47:35	47:39	7	item
water	47:35	0:0	8	item
arg	47:41	47:61	7	vlc_meta_Description
water	47:41	0:0	8	vlc_meta_Description
water	47:62	0:0	6	;
break	48:16	48:21	6	
water	49:12	0:0	6	case
water	49:17	0:0	6	'e'
water	49:20	0:0	6	:
call	50:16	50:59	6	write_meta
arg	50:27	50:33	7	stream
water	50:27	0:0	8	stream
arg	50:35	50:39	7	item
water	50:35	0:0	8	item
arg	50:41	50:59	7	vlc_meta_EncodedBy
water	50:41	0:0	8	vlc_meta_EncodedBy
water	50:60	0:0	6	;
break	51:16	51:21	6	
water	52:12	0:0	6	case
water	52:17	0:0	6	'f'
water	52:20	0:0	6	:
water	53:16	0:0	6	if
water	53:19	0:0	6	(
water	53:20	0:0	6	item
op	53:25	0:0	6	!=
water	53:28	0:0	6	NULL
op	53:33	0:0	6	&&
water	53:36	0:0	6	item
op	53:40	0:0	6	->
water	53:42	0:0	6	p_stats
op	53:50	0:0	6	!=
water	53:53	0:0	6	NULL
water	53:57	0:0	6	)
water	54:16	0:0	6	{
call	55:20	55:55	6	vlc_mutex_lock
arg	55:35	55:55	7	&item->p_stats->lock
op	55:35	0:0	8	&
water	55:36	0:0	8	item
op	55:40	0:0	8	->
water	55:42	0:0	8	p_stats
op	55:49	0:0	8	->
water	55:51	0:0	8	lock
water	55:56	0:0	6	;
call	56:20	57:63	6	fprintf
arg	56:28	56:34	7	stream
water	56:28	0:0	8	stream
arg	56:36	56:45	7	"%"PRIi64
water	56:36	0:0	8	"%"
water	56:39	0:0	8	PRIi64
arg	57:28	57:63	7	item->p_stats->i_displayed_pictures
water	57:28	0:0	8	item
op	57:32	0:0	8	->
water	57:34	0:0	8	p_stats
op	57:41	0:0	8	->
water	57:43	0:0	8	i_displayed_pictures
water	57:64	0:0	6	;
call	58:20	58:57	6	vlc_mutex_unlock
arg	58:37	58:57	7	&item->p_stats->lock
op	58:37	0:0	8	&
water	58:38	0:0	8	item
op	58:42	0:0	8	->
water	58:44	0:0	8	p_stats
op	58:51	0:0	8	->
water	58:53	0:0	8	lock
water	58:58	0:0	6	;
water	59:16	0:0	6	}
water	60:16	0:0	6	else
water	60:21	0:0	6	if
water	60:24	0:0	6	(
op	60:25	0:0	6	!
water	60:26	0:0	6	b_empty_if_na
water	60:39	0:0	6	)
call	61:20	61:37	6	fputc
arg	61:26	61:29	7	'-'
water	61:26	0:0	8	'-'
arg	61:31	61:37	7	stream
water	61:31	0:0	8	stream
water	61:38	0:0	6	;
break	62:16	62:21	6	
water	63:12	0:0	6	case
water	63:17	0:0	6	'g'
water	63:20	0:0	6	:
call	64:16	64:55	6	write_meta
arg	64:27	64:33	7	stream
water	64:27	0:0	8	stream
arg	64:35	64:39	7	item
water	64:35	0:0	8	item
arg	64:41	64:55	7	vlc_meta_Genre
water	64:41	0:0	8	vlc_meta_Genre
water	64:56	0:0	6	;
break	65:16	65:21	6	
water	66:12	0:0	6	case
water	66:17	0:0	6	'l'
water	66:20	0:0	6	:
call	67:16	67:58	6	write_meta
arg	67:27	67:33	7	stream
water	67:27	0:0	8	stream
arg	67:35	67:39	7	item
water	67:35	0:0	8	item
arg	67:41	67:58	7	vlc_meta_Language
water	67:41	0:0	8	vlc_meta_Language
water	67:59	0:0	6	;
break	68:16	68:21	6	
water	69:12	0:0	6	case
water	69:17	0:0	6	'n'
water	69:20	0:0	6	:
call	70:16	70:61	6	write_meta
arg	70:27	70:33	7	stream
water	70:27	0:0	8	stream
arg	70:35	70:39	7	item
water	70:35	0:0	8	item
arg	70:41	70:61	7	vlc_meta_TrackNumber
water	70:41	0:0	8	vlc_meta_TrackNumber
water	70:62	0:0	6	;
break	71:16	71:21	6	
water	72:12	0:0	6	case
water	72:17	0:0	6	'p'
water	72:20	0:0	6	:
water	73:16	0:0	6	if
water	73:19	0:0	6	(
water	73:20	0:0	6	item
op	73:25	0:0	6	==
water	73:28	0:0	6	NULL
water	73:32	0:0	6	)
water	74:20	0:0	6	break
water	74:25	0:0	6	;
water	75:16	0:0	6	{
decl	76:20	76:66	6	char	*value
op	76:32	0:0	6	=
call	76:34	76:65	7	input_item_GetNowPlayingFb
arg	76:61	76:65	8	item
water	76:61	0:0	9	item
if	77:20	78:29	6	(value == NULL)
cond	77:24	77:33	7	value == NULL
water	77:24	0:0	8	value
op	77:30	0:0	8	==
water	77:33	0:0	8	NULL
stmts	78:24	78:29	7	
break	78:24	78:29	8	
call	79:20	79:39	6	fputs
arg	79:26	79:31	7	value
water	79:26	0:0	8	value
arg	79:33	79:39	7	stream
water	79:33	0:0	8	stream
water	79:40	0:0	6	;
call	80:20	80:30	6	free
arg	80:25	80:30	7	value
water	80:25	0:0	8	value
water	80:31	0:0	6	;
water	81:16	0:0	6	}
break	82:16	82:21	6	
water	83:12	0:0	6	case
water	83:17	0:0	6	'r'
water	83:20	0:0	6	:
call	84:16	84:56	6	write_meta
arg	84:27	84:33	7	stream
water	84:27	0:0	8	stream
arg	84:35	84:39	7	item
water	84:35	0:0	8	item
arg	84:41	84:56	7	vlc_meta_Rating
water	84:41	0:0	8	vlc_meta_Rating
water	84:57	0:0	6	;
break	85:16	85:21	6	
water	86:12	0:0	6	case
water	86:17	0:0	6	's'
water	86:20	0:0	6	:
water	87:12	0:0	6	{
water	88:16	0:0	6	char
op	88:21	0:0	6	*
water	88:22	0:0	6	lang
op	88:27	0:0	6	=
water	88:29	0:0	6	NULL
water	88:33	0:0	6	;
water	89:16	0:0	6	if
water	89:19	0:0	6	(
water	89:20	0:0	6	input
op	89:26	0:0	6	!=
water	89:29	0:0	6	NULL
water	89:33	0:0	6	)
water	90:20	0:0	6	lang
op	90:25	0:0	6	=
call	90:27	90:70	6	var_GetNonEmptyString
arg	90:49	90:54	7	input
water	90:49	0:0	8	input
arg	90:56	90:70	7	"sub-language"
water	90:56	0:0	8	"sub-language"
water	90:71	0:0	6	;
water	91:16	0:0	6	if
water	91:19	0:0	6	(
water	91:20	0:0	6	lang
op	91:25	0:0	6	!=
water	91:28	0:0	6	NULL
water	91:32	0:0	6	)
water	92:16	0:0	6	{
call	93:20	93:38	6	fputs
arg	93:26	93:30	7	lang
water	93:26	0:0	8	lang
arg	93:32	93:38	7	stream
water	93:32	0:0	8	stream
water	93:39	0:0	6	;
call	94:20	94:29	6	free
arg	94:25	94:29	7	lang
water	94:25	0:0	8	lang
water	94:30	0:0	6	;
water	95:16	0:0	6	}
water	96:16	0:0	6	else
water	96:21	0:0	6	if
water	96:24	0:0	6	(
op	96:25	0:0	6	!
water	96:26	0:0	6	b_empty_if_na
water	96:39	0:0	6	)
call	97:20	97:37	6	fputc
arg	97:26	97:29	7	'-'
water	97:26	0:0	8	'-'
arg	97:31	97:37	7	stream
water	97:31	0:0	8	stream
water	97:38	0:0	6	;
water	98:16	0:0	6	break
water	98:21	0:0	6	;
water	99:12	0:0	6	}
water	100:12	0:0	6	case
water	100:17	0:0	6	't'
water	100:20	0:0	6	:
call	101:16	101:55	6	write_meta
arg	101:27	101:33	7	stream
water	101:27	0:0	8	stream
arg	101:35	101:39	7	item
water	101:35	0:0	8	item
arg	101:41	101:55	7	vlc_meta_Title
water	101:41	0:0	8	vlc_meta_Title
water	101:56	0:0	6	;
break	102:16	102:21	6	
water	103:12	0:0	6	case
water	103:17	0:0	6	'u'
water	103:20	0:0	6	:
call	104:16	104:53	6	write_meta
arg	104:27	104:33	7	stream
water	104:27	0:0	8	stream
arg	104:35	104:39	7	item
water	104:35	0:0	8	item
arg	104:41	104:53	7	vlc_meta_URL
water	104:41	0:0	8	vlc_meta_URL
water	104:54	0:0	6	;
break	105:16	105:21	6	
water	106:12	0:0	6	case
water	106:17	0:0	6	'A'
water	106:20	0:0	6	:
call	107:16	107:54	6	write_meta
arg	107:27	107:33	7	stream
water	107:27	0:0	8	stream
arg	107:35	107:39	7	item
water	107:35	0:0	8	item
arg	107:41	107:54	7	vlc_meta_Date
water	107:41	0:0	8	vlc_meta_Date
water	107:55	0:0	6	;
break	108:16	108:21	6	
water	109:12	0:0	6	case
water	109:17	0:0	6	'B'
water	109:20	0:0	6	:
water	110:16	0:0	6	if
water	110:19	0:0	6	(
water	110:20	0:0	6	input
op	110:26	0:0	6	!=
water	110:29	0:0	6	NULL
water	110:33	0:0	6	)
call	111:20	112:68	6	fprintf
arg	111:28	111:34	7	stream
water	111:28	0:0	8	stream
arg	111:36	111:45	7	"%"PRId64
water	111:36	0:0	8	"%"
water	111:39	0:0	8	PRId64
arg	112:28	112:68	7	var_GetInteger(input,"bit-rate")/1000
call	112:28	112:60	8	var_GetInteger
arg	112:43	112:48	9	input
water	112:43	0:0	10	input
arg	112:50	112:60	9	"bit-rate"
water	112:50	0:0	10	"bit-rate"
op	112:62	0:0	8	/
water	112:64	0:0	8	1000
water	112:69	0:0	6	;
else	113:16	114:38	6
stmts	113:21	114:38	7	
if	113:21	114:38	8	(! b_empty_if_na)
cond	113:25	113:26	9	! b_empty_if_na
op	113:25	0:0	10	!
water	113:26	0:0	10	b_empty_if_na
stmts	114:20	114:38	9	
call	114:20	114:37	10	fputc
arg	114:26	114:29	11	'-'
water	114:26	0:0	12	'-'
arg	114:31	114:37	11	stream
water	114:31	0:0	12	stream
water	114:38	0:0	10	;
break	115:16	115:21	6	
water	116:12	0:0	6	case
water	116:17	0:0	6	'C'
water	116:20	0:0	6	:
water	117:16	0:0	6	if
water	117:19	0:0	6	(
water	117:20	0:0	6	input
op	117:26	0:0	6	!=
water	117:29	0:0	6	NULL
water	117:33	0:0	6	)
call	118:20	119:60	6	fprintf
arg	118:28	118:34	7	stream
water	118:28	0:0	8	stream
arg	118:36	118:45	7	"%"PRId64
water	118:36	0:0	8	"%"
water	118:39	0:0	8	PRId64
arg	119:28	119:60	7	var_GetInteger(input,"chapter")
call	119:28	119:59	8	var_GetInteger
arg	119:43	119:48	9	input
water	119:43	0:0	10	input
arg	119:50	119:59	9	"chapter"
water	119:50	0:0	10	"chapter"
water	119:61	0:0	6	;
else	120:16	121:38	6
stmts	120:21	121:38	7	
if	120:21	121:38	8	(! b_empty_if_na)
cond	120:25	120:26	9	! b_empty_if_na
op	120:25	0:0	10	!
water	120:26	0:0	10	b_empty_if_na
stmts	121:20	121:38	9	
call	121:20	121:37	10	fputc
arg	121:26	121:29	11	'-'
water	121:26	0:0	12	'-'
arg	121:31	121:37	11	stream
water	121:31	0:0	12	stream
water	121:38	0:0	10	;
break	122:16	122:21	6	
water	123:12	0:0	6	case
water	123:17	0:0	6	'D'
water	123:20	0:0	6	:
water	124:16	0:0	6	if
water	124:19	0:0	6	(
water	124:20	0:0	6	item
op	124:25	0:0	6	!=
water	124:28	0:0	6	NULL
water	124:32	0:0	6	)
call	125:20	125:71	6	write_duration
arg	125:35	125:41	7	stream
water	125:35	0:0	8	stream
arg	125:43	125:71	7	input_item_GetDuration(item)
call	125:43	125:70	8	input_item_GetDuration
arg	125:66	125:70	9	item
water	125:66	0:0	10	item
water	125:72	0:0	6	;
else	126:16	127:45	6
stmts	126:21	127:45	7	
if	126:21	127:45	8	(! b_empty_if_na)
cond	126:25	126:26	9	! b_empty_if_na
op	126:25	0:0	10	!
water	126:26	0:0	10	b_empty_if_na
stmts	127:20	127:45	9	
call	127:20	127:44	10	fputs
arg	127:26	127:36	11	"--:--:--"
water	127:26	0:0	12	"--:--:--"
arg	127:38	127:44	11	stream
water	127:38	0:0	12	stream
water	127:45	0:0	10	;
break	128:16	128:21	6	
water	129:12	0:0	6	case
water	129:17	0:0	6	'F'
water	129:20	0:0	6	:
water	130:16	0:0	6	if
water	130:19	0:0	6	(
water	130:20	0:0	6	item
op	130:25	0:0	6	!=
water	130:28	0:0	6	NULL
water	130:32	0:0	6	)
water	131:16	0:0	6	{
water	132:20	0:0	6	char
op	132:25	0:0	6	*
water	132:26	0:0	6	uri
op	132:30	0:0	6	=
call	132:32	132:54	6	input_item_GetURI
arg	132:50	132:54	7	item
water	132:50	0:0	8	item
water	132:55	0:0	6	;
water	133:20	0:0	6	if
water	133:23	0:0	6	(
water	133:24	0:0	6	uri
op	133:28	0:0	6	!=
water	133:31	0:0	6	NULL
water	133:35	0:0	6	)
water	134:20	0:0	6	{
call	135:24	135:41	6	fputs
arg	135:30	135:33	7	uri
water	135:30	0:0	8	uri
arg	135:35	135:41	7	stream
water	135:35	0:0	8	stream
water	135:42	0:0	6	;
call	136:24	136:32	6	free
arg	136:29	136:32	7	uri
water	136:29	0:0	8	uri
water	136:33	0:0	6	;
water	137:20	0:0	6	}
water	138:16	0:0	6	}
water	139:16	0:0	6	break
water	139:21	0:0	6	;
water	140:12	0:0	6	case
water	140:17	0:0	6	'I'
water	140:20	0:0	6	:
water	141:16	0:0	6	if
water	141:19	0:0	6	(
water	141:20	0:0	6	input
op	141:26	0:0	6	!=
water	141:29	0:0	6	NULL
water	141:33	0:0	6	)
call	142:20	142:77	6	fprintf
arg	142:28	142:34	7	stream
water	142:28	0:0	8	stream
arg	142:36	142:45	7	"%"PRId64
water	142:36	0:0	8	"%"
water	142:39	0:0	8	PRId64
arg	142:47	142:77	7	var_GetInteger(input,"title")
call	142:47	142:76	8	var_GetInteger
arg	142:62	142:67	9	input
water	142:62	0:0	10	input
arg	142:69	142:76	9	"title"
water	142:69	0:0	10	"title"
water	142:78	0:0	6	;
else	143:16	144:38	6
stmts	143:21	144:38	7	
if	143:21	144:38	8	(! b_empty_if_na)
cond	143:25	143:26	9	! b_empty_if_na
op	143:25	0:0	10	!
water	143:26	0:0	10	b_empty_if_na
stmts	144:20	144:38	9	
call	144:20	144:37	10	fputc
arg	144:26	144:29	11	'-'
water	144:26	0:0	12	'-'
arg	144:31	144:37	11	stream
water	144:31	0:0	12	stream
water	144:38	0:0	10	;
break	145:16	145:21	6	
water	146:12	0:0	6	case
water	146:17	0:0	6	'L'
water	146:20	0:0	6	:
water	147:16	0:0	6	if
water	147:19	0:0	6	(
water	147:20	0:0	6	item
op	147:25	0:0	6	!=
water	147:28	0:0	6	NULL
water	147:32	0:0	6	)
water	148:16	0:0	6	{
call	149:20	149:40	6	assert
arg	149:27	149:40	7	input!=NULL
water	149:27	0:0	8	input
op	149:33	0:0	8	!=
water	149:36	0:0	8	NULL
water	149:41	0:0	6	;
call	150:20	151:63	6	write_duration
arg	150:35	150:41	7	stream
water	150:35	0:0	8	stream
arg	150:43	151:63	7	input_item_GetDuration(item)-var_GetTime(input,"time")
call	150:43	150:70	8	input_item_GetDuration
arg	150:66	150:70	9	item
water	150:66	0:0	10	item
op	151:35	0:0	8	-
call	151:37	151:62	8	var_GetTime
arg	151:49	151:54	9	input
water	151:49	0:0	10	input
arg	151:56	151:62	9	"time"
water	151:56	0:0	10	"time"
water	151:64	0:0	6	;
water	152:16	0:0	6	}
water	153:16	0:0	6	else
water	153:21	0:0	6	if
water	153:24	0:0	6	(
op	153:25	0:0	6	!
water	153:26	0:0	6	b_empty_if_na
water	153:39	0:0	6	)
call	154:20	154:44	6	fputs
arg	154:26	154:36	7	"--:--:--"
water	154:26	0:0	8	"--:--:--"
arg	154:38	154:44	7	stream
water	154:38	0:0	8	stream
water	154:45	0:0	6	;
break	155:16	155:21	6	
water	156:12	0:0	6	case
water	156:17	0:0	6	'N'
water	156:20	0:0	6	:
water	157:16	0:0	6	if
water	157:19	0:0	6	(
water	157:20	0:0	6	item
op	157:25	0:0	6	!=
water	157:28	0:0	6	NULL
water	157:32	0:0	6	)
water	158:16	0:0	6	{
water	159:20	0:0	6	char
op	159:25	0:0	6	*
water	159:26	0:0	6	name
op	159:31	0:0	6	=
call	159:33	159:56	6	input_item_GetName
arg	159:52	159:56	7	item
water	159:52	0:0	8	item
water	159:57	0:0	6	;
water	160:20	0:0	6	if
water	160:23	0:0	6	(
water	160:24	0:0	6	name
op	160:29	0:0	6	!=
water	160:32	0:0	6	NULL
water	160:36	0:0	6	)
water	161:20	0:0	6	{
call	162:24	162:42	6	fputs
arg	162:30	162:34	7	name
water	162:30	0:0	8	name
arg	162:36	162:42	7	stream
water	162:36	0:0	8	stream
water	162:43	0:0	6	;
call	163:24	163:33	6	free
arg	163:29	163:33	7	name
water	163:29	0:0	8	name
water	163:34	0:0	6	;
water	164:20	0:0	6	}
water	165:16	0:0	6	}
water	166:16	0:0	6	break
water	166:21	0:0	6	;
water	167:12	0:0	6	case
water	167:17	0:0	6	'O'
water	167:20	0:0	6	:
water	168:12	0:0	6	{
water	169:16	0:0	6	char
op	169:21	0:0	6	*
water	169:22	0:0	6	lang
op	169:27	0:0	6	=
water	169:29	0:0	6	NULL
water	169:33	0:0	6	;
water	170:16	0:0	6	if
water	170:19	0:0	6	(
water	170:20	0:0	6	input
op	170:26	0:0	6	!=
water	170:29	0:0	6	NULL
water	170:33	0:0	6	)
water	171:20	0:0	6	lang
op	171:25	0:0	6	=
call	171:27	171:72	6	var_GetNonEmptyString
arg	171:49	171:54	7	input
water	171:49	0:0	8	input
arg	171:56	171:72	7	"audio-language"
water	171:56	0:0	8	"audio-language"
water	171:73	0:0	6	;
water	172:16	0:0	6	if
water	172:19	0:0	6	(
water	172:20	0:0	6	lang
op	172:25	0:0	6	!=
water	172:28	0:0	6	NULL
water	172:32	0:0	6	)
water	173:16	0:0	6	{
call	174:20	174:38	6	fputs
arg	174:26	174:30	7	lang
water	174:26	0:0	8	lang
arg	174:32	174:38	7	stream
water	174:32	0:0	8	stream
water	174:39	0:0	6	;
call	175:20	175:29	6	free
arg	175:25	175:29	7	lang
water	175:25	0:0	8	lang
water	175:30	0:0	6	;
water	176:16	0:0	6	}
water	177:16	0:0	6	else
water	177:21	0:0	6	if
water	177:24	0:0	6	(
op	177:25	0:0	6	!
water	177:26	0:0	6	b_empty_if_na
water	177:39	0:0	6	)
call	178:20	178:37	6	fputc
arg	178:26	178:29	7	'-'
water	178:26	0:0	8	'-'
arg	178:31	178:37	7	stream
water	178:31	0:0	8	stream
water	178:38	0:0	6	;
water	179:16	0:0	6	break
water	179:21	0:0	6	;
water	180:12	0:0	6	}
water	181:12	0:0	6	case
water	181:17	0:0	6	'P'
water	181:20	0:0	6	:
water	182:16	0:0	6	if
water	182:19	0:0	6	(
water	182:20	0:0	6	input
op	182:26	0:0	6	!=
water	182:29	0:0	6	NULL
water	182:33	0:0	6	)
call	183:20	184:67	6	fprintf
arg	183:28	183:34	7	stream
water	183:28	0:0	8	stream
arg	183:36	183:43	7	"%2.1f"
water	183:36	0:0	8	"%2.1f"
arg	184:28	184:67	7	var_GetFloat(input,"position")*100.f
call	184:28	184:58	8	var_GetFloat
arg	184:41	184:46	9	input
water	184:41	0:0	10	input
arg	184:48	184:58	9	"position"
water	184:48	0:0	10	"position"
op	184:60	0:0	8	*
water	184:62	0:0	8	100
op	184:65	0:0	8	.
water	184:66	0:0	8	f
water	184:68	0:0	6	;
else	185:16	186:42	6
stmts	185:21	186:42	7	
if	185:21	186:42	8	(! b_empty_if_na)
cond	185:25	185:26	9	! b_empty_if_na
op	185:25	0:0	10	!
water	185:26	0:0	10	b_empty_if_na
stmts	186:20	186:42	9	
call	186:20	186:41	10	fputs
arg	186:26	186:33	11	"--.-%"
water	186:26	0:0	12	"--.-%"
arg	186:35	186:41	11	stream
water	186:35	0:0	12	stream
water	186:42	0:0	10	;
break	187:16	187:21	6	
water	188:12	0:0	6	case
water	188:17	0:0	6	'R'
water	188:20	0:0	6	:
water	189:16	0:0	6	if
water	189:19	0:0	6	(
water	189:20	0:0	6	input
op	189:26	0:0	6	!=
water	189:29	0:0	6	NULL
water	189:33	0:0	6	)
call	190:20	190:71	6	fprintf
arg	190:28	190:34	7	stream
water	190:28	0:0	8	stream
arg	190:36	190:42	7	"%.3f"
water	190:36	0:0	8	"%.3f"
arg	190:44	190:71	7	var_GetFloat(input,"rate")
call	190:44	190:70	8	var_GetFloat
arg	190:57	190:62	9	input
water	190:57	0:0	10	input
arg	190:64	190:70	9	"rate"
water	190:64	0:0	10	"rate"
water	190:72	0:0	6	;
else	191:16	192:38	6
stmts	191:21	192:38	7	
if	191:21	192:38	8	(! b_empty_if_na)
cond	191:25	191:26	9	! b_empty_if_na
op	191:25	0:0	10	!
water	191:26	0:0	10	b_empty_if_na
stmts	192:20	192:38	9	
call	192:20	192:37	10	fputc
arg	192:26	192:29	11	'-'
water	192:26	0:0	12	'-'
arg	192:31	192:37	11	stream
water	192:31	0:0	12	stream
water	192:38	0:0	10	;
break	193:16	193:21	6	
water	194:12	0:0	6	case
water	194:17	0:0	6	'S'
water	194:20	0:0	6	:
water	195:16	0:0	6	if
water	195:19	0:0	6	(
water	195:20	0:0	6	input
op	195:26	0:0	6	!=
water	195:29	0:0	6	NULL
water	195:33	0:0	6	)
water	196:16	0:0	6	{
water	197:20	0:0	6	int
water	197:24	0:0	6	rate
op	197:29	0:0	6	=
call	197:31	197:66	6	var_GetInteger
arg	197:46	197:51	7	input
water	197:46	0:0	8	input
arg	197:53	197:66	7	"sample-rate"
water	197:53	0:0	8	"sample-rate"
water	197:67	0:0	6	;
water	198:20	0:0	6	div_t
water	198:26	0:0	6	dr
op	198:29	0:0	6	=
call	198:31	198:56	6	div
arg	198:35	198:52	7	(rate+50)/100
water	198:35	0:0	8	(
water	198:36	0:0	8	rate
op	198:41	0:0	8	+
water	198:43	0:0	8	50
water	198:45	0:0	8	)
op	198:47	0:0	8	/
water	198:49	0:0	8	100
arg	198:54	198:56	7	10
water	198:54	0:0	8	10
water	198:57	0:0	6	;
call	199:20	199:62	6	fprintf
arg	199:28	199:34	7	stream
water	199:28	0:0	8	stream
arg	199:36	199:45	7	"%d.%01d"
water	199:36	0:0	8	"%d.%01d"
arg	199:47	199:54	7	dr.quot
water	199:47	0:0	8	dr
op	199:49	0:0	8	.
water	199:50	0:0	8	quot
arg	199:56	199:62	7	dr.rem
water	199:56	0:0	8	dr
op	199:58	0:0	8	.
water	199:59	0:0	8	rem
water	199:63	0:0	6	;
water	200:16	0:0	6	}
water	201:16	0:0	6	else
water	201:21	0:0	6	if
water	201:24	0:0	6	(
op	201:25	0:0	6	!
water	201:26	0:0	6	b_empty_if_na
water	201:39	0:0	6	)
call	202:20	202:37	6	fputc
arg	202:26	202:29	7	'-'
water	202:26	0:0	8	'-'
arg	202:31	202:37	7	stream
water	202:31	0:0	8	stream
water	202:38	0:0	6	;
break	203:16	203:21	6	
water	204:12	0:0	6	case
water	204:17	0:0	6	'T'
water	204:20	0:0	6	:
water	205:16	0:0	6	if
water	205:19	0:0	6	(
water	205:20	0:0	6	input
op	205:26	0:0	6	!=
water	205:29	0:0	6	NULL
water	205:33	0:0	6	)
call	206:20	206:69	6	write_duration
arg	206:35	206:41	7	stream
water	206:35	0:0	8	stream
arg	206:43	206:69	7	var_GetTime(input,"time")
call	206:43	206:68	8	var_GetTime
arg	206:55	206:60	9	input
water	206:55	0:0	10	input
arg	206:62	206:68	9	"time"
water	206:62	0:0	10	"time"
water	206:70	0:0	6	;
else	207:16	208:45	6
stmts	207:21	208:45	7	
if	207:21	208:45	8	(! b_empty_if_na)
cond	207:25	207:26	9	! b_empty_if_na
op	207:25	0:0	10	!
water	207:26	0:0	10	b_empty_if_na
stmts	208:20	208:45	9	
call	208:20	208:44	10	fputs
arg	208:26	208:36	11	"--:--:--"
water	208:26	0:0	12	"--:--:--"
arg	208:38	208:44	11	stream
water	208:38	0:0	12	stream
water	208:45	0:0	10	;
break	209:16	209:21	6	
water	210:12	0:0	6	case
water	210:17	0:0	6	'U'
water	210:20	0:0	6	:
call	211:16	211:59	6	write_meta
arg	211:27	211:33	7	stream
water	211:27	0:0	8	stream
arg	211:35	211:39	7	item
water	211:35	0:0	8	item
arg	211:41	211:59	7	vlc_meta_Publisher
water	211:41	0:0	8	vlc_meta_Publisher
water	211:60	0:0	6	;
break	212:16	212:21	6	
water	213:12	0:0	6	case
water	213:17	0:0	6	'V'
water	213:20	0:0	6	:
water	214:12	0:0	6	{
water	215:16	0:0	6	float
water	215:22	0:0	6	vol
op	215:26	0:0	6	=
water	215:28	0:0	6	0
op	215:29	0:0	6	.
water	215:30	0:0	6	f
water	215:31	0:0	6	;
water	216:16	0:0	6	if
water	216:19	0:0	6	(
water	216:20	0:0	6	input
op	216:26	0:0	6	!=
water	216:29	0:0	6	NULL
water	216:33	0:0	6	)
water	217:16	0:0	6	{
water	218:20	0:0	6	audio_output_t
op	218:35	0:0	6	*
water	218:36	0:0	6	aout
op	218:41	0:0	6	=
call	218:43	218:62	6	input_GetAout
arg	218:57	218:62	7	input
water	218:57	0:0	8	input
water	218:63	0:0	6	;
water	219:20	0:0	6	if
water	219:23	0:0	6	(
water	219:24	0:0	6	aout
op	219:29	0:0	6	!=
water	219:32	0:0	6	NULL
water	219:36	0:0	6	)
water	220:20	0:0	6	{
water	221:24	0:0	6	vol
op	221:28	0:0	6	=
call	221:30	221:49	6	aout_VolumeGet
arg	221:45	221:49	7	aout
water	221:45	0:0	8	aout
water	221:50	0:0	6	;
call	222:24	222:47	6	vlc_object_release
arg	222:43	222:47	7	aout
water	222:43	0:0	8	aout
water	222:48	0:0	6	;
water	223:20	0:0	6	}
water	224:16	0:0	6	}
water	225:16	0:0	6	if
water	225:19	0:0	6	(
water	225:20	0:0	6	vol
op	225:24	0:0	6	>=
water	225:27	0:0	6	0
op	225:28	0:0	6	.
water	225:29	0:0	6	f
water	225:30	0:0	6	)
call	226:20	226:63	6	fprintf
arg	226:28	226:34	7	stream
water	226:28	0:0	8	stream
arg	226:36	226:41	7	"%ld"
water	226:36	0:0	8	"%ld"
arg	226:43	226:63	7	lroundf(vol*256.f)
call	226:43	226:62	8	lroundf
arg	226:51	226:62	9	vol*256.f
water	226:51	0:0	10	vol
op	226:55	0:0	10	*
water	226:57	0:0	10	256
op	226:60	0:0	10	.
water	226:61	0:0	10	f
water	226:64	0:0	6	;
water	227:16	0:0	6	else
water	227:21	0:0	6	if
water	227:24	0:0	6	(
op	227:25	0:0	6	!
water	227:26	0:0	6	b_empty_if_na
water	227:39	0:0	6	)
call	228:20	228:39	6	fputs
arg	228:26	228:31	7	"---"
water	228:26	0:0	8	"---"
arg	228:33	228:39	7	stream
water	228:33	0:0	8	stream
water	228:40	0:0	6	;
water	229:16	0:0	6	break
water	229:21	0:0	6	;
water	230:12	0:0	6	}
water	231:12	0:0	6	case
water	231:17	0:0	6	'_'
water	231:20	0:0	6	:
call	232:16	232:34	6	fputc
arg	232:22	232:26	7	'\n'
water	232:22	0:0	8	'\n'
arg	232:28	232:34	7	stream
water	232:28	0:0	8	stream
water	232:35	0:0	6	;
break	233:16	233:21	6	
water	234:12	0:0	6	case
water	234:17	0:0	6	'Z'
water	234:20	0:0	6	:
water	235:16	0:0	6	if
water	235:19	0:0	6	(
water	235:20	0:0	6	item
op	235:25	0:0	6	==
water	235:28	0:0	6	NULL
water	235:32	0:0	6	)
water	236:20	0:0	6	break
water	236:25	0:0	6	;
water	237:16	0:0	6	{
decl	238:20	238:66	6	char	*value
op	238:32	0:0	6	=
call	238:34	238:65	7	input_item_GetNowPlayingFb
arg	238:61	238:65	8	item
water	238:61	0:0	9	item
if	239:20	243:20	6	(value != NULL)
cond	239:24	239:33	7	value != NULL
water	239:24	0:0	8	value
op	239:30	0:0	8	!=
water	239:33	0:0	8	NULL
stmts	240:20	243:20	7	
water	240:20	0:0	8	{
call	241:24	241:43	8	fputs
arg	241:30	241:35	9	value
water	241:30	0:0	10	value
arg	241:37	241:43	9	stream
water	241:37	0:0	10	stream
water	241:44	0:0	8	;
call	242:24	242:34	8	free
arg	242:29	242:34	9	value
water	242:29	0:0	10	value
water	242:35	0:0	8	;
water	243:20	0:0	8	}
else	244:20	255:20	6
stmts	245:20	255:20	7	
water	245:20	0:0	8	{
decl	246:24	246:69	8	char	*title
op	246:36	0:0	8	=
call	246:38	246:68	9	input_item_GetTitleFbName
arg	246:64	246:68	10	item
water	246:64	0:0	11	item
if	247:24	249:48	8	(write_meta (stream ,item ,vlc_meta_Artist ) >= 0 && title != NULL)
cond	247:28	248:40	9	write_meta (stream ,item ,vlc_meta_Artist ) >= 0 && title != NULL
call	247:28	247:68	10	write_meta
arg	247:39	247:45	11	stream
water	247:39	0:0	12	stream
arg	247:47	247:51	11	item
water	247:47	0:0	12	item
arg	247:53	247:68	11	vlc_meta_Artist
water	247:53	0:0	12	vlc_meta_Artist
op	247:70	0:0	10	>=
water	247:73	0:0	10	0
op	248:28	0:0	10	&&
water	248:31	0:0	10	title
op	248:37	0:0	10	!=
water	248:40	0:0	10	NULL
stmts	249:28	249:48	9	
call	249:28	249:47	10	fputs
arg	249:34	249:39	11	" - "
water	249:34	0:0	12	" - "
arg	249:41	249:47	11	stream
water	249:41	0:0	12	stream
water	249:48	0:0	10	;
if	250:24	254:24	8	(title != NULL)
cond	250:28	250:37	9	title != NULL
water	250:28	0:0	10	title
op	250:34	0:0	10	!=
water	250:37	0:0	10	NULL
stmts	251:24	254:24	9	
water	251:24	0:0	10	{
call	252:28	252:47	10	fputs
arg	252:34	252:39	11	title
water	252:34	0:0	12	title
arg	252:41	252:47	11	stream
water	252:41	0:0	12	stream
water	252:48	0:0	10	;
call	253:28	253:38	10	free
arg	253:33	253:38	11	title
water	253:33	0:0	12	title
water	253:39	0:0	10	;
water	254:24	0:0	10	}
water	255:20	0:0	8	}
water	256:16	0:0	6	}
break	257:16	257:21	6	
water	258:12	0:0	6	case
water	258:17	0:0	6	' '
water	258:20	0:0	6	:
water	259:16	0:0	6	b_empty_if_na
op	259:30	0:0	6	=
water	259:32	0:0	6	true
water	259:36	0:0	6	;
water	260:16	0:0	6	b_is_format
op	260:28	0:0	6	=
water	260:30	0:0	6	true
water	260:34	0:0	6	;
break	261:16	261:21	6	
label	262:12	262:19	6	default :
call	263:16	263:31	6	fputc
arg	263:22	263:23	7	c
water	263:22	0:0	8	c
arg	263:25	263:31	7	stream
water	263:25	0:0	8	stream
water	263:32	0:0	6	;
break	264:16	264:21	6	
water	265:8	0:0	6	}
water	266:4	0:0	4	}
return	268:4	268:45	2	(fclose(stream)==0)?str:NULL
water	268:11	0:0	3	(
call	268:12	268:25	3	fclose
arg	268:19	268:25	4	stream
water	268:19	0:0	5	stream
op	268:27	0:0	3	==
water	268:30	0:0	3	0
water	268:31	0:0	3	)
water	268:33	0:0	3	?
water	268:35	0:0	3	str
water	268:39	0:0	3	:
water	268:41	0:0	3	NULL
water	270:4	0:0	2	len
op	270:8	0:0	2	=
call	270:10	270:22	2	ftell
arg	270:16	270:22	3	stream
water	270:16	0:0	4	stream
water	270:23	0:0	2	;
if	271:4	277:4	2	(len != ( size_t ) - 1)
cond	271:8	271:24	3	len != ( size_t ) - 1
water	271:8	0:0	4	len
op	271:12	0:0	4	!=
water	271:15	0:0	4	(
water	271:16	0:0	4	size_t
water	271:22	0:0	4	)
op	271:23	0:0	4	-
water	271:24	0:0	4	1
stmts	272:4	277:4	3	
water	272:4	0:0	4	{
call	273:8	273:21	4	rewind
arg	273:15	273:21	5	stream
water	273:15	0:0	6	stream
water	273:22	0:0	4	;
water	274:8	0:0	4	str
op	274:12	0:0	4	=
call	274:14	274:29	4	xmalloc
arg	274:22	274:29	5	len+1
water	274:22	0:0	6	len
op	274:26	0:0	6	+
water	274:28	0:0	6	1
water	274:30	0:0	4	;
call	275:8	275:33	4	fread
arg	275:14	275:17	5	str
water	275:14	0:0	6	str
arg	275:19	275:22	5	len
water	275:19	0:0	6	len
arg	275:24	275:25	5	1
water	275:24	0:0	6	1
arg	275:27	275:33	5	stream
water	275:27	0:0	6	stream
water	275:34	0:0	4	;
water	276:8	0:0	4	str
op	276:11	0:0	4	[
water	276:12	0:0	4	len
op	276:15	0:0	4	]
op	276:17	0:0	4	=
water	276:19	0:0	4	'\0'
water	276:23	0:0	4	;
water	277:4	0:0	4	}
else	278:4	279:18	2
stmts	279:8	279:18	3	
water	279:8	0:0	4	str
op	279:12	0:0	4	=
water	279:14	0:0	4	NULL
water	279:18	0:0	4	;
call	280:4	280:17	2	fclose
arg	280:11	280:17	3	stream
water	280:11	0:0	4	stream
water	280:18	0:0	2	;
return	281:4	281:14	2	str
water	281:11	0:0	3	str
