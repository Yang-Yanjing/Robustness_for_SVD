func	2:0	59:0	0	int	en50221_SetCAPMT
params	2:20	0:0	1	
param	2:22	2:35	2	cam_t *	p_cam
param	2:37	2:57	2	dvbpsi_pmt_t *	p_pmt
stmnts	0:0	58:22	1	
decl	4:4	4:25	2	bool	b_update
op	4:18	0:0	2	=
water	4:20	0:0	2	false
decl	5:4	5:63	2	bool	b_needs_descrambling
op	5:30	0:0	2	=
call	5:32	5:62	3	CAPMTNeedsDescrambling
arg	5:56	5:62	4	p_pmt
water	5:56	0:0	5	p_pmt
for	6:4	26:4	2	(unsigned i = 0 ;i < MAX_PROGRAMS;i ++)
forinit	6:10	6:24	3	unsigned i = 0 ;
water	6:10	0:0	4	unsigned
water	6:19	0:0	4	i
op	6:21	0:0	4	=
water	6:23	0:0	4	0
water	6:24	0:0	4	;
cond	6:26	6:30	3	i < MAX_PROGRAMS
water	6:26	0:0	4	i
op	6:28	0:0	4	<
water	6:30	0:0	4	MAX_PROGRAMS
forexpr	6:44	6:45	3	i ++
water	6:44	0:0	4	i
op	6:45	0:0	4	++
stmts	7:4	26:4	3	
water	7:4	0:0	4	{
if	8:8	25:8	4	(p_cam -> pp_selected_programs [ i ] != NULL && p_cam -> pp_selected_programs [ i ] -> i_program_number == p_pmt -> i_program_number)
cond	8:13	10:28	5	p_cam -> pp_selected_programs [ i ] != NULL && p_cam -> pp_selected_programs [ i ] -> i_program_number == p_pmt -> i_program_number
water	8:13	0:0	6	p_cam
op	8:18	0:0	6	->
water	8:20	0:0	6	pp_selected_programs
op	8:40	0:0	6	[
water	8:41	0:0	6	i
op	8:42	0:0	6	]
op	8:44	0:0	6	!=
water	8:47	0:0	6	NULL
op	9:14	0:0	6	&&
water	9:17	0:0	6	p_cam
op	9:22	0:0	6	->
water	9:24	0:0	6	pp_selected_programs
op	9:44	0:0	6	[
water	9:45	0:0	6	i
op	9:46	0:0	6	]
op	9:47	0:0	6	->
water	9:49	0:0	6	i_program_number
op	10:18	0:0	6	==
water	10:21	0:0	6	p_pmt
op	10:26	0:0	6	->
water	10:28	0:0	6	i_program_number
stmts	11:8	25:8	5	
water	11:8	0:0	6	{
water	12:12	0:0	6	b_update
op	12:21	0:0	6	=
water	12:23	0:0	6	true
water	12:27	0:0	6	;
if	13:12	18:12	6	(! b_needs_descrambling)
cond	13:17	13:18	7	! b_needs_descrambling
op	13:17	0:0	8	!
water	13:18	0:0	8	b_needs_descrambling
stmts	14:12	18:12	7	
water	14:12	0:0	8	{
call	15:16	15:40	8	dvbpsi_DeletePMT
arg	15:34	15:40	9	p_pmt
water	15:34	0:0	10	p_pmt
water	15:41	0:0	8	;
water	16:16	0:0	8	p_pmt
op	16:22	0:0	8	=
water	16:24	0:0	8	p_cam
op	16:29	0:0	8	->
water	16:31	0:0	8	pp_selected_programs
op	16:51	0:0	8	[
water	16:52	0:0	8	i
op	16:53	0:0	8	]
water	16:54	0:0	8	;
water	17:16	0:0	8	p_cam
op	17:21	0:0	8	->
water	17:23	0:0	8	pp_selected_programs
op	17:43	0:0	8	[
water	17:44	0:0	8	i
op	17:45	0:0	8	]
op	17:47	0:0	8	=
water	17:49	0:0	8	NULL
water	17:53	0:0	8	;
water	18:12	0:0	8	}
else	19:12	23:12	6
stmts	19:17	23:12	7	
if	19:17	23:12	8	(p_pmt != p_cam -> pp_selected_programs [ i ])
cond	19:21	19:59	9	p_pmt != p_cam -> pp_selected_programs [ i ]
water	19:21	0:0	10	p_pmt
op	19:27	0:0	10	!=
water	19:30	0:0	10	p_cam
op	19:35	0:0	10	->
water	19:37	0:0	10	pp_selected_programs
op	19:57	0:0	10	[
water	19:58	0:0	10	i
op	19:59	0:0	10	]
stmts	20:12	23:12	9	
water	20:12	0:0	10	{
call	21:16	21:65	10	dvbpsi_DeletePMT
arg	21:34	21:65	11	p_cam->pp_selected_programs[i]
water	21:34	0:0	12	p_cam
op	21:39	0:0	12	->
water	21:41	0:0	12	pp_selected_programs
op	21:61	0:0	12	[
water	21:62	0:0	12	i
op	21:63	0:0	12	]
water	21:66	0:0	10	;
water	22:16	0:0	10	p_cam
op	22:21	0:0	10	->
water	22:23	0:0	10	pp_selected_programs
op	22:43	0:0	10	[
water	22:44	0:0	10	i
op	22:45	0:0	10	]
op	22:47	0:0	10	=
water	22:49	0:0	10	p_pmt
water	22:54	0:0	10	;
water	23:12	0:0	10	}
break	24:12	24:17	6	
water	25:8	0:0	6	}
water	26:4	0:0	4	}
if	27:4	37:4	2	(! b_update && b_needs_descrambling)
cond	27:9	27:22	3	! b_update && b_needs_descrambling
op	27:9	0:0	4	!
water	27:10	0:0	4	b_update
op	27:19	0:0	4	&&
water	27:22	0:0	4	b_needs_descrambling
stmts	28:4	37:4	3	
water	28:4	0:0	4	{
for	29:8	36:8	4	(unsigned i = 0 ;i < MAX_PROGRAMS;i ++)
forinit	29:14	29:28	5	unsigned i = 0 ;
water	29:14	0:0	6	unsigned
water	29:23	0:0	6	i
op	29:25	0:0	6	=
water	29:27	0:0	6	0
water	29:28	0:0	6	;
cond	29:30	29:34	5	i < MAX_PROGRAMS
water	29:30	0:0	6	i
op	29:32	0:0	6	<
water	29:34	0:0	6	MAX_PROGRAMS
forexpr	29:48	29:49	5	i ++
water	29:48	0:0	6	i
op	29:49	0:0	6	++
stmts	30:8	36:8	5	
water	30:8	0:0	6	{
if	31:12	35:12	6	(p_cam -> pp_selected_programs [ i ] == NULL)
cond	31:17	31:51	7	p_cam -> pp_selected_programs [ i ] == NULL
water	31:17	0:0	8	p_cam
op	31:22	0:0	8	->
water	31:24	0:0	8	pp_selected_programs
op	31:44	0:0	8	[
water	31:45	0:0	8	i
op	31:46	0:0	8	]
op	31:48	0:0	8	==
water	31:51	0:0	8	NULL
stmts	32:12	35:12	7	
water	32:12	0:0	8	{
water	33:16	0:0	8	p_cam
op	33:21	0:0	8	->
water	33:23	0:0	8	pp_selected_programs
op	33:43	0:0	8	[
water	33:44	0:0	8	i
op	33:45	0:0	8	]
op	33:47	0:0	8	=
water	33:49	0:0	8	p_pmt
water	33:54	0:0	8	;
break	34:16	34:21	8	
water	35:12	0:0	8	}
water	36:8	0:0	6	}
water	37:4	0:0	4	}
if	38:4	53:4	2	(b_update || b_needs_descrambling)
cond	38:9	38:21	3	b_update || b_needs_descrambling
water	38:9	0:0	4	b_update
op	38:18	0:0	4	||
water	38:21	0:0	4	b_needs_descrambling
stmts	39:4	53:4	3	
water	39:4	0:0	4	{
for	40:8	52:8	4	(unsigned i = 1 ;i <= MAX_SESSIONS;i ++)
forinit	40:14	40:28	5	unsigned i = 1 ;
water	40:14	0:0	6	unsigned
water	40:23	0:0	6	i
op	40:25	0:0	6	=
water	40:27	0:0	6	1
water	40:28	0:0	6	;
cond	40:30	40:35	5	i <= MAX_SESSIONS
water	40:30	0:0	6	i
op	40:32	0:0	6	<=
water	40:35	0:0	6	MAX_SESSIONS
forexpr	40:49	40:50	5	i ++
water	40:49	0:0	6	i
op	40:50	0:0	6	++
stmts	41:8	52:8	5	
water	41:8	0:0	6	{
if	42:12	51:12	6	(p_cam -> p_sessions [ i - 1 ] . i_resource_id == RI_CONDITIONAL_ACCESS_SUPPORT)
cond	42:17	43:23	7	p_cam -> p_sessions [ i - 1 ] . i_resource_id == RI_CONDITIONAL_ACCESS_SUPPORT
water	42:17	0:0	8	p_cam
op	42:22	0:0	8	->
water	42:24	0:0	8	p_sessions
op	42:34	0:0	8	[
water	42:35	0:0	8	i
op	42:37	0:0	8	-
water	42:39	0:0	8	1
op	42:40	0:0	8	]
op	42:41	0:0	8	.
water	42:42	0:0	8	i_resource_id
op	43:20	0:0	8	==
water	43:23	0:0	8	RI_CONDITIONAL_ACCESS_SUPPORT
stmts	44:12	51:12	7	
water	44:12	0:0	8	{
if	45:16	46:50	8	(b_update && b_needs_descrambling)
cond	45:21	45:33	9	b_update && b_needs_descrambling
water	45:21	0:0	10	b_update
op	45:30	0:0	10	&&
water	45:33	0:0	10	b_needs_descrambling
stmts	46:20	46:50	9	
call	46:20	46:49	10	CAPMTUpdate
arg	46:33	46:38	11	p_cam
water	46:33	0:0	12	p_cam
arg	46:40	46:41	11	i
water	46:40	0:0	12	i
arg	46:43	46:49	11	p_pmt
water	46:43	0:0	12	p_pmt
water	46:50	0:0	10	;
else	47:16	48:50	8
stmts	47:21	48:50	9	
if	47:21	48:50	10	(b_update)
cond	47:26	47:26	11	b_update
water	47:26	0:0	12	b_update
stmts	48:20	48:50	11	
call	48:20	48:49	12	CAPMTDelete
arg	48:33	48:38	13	p_cam
water	48:33	0:0	14	p_cam
arg	48:40	48:41	13	i
water	48:40	0:0	14	i
arg	48:43	48:49	13	p_pmt
water	48:43	0:0	14	p_pmt
water	48:50	0:0	12	;
else	49:16	50:47	8
stmts	50:20	50:47	9	
call	50:20	50:46	10	CAPMTAdd
arg	50:30	50:35	11	p_cam
water	50:30	0:0	12	p_cam
arg	50:37	50:38	11	i
water	50:37	0:0	12	i
arg	50:40	50:46	11	p_pmt
water	50:40	0:0	12	p_pmt
water	50:47	0:0	10	;
water	51:12	0:0	8	}
water	52:8	0:0	6	}
water	53:4	0:0	4	}
if	54:4	57:4	2	(! b_needs_descrambling)
cond	54:9	54:10	3	! b_needs_descrambling
op	54:9	0:0	4	!
water	54:10	0:0	4	b_needs_descrambling
stmts	55:4	57:4	3	
water	55:4	0:0	4	{
call	56:8	56:32	4	dvbpsi_DeletePMT
arg	56:26	56:32	5	p_pmt
water	56:26	0:0	6	p_pmt
water	56:33	0:0	4	;
water	57:4	0:0	4	}
return	58:4	58:22	2	VLC_SUCCESS
water	58:11	0:0	3	VLC_SUCCESS
