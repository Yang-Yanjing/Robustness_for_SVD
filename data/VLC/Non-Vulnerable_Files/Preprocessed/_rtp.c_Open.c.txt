func	2:0	215:0	0	static int	Open
params	2:15	0:0	1	
param	2:17	2:38	2	vlc_object_t *	p_this
stmnts	0:0	214:22	1	
decl	4:4	4:58	2	sout_stream_t	*p_stream
op	4:34	0:0	2	=
water	4:36	0:0	2	(
water	4:37	0:0	2	sout_stream_t
op	4:50	0:0	2	*
water	4:51	0:0	2	)
water	4:52	0:0	2	p_this
decl	5:4	5:37	2	sout_stream_sys_t	*p_sys
op	5:31	0:0	2	=
water	5:33	0:0	2	NULL
decl	6:4	6:37	2	config_chain_t	*p_cfg
op	6:31	0:0	2	=
water	6:33	0:0	2	NULL
decl	7:4	7:28	2	char	*psz
decl	8:4	8:32	2	bool	b_rtsp
op	8:25	0:0	2	=
water	8:27	0:0	2	false
call	9:4	10:58	2	config_ChainParse
arg	9:23	9:31	3	p_stream
water	9:23	0:0	4	p_stream
arg	9:33	9:48	3	SOUT_CFG_PREFIX
water	9:33	0:0	4	SOUT_CFG_PREFIX
arg	10:23	10:40	3	ppsz_sout_options
water	10:23	0:0	4	ppsz_sout_options
arg	10:42	10:58	3	p_stream->p_cfg
water	10:42	0:0	4	p_stream
op	10:50	0:0	4	->
water	10:52	0:0	4	p_cfg
water	10:59	0:0	2	;
water	11:4	0:0	2	p_sys
op	11:10	0:0	2	=
call	11:12	11:48	2	malloc
arg	11:20	11:48	3	sizeof(sout_stream_sys_t)
op	11:20	0:0	4	sizeof
water	11:26	0:0	4	(
water	11:28	0:0	4	sout_stream_sys_t
water	11:46	0:0	4	)
water	11:49	0:0	2	;
if	12:4	13:25	2	(p_sys == NULL)
cond	12:8	12:17	3	p_sys == NULL
water	12:8	0:0	4	p_sys
op	12:14	0:0	4	==
water	12:17	0:0	4	NULL
stmts	13:8	13:25	3	
return	13:8	13:25	4	VLC_ENOMEM
water	13:15	0:0	5	VLC_ENOMEM
water	14:4	0:0	2	p_sys
op	14:9	0:0	2	->
water	14:11	0:0	2	psz_destination
op	14:27	0:0	2	=
call	14:29	14:84	2	var_GetNonEmptyString
arg	14:52	14:60	3	p_stream
water	14:52	0:0	4	p_stream
arg	14:62	14:84	3	SOUT_CFG_PREFIX"dst"
water	14:62	0:0	4	SOUT_CFG_PREFIX
water	14:78	0:0	4	"dst"
water	14:85	0:0	2	;
water	15:4	0:0	2	p_sys
op	15:9	0:0	2	->
water	15:11	0:0	2	i_port
op	15:24	0:0	2	=
call	15:26	15:75	2	var_GetInteger
arg	15:42	15:50	3	p_stream
water	15:42	0:0	4	p_stream
arg	15:52	15:75	3	SOUT_CFG_PREFIX"port"
water	15:52	0:0	4	SOUT_CFG_PREFIX
water	15:68	0:0	4	"port"
water	15:76	0:0	2	;
water	16:4	0:0	2	p_sys
op	16:9	0:0	2	->
water	16:11	0:0	2	i_port_audio
op	16:24	0:0	2	=
call	16:26	16:81	2	var_GetInteger
arg	16:42	16:50	3	p_stream
water	16:42	0:0	4	p_stream
arg	16:52	16:81	3	SOUT_CFG_PREFIX"port-audio"
water	16:52	0:0	4	SOUT_CFG_PREFIX
water	16:68	0:0	4	"port-audio"
water	16:82	0:0	2	;
water	17:4	0:0	2	p_sys
op	17:9	0:0	2	->
water	17:11	0:0	2	i_port_video
op	17:24	0:0	2	=
call	17:26	17:81	2	var_GetInteger
arg	17:42	17:50	3	p_stream
water	17:42	0:0	4	p_stream
arg	17:52	17:81	3	SOUT_CFG_PREFIX"port-video"
water	17:52	0:0	4	SOUT_CFG_PREFIX
water	17:68	0:0	4	"port-video"
water	17:82	0:0	2	;
water	18:4	0:0	2	p_sys
op	18:9	0:0	2	->
water	18:11	0:0	2	rtcp_mux
op	18:24	0:0	2	=
call	18:26	18:76	2	var_GetBool
arg	18:39	18:47	3	p_stream
water	18:39	0:0	4	p_stream
arg	18:49	18:76	3	SOUT_CFG_PREFIX"rtcp-mux"
water	18:49	0:0	4	SOUT_CFG_PREFIX
water	18:65	0:0	4	"rtcp-mux"
water	18:77	0:0	2	;
if	19:4	25:4	2	(p_sys -> i_port_audio && p_sys -> i_port_video == p_sys -> i_port_audio)
cond	19:8	19:61	3	p_sys -> i_port_audio && p_sys -> i_port_video == p_sys -> i_port_audio
water	19:8	0:0	4	p_sys
op	19:13	0:0	4	->
water	19:15	0:0	4	i_port_audio
op	19:28	0:0	4	&&
water	19:31	0:0	4	p_sys
op	19:36	0:0	4	->
water	19:38	0:0	4	i_port_video
op	19:51	0:0	4	==
water	19:54	0:0	4	p_sys
op	19:59	0:0	4	->
water	19:61	0:0	4	i_port_audio
stmts	20:4	25:4	3	
water	20:4	0:0	4	{
call	21:8	21:71	4	msg_Err
arg	21:17	21:25	5	p_stream
water	21:17	0:0	6	p_stream
arg	21:27	21:71	5	"audio and video RTP port must be distinct"
water	21:27	0:0	6	"audio and video RTP port must be distinct"
water	21:72	0:0	4	;
call	22:8	22:37	4	free
arg	22:14	22:37	5	p_sys->psz_destination
water	22:14	0:0	6	p_sys
op	22:19	0:0	6	->
water	22:21	0:0	6	psz_destination
water	22:38	0:0	4	;
call	23:8	23:20	4	free
arg	23:14	23:20	5	p_sys
water	23:14	0:0	6	p_sys
water	23:21	0:0	4	;
return	24:8	24:27	4	VLC_EGENERIC
water	24:15	0:0	5	VLC_EGENERIC
water	25:4	0:0	4	}
for	26:4	35:4	2	(p_cfg = p_stream -> p_cfg ;p_cfg != NULL;p_cfg = p_cfg -> p_next)
forinit	26:9	26:32	3	p_cfg = p_stream -> p_cfg ;
water	26:9	0:0	4	p_cfg
op	26:15	0:0	4	=
water	26:17	0:0	4	p_stream
op	26:25	0:0	4	->
water	26:27	0:0	4	p_cfg
water	26:32	0:0	4	;
cond	26:34	26:43	3	p_cfg != NULL
water	26:34	0:0	4	p_cfg
op	26:40	0:0	4	!=
water	26:43	0:0	4	NULL
forexpr	26:49	26:64	3	p_cfg = p_cfg -> p_next
water	26:49	0:0	4	p_cfg
op	26:55	0:0	4	=
water	26:57	0:0	4	p_cfg
op	26:62	0:0	4	->
water	26:64	0:0	4	p_next
stmts	27:4	35:4	3	
water	27:4	0:0	4	{
if	28:8	34:8	4	(!strcmp (p_cfg -> psz_name ,"sdp" ) && ( p_cfg -> psz_value != NULL ) && !strncasecmp (p_cfg -> psz_value ,"rtsp:" ,5 ))
cond	28:12	30:55	5	!strcmp (p_cfg -> psz_name ,"sdp" ) && ( p_cfg -> psz_value != NULL ) && !strncasecmp (p_cfg -> psz_value ,"rtsp:" ,5 )
op	28:12	0:0	6	!
call	28:13	28:44	6	strcmp
arg	28:21	28:36	7	p_cfg->psz_name
water	28:21	0:0	8	p_cfg
op	28:26	0:0	8	->
water	28:28	0:0	8	psz_name
arg	28:38	28:44	7	"sdp"
water	28:38	0:0	8	"sdp"
op	29:9	0:0	6	&&
water	29:12	0:0	6	(
water	29:14	0:0	6	p_cfg
op	29:19	0:0	6	->
water	29:21	0:0	6	psz_value
op	29:31	0:0	6	!=
water	29:34	0:0	6	NULL
water	29:39	0:0	6	)
op	30:9	0:0	6	&&
op	30:12	0:0	6	!
call	30:13	30:55	6	strncasecmp
arg	30:26	30:42	7	p_cfg->psz_value
water	30:26	0:0	8	p_cfg
op	30:31	0:0	8	->
water	30:33	0:0	8	psz_value
arg	30:44	30:51	7	"rtsp:"
water	30:44	0:0	8	"rtsp:"
arg	30:53	30:55	7	5
water	30:53	0:0	8	5
stmts	31:8	34:8	5	
water	31:8	0:0	6	{
water	32:12	0:0	6	b_rtsp
op	32:19	0:0	6	=
water	32:21	0:0	6	true
water	32:25	0:0	6	;
break	33:12	33:17	6	
water	34:8	0:0	6	}
water	35:4	0:0	4	}
if	36:4	45:4	2	(! b_rtsp)
cond	36:8	36:9	3	! b_rtsp
op	36:8	0:0	4	!
water	36:9	0:0	4	b_rtsp
stmts	37:4	45:4	3	
water	37:4	0:0	4	{
water	38:8	0:0	4	psz
op	38:12	0:0	4	=
call	38:14	38:69	4	var_GetNonEmptyString
arg	38:37	38:45	5	p_stream
water	38:37	0:0	6	p_stream
arg	38:47	38:69	5	SOUT_CFG_PREFIX"sdp"
water	38:47	0:0	6	SOUT_CFG_PREFIX
water	38:63	0:0	6	"sdp"
water	38:70	0:0	4	;
if	39:8	44:8	4	(psz != NULL)
cond	39:12	39:19	5	psz != NULL
water	39:12	0:0	6	psz
op	39:16	0:0	6	!=
water	39:19	0:0	6	NULL
stmts	40:8	44:8	5	
water	40:8	0:0	6	{
if	41:12	42:29	6	(!strncasecmp (psz ,"rtsp:" ,5 ))
cond	41:16	41:46	7	!strncasecmp (psz ,"rtsp:" ,5 )
op	41:16	0:0	8	!
call	41:17	41:46	8	strncasecmp
arg	41:30	41:33	9	psz
water	41:30	0:0	10	psz
arg	41:35	41:42	9	"rtsp:"
water	41:35	0:0	10	"rtsp:"
arg	41:44	41:46	9	5
water	41:44	0:0	10	5
stmts	42:16	42:29	7	
water	42:16	0:0	8	b_rtsp
op	42:23	0:0	8	=
water	42:25	0:0	8	true
water	42:29	0:0	8	;
call	43:12	43:22	6	free
arg	43:18	43:22	7	psz
water	43:18	0:0	8	psz
water	43:23	0:0	6	;
water	44:8	0:0	6	}
water	45:4	0:0	4	}
water	47:4	0:0	2	p_sys
op	47:9	0:0	2	->
water	47:11	0:0	2	proto
op	47:17	0:0	2	=
water	47:19	0:0	2	IPPROTO_UDP
water	47:30	0:0	2	;
water	48:4	0:0	2	psz
op	48:8	0:0	2	=
call	48:10	48:65	2	var_GetNonEmptyString
arg	48:33	48:41	3	p_stream
water	48:33	0:0	4	p_stream
arg	48:43	48:65	3	SOUT_CFG_PREFIX"proto"
water	48:43	0:0	4	SOUT_CFG_PREFIX
water	48:58	0:0	4	"proto"
water	48:66	0:0	2	;
if	49:4	50:15	2	(( psz == NULL ) || !strcasecmp (psz ,"udp" ))
cond	49:8	49:48	3	( psz == NULL ) || !strcasecmp (psz ,"udp" )
water	49:8	0:0	4	(
water	49:9	0:0	4	psz
op	49:13	0:0	4	==
water	49:16	0:0	4	NULL
water	49:20	0:0	4	)
op	49:22	0:0	4	||
op	49:25	0:0	4	!
call	49:26	49:48	4	strcasecmp
arg	49:38	49:41	5	psz
water	49:38	0:0	6	psz
arg	49:43	49:48	5	"udp"
water	49:43	0:0	6	"udp"
stmts	50:8	50:15	3	
water	50:8	0:0	4	(
water	50:9	0:0	4	void
water	50:13	0:0	4	)
water	50:14	0:0	4	0
water	50:15	0:0	4	;
else	51:4	56:4	2
stmts	52:4	56:4	3	
if	52:4	56:4	4	(!strcasecmp (psz ,"dccp" ))
cond	52:8	52:32	5	!strcasecmp (psz ,"dccp" )
op	52:8	0:0	6	!
call	52:9	52:32	6	strcasecmp
arg	52:21	52:24	7	psz
water	52:21	0:0	8	psz
arg	52:26	52:32	7	"dccp"
water	52:26	0:0	8	"dccp"
stmts	53:4	56:4	5	
water	53:4	0:0	6	{
water	54:8	0:0	6	p_sys
op	54:13	0:0	6	->
water	54:15	0:0	6	proto
op	54:21	0:0	6	=
water	54:23	0:0	6	IPPROTO_DCCP
water	54:35	0:0	6	;
water	55:8	0:0	6	p_sys
op	55:13	0:0	6	->
water	55:15	0:0	6	rtcp_mux
op	55:24	0:0	6	=
water	55:26	0:0	6	true
water	55:30	0:0	6	;
water	56:4	0:0	6	}
else	58:4	63:4	2
stmts	59:4	63:4	3	
if	59:4	63:4	4	(!strcasecmp (psz ,"sctp" ))
cond	59:8	59:32	5	!strcasecmp (psz ,"sctp" )
op	59:8	0:0	6	!
call	59:9	59:32	6	strcasecmp
arg	59:21	59:24	7	psz
water	59:21	0:0	8	psz
arg	59:26	59:32	7	"sctp"
water	59:26	0:0	8	"sctp"
stmts	60:4	63:4	5	
water	60:4	0:0	6	{
water	61:8	0:0	6	p_sys
op	61:13	0:0	6	->
water	61:15	0:0	6	proto
op	61:21	0:0	6	=
water	61:23	0:0	6	IPPROTO_TCP
water	61:34	0:0	6	;
water	62:8	0:0	6	p_sys
op	62:13	0:0	6	->
water	62:15	0:0	6	rtcp_mux
op	62:24	0:0	6	=
water	62:26	0:0	6	true
water	62:30	0:0	6	;
water	63:4	0:0	6	}
else	66:4	71:4	2
stmts	67:4	71:4	3	
if	67:4	71:4	4	(!strcasecmp (psz ,"tcp" ))
cond	67:8	67:31	5	!strcasecmp (psz ,"tcp" )
op	67:8	0:0	6	!
call	67:9	67:31	6	strcasecmp
arg	67:21	67:24	7	psz
water	67:21	0:0	8	psz
arg	67:26	67:31	7	"tcp"
water	67:26	0:0	8	"tcp"
stmts	68:4	71:4	5	
water	68:4	0:0	6	{
water	69:8	0:0	6	p_sys
op	69:13	0:0	6	->
water	69:15	0:0	6	proto
op	69:21	0:0	6	=
water	69:23	0:0	6	IPPROTO_TCP
water	69:34	0:0	6	;
water	70:8	0:0	6	p_sys
op	70:13	0:0	6	->
water	70:15	0:0	6	rtcp_mux
op	70:24	0:0	6	=
water	70:26	0:0	6	true
water	70:30	0:0	6	;
water	71:4	0:0	6	}
else	73:4	75:38	2
stmts	74:4	75:38	3	
if	74:4	75:38	4	(!strcasecmp (psz ,"udplite" ) || !strcasecmp (psz ,"udp-lite" ))
cond	74:8	74:68	5	!strcasecmp (psz ,"udplite" ) || !strcasecmp (psz ,"udp-lite" )
op	74:8	0:0	6	!
call	74:9	74:35	6	strcasecmp
arg	74:21	74:24	7	psz
water	74:21	0:0	8	psz
arg	74:26	74:35	7	"udplite"
water	74:26	0:0	8	"udplite"
op	74:37	0:0	6	||
op	74:40	0:0	6	!
call	74:41	74:68	6	strcasecmp
arg	74:53	74:56	7	psz
water	74:53	0:0	8	psz
arg	74:58	74:68	7	"udp-lite"
water	74:58	0:0	8	"udp-lite"
stmts	75:8	75:38	5	
water	75:8	0:0	6	p_sys
op	75:13	0:0	6	->
water	75:15	0:0	6	proto
op	75:21	0:0	6	=
water	75:23	0:0	6	IPPROTO_UDPLITE
water	75:38	0:0	6	;
else	76:4	78:22	2
stmts	77:8	78:22	3	
call	77:8	78:21	4	msg_Warn
arg	77:18	77:24	5	p_this
water	77:18	0:0	6	p_this
arg	77:26	77:76	5	"unknown or unsupported transport protocol \"%s\""
water	77:26	0:0	6	"unknown or unsupported transport protocol \"%s\""
arg	78:18	78:21	5	psz
water	78:18	0:0	6	psz
water	78:22	0:0	4	;
call	79:4	79:13	2	free
arg	79:10	79:13	3	psz
water	79:10	0:0	4	psz
water	79:14	0:0	2	;
call	80:4	80:54	2	var_Create
arg	80:16	80:22	3	p_this
water	80:16	0:0	4	p_this
arg	80:24	80:38	3	"dccp-service"
water	80:24	0:0	4	"dccp-service"
arg	80:40	80:54	3	VLC_VAR_STRING
water	80:40	0:0	4	VLC_VAR_STRING
water	80:55	0:0	2	;
water	81:4	0:0	2	p_sys
op	81:9	0:0	2	->
water	81:11	0:0	2	p_vod_media
op	81:23	0:0	2	=
water	81:25	0:0	2	NULL
water	81:29	0:0	2	;
water	82:4	0:0	2	p_sys
op	82:9	0:0	2	->
water	82:11	0:0	2	psz_vod_session
op	82:27	0:0	2	=
water	82:29	0:0	2	NULL
water	82:33	0:0	2	;
if	83:4	101:4	2	(!strcmp (p_stream -> psz_name ,"vod" ))
cond	83:8	83:42	3	!strcmp (p_stream -> psz_name ,"vod" )
op	83:8	0:0	4	!
call	83:10	83:42	4	strcmp
arg	83:17	83:35	5	p_stream->psz_name
water	83:17	0:0	6	p_stream
op	83:25	0:0	6	->
water	83:27	0:0	6	psz_name
arg	83:37	83:42	5	"vod"
water	83:37	0:0	6	"vod"
stmts	84:4	101:4	3	
water	84:4	0:0	4	{
water	88:8	0:0	4	p_sys
op	88:13	0:0	4	->
water	88:15	0:0	4	p_vod_media
op	88:27	0:0	4	=
call	88:29	88:69	4	var_InheritAddress
arg	88:48	88:56	5	p_stream
water	88:48	0:0	6	p_stream
arg	88:58	88:69	5	"vod-media"
water	88:58	0:0	6	"vod-media"
water	88:70	0:0	4	;
if	89:8	100:8	4	(p_sys -> p_vod_media != NULL)
cond	89:12	89:34	5	p_sys -> p_vod_media != NULL
water	89:12	0:0	6	p_sys
op	89:17	0:0	6	->
water	89:19	0:0	6	p_vod_media
op	89:31	0:0	6	!=
water	89:34	0:0	6	NULL
stmts	90:8	100:8	5	
water	90:8	0:0	6	{
water	91:12	0:0	6	p_sys
op	91:17	0:0	6	->
water	91:19	0:0	6	psz_vod_session
op	91:35	0:0	6	=
call	91:37	91:78	6	var_InheritString
arg	91:55	91:63	7	p_stream
water	91:55	0:0	8	p_stream
arg	91:65	91:78	7	"vod-session"
water	91:65	0:0	8	"vod-session"
water	91:79	0:0	6	;
if	92:12	97:12	6	(p_sys -> psz_vod_session == NULL)
cond	92:16	92:42	7	p_sys -> psz_vod_session == NULL
water	92:16	0:0	8	p_sys
op	92:21	0:0	8	->
water	92:23	0:0	8	psz_vod_session
op	92:39	0:0	8	==
water	92:42	0:0	8	NULL
stmts	93:12	97:12	7	
water	93:12	0:0	8	{
call	94:16	94:55	8	msg_Err
arg	94:24	94:32	9	p_stream
water	94:24	0:0	10	p_stream
arg	94:34	94:55	9	"missing VoD session"
water	94:34	0:0	10	"missing VoD session"
water	94:56	0:0	8	;
call	95:16	95:26	8	free
arg	95:21	95:26	9	p_sys
water	95:21	0:0	10	p_sys
water	95:27	0:0	8	;
return	96:16	96:35	8	VLC_EGENERIC
water	96:23	0:0	9	VLC_EGENERIC
water	97:12	0:0	8	}
decl	98:12	98:61	6	const char	*mux
op	98:28	0:0	6	=
call	98:30	98:60	7	vod_get_mux
arg	98:42	98:60	8	p_sys->p_vod_media
water	98:42	0:0	9	p_sys
op	98:47	0:0	9	->
water	98:49	0:0	9	p_vod_media
call	99:12	99:62	6	var_SetString
arg	99:26	99:34	7	p_stream
water	99:26	0:0	8	p_stream
arg	99:36	99:57	7	SOUT_CFG_PREFIX"mux"
water	99:36	0:0	8	SOUT_CFG_PREFIX
water	99:52	0:0	8	"mux"
arg	99:59	99:62	7	mux
water	99:59	0:0	8	mux
water	99:63	0:0	6	;
water	100:8	0:0	6	}
water	101:4	0:0	4	}
if	102:4	108:4	2	(p_sys -> psz_destination == NULL && ! b_rtsp && p_sys -> p_vod_media == NULL)
cond	102:8	103:33	3	p_sys -> psz_destination == NULL && ! b_rtsp && p_sys -> p_vod_media == NULL
water	102:8	0:0	4	p_sys
op	102:13	0:0	4	->
water	102:15	0:0	4	psz_destination
op	102:31	0:0	4	==
water	102:34	0:0	4	NULL
op	102:39	0:0	4	&&
op	102:42	0:0	4	!
water	102:43	0:0	4	b_rtsp
op	103:8	0:0	4	&&
water	103:11	0:0	4	p_sys
op	103:16	0:0	4	->
water	103:18	0:0	4	p_vod_media
op	103:30	0:0	4	==
water	103:33	0:0	4	NULL
stmts	104:4	108:4	3	
water	104:4	0:0	4	{
call	105:8	105:70	4	msg_Err
arg	105:17	105:25	5	p_stream
water	105:17	0:0	6	p_stream
arg	105:27	105:70	5	"missing destination and not in RTSP mode"
water	105:27	0:0	6	"missing destination and not in RTSP mode"
water	105:71	0:0	4	;
call	106:8	106:20	4	free
arg	106:14	106:20	5	p_sys
water	106:14	0:0	6	p_sys
water	106:21	0:0	4	;
return	107:8	107:27	4	VLC_EGENERIC
water	107:15	0:0	5	VLC_EGENERIC
water	108:4	0:0	4	}
decl	109:4	109:65	2	int	i_ttl
op	109:14	0:0	2	=
call	109:16	109:64	3	var_GetInteger
arg	109:32	109:40	4	p_stream
water	109:32	0:0	5	p_stream
arg	109:42	109:64	4	SOUT_CFG_PREFIX"ttl"
water	109:42	0:0	5	SOUT_CFG_PREFIX
water	109:58	0:0	5	"ttl"
if	110:4	114:4	2	(i_ttl != - 1)
cond	110:8	110:18	3	i_ttl != - 1
water	110:8	0:0	4	i_ttl
op	110:14	0:0	4	!=
op	110:17	0:0	4	-
water	110:18	0:0	4	1
stmts	111:4	114:4	3	
water	111:4	0:0	4	{
call	112:8	112:53	4	var_Create
arg	112:20	112:28	5	p_stream
water	112:20	0:0	6	p_stream
arg	112:30	112:35	5	"ttl"
water	112:30	0:0	6	"ttl"
arg	112:37	112:53	5	VLC_VAR_INTEGER
water	112:37	0:0	6	VLC_VAR_INTEGER
water	112:54	0:0	4	;
call	113:8	113:47	4	var_SetInteger
arg	113:24	113:32	5	p_stream
water	113:24	0:0	6	p_stream
arg	113:34	113:39	5	"ttl"
water	113:34	0:0	6	"ttl"
arg	113:41	113:47	5	i_ttl
water	113:41	0:0	6	i_ttl
water	113:48	0:0	4	;
water	114:4	0:0	4	}
water	115:4	0:0	2	p_sys
op	115:9	0:0	2	->
water	115:11	0:0	2	b_latm
op	115:18	0:0	2	=
call	115:20	115:71	2	var_GetBool
arg	115:33	115:41	3	p_stream
water	115:33	0:0	4	p_stream
arg	115:43	115:71	3	SOUT_CFG_PREFIX"mp4a-latm"
water	115:43	0:0	4	SOUT_CFG_PREFIX
water	115:59	0:0	4	"mp4a-latm"
water	115:72	0:0	2	;
water	121:4	0:0	2	p_sys
op	121:9	0:0	2	->
water	121:11	0:0	2	i_npt_zero
op	121:22	0:0	2	=
water	121:24	0:0	2	VLC_TS_INVALID
water	121:38	0:0	2	;
water	122:4	0:0	2	p_sys
op	122:9	0:0	2	->
water	122:11	0:0	2	i_pts_zero
op	122:22	0:0	2	=
call	122:24	123:58	2	rtp_init_ts
arg	122:36	122:54	3	p_sys->p_vod_media
water	122:36	0:0	4	p_sys
op	122:41	0:0	4	->
water	122:43	0:0	4	p_vod_media
arg	123:36	123:58	3	p_sys->psz_vod_session
water	123:36	0:0	4	p_sys
op	123:41	0:0	4	->
water	123:43	0:0	4	psz_vod_session
water	123:59	0:0	2	;
water	124:4	0:0	2	p_sys
op	124:9	0:0	2	->
water	124:11	0:0	2	i_es
op	124:16	0:0	2	=
water	124:18	0:0	2	0
water	124:19	0:0	2	;
water	125:4	0:0	2	p_sys
op	125:9	0:0	2	->
water	125:11	0:0	2	es
op	125:16	0:0	2	=
water	125:18	0:0	2	NULL
water	125:22	0:0	2	;
water	126:4	0:0	2	p_sys
op	126:9	0:0	2	->
water	126:11	0:0	2	rtsp
op	126:16	0:0	2	=
water	126:18	0:0	2	NULL
water	126:22	0:0	2	;
water	127:4	0:0	2	p_sys
op	127:9	0:0	2	->
water	127:11	0:0	2	psz_sdp
op	127:19	0:0	2	=
water	127:21	0:0	2	NULL
water	127:25	0:0	2	;
water	128:4	0:0	2	p_sys
op	128:9	0:0	2	->
water	128:11	0:0	2	b_export_sap
op	128:24	0:0	2	=
water	128:26	0:0	2	false
water	128:31	0:0	2	;
water	129:4	0:0	2	p_sys
op	129:9	0:0	2	->
water	129:11	0:0	2	p_session
op	129:21	0:0	2	=
water	129:23	0:0	2	NULL
water	129:27	0:0	2	;
water	130:4	0:0	2	p_sys
op	130:9	0:0	2	->
water	130:11	0:0	2	psz_sdp_file
op	130:24	0:0	2	=
water	130:26	0:0	2	NULL
water	130:30	0:0	2	;
water	131:4	0:0	2	p_sys
op	131:9	0:0	2	->
water	131:11	0:0	2	p_httpd_host
op	131:24	0:0	2	=
water	131:26	0:0	2	NULL
water	131:30	0:0	2	;
water	132:4	0:0	2	p_sys
op	132:9	0:0	2	->
water	132:11	0:0	2	p_httpd_file
op	132:24	0:0	2	=
water	132:26	0:0	2	NULL
water	132:30	0:0	2	;
water	133:4	0:0	2	p_stream
op	133:12	0:0	2	->
water	133:14	0:0	2	p_sys
op	133:24	0:0	2	=
water	133:26	0:0	2	p_sys
water	133:31	0:0	2	;
call	134:4	134:37	2	vlc_mutex_init
arg	134:20	134:37	3	&p_sys->lock_sdp
op	134:20	0:0	4	&
water	134:21	0:0	4	p_sys
op	134:26	0:0	4	->
water	134:28	0:0	4	lock_sdp
water	134:38	0:0	2	;
call	135:4	135:36	2	vlc_mutex_init
arg	135:20	135:36	3	&p_sys->lock_ts
op	135:20	0:0	4	&
water	135:21	0:0	4	p_sys
op	135:26	0:0	4	->
water	135:28	0:0	4	lock_ts
water	135:37	0:0	2	;
call	136:4	136:36	2	vlc_mutex_init
arg	136:20	136:36	3	&p_sys->lock_es
op	136:20	0:0	4	&
water	136:21	0:0	4	p_sys
op	136:26	0:0	4	->
water	136:28	0:0	4	lock_es
water	136:37	0:0	2	;
water	137:4	0:0	2	psz
op	137:8	0:0	2	=
call	137:10	137:65	2	var_GetNonEmptyString
arg	137:33	137:41	3	p_stream
water	137:33	0:0	4	p_stream
arg	137:43	137:65	3	SOUT_CFG_PREFIX"mux"
water	137:43	0:0	4	SOUT_CFG_PREFIX
water	137:59	0:0	4	"mux"
water	137:66	0:0	2	;
if	138:4	174:4	2	(psz != NULL)
cond	138:8	138:15	3	psz != NULL
water	138:8	0:0	4	psz
op	138:12	0:0	4	!=
water	138:15	0:0	4	NULL
stmts	139:4	174:4	3	
water	139:4	0:0	4	{
if	141:8	154:8	4	(strncasecmp (psz ,"ps" ,2 ) &&strncasecmp (psz ,"mpeg1" ,5 ) &&strncasecmp (psz ,"ts" ,2 ))
cond	141:12	143:38	5	strncasecmp (psz ,"ps" ,2 ) &&strncasecmp (psz ,"mpeg1" ,5 ) &&strncasecmp (psz ,"ts" ,2 )
call	141:12	141:38	6	strncasecmp
arg	141:25	141:28	7	psz
water	141:25	0:0	8	psz
arg	141:30	141:34	7	"ps"
water	141:30	0:0	8	"ps"
arg	141:36	141:38	7	2
water	141:36	0:0	8	2
op	142:9	0:0	6	&&
call	142:12	142:41	6	strncasecmp
arg	142:25	142:28	7	psz
water	142:25	0:0	8	psz
arg	142:30	142:37	7	"mpeg1"
water	142:30	0:0	8	"mpeg1"
arg	142:39	142:41	7	5
water	142:39	0:0	8	5
op	143:9	0:0	6	&&
call	143:12	143:38	6	strncasecmp
arg	143:25	143:28	7	psz
water	143:25	0:0	8	psz
arg	143:30	143:34	7	"ts"
water	143:30	0:0	8	"ts"
arg	143:36	143:38	7	2
water	143:36	0:0	8	2
stmts	144:8	154:8	5	
water	144:8	0:0	6	{
call	145:12	145:77	6	msg_Err
arg	145:21	145:29	7	p_stream
water	145:21	0:0	8	p_stream
arg	145:31	145:77	7	"unsupported muxer type for RTP (only TS/PS)"
water	145:31	0:0	8	"unsupported muxer type for RTP (only TS/PS)"
water	145:78	0:0	6	;
call	146:12	146:22	6	free
arg	146:18	146:22	7	psz
water	146:18	0:0	8	psz
water	146:23	0:0	6	;
call	147:12	147:48	6	vlc_mutex_destroy
arg	147:31	147:48	7	&p_sys->lock_sdp
op	147:31	0:0	8	&
water	147:32	0:0	8	p_sys
op	147:37	0:0	8	->
water	147:39	0:0	8	lock_sdp
water	147:49	0:0	6	;
call	148:12	148:47	6	vlc_mutex_destroy
arg	148:31	148:47	7	&p_sys->lock_ts
op	148:31	0:0	8	&
water	148:32	0:0	8	p_sys
op	148:37	0:0	8	->
water	148:39	0:0	8	lock_ts
water	148:48	0:0	6	;
call	149:12	149:47	6	vlc_mutex_destroy
arg	149:31	149:47	7	&p_sys->lock_es
op	149:31	0:0	8	&
water	149:32	0:0	8	p_sys
op	149:37	0:0	8	->
water	149:39	0:0	8	lock_es
water	149:48	0:0	6	;
call	150:12	150:41	6	free
arg	150:18	150:41	7	p_sys->psz_vod_session
water	150:18	0:0	8	p_sys
op	150:23	0:0	8	->
water	150:25	0:0	8	psz_vod_session
water	150:42	0:0	6	;
call	151:12	151:41	6	free
arg	151:18	151:41	7	p_sys->psz_destination
water	151:18	0:0	8	p_sys
op	151:23	0:0	8	->
water	151:25	0:0	8	psz_destination
water	151:42	0:0	6	;
call	152:12	152:24	6	free
arg	152:18	152:24	7	p_sys
water	152:18	0:0	8	p_sys
water	152:25	0:0	6	;
return	153:12	153:31	6	VLC_EGENERIC
water	153:19	0:0	7	VLC_EGENERIC
water	154:8	0:0	6	}
water	155:8	0:0	4	p_sys
op	155:13	0:0	4	->
water	155:15	0:0	4	p_grab
op	155:22	0:0	4	=
call	155:24	155:48	4	GrabberCreate
arg	155:39	155:48	5	p_stream
water	155:39	0:0	6	p_stream
water	155:49	0:0	4	;
water	156:8	0:0	4	p_sys
op	156:13	0:0	4	->
water	156:15	0:0	4	p_mux
op	156:21	0:0	4	=
call	156:23	156:73	4	sout_MuxNew
arg	156:36	156:52	5	p_stream->p_sout
water	156:36	0:0	6	p_stream
op	156:44	0:0	6	->
water	156:46	0:0	6	p_sout
arg	156:54	156:57	5	psz
water	156:54	0:0	6	psz
arg	156:59	156:73	5	p_sys->p_grab
water	156:59	0:0	6	p_sys
op	156:64	0:0	6	->
water	156:66	0:0	6	p_grab
water	156:74	0:0	4	;
call	157:8	157:18	4	free
arg	157:14	157:18	5	psz
water	157:14	0:0	6	psz
water	157:19	0:0	4	;
if	158:8	169:8	4	(p_sys -> p_mux == NULL)
cond	158:12	158:28	5	p_sys -> p_mux == NULL
water	158:12	0:0	6	p_sys
op	158:17	0:0	6	->
water	158:19	0:0	6	p_mux
op	158:25	0:0	6	==
water	158:28	0:0	6	NULL
stmts	159:8	169:8	5	
water	159:8	0:0	6	{
call	160:12	160:53	6	msg_Err
arg	160:21	160:29	7	p_stream
water	160:21	0:0	8	p_stream
arg	160:31	160:53	7	"cannot create muxer"
water	160:31	0:0	8	"cannot create muxer"
water	160:54	0:0	6	;
call	161:12	161:48	6	sout_AccessOutDelete
arg	161:34	161:48	7	p_sys->p_grab
water	161:34	0:0	8	p_sys
op	161:39	0:0	8	->
water	161:41	0:0	8	p_grab
water	161:49	0:0	6	;
call	162:12	162:48	6	vlc_mutex_destroy
arg	162:31	162:48	7	&p_sys->lock_sdp
op	162:31	0:0	8	&
water	162:32	0:0	8	p_sys
op	162:37	0:0	8	->
water	162:39	0:0	8	lock_sdp
water	162:49	0:0	6	;
call	163:12	163:47	6	vlc_mutex_destroy
arg	163:31	163:47	7	&p_sys->lock_ts
op	163:31	0:0	8	&
water	163:32	0:0	8	p_sys
op	163:37	0:0	8	->
water	163:39	0:0	8	lock_ts
water	163:48	0:0	6	;
call	164:12	164:47	6	vlc_mutex_destroy
arg	164:31	164:47	7	&p_sys->lock_es
op	164:31	0:0	8	&
water	164:32	0:0	8	p_sys
op	164:37	0:0	8	->
water	164:39	0:0	8	lock_es
water	164:48	0:0	6	;
call	165:12	165:41	6	free
arg	165:18	165:41	7	p_sys->psz_vod_session
water	165:18	0:0	8	p_sys
op	165:23	0:0	8	->
water	165:25	0:0	8	psz_vod_session
water	165:42	0:0	6	;
call	166:12	166:41	6	free
arg	166:18	166:41	7	p_sys->psz_destination
water	166:18	0:0	8	p_sys
op	166:23	0:0	8	->
water	166:25	0:0	8	psz_destination
water	166:42	0:0	6	;
call	167:12	167:24	6	free
arg	167:18	167:24	7	p_sys
water	167:18	0:0	8	p_sys
water	167:25	0:0	6	;
return	168:12	168:31	6	VLC_EGENERIC
water	168:19	0:0	7	VLC_EGENERIC
water	169:8	0:0	6	}
water	170:8	0:0	4	p_sys
op	170:13	0:0	4	->
water	170:15	0:0	4	packet
op	170:22	0:0	4	=
water	170:24	0:0	4	NULL
water	170:28	0:0	4	;
water	171:8	0:0	4	p_stream
op	171:16	0:0	4	->
water	171:18	0:0	4	pf_add
op	171:26	0:0	4	=
water	171:28	0:0	4	MuxAdd
water	171:34	0:0	4	;
water	172:8	0:0	4	p_stream
op	172:16	0:0	4	->
water	172:18	0:0	4	pf_del
op	172:26	0:0	4	=
water	172:28	0:0	4	MuxDel
water	172:34	0:0	4	;
water	173:8	0:0	4	p_stream
op	173:16	0:0	4	->
water	173:18	0:0	4	pf_send
op	173:26	0:0	4	=
water	173:28	0:0	4	MuxSend
water	173:35	0:0	4	;
water	174:4	0:0	4	}
else	175:4	182:4	2
stmts	176:4	182:4	3	
water	176:4	0:0	4	{
water	177:8	0:0	4	p_sys
op	177:13	0:0	4	->
water	177:15	0:0	4	p_mux
op	177:24	0:0	4	=
water	177:26	0:0	4	NULL
water	177:30	0:0	4	;
water	178:8	0:0	4	p_sys
op	178:13	0:0	4	->
water	178:15	0:0	4	p_grab
op	178:24	0:0	4	=
water	178:26	0:0	4	NULL
water	178:30	0:0	4	;
water	179:8	0:0	4	p_stream
op	179:16	0:0	4	->
water	179:18	0:0	4	pf_add
op	179:28	0:0	4	=
water	179:30	0:0	4	Add
water	179:33	0:0	4	;
water	180:8	0:0	4	p_stream
op	180:16	0:0	4	->
water	180:18	0:0	4	pf_del
op	180:28	0:0	4	=
water	180:30	0:0	4	Del
water	180:33	0:0	4	;
water	181:8	0:0	4	p_stream
op	181:16	0:0	4	->
water	181:18	0:0	4	pf_send
op	181:28	0:0	4	=
water	181:30	0:0	4	Send
water	181:34	0:0	4	;
water	182:4	0:0	4	}
water	183:4	0:0	2	p_stream
op	183:12	0:0	2	->
water	183:14	0:0	2	pace_nocontrol
op	183:29	0:0	2	=
water	183:31	0:0	2	true
water	183:35	0:0	2	;
if	184:4	185:39	2	(var_GetBool (p_stream ,SOUT_CFG_PREFIX "sap" ))
cond	184:8	184:52	3	var_GetBool (p_stream ,SOUT_CFG_PREFIX "sap" )
call	184:8	184:52	4	var_GetBool
arg	184:21	184:29	5	p_stream
water	184:21	0:0	6	p_stream
arg	184:31	184:52	5	SOUT_CFG_PREFIX"sap"
water	184:31	0:0	6	SOUT_CFG_PREFIX
water	184:46	0:0	6	"sap"
stmts	185:8	185:39	3	
call	185:8	185:38	4	SDPHandleUrl
arg	185:22	185:30	5	p_stream
water	185:22	0:0	6	p_stream
arg	185:32	185:38	5	"sap"
water	185:32	0:0	6	"sap"
water	185:39	0:0	4	;
water	186:4	0:0	2	psz
op	186:8	0:0	2	=
call	186:10	186:65	2	var_GetNonEmptyString
arg	186:33	186:41	3	p_stream
water	186:33	0:0	4	p_stream
arg	186:43	186:65	3	SOUT_CFG_PREFIX"sdp"
water	186:43	0:0	4	SOUT_CFG_PREFIX
water	186:59	0:0	4	"sdp"
water	186:66	0:0	2	;
if	187:4	204:4	2	(psz != NULL)
cond	187:8	187:15	3	psz != NULL
water	187:8	0:0	4	psz
op	187:12	0:0	4	!=
water	187:15	0:0	4	NULL
stmts	188:4	204:4	3	
water	188:4	0:0	4	{
decl	189:8	189:29	4	config_chain_t	*p_cfg
call	190:8	190:36	4	SDPHandleUrl
arg	190:22	190:30	5	p_stream
water	190:22	0:0	6	p_stream
arg	190:32	190:36	5	psz
water	190:32	0:0	6	psz
water	190:37	0:0	4	;
for	191:8	202:8	4	(p_cfg = p_stream -> p_cfg ;p_cfg != NULL;p_cfg = p_cfg -> p_next)
forinit	191:13	191:36	5	p_cfg = p_stream -> p_cfg ;
water	191:13	0:0	6	p_cfg
op	191:19	0:0	6	=
water	191:21	0:0	6	p_stream
op	191:29	0:0	6	->
water	191:31	0:0	6	p_cfg
water	191:36	0:0	6	;
cond	191:38	191:47	5	p_cfg != NULL
water	191:38	0:0	6	p_cfg
op	191:44	0:0	6	!=
water	191:47	0:0	6	NULL
forexpr	191:53	191:68	5	p_cfg = p_cfg -> p_next
water	191:53	0:0	6	p_cfg
op	191:59	0:0	6	=
water	191:61	0:0	6	p_cfg
op	191:66	0:0	6	->
water	191:68	0:0	6	p_next
stmts	192:8	202:8	5	
water	192:8	0:0	6	{
if	193:12	201:12	6	(!strcmp (p_cfg -> psz_name ,"sdp" ))
cond	193:16	193:48	7	!strcmp (p_cfg -> psz_name ,"sdp" )
op	193:16	0:0	8	!
call	193:17	193:48	8	strcmp
arg	193:25	193:40	9	p_cfg->psz_name
water	193:25	0:0	10	p_cfg
op	193:30	0:0	10	->
water	193:32	0:0	10	psz_name
arg	193:42	193:48	9	"sdp"
water	193:42	0:0	10	"sdp"
stmts	194:12	201:12	7	
water	194:12	0:0	8	{
if	195:16	196:28	8	(p_cfg -> psz_value == NULL || * p_cfg -> psz_value == '\0')
cond	195:20	195:69	9	p_cfg -> psz_value == NULL || * p_cfg -> psz_value == '\0'
water	195:20	0:0	10	p_cfg
op	195:25	0:0	10	->
water	195:27	0:0	10	psz_value
op	195:37	0:0	10	==
water	195:40	0:0	10	NULL
op	195:45	0:0	10	||
op	195:48	0:0	10	*
water	195:49	0:0	10	p_cfg
op	195:54	0:0	10	->
water	195:56	0:0	10	psz_value
op	195:66	0:0	10	==
water	195:69	0:0	10	'\0'
stmts	196:20	196:28	9	
continue	196:20	196:28	10	
if	198:16	199:28	8	(!strcmp (p_cfg -> psz_value ,psz ))
cond	198:20	198:51	9	!strcmp (p_cfg -> psz_value ,psz )
op	198:20	0:0	10	!
call	198:21	198:51	10	strcmp
arg	198:29	198:45	11	p_cfg->psz_value
water	198:29	0:0	12	p_cfg
op	198:34	0:0	12	->
water	198:36	0:0	12	psz_value
arg	198:47	198:51	11	psz
water	198:47	0:0	12	psz
stmts	199:20	199:28	9	
continue	199:20	199:28	10	
call	200:16	200:57	8	SDPHandleUrl
arg	200:30	200:38	9	p_stream
water	200:30	0:0	10	p_stream
arg	200:40	200:57	9	p_cfg->psz_value
water	200:40	0:0	10	p_cfg
op	200:45	0:0	10	->
water	200:47	0:0	10	psz_value
water	200:58	0:0	8	;
water	201:12	0:0	8	}
water	202:8	0:0	6	}
call	203:8	203:18	4	free
arg	203:14	203:18	5	psz
water	203:14	0:0	6	psz
water	203:19	0:0	4	;
water	204:4	0:0	4	}
if	205:4	213:4	2	(p_sys -> p_mux != NULL)
cond	205:8	205:24	3	p_sys -> p_mux != NULL
water	205:8	0:0	4	p_sys
op	205:13	0:0	4	->
water	205:15	0:0	4	p_mux
op	205:21	0:0	4	!=
water	205:24	0:0	4	NULL
stmts	206:4	213:4	3	
water	206:4	0:0	4	{
decl	207:8	207:56	4	sout_stream_id_sys_t	*id
op	207:33	0:0	4	=
call	207:35	207:55	5	Add
arg	207:40	207:48	6	p_stream
water	207:40	0:0	7	p_stream
arg	207:50	207:55	6	NULL
water	207:50	0:0	7	NULL
if	208:8	212:8	4	(id == NULL)
cond	208:12	208:18	5	id == NULL
water	208:12	0:0	6	id
op	208:15	0:0	6	==
water	208:18	0:0	6	NULL
stmts	209:8	212:8	5	
water	209:8	0:0	6	{
call	210:12	210:26	6	Close
arg	210:19	210:26	7	p_this
water	210:19	0:0	8	p_this
water	210:27	0:0	6	;
return	211:12	211:31	6	VLC_EGENERIC
water	211:19	0:0	7	VLC_EGENERIC
water	212:8	0:0	6	}
water	213:4	0:0	4	}
return	214:4	214:22	2	VLC_SUCCESS
water	214:11	0:0	3	VLC_SUCCESS
