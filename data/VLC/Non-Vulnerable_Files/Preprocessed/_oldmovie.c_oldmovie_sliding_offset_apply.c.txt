func	2:0	27:0	0	static int	oldmovie_sliding_offset_apply
params	2:40	0:0	1	
param	2:42	2:60	2	filter_t *	p_filter
param	2:62	2:83	2	picture_t *	p_pic_out
stmnts	0:0	26:22	1	
decl	4:4	4:41	2	filter_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	p_filter
op	4:34	0:0	2	->
water	4:36	0:0	2	p_sys
for	5:4	25:4	2	( uint8_t i_p = 0 ;i_p < p_pic_out -> i_planes;i_p ++)
forinit	0:0	5:25	3	 uint8_t i_p = 0 ;
decl	5:10	5:25	4	uint8_t	i_p
op	5:22	0:0	4	=
water	5:24	0:0	4	0
cond	5:27	5:44	3	i_p < p_pic_out -> i_planes
water	5:27	0:0	4	i_p
op	5:31	0:0	4	<
water	5:33	0:0	4	p_pic_out
op	5:42	0:0	4	->
water	5:44	0:0	4	i_planes
forexpr	5:54	5:57	3	i_p ++
water	5:54	0:0	4	i_p
op	5:57	0:0	4	++
stmts	5:62	25:4	3	
water	5:62	0:0	4	{
decl	7:8	8:55	4	uint8_t	*p_temp_buf
op	7:28	0:0	4	=
call	7:30	8:54	5	calloc
arg	7:38	7:91	6	p_pic_out->p[i_p].i_lines*p_pic_out->p[i_p].i_pitch
water	7:38	0:0	7	p_pic_out
op	7:47	0:0	7	->
water	7:49	0:0	7	p
op	7:50	0:0	7	[
water	7:51	0:0	7	i_p
op	7:54	0:0	7	]
op	7:55	0:0	7	.
water	7:56	0:0	7	i_lines
op	7:64	0:0	7	*
water	7:66	0:0	7	p_pic_out
op	7:75	0:0	7	->
water	7:77	0:0	7	p
op	7:78	0:0	7	[
water	7:79	0:0	7	i_p
op	7:82	0:0	7	]
op	7:83	0:0	7	.
water	7:84	0:0	7	i_pitch
arg	8:38	8:54	6	sizeof(uint8_t)
op	8:38	0:0	7	sizeof
water	8:44	0:0	7	(
water	8:45	0:0	7	uint8_t
water	8:52	0:0	7	)
if	9:8	10:29	4	(unlikely (! p_temp_buf ))
cond	9:13	9:35	5	unlikely (! p_temp_buf )
call	9:13	9:35	6	unlikely
arg	9:23	9:35	7	!p_temp_buf
op	9:23	0:0	8	!
water	9:24	0:0	8	p_temp_buf
stmts	10:12	10:29	5	
return	10:12	10:29	6	VLC_ENOMEM
water	10:19	0:0	7	VLC_ENOMEM
call	11:8	12:70	4	memcpy
arg	11:16	11:26	5	p_temp_buf
water	11:16	0:0	6	p_temp_buf
arg	11:27	11:53	5	p_pic_out->p[i_p].p_pixels
water	11:27	0:0	6	p_pic_out
op	11:36	0:0	6	->
water	11:38	0:0	6	p
op	11:39	0:0	6	[
water	11:40	0:0	6	i_p
op	11:43	0:0	6	]
op	11:44	0:0	6	.
water	11:45	0:0	6	p_pixels
arg	12:16	12:70	5	p_pic_out->p[i_p].i_lines*p_pic_out->p[i_p].i_pitch
water	12:16	0:0	6	p_pic_out
op	12:25	0:0	6	->
water	12:27	0:0	6	p
op	12:28	0:0	6	[
water	12:29	0:0	6	i_p
op	12:32	0:0	6	]
op	12:33	0:0	6	.
water	12:34	0:0	6	i_lines
op	12:42	0:0	6	*
water	12:44	0:0	6	p_pic_out
op	12:53	0:0	6	->
water	12:55	0:0	6	p
op	12:56	0:0	6	[
water	12:57	0:0	6	i_p
op	12:60	0:0	6	]
op	12:61	0:0	6	.
water	12:62	0:0	6	i_pitch
water	12:71	0:0	4	;
for	14:8	23:8	4	( int32_t i_y = 0 ;i_y < p_pic_out -> p [ i_p ] . i_visible_lines;i_y ++)
forinit	0:0	14:29	5	 int32_t i_y = 0 ;
decl	14:14	14:29	6	int32_t	i_y
op	14:26	0:0	6	=
water	14:28	0:0	6	0
cond	14:31	14:55	5	i_y < p_pic_out -> p [ i_p ] . i_visible_lines
water	14:31	0:0	6	i_y
op	14:35	0:0	6	<
water	14:37	0:0	6	p_pic_out
op	14:46	0:0	6	->
water	14:48	0:0	6	p
op	14:49	0:0	6	[
water	14:50	0:0	6	i_p
op	14:53	0:0	6	]
op	14:54	0:0	6	.
water	14:55	0:0	6	i_visible_lines
forexpr	14:72	14:75	5	i_y ++
water	14:72	0:0	6	i_y
op	14:75	0:0	6	++
stmts	14:80	23:8	5	
water	14:80	0:0	6	{
decl	15:12	17:59	6	int32_t	i_ofs
op	15:26	0:0	6	=
call	15:28	17:58	7	MOD
arg	15:33	16:37	8	(p_sys->i_offset_ofs+p_sys->i_sliding_ofs)/100
water	15:33	0:0	9	(
water	15:35	0:0	9	p_sys
op	15:40	0:0	9	->
water	15:42	0:0	9	i_offset_ofs
op	15:55	0:0	9	+
water	15:57	0:0	9	p_sys
op	15:62	0:0	9	->
water	15:64	0:0	9	i_sliding_ofs
water	15:78	0:0	9	)
op	16:33	0:0	9	/
water	16:34	0:0	9	100
arg	17:33	17:58	8	p_sys->i_height[Y_PLANE]
water	17:33	0:0	9	p_sys
op	17:38	0:0	9	->
water	17:40	0:0	9	i_height
op	17:48	0:0	9	[
water	17:49	0:0	9	Y_PLANE
op	17:56	0:0	9	]
water	18:12	0:0	6	i_ofs
op	18:18	0:0	6	*=
water	18:21	0:0	6	p_pic_out
op	18:30	0:0	6	->
water	18:32	0:0	6	p
op	18:33	0:0	6	[
water	18:34	0:0	6	i_p
op	18:37	0:0	6	]
op	18:38	0:0	6	.
water	18:39	0:0	6	i_visible_lines
water	18:54	0:0	6	;
water	19:12	0:0	6	i_ofs
op	19:18	0:0	6	/=
water	19:21	0:0	6	p_sys
op	19:26	0:0	6	->
water	19:28	0:0	6	i_height
op	19:36	0:0	6	[
water	19:37	0:0	6	Y_PLANE
op	19:44	0:0	6	]
water	19:45	0:0	6	;
call	20:12	22:53	6	memcpy
arg	20:20	20:82	7	&p_pic_out->p[i_p].p_pixels[i_y*p_pic_out->p[i_p].i_pitch]
op	20:20	0:0	8	&
water	20:21	0:0	8	p_pic_out
op	20:30	0:0	8	->
water	20:32	0:0	8	p
op	20:33	0:0	8	[
water	20:34	0:0	8	i_p
op	20:37	0:0	8	]
op	20:38	0:0	8	.
water	20:39	0:0	8	p_pixels
op	20:47	0:0	8	[
water	20:49	0:0	8	i_y
op	20:53	0:0	8	*
water	20:55	0:0	8	p_pic_out
op	20:64	0:0	8	->
water	20:66	0:0	8	p
op	20:67	0:0	8	[
water	20:68	0:0	8	i_p
op	20:71	0:0	8	]
op	20:72	0:0	8	.
water	20:73	0:0	8	i_pitch
op	20:81	0:0	8	]
arg	21:20	21:118	7	&p_temp_buf[((i_y+i_ofs)%p_pic_out->p[i_p].i_visible_lines)*p_pic_out->p[i_p].i_pitch]
op	21:20	0:0	8	&
water	21:21	0:0	8	p_temp_buf
op	21:31	0:0	8	[
water	21:33	0:0	8	(
water	21:35	0:0	8	(
water	21:37	0:0	8	i_y
op	21:41	0:0	8	+
water	21:43	0:0	8	i_ofs
water	21:49	0:0	8	)
op	21:51	0:0	8	%
water	21:53	0:0	8	p_pic_out
op	21:62	0:0	8	->
water	21:64	0:0	8	p
op	21:65	0:0	8	[
water	21:66	0:0	8	i_p
op	21:69	0:0	8	]
op	21:70	0:0	8	.
water	21:71	0:0	8	i_visible_lines
water	21:87	0:0	8	)
op	21:89	0:0	8	*
water	21:91	0:0	8	p_pic_out
op	21:100	0:0	8	->
water	21:102	0:0	8	p
op	21:103	0:0	8	[
water	21:104	0:0	8	i_p
op	21:107	0:0	8	]
op	21:108	0:0	8	.
water	21:109	0:0	8	i_pitch
op	21:117	0:0	8	]
arg	22:20	22:53	7	p_pic_out->p[i_p].i_visible_pitch
water	22:20	0:0	8	p_pic_out
op	22:29	0:0	8	->
water	22:31	0:0	8	p
op	22:32	0:0	8	[
water	22:33	0:0	8	i_p
op	22:36	0:0	8	]
op	22:37	0:0	8	.
water	22:38	0:0	8	i_visible_pitch
water	22:54	0:0	6	;
water	23:8	0:0	6	}
call	24:8	24:25	4	free
arg	24:14	24:25	5	p_temp_buf
water	24:14	0:0	6	p_temp_buf
water	24:26	0:0	4	;
water	25:4	0:0	4	}
return	26:4	26:22	2	VLC_SUCCESS
water	26:11	0:0	3	VLC_SUCCESS
