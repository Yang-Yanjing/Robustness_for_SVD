func	2:0	139:0	0	static picture_t *	DecodeBlock
params	2:29	0:0	1	
param	2:31	2:47	2	decoder_t *	p_dec
param	2:49	2:68	2	block_t * *	pp_block
stmnts	0:0	138:15	1	
decl	4:4	4:39	2	decoder_sys_t	*p_sys
op	4:25	0:0	2	=
water	4:27	0:0	2	p_dec
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:20	2	block_t	*p_block
decl	6:4	6:28	2	BC_DTS_PROC_OUT	proc_out
decl	7:4	7:29	2	BC_DTS_STATUS	driver_stat
if	9:4	10:19	2	(BC_FUNC_PSYS (DtsGetDriverStatus ) ( p_sys -> bcm_handle , & driver_stat ) != BC_STS_SUCCESS)
cond	9:8	9:79	3	BC_FUNC_PSYS (DtsGetDriverStatus ) ( p_sys -> bcm_handle , & driver_stat ) != BC_STS_SUCCESS
call	9:8	9:39	4	BC_FUNC_PSYS
arg	9:21	9:39	5	DtsGetDriverStatus
water	9:21	0:0	6	DtsGetDriverStatus
water	9:40	0:0	4	(
water	9:42	0:0	4	p_sys
op	9:47	0:0	4	->
water	9:49	0:0	4	bcm_handle
water	9:59	0:0	4	,
op	9:61	0:0	4	&
water	9:62	0:0	4	driver_stat
water	9:74	0:0	4	)
op	9:76	0:0	4	!=
water	9:79	0:0	4	BC_STS_SUCCESS
stmts	10:8	10:19	3	
return	10:8	10:19	4	NULL
water	10:15	0:0	5	NULL
water	11:4	0:0	2	p_block
op	11:12	0:0	2	=
op	11:14	0:0	2	*
water	11:15	0:0	2	pp_block
water	11:23	0:0	2	;
if	12:4	26:4	2	(p_block)
cond	12:8	12:8	3	p_block
water	12:8	0:0	4	p_block
stmts	13:4	26:4	3	
water	13:4	0:0	4	{
if	14:8	25:8	4	(( p_block -> i_flags & ( BLOCK_FLAG_DISCONTINUITY | BLOCK_FLAG_CORRUPTED ) ) == 0)
cond	14:12	14:84	5	( p_block -> i_flags & ( BLOCK_FLAG_DISCONTINUITY | BLOCK_FLAG_CORRUPTED ) ) == 0
water	14:12	0:0	6	(
water	14:14	0:0	6	p_block
op	14:21	0:0	6	->
water	14:23	0:0	6	i_flags
op	14:30	0:0	6	&
water	14:31	0:0	6	(
water	14:32	0:0	6	BLOCK_FLAG_DISCONTINUITY
op	14:56	0:0	6	|
water	14:57	0:0	6	BLOCK_FLAG_CORRUPTED
water	14:77	0:0	6	)
water	14:79	0:0	6	)
op	14:81	0:0	6	==
water	14:84	0:0	6	0
stmts	15:8	25:8	5	
water	15:8	0:0	6	{
decl	17:12	20:117	6	BC_STATUS	status
op	17:29	0:0	6	=
call	17:31	17:56	7	BC_FUNC_PSYS
arg	17:44	17:56	8	DtsProcInput
water	17:44	0:0	9	DtsProcInput
water	17:57	0:0	6	(
water	17:59	0:0	6	p_sys
op	17:64	0:0	6	->
water	17:66	0:0	6	bcm_handle
water	17:76	0:0	6	,
water	18:44	0:0	6	p_block
op	18:51	0:0	6	->
water	18:53	0:0	6	p_buffer
water	18:61	0:0	6	,
water	19:44	0:0	6	p_block
op	19:51	0:0	6	->
water	19:53	0:0	6	i_buffer
water	19:61	0:0	6	,
water	20:44	0:0	6	p_block
op	20:51	0:0	6	->
water	20:53	0:0	6	i_pts
op	20:59	0:0	6	>=
water	20:62	0:0	6	VLC_TS_INVALID
water	20:77	0:0	6	?
call	20:79	20:103	7	TO_BC_PTS
arg	20:89	20:103	8	p_block->i_pts
water	20:89	0:0	9	p_block
op	20:96	0:0	9	->
water	20:98	0:0	9	i_pts
water	20:105	0:0	6	:
water	20:107	0:0	6	0
water	20:108	0:0	6	,
water	20:110	0:0	6	false
water	20:116	0:0	6	)
call	21:12	21:35	6	block_Release
arg	21:27	21:35	7	p_block
water	21:27	0:0	8	p_block
water	21:36	0:0	6	;
op	22:12	0:0	6	*
water	22:13	0:0	6	pp_block
op	22:22	0:0	6	=
water	22:24	0:0	6	NULL
water	22:28	0:0	6	;
if	23:12	24:27	6	(status != BC_STS_SUCCESS)
cond	23:16	23:26	7	status != BC_STS_SUCCESS
water	23:16	0:0	8	status
op	23:23	0:0	8	!=
water	23:26	0:0	8	BC_STS_SUCCESS
stmts	24:16	24:27	7	
return	24:16	24:27	8	NULL
water	24:23	0:0	9	NULL
water	25:8	0:0	6	}
water	26:4	0:0	4	}
else	28:4	32:4	2
stmts	29:4	32:4	3	
water	29:4	0:0	4	{
if	30:8	31:92	4	(driver_stat . ReadyListCount != 0)
cond	30:12	30:42	5	driver_stat . ReadyListCount != 0
water	30:12	0:0	6	driver_stat
op	30:23	0:0	6	.
water	30:24	0:0	6	ReadyListCount
op	30:39	0:0	6	!=
water	30:42	0:0	6	0
stmts	31:12	31:92	5	
call	31:12	31:91	6	msg_Err
arg	31:21	31:26	7	p_dec
water	31:21	0:0	8	p_dec
arg	31:28	31:62	7	" Input NULL but have pictures %u"
water	31:28	0:0	8	" Input NULL but have pictures %u"
arg	31:64	31:91	7	driver_stat.ReadyListCount
water	31:64	0:0	8	driver_stat
op	31:75	0:0	8	.
water	31:76	0:0	8	ReadyListCount
water	31:92	0:0	6	;
water	32:4	0:0	4	}
if	34:4	35:19	2	(driver_stat . ReadyListCount == 0)
cond	34:8	34:38	3	driver_stat . ReadyListCount == 0
water	34:8	0:0	4	driver_stat
op	34:19	0:0	4	.
water	34:20	0:0	4	ReadyListCount
op	34:35	0:0	4	==
water	34:38	0:0	4	0
stmts	35:8	35:19	3	
return	35:8	35:19	4	NULL
water	35:15	0:0	5	NULL
call	38:4	38:50	2	memset
arg	38:12	38:21	3	&proc_out
op	38:12	0:0	4	&
water	38:13	0:0	4	proc_out
arg	38:23	38:24	3	0
water	38:23	0:0	4	0
arg	38:26	38:50	3	sizeof(BC_DTS_PROC_OUT)
op	38:26	0:0	4	sizeof
water	38:32	0:0	4	(
water	38:33	0:0	4	BC_DTS_PROC_OUT
water	38:48	0:0	4	)
water	38:51	0:0	2	;
water	39:4	0:0	2	proc_out
op	39:12	0:0	2	.
water	39:13	0:0	2	PicInfo
op	39:20	0:0	2	.
water	39:21	0:0	2	width
op	39:28	0:0	2	=
water	39:30	0:0	2	p_dec
op	39:35	0:0	2	->
water	39:37	0:0	2	fmt_out
op	39:44	0:0	2	.
water	39:45	0:0	2	video
op	39:50	0:0	2	.
water	39:51	0:0	2	i_width
water	39:58	0:0	2	;
water	40:4	0:0	2	proc_out
op	40:12	0:0	2	.
water	40:13	0:0	2	PicInfo
op	40:20	0:0	2	.
water	40:21	0:0	2	height
op	40:28	0:0	2	=
water	40:30	0:0	2	p_dec
op	40:35	0:0	2	->
water	40:37	0:0	2	fmt_out
op	40:44	0:0	2	.
water	40:45	0:0	2	video
op	40:50	0:0	2	.
water	40:51	0:0	2	i_height
water	40:59	0:0	2	;
water	41:4	0:0	2	proc_out
op	41:12	0:0	2	.
water	41:13	0:0	2	PoutFlags
op	41:28	0:0	2	=
water	41:30	0:0	2	BC_POUT_FLAGS_SIZE
water	41:48	0:0	2	;
water	42:4	0:0	2	proc_out
op	42:12	0:0	2	.
water	42:13	0:0	2	AppCallBack
op	42:28	0:0	2	=
water	42:30	0:0	2	ourCallback
water	42:41	0:0	2	;
water	43:4	0:0	2	proc_out
op	43:12	0:0	2	.
water	43:13	0:0	2	hnd
op	43:28	0:0	2	=
water	43:30	0:0	2	p_dec
water	43:35	0:0	2	;
water	44:4	0:0	2	p_sys
op	44:9	0:0	2	->
water	44:11	0:0	2	proc_out
op	44:28	0:0	2	=
op	44:30	0:0	2	&
water	44:31	0:0	2	proc_out
water	44:39	0:0	2	;
decl	46:4	46:84	2	BC_STATUS	sts
op	46:18	0:0	2	=
call	46:20	46:46	3	BC_FUNC_PSYS
arg	46:33	46:46	4	DtsProcOutput
water	46:33	0:0	5	DtsProcOutput
water	46:47	0:0	2	(
water	46:49	0:0	2	p_sys
op	46:54	0:0	2	->
water	46:56	0:0	2	bcm_handle
water	46:66	0:0	2	,
water	46:68	0:0	2	128
water	46:71	0:0	2	,
op	46:73	0:0	2	&
water	46:74	0:0	2	proc_out
water	46:83	0:0	2	)
if	48:4	49:58	2	(sts != BC_STS_SUCCESS)
cond	48:8	48:15	3	sts != BC_STS_SUCCESS
water	48:8	0:0	4	sts
op	48:12	0:0	4	!=
water	48:15	0:0	4	BC_STS_SUCCESS
stmts	49:8	49:58	3	
call	49:8	49:57	4	msg_Err
arg	49:17	49:22	5	p_dec
water	49:17	0:0	6	p_dec
arg	49:24	49:51	5	"DtsProcOutput returned %i"
water	49:24	0:0	6	"DtsProcOutput returned %i"
arg	49:53	49:57	5	sts
water	49:53	0:0	6	sts
water	49:58	0:0	4	;
decl	51:4	51:17	2	uint8_t	b_eos
decl	52:4	52:35	2	picture_t	*p_pic
op	52:21	0:0	2	=
water	52:23	0:0	2	p_sys
op	52:28	0:0	2	->
water	52:30	0:0	2	p_pic
switch	53:4	135:4	2	(sts)
cond	53:12	53:12	3	sts
water	53:12	0:0	4	sts
stmts	54:4	135:4	3	
water	54:4	0:0	4	{
label	55:8	55:27	4	case BC_STS_SUCCESS :
if	56:12	60:12	4	(! ( proc_out . PoutFlags & BC_POUT_FLAGS_PIB_VALID ))
cond	56:16	56:62	5	! ( proc_out . PoutFlags & BC_POUT_FLAGS_PIB_VALID )
op	56:16	0:0	6	!
water	56:17	0:0	6	(
water	56:18	0:0	6	proc_out
op	56:26	0:0	6	.
water	56:27	0:0	6	PoutFlags
op	56:37	0:0	6	&
water	56:39	0:0	6	BC_POUT_FLAGS_PIB_VALID
water	56:62	0:0	6	)
stmts	57:12	60:12	5	
water	57:12	0:0	6	{
call	58:16	58:46	6	msg_Dbg
arg	58:25	58:30	7	p_dec
water	58:25	0:0	8	p_dec
arg	58:32	58:46	7	"Invalid PIB"
water	58:32	0:0	8	"Invalid PIB"
water	58:47	0:0	6	;
break	59:16	59:21	6	
water	60:12	0:0	6	}
if	61:12	62:21	4	(! p_pic)
cond	61:16	61:17	5	! p_pic
op	61:16	0:0	6	!
water	61:17	0:0	6	p_pic
stmts	62:16	62:21	5	
break	62:16	62:21	6	
if	64:12	66:27	4	(( proc_out . PicInfo . flags & VDEC_FLAG_INTERLACED_SRC ) && ! ( proc_out . PicInfo . flags & VDEC_FLAG_FIELDPAIR ))
cond	64:16	65:61	5	( proc_out . PicInfo . flags & VDEC_FLAG_INTERLACED_SRC ) && ! ( proc_out . PicInfo . flags & VDEC_FLAG_FIELDPAIR )
water	64:16	0:0	6	(
water	64:17	0:0	6	proc_out
op	64:25	0:0	6	.
water	64:26	0:0	6	PicInfo
op	64:33	0:0	6	.
water	64:34	0:0	6	flags
op	64:40	0:0	6	&
water	64:42	0:0	6	VDEC_FLAG_INTERLACED_SRC
water	64:66	0:0	6	)
op	64:68	0:0	6	&&
op	65:15	0:0	6	!
water	65:16	0:0	6	(
water	65:17	0:0	6	proc_out
op	65:25	0:0	6	.
water	65:26	0:0	6	PicInfo
op	65:33	0:0	6	.
water	65:34	0:0	6	flags
op	65:40	0:0	6	&
water	65:42	0:0	6	VDEC_FLAG_FIELDPAIR
water	65:61	0:0	6	)
stmts	66:16	66:27	5	
return	66:16	66:27	6	NULL
water	66:23	0:0	7	NULL
water	68:12	0:0	4	p_pic
op	68:17	0:0	4	->
water	68:19	0:0	4	date
op	68:24	0:0	4	=
water	68:26	0:0	4	proc_out
op	68:34	0:0	4	.
water	68:35	0:0	4	PicInfo
op	68:42	0:0	4	.
water	68:43	0:0	4	timeStamp
op	68:53	0:0	4	>
water	68:55	0:0	4	0
water	68:57	0:0	4	?
call	69:26	69:64	4	FROM_BC_PTS
arg	69:38	69:64	5	proc_out.PicInfo.timeStamp
water	69:38	0:0	6	proc_out
op	69:46	0:0	6	.
water	69:47	0:0	6	PicInfo
op	69:54	0:0	6	.
water	69:55	0:0	6	timeStamp
water	69:66	0:0	4	:
water	69:68	0:0	4	VLC_TS_INVALID
water	69:82	0:0	4	;
call	72:12	72:63	4	msg_Dbg
arg	72:21	72:26	5	p_dec
water	72:21	0:0	6	p_dec
arg	72:28	72:50	5	"TS Output is %"PRIu64
water	72:28	0:0	6	"TS Output is %"
water	72:44	0:0	6	PRIu64
arg	72:52	72:63	5	p_pic->date
water	72:52	0:0	6	p_pic
op	72:57	0:0	6	->
water	72:59	0:0	6	date
water	72:64	0:0	4	;
return	74:12	74:24	4	p_pic
water	74:19	0:0	5	p_pic
label	75:8	75:32	4	case BC_STS_DEC_NOT_OPEN :
label	76:8	76:35	4	case BC_STS_DEC_NOT_STARTED :
call	77:12	77:60	4	msg_Err
arg	77:21	77:26	5	p_dec
water	77:21	0:0	6	p_dec
arg	77:28	77:60	5	"Decoder not opened or started"
water	77:28	0:0	6	"Decoder not opened or started"
water	77:61	0:0	4	;
break	78:12	78:17	4	
label	79:8	79:27	4	case BC_STS_INV_ARG :
call	80:12	80:64	4	msg_Warn
arg	80:22	80:27	5	p_dec
water	80:22	0:0	6	p_dec
arg	80:29	80:64	5	"Invalid arguments. Please report"
water	80:29	0:0	6	"Invalid arguments. Please report"
water	80:65	0:0	4	;
break	81:12	81:17	4	
label	82:8	82:30	4	case BC_STS_FMT_CHANGE :
water	85:12	0:0	4	p_dec
op	85:17	0:0	4	->
water	85:19	0:0	4	fmt_out
op	85:26	0:0	4	.
water	85:27	0:0	4	video
op	85:32	0:0	4	.
water	85:33	0:0	4	i_width
op	85:42	0:0	4	=
water	85:44	0:0	4	proc_out
op	85:52	0:0	4	.
water	85:53	0:0	4	PicInfo
op	85:60	0:0	4	.
water	85:61	0:0	4	width
water	85:66	0:0	4	;
water	86:12	0:0	4	p_dec
op	86:17	0:0	4	->
water	86:19	0:0	4	fmt_out
op	86:26	0:0	4	.
water	86:27	0:0	4	video
op	86:32	0:0	4	.
water	86:33	0:0	4	i_height
op	86:42	0:0	4	=
water	86:44	0:0	4	proc_out
op	86:52	0:0	4	.
water	86:53	0:0	4	PicInfo
op	86:60	0:0	4	.
water	86:61	0:0	4	height
water	86:67	0:0	4	;
if	87:12	88:52	4	(proc_out . PicInfo . height == 1088)
cond	87:16	87:43	5	proc_out . PicInfo . height == 1088
water	87:16	0:0	6	proc_out
op	87:24	0:0	6	.
water	87:25	0:0	6	PicInfo
op	87:32	0:0	6	.
water	87:33	0:0	6	height
op	87:40	0:0	6	==
water	87:43	0:0	6	1088
stmts	88:16	88:52	5	
water	88:16	0:0	6	p_dec
op	88:21	0:0	6	->
water	88:23	0:0	6	fmt_out
op	88:30	0:0	6	.
water	88:31	0:0	6	video
op	88:36	0:0	6	.
water	88:37	0:0	6	i_height
op	88:46	0:0	6	=
water	88:48	0:0	6	1080
water	88:52	0:0	6	;
water	90:33	0:0	4	p_dec
op	90:38	0:0	4	->
water	90:40	0:0	4	fmt_out
op	90:47	0:0	4	.
water	90:48	0:0	4	video
op	90:53	0:0	4	.
water	90:54	0:0	4	i_sar_den
op	90:64	0:0	4	=
water	90:66	0:0	4	c
water	90:67	0:0	4	;
break	90:69	90:74	4	
switch	91:12	110:12	4	(proc_out . PicInfo . aspect_ratio)
cond	91:20	91:37	5	proc_out . PicInfo . aspect_ratio
water	91:20	0:0	6	proc_out
op	91:28	0:0	6	.
water	91:29	0:0	6	PicInfo
op	91:36	0:0	6	.
water	91:37	0:0	6	aspect_ratio
stmts	92:12	110:12	5	
water	92:12	0:0	6	{
call	93:16	93:51	6	setAR
arg	93:23	93:44	7	vdecAspectRatioSquare
water	93:23	0:0	8	vdecAspectRatioSquare
arg	93:46	93:47	7	1
water	93:46	0:0	8	1
arg	93:49	93:51	7	1
water	93:49	0:0	8	1
call	94:16	94:52	6	setAR
arg	94:23	94:43	7	vdecAspectRatio12_11
water	94:23	0:0	8	vdecAspectRatio12_11
arg	94:45	94:47	7	12
water	94:45	0:0	8	12
arg	94:49	94:52	7	11
water	94:49	0:0	8	11
call	95:16	95:52	6	setAR
arg	95:23	95:43	7	vdecAspectRatio10_11
water	95:23	0:0	8	vdecAspectRatio10_11
arg	95:45	95:47	7	10
water	95:45	0:0	8	10
arg	95:49	95:52	7	11
water	95:49	0:0	8	11
call	96:16	96:52	6	setAR
arg	96:23	96:43	7	vdecAspectRatio16_11
water	96:23	0:0	8	vdecAspectRatio16_11
arg	96:45	96:47	7	16
water	96:45	0:0	8	16
arg	96:49	96:52	7	11
water	96:49	0:0	8	11
call	97:16	97:52	6	setAR
arg	97:23	97:43	7	vdecAspectRatio40_33
water	97:23	0:0	8	vdecAspectRatio40_33
arg	97:45	97:47	7	40
water	97:45	0:0	8	40
arg	97:49	97:52	7	33
water	97:49	0:0	8	33
call	98:16	98:52	6	setAR
arg	98:23	98:43	7	vdecAspectRatio24_11
water	98:23	0:0	8	vdecAspectRatio24_11
arg	98:45	98:47	7	24
water	98:45	0:0	8	24
arg	98:49	98:52	7	11
water	98:49	0:0	8	11
call	99:16	99:52	6	setAR
arg	99:23	99:43	7	vdecAspectRatio20_11
water	99:23	0:0	8	vdecAspectRatio20_11
arg	99:45	99:47	7	20
water	99:45	0:0	8	20
arg	99:49	99:52	7	11
water	99:49	0:0	8	11
call	100:16	100:52	6	setAR
arg	100:23	100:43	7	vdecAspectRatio32_11
water	100:23	0:0	8	vdecAspectRatio32_11
arg	100:45	100:47	7	32
water	100:45	0:0	8	32
arg	100:49	100:52	7	11
water	100:49	0:0	8	11
call	101:16	101:52	6	setAR
arg	101:23	101:43	7	vdecAspectRatio80_33
water	101:23	0:0	8	vdecAspectRatio80_33
arg	101:45	101:47	7	80
water	101:45	0:0	8	80
arg	101:49	101:52	7	33
water	101:49	0:0	8	33
call	102:16	102:52	6	setAR
arg	102:23	102:43	7	vdecAspectRatio18_11
water	102:23	0:0	8	vdecAspectRatio18_11
arg	102:45	102:47	7	18
water	102:45	0:0	8	18
arg	102:49	102:52	7	11
water	102:49	0:0	8	11
call	103:16	103:52	6	setAR
arg	103:23	103:43	7	vdecAspectRatio15_11
water	103:23	0:0	8	vdecAspectRatio15_11
arg	103:45	103:47	7	15
water	103:45	0:0	8	15
arg	103:49	103:52	7	11
water	103:49	0:0	8	11
call	104:16	104:52	6	setAR
arg	104:23	104:43	7	vdecAspectRatio64_33
water	104:23	0:0	8	vdecAspectRatio64_33
arg	104:45	104:47	7	64
water	104:45	0:0	8	64
arg	104:49	104:52	7	33
water	104:49	0:0	8	33
call	105:16	105:54	6	setAR
arg	105:23	105:44	7	vdecAspectRatio160_99
water	105:23	0:0	8	vdecAspectRatio160_99
arg	105:46	105:49	7	160
water	105:46	0:0	8	160
arg	105:51	105:54	7	99
water	105:51	0:0	8	99
call	106:16	106:48	6	setAR
arg	106:23	106:41	7	vdecAspectRatio4_3
water	106:23	0:0	8	vdecAspectRatio4_3
arg	106:43	106:44	7	4
water	106:43	0:0	8	4
arg	106:46	106:48	7	3
water	106:46	0:0	8	3
call	107:16	107:50	6	setAR
arg	107:23	107:42	7	vdecAspectRatio16_9
water	107:23	0:0	8	vdecAspectRatio16_9
arg	107:44	107:46	7	16
water	107:44	0:0	8	16
arg	107:48	107:50	7	9
water	107:48	0:0	8	9
call	108:16	108:52	6	setAR
arg	108:23	108:43	7	vdecAspectRatio221_1
water	108:23	0:0	8	vdecAspectRatio221_1
arg	108:45	108:48	7	221
water	108:45	0:0	8	221
arg	108:50	108:52	7	1
water	108:50	0:0	8	1
water	109:16	0:0	6	default
water	109:23	0:0	6	:
water	109:25	0:0	6	break
water	109:30	0:0	6	;
water	110:12	0:0	6	}
call	112:12	115:51	4	msg_Dbg
arg	112:21	112:26	5	p_dec
water	112:21	0:0	6	p_dec
arg	112:28	112:72	5	"Format Change Detected [%i, %i], AR: %i/%i"
water	112:28	0:0	6	"Format Change Detected [%i, %i], AR: %i/%i"
arg	113:20	113:42	5	proc_out.PicInfo.width
water	113:20	0:0	6	proc_out
op	113:28	0:0	6	.
water	113:29	0:0	6	PicInfo
op	113:36	0:0	6	.
water	113:37	0:0	6	width
arg	113:44	113:67	5	proc_out.PicInfo.height
water	113:44	0:0	6	proc_out
op	113:52	0:0	6	.
water	113:53	0:0	6	PicInfo
op	113:60	0:0	6	.
water	113:61	0:0	6	height
arg	114:20	114:50	5	p_dec->fmt_out.video.i_sar_num
water	114:20	0:0	6	p_dec
op	114:25	0:0	6	->
water	114:27	0:0	6	fmt_out
op	114:34	0:0	6	.
water	114:35	0:0	6	video
op	114:40	0:0	6	.
water	114:41	0:0	6	i_sar_num
arg	115:20	115:51	5	p_dec->fmt_out.video.i_sar_den
water	115:20	0:0	6	p_dec
op	115:25	0:0	6	->
water	115:27	0:0	6	fmt_out
op	115:34	0:0	6	.
water	115:35	0:0	6	video
op	115:40	0:0	6	.
water	115:41	0:0	6	i_sar_den
water	115:52	0:0	4	;
break	116:12	116:17	4	
label	118:8	118:27	4	case BC_STS_NO_DATA :
if	119:12	122:53	4	(BC_FUNC_PSYS (DtsIsEndOfStream ) ( p_sys -> bcm_handle , & b_eos ) == BC_STS_SUCCESS)
cond	119:16	120:23	5	BC_FUNC_PSYS (DtsIsEndOfStream ) ( p_sys -> bcm_handle , & b_eos ) == BC_STS_SUCCESS
call	119:16	119:45	6	BC_FUNC_PSYS
arg	119:29	119:45	7	DtsIsEndOfStream
water	119:29	0:0	8	DtsIsEndOfStream
water	119:46	0:0	6	(
water	119:48	0:0	6	p_sys
op	119:53	0:0	6	->
water	119:55	0:0	6	bcm_handle
water	119:65	0:0	6	,
op	119:67	0:0	6	&
water	119:68	0:0	6	b_eos
water	119:74	0:0	6	)
op	120:20	0:0	6	==
water	120:23	0:0	6	BC_STS_SUCCESS
stmts	121:16	122:53	5	
if	121:16	122:53	6	(b_eos)
cond	121:20	121:20	7	b_eos
water	121:20	0:0	8	b_eos
stmts	122:20	122:53	7	
call	122:20	122:52	8	msg_Dbg
arg	122:29	122:34	9	p_dec
water	122:29	0:0	10	p_dec
arg	122:36	122:52	9	"End of Stream"
water	122:36	0:0	10	"End of Stream"
water	122:53	0:0	8	;
break	123:12	123:17	4	
label	124:8	124:27	4	case BC_STS_TIMEOUT :
call	125:12	125:49	4	msg_Err
arg	125:21	125:26	5	p_dec
water	125:21	0:0	6	p_dec
arg	125:28	125:49	5	"ProcOutput timeout"
water	125:28	0:0	6	"ProcOutput timeout"
water	125:50	0:0	4	;
break	126:12	126:17	4	
label	127:8	127:32	4	case BC_STS_IO_XFR_ERROR :
label	128:8	128:33	4	case BC_STS_IO_USER_ABORT :
label	129:8	129:28	4	case BC_STS_IO_ERROR :
call	130:12	130:84	4	msg_Err
arg	130:21	130:26	5	p_dec
water	130:21	0:0	6	p_dec
arg	130:28	130:84	5	"ProcOutput return mode not implemented. Please report"
water	130:28	0:0	6	"ProcOutput return mode not implemented. Please report"
water	130:85	0:0	4	;
break	131:12	131:17	4	
label	132:8	132:15	4	default :
call	133:12	133:75	4	msg_Err
arg	133:21	133:26	5	p_dec
water	133:21	0:0	6	p_dec
arg	133:28	133:69	5	"Unknown return status. Please report %i"
water	133:28	0:0	6	"Unknown return status. Please report %i"
arg	133:71	133:75	5	sts
water	133:71	0:0	6	sts
water	133:76	0:0	4	;
break	134:12	134:17	4	
water	135:4	0:0	4	}
if	136:4	137:45	2	(p_pic)
cond	136:8	136:8	3	p_pic
water	136:8	0:0	4	p_pic
stmts	137:8	137:45	3	
call	137:8	137:44	4	decoder_DeletePicture
arg	137:31	137:36	5	p_dec
water	137:31	0:0	6	p_dec
arg	137:38	137:44	5	p_pic
water	137:38	0:0	6	p_pic
water	137:45	0:0	4	;
return	138:4	138:15	2	NULL
water	138:11	0:0	3	NULL
