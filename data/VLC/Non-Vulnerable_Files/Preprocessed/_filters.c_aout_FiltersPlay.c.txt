func	2:0	32:0	0	block_t *	aout_FiltersPlay
params	2:26	0:0	1	
param	2:27	2:50	2	aout_filters_t *	filters
param	2:52	2:66	2	block_t *	block
param	2:68	2:76	2	int	rate
stmnts	0:0	31:15	1	
decl	4:4	4:24	2	int	nominal_rate
op	4:21	0:0	2	=
water	4:23	0:0	2	0
if	5:4	14:4	2	(rate != INPUT_RATE_DEFAULT)
cond	5:8	5:16	3	rate != INPUT_RATE_DEFAULT
water	5:8	0:0	4	rate
op	5:13	0:0	4	!=
water	5:16	0:0	4	INPUT_RATE_DEFAULT
stmts	6:4	14:4	3	
water	6:4	0:0	4	{
decl	7:8	7:52	4	filter_t	*rate_filter
op	7:30	0:0	4	=
water	7:32	0:0	4	filters
op	7:39	0:0	4	->
water	7:41	0:0	4	rate_filter
if	8:8	9:21	4	(rate_filter == NULL)
cond	8:12	8:27	5	rate_filter == NULL
water	8:12	0:0	6	rate_filter
op	8:24	0:0	6	==
water	8:27	0:0	6	NULL
stmts	9:12	9:21	5	
goto	9:12	9:21	6	drop
water	9:17	0:0	7	drop
water	11:8	0:0	4	nominal_rate
op	11:21	0:0	4	=
water	11:23	0:0	4	rate_filter
op	11:34	0:0	4	->
water	11:36	0:0	4	fmt_in
op	11:42	0:0	4	.
water	11:43	0:0	4	audio
op	11:48	0:0	4	.
water	11:49	0:0	4	i_rate
water	11:55	0:0	4	;
water	12:8	0:0	4	rate_filter
op	12:19	0:0	4	->
water	12:21	0:0	4	fmt_in
op	12:27	0:0	4	.
water	12:28	0:0	4	audio
op	12:33	0:0	4	.
water	12:34	0:0	4	i_rate
op	12:41	0:0	4	=
water	13:12	0:0	4	(
water	13:13	0:0	4	nominal_rate
op	13:26	0:0	4	*
water	13:28	0:0	4	INPUT_RATE_DEFAULT
water	13:46	0:0	4	)
op	13:48	0:0	4	/
water	13:50	0:0	4	rate
water	13:54	0:0	4	;
water	14:4	0:0	4	}
water	15:4	0:0	2	block
op	15:10	0:0	2	=
call	15:12	15:73	2	aout_FiltersPipelinePlay
arg	15:38	15:50	3	filters->tab
water	15:38	0:0	4	filters
op	15:45	0:0	4	->
water	15:47	0:0	4	tab
arg	15:52	15:66	3	filters->count
water	15:52	0:0	4	filters
op	15:59	0:0	4	->
water	15:61	0:0	4	count
arg	15:68	15:73	3	block
water	15:68	0:0	4	block
water	15:74	0:0	2	;
if	16:4	22:4	2	(filters -> resampler != NULL)
cond	16:8	16:30	3	filters -> resampler != NULL
water	16:8	0:0	4	filters
op	16:15	0:0	4	->
water	16:17	0:0	4	resampler
op	16:27	0:0	4	!=
water	16:30	0:0	4	NULL
stmts	17:4	22:4	3	
water	17:4	0:0	4	{
water	19:8	0:0	4	filters
op	19:15	0:0	4	->
water	19:17	0:0	4	resampler
op	19:26	0:0	4	->
water	19:28	0:0	4	fmt_in
op	19:34	0:0	4	.
water	19:35	0:0	4	audio
op	19:40	0:0	4	.
water	19:41	0:0	4	i_rate
op	19:48	0:0	4	+=
water	19:51	0:0	4	filters
op	19:58	0:0	4	->
water	19:60	0:0	4	resampling
water	19:70	0:0	4	;
water	20:8	0:0	4	block
op	20:14	0:0	4	=
call	20:16	20:71	4	aout_FiltersPipelinePlay
arg	20:42	20:61	5	&filters->resampler
op	20:42	0:0	6	&
water	20:43	0:0	6	filters
op	20:50	0:0	6	->
water	20:52	0:0	6	resampler
arg	20:63	20:64	5	1
water	20:63	0:0	6	1
arg	20:66	20:71	5	block
water	20:66	0:0	6	block
water	20:72	0:0	4	;
water	21:8	0:0	4	filters
op	21:15	0:0	4	->
water	21:17	0:0	4	resampler
op	21:26	0:0	4	->
water	21:28	0:0	4	fmt_in
op	21:34	0:0	4	.
water	21:35	0:0	4	audio
op	21:40	0:0	4	.
water	21:41	0:0	4	i_rate
op	21:48	0:0	4	-=
water	21:51	0:0	4	filters
op	21:58	0:0	4	->
water	21:60	0:0	4	resampling
water	21:70	0:0	4	;
water	22:4	0:0	4	}
if	23:4	27:4	2	(nominal_rate != 0)
cond	23:8	23:24	3	nominal_rate != 0
water	23:8	0:0	4	nominal_rate
op	23:21	0:0	4	!=
water	23:24	0:0	4	0
stmts	24:4	27:4	3	
water	24:4	0:0	4	{
call	25:8	25:44	4	assert
arg	25:16	25:44	5	filters->rate_filter!=NULL
water	25:16	0:0	6	filters
op	25:23	0:0	6	->
water	25:25	0:0	6	rate_filter
op	25:37	0:0	6	!=
water	25:40	0:0	6	NULL
water	25:45	0:0	4	;
water	26:8	0:0	4	filters
op	26:15	0:0	4	->
water	26:17	0:0	4	rate_filter
op	26:28	0:0	4	->
water	26:30	0:0	4	fmt_in
op	26:36	0:0	4	.
water	26:37	0:0	4	audio
op	26:42	0:0	4	.
water	26:43	0:0	4	i_rate
op	26:50	0:0	4	=
water	26:52	0:0	4	nominal_rate
water	26:64	0:0	4	;
water	27:4	0:0	4	}
return	28:4	28:16	2	block
water	28:11	0:0	3	block
label	29:0	29:4	2	drop :
call	30:4	30:24	2	block_Release
arg	30:19	30:24	3	block
water	30:19	0:0	4	block
water	30:25	0:0	2	;
return	31:4	31:15	2	NULL
water	31:11	0:0	3	NULL
