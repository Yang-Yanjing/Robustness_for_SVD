func	2:0	120:0	0	static int	ScanDvbSNextFast
params	2:27	0:0	1	
param	2:29	2:43	2	scan_t *	p_scan
param	2:45	2:72	2	scan_configuration_t *	p_cfg
param	2:74	2:89	2	double *	pf_pos
stmnts	4:4	119:23	1	
call	4:4	4:66	2	msg_Dbg
arg	4:13	4:26	3	p_scan->p_obj
water	4:13	0:0	4	p_scan
op	4:19	0:0	4	->
water	4:21	0:0	4	p_obj
arg	4:28	4:48	3	"Scan index %"PRId64
water	4:28	0:0	4	"Scan index %"
water	4:42	0:0	4	PRId64
arg	4:50	4:66	3	p_scan->i_index
water	4:50	0:0	4	p_scan
op	4:56	0:0	4	->
water	4:58	0:0	4	i_index
water	4:67	0:0	2	;
decl	5:4	5:55	2	int	*pi_count
op	5:18	0:0	2	=
op	5:20	0:0	2	&
water	5:21	0:0	2	p_scan
op	5:27	0:0	2	->
water	5:29	0:0	2	parameter
op	5:38	0:0	2	.
water	5:39	0:0	2	sat_info
op	5:47	0:0	2	.
water	5:48	0:0	2	i_count
if	6:4	10:4	2	(! p_scan -> parameter . sat_info . psz_name)
cond	6:8	6:36	3	! p_scan -> parameter . sat_info . psz_name
op	6:8	0:0	4	!
water	6:9	0:0	4	p_scan
op	6:15	0:0	4	->
water	6:17	0:0	4	parameter
op	6:26	0:0	4	.
water	6:27	0:0	4	sat_info
op	6:35	0:0	4	.
water	6:36	0:0	4	psz_name
stmts	7:4	10:4	3	
water	7:4	0:0	4	{
call	8:8	8:56	4	msg_Err
arg	8:17	8:30	5	p_scan->p_obj
water	8:17	0:0	6	p_scan
op	8:23	0:0	6	->
water	8:25	0:0	6	p_obj
arg	8:32	8:56	5	"no satellite selected"
water	8:32	0:0	6	"no satellite selected"
water	8:57	0:0	4	;
return	9:8	9:27	4	VLC_EGENERIC
water	9:15	0:0	5	VLC_EGENERIC
water	10:4	0:0	4	}
if	12:4	95:4	2	(! * pi_count)
cond	12:8	12:10	3	! * pi_count
op	12:8	0:0	4	!
op	12:9	0:0	4	*
water	12:10	0:0	4	pi_count
stmts	13:4	95:4	3	
water	13:4	0:0	4	{
decl	14:8	14:18	4	DIR	*p_dir
decl	15:8	15:28	4	char	*psz_dir
op	15:22	0:0	4	=
water	15:24	0:0	4	NULL
decl	16:8	16:44	4	char	*data_dir
op	16:23	0:0	4	=
call	16:25	16:43	5	config_GetDataDir
if	17:8	18:26	4	(asprintf (& psz_dir ,"%s" DIR_SEP "dvb" DIR_SEP "dvb-s" ,data_dir ) == - 1)
cond	17:12	17:83	5	asprintf (& psz_dir ,"%s" DIR_SEP "dvb" DIR_SEP "dvb-s" ,data_dir ) == - 1
call	17:12	17:77	6	asprintf
arg	17:22	17:30	7	&psz_dir
op	17:22	0:0	8	&
water	17:23	0:0	8	psz_dir
arg	17:32	17:66	7	"%s"DIR_SEP"dvb"DIR_SEP"dvb-s"
water	17:32	0:0	8	"%s"
water	17:37	0:0	8	DIR_SEP
water	17:45	0:0	8	"dvb"
water	17:51	0:0	8	DIR_SEP
water	17:59	0:0	8	"dvb-s"
arg	17:68	17:77	7	data_dir
water	17:68	0:0	8	data_dir
op	17:79	0:0	6	==
op	17:82	0:0	6	-
water	17:83	0:0	6	1
stmts	18:12	18:26	5	
water	18:12	0:0	6	psz_dir
op	18:20	0:0	6	=
water	18:22	0:0	6	NULL
water	18:26	0:0	6	;
call	19:8	19:23	4	free
arg	19:14	19:23	5	data_dir
water	19:14	0:0	6	data_dir
water	19:24	0:0	4	;
if	20:8	24:8	4	(! psz_dir)
cond	20:12	20:13	5	! psz_dir
op	20:12	0:0	6	!
water	20:13	0:0	6	psz_dir
stmts	21:8	24:8	5	
water	21:8	0:0	6	{
call	22:12	22:54	6	free
arg	22:18	22:54	7	p_scan->parameter.sat_info.psz_name
water	22:18	0:0	8	p_scan
op	22:24	0:0	8	->
water	22:26	0:0	8	parameter
op	22:35	0:0	8	.
water	22:36	0:0	8	sat_info
op	22:44	0:0	8	.
water	22:45	0:0	8	psz_name
water	22:55	0:0	6	;
return	23:12	23:31	6	VLC_EGENERIC
water	23:19	0:0	7	VLC_EGENERIC
water	24:8	0:0	6	}
if	26:8	31:8	4	(! ( p_dir =vlc_opendir (psz_dir ) ))
cond	26:12	26:46	5	! ( p_dir =vlc_opendir (psz_dir ) )
op	26:12	0:0	6	!
water	26:13	0:0	6	(
water	26:15	0:0	6	p_dir
op	26:21	0:0	6	=
call	26:23	26:44	6	vlc_opendir
arg	26:36	26:44	7	psz_dir
water	26:36	0:0	8	psz_dir
water	26:46	0:0	6	)
stmts	27:8	31:8	5	
water	27:8	0:0	6	{
call	28:12	28:92	6	msg_Err
arg	28:21	28:34	7	p_scan->p_obj
water	28:21	0:0	8	p_scan
op	28:27	0:0	8	->
water	28:29	0:0	8	p_obj
arg	28:36	28:82	7	"could not open satellite info directory (%s)"
water	28:36	0:0	8	"could not open satellite info directory (%s)"
arg	28:84	28:92	7	psz_dir
water	28:84	0:0	8	psz_dir
water	28:93	0:0	6	;
call	29:12	29:54	6	free
arg	29:18	29:54	7	p_scan->parameter.sat_info.psz_name
water	29:18	0:0	8	p_scan
op	29:24	0:0	8	->
water	29:26	0:0	8	parameter
op	29:35	0:0	8	.
water	29:36	0:0	8	sat_info
op	29:44	0:0	8	.
water	29:45	0:0	8	psz_name
water	29:55	0:0	6	;
return	30:12	30:31	6	VLC_EGENERIC
water	30:19	0:0	7	VLC_EGENERIC
water	31:8	0:0	6	}
for	33:8	43:8	4	(;;)
forinit	33:13	33:13	5	;
water	33:13	0:0	6	;
cond	0:0	0:0	5	
forexpr	0:0	0:0	5	
stmts	33:19	43:8	5	
water	33:19	0:0	6	{
decl	34:12	34:59	6	const char	*psz_filename
op	34:37	0:0	6	=
call	34:39	34:58	7	vlc_readdir
arg	34:52	34:58	8	p_dir
water	34:52	0:0	9	p_dir
if	35:12	36:21	6	(psz_filename == NULL)
cond	35:16	35:32	7	psz_filename == NULL
water	35:16	0:0	8	psz_filename
op	35:29	0:0	8	==
water	35:32	0:0	8	NULL
stmts	36:16	36:21	7	
break	36:16	36:21	8	
if	37:12	42:12	6	(!strncmp (p_scan -> parameter . sat_info . psz_name ,psz_filename ,20 ))
cond	37:16	37:80	7	!strncmp (p_scan -> parameter . sat_info . psz_name ,psz_filename ,20 )
op	37:16	0:0	8	!
call	37:17	37:80	8	strncmp
arg	37:26	37:61	9	p_scan->parameter.sat_info.psz_name
water	37:26	0:0	10	p_scan
op	37:32	0:0	10	->
water	37:34	0:0	10	parameter
op	37:43	0:0	10	.
water	37:44	0:0	10	sat_info
op	37:52	0:0	10	.
water	37:53	0:0	10	psz_name
arg	37:63	37:75	9	psz_filename
water	37:63	0:0	10	psz_filename
arg	37:77	37:80	9	20
water	37:77	0:0	10	20
stmts	38:12	42:12	7	
water	38:12	0:0	8	{
if	39:16	40:62	8	(asprintf (& p_scan -> parameter . sat_info . psz_path ,"%s" DIR_SEP "%s" ,psz_dir ,psz_filename ) == - 1)
cond	39:20	39:115	9	asprintf (& p_scan -> parameter . sat_info . psz_path ,"%s" DIR_SEP "%s" ,psz_dir ,psz_filename ) == - 1
call	39:20	39:109	10	asprintf
arg	39:30	39:66	11	&p_scan->parameter.sat_info.psz_path
op	39:30	0:0	12	&
water	39:31	0:0	12	p_scan
op	39:37	0:0	12	->
water	39:39	0:0	12	parameter
op	39:48	0:0	12	.
water	39:49	0:0	12	sat_info
op	39:57	0:0	12	.
water	39:58	0:0	12	psz_path
arg	39:68	39:85	11	"%s"DIR_SEP"%s"
water	39:68	0:0	12	"%s"
water	39:73	0:0	12	DIR_SEP
water	39:81	0:0	12	"%s"
arg	39:87	39:94	11	psz_dir
water	39:87	0:0	12	psz_dir
arg	39:96	39:109	11	psz_filename
water	39:96	0:0	12	psz_filename
op	39:111	0:0	10	==
op	39:114	0:0	10	-
water	39:115	0:0	10	1
stmts	40:20	40:62	9	
water	40:20	0:0	10	p_scan
op	40:26	0:0	10	->
water	40:28	0:0	10	parameter
op	40:37	0:0	10	.
water	40:38	0:0	10	sat_info
op	40:46	0:0	10	.
water	40:47	0:0	10	psz_path
op	40:56	0:0	10	=
water	40:58	0:0	10	NULL
water	40:62	0:0	10	;
break	41:16	41:21	8	
water	42:12	0:0	8	}
water	43:8	0:0	6	}
call	44:8	44:24	4	closedir
arg	44:18	44:24	5	p_dir
water	44:18	0:0	6	p_dir
water	44:25	0:0	4	;
if	45:8	50:8	4	(! p_scan -> parameter . sat_info . psz_path)
cond	45:12	45:40	5	! p_scan -> parameter . sat_info . psz_path
op	45:12	0:0	6	!
water	45:13	0:0	6	p_scan
op	45:19	0:0	6	->
water	45:21	0:0	6	parameter
op	45:30	0:0	6	.
water	45:31	0:0	6	sat_info
op	45:39	0:0	6	.
water	45:40	0:0	6	psz_path
stmts	46:8	50:8	5	
water	46:8	0:0	6	{
call	47:12	47:112	6	msg_Err
arg	47:21	47:34	7	p_scan->p_obj
water	47:21	0:0	8	p_scan
op	47:27	0:0	8	->
water	47:29	0:0	8	p_obj
arg	47:36	47:74	7	"could not find satellite config (%s)"
water	47:36	0:0	8	"could not find satellite config (%s)"
arg	47:76	47:112	7	p_scan->parameter.sat_info.psz_name
water	47:76	0:0	8	p_scan
op	47:82	0:0	8	->
water	47:84	0:0	8	parameter
op	47:93	0:0	8	.
water	47:94	0:0	8	sat_info
op	47:102	0:0	8	.
water	47:103	0:0	8	psz_name
water	47:113	0:0	6	;
call	48:12	48:54	6	free
arg	48:18	48:54	7	p_scan->parameter.sat_info.psz_name
water	48:18	0:0	8	p_scan
op	48:24	0:0	8	->
water	48:26	0:0	8	parameter
op	48:35	0:0	8	.
water	48:36	0:0	8	sat_info
op	48:44	0:0	8	.
water	48:45	0:0	8	psz_name
water	48:55	0:0	6	;
return	49:12	49:31	6	VLC_EGENERIC
water	49:19	0:0	7	VLC_EGENERIC
water	50:8	0:0	6	}
call	51:8	51:104	4	msg_Dbg
arg	51:17	51:30	5	p_scan->p_obj
water	51:17	0:0	6	p_scan
op	51:23	0:0	6	->
water	51:25	0:0	6	p_obj
arg	51:32	51:66	5	"using satellite config file (%s)"
water	51:32	0:0	6	"using satellite config file (%s)"
arg	51:68	51:104	5	p_scan->parameter.sat_info.psz_path
water	51:68	0:0	6	p_scan
op	51:74	0:0	6	->
water	51:76	0:0	6	parameter
op	51:85	0:0	6	.
water	51:86	0:0	6	sat_info
op	51:94	0:0	6	.
water	51:95	0:0	6	psz_path
water	51:105	0:0	4	;
decl	52:8	52:71	4	FILE	*f
op	52:16	0:0	4	=
call	52:18	52:70	5	vlc_fopen
arg	52:29	52:64	6	p_scan->parameter.sat_info.psz_path
water	52:29	0:0	7	p_scan
op	52:35	0:0	7	->
water	52:37	0:0	7	parameter
op	52:46	0:0	7	.
water	52:47	0:0	7	sat_info
op	52:55	0:0	7	.
water	52:56	0:0	7	psz_path
arg	52:66	52:70	6	"r"
water	52:66	0:0	7	"r"
if	54:8	85:8	4	(f)
cond	54:12	54:12	5	f
water	54:12	0:0	6	f
stmts	55:8	85:8	5	
water	55:8	0:0	6	{
decl	56:12	56:97	6	scan_dvbs_transponder_t	*p_transponders
op	56:52	0:0	6	=
call	56:54	56:96	7	malloc
arg	56:62	56:96	8	sizeof(scan_dvbs_transponder_t)
op	56:62	0:0	9	sizeof
water	56:68	0:0	9	(
water	56:70	0:0	9	scan_dvbs_transponder_t
water	56:94	0:0	9	)
decl	57:12	57:21	6	char	type
decl	58:12	58:27	6	char	psz_fec[3]
decl	59:12	59:19	6	int	res
do	60:12	81:12	6	(res != EOF)
cond	81:21	81:28	7	res != EOF
water	81:21	0:0	8	res
op	81:25	0:0	8	!=
water	81:28	0:0	8	EOF
stmts	61:12	81:12	7	
water	61:12	0:0	8	{
if	62:16	71:16	8	(( res =fscanf (f ,"%c %d %c %d %2s\n" ,& type ,& p_transponders [ * pi_count ] . i_frequency ,& p_transponders [ * pi_count ] . c_polarization ,& p_transponders [ * pi_count ] . i_symbol_rate ,psz_fec ) ) != 5)
cond	62:21	67:43	9	( res =fscanf (f ,"%c %d %c %d %2s\n" ,& type ,& p_transponders [ * pi_count ] . i_frequency ,& p_transponders [ * pi_count ] . c_polarization ,& p_transponders [ * pi_count ] . i_symbol_rate ,psz_fec ) ) != 5
water	62:21	0:0	10	(
water	62:23	0:0	10	res
op	62:27	0:0	10	=
call	62:29	67:36	10	fscanf
arg	62:37	62:38	11	f
water	62:37	0:0	12	f
arg	62:40	62:59	11	"%c %d %c %d %2s\n"
water	62:40	0:0	12	"%c %d %c %d %2s\n"
arg	63:28	63:33	11	&type
op	63:28	0:0	12	&
water	63:29	0:0	12	type
arg	64:28	64:66	11	&p_transponders[*pi_count].i_frequency
op	64:28	0:0	12	&
water	64:29	0:0	12	p_transponders
op	64:43	0:0	12	[
op	64:44	0:0	12	*
water	64:45	0:0	12	pi_count
op	64:53	0:0	12	]
op	64:54	0:0	12	.
water	64:55	0:0	12	i_frequency
arg	65:28	65:69	11	&p_transponders[*pi_count].c_polarization
op	65:28	0:0	12	&
water	65:29	0:0	12	p_transponders
op	65:43	0:0	12	[
op	65:44	0:0	12	*
water	65:45	0:0	12	pi_count
op	65:53	0:0	12	]
op	65:54	0:0	12	.
water	65:55	0:0	12	c_polarization
arg	66:28	66:68	11	&p_transponders[*pi_count].i_symbol_rate
op	66:28	0:0	12	&
water	66:29	0:0	12	p_transponders
op	66:43	0:0	12	[
op	66:44	0:0	12	*
water	66:45	0:0	12	pi_count
op	66:53	0:0	12	]
op	66:54	0:0	12	.
water	66:55	0:0	12	i_symbol_rate
arg	67:28	67:36	11	psz_fec
water	67:28	0:0	12	psz_fec
water	67:38	0:0	10	)
op	67:40	0:0	10	!=
water	67:43	0:0	10	5
stmts	68:16	71:16	9	
water	68:16	0:0	10	{
call	69:20	69:82	10	msg_Dbg
arg	69:29	69:42	11	p_scan->p_obj
water	69:29	0:0	12	p_scan
op	69:35	0:0	12	->
water	69:37	0:0	12	p_obj
arg	69:44	69:82	11	"error parsing transponder from file"
water	69:44	0:0	12	"error parsing transponder from file"
water	69:83	0:0	10	;
continue	70:20	70:28	10	
water	71:16	0:0	10	}
decl	73:16	73:64	8	char	psz_fec_list[]
op	73:36	0:0	8	=
water	73:38	0:0	8	"1/22/33/44/55/66/77/88/9"
decl	74:16	74:61	8	char	*p_fec
op	74:28	0:0	8	=
call	74:30	74:60	9	strstr
arg	74:38	74:50	10	psz_fec_list
water	74:38	0:0	11	psz_fec_list
arg	74:52	74:60	10	psz_fec
water	74:52	0:0	11	psz_fec
if	75:16	76:55	8	(! p_fec)
cond	75:21	75:22	9	! p_fec
op	75:21	0:0	10	!
water	75:22	0:0	10	p_fec
stmts	76:20	76:55	9	
water	76:20	0:0	10	p_transponders
op	76:34	0:0	10	[
op	76:35	0:0	10	*
water	76:36	0:0	10	pi_count
op	76:44	0:0	10	]
op	76:45	0:0	10	.
water	76:46	0:0	10	i_fec
op	76:52	0:0	10	=
water	76:54	0:0	10	9
water	76:55	0:0	10	;
else	77:16	78:88	8
stmts	78:20	78:88	9	
water	78:20	0:0	10	p_transponders
op	78:34	0:0	10	[
op	78:35	0:0	10	*
water	78:36	0:0	10	pi_count
op	78:44	0:0	10	]
op	78:45	0:0	10	.
water	78:46	0:0	10	i_fec
op	78:52	0:0	10	=
water	78:54	0:0	10	1
op	78:56	0:0	10	+
water	78:58	0:0	10	(
water	78:60	0:0	10	(
water	78:62	0:0	10	p_fec
op	78:67	0:0	10	-
water	78:68	0:0	10	psz_fec_list
water	78:81	0:0	10	)
op	78:83	0:0	10	/
water	78:85	0:0	10	3
water	78:87	0:0	10	)
water	78:88	0:0	10	;
water	79:16	0:0	8	(
op	79:17	0:0	8	*
water	79:18	0:0	8	pi_count
water	79:26	0:0	8	)
op	79:27	0:0	8	++
water	79:29	0:0	8	;
water	80:16	0:0	8	p_transponders
op	80:31	0:0	8	=
call	80:33	80:111	8	realloc
arg	80:41	80:55	9	p_transponders
water	80:41	0:0	10	p_transponders
arg	80:57	80:111	9	(*pi_count+1)*sizeof(scan_dvbs_transponder_t)
water	80:57	0:0	10	(
op	80:59	0:0	10	*
water	80:60	0:0	10	pi_count
op	80:69	0:0	10	+
water	80:71	0:0	10	1
water	80:73	0:0	10	)
op	80:75	0:0	10	*
op	80:77	0:0	10	sizeof
water	80:83	0:0	10	(
water	80:85	0:0	10	scan_dvbs_transponder_t
water	80:109	0:0	10	)
water	80:112	0:0	8	;
water	81:12	0:0	8	}
water	81:32	0:0	6	;
call	82:12	82:83	6	msg_Dbg
arg	82:21	82:34	7	p_scan->p_obj
water	82:21	0:0	8	p_scan
op	82:27	0:0	8	->
water	82:29	0:0	8	p_obj
arg	82:36	82:72	7	"parsed %d transponders from config"
water	82:36	0:0	8	"parsed %d transponders from config"
arg	82:74	82:83	7	*pi_count
op	82:74	0:0	8	*
water	82:75	0:0	8	pi_count
water	82:84	0:0	6	;
call	83:12	83:22	6	fclose
arg	83:20	83:22	7	f
water	83:20	0:0	8	f
water	83:23	0:0	6	;
water	84:12	0:0	6	p_scan
op	84:18	0:0	6	->
water	84:20	0:0	6	parameter
op	84:29	0:0	6	.
water	84:30	0:0	6	sat_info
op	84:38	0:0	6	.
water	84:39	0:0	6	p_transponders
op	84:54	0:0	6	=
water	84:56	0:0	6	p_transponders
water	84:70	0:0	6	;
water	85:8	0:0	6	}
else	86:8	92:8	4
stmts	87:8	92:8	5	
water	87:8	0:0	6	{
call	88:12	88:110	6	msg_Err
arg	88:21	88:34	7	p_scan->p_obj
water	88:21	0:0	8	p_scan
op	88:27	0:0	8	->
water	88:29	0:0	8	p_obj
arg	88:36	88:72	7	"failed to open satellite file (%s)"
water	88:36	0:0	8	"failed to open satellite file (%s)"
arg	88:74	88:110	7	p_scan->parameter.sat_info.psz_path
water	88:74	0:0	8	p_scan
op	88:80	0:0	8	->
water	88:82	0:0	8	parameter
op	88:91	0:0	8	.
water	88:92	0:0	8	sat_info
op	88:100	0:0	8	.
water	88:101	0:0	8	psz_path
water	88:111	0:0	6	;
call	89:12	89:54	6	free
arg	89:18	89:54	7	p_scan->parameter.sat_info.psz_name
water	89:18	0:0	8	p_scan
op	89:24	0:0	8	->
water	89:26	0:0	8	parameter
op	89:35	0:0	8	.
water	89:36	0:0	8	sat_info
op	89:44	0:0	8	.
water	89:45	0:0	8	psz_name
water	89:55	0:0	6	;
call	90:12	90:54	6	free
arg	90:18	90:54	7	p_scan->parameter.sat_info.psz_path
water	90:18	0:0	8	p_scan
op	90:24	0:0	8	->
water	90:26	0:0	8	parameter
op	90:35	0:0	8	.
water	90:36	0:0	8	sat_info
op	90:44	0:0	8	.
water	90:45	0:0	8	psz_path
water	90:55	0:0	6	;
return	91:12	91:31	6	VLC_EGENERIC
water	91:19	0:0	7	VLC_EGENERIC
water	92:8	0:0	6	}
call	93:8	93:50	4	free
arg	93:14	93:50	5	p_scan->parameter.sat_info.psz_name
water	93:14	0:0	6	p_scan
op	93:20	0:0	6	->
water	93:22	0:0	6	parameter
op	93:31	0:0	6	.
water	93:32	0:0	6	sat_info
op	93:40	0:0	6	.
water	93:41	0:0	6	psz_name
water	93:51	0:0	4	;
call	94:8	94:50	4	free
arg	94:14	94:50	5	p_scan->parameter.sat_info.psz_path
water	94:14	0:0	6	p_scan
op	94:20	0:0	6	->
water	94:22	0:0	6	parameter
op	94:31	0:0	6	.
water	94:32	0:0	6	sat_info
op	94:40	0:0	6	.
water	94:41	0:0	6	psz_path
water	94:51	0:0	4	;
water	95:4	0:0	4	}
if	96:4	113:4	2	(p_scan -> i_index < * pi_count)
cond	96:8	96:27	3	p_scan -> i_index < * pi_count
water	96:8	0:0	4	p_scan
op	96:14	0:0	4	->
water	96:16	0:0	4	i_index
op	96:24	0:0	4	<
op	96:26	0:0	4	*
water	96:27	0:0	4	pi_count
stmts	97:4	113:4	3	
water	97:4	0:0	4	{
water	99:8	0:0	4	p_cfg
op	99:13	0:0	4	->
water	99:15	0:0	4	i_symbol_rate
op	99:29	0:0	4	=
water	99:31	0:0	4	p_scan
op	99:37	0:0	4	->
water	99:39	0:0	4	parameter
op	99:48	0:0	4	.
water	99:49	0:0	4	sat_info
op	99:57	0:0	4	.
water	99:58	0:0	4	p_transponders
op	99:72	0:0	4	[
water	99:73	0:0	4	p_scan
op	99:79	0:0	4	->
water	99:81	0:0	4	i_index
op	99:88	0:0	4	]
op	99:89	0:0	4	.
water	99:90	0:0	4	i_symbol_rate
op	99:104	0:0	4	/
water	99:106	0:0	4	1000
water	99:110	0:0	4	;
water	100:8	0:0	4	p_cfg
op	100:13	0:0	4	->
water	100:15	0:0	4	i_frequency
op	100:27	0:0	4	=
water	100:29	0:0	4	p_scan
op	100:35	0:0	4	->
water	100:37	0:0	4	parameter
op	100:46	0:0	4	.
water	100:47	0:0	4	sat_info
op	100:55	0:0	4	.
water	100:56	0:0	4	p_transponders
op	100:70	0:0	4	[
water	100:71	0:0	4	p_scan
op	100:77	0:0	4	->
water	100:79	0:0	4	i_index
op	100:86	0:0	4	]
op	100:87	0:0	4	.
water	100:88	0:0	4	i_frequency
water	100:99	0:0	4	;
water	101:8	0:0	4	p_cfg
op	101:13	0:0	4	->
water	101:15	0:0	4	i_fec
op	101:21	0:0	4	=
water	101:23	0:0	4	p_scan
op	101:29	0:0	4	->
water	101:31	0:0	4	parameter
op	101:40	0:0	4	.
water	101:41	0:0	4	sat_info
op	101:49	0:0	4	.
water	101:50	0:0	4	p_transponders
op	101:64	0:0	4	[
water	101:65	0:0	4	p_scan
op	101:71	0:0	4	->
water	101:73	0:0	4	i_index
op	101:80	0:0	4	]
op	101:81	0:0	4	.
water	101:82	0:0	4	i_fec
water	101:87	0:0	4	;
water	102:8	0:0	4	p_cfg
op	102:13	0:0	4	->
water	102:15	0:0	4	c_polarization
op	102:30	0:0	4	=
water	102:32	0:0	4	p_scan
op	102:38	0:0	4	->
water	102:40	0:0	4	parameter
op	102:49	0:0	4	.
water	102:50	0:0	4	sat_info
op	102:58	0:0	4	.
water	102:59	0:0	4	p_transponders
op	102:73	0:0	4	[
water	102:74	0:0	4	p_scan
op	102:80	0:0	4	->
water	102:82	0:0	4	i_index
op	102:89	0:0	4	]
op	102:90	0:0	4	.
water	102:91	0:0	4	c_polarization
water	102:105	0:0	4	;
call	103:8	110:39	4	msg_Dbg
arg	103:17	103:30	5	p_scan->p_obj
water	103:17	0:0	6	p_scan
op	103:23	0:0	6	->
water	103:25	0:0	6	p_obj
arg	104:17	104:99	5	"transponder [%"PRId64"/%d]: frequency=%d, symbolrate=%d, fec=%d, polarization=%c"
water	104:17	0:0	6	"transponder [%"
water	104:33	0:0	6	PRId64
water	104:39	0:0	6	"/%d]: frequency=%d, symbolrate=%d, fec=%d, polarization=%c"
arg	105:17	105:36	5	p_scan->i_index+1
water	105:17	0:0	6	p_scan
op	105:23	0:0	6	->
water	105:25	0:0	6	i_index
op	105:33	0:0	6	+
water	105:35	0:0	6	1
arg	106:17	106:26	5	*pi_count
op	106:17	0:0	6	*
water	106:18	0:0	6	pi_count
arg	107:17	107:35	5	p_cfg->i_frequency
water	107:17	0:0	6	p_cfg
op	107:22	0:0	6	->
water	107:24	0:0	6	i_frequency
arg	108:17	108:37	5	p_cfg->i_symbol_rate
water	108:17	0:0	6	p_cfg
op	108:22	0:0	6	->
water	108:24	0:0	6	i_symbol_rate
arg	109:17	109:29	5	p_cfg->i_fec
water	109:17	0:0	6	p_cfg
op	109:22	0:0	6	->
water	109:24	0:0	6	i_fec
arg	110:17	110:39	5	p_cfg->c_polarization
water	110:17	0:0	6	p_cfg
op	110:22	0:0	6	->
water	110:24	0:0	6	c_polarization
water	110:40	0:0	4	;
op	111:8	0:0	4	*
water	111:9	0:0	4	pf_pos
op	111:16	0:0	4	=
water	111:18	0:0	4	(
water	111:19	0:0	4	double
water	111:25	0:0	4	)
water	111:26	0:0	4	p_scan
op	111:32	0:0	4	->
water	111:34	0:0	4	i_index
op	111:42	0:0	4	/
op	111:44	0:0	4	*
water	111:45	0:0	4	pi_count
water	111:53	0:0	4	;
return	112:8	112:26	4	VLC_SUCCESS
water	112:15	0:0	5	VLC_SUCCESS
water	113:4	0:0	4	}
if	114:4	118:4	2	(p_scan -> parameter . sat_info . p_transponders)
cond	114:8	114:35	3	p_scan -> parameter . sat_info . p_transponders
water	114:8	0:0	4	p_scan
op	114:14	0:0	4	->
water	114:16	0:0	4	parameter
op	114:25	0:0	4	.
water	114:26	0:0	4	sat_info
op	114:34	0:0	4	.
water	114:35	0:0	4	p_transponders
stmts	115:4	118:4	3	
water	115:4	0:0	4	{
call	116:8	116:56	4	free
arg	116:14	116:56	5	p_scan->parameter.sat_info.p_transponders
water	116:14	0:0	6	p_scan
op	116:20	0:0	6	->
water	116:22	0:0	6	parameter
op	116:31	0:0	6	.
water	116:32	0:0	6	sat_info
op	116:40	0:0	6	.
water	116:41	0:0	6	p_transponders
water	116:57	0:0	4	;
water	117:8	0:0	4	p_scan
op	117:14	0:0	4	->
water	117:16	0:0	4	parameter
op	117:25	0:0	4	.
water	117:26	0:0	4	sat_info
op	117:34	0:0	4	.
water	117:35	0:0	4	p_transponders
op	117:50	0:0	4	=
water	117:52	0:0	4	NULL
water	117:56	0:0	4	;
water	118:4	0:0	4	}
return	119:4	119:23	2	VLC_EGENERIC
water	119:11	0:0	3	VLC_EGENERIC
