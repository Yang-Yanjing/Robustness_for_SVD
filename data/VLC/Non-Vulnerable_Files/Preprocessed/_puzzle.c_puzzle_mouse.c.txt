func	2:0	207:0	0	int	puzzle_mouse
params	2:16	0:0	1	
param	2:18	2:36	2	filter_t *	p_filter
param	2:38	2:58	2	vlc_mouse_t *	p_mouse
param	3:18	3:42	2	const vlc_mouse_t *	p_old
param	3:44	3:69	2	const vlc_mouse_t *	p_new
stmnts	0:0	206:23	1	
decl	5:4	5:41	2	filter_sys_t	*p_sys
op	5:24	0:0	2	=
water	5:26	0:0	2	p_filter
op	5:34	0:0	2	->
water	5:36	0:0	2	p_sys
decl	6:4	6:61	2	const video_format_t	*p_fmt_in
op	6:36	0:0	2	=
op	6:38	0:0	2	&
water	6:39	0:0	2	p_filter
op	6:47	0:0	2	->
water	6:49	0:0	2	fmt_in
op	6:55	0:0	2	.
water	6:56	0:0	2	video
if	8:4	10:27	2	(p_new -> i_x < 0 || p_new -> i_x >= ( int ) p_fmt_in -> i_width || p_new -> i_y < 0 || p_new -> i_y >= ( int ) p_fmt_in -> i_height)
cond	8:8	9:55	3	p_new -> i_x < 0 || p_new -> i_x >= ( int ) p_fmt_in -> i_width || p_new -> i_y < 0 || p_new -> i_y >= ( int ) p_fmt_in -> i_height
water	8:8	0:0	4	p_new
op	8:13	0:0	4	->
water	8:15	0:0	4	i_x
op	8:19	0:0	4	<
water	8:21	0:0	4	0
op	8:23	0:0	4	||
water	8:26	0:0	4	p_new
op	8:31	0:0	4	->
water	8:33	0:0	4	i_x
op	8:37	0:0	4	>=
water	8:40	0:0	4	(
water	8:41	0:0	4	int
water	8:44	0:0	4	)
water	8:45	0:0	4	p_fmt_in
op	8:53	0:0	4	->
water	8:55	0:0	4	i_width
op	8:63	0:0	4	||
water	9:8	0:0	4	p_new
op	9:13	0:0	4	->
water	9:15	0:0	4	i_y
op	9:19	0:0	4	<
water	9:21	0:0	4	0
op	9:23	0:0	4	||
water	9:26	0:0	4	p_new
op	9:31	0:0	4	->
water	9:33	0:0	4	i_y
op	9:37	0:0	4	>=
water	9:40	0:0	4	(
water	9:41	0:0	4	int
water	9:44	0:0	4	)
water	9:45	0:0	4	p_fmt_in
op	9:53	0:0	4	->
water	9:55	0:0	4	i_height
stmts	10:8	10:27	3	
return	10:8	10:27	4	VLC_EGENERIC
water	10:15	0:0	5	VLC_EGENERIC
if	11:4	14:4	2	(! p_sys -> b_init || p_sys -> b_change_param)
cond	11:8	11:34	3	! p_sys -> b_init || p_sys -> b_change_param
op	11:8	0:0	4	!
water	11:10	0:0	4	p_sys
op	11:15	0:0	4	->
water	11:17	0:0	4	b_init
op	11:24	0:0	4	||
water	11:27	0:0	4	p_sys
op	11:32	0:0	4	->
water	11:34	0:0	4	b_change_param
stmts	11:50	14:4	3	
water	11:50	0:0	4	{
op	12:8	0:0	4	*
water	12:9	0:0	4	p_mouse
op	12:17	0:0	4	=
op	12:19	0:0	4	*
water	12:20	0:0	4	p_new
water	12:25	0:0	4	;
return	13:8	13:26	4	VLC_SUCCESS
water	13:15	0:0	5	VLC_SUCCESS
water	14:4	0:0	4	}
water	15:4	0:0	2	p_sys
op	15:9	0:0	2	->
water	15:11	0:0	2	i_mouse_x
op	15:21	0:0	2	=
water	15:23	0:0	2	p_new
op	15:28	0:0	2	->
water	15:30	0:0	2	i_x
water	15:33	0:0	2	;
water	16:4	0:0	2	p_sys
op	16:9	0:0	2	->
water	16:11	0:0	2	i_mouse_y
op	16:21	0:0	2	=
water	16:23	0:0	2	p_new
op	16:28	0:0	2	->
water	16:30	0:0	2	i_y
water	16:33	0:0	2	;
if	18:4	33:4	2	(p_sys -> b_finished)
cond	18:8	18:15	3	p_sys -> b_finished
water	18:8	0:0	4	p_sys
op	18:13	0:0	4	->
water	18:15	0:0	4	b_finished
stmts	18:28	33:4	3	
water	18:28	0:0	4	{
water	19:8	0:0	4	p_sys
op	19:13	0:0	4	->
water	19:15	0:0	4	b_mouse_drag
op	19:28	0:0	4	=
water	19:30	0:0	4	false
water	19:35	0:0	4	;
water	20:8	0:0	4	p_sys
op	20:13	0:0	4	->
water	20:15	0:0	4	b_mouse_mvt
op	20:27	0:0	4	=
water	20:29	0:0	4	false
water	20:34	0:0	4	;
if	21:8	26:8	4	(vlc_mouse_HasPressed (p_old ,p_new ,MOUSE_BUTTON_LEFT ) && p_new -> i_x < SHUFFLE_WIDTH && p_new -> i_y < SHUFFLE_LINES)
cond	21:12	22:55	5	vlc_mouse_HasPressed (p_old ,p_new ,MOUSE_BUTTON_LEFT ) && p_new -> i_x < SHUFFLE_WIDTH && p_new -> i_y < SHUFFLE_LINES
call	21:12	21:66	6	vlc_mouse_HasPressed
arg	21:34	21:39	7	p_old
water	21:34	0:0	8	p_old
arg	21:41	21:46	7	p_new
water	21:41	0:0	8	p_new
arg	21:48	21:66	7	MOUSE_BUTTON_LEFT
water	21:48	0:0	8	MOUSE_BUTTON_LEFT
op	21:68	0:0	6	&&
water	22:12	0:0	6	p_new
op	22:17	0:0	6	->
water	22:19	0:0	6	i_x
op	22:23	0:0	6	<
water	22:25	0:0	6	SHUFFLE_WIDTH
op	22:39	0:0	6	&&
water	22:42	0:0	6	p_new
op	22:47	0:0	6	->
water	22:49	0:0	6	i_y
op	22:53	0:0	6	<
water	22:55	0:0	6	SHUFFLE_LINES
stmts	23:8	26:8	5	
water	23:8	0:0	6	{
water	24:12	0:0	6	p_sys
op	24:17	0:0	6	->
water	24:19	0:0	6	b_shuffle_rqst
op	24:34	0:0	6	=
water	24:36	0:0	6	true
water	24:40	0:0	6	;
return	25:12	25:31	6	VLC_EGENERIC
water	25:19	0:0	7	VLC_EGENERIC
water	26:8	0:0	6	}
else	27:8	32:8	4
stmts	28:8	32:8	5	
water	28:8	0:0	6	{
op	30:12	0:0	6	*
water	30:13	0:0	6	p_mouse
op	30:21	0:0	6	=
op	30:23	0:0	6	*
water	30:24	0:0	6	p_new
water	30:29	0:0	6	;
return	31:12	31:30	6	VLC_SUCCESS
water	31:19	0:0	7	VLC_SUCCESS
water	32:8	0:0	6	}
water	33:4	0:0	4	}
if	34:4	101:4	2	(! p_sys -> s_current_param . b_advanced)
cond	34:9	34:33	3	! p_sys -> s_current_param . b_advanced
op	34:9	0:0	4	!
water	34:10	0:0	4	p_sys
op	34:15	0:0	4	->
water	34:17	0:0	4	s_current_param
op	34:32	0:0	4	.
water	34:33	0:0	4	b_advanced
stmts	34:46	101:4	3	
water	34:46	0:0	4	{
decl	36:8	36:86	4	const bool	b_clicked
op	36:29	0:0	4	=
call	36:31	36:85	5	vlc_mouse_HasPressed
arg	36:53	36:58	6	p_old
water	36:53	0:0	7	p_old
arg	36:60	36:65	6	p_new
water	36:60	0:0	7	p_new
arg	36:67	36:85	6	MOUSE_BUTTON_LEFT
water	36:67	0:0	7	MOUSE_BUTTON_LEFT
if	37:8	100:8	4	(b_clicked)
cond	37:12	37:12	5	b_clicked
water	37:12	0:0	6	b_clicked
stmts	38:8	100:8	5	
water	38:8	0:0	6	{
decl	40:12	40:104	6	const int32_t	i_border_width
op	40:41	0:0	6	=
water	40:43	0:0	6	p_fmt_in
op	40:51	0:0	6	->
water	40:53	0:0	6	i_width
op	40:61	0:0	6	*
water	40:63	0:0	6	p_sys
op	40:68	0:0	6	->
water	40:70	0:0	6	s_current_param
op	40:85	0:0	6	.
water	40:86	0:0	6	i_border
op	40:95	0:0	6	/
water	40:97	0:0	6	100
op	40:101	0:0	6	/
water	40:103	0:0	6	2
decl	41:12	41:106	6	const int32_t	i_border_height
op	41:42	0:0	6	=
water	41:44	0:0	6	p_fmt_in
op	41:52	0:0	6	->
water	41:54	0:0	6	i_height
op	41:63	0:0	6	*
water	41:65	0:0	6	p_sys
op	41:70	0:0	6	->
water	41:72	0:0	6	s_current_param
op	41:87	0:0	6	.
water	41:88	0:0	6	i_border
op	41:97	0:0	6	/
water	41:99	0:0	6	100
op	41:103	0:0	6	/
water	41:105	0:0	6	2
decl	42:12	42:134	6	const int32_t	i_pos_x
op	42:34	0:0	6	=
water	42:36	0:0	6	(
water	42:37	0:0	6	p_new
op	42:42	0:0	6	->
water	42:44	0:0	6	i_x
op	42:48	0:0	6	-
water	42:50	0:0	6	i_border_width
water	42:64	0:0	6	)
op	42:66	0:0	6	*
water	42:68	0:0	6	p_sys
op	42:73	0:0	6	->
water	42:75	0:0	6	s_allocated
op	42:86	0:0	6	.
water	42:87	0:0	6	i_cols
op	42:94	0:0	6	/
water	42:96	0:0	6	(
water	42:97	0:0	6	p_fmt_in
op	42:105	0:0	6	->
water	42:107	0:0	6	i_width
op	42:115	0:0	6	-
water	42:117	0:0	6	2
op	42:118	0:0	6	*
water	42:119	0:0	6	i_border_width
water	42:133	0:0	6	)
decl	43:12	43:137	6	const int32_t	i_pos_y
op	43:34	0:0	6	=
water	43:36	0:0	6	(
water	43:37	0:0	6	p_new
op	43:42	0:0	6	->
water	43:44	0:0	6	i_y
op	43:48	0:0	6	-
water	43:50	0:0	6	i_border_height
water	43:65	0:0	6	)
op	43:67	0:0	6	*
water	43:69	0:0	6	p_sys
op	43:74	0:0	6	->
water	43:76	0:0	6	s_allocated
op	43:87	0:0	6	.
water	43:88	0:0	6	i_rows
op	43:95	0:0	6	/
water	43:97	0:0	6	(
water	43:98	0:0	6	p_fmt_in
op	43:106	0:0	6	->
water	43:108	0:0	6	i_height
op	43:117	0:0	6	-
water	43:119	0:0	6	2
op	43:120	0:0	6	*
water	43:121	0:0	6	i_border_height
water	43:136	0:0	6	)
decl	44:12	44:79	6	const int32_t	i_pos
op	44:32	0:0	6	=
water	44:34	0:0	6	i_pos_y
op	44:42	0:0	6	*
water	44:44	0:0	6	p_sys
op	44:49	0:0	6	->
water	44:51	0:0	6	s_allocated
op	44:62	0:0	6	.
water	44:63	0:0	6	i_cols
op	44:70	0:0	6	+
water	44:72	0:0	6	i_pos_x
water	45:12	0:0	6	p_sys
op	45:17	0:0	6	->
water	45:19	0:0	6	i_mouse_drag_pce
op	45:36	0:0	6	=
water	45:38	0:0	6	i_pos
water	45:43	0:0	6	;
if	47:12	51:12	6	(( p_new -> i_x <= i_border_width ) || ( p_new -> i_y <= i_border_height ) || ( p_new -> i_x >= ( int ) p_fmt_in -> i_width - i_border_width ) || ( p_new -> i_y >= ( int ) p_fmt_in -> i_height - i_border_height ))
cond	47:16	47:206	7	( p_new -> i_x <= i_border_width ) || ( p_new -> i_y <= i_border_height ) || ( p_new -> i_x >= ( int ) p_fmt_in -> i_width - i_border_width ) || ( p_new -> i_y >= ( int ) p_fmt_in -> i_height - i_border_height )
water	47:16	0:0	8	(
water	47:17	0:0	8	p_new
op	47:22	0:0	8	->
water	47:24	0:0	8	i_x
op	47:28	0:0	8	<=
water	47:31	0:0	8	i_border_width
water	47:45	0:0	8	)
op	47:47	0:0	8	||
water	47:50	0:0	8	(
water	47:51	0:0	8	p_new
op	47:56	0:0	8	->
water	47:58	0:0	8	i_y
op	47:62	0:0	8	<=
water	47:66	0:0	8	i_border_height
water	47:81	0:0	8	)
op	47:83	0:0	8	||
water	47:86	0:0	8	(
water	47:87	0:0	8	p_new
op	47:92	0:0	8	->
water	47:94	0:0	8	i_x
op	47:98	0:0	8	>=
water	47:101	0:0	8	(
water	47:102	0:0	8	int
water	47:105	0:0	8	)
water	47:107	0:0	8	p_fmt_in
op	47:115	0:0	8	->
water	47:117	0:0	8	i_width
op	47:125	0:0	8	-
water	47:128	0:0	8	i_border_width
water	47:142	0:0	8	)
op	47:144	0:0	8	||
water	47:147	0:0	8	(
water	47:148	0:0	8	p_new
op	47:153	0:0	8	->
water	47:155	0:0	8	i_y
op	47:159	0:0	8	>=
water	47:162	0:0	8	(
water	47:163	0:0	8	int
water	47:166	0:0	8	)
water	47:168	0:0	8	p_fmt_in
op	47:176	0:0	8	->
water	47:178	0:0	8	i_height
op	47:187	0:0	8	-
water	47:190	0:0	8	i_border_height
water	47:206	0:0	8	)
stmts	48:12	51:12	7	
water	48:12	0:0	8	{
op	49:16	0:0	8	*
water	49:17	0:0	8	p_mouse
op	49:25	0:0	8	=
op	49:27	0:0	8	*
water	49:28	0:0	8	p_new
water	49:33	0:0	8	;
return	50:16	50:34	8	VLC_SUCCESS
water	50:23	0:0	9	VLC_SUCCESS
water	51:12	0:0	8	}
else	52:12	53:41	6
stmts	52:17	53:41	7	
if	52:17	53:41	8	(p_sys -> i_selected == NO_PCE)
cond	52:21	52:42	9	p_sys -> i_selected == NO_PCE
water	52:21	0:0	10	p_sys
op	52:26	0:0	10	->
water	52:28	0:0	10	i_selected
op	52:39	0:0	10	==
water	52:42	0:0	10	NO_PCE
stmts	53:16	53:41	9	
water	53:16	0:0	10	p_sys
op	53:21	0:0	10	->
water	53:23	0:0	10	i_selected
op	53:34	0:0	10	=
water	53:36	0:0	10	i_pos
water	53:41	0:0	10	;
else	54:12	55:38	6
stmts	54:17	55:38	7	
if	54:17	55:38	8	(p_sys -> i_selected == i_pos && ! p_sys -> s_current_param . b_blackslot)
cond	54:21	54:75	9	p_sys -> i_selected == i_pos && ! p_sys -> s_current_param . b_blackslot
water	54:21	0:0	10	p_sys
op	54:26	0:0	10	->
water	54:28	0:0	10	i_selected
op	54:39	0:0	10	==
water	54:42	0:0	10	i_pos
op	54:48	0:0	10	&&
op	54:51	0:0	10	!
water	54:52	0:0	10	p_sys
op	54:57	0:0	10	->
water	54:59	0:0	10	s_current_param
op	54:74	0:0	10	.
water	54:75	0:0	10	b_blackslot
stmts	55:16	55:38	9	
water	55:16	0:0	10	p_sys
op	55:21	0:0	10	->
water	55:23	0:0	10	i_selected
op	55:34	0:0	10	=
op	55:36	0:0	10	-
water	55:37	0:0	10	1
water	55:38	0:0	10	;
else	56:12	99:12	6
stmts	56:17	99:12	7	
if	56:17	99:12	8	(( p_sys -> i_selected == i_pos + 1 && p_sys -> i_selected % p_sys -> s_allocated . i_cols != 0 ) || ( p_sys -> i_selected == i_pos - 1 && i_pos % p_sys -> s_allocated . i_cols != 0 ) || p_sys -> i_selected == i_pos + p_sys -> s_allocated . i_cols || p_sys -> i_selected == i_pos - p_sys -> s_allocated . i_cols || ! p_sys -> s_current_param . b_near)
cond	56:21	60:45	9	( p_sys -> i_selected == i_pos + 1 && p_sys -> i_selected % p_sys -> s_allocated . i_cols != 0 ) || ( p_sys -> i_selected == i_pos - 1 && i_pos % p_sys -> s_allocated . i_cols != 0 ) || p_sys -> i_selected == i_pos + p_sys -> s_allocated . i_cols || p_sys -> i_selected == i_pos - p_sys -> s_allocated . i_cols || ! p_sys -> s_current_param . b_near
water	56:21	0:0	10	(
water	56:23	0:0	10	p_sys
op	56:28	0:0	10	->
water	56:30	0:0	10	i_selected
op	56:41	0:0	10	==
water	56:44	0:0	10	i_pos
op	56:50	0:0	10	+
water	56:52	0:0	10	1
op	56:54	0:0	10	&&
water	56:57	0:0	10	p_sys
op	56:62	0:0	10	->
water	56:64	0:0	10	i_selected
op	56:74	0:0	10	%
water	56:75	0:0	10	p_sys
op	56:80	0:0	10	->
water	56:82	0:0	10	s_allocated
op	56:93	0:0	10	.
water	56:94	0:0	10	i_cols
op	56:101	0:0	10	!=
water	56:104	0:0	10	0
water	56:106	0:0	10	)
op	57:18	0:0	10	||
water	57:21	0:0	10	(
water	57:23	0:0	10	p_sys
op	57:28	0:0	10	->
water	57:30	0:0	10	i_selected
op	57:41	0:0	10	==
water	57:44	0:0	10	i_pos
op	57:50	0:0	10	-
water	57:52	0:0	10	1
op	57:54	0:0	10	&&
water	57:57	0:0	10	i_pos
op	57:63	0:0	10	%
water	57:65	0:0	10	p_sys
op	57:70	0:0	10	->
water	57:72	0:0	10	s_allocated
op	57:83	0:0	10	.
water	57:84	0:0	10	i_cols
op	57:91	0:0	10	!=
water	57:94	0:0	10	0
water	57:96	0:0	10	)
op	58:18	0:0	10	||
water	58:21	0:0	10	p_sys
op	58:26	0:0	10	->
water	58:28	0:0	10	i_selected
op	58:39	0:0	10	==
water	58:42	0:0	10	i_pos
op	58:48	0:0	10	+
water	58:51	0:0	10	p_sys
op	58:56	0:0	10	->
water	58:58	0:0	10	s_allocated
op	58:69	0:0	10	.
water	58:70	0:0	10	i_cols
op	59:18	0:0	10	||
water	59:21	0:0	10	p_sys
op	59:26	0:0	10	->
water	59:28	0:0	10	i_selected
op	59:39	0:0	10	==
water	59:42	0:0	10	i_pos
op	59:48	0:0	10	-
water	59:51	0:0	10	p_sys
op	59:56	0:0	10	->
water	59:58	0:0	10	s_allocated
op	59:69	0:0	10	.
water	59:70	0:0	10	i_cols
op	60:18	0:0	10	||
op	60:21	0:0	10	!
water	60:22	0:0	10	p_sys
op	60:27	0:0	10	->
water	60:29	0:0	10	s_current_param
op	60:44	0:0	10	.
water	60:45	0:0	10	b_near
stmts	61:12	99:12	9	
water	61:12	0:0	10	{
decl	63:16	63:64	10	int32_t	a
op	63:26	0:0	10	=
water	63:28	0:0	10	p_sys
op	63:33	0:0	10	->
water	63:35	0:0	10	pi_order
op	63:43	0:0	10	[
water	63:45	0:0	10	p_sys
op	63:50	0:0	10	->
water	63:52	0:0	10	i_selected
op	63:63	0:0	10	]
water	64:16	0:0	10	p_sys
op	64:21	0:0	10	->
water	64:23	0:0	10	pi_order
op	64:31	0:0	10	[
water	64:33	0:0	10	p_sys
op	64:38	0:0	10	->
water	64:40	0:0	10	i_selected
op	64:51	0:0	10	]
op	64:53	0:0	10	=
water	64:55	0:0	10	p_sys
op	64:60	0:0	10	->
water	64:62	0:0	10	pi_order
op	64:70	0:0	10	[
water	64:72	0:0	10	i_pos
op	64:78	0:0	10	]
water	64:79	0:0	10	;
water	65:16	0:0	10	p_sys
op	65:21	0:0	10	->
water	65:23	0:0	10	pi_order
op	65:31	0:0	10	[
water	65:33	0:0	10	i_pos
op	65:39	0:0	10	]
op	65:41	0:0	10	=
water	65:43	0:0	10	a
water	65:44	0:0	10	;
if	67:16	96:16	10	(p_sys -> ps_pieces != NULL && p_sys -> pi_order != NULL)
cond	67:21	67:68	11	p_sys -> ps_pieces != NULL && p_sys -> pi_order != NULL
water	67:21	0:0	12	p_sys
op	67:26	0:0	12	->
water	67:28	0:0	12	ps_pieces
op	67:38	0:0	12	!=
water	67:41	0:0	12	NULL
op	67:46	0:0	12	&&
water	67:49	0:0	12	p_sys
op	67:54	0:0	12	->
water	67:56	0:0	12	pi_order
op	67:65	0:0	12	!=
water	67:68	0:0	12	NULL
stmts	68:16	96:16	11	
water	68:16	0:0	12	{
decl	69:20	69:33	12	int32_t	i
op	69:30	0:0	12	=
water	69:32	0:0	12	0
for	70:20	95:20	12	( int32_t row = 0 ;row < p_sys -> s_allocated . i_rows;row ++)
forinit	0:0	70:40	13	 int32_t row = 0 ;
decl	70:25	70:40	14	int32_t	row
op	70:37	0:0	14	=
water	70:39	0:0	14	0
cond	70:42	70:67	13	row < p_sys -> s_allocated . i_rows
water	70:42	0:0	14	row
op	70:46	0:0	14	<
water	70:48	0:0	14	p_sys
op	70:53	0:0	14	->
water	70:55	0:0	14	s_allocated
op	70:66	0:0	14	.
water	70:67	0:0	14	i_rows
forexpr	70:75	70:78	13	row ++
water	70:75	0:0	14	row
op	70:78	0:0	14	++
stmts	70:82	95:20	13	
water	70:82	0:0	14	{
for	71:24	94:24	14	( int32_t col = 0 ;col < p_sys -> s_allocated . i_cols;col ++)
forinit	0:0	71:44	15	 int32_t col = 0 ;
decl	71:29	71:44	16	int32_t	col
op	71:41	0:0	16	=
water	71:43	0:0	16	0
cond	71:46	71:71	15	col < p_sys -> s_allocated . i_cols
water	71:46	0:0	16	col
op	71:50	0:0	16	<
water	71:52	0:0	16	p_sys
op	71:57	0:0	16	->
water	71:59	0:0	16	s_allocated
op	71:70	0:0	16	.
water	71:71	0:0	16	i_cols
forexpr	71:79	71:82	15	col ++
water	71:79	0:0	16	col
op	71:82	0:0	16	++
stmts	71:86	94:24	15	
water	71:86	0:0	16	{
decl	72:28	72:91	16	int32_t	orow
op	72:41	0:0	16	=
water	72:43	0:0	16	p_sys
op	72:48	0:0	16	->
water	72:50	0:0	16	pi_order
op	72:58	0:0	16	[
water	72:59	0:0	16	i
op	72:60	0:0	16	]
op	72:62	0:0	16	/
water	72:64	0:0	16	(
water	72:65	0:0	16	p_sys
op	72:70	0:0	16	->
water	72:72	0:0	16	s_allocated
op	72:83	0:0	16	.
water	72:84	0:0	16	i_cols
water	72:90	0:0	16	)
decl	73:28	73:91	16	int32_t	ocol
op	73:41	0:0	16	=
water	73:43	0:0	16	p_sys
op	73:48	0:0	16	->
water	73:50	0:0	16	pi_order
op	73:58	0:0	16	[
water	73:59	0:0	16	i
op	73:60	0:0	16	]
op	73:62	0:0	16	%
water	73:64	0:0	16	(
water	73:65	0:0	16	p_sys
op	73:70	0:0	16	->
water	73:72	0:0	16	s_allocated
op	73:83	0:0	16	.
water	73:84	0:0	16	i_cols
water	73:90	0:0	16	)
water	74:28	0:0	16	p_sys
op	74:33	0:0	16	->
water	74:35	0:0	16	ps_pieces
op	74:44	0:0	16	[
water	74:45	0:0	16	i
op	74:46	0:0	16	]
op	74:47	0:0	16	.
water	74:48	0:0	16	i_original_row
op	74:63	0:0	16	=
water	74:65	0:0	16	orow
water	74:69	0:0	16	;
water	75:28	0:0	16	p_sys
op	75:33	0:0	16	->
water	75:35	0:0	16	ps_pieces
op	75:44	0:0	16	[
water	75:45	0:0	16	i
op	75:46	0:0	16	]
op	75:47	0:0	16	.
water	75:48	0:0	16	i_original_col
op	75:63	0:0	16	=
water	75:65	0:0	16	ocol
water	75:69	0:0	16	;
water	76:28	0:0	16	p_sys
op	76:33	0:0	16	->
water	76:35	0:0	16	ps_pieces
op	76:44	0:0	16	[
water	76:45	0:0	16	i
op	76:46	0:0	16	]
op	76:47	0:0	16	.
water	76:48	0:0	16	i_top_shape
op	76:63	0:0	16	=
water	76:65	0:0	16	0
water	76:66	0:0	16	;
water	77:28	0:0	16	p_sys
op	77:33	0:0	16	->
water	77:35	0:0	16	ps_pieces
op	77:44	0:0	16	[
water	77:45	0:0	16	i
op	77:46	0:0	16	]
op	77:47	0:0	16	.
water	77:48	0:0	16	i_btm_shape
op	77:63	0:0	16	=
water	77:65	0:0	16	0
water	77:66	0:0	16	;
water	78:28	0:0	16	p_sys
op	78:33	0:0	16	->
water	78:35	0:0	16	ps_pieces
op	78:44	0:0	16	[
water	78:45	0:0	16	i
op	78:46	0:0	16	]
op	78:47	0:0	16	.
water	78:48	0:0	16	i_right_shape
op	78:63	0:0	16	=
water	78:65	0:0	16	0
water	78:66	0:0	16	;
water	79:28	0:0	16	p_sys
op	79:33	0:0	16	->
water	79:35	0:0	16	ps_pieces
op	79:44	0:0	16	[
water	79:45	0:0	16	i
op	79:46	0:0	16	]
op	79:47	0:0	16	.
water	79:48	0:0	16	i_left_shape
op	79:63	0:0	16	=
water	79:65	0:0	16	0
water	79:66	0:0	16	;
water	80:28	0:0	16	p_sys
op	80:33	0:0	16	->
water	80:35	0:0	16	ps_pieces
op	80:44	0:0	16	[
water	80:45	0:0	16	i
op	80:46	0:0	16	]
op	80:47	0:0	16	.
water	80:48	0:0	16	i_actual_angle
op	80:63	0:0	16	=
water	80:65	0:0	16	0
water	80:66	0:0	16	;
water	81:28	0:0	16	p_sys
op	81:33	0:0	16	->
water	81:35	0:0	16	ps_pieces
op	81:44	0:0	16	[
water	81:45	0:0	16	i
op	81:46	0:0	16	]
op	81:47	0:0	16	.
water	81:48	0:0	16	i_actual_mirror
op	81:64	0:0	16	=
op	81:66	0:0	16	+
water	81:67	0:0	16	1
water	81:68	0:0	16	;
water	82:28	0:0	16	p_sys
op	82:33	0:0	16	->
water	82:35	0:0	16	ps_pieces
op	82:44	0:0	16	[
water	82:45	0:0	16	i
op	82:46	0:0	16	]
op	82:47	0:0	16	.
water	82:48	0:0	16	b_overlap
op	82:63	0:0	16	=
water	82:65	0:0	16	false
water	82:70	0:0	16	;
water	83:28	0:0	16	p_sys
op	83:33	0:0	16	->
water	83:35	0:0	16	ps_pieces
op	83:44	0:0	16	[
water	83:45	0:0	16	i
op	83:46	0:0	16	]
op	83:47	0:0	16	.
water	83:48	0:0	16	b_finished
op	83:63	0:0	16	=
water	83:65	0:0	16	false
water	83:70	0:0	16	;
water	84:28	0:0	16	p_sys
op	84:33	0:0	16	->
water	84:35	0:0	16	ps_pieces
op	84:44	0:0	16	[
water	84:45	0:0	16	i
op	84:46	0:0	16	]
op	84:47	0:0	16	.
water	84:48	0:0	16	i_group_ID
op	84:63	0:0	16	=
water	84:65	0:0	16	i
water	84:66	0:0	16	;
for	85:28	92:28	16	( uint8_t i_plane = 0 ;i_plane < p_sys -> s_allocated . i_planes;i_plane ++)
forinit	0:0	85:52	17	 uint8_t i_plane = 0 ;
decl	85:33	85:52	18	uint8_t	i_plane
op	85:49	0:0	18	=
water	85:51	0:0	18	0
cond	85:54	85:83	17	i_plane < p_sys -> s_allocated . i_planes
water	85:54	0:0	18	i_plane
op	85:62	0:0	18	<
water	85:64	0:0	18	p_sys
op	85:69	0:0	18	->
water	85:71	0:0	18	s_allocated
op	85:82	0:0	18	.
water	85:83	0:0	18	i_planes
forexpr	85:93	85:100	17	i_plane ++
water	85:93	0:0	18	i_plane
op	85:100	0:0	18	++
stmts	85:104	92:28	17	
water	85:104	0:0	18	{
water	86:32	0:0	18	p_sys
op	86:37	0:0	18	->
water	86:39	0:0	18	ps_pieces
op	86:48	0:0	18	[
water	86:49	0:0	18	i
op	86:50	0:0	18	]
op	86:51	0:0	18	.
water	86:52	0:0	18	ps_piece_in_plane
op	86:69	0:0	18	[
water	86:70	0:0	18	i_plane
op	86:77	0:0	18	]
op	86:78	0:0	18	.
water	86:79	0:0	18	i_width
op	86:91	0:0	18	=
water	86:93	0:0	18	p_sys
op	86:98	0:0	18	->
water	86:100	0:0	18	ps_puzzle_array
op	86:115	0:0	18	[
water	86:116	0:0	18	row
op	86:119	0:0	18	]
op	86:120	0:0	18	[
water	86:121	0:0	18	col
op	86:124	0:0	18	]
op	86:125	0:0	18	[
water	86:126	0:0	18	i_plane
op	86:133	0:0	18	]
op	86:134	0:0	18	.
water	86:135	0:0	18	i_width
water	86:142	0:0	18	;
water	87:32	0:0	18	p_sys
op	87:37	0:0	18	->
water	87:39	0:0	18	ps_pieces
op	87:48	0:0	18	[
water	87:49	0:0	18	i
op	87:50	0:0	18	]
op	87:51	0:0	18	.
water	87:52	0:0	18	ps_piece_in_plane
op	87:69	0:0	18	[
water	87:70	0:0	18	i_plane
op	87:77	0:0	18	]
op	87:78	0:0	18	.
water	87:79	0:0	18	i_lines
op	87:91	0:0	18	=
water	87:93	0:0	18	p_sys
op	87:98	0:0	18	->
water	87:100	0:0	18	ps_puzzle_array
op	87:115	0:0	18	[
water	87:116	0:0	18	row
op	87:119	0:0	18	]
op	87:120	0:0	18	[
water	87:121	0:0	18	col
op	87:124	0:0	18	]
op	87:125	0:0	18	[
water	87:126	0:0	18	i_plane
op	87:133	0:0	18	]
op	87:134	0:0	18	.
water	87:135	0:0	18	i_lines
water	87:142	0:0	18	;
water	88:32	0:0	18	p_sys
op	88:37	0:0	18	->
water	88:39	0:0	18	ps_pieces
op	88:48	0:0	18	[
water	88:49	0:0	18	i
op	88:50	0:0	18	]
op	88:51	0:0	18	.
water	88:52	0:0	18	ps_piece_in_plane
op	88:69	0:0	18	[
water	88:70	0:0	18	i_plane
op	88:77	0:0	18	]
op	88:78	0:0	18	.
water	88:79	0:0	18	i_original_x
op	88:92	0:0	18	=
water	88:94	0:0	18	p_sys
op	88:99	0:0	18	->
water	88:101	0:0	18	ps_puzzle_array
op	88:116	0:0	18	[
water	88:117	0:0	18	orow
op	88:121	0:0	18	]
op	88:122	0:0	18	[
water	88:123	0:0	18	ocol
op	88:127	0:0	18	]
op	88:128	0:0	18	[
water	88:129	0:0	18	i_plane
op	88:136	0:0	18	]
op	88:137	0:0	18	.
water	88:138	0:0	18	i_x
water	88:141	0:0	18	;
water	89:32	0:0	18	p_sys
op	89:37	0:0	18	->
water	89:39	0:0	18	ps_pieces
op	89:48	0:0	18	[
water	89:49	0:0	18	i
op	89:50	0:0	18	]
op	89:51	0:0	18	.
water	89:52	0:0	18	ps_piece_in_plane
op	89:69	0:0	18	[
water	89:70	0:0	18	i_plane
op	89:77	0:0	18	]
op	89:78	0:0	18	.
water	89:79	0:0	18	i_original_y
op	89:92	0:0	18	=
water	89:94	0:0	18	p_sys
op	89:99	0:0	18	->
water	89:101	0:0	18	ps_puzzle_array
op	89:116	0:0	18	[
water	89:117	0:0	18	orow
op	89:121	0:0	18	]
op	89:122	0:0	18	[
water	89:123	0:0	18	ocol
op	89:127	0:0	18	]
op	89:128	0:0	18	[
water	89:129	0:0	18	i_plane
op	89:136	0:0	18	]
op	89:137	0:0	18	.
water	89:138	0:0	18	i_y
water	89:141	0:0	18	;
water	90:32	0:0	18	p_sys
op	90:37	0:0	18	->
water	90:39	0:0	18	ps_pieces
op	90:48	0:0	18	[
water	90:49	0:0	18	i
op	90:50	0:0	18	]
op	90:51	0:0	18	.
water	90:52	0:0	18	ps_piece_in_plane
op	90:69	0:0	18	[
water	90:70	0:0	18	i_plane
op	90:77	0:0	18	]
op	90:78	0:0	18	.
water	90:79	0:0	18	i_actual_x
op	90:92	0:0	18	=
water	90:94	0:0	18	p_sys
op	90:99	0:0	18	->
water	90:101	0:0	18	ps_puzzle_array
op	90:116	0:0	18	[
water	90:117	0:0	18	row
op	90:120	0:0	18	]
op	90:121	0:0	18	[
water	90:122	0:0	18	col
op	90:125	0:0	18	]
op	90:126	0:0	18	[
water	90:127	0:0	18	i_plane
op	90:134	0:0	18	]
op	90:135	0:0	18	.
water	90:136	0:0	18	i_x
water	90:139	0:0	18	;
water	91:32	0:0	18	p_sys
op	91:37	0:0	18	->
water	91:39	0:0	18	ps_pieces
op	91:48	0:0	18	[
water	91:49	0:0	18	i
op	91:50	0:0	18	]
op	91:51	0:0	18	.
water	91:52	0:0	18	ps_piece_in_plane
op	91:69	0:0	18	[
water	91:70	0:0	18	i_plane
op	91:77	0:0	18	]
op	91:78	0:0	18	.
water	91:79	0:0	18	i_actual_y
op	91:92	0:0	18	=
water	91:94	0:0	18	p_sys
op	91:99	0:0	18	->
water	91:101	0:0	18	ps_puzzle_array
op	91:116	0:0	18	[
water	91:117	0:0	18	row
op	91:120	0:0	18	]
op	91:121	0:0	18	[
water	91:122	0:0	18	col
op	91:125	0:0	18	]
op	91:126	0:0	18	[
water	91:127	0:0	18	i_plane
op	91:134	0:0	18	]
op	91:135	0:0	18	.
water	91:136	0:0	18	i_y
water	91:139	0:0	18	;
water	92:28	0:0	18	}
water	93:28	0:0	16	i
op	93:29	0:0	16	++
water	93:31	0:0	16	;
water	94:24	0:0	16	}
water	95:20	0:0	14	}
water	96:16	0:0	12	}
water	97:16	0:0	10	p_sys
op	97:21	0:0	10	->
water	97:23	0:0	10	i_selected
op	97:34	0:0	10	=
water	97:36	0:0	10	p_sys
op	97:41	0:0	10	->
water	97:43	0:0	10	s_current_param
op	97:58	0:0	10	.
water	97:59	0:0	10	b_blackslot
water	97:71	0:0	10	?
water	97:73	0:0	10	i_pos
water	97:79	0:0	10	:
water	97:81	0:0	10	NO_PCE
water	97:87	0:0	10	;
water	98:16	0:0	10	p_sys
op	98:21	0:0	10	->
water	98:23	0:0	10	b_finished
op	98:34	0:0	10	=
call	98:36	98:79	10	puzzle_is_finished
arg	98:56	98:61	11	p_sys
water	98:56	0:0	12	p_sys
arg	98:63	98:79	11	p_sys->pi_order
water	98:63	0:0	12	p_sys
op	98:68	0:0	12	->
water	98:70	0:0	12	pi_order
water	98:80	0:0	10	;
water	99:12	0:0	10	}
water	100:8	0:0	6	}
water	101:4	0:0	4	}
else	102:4	205:4	2
stmts	103:4	205:4	3	
water	103:4	0:0	4	{
if	104:8	107:8	4	(( p_sys -> ps_desk_planes == NULL ) || ( p_sys -> ps_pict_planes == NULL ) || ( p_sys -> ps_puzzle_array == NULL ) || ( p_sys -> ps_pieces == NULL ))
cond	104:12	104:145	5	( p_sys -> ps_desk_planes == NULL ) || ( p_sys -> ps_pict_planes == NULL ) || ( p_sys -> ps_puzzle_array == NULL ) || ( p_sys -> ps_pieces == NULL )
water	104:12	0:0	6	(
water	104:13	0:0	6	p_sys
op	104:18	0:0	6	->
water	104:20	0:0	6	ps_desk_planes
op	104:35	0:0	6	==
water	104:38	0:0	6	NULL
water	104:42	0:0	6	)
op	104:45	0:0	6	||
water	104:48	0:0	6	(
water	104:49	0:0	6	p_sys
op	104:54	0:0	6	->
water	104:56	0:0	6	ps_pict_planes
op	104:71	0:0	6	==
water	104:74	0:0	6	NULL
water	104:78	0:0	6	)
op	104:81	0:0	6	||
water	104:84	0:0	6	(
water	104:85	0:0	6	p_sys
op	104:90	0:0	6	->
water	104:92	0:0	6	ps_puzzle_array
op	104:108	0:0	6	==
water	104:111	0:0	6	NULL
water	104:115	0:0	6	)
op	104:117	0:0	6	||
water	104:120	0:0	6	(
water	104:121	0:0	6	p_sys
op	104:126	0:0	6	->
water	104:128	0:0	6	ps_pieces
op	104:138	0:0	6	==
water	104:141	0:0	6	NULL
water	104:145	0:0	6	)
stmts	104:148	107:8	5	
water	104:148	0:0	6	{
op	105:12	0:0	6	*
water	105:13	0:0	6	p_mouse
op	105:21	0:0	6	=
op	105:23	0:0	6	*
water	105:24	0:0	6	p_new
water	105:29	0:0	6	;
return	106:12	106:30	6	VLC_SUCCESS
water	106:19	0:0	7	VLC_SUCCESS
water	107:8	0:0	6	}
if	108:8	143:8	4	(vlc_mouse_HasPressed (p_old ,p_new ,MOUSE_BUTTON_LEFT ))
cond	108:12	108:66	5	vlc_mouse_HasPressed (p_old ,p_new ,MOUSE_BUTTON_LEFT )
call	108:12	108:66	6	vlc_mouse_HasPressed
arg	108:34	108:39	7	p_old
water	108:34	0:0	8	p_old
arg	108:41	108:46	7	p_new
water	108:41	0:0	8	p_new
arg	108:48	108:66	7	MOUSE_BUTTON_LEFT
water	108:48	0:0	8	MOUSE_BUTTON_LEFT
stmts	109:8	143:8	5	
water	109:8	0:0	6	{
call	110:12	110:45	6	vlc_mutex_lock
arg	110:28	110:45	7	&p_sys->pce_lock
op	110:28	0:0	8	&
water	110:29	0:0	8	p_sys
op	110:34	0:0	8	->
water	110:36	0:0	8	pce_lock
water	110:46	0:0	6	;
if	111:12	130:12	6	(p_sys -> i_mouse_drag_pce != NO_PCE)
cond	111:16	111:43	7	p_sys -> i_mouse_drag_pce != NO_PCE
water	111:16	0:0	8	p_sys
op	111:21	0:0	8	->
water	111:23	0:0	8	i_mouse_drag_pce
op	111:40	0:0	8	!=
water	111:43	0:0	8	NO_PCE
stmts	111:51	130:12	7	
water	111:51	0:0	8	{
decl	112:16	112:87	8	int	i_ret
op	112:26	0:0	8	=
call	112:28	112:86	9	puzzle_piece_foreground
arg	112:53	112:61	10	p_filter
water	112:53	0:0	11	p_filter
arg	112:63	112:86	10	p_sys->i_mouse_drag_pce
water	112:63	0:0	11	p_sys
op	112:68	0:0	11	->
water	112:70	0:0	11	i_mouse_drag_pce
if	113:16	117:16	8	(i_ret != VLC_SUCCESS)
cond	113:20	113:29	9	i_ret != VLC_SUCCESS
water	113:20	0:0	10	i_ret
op	113:26	0:0	10	!=
water	113:29	0:0	10	VLC_SUCCESS
stmts	114:16	117:16	9	
water	114:16	0:0	10	{
call	115:20	115:55	10	vlc_mutex_unlock
arg	115:38	115:55	11	&p_sys->pce_lock
op	115:38	0:0	12	&
water	115:39	0:0	12	p_sys
op	115:44	0:0	12	->
water	115:46	0:0	12	pce_lock
water	115:56	0:0	10	;
return	116:20	116:32	10	i_ret
water	116:27	0:0	11	i_ret
water	117:16	0:0	10	}
water	118:16	0:0	8	p_sys
op	118:21	0:0	8	->
water	118:23	0:0	8	i_mouse_drag_pce
op	118:40	0:0	8	=
water	118:42	0:0	8	0
water	118:43	0:0	8	;
decl	119:16	119:68	8	uint32_t	i_group_ID
op	119:36	0:0	8	=
water	119:38	0:0	8	p_sys
op	119:43	0:0	8	->
water	119:45	0:0	8	ps_pieces
op	119:54	0:0	8	[
water	119:55	0:0	8	0
op	119:56	0:0	8	]
op	119:57	0:0	8	.
water	119:58	0:0	8	i_group_ID
for	120:16	127:16	8	( uint32_t i = 0 ;i < p_sys -> s_allocated . i_pieces_nbr;i ++)
forinit	0:0	120:35	9	 uint32_t i = 0 ;
decl	120:21	120:35	10	uint32_t	i
op	120:32	0:0	10	=
water	120:34	0:0	10	0
cond	120:37	120:60	9	i < p_sys -> s_allocated . i_pieces_nbr
water	120:37	0:0	10	i
op	120:39	0:0	10	<
water	120:41	0:0	10	p_sys
op	120:46	0:0	10	->
water	120:48	0:0	10	s_allocated
op	120:59	0:0	10	.
water	120:60	0:0	10	i_pieces_nbr
forexpr	120:74	120:75	9	i ++
water	120:74	0:0	10	i
op	120:75	0:0	10	++
stmts	120:79	127:16	9	
water	120:79	0:0	10	{
if	121:20	123:20	10	(i_group_ID == p_sys -> ps_pieces [ i ] . i_group_ID)
cond	121:25	121:59	11	i_group_ID == p_sys -> ps_pieces [ i ] . i_group_ID
water	121:25	0:0	12	i_group_ID
op	121:36	0:0	12	==
water	121:39	0:0	12	p_sys
op	121:44	0:0	12	->
water	121:46	0:0	12	ps_pieces
op	121:55	0:0	12	[
water	121:56	0:0	12	i
op	121:57	0:0	12	]
op	121:58	0:0	12	.
water	121:59	0:0	12	i_group_ID
stmts	121:72	123:20	11	
water	121:72	0:0	12	{
water	122:24	0:0	12	p_sys
op	122:29	0:0	12	->
water	122:31	0:0	12	ps_pieces
op	122:40	0:0	12	[
water	122:41	0:0	12	i
op	122:42	0:0	12	]
op	122:43	0:0	12	.
water	122:44	0:0	12	b_finished
op	122:55	0:0	12	=
water	122:57	0:0	12	false
water	122:62	0:0	12	;
water	123:20	0:0	12	}
else	124:20	126:20	10
stmts	124:25	126:20	11	
water	124:25	0:0	12	{
break	125:24	125:29	12	
water	126:20	0:0	12	}
water	127:16	0:0	10	}
water	128:16	0:0	8	p_sys
op	128:21	0:0	8	->
water	128:23	0:0	8	b_mouse_drag
op	128:36	0:0	8	=
water	128:38	0:0	8	true
water	128:42	0:0	8	;
water	129:16	0:0	8	p_sys
op	129:21	0:0	8	->
water	129:23	0:0	8	b_mouse_mvt
op	129:35	0:0	8	=
water	129:37	0:0	8	false
water	129:42	0:0	8	;
water	130:12	0:0	8	}
else	131:12	141:12	6
stmts	131:17	141:12	7	
water	131:17	0:0	8	{
water	133:16	0:0	8	p_sys
op	133:21	0:0	8	->
water	133:23	0:0	8	b_mouse_drag
op	133:36	0:0	8	=
water	133:38	0:0	8	false
water	133:43	0:0	8	;
for	134:16	139:20	8	( uint32_t i = 0 ;i < p_sys -> s_allocated . i_pieces_nbr;i ++)
forinit	0:0	134:35	9	 uint32_t i = 0 ;
decl	134:21	134:35	10	uint32_t	i
op	134:32	0:0	10	=
water	134:34	0:0	10	0
cond	134:37	134:60	9	i < p_sys -> s_allocated . i_pieces_nbr
water	134:37	0:0	10	i
op	134:39	0:0	10	<
water	134:41	0:0	10	p_sys
op	134:46	0:0	10	->
water	134:48	0:0	10	s_allocated
op	134:59	0:0	10	.
water	134:60	0:0	10	i_pieces_nbr
forexpr	134:74	134:75	9	i ++
water	134:74	0:0	10	i
op	134:75	0:0	10	++
stmts	135:20	139:20	9	
if	135:20	139:20	10	(p_sys -> ps_pieces [ i ] . b_overlap)
cond	135:25	135:45	11	p_sys -> ps_pieces [ i ] . b_overlap
water	135:25	0:0	12	p_sys
op	135:30	0:0	12	->
water	135:32	0:0	12	ps_pieces
op	135:41	0:0	12	[
water	135:42	0:0	12	i
op	135:43	0:0	12	]
op	135:44	0:0	12	.
water	135:45	0:0	12	b_overlap
stmts	135:57	139:20	11	
water	135:57	0:0	12	{
call	136:24	136:146	12	puzzle_move_group
arg	136:43	136:51	13	p_filter
water	136:43	0:0	14	p_filter
arg	136:53	136:54	13	i
water	136:53	0:0	14	i
arg	136:56	136:99	13	p_new->i_x-p_sys->ps_pieces[i].i_center_x
water	136:56	0:0	14	p_new
op	136:61	0:0	14	->
water	136:63	0:0	14	i_x
op	136:67	0:0	14	-
water	136:69	0:0	14	p_sys
op	136:74	0:0	14	->
water	136:76	0:0	14	ps_pieces
op	136:85	0:0	14	[
water	136:86	0:0	14	i
op	136:87	0:0	14	]
op	136:88	0:0	14	.
water	136:89	0:0	14	i_center_x
arg	136:102	136:146	13	p_new->i_y-p_sys->ps_pieces[i].i_center_y
water	136:102	0:0	14	p_new
op	136:107	0:0	14	->
water	136:109	0:0	14	i_y
op	136:113	0:0	14	-
water	136:115	0:0	14	p_sys
op	136:120	0:0	14	->
water	136:122	0:0	14	ps_pieces
op	136:131	0:0	14	[
water	136:132	0:0	14	i
op	136:133	0:0	14	]
op	136:134	0:0	14	.
water	136:135	0:0	14	i_center_y
water	136:147	0:0	12	;
water	137:24	0:0	12	p_sys
op	137:29	0:0	12	->
water	137:31	0:0	12	ps_pieces
op	137:40	0:0	12	[
water	137:41	0:0	12	i
op	137:42	0:0	12	]
op	137:43	0:0	12	.
water	137:44	0:0	12	b_overlap
op	137:54	0:0	12	=
water	137:56	0:0	12	false
water	137:61	0:0	12	;
break	138:24	138:29	12	
water	139:20	0:0	12	}
water	140:16	0:0	8	p_sys
op	140:21	0:0	8	->
water	140:23	0:0	8	b_mouse_drag
op	140:36	0:0	8	=
water	140:38	0:0	8	false
water	140:43	0:0	8	;
water	141:12	0:0	8	}
call	142:12	142:47	6	vlc_mutex_unlock
arg	142:30	142:47	7	&p_sys->pce_lock
op	142:30	0:0	8	&
water	142:31	0:0	8	p_sys
op	142:36	0:0	8	->
water	142:38	0:0	8	pce_lock
water	142:48	0:0	6	;
water	143:8	0:0	6	}
else	144:8	159:8	4
stmts	144:13	159:8	5	
if	144:13	159:8	6	(vlc_mouse_HasReleased (p_old ,p_new ,MOUSE_BUTTON_LEFT ))
cond	144:17	144:72	7	vlc_mouse_HasReleased (p_old ,p_new ,MOUSE_BUTTON_LEFT )
call	144:17	144:72	8	vlc_mouse_HasReleased
arg	144:40	144:45	9	p_old
water	144:40	0:0	10	p_old
arg	144:47	144:52	9	p_new
water	144:47	0:0	10	p_new
arg	144:54	144:72	9	MOUSE_BUTTON_LEFT
water	144:54	0:0	10	MOUSE_BUTTON_LEFT
stmts	145:8	159:8	7	
water	145:8	0:0	8	{
if	146:12	156:12	8	(! p_sys -> b_mouse_mvt && p_sys -> b_mouse_drag)
cond	146:17	146:47	9	! p_sys -> b_mouse_mvt && p_sys -> b_mouse_drag
op	146:17	0:0	10	!
water	146:18	0:0	10	p_sys
op	146:23	0:0	10	->
water	146:25	0:0	10	b_mouse_mvt
op	146:37	0:0	10	&&
water	146:40	0:0	10	p_sys
op	146:45	0:0	10	->
water	146:47	0:0	10	b_mouse_drag
stmts	146:62	156:12	9	
water	146:62	0:0	10	{
if	148:16	155:16	10	(p_sys -> s_current_param . i_rotate != 0)
cond	148:21	148:56	11	p_sys -> s_current_param . i_rotate != 0
water	148:21	0:0	12	p_sys
op	148:26	0:0	12	->
water	148:28	0:0	12	s_current_param
op	148:43	0:0	12	.
water	148:44	0:0	12	i_rotate
op	148:53	0:0	12	!=
water	148:56	0:0	12	0
stmts	148:59	155:16	11	
water	148:59	0:0	12	{
call	149:20	149:53	12	vlc_mutex_lock
arg	149:36	149:53	13	&p_sys->pce_lock
op	149:36	0:0	14	&
water	149:37	0:0	14	p_sys
op	149:42	0:0	14	->
water	149:44	0:0	14	pce_lock
water	149:54	0:0	12	;
decl	150:20	150:72	12	uint32_t	i_group_ID
op	150:40	0:0	12	=
water	150:42	0:0	12	p_sys
op	150:47	0:0	12	->
water	150:49	0:0	12	ps_pieces
op	150:58	0:0	12	[
water	150:59	0:0	12	0
op	150:60	0:0	12	]
op	150:61	0:0	12	.
water	150:62	0:0	12	i_group_ID
for	151:20	153:190	12	( uint32_t i = 0 ;i < p_sys -> s_allocated . i_pieces_nbr;i ++)
forinit	0:0	151:39	13	 uint32_t i = 0 ;
decl	151:25	151:39	14	uint32_t	i
op	151:36	0:0	14	=
water	151:38	0:0	14	0
cond	151:41	151:64	13	i < p_sys -> s_allocated . i_pieces_nbr
water	151:41	0:0	14	i
op	151:43	0:0	14	<
water	151:45	0:0	14	p_sys
op	151:50	0:0	14	->
water	151:52	0:0	14	s_allocated
op	151:63	0:0	14	.
water	151:64	0:0	14	i_pieces_nbr
forexpr	151:78	151:79	13	i ++
water	151:78	0:0	14	i
op	151:79	0:0	14	++
stmts	152:24	153:190	13	
if	152:24	153:190	14	(i_group_ID == p_sys -> ps_pieces [ i ] . i_group_ID)
cond	152:29	152:63	15	i_group_ID == p_sys -> ps_pieces [ i ] . i_group_ID
water	152:29	0:0	16	i_group_ID
op	152:40	0:0	16	==
water	152:43	0:0	16	p_sys
op	152:48	0:0	16	->
water	152:50	0:0	16	ps_pieces
op	152:59	0:0	16	[
water	152:60	0:0	16	i
op	152:61	0:0	16	]
op	152:62	0:0	16	.
water	152:63	0:0	16	i_group_ID
stmts	153:28	153:190	15	
call	153:28	153:189	16	puzzle_rotate_pce
arg	153:47	153:55	17	p_filter
water	153:47	0:0	18	p_filter
arg	153:57	153:58	17	i
water	153:57	0:0	18	i
arg	153:60	153:81	17	p_sys->i_mouse_action
water	153:60	0:0	18	p_sys
op	153:65	0:0	18	->
water	153:67	0:0	18	i_mouse_action
arg	153:83	153:113	17	p_sys->ps_pieces[0].i_center_x
water	153:83	0:0	18	p_sys
op	153:88	0:0	18	->
water	153:90	0:0	18	ps_pieces
op	153:99	0:0	18	[
water	153:100	0:0	18	0
op	153:101	0:0	18	]
op	153:102	0:0	18	.
water	153:103	0:0	18	i_center_x
arg	153:115	153:145	17	p_sys->ps_pieces[0].i_center_y
water	153:115	0:0	18	p_sys
op	153:120	0:0	18	->
water	153:122	0:0	18	ps_pieces
op	153:131	0:0	18	[
water	153:132	0:0	18	0
op	153:133	0:0	18	]
op	153:134	0:0	18	.
water	153:135	0:0	18	i_center_y
arg	153:147	153:189	17	p_sys->i_mouse_action!=4?true:false
water	153:147	0:0	18	p_sys
op	153:152	0:0	18	->
water	153:154	0:0	18	i_mouse_action
op	153:169	0:0	18	!=
water	153:172	0:0	18	4
water	153:174	0:0	18	?
water	153:176	0:0	18	true
water	153:181	0:0	18	:
water	153:183	0:0	18	false
water	153:190	0:0	16	;
call	154:20	154:55	12	vlc_mutex_unlock
arg	154:38	154:55	13	&p_sys->pce_lock
op	154:38	0:0	14	&
water	154:39	0:0	14	p_sys
op	154:44	0:0	14	->
water	154:46	0:0	14	pce_lock
water	154:56	0:0	12	;
water	155:16	0:0	12	}
water	156:12	0:0	10	}
water	157:12	0:0	8	p_sys
op	157:17	0:0	8	->
water	157:19	0:0	8	b_mouse_drag
op	157:32	0:0	8	=
water	157:34	0:0	8	false
water	157:39	0:0	8	;
water	158:12	0:0	8	p_sys
op	158:17	0:0	8	->
water	158:19	0:0	8	b_mouse_mvt
op	158:31	0:0	8	=
water	158:33	0:0	8	false
water	158:38	0:0	8	;
water	159:8	0:0	8	}
else	160:8	204:8	4
stmts	161:8	204:8	5	
water	161:8	0:0	6	{
switch	163:12	181:12	6	(p_sys -> i_preview_pos)
cond	163:21	163:28	7	p_sys -> i_preview_pos
water	163:21	0:0	8	p_sys
op	163:26	0:0	8	->
water	163:28	0:0	8	i_preview_pos
stmts	164:12	181:12	7	
water	164:12	0:0	8	{
label	165:14	165:20	8	case 0 :
if	166:16	167:42	8	(p_new -> i_x < ( int ) p_fmt_in -> i_width / 2 && p_new -> i_y < ( int ) p_fmt_in -> i_height / 2)
cond	166:21	166:103	9	p_new -> i_x < ( int ) p_fmt_in -> i_width / 2 && p_new -> i_y < ( int ) p_fmt_in -> i_height / 2
water	166:21	0:0	10	p_new
op	166:26	0:0	10	->
water	166:28	0:0	10	i_x
op	166:32	0:0	10	<
water	166:34	0:0	10	(
water	166:35	0:0	10	int
water	166:38	0:0	10	)
water	166:39	0:0	10	p_fmt_in
op	166:47	0:0	10	->
water	166:49	0:0	10	i_width
op	166:57	0:0	10	/
water	166:59	0:0	10	2
op	166:61	0:0	10	&&
water	166:64	0:0	10	p_new
op	166:69	0:0	10	->
water	166:71	0:0	10	i_y
op	166:75	0:0	10	<
water	166:77	0:0	10	(
water	166:78	0:0	10	int
water	166:81	0:0	10	)
water	166:82	0:0	10	p_fmt_in
op	166:90	0:0	10	->
water	166:92	0:0	10	i_height
op	166:101	0:0	10	/
water	166:103	0:0	10	2
stmts	167:20	167:42	9	
water	167:20	0:0	10	p_sys
op	167:25	0:0	10	->
water	167:27	0:0	10	i_preview_pos
op	167:40	0:0	10	++
water	167:42	0:0	10	;
break	168:16	168:21	8	
label	169:14	169:20	8	case 1 :
if	170:16	171:42	8	(p_new -> i_x > ( int ) p_fmt_in -> i_width / 2 && p_new -> i_y < ( int ) p_fmt_in -> i_height / 2)
cond	170:21	170:103	9	p_new -> i_x > ( int ) p_fmt_in -> i_width / 2 && p_new -> i_y < ( int ) p_fmt_in -> i_height / 2
water	170:21	0:0	10	p_new
op	170:26	0:0	10	->
water	170:28	0:0	10	i_x
op	170:32	0:0	10	>
water	170:34	0:0	10	(
water	170:35	0:0	10	int
water	170:38	0:0	10	)
water	170:39	0:0	10	p_fmt_in
op	170:47	0:0	10	->
water	170:49	0:0	10	i_width
op	170:57	0:0	10	/
water	170:59	0:0	10	2
op	170:61	0:0	10	&&
water	170:64	0:0	10	p_new
op	170:69	0:0	10	->
water	170:71	0:0	10	i_y
op	170:75	0:0	10	<
water	170:77	0:0	10	(
water	170:78	0:0	10	int
water	170:81	0:0	10	)
water	170:82	0:0	10	p_fmt_in
op	170:90	0:0	10	->
water	170:92	0:0	10	i_height
op	170:101	0:0	10	/
water	170:103	0:0	10	2
stmts	171:20	171:42	9	
water	171:20	0:0	10	p_sys
op	171:25	0:0	10	->
water	171:27	0:0	10	i_preview_pos
op	171:40	0:0	10	++
water	171:42	0:0	10	;
break	172:16	172:21	8	
label	173:14	173:20	8	case 2 :
if	174:16	175:42	8	(p_new -> i_x > ( int ) p_fmt_in -> i_width / 2 && p_new -> i_y > ( int ) p_fmt_in -> i_height / 2)
cond	174:21	174:103	9	p_new -> i_x > ( int ) p_fmt_in -> i_width / 2 && p_new -> i_y > ( int ) p_fmt_in -> i_height / 2
water	174:21	0:0	10	p_new
op	174:26	0:0	10	->
water	174:28	0:0	10	i_x
op	174:32	0:0	10	>
water	174:34	0:0	10	(
water	174:35	0:0	10	int
water	174:38	0:0	10	)
water	174:39	0:0	10	p_fmt_in
op	174:47	0:0	10	->
water	174:49	0:0	10	i_width
op	174:57	0:0	10	/
water	174:59	0:0	10	2
op	174:61	0:0	10	&&
water	174:64	0:0	10	p_new
op	174:69	0:0	10	->
water	174:71	0:0	10	i_y
op	174:75	0:0	10	>
water	174:77	0:0	10	(
water	174:78	0:0	10	int
water	174:81	0:0	10	)
water	174:82	0:0	10	p_fmt_in
op	174:90	0:0	10	->
water	174:92	0:0	10	i_height
op	174:101	0:0	10	/
water	174:103	0:0	10	2
stmts	175:20	175:42	9	
water	175:20	0:0	10	p_sys
op	175:25	0:0	10	->
water	175:27	0:0	10	i_preview_pos
op	175:40	0:0	10	++
water	175:42	0:0	10	;
break	176:16	176:21	8	
label	177:14	177:20	8	case 3 :
if	178:16	179:42	8	(p_new -> i_x< ( int ) p_fmt_in -> i_width / 2 && p_new -> i_y >(int ) p_fmt_in -> i_height / 2)
cond	178:21	178:103	9	p_new -> i_x< ( int ) p_fmt_in -> i_width / 2 && p_new -> i_y >(int ) p_fmt_in -> i_height / 2
call	178:21	178:81	10	p_new->i_x
arg	178:78	178:81	11	int
water	178:78	0:0	12	int
water	178:82	0:0	10	p_fmt_in
op	178:90	0:0	10	->
water	178:92	0:0	10	i_height
op	178:101	0:0	10	/
water	178:103	0:0	10	2
stmts	179:20	179:42	9	
water	179:20	0:0	10	p_sys
op	179:25	0:0	10	->
water	179:27	0:0	10	i_preview_pos
op	179:40	0:0	10	++
water	179:42	0:0	10	;
break	180:16	180:21	8	
water	181:12	0:0	8	}
water	182:12	0:0	6	p_sys
op	182:17	0:0	6	->
water	182:19	0:0	6	i_preview_pos
op	182:33	0:0	6	%=
water	182:36	0:0	6	4
water	182:37	0:0	6	;
if	183:12	184:43	6	(!vlc_mouse_IsLeftPressed (p_new ))
cond	183:17	183:49	7	!vlc_mouse_IsLeftPressed (p_new )
op	183:17	0:0	8	!
call	183:18	183:49	8	vlc_mouse_IsLeftPressed
arg	183:43	183:49	9	p_new
water	183:43	0:0	10	p_new
stmts	184:16	184:43	7	
water	184:16	0:0	8	p_sys
op	184:21	0:0	8	->
water	184:23	0:0	8	b_mouse_drag
op	184:36	0:0	8	=
water	184:38	0:0	8	false
water	184:43	0:0	8	;
decl	185:12	185:26	6	int	i_dx
water	185:20	0:0	6	,
decl	185:12	185:26	6	int	i_dy
call	186:12	186:60	6	vlc_mouse_GetMotion
arg	186:33	186:38	7	&i_dx
op	186:33	0:0	8	&
water	186:34	0:0	8	i_dx
arg	186:40	186:45	7	&i_dy
op	186:40	0:0	8	&
water	186:41	0:0	8	i_dy
arg	186:47	186:52	7	p_old
water	186:47	0:0	8	p_old
arg	186:54	186:60	7	p_new
water	186:54	0:0	8	p_new
water	186:61	0:0	6	;
if	187:12	188:41	6	(i_dx != 0 || i_dy != 0)
cond	187:17	187:38	7	i_dx != 0 || i_dy != 0
water	187:17	0:0	8	i_dx
op	187:22	0:0	8	!=
water	187:25	0:0	8	0
op	187:27	0:0	8	||
water	187:30	0:0	8	i_dy
op	187:35	0:0	8	!=
water	187:38	0:0	8	0
stmts	188:16	188:41	7	
water	188:16	0:0	8	p_sys
op	188:21	0:0	8	->
water	188:23	0:0	8	b_mouse_mvt
op	188:35	0:0	8	=
water	188:37	0:0	8	true
water	188:41	0:0	8	;
if	189:12	203:12	6	(p_sys -> b_mouse_drag)
cond	189:16	189:23	7	p_sys -> b_mouse_drag
water	189:16	0:0	8	p_sys
op	189:21	0:0	8	->
water	189:23	0:0	8	b_mouse_drag
stmts	189:37	203:12	7	
water	189:37	0:0	8	{
if	190:16	196:16	8	(( p_new -> i_x <= 0 ) || ( p_new -> i_y <= 0 ) || ( p_new -> i_x >= ( int ) p_fmt_in -> i_width ) || ( p_new -> i_y >= ( int ) p_fmt_in -> i_height ))
cond	190:21	191:68	9	( p_new -> i_x <= 0 ) || ( p_new -> i_y <= 0 ) || ( p_new -> i_x >= ( int ) p_fmt_in -> i_width ) || ( p_new -> i_y >= ( int ) p_fmt_in -> i_height )
water	190:21	0:0	10	(
water	190:23	0:0	10	p_new
op	190:28	0:0	10	->
water	190:30	0:0	10	i_x
op	190:34	0:0	10	<=
water	190:37	0:0	10	0
water	190:39	0:0	10	)
op	190:41	0:0	10	||
water	190:44	0:0	10	(
water	190:46	0:0	10	p_new
op	190:51	0:0	10	->
water	190:53	0:0	10	i_y
op	190:57	0:0	10	<=
water	190:61	0:0	10	0
water	190:63	0:0	10	)
op	190:65	0:0	10	||
water	190:68	0:0	10	(
water	190:70	0:0	10	p_new
op	190:75	0:0	10	->
water	190:77	0:0	10	i_x
op	190:81	0:0	10	>=
water	190:84	0:0	10	(
water	190:85	0:0	10	int
water	190:88	0:0	10	)
water	190:90	0:0	10	p_fmt_in
op	190:98	0:0	10	->
water	190:100	0:0	10	i_width
water	190:108	0:0	10	)
op	191:24	0:0	10	||
water	191:27	0:0	10	(
water	191:29	0:0	10	p_new
op	191:34	0:0	10	->
water	191:36	0:0	10	i_y
op	191:40	0:0	10	>=
water	191:43	0:0	10	(
water	191:44	0:0	10	int
water	191:47	0:0	10	)
water	191:49	0:0	10	p_fmt_in
op	191:57	0:0	10	->
water	191:59	0:0	10	i_height
water	191:68	0:0	10	)
stmts	192:16	196:16	9	
water	192:16	0:0	10	{
water	194:20	0:0	10	p_sys
op	194:25	0:0	10	->
water	194:27	0:0	10	b_mouse_drag
op	194:40	0:0	10	=
water	194:42	0:0	10	false
water	194:47	0:0	10	;
water	195:20	0:0	10	p_sys
op	195:25	0:0	10	->
water	195:27	0:0	10	b_mouse_mvt
op	195:39	0:0	10	=
water	195:41	0:0	10	true
water	195:45	0:0	10	;
water	196:16	0:0	10	}
else	197:16	202:16	8
stmts	197:21	202:16	9	
if	197:21	202:16	10	(i_dx != 0 || i_dy != 0)
cond	197:26	197:47	11	i_dx != 0 || i_dy != 0
water	197:26	0:0	12	i_dx
op	197:31	0:0	12	!=
water	197:34	0:0	12	0
op	197:36	0:0	12	||
water	197:39	0:0	12	i_dy
op	197:44	0:0	12	!=
water	197:47	0:0	12	0
stmts	198:16	202:16	11	
water	198:16	0:0	12	{
call	199:20	199:53	12	vlc_mutex_lock
arg	199:36	199:53	13	&p_sys->pce_lock
op	199:36	0:0	14	&
water	199:37	0:0	14	p_sys
op	199:42	0:0	14	->
water	199:44	0:0	14	pce_lock
water	199:54	0:0	12	;
call	200:20	200:84	12	puzzle_move_group
arg	200:39	200:47	13	p_filter
water	200:39	0:0	14	p_filter
arg	200:49	200:72	13	p_sys->i_mouse_drag_pce
water	200:49	0:0	14	p_sys
op	200:54	0:0	14	->
water	200:56	0:0	14	i_mouse_drag_pce
arg	200:74	200:78	13	i_dx
water	200:74	0:0	14	i_dx
arg	200:80	200:84	13	i_dy
water	200:80	0:0	14	i_dy
water	200:85	0:0	12	;
call	201:20	201:55	12	vlc_mutex_unlock
arg	201:38	201:55	13	&p_sys->pce_lock
op	201:38	0:0	14	&
water	201:39	0:0	14	p_sys
op	201:44	0:0	14	->
water	201:46	0:0	14	pce_lock
water	201:56	0:0	12	;
water	202:16	0:0	12	}
water	203:12	0:0	8	}
water	204:8	0:0	6	}
water	205:4	0:0	4	}
return	206:4	206:23	2	VLC_EGENERIC
water	206:11	0:0	3	VLC_EGENERIC
