func	2:0	67:0	0	static HRESULT	FillBuffer
params	2:25	0:0	1	
param	2:27	2:44	2	vlc_object_t *	obj
param	2:46	2:70	2	aout_stream_sys_t *	p_sys
param	3:27	3:45	2	block_t *	p_buffer
stmnts	0:0	66:16	1	
decl	5:4	5:74	2	size_t	towrite
op	5:19	0:0	2	=
water	5:21	0:0	2	(
water	5:22	0:0	2	p_buffer
op	5:31	0:0	2	!=
water	5:34	0:0	2	NULL
water	5:38	0:0	2	)
water	5:40	0:0	2	?
water	5:42	0:0	2	p_buffer
op	5:50	0:0	2	->
water	5:52	0:0	2	i_buffer
water	5:61	0:0	2	:
water	5:63	0:0	2	DS_BUF_SIZE
decl	6:4	6:42	2	void	*p_write_position
water	6:26	0:0	2	,
decl	6:4	6:42	2	void	*p_wrap_around
decl	7:4	7:36	2	unsigned long	l_bytes1
water	7:26	0:0	2	,
decl	7:4	7:36	2	unsigned long	l_bytes2
decl	8:4	8:20	2	HRESULT	dsresult
call	9:4	9:33	2	vlc_mutex_lock
arg	9:20	9:33	3	&p_sys->lock
op	9:20	0:0	4	&
water	9:21	0:0	4	p_sys
op	9:26	0:0	4	->
water	9:28	0:0	4	lock
water	9:34	0:0	2	;
water	11:4	0:0	2	dsresult
op	11:13	0:0	2	=
call	11:15	19:13	2	IDirectSoundBuffer_Lock
arg	12:11	12:28	3	p_sys->p_dsbuffer
water	12:11	0:0	4	p_sys
op	12:16	0:0	4	->
water	12:18	0:0	4	p_dsbuffer
arg	13:11	13:25	3	p_sys->i_write
water	13:11	0:0	4	p_sys
op	13:16	0:0	4	->
water	13:18	0:0	4	i_write
arg	14:11	14:18	3	towrite
water	14:11	0:0	4	towrite
arg	15:11	15:28	3	&p_write_position
op	15:11	0:0	4	&
water	15:12	0:0	4	p_write_position
arg	16:11	16:20	3	&l_bytes1
op	16:11	0:0	4	&
water	16:12	0:0	4	l_bytes1
arg	17:11	17:25	3	&p_wrap_around
op	17:11	0:0	4	&
water	17:12	0:0	4	p_wrap_around
arg	18:11	18:20	3	&l_bytes2
op	18:11	0:0	4	&
water	18:12	0:0	4	l_bytes2
arg	19:11	19:13	3	0
water	19:11	0:0	4	0
water	19:14	0:0	2	;
if	20:4	32:4	2	(dsresult == DSERR_BUFFERLOST)
cond	20:8	20:20	3	dsresult == DSERR_BUFFERLOST
water	20:8	0:0	4	dsresult
op	20:17	0:0	4	==
water	20:20	0:0	4	DSERR_BUFFERLOST
stmts	21:4	32:4	3	
water	21:4	0:0	4	{
call	22:8	22:54	4	IDirectSoundBuffer_Restore
arg	22:36	22:54	5	p_sys->p_dsbuffer
water	22:36	0:0	6	p_sys
op	22:41	0:0	6	->
water	22:43	0:0	6	p_dsbuffer
water	22:55	0:0	4	;
water	23:8	0:0	4	dsresult
op	23:17	0:0	4	=
call	23:19	31:33	4	IDirectSoundBuffer_Lock
arg	24:31	24:48	5	p_sys->p_dsbuffer
water	24:31	0:0	6	p_sys
op	24:36	0:0	6	->
water	24:38	0:0	6	p_dsbuffer
arg	25:31	25:45	5	p_sys->i_write
water	25:31	0:0	6	p_sys
op	25:36	0:0	6	->
water	25:38	0:0	6	i_write
arg	26:31	26:38	5	towrite
water	26:31	0:0	6	towrite
arg	27:31	27:48	5	&p_write_position
op	27:31	0:0	6	&
water	27:32	0:0	6	p_write_position
arg	28:31	28:40	5	&l_bytes1
op	28:31	0:0	6	&
water	28:32	0:0	6	l_bytes1
arg	29:31	29:45	5	&p_wrap_around
op	29:31	0:0	6	&
water	29:32	0:0	6	p_wrap_around
arg	30:31	30:40	5	&l_bytes2
op	30:31	0:0	6	&
water	30:32	0:0	6	l_bytes2
arg	31:31	31:33	5	0
water	31:31	0:0	6	0
water	31:34	0:0	4	;
water	32:4	0:0	4	}
if	33:4	40:4	2	(dsresult != DS_OK)
cond	33:8	33:20	3	dsresult != DS_OK
water	33:8	0:0	4	dsresult
op	33:17	0:0	4	!=
water	33:20	0:0	4	DS_OK
stmts	34:4	40:4	3	
water	34:4	0:0	4	{
call	35:8	35:44	4	msg_Warn
arg	35:18	35:21	5	obj
water	35:18	0:0	6	obj
arg	35:23	35:44	5	"cannot lock buffer"
water	35:23	0:0	6	"cannot lock buffer"
water	35:45	0:0	4	;
if	36:8	37:37	4	(p_buffer != NULL)
cond	36:12	36:24	5	p_buffer != NULL
water	36:12	0:0	6	p_buffer
op	36:21	0:0	6	!=
water	36:24	0:0	6	NULL
stmts	37:12	37:37	5	
call	37:12	37:36	6	block_Release
arg	37:27	37:36	7	p_buffer
water	37:27	0:0	8	p_buffer
water	37:37	0:0	6	;
call	38:8	38:39	4	vlc_mutex_unlock
arg	38:26	38:39	5	&p_sys->lock
op	38:26	0:0	6	&
water	38:27	0:0	6	p_sys
op	38:32	0:0	6	->
water	38:34	0:0	6	lock
water	38:40	0:0	4	;
return	39:8	39:23	4	dsresult
water	39:15	0:0	5	dsresult
water	40:4	0:0	4	}
if	41:4	45:4	2	(p_buffer == NULL)
cond	41:8	41:20	3	p_buffer == NULL
water	41:8	0:0	4	p_buffer
op	41:17	0:0	4	==
water	41:20	0:0	4	NULL
stmts	42:4	45:4	3	
water	42:4	0:0	4	{
call	43:8	43:46	4	memset
arg	43:16	43:32	5	p_write_position
water	43:16	0:0	6	p_write_position
arg	43:34	43:35	5	0
water	43:34	0:0	6	0
arg	43:37	43:46	5	l_bytes1
water	43:37	0:0	6	l_bytes1
water	43:47	0:0	4	;
call	44:8	44:43	4	memset
arg	44:16	44:29	5	p_wrap_around
water	44:16	0:0	6	p_wrap_around
arg	44:31	44:32	5	0
water	44:31	0:0	6	0
arg	44:34	44:43	5	l_bytes2
water	44:34	0:0	6	l_bytes2
water	44:44	0:0	4	;
water	45:4	0:0	4	}
else	46:4	58:4	2
stmts	47:4	58:4	3	
water	47:4	0:0	4	{
if	48:8	51:48	4	(p_sys -> chans_to_reorder)
cond	48:12	48:19	5	p_sys -> chans_to_reorder
water	48:12	0:0	6	p_sys
op	48:17	0:0	6	->
water	48:19	0:0	6	chans_to_reorder
stmts	49:12	51:48	5	
call	49:12	51:47	6	aout_ChannelReorder
arg	49:33	49:51	7	p_buffer->p_buffer
water	49:33	0:0	8	p_buffer
op	49:41	0:0	8	->
water	49:43	0:0	8	p_buffer
arg	49:53	49:71	7	p_buffer->i_buffer
water	49:53	0:0	8	p_buffer
op	49:61	0:0	8	->
water	49:63	0:0	8	i_buffer
arg	50:33	50:56	7	p_sys->chans_to_reorder
water	50:33	0:0	8	p_sys
op	50:38	0:0	8	->
water	50:40	0:0	8	chans_to_reorder
arg	50:58	50:75	7	p_sys->chan_table
water	50:58	0:0	8	p_sys
op	50:63	0:0	8	->
water	50:65	0:0	8	chan_table
arg	51:33	51:47	7	p_sys->format
water	51:33	0:0	8	p_sys
op	51:38	0:0	8	->
water	51:40	0:0	8	format
water	51:48	0:0	6	;
call	52:8	52:63	4	memcpy
arg	52:16	52:32	5	p_write_position
water	52:16	0:0	6	p_write_position
arg	52:34	52:52	5	p_buffer->p_buffer
water	52:34	0:0	6	p_buffer
op	52:42	0:0	6	->
water	52:44	0:0	6	p_buffer
arg	52:54	52:63	5	l_bytes1
water	52:54	0:0	6	l_bytes1
water	52:64	0:0	4	;
if	53:8	54:76	4	(p_wrap_around && l_bytes2)
cond	53:12	53:29	5	p_wrap_around && l_bytes2
water	53:12	0:0	6	p_wrap_around
op	53:26	0:0	6	&&
water	53:29	0:0	6	l_bytes2
stmts	54:12	54:76	5	
call	54:12	54:75	6	memcpy
arg	54:20	54:33	7	p_wrap_around
water	54:20	0:0	8	p_wrap_around
arg	54:35	54:64	7	p_buffer->p_buffer+l_bytes1
water	54:35	0:0	8	p_buffer
op	54:43	0:0	8	->
water	54:45	0:0	8	p_buffer
op	54:54	0:0	8	+
water	54:56	0:0	8	l_bytes1
arg	54:66	54:75	7	l_bytes2
water	54:66	0:0	8	l_bytes2
water	54:76	0:0	6	;
if	55:8	56:43	4	(unlikely (( l_bytes1 + l_bytes2 ) < p_buffer -> i_buffer ))
cond	55:12	55:67	5	unlikely (( l_bytes1 + l_bytes2 ) < p_buffer -> i_buffer )
call	55:12	55:67	6	unlikely
arg	55:22	55:67	7	(l_bytes1+l_bytes2)<p_buffer->i_buffer
water	55:22	0:0	8	(
water	55:24	0:0	8	l_bytes1
op	55:33	0:0	8	+
water	55:35	0:0	8	l_bytes2
water	55:44	0:0	8	)
op	55:46	0:0	8	<
water	55:48	0:0	8	p_buffer
op	55:56	0:0	8	->
water	55:58	0:0	8	i_buffer
stmts	56:12	56:43	5	
call	56:12	56:42	6	msg_Err
arg	56:21	56:24	7	obj
water	56:21	0:0	8	obj
arg	56:26	56:42	7	"Buffer overrun"
water	56:26	0:0	8	"Buffer overrun"
water	56:43	0:0	6	;
call	57:8	57:32	4	block_Release
arg	57:23	57:32	5	p_buffer
water	57:23	0:0	6	p_buffer
water	57:33	0:0	4	;
water	58:4	0:0	4	}
call	60:4	61:55	2	IDirectSoundBuffer_Unlock
arg	60:31	60:48	3	p_sys->p_dsbuffer
water	60:31	0:0	4	p_sys
op	60:36	0:0	4	->
water	60:38	0:0	4	p_dsbuffer
arg	60:50	60:66	3	p_write_position
water	60:50	0:0	4	p_write_position
arg	60:68	60:76	3	l_bytes1
water	60:68	0:0	4	l_bytes1
arg	61:31	61:44	3	p_wrap_around
water	61:31	0:0	4	p_wrap_around
arg	61:46	61:55	3	l_bytes2
water	61:46	0:0	4	l_bytes2
water	61:56	0:0	2	;
water	62:4	0:0	2	p_sys
op	62:9	0:0	2	->
water	62:11	0:0	2	i_write
op	62:19	0:0	2	+=
water	62:22	0:0	2	towrite
water	62:29	0:0	2	;
water	63:4	0:0	2	p_sys
op	63:9	0:0	2	->
water	63:11	0:0	2	i_write
op	63:19	0:0	2	%=
water	63:22	0:0	2	DS_BUF_SIZE
water	63:33	0:0	2	;
water	64:4	0:0	2	p_sys
op	64:9	0:0	2	->
water	64:11	0:0	2	i_data
op	64:18	0:0	2	+=
water	64:21	0:0	2	towrite
water	64:28	0:0	2	;
call	65:4	65:35	2	vlc_mutex_unlock
arg	65:22	65:35	3	&p_sys->lock
op	65:22	0:0	4	&
water	65:23	0:0	4	p_sys
op	65:28	0:0	4	->
water	65:30	0:0	4	lock
water	65:36	0:0	2	;
return	66:4	66:16	2	DS_OK
water	66:11	0:0	3	DS_OK
