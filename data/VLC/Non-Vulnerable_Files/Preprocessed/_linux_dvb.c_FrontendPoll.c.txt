func	2:0	72:0	0	void	FrontendPoll
params	2:17	0:0	1	
param	2:19	2:38	2	access_t *	p_access
stmnts	0:0	71:4	1	
decl	4:4	4:41	2	access_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	p_access
op	4:34	0:0	2	->
water	4:36	0:0	2	p_sys
decl	5:4	5:47	2	frontend_t	*p_frontend
op	5:28	0:0	2	=
water	5:30	0:0	2	p_sys
op	5:35	0:0	2	->
water	5:37	0:0	2	p_frontend
decl	6:4	6:35	2	struct dvb_frontend_event	event
decl	7:4	7:32	2	fe_status_t	i_status
water	7:24	0:0	2	,
decl	7:4	7:32	2	fe_status_t	i_diff
for	8:4	71:4	2	(;;)
forinit	8:9	8:9	3	;
water	8:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	9:4	71:4	3	
water	9:4	0:0	4	{
if	10:8	16:8	4	(ioctl (p_sys -> i_frontend_handle ,FE_GET_EVENT ,& event ) < 0)
cond	10:12	10:70	5	ioctl (p_sys -> i_frontend_handle ,FE_GET_EVENT ,& event ) < 0
call	10:12	10:66	6	ioctl
arg	10:19	10:43	7	p_sys->i_frontend_handle
water	10:19	0:0	8	p_sys
op	10:24	0:0	8	->
water	10:26	0:0	8	i_frontend_handle
arg	10:45	10:57	7	FE_GET_EVENT
water	10:45	0:0	8	FE_GET_EVENT
arg	10:59	10:66	7	&event
op	10:59	0:0	8	&
water	10:60	0:0	8	event
op	10:68	0:0	6	<
water	10:70	0:0	6	0
stmts	11:8	16:8	5	
water	11:8	0:0	6	{
if	12:12	14:48	6	(errno != EWOULDBLOCK)
cond	12:16	12:25	7	errno != EWOULDBLOCK
water	12:16	0:0	8	errno
op	12:22	0:0	8	!=
water	12:25	0:0	8	EWOULDBLOCK
stmts	13:16	14:48	7	
call	13:16	14:47	8	msg_Err
arg	13:25	13:33	9	p_access
water	13:25	0:0	10	p_access
arg	13:35	13:61	9	"frontend event error: %s"
water	13:35	0:0	10	"frontend event error: %s"
arg	14:25	14:47	9	vlc_strerror_c(errno)
call	14:25	14:45	10	vlc_strerror_c
arg	14:40	14:45	11	errno
water	14:40	0:0	12	errno
water	14:48	0:0	8	;
return	15:12	15:18	6	
water	16:8	0:0	6	}
water	17:8	0:0	4	i_status
op	17:17	0:0	4	=
water	17:19	0:0	4	event
op	17:24	0:0	4	.
water	17:25	0:0	4	status
water	17:31	0:0	4	;
water	18:8	0:0	4	i_diff
op	18:15	0:0	4	=
water	18:17	0:0	4	i_status
op	18:26	0:0	4	^
water	18:28	0:0	4	p_frontend
op	18:38	0:0	4	->
water	18:40	0:0	4	i_last_status
water	18:53	0:0	4	;
water	19:8	0:0	4	p_frontend
op	19:18	0:0	4	->
water	19:20	0:0	4	i_last_status
op	19:34	0:0	4	=
water	19:36	0:0	4	i_status
water	19:44	0:0	4	;
water	20:8	0:0	4	{
water	0:0	0:0	4	STATEMENTS
water	22:8	0:0	4	}
if	23:8	69:8	4	(i_diff & ( x ))
cond	23:13	23:24	5	i_diff & ( x )
water	23:13	0:0	6	i_diff
op	23:20	0:0	6	&
water	23:22	0:0	6	(
water	23:23	0:0	6	x
water	23:24	0:0	6	)
stmts	24:8	69:8	5	
water	24:8	0:0	6	{
if	25:12	27:67	6	(i_status & ( x ))
cond	25:17	25:30	7	i_status & ( x )
water	25:17	0:0	8	i_status
op	25:26	0:0	8	&
water	25:28	0:0	8	(
water	25:29	0:0	8	x
water	25:30	0:0	8	)
stmts	26:12	27:67	7	
call	26:12	26:33	8	IF_UP
arg	26:19	26:33	9	FE_HAS_SIGNAL
water	26:19	0:0	10	FE_HAS_SIGNAL
call	27:16	27:66	8	msg_Dbg
arg	27:25	27:33	9	p_access
water	27:25	0:0	10	p_access
arg	27:35	27:66	9	"frontend has acquired signal"
water	27:35	0:0	10	"frontend has acquired signal"
water	27:67	0:0	8	;
else	28:12	29:63	6
stmts	29:16	29:63	7	
call	29:16	29:62	8	msg_Dbg
arg	29:25	29:33	9	p_access
water	29:25	0:0	10	p_access
arg	29:35	29:62	9	"frontend has lost signal"
water	29:35	0:0	10	"frontend has lost signal"
water	29:63	0:0	8	;
call	30:12	30:34	6	IF_UP
arg	30:19	30:34	7	FE_HAS_CARRIER
water	30:19	0:0	8	FE_HAS_CARRIER
call	31:16	31:67	6	msg_Dbg
arg	31:25	31:33	7	p_access
water	31:25	0:0	8	p_access
arg	31:35	31:67	7	"frontend has acquired carrier"
water	31:35	0:0	8	"frontend has acquired carrier"
water	31:68	0:0	6	;
else	32:12	33:64	6
stmts	33:16	33:64	7	
call	33:16	33:63	8	msg_Dbg
arg	33:25	33:33	9	p_access
water	33:25	0:0	10	p_access
arg	33:35	33:63	9	"frontend has lost carrier"
water	33:35	0:0	10	"frontend has lost carrier"
water	33:64	0:0	8	;
call	34:12	34:34	6	IF_UP
arg	34:19	34:34	7	FE_HAS_VITERBI
water	34:19	0:0	8	FE_HAS_VITERBI
call	35:16	35:70	6	msg_Dbg
arg	35:25	35:33	7	p_access
water	35:25	0:0	8	p_access
arg	35:35	35:70	7	"frontend has acquired stable FEC"
water	35:35	0:0	8	"frontend has acquired stable FEC"
water	35:71	0:0	6	;
else	36:12	37:60	6
stmts	37:16	37:60	7	
call	37:16	37:59	8	msg_Dbg
arg	37:25	37:33	9	p_access
water	37:25	0:0	10	p_access
arg	37:35	37:59	9	"frontend has lost FEC"
water	37:35	0:0	10	"frontend has lost FEC"
water	37:60	0:0	8	;
call	38:12	38:31	6	IF_UP
arg	38:19	38:31	7	FE_HAS_SYNC
water	38:19	0:0	8	FE_HAS_SYNC
call	39:16	39:64	6	msg_Dbg
arg	39:25	39:33	7	p_access
water	39:25	0:0	8	p_access
arg	39:35	39:64	7	"frontend has acquired sync"
water	39:35	0:0	8	"frontend has acquired sync"
water	39:65	0:0	6	;
else	40:12	41:61	6
stmts	41:16	41:61	7	
call	41:16	41:60	8	msg_Dbg
arg	41:25	41:33	9	p_access
water	41:25	0:0	10	p_access
arg	41:35	41:60	9	"frontend has lost sync"
water	41:35	0:0	10	"frontend has lost sync"
water	41:61	0:0	8	;
water	42:12	0:0	6	IF_UP
water	42:17	0:0	6	(
water	42:19	0:0	6	FE_HAS_LOCK
water	42:31	0:0	6	)
water	43:12	0:0	6	{
decl	44:16	44:41	6	frontend_statistic_t	stat
call	45:16	45:64	6	msg_Dbg
arg	45:25	45:33	7	p_access
water	45:25	0:0	8	p_access
arg	45:35	45:64	7	"frontend has acquired lock"
water	45:35	0:0	8	"frontend has acquired lock"
water	45:65	0:0	6	;
water	46:16	0:0	6	p_sys
op	46:21	0:0	6	->
water	46:23	0:0	6	i_frontend_timeout
op	46:42	0:0	6	=
water	46:44	0:0	6	0
water	46:45	0:0	6	;
if	48:16	56:16	6	(!FrontendGetStatistic (p_access ,& stat ))
cond	48:20	48:59	7	!FrontendGetStatistic (p_access ,& stat )
op	48:20	0:0	8	!
call	48:21	48:59	8	FrontendGetStatistic
arg	48:43	48:51	9	p_access
water	48:43	0:0	10	p_access
arg	48:53	48:59	9	&stat
op	48:53	0:0	10	&
water	48:54	0:0	10	stat
stmts	49:16	56:16	7	
water	49:16	0:0	8	{
if	50:20	51:79	8	(stat . i_ber >= 0)
cond	50:24	50:38	9	stat . i_ber >= 0
water	50:24	0:0	10	stat
op	50:28	0:0	10	.
water	50:29	0:0	10	i_ber
op	50:35	0:0	10	>=
water	50:38	0:0	10	0
stmts	51:24	51:79	9	
call	51:24	51:78	10	msg_Dbg
arg	51:33	51:41	11	p_access
water	51:33	0:0	12	p_access
arg	51:43	51:65	11	"- Bit error rate: %d"
water	51:43	0:0	12	"- Bit error rate: %d"
arg	51:67	51:78	11	stat.i_ber
water	51:67	0:0	12	stat
op	51:71	0:0	12	.
water	51:72	0:0	12	i_ber
water	51:79	0:0	10	;
if	52:20	53:91	8	(stat . i_signal_strenth >= 0)
cond	52:24	52:49	9	stat . i_signal_strenth >= 0
water	52:24	0:0	10	stat
op	52:28	0:0	10	.
water	52:29	0:0	10	i_signal_strenth
op	52:46	0:0	10	>=
water	52:49	0:0	10	0
stmts	53:24	53:91	9	
call	53:24	53:90	10	msg_Dbg
arg	53:33	53:41	11	p_access
water	53:33	0:0	12	p_access
arg	53:43	53:66	11	"- Signal strength: %d"
water	53:43	0:0	12	"- Signal strength: %d"
arg	53:68	53:90	11	stat.i_signal_strenth
water	53:68	0:0	12	stat
op	53:72	0:0	12	.
water	53:73	0:0	12	i_signal_strenth
water	53:91	0:0	10	;
if	54:20	55:68	8	(stat . i_snr >= 0)
cond	54:24	54:38	9	stat . i_snr >= 0
water	54:24	0:0	10	stat
op	54:28	0:0	10	.
water	54:29	0:0	10	i_snr
op	54:35	0:0	10	>=
water	54:38	0:0	10	0
stmts	55:24	55:68	9	
call	55:24	55:67	10	msg_Dbg
arg	55:33	55:41	11	p_access
water	55:33	0:0	12	p_access
arg	55:43	55:54	11	"- SNR: %d"
water	55:43	0:0	12	"- SNR: %d"
arg	55:56	55:67	11	stat.i_snr
water	55:56	0:0	12	stat
op	55:60	0:0	12	.
water	55:61	0:0	12	i_snr
water	55:68	0:0	10	;
water	56:16	0:0	8	}
water	57:12	0:0	6	}
else	58:12	62:12	6
stmts	59:12	62:12	7	
water	59:12	0:0	8	{
call	60:16	60:60	8	msg_Dbg
arg	60:25	60:33	9	p_access
water	60:25	0:0	10	p_access
arg	60:35	60:60	9	"frontend has lost lock"
water	60:35	0:0	10	"frontend has lost lock"
water	60:61	0:0	8	;
water	61:16	0:0	8	p_sys
op	61:21	0:0	8	->
water	61:23	0:0	8	i_frontend_timeout
op	61:42	0:0	8	=
call	61:44	61:50	8	mdate
op	61:52	0:0	8	+
water	61:54	0:0	8	FRONTEND_LOCK_TIMEOUT
water	61:75	0:0	8	;
water	62:12	0:0	8	}
water	63:12	0:0	6	IF_UP
water	63:17	0:0	6	(
water	63:19	0:0	6	FE_REINIT
water	63:29	0:0	6	)
water	64:12	0:0	6	{
call	66:16	66:56	6	msg_Warn
arg	66:26	66:34	7	p_access
water	66:26	0:0	8	p_access
arg	66:36	66:56	7	"reiniting frontend"
water	66:36	0:0	8	"reiniting frontend"
water	66:57	0:0	6	;
call	67:16	67:38	6	FrontendSet
arg	67:29	67:38	7	p_access
water	67:29	0:0	8	p_access
water	67:39	0:0	6	;
water	68:12	0:0	6	}
water	69:8	0:0	6	}
water	71:4	0:0	4	}
