func	2:0	216:0	0	char *	en50221_Status
params	2:20	0:0	1	
param	2:22	2:34	2	cam_t *	p_cam
param	2:36	2:54	2	char *	psz_request
stmnts	4:4	215:14	1	
if	4:4	18:4	2	(psz_request != NULL && * psz_request)
cond	4:8	4:32	3	psz_request != NULL && * psz_request
water	4:8	0:0	4	psz_request
op	4:20	0:0	4	!=
water	4:23	0:0	4	NULL
op	4:28	0:0	4	&&
op	4:31	0:0	4	*
water	4:32	0:0	4	psz_request
stmts	5:4	18:4	3	
water	5:4	0:0	4	{
for	8:8	17:8	4	(unsigned i_slot = 0 ;i_slot < p_cam -> i_nb_slots;i_slot ++)
forinit	8:14	8:33	5	unsigned i_slot = 0 ;
water	8:14	0:0	6	unsigned
water	8:23	0:0	6	i_slot
op	8:30	0:0	6	=
water	8:32	0:0	6	0
water	8:33	0:0	6	;
cond	8:35	8:51	5	i_slot < p_cam -> i_nb_slots
water	8:35	0:0	6	i_slot
op	8:42	0:0	6	<
water	8:44	0:0	6	p_cam
op	8:49	0:0	6	->
water	8:51	0:0	6	i_nb_slots
forexpr	8:63	8:69	5	i_slot ++
water	8:63	0:0	6	i_slot
op	8:69	0:0	6	++
stmts	9:8	17:8	5	
water	9:8	0:0	6	{
if	10:12	16:12	6	(p_cam -> pb_slot_mmi_undisplayed [ i_slot ])
cond	10:17	10:54	7	p_cam -> pb_slot_mmi_undisplayed [ i_slot ]
water	10:17	0:0	8	p_cam
op	10:22	0:0	8	->
water	10:24	0:0	8	pb_slot_mmi_undisplayed
op	10:47	0:0	8	[
water	10:48	0:0	8	i_slot
op	10:54	0:0	8	]
stmts	11:12	16:12	7	
water	11:12	0:0	8	{
water	12:16	0:0	8	psz_request
op	12:28	0:0	8	=
water	12:30	0:0	8	NULL
water	12:34	0:0	8	;
call	13:16	14:77	8	msg_Dbg
arg	13:25	13:35	9	p_cam->obj
water	13:25	0:0	10	p_cam
op	13:30	0:0	10	->
water	13:32	0:0	10	obj
arg	14:25	14:77	9	"ignoring user request because of a new MMI object"
water	14:25	0:0	10	"ignoring user request because of a new MMI object"
water	14:78	0:0	8	;
break	15:16	15:21	8	
water	16:12	0:0	8	}
water	17:8	0:0	6	}
water	18:4	0:0	4	}
if	19:4	90:4	2	(psz_request != NULL && * psz_request)
cond	19:8	19:32	3	psz_request != NULL && * psz_request
water	19:8	0:0	4	psz_request
op	19:20	0:0	4	!=
water	19:23	0:0	4	NULL
op	19:28	0:0	4	&&
op	19:31	0:0	4	*
water	19:32	0:0	4	psz_request
stmts	20:4	90:4	3	
water	20:4	0:0	4	{
decl	22:8	22:24	4	mmi_t	mmi_object
decl	23:8	23:27	4	char	psz_value[255]
decl	24:8	24:18	4	int	i_slot
decl	25:8	25:25	4	bool	b_ok
op	25:18	0:0	4	=
water	25:20	0:0	4	false
if	26:8	30:8	4	(HTTPExtractValue (psz_request ,"slot" ,psz_value ,sizeof ( psz_value ) ) == NULL)
cond	26:13	27:58	5	HTTPExtractValue (psz_request ,"slot" ,psz_value ,sizeof ( psz_value ) ) == NULL
call	26:13	27:53	6	HTTPExtractValue
arg	26:31	26:42	7	psz_request
water	26:31	0:0	8	psz_request
arg	26:44	26:50	7	"slot"
water	26:44	0:0	8	"slot"
arg	26:52	26:61	7	psz_value
water	26:52	0:0	8	psz_value
arg	27:35	27:53	7	sizeof(psz_value)
op	27:35	0:0	8	sizeof
water	27:41	0:0	8	(
water	27:42	0:0	8	psz_value
water	27:51	0:0	8	)
op	27:55	0:0	6	==
water	27:58	0:0	6	NULL
stmts	28:8	30:8	5	
water	28:8	0:0	6	{
return	29:12	29:58	6	strdup("invalid request parameter\n")
call	29:19	29:57	7	strdup
arg	29:27	29:57	8	"invalid request parameter\n"
water	29:27	0:0	9	"invalid request parameter\n"
water	30:8	0:0	6	}
water	31:8	0:0	4	i_slot
op	31:15	0:0	4	=
call	31:17	31:31	4	atoi
arg	31:22	31:31	5	psz_value
water	31:22	0:0	6	psz_value
water	31:32	0:0	4	;
if	32:8	37:8	4	(HTTPExtractValue (psz_request ,"open" ,psz_value ,sizeof ( psz_value ) ) != NULL)
cond	32:13	33:58	5	HTTPExtractValue (psz_request ,"open" ,psz_value ,sizeof ( psz_value ) ) != NULL
call	32:13	33:53	6	HTTPExtractValue
arg	32:31	32:42	7	psz_request
water	32:31	0:0	8	psz_request
arg	32:44	32:50	7	"open"
water	32:44	0:0	8	"open"
arg	32:52	32:61	7	psz_value
water	32:52	0:0	8	psz_value
arg	33:35	33:53	7	sizeof(psz_value)
op	33:35	0:0	8	sizeof
water	33:41	0:0	8	(
water	33:42	0:0	8	psz_value
water	33:51	0:0	8	)
op	33:55	0:0	6	!=
water	33:58	0:0	6	NULL
stmts	34:8	37:8	5	
water	34:8	0:0	6	{
call	35:12	35:43	6	en50221_OpenMMI
arg	35:29	35:34	7	p_cam
water	35:29	0:0	8	p_cam
arg	35:36	35:43	7	i_slot
water	35:36	0:0	8	i_slot
water	35:44	0:0	6	;
return	36:12	36:23	6	NULL
water	36:19	0:0	7	NULL
water	37:8	0:0	6	}
if	38:8	43:8	4	(HTTPExtractValue (psz_request ,"close" ,psz_value ,sizeof ( psz_value ) ) != NULL)
cond	38:13	39:58	5	HTTPExtractValue (psz_request ,"close" ,psz_value ,sizeof ( psz_value ) ) != NULL
call	38:13	39:53	6	HTTPExtractValue
arg	38:31	38:42	7	psz_request
water	38:31	0:0	8	psz_request
arg	38:44	38:51	7	"close"
water	38:44	0:0	8	"close"
arg	38:53	38:62	7	psz_value
water	38:53	0:0	8	psz_value
arg	39:35	39:53	7	sizeof(psz_value)
op	39:35	0:0	8	sizeof
water	39:41	0:0	8	(
water	39:42	0:0	8	psz_value
water	39:51	0:0	8	)
op	39:55	0:0	6	!=
water	39:58	0:0	6	NULL
stmts	40:8	43:8	5	
water	40:8	0:0	6	{
call	41:12	41:44	6	en50221_CloseMMI
arg	41:30	41:35	7	p_cam
water	41:30	0:0	8	p_cam
arg	41:37	41:44	7	i_slot
water	41:37	0:0	8	i_slot
water	41:45	0:0	6	;
return	42:12	42:23	6	NULL
water	42:19	0:0	7	NULL
water	43:8	0:0	6	}
if	44:8	48:8	4	(HTTPExtractValue (psz_request ,"cancel" ,psz_value ,sizeof ( psz_value ) ) == NULL)
cond	44:13	45:58	5	HTTPExtractValue (psz_request ,"cancel" ,psz_value ,sizeof ( psz_value ) ) == NULL
call	44:13	45:53	6	HTTPExtractValue
arg	44:31	44:42	7	psz_request
water	44:31	0:0	8	psz_request
arg	44:44	44:52	7	"cancel"
water	44:44	0:0	8	"cancel"
arg	44:54	44:63	7	psz_value
water	44:54	0:0	8	psz_value
arg	45:35	45:53	7	sizeof(psz_value)
op	45:35	0:0	8	sizeof
water	45:41	0:0	8	(
water	45:42	0:0	8	psz_value
water	45:51	0:0	8	)
op	45:55	0:0	6	==
water	45:58	0:0	6	NULL
stmts	46:8	48:8	5	
water	46:8	0:0	6	{
water	47:12	0:0	6	b_ok
op	47:17	0:0	6	=
water	47:19	0:0	6	true
water	47:23	0:0	6	;
water	48:8	0:0	6	}
if	49:8	53:8	4	(HTTPExtractValue (psz_request ,"type" ,psz_value ,sizeof ( psz_value ) ) == NULL)
cond	49:13	50:58	5	HTTPExtractValue (psz_request ,"type" ,psz_value ,sizeof ( psz_value ) ) == NULL
call	49:13	50:53	6	HTTPExtractValue
arg	49:31	49:42	7	psz_request
water	49:31	0:0	8	psz_request
arg	49:44	49:50	7	"type"
water	49:44	0:0	8	"type"
arg	49:52	49:61	7	psz_value
water	49:52	0:0	8	psz_value
arg	50:35	50:53	7	sizeof(psz_value)
op	50:35	0:0	8	sizeof
water	50:41	0:0	8	(
water	50:42	0:0	8	psz_value
water	50:51	0:0	8	)
op	50:55	0:0	6	==
water	50:58	0:0	6	NULL
stmts	51:8	53:8	5	
water	51:8	0:0	6	{
return	52:12	52:58	6	strdup("invalid request parameter\n")
call	52:19	52:57	7	strdup
arg	52:27	52:57	8	"invalid request parameter\n"
water	52:27	0:0	9	"invalid request parameter\n"
water	53:8	0:0	6	}
if	54:8	71:8	4	(!strcmp (psz_value ,"enq" ))
cond	54:13	54:39	5	!strcmp (psz_value ,"enq" )
op	54:13	0:0	6	!
call	54:14	54:39	6	strcmp
arg	54:22	54:31	7	psz_value
water	54:22	0:0	8	psz_value
arg	54:33	54:39	7	"enq"
water	54:33	0:0	8	"enq"
stmts	55:8	71:8	5	
water	55:8	0:0	6	{
water	56:12	0:0	6	mmi_object
op	56:22	0:0	6	.
water	56:23	0:0	6	i_object_type
op	56:37	0:0	6	=
water	56:39	0:0	6	EN50221_MMI_ANSW
water	56:55	0:0	6	;
water	57:12	0:0	6	mmi_object
op	57:22	0:0	6	.
water	57:23	0:0	6	u
op	57:24	0:0	6	.
water	57:25	0:0	6	answ
op	57:29	0:0	6	.
water	57:30	0:0	6	b_ok
op	57:35	0:0	6	=
water	57:37	0:0	6	b_ok
water	57:41	0:0	6	;
if	58:12	61:12	6	(! b_ok)
cond	58:17	58:18	7	! b_ok
op	58:17	0:0	8	!
water	58:18	0:0	8	b_ok
stmts	59:12	61:12	7	
water	59:12	0:0	8	{
water	60:16	0:0	8	mmi_object
op	60:26	0:0	8	.
water	60:27	0:0	8	u
op	60:28	0:0	8	.
water	60:29	0:0	8	answ
op	60:33	0:0	8	.
water	60:34	0:0	8	psz_answ
op	60:43	0:0	8	=
call	60:45	60:54	8	strdup
arg	60:52	60:54	9	""
water	60:52	0:0	10	""
water	60:55	0:0	8	;
water	61:12	0:0	8	}
else	62:12	70:12	6
stmts	63:12	70:12	7	
water	63:12	0:0	8	{
if	64:16	68:16	8	(HTTPExtractValue (psz_request ,"answ" ,psz_value ,sizeof ( psz_value ) ) == NULL)
cond	64:21	65:66	9	HTTPExtractValue (psz_request ,"answ" ,psz_value ,sizeof ( psz_value ) ) == NULL
call	64:21	65:61	10	HTTPExtractValue
arg	64:39	64:50	11	psz_request
water	64:39	0:0	12	psz_request
arg	64:52	64:58	11	"answ"
water	64:52	0:0	12	"answ"
arg	64:60	64:69	11	psz_value
water	64:60	0:0	12	psz_value
arg	65:43	65:61	11	sizeof(psz_value)
op	65:43	0:0	12	sizeof
water	65:49	0:0	12	(
water	65:50	0:0	12	psz_value
water	65:59	0:0	12	)
op	65:63	0:0	10	==
water	65:66	0:0	10	NULL
stmts	66:16	68:16	9	
water	66:16	0:0	10	{
return	67:20	67:66	10	strdup("invalid request parameter\n")
call	67:27	67:65	11	strdup
arg	67:35	67:65	12	"invalid request parameter\n"
water	67:35	0:0	13	"invalid request parameter\n"
water	68:16	0:0	10	}
water	69:16	0:0	8	mmi_object
op	69:26	0:0	8	.
water	69:27	0:0	8	u
op	69:28	0:0	8	.
water	69:29	0:0	8	answ
op	69:33	0:0	8	.
water	69:34	0:0	8	psz_answ
op	69:43	0:0	8	=
call	69:45	69:61	8	strdup
arg	69:52	69:61	9	psz_value
water	69:52	0:0	10	psz_value
water	69:62	0:0	8	;
water	70:12	0:0	8	}
water	71:8	0:0	6	}
else	72:8	87:8	4
stmts	73:8	87:8	5	
water	73:8	0:0	6	{
water	74:12	0:0	6	mmi_object
op	74:22	0:0	6	.
water	74:23	0:0	6	i_object_type
op	74:37	0:0	6	=
water	74:39	0:0	6	EN50221_MMI_MENU_ANSW
water	74:60	0:0	6	;
if	75:12	78:12	6	(! b_ok)
cond	75:17	75:18	7	! b_ok
op	75:17	0:0	8	!
water	75:18	0:0	8	b_ok
stmts	76:12	78:12	7	
water	76:12	0:0	8	{
water	77:16	0:0	8	mmi_object
op	77:26	0:0	8	.
water	77:27	0:0	8	u
op	77:28	0:0	8	.
water	77:29	0:0	8	menu_answ
op	77:38	0:0	8	.
water	77:39	0:0	8	i_choice
op	77:48	0:0	8	=
water	77:50	0:0	8	0
water	77:51	0:0	8	;
water	78:12	0:0	8	}
else	79:12	86:12	6
stmts	80:12	86:12	7	
water	80:12	0:0	8	{
if	81:16	83:55	8	(HTTPExtractValue (psz_request ,"choice" ,psz_value ,sizeof ( psz_value ) ) == NULL)
cond	81:21	82:66	9	HTTPExtractValue (psz_request ,"choice" ,psz_value ,sizeof ( psz_value ) ) == NULL
call	81:21	82:61	10	HTTPExtractValue
arg	81:39	81:50	11	psz_request
water	81:39	0:0	12	psz_request
arg	81:52	81:60	11	"choice"
water	81:52	0:0	12	"choice"
arg	81:62	81:71	11	psz_value
water	81:62	0:0	12	psz_value
arg	82:43	82:61	11	sizeof(psz_value)
op	82:43	0:0	12	sizeof
water	82:49	0:0	12	(
water	82:50	0:0	12	psz_value
water	82:59	0:0	12	)
op	82:63	0:0	10	==
water	82:66	0:0	10	NULL
stmts	83:20	83:55	9	
water	83:20	0:0	10	mmi_object
op	83:30	0:0	10	.
water	83:31	0:0	10	u
op	83:32	0:0	10	.
water	83:33	0:0	10	menu_answ
op	83:42	0:0	10	.
water	83:43	0:0	10	i_choice
op	83:52	0:0	10	=
water	83:54	0:0	10	0
water	83:55	0:0	10	;
else	84:16	85:69	8
stmts	85:20	85:69	9	
water	85:20	0:0	10	mmi_object
op	85:30	0:0	10	.
water	85:31	0:0	10	u
op	85:32	0:0	10	.
water	85:33	0:0	10	menu_answ
op	85:42	0:0	10	.
water	85:43	0:0	10	i_choice
op	85:52	0:0	10	=
call	85:54	85:68	10	atoi
arg	85:59	85:68	11	psz_value
water	85:59	0:0	12	psz_value
water	85:69	0:0	10	;
water	86:12	0:0	8	}
water	87:8	0:0	6	}
call	88:8	88:58	4	en50221_SendMMIObject
arg	88:31	88:36	5	p_cam
water	88:31	0:0	6	p_cam
arg	88:38	88:44	5	i_slot
water	88:38	0:0	6	i_slot
arg	88:46	88:58	5	&mmi_object
op	88:46	0:0	6	&
water	88:47	0:0	6	mmi_object
water	88:59	0:0	4	;
return	89:8	89:19	4	NULL
water	89:15	0:0	5	NULL
water	90:4	0:0	4	}
for	92:4	96:4	2	(unsigned i_slot = 0 ;i_slot < p_cam -> i_nb_slots;i_slot ++)
forinit	92:9	92:28	3	unsigned i_slot = 0 ;
water	92:9	0:0	4	unsigned
water	92:18	0:0	4	i_slot
op	92:25	0:0	4	=
water	92:27	0:0	4	0
water	92:28	0:0	4	;
cond	92:30	92:46	3	i_slot < p_cam -> i_nb_slots
water	92:30	0:0	4	i_slot
op	92:37	0:0	4	<
water	92:39	0:0	4	p_cam
op	92:44	0:0	4	->
water	92:46	0:0	4	i_nb_slots
forexpr	92:58	92:64	3	i_slot ++
water	92:58	0:0	4	i_slot
op	92:64	0:0	4	++
stmts	93:4	96:4	3	
water	93:4	0:0	4	{
if	94:8	95:23	4	(p_cam -> pb_slot_mmi_expected [ i_slot ])
cond	94:13	94:47	5	p_cam -> pb_slot_mmi_expected [ i_slot ]
water	94:13	0:0	6	p_cam
op	94:18	0:0	6	->
water	94:20	0:0	6	pb_slot_mmi_expected
op	94:40	0:0	6	[
water	94:41	0:0	6	i_slot
op	94:47	0:0	6	]
stmts	95:12	95:23	5	
return	95:12	95:23	6	NULL
water	95:19	0:0	7	NULL
water	96:4	0:0	4	}
decl	97:4	97:13	2	char	*buf
decl	98:4	98:14	2	size_t	len
decl	99:4	99:42	2	FILE	*p
op	99:12	0:0	2	=
call	99:14	99:41	3	open_memstream
arg	99:30	99:34	4	&buf
op	99:30	0:0	5	&
water	99:31	0:0	5	buf
arg	99:36	99:41	4	&len
op	99:36	0:0	5	&
water	99:37	0:0	5	len
if	100:4	101:19	2	(unlikely (p == NULL ))
cond	100:8	100:26	3	unlikely (p == NULL )
call	100:8	100:26	4	unlikely
arg	100:17	100:26	5	p==NULL
water	100:17	0:0	6	p
op	100:19	0:0	6	==
water	100:22	0:0	6	NULL
stmts	101:8	101:19	3	
return	101:8	101:19	4	NULL
water	101:15	0:0	5	NULL
decl	102:4	102:18	2	ca_caps_t	caps
if	103:4	107:4	2	(ioctl (p_cam -> fd ,CA_GET_CAP ,& caps ) < 0)
cond	103:8	103:48	3	ioctl (p_cam -> fd ,CA_GET_CAP ,& caps ) < 0
call	103:8	103:44	4	ioctl
arg	103:15	103:24	5	p_cam->fd
water	103:15	0:0	6	p_cam
op	103:20	0:0	6	->
water	103:22	0:0	6	fd
arg	103:26	103:36	5	CA_GET_CAP
water	103:26	0:0	6	CA_GET_CAP
arg	103:38	103:44	5	&caps
op	103:38	0:0	6	&
water	103:39	0:0	6	caps
op	103:46	0:0	4	<
water	103:48	0:0	4	0
stmts	104:4	107:4	3	
water	104:4	0:0	4	{
call	105:8	105:76	4	fprintf
arg	105:17	105:18	5	p
water	105:17	0:0	6	p
arg	105:20	105:52	5	"ioctl(CA_GET_CAP) failed: %s\n"
water	105:20	0:0	6	"ioctl(CA_GET_CAP) failed: %s\n"
arg	105:54	105:76	5	vlc_strerror_c(errno)
call	105:54	105:74	6	vlc_strerror_c
arg	105:69	105:74	7	errno
water	105:69	0:0	8	errno
water	105:77	0:0	4	;
goto	106:8	106:16	4	out
water	106:13	0:0	5	out
water	107:4	0:0	4	}
call	109:4	110:51	2	fprintf
arg	109:13	109:14	3	p
water	109:13	0:0	4	p
arg	109:16	109:57	3	"CA interface with %d %s, type:\n<table>"
water	109:16	0:0	4	"CA interface with %d %s, type:\n<table>"
arg	109:59	109:72	3	caps.slot_num
water	109:59	0:0	4	caps
op	109:63	0:0	4	.
water	109:64	0:0	4	slot_num
arg	110:13	110:51	3	caps.slot_num==1?"slot":"slots"
water	110:13	0:0	4	caps
op	110:17	0:0	4	.
water	110:18	0:0	4	slot_num
op	110:27	0:0	4	==
water	110:30	0:0	4	1
water	110:32	0:0	4	?
water	110:34	0:0	4	"slot"
water	110:41	0:0	4	:
water	110:43	0:0	4	"slots"
water	110:52	0:0	2	;
water	112:4	0:0	2	if
water	112:7	0:0	2	(
water	112:9	0:0	2	caps
op	112:13	0:0	2	.
water	112:14	0:0	2	slot_type
op	112:24	0:0	2	&
water	112:26	0:0	2	(
water	112:27	0:0	2	CA_
call	113:8	113:48	2	fprintf
arg	113:17	113:18	3	p
water	113:17	0:0	4	p
arg	113:20	113:44	3	"<tr><td>%s</td></tr>\n"
water	113:20	0:0	4	"<tr><td>%s</td></tr>\n"
arg	113:46	113:48	3	s
water	113:46	0:0	4	s
call	114:4	114:46	2	CHECK_CAPS
arg	114:16	114:18	3	CI
water	114:16	0:0	4	CI
arg	114:20	114:46	3	"CI high level interface"
water	114:20	0:0	4	"CI high level interface"
water	114:47	0:0	2	;
call	115:4	115:57	2	CHECK_CAPS
arg	115:16	115:23	3	CI_LINK
water	115:16	0:0	4	CI_LINK
arg	115:25	115:57	3	"CI link layer level interface"
water	115:25	0:0	4	"CI link layer level interface"
water	115:58	0:0	2	;
call	116:4	116:77	2	CHECK_CAPS
arg	116:16	116:23	3	CI_PHYS
water	116:16	0:0	4	CI_PHYS
arg	116:25	116:77	3	"CI physical layer level interface (not supported)"
water	116:25	0:0	4	"CI physical layer level interface (not supported)"
water	116:78	0:0	2	;
call	117:4	117:46	2	CHECK_CAPS
arg	117:16	117:21	3	DESCR
water	117:16	0:0	4	DESCR
arg	117:23	117:46	3	"built-in descrambler"
water	117:23	0:0	4	"built-in descrambler"
water	117:47	0:0	2	;
call	118:4	118:49	2	CHECK_CAPS
arg	118:16	118:18	3	SC
water	118:16	0:0	4	SC
arg	118:20	118:49	3	"simple smartcard interface"
water	118:20	0:0	4	"simple smartcard interface"
water	118:50	0:0	2	;
call	120:4	121:77	2	fprintf
arg	120:13	120:14	3	p
water	120:13	0:0	4	p
arg	120:16	120:50	3	"</table>%d available %s\n<table>"
water	120:16	0:0	4	"</table>%d available %s\n<table>"
arg	120:52	120:66	3	caps.descr_num
water	120:52	0:0	4	caps
op	120:56	0:0	4	.
water	120:57	0:0	4	descr_num
arg	121:11	121:77	3	caps.descr_num==1?"descrambler (key)":"descramblers (keys)"
water	121:11	0:0	4	caps
op	121:15	0:0	4	.
water	121:16	0:0	4	descr_num
op	121:26	0:0	4	==
water	121:29	0:0	4	1
water	121:31	0:0	4	?
water	121:33	0:0	4	"descrambler (key)"
water	121:53	0:0	4	:
water	121:55	0:0	4	"descramblers (keys)"
water	121:78	0:0	2	;
water	123:4	0:0	2	if
water	123:7	0:0	2	(
water	123:9	0:0	2	caps
op	123:13	0:0	2	.
water	123:14	0:0	2	descr_type
op	123:25	0:0	2	&
water	123:27	0:0	2	(
water	123:28	0:0	2	CA_
call	124:8	124:57	2	fprintf
arg	124:17	124:18	3	p
water	124:17	0:0	4	p
arg	124:20	124:42	3	"<tr><td>%s</td></tr>"
water	124:20	0:0	4	"<tr><td>%s</td></tr>"
arg	124:44	124:57	3	STRINGIFY(x)
call	124:44	124:55	4	STRINGIFY
arg	124:54	124:55	5	x
water	124:54	0:0	6	x
call	125:4	125:20	2	CHECK_DESC
arg	125:16	125:20	3	ECD
water	125:16	0:0	4	ECD
water	125:21	0:0	2	;
call	126:4	126:20	2	CHECK_DESC
arg	126:16	126:20	3	NDS
water	126:16	0:0	4	NDS
water	126:21	0:0	2	;
call	127:4	127:20	2	CHECK_DESC
arg	127:16	127:20	3	DSS
water	127:16	0:0	4	DSS
water	127:21	0:0	2	;
call	129:4	129:25	2	fputs
arg	129:11	129:21	3	"</table>"
water	129:11	0:0	4	"</table>"
arg	129:23	129:25	3	p
water	129:23	0:0	4	p
water	129:26	0:0	2	;
for	130:4	212:4	2	(unsigned i_slot = 0 ;i_slot < p_cam -> i_nb_slots;i_slot ++)
forinit	130:9	130:28	3	unsigned i_slot = 0 ;
water	130:9	0:0	4	unsigned
water	130:18	0:0	4	i_slot
op	130:25	0:0	4	=
water	130:27	0:0	4	0
water	130:28	0:0	4	;
cond	130:30	130:46	3	i_slot < p_cam -> i_nb_slots
water	130:30	0:0	4	i_slot
op	130:37	0:0	4	<
water	130:39	0:0	4	p_cam
op	130:44	0:0	4	->
water	130:46	0:0	4	i_nb_slots
forexpr	130:58	130:64	3	i_slot ++
water	130:58	0:0	4	i_slot
op	130:64	0:0	4	++
stmts	131:4	212:4	3	
water	131:4	0:0	4	{
decl	132:8	132:28	4	ca_slot_info_t	sinfo
water	133:8	0:0	4	p_cam
op	133:13	0:0	4	->
water	133:15	0:0	4	pb_slot_mmi_undisplayed
op	133:38	0:0	4	[
water	133:39	0:0	4	i_slot
op	133:45	0:0	4	]
op	133:47	0:0	4	=
water	133:49	0:0	4	false
water	133:54	0:0	4	;
call	134:8	134:47	4	fprintf
arg	134:17	134:18	5	p
water	134:17	0:0	6	p
arg	134:20	134:38	5	"<p>CA slot #%d: "
water	134:20	0:0	6	"<p>CA slot #%d: "
arg	134:40	134:47	5	i_slot
water	134:40	0:0	6	i_slot
water	134:48	0:0	4	;
water	135:8	0:0	4	sinfo
op	135:13	0:0	4	.
water	135:14	0:0	4	num
op	135:18	0:0	4	=
water	135:20	0:0	4	i_slot
water	135:26	0:0	4	;
if	136:8	141:8	4	(ioctl (p_cam -> fd ,CA_GET_SLOT_INFO ,& sinfo ) < 0)
cond	136:13	136:60	5	ioctl (p_cam -> fd ,CA_GET_SLOT_INFO ,& sinfo ) < 0
call	136:13	136:56	6	ioctl
arg	136:20	136:29	7	p_cam->fd
water	136:20	0:0	8	p_cam
op	136:25	0:0	8	->
water	136:27	0:0	8	fd
arg	136:31	136:47	7	CA_GET_SLOT_INFO
water	136:31	0:0	8	CA_GET_SLOT_INFO
arg	136:49	136:56	7	&sinfo
op	136:49	0:0	8	&
water	136:50	0:0	8	sinfo
op	136:58	0:0	6	<
water	136:60	0:0	6	0
stmts	137:8	141:8	5	
water	137:8	0:0	6	{
call	138:12	139:43	6	fprintf
arg	138:21	138:22	7	p
water	138:21	0:0	8	p
arg	138:24	138:66	7	"ioctl(CA_GET_SLOT_INFO) failed: %s<br>\n"
water	138:24	0:0	8	"ioctl(CA_GET_SLOT_INFO) failed: %s<br>\n"
arg	139:21	139:43	7	vlc_strerror_c(errno)
call	139:21	139:41	8	vlc_strerror_c
arg	139:36	139:41	9	errno
water	139:36	0:0	10	errno
water	139:44	0:0	6	;
continue	140:12	140:20	6	
water	141:8	0:0	6	}
water	143:8	0:0	4	if
water	143:11	0:0	4	(
water	143:13	0:0	4	sinfo
op	143:18	0:0	4	.
water	143:19	0:0	4	type
op	143:24	0:0	4	&
water	143:26	0:0	4	(
water	143:27	0:0	4	CA_
call	144:12	144:24	4	fputs
arg	144:19	144:20	5	s
water	144:19	0:0	6	s
arg	144:22	144:24	5	p
water	144:22	0:0	6	p
call	145:8	145:39	4	CHECK_TYPE
arg	145:20	145:22	5	CI
water	145:20	0:0	6	CI
arg	145:24	145:39	5	"high level, "
water	145:24	0:0	6	"high level, "
water	145:40	0:0	4	;
call	146:8	146:50	4	CHECK_TYPE
arg	146:20	146:27	5	CI_LINK
water	146:20	0:0	6	CI_LINK
arg	146:29	146:50	5	"link layer level, "
water	146:29	0:0	6	"link layer level, "
water	146:51	0:0	4	;
call	147:8	147:54	4	CHECK_TYPE
arg	147:20	147:27	5	CI_PHYS
water	147:20	0:0	6	CI_PHYS
arg	147:29	147:54	5	"physical layer level, "
water	147:29	0:0	6	"physical layer level, "
water	147:55	0:0	4	;
if	149:8	207:8	4	(sinfo . flags & CA_CI_MODULE_READY)
cond	149:13	149:27	5	sinfo . flags & CA_CI_MODULE_READY
water	149:13	0:0	6	sinfo
op	149:18	0:0	6	.
water	149:19	0:0	6	flags
op	149:25	0:0	6	&
water	149:27	0:0	6	CA_CI_MODULE_READY
stmts	150:8	207:8	5	
water	150:8	0:0	6	{
decl	151:12	151:67	6	mmi_t	*p_object
op	151:28	0:0	6	=
call	151:30	151:66	7	en50221_GetMMIObject
arg	151:52	151:57	8	p_cam
water	151:52	0:0	9	p_cam
arg	151:59	151:66	8	i_slot
water	151:59	0:0	9	i_slot
call	152:12	152:54	6	fputs
arg	152:19	152:50	7	"module present and ready<p>\n"
water	152:19	0:0	8	"module present and ready<p>\n"
arg	152:52	152:54	7	p
water	152:52	0:0	8	p
water	152:55	0:0	6	;
call	153:12	153:62	6	fputs
arg	153:19	153:58	7	"<form action=index.html method=get>\n"
water	153:19	0:0	8	"<form action=index.html method=get>\n"
arg	153:60	153:62	7	p
water	153:60	0:0	8	p
water	153:63	0:0	6	;
call	154:12	155:28	6	fprintf
arg	154:21	154:22	7	p
water	154:21	0:0	8	p
arg	154:24	154:70	7	"<input type=hidden name=slot value=\"%d\">\n"
water	154:24	0:0	8	"<input type=hidden name=slot value=\"%d\">\n"
arg	155:21	155:28	7	i_slot
water	155:21	0:0	8	i_slot
water	155:29	0:0	6	;
if	156:12	160:12	6	(p_object == NULL)
cond	156:17	156:29	7	p_object == NULL
water	156:17	0:0	8	p_object
op	156:26	0:0	8	==
water	156:29	0:0	8	NULL
stmts	157:12	160:12	7	
water	157:12	0:0	8	{
call	158:16	159:55	8	fputs
arg	158:23	159:51	9	"<input type=submit name=open"" value=\"Open session\">\n"
water	158:23	0:0	10	"<input type=submit name=open"
water	159:23	0:0	10	" value=\"Open session\">\n"
arg	159:53	159:55	9	p
water	159:53	0:0	10	p
water	159:56	0:0	8	;
water	160:12	0:0	8	}
else	161:12	205:12	6
stmts	162:12	205:12	7	
water	162:12	0:0	8	{
switch	163:16	201:16	8	(p_object -> i_object_type)
cond	163:25	163:35	9	p_object -> i_object_type
water	163:25	0:0	10	p_object
op	163:33	0:0	10	->
water	163:35	0:0	10	i_object_type
stmts	164:16	201:16	9	
water	164:16	0:0	10	{
label	165:16	165:36	10	case EN50221_MMI_ENQ :
call	166:20	166:74	10	fputs
arg	166:27	166:70	11	"<input type=hidden name=type value=enq>\n"
water	166:27	0:0	12	"<input type=hidden name=type value=enq>\n"
arg	166:72	166:74	11	p
water	166:72	0:0	12	p
water	166:75	0:0	10	;
call	167:20	168:54	10	fprintf
arg	167:29	167:30	11	p
water	167:29	0:0	12	p
arg	167:32	167:72	11	"<table border=1><tr><th>%s</th></tr>\n"
water	167:32	0:0	12	"<table border=1><tr><th>%s</th></tr>\n"
arg	168:29	168:54	11	p_object->u.enq.psz_text
water	168:29	0:0	12	p_object
op	168:37	0:0	12	->
water	168:39	0:0	12	u
op	168:40	0:0	12	.
water	168:41	0:0	12	enq
op	168:44	0:0	12	.
water	168:45	0:0	12	psz_text
water	168:55	0:0	10	;
call	169:20	171:75	10	fprintf
arg	169:29	169:30	11	p
water	169:29	0:0	12	p
arg	169:32	170:43	11	"<tr><td><input type=%s name=answ>""</td></tr>\n"
water	169:32	0:0	12	"<tr><td><input type=%s name=answ>"
water	170:29	0:0	12	"</td></tr>\n"
arg	171:29	171:75	11	p_object->u.enq.b_blind?"password":"text"
water	171:29	0:0	12	p_object
op	171:37	0:0	12	->
water	171:39	0:0	12	u
op	171:40	0:0	12	.
water	171:41	0:0	12	enq
op	171:44	0:0	12	.
water	171:45	0:0	12	b_blind
water	171:53	0:0	12	?
water	171:55	0:0	12	"password"
water	171:66	0:0	12	:
water	171:68	0:0	12	"text"
water	171:76	0:0	10	;
break	172:20	172:25	10	
label	173:16	173:37	10	case EN50221_MMI_MENU :
call	174:20	174:75	10	fputs
arg	174:27	174:71	11	"<input type=hidden name=type value=menu>\n"
water	174:27	0:0	12	"<input type=hidden name=type value=menu>\n"
arg	174:73	174:75	11	p
water	174:73	0:0	12	p
water	174:76	0:0	10	;
call	175:20	176:56	10	fprintf
arg	175:29	175:30	11	p
water	175:29	0:0	12	p
arg	175:32	175:72	11	"<table border=1><tr><th>%s</th></tr>\n"
water	175:32	0:0	12	"<table border=1><tr><th>%s</th></tr>\n"
arg	176:29	176:56	11	p_object->u.menu.psz_title
water	176:29	0:0	12	p_object
op	176:37	0:0	12	->
water	176:39	0:0	12	u
op	176:40	0:0	12	.
water	176:41	0:0	12	menu
op	176:45	0:0	12	.
water	176:46	0:0	12	psz_title
water	176:57	0:0	10	;
call	177:20	178:59	10	fprintf
arg	177:29	177:30	11	p
water	177:29	0:0	12	p
arg	177:32	177:64	11	"<tr><td>%s</td></tr><tr><td>\n"
water	177:32	0:0	12	"<tr><td>%s</td></tr><tr><td>\n"
arg	178:29	178:59	11	p_object->u.menu.psz_subtitle
water	178:29	0:0	12	p_object
op	178:37	0:0	12	->
water	178:39	0:0	12	u
op	178:40	0:0	12	.
water	178:41	0:0	12	menu
op	178:45	0:0	12	.
water	178:46	0:0	12	psz_subtitle
water	178:60	0:0	10	;
for	179:20	182:67	10	( int i = 0 ;i < p_object -> u . menu . i_choices;i ++)
forinit	0:0	179:35	11	 int i = 0 ;
decl	179:26	179:35	12	int	i
op	179:32	0:0	12	=
water	179:34	0:0	12	0
cond	179:37	179:58	11	i < p_object -> u . menu . i_choices
water	179:37	0:0	12	i
op	179:39	0:0	12	<
water	179:41	0:0	12	p_object
op	179:49	0:0	12	->
water	179:51	0:0	12	u
op	179:52	0:0	12	.
water	179:53	0:0	12	menu
op	179:57	0:0	12	.
water	179:58	0:0	12	i_choices
forexpr	179:69	179:70	11	i ++
water	179:69	0:0	12	i
op	179:70	0:0	12	++
stmts	180:24	182:67	11	
call	180:24	182:66	12	fprintf
arg	180:33	180:34	13	p
water	180:33	0:0	14	p
arg	180:36	181:57	13	"<input type=radio name=choice"" value=\"%d\">%s<br>\n"
water	180:36	0:0	14	"<input type=radio name=choice"
water	181:33	0:0	14	" value=\"%d\">%s<br>\n"
arg	181:59	181:64	13	i+1
water	181:59	0:0	14	i
op	181:61	0:0	14	+
water	181:63	0:0	14	1
arg	182:33	182:66	13	p_object->u.menu.ppsz_choices[i]
water	182:33	0:0	14	p_object
op	182:41	0:0	14	->
water	182:43	0:0	14	u
op	182:44	0:0	14	.
water	182:45	0:0	14	menu
op	182:49	0:0	14	.
water	182:50	0:0	14	ppsz_choices
op	182:62	0:0	14	[
water	182:63	0:0	14	i
op	182:64	0:0	14	]
water	182:67	0:0	12	;
call	183:20	184:57	10	fprintf
arg	183:29	183:30	11	p
water	183:29	0:0	12	p
arg	183:32	183:66	11	"</td></tr><tr><td>%s</td></tr>\n"
water	183:32	0:0	12	"</td></tr><tr><td>%s</td></tr>\n"
arg	184:29	184:57	11	p_object->u.menu.psz_bottom
water	184:29	0:0	12	p_object
op	184:37	0:0	12	->
water	184:39	0:0	12	u
op	184:40	0:0	12	.
water	184:41	0:0	12	menu
op	184:45	0:0	12	.
water	184:46	0:0	12	psz_bottom
water	184:58	0:0	10	;
break	185:20	185:25	10	
label	186:16	186:37	10	case EN50221_MMI_LIST :
call	187:20	187:75	10	fputs
arg	187:27	187:71	11	"<input type=hidden name=type value=menu>\n"
water	187:27	0:0	12	"<input type=hidden name=type value=menu>\n"
arg	187:73	187:75	11	p
water	187:73	0:0	12	p
water	187:76	0:0	10	;
call	188:20	188:74	10	fputs
arg	188:27	188:70	11	"<input type=hidden name=choice value=0>\n"
water	188:27	0:0	12	"<input type=hidden name=choice value=0>\n"
arg	188:72	188:74	11	p
water	188:72	0:0	12	p
water	188:75	0:0	10	;
call	189:20	190:56	10	fprintf
arg	189:29	189:30	11	p
water	189:29	0:0	12	p
arg	189:32	189:72	11	"<table border=1><tr><th>%s</th></tr>\n"
water	189:32	0:0	12	"<table border=1><tr><th>%s</th></tr>\n"
arg	190:29	190:56	11	p_object->u.menu.psz_title
water	190:29	0:0	12	p_object
op	190:37	0:0	12	->
water	190:39	0:0	12	u
op	190:40	0:0	12	.
water	190:41	0:0	12	menu
op	190:45	0:0	12	.
water	190:46	0:0	12	psz_title
water	190:57	0:0	10	;
call	191:20	192:59	10	fprintf
arg	191:29	191:30	11	p
water	191:29	0:0	12	p
arg	191:32	191:64	11	"<tr><td>%s</td></tr><tr><td>\n"
water	191:32	0:0	12	"<tr><td>%s</td></tr><tr><td>\n"
arg	192:29	192:59	11	p_object->u.menu.psz_subtitle
water	192:29	0:0	12	p_object
op	192:37	0:0	12	->
water	192:39	0:0	12	u
op	192:40	0:0	12	.
water	192:41	0:0	12	menu
op	192:45	0:0	12	.
water	192:46	0:0	12	psz_subtitle
water	192:60	0:0	10	;
for	193:20	195:67	10	( int i = 0 ;i < p_object -> u . menu . i_choices;i ++)
forinit	0:0	193:35	11	 int i = 0 ;
decl	193:26	193:35	12	int	i
op	193:32	0:0	12	=
water	193:34	0:0	12	0
cond	193:37	193:58	11	i < p_object -> u . menu . i_choices
water	193:37	0:0	12	i
op	193:39	0:0	12	<
water	193:41	0:0	12	p_object
op	193:49	0:0	12	->
water	193:51	0:0	12	u
op	193:52	0:0	12	.
water	193:53	0:0	12	menu
op	193:57	0:0	12	.
water	193:58	0:0	12	i_choices
forexpr	193:69	193:70	11	i ++
water	193:69	0:0	12	i
op	193:70	0:0	12	++
stmts	194:24	195:67	11	
call	194:24	195:66	12	fprintf
arg	194:33	194:34	13	p
water	194:33	0:0	14	p
arg	194:36	194:46	13	"%s<br>\n"
water	194:36	0:0	14	"%s<br>\n"
arg	195:33	195:66	13	p_object->u.menu.ppsz_choices[i]
water	195:33	0:0	14	p_object
op	195:41	0:0	14	->
water	195:43	0:0	14	u
op	195:44	0:0	14	.
water	195:45	0:0	14	menu
op	195:49	0:0	14	.
water	195:50	0:0	14	ppsz_choices
op	195:62	0:0	14	[
water	195:63	0:0	14	i
op	195:64	0:0	14	]
water	195:67	0:0	12	;
call	196:20	197:57	10	fprintf
arg	196:29	196:30	11	p
water	196:29	0:0	12	p
arg	196:32	196:66	11	"</td></tr><tr><td>%s</td></tr>\n"
water	196:32	0:0	12	"</td></tr><tr><td>%s</td></tr>\n"
arg	197:29	197:57	11	p_object->u.menu.psz_bottom
water	197:29	0:0	12	p_object
op	197:37	0:0	12	->
water	197:39	0:0	12	u
op	197:40	0:0	12	.
water	197:41	0:0	12	menu
op	197:45	0:0	12	.
water	197:46	0:0	12	psz_bottom
water	197:58	0:0	10	;
break	198:20	198:25	10	
label	199:16	199:23	10	default :
call	200:20	200:83	10	fputs
arg	200:27	200:79	11	"<table><tr><th>Unknown MMI object type</th></tr>\n"
water	200:27	0:0	12	"<table><tr><th>Unknown MMI object type</th></tr>\n"
arg	200:81	200:83	11	p
water	200:81	0:0	12	p
water	200:84	0:0	10	;
water	201:16	0:0	10	}
call	202:16	202:82	8	fputs
arg	202:23	202:78	9	"</table><p><input type=submit name=ok value=\"OK\">\n"
water	202:23	0:0	10	"</table><p><input type=submit name=ok value=\"OK\">\n"
arg	202:80	202:82	9	p
water	202:80	0:0	10	p
water	202:83	0:0	8	;
call	203:16	203:79	8	fputs
arg	203:23	203:75	9	"<input type=submit name=cancel value=\"Cancel\">\n"
water	203:23	0:0	10	"<input type=submit name=cancel value=\"Cancel\">\n"
arg	203:77	203:79	9	p
water	203:77	0:0	10	p
water	203:80	0:0	8	;
call	204:16	204:85	8	fputs
arg	204:23	204:81	9	"<input type=submit name=close value=\"Close Session\">\n"
water	204:23	0:0	10	"<input type=submit name=close value=\"Close Session\">\n"
arg	204:83	204:85	9	p
water	204:83	0:0	10	p
water	204:86	0:0	8	;
water	205:12	0:0	8	}
call	206:12	206:34	6	fputs
arg	206:19	206:30	7	"</form>\n"
water	206:19	0:0	8	"</form>\n"
arg	206:32	206:34	7	p
water	206:32	0:0	8	p
water	206:35	0:0	6	;
water	207:8	0:0	6	}
else	208:8	209:57	4
stmts	208:13	209:57	5	
if	208:13	209:57	6	(sinfo . flags & CA_CI_MODULE_PRESENT)
cond	208:18	208:32	7	sinfo . flags & CA_CI_MODULE_PRESENT
water	208:18	0:0	8	sinfo
op	208:23	0:0	8	.
water	208:24	0:0	8	flags
op	208:30	0:0	8	&
water	208:32	0:0	8	CA_CI_MODULE_PRESENT
stmts	209:12	209:57	7	
call	209:12	209:56	8	fputs
arg	209:19	209:52	9	"module present, not ready<br>\n"
water	209:19	0:0	10	"module present, not ready<br>\n"
arg	209:54	209:56	9	p
water	209:54	0:0	10	p
water	209:57	0:0	8	;
else	210:8	211:50	4
stmts	211:12	211:50	5	
call	211:12	211:49	6	fputs
arg	211:19	211:45	7	"module not present<br>\n"
water	211:19	0:0	8	"module not present<br>\n"
arg	211:47	211:49	7	p
water	211:47	0:0	8	p
water	211:50	0:0	6	;
water	212:4	0:0	4	}
label	213:0	213:3	2	out :
call	214:4	214:14	2	fclose
arg	214:12	214:14	3	p
water	214:12	0:0	4	p
water	214:15	0:0	2	;
return	215:4	215:14	2	buf
water	215:11	0:0	3	buf
