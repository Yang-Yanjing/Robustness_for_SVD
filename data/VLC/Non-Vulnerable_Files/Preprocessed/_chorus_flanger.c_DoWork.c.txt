func	2:0	76:0	0	static block_t *	DoWork
params	2:22	0:0	1	
param	2:24	2:42	2	filter_t *	p_filter
param	2:44	2:62	2	block_t *	p_in_buf
stmnts	0:0	75:19	1	
decl	4:4	4:48	2	struct filter_sys_t	*p_sys
op	4:31	0:0	2	=
water	4:33	0:0	2	p_filter
op	4:41	0:0	2	->
water	4:43	0:0	2	p_sys
decl	5:4	5:14	2	int	i_chan
water	6:4	0:0	2	unsigned
water	6:13	0:0	2	i_samples
op	6:23	0:0	2	=
water	6:25	0:0	2	p_in_buf
op	6:33	0:0	2	->
water	6:35	0:0	2	i_nb_samples
water	6:47	0:0	2	;
decl	8:4	8:79	2	int	i_maxOffset
op	8:20	0:0	2	=
call	8:22	8:78	3	floor
arg	8:29	8:78	4	p_sys->f_sweepDepth*p_sys->i_sampleRate/1000
water	8:29	0:0	5	p_sys
op	8:34	0:0	5	->
water	8:36	0:0	5	f_sweepDepth
op	8:49	0:0	5	*
water	8:51	0:0	5	p_sys
op	8:56	0:0	5	->
water	8:58	0:0	5	i_sampleRate
op	8:71	0:0	5	/
water	8:73	0:0	5	1000
decl	9:4	9:45	2	float	*p_out
op	9:17	0:0	2	=
water	9:19	0:0	2	(
water	9:20	0:0	2	float
op	9:25	0:0	2	*
water	9:26	0:0	2	)
water	9:27	0:0	2	p_in_buf
op	9:35	0:0	2	->
water	9:37	0:0	2	p_buffer
decl	10:4	10:45	2	float	*p_in
op	10:16	0:0	2	=
water	10:19	0:0	2	(
water	10:20	0:0	2	float
op	10:25	0:0	2	*
water	10:26	0:0	2	)
water	10:27	0:0	2	p_in_buf
op	10:35	0:0	2	->
water	10:37	0:0	2	p_buffer
decl	11:4	11:28	2	float	*p_ptr
water	11:16	0:0	2	,
decl	11:4	11:28	2	float	f_temp
op	11:25	0:0	2	=
water	11:27	0:0	2	0
for	13:4	74:4	2	(unsigned i = 0 ;i < i_samples;i ++)
forinit	13:9	13:23	3	unsigned i = 0 ;
water	13:9	0:0	4	unsigned
water	13:18	0:0	4	i
op	13:20	0:0	4	=
water	13:22	0:0	4	0
water	13:23	0:0	4	;
cond	13:25	13:29	3	i < i_samples
water	13:25	0:0	4	i
op	13:27	0:0	4	<
water	13:29	0:0	4	i_samples
forexpr	13:41	13:42	3	i ++
water	13:41	0:0	4	i
op	13:42	0:0	4	++
stmts	14:4	74:4	3	
water	14:4	0:0	4	{
water	16:8	0:0	4	p_sys
op	16:13	0:0	4	->
water	16:15	0:0	4	i_cumulative
op	16:28	0:0	4	+=
water	16:31	0:0	4	p_sys
op	16:36	0:0	4	->
water	16:38	0:0	4	i_step
water	16:44	0:0	4	;
water	17:8	0:0	4	p_sys
op	17:13	0:0	4	->
water	17:15	0:0	4	f_offset
op	17:24	0:0	4	=
call	17:26	17:79	4	sinf
arg	17:32	17:79	5	(p_sys->i_cumulative)*p_sys->f_sinMultiplier
water	17:32	0:0	6	(
water	17:33	0:0	6	p_sys
op	17:38	0:0	6	->
water	17:40	0:0	6	i_cumulative
water	17:52	0:0	6	)
op	17:54	0:0	6	*
water	17:56	0:0	6	p_sys
op	17:61	0:0	6	->
water	17:63	0:0	6	f_sinMultiplier
call	18:16	18:73	4	*floorf
arg	18:25	18:73	5	p_sys->f_sweepDepth*p_sys->i_sampleRate/1000
water	18:25	0:0	6	p_sys
op	18:30	0:0	6	->
water	18:32	0:0	6	f_sweepDepth
op	18:45	0:0	6	*
water	18:47	0:0	6	p_sys
op	18:52	0:0	6	->
water	18:54	0:0	6	i_sampleRate
op	18:67	0:0	6	/
water	18:69	0:0	6	1000
water	18:74	0:0	4	;
if	19:8	33:8	4	(abs (p_sys -> i_step ) > 0)
cond	19:12	19:35	5	abs (p_sys -> i_step ) > 0
call	19:12	19:31	6	abs
arg	19:17	19:31	7	p_sys->i_step
water	19:17	0:0	8	p_sys
op	19:22	0:0	8	->
water	19:24	0:0	8	i_step
op	19:33	0:0	6	>
water	19:35	0:0	6	0
stmts	20:8	33:8	5	
water	20:8	0:0	6	{
if	21:12	26:12	6	(p_sys -> i_cumulative >=floor (p_sys -> f_sweepDepth * p_sys -> i_sampleRate / p_sys -> f_sweepRate ))
cond	21:16	22:65	7	p_sys -> i_cumulative >=floor (p_sys -> f_sweepDepth * p_sys -> i_sampleRate / p_sys -> f_sweepRate )
water	21:16	0:0	8	p_sys
op	21:21	0:0	8	->
water	21:23	0:0	8	i_cumulative
op	21:36	0:0	8	>=
call	21:40	22:65	8	floor
arg	21:47	22:65	9	p_sys->f_sweepDepth*p_sys->i_sampleRate/p_sys->f_sweepRate
water	21:47	0:0	10	p_sys
op	21:52	0:0	10	->
water	21:54	0:0	10	f_sweepDepth
op	21:67	0:0	10	*
water	22:24	0:0	10	p_sys
op	22:29	0:0	10	->
water	22:31	0:0	10	i_sampleRate
op	22:44	0:0	10	/
water	22:46	0:0	10	p_sys
op	22:51	0:0	10	->
water	22:53	0:0	10	f_sweepRate
stmts	23:12	26:12	7	
water	23:12	0:0	8	{
water	24:16	0:0	8	p_sys
op	24:21	0:0	8	->
water	24:23	0:0	8	f_offset
op	24:32	0:0	8	=
water	24:34	0:0	8	i_maxOffset
water	24:45	0:0	8	;
water	25:16	0:0	8	p_sys
op	25:21	0:0	8	->
water	25:23	0:0	8	i_step
op	25:30	0:0	8	=
op	25:32	0:0	8	-
water	25:33	0:0	8	1
op	25:35	0:0	8	*
water	25:37	0:0	8	(
water	25:39	0:0	8	p_sys
op	25:44	0:0	8	->
water	25:46	0:0	8	i_step
water	25:53	0:0	8	)
water	25:54	0:0	8	;
water	26:12	0:0	8	}
if	27:12	32:12	6	(p_sys -> i_cumulative <=floor (- 1 * p_sys -> f_sweepDepth * p_sys -> i_sampleRate / p_sys -> f_sweepRate ))
cond	27:16	28:65	7	p_sys -> i_cumulative <=floor (- 1 * p_sys -> f_sweepDepth * p_sys -> i_sampleRate / p_sys -> f_sweepRate )
water	27:16	0:0	8	p_sys
op	27:21	0:0	8	->
water	27:23	0:0	8	i_cumulative
op	27:36	0:0	8	<=
call	27:39	28:65	8	floor
arg	27:46	28:65	9	-1*p_sys->f_sweepDepth*p_sys->i_sampleRate/p_sys->f_sweepRate
op	27:46	0:0	10	-
water	27:47	0:0	10	1
op	27:49	0:0	10	*
water	27:51	0:0	10	p_sys
op	27:56	0:0	10	->
water	27:58	0:0	10	f_sweepDepth
op	27:71	0:0	10	*
water	28:24	0:0	10	p_sys
op	28:29	0:0	10	->
water	28:31	0:0	10	i_sampleRate
op	28:44	0:0	10	/
water	28:46	0:0	10	p_sys
op	28:51	0:0	10	->
water	28:53	0:0	10	f_sweepRate
stmts	29:12	32:12	7	
water	29:12	0:0	8	{
water	30:16	0:0	8	p_sys
op	30:21	0:0	8	->
water	30:23	0:0	8	f_offset
op	30:32	0:0	8	=
op	30:34	0:0	8	-
water	30:35	0:0	8	i_maxOffset
water	30:46	0:0	8	;
water	31:16	0:0	8	p_sys
op	31:21	0:0	8	->
water	31:23	0:0	8	i_step
op	31:30	0:0	8	=
op	31:32	0:0	8	-
water	31:33	0:0	8	1
op	31:35	0:0	8	*
water	31:37	0:0	8	(
water	31:39	0:0	8	p_sys
op	31:44	0:0	8	->
water	31:46	0:0	8	i_step
water	31:53	0:0	8	)
water	31:54	0:0	8	;
water	32:12	0:0	8	}
water	33:8	0:0	6	}
decl	35:8	35:45	4	int	offset
op	35:19	0:0	4	=
call	35:21	35:44	5	floor
arg	35:28	35:44	6	p_sys->f_offset
water	35:28	0:0	7	p_sys
op	35:33	0:0	7	->
water	35:35	0:0	7	f_offset
water	36:8	0:0	4	p_ptr
op	36:14	0:0	4	=
water	36:16	0:0	4	p_sys
op	36:21	0:0	4	->
water	36:23	0:0	4	p_write
op	36:31	0:0	4	+
water	36:33	0:0	4	(
water	36:35	0:0	4	i_maxOffset
op	36:47	0:0	4	-
water	36:49	0:0	4	offset
water	36:56	0:0	4	)
op	36:58	0:0	4	*
water	36:60	0:0	4	p_sys
op	36:65	0:0	4	->
water	36:67	0:0	4	i_channels
water	36:77	0:0	4	;
if	38:8	41:8	4	(p_ptr < p_sys -> p_delayLineStart)
cond	38:12	38:27	5	p_ptr < p_sys -> p_delayLineStart
water	38:12	0:0	6	p_ptr
op	38:18	0:0	6	<
water	38:20	0:0	6	p_sys
op	38:25	0:0	6	->
water	38:27	0:0	6	p_delayLineStart
stmts	39:8	41:8	5	
water	39:8	0:0	6	{
water	40:12	0:0	6	p_ptr
op	40:18	0:0	6	+=
water	40:21	0:0	6	p_sys
op	40:26	0:0	6	->
water	40:28	0:0	6	i_bufferLength
op	40:43	0:0	6	-
water	40:45	0:0	6	p_sys
op	40:50	0:0	6	->
water	40:52	0:0	6	i_channels
water	40:62	0:0	6	;
water	41:8	0:0	6	}
if	42:8	45:8	4	(p_ptr > p_sys -> p_delayLineEnd - 2 * p_sys -> i_channels)
cond	42:12	42:53	5	p_ptr > p_sys -> p_delayLineEnd - 2 * p_sys -> i_channels
water	42:12	0:0	6	p_ptr
op	42:18	0:0	6	>
water	42:20	0:0	6	p_sys
op	42:25	0:0	6	->
water	42:27	0:0	6	p_delayLineEnd
op	42:42	0:0	6	-
water	42:44	0:0	6	2
op	42:45	0:0	6	*
water	42:46	0:0	6	p_sys
op	42:51	0:0	6	->
water	42:53	0:0	6	i_channels
stmts	43:8	45:8	5	
water	43:8	0:0	6	{
water	44:12	0:0	6	p_ptr
op	44:18	0:0	6	-=
water	44:21	0:0	6	p_sys
op	44:26	0:0	6	->
water	44:28	0:0	6	i_bufferLength
op	44:43	0:0	6	-
water	44:45	0:0	6	p_sys
op	44:50	0:0	6	->
water	44:52	0:0	6	i_channels
water	44:62	0:0	6	;
water	45:8	0:0	6	}
for	48:8	62:8	4	(i_chan = 0 ;i_chan < p_sys -> i_channels;i_chan ++)
forinit	48:13	48:23	5	i_chan = 0 ;
water	48:13	0:0	6	i_chan
op	48:20	0:0	6	=
water	48:22	0:0	6	0
water	48:23	0:0	6	;
cond	48:25	48:41	5	i_chan < p_sys -> i_channels
water	48:25	0:0	6	i_chan
op	48:32	0:0	6	<
water	48:34	0:0	6	p_sys
op	48:39	0:0	6	->
water	48:41	0:0	6	i_channels
forexpr	48:53	48:59	5	i_chan ++
water	48:53	0:0	6	i_chan
op	48:59	0:0	6	++
stmts	49:8	62:8	5	
water	49:8	0:0	6	{
water	55:12	0:0	6	f_temp
op	55:19	0:0	6	=
water	55:21	0:0	6	(
op	55:23	0:0	6	*
water	55:24	0:0	6	(
water	55:26	0:0	6	p_ptr
op	55:32	0:0	6	+
water	55:34	0:0	6	i_chan
water	55:41	0:0	6	)
water	55:43	0:0	6	)
water	55:44	0:0	6	;
call	57:12	57:28	6	sanitize
arg	57:21	57:28	7	&f_temp
op	57:21	0:0	8	&
water	57:22	0:0	8	f_temp
water	57:29	0:0	6	;
water	58:12	0:0	6	p_out
op	58:17	0:0	6	[
water	58:18	0:0	6	i_chan
op	58:24	0:0	6	]
op	58:26	0:0	6	=
water	58:28	0:0	6	p_sys
op	58:33	0:0	6	->
water	58:35	0:0	6	f_dryLevel
op	58:46	0:0	6	*
water	58:48	0:0	6	p_in
op	58:52	0:0	6	[
water	58:53	0:0	6	i_chan
op	58:59	0:0	6	]
op	58:61	0:0	6	+
water	59:16	0:0	6	p_sys
op	59:21	0:0	6	->
water	59:23	0:0	6	f_wetLevel
op	59:34	0:0	6	*
water	59:36	0:0	6	f_temp
water	59:42	0:0	6	;
op	60:12	0:0	6	*
water	60:13	0:0	6	(
water	60:15	0:0	6	p_sys
op	60:20	0:0	6	->
water	60:22	0:0	6	p_write
op	60:30	0:0	6	+
water	60:32	0:0	6	i_chan
water	60:39	0:0	6	)
op	60:41	0:0	6	=
water	60:43	0:0	6	p_in
op	60:47	0:0	6	[
water	60:48	0:0	6	i_chan
op	60:54	0:0	6	]
op	60:56	0:0	6	+
water	61:16	0:0	6	p_sys
op	61:21	0:0	6	->
water	61:23	0:0	6	f_feedbackGain
op	61:38	0:0	6	*
water	61:40	0:0	6	f_temp
water	61:46	0:0	6	;
water	62:8	0:0	6	}
if	63:8	66:59	4	(p_sys -> p_write == p_sys -> p_delayLineStart)
cond	63:12	63:37	5	p_sys -> p_write == p_sys -> p_delayLineStart
water	63:12	0:0	6	p_sys
op	63:17	0:0	6	->
water	63:19	0:0	6	p_write
op	63:27	0:0	6	==
water	63:30	0:0	6	p_sys
op	63:35	0:0	6	->
water	63:37	0:0	6	p_delayLineStart
stmts	64:12	66:59	5	
for	64:12	66:59	6	(i_chan = 0 ;i_chan < p_sys -> i_channels;i_chan ++)
forinit	64:17	64:27	7	i_chan = 0 ;
water	64:17	0:0	8	i_chan
op	64:24	0:0	8	=
water	64:26	0:0	8	0
water	64:27	0:0	8	;
cond	64:29	64:45	7	i_chan < p_sys -> i_channels
water	64:29	0:0	8	i_chan
op	64:36	0:0	8	<
water	64:38	0:0	8	p_sys
op	64:43	0:0	8	->
water	64:45	0:0	8	i_channels
forexpr	64:57	64:63	7	i_chan ++
water	64:57	0:0	8	i_chan
op	64:63	0:0	8	++
stmts	65:16	66:59	7	
op	65:16	0:0	8	*
water	65:17	0:0	8	(
water	65:19	0:0	8	p_sys
op	65:24	0:0	8	->
water	65:26	0:0	8	p_delayLineEnd
op	65:41	0:0	8	-
water	65:43	0:0	8	p_sys
op	65:48	0:0	8	->
water	65:50	0:0	8	i_channels
op	65:61	0:0	8	+
water	65:63	0:0	8	i_chan
water	65:70	0:0	8	)
op	66:20	0:0	8	=
op	66:22	0:0	8	*
water	66:23	0:0	8	(
water	66:25	0:0	8	p_sys
op	66:30	0:0	8	->
water	66:32	0:0	8	p_delayLineStart
op	66:49	0:0	8	+
water	66:51	0:0	8	i_chan
water	66:58	0:0	8	)
water	66:59	0:0	8	;
water	67:8	0:0	4	p_in
op	67:13	0:0	4	+=
water	67:16	0:0	4	p_sys
op	67:21	0:0	4	->
water	67:23	0:0	4	i_channels
water	67:33	0:0	4	;
water	68:8	0:0	4	p_out
op	68:14	0:0	4	+=
water	68:17	0:0	4	p_sys
op	68:22	0:0	4	->
water	68:24	0:0	4	i_channels
water	68:34	0:0	4	;
water	69:8	0:0	4	p_sys
op	69:13	0:0	4	->
water	69:15	0:0	4	p_write
op	69:23	0:0	4	+=
water	69:26	0:0	4	p_sys
op	69:31	0:0	4	->
water	69:33	0:0	4	i_channels
water	69:43	0:0	4	;
if	70:8	73:8	4	(p_sys -> p_write == p_sys -> p_delayLineEnd - p_sys -> i_channels)
cond	70:12	70:61	5	p_sys -> p_write == p_sys -> p_delayLineEnd - p_sys -> i_channels
water	70:12	0:0	6	p_sys
op	70:17	0:0	6	->
water	70:19	0:0	6	p_write
op	70:27	0:0	6	==
water	70:30	0:0	6	p_sys
op	70:35	0:0	6	->
water	70:37	0:0	6	p_delayLineEnd
op	70:52	0:0	6	-
water	70:54	0:0	6	p_sys
op	70:59	0:0	6	->
water	70:61	0:0	6	i_channels
stmts	71:8	73:8	5	
water	71:8	0:0	6	{
water	72:12	0:0	6	p_sys
op	72:17	0:0	6	->
water	72:19	0:0	6	p_write
op	72:27	0:0	6	=
water	72:29	0:0	6	p_sys
op	72:34	0:0	6	->
water	72:36	0:0	6	p_delayLineStart
water	72:52	0:0	6	;
water	73:8	0:0	6	}
water	74:4	0:0	4	}
return	75:4	75:19	2	p_in_buf
water	75:11	0:0	3	p_in_buf
