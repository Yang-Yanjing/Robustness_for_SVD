func	2:0	28:0	0	static char *	DemuxGetLanguageCode
params	2:33	0:0	1	
param	2:35	2:51	2	demux_t *	p_demux
param	2:53	2:73	2	const char *	psz_var
stmnts	0:0	27:35	1	
decl	4:4	4:27	2	const iso639_lang_t	*pl
decl	5:4	5:18	2	char	*psz_lang
decl	6:4	6:11	2	char	*p
water	7:4	0:0	2	psz_lang
op	7:13	0:0	2	=
call	7:15	7:53	2	var_CreateGetString
arg	7:36	7:43	3	p_demux
water	7:36	0:0	4	p_demux
arg	7:45	7:53	3	psz_var
water	7:45	0:0	4	psz_var
water	7:54	0:0	2	;
if	8:4	9:39	2	(! psz_lang)
cond	8:8	8:9	3	! psz_lang
op	8:8	0:0	4	!
water	8:9	0:0	4	psz_lang
stmts	9:8	9:39	3	
return	9:8	9:39	4	strdup(LANGUAGE_DEFAULT)
call	9:15	9:38	5	strdup
arg	9:22	9:38	6	LANGUAGE_DEFAULT
water	9:22	0:0	7	LANGUAGE_DEFAULT
if	12:4	13:17	2	(( p =strchr (psz_lang ,',' ) ))
cond	12:8	12:38	3	( p =strchr (psz_lang ,',' ) )
water	12:8	0:0	4	(
water	12:10	0:0	4	p
op	12:12	0:0	4	=
call	12:14	12:36	4	strchr
arg	12:22	12:30	5	psz_lang
water	12:22	0:0	6	psz_lang
arg	12:32	12:36	5	','
water	12:32	0:0	6	','
water	12:38	0:0	4	)
stmts	13:8	13:17	3	
op	13:8	0:0	4	*
water	13:9	0:0	4	p
op	13:11	0:0	4	=
water	13:13	0:0	4	'\0'
water	13:17	0:0	4	;
for	14:4	23:4	2	(pl = p_languages ;pl -> psz_eng_name != NULL;pl ++)
forinit	14:9	14:25	3	pl = p_languages ;
water	14:9	0:0	4	pl
op	14:12	0:0	4	=
water	14:14	0:0	4	p_languages
water	14:25	0:0	4	;
cond	14:27	14:47	3	pl -> psz_eng_name != NULL
water	14:27	0:0	4	pl
op	14:29	0:0	4	->
water	14:31	0:0	4	psz_eng_name
op	14:44	0:0	4	!=
water	14:47	0:0	4	NULL
forexpr	14:53	14:55	3	pl ++
water	14:53	0:0	4	pl
op	14:55	0:0	4	++
stmts	15:4	23:4	3	
water	15:4	0:0	4	{
if	16:8	17:20	4	(* psz_lang == '\0')
cond	16:12	16:25	5	* psz_lang == '\0'
op	16:12	0:0	6	*
water	16:13	0:0	6	psz_lang
op	16:22	0:0	6	==
water	16:25	0:0	6	'\0'
stmts	17:12	17:20	5	
continue	17:12	17:20	6	
if	18:8	22:17	4	(!strcasecmp (pl -> psz_eng_name ,psz_lang ) || !strcasecmp (pl -> psz_iso639_1 ,psz_lang ) || !strcasecmp (pl -> psz_iso639_2T ,psz_lang ) || !strcasecmp (pl -> psz_iso639_2B ,psz_lang ))
cond	18:12	21:53	5	!strcasecmp (pl -> psz_eng_name ,psz_lang ) || !strcasecmp (pl -> psz_iso639_1 ,psz_lang ) || !strcasecmp (pl -> psz_iso639_2T ,psz_lang ) || !strcasecmp (pl -> psz_iso639_2B ,psz_lang )
op	18:12	0:0	6	!
call	18:13	18:52	6	strcasecmp
arg	18:25	18:41	7	pl->psz_eng_name
water	18:25	0:0	8	pl
op	18:27	0:0	8	->
water	18:29	0:0	8	psz_eng_name
arg	18:43	18:52	7	psz_lang
water	18:43	0:0	8	psz_lang
op	18:54	0:0	6	||
op	19:12	0:0	6	!
call	19:13	19:52	6	strcasecmp
arg	19:25	19:41	7	pl->psz_iso639_1
water	19:25	0:0	8	pl
op	19:27	0:0	8	->
water	19:29	0:0	8	psz_iso639_1
arg	19:43	19:52	7	psz_lang
water	19:43	0:0	8	psz_lang
op	19:54	0:0	6	||
op	20:12	0:0	6	!
call	20:13	20:53	6	strcasecmp
arg	20:25	20:42	7	pl->psz_iso639_2T
water	20:25	0:0	8	pl
op	20:27	0:0	8	->
water	20:29	0:0	8	psz_iso639_2T
arg	20:44	20:53	7	psz_lang
water	20:44	0:0	8	psz_lang
op	20:55	0:0	6	||
op	21:12	0:0	6	!
call	21:13	21:53	6	strcasecmp
arg	21:25	21:42	7	pl->psz_iso639_2B
water	21:25	0:0	8	pl
op	21:27	0:0	8	->
water	21:29	0:0	8	psz_iso639_2B
arg	21:44	21:53	7	psz_lang
water	21:44	0:0	8	psz_lang
stmts	22:12	22:17	5	
break	22:12	22:17	6	
water	23:4	0:0	4	}
call	24:4	24:19	2	free
arg	24:10	24:19	3	psz_lang
water	24:10	0:0	4	psz_lang
water	24:20	0:0	2	;
if	25:4	26:41	2	(pl -> psz_eng_name != NULL)
cond	25:8	25:28	3	pl -> psz_eng_name != NULL
water	25:8	0:0	4	pl
op	25:10	0:0	4	->
water	25:12	0:0	4	psz_eng_name
op	25:25	0:0	4	!=
water	25:28	0:0	4	NULL
stmts	26:8	26:41	3	
return	26:8	26:41	4	strdup(pl->psz_iso639_1)
call	26:15	26:40	5	strdup
arg	26:23	26:40	6	pl->psz_iso639_1
water	26:23	0:0	7	pl
op	26:25	0:0	7	->
water	26:27	0:0	7	psz_iso639_1
return	27:4	27:35	2	strdup(LANGUAGE_DEFAULT)
call	27:11	27:34	3	strdup
arg	27:18	27:34	4	LANGUAGE_DEFAULT
water	27:18	0:0	5	LANGUAGE_DEFAULT
