func	2:0	33:0	0	static int	Demux
params	2:16	0:0	1	
param	2:18	2:35	2	demux_t *	p_demux
stmnts	0:0	32:12	1	
decl	4:4	4:40	2	demux_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	p_demux
op	4:33	0:0	2	->
water	4:35	0:0	2	p_sys
decl	5:4	5:37	2	block_t	*p_block_in
water	5:23	0:0	2	,
decl	5:4	5:37	2	block_t	*p_block_out
if	6:4	9:4	2	(( p_block_in =stream_Block (p_demux -> s ,MPGV_PACKET_SIZE ) ) == NULL)
cond	6:8	6:73	3	( p_block_in =stream_Block (p_demux -> s ,MPGV_PACKET_SIZE ) ) == NULL
water	6:8	0:0	4	(
water	6:10	0:0	4	p_block_in
op	6:21	0:0	4	=
call	6:23	6:66	4	stream_Block
arg	6:37	6:47	5	p_demux->s
water	6:37	0:0	6	p_demux
op	6:44	0:0	6	->
water	6:46	0:0	6	s
arg	6:49	6:66	5	MPGV_PACKET_SIZE
water	6:49	0:0	6	MPGV_PACKET_SIZE
water	6:68	0:0	4	)
op	6:70	0:0	4	==
water	6:73	0:0	4	NULL
stmts	7:4	9:4	3	
water	7:4	0:0	4	{
return	8:8	8:16	4	0
water	8:15	0:0	5	0
water	9:4	0:0	4	}
if	10:4	14:4	2	(p_sys -> b_start)
cond	10:8	10:15	3	p_sys -> b_start
water	10:8	0:0	4	p_sys
op	10:13	0:0	4	->
water	10:15	0:0	4	b_start
stmts	11:4	14:4	3	
water	11:4	0:0	4	{
water	12:8	0:0	4	p_block_in
op	12:18	0:0	4	->
water	12:20	0:0	4	i_pts
op	12:26	0:0	4	=
water	13:8	0:0	4	p_block_in
op	13:18	0:0	4	->
water	13:20	0:0	4	i_dts
op	13:26	0:0	4	=
water	13:28	0:0	4	VLC_TS_0
water	13:36	0:0	4	;
water	14:4	0:0	4	}
else	15:4	19:4	2
stmts	16:4	19:4	3	
water	16:4	0:0	4	{
water	17:8	0:0	4	p_block_in
op	17:18	0:0	4	->
water	17:20	0:0	4	i_pts
op	17:26	0:0	4	=
water	18:8	0:0	4	p_block_in
op	18:18	0:0	4	->
water	18:20	0:0	4	i_dts
op	18:26	0:0	4	=
water	18:28	0:0	4	VLC_TS_INVALID
water	18:42	0:0	4	;
water	19:4	0:0	4	}
while	20:4	31:4	2	(( p_block_out =p_sys -> p_packetizer -> pf_packetize (p_sys -> p_packetizer ,& p_block_in ) ))
cond	20:11	20:95	3	( p_block_out =p_sys -> p_packetizer -> pf_packetize (p_sys -> p_packetizer ,& p_block_in ) )
water	20:11	0:0	4	(
water	20:12	0:0	4	p_block_out
op	20:24	0:0	4	=
call	20:26	20:94	4	p_sys->p_packetizer->pf_packetize
arg	20:61	20:80	5	p_sys->p_packetizer
water	20:61	0:0	6	p_sys
op	20:66	0:0	6	->
water	20:68	0:0	6	p_packetizer
arg	20:82	20:94	5	&p_block_in
op	20:82	0:0	6	&
water	20:83	0:0	6	p_block_in
water	20:95	0:0	4	)
stmts	21:4	31:4	3	
water	21:4	0:0	4	{
water	22:8	0:0	4	p_sys
op	22:13	0:0	4	->
water	22:15	0:0	4	b_start
op	22:23	0:0	4	=
water	22:25	0:0	4	false
water	22:30	0:0	4	;
while	23:8	30:8	4	(p_block_out)
cond	23:15	23:15	5	p_block_out
water	23:15	0:0	6	p_block_out
stmts	24:8	30:8	5	
water	24:8	0:0	6	{
decl	25:12	25:49	6	block_t	*p_next
op	25:28	0:0	6	=
water	25:30	0:0	6	p_block_out
op	25:41	0:0	6	->
water	25:43	0:0	6	p_next
call	26:12	26:77	6	es_out_Control
arg	26:28	26:40	7	p_demux->out
water	26:28	0:0	8	p_demux
op	26:35	0:0	8	->
water	26:37	0:0	8	out
arg	26:42	26:56	7	ES_OUT_SET_PCR
water	26:42	0:0	8	ES_OUT_SET_PCR
arg	26:58	26:77	7	p_block_out->i_dts
water	26:58	0:0	8	p_block_out
op	26:69	0:0	8	->
water	26:71	0:0	8	i_dts
water	26:78	0:0	6	;
water	27:12	0:0	6	p_block_out
op	27:23	0:0	6	->
water	27:25	0:0	6	p_next
op	27:32	0:0	6	=
water	27:34	0:0	6	NULL
water	27:38	0:0	6	;
call	28:12	28:64	6	es_out_Send
arg	28:25	28:37	7	p_demux->out
water	28:25	0:0	8	p_demux
op	28:32	0:0	8	->
water	28:34	0:0	8	out
arg	28:39	28:50	7	p_sys->p_es
water	28:39	0:0	8	p_sys
op	28:44	0:0	8	->
water	28:46	0:0	8	p_es
arg	28:52	28:64	7	p_block_out
water	28:52	0:0	8	p_block_out
water	28:65	0:0	6	;
water	29:12	0:0	6	p_block_out
op	29:24	0:0	6	=
water	29:26	0:0	6	p_next
water	29:32	0:0	6	;
water	30:8	0:0	6	}
water	31:4	0:0	4	}
return	32:4	32:12	2	1
water	32:11	0:0	3	1
