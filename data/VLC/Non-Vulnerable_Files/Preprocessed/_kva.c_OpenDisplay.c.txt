func	2:0	148:0	0	static int	OpenDisplay
params	2:22	0:0	1	
param	2:24	2:42	2	vout_display_t *	vd
param	2:44	2:64	2	video_format_t *	fmt
stmnts	0:0	147:22	1	
decl	4:4	4:38	2	vout_display_sys_t	*sys
op	4:29	0:0	2	=
water	4:31	0:0	2	vd
op	4:33	0:0	2	->
water	4:35	0:0	2	sys
decl	5:4	5:32	2	const vlc_fourcc_t	*fallback
decl	6:4	6:23	2	bool	b_hw_accel
op	6:20	0:0	2	=
water	6:22	0:0	2	0
decl	7:4	7:23	2	FOURCC	i_kva_fourcc
decl	8:4	8:22	2	int	i_chroma_shift
decl	9:4	9:24	2	char	sz_title[256]
decl	10:4	10:13	2	RECTL	rcl
decl	11:4	11:12	2	int	w
water	11:9	0:0	2	,
decl	11:4	11:12	2	int	h
call	12:4	12:73	2	msg_Dbg
arg	12:13	12:15	3	vd
water	12:13	0:0	4	vd
arg	12:17	12:40	3	"render chroma = %4.4s"
water	12:17	0:0	4	"render chroma = %4.4s"
arg	12:42	12:73	3	(constchar*)&fmt->i_chroma
water	12:42	0:0	4	(
water	12:44	0:0	4	const
water	12:50	0:0	4	char
op	12:55	0:0	4	*
water	12:57	0:0	4	)
op	12:58	0:0	4	&
water	12:59	0:0	4	fmt
op	12:62	0:0	4	->
water	12:64	0:0	4	i_chroma
water	12:74	0:0	2	;
for	13:4	63:4	2	( int pass = 0 ;pass < 2 && ! b_hw_accel;pass ++)
forinit	0:0	13:21	3	 int pass = 0 ;
decl	13:9	13:21	4	int	pass
op	13:18	0:0	4	=
water	13:20	0:0	4	0
cond	13:23	13:36	3	pass < 2 && ! b_hw_accel
water	13:23	0:0	4	pass
op	13:28	0:0	4	<
water	13:30	0:0	4	2
op	13:32	0:0	4	&&
op	13:35	0:0	4	!
water	13:36	0:0	4	b_hw_accel
forexpr	13:48	13:52	3	pass ++
water	13:48	0:0	4	pass
op	13:52	0:0	4	++
stmts	14:4	63:4	3	
water	14:4	0:0	4	{
water	15:8	0:0	4	fallback
op	15:17	0:0	4	=
water	15:19	0:0	4	(
water	15:21	0:0	4	pass
op	15:26	0:0	4	==
water	15:29	0:0	4	0
water	15:31	0:0	4	)
water	15:33	0:0	4	?
call	15:35	15:76	4	vlc_fourcc_GetYUVFallback
arg	15:62	15:76	5	fmt->i_chroma
water	15:62	0:0	6	fmt
op	15:65	0:0	6	->
water	15:67	0:0	6	i_chroma
water	15:78	0:0	4	:
call	16:35	16:76	4	vlc_fourcc_GetRGBFallback
arg	16:62	16:76	5	fmt->i_chroma
water	16:62	0:0	6	fmt
op	16:65	0:0	6	->
water	16:67	0:0	6	i_chroma
water	16:77	0:0	4	;
for	17:8	62:8	4	( int i = 0 ;fallback [ i ];i ++)
forinit	0:0	17:22	5	 int i = 0 ;
decl	17:13	17:22	6	int	i
op	17:19	0:0	6	=
water	17:21	0:0	6	0
cond	17:24	17:36	5	fallback [ i ]
water	17:24	0:0	6	fallback
op	17:32	0:0	6	[
water	17:34	0:0	6	i
op	17:36	0:0	6	]
forexpr	17:39	17:40	5	i ++
water	17:39	0:0	6	i
op	17:40	0:0	6	++
stmts	18:8	62:8	5	
water	18:8	0:0	6	{
switch	19:12	56:12	6	(fallback [ i ])
cond	19:20	19:32	7	fallback [ i ]
water	19:20	0:0	8	fallback
op	19:28	0:0	8	[
water	19:30	0:0	8	i
op	19:32	0:0	8	]
stmts	20:12	56:12	7	
water	20:12	0:0	8	{
label	21:16	21:35	8	case VLC_CODEC_YV12 :
water	22:20	0:0	8	b_hw_accel
op	22:31	0:0	8	=
water	22:33	0:0	8	sys
op	22:36	0:0	8	->
water	22:38	0:0	8	kvac
op	22:42	0:0	8	.
water	22:43	0:0	8	ulInputFormatFlags
op	22:62	0:0	8	&
water	22:64	0:0	8	KVAF_YV12
water	22:73	0:0	8	;
water	23:20	0:0	8	i_kva_fourcc
op	23:33	0:0	8	=
water	23:35	0:0	8	FOURCC_YV12
water	23:46	0:0	8	;
water	24:20	0:0	8	i_chroma_shift
op	24:35	0:0	8	=
water	24:37	0:0	8	1
water	24:38	0:0	8	;
break	25:20	25:25	8	
label	26:16	26:35	8	case VLC_CODEC_YUYV :
water	27:20	0:0	8	b_hw_accel
op	27:31	0:0	8	=
water	27:33	0:0	8	sys
op	27:36	0:0	8	->
water	27:38	0:0	8	kvac
op	27:42	0:0	8	.
water	27:43	0:0	8	ulInputFormatFlags
op	27:62	0:0	8	&
water	27:64	0:0	8	KVAF_YUY2
water	27:73	0:0	8	;
water	28:20	0:0	8	i_kva_fourcc
op	28:33	0:0	8	=
water	28:35	0:0	8	FOURCC_Y422
water	28:46	0:0	8	;
water	29:20	0:0	8	i_chroma_shift
op	29:35	0:0	8	=
water	29:37	0:0	8	0
water	29:38	0:0	8	;
break	30:20	30:25	8	
label	31:16	31:34	8	case VLC_CODEC_YV9 :
water	32:20	0:0	8	b_hw_accel
op	32:31	0:0	8	=
water	32:33	0:0	8	sys
op	32:36	0:0	8	->
water	32:38	0:0	8	kvac
op	32:42	0:0	8	.
water	32:43	0:0	8	ulInputFormatFlags
op	32:62	0:0	8	&
water	32:64	0:0	8	KVAF_YVU9
water	32:73	0:0	8	;
water	33:20	0:0	8	i_kva_fourcc
op	33:33	0:0	8	=
water	33:35	0:0	8	FOURCC_YVU9
water	33:46	0:0	8	;
water	34:20	0:0	8	i_chroma_shift
op	34:35	0:0	8	=
water	34:37	0:0	8	2
water	34:38	0:0	8	;
break	35:20	35:25	8	
label	36:16	36:36	8	case VLC_CODEC_RGB32 :
water	37:20	0:0	8	b_hw_accel
op	37:31	0:0	8	=
water	37:33	0:0	8	sys
op	37:36	0:0	8	->
water	37:38	0:0	8	kvac
op	37:42	0:0	8	.
water	37:43	0:0	8	ulInputFormatFlags
op	37:62	0:0	8	&
water	37:64	0:0	8	KVAF_BGR32
water	37:74	0:0	8	;
water	38:20	0:0	8	i_kva_fourcc
op	38:33	0:0	8	=
water	38:35	0:0	8	FOURCC_BGR4
water	38:46	0:0	8	;
water	39:20	0:0	8	i_chroma_shift
op	39:35	0:0	8	=
water	39:37	0:0	8	0
water	39:38	0:0	8	;
break	40:20	40:25	8	
label	41:16	41:36	8	case VLC_CODEC_RGB24 :
water	42:20	0:0	8	b_hw_accel
op	42:31	0:0	8	=
water	42:33	0:0	8	sys
op	42:36	0:0	8	->
water	42:38	0:0	8	kvac
op	42:42	0:0	8	.
water	42:43	0:0	8	ulInputFormatFlags
op	42:62	0:0	8	&
water	42:64	0:0	8	KVAF_BGR24
water	42:74	0:0	8	;
water	43:20	0:0	8	i_kva_fourcc
op	43:33	0:0	8	=
water	43:35	0:0	8	FOURCC_BGR3
water	43:46	0:0	8	;
water	44:20	0:0	8	i_chroma_shift
op	44:35	0:0	8	=
water	44:37	0:0	8	0
water	44:38	0:0	8	;
break	45:20	45:25	8	
label	46:16	46:36	8	case VLC_CODEC_RGB16 :
water	47:20	0:0	8	b_hw_accel
op	47:31	0:0	8	=
water	47:33	0:0	8	sys
op	47:36	0:0	8	->
water	47:38	0:0	8	kvac
op	47:42	0:0	8	.
water	47:43	0:0	8	ulInputFormatFlags
op	47:62	0:0	8	&
water	47:64	0:0	8	KVAF_BGR16
water	47:74	0:0	8	;
water	48:20	0:0	8	i_kva_fourcc
op	48:33	0:0	8	=
water	48:35	0:0	8	FOURCC_R565
water	48:46	0:0	8	;
water	49:20	0:0	8	i_chroma_shift
op	49:35	0:0	8	=
water	49:37	0:0	8	0
water	49:38	0:0	8	;
break	50:20	50:25	8	
label	51:16	51:36	8	case VLC_CODEC_RGB15 :
water	52:20	0:0	8	b_hw_accel
op	52:31	0:0	8	=
water	52:33	0:0	8	sys
op	52:36	0:0	8	->
water	52:38	0:0	8	kvac
op	52:42	0:0	8	.
water	52:43	0:0	8	ulInputFormatFlags
op	52:62	0:0	8	&
water	52:64	0:0	8	KVAF_BGR15
water	52:74	0:0	8	;
water	53:20	0:0	8	i_kva_fourcc
op	53:33	0:0	8	=
water	53:35	0:0	8	FOURCC_R555
water	53:46	0:0	8	;
water	54:20	0:0	8	i_chroma_shift
op	54:35	0:0	8	=
water	54:37	0:0	8	0
water	54:38	0:0	8	;
break	55:20	55:25	8	
water	56:12	0:0	8	}
if	57:12	61:12	6	(b_hw_accel)
cond	57:16	57:16	7	b_hw_accel
water	57:16	0:0	8	b_hw_accel
stmts	58:12	61:12	7	
water	58:12	0:0	8	{
water	59:16	0:0	8	fmt
op	59:19	0:0	8	->
water	59:21	0:0	8	i_chroma
op	59:30	0:0	8	=
water	59:32	0:0	8	fallback
op	59:40	0:0	8	[
water	59:42	0:0	8	i
op	59:44	0:0	8	]
water	59:45	0:0	8	;
break	60:16	60:21	8	
water	61:12	0:0	8	}
water	62:8	0:0	6	}
water	63:4	0:0	4	}
if	64:4	68:4	2	(! b_hw_accel)
cond	64:8	64:9	3	! b_hw_accel
op	64:8	0:0	4	!
water	64:9	0:0	4	b_hw_accel
stmts	65:4	68:4	3	
water	65:4	0:0	4	{
call	66:8	66:73	4	msg_Err
arg	66:17	66:19	5	vd
water	66:17	0:0	6	vd
arg	66:21	66:73	5	"Ooops. There is no fourcc supported by KVA at all."
water	66:21	0:0	6	"Ooops. There is no fourcc supported by KVA at all."
water	66:74	0:0	4	;
return	67:8	67:27	4	VLC_EGENERIC
water	67:15	0:0	5	VLC_EGENERIC
water	68:4	0:0	4	}
water	70:4	0:0	2	fmt
op	70:7	0:0	2	->
water	70:9	0:0	2	i_rmask
op	70:17	0:0	2	=
water	70:19	0:0	2	sys
op	70:22	0:0	2	->
water	70:24	0:0	2	kvac
op	70:28	0:0	2	.
water	70:29	0:0	2	ulRMask
water	70:36	0:0	2	;
water	71:4	0:0	2	fmt
op	71:7	0:0	2	->
water	71:9	0:0	2	i_gmask
op	71:17	0:0	2	=
water	71:19	0:0	2	sys
op	71:22	0:0	2	->
water	71:24	0:0	2	kvac
op	71:28	0:0	2	.
water	71:29	0:0	2	ulGMask
water	71:36	0:0	2	;
water	72:4	0:0	2	fmt
op	72:7	0:0	2	->
water	72:9	0:0	2	i_bmask
op	72:17	0:0	2	=
water	72:19	0:0	2	sys
op	72:22	0:0	2	->
water	72:24	0:0	2	kvac
op	72:28	0:0	2	.
water	72:29	0:0	2	ulBMask
water	72:36	0:0	2	;
call	73:4	73:73	2	msg_Dbg
arg	73:13	73:15	3	vd
water	73:13	0:0	4	vd
arg	73:17	73:40	3	"output chroma = %4.4s"
water	73:17	0:0	4	"output chroma = %4.4s"
arg	73:42	73:73	3	(constchar*)&fmt->i_chroma
water	73:42	0:0	4	(
water	73:44	0:0	4	const
water	73:50	0:0	4	char
op	73:55	0:0	4	*
water	73:57	0:0	4	)
op	73:58	0:0	4	&
water	73:59	0:0	4	fmt
op	73:62	0:0	4	->
water	73:64	0:0	4	i_chroma
water	73:74	0:0	2	;
call	74:4	74:69	2	msg_Dbg
arg	74:13	74:15	3	vd
water	74:13	0:0	4	vd
arg	74:17	74:37	3	"KVA chroma = %4.4s"
water	74:17	0:0	4	"KVA chroma = %4.4s"
arg	74:39	74:69	3	(constchar*)&i_kva_fourcc
water	74:39	0:0	4	(
water	74:41	0:0	4	const
water	74:47	0:0	4	char
op	74:52	0:0	4	*
water	74:54	0:0	4	)
op	74:55	0:0	4	&
water	74:56	0:0	4	i_kva_fourcc
water	74:70	0:0	2	;
water	75:4	0:0	2	w
op	75:6	0:0	2	=
water	75:8	0:0	2	fmt
op	75:11	0:0	2	->
water	75:13	0:0	2	i_width
water	75:20	0:0	2	;
water	76:4	0:0	2	h
op	76:6	0:0	2	=
water	76:8	0:0	2	fmt
op	76:11	0:0	2	->
water	76:13	0:0	2	i_height
water	76:21	0:0	2	;
water	77:4	0:0	2	sys
op	77:7	0:0	2	->
water	77:9	0:0	2	kvas
op	77:13	0:0	2	.
water	77:14	0:0	2	ulLength
op	77:33	0:0	2	=
op	77:35	0:0	2	sizeof
water	77:41	0:0	2	(
water	77:43	0:0	2	KVASETUP
water	77:52	0:0	2	)
water	77:53	0:0	2	;
water	78:4	0:0	2	sys
op	78:7	0:0	2	->
water	78:9	0:0	2	kvas
op	78:13	0:0	2	.
water	78:14	0:0	2	szlSrcSize
op	78:24	0:0	2	.
water	78:25	0:0	2	cx
op	78:33	0:0	2	=
water	78:35	0:0	2	w
water	78:36	0:0	2	;
water	79:4	0:0	2	sys
op	79:7	0:0	2	->
water	79:9	0:0	2	kvas
op	79:13	0:0	2	.
water	79:14	0:0	2	szlSrcSize
op	79:24	0:0	2	.
water	79:25	0:0	2	cy
op	79:33	0:0	2	=
water	79:35	0:0	2	h
water	79:36	0:0	2	;
water	80:4	0:0	2	sys
op	80:7	0:0	2	->
water	80:9	0:0	2	kvas
op	80:13	0:0	2	.
water	80:14	0:0	2	rclSrcRect
op	80:24	0:0	2	.
water	80:25	0:0	2	xLeft
op	80:33	0:0	2	=
water	80:35	0:0	2	fmt
op	80:38	0:0	2	->
water	80:40	0:0	2	i_x_offset
water	80:50	0:0	2	;
water	81:4	0:0	2	sys
op	81:7	0:0	2	->
water	81:9	0:0	2	kvas
op	81:13	0:0	2	.
water	81:14	0:0	2	rclSrcRect
op	81:24	0:0	2	.
water	81:25	0:0	2	yTop
op	81:33	0:0	2	=
water	81:35	0:0	2	fmt
op	81:38	0:0	2	->
water	81:40	0:0	2	i_y_offset
water	81:50	0:0	2	;
water	82:4	0:0	2	sys
op	82:7	0:0	2	->
water	82:9	0:0	2	kvas
op	82:13	0:0	2	.
water	82:14	0:0	2	rclSrcRect
op	82:24	0:0	2	.
water	82:25	0:0	2	xRight
op	82:33	0:0	2	=
water	82:35	0:0	2	fmt
op	82:38	0:0	2	->
water	82:40	0:0	2	i_x_offset
op	82:51	0:0	2	+
water	82:53	0:0	2	fmt
op	82:56	0:0	2	->
water	82:58	0:0	2	i_visible_width
water	82:73	0:0	2	;
water	83:4	0:0	2	sys
op	83:7	0:0	2	->
water	83:9	0:0	2	kvas
op	83:13	0:0	2	.
water	83:14	0:0	2	rclSrcRect
op	83:24	0:0	2	.
water	83:25	0:0	2	yBottom
op	83:33	0:0	2	=
water	83:35	0:0	2	fmt
op	83:38	0:0	2	->
water	83:40	0:0	2	i_y_offset
op	83:51	0:0	2	+
water	83:53	0:0	2	fmt
op	83:56	0:0	2	->
water	83:58	0:0	2	i_visible_height
water	83:74	0:0	2	;
water	84:4	0:0	2	sys
op	84:7	0:0	2	->
water	84:9	0:0	2	kvas
op	84:13	0:0	2	.
water	84:14	0:0	2	ulRatio
op	84:33	0:0	2	=
water	84:35	0:0	2	KVAR_FORCEANY
water	84:48	0:0	2	;
water	85:4	0:0	2	sys
op	85:7	0:0	2	->
water	85:9	0:0	2	kvas
op	85:13	0:0	2	.
water	85:14	0:0	2	ulAspectWidth
op	85:33	0:0	2	=
water	85:35	0:0	2	w
water	85:36	0:0	2	;
water	86:4	0:0	2	sys
op	86:7	0:0	2	->
water	86:9	0:0	2	kvas
op	86:13	0:0	2	.
water	86:14	0:0	2	ulAspectHeight
op	86:33	0:0	2	=
water	86:35	0:0	2	h
water	86:36	0:0	2	;
water	87:4	0:0	2	sys
op	87:7	0:0	2	->
water	87:9	0:0	2	kvas
op	87:13	0:0	2	.
water	87:14	0:0	2	fccSrcColor
op	87:33	0:0	2	=
water	87:35	0:0	2	i_kva_fourcc
water	87:47	0:0	2	;
water	88:4	0:0	2	sys
op	88:7	0:0	2	->
water	88:9	0:0	2	kvas
op	88:13	0:0	2	.
water	88:14	0:0	2	fDither
op	88:33	0:0	2	=
water	88:35	0:0	2	TRUE
water	88:39	0:0	2	;
if	89:4	93:4	2	(kvaSetup (& sys -> kvas ))
cond	89:8	89:29	3	kvaSetup (& sys -> kvas )
call	89:8	89:29	4	kvaSetup
arg	89:18	89:29	5	&sys->kvas
op	89:18	0:0	6	&
water	89:19	0:0	6	sys
op	89:22	0:0	6	->
water	89:24	0:0	6	kvas
stmts	90:4	93:4	3	
water	90:4	0:0	4	{
call	91:8	91:40	4	msg_Err
arg	91:17	91:19	5	vd
water	91:17	0:0	6	vd
arg	91:21	91:40	5	"cannot set up KVA"
water	91:21	0:0	6	"cannot set up KVA"
water	91:41	0:0	4	;
return	92:8	92:27	4	VLC_EGENERIC
water	92:15	0:0	5	VLC_EGENERIC
water	93:4	0:0	4	}
decl	95:4	95:55	2	picture_sys_t	*picsys
op	95:26	0:0	2	=
call	95:28	95:54	3	malloc
arg	95:36	95:54	4	sizeof(*picsys)
op	95:36	0:0	5	sizeof
water	95:42	0:0	5	(
op	95:44	0:0	5	*
water	95:45	0:0	5	picsys
water	95:52	0:0	5	)
if	96:4	97:25	2	(picsys == NULL)
cond	96:8	96:18	3	picsys == NULL
water	96:8	0:0	4	picsys
op	96:15	0:0	4	==
water	96:18	0:0	4	NULL
stmts	97:8	97:25	3	
return	97:8	97:25	4	VLC_ENOMEM
water	97:15	0:0	5	VLC_ENOMEM
water	98:4	0:0	2	picsys
op	98:10	0:0	2	->
water	98:12	0:0	2	i_chroma_shift
op	98:27	0:0	2	=
water	98:29	0:0	2	i_chroma_shift
water	98:43	0:0	2	;
decl	99:4	99:53	2	picture_resource_t	resource
op	99:32	0:0	2	=
water	99:34	0:0	2	{
op	99:36	0:0	2	.
water	99:37	0:0	2	p_sys
op	99:43	0:0	2	=
water	99:45	0:0	2	picsys
water	99:52	0:0	2	}
decl	100:4	100:66	2	picture_t	*picture
op	100:23	0:0	2	=
call	100:25	100:65	3	picture_NewFromResource
arg	100:50	100:53	4	fmt
water	100:50	0:0	5	fmt
arg	100:55	100:65	4	&resource
op	100:55	0:0	5	&
water	100:56	0:0	5	resource
if	101:4	105:4	2	(! picture)
cond	101:8	101:9	3	! picture
op	101:8	0:0	4	!
water	101:9	0:0	4	picture
stmts	102:4	105:4	3	
water	102:4	0:0	4	{
call	103:8	103:21	4	free
arg	103:14	103:21	5	picsys
water	103:14	0:0	6	picsys
water	103:22	0:0	4	;
return	104:8	104:25	4	VLC_ENOMEM
water	104:15	0:0	5	VLC_ENOMEM
water	105:4	0:0	4	}
decl	107:4	107:41	2	picture_pool_configuration_t	pool_cfg
call	108:4	108:44	2	memset
arg	108:12	108:21	3	&pool_cfg
op	108:12	0:0	4	&
water	108:13	0:0	4	pool_cfg
arg	108:23	108:24	3	0
water	108:23	0:0	4	0
arg	108:26	108:44	3	sizeof(pool_cfg)
op	108:26	0:0	4	sizeof
water	108:32	0:0	4	(
water	108:34	0:0	4	pool_cfg
water	108:43	0:0	4	)
water	108:45	0:0	2	;
water	109:4	0:0	2	pool_cfg
op	109:12	0:0	2	.
water	109:13	0:0	2	picture_count
op	109:27	0:0	2	=
water	109:29	0:0	2	1
water	109:30	0:0	2	;
water	110:4	0:0	2	pool_cfg
op	110:12	0:0	2	.
water	110:13	0:0	2	picture
op	110:27	0:0	2	=
op	110:29	0:0	2	&
water	110:30	0:0	2	picture
water	110:37	0:0	2	;
water	111:4	0:0	2	pool_cfg
op	111:12	0:0	2	.
water	111:13	0:0	2	lock
op	111:27	0:0	2	=
water	111:29	0:0	2	KVALock
water	111:36	0:0	2	;
water	112:4	0:0	2	pool_cfg
op	112:12	0:0	2	.
water	112:13	0:0	2	unlock
op	112:27	0:0	2	=
water	112:29	0:0	2	KVAUnlock
water	112:38	0:0	2	;
water	113:4	0:0	2	sys
op	113:7	0:0	2	->
water	113:9	0:0	2	pool
op	113:14	0:0	2	=
call	113:16	113:52	2	picture_pool_NewExtended
arg	113:42	113:52	3	&pool_cfg
op	113:42	0:0	4	&
water	113:43	0:0	4	pool_cfg
water	113:53	0:0	2	;
if	114:4	118:4	2	(! sys -> pool)
cond	114:8	114:14	3	! sys -> pool
op	114:8	0:0	4	!
water	114:9	0:0	4	sys
op	114:12	0:0	4	->
water	114:14	0:0	4	pool
stmts	115:4	118:4	3	
water	115:4	0:0	4	{
call	116:8	116:33	4	picture_Release
arg	116:25	116:33	5	picture
water	116:25	0:0	6	picture
water	116:34	0:0	4	;
return	117:8	117:25	4	VLC_ENOMEM
water	117:15	0:0	5	VLC_ENOMEM
water	118:4	0:0	4	}
if	119:4	120:78	2	(vd -> cfg -> display . title)
cond	119:8	119:25	3	vd -> cfg -> display . title
water	119:8	0:0	4	vd
op	119:10	0:0	4	->
water	119:12	0:0	4	cfg
op	119:15	0:0	4	->
water	119:17	0:0	4	display
op	119:24	0:0	4	.
water	119:25	0:0	4	title
stmts	120:8	120:78	3	
call	120:8	120:77	4	snprintf
arg	120:18	120:26	5	sz_title
water	120:18	0:0	6	sz_title
arg	120:28	120:46	5	sizeof(sz_title)
op	120:28	0:0	6	sizeof
water	120:34	0:0	6	(
water	120:36	0:0	6	sz_title
water	120:45	0:0	6	)
arg	120:48	120:52	5	"%s"
water	120:48	0:0	6	"%s"
arg	120:54	120:77	5	vd->cfg->display.title
water	120:54	0:0	6	vd
op	120:56	0:0	6	->
water	120:58	0:0	6	cfg
op	120:61	0:0	6	->
water	120:63	0:0	6	display
op	120:70	0:0	6	.
water	120:71	0:0	6	title
water	120:78	0:0	4	;
else	121:4	127:57	2
stmts	122:8	127:57	3	
call	122:8	127:56	4	snprintf
arg	122:18	122:26	5	sz_title
water	122:18	0:0	6	sz_title
arg	122:28	122:46	5	sizeof(sz_title)
op	122:28	0:0	6	sizeof
water	122:34	0:0	6	(
water	122:36	0:0	6	sz_title
water	122:45	0:0	6	)
arg	123:18	123:60	5	"%s (%4.4s to %4.4s - %s mode KVA output)"
water	123:18	0:0	6	"%s (%4.4s to %4.4s - %s mode KVA output)"
arg	124:18	124:28	5	VOUT_TITLE
water	124:18	0:0	6	VOUT_TITLE
arg	125:18	125:45	5	(char*)&vd->fmt.i_chroma
water	125:18	0:0	6	(
water	125:20	0:0	6	char
op	125:25	0:0	6	*
water	125:27	0:0	6	)
op	125:28	0:0	6	&
water	125:29	0:0	6	vd
op	125:31	0:0	6	->
water	125:33	0:0	6	fmt
op	125:36	0:0	6	.
water	125:37	0:0	6	i_chroma
arg	126:18	126:50	5	(char*)&sys->kvas.fccSrcColor
water	126:18	0:0	6	(
water	126:20	0:0	6	char
op	126:25	0:0	6	*
water	126:27	0:0	6	)
op	126:28	0:0	6	&
water	126:29	0:0	6	sys
op	126:32	0:0	6	->
water	126:34	0:0	6	kvas
op	126:38	0:0	6	.
water	126:39	0:0	6	fccSrcColor
arg	127:18	127:56	5	psz_video_mode[sys->kvac.ulMode-1]
water	127:18	0:0	6	psz_video_mode
op	127:32	0:0	6	[
water	127:34	0:0	6	sys
op	127:37	0:0	6	->
water	127:39	0:0	6	kvac
op	127:43	0:0	6	.
water	127:44	0:0	6	ulMode
op	127:51	0:0	6	-
water	127:53	0:0	6	1
op	127:55	0:0	6	]
water	127:57	0:0	4	;
call	128:4	128:43	2	WinSetWindowText
arg	128:22	128:32	3	sys->frame
water	128:22	0:0	4	sys
op	128:25	0:0	4	->
water	128:27	0:0	4	frame
arg	128:34	128:43	3	sz_title
water	128:34	0:0	4	sz_title
water	128:44	0:0	2	;
water	129:4	0:0	2	sys
op	129:7	0:0	2	->
water	129:9	0:0	2	i_screen_width
op	129:25	0:0	2	=
call	129:27	129:71	2	WinQuerySysValue
arg	129:45	129:57	3	HWND_DESKTOP
water	129:45	0:0	4	HWND_DESKTOP
arg	129:59	129:71	3	SV_CXSCREEN
water	129:59	0:0	4	SV_CXSCREEN
water	129:72	0:0	2	;
water	130:4	0:0	2	sys
op	130:7	0:0	2	->
water	130:9	0:0	2	i_screen_height
op	130:25	0:0	2	=
call	130:27	130:71	2	WinQuerySysValue
arg	130:45	130:57	3	HWND_DESKTOP
water	130:45	0:0	4	HWND_DESKTOP
arg	130:59	130:71	3	SV_CYSCREEN
water	130:59	0:0	4	SV_CYSCREEN
water	130:72	0:0	2	;
if	131:4	132:60	2	(sys -> parent_window)
cond	131:8	131:13	3	sys -> parent_window
water	131:8	0:0	4	sys
op	131:11	0:0	4	->
water	131:13	0:0	4	parent_window
stmts	132:8	132:60	3	
call	132:8	132:59	4	WinQueryWindowRect
arg	132:28	132:39	5	sys->parent
water	132:28	0:0	6	sys
op	132:31	0:0	6	->
water	132:33	0:0	6	parent
arg	132:41	132:59	5	&sys->client_rect
op	132:41	0:0	6	&
water	132:42	0:0	6	sys
op	132:45	0:0	6	->
water	132:47	0:0	6	client_rect
water	132:60	0:0	4	;
else	133:4	139:4	2
stmts	134:4	139:4	3	
water	134:4	0:0	4	{
water	135:8	0:0	4	sys
op	135:11	0:0	4	->
water	135:13	0:0	4	client_rect
op	135:24	0:0	4	.
water	135:25	0:0	4	xLeft
op	135:33	0:0	4	=
water	135:35	0:0	4	(
water	135:37	0:0	4	sys
op	135:40	0:0	4	->
water	135:42	0:0	4	i_screen_width
op	135:58	0:0	4	-
water	135:60	0:0	4	w
water	135:62	0:0	4	)
op	135:64	0:0	4	/
water	135:66	0:0	4	2
water	135:67	0:0	4	;
water	136:8	0:0	4	sys
op	136:11	0:0	4	->
water	136:13	0:0	4	client_rect
op	136:24	0:0	4	.
water	136:25	0:0	4	yBottom
op	136:33	0:0	4	=
water	136:35	0:0	4	(
water	136:37	0:0	4	sys
op	136:40	0:0	4	->
water	136:42	0:0	4	i_screen_height
op	136:58	0:0	4	-
water	136:60	0:0	4	h
water	136:62	0:0	4	)
op	136:64	0:0	4	/
water	136:66	0:0	4	2
water	136:68	0:0	4	;
water	137:8	0:0	4	sys
op	137:11	0:0	4	->
water	137:13	0:0	4	client_rect
op	137:24	0:0	4	.
water	137:25	0:0	4	xRight
op	137:33	0:0	4	=
water	137:35	0:0	4	sys
op	137:38	0:0	4	->
water	137:40	0:0	4	client_rect
op	137:51	0:0	4	.
water	137:52	0:0	4	xLeft
op	137:60	0:0	4	+
water	137:62	0:0	4	w
water	137:63	0:0	4	;
water	138:8	0:0	4	sys
op	138:11	0:0	4	->
water	138:13	0:0	4	client_rect
op	138:24	0:0	4	.
water	138:25	0:0	4	yTop
op	138:33	0:0	4	=
water	138:35	0:0	4	sys
op	138:38	0:0	4	->
water	138:40	0:0	4	client_rect
op	138:51	0:0	4	.
water	138:52	0:0	4	yBottom
op	138:60	0:0	4	+
water	138:62	0:0	4	h
water	138:63	0:0	4	;
water	139:4	0:0	4	}
water	140:4	0:0	2	rcl
op	140:8	0:0	2	=
water	140:10	0:0	2	sys
op	140:13	0:0	2	->
water	140:15	0:0	2	client_rect
water	140:26	0:0	2	;
call	141:4	141:45	2	WinCalcFrameRect
arg	141:22	141:32	3	sys->frame
water	141:22	0:0	4	sys
op	141:25	0:0	4	->
water	141:27	0:0	4	frame
arg	141:34	141:38	3	&rcl
op	141:34	0:0	4	&
water	141:35	0:0	4	rcl
arg	141:40	141:45	3	FALSE
water	141:40	0:0	4	FALSE
water	141:46	0:0	2	;
call	142:4	146:34	2	WinSetWindowPos
arg	142:21	142:31	3	sys->frame
water	142:21	0:0	4	sys
op	142:24	0:0	4	->
water	142:26	0:0	4	frame
arg	142:33	142:41	3	HWND_TOP
water	142:33	0:0	4	HWND_TOP
arg	143:21	143:30	3	rcl.xLeft
water	143:21	0:0	4	rcl
op	143:24	0:0	4	.
water	143:25	0:0	4	xLeft
arg	143:32	143:43	3	rcl.yBottom
water	143:32	0:0	4	rcl
op	143:35	0:0	4	.
water	143:36	0:0	4	yBottom
arg	144:21	144:43	3	rcl.xRight-rcl.xLeft
water	144:21	0:0	4	rcl
op	144:24	0:0	4	.
water	144:25	0:0	4	xRight
op	144:32	0:0	4	-
water	144:34	0:0	4	rcl
op	144:37	0:0	4	.
water	144:38	0:0	4	xLeft
arg	144:45	144:67	3	rcl.yTop-rcl.yBottom
water	144:45	0:0	4	rcl
op	144:48	0:0	4	.
water	144:49	0:0	4	yTop
op	144:54	0:0	4	-
water	144:56	0:0	4	rcl
op	144:59	0:0	4	.
water	144:60	0:0	4	yBottom
arg	145:21	146:34	3	SWP_MOVE|SWP_SIZE|SWP_ZORDER|SWP_SHOW|SWP_ACTIVATE
water	145:21	0:0	4	SWP_MOVE
op	145:30	0:0	4	|
water	145:32	0:0	4	SWP_SIZE
op	145:41	0:0	4	|
water	145:43	0:0	4	SWP_ZORDER
op	145:54	0:0	4	|
water	145:56	0:0	4	SWP_SHOW
op	145:65	0:0	4	|
water	146:21	0:0	4	SWP_ACTIVATE
water	146:35	0:0	2	;
return	147:4	147:22	2	VLC_SUCCESS
water	147:11	0:0	3	VLC_SUCCESS
