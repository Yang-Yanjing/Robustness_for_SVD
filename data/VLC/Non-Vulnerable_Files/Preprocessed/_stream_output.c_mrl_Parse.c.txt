func	2:0	104:0	0	static int	mrl_Parse
params	2:20	0:0	1	
param	2:22	2:34	2	mrl_t *	p_mrl
param	2:36	2:56	2	const char *	psz_mrl
stmnts	0:0	103:25	1	
decl	4:4	4:38	2	char	*psz_dup
op	4:19	0:0	2	=
call	4:21	4:37	3	strdup
arg	4:29	4:37	4	psz_mrl
water	4:29	0:0	5	psz_mrl
decl	5:4	5:31	2	char	*psz_parser
op	5:22	0:0	2	=
water	5:24	0:0	2	psz_dup
decl	6:4	6:27	2	const char	*psz_access
decl	7:4	7:24	2	const char	*psz_way
decl	8:4	8:19	2	char	*psz_name
while	10:4	27:4	2	(* psz_parser && * psz_parser != ':')
cond	10:11	10:41	3	* psz_parser && * psz_parser != ':'
op	10:11	0:0	4	*
water	10:12	0:0	4	psz_parser
op	10:23	0:0	4	&&
op	10:26	0:0	4	*
water	10:27	0:0	4	psz_parser
op	10:38	0:0	4	!=
water	10:41	0:0	4	':'
stmts	11:4	27:4	3	
water	11:4	0:0	4	{
if	12:8	22:8	4	(* psz_parser == '{')
cond	12:12	12:27	5	* psz_parser == '{'
op	12:12	0:0	6	*
water	12:13	0:0	6	psz_parser
op	12:24	0:0	6	==
water	12:27	0:0	6	'{'
stmts	13:8	22:8	5	
water	13:8	0:0	6	{
while	14:12	17:12	6	(* psz_parser && * psz_parser != '}')
cond	14:19	14:49	7	* psz_parser && * psz_parser != '}'
op	14:19	0:0	8	*
water	14:20	0:0	8	psz_parser
op	14:31	0:0	8	&&
op	14:34	0:0	8	*
water	14:35	0:0	8	psz_parser
op	14:46	0:0	8	!=
water	14:49	0:0	8	'}'
stmts	15:12	17:12	7	
water	15:12	0:0	8	{
water	16:16	0:0	8	psz_parser
op	16:26	0:0	8	++
water	16:28	0:0	8	;
water	17:12	0:0	8	}
if	18:12	21:12	6	(* psz_parser)
cond	18:16	18:17	7	* psz_parser
op	18:16	0:0	8	*
water	18:17	0:0	8	psz_parser
stmts	19:12	21:12	7	
water	19:12	0:0	8	{
water	20:16	0:0	8	psz_parser
op	20:26	0:0	8	++
water	20:28	0:0	8	;
water	21:12	0:0	8	}
water	22:8	0:0	6	}
else	23:8	26:8	4
stmts	24:8	26:8	5	
water	24:8	0:0	6	{
water	25:12	0:0	6	psz_parser
op	25:22	0:0	6	++
water	25:24	0:0	6	;
water	26:8	0:0	6	}
water	27:4	0:0	4	}
if	29:4	34:4	2	(psz_parser - psz_dup == 1)
cond	29:8	29:32	3	psz_parser - psz_dup == 1
water	29:8	0:0	4	psz_parser
op	29:19	0:0	4	-
water	29:21	0:0	4	psz_dup
op	29:29	0:0	4	==
water	29:32	0:0	4	1
stmts	30:4	34:4	3	
water	30:4	0:0	4	{
water	33:8	0:0	4	psz_parser
op	33:19	0:0	4	=
water	33:21	0:0	4	""
water	33:23	0:0	4	;
water	34:4	0:0	4	}
if	36:4	40:4	2	(! * psz_parser)
cond	36:8	36:10	3	! * psz_parser
op	36:8	0:0	4	!
op	36:9	0:0	4	*
water	36:10	0:0	4	psz_parser
stmts	37:4	40:4	3	
water	37:4	0:0	4	{
water	38:8	0:0	4	psz_access
op	38:19	0:0	4	=
water	38:21	0:0	4	psz_way
op	38:29	0:0	4	=
water	38:31	0:0	4	""
water	38:33	0:0	4	;
water	39:8	0:0	4	psz_name
op	39:17	0:0	4	=
water	39:19	0:0	4	psz_dup
water	39:26	0:0	4	;
water	40:4	0:0	4	}
else	41:4	98:4	2
stmts	42:4	98:4	3	
water	42:4	0:0	4	{
op	43:8	0:0	4	*
water	43:9	0:0	4	psz_parser
op	43:19	0:0	4	++
op	43:22	0:0	4	=
water	43:24	0:0	4	'\0'
water	43:28	0:0	4	;
if	45:8	48:8	4	(psz_parser [ 0 ] == '/' && psz_parser [ 1 ] == '/')
cond	45:12	45:53	5	psz_parser [ 0 ] == '/' && psz_parser [ 1 ] == '/'
water	45:12	0:0	6	psz_parser
op	45:22	0:0	6	[
water	45:23	0:0	6	0
op	45:24	0:0	6	]
op	45:26	0:0	6	==
water	45:29	0:0	6	'/'
op	45:33	0:0	6	&&
water	45:36	0:0	6	psz_parser
op	45:46	0:0	6	[
water	45:47	0:0	6	1
op	45:48	0:0	6	]
op	45:50	0:0	6	==
water	45:53	0:0	6	'/'
stmts	46:8	48:8	5	
water	46:8	0:0	6	{
water	47:12	0:0	6	psz_parser
op	47:23	0:0	6	+=
water	47:26	0:0	6	2
water	47:28	0:0	6	;
water	48:8	0:0	6	}
water	49:8	0:0	4	psz_name
op	49:17	0:0	4	=
water	49:19	0:0	4	psz_parser
water	49:30	0:0	4	;
water	51:8	0:0	4	psz_parser
op	51:19	0:0	4	=
water	51:21	0:0	4	psz_dup
water	51:28	0:0	4	;
if	52:8	56:8	4	(! * psz_parser)
cond	52:12	52:14	5	! * psz_parser
op	52:12	0:0	6	!
op	52:13	0:0	6	*
water	52:14	0:0	6	psz_parser
stmts	53:8	56:8	5	
water	53:8	0:0	6	{
water	55:12	0:0	6	psz_access
op	55:23	0:0	6	=
water	55:25	0:0	6	""
water	55:27	0:0	6	;
water	56:8	0:0	6	}
else	57:8	62:8	4
stmts	57:13	62:8	5	
if	57:13	62:8	6	(* psz_parser == '/')
cond	57:17	57:32	7	* psz_parser == '/'
op	57:17	0:0	8	*
water	57:18	0:0	8	psz_parser
op	57:29	0:0	8	==
water	57:32	0:0	8	'/'
stmts	58:8	62:8	7	
water	58:8	0:0	8	{
water	60:12	0:0	8	psz_access
op	60:23	0:0	8	=
water	60:25	0:0	8	""
water	60:27	0:0	8	;
water	61:12	0:0	8	psz_parser
op	61:22	0:0	8	++
water	61:24	0:0	8	;
water	62:8	0:0	8	}
else	63:8	88:8	4
stmts	64:8	88:8	5	
water	64:8	0:0	6	{
water	65:12	0:0	6	psz_access
op	65:23	0:0	6	=
water	65:25	0:0	6	psz_parser
water	65:35	0:0	6	;
while	66:12	83:12	6	(* psz_parser && * psz_parser != '/')
cond	66:19	66:49	7	* psz_parser && * psz_parser != '/'
op	66:19	0:0	8	*
water	66:20	0:0	8	psz_parser
op	66:31	0:0	8	&&
op	66:34	0:0	8	*
water	66:35	0:0	8	psz_parser
op	66:46	0:0	8	!=
water	66:49	0:0	8	'/'
stmts	67:12	83:12	7	
water	67:12	0:0	8	{
if	68:16	78:16	8	(* psz_parser == '{')
cond	68:20	68:35	9	* psz_parser == '{'
op	68:20	0:0	10	*
water	68:21	0:0	10	psz_parser
op	68:32	0:0	10	==
water	68:35	0:0	10	'{'
stmts	69:16	78:16	9	
water	69:16	0:0	10	{
while	70:20	73:20	10	(* psz_parser && * psz_parser != '}')
cond	70:27	70:57	11	* psz_parser && * psz_parser != '}'
op	70:27	0:0	12	*
water	70:28	0:0	12	psz_parser
op	70:39	0:0	12	&&
op	70:42	0:0	12	*
water	70:43	0:0	12	psz_parser
op	70:54	0:0	12	!=
water	70:57	0:0	12	'}'
stmts	71:20	73:20	11	
water	71:20	0:0	12	{
water	72:24	0:0	12	psz_parser
op	72:34	0:0	12	++
water	72:36	0:0	12	;
water	73:20	0:0	12	}
if	74:20	77:20	10	(* psz_parser)
cond	74:24	74:25	11	* psz_parser
op	74:24	0:0	12	*
water	74:25	0:0	12	psz_parser
stmts	75:20	77:20	11	
water	75:20	0:0	12	{
water	76:24	0:0	12	psz_parser
op	76:34	0:0	12	++
water	76:36	0:0	12	;
water	77:20	0:0	12	}
water	78:16	0:0	10	}
else	79:16	82:16	8
stmts	80:16	82:16	9	
water	80:16	0:0	10	{
water	81:20	0:0	10	psz_parser
op	81:30	0:0	10	++
water	81:32	0:0	10	;
water	82:16	0:0	10	}
water	83:12	0:0	8	}
if	84:12	87:12	6	(* psz_parser == '/')
cond	84:16	84:31	7	* psz_parser == '/'
op	84:16	0:0	8	*
water	84:17	0:0	8	psz_parser
op	84:28	0:0	8	==
water	84:31	0:0	8	'/'
stmts	85:12	87:12	7	
water	85:12	0:0	8	{
op	86:16	0:0	8	*
water	86:17	0:0	8	psz_parser
op	86:27	0:0	8	++
op	86:30	0:0	8	=
water	86:32	0:0	8	'\0'
water	86:36	0:0	8	;
water	87:12	0:0	8	}
water	88:8	0:0	6	}
if	89:8	93:8	4	(! * psz_parser)
cond	89:12	89:14	5	! * psz_parser
op	89:12	0:0	6	!
op	89:13	0:0	6	*
water	89:14	0:0	6	psz_parser
stmts	90:8	93:8	5	
water	90:8	0:0	6	{
water	92:12	0:0	6	psz_way
op	92:20	0:0	6	=
water	92:22	0:0	6	""
water	92:24	0:0	6	;
water	93:8	0:0	6	}
else	94:8	97:8	4
stmts	95:8	97:8	5	
water	95:8	0:0	6	{
water	96:12	0:0	6	psz_way
op	96:20	0:0	6	=
water	96:22	0:0	6	psz_parser
water	96:32	0:0	6	;
water	97:8	0:0	6	}
water	98:4	0:0	4	}
water	99:4	0:0	2	p_mrl
op	99:9	0:0	2	->
water	99:11	0:0	2	psz_access
op	99:22	0:0	2	=
call	99:24	99:43	2	strdup
arg	99:32	99:43	3	psz_access
water	99:32	0:0	4	psz_access
water	99:44	0:0	2	;
water	100:4	0:0	2	p_mrl
op	100:9	0:0	2	->
water	100:11	0:0	2	psz_way
op	100:22	0:0	2	=
call	100:24	100:40	2	strdup
arg	100:32	100:40	3	psz_way
water	100:32	0:0	4	psz_way
water	100:41	0:0	2	;
water	101:4	0:0	2	p_mrl
op	101:9	0:0	2	->
water	101:11	0:0	2	psz_name
op	101:22	0:0	2	=
call	101:24	101:41	2	strdup
arg	101:32	101:41	3	psz_name
water	101:32	0:0	4	psz_name
water	101:42	0:0	2	;
call	102:4	102:18	2	free
arg	102:10	102:18	3	psz_dup
water	102:10	0:0	4	psz_dup
water	102:19	0:0	2	;
return	103:4	103:25	2	(VLC_SUCCESS)
water	103:10	0:0	3	(
water	103:12	0:0	3	VLC_SUCCESS
water	103:24	0:0	3	)
