func	2:0	65:0	0	static int	DemuxVobSub
params	2:22	0:0	1	
param	2:24	2:40	2	demux_t *	p_demux
param	2:42	2:56	2	block_t *	p_bk
stmnts	0:0	64:22	1	
decl	4:4	4:39	2	demux_sys_t	*p_sys
op	4:23	0:0	2	=
water	4:25	0:0	2	p_demux
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:35	2	uint8_t	*p
op	5:19	0:0	2	=
water	5:21	0:0	2	p_bk
op	5:25	0:0	2	->
water	5:27	0:0	2	p_buffer
decl	6:4	6:56	2	uint8_t	*p_end
op	6:23	0:0	2	=
op	6:25	0:0	2	&
water	6:26	0:0	2	p_bk
op	6:30	0:0	2	->
water	6:32	0:0	2	p_buffer
op	6:40	0:0	2	[
water	6:41	0:0	2	p_bk
op	6:45	0:0	2	->
water	6:47	0:0	2	i_buffer
op	6:55	0:0	2	]
decl	7:4	7:9	2	int	i
while	8:4	63:4	2	(p + 6 < p_end)
cond	8:11	8:19	3	p + 6 < p_end
water	8:11	0:0	4	p
op	8:13	0:0	4	+
water	8:15	0:0	4	6
op	8:17	0:0	4	<
water	8:19	0:0	4	p_end
stmts	9:4	63:4	3	
water	9:4	0:0	4	{
decl	10:8	10:48	4	int	i_size
op	10:19	0:0	4	=
call	10:21	10:47	5	ps_pkt_size
arg	10:34	10:35	6	p
water	10:34	0:0	7	p
arg	10:37	10:47	6	p_end-p
water	10:37	0:0	7	p_end
op	10:43	0:0	7	-
water	10:45	0:0	7	p
decl	11:8	11:22	4	block_t	*p_pkt
decl	12:8	12:21	4	int	i_id
decl	13:8	13:22	4	int	i_spu
if	14:8	15:17	4	(i_size <= 0)
cond	14:12	14:22	5	i_size <= 0
water	14:12	0:0	6	i_size
op	14:19	0:0	6	<=
water	14:22	0:0	6	0
stmts	15:12	15:17	5	
break	15:12	15:17	6	
if	16:8	20:8	4	(i_size > p_end - p)
cond	16:12	16:29	5	i_size > p_end - p
water	16:12	0:0	6	i_size
op	16:19	0:0	6	>
water	16:21	0:0	6	p_end
op	16:27	0:0	6	-
water	16:29	0:0	6	p
stmts	17:8	20:8	5	
water	17:8	0:0	6	{
call	18:12	18:49	6	msg_Warn
arg	18:22	18:29	7	p_demux
water	18:22	0:0	8	p_demux
arg	18:31	18:49	7	"broken PES size"
water	18:31	0:0	8	"broken PES size"
water	18:50	0:0	6	;
break	19:12	19:17	6	
water	20:8	0:0	6	}
if	21:8	25:8	4	(p [ 0 ] != 0 || p [ 1 ] != 0 || p [ 2 ] != 0 x01)
cond	21:12	21:47	5	p [ 0 ] != 0 || p [ 1 ] != 0 || p [ 2 ] != 0 x01
water	21:12	0:0	6	p
op	21:13	0:0	6	[
water	21:14	0:0	6	0
op	21:15	0:0	6	]
op	21:17	0:0	6	!=
water	21:20	0:0	6	0
op	21:22	0:0	6	||
water	21:25	0:0	6	p
op	21:26	0:0	6	[
water	21:27	0:0	6	1
op	21:28	0:0	6	]
op	21:30	0:0	6	!=
water	21:33	0:0	6	0
op	21:35	0:0	6	||
water	21:38	0:0	6	p
op	21:39	0:0	6	[
water	21:40	0:0	6	2
op	21:41	0:0	6	]
op	21:43	0:0	6	!=
water	21:46	0:0	6	0
water	21:47	0:0	6	x01
stmts	22:8	25:8	5	
water	22:8	0:0	6	{
call	23:12	23:45	6	msg_Warn
arg	23:22	23:29	7	p_demux
water	23:22	0:0	8	p_demux
arg	23:31	23:45	7	"invalid PES"
water	23:31	0:0	8	"invalid PES"
water	23:46	0:0	6	;
break	24:12	24:17	6	
water	25:8	0:0	6	}
if	26:8	31:8	4	(p [ 3 ] != 0 xbd)
cond	26:12	26:21	5	p [ 3 ] != 0 xbd
water	26:12	0:0	6	p
op	26:13	0:0	6	[
water	26:14	0:0	6	3
op	26:15	0:0	6	]
op	26:17	0:0	6	!=
water	26:20	0:0	6	0
water	26:21	0:0	6	xbd
stmts	27:8	31:8	5	
water	27:8	0:0	6	{
water	29:12	0:0	6	p
op	29:14	0:0	6	+=
water	29:17	0:0	6	i_size
water	29:23	0:0	6	;
continue	30:12	30:20	6	
water	31:8	0:0	6	}
water	33:8	0:0	4	p_pkt
op	33:14	0:0	4	=
call	33:16	33:36	4	block_Alloc
arg	33:29	33:36	5	i_size
water	33:29	0:0	6	i_size
water	33:37	0:0	4	;
if	34:8	35:17	4	(unlikely (p_pkt == NULL ))
cond	34:12	34:34	5	unlikely (p_pkt == NULL )
call	34:12	34:34	6	unlikely
arg	34:21	34:34	7	p_pkt==NULL
water	34:21	0:0	8	p_pkt
op	34:27	0:0	8	==
water	34:30	0:0	8	NULL
stmts	35:12	35:17	5	
break	35:12	35:17	6	
call	36:8	36:42	4	memcpy
arg	36:16	36:31	5	p_pkt->p_buffer
water	36:16	0:0	6	p_pkt
op	36:21	0:0	6	->
water	36:23	0:0	6	p_buffer
arg	36:33	36:34	5	p
water	36:33	0:0	6	p
arg	36:36	36:42	5	i_size
water	36:36	0:0	6	i_size
water	36:43	0:0	4	;
water	37:8	0:0	4	p
op	37:10	0:0	4	+=
water	37:13	0:0	4	i_size
water	37:19	0:0	4	;
water	38:8	0:0	4	i_id
op	38:13	0:0	4	=
call	38:15	38:32	4	ps_pkt_id
arg	38:26	38:32	5	p_pkt
water	38:26	0:0	6	p_pkt
water	38:33	0:0	4	;
if	39:8	44:8	4	(( i_id & 0 xffe0 ) != 0 xbd20 ||ps_pkt_parse_pes (p_pkt ,1 ))
cond	39:12	40:39	5	( i_id & 0 xffe0 ) != 0 xbd20 ||ps_pkt_parse_pes (p_pkt ,1 )
water	39:12	0:0	6	(
water	39:13	0:0	6	i_id
op	39:17	0:0	6	&
water	39:18	0:0	6	0
water	39:19	0:0	6	xffe0
water	39:24	0:0	6	)
op	39:26	0:0	6	!=
water	39:29	0:0	6	0
water	39:30	0:0	6	xbd20
op	39:36	0:0	6	||
call	40:12	40:39	6	ps_pkt_parse_pes
arg	40:30	40:35	7	p_pkt
water	40:30	0:0	8	p_pkt
arg	40:37	40:39	7	1
water	40:37	0:0	8	1
stmts	41:8	44:8	5	
water	41:8	0:0	6	{
call	42:12	42:33	6	block_Release
arg	42:27	42:33	7	p_pkt
water	42:27	0:0	8	p_pkt
water	42:34	0:0	6	;
continue	43:12	43:20	6	
water	44:8	0:0	6	}
water	45:8	0:0	4	i_spu
op	45:14	0:0	4	=
water	45:16	0:0	4	i_id
op	45:20	0:0	4	&
water	45:21	0:0	4	0
water	45:22	0:0	4	x1f
water	45:25	0:0	4	;
for	47:8	58:8	4	(i = 0 ;i < p_sys -> i_tracks;i ++)
forinit	47:13	47:18	5	i = 0 ;
water	47:13	0:0	6	i
op	47:15	0:0	6	=
water	47:17	0:0	6	0
water	47:18	0:0	6	;
cond	47:20	47:31	5	i < p_sys -> i_tracks
water	47:20	0:0	6	i
op	47:22	0:0	6	<
water	47:24	0:0	6	p_sys
op	47:29	0:0	6	->
water	47:31	0:0	6	i_tracks
forexpr	47:41	47:42	5	i ++
water	47:41	0:0	6	i
op	47:42	0:0	6	++
stmts	48:8	58:8	5	
water	48:8	0:0	6	{
decl	49:12	49:51	6	vobsub_track_t	*p_tk
op	49:33	0:0	6	=
op	49:35	0:0	6	&
water	49:36	0:0	6	p_sys
op	49:41	0:0	6	->
water	49:43	0:0	6	track
op	49:48	0:0	6	[
water	49:49	0:0	6	i
op	49:50	0:0	6	]
water	50:12	0:0	6	p_pkt
op	50:17	0:0	6	->
water	50:19	0:0	6	i_dts
op	50:25	0:0	6	=
water	50:27	0:0	6	p_pkt
op	50:32	0:0	6	->
water	50:34	0:0	6	i_pts
op	50:40	0:0	6	=
water	50:42	0:0	6	p_bk
op	50:46	0:0	6	->
water	50:48	0:0	6	i_pts
water	50:53	0:0	6	;
water	51:12	0:0	6	p_pkt
op	51:17	0:0	6	->
water	51:19	0:0	6	i_length
op	51:28	0:0	6	=
water	51:30	0:0	6	0
water	51:31	0:0	6	;
if	52:12	57:12	6	(p_tk -> p_es && p_tk -> i_track_id == i_spu)
cond	52:16	52:50	7	p_tk -> p_es && p_tk -> i_track_id == i_spu
water	52:16	0:0	8	p_tk
op	52:20	0:0	8	->
water	52:22	0:0	8	p_es
op	52:27	0:0	8	&&
water	52:30	0:0	8	p_tk
op	52:34	0:0	8	->
water	52:36	0:0	8	i_track_id
op	52:47	0:0	8	==
water	52:50	0:0	8	i_spu
stmts	53:12	57:12	7	
water	53:12	0:0	8	{
call	54:16	54:61	8	es_out_Send
arg	54:29	54:41	9	p_demux->out
water	54:29	0:0	10	p_demux
op	54:36	0:0	10	->
water	54:38	0:0	10	out
arg	54:43	54:53	9	p_tk->p_es
water	54:43	0:0	10	p_tk
op	54:47	0:0	10	->
water	54:49	0:0	10	p_es
arg	54:55	54:61	9	p_pkt
water	54:55	0:0	10	p_pkt
water	54:62	0:0	8	;
water	55:16	0:0	8	p_bk
op	55:20	0:0	8	->
water	55:22	0:0	8	i_pts
op	55:28	0:0	8	=
water	55:30	0:0	8	VLC_TS_INVALID
water	55:44	0:0	8	;
break	56:16	56:21	8	
water	57:12	0:0	8	}
water	58:8	0:0	6	}
if	59:8	62:8	4	(i >= p_sys -> i_tracks)
cond	59:12	59:24	5	i >= p_sys -> i_tracks
water	59:12	0:0	6	i
op	59:14	0:0	6	>=
water	59:17	0:0	6	p_sys
op	59:22	0:0	6	->
water	59:24	0:0	6	i_tracks
stmts	60:8	62:8	5	
water	60:8	0:0	6	{
call	61:12	61:33	6	block_Release
arg	61:27	61:33	7	p_pkt
water	61:27	0:0	8	p_pkt
water	61:34	0:0	6	;
water	62:8	0:0	6	}
water	63:4	0:0	4	}
return	64:4	64:22	2	VLC_SUCCESS
water	64:11	0:0	3	VLC_SUCCESS
