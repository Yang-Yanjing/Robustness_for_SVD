func	2:0	134:0	0	static void *	DecBlock
params	2:21	0:0	1	
param	2:23	2:39	2	decoder_t *	p_dec
param	2:41	2:60	2	block_t * *	pp_block
stmnts	0:0	133:15	1	
decl	4:4	4:39	2	decoder_sys_t	*p_sys
op	4:25	0:0	2	=
water	4:27	0:0	2	p_dec
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:20	2	block_t	*p_block
decl	6:4	6:16	2	int	i_result
decl	7:4	7:29	2	DMO_OUTPUT_DATA_BUFFER	db
decl	8:4	8:23	2	CMediaBuffer	*p_out
decl	9:4	9:21	2	block_t	block_out
decl	10:4	10:21	2	uint32_t	i_status
if	11:4	11:31	2	(! pp_block)
cond	11:8	11:9	3	! pp_block
op	11:8	0:0	4	!
water	11:9	0:0	4	pp_block
stmts	11:20	11:31	3	
return	11:20	11:31	4	NULL
water	11:27	0:0	5	NULL
water	12:4	0:0	2	p_block
op	12:12	0:0	2	=
op	12:14	0:0	2	*
water	12:15	0:0	2	pp_block
water	12:23	0:0	2	;
if	14:4	15:39	2	(p_block && p_block -> i_pts <= VLC_TS_INVALID)
cond	14:8	14:37	3	p_block && p_block -> i_pts <= VLC_TS_INVALID
water	14:8	0:0	4	p_block
op	14:16	0:0	4	&&
water	14:19	0:0	4	p_block
op	14:26	0:0	4	->
water	14:28	0:0	4	i_pts
op	14:34	0:0	4	<=
water	14:37	0:0	4	VLC_TS_INVALID
stmts	15:8	15:39	3	
water	15:8	0:0	4	p_block
op	15:15	0:0	4	->
water	15:17	0:0	4	i_pts
op	15:23	0:0	4	=
water	15:25	0:0	4	p_block
op	15:32	0:0	4	->
water	15:34	0:0	4	i_dts
water	15:39	0:0	4	;
if	17:4	21:4	2	(p_block && p_block -> i_pts > VLC_TS_INVALID && p_block -> i_pts !=date_Get (& p_sys -> end_date ))
cond	17:8	18:53	3	p_block && p_block -> i_pts > VLC_TS_INVALID && p_block -> i_pts !=date_Get (& p_sys -> end_date )
water	17:8	0:0	4	p_block
op	17:16	0:0	4	&&
water	17:19	0:0	4	p_block
op	17:26	0:0	4	->
water	17:28	0:0	4	i_pts
op	17:34	0:0	4	>
water	17:36	0:0	4	VLC_TS_INVALID
op	17:51	0:0	4	&&
water	18:8	0:0	4	p_block
op	18:15	0:0	4	->
water	18:17	0:0	4	i_pts
op	18:23	0:0	4	!=
call	18:26	18:53	4	date_Get
arg	18:36	18:53	5	&p_sys->end_date
op	18:36	0:0	6	&
water	18:37	0:0	6	p_sys
op	18:42	0:0	6	->
water	18:44	0:0	6	end_date
stmts	19:4	21:4	3	
water	19:4	0:0	4	{
call	20:8	20:51	4	date_Set
arg	20:18	20:34	5	&p_sys->end_date
op	20:18	0:0	6	&
water	20:19	0:0	6	p_sys
op	20:24	0:0	6	->
water	20:26	0:0	6	end_date
arg	20:36	20:51	5	p_block->i_pts
water	20:36	0:0	6	p_block
op	20:43	0:0	6	->
water	20:45	0:0	6	i_pts
water	20:52	0:0	4	;
water	21:4	0:0	4	}
if	23:4	28:4	2	(!date_Get (& p_sys -> end_date ))
cond	23:8	23:36	3	!date_Get (& p_sys -> end_date )
op	23:8	0:0	4	!
call	23:9	23:36	4	date_Get
arg	23:19	23:36	5	&p_sys->end_date
op	23:19	0:0	6	&
water	23:20	0:0	6	p_sys
op	23:25	0:0	6	->
water	23:27	0:0	6	end_date
stmts	24:4	28:4	3	
water	24:4	0:0	4	{
if	26:8	26:46	4	(p_block)
cond	26:12	26:12	5	p_block
water	26:12	0:0	6	p_block
stmts	26:22	26:46	5	
call	26:22	26:45	6	block_Release
arg	26:37	26:45	7	p_block
water	26:37	0:0	8	p_block
water	26:46	0:0	6	;
return	27:8	27:19	4	NULL
water	27:15	0:0	5	NULL
water	28:4	0:0	4	}
if	31:4	64:4	2	(p_block && p_block -> i_buffer)
cond	31:8	31:28	3	p_block && p_block -> i_buffer
water	31:8	0:0	4	p_block
op	31:16	0:0	4	&&
water	31:19	0:0	4	p_block
op	31:26	0:0	4	->
water	31:28	0:0	4	i_buffer
stmts	32:4	64:4	3	
water	32:4	0:0	4	{
decl	33:8	33:26	4	CMediaBuffer	*p_in
water	34:8	0:0	4	p_in
op	34:13	0:0	4	=
call	34:15	34:68	4	CMediaBufferCreate
arg	34:35	34:42	5	p_block
water	34:35	0:0	6	p_block
arg	34:44	34:61	5	p_block->i_buffer
water	34:44	0:0	6	p_block
op	34:51	0:0	6	->
water	34:53	0:0	6	i_buffer
arg	34:63	34:68	5	true
water	34:63	0:0	6	true
water	34:69	0:0	4	;
water	35:8	0:0	4	i_result
op	35:17	0:0	4	=
call	35:19	37:28	4	p_sys->p_dmo->vt->ProcessInput
arg	35:51	35:63	5	p_sys->p_dmo
water	35:51	0:0	6	p_sys
op	35:56	0:0	6	->
water	35:58	0:0	6	p_dmo
arg	35:65	35:66	5	0
water	35:65	0:0	6	0
arg	36:23	36:43	5	(IMediaBuffer*)p_in
water	36:23	0:0	6	(
water	36:24	0:0	6	IMediaBuffer
op	36:37	0:0	6	*
water	36:38	0:0	6	)
water	36:39	0:0	6	p_in
arg	36:45	36:77	5	DMO_INPUT_DATA_BUFFERF_SYNCPOINT
water	36:45	0:0	6	DMO_INPUT_DATA_BUFFERF_SYNCPOINT
arg	37:23	37:24	5	0
water	37:23	0:0	6	0
arg	37:26	37:28	5	0
water	37:26	0:0	6	0
water	37:29	0:0	4	;
call	38:8	38:44	4	p_in->vt->Release
arg	38:27	38:44	5	(IUnknown*)p_in
water	38:27	0:0	6	(
water	38:28	0:0	6	IUnknown
op	38:37	0:0	6	*
water	38:38	0:0	6	)
water	38:39	0:0	6	p_in
water	38:45	0:0	4	;
if	39:8	46:8	4	(i_result == S_FALSE)
cond	39:12	39:24	5	i_result == S_FALSE
water	39:12	0:0	6	i_result
op	39:21	0:0	6	==
water	39:24	0:0	6	S_FALSE
stmts	40:8	46:8	5	
water	40:8	0:0	6	{
call	43:12	43:66	6	msg_Dbg
arg	43:21	43:26	7	p_dec
water	43:21	0:0	8	p_dec
arg	43:28	43:66	7	"ProcessInput(): no output generated"
water	43:28	0:0	8	"ProcessInput(): no output generated"
water	43:67	0:0	6	;
return	45:12	45:23	6	NULL
water	45:19	0:0	7	NULL
water	46:8	0:0	6	}
else	47:8	51:8	4
stmts	47:13	51:8	5	
if	47:13	51:8	6	(i_result == ( int ) DMO_E_NOTACCEPTING)
cond	47:17	47:34	7	i_result == ( int ) DMO_E_NOTACCEPTING
water	47:17	0:0	8	i_result
op	47:26	0:0	8	==
water	47:29	0:0	8	(
water	47:30	0:0	8	int
water	47:33	0:0	8	)
water	47:34	0:0	8	DMO_E_NOTACCEPTING
stmts	48:8	51:8	7	
water	48:8	0:0	8	{
call	50:12	50:60	8	msg_Dbg
arg	50:21	50:26	9	p_dec
water	50:21	0:0	10	p_dec
arg	50:28	50:60	9	"ProcessInput(): not accepting"
water	50:28	0:0	10	"ProcessInput(): not accepting"
water	50:61	0:0	8	;
water	51:8	0:0	8	}
else	52:8	56:8	4
stmts	52:13	56:8	5	
if	52:13	56:8	6	(i_result != S_OK)
cond	52:17	52:29	7	i_result != S_OK
water	52:17	0:0	8	i_result
op	52:26	0:0	8	!=
water	52:29	0:0	8	S_OK
stmts	53:8	56:8	7	
water	53:8	0:0	8	{
call	54:12	54:53	8	msg_Dbg
arg	54:21	54:26	9	p_dec
water	54:21	0:0	10	p_dec
arg	54:28	54:53	9	"ProcessInput(): failed"
water	54:28	0:0	10	"ProcessInput(): failed"
water	54:54	0:0	8	;
return	55:12	55:23	8	NULL
water	55:19	0:0	9	NULL
water	56:8	0:0	8	}
else	57:8	63:8	4
stmts	58:8	63:8	5	
water	58:8	0:0	6	{
call	60:12	60:57	6	msg_Dbg
arg	60:21	60:26	7	p_dec
water	60:21	0:0	8	p_dec
arg	60:28	60:57	7	"ProcessInput(): successful"
water	60:28	0:0	8	"ProcessInput(): successful"
water	60:58	0:0	6	;
op	62:12	0:0	6	*
water	62:13	0:0	6	pp_block
op	62:22	0:0	6	=
water	62:24	0:0	6	NULL
water	62:28	0:0	6	;
water	63:8	0:0	6	}
water	64:4	0:0	4	}
else	65:4	69:4	2
stmts	65:9	69:4	3	
if	65:9	69:4	4	(p_block && ! p_block -> i_buffer)
cond	65:13	65:34	5	p_block && ! p_block -> i_buffer
water	65:13	0:0	6	p_block
op	65:21	0:0	6	&&
op	65:24	0:0	6	!
water	65:25	0:0	6	p_block
op	65:32	0:0	6	->
water	65:34	0:0	6	i_buffer
stmts	66:4	69:4	5	
water	66:4	0:0	6	{
call	67:8	67:31	6	block_Release
arg	67:23	67:31	7	p_block
water	67:23	0:0	8	p_block
water	67:32	0:0	6	;
op	68:8	0:0	6	*
water	68:9	0:0	6	pp_block
op	68:18	0:0	6	=
water	68:20	0:0	6	NULL
water	68:24	0:0	6	;
water	69:4	0:0	6	}
water	71:4	0:0	2	block_out
op	71:13	0:0	2	.
water	71:14	0:0	2	p_buffer
op	71:23	0:0	2	=
water	71:25	0:0	2	p_sys
op	71:30	0:0	2	->
water	71:32	0:0	2	p_buffer
water	71:40	0:0	2	;
water	72:4	0:0	2	block_out
op	72:13	0:0	2	.
water	72:14	0:0	2	i_buffer
op	72:23	0:0	2	=
water	72:25	0:0	2	0
water	72:26	0:0	2	;
water	73:4	0:0	2	p_out
op	73:10	0:0	2	=
call	73:12	73:71	2	CMediaBufferCreate
arg	73:32	73:42	3	&block_out
op	73:32	0:0	4	&
water	73:33	0:0	4	block_out
arg	73:44	73:63	3	p_sys->i_min_output
water	73:44	0:0	4	p_sys
op	73:49	0:0	4	->
water	73:51	0:0	4	i_min_output
arg	73:65	73:71	3	false
water	73:65	0:0	4	false
water	73:72	0:0	2	;
call	74:4	74:31	2	memset
arg	74:12	74:15	3	&db
op	74:12	0:0	4	&
water	74:13	0:0	4	db
arg	74:17	74:18	3	0
water	74:17	0:0	4	0
arg	74:20	74:31	3	sizeof(db)
op	74:20	0:0	4	sizeof
water	74:26	0:0	4	(
water	74:27	0:0	4	db
water	74:29	0:0	4	)
water	74:32	0:0	2	;
water	75:4	0:0	2	db
op	75:6	0:0	2	.
water	75:7	0:0	2	pBuffer
op	75:15	0:0	2	=
water	75:17	0:0	2	(
water	75:18	0:0	2	IMediaBuffer
op	75:31	0:0	2	*
water	75:32	0:0	2	)
water	75:33	0:0	2	p_out
water	75:38	0:0	2	;
water	76:4	0:0	2	i_result
op	76:13	0:0	2	=
call	76:15	78:37	2	p_sys->p_dmo->vt->ProcessOutput
arg	76:48	76:60	3	p_sys->p_dmo
water	76:48	0:0	4	p_sys
op	76:53	0:0	4	->
water	76:55	0:0	4	p_dmo
arg	77:19	77:60	3	DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER
water	77:19	0:0	4	DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER
arg	78:19	78:20	3	1
water	78:19	0:0	4	1
arg	78:22	78:25	3	&db
op	78:22	0:0	4	&
water	78:23	0:0	4	db
arg	78:27	78:37	3	&i_status
op	78:27	0:0	4	&
water	78:28	0:0	4	i_status
water	78:38	0:0	2	;
if	79:4	89:4	2	(i_result != S_OK)
cond	79:8	79:20	3	i_result != S_OK
water	79:8	0:0	4	i_result
op	79:17	0:0	4	!=
water	79:20	0:0	4	S_OK
stmts	80:4	89:4	3	
water	80:4	0:0	4	{
if	81:8	82:55	4	(i_result != S_FALSE)
cond	81:12	81:24	5	i_result != S_FALSE
water	81:12	0:0	6	i_result
op	81:21	0:0	6	!=
water	81:24	0:0	6	S_FALSE
stmts	82:12	82:55	5	
call	82:12	82:54	6	msg_Dbg
arg	82:21	82:26	7	p_dec
water	82:21	0:0	8	p_dec
arg	82:28	82:54	7	"ProcessOutput(): failed"
water	82:28	0:0	8	"ProcessOutput(): failed"
water	82:55	0:0	6	;
else	84:8	85:58	4
stmts	85:12	85:58	5	
call	85:12	85:57	6	msg_Dbg
arg	85:21	85:26	7	p_dec
water	85:21	0:0	8	p_dec
arg	85:28	85:57	7	"ProcessOutput(): no output"
water	85:28	0:0	8	"ProcessOutput(): no output"
water	85:58	0:0	6	;
call	87:8	87:46	4	p_out->vt->Release
arg	87:28	87:46	5	(IUnknown*)p_out
water	87:28	0:0	6	(
water	87:29	0:0	6	IUnknown
op	87:38	0:0	6	*
water	87:39	0:0	6	)
water	87:40	0:0	6	p_out
water	87:47	0:0	4	;
return	88:8	88:19	4	NULL
water	88:15	0:0	5	NULL
water	89:4	0:0	4	}
call	91:4	91:47	2	msg_Dbg
arg	91:13	91:18	3	p_dec
water	91:13	0:0	4	p_dec
arg	91:20	91:47	3	"ProcessOutput(): success"
water	91:20	0:0	4	"ProcessOutput(): success"
water	91:48	0:0	2	;
if	93:4	100:4	2	(! block_out . i_buffer)
cond	93:8	93:19	3	! block_out . i_buffer
op	93:8	0:0	4	!
water	93:9	0:0	4	block_out
op	93:18	0:0	4	.
water	93:19	0:0	4	i_buffer
stmts	94:4	100:4	3	
water	94:4	0:0	4	{
call	96:8	96:73	4	msg_Dbg
arg	96:17	96:22	5	p_dec
water	96:17	0:0	6	p_dec
arg	96:24	96:73	5	"ProcessOutput(): no output (i_buffer_out == 0)"
water	96:24	0:0	6	"ProcessOutput(): no output (i_buffer_out == 0)"
water	96:74	0:0	4	;
call	98:8	98:46	4	p_out->vt->Release
arg	98:28	98:46	5	(IUnknown*)p_out
water	98:28	0:0	6	(
water	98:29	0:0	6	IUnknown
op	98:38	0:0	6	*
water	98:39	0:0	6	)
water	98:40	0:0	6	p_out
water	98:47	0:0	4	;
return	99:8	99:19	4	NULL
water	99:15	0:0	5	NULL
water	100:4	0:0	4	}
if	101:4	112:4	2	(p_dec -> fmt_out . i_cat == VIDEO_ES)
cond	101:8	101:32	3	p_dec -> fmt_out . i_cat == VIDEO_ES
water	101:8	0:0	4	p_dec
op	101:13	0:0	4	->
water	101:15	0:0	4	fmt_out
op	101:22	0:0	4	.
water	101:23	0:0	4	i_cat
op	101:29	0:0	4	==
water	101:32	0:0	4	VIDEO_ES
stmts	102:4	112:4	3	
water	102:4	0:0	4	{
decl	104:8	104:54	4	picture_t	*p_pic
op	104:25	0:0	4	=
call	104:27	104:53	5	decoder_NewPicture
arg	104:47	104:53	6	p_dec
water	104:47	0:0	7	p_dec
if	105:8	105:32	4	(! p_pic)
cond	105:12	105:13	5	! p_pic
op	105:12	0:0	6	!
water	105:13	0:0	6	p_pic
stmts	105:21	105:32	5	
return	105:21	105:32	6	NULL
water	105:28	0:0	7	NULL
call	106:8	106:47	4	CopyPicture
arg	106:21	106:26	5	p_pic
water	106:21	0:0	6	p_pic
arg	106:28	106:47	5	block_out.p_buffer
water	106:28	0:0	6	block_out
op	106:37	0:0	6	.
water	106:38	0:0	6	p_buffer
water	106:48	0:0	4	;
water	108:8	0:0	4	p_pic
op	108:13	0:0	4	->
water	108:15	0:0	4	date
op	108:20	0:0	4	=
call	108:22	108:49	4	date_Get
arg	108:32	108:49	5	&p_sys->end_date
op	108:32	0:0	6	&
water	108:33	0:0	6	p_sys
op	108:38	0:0	6	->
water	108:40	0:0	6	end_date
water	108:50	0:0	4	;
call	109:8	109:44	4	date_Increment
arg	109:24	109:40	5	&p_sys->end_date
op	109:24	0:0	6	&
water	109:25	0:0	6	p_sys
op	109:30	0:0	6	->
water	109:32	0:0	6	end_date
arg	109:42	109:44	5	1
water	109:42	0:0	6	1
water	109:45	0:0	4	;
call	110:8	110:46	4	p_out->vt->Release
arg	110:28	110:46	5	(IUnknown*)p_out
water	110:28	0:0	6	(
water	110:29	0:0	6	IUnknown
op	110:38	0:0	6	*
water	110:39	0:0	6	)
water	110:40	0:0	6	p_out
water	110:47	0:0	4	;
return	111:8	111:20	4	p_pic
water	111:15	0:0	5	p_pic
water	112:4	0:0	4	}
else	113:4	132:4	2
stmts	114:4	132:4	3	
water	114:4	0:0	4	{
decl	115:8	115:30	4	block_t	*p_aout_buffer
decl	116:8	118:51	4	int	i_samples
op	116:22	0:0	4	=
water	116:24	0:0	4	block_out
op	116:33	0:0	4	.
water	116:34	0:0	4	i_buffer
op	116:43	0:0	4	/
water	117:12	0:0	4	(
water	117:14	0:0	4	p_dec
op	117:19	0:0	4	->
water	117:21	0:0	4	fmt_out
op	117:28	0:0	4	.
water	117:29	0:0	4	audio
op	117:34	0:0	4	.
water	117:35	0:0	4	i_bitspersample
op	117:51	0:0	4	*
water	118:14	0:0	4	p_dec
op	118:19	0:0	4	->
water	118:21	0:0	4	fmt_out
op	118:28	0:0	4	.
water	118:29	0:0	4	audio
op	118:34	0:0	4	.
water	118:35	0:0	4	i_channels
op	118:46	0:0	4	/
water	118:48	0:0	4	8
water	118:50	0:0	4	)
water	119:8	0:0	4	p_aout_buffer
op	119:22	0:0	4	=
call	119:24	119:65	4	decoder_NewAudioBuffer
arg	119:48	119:53	5	p_dec
water	119:48	0:0	6	p_dec
arg	119:55	119:65	5	i_samples
water	119:55	0:0	6	i_samples
water	119:66	0:0	4	;
if	120:8	129:8	4	(p_aout_buffer)
cond	120:12	120:12	5	p_aout_buffer
water	120:12	0:0	6	p_aout_buffer
stmts	121:8	129:8	5	
water	121:8	0:0	6	{
call	122:12	123:59	6	memcpy
arg	122:20	122:43	7	p_aout_buffer->p_buffer
water	122:20	0:0	8	p_aout_buffer
op	122:33	0:0	8	->
water	122:35	0:0	8	p_buffer
arg	123:20	123:38	7	block_out.p_buffer
water	123:20	0:0	8	block_out
op	123:29	0:0	8	.
water	123:30	0:0	8	p_buffer
arg	123:40	123:59	7	block_out.i_buffer
water	123:40	0:0	8	block_out
op	123:49	0:0	8	.
water	123:50	0:0	8	i_buffer
water	123:60	0:0	6	;
water	125:12	0:0	6	p_aout_buffer
op	125:25	0:0	6	->
water	125:27	0:0	6	i_pts
op	125:33	0:0	6	=
call	125:35	125:62	6	date_Get
arg	125:45	125:62	7	&p_sys->end_date
op	125:45	0:0	8	&
water	125:46	0:0	8	p_sys
op	125:51	0:0	8	->
water	125:53	0:0	8	end_date
water	125:63	0:0	6	;
water	126:12	0:0	6	p_aout_buffer
op	126:25	0:0	6	->
water	126:27	0:0	6	i_length
op	126:36	0:0	6	=
call	127:16	127:60	6	date_Increment
arg	127:32	127:48	7	&p_sys->end_date
op	127:32	0:0	8	&
water	127:33	0:0	8	p_sys
op	127:38	0:0	8	->
water	127:40	0:0	8	end_date
arg	127:50	127:60	7	i_samples
water	127:50	0:0	8	i_samples
op	128:16	0:0	6	-
water	128:18	0:0	6	p_aout_buffer
op	128:31	0:0	6	->
water	128:33	0:0	6	i_pts
water	128:38	0:0	6	;
water	129:8	0:0	6	}
call	130:8	130:46	4	p_out->vt->Release
arg	130:28	130:46	5	(IUnknown*)p_out
water	130:28	0:0	6	(
water	130:29	0:0	6	IUnknown
op	130:38	0:0	6	*
water	130:39	0:0	6	)
water	130:40	0:0	6	p_out
water	130:47	0:0	4	;
return	131:8	131:28	4	p_aout_buffer
water	131:15	0:0	5	p_aout_buffer
water	132:4	0:0	4	}
return	133:4	133:15	2	NULL
water	133:11	0:0	3	NULL
