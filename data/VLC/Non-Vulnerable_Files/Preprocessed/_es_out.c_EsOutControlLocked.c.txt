func	2:0	512:0	0	static int	EsOutControlLocked
params	2:29	0:0	1	
param	2:31	2:44	2	es_out_t *	out
param	2:46	2:57	2	int	i_query
param	2:59	2:72	2	va_list	args
stmnts	0:0	511:4	1	
decl	4:4	4:36	2	es_out_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	out
op	4:29	0:0	2	->
water	4:31	0:0	2	p_sys
switch	5:4	511:4	2	(i_query)
cond	5:12	5:12	3	i_query
water	5:12	0:0	4	i_query
stmts	6:4	511:4	3	
water	6:4	0:0	4	{
label	7:4	7:28	4	case ES_OUT_SET_ES_STATE :
water	8:4	0:0	4	{
decl	9:8	9:55	4	es_out_id_t	*es
op	9:24	0:0	4	=
call	9:26	9:54	5	va_arg
arg	9:34	9:38	6	args
water	9:34	0:0	7	args
arg	9:40	9:54	6	es_out_id_t*
water	9:40	0:0	7	es_out_id_t
op	9:52	0:0	7	*
decl	10:8	10:36	4	bool	b
op	10:15	0:0	4	=
call	10:17	10:35	5	va_arg
arg	10:25	10:29	6	args
water	10:25	0:0	7	args
arg	10:31	10:35	6	int
water	10:31	0:0	7	int
if	11:8	15:8	4	(b && !EsIsSelected (es ))
cond	11:12	11:35	5	b && !EsIsSelected (es )
water	11:12	0:0	6	b
op	11:14	0:0	6	&&
op	11:17	0:0	6	!
call	11:18	11:35	6	EsIsSelected
arg	11:32	11:35	7	es
water	11:32	0:0	8	es
stmts	12:8	15:8	5	
water	12:8	0:0	6	{
call	13:12	13:30	6	EsSelect
arg	13:22	13:25	7	out
water	13:22	0:0	8	out
arg	13:27	13:30	7	es
water	13:27	0:0	8	es
water	13:31	0:0	6	;
return	14:12	14:66	6	EsIsSelected(es)?VLC_SUCCESS:VLC_EGENERIC
call	14:19	14:36	7	EsIsSelected
arg	14:33	14:36	8	es
water	14:33	0:0	9	es
water	14:38	0:0	7	?
water	14:40	0:0	7	VLC_SUCCESS
water	14:52	0:0	7	:
water	14:54	0:0	7	VLC_EGENERIC
water	15:8	0:0	6	}
else	16:8	20:8	4
stmts	16:13	20:8	5	
if	16:13	20:8	6	(! b &&EsIsSelected (es ))
cond	16:17	16:40	7	! b &&EsIsSelected (es )
op	16:17	0:0	8	!
water	16:18	0:0	8	b
op	16:20	0:0	8	&&
call	16:23	16:40	8	EsIsSelected
arg	16:37	16:40	9	es
water	16:37	0:0	10	es
stmts	17:8	20:8	7	
water	17:8	0:0	8	{
call	18:12	18:61	8	EsUnselect
arg	18:24	18:27	9	out
water	18:24	0:0	10	out
arg	18:29	18:31	9	es
water	18:29	0:0	10	es
arg	18:33	18:61	9	es->p_pgrm==p_sys->p_pgrm
water	18:33	0:0	10	es
op	18:35	0:0	10	->
water	18:37	0:0	10	p_pgrm
op	18:44	0:0	10	==
water	18:47	0:0	10	p_sys
op	18:52	0:0	10	->
water	18:54	0:0	10	p_pgrm
water	18:62	0:0	8	;
return	19:12	19:30	8	VLC_SUCCESS
water	19:19	0:0	9	VLC_SUCCESS
water	20:8	0:0	8	}
return	21:8	21:26	4	VLC_SUCCESS
water	21:15	0:0	5	VLC_SUCCESS
water	22:4	0:0	4	}
label	23:4	23:28	4	case ES_OUT_GET_ES_STATE :
water	24:4	0:0	4	{
decl	25:8	25:55	4	es_out_id_t	*es
op	25:24	0:0	4	=
call	25:26	25:54	5	va_arg
arg	25:34	25:38	6	args
water	25:34	0:0	7	args
arg	25:40	25:54	6	es_out_id_t*
water	25:40	0:0	7	es_out_id_t
op	25:52	0:0	7	*
decl	26:8	26:41	4	bool	*pb
op	26:17	0:0	4	=
call	26:19	26:40	5	va_arg
arg	26:27	26:31	6	args
water	26:27	0:0	7	args
arg	26:33	26:40	6	bool*
water	26:33	0:0	7	bool
op	26:38	0:0	7	*
op	27:8	0:0	4	*
water	27:9	0:0	4	pb
op	27:12	0:0	4	=
call	27:14	27:31	4	EsIsSelected
arg	27:28	27:31	5	es
water	27:28	0:0	6	es
water	27:32	0:0	4	;
return	28:8	28:26	4	VLC_SUCCESS
water	28:15	0:0	5	VLC_SUCCESS
water	29:4	0:0	4	}
label	30:4	30:32	4	case ES_OUT_GET_GROUP_FORCED :
water	31:4	0:0	4	{
decl	32:8	32:45	4	int	*pi_group
op	32:22	0:0	4	=
call	32:24	32:44	5	va_arg
arg	32:32	32:36	6	args
water	32:32	0:0	7	args
arg	32:38	32:44	6	int*
water	32:38	0:0	7	int
op	32:42	0:0	7	*
op	33:8	0:0	4	*
water	33:9	0:0	4	pi_group
op	33:18	0:0	4	=
water	33:20	0:0	4	p_sys
op	33:25	0:0	4	->
water	33:27	0:0	4	i_group_id
water	33:37	0:0	4	;
return	34:8	34:26	4	VLC_SUCCESS
water	34:15	0:0	5	VLC_SUCCESS
water	35:4	0:0	4	}
label	36:4	36:24	4	case ES_OUT_SET_MODE :
water	37:4	0:0	4	{
decl	38:8	38:46	4	const int	i_mode
op	38:25	0:0	4	=
call	38:27	38:45	5	va_arg
arg	38:35	38:39	6	args
water	38:35	0:0	7	args
arg	38:41	38:45	6	int
water	38:41	0:0	7	int
call	39:8	41:42	4	assert
arg	39:16	41:42	5	i_mode==ES_OUT_MODE_NONE||i_mode==ES_OUT_MODE_ALL||i_mode==ES_OUT_MODE_AUTO||i_mode==ES_OUT_MODE_PARTIAL||i_mode==ES_OUT_MODE_END
water	39:16	0:0	6	i_mode
op	39:23	0:0	6	==
water	39:26	0:0	6	ES_OUT_MODE_NONE
op	39:43	0:0	6	||
water	39:46	0:0	6	i_mode
op	39:53	0:0	6	==
water	39:56	0:0	6	ES_OUT_MODE_ALL
op	39:72	0:0	6	||
water	40:16	0:0	6	i_mode
op	40:23	0:0	6	==
water	40:26	0:0	6	ES_OUT_MODE_AUTO
op	40:43	0:0	6	||
water	40:46	0:0	6	i_mode
op	40:53	0:0	6	==
water	40:56	0:0	6	ES_OUT_MODE_PARTIAL
op	40:76	0:0	6	||
water	41:16	0:0	6	i_mode
op	41:23	0:0	6	==
water	41:26	0:0	6	ES_OUT_MODE_END
water	41:43	0:0	4	;
if	42:8	56:8	4	(i_mode != ES_OUT_MODE_NONE && ! p_sys -> b_active && p_sys -> i_es > 0)
cond	42:12	42:76	5	i_mode != ES_OUT_MODE_NONE && ! p_sys -> b_active && p_sys -> i_es > 0
water	42:12	0:0	6	i_mode
op	42:19	0:0	6	!=
water	42:22	0:0	6	ES_OUT_MODE_NONE
op	42:39	0:0	6	&&
op	42:42	0:0	6	!
water	42:43	0:0	6	p_sys
op	42:48	0:0	6	->
water	42:50	0:0	6	b_active
op	42:59	0:0	6	&&
water	42:62	0:0	6	p_sys
op	42:67	0:0	6	->
water	42:69	0:0	6	i_es
op	42:74	0:0	6	>
water	42:76	0:0	6	0
stmts	43:8	56:8	5	
water	43:8	0:0	6	{
decl	47:12	47:17	6	int	i
for	48:12	53:12	6	(i = 0 ;i < p_sys -> i_es;i ++)
forinit	48:17	48:22	7	i = 0 ;
water	48:17	0:0	8	i
op	48:19	0:0	8	=
water	48:21	0:0	8	0
water	48:22	0:0	8	;
cond	48:24	48:35	7	i < p_sys -> i_es
water	48:24	0:0	8	i
op	48:26	0:0	8	<
water	48:28	0:0	8	p_sys
op	48:33	0:0	8	->
water	48:35	0:0	8	i_es
forexpr	48:41	48:42	7	i ++
water	48:41	0:0	8	i
op	48:42	0:0	8	++
stmts	49:12	53:12	7	
water	49:12	0:0	8	{
decl	50:16	50:48	8	es_out_id_t	*p_es
op	50:34	0:0	8	=
water	50:36	0:0	8	p_sys
op	50:41	0:0	8	->
water	50:43	0:0	8	es
op	50:45	0:0	8	[
water	50:46	0:0	8	i
op	50:47	0:0	8	]
if	51:16	52:25	8	(p_es -> fmt . i_cat == VIDEO_ES)
cond	51:20	51:39	9	p_es -> fmt . i_cat == VIDEO_ES
water	51:20	0:0	10	p_es
op	51:24	0:0	10	->
water	51:26	0:0	10	fmt
op	51:29	0:0	10	.
water	51:30	0:0	10	i_cat
op	51:36	0:0	10	==
water	51:39	0:0	10	VIDEO_ES
stmts	52:20	52:25	9	
break	52:20	52:25	10	
water	53:12	0:0	8	}
if	54:12	55:77	6	(i >= p_sys -> i_es)
cond	54:16	54:28	7	i >= p_sys -> i_es
water	54:16	0:0	8	i
op	54:18	0:0	8	>=
water	54:21	0:0	8	p_sys
op	54:26	0:0	8	->
water	54:28	0:0	8	i_es
stmts	55:16	55:77	7	
call	55:16	55:76	8	input_resource_TerminateVout
arg	55:46	55:76	9	p_sys->p_input->p->p_resource
water	55:46	0:0	10	p_sys
op	55:51	0:0	10	->
water	55:53	0:0	10	p_input
op	55:60	0:0	10	->
water	55:62	0:0	10	p
op	55:63	0:0	10	->
water	55:65	0:0	10	p_resource
water	55:77	0:0	8	;
water	56:8	0:0	6	}
water	57:8	0:0	4	p_sys
op	57:13	0:0	4	->
water	57:15	0:0	4	b_active
op	57:24	0:0	4	=
water	57:26	0:0	4	i_mode
op	57:33	0:0	4	!=
water	57:36	0:0	4	ES_OUT_MODE_NONE
water	57:52	0:0	4	;
water	58:8	0:0	4	p_sys
op	58:13	0:0	4	->
water	58:15	0:0	4	i_mode
op	58:22	0:0	4	=
water	58:24	0:0	4	i_mode
water	58:30	0:0	4	;
for	60:8	65:8	4	( int i = 0 ;i < p_sys -> i_es;i ++)
forinit	0:0	60:22	5	 int i = 0 ;
decl	60:13	60:22	6	int	i
op	60:19	0:0	6	=
water	60:21	0:0	6	0
cond	60:24	60:35	5	i < p_sys -> i_es
water	60:24	0:0	6	i
op	60:26	0:0	6	<
water	60:28	0:0	6	p_sys
op	60:33	0:0	6	->
water	60:35	0:0	6	i_es
forexpr	60:41	60:42	5	i ++
water	60:41	0:0	6	i
op	60:42	0:0	6	++
stmts	61:8	65:8	5	
water	61:8	0:0	6	{
if	62:12	64:67	6	(EsIsSelected (p_sys -> es [ i ] ))
cond	62:16	62:43	7	EsIsSelected (p_sys -> es [ i ] )
call	62:16	62:43	8	EsIsSelected
arg	62:30	62:43	9	p_sys->es[i]
water	62:30	0:0	10	p_sys
op	62:35	0:0	10	->
water	62:37	0:0	10	es
op	62:39	0:0	10	[
water	62:40	0:0	10	i
op	62:41	0:0	10	]
stmts	63:16	64:67	7	
call	63:16	64:66	8	EsUnselect
arg	63:28	63:31	9	out
water	63:28	0:0	10	out
arg	63:33	63:45	9	p_sys->es[i]
water	63:33	0:0	10	p_sys
op	63:38	0:0	10	->
water	63:40	0:0	10	es
op	63:42	0:0	10	[
water	63:43	0:0	10	i
op	63:44	0:0	10	]
arg	64:28	64:66	9	p_sys->es[i]->p_pgrm==p_sys->p_pgrm
water	64:28	0:0	10	p_sys
op	64:33	0:0	10	->
water	64:35	0:0	10	es
op	64:37	0:0	10	[
water	64:38	0:0	10	i
op	64:39	0:0	10	]
op	64:40	0:0	10	->
water	64:42	0:0	10	p_pgrm
op	64:49	0:0	10	==
water	64:52	0:0	10	p_sys
op	64:57	0:0	10	->
water	64:59	0:0	10	p_pgrm
water	64:67	0:0	8	;
water	65:8	0:0	6	}
for	66:8	67:51	4	( int i = 0 ;i < p_sys -> i_es;i ++)
forinit	0:0	66:22	5	 int i = 0 ;
decl	66:13	66:22	6	int	i
op	66:19	0:0	6	=
water	66:21	0:0	6	0
cond	66:24	66:35	5	i < p_sys -> i_es
water	66:24	0:0	6	i
op	66:26	0:0	6	<
water	66:28	0:0	6	p_sys
op	66:33	0:0	6	->
water	66:35	0:0	6	i_es
forexpr	66:41	66:42	5	i ++
water	66:41	0:0	6	i
op	66:42	0:0	6	++
stmts	67:12	67:51	5	
call	67:12	67:50	6	EsOutSelect
arg	67:25	67:28	7	out
water	67:25	0:0	8	out
arg	67:30	67:42	7	p_sys->es[i]
water	67:30	0:0	8	p_sys
op	67:35	0:0	8	->
water	67:37	0:0	8	es
op	67:39	0:0	8	[
water	67:40	0:0	8	i
op	67:41	0:0	8	]
arg	67:44	67:50	7	false
water	67:44	0:0	8	false
water	67:51	0:0	6	;
if	68:8	69:33	4	(i_mode == ES_OUT_MODE_END)
cond	68:12	68:22	5	i_mode == ES_OUT_MODE_END
water	68:12	0:0	6	i_mode
op	68:19	0:0	6	==
water	68:22	0:0	6	ES_OUT_MODE_END
stmts	69:12	69:33	5	
call	69:12	69:32	6	EsOutTerminate
arg	69:28	69:32	7	out
water	69:28	0:0	8	out
water	69:33	0:0	6	;
return	70:8	70:26	4	VLC_SUCCESS
water	70:15	0:0	5	VLC_SUCCESS
water	71:4	0:0	4	}
label	72:4	72:22	4	case ES_OUT_SET_ES :
label	73:4	73:26	4	case ES_OUT_RESTART_ES :
water	74:4	0:0	4	{
decl	75:8	75:55	4	es_out_id_t	*es
op	75:24	0:0	4	=
call	75:26	75:54	5	va_arg
arg	75:34	75:38	6	args
water	75:34	0:0	7	args
arg	75:40	75:54	6	es_out_id_t*
water	75:40	0:0	7	es_out_id_t
op	75:52	0:0	7	*
decl	76:8	76:17	4	int	i_cat
if	77:8	78:30	4	(es == NULL)
cond	77:12	77:18	5	es == NULL
water	77:12	0:0	6	es
op	77:15	0:0	6	==
water	77:18	0:0	6	NULL
stmts	78:12	78:30	5	
water	78:12	0:0	6	i_cat
op	78:18	0:0	6	=
water	78:20	0:0	6	UNKNOWN_ES
water	78:30	0:0	6	;
else	79:8	80:28	4
stmts	79:13	80:28	5	
if	79:13	80:28	6	(es ==( es_out_id_t * ) (( uint8_t * ) NULL + AUDIO_ES ))
cond	79:17	79:61	7	es ==( es_out_id_t * ) (( uint8_t * ) NULL + AUDIO_ES )
water	79:17	0:0	8	es
op	79:20	0:0	8	==
call	79:23	79:61	8	(es_out_id_t*)
arg	79:38	79:61	9	(uint8_t*)NULL+AUDIO_ES
water	79:38	0:0	10	(
water	79:39	0:0	10	uint8_t
op	79:46	0:0	10	*
water	79:47	0:0	10	)
water	79:48	0:0	10	NULL
op	79:52	0:0	10	+
water	79:53	0:0	10	AUDIO_ES
stmts	80:12	80:28	7	
water	80:12	0:0	8	i_cat
op	80:18	0:0	8	=
water	80:20	0:0	8	AUDIO_ES
water	80:28	0:0	8	;
else	81:8	82:28	4
stmts	81:13	82:28	5	
if	81:13	82:28	6	(es ==( es_out_id_t * ) (( uint8_t * ) NULL + VIDEO_ES ))
cond	81:17	81:61	7	es ==( es_out_id_t * ) (( uint8_t * ) NULL + VIDEO_ES )
water	81:17	0:0	8	es
op	81:20	0:0	8	==
call	81:23	81:61	8	(es_out_id_t*)
arg	81:38	81:61	9	(uint8_t*)NULL+VIDEO_ES
water	81:38	0:0	10	(
water	81:39	0:0	10	uint8_t
op	81:46	0:0	10	*
water	81:47	0:0	10	)
water	81:48	0:0	10	NULL
op	81:52	0:0	10	+
water	81:53	0:0	10	VIDEO_ES
stmts	82:12	82:28	7	
water	82:12	0:0	8	i_cat
op	82:18	0:0	8	=
water	82:20	0:0	8	VIDEO_ES
water	82:28	0:0	8	;
else	83:8	84:26	4
stmts	83:13	84:26	5	
if	83:13	84:26	6	(es ==( es_out_id_t * ) (( uint8_t * ) NULL + SPU_ES ))
cond	83:17	83:59	7	es ==( es_out_id_t * ) (( uint8_t * ) NULL + SPU_ES )
water	83:17	0:0	8	es
op	83:20	0:0	8	==
call	83:23	83:59	8	(es_out_id_t*)
arg	83:38	83:59	9	(uint8_t*)NULL+SPU_ES
water	83:38	0:0	10	(
water	83:39	0:0	10	uint8_t
op	83:46	0:0	10	*
water	83:47	0:0	10	)
water	83:48	0:0	10	NULL
op	83:52	0:0	10	+
water	83:53	0:0	10	SPU_ES
stmts	84:12	84:26	7	
water	84:12	0:0	8	i_cat
op	84:18	0:0	8	=
water	84:20	0:0	8	SPU_ES
water	84:26	0:0	8	;
else	85:8	86:22	4
stmts	86:12	86:22	5	
water	86:12	0:0	6	i_cat
op	86:18	0:0	6	=
op	86:20	0:0	6	-
water	86:21	0:0	6	1
water	86:22	0:0	6	;
for	87:8	119:8	4	( int i = 0 ;i < p_sys -> i_es;i ++)
forinit	0:0	87:22	5	 int i = 0 ;
decl	87:13	87:22	6	int	i
op	87:19	0:0	6	=
water	87:21	0:0	6	0
cond	87:24	87:35	5	i < p_sys -> i_es
water	87:24	0:0	6	i
op	87:26	0:0	6	<
water	87:28	0:0	6	p_sys
op	87:33	0:0	6	->
water	87:35	0:0	6	i_es
forexpr	87:41	87:42	5	i ++
water	87:41	0:0	6	i
op	87:42	0:0	6	++
stmts	88:8	119:8	5	
water	88:8	0:0	6	{
if	89:12	96:12	6	(i_cat == - 1)
cond	89:16	89:26	7	i_cat == - 1
water	89:16	0:0	8	i_cat
op	89:22	0:0	8	==
op	89:25	0:0	8	-
water	89:26	0:0	8	1
stmts	90:12	96:12	7	
water	90:12	0:0	8	{
if	91:16	95:16	8	(es == p_sys -> es [ i ])
cond	91:20	91:37	9	es == p_sys -> es [ i ]
water	91:20	0:0	10	es
op	91:23	0:0	10	==
water	91:26	0:0	10	p_sys
op	91:31	0:0	10	->
water	91:33	0:0	10	es
op	91:35	0:0	10	[
water	91:36	0:0	10	i
op	91:37	0:0	10	]
stmts	92:16	95:16	9	
water	92:16	0:0	10	{
call	93:20	93:47	10	EsOutSelect
arg	93:33	93:36	11	out
water	93:33	0:0	12	out
arg	93:38	93:40	11	es
water	93:38	0:0	12	es
arg	93:42	93:47	11	true
water	93:42	0:0	12	true
water	93:48	0:0	10	;
break	94:20	94:25	10	
water	95:16	0:0	10	}
water	96:12	0:0	8	}
else	97:12	118:12	6
stmts	98:12	118:12	7	
water	98:12	0:0	8	{
if	99:16	117:16	8	(i_cat == UNKNOWN_ES || p_sys -> es [ i ] -> fmt . i_cat == i_cat)
cond	99:20	99:70	9	i_cat == UNKNOWN_ES || p_sys -> es [ i ] -> fmt . i_cat == i_cat
water	99:20	0:0	10	i_cat
op	99:26	0:0	10	==
water	99:29	0:0	10	UNKNOWN_ES
op	99:40	0:0	10	||
water	99:43	0:0	10	p_sys
op	99:48	0:0	10	->
water	99:50	0:0	10	es
op	99:52	0:0	10	[
water	99:53	0:0	10	i
op	99:54	0:0	10	]
op	99:55	0:0	10	->
water	99:57	0:0	10	fmt
op	99:60	0:0	10	.
water	99:61	0:0	10	i_cat
op	99:67	0:0	10	==
water	99:70	0:0	10	i_cat
stmts	100:16	117:16	9	
water	100:16	0:0	10	{
if	101:20	116:20	10	(EsIsSelected (p_sys -> es [ i ] ))
cond	101:24	101:51	11	EsIsSelected (p_sys -> es [ i ] )
call	101:24	101:51	12	EsIsSelected
arg	101:38	101:51	13	p_sys->es[i]
water	101:38	0:0	14	p_sys
op	101:43	0:0	14	->
water	101:45	0:0	14	es
op	101:47	0:0	14	[
water	101:48	0:0	14	i
op	101:49	0:0	14	]
stmts	102:20	116:20	11	
water	102:20	0:0	12	{
if	103:24	110:24	12	(i_query == ES_OUT_RESTART_ES)
cond	103:28	103:39	13	i_query == ES_OUT_RESTART_ES
water	103:28	0:0	14	i_query
op	103:36	0:0	14	==
water	103:39	0:0	14	ES_OUT_RESTART_ES
stmts	104:24	110:24	13	
water	104:24	0:0	14	{
if	105:28	109:28	14	(p_sys -> es [ i ] -> p_dec)
cond	105:32	105:46	15	p_sys -> es [ i ] -> p_dec
water	105:32	0:0	16	p_sys
op	105:37	0:0	16	->
water	105:39	0:0	16	es
op	105:41	0:0	16	[
water	105:42	0:0	16	i
op	105:43	0:0	16	]
op	105:44	0:0	16	->
water	105:46	0:0	16	p_dec
stmts	106:28	109:28	15	
water	106:28	0:0	16	{
call	107:32	107:68	16	EsDestroyDecoder
arg	107:50	107:53	17	out
water	107:50	0:0	18	out
arg	107:55	107:68	17	p_sys->es[i]
water	107:55	0:0	18	p_sys
op	107:60	0:0	18	->
water	107:62	0:0	18	es
op	107:64	0:0	18	[
water	107:65	0:0	18	i
op	107:66	0:0	18	]
water	107:69	0:0	16	;
call	108:32	108:67	16	EsCreateDecoder
arg	108:49	108:52	17	out
water	108:49	0:0	18	out
arg	108:54	108:67	17	p_sys->es[i]
water	108:54	0:0	18	p_sys
op	108:59	0:0	18	->
water	108:61	0:0	18	es
op	108:63	0:0	18	[
water	108:64	0:0	18	i
op	108:65	0:0	18	]
water	108:68	0:0	16	;
water	109:28	0:0	16	}
water	110:24	0:0	14	}
else	111:24	115:24	12
stmts	112:24	115:24	13	
water	112:24	0:0	14	{
call	113:28	114:78	14	EsUnselect
arg	113:40	113:43	15	out
water	113:40	0:0	16	out
arg	113:45	113:57	15	p_sys->es[i]
water	113:45	0:0	16	p_sys
op	113:50	0:0	16	->
water	113:52	0:0	16	es
op	113:54	0:0	16	[
water	113:55	0:0	16	i
op	113:56	0:0	16	]
arg	114:40	114:78	15	p_sys->es[i]->p_pgrm==p_sys->p_pgrm
water	114:40	0:0	16	p_sys
op	114:45	0:0	16	->
water	114:47	0:0	16	es
op	114:49	0:0	16	[
water	114:50	0:0	16	i
op	114:51	0:0	16	]
op	114:52	0:0	16	->
water	114:54	0:0	16	p_pgrm
op	114:61	0:0	16	==
water	114:64	0:0	16	p_sys
op	114:69	0:0	16	->
water	114:71	0:0	16	p_pgrm
water	114:79	0:0	14	;
water	115:24	0:0	14	}
water	116:20	0:0	12	}
water	117:16	0:0	10	}
water	118:12	0:0	8	}
water	119:8	0:0	6	}
return	120:8	120:26	4	VLC_SUCCESS
water	120:15	0:0	5	VLC_SUCCESS
water	121:4	0:0	4	}
label	122:4	122:30	4	case ES_OUT_SET_ES_DEFAULT :
water	123:4	0:0	4	{
decl	124:8	124:55	4	es_out_id_t	*es
op	124:24	0:0	4	=
call	124:26	124:54	5	va_arg
arg	124:34	124:38	6	args
water	124:34	0:0	7	args
arg	124:40	124:54	6	es_out_id_t*
water	124:40	0:0	7	es_out_id_t
op	124:52	0:0	7	*
if	125:8	130:8	4	(es == NULL)
cond	125:12	125:18	5	es == NULL
water	125:12	0:0	6	es
op	125:15	0:0	6	==
water	125:18	0:0	6	NULL
stmts	126:8	130:8	5	
water	126:8	0:0	6	{
water	129:12	0:0	6	p_sys
op	129:17	0:0	6	->
water	129:19	0:0	6	i_default_sub_id
op	129:36	0:0	6	=
op	129:38	0:0	6	-
water	129:39	0:0	6	1
water	129:40	0:0	6	;
water	130:8	0:0	6	}
else	131:8	134:8	4
stmts	131:13	134:8	5	
if	131:13	134:8	6	(es ==( es_out_id_t * ) (( uint8_t * ) NULL + AUDIO_ES ))
cond	131:17	131:61	7	es ==( es_out_id_t * ) (( uint8_t * ) NULL + AUDIO_ES )
water	131:17	0:0	8	es
op	131:20	0:0	8	==
call	131:23	131:61	8	(es_out_id_t*)
arg	131:38	131:61	9	(uint8_t*)NULL+AUDIO_ES
water	131:38	0:0	10	(
water	131:39	0:0	10	uint8_t
op	131:46	0:0	10	*
water	131:47	0:0	10	)
water	131:48	0:0	10	NULL
op	131:52	0:0	10	+
water	131:53	0:0	10	AUDIO_ES
stmts	132:8	134:8	7	
water	132:8	0:0	8	{
water	0:0	0:0	8	STATEMENTS
water	134:8	0:0	8	}
else	135:8	138:8	4
stmts	135:13	138:8	5	
if	135:13	138:8	6	(es ==( es_out_id_t * ) (( uint8_t * ) NULL + VIDEO_ES ))
cond	135:17	135:61	7	es ==( es_out_id_t * ) (( uint8_t * ) NULL + VIDEO_ES )
water	135:17	0:0	8	es
op	135:20	0:0	8	==
call	135:23	135:61	8	(es_out_id_t*)
arg	135:38	135:61	9	(uint8_t*)NULL+VIDEO_ES
water	135:38	0:0	10	(
water	135:39	0:0	10	uint8_t
op	135:46	0:0	10	*
water	135:47	0:0	10	)
water	135:48	0:0	10	NULL
op	135:52	0:0	10	+
water	135:53	0:0	10	VIDEO_ES
stmts	136:8	138:8	7	
water	136:8	0:0	8	{
water	0:0	0:0	8	STATEMENTS
water	138:8	0:0	8	}
else	139:8	142:8	4
stmts	139:13	142:8	5	
if	139:13	142:8	6	(es ==( es_out_id_t * ) (( uint8_t * ) NULL + SPU_ES ))
cond	139:17	139:59	7	es ==( es_out_id_t * ) (( uint8_t * ) NULL + SPU_ES )
water	139:17	0:0	8	es
op	139:20	0:0	8	==
call	139:23	139:59	8	(es_out_id_t*)
arg	139:38	139:59	9	(uint8_t*)NULL+SPU_ES
water	139:38	0:0	10	(
water	139:39	0:0	10	uint8_t
op	139:46	0:0	10	*
water	139:47	0:0	10	)
water	139:48	0:0	10	NULL
op	139:52	0:0	10	+
water	139:53	0:0	10	SPU_ES
stmts	140:8	142:8	7	
water	140:8	0:0	8	{
water	141:12	0:0	8	p_sys
op	141:17	0:0	8	->
water	141:19	0:0	8	i_default_sub_id
op	141:36	0:0	8	=
op	141:38	0:0	8	-
water	141:39	0:0	8	1
water	141:40	0:0	8	;
water	142:8	0:0	8	}
else	143:8	153:8	4
stmts	144:8	153:8	5	
water	144:8	0:0	6	{
if	151:12	152:50	6	(es -> fmt . i_cat == SPU_ES)
cond	151:16	151:33	7	es -> fmt . i_cat == SPU_ES
water	151:16	0:0	8	es
op	151:18	0:0	8	->
water	151:20	0:0	8	fmt
op	151:23	0:0	8	.
water	151:24	0:0	8	i_cat
op	151:30	0:0	8	==
water	151:33	0:0	8	SPU_ES
stmts	152:16	152:50	7	
water	152:16	0:0	8	p_sys
op	152:21	0:0	8	->
water	152:23	0:0	8	i_default_sub_id
op	152:40	0:0	8	=
water	152:42	0:0	8	es
op	152:44	0:0	8	->
water	152:46	0:0	8	i_id
water	152:50	0:0	8	;
water	153:8	0:0	6	}
return	154:8	154:26	4	VLC_SUCCESS
water	154:15	0:0	5	VLC_SUCCESS
water	155:4	0:0	4	}
label	156:4	156:23	4	case ES_OUT_SET_PCR :
label	157:4	157:29	4	case ES_OUT_SET_GROUP_PCR :
water	158:4	0:0	4	{
decl	159:8	159:36	4	es_out_pgrm_t	*p_pgrm
op	159:30	0:0	4	=
water	159:32	0:0	4	NULL
decl	160:8	160:34	4	int	i_group
op	160:31	0:0	4	=
water	160:33	0:0	4	0
decl	161:8	161:28	4	int64_t	i_pcr
if	163:8	168:8	4	(i_query == ES_OUT_SET_PCR)
cond	163:12	163:23	5	i_query == ES_OUT_SET_PCR
water	163:12	0:0	6	i_query
op	163:20	0:0	6	==
water	163:23	0:0	6	ES_OUT_SET_PCR
stmts	164:8	168:8	5	
water	164:8	0:0	6	{
water	165:12	0:0	6	p_pgrm
op	165:19	0:0	6	=
water	165:21	0:0	6	p_sys
op	165:26	0:0	6	->
water	165:28	0:0	6	p_pgrm
water	165:34	0:0	6	;
if	166:12	167:56	6	(! p_pgrm)
cond	166:16	166:17	7	! p_pgrm
op	166:16	0:0	8	!
water	166:17	0:0	8	p_pgrm
stmts	167:16	167:56	7	
water	167:16	0:0	8	p_pgrm
op	167:23	0:0	8	=
call	167:25	167:55	8	EsOutProgramAdd
arg	167:42	167:45	9	out
water	167:42	0:0	10	out
arg	167:47	167:55	9	i_group
water	167:47	0:0	10	i_group
water	167:56	0:0	8	;
water	168:8	0:0	6	}
else	169:8	173:8	4
stmts	170:8	173:8	5	
water	170:8	0:0	6	{
water	171:12	0:0	6	i_group
op	171:20	0:0	6	=
water	171:22	0:0	6	(
water	171:23	0:0	6	int
water	171:26	0:0	6	)
call	171:27	171:45	6	va_arg
arg	171:35	171:39	7	args
water	171:35	0:0	8	args
arg	171:41	171:45	7	int
water	171:41	0:0	8	int
water	171:46	0:0	6	;
water	172:12	0:0	6	p_pgrm
op	172:19	0:0	6	=
call	172:21	172:52	6	EsOutProgramFind
arg	172:39	172:42	7	out
water	172:39	0:0	8	out
arg	172:44	172:52	7	i_group
water	172:44	0:0	8	i_group
water	172:53	0:0	6	;
water	173:8	0:0	6	}
if	174:8	175:31	4	(! p_pgrm)
cond	174:12	174:13	5	! p_pgrm
op	174:12	0:0	6	!
water	174:13	0:0	6	p_pgrm
stmts	175:12	175:31	5	
return	175:12	175:31	6	VLC_EGENERIC
water	175:19	0:0	7	VLC_EGENERIC
water	176:8	0:0	4	i_pcr
op	176:14	0:0	4	=
water	176:16	0:0	4	(
water	176:17	0:0	4	int64_t
water	176:24	0:0	4	)
call	176:25	176:47	4	va_arg
arg	176:33	176:37	5	args
water	176:33	0:0	6	args
arg	176:39	176:47	5	int64_t
water	176:39	0:0	6	int64_t
water	176:48	0:0	4	;
if	177:8	181:8	4	(i_pcr <= VLC_TS_INVALID)
cond	177:12	177:21	5	i_pcr <= VLC_TS_INVALID
water	177:12	0:0	6	i_pcr
op	177:18	0:0	6	<=
water	177:21	0:0	6	VLC_TS_INVALID
stmts	178:8	181:8	5	
water	178:8	0:0	6	{
call	179:12	179:85	6	msg_Err
arg	179:21	179:35	7	p_sys->p_input
water	179:21	0:0	8	p_sys
op	179:26	0:0	8	->
water	179:28	0:0	8	p_input
arg	179:37	179:85	7	"Invalid PCR value in ES_OUT_SET_(GROUP_)PCR !"
water	179:37	0:0	8	"Invalid PCR value in ES_OUT_SET_(GROUP_)PCR !"
water	179:86	0:0	6	;
return	180:12	180:31	6	VLC_EGENERIC
water	180:19	0:0	7	VLC_EGENERIC
water	181:8	0:0	6	}
decl	183:8	183:19	4	bool	b_late
call	184:8	188:43	4	input_clock_Update
arg	184:28	184:43	5	p_pgrm->p_clock
water	184:28	0:0	6	p_pgrm
op	184:34	0:0	6	->
water	184:36	0:0	6	p_clock
arg	184:45	184:71	5	VLC_OBJECT(p_sys->p_input)
call	184:45	184:70	6	VLC_OBJECT
arg	184:56	184:70	7	p_sys->p_input
water	184:56	0:0	8	p_sys
op	184:61	0:0	8	->
water	184:63	0:0	8	p_input
arg	185:28	185:35	5	&b_late
op	185:28	0:0	6	&
water	185:29	0:0	6	b_late
arg	186:28	186:87	5	p_sys->p_input->p->b_can_pace_control||p_sys->b_buffering
water	186:28	0:0	6	p_sys
op	186:33	0:0	6	->
water	186:35	0:0	6	p_input
op	186:42	0:0	6	->
water	186:44	0:0	6	p
op	186:45	0:0	6	->
water	186:47	0:0	6	b_can_pace_control
op	186:66	0:0	6	||
water	186:69	0:0	6	p_sys
op	186:74	0:0	6	->
water	186:76	0:0	6	b_buffering
arg	187:28	187:63	5	EsOutIsExtraBufferingAllowed(out)
call	187:28	187:62	6	EsOutIsExtraBufferingAllowed
arg	187:58	187:62	7	out
water	187:58	0:0	8	out
arg	188:28	188:33	5	i_pcr
water	188:28	0:0	6	i_pcr
arg	188:35	188:43	5	mdate()
call	188:35	188:41	6	mdate
water	188:44	0:0	4	;
if	189:8	190:30	4	(! p_sys -> p_pgrm)
cond	189:12	189:20	5	! p_sys -> p_pgrm
op	189:12	0:0	6	!
water	189:13	0:0	6	p_sys
op	189:18	0:0	6	->
water	189:20	0:0	6	p_pgrm
stmts	190:12	190:30	5	
return	190:12	190:30	6	VLC_SUCCESS
water	190:19	0:0	7	VLC_SUCCESS
if	191:8	195:8	4	(p_sys -> b_buffering)
cond	191:12	191:19	5	p_sys -> b_buffering
water	191:12	0:0	6	p_sys
op	191:17	0:0	6	->
water	191:19	0:0	6	b_buffering
stmts	192:8	195:8	5	
water	192:8	0:0	6	{
call	194:12	194:51	6	EsOutDecodersStopBuffering
arg	194:40	194:43	7	out
water	194:40	0:0	8	out
arg	194:45	194:51	7	false
water	194:45	0:0	8	false
water	194:52	0:0	6	;
water	195:8	0:0	6	}
else	196:8	227:8	4
stmts	196:13	227:8	5	
if	196:13	227:8	6	(p_pgrm == p_sys -> p_pgrm)
cond	196:17	196:34	7	p_pgrm == p_sys -> p_pgrm
water	196:17	0:0	8	p_pgrm
op	196:24	0:0	8	==
water	196:27	0:0	8	p_sys
op	196:32	0:0	8	->
water	196:34	0:0	8	p_pgrm
stmts	197:8	227:8	7	
water	197:8	0:0	8	{
if	198:12	226:12	8	(b_late && ( ! p_sys -> p_input -> p -> p_sout || ! p_sys -> p_input -> p -> b_out_pace_control ))
cond	198:16	199:72	9	b_late && ( ! p_sys -> p_input -> p -> p_sout || ! p_sys -> p_input -> p -> b_out_pace_control )
water	198:16	0:0	10	b_late
op	198:23	0:0	10	&&
water	198:26	0:0	10	(
op	198:28	0:0	10	!
water	198:29	0:0	10	p_sys
op	198:34	0:0	10	->
water	198:36	0:0	10	p_input
op	198:43	0:0	10	->
water	198:45	0:0	10	p
op	198:46	0:0	10	->
water	198:48	0:0	10	p_sout
op	198:55	0:0	10	||
op	199:33	0:0	10	!
water	199:34	0:0	10	p_sys
op	199:39	0:0	10	->
water	199:41	0:0	10	p_input
op	199:48	0:0	10	->
water	199:50	0:0	10	p
op	199:51	0:0	10	->
water	199:53	0:0	10	b_out_pace_control
water	199:72	0:0	10	)
stmts	200:12	226:12	9	
water	200:12	0:0	10	{
decl	201:16	201:89	10	const mtime_t	i_pts_delay_base
op	201:47	0:0	10	=
water	201:49	0:0	10	p_sys
op	201:54	0:0	10	->
water	201:56	0:0	10	i_pts_delay
op	201:68	0:0	10	-
water	201:70	0:0	10	p_sys
op	201:75	0:0	10	->
water	201:77	0:0	10	i_pts_jitter
decl	202:16	202:78	10	mtime_t	i_pts_delay
op	202:36	0:0	10	=
call	202:38	202:77	11	input_clock_GetJitter
arg	202:61	202:77	12	p_pgrm->p_clock
water	202:61	0:0	13	p_pgrm
op	202:67	0:0	13	->
water	202:69	0:0	13	p_clock
decl	204:16	204:113	10	const mtime_t	i_jitter_max
op	204:43	0:0	10	=
call	204:45	204:57	11	INT64_C
arg	204:53	204:57	12	1000
water	204:53	0:0	13	1000
call	204:59	204:112	11	*var_InheritInteger
arg	204:81	204:95	12	p_sys->p_input
water	204:81	0:0	13	p_sys
op	204:86	0:0	13	->
water	204:88	0:0	13	p_input
arg	204:97	204:112	12	"clock-jitter"
water	204:97	0:0	13	"clock-jitter"
if	205:16	214:16	10	(i_pts_delay >__MIN (i_pts_delay_base + i_jitter_max ,INPUT_PTS_DELAY_MAX ))
cond	205:20	205:94	11	i_pts_delay >__MIN (i_pts_delay_base + i_jitter_max ,INPUT_PTS_DELAY_MAX )
water	205:20	0:0	12	i_pts_delay
op	205:32	0:0	12	>
call	205:34	205:94	12	__MIN
arg	205:41	205:72	13	i_pts_delay_base+i_jitter_max
water	205:41	0:0	14	i_pts_delay_base
op	205:58	0:0	14	+
water	205:60	0:0	14	i_jitter_max
arg	205:74	205:94	13	INPUT_PTS_DELAY_MAX
water	205:74	0:0	14	INPUT_PTS_DELAY_MAX
stmts	206:16	214:16	11	
water	206:16	0:0	12	{
call	207:20	209:74	12	msg_Err
arg	207:29	207:43	13	p_sys->p_input
water	207:29	0:0	14	p_sys
op	207:34	0:0	14	->
water	207:36	0:0	14	p_input
arg	208:29	208:99	13	"ES_OUT_SET_(GROUP_)PCR  is called too late (jitter of %d ms ignored)"
water	208:29	0:0	14	"ES_OUT_SET_(GROUP_)PCR  is called too late (jitter of %d ms ignored)"
arg	209:29	209:74	13	(int)(i_pts_delay-i_pts_delay_base)/1000
call	209:29	209:65	14	(int)
arg	209:35	209:65	15	i_pts_delay-i_pts_delay_base
water	209:35	0:0	16	i_pts_delay
op	209:47	0:0	16	-
water	209:49	0:0	16	i_pts_delay_base
op	209:67	0:0	14	/
water	209:69	0:0	14	1000
water	209:75	0:0	12	;
water	210:20	0:0	12	i_pts_delay
op	210:32	0:0	12	=
water	210:34	0:0	12	p_sys
op	210:39	0:0	12	->
water	210:41	0:0	12	i_pts_delay
water	210:52	0:0	12	;
for	212:20	213:66	12	( int i = 0 ;i < p_sys -> i_pgrm;i ++)
forinit	0:0	212:34	13	 int i = 0 ;
decl	212:25	212:34	14	int	i
op	212:31	0:0	14	=
water	212:33	0:0	14	0
cond	212:36	212:47	13	i < p_sys -> i_pgrm
water	212:36	0:0	14	i
op	212:38	0:0	14	<
water	212:40	0:0	14	p_sys
op	212:45	0:0	14	->
water	212:47	0:0	14	i_pgrm
forexpr	212:55	212:56	13	i ++
water	212:55	0:0	14	i
op	212:56	0:0	14	++
stmts	213:22	213:66	13	
call	213:22	213:65	14	input_clock_Reset
arg	213:41	213:65	15	p_sys->pgrm[i]->p_clock
water	213:41	0:0	16	p_sys
op	213:46	0:0	16	->
water	213:48	0:0	16	pgrm
op	213:52	0:0	16	[
water	213:53	0:0	16	i
op	213:54	0:0	16	]
op	213:55	0:0	16	->
water	213:57	0:0	16	p_clock
water	213:66	0:0	14	;
water	214:16	0:0	12	}
else	215:16	224:16	10
stmts	216:16	224:16	11	
water	216:16	0:0	12	{
call	217:20	219:53	12	msg_Err
arg	217:29	217:43	13	p_sys->p_input
water	217:29	0:0	14	p_sys
op	217:34	0:0	14	->
water	217:36	0:0	14	p_input
arg	218:29	218:104	13	"ES_OUT_SET_(GROUP_)PCR  is called too late (pts_delay increased to %d ms)"
water	218:29	0:0	14	"ES_OUT_SET_(GROUP_)PCR  is called too late (pts_delay increased to %d ms)"
arg	219:29	219:53	13	(int)(i_pts_delay/1000)
call	219:29	219:51	14	(int)
arg	219:35	219:51	15	i_pts_delay/1000
water	219:35	0:0	16	i_pts_delay
op	219:46	0:0	16	/
water	219:47	0:0	16	1000
water	219:54	0:0	12	;
call	223:20	223:58	12	es_out_Control
arg	223:36	223:39	13	out
water	223:36	0:0	14	out
arg	223:41	223:58	13	ES_OUT_RESET_PCR
water	223:41	0:0	14	ES_OUT_RESET_PCR
water	223:59	0:0	12	;
water	224:16	0:0	12	}
call	225:16	225:109	10	es_out_SetJitter
arg	225:34	225:37	11	out
water	225:34	0:0	12	out
arg	225:39	225:55	11	i_pts_delay_base
water	225:39	0:0	12	i_pts_delay_base
arg	225:57	225:87	11	i_pts_delay-i_pts_delay_base
water	225:57	0:0	12	i_pts_delay
op	225:69	0:0	12	-
water	225:71	0:0	12	i_pts_delay_base
arg	225:89	225:109	11	p_sys->i_cr_average
water	225:89	0:0	12	p_sys
op	225:94	0:0	12	->
water	225:96	0:0	12	i_cr_average
water	225:110	0:0	10	;
water	226:12	0:0	10	}
water	227:8	0:0	8	}
return	228:8	228:26	4	VLC_SUCCESS
water	228:15	0:0	5	VLC_SUCCESS
water	229:4	0:0	4	}
label	230:4	230:25	4	case ES_OUT_RESET_PCR :
call	231:8	231:59	4	msg_Err
arg	231:17	231:31	5	p_sys->p_input
water	231:17	0:0	6	p_sys
op	231:22	0:0	6	->
water	231:24	0:0	6	p_input
arg	231:33	231:59	5	"ES_OUT_RESET_PCR called"
water	231:33	0:0	6	"ES_OUT_RESET_PCR called"
water	231:60	0:0	4	;
call	232:8	232:33	4	EsOutChangePosition
arg	232:29	232:33	5	out
water	232:29	0:0	6	out
water	232:34	0:0	4	;
return	233:8	233:26	4	VLC_SUCCESS
water	233:15	0:0	5	VLC_SUCCESS
label	234:4	234:25	4	case ES_OUT_SET_GROUP :
water	235:4	0:0	4	{
decl	236:8	236:35	4	int	i
op	236:14	0:0	4	=
call	236:16	236:34	5	va_arg
arg	236:24	236:28	6	args
water	236:24	0:0	7	args
arg	236:30	236:34	6	int
water	236:30	0:0	7	int
for	237:8	245:8	4	( int j = 0 ;j < p_sys -> i_pgrm;j ++)
forinit	0:0	237:22	5	 int j = 0 ;
decl	237:13	237:22	6	int	j
op	237:19	0:0	6	=
water	237:21	0:0	6	0
cond	237:24	237:35	5	j < p_sys -> i_pgrm
water	237:24	0:0	6	j
op	237:26	0:0	6	<
water	237:28	0:0	6	p_sys
op	237:33	0:0	6	->
water	237:35	0:0	6	i_pgrm
forexpr	237:43	237:44	5	j ++
water	237:43	0:0	6	j
op	237:44	0:0	6	++
stmts	238:8	245:8	5	
water	238:8	0:0	6	{
decl	239:12	239:50	6	es_out_pgrm_t	*p_pgrm
op	239:34	0:0	6	=
water	239:36	0:0	6	p_sys
op	239:41	0:0	6	->
water	239:43	0:0	6	pgrm
op	239:47	0:0	6	[
water	239:48	0:0	6	j
op	239:49	0:0	6	]
if	240:12	244:12	6	(p_pgrm -> i_id == i)
cond	240:16	240:32	7	p_pgrm -> i_id == i
water	240:16	0:0	8	p_pgrm
op	240:22	0:0	8	->
water	240:24	0:0	8	i_id
op	240:29	0:0	8	==
water	240:32	0:0	8	i
stmts	241:12	244:12	7	
water	241:12	0:0	8	{
call	242:16	242:48	8	EsOutProgramSelect
arg	242:36	242:39	9	out
water	242:36	0:0	10	out
arg	242:41	242:48	9	p_pgrm
water	242:41	0:0	10	p_pgrm
water	242:49	0:0	8	;
return	243:16	243:34	8	VLC_SUCCESS
water	243:23	0:0	9	VLC_SUCCESS
water	244:12	0:0	8	}
water	245:8	0:0	6	}
return	246:8	246:27	4	VLC_EGENERIC
water	246:15	0:0	5	VLC_EGENERIC
water	247:4	0:0	4	}
label	248:4	248:26	4	case ES_OUT_SET_ES_FMT :
water	249:4	0:0	4	{
decl	252:8	252:55	4	es_out_id_t	*es
op	252:24	0:0	4	=
call	252:26	252:54	5	va_arg
arg	252:34	252:38	6	args
water	252:34	0:0	7	args
arg	252:40	252:54	6	es_out_id_t*
water	252:40	0:0	7	es_out_id_t
op	252:52	0:0	7	*
decl	253:8	253:58	4	es_format_t	*p_fmt
op	253:27	0:0	4	=
call	253:29	253:57	5	va_arg
arg	253:37	253:41	6	args
water	253:37	0:0	7	args
arg	253:43	253:57	6	es_format_t*
water	253:43	0:0	7	es_format_t
op	253:55	0:0	7	*
if	254:8	255:31	4	(es == NULL)
cond	254:12	254:18	5	es == NULL
water	254:12	0:0	6	es
op	254:15	0:0	6	==
water	254:18	0:0	6	NULL
stmts	255:12	255:31	5	
return	255:12	255:31	6	VLC_EGENERIC
water	255:19	0:0	7	VLC_EGENERIC
if	256:8	273:8	4	(p_fmt -> i_extra)
cond	256:12	256:19	5	p_fmt -> i_extra
water	256:12	0:0	6	p_fmt
op	256:17	0:0	6	->
water	256:19	0:0	6	i_extra
stmts	257:8	273:8	5	
water	257:8	0:0	6	{
water	258:12	0:0	6	es
op	258:14	0:0	6	->
water	258:16	0:0	6	fmt
op	258:19	0:0	6	.
water	258:20	0:0	6	i_extra
op	258:28	0:0	6	=
water	258:30	0:0	6	p_fmt
op	258:35	0:0	6	->
water	258:37	0:0	6	i_extra
water	258:44	0:0	6	;
water	259:12	0:0	6	es
op	259:14	0:0	6	->
water	259:16	0:0	6	fmt
op	259:19	0:0	6	.
water	259:20	0:0	6	p_extra
op	259:28	0:0	6	=
call	259:30	259:72	6	xrealloc
arg	259:40	259:55	7	es->fmt.p_extra
water	259:40	0:0	8	es
op	259:42	0:0	8	->
water	259:44	0:0	8	fmt
op	259:47	0:0	8	.
water	259:48	0:0	8	p_extra
arg	259:57	259:72	7	p_fmt->i_extra
water	259:57	0:0	8	p_fmt
op	259:62	0:0	8	->
water	259:64	0:0	8	i_extra
water	259:73	0:0	6	;
call	260:12	260:68	6	memcpy
arg	260:20	260:35	7	es->fmt.p_extra
water	260:20	0:0	8	es
op	260:22	0:0	8	->
water	260:24	0:0	8	fmt
op	260:27	0:0	8	.
water	260:28	0:0	8	p_extra
arg	260:37	260:51	7	p_fmt->p_extra
water	260:37	0:0	8	p_fmt
op	260:42	0:0	8	->
water	260:44	0:0	8	p_extra
arg	260:53	260:68	7	p_fmt->i_extra
water	260:53	0:0	8	p_fmt
op	260:58	0:0	8	->
water	260:60	0:0	8	i_extra
water	260:69	0:0	6	;
if	261:12	262:34	6	(! es -> p_dec)
cond	261:16	261:21	7	! es -> p_dec
op	261:16	0:0	8	!
water	261:17	0:0	8	es
op	261:19	0:0	8	->
water	261:21	0:0	8	p_dec
stmts	262:16	262:34	7	
return	262:16	262:34	8	VLC_SUCCESS
water	262:23	0:0	9	VLC_SUCCESS
call	264:12	264:38	6	EsDestroyDecoder
arg	264:30	264:33	7	out
water	264:30	0:0	8	out
arg	264:35	264:38	7	es
water	264:35	0:0	8	es
water	264:39	0:0	6	;
call	265:12	265:37	6	EsCreateDecoder
arg	265:29	265:32	7	out
water	265:29	0:0	8	out
arg	265:34	265:37	7	es
water	265:34	0:0	8	es
water	265:38	0:0	6	;
water	267:12	0:0	6	es
op	267:14	0:0	6	->
water	267:16	0:0	6	p_dec
op	267:21	0:0	6	->
water	267:23	0:0	6	fmt_in
op	267:29	0:0	6	.
water	267:30	0:0	6	i_extra
op	267:38	0:0	6	=
water	267:40	0:0	6	p_fmt
op	267:45	0:0	6	->
water	267:47	0:0	6	i_extra
water	267:54	0:0	6	;
water	268:12	0:0	6	es
op	268:14	0:0	6	->
water	268:16	0:0	6	p_dec
op	268:21	0:0	6	->
water	268:23	0:0	6	fmt_in
op	268:29	0:0	6	.
water	268:30	0:0	6	p_extra
op	268:38	0:0	6	=
call	269:14	269:66	6	xrealloc
arg	269:24	269:49	7	es->p_dec->fmt_in.p_extra
water	269:24	0:0	8	es
op	269:26	0:0	8	->
water	269:28	0:0	8	p_dec
op	269:33	0:0	8	->
water	269:35	0:0	8	fmt_in
op	269:41	0:0	8	.
water	269:42	0:0	8	p_extra
arg	269:51	269:66	7	p_fmt->i_extra
water	269:51	0:0	8	p_fmt
op	269:56	0:0	8	->
water	269:58	0:0	8	i_extra
water	269:67	0:0	6	;
call	270:12	271:51	6	memcpy
arg	270:20	270:45	7	es->p_dec->fmt_in.p_extra
water	270:20	0:0	8	es
op	270:22	0:0	8	->
water	270:24	0:0	8	p_dec
op	270:29	0:0	8	->
water	270:31	0:0	8	fmt_in
op	270:37	0:0	8	.
water	270:38	0:0	8	p_extra
arg	271:20	271:34	7	p_fmt->p_extra
water	271:20	0:0	8	p_fmt
op	271:25	0:0	8	->
water	271:27	0:0	8	p_extra
arg	271:36	271:51	7	p_fmt->i_extra
water	271:36	0:0	8	p_fmt
op	271:41	0:0	8	->
water	271:43	0:0	8	i_extra
water	271:52	0:0	6	;
water	273:8	0:0	6	}
return	274:8	274:26	4	VLC_SUCCESS
water	274:15	0:0	5	VLC_SUCCESS
water	275:4	0:0	4	}
label	276:4	276:38	4	case ES_OUT_SET_ES_SCRAMBLED_STATE :
water	277:4	0:0	4	{
decl	278:8	278:55	4	es_out_id_t	*es
op	278:24	0:0	4	=
call	278:26	278:54	5	va_arg
arg	278:34	278:38	6	args
water	278:34	0:0	7	args
arg	278:40	278:54	6	es_out_id_t*
water	278:40	0:0	7	es_out_id_t
op	278:52	0:0	7	*
decl	279:8	279:52	4	bool	b_scrambled
op	279:25	0:0	4	=
water	279:27	0:0	4	(
water	279:28	0:0	4	bool
water	279:32	0:0	4	)
call	279:33	279:51	5	va_arg
arg	279:41	279:45	6	args
water	279:41	0:0	7	args
arg	279:47	279:51	6	int
water	279:47	0:0	7	int
if	280:8	284:8	4	(! es -> b_scrambled != ! b_scrambled)
cond	280:12	280:33	5	! es -> b_scrambled != ! b_scrambled
op	280:12	0:0	6	!
water	280:13	0:0	6	es
op	280:15	0:0	6	->
water	280:17	0:0	6	b_scrambled
op	280:29	0:0	6	!=
op	280:32	0:0	6	!
water	280:33	0:0	6	b_scrambled
stmts	281:8	284:8	5	
water	281:8	0:0	6	{
water	282:12	0:0	6	es
op	282:14	0:0	6	->
water	282:16	0:0	6	b_scrambled
op	282:28	0:0	6	=
water	282:30	0:0	6	b_scrambled
water	282:41	0:0	6	;
call	283:12	283:57	6	EsOutProgramUpdateScrambled
arg	283:41	283:44	7	out
water	283:41	0:0	8	out
arg	283:46	283:57	7	es->p_pgrm
water	283:46	0:0	8	es
op	283:48	0:0	8	->
water	283:50	0:0	8	p_pgrm
water	283:58	0:0	6	;
water	284:8	0:0	6	}
return	285:8	285:26	4	VLC_SUCCESS
water	285:15	0:0	5	VLC_SUCCESS
water	286:4	0:0	4	}
label	287:4	287:37	4	case ES_OUT_SET_NEXT_DISPLAY_TIME :
water	288:4	0:0	4	{
decl	289:8	289:63	4	const int64_t	i_date
op	289:29	0:0	4	=
water	289:31	0:0	4	(
water	289:32	0:0	4	int64_t
water	289:39	0:0	4	)
call	289:40	289:62	5	va_arg
arg	289:48	289:52	6	args
water	289:48	0:0	7	args
arg	289:54	289:62	6	int64_t
water	289:54	0:0	7	int64_t
if	290:8	291:31	4	(i_date < 0)
cond	290:12	290:21	5	i_date < 0
water	290:12	0:0	6	i_date
op	290:19	0:0	6	<
water	290:21	0:0	6	0
stmts	291:12	291:31	5	
return	291:12	291:31	6	VLC_EGENERIC
water	291:19	0:0	7	VLC_EGENERIC
water	292:8	0:0	4	p_sys
op	292:13	0:0	4	->
water	292:15	0:0	4	i_preroll_end
op	292:29	0:0	4	=
water	292:31	0:0	4	i_date
water	292:37	0:0	4	;
return	293:8	293:26	4	VLC_SUCCESS
water	293:15	0:0	5	VLC_SUCCESS
water	294:4	0:0	4	}
label	295:4	295:30	4	case ES_OUT_SET_GROUP_META :
water	296:4	0:0	4	{
decl	297:8	297:46	4	int	i_group
op	297:20	0:0	4	=
water	297:22	0:0	4	(
water	297:23	0:0	4	int
water	297:26	0:0	4	)
call	297:27	297:45	5	va_arg
arg	297:35	297:39	6	args
water	297:35	0:0	7	args
arg	297:41	297:45	6	int
water	297:41	0:0	7	int
decl	298:8	298:69	4	const vlc_meta_t	*p_meta
op	298:33	0:0	4	=
call	298:35	298:68	5	va_arg
arg	298:43	298:47	6	args
water	298:43	0:0	7	args
arg	298:49	298:68	6	constvlc_meta_t*
water	298:49	0:0	7	const
water	298:55	0:0	7	vlc_meta_t
op	298:66	0:0	7	*
call	299:8	299:47	4	EsOutProgramMeta
arg	299:26	299:29	5	out
water	299:26	0:0	6	out
arg	299:31	299:38	5	i_group
water	299:31	0:0	6	i_group
arg	299:40	299:47	5	p_meta
water	299:40	0:0	6	p_meta
water	299:48	0:0	4	;
return	300:8	300:26	4	VLC_SUCCESS
water	300:15	0:0	5	VLC_SUCCESS
water	301:4	0:0	4	}
label	302:4	302:29	4	case ES_OUT_SET_GROUP_EPG :
water	303:4	0:0	4	{
decl	304:8	304:46	4	int	i_group
op	304:20	0:0	4	=
water	304:22	0:0	4	(
water	304:23	0:0	4	int
water	304:26	0:0	4	)
call	304:27	304:45	5	va_arg
arg	304:35	304:39	6	args
water	304:35	0:0	7	args
arg	304:41	304:45	6	int
water	304:41	0:0	7	int
decl	305:8	305:66	4	const vlc_epg_t	*p_epg
op	305:31	0:0	4	=
call	305:33	305:65	5	va_arg
arg	305:41	305:45	6	args
water	305:41	0:0	7	args
arg	305:47	305:65	6	constvlc_epg_t*
water	305:47	0:0	7	const
water	305:53	0:0	7	vlc_epg_t
op	305:63	0:0	7	*
call	306:8	306:45	4	EsOutProgramEpg
arg	306:25	306:28	5	out
water	306:25	0:0	6	out
arg	306:30	306:37	5	i_group
water	306:30	0:0	6	i_group
arg	306:39	306:45	5	p_epg
water	306:39	0:0	6	p_epg
water	306:46	0:0	4	;
return	307:8	307:26	4	VLC_SUCCESS
water	307:15	0:0	5	VLC_SUCCESS
water	308:4	0:0	4	}
label	309:4	309:25	4	case ES_OUT_DEL_GROUP :
water	310:4	0:0	4	{
decl	311:8	311:46	4	int	i_group
op	311:20	0:0	4	=
water	311:22	0:0	4	(
water	311:23	0:0	4	int
water	311:26	0:0	4	)
call	311:27	311:45	5	va_arg
arg	311:35	311:39	6	args
water	311:35	0:0	7	args
arg	311:41	311:45	6	int
water	311:41	0:0	7	int
return	312:8	312:46	4	EsOutProgramDel(out,i_group)
call	312:15	312:45	5	EsOutProgramDel
arg	312:32	312:35	6	out
water	312:32	0:0	7	out
arg	312:37	312:45	6	i_group
water	312:37	0:0	7	i_group
water	313:4	0:0	4	}
label	314:4	314:24	4	case ES_OUT_SET_META :
water	315:4	0:0	4	{
decl	316:8	316:69	4	const vlc_meta_t	*p_meta
op	316:33	0:0	4	=
call	316:35	316:68	5	va_arg
arg	316:43	316:47	6	args
water	316:43	0:0	7	args
arg	316:49	316:68	6	constvlc_meta_t*
water	316:49	0:0	7	const
water	316:55	0:0	7	vlc_meta_t
op	316:66	0:0	7	*
call	317:8	317:31	4	EsOutMeta
arg	317:19	317:22	5	out
water	317:19	0:0	6	out
arg	317:24	317:31	5	p_meta
water	317:24	0:0	6	p_meta
water	317:32	0:0	4	;
return	318:8	318:26	4	VLC_SUCCESS
water	318:15	0:0	5	VLC_SUCCESS
water	319:4	0:0	4	}
label	320:4	320:27	4	case ES_OUT_GET_WAKE_UP :
water	321:4	0:0	4	{
decl	322:8	322:63	4	mtime_t	*pi_wakeup
op	322:27	0:0	4	=
water	322:29	0:0	4	(
water	322:30	0:0	4	mtime_t
op	322:37	0:0	4	*
water	322:38	0:0	4	)
call	322:39	322:62	5	va_arg
arg	322:47	322:51	6	args
water	322:47	0:0	7	args
arg	322:53	322:62	6	mtime_t*
water	322:53	0:0	7	mtime_t
op	322:60	0:0	7	*
op	323:8	0:0	4	*
water	323:9	0:0	4	pi_wakeup
op	323:19	0:0	4	=
call	323:21	323:41	4	EsOutGetWakeup
arg	323:37	323:41	5	out
water	323:37	0:0	6	out
water	323:42	0:0	4	;
return	324:8	324:26	4	VLC_SUCCESS
water	324:15	0:0	5	VLC_SUCCESS
water	325:4	0:0	4	}
label	326:4	326:28	4	case ES_OUT_SET_ES_BY_ID :
label	327:4	327:32	4	case ES_OUT_RESTART_ES_BY_ID :
label	328:4	328:36	4	case ES_OUT_SET_ES_DEFAULT_BY_ID :
water	329:4	0:0	4	{
decl	330:8	330:49	4	const int	i_id
op	330:23	0:0	4	=
water	330:25	0:0	4	(
water	330:26	0:0	4	int
water	330:29	0:0	4	)
call	330:30	330:48	5	va_arg
arg	330:38	330:42	6	args
water	330:38	0:0	7	args
arg	330:44	330:48	6	int
water	330:44	0:0	7	int
decl	331:8	331:55	4	es_out_id_t	*p_es
op	331:26	0:0	4	=
call	331:28	331:54	5	EsOutGetFromID
arg	331:44	331:47	6	out
water	331:44	0:0	7	out
arg	331:49	331:54	6	i_id
water	331:49	0:0	7	i_id
decl	332:8	332:27	4	int	i_new_query
op	332:24	0:0	4	=
water	332:26	0:0	4	0
switch	333:8	340:8	4	(i_query)
cond	333:16	333:16	5	i_query
water	333:16	0:0	6	i_query
stmts	334:8	340:8	5	
water	334:8	0:0	6	{
label	335:8	335:32	6	case ES_OUT_SET_ES_BY_ID :
water	335:42	0:0	6	i_new_query
op	335:54	0:0	6	=
water	335:56	0:0	6	ES_OUT_SET_ES
water	335:69	0:0	6	;
break	335:71	335:76	6	
label	336:8	336:36	6	case ES_OUT_RESTART_ES_BY_ID :
water	336:42	0:0	6	i_new_query
op	336:54	0:0	6	=
water	336:56	0:0	6	ES_OUT_RESTART_ES
water	336:73	0:0	6	;
break	336:75	336:80	6	
label	337:8	337:40	6	case ES_OUT_SET_ES_DEFAULT_BY_ID :
water	337:42	0:0	6	i_new_query
op	337:54	0:0	6	=
water	337:56	0:0	6	ES_OUT_SET_ES_DEFAULT
water	337:77	0:0	6	;
break	337:79	337:84	6	
label	338:8	338:15	6	default :
call	339:10	339:18	6	assert
arg	339:17	339:18	7	0
water	339:17	0:0	8	0
water	339:19	0:0	6	;
water	340:8	0:0	6	}
decl	342:8	342:60	4	int	i_ret
op	342:18	0:0	4	=
call	342:20	342:59	5	es_out_Control
arg	342:36	342:39	6	out
water	342:36	0:0	7	out
arg	342:41	342:52	6	i_new_query
water	342:41	0:0	7	i_new_query
arg	342:54	342:59	6	p_es
water	342:54	0:0	7	p_es
if	345:8	346:73	4	(p_sys -> b_active)
cond	345:12	345:19	5	p_sys -> b_active
water	345:12	0:0	6	p_sys
op	345:17	0:0	6	->
water	345:19	0:0	6	b_active
stmts	346:12	346:73	5	
call	346:12	346:72	6	input_resource_TerminateVout
arg	346:42	346:72	7	p_sys->p_input->p->p_resource
water	346:42	0:0	8	p_sys
op	346:47	0:0	8	->
water	346:49	0:0	8	p_input
op	346:56	0:0	8	->
water	346:58	0:0	8	p
op	346:59	0:0	8	->
water	346:61	0:0	8	p_resource
water	346:73	0:0	6	;
return	347:8	347:20	4	i_ret
water	347:15	0:0	5	i_ret
water	348:4	0:0	4	}
label	349:4	349:36	4	case ES_OUT_GET_ES_OBJECTS_BY_ID :
water	350:4	0:0	4	{
decl	351:8	351:44	4	const int	i_id
op	351:23	0:0	4	=
call	351:25	351:43	5	va_arg
arg	351:33	351:37	6	args
water	351:33	0:0	7	args
arg	351:39	351:43	6	int
water	351:39	0:0	7	int
decl	352:8	352:55	4	es_out_id_t	*p_es
op	352:26	0:0	4	=
call	352:28	352:54	5	EsOutGetFromID
arg	352:44	352:47	6	out
water	352:44	0:0	7	out
arg	352:49	352:54	6	i_id
water	352:49	0:0	7	i_id
if	353:8	354:31	4	(! p_es)
cond	353:12	353:13	5	! p_es
op	353:12	0:0	6	!
water	353:13	0:0	6	p_es
stmts	354:12	354:31	5	
return	354:12	354:31	6	VLC_EGENERIC
water	354:19	0:0	7	VLC_EGENERIC
decl	355:8	355:70	4	vlc_object_t	**pp_decoder
op	355:37	0:0	4	=
call	355:39	355:69	5	va_arg
arg	355:47	355:51	6	args
water	355:47	0:0	7	args
arg	355:53	355:69	6	vlc_object_t**
water	355:53	0:0	7	vlc_object_t
op	355:66	0:0	7	*
op	355:67	0:0	7	*
decl	356:8	356:71	4	vout_thread_t	**pp_vout
op	356:37	0:0	4	=
call	356:39	356:70	5	va_arg
arg	356:47	356:51	6	args
water	356:47	0:0	7	args
arg	356:53	356:70	6	vout_thread_t**
water	356:53	0:0	7	vout_thread_t
op	356:67	0:0	7	*
op	356:68	0:0	7	*
decl	357:8	357:71	4	audio_output_t	**pp_aout
op	357:36	0:0	4	=
call	357:38	357:70	5	va_arg
arg	357:46	357:50	6	args
water	357:46	0:0	7	args
arg	357:52	357:70	6	audio_output_t**
water	357:52	0:0	7	audio_output_t
op	357:67	0:0	7	*
op	357:68	0:0	7	*
if	358:8	363:8	4	(p_es -> p_dec)
cond	358:12	358:18	5	p_es -> p_dec
water	358:12	0:0	6	p_es
op	358:16	0:0	6	->
water	358:18	0:0	6	p_dec
stmts	359:8	363:8	5	
water	359:8	0:0	6	{
if	360:12	361:60	6	(pp_decoder)
cond	360:16	360:16	7	pp_decoder
water	360:16	0:0	8	pp_decoder
stmts	361:16	361:60	7	
op	361:16	0:0	8	*
water	361:17	0:0	8	pp_decoder
op	361:28	0:0	8	=
call	361:30	361:59	8	vlc_object_hold
arg	361:47	361:59	9	p_es->p_dec
water	361:47	0:0	10	p_es
op	361:51	0:0	10	->
water	361:53	0:0	10	p_dec
water	361:60	0:0	8	;
call	362:12	362:67	6	input_DecoderGetObjects
arg	362:37	362:48	7	p_es->p_dec
water	362:37	0:0	8	p_es
op	362:41	0:0	8	->
water	362:43	0:0	8	p_dec
arg	362:50	362:57	7	pp_vout
water	362:50	0:0	8	pp_vout
arg	362:59	362:67	7	pp_aout
water	362:59	0:0	8	pp_aout
water	362:68	0:0	6	;
water	363:8	0:0	6	}
else	364:8	372:8	4
stmts	365:8	372:8	5	
water	365:8	0:0	6	{
if	366:12	367:34	6	(pp_decoder)
cond	366:16	366:16	7	pp_decoder
water	366:16	0:0	8	pp_decoder
stmts	367:16	367:34	7	
op	367:16	0:0	8	*
water	367:17	0:0	8	pp_decoder
op	367:28	0:0	8	=
water	367:30	0:0	8	NULL
water	367:34	0:0	8	;
if	368:12	369:31	6	(pp_vout)
cond	368:16	368:16	7	pp_vout
water	368:16	0:0	8	pp_vout
stmts	369:16	369:31	7	
op	369:16	0:0	8	*
water	369:17	0:0	8	pp_vout
op	369:25	0:0	8	=
water	369:27	0:0	8	NULL
water	369:31	0:0	8	;
if	370:12	371:31	6	(pp_aout)
cond	370:16	370:16	7	pp_aout
water	370:16	0:0	8	pp_aout
stmts	371:16	371:31	7	
op	371:16	0:0	8	*
water	371:17	0:0	8	pp_aout
op	371:25	0:0	8	=
water	371:27	0:0	8	NULL
water	371:31	0:0	8	;
water	372:8	0:0	6	}
return	373:8	373:26	4	VLC_SUCCESS
water	373:15	0:0	5	VLC_SUCCESS
water	374:4	0:0	4	}
label	375:4	375:29	4	case ES_OUT_GET_BUFFERING :
water	376:4	0:0	4	{
decl	377:8	377:40	4	bool	*pb
op	377:17	0:0	4	=
call	377:19	377:39	5	va_arg
arg	377:27	377:31	6	args
water	377:27	0:0	7	args
arg	377:33	377:39	6	bool*
water	377:33	0:0	7	bool
op	377:37	0:0	7	*
op	378:8	0:0	4	*
water	378:9	0:0	4	pb
op	378:12	0:0	4	=
water	378:14	0:0	4	p_sys
op	378:19	0:0	4	->
water	378:21	0:0	4	b_buffering
water	378:32	0:0	4	;
return	379:8	379:26	4	VLC_SUCCESS
water	379:15	0:0	5	VLC_SUCCESS
water	380:4	0:0	4	}
label	381:4	381:25	4	case ES_OUT_GET_EMPTY :
water	382:4	0:0	4	{
decl	383:8	383:40	4	bool	*pb
op	383:17	0:0	4	=
call	383:19	383:39	5	va_arg
arg	383:27	383:31	6	args
water	383:27	0:0	7	args
arg	383:33	383:39	6	bool*
water	383:33	0:0	7	bool
op	383:37	0:0	7	*
op	384:8	0:0	4	*
water	384:9	0:0	4	pb
op	384:12	0:0	4	=
call	384:14	384:40	4	EsOutDecodersIsEmpty
arg	384:36	384:40	5	out
water	384:36	0:0	6	out
water	384:41	0:0	4	;
return	385:8	385:26	4	VLC_SUCCESS
water	385:15	0:0	5	VLC_SUCCESS
water	386:4	0:0	4	}
label	387:4	387:25	4	case ES_OUT_SET_DELAY :
water	388:4	0:0	4	{
decl	389:8	389:50	4	const int	i_cat
op	389:24	0:0	4	=
water	389:26	0:0	4	(
water	389:27	0:0	4	int
water	389:30	0:0	4	)
call	389:31	389:49	5	va_arg
arg	389:39	389:43	6	args
water	389:39	0:0	7	args
arg	389:45	389:49	6	int
water	389:45	0:0	7	int
decl	390:8	390:64	4	const mtime_t	i_delay
op	390:30	0:0	4	=
water	390:32	0:0	4	(
water	390:33	0:0	4	mtime_t
water	390:40	0:0	4	)
call	390:41	390:63	5	va_arg
arg	390:49	390:53	6	args
water	390:49	0:0	7	args
arg	390:55	390:63	6	mtime_t
water	390:55	0:0	7	mtime_t
call	391:8	391:43	4	EsOutSetDelay
arg	391:23	391:26	5	out
water	391:23	0:0	6	out
arg	391:28	391:33	5	i_cat
water	391:28	0:0	6	i_cat
arg	391:35	391:43	5	i_delay
water	391:35	0:0	6	i_delay
water	391:44	0:0	4	;
return	392:8	392:26	4	VLC_SUCCESS
water	392:15	0:0	5	VLC_SUCCESS
water	393:4	0:0	4	}
label	394:4	394:32	4	case ES_OUT_SET_RECORD_STATE :
water	395:4	0:0	4	{
decl	396:8	396:36	4	bool	b
op	396:15	0:0	4	=
call	396:17	396:35	5	va_arg
arg	396:25	396:29	6	args
water	396:25	0:0	7	args
arg	396:31	396:35	6	int
water	396:31	0:0	7	int
return	397:8	397:39	4	EsOutSetRecord(out,b)
call	397:15	397:38	5	EsOutSetRecord
arg	397:31	397:34	6	out
water	397:31	0:0	7	out
arg	397:36	397:38	6	b
water	397:36	0:0	7	b
water	398:4	0:0	4	}
label	399:4	399:31	4	case ES_OUT_SET_PAUSE_STATE :
water	400:4	0:0	4	{
decl	401:8	401:62	4	const bool	b_source_paused
op	401:35	0:0	4	=
water	401:37	0:0	4	(
water	401:38	0:0	4	bool
water	401:42	0:0	4	)
call	401:43	401:61	5	va_arg
arg	401:51	401:55	6	args
water	401:51	0:0	7	args
arg	401:57	401:61	6	int
water	401:57	0:0	7	int
decl	402:8	402:55	4	const bool	b_paused
op	402:28	0:0	4	=
water	402:30	0:0	4	(
water	402:31	0:0	4	bool
water	402:35	0:0	4	)
call	402:36	402:54	5	va_arg
arg	402:44	402:48	6	args
water	402:44	0:0	7	args
arg	402:50	402:54	6	int
water	402:50	0:0	7	int
decl	403:8	403:64	4	const mtime_t	i_date
op	403:29	0:0	4	=
water	403:31	0:0	4	(
water	403:32	0:0	4	mtime_t
water	403:39	0:0	4	)
call	403:41	403:63	5	va_arg
arg	403:49	403:53	6	args
water	403:49	0:0	7	args
arg	403:55	403:63	6	mtime_t
water	403:55	0:0	7	mtime_t
call	404:8	404:46	4	assert
arg	404:16	404:46	5	!b_source_paused==!b_paused
op	404:16	0:0	6	!
water	404:17	0:0	6	b_source_paused
op	404:33	0:0	6	==
op	404:36	0:0	6	!
water	404:37	0:0	6	b_paused
water	404:47	0:0	4	;
call	405:8	405:48	4	EsOutChangePause
arg	405:26	405:29	5	out
water	405:26	0:0	6	out
arg	405:31	405:39	5	b_paused
water	405:31	0:0	6	b_paused
arg	405:41	405:48	5	i_date
water	405:41	0:0	6	i_date
water	405:49	0:0	4	;
return	406:8	406:26	4	VLC_SUCCESS
water	406:15	0:0	5	VLC_SUCCESS
water	407:4	0:0	4	}
label	408:4	408:24	4	case ES_OUT_SET_RATE :
water	409:4	0:0	4	{
decl	410:8	410:55	4	const int	i_src_rate
op	410:29	0:0	4	=
water	410:31	0:0	4	(
water	410:32	0:0	4	int
water	410:35	0:0	4	)
call	410:36	410:54	5	va_arg
arg	410:44	410:48	6	args
water	410:44	0:0	7	args
arg	410:50	410:54	6	int
water	410:50	0:0	7	int
decl	411:8	411:51	4	const int	i_rate
op	411:25	0:0	4	=
water	411:27	0:0	4	(
water	411:28	0:0	4	int
water	411:31	0:0	4	)
call	411:32	411:50	5	va_arg
arg	411:40	411:44	6	args
water	411:40	0:0	7	args
arg	411:46	411:50	6	int
water	411:46	0:0	7	int
call	412:8	412:37	4	assert
arg	412:16	412:37	5	i_src_rate==i_rate
water	412:16	0:0	6	i_src_rate
op	412:27	0:0	6	==
water	412:30	0:0	6	i_rate
water	412:38	0:0	4	;
call	413:8	413:37	4	EsOutChangeRate
arg	413:25	413:28	5	out
water	413:25	0:0	6	out
arg	413:30	413:37	5	i_rate
water	413:30	0:0	6	i_rate
water	413:38	0:0	4	;
return	414:8	414:26	4	VLC_SUCCESS
water	414:15	0:0	5	VLC_SUCCESS
water	415:4	0:0	4	}
label	416:4	416:24	4	case ES_OUT_SET_TIME :
water	417:4	0:0	4	{
decl	418:8	418:63	4	const mtime_t	i_date
op	418:29	0:0	4	=
water	418:31	0:0	4	(
water	418:32	0:0	4	mtime_t
water	418:39	0:0	4	)
call	418:40	418:62	5	va_arg
arg	418:48	418:52	6	args
water	418:48	0:0	7	args
arg	418:54	418:62	6	mtime_t
water	418:54	0:0	7	mtime_t
call	419:8	419:29	4	assert
arg	419:16	419:29	5	i_date==-1
water	419:16	0:0	6	i_date
op	419:23	0:0	6	==
op	419:26	0:0	6	-
water	419:27	0:0	6	1
water	419:30	0:0	4	;
call	420:8	420:33	4	EsOutChangePosition
arg	420:29	420:33	5	out
water	420:29	0:0	6	out
water	420:34	0:0	4	;
return	421:8	421:26	4	VLC_SUCCESS
water	421:15	0:0	5	VLC_SUCCESS
water	422:4	0:0	4	}
label	423:4	423:30	4	case ES_OUT_SET_FRAME_NEXT :
call	424:8	424:28	4	EsOutFrameNext
arg	424:24	424:28	5	out
water	424:24	0:0	6	out
water	424:29	0:0	4	;
return	425:8	425:26	4	VLC_SUCCESS
water	425:15	0:0	5	VLC_SUCCESS
label	426:4	426:25	4	case ES_OUT_SET_TIMES :
water	427:4	0:0	4	{
decl	428:8	428:58	4	double	f_position
op	428:26	0:0	4	=
water	428:28	0:0	4	(
water	428:29	0:0	4	double
water	428:35	0:0	4	)
call	428:36	428:57	5	va_arg
arg	428:44	428:48	6	args
water	428:44	0:0	7	args
arg	428:50	428:57	6	double
water	428:50	0:0	7	double
decl	429:8	429:57	4	mtime_t	i_time
op	429:23	0:0	4	=
water	429:25	0:0	4	(
water	429:26	0:0	4	mtime_t
water	429:33	0:0	4	)
call	429:34	429:56	5	va_arg
arg	429:42	429:46	6	args
water	429:42	0:0	7	args
arg	429:48	429:56	6	mtime_t
water	429:48	0:0	7	mtime_t
decl	430:8	430:59	4	mtime_t	i_length
op	430:25	0:0	4	=
water	430:27	0:0	4	(
water	430:28	0:0	4	mtime_t
water	430:35	0:0	4	)
call	430:36	430:58	5	va_arg
arg	430:44	430:48	6	args
water	430:44	0:0	7	args
arg	430:50	430:58	6	mtime_t
water	430:50	0:0	7	mtime_t
call	431:8	431:56	4	input_SendEventLength
arg	431:31	431:45	5	p_sys->p_input
water	431:31	0:0	6	p_sys
op	431:36	0:0	6	->
water	431:38	0:0	6	p_input
arg	431:47	431:56	5	i_length
water	431:47	0:0	6	i_length
water	431:57	0:0	4	;
if	432:8	449:8	4	(! p_sys -> b_buffering)
cond	432:12	432:20	5	! p_sys -> b_buffering
op	432:12	0:0	6	!
water	432:13	0:0	6	p_sys
op	432:18	0:0	6	->
water	432:20	0:0	6	b_buffering
stmts	433:8	449:8	5	
water	433:8	0:0	6	{
decl	434:12	434:27	6	mtime_t	i_delay
if	436:12	438:50	6	(! p_sys -> p_input -> p -> p_sout || ! p_sys -> p_input -> p -> b_out_pace_control)
cond	436:16	437:36	7	! p_sys -> p_input -> p -> p_sout || ! p_sys -> p_input -> p -> b_out_pace_control
op	436:16	0:0	8	!
water	436:17	0:0	8	p_sys
op	436:22	0:0	8	->
water	436:24	0:0	8	p_input
op	436:31	0:0	8	->
water	436:33	0:0	8	p
op	436:34	0:0	8	->
water	436:36	0:0	8	p_sout
op	436:43	0:0	8	||
op	437:16	0:0	8	!
water	437:17	0:0	8	p_sys
op	437:22	0:0	8	->
water	437:24	0:0	8	p_input
op	437:31	0:0	8	->
water	437:33	0:0	8	p
op	437:34	0:0	8	->
water	437:36	0:0	8	b_out_pace_control
stmts	438:16	438:50	7	
water	438:16	0:0	8	i_delay
op	438:24	0:0	8	=
call	438:26	438:49	8	EsOutGetBuffering
arg	438:45	438:49	9	out
water	438:45	0:0	10	out
water	438:50	0:0	8	;
else	439:12	440:27	6
stmts	440:16	440:27	7	
water	440:16	0:0	8	i_delay
op	440:24	0:0	8	=
water	440:26	0:0	8	0
water	440:27	0:0	8	;
water	441:12	0:0	6	i_time
op	441:19	0:0	6	-=
water	441:22	0:0	6	i_delay
water	441:29	0:0	6	;
if	442:12	443:26	6	(i_time < 0)
cond	442:16	442:25	7	i_time < 0
water	442:16	0:0	8	i_time
op	442:23	0:0	8	<
water	442:25	0:0	8	0
stmts	443:16	443:26	7	
water	443:16	0:0	8	i_time
op	443:23	0:0	8	=
water	443:25	0:0	8	0
water	443:26	0:0	8	;
if	444:12	445:56	6	(i_length > 0)
cond	444:16	444:27	7	i_length > 0
water	444:16	0:0	8	i_length
op	444:25	0:0	8	>
water	444:27	0:0	8	0
stmts	445:16	445:56	7	
water	445:16	0:0	8	f_position
op	445:27	0:0	8	-=
water	445:30	0:0	8	(
water	445:31	0:0	8	double
water	445:37	0:0	8	)
water	445:38	0:0	8	i_delay
op	445:46	0:0	8	/
water	445:48	0:0	8	i_length
water	445:56	0:0	8	;
if	446:12	447:30	6	(f_position < 0)
cond	446:16	446:29	7	f_position < 0
water	446:16	0:0	8	f_position
op	446:27	0:0	8	<
water	446:29	0:0	8	0
stmts	447:16	447:30	7	
water	447:16	0:0	8	f_position
op	447:27	0:0	8	=
water	447:29	0:0	8	0
water	447:30	0:0	8	;
call	448:12	448:72	6	input_SendEventPosition
arg	448:37	448:51	7	p_sys->p_input
water	448:37	0:0	8	p_sys
op	448:42	0:0	8	->
water	448:44	0:0	8	p_input
arg	448:53	448:63	7	f_position
water	448:53	0:0	8	f_position
arg	448:65	448:72	7	i_time
water	448:65	0:0	8	i_time
water	448:73	0:0	6	;
water	449:8	0:0	6	}
return	450:8	450:26	4	VLC_SUCCESS
water	450:15	0:0	5	VLC_SUCCESS
water	451:4	0:0	4	}
label	452:4	452:26	4	case ES_OUT_SET_JITTER :
water	453:4	0:0	4	{
decl	454:8	454:63	4	mtime_t	i_pts_delay
op	454:29	0:0	4	=
water	454:31	0:0	4	(
water	454:32	0:0	4	mtime_t
water	454:39	0:0	4	)
call	454:40	454:62	5	va_arg
arg	454:48	454:52	6	args
water	454:48	0:0	7	args
arg	454:54	454:62	6	mtime_t
water	454:54	0:0	7	mtime_t
decl	455:8	455:63	4	mtime_t	i_pts_jitter
op	455:29	0:0	4	=
water	455:31	0:0	4	(
water	455:32	0:0	4	mtime_t
water	455:39	0:0	4	)
call	455:40	455:62	5	va_arg
arg	455:48	455:52	6	args
water	455:48	0:0	7	args
arg	455:54	455:62	6	mtime_t
water	455:54	0:0	7	mtime_t
decl	456:8	456:55	4	int	i_cr_average
op	456:29	0:0	4	=
water	456:31	0:0	4	(
water	456:32	0:0	4	int
water	456:35	0:0	4	)
call	456:36	456:54	5	va_arg
arg	456:44	456:48	6	args
water	456:44	0:0	7	args
arg	456:50	456:54	6	int
water	456:50	0:0	7	int
decl	457:8	459:47	4	bool	b_change_clock
op	457:28	0:0	4	=
water	458:12	0:0	4	i_pts_delay
op	458:24	0:0	4	+
water	458:26	0:0	4	i_pts_jitter
op	458:39	0:0	4	!=
water	458:42	0:0	4	p_sys
op	458:47	0:0	4	->
water	458:49	0:0	4	i_pts_delay
op	458:61	0:0	4	||
water	459:12	0:0	4	i_cr_average
op	459:25	0:0	4	!=
water	459:28	0:0	4	p_sys
op	459:33	0:0	4	->
water	459:35	0:0	4	i_cr_average
call	460:8	460:34	4	assert
arg	460:16	460:34	5	i_pts_jitter>=0
water	460:16	0:0	6	i_pts_jitter
op	460:29	0:0	6	>=
water	460:32	0:0	6	0
water	460:35	0:0	4	;
water	461:8	0:0	4	p_sys
op	461:13	0:0	4	->
water	461:15	0:0	4	i_pts_delay
op	461:28	0:0	4	=
water	461:30	0:0	4	i_pts_delay
op	461:42	0:0	4	+
water	461:44	0:0	4	i_pts_jitter
water	461:56	0:0	4	;
water	462:8	0:0	4	p_sys
op	462:13	0:0	4	->
water	462:15	0:0	4	i_pts_jitter
op	462:28	0:0	4	=
water	462:30	0:0	4	i_pts_jitter
water	462:42	0:0	4	;
water	463:8	0:0	4	p_sys
op	463:13	0:0	4	->
water	463:15	0:0	4	i_cr_average
op	463:28	0:0	4	=
water	463:30	0:0	4	i_cr_average
water	463:42	0:0	4	;
for	464:8	466:77	4	( int i = 0 ;i < p_sys -> i_pgrm && b_change_clock;i ++)
forinit	0:0	464:22	5	 int i = 0 ;
decl	464:13	464:22	6	int	i
op	464:19	0:0	6	=
water	464:21	0:0	6	0
cond	464:24	464:45	5	i < p_sys -> i_pgrm && b_change_clock
water	464:24	0:0	6	i
op	464:26	0:0	6	<
water	464:28	0:0	6	p_sys
op	464:33	0:0	6	->
water	464:35	0:0	6	i_pgrm
op	464:42	0:0	6	&&
water	464:45	0:0	6	b_change_clock
forexpr	464:61	464:62	5	i ++
water	464:61	0:0	6	i
op	464:62	0:0	6	++
stmts	465:12	466:77	5	
call	465:12	466:76	6	input_clock_SetJitter
arg	465:35	465:58	7	p_sys->pgrm[i]->p_clock
water	465:35	0:0	8	p_sys
op	465:40	0:0	8	->
water	465:42	0:0	8	pgrm
op	465:46	0:0	8	[
water	465:47	0:0	8	i
op	465:48	0:0	8	]
op	465:49	0:0	8	->
water	465:51	0:0	8	p_clock
arg	466:35	466:61	7	i_pts_delay+i_pts_jitter
water	466:35	0:0	8	i_pts_delay
op	466:47	0:0	8	+
water	466:49	0:0	8	i_pts_jitter
arg	466:63	466:76	7	i_cr_average
water	466:63	0:0	8	i_cr_average
water	466:77	0:0	6	;
return	467:8	467:26	4	VLC_SUCCESS
water	467:15	0:0	5	VLC_SUCCESS
water	468:4	0:0	4	}
label	469:4	469:30	4	case ES_OUT_GET_PCR_SYSTEM :
water	470:4	0:0	4	{
if	471:8	472:31	4	(p_sys -> b_buffering)
cond	471:12	471:19	5	p_sys -> b_buffering
water	471:12	0:0	6	p_sys
op	471:17	0:0	6	->
water	471:19	0:0	6	b_buffering
stmts	472:12	472:31	5	
return	472:12	472:31	6	VLC_EGENERIC
water	472:19	0:0	7	VLC_EGENERIC
decl	473:8	473:45	4	es_out_pgrm_t	*p_pgrm
op	473:30	0:0	4	=
water	473:32	0:0	4	p_sys
op	473:37	0:0	4	->
water	473:39	0:0	4	p_pgrm
if	474:8	475:31	4	(! p_pgrm)
cond	474:12	474:13	5	! p_pgrm
op	474:12	0:0	6	!
water	474:13	0:0	6	p_pgrm
stmts	475:12	475:31	5	
return	475:12	475:31	6	VLC_EGENERIC
water	475:19	0:0	7	VLC_EGENERIC
decl	476:8	476:53	4	mtime_t	*pi_system
op	476:27	0:0	4	=
call	476:29	476:52	5	va_arg
arg	476:37	476:41	6	args
water	476:37	0:0	7	args
arg	476:43	476:52	6	mtime_t*
water	476:43	0:0	7	mtime_t
op	476:51	0:0	7	*
decl	477:8	477:53	4	mtime_t	*pi_delay
op	477:27	0:0	4	=
call	477:29	477:52	5	va_arg
arg	477:37	477:41	6	args
water	477:37	0:0	7	args
arg	477:43	477:52	6	mtime_t*
water	477:43	0:0	7	mtime_t
op	477:51	0:0	7	*
call	478:8	478:74	4	input_clock_GetSystemOrigin
arg	478:37	478:52	5	p_pgrm->p_clock
water	478:37	0:0	6	p_pgrm
op	478:43	0:0	6	->
water	478:45	0:0	6	p_clock
arg	478:54	478:63	5	pi_system
water	478:54	0:0	6	pi_system
arg	478:65	478:74	5	pi_delay
water	478:65	0:0	6	pi_delay
water	478:75	0:0	4	;
return	479:8	479:26	4	VLC_SUCCESS
water	479:15	0:0	5	VLC_SUCCESS
water	480:4	0:0	4	}
label	481:4	481:33	4	case ES_OUT_MODIFY_PCR_SYSTEM :
water	482:4	0:0	4	{
if	483:8	484:31	4	(p_sys -> b_buffering)
cond	483:12	483:19	5	p_sys -> b_buffering
water	483:12	0:0	6	p_sys
op	483:17	0:0	6	->
water	483:19	0:0	6	b_buffering
stmts	484:12	484:31	5	
return	484:12	484:31	6	VLC_EGENERIC
water	484:19	0:0	7	VLC_EGENERIC
decl	485:8	485:45	4	es_out_pgrm_t	*p_pgrm
op	485:30	0:0	4	=
water	485:32	0:0	4	p_sys
op	485:37	0:0	4	->
water	485:39	0:0	4	p_pgrm
if	486:8	487:31	4	(! p_pgrm)
cond	486:12	486:13	5	! p_pgrm
op	486:12	0:0	6	!
water	486:13	0:0	6	p_pgrm
stmts	487:12	487:31	5	
return	487:12	487:31	6	VLC_EGENERIC
water	487:19	0:0	7	VLC_EGENERIC
decl	488:8	488:54	4	const bool	b_absolute
op	488:33	0:0	4	=
call	488:35	488:53	5	va_arg
arg	488:43	488:47	6	args
water	488:43	0:0	7	args
arg	488:49	488:53	6	int
water	488:49	0:0	7	int
decl	489:8	489:58	4	const mtime_t	i_system
op	489:33	0:0	4	=
call	489:35	489:57	5	va_arg
arg	489:43	489:47	6	args
water	489:43	0:0	7	args
arg	489:49	489:57	6	mtime_t
water	489:49	0:0	7	mtime_t
call	490:8	490:78	4	input_clock_ChangeSystemOrigin
arg	490:40	490:55	5	p_pgrm->p_clock
water	490:40	0:0	6	p_pgrm
op	490:46	0:0	6	->
water	490:48	0:0	6	p_clock
arg	490:57	490:67	5	b_absolute
water	490:57	0:0	6	b_absolute
arg	490:69	490:78	5	i_system
water	490:69	0:0	6	i_system
water	490:79	0:0	4	;
return	491:8	491:26	4	VLC_SUCCESS
water	491:15	0:0	5	VLC_SUCCESS
water	492:4	0:0	4	}
label	493:4	493:23	4	case ES_OUT_SET_EOS :
water	494:4	0:0	4	{
for	495:8	505:8	4	( int i = 0 ;i < p_sys -> i_es;i ++)
forinit	0:0	495:22	5	 int i = 0 ;
decl	495:13	495:22	6	int	i
op	495:19	0:0	6	=
water	495:21	0:0	6	0
cond	495:24	495:35	5	i < p_sys -> i_es
water	495:24	0:0	6	i
op	495:26	0:0	6	<
water	495:28	0:0	6	p_sys
op	495:33	0:0	6	->
water	495:35	0:0	6	i_es
forexpr	495:41	495:42	5	i ++
water	495:41	0:0	6	i
op	495:42	0:0	6	++
stmts	495:46	505:8	5	
water	495:46	0:0	6	{
decl	496:12	496:42	6	es_out_id_t	*id
op	496:28	0:0	6	=
water	496:30	0:0	6	p_sys
op	496:35	0:0	6	->
water	496:37	0:0	6	es
op	496:39	0:0	6	[
water	496:40	0:0	6	i
op	496:41	0:0	6	]
decl	497:12	497:40	6	decoder_t	*p_dec
op	497:29	0:0	6	=
water	497:31	0:0	6	id
op	497:33	0:0	6	->
water	497:35	0:0	6	p_dec
if	498:12	499:24	6	(! p_dec)
cond	498:16	498:17	7	! p_dec
op	498:16	0:0	8	!
water	498:17	0:0	8	p_dec
stmts	499:16	499:24	7	
continue	499:16	499:24	8	
decl	500:12	500:45	6	block_t	*p_block
op	500:29	0:0	6	=
call	500:31	500:44	7	block_Alloc
arg	500:43	500:44	8	0
water	500:43	0:0	9	0
if	501:12	502:21	6	(! p_block)
cond	501:16	501:17	7	! p_block
op	501:16	0:0	8	!
water	501:17	0:0	8	p_block
stmts	502:16	502:21	7	
break	502:16	502:21	8	
water	503:12	0:0	6	p_block
op	503:19	0:0	6	->
water	503:21	0:0	6	i_flags
op	503:29	0:0	6	|=
water	503:32	0:0	6	BLOCK_FLAG_CORE_EOS
water	503:51	0:0	6	;
call	504:12	504:53	6	input_DecoderDecode
arg	504:32	504:37	7	p_dec
water	504:32	0:0	8	p_dec
arg	504:39	504:46	7	p_block
water	504:39	0:0	8	p_block
arg	504:48	504:53	7	false
water	504:48	0:0	8	false
water	504:54	0:0	6	;
water	505:8	0:0	6	}
return	506:8	506:26	4	VLC_SUCCESS
water	506:15	0:0	5	VLC_SUCCESS
water	507:4	0:0	4	}
label	508:4	508:11	4	default :
call	509:8	509:67	4	msg_Err
arg	509:17	509:31	5	p_sys->p_input
water	509:17	0:0	6	p_sys
op	509:22	0:0	6	->
water	509:24	0:0	6	p_input
arg	509:33	509:67	5	"unknown query in es_out_Control"
water	509:33	0:0	6	"unknown query in es_out_Control"
water	509:68	0:0	4	;
return	510:8	510:27	4	VLC_EGENERIC
water	510:15	0:0	5	VLC_EGENERIC
water	511:4	0:0	4	}
