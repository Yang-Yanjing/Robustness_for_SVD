func	2:0	54:0	0	static bool	ReadWin32
params	2:21	0:0	1	
param	2:23	2:41	2	HANDLE *	hConsoleIn
param	2:43	2:57	2	char *	p_buffer
param	2:59	2:72	2	int *	pi_size
stmnts	0:0	53:16	1	
decl	4:4	4:29	2	INPUT_RECORD	input_record
decl	5:4	5:14	2	DWORD	i_dw
while	6:4	46:4	2	(* pi_size < MAX_LINE_LENGTH &&ReadConsoleInput (hConsoleIn ,& input_record ,1 ,& i_dw ))
cond	6:11	7:65	3	* pi_size < MAX_LINE_LENGTH &&ReadConsoleInput (hConsoleIn ,& input_record ,1 ,& i_dw )
op	6:11	0:0	4	*
water	6:12	0:0	4	pi_size
op	6:20	0:0	4	<
water	6:22	0:0	4	MAX_LINE_LENGTH
op	6:38	0:0	4	&&
call	7:11	7:65	4	ReadConsoleInput
arg	7:29	7:39	5	hConsoleIn
water	7:29	0:0	6	hConsoleIn
arg	7:41	7:54	5	&input_record
op	7:41	0:0	6	&
water	7:42	0:0	6	input_record
arg	7:56	7:57	5	1
water	7:56	0:0	6	1
arg	7:59	7:65	5	&i_dw
op	7:59	0:0	6	&
water	7:60	0:0	6	i_dw
stmts	8:4	46:4	3	
water	8:4	0:0	4	{
if	9:8	18:8	4	(input_record . EventType != KEY_EVENT || ! input_record . Event . KeyEvent . bKeyDown || input_record . Event . KeyEvent . wVirtualKeyCode == VK_SHIFT || input_record . Event . KeyEvent . wVirtualKeyCode == VK_CONTROL || input_record . Event . KeyEvent . wVirtualKeyCode == VK_MENU || input_record . Event . KeyEvent . wVirtualKeyCode == VK_CAPITAL)
cond	9:12	14:59	5	input_record . EventType != KEY_EVENT || ! input_record . Event . KeyEvent . bKeyDown || input_record . Event . KeyEvent . wVirtualKeyCode == VK_SHIFT || input_record . Event . KeyEvent . wVirtualKeyCode == VK_CONTROL || input_record . Event . KeyEvent . wVirtualKeyCode == VK_MENU || input_record . Event . KeyEvent . wVirtualKeyCode == VK_CAPITAL
water	9:12	0:0	6	input_record
op	9:24	0:0	6	.
water	9:25	0:0	6	EventType
op	9:35	0:0	6	!=
water	9:38	0:0	6	KEY_EVENT
op	9:48	0:0	6	||
op	10:12	0:0	6	!
water	10:13	0:0	6	input_record
op	10:25	0:0	6	.
water	10:26	0:0	6	Event
op	10:31	0:0	6	.
water	10:32	0:0	6	KeyEvent
op	10:40	0:0	6	.
water	10:41	0:0	6	bKeyDown
op	10:50	0:0	6	||
water	11:12	0:0	6	input_record
op	11:24	0:0	6	.
water	11:25	0:0	6	Event
op	11:30	0:0	6	.
water	11:31	0:0	6	KeyEvent
op	11:39	0:0	6	.
water	11:40	0:0	6	wVirtualKeyCode
op	11:56	0:0	6	==
water	11:59	0:0	6	VK_SHIFT
op	11:68	0:0	6	||
water	12:12	0:0	6	input_record
op	12:24	0:0	6	.
water	12:25	0:0	6	Event
op	12:30	0:0	6	.
water	12:31	0:0	6	KeyEvent
op	12:39	0:0	6	.
water	12:40	0:0	6	wVirtualKeyCode
op	12:56	0:0	6	==
water	12:59	0:0	6	VK_CONTROL
op	12:69	0:0	6	||
water	13:12	0:0	6	input_record
op	13:24	0:0	6	.
water	13:25	0:0	6	Event
op	13:30	0:0	6	.
water	13:31	0:0	6	KeyEvent
op	13:39	0:0	6	.
water	13:40	0:0	6	wVirtualKeyCode
op	13:56	0:0	6	==
water	13:59	0:0	6	VK_MENU
op	13:67	0:0	6	||
water	14:12	0:0	6	input_record
op	14:24	0:0	6	.
water	14:25	0:0	6	Event
op	14:30	0:0	6	.
water	14:31	0:0	6	KeyEvent
op	14:39	0:0	6	.
water	14:40	0:0	6	wVirtualKeyCode
op	14:56	0:0	6	==
water	14:59	0:0	6	VK_CAPITAL
stmts	15:8	18:8	5	
water	15:8	0:0	6	{
continue	17:12	17:20	6	
water	18:8	0:0	6	}
water	19:8	0:0	4	p_buffer
op	19:16	0:0	4	[
op	19:18	0:0	4	*
water	19:19	0:0	4	pi_size
op	19:27	0:0	4	]
op	19:29	0:0	4	=
water	19:31	0:0	4	input_record
op	19:43	0:0	4	.
water	19:44	0:0	4	Event
op	19:49	0:0	4	.
water	19:50	0:0	4	KeyEvent
op	19:58	0:0	4	.
water	19:59	0:0	4	uChar
op	19:64	0:0	4	.
water	19:65	0:0	4	AsciiChar
water	19:74	0:0	4	;
call	21:8	21:43	4	putc
arg	21:14	21:34	5	p_buffer[*pi_size]
water	21:14	0:0	6	p_buffer
op	21:22	0:0	6	[
op	21:24	0:0	6	*
water	21:25	0:0	6	pi_size
op	21:33	0:0	6	]
arg	21:36	21:43	5	stdout
water	21:36	0:0	6	stdout
water	21:44	0:0	4	;
if	23:8	30:8	4	(p_buffer [ * pi_size ] == '\r' || p_buffer [ * pi_size ] == '\n')
cond	23:12	23:68	5	p_buffer [ * pi_size ] == '\r' || p_buffer [ * pi_size ] == '\n'
water	23:12	0:0	6	p_buffer
op	23:20	0:0	6	[
op	23:22	0:0	6	*
water	23:23	0:0	6	pi_size
op	23:31	0:0	6	]
op	23:33	0:0	6	==
water	23:36	0:0	6	'\r'
op	23:41	0:0	6	||
water	23:44	0:0	6	p_buffer
op	23:52	0:0	6	[
op	23:54	0:0	6	*
water	23:55	0:0	6	pi_size
op	23:63	0:0	6	]
op	23:65	0:0	6	==
water	23:68	0:0	6	'\n'
stmts	24:8	30:8	5	
water	24:8	0:0	6	{
if	25:12	26:43	6	(p_buffer [ * pi_size ] == '\r')
cond	25:17	25:41	7	p_buffer [ * pi_size ] == '\r'
water	25:17	0:0	8	p_buffer
op	25:25	0:0	8	[
op	25:27	0:0	8	*
water	25:28	0:0	8	pi_size
op	25:36	0:0	8	]
op	25:38	0:0	8	==
water	25:41	0:0	8	'\r'
stmts	26:16	26:43	7	
water	26:16	0:0	8	p_buffer
op	26:24	0:0	8	[
op	26:26	0:0	8	*
water	26:27	0:0	8	pi_size
op	26:35	0:0	8	]
op	26:37	0:0	8	=
water	26:39	0:0	8	'\n'
water	26:43	0:0	8	;
water	27:12	0:0	6	(
op	27:13	0:0	6	*
water	27:14	0:0	6	pi_size
water	27:21	0:0	6	)
op	27:22	0:0	6	++
water	27:24	0:0	6	;
call	28:12	28:31	6	putc
arg	28:18	28:22	7	'\n'
water	28:18	0:0	8	'\n'
arg	28:24	28:31	7	stdout
water	28:24	0:0	8	stdout
water	28:32	0:0	6	;
break	29:12	29:17	6	
water	30:8	0:0	6	}
switch	31:8	44:8	4	(p_buffer [ * pi_size ])
cond	31:16	31:35	5	p_buffer [ * pi_size ]
water	31:16	0:0	6	p_buffer
op	31:24	0:0	6	[
op	31:26	0:0	6	*
water	31:27	0:0	6	pi_size
op	31:35	0:0	6	]
stmts	32:8	44:8	5	
water	32:8	0:0	6	{
water	33:8	0:0	6	case
water	33:13	0:0	6	'\b'
water	33:17	0:0	6	:
water	34:12	0:0	6	if
water	34:14	0:0	6	(
op	34:16	0:0	6	*
water	34:17	0:0	6	pi_size
water	34:25	0:0	6	)
water	35:12	0:0	6	{
op	36:16	0:0	6	*
water	36:17	0:0	6	pi_size
op	36:25	0:0	6	-=
water	36:28	0:0	6	2
water	36:29	0:0	6	;
call	37:16	37:34	6	putc
arg	37:22	37:25	7	' '
water	37:22	0:0	8	' '
arg	37:27	37:34	7	stdout
water	37:27	0:0	8	stdout
water	37:35	0:0	6	;
call	38:16	38:35	6	putc
arg	38:22	38:26	7	'\b'
water	38:22	0:0	8	'\b'
arg	38:28	38:35	7	stdout
water	38:28	0:0	8	stdout
water	38:36	0:0	6	;
water	39:12	0:0	6	}
water	40:12	0:0	6	break
water	40:17	0:0	6	;
water	44:8	0:0	6	}
water	45:8	0:0	4	(
op	45:9	0:0	4	*
water	45:10	0:0	4	pi_size
water	45:17	0:0	4	)
op	45:18	0:0	4	++
water	45:20	0:0	4	;
water	46:4	0:0	4	}
if	47:4	52:4	2	(* pi_size == MAX_LINE_LENGTH)
cond	47:8	47:20	3	* pi_size == MAX_LINE_LENGTH
op	47:8	0:0	4	*
water	47:9	0:0	4	pi_size
op	47:17	0:0	4	==
water	47:20	0:0	4	MAX_LINE_LENGTH
stmts	49:4	52:4	3	
water	49:4	0:0	4	{
water	50:8	0:0	4	p_buffer
op	50:16	0:0	4	[
op	50:18	0:0	4	*
water	50:19	0:0	4	pi_size
op	50:27	0:0	4	]
op	50:29	0:0	4	=
water	50:31	0:0	4	0
water	50:32	0:0	4	;
return	51:8	51:19	4	true
water	51:15	0:0	5	true
water	52:4	0:0	4	}
return	53:4	53:16	2	false
water	53:11	0:0	3	false
