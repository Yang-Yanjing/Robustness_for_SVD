func	2:0	39:0	0	void	v210_convert
params	2:17	0:0	1	
param	2:18	2:31	2	uint16_t *	dst
param	2:33	2:54	2	const uint32_t *	bytes
param	2:56	2:71	2	const int	width
param	2:73	2:89	2	const int	height
stmnts	0:0	38:4	1	
decl	4:4	4:59	2	const int	stride
op	4:21	0:0	2	=
water	4:23	0:0	2	(
water	4:24	0:0	2	(
water	4:25	0:0	2	width
op	4:31	0:0	2	+
water	4:33	0:0	2	47
water	4:35	0:0	2	)
op	4:37	0:0	2	/
water	4:39	0:0	2	48
water	4:41	0:0	2	)
op	4:43	0:0	2	*
water	4:45	0:0	2	48
op	4:48	0:0	2	*
water	4:50	0:0	2	8
op	4:52	0:0	2	/
water	4:54	0:0	2	3
op	4:56	0:0	2	/
water	4:58	0:0	2	4
decl	5:4	5:25	2	uint16_t	*y
op	5:16	0:0	2	=
op	5:18	0:0	2	&
water	5:19	0:0	2	dst
op	5:22	0:0	2	[
water	5:23	0:0	2	0
op	5:24	0:0	2	]
decl	6:4	6:46	2	uint16_t	*u
op	6:16	0:0	2	=
op	6:18	0:0	2	&
water	6:19	0:0	2	dst
op	6:22	0:0	2	[
water	6:23	0:0	2	width
op	6:29	0:0	2	*
water	6:31	0:0	2	height
op	6:38	0:0	2	*
water	6:40	0:0	2	2
op	6:42	0:0	2	/
water	6:44	0:0	2	2
op	6:45	0:0	2	]
decl	7:4	7:46	2	uint16_t	*v
op	7:16	0:0	2	=
op	7:18	0:0	2	&
water	7:19	0:0	2	dst
op	7:22	0:0	2	[
water	7:23	0:0	2	width
op	7:29	0:0	2	*
water	7:31	0:0	2	height
op	7:38	0:0	2	*
water	7:40	0:0	2	3
op	7:42	0:0	2	/
water	7:44	0:0	2	2
op	7:45	0:0	2	]
do	9:4	14:4	2	(0)
cond	14:13	14:13	3	0
water	14:13	0:0	4	0
stmts	9:7	14:4	3	
water	9:7	0:0	4	{
water	10:8	0:0	4	val
op	10:13	0:0	4	=
call	10:15	10:32	4	av_le2ne32
arg	10:26	10:32	5	*src++
op	10:26	0:0	6	*
water	10:27	0:0	6	src
op	10:30	0:0	6	++
water	10:33	0:0	4	;
op	11:8	0:0	4	*
water	11:9	0:0	4	a
op	11:10	0:0	4	++
op	11:13	0:0	4	=
water	11:16	0:0	4	val
op	11:20	0:0	4	&
water	11:22	0:0	4	0
water	11:23	0:0	4	x3FF
water	11:27	0:0	4	;
op	12:8	0:0	4	*
water	12:9	0:0	4	b
op	12:10	0:0	4	++
op	12:13	0:0	4	=
water	12:15	0:0	4	(
water	12:16	0:0	4	val
op	12:20	0:0	4	>>
water	12:23	0:0	4	10
water	12:25	0:0	4	)
op	12:27	0:0	4	&
water	12:29	0:0	4	0
water	12:30	0:0	4	x3FF
water	12:34	0:0	4	;
op	13:8	0:0	4	*
water	13:9	0:0	4	c
op	13:10	0:0	4	++
op	13:13	0:0	4	=
water	13:15	0:0	4	(
water	13:16	0:0	4	val
op	13:20	0:0	4	>>
water	13:23	0:0	4	20
water	13:25	0:0	4	)
op	13:27	0:0	4	&
water	13:29	0:0	4	0
water	13:30	0:0	4	x3FF
water	13:34	0:0	4	;
water	14:4	0:0	4	}
for	15:4	38:4	2	( int h = 0 ;h < height;h ++)
forinit	0:0	15:18	3	 int h = 0 ;
decl	15:9	15:18	4	int	h
op	15:15	0:0	4	=
water	15:17	0:0	4	0
cond	15:20	15:24	3	h < height
water	15:20	0:0	4	h
op	15:22	0:0	4	<
water	15:24	0:0	4	height
forexpr	15:32	15:33	3	h ++
water	15:32	0:0	4	h
op	15:33	0:0	4	++
stmts	15:37	38:4	3	
water	15:37	0:0	4	{
decl	16:8	16:35	4	const uint32_t	*src
op	16:28	0:0	4	=
water	16:30	0:0	4	bytes
decl	17:8	17:24	4	uint32_t	val
op	17:21	0:0	4	=
water	17:23	0:0	4	0
decl	18:8	18:13	4	int	w
for	19:8	24:8	4	(w = 0 ;w < width - 5;w += 6)
forinit	19:13	19:18	5	w = 0 ;
water	19:13	0:0	6	w
op	19:15	0:0	6	=
water	19:17	0:0	6	0
water	19:18	0:0	6	;
cond	19:20	19:32	5	w < width - 5
water	19:20	0:0	6	w
op	19:22	0:0	6	<
water	19:24	0:0	6	width
op	19:30	0:0	6	-
water	19:32	0:0	6	5
forexpr	19:35	19:40	5	w += 6
water	19:35	0:0	6	w
op	19:37	0:0	6	+=
water	19:40	0:0	6	6
stmts	19:43	24:8	5	
water	19:43	0:0	6	{
call	20:12	20:31	6	READ_PIXELS
arg	20:24	20:25	7	u
water	20:24	0:0	8	u
arg	20:27	20:28	7	y
water	20:27	0:0	8	y
arg	20:30	20:31	7	v
water	20:30	0:0	8	v
water	20:32	0:0	6	;
call	21:12	21:31	6	READ_PIXELS
arg	21:24	21:25	7	y
water	21:24	0:0	8	y
arg	21:27	21:28	7	u
water	21:27	0:0	8	u
arg	21:30	21:31	7	y
water	21:30	0:0	8	y
water	21:32	0:0	6	;
call	22:12	22:31	6	READ_PIXELS
arg	22:24	22:25	7	v
water	22:24	0:0	8	v
arg	22:27	22:28	7	y
water	22:27	0:0	8	y
arg	22:30	22:31	7	u
water	22:30	0:0	8	u
water	22:32	0:0	6	;
call	23:12	23:31	6	READ_PIXELS
arg	23:24	23:25	7	y
water	23:24	0:0	8	y
arg	23:27	23:28	7	v
water	23:27	0:0	8	v
arg	23:30	23:31	7	y
water	23:30	0:0	8	y
water	23:32	0:0	6	;
water	24:8	0:0	6	}
if	25:8	29:8	4	(w < width - 1)
cond	25:12	25:24	5	w < width - 1
water	25:12	0:0	6	w
op	25:14	0:0	6	<
water	25:16	0:0	6	width
op	25:22	0:0	6	-
water	25:24	0:0	6	1
stmts	25:27	29:8	5	
water	25:27	0:0	6	{
call	26:12	26:31	6	READ_PIXELS
arg	26:24	26:25	7	u
water	26:24	0:0	8	u
arg	26:27	26:28	7	y
water	26:27	0:0	8	y
arg	26:30	26:31	7	v
water	26:30	0:0	8	v
water	26:32	0:0	6	;
water	27:12	0:0	6	val
op	27:17	0:0	6	=
call	27:19	27:36	6	av_le2ne32
arg	27:30	27:36	7	*src++
op	27:30	0:0	8	*
water	27:31	0:0	8	src
op	27:34	0:0	8	++
water	27:37	0:0	6	;
op	28:12	0:0	6	*
water	28:13	0:0	6	y
op	28:14	0:0	6	++
op	28:17	0:0	6	=
water	28:20	0:0	6	val
op	28:24	0:0	6	&
water	28:26	0:0	6	0
water	28:27	0:0	6	x3FF
water	28:31	0:0	6	;
water	29:8	0:0	6	}
if	30:8	36:8	4	(w < width - 3)
cond	30:12	30:24	5	w < width - 3
water	30:12	0:0	6	w
op	30:14	0:0	6	<
water	30:16	0:0	6	width
op	30:22	0:0	6	-
water	30:24	0:0	6	3
stmts	30:27	36:8	5	
water	30:27	0:0	6	{
op	31:12	0:0	6	*
water	31:13	0:0	6	u
op	31:14	0:0	6	++
op	31:17	0:0	6	=
water	31:19	0:0	6	(
water	31:20	0:0	6	val
op	31:24	0:0	6	>>
water	31:27	0:0	6	10
water	31:29	0:0	6	)
op	31:31	0:0	6	&
water	31:33	0:0	6	0
water	31:34	0:0	6	x3FF
water	31:38	0:0	6	;
op	32:12	0:0	6	*
water	32:13	0:0	6	y
op	32:14	0:0	6	++
op	32:17	0:0	6	=
water	32:19	0:0	6	(
water	32:20	0:0	6	val
op	32:24	0:0	6	>>
water	32:27	0:0	6	20
water	32:29	0:0	6	)
op	32:31	0:0	6	&
water	32:33	0:0	6	0
water	32:34	0:0	6	x3FF
water	32:38	0:0	6	;
water	33:12	0:0	6	val
op	33:17	0:0	6	=
call	33:19	33:36	6	av_le2ne32
arg	33:30	33:36	7	*src++
op	33:30	0:0	8	*
water	33:31	0:0	8	src
op	33:34	0:0	8	++
water	33:37	0:0	6	;
op	34:12	0:0	6	*
water	34:13	0:0	6	v
op	34:14	0:0	6	++
op	34:17	0:0	6	=
water	34:20	0:0	6	val
op	34:24	0:0	6	&
water	34:26	0:0	6	0
water	34:27	0:0	6	x3FF
water	34:31	0:0	6	;
op	35:12	0:0	6	*
water	35:13	0:0	6	y
op	35:14	0:0	6	++
op	35:17	0:0	6	=
water	35:19	0:0	6	(
water	35:20	0:0	6	val
op	35:24	0:0	6	>>
water	35:27	0:0	6	10
water	35:29	0:0	6	)
op	35:31	0:0	6	&
water	35:33	0:0	6	0
water	35:34	0:0	6	x3FF
water	35:38	0:0	6	;
water	36:8	0:0	6	}
water	37:8	0:0	4	bytes
op	37:14	0:0	4	+=
water	37:17	0:0	4	stride
water	37:23	0:0	4	;
water	38:4	0:0	4	}
