func	2:0	160:0	0	static void	ProcessGesture
params	2:26	0:0	1	
param	2:28	2:50	2	intf_thread_t *	p_intf
stmnts	0:0	159:24	1	
decl	4:4	4:37	2	intf_sys_t	*p_sys
op	4:22	0:0	2	=
water	4:24	0:0	2	p_intf
op	4:30	0:0	2	->
water	4:32	0:0	2	p_sys
decl	5:4	5:45	2	playlist_t	*p_playlist
op	5:27	0:0	2	=
call	5:29	5:44	3	pl_Get
arg	5:37	5:44	4	p_intf
water	5:37	0:0	5	p_intf
switch	10:4	157:4	2	(p_sys -> i_pattern)
cond	10:12	10:19	3	p_sys -> i_pattern
water	10:12	0:0	4	p_sys
op	10:17	0:0	4	->
water	10:19	0:0	4	i_pattern
stmts	11:4	157:4	3	
water	11:4	0:0	4	{
label	12:8	12:17	4	case LEFT :
water	13:8	0:0	4	{
call	14:12	14:57	4	msg_Dbg
arg	14:21	14:27	5	p_intf
water	14:21	0:0	6	p_intf
arg	14:29	14:57	5	"Go backward in the movie!"
water	14:29	0:0	6	"Go backward in the movie!"
water	14:58	0:0	4	;
decl	15:12	15:73	4	input_thread_t	*p_input
op	15:36	0:0	4	=
call	15:38	15:72	5	playlist_CurrentInput
arg	15:61	15:72	6	p_playlist
water	15:61	0:0	7	p_playlist
if	16:12	17:21	4	(p_input == NULL)
cond	16:16	16:27	5	p_input == NULL
water	16:16	0:0	6	p_input
op	16:24	0:0	6	==
water	16:27	0:0	6	NULL
stmts	17:16	17:21	5	
break	17:16	17:21	6	
decl	18:12	18:69	4	int	it
op	18:19	0:0	4	=
call	18:21	18:68	5	var_InheritInteger
arg	18:41	18:48	6	p_intf
water	18:41	0:0	7	p_intf
arg	18:50	18:68	6	"short-jump-size"
water	18:50	0:0	7	"short-jump-size"
if	19:12	20:71	4	(it > 0)
cond	19:16	19:21	5	it > 0
water	19:16	0:0	6	it
op	19:19	0:0	6	>
water	19:21	0:0	6	0
stmts	20:16	20:71	5	
call	20:16	20:70	6	var_SetTime
arg	20:29	20:36	7	p_input
water	20:29	0:0	8	p_input
arg	20:38	20:51	7	"time-offset"
water	20:38	0:0	8	"time-offset"
arg	20:53	20:70	7	-CLOCK_FREQ*it
op	20:53	0:0	8	-
water	20:54	0:0	8	CLOCK_FREQ
op	20:65	0:0	8	*
water	20:67	0:0	8	it
water	20:71	0:0	6	;
call	21:12	21:40	4	vlc_object_release
arg	21:32	21:40	5	p_input
water	21:32	0:0	6	p_input
water	21:41	0:0	4	;
break	22:12	22:17	4	
water	23:8	0:0	4	}
label	24:8	24:18	4	case RIGHT :
water	25:8	0:0	4	{
call	26:12	26:56	4	msg_Dbg
arg	26:21	26:27	5	p_intf
water	26:21	0:0	6	p_intf
arg	26:29	26:56	5	"Go forward in the movie!"
water	26:29	0:0	6	"Go forward in the movie!"
water	26:57	0:0	4	;
decl	27:12	27:73	4	input_thread_t	*p_input
op	27:36	0:0	4	=
call	27:38	27:72	5	playlist_CurrentInput
arg	27:61	27:72	6	p_playlist
water	27:61	0:0	7	p_playlist
if	28:12	29:21	4	(p_input == NULL)
cond	28:16	28:27	5	p_input == NULL
water	28:16	0:0	6	p_input
op	28:24	0:0	6	==
water	28:27	0:0	6	NULL
stmts	29:16	29:21	5	
break	29:16	29:21	6	
decl	30:12	30:69	4	int	it
op	30:19	0:0	4	=
call	30:21	30:68	5	var_InheritInteger
arg	30:41	30:48	6	p_intf
water	30:41	0:0	7	p_intf
arg	30:50	30:68	6	"short-jump-size"
water	30:50	0:0	7	"short-jump-size"
if	31:12	32:70	4	(it > 0)
cond	31:16	31:21	5	it > 0
water	31:16	0:0	6	it
op	31:19	0:0	6	>
water	31:21	0:0	6	0
stmts	32:16	32:70	5	
call	32:16	32:69	6	var_SetTime
arg	32:29	32:36	7	p_input
water	32:29	0:0	8	p_input
arg	32:38	32:51	7	"time-offset"
water	32:38	0:0	8	"time-offset"
arg	32:53	32:69	7	CLOCK_FREQ*it
water	32:53	0:0	8	CLOCK_FREQ
op	32:64	0:0	8	*
water	32:66	0:0	8	it
water	32:70	0:0	6	;
call	33:12	33:40	4	vlc_object_release
arg	33:32	33:40	5	p_input
water	33:32	0:0	6	p_input
water	33:41	0:0	4	;
break	34:12	34:17	4	
water	35:8	0:0	4	}
water	36:8	0:0	4	case
call	36:13	36:38	4	GESTURE
arg	36:21	36:25	5	LEFT
water	36:21	0:0	6	LEFT
arg	36:26	36:28	5	UP
water	36:26	0:0	6	UP
arg	36:29	36:33	5	NONE
water	36:29	0:0	6	NONE
arg	36:34	36:38	5	NONE
water	36:34	0:0	6	NONE
water	36:39	0:0	4	:
call	37:12	37:45	4	msg_Dbg
arg	37:21	37:27	5	p_intf
water	37:21	0:0	6	p_intf
arg	37:29	37:45	5	"Going slower."
water	37:29	0:0	6	"Going slower."
water	37:46	0:0	4	;
call	38:12	38:59	4	var_TriggerCallback
arg	38:33	38:43	5	p_playlist
water	38:33	0:0	6	p_playlist
arg	38:45	38:59	5	"rate-slower"
water	38:45	0:0	6	"rate-slower"
water	38:60	0:0	4	;
break	39:12	39:17	4	
water	40:8	0:0	4	case
call	40:13	40:39	4	GESTURE
arg	40:21	40:26	5	RIGHT
water	40:21	0:0	6	RIGHT
arg	40:27	40:29	5	UP
water	40:27	0:0	6	UP
arg	40:30	40:34	5	NONE
water	40:30	0:0	6	NONE
arg	40:35	40:39	5	NONE
water	40:35	0:0	6	NONE
water	40:40	0:0	4	:
call	41:12	41:45	4	msg_Dbg
arg	41:21	41:27	5	p_intf
water	41:21	0:0	6	p_intf
arg	41:29	41:45	5	"Going faster."
water	41:29	0:0	6	"Going faster."
water	41:46	0:0	4	;
call	42:12	42:59	4	var_TriggerCallback
arg	42:33	42:43	5	p_playlist
water	42:33	0:0	6	p_playlist
arg	42:45	42:59	5	"rate-faster"
water	42:45	0:0	6	"rate-faster"
water	42:60	0:0	4	;
break	43:12	43:17	4	
water	44:8	0:0	4	case
call	44:13	44:41	4	GESTURE
arg	44:21	44:25	5	LEFT
water	44:21	0:0	6	LEFT
arg	44:26	44:31	5	RIGHT
water	44:26	0:0	6	RIGHT
arg	44:32	44:36	5	NONE
water	44:32	0:0	6	NONE
arg	44:37	44:41	5	NONE
water	44:37	0:0	6	NONE
water	44:42	0:0	4	:
water	45:8	0:0	4	case
call	45:13	45:41	4	GESTURE
arg	45:21	45:26	5	RIGHT
water	45:21	0:0	6	RIGHT
arg	45:27	45:31	5	LEFT
water	45:27	0:0	6	LEFT
arg	45:32	45:36	5	NONE
water	45:32	0:0	6	NONE
arg	45:37	45:41	5	NONE
water	45:37	0:0	6	NONE
water	45:42	0:0	4	:
water	46:8	0:0	4	{
call	47:12	47:42	4	msg_Dbg
arg	47:21	47:27	5	p_intf
water	47:21	0:0	6	p_intf
arg	47:29	47:42	5	"Play/Pause"
water	47:29	0:0	6	"Play/Pause"
water	47:43	0:0	4	;
water	48:12	0:0	4	input_thread_t
op	48:27	0:0	4	*
water	48:28	0:0	4	p_input
op	48:36	0:0	4	=
call	48:38	48:72	4	playlist_CurrentInput
arg	48:61	48:72	5	p_playlist
water	48:61	0:0	6	p_playlist
water	48:73	0:0	4	;
water	49:12	0:0	4	if
water	49:14	0:0	4	(
water	49:16	0:0	4	p_input
op	49:24	0:0	4	==
water	49:27	0:0	4	NULL
water	49:32	0:0	4	)
water	50:16	0:0	4	break
water	50:21	0:0	4	;
water	51:12	0:0	4	int
water	51:16	0:0	4	i_state
op	51:24	0:0	4	=
call	51:26	51:59	4	var_GetInteger
arg	51:42	51:49	5	p_input
water	51:42	0:0	6	p_input
arg	51:51	51:59	5	"state"
water	51:51	0:0	6	"state"
water	51:60	0:0	4	;
water	52:12	0:0	4	i_state
op	52:20	0:0	4	=
water	52:22	0:0	4	(
water	52:23	0:0	4	i_state
op	52:31	0:0	4	==
water	52:34	0:0	4	PLAYING_S
water	52:43	0:0	4	)
water	52:45	0:0	4	?
water	52:47	0:0	4	PAUSE_S
water	52:55	0:0	4	:
water	52:57	0:0	4	PLAYING_S
water	52:66	0:0	4	;
call	53:12	53:54	4	var_SetInteger
arg	53:28	53:35	5	p_input
water	53:28	0:0	6	p_input
arg	53:37	53:44	5	"state"
water	53:37	0:0	6	"state"
arg	53:46	53:54	5	i_state
water	53:46	0:0	6	i_state
water	53:55	0:0	4	;
call	54:12	54:40	4	vlc_object_release
arg	54:32	54:40	5	p_input
water	54:32	0:0	6	p_input
water	54:41	0:0	4	;
water	55:12	0:0	4	break
water	55:17	0:0	4	;
water	56:8	0:0	4	}
water	57:8	0:0	4	case
call	57:13	57:40	4	GESTURE
arg	57:21	57:25	5	LEFT
water	57:21	0:0	6	LEFT
arg	57:26	57:30	5	DOWN
water	57:26	0:0	6	DOWN
arg	57:31	57:35	5	NONE
water	57:31	0:0	6	NONE
arg	57:36	57:40	5	NONE
water	57:36	0:0	6	NONE
water	57:41	0:0	4	:
call	58:12	58:38	4	playlist_Prev
arg	58:27	58:38	5	p_playlist
water	58:27	0:0	6	p_playlist
water	58:39	0:0	4	;
break	59:12	59:17	4	
water	60:8	0:0	4	case
call	60:13	60:41	4	GESTURE
arg	60:21	60:26	5	RIGHT
water	60:21	0:0	6	RIGHT
arg	60:27	60:31	5	DOWN
water	60:27	0:0	6	DOWN
arg	60:32	60:36	5	NONE
water	60:32	0:0	6	NONE
arg	60:37	60:41	5	NONE
water	60:37	0:0	6	NONE
water	60:42	0:0	4	:
call	61:12	61:38	4	playlist_Next
arg	61:27	61:38	5	p_playlist
water	61:27	0:0	6	p_playlist
water	61:39	0:0	4	;
break	62:12	62:17	4	
label	63:8	63:15	4	case UP :
call	64:12	64:36	4	msg_Dbg
arg	64:20	64:26	5	p_intf
water	64:20	0:0	6	p_intf
arg	64:28	64:36	5	"Louder"
water	64:28	0:0	6	"Louder"
water	64:37	0:0	4	;
call	65:12	65:51	4	playlist_VolumeUp
arg	65:31	65:41	5	p_playlist
water	65:31	0:0	6	p_playlist
arg	65:43	65:44	5	1
water	65:43	0:0	6	1
arg	65:46	65:51	5	NULL
water	65:46	0:0	6	NULL
water	65:52	0:0	4	;
break	66:12	66:17	4	
label	67:8	67:17	4	case DOWN :
call	68:12	68:37	4	msg_Dbg
arg	68:20	68:26	5	p_intf
water	68:20	0:0	6	p_intf
arg	68:28	68:37	5	"Quieter"
water	68:28	0:0	6	"Quieter"
water	68:38	0:0	4	;
call	69:12	69:53	4	playlist_VolumeDown
arg	69:33	69:43	5	p_playlist
water	69:33	0:0	6	p_playlist
arg	69:45	69:46	5	1
water	69:45	0:0	6	1
arg	69:48	69:53	5	NULL
water	69:48	0:0	6	NULL
water	69:54	0:0	4	;
break	70:12	70:17	4	
water	71:8	0:0	4	case
call	71:13	71:38	4	GESTURE
arg	71:21	71:23	5	UP
water	71:21	0:0	6	UP
arg	71:24	71:28	5	DOWN
water	71:24	0:0	6	DOWN
arg	71:29	71:33	5	NONE
water	71:29	0:0	6	NONE
arg	71:34	71:38	5	NONE
water	71:34	0:0	6	NONE
water	71:39	0:0	4	:
water	72:8	0:0	4	case
call	72:13	72:38	4	GESTURE
arg	72:21	72:25	5	DOWN
water	72:21	0:0	6	DOWN
arg	72:26	72:28	5	UP
water	72:26	0:0	6	UP
arg	72:29	72:33	5	NONE
water	72:29	0:0	6	NONE
arg	72:34	72:38	5	NONE
water	72:34	0:0	6	NONE
water	72:39	0:0	4	:
call	73:12	73:42	4	msg_Dbg
arg	73:21	73:27	5	p_intf
water	73:21	0:0	6	p_intf
arg	73:29	73:42	5	"Mute sound"
water	73:29	0:0	6	"Mute sound"
water	73:43	0:0	4	;
call	74:12	74:44	4	playlist_MuteToggle
arg	74:33	74:44	5	p_playlist
water	74:33	0:0	6	p_playlist
water	74:45	0:0	4	;
break	75:12	75:17	4	
water	76:8	0:0	4	case
call	76:13	76:39	4	GESTURE
arg	76:21	76:23	5	UP
water	76:21	0:0	6	UP
arg	76:24	76:29	5	RIGHT
water	76:24	0:0	6	RIGHT
arg	76:30	76:34	5	NONE
water	76:30	0:0	6	NONE
arg	76:35	76:39	5	NONE
water	76:35	0:0	6	NONE
water	76:40	0:0	4	:
water	77:8	0:0	4	{
water	78:12	0:0	4	input_thread_t
op	78:27	0:0	4	*
water	78:28	0:0	4	p_input
op	78:36	0:0	4	=
call	78:38	78:72	4	playlist_CurrentInput
arg	78:61	78:72	5	p_playlist
water	78:61	0:0	6	p_playlist
water	78:73	0:0	4	;
water	79:12	0:0	4	if
water	79:14	0:0	4	(
water	79:16	0:0	4	p_input
op	79:24	0:0	4	==
water	79:27	0:0	4	NULL
water	79:32	0:0	4	)
water	80:16	0:0	4	break
water	80:21	0:0	4	;
water	81:12	0:0	4	vlc_value_t
water	81:24	0:0	4	list
water	81:28	0:0	4	,
water	81:30	0:0	4	list2
water	81:35	0:0	4	;
call	82:12	83:38	4	var_Change
arg	82:24	82:31	5	p_input
water	82:24	0:0	6	p_input
arg	82:33	82:43	5	"audio-es"
water	82:33	0:0	6	"audio-es"
arg	82:45	82:63	5	VLC_VAR_GETCHOICES
water	82:45	0:0	6	VLC_VAR_GETCHOICES
arg	83:24	83:29	5	&list
op	83:24	0:0	6	&
water	83:25	0:0	6	list
arg	83:31	83:38	5	&list2
op	83:31	0:0	6	&
water	83:32	0:0	6	list2
water	83:39	0:0	4	;
water	84:12	0:0	4	if
water	84:14	0:0	4	(
water	84:16	0:0	4	list
op	84:20	0:0	4	.
water	84:21	0:0	4	p_list
op	84:27	0:0	4	->
water	84:29	0:0	4	i_count
op	84:37	0:0	4	>
water	84:39	0:0	4	1
water	84:41	0:0	4	)
water	85:12	0:0	4	{
water	86:16	0:0	4	int
water	86:20	0:0	4	i_audio_es
op	86:31	0:0	4	=
call	86:33	86:69	4	var_GetInteger
arg	86:49	86:56	5	p_input
water	86:49	0:0	6	p_input
arg	86:58	86:69	5	"audio-es"
water	86:58	0:0	6	"audio-es"
water	86:70	0:0	4	;
water	87:16	0:0	4	int
water	87:20	0:0	4	i
water	87:21	0:0	4	;
water	88:16	0:0	4	for
water	88:19	0:0	4	(
water	88:21	0:0	4	i
op	88:23	0:0	4	=
water	88:25	0:0	4	0
water	88:26	0:0	4	;
water	88:28	0:0	4	i
op	88:30	0:0	4	<
water	88:32	0:0	4	list
op	88:36	0:0	4	.
water	88:37	0:0	4	p_list
op	88:43	0:0	4	->
water	88:45	0:0	4	i_count
water	88:52	0:0	4	;
water	88:54	0:0	4	i
op	88:55	0:0	4	++
water	88:58	0:0	4	)
water	89:21	0:0	4	if
water	89:23	0:0	4	(
water	89:25	0:0	4	i_audio_es
op	89:36	0:0	4	==
water	89:39	0:0	4	list
op	89:43	0:0	4	.
water	89:44	0:0	4	p_list
op	89:50	0:0	4	->
water	89:52	0:0	4	p_values
op	89:60	0:0	4	[
water	89:61	0:0	4	i
op	89:62	0:0	4	]
op	89:63	0:0	4	.
water	89:64	0:0	4	i_int
water	89:70	0:0	4	)
water	90:25	0:0	4	break
water	90:30	0:0	4	;
water	92:16	0:0	4	if
water	92:18	0:0	4	(
water	92:20	0:0	4	i
op	92:22	0:0	4	==
water	92:25	0:0	4	list
op	92:29	0:0	4	.
water	92:30	0:0	4	p_list
op	92:36	0:0	4	->
water	92:38	0:0	4	i_count
water	92:46	0:0	4	)
water	93:16	0:0	4	{
call	94:20	95:73	4	msg_Warn
arg	94:30	94:37	5	p_input
water	94:30	0:0	6	p_input
arg	95:30	95:73	5	"invalid current audio track, selecting 0"
water	95:30	0:0	6	"invalid current audio track, selecting 0"
water	95:74	0:0	4	;
water	96:20	0:0	4	i
op	96:22	0:0	4	=
water	96:24	0:0	4	0
water	96:25	0:0	4	;
water	97:16	0:0	4	}
water	98:16	0:0	4	else
water	98:21	0:0	4	if
water	98:23	0:0	4	(
water	98:25	0:0	4	i
op	98:27	0:0	4	==
water	98:30	0:0	4	list
op	98:34	0:0	4	.
water	98:35	0:0	4	p_list
op	98:41	0:0	4	->
water	98:43	0:0	4	i_count
op	98:51	0:0	4	-
water	98:53	0:0	4	1
water	98:55	0:0	4	)
water	99:20	0:0	4	i
op	99:22	0:0	4	=
water	99:24	0:0	4	1
water	99:25	0:0	4	;
water	100:16	0:0	4	else
water	101:20	0:0	4	i
op	101:21	0:0	4	++
water	101:23	0:0	4	;
call	102:16	103:63	4	var_SetInteger
arg	102:32	102:39	5	p_input
water	102:32	0:0	6	p_input
arg	102:41	102:51	5	"audio-es"
water	102:41	0:0	6	"audio-es"
arg	103:32	103:63	5	list.p_list->p_values[i].i_int
water	103:32	0:0	6	list
op	103:36	0:0	6	.
water	103:37	0:0	6	p_list
op	103:43	0:0	6	->
water	103:45	0:0	6	p_values
op	103:53	0:0	6	[
water	103:54	0:0	6	i
op	103:55	0:0	6	]
op	103:56	0:0	6	.
water	103:57	0:0	6	i_int
water	103:64	0:0	4	;
water	104:12	0:0	4	}
call	105:12	105:40	4	var_FreeList
arg	105:26	105:31	5	&list
op	105:26	0:0	6	&
water	105:27	0:0	6	list
arg	105:33	105:40	5	&list2
op	105:33	0:0	6	&
water	105:34	0:0	6	list2
water	105:41	0:0	4	;
call	106:12	106:40	4	vlc_object_release
arg	106:32	106:40	5	p_input
water	106:32	0:0	6	p_input
water	106:41	0:0	4	;
water	107:12	0:0	4	break
water	107:17	0:0	4	;
water	108:8	0:0	4	}
water	109:8	0:0	4	case
call	109:13	109:41	4	GESTURE
arg	109:21	109:25	5	DOWN
water	109:21	0:0	6	DOWN
arg	109:26	109:31	5	RIGHT
water	109:26	0:0	6	RIGHT
arg	109:32	109:36	5	NONE
water	109:32	0:0	6	NONE
arg	109:37	109:41	5	NONE
water	109:37	0:0	6	NONE
water	109:42	0:0	4	:
water	110:8	0:0	4	{
water	111:12	0:0	4	input_thread_t
op	111:27	0:0	4	*
water	111:28	0:0	4	p_input
op	111:36	0:0	4	=
call	111:38	111:72	4	playlist_CurrentInput
arg	111:61	111:72	5	p_playlist
water	111:61	0:0	6	p_playlist
water	111:73	0:0	4	;
water	112:12	0:0	4	if
water	112:14	0:0	4	(
water	112:16	0:0	4	p_input
op	112:24	0:0	4	==
water	112:27	0:0	4	NULL
water	112:32	0:0	4	)
water	113:16	0:0	4	break
water	113:21	0:0	4	;
water	114:12	0:0	4	vlc_value_t
water	114:24	0:0	4	list
water	114:28	0:0	4	,
water	114:30	0:0	4	list2
water	114:35	0:0	4	;
call	115:12	116:38	4	var_Change
arg	115:24	115:31	5	p_input
water	115:24	0:0	6	p_input
arg	115:33	115:41	5	"spu-es"
water	115:33	0:0	6	"spu-es"
arg	115:43	115:61	5	VLC_VAR_GETCHOICES
water	115:43	0:0	6	VLC_VAR_GETCHOICES
arg	116:24	116:29	5	&list
op	116:24	0:0	6	&
water	116:25	0:0	6	list
arg	116:31	116:38	5	&list2
op	116:31	0:0	6	&
water	116:32	0:0	6	list2
water	116:39	0:0	4	;
water	117:12	0:0	4	if
water	117:14	0:0	4	(
water	117:16	0:0	4	list
op	117:20	0:0	4	.
water	117:21	0:0	4	p_list
op	117:27	0:0	4	->
water	117:29	0:0	4	i_count
op	117:37	0:0	4	>
water	117:39	0:0	4	1
water	117:41	0:0	4	)
water	118:12	0:0	4	{
water	119:16	0:0	4	int
water	119:20	0:0	4	i_audio_es
op	119:31	0:0	4	=
call	119:33	119:67	4	var_GetInteger
arg	119:49	119:56	5	p_input
water	119:49	0:0	6	p_input
arg	119:58	119:67	5	"spu-es"
water	119:58	0:0	6	"spu-es"
water	119:68	0:0	4	;
water	120:16	0:0	4	int
water	120:20	0:0	4	i
water	120:21	0:0	4	;
water	121:16	0:0	4	for
water	121:19	0:0	4	(
water	121:21	0:0	4	i
op	121:23	0:0	4	=
water	121:25	0:0	4	0
water	121:26	0:0	4	;
water	121:28	0:0	4	i
op	121:30	0:0	4	<
water	121:32	0:0	4	list
op	121:36	0:0	4	.
water	121:37	0:0	4	p_list
op	121:43	0:0	4	->
water	121:45	0:0	4	i_count
water	121:52	0:0	4	;
water	121:54	0:0	4	i
op	121:55	0:0	4	++
water	121:58	0:0	4	)
water	122:21	0:0	4	if
water	122:23	0:0	4	(
water	122:25	0:0	4	i_audio_es
op	122:36	0:0	4	==
water	122:39	0:0	4	list
op	122:43	0:0	4	.
water	122:44	0:0	4	p_list
op	122:50	0:0	4	->
water	122:52	0:0	4	p_values
op	122:60	0:0	4	[
water	122:61	0:0	4	i
op	122:62	0:0	4	]
op	122:63	0:0	4	.
water	122:64	0:0	4	i_int
water	122:70	0:0	4	)
water	123:25	0:0	4	break
water	123:30	0:0	4	;
water	125:16	0:0	4	if
water	125:18	0:0	4	(
water	125:20	0:0	4	i
op	125:22	0:0	4	==
water	125:25	0:0	4	list
op	125:29	0:0	4	.
water	125:30	0:0	4	p_list
op	125:36	0:0	4	->
water	125:38	0:0	4	i_count
water	125:46	0:0	4	)
water	126:16	0:0	4	{
call	127:20	128:76	4	msg_Warn
arg	127:30	127:37	5	p_input
water	127:30	0:0	6	p_input
arg	128:30	128:76	5	"invalid current subtitle track, selecting 0"
water	128:30	0:0	6	"invalid current subtitle track, selecting 0"
water	128:77	0:0	4	;
water	129:20	0:0	4	i
op	129:22	0:0	4	=
water	129:24	0:0	4	0
water	129:25	0:0	4	;
water	130:16	0:0	4	}
water	131:16	0:0	4	else
water	131:21	0:0	4	if
water	131:23	0:0	4	(
water	131:25	0:0	4	i
op	131:27	0:0	4	==
water	131:30	0:0	4	list
op	131:34	0:0	4	.
water	131:35	0:0	4	p_list
op	131:41	0:0	4	->
water	131:43	0:0	4	i_count
op	131:51	0:0	4	-
water	131:53	0:0	4	1
water	131:55	0:0	4	)
water	132:20	0:0	4	i
op	132:22	0:0	4	=
water	132:24	0:0	4	1
water	132:25	0:0	4	;
water	133:16	0:0	4	else
water	134:20	0:0	4	i
op	134:21	0:0	4	++
water	134:23	0:0	4	;
call	135:16	136:63	4	var_SetInteger
arg	135:32	135:39	5	p_input
water	135:32	0:0	6	p_input
arg	135:41	135:51	5	"audio-es"
water	135:41	0:0	6	"audio-es"
arg	136:32	136:63	5	list.p_list->p_values[i].i_int
water	136:32	0:0	6	list
op	136:36	0:0	6	.
water	136:37	0:0	6	p_list
op	136:43	0:0	6	->
water	136:45	0:0	6	p_values
op	136:53	0:0	6	[
water	136:54	0:0	6	i
op	136:55	0:0	6	]
op	136:56	0:0	6	.
water	136:57	0:0	6	i_int
water	136:64	0:0	4	;
water	137:12	0:0	4	}
call	138:12	138:40	4	var_FreeList
arg	138:26	138:31	5	&list
op	138:26	0:0	6	&
water	138:27	0:0	6	list
arg	138:33	138:40	5	&list2
op	138:33	0:0	6	&
water	138:34	0:0	6	list2
water	138:41	0:0	4	;
call	139:12	139:40	4	vlc_object_release
arg	139:32	139:40	5	p_input
water	139:32	0:0	6	p_input
water	139:41	0:0	4	;
water	140:12	0:0	4	break
water	140:17	0:0	4	;
water	141:8	0:0	4	}
water	142:8	0:0	4	case
call	142:13	142:38	4	GESTURE
arg	142:21	142:23	5	UP
water	142:21	0:0	6	UP
arg	142:24	142:28	5	LEFT
water	142:24	0:0	6	LEFT
arg	142:29	142:33	5	NONE
water	142:29	0:0	6	NONE
arg	142:34	142:38	5	NONE
water	142:34	0:0	6	NONE
water	142:39	0:0	4	:
water	143:8	0:0	4	{
water	144:12	0:0	4	bool
water	144:17	0:0	4	val
op	144:21	0:0	4	=
call	144:23	144:70	4	var_ToggleBool
arg	144:39	144:55	5	pl_Get(p_intf)
call	144:39	144:54	6	pl_Get
arg	144:47	144:54	7	p_intf
water	144:47	0:0	8	p_intf
arg	144:57	144:70	5	"fullscreen"
water	144:57	0:0	6	"fullscreen"
water	144:71	0:0	4	;
water	145:12	0:0	4	if
water	145:14	0:0	4	(
water	145:16	0:0	4	p_sys
op	145:21	0:0	4	->
water	145:23	0:0	4	p_vout
water	145:30	0:0	4	)
call	146:16	146:62	4	var_SetBool
arg	146:29	146:42	5	p_sys->p_vout
water	146:29	0:0	6	p_sys
op	146:34	0:0	6	->
water	146:36	0:0	6	p_vout
arg	146:44	146:56	5	"fullscreen"
water	146:44	0:0	6	"fullscreen"
arg	146:58	146:62	5	val
water	146:58	0:0	6	val
water	146:63	0:0	4	;
water	147:12	0:0	4	break
water	147:17	0:0	4	;
water	148:8	0:0	4	}
water	149:8	0:0	4	case
call	149:13	149:40	4	GESTURE
arg	149:21	149:25	5	DOWN
water	149:21	0:0	6	DOWN
arg	149:26	149:30	5	LEFT
water	149:26	0:0	6	LEFT
arg	149:31	149:35	5	NONE
water	149:31	0:0	6	NONE
arg	149:36	149:40	5	NONE
water	149:36	0:0	6	NONE
water	149:41	0:0	4	:
call	151:12	151:42	4	libvlc_Quit
arg	151:25	151:42	5	p_intf->p_libvlc
water	151:25	0:0	6	p_intf
op	151:31	0:0	6	->
water	151:33	0:0	6	p_libvlc
water	151:43	0:0	4	;
break	152:12	152:17	4	
water	153:8	0:0	4	case
call	153:13	153:39	4	GESTURE
arg	153:21	153:25	5	DOWN
water	153:21	0:0	6	DOWN
arg	153:26	153:30	5	LEFT
water	153:26	0:0	6	LEFT
arg	153:31	153:33	5	UP
water	153:31	0:0	6	UP
arg	153:34	153:39	5	RIGHT
water	153:34	0:0	6	RIGHT
water	153:40	0:0	4	:
water	154:8	0:0	4	case
call	154:13	154:39	4	GESTURE
arg	154:21	154:23	5	UP
water	154:21	0:0	6	UP
arg	154:24	154:29	5	RIGHT
water	154:24	0:0	6	RIGHT
arg	154:30	154:34	5	DOWN
water	154:30	0:0	6	DOWN
arg	154:35	154:39	5	LEFT
water	154:35	0:0	6	LEFT
water	154:40	0:0	4	:
call	155:12	155:51	4	msg_Dbg
arg	155:21	155:27	5	p_intf
water	155:21	0:0	6	p_intf
arg	155:29	155:51	5	"a square was drawn!"
water	155:29	0:0	6	"a square was drawn!"
water	155:52	0:0	4	;
break	156:12	156:17	4	
water	157:4	0:0	4	}
water	158:4	0:0	2	p_sys
op	158:9	0:0	2	->
water	158:11	0:0	2	i_num_gestures
op	158:26	0:0	2	=
water	158:28	0:0	2	0
water	158:29	0:0	2	;
water	159:4	0:0	2	p_sys
op	159:9	0:0	2	->
water	159:11	0:0	2	i_pattern
op	159:21	0:0	2	=
water	159:23	0:0	2	0
water	159:24	0:0	2	;
