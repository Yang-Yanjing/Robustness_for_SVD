func	2:0	68:0	0	static OMX_ERRORTYPE	ImplementationSpecificWorkarounds
params	2:54	0:0	1	
param	2:55	2:71	2	decoder_t *	p_dec
param	3:4	3:19	2	OmxPort *	p_port
param	3:21	3:39	2	es_format_t *	p_fmt
stmnts	0:0	67:24	1	
decl	5:4	5:39	2	decoder_sys_t	*p_sys
op	5:25	0:0	2	=
water	5:27	0:0	2	p_dec
op	5:32	0:0	2	->
water	5:34	0:0	2	p_sys
decl	6:4	6:59	2	OMX_PARAM_PORTDEFINITIONTYPE	*def
op	6:38	0:0	2	=
op	6:40	0:0	2	&
water	6:41	0:0	2	p_port
op	6:47	0:0	2	->
water	6:49	0:0	2	definition
decl	7:4	7:47	2	size_t	i_profile
op	7:21	0:0	2	=
water	7:23	0:0	2	0
water	7:24	0:0	2	xFFFF
water	7:29	0:0	2	,
decl	7:4	7:47	2	size_t	i_level
op	7:39	0:0	2	=
water	7:41	0:0	2	0
water	7:42	0:0	2	xFFFF
if	9:4	11:88	2	(p_fmt -> i_cat == VIDEO_ES && def -> eDir == OMX_DirInput && p_fmt -> i_codec == VLC_CODEC_H264)
cond	9:7	10:25	3	p_fmt -> i_cat == VIDEO_ES && def -> eDir == OMX_DirInput && p_fmt -> i_codec == VLC_CODEC_H264
water	9:7	0:0	4	p_fmt
op	9:12	0:0	4	->
water	9:14	0:0	4	i_cat
op	9:20	0:0	4	==
water	9:23	0:0	4	VIDEO_ES
op	9:32	0:0	4	&&
water	9:35	0:0	4	def
op	9:38	0:0	4	->
water	9:40	0:0	4	eDir
op	9:45	0:0	4	==
water	9:48	0:0	4	OMX_DirInput
op	9:61	0:0	4	&&
water	10:7	0:0	4	p_fmt
op	10:12	0:0	4	->
water	10:14	0:0	4	i_codec
op	10:22	0:0	4	==
water	10:25	0:0	4	VLC_CODEC_H264
stmts	11:1	11:88	3	
call	11:1	11:87	4	h264_get_profile_level
arg	11:24	11:38	5	&p_dec->fmt_in
op	11:24	0:0	6	&
water	11:25	0:0	6	p_dec
op	11:30	0:0	6	->
water	11:32	0:0	6	fmt_in
arg	11:40	11:50	5	&i_profile
op	11:40	0:0	6	&
water	11:41	0:0	6	i_profile
arg	11:52	11:60	5	&i_level
op	11:52	0:0	6	&
water	11:53	0:0	6	i_level
arg	11:62	11:87	5	&p_sys->i_nal_size_length
op	11:62	0:0	6	&
water	11:63	0:0	6	p_sys
op	11:68	0:0	6	->
water	11:70	0:0	6	i_nal_size_length
water	11:88	0:0	4	;
if	12:4	37:4	2	(!strcmp (p_sys -> psz_component ,"OMX.TI.Video.Decoder" ))
cond	12:7	12:59	3	!strcmp (p_sys -> psz_component ,"OMX.TI.Video.Decoder" )
op	12:7	0:0	4	!
call	12:8	12:59	4	strcmp
arg	12:15	12:35	5	p_sys->psz_component
water	12:15	0:0	6	p_sys
op	12:20	0:0	6	->
water	12:22	0:0	6	psz_component
arg	12:37	12:59	5	"OMX.TI.Video.Decoder"
water	12:37	0:0	6	"OMX.TI.Video.Decoder"
stmts	13:4	37:4	3	
water	13:4	0:0	4	{
if	14:8	21:8	4	(p_fmt -> i_cat == VIDEO_ES && def -> eDir == OMX_DirInput && p_fmt -> i_codec == VLC_CODEC_H264 && ( i_profile != 66 || i_level > 30 ))
cond	14:11	16:43	5	p_fmt -> i_cat == VIDEO_ES && def -> eDir == OMX_DirInput && p_fmt -> i_codec == VLC_CODEC_H264 && ( i_profile != 66 || i_level > 30 )
water	14:11	0:0	6	p_fmt
op	14:16	0:0	6	->
water	14:18	0:0	6	i_cat
op	14:24	0:0	6	==
water	14:27	0:0	6	VIDEO_ES
op	14:36	0:0	6	&&
water	14:39	0:0	6	def
op	14:42	0:0	6	->
water	14:44	0:0	6	eDir
op	14:49	0:0	6	==
water	14:52	0:0	6	OMX_DirInput
op	14:65	0:0	6	&&
water	15:11	0:0	6	p_fmt
op	15:16	0:0	6	->
water	15:18	0:0	6	i_codec
op	15:26	0:0	6	==
water	15:29	0:0	6	VLC_CODEC_H264
op	15:44	0:0	6	&&
water	16:11	0:0	6	(
water	16:12	0:0	6	i_profile
op	16:22	0:0	6	!=
water	16:25	0:0	6	66
op	16:28	0:0	6	||
water	16:31	0:0	6	i_level
op	16:39	0:0	6	>
water	16:41	0:0	6	30
water	16:43	0:0	6	)
stmts	17:8	21:8	5	
water	17:8	0:0	6	{
call	18:12	19:38	6	msg_Dbg
arg	18:20	18:25	7	p_dec
water	18:20	0:0	8	p_dec
arg	18:27	18:74	7	"h264 profile/level not supported (0x%x, 0x%x)"
water	18:27	0:0	8	"h264 profile/level not supported (0x%x, 0x%x)"
arg	19:20	19:29	7	i_profile
water	19:20	0:0	8	i_profile
arg	19:31	19:38	7	i_level
water	19:31	0:0	8	i_level
water	19:39	0:0	6	;
return	20:12	20:42	6	OMX_ErrorNotImplemented
water	20:19	0:0	7	OMX_ErrorNotImplemented
water	21:8	0:0	6	}
if	22:8	36:8	4	(p_fmt -> i_cat == VIDEO_ES && def -> eDir == OMX_DirOutput && p_fmt -> i_codec == VLC_CODEC_I420)
cond	22:11	23:29	5	p_fmt -> i_cat == VIDEO_ES && def -> eDir == OMX_DirOutput && p_fmt -> i_codec == VLC_CODEC_I420
water	22:11	0:0	6	p_fmt
op	22:16	0:0	6	->
water	22:18	0:0	6	i_cat
op	22:24	0:0	6	==
water	22:27	0:0	6	VIDEO_ES
op	22:36	0:0	6	&&
water	22:39	0:0	6	def
op	22:42	0:0	6	->
water	22:44	0:0	6	eDir
op	22:49	0:0	6	==
water	22:52	0:0	6	OMX_DirOutput
op	22:66	0:0	6	&&
water	23:11	0:0	6	p_fmt
op	23:16	0:0	6	->
water	23:18	0:0	6	i_codec
op	23:26	0:0	6	==
water	23:29	0:0	6	VLC_CODEC_I420
stmts	24:8	36:8	5	
water	24:8	0:0	6	{
water	26:12	0:0	6	def
op	26:15	0:0	6	->
water	26:17	0:0	6	format
op	26:23	0:0	6	.
water	26:24	0:0	6	video
op	26:29	0:0	6	.
water	26:30	0:0	6	eColorFormat
op	26:43	0:0	6	=
water	26:45	0:0	6	OMX_COLOR_FormatCbYCrY
water	26:67	0:0	6	;
call	27:12	28:51	6	GetVlcChromaFormat
arg	27:32	27:62	7	def->format.video.eColorFormat
water	27:32	0:0	8	def
op	27:35	0:0	8	->
water	27:37	0:0	8	format
op	27:43	0:0	8	.
water	27:44	0:0	8	video
op	27:49	0:0	8	.
water	27:50	0:0	8	eColorFormat
arg	28:32	28:47	7	&p_fmt->i_codec
op	28:32	0:0	8	&
water	28:33	0:0	8	p_fmt
op	28:38	0:0	8	->
water	28:40	0:0	8	i_codec
arg	28:49	28:51	7	0
water	28:49	0:0	8	0
water	28:52	0:0	6	;
call	29:12	33:66	6	GetVlcChromaSizes
arg	29:31	29:45	7	p_fmt->i_codec
water	29:31	0:0	8	p_fmt
op	29:36	0:0	8	->
water	29:38	0:0	8	i_codec
arg	30:31	30:60	7	def->format.video.nFrameWidth
water	30:31	0:0	8	def
op	30:34	0:0	8	->
water	30:36	0:0	8	format
op	30:42	0:0	8	.
water	30:43	0:0	8	video
op	30:48	0:0	8	.
water	30:49	0:0	8	nFrameWidth
arg	31:31	31:61	7	def->format.video.nFrameHeight
water	31:31	0:0	8	def
op	31:34	0:0	8	->
water	31:36	0:0	8	format
op	31:42	0:0	8	.
water	31:43	0:0	8	video
op	31:48	0:0	8	.
water	31:49	0:0	8	nFrameHeight
arg	32:31	32:52	7	&p_port->i_frame_size
op	32:31	0:0	8	&
water	32:32	0:0	8	p_port
op	32:38	0:0	8	->
water	32:40	0:0	8	i_frame_size
arg	32:54	32:77	7	&p_port->i_frame_stride
op	32:54	0:0	8	&
water	32:55	0:0	8	p_port
op	32:61	0:0	8	->
water	32:63	0:0	8	i_frame_stride
arg	33:31	33:66	7	&p_port->i_frame_stride_chroma_div
op	33:31	0:0	8	&
water	33:32	0:0	8	p_port
op	33:38	0:0	8	->
water	33:40	0:0	8	i_frame_stride_chroma_div
water	33:67	0:0	6	;
water	34:12	0:0	6	def
op	34:15	0:0	6	->
water	34:17	0:0	6	format
op	34:23	0:0	6	.
water	34:24	0:0	6	video
op	34:29	0:0	6	.
water	34:30	0:0	6	nStride
op	34:38	0:0	6	=
water	34:40	0:0	6	p_port
op	34:46	0:0	6	->
water	34:48	0:0	6	i_frame_stride
water	34:62	0:0	6	;
water	35:12	0:0	6	def
op	35:15	0:0	6	->
water	35:17	0:0	6	nBufferSize
op	35:29	0:0	6	=
water	35:31	0:0	6	p_port
op	35:37	0:0	6	->
water	35:39	0:0	6	i_frame_size
water	35:51	0:0	6	;
water	36:8	0:0	6	}
water	37:4	0:0	4	}
else	38:4	45:4	2
stmts	38:9	45:4	3	
if	38:9	45:4	4	(!strcmp (p_sys -> psz_component ,"OMX.st.video_encoder" ))
cond	38:12	38:64	5	!strcmp (p_sys -> psz_component ,"OMX.st.video_encoder" )
op	38:12	0:0	6	!
call	38:13	38:64	6	strcmp
arg	38:20	38:40	7	p_sys->psz_component
water	38:20	0:0	8	p_sys
op	38:25	0:0	8	->
water	38:27	0:0	8	psz_component
arg	38:42	38:64	7	"OMX.st.video_encoder"
water	38:42	0:0	8	"OMX.st.video_encoder"
stmts	39:4	45:4	5	
water	39:4	0:0	6	{
if	40:8	44:8	6	(p_fmt -> i_cat == VIDEO_ES)
cond	40:11	40:27	7	p_fmt -> i_cat == VIDEO_ES
water	40:11	0:0	8	p_fmt
op	40:16	0:0	8	->
water	40:18	0:0	8	i_cat
op	40:24	0:0	8	==
water	40:27	0:0	8	VIDEO_ES
stmts	41:8	44:8	7	
water	41:8	0:0	8	{
water	43:12	0:0	8	def
op	43:15	0:0	8	->
water	43:17	0:0	8	format
op	43:23	0:0	8	.
water	43:24	0:0	8	video
op	43:29	0:0	8	.
water	43:30	0:0	8	xFramerate
op	43:41	0:0	8	>>=
water	43:45	0:0	8	16
water	43:47	0:0	8	;
water	44:8	0:0	8	}
water	45:4	0:0	6	}
else	47:4	56:4	2
stmts	47:9	56:4	3	
if	47:9	56:4	4	(!strncmp (p_sys -> psz_component ,"OMX.qcom.video.decoder." ,strlen ("OMX.qcom.video.decoder" ) ))
cond	47:13	48:54	5	!strncmp (p_sys -> psz_component ,"OMX.qcom.video.decoder." ,strlen ("OMX.qcom.video.decoder" ) )
op	47:13	0:0	6	!
call	47:14	48:54	6	strncmp
arg	47:22	47:42	7	p_sys->psz_component
water	47:22	0:0	8	p_sys
op	47:27	0:0	8	->
water	47:29	0:0	8	psz_component
arg	47:44	47:69	7	"OMX.qcom.video.decoder."
water	47:44	0:0	8	"OMX.qcom.video.decoder."
arg	48:22	48:54	7	strlen("OMX.qcom.video.decoder")
call	48:22	48:53	8	strlen
arg	48:29	48:53	9	"OMX.qcom.video.decoder"
water	48:29	0:0	10	"OMX.qcom.video.decoder"
stmts	49:4	56:4	5	
water	49:4	0:0	6	{
if	51:8	55:8	6	(def -> nBufferSize > 450 * 1024)
cond	51:12	51:37	7	def -> nBufferSize > 450 * 1024
water	51:12	0:0	8	def
op	51:15	0:0	8	->
water	51:17	0:0	8	nBufferSize
op	51:29	0:0	8	>
water	51:31	0:0	8	450
op	51:35	0:0	8	*
water	51:37	0:0	8	1024
stmts	52:8	55:8	7	
water	52:8	0:0	8	{
water	53:12	0:0	8	def
op	53:15	0:0	8	->
water	53:17	0:0	8	nBufferSize
op	53:29	0:0	8	=
water	53:31	0:0	8	450
op	53:35	0:0	8	*
water	53:37	0:0	8	1024
water	53:41	0:0	8	;
water	54:12	0:0	8	p_port
op	54:18	0:0	8	->
water	54:20	0:0	8	i_frame_size
op	54:33	0:0	8	=
water	54:35	0:0	8	def
op	54:38	0:0	8	->
water	54:40	0:0	8	nBufferSize
water	54:51	0:0	8	;
water	55:8	0:0	8	}
water	56:4	0:0	6	}
else	59:4	65:4	2
stmts	59:9	65:4	3	
if	59:9	65:4	4	(!strcmp (p_sys -> psz_component ,"OMX.broadcom.video_decode" ))
cond	59:13	59:70	5	!strcmp (p_sys -> psz_component ,"OMX.broadcom.video_decode" )
op	59:13	0:0	6	!
call	59:14	59:70	6	strcmp
arg	59:21	59:41	7	p_sys->psz_component
water	59:21	0:0	8	p_sys
op	59:26	0:0	8	->
water	59:28	0:0	8	psz_component
arg	59:43	59:70	7	"OMX.broadcom.video_decode"
water	59:43	0:0	8	"OMX.broadcom.video_decode"
stmts	60:4	65:4	5	
water	60:4	0:0	6	{
water	64:8	0:0	6	def
op	64:11	0:0	6	->
water	64:13	0:0	6	format
op	64:19	0:0	6	.
water	64:20	0:0	6	video
op	64:25	0:0	6	.
water	64:26	0:0	6	nStride
op	64:34	0:0	6	=
water	64:36	0:0	6	def
op	64:39	0:0	6	->
water	64:41	0:0	6	format
op	64:47	0:0	6	.
water	64:48	0:0	6	video
op	64:53	0:0	6	.
water	64:54	0:0	6	nSliceHeight
op	64:67	0:0	6	=
water	64:69	0:0	6	0
water	64:70	0:0	6	;
water	65:4	0:0	6	}
return	67:4	67:24	2	OMX_ErrorNone
water	67:11	0:0	3	OMX_ErrorNone
