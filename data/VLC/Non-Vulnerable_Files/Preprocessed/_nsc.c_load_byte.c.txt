func	2:0	55:0	0	static int	load_byte
params	2:20	0:0	1	
param	2:22	2:49	2	unsigned char	encoding_type
param	3:22	3:43	2	unsigned char *	output
param	3:45	3:57	2	char * *	input
param	4:22	4:38	2	unsigned char *	j
param	4:40	4:57	2	unsigned char *	k
stmnts	6:4	54:12	1	
op	6:4	0:0	2	*
water	6:5	0:0	2	output
op	6:12	0:0	2	=
water	6:14	0:0	2	0
water	6:15	0:0	2	;
if	7:4	23:4	2	(encoding_type == 1)
cond	7:8	7:25	3	encoding_type == 1
water	7:8	0:0	4	encoding_type
op	7:22	0:0	4	==
water	7:25	0:0	4	1
stmts	8:4	23:4	3	
water	8:4	0:0	4	{
if	9:8	10:21	4	(isxdigit (( unsigned char ) * * input ) == 0)
cond	9:12	9:50	5	isxdigit (( unsigned char ) * * input ) == 0
call	9:12	9:45	6	isxdigit
arg	9:22	9:45	7	(unsignedchar)**input
water	9:22	0:0	8	(
water	9:23	0:0	8	unsigned
water	9:32	0:0	8	char
water	9:36	0:0	8	)
op	9:37	0:0	8	*
op	9:38	0:0	8	*
water	9:39	0:0	8	input
op	9:47	0:0	6	==
water	9:50	0:0	6	0
stmts	10:12	10:21	5	
return	10:12	10:21	6	-1
op	10:19	0:0	7	-
water	10:20	0:0	7	1
if	11:8	12:66	4	(isdigit (( unsigned char ) * * input ) == 0)
cond	11:12	11:49	5	isdigit (( unsigned char ) * * input ) == 0
call	11:12	11:44	6	isdigit
arg	11:21	11:44	7	(unsignedchar)**input
water	11:21	0:0	8	(
water	11:22	0:0	8	unsigned
water	11:31	0:0	8	char
water	11:35	0:0	8	)
op	11:36	0:0	8	*
op	11:37	0:0	8	*
water	11:38	0:0	8	input
op	11:46	0:0	6	==
water	11:49	0:0	6	0
stmts	12:12	12:66	5	
op	12:12	0:0	6	*
water	12:13	0:0	6	output
op	12:20	0:0	6	=
water	12:22	0:0	6	(
call	12:23	12:55	6	toupper
arg	12:32	12:55	7	(unsignedchar)**input
water	12:32	0:0	8	(
water	12:33	0:0	8	unsigned
water	12:42	0:0	8	char
water	12:46	0:0	8	)
op	12:47	0:0	8	*
op	12:48	0:0	8	*
water	12:49	0:0	8	input
op	12:57	0:0	6	-
water	12:59	0:0	6	7
water	12:60	0:0	6	)
op	12:62	0:0	6	*
water	12:64	0:0	6	16
water	12:66	0:0	6	;
else	13:8	14:34	4
stmts	14:12	14:34	5	
op	14:12	0:0	6	*
water	14:13	0:0	6	output
op	14:20	0:0	6	=
op	14:22	0:0	6	*
op	14:23	0:0	6	*
water	14:24	0:0	6	input
op	14:30	0:0	6	*
water	14:32	0:0	6	16
water	14:34	0:0	6	;
water	15:8	0:0	4	(
op	15:9	0:0	4	*
water	15:10	0:0	4	input
water	15:15	0:0	4	)
op	15:16	0:0	4	++
water	15:18	0:0	4	;
if	16:8	17:21	4	(isxdigit (( unsigned char ) * * input ) == 0)
cond	16:12	16:50	5	isxdigit (( unsigned char ) * * input ) == 0
call	16:12	16:45	6	isxdigit
arg	16:22	16:45	7	(unsignedchar)**input
water	16:22	0:0	8	(
water	16:23	0:0	8	unsigned
water	16:32	0:0	8	char
water	16:36	0:0	8	)
op	16:37	0:0	8	*
op	16:38	0:0	8	*
water	16:39	0:0	8	input
op	16:47	0:0	6	==
water	16:50	0:0	6	0
stmts	17:12	17:21	5	
return	17:12	17:21	6	-1
op	17:19	0:0	7	-
water	17:20	0:0	7	1
if	18:8	19:63	4	(isdigit (( unsigned char ) * * input ) == 0)
cond	18:12	18:49	5	isdigit (( unsigned char ) * * input ) == 0
call	18:12	18:44	6	isdigit
arg	18:21	18:44	7	(unsignedchar)**input
water	18:21	0:0	8	(
water	18:22	0:0	8	unsigned
water	18:31	0:0	8	char
water	18:35	0:0	8	)
op	18:36	0:0	8	*
op	18:37	0:0	8	*
water	18:38	0:0	8	input
op	18:46	0:0	6	==
water	18:49	0:0	6	0
stmts	19:12	19:63	5	
op	19:12	0:0	6	*
water	19:13	0:0	6	output
op	19:20	0:0	6	|=
call	19:23	19:55	6	toupper
arg	19:32	19:55	7	(unsignedchar)**input
water	19:32	0:0	8	(
water	19:33	0:0	8	unsigned
water	19:42	0:0	8	char
water	19:46	0:0	8	)
op	19:47	0:0	8	*
op	19:48	0:0	8	*
water	19:49	0:0	8	input
op	19:57	0:0	6	-
water	19:59	0:0	6	0
water	19:60	0:0	6	x37
water	19:63	0:0	6	;
else	20:8	21:37	4
stmts	21:12	21:37	5	
op	21:12	0:0	6	*
water	21:13	0:0	6	output
op	21:20	0:0	6	|=
op	21:23	0:0	6	*
op	21:24	0:0	6	*
water	21:25	0:0	6	input
op	21:31	0:0	6	-
water	21:33	0:0	6	0
water	21:34	0:0	6	x30
water	21:37	0:0	6	;
water	22:8	0:0	4	(
op	22:9	0:0	4	*
water	22:10	0:0	4	input
water	22:15	0:0	4	)
op	22:16	0:0	4	++
water	22:18	0:0	4	;
water	23:4	0:0	4	}
else	24:4	53:4	2
stmts	24:9	53:4	3	
if	24:9	53:4	4	(encoding_type == 2)
cond	24:13	24:30	5	encoding_type == 2
water	24:13	0:0	6	encoding_type
op	24:27	0:0	6	==
water	24:30	0:0	6	2
stmts	25:4	53:4	5	
water	25:4	0:0	6	{
decl	26:8	26:56	6	unsigned char	**uinput
op	26:31	0:0	6	=
water	26:33	0:0	6	(
water	26:34	0:0	6	unsigned
water	26:43	0:0	6	char
op	26:48	0:0	6	*
op	26:49	0:0	6	*
water	26:50	0:0	6	)
water	26:51	0:0	6	input
if	27:8	28:21	6	(* * uinput > 127 || inverse [ * * uinput ] == 0 xFF)
cond	27:12	27:54	7	* * uinput > 127 || inverse [ * * uinput ] == 0 xFF
op	27:12	0:0	8	*
op	27:13	0:0	8	*
water	27:14	0:0	8	uinput
op	27:21	0:0	8	>
water	27:23	0:0	8	127
op	27:27	0:0	8	||
water	27:30	0:0	8	inverse
op	27:37	0:0	8	[
op	27:39	0:0	8	*
op	27:40	0:0	8	*
water	27:41	0:0	8	uinput
op	27:48	0:0	8	]
op	27:50	0:0	8	==
water	27:53	0:0	8	0
water	27:54	0:0	8	xFF
stmts	28:12	28:21	7	
return	28:12	28:21	8	-1
op	28:19	0:0	9	-
water	28:20	0:0	9	1
if	29:8	38:8	6	(* k == 0)
cond	29:12	29:18	7	* k == 0
op	29:12	0:0	8	*
water	29:13	0:0	8	k
op	29:15	0:0	8	==
water	29:18	0:0	8	0
stmts	30:8	38:8	7	
water	30:8	0:0	8	{
if	31:12	32:25	8	(( * uinput ) [ 1 ] > 127 || inverse [ ( * uinput ) [ 1 ] ] == 0 xFF)
cond	31:16	31:70	9	( * uinput ) [ 1 ] > 127 || inverse [ ( * uinput ) [ 1 ] ] == 0 xFF
water	31:16	0:0	10	(
op	31:17	0:0	10	*
water	31:18	0:0	10	uinput
water	31:24	0:0	10	)
op	31:25	0:0	10	[
water	31:27	0:0	10	1
op	31:29	0:0	10	]
op	31:31	0:0	10	>
water	31:33	0:0	10	127
op	31:37	0:0	10	||
water	31:40	0:0	10	inverse
op	31:47	0:0	10	[
water	31:49	0:0	10	(
op	31:50	0:0	10	*
water	31:51	0:0	10	uinput
water	31:57	0:0	10	)
op	31:58	0:0	10	[
water	31:60	0:0	10	1
op	31:62	0:0	10	]
op	31:64	0:0	10	]
op	31:66	0:0	10	==
water	31:69	0:0	10	0
water	31:70	0:0	10	xFF
stmts	32:16	32:25	9	
return	32:16	32:25	10	-1
op	32:23	0:0	11	-
water	32:24	0:0	11	1
op	33:12	0:0	8	*
water	33:13	0:0	8	output
op	33:20	0:0	8	=
water	33:22	0:0	8	(
water	33:23	0:0	8	inverse
op	33:30	0:0	8	[
water	33:32	0:0	8	(
op	33:33	0:0	8	*
water	33:34	0:0	8	uinput
water	33:40	0:0	8	)
op	33:41	0:0	8	[
water	33:43	0:0	8	0
op	33:45	0:0	8	]
op	33:47	0:0	8	]
op	33:49	0:0	8	*
water	33:51	0:0	8	4
water	33:52	0:0	8	)
op	33:54	0:0	8	|
water	34:24	0:0	8	(
water	34:25	0:0	8	inverse
op	34:32	0:0	8	[
water	34:34	0:0	8	(
op	34:35	0:0	8	*
water	34:36	0:0	8	uinput
water	34:42	0:0	8	)
op	34:43	0:0	8	[
water	34:45	0:0	8	1
op	34:47	0:0	8	]
op	34:49	0:0	8	]
op	34:51	0:0	8	/
water	34:53	0:0	8	16
water	34:55	0:0	8	)
water	34:56	0:0	8	;
op	35:12	0:0	8	*
water	35:13	0:0	8	j
op	35:15	0:0	8	=
water	35:17	0:0	8	inverse
op	35:24	0:0	8	[
water	35:26	0:0	8	(
op	35:27	0:0	8	*
water	35:28	0:0	8	uinput
water	35:34	0:0	8	)
op	35:35	0:0	8	[
water	35:37	0:0	8	1
op	35:39	0:0	8	]
op	35:41	0:0	8	]
op	35:43	0:0	8	*
water	35:45	0:0	8	16
water	35:47	0:0	8	;
op	36:12	0:0	8	*
water	36:13	0:0	8	k
op	36:15	0:0	8	=
water	36:17	0:0	8	4
water	36:18	0:0	8	;
water	37:12	0:0	8	(
op	37:13	0:0	8	*
water	37:14	0:0	8	uinput
water	37:20	0:0	8	)
op	37:22	0:0	8	+=
water	37:25	0:0	8	2
water	37:26	0:0	8	;
water	38:8	0:0	8	}
else	39:8	45:8	6
stmts	39:13	45:8	7	
if	39:13	45:8	8	(* k == 2)
cond	39:17	39:23	9	* k == 2
op	39:17	0:0	10	*
water	39:18	0:0	10	k
op	39:20	0:0	10	==
water	39:23	0:0	10	2
stmts	40:8	45:8	9	
water	40:8	0:0	10	{
op	41:12	0:0	10	*
water	41:13	0:0	10	output
op	41:20	0:0	10	=
op	41:22	0:0	10	*
water	41:23	0:0	10	j
op	41:25	0:0	10	|
water	41:27	0:0	10	inverse
op	41:34	0:0	10	[
op	41:36	0:0	10	*
op	41:37	0:0	10	*
water	41:38	0:0	10	uinput
op	41:45	0:0	10	]
water	41:46	0:0	10	;
op	42:12	0:0	10	*
water	42:13	0:0	10	j
op	42:15	0:0	10	=
water	42:17	0:0	10	0
water	42:18	0:0	10	;
op	43:12	0:0	10	*
water	43:13	0:0	10	k
op	43:15	0:0	10	=
water	43:17	0:0	10	0
water	43:18	0:0	10	;
water	44:12	0:0	10	(
op	44:13	0:0	10	*
water	44:14	0:0	10	uinput
water	44:20	0:0	10	)
op	44:21	0:0	10	++
water	44:23	0:0	10	;
water	45:8	0:0	10	}
else	46:8	52:8	6
stmts	46:13	52:8	7	
if	46:13	52:8	8	(* k == 4)
cond	46:17	46:23	9	* k == 4
op	46:17	0:0	10	*
water	46:18	0:0	10	k
op	46:20	0:0	10	==
water	46:23	0:0	10	4
stmts	47:8	52:8	9	
water	47:8	0:0	10	{
op	48:12	0:0	10	*
water	48:13	0:0	10	output
op	48:20	0:0	10	=
water	48:22	0:0	10	(
water	48:23	0:0	10	inverse
op	48:30	0:0	10	[
op	48:32	0:0	10	*
op	48:33	0:0	10	*
water	48:34	0:0	10	uinput
op	48:41	0:0	10	]
op	48:43	0:0	10	/
water	48:45	0:0	10	4
water	48:46	0:0	10	)
op	48:48	0:0	10	|
op	48:50	0:0	10	*
water	48:51	0:0	10	j
water	48:52	0:0	10	;
op	49:12	0:0	10	*
water	49:13	0:0	10	j
op	49:15	0:0	10	=
water	49:17	0:0	10	inverse
op	49:24	0:0	10	[
op	49:26	0:0	10	*
op	49:27	0:0	10	*
water	49:28	0:0	10	uinput
op	49:35	0:0	10	]
op	49:37	0:0	10	*
water	49:39	0:0	10	64
water	49:41	0:0	10	;
op	50:12	0:0	10	*
water	50:13	0:0	10	k
op	50:15	0:0	10	=
water	50:17	0:0	10	2
water	50:18	0:0	10	;
water	51:12	0:0	10	(
op	51:13	0:0	10	*
water	51:14	0:0	10	uinput
water	51:20	0:0	10	)
op	51:21	0:0	10	++
water	51:23	0:0	10	;
water	52:8	0:0	10	}
water	53:4	0:0	6	}
return	54:4	54:12	2	0
water	54:11	0:0	3	0
