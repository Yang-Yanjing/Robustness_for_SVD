func	2:0	223:0	0	static int	InitCapture
params	2:22	0:0	1	
param	2:24	2:41	2	demux_t *	p_demux
stmnts	0:0	222:22	1	
decl	4:4	4:39	2	demux_sys_t	*p_sys
op	4:23	0:0	2	=
water	4:25	0:0	2	p_demux
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	6:4	6:41	2	const int	i_page_size
op	6:26	0:0	2	=
call	6:28	6:40	3	getpagesize
decl	7:4	7:29	2	unsigned int	i_bufmemsize
decl	9:4	9:25	2	char	psz_vdev[MAXLEN]
call	10:4	10:73	2	snprintf
arg	10:14	10:22	3	psz_vdev
water	10:14	0:0	4	psz_vdev
arg	10:24	10:40	3	sizeof(psz_vdev)
op	10:24	0:0	4	sizeof
water	10:30	0:0	4	(
water	10:31	0:0	4	psz_vdev
water	10:39	0:0	4	)
arg	10:42	10:57	3	SDIVIDEO_DEVICE
water	10:42	0:0	4	SDIVIDEO_DEVICE
arg	10:59	10:73	3	p_sys->i_link
water	10:59	0:0	4	p_sys
op	10:64	0:0	4	->
water	10:66	0:0	4	i_link
water	10:74	0:0	2	;
water	11:4	0:0	2	psz_vdev
op	11:12	0:0	2	[
op	11:13	0:0	2	sizeof
water	11:19	0:0	2	(
water	11:20	0:0	2	psz_vdev
water	11:28	0:0	2	)
op	11:30	0:0	2	-
water	11:32	0:0	2	1
op	11:33	0:0	2	]
op	11:35	0:0	2	=
water	11:37	0:0	2	'\0'
water	11:41	0:0	2	;
if	12:4	16:4	2	(( p_sys -> i_vfd =vlc_open (psz_vdev ,O_RDONLY ) ) < 0)
cond	12:9	12:60	3	( p_sys -> i_vfd =vlc_open (psz_vdev ,O_RDONLY ) ) < 0
water	12:9	0:0	4	(
water	12:10	0:0	4	p_sys
op	12:15	0:0	4	->
water	12:17	0:0	4	i_vfd
op	12:23	0:0	4	=
call	12:25	12:54	4	vlc_open
arg	12:35	12:43	5	psz_vdev
water	12:35	0:0	6	psz_vdev
arg	12:45	12:54	5	O_RDONLY
water	12:45	0:0	6	O_RDONLY
water	12:56	0:0	4	)
op	12:58	0:0	4	<
water	12:60	0:0	4	0
stmts	13:4	16:4	3	
water	13:4	0:0	4	{
call	14:8	14:62	4	msg_Err
arg	14:17	14:24	5	p_demux
water	14:17	0:0	6	p_demux
arg	14:26	14:51	5	"couldn't open device %s"
water	14:26	0:0	6	"couldn't open device %s"
arg	14:53	14:62	5	psz_vdev
water	14:53	0:0	6	psz_vdev
water	14:63	0:0	4	;
return	15:8	15:27	4	VLC_EGENERIC
water	15:15	0:0	5	VLC_EGENERIC
water	16:4	0:0	4	}
while	18:4	52:4	2	(vlc_object_alive (p_demux ))
cond	18:12	18:36	3	vlc_object_alive (p_demux )
call	18:12	18:36	4	vlc_object_alive
arg	18:29	18:36	5	p_demux
water	18:29	0:0	6	p_demux
stmts	19:4	52:4	3	
water	19:4	0:0	4	{
decl	20:8	20:28	4	struct pollfd	pfd[1]
water	21:8	0:0	4	pfd
op	21:11	0:0	4	[
water	21:12	0:0	4	0
op	21:13	0:0	4	]
op	21:14	0:0	4	.
water	21:15	0:0	4	fd
op	21:18	0:0	4	=
water	21:20	0:0	4	p_sys
op	21:25	0:0	4	->
water	21:27	0:0	4	i_vfd
water	21:32	0:0	4	;
water	22:8	0:0	4	pfd
op	22:11	0:0	4	[
water	22:12	0:0	4	0
op	22:13	0:0	4	]
op	22:14	0:0	4	.
water	22:15	0:0	4	events
op	22:22	0:0	4	=
water	22:24	0:0	4	POLLIN
op	22:31	0:0	4	|
water	22:33	0:0	4	POLLPRI
water	22:40	0:0	4	;
if	23:8	28:8	4	(poll (pfd ,1 ,READ_TIMEOUT ) < 0)
cond	23:13	23:44	5	poll (pfd ,1 ,READ_TIMEOUT ) < 0
call	23:13	23:40	6	poll
arg	23:19	23:22	7	pfd
water	23:19	0:0	8	pfd
arg	23:24	23:25	7	1
water	23:24	0:0	8	1
arg	23:27	23:40	7	READ_TIMEOUT
water	23:27	0:0	8	READ_TIMEOUT
op	23:42	0:0	6	<
water	23:44	0:0	6	0
stmts	24:8	28:8	5	
water	24:8	0:0	6	{
call	25:12	25:76	6	msg_Warn
arg	25:22	25:29	7	p_demux
water	25:22	0:0	8	p_demux
arg	25:31	25:52	7	"couldn't poll(): %s"
water	25:31	0:0	8	"couldn't poll(): %s"
arg	25:54	25:76	7	vlc_strerror_c(errno)
call	25:54	25:74	8	vlc_strerror_c
arg	25:69	25:74	9	errno
water	25:69	0:0	10	errno
water	25:77	0:0	6	;
call	26:12	26:32	6	close
arg	26:19	26:32	7	p_sys->i_vfd
water	26:19	0:0	8	p_sys
op	26:24	0:0	8	->
water	26:26	0:0	8	i_vfd
water	26:33	0:0	6	;
return	27:12	27:31	6	VLC_EGENERIC
water	27:19	0:0	7	VLC_EGENERIC
water	28:8	0:0	6	}
if	29:8	51:8	4	(pfd [ 0 ] . revents & POLLPRI)
cond	29:13	29:30	5	pfd [ 0 ] . revents & POLLPRI
water	29:13	0:0	6	pfd
op	29:16	0:0	6	[
water	29:17	0:0	6	0
op	29:18	0:0	6	]
op	29:19	0:0	6	.
water	29:20	0:0	6	revents
op	29:28	0:0	6	&
water	29:30	0:0	6	POLLPRI
stmts	30:8	51:8	5	
water	30:8	0:0	6	{
decl	31:12	31:30	6	unsigned int	i_val
if	32:12	34:49	6	(ioctl (p_sys -> i_vfd ,SDIVIDEO_IOC_RXGETEVENTS ,& i_val ) < 0)
cond	32:17	32:75	7	ioctl (p_sys -> i_vfd ,SDIVIDEO_IOC_RXGETEVENTS ,& i_val ) < 0
call	32:17	32:71	8	ioctl
arg	32:24	32:36	9	p_sys->i_vfd
water	32:24	0:0	10	p_sys
op	32:29	0:0	10	->
water	32:31	0:0	10	i_vfd
arg	32:38	32:62	9	SDIVIDEO_IOC_RXGETEVENTS
water	32:38	0:0	10	SDIVIDEO_IOC_RXGETEVENTS
arg	32:64	32:71	9	&i_val
op	32:64	0:0	10	&
water	32:65	0:0	10	i_val
op	32:73	0:0	8	<
water	32:75	0:0	8	0
stmts	33:16	34:49	7	
call	33:16	34:48	8	msg_Warn
arg	33:26	33:33	9	p_demux
water	33:26	0:0	10	p_demux
arg	33:35	33:74	9	"couldn't SDIVIDEO_IOC_RXGETEVENTS: %s"
water	33:35	0:0	10	"couldn't SDIVIDEO_IOC_RXGETEVENTS: %s"
arg	34:26	34:48	9	vlc_strerror_c(errno)
call	34:26	34:46	10	vlc_strerror_c
arg	34:41	34:46	11	errno
water	34:41	0:0	12	errno
water	34:49	0:0	8	;
else	35:12	50:12	6
stmts	36:12	50:12	7	
water	36:12	0:0	8	{
if	37:16	38:78	8	(i_val & SDIVIDEO_EVENT_RX_BUFFER)
cond	37:21	37:29	9	i_val & SDIVIDEO_EVENT_RX_BUFFER
water	37:21	0:0	10	i_val
op	37:27	0:0	10	&
water	37:29	0:0	10	SDIVIDEO_EVENT_RX_BUFFER
stmts	38:20	38:78	9	
call	38:20	38:77	10	msg_Warn
arg	38:30	38:37	11	p_demux
water	38:30	0:0	12	p_demux
arg	38:39	38:77	11	"driver receive buffer queue overrun"
water	38:39	0:0	12	"driver receive buffer queue overrun"
water	38:78	0:0	10	;
if	39:16	40:70	8	(i_val & SDIVIDEO_EVENT_RX_FIFO)
cond	39:21	39:29	9	i_val & SDIVIDEO_EVENT_RX_FIFO
water	39:21	0:0	10	i_val
op	39:27	0:0	10	&
water	39:29	0:0	10	SDIVIDEO_EVENT_RX_FIFO
stmts	40:20	40:70	9	
call	40:20	40:69	10	msg_Warn
arg	40:30	40:37	11	p_demux
water	40:30	0:0	12	p_demux
arg	40:39	40:69	11	"onboard receive FIFO overrun"
water	40:39	0:0	12	"onboard receive FIFO overrun"
water	40:70	0:0	10	;
if	41:16	42:63	8	(i_val & SDIVIDEO_EVENT_RX_CARRIER)
cond	41:21	41:29	9	i_val & SDIVIDEO_EVENT_RX_CARRIER
water	41:21	0:0	10	i_val
op	41:27	0:0	10	&
water	41:29	0:0	10	SDIVIDEO_EVENT_RX_CARRIER
stmts	42:20	42:63	9	
call	42:20	42:62	10	msg_Warn
arg	42:30	42:37	11	p_demux
water	42:30	0:0	12	p_demux
arg	42:39	42:62	11	"carrier status change"
water	42:39	0:0	12	"carrier status change"
water	42:63	0:0	10	;
if	43:16	44:60	8	(i_val & SDIVIDEO_EVENT_RX_DATA)
cond	43:21	43:29	9	i_val & SDIVIDEO_EVENT_RX_DATA
water	43:21	0:0	10	i_val
op	43:27	0:0	10	&
water	43:29	0:0	10	SDIVIDEO_EVENT_RX_DATA
stmts	44:20	44:60	9	
call	44:20	44:59	10	msg_Warn
arg	44:30	44:37	11	p_demux
water	44:30	0:0	12	p_demux
arg	44:39	44:59	11	"data status change"
water	44:39	0:0	12	"data status change"
water	44:60	0:0	10	;
if	45:16	49:16	8	(i_val & SDIVIDEO_EVENT_RX_STD)
cond	45:21	45:29	9	i_val & SDIVIDEO_EVENT_RX_STD
water	45:21	0:0	10	i_val
op	45:27	0:0	10	&
water	45:29	0:0	10	SDIVIDEO_EVENT_RX_STD
stmts	46:16	49:16	9	
water	46:16	0:0	10	{
call	47:20	47:63	10	msg_Warn
arg	47:30	47:37	11	p_demux
water	47:30	0:0	12	p_demux
arg	47:39	47:63	11	"standard status change"
water	47:39	0:0	12	"standard status change"
water	47:64	0:0	10	;
break	48:20	48:25	10	
water	49:16	0:0	10	}
water	50:12	0:0	8	}
water	51:8	0:0	6	}
water	52:4	0:0	4	}
if	53:4	57:4	2	(!vlc_object_alive (p_demux ))
cond	53:9	53:34	3	!vlc_object_alive (p_demux )
op	53:9	0:0	4	!
call	53:10	53:34	4	vlc_object_alive
arg	53:27	53:34	5	p_demux
water	53:27	0:0	6	p_demux
stmts	54:4	57:4	3	
water	54:4	0:0	4	{
call	55:8	55:28	4	close
arg	55:15	55:28	5	p_sys->i_vfd
water	55:15	0:0	6	p_sys
op	55:20	0:0	6	->
water	55:22	0:0	6	i_vfd
water	55:29	0:0	4	;
return	56:8	56:27	4	VLC_EGENERIC
water	56:15	0:0	5	VLC_EGENERIC
water	57:4	0:0	4	}
if	58:4	65:4	2	(ioctl (p_sys -> i_vfd ,SDIVIDEO_IOC_RXGETVIDSTATUS ,& p_sys -> i_standard ) < 0)
cond	58:9	59:12	3	ioctl (p_sys -> i_vfd ,SDIVIDEO_IOC_RXGETVIDSTATUS ,& p_sys -> i_standard ) < 0
call	58:9	58:78	4	ioctl
arg	58:16	58:28	5	p_sys->i_vfd
water	58:16	0:0	6	p_sys
op	58:21	0:0	6	->
water	58:23	0:0	6	i_vfd
arg	58:30	58:57	5	SDIVIDEO_IOC_RXGETVIDSTATUS
water	58:30	0:0	6	SDIVIDEO_IOC_RXGETVIDSTATUS
arg	58:59	58:78	5	&p_sys->i_standard
op	58:59	0:0	6	&
water	58:60	0:0	6	p_sys
op	58:65	0:0	6	->
water	58:67	0:0	6	i_standard
op	59:10	0:0	4	<
water	59:12	0:0	4	0
stmts	60:4	65:4	3	
water	60:4	0:0	4	{
call	61:8	62:40	4	msg_Warn
arg	61:18	61:25	5	p_demux
water	61:18	0:0	6	p_demux
arg	61:27	61:69	5	"couldn't SDIVIDEO_IOC_RXGETVIDSTATUS: %s"
water	61:27	0:0	6	"couldn't SDIVIDEO_IOC_RXGETVIDSTATUS: %s"
arg	62:18	62:40	5	vlc_strerror_c(errno)
call	62:18	62:38	6	vlc_strerror_c
arg	62:33	62:38	7	errno
water	62:33	0:0	8	errno
water	62:41	0:0	4	;
call	63:8	63:28	4	close
arg	63:15	63:28	5	p_sys->i_vfd
water	63:15	0:0	6	p_sys
op	63:20	0:0	6	->
water	63:22	0:0	6	i_vfd
water	63:29	0:0	4	;
return	64:8	64:27	4	VLC_EGENERIC
water	64:15	0:0	5	VLC_EGENERIC
water	65:4	0:0	4	}
call	66:4	66:24	2	close
arg	66:11	66:24	3	p_sys->i_vfd
water	66:11	0:0	4	p_sys
op	66:16	0:0	4	->
water	66:18	0:0	4	i_vfd
water	66:25	0:0	2	;
if	67:4	68:27	2	(InitVideo (p_demux ) != VLC_SUCCESS)
cond	67:9	67:33	3	InitVideo (p_demux ) != VLC_SUCCESS
call	67:9	67:28	4	InitVideo
arg	67:20	67:28	5	p_demux
water	67:20	0:0	6	p_demux
op	67:30	0:0	4	!=
water	67:33	0:0	4	VLC_SUCCESS
stmts	68:8	68:27	3	
return	68:8	68:27	4	VLC_EGENERIC
water	68:15	0:0	5	VLC_EGENERIC
water	69:4	0:0	2	p_sys
op	69:9	0:0	2	->
water	69:11	0:0	2	i_vbuffer_size
op	69:26	0:0	2	=
water	69:28	0:0	2	p_sys
op	69:33	0:0	2	->
water	69:35	0:0	2	i_height
op	69:44	0:0	2	*
water	69:46	0:0	2	p_sys
op	69:51	0:0	2	->
water	69:53	0:0	2	i_width
op	69:61	0:0	2	*
water	69:63	0:0	2	2
water	69:64	0:0	2	;
if	71:4	172:4	2	(p_sys -> i_max_channel != - 1)
cond	71:9	71:34	3	p_sys -> i_max_channel != - 1
water	71:9	0:0	4	p_sys
op	71:14	0:0	4	->
water	71:16	0:0	4	i_max_channel
op	71:30	0:0	4	!=
op	71:33	0:0	4	-
water	71:34	0:0	4	1
stmts	72:4	172:4	3	
water	72:4	0:0	4	{
decl	73:8	73:27	4	unsigned int	i_rate
decl	74:8	74:29	4	char	psz_adev[MAXLEN]
call	75:8	75:77	4	snprintf
arg	75:18	75:26	5	psz_adev
water	75:18	0:0	6	psz_adev
arg	75:28	75:44	5	sizeof(psz_adev)
op	75:28	0:0	6	sizeof
water	75:34	0:0	6	(
water	75:35	0:0	6	psz_adev
water	75:43	0:0	6	)
arg	75:46	75:61	5	SDIAUDIO_DEVICE
water	75:46	0:0	6	SDIAUDIO_DEVICE
arg	75:63	75:77	5	p_sys->i_link
water	75:63	0:0	6	p_sys
op	75:68	0:0	6	->
water	75:70	0:0	6	i_link
water	75:78	0:0	4	;
water	76:8	0:0	4	psz_adev
op	76:16	0:0	4	[
op	76:17	0:0	4	sizeof
water	76:23	0:0	4	(
water	76:24	0:0	4	psz_adev
water	76:32	0:0	4	)
op	76:34	0:0	4	-
water	76:36	0:0	4	1
op	76:37	0:0	4	]
op	76:39	0:0	4	=
water	76:41	0:0	4	'\0'
water	76:45	0:0	4	;
if	77:8	81:8	4	(( p_sys -> i_afd =vlc_open (psz_adev ,O_RDONLY ) ) < 0)
cond	77:13	77:64	5	( p_sys -> i_afd =vlc_open (psz_adev ,O_RDONLY ) ) < 0
water	77:13	0:0	6	(
water	77:14	0:0	6	p_sys
op	77:19	0:0	6	->
water	77:21	0:0	6	i_afd
op	77:27	0:0	6	=
call	77:29	77:58	6	vlc_open
arg	77:39	77:47	7	psz_adev
water	77:39	0:0	8	psz_adev
arg	77:49	77:58	7	O_RDONLY
water	77:49	0:0	8	O_RDONLY
water	77:60	0:0	6	)
op	77:62	0:0	6	<
water	77:64	0:0	6	0
stmts	78:8	81:8	5	
water	78:8	0:0	6	{
call	79:12	79:66	6	msg_Err
arg	79:21	79:28	7	p_demux
water	79:21	0:0	8	p_demux
arg	79:30	79:55	7	"couldn't open device %s"
water	79:30	0:0	8	"couldn't open device %s"
arg	79:57	79:66	7	psz_adev
water	79:57	0:0	8	psz_adev
water	79:67	0:0	6	;
return	80:12	80:31	6	VLC_EGENERIC
water	80:19	0:0	7	VLC_EGENERIC
water	81:8	0:0	6	}
if	82:8	87:8	4	(ioctl (p_sys -> i_afd ,SDIAUDIO_IOC_RXGETAUDRATE ,& i_rate ) < 0)
cond	82:13	82:73	5	ioctl (p_sys -> i_afd ,SDIAUDIO_IOC_RXGETAUDRATE ,& i_rate ) < 0
call	82:13	82:69	6	ioctl
arg	82:20	82:32	7	p_sys->i_afd
water	82:20	0:0	8	p_sys
op	82:25	0:0	8	->
water	82:27	0:0	8	i_afd
arg	82:34	82:59	7	SDIAUDIO_IOC_RXGETAUDRATE
water	82:34	0:0	8	SDIAUDIO_IOC_RXGETAUDRATE
arg	82:61	82:69	7	&i_rate
op	82:61	0:0	8	&
water	82:62	0:0	8	i_rate
op	82:71	0:0	6	<
water	82:73	0:0	6	0
stmts	83:8	87:8	5	
water	83:8	0:0	6	{
call	84:12	85:44	6	msg_Warn
arg	84:22	84:29	7	p_demux
water	84:22	0:0	8	p_demux
arg	84:31	84:71	7	"couldn't SDIAUDIO_IOC_RXGETAUDRATE: %s"
water	84:31	0:0	8	"couldn't SDIAUDIO_IOC_RXGETAUDRATE: %s"
arg	85:22	85:44	7	vlc_strerror_c(errno)
call	85:22	85:42	8	vlc_strerror_c
arg	85:37	85:42	9	errno
water	85:37	0:0	10	errno
water	85:45	0:0	6	;
return	86:12	86:31	6	VLC_EGENERIC
water	86:19	0:0	7	VLC_EGENERIC
water	87:8	0:0	6	}
switch	88:8	111:8	4	(i_rate)
cond	88:17	88:17	5	i_rate
water	88:17	0:0	6	i_rate
stmts	89:8	111:8	5	
water	89:8	0:0	6	{
label	90:8	90:38	6	case SDIAUDIO_CTL_ASYNC_48_KHZ :
label	91:8	91:37	6	case SDIAUDIO_CTL_SYNC_48_KHZ :
water	92:12	0:0	6	p_sys
op	92:17	0:0	6	->
water	92:19	0:0	6	i_sample_rate
op	92:33	0:0	6	=
water	92:35	0:0	6	48000
water	92:40	0:0	6	;
break	93:12	93:17	6	
label	94:8	94:40	6	case SDIAUDIO_CTL_ASYNC_44_1_KHZ :
label	95:8	95:39	6	case SDIAUDIO_CTL_SYNC_44_1_KHZ :
water	96:12	0:0	6	p_sys
op	96:17	0:0	6	->
water	96:19	0:0	6	i_sample_rate
op	96:33	0:0	6	=
water	96:35	0:0	6	44100
water	96:40	0:0	6	;
break	97:12	97:17	6	
label	98:8	98:38	6	case SDIAUDIO_CTL_ASYNC_32_KHZ :
label	99:8	99:37	6	case SDIAUDIO_CTL_SYNC_32_KHZ :
water	100:12	0:0	6	p_sys
op	100:17	0:0	6	->
water	100:19	0:0	6	i_sample_rate
op	100:33	0:0	6	=
water	100:35	0:0	6	32000
water	100:40	0:0	6	;
break	101:12	101:17	6	
label	102:8	102:38	6	case SDIAUDIO_CTL_ASYNC_96_KHZ :
label	103:8	103:37	6	case SDIAUDIO_CTL_SYNC_96_KHZ :
water	104:12	0:0	6	p_sys
op	104:17	0:0	6	->
water	104:19	0:0	6	i_sample_rate
op	104:33	0:0	6	=
water	104:35	0:0	6	96000
water	104:40	0:0	6	;
break	105:12	105:17	6	
label	106:8	106:44	6	case SDIAUDIO_CTL_ASYNC_FREE_RUNNING :
label	107:8	107:43	6	case SDIAUDIO_CTL_SYNC_FREE_RUNNING :
label	108:8	108:15	6	default :
call	109:12	109:63	6	msg_Err
arg	109:21	109:28	7	p_demux
water	109:21	0:0	8	p_demux
arg	109:30	109:54	7	"unknown sample rate %u"
water	109:30	0:0	8	"unknown sample rate %u"
arg	109:56	109:63	7	i_rate
water	109:56	0:0	8	i_rate
water	109:64	0:0	6	;
return	110:12	110:31	6	VLC_EGENERIC
water	110:19	0:0	7	VLC_EGENERIC
water	111:8	0:0	6	}
call	112:8	112:28	4	close
arg	112:15	112:28	5	p_sys->i_afd
water	112:15	0:0	6	p_sys
op	112:20	0:0	6	->
water	112:22	0:0	6	i_afd
water	112:29	0:0	4	;
if	113:8	114:31	4	(InitAudio (p_demux ) != VLC_SUCCESS)
cond	113:13	113:37	5	InitAudio (p_demux ) != VLC_SUCCESS
call	113:13	113:32	6	InitAudio
arg	113:24	113:32	7	p_demux
water	113:24	0:0	8	p_demux
op	113:34	0:0	6	!=
water	113:37	0:0	6	VLC_SUCCESS
stmts	114:12	114:31	5	
return	114:12	114:31	6	VLC_EGENERIC
water	114:19	0:0	7	VLC_EGENERIC
water	115:8	0:0	4	p_sys
op	115:13	0:0	4	->
water	115:15	0:0	4	i_abuffer_size
op	115:30	0:0	4	=
water	115:32	0:0	4	p_sys
op	115:37	0:0	4	->
water	115:39	0:0	4	i_ablock_size
op	116:33	0:0	4	*
water	116:35	0:0	4	(
water	116:36	0:0	4	1
op	116:38	0:0	4	+
water	116:40	0:0	4	p_sys
op	116:45	0:0	4	->
water	116:47	0:0	4	i_max_channel
water	116:60	0:0	4	)
water	116:61	0:0	4	;
if	118:8	124:8	4	(WriteULSysfs (SDIAUDIO_SAMPLESIZE_FILE ,p_sys -> i_link ,SDIAUDIO_CTL_AUDSAMP_SZ_16 ) < 0)
cond	118:13	119:58	5	WriteULSysfs (SDIAUDIO_SAMPLESIZE_FILE ,p_sys -> i_link ,SDIAUDIO_CTL_AUDSAMP_SZ_16 ) < 0
call	118:13	119:54	6	WriteULSysfs
arg	118:27	118:51	7	SDIAUDIO_SAMPLESIZE_FILE
water	118:27	0:0	8	SDIAUDIO_SAMPLESIZE_FILE
arg	118:53	118:66	7	p_sys->i_link
water	118:53	0:0	8	p_sys
op	118:58	0:0	8	->
water	118:60	0:0	8	i_link
arg	119:27	119:54	7	SDIAUDIO_CTL_AUDSAMP_SZ_16
water	119:27	0:0	8	SDIAUDIO_CTL_AUDSAMP_SZ_16
op	119:56	0:0	6	<
water	119:58	0:0	6	0
stmts	120:8	124:8	5	
water	120:8	0:0	6	{
call	121:12	122:35	6	msg_Err
arg	121:21	121:28	7	p_demux
water	121:21	0:0	8	p_demux
arg	121:30	121:77	7	"couldn't write file "SDIAUDIO_SAMPLESIZE_FILE
water	121:30	0:0	8	"couldn't write file "
water	121:53	0:0	8	SDIAUDIO_SAMPLESIZE_FILE
arg	122:21	122:35	7	p_sys->i_link
water	122:21	0:0	8	p_sys
op	122:26	0:0	8	->
water	122:28	0:0	8	i_link
water	122:36	0:0	6	;
return	123:12	123:31	6	VLC_EGENERIC
water	123:19	0:0	7	VLC_EGENERIC
water	124:8	0:0	6	}
if	125:8	131:8	4	(WriteULSysfs (SDIAUDIO_CHANNELS_FILE ,p_sys -> i_link ,( p_sys -> i_max_channel + 1 ) * 2 ) < 0)
cond	125:13	126:62	5	WriteULSysfs (SDIAUDIO_CHANNELS_FILE ,p_sys -> i_link ,( p_sys -> i_max_channel + 1 ) * 2 ) < 0
call	125:13	126:58	6	WriteULSysfs
arg	125:27	125:49	7	SDIAUDIO_CHANNELS_FILE
water	125:27	0:0	8	SDIAUDIO_CHANNELS_FILE
arg	125:51	125:64	7	p_sys->i_link
water	125:51	0:0	8	p_sys
op	125:56	0:0	8	->
water	125:58	0:0	8	i_link
arg	126:27	126:58	7	(p_sys->i_max_channel+1)*2
water	126:27	0:0	8	(
water	126:28	0:0	8	p_sys
op	126:33	0:0	8	->
water	126:35	0:0	8	i_max_channel
op	126:49	0:0	8	+
water	126:51	0:0	8	1
water	126:52	0:0	8	)
op	126:54	0:0	8	*
water	126:56	0:0	8	2
op	126:60	0:0	6	<
water	126:62	0:0	6	0
stmts	127:8	131:8	5	
water	127:8	0:0	6	{
call	128:12	129:35	6	msg_Err
arg	128:21	128:28	7	p_demux
water	128:21	0:0	8	p_demux
arg	128:30	128:75	7	"couldn't write file "SDIAUDIO_CHANNELS_FILE
water	128:30	0:0	8	"couldn't write file "
water	128:53	0:0	8	SDIAUDIO_CHANNELS_FILE
arg	129:21	129:35	7	p_sys->i_link
water	129:21	0:0	8	p_sys
op	129:26	0:0	8	->
water	129:28	0:0	8	i_link
water	129:36	0:0	6	;
return	130:12	130:31	6	VLC_EGENERIC
water	130:19	0:0	7	VLC_EGENERIC
water	131:8	0:0	6	}
if	133:8	139:8	4	(( p_sys -> i_abuffers =ReadULSysfs (SDIAUDIO_BUFFERS_FILE ,p_sys -> i_link ) ) < 0)
cond	133:13	134:66	5	( p_sys -> i_abuffers =ReadULSysfs (SDIAUDIO_BUFFERS_FILE ,p_sys -> i_link ) ) < 0
water	133:13	0:0	6	(
water	133:14	0:0	6	p_sys
op	133:19	0:0	6	->
water	133:21	0:0	6	i_abuffers
op	133:32	0:0	6	=
call	133:34	134:61	6	ReadULSysfs
arg	133:47	133:68	7	SDIAUDIO_BUFFERS_FILE
water	133:47	0:0	8	SDIAUDIO_BUFFERS_FILE
arg	134:47	134:61	7	p_sys->i_link
water	134:47	0:0	8	p_sys
op	134:52	0:0	8	->
water	134:54	0:0	8	i_link
water	134:62	0:0	6	)
op	134:64	0:0	6	<
water	134:66	0:0	6	0
stmts	135:8	139:8	5	
water	135:8	0:0	6	{
call	136:12	137:35	6	msg_Err
arg	136:21	136:28	7	p_demux
water	136:21	0:0	8	p_demux
arg	136:30	136:73	7	"couldn't read file "SDIAUDIO_BUFFERS_FILE
water	136:30	0:0	8	"couldn't read file "
water	136:52	0:0	8	SDIAUDIO_BUFFERS_FILE
arg	137:21	137:35	7	p_sys->i_link
water	137:21	0:0	8	p_sys
op	137:26	0:0	8	->
water	137:28	0:0	8	i_link
water	137:36	0:0	6	;
return	138:12	138:31	6	VLC_EGENERIC
water	138:19	0:0	7	VLC_EGENERIC
water	139:8	0:0	6	}
water	140:8	0:0	4	p_sys
op	140:13	0:0	4	->
water	140:15	0:0	4	i_current_abuffer
op	140:33	0:0	4	=
water	140:35	0:0	4	0
water	140:36	0:0	4	;
if	142:8	148:8	4	(WriteULSysfs (SDIAUDIO_BUFSIZE_FILE ,p_sys -> i_link ,p_sys -> i_abuffer_size ) < 0)
cond	142:13	143:53	5	WriteULSysfs (SDIAUDIO_BUFSIZE_FILE ,p_sys -> i_link ,p_sys -> i_abuffer_size ) < 0
call	142:13	143:49	6	WriteULSysfs
arg	142:27	142:48	7	SDIAUDIO_BUFSIZE_FILE
water	142:27	0:0	8	SDIAUDIO_BUFSIZE_FILE
arg	142:50	142:63	7	p_sys->i_link
water	142:50	0:0	8	p_sys
op	142:55	0:0	8	->
water	142:57	0:0	8	i_link
arg	143:27	143:49	7	p_sys->i_abuffer_size
water	143:27	0:0	8	p_sys
op	143:32	0:0	8	->
water	143:34	0:0	8	i_abuffer_size
op	143:51	0:0	6	<
water	143:53	0:0	6	0
stmts	144:8	148:8	5	
water	144:8	0:0	6	{
call	145:12	146:35	6	msg_Err
arg	145:21	145:28	7	p_demux
water	145:21	0:0	8	p_demux
arg	145:30	145:74	7	"couldn't write file "SDIAUDIO_BUFSIZE_FILE
water	145:30	0:0	8	"couldn't write file "
water	145:53	0:0	8	SDIAUDIO_BUFSIZE_FILE
arg	146:21	146:35	7	p_sys->i_link
water	146:21	0:0	8	p_sys
op	146:26	0:0	8	->
water	146:28	0:0	8	i_link
water	146:36	0:0	6	;
return	147:12	147:31	6	VLC_EGENERIC
water	147:19	0:0	7	VLC_EGENERIC
water	148:8	0:0	6	}
if	149:8	153:8	4	(( p_sys -> i_afd =open (psz_adev ,O_RDONLY ) ) < 0)
cond	149:13	149:60	5	( p_sys -> i_afd =open (psz_adev ,O_RDONLY ) ) < 0
water	149:13	0:0	6	(
water	149:14	0:0	6	p_sys
op	149:19	0:0	6	->
water	149:21	0:0	6	i_afd
op	149:27	0:0	6	=
call	149:29	149:54	6	open
arg	149:35	149:43	7	psz_adev
water	149:35	0:0	8	psz_adev
arg	149:45	149:54	7	O_RDONLY
water	149:45	0:0	8	O_RDONLY
water	149:56	0:0	6	)
op	149:58	0:0	6	<
water	149:60	0:0	6	0
stmts	150:8	153:8	5	
water	150:8	0:0	6	{
call	151:12	151:66	6	msg_Err
arg	151:21	151:28	7	p_demux
water	151:21	0:0	8	p_demux
arg	151:30	151:55	7	"couldn't open device %s"
water	151:30	0:0	8	"couldn't open device %s"
arg	151:57	151:66	7	psz_adev
water	151:57	0:0	8	psz_adev
water	151:67	0:0	6	;
return	152:12	152:31	6	VLC_EGENERIC
water	152:19	0:0	7	VLC_EGENERIC
water	153:8	0:0	6	}
water	155:8	0:0	4	i_bufmemsize
op	155:21	0:0	4	=
water	155:23	0:0	4	(
water	155:24	0:0	4	(
water	155:25	0:0	4	p_sys
op	155:30	0:0	4	->
water	155:32	0:0	4	i_abuffer_size
op	155:47	0:0	4	+
water	155:49	0:0	4	i_page_size
op	155:61	0:0	4	-
water	155:63	0:0	4	1
water	155:64	0:0	4	)
op	155:66	0:0	4	/
water	155:68	0:0	4	i_page_size
water	155:79	0:0	4	)
op	156:25	0:0	4	*
water	156:27	0:0	4	i_page_size
water	156:38	0:0	4	;
water	157:8	0:0	4	p_sys
op	157:13	0:0	4	->
water	157:15	0:0	4	pp_abuffers
op	157:27	0:0	4	=
call	157:29	157:75	4	malloc
arg	157:37	157:75	5	p_sys->i_abuffers*sizeof(uint8_t*)
water	157:37	0:0	6	p_sys
op	157:42	0:0	6	->
water	157:44	0:0	6	i_abuffers
op	157:55	0:0	6	*
op	157:57	0:0	6	sizeof
water	157:63	0:0	6	(
water	157:64	0:0	6	uint8_t
op	157:72	0:0	6	*
water	157:73	0:0	6	)
water	157:76	0:0	4	;
if	158:8	159:29	4	(unlikely (! p_sys -> pp_abuffers ))
cond	158:12	158:42	5	unlikely (! p_sys -> pp_abuffers )
call	158:12	158:42	6	unlikely
arg	158:22	158:42	7	!p_sys->pp_abuffers
op	158:22	0:0	8	!
water	158:23	0:0	8	p_sys
op	158:28	0:0	8	->
water	158:30	0:0	8	pp_abuffers
stmts	159:12	159:29	5	
return	159:12	159:29	6	VLC_ENOMEM
water	159:19	0:0	7	VLC_ENOMEM
for	160:8	170:8	4	( unsigned int i = 0 ;i < p_sys -> i_abuffers;i ++)
forinit	0:0	160:32	5	 unsigned int i = 0 ;
decl	160:14	160:32	6	unsigned int	i
op	160:29	0:0	6	=
water	160:31	0:0	6	0
cond	160:34	160:45	5	i < p_sys -> i_abuffers
water	160:34	0:0	6	i
op	160:36	0:0	6	<
water	160:38	0:0	6	p_sys
op	160:43	0:0	6	->
water	160:45	0:0	6	i_abuffers
forexpr	160:57	160:58	5	i ++
water	160:57	0:0	6	i
op	160:58	0:0	6	++
stmts	161:8	170:8	5	
water	161:8	0:0	6	{
if	162:12	169:12	6	(( p_sys -> pp_abuffers [ i ] =mmap (NULL ,p_sys -> i_abuffer_size ,PROT_READ ,MAP_SHARED ,p_sys -> i_afd ,i * i_bufmemsize ) ) == MAP_FAILED)
cond	162:17	164:71	7	( p_sys -> pp_abuffers [ i ] =mmap (NULL ,p_sys -> i_abuffer_size ,PROT_READ ,MAP_SHARED ,p_sys -> i_afd ,i * i_bufmemsize ) ) == MAP_FAILED
water	162:17	0:0	8	(
water	162:18	0:0	8	p_sys
op	162:23	0:0	8	->
water	162:25	0:0	8	pp_abuffers
op	162:36	0:0	8	[
water	162:37	0:0	8	i
op	162:38	0:0	8	]
op	162:40	0:0	8	=
call	162:42	164:65	8	mmap
arg	162:48	162:52	9	NULL
water	162:48	0:0	10	NULL
arg	162:54	162:75	9	p_sys->i_abuffer_size
water	162:54	0:0	10	p_sys
op	162:59	0:0	10	->
water	162:61	0:0	10	i_abuffer_size
arg	163:48	163:57	9	PROT_READ
water	163:48	0:0	10	PROT_READ
arg	163:59	163:69	9	MAP_SHARED
water	163:59	0:0	10	MAP_SHARED
arg	163:71	163:83	9	p_sys->i_afd
water	163:71	0:0	10	p_sys
op	163:76	0:0	10	->
water	163:78	0:0	10	i_afd
arg	164:48	164:65	9	i*i_bufmemsize
water	164:48	0:0	10	i
op	164:50	0:0	10	*
water	164:52	0:0	10	i_bufmemsize
water	164:66	0:0	8	)
op	164:68	0:0	8	==
water	164:71	0:0	8	MAP_FAILED
stmts	165:12	169:12	7	
water	165:12	0:0	8	{
call	166:16	167:47	8	msg_Err
arg	166:25	166:32	9	p_demux
water	166:25	0:0	10	p_demux
arg	166:34	166:57	9	"couldn't mmap(%d): %s"
water	166:34	0:0	10	"couldn't mmap(%d): %s"
arg	166:59	166:60	9	i
water	166:59	0:0	10	i
arg	167:25	167:47	9	vlc_strerror_c(errno)
call	167:25	167:45	10	vlc_strerror_c
arg	167:40	167:45	11	errno
water	167:40	0:0	12	errno
water	167:48	0:0	8	;
return	168:16	168:35	8	VLC_EGENERIC
water	168:23	0:0	9	VLC_EGENERIC
water	169:12	0:0	8	}
water	170:8	0:0	6	}
water	172:4	0:0	4	}
if	174:4	180:4	2	(WriteULSysfs (SDIVIDEO_MODE_FILE ,p_sys -> i_link ,SDIVIDEO_CTL_MODE_UYVY ) < 0)
cond	174:9	175:50	3	WriteULSysfs (SDIVIDEO_MODE_FILE ,p_sys -> i_link ,SDIVIDEO_CTL_MODE_UYVY ) < 0
call	174:9	175:46	4	WriteULSysfs
arg	174:23	174:41	5	SDIVIDEO_MODE_FILE
water	174:23	0:0	6	SDIVIDEO_MODE_FILE
arg	174:43	174:56	5	p_sys->i_link
water	174:43	0:0	6	p_sys
op	174:48	0:0	6	->
water	174:50	0:0	6	i_link
arg	175:23	175:46	5	SDIVIDEO_CTL_MODE_UYVY
water	175:23	0:0	6	SDIVIDEO_CTL_MODE_UYVY
op	175:48	0:0	4	<
water	175:50	0:0	4	0
stmts	176:4	180:4	3	
water	176:4	0:0	4	{
call	177:8	178:31	4	msg_Err
arg	177:17	177:24	5	p_demux
water	177:17	0:0	6	p_demux
arg	177:26	177:67	5	"couldn't write file "SDIVIDEO_MODE_FILE
water	177:26	0:0	6	"couldn't write file "
water	177:49	0:0	6	SDIVIDEO_MODE_FILE
arg	178:17	178:31	5	p_sys->i_link
water	178:17	0:0	6	p_sys
op	178:22	0:0	6	->
water	178:24	0:0	6	i_link
water	178:32	0:0	4	;
return	179:8	179:27	4	VLC_EGENERIC
water	179:15	0:0	5	VLC_EGENERIC
water	180:4	0:0	4	}
if	181:4	187:4	2	(WriteULSysfs (SDIVIDEO_BUFFERS_FILE ,p_sys -> i_link ,NB_VBUFFERS ) < 0)
cond	181:9	182:39	3	WriteULSysfs (SDIVIDEO_BUFFERS_FILE ,p_sys -> i_link ,NB_VBUFFERS ) < 0
call	181:9	182:35	4	WriteULSysfs
arg	181:23	181:44	5	SDIVIDEO_BUFFERS_FILE
water	181:23	0:0	6	SDIVIDEO_BUFFERS_FILE
arg	181:46	181:59	5	p_sys->i_link
water	181:46	0:0	6	p_sys
op	181:51	0:0	6	->
water	181:53	0:0	6	i_link
arg	182:23	182:35	5	NB_VBUFFERS
water	182:23	0:0	6	NB_VBUFFERS
op	182:37	0:0	4	<
water	182:39	0:0	4	0
stmts	183:4	187:4	3	
water	183:4	0:0	4	{
call	184:8	185:31	4	msg_Err
arg	184:17	184:24	5	p_demux
water	184:17	0:0	6	p_demux
arg	184:26	184:70	5	"couldn't write file "SDIVIDEO_BUFFERS_FILE
water	184:26	0:0	6	"couldn't write file "
water	184:49	0:0	6	SDIVIDEO_BUFFERS_FILE
arg	185:17	185:31	5	p_sys->i_link
water	185:17	0:0	6	p_sys
op	185:22	0:0	6	->
water	185:24	0:0	6	i_link
water	185:32	0:0	4	;
return	186:8	186:27	4	VLC_EGENERIC
water	186:15	0:0	5	VLC_EGENERIC
water	187:4	0:0	4	}
water	189:4	0:0	2	p_sys
op	189:9	0:0	2	->
water	189:11	0:0	2	i_vbuffers
op	189:22	0:0	2	=
water	189:24	0:0	2	NB_VBUFFERS
water	189:35	0:0	2	;
if	191:4	197:4	2	(WriteULSysfs (SDIVIDEO_BUFSIZE_FILE ,p_sys -> i_link ,p_sys -> i_vbuffer_size ) < 0)
cond	191:9	192:49	3	WriteULSysfs (SDIVIDEO_BUFSIZE_FILE ,p_sys -> i_link ,p_sys -> i_vbuffer_size ) < 0
call	191:9	192:45	4	WriteULSysfs
arg	191:23	191:44	5	SDIVIDEO_BUFSIZE_FILE
water	191:23	0:0	6	SDIVIDEO_BUFSIZE_FILE
arg	191:46	191:59	5	p_sys->i_link
water	191:46	0:0	6	p_sys
op	191:51	0:0	6	->
water	191:53	0:0	6	i_link
arg	192:23	192:45	5	p_sys->i_vbuffer_size
water	192:23	0:0	6	p_sys
op	192:28	0:0	6	->
water	192:30	0:0	6	i_vbuffer_size
op	192:47	0:0	4	<
water	192:49	0:0	4	0
stmts	193:4	197:4	3	
water	193:4	0:0	4	{
call	194:8	195:31	4	msg_Err
arg	194:17	194:24	5	p_demux
water	194:17	0:0	6	p_demux
arg	194:26	194:70	5	"couldn't write file "SDIVIDEO_BUFSIZE_FILE
water	194:26	0:0	6	"couldn't write file "
water	194:49	0:0	6	SDIVIDEO_BUFSIZE_FILE
arg	195:17	195:31	5	p_sys->i_link
water	195:17	0:0	6	p_sys
op	195:22	0:0	6	->
water	195:24	0:0	6	i_link
water	195:32	0:0	4	;
return	196:8	196:27	4	VLC_EGENERIC
water	196:15	0:0	5	VLC_EGENERIC
water	197:4	0:0	4	}
if	198:4	202:4	2	(( p_sys -> i_vfd =open (psz_vdev ,O_RDONLY ) ) < 0)
cond	198:9	198:56	3	( p_sys -> i_vfd =open (psz_vdev ,O_RDONLY ) ) < 0
water	198:9	0:0	4	(
water	198:10	0:0	4	p_sys
op	198:15	0:0	4	->
water	198:17	0:0	4	i_vfd
op	198:23	0:0	4	=
call	198:25	198:50	4	open
arg	198:31	198:39	5	psz_vdev
water	198:31	0:0	6	psz_vdev
arg	198:41	198:50	5	O_RDONLY
water	198:41	0:0	6	O_RDONLY
water	198:52	0:0	4	)
op	198:54	0:0	4	<
water	198:56	0:0	4	0
stmts	199:4	202:4	3	
water	199:4	0:0	4	{
call	200:8	200:62	4	msg_Err
arg	200:17	200:24	5	p_demux
water	200:17	0:0	6	p_demux
arg	200:26	200:51	5	"couldn't open device %s"
water	200:26	0:0	6	"couldn't open device %s"
arg	200:53	200:62	5	psz_vdev
water	200:53	0:0	6	psz_vdev
water	200:63	0:0	4	;
return	201:8	201:27	4	VLC_EGENERIC
water	201:15	0:0	5	VLC_EGENERIC
water	202:4	0:0	4	}
water	204:4	0:0	2	p_sys
op	204:9	0:0	2	->
water	204:11	0:0	2	i_current_vbuffer
op	204:29	0:0	2	=
water	204:31	0:0	2	0
water	204:32	0:0	2	;
water	205:4	0:0	2	i_bufmemsize
op	205:17	0:0	2	=
water	205:19	0:0	2	(
water	205:20	0:0	2	(
water	205:21	0:0	2	p_sys
op	205:26	0:0	2	->
water	205:28	0:0	2	i_vbuffer_size
op	205:43	0:0	2	+
water	205:45	0:0	2	i_page_size
op	205:57	0:0	2	-
water	205:59	0:0	2	1
water	205:60	0:0	2	)
op	205:62	0:0	2	/
water	205:64	0:0	2	i_page_size
water	205:75	0:0	2	)
op	206:21	0:0	2	*
water	206:23	0:0	2	i_page_size
water	206:34	0:0	2	;
water	207:4	0:0	2	p_sys
op	207:9	0:0	2	->
water	207:11	0:0	2	pp_vbuffers
op	207:23	0:0	2	=
call	207:25	207:71	2	malloc
arg	207:33	207:71	3	p_sys->i_vbuffers*sizeof(uint8_t*)
water	207:33	0:0	4	p_sys
op	207:38	0:0	4	->
water	207:40	0:0	4	i_vbuffers
op	207:51	0:0	4	*
op	207:53	0:0	4	sizeof
water	207:59	0:0	4	(
water	207:60	0:0	4	uint8_t
op	207:68	0:0	4	*
water	207:69	0:0	4	)
water	207:72	0:0	2	;
if	208:4	209:25	2	(unlikely (! p_sys -> pp_vbuffers ))
cond	208:8	208:38	3	unlikely (! p_sys -> pp_vbuffers )
call	208:8	208:38	4	unlikely
arg	208:18	208:38	5	!p_sys->pp_vbuffers
op	208:18	0:0	6	!
water	208:19	0:0	6	p_sys
op	208:24	0:0	6	->
water	208:26	0:0	6	pp_vbuffers
stmts	209:8	209:25	3	
return	209:8	209:25	4	VLC_ENOMEM
water	209:15	0:0	5	VLC_ENOMEM
for	210:4	220:4	2	( unsigned int i = 0 ;i < p_sys -> i_vbuffers;i ++)
forinit	0:0	210:28	3	 unsigned int i = 0 ;
decl	210:10	210:28	4	unsigned int	i
op	210:25	0:0	4	=
water	210:27	0:0	4	0
cond	210:30	210:41	3	i < p_sys -> i_vbuffers
water	210:30	0:0	4	i
op	210:32	0:0	4	<
water	210:34	0:0	4	p_sys
op	210:39	0:0	4	->
water	210:41	0:0	4	i_vbuffers
forexpr	210:53	210:54	3	i ++
water	210:53	0:0	4	i
op	210:54	0:0	4	++
stmts	211:4	220:4	3	
water	211:4	0:0	4	{
if	212:8	219:8	4	(( p_sys -> pp_vbuffers [ i ] =mmap (NULL ,p_sys -> i_vbuffer_size ,PROT_READ ,MAP_SHARED ,p_sys -> i_vfd ,i * i_bufmemsize ) ) == MAP_FAILED)
cond	212:13	214:67	5	( p_sys -> pp_vbuffers [ i ] =mmap (NULL ,p_sys -> i_vbuffer_size ,PROT_READ ,MAP_SHARED ,p_sys -> i_vfd ,i * i_bufmemsize ) ) == MAP_FAILED
water	212:13	0:0	6	(
water	212:14	0:0	6	p_sys
op	212:19	0:0	6	->
water	212:21	0:0	6	pp_vbuffers
op	212:32	0:0	6	[
water	212:33	0:0	6	i
op	212:34	0:0	6	]
op	212:36	0:0	6	=
call	212:38	214:61	6	mmap
arg	212:44	212:48	7	NULL
water	212:44	0:0	8	NULL
arg	212:50	212:71	7	p_sys->i_vbuffer_size
water	212:50	0:0	8	p_sys
op	212:55	0:0	8	->
water	212:57	0:0	8	i_vbuffer_size
arg	213:44	213:53	7	PROT_READ
water	213:44	0:0	8	PROT_READ
arg	213:55	213:65	7	MAP_SHARED
water	213:55	0:0	8	MAP_SHARED
arg	213:67	213:79	7	p_sys->i_vfd
water	213:67	0:0	8	p_sys
op	213:72	0:0	8	->
water	213:74	0:0	8	i_vfd
arg	214:44	214:61	7	i*i_bufmemsize
water	214:44	0:0	8	i
op	214:46	0:0	8	*
water	214:48	0:0	8	i_bufmemsize
water	214:62	0:0	6	)
op	214:64	0:0	6	==
water	214:67	0:0	6	MAP_FAILED
stmts	215:8	219:8	5	
water	215:8	0:0	6	{
call	216:12	217:43	6	msg_Err
arg	216:21	216:28	7	p_demux
water	216:21	0:0	8	p_demux
arg	216:30	216:53	7	"couldn't mmap(%d): %s"
water	216:30	0:0	8	"couldn't mmap(%d): %s"
arg	216:55	216:56	7	i
water	216:55	0:0	8	i
arg	217:21	217:43	7	vlc_strerror_c(errno)
call	217:21	217:41	8	vlc_strerror_c
arg	217:36	217:41	9	errno
water	217:36	0:0	10	errno
water	217:44	0:0	6	;
return	218:12	218:31	6	VLC_EGENERIC
water	218:19	0:0	7	VLC_EGENERIC
water	219:8	0:0	6	}
water	220:4	0:0	4	}
return	222:4	222:22	2	VLC_SUCCESS
water	222:11	0:0	3	VLC_SUCCESS
