func	2:0	139:0	0	static picture_t *	DecodeBlock
params	2:29	0:0	1	
param	2:31	2:47	2	decoder_t *	p_dec
param	2:49	2:68	2	block_t * *	pp_block
stmnts	0:0	138:15	1	
decl	4:4	4:39	2	decoder_sys_t	*p_sys
op	4:25	0:0	2	=
water	4:27	0:0	2	p_dec
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:20	2	block_t	*p_block
decl	6:4	6:27	2	picture_t	*p_pic
op	6:21	0:0	2	=
water	6:23	0:0	2	NULL
decl	7:4	7:26	2	SDL_Surface	*p_surface
decl	8:4	8:19	2	SDL_RWops	*p_rw
if	9:4	9:59	2	(pp_block == NULL || * pp_block == NULL)
cond	9:8	9:41	3	pp_block == NULL || * pp_block == NULL
water	9:8	0:0	4	pp_block
op	9:17	0:0	4	==
water	9:20	0:0	4	NULL
op	9:25	0:0	4	||
op	9:28	0:0	4	*
water	9:29	0:0	4	pp_block
op	9:38	0:0	4	==
water	9:41	0:0	4	NULL
stmts	9:48	9:59	3	
return	9:48	9:59	4	NULL
water	9:55	0:0	5	NULL
water	10:4	0:0	2	p_block
op	10:12	0:0	2	=
op	10:14	0:0	2	*
water	10:15	0:0	2	pp_block
water	10:23	0:0	2	;
if	11:4	15:4	2	(p_block -> i_flags & BLOCK_FLAG_DISCONTINUITY)
cond	11:8	11:27	3	p_block -> i_flags & BLOCK_FLAG_DISCONTINUITY
water	11:8	0:0	4	p_block
op	11:15	0:0	4	->
water	11:17	0:0	4	i_flags
op	11:25	0:0	4	&
water	11:27	0:0	4	BLOCK_FLAG_DISCONTINUITY
stmts	12:4	15:4	3	
water	12:4	0:0	4	{
call	13:8	13:31	4	block_Release
arg	13:23	13:31	5	p_block
water	13:23	0:0	6	p_block
water	13:32	0:0	4	;
op	13:34	0:0	4	*
water	13:35	0:0	4	pp_block
op	13:44	0:0	4	=
water	13:46	0:0	4	NULL
water	13:50	0:0	4	;
return	14:8	14:19	4	NULL
water	14:15	0:0	5	NULL
water	15:4	0:0	4	}
water	16:4	0:0	2	p_rw
op	16:9	0:0	2	=
call	16:11	16:68	2	SDL_RWFromConstMem
arg	16:31	16:48	3	p_block->p_buffer
water	16:31	0:0	4	p_block
op	16:38	0:0	4	->
water	16:40	0:0	4	p_buffer
arg	16:50	16:68	3	p_block->i_buffer
water	16:50	0:0	4	p_block
op	16:57	0:0	4	->
water	16:59	0:0	4	i_buffer
water	16:69	0:0	2	;
water	18:4	0:0	2	p_surface
op	18:14	0:0	2	=
call	18:16	18:70	2	IMG_LoadTyped_RW
arg	18:34	18:38	3	p_rw
water	18:34	0:0	4	p_rw
arg	18:40	18:41	3	1
water	18:40	0:0	4	1
arg	18:43	18:70	3	(char*)p_sys->psz_sdl_type
water	18:43	0:0	4	(
water	18:44	0:0	4	char
op	18:48	0:0	4	*
water	18:49	0:0	4	)
water	18:50	0:0	4	p_sys
op	18:55	0:0	4	->
water	18:57	0:0	4	psz_sdl_type
water	18:71	0:0	2	;
if	19:4	24:4	2	(p_surface == NULL)
cond	19:9	19:22	3	p_surface == NULL
water	19:9	0:0	4	p_surface
op	19:19	0:0	4	==
water	19:22	0:0	4	NULL
stmts	20:4	24:4	3	
water	20:4	0:0	4	{
call	21:8	22:33	4	msg_Warn
arg	21:18	21:23	5	p_dec
water	21:18	0:0	6	p_dec
arg	21:25	21:65	5	"SDL_image couldn't load the image (%s)"
water	21:25	0:0	6	"SDL_image couldn't load the image (%s)"
arg	22:18	22:33	5	IMG_GetError()
call	22:18	22:31	6	IMG_GetError
water	22:34	0:0	4	;
goto	23:8	23:18	4	error
water	23:13	0:0	5	error
water	24:4	0:0	4	}
switch	25:4	41:4	2	(p_surface -> format -> BitsPerPixel)
cond	25:13	25:32	3	p_surface -> format -> BitsPerPixel
water	25:13	0:0	4	p_surface
op	25:22	0:0	4	->
water	25:24	0:0	4	format
op	25:30	0:0	4	->
water	25:32	0:0	4	BitsPerPixel
stmts	26:4	41:4	3	
water	26:4	0:0	4	{
label	27:4	27:11	4	case 16 :
water	28:8	0:0	4	p_dec
op	28:13	0:0	4	->
water	28:15	0:0	4	fmt_out
op	28:22	0:0	4	.
water	28:23	0:0	4	i_codec
op	28:31	0:0	4	=
water	28:33	0:0	4	VLC_CODEC_RGB16
water	28:48	0:0	4	;
break	29:8	29:13	4	
label	30:4	30:10	4	case 8 :
label	31:4	31:11	4	case 24 :
water	32:8	0:0	4	p_dec
op	32:13	0:0	4	->
water	32:15	0:0	4	fmt_out
op	32:22	0:0	4	.
water	32:23	0:0	4	i_codec
op	32:31	0:0	4	=
water	32:33	0:0	4	VLC_CODEC_RGB24
water	32:48	0:0	4	;
break	33:8	33:13	4	
label	34:4	34:11	4	case 32 :
water	35:8	0:0	4	p_dec
op	35:13	0:0	4	->
water	35:15	0:0	4	fmt_out
op	35:22	0:0	4	.
water	35:23	0:0	4	i_codec
op	35:31	0:0	4	=
water	35:33	0:0	4	VLC_CODEC_RGB32
water	35:48	0:0	4	;
break	36:8	36:13	4	
label	37:4	37:11	4	default :
call	38:8	39:50	4	msg_Warn
arg	38:18	38:23	5	p_dec
water	38:18	0:0	6	p_dec
arg	38:25	38:57	5	"unknown bits/pixel format (%d)"
water	38:25	0:0	6	"unknown bits/pixel format (%d)"
arg	39:18	39:50	5	p_surface->format->BitsPerPixel
water	39:18	0:0	6	p_surface
op	39:27	0:0	6	->
water	39:29	0:0	6	format
op	39:35	0:0	6	->
water	39:37	0:0	6	BitsPerPixel
water	39:51	0:0	4	;
goto	40:8	40:18	4	error
water	40:13	0:0	5	error
water	41:4	0:0	4	}
water	42:4	0:0	2	p_dec
op	42:9	0:0	2	->
water	42:11	0:0	2	fmt_out
op	42:18	0:0	2	.
water	42:19	0:0	2	video
op	42:24	0:0	2	.
water	42:25	0:0	2	i_width
op	42:33	0:0	2	=
water	42:35	0:0	2	p_surface
op	42:44	0:0	2	->
water	42:46	0:0	2	w
water	42:47	0:0	2	;
water	43:4	0:0	2	p_dec
op	43:9	0:0	2	->
water	43:11	0:0	2	fmt_out
op	43:18	0:0	2	.
water	43:19	0:0	2	video
op	43:24	0:0	2	.
water	43:25	0:0	2	i_height
op	43:34	0:0	2	=
water	43:36	0:0	2	p_surface
op	43:45	0:0	2	->
water	43:47	0:0	2	h
water	43:48	0:0	2	;
water	44:4	0:0	2	p_dec
op	44:9	0:0	2	->
water	44:11	0:0	2	fmt_out
op	44:18	0:0	2	.
water	44:19	0:0	2	video
op	44:24	0:0	2	.
water	44:25	0:0	2	i_sar_num
op	44:35	0:0	2	=
water	44:37	0:0	2	1
water	44:38	0:0	2	;
water	45:4	0:0	2	p_dec
op	45:9	0:0	2	->
water	45:11	0:0	2	fmt_out
op	45:18	0:0	2	.
water	45:19	0:0	2	video
op	45:24	0:0	2	.
water	45:25	0:0	2	i_sar_den
op	45:35	0:0	2	=
water	45:37	0:0	2	1
water	45:38	0:0	2	;
water	47:4	0:0	2	p_pic
op	47:10	0:0	2	=
call	47:12	47:38	2	decoder_NewPicture
arg	47:32	47:38	3	p_dec
water	47:32	0:0	4	p_dec
water	47:39	0:0	2	;
if	48:4	48:35	2	(p_pic == NULL)
cond	48:9	48:18	3	p_pic == NULL
water	48:9	0:0	4	p_pic
op	48:15	0:0	4	==
water	48:18	0:0	4	NULL
stmts	48:25	48:35	3	
goto	48:25	48:35	4	error
water	48:30	0:0	5	error
switch	49:4	129:4	2	(p_surface -> format -> BitsPerPixel)
cond	49:13	49:32	3	p_surface -> format -> BitsPerPixel
water	49:13	0:0	4	p_surface
op	49:22	0:0	4	->
water	49:24	0:0	4	format
op	49:30	0:0	4	->
water	49:32	0:0	4	BitsPerPixel
stmts	50:4	129:4	3	
water	50:4	0:0	4	{
label	51:8	51:14	4	case 8 :
water	52:8	0:0	4	{
decl	53:12	53:20	4	int	i
water	53:17	0:0	4	,
decl	53:12	53:20	4	int	j
decl	54:12	54:34	4	uint8_t	*p_src
water	54:26	0:0	4	,
decl	54:12	54:34	4	uint8_t	*p_dst
decl	55:12	55:27	4	uint8_t	r
water	55:21	0:0	4	,
decl	55:12	55:27	4	uint8_t	g
water	55:24	0:0	4	,
decl	55:12	55:27	4	uint8_t	b
for	56:12	68:12	4	(i = 0 ;i < p_surface -> h;i ++)
forinit	56:18	56:23	5	i = 0 ;
water	56:18	0:0	6	i
op	56:20	0:0	6	=
water	56:22	0:0	6	0
water	56:23	0:0	6	;
cond	56:25	56:40	5	i < p_surface -> h
water	56:25	0:0	6	i
op	56:27	0:0	6	<
water	56:29	0:0	6	p_surface
op	56:38	0:0	6	->
water	56:40	0:0	6	h
forexpr	56:43	56:44	5	i ++
water	56:43	0:0	6	i
op	56:44	0:0	6	++
stmts	57:12	68:12	5	
water	57:12	0:0	6	{
water	58:16	0:0	6	p_src
op	58:22	0:0	6	=
water	58:24	0:0	6	(
water	58:25	0:0	6	uint8_t
op	58:32	0:0	6	*
water	58:33	0:0	6	)
water	58:34	0:0	6	p_surface
op	58:43	0:0	6	->
water	58:45	0:0	6	pixels
op	58:52	0:0	6	+
water	58:54	0:0	6	i
op	58:56	0:0	6	*
water	58:58	0:0	6	p_surface
op	58:67	0:0	6	->
water	58:69	0:0	6	pitch
water	58:74	0:0	6	;
water	59:16	0:0	6	p_dst
op	59:22	0:0	6	=
water	59:24	0:0	6	p_pic
op	59:29	0:0	6	->
water	59:31	0:0	6	p
op	59:32	0:0	6	[
water	59:33	0:0	6	0
op	59:34	0:0	6	]
op	59:35	0:0	6	.
water	59:36	0:0	6	p_pixels
op	59:45	0:0	6	+
water	59:47	0:0	6	i
op	59:49	0:0	6	*
water	59:51	0:0	6	p_pic
op	59:56	0:0	6	->
water	59:58	0:0	6	p
op	59:59	0:0	6	[
water	59:60	0:0	6	0
op	59:61	0:0	6	]
op	59:62	0:0	6	.
water	59:63	0:0	6	i_pitch
water	59:70	0:0	6	;
for	60:16	67:16	6	(j = 0 ;j < p_surface -> w;j ++)
forinit	60:22	60:27	7	j = 0 ;
water	60:22	0:0	8	j
op	60:24	0:0	8	=
water	60:26	0:0	8	0
water	60:27	0:0	8	;
cond	60:29	60:44	7	j < p_surface -> w
water	60:29	0:0	8	j
op	60:31	0:0	8	<
water	60:33	0:0	8	p_surface
op	60:42	0:0	8	->
water	60:44	0:0	8	w
forexpr	60:47	60:48	7	j ++
water	60:47	0:0	8	j
op	60:48	0:0	8	++
stmts	61:16	67:16	7	
water	61:16	0:0	8	{
call	62:20	63:43	8	SDL_GetRGB
arg	62:32	62:42	9	*(p_src++)
op	62:32	0:0	10	*
water	62:33	0:0	10	(
water	62:34	0:0	10	p_src
op	62:39	0:0	10	++
water	62:41	0:0	10	)
arg	62:44	62:61	9	p_surface->format
water	62:44	0:0	10	p_surface
op	62:53	0:0	10	->
water	62:55	0:0	10	format
arg	63:32	63:34	9	&r
op	63:32	0:0	10	&
water	63:33	0:0	10	r
arg	63:36	63:38	9	&g
op	63:36	0:0	10	&
water	63:37	0:0	10	g
arg	63:40	63:43	9	&b
op	63:40	0:0	10	&
water	63:41	0:0	10	b
water	63:44	0:0	8	;
op	64:20	0:0	8	*
water	64:21	0:0	8	(
water	64:22	0:0	8	p_dst
op	64:27	0:0	8	++
water	64:29	0:0	8	)
op	64:31	0:0	8	=
water	64:33	0:0	8	r
water	64:34	0:0	8	;
op	65:20	0:0	8	*
water	65:21	0:0	8	(
water	65:22	0:0	8	p_dst
op	65:27	0:0	8	++
water	65:29	0:0	8	)
op	65:31	0:0	8	=
water	65:33	0:0	8	g
water	65:34	0:0	8	;
op	66:20	0:0	8	*
water	66:21	0:0	8	(
water	66:22	0:0	8	p_dst
op	66:27	0:0	8	++
water	66:29	0:0	8	)
op	66:31	0:0	8	=
water	66:33	0:0	8	b
water	66:34	0:0	8	;
water	67:16	0:0	8	}
water	68:12	0:0	6	}
break	69:12	69:17	4	
water	70:8	0:0	4	}
label	71:8	71:15	4	case 16 :
water	72:8	0:0	4	{
decl	73:12	73:17	4	int	i
decl	74:12	74:46	4	uint8_t	*p_src
op	74:27	0:0	4	=
water	74:29	0:0	4	p_surface
op	74:38	0:0	4	->
water	74:40	0:0	4	pixels
decl	75:12	75:49	4	uint8_t	*p_dst
op	75:27	0:0	4	=
water	75:29	0:0	4	p_pic
op	75:34	0:0	4	->
water	75:36	0:0	4	p
op	75:37	0:0	4	[
water	75:38	0:0	4	0
op	75:39	0:0	4	]
op	75:40	0:0	4	.
water	75:41	0:0	4	p_pixels
decl	76:12	77:54	4	int	i_pitch
op	76:24	0:0	4	=
water	76:26	0:0	4	p_pic
op	76:31	0:0	4	->
water	76:33	0:0	4	p
op	76:34	0:0	4	[
water	76:35	0:0	4	0
op	76:36	0:0	4	]
op	76:37	0:0	4	.
water	76:38	0:0	4	i_pitch
op	76:46	0:0	4	<
water	76:48	0:0	4	p_surface
op	76:57	0:0	4	->
water	76:59	0:0	4	pitch
water	76:65	0:0	4	?
water	77:16	0:0	4	p_pic
op	77:21	0:0	4	->
water	77:23	0:0	4	p
op	77:24	0:0	4	[
water	77:25	0:0	4	0
op	77:26	0:0	4	]
op	77:27	0:0	4	.
water	77:28	0:0	4	i_pitch
water	77:36	0:0	4	:
water	77:38	0:0	4	p_surface
op	77:47	0:0	4	->
water	77:49	0:0	4	pitch
for	78:12	83:12	4	(i = 0 ;i < p_surface -> h;i ++)
forinit	78:18	78:23	5	i = 0 ;
water	78:18	0:0	6	i
op	78:20	0:0	6	=
water	78:22	0:0	6	0
water	78:23	0:0	6	;
cond	78:25	78:40	5	i < p_surface -> h
water	78:25	0:0	6	i
op	78:27	0:0	6	<
water	78:29	0:0	6	p_surface
op	78:38	0:0	6	->
water	78:40	0:0	6	h
forexpr	78:43	78:44	5	i ++
water	78:43	0:0	6	i
op	78:44	0:0	6	++
stmts	79:12	83:12	5	
water	79:12	0:0	6	{
call	80:16	80:46	6	memcpy
arg	80:24	80:29	7	p_dst
water	80:24	0:0	8	p_dst
arg	80:31	80:36	7	p_src
water	80:31	0:0	8	p_src
arg	80:38	80:46	7	i_pitch
water	80:38	0:0	8	i_pitch
water	80:47	0:0	6	;
water	81:16	0:0	6	p_src
op	81:22	0:0	6	+=
water	81:25	0:0	6	p_surface
op	81:34	0:0	6	->
water	81:36	0:0	6	pitch
water	81:41	0:0	6	;
water	82:16	0:0	6	p_dst
op	82:22	0:0	6	+=
water	82:25	0:0	6	p_pic
op	82:30	0:0	6	->
water	82:32	0:0	6	p
op	82:33	0:0	6	[
water	82:34	0:0	6	0
op	82:35	0:0	6	]
op	82:36	0:0	6	.
water	82:37	0:0	6	i_pitch
water	82:44	0:0	6	;
water	83:12	0:0	6	}
break	84:12	84:17	4	
water	85:8	0:0	4	}
label	86:8	86:15	4	case 24 :
water	87:8	0:0	4	{
decl	88:12	88:20	4	int	i
water	88:17	0:0	4	,
decl	88:12	88:20	4	int	j
decl	89:12	89:34	4	uint8_t	*p_src
water	89:26	0:0	4	,
decl	89:12	89:34	4	uint8_t	*p_dst
decl	90:12	90:27	4	uint8_t	r
water	90:21	0:0	4	,
decl	90:12	90:27	4	uint8_t	g
water	90:24	0:0	4	,
decl	90:12	90:27	4	uint8_t	b
for	91:12	104:12	4	(i = 0 ;i < p_surface -> h;i ++)
forinit	91:18	91:23	5	i = 0 ;
water	91:18	0:0	6	i
op	91:20	0:0	6	=
water	91:22	0:0	6	0
water	91:23	0:0	6	;
cond	91:25	91:40	5	i < p_surface -> h
water	91:25	0:0	6	i
op	91:27	0:0	6	<
water	91:29	0:0	6	p_surface
op	91:38	0:0	6	->
water	91:40	0:0	6	h
forexpr	91:43	91:44	5	i ++
water	91:43	0:0	6	i
op	91:44	0:0	6	++
stmts	92:12	104:12	5	
water	92:12	0:0	6	{
water	93:16	0:0	6	p_src
op	93:22	0:0	6	=
water	93:24	0:0	6	(
water	93:25	0:0	6	uint8_t
op	93:32	0:0	6	*
water	93:33	0:0	6	)
water	93:34	0:0	6	p_surface
op	93:43	0:0	6	->
water	93:45	0:0	6	pixels
op	93:52	0:0	6	+
water	93:54	0:0	6	i
op	93:56	0:0	6	*
water	93:58	0:0	6	p_surface
op	93:67	0:0	6	->
water	93:69	0:0	6	pitch
water	93:74	0:0	6	;
water	94:16	0:0	6	p_dst
op	94:22	0:0	6	=
water	94:24	0:0	6	p_pic
op	94:29	0:0	6	->
water	94:31	0:0	6	p
op	94:32	0:0	6	[
water	94:33	0:0	6	0
op	94:34	0:0	6	]
op	94:35	0:0	6	.
water	94:36	0:0	6	p_pixels
op	94:45	0:0	6	+
water	94:47	0:0	6	i
op	94:49	0:0	6	*
water	94:51	0:0	6	p_pic
op	94:56	0:0	6	->
water	94:58	0:0	6	p
op	94:59	0:0	6	[
water	94:60	0:0	6	0
op	94:61	0:0	6	]
op	94:62	0:0	6	.
water	94:63	0:0	6	i_pitch
water	94:70	0:0	6	;
for	95:16	103:16	6	(j = 0 ;j < p_surface -> w;j ++)
forinit	95:22	95:27	7	j = 0 ;
water	95:22	0:0	8	j
op	95:24	0:0	8	=
water	95:26	0:0	8	0
water	95:27	0:0	8	;
cond	95:29	95:44	7	j < p_surface -> w
water	95:29	0:0	8	j
op	95:31	0:0	8	<
water	95:33	0:0	8	p_surface
op	95:42	0:0	8	->
water	95:44	0:0	8	w
forexpr	95:47	95:48	7	j ++
water	95:47	0:0	8	j
op	95:48	0:0	8	++
stmts	96:16	103:16	7	
water	96:16	0:0	8	{
call	97:20	98:43	8	SDL_GetRGB
arg	97:32	97:49	9	*(uint32_t*)p_src
op	97:32	0:0	10	*
water	97:33	0:0	10	(
water	97:34	0:0	10	uint32_t
op	97:42	0:0	10	*
water	97:43	0:0	10	)
water	97:44	0:0	10	p_src
arg	97:51	97:68	9	p_surface->format
water	97:51	0:0	10	p_surface
op	97:60	0:0	10	->
water	97:62	0:0	10	format
arg	98:32	98:34	9	&r
op	98:32	0:0	10	&
water	98:33	0:0	10	r
arg	98:36	98:38	9	&g
op	98:36	0:0	10	&
water	98:37	0:0	10	g
arg	98:40	98:43	9	&b
op	98:40	0:0	10	&
water	98:41	0:0	10	b
water	98:44	0:0	8	;
op	99:20	0:0	8	*
water	99:21	0:0	8	(
water	99:22	0:0	8	p_dst
op	99:27	0:0	8	++
water	99:29	0:0	8	)
op	99:31	0:0	8	=
water	99:33	0:0	8	r
water	99:34	0:0	8	;
op	100:20	0:0	8	*
water	100:21	0:0	8	(
water	100:22	0:0	8	p_dst
op	100:27	0:0	8	++
water	100:29	0:0	8	)
op	100:31	0:0	8	=
water	100:33	0:0	8	g
water	100:34	0:0	8	;
op	101:20	0:0	8	*
water	101:21	0:0	8	(
water	101:22	0:0	8	p_dst
op	101:27	0:0	8	++
water	101:29	0:0	8	)
op	101:31	0:0	8	=
water	101:33	0:0	8	b
water	101:34	0:0	8	;
water	102:20	0:0	8	p_src
op	102:26	0:0	8	+=
water	102:29	0:0	8	3
water	102:30	0:0	8	;
water	103:16	0:0	8	}
water	104:12	0:0	6	}
break	105:12	105:17	4	
water	106:8	0:0	4	}
label	107:8	107:15	4	case 32 :
water	108:8	0:0	4	{
decl	109:12	109:20	4	int	i
water	109:17	0:0	4	,
decl	109:12	109:20	4	int	j
decl	110:12	110:34	4	uint8_t	*p_src
water	110:26	0:0	4	,
decl	110:12	110:34	4	uint8_t	*p_dst
decl	111:12	111:30	4	uint8_t	r
water	111:21	0:0	4	,
decl	111:12	111:30	4	uint8_t	g
water	111:24	0:0	4	,
decl	111:12	111:30	4	uint8_t	b
water	111:27	0:0	4	,
decl	111:12	111:30	4	uint8_t	a
for	112:12	126:12	4	(i = 0 ;i < p_surface -> h;i ++)
forinit	112:18	112:23	5	i = 0 ;
water	112:18	0:0	6	i
op	112:20	0:0	6	=
water	112:22	0:0	6	0
water	112:23	0:0	6	;
cond	112:25	112:40	5	i < p_surface -> h
water	112:25	0:0	6	i
op	112:27	0:0	6	<
water	112:29	0:0	6	p_surface
op	112:38	0:0	6	->
water	112:40	0:0	6	h
forexpr	112:43	112:44	5	i ++
water	112:43	0:0	6	i
op	112:44	0:0	6	++
stmts	113:12	126:12	5	
water	113:12	0:0	6	{
water	114:16	0:0	6	p_src
op	114:22	0:0	6	=
water	114:24	0:0	6	(
water	114:25	0:0	6	uint8_t
op	114:32	0:0	6	*
water	114:33	0:0	6	)
water	114:34	0:0	6	p_surface
op	114:43	0:0	6	->
water	114:45	0:0	6	pixels
op	114:52	0:0	6	+
water	114:54	0:0	6	i
op	114:56	0:0	6	*
water	114:58	0:0	6	p_surface
op	114:67	0:0	6	->
water	114:69	0:0	6	pitch
water	114:74	0:0	6	;
water	115:16	0:0	6	p_dst
op	115:22	0:0	6	=
water	115:24	0:0	6	p_pic
op	115:29	0:0	6	->
water	115:31	0:0	6	p
op	115:32	0:0	6	[
water	115:33	0:0	6	0
op	115:34	0:0	6	]
op	115:35	0:0	6	.
water	115:36	0:0	6	p_pixels
op	115:45	0:0	6	+
water	115:47	0:0	6	i
op	115:49	0:0	6	*
water	115:51	0:0	6	p_pic
op	115:56	0:0	6	->
water	115:58	0:0	6	p
op	115:59	0:0	6	[
water	115:60	0:0	6	0
op	115:61	0:0	6	]
op	115:62	0:0	6	.
water	115:63	0:0	6	i_pitch
water	115:70	0:0	6	;
for	116:16	125:16	6	(j = 0 ;j < p_surface -> w;j ++)
forinit	116:22	116:27	7	j = 0 ;
water	116:22	0:0	8	j
op	116:24	0:0	8	=
water	116:26	0:0	8	0
water	116:27	0:0	8	;
cond	116:29	116:44	7	j < p_surface -> w
water	116:29	0:0	8	j
op	116:31	0:0	8	<
water	116:33	0:0	8	p_surface
op	116:42	0:0	8	->
water	116:44	0:0	8	w
forexpr	116:47	116:48	7	j ++
water	116:47	0:0	8	j
op	116:48	0:0	8	++
stmts	117:16	125:16	7	
water	117:16	0:0	8	{
call	118:20	119:47	8	SDL_GetRGBA
arg	118:33	118:50	9	*(uint32_t*)p_src
op	118:33	0:0	10	*
water	118:34	0:0	10	(
water	118:35	0:0	10	uint32_t
op	118:43	0:0	10	*
water	118:44	0:0	10	)
water	118:45	0:0	10	p_src
arg	118:52	118:69	9	p_surface->format
water	118:52	0:0	10	p_surface
op	118:61	0:0	10	->
water	118:63	0:0	10	format
arg	119:32	119:34	9	&r
op	119:32	0:0	10	&
water	119:33	0:0	10	r
arg	119:36	119:38	9	&g
op	119:36	0:0	10	&
water	119:37	0:0	10	g
arg	119:40	119:42	9	&b
op	119:40	0:0	10	&
water	119:41	0:0	10	b
arg	119:44	119:47	9	&a
op	119:44	0:0	10	&
water	119:45	0:0	10	a
water	119:48	0:0	8	;
op	120:20	0:0	8	*
water	120:21	0:0	8	(
water	120:22	0:0	8	p_dst
op	120:27	0:0	8	++
water	120:29	0:0	8	)
op	120:31	0:0	8	=
water	120:33	0:0	8	b
water	120:34	0:0	8	;
op	121:20	0:0	8	*
water	121:21	0:0	8	(
water	121:22	0:0	8	p_dst
op	121:27	0:0	8	++
water	121:29	0:0	8	)
op	121:31	0:0	8	=
water	121:33	0:0	8	g
water	121:34	0:0	8	;
op	122:20	0:0	8	*
water	122:21	0:0	8	(
water	122:22	0:0	8	p_dst
op	122:27	0:0	8	++
water	122:29	0:0	8	)
op	122:31	0:0	8	=
water	122:33	0:0	8	r
water	122:34	0:0	8	;
op	123:20	0:0	8	*
water	123:21	0:0	8	(
water	123:22	0:0	8	p_dst
op	123:27	0:0	8	++
water	123:29	0:0	8	)
op	123:31	0:0	8	=
water	123:33	0:0	8	a
water	123:34	0:0	8	;
water	124:20	0:0	8	p_src
op	124:26	0:0	8	+=
water	124:29	0:0	8	4
water	124:30	0:0	8	;
water	125:16	0:0	8	}
water	126:12	0:0	6	}
break	127:12	127:17	4	
water	128:8	0:0	4	}
water	129:4	0:0	4	}
water	130:4	0:0	2	p_pic
op	130:9	0:0	2	->
water	130:11	0:0	2	date
op	130:16	0:0	2	=
water	130:18	0:0	2	(
water	130:19	0:0	2	p_block
op	130:26	0:0	2	->
water	130:28	0:0	2	i_pts
op	130:34	0:0	2	>
water	130:36	0:0	2	VLC_TS_INVALID
water	130:50	0:0	2	)
water	130:52	0:0	2	?
water	131:8	0:0	2	p_block
op	131:15	0:0	2	->
water	131:17	0:0	2	i_pts
water	131:23	0:0	2	:
water	131:25	0:0	2	p_block
op	131:32	0:0	2	->
water	131:34	0:0	2	i_dts
water	131:39	0:0	2	;
call	132:4	132:31	2	SDL_FreeSurface
arg	132:21	132:31	3	p_surface
water	132:21	0:0	4	p_surface
water	132:32	0:0	2	;
call	133:4	133:27	2	block_Release
arg	133:19	133:27	3	p_block
water	133:19	0:0	4	p_block
water	133:28	0:0	2	;
op	133:30	0:0	2	*
water	133:31	0:0	2	pp_block
op	133:40	0:0	2	=
water	133:42	0:0	2	NULL
water	133:46	0:0	2	;
return	134:4	134:16	2	p_pic
water	134:11	0:0	3	p_pic
label	135:0	135:5	2	error :
if	136:4	136:57	2	(p_surface != NULL)
cond	136:9	136:22	3	p_surface != NULL
water	136:9	0:0	4	p_surface
op	136:19	0:0	4	!=
water	136:22	0:0	4	NULL
stmts	136:29	136:57	3	
call	136:29	136:56	4	SDL_FreeSurface
arg	136:46	136:56	5	p_surface
water	136:46	0:0	6	p_surface
water	136:57	0:0	4	;
call	137:4	137:27	2	block_Release
arg	137:19	137:27	3	p_block
water	137:19	0:0	4	p_block
water	137:28	0:0	2	;
op	137:30	0:0	2	*
water	137:31	0:0	2	pp_block
op	137:40	0:0	2	=
water	137:42	0:0	2	NULL
water	137:46	0:0	2	;
return	138:4	138:15	2	NULL
water	138:11	0:0	3	NULL
