func	2:0	24:0	0	static void	Close
params	2:17	0:0	1	
param	2:18	2:38	2	vlc_object_t *	p_this
stmnts	0:0	23:13	1	
decl	4:4	4:53	2	intf_sys_t	*sys
op	4:20	0:0	2	=
water	4:22	0:0	2	(
water	4:23	0:0	2	(
water	4:24	0:0	2	intf_thread_t
op	4:37	0:0	2	*
water	4:38	0:0	2	)
water	4:39	0:0	2	p_this
water	4:45	0:0	2	)
op	4:46	0:0	2	->
water	4:48	0:0	2	p_sys
call	5:4	5:30	2	vlc_join
arg	5:13	5:24	3	sys->thread
water	5:13	0:0	4	sys
op	5:16	0:0	4	->
water	5:18	0:0	4	thread
arg	5:26	5:30	3	NULL
water	5:26	0:0	4	NULL
water	5:31	0:0	2	;
call	6:4	6:23	2	PlaylistDestroy
arg	6:20	6:23	3	sys
water	6:20	0:0	4	sys
water	6:24	0:0	2	;
call	7:4	7:19	2	DirsDestroy
arg	7:16	7:19	3	sys
water	7:16	0:0	4	sys
water	7:20	0:0	2	;
call	8:4	8:25	2	free
arg	8:9	8:25	3	sys->current_dir
water	8:9	0:0	4	sys
op	8:12	0:0	4	->
water	8:14	0:0	4	current_dir
water	8:26	0:0	2	;
if	9:4	10:40	2	(sys -> p_input)
cond	9:8	9:13	3	sys -> p_input
water	9:8	0:0	4	sys
op	9:11	0:0	4	->
water	9:13	0:0	4	p_input
stmts	10:8	10:40	3	
call	10:8	10:39	4	vlc_object_release
arg	10:27	10:39	5	sys->p_input
water	10:27	0:0	6	sys
op	10:30	0:0	6	->
water	10:32	0:0	6	p_input
water	10:40	0:0	4	;
if	11:4	13:77	2	(can_change_color ( ))
cond	11:8	11:25	3	can_change_color ( )
call	11:8	11:25	4	can_change_color
stmts	13:8	13:77	3	
call	13:8	13:76	4	init_color
arg	13:19	13:31	5	COLOR_YELLOW
water	13:19	0:0	6	COLOR_YELLOW
arg	13:33	13:46	5	sys->yellow_r
water	13:33	0:0	6	sys
op	13:36	0:0	6	->
water	13:38	0:0	6	yellow_r
arg	13:48	13:61	5	sys->yellow_g
water	13:48	0:0	6	sys
op	13:51	0:0	6	->
water	13:53	0:0	6	yellow_g
arg	13:63	13:76	5	sys->yellow_b
water	13:63	0:0	6	sys
op	13:66	0:0	6	->
water	13:68	0:0	6	yellow_b
water	13:77	0:0	4	;
call	14:4	14:11	2	endwin
water	14:12	0:0	2	;
call	15:4	15:43	2	vlc_LogSet
arg	15:15	15:31	3	p_this->p_libvlc
water	15:15	0:0	4	p_this
op	15:21	0:0	4	->
water	15:23	0:0	4	p_libvlc
arg	15:33	15:37	3	NULL
water	15:33	0:0	4	NULL
arg	15:39	15:43	3	NULL
water	15:39	0:0	4	NULL
water	15:44	0:0	2	;
call	16:4	16:36	2	vlc_mutex_destroy
arg	16:22	16:36	3	&sys->msg_lock
op	16:22	0:0	4	&
water	16:23	0:0	4	sys
op	16:26	0:0	4	->
water	16:28	0:0	4	msg_lock
water	16:37	0:0	2	;
call	17:4	17:35	2	vlc_mutex_destroy
arg	17:22	17:35	3	&sys->pl_lock
op	17:22	0:0	4	&
water	17:23	0:0	4	sys
op	17:26	0:0	4	->
water	17:28	0:0	4	pl_lock
water	17:36	0:0	2	;
for	18:4	22:4	2	(unsigned i = 0 ;i < sizeof sys -> msgs / sizeof * sys -> msgs;i ++)
forinit	18:8	18:22	3	unsigned i = 0 ;
water	18:8	0:0	4	unsigned
water	18:17	0:0	4	i
op	18:19	0:0	4	=
water	18:21	0:0	4	0
water	18:22	0:0	4	;
cond	18:24	18:60	3	i < sizeof sys -> msgs / sizeof * sys -> msgs
water	18:24	0:0	4	i
op	18:26	0:0	4	<
op	18:28	0:0	4	sizeof
water	18:35	0:0	4	sys
op	18:38	0:0	4	->
water	18:40	0:0	4	msgs
op	18:45	0:0	4	/
op	18:47	0:0	4	sizeof
op	18:54	0:0	4	*
water	18:55	0:0	4	sys
op	18:58	0:0	4	->
water	18:60	0:0	4	msgs
forexpr	18:66	18:67	3	i ++
water	18:66	0:0	4	i
op	18:67	0:0	4	++
stmts	18:71	22:4	3	
water	18:71	0:0	4	{
if	19:8	20:39	4	(sys -> msgs [ i ] . item)
cond	19:12	19:25	5	sys -> msgs [ i ] . item
water	19:12	0:0	6	sys
op	19:15	0:0	6	->
water	19:17	0:0	6	msgs
op	19:21	0:0	6	[
water	19:22	0:0	6	i
op	19:23	0:0	6	]
op	19:24	0:0	6	.
water	19:25	0:0	6	item
stmts	20:12	20:39	5	
call	20:12	20:38	6	msg_Free
arg	20:21	20:38	7	sys->msgs[i].item
water	20:21	0:0	8	sys
op	20:24	0:0	8	->
water	20:26	0:0	8	msgs
op	20:30	0:0	8	[
water	20:31	0:0	8	i
op	20:32	0:0	8	]
op	20:33	0:0	8	.
water	20:34	0:0	8	item
water	20:39	0:0	6	;
call	21:8	21:29	4	free
arg	21:13	21:29	5	sys->msgs[i].msg
water	21:13	0:0	6	sys
op	21:16	0:0	6	->
water	21:18	0:0	6	msgs
op	21:22	0:0	6	[
water	21:23	0:0	6	i
op	21:24	0:0	6	]
op	21:25	0:0	6	.
water	21:26	0:0	6	msg
water	21:30	0:0	4	;
water	22:4	0:0	4	}
call	23:4	23:12	2	free
arg	23:9	23:12	3	sys
water	23:9	0:0	4	sys
water	23:13	0:0	2	;
