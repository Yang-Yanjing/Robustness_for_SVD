func	2:0	58:0	0	static int	OpenDecoder
params	2:22	0:0	1	
param	2:24	2:45	2	vlc_object_t *	p_this
stmnts	0:0	57:22	1	
decl	4:4	4:41	2	decoder_t	*p_dec
op	4:21	0:0	2	=
water	4:23	0:0	2	(
water	4:24	0:0	2	decoder_t
op	4:33	0:0	2	*
water	4:34	0:0	2	)
water	4:35	0:0	2	p_this
decl	5:4	5:24	2	decoder_sys_t	*p_sys
if	6:4	10:4	2	(p_dec -> fmt_in . i_codec != VLC_CODEC_WMA1 && p_dec -> fmt_in . i_codec != VLC_CODEC_WMA2)
cond	6:8	7:33	3	p_dec -> fmt_in . i_codec != VLC_CODEC_WMA1 && p_dec -> fmt_in . i_codec != VLC_CODEC_WMA2
water	6:8	0:0	4	p_dec
op	6:13	0:0	4	->
water	6:15	0:0	4	fmt_in
op	6:21	0:0	4	.
water	6:22	0:0	4	i_codec
op	6:30	0:0	4	!=
water	6:33	0:0	4	VLC_CODEC_WMA1
op	6:48	0:0	4	&&
water	7:8	0:0	4	p_dec
op	7:13	0:0	4	->
water	7:15	0:0	4	fmt_in
op	7:21	0:0	4	.
water	7:22	0:0	4	i_codec
op	7:30	0:0	4	!=
water	7:33	0:0	4	VLC_CODEC_WMA2
stmts	8:4	10:4	3	
water	8:4	0:0	4	{
return	9:8	9:27	4	VLC_EGENERIC
water	9:15	0:0	5	VLC_EGENERIC
water	10:4	0:0	4	}
water	12:4	0:0	2	p_dec
op	12:9	0:0	2	->
water	12:11	0:0	2	p_sys
op	12:17	0:0	2	=
water	12:19	0:0	2	p_sys
op	12:25	0:0	2	=
water	12:27	0:0	2	(
water	12:28	0:0	2	decoder_sys_t
op	12:42	0:0	2	*
water	12:43	0:0	2	)
call	12:44	12:72	2	malloc
arg	12:51	12:72	3	sizeof(decoder_sys_t)
op	12:51	0:0	4	sizeof
water	12:57	0:0	4	(
water	12:58	0:0	4	decoder_sys_t
water	12:71	0:0	4	)
water	12:73	0:0	2	;
if	13:4	14:25	2	(! p_sys)
cond	13:8	13:9	3	! p_sys
op	13:8	0:0	4	!
water	13:9	0:0	4	p_sys
stmts	14:8	14:25	3	
return	14:8	14:25	4	VLC_ENOMEM
water	14:15	0:0	5	VLC_ENOMEM
call	15:4	15:46	2	memset
arg	15:12	15:17	3	p_sys
water	15:12	0:0	4	p_sys
arg	15:19	15:20	3	0
water	15:19	0:0	4	0
arg	15:22	15:46	3	sizeof(decoder_sys_t)
op	15:22	0:0	4	sizeof
water	15:28	0:0	4	(
water	15:30	0:0	4	decoder_sys_t
water	15:44	0:0	4	)
water	15:47	0:0	2	;
call	17:4	17:63	2	date_Init
arg	17:15	17:31	3	&p_sys->end_date
op	17:15	0:0	4	&
water	17:16	0:0	4	p_sys
op	17:21	0:0	4	->
water	17:23	0:0	4	end_date
arg	17:33	17:59	3	p_dec->fmt_in.audio.i_rate
water	17:33	0:0	4	p_dec
op	17:38	0:0	4	->
water	17:40	0:0	4	fmt_in
op	17:46	0:0	4	.
water	17:47	0:0	4	audio
op	17:52	0:0	4	.
water	17:53	0:0	4	i_rate
arg	17:61	17:63	3	1
water	17:61	0:0	4	1
water	17:64	0:0	2	;
water	19:4	0:0	2	p_dec
op	19:9	0:0	2	->
water	19:11	0:0	2	fmt_out
op	19:18	0:0	2	.
water	19:19	0:0	2	i_cat
op	19:25	0:0	2	=
water	19:27	0:0	2	AUDIO_ES
water	19:35	0:0	2	;
water	20:4	0:0	2	p_dec
op	20:9	0:0	2	->
water	20:11	0:0	2	fmt_out
op	20:18	0:0	2	.
water	20:19	0:0	2	i_codec
op	20:27	0:0	2	=
water	20:29	0:0	2	VLC_CODEC_S32N
water	20:43	0:0	2	;
water	21:4	0:0	2	p_dec
op	21:9	0:0	2	->
water	21:11	0:0	2	fmt_out
op	21:18	0:0	2	.
water	21:19	0:0	2	audio
op	21:24	0:0	2	.
water	21:25	0:0	2	i_bitspersample
op	21:41	0:0	2	=
water	21:43	0:0	2	p_dec
op	21:48	0:0	2	->
water	21:50	0:0	2	fmt_in
op	21:56	0:0	2	.
water	21:57	0:0	2	audio
op	21:62	0:0	2	.
water	21:63	0:0	2	i_bitspersample
water	21:78	0:0	2	;
water	22:4	0:0	2	p_dec
op	22:9	0:0	2	->
water	22:11	0:0	2	fmt_out
op	22:18	0:0	2	.
water	22:19	0:0	2	audio
op	22:24	0:0	2	.
water	22:25	0:0	2	i_rate
op	22:32	0:0	2	=
water	22:34	0:0	2	p_dec
op	22:39	0:0	2	->
water	22:41	0:0	2	fmt_in
op	22:47	0:0	2	.
water	22:48	0:0	2	audio
op	22:53	0:0	2	.
water	22:54	0:0	2	i_rate
water	22:60	0:0	2	;
water	23:4	0:0	2	p_dec
op	23:9	0:0	2	->
water	23:11	0:0	2	fmt_out
op	23:18	0:0	2	.
water	23:19	0:0	2	audio
op	23:24	0:0	2	.
water	23:25	0:0	2	i_channels
op	23:36	0:0	2	=
water	23:38	0:0	2	p_dec
op	23:43	0:0	2	->
water	23:45	0:0	2	fmt_in
op	23:51	0:0	2	.
water	23:52	0:0	2	audio
op	23:57	0:0	2	.
water	23:58	0:0	2	i_channels
water	23:68	0:0	2	;
call	24:4	25:71	2	assert
arg	24:12	25:71	3	p_dec->fmt_out.audio.i_channels<(sizeof(pi_channels_maps)/sizeof(pi_channels_maps[0]))
water	24:12	0:0	4	p_dec
op	24:17	0:0	4	->
water	24:19	0:0	4	fmt_out
op	24:26	0:0	4	.
water	24:27	0:0	4	audio
op	24:32	0:0	4	.
water	24:33	0:0	4	i_channels
op	24:44	0:0	4	<
water	25:8	0:0	4	(
op	25:10	0:0	4	sizeof
water	25:16	0:0	4	(
water	25:18	0:0	4	pi_channels_maps
water	25:35	0:0	4	)
op	25:37	0:0	4	/
op	25:39	0:0	4	sizeof
water	25:45	0:0	4	(
water	25:47	0:0	4	pi_channels_maps
op	25:63	0:0	4	[
water	25:64	0:0	4	0
op	25:65	0:0	4	]
water	25:67	0:0	4	)
water	25:69	0:0	4	)
water	25:72	0:0	2	;
water	26:4	0:0	2	p_dec
op	26:9	0:0	2	->
water	26:11	0:0	2	fmt_out
op	26:18	0:0	2	.
water	26:19	0:0	2	audio
op	26:24	0:0	2	.
water	26:25	0:0	2	i_original_channels
op	26:45	0:0	2	=
water	27:8	0:0	2	p_dec
op	27:13	0:0	2	->
water	27:15	0:0	2	fmt_out
op	27:22	0:0	2	.
water	27:23	0:0	2	audio
op	27:28	0:0	2	.
water	27:29	0:0	2	i_physical_channels
op	27:49	0:0	2	=
water	28:12	0:0	2	pi_channels_maps
op	28:28	0:0	2	[
water	28:29	0:0	2	p_dec
op	28:34	0:0	2	->
water	28:36	0:0	2	fmt_out
op	28:43	0:0	2	.
water	28:44	0:0	2	audio
op	28:49	0:0	2	.
water	28:50	0:0	2	i_channels
op	28:60	0:0	2	]
water	28:61	0:0	2	;
call	30:4	30:58	2	assert
arg	30:12	30:58	3	p_dec->fmt_out.audio.i_physical_channels!=0
water	30:12	0:0	4	p_dec
op	30:17	0:0	4	->
water	30:19	0:0	4	fmt_out
op	30:26	0:0	4	.
water	30:27	0:0	4	audio
op	30:32	0:0	4	.
water	30:33	0:0	4	i_physical_channels
op	30:53	0:0	4	!=
water	30:56	0:0	4	0
water	30:59	0:0	2	;
decl	31:4	31:26	2	asf_waveformatex_t	wfx
water	32:4	0:0	2	wfx
op	32:7	0:0	2	.
water	32:8	0:0	2	rate
op	32:13	0:0	2	=
water	32:15	0:0	2	p_dec
op	32:20	0:0	2	->
water	32:22	0:0	2	fmt_in
op	32:28	0:0	2	.
water	32:29	0:0	2	audio
op	32:34	0:0	2	.
water	32:35	0:0	2	i_rate
water	32:41	0:0	2	;
water	33:4	0:0	2	wfx
op	33:7	0:0	2	.
water	33:8	0:0	2	bitrate
op	33:16	0:0	2	=
water	33:18	0:0	2	p_dec
op	33:23	0:0	2	->
water	33:25	0:0	2	fmt_in
op	33:31	0:0	2	.
water	33:32	0:0	2	i_bitrate
water	33:41	0:0	2	;
water	34:4	0:0	2	wfx
op	34:7	0:0	2	.
water	34:8	0:0	2	channels
op	34:17	0:0	2	=
water	34:19	0:0	2	p_dec
op	34:24	0:0	2	->
water	34:26	0:0	2	fmt_in
op	34:32	0:0	2	.
water	34:33	0:0	2	audio
op	34:38	0:0	2	.
water	34:39	0:0	2	i_channels
water	34:49	0:0	2	;
water	35:4	0:0	2	wfx
op	35:7	0:0	2	.
water	35:8	0:0	2	blockalign
op	35:19	0:0	2	=
water	35:21	0:0	2	p_dec
op	35:26	0:0	2	->
water	35:28	0:0	2	fmt_in
op	35:34	0:0	2	.
water	35:35	0:0	2	audio
op	35:40	0:0	2	.
water	35:41	0:0	2	i_blockalign
water	35:53	0:0	2	;
water	36:4	0:0	2	wfx
op	36:7	0:0	2	.
water	36:8	0:0	2	bitspersample
op	36:22	0:0	2	=
water	36:24	0:0	2	p_dec
op	36:29	0:0	2	->
water	36:31	0:0	2	fmt_in
op	36:37	0:0	2	.
water	36:38	0:0	2	audio
op	36:43	0:0	2	.
water	36:44	0:0	2	i_bitspersample
water	36:59	0:0	2	;
call	37:4	39:26	2	msg_Dbg
arg	37:13	37:18	3	p_dec
water	37:13	0:0	4	p_dec
arg	37:20	37:74	3	"samplerate %d bitrate %d channels %d align %d bps %d"
water	37:20	0:0	4	"samplerate %d bitrate %d channels %d align %d bps %d"
arg	38:8	38:16	3	wfx.rate
water	38:8	0:0	4	wfx
op	38:11	0:0	4	.
water	38:12	0:0	4	rate
arg	38:18	38:29	3	wfx.bitrate
water	38:18	0:0	4	wfx
op	38:21	0:0	4	.
water	38:22	0:0	4	bitrate
arg	38:31	38:43	3	wfx.channels
water	38:31	0:0	4	wfx
op	38:34	0:0	4	.
water	38:35	0:0	4	channels
arg	38:45	38:59	3	wfx.blockalign
water	38:45	0:0	4	wfx
op	38:48	0:0	4	.
water	38:49	0:0	4	blockalign
arg	39:8	39:26	3	wfx.bitspersample
water	39:8	0:0	4	wfx
op	39:11	0:0	4	.
water	39:12	0:0	4	bitspersample
water	39:27	0:0	2	;
if	40:4	41:41	2	(p_dec -> fmt_in . i_codec == VLC_CODEC_WMA1)
cond	40:8	40:33	3	p_dec -> fmt_in . i_codec == VLC_CODEC_WMA1
water	40:8	0:0	4	p_dec
op	40:13	0:0	4	->
water	40:15	0:0	4	fmt_in
op	40:21	0:0	4	.
water	40:22	0:0	4	i_codec
op	40:30	0:0	4	==
water	40:33	0:0	4	VLC_CODEC_WMA1
stmts	41:8	41:41	3	
water	41:8	0:0	4	wfx
op	41:11	0:0	4	.
water	41:12	0:0	4	codec_id
op	41:21	0:0	4	=
water	41:23	0:0	4	ASF_CODEC_ID_WMAV1
water	41:41	0:0	4	;
else	42:4	43:41	2
stmts	42:9	43:41	3	
if	42:9	43:41	4	(p_dec -> fmt_in . i_codec == VLC_CODEC_WMA2)
cond	42:13	42:38	5	p_dec -> fmt_in . i_codec == VLC_CODEC_WMA2
water	42:13	0:0	6	p_dec
op	42:18	0:0	6	->
water	42:20	0:0	6	fmt_in
op	42:26	0:0	6	.
water	42:27	0:0	6	i_codec
op	42:35	0:0	6	==
water	42:38	0:0	6	VLC_CODEC_WMA2
stmts	43:8	43:41	5	
water	43:8	0:0	6	wfx
op	43:11	0:0	6	.
water	43:12	0:0	6	codec_id
op	43:21	0:0	6	=
water	43:23	0:0	6	ASF_CODEC_ID_WMAV2
water	43:41	0:0	6	;
water	44:4	0:0	2	wfx
op	44:7	0:0	2	.
water	44:8	0:0	2	datalen
op	44:16	0:0	2	=
water	44:18	0:0	2	p_dec
op	44:23	0:0	2	->
water	44:25	0:0	2	fmt_in
op	44:31	0:0	2	.
water	44:32	0:0	2	i_extra
water	44:39	0:0	2	;
if	45:4	45:41	2	(wfx . datalen > 6)
cond	45:8	45:22	3	wfx . datalen > 6
water	45:8	0:0	4	wfx
op	45:11	0:0	4	.
water	45:12	0:0	4	datalen
op	45:20	0:0	4	>
water	45:22	0:0	4	6
stmts	45:26	45:41	3	
water	45:26	0:0	4	wfx
op	45:29	0:0	4	.
water	45:30	0:0	4	datalen
op	45:38	0:0	4	=
water	45:40	0:0	4	6
water	45:41	0:0	4	;
if	46:4	47:62	2	(wfx . datalen > 0)
cond	46:8	46:22	3	wfx . datalen > 0
water	46:8	0:0	4	wfx
op	46:11	0:0	4	.
water	46:12	0:0	4	datalen
op	46:20	0:0	4	>
water	46:22	0:0	4	0
stmts	47:8	47:62	3	
call	47:8	47:61	4	memcpy
arg	47:16	47:24	5	wfx.data
water	47:16	0:0	6	wfx
op	47:19	0:0	6	.
water	47:20	0:0	6	data
arg	47:26	47:47	5	p_dec->fmt_in.p_extra
water	47:26	0:0	6	p_dec
op	47:31	0:0	6	->
water	47:33	0:0	6	fmt_in
op	47:39	0:0	6	.
water	47:40	0:0	6	p_extra
arg	47:49	47:61	5	wfx.datalen
water	47:49	0:0	6	wfx
op	47:52	0:0	6	.
water	47:53	0:0	6	datalen
water	47:62	0:0	4	;
if	49:4	54:4	2	(wma_decode_init (& p_sys -> wmadec ,& wfx ) < 0)
cond	49:8	49:49	3	wma_decode_init (& p_sys -> wmadec ,& wfx ) < 0
call	49:8	49:45	4	wma_decode_init
arg	49:24	49:38	5	&p_sys->wmadec
op	49:24	0:0	6	&
water	49:25	0:0	6	p_sys
op	49:30	0:0	6	->
water	49:32	0:0	6	wmadec
arg	49:40	49:45	5	&wfx
op	49:40	0:0	6	&
water	49:41	0:0	6	wfx
op	49:47	0:0	4	<
water	49:49	0:0	4	0
stmts	50:4	54:4	3	
water	50:4	0:0	4	{
call	51:8	51:44	4	msg_Err
arg	51:17	51:22	5	p_dec
water	51:17	0:0	6	p_dec
arg	51:24	51:44	5	"codec init failed"
water	51:24	0:0	6	"codec init failed"
water	51:45	0:0	4	;
call	52:8	52:20	4	free
arg	52:14	52:20	5	p_sys
water	52:14	0:0	6	p_sys
water	52:21	0:0	4	;
return	53:8	53:27	4	VLC_EGENERIC
water	53:15	0:0	5	VLC_EGENERIC
water	54:4	0:0	4	}
water	56:4	0:0	2	p_dec
op	56:9	0:0	2	->
water	56:11	0:0	2	pf_decode_audio
op	56:27	0:0	2	=
water	56:29	0:0	2	DecodeFrame
water	56:40	0:0	2	;
return	57:4	57:22	2	VLC_SUCCESS
water	57:11	0:0	3	VLC_SUCCESS
