func	1:0	120:0	0	static int	HandleMeta
params	2:15	0:0	1	
param	2:16	2:32	2	demux_t *	p_demux
param	2:34	2:44	2	mtrk_t *	tr
stmnts	0:0	119:14	1	
decl	4:4	4:28	2	stream_t	*s
op	4:16	0:0	2	=
water	4:18	0:0	2	p_demux
op	4:25	0:0	2	->
water	4:27	0:0	2	s
decl	5:4	5:39	2	demux_sys_t	*p_sys
op	5:23	0:0	2	=
water	5:25	0:0	2	p_demux
op	5:32	0:0	2	->
water	5:34	0:0	2	p_sys
decl	6:4	6:20	2	uint8_t	*payload
decl	7:4	7:16	2	uint8_t	type
decl	8:4	8:18	2	int32_t	length
decl	9:4	9:15	2	int	ret
op	9:12	0:0	2	=
water	9:14	0:0	2	0
if	10:4	11:17	2	(stream_Read (s ,& type ,1 ) != 1)
cond	10:8	10:37	3	stream_Read (s ,& type ,1 ) != 1
call	10:8	10:32	4	stream_Read
arg	10:21	10:22	5	s
water	10:21	0:0	6	s
arg	10:24	10:29	5	&type
op	10:24	0:0	6	&
water	10:25	0:0	6	type
arg	10:31	10:32	5	1
water	10:31	0:0	6	1
op	10:34	0:0	4	!=
water	10:37	0:0	4	1
stmts	11:8	11:17	3	
return	11:8	11:17	4	-1
op	11:15	0:0	5	-
water	11:16	0:0	5	1
water	12:4	0:0	2	length
op	12:11	0:0	2	=
call	12:13	12:26	2	ReadVarInt
arg	12:25	12:26	3	s
water	12:25	0:0	4	s
water	12:27	0:0	2	;
if	13:4	14:17	2	(length < 0)
cond	13:8	13:17	3	length < 0
water	13:8	0:0	4	length
op	13:15	0:0	4	<
water	13:17	0:0	4	0
stmts	14:8	14:17	3	
return	14:8	14:17	4	-1
op	14:15	0:0	5	-
water	14:16	0:0	5	1
water	15:4	0:0	2	payload
op	15:12	0:0	2	=
call	15:14	15:32	2	malloc
arg	15:22	15:32	3	length+1
water	15:22	0:0	4	length
op	15:29	0:0	4	+
water	15:31	0:0	4	1
water	15:33	0:0	2	;
if	16:4	21:4	2	(( payload == NULL ) || (stream_Read (s ,payload ,length ) != length ))
cond	16:8	17:51	3	( payload == NULL ) || (stream_Read (s ,payload ,length ) != length )
water	16:8	0:0	4	(
water	16:9	0:0	4	payload
op	16:17	0:0	4	==
water	16:20	0:0	4	NULL
water	16:24	0:0	4	)
op	17:5	0:0	4	||
water	17:8	0:0	4	(
call	17:9	17:40	4	stream_Read
arg	17:22	17:23	5	s
water	17:22	0:0	6	s
arg	17:25	17:32	5	payload
water	17:25	0:0	6	payload
arg	17:34	17:40	5	length
water	17:34	0:0	6	length
op	17:42	0:0	4	!=
water	17:45	0:0	4	length
water	17:51	0:0	4	)
stmts	18:4	21:4	3	
water	18:4	0:0	4	{
call	19:8	19:21	4	free
arg	19:14	19:21	5	payload
water	19:14	0:0	6	payload
water	19:22	0:0	4	;
return	20:8	20:17	4	-1
op	20:15	0:0	5	-
water	20:16	0:0	5	1
water	21:4	0:0	4	}
water	22:4	0:0	2	payload
op	22:11	0:0	2	[
water	22:12	0:0	2	length
op	22:18	0:0	2	]
op	22:20	0:0	2	=
water	22:22	0:0	2	'\0'
water	22:26	0:0	2	;
switch	23:4	117:4	2	(type)
cond	23:12	23:12	3	type
water	23:12	0:0	4	type
stmts	24:4	117:4	3	
water	24:4	0:0	4	{
label	25:8	25:17	4	case 0 x00 :
break	26:12	26:17	4	
label	27:8	27:17	4	case 0 x01 :
call	28:12	28:39	4	EnsureUTF8
arg	28:24	28:39	5	(char*)payload
water	28:24	0:0	6	(
water	28:25	0:0	6	char
op	28:30	0:0	6	*
water	28:31	0:0	6	)
water	28:32	0:0	6	payload
water	28:40	0:0	4	;
call	29:12	29:64	4	msg_Info
arg	29:22	29:29	5	p_demux
water	29:22	0:0	6	p_demux
arg	29:31	29:47	5	"Text      : %s"
water	29:31	0:0	6	"Text      : %s"
arg	29:49	29:64	5	(char*)payload
water	29:49	0:0	6	(
water	29:50	0:0	6	char
op	29:55	0:0	6	*
water	29:56	0:0	6	)
water	29:57	0:0	6	payload
water	29:65	0:0	4	;
break	30:12	30:17	4	
label	31:8	31:17	4	case 0 x02 :
call	32:12	32:39	4	EnsureUTF8
arg	32:24	32:39	5	(char*)payload
water	32:24	0:0	6	(
water	32:25	0:0	6	char
op	32:30	0:0	6	*
water	32:31	0:0	6	)
water	32:32	0:0	6	payload
water	32:40	0:0	4	;
call	33:12	33:64	4	msg_Info
arg	33:22	33:29	5	p_demux
water	33:22	0:0	6	p_demux
arg	33:31	33:47	5	"Copyright : %s"
water	33:31	0:0	6	"Copyright : %s"
arg	33:49	33:64	5	(char*)payload
water	33:49	0:0	6	(
water	33:50	0:0	6	char
op	33:55	0:0	6	*
water	33:56	0:0	6	)
water	33:57	0:0	6	payload
water	33:65	0:0	4	;
break	34:12	34:17	4	
label	35:8	35:17	4	case 0 x03 :
call	36:12	36:39	4	EnsureUTF8
arg	36:24	36:39	5	(char*)payload
water	36:24	0:0	6	(
water	36:25	0:0	6	char
op	36:30	0:0	6	*
water	36:31	0:0	6	)
water	36:32	0:0	6	payload
water	36:40	0:0	4	;
call	37:12	37:64	4	msg_Info
arg	37:22	37:29	5	p_demux
water	37:22	0:0	6	p_demux
arg	37:31	37:47	5	"Track name: %s"
water	37:31	0:0	6	"Track name: %s"
arg	37:49	37:64	5	(char*)payload
water	37:49	0:0	6	(
water	37:50	0:0	6	char
op	37:55	0:0	6	*
water	37:56	0:0	6	)
water	37:57	0:0	6	payload
water	37:65	0:0	4	;
break	38:12	38:17	4	
label	39:8	39:17	4	case 0 x04 :
call	40:12	40:39	4	EnsureUTF8
arg	40:24	40:39	5	(char*)payload
water	40:24	0:0	6	(
water	40:25	0:0	6	char
op	40:30	0:0	6	*
water	40:31	0:0	6	)
water	40:32	0:0	6	payload
water	40:40	0:0	4	;
call	41:12	41:64	4	msg_Info
arg	41:22	41:29	5	p_demux
water	41:22	0:0	6	p_demux
arg	41:31	41:47	5	"Instrument: %s"
water	41:31	0:0	6	"Instrument: %s"
arg	41:49	41:64	5	(char*)payload
water	41:49	0:0	6	(
water	41:50	0:0	6	char
op	41:55	0:0	6	*
water	41:56	0:0	6	)
water	41:57	0:0	6	payload
water	41:65	0:0	4	;
break	42:12	42:17	4	
label	43:8	43:17	4	case 0 x05 :
break	45:12	45:17	4	
label	46:8	46:17	4	case 0 x06 :
call	47:12	47:39	4	EnsureUTF8
arg	47:24	47:39	5	(char*)payload
water	47:24	0:0	6	(
water	47:25	0:0	6	char
op	47:30	0:0	6	*
water	47:31	0:0	6	)
water	47:32	0:0	6	payload
water	47:40	0:0	4	;
call	48:12	48:64	4	msg_Info
arg	48:22	48:29	5	p_demux
water	48:22	0:0	6	p_demux
arg	48:31	48:47	5	"Marker    : %s"
water	48:31	0:0	6	"Marker    : %s"
arg	48:49	48:64	5	(char*)payload
water	48:49	0:0	6	(
water	48:50	0:0	6	char
op	48:55	0:0	6	*
water	48:56	0:0	6	)
water	48:57	0:0	6	payload
water	48:65	0:0	4	;
label	49:8	49:17	4	case 0 x07 :
call	50:12	50:39	4	EnsureUTF8
arg	50:24	50:39	5	(char*)payload
water	50:24	0:0	6	(
water	50:25	0:0	6	char
op	50:30	0:0	6	*
water	50:31	0:0	6	)
water	50:32	0:0	6	payload
water	50:40	0:0	4	;
call	51:12	51:64	4	msg_Info
arg	51:22	51:29	5	p_demux
water	51:22	0:0	6	p_demux
arg	51:31	51:47	5	"Cue point : %s"
water	51:31	0:0	6	"Cue point : %s"
arg	51:49	51:64	5	(char*)payload
water	51:49	0:0	6	(
water	51:50	0:0	6	char
op	51:55	0:0	6	*
water	51:56	0:0	6	)
water	51:57	0:0	6	payload
water	51:65	0:0	4	;
break	52:12	52:17	4	
label	53:8	53:17	4	case 0 x08 :
call	54:12	54:39	4	EnsureUTF8
arg	54:24	54:39	5	(char*)payload
water	54:24	0:0	6	(
water	54:25	0:0	6	char
op	54:30	0:0	6	*
water	54:31	0:0	6	)
water	54:32	0:0	6	payload
water	54:40	0:0	4	;
call	55:12	55:64	4	msg_Info
arg	55:22	55:29	5	p_demux
water	55:22	0:0	6	p_demux
arg	55:31	55:47	5	"Patch name: %s"
water	55:31	0:0	6	"Patch name: %s"
arg	55:49	55:64	5	(char*)payload
water	55:49	0:0	6	(
water	55:50	0:0	6	char
op	55:55	0:0	6	*
water	55:56	0:0	6	)
water	55:57	0:0	6	payload
water	55:65	0:0	4	;
break	56:12	56:17	4	
label	57:8	57:17	4	case 0 x09 :
call	58:12	58:39	4	EnsureUTF8
arg	58:24	58:39	5	(char*)payload
water	58:24	0:0	6	(
water	58:25	0:0	6	char
op	58:30	0:0	6	*
water	58:31	0:0	6	)
water	58:32	0:0	6	payload
water	58:40	0:0	4	;
call	59:12	59:63	4	msg_Dbg
arg	59:21	59:28	5	p_demux
water	59:21	0:0	6	p_demux
arg	59:30	59:46	5	"MIDI port : %s"
water	59:30	0:0	6	"MIDI port : %s"
arg	59:48	59:63	5	(char*)payload
water	59:48	0:0	6	(
water	59:49	0:0	6	char
op	59:54	0:0	6	*
water	59:55	0:0	6	)
water	59:56	0:0	6	payload
water	59:64	0:0	4	;
break	60:12	60:17	4	
label	61:8	61:17	4	case 0 x2F :
if	62:12	66:12	4	(tr -> start + tr -> length !=stream_Tell (s ))
cond	62:16	62:56	5	tr -> start + tr -> length !=stream_Tell (s )
water	62:16	0:0	6	tr
op	62:18	0:0	6	->
water	62:20	0:0	6	start
op	62:26	0:0	6	+
water	62:28	0:0	6	tr
op	62:30	0:0	6	->
water	62:32	0:0	6	length
op	62:39	0:0	6	!=
call	62:42	62:56	6	stream_Tell
arg	62:55	62:56	7	s
water	62:55	0:0	8	s
stmts	63:12	66:12	5	
water	63:12	0:0	6	{
call	64:16	64:58	6	msg_Err
arg	64:25	64:32	7	p_demux
water	64:25	0:0	8	p_demux
arg	64:34	64:58	7	"misplaced end of track"
water	64:34	0:0	8	"misplaced end of track"
water	64:59	0:0	6	;
water	65:16	0:0	6	ret
op	65:20	0:0	6	=
op	65:22	0:0	6	-
water	65:23	0:0	6	1
water	65:24	0:0	6	;
water	66:12	0:0	6	}
break	67:12	67:17	4	
label	68:8	68:17	4	case 0 x51 :
if	69:12	88:12	4	(length == 3)
cond	69:16	69:26	5	length == 3
water	69:16	0:0	6	length
op	69:23	0:0	6	==
water	69:26	0:0	6	3
stmts	70:12	88:12	5	
water	70:12	0:0	6	{
decl	71:16	72:63	6	uint32_t	uspqn
op	71:31	0:0	6	=
water	71:33	0:0	6	(
water	71:34	0:0	6	payload
op	71:41	0:0	6	[
water	71:42	0:0	6	0
op	71:43	0:0	6	]
op	71:45	0:0	6	<<
water	71:48	0:0	6	16
water	71:50	0:0	6	)
op	72:31	0:0	6	|
water	72:33	0:0	6	(
water	72:34	0:0	6	payload
op	72:41	0:0	6	[
water	72:42	0:0	6	1
op	72:43	0:0	6	]
op	72:45	0:0	6	<<
water	72:48	0:0	6	8
water	72:49	0:0	6	)
op	72:51	0:0	6	|
water	72:53	0:0	6	payload
op	72:60	0:0	6	[
water	72:61	0:0	6	2
op	72:62	0:0	6	]
water	73:16	0:0	6	unsigned
water	73:25	0:0	6	tempo
op	73:31	0:0	6	=
water	73:33	0:0	6	60
op	73:36	0:0	6	*
water	73:38	0:0	6	1000000
op	73:46	0:0	6	/
water	73:48	0:0	6	(
water	73:49	0:0	6	uspqn
water	73:55	0:0	6	?
water	73:57	0:0	6	uspqn
water	73:63	0:0	6	:
water	73:65	0:0	6	1
water	73:66	0:0	6	)
water	73:67	0:0	6	;
call	74:16	75:47	6	msg_Dbg
arg	74:25	74:32	7	p_demux
water	74:25	0:0	8	p_demux
arg	74:34	74:60	7	"tempo: %uus/qn -> %u BPM"
water	74:34	0:0	8	"tempo: %uus/qn -> %u BPM"
arg	75:25	75:40	7	(unsigned)uspqn
water	75:25	0:0	8	(
water	75:26	0:0	8	unsigned
water	75:34	0:0	8	)
water	75:35	0:0	8	uspqn
arg	75:42	75:47	7	tempo
water	75:42	0:0	8	tempo
water	75:48	0:0	6	;
if	76:16	80:16	6	(tempo < TEMPO_MIN)
cond	76:20	76:28	7	tempo < TEMPO_MIN
water	76:20	0:0	8	tempo
op	76:26	0:0	8	<
water	76:28	0:0	8	TEMPO_MIN
stmts	77:16	80:16	7	
water	77:16	0:0	8	{
call	78:20	78:76	8	msg_Warn
arg	78:30	78:37	9	p_demux
water	78:30	0:0	10	p_demux
arg	78:39	78:65	9	"tempo too slow -> %u BPM"
water	78:39	0:0	10	"tempo too slow -> %u BPM"
arg	78:67	78:76	9	TEMPO_MIN
water	78:67	0:0	10	TEMPO_MIN
water	78:77	0:0	8	;
water	79:20	0:0	8	tempo
op	79:26	0:0	8	=
water	79:28	0:0	8	TEMPO_MIN
water	79:37	0:0	8	;
water	80:16	0:0	8	}
else	81:16	86:16	6
stmts	82:16	86:16	7	
if	82:16	86:16	8	(tempo > TEMPO_MAX)
cond	82:20	82:28	9	tempo > TEMPO_MAX
water	82:20	0:0	10	tempo
op	82:26	0:0	10	>
water	82:28	0:0	10	TEMPO_MAX
stmts	83:16	86:16	9	
water	83:16	0:0	10	{
call	84:20	84:76	10	msg_Warn
arg	84:30	84:37	11	p_demux
water	84:30	0:0	12	p_demux
arg	84:39	84:65	11	"tempo too fast -> %u BPM"
water	84:39	0:0	12	"tempo too fast -> %u BPM"
arg	84:67	84:76	11	TEMPO_MAX
water	84:67	0:0	12	TEMPO_MAX
water	84:77	0:0	10	;
water	85:20	0:0	10	tempo
op	85:26	0:0	10	=
water	85:28	0:0	10	TEMPO_MAX
water	85:37	0:0	10	;
water	86:16	0:0	10	}
call	87:16	87:65	6	date_Change
arg	87:29	87:40	7	&p_sys->pts
op	87:29	0:0	8	&
water	87:30	0:0	8	p_sys
op	87:35	0:0	8	->
water	87:37	0:0	8	pts
arg	87:42	87:61	7	p_sys->ppqn*tempo
water	87:42	0:0	8	p_sys
op	87:47	0:0	8	->
water	87:49	0:0	8	ppqn
op	87:54	0:0	8	*
water	87:56	0:0	8	tempo
arg	87:63	87:65	7	60
water	87:63	0:0	8	60
water	87:66	0:0	6	;
water	88:12	0:0	6	}
else	89:12	90:24	4
stmts	90:16	90:24	5	
water	90:16	0:0	6	ret
op	90:20	0:0	6	=
op	90:22	0:0	6	-
water	90:23	0:0	6	1
water	90:24	0:0	6	;
break	91:12	91:17	4	
label	92:8	92:17	4	case 0 x54 :
if	93:12	94:66	4	(length == 5)
cond	93:16	93:26	5	length == 5
water	93:16	0:0	6	length
op	93:23	0:0	6	==
water	93:26	0:0	6	5
stmts	94:16	94:66	5	
call	94:16	94:65	6	msg_Warn
arg	94:26	94:33	7	p_demux
water	94:26	0:0	8	p_demux
arg	94:35	94:65	7	"SMPTE offset not implemented"
water	94:35	0:0	8	"SMPTE offset not implemented"
water	94:66	0:0	6	;
else	95:12	96:24	4
stmts	96:16	96:24	5	
water	96:16	0:0	6	ret
op	96:20	0:0	6	=
op	96:22	0:0	6	-
water	96:23	0:0	6	1
water	96:24	0:0	6	;
break	97:12	97:17	4	
label	98:8	98:17	4	case 0 x58 :
if	99:12	100:16	4	(length == 4)
cond	99:16	99:26	5	length == 4
water	99:16	0:0	6	length
op	99:23	0:0	6	==
water	99:26	0:0	6	4
stmts	100:16	100:16	5	
water	100:16	0:0	6	;
else	101:12	102:24	4
stmts	102:16	102:24	5	
water	102:16	0:0	6	ret
op	102:20	0:0	6	=
op	102:22	0:0	6	-
water	102:23	0:0	6	1
water	102:24	0:0	6	;
break	103:12	103:17	4	
label	104:8	104:17	4	case 0 x59 :
if	105:12	106:16	4	(length == 2)
cond	105:16	105:26	5	length == 2
water	105:16	0:0	6	length
op	105:23	0:0	6	==
water	105:26	0:0	6	2
stmts	106:16	106:16	5	
water	106:16	0:0	6	;
else	107:12	108:24	4
stmts	108:16	108:24	5	
water	108:16	0:0	6	ret
op	108:20	0:0	6	=
op	108:22	0:0	6	-
water	108:23	0:0	6	1
water	108:24	0:0	6	;
break	109:12	109:17	4	
label	110:8	110:17	4	case 0 x7f :
call	111:12	112:27	4	msg_Dbg
arg	111:21	111:28	5	p_demux
water	111:21	0:0	6	p_demux
arg	111:30	111:77	5	"ignored proprietary SMF Meta Event (%d bytes)"
water	111:30	0:0	6	"ignored proprietary SMF Meta Event (%d bytes)"
arg	112:21	112:27	5	length
water	112:21	0:0	6	length
water	112:28	0:0	4	;
break	113:12	113:17	4	
label	114:8	114:15	4	default :
call	115:12	116:34	4	msg_Warn
arg	115:22	115:29	5	p_demux
water	115:22	0:0	6	p_demux
arg	115:31	115:78	5	"unknown SMF Meta Event type 0x%02X (%d bytes)"
water	115:31	0:0	6	"unknown SMF Meta Event type 0x%02X (%d bytes)"
arg	116:22	116:26	5	type
water	116:22	0:0	6	type
arg	116:28	116:34	5	length
water	116:28	0:0	6	length
water	116:35	0:0	4	;
water	117:4	0:0	4	}
call	118:4	118:17	2	free
arg	118:10	118:17	3	payload
water	118:10	0:0	4	payload
water	118:18	0:0	2	;
return	119:4	119:14	2	ret
water	119:11	0:0	3	ret
