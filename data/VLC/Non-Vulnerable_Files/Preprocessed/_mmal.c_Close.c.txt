func	2:0	31:0	0	static void	Close
params	2:17	0:0	1	
param	2:18	2:38	2	vlc_object_t *	object
stmnts	0:0	30:21	1	
decl	4:4	4:49	2	vout_display_t	*vd
op	4:23	0:0	2	=
water	4:25	0:0	2	(
water	4:26	0:0	2	vout_display_t
op	4:41	0:0	2	*
water	4:42	0:0	2	)
water	4:43	0:0	2	object
decl	5:4	5:37	2	vout_display_sys_t	*sys
op	5:28	0:0	2	=
water	5:30	0:0	2	vd
op	5:32	0:0	2	->
water	5:34	0:0	2	sys
water	6:4	0:0	2	unsigned
water	6:13	0:0	2	i
water	6:14	0:0	2	;
call	7:4	7:51	2	vc_tv_unregister_callback_full
arg	7:35	7:47	3	tvservice_cb
water	7:35	0:0	4	tvservice_cb
arg	7:49	7:51	3	vd
water	7:49	0:0	4	vd
water	7:52	0:0	2	;
if	8:4	9:21	2	(sys -> dmx_handle)
cond	8:8	8:13	3	sys -> dmx_handle
water	8:8	0:0	4	sys
op	8:11	0:0	4	->
water	8:13	0:0	4	dmx_handle
stmts	9:8	9:21	3	
call	9:8	9:20	4	close_dmx
arg	9:18	9:20	5	vd
water	9:18	0:0	6	vd
water	9:21	0:0	4	;
if	10:4	11:50	2	(sys -> component && sys -> component -> control -> is_enabled)
cond	10:8	10:51	3	sys -> component && sys -> component -> control -> is_enabled
water	10:8	0:0	4	sys
op	10:11	0:0	4	->
water	10:13	0:0	4	component
op	10:23	0:0	4	&&
water	10:26	0:0	4	sys
op	10:29	0:0	4	->
water	10:31	0:0	4	component
op	10:40	0:0	4	->
water	10:42	0:0	4	control
op	10:49	0:0	4	->
water	10:51	0:0	4	is_enabled
stmts	11:8	11:50	3	
call	11:8	11:49	4	mmal_port_disable
arg	11:26	11:49	5	sys->component->control
water	11:26	0:0	6	sys
op	11:29	0:0	6	->
water	11:31	0:0	6	component
op	11:40	0:0	6	->
water	11:42	0:0	6	control
water	11:50	0:0	4	;
if	12:4	13:37	2	(sys -> input && sys -> input -> is_enabled)
cond	12:8	12:34	3	sys -> input && sys -> input -> is_enabled
water	12:8	0:0	4	sys
op	12:11	0:0	4	->
water	12:13	0:0	4	input
op	12:19	0:0	4	&&
water	12:22	0:0	4	sys
op	12:25	0:0	4	->
water	12:27	0:0	4	input
op	12:32	0:0	4	->
water	12:34	0:0	4	is_enabled
stmts	13:8	13:37	3	
call	13:8	13:36	4	mmal_port_disable
arg	13:26	13:36	5	sys->input
water	13:26	0:0	6	sys
op	13:29	0:0	6	->
water	13:31	0:0	6	input
water	13:37	0:0	4	;
if	14:4	15:46	2	(sys -> component && sys -> component -> is_enabled)
cond	14:8	14:42	3	sys -> component && sys -> component -> is_enabled
water	14:8	0:0	4	sys
op	14:11	0:0	4	->
water	14:13	0:0	4	component
op	14:23	0:0	4	&&
water	14:26	0:0	4	sys
op	14:29	0:0	4	->
water	14:31	0:0	4	component
op	14:40	0:0	4	->
water	14:42	0:0	4	is_enabled
stmts	15:8	15:46	3	
call	15:8	15:45	4	mmal_component_disable
arg	15:31	15:45	5	sys->component
water	15:31	0:0	6	sys
op	15:34	0:0	6	->
water	15:36	0:0	6	component
water	15:46	0:0	4	;
if	16:4	17:36	2	(sys -> pool)
cond	16:8	16:13	3	sys -> pool
water	16:8	0:0	4	sys
op	16:11	0:0	4	->
water	16:13	0:0	4	pool
stmts	17:8	17:36	3	
call	17:8	17:35	4	mmal_pool_destroy
arg	17:26	17:35	5	sys->pool
water	17:26	0:0	6	sys
op	17:29	0:0	6	->
water	17:31	0:0	6	pool
water	17:36	0:0	4	;
if	18:4	19:46	2	(sys -> component)
cond	18:8	18:13	3	sys -> component
water	18:8	0:0	4	sys
op	18:11	0:0	4	->
water	18:13	0:0	4	component
stmts	19:8	19:46	3	
call	19:8	19:45	4	mmal_component_release
arg	19:31	19:45	5	sys->component
water	19:31	0:0	6	sys
op	19:34	0:0	6	->
water	19:36	0:0	6	component
water	19:46	0:0	4	;
if	20:4	21:46	2	(sys -> picture_pool)
cond	20:8	20:13	3	sys -> picture_pool
water	20:8	0:0	4	sys
op	20:11	0:0	4	->
water	20:13	0:0	4	picture_pool
stmts	21:8	21:46	3	
call	21:8	21:45	4	picture_pool_Delete
arg	21:28	21:45	5	sys->picture_pool
water	21:28	0:0	6	sys
op	21:31	0:0	6	->
water	21:33	0:0	6	picture_pool
water	21:46	0:0	4	;
else	22:4	25:49	2
stmts	23:8	25:49	3	
for	23:8	25:49	4	(i = 0 ;i < sys -> num_buffers;++ i)
forinit	23:13	23:18	5	i = 0 ;
water	23:13	0:0	6	i
op	23:15	0:0	6	=
water	23:17	0:0	6	0
water	23:18	0:0	6	;
cond	23:20	23:29	5	i < sys -> num_buffers
water	23:20	0:0	6	i
op	23:22	0:0	6	<
water	23:24	0:0	6	sys
op	23:27	0:0	6	->
water	23:29	0:0	6	num_buffers
forexpr	23:42	23:44	5	++ i
op	23:42	0:0	6	++
water	23:44	0:0	6	i
stmts	24:12	25:49	5	
if	24:12	25:49	6	(sys -> pictures [ i ])
cond	24:16	24:31	7	sys -> pictures [ i ]
water	24:16	0:0	8	sys
op	24:19	0:0	8	->
water	24:21	0:0	8	pictures
op	24:29	0:0	8	[
water	24:30	0:0	8	i
op	24:31	0:0	8	]
stmts	25:16	25:49	7	
call	25:16	25:48	8	picture_Release
arg	25:32	25:48	9	sys->pictures[i]
water	25:32	0:0	10	sys
op	25:35	0:0	10	->
water	25:37	0:0	10	pictures
op	25:45	0:0	10	[
water	25:46	0:0	10	i
op	25:47	0:0	10	]
water	25:49	0:0	8	;
call	26:4	26:40	2	vlc_mutex_destroy
arg	26:22	26:40	3	&sys->buffer_mutex
op	26:22	0:0	4	&
water	26:23	0:0	4	sys
op	26:26	0:0	4	->
water	26:28	0:0	4	buffer_mutex
water	26:41	0:0	2	;
call	27:4	27:38	2	vlc_cond_destroy
arg	27:21	27:38	3	&sys->buffer_cond
op	27:21	0:0	4	&
water	27:22	0:0	4	sys
op	27:25	0:0	4	->
water	27:27	0:0	4	buffer_cond
water	27:39	0:0	2	;
call	28:4	28:40	2	vlc_mutex_destroy
arg	28:22	28:40	3	&sys->manage_mutex
op	28:22	0:0	4	&
water	28:23	0:0	4	sys
op	28:26	0:0	4	->
water	28:28	0:0	4	manage_mutex
water	28:41	0:0	2	;
call	29:4	29:12	2	free
arg	29:9	29:12	3	sys
water	29:9	0:0	4	sys
water	29:13	0:0	2	;
call	30:4	30:20	2	bcm_host_deinit
water	30:21	0:0	2	;
