func	2:0	90:0	0	static int	DrawStatus
params	2:21	0:0	1	
param	2:22	2:41	2	intf_thread_t *	intf
stmnts	0:0	89:12	1	
decl	4:4	4:37	2	intf_sys_t	*sys
op	4:24	0:0	2	=
water	4:26	0:0	2	intf
op	4:30	0:0	2	->
water	4:32	0:0	2	p_sys
decl	5:4	5:42	2	input_thread_t	*p_input
op	5:28	0:0	2	=
water	5:30	0:0	2	sys
op	5:33	0:0	2	->
water	5:35	0:0	2	p_input
decl	6:4	6:45	2	playlist_t	*p_playlist
op	6:31	0:0	2	=
call	6:33	6:44	3	pl_Get
arg	6:40	6:44	4	intf
water	6:40	0:0	5	intf
decl	7:4	7:38	2	char	*name
op	7:15	0:0	2	=
call	7:17	7:37	3	_
arg	7:19	7:37	4	"VLC media player"
water	7:19	0:0	5	"VLC media player"
decl	8:4	8:66	2	const size_t	name_len
op	8:26	0:0	2	=
call	8:28	8:39	3	strlen
arg	8:35	8:39	4	name
water	8:35	0:0	5	name
op	8:41	0:0	2	+
op	8:43	0:0	2	sizeof
water	8:49	0:0	2	(
water	8:50	0:0	2	PACKAGE_VERSION
water	8:65	0:0	2	)
decl	9:4	9:13	2	int	y
op	9:10	0:0	2	=
water	9:12	0:0	2	0
decl	10:4	10:38	2	const char	*repeat
water	10:22	0:0	2	,
decl	10:4	10:38	2	const char	*loop
water	10:29	0:0	2	,
decl	10:4	10:38	2	const char	*random
decl	12:4	12:33	2	int	padding
op	12:16	0:0	2	=
water	12:18	0:0	2	COLS
op	12:23	0:0	2	-
water	12:25	0:0	2	name_len
if	13:4	14:19	2	(padding < 0)
cond	13:8	13:18	3	padding < 0
water	13:8	0:0	4	padding
op	13:16	0:0	4	<
water	13:18	0:0	4	0
stmts	14:8	14:19	3	
water	14:8	0:0	4	padding
op	14:16	0:0	4	=
water	14:18	0:0	4	0
water	14:19	0:0	4	;
call	15:4	15:21	2	attrset
arg	15:12	15:21	3	A_REVERSE
water	15:12	0:0	4	A_REVERSE
water	15:22	0:0	2	;
if	16:4	16:44	2	(sys -> color)
cond	16:8	16:13	3	sys -> color
water	16:8	0:0	4	sys
op	16:11	0:0	4	->
water	16:13	0:0	4	color
stmts	16:20	16:44	3	
call	16:20	16:43	4	color_set
arg	16:30	16:37	5	C_TITLE
water	16:30	0:0	6	C_TITLE
arg	16:39	16:43	5	NULL
water	16:39	0:0	6	NULL
water	16:44	0:0	4	;
call	17:4	17:28	2	DrawEmptyLine
arg	17:18	17:19	3	y
water	17:18	0:0	4	y
arg	17:21	17:22	3	0
water	17:21	0:0	4	0
arg	17:24	17:28	3	COLS
water	17:24	0:0	4	COLS
water	17:29	0:0	2	;
call	18:4	18:68	2	mvnprintw
arg	18:14	18:17	3	y++
water	18:14	0:0	4	y
op	18:15	0:0	4	++
arg	18:19	18:30	3	padding/2
water	18:19	0:0	4	padding
op	18:27	0:0	4	/
water	18:29	0:0	4	2
arg	18:32	18:36	3	COLS
water	18:32	0:0	4	COLS
arg	18:38	18:45	3	"%s %s"
water	18:38	0:0	4	"%s %s"
arg	18:47	18:51	3	name
water	18:47	0:0	4	name
arg	18:53	18:68	3	PACKAGE_VERSION
water	18:53	0:0	4	PACKAGE_VERSION
water	18:69	0:0	2	;
if	19:4	19:45	2	(sys -> color)
cond	19:8	19:13	3	sys -> color
water	19:8	0:0	4	sys
op	19:11	0:0	4	->
water	19:13	0:0	4	color
stmts	19:20	19:45	3	
call	19:20	19:44	4	color_set
arg	19:30	19:38	5	C_STATUS
water	19:30	0:0	6	C_STATUS
arg	19:40	19:44	5	NULL
water	19:40	0:0	6	NULL
water	19:45	0:0	4	;
call	20:4	20:21	2	attroff
arg	20:12	20:21	3	A_REVERSE
water	20:12	0:0	4	A_REVERSE
water	20:22	0:0	2	;
water	21:4	0:0	2	y
op	21:5	0:0	2	++
water	21:7	0:0	2	;
water	22:4	0:0	2	repeat
op	22:11	0:0	2	=
call	22:13	22:45	2	var_GetBool
arg	22:25	22:35	3	p_playlist
water	22:25	0:0	4	p_playlist
arg	22:37	22:45	3	"repeat"
water	22:37	0:0	4	"repeat"
water	22:47	0:0	2	?
call	22:49	22:62	2	_
arg	22:51	22:62	3	"[Repeat] "
water	22:51	0:0	4	"[Repeat] "
water	22:64	0:0	2	:
water	22:66	0:0	2	""
water	22:68	0:0	2	;
water	23:4	0:0	2	random
op	23:11	0:0	2	=
call	23:13	23:45	2	var_GetBool
arg	23:25	23:35	3	p_playlist
water	23:25	0:0	4	p_playlist
arg	23:37	23:45	3	"random"
water	23:37	0:0	4	"random"
water	23:47	0:0	2	?
call	23:49	23:62	2	_
arg	23:51	23:62	3	"[Random] "
water	23:51	0:0	4	"[Random] "
water	23:64	0:0	2	:
water	23:66	0:0	2	""
water	23:68	0:0	2	;
water	24:4	0:0	2	loop
op	24:11	0:0	2	=
call	24:13	24:43	2	var_GetBool
arg	24:25	24:35	3	p_playlist
water	24:25	0:0	4	p_playlist
arg	24:37	24:43	3	"loop"
water	24:37	0:0	4	"loop"
water	24:47	0:0	2	?
call	24:49	24:59	2	_
arg	24:51	24:59	3	"[Loop]"
water	24:51	0:0	4	"[Loop]"
water	24:64	0:0	2	:
water	24:66	0:0	2	""
water	24:68	0:0	2	;
if	25:4	77:4	2	(p_input && ! p_input -> b_dead)
cond	25:8	25:29	3	p_input && ! p_input -> b_dead
water	25:8	0:0	4	p_input
op	25:16	0:0	4	&&
op	25:19	0:0	4	!
water	25:20	0:0	4	p_input
op	25:27	0:0	4	->
water	25:29	0:0	4	b_dead
stmts	25:37	77:4	3	
water	25:37	0:0	4	{
decl	26:8	26:23	4	vlc_value_t	val
decl	27:8	27:24	4	char	*path
water	27:18	0:0	4	,
decl	27:8	27:24	4	char	*uri
water	28:8	0:0	4	uri
op	28:12	0:0	4	=
call	28:14	28:54	4	input_item_GetURI
arg	28:32	28:54	5	input_GetItem(p_input)
call	28:32	28:53	6	input_GetItem
arg	28:46	28:53	7	p_input
water	28:46	0:0	8	p_input
water	28:55	0:0	4	;
water	29:8	0:0	4	path
op	29:13	0:0	4	=
call	29:15	29:28	4	make_path
arg	29:25	29:28	5	uri
water	29:25	0:0	6	uri
water	29:29	0:0	4	;
call	30:8	30:66	4	mvnprintw
arg	30:18	30:21	5	y++
water	30:18	0:0	6	y
op	30:19	0:0	6	++
arg	30:23	30:24	5	0
water	30:23	0:0	6	0
arg	30:26	30:30	5	COLS
water	30:26	0:0	6	COLS
arg	30:32	30:51	5	_(" Source   : %s")
call	30:32	30:50	6	_
arg	30:34	30:50	7	" Source   : %s"
water	30:34	0:0	8	" Source   : %s"
arg	30:53	30:66	5	path?path:uri
water	30:53	0:0	6	path
water	30:57	0:0	6	?
water	30:58	0:0	6	path
water	30:62	0:0	6	:
water	30:63	0:0	6	uri
water	30:67	0:0	4	;
call	31:8	31:16	4	free
arg	31:13	31:16	5	uri
water	31:13	0:0	6	uri
water	31:17	0:0	4	;
call	32:8	32:17	4	free
arg	32:13	32:17	5	path
water	32:13	0:0	6	path
water	32:18	0:0	4	;
call	33:8	33:38	4	var_Get
arg	33:16	33:23	5	p_input
water	33:16	0:0	6	p_input
arg	33:25	33:32	5	"state"
water	33:25	0:0	6	"state"
arg	33:34	33:38	5	&val
op	33:34	0:0	6	&
water	33:35	0:0	6	val
water	33:39	0:0	4	;
switch	34:8	76:8	4	(val . i_int)
cond	34:15	34:19	5	val . i_int
water	34:15	0:0	6	val
op	34:18	0:0	6	.
water	34:19	0:0	6	i_int
stmts	35:8	76:8	5	
water	35:8	0:0	6	{
water	36:12	0:0	6	static
water	36:19	0:0	6	const
water	36:25	0:0	6	char
op	36:30	0:0	6	*
water	36:31	0:0	6	input_state
op	36:42	0:0	6	[
op	36:43	0:0	6	]
op	36:45	0:0	6	=
water	36:47	0:0	6	{
op	37:16	0:0	6	[
water	37:17	0:0	6	PLAYING_S
op	37:26	0:0	6	]
op	37:28	0:0	6	=
water	37:30	0:0	6	" State    : Playing %s%s%s"
water	37:58	0:0	6	,
op	38:16	0:0	6	[
water	38:17	0:0	6	OPENING_S
op	38:26	0:0	6	]
op	38:28	0:0	6	=
water	38:30	0:0	6	" State    : Opening/Connecting %s%s%s"
water	38:69	0:0	6	,
op	39:16	0:0	6	[
water	39:17	0:0	6	PAUSE_S
op	39:24	0:0	6	]
op	39:28	0:0	6	=
water	39:30	0:0	6	" State    : Paused %s%s%s"
water	39:57	0:0	6	,
water	40:12	0:0	6	}
water	40:13	0:0	6	;
decl	41:12	41:40	6	char	buf1[MSTRTIME_MAX_SIZE]
decl	42:12	42:40	6	char	buf2[MSTRTIME_MAX_SIZE]
decl	43:12	43:24	6	float	volume
label	44:8	44:19	6	case INIT_S :
label	45:8	45:18	6	case END_S :
water	46:12	0:0	6	y
op	46:14	0:0	6	+=
water	46:17	0:0	6	2
water	46:18	0:0	6	;
break	47:12	47:17	6	
label	48:8	48:22	6	case PLAYING_S :
label	49:8	49:22	6	case OPENING_S :
label	50:8	50:20	6	case PAUSE_S :
call	51:12	52:44	6	mvnprintw
arg	51:22	51:25	7	y++
water	51:22	0:0	8	y
op	51:23	0:0	8	++
arg	51:27	51:28	7	0
water	51:27	0:0	8	0
arg	51:30	51:34	7	COLS
water	51:30	0:0	8	COLS
arg	51:36	51:61	7	_(input_state[val.i_int])
call	51:36	51:60	8	_
arg	51:38	51:60	9	input_state[val.i_int]
water	51:38	0:0	10	input_state
op	51:49	0:0	10	[
water	51:50	0:0	10	val
op	51:53	0:0	10	.
water	51:54	0:0	10	i_int
op	51:59	0:0	10	]
arg	52:24	52:30	7	repeat
water	52:24	0:0	8	repeat
arg	52:32	52:38	7	random
water	52:32	0:0	8	random
arg	52:40	52:44	7	loop
water	52:40	0:0	8	loop
water	52:45	0:0	6	;
label	53:8	53:15	6	default :
call	54:12	54:41	6	var_Get
arg	54:20	54:27	7	p_input
water	54:20	0:0	8	p_input
arg	54:29	54:35	7	"time"
water	54:29	0:0	8	"time"
arg	54:37	54:41	7	&val
op	54:37	0:0	8	&
water	54:38	0:0	8	val
water	54:42	0:0	6	;
call	55:12	55:55	6	secstotimestr
arg	55:26	55:30	7	buf1
water	55:26	0:0	8	buf1
arg	55:32	55:55	7	val.i_time/CLOCK_FREQ
water	55:32	0:0	8	val
op	55:35	0:0	8	.
water	55:36	0:0	8	i_time
op	55:43	0:0	8	/
water	55:45	0:0	8	CLOCK_FREQ
water	55:56	0:0	6	;
call	56:12	56:43	6	var_Get
arg	56:20	56:27	7	p_input
water	56:20	0:0	8	p_input
arg	56:29	56:37	7	"length"
water	56:29	0:0	8	"length"
arg	56:39	56:43	7	&val
op	56:39	0:0	8	&
water	56:40	0:0	8	val
water	56:44	0:0	6	;
call	57:12	57:55	6	secstotimestr
arg	57:26	57:30	7	buf2
water	57:26	0:0	8	buf2
arg	57:32	57:55	7	val.i_time/CLOCK_FREQ
water	57:32	0:0	8	val
op	57:35	0:0	8	.
water	57:36	0:0	8	i_time
op	57:43	0:0	8	/
water	57:45	0:0	8	CLOCK_FREQ
water	57:56	0:0	6	;
call	58:12	58:70	6	mvnprintw
arg	58:22	58:25	7	y++
water	58:22	0:0	8	y
op	58:23	0:0	8	++
arg	58:27	58:28	7	0
water	58:27	0:0	8	0
arg	58:30	58:34	7	COLS
water	58:30	0:0	8	COLS
arg	58:36	58:58	7	_(" Position : %s/%s")
call	58:36	58:57	8	_
arg	58:38	58:57	9	" Position : %s/%s"
water	58:38	0:0	10	" Position : %s/%s"
arg	58:60	58:64	7	buf1
water	58:60	0:0	8	buf1
arg	58:66	58:70	7	buf2
water	58:66	0:0	8	buf2
water	58:71	0:0	6	;
water	59:12	0:0	6	volume
op	59:19	0:0	6	=
call	59:21	59:50	6	playlist_VolumeGet
arg	59:40	59:50	7	p_playlist
water	59:40	0:0	8	p_playlist
water	59:51	0:0	6	;
decl	60:12	60:51	6	int	mute
op	60:21	0:0	6	=
call	60:23	60:50	7	playlist_MuteGet
arg	60:40	60:50	8	p_playlist
water	60:40	0:0	9	p_playlist
call	61:12	64:45	6	mvnprintw
arg	61:22	61:25	7	y++
water	61:22	0:0	8	y
op	61:23	0:0	8	++
arg	61:27	61:28	7	0
water	61:27	0:0	8	0
arg	61:30	61:34	7	COLS
water	61:30	0:0	8	COLS
arg	62:22	63:85	7	mute?_(" Volume   : Mute"):volume>=0.f?_(" Volume   : %3ld%%"):_(" Volume   : ----")
water	62:22	0:0	8	mute
water	62:27	0:0	8	?
call	62:29	62:49	8	_
arg	62:31	62:49	9	" Volume   : Mute"
water	62:31	0:0	10	" Volume   : Mute"
water	62:51	0:0	8	:
water	63:22	0:0	8	volume
op	63:29	0:0	8	>=
water	63:32	0:0	8	0
op	63:33	0:0	8	.
water	63:34	0:0	8	f
water	63:36	0:0	8	?
call	63:38	63:60	8	_
arg	63:40	63:60	9	" Volume   : %3ld%%"
water	63:40	0:0	10	" Volume   : %3ld%%"
water	63:62	0:0	8	:
call	63:64	63:84	8	_
arg	63:66	63:84	9	" Volume   : ----"
water	63:66	0:0	10	" Volume   : ----"
arg	64:22	64:45	7	lroundf(volume*100.f)
call	64:22	64:44	8	lroundf
arg	64:30	64:44	9	volume*100.f
water	64:30	0:0	10	volume
op	64:37	0:0	10	*
water	64:39	0:0	10	100
op	64:42	0:0	10	.
water	64:43	0:0	10	f
water	64:46	0:0	6	;
if	65:12	70:12	6	(!var_Get (p_input ,"title" ,& val ))
cond	65:16	65:47	7	!var_Get (p_input ,"title" ,& val )
op	65:16	0:0	8	!
call	65:17	65:47	8	var_Get
arg	65:25	65:32	9	p_input
water	65:25	0:0	10	p_input
arg	65:34	65:41	9	"title"
water	65:34	0:0	10	"title"
arg	65:43	65:47	9	&val
op	65:43	0:0	10	&
water	65:44	0:0	10	val
stmts	65:50	70:12	7	
water	65:50	0:0	8	{
decl	66:16	66:70	8	int	i_title_count
op	66:34	0:0	8	=
call	66:36	66:69	9	var_CountChoices
arg	66:53	66:60	10	p_input
water	66:53	0:0	11	p_input
arg	66:62	66:69	10	"title"
water	66:62	0:0	11	"title"
if	67:16	69:56	8	(i_title_count > 0)
cond	67:20	67:36	9	i_title_count > 0
water	67:20	0:0	10	i_title_count
op	67:34	0:0	10	>
water	67:36	0:0	10	0
stmts	68:20	69:56	9	
call	68:20	69:55	10	mvnprintw
arg	68:30	68:33	11	y++
water	68:30	0:0	12	y
op	68:31	0:0	12	++
arg	68:35	68:36	11	0
water	68:35	0:0	12	0
arg	68:38	68:42	11	COLS
water	68:38	0:0	12	COLS
arg	68:44	68:73	11	_(" Title    : %"PRId64"/%d")
call	68:44	68:72	12	_
arg	68:46	68:72	13	" Title    : %"PRId64"/%d"
water	68:46	0:0	14	" Title    : %"
water	68:61	0:0	14	PRId64
water	68:67	0:0	14	"/%d"
arg	69:31	69:40	11	val.i_int
water	69:31	0:0	12	val
op	69:34	0:0	12	.
water	69:35	0:0	12	i_int
arg	69:42	69:55	11	i_title_count
water	69:42	0:0	12	i_title_count
water	69:56	0:0	10	;
water	70:12	0:0	8	}
if	71:12	75:12	6	(!var_Get (p_input ,"chapter" ,& val ))
cond	71:16	71:49	7	!var_Get (p_input ,"chapter" ,& val )
op	71:16	0:0	8	!
call	71:17	71:49	8	var_Get
arg	71:25	71:32	9	p_input
water	71:25	0:0	10	p_input
arg	71:34	71:43	9	"chapter"
water	71:34	0:0	10	"chapter"
arg	71:45	71:49	9	&val
op	71:45	0:0	10	&
water	71:46	0:0	10	val
stmts	71:52	75:12	7	
water	71:52	0:0	8	{
decl	72:16	72:74	8	int	i_chapter_count
op	72:36	0:0	8	=
call	72:38	72:73	9	var_CountChoices
arg	72:55	72:62	10	p_input
water	72:55	0:0	11	p_input
arg	72:64	72:73	10	"chapter"
water	72:64	0:0	11	"chapter"
if	73:16	74:58	8	(i_chapter_count > 0)
cond	73:20	73:38	9	i_chapter_count > 0
water	73:20	0:0	10	i_chapter_count
op	73:36	0:0	10	>
water	73:38	0:0	10	0
stmts	73:41	74:58	9	
call	73:41	74:57	10	mvnprintw
arg	73:51	73:54	11	y++
water	73:51	0:0	12	y
op	73:52	0:0	12	++
arg	73:56	73:57	11	0
water	73:56	0:0	12	0
arg	73:59	73:63	11	COLS
water	73:59	0:0	12	COLS
arg	73:65	73:94	11	_(" Chapter  : %"PRId64"/%d")
call	73:65	73:93	12	_
arg	73:67	73:93	13	" Chapter  : %"PRId64"/%d"
water	73:67	0:0	14	" Chapter  : %"
water	73:82	0:0	14	PRId64
water	73:88	0:0	14	"/%d"
arg	74:31	74:40	11	val.i_int
water	74:31	0:0	12	val
op	74:34	0:0	12	.
water	74:35	0:0	12	i_int
arg	74:42	74:57	11	i_chapter_count
water	74:42	0:0	12	i_chapter_count
water	74:58	0:0	10	;
water	75:12	0:0	8	}
water	76:8	0:0	6	}
water	77:4	0:0	4	}
else	77:6	82:4	2
stmts	77:11	82:4	3	
water	77:11	0:0	4	{
call	78:8	78:64	4	mvnprintw
arg	78:18	78:21	5	y++
water	78:18	0:0	6	y
op	78:19	0:0	6	++
arg	78:23	78:24	5	0
water	78:23	0:0	6	0
arg	78:26	78:30	5	COLS
water	78:26	0:0	6	COLS
arg	78:32	78:64	5	_(" Source: <no current item> ")
call	78:32	78:63	6	_
arg	78:34	78:63	7	" Source: <no current item> "
water	78:34	0:0	8	" Source: <no current item> "
water	78:65	0:0	4	;
call	79:8	79:63	4	mvnprintw
arg	79:18	79:21	5	y++
water	79:18	0:0	6	y
op	79:19	0:0	6	++
arg	79:23	79:24	5	0
water	79:23	0:0	6	0
arg	79:26	79:30	5	COLS
water	79:26	0:0	6	COLS
arg	79:32	79:41	5	" %s%s%s"
water	79:32	0:0	6	" %s%s%s"
arg	79:43	79:49	5	repeat
water	79:43	0:0	6	repeat
arg	79:51	79:57	5	random
water	79:51	0:0	6	random
arg	79:59	79:63	5	loop
water	79:59	0:0	6	loop
water	79:64	0:0	4	;
call	80:8	80:52	4	mvnprintw
arg	80:18	80:21	5	y++
water	80:18	0:0	6	y
op	80:19	0:0	6	++
arg	80:23	80:24	5	0
water	80:23	0:0	6	0
arg	80:26	80:30	5	COLS
water	80:26	0:0	6	COLS
arg	80:32	80:52	5	_(" [ h for help ]")
call	80:32	80:51	6	_
arg	80:34	80:51	7	" [ h for help ]"
water	80:34	0:0	8	" [ h for help ]"
water	80:53	0:0	4	;
call	81:8	81:34	4	DrawEmptyLine
arg	81:22	81:25	5	y++
water	81:22	0:0	6	y
op	81:23	0:0	6	++
arg	81:27	81:28	5	0
water	81:27	0:0	6	0
arg	81:30	81:34	5	COLS
water	81:30	0:0	6	COLS
water	81:35	0:0	4	;
water	82:4	0:0	4	}
if	83:4	83:46	2	(sys -> color)
cond	83:8	83:13	3	sys -> color
water	83:8	0:0	4	sys
op	83:11	0:0	4	->
water	83:13	0:0	4	color
stmts	83:20	83:46	3	
call	83:20	83:45	4	color_set
arg	83:30	83:39	5	C_DEFAULT
water	83:30	0:0	6	C_DEFAULT
arg	83:41	83:45	5	NULL
water	83:41	0:0	6	NULL
water	83:46	0:0	4	;
call	84:4	84:34	2	DrawBox
arg	84:12	84:15	3	y++
water	84:12	0:0	4	y
op	84:13	0:0	4	++
arg	84:17	84:18	3	1
water	84:17	0:0	4	1
arg	84:20	84:30	3	sys->color
water	84:20	0:0	4	sys
op	84:23	0:0	4	->
water	84:25	0:0	4	color
arg	84:32	84:34	3	""
water	84:32	0:0	4	""
water	84:35	0:0	2	;
call	85:4	85:30	2	DrawEmptyLine
arg	85:18	85:19	3	y
water	85:18	0:0	4	y
arg	85:21	85:22	3	1
water	85:21	0:0	4	1
arg	85:24	85:30	3	COLS-2
water	85:24	0:0	4	COLS
op	85:28	0:0	4	-
water	85:29	0:0	4	2
water	85:31	0:0	2	;
if	86:4	87:75	2	(p_input)
cond	86:8	86:8	3	p_input
water	86:8	0:0	4	p_input
stmts	87:8	87:75	3	
call	87:8	87:74	4	DrawLine
arg	87:17	87:18	5	y
water	87:17	0:0	6	y
arg	87:20	87:21	5	1
water	87:20	0:0	6	1
arg	87:23	87:74	5	(int)((COLS-2)*var_GetFloat(p_input,"position"))
call	87:23	87:73	6	(int)
arg	87:29	87:73	7	(COLS-2)*var_GetFloat(p_input,"position")
water	87:29	0:0	8	(
water	87:30	0:0	8	COLS
op	87:34	0:0	8	-
water	87:35	0:0	8	2
water	87:36	0:0	8	)
call	87:38	87:72	8	*var_GetFloat
arg	87:53	87:60	9	p_input
water	87:53	0:0	10	p_input
arg	87:62	87:72	9	"position"
water	87:62	0:0	10	"position"
water	87:75	0:0	4	;
water	88:4	0:0	2	y
op	88:6	0:0	2	+=
water	88:9	0:0	2	2
water	88:10	0:0	2	;
return	89:4	89:12	2	y
water	89:11	0:0	3	y
