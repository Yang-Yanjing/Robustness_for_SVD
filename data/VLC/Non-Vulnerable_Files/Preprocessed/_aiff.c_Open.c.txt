func	2:0	95:0	0	static int	Open
params	2:15	0:0	1	
param	2:17	2:38	2	vlc_object_t *	p_this
stmnts	0:0	94:23	1	
decl	4:4	4:43	2	demux_t	*p_demux
op	4:25	0:0	2	=
water	4:27	0:0	2	(
water	4:28	0:0	2	demux_t
op	4:35	0:0	2	*
water	4:36	0:0	2	)
water	4:37	0:0	2	p_this
decl	5:4	5:22	2	demux_sys_t	*p_sys
decl	6:4	6:25	2	const uint8_t	*p_peek
if	7:4	8:27	2	(stream_Peek (p_demux -> s ,& p_peek ,12 ) < 12)
cond	7:8	7:49	3	stream_Peek (p_demux -> s ,& p_peek ,12 ) < 12
call	7:8	7:45	4	stream_Peek
arg	7:21	7:31	5	p_demux->s
water	7:21	0:0	6	p_demux
op	7:28	0:0	6	->
water	7:30	0:0	6	s
arg	7:33	7:40	5	&p_peek
op	7:33	0:0	6	&
water	7:34	0:0	6	p_peek
arg	7:42	7:45	5	12
water	7:42	0:0	6	12
op	7:47	0:0	4	<
water	7:49	0:0	4	12
stmts	8:8	8:27	3	
return	8:8	8:27	4	VLC_EGENERIC
water	8:15	0:0	5	VLC_EGENERIC
if	9:4	10:27	2	(memcmp (p_peek ,"FORM" ,4 ) ||memcmp (& p_peek [ 8 ] ,"AIFF" ,4 ))
cond	9:8	9:69	3	memcmp (p_peek ,"FORM" ,4 ) ||memcmp (& p_peek [ 8 ] ,"AIFF" ,4 )
call	9:8	9:34	4	memcmp
arg	9:16	9:22	5	p_peek
water	9:16	0:0	6	p_peek
arg	9:24	9:30	5	"FORM"
water	9:24	0:0	6	"FORM"
arg	9:32	9:34	5	4
water	9:32	0:0	6	4
op	9:36	0:0	4	||
call	9:39	9:69	4	memcmp
arg	9:47	9:57	5	&p_peek[8]
op	9:47	0:0	6	&
water	9:48	0:0	6	p_peek
op	9:54	0:0	6	[
water	9:55	0:0	6	8
op	9:56	0:0	6	]
arg	9:59	9:65	5	"AIFF"
water	9:59	0:0	6	"AIFF"
arg	9:67	9:69	5	4
water	9:67	0:0	6	4
stmts	10:8	10:27	3	
return	10:8	10:27	4	VLC_EGENERIC
water	10:15	0:0	5	VLC_EGENERIC
call	12:4	12:38	2	stream_Read
arg	12:17	12:27	3	p_demux->s
water	12:17	0:0	4	p_demux
op	12:24	0:0	4	->
water	12:26	0:0	4	s
arg	12:29	12:33	3	NULL
water	12:29	0:0	4	NULL
arg	12:35	12:38	3	12
water	12:35	0:0	4	12
water	12:39	0:0	2	;
call	14:4	14:22	2	DEMUX_INIT_COMMON
water	14:23	0:0	2	;
water	14:25	0:0	2	p_sys
op	14:31	0:0	2	=
water	14:33	0:0	2	p_demux
op	14:40	0:0	2	->
water	14:42	0:0	2	p_sys
water	14:47	0:0	2	;
call	15:4	15:47	2	es_format_Init
arg	15:20	15:31	3	&p_sys->fmt
op	15:20	0:0	4	&
water	15:21	0:0	4	p_sys
op	15:26	0:0	4	->
water	15:28	0:0	4	fmt
arg	15:33	15:43	3	UNKNOWN_ES
water	15:33	0:0	4	UNKNOWN_ES
arg	15:45	15:47	3	0
water	15:45	0:0	4	0
water	15:48	0:0	2	;
water	16:4	0:0	2	p_sys
op	16:9	0:0	2	->
water	16:11	0:0	2	i_time
op	16:18	0:0	2	=
water	16:20	0:0	2	0
water	16:21	0:0	2	;
water	17:4	0:0	2	p_sys
op	17:9	0:0	2	->
water	17:11	0:0	2	i_ssnd_pos
op	17:22	0:0	2	=
op	17:24	0:0	2	-
water	17:25	0:0	2	1
water	17:26	0:0	2	;
for	18:4	68:4	2	(;;)
forinit	18:9	18:9	3	;
water	18:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	19:4	68:4	3	
water	19:4	0:0	4	{
if	20:8	21:22	4	(stream_Peek (p_demux -> s ,& p_peek ,8 ) < 8)
cond	20:12	20:52	5	stream_Peek (p_demux -> s ,& p_peek ,8 ) < 8
call	20:12	20:48	6	stream_Peek
arg	20:25	20:35	7	p_demux->s
water	20:25	0:0	8	p_demux
op	20:32	0:0	8	->
water	20:34	0:0	8	s
arg	20:37	20:44	7	&p_peek
op	20:37	0:0	8	&
water	20:38	0:0	8	p_peek
arg	20:46	20:48	7	8
water	20:46	0:0	8	8
op	20:50	0:0	6	<
water	20:52	0:0	6	8
stmts	21:12	21:22	5	
goto	21:12	21:22	6	error
water	21:17	0:0	7	error
decl	22:8	22:52	4	uint32_t	i_data_size
op	22:29	0:0	4	=
call	22:31	22:51	5	GetDWBE
arg	22:40	22:51	6	&p_peek[4]
op	22:40	0:0	7	&
water	22:41	0:0	7	p_peek
op	22:47	0:0	7	[
water	22:48	0:0	7	4
op	22:49	0:0	7	]
decl	23:8	23:81	4	uint64_t	i_chunk_size
op	23:30	0:0	4	=
call	23:32	23:44	5	UINT64_C
arg	23:42	23:44	6	8
water	23:42	0:0	7	8
op	23:46	0:0	4	+
water	23:48	0:0	4	i_data_size
op	23:60	0:0	4	+
water	23:62	0:0	4	(
water	23:64	0:0	4	i_data_size
op	23:76	0:0	4	&
water	23:78	0:0	4	1
water	23:80	0:0	4	)
call	24:8	25:46	4	msg_Dbg
arg	24:17	24:24	5	p_demux
water	24:17	0:0	6	p_demux
arg	24:26	24:79	5	"chunk fcc=%4.4s size=%"PRIu64" data_size=%"PRIu32
water	24:26	0:0	6	"chunk fcc=%4.4s size=%"
water	24:51	0:0	6	PRIu64
water	24:58	0:0	6	" data_size=%"
water	24:73	0:0	6	PRIu32
arg	25:12	25:18	5	p_peek
water	25:12	0:0	6	p_peek
arg	25:20	25:32	5	i_chunk_size
water	25:20	0:0	6	i_chunk_size
arg	25:34	25:46	5	i_data_size
water	25:34	0:0	6	i_data_size
water	25:47	0:0	4	;
if	26:8	37:8	4	(!memcmp (p_peek ,"COMM" ,4 ))
cond	26:12	26:39	5	!memcmp (p_peek ,"COMM" ,4 )
op	26:12	0:0	6	!
call	26:13	26:39	6	memcmp
arg	26:21	26:27	7	p_peek
water	26:21	0:0	8	p_peek
arg	26:29	26:35	7	"COMM"
water	26:29	0:0	8	"COMM"
arg	26:37	26:39	7	4
water	26:37	0:0	8	4
stmts	27:8	37:8	5	
water	27:8	0:0	6	{
if	28:12	29:26	6	(stream_Peek (p_demux -> s ,& p_peek ,18 + 8 ) < 18 + 8)
cond	28:16	28:62	7	stream_Peek (p_demux -> s ,& p_peek ,18 + 8 ) < 18 + 8
call	28:16	28:55	8	stream_Peek
arg	28:29	28:39	9	p_demux->s
water	28:29	0:0	10	p_demux
op	28:36	0:0	10	->
water	28:38	0:0	10	s
arg	28:41	28:48	9	&p_peek
op	28:41	0:0	10	&
water	28:42	0:0	10	p_peek
arg	28:50	28:55	9	18+8
water	28:50	0:0	10	18
op	28:52	0:0	10	+
water	28:53	0:0	10	8
op	28:57	0:0	8	<
water	28:59	0:0	8	18
op	28:61	0:0	8	+
water	28:62	0:0	8	8
stmts	29:16	29:26	7	
goto	29:16	29:26	8	error
water	29:21	0:0	9	error
call	30:12	30:84	6	es_format_Init
arg	30:28	30:39	7	&p_sys->fmt
op	30:28	0:0	8	&
water	30:29	0:0	8	p_sys
op	30:34	0:0	8	->
water	30:36	0:0	8	fmt
arg	30:41	30:49	7	AUDIO_ES
water	30:41	0:0	8	AUDIO_ES
arg	30:51	30:84	7	VLC_FOURCC('t','w','o','s')
call	30:51	30:82	8	VLC_FOURCC
arg	30:63	30:66	9	't'
water	30:63	0:0	10	't'
arg	30:68	30:71	9	'w'
water	30:68	0:0	10	'w'
arg	30:73	30:76	9	'o'
water	30:73	0:0	10	'o'
arg	30:78	30:82	9	's'
water	30:78	0:0	10	's'
water	30:85	0:0	6	;
water	31:12	0:0	6	p_sys
op	31:17	0:0	6	->
water	31:19	0:0	6	fmt
op	31:22	0:0	6	.
water	31:23	0:0	6	audio
op	31:28	0:0	6	.
water	31:29	0:0	6	i_channels
op	31:40	0:0	6	=
call	31:42	31:61	6	GetWBE
arg	31:50	31:61	7	&p_peek[8]
op	31:50	0:0	8	&
water	31:51	0:0	8	p_peek
op	31:57	0:0	8	[
water	31:58	0:0	8	8
op	31:59	0:0	8	]
water	31:62	0:0	6	;
water	32:12	0:0	6	p_sys
op	32:17	0:0	6	->
water	32:19	0:0	6	fmt
op	32:22	0:0	6	.
water	32:23	0:0	6	audio
op	32:28	0:0	6	.
water	32:29	0:0	6	i_bitspersample
op	32:45	0:0	6	=
call	32:47	32:67	6	GetWBE
arg	32:55	32:67	7	&p_peek[14]
op	32:55	0:0	8	&
water	32:56	0:0	8	p_peek
op	32:62	0:0	8	[
water	32:63	0:0	8	14
op	32:65	0:0	8	]
water	32:68	0:0	6	;
water	33:12	0:0	6	p_sys
op	33:17	0:0	6	->
water	33:19	0:0	6	fmt
op	33:22	0:0	6	.
water	33:23	0:0	6	audio
op	33:28	0:0	6	.
water	33:29	0:0	6	i_rate
op	33:40	0:0	6	=
call	33:42	33:64	6	GetF80BE
arg	33:52	33:64	7	&p_peek[16]
op	33:52	0:0	8	&
water	33:53	0:0	8	p_peek
op	33:59	0:0	8	[
water	33:60	0:0	8	16
op	33:62	0:0	8	]
water	33:65	0:0	6	;
call	34:12	36:45	6	msg_Dbg
arg	34:21	34:28	7	p_demux
water	34:21	0:0	8	p_demux
arg	34:30	34:83	7	"COMM: channels=%d samples_frames=%d bits=%d rate=%d"
water	34:30	0:0	8	"COMM: channels=%d samples_frames=%d bits=%d rate=%d"
arg	35:21	35:41	7	GetWBE(&p_peek[8])
call	35:21	35:40	8	GetWBE
arg	35:29	35:40	9	&p_peek[8]
op	35:29	0:0	10	&
water	35:30	0:0	10	p_peek
op	35:36	0:0	10	[
water	35:37	0:0	10	8
op	35:38	0:0	10	]
arg	35:43	35:65	7	GetDWBE(&p_peek[10])
call	35:43	35:64	8	GetDWBE
arg	35:52	35:64	9	&p_peek[10]
op	35:52	0:0	10	&
water	35:53	0:0	10	p_peek
op	35:59	0:0	10	[
water	35:60	0:0	10	10
op	35:62	0:0	10	]
arg	35:67	35:88	7	GetWBE(&p_peek[14])
call	35:67	35:87	8	GetWBE
arg	35:75	35:87	9	&p_peek[14]
op	35:75	0:0	10	&
water	35:76	0:0	10	p_peek
op	35:82	0:0	10	[
water	35:83	0:0	10	14
op	35:85	0:0	10	]
arg	36:21	36:45	7	GetF80BE(&p_peek[16])
call	36:21	36:43	8	GetF80BE
arg	36:31	36:43	9	&p_peek[16]
op	36:31	0:0	10	&
water	36:32	0:0	10	p_peek
op	36:38	0:0	10	[
water	36:39	0:0	10	16
op	36:41	0:0	10	]
water	36:46	0:0	6	;
water	37:8	0:0	6	}
else	38:8	48:8	4
stmts	38:13	48:8	5	
if	38:13	48:8	6	(!memcmp (p_peek ,"SSND" ,4 ))
cond	38:17	38:44	7	!memcmp (p_peek ,"SSND" ,4 )
op	38:17	0:0	8	!
call	38:18	38:44	8	memcmp
arg	38:26	38:32	9	p_peek
water	38:26	0:0	10	p_peek
arg	38:34	38:40	9	"SSND"
water	38:34	0:0	10	"SSND"
arg	38:42	38:44	9	4
water	38:42	0:0	10	4
stmts	39:8	48:8	7	
water	39:8	0:0	8	{
if	40:12	41:26	8	(stream_Peek (p_demux -> s ,& p_peek ,8 + 8 ) < 8 + 8)
cond	40:16	40:60	9	stream_Peek (p_demux -> s ,& p_peek ,8 + 8 ) < 8 + 8
call	40:16	40:54	10	stream_Peek
arg	40:29	40:39	11	p_demux->s
water	40:29	0:0	12	p_demux
op	40:36	0:0	12	->
water	40:38	0:0	12	s
arg	40:41	40:48	11	&p_peek
op	40:41	0:0	12	&
water	40:42	0:0	12	p_peek
arg	40:50	40:54	11	8+8
water	40:50	0:0	12	8
op	40:51	0:0	12	+
water	40:52	0:0	12	8
op	40:56	0:0	10	<
water	40:58	0:0	10	8
op	40:59	0:0	10	+
water	40:60	0:0	10	8
stmts	41:16	41:26	9	
goto	41:16	41:26	10	error
water	41:21	0:0	11	error
water	42:12	0:0	8	p_sys
op	42:17	0:0	8	->
water	42:19	0:0	8	i_ssnd_pos
op	42:30	0:0	8	=
call	42:32	42:56	8	stream_Tell
arg	42:45	42:56	9	p_demux->s
water	42:45	0:0	10	p_demux
op	42:52	0:0	10	->
water	42:54	0:0	10	s
water	42:57	0:0	8	;
water	43:12	0:0	8	p_sys
op	43:17	0:0	8	->
water	43:19	0:0	8	i_ssnd_size
op	43:31	0:0	8	=
water	43:33	0:0	8	i_data_size
water	43:44	0:0	8	;
water	44:12	0:0	8	p_sys
op	44:17	0:0	8	->
water	44:19	0:0	8	i_ssnd_offset
op	44:33	0:0	8	=
call	44:35	44:55	8	GetDWBE
arg	44:44	44:55	9	&p_peek[8]
op	44:44	0:0	10	&
water	44:45	0:0	10	p_peek
op	44:51	0:0	10	[
water	44:52	0:0	10	8
op	44:53	0:0	10	]
water	44:56	0:0	8	;
water	45:12	0:0	8	p_sys
op	45:17	0:0	8	->
water	45:19	0:0	8	i_ssnd_blocksize
op	45:36	0:0	8	=
call	45:38	45:59	8	GetDWBE
arg	45:47	45:59	9	&p_peek[12]
op	45:47	0:0	10	&
water	45:48	0:0	10	p_peek
op	45:54	0:0	10	[
water	45:55	0:0	10	12
op	45:57	0:0	10	]
water	45:60	0:0	8	;
call	46:12	47:67	8	msg_Dbg
arg	46:21	46:28	9	p_demux
water	46:21	0:0	10	p_demux
arg	46:30	46:62	9	"SSND: (offset=%d blocksize=%d)"
water	46:30	0:0	10	"SSND: (offset=%d blocksize=%d)"
arg	47:21	47:41	9	p_sys->i_ssnd_offset
water	47:21	0:0	10	p_sys
op	47:26	0:0	10	->
water	47:28	0:0	10	i_ssnd_offset
arg	47:43	47:67	9	p_sys->i_ssnd_blocksize
water	47:43	0:0	10	p_sys
op	47:48	0:0	10	->
water	47:50	0:0	10	i_ssnd_blocksize
water	47:68	0:0	8	;
water	48:8	0:0	8	}
if	49:8	53:8	4	(p_sys -> i_ssnd_pos >= 12 && p_sys -> fmt . i_cat == AUDIO_ES)
cond	49:12	49:59	5	p_sys -> i_ssnd_pos >= 12 && p_sys -> fmt . i_cat == AUDIO_ES
water	49:12	0:0	6	p_sys
op	49:17	0:0	6	->
water	49:19	0:0	6	i_ssnd_pos
op	49:30	0:0	6	>=
water	49:33	0:0	6	12
op	49:36	0:0	6	&&
water	49:39	0:0	6	p_sys
op	49:44	0:0	6	->
water	49:46	0:0	6	fmt
op	49:49	0:0	6	.
water	49:50	0:0	6	i_cat
op	49:56	0:0	6	==
water	49:59	0:0	6	AUDIO_ES
stmts	50:8	53:8	5	
water	50:8	0:0	6	{
break	52:12	52:17	6	
water	53:8	0:0	6	}
for	55:8	67:8	4	( ssize_t i_req ;i_chunk_size;i_chunk_size -= i_req)
forinit	0:0	55:26	5	 ssize_t i_req ;
decl	55:13	55:26	6	ssize_t	i_req
cond	55:28	55:28	5	i_chunk_size
water	55:28	0:0	6	i_chunk_size
forexpr	55:42	55:58	5	i_chunk_size -= i_req
water	55:42	0:0	6	i_chunk_size
op	55:55	0:0	6	-=
water	55:58	0:0	6	i_req
stmts	56:8	67:8	5	
water	56:8	0:0	6	{
water	58:12	0:0	6	i_req
op	58:18	0:0	6	=
call	58:20	58:51	6	__MIN
arg	58:27	58:36	7	SSIZE_MAX
water	58:27	0:0	8	SSIZE_MAX
arg	58:38	58:51	7	i_chunk_size
water	58:38	0:0	8	i_chunk_size
water	58:52	0:0	6	;
water	60:12	0:0	6	i_req
op	60:18	0:0	6	=
water	60:20	0:0	6	i_chunk_size
water	60:32	0:0	6	;
if	62:12	66:12	6	(stream_Read (p_demux -> s ,NULL ,i_req ) != i_req)
cond	62:16	62:58	7	stream_Read (p_demux -> s ,NULL ,i_req ) != i_req
call	62:16	62:53	8	stream_Read
arg	62:29	62:39	9	p_demux->s
water	62:29	0:0	10	p_demux
op	62:36	0:0	10	->
water	62:38	0:0	10	s
arg	62:41	62:45	9	NULL
water	62:41	0:0	10	NULL
arg	62:47	62:53	9	i_req
water	62:47	0:0	10	i_req
op	62:55	0:0	8	!=
water	62:58	0:0	8	i_req
stmts	63:12	66:12	7	
water	63:12	0:0	8	{
call	64:16	64:53	8	msg_Warn
arg	64:26	64:33	9	p_demux
water	64:26	0:0	10	p_demux
arg	64:35	64:53	9	"incomplete file"
water	64:35	0:0	10	"incomplete file"
water	64:54	0:0	8	;
goto	65:16	65:26	8	error
water	65:21	0:0	9	error
water	66:12	0:0	8	}
water	67:8	0:0	6	}
water	68:4	0:0	4	}
water	69:4	0:0	2	p_sys
op	69:9	0:0	2	->
water	69:11	0:0	2	i_ssnd_start
op	69:24	0:0	2	=
water	69:26	0:0	2	p_sys
op	69:31	0:0	2	->
water	69:33	0:0	2	i_ssnd_pos
op	69:44	0:0	2	+
water	69:46	0:0	2	16
op	69:49	0:0	2	+
water	69:51	0:0	2	p_sys
op	69:56	0:0	2	->
water	69:58	0:0	2	i_ssnd_offset
water	69:71	0:0	2	;
water	70:4	0:0	2	p_sys
op	70:9	0:0	2	->
water	70:11	0:0	2	i_ssnd_end
op	70:24	0:0	2	=
water	70:26	0:0	2	p_sys
op	70:31	0:0	2	->
water	70:33	0:0	2	i_ssnd_start
op	70:46	0:0	2	+
water	70:48	0:0	2	p_sys
op	70:53	0:0	2	->
water	70:55	0:0	2	i_ssnd_size
water	70:66	0:0	2	;
water	71:4	0:0	2	p_sys
op	71:9	0:0	2	->
water	71:11	0:0	2	i_ssnd_fsize
op	71:24	0:0	2	=
water	71:26	0:0	2	p_sys
op	71:31	0:0	2	->
water	71:33	0:0	2	fmt
op	71:36	0:0	2	.
water	71:37	0:0	2	audio
op	71:42	0:0	2	.
water	71:43	0:0	2	i_channels
op	71:54	0:0	2	*
water	72:26	0:0	2	(
water	72:27	0:0	2	(
water	72:28	0:0	2	p_sys
op	72:33	0:0	2	->
water	72:35	0:0	2	fmt
op	72:38	0:0	2	.
water	72:39	0:0	2	audio
op	72:44	0:0	2	.
water	72:45	0:0	2	i_bitspersample
op	72:61	0:0	2	+
water	72:63	0:0	2	7
water	72:64	0:0	2	)
op	72:66	0:0	2	/
water	72:68	0:0	2	8
water	72:69	0:0	2	)
water	72:70	0:0	2	;
if	73:4	77:4	2	(p_sys -> i_ssnd_fsize <= 0 || p_sys -> fmt . audio . i_rate == 0)
cond	73:8	73:63	3	p_sys -> i_ssnd_fsize <= 0 || p_sys -> fmt . audio . i_rate == 0
water	73:8	0:0	4	p_sys
op	73:13	0:0	4	->
water	73:15	0:0	4	i_ssnd_fsize
op	73:28	0:0	4	<=
water	73:31	0:0	4	0
op	73:33	0:0	4	||
water	73:36	0:0	4	p_sys
op	73:41	0:0	4	->
water	73:43	0:0	4	fmt
op	73:46	0:0	4	.
water	73:47	0:0	4	audio
op	73:52	0:0	4	.
water	73:53	0:0	4	i_rate
op	73:60	0:0	4	==
water	73:63	0:0	4	0
stmts	74:4	77:4	3	
water	74:4	0:0	4	{
call	75:8	75:53	4	msg_Err
arg	75:17	75:24	5	p_demux
water	75:17	0:0	6	p_demux
arg	75:26	75:53	5	"invalid audio parameters"
water	75:26	0:0	6	"invalid audio parameters"
water	75:54	0:0	4	;
goto	76:8	76:18	4	error
water	76:13	0:0	5	error
water	77:4	0:0	4	}
if	78:4	82:4	2	(p_sys -> i_ssnd_size <= 0)
cond	78:8	78:30	3	p_sys -> i_ssnd_size <= 0
water	78:8	0:0	4	p_sys
op	78:13	0:0	4	->
water	78:15	0:0	4	i_ssnd_size
op	78:27	0:0	4	<=
water	78:30	0:0	4	0
stmts	79:4	82:4	3	
water	79:4	0:0	4	{
water	81:8	0:0	4	p_sys
op	81:13	0:0	4	->
water	81:15	0:0	4	i_ssnd_end
op	81:26	0:0	4	=
water	81:28	0:0	4	0
water	81:29	0:0	4	;
water	82:4	0:0	4	}
if	84:4	88:4	2	(stream_Seek (p_demux -> s ,p_sys -> i_ssnd_start ))
cond	84:8	84:53	3	stream_Seek (p_demux -> s ,p_sys -> i_ssnd_start )
call	84:8	84:53	4	stream_Seek
arg	84:21	84:31	5	p_demux->s
water	84:21	0:0	6	p_demux
op	84:28	0:0	6	->
water	84:30	0:0	6	s
arg	84:33	84:53	5	p_sys->i_ssnd_start
water	84:33	0:0	6	p_sys
op	84:38	0:0	6	->
water	84:40	0:0	6	i_ssnd_start
stmts	85:4	88:4	3	
water	85:4	0:0	4	{
call	86:8	86:54	4	msg_Err
arg	86:17	86:24	5	p_demux
water	86:17	0:0	6	p_demux
arg	86:26	86:54	5	"cannot seek to data chunk"
water	86:26	0:0	6	"cannot seek to data chunk"
water	86:55	0:0	4	;
goto	87:8	87:18	4	error
water	87:13	0:0	5	error
water	88:4	0:0	4	}
water	90:4	0:0	2	p_sys
op	90:9	0:0	2	->
water	90:11	0:0	2	es
op	90:14	0:0	2	=
call	90:16	90:54	2	es_out_Add
arg	90:28	90:40	3	p_demux->out
water	90:28	0:0	4	p_demux
op	90:35	0:0	4	->
water	90:37	0:0	4	out
arg	90:42	90:54	3	&p_sys->fmt
op	90:42	0:0	4	&
water	90:43	0:0	4	p_sys
op	90:48	0:0	4	->
water	90:50	0:0	4	fmt
water	90:55	0:0	2	;
return	91:4	91:22	2	VLC_SUCCESS
water	91:11	0:0	3	VLC_SUCCESS
label	92:0	92:5	2	error :
call	93:4	93:16	2	free
arg	93:10	93:16	3	p_sys
water	93:10	0:0	4	p_sys
water	93:17	0:0	2	;
return	94:4	94:23	2	VLC_EGENERIC
water	94:11	0:0	3	VLC_EGENERIC
