func	2:0	106:0	0	static int	Open
params	2:16	0:0	1	
param	2:17	2:34	2	vlc_object_t *	obj
stmnts	0:0	105:23	1	
decl	4:4	4:35	2	demux_t	*demux
op	4:19	0:0	2	=
water	4:21	0:0	2	(
water	4:22	0:0	2	demux_t
op	4:30	0:0	2	*
water	4:31	0:0	2	)
water	4:32	0:0	2	obj
decl	5:4	5:45	2	demux_sys_t	*sys
op	5:21	0:0	2	=
call	5:23	5:44	3	malloc
arg	5:31	5:44	4	sizeof(*sys)
op	5:31	0:0	5	sizeof
water	5:38	0:0	5	(
op	5:39	0:0	5	*
water	5:40	0:0	5	sys
water	5:43	0:0	5	)
if	6:4	7:25	2	(unlikely (sys == NULL ))
cond	6:8	6:28	3	unlikely (sys == NULL )
call	6:8	6:28	4	unlikely
arg	6:17	6:28	5	sys==NULL
water	6:17	0:0	6	sys
op	6:21	0:0	6	==
water	6:24	0:0	6	NULL
stmts	7:8	7:25	3	
return	7:8	7:25	4	VLC_ENOMEM
water	7:15	0:0	5	VLC_ENOMEM
water	8:4	0:0	2	sys
op	8:7	0:0	2	->
water	8:9	0:0	2	detach
op	8:16	0:0	2	=
water	8:18	0:0	2	no_detach
water	8:27	0:0	2	;
decl	9:4	9:19	2	uint32_t	chroma
decl	10:4	10:34	2	uint16_t	width
op	10:19	0:0	2	=
water	10:21	0:0	2	0
water	10:22	0:0	2	,
decl	10:4	10:34	2	uint16_t	height
op	10:31	0:0	2	=
water	10:33	0:0	2	0
decl	11:4	11:15	2	uint8_t	bpp
switch	12:4	34:4	2	(var_InheritInteger (demux ,"shm-depth" ))
cond	12:12	12:50	3	var_InheritInteger (demux ,"shm-depth" )
call	12:12	12:50	4	var_InheritInteger
arg	12:32	12:37	5	demux
water	12:32	0:0	6	demux
arg	12:39	12:50	5	"shm-depth"
water	12:39	0:0	6	"shm-depth"
stmts	13:4	34:4	3	
water	13:4	0:0	4	{
label	14:8	14:15	4	case 32 :
water	15:12	0:0	4	chroma
op	15:19	0:0	4	=
water	15:21	0:0	4	VLC_CODEC_RGB32
water	15:36	0:0	4	;
water	15:38	0:0	4	bpp
op	15:42	0:0	4	=
water	15:44	0:0	4	32
water	15:46	0:0	4	;
break	16:12	16:17	4	
label	17:8	17:15	4	case 24 :
water	18:12	0:0	4	chroma
op	18:19	0:0	4	=
water	18:21	0:0	4	VLC_CODEC_RGB24
water	18:36	0:0	4	;
water	18:38	0:0	4	bpp
op	18:42	0:0	4	=
water	18:44	0:0	4	24
water	18:46	0:0	4	;
break	19:12	19:17	4	
label	20:8	20:15	4	case 16 :
water	21:12	0:0	4	chroma
op	21:19	0:0	4	=
water	21:21	0:0	4	VLC_CODEC_RGB16
water	21:36	0:0	4	;
water	21:38	0:0	4	bpp
op	21:42	0:0	4	=
water	21:44	0:0	4	16
water	21:46	0:0	4	;
break	22:12	22:17	4	
label	23:8	23:15	4	case 15 :
water	24:12	0:0	4	chroma
op	24:19	0:0	4	=
water	24:21	0:0	4	VLC_CODEC_RGB15
water	24:36	0:0	4	;
water	24:38	0:0	4	bpp
op	24:42	0:0	4	=
water	24:44	0:0	4	16
water	24:46	0:0	4	;
break	25:12	25:17	4	
label	26:8	26:14	4	case 8 :
water	27:12	0:0	4	chroma
op	27:19	0:0	4	=
water	27:21	0:0	4	VLC_CODEC_RGB8
water	27:35	0:0	4	;
water	27:37	0:0	4	bpp
op	27:41	0:0	4	=
water	27:43	0:0	4	8
water	27:44	0:0	4	;
break	28:12	28:17	4	
label	29:8	29:14	4	case 0 :
water	30:12	0:0	4	chroma
op	30:19	0:0	4	=
water	30:21	0:0	4	VLC_CODEC_XWD
water	30:34	0:0	4	;
water	30:36	0:0	4	bpp
op	30:40	0:0	4	=
water	30:42	0:0	4	0
water	30:43	0:0	4	;
break	31:12	31:17	4	
label	32:8	32:15	4	default :
goto	33:12	33:22	4	error
water	33:17	0:0	5	error
water	34:4	0:0	4	}
if	35:4	39:4	2	(bpp != 0)
cond	35:8	35:15	3	bpp != 0
water	35:8	0:0	4	bpp
op	35:12	0:0	4	!=
water	35:15	0:0	4	0
stmts	36:4	39:4	3	
water	36:4	0:0	4	{
water	37:8	0:0	4	width
op	37:14	0:0	4	=
call	37:16	37:54	4	var_InheritInteger
arg	37:36	37:41	5	demux
water	37:36	0:0	6	demux
arg	37:43	37:54	5	"shm-width"
water	37:43	0:0	6	"shm-width"
water	37:55	0:0	4	;
water	38:8	0:0	4	height
op	38:15	0:0	4	=
call	38:17	38:56	4	var_InheritInteger
arg	38:37	38:42	5	demux
water	38:37	0:0	6	demux
arg	38:44	38:56	5	"shm-height"
water	38:44	0:0	6	"shm-height"
water	38:57	0:0	4	;
water	39:4	0:0	4	}
water	40:4	0:0	2	static
call	40:11	40:23	2	void
arg	40:17	40:23	3	*Demux
op	40:17	0:0	4	*
water	40:18	0:0	4	Demux
water	40:25	0:0	2	(
water	40:26	0:0	2	void
op	40:31	0:0	2	*
water	40:32	0:0	2	)
water	40:33	0:0	2	;
decl	41:4	41:54	2	char	*path
op	41:15	0:0	2	=
call	41:17	41:53	3	var_InheritString
arg	41:36	41:41	4	demux
water	41:36	0:0	5	demux
arg	41:43	41:53	4	"shm-file"
water	41:43	0:0	5	"shm-file"
if	42:4	53:4	2	(path != NULL)
cond	42:8	42:16	3	path != NULL
water	42:8	0:0	4	path
op	42:13	0:0	4	!=
water	42:16	0:0	4	NULL
stmts	43:4	53:4	3	
water	43:4	0:0	4	{
water	44:8	0:0	4	sys
op	44:11	0:0	4	->
water	44:13	0:0	4	fd
op	44:16	0:0	4	=
call	44:18	44:42	4	vlc_open
arg	44:28	44:32	5	path
water	44:28	0:0	6	path
arg	44:34	44:42	5	O_RDONLY
water	44:34	0:0	6	O_RDONLY
water	44:43	0:0	4	;
if	45:8	47:43	4	(sys -> fd == - 1)
cond	45:12	45:24	5	sys -> fd == - 1
water	45:12	0:0	6	sys
op	45:15	0:0	6	->
water	45:17	0:0	6	fd
op	45:20	0:0	6	==
op	45:23	0:0	6	-
water	45:24	0:0	6	1
stmts	46:12	47:43	5	
call	46:12	47:42	6	msg_Err
arg	46:21	46:26	7	demux
water	46:21	0:0	8	demux
arg	46:28	46:53	7	"cannot open file %s: %s"
water	46:28	0:0	8	"cannot open file %s: %s"
arg	46:55	46:59	7	path
water	46:55	0:0	8	path
arg	47:21	47:42	7	vlc_strerror_c(errno)
call	47:21	47:41	8	vlc_strerror_c
arg	47:36	47:41	9	errno
water	47:36	0:0	10	errno
water	47:43	0:0	6	;
call	48:8	48:18	4	free
arg	48:14	48:18	5	path
water	48:14	0:0	6	path
water	48:19	0:0	4	;
if	49:8	50:22	4	(sys -> fd == - 1)
cond	49:12	49:24	5	sys -> fd == - 1
water	49:12	0:0	6	sys
op	49:15	0:0	6	->
water	49:17	0:0	6	fd
op	49:20	0:0	6	==
op	49:23	0:0	6	-
water	49:24	0:0	6	1
stmts	50:12	50:22	5	
goto	50:12	50:22	6	error
water	50:17	0:0	7	error
water	51:8	0:0	4	sys
op	51:11	0:0	4	->
water	51:13	0:0	4	detach
op	51:20	0:0	4	=
water	51:22	0:0	4	CloseFile
water	51:31	0:0	4	;
water	52:8	0:0	4	Demux
op	52:14	0:0	4	=
water	52:16	0:0	4	DemuxFile
water	52:25	0:0	4	;
water	53:4	0:0	4	}
else	54:4	76:4	2
stmts	55:4	76:4	3	
water	55:4	0:0	4	{
water	57:8	0:0	4	sys
op	57:11	0:0	4	->
water	57:13	0:0	4	mem
op	57:16	0:0	4	.
water	57:17	0:0	4	length
op	57:24	0:0	4	=
water	57:26	0:0	4	width
op	57:32	0:0	4	*
water	57:34	0:0	4	height
op	57:41	0:0	4	*
water	57:43	0:0	4	(
water	57:44	0:0	4	bpp
op	57:48	0:0	4	>>
water	57:51	0:0	4	3
water	57:52	0:0	4	)
water	57:53	0:0	4	;
if	58:8	59:22	4	(sys -> mem . length == 0)
cond	58:12	58:31	5	sys -> mem . length == 0
water	58:12	0:0	6	sys
op	58:15	0:0	6	->
water	58:17	0:0	6	mem
op	58:20	0:0	6	.
water	58:21	0:0	6	length
op	58:28	0:0	6	==
water	58:31	0:0	6	0
stmts	59:12	59:22	5	
goto	59:12	59:22	6	error
water	59:17	0:0	7	error
decl	60:8	60:53	4	int	id
op	60:15	0:0	4	=
call	60:17	60:52	5	var_InheritInteger
arg	60:37	60:42	6	demux
water	60:37	0:0	7	demux
arg	60:44	60:52	6	"shm-id"
water	60:44	0:0	7	"shm-id"
if	61:8	62:22	4	(id == IPC_PRIVATE)
cond	61:12	61:18	5	id == IPC_PRIVATE
water	61:12	0:0	6	id
op	61:15	0:0	6	==
water	61:18	0:0	6	IPC_PRIVATE
stmts	62:12	62:22	5	
goto	62:12	62:22	6	error
water	62:17	0:0	7	error
decl	63:8	63:48	4	void	*mem
op	63:18	0:0	4	=
call	63:20	63:47	5	shmat
arg	63:27	63:29	6	id
water	63:27	0:0	7	id
arg	63:31	63:35	6	NULL
water	63:31	0:0	7	NULL
arg	63:37	63:47	6	SHM_RDONLY
water	63:37	0:0	7	SHM_RDONLY
if	64:8	69:8	4	(mem ==( const void * ) (- 1 ))
cond	64:12	64:36	5	mem ==( const void * ) (- 1 )
water	64:12	0:0	6	mem
op	64:16	0:0	6	==
call	64:19	64:36	6	(constvoid*)
arg	64:34	64:36	7	-1
op	64:34	0:0	8	-
water	64:35	0:0	8	1
stmts	65:8	69:8	5	
water	65:8	0:0	6	{
call	66:12	67:42	6	msg_Err
arg	66:21	66:26	7	demux
water	66:21	0:0	8	demux
arg	66:28	66:58	7	"cannot attach segment %d: %s"
water	66:28	0:0	8	"cannot attach segment %d: %s"
arg	66:60	66:62	7	id
water	66:60	0:0	8	id
arg	67:21	67:42	7	vlc_strerror_c(errno)
call	67:21	67:41	8	vlc_strerror_c
arg	67:36	67:41	9	errno
water	67:36	0:0	10	errno
water	67:43	0:0	6	;
goto	68:12	68:22	6	error
water	68:17	0:0	7	error
water	69:8	0:0	6	}
water	70:8	0:0	4	sys
op	70:11	0:0	4	->
water	70:13	0:0	4	mem
op	70:16	0:0	4	.
water	70:17	0:0	4	addr
op	70:22	0:0	4	=
water	70:24	0:0	4	mem
water	70:27	0:0	4	;
water	71:8	0:0	4	sys
op	71:11	0:0	4	->
water	71:13	0:0	4	detach
op	71:20	0:0	4	=
water	71:22	0:0	4	CloseIPC
water	71:30	0:0	4	;
water	72:8	0:0	4	Demux
op	72:14	0:0	4	=
water	72:16	0:0	4	DemuxIPC
water	72:24	0:0	4	;
goto	74:8	74:18	4	error
water	74:13	0:0	5	error
water	76:4	0:0	4	}
decl	78:4	78:50	2	float	rate
op	78:15	0:0	2	=
call	78:17	78:49	3	var_InheritFloat
arg	78:35	78:38	4	obj
water	78:35	0:0	5	obj
arg	78:40	78:49	4	"shm-fps"
water	78:40	0:0	5	"shm-fps"
if	79:4	80:18	2	(rate <= 0 .)
cond	79:8	79:17	3	rate <= 0 .
water	79:8	0:0	4	rate
op	79:13	0:0	4	<=
water	79:16	0:0	4	0
op	79:17	0:0	4	.
stmts	80:8	80:18	3	
goto	80:8	80:18	4	error
water	80:13	0:0	5	error
decl	81:4	81:57	2	mtime_t	interval
op	81:21	0:0	2	=
call	81:23	81:56	3	llroundf
arg	81:32	81:56	4	(float)CLOCK_FREQ/rate
water	81:32	0:0	5	(
water	81:33	0:0	5	float
water	81:38	0:0	5	)
water	81:39	0:0	5	CLOCK_FREQ
op	81:50	0:0	5	/
water	81:52	0:0	5	rate
if	82:4	83:18	2	(! interval)
cond	82:8	82:9	3	! interval
op	82:8	0:0	4	!
water	82:9	0:0	4	interval
stmts	83:8	83:18	3	
goto	83:8	83:18	4	error
water	83:13	0:0	5	error
decl	84:4	84:19	2	es_format_t	fmt
call	85:4	85:42	2	es_format_Init
arg	85:20	85:24	3	&fmt
op	85:20	0:0	4	&
water	85:21	0:0	4	fmt
arg	85:26	85:34	3	VIDEO_ES
water	85:26	0:0	4	VIDEO_ES
arg	85:36	85:42	3	chroma
water	85:36	0:0	4	chroma
water	85:43	0:0	2	;
water	86:4	0:0	2	fmt
op	86:7	0:0	2	.
water	86:8	0:0	2	video
op	86:13	0:0	2	.
water	86:14	0:0	2	i_chroma
op	86:23	0:0	2	=
water	86:25	0:0	2	chroma
water	86:31	0:0	2	;
water	87:4	0:0	2	fmt
op	87:7	0:0	2	.
water	87:8	0:0	2	video
op	87:13	0:0	2	.
water	87:14	0:0	2	i_bits_per_pixel
op	87:31	0:0	2	=
water	87:33	0:0	2	bpp
water	87:36	0:0	2	;
water	88:4	0:0	2	fmt
op	88:7	0:0	2	.
water	88:8	0:0	2	video
op	88:13	0:0	2	.
water	88:14	0:0	2	i_sar_num
op	88:24	0:0	2	=
water	88:26	0:0	2	fmt
op	88:29	0:0	2	.
water	88:30	0:0	2	video
op	88:35	0:0	2	.
water	88:36	0:0	2	i_sar_den
op	88:46	0:0	2	=
water	88:48	0:0	2	1
water	88:49	0:0	2	;
water	89:4	0:0	2	fmt
op	89:7	0:0	2	.
water	89:8	0:0	2	video
op	89:13	0:0	2	.
water	89:14	0:0	2	i_frame_rate
op	89:27	0:0	2	=
water	89:29	0:0	2	1000
op	89:34	0:0	2	*
water	89:36	0:0	2	rate
water	89:40	0:0	2	;
water	90:4	0:0	2	fmt
op	90:7	0:0	2	.
water	90:8	0:0	2	video
op	90:13	0:0	2	.
water	90:14	0:0	2	i_frame_rate_base
op	90:32	0:0	2	=
water	90:34	0:0	2	1000
water	90:38	0:0	2	;
water	91:4	0:0	2	fmt
op	91:7	0:0	2	.
water	91:8	0:0	2	video
op	91:13	0:0	2	.
water	91:14	0:0	2	i_visible_width
op	91:30	0:0	2	=
water	91:32	0:0	2	fmt
op	91:35	0:0	2	.
water	91:36	0:0	2	video
op	91:41	0:0	2	.
water	91:42	0:0	2	i_width
op	91:50	0:0	2	=
water	91:52	0:0	2	width
water	91:57	0:0	2	;
water	92:4	0:0	2	fmt
op	92:7	0:0	2	.
water	92:8	0:0	2	video
op	92:13	0:0	2	.
water	92:14	0:0	2	i_visible_height
op	92:31	0:0	2	=
water	92:33	0:0	2	fmt
op	92:36	0:0	2	.
water	92:37	0:0	2	video
op	92:42	0:0	2	.
water	92:43	0:0	2	i_height
op	92:52	0:0	2	=
water	92:54	0:0	2	height
water	92:60	0:0	2	;
water	93:4	0:0	2	sys
op	93:7	0:0	2	->
water	93:9	0:0	2	es
op	93:12	0:0	2	=
call	93:14	93:42	2	es_out_Add
arg	93:26	93:36	3	demux->out
water	93:26	0:0	4	demux
op	93:31	0:0	4	->
water	93:33	0:0	4	out
arg	93:38	93:42	3	&fmt
op	93:38	0:0	4	&
water	93:39	0:0	4	fmt
water	93:43	0:0	2	;
if	95:4	96:18	2	(vlc_timer_create (& sys -> timer ,Demux ,demux ))
cond	95:8	95:51	3	vlc_timer_create (& sys -> timer ,Demux ,demux )
call	95:8	95:51	4	vlc_timer_create
arg	95:26	95:37	5	&sys->timer
op	95:26	0:0	6	&
water	95:27	0:0	6	sys
op	95:30	0:0	6	->
water	95:32	0:0	6	timer
arg	95:39	95:44	5	Demux
water	95:39	0:0	6	Demux
arg	95:46	95:51	5	demux
water	95:46	0:0	6	demux
stmts	96:8	96:18	3	
goto	96:8	96:18	4	error
water	96:13	0:0	5	error
call	97:4	97:54	2	vlc_timer_schedule
arg	97:24	97:34	3	sys->timer
water	97:24	0:0	4	sys
op	97:27	0:0	4	->
water	97:29	0:0	4	timer
arg	97:36	97:41	3	false
water	97:36	0:0	4	false
arg	97:43	97:44	3	1
water	97:43	0:0	4	1
arg	97:46	97:54	3	interval
water	97:46	0:0	4	interval
water	97:55	0:0	2	;
water	98:4	0:0	2	demux
op	98:9	0:0	2	->
water	98:11	0:0	2	p_sys
op	98:17	0:0	2	=
water	98:19	0:0	2	sys
water	98:22	0:0	2	;
water	99:4	0:0	2	demux
op	99:9	0:0	2	->
water	99:11	0:0	2	pf_demux
op	99:22	0:0	2	=
water	99:24	0:0	2	NULL
water	99:28	0:0	2	;
water	100:4	0:0	2	demux
op	100:9	0:0	2	->
water	100:11	0:0	2	pf_control
op	100:22	0:0	2	=
water	100:24	0:0	2	Control
water	100:31	0:0	2	;
return	101:4	101:22	2	VLC_SUCCESS
water	101:11	0:0	3	VLC_SUCCESS
label	102:0	102:5	2	error :
call	103:4	103:20	2	sys->detach
arg	103:17	103:20	3	sys
water	103:17	0:0	4	sys
water	103:21	0:0	2	;
call	104:4	104:13	2	free
arg	104:10	104:13	3	sys
water	104:10	0:0	4	sys
water	104:14	0:0	2	;
return	105:4	105:23	2	VLC_EGENERIC
water	105:11	0:0	3	VLC_EGENERIC
