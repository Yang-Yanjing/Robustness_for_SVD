func	2:0	109:0	0	static picture_t *	Filter
params	2:24	0:0	1	
param	2:26	2:44	2	filter_t *	p_filter
param	2:46	2:63	2	picture_t *	p_pic
stmnts	0:0	108:20	1	
decl	4:4	4:24	2	picture_t	*p_pic_dst
decl	5:4	5:15	2	int	i_plane
if	6:4	6:28	2	(! p_pic)
cond	6:8	6:9	3	! p_pic
op	6:8	0:0	4	!
water	6:9	0:0	4	p_pic
stmts	6:17	6:28	3	
return	6:17	6:28	4	NULL
water	6:24	0:0	5	NULL
if	7:4	9:19	2	(( p_filter -> fmt_in . video . i_height == 0 ) || ( p_filter -> fmt_in . video . i_width == 0 ))
cond	7:8	8:44	3	( p_filter -> fmt_in . video . i_height == 0 ) || ( p_filter -> fmt_in . video . i_width == 0 )
water	7:8	0:0	4	(
water	7:9	0:0	4	p_filter
op	7:17	0:0	4	->
water	7:19	0:0	4	fmt_in
op	7:25	0:0	4	.
water	7:26	0:0	4	video
op	7:31	0:0	4	.
water	7:32	0:0	4	i_height
op	7:41	0:0	4	==
water	7:44	0:0	4	0
water	7:45	0:0	4	)
op	7:47	0:0	4	||
water	8:8	0:0	4	(
water	8:9	0:0	4	p_filter
op	8:17	0:0	4	->
water	8:19	0:0	4	fmt_in
op	8:25	0:0	4	.
water	8:26	0:0	4	video
op	8:31	0:0	4	.
water	8:32	0:0	4	i_width
op	8:40	0:0	4	==
water	8:43	0:0	4	0
water	8:44	0:0	4	)
stmts	9:8	9:19	3	
return	9:8	9:19	4	NULL
water	9:15	0:0	5	NULL
if	10:4	12:19	2	(( p_filter -> fmt_out . video . i_height == 0 ) || ( p_filter -> fmt_out . video . i_width == 0 ))
cond	10:8	11:45	3	( p_filter -> fmt_out . video . i_height == 0 ) || ( p_filter -> fmt_out . video . i_width == 0 )
water	10:8	0:0	4	(
water	10:9	0:0	4	p_filter
op	10:17	0:0	4	->
water	10:19	0:0	4	fmt_out
op	10:26	0:0	4	.
water	10:27	0:0	4	video
op	10:32	0:0	4	.
water	10:33	0:0	4	i_height
op	10:42	0:0	4	==
water	10:45	0:0	4	0
water	10:46	0:0	4	)
op	10:48	0:0	4	||
water	11:8	0:0	4	(
water	11:9	0:0	4	p_filter
op	11:17	0:0	4	->
water	11:19	0:0	4	fmt_out
op	11:26	0:0	4	.
water	11:27	0:0	4	video
op	11:32	0:0	4	.
water	11:33	0:0	4	i_width
op	11:41	0:0	4	==
water	11:44	0:0	4	0
water	11:45	0:0	4	)
stmts	12:8	12:19	3	
return	12:8	12:19	4	NULL
water	12:15	0:0	5	NULL
call	13:4	13:80	2	video_format_ScaleCropAr
arg	13:30	13:54	3	&p_filter->fmt_out.video
op	13:30	0:0	4	&
water	13:31	0:0	4	p_filter
op	13:39	0:0	4	->
water	13:41	0:0	4	fmt_out
op	13:48	0:0	4	.
water	13:49	0:0	4	video
arg	13:56	13:80	3	&p_filter->fmt_in.video
op	13:56	0:0	4	&
water	13:57	0:0	4	p_filter
op	13:65	0:0	4	->
water	13:67	0:0	4	fmt_in
op	13:73	0:0	4	.
water	13:74	0:0	4	video
water	13:81	0:0	2	;
water	15:4	0:0	2	p_pic_dst
op	15:14	0:0	2	=
call	15:16	15:44	2	filter_NewPicture
arg	15:35	15:44	3	p_filter
water	15:35	0:0	4	p_filter
water	15:45	0:0	2	;
if	16:4	20:4	2	(! p_pic_dst)
cond	16:8	16:9	3	! p_pic_dst
op	16:8	0:0	4	!
water	16:9	0:0	4	p_pic_dst
stmts	17:4	20:4	3	
water	17:4	0:0	4	{
call	18:8	18:31	4	picture_Release
arg	18:25	18:31	5	p_pic
water	18:25	0:0	6	p_pic
water	18:32	0:0	4	;
return	19:8	19:19	4	NULL
water	19:15	0:0	5	NULL
water	20:4	0:0	4	}
if	21:4	65:4	2	(p_filter -> fmt_in . video . i_chroma != VLC_CODEC_RGBA && p_filter -> fmt_in . video . i_chroma != VLC_CODEC_ARGB && p_filter -> fmt_in . video . i_chroma != VLC_CODEC_RGB32)
cond	21:8	23:43	3	p_filter -> fmt_in . video . i_chroma != VLC_CODEC_RGBA && p_filter -> fmt_in . video . i_chroma != VLC_CODEC_ARGB && p_filter -> fmt_in . video . i_chroma != VLC_CODEC_RGB32
water	21:8	0:0	4	p_filter
op	21:16	0:0	4	->
water	21:18	0:0	4	fmt_in
op	21:24	0:0	4	.
water	21:25	0:0	4	video
op	21:30	0:0	4	.
water	21:31	0:0	4	i_chroma
op	21:40	0:0	4	!=
water	21:43	0:0	4	VLC_CODEC_RGBA
op	21:58	0:0	4	&&
water	22:8	0:0	4	p_filter
op	22:16	0:0	4	->
water	22:18	0:0	4	fmt_in
op	22:24	0:0	4	.
water	22:25	0:0	4	video
op	22:30	0:0	4	.
water	22:31	0:0	4	i_chroma
op	22:40	0:0	4	!=
water	22:43	0:0	4	VLC_CODEC_ARGB
op	22:58	0:0	4	&&
water	23:8	0:0	4	p_filter
op	23:16	0:0	4	->
water	23:18	0:0	4	fmt_in
op	23:24	0:0	4	.
water	23:25	0:0	4	video
op	23:30	0:0	4	.
water	23:31	0:0	4	i_chroma
op	23:40	0:0	4	!=
water	23:43	0:0	4	VLC_CODEC_RGB32
stmts	24:4	65:4	3	
water	24:4	0:0	4	{
for	25:8	64:8	4	(i_plane = 0 ;i_plane < p_pic_dst -> i_planes;i_plane ++)
forinit	25:13	25:24	5	i_plane = 0 ;
water	25:13	0:0	6	i_plane
op	25:21	0:0	6	=
water	25:23	0:0	6	0
water	25:24	0:0	6	;
cond	25:26	25:47	5	i_plane < p_pic_dst -> i_planes
water	25:26	0:0	6	i_plane
op	25:34	0:0	6	<
water	25:36	0:0	6	p_pic_dst
op	25:45	0:0	6	->
water	25:47	0:0	6	i_planes
forexpr	25:57	25:64	5	i_plane ++
water	25:57	0:0	6	i_plane
op	25:64	0:0	6	++
stmts	26:8	64:8	5	
water	26:8	0:0	6	{
decl	27:12	27:64	6	const int	i_src_pitch
op	27:37	0:0	6	=
water	27:39	0:0	6	p_pic
op	27:44	0:0	6	->
water	27:46	0:0	6	p
op	27:47	0:0	6	[
water	27:48	0:0	6	i_plane
op	27:55	0:0	6	]
op	27:56	0:0	6	.
water	27:57	0:0	6	i_pitch
decl	28:12	28:68	6	const int	i_dst_pitch
op	28:37	0:0	6	=
water	28:39	0:0	6	p_pic_dst
op	28:48	0:0	6	->
water	28:50	0:0	6	p
op	28:51	0:0	6	[
water	28:52	0:0	6	i_plane
op	28:59	0:0	6	]
op	28:60	0:0	6	.
water	28:61	0:0	6	i_pitch
decl	29:12	29:70	6	const int	i_src_height
op	29:37	0:0	6	=
water	29:39	0:0	6	p_filter
op	29:47	0:0	6	->
water	29:49	0:0	6	fmt_in
op	29:55	0:0	6	.
water	29:56	0:0	6	video
op	29:61	0:0	6	.
water	29:62	0:0	6	i_height
decl	30:12	30:69	6	const int	i_src_width
op	30:37	0:0	6	=
water	30:39	0:0	6	p_filter
op	30:47	0:0	6	->
water	30:49	0:0	6	fmt_in
op	30:55	0:0	6	.
water	30:56	0:0	6	video
op	30:61	0:0	6	.
water	30:62	0:0	6	i_width
decl	31:12	31:71	6	const int	i_dst_height
op	31:37	0:0	6	=
water	31:39	0:0	6	p_filter
op	31:47	0:0	6	->
water	31:49	0:0	6	fmt_out
op	31:56	0:0	6	.
water	31:57	0:0	6	video
op	31:62	0:0	6	.
water	31:63	0:0	6	i_height
decl	32:12	32:70	6	const int	i_dst_width
op	32:37	0:0	6	=
water	32:39	0:0	6	p_filter
op	32:47	0:0	6	->
water	32:49	0:0	6	fmt_out
op	32:56	0:0	6	.
water	32:57	0:0	6	video
op	32:62	0:0	6	.
water	32:63	0:0	6	i_width
decl	33:12	34:76	6	const int	i_dst_visible_lines
op	33:42	0:0	6	=
water	34:39	0:0	6	p_pic_dst
op	34:48	0:0	6	->
water	34:50	0:0	6	p
op	34:51	0:0	6	[
water	34:52	0:0	6	i_plane
op	34:59	0:0	6	]
op	34:60	0:0	6	.
water	34:61	0:0	6	i_visible_lines
decl	35:12	36:76	6	const int	i_dst_visible_pitch
op	35:42	0:0	6	=
water	36:39	0:0	6	p_pic_dst
op	36:48	0:0	6	->
water	36:50	0:0	6	p
op	36:51	0:0	6	[
water	36:52	0:0	6	i_plane
op	36:59	0:0	6	]
op	36:60	0:0	6	.
water	36:61	0:0	6	i_visible_pitch
decl	37:12	37:77	6	const int	i_dst_hidden_pitch
op	37:42	0:0	6	=
water	37:44	0:0	6	i_dst_pitch
op	37:56	0:0	6	-
water	37:58	0:0	6	i_dst_visible_pitch
decl	39:12	40:53	6	const int	i_height_coef
op	39:37	0:0	6	=
water	39:39	0:0	6	(
water	39:41	0:0	6	i_src_height
op	39:54	0:0	6	<<
water	39:57	0:0	6	SHIFT_SIZE
water	39:68	0:0	6	)
op	40:39	0:0	6	/
water	40:41	0:0	6	i_dst_height
decl	41:12	42:52	6	const int	i_width_coef
op	41:37	0:0	6	=
water	41:39	0:0	6	(
water	41:41	0:0	6	i_src_width
op	41:53	0:0	6	<<
water	41:56	0:0	6	SHIFT_SIZE
water	41:67	0:0	6	)
op	42:39	0:0	6	/
water	42:41	0:0	6	i_dst_width
decl	43:12	43:55	6	const int	i_src_height_1
op	43:37	0:0	6	=
water	43:39	0:0	6	i_src_height
op	43:52	0:0	6	-
water	43:54	0:0	6	1
decl	44:12	44:54	6	const int	i_src_width_1
op	44:37	0:0	6	=
water	44:39	0:0	6	i_src_width
op	44:51	0:0	6	-
water	44:53	0:0	6	1
decl	45:12	45:55	6	uint8_t	*p_src
op	45:27	0:0	6	=
water	45:29	0:0	6	p_pic
op	45:34	0:0	6	->
water	45:36	0:0	6	p
op	45:37	0:0	6	[
water	45:38	0:0	6	i_plane
op	45:45	0:0	6	]
op	45:46	0:0	6	.
water	45:47	0:0	6	p_pixels
decl	46:12	46:59	6	uint8_t	*p_dst
op	46:27	0:0	6	=
water	46:29	0:0	6	p_pic_dst
op	46:38	0:0	6	->
water	46:40	0:0	6	p
op	46:41	0:0	6	[
water	46:42	0:0	6	i_plane
op	46:49	0:0	6	]
op	46:50	0:0	6	.
water	46:51	0:0	6	p_pixels
decl	47:12	47:63	6	uint8_t	*p_dstendline
op	47:34	0:0	6	=
water	47:36	0:0	6	p_dst
op	47:42	0:0	6	+
water	47:44	0:0	6	i_dst_visible_pitch
decl	48:12	48:77	6	const uint8_t	*p_dstend
op	48:36	0:0	6	=
water	48:38	0:0	6	p_dst
op	48:44	0:0	6	+
water	48:46	0:0	6	i_dst_visible_lines
op	48:65	0:0	6	*
water	48:66	0:0	6	i_dst_pitch
decl	49:12	49:66	6	const int	i_shift_height
op	49:37	0:0	6	=
water	49:39	0:0	6	i_dst_height
op	49:52	0:0	6	/
water	49:54	0:0	6	i_src_height
decl	50:12	50:63	6	const int	i_shift_width
op	50:36	0:0	6	=
water	50:38	0:0	6	i_dst_width
op	50:50	0:0	6	/
water	50:52	0:0	6	i_src_width
decl	51:12	51:50	6	int	l
op	51:18	0:0	6	=
water	51:20	0:0	6	1
op	51:21	0:0	6	<<
water	51:23	0:0	6	(
water	51:24	0:0	6	SHIFT_SIZE
op	51:34	0:0	6	-
water	51:35	0:0	6	i_shift_height
water	51:49	0:0	6	)
for	52:12	63:12	6	(;p_dst < p_dstend;p_dst += i_dst_hidden_pitch , p_dstendline += i_dst_pitch , l += i_height_coef)
forinit	52:17	52:17	7	;
water	52:17	0:0	8	;
cond	52:19	52:27	7	p_dst < p_dstend
water	52:19	0:0	8	p_dst
op	52:25	0:0	8	<
water	52:27	0:0	8	p_dstend
forexpr	53:17	54:51	7	p_dst += i_dst_hidden_pitch , p_dstendline += i_dst_pitch , l += i_height_coef
water	53:17	0:0	8	p_dst
op	53:23	0:0	8	+=
water	53:26	0:0	8	i_dst_hidden_pitch
water	53:44	0:0	8	,
water	54:17	0:0	8	p_dstendline
op	54:30	0:0	8	+=
water	54:33	0:0	8	i_dst_pitch
water	54:44	0:0	8	,
water	54:46	0:0	8	l
op	54:48	0:0	8	+=
water	54:51	0:0	8	i_height_coef
stmts	55:12	63:12	7	
water	55:12	0:0	8	{
decl	56:16	56:53	8	int	k
op	56:22	0:0	8	=
water	56:24	0:0	8	1
op	56:25	0:0	8	<<
water	56:27	0:0	8	(
water	56:28	0:0	8	SHIFT_SIZE
op	56:38	0:0	8	-
water	56:39	0:0	8	i_shift_width
water	56:52	0:0	8	)
decl	57:16	58:79	8	uint8_t	*p_srcl
op	57:32	0:0	8	=
water	57:34	0:0	8	p_src
op	58:23	0:0	8	+
water	58:25	0:0	8	(
call	58:26	58:65	9	__MIN
arg	58:33	58:47	10	i_src_height_1
water	58:33	0:0	11	i_src_height_1
arg	58:49	58:65	10	l>>SHIFT_SIZE
water	58:49	0:0	11	l
op	58:51	0:0	11	>>
water	58:54	0:0	11	SHIFT_SIZE
op	58:66	0:0	8	*
water	58:67	0:0	8	i_src_pitch
water	58:78	0:0	8	)
for	59:16	62:16	8	(;p_dst < p_dstendline;p_dst ++ , k += i_width_coef)
forinit	59:21	59:21	9	;
water	59:21	0:0	10	;
cond	59:23	59:31	9	p_dst < p_dstendline
water	59:23	0:0	10	p_dst
op	59:29	0:0	10	<
water	59:31	0:0	10	p_dstendline
forexpr	59:45	59:59	9	p_dst ++ , k += i_width_coef
water	59:45	0:0	10	p_dst
op	59:50	0:0	10	++
water	59:52	0:0	10	,
water	59:54	0:0	10	k
op	59:56	0:0	10	+=
water	59:59	0:0	10	i_width_coef
stmts	60:16	62:16	9	
water	60:16	0:0	10	{
op	61:20	0:0	10	*
water	61:21	0:0	10	p_dst
op	61:27	0:0	10	=
water	61:29	0:0	10	p_srcl
op	61:35	0:0	10	[
call	61:36	61:74	10	__MIN
arg	61:43	61:56	11	i_src_width_1
water	61:43	0:0	12	i_src_width_1
arg	61:58	61:74	11	k>>SHIFT_SIZE
water	61:58	0:0	12	k
op	61:60	0:0	12	>>
water	61:63	0:0	12	SHIFT_SIZE
op	61:75	0:0	10	]
water	61:76	0:0	10	;
water	62:16	0:0	10	}
water	63:12	0:0	8	}
water	64:8	0:0	6	}
water	65:4	0:0	4	}
else	66:4	105:4	2
stmts	67:4	105:4	3	
water	67:4	0:0	4	{
decl	68:8	68:49	4	const int	i_src_pitch
op	68:30	0:0	4	=
water	68:32	0:0	4	p_pic
op	68:37	0:0	4	->
water	68:39	0:0	4	p
op	68:40	0:0	4	->
water	68:42	0:0	4	i_pitch
decl	69:8	69:53	4	const int	i_dst_pitch
op	69:30	0:0	4	=
water	69:32	0:0	4	p_pic_dst
op	69:41	0:0	4	->
water	69:43	0:0	4	p
op	69:44	0:0	4	->
water	69:46	0:0	4	i_pitch
decl	70:8	70:66	4	const int	i_src_height
op	70:33	0:0	4	=
water	70:35	0:0	4	p_filter
op	70:43	0:0	4	->
water	70:45	0:0	4	fmt_in
op	70:51	0:0	4	.
water	70:52	0:0	4	video
op	70:57	0:0	4	.
water	70:58	0:0	4	i_height
decl	71:8	71:65	4	const int	i_src_width
op	71:33	0:0	4	=
water	71:35	0:0	4	p_filter
op	71:43	0:0	4	->
water	71:45	0:0	4	fmt_in
op	71:51	0:0	4	.
water	71:52	0:0	4	video
op	71:57	0:0	4	.
water	71:58	0:0	4	i_width
decl	72:8	72:67	4	const int	i_dst_height
op	72:33	0:0	4	=
water	72:35	0:0	4	p_filter
op	72:43	0:0	4	->
water	72:45	0:0	4	fmt_out
op	72:52	0:0	4	.
water	72:53	0:0	4	video
op	72:58	0:0	4	.
water	72:59	0:0	4	i_height
decl	73:8	73:66	4	const int	i_dst_width
op	73:33	0:0	4	=
water	73:35	0:0	4	p_filter
op	73:43	0:0	4	->
water	73:45	0:0	4	fmt_out
op	73:52	0:0	4	.
water	73:53	0:0	4	video
op	73:58	0:0	4	.
water	73:59	0:0	4	i_width
decl	74:8	75:64	4	const int	i_dst_visible_lines
op	74:38	0:0	4	=
water	75:35	0:0	4	p_pic_dst
op	75:44	0:0	4	->
water	75:46	0:0	4	p
op	75:47	0:0	4	->
water	75:49	0:0	4	i_visible_lines
decl	76:8	77:64	4	const int	i_dst_visible_pitch
op	76:38	0:0	4	=
water	77:35	0:0	4	p_pic_dst
op	77:44	0:0	4	->
water	77:46	0:0	4	p
op	77:47	0:0	4	->
water	77:49	0:0	4	i_visible_pitch
decl	78:8	78:73	4	const int	i_dst_hidden_pitch
op	78:38	0:0	4	=
water	78:40	0:0	4	i_dst_pitch
op	78:52	0:0	4	-
water	78:54	0:0	4	i_dst_visible_pitch
decl	79:8	80:49	4	const int	i_height_coef
op	79:33	0:0	4	=
water	79:35	0:0	4	(
water	79:37	0:0	4	i_src_height
op	79:50	0:0	4	<<
water	79:53	0:0	4	SHIFT_SIZE
water	79:64	0:0	4	)
op	80:35	0:0	4	/
water	80:37	0:0	4	i_dst_height
decl	81:8	82:48	4	const int	i_width_coef
op	81:33	0:0	4	=
water	81:35	0:0	4	(
water	81:37	0:0	4	i_src_width
op	81:49	0:0	4	<<
water	81:52	0:0	4	SHIFT_SIZE
water	81:63	0:0	4	)
op	82:35	0:0	4	/
water	82:37	0:0	4	i_dst_width
decl	83:8	83:51	4	const int	i_src_height_1
op	83:33	0:0	4	=
water	83:35	0:0	4	i_src_height
op	83:48	0:0	4	-
water	83:50	0:0	4	1
decl	84:8	84:50	4	const int	i_src_width_1
op	84:33	0:0	4	=
water	84:35	0:0	4	i_src_width
op	84:47	0:0	4	-
water	84:49	0:0	4	1
decl	85:8	85:55	4	uint32_t	*p_src
op	85:24	0:0	4	=
water	85:26	0:0	4	(
water	85:27	0:0	4	uint32_t
op	85:35	0:0	4	*
water	85:36	0:0	4	)
water	85:37	0:0	4	p_pic
op	85:42	0:0	4	->
water	85:44	0:0	4	p
op	85:45	0:0	4	->
water	85:47	0:0	4	p_pixels
decl	86:8	86:59	4	uint32_t	*p_dst
op	86:24	0:0	4	=
water	86:26	0:0	4	(
water	86:27	0:0	4	uint32_t
op	86:35	0:0	4	*
water	86:36	0:0	4	)
water	86:37	0:0	4	p_pic_dst
op	86:46	0:0	4	->
water	86:48	0:0	4	p
op	86:49	0:0	4	->
water	86:51	0:0	4	p_pixels
decl	87:8	87:65	4	uint32_t	*p_dstendline
op	87:31	0:0	4	=
water	87:33	0:0	4	p_dst
op	87:39	0:0	4	+
water	87:41	0:0	4	(
water	87:42	0:0	4	i_dst_visible_pitch
op	87:61	0:0	4	>>
water	87:63	0:0	4	2
water	87:64	0:0	4	)
decl	88:8	88:79	4	const uint32_t	*p_dstend
op	88:33	0:0	4	=
water	88:35	0:0	4	p_dst
op	88:41	0:0	4	+
water	88:43	0:0	4	i_dst_visible_lines
op	88:62	0:0	4	*
water	88:63	0:0	4	(
water	88:64	0:0	4	i_dst_pitch
op	88:75	0:0	4	>>
water	88:77	0:0	4	2
water	88:78	0:0	4	)
decl	89:8	89:62	4	const int	i_shift_height
op	89:33	0:0	4	=
water	89:35	0:0	4	i_dst_height
op	89:48	0:0	4	/
water	89:50	0:0	4	i_src_height
decl	90:8	90:59	4	const int	i_shift_width
op	90:32	0:0	4	=
water	90:34	0:0	4	i_dst_width
op	90:46	0:0	4	/
water	90:48	0:0	4	i_src_width
decl	91:8	91:46	4	int	l
op	91:14	0:0	4	=
water	91:16	0:0	4	1
op	91:17	0:0	4	<<
water	91:19	0:0	4	(
water	91:20	0:0	4	SHIFT_SIZE
op	91:30	0:0	4	-
water	91:31	0:0	4	i_shift_height
water	91:45	0:0	4	)
for	92:8	104:8	4	(;p_dst < p_dstend;p_dst += ( i_dst_hidden_pitch >> 2 ) , p_dstendline += ( i_dst_pitch >> 2 ) , l += i_height_coef)
forinit	92:13	92:13	5	;
water	92:13	0:0	6	;
cond	92:15	92:23	5	p_dst < p_dstend
water	92:15	0:0	6	p_dst
op	92:21	0:0	6	<
water	92:23	0:0	6	p_dstend
forexpr	93:13	95:18	5	p_dst += ( i_dst_hidden_pitch >> 2 ) , p_dstendline += ( i_dst_pitch >> 2 ) , l += i_height_coef
water	93:13	0:0	6	p_dst
op	93:19	0:0	6	+=
water	93:22	0:0	6	(
water	93:23	0:0	6	i_dst_hidden_pitch
op	93:41	0:0	6	>>
water	93:43	0:0	6	2
water	93:44	0:0	6	)
water	93:45	0:0	6	,
water	94:13	0:0	6	p_dstendline
op	94:26	0:0	6	+=
water	94:29	0:0	6	(
water	94:30	0:0	6	i_dst_pitch
op	94:41	0:0	6	>>
water	94:43	0:0	6	2
water	94:44	0:0	6	)
water	94:45	0:0	6	,
water	95:13	0:0	6	l
op	95:15	0:0	6	+=
water	95:18	0:0	6	i_height_coef
stmts	96:8	104:8	5	
water	96:8	0:0	6	{
decl	97:12	97:49	6	int	k
op	97:18	0:0	6	=
water	97:20	0:0	6	1
op	97:21	0:0	6	<<
water	97:23	0:0	6	(
water	97:24	0:0	6	SHIFT_SIZE
op	97:34	0:0	6	-
water	97:35	0:0	6	i_shift_width
water	97:48	0:0	6	)
decl	98:12	99:81	6	uint32_t	*p_srcl
op	98:29	0:0	6	=
water	98:31	0:0	6	p_src
op	99:20	0:0	6	+
water	99:22	0:0	6	(
call	99:23	99:62	7	__MIN
arg	99:30	99:44	8	i_src_height_1
water	99:30	0:0	9	i_src_height_1
arg	99:46	99:62	8	l>>SHIFT_SIZE
water	99:46	0:0	9	l
op	99:48	0:0	9	>>
water	99:51	0:0	9	SHIFT_SIZE
op	99:63	0:0	6	*
water	99:64	0:0	6	(
water	99:65	0:0	6	i_src_pitch
op	99:76	0:0	6	>>
water	99:78	0:0	6	2
water	99:79	0:0	6	)
water	99:80	0:0	6	)
for	100:12	103:12	6	(;p_dst < p_dstendline;p_dst ++ , k += i_width_coef)
forinit	100:17	100:17	7	;
water	100:17	0:0	8	;
cond	100:19	100:27	7	p_dst < p_dstendline
water	100:19	0:0	8	p_dst
op	100:25	0:0	8	<
water	100:27	0:0	8	p_dstendline
forexpr	100:41	100:55	7	p_dst ++ , k += i_width_coef
water	100:41	0:0	8	p_dst
op	100:46	0:0	8	++
water	100:48	0:0	8	,
water	100:50	0:0	8	k
op	100:52	0:0	8	+=
water	100:55	0:0	8	i_width_coef
stmts	101:12	103:12	7	
water	101:12	0:0	8	{
op	102:16	0:0	8	*
water	102:17	0:0	8	p_dst
op	102:23	0:0	8	=
water	102:25	0:0	8	p_srcl
op	102:31	0:0	8	[
call	102:32	102:70	8	__MIN
arg	102:39	102:52	9	i_src_width_1
water	102:39	0:0	10	i_src_width_1
arg	102:54	102:70	9	k>>SHIFT_SIZE
water	102:54	0:0	10	k
op	102:56	0:0	10	>>
water	102:59	0:0	10	SHIFT_SIZE
op	102:71	0:0	8	]
water	102:72	0:0	8	;
water	103:12	0:0	8	}
water	104:8	0:0	6	}
water	105:4	0:0	4	}
call	106:4	106:45	2	picture_CopyProperties
arg	106:28	106:37	3	p_pic_dst
water	106:28	0:0	4	p_pic_dst
arg	106:39	106:45	3	p_pic
water	106:39	0:0	4	p_pic
water	106:46	0:0	2	;
call	107:4	107:27	2	picture_Release
arg	107:21	107:27	3	p_pic
water	107:21	0:0	4	p_pic
water	107:28	0:0	2	;
return	108:4	108:20	2	p_pic_dst
water	108:11	0:0	3	p_pic_dst
