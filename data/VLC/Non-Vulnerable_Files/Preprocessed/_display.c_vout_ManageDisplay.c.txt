func	2:0	264:0	0	bool	vout_ManageDisplay
params	2:23	0:0	1	
param	2:24	2:42	2	vout_display_t *	vd
param	2:44	2:69	2	bool	allow_reset_pictures
stmnts	0:0	263:23	1	
decl	4:4	4:50	2	vout_display_owner_sys_t	*osys
op	4:35	0:0	2	=
water	4:37	0:0	2	vd
op	4:39	0:0	2	->
water	4:41	0:0	2	owner
op	4:46	0:0	2	.
water	4:47	0:0	2	sys
call	5:4	5:26	2	vout_display_Manage
arg	5:24	5:26	3	vd
water	5:24	0:0	4	vd
water	5:27	0:0	2	;
decl	7:4	7:32	2	const mtime_t	date
op	7:23	0:0	2	=
call	7:25	7:31	3	mdate
decl	8:4	8:28	2	bool	hide_mouse
op	8:21	0:0	2	=
water	8:23	0:0	2	false
call	9:4	9:30	2	vlc_mutex_lock
arg	9:19	9:30	3	&osys->lock
op	9:19	0:0	4	&
water	9:20	0:0	4	osys
op	9:24	0:0	4	->
water	9:26	0:0	4	lock
water	9:31	0:0	2	;
if	10:4	13:4	2	(! osys -> mouse . is_hidden && osys -> mouse . last_moved + osys -> mouse . hide_timeout < date)
cond	10:8	11:60	3	! osys -> mouse . is_hidden && osys -> mouse . last_moved + osys -> mouse . hide_timeout < date
op	10:8	0:0	4	!
water	10:9	0:0	4	osys
op	10:13	0:0	4	->
water	10:15	0:0	4	mouse
op	10:20	0:0	4	.
water	10:21	0:0	4	is_hidden
op	10:31	0:0	4	&&
water	11:8	0:0	4	osys
op	11:12	0:0	4	->
water	11:14	0:0	4	mouse
op	11:19	0:0	4	.
water	11:20	0:0	4	last_moved
op	11:31	0:0	4	+
water	11:33	0:0	4	osys
op	11:37	0:0	4	->
water	11:39	0:0	4	mouse
op	11:44	0:0	4	.
water	11:45	0:0	4	hide_timeout
op	11:58	0:0	4	<
water	11:60	0:0	4	date
stmts	11:66	13:4	3	
water	11:66	0:0	4	{
water	12:8	0:0	4	osys
op	12:12	0:0	4	->
water	12:14	0:0	4	mouse
op	12:19	0:0	4	.
water	12:20	0:0	4	is_hidden
op	12:30	0:0	4	=
water	12:32	0:0	4	hide_mouse
op	12:43	0:0	4	=
water	12:45	0:0	4	true
water	12:49	0:0	4	;
water	13:4	0:0	4	}
else	13:6	15:4	2
stmts	13:11	15:4	3	
if	13:11	15:4	4	(osys -> mouse . ch_activity)
cond	13:15	13:27	5	osys -> mouse . ch_activity
water	13:15	0:0	6	osys
op	13:19	0:0	6	->
water	13:21	0:0	6	mouse
op	13:26	0:0	6	.
water	13:27	0:0	6	ch_activity
stmts	13:40	15:4	5	
water	13:40	0:0	6	{
water	14:8	0:0	6	osys
op	14:12	0:0	6	->
water	14:14	0:0	6	mouse
op	14:19	0:0	6	.
water	14:20	0:0	6	is_hidden
op	14:30	0:0	6	=
water	14:32	0:0	6	false
water	14:37	0:0	6	;
water	15:4	0:0	6	}
water	16:4	0:0	2	osys
op	16:8	0:0	2	->
water	16:10	0:0	2	mouse
op	16:15	0:0	2	.
water	16:16	0:0	2	ch_activity
op	16:28	0:0	2	=
water	16:30	0:0	2	false
water	16:35	0:0	2	;
call	17:4	17:32	2	vlc_mutex_unlock
arg	17:21	17:32	3	&osys->lock
op	17:21	0:0	4	&
water	17:22	0:0	4	osys
op	17:26	0:0	4	->
water	17:28	0:0	4	lock
water	17:33	0:0	2	;
if	18:4	24:4	2	(hide_mouse)
cond	18:8	18:8	3	hide_mouse
water	18:8	0:0	4	hide_mouse
stmts	18:20	24:4	3	
water	18:20	0:0	4	{
if	19:8	22:8	4	(! vd -> info . has_hide_mouse)
cond	19:12	19:22	5	! vd -> info . has_hide_mouse
op	19:12	0:0	6	!
water	19:13	0:0	6	vd
op	19:15	0:0	6	->
water	19:17	0:0	6	info
op	19:21	0:0	6	.
water	19:22	0:0	6	has_hide_mouse
stmts	19:38	22:8	5	
water	19:38	0:0	6	{
call	20:12	20:50	6	msg_Dbg
arg	20:20	20:22	7	vd
water	20:20	0:0	8	vd
arg	20:24	20:50	7	"auto hiding mouse cursor"
water	20:24	0:0	8	"auto hiding mouse cursor"
water	20:51	0:0	6	;
call	21:12	21:60	6	vout_display_Control
arg	21:33	21:35	7	vd
water	21:33	0:0	8	vd
arg	21:37	21:60	7	VOUT_DISPLAY_HIDE_MOUSE
water	21:37	0:0	8	VOUT_DISPLAY_HIDE_MOUSE
water	21:61	0:0	6	;
water	22:8	0:0	6	}
call	23:8	23:44	4	vout_SendEventMouseHidden
arg	23:34	23:44	5	osys->vout
water	23:34	0:0	6	osys
op	23:38	0:0	6	->
water	23:40	0:0	6	vout
water	23:45	0:0	4	;
water	24:4	0:0	4	}
decl	25:4	25:29	2	bool	reset_render
op	25:22	0:0	2	=
water	25:24	0:0	2	false
for	26:4	260:4	2	(;;)
forinit	26:9	26:9	3	;
water	26:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	26:13	260:4	3	
water	26:13	0:0	4	{
call	27:8	27:34	4	vlc_mutex_lock
arg	27:23	27:34	5	&osys->lock
op	27:23	0:0	6	&
water	27:24	0:0	6	osys
op	27:28	0:0	6	->
water	27:30	0:0	6	lock
water	27:35	0:0	4	;
decl	28:8	28:49	4	bool	ch_fullscreen
op	28:28	0:0	4	=
water	28:30	0:0	4	osys
op	28:34	0:0	4	->
water	28:36	0:0	4	ch_fullscreen
decl	29:8	29:49	4	bool	is_fullscreen
op	29:28	0:0	4	=
water	29:30	0:0	4	osys
op	29:34	0:0	4	->
water	29:36	0:0	4	is_fullscreen
water	30:8	0:0	4	osys
op	30:12	0:0	4	->
water	30:14	0:0	4	ch_fullscreen
op	30:28	0:0	4	=
water	30:30	0:0	4	false
water	30:35	0:0	4	;
decl	31:8	31:45	4	bool	ch_wm_state
op	31:26	0:0	4	=
water	31:28	0:0	4	osys
op	31:32	0:0	4	->
water	31:34	0:0	4	ch_wm_state
water	32:8	0:0	4	unsigned
water	32:17	0:0	4	wm_state
op	32:27	0:0	4	=
water	32:29	0:0	4	osys
op	32:33	0:0	4	->
water	32:35	0:0	4	wm_state
water	32:43	0:0	4	;
water	33:8	0:0	4	osys
op	33:12	0:0	4	->
water	33:14	0:0	4	ch_wm_state
op	33:26	0:0	4	=
water	33:28	0:0	4	false
water	33:33	0:0	4	;
decl	34:8	34:58	4	bool	ch_display_size
op	34:35	0:0	4	=
water	34:37	0:0	4	osys
op	34:41	0:0	4	->
water	34:43	0:0	4	ch_display_size
decl	35:8	35:56	4	int	display_width
op	35:35	0:0	4	=
water	35:37	0:0	4	osys
op	35:41	0:0	4	->
water	35:43	0:0	4	display_width
decl	36:8	36:57	4	int	display_height
op	36:35	0:0	4	=
water	36:37	0:0	4	osys
op	36:41	0:0	4	->
water	36:43	0:0	4	display_height
decl	37:8	37:64	4	bool	display_is_fullscreen
op	37:35	0:0	4	=
water	37:37	0:0	4	osys
op	37:41	0:0	4	->
water	37:43	0:0	4	display_is_fullscreen
decl	38:8	38:60	4	bool	display_is_forced
op	38:35	0:0	4	=
water	38:37	0:0	4	osys
op	38:41	0:0	4	->
water	38:43	0:0	4	display_is_forced
water	39:8	0:0	4	osys
op	39:12	0:0	4	->
water	39:14	0:0	4	ch_display_size
op	39:30	0:0	4	=
water	39:32	0:0	4	false
water	39:37	0:0	4	;
decl	40:8	40:27	4	bool	reset_pictures
if	41:8	44:8	4	(allow_reset_pictures)
cond	41:12	41:12	5	allow_reset_pictures
water	41:12	0:0	6	allow_reset_pictures
stmts	41:34	44:8	5	
water	41:34	0:0	6	{
water	42:12	0:0	6	reset_pictures
op	42:27	0:0	6	=
water	42:29	0:0	6	osys
op	42:33	0:0	6	->
water	42:35	0:0	6	reset_pictures
water	42:49	0:0	6	;
water	43:12	0:0	6	osys
op	43:16	0:0	6	->
water	43:18	0:0	6	reset_pictures
op	43:33	0:0	6	=
water	43:35	0:0	6	false
water	43:40	0:0	6	;
water	44:8	0:0	6	}
else	44:10	46:8	4
stmts	44:15	46:8	5	
water	44:15	0:0	6	{
water	45:12	0:0	6	reset_pictures
op	45:27	0:0	6	=
water	45:29	0:0	6	false
water	45:34	0:0	6	;
water	46:8	0:0	6	}
call	47:8	47:36	4	vlc_mutex_unlock
arg	47:25	47:36	5	&osys->lock
op	47:25	0:0	6	&
water	47:26	0:0	6	osys
op	47:30	0:0	6	->
water	47:32	0:0	6	lock
water	47:37	0:0	4	;
if	48:8	62:8	4	(! ch_fullscreen && ! ch_display_size && ! reset_pictures && ! osys -> ch_display_filled && ! osys -> ch_zoom && ! ch_wm_state && ! osys -> ch_sar && ! osys -> ch_crop)
cond	48:12	55:19	5	! ch_fullscreen && ! ch_display_size && ! reset_pictures && ! osys -> ch_display_filled && ! osys -> ch_zoom && ! ch_wm_state && ! osys -> ch_sar && ! osys -> ch_crop
op	48:12	0:0	6	!
water	48:13	0:0	6	ch_fullscreen
op	48:27	0:0	6	&&
op	49:12	0:0	6	!
water	49:13	0:0	6	ch_display_size
op	49:29	0:0	6	&&
op	50:12	0:0	6	!
water	50:13	0:0	6	reset_pictures
op	50:28	0:0	6	&&
op	51:12	0:0	6	!
water	51:13	0:0	6	osys
op	51:17	0:0	6	->
water	51:19	0:0	6	ch_display_filled
op	51:37	0:0	6	&&
op	52:12	0:0	6	!
water	52:13	0:0	6	osys
op	52:17	0:0	6	->
water	52:19	0:0	6	ch_zoom
op	52:27	0:0	6	&&
op	53:12	0:0	6	!
water	53:13	0:0	6	ch_wm_state
op	53:25	0:0	6	&&
op	54:12	0:0	6	!
water	54:13	0:0	6	osys
op	54:17	0:0	6	->
water	54:19	0:0	6	ch_sar
op	54:26	0:0	6	&&
op	55:12	0:0	6	!
water	55:13	0:0	6	osys
op	55:17	0:0	6	->
water	55:19	0:0	6	ch_crop
stmts	55:28	62:8	5	
water	55:28	0:0	6	{
if	56:12	60:12	6	(! osys -> cfg . is_fullscreen && osys -> fit_window != 0)
cond	56:16	56:64	7	! osys -> cfg . is_fullscreen && osys -> fit_window != 0
op	56:16	0:0	8	!
water	56:17	0:0	8	osys
op	56:21	0:0	8	->
water	56:23	0:0	8	cfg
op	56:26	0:0	8	.
water	56:27	0:0	8	is_fullscreen
op	56:41	0:0	8	&&
water	56:44	0:0	8	osys
op	56:48	0:0	8	->
water	56:50	0:0	8	fit_window
op	56:61	0:0	8	!=
water	56:64	0:0	8	0
stmts	56:67	60:12	7	
water	56:67	0:0	8	{
call	57:16	57:63	8	VoutDisplayFitWindow
arg	57:37	57:39	9	vd
water	57:37	0:0	10	vd
arg	57:41	57:63	9	osys->fit_window==-1
water	57:41	0:0	10	osys
op	57:45	0:0	10	->
water	57:47	0:0	10	fit_window
op	57:58	0:0	10	==
op	57:61	0:0	10	-
water	57:62	0:0	10	1
water	57:64	0:0	8	;
water	58:16	0:0	8	osys
op	58:20	0:0	8	->
water	58:22	0:0	8	fit_window
op	58:33	0:0	8	=
water	58:35	0:0	8	0
water	58:36	0:0	8	;
continue	59:16	59:24	8	
water	60:12	0:0	8	}
break	61:12	61:17	6	
water	62:8	0:0	6	}
if	64:8	78:8	4	(ch_fullscreen)
cond	64:12	64:12	5	ch_fullscreen
water	64:12	0:0	6	ch_fullscreen
stmts	64:27	78:8	5	
water	64:27	0:0	6	{
decl	65:12	65:46	6	vout_display_cfg_t	cfg
op	65:35	0:0	6	=
water	65:37	0:0	6	osys
op	65:41	0:0	6	->
water	65:43	0:0	6	cfg
water	66:12	0:0	6	cfg
op	66:15	0:0	6	.
water	66:16	0:0	6	is_fullscreen
op	66:31	0:0	6	=
water	66:33	0:0	6	is_fullscreen
water	66:46	0:0	6	;
water	67:12	0:0	6	cfg
op	67:15	0:0	6	.
water	67:16	0:0	6	display
op	67:23	0:0	6	.
water	67:24	0:0	6	width
op	67:31	0:0	6	=
water	67:33	0:0	6	cfg
op	67:36	0:0	6	.
water	67:37	0:0	6	is_fullscreen
water	67:51	0:0	6	?
water	67:53	0:0	6	0
water	67:55	0:0	6	:
water	67:57	0:0	6	osys
op	67:61	0:0	6	->
water	67:63	0:0	6	width_saved
water	67:74	0:0	6	;
water	68:12	0:0	6	cfg
op	68:15	0:0	6	.
water	68:16	0:0	6	display
op	68:23	0:0	6	.
water	68:24	0:0	6	height
op	68:31	0:0	6	=
water	68:33	0:0	6	cfg
op	68:36	0:0	6	.
water	68:37	0:0	6	is_fullscreen
water	68:51	0:0	6	?
water	68:53	0:0	6	0
water	68:55	0:0	6	:
water	68:57	0:0	6	osys
op	68:61	0:0	6	->
water	68:63	0:0	6	height_saved
water	68:75	0:0	6	;
if	69:12	72:12	6	(vout_display_Control (vd ,VOUT_DISPLAY_CHANGE_FULLSCREEN ,& cfg ))
cond	69:16	69:77	7	vout_display_Control (vd ,VOUT_DISPLAY_CHANGE_FULLSCREEN ,& cfg )
call	69:16	69:77	8	vout_display_Control
arg	69:37	69:39	9	vd
water	69:37	0:0	10	vd
arg	69:41	69:71	9	VOUT_DISPLAY_CHANGE_FULLSCREEN
water	69:41	0:0	10	VOUT_DISPLAY_CHANGE_FULLSCREEN
arg	69:73	69:77	9	&cfg
op	69:73	0:0	10	&
water	69:74	0:0	10	cfg
stmts	69:80	72:12	7	
water	69:80	0:0	8	{
call	70:16	70:54	8	msg_Err
arg	70:24	70:26	9	vd
water	70:24	0:0	10	vd
arg	70:28	70:54	9	"Failed to set fullscreen"
water	70:28	0:0	10	"Failed to set fullscreen"
water	70:55	0:0	8	;
water	71:16	0:0	8	is_fullscreen
op	71:30	0:0	8	=
water	71:32	0:0	8	osys
op	71:36	0:0	8	->
water	71:38	0:0	8	cfg
op	71:41	0:0	8	.
water	71:42	0:0	8	is_fullscreen
water	71:55	0:0	8	;
water	72:12	0:0	8	}
else	72:14	74:12	6
stmts	72:19	74:12	7	
if	72:19	74:12	8	(! is_fullscreen)
cond	72:23	72:24	9	! is_fullscreen
op	72:23	0:0	10	!
water	72:24	0:0	10	is_fullscreen
stmts	72:39	74:12	9	
water	72:39	0:0	10	{
call	73:16	73:85	10	vout_display_Control
arg	73:37	73:39	11	vd
water	73:37	0:0	12	vd
arg	73:41	73:73	11	VOUT_DISPLAY_CHANGE_DISPLAY_SIZE
water	73:41	0:0	12	VOUT_DISPLAY_CHANGE_DISPLAY_SIZE
arg	73:75	73:79	11	&cfg
op	73:75	0:0	12	&
water	73:76	0:0	12	cfg
arg	73:81	73:85	11	true
water	73:81	0:0	12	true
water	73:86	0:0	10	;
water	74:12	0:0	10	}
water	75:12	0:0	6	osys
op	75:16	0:0	6	->
water	75:18	0:0	6	cfg
op	75:21	0:0	6	.
water	75:22	0:0	6	is_fullscreen
op	75:36	0:0	6	=
water	75:38	0:0	6	is_fullscreen
water	75:51	0:0	6	;
call	77:12	77:72	6	vout_SendEventFullscreen
arg	77:37	77:47	7	osys->vout
water	77:37	0:0	8	osys
op	77:41	0:0	8	->
water	77:43	0:0	8	vout
arg	77:49	77:72	7	osys->cfg.is_fullscreen
water	77:49	0:0	8	osys
op	77:53	0:0	8	->
water	77:55	0:0	8	cfg
op	77:58	0:0	8	.
water	77:59	0:0	8	is_fullscreen
water	77:73	0:0	6	;
water	78:8	0:0	6	}
if	80:8	98:8	4	(ch_display_size)
cond	80:12	80:12	5	ch_display_size
water	80:12	0:0	6	ch_display_size
stmts	80:29	98:8	5	
water	80:29	0:0	6	{
decl	81:12	81:46	6	vout_display_cfg_t	cfg
op	81:35	0:0	6	=
water	81:37	0:0	6	osys
op	81:41	0:0	6	->
water	81:43	0:0	6	cfg
water	82:12	0:0	6	cfg
op	82:15	0:0	6	.
water	82:16	0:0	6	display
op	82:23	0:0	6	.
water	82:24	0:0	6	width
op	82:31	0:0	6	=
water	82:33	0:0	6	display_width
water	82:46	0:0	6	;
water	83:12	0:0	6	cfg
op	83:15	0:0	6	.
water	83:16	0:0	6	display
op	83:23	0:0	6	.
water	83:24	0:0	6	height
op	83:31	0:0	6	=
water	83:33	0:0	6	display_height
water	83:47	0:0	6	;
if	84:12	91:12	6	(! cfg . is_fullscreen != ! display_is_fullscreen ||vout_display_Control (vd ,VOUT_DISPLAY_CHANGE_DISPLAY_SIZE ,& cfg ,display_is_forced ))
cond	84:16	85:98	7	! cfg . is_fullscreen != ! display_is_fullscreen ||vout_display_Control (vd ,VOUT_DISPLAY_CHANGE_DISPLAY_SIZE ,& cfg ,display_is_forced )
op	84:16	0:0	8	!
water	84:17	0:0	8	cfg
op	84:20	0:0	8	.
water	84:21	0:0	8	is_fullscreen
op	84:35	0:0	8	!=
op	84:38	0:0	8	!
water	84:39	0:0	8	display_is_fullscreen
op	84:61	0:0	8	||
call	85:16	85:98	8	vout_display_Control
arg	85:37	85:39	9	vd
water	85:37	0:0	10	vd
arg	85:41	85:73	9	VOUT_DISPLAY_CHANGE_DISPLAY_SIZE
water	85:41	0:0	10	VOUT_DISPLAY_CHANGE_DISPLAY_SIZE
arg	85:75	85:79	9	&cfg
op	85:75	0:0	10	&
water	85:76	0:0	10	cfg
arg	85:81	85:98	9	display_is_forced
water	85:81	0:0	10	display_is_forced
stmts	85:101	91:12	7	
water	85:101	0:0	8	{
if	86:16	87:59	8	(! display_is_forced)
cond	86:20	86:21	9	! display_is_forced
op	86:20	0:0	10	!
water	86:21	0:0	10	display_is_forced
stmts	87:20	87:59	9	
call	87:20	87:58	10	msg_Err
arg	87:28	87:30	11	vd
water	87:28	0:0	12	vd
arg	87:32	87:58	11	"Failed to resize display"
water	87:32	0:0	12	"Failed to resize display"
water	87:59	0:0	10	;
water	89:16	0:0	8	display_width
op	89:31	0:0	8	=
water	89:33	0:0	8	osys
op	89:37	0:0	8	->
water	89:39	0:0	8	cfg
op	89:42	0:0	8	.
water	89:43	0:0	8	display
op	89:50	0:0	8	.
water	89:51	0:0	8	width
water	89:56	0:0	8	;
water	90:16	0:0	8	display_height
op	90:31	0:0	8	=
water	90:33	0:0	8	osys
op	90:37	0:0	8	->
water	90:39	0:0	8	cfg
op	90:42	0:0	8	.
water	90:43	0:0	8	display
op	90:50	0:0	8	.
water	90:51	0:0	8	height
water	90:57	0:0	8	;
water	91:12	0:0	8	}
water	92:12	0:0	6	osys
op	92:16	0:0	6	->
water	92:18	0:0	6	cfg
op	92:21	0:0	6	.
water	92:22	0:0	6	display
op	92:29	0:0	6	.
water	92:30	0:0	6	width
op	92:37	0:0	6	=
water	92:39	0:0	6	display_width
water	92:52	0:0	6	;
water	93:12	0:0	6	osys
op	93:16	0:0	6	->
water	93:18	0:0	6	cfg
op	93:21	0:0	6	.
water	93:22	0:0	6	display
op	93:29	0:0	6	.
water	93:30	0:0	6	height
op	93:37	0:0	6	=
water	93:39	0:0	6	display_height
water	93:53	0:0	6	;
if	94:12	97:12	6	(! display_is_fullscreen)
cond	94:16	94:17	7	! display_is_fullscreen
op	94:16	0:0	8	!
water	94:17	0:0	8	display_is_fullscreen
stmts	94:40	97:12	7	
water	94:40	0:0	8	{
water	95:16	0:0	8	osys
op	95:20	0:0	8	->
water	95:22	0:0	8	width_saved
op	95:35	0:0	8	=
water	95:37	0:0	8	display_width
water	95:50	0:0	8	;
water	96:16	0:0	8	osys
op	96:20	0:0	8	->
water	96:22	0:0	8	height_saved
op	96:35	0:0	8	=
water	96:37	0:0	8	display_height
water	96:51	0:0	8	;
water	97:12	0:0	8	}
water	98:8	0:0	6	}
if	100:8	110:8	4	(osys -> ch_display_filled)
cond	100:12	100:18	5	osys -> ch_display_filled
water	100:12	0:0	6	osys
op	100:16	0:0	6	->
water	100:18	0:0	6	ch_display_filled
stmts	100:37	110:8	5	
water	100:37	0:0	6	{
decl	101:12	101:46	6	vout_display_cfg_t	cfg
op	101:35	0:0	6	=
water	101:37	0:0	6	osys
op	101:41	0:0	6	->
water	101:43	0:0	6	cfg
water	102:12	0:0	6	cfg
op	102:15	0:0	6	.
water	102:16	0:0	6	is_display_filled
op	102:34	0:0	6	=
water	102:36	0:0	6	osys
op	102:40	0:0	6	->
water	102:42	0:0	6	is_display_filled
water	102:59	0:0	6	;
if	103:12	106:12	6	(vout_display_Control (vd ,VOUT_DISPLAY_CHANGE_DISPLAY_FILLED ,& cfg ))
cond	103:16	103:81	7	vout_display_Control (vd ,VOUT_DISPLAY_CHANGE_DISPLAY_FILLED ,& cfg )
call	103:16	103:81	8	vout_display_Control
arg	103:37	103:39	9	vd
water	103:37	0:0	10	vd
arg	103:41	103:75	9	VOUT_DISPLAY_CHANGE_DISPLAY_FILLED
water	103:41	0:0	10	VOUT_DISPLAY_CHANGE_DISPLAY_FILLED
arg	103:77	103:81	9	&cfg
op	103:77	0:0	10	&
water	103:78	0:0	10	cfg
stmts	103:84	106:12	7	
water	103:84	0:0	8	{
call	104:16	104:67	8	msg_Err
arg	104:24	104:26	9	vd
water	104:24	0:0	10	vd
arg	104:28	104:67	9	"Failed to change display filled state"
water	104:28	0:0	10	"Failed to change display filled state"
water	104:68	0:0	8	;
water	105:16	0:0	8	osys
op	105:20	0:0	8	->
water	105:22	0:0	8	is_display_filled
op	105:40	0:0	8	=
water	105:42	0:0	8	osys
op	105:46	0:0	8	->
water	105:48	0:0	8	cfg
op	105:51	0:0	8	.
water	105:52	0:0	8	is_display_filled
water	105:69	0:0	8	;
water	106:12	0:0	8	}
water	107:12	0:0	6	osys
op	107:16	0:0	6	->
water	107:18	0:0	6	cfg
op	107:21	0:0	6	.
water	107:22	0:0	6	is_display_filled
op	107:40	0:0	6	=
water	107:42	0:0	6	osys
op	107:46	0:0	6	->
water	107:48	0:0	6	is_display_filled
water	107:65	0:0	6	;
water	108:12	0:0	6	osys
op	108:16	0:0	6	->
water	108:18	0:0	6	ch_display_filled
op	108:36	0:0	6	=
water	108:38	0:0	6	false
water	108:43	0:0	6	;
call	109:12	109:79	6	vout_SendEventDisplayFilled
arg	109:40	109:50	7	osys->vout
water	109:40	0:0	8	osys
op	109:44	0:0	8	->
water	109:46	0:0	8	vout
arg	109:52	109:79	7	osys->cfg.is_display_filled
water	109:52	0:0	8	osys
op	109:56	0:0	8	->
water	109:58	0:0	8	cfg
op	109:61	0:0	8	.
water	109:62	0:0	8	is_display_filled
water	109:80	0:0	6	;
water	110:8	0:0	6	}
if	112:8	134:8	4	(osys -> ch_zoom)
cond	112:12	112:18	5	osys -> ch_zoom
water	112:12	0:0	6	osys
op	112:16	0:0	6	->
water	112:18	0:0	6	ch_zoom
stmts	112:27	134:8	5	
water	112:27	0:0	6	{
decl	113:12	113:46	6	vout_display_cfg_t	cfg
op	113:35	0:0	6	=
water	113:37	0:0	6	osys
op	113:41	0:0	6	->
water	113:43	0:0	6	cfg
water	114:12	0:0	6	cfg
op	114:15	0:0	6	.
water	114:16	0:0	6	zoom
op	114:20	0:0	6	.
water	114:21	0:0	6	num
op	114:25	0:0	6	=
water	114:27	0:0	6	osys
op	114:31	0:0	6	->
water	114:33	0:0	6	zoom
op	114:37	0:0	6	.
water	114:38	0:0	6	num
water	114:41	0:0	6	;
water	115:12	0:0	6	cfg
op	115:15	0:0	6	.
water	115:16	0:0	6	zoom
op	115:20	0:0	6	.
water	115:21	0:0	6	den
op	115:25	0:0	6	=
water	115:27	0:0	6	osys
op	115:31	0:0	6	->
water	115:33	0:0	6	zoom
op	115:37	0:0	6	.
water	115:38	0:0	6	den
water	115:41	0:0	6	;
if	116:12	119:12	6	(10 * cfg . zoom . num <= cfg . zoom . den)
cond	116:16	116:46	7	10 * cfg . zoom . num <= cfg . zoom . den
water	116:16	0:0	8	10
op	116:19	0:0	8	*
water	116:21	0:0	8	cfg
op	116:24	0:0	8	.
water	116:25	0:0	8	zoom
op	116:29	0:0	8	.
water	116:30	0:0	8	num
op	116:34	0:0	8	<=
water	116:37	0:0	8	cfg
op	116:40	0:0	8	.
water	116:41	0:0	8	zoom
op	116:45	0:0	8	.
water	116:46	0:0	8	den
stmts	116:51	119:12	7	
water	116:51	0:0	8	{
water	117:16	0:0	8	cfg
op	117:19	0:0	8	.
water	117:20	0:0	8	zoom
op	117:24	0:0	8	.
water	117:25	0:0	8	num
op	117:29	0:0	8	=
water	117:31	0:0	8	1
water	117:32	0:0	8	;
water	118:16	0:0	8	cfg
op	118:19	0:0	8	.
water	118:20	0:0	8	zoom
op	118:24	0:0	8	.
water	118:25	0:0	8	den
op	118:29	0:0	8	=
water	118:31	0:0	8	10
water	118:33	0:0	8	;
water	119:12	0:0	8	}
else	119:14	122:12	6
stmts	119:19	122:12	7	
if	119:19	122:12	8	(cfg . zoom . num >= 10 * cfg . zoom . den)
cond	119:23	119:53	9	cfg . zoom . num >= 10 * cfg . zoom . den
water	119:23	0:0	10	cfg
op	119:26	0:0	10	.
water	119:27	0:0	10	zoom
op	119:31	0:0	10	.
water	119:32	0:0	10	num
op	119:36	0:0	10	>=
water	119:39	0:0	10	10
op	119:42	0:0	10	*
water	119:44	0:0	10	cfg
op	119:47	0:0	10	.
water	119:48	0:0	10	zoom
op	119:52	0:0	10	.
water	119:53	0:0	10	den
stmts	119:58	122:12	9	
water	119:58	0:0	10	{
water	120:16	0:0	10	cfg
op	120:19	0:0	10	.
water	120:20	0:0	10	zoom
op	120:24	0:0	10	.
water	120:25	0:0	10	num
op	120:29	0:0	10	=
water	120:31	0:0	10	10
water	120:33	0:0	10	;
water	121:16	0:0	10	cfg
op	121:19	0:0	10	.
water	121:20	0:0	10	zoom
op	121:24	0:0	10	.
water	121:25	0:0	10	den
op	121:29	0:0	10	=
water	121:31	0:0	10	1
water	121:32	0:0	10	;
water	122:12	0:0	10	}
if	123:12	127:12	6	(vout_display_Control (vd ,VOUT_DISPLAY_CHANGE_ZOOM ,& cfg ))
cond	123:16	123:71	7	vout_display_Control (vd ,VOUT_DISPLAY_CHANGE_ZOOM ,& cfg )
call	123:16	123:71	8	vout_display_Control
arg	123:37	123:39	9	vd
water	123:37	0:0	10	vd
arg	123:41	123:65	9	VOUT_DISPLAY_CHANGE_ZOOM
water	123:41	0:0	10	VOUT_DISPLAY_CHANGE_ZOOM
arg	123:67	123:71	9	&cfg
op	123:67	0:0	10	&
water	123:68	0:0	10	cfg
stmts	123:74	127:12	7	
water	123:74	0:0	8	{
call	124:16	124:51	8	msg_Err
arg	124:24	124:26	9	vd
water	124:24	0:0	10	vd
arg	124:28	124:51	9	"Failed to change zoom"
water	124:28	0:0	10	"Failed to change zoom"
water	124:52	0:0	8	;
water	125:16	0:0	8	osys
op	125:20	0:0	8	->
water	125:22	0:0	8	zoom
op	125:26	0:0	8	.
water	125:27	0:0	8	num
op	125:31	0:0	8	=
water	125:33	0:0	8	osys
op	125:37	0:0	8	->
water	125:39	0:0	8	cfg
op	125:42	0:0	8	.
water	125:43	0:0	8	zoom
op	125:47	0:0	8	.
water	125:48	0:0	8	num
water	125:51	0:0	8	;
water	126:16	0:0	8	osys
op	126:20	0:0	8	->
water	126:22	0:0	8	zoom
op	126:26	0:0	8	.
water	126:27	0:0	8	den
op	126:31	0:0	8	=
water	126:33	0:0	8	osys
op	126:37	0:0	8	->
water	126:39	0:0	8	cfg
op	126:42	0:0	8	.
water	126:43	0:0	8	zoom
op	126:47	0:0	8	.
water	126:48	0:0	8	den
water	126:51	0:0	8	;
water	127:12	0:0	8	}
else	127:14	129:12	6
stmts	127:19	129:12	7	
water	127:19	0:0	8	{
water	128:16	0:0	8	osys
op	128:20	0:0	8	->
water	128:22	0:0	8	fit_window
op	128:33	0:0	8	=
op	128:35	0:0	8	-
water	128:36	0:0	8	1
water	128:37	0:0	8	;
water	129:12	0:0	8	}
water	130:12	0:0	6	osys
op	130:16	0:0	6	->
water	130:18	0:0	6	cfg
op	130:21	0:0	6	.
water	130:22	0:0	6	zoom
op	130:26	0:0	6	.
water	130:27	0:0	6	num
op	130:31	0:0	6	=
water	130:33	0:0	6	osys
op	130:37	0:0	6	->
water	130:39	0:0	6	zoom
op	130:43	0:0	6	.
water	130:44	0:0	6	num
water	130:47	0:0	6	;
water	131:12	0:0	6	osys
op	131:16	0:0	6	->
water	131:18	0:0	6	cfg
op	131:21	0:0	6	.
water	131:22	0:0	6	zoom
op	131:26	0:0	6	.
water	131:27	0:0	6	den
op	131:31	0:0	6	=
water	131:33	0:0	6	osys
op	131:37	0:0	6	->
water	131:39	0:0	6	zoom
op	131:43	0:0	6	.
water	131:44	0:0	6	den
water	131:47	0:0	6	;
water	132:12	0:0	6	osys
op	132:16	0:0	6	->
water	132:18	0:0	6	ch_zoom
op	132:26	0:0	6	=
water	132:28	0:0	6	false
water	132:33	0:0	6	;
call	133:12	133:81	6	vout_SendEventZoom
arg	133:31	133:41	7	osys->vout
water	133:31	0:0	8	osys
op	133:35	0:0	8	->
water	133:37	0:0	8	vout
arg	133:43	133:61	7	osys->cfg.zoom.num
water	133:43	0:0	8	osys
op	133:47	0:0	8	->
water	133:49	0:0	8	cfg
op	133:52	0:0	8	.
water	133:53	0:0	8	zoom
op	133:57	0:0	8	.
water	133:58	0:0	8	num
arg	133:63	133:81	7	osys->cfg.zoom.den
water	133:63	0:0	8	osys
op	133:67	0:0	8	->
water	133:69	0:0	8	cfg
op	133:72	0:0	8	.
water	133:73	0:0	8	zoom
op	133:77	0:0	8	.
water	133:78	0:0	8	den
water	133:82	0:0	6	;
water	134:8	0:0	6	}
if	136:8	144:8	4	(ch_wm_state)
cond	136:12	136:12	5	ch_wm_state
water	136:12	0:0	6	ch_wm_state
stmts	136:25	144:8	5	
water	136:25	0:0	6	{
if	137:12	140:12	6	(vout_display_Control (vd ,VOUT_DISPLAY_CHANGE_WINDOW_STATE ,wm_state ))
cond	137:16	137:83	7	vout_display_Control (vd ,VOUT_DISPLAY_CHANGE_WINDOW_STATE ,wm_state )
call	137:16	137:83	8	vout_display_Control
arg	137:37	137:39	9	vd
water	137:37	0:0	10	vd
arg	137:41	137:73	9	VOUT_DISPLAY_CHANGE_WINDOW_STATE
water	137:41	0:0	10	VOUT_DISPLAY_CHANGE_WINDOW_STATE
arg	137:75	137:83	9	wm_state
water	137:75	0:0	10	wm_state
stmts	137:86	140:12	7	
water	137:86	0:0	8	{
call	138:16	138:50	8	msg_Err
arg	138:24	138:26	9	vd
water	138:24	0:0	10	vd
arg	138:28	138:50	9	"Failed to set on top"
water	138:28	0:0	10	"Failed to set on top"
water	138:51	0:0	8	;
water	139:16	0:0	8	wm_state
op	139:25	0:0	8	=
water	139:27	0:0	8	osys
op	139:31	0:0	8	->
water	139:33	0:0	8	wm_state
water	139:41	0:0	8	;
water	140:12	0:0	8	}
water	141:12	0:0	6	osys
op	141:16	0:0	6	->
water	141:18	0:0	6	wm_state_initial
op	141:35	0:0	6	=
water	141:37	0:0	6	wm_state
water	141:45	0:0	6	;
call	143:12	143:66	6	vout_SendEventOnTop
arg	143:32	143:42	7	osys->vout
water	143:32	0:0	8	osys
op	143:36	0:0	8	->
water	143:38	0:0	8	vout
arg	143:44	143:66	7	osys->wm_state_initial
water	143:44	0:0	8	osys
op	143:48	0:0	8	->
water	143:50	0:0	8	wm_state_initial
water	143:67	0:0	6	;
water	144:8	0:0	6	}
if	146:8	188:8	4	(osys -> ch_sar)
cond	146:12	146:18	5	osys -> ch_sar
water	146:12	0:0	6	osys
op	146:16	0:0	6	->
water	146:18	0:0	6	ch_sar
stmts	146:26	188:8	5	
water	146:26	0:0	6	{
decl	147:12	147:46	6	video_format_t	source
op	147:34	0:0	6	=
water	147:36	0:0	6	vd
op	147:38	0:0	6	->
water	147:40	0:0	6	source
if	148:12	151:12	6	(osys -> sar . num > 0 && osys -> sar . den > 0)
cond	148:16	148:53	7	osys -> sar . num > 0 && osys -> sar . den > 0
water	148:16	0:0	8	osys
op	148:20	0:0	8	->
water	148:22	0:0	8	sar
op	148:25	0:0	8	.
water	148:26	0:0	8	num
op	148:30	0:0	8	>
water	148:32	0:0	8	0
op	148:34	0:0	8	&&
water	148:37	0:0	8	osys
op	148:41	0:0	8	->
water	148:43	0:0	8	sar
op	148:46	0:0	8	.
water	148:47	0:0	8	den
op	148:51	0:0	8	>
water	148:53	0:0	8	0
stmts	148:56	151:12	7	
water	148:56	0:0	8	{
water	149:16	0:0	8	source
op	149:22	0:0	8	.
water	149:23	0:0	8	i_sar_num
op	149:33	0:0	8	=
water	149:35	0:0	8	osys
op	149:39	0:0	8	->
water	149:41	0:0	8	sar
op	149:44	0:0	8	.
water	149:45	0:0	8	num
water	149:48	0:0	8	;
water	150:16	0:0	8	source
op	150:22	0:0	8	.
water	150:23	0:0	8	i_sar_den
op	150:33	0:0	8	=
water	150:35	0:0	8	osys
op	150:39	0:0	8	->
water	150:41	0:0	8	sar
op	150:44	0:0	8	.
water	150:45	0:0	8	den
water	150:48	0:0	8	;
water	151:12	0:0	8	}
else	151:14	154:12	6
stmts	151:19	154:12	7	
water	151:19	0:0	8	{
water	152:16	0:0	8	source
op	152:22	0:0	8	.
water	152:23	0:0	8	i_sar_num
op	152:33	0:0	8	=
water	152:35	0:0	8	osys
op	152:39	0:0	8	->
water	152:41	0:0	8	source
op	152:47	0:0	8	.
water	152:48	0:0	8	i_sar_num
water	152:57	0:0	8	;
water	153:16	0:0	8	source
op	153:22	0:0	8	.
water	153:23	0:0	8	i_sar_den
op	153:33	0:0	8	=
water	153:35	0:0	8	osys
op	153:39	0:0	8	->
water	153:41	0:0	8	source
op	153:47	0:0	8	.
water	153:48	0:0	8	i_sar_den
water	153:57	0:0	8	;
water	154:12	0:0	8	}
if	155:12	163:12	6	(vout_display_Control (vd ,VOUT_DISPLAY_CHANGE_SOURCE_ASPECT ,& source ))
cond	155:16	155:83	7	vout_display_Control (vd ,VOUT_DISPLAY_CHANGE_SOURCE_ASPECT ,& source )
call	155:16	155:83	8	vout_display_Control
arg	155:37	155:39	9	vd
water	155:37	0:0	10	vd
arg	155:41	155:74	9	VOUT_DISPLAY_CHANGE_SOURCE_ASPECT
water	155:41	0:0	10	VOUT_DISPLAY_CHANGE_SOURCE_ASPECT
arg	155:76	155:83	9	&source
op	155:76	0:0	10	&
water	155:77	0:0	10	source
stmts	155:86	163:12	7	
water	155:86	0:0	8	{
call	161:16	161:56	8	msg_Err
arg	161:24	161:26	9	vd
water	161:24	0:0	10	vd
arg	161:28	161:56	9	"Failed to change source AR"
water	161:28	0:0	10	"Failed to change source AR"
water	161:57	0:0	8	;
water	162:16	0:0	8	source
op	162:23	0:0	8	=
water	162:25	0:0	8	vd
op	162:27	0:0	8	->
water	162:29	0:0	8	source
water	162:35	0:0	8	;
water	163:12	0:0	8	}
else	163:14	165:12	6
stmts	163:19	165:12	7	
if	163:19	165:12	8	(! osys -> fit_window)
cond	163:23	163:30	9	! osys -> fit_window
op	163:23	0:0	10	!
water	163:24	0:0	10	osys
op	163:28	0:0	10	->
water	163:30	0:0	10	fit_window
stmts	163:42	165:12	9	
water	163:42	0:0	10	{
water	164:16	0:0	10	osys
op	164:20	0:0	10	->
water	164:22	0:0	10	fit_window
op	164:33	0:0	10	=
water	164:35	0:0	10	1
water	164:36	0:0	10	;
water	165:12	0:0	10	}
water	166:12	0:0	6	vd
op	166:14	0:0	6	->
water	166:16	0:0	6	source
op	166:23	0:0	6	=
water	166:25	0:0	6	source
water	166:31	0:0	6	;
water	167:12	0:0	6	osys
op	167:16	0:0	6	->
water	167:18	0:0	6	sar
op	167:21	0:0	6	.
water	167:22	0:0	6	num
op	167:26	0:0	6	=
water	167:28	0:0	6	source
op	167:34	0:0	6	.
water	167:35	0:0	6	i_sar_num
water	167:44	0:0	6	;
water	168:12	0:0	6	osys
op	168:16	0:0	6	->
water	168:18	0:0	6	sar
op	168:21	0:0	6	.
water	168:22	0:0	6	den
op	168:26	0:0	6	=
water	168:28	0:0	6	source
op	168:34	0:0	6	.
water	168:35	0:0	6	i_sar_den
water	168:44	0:0	6	;
water	169:12	0:0	6	osys
op	169:16	0:0	6	->
water	169:18	0:0	6	ch_sar
op	169:26	0:0	6	=
water	169:28	0:0	6	false
water	169:33	0:0	6	;
if	171:12	175:12	6	(osys -> sar . num == osys -> source . i_sar_num && osys -> sar . den == osys -> source . i_sar_den)
cond	171:16	172:46	7	osys -> sar . num == osys -> source . i_sar_num && osys -> sar . den == osys -> source . i_sar_den
water	171:16	0:0	8	osys
op	171:20	0:0	8	->
water	171:22	0:0	8	sar
op	171:25	0:0	8	.
water	171:26	0:0	8	num
op	171:30	0:0	8	==
water	171:33	0:0	8	osys
op	171:37	0:0	8	->
water	171:39	0:0	8	source
op	171:45	0:0	8	.
water	171:46	0:0	8	i_sar_num
op	171:56	0:0	8	&&
water	172:16	0:0	8	osys
op	172:20	0:0	8	->
water	172:22	0:0	8	sar
op	172:25	0:0	8	.
water	172:26	0:0	8	den
op	172:30	0:0	8	==
water	172:33	0:0	8	osys
op	172:37	0:0	8	->
water	172:39	0:0	8	source
op	172:45	0:0	8	.
water	172:46	0:0	8	i_sar_den
stmts	173:12	175:12	7	
water	173:12	0:0	8	{
call	174:16	174:59	8	vout_SendEventSourceAspect
arg	174:43	174:53	9	osys->vout
water	174:43	0:0	10	osys
op	174:47	0:0	10	->
water	174:49	0:0	10	vout
arg	174:55	174:56	9	0
water	174:55	0:0	10	0
arg	174:58	174:59	9	0
water	174:58	0:0	10	0
water	174:60	0:0	8	;
water	175:12	0:0	8	}
else	176:12	184:12	6
stmts	177:12	184:12	7	
water	177:12	0:0	8	{
water	178:16	0:0	8	unsigned
water	178:25	0:0	8	dar_num
water	178:32	0:0	8	,
water	178:34	0:0	8	dar_den
water	178:41	0:0	8	;
call	179:16	182:34	8	vlc_ureduce
arg	179:29	179:37	9	&dar_num
op	179:29	0:0	10	&
water	179:30	0:0	10	dar_num
arg	179:39	179:47	9	&dar_den
op	179:39	0:0	10	&
water	179:40	0:0	10	dar_den
arg	180:29	180:71	9	osys->sar.num*vd->source.i_visible_width
water	180:29	0:0	10	osys
op	180:33	0:0	10	->
water	180:35	0:0	10	sar
op	180:38	0:0	10	.
water	180:39	0:0	10	num
op	180:43	0:0	10	*
water	180:45	0:0	10	vd
op	180:47	0:0	10	->
water	180:49	0:0	10	source
op	180:55	0:0	10	.
water	180:56	0:0	10	i_visible_width
arg	181:29	181:72	9	osys->sar.den*vd->source.i_visible_height
water	181:29	0:0	10	osys
op	181:33	0:0	10	->
water	181:35	0:0	10	sar
op	181:38	0:0	10	.
water	181:39	0:0	10	den
op	181:43	0:0	10	*
water	181:45	0:0	10	vd
op	181:47	0:0	10	->
water	181:49	0:0	10	source
op	181:55	0:0	10	.
water	181:56	0:0	10	i_visible_height
arg	182:29	182:34	9	65536
water	182:29	0:0	10	65536
water	182:35	0:0	8	;
call	183:16	183:71	8	vout_SendEventSourceAspect
arg	183:43	183:53	9	osys->vout
water	183:43	0:0	10	osys
op	183:47	0:0	10	->
water	183:49	0:0	10	vout
arg	183:55	183:62	9	dar_num
water	183:55	0:0	10	dar_num
arg	183:64	183:71	9	dar_den
water	183:64	0:0	10	dar_den
water	183:72	0:0	8	;
water	184:12	0:0	8	}
if	186:12	187:36	6	(osys -> crop . num > 0 && osys -> crop . den > 0)
cond	186:16	186:55	7	osys -> crop . num > 0 && osys -> crop . den > 0
water	186:16	0:0	8	osys
op	186:20	0:0	8	->
water	186:22	0:0	8	crop
op	186:26	0:0	8	.
water	186:27	0:0	8	num
op	186:31	0:0	8	>
water	186:33	0:0	8	0
op	186:35	0:0	8	&&
water	186:38	0:0	8	osys
op	186:42	0:0	8	->
water	186:44	0:0	8	crop
op	186:48	0:0	8	.
water	186:49	0:0	8	den
op	186:53	0:0	8	>
water	186:55	0:0	8	0
stmts	187:16	187:36	7	
water	187:16	0:0	8	osys
op	187:20	0:0	8	->
water	187:22	0:0	8	ch_crop
op	187:30	0:0	8	=
water	187:32	0:0	8	true
water	187:36	0:0	8	;
water	188:8	0:0	6	}
if	190:8	251:8	4	(osys -> ch_crop)
cond	190:12	190:18	5	osys -> ch_crop
water	190:12	0:0	6	osys
op	190:16	0:0	6	->
water	190:18	0:0	6	ch_crop
stmts	190:27	251:8	5	
water	190:27	0:0	6	{
decl	191:12	191:46	6	video_format_t	source
op	191:34	0:0	6	=
water	191:36	0:0	6	vd
op	191:38	0:0	6	->
water	191:40	0:0	6	source
water	192:12	0:0	6	unsigned
water	192:21	0:0	6	crop_num
op	192:30	0:0	6	=
water	192:32	0:0	6	osys
op	192:36	0:0	6	->
water	192:38	0:0	6	crop
op	192:42	0:0	6	.
water	192:43	0:0	6	num
water	192:46	0:0	6	;
water	193:12	0:0	6	unsigned
water	193:21	0:0	6	crop_den
op	193:30	0:0	6	=
water	193:32	0:0	6	osys
op	193:36	0:0	6	->
water	193:38	0:0	6	crop
op	193:42	0:0	6	.
water	193:43	0:0	6	den
water	193:46	0:0	6	;
if	194:12	201:12	6	(crop_num > 0 && crop_den > 0)
cond	194:16	194:43	7	crop_num > 0 && crop_den > 0
water	194:16	0:0	8	crop_num
op	194:25	0:0	8	>
water	194:27	0:0	8	0
op	194:29	0:0	8	&&
water	194:32	0:0	8	crop_den
op	194:41	0:0	8	>
water	194:43	0:0	8	0
stmts	194:46	201:12	7	
water	194:46	0:0	8	{
decl	195:16	195:49	8	video_format_t	fmt
op	195:35	0:0	8	=
water	195:37	0:0	8	osys
op	195:41	0:0	8	->
water	195:43	0:0	8	source
water	196:16	0:0	8	fmt
op	196:19	0:0	8	.
water	196:20	0:0	8	i_sar_num
op	196:30	0:0	8	=
water	196:32	0:0	8	source
op	196:38	0:0	8	.
water	196:39	0:0	8	i_sar_num
water	196:48	0:0	8	;
water	197:16	0:0	8	fmt
op	197:19	0:0	8	.
water	197:20	0:0	8	i_sar_den
op	197:30	0:0	8	=
water	197:32	0:0	8	source
op	197:38	0:0	8	.
water	197:39	0:0	8	i_sar_den
water	197:48	0:0	8	;
call	198:16	200:61	8	VoutDisplayCropRatio
arg	198:37	198:53	9	&osys->crop.left
op	198:37	0:0	10	&
water	198:38	0:0	10	osys
op	198:42	0:0	10	->
water	198:44	0:0	10	crop
op	198:48	0:0	10	.
water	198:49	0:0	10	left
arg	198:56	198:71	9	&osys->crop.top
op	198:56	0:0	10	&
water	198:57	0:0	10	osys
op	198:61	0:0	10	->
water	198:63	0:0	10	crop
op	198:67	0:0	10	.
water	198:68	0:0	10	top
arg	199:37	199:54	9	&osys->crop.right
op	199:37	0:0	10	&
water	199:38	0:0	10	osys
op	199:42	0:0	10	->
water	199:44	0:0	10	crop
op	199:48	0:0	10	.
water	199:49	0:0	10	right
arg	199:56	199:74	9	&osys->crop.bottom
op	199:56	0:0	10	&
water	199:57	0:0	10	osys
op	199:61	0:0	10	->
water	199:63	0:0	10	crop
op	199:67	0:0	10	.
water	199:68	0:0	10	bottom
arg	200:37	200:41	9	&fmt
op	200:37	0:0	10	&
water	200:38	0:0	10	fmt
arg	200:43	200:51	9	crop_num
water	200:43	0:0	10	crop_num
arg	200:53	200:61	9	crop_den
water	200:53	0:0	10	crop_den
water	200:62	0:0	8	;
water	201:12	0:0	8	}
decl	202:12	202:89	6	const int	right_max
op	202:33	0:0	6	=
water	202:35	0:0	6	osys
op	202:39	0:0	6	->
water	202:41	0:0	6	source
op	202:47	0:0	6	.
water	202:48	0:0	6	i_x_offset
op	202:59	0:0	6	+
water	202:61	0:0	6	osys
op	202:65	0:0	6	->
water	202:67	0:0	6	source
op	202:73	0:0	6	.
water	202:74	0:0	6	i_visible_width
decl	203:12	203:90	6	const int	bottom_max
op	203:33	0:0	6	=
water	203:35	0:0	6	osys
op	203:39	0:0	6	->
water	203:41	0:0	6	source
op	203:47	0:0	6	.
water	203:48	0:0	6	i_y_offset
op	203:59	0:0	6	+
water	203:61	0:0	6	osys
op	203:65	0:0	6	->
water	203:67	0:0	6	source
op	203:73	0:0	6	.
water	203:74	0:0	6	i_visible_height
decl	204:12	205:49	6	int	left
op	204:23	0:0	6	=
call	204:25	205:48	7	VLC_CLIP
arg	204:34	204:80	8	(int)osys->source.i_x_offset+osys->crop.left
water	204:34	0:0	9	(
water	204:35	0:0	9	int
water	204:38	0:0	9	)
water	204:39	0:0	9	osys
op	204:43	0:0	9	->
water	204:45	0:0	9	source
op	204:51	0:0	9	.
water	204:52	0:0	9	i_x_offset
op	204:63	0:0	9	+
water	204:65	0:0	9	osys
op	204:69	0:0	9	->
water	204:71	0:0	9	crop
op	204:75	0:0	9	.
water	204:76	0:0	9	left
arg	205:32	205:33	8	0
water	205:32	0:0	9	0
arg	205:35	205:48	8	right_max-1
water	205:35	0:0	9	right_max
op	205:45	0:0	9	-
water	205:47	0:0	9	1
decl	206:12	207:50	6	int	top
op	206:23	0:0	6	=
call	206:25	207:49	7	VLC_CLIP
arg	206:34	206:79	8	(int)osys->source.i_y_offset+osys->crop.top
water	206:34	0:0	9	(
water	206:35	0:0	9	int
water	206:38	0:0	9	)
water	206:39	0:0	9	osys
op	206:43	0:0	9	->
water	206:45	0:0	9	source
op	206:51	0:0	9	.
water	206:52	0:0	9	i_y_offset
op	206:63	0:0	9	+
water	206:65	0:0	9	osys
op	206:69	0:0	9	->
water	206:71	0:0	9	crop
op	206:75	0:0	9	.
water	206:76	0:0	9	top
arg	207:32	207:33	8	0
water	207:32	0:0	9	0
arg	207:35	207:49	8	bottom_max-1
water	207:35	0:0	9	bottom_max
op	207:46	0:0	9	-
water	207:48	0:0	9	1
decl	208:12	208:29	6	int	right
water	208:21	0:0	6	,
decl	208:12	208:29	6	int	bottom
if	209:12	210:104	6	(osys -> crop . right <= 0)
cond	209:16	209:36	7	osys -> crop . right <= 0
water	209:16	0:0	8	osys
op	209:20	0:0	8	->
water	209:22	0:0	8	crop
op	209:26	0:0	8	.
water	209:27	0:0	8	right
op	209:33	0:0	8	<=
water	209:36	0:0	8	0
stmts	210:16	210:104	7	
water	210:16	0:0	8	right
op	210:22	0:0	8	=
call	210:24	210:84	8	(int)
arg	210:30	210:84	9	osys->source.i_x_offset+osys->source.i_visible_width
water	210:30	0:0	10	osys
op	210:34	0:0	10	->
water	210:36	0:0	10	source
op	210:42	0:0	10	.
water	210:43	0:0	10	i_x_offset
op	210:54	0:0	10	+
water	210:56	0:0	10	osys
op	210:60	0:0	10	->
water	210:62	0:0	10	source
op	210:68	0:0	10	.
water	210:69	0:0	10	i_visible_width
op	210:86	0:0	8	+
water	210:88	0:0	8	osys
op	210:92	0:0	8	->
water	210:94	0:0	8	crop
op	210:98	0:0	8	.
water	210:99	0:0	8	right
water	210:104	0:0	8	;
else	211:12	212:71	6
stmts	212:16	212:71	7	
water	212:16	0:0	8	right
op	212:22	0:0	8	=
water	212:24	0:0	8	(
water	212:25	0:0	8	int
water	212:28	0:0	8	)
water	212:29	0:0	8	osys
op	212:33	0:0	8	->
water	212:35	0:0	8	source
op	212:41	0:0	8	.
water	212:42	0:0	8	i_x_offset
op	212:53	0:0	8	+
water	212:55	0:0	8	osys
op	212:59	0:0	8	->
water	212:61	0:0	8	crop
op	212:65	0:0	8	.
water	212:66	0:0	8	right
water	212:71	0:0	8	;
water	213:12	0:0	6	right
op	213:18	0:0	6	=
call	213:20	213:55	6	VLC_CLIP
arg	213:29	213:34	7	right
water	213:29	0:0	8	right
arg	213:36	213:44	7	left+1
water	213:36	0:0	8	left
op	213:41	0:0	8	+
water	213:43	0:0	8	1
arg	213:46	213:55	7	right_max
water	213:46	0:0	8	right_max
water	213:56	0:0	6	;
if	214:12	215:107	6	(osys -> crop . bottom <= 0)
cond	214:16	214:37	7	osys -> crop . bottom <= 0
water	214:16	0:0	8	osys
op	214:20	0:0	8	->
water	214:22	0:0	8	crop
op	214:26	0:0	8	.
water	214:27	0:0	8	bottom
op	214:34	0:0	8	<=
water	214:37	0:0	8	0
stmts	215:16	215:107	7	
water	215:16	0:0	8	bottom
op	215:23	0:0	8	=
call	215:25	215:86	8	(int)
arg	215:31	215:86	9	osys->source.i_y_offset+osys->source.i_visible_height
water	215:31	0:0	10	osys
op	215:35	0:0	10	->
water	215:37	0:0	10	source
op	215:43	0:0	10	.
water	215:44	0:0	10	i_y_offset
op	215:55	0:0	10	+
water	215:57	0:0	10	osys
op	215:61	0:0	10	->
water	215:63	0:0	10	source
op	215:69	0:0	10	.
water	215:70	0:0	10	i_visible_height
op	215:88	0:0	8	+
water	215:90	0:0	8	osys
op	215:94	0:0	8	->
water	215:96	0:0	8	crop
op	215:100	0:0	8	.
water	215:101	0:0	8	bottom
water	215:107	0:0	8	;
else	216:12	217:73	6
stmts	217:16	217:73	7	
water	217:16	0:0	8	bottom
op	217:23	0:0	8	=
water	217:25	0:0	8	(
water	217:26	0:0	8	int
water	217:29	0:0	8	)
water	217:30	0:0	8	osys
op	217:34	0:0	8	->
water	217:36	0:0	8	source
op	217:42	0:0	8	.
water	217:43	0:0	8	i_y_offset
op	217:54	0:0	8	+
water	217:56	0:0	8	osys
op	217:60	0:0	8	->
water	217:62	0:0	8	crop
op	217:66	0:0	8	.
water	217:67	0:0	8	bottom
water	217:73	0:0	8	;
water	218:12	0:0	6	bottom
op	218:19	0:0	6	=
call	218:21	218:57	6	VLC_CLIP
arg	218:30	218:36	7	bottom
water	218:30	0:0	8	bottom
arg	218:38	218:45	7	top+1
water	218:38	0:0	8	top
op	218:42	0:0	8	+
water	218:44	0:0	8	1
arg	218:47	218:57	7	bottom_max
water	218:47	0:0	8	bottom_max
water	218:58	0:0	6	;
water	219:12	0:0	6	source
op	219:18	0:0	6	.
water	219:19	0:0	6	i_x_offset
op	219:36	0:0	6	=
water	219:38	0:0	6	left
water	219:42	0:0	6	;
water	220:12	0:0	6	source
op	220:18	0:0	6	.
water	220:19	0:0	6	i_y_offset
op	220:36	0:0	6	=
water	220:38	0:0	6	top
water	220:41	0:0	6	;
water	221:12	0:0	6	source
op	221:18	0:0	6	.
water	221:19	0:0	6	i_visible_width
op	221:36	0:0	6	=
water	221:38	0:0	6	right
op	221:44	0:0	6	-
water	221:46	0:0	6	left
water	221:50	0:0	6	;
water	222:12	0:0	6	source
op	222:18	0:0	6	.
water	222:19	0:0	6	i_visible_height
op	222:36	0:0	6	=
water	222:38	0:0	6	bottom
op	222:45	0:0	6	-
water	222:47	0:0	6	top
water	222:50	0:0	6	;
call	223:12	223:71	6	video_format_Print
arg	223:31	223:45	7	VLC_OBJECT(vd)
call	223:31	223:44	8	VLC_OBJECT
arg	223:42	223:44	9	vd
water	223:42	0:0	10	vd
arg	223:47	223:56	7	"SOURCE "
water	223:47	0:0	8	"SOURCE "
arg	223:58	223:71	7	&osys->source
op	223:58	0:0	8	&
water	223:59	0:0	8	osys
op	223:63	0:0	8	->
water	223:65	0:0	8	source
water	223:72	0:0	6	;
call	224:12	224:65	6	video_format_Print
arg	224:31	224:45	7	VLC_OBJECT(vd)
call	224:31	224:44	8	VLC_OBJECT
arg	224:42	224:44	9	vd
water	224:42	0:0	10	vd
arg	224:47	224:56	7	"CROPPED"
water	224:47	0:0	8	"CROPPED"
arg	224:58	224:65	7	&source
op	224:58	0:0	8	&
water	224:59	0:0	8	source
water	224:66	0:0	6	;
if	225:12	233:12	6	(vout_display_Control (vd ,VOUT_DISPLAY_CHANGE_SOURCE_CROP ,& source ))
cond	225:16	225:81	7	vout_display_Control (vd ,VOUT_DISPLAY_CHANGE_SOURCE_CROP ,& source )
call	225:16	225:81	8	vout_display_Control
arg	225:37	225:39	9	vd
water	225:37	0:0	10	vd
arg	225:41	225:72	9	VOUT_DISPLAY_CHANGE_SOURCE_CROP
water	225:41	0:0	10	VOUT_DISPLAY_CHANGE_SOURCE_CROP
arg	225:74	225:81	9	&source
op	225:74	0:0	10	&
water	225:75	0:0	10	source
stmts	225:84	233:12	7	
water	225:84	0:0	8	{
call	226:16	226:86	8	msg_Err
arg	226:24	226:26	9	vd
water	226:24	0:0	10	vd
arg	226:28	226:86	9	"Failed to change source crop TODO implement crop at core"
water	226:28	0:0	10	"Failed to change source crop TODO implement crop at core"
water	226:87	0:0	8	;
water	227:16	0:0	8	source
op	227:23	0:0	8	=
water	227:25	0:0	8	vd
op	227:27	0:0	8	->
water	227:29	0:0	8	source
water	227:35	0:0	8	;
water	228:16	0:0	8	crop_num
op	228:25	0:0	8	=
water	228:27	0:0	8	osys
op	228:31	0:0	8	->
water	228:33	0:0	8	crop_saved
op	228:43	0:0	8	.
water	228:44	0:0	8	num
water	228:47	0:0	8	;
water	229:16	0:0	8	crop_den
op	229:25	0:0	8	=
water	229:27	0:0	8	osys
op	229:31	0:0	8	->
water	229:33	0:0	8	crop_saved
op	229:43	0:0	8	.
water	229:44	0:0	8	den
water	229:47	0:0	8	;
water	233:12	0:0	8	}
else	233:14	235:12	6
stmts	233:19	235:12	7	
if	233:19	235:12	8	(! osys -> fit_window)
cond	233:23	233:30	9	! osys -> fit_window
op	233:23	0:0	10	!
water	233:24	0:0	10	osys
op	233:28	0:0	10	->
water	233:30	0:0	10	fit_window
stmts	233:42	235:12	9	
water	233:42	0:0	10	{
water	234:16	0:0	10	osys
op	234:20	0:0	10	->
water	234:22	0:0	10	fit_window
op	234:33	0:0	10	=
water	234:35	0:0	10	1
water	234:36	0:0	10	;
water	235:12	0:0	10	}
water	236:12	0:0	6	vd
op	236:14	0:0	6	->
water	236:16	0:0	6	source
op	236:23	0:0	6	=
water	236:25	0:0	6	source
water	236:31	0:0	6	;
water	237:12	0:0	6	osys
op	237:16	0:0	6	->
water	237:18	0:0	6	crop
op	237:22	0:0	6	.
water	237:23	0:0	6	left
op	237:30	0:0	6	=
water	237:32	0:0	6	source
op	237:38	0:0	6	.
water	237:39	0:0	6	i_x_offset
op	237:50	0:0	6	-
water	237:52	0:0	6	osys
op	237:56	0:0	6	->
water	237:58	0:0	6	source
op	237:64	0:0	6	.
water	237:65	0:0	6	i_x_offset
water	237:75	0:0	6	;
water	238:12	0:0	6	osys
op	238:16	0:0	6	->
water	238:18	0:0	6	crop
op	238:22	0:0	6	.
water	238:23	0:0	6	top
op	238:30	0:0	6	=
water	238:32	0:0	6	source
op	238:38	0:0	6	.
water	238:39	0:0	6	i_y_offset
op	238:50	0:0	6	-
water	238:52	0:0	6	osys
op	238:56	0:0	6	->
water	238:58	0:0	6	source
op	238:64	0:0	6	.
water	238:65	0:0	6	i_y_offset
water	238:75	0:0	6	;
water	240:12	0:0	6	osys
op	240:16	0:0	6	->
water	240:18	0:0	6	crop
op	240:22	0:0	6	.
water	240:23	0:0	6	right
op	240:30	0:0	6	=
water	240:32	0:0	6	(
water	240:33	0:0	6	source
op	240:39	0:0	6	.
water	240:40	0:0	6	i_x_offset
op	240:51	0:0	6	+
water	240:53	0:0	6	source
op	240:59	0:0	6	.
water	240:60	0:0	6	i_visible_width
water	240:75	0:0	6	)
op	240:77	0:0	6	-
water	241:32	0:0	6	(
water	241:33	0:0	6	osys
op	241:37	0:0	6	->
water	241:39	0:0	6	source
op	241:45	0:0	6	.
water	241:46	0:0	6	i_x_offset
op	241:57	0:0	6	+
water	241:59	0:0	6	osys
op	241:63	0:0	6	->
water	241:65	0:0	6	source
op	241:71	0:0	6	.
water	241:72	0:0	6	i_visible_width
water	241:87	0:0	6	)
water	241:88	0:0	6	;
water	242:12	0:0	6	osys
op	242:16	0:0	6	->
water	242:18	0:0	6	crop
op	242:22	0:0	6	.
water	242:23	0:0	6	bottom
op	242:30	0:0	6	=
water	242:32	0:0	6	(
water	242:33	0:0	6	source
op	242:39	0:0	6	.
water	242:40	0:0	6	i_y_offset
op	242:51	0:0	6	+
water	242:53	0:0	6	source
op	242:59	0:0	6	.
water	242:60	0:0	6	i_visible_height
water	242:76	0:0	6	)
op	242:78	0:0	6	-
water	243:32	0:0	6	(
water	243:33	0:0	6	osys
op	243:37	0:0	6	->
water	243:39	0:0	6	source
op	243:45	0:0	6	.
water	243:46	0:0	6	i_y_offset
op	243:57	0:0	6	+
water	243:59	0:0	6	osys
op	243:63	0:0	6	->
water	243:65	0:0	6	source
op	243:71	0:0	6	.
water	243:72	0:0	6	i_visible_height
water	243:88	0:0	6	)
water	243:89	0:0	6	;
water	244:12	0:0	6	osys
op	244:16	0:0	6	->
water	244:18	0:0	6	crop
op	244:22	0:0	6	.
water	244:23	0:0	6	num
op	244:30	0:0	6	=
water	244:32	0:0	6	crop_num
water	244:40	0:0	6	;
water	245:12	0:0	6	osys
op	245:16	0:0	6	->
water	245:18	0:0	6	crop
op	245:22	0:0	6	.
water	245:23	0:0	6	den
op	245:30	0:0	6	=
water	245:32	0:0	6	crop_den
water	245:40	0:0	6	;
water	246:12	0:0	6	osys
op	246:16	0:0	6	->
water	246:18	0:0	6	ch_crop
op	246:26	0:0	6	=
water	246:28	0:0	6	false
water	246:33	0:0	6	;
call	247:12	250:74	6	vout_SendEventSourceCrop
arg	247:37	247:47	7	osys->vout
water	247:37	0:0	8	osys
op	247:41	0:0	8	->
water	247:43	0:0	8	vout
arg	248:37	248:51	7	osys->crop.num
water	248:37	0:0	8	osys
op	248:41	0:0	8	->
water	248:43	0:0	8	crop
op	248:47	0:0	8	.
water	248:48	0:0	8	num
arg	248:53	248:67	7	osys->crop.den
water	248:53	0:0	8	osys
op	248:57	0:0	8	->
water	248:59	0:0	8	crop
op	248:63	0:0	8	.
water	248:64	0:0	8	den
arg	249:37	249:52	7	osys->crop.left
water	249:37	0:0	8	osys
op	249:41	0:0	8	->
water	249:43	0:0	8	crop
op	249:47	0:0	8	.
water	249:48	0:0	8	left
arg	249:54	249:68	7	osys->crop.top
water	249:54	0:0	8	osys
op	249:58	0:0	8	->
water	249:60	0:0	8	crop
op	249:64	0:0	8	.
water	249:65	0:0	8	top
arg	250:37	250:54	7	-osys->crop.right
op	250:37	0:0	8	-
water	250:38	0:0	8	osys
op	250:42	0:0	8	->
water	250:44	0:0	8	crop
op	250:48	0:0	8	.
water	250:49	0:0	8	right
arg	250:56	250:74	7	-osys->crop.bottom
op	250:56	0:0	8	-
water	250:57	0:0	8	osys
op	250:61	0:0	8	->
water	250:63	0:0	8	crop
op	250:67	0:0	8	.
water	250:68	0:0	8	bottom
water	250:75	0:0	6	;
water	251:8	0:0	6	}
if	253:8	259:8	4	(reset_pictures)
cond	253:12	253:12	5	reset_pictures
water	253:12	0:0	6	reset_pictures
stmts	253:28	259:8	5	
water	253:28	0:0	6	{
if	254:12	257:12	6	(vout_display_Control (vd ,VOUT_DISPLAY_RESET_PICTURES ))
cond	254:16	254:68	7	vout_display_Control (vd ,VOUT_DISPLAY_RESET_PICTURES )
call	254:16	254:68	8	vout_display_Control
arg	254:37	254:39	9	vd
water	254:37	0:0	10	vd
arg	254:41	254:68	9	VOUT_DISPLAY_RESET_PICTURES
water	254:41	0:0	10	VOUT_DISPLAY_RESET_PICTURES
stmts	254:71	257:12	7	
water	254:71	0:0	8	{
call	256:16	256:71	8	msg_Err
arg	256:24	256:26	9	vd
water	256:24	0:0	10	vd
arg	256:28	256:71	9	"Failed to reset pictures (probably fatal)"
water	256:28	0:0	10	"Failed to reset pictures (probably fatal)"
water	256:72	0:0	8	;
water	257:12	0:0	8	}
water	258:12	0:0	6	reset_render
op	258:25	0:0	6	=
water	258:27	0:0	6	true
water	258:31	0:0	6	;
water	259:8	0:0	6	}
water	260:4	0:0	4	}
if	261:4	262:34	2	(reset_render)
cond	261:8	261:8	3	reset_render
water	261:8	0:0	4	reset_render
stmts	262:8	262:34	3	
call	262:8	262:33	4	VoutDisplayResetRender
arg	262:31	262:33	5	vd
water	262:31	0:0	6	vd
water	262:34	0:0	4	;
return	263:4	263:23	2	reset_render
water	263:11	0:0	3	reset_render
