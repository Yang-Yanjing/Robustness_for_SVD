func	2:0	77:0	0	static char *	nscdec
params	2:19	0:0	1	
param	2:21	2:42	2	vlc_object_t *	p_demux
param	2:44	2:60	2	char *	p_encoded
stmnts	0:0	76:15	1	
decl	4:4	4:18	2	unsigned int	i
decl	5:4	5:21	2	unsigned char	tmp
decl	6:4	6:22	2	unsigned char	j
water	6:19	0:0	2	,
decl	6:4	6:22	2	unsigned char	k
decl	7:4	7:23	2	unsigned int	length
decl	8:4	8:31	2	unsigned char	encoding_type
decl	9:4	9:24	2	unsigned char	*buf16
decl	10:4	10:14	2	char	*buf8
decl	11:4	11:29	2	char	*p_input
op	11:18	0:0	2	=
water	11:20	0:0	2	p_encoded
if	12:4	16:4	2	(strlen (p_input ) < 15)
cond	12:8	12:28	3	strlen (p_input ) < 15
call	12:8	12:24	4	strlen
arg	12:16	12:24	5	p_input
water	12:16	0:0	6	p_input
op	12:26	0:0	4	<
water	12:28	0:0	4	15
stmts	13:4	16:4	3	
water	13:4	0:0	4	{
call	14:8	14:65	4	msg_Err
arg	14:17	14:24	5	p_demux
water	14:17	0:0	6	p_demux
arg	14:26	14:65	5	"input string less than 15 characters"
water	14:26	0:0	6	"input string less than 15 characters"
water	14:66	0:0	4	;
return	15:8	15:19	4	NULL
water	15:15	0:0	5	NULL
water	16:4	0:0	4	}
if	17:4	21:4	2	(load_byte (1 ,& encoding_type ,& p_input ,NULL ,NULL ))
cond	17:8	17:59	3	load_byte (1 ,& encoding_type ,& p_input ,NULL ,NULL )
call	17:8	17:59	4	load_byte
arg	17:19	17:20	5	1
water	17:19	0:0	6	1
arg	17:22	17:36	5	&encoding_type
op	17:22	0:0	6	&
water	17:23	0:0	6	encoding_type
arg	17:38	17:46	5	&p_input
op	17:38	0:0	6	&
water	17:39	0:0	6	p_input
arg	17:48	17:52	5	NULL
water	17:48	0:0	6	NULL
arg	17:54	17:59	5	NULL
water	17:54	0:0	6	NULL
stmts	18:4	21:4	3	
water	18:4	0:0	4	{
call	19:8	19:60	4	msg_Err
arg	19:17	19:24	5	p_demux
water	19:17	0:0	6	p_demux
arg	19:26	19:60	5	"unable to get NSC encoding type"
water	19:26	0:0	6	"unable to get NSC encoding type"
water	19:61	0:0	4	;
return	20:8	20:19	4	NULL
water	20:15	0:0	5	NULL
water	21:4	0:0	4	}
if	22:4	27:4	2	(encoding_type != 1 && encoding_type != 2)
cond	22:8	22:47	3	encoding_type != 1 && encoding_type != 2
water	22:8	0:0	4	encoding_type
op	22:22	0:0	4	!=
water	22:25	0:0	4	1
op	22:27	0:0	4	&&
water	22:30	0:0	4	encoding_type
op	22:44	0:0	4	!=
water	22:47	0:0	4	2
stmts	23:4	27:4	3	
water	23:4	0:0	4	{
call	24:8	25:31	4	msg_Err
arg	24:17	24:24	5	p_demux
water	24:17	0:0	6	p_demux
arg	24:26	24:61	5	"encoding type %d is not supported"
water	24:26	0:0	6	"encoding type %d is not supported"
arg	25:17	25:31	5	encoding_type
water	25:17	0:0	6	encoding_type
water	25:32	0:0	4	;
return	26:8	26:19	4	NULL
water	26:15	0:0	5	NULL
water	27:4	0:0	4	}
water	28:4	0:0	2	j
op	28:6	0:0	2	=
water	28:8	0:0	2	k
op	28:10	0:0	2	=
water	28:12	0:0	2	0
water	28:13	0:0	2	;
if	29:4	33:4	2	(load_byte (encoding_type ,& tmp ,& p_input ,& j ,& k ))
cond	29:8	29:57	3	load_byte (encoding_type ,& tmp ,& p_input ,& j ,& k )
call	29:8	29:57	4	load_byte
arg	29:19	29:32	5	encoding_type
water	29:19	0:0	6	encoding_type
arg	29:34	29:38	5	&tmp
op	29:34	0:0	6	&
water	29:35	0:0	6	tmp
arg	29:40	29:48	5	&p_input
op	29:40	0:0	6	&
water	29:41	0:0	6	p_input
arg	29:50	29:52	5	&j
op	29:50	0:0	6	&
water	29:51	0:0	6	j
arg	29:54	29:57	5	&k
op	29:54	0:0	6	&
water	29:55	0:0	6	k
stmts	30:4	33:4	3	
water	30:4	0:0	4	{
call	31:8	31:45	4	msg_Err
arg	31:17	31:24	5	p_demux
water	31:17	0:0	6	p_demux
arg	31:26	31:45	5	"load_byte failed"
water	31:26	0:0	6	"load_byte failed"
water	31:46	0:0	4	;
return	32:8	32:19	4	NULL
water	32:15	0:0	5	NULL
water	33:4	0:0	4	}
for	34:4	41:4	2	(i = 0 ;i < 4;i ++)
forinit	34:9	34:14	3	i = 0 ;
water	34:9	0:0	4	i
op	34:11	0:0	4	=
water	34:13	0:0	4	0
water	34:14	0:0	4	;
cond	34:16	34:20	3	i < 4
water	34:16	0:0	4	i
op	34:18	0:0	4	<
water	34:20	0:0	4	4
forexpr	34:23	34:24	3	i ++
water	34:23	0:0	4	i
op	34:24	0:0	4	++
stmts	35:4	41:4	3	
water	35:4	0:0	4	{
if	36:8	40:8	4	(load_byte (encoding_type ,& tmp ,& p_input ,& j ,& k ))
cond	36:12	36:61	5	load_byte (encoding_type ,& tmp ,& p_input ,& j ,& k )
call	36:12	36:61	6	load_byte
arg	36:23	36:36	7	encoding_type
water	36:23	0:0	8	encoding_type
arg	36:38	36:42	7	&tmp
op	36:38	0:0	8	&
water	36:39	0:0	8	tmp
arg	36:44	36:52	7	&p_input
op	36:44	0:0	8	&
water	36:45	0:0	8	p_input
arg	36:54	36:56	7	&j
op	36:54	0:0	8	&
water	36:55	0:0	8	j
arg	36:58	36:61	7	&k
op	36:58	0:0	8	&
water	36:59	0:0	8	k
stmts	37:8	40:8	5	
water	37:8	0:0	6	{
call	38:12	38:49	6	msg_Err
arg	38:21	38:28	7	p_demux
water	38:21	0:0	8	p_demux
arg	38:30	38:49	7	"load_byte failed"
water	38:30	0:0	8	"load_byte failed"
water	38:50	0:0	6	;
return	39:12	39:23	6	NULL
water	39:19	0:0	7	NULL
water	40:8	0:0	6	}
water	41:4	0:0	4	}
water	42:4	0:0	2	length
op	42:11	0:0	2	=
water	42:13	0:0	2	0
water	42:14	0:0	2	;
for	43:4	51:4	2	(i = 4 ;i;i --)
forinit	43:9	43:14	3	i = 4 ;
water	43:9	0:0	4	i
op	43:11	0:0	4	=
water	43:13	0:0	4	4
water	43:14	0:0	4	;
cond	43:16	43:16	3	i
water	43:16	0:0	4	i
forexpr	43:19	43:20	3	i --
water	43:19	0:0	4	i
op	43:20	0:0	4	--
stmts	44:4	51:4	3	
water	44:4	0:0	4	{
if	45:8	49:8	4	(load_byte (encoding_type ,& tmp ,& p_input ,& j ,& k ))
cond	45:12	45:61	5	load_byte (encoding_type ,& tmp ,& p_input ,& j ,& k )
call	45:12	45:61	6	load_byte
arg	45:23	45:36	7	encoding_type
water	45:23	0:0	8	encoding_type
arg	45:38	45:42	7	&tmp
op	45:38	0:0	8	&
water	45:39	0:0	8	tmp
arg	45:44	45:52	7	&p_input
op	45:44	0:0	8	&
water	45:45	0:0	8	p_input
arg	45:54	45:56	7	&j
op	45:54	0:0	8	&
water	45:55	0:0	8	j
arg	45:58	45:61	7	&k
op	45:58	0:0	8	&
water	45:59	0:0	8	k
stmts	46:8	49:8	5	
water	46:8	0:0	6	{
call	47:12	47:49	6	msg_Err
arg	47:21	47:28	7	p_demux
water	47:21	0:0	8	p_demux
arg	47:30	47:49	7	"load_byte failed"
water	47:30	0:0	8	"load_byte failed"
water	47:50	0:0	6	;
return	48:12	48:23	6	NULL
water	48:19	0:0	7	NULL
water	49:8	0:0	6	}
water	50:8	0:0	4	length
op	50:15	0:0	4	|=
water	50:18	0:0	4	tmp
op	50:22	0:0	4	<<
water	50:25	0:0	4	(
water	50:26	0:0	4	(
water	50:27	0:0	4	i
op	50:29	0:0	4	-
water	50:31	0:0	4	1
water	50:32	0:0	4	)
op	50:34	0:0	4	*
water	50:36	0:0	4	8
water	50:37	0:0	4	)
water	50:38	0:0	4	;
water	51:4	0:0	4	}
if	52:4	56:4	2	(length == 0)
cond	52:8	52:18	3	length == 0
water	52:8	0:0	4	length
op	52:15	0:0	4	==
water	52:18	0:0	4	0
stmts	53:4	56:4	3	
water	53:4	0:0	4	{
call	54:8	54:40	4	msg_Err
arg	54:17	54:24	5	p_demux
water	54:17	0:0	6	p_demux
arg	54:26	54:40	5	"Length is 0"
water	54:26	0:0	6	"Length is 0"
water	54:41	0:0	4	;
return	55:8	55:19	4	NULL
water	55:15	0:0	5	NULL
water	56:4	0:0	4	}
water	57:4	0:0	2	buf16
op	57:10	0:0	2	=
call	57:12	57:27	2	malloc
arg	57:20	57:27	3	length
water	57:20	0:0	4	length
water	57:28	0:0	2	;
if	58:4	59:19	2	(buf16 == NULL)
cond	58:8	58:17	3	buf16 == NULL
water	58:8	0:0	4	buf16
op	58:14	0:0	4	==
water	58:17	0:0	4	NULL
stmts	59:8	59:19	3	
return	59:8	59:19	4	NULL
water	59:15	0:0	5	NULL
for	60:4	68:4	2	(i = 0 ;i < length;i ++)
forinit	60:9	60:14	3	i = 0 ;
water	60:9	0:0	4	i
op	60:11	0:0	4	=
water	60:13	0:0	4	0
water	60:14	0:0	4	;
cond	60:16	60:20	3	i < length
water	60:16	0:0	4	i
op	60:18	0:0	4	<
water	60:20	0:0	4	length
forexpr	60:28	60:29	3	i ++
water	60:28	0:0	4	i
op	60:29	0:0	4	++
stmts	61:4	68:4	3	
water	61:4	0:0	4	{
if	62:8	67:8	4	(load_byte (encoding_type ,& buf16 [ i ] ,& p_input ,& j ,& k ))
cond	62:12	62:68	5	load_byte (encoding_type ,& buf16 [ i ] ,& p_input ,& j ,& k )
call	62:12	62:68	6	load_byte
arg	62:23	62:36	7	encoding_type
water	62:23	0:0	8	encoding_type
arg	62:38	62:49	7	&buf16[i]
op	62:38	0:0	8	&
water	62:39	0:0	8	buf16
op	62:44	0:0	8	[
water	62:46	0:0	8	i
op	62:48	0:0	8	]
arg	62:51	62:59	7	&p_input
op	62:51	0:0	8	&
water	62:52	0:0	8	p_input
arg	62:61	62:63	7	&j
op	62:61	0:0	8	&
water	62:62	0:0	8	j
arg	62:65	62:68	7	&k
op	62:65	0:0	8	&
water	62:66	0:0	8	k
stmts	63:8	67:8	5	
water	63:8	0:0	6	{
call	64:12	64:49	6	msg_Err
arg	64:21	64:28	7	p_demux
water	64:21	0:0	8	p_demux
arg	64:30	64:49	7	"load_byte failed"
water	64:30	0:0	8	"load_byte failed"
water	64:50	0:0	6	;
call	65:12	65:24	6	free
arg	65:18	65:24	7	buf16
water	65:18	0:0	8	buf16
water	65:25	0:0	6	;
return	66:12	66:23	6	NULL
water	66:19	0:0	7	NULL
water	67:8	0:0	6	}
water	68:4	0:0	4	}
water	69:4	0:0	2	buf8
op	69:9	0:0	2	=
call	69:11	69:50	2	FromCharset
arg	69:24	69:34	3	"UTF-16LE"
water	69:24	0:0	4	"UTF-16LE"
arg	69:36	69:41	3	buf16
water	69:36	0:0	4	buf16
arg	69:43	69:50	3	length
water	69:43	0:0	4	length
water	69:51	0:0	2	;
call	70:4	70:16	2	free
arg	70:10	70:16	3	buf16
water	70:10	0:0	4	buf16
water	70:17	0:0	2	;
if	71:4	75:4	2	(buf8 == NULL)
cond	71:8	71:16	3	buf8 == NULL
water	71:8	0:0	4	buf8
op	71:13	0:0	4	==
water	71:16	0:0	4	NULL
stmts	72:4	75:4	3	
water	72:4	0:0	4	{
call	73:8	73:41	4	msg_Err
arg	73:17	73:24	5	p_demux
water	73:17	0:0	6	p_demux
arg	73:26	73:41	5	"iconv failed"
water	73:26	0:0	6	"iconv failed"
water	73:42	0:0	4	;
return	74:8	74:19	4	NULL
water	74:15	0:0	5	NULL
water	75:4	0:0	4	}
return	76:4	76:15	2	buf8
water	76:11	0:0	3	buf8
