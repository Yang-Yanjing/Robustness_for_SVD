func	2:0	91:8	0	static void	FilterGradient
params	2:26	0:0	1	
param	2:28	2:46	2	filter_t *	p_filter
param	2:48	2:66	2	picture_t *	p_inpic
param	3:48	3:68	2	picture_t *	p_outpic
stmnts	0:0	90:13	1	
decl	5:4	5:12	2	int	x
water	5:9	0:0	2	,
decl	5:4	5:12	2	int	y
decl	6:4	6:55	2	const int	i_src_pitch
op	6:26	0:0	2	=
water	6:28	0:0	2	p_inpic
op	6:35	0:0	2	->
water	6:37	0:0	2	p
op	6:38	0:0	2	[
water	6:39	0:0	2	Y_PLANE
op	6:46	0:0	2	]
op	6:47	0:0	2	.
water	6:48	0:0	2	i_pitch
decl	7:4	7:65	2	const int	i_src_visible
op	7:28	0:0	2	=
water	7:30	0:0	2	p_inpic
op	7:37	0:0	2	->
water	7:39	0:0	2	p
op	7:40	0:0	2	[
water	7:41	0:0	2	Y_PLANE
op	7:48	0:0	2	]
op	7:49	0:0	2	.
water	7:50	0:0	2	i_visible_pitch
decl	8:4	8:56	2	const int	i_dst_pitch
op	8:26	0:0	2	=
water	8:28	0:0	2	p_outpic
op	8:36	0:0	2	->
water	8:38	0:0	2	p
op	8:39	0:0	2	[
water	8:40	0:0	2	Y_PLANE
op	8:47	0:0	2	]
op	8:48	0:0	2	.
water	8:49	0:0	2	i_pitch
decl	9:4	9:63	2	const int	i_num_lines
op	9:26	0:0	2	=
water	9:28	0:0	2	p_inpic
op	9:35	0:0	2	->
water	9:37	0:0	2	p
op	9:38	0:0	2	[
water	9:39	0:0	2	Y_PLANE
op	9:46	0:0	2	]
op	9:47	0:0	2	.
water	9:48	0:0	2	i_visible_lines
decl	10:4	10:57	2	const uint8_t	*p_inpix
op	10:27	0:0	2	=
water	10:29	0:0	2	p_inpic
op	10:36	0:0	2	->
water	10:38	0:0	2	p
op	10:39	0:0	2	[
water	10:40	0:0	2	Y_PLANE
op	10:47	0:0	2	]
op	10:48	0:0	2	.
water	10:49	0:0	2	p_pixels
decl	11:4	11:53	2	uint8_t	*p_outpix
op	11:22	0:0	2	=
water	11:24	0:0	2	p_outpic
op	11:32	0:0	2	->
water	11:34	0:0	2	p
op	11:35	0:0	2	[
water	11:36	0:0	2	Y_PLANE
op	11:43	0:0	2	]
op	11:44	0:0	2	.
water	11:45	0:0	2	p_pixels
decl	12:4	12:22	2	uint32_t	*p_smooth
if	13:4	15:75	2	(! p_filter -> p_sys -> p_buf32)
cond	13:8	13:26	3	! p_filter -> p_sys -> p_buf32
op	13:8	0:0	4	!
water	13:9	0:0	4	p_filter
op	13:17	0:0	4	->
water	13:19	0:0	4	p_sys
op	13:24	0:0	4	->
water	13:26	0:0	4	p_buf32
stmts	14:8	15:75	3	
water	14:8	0:0	4	p_filter
op	14:16	0:0	4	->
water	14:18	0:0	4	p_sys
op	14:23	0:0	4	->
water	14:25	0:0	4	p_buf32
op	14:33	0:0	4	=
water	15:8	0:0	4	(
water	15:9	0:0	4	uint32_t
op	15:18	0:0	4	*
water	15:19	0:0	4	)
call	15:20	15:74	4	malloc
arg	15:28	15:74	5	i_num_lines*i_src_visible*sizeof(uint32_t)
water	15:28	0:0	6	i_num_lines
op	15:40	0:0	6	*
water	15:42	0:0	6	i_src_visible
op	15:56	0:0	6	*
op	15:58	0:0	6	sizeof
water	15:64	0:0	6	(
water	15:65	0:0	6	uint32_t
water	15:73	0:0	6	)
water	15:75	0:0	4	;
water	16:4	0:0	2	p_smooth
op	16:13	0:0	2	=
water	16:15	0:0	2	p_filter
op	16:23	0:0	2	->
water	16:25	0:0	2	p_sys
op	16:30	0:0	2	->
water	16:32	0:0	2	p_buf32
water	16:39	0:0	2	;
if	17:4	17:26	2	(! p_smooth)
cond	17:8	17:9	3	! p_smooth
op	17:8	0:0	4	!
water	17:9	0:0	4	p_smooth
stmts	17:20	17:26	3	
return	17:20	17:26	4	
if	18:4	22:4	2	(p_filter -> p_sys -> b_cartoon)
cond	18:8	18:25	3	p_filter -> p_sys -> b_cartoon
water	18:8	0:0	4	p_filter
op	18:16	0:0	4	->
water	18:18	0:0	4	p_sys
op	18:23	0:0	4	->
water	18:25	0:0	4	b_cartoon
stmts	19:4	22:4	3	
water	19:4	0:0	4	{
call	20:8	20:70	4	plane_CopyPixels
arg	20:26	20:47	5	&p_outpic->p[U_PLANE]
op	20:26	0:0	6	&
water	20:27	0:0	6	p_outpic
op	20:35	0:0	6	->
water	20:37	0:0	6	p
op	20:38	0:0	6	[
water	20:39	0:0	6	U_PLANE
op	20:46	0:0	6	]
arg	20:49	20:70	5	&p_inpic->p[U_PLANE]
op	20:49	0:0	6	&
water	20:50	0:0	6	p_inpic
op	20:57	0:0	6	->
water	20:59	0:0	6	p
op	20:60	0:0	6	[
water	20:61	0:0	6	U_PLANE
op	20:68	0:0	6	]
water	20:71	0:0	4	;
call	21:8	21:70	4	plane_CopyPixels
arg	21:26	21:47	5	&p_outpic->p[V_PLANE]
op	21:26	0:0	6	&
water	21:27	0:0	6	p_outpic
op	21:35	0:0	6	->
water	21:37	0:0	6	p
op	21:38	0:0	6	[
water	21:39	0:0	6	V_PLANE
op	21:46	0:0	6	]
arg	21:49	21:70	5	&p_inpic->p[V_PLANE]
op	21:49	0:0	6	&
water	21:50	0:0	6	p_inpic
op	21:57	0:0	6	->
water	21:59	0:0	6	p
op	21:60	0:0	6	[
water	21:61	0:0	6	V_PLANE
op	21:68	0:0	6	]
water	21:71	0:0	4	;
water	22:4	0:0	4	}
else	23:4	29:4	2
stmts	24:4	29:4	3	
water	24:4	0:0	4	{
call	25:8	26:72	4	memset
arg	25:16	25:45	5	p_outpic->p[U_PLANE].p_pixels
water	25:16	0:0	6	p_outpic
op	25:24	0:0	6	->
water	25:26	0:0	6	p
op	25:27	0:0	6	[
water	25:28	0:0	6	U_PLANE
op	25:35	0:0	6	]
op	25:36	0:0	6	.
water	25:37	0:0	6	p_pixels
arg	25:47	25:51	5	0x80
water	25:47	0:0	6	0
water	25:48	0:0	6	x80
arg	26:12	26:72	5	p_outpic->p[U_PLANE].i_lines*p_outpic->p[U_PLANE].i_pitch
water	26:12	0:0	6	p_outpic
op	26:20	0:0	6	->
water	26:22	0:0	6	p
op	26:23	0:0	6	[
water	26:24	0:0	6	U_PLANE
op	26:31	0:0	6	]
op	26:32	0:0	6	.
water	26:33	0:0	6	i_lines
op	26:41	0:0	6	*
water	26:43	0:0	6	p_outpic
op	26:51	0:0	6	->
water	26:53	0:0	6	p
op	26:54	0:0	6	[
water	26:55	0:0	6	U_PLANE
op	26:62	0:0	6	]
op	26:63	0:0	6	.
water	26:64	0:0	6	i_pitch
water	26:73	0:0	4	;
call	27:8	28:72	4	memset
arg	27:16	27:45	5	p_outpic->p[V_PLANE].p_pixels
water	27:16	0:0	6	p_outpic
op	27:24	0:0	6	->
water	27:26	0:0	6	p
op	27:27	0:0	6	[
water	27:28	0:0	6	V_PLANE
op	27:35	0:0	6	]
op	27:36	0:0	6	.
water	27:37	0:0	6	p_pixels
arg	27:47	27:51	5	0x80
water	27:47	0:0	6	0
water	27:48	0:0	6	x80
arg	28:12	28:72	5	p_outpic->p[V_PLANE].i_lines*p_outpic->p[V_PLANE].i_pitch
water	28:12	0:0	6	p_outpic
op	28:20	0:0	6	->
water	28:22	0:0	6	p
op	28:23	0:0	6	[
water	28:24	0:0	6	V_PLANE
op	28:31	0:0	6	]
op	28:32	0:0	6	.
water	28:33	0:0	6	i_lines
op	28:41	0:0	6	*
water	28:43	0:0	6	p_outpic
op	28:51	0:0	6	->
water	28:53	0:0	6	p
op	28:54	0:0	6	[
water	28:55	0:0	6	V_PLANE
op	28:62	0:0	6	]
op	28:63	0:0	6	.
water	28:64	0:0	6	i_pitch
water	28:73	0:0	4	;
water	29:4	0:0	4	}
call	30:4	30:43	2	GaussianConvolution
arg	30:25	30:32	3	p_inpic
water	30:25	0:0	4	p_inpic
arg	30:34	30:43	3	p_smooth
water	30:34	0:0	4	p_smooth
water	30:44	0:0	2	;
for	36:4	90:13	2	(y = 1 ;y < i_num_lines - 1;y ++)
forinit	36:9	36:14	3	y = 1 ;
water	36:9	0:0	4	y
op	36:11	0:0	4	=
water	36:13	0:0	4	1
water	36:14	0:0	4	;
cond	36:16	36:34	3	y < i_num_lines - 1
water	36:16	0:0	4	y
op	36:18	0:0	4	<
water	36:20	0:0	4	i_num_lines
op	36:32	0:0	4	-
water	36:34	0:0	4	1
forexpr	36:37	36:38	3	y ++
water	36:37	0:0	4	y
op	36:38	0:0	4	++
stmts	37:4	90:13	3	
water	37:4	0:0	4	{
for	38:8	85:8	4	(x = 1 ;x < i_src_visible - 1;x ++)
forinit	38:13	38:18	5	x = 1 ;
water	38:13	0:0	6	x
op	38:15	0:0	6	=
water	38:17	0:0	6	1
water	38:18	0:0	6	;
cond	38:20	38:40	5	x < i_src_visible - 1
water	38:20	0:0	6	x
op	38:22	0:0	6	<
water	38:24	0:0	6	i_src_visible
op	38:38	0:0	6	-
water	38:40	0:0	6	1
forexpr	38:43	38:44	5	x ++
water	38:43	0:0	6	x
op	38:44	0:0	6	++
stmts	39:8	85:8	5	
water	39:8	0:0	6	{
decl	40:12	59:13	6	const uint32_t	a
op	40:29	0:0	6	=
water	41:12	0:0	6	(
call	42:14	49:14	7	abs
arg	43:17	49:14	8	(p_smooth[(y-1)*i_src_visible+x-1]-p_smooth[(y+1)*i_src_visible+x-1])+((p_smooth[(y-1)*i_src_visible+x]-p_smooth[(y+1)*i_src_visible+x])<<1)+(p_smooth[(y-1)*i_src_visible+x+1]-p_smooth[(y+1)*i_src_visible+x+1])
water	43:17	0:0	9	(
water	43:19	0:0	9	p_smooth
op	43:27	0:0	9	[
water	43:28	0:0	9	(
water	43:29	0:0	9	y
op	43:30	0:0	9	-
water	43:31	0:0	9	1
water	43:32	0:0	9	)
op	43:33	0:0	9	*
water	43:34	0:0	9	i_src_visible
op	43:47	0:0	9	+
water	43:48	0:0	9	x
op	43:49	0:0	9	-
water	43:50	0:0	9	1
op	43:51	0:0	9	]
op	44:19	0:0	9	-
water	44:21	0:0	9	p_smooth
op	44:29	0:0	9	[
water	44:30	0:0	9	(
water	44:31	0:0	9	y
op	44:32	0:0	9	+
water	44:33	0:0	9	1
water	44:34	0:0	9	)
op	44:35	0:0	9	*
water	44:36	0:0	9	i_src_visible
op	44:49	0:0	9	+
water	44:50	0:0	9	x
op	44:51	0:0	9	-
water	44:52	0:0	9	1
op	44:53	0:0	9	]
water	44:55	0:0	9	)
op	45:15	0:0	9	+
water	45:17	0:0	9	(
water	45:19	0:0	9	(
water	45:21	0:0	9	p_smooth
op	45:29	0:0	9	[
water	45:30	0:0	9	(
water	45:31	0:0	9	y
op	45:32	0:0	9	-
water	45:33	0:0	9	1
water	45:34	0:0	9	)
op	45:35	0:0	9	*
water	45:36	0:0	9	i_src_visible
op	45:49	0:0	9	+
water	45:50	0:0	9	x
op	45:51	0:0	9	]
op	46:20	0:0	9	-
water	46:22	0:0	9	p_smooth
op	46:30	0:0	9	[
water	46:31	0:0	9	(
water	46:32	0:0	9	y
op	46:33	0:0	9	+
water	46:34	0:0	9	1
water	46:35	0:0	9	)
op	46:36	0:0	9	*
water	46:37	0:0	9	i_src_visible
op	46:50	0:0	9	+
water	46:51	0:0	9	x
op	46:52	0:0	9	]
water	46:54	0:0	9	)
op	46:56	0:0	9	<<
water	46:58	0:0	9	1
water	46:60	0:0	9	)
op	47:15	0:0	9	+
water	47:17	0:0	9	(
water	47:19	0:0	9	p_smooth
op	47:27	0:0	9	[
water	47:28	0:0	9	(
water	47:29	0:0	9	y
op	47:30	0:0	9	-
water	47:31	0:0	9	1
water	47:32	0:0	9	)
op	47:33	0:0	9	*
water	47:34	0:0	9	i_src_visible
op	47:47	0:0	9	+
water	47:48	0:0	9	x
op	47:49	0:0	9	+
water	47:50	0:0	9	1
op	47:51	0:0	9	]
op	48:19	0:0	9	-
water	48:21	0:0	9	p_smooth
op	48:29	0:0	9	[
water	48:30	0:0	9	(
water	48:31	0:0	9	y
op	48:32	0:0	9	+
water	48:33	0:0	9	1
water	48:34	0:0	9	)
op	48:35	0:0	9	*
water	48:36	0:0	9	i_src_visible
op	48:49	0:0	9	+
water	48:50	0:0	9	x
op	48:51	0:0	9	+
water	48:52	0:0	9	1
op	48:53	0:0	9	]
water	48:55	0:0	9	)
op	50:12	0:0	6	+
call	51:14	58:14	7	abs
arg	52:17	58:14	8	(p_smooth[(y-1)*i_src_visible+x-1]-p_smooth[(y-1)*i_src_visible+x+1])+((p_smooth[y*i_src_visible+x-1]-p_smooth[y*i_src_visible+x+1])<<1)+(p_smooth[(y+1)*i_src_visible+x-1]-p_smooth[(y+1)*i_src_visible+x+1])
water	52:17	0:0	9	(
water	52:19	0:0	9	p_smooth
op	52:27	0:0	9	[
water	52:28	0:0	9	(
water	52:29	0:0	9	y
op	52:30	0:0	9	-
water	52:31	0:0	9	1
water	52:32	0:0	9	)
op	52:33	0:0	9	*
water	52:34	0:0	9	i_src_visible
op	52:47	0:0	9	+
water	52:48	0:0	9	x
op	52:49	0:0	9	-
water	52:50	0:0	9	1
op	52:51	0:0	9	]
op	53:19	0:0	9	-
water	53:21	0:0	9	p_smooth
op	53:29	0:0	9	[
water	53:30	0:0	9	(
water	53:31	0:0	9	y
op	53:32	0:0	9	-
water	53:33	0:0	9	1
water	53:34	0:0	9	)
op	53:35	0:0	9	*
water	53:36	0:0	9	i_src_visible
op	53:49	0:0	9	+
water	53:50	0:0	9	x
op	53:51	0:0	9	+
water	53:52	0:0	9	1
op	53:53	0:0	9	]
water	53:55	0:0	9	)
op	54:15	0:0	9	+
water	54:17	0:0	9	(
water	54:19	0:0	9	(
water	54:21	0:0	9	p_smooth
op	54:29	0:0	9	[
water	54:30	0:0	9	y
op	54:31	0:0	9	*
water	54:32	0:0	9	i_src_visible
op	54:45	0:0	9	+
water	54:46	0:0	9	x
op	54:47	0:0	9	-
water	54:48	0:0	9	1
op	54:49	0:0	9	]
op	55:20	0:0	9	-
water	55:22	0:0	9	p_smooth
op	55:30	0:0	9	[
water	55:31	0:0	9	y
op	55:32	0:0	9	*
water	55:33	0:0	9	i_src_visible
op	55:46	0:0	9	+
water	55:47	0:0	9	x
op	55:48	0:0	9	+
water	55:49	0:0	9	1
op	55:50	0:0	9	]
water	55:52	0:0	9	)
op	55:54	0:0	9	<<
water	55:56	0:0	9	1
water	55:58	0:0	9	)
op	56:15	0:0	9	+
water	56:17	0:0	9	(
water	56:19	0:0	9	p_smooth
op	56:27	0:0	9	[
water	56:28	0:0	9	(
water	56:29	0:0	9	y
op	56:30	0:0	9	+
water	56:31	0:0	9	1
water	56:32	0:0	9	)
op	56:33	0:0	9	*
water	56:34	0:0	9	i_src_visible
op	56:47	0:0	9	+
water	56:48	0:0	9	x
op	56:49	0:0	9	-
water	56:50	0:0	9	1
op	56:51	0:0	9	]
op	57:19	0:0	9	-
water	57:21	0:0	9	p_smooth
op	57:29	0:0	9	[
water	57:30	0:0	9	(
water	57:31	0:0	9	y
op	57:32	0:0	9	+
water	57:33	0:0	9	1
water	57:34	0:0	9	)
op	57:35	0:0	9	*
water	57:36	0:0	9	i_src_visible
op	57:49	0:0	9	+
water	57:50	0:0	9	x
op	57:51	0:0	9	+
water	57:52	0:0	9	1
op	57:53	0:0	9	]
water	57:55	0:0	9	)
water	59:12	0:0	6	)
if	60:4	84:13	6	(p_filter -> p_sys -> i_gradient_type)
cond	60:8	60:25	7	p_filter -> p_sys -> i_gradient_type
water	60:8	0:0	8	p_filter
op	60:16	0:0	8	->
water	60:18	0:0	8	p_sys
op	60:23	0:0	8	->
water	60:25	0:0	8	i_gradient_type
stmts	61:4	84:13	7	
water	61:4	0:0	8	{
if	62:8	84:12	8	(p_filter -> p_sys -> b_cartoon)
cond	62:12	62:29	9	p_filter -> p_sys -> b_cartoon
water	62:12	0:0	10	p_filter
op	62:20	0:0	10	->
water	62:22	0:0	10	p_sys
op	62:27	0:0	10	->
water	62:29	0:0	10	b_cartoon
stmts	63:8	84:12	9	
water	63:8	0:0	10	{
water	64:12	0:0	10	FOR
if	65:12	68:12	10	(a > 60)
cond	65:16	65:20	11	a > 60
water	65:16	0:0	12	a
op	65:18	0:0	12	>
water	65:20	0:0	12	60
stmts	66:12	68:12	11	
water	66:12	0:0	12	{
water	67:16	0:0	12	p_outpix
op	67:24	0:0	12	[
water	67:25	0:0	12	y
op	67:26	0:0	12	*
water	67:27	0:0	12	i_dst_pitch
op	67:38	0:0	12	+
water	67:39	0:0	12	x
op	67:40	0:0	12	]
op	67:42	0:0	12	=
water	67:44	0:0	12	0
water	67:45	0:0	12	x00
water	67:48	0:0	12	;
water	68:12	0:0	12	}
else	69:12	83:12	10
stmts	70:12	83:12	11	
water	70:12	0:0	12	{
if	71:16	73:70	12	(p_smooth [ y * i_src_visible + x ] > 0 xa0)
cond	71:20	71:51	13	p_smooth [ y * i_src_visible + x ] > 0 xa0
water	71:20	0:0	14	p_smooth
op	71:28	0:0	14	[
water	71:29	0:0	14	y
op	71:30	0:0	14	*
water	71:31	0:0	14	i_src_visible
op	71:44	0:0	14	+
water	71:45	0:0	14	x
op	71:46	0:0	14	]
op	71:48	0:0	14	>
water	71:50	0:0	14	0
water	71:51	0:0	14	xa0
stmts	72:20	73:70	13	
water	72:20	0:0	14	p_outpix
op	72:28	0:0	14	[
water	72:29	0:0	14	y
op	72:30	0:0	14	*
water	72:31	0:0	14	i_dst_pitch
op	72:42	0:0	14	+
water	72:43	0:0	14	x
op	72:44	0:0	14	]
op	72:46	0:0	14	=
water	73:24	0:0	14	0
water	73:25	0:0	14	xff
op	73:29	0:0	14	-
water	73:31	0:0	14	(
water	73:32	0:0	14	(
water	73:33	0:0	14	0
water	73:34	0:0	14	xff
op	73:38	0:0	14	-
water	73:40	0:0	14	p_inpix
op	73:47	0:0	14	[
water	73:48	0:0	14	y
op	73:49	0:0	14	*
water	73:50	0:0	14	i_src_pitch
op	73:61	0:0	14	+
water	73:62	0:0	14	x
op	73:63	0:0	14	]
water	73:65	0:0	14	)
op	73:66	0:0	14	>>
water	73:68	0:0	14	2
water	73:69	0:0	14	)
water	73:70	0:0	14	;
else	74:16	76:70	12
stmts	74:21	76:70	13	
if	74:21	76:70	14	(p_smooth [ y * i_src_visible + x ] > 0 x70)
cond	74:25	74:56	15	p_smooth [ y * i_src_visible + x ] > 0 x70
water	74:25	0:0	16	p_smooth
op	74:33	0:0	16	[
water	74:34	0:0	16	y
op	74:35	0:0	16	*
water	74:36	0:0	16	i_src_visible
op	74:49	0:0	16	+
water	74:50	0:0	16	x
op	74:51	0:0	16	]
op	74:53	0:0	16	>
water	74:55	0:0	16	0
water	74:56	0:0	16	x70
stmts	75:20	76:70	15	
water	75:20	0:0	16	p_outpix
op	75:28	0:0	16	[
water	75:29	0:0	16	y
op	75:30	0:0	16	*
water	75:31	0:0	16	i_dst_pitch
op	75:42	0:0	16	+
water	75:43	0:0	16	x
op	75:44	0:0	16	]
op	75:46	0:0	16	=
water	76:24	0:0	16	0
water	76:25	0:0	16	xa0
op	76:29	0:0	16	-
water	76:31	0:0	16	(
water	76:32	0:0	16	(
water	76:33	0:0	16	0
water	76:34	0:0	16	xa0
op	76:38	0:0	16	-
water	76:40	0:0	16	p_inpix
op	76:47	0:0	16	[
water	76:48	0:0	16	y
op	76:49	0:0	16	*
water	76:50	0:0	16	i_src_pitch
op	76:61	0:0	16	+
water	76:62	0:0	16	x
op	76:63	0:0	16	]
water	76:65	0:0	16	)
op	76:66	0:0	16	>>
water	76:68	0:0	16	2
water	76:69	0:0	16	)
water	76:70	0:0	16	;
else	77:16	79:70	12
stmts	77:21	79:70	13	
if	77:21	79:70	14	(p_smooth [ y * i_src_visible + x ] > 0 x28)
cond	77:25	77:56	15	p_smooth [ y * i_src_visible + x ] > 0 x28
water	77:25	0:0	16	p_smooth
op	77:33	0:0	16	[
water	77:34	0:0	16	y
op	77:35	0:0	16	*
water	77:36	0:0	16	i_src_visible
op	77:49	0:0	16	+
water	77:50	0:0	16	x
op	77:51	0:0	16	]
op	77:53	0:0	16	>
water	77:55	0:0	16	0
water	77:56	0:0	16	x28
stmts	78:20	79:70	15	
water	78:20	0:0	16	p_outpix
op	78:28	0:0	16	[
water	78:29	0:0	16	y
op	78:30	0:0	16	*
water	78:31	0:0	16	i_dst_pitch
op	78:42	0:0	16	+
water	78:43	0:0	16	x
op	78:44	0:0	16	]
op	78:46	0:0	16	=
water	79:24	0:0	16	0
water	79:25	0:0	16	x70
op	79:29	0:0	16	-
water	79:31	0:0	16	(
water	79:32	0:0	16	(
water	79:33	0:0	16	0
water	79:34	0:0	16	x70
op	79:38	0:0	16	-
water	79:40	0:0	16	p_inpix
op	79:47	0:0	16	[
water	79:48	0:0	16	y
op	79:49	0:0	16	*
water	79:50	0:0	16	i_src_pitch
op	79:61	0:0	16	+
water	79:62	0:0	16	x
op	79:63	0:0	16	]
water	79:65	0:0	16	)
op	79:66	0:0	16	>>
water	79:68	0:0	16	2
water	79:69	0:0	16	)
water	79:70	0:0	16	;
else	80:16	82:70	12
stmts	81:20	82:70	13	
water	81:20	0:0	14	p_outpix
op	81:28	0:0	14	[
water	81:29	0:0	14	y
op	81:30	0:0	14	*
water	81:31	0:0	14	i_dst_pitch
op	81:42	0:0	14	+
water	81:43	0:0	14	x
op	81:44	0:0	14	]
op	81:46	0:0	14	=
water	82:24	0:0	14	0
water	82:25	0:0	14	x28
op	82:29	0:0	14	-
water	82:31	0:0	14	(
water	82:32	0:0	14	(
water	82:33	0:0	14	0
water	82:34	0:0	14	x28
op	82:38	0:0	14	-
water	82:40	0:0	14	p_inpix
op	82:47	0:0	14	[
water	82:48	0:0	14	y
op	82:49	0:0	14	*
water	82:50	0:0	14	i_src_pitch
op	82:61	0:0	14	+
water	82:62	0:0	14	x
op	82:63	0:0	14	]
water	82:65	0:0	14	)
op	82:66	0:0	14	>>
water	82:68	0:0	14	2
water	82:69	0:0	14	)
water	82:70	0:0	14	;
water	83:12	0:0	12	}
water	84:12	0:0	10	}
water	84:13	0:0	8	}
water	85:8	0:0	6	}
else	86:8	90:12	4
stmts	87:8	90:12	5	
water	87:8	0:0	6	{
decl	88:12	89:59	6	FOR	p_outpix[y*i_dst_pitch+x]
op	89:38	0:0	6	=
call	89:40	89:58	7	clip_uint8_vlc
arg	89:56	89:58	8	a
water	89:56	0:0	9	a
water	90:12	0:0	6	}
water	90:13	0:0	4	}
