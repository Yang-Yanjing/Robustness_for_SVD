func	2:0	131:0	0	static void	IVTCCadenceDetectAlgoScores
params	2:39	0:0	1	
param	2:41	2:60	2	filter_t *	p_filter
stmnts	4:4	130:58	1	
call	4:4	4:29	2	assert
arg	4:12	4:29	3	p_filter!=NULL
water	4:12	0:0	4	p_filter
op	4:21	0:0	4	!=
water	4:24	0:0	4	NULL
water	4:30	0:0	2	;
decl	5:4	5:41	2	filter_sys_t	*p_sys
op	5:24	0:0	2	=
water	5:26	0:0	2	p_filter
op	5:34	0:0	2	->
water	5:36	0:0	2	p_sys
decl	6:4	6:38	2	ivtc_sys_t	*p_ivtc
op	6:24	0:0	2	=
op	6:26	0:0	2	&
water	6:27	0:0	2	p_sys
op	6:32	0:0	2	->
water	6:34	0:0	2	ivtc
decl	7:4	7:44	2	picture_t	*p_next
op	7:22	0:0	2	=
water	7:24	0:0	2	p_sys
op	7:29	0:0	2	->
water	7:31	0:0	2	pp_history
op	7:41	0:0	2	[
water	7:42	0:0	2	2
op	7:43	0:0	2	]
call	8:4	8:27	2	assert
arg	8:12	8:27	3	p_next!=NULL
water	8:12	0:0	4	p_next
op	8:19	0:0	4	!=
water	8:22	0:0	4	NULL
water	8:28	0:0	2	;
decl	12:4	12:39	2	int	pi_ivtc_scores[NUM_CADENCE_POS]
for	13:4	16:74	2	( int i = 0 ;i < NUM_CADENCE_POS;i ++)
forinit	0:0	13:18	3	 int i = 0 ;
decl	13:9	13:18	4	int	i
op	13:15	0:0	4	=
water	13:17	0:0	4	0
cond	13:20	13:24	3	i < NUM_CADENCE_POS
water	13:20	0:0	4	i
op	13:22	0:0	4	<
water	13:24	0:0	4	NUM_CADENCE_POS
forexpr	13:41	13:42	3	i ++
water	13:41	0:0	4	i
op	13:42	0:0	4	++
stmts	14:8	16:74	3	
water	14:8	0:0	4	pi_ivtc_scores
op	14:22	0:0	4	[
water	14:23	0:0	4	i
op	14:24	0:0	4	]
op	14:26	0:0	4	=
water	14:28	0:0	4	p_ivtc
op	14:34	0:0	4	->
water	14:36	0:0	4	pi_scores
op	14:45	0:0	4	[
water	14:47	0:0	4	pi_best_field_pairs
op	14:66	0:0	4	[
water	14:67	0:0	4	i
op	14:68	0:0	4	]
op	14:69	0:0	4	[
water	14:70	0:0	4	0
op	14:71	0:0	4	]
op	14:73	0:0	4	]
op	15:26	0:0	4	+
water	15:28	0:0	4	p_ivtc
op	15:34	0:0	4	->
water	15:36	0:0	4	pi_scores
op	15:45	0:0	4	[
water	15:47	0:0	4	pi_best_field_pairs
op	15:66	0:0	4	[
water	15:67	0:0	4	i
op	15:68	0:0	4	]
op	15:69	0:0	4	[
water	15:70	0:0	4	1
op	15:71	0:0	4	]
op	15:73	0:0	4	]
op	16:26	0:0	4	+
water	16:28	0:0	4	p_ivtc
op	16:34	0:0	4	->
water	16:36	0:0	4	pi_scores
op	16:45	0:0	4	[
water	16:47	0:0	4	pi_best_field_pairs
op	16:66	0:0	4	[
water	16:67	0:0	4	i
op	16:68	0:0	4	]
op	16:69	0:0	4	[
water	16:70	0:0	4	2
op	16:71	0:0	4	]
op	16:73	0:0	4	]
water	16:74	0:0	4	;
decl	18:4	18:35	2	int	j
op	18:10	0:0	2	=
water	18:12	0:0	2	CADENCE_POS_PROGRESSIVE
decl	19:4	19:36	2	int	minscore
op	19:17	0:0	2	=
water	19:19	0:0	2	pi_ivtc_scores
op	19:33	0:0	2	[
water	19:34	0:0	2	j
op	19:35	0:0	2	]
decl	22:4	22:36	2	int	imin
op	22:13	0:0	2	=
water	22:15	0:0	2	CADENCE_POS_TFF_FIRST
decl	23:4	23:34	2	int	iend
op	23:13	0:0	2	=
water	23:15	0:0	2	CADENCE_POS_TFF_END
if	24:4	28:4	2	(! p_next -> b_top_field_first)
cond	24:8	24:17	3	! p_next -> b_top_field_first
op	24:8	0:0	4	!
water	24:9	0:0	4	p_next
op	24:15	0:0	4	->
water	24:17	0:0	4	b_top_field_first
stmts	25:4	28:4	3	
water	25:4	0:0	4	{
water	26:8	0:0	4	imin
op	26:13	0:0	4	=
water	26:15	0:0	4	CADENCE_POS_BFF_FIRST
water	26:36	0:0	4	;
water	27:8	0:0	4	iend
op	27:13	0:0	4	=
water	27:15	0:0	4	CADENCE_POS_BFF_END
water	27:34	0:0	4	;
water	28:4	0:0	4	}
for	29:4	36:4	2	( int i = imin ;i < iend;i ++)
forinit	0:0	29:21	3	 int i = imin ;
decl	29:9	29:21	4	int	i
op	29:15	0:0	4	=
water	29:17	0:0	4	imin
cond	29:23	29:27	3	i < iend
water	29:23	0:0	4	i
op	29:25	0:0	4	<
water	29:27	0:0	4	iend
forexpr	29:33	29:34	3	i ++
water	29:33	0:0	4	i
op	29:34	0:0	4	++
stmts	30:4	36:4	3	
water	30:4	0:0	4	{
if	31:8	35:8	4	(pi_ivtc_scores [ i ] < minscore)
cond	31:12	31:32	5	pi_ivtc_scores [ i ] < minscore
water	31:12	0:0	6	pi_ivtc_scores
op	31:26	0:0	6	[
water	31:27	0:0	6	i
op	31:28	0:0	6	]
op	31:30	0:0	6	<
water	31:32	0:0	6	minscore
stmts	32:8	35:8	5	
water	32:8	0:0	6	{
water	33:12	0:0	6	minscore
op	33:21	0:0	6	=
water	33:23	0:0	6	pi_ivtc_scores
op	33:37	0:0	6	[
water	33:38	0:0	6	i
op	33:39	0:0	6	]
water	33:40	0:0	6	;
water	34:12	0:0	6	j
op	34:14	0:0	6	=
water	34:16	0:0	6	i
water	34:17	0:0	6	;
water	35:8	0:0	6	}
water	36:4	0:0	4	}
water	39:4	0:0	2	p_ivtc
op	39:10	0:0	2	->
water	39:12	0:0	2	pi_s_cadence_pos
op	39:28	0:0	2	[
water	39:29	0:0	2	IVTC_LATEST
op	39:40	0:0	2	]
op	39:42	0:0	2	=
water	39:44	0:0	2	j
water	39:45	0:0	2	;
decl	49:4	49:54	2	int	mean
op	49:13	0:0	2	=
water	49:15	0:0	2	pi_ivtc_scores
op	49:29	0:0	2	[
water	49:30	0:0	2	CADENCE_POS_PROGRESSIVE
op	49:53	0:0	2	]
decl	50:4	50:27	2	int	mean_except_min
op	50:24	0:0	2	=
water	50:26	0:0	2	0
if	51:4	52:65	2	(j != CADENCE_POS_PROGRESSIVE)
cond	51:8	51:13	3	j != CADENCE_POS_PROGRESSIVE
water	51:8	0:0	4	j
op	51:10	0:0	4	!=
water	51:13	0:0	4	CADENCE_POS_PROGRESSIVE
stmts	52:8	52:65	3	
water	52:8	0:0	4	mean_except_min
op	52:24	0:0	4	=
water	52:26	0:0	4	pi_ivtc_scores
op	52:40	0:0	4	[
water	52:41	0:0	4	CADENCE_POS_PROGRESSIVE
op	52:64	0:0	4	]
water	52:65	0:0	4	;
for	53:4	58:4	2	( int i = imin ;i < iend;i ++)
forinit	0:0	53:21	3	 int i = imin ;
decl	53:9	53:21	4	int	i
op	53:15	0:0	4	=
water	53:17	0:0	4	imin
cond	53:23	53:27	3	i < iend
water	53:23	0:0	4	i
op	53:25	0:0	4	<
water	53:27	0:0	4	iend
forexpr	53:33	53:34	3	i ++
water	53:33	0:0	4	i
op	53:34	0:0	4	++
stmts	54:4	58:4	3	
water	54:4	0:0	4	{
water	55:8	0:0	4	mean
op	55:13	0:0	4	+=
water	55:16	0:0	4	pi_ivtc_scores
op	55:30	0:0	4	[
water	55:31	0:0	4	i
op	55:32	0:0	4	]
water	55:33	0:0	4	;
if	56:8	57:48	4	(i != j)
cond	56:12	56:17	5	i != j
water	56:12	0:0	6	i
op	56:14	0:0	6	!=
water	56:17	0:0	6	j
stmts	57:12	57:48	5	
water	57:12	0:0	6	mean_except_min
op	57:28	0:0	6	+=
water	57:31	0:0	6	pi_ivtc_scores
op	57:45	0:0	6	[
water	57:46	0:0	6	i
op	57:47	0:0	6	]
water	57:48	0:0	6	;
water	58:4	0:0	4	}
water	60:4	0:0	2	mean
op	60:9	0:0	2	/=
water	60:12	0:0	2	(
water	60:13	0:0	2	iend
op	60:18	0:0	2	-
water	60:20	0:0	2	imin
op	60:25	0:0	2	+
water	60:27	0:0	2	1
water	60:28	0:0	2	)
water	60:29	0:0	2	;
water	61:4	0:0	2	mean_except_min
op	61:20	0:0	2	/=
water	61:23	0:0	2	(
water	61:24	0:0	2	iend
op	61:29	0:0	2	-
water	61:31	0:0	2	imin
water	61:35	0:0	2	)
water	61:36	0:0	2	;
decl	63:4	63:62	2	double	mean_ratio
op	63:22	0:0	2	=
water	63:24	0:0	2	(
water	63:25	0:0	2	double
water	63:31	0:0	2	)
water	63:32	0:0	2	mean_except_min
op	63:48	0:0	2	/
water	63:50	0:0	2	(
water	63:51	0:0	2	double
water	63:57	0:0	2	)
water	63:58	0:0	2	mean
decl	70:4	70:76	2	int64_t	diff
op	70:17	0:0	2	=
call	70:19	70:75	3	(int64_t)
arg	70:29	70:75	4	pi_ivtc_scores[CADENCE_POS_PROGRESSIVE]-mean
water	70:29	0:0	5	pi_ivtc_scores
op	70:43	0:0	5	[
water	70:44	0:0	5	CADENCE_POS_PROGRESSIVE
op	70:67	0:0	5	]
op	70:69	0:0	5	-
water	70:71	0:0	5	mean
decl	71:4	71:27	2	int64_t	var
op	71:16	0:0	2	=
water	71:18	0:0	2	diff
op	71:22	0:0	2	*
water	71:23	0:0	2	diff
decl	72:4	72:30	2	int64_t	var_except_min
op	72:27	0:0	2	=
water	72:29	0:0	2	0
if	73:4	78:4	2	(j != CADENCE_POS_PROGRESSIVE)
cond	73:8	73:13	3	j != CADENCE_POS_PROGRESSIVE
water	73:8	0:0	4	j
op	73:10	0:0	4	!=
water	73:13	0:0	4	CADENCE_POS_PROGRESSIVE
stmts	74:4	78:4	3	
water	74:4	0:0	4	{
decl	75:8	76:56	4	int64_t	diff_exm
op	75:25	0:0	4	=
call	75:27	76:55	5	(int64_t)
arg	75:37	76:55	6	pi_ivtc_scores[CADENCE_POS_PROGRESSIVE]-mean_except_min
water	75:37	0:0	7	pi_ivtc_scores
op	75:51	0:0	7	[
water	75:52	0:0	7	CADENCE_POS_PROGRESSIVE
op	75:75	0:0	7	]
op	76:38	0:0	7	-
water	76:40	0:0	7	mean_except_min
water	77:8	0:0	4	var_except_min
op	77:23	0:0	4	=
water	77:25	0:0	4	diff_exm
op	77:33	0:0	4	*
water	77:34	0:0	4	diff_exm
water	77:42	0:0	4	;
water	78:4	0:0	4	}
for	79:4	88:4	2	( int i = imin ;i < iend;i ++)
forinit	0:0	79:21	3	 int i = imin ;
decl	79:9	79:21	4	int	i
op	79:15	0:0	4	=
water	79:17	0:0	4	imin
cond	79:23	79:27	3	i < iend
water	79:23	0:0	4	i
op	79:25	0:0	4	<
water	79:27	0:0	4	iend
forexpr	79:33	79:34	3	i ++
water	79:33	0:0	4	i
op	79:34	0:0	4	++
stmts	80:4	88:4	3	
water	80:4	0:0	4	{
water	81:8	0:0	4	diff
op	81:13	0:0	4	=
call	81:15	81:49	4	(int64_t)
arg	81:25	81:49	5	pi_ivtc_scores[i]-mean
water	81:25	0:0	6	pi_ivtc_scores
op	81:39	0:0	6	[
water	81:40	0:0	6	i
op	81:41	0:0	6	]
op	81:43	0:0	6	-
water	81:45	0:0	6	mean
water	81:50	0:0	4	;
water	82:8	0:0	4	var
op	82:12	0:0	4	+=
water	82:15	0:0	4	(
water	82:16	0:0	4	diff
op	82:20	0:0	4	*
water	82:21	0:0	4	diff
water	82:25	0:0	4	)
water	82:26	0:0	4	;
if	83:8	87:8	4	(i != j)
cond	83:12	83:17	5	i != j
water	83:12	0:0	6	i
op	83:14	0:0	6	!=
water	83:17	0:0	6	j
stmts	84:8	87:8	5	
water	84:8	0:0	6	{
decl	85:12	85:77	6	int64_t	diff_exm
op	85:29	0:0	6	=
call	85:31	85:76	7	(int64_t)
arg	85:41	85:76	8	pi_ivtc_scores[i]-mean_except_min
water	85:41	0:0	9	pi_ivtc_scores
op	85:55	0:0	9	[
water	85:56	0:0	9	i
op	85:57	0:0	9	]
op	85:59	0:0	9	-
water	85:61	0:0	9	mean_except_min
water	86:12	0:0	6	var_except_min
op	86:27	0:0	6	+=
water	86:30	0:0	6	(
water	86:31	0:0	6	diff_exm
op	86:39	0:0	6	*
water	86:40	0:0	6	diff_exm
water	86:48	0:0	6	)
water	86:49	0:0	6	;
water	87:8	0:0	6	}
water	88:4	0:0	4	}
water	90:4	0:0	2	var
op	90:8	0:0	2	/=
call	90:11	90:37	2	(uint64_t)
arg	90:22	90:37	3	iend-imin+1
water	90:22	0:0	4	iend
op	90:27	0:0	4	-
water	90:29	0:0	4	imin
op	90:34	0:0	4	+
water	90:36	0:0	4	1
water	90:38	0:0	2	;
water	91:4	0:0	2	var_except_min
op	91:19	0:0	2	/=
call	91:22	91:44	2	(uint64_t)
arg	91:33	91:44	3	iend-imin
water	91:33	0:0	4	iend
op	91:38	0:0	4	-
water	91:40	0:0	4	imin
water	91:45	0:0	2	;
decl	98:4	98:62	2	int	j_curr
op	98:15	0:0	2	=
water	98:17	0:0	2	p_ivtc
op	98:23	0:0	2	->
water	98:25	0:0	2	pi_cadence_pos_history
op	98:47	0:0	2	[
water	98:48	0:0	2	IVTC_LATEST
op	98:59	0:0	2	-
water	98:60	0:0	2	1
op	98:61	0:0	2	]
decl	99:4	99:52	2	int	pos_next
op	99:17	0:0	2	=
water	99:19	0:0	2	pi_detected_pos_to_cadence_pos
op	99:49	0:0	2	[
water	99:50	0:0	2	j
op	99:51	0:0	2	]
decl	103:4	103:27	2	bool	b_expected
op	103:20	0:0	2	=
water	103:22	0:0	2	false
if	104:4	108:4	2	(j_curr != CADENCE_POS_INVALID)
cond	104:8	104:18	3	j_curr != CADENCE_POS_INVALID
water	104:8	0:0	4	j_curr
op	104:15	0:0	4	!=
water	104:18	0:0	4	CADENCE_POS_INVALID
stmts	105:4	108:4	3	
water	105:4	0:0	4	{
decl	106:8	106:61	4	int	pos_curr
op	106:21	0:0	4	=
water	106:23	0:0	4	pi_detected_pos_to_cadence_pos
op	106:53	0:0	4	[
water	106:54	0:0	4	j_curr
op	106:60	0:0	4	]
water	107:8	0:0	4	b_expected
op	107:19	0:0	4	=
water	107:21	0:0	4	(
water	107:22	0:0	4	pos_next
op	107:31	0:0	4	==
water	107:34	0:0	4	(
water	107:35	0:0	4	pos_curr
op	107:44	0:0	4	+
water	107:46	0:0	4	1
water	107:47	0:0	4	)
op	107:49	0:0	4	%
water	107:51	0:0	4	5
water	107:52	0:0	4	)
water	107:53	0:0	4	;
water	108:4	0:0	4	}
decl	112:4	112:61	2	int	i_blocks_with_motion
op	112:29	0:0	2	=
water	112:31	0:0	2	p_ivtc
op	112:37	0:0	2	->
water	112:39	0:0	2	pi_motion
op	112:48	0:0	2	[
water	112:49	0:0	2	IVTC_LATEST
op	112:60	0:0	2	]
decl	125:4	129:7	2	bool	b_result_reliable
op	125:27	0:0	2	=
water	126:6	0:0	2	(
water	126:8	0:0	2	i_blocks_with_motion
op	126:29	0:0	2	>
water	126:31	0:0	2	0
op	126:38	0:0	2	&&
water	127:8	0:0	2	mean_ratio
op	127:29	0:0	2	>
water	127:31	0:0	2	1
op	127:32	0:0	2	.
water	127:33	0:0	2	005
op	127:38	0:0	2	&&
water	128:8	0:0	2	(
water	128:10	0:0	2	b_expected
op	128:21	0:0	2	||
water	128:24	0:0	2	(
water	128:26	0:0	2	(
water	128:27	0:0	2	double
water	128:33	0:0	2	)
water	128:34	0:0	2	var
op	128:38	0:0	2	>
water	128:40	0:0	2	1
op	128:41	0:0	2	.
water	128:42	0:0	2	17
op	128:44	0:0	2	*
water	128:45	0:0	2	(
water	128:46	0:0	2	double
water	128:52	0:0	2	)
water	128:53	0:0	2	var_except_min
water	128:68	0:0	2	)
water	128:70	0:0	2	)
water	129:6	0:0	2	)
water	130:4	0:0	2	p_ivtc
op	130:10	0:0	2	->
water	130:12	0:0	2	pb_s_reliable
op	130:25	0:0	2	[
water	130:26	0:0	2	IVTC_LATEST
op	130:37	0:0	2	]
op	130:39	0:0	2	=
water	130:41	0:0	2	b_result_reliable
water	130:58	0:0	2	;
