func	2:0	103:0	0	int	MMSHOpen
params	2:12	0:0	1	
param	2:14	2:33	2	access_t *	p_access
stmnts	0:0	102:23	1	
decl	4:4	4:26	2	access_sys_t	*p_sys
decl	5:4	5:40	2	char	*psz_location
op	5:34	0:0	2	=
water	5:36	0:0	2	NULL
decl	6:4	6:30	2	char	*psz_proxy
water	7:4	0:0	2	STANDARD_BLOCK_ACCESS_INIT
water	8:4	0:0	2	p_sys
op	8:9	0:0	2	->
water	8:11	0:0	2	i_proto
op	8:18	0:0	2	=
water	8:20	0:0	2	MMS_PROTO_HTTP
water	8:34	0:0	2	;
water	9:4	0:0	2	p_sys
op	9:9	0:0	2	->
water	9:11	0:0	2	fd
op	9:18	0:0	2	=
op	9:20	0:0	2	-
water	9:21	0:0	2	1
water	9:22	0:0	2	;
water	11:4	0:0	2	p_sys
op	11:9	0:0	2	->
water	11:11	0:0	2	b_proxy
op	11:19	0:0	2	=
water	11:21	0:0	2	false
water	11:26	0:0	2	;
call	12:4	12:51	2	memset
arg	12:12	12:25	3	&p_sys->proxy
op	12:12	0:0	4	&
water	12:13	0:0	4	p_sys
op	12:18	0:0	4	->
water	12:20	0:0	4	proxy
arg	12:27	12:28	3	0
water	12:27	0:0	4	0
arg	12:30	12:51	3	sizeof(p_sys->proxy)
op	12:30	0:0	4	sizeof
water	12:36	0:0	4	(
water	12:37	0:0	4	p_sys
op	12:42	0:0	4	->
water	12:44	0:0	4	proxy
water	12:49	0:0	4	)
water	12:52	0:0	2	;
water	15:4	0:0	2	psz_proxy
op	15:14	0:0	2	=
call	15:16	15:68	2	var_CreateGetNonEmptyString
arg	15:45	15:53	3	p_access
water	15:45	0:0	4	p_access
arg	15:55	15:68	3	"mmsh-proxy"
water	15:55	0:0	4	"mmsh-proxy"
water	15:69	0:0	2	;
if	16:4	24:4	2	(! psz_proxy)
cond	16:8	16:9	3	! psz_proxy
op	16:8	0:0	4	!
water	16:9	0:0	4	psz_proxy
stmts	17:4	24:4	3	
water	17:4	0:0	4	{
decl	18:8	18:74	4	char	*psz_http_proxy
op	18:29	0:0	4	=
call	18:31	18:73	5	var_InheritString
arg	18:50	18:58	6	p_access
water	18:50	0:0	7	p_access
arg	18:60	18:73	6	"http-proxy"
water	18:60	0:0	7	"http-proxy"
if	19:8	23:8	4	(psz_http_proxy)
cond	19:12	19:12	5	psz_http_proxy
water	19:12	0:0	6	psz_http_proxy
stmts	20:8	23:8	5	
water	20:8	0:0	6	{
water	21:12	0:0	6	psz_proxy
op	21:22	0:0	6	=
water	21:24	0:0	6	psz_http_proxy
water	21:38	0:0	6	;
call	22:12	22:61	6	var_SetString
arg	22:27	22:35	7	p_access
water	22:27	0:0	8	p_access
arg	22:37	22:49	7	"mmsh-proxy"
water	22:37	0:0	8	"mmsh-proxy"
arg	22:51	22:61	7	psz_proxy
water	22:51	0:0	8	psz_proxy
water	22:62	0:0	6	;
water	23:8	0:0	6	}
water	24:4	0:0	4	}
if	25:4	30:4	2	(psz_proxy)
cond	25:8	25:8	3	psz_proxy
water	25:8	0:0	4	psz_proxy
stmts	26:4	30:4	3	
water	26:4	0:0	4	{
water	27:8	0:0	4	p_sys
op	27:13	0:0	4	->
water	27:15	0:0	4	b_proxy
op	27:23	0:0	4	=
water	27:25	0:0	4	true
water	27:29	0:0	4	;
call	28:8	28:50	4	vlc_UrlParse
arg	28:22	28:35	5	&p_sys->proxy
op	28:22	0:0	6	&
water	28:23	0:0	6	p_sys
op	28:28	0:0	6	->
water	28:30	0:0	6	proxy
arg	28:37	28:46	5	psz_proxy
water	28:37	0:0	6	psz_proxy
arg	28:48	28:50	5	0
water	28:48	0:0	6	0
water	28:51	0:0	4	;
call	29:8	29:24	4	free
arg	29:14	29:24	5	psz_proxy
water	29:14	0:0	6	psz_proxy
water	29:25	0:0	4	;
water	30:4	0:0	4	}
else	31:4	39:4	2
stmts	32:4	39:4	3	
water	32:4	0:0	4	{
decl	33:8	33:55	4	const char	*http_proxy
op	33:31	0:0	4	=
call	33:33	33:54	5	getenv
arg	33:41	33:54	6	"http_proxy"
water	33:41	0:0	7	"http_proxy"
if	34:8	38:8	4	(http_proxy)
cond	34:12	34:12	5	http_proxy
water	34:12	0:0	6	http_proxy
stmts	35:8	38:8	5	
water	35:8	0:0	6	{
water	36:12	0:0	6	p_sys
op	36:17	0:0	6	->
water	36:19	0:0	6	b_proxy
op	36:27	0:0	6	=
water	36:29	0:0	6	true
water	36:33	0:0	6	;
call	37:12	37:55	6	vlc_UrlParse
arg	37:26	37:39	7	&p_sys->proxy
op	37:26	0:0	8	&
water	37:27	0:0	8	p_sys
op	37:32	0:0	8	->
water	37:34	0:0	8	proxy
arg	37:41	37:51	7	http_proxy
water	37:41	0:0	8	http_proxy
arg	37:53	37:55	7	0
water	37:53	0:0	8	0
water	37:56	0:0	6	;
water	38:8	0:0	6	}
water	39:4	0:0	4	}
if	40:4	54:4	2	(p_sys -> b_proxy)
cond	40:8	40:15	3	p_sys -> b_proxy
water	40:8	0:0	4	p_sys
op	40:13	0:0	4	->
water	40:15	0:0	4	b_proxy
stmts	41:4	54:4	3	
water	41:4	0:0	4	{
if	42:8	49:8	4	(( p_sys -> proxy . psz_host == NULL ) || ( * p_sys -> proxy . psz_host == '\0' ))
cond	42:12	43:45	5	( p_sys -> proxy . psz_host == NULL ) || ( * p_sys -> proxy . psz_host == '\0' )
water	42:12	0:0	6	(
water	42:14	0:0	6	p_sys
op	42:19	0:0	6	->
water	42:21	0:0	6	proxy
op	42:26	0:0	6	.
water	42:27	0:0	6	psz_host
op	42:36	0:0	6	==
water	42:39	0:0	6	NULL
water	42:44	0:0	6	)
op	42:46	0:0	6	||
water	43:12	0:0	6	(
op	43:14	0:0	6	*
water	43:15	0:0	6	p_sys
op	43:20	0:0	6	->
water	43:22	0:0	6	proxy
op	43:27	0:0	6	.
water	43:28	0:0	6	psz_host
op	43:37	0:0	6	==
water	43:40	0:0	6	'\0'
water	43:45	0:0	6	)
stmts	44:8	49:8	5	
water	44:8	0:0	6	{
call	45:12	45:53	6	msg_Warn
arg	45:22	45:30	7	p_access
water	45:22	0:0	8	p_access
arg	45:32	45:53	7	"invalid proxy host"
water	45:32	0:0	8	"invalid proxy host"
water	45:54	0:0	6	;
call	46:12	46:40	6	vlc_UrlClean
arg	46:26	46:40	7	&p_sys->proxy
op	46:26	0:0	8	&
water	46:27	0:0	8	p_sys
op	46:32	0:0	8	->
water	46:34	0:0	8	proxy
water	46:41	0:0	6	;
call	47:12	47:24	6	free
arg	47:18	47:24	7	p_sys
water	47:18	0:0	8	p_sys
water	47:25	0:0	6	;
return	48:12	48:31	6	VLC_EGENERIC
water	48:19	0:0	7	VLC_EGENERIC
water	49:8	0:0	6	}
if	50:8	51:36	4	(p_sys -> proxy . i_port <= 0)
cond	50:12	50:35	5	p_sys -> proxy . i_port <= 0
water	50:12	0:0	6	p_sys
op	50:17	0:0	6	->
water	50:19	0:0	6	proxy
op	50:24	0:0	6	.
water	50:25	0:0	6	i_port
op	50:32	0:0	6	<=
water	50:35	0:0	6	0
stmts	51:12	51:36	5	
water	51:12	0:0	6	p_sys
op	51:17	0:0	6	->
water	51:19	0:0	6	proxy
op	51:24	0:0	6	.
water	51:25	0:0	6	i_port
op	51:32	0:0	6	=
water	51:34	0:0	6	80
water	51:36	0:0	6	;
call	52:8	53:60	4	msg_Dbg
arg	52:17	52:25	5	p_access
water	52:17	0:0	6	p_access
arg	52:27	52:51	5	"Using http proxy %s:%d"
water	52:27	0:0	6	"Using http proxy %s:%d"
arg	53:17	53:38	5	p_sys->proxy.psz_host
water	53:17	0:0	6	p_sys
op	53:22	0:0	6	->
water	53:24	0:0	6	proxy
op	53:29	0:0	6	.
water	53:30	0:0	6	psz_host
arg	53:40	53:60	5	p_sys->proxy.i_port
water	53:40	0:0	6	p_sys
op	53:45	0:0	6	->
water	53:47	0:0	6	proxy
op	53:52	0:0	6	.
water	53:53	0:0	6	i_port
water	53:61	0:0	4	;
water	54:4	0:0	4	}
call	56:4	56:57	2	vlc_UrlParse
arg	56:18	56:29	3	&p_sys->url
op	56:18	0:0	4	&
water	56:19	0:0	4	p_sys
op	56:24	0:0	4	->
water	56:26	0:0	4	url
arg	56:31	56:53	3	p_access->psz_location
water	56:31	0:0	4	p_access
op	56:39	0:0	4	->
water	56:41	0:0	4	psz_location
arg	56:55	56:57	3	0
water	56:55	0:0	4	0
water	56:58	0:0	2	;
if	57:4	62:4	2	(( p_sys -> url . psz_host == NULL ) || ( * p_sys -> url . psz_host == '\0' ))
cond	57:8	58:39	3	( p_sys -> url . psz_host == NULL ) || ( * p_sys -> url . psz_host == '\0' )
water	57:8	0:0	4	(
water	57:10	0:0	4	p_sys
op	57:15	0:0	4	->
water	57:17	0:0	4	url
op	57:20	0:0	4	.
water	57:21	0:0	4	psz_host
op	57:30	0:0	4	==
water	57:33	0:0	4	NULL
water	57:38	0:0	4	)
op	57:40	0:0	4	||
water	58:8	0:0	4	(
op	58:10	0:0	4	*
water	58:11	0:0	4	p_sys
op	58:16	0:0	4	->
water	58:18	0:0	4	url
op	58:21	0:0	4	.
water	58:22	0:0	4	psz_host
op	58:31	0:0	4	==
water	58:34	0:0	4	'\0'
water	58:39	0:0	4	)
stmts	59:4	62:4	3	
water	59:4	0:0	4	{
call	60:8	60:42	4	msg_Err
arg	60:17	60:25	5	p_access
water	60:17	0:0	6	p_access
arg	60:27	60:42	5	"invalid host"
water	60:27	0:0	6	"invalid host"
water	60:43	0:0	4	;
goto	61:8	61:18	4	error
water	61:13	0:0	5	error
water	62:4	0:0	4	}
if	63:4	64:30	2	(p_sys -> url . i_port <= 0)
cond	63:8	63:29	3	p_sys -> url . i_port <= 0
water	63:8	0:0	4	p_sys
op	63:13	0:0	4	->
water	63:15	0:0	4	url
op	63:18	0:0	4	.
water	63:19	0:0	4	i_port
op	63:26	0:0	4	<=
water	63:29	0:0	4	0
stmts	64:8	64:30	3	
water	64:8	0:0	4	p_sys
op	64:13	0:0	4	->
water	64:15	0:0	4	url
op	64:18	0:0	4	.
water	64:19	0:0	4	i_port
op	64:26	0:0	4	=
water	64:28	0:0	4	80
water	64:30	0:0	4	;
if	65:4	66:18	2	(Describe (p_access ,& psz_location ))
cond	65:8	65:42	3	Describe (p_access ,& psz_location )
call	65:8	65:42	4	Describe
arg	65:18	65:26	5	p_access
water	65:18	0:0	6	p_access
arg	65:28	65:42	5	&psz_location
op	65:28	0:0	6	&
water	65:29	0:0	6	psz_location
stmts	66:8	66:18	3	
goto	66:8	66:18	4	error
water	66:13	0:0	5	error
if	68:4	88:4	2	(psz_location && * psz_location)
cond	68:8	68:25	3	psz_location && * psz_location
water	68:8	0:0	4	psz_location
op	68:21	0:0	4	&&
op	68:24	0:0	4	*
water	68:25	0:0	4	psz_location
stmts	69:4	88:4	3	
water	69:4	0:0	4	{
call	70:8	70:61	4	msg_Dbg
arg	70:17	70:25	5	p_access
water	70:17	0:0	6	p_access
arg	70:27	70:46	5	"redirection to %s"
water	70:27	0:0	6	"redirection to %s"
arg	70:48	70:61	5	psz_location
water	70:48	0:0	6	psz_location
water	70:62	0:0	4	;
decl	71:8	71:68	4	input_thread_t	*p_input
op	71:33	0:0	4	=
call	71:35	71:67	5	access_GetParentInput
arg	71:58	71:67	6	p_access
water	71:58	0:0	7	p_access
decl	72:8	72:32	4	input_item_t	*p_new_loc
if	73:8	77:8	4	(! p_input)
cond	73:12	73:13	5	! p_input
op	73:12	0:0	6	!
water	73:13	0:0	6	p_input
stmts	74:8	77:8	5	
water	74:8	0:0	6	{
call	75:12	75:31	6	free
arg	75:18	75:31	7	psz_location
water	75:18	0:0	8	psz_location
water	75:32	0:0	6	;
goto	76:12	76:22	6	error
water	76:17	0:0	7	error
water	77:8	0:0	6	}
water	79:8	0:0	4	p_new_loc
op	79:18	0:0	4	=
call	79:20	79:63	4	input_item_New
arg	79:36	79:48	5	psz_location
water	79:36	0:0	6	psz_location
arg	79:50	79:63	5	psz_location
water	79:50	0:0	6	psz_location
water	79:64	0:0	4	;
decl	80:8	80:55	4	input_item_t	*p_item
op	80:29	0:0	4	=
call	80:31	80:54	5	input_GetItem
arg	80:46	80:54	6	p_input
water	80:46	0:0	7	p_input
call	81:8	81:50	4	input_item_PostSubItem
arg	81:32	81:38	5	p_item
water	81:32	0:0	6	p_item
arg	81:40	81:50	5	p_new_loc
water	81:40	0:0	6	p_new_loc
water	81:51	0:0	4	;
call	82:8	82:33	4	vlc_gc_decref
arg	82:23	82:33	5	p_new_loc
water	82:23	0:0	6	p_new_loc
water	82:34	0:0	4	;
call	83:8	83:36	4	vlc_object_release
arg	83:28	83:36	5	p_input
water	83:28	0:0	6	p_input
water	83:37	0:0	4	;
call	84:8	84:27	4	free
arg	84:14	84:27	5	psz_location
water	84:14	0:0	6	psz_location
water	84:28	0:0	4	;
water	85:8	0:0	4	p_access
op	85:16	0:0	4	->
water	85:18	0:0	4	pf_block
op	85:27	0:0	4	=
water	85:29	0:0	4	NULL
water	85:33	0:0	4	;
water	86:8	0:0	4	p_access
op	86:16	0:0	4	->
water	86:18	0:0	4	pf_read
op	86:26	0:0	4	=
water	86:28	0:0	4	ReadRedirect
water	86:40	0:0	4	;
return	87:8	87:26	4	VLC_SUCCESS
water	87:15	0:0	5	VLC_SUCCESS
water	88:4	0:0	4	}
call	89:4	89:23	2	free
arg	89:10	89:23	3	psz_location
water	89:10	0:0	4	psz_location
water	89:24	0:0	2	;
if	91:4	96:4	2	(Start (p_access ,0 ))
cond	91:8	91:27	3	Start (p_access ,0 )
call	91:8	91:27	4	Start
arg	91:15	91:23	5	p_access
water	91:15	0:0	6	p_access
arg	91:25	91:27	5	0
water	91:25	0:0	6	0
stmts	92:4	96:4	3	
water	92:4	0:0	4	{
call	93:8	93:49	4	msg_Err
arg	93:17	93:25	5	p_access
water	93:17	0:0	6	p_access
arg	93:27	93:49	5	"cannot start stream"
water	93:27	0:0	6	"cannot start stream"
water	93:50	0:0	4	;
call	94:8	94:30	4	free
arg	94:14	94:30	5	p_sys->p_header
water	94:14	0:0	6	p_sys
op	94:19	0:0	6	->
water	94:21	0:0	6	p_header
water	94:31	0:0	4	;
goto	95:8	95:18	4	error
water	95:13	0:0	5	error
water	96:4	0:0	4	}
return	97:4	97:22	2	VLC_SUCCESS
water	97:11	0:0	3	VLC_SUCCESS
label	98:0	98:5	2	error :
call	99:4	99:32	2	vlc_UrlClean
arg	99:18	99:32	3	&p_sys->proxy
op	99:18	0:0	4	&
water	99:19	0:0	4	p_sys
op	99:24	0:0	4	->
water	99:26	0:0	4	proxy
water	99:33	0:0	2	;
call	100:4	100:30	2	vlc_UrlClean
arg	100:18	100:30	3	&p_sys->url
op	100:18	0:0	4	&
water	100:19	0:0	4	p_sys
op	100:24	0:0	4	->
water	100:26	0:0	4	url
water	100:31	0:0	2	;
call	101:4	101:16	2	free
arg	101:10	101:16	3	p_sys
water	101:10	0:0	4	p_sys
water	101:17	0:0	2	;
return	102:4	102:23	2	VLC_EGENERIC
water	102:11	0:0	3	VLC_EGENERIC
