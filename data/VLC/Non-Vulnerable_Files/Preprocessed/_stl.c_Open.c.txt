func	2:0	68:0	0	static int	Open
params	2:15	0:0	1	
param	2:16	2:36	2	vlc_object_t *	object
stmnts	0:0	67:22	1	
decl	4:4	4:37	2	demux_t	*demux
op	4:19	0:0	2	=
water	4:21	0:0	2	(
water	4:22	0:0	2	demux_t
op	4:29	0:0	2	*
water	4:30	0:0	2	)
water	4:31	0:0	2	object
decl	5:4	5:23	2	const uint8_t	*peek
if	6:4	7:27	2	(stream_Peek (demux -> s ,& peek ,11 ) != 11)
cond	6:8	6:44	3	stream_Peek (demux -> s ,& peek ,11 ) != 11
call	6:8	6:39	4	stream_Peek
arg	6:20	6:28	5	demux->s
water	6:20	0:0	6	demux
op	6:25	0:0	6	->
water	6:27	0:0	6	s
arg	6:30	6:35	5	&peek
op	6:30	0:0	6	&
water	6:31	0:0	6	peek
arg	6:37	6:39	5	11
water	6:37	0:0	6	11
op	6:41	0:0	4	!=
water	6:44	0:0	4	11
stmts	7:8	7:27	3	
return	7:8	7:27	4	VLC_EGENERIC
water	7:15	0:0	5	VLC_EGENERIC
decl	8:4	8:53	2	bool	is_stl_25
op	8:19	0:0	2	=
op	8:21	0:0	2	!
call	8:22	8:52	3	memcmp
arg	8:29	8:37	4	&peek[3]
op	8:29	0:0	5	&
water	8:30	0:0	5	peek
op	8:34	0:0	5	[
water	8:35	0:0	5	3
op	8:36	0:0	5	]
arg	8:39	8:49	4	"STL25.01"
water	8:39	0:0	5	"STL25.01"
arg	8:51	8:52	4	8
water	8:51	0:0	5	8
decl	9:4	9:53	2	bool	is_stl_30
op	9:19	0:0	2	=
op	9:21	0:0	2	!
call	9:22	9:52	3	memcmp
arg	9:29	9:37	4	&peek[3]
op	9:29	0:0	5	&
water	9:30	0:0	5	peek
op	9:34	0:0	5	[
water	9:35	0:0	5	3
op	9:36	0:0	5	]
arg	9:39	9:49	4	"STL30.01"
water	9:39	0:0	5	"STL30.01"
arg	9:51	9:52	4	8
water	9:51	0:0	5	8
if	10:4	11:27	2	(! is_stl_25 && ! is_stl_30)
cond	10:8	10:23	3	! is_stl_25 && ! is_stl_30
op	10:8	0:0	4	!
water	10:9	0:0	4	is_stl_25
op	10:19	0:0	4	&&
op	10:22	0:0	4	!
water	10:23	0:0	4	is_stl_30
stmts	11:8	11:27	3	
return	11:8	11:27	4	VLC_EGENERIC
water	11:15	0:0	5	VLC_EGENERIC
decl	12:4	12:42	2	const double	fps
op	12:21	0:0	2	=
water	12:23	0:0	2	is_stl_25
water	12:33	0:0	2	?
water	12:35	0:0	2	25
water	12:38	0:0	2	:
water	12:40	0:0	2	30
decl	13:4	13:24	2	uint8_t	header[1024]
if	14:4	17:4	2	(stream_Read (demux -> s ,header ,sizeof ( header ) ) != sizeof ( header ))
cond	14:8	14:70	3	stream_Read (demux -> s ,header ,sizeof ( header ) ) != sizeof ( header )
call	14:8	14:52	4	stream_Read
arg	14:20	14:28	5	demux->s
water	14:20	0:0	6	demux
op	14:25	0:0	6	->
water	14:27	0:0	6	s
arg	14:30	14:36	5	header
water	14:30	0:0	6	header
arg	14:38	14:52	5	sizeof(header)
op	14:38	0:0	6	sizeof
water	14:44	0:0	6	(
water	14:45	0:0	6	header
water	14:51	0:0	6	)
op	14:54	0:0	4	!=
op	14:57	0:0	4	sizeof
water	14:63	0:0	4	(
water	14:64	0:0	4	header
water	14:70	0:0	4	)
stmts	14:73	17:4	3	
water	14:73	0:0	4	{
call	15:8	15:50	4	msg_Err
arg	15:16	15:21	5	demux
water	15:16	0:0	6	demux
arg	15:23	15:50	5	"Incomplete EBU STL header"
water	15:23	0:0	6	"Incomplete EBU STL header"
water	15:51	0:0	4	;
return	16:8	16:27	4	VLC_EGENERIC
water	16:15	0:0	5	VLC_EGENERIC
water	17:4	0:0	4	}
decl	18:4	18:48	2	const int	cct
op	18:18	0:0	2	=
call	18:20	18:47	3	ParseInteger
arg	18:33	18:44	4	&header[12]
op	18:33	0:0	5	&
water	18:34	0:0	5	header
op	18:40	0:0	5	[
water	18:41	0:0	5	12
op	18:43	0:0	5	]
arg	18:46	18:47	4	2
water	18:46	0:0	5	2
decl	19:4	19:70	2	const mtime_t	program_start
op	19:32	0:0	2	=
call	19:34	19:69	3	ParseTextTimeCode
arg	19:52	19:64	4	&header[256]
op	19:52	0:0	5	&
water	19:53	0:0	5	header
op	19:59	0:0	5	[
water	19:60	0:0	5	256
op	19:63	0:0	5	]
arg	19:66	19:69	4	fps
water	19:66	0:0	5	fps
decl	20:4	20:55	2	const int	tti_count
op	20:24	0:0	2	=
call	20:26	20:54	3	ParseInteger
arg	20:39	20:51	4	&header[238]
op	20:39	0:0	5	&
water	20:40	0:0	5	header
op	20:46	0:0	5	[
water	20:47	0:0	5	238
op	20:50	0:0	5	]
arg	20:53	20:54	4	5
water	20:53	0:0	5	5
call	21:4	21:118	2	msg_Dbg
arg	21:12	21:17	3	demux
water	21:12	0:0	4	demux
arg	21:19	21:73	3	"Detected EBU STL : CCT=%d TTI=%d start=%8.8s %"PRId64
water	21:19	0:0	4	"Detected EBU STL : CCT=%d TTI=%d start=%8.8s %"
water	21:67	0:0	4	PRId64
arg	21:75	21:78	3	cct
water	21:75	0:0	4	cct
arg	21:80	21:89	3	tti_count
water	21:80	0:0	4	tti_count
arg	21:91	21:103	3	&header[256]
op	21:91	0:0	4	&
water	21:92	0:0	4	header
op	21:98	0:0	4	[
water	21:99	0:0	4	256
op	21:102	0:0	4	]
arg	21:105	21:118	3	program_start
water	21:105	0:0	4	program_start
water	21:119	0:0	2	;
decl	22:4	22:44	2	demux_sys_t	*sys
op	22:21	0:0	2	=
call	22:23	22:43	3	xmalloc
arg	22:31	22:43	4	sizeof(*sys)
op	22:31	0:0	5	sizeof
water	22:37	0:0	5	(
op	22:38	0:0	5	*
water	22:39	0:0	5	sys
water	22:42	0:0	5	)
water	23:4	0:0	2	sys
op	23:7	0:0	2	->
water	23:9	0:0	2	next_date
op	23:19	0:0	2	=
water	23:21	0:0	2	0
water	23:22	0:0	2	;
water	24:4	0:0	2	sys
op	24:7	0:0	2	->
water	24:9	0:0	2	current
op	24:19	0:0	2	=
water	24:21	0:0	2	0
water	24:22	0:0	2	;
water	25:4	0:0	2	sys
op	25:7	0:0	2	->
water	25:9	0:0	2	count
op	25:19	0:0	2	=
water	25:21	0:0	2	0
water	25:22	0:0	2	;
water	26:4	0:0	2	sys
op	26:7	0:0	2	->
water	26:9	0:0	2	index
op	26:19	0:0	2	=
call	26:21	26:59	2	xcalloc
arg	26:29	26:38	3	tti_count
water	26:29	0:0	4	tti_count
arg	26:40	26:59	3	sizeof(*sys->index)
op	26:40	0:0	4	sizeof
water	26:46	0:0	4	(
op	26:47	0:0	4	*
water	26:48	0:0	4	sys
op	26:51	0:0	4	->
water	26:53	0:0	4	index
water	26:58	0:0	4	)
water	26:60	0:0	2	;
decl	27:4	27:24	2	bool	comment
op	27:17	0:0	2	=
water	27:19	0:0	2	false
decl	28:4	28:35	2	stl_entry_t	*s
op	28:19	0:0	2	=
op	28:21	0:0	2	&
water	28:22	0:0	2	sys
op	28:25	0:0	2	->
water	28:27	0:0	2	index
op	28:32	0:0	2	[
water	28:33	0:0	2	0
op	28:34	0:0	2	]
water	29:4	0:0	2	s
op	29:5	0:0	2	->
water	29:7	0:0	2	count
op	29:13	0:0	2	=
water	29:15	0:0	2	0
water	29:16	0:0	2	;
for	30:4	53:4	2	( int i = 0 ;i < tti_count;i ++)
forinit	0:0	30:18	3	 int i = 0 ;
decl	30:9	30:18	4	int	i
op	30:15	0:0	4	=
water	30:17	0:0	4	0
cond	30:20	30:24	3	i < tti_count
water	30:20	0:0	4	i
op	30:22	0:0	4	<
water	30:24	0:0	4	tti_count
forexpr	30:35	30:36	3	i ++
water	30:35	0:0	4	i
op	30:36	0:0	4	++
stmts	30:40	53:4	3	
water	30:40	0:0	4	{
decl	31:8	31:23	4	uint8_t	tti[16]
if	32:8	36:8	4	(stream_Read (demux -> s ,tti ,16 ) != 16 ||stream_Read (demux -> s ,NULL ,112 ) != 112)
cond	32:12	33:48	5	stream_Read (demux -> s ,tti ,16 ) != 16 ||stream_Read (demux -> s ,NULL ,112 ) != 112
call	32:12	32:41	6	stream_Read
arg	32:24	32:32	7	demux->s
water	32:24	0:0	8	demux
op	32:29	0:0	8	->
water	32:31	0:0	8	s
arg	32:34	32:37	7	tti
water	32:34	0:0	8	tti
arg	32:39	32:41	7	16
water	32:39	0:0	8	16
op	32:43	0:0	6	!=
water	32:46	0:0	6	16
op	32:49	0:0	6	||
call	33:12	33:43	6	stream_Read
arg	33:24	33:32	7	demux->s
water	33:24	0:0	8	demux
op	33:29	0:0	8	->
water	33:31	0:0	8	s
arg	33:34	33:38	7	NULL
water	33:34	0:0	8	NULL
arg	33:40	33:43	7	112
water	33:40	0:0	8	112
op	33:45	0:0	6	!=
water	33:48	0:0	6	112
stmts	33:53	36:8	5	
water	33:53	0:0	6	{
call	34:12	34:53	6	msg_Warn
arg	34:21	34:26	7	demux
water	34:21	0:0	8	demux
arg	34:28	34:53	7	"Incomplete EBU STL file"
water	34:28	0:0	8	"Incomplete EBU STL file"
water	34:54	0:0	6	;
break	35:12	35:17	6	
water	36:8	0:0	6	}
decl	37:8	37:30	4	const int	ebn
op	37:22	0:0	4	=
water	37:24	0:0	4	tti
op	37:27	0:0	4	[
water	37:28	0:0	4	3
op	37:29	0:0	4	]
if	38:8	39:20	4	(ebn >= 0 xf0 && ebn <= 0 xfd)
cond	38:12	38:35	5	ebn >= 0 xf0 && ebn <= 0 xfd
water	38:12	0:0	6	ebn
op	38:16	0:0	6	>=
water	38:19	0:0	6	0
water	38:20	0:0	6	xf0
op	38:24	0:0	6	&&
water	38:27	0:0	6	ebn
op	38:31	0:0	6	<=
water	38:34	0:0	6	0
water	38:35	0:0	6	xfd
stmts	39:12	39:20	5	
continue	39:12	39:20	6	
if	40:8	41:20	4	(ebn == 0 xfe)
cond	40:12	40:20	5	ebn == 0 xfe
water	40:12	0:0	6	ebn
op	40:16	0:0	6	==
water	40:19	0:0	6	0
water	40:20	0:0	6	xfe
stmts	41:12	41:20	5	
continue	41:12	41:20	6	
if	42:8	47:8	4	(s -> count <= 0)
cond	42:12	42:24	5	s -> count <= 0
water	42:12	0:0	6	s
op	42:13	0:0	6	->
water	42:15	0:0	6	count
op	42:21	0:0	6	<=
water	42:24	0:0	6	0
stmts	42:27	47:8	5	
water	42:27	0:0	6	{
water	43:12	0:0	6	comment
op	43:21	0:0	6	=
water	43:23	0:0	6	tti
op	43:26	0:0	6	[
water	43:27	0:0	6	15
op	43:29	0:0	6	]
op	43:31	0:0	6	!=
water	43:34	0:0	6	0
water	43:35	0:0	6	;
water	44:12	0:0	6	s
op	44:13	0:0	6	->
water	44:15	0:0	6	start
op	44:21	0:0	6	=
call	44:23	44:49	6	ParseTimeCode
arg	44:37	44:44	7	&tti[5]
op	44:37	0:0	8	&
water	44:38	0:0	8	tti
op	44:41	0:0	8	[
water	44:42	0:0	8	5
op	44:43	0:0	8	]
arg	44:46	44:49	7	fps
water	44:46	0:0	8	fps
op	44:51	0:0	6	-
water	44:53	0:0	6	program_start
water	44:66	0:0	6	;
water	45:12	0:0	6	s
op	45:13	0:0	6	->
water	45:15	0:0	6	stop
op	45:21	0:0	6	=
call	45:23	45:49	6	ParseTimeCode
arg	45:37	45:44	7	&tti[9]
op	45:37	0:0	8	&
water	45:38	0:0	8	tti
op	45:41	0:0	8	[
water	45:42	0:0	8	9
op	45:43	0:0	8	]
arg	45:46	45:49	7	fps
water	45:46	0:0	8	fps
op	45:51	0:0	6	-
water	45:53	0:0	6	program_start
water	45:66	0:0	6	;
water	46:12	0:0	6	s
op	46:13	0:0	6	->
water	46:15	0:0	6	index
op	46:21	0:0	6	=
water	46:23	0:0	6	i
water	46:24	0:0	6	;
water	47:8	0:0	6	}
water	48:8	0:0	4	s
op	48:9	0:0	4	->
water	48:11	0:0	4	count
op	48:16	0:0	4	++
water	48:18	0:0	4	;
if	49:8	50:41	4	(ebn == 0 xff && ! comment)
cond	49:12	49:28	5	ebn == 0 xff && ! comment
water	49:12	0:0	6	ebn
op	49:16	0:0	6	==
water	49:19	0:0	6	0
water	49:20	0:0	6	xff
op	49:24	0:0	6	&&
op	49:27	0:0	6	!
water	49:28	0:0	6	comment
stmts	50:12	50:41	5	
water	50:12	0:0	6	s
op	50:14	0:0	6	=
op	50:16	0:0	6	&
water	50:17	0:0	6	sys
op	50:20	0:0	6	->
water	50:22	0:0	6	index
op	50:27	0:0	6	[
op	50:28	0:0	6	++
water	50:30	0:0	6	sys
op	50:33	0:0	6	->
water	50:35	0:0	6	count
op	50:40	0:0	6	]
water	50:41	0:0	6	;
if	51:8	52:24	4	(ebn == 0 xff && sys -> count < tti_count)
cond	51:12	51:40	5	ebn == 0 xff && sys -> count < tti_count
water	51:12	0:0	6	ebn
op	51:16	0:0	6	==
water	51:19	0:0	6	0
water	51:20	0:0	6	xff
op	51:24	0:0	6	&&
water	51:27	0:0	6	sys
op	51:30	0:0	6	->
water	51:32	0:0	6	count
op	51:38	0:0	6	<
water	51:40	0:0	6	tti_count
stmts	52:12	52:24	5	
water	52:12	0:0	6	s
op	52:13	0:0	6	->
water	52:15	0:0	6	count
op	52:21	0:0	6	=
water	52:23	0:0	6	0
water	52:24	0:0	6	;
water	53:4	0:0	4	}
if	54:4	55:65	2	(sys -> count > 0)
cond	54:8	54:21	3	sys -> count > 0
water	54:8	0:0	4	sys
op	54:11	0:0	4	->
water	54:13	0:0	4	count
op	54:19	0:0	4	>
water	54:21	0:0	4	0
stmts	55:8	55:65	3	
call	55:8	55:64	4	stream_Seek
arg	55:20	55:28	5	demux->s
water	55:20	0:0	6	demux
op	55:25	0:0	6	->
water	55:27	0:0	6	s
arg	55:30	55:64	5	1024+128LL*sys->index[0].index
water	55:30	0:0	6	1024
op	55:35	0:0	6	+
water	55:37	0:0	6	128
water	55:40	0:0	6	LL
op	55:43	0:0	6	*
water	55:45	0:0	6	sys
op	55:48	0:0	6	->
water	55:50	0:0	6	index
op	55:55	0:0	6	[
water	55:56	0:0	6	0
op	55:57	0:0	6	]
op	55:58	0:0	6	.
water	55:59	0:0	6	index
water	55:65	0:0	4	;
decl	56:4	56:19	2	es_format_t	fmt
call	57:4	57:50	2	es_format_Init
arg	57:19	57:23	3	&fmt
op	57:19	0:0	4	&
water	57:20	0:0	4	fmt
arg	57:25	57:31	3	SPU_ES
water	57:25	0:0	4	SPU_ES
arg	57:33	57:50	3	VLC_CODEC_EBU_STL
water	57:33	0:0	4	VLC_CODEC_EBU_STL
water	57:51	0:0	2	;
water	58:4	0:0	2	fmt
op	58:7	0:0	2	.
water	58:8	0:0	2	i_extra
op	58:16	0:0	2	=
op	58:18	0:0	2	sizeof
water	58:24	0:0	2	(
water	58:25	0:0	2	header
water	58:31	0:0	2	)
water	58:32	0:0	2	;
water	59:4	0:0	2	fmt
op	59:7	0:0	2	.
water	59:8	0:0	2	p_extra
op	59:16	0:0	2	=
water	59:18	0:0	2	header
water	59:24	0:0	2	;
water	60:4	0:0	2	sys
op	60:7	0:0	2	->
water	60:9	0:0	2	es
op	60:12	0:0	2	=
call	60:14	60:41	2	es_out_Add
arg	60:25	60:35	3	demux->out
water	60:25	0:0	4	demux
op	60:30	0:0	4	->
water	60:32	0:0	4	out
arg	60:37	60:41	3	&fmt
op	60:37	0:0	4	&
water	60:38	0:0	4	fmt
water	60:42	0:0	2	;
water	61:4	0:0	2	fmt
op	61:7	0:0	2	.
water	61:8	0:0	2	i_extra
op	61:16	0:0	2	=
water	61:18	0:0	2	0
water	61:19	0:0	2	;
water	62:4	0:0	2	fmt
op	62:7	0:0	2	.
water	62:8	0:0	2	p_extra
op	62:16	0:0	2	=
water	62:18	0:0	2	NULL
water	62:22	0:0	2	;
call	63:4	63:24	2	es_format_Clean
arg	63:20	63:24	3	&fmt
op	63:20	0:0	4	&
water	63:21	0:0	4	fmt
water	63:25	0:0	2	;
water	64:4	0:0	2	demux
op	64:9	0:0	2	->
water	64:11	0:0	2	p_sys
op	64:22	0:0	2	=
water	64:24	0:0	2	sys
water	64:27	0:0	2	;
water	65:4	0:0	2	demux
op	65:9	0:0	2	->
water	65:11	0:0	2	pf_demux
op	65:22	0:0	2	=
water	65:24	0:0	2	Demux
water	65:29	0:0	2	;
water	66:4	0:0	2	demux
op	66:9	0:0	2	->
water	66:11	0:0	2	pf_control
op	66:22	0:0	2	=
water	66:24	0:0	2	Control
water	66:31	0:0	2	;
return	67:4	67:22	2	VLC_SUCCESS
water	67:11	0:0	3	VLC_SUCCESS
