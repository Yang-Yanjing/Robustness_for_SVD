func	2:0	79:0	0	static GstStructure *	vlc_to_gst_fmt
params	2:35	0:0	1	
param	2:37	2:62	2	const es_format_t *	p_fmt
stmnts	0:0	78:16	1	
decl	4:4	4:48	2	const video_format_t	*p_vfmt
op	4:33	0:0	2	=
op	4:35	0:0	2	&
water	4:36	0:0	2	p_fmt
op	4:41	0:0	2	->
water	4:43	0:0	2	video
decl	5:4	5:30	2	GstStructure	*p_str
op	5:24	0:0	2	=
water	5:26	0:0	2	NULL
switch	6:4	51:4	2	(p_fmt -> i_codec)
cond	6:12	6:19	3	p_fmt -> i_codec
water	6:12	0:0	4	p_fmt
op	6:17	0:0	4	->
water	6:19	0:0	4	i_codec
stmts	6:28	51:4	3	
water	6:28	0:0	4	{
label	7:4	7:23	4	case VLC_CODEC_H264 :
water	8:8	0:0	4	p_str
op	8:14	0:0	4	=
call	8:16	8:56	4	gst_structure_new_empty
arg	8:41	8:56	5	"video/x-h264"
water	8:41	0:0	6	"video/x-h264"
water	8:57	0:0	4	;
call	9:8	9:73	4	gst_structure_set
arg	9:27	9:32	5	p_str
water	9:27	0:0	6	p_str
arg	9:34	9:45	5	"alignment"
water	9:34	0:0	6	"alignment"
arg	9:47	9:60	5	G_TYPE_STRING
water	9:47	0:0	6	G_TYPE_STRING
arg	9:62	9:66	5	"au"
water	9:62	0:0	6	"au"
arg	9:68	9:73	5	NULL
water	9:68	0:0	6	NULL
water	9:74	0:0	4	;
break	10:8	10:13	4	
label	11:4	11:23	4	case VLC_CODEC_MP4V :
water	12:8	0:0	4	p_str
op	12:14	0:0	4	=
call	12:16	12:54	4	gst_structure_new_empty
arg	12:41	12:54	5	"video/mpeg"
water	12:41	0:0	6	"video/mpeg"
water	12:55	0:0	4	;
call	13:8	14:60	4	gst_structure_set
arg	13:27	13:32	5	p_str
water	13:27	0:0	6	p_str
arg	13:34	13:47	5	"mpegversion"
water	13:34	0:0	6	"mpegversion"
arg	13:49	13:59	5	G_TYPE_INT
water	13:49	0:0	6	G_TYPE_INT
arg	13:61	13:62	5	4
water	13:61	0:0	6	4
arg	14:16	14:30	5	"systemstream"
water	14:16	0:0	6	"systemstream"
arg	14:32	14:46	5	G_TYPE_BOOLEAN
water	14:32	0:0	6	G_TYPE_BOOLEAN
arg	14:48	14:53	5	FALSE
water	14:48	0:0	6	FALSE
arg	14:55	14:60	5	NULL
water	14:55	0:0	6	NULL
water	14:61	0:0	4	;
break	15:8	15:13	4	
label	16:4	16:22	4	case VLC_CODEC_VP8 :
water	17:8	0:0	4	p_str
op	17:14	0:0	4	=
call	17:16	17:55	4	gst_structure_new_empty
arg	17:41	17:55	5	"video/x-vp8"
water	17:41	0:0	6	"video/x-vp8"
water	17:56	0:0	4	;
break	18:8	18:13	4	
label	19:4	19:23	4	case VLC_CODEC_MPGV :
water	20:8	0:0	4	p_str
op	20:14	0:0	4	=
call	20:16	20:54	4	gst_structure_new_empty
arg	20:41	20:54	5	"video/mpeg"
water	20:41	0:0	6	"video/mpeg"
water	20:55	0:0	4	;
call	21:8	22:60	4	gst_structure_set
arg	21:27	21:32	5	p_str
water	21:27	0:0	6	p_str
arg	21:34	21:47	5	"mpegversion"
water	21:34	0:0	6	"mpegversion"
arg	21:49	21:59	5	G_TYPE_INT
water	21:49	0:0	6	G_TYPE_INT
arg	21:61	21:62	5	2
water	21:61	0:0	6	2
arg	22:16	22:30	5	"systemstream"
water	22:16	0:0	6	"systemstream"
arg	22:32	22:46	5	G_TYPE_BOOLEAN
water	22:32	0:0	6	G_TYPE_BOOLEAN
arg	22:48	22:53	5	FALSE
water	22:48	0:0	6	FALSE
arg	22:55	22:60	5	NULL
water	22:55	0:0	6	NULL
water	22:61	0:0	4	;
break	23:8	23:13	4	
label	24:4	24:23	4	case VLC_CODEC_FLV1 :
water	25:8	0:0	4	p_str
op	25:14	0:0	4	=
call	25:16	25:63	4	gst_structure_new_empty
arg	25:41	25:63	5	"video/x-flash-video"
water	25:41	0:0	6	"video/x-flash-video"
water	25:64	0:0	4	;
call	26:8	26:68	4	gst_structure_set
arg	26:27	26:32	5	p_str
water	26:27	0:0	6	p_str
arg	26:34	26:46	5	"flvversion"
water	26:34	0:0	6	"flvversion"
arg	26:48	26:58	5	G_TYPE_INT
water	26:48	0:0	6	G_TYPE_INT
arg	26:60	26:61	5	1
water	26:60	0:0	6	1
arg	26:63	26:68	5	NULL
water	26:63	0:0	6	NULL
water	26:69	0:0	4	;
break	27:8	27:13	4	
label	28:4	28:23	4	case VLC_CODEC_WMV1 :
water	29:8	0:0	4	p_str
op	29:14	0:0	4	=
call	29:16	29:55	4	gst_structure_new_empty
arg	29:41	29:55	5	"video/x-wmv"
water	29:41	0:0	6	"video/x-wmv"
water	29:56	0:0	4	;
call	30:8	31:54	4	gst_structure_set
arg	30:27	30:32	5	p_str
water	30:27	0:0	6	p_str
arg	30:34	30:46	5	"wmvversion"
water	30:34	0:0	6	"wmvversion"
arg	30:48	30:58	5	G_TYPE_INT
water	30:48	0:0	6	G_TYPE_INT
arg	30:60	30:61	5	1
water	30:60	0:0	6	1
arg	31:16	31:24	5	"format"
water	31:16	0:0	6	"format"
arg	31:26	31:39	5	G_TYPE_STRING
water	31:26	0:0	6	G_TYPE_STRING
arg	31:41	31:47	5	"WMV1"
water	31:41	0:0	6	"WMV1"
arg	31:49	31:54	5	NULL
water	31:49	0:0	6	NULL
water	31:55	0:0	4	;
break	32:8	32:13	4	
label	33:4	33:23	4	case VLC_CODEC_WMV2 :
water	34:8	0:0	4	p_str
op	34:14	0:0	4	=
call	34:16	34:55	4	gst_structure_new_empty
arg	34:41	34:55	5	"video/x-wmv"
water	34:41	0:0	6	"video/x-wmv"
water	34:56	0:0	4	;
call	35:8	36:54	4	gst_structure_set
arg	35:27	35:32	5	p_str
water	35:27	0:0	6	p_str
arg	35:34	35:46	5	"wmvversion"
water	35:34	0:0	6	"wmvversion"
arg	35:48	35:58	5	G_TYPE_INT
water	35:48	0:0	6	G_TYPE_INT
arg	35:60	35:61	5	2
water	35:60	0:0	6	2
arg	36:16	36:24	5	"format"
water	36:16	0:0	6	"format"
arg	36:26	36:39	5	G_TYPE_STRING
water	36:26	0:0	6	G_TYPE_STRING
arg	36:41	36:47	5	"WMV2"
water	36:41	0:0	6	"WMV2"
arg	36:49	36:54	5	NULL
water	36:49	0:0	6	NULL
water	36:55	0:0	4	;
break	37:8	37:13	4	
label	38:4	38:23	4	case VLC_CODEC_WMV3 :
water	39:8	0:0	4	p_str
op	39:14	0:0	4	=
call	39:16	39:55	4	gst_structure_new_empty
arg	39:41	39:55	5	"video/x-wmv"
water	39:41	0:0	6	"video/x-wmv"
water	39:56	0:0	4	;
call	40:8	41:54	4	gst_structure_set
arg	40:27	40:32	5	p_str
water	40:27	0:0	6	p_str
arg	40:34	40:46	5	"wmvversion"
water	40:34	0:0	6	"wmvversion"
arg	40:48	40:58	5	G_TYPE_INT
water	40:48	0:0	6	G_TYPE_INT
arg	40:60	40:61	5	3
water	40:60	0:0	6	3
arg	41:16	41:24	5	"format"
water	41:16	0:0	6	"format"
arg	41:26	41:39	5	G_TYPE_STRING
water	41:26	0:0	6	G_TYPE_STRING
arg	41:41	41:47	5	"WMV3"
water	41:41	0:0	6	"WMV3"
arg	41:49	41:54	5	NULL
water	41:49	0:0	6	NULL
water	41:55	0:0	4	;
break	42:8	42:13	4	
label	43:4	43:22	4	case VLC_CODEC_VC1 :
water	44:8	0:0	4	p_str
op	44:14	0:0	4	=
call	44:16	44:55	4	gst_structure_new_empty
arg	44:41	44:55	5	"video/x-wmv"
water	44:41	0:0	6	"video/x-wmv"
water	44:56	0:0	4	;
call	45:8	46:54	4	gst_structure_set
arg	45:27	45:32	5	p_str
water	45:27	0:0	6	p_str
arg	45:34	45:46	5	"wmvversion"
water	45:34	0:0	6	"wmvversion"
arg	45:48	45:58	5	G_TYPE_INT
water	45:48	0:0	6	G_TYPE_INT
arg	45:60	45:61	5	3
water	45:60	0:0	6	3
arg	46:16	46:24	5	"format"
water	46:16	0:0	6	"format"
arg	46:26	46:39	5	G_TYPE_STRING
water	46:26	0:0	6	G_TYPE_STRING
arg	46:41	46:47	5	"WVC1"
water	46:41	0:0	6	"WVC1"
arg	46:49	46:54	5	NULL
water	46:49	0:0	6	NULL
water	46:55	0:0	4	;
break	47:8	47:13	4	
label	48:4	48:11	4	default :
return	50:8	50:19	4	NULL
water	50:15	0:0	5	NULL
water	51:4	0:0	4	}
if	52:4	55:62	2	(p_vfmt -> i_width && p_vfmt -> i_height)
cond	52:8	52:35	3	p_vfmt -> i_width && p_vfmt -> i_height
water	52:8	0:0	4	p_vfmt
op	52:14	0:0	4	->
water	52:16	0:0	4	i_width
op	52:24	0:0	4	&&
water	52:27	0:0	4	p_vfmt
op	52:33	0:0	4	->
water	52:35	0:0	4	i_height
stmts	53:8	55:62	3	
call	53:8	55:61	4	gst_structure_set
arg	53:27	53:32	5	p_str
water	53:27	0:0	6	p_str
arg	54:16	54:23	5	"width"
water	54:16	0:0	6	"width"
arg	54:25	54:35	5	G_TYPE_INT
water	54:25	0:0	6	G_TYPE_INT
arg	54:37	54:52	5	p_vfmt->i_width
water	54:37	0:0	6	p_vfmt
op	54:43	0:0	6	->
water	54:45	0:0	6	i_width
arg	55:16	55:24	5	"height"
water	55:16	0:0	6	"height"
arg	55:26	55:36	5	G_TYPE_INT
water	55:26	0:0	6	G_TYPE_INT
arg	55:38	55:54	5	p_vfmt->i_height
water	55:38	0:0	6	p_vfmt
op	55:44	0:0	6	->
water	55:46	0:0	6	i_height
arg	55:56	55:61	5	NULL
water	55:56	0:0	6	NULL
water	55:62	0:0	4	;
if	56:4	59:49	2	(p_vfmt -> i_frame_rate && p_vfmt -> i_frame_rate_base)
cond	56:8	56:40	3	p_vfmt -> i_frame_rate && p_vfmt -> i_frame_rate_base
water	56:8	0:0	4	p_vfmt
op	56:14	0:0	4	->
water	56:16	0:0	4	i_frame_rate
op	56:29	0:0	4	&&
water	56:32	0:0	4	p_vfmt
op	56:38	0:0	4	->
water	56:40	0:0	4	i_frame_rate_base
stmts	57:8	59:49	3	
call	57:8	59:48	4	gst_structure_set
arg	57:27	57:32	5	p_str
water	57:27	0:0	6	p_str
arg	57:34	57:45	5	"framerate"
water	57:34	0:0	6	"framerate"
arg	57:47	57:64	5	GST_TYPE_FRACTION
water	57:47	0:0	6	GST_TYPE_FRACTION
arg	58:16	58:36	5	p_vfmt->i_frame_rate
water	58:16	0:0	6	p_vfmt
op	58:22	0:0	6	->
water	58:24	0:0	6	i_frame_rate
arg	59:16	59:41	5	p_vfmt->i_frame_rate_base
water	59:16	0:0	6	p_vfmt
op	59:22	0:0	6	->
water	59:24	0:0	6	i_frame_rate_base
arg	59:43	59:48	5	NULL
water	59:43	0:0	6	NULL
water	59:49	0:0	4	;
if	60:4	63:41	2	(p_vfmt -> i_sar_num && p_vfmt -> i_sar_den)
cond	60:8	60:37	3	p_vfmt -> i_sar_num && p_vfmt -> i_sar_den
water	60:8	0:0	4	p_vfmt
op	60:14	0:0	4	->
water	60:16	0:0	4	i_sar_num
op	60:26	0:0	4	&&
water	60:29	0:0	4	p_vfmt
op	60:35	0:0	4	->
water	60:37	0:0	4	i_sar_den
stmts	61:8	63:41	3	
call	61:8	63:40	4	gst_structure_set
arg	61:27	61:32	5	p_str
water	61:27	0:0	6	p_str
arg	61:34	61:54	5	"pixel-aspect-ratio"
water	61:34	0:0	6	"pixel-aspect-ratio"
arg	61:56	61:73	5	GST_TYPE_FRACTION
water	61:56	0:0	6	GST_TYPE_FRACTION
arg	62:16	62:33	5	p_vfmt->i_sar_num
water	62:16	0:0	6	p_vfmt
op	62:22	0:0	6	->
water	62:24	0:0	6	i_sar_num
arg	63:16	63:33	5	p_vfmt->i_sar_den
water	63:16	0:0	6	p_vfmt
op	63:22	0:0	6	->
water	63:24	0:0	6	i_sar_den
arg	63:35	63:40	5	NULL
water	63:35	0:0	6	NULL
water	63:41	0:0	4	;
if	64:4	77:4	2	(p_fmt -> i_extra)
cond	64:8	64:15	3	p_fmt -> i_extra
water	64:8	0:0	4	p_fmt
op	64:13	0:0	4	->
water	64:15	0:0	4	i_extra
stmts	65:4	77:4	3	
water	65:4	0:0	4	{
decl	66:8	66:24	4	GstBuffer	*p_buf
water	67:8	0:0	4	p_buf
op	67:14	0:0	4	=
call	67:16	69:43	4	gst_buffer_new_wrapped_full
arg	67:45	67:69	5	GST_MEMORY_FLAG_READONLY
water	67:45	0:0	6	GST_MEMORY_FLAG_READONLY
arg	68:16	68:30	5	p_fmt->p_extra
water	68:16	0:0	6	p_fmt
op	68:21	0:0	6	->
water	68:23	0:0	6	p_extra
arg	68:32	68:46	5	p_fmt->i_extra
water	68:32	0:0	6	p_fmt
op	68:37	0:0	6	->
water	68:39	0:0	6	i_extra
arg	68:48	68:49	5	0
water	68:48	0:0	6	0
arg	69:16	69:30	5	p_fmt->i_extra
water	69:16	0:0	6	p_fmt
op	69:21	0:0	6	->
water	69:23	0:0	6	i_extra
arg	69:32	69:36	5	NULL
water	69:32	0:0	6	NULL
arg	69:38	69:43	5	NULL
water	69:38	0:0	6	NULL
water	69:44	0:0	4	;
if	70:8	74:8	4	(p_buf == NULL)
cond	70:12	70:21	5	p_buf == NULL
water	70:12	0:0	6	p_buf
op	70:18	0:0	6	==
water	70:21	0:0	6	NULL
stmts	71:8	74:8	5	
water	71:8	0:0	6	{
call	72:12	72:38	6	gst_structure_free
arg	72:32	72:38	7	p_str
water	72:32	0:0	8	p_str
water	72:39	0:0	6	;
return	73:12	73:23	6	NULL
water	73:19	0:0	7	NULL
water	74:8	0:0	6	}
call	75:8	75:77	4	gst_structure_set
arg	75:27	75:32	5	p_str
water	75:27	0:0	6	p_str
arg	75:34	75:46	5	"codec_data"
water	75:34	0:0	6	"codec_data"
arg	75:48	75:63	5	GST_TYPE_BUFFER
water	75:48	0:0	6	GST_TYPE_BUFFER
arg	75:65	75:70	5	p_buf
water	75:65	0:0	6	p_buf
arg	75:72	75:77	5	NULL
water	75:72	0:0	6	NULL
water	75:78	0:0	4	;
call	76:8	76:32	4	gst_buffer_unref
arg	76:26	76:32	5	p_buf
water	76:26	0:0	6	p_buf
water	76:33	0:0	4	;
water	77:4	0:0	4	}
return	78:4	78:16	2	p_str
water	78:11	0:0	3	p_str
