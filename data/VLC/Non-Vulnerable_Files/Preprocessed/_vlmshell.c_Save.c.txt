func	2:0	159:0	0	static char *	Save
params	2:17	0:0	1	
param	2:19	2:30	2	vlm_t *	vlm
stmnts	0:0	158:15	1	
decl	4:4	4:21	2	char	*save
op	4:15	0:0	2	=
water	4:17	0:0	2	NULL
decl	5:4	7:61	2	char	psz_header[]
op	5:22	0:0	2	=
water	5:24	0:0	2	"\n"
water	6:24	0:0	2	"# VLC media player VLM command batch\n"
water	7:24	0:0	2	"# http://www.videolan.org/vlc/\n\n"
decl	8:4	8:11	2	char	*p
decl	9:4	9:11	2	int	i
water	9:9	0:0	2	,
decl	9:4	9:11	2	int	j
decl	10:4	10:39	2	int	i_length
op	10:17	0:0	2	=
call	10:19	10:38	3	strlen
arg	10:27	10:38	4	psz_header
water	10:27	0:0	5	psz_header
for	11:4	35:4	2	(i = 0 ;i < vlm -> i_media;i ++)
forinit	11:9	11:14	3	i = 0 ;
water	11:9	0:0	4	i
op	11:11	0:0	4	=
water	11:13	0:0	4	0
water	11:14	0:0	4	;
cond	11:16	11:25	3	i < vlm -> i_media
water	11:16	0:0	4	i
op	11:18	0:0	4	<
water	11:20	0:0	4	vlm
op	11:23	0:0	4	->
water	11:25	0:0	4	i_media
forexpr	11:34	11:35	3	i ++
water	11:34	0:0	4	i
op	11:35	0:0	4	++
stmts	12:4	35:4	3	
water	12:4	0:0	4	{
decl	13:8	13:46	4	vlm_media_sys_t	*media
op	13:31	0:0	4	=
water	13:33	0:0	4	vlm
op	13:36	0:0	4	->
water	13:38	0:0	4	media
op	13:43	0:0	4	[
water	13:44	0:0	4	i
op	13:45	0:0	4	]
decl	14:8	14:40	4	vlm_media_t	*p_cfg
op	14:27	0:0	4	=
op	14:29	0:0	4	&
water	14:30	0:0	4	media
op	14:35	0:0	4	->
water	14:37	0:0	4	cfg
if	15:8	16:72	4	(p_cfg -> b_vod)
cond	15:12	15:19	5	p_cfg -> b_vod
water	15:12	0:0	6	p_cfg
op	15:17	0:0	6	->
water	15:19	0:0	6	b_vod
stmts	16:12	16:72	5	
water	16:12	0:0	6	i_length
op	16:21	0:0	6	+=
call	16:24	16:45	6	strlen
arg	16:32	16:45	7	"new * vod "
water	16:32	0:0	8	"new * vod "
op	16:47	0:0	6	+
call	16:49	16:71	6	strlen
arg	16:56	16:71	7	p_cfg->psz_name
water	16:56	0:0	8	p_cfg
op	16:61	0:0	8	->
water	16:63	0:0	8	psz_name
water	16:72	0:0	6	;
else	17:8	18:78	4
stmts	18:12	18:78	5	
water	18:12	0:0	6	i_length
op	18:21	0:0	6	+=
call	18:24	18:51	6	strlen
arg	18:32	18:51	7	"new * broadcast "
water	18:32	0:0	8	"new * broadcast "
op	18:53	0:0	6	+
call	18:55	18:77	6	strlen
arg	18:62	18:77	7	p_cfg->psz_name
water	18:62	0:0	8	p_cfg
op	18:67	0:0	8	->
water	18:69	0:0	8	psz_name
water	18:78	0:0	6	;
if	19:8	20:43	4	(p_cfg -> b_enabled)
cond	19:12	19:19	5	p_cfg -> b_enabled
water	19:12	0:0	6	p_cfg
op	19:17	0:0	6	->
water	19:19	0:0	6	b_enabled
stmts	20:12	20:43	5	
water	20:12	0:0	6	i_length
op	20:21	0:0	6	+=
call	20:24	20:42	6	strlen
arg	20:32	20:42	7	"enabled"
water	20:32	0:0	8	"enabled"
water	20:43	0:0	6	;
else	21:8	22:44	4
stmts	22:12	22:44	5	
water	22:12	0:0	6	i_length
op	22:21	0:0	6	+=
call	22:24	22:43	6	strlen
arg	22:32	22:43	7	"disabled"
water	22:32	0:0	8	"disabled"
water	22:44	0:0	6	;
if	23:8	24:43	4	(! p_cfg -> b_vod && p_cfg -> broadcast . b_loop)
cond	23:12	23:46	5	! p_cfg -> b_vod && p_cfg -> broadcast . b_loop
op	23:12	0:0	6	!
water	23:13	0:0	6	p_cfg
op	23:18	0:0	6	->
water	23:20	0:0	6	b_vod
op	23:26	0:0	6	&&
water	23:29	0:0	6	p_cfg
op	23:34	0:0	6	->
water	23:36	0:0	6	broadcast
op	23:45	0:0	6	.
water	23:46	0:0	6	b_loop
stmts	24:12	24:43	5	
water	24:12	0:0	6	i_length
op	24:21	0:0	6	+=
call	24:24	24:42	6	strlen
arg	24:32	24:42	7	" loop\n"
water	24:32	0:0	8	" loop\n"
water	24:43	0:0	6	;
else	25:8	26:38	4
stmts	26:12	26:38	5	
water	26:12	0:0	6	i_length
op	26:21	0:0	6	+=
call	26:24	26:37	6	strlen
arg	26:32	26:37	7	"\n"
water	26:32	0:0	8	"\n"
water	26:38	0:0	6	;
for	27:8	28:117	4	(j = 0 ;j < p_cfg -> i_input;j ++)
forinit	27:13	27:18	5	j = 0 ;
water	27:13	0:0	6	j
op	27:15	0:0	6	=
water	27:17	0:0	6	0
water	27:18	0:0	6	;
cond	27:20	27:31	5	j < p_cfg -> i_input
water	27:20	0:0	6	j
op	27:22	0:0	6	<
water	27:24	0:0	6	p_cfg
op	27:29	0:0	6	->
water	27:31	0:0	6	i_input
forexpr	27:40	27:41	5	j ++
water	27:40	0:0	6	j
op	27:41	0:0	6	++
stmts	28:12	28:117	5	
water	28:12	0:0	6	i_length
op	28:21	0:0	6	+=
call	28:24	28:55	6	strlen
arg	28:32	28:55	7	"setup * input \"\"\n"
water	28:32	0:0	8	"setup * input \"\"\n"
op	28:57	0:0	6	+
call	28:59	28:83	6	strlen
arg	28:67	28:83	7	p_cfg->psz_name
water	28:67	0:0	8	p_cfg
op	28:72	0:0	8	->
water	28:74	0:0	8	psz_name
op	28:85	0:0	6	+
call	28:87	28:116	6	strlen
arg	28:95	28:116	7	p_cfg->ppsz_input[j]
water	28:95	0:0	8	p_cfg
op	28:100	0:0	8	->
water	28:102	0:0	8	ppsz_input
op	28:112	0:0	8	[
water	28:113	0:0	8	j
op	28:114	0:0	8	]
water	28:117	0:0	6	;
if	29:8	30:107	4	(p_cfg -> psz_output != NULL)
cond	29:12	29:33	5	p_cfg -> psz_output != NULL
water	29:12	0:0	6	p_cfg
op	29:17	0:0	6	->
water	29:19	0:0	6	psz_output
op	29:30	0:0	6	!=
water	29:33	0:0	6	NULL
stmts	30:12	30:107	5	
water	30:12	0:0	6	i_length
op	30:21	0:0	6	+=
call	30:24	30:52	6	strlen
arg	30:32	30:52	7	"setup * output \n"
water	30:32	0:0	8	"setup * output \n"
op	30:54	0:0	6	+
call	30:56	30:78	6	strlen
arg	30:63	30:78	7	p_cfg->psz_name
water	30:63	0:0	8	p_cfg
op	30:68	0:0	8	->
water	30:70	0:0	8	psz_name
op	30:80	0:0	6	+
call	30:82	30:106	6	strlen
arg	30:89	30:106	7	p_cfg->psz_output
water	30:89	0:0	8	p_cfg
op	30:94	0:0	8	->
water	30:96	0:0	8	psz_output
water	30:107	0:0	6	;
for	31:8	32:109	4	(j = 0 ;j < p_cfg -> i_option;j ++)
forinit	31:13	31:18	5	j = 0 ;
water	31:13	0:0	6	j
op	31:15	0:0	6	=
water	31:17	0:0	6	0
water	31:18	0:0	6	;
cond	31:20	31:31	5	j < p_cfg -> i_option
water	31:20	0:0	6	j
op	31:22	0:0	6	<
water	31:24	0:0	6	p_cfg
op	31:29	0:0	6	->
water	31:31	0:0	6	i_option
forexpr	31:41	31:42	5	j ++
water	31:41	0:0	6	j
op	31:42	0:0	6	++
stmts	32:12	32:109	5	
water	32:12	0:0	6	i_length
op	32:21	0:0	6	+=
call	32:24	32:50	6	strlen
arg	32:31	32:50	7	"setup * option \n"
water	32:31	0:0	8	"setup * option \n"
op	32:52	0:0	6	+
call	32:54	32:76	6	strlen
arg	32:61	32:76	7	p_cfg->psz_name
water	32:61	0:0	8	p_cfg
op	32:66	0:0	8	->
water	32:68	0:0	8	psz_name
op	32:78	0:0	6	+
call	32:80	32:108	6	strlen
arg	32:87	32:108	7	p_cfg->ppsz_option[j]
water	32:87	0:0	8	p_cfg
op	32:92	0:0	8	->
water	32:94	0:0	8	ppsz_option
op	32:105	0:0	8	[
water	32:106	0:0	8	j
op	32:107	0:0	8	]
water	32:109	0:0	6	;
if	33:8	34:103	4	(p_cfg -> b_vod && p_cfg -> vod . psz_mux)
cond	33:12	33:39	5	p_cfg -> b_vod && p_cfg -> vod . psz_mux
water	33:12	0:0	6	p_cfg
op	33:17	0:0	6	->
water	33:19	0:0	6	b_vod
op	33:25	0:0	6	&&
water	33:28	0:0	6	p_cfg
op	33:33	0:0	6	->
water	33:35	0:0	6	vod
op	33:38	0:0	6	.
water	33:39	0:0	6	psz_mux
stmts	34:12	34:103	5	
water	34:12	0:0	6	i_length
op	34:21	0:0	6	+=
call	34:24	34:47	6	strlen
arg	34:31	34:47	7	"setup * mux \n"
water	34:31	0:0	8	"setup * mux \n"
op	34:49	0:0	6	+
call	34:51	34:73	6	strlen
arg	34:58	34:73	7	p_cfg->psz_name
water	34:58	0:0	8	p_cfg
op	34:63	0:0	8	->
water	34:65	0:0	8	psz_name
op	34:75	0:0	6	+
call	34:77	34:102	6	strlen
arg	34:84	34:102	7	p_cfg->vod.psz_mux
water	34:84	0:0	8	p_cfg
op	34:89	0:0	8	->
water	34:91	0:0	8	vod
op	34:94	0:0	8	.
water	34:95	0:0	8	psz_mux
water	34:103	0:0	6	;
water	35:4	0:0	4	}
for	36:4	69:4	2	(i = 0 ;i < vlm -> i_schedule;i ++)
forinit	36:9	36:14	3	i = 0 ;
water	36:9	0:0	4	i
op	36:11	0:0	4	=
water	36:13	0:0	4	0
water	36:14	0:0	4	;
cond	36:16	36:25	3	i < vlm -> i_schedule
water	36:16	0:0	4	i
op	36:18	0:0	4	<
water	36:20	0:0	4	vlm
op	36:23	0:0	4	->
water	36:25	0:0	4	i_schedule
forexpr	36:37	36:38	3	i ++
water	36:37	0:0	4	i
op	36:38	0:0	4	++
stmts	37:4	69:4	3	
water	37:4	0:0	4	{
decl	38:8	38:55	4	vlm_schedule_sys_t	*schedule
op	38:37	0:0	4	=
water	38:39	0:0	4	vlm
op	38:42	0:0	4	->
water	38:44	0:0	4	schedule
op	38:52	0:0	4	[
water	38:53	0:0	4	i
op	38:54	0:0	4	]
water	39:8	0:0	4	i_length
op	39:17	0:0	4	+=
call	39:20	39:45	4	strlen
arg	39:28	39:45	5	"new  schedule "
water	39:28	0:0	6	"new  schedule "
op	39:47	0:0	4	+
call	39:49	39:76	4	strlen
arg	39:57	39:76	5	schedule->psz_name
water	39:57	0:0	6	schedule
op	39:65	0:0	6	->
water	39:67	0:0	6	psz_name
water	39:77	0:0	4	;
if	40:8	43:8	4	(schedule -> b_enabled)
cond	40:12	40:22	5	schedule -> b_enabled
water	40:12	0:0	6	schedule
op	40:20	0:0	6	->
water	40:22	0:0	6	b_enabled
stmts	41:8	43:8	5	
water	41:8	0:0	6	{
water	42:12	0:0	6	i_length
op	42:21	0:0	6	+=
call	42:24	42:55	6	strlen
arg	42:32	42:55	7	"date //-:: enabled\n"
water	42:32	0:0	8	"date //-:: enabled\n"
op	42:57	0:0	6	+
water	42:59	0:0	6	14
water	42:61	0:0	6	;
water	43:8	0:0	6	}
else	44:8	47:8	4
stmts	45:8	47:8	5	
water	45:8	0:0	6	{
water	46:12	0:0	6	i_length
op	46:21	0:0	6	+=
call	46:24	46:56	6	strlen
arg	46:32	46:56	7	"date //-:: disabled\n"
water	46:32	0:0	8	"date //-:: disabled\n"
op	46:58	0:0	6	+
water	46:60	0:0	6	14
water	46:62	0:0	6	;
water	47:8	0:0	6	}
if	48:8	52:8	4	(schedule -> i_period != 0)
cond	48:12	48:34	5	schedule -> i_period != 0
water	48:12	0:0	6	schedule
op	48:20	0:0	6	->
water	48:22	0:0	6	i_period
op	48:31	0:0	6	!=
water	48:34	0:0	6	0
stmts	49:8	52:8	5	
water	49:8	0:0	6	{
water	50:12	0:0	6	i_length
op	50:21	0:0	6	+=
call	50:24	50:42	6	strlen
arg	50:32	50:42	7	"setup  "
water	50:32	0:0	8	"setup  "
op	50:44	0:0	6	+
call	50:46	50:73	6	strlen
arg	50:54	50:73	7	schedule->psz_name
water	50:54	0:0	8	schedule
op	50:62	0:0	8	->
water	50:64	0:0	8	psz_name
op	50:75	0:0	6	+
call	51:16	51:41	6	strlen
arg	51:24	51:41	7	"period //-::\n"
water	51:24	0:0	8	"period //-::\n"
op	51:43	0:0	6	+
water	51:45	0:0	6	14
water	51:47	0:0	6	;
water	52:8	0:0	6	}
if	53:8	59:8	4	(schedule -> i_repeat >= 0)
cond	53:12	53:34	5	schedule -> i_repeat >= 0
water	53:12	0:0	6	schedule
op	53:20	0:0	6	->
water	53:22	0:0	6	i_repeat
op	53:31	0:0	6	>=
water	53:34	0:0	6	0
stmts	54:8	59:8	5	
water	54:8	0:0	6	{
decl	55:12	55:27	6	char	buffer[12]
call	56:12	56:54	6	sprintf
arg	56:21	56:27	7	buffer
water	56:21	0:0	8	buffer
arg	56:29	56:33	7	"%d"
water	56:29	0:0	8	"%d"
arg	56:35	56:54	7	schedule->i_repeat
water	56:35	0:0	8	schedule
op	56:43	0:0	8	->
water	56:45	0:0	8	i_repeat
water	56:55	0:0	6	;
water	57:12	0:0	6	i_length
op	57:21	0:0	6	+=
call	57:24	57:51	6	strlen
arg	57:32	57:51	7	"setup  repeat \n"
water	57:32	0:0	8	"setup  repeat \n"
op	57:53	0:0	6	+
call	58:16	58:43	6	strlen
arg	58:24	58:43	7	schedule->psz_name
water	58:24	0:0	8	schedule
op	58:32	0:0	8	->
water	58:34	0:0	8	psz_name
op	58:45	0:0	6	+
call	58:47	58:62	6	strlen
arg	58:55	58:62	7	buffer
water	58:55	0:0	8	buffer
water	58:63	0:0	6	;
water	59:8	0:0	6	}
else	60:8	63:8	4
stmts	61:8	63:8	5	
water	61:8	0:0	6	{
water	62:12	0:0	6	i_length
op	62:20	0:0	6	++
water	62:22	0:0	6	;
water	63:8	0:0	6	}
for	64:8	68:8	4	(j = 0 ;j < schedule -> i_command;j ++)
forinit	64:13	64:18	5	j = 0 ;
water	64:13	0:0	6	j
op	64:15	0:0	6	=
water	64:17	0:0	6	0
water	64:18	0:0	6	;
cond	64:20	64:34	5	j < schedule -> i_command
water	64:20	0:0	6	j
op	64:22	0:0	6	<
water	64:24	0:0	6	schedule
op	64:32	0:0	6	->
water	64:34	0:0	6	i_command
forexpr	64:45	64:46	5	j ++
water	64:45	0:0	6	j
op	64:46	0:0	6	++
stmts	65:8	68:8	5	
water	65:8	0:0	6	{
water	66:12	0:0	6	i_length
op	66:21	0:0	6	+=
call	66:24	66:51	6	strlen
arg	66:32	66:51	7	"setup  append \n"
water	66:32	0:0	8	"setup  append \n"
op	66:53	0:0	6	+
call	67:16	67:43	6	strlen
arg	67:24	67:43	7	schedule->psz_name
water	67:24	0:0	8	schedule
op	67:32	0:0	8	->
water	67:34	0:0	8	psz_name
op	67:45	0:0	6	+
call	67:47	67:76	6	strlen
arg	67:55	67:76	7	schedule->command[j]
water	67:55	0:0	8	schedule
op	67:63	0:0	8	->
water	67:65	0:0	8	command
op	67:72	0:0	8	[
water	67:73	0:0	8	j
op	67:74	0:0	8	]
water	67:77	0:0	6	;
water	68:8	0:0	6	}
water	69:4	0:0	4	}
water	71:4	0:0	2	i_length
op	71:12	0:0	2	++
water	71:14	0:0	2	;
water	73:4	0:0	2	p
op	73:6	0:0	2	=
water	73:8	0:0	2	save
op	73:13	0:0	2	=
call	73:15	73:32	2	malloc
arg	73:23	73:32	3	i_length
water	73:23	0:0	4	i_length
water	73:33	0:0	2	;
if	74:4	74:27	2	(! save)
cond	74:8	74:9	3	! save
op	74:8	0:0	4	!
water	74:9	0:0	4	save
stmts	74:16	74:27	3	
return	74:16	74:27	4	NULL
water	74:23	0:0	5	NULL
op	75:4	0:0	2	*
water	75:5	0:0	2	save
op	75:10	0:0	2	=
water	75:12	0:0	2	'\0'
water	75:16	0:0	2	;
water	76:4	0:0	2	p
op	76:6	0:0	2	+=
call	76:9	76:38	2	sprintf
arg	76:18	76:19	3	p
water	76:18	0:0	4	p
arg	76:21	76:25	3	"%s"
water	76:21	0:0	4	"%s"
arg	76:27	76:38	3	psz_header
water	76:27	0:0	4	psz_header
water	76:39	0:0	2	;
for	78:4	102:4	2	(i = 0 ;i < vlm -> i_media;i ++)
forinit	78:9	78:14	3	i = 0 ;
water	78:9	0:0	4	i
op	78:11	0:0	4	=
water	78:13	0:0	4	0
water	78:14	0:0	4	;
cond	78:16	78:25	3	i < vlm -> i_media
water	78:16	0:0	4	i
op	78:18	0:0	4	<
water	78:20	0:0	4	vlm
op	78:23	0:0	4	->
water	78:25	0:0	4	i_media
forexpr	78:34	78:35	3	i ++
water	78:34	0:0	4	i
op	78:35	0:0	4	++
stmts	79:4	102:4	3	
water	79:4	0:0	4	{
decl	80:8	80:46	4	vlm_media_sys_t	*media
op	80:31	0:0	4	=
water	80:33	0:0	4	vlm
op	80:36	0:0	4	->
water	80:38	0:0	4	media
op	80:43	0:0	4	[
water	80:44	0:0	4	i
op	80:45	0:0	4	]
decl	81:8	81:40	4	vlm_media_t	*p_cfg
op	81:27	0:0	4	=
op	81:29	0:0	4	&
water	81:30	0:0	4	media
op	81:35	0:0	4	->
water	81:37	0:0	4	cfg
if	82:8	83:61	4	(p_cfg -> b_vod)
cond	82:12	82:19	5	p_cfg -> b_vod
water	82:12	0:0	6	p_cfg
op	82:17	0:0	6	->
water	82:19	0:0	6	b_vod
stmts	83:12	83:61	5	
water	83:12	0:0	6	p
op	83:14	0:0	6	+=
call	83:17	83:60	6	sprintf
arg	83:26	83:27	7	p
water	83:26	0:0	8	p
arg	83:29	83:42	7	"new %s vod "
water	83:29	0:0	8	"new %s vod "
arg	83:44	83:60	7	p_cfg->psz_name
water	83:44	0:0	8	p_cfg
op	83:49	0:0	8	->
water	83:51	0:0	8	psz_name
water	83:61	0:0	6	;
else	84:8	85:67	4
stmts	85:12	85:67	5	
water	85:12	0:0	6	p
op	85:14	0:0	6	+=
call	85:17	85:66	6	sprintf
arg	85:26	85:27	7	p
water	85:26	0:0	8	p
arg	85:29	85:48	7	"new %s broadcast "
water	85:29	0:0	8	"new %s broadcast "
arg	85:50	85:66	7	p_cfg->psz_name
water	85:50	0:0	8	p_cfg
op	85:55	0:0	8	->
water	85:57	0:0	8	psz_name
water	85:67	0:0	6	;
if	86:8	87:40	4	(p_cfg -> b_enabled)
cond	86:12	86:19	5	p_cfg -> b_enabled
water	86:12	0:0	6	p_cfg
op	86:17	0:0	6	->
water	86:19	0:0	6	b_enabled
stmts	87:12	87:40	5	
water	87:12	0:0	6	p
op	87:14	0:0	6	+=
call	87:17	87:39	6	sprintf
arg	87:26	87:27	7	p
water	87:26	0:0	8	p
arg	87:29	87:39	7	"enabled"
water	87:29	0:0	8	"enabled"
water	87:40	0:0	6	;
else	88:8	89:41	4
stmts	89:12	89:41	5	
water	89:12	0:0	6	p
op	89:14	0:0	6	+=
call	89:17	89:40	6	sprintf
arg	89:26	89:27	7	p
water	89:26	0:0	8	p
arg	89:29	89:40	7	"disabled"
water	89:29	0:0	8	"disabled"
water	89:41	0:0	6	;
if	90:8	91:40	4	(! p_cfg -> b_vod && p_cfg -> broadcast . b_loop)
cond	90:12	90:46	5	! p_cfg -> b_vod && p_cfg -> broadcast . b_loop
op	90:12	0:0	6	!
water	90:13	0:0	6	p_cfg
op	90:18	0:0	6	->
water	90:20	0:0	6	b_vod
op	90:26	0:0	6	&&
water	90:29	0:0	6	p_cfg
op	90:34	0:0	6	->
water	90:36	0:0	6	broadcast
op	90:45	0:0	6	.
water	90:46	0:0	6	b_loop
stmts	91:12	91:40	5	
water	91:12	0:0	6	p
op	91:14	0:0	6	+=
call	91:17	91:39	6	sprintf
arg	91:26	91:27	7	p
water	91:26	0:0	8	p
arg	91:29	91:39	7	" loop\n"
water	91:29	0:0	8	" loop\n"
water	91:40	0:0	6	;
else	92:8	93:35	4
stmts	93:12	93:35	5	
water	93:12	0:0	6	p
op	93:14	0:0	6	+=
call	93:17	93:34	6	sprintf
arg	93:26	93:27	7	p
water	93:26	0:0	8	p
arg	93:29	93:34	7	"\n"
water	93:29	0:0	8	"\n"
water	93:35	0:0	6	;
for	94:8	95:95	4	(j = 0 ;j < p_cfg -> i_input;j ++)
forinit	94:13	94:18	5	j = 0 ;
water	94:13	0:0	6	j
op	94:15	0:0	6	=
water	94:17	0:0	6	0
water	94:18	0:0	6	;
cond	94:20	94:31	5	j < p_cfg -> i_input
water	94:20	0:0	6	j
op	94:22	0:0	6	<
water	94:24	0:0	6	p_cfg
op	94:29	0:0	6	->
water	94:31	0:0	6	i_input
forexpr	94:40	94:41	5	j ++
water	94:40	0:0	6	j
op	94:41	0:0	6	++
stmts	95:12	95:95	5	
water	95:12	0:0	6	p
op	95:14	0:0	6	+=
call	95:17	95:94	6	sprintf
arg	95:26	95:27	7	p
water	95:26	0:0	8	p
arg	95:29	95:54	7	"setup %s input \"%s\"\n"
water	95:29	0:0	8	"setup %s input \"%s\"\n"
arg	95:56	95:71	7	p_cfg->psz_name
water	95:56	0:0	8	p_cfg
op	95:61	0:0	8	->
water	95:63	0:0	8	psz_name
arg	95:73	95:94	7	p_cfg->ppsz_input[j]
water	95:73	0:0	8	p_cfg
op	95:78	0:0	8	->
water	95:80	0:0	8	ppsz_input
op	95:90	0:0	8	[
water	95:91	0:0	8	j
op	95:92	0:0	8	]
water	95:95	0:0	6	;
if	96:8	97:89	4	(p_cfg -> psz_output)
cond	96:12	96:19	5	p_cfg -> psz_output
water	96:12	0:0	6	p_cfg
op	96:17	0:0	6	->
water	96:19	0:0	6	psz_output
stmts	97:12	97:89	5	
water	97:12	0:0	6	p
op	97:14	0:0	6	+=
call	97:17	97:88	6	sprintf
arg	97:26	97:27	7	p
water	97:26	0:0	8	p
arg	97:29	97:51	7	"setup %s output %s\n"
water	97:29	0:0	8	"setup %s output %s\n"
arg	97:53	97:68	7	p_cfg->psz_name
water	97:53	0:0	8	p_cfg
op	97:58	0:0	8	->
water	97:60	0:0	8	psz_name
arg	97:70	97:88	7	p_cfg->psz_output
water	97:70	0:0	8	p_cfg
op	97:75	0:0	8	->
water	97:77	0:0	8	psz_output
water	97:89	0:0	6	;
for	98:8	99:93	4	(j = 0 ;j < p_cfg -> i_option;j ++)
forinit	98:13	98:18	5	j = 0 ;
water	98:13	0:0	6	j
op	98:15	0:0	6	=
water	98:17	0:0	6	0
water	98:18	0:0	6	;
cond	98:20	98:31	5	j < p_cfg -> i_option
water	98:20	0:0	6	j
op	98:22	0:0	6	<
water	98:24	0:0	6	p_cfg
op	98:29	0:0	6	->
water	98:31	0:0	6	i_option
forexpr	98:41	98:42	5	j ++
water	98:41	0:0	6	j
op	98:42	0:0	6	++
stmts	99:12	99:93	5	
water	99:12	0:0	6	p
op	99:14	0:0	6	+=
call	99:17	99:92	6	sprintf
arg	99:26	99:27	7	p
water	99:26	0:0	8	p
arg	99:29	99:51	7	"setup %s option %s\n"
water	99:29	0:0	8	"setup %s option %s\n"
arg	99:53	99:68	7	p_cfg->psz_name
water	99:53	0:0	8	p_cfg
op	99:58	0:0	8	->
water	99:60	0:0	8	psz_name
arg	99:70	99:92	7	p_cfg->ppsz_option[j]
water	99:70	0:0	8	p_cfg
op	99:75	0:0	8	->
water	99:77	0:0	8	ppsz_option
op	99:88	0:0	8	[
water	99:89	0:0	8	j
op	99:90	0:0	8	]
water	99:93	0:0	6	;
if	100:8	101:87	4	(p_cfg -> b_vod && p_cfg -> vod . psz_mux)
cond	100:12	100:39	5	p_cfg -> b_vod && p_cfg -> vod . psz_mux
water	100:12	0:0	6	p_cfg
op	100:17	0:0	6	->
water	100:19	0:0	6	b_vod
op	100:25	0:0	6	&&
water	100:28	0:0	6	p_cfg
op	100:33	0:0	6	->
water	100:35	0:0	6	vod
op	100:38	0:0	6	.
water	100:39	0:0	6	psz_mux
stmts	101:12	101:87	5	
water	101:12	0:0	6	p
op	101:14	0:0	6	+=
call	101:17	101:86	6	sprintf
arg	101:26	101:27	7	p
water	101:26	0:0	8	p
arg	101:29	101:48	7	"setup %s mux %s\n"
water	101:29	0:0	8	"setup %s mux %s\n"
arg	101:50	101:65	7	p_cfg->psz_name
water	101:50	0:0	8	p_cfg
op	101:55	0:0	8	->
water	101:57	0:0	8	psz_name
arg	101:67	101:86	7	p_cfg->vod.psz_mux
water	101:67	0:0	8	p_cfg
op	101:72	0:0	8	->
water	101:74	0:0	8	vod
op	101:77	0:0	8	.
water	101:78	0:0	8	psz_mux
water	101:87	0:0	6	;
water	102:4	0:0	4	}
for	104:4	157:4	2	(i = 0 ;i < vlm -> i_schedule;i ++)
forinit	104:9	104:14	3	i = 0 ;
water	104:9	0:0	4	i
op	104:11	0:0	4	=
water	104:13	0:0	4	0
water	104:14	0:0	4	;
cond	104:16	104:25	3	i < vlm -> i_schedule
water	104:16	0:0	4	i
op	104:18	0:0	4	<
water	104:20	0:0	4	vlm
op	104:23	0:0	4	->
water	104:25	0:0	4	i_schedule
forexpr	104:37	104:38	3	i ++
water	104:37	0:0	4	i
op	104:38	0:0	4	++
stmts	105:4	157:4	3	
water	105:4	0:0	4	{
decl	106:8	106:55	4	vlm_schedule_sys_t	*schedule
op	106:37	0:0	4	=
water	106:39	0:0	4	vlm
op	106:42	0:0	4	->
water	106:44	0:0	4	schedule
op	106:52	0:0	4	[
water	106:53	0:0	4	i
op	106:54	0:0	4	]
decl	107:8	107:22	4	struct tm	date
decl	108:8	108:63	4	time_t	i_time
op	108:22	0:0	4	=
call	108:24	108:62	5	(time_t)
arg	108:35	108:62	6	schedule->i_date/1000000
water	108:35	0:0	7	schedule
op	108:43	0:0	7	->
water	108:45	0:0	7	i_date
op	108:52	0:0	7	/
water	108:54	0:0	7	1000000
call	109:8	109:35	4	localtime_r
arg	109:21	109:28	5	&i_time
op	109:21	0:0	6	&
water	109:22	0:0	6	i_time
arg	109:30	109:35	5	&date
op	109:30	0:0	6	&
water	109:31	0:0	6	date
water	109:36	0:0	4	;
water	110:8	0:0	4	p
op	110:10	0:0	4	+=
call	110:13	110:63	4	sprintf
arg	110:22	110:23	5	p
water	110:22	0:0	6	p
arg	110:25	110:43	5	"new %s schedule "
water	110:25	0:0	6	"new %s schedule "
arg	110:45	110:63	5	schedule->psz_name
water	110:45	0:0	6	schedule
op	110:53	0:0	6	->
water	110:55	0:0	6	psz_name
water	110:64	0:0	4	;
if	111:8	116:8	4	(schedule -> b_enabled)
cond	111:12	111:22	5	schedule -> b_enabled
water	111:12	0:0	6	schedule
op	111:20	0:0	6	->
water	111:22	0:0	6	b_enabled
stmts	112:8	116:8	5	
water	112:8	0:0	6	{
water	113:12	0:0	6	p
op	113:14	0:0	6	+=
call	113:17	115:65	6	sprintf
arg	113:26	113:27	7	p
water	113:26	0:0	8	p
arg	113:29	113:63	7	"date %d/%d/%d-%d:%d:%d enabled\n"
water	113:29	0:0	8	"date %d/%d/%d-%d:%d:%d enabled\n"
arg	114:26	114:45	7	date.tm_year+1900
water	114:26	0:0	8	date
op	114:30	0:0	8	.
water	114:31	0:0	8	tm_year
op	114:39	0:0	8	+
water	114:41	0:0	8	1900
arg	114:47	114:62	7	date.tm_mon+1
water	114:47	0:0	8	date
op	114:51	0:0	8	.
water	114:52	0:0	8	tm_mon
op	114:59	0:0	8	+
water	114:61	0:0	8	1
arg	114:64	114:76	7	date.tm_mday
water	114:64	0:0	8	date
op	114:68	0:0	8	.
water	114:69	0:0	8	tm_mday
arg	115:26	115:38	7	date.tm_hour
water	115:26	0:0	8	date
op	115:30	0:0	8	.
water	115:31	0:0	8	tm_hour
arg	115:40	115:51	7	date.tm_min
water	115:40	0:0	8	date
op	115:44	0:0	8	.
water	115:45	0:0	8	tm_min
arg	115:53	115:65	7	date.tm_sec
water	115:53	0:0	8	date
op	115:57	0:0	8	.
water	115:58	0:0	8	tm_sec
water	115:66	0:0	6	;
water	116:8	0:0	6	}
else	117:8	122:8	4
stmts	118:8	122:8	5	
water	118:8	0:0	6	{
water	119:12	0:0	6	p
op	119:14	0:0	6	+=
call	119:17	121:64	6	sprintf
arg	119:26	119:27	7	p
water	119:26	0:0	8	p
arg	119:29	119:64	7	"date %d/%d/%d-%d:%d:%d disabled\n"
water	119:29	0:0	8	"date %d/%d/%d-%d:%d:%d disabled\n"
arg	120:26	120:45	7	date.tm_year+1900
water	120:26	0:0	8	date
op	120:30	0:0	8	.
water	120:31	0:0	8	tm_year
op	120:39	0:0	8	+
water	120:41	0:0	8	1900
arg	120:47	120:62	7	date.tm_mon+1
water	120:47	0:0	8	date
op	120:51	0:0	8	.
water	120:52	0:0	8	tm_mon
op	120:59	0:0	8	+
water	120:61	0:0	8	1
arg	120:64	120:76	7	date.tm_mday
water	120:64	0:0	8	date
op	120:68	0:0	8	.
water	120:69	0:0	8	tm_mday
arg	121:26	121:38	7	date.tm_hour
water	121:26	0:0	8	date
op	121:30	0:0	8	.
water	121:31	0:0	8	tm_hour
arg	121:40	121:51	7	date.tm_min
water	121:40	0:0	8	date
op	121:44	0:0	8	.
water	121:45	0:0	8	tm_min
arg	121:53	121:64	7	date.tm_sec
water	121:53	0:0	8	date
op	121:57	0:0	8	.
water	121:58	0:0	8	tm_sec
water	121:65	0:0	6	;
water	122:8	0:0	6	}
if	123:8	142:8	4	(schedule -> i_period != 0)
cond	123:12	123:34	5	schedule -> i_period != 0
water	123:12	0:0	6	schedule
op	123:20	0:0	6	->
water	123:22	0:0	6	i_period
op	123:31	0:0	6	!=
water	123:34	0:0	6	0
stmts	124:8	142:8	5	
water	124:8	0:0	6	{
water	125:12	0:0	6	p
op	125:14	0:0	6	+=
call	125:17	125:61	6	sprintf
arg	125:26	125:27	7	p
water	125:26	0:0	8	p
arg	125:29	125:40	7	"setup %s "
water	125:29	0:0	8	"setup %s "
arg	125:42	125:61	7	schedule->psz_name
water	125:42	0:0	8	schedule
op	125:50	0:0	8	->
water	125:52	0:0	8	psz_name
water	125:62	0:0	6	;
water	126:12	0:0	6	i_time
op	126:19	0:0	6	=
call	126:21	126:61	6	(time_t)
arg	126:32	126:61	7	schedule->i_period/1000000
water	126:32	0:0	8	schedule
op	126:40	0:0	8	->
water	126:42	0:0	8	i_period
op	126:51	0:0	8	/
water	126:53	0:0	8	1000000
water	126:62	0:0	6	;
water	127:12	0:0	6	date
op	127:16	0:0	6	.
water	127:17	0:0	6	tm_sec
op	127:24	0:0	6	=
call	127:26	127:45	6	(int)
arg	127:33	127:45	7	i_time%60
water	127:33	0:0	8	i_time
op	127:40	0:0	8	%
water	127:42	0:0	8	60
water	127:46	0:0	6	;
water	128:12	0:0	6	i_time
op	128:19	0:0	6	=
water	128:21	0:0	6	i_time
op	128:28	0:0	6	/
water	128:30	0:0	6	60
water	128:32	0:0	6	;
water	129:12	0:0	6	date
op	129:16	0:0	6	.
water	129:17	0:0	6	tm_min
op	129:24	0:0	6	=
call	129:26	129:45	6	(int)
arg	129:33	129:45	7	i_time%60
water	129:33	0:0	8	i_time
op	129:40	0:0	8	%
water	129:42	0:0	8	60
water	129:46	0:0	6	;
water	130:12	0:0	6	i_time
op	130:19	0:0	6	=
water	130:21	0:0	6	i_time
op	130:28	0:0	6	/
water	130:30	0:0	6	60
water	130:32	0:0	6	;
water	131:12	0:0	6	date
op	131:16	0:0	6	.
water	131:17	0:0	6	tm_hour
op	131:25	0:0	6	=
call	131:27	131:46	6	(int)
arg	131:34	131:46	7	i_time%24
water	131:34	0:0	8	i_time
op	131:41	0:0	8	%
water	131:43	0:0	8	24
water	131:47	0:0	6	;
water	132:12	0:0	6	i_time
op	132:19	0:0	6	=
water	132:21	0:0	6	i_time
op	132:28	0:0	6	/
water	132:30	0:0	6	24
water	132:32	0:0	6	;
water	133:12	0:0	6	date
op	133:16	0:0	6	.
water	133:17	0:0	6	tm_mday
op	133:25	0:0	6	=
call	133:27	133:46	6	(int)
arg	133:34	133:46	7	i_time%30
water	133:34	0:0	8	i_time
op	133:41	0:0	8	%
water	133:43	0:0	8	30
water	133:47	0:0	6	;
water	134:12	0:0	6	i_time
op	134:19	0:0	6	=
water	134:21	0:0	6	i_time
op	134:28	0:0	6	/
water	134:30	0:0	6	30
water	134:32	0:0	6	;
water	136:12	0:0	6	date
op	136:16	0:0	6	.
water	136:17	0:0	6	tm_mon
op	136:24	0:0	6	=
call	136:26	136:45	6	(int)
arg	136:33	136:45	7	i_time%12
water	136:33	0:0	8	i_time
op	136:40	0:0	8	%
water	136:42	0:0	8	12
water	136:46	0:0	6	;
water	137:12	0:0	6	i_time
op	137:19	0:0	6	=
water	137:21	0:0	6	i_time
op	137:28	0:0	6	/
water	137:30	0:0	6	12
water	137:32	0:0	6	;
water	138:12	0:0	6	date
op	138:16	0:0	6	.
water	138:17	0:0	6	tm_year
op	138:25	0:0	6	=
water	138:27	0:0	6	(
water	138:28	0:0	6	int
water	138:31	0:0	6	)
water	138:32	0:0	6	i_time
water	138:38	0:0	6	;
water	139:12	0:0	6	p
op	139:14	0:0	6	+=
call	139:17	141:64	6	sprintf
arg	139:26	139:27	7	p
water	139:26	0:0	8	p
arg	139:29	139:57	7	"period %d/%d/%d-%d:%d:%d\n"
water	139:29	0:0	8	"period %d/%d/%d-%d:%d:%d\n"
arg	140:26	140:38	7	date.tm_year
water	140:26	0:0	8	date
op	140:30	0:0	8	.
water	140:31	0:0	8	tm_year
arg	140:40	140:51	7	date.tm_mon
water	140:40	0:0	8	date
op	140:44	0:0	8	.
water	140:45	0:0	8	tm_mon
arg	140:53	140:65	7	date.tm_mday
water	140:53	0:0	8	date
op	140:57	0:0	8	.
water	140:58	0:0	8	tm_mday
arg	141:26	141:38	7	date.tm_hour
water	141:26	0:0	8	date
op	141:30	0:0	8	.
water	141:31	0:0	8	tm_hour
arg	141:40	141:51	7	date.tm_min
water	141:40	0:0	8	date
op	141:44	0:0	8	.
water	141:45	0:0	8	tm_min
arg	141:53	141:64	7	date.tm_sec
water	141:53	0:0	8	date
op	141:57	0:0	8	.
water	141:58	0:0	8	tm_sec
water	141:65	0:0	6	;
water	142:8	0:0	6	}
if	143:8	147:8	4	(schedule -> i_repeat >= 0)
cond	143:12	143:34	5	schedule -> i_repeat >= 0
water	143:12	0:0	6	schedule
op	143:20	0:0	6	->
water	143:22	0:0	6	i_repeat
op	143:31	0:0	6	>=
water	143:34	0:0	6	0
stmts	144:8	147:8	5	
water	144:8	0:0	6	{
water	145:12	0:0	6	p
op	145:14	0:0	6	+=
call	145:17	146:65	6	sprintf
arg	145:26	145:27	7	p
water	145:26	0:0	8	p
arg	145:29	145:51	7	"setup %s repeat %d\n"
water	145:29	0:0	8	"setup %s repeat %d\n"
arg	146:26	146:44	7	schedule->psz_name
water	146:26	0:0	8	schedule
op	146:34	0:0	8	->
water	146:36	0:0	8	psz_name
arg	146:46	146:65	7	schedule->i_repeat
water	146:46	0:0	8	schedule
op	146:54	0:0	8	->
water	146:56	0:0	8	i_repeat
water	146:66	0:0	6	;
water	147:8	0:0	6	}
else	148:8	151:8	4
stmts	149:8	151:8	5	
water	149:8	0:0	6	{
water	150:12	0:0	6	p
op	150:14	0:0	6	+=
call	150:17	150:34	6	sprintf
arg	150:26	150:27	7	p
water	150:26	0:0	8	p
arg	150:29	150:34	7	"\n"
water	150:29	0:0	8	"\n"
water	150:35	0:0	6	;
water	151:8	0:0	6	}
for	152:8	156:8	4	(j = 0 ;j < schedule -> i_command;j ++)
forinit	152:13	152:18	5	j = 0 ;
water	152:13	0:0	6	j
op	152:15	0:0	6	=
water	152:17	0:0	6	0
water	152:18	0:0	6	;
cond	152:20	152:34	5	j < schedule -> i_command
water	152:20	0:0	6	j
op	152:22	0:0	6	<
water	152:24	0:0	6	schedule
op	152:32	0:0	6	->
water	152:34	0:0	6	i_command
forexpr	152:45	152:46	5	j ++
water	152:45	0:0	6	j
op	152:46	0:0	6	++
stmts	153:8	156:8	5	
water	153:8	0:0	6	{
water	154:12	0:0	6	p
op	154:14	0:0	6	+=
call	154:17	155:67	6	sprintf
arg	154:26	154:27	7	p
water	154:26	0:0	8	p
arg	154:29	154:51	7	"setup %s append %s\n"
water	154:29	0:0	8	"setup %s append %s\n"
arg	155:26	155:44	7	schedule->psz_name
water	155:26	0:0	8	schedule
op	155:34	0:0	8	->
water	155:36	0:0	8	psz_name
arg	155:46	155:67	7	schedule->command[j]
water	155:46	0:0	8	schedule
op	155:54	0:0	8	->
water	155:56	0:0	8	command
op	155:63	0:0	8	[
water	155:64	0:0	8	j
op	155:65	0:0	8	]
water	155:68	0:0	6	;
water	156:8	0:0	6	}
water	157:4	0:0	4	}
return	158:4	158:15	2	save
water	158:11	0:0	3	save
