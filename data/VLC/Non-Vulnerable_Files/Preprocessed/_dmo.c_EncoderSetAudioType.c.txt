func	2:0	110:0	0	static int	EncoderSetAudioType
params	2:30	0:0	1	
param	2:32	2:48	2	encoder_t *	p_enc
param	2:50	2:70	2	IMediaObject *	p_dmo
stmnts	0:0	109:22	1	
decl	4:4	4:28	2	int	i
water	4:9	0:0	2	,
decl	4:4	4:28	2	int	i_selected
water	4:21	0:0	2	,
decl	4:4	4:28	2	int	i_err
decl	5:4	5:32	2	unsigned int	i_last_byterate
decl	6:4	6:18	2	uint16_t	i_tag
decl	7:4	7:27	2	DMO_MEDIA_TYPE	dmo_type
decl	8:4	8:22	2	WAVEFORMATEX	*p_wf
call	10:4	10:53	2	fourcc_to_wf_tag
arg	10:22	10:44	3	p_enc->fmt_out.i_codec
water	10:22	0:0	4	p_enc
op	10:27	0:0	4	->
water	10:29	0:0	4	fmt_out
op	10:36	0:0	4	.
water	10:37	0:0	4	i_codec
arg	10:46	10:53	3	&i_tag
op	10:46	0:0	4	&
water	10:47	0:0	4	i_tag
water	10:54	0:0	2	;
if	11:4	11:40	2	(i_tag == 0)
cond	11:8	11:17	3	i_tag == 0
water	11:8	0:0	4	i_tag
op	11:14	0:0	4	==
water	11:17	0:0	4	0
stmts	11:21	11:40	3	
return	11:21	11:40	4	VLC_EGENERIC
water	11:28	0:0	5	VLC_EGENERIC
water	12:4	0:0	2	p_enc
op	12:9	0:0	2	->
water	12:11	0:0	2	fmt_in
op	12:17	0:0	2	.
water	12:18	0:0	2	i_codec
op	12:26	0:0	2	=
water	12:28	0:0	2	VLC_CODEC_S16N
water	12:42	0:0	2	;
water	13:4	0:0	2	p_enc
op	13:9	0:0	2	->
water	13:11	0:0	2	fmt_in
op	13:17	0:0	2	.
water	13:18	0:0	2	audio
op	13:23	0:0	2	.
water	13:24	0:0	2	i_bitspersample
op	13:40	0:0	2	=
water	13:42	0:0	2	16
water	13:44	0:0	2	;
water	16:4	0:0	2	i
op	16:6	0:0	2	=
water	16:8	0:0	2	0
water	16:9	0:0	2	;
water	16:11	0:0	2	i_selected
op	16:22	0:0	2	=
op	16:24	0:0	2	-
water	16:25	0:0	2	1
water	16:26	0:0	2	;
water	16:28	0:0	2	i_last_byterate
op	16:44	0:0	2	=
water	16:46	0:0	2	0
water	16:47	0:0	2	;
while	17:4	41:4	2	(!p_dmo -> vt -> GetOutputType (p_dmo ,0 ,i ++ ,& dmo_type ))
cond	17:11	17:63	3	!p_dmo -> vt -> GetOutputType (p_dmo ,0 ,i ++ ,& dmo_type )
op	17:11	0:0	4	!
call	17:12	17:63	4	p_dmo->vt->GetOutputType
arg	17:38	17:43	5	p_dmo
water	17:38	0:0	6	p_dmo
arg	17:45	17:46	5	0
water	17:45	0:0	6	0
arg	17:48	17:51	5	i++
water	17:48	0:0	6	i
op	17:49	0:0	6	++
arg	17:53	17:63	5	&dmo_type
op	17:53	0:0	6	&
water	17:54	0:0	6	dmo_type
stmts	18:4	41:4	3	
water	18:4	0:0	4	{
water	19:8	0:0	4	p_wf
op	19:13	0:0	4	=
water	19:15	0:0	4	(
water	19:16	0:0	4	WAVEFORMATEX
op	19:29	0:0	4	*
water	19:30	0:0	4	)
water	19:31	0:0	4	dmo_type
op	19:39	0:0	4	.
water	19:40	0:0	4	pbFormat
water	19:48	0:0	4	;
call	20:8	24:72	4	msg_Dbg
arg	20:17	20:22	5	p_enc
water	20:17	0:0	6	p_enc
arg	20:24	21:67	5	"available format :%i, sample rate: %i, channels: %i, ""bits per sample: %i, bitrate: %i, blockalign: %i"
water	20:24	0:0	6	"available format :%i, sample rate: %i, channels: %i, "
water	21:17	0:0	6	"bits per sample: %i, bitrate: %i, blockalign: %i"
arg	22:17	22:39	5	(int)p_wf->wFormatTag
water	22:17	0:0	6	(
water	22:18	0:0	6	int
water	22:21	0:0	6	)
water	22:23	0:0	6	p_wf
op	22:27	0:0	6	->
water	22:29	0:0	6	wFormatTag
arg	22:41	22:66	5	(int)p_wf->nSamplesPerSec
water	22:41	0:0	6	(
water	22:42	0:0	6	int
water	22:45	0:0	6	)
water	22:46	0:0	6	p_wf
op	22:50	0:0	6	->
water	22:52	0:0	6	nSamplesPerSec
arg	23:17	23:37	5	(int)p_wf->nChannels
water	23:17	0:0	6	(
water	23:18	0:0	6	int
water	23:21	0:0	6	)
water	23:22	0:0	6	p_wf
op	23:26	0:0	6	->
water	23:28	0:0	6	nChannels
arg	23:39	23:64	5	(int)p_wf->wBitsPerSample
water	23:39	0:0	6	(
water	23:40	0:0	6	int
water	23:43	0:0	6	)
water	23:44	0:0	6	p_wf
op	23:48	0:0	6	->
water	23:50	0:0	6	wBitsPerSample
arg	24:17	24:47	5	(int)p_wf->nAvgBytesPerSec*8
water	24:17	0:0	6	(
water	24:18	0:0	6	int
water	24:21	0:0	6	)
water	24:22	0:0	6	p_wf
op	24:26	0:0	6	->
water	24:28	0:0	6	nAvgBytesPerSec
op	24:44	0:0	6	*
water	24:46	0:0	6	8
arg	24:49	24:72	5	(int)p_wf->nBlockAlign
water	24:49	0:0	6	(
water	24:50	0:0	6	int
water	24:53	0:0	6	)
water	24:54	0:0	6	p_wf
op	24:58	0:0	6	->
water	24:60	0:0	6	nBlockAlign
water	24:73	0:0	4	;
if	25:8	39:8	4	(p_wf -> wFormatTag == i_tag && p_wf -> nSamplesPerSec == p_enc -> fmt_in . audio . i_rate && p_wf -> nChannels == p_enc -> fmt_in . audio . i_channels && p_wf -> wBitsPerSample == p_enc -> fmt_in . audio . i_bitspersample)
cond	25:12	28:56	5	p_wf -> wFormatTag == i_tag && p_wf -> nSamplesPerSec == p_enc -> fmt_in . audio . i_rate && p_wf -> nChannels == p_enc -> fmt_in . audio . i_channels && p_wf -> wBitsPerSample == p_enc -> fmt_in . audio . i_bitspersample
water	25:12	0:0	6	p_wf
op	25:16	0:0	6	->
water	25:18	0:0	6	wFormatTag
op	25:29	0:0	6	==
water	25:32	0:0	6	i_tag
op	25:38	0:0	6	&&
water	26:12	0:0	6	p_wf
op	26:16	0:0	6	->
water	26:18	0:0	6	nSamplesPerSec
op	26:33	0:0	6	==
water	26:36	0:0	6	p_enc
op	26:41	0:0	6	->
water	26:43	0:0	6	fmt_in
op	26:49	0:0	6	.
water	26:50	0:0	6	audio
op	26:55	0:0	6	.
water	26:56	0:0	6	i_rate
op	26:63	0:0	6	&&
water	27:12	0:0	6	p_wf
op	27:16	0:0	6	->
water	27:18	0:0	6	nChannels
op	27:28	0:0	6	==
water	27:31	0:0	6	p_enc
op	27:36	0:0	6	->
water	27:38	0:0	6	fmt_in
op	27:44	0:0	6	.
water	27:45	0:0	6	audio
op	27:50	0:0	6	.
water	27:51	0:0	6	i_channels
op	27:62	0:0	6	&&
water	28:12	0:0	6	p_wf
op	28:16	0:0	6	->
water	28:18	0:0	6	wBitsPerSample
op	28:33	0:0	6	==
water	28:36	0:0	6	p_enc
op	28:41	0:0	6	->
water	28:43	0:0	6	fmt_in
op	28:49	0:0	6	.
water	28:50	0:0	6	audio
op	28:55	0:0	6	.
water	28:56	0:0	6	i_bitspersample
stmts	29:8	39:8	5	
water	29:8	0:0	6	{
if	30:12	38:12	6	(p_wf -> nAvgBytesPerSec < p_enc -> fmt_out . i_bitrate * 110 / 800 && p_wf -> nAvgBytesPerSec > i_last_byterate)
cond	30:16	32:40	7	p_wf -> nAvgBytesPerSec < p_enc -> fmt_out . i_bitrate * 110 / 800 && p_wf -> nAvgBytesPerSec > i_last_byterate
water	30:16	0:0	8	p_wf
op	30:20	0:0	8	->
water	30:22	0:0	8	nAvgBytesPerSec
op	30:38	0:0	8	<
water	31:16	0:0	8	p_enc
op	31:21	0:0	8	->
water	31:23	0:0	8	fmt_out
op	31:30	0:0	8	.
water	31:31	0:0	8	i_bitrate
op	31:41	0:0	8	*
water	31:43	0:0	8	110
op	31:47	0:0	8	/
water	31:49	0:0	8	800
op	31:65	0:0	8	&&
water	32:16	0:0	8	p_wf
op	32:20	0:0	8	->
water	32:22	0:0	8	nAvgBytesPerSec
op	32:38	0:0	8	>
water	32:40	0:0	8	i_last_byterate
stmts	33:12	38:12	7	
water	33:12	0:0	8	{
water	34:16	0:0	8	i_selected
op	34:27	0:0	8	=
water	34:29	0:0	8	i
op	34:31	0:0	8	-
water	34:33	0:0	8	1
water	34:34	0:0	8	;
water	35:16	0:0	8	i_last_byterate
op	35:32	0:0	8	=
water	35:34	0:0	8	p_wf
op	35:38	0:0	8	->
water	35:40	0:0	8	nAvgBytesPerSec
water	35:55	0:0	8	;
call	36:16	37:63	8	msg_Dbg
arg	36:25	36:30	9	p_enc
water	36:25	0:0	10	p_enc
arg	36:32	36:65	9	"selected entry %i (bitrate: %i)"
water	36:32	0:0	10	"selected entry %i (bitrate: %i)"
arg	37:25	37:35	9	i_selected
water	37:25	0:0	10	i_selected
arg	37:37	37:63	9	p_wf->nAvgBytesPerSec*8
water	37:37	0:0	10	p_wf
op	37:41	0:0	10	->
water	37:43	0:0	10	nAvgBytesPerSec
op	37:59	0:0	10	*
water	37:61	0:0	10	8
water	37:64	0:0	8	;
water	38:12	0:0	8	}
water	39:8	0:0	6	}
call	40:8	40:36	4	DMOFreeMediaType
arg	40:26	40:36	5	&dmo_type
op	40:26	0:0	6	&
water	40:27	0:0	6	dmo_type
water	40:37	0:0	4	;
water	41:4	0:0	4	}
if	42:4	46:4	2	(i_selected < 0)
cond	42:8	42:21	3	i_selected < 0
water	42:8	0:0	4	i_selected
op	42:19	0:0	4	<
water	42:21	0:0	4	0
stmts	43:4	46:4	3	
water	43:4	0:0	4	{
call	44:8	44:58	4	msg_Err
arg	44:17	44:22	5	p_enc
water	44:17	0:0	6	p_enc
arg	44:24	44:58	5	"couldn't find a matching output"
water	44:24	0:0	6	"couldn't find a matching output"
water	44:59	0:0	4	;
return	45:8	45:27	4	VLC_EGENERIC
water	45:15	0:0	5	VLC_EGENERIC
water	46:4	0:0	4	}
call	47:4	47:62	2	p_dmo->vt->GetOutputType
arg	47:30	47:35	3	p_dmo
water	47:30	0:0	4	p_dmo
arg	47:37	47:38	3	0
water	47:37	0:0	4	0
arg	47:40	47:50	3	i_selected
water	47:40	0:0	4	i_selected
arg	47:52	47:62	3	&dmo_type
op	47:52	0:0	4	&
water	47:53	0:0	4	dmo_type
water	47:63	0:0	2	;
water	48:4	0:0	2	p_wf
op	48:9	0:0	2	=
water	48:11	0:0	2	(
water	48:12	0:0	2	WAVEFORMATEX
op	48:25	0:0	2	*
water	48:26	0:0	2	)
water	48:27	0:0	2	dmo_type
op	48:35	0:0	2	.
water	48:36	0:0	2	pbFormat
water	48:44	0:0	2	;
call	49:4	53:68	2	msg_Dbg
arg	49:13	49:18	3	p_enc
water	49:13	0:0	4	p_enc
arg	49:20	50:77	3	"selected format: %i, sample rate:%i, ""channels: %i, bits per sample: %i, bitrate: %i, blockalign: %i"
water	49:20	0:0	4	"selected format: %i, sample rate:%i, "
water	50:13	0:0	4	"channels: %i, bits per sample: %i, bitrate: %i, blockalign: %i"
arg	51:13	51:34	3	(int)p_wf->wFormatTag
water	51:13	0:0	4	(
water	51:14	0:0	4	int
water	51:17	0:0	4	)
water	51:18	0:0	4	p_wf
op	51:22	0:0	4	->
water	51:24	0:0	4	wFormatTag
arg	51:36	51:61	3	(int)p_wf->nSamplesPerSec
water	51:36	0:0	4	(
water	51:37	0:0	4	int
water	51:40	0:0	4	)
water	51:41	0:0	4	p_wf
op	51:45	0:0	4	->
water	51:47	0:0	4	nSamplesPerSec
arg	52:13	52:33	3	(int)p_wf->nChannels
water	52:13	0:0	4	(
water	52:14	0:0	4	int
water	52:17	0:0	4	)
water	52:18	0:0	4	p_wf
op	52:22	0:0	4	->
water	52:24	0:0	4	nChannels
arg	52:35	52:60	3	(int)p_wf->wBitsPerSample
water	52:35	0:0	4	(
water	52:36	0:0	4	int
water	52:39	0:0	4	)
water	52:40	0:0	4	p_wf
op	52:44	0:0	4	->
water	52:46	0:0	4	wBitsPerSample
arg	53:13	53:43	3	(int)p_wf->nAvgBytesPerSec*8
water	53:13	0:0	4	(
water	53:14	0:0	4	int
water	53:17	0:0	4	)
water	53:18	0:0	4	p_wf
op	53:22	0:0	4	->
water	53:24	0:0	4	nAvgBytesPerSec
op	53:40	0:0	4	*
water	53:42	0:0	4	8
arg	53:45	53:68	3	(int)p_wf->nBlockAlign
water	53:45	0:0	4	(
water	53:46	0:0	4	int
water	53:49	0:0	4	)
water	53:50	0:0	4	p_wf
op	53:54	0:0	4	->
water	53:56	0:0	4	nBlockAlign
water	53:69	0:0	2	;
water	54:4	0:0	2	p_enc
op	54:9	0:0	2	->
water	54:11	0:0	2	fmt_out
op	54:18	0:0	2	.
water	54:19	0:0	2	audio
op	54:24	0:0	2	.
water	54:25	0:0	2	i_rate
op	54:32	0:0	2	=
water	54:34	0:0	2	p_wf
op	54:38	0:0	2	->
water	54:40	0:0	2	nSamplesPerSec
water	54:54	0:0	2	;
water	55:4	0:0	2	p_enc
op	55:9	0:0	2	->
water	55:11	0:0	2	fmt_out
op	55:18	0:0	2	.
water	55:19	0:0	2	audio
op	55:24	0:0	2	.
water	55:25	0:0	2	i_channels
op	55:36	0:0	2	=
water	55:38	0:0	2	p_wf
op	55:42	0:0	2	->
water	55:44	0:0	2	nChannels
water	55:53	0:0	2	;
water	56:4	0:0	2	p_enc
op	56:9	0:0	2	->
water	56:11	0:0	2	fmt_out
op	56:18	0:0	2	.
water	56:19	0:0	2	audio
op	56:24	0:0	2	.
water	56:25	0:0	2	i_bitspersample
op	56:41	0:0	2	=
water	56:43	0:0	2	p_wf
op	56:47	0:0	2	->
water	56:49	0:0	2	wBitsPerSample
water	56:63	0:0	2	;
water	57:4	0:0	2	p_enc
op	57:9	0:0	2	->
water	57:11	0:0	2	fmt_out
op	57:18	0:0	2	.
water	57:19	0:0	2	audio
op	57:24	0:0	2	.
water	57:25	0:0	2	i_blockalign
op	57:38	0:0	2	=
water	57:40	0:0	2	p_wf
op	57:44	0:0	2	->
water	57:46	0:0	2	nBlockAlign
water	57:57	0:0	2	;
water	58:4	0:0	2	p_enc
op	58:9	0:0	2	->
water	58:11	0:0	2	fmt_out
op	58:18	0:0	2	.
water	58:19	0:0	2	i_bitrate
op	58:29	0:0	2	=
water	58:31	0:0	2	p_wf
op	58:35	0:0	2	->
water	58:37	0:0	2	nAvgBytesPerSec
op	58:53	0:0	2	*
water	58:55	0:0	2	8
water	58:56	0:0	2	;
if	59:4	67:4	2	(p_wf -> cbSize)
cond	59:8	59:14	3	p_wf -> cbSize
water	59:8	0:0	4	p_wf
op	59:12	0:0	4	->
water	59:14	0:0	4	cbSize
stmts	60:4	67:4	3	
water	60:4	0:0	4	{
call	61:8	61:57	4	msg_Dbg
arg	61:17	61:22	5	p_enc
water	61:17	0:0	6	p_enc
arg	61:24	61:42	5	"found cbSize: %i"
water	61:24	0:0	6	"found cbSize: %i"
arg	61:44	61:57	5	p_wf->cbSize
water	61:44	0:0	6	p_wf
op	61:48	0:0	6	->
water	61:50	0:0	6	cbSize
water	61:58	0:0	4	;
water	62:8	0:0	4	p_enc
op	62:13	0:0	4	->
water	62:15	0:0	4	fmt_out
op	62:22	0:0	4	.
water	62:23	0:0	4	i_extra
op	62:31	0:0	4	=
water	62:33	0:0	4	p_wf
op	62:37	0:0	4	->
water	62:39	0:0	4	cbSize
water	62:45	0:0	4	;
water	63:8	0:0	4	p_enc
op	63:13	0:0	4	->
water	63:15	0:0	4	fmt_out
op	63:22	0:0	4	.
water	63:23	0:0	4	p_extra
op	63:31	0:0	4	=
call	63:33	63:64	4	malloc
arg	63:41	63:64	5	p_enc->fmt_out.i_extra
water	63:41	0:0	6	p_enc
op	63:46	0:0	6	->
water	63:48	0:0	6	fmt_out
op	63:55	0:0	6	.
water	63:56	0:0	6	i_extra
water	63:65	0:0	4	;
if	64:8	65:31	4	(p_enc -> fmt_out . p_extra == NULL)
cond	64:12	64:38	5	p_enc -> fmt_out . p_extra == NULL
water	64:12	0:0	6	p_enc
op	64:17	0:0	6	->
water	64:19	0:0	6	fmt_out
op	64:26	0:0	6	.
water	64:27	0:0	6	p_extra
op	64:35	0:0	6	==
water	64:38	0:0	6	NULL
stmts	65:12	65:31	5	
return	65:12	65:31	6	VLC_EGENERIC
water	65:19	0:0	7	VLC_EGENERIC
call	66:8	66:73	4	memcpy
arg	66:16	66:38	5	p_enc->fmt_out.p_extra
water	66:16	0:0	6	p_enc
op	66:21	0:0	6	->
water	66:23	0:0	6	fmt_out
op	66:30	0:0	6	.
water	66:31	0:0	6	p_extra
arg	66:40	66:48	5	&p_wf[1]
op	66:40	0:0	6	&
water	66:41	0:0	6	p_wf
op	66:45	0:0	6	[
water	66:46	0:0	6	1
op	66:47	0:0	6	]
arg	66:50	66:73	5	p_enc->fmt_out.i_extra
water	66:50	0:0	6	p_enc
op	66:55	0:0	6	->
water	66:57	0:0	6	fmt_out
op	66:64	0:0	6	.
water	66:65	0:0	6	i_extra
water	66:74	0:0	4	;
water	67:4	0:0	4	}
water	68:4	0:0	2	i_err
op	68:10	0:0	2	=
call	68:12	68:61	2	p_dmo->vt->SetOutputType
arg	68:38	68:43	3	p_dmo
water	68:38	0:0	4	p_dmo
arg	68:45	68:46	3	0
water	68:45	0:0	4	0
arg	68:48	68:57	3	&dmo_type
op	68:48	0:0	4	&
water	68:49	0:0	4	dmo_type
arg	68:59	68:61	3	0
water	68:59	0:0	4	0
water	68:62	0:0	2	;
call	69:4	69:32	2	DMOFreeMediaType
arg	69:22	69:32	3	&dmo_type
op	69:22	0:0	4	&
water	69:23	0:0	4	dmo_type
water	69:33	0:0	2	;
if	70:4	74:4	2	(i_err)
cond	70:8	70:8	3	i_err
water	70:8	0:0	4	i_err
stmts	71:4	74:4	3	
water	71:4	0:0	4	{
call	72:8	72:63	4	msg_Err
arg	72:17	72:22	5	p_enc
water	72:17	0:0	6	p_enc
arg	72:24	72:55	5	"can't set DMO output type: %i"
water	72:24	0:0	6	"can't set DMO output type: %i"
arg	72:57	72:63	5	i_err
water	72:57	0:0	6	i_err
water	72:64	0:0	4	;
return	73:8	73:27	4	VLC_EGENERIC
water	73:15	0:0	5	VLC_EGENERIC
water	74:4	0:0	4	}
call	75:4	75:51	2	msg_Dbg
arg	75:13	75:18	3	p_enc
water	75:13	0:0	4	p_enc
arg	75:20	75:51	3	"successfully set output type"
water	75:20	0:0	4	"successfully set output type"
water	75:52	0:0	2	;
water	77:4	0:0	2	i
op	77:6	0:0	2	=
water	77:8	0:0	2	0
water	77:9	0:0	2	;
water	77:11	0:0	2	i_selected
op	77:22	0:0	2	=
op	77:24	0:0	2	-
water	77:25	0:0	2	1
water	77:26	0:0	2	;
while	78:4	94:4	2	(!p_dmo -> vt -> GetInputType (p_dmo ,0 ,i ++ ,& dmo_type ))
cond	78:11	78:62	3	!p_dmo -> vt -> GetInputType (p_dmo ,0 ,i ++ ,& dmo_type )
op	78:11	0:0	4	!
call	78:12	78:62	4	p_dmo->vt->GetInputType
arg	78:37	78:42	5	p_dmo
water	78:37	0:0	6	p_dmo
arg	78:44	78:45	5	0
water	78:44	0:0	6	0
arg	78:47	78:50	5	i++
water	78:47	0:0	6	i
op	78:48	0:0	6	++
arg	78:52	78:62	5	&dmo_type
op	78:52	0:0	6	&
water	78:53	0:0	6	dmo_type
stmts	79:4	94:4	3	
water	79:4	0:0	4	{
water	80:8	0:0	4	p_wf
op	80:13	0:0	4	=
water	80:15	0:0	4	(
water	80:16	0:0	4	WAVEFORMATEX
op	80:29	0:0	4	*
water	80:30	0:0	4	)
water	80:31	0:0	4	dmo_type
op	80:39	0:0	4	.
water	80:40	0:0	4	pbFormat
water	80:48	0:0	4	;
call	81:8	85:72	4	msg_Dbg
arg	81:17	81:22	5	p_enc
water	81:17	0:0	6	p_enc
arg	81:24	82:67	5	"available format :%i, sample rate: %i, channels: %i, ""bits per sample: %i, bitrate: %i, blockalign: %i"
water	81:24	0:0	6	"available format :%i, sample rate: %i, channels: %i, "
water	82:17	0:0	6	"bits per sample: %i, bitrate: %i, blockalign: %i"
arg	83:17	83:39	5	(int)p_wf->wFormatTag
water	83:17	0:0	6	(
water	83:18	0:0	6	int
water	83:21	0:0	6	)
water	83:23	0:0	6	p_wf
op	83:27	0:0	6	->
water	83:29	0:0	6	wFormatTag
arg	83:41	83:66	5	(int)p_wf->nSamplesPerSec
water	83:41	0:0	6	(
water	83:42	0:0	6	int
water	83:45	0:0	6	)
water	83:46	0:0	6	p_wf
op	83:50	0:0	6	->
water	83:52	0:0	6	nSamplesPerSec
arg	84:17	84:37	5	(int)p_wf->nChannels
water	84:17	0:0	6	(
water	84:18	0:0	6	int
water	84:21	0:0	6	)
water	84:22	0:0	6	p_wf
op	84:26	0:0	6	->
water	84:28	0:0	6	nChannels
arg	84:39	84:64	5	(int)p_wf->wBitsPerSample
water	84:39	0:0	6	(
water	84:40	0:0	6	int
water	84:43	0:0	6	)
water	84:44	0:0	6	p_wf
op	84:48	0:0	6	->
water	84:50	0:0	6	wBitsPerSample
arg	85:17	85:47	5	(int)p_wf->nAvgBytesPerSec*8
water	85:17	0:0	6	(
water	85:18	0:0	6	int
water	85:21	0:0	6	)
water	85:22	0:0	6	p_wf
op	85:26	0:0	6	->
water	85:28	0:0	6	nAvgBytesPerSec
op	85:44	0:0	6	*
water	85:46	0:0	6	8
arg	85:49	85:72	5	(int)p_wf->nBlockAlign
water	85:49	0:0	6	(
water	85:50	0:0	6	int
water	85:53	0:0	6	)
water	85:54	0:0	6	p_wf
op	85:58	0:0	6	->
water	85:60	0:0	6	nBlockAlign
water	85:73	0:0	4	;
if	86:8	92:8	4	(p_wf -> wFormatTag == WAVE_FORMAT_PCM && p_wf -> nSamplesPerSec == p_enc -> fmt_in . audio . i_rate && p_wf -> nChannels == p_enc -> fmt_in . audio . i_channels && p_wf -> wBitsPerSample == p_enc -> fmt_in . audio . i_bitspersample)
cond	86:12	89:56	5	p_wf -> wFormatTag == WAVE_FORMAT_PCM && p_wf -> nSamplesPerSec == p_enc -> fmt_in . audio . i_rate && p_wf -> nChannels == p_enc -> fmt_in . audio . i_channels && p_wf -> wBitsPerSample == p_enc -> fmt_in . audio . i_bitspersample
water	86:12	0:0	6	p_wf
op	86:16	0:0	6	->
water	86:18	0:0	6	wFormatTag
op	86:29	0:0	6	==
water	86:32	0:0	6	WAVE_FORMAT_PCM
op	86:48	0:0	6	&&
water	87:12	0:0	6	p_wf
op	87:16	0:0	6	->
water	87:18	0:0	6	nSamplesPerSec
op	87:33	0:0	6	==
water	87:36	0:0	6	p_enc
op	87:41	0:0	6	->
water	87:43	0:0	6	fmt_in
op	87:49	0:0	6	.
water	87:50	0:0	6	audio
op	87:55	0:0	6	.
water	87:56	0:0	6	i_rate
op	87:63	0:0	6	&&
water	88:12	0:0	6	p_wf
op	88:16	0:0	6	->
water	88:18	0:0	6	nChannels
op	88:28	0:0	6	==
water	88:31	0:0	6	p_enc
op	88:36	0:0	6	->
water	88:38	0:0	6	fmt_in
op	88:44	0:0	6	.
water	88:45	0:0	6	audio
op	88:50	0:0	6	.
water	88:51	0:0	6	i_channels
op	88:62	0:0	6	&&
water	89:12	0:0	6	p_wf
op	89:16	0:0	6	->
water	89:18	0:0	6	wBitsPerSample
op	89:33	0:0	6	==
water	89:36	0:0	6	p_enc
op	89:41	0:0	6	->
water	89:43	0:0	6	fmt_in
op	89:49	0:0	6	.
water	89:50	0:0	6	audio
op	89:55	0:0	6	.
water	89:56	0:0	6	i_bitspersample
stmts	90:8	92:8	5	
water	90:8	0:0	6	{
water	91:12	0:0	6	i_selected
op	91:23	0:0	6	=
water	91:25	0:0	6	i
op	91:27	0:0	6	-
water	91:29	0:0	6	1
water	91:30	0:0	6	;
water	92:8	0:0	6	}
call	93:8	93:36	4	DMOFreeMediaType
arg	93:26	93:36	5	&dmo_type
op	93:26	0:0	6	&
water	93:27	0:0	6	dmo_type
water	93:37	0:0	4	;
water	94:4	0:0	4	}
if	95:4	99:4	2	(i_selected < 0)
cond	95:8	95:21	3	i_selected < 0
water	95:8	0:0	4	i_selected
op	95:19	0:0	4	<
water	95:21	0:0	4	0
stmts	96:4	99:4	3	
water	96:4	0:0	4	{
call	97:8	97:57	4	msg_Err
arg	97:17	97:22	5	p_enc
water	97:17	0:0	6	p_enc
arg	97:24	97:57	5	"couldn't find a matching input"
water	97:24	0:0	6	"couldn't find a matching input"
water	97:58	0:0	4	;
return	98:8	98:27	4	VLC_EGENERIC
water	98:15	0:0	5	VLC_EGENERIC
water	99:4	0:0	4	}
call	100:4	100:61	2	p_dmo->vt->GetInputType
arg	100:29	100:34	3	p_dmo
water	100:29	0:0	4	p_dmo
arg	100:36	100:37	3	0
water	100:36	0:0	4	0
arg	100:39	100:49	3	i_selected
water	100:39	0:0	4	i_selected
arg	100:51	100:61	3	&dmo_type
op	100:51	0:0	4	&
water	100:52	0:0	4	dmo_type
water	100:62	0:0	2	;
water	101:4	0:0	2	i_err
op	101:10	0:0	2	=
call	101:12	101:60	2	p_dmo->vt->SetInputType
arg	101:37	101:42	3	p_dmo
water	101:37	0:0	4	p_dmo
arg	101:44	101:45	3	0
water	101:44	0:0	4	0
arg	101:47	101:56	3	&dmo_type
op	101:47	0:0	4	&
water	101:48	0:0	4	dmo_type
arg	101:58	101:60	3	0
water	101:58	0:0	4	0
water	101:61	0:0	2	;
call	102:4	102:32	2	DMOFreeMediaType
arg	102:22	102:32	3	&dmo_type
op	102:22	0:0	4	&
water	102:23	0:0	4	dmo_type
water	102:33	0:0	2	;
if	103:4	107:4	2	(i_err)
cond	103:8	103:8	3	i_err
water	103:8	0:0	4	i_err
stmts	104:4	107:4	3	
water	104:4	0:0	4	{
call	105:8	105:64	4	msg_Err
arg	105:17	105:22	5	p_enc
water	105:17	0:0	6	p_enc
arg	105:24	105:56	5	"can't set DMO input type: 0x%x"
water	105:24	0:0	6	"can't set DMO input type: 0x%x"
arg	105:58	105:64	5	i_err
water	105:58	0:0	6	i_err
water	105:65	0:0	4	;
return	106:8	106:27	4	VLC_EGENERIC
water	106:15	0:0	5	VLC_EGENERIC
water	107:4	0:0	4	}
call	108:4	108:50	2	msg_Dbg
arg	108:13	108:18	3	p_enc
water	108:13	0:0	4	p_enc
arg	108:20	108:50	3	"successfully set input type"
water	108:20	0:0	4	"successfully set input type"
water	108:51	0:0	2	;
return	109:4	109:22	2	VLC_SUCCESS
water	109:11	0:0	3	VLC_SUCCESS
