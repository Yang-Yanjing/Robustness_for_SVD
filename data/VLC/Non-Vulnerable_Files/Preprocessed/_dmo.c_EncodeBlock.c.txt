func	2:0	133:0	0	static block_t *	EncodeBlock
params	2:27	0:0	1	
param	2:29	2:45	2	encoder_t *	p_enc
param	2:47	2:60	2	void *	p_data
stmnts	0:0	132:4	1	
decl	4:4	4:39	2	encoder_sys_t	*p_sys
op	4:25	0:0	2	=
water	4:27	0:0	2	p_enc
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:22	2	CMediaBuffer	*p_in
decl	6:4	6:27	2	block_t	*p_chain
op	6:21	0:0	2	=
water	6:23	0:0	2	NULL
decl	7:4	7:23	2	block_t	*p_block_in
decl	8:4	8:21	2	uint32_t	i_status
decl	9:4	9:16	2	int	i_result
decl	10:4	10:17	2	mtime_t	i_pts
if	11:4	11:29	2	(! p_data)
cond	11:8	11:9	3	! p_data
op	11:8	0:0	4	!
water	11:9	0:0	4	p_data
stmts	11:18	11:29	3	
return	11:18	11:29	4	NULL
water	11:25	0:0	5	NULL
if	12:4	38:4	2	(p_enc -> fmt_out . i_cat == VIDEO_ES)
cond	12:8	12:32	3	p_enc -> fmt_out . i_cat == VIDEO_ES
water	12:8	0:0	4	p_enc
op	12:13	0:0	4	->
water	12:15	0:0	4	fmt_out
op	12:22	0:0	4	.
water	12:23	0:0	4	i_cat
op	12:29	0:0	4	==
water	12:32	0:0	4	VIDEO_ES
stmts	13:4	38:4	3	
water	13:4	0:0	4	{
decl	15:8	15:50	4	int	i_plane
water	15:19	0:0	4	,
decl	15:8	15:50	4	int	i_line
water	15:27	0:0	4	,
decl	15:8	15:50	4	int	i_width
water	15:36	0:0	4	,
decl	15:8	15:50	4	int	i_src_stride
decl	16:8	16:46	4	picture_t	*p_pic
op	16:25	0:0	4	=
water	16:27	0:0	4	(
water	16:28	0:0	4	picture_t
op	16:38	0:0	4	*
water	16:39	0:0	4	)
water	16:40	0:0	4	p_data
decl	17:8	17:22	4	uint8_t	*p_dst
decl	18:8	20:52	4	int	i_buffer
op	18:21	0:0	4	=
water	18:23	0:0	4	p_enc
op	18:28	0:0	4	->
water	18:30	0:0	4	fmt_in
op	18:36	0:0	4	.
water	18:37	0:0	4	video
op	18:42	0:0	4	.
water	18:43	0:0	4	i_visible_width
op	18:59	0:0	4	*
water	19:12	0:0	4	p_enc
op	19:17	0:0	4	->
water	19:19	0:0	4	fmt_in
op	19:25	0:0	4	.
water	19:26	0:0	4	video
op	19:31	0:0	4	.
water	19:32	0:0	4	i_visible_height
op	19:49	0:0	4	*
water	20:12	0:0	4	p_enc
op	20:17	0:0	4	->
water	20:19	0:0	4	fmt_in
op	20:25	0:0	4	.
water	20:26	0:0	4	video
op	20:31	0:0	4	.
water	20:32	0:0	4	i_bits_per_pixel
op	20:49	0:0	4	/
water	20:51	0:0	4	8
water	21:8	0:0	4	p_block_in
op	21:19	0:0	4	=
call	21:21	21:43	4	block_Alloc
arg	21:34	21:43	5	i_buffer
water	21:34	0:0	6	i_buffer
water	21:44	0:0	4	;
water	23:8	0:0	4	p_dst
op	23:14	0:0	4	=
water	23:16	0:0	4	p_block_in
op	23:26	0:0	4	->
water	23:28	0:0	4	p_buffer
water	23:36	0:0	4	;
for	24:8	36:8	4	(i_plane = 0 ;i_plane < p_pic -> i_planes;i_plane ++)
forinit	24:13	24:24	5	i_plane = 0 ;
water	24:13	0:0	6	i_plane
op	24:21	0:0	6	=
water	24:23	0:0	6	0
water	24:24	0:0	6	;
cond	24:26	24:43	5	i_plane < p_pic -> i_planes
water	24:26	0:0	6	i_plane
op	24:34	0:0	6	<
water	24:36	0:0	6	p_pic
op	24:41	0:0	6	->
water	24:43	0:0	6	i_planes
forexpr	24:53	24:60	5	i_plane ++
water	24:53	0:0	6	i_plane
op	24:60	0:0	6	++
stmts	25:8	36:8	5	
water	25:8	0:0	6	{
decl	26:12	26:55	6	uint8_t	*p_src
op	26:27	0:0	6	=
water	26:29	0:0	6	p_pic
op	26:34	0:0	6	->
water	26:36	0:0	6	p
op	26:37	0:0	6	[
water	26:38	0:0	6	i_plane
op	26:45	0:0	6	]
op	26:46	0:0	6	.
water	26:47	0:0	6	p_pixels
water	27:12	0:0	6	i_width
op	27:20	0:0	6	=
water	27:22	0:0	6	p_pic
op	27:27	0:0	6	->
water	27:29	0:0	6	p
op	27:30	0:0	6	[
water	27:31	0:0	6	i_plane
op	27:38	0:0	6	]
op	27:39	0:0	6	.
water	27:40	0:0	6	i_visible_pitch
water	27:55	0:0	6	;
water	28:12	0:0	6	i_src_stride
op	28:25	0:0	6	=
water	28:27	0:0	6	p_pic
op	28:32	0:0	6	->
water	28:34	0:0	6	p
op	28:35	0:0	6	[
water	28:36	0:0	6	i_plane
op	28:43	0:0	6	]
op	28:44	0:0	6	.
water	28:45	0:0	6	i_pitch
water	28:52	0:0	6	;
for	29:12	35:12	6	(i_line = 0 ;i_line < p_pic -> p [ i_plane ] . i_visible_lines;i_line ++)
forinit	29:17	29:27	7	i_line = 0 ;
water	29:17	0:0	8	i_line
op	29:24	0:0	8	=
water	29:26	0:0	8	0
water	29:27	0:0	8	;
cond	29:29	29:56	7	i_line < p_pic -> p [ i_plane ] . i_visible_lines
water	29:29	0:0	8	i_line
op	29:36	0:0	8	<
water	29:38	0:0	8	p_pic
op	29:43	0:0	8	->
water	29:45	0:0	8	p
op	29:46	0:0	8	[
water	29:47	0:0	8	i_plane
op	29:54	0:0	8	]
op	29:55	0:0	8	.
water	29:56	0:0	8	i_visible_lines
forexpr	30:17	30:23	7	i_line ++
water	30:17	0:0	8	i_line
op	30:23	0:0	8	++
stmts	31:12	35:12	7	
water	31:12	0:0	8	{
call	32:16	32:46	8	memcpy
arg	32:24	32:29	9	p_dst
water	32:24	0:0	10	p_dst
arg	32:31	32:36	9	p_src
water	32:31	0:0	10	p_src
arg	32:38	32:46	9	i_width
water	32:38	0:0	10	i_width
water	32:47	0:0	8	;
water	33:16	0:0	8	p_dst
op	33:22	0:0	8	+=
water	33:25	0:0	8	i_width
water	33:32	0:0	8	;
water	34:16	0:0	8	p_src
op	34:22	0:0	8	+=
water	34:25	0:0	8	i_src_stride
water	34:37	0:0	8	;
water	35:12	0:0	8	}
water	36:8	0:0	6	}
water	37:8	0:0	4	i_pts
op	37:14	0:0	4	=
water	37:16	0:0	4	p_pic
op	37:21	0:0	4	->
water	37:23	0:0	4	date
water	37:27	0:0	4	;
water	38:4	0:0	4	}
else	39:4	46:4	2
stmts	40:4	46:4	3	
water	40:4	0:0	4	{
decl	41:8	41:50	4	block_t	*p_aout_buffer
op	41:31	0:0	4	=
water	41:33	0:0	4	(
water	41:34	0:0	4	block_t
op	41:42	0:0	4	*
water	41:43	0:0	4	)
water	41:44	0:0	4	p_data
water	42:8	0:0	4	p_block_in
op	42:19	0:0	4	=
call	42:21	42:58	4	block_Alloc
arg	42:34	42:58	5	p_aout_buffer->i_buffer
water	42:34	0:0	6	p_aout_buffer
op	42:47	0:0	6	->
water	42:49	0:0	6	i_buffer
water	42:59	0:0	4	;
call	43:8	44:37	4	memcpy
arg	43:16	43:36	5	p_block_in->p_buffer
water	43:16	0:0	6	p_block_in
op	43:26	0:0	6	->
water	43:28	0:0	6	p_buffer
arg	43:38	43:61	5	p_aout_buffer->p_buffer
water	43:38	0:0	6	p_aout_buffer
op	43:51	0:0	6	->
water	43:53	0:0	6	p_buffer
arg	44:16	44:37	5	p_block_in->i_buffer
water	44:16	0:0	6	p_block_in
op	44:26	0:0	6	->
water	44:28	0:0	6	i_buffer
water	44:38	0:0	4	;
water	45:8	0:0	4	i_pts
op	45:14	0:0	4	=
water	45:16	0:0	4	p_aout_buffer
op	45:29	0:0	4	->
water	45:31	0:0	4	i_pts
water	45:36	0:0	4	;
water	46:4	0:0	4	}
water	48:4	0:0	2	p_in
op	48:9	0:0	2	=
call	48:11	48:70	2	CMediaBufferCreate
arg	48:31	48:41	3	p_block_in
water	48:31	0:0	4	p_block_in
arg	48:43	48:63	3	p_block_in->i_buffer
water	48:43	0:0	4	p_block_in
op	48:53	0:0	4	->
water	48:55	0:0	4	i_buffer
arg	48:65	48:70	3	true
water	48:65	0:0	4	true
water	48:71	0:0	2	;
water	49:4	0:0	2	i_result
op	49:13	0:0	2	=
call	49:15	50:72	2	p_sys->p_dmo->vt->ProcessInput
arg	49:47	49:59	3	p_sys->p_dmo
water	49:47	0:0	4	p_sys
op	49:52	0:0	4	->
water	49:54	0:0	4	p_dmo
arg	49:61	49:62	3	0
water	49:61	0:0	4	0
arg	50:7	50:27	3	(IMediaBuffer*)p_in
water	50:7	0:0	4	(
water	50:8	0:0	4	IMediaBuffer
op	50:21	0:0	4	*
water	50:22	0:0	4	)
water	50:23	0:0	4	p_in
arg	50:29	50:56	3	DMO_INPUT_DATA_BUFFERF_TIME
water	50:29	0:0	4	DMO_INPUT_DATA_BUFFERF_TIME
arg	50:58	50:68	3	i_pts*10
water	50:58	0:0	4	i_pts
op	50:64	0:0	4	*
water	50:66	0:0	4	10
arg	50:70	50:72	3	0
water	50:70	0:0	4	0
water	50:73	0:0	2	;
call	51:4	51:40	2	p_in->vt->Release
arg	51:23	51:40	3	(IUnknown*)p_in
water	51:23	0:0	4	(
water	51:24	0:0	4	IUnknown
op	51:33	0:0	4	*
water	51:34	0:0	4	)
water	51:35	0:0	4	p_in
water	51:41	0:0	2	;
if	52:4	59:4	2	(i_result == S_FALSE)
cond	52:8	52:20	3	i_result == S_FALSE
water	52:8	0:0	4	i_result
op	52:17	0:0	4	==
water	52:20	0:0	4	S_FALSE
stmts	53:4	59:4	3	
water	53:4	0:0	4	{
call	56:8	56:77	4	msg_Dbg
arg	56:17	56:22	5	p_enc
water	56:17	0:0	6	p_enc
arg	56:24	56:69	5	"ProcessInput(): no output generated %"PRId64
water	56:24	0:0	6	"ProcessInput(): no output generated %"
water	56:63	0:0	6	PRId64
arg	56:71	56:77	5	i_pts
water	56:71	0:0	6	i_pts
water	56:78	0:0	4	;
return	58:8	58:19	4	NULL
water	58:15	0:0	5	NULL
water	59:4	0:0	4	}
else	60:4	64:4	2
stmts	60:9	64:4	3	
if	60:9	64:4	4	(i_result == ( int ) DMO_E_NOTACCEPTING)
cond	60:13	60:30	5	i_result == ( int ) DMO_E_NOTACCEPTING
water	60:13	0:0	6	i_result
op	60:22	0:0	6	==
water	60:25	0:0	6	(
water	60:26	0:0	6	int
water	60:29	0:0	6	)
water	60:30	0:0	6	DMO_E_NOTACCEPTING
stmts	61:4	64:4	5	
water	61:4	0:0	6	{
call	63:8	63:56	6	msg_Dbg
arg	63:17	63:22	7	p_enc
water	63:17	0:0	8	p_enc
arg	63:24	63:56	7	"ProcessInput(): not accepting"
water	63:24	0:0	8	"ProcessInput(): not accepting"
water	63:57	0:0	6	;
water	64:4	0:0	6	}
else	65:4	69:4	2
stmts	65:9	69:4	3	
if	65:9	69:4	4	(i_result != S_OK)
cond	65:13	65:25	5	i_result != S_OK
water	65:13	0:0	6	i_result
op	65:22	0:0	6	!=
water	65:25	0:0	6	S_OK
stmts	66:4	69:4	5	
water	66:4	0:0	6	{
call	67:8	67:63	6	msg_Dbg
arg	67:17	67:22	7	p_enc
water	67:17	0:0	8	p_enc
arg	67:24	67:52	7	"ProcessInput(): failed: %x"
water	67:24	0:0	8	"ProcessInput(): failed: %x"
arg	67:54	67:63	7	i_result
water	67:54	0:0	8	i_result
water	67:64	0:0	6	;
return	68:8	68:19	6	NULL
water	68:15	0:0	7	NULL
water	69:4	0:0	6	}
call	71:4	71:46	2	msg_Dbg
arg	71:13	71:18	3	p_enc
water	71:13	0:0	4	p_enc
arg	71:20	71:46	3	"ProcessInput(): success"
water	71:20	0:0	4	"ProcessInput(): success"
water	71:47	0:0	2	;
while	74:4	132:4	2	(1)
cond	74:11	74:11	3	1
water	74:11	0:0	4	1
stmts	75:4	132:4	3	
water	75:4	0:0	4	{
decl	76:8	76:33	4	DMO_OUTPUT_DATA_BUFFER	db
decl	77:8	77:28	4	block_t	*p_block_out
decl	78:8	78:27	4	CMediaBuffer	*p_out
water	79:8	0:0	4	p_block_out
op	79:20	0:0	4	=
call	79:22	79:55	4	block_Alloc
arg	79:35	79:55	5	p_sys->i_min_output
water	79:35	0:0	6	p_sys
op	79:40	0:0	6	->
water	79:42	0:0	6	i_min_output
water	79:56	0:0	4	;
water	80:8	0:0	4	p_block_out
op	80:19	0:0	4	->
water	80:21	0:0	4	i_buffer
op	80:30	0:0	4	=
water	80:32	0:0	4	0
water	80:33	0:0	4	;
water	81:8	0:0	4	p_out
op	81:14	0:0	4	=
call	81:16	81:74	4	CMediaBufferCreate
arg	81:35	81:46	5	p_block_out
water	81:35	0:0	6	p_block_out
arg	81:48	81:67	5	p_sys->i_min_output
water	81:48	0:0	6	p_sys
op	81:53	0:0	6	->
water	81:55	0:0	6	i_min_output
arg	81:69	81:74	5	false
water	81:69	0:0	6	false
water	81:75	0:0	4	;
call	82:8	82:35	4	memset
arg	82:16	82:19	5	&db
op	82:16	0:0	6	&
water	82:17	0:0	6	db
arg	82:21	82:22	5	0
water	82:21	0:0	6	0
arg	82:24	82:35	5	sizeof(db)
op	82:24	0:0	6	sizeof
water	82:30	0:0	6	(
water	82:31	0:0	6	db
water	82:33	0:0	6	)
water	82:36	0:0	4	;
water	83:8	0:0	4	db
op	83:10	0:0	4	.
water	83:11	0:0	4	pBuffer
op	83:19	0:0	4	=
water	83:21	0:0	4	(
water	83:22	0:0	4	IMediaBuffer
op	83:35	0:0	4	*
water	83:36	0:0	4	)
water	83:37	0:0	4	p_out
water	83:42	0:0	4	;
water	84:8	0:0	4	i_result
op	84:17	0:0	4	=
call	84:19	85:73	4	p_sys->p_dmo->vt->ProcessOutput
arg	84:52	84:64	5	p_sys->p_dmo
water	84:52	0:0	6	p_sys
op	84:57	0:0	6	->
water	84:59	0:0	6	p_dmo
arg	85:52	85:53	5	0
water	85:52	0:0	6	0
arg	85:55	85:56	5	1
water	85:55	0:0	6	1
arg	85:58	85:61	5	&db
op	85:58	0:0	6	&
water	85:59	0:0	6	db
arg	85:63	85:73	5	&i_status
op	85:63	0:0	6	&
water	85:64	0:0	6	i_status
water	85:74	0:0	4	;
if	86:8	97:8	4	(i_result != S_OK)
cond	86:12	86:24	5	i_result != S_OK
water	86:12	0:0	6	i_result
op	86:21	0:0	6	!=
water	86:24	0:0	6	S_OK
stmts	87:8	97:8	5	
water	87:8	0:0	6	{
if	88:12	89:73	6	(i_result != S_FALSE)
cond	88:16	88:28	7	i_result != S_FALSE
water	88:16	0:0	8	i_result
op	88:25	0:0	8	!=
water	88:28	0:0	8	S_FALSE
stmts	89:16	89:73	7	
call	89:16	89:72	8	msg_Dbg
arg	89:25	89:30	9	p_enc
water	89:25	0:0	10	p_enc
arg	89:32	89:61	9	"ProcessOutput(): failed: %x"
water	89:32	0:0	10	"ProcessOutput(): failed: %x"
arg	89:63	89:72	9	i_result
water	89:63	0:0	10	i_result
water	89:73	0:0	8	;
else	91:12	92:62	6
stmts	92:16	92:62	7	
call	92:16	92:61	8	msg_Dbg
arg	92:25	92:30	9	p_enc
water	92:25	0:0	10	p_enc
arg	92:32	92:61	9	"ProcessOutput(): no output"
water	92:32	0:0	10	"ProcessOutput(): no output"
water	92:62	0:0	8	;
call	94:12	94:50	6	p_out->vt->Release
arg	94:32	94:50	7	(IUnknown*)p_out
water	94:32	0:0	8	(
water	94:33	0:0	8	IUnknown
op	94:42	0:0	8	*
water	94:43	0:0	8	)
water	94:44	0:0	8	p_out
water	94:51	0:0	6	;
call	95:12	95:39	6	block_Release
arg	95:27	95:39	7	p_block_out
water	95:27	0:0	8	p_block_out
water	95:40	0:0	6	;
return	96:12	96:26	6	p_chain
water	96:19	0:0	7	p_chain
water	97:8	0:0	6	}
if	98:8	106:8	4	(! p_block_out -> i_buffer)
cond	98:12	98:26	5	! p_block_out -> i_buffer
op	98:12	0:0	6	!
water	98:13	0:0	6	p_block_out
op	98:24	0:0	6	->
water	98:26	0:0	6	i_buffer
stmts	99:8	106:8	5	
water	99:8	0:0	6	{
call	101:12	101:77	6	msg_Dbg
arg	101:21	101:26	7	p_enc
water	101:21	0:0	8	p_enc
arg	101:28	101:77	7	"ProcessOutput(): no output (i_buffer_out == 0)"
water	101:28	0:0	8	"ProcessOutput(): no output (i_buffer_out == 0)"
water	101:78	0:0	6	;
call	103:12	103:50	6	p_out->vt->Release
arg	103:32	103:50	7	(IUnknown*)p_out
water	103:32	0:0	8	(
water	103:33	0:0	8	IUnknown
op	103:42	0:0	8	*
water	103:43	0:0	8	)
water	103:44	0:0	8	p_out
water	103:51	0:0	6	;
call	104:12	104:39	6	block_Release
arg	104:27	104:39	7	p_block_out
water	104:27	0:0	8	p_block_out
water	104:40	0:0	6	;
return	105:12	105:26	6	p_chain
water	105:19	0:0	7	p_chain
water	106:8	0:0	6	}
if	107:8	114:8	4	(db . dwStatus & DMO_OUTPUT_DATA_BUFFERF_TIME)
cond	107:12	107:26	5	db . dwStatus & DMO_OUTPUT_DATA_BUFFERF_TIME
water	107:12	0:0	6	db
op	107:14	0:0	6	.
water	107:15	0:0	6	dwStatus
op	107:24	0:0	6	&
water	107:26	0:0	6	DMO_OUTPUT_DATA_BUFFERF_TIME
stmts	108:8	114:8	5	
water	108:8	0:0	6	{
call	110:12	111:48	6	msg_Dbg
arg	110:21	110:26	7	p_enc
water	110:21	0:0	8	p_enc
arg	110:28	110:70	7	"ProcessOutput(): pts: %"PRId64", %"PRId64
water	110:28	0:0	8	"ProcessOutput(): pts: %"
water	110:53	0:0	8	PRId64
water	110:59	0:0	8	", %"
water	110:64	0:0	8	PRId64
arg	111:21	111:26	7	i_pts
water	111:21	0:0	8	i_pts
arg	111:28	111:48	7	db.rtTimestamp/10
water	111:28	0:0	8	db
op	111:30	0:0	8	.
water	111:31	0:0	8	rtTimestamp
op	111:43	0:0	8	/
water	111:45	0:0	8	10
water	111:49	0:0	6	;
water	113:12	0:0	6	i_pts
op	113:18	0:0	6	=
water	113:20	0:0	6	db
op	113:22	0:0	6	.
water	113:23	0:0	6	rtTimestamp
op	113:35	0:0	6	/
water	113:37	0:0	6	10
water	113:39	0:0	6	;
water	114:8	0:0	6	}
if	115:8	122:8	4	(db . dwStatus & DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH)
cond	115:12	115:26	5	db . dwStatus & DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH
water	115:12	0:0	6	db
op	115:14	0:0	6	.
water	115:15	0:0	6	dwStatus
op	115:24	0:0	6	&
water	115:26	0:0	6	DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH
stmts	116:8	122:8	5	
water	116:8	0:0	6	{
water	117:12	0:0	6	p_block_out
op	117:23	0:0	6	->
water	117:25	0:0	6	i_length
op	117:34	0:0	6	=
water	117:36	0:0	6	db
op	117:38	0:0	6	.
water	117:39	0:0	6	rtTimelength
op	117:52	0:0	6	/
water	117:54	0:0	6	10
water	117:56	0:0	6	;
call	119:12	120:43	6	msg_Dbg
arg	119:21	119:26	7	p_enc
water	119:21	0:0	8	p_enc
arg	119:28	119:62	7	"ProcessOutput(): length: %"PRId64
water	119:28	0:0	8	"ProcessOutput(): length: %"
water	119:56	0:0	8	PRId64
arg	120:21	120:43	7	p_block_out->i_length
water	120:21	0:0	8	p_block_out
op	120:32	0:0	8	->
water	120:34	0:0	8	i_length
water	120:44	0:0	6	;
water	122:8	0:0	6	}
if	123:8	129:8	4	(p_enc -> fmt_out . i_cat == VIDEO_ES)
cond	123:12	123:36	5	p_enc -> fmt_out . i_cat == VIDEO_ES
water	123:12	0:0	6	p_enc
op	123:17	0:0	6	->
water	123:19	0:0	6	fmt_out
op	123:26	0:0	6	.
water	123:27	0:0	6	i_cat
op	123:33	0:0	6	==
water	123:36	0:0	6	VIDEO_ES
stmts	124:8	129:8	5	
water	124:8	0:0	6	{
if	125:12	126:57	6	(db . dwStatus & DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT)
cond	125:16	125:30	7	db . dwStatus & DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT
water	125:16	0:0	8	db
op	125:18	0:0	8	.
water	125:19	0:0	8	dwStatus
op	125:28	0:0	8	&
water	125:30	0:0	8	DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT
stmts	126:16	126:57	7	
water	126:16	0:0	8	p_block_out
op	126:27	0:0	8	->
water	126:29	0:0	8	i_flags
op	126:37	0:0	8	|=
water	126:40	0:0	8	BLOCK_FLAG_TYPE_I
water	126:57	0:0	8	;
else	127:12	128:57	6
stmts	128:16	128:57	7	
water	128:16	0:0	8	p_block_out
op	128:27	0:0	8	->
water	128:29	0:0	8	i_flags
op	128:37	0:0	8	|=
water	128:40	0:0	8	BLOCK_FLAG_TYPE_P
water	128:57	0:0	8	;
water	129:8	0:0	6	}
water	130:8	0:0	4	p_block_out
op	130:19	0:0	4	->
water	130:21	0:0	4	i_dts
op	130:27	0:0	4	=
water	130:29	0:0	4	p_block_out
op	130:40	0:0	4	->
water	130:42	0:0	4	i_pts
op	130:48	0:0	4	=
water	130:50	0:0	4	i_pts
water	130:55	0:0	4	;
call	131:8	131:49	4	block_ChainAppend
arg	131:27	131:35	5	&p_chain
op	131:27	0:0	6	&
water	131:28	0:0	6	p_chain
arg	131:37	131:49	5	p_block_out
water	131:37	0:0	6	p_block_out
water	131:50	0:0	4	;
water	132:4	0:0	4	}
