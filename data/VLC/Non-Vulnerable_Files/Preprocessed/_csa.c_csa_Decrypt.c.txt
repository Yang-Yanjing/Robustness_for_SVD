func	2:0	76:0	0	void	csa_Decrypt
params	2:16	0:0	1	
param	2:18	2:26	2	csa_t *	c
param	2:28	2:40	2	uint8_t *	pkt
param	2:42	2:57	2	int	i_pkt_size
stmnts	0:0	75:4	1	
decl	4:4	4:15	2	uint8_t	*ck
decl	5:4	5:15	2	uint8_t	*kk
decl	6:4	6:39	2	uint8_t	ib[8]
water	6:18	0:0	2	,
decl	6:4	6:39	2	uint8_t	stream[8]
water	6:29	0:0	2	,
decl	6:4	6:39	2	uint8_t	block[8]
decl	7:4	7:28	2	int	i_hdr
water	7:17	0:0	2	,
decl	7:4	7:28	2	int	i_residue
decl	8:4	8:19	2	int	i
water	8:13	0:0	2	,
decl	8:4	8:19	2	int	j
water	8:16	0:0	2	,
decl	8:4	8:19	2	int	n
if	10:4	14:4	2	(( pkt [ 3 ] & 0 x80 ) == 0)
cond	10:8	10:25	3	( pkt [ 3 ] & 0 x80 ) == 0
water	10:8	0:0	4	(
water	10:9	0:0	4	pkt
op	10:12	0:0	4	[
water	10:13	0:0	4	3
op	10:14	0:0	4	]
op	10:15	0:0	4	&
water	10:16	0:0	4	0
water	10:17	0:0	4	x80
water	10:20	0:0	4	)
op	10:22	0:0	4	==
water	10:25	0:0	4	0
stmts	11:4	14:4	3	
water	11:4	0:0	4	{
return	13:8	13:14	4	
water	14:4	0:0	4	}
if	15:4	19:4	2	(pkt [ 3 ] & 0 x40)
cond	15:8	15:16	3	pkt [ 3 ] & 0 x40
water	15:8	0:0	4	pkt
op	15:11	0:0	4	[
water	15:12	0:0	4	3
op	15:13	0:0	4	]
op	15:14	0:0	4	&
water	15:15	0:0	4	0
water	15:16	0:0	4	x40
stmts	16:4	19:4	3	
water	16:4	0:0	4	{
water	17:8	0:0	4	ck
op	17:11	0:0	4	=
water	17:13	0:0	4	c
op	17:14	0:0	4	->
water	17:16	0:0	4	o_ck
water	17:20	0:0	4	;
water	18:8	0:0	4	kk
op	18:11	0:0	4	=
water	18:13	0:0	4	c
op	18:14	0:0	4	->
water	18:16	0:0	4	o_kk
water	18:20	0:0	4	;
water	19:4	0:0	4	}
else	20:4	24:4	2
stmts	21:4	24:4	3	
water	21:4	0:0	4	{
water	22:8	0:0	4	ck
op	22:11	0:0	4	=
water	22:13	0:0	4	c
op	22:14	0:0	4	->
water	22:16	0:0	4	e_ck
water	22:20	0:0	4	;
water	23:8	0:0	4	kk
op	23:11	0:0	4	=
water	23:13	0:0	4	c
op	23:14	0:0	4	->
water	23:16	0:0	4	e_kk
water	23:20	0:0	4	;
water	24:4	0:0	4	}
water	26:4	0:0	2	pkt
op	26:7	0:0	2	[
water	26:8	0:0	2	3
op	26:9	0:0	2	]
op	26:11	0:0	2	&=
water	26:14	0:0	2	0
water	26:15	0:0	2	x3f
water	26:18	0:0	2	;
water	27:4	0:0	2	i_hdr
op	27:10	0:0	2	=
water	27:12	0:0	2	4
water	27:13	0:0	2	;
if	28:4	32:4	2	(pkt [ 3 ] & 0 x20)
cond	28:8	28:16	3	pkt [ 3 ] & 0 x20
water	28:8	0:0	4	pkt
op	28:11	0:0	4	[
water	28:12	0:0	4	3
op	28:13	0:0	4	]
op	28:14	0:0	4	&
water	28:15	0:0	4	0
water	28:16	0:0	4	x20
stmts	29:4	32:4	3	
water	29:4	0:0	4	{
water	31:8	0:0	4	i_hdr
op	31:14	0:0	4	+=
water	31:17	0:0	4	pkt
op	31:20	0:0	4	[
water	31:21	0:0	4	4
op	31:22	0:0	4	]
op	31:24	0:0	4	+
water	31:26	0:0	4	1
water	31:27	0:0	4	;
water	32:4	0:0	4	}
if	33:4	34:14	2	(188 - i_hdr < 8)
cond	33:8	33:22	3	188 - i_hdr < 8
water	33:8	0:0	4	188
op	33:12	0:0	4	-
water	33:14	0:0	4	i_hdr
op	33:20	0:0	4	<
water	33:22	0:0	4	8
stmts	34:8	34:14	3	
return	34:8	34:14	4	
call	36:4	36:48	2	csa_StreamCypher
arg	36:22	36:23	3	c
water	36:22	0:0	4	c
arg	36:25	36:26	3	1
water	36:25	0:0	4	1
arg	36:28	36:30	3	ck
water	36:28	0:0	4	ck
arg	36:32	36:43	3	&pkt[i_hdr]
op	36:32	0:0	4	&
water	36:33	0:0	4	pkt
op	36:36	0:0	4	[
water	36:37	0:0	4	i_hdr
op	36:42	0:0	4	]
arg	36:45	36:48	3	ib
water	36:45	0:0	4	ib
water	36:49	0:0	2	;
water	38:4	0:0	2	n
op	38:6	0:0	2	=
water	38:8	0:0	2	(
water	38:9	0:0	2	i_pkt_size
op	38:20	0:0	2	-
water	38:22	0:0	2	i_hdr
water	38:27	0:0	2	)
op	38:29	0:0	2	/
water	38:31	0:0	2	8
water	38:32	0:0	2	;
if	39:4	40:14	2	(n < 0)
cond	39:8	39:12	3	n < 0
water	39:8	0:0	4	n
op	39:10	0:0	4	<
water	39:12	0:0	4	0
stmts	40:8	40:14	3	
return	40:8	40:14	4	
water	41:4	0:0	2	i_residue
op	41:14	0:0	2	=
water	41:16	0:0	2	(
water	41:17	0:0	2	i_pkt_size
op	41:28	0:0	2	-
water	41:30	0:0	2	i_hdr
water	41:35	0:0	2	)
op	41:37	0:0	2	%
water	41:39	0:0	2	8
water	41:40	0:0	2	;
for	42:4	67:4	2	(i = 1 ;i < n + 1;i ++)
forinit	42:9	42:14	3	i = 1 ;
water	42:9	0:0	4	i
op	42:11	0:0	4	=
water	42:13	0:0	4	1
water	42:14	0:0	4	;
cond	42:16	42:24	3	i < n + 1
water	42:16	0:0	4	i
op	42:18	0:0	4	<
water	42:20	0:0	4	n
op	42:22	0:0	4	+
water	42:24	0:0	4	1
forexpr	42:27	42:28	3	i ++
water	42:27	0:0	4	i
op	42:28	0:0	4	++
stmts	43:4	67:4	3	
water	43:4	0:0	4	{
call	44:8	44:41	4	csa_BlockDecypher
arg	44:27	44:29	5	kk
water	44:27	0:0	6	kk
arg	44:31	44:33	5	ib
water	44:31	0:0	6	ib
arg	44:35	44:41	5	block
water	44:35	0:0	6	block
water	44:42	0:0	4	;
if	45:8	53:8	4	(i != n)
cond	45:12	45:17	5	i != n
water	45:12	0:0	6	i
op	45:14	0:0	6	!=
water	45:17	0:0	6	n
stmts	46:8	53:8	5	
water	46:8	0:0	6	{
call	47:12	47:53	6	csa_StreamCypher
arg	47:30	47:31	7	c
water	47:30	0:0	8	c
arg	47:33	47:34	7	0
water	47:33	0:0	8	0
arg	47:36	47:38	7	ck
water	47:36	0:0	8	ck
arg	47:40	47:44	7	NULL
water	47:40	0:0	8	NULL
arg	47:46	47:53	7	stream
water	47:46	0:0	8	stream
water	47:54	0:0	6	;
for	48:12	52:12	6	(j = 0 ;j < 8;j ++)
forinit	48:17	48:22	7	j = 0 ;
water	48:17	0:0	8	j
op	48:19	0:0	8	=
water	48:21	0:0	8	0
water	48:22	0:0	8	;
cond	48:24	48:28	7	j < 8
water	48:24	0:0	8	j
op	48:26	0:0	8	<
water	48:28	0:0	8	8
forexpr	48:31	48:32	7	j ++
water	48:31	0:0	8	j
op	48:32	0:0	8	++
stmts	49:12	52:12	7	
water	49:12	0:0	8	{
water	51:16	0:0	8	ib
op	51:18	0:0	8	[
water	51:19	0:0	8	j
op	51:20	0:0	8	]
op	51:22	0:0	8	=
water	51:24	0:0	8	pkt
op	51:27	0:0	8	[
water	51:28	0:0	8	i_hdr
op	51:33	0:0	8	+
water	51:34	0:0	8	8
op	51:35	0:0	8	*
water	51:36	0:0	8	i
op	51:37	0:0	8	+
water	51:38	0:0	8	j
op	51:39	0:0	8	]
op	51:41	0:0	8	^
water	51:43	0:0	8	stream
op	51:49	0:0	8	[
water	51:50	0:0	8	j
op	51:51	0:0	8	]
water	51:52	0:0	8	;
water	52:12	0:0	8	}
water	53:8	0:0	6	}
else	54:8	61:8	4
stmts	55:8	61:8	5	
water	55:8	0:0	6	{
for	57:12	60:12	6	(j = 0 ;j < 8;j ++)
forinit	57:17	57:22	7	j = 0 ;
water	57:17	0:0	8	j
op	57:19	0:0	8	=
water	57:21	0:0	8	0
water	57:22	0:0	8	;
cond	57:24	57:28	7	j < 8
water	57:24	0:0	8	j
op	57:26	0:0	8	<
water	57:28	0:0	8	8
forexpr	57:31	57:32	7	j ++
water	57:31	0:0	8	j
op	57:32	0:0	8	++
stmts	58:12	60:12	7	
water	58:12	0:0	8	{
water	59:16	0:0	8	ib
op	59:18	0:0	8	[
water	59:19	0:0	8	j
op	59:20	0:0	8	]
op	59:22	0:0	8	=
water	59:24	0:0	8	0
water	59:25	0:0	8	;
water	60:12	0:0	8	}
water	61:8	0:0	6	}
for	63:8	66:8	4	(j = 0 ;j < 8;j ++)
forinit	63:13	63:18	5	j = 0 ;
water	63:13	0:0	6	j
op	63:15	0:0	6	=
water	63:17	0:0	6	0
water	63:18	0:0	6	;
cond	63:20	63:24	5	j < 8
water	63:20	0:0	6	j
op	63:22	0:0	6	<
water	63:24	0:0	6	8
forexpr	63:27	63:28	5	j ++
water	63:27	0:0	6	j
op	63:28	0:0	6	++
stmts	64:8	66:8	5	
water	64:8	0:0	6	{
water	65:12	0:0	6	pkt
op	65:15	0:0	6	[
water	65:16	0:0	6	i_hdr
op	65:21	0:0	6	+
water	65:22	0:0	6	8
op	65:23	0:0	6	*
water	65:24	0:0	6	(
water	65:25	0:0	6	i
op	65:26	0:0	6	-
water	65:27	0:0	6	1
water	65:28	0:0	6	)
op	65:29	0:0	6	+
water	65:30	0:0	6	j
op	65:31	0:0	6	]
op	65:33	0:0	6	=
water	65:35	0:0	6	ib
op	65:37	0:0	6	[
water	65:38	0:0	6	j
op	65:39	0:0	6	]
op	65:41	0:0	6	^
water	65:43	0:0	6	block
op	65:48	0:0	6	[
water	65:49	0:0	6	j
op	65:50	0:0	6	]
water	65:51	0:0	6	;
water	66:8	0:0	6	}
water	67:4	0:0	4	}
if	68:4	75:4	2	(i_residue > 0)
cond	68:8	68:20	3	i_residue > 0
water	68:8	0:0	4	i_residue
op	68:18	0:0	4	>
water	68:20	0:0	4	0
stmts	69:4	75:4	3	
water	69:4	0:0	4	{
call	70:8	70:49	4	csa_StreamCypher
arg	70:26	70:27	5	c
water	70:26	0:0	6	c
arg	70:29	70:30	5	0
water	70:29	0:0	6	0
arg	70:32	70:34	5	ck
water	70:32	0:0	6	ck
arg	70:36	70:40	5	NULL
water	70:36	0:0	6	NULL
arg	70:42	70:49	5	stream
water	70:42	0:0	6	stream
water	70:50	0:0	4	;
for	71:8	74:8	4	(j = 0 ;j < i_residue;j ++)
forinit	71:13	71:18	5	j = 0 ;
water	71:13	0:0	6	j
op	71:15	0:0	6	=
water	71:17	0:0	6	0
water	71:18	0:0	6	;
cond	71:20	71:24	5	j < i_residue
water	71:20	0:0	6	j
op	71:22	0:0	6	<
water	71:24	0:0	6	i_residue
forexpr	71:35	71:36	5	j ++
water	71:35	0:0	6	j
op	71:36	0:0	6	++
stmts	72:8	74:8	5	
water	72:8	0:0	6	{
water	73:12	0:0	6	pkt
op	73:15	0:0	6	[
water	73:16	0:0	6	i_pkt_size
op	73:27	0:0	6	-
water	73:29	0:0	6	i_residue
op	73:39	0:0	6	+
water	73:41	0:0	6	j
op	73:42	0:0	6	]
op	73:44	0:0	6	^=
water	73:47	0:0	6	stream
op	73:53	0:0	6	[
water	73:54	0:0	6	j
op	73:55	0:0	6	]
water	73:56	0:0	6	;
water	74:8	0:0	6	}
water	75:4	0:0	4	}
