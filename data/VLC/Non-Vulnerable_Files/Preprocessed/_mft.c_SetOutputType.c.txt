func	2:0	98:0	0	static int	SetOutputType
params	2:24	0:0	1	
param	2:25	2:41	2	decoder_t *	p_dec
param	2:43	2:58	2	DWORD	stream_id
param	2:60	2:81	2	IMFMediaType * *	result
stmnts	0:0	97:23	1	
decl	4:4	4:39	2	decoder_sys_t	*p_sys
op	4:25	0:0	2	=
water	4:27	0:0	2	p_dec
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:14	2	HRESULT	hr
op	6:4	0:0	2	*
water	6:5	0:0	2	result
op	6:12	0:0	2	=
water	6:14	0:0	2	NULL
water	6:18	0:0	2	;
decl	7:4	7:42	2	IMFMediaType	*output_media_type
op	7:36	0:0	2	=
water	7:38	0:0	2	NULL
decl	13:4	13:29	2	int	output_type_index
op	13:26	0:0	2	=
water	13:28	0:0	2	0
decl	14:4	14:22	2	bool	found
op	14:15	0:0	2	=
water	14:17	0:0	2	false
for	15:4	49:4	2	( int i = 0 ;! found;++ i)
forinit	0:0	15:18	3	 int i = 0 ;
decl	15:9	15:18	4	int	i
op	15:15	0:0	4	=
water	15:17	0:0	4	0
cond	15:20	15:21	3	! found
op	15:20	0:0	4	!
water	15:21	0:0	4	found
forexpr	15:28	15:30	3	++ i
op	15:28	0:0	4	++
water	15:30	0:0	4	i
stmts	16:4	49:4	3	
water	16:4	0:0	4	{
water	17:8	0:0	4	hr
op	17:11	0:0	4	=
call	17:13	17:93	4	IMFTransform_GetOutputAvailableType
arg	17:49	17:59	5	p_sys->mft
water	17:49	0:0	6	p_sys
op	17:54	0:0	6	->
water	17:56	0:0	6	mft
arg	17:61	17:70	5	stream_id
water	17:61	0:0	6	stream_id
arg	17:72	17:73	5	i
water	17:72	0:0	6	i
arg	17:75	17:93	5	&output_media_type
op	17:75	0:0	6	&
water	17:76	0:0	6	output_media_type
water	17:94	0:0	4	;
if	18:8	19:17	4	(hr == MF_E_NO_MORE_TYPES)
cond	18:12	18:18	5	hr == MF_E_NO_MORE_TYPES
water	18:12	0:0	6	hr
op	18:15	0:0	6	==
water	18:18	0:0	6	MF_E_NO_MORE_TYPES
stmts	19:12	19:17	5	
break	19:12	19:17	6	
else	20:8	24:8	4
stmts	20:13	24:8	5	
if	20:13	24:8	6	(hr == MF_E_TRANSFORM_TYPE_NOT_SET)
cond	20:17	20:23	7	hr == MF_E_TRANSFORM_TYPE_NOT_SET
water	20:17	0:0	8	hr
op	20:20	0:0	8	==
water	20:23	0:0	8	MF_E_TRANSFORM_TYPE_NOT_SET
stmts	21:8	24:8	7	
water	21:8	0:0	8	{
return	23:12	23:30	8	VLC_SUCCESS
water	23:19	0:0	9	VLC_SUCCESS
water	24:8	0:0	8	}
else	25:8	26:22	4
stmts	25:13	26:22	5	
if	25:13	26:22	6	(FAILED (hr ))
cond	25:17	25:26	7	FAILED (hr )
call	25:17	25:26	8	FAILED
arg	25:24	25:26	9	hr
water	25:24	0:0	10	hr
stmts	26:12	26:22	7	
goto	26:12	26:22	8	error
water	26:17	0:0	9	error
decl	27:8	27:20	4	GUID	subtype
water	28:8	0:0	4	hr
op	28:11	0:0	4	=
call	28:13	28:77	4	IMFMediaType_GetGUID
arg	28:34	28:51	5	output_media_type
water	28:34	0:0	6	output_media_type
arg	28:53	28:67	5	&MF_MT_SUBTYPE
op	28:53	0:0	6	&
water	28:54	0:0	6	MF_MT_SUBTYPE
arg	28:69	28:77	5	&subtype
op	28:69	0:0	6	&
water	28:70	0:0	6	subtype
water	28:78	0:0	4	;
if	29:8	30:22	4	(FAILED (hr ))
cond	29:12	29:21	5	FAILED (hr )
call	29:12	29:21	6	FAILED
arg	29:19	29:21	7	hr
water	29:19	0:0	8	hr
stmts	30:12	30:22	5	
goto	30:12	30:22	6	error
water	30:17	0:0	7	error
if	31:8	35:8	4	(p_dec -> fmt_in . i_cat == VIDEO_ES)
cond	31:12	31:35	5	p_dec -> fmt_in . i_cat == VIDEO_ES
water	31:12	0:0	6	p_dec
op	31:17	0:0	6	->
water	31:19	0:0	6	fmt_in
op	31:25	0:0	6	.
water	31:26	0:0	6	i_cat
op	31:32	0:0	6	==
water	31:35	0:0	6	VIDEO_ES
stmts	32:8	35:8	5	
water	32:8	0:0	6	{
if	33:12	34:28	6	(IsEqualGUID (& subtype ,& MFVideoFormat_YV12 ) ||IsEqualGUID (& subtype ,& MFVideoFormat_I420 ))
cond	33:16	33:103	7	IsEqualGUID (& subtype ,& MFVideoFormat_YV12 ) ||IsEqualGUID (& subtype ,& MFVideoFormat_I420 )
call	33:16	33:57	8	IsEqualGUID
arg	33:28	33:36	9	&subtype
op	33:28	0:0	10	&
water	33:29	0:0	10	subtype
arg	33:38	33:57	9	&MFVideoFormat_YV12
op	33:38	0:0	10	&
water	33:39	0:0	10	MFVideoFormat_YV12
op	33:59	0:0	8	||
call	33:62	33:103	8	IsEqualGUID
arg	33:74	33:82	9	&subtype
op	33:74	0:0	10	&
water	33:75	0:0	10	subtype
arg	33:84	33:103	9	&MFVideoFormat_I420
op	33:84	0:0	10	&
water	33:85	0:0	10	MFVideoFormat_I420
stmts	34:16	34:28	7	
water	34:16	0:0	8	found
op	34:22	0:0	8	=
water	34:24	0:0	8	true
water	34:28	0:0	8	;
water	35:8	0:0	6	}
else	36:8	44:8	4
stmts	37:8	44:8	5	
water	37:8	0:0	6	{
decl	38:12	38:34	6	UINT32	bits_per_sample
water	39:12	0:0	6	hr
op	39:15	0:0	6	=
call	39:17	39:105	6	IMFMediaType_GetUINT32
arg	39:40	39:57	7	output_media_type
water	39:40	0:0	8	output_media_type
arg	39:59	39:87	7	&MF_MT_AUDIO_BITS_PER_SAMPLE
op	39:59	0:0	8	&
water	39:60	0:0	8	MF_MT_AUDIO_BITS_PER_SAMPLE
arg	39:89	39:105	7	&bits_per_sample
op	39:89	0:0	8	&
water	39:90	0:0	8	bits_per_sample
water	39:106	0:0	6	;
if	40:12	41:24	6	(FAILED (hr ))
cond	40:16	40:25	7	FAILED (hr )
call	40:16	40:25	8	FAILED
arg	40:23	40:25	9	hr
water	40:23	0:0	10	hr
stmts	41:16	41:24	7	
continue	41:16	41:24	8	
if	42:12	43:28	6	(bits_per_sample == 32 &&IsEqualGUID (& subtype ,& MFAudioFormat_Float ))
cond	42:16	42:83	7	bits_per_sample == 32 &&IsEqualGUID (& subtype ,& MFAudioFormat_Float )
water	42:16	0:0	8	bits_per_sample
op	42:32	0:0	8	==
water	42:35	0:0	8	32
op	42:38	0:0	8	&&
call	42:41	42:83	8	IsEqualGUID
arg	42:53	42:61	9	&subtype
op	42:53	0:0	10	&
water	42:54	0:0	10	subtype
arg	42:63	42:83	9	&MFAudioFormat_Float
op	42:63	0:0	10	&
water	42:64	0:0	10	MFAudioFormat_Float
stmts	43:16	43:28	7	
water	43:16	0:0	8	found
op	43:22	0:0	8	=
water	43:24	0:0	8	true
water	43:28	0:0	8	;
water	44:8	0:0	6	}
if	45:8	46:33	4	(found)
cond	45:12	45:12	5	found
water	45:12	0:0	6	found
stmts	46:12	46:33	5	
water	46:12	0:0	6	output_type_index
op	46:30	0:0	6	=
water	46:32	0:0	6	i
water	46:33	0:0	6	;
call	47:8	47:46	4	IMFMediaType_Release
arg	47:29	47:46	5	output_media_type
water	47:29	0:0	6	output_media_type
water	47:47	0:0	4	;
water	48:8	0:0	4	output_media_type
op	48:26	0:0	4	=
water	48:28	0:0	4	NULL
water	48:32	0:0	4	;
water	49:4	0:0	4	}
water	55:4	0:0	2	hr
op	55:7	0:0	2	=
call	55:9	55:105	2	IMFTransform_GetOutputAvailableType
arg	55:45	55:55	3	p_sys->mft
water	55:45	0:0	4	p_sys
op	55:50	0:0	4	->
water	55:52	0:0	4	mft
arg	55:57	55:66	3	stream_id
water	55:57	0:0	4	stream_id
arg	55:68	55:85	3	output_type_index
water	55:68	0:0	4	output_type_index
arg	55:87	55:105	3	&output_media_type
op	55:87	0:0	4	&
water	55:88	0:0	4	output_media_type
water	55:106	0:0	2	;
if	56:4	57:18	2	(FAILED (hr ))
cond	56:8	56:17	3	FAILED (hr )
call	56:8	56:17	4	FAILED
arg	56:15	56:17	5	hr
water	56:15	0:0	6	hr
stmts	57:8	57:18	3	
goto	57:8	57:18	4	error
water	57:13	0:0	5	error
water	58:4	0:0	2	hr
op	58:7	0:0	2	=
call	58:9	58:79	2	IMFTransform_SetOutputType
arg	58:36	58:46	3	p_sys->mft
water	58:36	0:0	4	p_sys
op	58:41	0:0	4	->
water	58:43	0:0	4	mft
arg	58:48	58:57	3	stream_id
water	58:48	0:0	4	stream_id
arg	58:59	58:76	3	output_media_type
water	58:59	0:0	4	output_media_type
arg	58:78	58:79	3	0
water	58:78	0:0	4	0
water	58:80	0:0	2	;
if	59:4	60:18	2	(FAILED (hr ))
cond	59:8	59:17	3	FAILED (hr )
call	59:8	59:17	4	FAILED
arg	59:15	59:17	5	hr
water	59:15	0:0	6	hr
stmts	60:8	60:18	3	
goto	60:8	60:18	4	error
water	60:13	0:0	5	error
decl	61:4	61:16	2	GUID	subtype
water	62:4	0:0	2	hr
op	62:7	0:0	2	=
call	62:9	62:73	2	IMFMediaType_GetGUID
arg	62:30	62:47	3	output_media_type
water	62:30	0:0	4	output_media_type
arg	62:49	62:63	3	&MF_MT_SUBTYPE
op	62:49	0:0	4	&
water	62:50	0:0	4	MF_MT_SUBTYPE
arg	62:65	62:73	3	&subtype
op	62:65	0:0	4	&
water	62:66	0:0	4	subtype
water	62:74	0:0	2	;
if	63:4	64:18	2	(FAILED (hr ))
cond	63:8	63:17	3	FAILED (hr )
call	63:8	63:17	4	FAILED
arg	63:15	63:17	5	hr
water	63:15	0:0	6	hr
stmts	64:8	64:18	3	
goto	64:8	64:18	4	error
water	64:13	0:0	5	error
if	65:4	69:4	2	(p_dec -> fmt_in . i_cat == VIDEO_ES)
cond	65:8	65:31	3	p_dec -> fmt_in . i_cat == VIDEO_ES
water	65:8	0:0	4	p_dec
op	65:13	0:0	4	->
water	65:15	0:0	4	fmt_in
op	65:21	0:0	4	.
water	65:22	0:0	4	i_cat
op	65:28	0:0	4	==
water	65:31	0:0	4	VIDEO_ES
stmts	66:4	69:4	3	
water	66:4	0:0	4	{
water	67:8	0:0	4	p_dec
op	67:13	0:0	4	->
water	67:15	0:0	4	fmt_out
op	67:22	0:0	4	.
water	67:23	0:0	4	video
op	67:29	0:0	4	=
water	67:31	0:0	4	p_dec
op	67:36	0:0	4	->
water	67:38	0:0	4	fmt_in
op	67:44	0:0	4	.
water	67:45	0:0	4	video
water	67:50	0:0	4	;
water	68:8	0:0	4	p_dec
op	68:13	0:0	4	->
water	68:15	0:0	4	fmt_out
op	68:22	0:0	4	.
water	68:23	0:0	4	i_codec
op	68:31	0:0	4	=
call	68:33	68:87	4	vlc_fourcc_GetCodec
arg	68:53	68:72	5	p_dec->fmt_in.i_cat
water	68:53	0:0	6	p_dec
op	68:58	0:0	6	->
water	68:60	0:0	6	fmt_in
op	68:66	0:0	6	.
water	68:67	0:0	6	i_cat
arg	68:74	68:87	5	subtype.Data1
water	68:74	0:0	6	subtype
op	68:81	0:0	6	.
water	68:82	0:0	6	Data1
water	68:88	0:0	4	;
water	69:4	0:0	4	}
else	70:4	90:4	2
stmts	71:4	90:4	3	
water	71:4	0:0	4	{
water	72:8	0:0	4	p_dec
op	72:13	0:0	4	->
water	72:15	0:0	4	fmt_out
op	72:22	0:0	4	.
water	72:23	0:0	4	audio
op	72:29	0:0	4	=
water	72:31	0:0	4	p_dec
op	72:36	0:0	4	->
water	72:38	0:0	4	fmt_in
op	72:44	0:0	4	.
water	72:45	0:0	4	audio
water	72:50	0:0	4	;
decl	73:8	73:32	4	UINT32	bitspersample
op	73:29	0:0	4	=
water	73:31	0:0	4	0
water	74:8	0:0	4	hr
op	74:11	0:0	4	=
call	74:13	74:99	4	IMFMediaType_GetUINT32
arg	74:36	74:53	5	output_media_type
water	74:36	0:0	6	output_media_type
arg	74:55	74:83	5	&MF_MT_AUDIO_BITS_PER_SAMPLE
op	74:55	0:0	6	&
water	74:56	0:0	6	MF_MT_AUDIO_BITS_PER_SAMPLE
arg	74:85	74:99	5	&bitspersample
op	74:85	0:0	6	&
water	74:86	0:0	6	bitspersample
water	74:100	0:0	4	;
if	75:8	76:64	4	(SUCCEEDED (hr ) && bitspersample)
cond	75:12	75:29	5	SUCCEEDED (hr ) && bitspersample
call	75:12	75:24	6	SUCCEEDED
arg	75:22	75:24	7	hr
water	75:22	0:0	8	hr
op	75:26	0:0	6	&&
water	75:29	0:0	6	bitspersample
stmts	76:12	76:64	5	
water	76:12	0:0	6	p_dec
op	76:17	0:0	6	->
water	76:19	0:0	6	fmt_out
op	76:26	0:0	6	.
water	76:27	0:0	6	audio
op	76:32	0:0	6	.
water	76:33	0:0	6	i_bitspersample
op	76:49	0:0	6	=
water	76:51	0:0	6	bitspersample
water	76:64	0:0	6	;
decl	77:8	77:27	4	UINT32	channels
op	77:24	0:0	4	=
water	77:26	0:0	4	0
water	78:8	0:0	4	hr
op	78:11	0:0	4	=
call	78:13	78:91	4	IMFMediaType_GetUINT32
arg	78:36	78:53	5	output_media_type
water	78:36	0:0	6	output_media_type
arg	78:55	78:80	5	&MF_MT_AUDIO_NUM_CHANNELS
op	78:55	0:0	6	&
water	78:56	0:0	6	MF_MT_AUDIO_NUM_CHANNELS
arg	78:82	78:91	5	&channels
op	78:82	0:0	6	&
water	78:83	0:0	6	channels
water	78:92	0:0	4	;
if	79:8	80:54	4	(SUCCEEDED (hr ) && channels)
cond	79:12	79:29	5	SUCCEEDED (hr ) && channels
call	79:12	79:24	6	SUCCEEDED
arg	79:22	79:24	7	hr
water	79:22	0:0	8	hr
op	79:26	0:0	6	&&
water	79:29	0:0	6	channels
stmts	80:12	80:54	5	
water	80:12	0:0	6	p_dec
op	80:17	0:0	6	->
water	80:19	0:0	6	fmt_out
op	80:26	0:0	6	.
water	80:27	0:0	6	audio
op	80:32	0:0	6	.
water	80:33	0:0	6	i_channels
op	80:44	0:0	6	=
water	80:46	0:0	6	channels
water	80:54	0:0	6	;
decl	81:8	81:23	4	UINT32	rate
op	81:20	0:0	4	=
water	81:22	0:0	4	0
water	82:8	0:0	4	hr
op	82:11	0:0	4	=
call	82:13	82:93	4	IMFMediaType_GetUINT32
arg	82:36	82:53	5	output_media_type
water	82:36	0:0	6	output_media_type
arg	82:55	82:86	5	&MF_MT_AUDIO_SAMPLES_PER_SECOND
op	82:55	0:0	6	&
water	82:56	0:0	6	MF_MT_AUDIO_SAMPLES_PER_SECOND
arg	82:88	82:93	5	&rate
op	82:88	0:0	6	&
water	82:89	0:0	6	rate
water	82:94	0:0	4	;
if	83:8	84:46	4	(SUCCEEDED (hr ) && rate)
cond	83:12	83:29	5	SUCCEEDED (hr ) && rate
call	83:12	83:24	6	SUCCEEDED
arg	83:22	83:24	7	hr
water	83:22	0:0	8	hr
op	83:26	0:0	6	&&
water	83:29	0:0	6	rate
stmts	84:12	84:46	5	
water	84:12	0:0	6	p_dec
op	84:17	0:0	6	->
water	84:19	0:0	6	fmt_out
op	84:26	0:0	6	.
water	84:27	0:0	6	audio
op	84:32	0:0	6	.
water	84:33	0:0	6	i_rate
op	84:40	0:0	6	=
water	84:42	0:0	6	rate
water	84:46	0:0	6	;
decl	85:8	85:27	4	vlc_fourcc_t	fourcc
call	86:8	86:53	4	wf_tag_to_fourcc
arg	86:25	86:38	5	subtype.Data1
water	86:25	0:0	6	subtype
op	86:32	0:0	6	.
water	86:33	0:0	6	Data1
arg	86:40	86:47	5	&fourcc
op	86:40	0:0	6	&
water	86:41	0:0	6	fourcc
arg	86:49	86:53	5	NULL
water	86:49	0:0	6	NULL
water	86:54	0:0	4	;
water	87:8	0:0	4	p_dec
op	87:13	0:0	4	->
water	87:15	0:0	4	fmt_out
op	87:22	0:0	4	.
water	87:23	0:0	4	i_codec
op	87:31	0:0	4	=
call	87:33	87:102	4	vlc_fourcc_GetCodecAudio
arg	87:58	87:64	5	fourcc
water	87:58	0:0	6	fourcc
arg	87:66	87:102	5	p_dec->fmt_out.audio.i_bitspersample
water	87:66	0:0	6	p_dec
op	87:71	0:0	6	->
water	87:73	0:0	6	fmt_out
op	87:80	0:0	6	.
water	87:81	0:0	6	audio
op	87:86	0:0	6	.
water	87:87	0:0	6	i_bitspersample
water	87:103	0:0	4	;
water	88:8	0:0	4	p_dec
op	88:13	0:0	4	->
water	88:15	0:0	4	fmt_out
op	88:22	0:0	4	.
water	88:23	0:0	4	audio
op	88:28	0:0	4	.
water	88:29	0:0	4	i_physical_channels
op	88:49	0:0	4	=
water	88:51	0:0	4	pi_channels_maps
op	88:67	0:0	4	[
water	88:68	0:0	4	p_dec
op	88:73	0:0	4	->
water	88:75	0:0	4	fmt_out
op	88:82	0:0	4	.
water	88:83	0:0	4	audio
op	88:88	0:0	4	.
water	88:89	0:0	4	i_channels
op	88:99	0:0	4	]
water	88:100	0:0	4	;
water	89:8	0:0	4	p_dec
op	89:13	0:0	4	->
water	89:15	0:0	4	fmt_out
op	89:22	0:0	4	.
water	89:23	0:0	4	audio
op	89:28	0:0	4	.
water	89:29	0:0	4	i_original_channels
op	89:49	0:0	4	=
water	89:51	0:0	4	p_dec
op	89:56	0:0	4	->
water	89:58	0:0	4	fmt_out
op	89:65	0:0	4	.
water	89:66	0:0	4	audio
op	89:71	0:0	4	.
water	89:72	0:0	4	i_physical_channels
water	89:91	0:0	4	;
water	90:4	0:0	4	}
op	91:4	0:0	2	*
water	91:5	0:0	2	result
op	91:12	0:0	2	=
water	91:14	0:0	2	output_media_type
water	91:31	0:0	2	;
return	92:4	92:22	2	VLC_SUCCESS
water	92:11	0:0	3	VLC_SUCCESS
label	93:0	93:5	2	error :
call	94:4	94:45	2	msg_Err
arg	94:12	94:17	3	p_dec
water	94:12	0:0	4	p_dec
arg	94:19	94:45	3	"Error in SetOutputType()"
water	94:19	0:0	4	"Error in SetOutputType()"
water	94:46	0:0	2	;
if	95:4	96:47	2	(output_media_type)
cond	95:8	95:8	3	output_media_type
water	95:8	0:0	4	output_media_type
stmts	96:8	96:47	3	
call	96:8	96:46	4	IMFMediaType_Release
arg	96:29	96:46	5	output_media_type
water	96:29	0:0	6	output_media_type
water	96:47	0:0	4	;
return	97:4	97:23	2	VLC_EGENERIC
water	97:11	0:0	3	VLC_EGENERIC
