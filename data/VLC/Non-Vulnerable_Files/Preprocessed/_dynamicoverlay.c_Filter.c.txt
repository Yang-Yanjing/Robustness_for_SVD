func	2:0	199:0	0	static subpicture_t *	Filter
params	2:27	0:0	1	
param	2:29	2:47	2	filter_t *	p_filter
param	2:49	2:62	2	mtime_t	date
stmnts	0:0	198:16	1	
decl	4:4	4:41	2	filter_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	p_filter
op	4:34	0:0	2	->
water	4:36	0:0	2	p_sys
call	6:4	6:33	2	vlc_mutex_lock
arg	6:20	6:33	3	&p_sys->lock
op	6:20	0:0	4	&
water	6:21	0:0	4	p_sys
op	6:26	0:0	4	->
water	6:28	0:0	4	lock
water	6:34	0:0	2	;
if	7:4	20:4	2	(p_sys -> i_inputfd == - 1)
cond	7:8	7:29	3	p_sys -> i_inputfd == - 1
water	7:8	0:0	4	p_sys
op	7:13	0:0	4	->
water	7:15	0:0	4	i_inputfd
op	7:25	0:0	4	==
op	7:28	0:0	4	-
water	7:29	0:0	4	1
stmts	8:4	20:4	3	
water	8:4	0:0	4	{
water	9:8	0:0	4	p_sys
op	9:13	0:0	4	->
water	9:15	0:0	4	i_inputfd
op	9:25	0:0	4	=
call	9:27	9:81	4	vlc_open
arg	9:37	9:57	5	p_sys->psz_inputfile
water	9:37	0:0	6	p_sys
op	9:42	0:0	6	->
water	9:44	0:0	6	psz_inputfile
arg	9:59	9:81	5	O_RDONLY|O_NONBLOCK
water	9:59	0:0	6	O_RDONLY
op	9:68	0:0	6	|
water	9:70	0:0	6	O_NONBLOCK
water	9:82	0:0	4	;
if	10:8	14:8	4	(p_sys -> i_inputfd == - 1)
cond	10:12	10:33	5	p_sys -> i_inputfd == - 1
water	10:12	0:0	6	p_sys
op	10:17	0:0	6	->
water	10:19	0:0	6	i_inputfd
op	10:29	0:0	6	==
op	10:32	0:0	6	-
water	10:33	0:0	6	1
stmts	11:8	14:8	5	
water	11:8	0:0	6	{
call	12:12	13:66	6	msg_Warn
arg	12:22	12:30	7	p_filter
water	12:22	0:0	8	p_filter
arg	12:32	12:68	7	"Failed to grab input file: %s (%s)"
water	12:32	0:0	8	"Failed to grab input file: %s (%s)"
arg	13:22	13:42	7	p_sys->psz_inputfile
water	13:22	0:0	8	p_sys
op	13:27	0:0	8	->
water	13:29	0:0	8	psz_inputfile
arg	13:44	13:66	7	vlc_strerror_c(errno)
call	13:44	13:64	8	vlc_strerror_c
arg	13:59	13:64	9	errno
water	13:59	0:0	10	errno
water	13:67	0:0	6	;
water	14:8	0:0	6	}
else	15:8	19:8	4
stmts	16:8	19:8	5	
water	16:8	0:0	6	{
call	17:12	18:43	6	msg_Info
arg	17:22	17:30	7	p_filter
water	17:22	0:0	8	p_filter
arg	17:32	17:56	7	"Grabbed input file: %s"
water	17:32	0:0	8	"Grabbed input file: %s"
arg	18:22	18:43	7	p_sys->psz_inputfile
water	18:22	0:0	8	p_sys
op	18:27	0:0	8	->
water	18:29	0:0	8	psz_inputfile
water	18:44	0:0	6	;
water	19:8	0:0	6	}
water	20:4	0:0	4	}
if	21:4	38:4	2	(p_sys -> i_outputfd == - 1)
cond	21:8	21:30	3	p_sys -> i_outputfd == - 1
water	21:8	0:0	4	p_sys
op	21:13	0:0	4	->
water	21:15	0:0	4	i_outputfd
op	21:26	0:0	4	==
op	21:29	0:0	4	-
water	21:30	0:0	4	1
stmts	22:4	38:4	3	
water	22:4	0:0	4	{
water	23:8	0:0	4	p_sys
op	23:13	0:0	4	->
water	23:15	0:0	4	i_outputfd
op	23:26	0:0	4	=
call	23:28	24:56	4	vlc_open
arg	23:38	23:59	5	p_sys->psz_outputfile
water	23:38	0:0	6	p_sys
op	23:43	0:0	6	->
water	23:45	0:0	6	psz_outputfile
arg	24:34	24:56	5	O_WRONLY|O_NONBLOCK
water	24:34	0:0	6	O_WRONLY
op	24:43	0:0	6	|
water	24:45	0:0	6	O_NONBLOCK
water	24:57	0:0	4	;
if	25:8	32:8	4	(p_sys -> i_outputfd == - 1)
cond	25:12	25:34	5	p_sys -> i_outputfd == - 1
water	25:12	0:0	6	p_sys
op	25:17	0:0	6	->
water	25:19	0:0	6	i_outputfd
op	25:30	0:0	6	==
op	25:33	0:0	6	-
water	25:34	0:0	6	1
stmts	26:8	32:8	5	
water	26:8	0:0	6	{
if	27:12	31:12	6	(errno != ENXIO)
cond	27:16	27:25	7	errno != ENXIO
water	27:16	0:0	8	errno
op	27:22	0:0	8	!=
water	27:25	0:0	8	ENXIO
stmts	28:12	31:12	7	
water	28:12	0:0	8	{
call	29:16	30:71	8	msg_Warn
arg	29:26	29:34	9	p_filter
water	29:26	0:0	10	p_filter
arg	29:36	29:73	9	"Failed to grab output file: %s (%s)"
water	29:36	0:0	10	"Failed to grab output file: %s (%s)"
arg	30:26	30:47	9	p_sys->psz_outputfile
water	30:26	0:0	10	p_sys
op	30:31	0:0	10	->
water	30:33	0:0	10	psz_outputfile
arg	30:49	30:71	9	vlc_strerror_c(errno)
call	30:49	30:69	10	vlc_strerror_c
arg	30:64	30:69	11	errno
water	30:64	0:0	12	errno
water	30:72	0:0	8	;
water	31:12	0:0	8	}
water	32:8	0:0	6	}
else	33:8	37:8	4
stmts	34:8	37:8	5	
water	34:8	0:0	6	{
call	35:12	36:44	6	msg_Info
arg	35:22	35:30	7	p_filter
water	35:22	0:0	8	p_filter
arg	35:32	35:57	7	"Grabbed output file: %s"
water	35:32	0:0	8	"Grabbed output file: %s"
arg	36:22	36:44	7	p_sys->psz_outputfile
water	36:22	0:0	8	p_sys
op	36:27	0:0	8	->
water	36:29	0:0	8	psz_outputfile
water	36:45	0:0	6	;
water	37:8	0:0	6	}
water	38:4	0:0	4	}
call	39:4	39:35	2	vlc_mutex_unlock
arg	39:22	39:35	3	&p_sys->lock
op	39:22	0:0	4	&
water	39:23	0:0	4	p_sys
op	39:28	0:0	4	->
water	39:30	0:0	4	lock
water	39:36	0:0	2	;
if	41:4	64:4	2	(p_sys -> i_inputfd != - 1)
cond	41:8	41:29	3	p_sys -> i_inputfd != - 1
water	41:8	0:0	4	p_sys
op	41:13	0:0	4	->
water	41:15	0:0	4	i_inputfd
op	41:25	0:0	4	!=
op	41:28	0:0	4	-
water	41:29	0:0	4	1
stmts	42:4	64:4	3	
water	42:4	0:0	4	{
decl	43:8	43:27	4	char	p_buffer[1024]
decl	44:8	44:64	4	ssize_t	i_len
op	44:22	0:0	4	=
call	44:24	44:63	5	read
arg	44:30	44:46	6	p_sys->i_inputfd
water	44:30	0:0	7	p_sys
op	44:35	0:0	7	->
water	44:37	0:0	7	i_inputfd
arg	44:48	44:56	6	p_buffer
water	44:48	0:0	7	p_buffer
arg	44:58	44:63	6	1024
water	44:58	0:0	7	1024
if	45:8	55:8	4	(i_len == - 1)
cond	45:12	45:22	5	i_len == - 1
water	45:12	0:0	6	i_len
op	45:18	0:0	6	==
op	45:21	0:0	6	-
water	45:22	0:0	6	1
stmts	46:8	55:8	5	
water	46:8	0:0	6	{
if	48:12	54:12	6	(errno != EAGAIN)
cond	48:16	48:25	7	errno != EAGAIN
water	48:16	0:0	8	errno
op	48:22	0:0	8	!=
water	48:25	0:0	8	EAGAIN
stmts	49:12	54:12	7	
water	49:12	0:0	8	{
call	50:16	51:48	8	msg_Warn
arg	50:26	50:34	9	p_filter
water	50:26	0:0	10	p_filter
arg	50:36	50:61	9	"Error on input file: %s"
water	50:36	0:0	10	"Error on input file: %s"
arg	51:26	51:48	9	vlc_strerror_c(errno)
call	51:26	51:46	10	vlc_strerror_c
arg	51:41	51:46	11	errno
water	51:41	0:0	12	errno
water	51:49	0:0	8	;
call	52:16	52:40	8	close
arg	52:23	52:40	9	p_sys->i_inputfd
water	52:23	0:0	10	p_sys
op	52:28	0:0	10	->
water	52:30	0:0	10	i_inputfd
water	52:41	0:0	8	;
water	53:16	0:0	8	p_sys
op	53:21	0:0	8	->
water	53:23	0:0	8	i_inputfd
op	53:33	0:0	8	=
op	53:35	0:0	8	-
water	53:36	0:0	8	1
water	53:37	0:0	8	;
water	54:12	0:0	8	}
water	55:8	0:0	6	}
else	56:8	59:8	4
stmts	56:13	59:8	5	
if	56:13	59:8	6	(i_len == 0)
cond	56:17	56:26	7	i_len == 0
water	56:17	0:0	8	i_len
op	56:23	0:0	8	==
water	56:26	0:0	8	0
stmts	57:8	59:8	7	
water	57:8	0:0	8	{
water	0:0	0:0	8	STATEMENTS
water	59:8	0:0	8	}
else	60:8	63:8	4
stmts	61:8	63:8	5	
water	61:8	0:0	6	{
call	62:12	62:54	6	BufferAdd
arg	62:23	62:36	7	&p_sys->input
op	62:23	0:0	8	&
water	62:24	0:0	8	p_sys
op	62:29	0:0	8	->
water	62:31	0:0	8	input
arg	62:38	62:46	7	p_buffer
water	62:38	0:0	8	p_buffer
arg	62:48	62:54	7	i_len
water	62:48	0:0	8	i_len
water	62:55	0:0	6	;
water	63:8	0:0	6	}
water	64:4	0:0	4	}
decl	66:4	66:23	2	char	*p_end
water	66:15	0:0	2	,
decl	66:4	66:23	2	char	*p_cmd
while	67:4	108:4	2	(( p_end =memchr (p_sys -> input . p_begin ,'\n' ,p_sys -> input . i_length ) ))
cond	67:11	68:53	3	( p_end =memchr (p_sys -> input . p_begin ,'\n' ,p_sys -> input . i_length ) )
water	67:11	0:0	4	(
water	67:13	0:0	4	p_end
op	67:19	0:0	4	=
call	67:21	68:51	4	memchr
arg	67:29	67:49	5	p_sys->input.p_begin
water	67:29	0:0	6	p_sys
op	67:34	0:0	6	->
water	67:36	0:0	6	input
op	67:41	0:0	6	.
water	67:42	0:0	6	p_begin
arg	67:51	67:55	5	'\n'
water	67:51	0:0	6	'\n'
arg	68:29	68:51	5	p_sys->input.i_length
water	68:29	0:0	6	p_sys
op	68:34	0:0	6	->
water	68:36	0:0	6	input
op	68:41	0:0	6	.
water	68:42	0:0	6	i_length
water	68:53	0:0	4	)
stmts	69:4	108:4	3	
water	69:4	0:0	4	{
decl	70:8	70:35	4	commanddesc_t	*p_cur
op	70:29	0:0	4	=
water	70:31	0:0	4	NULL
decl	71:8	71:28	4	bool	b_found
op	71:21	0:0	4	=
water	71:23	0:0	4	false
decl	72:8	72:26	4	size_t	i_index
op	72:23	0:0	4	=
water	72:25	0:0	4	0
op	73:8	0:0	4	*
water	73:9	0:0	4	p_end
op	73:15	0:0	4	=
water	73:17	0:0	4	'\0'
water	73:21	0:0	4	;
water	74:8	0:0	4	p_cmd
op	74:14	0:0	4	=
call	74:16	74:46	4	BufferGetToken
arg	74:32	74:46	5	&p_sys->input
op	74:32	0:0	6	&
water	74:33	0:0	6	p_sys
op	74:38	0:0	6	->
water	74:40	0:0	6	input
water	74:47	0:0	4	;
call	75:8	75:56	4	msg_Info
arg	75:18	75:26	5	p_filter
water	75:18	0:0	6	p_filter
arg	75:28	75:48	5	"Search command: %s"
water	75:28	0:0	6	"Search command: %s"
arg	75:50	75:56	5	p_cmd
water	75:50	0:0	6	p_cmd
water	75:57	0:0	4	;
for	76:8	85:8	4	(i_index = 0 ;i_index < p_sys -> i_commands;i_index ++)
forinit	76:13	76:24	5	i_index = 0 ;
water	76:13	0:0	6	i_index
op	76:21	0:0	6	=
water	76:23	0:0	6	0
water	76:24	0:0	6	;
cond	76:26	76:43	5	i_index < p_sys -> i_commands
water	76:26	0:0	6	i_index
op	76:34	0:0	6	<
water	76:36	0:0	6	p_sys
op	76:41	0:0	6	->
water	76:43	0:0	6	i_commands
forexpr	76:55	76:62	5	i_index ++
water	76:55	0:0	6	i_index
op	76:62	0:0	6	++
stmts	77:8	85:8	5	
water	77:8	0:0	6	{
water	78:12	0:0	6	p_cur
op	78:18	0:0	6	=
water	78:20	0:0	6	p_sys
op	78:25	0:0	6	->
water	78:27	0:0	6	pp_commands
op	78:38	0:0	6	[
water	78:39	0:0	6	i_index
op	78:46	0:0	6	]
water	78:47	0:0	6	;
if	79:12	84:12	6	(!strncmp (p_cur -> psz_command ,p_cmd ,strlen (p_cur -> psz_command ) ))
cond	79:16	79:80	7	!strncmp (p_cur -> psz_command ,p_cmd ,strlen (p_cur -> psz_command ) )
op	79:16	0:0	8	!
call	79:17	79:80	8	strncmp
arg	79:26	79:44	9	p_cur->psz_command
water	79:26	0:0	10	p_cur
op	79:31	0:0	10	->
water	79:33	0:0	10	psz_command
arg	79:46	79:51	9	p_cmd
water	79:46	0:0	10	p_cmd
arg	79:53	79:80	9	strlen(p_cur->psz_command)
call	79:53	79:78	10	strlen
arg	79:60	79:78	11	p_cur->psz_command
water	79:60	0:0	12	p_cur
op	79:65	0:0	12	->
water	79:67	0:0	12	psz_command
stmts	80:12	84:12	7	
water	80:12	0:0	8	{
water	81:16	0:0	8	p_cmd
op	81:21	0:0	8	[
call	81:22	81:47	8	strlen
arg	81:29	81:47	9	p_cur->psz_command
water	81:29	0:0	10	p_cur
op	81:34	0:0	10	->
water	81:36	0:0	10	psz_command
op	81:48	0:0	8	]
op	81:50	0:0	8	=
water	81:52	0:0	8	'\0'
water	81:56	0:0	8	;
water	82:16	0:0	8	b_found
op	82:24	0:0	8	=
water	82:26	0:0	8	true
water	82:30	0:0	8	;
break	83:16	83:21	8	
water	84:12	0:0	8	}
water	85:8	0:0	6	}
if	86:8	91:8	4	(! b_found)
cond	86:12	86:13	5	! b_found
op	86:12	0:0	6	!
water	86:13	0:0	6	b_found
stmts	87:8	91:8	5	
water	87:8	0:0	6	{
call	89:12	89:64	6	msg_Err
arg	89:21	89:29	7	p_filter
water	89:21	0:0	8	p_filter
arg	89:31	89:56	7	"Got invalid command: %s"
water	89:31	0:0	8	"Got invalid command: %s"
arg	89:58	89:64	7	p_cmd
water	89:58	0:0	8	p_cmd
water	89:65	0:0	6	;
call	90:12	90:88	6	BufferPrintf
arg	90:26	90:40	7	&p_sys->output
op	90:26	0:0	8	&
water	90:27	0:0	8	p_sys
op	90:32	0:0	8	->
water	90:34	0:0	8	output
arg	90:42	90:73	7	"FAILURE: %d Invalid Command\n"
water	90:42	0:0	8	"FAILURE: %d Invalid Command\n"
arg	90:75	90:88	7	VLC_EGENERIC
water	90:75	0:0	8	VLC_EGENERIC
water	90:89	0:0	6	;
water	91:8	0:0	6	}
else	92:8	106:8	4
stmts	93:8	106:8	5	
water	93:8	0:0	6	{
call	94:12	94:63	6	msg_Info
arg	94:22	94:30	7	p_filter
water	94:22	0:0	8	p_filter
arg	94:32	94:55	7	"Got valid command: %s"
water	94:32	0:0	8	"Got valid command: %s"
arg	94:57	94:63	7	p_cmd
water	94:57	0:0	8	p_cmd
water	94:64	0:0	6	;
decl	95:12	95:64	6	command_t	*p_cmddesc
op	95:33	0:0	6	=
call	95:35	95:63	7	malloc
arg	95:43	95:63	8	sizeof(command_t)
op	95:43	0:0	9	sizeof
water	95:49	0:0	9	(
water	95:51	0:0	9	command_t
water	95:61	0:0	9	)
if	96:12	97:27	6	(! p_cmddesc)
cond	96:16	96:17	7	! p_cmddesc
op	96:16	0:0	8	!
water	96:17	0:0	8	p_cmddesc
stmts	97:16	97:27	7	
return	97:16	97:27	8	NULL
water	97:23	0:0	9	NULL
water	98:12	0:0	6	p_cmd
op	98:18	0:0	6	=
water	98:20	0:0	6	p_cmd
op	98:26	0:0	6	+
call	98:28	98:53	6	strlen
arg	98:35	98:53	7	p_cur->psz_command
water	98:35	0:0	8	p_cur
op	98:40	0:0	8	->
water	98:42	0:0	8	psz_command
op	98:55	0:0	6	+
water	98:56	0:0	6	1
water	98:57	0:0	6	;
water	99:12	0:0	6	p_cmddesc
op	99:21	0:0	6	->
water	99:23	0:0	6	p_command
op	99:33	0:0	6	=
water	99:35	0:0	6	p_cur
water	99:40	0:0	6	;
call	100:12	101:64	6	p_cmddesc->p_command->pf_parser
arg	100:45	100:50	7	p_cmd
water	100:45	0:0	8	p_cmd
arg	100:52	100:57	7	p_end
water	100:52	0:0	8	p_end
arg	101:45	101:64	7	&p_cmddesc->params
op	101:45	0:0	8	&
water	101:46	0:0	8	p_cmddesc
op	101:55	0:0	8	->
water	101:57	0:0	8	params
water	101:65	0:0	6	;
if	102:12	103:57	6	(p_cmddesc -> p_command -> b_atomic && p_sys -> b_atomic)
cond	102:16	102:57	7	p_cmddesc -> p_command -> b_atomic && p_sys -> b_atomic
water	102:16	0:0	8	p_cmddesc
op	102:25	0:0	8	->
water	102:27	0:0	8	p_command
op	102:36	0:0	8	->
water	102:38	0:0	8	b_atomic
op	102:47	0:0	8	&&
water	102:50	0:0	8	p_sys
op	102:55	0:0	8	->
water	102:57	0:0	8	b_atomic
stmts	103:16	103:57	7	
call	103:16	103:56	8	QueueEnqueue
arg	103:30	103:44	9	&p_sys->atomic
op	103:30	0:0	10	&
water	103:31	0:0	10	p_sys
op	103:36	0:0	10	->
water	103:38	0:0	10	atomic
arg	103:46	103:56	9	p_cmddesc
water	103:46	0:0	10	p_cmddesc
water	103:57	0:0	8	;
else	104:12	105:58	6
stmts	105:16	105:58	7	
call	105:16	105:57	8	QueueEnqueue
arg	105:30	105:45	9	&p_sys->pending
op	105:30	0:0	10	&
water	105:31	0:0	10	p_sys
op	105:36	0:0	10	->
water	105:38	0:0	10	pending
arg	105:47	105:57	9	p_cmddesc
water	105:47	0:0	10	p_cmddesc
water	105:58	0:0	8	;
water	106:8	0:0	6	}
call	107:8	107:67	4	BufferDel
arg	107:19	107:32	5	&p_sys->input
op	107:19	0:0	6	&
water	107:20	0:0	6	p_sys
op	107:25	0:0	6	->
water	107:27	0:0	6	input
arg	107:34	107:67	5	p_end-p_sys->input.p_begin+1
water	107:34	0:0	6	p_end
op	107:40	0:0	6	-
water	107:42	0:0	6	p_sys
op	107:47	0:0	6	->
water	107:49	0:0	6	input
op	107:54	0:0	6	.
water	107:55	0:0	6	p_begin
op	107:63	0:0	6	+
water	107:65	0:0	6	1
water	107:68	0:0	4	;
water	108:4	0:0	4	}
decl	110:4	110:31	2	command_t	*p_command
op	110:25	0:0	2	=
water	110:27	0:0	2	NULL
while	111:4	117:4	2	(( p_command =QueueDequeue (& p_sys -> pending ) ))
cond	111:11	111:55	3	( p_command =QueueDequeue (& p_sys -> pending ) )
water	111:11	0:0	4	(
water	111:12	0:0	4	p_command
op	111:22	0:0	4	=
call	111:24	111:54	4	QueueDequeue
arg	111:38	111:54	5	&p_sys->pending
op	111:38	0:0	6	&
water	111:39	0:0	6	p_sys
op	111:44	0:0	6	->
water	111:46	0:0	6	pending
water	111:55	0:0	4	)
stmts	112:4	117:4	3	
water	112:4	0:0	4	{
water	113:8	0:0	4	p_command
op	113:17	0:0	4	->
water	113:19	0:0	4	i_status
op	113:28	0:0	4	=
call	114:12	115:66	4	p_command->p_command->pf_execute
arg	114:46	114:54	5	p_filter
water	114:46	0:0	6	p_filter
arg	114:56	114:74	5	&p_command->params
op	114:56	0:0	6	&
water	114:57	0:0	6	p_command
op	114:66	0:0	6	->
water	114:68	0:0	6	params
arg	115:46	115:66	5	&p_command->results
op	115:46	0:0	6	&
water	115:47	0:0	6	p_command
op	115:56	0:0	6	->
water	115:58	0:0	6	results
water	115:67	0:0	4	;
call	116:8	116:51	4	QueueEnqueue
arg	116:22	116:39	5	&p_sys->processed
op	116:22	0:0	6	&
water	116:23	0:0	6	p_sys
op	116:28	0:0	6	->
water	116:30	0:0	6	processed
arg	116:41	116:51	5	p_command
water	116:41	0:0	6	p_command
water	116:52	0:0	4	;
water	117:4	0:0	4	}
while	119:4	135:4	2	(( p_command =QueueDequeue (& p_sys -> processed ) ))
cond	119:11	119:57	3	( p_command =QueueDequeue (& p_sys -> processed ) )
water	119:11	0:0	4	(
water	119:12	0:0	4	p_command
op	119:22	0:0	4	=
call	119:24	119:56	4	QueueDequeue
arg	119:38	119:56	5	&p_sys->processed
op	119:38	0:0	6	&
water	119:39	0:0	6	p_sys
op	119:44	0:0	6	->
water	119:46	0:0	6	processed
water	119:57	0:0	4	)
stmts	120:4	135:4	3	
water	120:4	0:0	4	{
if	121:8	129:8	4	(p_command -> i_status == VLC_SUCCESS)
cond	121:12	121:35	5	p_command -> i_status == VLC_SUCCESS
water	121:12	0:0	6	p_command
op	121:21	0:0	6	->
water	121:23	0:0	6	i_status
op	121:32	0:0	6	==
water	121:35	0:0	6	VLC_SUCCESS
stmts	122:8	129:8	5	
water	122:8	0:0	6	{
decl	123:12	123:48	6	const char	*psz_success
op	123:36	0:0	6	=
water	123:38	0:0	6	"SUCCESS:"
decl	124:12	124:37	6	const char	*psz_nl
op	124:31	0:0	6	=
water	124:33	0:0	6	"\n"
call	125:12	125:54	6	BufferAdd
arg	125:23	125:37	7	&p_sys->output
op	125:23	0:0	8	&
water	125:24	0:0	8	p_sys
op	125:29	0:0	8	->
water	125:31	0:0	8	output
arg	125:39	125:50	7	psz_success
water	125:39	0:0	8	psz_success
arg	125:52	125:54	7	8
water	125:52	0:0	8	8
water	125:55	0:0	6	;
call	126:12	127:61	6	p_command->p_command->pf_unparse
arg	126:46	126:65	7	&p_command->results
op	126:46	0:0	8	&
water	126:47	0:0	8	p_command
op	126:56	0:0	8	->
water	126:58	0:0	8	results
arg	127:46	127:61	7	&p_sys->output
op	127:46	0:0	8	&
water	127:47	0:0	8	p_sys
op	127:52	0:0	8	->
water	127:54	0:0	8	output
water	127:62	0:0	6	;
call	128:12	128:49	6	BufferAdd
arg	128:23	128:37	7	&p_sys->output
op	128:23	0:0	8	&
water	128:24	0:0	8	p_sys
op	128:29	0:0	8	->
water	128:31	0:0	8	output
arg	128:39	128:45	7	psz_nl
water	128:39	0:0	8	psz_nl
arg	128:47	128:49	7	1
water	128:47	0:0	8	1
water	128:50	0:0	6	;
water	129:8	0:0	6	}
else	130:8	134:8	4
stmts	131:8	134:8	5	
water	131:8	0:0	6	{
call	132:12	133:46	6	BufferPrintf
arg	132:26	132:40	7	&p_sys->output
op	132:26	0:0	8	&
water	132:27	0:0	8	p_sys
op	132:32	0:0	8	->
water	132:34	0:0	8	output
arg	132:42	132:57	7	"FAILURE: %d\n"
water	132:42	0:0	8	"FAILURE: %d\n"
arg	133:26	133:46	7	p_command->i_status
water	133:26	0:0	8	p_command
op	133:35	0:0	8	->
water	133:37	0:0	8	i_status
water	133:47	0:0	6	;
water	134:8	0:0	6	}
water	135:4	0:0	4	}
if	137:4	156:4	2	(p_sys -> i_outputfd != - 1)
cond	137:8	137:30	3	p_sys -> i_outputfd != - 1
water	137:8	0:0	4	p_sys
op	137:13	0:0	4	->
water	137:15	0:0	4	i_outputfd
op	137:26	0:0	4	!=
op	137:29	0:0	4	-
water	137:30	0:0	4	1
stmts	138:4	156:4	3	
water	138:4	0:0	4	{
decl	139:8	140:54	4	ssize_t	i_len
op	139:22	0:0	4	=
call	139:24	140:53	5	write
arg	139:31	139:48	6	p_sys->i_outputfd
water	139:31	0:0	7	p_sys
op	139:36	0:0	7	->
water	139:38	0:0	7	i_outputfd
arg	139:50	139:71	6	p_sys->output.p_begin
water	139:50	0:0	7	p_sys
op	139:55	0:0	7	->
water	139:57	0:0	7	output
op	139:63	0:0	7	.
water	139:64	0:0	7	p_begin
arg	140:30	140:53	6	p_sys->output.i_length
water	140:30	0:0	7	p_sys
op	140:35	0:0	7	->
water	140:37	0:0	7	output
op	140:43	0:0	7	.
water	140:44	0:0	7	i_length
if	141:8	151:8	4	(i_len == - 1)
cond	141:12	141:22	5	i_len == - 1
water	141:12	0:0	6	i_len
op	141:18	0:0	6	==
op	141:21	0:0	6	-
water	141:22	0:0	6	1
stmts	142:8	151:8	5	
water	142:8	0:0	6	{
if	144:12	150:12	6	(errno != EAGAIN)
cond	144:16	144:25	7	errno != EAGAIN
water	144:16	0:0	8	errno
op	144:22	0:0	8	!=
water	144:25	0:0	8	EAGAIN
stmts	145:12	150:12	7	
water	145:12	0:0	8	{
call	146:16	147:48	8	msg_Warn
arg	146:26	146:34	9	p_filter
water	146:26	0:0	10	p_filter
arg	146:36	146:62	9	"Error on output file: %s"
water	146:36	0:0	10	"Error on output file: %s"
arg	147:26	147:48	9	vlc_strerror_c(errno)
call	147:26	147:46	10	vlc_strerror_c
arg	147:41	147:46	11	errno
water	147:41	0:0	12	errno
water	147:49	0:0	8	;
call	148:16	148:41	8	close
arg	148:23	148:41	9	p_sys->i_outputfd
water	148:23	0:0	10	p_sys
op	148:28	0:0	10	->
water	148:30	0:0	10	i_outputfd
water	148:42	0:0	8	;
water	149:16	0:0	8	p_sys
op	149:21	0:0	8	->
water	149:23	0:0	8	i_outputfd
op	149:34	0:0	8	=
op	149:36	0:0	8	-
water	149:37	0:0	8	1
water	149:38	0:0	8	;
water	150:12	0:0	8	}
water	151:8	0:0	6	}
else	152:8	155:8	4
stmts	153:8	155:8	5	
water	153:8	0:0	6	{
call	154:12	154:45	6	BufferDel
arg	154:23	154:37	7	&p_sys->output
op	154:23	0:0	8	&
water	154:24	0:0	8	p_sys
op	154:29	0:0	8	->
water	154:31	0:0	8	output
arg	154:39	154:45	7	i_len
water	154:39	0:0	8	i_len
water	154:46	0:0	6	;
water	155:8	0:0	6	}
water	156:4	0:0	4	}
if	157:4	158:19	2	(! p_sys -> b_updated)
cond	157:8	157:16	3	! p_sys -> b_updated
op	157:8	0:0	4	!
water	157:9	0:0	4	p_sys
op	157:14	0:0	4	->
water	157:16	0:0	4	b_updated
stmts	158:8	158:19	3	
return	158:8	158:19	4	NULL
water	158:15	0:0	5	NULL
decl	159:4	159:30	2	subpicture_t	*p_spu
op	159:24	0:0	2	=
water	159:26	0:0	2	NULL
decl	160:4	160:31	2	overlay_t	*p_overlay
op	160:25	0:0	2	=
water	160:27	0:0	2	NULL
water	161:4	0:0	2	p_spu
op	161:10	0:0	2	=
call	161:12	161:50	2	p_filter->pf_sub_buffer_new
arg	161:41	161:50	3	p_filter
water	161:41	0:0	4	p_filter
water	161:51	0:0	2	;
if	162:4	166:4	2	(! p_spu)
cond	162:8	162:9	3	! p_spu
op	162:8	0:0	4	!
water	162:9	0:0	4	p_spu
stmts	163:4	166:4	3	
water	163:4	0:0	4	{
call	164:8	164:56	4	msg_Err
arg	164:17	164:25	5	p_filter
water	164:17	0:0	6	p_filter
arg	164:27	164:56	5	"cannot allocate subpicture"
water	164:27	0:0	6	"cannot allocate subpicture"
water	164:57	0:0	4	;
return	165:8	165:19	4	NULL
water	165:15	0:0	5	NULL
water	166:4	0:0	4	}
water	167:4	0:0	2	p_spu
op	167:9	0:0	2	->
water	167:11	0:0	2	b_absolute
op	167:22	0:0	2	=
water	167:24	0:0	2	true
water	167:28	0:0	2	;
water	168:4	0:0	2	p_spu
op	168:9	0:0	2	->
water	168:11	0:0	2	i_start
op	168:19	0:0	2	=
water	168:21	0:0	2	date
water	168:25	0:0	2	;
water	169:4	0:0	2	p_spu
op	169:9	0:0	2	->
water	169:11	0:0	2	i_stop
op	169:18	0:0	2	=
water	169:20	0:0	2	0
water	169:21	0:0	2	;
water	170:4	0:0	2	p_spu
op	170:9	0:0	2	->
water	170:11	0:0	2	b_ephemer
op	170:21	0:0	2	=
water	170:23	0:0	2	true
water	170:27	0:0	2	;
decl	171:4	171:54	2	subpicture_region_t	**pp_region
op	171:36	0:0	2	=
op	171:38	0:0	2	&
water	171:39	0:0	2	p_spu
op	171:44	0:0	2	->
water	171:46	0:0	2	p_region
while	172:4	196:4	2	(( p_overlay =ListWalk (& p_sys -> overlays ) ))
cond	172:11	172:52	3	( p_overlay =ListWalk (& p_sys -> overlays ) )
water	172:11	0:0	4	(
water	172:12	0:0	4	p_overlay
op	172:22	0:0	4	=
call	172:24	172:51	4	ListWalk
arg	172:34	172:51	5	&p_sys->overlays
op	172:34	0:0	6	&
water	172:35	0:0	6	p_sys
op	172:40	0:0	6	->
water	172:42	0:0	6	overlays
water	172:52	0:0	4	)
stmts	173:4	196:4	3	
water	173:4	0:0	4	{
decl	174:8	174:37	4	subpicture_region_t	*p_region
op	175:8	0:0	4	*
water	175:9	0:0	4	pp_region
op	175:19	0:0	4	=
water	175:21	0:0	4	p_region
op	175:30	0:0	4	=
call	175:32	175:74	4	subpicture_region_New
arg	175:55	175:74	5	&p_overlay->format
op	175:55	0:0	6	&
water	175:56	0:0	6	p_overlay
op	175:65	0:0	6	->
water	175:67	0:0	6	format
water	175:75	0:0	4	;
if	176:8	177:17	4	(! p_region)
cond	176:12	176:13	5	! p_region
op	176:12	0:0	6	!
water	176:13	0:0	6	p_region
stmts	177:12	177:17	5	
break	177:12	177:17	6	
call	178:8	180:36	4	msg_Dbg
arg	178:17	178:25	5	p_filter
water	178:17	0:0	6	p_filter
arg	178:27	178:66	5	"Displaying overlay: %4.4s, %d, %d, %d"
water	178:27	0:0	6	"Displaying overlay: %4.4s, %d, %d, %d"
arg	179:17	179:51	5	(char*)&p_overlay->format.i_chroma
water	179:17	0:0	6	(
water	179:18	0:0	6	char
op	179:22	0:0	6	*
water	179:23	0:0	6	)
op	179:24	0:0	6	&
water	179:25	0:0	6	p_overlay
op	179:34	0:0	6	->
water	179:36	0:0	6	format
op	179:42	0:0	6	.
water	179:43	0:0	6	i_chroma
arg	179:53	179:67	5	p_overlay->i_x
water	179:53	0:0	6	p_overlay
op	179:62	0:0	6	->
water	179:64	0:0	6	i_x
arg	179:69	179:83	5	p_overlay->i_y
water	179:69	0:0	6	p_overlay
op	179:78	0:0	6	->
water	179:80	0:0	6	i_y
arg	180:17	180:36	5	p_overlay->i_alpha
water	180:17	0:0	6	p_overlay
op	180:26	0:0	6	->
water	180:28	0:0	6	i_alpha
water	180:37	0:0	4	;
if	181:8	185:8	4	(p_overlay -> format . i_chroma == VLC_CODEC_TEXT)
cond	181:12	181:42	5	p_overlay -> format . i_chroma == VLC_CODEC_TEXT
water	181:12	0:0	6	p_overlay
op	181:21	0:0	6	->
water	181:23	0:0	6	format
op	181:29	0:0	6	.
water	181:30	0:0	6	i_chroma
op	181:39	0:0	6	==
water	181:42	0:0	6	VLC_CODEC_TEXT
stmts	182:8	185:8	5	
water	182:8	0:0	6	{
water	183:12	0:0	6	p_region
op	183:20	0:0	6	->
water	183:22	0:0	6	psz_text
op	183:31	0:0	6	=
call	183:33	183:64	6	strdup
arg	183:41	183:64	7	p_overlay->data.p_text
water	183:41	0:0	8	p_overlay
op	183:50	0:0	8	->
water	183:52	0:0	8	data
op	183:56	0:0	8	.
water	183:57	0:0	8	p_text
water	183:65	0:0	6	;
water	184:12	0:0	6	p_region
op	184:20	0:0	6	->
water	184:22	0:0	6	p_style
op	184:30	0:0	6	=
call	184:32	184:77	6	text_style_Duplicate
arg	184:54	184:77	7	p_overlay->p_fontstyle
water	184:54	0:0	8	p_overlay
op	184:63	0:0	8	->
water	184:65	0:0	8	p_fontstyle
water	184:78	0:0	6	;
water	185:8	0:0	6	}
else	186:8	190:8	4
stmts	187:8	190:8	5	
water	187:8	0:0	6	{
call	189:12	189:69	6	picture_Copy
arg	189:26	189:45	7	p_region->p_picture
water	189:26	0:0	8	p_region
op	189:34	0:0	8	->
water	189:36	0:0	8	p_picture
arg	189:47	189:69	7	p_overlay->data.p_pic
water	189:47	0:0	8	p_overlay
op	189:56	0:0	8	->
water	189:58	0:0	8	data
op	189:62	0:0	8	.
water	189:63	0:0	8	p_pic
water	189:70	0:0	6	;
water	190:8	0:0	6	}
water	191:8	0:0	4	p_region
op	191:16	0:0	4	->
water	191:18	0:0	4	i_x
op	191:22	0:0	4	=
water	191:24	0:0	4	p_overlay
op	191:33	0:0	4	->
water	191:35	0:0	4	i_x
water	191:38	0:0	4	;
water	192:8	0:0	4	p_region
op	192:16	0:0	4	->
water	192:18	0:0	4	i_y
op	192:22	0:0	4	=
water	192:24	0:0	4	p_overlay
op	192:33	0:0	4	->
water	192:35	0:0	4	i_y
water	192:38	0:0	4	;
water	193:8	0:0	4	p_region
op	193:16	0:0	4	->
water	193:18	0:0	4	i_align
op	193:26	0:0	4	=
water	193:28	0:0	4	SUBPICTURE_ALIGN_LEFT
op	193:50	0:0	4	|
water	193:52	0:0	4	SUBPICTURE_ALIGN_TOP
water	193:72	0:0	4	;
water	194:8	0:0	4	p_region
op	194:16	0:0	4	->
water	194:18	0:0	4	i_alpha
op	194:26	0:0	4	=
water	194:28	0:0	4	p_overlay
op	194:37	0:0	4	->
water	194:39	0:0	4	i_alpha
water	194:46	0:0	4	;
water	195:8	0:0	4	pp_region
op	195:18	0:0	4	=
op	195:20	0:0	4	&
water	195:21	0:0	4	p_region
op	195:29	0:0	4	->
water	195:31	0:0	4	p_next
water	195:37	0:0	4	;
water	196:4	0:0	4	}
water	197:4	0:0	2	p_sys
op	197:9	0:0	2	->
water	197:11	0:0	2	b_updated
op	197:21	0:0	2	=
water	197:23	0:0	2	false
water	197:28	0:0	2	;
return	198:4	198:16	2	p_spu
water	198:11	0:0	3	p_spu
