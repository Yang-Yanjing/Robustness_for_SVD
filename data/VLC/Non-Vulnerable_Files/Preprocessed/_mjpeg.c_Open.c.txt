func	2:0	91:0	0	static int	Open
params	2:15	0:0	1	
param	2:17	2:39	2	vlc_object_t *	p_this
stmnts	0:0	90:23	1	
decl	4:4	4:43	2	demux_t	*p_demux
op	4:25	0:0	2	=
water	4:27	0:0	2	(
water	4:28	0:0	2	demux_t
op	4:35	0:0	2	*
water	4:36	0:0	2	)
water	4:37	0:0	2	p_this
decl	5:4	5:22	2	int	i_size
decl	6:4	6:33	2	bool	b_matched
op	6:26	0:0	2	=
water	6:28	0:0	2	false
if	7:4	9:27	2	(IsMxpeg (p_demux -> s ) && ! p_demux -> b_force)
cond	7:8	7:43	3	IsMxpeg (p_demux -> s ) && ! p_demux -> b_force
call	7:8	7:28	4	IsMxpeg
arg	7:17	7:28	5	p_demux->s
water	7:17	0:0	6	p_demux
op	7:24	0:0	6	->
water	7:26	0:0	6	s
op	7:30	0:0	4	&&
op	7:33	0:0	4	!
water	7:34	0:0	4	p_demux
op	7:41	0:0	4	->
water	7:43	0:0	4	b_force
stmts	9:8	9:27	3	
return	9:8	9:27	4	VLC_EGENERIC
water	9:15	0:0	5	VLC_EGENERIC
decl	10:4	10:56	2	demux_sys_t	*p_sys
op	10:23	0:0	2	=
call	10:25	10:55	3	malloc
arg	10:33	10:55	4	sizeof(demux_sys_t)
op	10:33	0:0	5	sizeof
water	10:39	0:0	5	(
water	10:41	0:0	5	demux_sys_t
water	10:53	0:0	5	)
if	11:4	12:25	2	(unlikely (p_sys == NULL ))
cond	11:8	11:30	3	unlikely (p_sys == NULL )
call	11:8	11:30	4	unlikely
arg	11:17	11:30	5	p_sys==NULL
water	11:17	0:0	6	p_sys
op	11:23	0:0	6	==
water	11:26	0:0	6	NULL
stmts	12:8	12:25	3	
return	12:8	12:25	4	VLC_ENOMEM
water	12:15	0:0	5	VLC_ENOMEM
water	13:4	0:0	2	p_demux
op	13:11	0:0	2	->
water	13:13	0:0	2	pf_control
op	13:24	0:0	2	=
water	13:26	0:0	2	Control
water	13:33	0:0	2	;
water	14:4	0:0	2	p_demux
op	14:11	0:0	2	->
water	14:13	0:0	2	p_sys
op	14:24	0:0	2	=
water	14:26	0:0	2	p_sys
water	14:31	0:0	2	;
water	15:4	0:0	2	p_sys
op	15:9	0:0	2	->
water	15:11	0:0	2	p_es
op	15:24	0:0	2	=
water	15:26	0:0	2	NULL
water	15:30	0:0	2	;
water	16:4	0:0	2	p_sys
op	16:9	0:0	2	->
water	16:11	0:0	2	i_time
op	16:24	0:0	2	=
water	16:26	0:0	2	VLC_TS_0
water	16:34	0:0	2	;
water	17:4	0:0	2	p_sys
op	17:9	0:0	2	->
water	17:11	0:0	2	i_level
op	17:24	0:0	2	=
water	17:26	0:0	2	0
water	17:27	0:0	2	;
water	18:4	0:0	2	p_sys
op	18:9	0:0	2	->
water	18:11	0:0	2	psz_separator
op	18:25	0:0	2	=
water	18:27	0:0	2	NULL
water	18:31	0:0	2	;
water	19:4	0:0	2	p_sys
op	19:9	0:0	2	->
water	19:11	0:0	2	i_frame_size_estimate
op	19:33	0:0	2	=
water	19:35	0:0	2	15
op	19:38	0:0	2	*
water	19:40	0:0	2	1024
water	19:44	0:0	2	;
decl	20:4	20:57	2	char	*content_type
op	20:23	0:0	2	=
call	20:25	20:56	3	stream_ContentType
arg	20:45	20:56	4	p_demux->s
water	20:45	0:0	5	p_demux
op	20:52	0:0	5	->
water	20:54	0:0	5	s
if	21:4	43:4	2	(content_type)
cond	21:9	21:9	3	content_type
water	21:9	0:0	4	content_type
stmts	22:4	43:4	3	
water	22:4	0:0	4	{
decl	24:8	24:60	4	char	*boundary
op	24:23	0:0	4	=
call	24:25	24:59	5	strstr
arg	24:33	24:45	6	content_type
water	24:33	0:0	7	content_type
arg	24:47	24:59	6	"boundary="
water	24:47	0:0	7	"boundary="
if	25:8	41:8	4	(boundary)
cond	25:12	25:12	5	boundary
water	25:12	0:0	6	boundary
stmts	26:8	41:8	5	
water	26:8	0:0	6	{
water	27:5	0:0	6	boundary
op	27:14	0:0	6	+=
call	27:17	27:37	6	strlen
arg	27:25	27:37	7	"boundary="
water	27:25	0:0	8	"boundary="
water	27:38	0:0	6	;
decl	28:5	28:36	6	size_t	len
op	28:16	0:0	6	=
call	28:18	28:35	7	strlen
arg	28:26	28:35	8	boundary
water	28:26	0:0	9	boundary
if	29:5	34:5	6	(len > 2 && boundary [ 0 ] == '"' && boundary [ len - 1 ] == '"')
cond	29:9	30:31	7	len > 2 && boundary [ 0 ] == '"' && boundary [ len - 1 ] == '"'
water	29:9	0:0	8	len
op	29:13	0:0	8	>
water	29:15	0:0	8	2
op	29:17	0:0	8	&&
water	29:20	0:0	8	boundary
op	29:28	0:0	8	[
water	29:29	0:0	8	0
op	29:30	0:0	8	]
op	29:32	0:0	8	==
water	29:35	0:0	8	'"'
op	30:9	0:0	8	&&
water	30:12	0:0	8	boundary
op	30:20	0:0	8	[
water	30:21	0:0	8	len
op	30:24	0:0	8	-
water	30:25	0:0	8	1
op	30:26	0:0	8	]
op	30:28	0:0	8	==
water	30:31	0:0	8	'"'
stmts	31:5	34:5	7	
water	31:5	0:0	8	{
water	32:9	0:0	8	boundary
op	32:17	0:0	8	[
water	32:18	0:0	8	len
op	32:21	0:0	8	-
water	32:22	0:0	8	1
op	32:23	0:0	8	]
op	32:25	0:0	8	=
water	32:27	0:0	8	'\0'
water	32:31	0:0	8	;
water	33:9	0:0	8	boundary
op	33:17	0:0	8	++
water	33:19	0:0	8	;
water	34:5	0:0	8	}
water	35:12	0:0	6	p_sys
op	35:17	0:0	6	->
water	35:19	0:0	6	psz_separator
op	35:33	0:0	6	=
call	35:35	35:52	6	strdup
arg	35:43	35:52	7	boundary
water	35:43	0:0	8	boundary
water	35:53	0:0	6	;
if	36:12	40:12	6	(! p_sys -> psz_separator)
cond	36:16	36:24	7	! p_sys -> psz_separator
op	36:16	0:0	8	!
water	36:17	0:0	8	p_sys
op	36:22	0:0	8	->
water	36:24	0:0	8	psz_separator
stmts	37:12	40:12	7	
water	37:12	0:0	8	{
call	38:16	38:35	8	free
arg	38:22	38:35	9	content_type
water	38:22	0:0	10	content_type
water	38:36	0:0	8	;
goto	39:16	39:26	8	error
water	39:21	0:0	9	error
water	40:12	0:0	8	}
water	41:8	0:0	6	}
call	42:8	42:27	4	free
arg	42:14	42:27	5	content_type
water	42:14	0:0	6	content_type
water	42:28	0:0	4	;
water	43:4	0:0	4	}
water	44:4	0:0	2	b_matched
op	44:14	0:0	2	=
call	44:16	44:49	2	CheckMimeHeader
arg	44:33	44:40	3	p_demux
water	44:33	0:0	4	p_demux
arg	44:42	44:49	3	&i_size
op	44:42	0:0	4	&
water	44:43	0:0	4	i_size
water	44:50	0:0	2	;
if	45:4	49:4	2	(b_matched)
cond	45:8	45:8	3	b_matched
water	45:8	0:0	4	b_matched
stmts	46:4	49:4	3	
water	46:4	0:0	4	{
water	47:8	0:0	4	p_demux
op	47:15	0:0	4	->
water	47:17	0:0	4	pf_demux
op	47:26	0:0	4	=
water	47:28	0:0	4	MimeDemux
water	47:37	0:0	4	;
call	48:8	48:46	4	stream_Read
arg	48:21	48:31	5	p_demux->s
water	48:21	0:0	6	p_demux
op	48:28	0:0	6	->
water	48:30	0:0	6	s
arg	48:33	48:37	5	NULL
water	48:33	0:0	6	NULL
arg	48:39	48:46	5	i_size
water	48:39	0:0	6	i_size
water	48:47	0:0	4	;
water	49:4	0:0	4	}
else	50:4	63:4	2
stmts	50:9	63:4	3	
if	50:9	63:4	4	(i_size == 0)
cond	50:13	50:23	5	i_size == 0
water	50:13	0:0	6	i_size
op	50:20	0:0	6	==
water	50:23	0:0	6	0
stmts	51:4	63:4	5	
water	51:4	0:0	6	{
if	53:8	58:8	6	(p_sys -> p_peek [ 0 ] == 0 xFF && p_sys -> p_peek [ 1 ] == 0 xD8)
cond	53:12	53:61	7	p_sys -> p_peek [ 0 ] == 0 xFF && p_sys -> p_peek [ 1 ] == 0 xD8
water	53:12	0:0	8	p_sys
op	53:17	0:0	8	->
water	53:19	0:0	8	p_peek
op	53:25	0:0	8	[
water	53:26	0:0	8	0
op	53:27	0:0	8	]
op	53:29	0:0	8	==
water	53:32	0:0	8	0
water	53:33	0:0	8	xFF
op	53:37	0:0	8	&&
water	53:40	0:0	8	p_sys
op	53:45	0:0	8	->
water	53:47	0:0	8	p_peek
op	53:53	0:0	8	[
water	53:54	0:0	8	1
op	53:55	0:0	8	]
op	53:57	0:0	8	==
water	53:60	0:0	8	0
water	53:61	0:0	8	xD8
stmts	54:8	58:8	7	
water	54:8	0:0	8	{
call	55:12	55:57	8	msg_Dbg
arg	55:21	55:28	9	p_demux
water	55:21	0:0	10	p_demux
arg	55:30	55:57	9	"JPEG SOI marker detected"
water	55:30	0:0	10	"JPEG SOI marker detected"
water	55:58	0:0	8	;
water	56:12	0:0	8	p_demux
op	56:19	0:0	8	->
water	56:21	0:0	8	pf_demux
op	56:30	0:0	8	=
water	56:32	0:0	8	MjpgDemux
water	56:41	0:0	8	;
water	57:12	0:0	8	p_sys
op	57:17	0:0	8	->
water	57:19	0:0	8	i_level
op	57:26	0:0	8	++
water	57:28	0:0	8	;
water	58:8	0:0	8	}
else	59:8	62:8	6
stmts	60:8	62:8	7	
water	60:8	0:0	8	{
goto	61:12	61:22	8	error
water	61:17	0:0	9	error
water	62:8	0:0	8	}
water	63:4	0:0	6	}
else	64:4	67:4	2
stmts	65:4	67:4	3	
water	65:4	0:0	4	{
goto	66:8	66:18	4	error
water	66:13	0:0	5	error
water	67:4	0:0	4	}
decl	69:4	69:58	2	float	f_fps
op	69:16	0:0	2	=
call	69:18	69:57	3	var_InheritFloat
arg	69:36	69:43	4	p_demux
water	69:36	0:0	5	p_demux
arg	69:45	69:57	4	"mjpeg-fps"
water	69:45	0:0	5	"mjpeg-fps"
water	70:4	0:0	2	p_sys
op	70:9	0:0	2	->
water	70:11	0:0	2	i_still_end
op	70:23	0:0	2	=
water	70:25	0:0	2	0
water	70:26	0:0	2	;
if	71:4	79:4	2	(demux_IsPathExtension (p_demux ,".jpeg" ) ||demux_IsPathExtension (p_demux ,".jpg" ))
cond	71:8	72:47	3	demux_IsPathExtension (p_demux ,".jpeg" ) ||demux_IsPathExtension (p_demux ,".jpg" )
call	71:8	71:48	4	demux_IsPathExtension
arg	71:31	71:38	5	p_demux
water	71:31	0:0	6	p_demux
arg	71:40	71:48	5	".jpeg"
water	71:40	0:0	6	".jpeg"
op	71:50	0:0	4	||
call	72:8	72:47	4	demux_IsPathExtension
arg	72:31	72:38	5	p_demux
water	72:31	0:0	6	p_demux
arg	72:40	72:47	5	".jpg"
water	72:40	0:0	6	".jpg"
stmts	73:4	79:4	3	
water	73:4	0:0	4	{
water	75:8	0:0	4	p_sys
op	75:13	0:0	4	->
water	75:15	0:0	4	b_still
op	75:23	0:0	4	=
water	75:25	0:0	4	true
water	75:29	0:0	4	;
if	76:8	78:23	4	(f_fps == 0 . f)
cond	76:12	76:23	5	f_fps == 0 . f
water	76:12	0:0	6	f_fps
op	76:18	0:0	6	==
water	76:21	0:0	6	0
op	76:22	0:0	6	.
water	76:23	0:0	6	f
stmts	78:12	78:23	5	
water	78:12	0:0	6	f_fps
op	78:18	0:0	6	=
water	78:20	0:0	6	1
op	78:21	0:0	6	.
water	78:22	0:0	6	f
water	78:23	0:0	6	;
water	79:4	0:0	4	}
else	80:4	81:30	2
stmts	81:8	81:30	3	
water	81:8	0:0	4	p_sys
op	81:13	0:0	4	->
water	81:15	0:0	4	b_still
op	81:23	0:0	4	=
water	81:25	0:0	4	false
water	81:30	0:0	4	;
water	82:4	0:0	2	p_sys
op	82:9	0:0	2	->
water	82:11	0:0	2	i_frame_length
op	82:26	0:0	2	=
water	82:28	0:0	2	f_fps
water	82:34	0:0	2	?
water	82:36	0:0	2	(
water	82:37	0:0	2	CLOCK_FREQ
op	82:48	0:0	2	/
water	82:50	0:0	2	f_fps
water	82:55	0:0	2	)
water	82:57	0:0	2	:
water	82:59	0:0	2	0
water	82:60	0:0	2	;
call	83:4	83:45	2	es_format_Init
arg	83:20	83:31	3	&p_sys->fmt
op	83:20	0:0	4	&
water	83:21	0:0	4	p_sys
op	83:26	0:0	4	->
water	83:28	0:0	4	fmt
arg	83:33	83:41	3	VIDEO_ES
water	83:33	0:0	4	VIDEO_ES
arg	83:43	83:45	3	0
water	83:43	0:0	4	0
water	83:46	0:0	2	;
water	84:4	0:0	2	p_sys
op	84:9	0:0	2	->
water	84:11	0:0	2	fmt
op	84:14	0:0	2	.
water	84:15	0:0	2	i_codec
op	84:23	0:0	2	=
water	84:25	0:0	2	VLC_CODEC_MJPG
water	84:39	0:0	2	;
water	85:4	0:0	2	p_sys
op	85:9	0:0	2	->
water	85:11	0:0	2	p_es
op	85:16	0:0	2	=
call	85:18	85:56	2	es_out_Add
arg	85:30	85:42	3	p_demux->out
water	85:30	0:0	4	p_demux
op	85:37	0:0	4	->
water	85:39	0:0	4	out
arg	85:44	85:56	3	&p_sys->fmt
op	85:44	0:0	4	&
water	85:45	0:0	4	p_sys
op	85:50	0:0	4	->
water	85:52	0:0	4	fmt
water	85:57	0:0	2	;
return	86:4	86:22	2	VLC_SUCCESS
water	86:11	0:0	3	VLC_SUCCESS
label	87:0	87:5	2	error :
call	88:4	88:31	2	free
arg	88:10	88:31	3	p_sys->psz_separator
water	88:10	0:0	4	p_sys
op	88:15	0:0	4	->
water	88:17	0:0	4	psz_separator
water	88:32	0:0	2	;
call	89:4	89:16	2	free
arg	89:10	89:16	3	p_sys
water	89:10	0:0	4	p_sys
water	89:17	0:0	2	;
return	90:4	90:23	2	VLC_EGENERIC
water	90:11	0:0	3	VLC_EGENERIC
