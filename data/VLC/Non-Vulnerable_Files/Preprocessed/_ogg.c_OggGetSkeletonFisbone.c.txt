func	1:0	117:0	0	static void	OggGetSkeletonFisbone
params	1:33	0:0	1	
param	1:35	1:54	2	uint8_t * *	pp_buffer
param	1:56	1:69	2	long *	pi_size
param	2:35	2:56	2	sout_input_t *	p_input
param	2:58	2:76	2	sout_mux_t *	p_mux
stmnts	0:0	116:28	1	
decl	4:4	4:23	2	uint8_t	*psz_header
decl	5:4	5:21	2	uint8_t	*p_buffer
decl	6:4	6:32	2	const char	*psz_value
op	6:26	0:0	2	=
water	6:28	0:0	2	NULL
decl	7:4	7:60	2	ogg_stream_t	*p_stream
op	7:27	0:0	2	=
water	7:29	0:0	2	(
water	7:30	0:0	2	ogg_stream_t
op	7:43	0:0	2	*
water	7:44	0:0	2	)
water	7:46	0:0	2	p_input
op	7:53	0:0	2	->
water	7:55	0:0	2	p_sys
struct	8:4	14:4	2	<anonymous_8:4>
decl	10:8	10:30	3	char	*psz_content_type
decl	11:8	11:22	3	char	*psz_role
water	12:8	0:0	3	long
decl	12:13	12:23	3	int	i_size
decl	13:8	13:28	3	unsigned int	i_count
decl	8:4	14:36	2	<anonymous_8:4>	headers
op	14:14	0:0	2	=
water	14:16	0:0	2	{
water	14:18	0:0	2	NULL
water	14:22	0:0	2	,
water	14:24	0:0	2	NULL
water	14:28	0:0	2	,
water	14:30	0:0	2	0
water	14:31	0:0	2	,
water	14:33	0:0	2	0
water	14:35	0:0	2	}
op	15:4	0:0	2	*
water	15:5	0:0	2	pi_size
op	15:13	0:0	2	=
water	15:15	0:0	2	0
water	15:16	0:0	2	;
switch	16:4	44:4	2	(p_stream -> i_fourcc)
cond	16:12	16:22	3	p_stream -> i_fourcc
water	16:12	0:0	4	p_stream
op	16:20	0:0	4	->
water	16:22	0:0	4	i_fourcc
stmts	17:4	44:4	3	
water	17:4	0:0	4	{
label	18:8	18:29	4	case VLC_CODEC_VORBIS :
water	19:12	0:0	4	psz_value
op	19:22	0:0	4	=
water	19:24	0:0	4	"audio/vorbis"
water	19:38	0:0	4	;
break	20:12	20:17	4	
label	21:8	21:29	4	case VLC_CODEC_THEORA :
water	22:12	0:0	4	psz_value
op	22:22	0:0	4	=
water	22:24	0:0	4	"video/theora"
water	22:38	0:0	4	;
break	23:12	23:17	4	
label	24:8	24:28	4	case VLC_CODEC_SPEEX :
water	25:12	0:0	4	psz_value
op	25:22	0:0	4	=
water	25:24	0:0	4	"audio/speex"
water	25:37	0:0	4	;
break	26:12	26:17	4	
label	27:8	27:27	4	case VLC_CODEC_FLAC :
water	28:12	0:0	4	psz_value
op	28:22	0:0	4	=
water	28:24	0:0	4	"audio/flac"
water	28:36	0:0	4	;
break	29:12	29:17	4	
label	30:8	30:27	4	case VLC_CODEC_CMML :
water	31:12	0:0	4	psz_value
op	31:22	0:0	4	=
water	31:24	0:0	4	"text/cmml"
water	31:35	0:0	4	;
break	32:12	32:17	4	
label	33:8	33:27	4	case VLC_CODEC_KATE :
water	34:12	0:0	4	psz_value
op	34:22	0:0	4	=
water	34:24	0:0	4	"application/kate"
water	34:42	0:0	4	;
break	35:12	35:17	4	
label	36:8	36:26	4	case VLC_CODEC_VP8 :
water	37:12	0:0	4	psz_value
op	37:22	0:0	4	=
water	37:24	0:0	4	"video/x-vp8"
water	37:37	0:0	4	;
break	38:12	38:17	4	
label	39:8	39:15	4	default :
water	40:12	0:0	4	psz_value
op	40:22	0:0	4	=
water	40:24	0:0	4	"application/octet-stream"
water	40:50	0:0	4	;
call	41:12	43:28	4	msg_Warn
arg	41:22	41:27	5	p_mux
water	41:22	0:0	6	p_mux
arg	41:29	41:87	5	"Unknown fourcc for stream %s, setting Content-Type to %s"
water	41:29	0:0	6	"Unknown fourcc for stream %s, setting Content-Type to %s"
arg	42:18	42:82	5	vlc_fourcc_GetDescription(p_stream->i_cat,p_stream->i_fourcc)
call	42:18	42:81	6	vlc_fourcc_GetDescription
arg	42:45	42:60	7	p_stream->i_cat
water	42:45	0:0	8	p_stream
op	42:53	0:0	8	->
water	42:55	0:0	8	i_cat
arg	42:62	42:81	7	p_stream->i_fourcc
water	42:62	0:0	8	p_stream
op	42:70	0:0	8	->
water	42:72	0:0	8	i_fourcc
arg	43:18	43:28	5	psz_value
water	43:18	0:0	6	psz_value
water	43:29	0:0	4	;
water	44:4	0:0	4	}
if	46:4	50:4	2	(asprintf (& headers . psz_content_type ,"Content-Type: %s\r\n" ,psz_value ) != - 1)
cond	46:9	46:86	3	asprintf (& headers . psz_content_type ,"Content-Type: %s\r\n" ,psz_value ) != - 1
call	46:9	46:80	4	asprintf
arg	46:19	46:44	5	&headers.psz_content_type
op	46:19	0:0	6	&
water	46:20	0:0	6	headers
op	46:27	0:0	6	.
water	46:28	0:0	6	psz_content_type
arg	46:46	46:68	5	"Content-Type: %s\r\n"
water	46:46	0:0	6	"Content-Type: %s\r\n"
arg	46:70	46:80	5	psz_value
water	46:70	0:0	6	psz_value
op	46:82	0:0	4	!=
op	46:85	0:0	4	-
water	46:86	0:0	4	1
stmts	47:4	50:4	3	
water	47:4	0:0	4	{
water	48:8	0:0	4	headers
op	48:15	0:0	4	.
water	48:16	0:0	4	i_size
op	48:23	0:0	4	+=
call	48:26	48:59	4	strlen
arg	48:34	48:59	5	headers.psz_content_type
water	48:34	0:0	6	headers
op	48:41	0:0	6	.
water	48:42	0:0	6	psz_content_type
water	48:60	0:0	4	;
water	49:8	0:0	4	headers
op	49:15	0:0	4	.
water	49:16	0:0	4	i_count
op	49:23	0:0	4	++
water	49:25	0:0	4	;
water	50:4	0:0	4	}
if	52:4	80:4	2	(p_input -> p_fmt -> i_priority > ES_PRIORITY_NOT_SELECTABLE)
cond	52:9	52:38	3	p_input -> p_fmt -> i_priority > ES_PRIORITY_NOT_SELECTABLE
water	52:9	0:0	4	p_input
op	52:16	0:0	4	->
water	52:18	0:0	4	p_fmt
op	52:23	0:0	4	->
water	52:25	0:0	4	i_priority
op	52:36	0:0	4	>
water	52:38	0:0	4	ES_PRIORITY_NOT_SELECTABLE
stmts	53:4	80:4	3	
water	53:4	0:0	4	{
decl	54:8	54:40	4	int	i_max_prio
op	54:23	0:0	4	=
water	54:25	0:0	4	ES_PRIORITY_MIN
for	55:8	59:8	4	( int i = 0 ;i < p_mux -> i_nb_inputs;i ++)
forinit	0:0	55:21	5	 int i = 0 ;
decl	55:14	55:21	6	int	i
op	55:19	0:0	6	=
water	55:20	0:0	6	0
cond	55:23	55:33	5	i < p_mux -> i_nb_inputs
water	55:23	0:0	6	i
op	55:24	0:0	6	<
water	55:26	0:0	6	p_mux
op	55:31	0:0	6	->
water	55:33	0:0	6	i_nb_inputs
forexpr	55:46	55:47	5	i ++
water	55:46	0:0	6	i
op	55:47	0:0	6	++
stmts	56:8	59:8	5	
water	56:8	0:0	6	{
if	57:12	57:86	6	(p_mux -> pp_inputs [ i ] -> p_fmt -> i_cat != p_input -> p_fmt -> i_cat)
cond	57:17	57:70	7	p_mux -> pp_inputs [ i ] -> p_fmt -> i_cat != p_input -> p_fmt -> i_cat
water	57:17	0:0	8	p_mux
op	57:22	0:0	8	->
water	57:24	0:0	8	pp_inputs
op	57:33	0:0	8	[
water	57:34	0:0	8	i
op	57:35	0:0	8	]
op	57:36	0:0	8	->
water	57:38	0:0	8	p_fmt
op	57:43	0:0	8	->
water	57:45	0:0	8	i_cat
op	57:51	0:0	8	!=
water	57:54	0:0	8	p_input
op	57:61	0:0	8	->
water	57:63	0:0	8	p_fmt
op	57:68	0:0	8	->
water	57:70	0:0	8	i_cat
stmts	57:78	57:86	7	
continue	57:78	57:86	8	
water	58:12	0:0	6	i_max_prio
op	58:23	0:0	6	=
call	58:25	58:83	6	__MAX
arg	58:32	58:70	7	p_mux->pp_inputs[i]->p_fmt->i_priority
water	58:32	0:0	8	p_mux
op	58:37	0:0	8	->
water	58:39	0:0	8	pp_inputs
op	58:48	0:0	8	[
water	58:49	0:0	8	i
op	58:50	0:0	8	]
op	58:51	0:0	8	->
water	58:53	0:0	8	p_fmt
op	58:58	0:0	8	->
water	58:60	0:0	8	i_priority
arg	58:72	58:83	7	i_max_prio
water	58:72	0:0	8	i_max_prio
water	58:84	0:0	6	;
water	59:8	0:0	6	}
water	60:8	0:0	4	psz_value
op	60:18	0:0	4	=
water	60:20	0:0	4	NULL
water	60:24	0:0	4	;
if	61:8	69:8	4	(p_input -> p_fmt -> i_cat == AUDIO_ES || p_input -> p_fmt -> i_cat == VIDEO_ES)
cond	61:13	61:75	5	p_input -> p_fmt -> i_cat == AUDIO_ES || p_input -> p_fmt -> i_cat == VIDEO_ES
water	61:13	0:0	6	p_input
op	61:20	0:0	6	->
water	61:22	0:0	6	p_fmt
op	61:27	0:0	6	->
water	61:29	0:0	6	i_cat
op	61:35	0:0	6	==
water	61:38	0:0	6	AUDIO_ES
op	61:47	0:0	6	||
water	61:50	0:0	6	p_input
op	61:57	0:0	6	->
water	61:59	0:0	6	p_fmt
op	61:64	0:0	6	->
water	61:66	0:0	6	i_cat
op	61:72	0:0	6	==
water	61:75	0:0	6	VIDEO_ES
stmts	62:8	69:8	5	
water	62:8	0:0	6	{
if	63:12	65:55	6	(p_input -> p_fmt -> i_priority == i_max_prio && i_max_prio >= ES_PRIORITY_SELECTABLE_MIN)
cond	63:17	63:75	7	p_input -> p_fmt -> i_priority == i_max_prio && i_max_prio >= ES_PRIORITY_SELECTABLE_MIN
water	63:17	0:0	8	p_input
op	63:24	0:0	8	->
water	63:26	0:0	8	p_fmt
op	63:31	0:0	8	->
water	63:33	0:0	8	i_priority
op	63:44	0:0	8	==
water	63:47	0:0	8	i_max_prio
op	63:58	0:0	8	&&
water	63:61	0:0	8	i_max_prio
op	63:72	0:0	8	>=
water	63:75	0:0	8	ES_PRIORITY_SELECTABLE_MIN
stmts	64:16	65:55	7	
water	64:16	0:0	8	psz_value
op	64:26	0:0	8	=
water	64:28	0:0	8	(
water	64:30	0:0	8	p_input
op	64:37	0:0	8	->
water	64:39	0:0	8	p_fmt
op	64:44	0:0	8	->
water	64:46	0:0	8	i_cat
op	64:52	0:0	8	==
water	64:55	0:0	8	VIDEO_ES
water	64:64	0:0	8	)
water	64:66	0:0	8	?
water	65:28	0:0	8	"video/main"
water	65:41	0:0	8	:
water	65:43	0:0	8	"audio/main"
water	65:55	0:0	8	;
else	66:12	68:65	6
stmts	67:16	68:65	7	
water	67:16	0:0	8	psz_value
op	67:26	0:0	8	=
water	67:28	0:0	8	(
water	67:30	0:0	8	p_input
op	67:37	0:0	8	->
water	67:39	0:0	8	p_fmt
op	67:44	0:0	8	->
water	67:46	0:0	8	i_cat
op	67:52	0:0	8	==
water	67:55	0:0	8	VIDEO_ES
water	67:64	0:0	8	)
water	67:66	0:0	8	?
water	68:28	0:0	8	"video/alternate"
water	68:46	0:0	8	:
water	68:48	0:0	8	"audio/alternate"
water	68:65	0:0	8	;
water	69:8	0:0	6	}
else	70:8	74:8	4
stmts	70:13	74:8	5	
if	70:13	74:8	6	(p_input -> p_fmt -> i_cat == SPU_ES)
cond	70:18	70:43	7	p_input -> p_fmt -> i_cat == SPU_ES
water	70:18	0:0	8	p_input
op	70:25	0:0	8	->
water	70:27	0:0	8	p_fmt
op	70:32	0:0	8	->
water	70:34	0:0	8	i_cat
op	70:40	0:0	8	==
water	70:43	0:0	8	SPU_ES
stmts	71:8	74:8	7	
water	71:8	0:0	8	{
water	72:12	0:0	8	psz_value
op	72:22	0:0	8	=
water	72:24	0:0	8	(
water	72:26	0:0	8	p_input
op	72:33	0:0	8	->
water	72:35	0:0	8	p_fmt
op	72:40	0:0	8	->
water	72:42	0:0	8	i_codec
op	72:50	0:0	8	==
water	72:53	0:0	8	VLC_CODEC_KATE
water	72:68	0:0	8	)
water	72:70	0:0	8	?
water	73:24	0:0	8	"text/karaoke"
water	73:39	0:0	8	:
water	73:41	0:0	8	"text/subtitle"
water	73:56	0:0	8	;
water	74:8	0:0	8	}
if	75:8	79:8	4	(psz_value &&asprintf (& headers . psz_role ,"Role: %s\r\n" ,psz_value ) != - 1)
cond	75:13	75:87	5	psz_value &&asprintf (& headers . psz_role ,"Role: %s\r\n" ,psz_value ) != - 1
water	75:13	0:0	6	psz_value
op	75:23	0:0	6	&&
call	75:26	75:81	6	asprintf
arg	75:36	75:53	7	&headers.psz_role
op	75:36	0:0	8	&
water	75:37	0:0	8	headers
op	75:44	0:0	8	.
water	75:45	0:0	8	psz_role
arg	75:55	75:69	7	"Role: %s\r\n"
water	75:55	0:0	8	"Role: %s\r\n"
arg	75:71	75:81	7	psz_value
water	75:71	0:0	8	psz_value
op	75:83	0:0	6	!=
op	75:86	0:0	6	-
water	75:87	0:0	6	1
stmts	76:8	79:8	5	
water	76:8	0:0	6	{
water	77:12	0:0	6	headers
op	77:19	0:0	6	.
water	77:20	0:0	6	i_size
op	77:27	0:0	6	+=
call	77:30	77:55	6	strlen
arg	77:38	77:55	7	headers.psz_role
water	77:38	0:0	8	headers
op	77:45	0:0	8	.
water	77:46	0:0	8	psz_role
water	77:56	0:0	6	;
water	78:12	0:0	6	headers
op	78:19	0:0	6	.
water	78:20	0:0	6	i_count
op	78:27	0:0	6	++
water	78:29	0:0	6	;
water	79:8	0:0	6	}
water	80:4	0:0	4	}
op	81:4	0:0	2	*
water	81:5	0:0	2	pp_buffer
op	81:15	0:0	2	=
call	81:17	81:77	2	calloc
arg	81:25	81:59	3	FISBONE_BASE_SIZE+headers.i_size
water	81:25	0:0	4	FISBONE_BASE_SIZE
op	81:43	0:0	4	+
water	81:45	0:0	4	headers
op	81:52	0:0	4	.
water	81:53	0:0	4	i_size
arg	81:61	81:77	3	sizeof(uint8_t)
op	81:61	0:0	4	sizeof
water	81:67	0:0	4	(
water	81:68	0:0	4	uint8_t
water	81:75	0:0	4	)
water	81:78	0:0	2	;
if	82:4	82:29	2	(! * pp_buffer)
cond	82:9	82:11	3	! * pp_buffer
op	82:9	0:0	4	!
op	82:10	0:0	4	*
water	82:11	0:0	4	pp_buffer
stmts	82:23	82:29	3	
return	82:23	82:29	4	
water	83:4	0:0	2	p_buffer
op	83:13	0:0	2	=
op	83:15	0:0	2	*
water	83:16	0:0	2	pp_buffer
water	83:25	0:0	2	;
call	84:4	84:35	2	memcpy
arg	84:12	84:20	3	p_buffer
water	84:12	0:0	4	p_buffer
arg	84:22	84:31	3	"fisbone"
water	84:22	0:0	4	"fisbone"
arg	84:33	84:35	3	8
water	84:33	0:0	4	8
water	84:36	0:0	2	;
call	85:4	85:47	2	SetDWLE
arg	85:13	85:25	3	&p_buffer[8]
op	85:13	0:0	4	&
water	85:14	0:0	4	p_buffer
op	85:22	0:0	4	[
water	85:23	0:0	4	8
op	85:24	0:0	4	]
arg	85:27	85:47	3	FISBONE_BASE_OFFSET
water	85:27	0:0	4	FISBONE_BASE_OFFSET
water	85:48	0:0	2	;
call	86:4	86:50	2	SetDWLE
arg	86:13	86:26	3	&p_buffer[12]
op	86:13	0:0	4	&
water	86:14	0:0	4	p_buffer
op	86:22	0:0	4	[
water	86:23	0:0	4	12
op	86:25	0:0	4	]
arg	86:28	86:50	3	p_stream->i_serial_no
water	86:28	0:0	4	p_stream
op	86:36	0:0	4	->
water	86:38	0:0	4	i_serial_no
water	86:51	0:0	2	;
call	87:4	87:44	2	SetDWLE
arg	87:13	87:26	3	&p_buffer[16]
op	87:13	0:0	4	&
water	87:14	0:0	4	p_buffer
op	87:22	0:0	4	[
water	87:23	0:0	4	16
op	87:25	0:0	4	]
arg	87:28	87:44	3	headers.i_count
water	87:28	0:0	4	headers
op	87:35	0:0	4	.
water	87:36	0:0	4	i_count
water	87:45	0:0	2	;
switch	89:4	102:4	2	(p_input -> p_fmt -> i_cat)
cond	89:13	89:29	3	p_input -> p_fmt -> i_cat
water	89:13	0:0	4	p_input
op	89:20	0:0	4	->
water	89:22	0:0	4	p_fmt
op	89:27	0:0	4	->
water	89:29	0:0	4	i_cat
stmts	90:4	102:4	3	
water	90:4	0:0	4	{
label	91:8	91:21	4	case VIDEO_ES :
call	92:12	92:75	4	SetQWLE
arg	92:21	92:38	5	&(*pp_buffer)[20]
op	92:21	0:0	6	&
water	92:22	0:0	6	(
op	92:23	0:0	6	*
water	92:24	0:0	6	pp_buffer
water	92:33	0:0	6	)
op	92:34	0:0	6	[
water	92:35	0:0	6	20
op	92:37	0:0	6	]
arg	92:40	92:75	5	p_input->p_fmt->video.i_frame_rate
water	92:40	0:0	6	p_input
op	92:47	0:0	6	->
water	92:49	0:0	6	p_fmt
op	92:54	0:0	6	->
water	92:56	0:0	6	video
op	92:61	0:0	6	.
water	92:62	0:0	6	i_frame_rate
water	92:76	0:0	4	;
call	93:12	93:80	4	SetQWLE
arg	93:21	93:38	5	&(*pp_buffer)[28]
op	93:21	0:0	6	&
water	93:22	0:0	6	(
op	93:23	0:0	6	*
water	93:24	0:0	6	pp_buffer
water	93:33	0:0	6	)
op	93:34	0:0	6	[
water	93:35	0:0	6	28
op	93:37	0:0	6	]
arg	93:40	93:80	5	p_input->p_fmt->video.i_frame_rate_base
water	93:40	0:0	6	p_input
op	93:47	0:0	6	->
water	93:49	0:0	6	p_fmt
op	93:54	0:0	6	->
water	93:56	0:0	6	video
op	93:61	0:0	6	.
water	93:62	0:0	6	i_frame_rate_base
water	93:81	0:0	4	;
break	94:8	94:13	4	
label	95:8	95:21	4	case AUDIO_ES :
call	96:12	96:69	4	SetQWLE
arg	96:21	96:38	5	&(*pp_buffer)[20]
op	96:21	0:0	6	&
water	96:22	0:0	6	(
op	96:23	0:0	6	*
water	96:24	0:0	6	pp_buffer
water	96:33	0:0	6	)
op	96:34	0:0	6	[
water	96:35	0:0	6	20
op	96:37	0:0	6	]
arg	96:40	96:69	5	p_input->p_fmt->audio.i_rate
water	96:40	0:0	6	p_input
op	96:47	0:0	6	->
water	96:49	0:0	6	p_fmt
op	96:54	0:0	6	->
water	96:56	0:0	6	audio
op	96:61	0:0	6	.
water	96:62	0:0	6	i_rate
water	96:70	0:0	4	;
call	97:12	97:42	4	SetQWLE
arg	97:21	97:38	5	&(*pp_buffer)[28]
op	97:21	0:0	6	&
water	97:22	0:0	6	(
op	97:23	0:0	6	*
water	97:24	0:0	6	pp_buffer
water	97:33	0:0	6	)
op	97:34	0:0	6	[
water	97:35	0:0	6	28
op	97:37	0:0	6	]
arg	97:40	97:42	5	1
water	97:40	0:0	6	1
water	97:43	0:0	4	;
break	98:8	98:13	4	
label	99:8	99:15	4	default :
call	100:12	100:45	4	SetQWLE
arg	100:21	100:38	5	&(*pp_buffer)[20]
op	100:21	0:0	6	&
water	100:22	0:0	6	(
op	100:23	0:0	6	*
water	100:24	0:0	6	pp_buffer
water	100:33	0:0	6	)
op	100:34	0:0	6	[
water	100:35	0:0	6	20
op	100:37	0:0	6	]
arg	100:40	100:45	5	1000
water	100:40	0:0	6	1000
water	100:46	0:0	4	;
call	101:12	101:42	4	SetQWLE
arg	101:21	101:38	5	&(*pp_buffer)[28]
op	101:21	0:0	6	&
water	101:22	0:0	6	(
op	101:23	0:0	6	*
water	101:24	0:0	6	pp_buffer
water	101:33	0:0	6	)
op	101:34	0:0	6	[
water	101:35	0:0	6	28
op	101:37	0:0	6	]
arg	101:40	101:42	5	1
water	101:40	0:0	6	1
water	101:43	0:0	4	;
water	102:4	0:0	4	}
if	104:4	105:107	2	(p_input -> p_fmt -> p_extra)
cond	104:9	104:25	3	p_input -> p_fmt -> p_extra
water	104:9	0:0	4	p_input
op	104:16	0:0	4	->
water	104:18	0:0	4	p_fmt
op	104:23	0:0	4	->
water	104:25	0:0	4	p_extra
stmts	105:8	105:107	3	
call	105:8	105:106	4	SetDWLE
arg	105:17	105:34	5	&(*pp_buffer)[44]
op	105:17	0:0	6	&
water	105:18	0:0	6	(
op	105:19	0:0	6	*
water	105:20	0:0	6	pp_buffer
water	105:29	0:0	6	)
op	105:30	0:0	6	[
water	105:31	0:0	6	44
op	105:33	0:0	6	]
arg	105:36	105:106	5	xiph_CountHeaders(p_input->p_fmt->p_extra,p_input->p_fmt->i_extra)
call	105:36	105:104	6	xiph_CountHeaders
arg	105:55	105:78	7	p_input->p_fmt->p_extra
water	105:55	0:0	8	p_input
op	105:62	0:0	8	->
water	105:64	0:0	8	p_fmt
op	105:69	0:0	8	->
water	105:71	0:0	8	p_extra
arg	105:80	105:104	7	p_input->p_fmt->i_extra
water	105:80	0:0	8	p_input
op	105:87	0:0	8	->
water	105:89	0:0	8	p_fmt
op	105:94	0:0	8	->
water	105:96	0:0	8	i_extra
water	105:107	0:0	4	;
if	106:4	113:4	2	(headers . i_size > 0)
cond	106:9	106:26	3	headers . i_size > 0
water	106:9	0:0	4	headers
op	106:16	0:0	4	.
water	106:17	0:0	4	i_size
op	106:24	0:0	4	>
water	106:26	0:0	4	0
stmts	107:4	113:4	3	
water	107:4	0:0	4	{
water	108:8	0:0	4	psz_header
op	108:19	0:0	4	=
op	108:21	0:0	4	*
water	108:22	0:0	4	pp_buffer
op	108:32	0:0	4	+
water	108:34	0:0	4	FISBONE_BASE_SIZE
water	108:51	0:0	4	;
call	109:8	109:89	4	memcpy
arg	109:16	109:26	5	psz_header
water	109:16	0:0	6	psz_header
arg	109:28	109:52	5	headers.psz_content_type
water	109:28	0:0	6	headers
op	109:35	0:0	6	.
water	109:36	0:0	6	psz_content_type
arg	109:54	109:89	5	strlen(headers.psz_content_type)
call	109:54	109:87	6	strlen
arg	109:62	109:87	7	headers.psz_content_type
water	109:62	0:0	8	headers
op	109:69	0:0	8	.
water	109:70	0:0	8	psz_content_type
water	109:90	0:0	4	;
water	110:8	0:0	4	psz_header
op	110:19	0:0	4	+=
call	110:22	110:55	4	strlen
arg	110:30	110:55	5	headers.psz_content_type
water	110:30	0:0	6	headers
op	110:37	0:0	6	.
water	110:38	0:0	6	psz_content_type
water	110:56	0:0	4	;
if	111:8	112:78	4	(headers . psz_role)
cond	111:13	111:21	5	headers . psz_role
water	111:13	0:0	6	headers
op	111:20	0:0	6	.
water	111:21	0:0	6	psz_role
stmts	112:12	112:78	5	
call	112:12	112:77	6	memcpy
arg	112:20	112:30	7	psz_header
water	112:20	0:0	8	psz_header
arg	112:32	112:48	7	headers.psz_role
water	112:32	0:0	8	headers
op	112:39	0:0	8	.
water	112:40	0:0	8	psz_role
arg	112:50	112:77	7	strlen(headers.psz_role)
call	112:50	112:75	8	strlen
arg	112:58	112:75	9	headers.psz_role
water	112:58	0:0	10	headers
op	112:65	0:0	10	.
water	112:66	0:0	10	psz_role
water	112:78	0:0	6	;
water	113:4	0:0	4	}
op	114:4	0:0	2	*
water	114:5	0:0	2	pi_size
op	114:13	0:0	2	=
water	114:15	0:0	2	FISBONE_BASE_SIZE
op	114:33	0:0	2	+
water	114:35	0:0	2	headers
op	114:42	0:0	2	.
water	114:43	0:0	2	i_size
water	114:49	0:0	2	;
call	115:4	115:35	2	free
arg	115:10	115:35	3	headers.psz_content_type
water	115:10	0:0	4	headers
op	115:17	0:0	4	.
water	115:18	0:0	4	psz_content_type
water	115:36	0:0	2	;
call	116:4	116:27	2	free
arg	116:10	116:27	3	headers.psz_role
water	116:10	0:0	4	headers
op	116:17	0:0	4	.
water	116:18	0:0	4	psz_role
water	116:28	0:0	2	;
