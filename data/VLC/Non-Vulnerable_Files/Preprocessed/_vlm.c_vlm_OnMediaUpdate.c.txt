func	2:0	116:0	0	static int	vlm_OnMediaUpdate
params	2:28	0:0	1	
param	2:30	2:42	2	vlm_t *	p_vlm
param	2:44	2:69	2	vlm_media_sys_t *	p_media
stmnts	0:0	115:22	1	
decl	4:4	4:38	2	vlm_media_t	*p_cfg
op	4:23	0:0	2	=
op	4:25	0:0	2	&
water	4:26	0:0	2	p_media
op	4:33	0:0	2	->
water	4:35	0:0	2	cfg
if	6:4	106:4	2	(p_cfg -> b_vod && p_vlm -> p_vod)
cond	6:8	6:31	3	p_cfg -> b_vod && p_vlm -> p_vod
water	6:8	0:0	4	p_cfg
op	6:13	0:0	4	->
water	6:15	0:0	4	b_vod
op	6:21	0:0	4	&&
water	6:24	0:0	4	p_vlm
op	6:29	0:0	4	->
water	6:31	0:0	4	p_vod
stmts	7:4	106:4	3	
water	7:4	0:0	4	{
if	8:8	12:8	4	(! p_cfg -> b_enabled && p_media -> vod . p_media)
cond	8:12	8:46	5	! p_cfg -> b_enabled && p_media -> vod . p_media
op	8:12	0:0	6	!
water	8:13	0:0	6	p_cfg
op	8:18	0:0	6	->
water	8:20	0:0	6	b_enabled
op	8:30	0:0	6	&&
water	8:33	0:0	6	p_media
op	8:40	0:0	6	->
water	8:42	0:0	6	vod
op	8:45	0:0	6	.
water	8:46	0:0	6	p_media
stmts	9:8	12:8	5	
water	9:8	0:0	6	{
call	10:12	10:75	6	p_vlm->p_vod->pf_media_del
arg	10:40	10:52	7	p_vlm->p_vod
water	10:40	0:0	8	p_vlm
op	10:45	0:0	8	->
water	10:47	0:0	8	p_vod
arg	10:54	10:75	7	p_media->vod.p_media
water	10:54	0:0	8	p_media
op	10:61	0:0	8	->
water	10:63	0:0	8	vod
op	10:66	0:0	8	.
water	10:67	0:0	8	p_media
water	10:76	0:0	6	;
water	11:12	0:0	6	p_media
op	11:19	0:0	6	->
water	11:21	0:0	6	vod
op	11:24	0:0	6	.
water	11:25	0:0	6	p_media
op	11:33	0:0	6	=
water	11:35	0:0	6	NULL
water	11:39	0:0	6	;
water	12:8	0:0	6	}
else	13:8	105:8	4
stmts	13:13	105:8	5	
if	13:13	105:8	6	(p_cfg -> b_enabled && ! p_media -> vod . p_media && p_cfg -> i_input)
cond	13:17	13:69	7	p_cfg -> b_enabled && ! p_media -> vod . p_media && p_cfg -> i_input
water	13:17	0:0	8	p_cfg
op	13:22	0:0	8	->
water	13:24	0:0	8	b_enabled
op	13:34	0:0	8	&&
op	13:37	0:0	8	!
water	13:38	0:0	8	p_media
op	13:45	0:0	8	->
water	13:47	0:0	8	vod
op	13:50	0:0	8	.
water	13:51	0:0	8	p_media
op	13:59	0:0	8	&&
water	13:62	0:0	8	p_cfg
op	13:67	0:0	8	->
water	13:69	0:0	8	i_input
stmts	14:8	105:8	7	
water	14:8	0:0	8	{
decl	16:12	16:35	8	input_thread_t	*p_input
decl	17:12	17:28	8	char	*psz_output
decl	18:12	18:28	8	char	*psz_header
decl	19:12	19:25	8	char	*psz_dup
decl	20:12	20:17	8	int	i
call	21:12	21:47	8	vlc_gc_decref
arg	21:27	21:47	9	p_media->vod.p_item
water	21:27	0:0	10	p_media
op	21:34	0:0	10	->
water	21:36	0:0	10	vod
op	21:39	0:0	10	.
water	21:40	0:0	10	p_item
water	21:48	0:0	8	;
if	22:12	28:12	8	(strstr (p_cfg -> ppsz_input [ 0 ] ,"://" ) == NULL)
cond	22:16	22:57	9	strstr (p_cfg -> ppsz_input [ 0 ] ,"://" ) == NULL
call	22:16	22:52	10	strstr
arg	22:24	22:44	11	p_cfg->ppsz_input[0]
water	22:24	0:0	12	p_cfg
op	22:29	0:0	12	->
water	22:31	0:0	12	ppsz_input
op	22:41	0:0	12	[
water	22:42	0:0	12	0
op	22:43	0:0	12	]
arg	22:46	22:52	11	"://"
water	22:46	0:0	12	"://"
op	22:54	0:0	10	==
water	22:57	0:0	10	NULL
stmts	23:12	28:12	9	
water	23:12	0:0	10	{
decl	24:16	24:74	10	char	*psz_uri
op	24:30	0:0	10	=
call	24:32	24:73	11	vlc_path2uri
arg	24:46	24:66	12	p_cfg->ppsz_input[0]
water	24:46	0:0	13	p_cfg
op	24:51	0:0	13	->
water	24:53	0:0	13	ppsz_input
op	24:63	0:0	13	[
water	24:64	0:0	13	0
op	24:65	0:0	13	]
arg	24:68	24:73	12	NULL
water	24:68	0:0	13	NULL
water	25:16	0:0	10	p_media
op	25:23	0:0	10	->
water	25:25	0:0	10	vod
op	25:28	0:0	10	.
water	25:29	0:0	10	p_item
op	25:36	0:0	10	=
call	25:38	26:70	10	input_item_New
arg	25:54	25:61	11	psz_uri
water	25:54	0:0	12	psz_uri
arg	26:54	26:70	11	p_cfg->psz_name
water	26:54	0:0	12	p_cfg
op	26:59	0:0	12	->
water	26:61	0:0	12	psz_name
water	26:71	0:0	10	;
call	27:16	27:30	10	free
arg	27:22	27:30	11	psz_uri
water	27:22	0:0	12	psz_uri
water	27:31	0:0	10	;
water	28:12	0:0	10	}
else	29:12	31:71	8
stmts	30:16	31:71	9	
water	30:16	0:0	10	p_media
op	30:23	0:0	10	->
water	30:25	0:0	10	vod
op	30:28	0:0	10	.
water	30:29	0:0	10	p_item
op	30:36	0:0	10	=
call	30:38	31:70	10	input_item_New
arg	30:54	30:74	11	p_cfg->ppsz_input[0]
water	30:54	0:0	12	p_cfg
op	30:59	0:0	12	->
water	30:61	0:0	12	ppsz_input
op	30:71	0:0	12	[
water	30:72	0:0	12	0
op	30:73	0:0	12	]
arg	31:54	31:70	11	p_cfg->psz_name
water	31:54	0:0	12	p_cfg
op	31:59	0:0	12	->
water	31:61	0:0	12	psz_name
water	31:71	0:0	10	;
if	32:12	36:12	8	(p_cfg -> psz_output)
cond	32:16	32:23	9	p_cfg -> psz_output
water	32:16	0:0	10	p_cfg
op	32:21	0:0	10	->
water	32:23	0:0	10	psz_output
stmts	33:12	36:12	9	
water	33:12	0:0	10	{
if	34:16	35:37	10	(asprintf (& psz_output ,"%s:description" ,p_cfg -> psz_output ) == - 1)
cond	34:20	34:86	11	asprintf (& psz_output ,"%s:description" ,p_cfg -> psz_output ) == - 1
call	34:20	34:79	12	asprintf
arg	34:30	34:41	13	&psz_output
op	34:30	0:0	14	&
water	34:31	0:0	14	psz_output
arg	34:43	34:59	13	"%s:description"
water	34:43	0:0	14	"%s:description"
arg	34:61	34:79	13	p_cfg->psz_output
water	34:61	0:0	14	p_cfg
op	34:66	0:0	14	->
water	34:68	0:0	14	psz_output
op	34:82	0:0	12	==
op	34:85	0:0	12	-
water	34:86	0:0	12	1
stmts	35:20	35:37	11	
water	35:20	0:0	12	psz_output
op	35:31	0:0	12	=
water	35:33	0:0	12	NULL
water	35:37	0:0	12	;
water	36:12	0:0	10	}
else	37:12	38:53	8
stmts	38:16	38:53	9	
water	38:16	0:0	10	psz_output
op	38:27	0:0	10	=
call	38:29	38:52	10	strdup
arg	38:37	38:52	11	"#description"
water	38:37	0:0	12	"#description"
water	38:53	0:0	10	;
if	39:12	43:12	8	(psz_output &&asprintf (& psz_dup ,"sout=%s" ,psz_output ) != - 1)
cond	39:16	39:78	9	psz_output &&asprintf (& psz_dup ,"sout=%s" ,psz_output ) != - 1
water	39:16	0:0	10	psz_output
op	39:27	0:0	10	&&
call	39:30	39:72	10	asprintf
arg	39:40	39:48	11	&psz_dup
op	39:40	0:0	12	&
water	39:41	0:0	12	psz_dup
arg	39:50	39:59	11	"sout=%s"
water	39:50	0:0	12	"sout=%s"
arg	39:61	39:72	11	psz_output
water	39:61	0:0	12	psz_output
op	39:74	0:0	10	!=
op	39:77	0:0	10	-
water	39:78	0:0	10	1
stmts	40:12	43:12	9	
water	40:12	0:0	10	{
call	41:16	41:93	10	input_item_AddOption
arg	41:38	41:57	11	p_media->vod.p_item
water	41:38	0:0	12	p_media
op	41:45	0:0	12	->
water	41:47	0:0	12	vod
op	41:50	0:0	12	.
water	41:51	0:0	12	p_item
arg	41:59	41:66	11	psz_dup
water	41:59	0:0	12	psz_dup
arg	41:68	41:93	11	VLC_INPUT_OPTION_TRUSTED
water	41:68	0:0	12	VLC_INPUT_OPTION_TRUSTED
water	41:94	0:0	10	;
call	42:16	42:30	10	free
arg	42:22	42:30	11	psz_dup
water	42:22	0:0	12	psz_dup
water	42:31	0:0	10	;
water	43:12	0:0	10	}
call	44:12	44:29	8	free
arg	44:18	44:29	9	psz_output
water	44:18	0:0	10	psz_output
water	44:30	0:0	8	;
for	45:12	47:87	8	(i = 0 ;i < p_cfg -> i_option;i ++)
forinit	45:17	45:22	9	i = 0 ;
water	45:17	0:0	10	i
op	45:19	0:0	10	=
water	45:21	0:0	10	0
water	45:22	0:0	10	;
cond	45:24	45:35	9	i < p_cfg -> i_option
water	45:24	0:0	10	i
op	45:26	0:0	10	<
water	45:28	0:0	10	p_cfg
op	45:33	0:0	10	->
water	45:35	0:0	10	i_option
forexpr	45:45	45:46	9	i ++
water	45:45	0:0	10	i
op	45:46	0:0	10	++
stmts	46:16	47:87	9	
call	46:16	47:86	10	input_item_AddOption
arg	46:38	46:57	11	p_media->vod.p_item
water	46:38	0:0	12	p_media
op	46:45	0:0	12	->
water	46:47	0:0	12	vod
op	46:50	0:0	12	.
water	46:51	0:0	12	p_item
arg	47:38	47:59	11	p_cfg->ppsz_option[i]
water	47:38	0:0	12	p_cfg
op	47:43	0:0	12	->
water	47:45	0:0	12	ppsz_option
op	47:56	0:0	12	[
water	47:57	0:0	12	i
op	47:58	0:0	12	]
arg	47:61	47:86	11	VLC_INPUT_OPTION_TRUSTED
water	47:61	0:0	12	VLC_INPUT_OPTION_TRUSTED
water	47:87	0:0	10	;
if	48:12	49:33	8	(asprintf (& psz_header ,_ ("Media: %s" ) ,p_cfg -> psz_name ) == - 1)
cond	48:16	48:77	9	asprintf (& psz_header ,_ ("Media: %s" ) ,p_cfg -> psz_name ) == - 1
call	48:16	48:71	10	asprintf
arg	48:26	48:37	11	&psz_header
op	48:26	0:0	12	&
water	48:27	0:0	12	psz_header
arg	48:39	48:53	11	_("Media: %s")
call	48:39	48:52	12	_
arg	48:41	48:52	13	"Media: %s"
water	48:41	0:0	14	"Media: %s"
arg	48:55	48:71	11	p_cfg->psz_name
water	48:55	0:0	12	p_cfg
op	48:60	0:0	12	->
water	48:62	0:0	12	psz_name
op	48:73	0:0	10	==
op	48:76	0:0	10	-
water	48:77	0:0	10	1
stmts	49:16	49:33	9	
water	49:16	0:0	10	psz_header
op	49:27	0:0	10	=
water	49:29	0:0	10	NULL
water	49:33	0:0	10	;
decl	50:12	50:40	8	sout_description_data_t	data
call	51:12	51:39	8	TAB_INIT
arg	51:21	51:30	9	data.i_es
water	51:21	0:0	10	data
op	51:25	0:0	10	.
water	51:26	0:0	10	i_es
arg	51:32	51:39	9	data.es
water	51:32	0:0	10	data
op	51:36	0:0	10	.
water	51:37	0:0	10	es
water	51:40	0:0	8	;
water	52:12	0:0	8	p_input
op	52:20	0:0	8	=
call	52:22	52:88	8	input_Create
arg	52:36	52:48	9	p_vlm->p_vod
water	52:36	0:0	10	p_vlm
op	52:41	0:0	10	->
water	52:43	0:0	10	p_vod
arg	52:50	52:69	9	p_media->vod.p_item
water	52:50	0:0	10	p_media
op	52:57	0:0	10	->
water	52:59	0:0	10	vod
op	52:62	0:0	10	.
water	52:63	0:0	10	p_item
arg	52:71	52:81	9	psz_header
water	52:71	0:0	10	psz_header
arg	52:83	52:88	9	NULL
water	52:83	0:0	10	NULL
water	52:89	0:0	8	;
if	53:12	71:12	8	(p_input)
cond	53:16	53:16	9	p_input
water	53:16	0:0	10	p_input
stmts	54:12	71:12	9	
water	54:12	0:0	10	{
decl	55:16	55:38	10	vlc_sem_t	sem_preparse
call	56:16	56:47	10	vlc_sem_init
arg	56:30	56:43	11	&sem_preparse
op	56:30	0:0	12	&
water	56:31	0:0	12	sem_preparse
arg	56:45	56:47	11	0
water	56:45	0:0	12	0
water	56:48	0:0	10	;
decl	57:16	58:75	10	preparse_data_t	preparse
op	57:41	0:0	10	=
water	57:43	0:0	10	{
op	57:45	0:0	10	.
water	57:46	0:0	10	p_sem
op	57:52	0:0	10	=
op	57:54	0:0	10	&
water	57:55	0:0	10	sem_preparse
water	57:67	0:0	10	,
op	58:36	0:0	10	.
water	58:37	0:0	10	b_mux
op	58:43	0:0	10	=
water	58:45	0:0	10	(
water	58:46	0:0	10	p_cfg
op	58:51	0:0	10	->
water	58:53	0:0	10	vod
op	58:56	0:0	10	.
water	58:57	0:0	10	psz_mux
op	58:65	0:0	10	!=
water	58:68	0:0	10	NULL
water	58:72	0:0	10	)
water	58:74	0:0	10	}
call	59:16	60:43	10	var_AddCallback
arg	59:33	59:40	11	p_input
water	59:33	0:0	12	p_input
arg	59:42	59:54	11	"intf-event"
water	59:42	0:0	12	"intf-event"
arg	59:56	59:74	11	InputEventPreparse
water	59:56	0:0	12	InputEventPreparse
arg	60:33	60:43	11	&preparse
op	60:33	0:0	12	&
water	60:34	0:0	12	preparse
water	60:44	0:0	10	;
water	61:16	0:0	10	data
op	61:20	0:0	10	.
water	61:21	0:0	10	sem
op	61:25	0:0	10	=
op	61:27	0:0	10	&
water	61:28	0:0	10	sem_preparse
water	61:40	0:0	10	;
call	62:16	62:78	10	var_Create
arg	62:28	62:35	11	p_input
water	62:28	0:0	12	p_input
arg	62:37	62:60	11	"sout-description-data"
water	62:37	0:0	12	"sout-description-data"
arg	62:62	62:78	11	VLC_VAR_ADDRESS
water	62:62	0:0	12	VLC_VAR_ADDRESS
water	62:79	0:0	10	;
call	63:16	63:72	10	var_SetAddress
arg	63:32	63:39	11	p_input
water	63:32	0:0	12	p_input
arg	63:41	63:64	11	"sout-description-data"
water	63:41	0:0	12	"sout-description-data"
arg	63:66	63:72	11	&data
op	63:66	0:0	12	&
water	63:67	0:0	12	data
water	63:73	0:0	10	;
if	64:16	65:49	10	(!input_Start (p_input ))
cond	64:20	64:42	11	!input_Start (p_input )
op	64:20	0:0	12	!
call	64:21	64:42	12	input_Start
arg	64:34	64:42	13	p_input
water	64:34	0:0	14	p_input
stmts	65:20	65:49	11	
call	65:20	65:48	12	vlc_sem_wait
arg	65:34	65:48	13	&sem_preparse
op	65:34	0:0	14	&
water	65:35	0:0	14	sem_preparse
water	65:49	0:0	12	;
call	66:16	67:43	10	var_DelCallback
arg	66:33	66:40	11	p_input
water	66:33	0:0	12	p_input
arg	66:42	66:54	11	"intf-event"
water	66:42	0:0	12	"intf-event"
arg	66:56	66:74	11	InputEventPreparse
water	66:56	0:0	12	InputEventPreparse
arg	67:33	67:43	11	&preparse
op	67:33	0:0	12	&
water	67:34	0:0	12	preparse
water	67:44	0:0	10	;
call	68:16	68:42	10	input_Stop
arg	68:28	68:35	11	p_input
water	68:28	0:0	12	p_input
arg	68:37	68:42	11	true
water	68:37	0:0	12	true
water	68:43	0:0	10	;
call	69:16	69:37	10	input_Close
arg	69:29	69:37	11	p_input
water	69:29	0:0	12	p_input
water	69:38	0:0	10	;
call	70:16	70:47	10	vlc_sem_destroy
arg	70:33	70:47	11	&sem_preparse
op	70:33	0:0	12	&
water	70:34	0:0	12	sem_preparse
water	70:48	0:0	10	;
water	71:12	0:0	10	}
call	72:12	72:29	8	free
arg	72:18	72:29	9	psz_header
water	72:18	0:0	10	psz_header
water	72:30	0:0	8	;
decl	74:12	74:52	8	input_item_t	item
op	74:30	0:0	8	=
op	74:32	0:0	8	*
water	74:33	0:0	8	p_media
op	74:40	0:0	8	->
water	74:42	0:0	8	vod
op	74:45	0:0	8	.
water	74:46	0:0	8	p_item
water	74:53	0:0	8	;
if	75:12	96:12	8	(p_cfg -> vod . psz_mux)
cond	75:16	75:27	9	p_cfg -> vod . psz_mux
water	75:16	0:0	10	p_cfg
op	75:21	0:0	10	->
water	75:23	0:0	10	vod
op	75:26	0:0	10	.
water	75:27	0:0	10	psz_mux
stmts	76:12	96:12	9	
water	76:12	0:0	10	{
decl	77:16	77:35	10	const char	*psz_mux
if	78:16	79:36	10	(!strcmp (p_cfg -> vod . psz_mux ,"ps" ))
cond	78:20	78:52	11	!strcmp (p_cfg -> vod . psz_mux ,"ps" )
op	78:20	0:0	12	!
call	78:21	78:52	12	strcmp
arg	78:28	78:46	13	p_cfg->vod.psz_mux
water	78:28	0:0	14	p_cfg
op	78:33	0:0	14	->
water	78:35	0:0	14	vod
op	78:38	0:0	14	.
water	78:39	0:0	14	psz_mux
arg	78:48	78:52	13	"ps"
water	78:48	0:0	14	"ps"
stmts	79:20	79:36	11	
water	79:20	0:0	12	psz_mux
op	79:28	0:0	12	=
water	79:30	0:0	12	"mp2p"
water	79:36	0:0	12	;
else	80:16	81:36	10
stmts	80:21	81:36	11	
if	80:21	81:36	12	(!strcmp (p_cfg -> vod . psz_mux ,"ts" ))
cond	80:25	80:57	13	!strcmp (p_cfg -> vod . psz_mux ,"ts" )
op	80:25	0:0	14	!
call	80:26	80:57	14	strcmp
arg	80:33	80:51	15	p_cfg->vod.psz_mux
water	80:33	0:0	16	p_cfg
op	80:38	0:0	16	->
water	80:40	0:0	16	vod
op	80:43	0:0	16	.
water	80:44	0:0	16	psz_mux
arg	80:53	80:57	15	"ts"
water	80:53	0:0	16	"ts"
stmts	81:20	81:36	13	
water	81:20	0:0	14	psz_mux
op	81:28	0:0	14	=
water	81:30	0:0	14	"mp2t"
water	81:36	0:0	14	;
else	82:16	83:48	10
stmts	83:20	83:48	11	
water	83:20	0:0	12	psz_mux
op	83:28	0:0	12	=
water	83:30	0:0	12	p_cfg
op	83:35	0:0	12	->
water	83:37	0:0	12	vod
op	83:40	0:0	12	.
water	83:41	0:0	12	psz_mux
water	83:48	0:0	12	;
decl	84:16	84:43	10	es_format_t	es
water	84:30	0:0	10	,
decl	84:16	84:43	10	es_format_t	*p_es
op	84:38	0:0	10	=
op	84:40	0:0	10	&
water	84:41	0:0	10	es
union	85:16	89:16	10	<anonymous_85:16>
decl	86:20	86:32	11	char	text[5]
decl	87:20	87:42	11	unsigned char	utext[5]
decl	88:20	88:34	11	uint32_t	value
decl	85:16	89:24	10	<anonymous_85:16>	fourcc
call	90:16	90:55	10	sprintf
arg	90:25	90:36	11	fourcc.text
water	90:25	0:0	12	fourcc
op	90:31	0:0	12	.
water	90:32	0:0	12	text
arg	90:38	90:45	11	"%4.4s"
water	90:38	0:0	12	"%4.4s"
arg	90:47	90:55	11	psz_mux
water	90:47	0:0	12	psz_mux
water	90:56	0:0	10	;
for	91:16	92:62	10	( int i = 0 ;i < 4;i ++)
forinit	0:0	91:30	11	 int i = 0 ;
decl	91:21	91:30	12	int	i
op	91:27	0:0	12	=
water	91:29	0:0	12	0
cond	91:32	91:36	11	i < 4
water	91:32	0:0	12	i
op	91:34	0:0	12	<
water	91:36	0:0	12	4
forexpr	91:39	91:40	11	i ++
water	91:39	0:0	12	i
op	91:40	0:0	12	++
stmts	92:20	92:62	11	
water	92:20	0:0	12	fourcc
op	92:26	0:0	12	.
water	92:27	0:0	12	utext
op	92:32	0:0	12	[
water	92:33	0:0	12	i
op	92:34	0:0	12	]
op	92:36	0:0	12	=
call	92:38	92:61	12	tolower
arg	92:46	92:61	13	fourcc.utext[i]
water	92:46	0:0	14	fourcc
op	92:52	0:0	14	.
water	92:53	0:0	14	utext
op	92:58	0:0	14	[
water	92:59	0:0	14	i
op	92:60	0:0	14	]
water	92:62	0:0	12	;
water	93:16	0:0	10	item
op	93:20	0:0	10	.
water	93:21	0:0	10	i_es
op	93:26	0:0	10	=
water	93:28	0:0	10	1
water	93:29	0:0	10	;
water	94:16	0:0	10	item
op	94:20	0:0	10	.
water	94:21	0:0	10	es
op	94:24	0:0	10	=
op	94:26	0:0	10	&
water	94:27	0:0	10	p_es
water	94:31	0:0	10	;
call	95:16	95:60	10	es_format_Init
arg	95:32	95:35	11	&es
op	95:32	0:0	12	&
water	95:33	0:0	12	es
arg	95:37	95:45	11	VIDEO_ES
water	95:37	0:0	12	VIDEO_ES
arg	95:47	95:60	11	fourcc.value
water	95:47	0:0	12	fourcc
op	95:53	0:0	12	.
water	95:54	0:0	12	value
water	95:61	0:0	10	;
water	96:12	0:0	10	}
else	97:12	101:12	8
stmts	98:12	101:12	9	
water	98:12	0:0	10	{
water	99:16	0:0	10	item
op	99:20	0:0	10	.
water	99:21	0:0	10	i_es
op	99:26	0:0	10	=
water	99:28	0:0	10	data
op	99:32	0:0	10	.
water	99:33	0:0	10	i_es
water	99:37	0:0	10	;
water	100:16	0:0	10	item
op	100:20	0:0	10	.
water	100:21	0:0	10	es
op	100:24	0:0	10	=
water	100:26	0:0	10	data
op	100:30	0:0	10	.
water	100:31	0:0	10	es
water	100:33	0:0	10	;
water	101:12	0:0	10	}
water	102:12	0:0	8	p_media
op	102:19	0:0	8	->
water	102:21	0:0	8	vod
op	102:24	0:0	8	.
water	102:25	0:0	8	p_media
op	102:33	0:0	8	=
call	102:35	103:75	8	p_vlm->p_vod->pf_media_new
arg	102:63	102:75	9	p_vlm->p_vod
water	102:63	0:0	10	p_vlm
op	102:68	0:0	10	->
water	102:70	0:0	10	p_vod
arg	103:52	103:67	9	p_cfg->psz_name
water	103:52	0:0	10	p_cfg
op	103:57	0:0	10	->
water	103:59	0:0	10	psz_name
arg	103:69	103:75	9	&item
op	103:69	0:0	10	&
water	103:70	0:0	10	item
water	103:76	0:0	8	;
call	104:12	104:40	8	TAB_CLEAN
arg	104:22	104:31	9	data.i_es
water	104:22	0:0	10	data
op	104:26	0:0	10	.
water	104:27	0:0	10	i_es
arg	104:33	104:40	9	data.es
water	104:33	0:0	10	data
op	104:37	0:0	10	.
water	104:38	0:0	10	es
water	104:41	0:0	8	;
water	105:8	0:0	8	}
water	106:4	0:0	4	}
else	107:4	108:52	2
stmts	107:9	108:52	3	
if	107:9	108:52	4	(p_cfg -> b_vod)
cond	107:14	107:21	5	p_cfg -> b_vod
water	107:14	0:0	6	p_cfg
op	107:19	0:0	6	->
water	107:21	0:0	6	b_vod
stmts	108:8	108:52	5	
call	108:8	108:51	6	msg_Err
arg	108:17	108:22	7	p_vlm
water	108:17	0:0	8	p_vlm
arg	108:24	108:51	7	"vod server is not loaded"
water	108:24	0:0	8	"vod server is not loaded"
water	108:52	0:0	6	;
else	109:4	112:4	2
stmts	110:4	112:4	3	
water	110:4	0:0	4	{
water	0:0	0:0	4	STATEMENTS
water	112:4	0:0	4	}
call	114:4	114:65	2	vlm_SendEventMediaChanged
arg	114:31	114:36	3	p_vlm
water	114:31	0:0	4	p_vlm
arg	114:38	114:47	3	p_cfg->id
water	114:38	0:0	4	p_cfg
op	114:43	0:0	4	->
water	114:45	0:0	4	id
arg	114:49	114:65	3	p_cfg->psz_name
water	114:49	0:0	4	p_cfg
op	114:54	0:0	4	->
water	114:56	0:0	4	psz_name
water	114:66	0:0	2	;
return	115:4	115:22	2	VLC_SUCCESS
water	115:11	0:0	3	VLC_SUCCESS
