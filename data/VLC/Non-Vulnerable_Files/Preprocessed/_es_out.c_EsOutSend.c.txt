func	2:0	99:0	0	static int	EsOutSend
params	2:20	0:0	1	
param	2:22	2:35	2	es_out_t *	out
param	2:37	2:52	2	es_out_id_t *	es
param	2:54	2:71	2	block_t *	p_block
stmnts	0:0	98:22	1	
decl	4:4	4:38	2	es_out_sys_t	*p_sys
op	4:26	0:0	2	=
water	4:28	0:0	2	out
op	4:31	0:0	2	->
water	4:33	0:0	2	p_sys
decl	5:4	5:44	2	input_thread_t	*p_input
op	5:28	0:0	2	=
water	5:30	0:0	2	p_sys
op	5:35	0:0	2	->
water	5:37	0:0	2	p_input
if	6:4	24:4	2	(libvlc_stats (p_input ))
cond	6:8	6:30	3	libvlc_stats (p_input )
call	6:8	6:30	4	libvlc_stats
arg	6:22	6:30	5	p_input
water	6:22	0:0	6	p_input
stmts	7:4	24:4	3	
water	7:4	0:0	4	{
decl	8:8	8:24	4	uint64_t	i_total
call	9:8	9:60	4	vlc_mutex_lock
arg	9:24	9:60	5	&p_input->p->counters.counters_lock
op	9:24	0:0	6	&
water	9:25	0:0	6	p_input
op	9:32	0:0	6	->
water	9:34	0:0	6	p
op	9:35	0:0	6	->
water	9:37	0:0	6	counters
op	9:45	0:0	6	.
water	9:46	0:0	6	counters_lock
water	9:61	0:0	4	;
call	10:8	11:50	4	stats_Update
arg	10:22	10:55	5	p_input->p->counters.p_demux_read
water	10:22	0:0	6	p_input
op	10:29	0:0	6	->
water	10:31	0:0	6	p
op	10:32	0:0	6	->
water	10:34	0:0	6	counters
op	10:42	0:0	6	.
water	10:43	0:0	6	p_demux_read
arg	11:22	11:39	5	p_block->i_buffer
water	11:22	0:0	6	p_block
op	11:29	0:0	6	->
water	11:31	0:0	6	i_buffer
arg	11:41	11:50	5	&i_total
op	11:41	0:0	6	&
water	11:42	0:0	6	i_total
water	11:51	0:0	4	;
call	12:8	12:74	4	stats_Update
arg	12:22	12:58	5	p_input->p->counters.p_demux_bitrate
water	12:22	0:0	6	p_input
op	12:29	0:0	6	->
water	12:31	0:0	6	p
op	12:32	0:0	6	->
water	12:34	0:0	6	counters
op	12:42	0:0	6	.
water	12:43	0:0	6	p_demux_bitrate
arg	12:60	12:67	5	i_total
water	12:60	0:0	6	i_total
arg	12:69	12:74	5	NULL
water	12:69	0:0	6	NULL
water	12:75	0:0	4	;
if	14:8	17:8	4	(p_block -> i_flags & BLOCK_FLAG_CORRUPTED)
cond	14:12	14:31	5	p_block -> i_flags & BLOCK_FLAG_CORRUPTED
water	14:12	0:0	6	p_block
op	14:19	0:0	6	->
water	14:21	0:0	6	i_flags
op	14:29	0:0	6	&
water	14:31	0:0	6	BLOCK_FLAG_CORRUPTED
stmts	15:8	17:8	5	
water	15:8	0:0	6	{
call	16:12	16:74	6	stats_Update
arg	16:26	16:64	7	p_input->p->counters.p_demux_corrupted
water	16:26	0:0	8	p_input
op	16:33	0:0	8	->
water	16:35	0:0	8	p
op	16:36	0:0	8	->
water	16:38	0:0	8	counters
op	16:46	0:0	8	.
water	16:47	0:0	8	p_demux_corrupted
arg	16:66	16:67	7	1
water	16:66	0:0	8	1
arg	16:69	16:74	7	NULL
water	16:69	0:0	8	NULL
water	16:75	0:0	6	;
water	17:8	0:0	6	}
if	19:8	22:8	4	(p_block -> i_flags & BLOCK_FLAG_DISCONTINUITY)
cond	19:12	19:31	5	p_block -> i_flags & BLOCK_FLAG_DISCONTINUITY
water	19:12	0:0	6	p_block
op	19:19	0:0	6	->
water	19:21	0:0	6	i_flags
op	19:29	0:0	6	&
water	19:31	0:0	6	BLOCK_FLAG_DISCONTINUITY
stmts	20:8	22:8	5	
water	20:8	0:0	6	{
call	21:12	21:78	6	stats_Update
arg	21:26	21:68	7	p_input->p->counters.p_demux_discontinuity
water	21:26	0:0	8	p_input
op	21:33	0:0	8	->
water	21:35	0:0	8	p
op	21:36	0:0	8	->
water	21:38	0:0	8	counters
op	21:46	0:0	8	.
water	21:47	0:0	8	p_demux_discontinuity
arg	21:70	21:71	7	1
water	21:70	0:0	8	1
arg	21:73	21:78	7	NULL
water	21:73	0:0	8	NULL
water	21:79	0:0	6	;
water	22:8	0:0	6	}
call	23:8	23:62	4	vlc_mutex_unlock
arg	23:26	23:62	5	&p_input->p->counters.counters_lock
op	23:26	0:0	6	&
water	23:27	0:0	6	p_input
op	23:34	0:0	6	->
water	23:36	0:0	6	p
op	23:37	0:0	6	->
water	23:39	0:0	6	counters
op	23:47	0:0	6	.
water	23:48	0:0	6	counters_lock
water	23:63	0:0	4	;
water	24:4	0:0	4	}
call	25:4	25:33	2	vlc_mutex_lock
arg	25:20	25:33	3	&p_sys->lock
op	25:20	0:0	4	&
water	25:21	0:0	4	p_sys
op	25:26	0:0	4	->
water	25:28	0:0	4	lock
water	25:34	0:0	2	;
if	27:4	34:4	2	(p_sys -> i_preroll_end >= 0)
cond	27:8	27:32	3	p_sys -> i_preroll_end >= 0
water	27:8	0:0	4	p_sys
op	27:13	0:0	4	->
water	27:15	0:0	4	i_preroll_end
op	27:29	0:0	4	>=
water	27:32	0:0	4	0
stmts	28:4	34:4	3	
water	28:4	0:0	4	{
decl	29:8	29:39	4	int64_t	i_date
op	29:23	0:0	4	=
water	29:25	0:0	4	p_block
op	29:32	0:0	4	->
water	29:34	0:0	4	i_pts
if	30:8	31:35	4	(p_block -> i_pts <= VLC_TS_INVALID)
cond	30:12	30:30	5	p_block -> i_pts <= VLC_TS_INVALID
water	30:12	0:0	6	p_block
op	30:19	0:0	6	->
water	30:21	0:0	6	i_pts
op	30:27	0:0	6	<=
water	30:30	0:0	6	VLC_TS_INVALID
stmts	31:12	31:35	5	
water	31:12	0:0	6	i_date
op	31:19	0:0	6	=
water	31:21	0:0	6	p_block
op	31:28	0:0	6	->
water	31:30	0:0	6	i_dts
water	31:35	0:0	6	;
if	32:8	33:50	4	(i_date < p_sys -> i_preroll_end)
cond	32:12	32:28	5	i_date < p_sys -> i_preroll_end
water	32:12	0:0	6	i_date
op	32:19	0:0	6	<
water	32:21	0:0	6	p_sys
op	32:26	0:0	6	->
water	32:28	0:0	6	i_preroll_end
stmts	33:12	33:50	5	
water	33:12	0:0	6	p_block
op	33:19	0:0	6	->
water	33:21	0:0	6	i_flags
op	33:29	0:0	6	|=
water	33:32	0:0	6	BLOCK_FLAG_PREROLL
water	33:50	0:0	6	;
water	34:4	0:0	4	}
if	35:4	40:4	2	(! es -> p_dec)
cond	35:8	35:13	3	! es -> p_dec
op	35:8	0:0	4	!
water	35:9	0:0	4	es
op	35:11	0:0	4	->
water	35:13	0:0	4	p_dec
stmts	36:4	40:4	3	
water	36:4	0:0	4	{
call	37:8	37:31	4	block_Release
arg	37:23	37:31	5	p_block
water	37:23	0:0	6	p_block
water	37:32	0:0	4	;
call	38:8	38:39	4	vlc_mutex_unlock
arg	38:26	38:39	5	&p_sys->lock
op	38:26	0:0	6	&
water	38:27	0:0	6	p_sys
op	38:32	0:0	6	->
water	38:34	0:0	6	lock
water	38:40	0:0	4	;
return	39:8	39:26	4	VLC_SUCCESS
water	39:15	0:0	5	VLC_SUCCESS
water	40:4	0:0	4	}
if	42:4	57:4	2	(p_input -> p -> p_sout)
cond	42:8	42:20	3	p_input -> p -> p_sout
water	42:8	0:0	4	p_input
op	42:15	0:0	4	->
water	42:17	0:0	4	p
op	42:18	0:0	4	->
water	42:20	0:0	4	p_sout
stmts	43:4	57:4	3	
water	43:4	0:0	4	{
if	45:8	50:8	4	(p_input -> p -> p_sout -> i_out_pace_nocontrol > 0 && p_input -> p -> b_out_pace_control)
cond	45:12	46:24	5	p_input -> p -> p_sout -> i_out_pace_nocontrol > 0 && p_input -> p -> b_out_pace_control
water	45:12	0:0	6	p_input
op	45:19	0:0	6	->
water	45:21	0:0	6	p
op	45:22	0:0	6	->
water	45:24	0:0	6	p_sout
op	45:30	0:0	6	->
water	45:32	0:0	6	i_out_pace_nocontrol
op	45:53	0:0	6	>
water	45:55	0:0	6	0
op	45:57	0:0	6	&&
water	46:12	0:0	6	p_input
op	46:19	0:0	6	->
water	46:21	0:0	6	p
op	46:22	0:0	6	->
water	46:24	0:0	6	b_out_pace_control
stmts	47:8	50:8	5	
water	47:8	0:0	6	{
call	48:12	48:55	6	msg_Dbg
arg	48:21	48:28	7	p_input
water	48:21	0:0	8	p_input
arg	48:30	48:55	7	"switching to sync mode"
water	48:30	0:0	8	"switching to sync mode"
water	48:56	0:0	6	;
water	49:12	0:0	6	p_input
op	49:19	0:0	6	->
water	49:21	0:0	6	p
op	49:22	0:0	6	->
water	49:24	0:0	6	b_out_pace_control
op	49:43	0:0	6	=
water	49:45	0:0	6	false
water	49:50	0:0	6	;
water	50:8	0:0	6	}
else	51:8	56:8	4
stmts	51:13	56:8	5	
if	51:13	56:8	6	(p_input -> p -> p_sout -> i_out_pace_nocontrol <= 0 && ! p_input -> p -> b_out_pace_control)
cond	51:17	52:30	7	p_input -> p -> p_sout -> i_out_pace_nocontrol <= 0 && ! p_input -> p -> b_out_pace_control
water	51:17	0:0	8	p_input
op	51:24	0:0	8	->
water	51:26	0:0	8	p
op	51:27	0:0	8	->
water	51:29	0:0	8	p_sout
op	51:35	0:0	8	->
water	51:37	0:0	8	i_out_pace_nocontrol
op	51:58	0:0	8	<=
water	51:61	0:0	8	0
op	51:63	0:0	8	&&
op	52:17	0:0	8	!
water	52:18	0:0	8	p_input
op	52:25	0:0	8	->
water	52:27	0:0	8	p
op	52:28	0:0	8	->
water	52:30	0:0	8	b_out_pace_control
stmts	53:8	56:8	7	
water	53:8	0:0	8	{
call	54:12	54:56	8	msg_Dbg
arg	54:21	54:28	9	p_input
water	54:21	0:0	10	p_input
arg	54:30	54:56	9	"switching to async mode"
water	54:30	0:0	10	"switching to async mode"
water	54:57	0:0	8	;
water	55:12	0:0	8	p_input
op	55:19	0:0	8	->
water	55:21	0:0	8	p
op	55:22	0:0	8	->
water	55:24	0:0	8	b_out_pace_control
op	55:43	0:0	8	=
water	55:45	0:0	8	true
water	55:49	0:0	8	;
water	56:8	0:0	8	}
water	57:4	0:0	4	}
if	59:4	65:4	2	(es -> p_dec_record)
cond	59:8	59:12	3	es -> p_dec_record
water	59:8	0:0	4	es
op	59:10	0:0	4	->
water	59:12	0:0	4	p_dec_record
stmts	60:4	65:4	3	
water	60:4	0:0	4	{
decl	61:8	61:51	4	block_t	*p_dup
op	61:23	0:0	4	=
call	61:25	61:50	5	block_Duplicate
arg	61:42	61:50	6	p_block
water	61:42	0:0	7	p_block
if	62:8	64:65	4	(p_dup)
cond	62:12	62:12	5	p_dup
water	62:12	0:0	6	p_dup
stmts	63:12	64:65	5	
call	63:12	64:64	6	input_DecoderDecode
arg	63:33	63:49	7	es->p_dec_record
water	63:33	0:0	8	es
op	63:35	0:0	8	->
water	63:37	0:0	8	p_dec_record
arg	63:51	63:56	7	p_dup
water	63:51	0:0	8	p_dup
arg	64:33	64:64	7	p_input->p->b_out_pace_control
water	64:33	0:0	8	p_input
op	64:40	0:0	8	->
water	64:42	0:0	8	p
op	64:43	0:0	8	->
water	64:45	0:0	8	b_out_pace_control
water	64:65	0:0	6	;
water	65:4	0:0	4	}
call	66:4	67:56	2	input_DecoderDecode
arg	66:25	66:34	3	es->p_dec
water	66:25	0:0	4	es
op	66:27	0:0	4	->
water	66:29	0:0	4	p_dec
arg	66:36	66:43	3	p_block
water	66:36	0:0	4	p_block
arg	67:25	67:56	3	p_input->p->b_out_pace_control
water	67:25	0:0	4	p_input
op	67:32	0:0	4	->
water	67:34	0:0	4	p
op	67:35	0:0	4	->
water	67:37	0:0	4	b_out_pace_control
water	67:57	0:0	2	;
decl	68:4	68:23	2	es_format_t	fmt_dsc
decl	69:4	69:27	2	vlc_meta_t	*p_meta_dsc
if	70:4	76:4	2	(input_DecoderHasFormatChanged (es -> p_dec ,& fmt_dsc ,& p_meta_dsc ))
cond	70:8	70:72	3	input_DecoderHasFormatChanged (es -> p_dec ,& fmt_dsc ,& p_meta_dsc )
call	70:8	70:72	4	input_DecoderHasFormatChanged
arg	70:39	70:48	5	es->p_dec
water	70:39	0:0	6	es
op	70:41	0:0	6	->
water	70:43	0:0	6	p_dec
arg	70:50	70:58	5	&fmt_dsc
op	70:50	0:0	6	&
water	70:51	0:0	6	fmt_dsc
arg	70:60	70:72	5	&p_meta_dsc
op	70:60	0:0	6	&
water	70:61	0:0	6	p_meta_dsc
stmts	71:4	76:4	3	
water	71:4	0:0	4	{
call	72:8	72:55	4	EsOutUpdateInfo
arg	72:25	72:28	5	out
water	72:25	0:0	6	out
arg	72:30	72:32	5	es
water	72:30	0:0	6	es
arg	72:34	72:42	5	&fmt_dsc
op	72:34	0:0	6	&
water	72:35	0:0	6	fmt_dsc
arg	72:44	72:55	5	p_meta_dsc
water	72:44	0:0	6	p_meta_dsc
water	72:56	0:0	4	;
call	73:8	73:34	4	es_format_Clean
arg	73:25	73:34	5	&fmt_dsc
op	73:25	0:0	6	&
water	73:26	0:0	6	fmt_dsc
water	73:35	0:0	4	;
if	74:8	75:41	4	(p_meta_dsc)
cond	74:12	74:12	5	p_meta_dsc
water	74:12	0:0	6	p_meta_dsc
stmts	75:12	75:41	5	
call	75:12	75:40	6	vlc_meta_Delete
arg	75:29	75:40	7	p_meta_dsc
water	75:29	0:0	8	p_meta_dsc
water	75:41	0:0	6	;
water	76:4	0:0	4	}
decl	78:4	78:17	2	bool	pb_cc[4]
call	79:4	79:47	2	input_DecoderIsCcPresent
arg	79:30	79:39	3	es->p_dec
water	79:30	0:0	4	es
op	79:32	0:0	4	->
water	79:34	0:0	4	p_dec
arg	79:41	79:47	3	pb_cc
water	79:41	0:0	4	pb_cc
water	79:48	0:0	2	;
for	80:4	96:4	2	( int i = 0 ;i < 4;i ++)
forinit	0:0	80:18	3	 int i = 0 ;
decl	80:9	80:18	4	int	i
op	80:15	0:0	4	=
water	80:17	0:0	4	0
cond	80:20	80:24	3	i < 4
water	80:20	0:0	4	i
op	80:22	0:0	4	<
water	80:24	0:0	4	4
forexpr	80:27	80:28	3	i ++
water	80:27	0:0	4	i
op	80:28	0:0	4	++
stmts	81:4	96:4	3	
water	81:4	0:0	4	{
decl	82:8	82:23	4	es_format_t	fmt
if	83:8	84:20	4	(es -> pb_cc_present [ i ] || ! pb_cc [ i ])
cond	83:13	83:45	5	es -> pb_cc_present [ i ] || ! pb_cc [ i ]
water	83:13	0:0	6	es
op	83:15	0:0	6	->
water	83:17	0:0	6	pb_cc_present
op	83:30	0:0	6	[
water	83:31	0:0	6	i
op	83:32	0:0	6	]
op	83:34	0:0	6	||
op	83:37	0:0	6	!
water	83:38	0:0	6	pb_cc
op	83:43	0:0	6	[
water	83:44	0:0	6	i
op	83:45	0:0	6	]
stmts	84:12	84:20	5	
continue	84:12	84:20	6	
call	85:8	85:73	4	msg_Dbg
arg	85:17	85:24	5	p_input
water	85:17	0:0	6	p_input
arg	85:26	85:57	5	"Adding CC track %d for es[%d]"
water	85:26	0:0	6	"Adding CC track %d for es[%d]"
arg	85:59	85:62	5	1+i
water	85:59	0:0	6	1
op	85:60	0:0	6	+
water	85:61	0:0	6	i
arg	85:64	85:73	5	es->i_id
water	85:64	0:0	6	es
op	85:66	0:0	6	->
water	85:68	0:0	6	i_id
water	85:74	0:0	4	;
call	86:8	86:67	4	es_format_Init
arg	86:24	86:28	5	&fmt
op	86:24	0:0	6	&
water	86:25	0:0	6	fmt
arg	86:30	86:36	5	SPU_ES
water	86:30	0:0	6	SPU_ES
arg	86:38	86:67	5	EsOutFourccClosedCaptions[i]
water	86:38	0:0	6	EsOutFourccClosedCaptions
op	86:63	0:0	6	[
water	86:64	0:0	6	i
op	86:65	0:0	6	]
water	86:68	0:0	4	;
water	87:8	0:0	4	fmt
op	87:11	0:0	4	.
water	87:12	0:0	4	i_group
op	87:20	0:0	4	=
water	87:22	0:0	4	es
op	87:24	0:0	4	->
water	87:26	0:0	4	fmt
op	87:29	0:0	4	.
water	87:30	0:0	4	i_group
water	87:37	0:0	4	;
if	88:8	90:38	4	(asprintf (& fmt . psz_description ,_ ("Closed captions %u" ) ,1 + i ) == - 1)
cond	88:12	89:59	5	asprintf (& fmt . psz_description ,_ ("Closed captions %u" ) ,1 + i ) == - 1
call	88:12	89:53	6	asprintf
arg	88:22	88:42	7	&fmt.psz_description
op	88:22	0:0	8	&
water	88:23	0:0	8	fmt
op	88:26	0:0	8	.
water	88:27	0:0	8	psz_description
arg	89:22	89:45	7	_("Closed captions %u")
call	89:22	89:44	8	_
arg	89:24	89:44	9	"Closed captions %u"
water	89:24	0:0	10	"Closed captions %u"
arg	89:47	89:53	7	1+i
water	89:47	0:0	8	1
op	89:49	0:0	8	+
water	89:51	0:0	8	i
op	89:55	0:0	6	==
op	89:58	0:0	6	-
water	89:59	0:0	6	1
stmts	90:12	90:38	5	
water	90:12	0:0	6	fmt
op	90:15	0:0	6	.
water	90:16	0:0	6	psz_description
op	90:32	0:0	6	=
water	90:34	0:0	6	NULL
water	90:38	0:0	6	;
water	91:8	0:0	4	es
op	91:10	0:0	4	->
water	91:12	0:0	4	pp_cc_es
op	91:20	0:0	4	[
water	91:21	0:0	4	i
op	91:22	0:0	4	]
op	91:24	0:0	4	=
call	91:26	91:46	4	EsOutAdd
arg	91:36	91:39	5	out
water	91:36	0:0	6	out
arg	91:41	91:46	5	&fmt
op	91:41	0:0	6	&
water	91:42	0:0	6	fmt
water	91:47	0:0	4	;
water	92:8	0:0	4	es
op	92:10	0:0	4	->
water	92:12	0:0	4	pp_cc_es
op	92:20	0:0	4	[
water	92:21	0:0	4	i
op	92:22	0:0	4	]
op	92:23	0:0	4	->
water	92:25	0:0	4	p_master
op	92:34	0:0	4	=
water	92:36	0:0	4	es
water	92:38	0:0	4	;
call	93:8	93:30	4	es_format_Clean
arg	93:25	93:30	5	&fmt
op	93:25	0:0	6	&
water	93:26	0:0	6	fmt
water	93:31	0:0	4	;
water	95:8	0:0	4	es
op	95:10	0:0	4	->
water	95:12	0:0	4	pb_cc_present
op	95:25	0:0	4	[
water	95:26	0:0	4	i
op	95:27	0:0	4	]
op	95:29	0:0	4	=
water	95:31	0:0	4	true
water	95:35	0:0	4	;
water	96:4	0:0	4	}
call	97:4	97:35	2	vlc_mutex_unlock
arg	97:22	97:35	3	&p_sys->lock
op	97:22	0:0	4	&
water	97:23	0:0	4	p_sys
op	97:28	0:0	4	->
water	97:30	0:0	4	lock
water	97:36	0:0	2	;
return	98:4	98:22	2	VLC_SUCCESS
water	98:11	0:0	3	VLC_SUCCESS
