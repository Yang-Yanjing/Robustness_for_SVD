func	2:0	50:0	0	static bool	AllocateIndex
params	2:25	0:0	1	
param	2:27	2:44	2	sout_mux_t *	p_mux
param	2:46	2:68	2	sout_input_t *	p_input
stmnts	0:0	49:15	1	
decl	4:4	4:60	2	ogg_stream_t	*p_stream
op	4:27	0:0	2	=
water	4:29	0:0	2	(
water	4:30	0:0	2	ogg_stream_t
op	4:43	0:0	2	*
water	4:44	0:0	2	)
water	4:46	0:0	2	p_input
op	4:53	0:0	2	->
water	4:55	0:0	2	p_sys
decl	5:4	5:17	2	size_t	i_size
if	6:4	36:4	2	(p_stream -> i_length)
cond	6:9	6:19	3	p_stream -> i_length
water	6:9	0:0	4	p_stream
op	6:17	0:0	4	->
water	6:19	0:0	4	i_length
stmts	7:4	36:4	3	
water	7:4	0:0	4	{
decl	8:8	8:83	4	uint64_t	i_interval
op	8:28	0:0	4	=
water	8:30	0:0	4	(
water	8:31	0:0	4	uint64_t
water	8:39	0:0	4	)
water	8:40	0:0	4	p_mux
op	8:45	0:0	4	->
water	8:47	0:0	4	p_sys
op	8:52	0:0	4	->
water	8:54	0:0	4	skeleton
op	8:62	0:0	4	.
water	8:63	0:0	4	i_index_intvl
op	8:77	0:0	4	*
water	8:79	0:0	4	1000
decl	9:8	9:18	4	uint64_t	i
if	10:8	18:8	4	(p_input -> p_fmt -> i_cat == VIDEO_ES && p_input -> p_fmt -> video . i_frame_rate)
cond	10:12	11:38	5	p_input -> p_fmt -> i_cat == VIDEO_ES && p_input -> p_fmt -> video . i_frame_rate
water	10:12	0:0	6	p_input
op	10:19	0:0	6	->
water	10:21	0:0	6	p_fmt
op	10:26	0:0	6	->
water	10:28	0:0	6	i_cat
op	10:34	0:0	6	==
water	10:37	0:0	6	VIDEO_ES
op	10:46	0:0	6	&&
water	11:16	0:0	6	p_input
op	11:23	0:0	6	->
water	11:25	0:0	6	p_fmt
op	11:30	0:0	6	->
water	11:32	0:0	6	video
op	11:37	0:0	6	.
water	11:38	0:0	6	i_frame_rate
stmts	12:8	18:8	5	
water	12:8	0:0	6	{
water	14:12	0:0	6	i_interval
op	14:22	0:0	6	=
call	14:24	17:58	6	__MAX
arg	14:31	14:74	7	p_mux->p_sys->skeleton.i_index_intvl*1000
water	14:31	0:0	8	p_mux
op	14:36	0:0	8	->
water	14:38	0:0	8	p_sys
op	14:43	0:0	8	->
water	14:45	0:0	8	skeleton
op	14:53	0:0	8	.
water	14:54	0:0	8	i_index_intvl
op	14:68	0:0	8	*
water	14:70	0:0	8	1000
arg	15:23	17:58	7	INT64_C(10000000)*p_input->p_fmt->video.i_frame_rate_base/p_input->p_fmt->video.i_frame_rate
call	15:23	15:39	8	INT64_C
arg	15:31	15:39	9	10000000
water	15:31	0:0	10	10000000
op	15:41	0:0	8	*
water	16:23	0:0	8	p_input
op	16:30	0:0	8	->
water	16:32	0:0	8	p_fmt
op	16:37	0:0	8	->
water	16:39	0:0	8	video
op	16:44	0:0	8	.
water	16:45	0:0	8	i_frame_rate_base
op	16:63	0:0	8	/
water	17:23	0:0	8	p_input
op	17:30	0:0	8	->
water	17:32	0:0	8	p_fmt
op	17:37	0:0	8	->
water	17:39	0:0	8	video
op	17:44	0:0	8	.
water	17:45	0:0	8	i_frame_rate
water	17:59	0:0	6	;
water	18:8	0:0	6	}
decl	19:8	19:31	4	size_t	i_tuple_size
op	19:28	0:0	4	=
water	19:30	0:0	4	0
if	21:8	25:8	4	(p_input -> p_fmt -> i_bitrate)
cond	21:13	21:29	5	p_input -> p_fmt -> i_bitrate
water	21:13	0:0	6	p_input
op	21:20	0:0	6	->
water	21:22	0:0	6	p_fmt
op	21:27	0:0	6	->
water	21:29	0:0	6	i_bitrate
stmts	22:8	25:8	5	
water	22:8	0:0	6	{
water	23:12	0:0	6	i
op	23:14	0:0	6	=
water	23:16	0:0	6	i_interval
op	23:27	0:0	6	*
water	23:29	0:0	6	p_input
op	23:36	0:0	6	->
water	23:38	0:0	6	p_fmt
op	23:43	0:0	6	->
water	23:45	0:0	6	i_bitrate
op	23:55	0:0	6	/
water	23:57	0:0	6	1000000
water	23:64	0:0	6	;
while	24:12	24:44	6	(i <<= 1)
cond	24:20	24:26	7	i <<= 1
water	24:20	0:0	8	i
op	24:22	0:0	8	<<=
water	24:26	0:0	8	1
stmts	24:30	24:44	7	
water	24:30	0:0	8	i_tuple_size
op	24:42	0:0	8	++
water	24:44	0:0	8	;
water	25:8	0:0	6	}
else	26:8	31:8	4
stmts	27:8	31:8	5	
water	27:8	0:0	6	{
water	30:12	0:0	6	i_tuple_size
op	30:25	0:0	6	=
water	30:27	0:0	6	24
op	30:30	0:0	6	/
water	30:32	0:0	6	8
water	30:33	0:0	6	;
water	31:8	0:0	6	}
water	33:8	0:0	4	i
op	33:10	0:0	4	=
water	33:12	0:0	4	i_interval
water	33:22	0:0	4	;
while	34:8	34:40	4	(i <<= 1)
cond	34:16	34:22	5	i <<= 1
water	34:16	0:0	6	i
op	34:18	0:0	6	<<=
water	34:22	0:0	6	1
stmts	34:26	34:40	5	
water	34:26	0:0	6	i_tuple_size
op	34:38	0:0	6	++
water	34:40	0:0	6	;
water	35:8	0:0	4	i_size
op	35:15	0:0	4	=
water	35:17	0:0	4	i_tuple_size
op	35:30	0:0	4	*
water	35:32	0:0	4	(
water	35:34	0:0	4	p_stream
op	35:42	0:0	4	->
water	35:44	0:0	4	i_length
op	35:53	0:0	4	/
water	35:55	0:0	4	i_interval
op	35:66	0:0	4	+
water	35:68	0:0	4	2
water	35:70	0:0	4	)
water	35:71	0:0	4	;
water	36:4	0:0	4	}
else	37:4	42:4	2
stmts	38:4	42:4	3	
water	38:4	0:0	4	{
water	39:8	0:0	4	i_size
op	39:15	0:0	4	=
water	39:17	0:0	4	(
call	39:19	39:31	4	INT64_C
arg	39:27	39:31	5	3600
water	39:27	0:0	6	3600
op	39:33	0:0	4	*
water	39:35	0:0	4	11
op	39:37	0:0	4	.
water	39:38	0:0	4	2
op	39:40	0:0	4	*
water	39:42	0:0	4	1000
op	39:47	0:0	4	/
water	39:49	0:0	4	p_mux
op	39:54	0:0	4	->
water	39:56	0:0	4	p_sys
op	39:61	0:0	4	->
water	39:63	0:0	4	skeleton
op	39:71	0:0	4	.
water	39:72	0:0	4	i_index_intvl
water	39:86	0:0	4	)
op	40:16	0:0	4	*
water	40:18	0:0	4	p_mux
op	40:23	0:0	4	->
water	40:25	0:0	4	p_sys
op	40:30	0:0	4	->
water	40:32	0:0	4	skeleton
op	40:40	0:0	4	.
water	40:41	0:0	4	i_index_ratio
water	40:54	0:0	4	;
call	41:8	41:79	4	msg_Dbg
arg	41:17	41:22	5	p_mux
water	41:17	0:0	6	p_mux
arg	41:24	41:79	5	"No stream length, using default allocation for index"
water	41:24	0:0	6	"No stream length, using default allocation for index"
water	41:80	0:0	4	;
water	42:4	0:0	4	}
water	43:4	0:0	2	i_size
op	43:11	0:0	2	*=
water	43:14	0:0	2	(
water	43:16	0:0	2	8
op	43:17	0:0	2	.
water	43:18	0:0	2	0
op	43:20	0:0	2	/
water	43:22	0:0	2	7
water	43:24	0:0	2	)
water	43:25	0:0	2	;
call	44:4	44:61	2	msg_Dbg
arg	44:13	44:18	3	p_mux
water	44:13	0:0	4	p_mux
arg	44:20	44:52	3	"allocating %zu bytes for index"
water	44:20	0:0	4	"allocating %zu bytes for index"
arg	44:54	44:61	3	i_size
water	44:54	0:0	4	i_size
water	44:62	0:0	2	;
water	45:4	0:0	2	p_stream
op	45:12	0:0	2	->
water	45:14	0:0	2	skeleton
op	45:22	0:0	2	.
water	45:23	0:0	2	p_index
op	45:31	0:0	2	=
call	45:33	45:65	2	calloc
arg	45:41	45:47	3	i_size
water	45:41	0:0	4	i_size
arg	45:49	45:65	3	sizeof(uint8_t)
op	45:49	0:0	4	sizeof
water	45:55	0:0	4	(
water	45:56	0:0	4	uint8_t
water	45:63	0:0	4	)
water	45:66	0:0	2	;
if	46:4	46:51	2	(! p_stream -> skeleton . p_index)
cond	46:9	46:29	3	! p_stream -> skeleton . p_index
op	46:9	0:0	4	!
water	46:10	0:0	4	p_stream
op	46:18	0:0	4	->
water	46:20	0:0	4	skeleton
op	46:28	0:0	4	.
water	46:29	0:0	4	p_index
stmts	46:39	46:51	3	
return	46:39	46:51	4	false
water	46:46	0:0	5	false
water	47:4	0:0	2	p_stream
op	47:12	0:0	2	->
water	47:14	0:0	2	skeleton
op	47:22	0:0	2	.
water	47:23	0:0	2	i_index_size
op	47:36	0:0	2	=
water	47:38	0:0	2	i_size
water	47:44	0:0	2	;
water	48:4	0:0	2	p_stream
op	48:12	0:0	2	->
water	48:14	0:0	2	skeleton
op	48:22	0:0	2	.
water	48:23	0:0	2	i_index_payload
op	48:39	0:0	2	=
water	48:41	0:0	2	0
water	48:42	0:0	2	;
return	49:4	49:15	2	true
water	49:11	0:0	3	true
