func	2:0	75:0	0	static OMX_ERRORTYPE	DeinitialiseComponent
params	2:42	0:0	1	
param	2:43	2:59	2	decoder_t *	p_dec
param	3:43	3:68	2	OMX_HANDLETYPE	omx_handle
stmnts	0:0	74:20	1	
decl	5:4	5:39	2	decoder_sys_t	*p_sys
op	5:25	0:0	2	=
water	5:27	0:0	2	p_dec
op	5:32	0:0	2	->
water	5:34	0:0	2	p_sys
decl	6:4	6:27	2	OMX_ERRORTYPE	omx_error
decl	7:4	7:23	2	OMX_STATETYPE	state
decl	8:4	8:21	2	unsigned int	i
water	8:18	0:0	2	,
decl	8:4	8:21	2	unsigned int	j
if	9:4	9:40	2	(! omx_handle)
cond	9:7	9:8	3	! omx_handle
op	9:7	0:0	4	!
water	9:8	0:0	4	omx_handle
stmts	9:20	9:40	3	
return	9:20	9:40	4	OMX_ErrorNone
water	9:27	0:0	5	OMX_ErrorNone
water	10:4	0:0	2	omx_error
op	10:14	0:0	2	=
call	10:16	10:47	2	OMX_GetState
arg	10:29	10:39	3	omx_handle
water	10:29	0:0	4	omx_handle
arg	10:41	10:47	3	&state
op	10:41	0:0	4	&
water	10:42	0:0	4	state
water	10:48	0:0	2	;
call	11:4	11:65	2	CHECK_ERROR
arg	11:16	11:25	3	omx_error
water	11:16	0:0	4	omx_error
arg	11:27	11:53	3	"OMX_GetState failed (%x)"
water	11:27	0:0	4	"OMX_GetState failed (%x)"
arg	11:55	11:65	3	omx_error
water	11:55	0:0	4	omx_error
water	11:66	0:0	2	;
if	12:4	26:4	2	(state == OMX_StateExecuting)
cond	12:7	12:16	3	state == OMX_StateExecuting
water	12:7	0:0	4	state
op	12:13	0:0	4	==
water	12:16	0:0	4	OMX_StateExecuting
stmts	13:4	26:4	3	
water	13:4	0:0	4	{
water	14:8	0:0	4	omx_error
op	14:18	0:0	4	=
call	14:20	15:54	4	OMX_SendCommand
arg	14:37	14:47	5	omx_handle
water	14:37	0:0	6	omx_handle
arg	14:49	14:68	5	OMX_CommandStateSet
water	14:49	0:0	6	OMX_CommandStateSet
arg	15:37	15:50	5	OMX_StateIdle
water	15:37	0:0	6	OMX_StateIdle
arg	15:52	15:54	5	0
water	15:52	0:0	6	0
water	15:55	0:0	4	;
call	16:8	16:81	4	CHECK_ERROR
arg	16:20	16:29	5	omx_error
water	16:20	0:0	6	omx_error
arg	16:31	16:69	5	"OMX_CommandStateSet Idle failed (%x)"
water	16:31	0:0	6	"OMX_CommandStateSet Idle failed (%x)"
arg	16:71	16:81	5	omx_error
water	16:71	0:0	6	omx_error
water	16:82	0:0	4	;
while	17:8	25:8	4	(1)
cond	17:15	17:15	5	1
water	17:15	0:0	6	1
stmts	17:18	25:8	5	
water	17:18	0:0	6	{
decl	18:12	18:30	6	OMX_U32	cmd
water	18:23	0:0	6	,
decl	18:12	18:30	6	OMX_U32	state
water	19:12	0:0	6	omx_error
op	19:22	0:0	6	=
call	19:24	19:106	6	WaitForSpecificOmxEvent
arg	19:48	19:67	7	&p_sys->event_queue
op	19:48	0:0	8	&
water	19:49	0:0	8	p_sys
op	19:54	0:0	8	->
water	19:56	0:0	8	event_queue
arg	19:69	19:89	7	OMX_EventCmdComplete
water	19:69	0:0	8	OMX_EventCmdComplete
arg	19:91	19:95	7	&cmd
op	19:91	0:0	8	&
water	19:92	0:0	8	cmd
arg	19:97	19:103	7	&state
op	19:97	0:0	8	&
water	19:98	0:0	8	state
arg	19:105	19:106	7	0
water	19:105	0:0	8	0
water	19:107	0:0	6	;
call	20:12	20:74	6	CHECK_ERROR
arg	20:24	20:33	7	omx_error
water	20:24	0:0	8	omx_error
arg	20:35	20:62	7	"Wait for Idle failed (%x)"
water	20:35	0:0	8	"Wait for Idle failed (%x)"
arg	20:64	20:74	7	omx_error
water	20:64	0:0	8	omx_error
water	20:75	0:0	6	;
if	23:12	24:21	6	(cmd == OMX_CommandStateSet && state == OMX_StateIdle)
cond	23:16	23:55	7	cmd == OMX_CommandStateSet && state == OMX_StateIdle
water	23:16	0:0	8	cmd
op	23:20	0:0	8	==
water	23:23	0:0	8	OMX_CommandStateSet
op	23:43	0:0	8	&&
water	23:46	0:0	8	state
op	23:52	0:0	8	==
water	23:55	0:0	8	OMX_StateIdle
stmts	24:16	24:21	7	
break	24:16	24:21	8	
water	25:8	0:0	6	}
water	26:4	0:0	4	}
water	27:4	0:0	2	omx_error
op	27:14	0:0	2	=
call	27:16	27:47	2	OMX_GetState
arg	27:29	27:39	3	omx_handle
water	27:29	0:0	4	omx_handle
arg	27:41	27:47	3	&state
op	27:41	0:0	4	&
water	27:42	0:0	4	state
water	27:48	0:0	2	;
call	28:4	28:65	2	CHECK_ERROR
arg	28:16	28:25	3	omx_error
water	28:16	0:0	4	omx_error
arg	28:27	28:53	3	"OMX_GetState failed (%x)"
water	28:27	0:0	4	"OMX_GetState failed (%x)"
arg	28:55	28:65	3	omx_error
water	28:55	0:0	4	omx_error
water	28:66	0:0	2	;
if	29:4	65:4	2	(state == OMX_StateIdle)
cond	29:7	29:16	3	state == OMX_StateIdle
water	29:7	0:0	4	state
op	29:13	0:0	4	==
water	29:16	0:0	4	OMX_StateIdle
stmts	30:4	65:4	3	
water	30:4	0:0	4	{
water	31:8	0:0	4	omx_error
op	31:18	0:0	4	=
call	31:20	32:56	4	OMX_SendCommand
arg	31:37	31:47	5	omx_handle
water	31:37	0:0	6	omx_handle
arg	31:49	31:68	5	OMX_CommandStateSet
water	31:49	0:0	6	OMX_CommandStateSet
arg	32:37	32:52	5	OMX_StateLoaded
water	32:37	0:0	6	OMX_StateLoaded
arg	32:54	32:56	5	0
water	32:54	0:0	6	0
water	32:57	0:0	4	;
call	33:8	33:83	4	CHECK_ERROR
arg	33:20	33:29	5	omx_error
water	33:20	0:0	6	omx_error
arg	33:31	33:71	5	"OMX_CommandStateSet Loaded failed (%x)"
water	33:31	0:0	6	"OMX_CommandStateSet Loaded failed (%x)"
arg	33:73	33:83	5	omx_error
water	33:73	0:0	6	omx_error
water	33:84	0:0	4	;
for	34:8	62:8	4	(i = 0 ;i < p_sys -> ports;i ++)
forinit	34:12	34:17	5	i = 0 ;
water	34:12	0:0	6	i
op	34:14	0:0	6	=
water	34:16	0:0	6	0
water	34:17	0:0	6	;
cond	34:19	34:30	5	i < p_sys -> ports
water	34:19	0:0	6	i
op	34:21	0:0	6	<
water	34:23	0:0	6	p_sys
op	34:28	0:0	6	->
water	34:30	0:0	6	ports
forexpr	34:37	34:38	5	i ++
water	34:37	0:0	6	i
op	34:38	0:0	6	++
stmts	35:8	62:8	5	
water	35:8	0:0	6	{
decl	36:12	36:48	6	OmxPort	*p_port
op	36:28	0:0	6	=
op	36:30	0:0	6	&
water	36:31	0:0	6	p_sys
op	36:36	0:0	6	->
water	36:38	0:0	6	p_ports
op	36:45	0:0	6	[
water	36:46	0:0	6	i
op	36:47	0:0	6	]
decl	37:12	37:42	6	OMX_BUFFERHEADERTYPE	*p_buffer
for	38:12	49:12	6	(j = 0 ;j < p_port -> i_buffers;j ++)
forinit	38:16	38:21	7	j = 0 ;
water	38:16	0:0	8	j
op	38:18	0:0	8	=
water	38:20	0:0	8	0
water	38:21	0:0	8	;
cond	38:23	38:35	7	j < p_port -> i_buffers
water	38:23	0:0	8	j
op	38:25	0:0	8	<
water	38:27	0:0	8	p_port
op	38:33	0:0	8	->
water	38:35	0:0	8	i_buffers
forexpr	38:46	38:47	7	j ++
water	38:46	0:0	8	j
op	38:47	0:0	8	++
stmts	39:12	49:12	7	
water	39:12	0:0	8	{
call	40:16	40:52	8	OMX_FIFO_GET
arg	40:29	40:42	9	&p_port->fifo
op	40:29	0:0	10	&
water	40:30	0:0	10	p_port
op	40:36	0:0	10	->
water	40:38	0:0	10	fifo
arg	40:44	40:52	9	p_buffer
water	40:44	0:0	10	p_buffer
water	40:53	0:0	8	;
if	41:16	45:16	8	(p_buffer -> nFlags & SENTINEL_FLAG)
cond	41:20	41:39	9	p_buffer -> nFlags & SENTINEL_FLAG
water	41:20	0:0	10	p_buffer
op	41:28	0:0	10	->
water	41:30	0:0	10	nFlags
op	41:37	0:0	10	&
water	41:39	0:0	10	SENTINEL_FLAG
stmts	41:54	45:16	9	
water	41:54	0:0	10	{
call	42:20	42:33	10	free
arg	42:25	42:33	11	p_buffer
water	42:25	0:0	12	p_buffer
water	42:34	0:0	10	;
water	43:20	0:0	10	j
op	43:21	0:0	10	--
water	43:23	0:0	10	;
continue	44:20	44:28	10	
water	45:16	0:0	10	}
water	46:16	0:0	8	omx_error
op	46:26	0:0	8	=
call	46:28	47:75	8	OMX_FreeBuffer
arg	46:44	46:54	9	omx_handle
water	46:44	0:0	10	omx_handle
arg	47:44	47:64	9	p_port->i_port_index
water	47:44	0:0	10	p_port
op	47:50	0:0	10	->
water	47:52	0:0	10	i_port_index
arg	47:66	47:75	9	p_buffer
water	47:66	0:0	10	p_buffer
water	47:76	0:0	8	;
if	48:16	48:52	8	(omx_error != OMX_ErrorNone)
cond	48:19	48:32	9	omx_error != OMX_ErrorNone
water	48:19	0:0	10	omx_error
op	48:29	0:0	10	!=
water	48:32	0:0	10	OMX_ErrorNone
stmts	48:47	48:52	9	
break	48:47	48:52	10	
water	49:12	0:0	8	}
call	50:12	51:64	6	CHECK_ERROR
arg	50:24	50:33	7	omx_error
water	50:24	0:0	8	omx_error
arg	50:35	50:71	7	"OMX_FreeBuffer failed (%x, %i, %i)"
water	50:35	0:0	8	"OMX_FreeBuffer failed (%x, %i, %i)"
arg	51:24	51:33	7	omx_error
water	51:24	0:0	8	omx_error
arg	51:35	51:60	7	(int)p_port->i_port_index
water	51:35	0:0	8	(
water	51:36	0:0	8	int
water	51:39	0:0	8	)
water	51:40	0:0	8	p_port
op	51:46	0:0	8	->
water	51:48	0:0	8	i_port_index
arg	51:62	51:64	7	j
water	51:62	0:0	8	j
water	51:65	0:0	6	;
while	52:12	61:12	6	(1)
cond	52:19	52:19	7	1
water	52:19	0:0	8	1
stmts	52:22	61:12	7	
water	52:22	0:0	8	{
call	53:16	53:53	8	OMX_FIFO_PEEK
arg	53:30	53:43	9	&p_port->fifo
op	53:30	0:0	10	&
water	53:31	0:0	10	p_port
op	53:37	0:0	10	->
water	53:39	0:0	10	fifo
arg	53:45	53:53	9	p_buffer
water	53:45	0:0	10	p_buffer
water	53:54	0:0	8	;
if	54:16	54:36	8	(! p_buffer)
cond	54:20	54:21	9	! p_buffer
op	54:20	0:0	10	!
water	54:21	0:0	10	p_buffer
stmts	54:31	54:36	9	
break	54:31	54:36	10	
call	55:16	55:52	8	OMX_FIFO_GET
arg	55:29	55:42	9	&p_port->fifo
op	55:29	0:0	10	&
water	55:30	0:0	10	p_port
op	55:36	0:0	10	->
water	55:38	0:0	10	fifo
arg	55:44	55:52	9	p_buffer
water	55:44	0:0	10	p_buffer
water	55:53	0:0	8	;
if	56:16	59:16	8	(p_buffer -> nFlags & SENTINEL_FLAG)
cond	56:20	56:39	9	p_buffer -> nFlags & SENTINEL_FLAG
water	56:20	0:0	10	p_buffer
op	56:28	0:0	10	->
water	56:30	0:0	10	nFlags
op	56:37	0:0	10	&
water	56:39	0:0	10	SENTINEL_FLAG
stmts	56:54	59:16	9	
water	56:54	0:0	10	{
call	57:20	57:33	10	free
arg	57:25	57:33	11	p_buffer
water	57:25	0:0	12	p_buffer
water	57:34	0:0	10	;
continue	58:20	58:28	10	
water	59:16	0:0	10	}
call	60:16	60:75	8	msg_Warn
arg	60:26	60:31	9	p_dec
water	60:26	0:0	10	p_dec
arg	60:33	60:64	9	"Stray buffer left in fifo, %p"
water	60:33	0:0	10	"Stray buffer left in fifo, %p"
arg	60:66	60:75	9	p_buffer
water	60:66	0:0	10	p_buffer
water	60:76	0:0	8	;
water	61:12	0:0	8	}
water	62:8	0:0	6	}
water	63:8	0:0	4	omx_error
op	63:18	0:0	4	=
call	63:20	63:94	4	WaitForSpecificOmxEvent
arg	63:44	63:63	5	&p_sys->event_queue
op	63:44	0:0	6	&
water	63:45	0:0	6	p_sys
op	63:50	0:0	6	->
water	63:52	0:0	6	event_queue
arg	63:65	63:85	5	OMX_EventCmdComplete
water	63:65	0:0	6	OMX_EventCmdComplete
arg	63:87	63:88	5	0
water	63:87	0:0	6	0
arg	63:90	63:91	5	0
water	63:90	0:0	6	0
arg	63:93	63:94	5	0
water	63:93	0:0	6	0
water	63:95	0:0	4	;
call	64:8	64:72	4	CHECK_ERROR
arg	64:20	64:29	5	omx_error
water	64:20	0:0	6	omx_error
arg	64:31	64:60	5	"Wait for Loaded failed (%x)"
water	64:31	0:0	6	"Wait for Loaded failed (%x)"
arg	64:62	64:72	5	omx_error
water	64:62	0:0	6	omx_error
water	64:73	0:0	4	;
water	65:4	0:0	4	}
label	66:1	66:6	2	error :
for	67:4	72:4	2	(i = 0 ;i < p_sys -> ports;i ++)
forinit	67:8	67:13	3	i = 0 ;
water	67:8	0:0	4	i
op	67:10	0:0	4	=
water	67:12	0:0	4	0
water	67:13	0:0	4	;
cond	67:15	67:26	3	i < p_sys -> ports
water	67:15	0:0	4	i
op	67:17	0:0	4	<
water	67:19	0:0	4	p_sys
op	67:24	0:0	4	->
water	67:26	0:0	4	ports
forexpr	67:33	67:34	3	i ++
water	67:33	0:0	4	i
op	67:34	0:0	4	++
stmts	68:4	72:4	3	
water	68:4	0:0	4	{
decl	69:8	69:44	4	OmxPort	*p_port
op	69:24	0:0	4	=
op	69:26	0:0	4	&
water	69:27	0:0	4	p_sys
op	69:32	0:0	4	->
water	69:34	0:0	4	p_ports
op	69:41	0:0	4	[
water	69:42	0:0	4	i
op	69:43	0:0	4	]
call	70:8	70:31	4	free
arg	70:13	70:31	5	p_port->pp_buffers
water	70:13	0:0	6	p_port
op	70:19	0:0	6	->
water	70:21	0:0	6	pp_buffers
water	70:32	0:0	4	;
water	71:8	0:0	4	p_port
op	71:14	0:0	4	->
water	71:16	0:0	4	pp_buffers
op	71:27	0:0	4	=
water	71:29	0:0	4	0
water	71:30	0:0	4	;
water	72:4	0:0	4	}
water	73:4	0:0	2	omx_error
op	73:14	0:0	2	=
call	73:16	73:43	2	pf_free_handle
arg	73:32	73:43	3	omx_handle
water	73:32	0:0	4	omx_handle
water	73:44	0:0	2	;
return	74:4	74:20	2	omx_error
water	74:11	0:0	3	omx_error
