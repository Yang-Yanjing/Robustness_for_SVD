func	2:0	45:0	0	static block_t *	Convert
params	2:23	0:0	1	
param	2:25	2:43	2	filter_t *	p_filter
param	2:45	2:62	2	block_t *	p_block
stmnts	0:0	44:16	1	
decl	4:4	4:18	2	block_t	*p_out
decl	5:4	5:18	2	int	i_out_size
if	6:4	11:4	2	(! p_block || ! p_block -> i_nb_samples)
cond	6:8	6:30	3	! p_block || ! p_block -> i_nb_samples
op	6:8	0:0	4	!
water	6:9	0:0	4	p_block
op	6:17	0:0	4	||
op	6:20	0:0	4	!
water	6:21	0:0	4	p_block
op	6:28	0:0	4	->
water	6:30	0:0	4	i_nb_samples
stmts	7:4	11:4	3	
water	7:4	0:0	4	{
if	8:8	9:36	4	(p_block)
cond	8:12	8:12	5	p_block
water	8:12	0:0	6	p_block
stmts	9:12	9:36	5	
call	9:12	9:35	6	block_Release
arg	9:27	9:35	7	p_block
water	9:27	0:0	8	p_block
water	9:36	0:0	6	;
return	10:8	10:19	4	NULL
water	10:15	0:0	5	NULL
water	11:4	0:0	4	}
water	12:4	0:0	2	i_out_size
op	12:15	0:0	2	=
water	12:17	0:0	2	p_block
op	12:24	0:0	2	->
water	12:26	0:0	2	i_nb_samples
op	12:39	0:0	2	*
water	12:41	0:0	2	p_filter
op	12:49	0:0	2	->
water	12:51	0:0	2	p_sys
op	12:56	0:0	2	->
water	12:58	0:0	2	i_bitspersample
op	12:73	0:0	2	/
water	12:74	0:0	2	8
call	12:76	13:67	2	*aout_FormatNbChannels
arg	13:40	13:67	3	&(p_filter->fmt_out.audio)
op	13:40	0:0	4	&
water	13:41	0:0	4	(
water	13:42	0:0	4	p_filter
op	13:50	0:0	4	->
water	13:52	0:0	4	fmt_out
op	13:59	0:0	4	.
water	13:60	0:0	4	audio
water	13:65	0:0	4	)
water	13:68	0:0	2	;
water	14:4	0:0	2	p_out
op	14:10	0:0	2	=
call	14:12	14:36	2	block_Alloc
arg	14:25	14:36	3	i_out_size
water	14:25	0:0	4	i_out_size
water	14:37	0:0	2	;
if	15:4	20:4	2	(! p_out)
cond	15:8	15:9	3	! p_out
op	15:8	0:0	4	!
water	15:9	0:0	4	p_out
stmts	16:4	20:4	3	
water	16:4	0:0	4	{
call	17:8	17:54	4	msg_Warn
arg	17:18	17:26	5	p_filter
water	17:18	0:0	6	p_filter
arg	17:28	17:54	5	"can't get output buffer"
water	17:28	0:0	6	"can't get output buffer"
water	17:55	0:0	4	;
call	18:8	18:31	4	block_Release
arg	18:23	18:31	5	p_block
water	18:23	0:0	6	p_block
water	18:32	0:0	4	;
return	19:8	19:19	4	NULL
water	19:15	0:0	5	NULL
water	20:4	0:0	4	}
water	21:4	0:0	2	p_out
op	21:9	0:0	2	->
water	21:11	0:0	2	i_nb_samples
op	21:24	0:0	2	=
water	22:18	0:0	2	(
water	22:19	0:0	2	p_block
op	22:26	0:0	2	->
water	22:28	0:0	2	i_nb_samples
op	22:41	0:0	2	/
water	22:43	0:0	2	p_filter
op	22:51	0:0	2	->
water	22:53	0:0	2	p_sys
op	22:58	0:0	2	->
water	22:60	0:0	2	i_nb_channels
water	22:73	0:0	2	)
call	22:75	23:73	2	*aout_FormatNbChannels
arg	23:46	23:73	3	&(p_filter->fmt_out.audio)
op	23:46	0:0	4	&
water	23:47	0:0	4	(
water	23:48	0:0	4	p_filter
op	23:56	0:0	4	->
water	23:58	0:0	4	fmt_out
op	23:65	0:0	4	.
water	23:66	0:0	4	audio
water	23:71	0:0	4	)
water	23:74	0:0	2	;
decl	25:4	26:79	2	unsigned int	i_in_size
op	25:27	0:0	2	=
water	25:29	0:0	2	in_buf
op	25:35	0:0	2	.
water	25:36	0:0	2	i_nb_samples
op	25:50	0:0	2	*
water	25:52	0:0	2	(
water	25:53	0:0	2	p_filter
op	25:61	0:0	2	->
water	25:63	0:0	2	p_sys
op	25:68	0:0	2	->
water	25:70	0:0	2	i_bitspersample
op	25:85	0:0	2	/
water	25:86	0:0	2	8
water	25:87	0:0	2	)
call	25:89	26:78	3	*aout_FormatNbChannels
arg	26:52	26:78	4	&(p_filter->fmt_in.audio)
op	26:52	0:0	5	&
water	26:53	0:0	5	(
water	26:54	0:0	5	p_filter
op	26:62	0:0	5	->
water	26:64	0:0	5	fmt_in
op	26:70	0:0	5	.
water	26:71	0:0	5	audio
water	26:76	0:0	5	)
if	27:4	31:4	2	(( in_buf . i_buffer != i_in_size ) && ( ( i_in_size % 32 ) != 0 ))
cond	27:8	27:64	3	( in_buf . i_buffer != i_in_size ) && ( ( i_in_size % 32 ) != 0 )
water	27:8	0:0	4	(
water	27:9	0:0	4	in_buf
op	27:15	0:0	4	.
water	27:16	0:0	4	i_buffer
op	27:25	0:0	4	!=
water	27:28	0:0	4	i_in_size
water	27:37	0:0	4	)
op	27:39	0:0	4	&&
water	27:42	0:0	4	(
water	27:43	0:0	4	(
water	27:44	0:0	4	i_in_size
op	27:54	0:0	4	%
water	27:56	0:0	4	32
water	27:58	0:0	4	)
op	27:60	0:0	4	!=
water	27:63	0:0	4	0
water	27:64	0:0	4	)
stmts	28:4	31:4	3	
water	28:4	0:0	4	{
call	29:8	29:62	4	msg_Err
arg	29:17	29:25	5	p_filter
water	29:17	0:0	6	p_filter
arg	29:27	29:62	5	"input buffer is not word aligned"
water	29:27	0:0	6	"input buffer is not word aligned"
water	29:63	0:0	4	;
water	31:4	0:0	4	}
call	33:4	33:43	2	memset
arg	33:12	33:27	3	p_out->p_buffer
water	33:12	0:0	4	p_out
op	33:17	0:0	4	->
water	33:19	0:0	4	p_buffer
arg	33:29	33:30	3	0
water	33:29	0:0	4	0
arg	33:32	33:43	3	i_out_size
water	33:32	0:0	4	i_out_size
water	33:44	0:0	2	;
if	34:4	38:4	2	(p_filter -> p_sys -> b_downmix)
cond	34:8	34:25	3	p_filter -> p_sys -> b_downmix
water	34:8	0:0	4	p_filter
op	34:16	0:0	4	->
water	34:18	0:0	4	p_sys
op	34:23	0:0	4	->
water	34:25	0:0	4	b_downmix
stmts	35:4	38:4	3	
water	35:4	0:0	4	{
call	36:8	36:54	4	stereo2mono_downmix
arg	36:29	36:37	5	p_filter
water	36:29	0:0	6	p_filter
arg	36:39	36:46	5	p_block
water	36:39	0:0	6	p_block
arg	36:48	36:54	5	p_out
water	36:48	0:0	6	p_out
water	36:55	0:0	4	;
call	37:8	37:39	4	mono
arg	37:14	37:22	5	p_filter
water	37:14	0:0	6	p_filter
arg	37:24	37:29	5	p_out
water	37:24	0:0	6	p_out
arg	37:31	37:39	5	p_block
water	37:31	0:0	6	p_block
water	37:40	0:0	4	;
water	38:4	0:0	4	}
else	39:4	42:4	2
stmts	40:4	42:4	3	
water	40:4	0:0	4	{
call	41:8	41:49	4	stereo_to_mono
arg	41:24	41:32	5	p_filter
water	41:24	0:0	6	p_filter
arg	41:34	41:39	5	p_out
water	41:34	0:0	6	p_out
arg	41:41	41:49	5	p_block
water	41:41	0:0	6	p_block
water	41:50	0:0	4	;
water	42:4	0:0	4	}
call	43:4	43:27	2	block_Release
arg	43:19	43:27	3	p_block
water	43:19	0:0	4	p_block
water	43:28	0:0	2	;
return	44:4	44:16	2	p_out
water	44:11	0:0	3	p_out
