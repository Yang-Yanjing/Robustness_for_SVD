func	2:0	24:0	0	static int	DrawMessages
params	2:23	0:0	1	
param	2:24	2:43	2	intf_thread_t *	intf
stmnts	0:0	23:12	1	
decl	4:4	4:33	2	intf_sys_t	*sys
op	4:20	0:0	2	=
water	4:22	0:0	2	intf
op	4:26	0:0	2	->
water	4:28	0:0	2	p_sys
decl	5:4	5:13	2	int	l
op	5:10	0:0	2	=
water	5:12	0:0	2	0
call	6:4	6:33	2	vlc_mutex_lock
arg	6:19	6:33	3	&sys->msg_lock
op	6:19	0:0	4	&
water	6:20	0:0	4	sys
op	6:23	0:0	4	->
water	6:25	0:0	4	msg_lock
water	6:34	0:0	2	;
decl	7:4	7:23	2	int	i
op	7:10	0:0	2	=
water	7:12	0:0	2	sys
op	7:15	0:0	2	->
water	7:17	0:0	2	i_msgs
for	8:4	19:4	2	(;;)
forinit	8:8	8:8	3	;
water	8:8	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	8:12	19:4	3	
water	8:12	0:0	4	{
decl	9:8	9:42	4	vlc_log_t	*msg
op	9:23	0:0	4	=
water	9:25	0:0	4	sys
op	9:28	0:0	4	->
water	9:30	0:0	4	msgs
op	9:34	0:0	4	[
water	9:35	0:0	4	i
op	9:36	0:0	4	]
op	9:37	0:0	4	.
water	9:38	0:0	4	item
if	10:8	14:8	4	(msg)
cond	10:12	10:12	5	msg
water	10:12	0:0	6	msg
stmts	10:17	14:8	5	
water	10:17	0:0	6	{
if	11:12	12:59	6	(sys -> color)
cond	11:16	11:21	7	sys -> color
water	11:16	0:0	8	sys
op	11:19	0:0	8	->
water	11:21	0:0	8	color
stmts	12:16	12:59	7	
call	12:16	12:58	8	color_set
arg	12:26	12:52	9	sys->msgs[i].type+C_INFO
water	12:26	0:0	10	sys
op	12:29	0:0	10	->
water	12:31	0:0	10	msgs
op	12:35	0:0	10	[
water	12:36	0:0	10	i
op	12:37	0:0	10	]
op	12:38	0:0	10	.
water	12:39	0:0	10	type
op	12:44	0:0	10	+
water	12:46	0:0	10	C_INFO
arg	12:54	12:58	9	NULL
water	12:54	0:0	10	NULL
water	12:59	0:0	8	;
call	13:12	13:79	6	MainBoxWrite
arg	13:25	13:28	7	sys
water	13:25	0:0	8	sys
arg	13:30	13:33	7	l++
water	13:30	0:0	8	l
op	13:31	0:0	8	++
arg	13:35	13:44	7	"[%s] %s"
water	13:35	0:0	8	"[%s] %s"
arg	13:46	13:61	7	msg->psz_module
water	13:46	0:0	8	msg
op	13:49	0:0	8	->
water	13:51	0:0	8	psz_module
arg	13:63	13:79	7	sys->msgs[i].msg
water	13:63	0:0	8	sys
op	13:66	0:0	8	->
water	13:68	0:0	8	msgs
op	13:72	0:0	8	[
water	13:73	0:0	8	i
op	13:74	0:0	8	]
op	13:75	0:0	8	.
water	13:76	0:0	8	msg
water	13:80	0:0	6	;
water	14:8	0:0	6	}
if	15:8	16:17	4	(++ i == sizeof sys -> msgs / sizeof * sys -> msgs)
cond	15:12	15:51	5	++ i == sizeof sys -> msgs / sizeof * sys -> msgs
op	15:12	0:0	6	++
water	15:14	0:0	6	i
op	15:16	0:0	6	==
op	15:19	0:0	6	sizeof
water	15:26	0:0	6	sys
op	15:29	0:0	6	->
water	15:31	0:0	6	msgs
op	15:36	0:0	6	/
op	15:38	0:0	6	sizeof
op	15:45	0:0	6	*
water	15:46	0:0	6	sys
op	15:49	0:0	6	->
water	15:51	0:0	6	msgs
stmts	16:12	16:17	5	
water	16:12	0:0	6	i
op	16:14	0:0	6	=
water	16:16	0:0	6	0
water	16:17	0:0	6	;
if	17:8	18:17	4	(i == sys -> i_msgs)
cond	17:12	17:22	5	i == sys -> i_msgs
water	17:12	0:0	6	i
op	17:14	0:0	6	==
water	17:17	0:0	6	sys
op	17:20	0:0	6	->
water	17:22	0:0	6	i_msgs
stmts	18:12	18:17	5	
break	18:12	18:17	6	
water	19:4	0:0	4	}
call	20:4	20:35	2	vlc_mutex_unlock
arg	20:21	20:35	3	&sys->msg_lock
op	20:21	0:0	4	&
water	20:22	0:0	4	sys
op	20:25	0:0	4	->
water	20:27	0:0	4	msg_lock
water	20:36	0:0	2	;
if	21:4	22:34	2	(sys -> color)
cond	21:8	21:13	3	sys -> color
water	21:8	0:0	4	sys
op	21:11	0:0	4	->
water	21:13	0:0	4	color
stmts	22:8	22:34	3	
call	22:8	22:33	4	color_set
arg	22:18	22:27	5	C_DEFAULT
water	22:18	0:0	6	C_DEFAULT
arg	22:29	22:33	5	NULL
water	22:29	0:0	6	NULL
water	22:34	0:0	4	;
return	23:4	23:12	2	l
water	23:11	0:0	3	l
