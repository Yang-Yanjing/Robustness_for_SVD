func	2:0	284:0	0	static void *	Run
params	2:16	0:0	1	
param	2:18	2:29	2	void *	data
stmnts	0:0	283:15	1	
decl	4:4	4:32	2	intf_thread_t	*p_intf
op	4:26	0:0	2	=
water	4:28	0:0	2	data
decl	5:4	5:37	2	intf_sys_t	*p_sys
op	5:22	0:0	2	=
water	5:24	0:0	2	p_intf
op	5:30	0:0	2	->
water	5:32	0:0	2	p_sys
decl	6:4	6:40	2	char	p_buffer[MAX_LINE_LENGTH+1]
decl	7:4	7:61	2	bool	b_showpos
op	7:19	0:0	2	=
call	7:21	7:60	3	var_InheritBool
arg	7:38	7:44	4	p_intf
water	7:38	0:0	5	p_intf
arg	7:46	7:60	4	"rc-show-pos"
water	7:46	0:0	5	"rc-show-pos"
decl	8:4	8:19	2	int	i_size
op	8:16	0:0	2	=
water	8:18	0:0	2	0
decl	9:4	9:21	2	int	i_oldpos
op	9:18	0:0	2	=
water	9:20	0:0	2	0
decl	10:4	10:17	2	int	i_newpos
decl	11:4	11:33	2	int	canc
op	11:14	0:0	2	=
call	11:16	11:32	3	vlc_savecancel
water	12:4	0:0	2	p_buffer
op	12:12	0:0	2	[
water	12:13	0:0	2	0
op	12:14	0:0	2	]
op	12:16	0:0	2	=
water	12:18	0:0	2	0
water	12:19	0:0	2	;
water	15:4	0:0	2	p_intf
op	15:10	0:0	2	->
water	15:12	0:0	2	p_sys
op	15:17	0:0	2	->
water	15:19	0:0	2	hConsoleIn
op	15:30	0:0	2	=
call	15:32	15:61	2	GetStdHandle
arg	15:45	15:61	3	STD_INPUT_HANDLE
water	15:45	0:0	4	STD_INPUT_HANDLE
water	15:62	0:0	2	;
if	16:4	20:4	2	(p_intf -> p_sys -> hConsoleIn == INVALID_HANDLE_VALUE)
cond	16:8	16:37	3	p_intf -> p_sys -> hConsoleIn == INVALID_HANDLE_VALUE
water	16:8	0:0	4	p_intf
op	16:14	0:0	4	->
water	16:16	0:0	4	p_sys
op	16:21	0:0	4	->
water	16:23	0:0	4	hConsoleIn
op	16:34	0:0	4	==
water	16:37	0:0	4	INVALID_HANDLE_VALUE
stmts	17:4	20:4	3	
water	17:4	0:0	4	{
call	18:8	18:59	4	msg_Err
arg	18:17	18:23	5	p_intf
water	18:17	0:0	6	p_intf
arg	18:25	18:59	5	"couldn't find user input handle"
water	18:25	0:0	6	"couldn't find user input handle"
water	18:60	0:0	4	;
return	19:8	19:14	4	
water	20:4	0:0	4	}
call	23:4	23:30	2	RegisterCallbacks
arg	23:23	23:30	3	p_intf
water	23:23	0:0	4	p_intf
water	23:31	0:0	2	;
for	25:4	279:4	2	(;;)
forinit	25:9	25:9	3	;
water	25:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	26:4	279:4	3	
water	26:4	0:0	4	{
decl	27:8	27:31	4	char	*psz_cmd
water	27:21	0:0	4	,
decl	27:8	27:31	4	char	*psz_arg
decl	28:8	28:23	4	bool	b_complete
call	29:8	29:32	4	vlc_restorecancel
arg	29:27	29:32	5	canc
water	29:27	0:0	6	canc
water	29:33	0:0	4	;
if	30:8	35:8	4	(p_sys -> pi_socket_listen != NULL && p_sys -> i_socket == - 1)
cond	30:12	30:67	5	p_sys -> pi_socket_listen != NULL && p_sys -> i_socket == - 1
water	30:12	0:0	6	p_sys
op	30:17	0:0	6	->
water	30:19	0:0	6	pi_socket_listen
op	30:36	0:0	6	!=
water	30:39	0:0	6	NULL
op	30:44	0:0	6	&&
water	30:47	0:0	6	p_sys
op	30:52	0:0	6	->
water	30:54	0:0	6	i_socket
op	30:63	0:0	6	==
op	30:66	0:0	6	-
water	30:67	0:0	6	1
stmts	31:8	35:8	5	
water	31:8	0:0	6	{
water	32:12	0:0	6	p_sys
op	32:17	0:0	6	->
water	32:19	0:0	6	i_socket
op	32:28	0:0	6	=
call	33:16	33:60	6	net_Accept
arg	33:28	33:34	7	p_intf
water	33:28	0:0	8	p_intf
arg	33:36	33:60	7	p_sys->pi_socket_listen
water	33:36	0:0	8	p_sys
op	33:41	0:0	8	->
water	33:43	0:0	8	pi_socket_listen
water	33:61	0:0	6	;
if	34:12	34:48	6	(p_sys -> i_socket == - 1)
cond	34:16	34:36	7	p_sys -> i_socket == - 1
water	34:16	0:0	8	p_sys
op	34:21	0:0	8	->
water	34:23	0:0	8	i_socket
op	34:32	0:0	8	==
op	34:35	0:0	8	-
water	34:36	0:0	8	1
stmts	34:40	34:48	7	
continue	34:40	34:48	8	
water	35:8	0:0	6	}
water	36:8	0:0	4	b_complete
op	36:19	0:0	4	=
call	36:21	36:60	4	ReadCommand
arg	36:34	36:40	5	p_intf
water	36:34	0:0	6	p_intf
arg	36:42	36:50	5	p_buffer
water	36:42	0:0	6	p_buffer
arg	36:52	36:60	5	&i_size
op	36:52	0:0	6	&
water	36:53	0:0	6	i_size
water	36:61	0:0	4	;
water	37:8	0:0	4	canc
op	37:13	0:0	4	=
call	37:15	37:31	4	vlc_savecancel
water	37:32	0:0	4	;
if	39:8	50:8	4	(p_sys -> p_input == NULL)
cond	39:12	39:30	5	p_sys -> p_input == NULL
water	39:12	0:0	6	p_sys
op	39:17	0:0	6	->
water	39:19	0:0	6	p_input
op	39:27	0:0	6	==
water	39:30	0:0	6	NULL
stmts	40:8	50:8	5	
water	40:8	0:0	6	{
water	41:12	0:0	6	p_sys
op	41:17	0:0	6	->
water	41:19	0:0	6	p_input
op	41:27	0:0	6	=
call	41:29	41:70	6	playlist_CurrentInput
arg	41:52	41:70	7	p_sys->p_playlist
water	41:52	0:0	8	p_sys
op	41:57	0:0	8	->
water	41:59	0:0	8	p_playlist
water	41:71	0:0	6	;
if	43:12	49:12	6	(p_sys -> p_input)
cond	43:16	43:23	7	p_sys -> p_input
water	43:16	0:0	8	p_sys
op	43:21	0:0	8	->
water	43:23	0:0	8	p_input
stmts	44:12	49:12	7	
water	44:12	0:0	8	{
decl	45:16	45:84	8	char	*psz_uri
op	45:30	0:0	8	=
call	45:32	45:83	9	input_item_GetURI
arg	45:51	45:83	10	input_GetItem(p_sys->p_input)
call	45:51	45:81	11	input_GetItem
arg	45:66	45:81	12	p_sys->p_input
water	45:66	0:0	13	p_sys
op	45:71	0:0	13	->
water	45:73	0:0	13	p_input
call	46:16	46:67	8	msg_rc
arg	46:24	46:57	9	STATUS_CHANGE"( new input: %s )"
water	46:24	0:0	10	STATUS_CHANGE
water	46:38	0:0	10	"( new input: %s )"
arg	46:59	46:67	9	psz_uri
water	46:59	0:0	10	psz_uri
water	46:68	0:0	8	;
call	47:16	47:30	8	free
arg	47:22	47:30	9	psz_uri
water	47:22	0:0	10	psz_uri
water	47:31	0:0	8	;
call	48:16	48:82	8	var_AddCallback
arg	48:33	48:47	9	p_sys->p_input
water	48:33	0:0	10	p_sys
op	48:38	0:0	10	->
water	48:40	0:0	10	p_input
arg	48:49	48:61	9	"intf-event"
water	48:49	0:0	10	"intf-event"
arg	48:63	48:73	9	InputEvent
water	48:63	0:0	10	InputEvent
arg	48:75	48:82	9	p_intf
water	48:75	0:0	10	p_intf
water	48:83	0:0	8	;
water	49:12	0:0	8	}
water	50:8	0:0	6	}
else	52:8	59:8	4
stmts	52:13	59:8	5	
if	52:13	59:8	6	(p_sys -> p_input -> b_dead)
cond	52:17	52:33	7	p_sys -> p_input -> b_dead
water	52:17	0:0	8	p_sys
op	52:22	0:0	8	->
water	52:24	0:0	8	p_input
op	52:31	0:0	8	->
water	52:33	0:0	8	b_dead
stmts	53:8	59:8	7	
water	53:8	0:0	8	{
call	54:12	54:78	8	var_DelCallback
arg	54:29	54:43	9	p_sys->p_input
water	54:29	0:0	10	p_sys
op	54:34	0:0	10	->
water	54:36	0:0	10	p_input
arg	54:45	54:57	9	"intf-event"
water	54:45	0:0	10	"intf-event"
arg	54:59	54:69	9	InputEvent
water	54:59	0:0	10	InputEvent
arg	54:71	54:78	9	p_intf
water	54:71	0:0	10	p_intf
water	54:79	0:0	8	;
call	55:12	55:47	8	vlc_object_release
arg	55:32	55:47	9	p_sys->p_input
water	55:32	0:0	10	p_sys
op	55:37	0:0	10	->
water	55:39	0:0	10	p_input
water	55:48	0:0	8	;
water	56:12	0:0	8	p_sys
op	56:17	0:0	8	->
water	56:19	0:0	8	p_input
op	56:27	0:0	8	=
water	56:29	0:0	8	NULL
water	56:33	0:0	8	;
water	57:12	0:0	8	p_sys
op	57:17	0:0	8	->
water	57:19	0:0	8	i_last_state
op	57:32	0:0	8	=
water	57:34	0:0	8	PLAYLIST_STOPPED
water	57:50	0:0	8	;
call	58:12	58:54	8	msg_rc
arg	58:20	58:54	9	STATUS_CHANGE"( stop state: 0 )"
water	58:20	0:0	10	STATUS_CHANGE
water	58:34	0:0	10	"( stop state: 0 )"
water	58:55	0:0	8	;
water	59:8	0:0	8	}
if	60:8	84:8	4	(p_sys -> p_input != NULL)
cond	60:12	60:30	5	p_sys -> p_input != NULL
water	60:12	0:0	6	p_sys
op	60:17	0:0	6	->
water	60:19	0:0	6	p_input
op	60:27	0:0	6	!=
water	60:30	0:0	6	NULL
stmts	61:8	84:8	5	
water	61:8	0:0	6	{
decl	62:12	62:54	6	playlist_t	*p_playlist
op	62:35	0:0	6	=
water	62:37	0:0	6	p_sys
op	62:42	0:0	6	->
water	62:44	0:0	6	p_playlist
water	63:12	0:0	6	PL_LOCK
water	63:19	0:0	6	;
decl	64:12	64:54	6	int	status
op	64:23	0:0	6	=
call	64:25	64:53	7	playlist_Status
arg	64:42	64:53	8	p_playlist
water	64:42	0:0	9	p_playlist
water	65:12	0:0	6	PL_UNLOCK
water	65:21	0:0	6	;
if	66:12	83:12	6	(p_sys -> i_last_state != status)
cond	66:16	66:39	7	p_sys -> i_last_state != status
water	66:16	0:0	8	p_sys
op	66:21	0:0	8	->
water	66:23	0:0	8	i_last_state
op	66:36	0:0	8	!=
water	66:39	0:0	8	status
stmts	67:12	83:12	7	
water	67:12	0:0	8	{
if	68:16	72:16	8	(status == PLAYLIST_STOPPED)
cond	68:20	68:30	9	status == PLAYLIST_STOPPED
water	68:20	0:0	10	status
op	68:27	0:0	10	==
water	68:30	0:0	10	PLAYLIST_STOPPED
stmts	69:16	72:16	9	
water	69:16	0:0	10	{
water	70:20	0:0	10	p_sys
op	70:25	0:0	10	->
water	70:27	0:0	10	i_last_state
op	70:40	0:0	10	=
water	70:42	0:0	10	PLAYLIST_STOPPED
water	70:58	0:0	10	;
call	71:20	71:62	10	msg_rc
arg	71:28	71:62	11	STATUS_CHANGE"( stop state: 5 )"
water	71:28	0:0	12	STATUS_CHANGE
water	71:42	0:0	12	"( stop state: 5 )"
water	71:63	0:0	10	;
water	72:16	0:0	10	}
else	73:16	77:16	8
stmts	73:21	77:16	9	
if	73:21	77:16	10	(status == PLAYLIST_RUNNING)
cond	73:25	73:35	11	status == PLAYLIST_RUNNING
water	73:25	0:0	12	status
op	73:32	0:0	12	==
water	73:35	0:0	12	PLAYLIST_RUNNING
stmts	74:16	77:16	11	
water	74:16	0:0	12	{
water	75:20	0:0	12	p_sys
op	75:25	0:0	12	->
water	75:27	0:0	12	i_last_state
op	75:40	0:0	12	=
water	75:42	0:0	12	PLAYLIST_RUNNING
water	75:58	0:0	12	;
call	76:20	76:62	12	msg_rc
arg	76:28	76:62	13	STATUS_CHANGE"( play state: 3 )"
water	76:28	0:0	14	STATUS_CHANGE
water	76:42	0:0	14	"( play state: 3 )"
water	76:63	0:0	12	;
water	77:16	0:0	12	}
else	78:16	82:16	8
stmts	78:21	82:16	9	
if	78:21	82:16	10	(status == PLAYLIST_PAUSED)
cond	78:25	78:35	11	status == PLAYLIST_PAUSED
water	78:25	0:0	12	status
op	78:32	0:0	12	==
water	78:35	0:0	12	PLAYLIST_PAUSED
stmts	79:16	82:16	11	
water	79:16	0:0	12	{
water	80:20	0:0	12	p_sys
op	80:25	0:0	12	->
water	80:27	0:0	12	i_last_state
op	80:40	0:0	12	=
water	80:42	0:0	12	PLAYLIST_PAUSED
water	80:57	0:0	12	;
call	81:20	81:63	12	msg_rc
arg	81:28	81:63	13	STATUS_CHANGE"( pause state: 4 )"
water	81:28	0:0	14	STATUS_CHANGE
water	81:42	0:0	14	"( pause state: 4 )"
water	81:64	0:0	12	;
water	82:16	0:0	12	}
water	83:12	0:0	8	}
water	84:8	0:0	6	}
if	85:8	93:8	4	(p_sys -> p_input && b_showpos)
cond	85:12	85:30	5	p_sys -> p_input && b_showpos
water	85:12	0:0	6	p_sys
op	85:17	0:0	6	->
water	85:19	0:0	6	p_input
op	85:27	0:0	6	&&
water	85:30	0:0	6	b_showpos
stmts	86:8	93:8	5	
water	86:8	0:0	6	{
water	87:12	0:0	6	i_newpos
op	87:21	0:0	6	=
water	87:23	0:0	6	100
call	87:27	87:70	6	*var_GetFloat
arg	87:43	87:57	7	p_sys->p_input
water	87:43	0:0	8	p_sys
op	87:48	0:0	8	->
water	87:50	0:0	8	p_input
arg	87:59	87:70	7	"position"
water	87:59	0:0	8	"position"
water	87:71	0:0	6	;
if	88:12	92:12	6	(i_oldpos != i_newpos)
cond	88:16	88:28	7	i_oldpos != i_newpos
water	88:16	0:0	8	i_oldpos
op	88:25	0:0	8	!=
water	88:28	0:0	8	i_newpos
stmts	89:12	92:12	7	
water	89:12	0:0	8	{
water	90:16	0:0	8	i_oldpos
op	90:25	0:0	8	=
water	90:27	0:0	8	i_newpos
water	90:35	0:0	8	;
call	91:16	91:46	8	msg_rc
arg	91:24	91:35	9	"pos: %d%%"
water	91:24	0:0	10	"pos: %d%%"
arg	91:37	91:46	9	i_newpos
water	91:37	0:0	10	i_newpos
water	91:47	0:0	8	;
water	92:12	0:0	8	}
water	93:8	0:0	6	}
if	95:8	95:34	4	(! b_complete)
cond	95:12	95:13	5	! b_complete
op	95:12	0:0	6	!
water	95:13	0:0	6	b_complete
stmts	95:26	95:34	5	
continue	95:26	95:34	6	
water	97:8	0:0	4	psz_cmd
op	97:16	0:0	4	=
water	97:18	0:0	4	p_buffer
water	97:26	0:0	4	;
while	98:8	101:8	4	(* psz_cmd == ' ')
cond	98:15	98:27	5	* psz_cmd == ' '
op	98:15	0:0	6	*
water	98:16	0:0	6	psz_cmd
op	98:24	0:0	6	==
water	98:27	0:0	6	' '
stmts	99:8	101:8	5	
water	99:8	0:0	6	{
water	100:12	0:0	6	psz_cmd
op	100:19	0:0	6	++
water	100:21	0:0	6	;
water	101:8	0:0	6	}
water	104:8	0:0	4	psz_arg
op	104:16	0:0	4	=
call	104:18	104:39	4	strchr
arg	104:26	104:33	5	psz_cmd
water	104:26	0:0	6	psz_cmd
arg	104:35	104:39	5	' '
water	104:35	0:0	6	' '
water	104:40	0:0	4	;
if	105:8	112:8	4	(psz_arg)
cond	105:12	105:12	5	psz_arg
water	105:12	0:0	6	psz_arg
stmts	106:8	112:8	5	
water	106:8	0:0	6	{
op	107:12	0:0	6	*
water	107:13	0:0	6	psz_arg
op	107:20	0:0	6	++
op	107:23	0:0	6	=
water	107:25	0:0	6	0
water	107:26	0:0	6	;
while	108:12	111:12	6	(* psz_arg == ' ')
cond	108:19	108:31	7	* psz_arg == ' '
op	108:19	0:0	8	*
water	108:20	0:0	8	psz_arg
op	108:28	0:0	8	==
water	108:31	0:0	8	' '
stmts	109:12	111:12	7	
water	109:12	0:0	8	{
water	110:16	0:0	8	psz_arg
op	110:23	0:0	8	++
water	110:25	0:0	8	;
water	111:12	0:0	8	}
water	112:8	0:0	6	}
else	113:8	116:8	4
stmts	114:8	116:8	5	
water	114:8	0:0	6	{
water	115:12	0:0	6	psz_arg
op	115:20	0:0	6	=
water	115:22	0:0	6	(
water	115:23	0:0	6	char
op	115:27	0:0	6	*
water	115:28	0:0	6	)
water	115:29	0:0	6	""
water	115:31	0:0	6	;
water	116:8	0:0	6	}
if	118:8	129:8	4	(var_Type (p_intf ,psz_cmd ) & VLC_VAR_ISCOMMAND)
cond	118:12	118:42	5	var_Type (p_intf ,psz_cmd ) & VLC_VAR_ISCOMMAND
call	118:12	118:38	6	var_Type
arg	118:22	118:28	7	p_intf
water	118:22	0:0	8	p_intf
arg	118:30	118:38	7	psz_cmd
water	118:30	0:0	8	psz_cmd
op	118:40	0:0	6	&
water	118:42	0:0	6	VLC_VAR_ISCOMMAND
stmts	119:8	129:8	5	
water	119:8	0:0	6	{
decl	120:12	120:27	6	vlc_value_t	val
decl	121:12	121:21	6	int	i_ret
water	122:12	0:0	6	val
op	122:15	0:0	6	.
water	122:16	0:0	6	psz_string
op	122:27	0:0	6	=
water	122:29	0:0	6	psz_arg
water	122:36	0:0	6	;
if	123:12	124:62	6	((var_Type (p_intf ,psz_cmd ) & VLC_VAR_CLASS ) == VLC_VAR_VOID)
cond	123:16	123:64	7	(var_Type (p_intf ,psz_cmd ) & VLC_VAR_CLASS ) == VLC_VAR_VOID
water	123:16	0:0	8	(
call	123:17	123:42	8	var_Type
arg	123:27	123:33	9	p_intf
water	123:27	0:0	10	p_intf
arg	123:35	123:42	9	psz_cmd
water	123:35	0:0	10	psz_cmd
op	123:44	0:0	8	&
water	123:46	0:0	8	VLC_VAR_CLASS
water	123:59	0:0	8	)
op	123:61	0:0	8	==
water	123:64	0:0	8	VLC_VAR_VOID
stmts	124:16	124:62	7	
water	124:16	0:0	8	i_ret
op	124:22	0:0	8	=
call	124:24	124:61	8	var_TriggerCallback
arg	124:45	124:51	9	p_intf
water	124:45	0:0	10	p_intf
arg	124:53	124:61	9	psz_cmd
water	124:53	0:0	10	psz_cmd
water	124:62	0:0	8	;
else	125:12	126:55	6
stmts	126:16	126:55	7	
water	126:16	0:0	8	i_ret
op	126:22	0:0	8	=
call	126:24	126:54	8	var_Set
arg	126:33	126:39	9	p_intf
water	126:33	0:0	10	p_intf
arg	126:41	126:48	9	psz_cmd
water	126:41	0:0	10	psz_cmd
arg	126:50	126:54	9	val
water	126:50	0:0	10	val
water	126:55	0:0	8	;
call	127:12	128:55	6	msg_rc
arg	127:20	127:42	7	"%s: returned %i (%s)"
water	127:20	0:0	8	"%s: returned %i (%s)"
arg	128:20	128:27	7	psz_cmd
water	128:20	0:0	8	psz_cmd
arg	128:29	128:34	7	i_ret
water	128:29	0:0	8	i_ret
arg	128:36	128:55	7	vlc_error(i_ret)
call	128:36	128:53	8	vlc_error
arg	128:47	128:53	9	i_ret
water	128:47	0:0	10	i_ret
water	128:56	0:0	6	;
water	129:8	0:0	6	}
else	131:8	147:8	4
stmts	131:13	147:8	5	
if	131:13	147:8	6	(var_Type (p_intf -> p_libvlc ,psz_cmd ) & VLC_VAR_ISCOMMAND)
cond	131:17	131:57	7	var_Type (p_intf -> p_libvlc ,psz_cmd ) & VLC_VAR_ISCOMMAND
call	131:17	131:53	8	var_Type
arg	131:27	131:43	9	p_intf->p_libvlc
water	131:27	0:0	10	p_intf
op	131:33	0:0	10	->
water	131:35	0:0	10	p_libvlc
arg	131:45	131:53	9	psz_cmd
water	131:45	0:0	10	psz_cmd
op	131:55	0:0	8	&
water	131:57	0:0	8	VLC_VAR_ISCOMMAND
stmts	132:8	147:8	7	
water	132:8	0:0	8	{
decl	133:12	133:27	8	vlc_value_t	val
decl	134:12	134:21	8	int	i_ret
water	135:12	0:0	8	val
op	135:15	0:0	8	.
water	135:16	0:0	8	psz_string
op	135:27	0:0	8	=
water	135:29	0:0	8	psz_arg
water	135:36	0:0	8	;
if	138:12	139:62	8	((var_Type (p_intf -> p_libvlc ,psz_cmd ) & VLC_VAR_CLASS ) == VLC_VAR_VOID)
cond	138:16	138:74	9	(var_Type (p_intf -> p_libvlc ,psz_cmd ) & VLC_VAR_CLASS ) == VLC_VAR_VOID
water	138:16	0:0	10	(
call	138:17	138:52	10	var_Type
arg	138:27	138:43	11	p_intf->p_libvlc
water	138:27	0:0	12	p_intf
op	138:33	0:0	12	->
water	138:35	0:0	12	p_libvlc
arg	138:45	138:52	11	psz_cmd
water	138:45	0:0	12	psz_cmd
op	138:54	0:0	10	&
water	138:56	0:0	10	VLC_VAR_CLASS
water	138:69	0:0	10	)
op	138:71	0:0	10	==
water	138:74	0:0	10	VLC_VAR_VOID
stmts	139:16	139:62	9	
water	139:16	0:0	10	i_ret
op	139:22	0:0	10	=
call	139:24	139:61	10	var_TriggerCallback
arg	139:45	139:51	11	p_intf
water	139:45	0:0	12	p_intf
arg	139:53	139:61	11	psz_cmd
water	139:53	0:0	12	psz_cmd
water	139:62	0:0	10	;
else	140:12	141:65	8
stmts	141:16	141:65	9	
water	141:16	0:0	10	i_ret
op	141:22	0:0	10	=
call	141:24	141:64	10	var_Set
arg	141:33	141:49	11	p_intf->p_libvlc
water	141:33	0:0	12	p_intf
op	141:39	0:0	12	->
water	141:41	0:0	12	p_libvlc
arg	141:51	141:58	11	psz_cmd
water	141:51	0:0	12	psz_cmd
arg	141:60	141:64	11	val
water	141:60	0:0	12	val
water	141:65	0:0	10	;
if	142:12	146:12	8	(i_ret != 0)
cond	142:16	142:25	9	i_ret != 0
water	142:16	0:0	10	i_ret
op	142:22	0:0	10	!=
water	142:25	0:0	10	0
stmts	143:12	146:12	9	
water	143:12	0:0	10	{
call	144:16	145:60	10	msg_rc
arg	144:24	144:46	11	"%s: returned %i (%s)"
water	144:24	0:0	12	"%s: returned %i (%s)"
arg	145:25	145:32	11	psz_cmd
water	145:25	0:0	12	psz_cmd
arg	145:34	145:39	11	i_ret
water	145:34	0:0	12	i_ret
arg	145:41	145:60	11	vlc_error(i_ret)
call	145:41	145:58	12	vlc_error
arg	145:52	145:58	13	i_ret
water	145:52	0:0	14	i_ret
water	145:61	0:0	10	;
water	146:12	0:0	10	}
water	147:8	0:0	8	}
else	148:8	156:8	4
stmts	148:13	156:8	5	
if	148:13	156:8	6	(!strcmp (psz_cmd ,"logout" ))
cond	148:17	148:44	7	!strcmp (psz_cmd ,"logout" )
op	148:17	0:0	8	!
call	148:18	148:44	8	strcmp
arg	148:26	148:33	9	psz_cmd
water	148:26	0:0	10	psz_cmd
arg	148:35	148:44	9	"logout"
water	148:35	0:0	10	"logout"
stmts	149:8	156:8	7	
water	149:8	0:0	8	{
if	151:12	155:12	8	(p_sys -> i_socket != - 1)
cond	151:16	151:36	9	p_sys -> i_socket != - 1
water	151:16	0:0	10	p_sys
op	151:21	0:0	10	->
water	151:23	0:0	10	i_socket
op	151:32	0:0	10	!=
op	151:35	0:0	10	-
water	151:36	0:0	10	1
stmts	152:12	155:12	9	
water	152:12	0:0	10	{
call	153:16	153:43	10	net_Close
arg	153:27	153:43	11	p_sys->i_socket
water	153:27	0:0	12	p_sys
op	153:32	0:0	12	->
water	153:34	0:0	12	i_socket
water	153:44	0:0	10	;
water	154:16	0:0	10	p_sys
op	154:21	0:0	10	->
water	154:23	0:0	10	i_socket
op	154:32	0:0	10	=
op	154:34	0:0	10	-
water	154:35	0:0	10	1
water	154:36	0:0	10	;
water	155:12	0:0	10	}
water	156:8	0:0	8	}
else	157:8	184:8	4
stmts	157:13	184:8	5	
if	157:13	184:8	6	(!strcmp (psz_cmd ,"info" ))
cond	157:17	157:42	7	!strcmp (psz_cmd ,"info" )
op	157:17	0:0	8	!
call	157:18	157:42	8	strcmp
arg	157:26	157:33	9	psz_cmd
water	157:26	0:0	10	psz_cmd
arg	157:35	157:42	9	"info"
water	157:35	0:0	10	"info"
stmts	158:8	184:8	7	
water	158:8	0:0	8	{
if	159:12	179:12	8	(p_sys -> p_input)
cond	159:16	159:23	9	p_sys -> p_input
water	159:16	0:0	10	p_sys
op	159:21	0:0	10	->
water	159:23	0:0	10	p_input
stmts	160:12	179:12	9	
water	160:12	0:0	10	{
decl	161:16	161:24	10	int	i
water	161:21	0:0	10	,
decl	161:16	161:24	10	int	j
call	162:16	162:69	10	vlc_mutex_lock
arg	162:32	162:69	11	&input_GetItem(p_sys->p_input)->lock
call	162:32	162:61	12	&input_GetItem
arg	162:47	162:61	13	p_sys->p_input
water	162:47	0:0	14	p_sys
op	162:52	0:0	14	->
water	162:54	0:0	14	p_input
op	162:62	0:0	12	->
water	162:64	0:0	12	lock
water	162:70	0:0	10	;
for	163:16	176:16	10	(i = 0 ;i <input_GetItem (p_sys -> p_input ) -> i_categories;i ++)
forinit	163:22	163:27	11	i = 0 ;
water	163:22	0:0	12	i
op	163:24	0:0	12	=
water	163:26	0:0	12	0
water	163:27	0:0	12	;
cond	163:29	163:64	11	i <input_GetItem (p_sys -> p_input ) -> i_categories
water	163:29	0:0	12	i
op	163:31	0:0	12	<
call	163:33	163:61	12	input_GetItem
arg	163:47	163:61	13	p_sys->p_input
water	163:47	0:0	14	p_sys
op	163:52	0:0	14	->
water	163:54	0:0	14	p_input
op	163:62	0:0	12	->
water	163:64	0:0	12	i_categories
forexpr	163:78	163:79	11	i ++
water	163:78	0:0	12	i
op	163:79	0:0	12	++
stmts	164:16	176:16	11	
water	164:16	0:0	12	{
decl	165:20	166:74	12	info_category_t	*p_category
op	165:48	0:0	12	=
call	165:50	165:78	13	input_GetItem
arg	165:64	165:78	14	p_sys->p_input
water	165:64	0:0	15	p_sys
op	165:69	0:0	15	->
water	165:71	0:0	15	p_input
op	166:56	0:0	12	->
water	166:58	0:0	12	pp_categories
op	166:71	0:0	12	[
water	166:72	0:0	12	i
op	166:73	0:0	12	]
call	167:20	167:64	12	msg_rc
arg	167:28	167:41	13	"+----[ %s ]"
water	167:28	0:0	14	"+----[ %s ]"
arg	167:43	167:64	13	p_category->psz_name
water	167:43	0:0	14	p_category
op	167:53	0:0	14	->
water	167:55	0:0	14	psz_name
water	167:65	0:0	12	;
call	168:20	168:33	12	msg_rc
arg	168:28	168:33	13	"| "
water	168:28	0:0	14	"| "
water	168:34	0:0	12	;
for	169:20	174:20	12	(j = 0 ;j < p_category -> i_infos;j ++)
forinit	169:26	169:31	13	j = 0 ;
water	169:26	0:0	14	j
op	169:28	0:0	14	=
water	169:30	0:0	14	0
water	169:31	0:0	14	;
cond	169:33	169:49	13	j < p_category -> i_infos
water	169:33	0:0	14	j
op	169:35	0:0	14	<
water	169:37	0:0	14	p_category
op	169:47	0:0	14	->
water	169:49	0:0	14	i_infos
forexpr	169:58	169:59	13	j ++
water	169:58	0:0	14	j
op	169:59	0:0	14	++
stmts	170:20	174:20	13	
water	170:20	0:0	14	{
decl	171:24	171:64	14	info_t	*p_info
op	171:39	0:0	14	=
water	171:41	0:0	14	p_category
op	171:51	0:0	14	->
water	171:53	0:0	14	pp_infos
op	171:61	0:0	14	[
water	171:62	0:0	14	j
op	171:63	0:0	14	]
call	172:24	173:50	14	msg_rc
arg	172:32	172:42	15	"| %s: %s"
water	172:32	0:0	16	"| %s: %s"
arg	172:44	172:60	15	p_info->psz_name
water	172:44	0:0	16	p_info
op	172:50	0:0	16	->
water	172:52	0:0	16	psz_name
arg	173:32	173:50	15	p_info->psz_value
water	173:32	0:0	16	p_info
op	173:38	0:0	16	->
water	173:40	0:0	16	psz_value
water	173:51	0:0	14	;
water	174:20	0:0	14	}
call	175:20	175:33	12	msg_rc
arg	175:28	175:33	13	"| "
water	175:28	0:0	14	"| "
water	175:34	0:0	12	;
water	176:16	0:0	12	}
call	177:16	177:54	10	msg_rc
arg	177:24	177:54	11	"+----[ end of stream info ]"
water	177:24	0:0	12	"+----[ end of stream info ]"
water	177:55	0:0	10	;
call	178:16	178:71	10	vlc_mutex_unlock
arg	178:34	178:71	11	&input_GetItem(p_sys->p_input)->lock
call	178:34	178:63	12	&input_GetItem
arg	178:49	178:63	13	p_sys->p_input
water	178:49	0:0	14	p_sys
op	178:54	0:0	14	->
water	178:56	0:0	14	p_input
op	178:64	0:0	12	->
water	178:66	0:0	12	lock
water	178:72	0:0	10	;
water	179:12	0:0	10	}
else	180:12	183:12	8
stmts	181:12	183:12	9	
water	181:12	0:0	10	{
call	182:16	182:35	10	msg_rc
arg	182:24	182:35	11	"no input"
water	182:24	0:0	12	"no input"
water	182:36	0:0	10	;
water	183:12	0:0	10	}
water	184:8	0:0	8	}
else	185:8	195:8	4
stmts	185:13	195:8	5	
if	185:13	195:8	6	(!strcmp (psz_cmd ,"is_playing" ))
cond	185:17	185:48	7	!strcmp (psz_cmd ,"is_playing" )
op	185:17	0:0	8	!
call	185:18	185:48	8	strcmp
arg	185:26	185:33	9	psz_cmd
water	185:26	0:0	10	psz_cmd
arg	185:35	185:48	9	"is_playing"
water	185:35	0:0	10	"is_playing"
stmts	186:8	195:8	7	
water	186:8	0:0	8	{
if	187:12	190:12	8	(p_sys -> p_input == NULL)
cond	187:16	187:34	9	p_sys -> p_input == NULL
water	187:16	0:0	10	p_sys
op	187:21	0:0	10	->
water	187:23	0:0	10	p_input
op	187:31	0:0	10	==
water	187:34	0:0	10	NULL
stmts	188:12	190:12	9	
water	188:12	0:0	10	{
call	189:16	189:28	10	msg_rc
arg	189:24	189:28	11	"0"
water	189:24	0:0	12	"0"
water	189:29	0:0	10	;
water	190:12	0:0	10	}
else	191:12	194:12	8
stmts	192:12	194:12	9	
water	192:12	0:0	10	{
call	193:16	193:28	10	msg_rc
arg	193:24	193:28	11	"1"
water	193:24	0:0	12	"1"
water	193:29	0:0	10	;
water	194:12	0:0	10	}
water	195:8	0:0	8	}
else	196:8	208:8	4
stmts	196:13	208:8	5	
if	196:13	208:8	6	(!strcmp (psz_cmd ,"get_time" ))
cond	196:17	196:46	7	!strcmp (psz_cmd ,"get_time" )
op	196:17	0:0	8	!
call	196:18	196:46	8	strcmp
arg	196:26	196:33	9	psz_cmd
water	196:26	0:0	10	psz_cmd
arg	196:35	196:46	9	"get_time"
water	196:35	0:0	10	"get_time"
stmts	197:8	208:8	7	
water	197:8	0:0	8	{
if	198:12	201:12	8	(p_sys -> p_input == NULL)
cond	198:16	198:34	9	p_sys -> p_input == NULL
water	198:16	0:0	10	p_sys
op	198:21	0:0	10	->
water	198:23	0:0	10	p_input
op	198:31	0:0	10	==
water	198:34	0:0	10	NULL
stmts	199:12	201:12	9	
water	199:12	0:0	10	{
call	200:16	200:26	10	msg_rc
arg	200:23	200:26	11	"0"
water	200:23	0:0	12	"0"
water	200:27	0:0	10	;
water	201:12	0:0	10	}
else	202:12	207:12	8
stmts	203:12	207:12	9	
water	203:12	0:0	10	{
decl	204:16	204:32	10	vlc_value_t	time
call	205:16	205:55	10	var_Get
arg	205:25	205:39	11	p_sys->p_input
water	205:25	0:0	12	p_sys
op	205:30	0:0	12	->
water	205:32	0:0	12	p_input
arg	205:41	205:47	11	"time"
water	205:41	0:0	12	"time"
arg	205:49	205:55	11	&time
op	205:49	0:0	12	&
water	205:50	0:0	12	time
water	205:56	0:0	10	;
call	206:16	206:56	10	msg_rc
arg	206:24	206:33	11	"%"PRIu64
water	206:24	0:0	12	"%"
water	206:27	0:0	12	PRIu64
arg	206:35	206:56	11	time.i_time/1000000
water	206:35	0:0	12	time
op	206:39	0:0	12	.
water	206:40	0:0	12	i_time
op	206:47	0:0	12	/
water	206:49	0:0	12	1000000
water	206:57	0:0	10	;
water	207:12	0:0	10	}
water	208:8	0:0	8	}
else	209:8	221:8	4
stmts	209:13	221:8	5	
if	209:13	221:8	6	(!strcmp (psz_cmd ,"get_length" ))
cond	209:17	209:48	7	!strcmp (psz_cmd ,"get_length" )
op	209:17	0:0	8	!
call	209:18	209:48	8	strcmp
arg	209:26	209:33	9	psz_cmd
water	209:26	0:0	10	psz_cmd
arg	209:35	209:48	9	"get_length"
water	209:35	0:0	10	"get_length"
stmts	210:8	221:8	7	
water	210:8	0:0	8	{
if	211:12	214:12	8	(p_sys -> p_input == NULL)
cond	211:16	211:34	9	p_sys -> p_input == NULL
water	211:16	0:0	10	p_sys
op	211:21	0:0	10	->
water	211:23	0:0	10	p_input
op	211:31	0:0	10	==
water	211:34	0:0	10	NULL
stmts	212:12	214:12	9	
water	212:12	0:0	10	{
call	213:16	213:26	10	msg_rc
arg	213:23	213:26	11	"0"
water	213:23	0:0	12	"0"
water	213:27	0:0	10	;
water	214:12	0:0	10	}
else	215:12	220:12	8
stmts	216:12	220:12	9	
water	216:12	0:0	10	{
decl	217:16	217:32	10	vlc_value_t	time
call	218:16	218:57	10	var_Get
arg	218:25	218:39	11	p_sys->p_input
water	218:25	0:0	12	p_sys
op	218:30	0:0	12	->
water	218:32	0:0	12	p_input
arg	218:41	218:49	11	"length"
water	218:41	0:0	12	"length"
arg	218:51	218:57	11	&time
op	218:51	0:0	12	&
water	218:52	0:0	12	time
water	218:58	0:0	10	;
call	219:16	219:56	10	msg_rc
arg	219:24	219:33	11	"%"PRIu64
water	219:24	0:0	12	"%"
water	219:27	0:0	12	PRIu64
arg	219:35	219:56	11	time.i_time/1000000
water	219:35	0:0	12	time
op	219:39	0:0	12	.
water	219:40	0:0	12	i_time
op	219:47	0:0	12	/
water	219:49	0:0	12	1000000
water	219:57	0:0	10	;
water	220:12	0:0	10	}
water	221:8	0:0	8	}
else	222:8	232:8	4
stmts	222:13	232:8	5	
if	222:13	232:8	6	(!strcmp (psz_cmd ,"get_title" ))
cond	222:17	222:47	7	!strcmp (psz_cmd ,"get_title" )
op	222:17	0:0	8	!
call	222:18	222:47	8	strcmp
arg	222:26	222:33	9	psz_cmd
water	222:26	0:0	10	psz_cmd
arg	222:35	222:47	9	"get_title"
water	222:35	0:0	10	"get_title"
stmts	223:8	232:8	7	
water	223:8	0:0	8	{
if	224:12	227:12	8	(p_sys -> p_input == NULL)
cond	224:16	224:34	9	p_sys -> p_input == NULL
water	224:16	0:0	10	p_sys
op	224:21	0:0	10	->
water	224:23	0:0	10	p_input
op	224:31	0:0	10	==
water	224:34	0:0	10	NULL
stmts	225:12	227:12	9	
water	225:12	0:0	10	{
call	226:16	226:31	10	msg_rc
arg	226:23	226:27	11	"%s"
water	226:23	0:0	12	"%s"
arg	226:29	226:31	11	""
water	226:29	0:0	12	""
water	226:32	0:0	10	;
water	227:12	0:0	10	}
else	228:12	231:12	8
stmts	229:12	231:12	9	
water	229:12	0:0	10	{
call	230:16	230:70	10	msg_rc
arg	230:24	230:28	11	"%s"
water	230:24	0:0	12	"%s"
arg	230:30	230:70	11	input_GetItem(p_sys->p_input)->psz_name
call	230:30	230:58	12	input_GetItem
arg	230:44	230:58	13	p_sys->p_input
water	230:44	0:0	14	p_sys
op	230:49	0:0	14	->
water	230:51	0:0	14	p_input
op	230:59	0:0	12	->
water	230:61	0:0	12	psz_name
water	230:71	0:0	10	;
water	231:12	0:0	10	}
water	232:8	0:0	8	}
else	233:8	237:8	4
stmts	233:13	237:8	5	
if	233:13	237:8	6	(!strcmp (psz_cmd ,"longhelp" ) || !strncmp (psz_cmd ,"h" ,1 ) || !strncmp (psz_cmd ,"H" ,1 ) || !strncmp (psz_cmd ,"?" ,1 ))
cond	233:17	234:77	7	!strcmp (psz_cmd ,"longhelp" ) || !strncmp (psz_cmd ,"h" ,1 ) || !strncmp (psz_cmd ,"H" ,1 ) || !strncmp (psz_cmd ,"?" ,1 )
op	233:17	0:0	8	!
call	233:18	233:46	8	strcmp
arg	233:26	233:33	9	psz_cmd
water	233:26	0:0	10	psz_cmd
arg	233:35	233:46	9	"longhelp"
water	233:35	0:0	10	"longhelp"
op	233:48	0:0	8	||
op	233:51	0:0	8	!
call	233:52	233:77	8	strncmp
arg	233:61	233:68	9	psz_cmd
water	233:61	0:0	10	psz_cmd
arg	233:70	233:73	9	"h"
water	233:70	0:0	10	"h"
arg	233:75	233:77	9	1
water	233:75	0:0	10	1
op	234:17	0:0	8	||
op	234:20	0:0	8	!
call	234:21	234:46	8	strncmp
arg	234:30	234:37	9	psz_cmd
water	234:30	0:0	10	psz_cmd
arg	234:39	234:42	9	"H"
water	234:39	0:0	10	"H"
arg	234:44	234:46	9	1
water	234:44	0:0	10	1
op	234:48	0:0	8	||
op	234:51	0:0	8	!
call	234:52	234:77	8	strncmp
arg	234:61	234:68	9	psz_cmd
water	234:61	0:0	10	psz_cmd
arg	234:70	234:73	9	"?"
water	234:70	0:0	10	"?"
arg	234:75	234:77	9	1
water	234:75	0:0	10	1
stmts	235:8	237:8	7	
water	235:8	0:0	8	{
call	236:12	236:25	8	Help
arg	236:18	236:25	9	p_intf
water	236:18	0:0	10	p_intf
water	236:26	0:0	8	;
water	237:8	0:0	8	}
else	238:8	242:8	4
stmts	238:13	242:8	5	
if	238:13	242:8	6	(!strcmp (psz_cmd ,"key" ) || !strcmp (psz_cmd ,"hotkey" ))
cond	238:17	238:73	7	!strcmp (psz_cmd ,"key" ) || !strcmp (psz_cmd ,"hotkey" )
op	238:17	0:0	8	!
call	238:18	238:41	8	strcmp
arg	238:26	238:33	9	psz_cmd
water	238:26	0:0	10	psz_cmd
arg	238:35	238:41	9	"key"
water	238:35	0:0	10	"key"
op	238:43	0:0	8	||
op	238:46	0:0	8	!
call	238:47	238:73	8	strcmp
arg	238:55	238:62	9	psz_cmd
water	238:55	0:0	10	psz_cmd
arg	238:64	238:73	9	"hotkey"
water	238:64	0:0	10	"hotkey"
stmts	239:8	242:8	7	
water	239:8	0:0	8	{
call	240:12	241:55	8	var_SetInteger
arg	240:28	240:44	9	p_intf->p_libvlc
water	240:28	0:0	10	p_intf
op	240:34	0:0	10	->
water	240:36	0:0	10	p_libvlc
arg	240:46	240:58	9	"key-action"
water	240:46	0:0	10	"key-action"
arg	241:28	241:55	9	vlc_GetActionId(psz_arg)
call	241:28	241:53	10	vlc_GetActionId
arg	241:45	241:53	11	psz_arg
water	241:45	0:0	12	psz_arg
water	241:56	0:0	8	;
water	242:8	0:0	8	}
else	243:8	276:8	4
stmts	243:13	276:8	5	
switch	243:13	276:8	6	(psz_cmd [ 0 ])
cond	243:21	243:30	7	psz_cmd [ 0 ]
water	243:21	0:0	8	psz_cmd
op	243:28	0:0	8	[
water	243:29	0:0	8	0
op	243:30	0:0	8	]
stmts	244:8	276:8	7	
water	244:8	0:0	8	{
water	245:8	0:0	8	case
water	245:13	0:0	8	'f'
water	245:16	0:0	8	:
water	246:8	0:0	8	case
water	246:13	0:0	8	'F'
water	246:16	0:0	8	:
water	247:8	0:0	8	{
water	248:12	0:0	8	bool
water	248:17	0:0	8	fs
water	248:19	0:0	8	;
water	249:12	0:0	8	if
water	249:14	0:0	8	(
op	249:16	0:0	8	!
call	249:17	249:47	8	strncasecmp
arg	249:30	249:37	9	psz_arg
water	249:30	0:0	10	psz_arg
arg	249:39	249:43	9	"on"
water	249:39	0:0	10	"on"
arg	249:45	249:47	9	2
water	249:45	0:0	10	2
water	249:49	0:0	8	)
call	250:16	250:72	8	var_SetBool
arg	250:29	250:46	9	p_sys->p_playlist
water	250:29	0:0	10	p_sys
op	250:34	0:0	10	->
water	250:36	0:0	10	p_playlist
arg	250:48	250:60	9	"fullscreen"
water	250:48	0:0	10	"fullscreen"
arg	250:62	250:72	9	fs=true
water	250:62	0:0	10	fs
op	250:65	0:0	10	=
water	250:67	0:0	10	true
water	250:73	0:0	8	;
water	251:12	0:0	8	else
water	251:17	0:0	8	if
water	251:19	0:0	8	(
op	251:21	0:0	8	!
call	251:22	251:53	8	strncasecmp
arg	251:35	251:42	9	psz_arg
water	251:35	0:0	10	psz_arg
arg	251:44	251:49	9	"off"
water	251:44	0:0	10	"off"
arg	251:51	251:53	9	3
water	251:51	0:0	10	3
water	251:55	0:0	8	)
call	252:16	252:73	8	var_SetBool
arg	252:29	252:46	9	p_sys->p_playlist
water	252:29	0:0	10	p_sys
op	252:34	0:0	10	->
water	252:36	0:0	10	p_playlist
arg	252:48	252:60	9	"fullscreen"
water	252:48	0:0	10	"fullscreen"
arg	252:62	252:73	9	fs=false
water	252:62	0:0	10	fs
op	252:65	0:0	10	=
water	252:67	0:0	10	false
water	252:74	0:0	8	;
water	253:12	0:0	8	else
water	254:16	0:0	8	fs
op	254:19	0:0	8	=
call	254:21	254:69	8	var_ToggleBool
arg	254:37	254:54	9	p_sys->p_playlist
water	254:37	0:0	10	p_sys
op	254:42	0:0	10	->
water	254:44	0:0	10	p_playlist
arg	254:56	254:69	9	"fullscreen"
water	254:56	0:0	10	"fullscreen"
water	254:70	0:0	8	;
water	255:12	0:0	8	if
water	255:14	0:0	8	(
water	255:16	0:0	8	p_sys
op	255:21	0:0	8	->
water	255:23	0:0	8	p_input
op	255:31	0:0	8	!=
water	255:34	0:0	8	NULL
water	255:39	0:0	8	)
water	256:12	0:0	8	{
water	257:16	0:0	8	vout_thread_t
op	257:30	0:0	8	*
water	257:31	0:0	8	p_vout
op	257:38	0:0	8	=
call	257:40	257:70	8	input_GetVout
arg	257:55	257:70	9	p_sys->p_input
water	257:55	0:0	10	p_sys
op	257:60	0:0	10	->
water	257:62	0:0	10	p_input
water	257:71	0:0	8	;
water	258:16	0:0	8	if
water	258:18	0:0	8	(
water	258:20	0:0	8	p_vout
water	258:27	0:0	8	)
water	259:16	0:0	8	{
call	260:20	260:58	8	var_SetBool
arg	260:33	260:39	9	p_vout
water	260:33	0:0	10	p_vout
arg	260:41	260:53	9	"fullscreen"
water	260:41	0:0	10	"fullscreen"
arg	260:55	260:58	9	fs
water	260:55	0:0	10	fs
water	260:59	0:0	8	;
call	261:20	261:47	8	vlc_object_release
arg	261:40	261:47	9	p_vout
water	261:40	0:0	10	p_vout
water	261:48	0:0	8	;
water	262:16	0:0	8	}
water	263:12	0:0	8	}
water	264:12	0:0	8	break
water	264:17	0:0	8	;
water	265:8	0:0	8	}
water	266:8	0:0	8	case
water	266:13	0:0	8	's'
water	266:16	0:0	8	:
water	267:8	0:0	8	case
water	267:13	0:0	8	'S'
water	267:16	0:0	8	:
water	268:12	0:0	8	;
break	269:12	269:17	8	
water	270:8	0:0	8	case
water	270:13	0:0	8	'\0'
water	270:17	0:0	8	:
water	272:12	0:0	8	break
water	272:17	0:0	8	;
label	273:8	273:15	8	default :
call	274:12	274:76	8	msg_rc
arg	274:19	274:67	9	_("Unknown command `%s'. Type `help' for help.")
call	274:19	274:66	10	_
arg	274:21	274:66	11	"Unknown command `%s'. Type `help' for help."
water	274:21	0:0	12	"Unknown command `%s'. Type `help' for help."
arg	274:69	274:76	9	psz_cmd
water	274:69	0:0	10	psz_cmd
water	274:77	0:0	8	;
break	275:12	275:17	8	
water	276:8	0:0	8	}
water	278:8	0:0	4	i_size
op	278:15	0:0	4	=
water	278:17	0:0	4	0
water	278:18	0:0	4	;
water	278:20	0:0	4	p_buffer
op	278:28	0:0	4	[
water	278:29	0:0	4	0
op	278:30	0:0	4	]
op	278:32	0:0	4	=
water	278:34	0:0	4	0
water	278:35	0:0	4	;
water	279:4	0:0	4	}
call	280:4	280:46	2	msg_rc
arg	280:12	280:46	3	STATUS_CHANGE"( stop state: 0 )"
water	280:12	0:0	4	STATUS_CHANGE
water	280:26	0:0	4	"( stop state: 0 )"
water	280:47	0:0	2	;
call	281:4	281:37	2	msg_rc
arg	281:12	281:37	3	STATUS_CHANGE"( quit )"
water	281:12	0:0	4	STATUS_CHANGE
water	281:26	0:0	4	"( quit )"
water	281:38	0:0	2	;
call	282:4	282:28	2	vlc_restorecancel
arg	282:23	282:28	3	canc
water	282:23	0:0	4	canc
water	282:29	0:0	2	;
return	283:4	283:15	2	NULL
water	283:11	0:0	3	NULL
