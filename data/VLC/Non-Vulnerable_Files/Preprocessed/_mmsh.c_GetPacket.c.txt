func	2:0	89:0	0	static int	GetPacket
params	2:20	0:0	1	
param	2:22	2:41	2	access_t *	p_access
param	2:43	2:57	2	chunk_t *	p_ck
stmnts	0:0	88:22	1	
decl	4:4	4:41	2	access_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	p_access
op	4:34	0:0	2	->
water	4:36	0:0	2	p_sys
decl	5:4	5:16	2	int	restsize
call	7:4	7:39	2	memset
arg	7:12	7:16	3	p_ck
water	7:12	0:0	4	p_ck
arg	7:18	7:19	3	0
water	7:18	0:0	4	0
arg	7:21	7:39	3	sizeof(chunk_t)
op	7:21	0:0	4	sizeof
water	7:27	0:0	4	(
water	7:29	0:0	4	chunk_t
water	7:37	0:0	4	)
water	7:40	0:0	2	;
if	14:4	18:4	2	(net_Read (p_access ,p_sys -> fd ,NULL ,p_sys -> buffer ,4 ,true ) < 4)
cond	14:8	14:72	3	net_Read (p_access ,p_sys -> fd ,NULL ,p_sys -> buffer ,4 ,true ) < 4
call	14:8	14:68	4	net_Read
arg	14:18	14:26	5	p_access
water	14:18	0:0	6	p_access
arg	14:28	14:37	5	p_sys->fd
water	14:28	0:0	6	p_sys
op	14:33	0:0	6	->
water	14:35	0:0	6	fd
arg	14:39	14:43	5	NULL
water	14:39	0:0	6	NULL
arg	14:45	14:58	5	p_sys->buffer
water	14:45	0:0	6	p_sys
op	14:50	0:0	6	->
water	14:52	0:0	6	buffer
arg	14:60	14:61	5	4
water	14:60	0:0	6	4
arg	14:63	14:68	5	true
water	14:63	0:0	6	true
op	14:70	0:0	4	<
water	14:72	0:0	4	4
stmts	15:4	18:4	3	
water	15:4	0:0	4	{
call	16:7	16:47	4	msg_Err
arg	16:16	16:24	5	p_access
water	16:16	0:0	6	p_access
arg	16:26	16:47	5	"cannot read data 2"
water	16:26	0:0	6	"cannot read data 2"
water	16:48	0:0	4	;
return	17:7	17:26	4	VLC_EGENERIC
water	17:14	0:0	5	VLC_EGENERIC
water	18:4	0:0	4	}
water	19:4	0:0	2	p_ck
op	19:8	0:0	2	->
water	19:10	0:0	2	i_type
op	19:17	0:0	2	=
call	19:19	19:40	2	GetWLE
arg	19:27	19:40	3	p_sys->buffer
water	19:27	0:0	4	p_sys
op	19:32	0:0	4	->
water	19:34	0:0	4	buffer
water	19:41	0:0	2	;
water	20:4	0:0	2	p_ck
op	20:8	0:0	2	->
water	20:10	0:0	2	i_size
op	20:17	0:0	2	=
call	20:19	20:44	2	GetWLE
arg	20:27	20:44	3	p_sys->buffer+2
water	20:27	0:0	4	p_sys
op	20:32	0:0	4	->
water	20:34	0:0	4	buffer
op	20:41	0:0	4	+
water	20:43	0:0	4	2
water	20:45	0:0	2	;
water	21:4	0:0	2	restsize
op	21:13	0:0	2	=
water	21:15	0:0	2	p_ck
op	21:19	0:0	2	->
water	21:21	0:0	2	i_size
water	21:27	0:0	2	;
if	22:4	23:20	2	(restsize > 8)
cond	22:8	22:19	3	restsize > 8
water	22:8	0:0	4	restsize
op	22:17	0:0	4	>
water	22:19	0:0	4	8
stmts	23:8	23:20	3	
water	23:8	0:0	4	restsize
op	23:17	0:0	4	=
water	23:19	0:0	4	8
water	23:20	0:0	4	;
if	24:4	28:4	2	(net_Read (p_access ,p_sys -> fd ,NULL ,p_sys -> buffer + 4 ,restsize ,true ) < restsize)
cond	24:8	24:83	3	net_Read (p_access ,p_sys -> fd ,NULL ,p_sys -> buffer + 4 ,restsize ,true ) < restsize
call	24:8	24:79	4	net_Read
arg	24:18	24:26	5	p_access
water	24:18	0:0	6	p_access
arg	24:28	24:37	5	p_sys->fd
water	24:28	0:0	6	p_sys
op	24:33	0:0	6	->
water	24:35	0:0	6	fd
arg	24:39	24:43	5	NULL
water	24:39	0:0	6	NULL
arg	24:45	24:62	5	p_sys->buffer+4
water	24:45	0:0	6	p_sys
op	24:50	0:0	6	->
water	24:52	0:0	6	buffer
op	24:59	0:0	6	+
water	24:61	0:0	6	4
arg	24:64	24:72	5	restsize
water	24:64	0:0	6	restsize
arg	24:74	24:79	5	true
water	24:74	0:0	6	true
op	24:81	0:0	4	<
water	24:83	0:0	4	restsize
stmts	25:4	28:4	3	
water	25:4	0:0	4	{
call	26:8	26:48	4	msg_Err
arg	26:17	26:25	5	p_access
water	26:17	0:0	6	p_access
arg	26:27	26:48	5	"cannot read data 3"
water	26:27	0:0	6	"cannot read data 3"
water	26:49	0:0	4	;
return	27:8	27:27	4	VLC_EGENERIC
water	27:15	0:0	5	VLC_EGENERIC
water	28:4	0:0	4	}
water	29:4	0:0	2	p_ck
op	29:8	0:0	2	->
water	29:10	0:0	2	i_sequence
op	29:22	0:0	2	=
call	29:24	29:50	2	GetDWLE
arg	29:33	29:50	3	p_sys->buffer+4
water	29:33	0:0	4	p_sys
op	29:38	0:0	4	->
water	29:40	0:0	4	buffer
op	29:47	0:0	4	+
water	29:49	0:0	4	4
water	29:51	0:0	2	;
water	30:4	0:0	2	p_ck
op	30:8	0:0	2	->
water	30:10	0:0	2	i_unknown
op	30:22	0:0	2	=
call	30:24	30:49	2	GetWLE
arg	30:32	30:49	3	p_sys->buffer+8
water	30:32	0:0	4	p_sys
op	30:37	0:0	4	->
water	30:39	0:0	4	buffer
op	30:46	0:0	4	+
water	30:48	0:0	4	8
water	30:50	0:0	2	;
if	35:4	36:25	2	(restsize < 8)
cond	35:8	35:19	3	restsize < 8
water	35:8	0:0	4	restsize
op	35:17	0:0	4	<
water	35:19	0:0	4	8
stmts	36:8	36:25	3	
water	36:8	0:0	4	p_ck
op	36:12	0:0	4	->
water	36:14	0:0	4	i_size2
op	36:22	0:0	4	=
water	36:24	0:0	4	8
water	36:25	0:0	4	;
else	37:4	38:51	2
stmts	38:8	38:51	3	
water	38:8	0:0	4	p_ck
op	38:12	0:0	4	->
water	38:14	0:0	4	i_size2
op	38:22	0:0	4	=
call	38:24	38:50	4	GetWLE
arg	38:32	38:50	5	p_sys->buffer+10
water	38:32	0:0	6	p_sys
op	38:37	0:0	6	->
water	38:39	0:0	6	buffer
op	38:46	0:0	6	+
water	38:48	0:0	6	10
water	38:51	0:0	4	;
water	39:4	0:0	2	p_ck
op	39:8	0:0	2	->
water	39:10	0:0	2	p_data
op	39:22	0:0	2	=
water	39:24	0:0	2	p_sys
op	39:29	0:0	2	->
water	39:31	0:0	2	buffer
op	39:38	0:0	2	+
water	39:40	0:0	2	12
water	39:42	0:0	2	;
water	40:4	0:0	2	p_ck
op	40:8	0:0	2	->
water	40:10	0:0	2	i_data
op	40:22	0:0	2	=
water	40:24	0:0	2	p_ck
op	40:28	0:0	2	->
water	40:30	0:0	2	i_size2
op	40:38	0:0	2	-
water	40:40	0:0	2	8
water	40:41	0:0	2	;
if	41:4	53:4	2	(p_ck -> i_type == 0 x4524)
cond	41:8	41:25	3	p_ck -> i_type == 0 x4524
water	41:8	0:0	4	p_ck
op	41:12	0:0	4	->
water	41:14	0:0	4	i_type
op	41:21	0:0	4	==
water	41:24	0:0	4	0
water	41:25	0:0	4	x4524
stmts	42:4	53:4	3	
water	42:4	0:0	4	{
if	43:8	47:8	4	(p_ck -> i_sequence == 0)
cond	43:12	43:32	5	p_ck -> i_sequence == 0
water	43:12	0:0	6	p_ck
op	43:16	0:0	6	->
water	43:18	0:0	6	i_sequence
op	43:29	0:0	6	==
water	43:32	0:0	6	0
stmts	44:8	47:8	5	
water	44:8	0:0	6	{
call	45:12	45:38	6	msg_Warn
arg	45:22	45:30	7	p_access
water	45:22	0:0	8	p_access
arg	45:32	45:38	7	"EOF"
water	45:32	0:0	8	"EOF"
water	45:39	0:0	6	;
return	46:12	46:31	6	VLC_EGENERIC
water	46:19	0:0	7	VLC_EGENERIC
water	47:8	0:0	6	}
else	48:8	52:8	4
stmts	49:8	52:8	5	
water	49:8	0:0	6	{
call	50:12	50:56	6	msg_Warn
arg	50:22	50:30	7	p_access
water	50:22	0:0	8	p_access
arg	50:32	50:56	7	"next stream following"
water	50:32	0:0	8	"next stream following"
water	50:57	0:0	6	;
return	51:12	51:31	6	VLC_EGENERIC
water	51:19	0:0	7	VLC_EGENERIC
water	52:8	0:0	6	}
water	53:4	0:0	4	}
else	54:4	59:4	2
stmts	54:9	59:4	3	
if	54:9	59:4	4	(p_ck -> i_type == 0 x4324)
cond	54:13	54:30	5	p_ck -> i_type == 0 x4324
water	54:13	0:0	6	p_ck
op	54:17	0:0	6	->
water	54:19	0:0	6	i_type
op	54:26	0:0	6	==
water	54:29	0:0	6	0
water	54:30	0:0	6	x4324
stmts	55:4	59:4	5	
water	55:4	0:0	6	{
call	57:8	57:86	6	msg_Warn
arg	57:18	57:26	7	p_access
water	57:18	0:0	8	p_access
arg	57:28	57:66	7	"next stream following (reset) seq=%d"
water	57:28	0:0	8	"next stream following (reset) seq=%d"
arg	57:68	57:86	7	p_ck->i_sequence
water	57:68	0:0	8	p_ck
op	57:72	0:0	8	->
water	57:74	0:0	8	i_sequence
water	57:87	0:0	6	;
return	58:8	58:27	6	VLC_EGENERIC
water	58:15	0:0	7	VLC_EGENERIC
water	59:4	0:0	6	}
else	60:4	69:4	2
stmts	60:9	69:4	3	
if	60:9	69:4	4	(( p_ck -> i_type != 0 x4824 ) && ( p_ck -> i_type != 0 x4424 ))
cond	60:13	60:64	5	( p_ck -> i_type != 0 x4824 ) && ( p_ck -> i_type != 0 x4424 )
water	60:13	0:0	6	(
water	60:14	0:0	6	p_ck
op	60:18	0:0	6	->
water	60:20	0:0	6	i_type
op	60:27	0:0	6	!=
water	60:30	0:0	6	0
water	60:31	0:0	6	x4824
water	60:36	0:0	6	)
op	60:38	0:0	6	&&
water	60:41	0:0	6	(
water	60:42	0:0	6	p_ck
op	60:46	0:0	6	->
water	60:48	0:0	6	i_type
op	60:55	0:0	6	!=
water	60:58	0:0	6	0
water	60:59	0:0	6	x4424
water	60:64	0:0	6	)
stmts	61:4	69:4	5	
water	61:4	0:0	6	{
call	67:8	67:75	6	msg_Err
arg	67:17	67:25	7	p_access
water	67:17	0:0	8	p_access
arg	67:27	67:60	7	"unrecognized chunk FATAL (0x%x)"
water	67:27	0:0	8	"unrecognized chunk FATAL (0x%x)"
arg	67:62	67:75	7	p_ck->i_type
water	67:62	0:0	8	p_ck
op	67:66	0:0	8	->
water	67:68	0:0	8	i_type
water	67:76	0:0	6	;
return	68:8	68:27	6	VLC_EGENERIC
water	68:15	0:0	7	VLC_EGENERIC
water	69:4	0:0	6	}
if	70:4	76:4	2	(( p_ck -> i_data > 0 ) && (net_Read (p_access ,p_sys -> fd ,NULL ,& p_sys -> buffer [ 12 ] ,p_ck -> i_data ,true ) < p_ck -> i_data ))
cond	70:8	72:54	3	( p_ck -> i_data > 0 ) && (net_Read (p_access ,p_sys -> fd ,NULL ,& p_sys -> buffer [ 12 ] ,p_ck -> i_data ,true ) < p_ck -> i_data )
water	70:8	0:0	4	(
water	70:9	0:0	4	p_ck
op	70:13	0:0	4	->
water	70:15	0:0	4	i_data
op	70:22	0:0	4	>
water	70:24	0:0	4	0
water	70:25	0:0	4	)
op	70:27	0:0	4	&&
water	71:8	0:0	4	(
call	71:9	72:38	4	net_Read
arg	71:19	71:27	5	p_access
water	71:19	0:0	6	p_access
arg	71:29	71:38	5	p_sys->fd
water	71:29	0:0	6	p_sys
op	71:34	0:0	6	->
water	71:36	0:0	6	fd
arg	71:40	71:44	5	NULL
water	71:40	0:0	6	NULL
arg	71:46	71:64	5	&p_sys->buffer[12]
op	71:46	0:0	6	&
water	71:47	0:0	6	p_sys
op	71:52	0:0	6	->
water	71:54	0:0	6	buffer
op	71:60	0:0	6	[
water	71:61	0:0	6	12
op	71:63	0:0	6	]
arg	72:19	72:31	5	p_ck->i_data
water	72:19	0:0	6	p_ck
op	72:23	0:0	6	->
water	72:25	0:0	6	i_data
arg	72:33	72:38	5	true
water	72:33	0:0	6	true
op	72:40	0:0	4	<
water	72:42	0:0	4	p_ck
op	72:46	0:0	4	->
water	72:48	0:0	4	i_data
water	72:54	0:0	4	)
stmts	73:4	76:4	3	
water	73:4	0:0	4	{
call	74:8	74:48	4	msg_Err
arg	74:17	74:25	5	p_access
water	74:17	0:0	6	p_access
arg	74:27	74:48	5	"cannot read data 4"
water	74:27	0:0	6	"cannot read data 4"
water	74:49	0:0	4	;
return	75:8	75:27	4	VLC_EGENERIC
water	75:15	0:0	5	VLC_EGENERIC
water	76:4	0:0	4	}
if	78:4	82:4	2	(( p_sys -> i_packet_sequence != 0 ) && ( p_ck -> i_sequence != p_sys -> i_packet_sequence ))
cond	78:8	79:53	3	( p_sys -> i_packet_sequence != 0 ) && ( p_ck -> i_sequence != p_sys -> i_packet_sequence )
water	78:8	0:0	4	(
water	78:9	0:0	4	p_sys
op	78:14	0:0	4	->
water	78:16	0:0	4	i_packet_sequence
op	78:34	0:0	4	!=
water	78:37	0:0	4	0
water	78:38	0:0	4	)
op	78:40	0:0	4	&&
water	79:8	0:0	4	(
water	79:9	0:0	4	p_ck
op	79:13	0:0	4	->
water	79:15	0:0	4	i_sequence
op	79:26	0:0	4	!=
water	79:29	0:0	4	p_sys
op	79:34	0:0	4	->
water	79:36	0:0	4	i_packet_sequence
water	79:53	0:0	4	)
stmts	80:4	82:4	3	
water	80:4	0:0	4	{
call	81:8	81:99	4	msg_Warn
arg	81:18	81:26	5	p_access
water	81:18	0:0	6	p_access
arg	81:28	81:54	5	"packet lost ? (%d != %d)"
water	81:28	0:0	6	"packet lost ? (%d != %d)"
arg	81:56	81:72	5	p_ck->i_sequence
water	81:56	0:0	6	p_ck
op	81:60	0:0	6	->
water	81:62	0:0	6	i_sequence
arg	81:74	81:99	5	p_sys->i_packet_sequence
water	81:74	0:0	6	p_sys
op	81:79	0:0	6	->
water	81:81	0:0	6	i_packet_sequence
water	81:100	0:0	4	;
water	82:4	0:0	4	}
water	84:4	0:0	2	p_sys
op	84:9	0:0	2	->
water	84:11	0:0	2	i_packet_sequence
op	84:29	0:0	2	=
water	84:31	0:0	2	p_ck
op	84:35	0:0	2	->
water	84:37	0:0	2	i_sequence
op	84:48	0:0	2	+
water	84:50	0:0	2	1
water	84:51	0:0	2	;
water	85:4	0:0	2	p_sys
op	85:9	0:0	2	->
water	85:11	0:0	2	i_packet_used
op	85:27	0:0	2	=
water	85:29	0:0	2	0
water	85:30	0:0	2	;
water	86:4	0:0	2	p_sys
op	86:9	0:0	2	->
water	86:11	0:0	2	i_packet_length
op	86:27	0:0	2	=
water	86:29	0:0	2	p_ck
op	86:33	0:0	2	->
water	86:35	0:0	2	i_data
water	86:41	0:0	2	;
water	87:4	0:0	2	p_sys
op	87:9	0:0	2	->
water	87:11	0:0	2	p_packet
op	87:27	0:0	2	=
water	87:29	0:0	2	p_ck
op	87:33	0:0	2	->
water	87:35	0:0	2	p_data
water	87:41	0:0	2	;
return	88:4	88:22	2	VLC_SUCCESS
water	88:11	0:0	3	VLC_SUCCESS
