func	2:0	56:0	0	int	aout_DecNew
params	2:15	0:0	1	
param	2:17	2:39	2	audio_output_t *	p_aout
param	3:17	3:54	2	const audio_sample_format_t *	p_format
param	4:17	4:57	2	const audio_replay_gain_t *	p_replay_gain
param	5:17	5:59	2	const aout_request_vout_t *	p_request_vout
stmnts	8:4	55:12	1	
if	8:4	12:4	2	(p_format -> i_channels !=aout_FormatNbChannels (p_format ))
cond	8:8	8:64	3	p_format -> i_channels !=aout_FormatNbChannels (p_format )
water	8:8	0:0	4	p_format
op	8:16	0:0	4	->
water	8:18	0:0	4	i_channels
op	8:29	0:0	4	!=
call	8:32	8:64	4	aout_FormatNbChannels
arg	8:55	8:64	5	p_format
water	8:55	0:0	6	p_format
stmts	9:4	12:4	3	
water	9:4	0:0	4	{
call	10:8	10:78	4	msg_Err
arg	10:17	10:23	5	p_aout
water	10:17	0:0	6	p_aout
arg	10:25	10:78	5	"incompatible audio channels count with layout mask"
water	10:25	0:0	6	"incompatible audio channels count with layout mask"
water	10:79	0:0	4	;
return	11:8	11:17	4	-1
op	11:15	0:0	5	-
water	11:16	0:0	5	1
water	12:4	0:0	4	}
if	13:4	18:4	2	(p_format -> i_rate > 352800)
cond	13:8	13:27	3	p_format -> i_rate > 352800
water	13:8	0:0	4	p_format
op	13:16	0:0	4	->
water	13:18	0:0	4	i_rate
op	13:25	0:0	4	>
water	13:27	0:0	4	352800
stmts	14:4	18:4	3	
water	14:4	0:0	4	{
call	15:8	16:34	4	msg_Err
arg	15:17	15:23	5	p_aout
water	15:17	0:0	6	p_aout
arg	15:25	15:64	5	"excessive audio sample frequency (%u)"
water	15:25	0:0	6	"excessive audio sample frequency (%u)"
arg	16:17	16:34	5	p_format->i_rate
water	16:17	0:0	6	p_format
op	16:25	0:0	6	->
water	16:27	0:0	6	i_rate
water	16:35	0:0	4	;
return	17:8	17:17	4	-1
op	17:15	0:0	5	-
water	17:16	0:0	5	1
water	18:4	0:0	4	}
if	19:4	24:4	2	(p_format -> i_rate < 4000)
cond	19:8	19:27	3	p_format -> i_rate < 4000
water	19:8	0:0	4	p_format
op	19:16	0:0	4	->
water	19:18	0:0	4	i_rate
op	19:25	0:0	4	<
water	19:27	0:0	4	4000
stmts	20:4	24:4	3	
water	20:4	0:0	4	{
call	21:8	22:34	4	msg_Err
arg	21:17	21:23	5	p_aout
water	21:17	0:0	6	p_aout
arg	21:25	21:62	5	"too low audio sample frequency (%u)"
water	21:25	0:0	6	"too low audio sample frequency (%u)"
arg	22:17	22:34	5	p_format->i_rate
water	22:17	0:0	6	p_format
op	22:25	0:0	6	->
water	22:27	0:0	6	i_rate
water	22:35	0:0	4	;
return	23:8	23:17	4	-1
op	23:15	0:0	5	-
water	23:16	0:0	5	1
water	24:4	0:0	4	}
decl	25:4	25:44	2	aout_owner_t	*owner
op	25:24	0:0	2	=
call	25:26	25:43	3	aout_owner
arg	25:37	25:43	4	p_aout
water	25:37	0:0	5	p_aout
call	27:4	27:27	2	aout_OutputLock
arg	27:21	27:27	3	p_aout
water	27:21	0:0	4	p_aout
water	27:28	0:0	2	;
call	28:4	28:39	2	var_Destroy
arg	28:17	28:23	3	p_aout
water	28:17	0:0	4	p_aout
arg	28:25	28:39	3	"stereo-mode"
water	28:25	0:0	4	"stereo-mode"
water	28:40	0:0	2	;
water	30:4	0:0	2	owner
op	30:9	0:0	2	->
water	30:11	0:0	2	volume
op	30:18	0:0	2	=
call	30:20	30:58	2	aout_volume_New
arg	30:37	30:43	3	p_aout
water	30:37	0:0	4	p_aout
arg	30:45	30:58	3	p_replay_gain
water	30:45	0:0	4	p_replay_gain
water	30:59	0:0	2	;
call	31:4	31:36	2	atomic_store
arg	31:18	31:33	3	&owner->restart
op	31:18	0:0	4	&
water	31:19	0:0	4	owner
op	31:24	0:0	4	->
water	31:26	0:0	4	restart
arg	31:35	31:36	3	0
water	31:35	0:0	4	0
water	31:37	0:0	2	;
water	32:4	0:0	2	owner
op	32:9	0:0	2	->
water	32:11	0:0	2	input_format
op	32:24	0:0	2	=
op	32:26	0:0	2	*
water	32:27	0:0	2	p_format
water	32:35	0:0	2	;
water	33:4	0:0	2	owner
op	33:9	0:0	2	->
water	33:11	0:0	2	mixer_format
op	33:24	0:0	2	=
water	33:26	0:0	2	owner
op	33:31	0:0	2	->
water	33:33	0:0	2	input_format
water	33:45	0:0	2	;
water	34:4	0:0	2	owner
op	34:9	0:0	2	->
water	34:11	0:0	2	request_vout
op	34:24	0:0	2	=
op	34:26	0:0	2	*
water	34:27	0:0	2	p_request_vout
water	34:41	0:0	2	;
if	35:4	36:18	2	(aout_OutputNew (p_aout ,& owner -> mixer_format ))
cond	35:8	35:52	3	aout_OutputNew (p_aout ,& owner -> mixer_format )
call	35:8	35:52	4	aout_OutputNew
arg	35:24	35:30	5	p_aout
water	35:24	0:0	6	p_aout
arg	35:32	35:52	5	&owner->mixer_format
op	35:32	0:0	6	&
water	35:33	0:0	6	owner
op	35:38	0:0	6	->
water	35:40	0:0	6	mixer_format
stmts	36:8	36:18	3	
goto	36:8	36:18	4	error
water	36:13	0:0	5	error
call	37:4	37:70	2	aout_volume_SetFormat
arg	37:27	37:40	3	owner->volume
water	37:27	0:0	4	owner
op	37:32	0:0	4	->
water	37:34	0:0	4	volume
arg	37:42	37:70	3	owner->mixer_format.i_format
water	37:42	0:0	4	owner
op	37:47	0:0	4	->
water	37:49	0:0	4	mixer_format
op	37:61	0:0	4	.
water	37:62	0:0	4	i_format
water	37:71	0:0	2	;
water	39:4	0:0	2	owner
op	39:9	0:0	2	->
water	39:11	0:0	2	filters
op	39:19	0:0	2	=
call	39:21	40:58	2	aout_FiltersNew
arg	39:38	39:44	3	p_aout
water	39:38	0:0	4	p_aout
arg	39:46	39:54	3	p_format
water	39:46	0:0	4	p_format
arg	39:56	39:76	3	&owner->mixer_format
op	39:56	0:0	4	&
water	39:57	0:0	4	owner
op	39:62	0:0	4	->
water	39:64	0:0	4	mixer_format
arg	40:38	40:58	3	&owner->request_vout
op	40:38	0:0	4	&
water	40:39	0:0	4	owner
op	40:44	0:0	4	->
water	40:46	0:0	4	request_vout
water	40:59	0:0	2	;
if	41:4	49:4	2	(owner -> filters == NULL)
cond	41:8	41:26	3	owner -> filters == NULL
water	41:8	0:0	4	owner
op	41:13	0:0	4	->
water	41:15	0:0	4	filters
op	41:23	0:0	4	==
water	41:26	0:0	4	NULL
stmts	42:4	49:4	3	
water	42:4	0:0	4	{
call	43:8	43:33	4	aout_OutputDelete
arg	43:27	43:33	5	p_aout
water	43:27	0:0	6	p_aout
water	43:34	0:0	4	;
label	44:0	44:5	4	error :
call	45:8	45:41	4	aout_volume_Delete
arg	45:28	45:41	5	owner->volume
water	45:28	0:0	6	owner
op	45:33	0:0	6	->
water	45:35	0:0	6	volume
water	45:42	0:0	4	;
water	46:8	0:0	4	owner
op	46:13	0:0	4	->
water	46:15	0:0	4	volume
op	46:22	0:0	4	=
water	46:24	0:0	4	NULL
water	46:28	0:0	4	;
call	47:8	47:33	4	aout_OutputUnlock
arg	47:27	47:33	5	p_aout
water	47:27	0:0	6	p_aout
water	47:34	0:0	4	;
return	48:8	48:17	4	-1
op	48:15	0:0	5	-
water	48:16	0:0	5	1
water	49:4	0:0	4	}
water	50:4	0:0	2	owner
op	50:9	0:0	2	->
water	50:11	0:0	2	sync
op	50:15	0:0	2	.
water	50:16	0:0	2	end
op	50:20	0:0	2	=
water	50:22	0:0	2	VLC_TS_INVALID
water	50:36	0:0	2	;
water	51:4	0:0	2	owner
op	51:9	0:0	2	->
water	51:11	0:0	2	sync
op	51:15	0:0	2	.
water	51:16	0:0	2	resamp_type
op	51:28	0:0	2	=
water	51:30	0:0	2	AOUT_RESAMPLING_NONE
water	51:50	0:0	2	;
water	52:4	0:0	2	owner
op	52:9	0:0	2	->
water	52:11	0:0	2	sync
op	52:15	0:0	2	.
water	52:16	0:0	2	discontinuity
op	52:30	0:0	2	=
water	52:32	0:0	2	true
water	52:36	0:0	2	;
call	53:4	53:29	2	aout_OutputUnlock
arg	53:23	53:29	3	p_aout
water	53:23	0:0	4	p_aout
water	53:30	0:0	2	;
call	54:4	54:40	2	atomic_init
arg	54:17	54:37	3	&owner->buffers_lost
op	54:17	0:0	4	&
water	54:18	0:0	4	owner
op	54:23	0:0	4	->
water	54:25	0:0	4	buffers_lost
arg	54:39	54:40	3	0
water	54:39	0:0	4	0
water	54:41	0:0	2	;
return	55:4	55:12	2	0
water	55:11	0:0	3	0
