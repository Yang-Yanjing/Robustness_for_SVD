func	2:0	94:0	0	static int	Retrieve
params	2:19	0:0	1	
param	2:21	2:46	2	addons_finder_t *	p_finder
param	2:48	2:71	2	addon_entry_t *	p_entry
stmnts	4:4	93:16	1	
call	4:4	4:35	2	vlc_mutex_lock
arg	4:20	4:35	3	&p_entry->lock
op	4:20	0:0	4	&
water	4:21	0:0	4	p_entry
op	4:28	0:0	4	->
water	4:30	0:0	4	lock
water	4:36	0:0	2	;
if	5:4	9:4	2	(! p_entry -> psz_archive_uri)
cond	5:9	5:19	3	! p_entry -> psz_archive_uri
op	5:9	0:0	4	!
water	5:10	0:0	4	p_entry
op	5:17	0:0	4	->
water	5:19	0:0	4	psz_archive_uri
stmts	6:4	9:4	3	
water	6:4	0:0	4	{
call	7:8	7:41	4	vlc_mutex_unlock
arg	7:26	7:41	5	&p_entry->lock
op	7:26	0:0	6	&
water	7:27	0:0	6	p_entry
op	7:34	0:0	6	->
water	7:36	0:0	6	lock
water	7:42	0:0	4	;
return	8:8	8:27	4	VLC_EGENERIC
water	8:15	0:0	5	VLC_EGENERIC
water	9:4	0:0	4	}
decl	10:4	10:62	2	char	*psz_archive_uri
op	10:26	0:0	2	=
call	10:28	10:61	3	strdup
arg	10:36	10:61	4	p_entry->psz_archive_uri
water	10:36	0:0	5	p_entry
op	10:43	0:0	5	->
water	10:45	0:0	5	psz_archive_uri
call	11:4	11:37	2	vlc_mutex_unlock
arg	11:22	11:37	3	&p_entry->lock
op	11:22	0:0	4	&
water	11:23	0:0	4	p_entry
op	11:30	0:0	4	->
water	11:32	0:0	4	lock
water	11:38	0:0	2	;
if	12:4	13:25	2	(! psz_archive_uri)
cond	12:9	12:10	3	! psz_archive_uri
op	12:9	0:0	4	!
water	12:10	0:0	4	psz_archive_uri
stmts	13:8	13:25	3	
return	13:8	13:25	4	VLC_ENOMEM
water	13:15	0:0	5	VLC_ENOMEM
decl	15:4	15:22	2	stream_t	*p_stream
if	16:4	27:4	2	(psz_archive_uri [ 0 ] == '/')
cond	16:9	16:31	3	psz_archive_uri [ 0 ] == '/'
water	16:9	0:0	4	psz_archive_uri
op	16:24	0:0	4	[
water	16:25	0:0	4	0
op	16:26	0:0	4	]
op	16:28	0:0	4	==
water	16:31	0:0	4	'/'
stmts	17:4	27:4	3	
water	17:4	0:0	4	{
decl	19:8	19:21	4	char	*psz_uri
if	20:8	24:8	4	(!asprintf (& psz_uri ,ADDONS_REPO_SCHEMEHOST "%s" ,psz_archive_uri ))
cond	20:13	20:79	5	!asprintf (& psz_uri ,ADDONS_REPO_SCHEMEHOST "%s" ,psz_archive_uri )
op	20:13	0:0	6	!
call	20:15	20:79	6	asprintf
arg	20:25	20:33	7	&psz_uri
op	20:25	0:0	8	&
water	20:26	0:0	8	psz_uri
arg	20:35	20:61	7	ADDONS_REPO_SCHEMEHOST"%s"
water	20:35	0:0	8	ADDONS_REPO_SCHEMEHOST
water	20:57	0:0	8	"%s"
arg	20:63	20:79	7	psz_archive_uri
water	20:63	0:0	8	psz_archive_uri
stmts	21:8	24:8	5	
water	21:8	0:0	6	{
call	22:12	22:34	6	free
arg	22:18	22:34	7	psz_archive_uri
water	22:18	0:0	8	psz_archive_uri
water	22:35	0:0	6	;
return	23:12	23:29	6	VLC_ENOMEM
water	23:19	0:0	7	VLC_ENOMEM
water	24:8	0:0	6	}
water	25:8	0:0	4	p_stream
op	25:17	0:0	4	=
call	25:19	25:52	4	stream_UrlNew
arg	25:34	25:42	5	p_finder
water	25:34	0:0	6	p_finder
arg	25:44	25:52	5	psz_uri
water	25:44	0:0	6	psz_uri
water	25:53	0:0	4	;
call	26:8	26:22	4	free
arg	26:14	26:22	5	psz_uri
water	26:14	0:0	6	psz_uri
water	26:23	0:0	4	;
water	27:4	0:0	4	}
else	28:4	31:4	2
stmts	29:4	31:4	3	
water	29:4	0:0	4	{
water	30:8	0:0	4	p_stream
op	30:17	0:0	4	=
call	30:19	30:60	4	stream_UrlNew
arg	30:34	30:42	5	p_finder
water	30:34	0:0	6	p_finder
arg	30:44	30:60	5	psz_archive_uri
water	30:44	0:0	6	psz_archive_uri
water	30:61	0:0	4	;
water	31:4	0:0	4	}
call	32:4	32:65	2	msg_Dbg
arg	32:13	32:21	3	p_finder
water	32:13	0:0	4	p_finder
arg	32:23	32:47	3	"downloading archive %s"
water	32:23	0:0	4	"downloading archive %s"
arg	32:49	32:65	3	psz_archive_uri
water	32:49	0:0	4	psz_archive_uri
water	32:66	0:0	2	;
call	33:4	33:27	2	free
arg	33:11	33:27	3	psz_archive_uri
water	33:11	0:0	4	psz_archive_uri
water	33:28	0:0	2	;
if	34:4	34:40	2	(! p_stream)
cond	34:9	34:10	3	! p_stream
op	34:9	0:0	4	!
water	34:10	0:0	4	p_stream
stmts	34:21	34:40	3	
return	34:21	34:40	4	VLC_EGENERIC
water	34:28	0:0	5	VLC_EGENERIC
if	36:4	40:4	2	(p_finder -> p_sys -> psz_tempfile)
cond	36:9	36:26	3	p_finder -> p_sys -> psz_tempfile
water	36:9	0:0	4	p_finder
op	36:17	0:0	4	->
water	36:19	0:0	4	p_sys
op	36:24	0:0	4	->
water	36:26	0:0	4	psz_tempfile
stmts	37:4	40:4	3	
water	37:4	0:0	4	{
call	38:8	38:50	4	vlc_unlink
arg	38:20	38:50	5	p_finder->p_sys->psz_tempfile
water	38:20	0:0	6	p_finder
op	38:28	0:0	6	->
water	38:30	0:0	6	p_sys
op	38:35	0:0	6	->
water	38:37	0:0	6	psz_tempfile
water	38:51	0:0	4	;
call	39:8	39:48	4	FREENULL
arg	39:18	39:48	5	p_finder->p_sys->psz_tempfile
water	39:18	0:0	6	p_finder
op	39:26	0:0	6	->
water	39:28	0:0	6	p_sys
op	39:33	0:0	6	->
water	39:35	0:0	6	psz_tempfile
water	39:49	0:0	4	;
water	40:4	0:0	4	}
water	41:4	0:0	2	p_finder
op	41:12	0:0	2	->
water	41:14	0:0	2	p_sys
op	41:19	0:0	2	->
water	41:21	0:0	2	psz_tempfile
op	41:34	0:0	2	=
call	41:36	41:57	2	tempnam
arg	41:45	41:49	3	NULL
water	41:45	0:0	4	NULL
arg	41:51	41:57	3	"vlp"
water	41:51	0:0	4	"vlp"
water	41:58	0:0	2	;
if	42:4	47:4	2	(! p_finder -> p_sys -> psz_tempfile)
cond	42:9	42:27	3	! p_finder -> p_sys -> psz_tempfile
op	42:9	0:0	4	!
water	42:10	0:0	4	p_finder
op	42:18	0:0	4	->
water	42:20	0:0	4	p_sys
op	42:25	0:0	4	->
water	42:27	0:0	4	psz_tempfile
stmts	43:4	47:4	3	
water	43:4	0:0	4	{
call	44:8	44:60	4	msg_Err
arg	44:17	44:25	5	p_finder
water	44:17	0:0	6	p_finder
arg	44:27	44:60	5	"Can't create temp storage file"
water	44:27	0:0	6	"Can't create temp storage file"
water	44:61	0:0	4	;
call	45:8	45:32	4	stream_Delete
arg	45:23	45:32	5	p_stream
water	45:23	0:0	6	p_stream
water	45:33	0:0	4	;
return	46:8	46:27	4	VLC_EGENERIC
water	46:15	0:0	5	VLC_EGENERIC
water	47:4	0:0	4	}
decl	48:4	48:70	2	FILE	*p_destfile
op	48:21	0:0	2	=
call	48:23	48:69	3	vlc_fopen
arg	48:34	48:63	4	p_finder->p_sys->psz_tempfile
water	48:34	0:0	5	p_finder
op	48:42	0:0	5	->
water	48:44	0:0	5	p_sys
op	48:49	0:0	5	->
water	48:51	0:0	5	psz_tempfile
arg	48:65	48:69	4	"w"
water	48:65	0:0	5	"w"
if	49:4	55:4	2	(! p_destfile)
cond	49:8	49:9	3	! p_destfile
op	49:8	0:0	4	!
water	49:9	0:0	4	p_destfile
stmts	50:4	55:4	3	
water	50:4	0:0	4	{
call	51:8	51:68	4	msg_Err
arg	51:17	51:25	5	p_finder
water	51:17	0:0	6	p_finder
arg	51:27	51:68	5	"Failed to open addon temp storage file"
water	51:27	0:0	6	"Failed to open addon temp storage file"
water	51:69	0:0	4	;
call	52:8	52:46	4	FREENULL
arg	52:17	52:46	5	p_finder->p_sys->psz_tempfile
water	52:17	0:0	6	p_finder
op	52:25	0:0	6	->
water	52:27	0:0	6	p_sys
op	52:32	0:0	6	->
water	52:34	0:0	6	psz_tempfile
water	52:47	0:0	4	;
call	53:8	53:32	4	stream_Delete
arg	53:23	53:32	5	p_stream
water	53:23	0:0	6	p_stream
water	53:33	0:0	4	;
return	54:8	54:27	4	VLC_EGENERIC
water	54:15	0:0	5	VLC_EGENERIC
water	55:4	0:0	4	}
decl	56:4	56:22	2	char	buffer[1<<10]
decl	57:4	57:18	2	int	i_read
op	57:15	0:0	2	=
water	57:17	0:0	2	0
while	58:4	67:4	2	(( i_read =stream_Read (p_stream ,& buffer ,1 << 10 ) ))
cond	58:12	58:63	3	( i_read =stream_Read (p_stream ,& buffer ,1 << 10 ) )
water	58:12	0:0	4	(
water	58:14	0:0	4	i_read
op	58:21	0:0	4	=
call	58:23	58:61	4	stream_Read
arg	58:36	58:44	5	p_stream
water	58:36	0:0	6	p_stream
arg	58:46	58:53	5	&buffer
op	58:46	0:0	6	&
water	58:47	0:0	6	buffer
arg	58:55	58:61	5	1<<10
water	58:55	0:0	6	1
op	58:56	0:0	6	<<
water	58:58	0:0	6	10
water	58:63	0:0	4	)
stmts	59:4	67:4	3	
water	59:4	0:0	4	{
if	60:8	66:8	4	(fwrite (& buffer ,i_read ,1 ,p_destfile ) < 1)
cond	60:13	60:56	5	fwrite (& buffer ,i_read ,1 ,p_destfile ) < 1
call	60:13	60:52	6	fwrite
arg	60:21	60:28	7	&buffer
op	60:21	0:0	8	&
water	60:22	0:0	8	buffer
arg	60:30	60:36	7	i_read
water	60:30	0:0	8	i_read
arg	60:38	60:39	7	1
water	60:38	0:0	8	1
arg	60:41	60:52	7	p_destfile
water	60:41	0:0	8	p_destfile
op	60:54	0:0	6	<
water	60:56	0:0	6	1
stmts	61:8	66:8	5	
water	61:8	0:0	6	{
call	62:12	62:63	6	msg_Err
arg	62:21	62:29	7	p_finder
water	62:21	0:0	8	p_finder
arg	62:31	62:63	7	"Failed to write to Addon file"
water	62:31	0:0	8	"Failed to write to Addon file"
water	62:64	0:0	6	;
call	63:12	63:31	6	fclose
arg	63:20	63:31	7	p_destfile
water	63:20	0:0	8	p_destfile
water	63:32	0:0	6	;
call	64:12	64:36	6	stream_Delete
arg	64:27	64:36	7	p_stream
water	64:27	0:0	8	p_stream
water	64:37	0:0	6	;
return	65:12	65:31	6	VLC_EGENERIC
water	65:19	0:0	7	VLC_EGENERIC
water	66:8	0:0	6	}
water	67:4	0:0	4	}
call	68:4	68:23	2	fclose
arg	68:12	68:23	3	p_destfile
water	68:12	0:0	4	p_destfile
water	68:24	0:0	2	;
call	69:4	69:28	2	stream_Delete
arg	69:19	69:28	3	p_stream
water	69:19	0:0	4	p_stream
water	69:29	0:0	2	;
call	70:4	70:81	2	msg_Dbg
arg	70:13	70:21	3	p_finder
water	70:13	0:0	4	p_finder
arg	70:23	70:49	3	"Reading manifest from %s"
water	70:23	0:0	4	"Reading manifest from %s"
arg	70:51	70:81	3	p_finder->p_sys->psz_tempfile
water	70:51	0:0	4	p_finder
op	70:59	0:0	4	->
water	70:61	0:0	4	p_sys
op	70:66	0:0	4	->
water	70:68	0:0	4	psz_tempfile
water	70:82	0:0	2	;
decl	71:4	71:82	2	char	*psz_tempfileuri
op	71:26	0:0	2	=
call	71:28	71:81	3	vlc_path2uri
arg	71:42	71:71	4	p_finder->p_sys->psz_tempfile
water	71:42	0:0	5	p_finder
op	71:50	0:0	5	->
water	71:52	0:0	5	p_sys
op	71:57	0:0	5	->
water	71:59	0:0	5	psz_tempfile
arg	71:73	71:81	4	"unzip"
water	71:73	0:0	5	"unzip"
if	72:4	73:25	2	(! psz_tempfileuri)
cond	72:9	72:10	3	! psz_tempfileuri
op	72:9	0:0	4	!
water	72:10	0:0	4	psz_tempfileuri
stmts	73:8	73:25	3	
return	73:8	73:25	4	VLC_ENOMEM
water	73:15	0:0	5	VLC_ENOMEM
decl	74:4	74:26	2	char	*psz_manifest_uri
if	75:4	79:4	2	(asprintf (& psz_manifest_uri ,"%s!/manifest.xml" ,psz_tempfileuri ) < 1)
cond	75:9	75:78	3	asprintf (& psz_manifest_uri ,"%s!/manifest.xml" ,psz_tempfileuri ) < 1
call	75:9	75:74	4	asprintf
arg	75:19	75:36	5	&psz_manifest_uri
op	75:19	0:0	6	&
water	75:20	0:0	6	psz_manifest_uri
arg	75:38	75:56	5	"%s!/manifest.xml"
water	75:38	0:0	6	"%s!/manifest.xml"
arg	75:58	75:74	5	psz_tempfileuri
water	75:58	0:0	6	psz_tempfileuri
op	75:76	0:0	4	<
water	75:78	0:0	4	1
stmts	76:4	79:4	3	
water	76:4	0:0	4	{
call	77:8	77:30	4	free
arg	77:14	77:30	5	psz_tempfileuri
water	77:14	0:0	6	psz_tempfileuri
water	77:31	0:0	4	;
return	78:8	78:25	4	VLC_ENOMEM
water	78:15	0:0	5	VLC_ENOMEM
water	79:4	0:0	4	}
water	80:4	0:0	2	p_stream
op	80:13	0:0	2	=
call	80:15	80:57	2	stream_UrlNew
arg	80:30	80:38	3	p_finder
water	80:30	0:0	4	p_finder
arg	80:40	80:57	3	psz_manifest_uri
water	80:40	0:0	4	psz_manifest_uri
water	80:58	0:0	2	;
call	81:4	81:27	2	free
arg	81:10	81:27	3	psz_manifest_uri
water	81:10	0:0	4	psz_manifest_uri
water	81:28	0:0	2	;
if	82:4	86:4	2	(! p_stream)
cond	82:9	82:10	3	! p_stream
op	82:9	0:0	4	!
water	82:10	0:0	4	p_stream
stmts	83:4	86:4	3	
water	83:4	0:0	4	{
call	84:8	84:30	4	free
arg	84:14	84:30	5	psz_tempfileuri
water	84:14	0:0	6	psz_tempfileuri
water	84:31	0:0	4	;
return	85:8	85:27	4	VLC_EGENERIC
water	85:15	0:0	5	VLC_EGENERIC
water	86:4	0:0	4	}
call	87:4	87:35	2	vlc_mutex_lock
arg	87:20	87:35	3	&p_entry->lock
op	87:20	0:0	4	&
water	87:21	0:0	4	p_entry
op	87:28	0:0	4	->
water	87:30	0:0	4	lock
water	87:36	0:0	2	;
decl	88:4	89:48	2	int	i_ret
op	88:14	0:0	2	=
water	88:16	0:0	2	(
call	88:18	88:78	3	ParseManifest
arg	88:33	88:41	4	p_finder
water	88:33	0:0	5	p_finder
arg	88:43	88:50	4	p_entry
water	88:43	0:0	5	p_entry
arg	88:52	88:67	4	psz_tempfileuri
water	88:52	0:0	5	psz_tempfileuri
arg	88:69	88:78	4	p_stream
water	88:69	0:0	5	p_stream
op	88:80	0:0	2	>
water	88:82	0:0	2	0
water	88:84	0:0	2	)
water	89:20	0:0	2	?
water	89:22	0:0	2	VLC_SUCCESS
water	89:34	0:0	2	:
water	89:36	0:0	2	VLC_EGENERIC
call	90:4	90:37	2	vlc_mutex_unlock
arg	90:22	90:37	3	&p_entry->lock
op	90:22	0:0	4	&
water	90:23	0:0	4	p_entry
op	90:30	0:0	4	->
water	90:32	0:0	4	lock
water	90:38	0:0	2	;
call	91:4	91:26	2	free
arg	91:10	91:26	3	psz_tempfileuri
water	91:10	0:0	4	psz_tempfileuri
water	91:27	0:0	2	;
call	92:4	92:28	2	stream_Delete
arg	92:19	92:28	3	p_stream
water	92:19	0:0	4	p_stream
water	92:29	0:0	2	;
return	93:4	93:16	2	i_ret
water	93:11	0:0	3	i_ret
