func	2:0	74:0	0	bool	TPCircularBufferInit
params	2:25	0:0	1	
param	2:26	2:50	2	TPCircularBuffer *	buffer
param	2:52	2:62	2	int	length
stmnts	0:0	73:16	1	
decl	4:4	4:19	2	int	retries
op	4:16	0:0	2	=
water	4:18	0:0	2	3
while	5:4	72:4	2	(true)
cond	5:12	5:12	3	true
water	5:12	0:0	4	true
stmts	5:19	72:4	3	
water	5:19	0:0	4	{
water	6:8	0:0	4	buffer
op	6:14	0:0	4	->
water	6:16	0:0	4	length
op	6:23	0:0	4	=
call	6:25	6:42	4	round_page
arg	6:36	6:42	5	length
water	6:36	0:0	6	length
water	6:43	0:0	4	;
decl	9:8	9:34	4	vm_address_t	bufferAddress
decl	10:8	13:61	4	kern_return_t	result
op	10:29	0:0	4	=
call	10:31	13:60	5	vm_allocate
arg	10:43	10:59	6	mach_task_self()
call	10:43	10:58	7	mach_task_self
arg	11:43	11:57	6	&bufferAddress
op	11:43	0:0	7	&
water	11:44	0:0	7	bufferAddress
arg	12:43	12:61	6	buffer->length*2
water	12:43	0:0	7	buffer
op	12:49	0:0	7	->
water	12:51	0:0	7	length
op	12:58	0:0	7	*
water	12:60	0:0	7	2
arg	13:43	13:60	6	VM_FLAGS_ANYWHERE
water	13:43	0:0	7	VM_FLAGS_ANYWHERE
if	14:8	21:8	4	(result != ERR_SUCCESS)
cond	14:13	14:23	5	result != ERR_SUCCESS
water	14:13	0:0	6	result
op	14:20	0:0	6	!=
water	14:23	0:0	6	ERR_SUCCESS
stmts	14:37	21:8	5	
water	14:37	0:0	6	{
if	15:12	18:12	6	(retries -- == 0)
cond	15:17	15:30	7	retries -- == 0
water	15:17	0:0	8	retries
op	15:24	0:0	8	--
op	15:27	0:0	8	==
water	15:30	0:0	8	0
stmts	15:34	18:12	7	
water	15:34	0:0	8	{
call	16:16	16:56	8	reportResult
arg	16:29	16:35	9	result
water	16:29	0:0	10	result
arg	16:37	16:56	9	"Buffer allocation"
water	16:37	0:0	10	"Buffer allocation"
water	16:57	0:0	8	;
return	17:16	17:28	8	false
water	17:23	0:0	9	false
water	18:12	0:0	8	}
continue	20:12	20:20	6	
water	21:8	0:0	6	}
water	23:8	0:0	4	result
op	23:15	0:0	4	=
call	23:17	25:45	4	vm_deallocate
arg	23:31	23:47	5	mach_task_self()
call	23:31	23:46	6	mach_task_self
arg	24:31	24:61	5	bufferAddress+buffer->length
water	24:31	0:0	6	bufferAddress
op	24:45	0:0	6	+
water	24:47	0:0	6	buffer
op	24:53	0:0	6	->
water	24:55	0:0	6	length
arg	25:31	25:45	5	buffer->length
water	25:31	0:0	6	buffer
op	25:37	0:0	6	->
water	25:39	0:0	6	length
water	25:46	0:0	4	;
if	26:8	34:8	4	(result != ERR_SUCCESS)
cond	26:13	26:23	5	result != ERR_SUCCESS
water	26:13	0:0	6	result
op	26:20	0:0	6	!=
water	26:23	0:0	6	ERR_SUCCESS
stmts	26:37	34:8	5	
water	26:37	0:0	6	{
if	27:12	30:12	6	(retries -- == 0)
cond	27:17	27:30	7	retries -- == 0
water	27:17	0:0	8	retries
op	27:24	0:0	8	--
op	27:27	0:0	8	==
water	27:30	0:0	8	0
stmts	27:34	30:12	7	
water	27:34	0:0	8	{
call	28:16	28:58	8	reportResult
arg	28:29	28:35	9	result
water	28:29	0:0	10	result
arg	28:37	28:58	9	"Buffer deallocation"
water	28:37	0:0	10	"Buffer deallocation"
water	28:59	0:0	8	;
return	29:16	29:28	8	false
water	29:23	0:0	9	false
water	30:12	0:0	8	}
call	32:12	32:73	6	vm_deallocate
arg	32:26	32:42	7	mach_task_self()
call	32:26	32:41	8	mach_task_self
arg	32:44	32:57	7	bufferAddress
water	32:44	0:0	8	bufferAddress
arg	32:59	32:73	7	buffer->length
water	32:59	0:0	8	buffer
op	32:65	0:0	8	->
water	32:67	0:0	8	length
water	32:74	0:0	6	;
continue	33:12	33:20	6	
water	34:8	0:0	6	}
decl	36:8	36:68	4	vm_address_t	virtualAddress
op	36:36	0:0	4	=
water	36:38	0:0	4	bufferAddress
op	36:52	0:0	4	+
water	36:54	0:0	4	buffer
op	36:60	0:0	4	->
water	36:62	0:0	4	length
decl	37:8	37:36	4	vm_prot_t	cur_prot
water	37:26	0:0	4	,
decl	37:8	37:36	4	vm_prot_t	max_prot
water	38:8	0:0	4	result
op	38:15	0:0	4	=
call	38:17	48:44	4	vm_remap
arg	38:26	38:42	5	mach_task_self()
call	38:26	38:41	6	mach_task_self
arg	39:26	39:41	5	&virtualAddress
op	39:26	0:0	6	&
water	39:27	0:0	6	virtualAddress
arg	40:26	40:40	5	buffer->length
water	40:26	0:0	6	buffer
op	40:32	0:0	6	->
water	40:34	0:0	6	length
arg	41:26	41:27	5	0
water	41:26	0:0	6	0
arg	42:26	42:27	5	0
water	42:26	0:0	6	0
arg	43:26	43:42	5	mach_task_self()
call	43:26	43:41	6	mach_task_self
arg	44:26	44:39	5	bufferAddress
water	44:26	0:0	6	bufferAddress
arg	45:26	45:27	5	0
water	45:26	0:0	6	0
arg	46:26	46:35	5	&cur_prot
op	46:26	0:0	6	&
water	46:27	0:0	6	cur_prot
arg	47:26	47:35	5	&max_prot
op	47:26	0:0	6	&
water	47:27	0:0	6	max_prot
arg	48:26	48:44	5	VM_INHERIT_DEFAULT
water	48:26	0:0	6	VM_INHERIT_DEFAULT
water	48:45	0:0	4	;
if	49:8	57:8	4	(result != ERR_SUCCESS)
cond	49:13	49:23	5	result != ERR_SUCCESS
water	49:13	0:0	6	result
op	49:20	0:0	6	!=
water	49:23	0:0	6	ERR_SUCCESS
stmts	49:37	57:8	5	
water	49:37	0:0	6	{
if	50:12	53:12	6	(retries -- == 0)
cond	50:17	50:30	7	retries -- == 0
water	50:17	0:0	8	retries
op	50:24	0:0	8	--
op	50:27	0:0	8	==
water	50:30	0:0	8	0
stmts	50:34	53:12	7	
water	50:34	0:0	8	{
call	51:16	51:58	8	reportResult
arg	51:29	51:35	9	result
water	51:29	0:0	10	result
arg	51:37	51:58	9	"Remap buffer memory"
water	51:37	0:0	10	"Remap buffer memory"
water	51:59	0:0	8	;
return	52:16	52:28	8	false
water	52:23	0:0	9	false
water	53:12	0:0	8	}
call	55:12	55:73	6	vm_deallocate
arg	55:26	55:42	7	mach_task_self()
call	55:26	55:41	8	mach_task_self
arg	55:44	55:57	7	bufferAddress
water	55:44	0:0	8	bufferAddress
arg	55:59	55:73	7	buffer->length
water	55:59	0:0	8	buffer
op	55:65	0:0	8	->
water	55:67	0:0	8	length
water	55:74	0:0	6	;
continue	56:12	56:20	6	
water	57:8	0:0	6	}
if	58:8	67:8	4	(virtualAddress != bufferAddress + buffer -> length)
cond	58:13	58:53	5	virtualAddress != bufferAddress + buffer -> length
water	58:13	0:0	6	virtualAddress
op	58:28	0:0	6	!=
water	58:31	0:0	6	bufferAddress
op	58:44	0:0	6	+
water	58:45	0:0	6	buffer
op	58:51	0:0	6	->
water	58:53	0:0	6	length
stmts	58:62	67:8	5	
water	58:62	0:0	6	{
if	60:12	63:12	6	(retries -- == 0)
cond	60:17	60:30	7	retries -- == 0
water	60:17	0:0	8	retries
op	60:24	0:0	8	--
op	60:27	0:0	8	==
water	60:30	0:0	8	0
stmts	60:34	63:12	7	
water	60:34	0:0	8	{
call	61:16	61:70	8	printf
arg	61:23	61:70	9	"Couldn't map buffer memory to end of buffer\n"
water	61:23	0:0	10	"Couldn't map buffer memory to end of buffer\n"
water	61:71	0:0	8	;
return	62:16	62:28	8	false
water	62:23	0:0	9	false
water	63:12	0:0	8	}
call	64:12	64:74	6	vm_deallocate
arg	64:26	64:42	7	mach_task_self()
call	64:26	64:41	8	mach_task_self
arg	64:44	64:58	7	virtualAddress
water	64:44	0:0	8	virtualAddress
arg	64:60	64:74	7	buffer->length
water	64:60	0:0	8	buffer
op	64:66	0:0	8	->
water	64:68	0:0	8	length
water	64:75	0:0	6	;
call	65:12	65:73	6	vm_deallocate
arg	65:26	65:42	7	mach_task_self()
call	65:26	65:41	8	mach_task_self
arg	65:44	65:57	7	bufferAddress
water	65:44	0:0	8	bufferAddress
arg	65:59	65:73	7	buffer->length
water	65:59	0:0	8	buffer
op	65:65	0:0	8	->
water	65:67	0:0	8	length
water	65:74	0:0	6	;
continue	66:12	66:20	6	
water	67:8	0:0	6	}
water	68:8	0:0	4	buffer
op	68:14	0:0	4	->
water	68:16	0:0	4	buffer
op	68:23	0:0	4	=
water	68:25	0:0	4	(
water	68:26	0:0	4	void
op	68:30	0:0	4	*
water	68:31	0:0	4	)
water	68:32	0:0	4	bufferAddress
water	68:45	0:0	4	;
water	69:8	0:0	4	buffer
op	69:14	0:0	4	->
water	69:16	0:0	4	fillCount
op	69:26	0:0	4	=
water	69:28	0:0	4	0
water	69:29	0:0	4	;
water	70:8	0:0	4	buffer
op	70:14	0:0	4	->
water	70:16	0:0	4	head
op	70:21	0:0	4	=
water	70:23	0:0	4	buffer
op	70:29	0:0	4	->
water	70:31	0:0	4	tail
op	70:36	0:0	4	=
water	70:38	0:0	4	0
water	70:39	0:0	4	;
return	71:8	71:19	4	true
water	71:15	0:0	5	true
water	72:4	0:0	4	}
return	73:4	73:16	2	false
water	73:11	0:0	3	false
