func	2:0	58:0	0	static bool	ReadWin32
params	2:21	0:0	1	
param	2:23	2:44	2	intf_thread_t *	p_intf
param	2:46	2:60	2	char *	p_buffer
param	2:62	2:75	2	int *	pi_size
stmnts	0:0	57:16	1	
decl	4:4	4:29	2	INPUT_RECORD	input_record
decl	5:4	5:14	2	DWORD	i_dw
while	7:4	55:4	2	(WaitForSingleObjectEx (p_intf -> p_sys -> hConsoleIn ,INTF_IDLE_SLEEP / 1000 ,TRUE ) == WAIT_OBJECT_0)
cond	7:11	8:64	3	WaitForSingleObjectEx (p_intf -> p_sys -> hConsoleIn ,INTF_IDLE_SLEEP / 1000 ,TRUE ) == WAIT_OBJECT_0
call	7:11	8:59	4	WaitForSingleObjectEx
arg	7:34	7:59	5	p_intf->p_sys->hConsoleIn
water	7:34	0:0	6	p_intf
op	7:40	0:0	6	->
water	7:42	0:0	6	p_sys
op	7:47	0:0	6	->
water	7:49	0:0	6	hConsoleIn
arg	8:32	8:52	5	INTF_IDLE_SLEEP/1000
water	8:32	0:0	6	INTF_IDLE_SLEEP
op	8:47	0:0	6	/
water	8:48	0:0	6	1000
arg	8:54	8:59	5	TRUE
water	8:54	0:0	6	TRUE
op	8:61	0:0	4	==
water	8:64	0:0	4	WAIT_OBJECT_0
stmts	9:4	55:4	3	
water	9:4	0:0	4	{
while	10:8	48:8	4	(* pi_size < MAX_LINE_LENGTH &&ReadConsoleInput (p_intf -> p_sys -> hConsoleIn ,& input_record ,1 ,& i_dw ))
cond	10:15	12:42	5	* pi_size < MAX_LINE_LENGTH &&ReadConsoleInput (p_intf -> p_sys -> hConsoleIn ,& input_record ,1 ,& i_dw )
op	10:15	0:0	6	*
water	10:16	0:0	6	pi_size
op	10:24	0:0	6	<
water	10:26	0:0	6	MAX_LINE_LENGTH
op	10:42	0:0	6	&&
call	11:15	12:42	6	ReadConsoleInput
arg	11:33	11:58	7	p_intf->p_sys->hConsoleIn
water	11:33	0:0	8	p_intf
op	11:39	0:0	8	->
water	11:41	0:0	8	p_sys
op	11:46	0:0	8	->
water	11:48	0:0	8	hConsoleIn
arg	11:60	11:73	7	&input_record
op	11:60	0:0	8	&
water	11:61	0:0	8	input_record
arg	12:33	12:34	7	1
water	12:33	0:0	8	1
arg	12:36	12:42	7	&i_dw
op	12:36	0:0	8	&
water	12:37	0:0	8	i_dw
stmts	13:8	48:8	5	
water	13:8	0:0	6	{
if	14:12	23:12	6	(input_record . EventType != KEY_EVENT || ! input_record . Event . KeyEvent . bKeyDown || input_record . Event . KeyEvent . wVirtualKeyCode == VK_SHIFT || input_record . Event . KeyEvent . wVirtualKeyCode == VK_CONTROL || input_record . Event . KeyEvent . wVirtualKeyCode == VK_MENU || input_record . Event . KeyEvent . wVirtualKeyCode == VK_CAPITAL)
cond	14:16	19:63	7	input_record . EventType != KEY_EVENT || ! input_record . Event . KeyEvent . bKeyDown || input_record . Event . KeyEvent . wVirtualKeyCode == VK_SHIFT || input_record . Event . KeyEvent . wVirtualKeyCode == VK_CONTROL || input_record . Event . KeyEvent . wVirtualKeyCode == VK_MENU || input_record . Event . KeyEvent . wVirtualKeyCode == VK_CAPITAL
water	14:16	0:0	8	input_record
op	14:28	0:0	8	.
water	14:29	0:0	8	EventType
op	14:39	0:0	8	!=
water	14:42	0:0	8	KEY_EVENT
op	14:52	0:0	8	||
op	15:16	0:0	8	!
water	15:17	0:0	8	input_record
op	15:29	0:0	8	.
water	15:30	0:0	8	Event
op	15:35	0:0	8	.
water	15:36	0:0	8	KeyEvent
op	15:44	0:0	8	.
water	15:45	0:0	8	bKeyDown
op	15:54	0:0	8	||
water	16:16	0:0	8	input_record
op	16:28	0:0	8	.
water	16:29	0:0	8	Event
op	16:34	0:0	8	.
water	16:35	0:0	8	KeyEvent
op	16:43	0:0	8	.
water	16:44	0:0	8	wVirtualKeyCode
op	16:60	0:0	8	==
water	16:63	0:0	8	VK_SHIFT
op	16:72	0:0	8	||
water	17:16	0:0	8	input_record
op	17:28	0:0	8	.
water	17:29	0:0	8	Event
op	17:34	0:0	8	.
water	17:35	0:0	8	KeyEvent
op	17:43	0:0	8	.
water	17:44	0:0	8	wVirtualKeyCode
op	17:60	0:0	8	==
water	17:63	0:0	8	VK_CONTROL
op	17:73	0:0	8	||
water	18:16	0:0	8	input_record
op	18:28	0:0	8	.
water	18:29	0:0	8	Event
op	18:34	0:0	8	.
water	18:35	0:0	8	KeyEvent
op	18:43	0:0	8	.
water	18:44	0:0	8	wVirtualKeyCode
op	18:60	0:0	8	==
water	18:63	0:0	8	VK_MENU
op	18:71	0:0	8	||
water	19:16	0:0	8	input_record
op	19:28	0:0	8	.
water	19:29	0:0	8	Event
op	19:34	0:0	8	.
water	19:35	0:0	8	KeyEvent
op	19:43	0:0	8	.
water	19:44	0:0	8	wVirtualKeyCode
op	19:60	0:0	8	==
water	19:63	0:0	8	VK_CAPITAL
stmts	20:12	23:12	7	
water	20:12	0:0	8	{
continue	22:16	22:24	8	
water	23:12	0:0	8	}
water	24:12	0:0	6	p_buffer
op	24:20	0:0	6	[
op	24:22	0:0	6	*
water	24:23	0:0	6	pi_size
op	24:31	0:0	6	]
op	24:33	0:0	6	=
water	24:35	0:0	6	input_record
op	24:47	0:0	6	.
water	24:48	0:0	6	Event
op	24:53	0:0	6	.
water	24:54	0:0	6	KeyEvent
op	24:62	0:0	6	.
water	24:63	0:0	6	uChar
op	24:68	0:0	6	.
water	24:69	0:0	6	AsciiChar
water	24:78	0:0	6	;
call	26:12	26:47	6	putc
arg	26:18	26:38	7	p_buffer[*pi_size]
water	26:18	0:0	8	p_buffer
op	26:26	0:0	8	[
op	26:28	0:0	8	*
water	26:29	0:0	8	pi_size
op	26:37	0:0	8	]
arg	26:40	26:47	7	stdout
water	26:40	0:0	8	stdout
water	26:48	0:0	6	;
if	28:12	32:12	6	(p_buffer [ * pi_size ] == '\r' || p_buffer [ * pi_size ] == '\n')
cond	28:16	28:72	7	p_buffer [ * pi_size ] == '\r' || p_buffer [ * pi_size ] == '\n'
water	28:16	0:0	8	p_buffer
op	28:24	0:0	8	[
op	28:26	0:0	8	*
water	28:27	0:0	8	pi_size
op	28:35	0:0	8	]
op	28:37	0:0	8	==
water	28:40	0:0	8	'\r'
op	28:45	0:0	8	||
water	28:48	0:0	8	p_buffer
op	28:56	0:0	8	[
op	28:58	0:0	8	*
water	28:59	0:0	8	pi_size
op	28:67	0:0	8	]
op	28:69	0:0	8	==
water	28:72	0:0	8	'\n'
stmts	29:12	32:12	7	
water	29:12	0:0	8	{
call	30:16	30:35	8	putc
arg	30:22	30:26	9	'\n'
water	30:22	0:0	10	'\n'
arg	30:28	30:35	9	stdout
water	30:28	0:0	10	stdout
water	30:36	0:0	8	;
break	31:16	31:21	8	
water	32:12	0:0	8	}
switch	33:12	46:12	6	(p_buffer [ * pi_size ])
cond	33:20	33:39	7	p_buffer [ * pi_size ]
water	33:20	0:0	8	p_buffer
op	33:28	0:0	8	[
op	33:30	0:0	8	*
water	33:31	0:0	8	pi_size
op	33:39	0:0	8	]
stmts	34:12	46:12	7	
water	34:12	0:0	8	{
water	35:12	0:0	8	case
water	35:17	0:0	8	'\b'
water	35:21	0:0	8	:
water	36:16	0:0	8	if
water	36:18	0:0	8	(
op	36:20	0:0	8	*
water	36:21	0:0	8	pi_size
water	36:29	0:0	8	)
water	37:16	0:0	8	{
op	38:20	0:0	8	*
water	38:21	0:0	8	pi_size
op	38:29	0:0	8	-=
water	38:32	0:0	8	2
water	38:33	0:0	8	;
call	39:20	39:38	8	putc
arg	39:26	39:29	9	' '
water	39:26	0:0	10	' '
arg	39:31	39:38	9	stdout
water	39:31	0:0	10	stdout
water	39:39	0:0	8	;
call	40:20	40:39	8	putc
arg	40:26	40:30	9	'\b'
water	40:26	0:0	10	'\b'
arg	40:32	40:39	9	stdout
water	40:32	0:0	10	stdout
water	40:40	0:0	8	;
water	41:16	0:0	8	}
water	42:16	0:0	8	break
water	42:21	0:0	8	;
water	43:12	0:0	8	case
water	43:17	0:0	8	'\r'
water	43:21	0:0	8	:
water	44:16	0:0	8	(
op	44:17	0:0	8	*
water	44:18	0:0	8	pi_size
water	44:25	0:0	8	)
op	44:27	0:0	8	--
water	44:29	0:0	8	;
break	45:16	45:21	8	
water	46:12	0:0	8	}
water	47:12	0:0	6	(
op	47:13	0:0	6	*
water	47:14	0:0	6	pi_size
water	47:21	0:0	6	)
op	47:22	0:0	6	++
water	47:24	0:0	6	;
water	48:8	0:0	6	}
if	49:8	54:8	4	(* pi_size == MAX_LINE_LENGTH || p_buffer [ * pi_size ] == '\r' || p_buffer [ * pi_size ] == '\n')
cond	49:12	50:68	5	* pi_size == MAX_LINE_LENGTH || p_buffer [ * pi_size ] == '\r' || p_buffer [ * pi_size ] == '\n'
op	49:12	0:0	6	*
water	49:13	0:0	6	pi_size
op	49:21	0:0	6	==
water	49:24	0:0	6	MAX_LINE_LENGTH
op	49:40	0:0	6	||
water	50:12	0:0	6	p_buffer
op	50:20	0:0	6	[
op	50:22	0:0	6	*
water	50:23	0:0	6	pi_size
op	50:31	0:0	6	]
op	50:33	0:0	6	==
water	50:36	0:0	6	'\r'
op	50:41	0:0	6	||
water	50:44	0:0	6	p_buffer
op	50:52	0:0	6	[
op	50:54	0:0	6	*
water	50:55	0:0	6	pi_size
op	50:63	0:0	6	]
op	50:65	0:0	6	==
water	50:68	0:0	6	'\n'
stmts	51:8	54:8	5	
water	51:8	0:0	6	{
water	52:12	0:0	6	p_buffer
op	52:20	0:0	6	[
op	52:22	0:0	6	*
water	52:23	0:0	6	pi_size
op	52:31	0:0	6	]
op	52:33	0:0	6	=
water	52:35	0:0	6	0
water	52:36	0:0	6	;
return	53:12	53:23	6	true
water	53:19	0:0	7	true
water	54:8	0:0	6	}
water	55:4	0:0	4	}
call	56:4	56:20	2	vlc_testcancel
water	56:21	0:0	2	;
return	57:4	57:16	2	false
water	57:11	0:0	3	false
