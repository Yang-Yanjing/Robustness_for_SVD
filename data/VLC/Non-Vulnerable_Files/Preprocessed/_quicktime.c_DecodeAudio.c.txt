func	2:0	115:0	0	static block_t *	DecodeAudio
params	2:27	0:0	1	
param	2:29	2:45	2	decoder_t *	p_dec
param	2:47	2:66	2	block_t * *	pp_block
stmnts	0:0	114:15	1	
decl	4:4	4:39	2	decoder_sys_t	*p_sys
op	4:25	0:0	2	=
water	4:27	0:0	2	p_dec
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:24	2	block_t	*p_block
decl	6:4	6:23	2	int	i_error
if	10:4	19:4	2	(p_sys == NULL)
cond	10:8	10:17	3	p_sys == NULL
water	10:8	0:0	4	p_sys
op	10:14	0:0	4	==
water	10:17	0:0	4	NULL
stmts	11:4	19:4	3	
water	11:4	0:0	4	{
if	12:8	17:8	4	(OpenAudio (p_dec ))
cond	12:12	12:29	5	OpenAudio (p_dec )
call	12:12	12:29	6	OpenAudio
arg	12:23	12:29	7	p_dec
water	12:23	0:0	8	p_dec
stmts	13:8	17:8	5	
water	13:8	0:0	6	{
water	15:12	0:0	6	p_dec
op	15:17	0:0	6	->
water	15:19	0:0	6	b_error
op	15:27	0:0	6	=
water	15:29	0:0	6	true
water	15:33	0:0	6	;
return	16:12	16:23	6	NULL
water	16:19	0:0	7	NULL
water	17:8	0:0	6	}
water	18:8	0:0	4	p_sys
op	18:14	0:0	4	=
water	18:16	0:0	4	p_dec
op	18:21	0:0	4	->
water	18:23	0:0	4	p_sys
water	18:28	0:0	4	;
water	19:4	0:0	4	}
if	21:4	24:4	2	(pp_block == NULL || * pp_block == NULL)
cond	21:8	21:41	3	pp_block == NULL || * pp_block == NULL
water	21:8	0:0	4	pp_block
op	21:17	0:0	4	==
water	21:20	0:0	4	NULL
op	21:25	0:0	4	||
op	21:28	0:0	4	*
water	21:29	0:0	4	pp_block
op	21:38	0:0	4	==
water	21:41	0:0	4	NULL
stmts	22:4	24:4	3	
water	22:4	0:0	4	{
return	23:8	23:19	4	NULL
water	23:15	0:0	5	NULL
water	24:4	0:0	4	}
water	25:4	0:0	2	p_block
op	25:12	0:0	2	=
op	25:14	0:0	2	*
water	25:15	0:0	2	pp_block
water	25:23	0:0	2	;
if	26:4	33:4	2	(p_sys -> i_out_frames > 0 && p_sys -> i_out >= p_sys -> i_out_frames)
cond	26:8	26:58	3	p_sys -> i_out_frames > 0 && p_sys -> i_out >= p_sys -> i_out_frames
water	26:8	0:0	4	p_sys
op	26:13	0:0	4	->
water	26:15	0:0	4	i_out_frames
op	26:28	0:0	4	>
water	26:30	0:0	4	0
op	26:32	0:0	4	&&
water	26:35	0:0	4	p_sys
op	26:40	0:0	4	->
water	26:42	0:0	4	i_out
op	26:48	0:0	4	>=
water	26:51	0:0	4	p_sys
op	26:56	0:0	4	->
water	26:58	0:0	4	i_out_frames
stmts	27:4	33:4	3	
water	27:4	0:0	4	{
water	29:8	0:0	4	p_sys
op	29:13	0:0	4	->
water	29:15	0:0	4	i_out
op	29:21	0:0	4	=
water	29:23	0:0	4	0
water	29:24	0:0	4	;
water	30:8	0:0	4	p_sys
op	30:13	0:0	4	->
water	30:15	0:0	4	i_out_frames
op	30:28	0:0	4	=
water	30:30	0:0	4	0
water	30:31	0:0	4	;
op	31:8	0:0	4	*
water	31:9	0:0	4	pp_block
op	31:18	0:0	4	=
water	31:20	0:0	4	NULL
water	31:24	0:0	4	;
return	32:8	32:19	4	NULL
water	32:15	0:0	5	NULL
water	33:4	0:0	4	}
if	34:4	96:4	2	(p_sys -> i_out_frames <= 0)
cond	34:8	34:31	3	p_sys -> i_out_frames <= 0
water	34:8	0:0	4	p_sys
op	34:13	0:0	4	->
water	34:15	0:0	4	i_out_frames
op	34:28	0:0	4	<=
water	34:31	0:0	4	0
stmts	35:4	96:4	3	
water	35:4	0:0	4	{
water	36:8	0:0	4	p_sys
op	36:13	0:0	4	->
water	36:15	0:0	4	pts
op	36:19	0:0	4	=
water	36:21	0:0	4	p_block
op	36:28	0:0	4	->
water	36:30	0:0	4	i_pts
water	36:35	0:0	4	;
decl	37:8	37:34	4	mtime_t	i_display_date
op	37:31	0:0	4	=
water	37:33	0:0	4	0
if	38:8	39:76	4	(! ( p_block -> i_flags & BLOCK_FLAG_PREROLL ))
cond	38:12	38:51	5	! ( p_block -> i_flags & BLOCK_FLAG_PREROLL )
op	38:12	0:0	6	!
water	38:13	0:0	6	(
water	38:14	0:0	6	p_block
op	38:21	0:0	6	->
water	38:23	0:0	6	i_flags
op	38:31	0:0	6	&
water	38:33	0:0	6	BLOCK_FLAG_PREROLL
water	38:51	0:0	6	)
stmts	39:12	39:76	5	
water	39:12	0:0	6	i_display_date
op	39:27	0:0	6	=
call	39:29	39:75	6	decoder_GetDisplayDate
arg	39:53	39:58	7	p_dec
water	39:53	0:0	8	p_dec
arg	39:60	39:75	7	p_block->i_pts
water	39:60	0:0	8	p_block
op	39:67	0:0	8	->
water	39:69	0:0	8	i_pts
water	39:76	0:0	6	;
if	40:8	45:8	4	(i_display_date > 0 && i_display_date <mdate ( ))
cond	40:12	40:57	5	i_display_date > 0 && i_display_date <mdate ( )
water	40:12	0:0	6	i_display_date
op	40:27	0:0	6	>
water	40:29	0:0	6	0
op	40:31	0:0	6	&&
water	40:34	0:0	6	i_display_date
op	40:49	0:0	6	<
call	40:51	40:57	6	mdate
stmts	41:8	45:8	5	
water	41:8	0:0	6	{
call	42:12	42:35	6	block_Release
arg	42:27	42:35	7	p_block
water	42:27	0:0	8	p_block
water	42:36	0:0	6	;
op	43:12	0:0	6	*
water	43:13	0:0	6	pp_block
op	43:22	0:0	6	=
water	43:24	0:0	6	NULL
water	43:28	0:0	6	;
return	44:12	44:23	6	NULL
water	44:19	0:0	7	NULL
water	45:8	0:0	6	}
if	47:8	51:8	4	(p_sys -> i_buffer_size < p_sys -> i_buffer + p_block -> i_buffer)
cond	47:12	47:62	5	p_sys -> i_buffer_size < p_sys -> i_buffer + p_block -> i_buffer
water	47:12	0:0	6	p_sys
op	47:17	0:0	6	->
water	47:19	0:0	6	i_buffer_size
op	47:33	0:0	6	<
water	47:35	0:0	6	p_sys
op	47:40	0:0	6	->
water	47:42	0:0	6	i_buffer
op	47:51	0:0	6	+
water	47:53	0:0	6	p_block
op	47:60	0:0	6	->
water	47:62	0:0	6	i_buffer
stmts	48:8	51:8	5	
water	48:8	0:0	6	{
water	49:12	0:0	6	p_sys
op	49:17	0:0	6	->
water	49:19	0:0	6	i_buffer_size
op	49:33	0:0	6	=
water	49:35	0:0	6	p_sys
op	49:40	0:0	6	->
water	49:42	0:0	6	i_buffer
op	49:51	0:0	6	+
water	49:53	0:0	6	p_block
op	49:60	0:0	6	->
water	49:62	0:0	6	i_buffer
op	49:71	0:0	6	+
water	49:73	0:0	6	1024
water	49:77	0:0	6	;
water	50:12	0:0	6	p_sys
op	50:17	0:0	6	->
water	50:19	0:0	6	p_buffer
op	50:28	0:0	6	=
call	50:30	50:78	6	xrealloc
arg	50:40	50:55	7	p_sys->p_buffer
water	50:40	0:0	8	p_sys
op	50:45	0:0	8	->
water	50:47	0:0	8	p_buffer
arg	50:57	50:78	7	p_sys->i_buffer_size
water	50:57	0:0	8	p_sys
op	50:62	0:0	8	->
water	50:64	0:0	8	i_buffer_size
water	50:79	0:0	6	;
water	51:8	0:0	6	}
call	52:8	53:34	4	memcpy
arg	52:16	52:49	5	&p_sys->p_buffer[p_sys->i_buffer]
op	52:16	0:0	6	&
water	52:17	0:0	6	p_sys
op	52:22	0:0	6	->
water	52:24	0:0	6	p_buffer
op	52:32	0:0	6	[
water	52:33	0:0	6	p_sys
op	52:38	0:0	6	->
water	52:40	0:0	6	i_buffer
op	52:48	0:0	6	]
arg	52:51	52:68	5	p_block->p_buffer
water	52:51	0:0	6	p_block
op	52:58	0:0	6	->
water	52:60	0:0	6	p_buffer
arg	53:16	53:34	5	p_block->i_buffer
water	53:16	0:0	6	p_block
op	53:23	0:0	6	->
water	53:25	0:0	6	i_buffer
water	53:35	0:0	4	;
water	54:8	0:0	4	p_sys
op	54:13	0:0	4	->
water	54:15	0:0	4	i_buffer
op	54:24	0:0	4	+=
water	54:27	0:0	4	p_block
op	54:34	0:0	4	->
water	54:36	0:0	4	i_buffer
water	54:44	0:0	4	;
if	55:8	95:8	4	(p_sys -> i_buffer > p_sys -> InFrameSize)
cond	55:12	55:37	5	p_sys -> i_buffer > p_sys -> InFrameSize
water	55:12	0:0	6	p_sys
op	55:17	0:0	6	->
water	55:19	0:0	6	i_buffer
op	55:28	0:0	6	>
water	55:30	0:0	6	p_sys
op	55:35	0:0	6	->
water	55:37	0:0	6	InFrameSize
stmts	56:8	95:8	5	
water	56:8	0:0	6	{
decl	57:12	57:63	6	int	i_frames
op	57:25	0:0	6	=
water	57:27	0:0	6	p_sys
op	57:32	0:0	6	->
water	57:34	0:0	6	i_buffer
op	57:43	0:0	6	/
water	57:45	0:0	6	p_sys
op	57:50	0:0	6	->
water	57:52	0:0	6	InFrameSize
decl	58:12	58:51	6	unsigned long	i_out_frames
water	58:38	0:0	6	,
decl	58:12	58:51	6	unsigned long	i_out_bytes
call	59:12	59:38	6	vlc_mutex_lock
arg	59:28	59:38	7	&qt_mutex
op	59:28	0:0	8	&
water	59:29	0:0	8	qt_mutex
water	59:39	0:0	6	;
water	60:12	0:0	6	i_error
op	60:20	0:0	6	=
call	60:22	65:71	6	p_sys->SoundConverterConvertBuffer
arg	60:58	60:76	7	p_sys->myConverter
water	60:58	0:0	8	p_sys
op	60:63	0:0	8	->
water	60:65	0:0	8	myConverter
arg	61:58	61:73	7	p_sys->p_buffer
water	61:58	0:0	8	p_sys
op	61:63	0:0	8	->
water	61:65	0:0	8	p_buffer
arg	62:58	62:66	7	i_frames
water	62:58	0:0	8	i_frames
arg	63:58	63:75	7	p_sys->out_buffer
water	63:58	0:0	8	p_sys
op	63:63	0:0	8	->
water	63:65	0:0	8	out_buffer
arg	64:58	64:71	7	&i_out_frames
op	64:58	0:0	8	&
water	64:59	0:0	8	i_out_frames
arg	65:58	65:71	7	&i_out_bytes
op	65:58	0:0	8	&
water	65:59	0:0	8	i_out_bytes
water	65:72	0:0	6	;
call	66:12	66:40	6	vlc_mutex_unlock
arg	66:30	66:40	7	&qt_mutex
op	66:30	0:0	8	&
water	66:31	0:0	8	qt_mutex
water	66:41	0:0	6	;
water	73:12	0:0	6	p_sys
op	73:17	0:0	6	->
water	73:19	0:0	6	i_buffer
op	73:28	0:0	6	-=
water	73:31	0:0	6	i_frames
op	73:40	0:0	6	*
water	73:42	0:0	6	p_sys
op	73:47	0:0	6	->
water	73:49	0:0	6	InFrameSize
water	73:60	0:0	6	;
if	74:12	79:12	6	(p_sys -> i_buffer > 0)
cond	74:16	74:34	7	p_sys -> i_buffer > 0
water	74:16	0:0	8	p_sys
op	74:21	0:0	8	->
water	74:23	0:0	8	i_buffer
op	74:32	0:0	8	>
water	74:34	0:0	8	0
stmts	75:12	79:12	7	
water	75:12	0:0	8	{
call	76:16	78:41	8	memmove
arg	76:25	76:44	9	&p_sys->p_buffer[0]
op	76:25	0:0	10	&
water	76:26	0:0	10	p_sys
op	76:31	0:0	10	->
water	76:33	0:0	10	p_buffer
op	76:41	0:0	10	[
water	76:42	0:0	10	0
op	76:43	0:0	10	]
arg	77:25	77:72	9	&p_sys->p_buffer[i_frames*p_sys->InFrameSize]
op	77:25	0:0	10	&
water	77:26	0:0	10	p_sys
op	77:31	0:0	10	->
water	77:33	0:0	10	p_buffer
op	77:41	0:0	10	[
water	77:42	0:0	10	i_frames
op	77:51	0:0	10	*
water	77:53	0:0	10	p_sys
op	77:58	0:0	10	->
water	77:60	0:0	10	InFrameSize
op	77:71	0:0	10	]
arg	78:25	78:41	9	p_sys->i_buffer
water	78:25	0:0	10	p_sys
op	78:30	0:0	10	->
water	78:32	0:0	10	i_buffer
water	78:42	0:0	8	;
water	79:12	0:0	8	}
if	80:12	84:12	6	(p_sys -> pts > VLC_TS_INVALID && p_sys -> pts !=date_Get (& p_sys -> date ))
cond	80:16	81:53	7	p_sys -> pts > VLC_TS_INVALID && p_sys -> pts !=date_Get (& p_sys -> date )
water	80:16	0:0	8	p_sys
op	80:21	0:0	8	->
water	80:23	0:0	8	pts
op	80:27	0:0	8	>
water	80:29	0:0	8	VLC_TS_INVALID
op	80:44	0:0	8	&&
water	81:16	0:0	8	p_sys
op	81:21	0:0	8	->
water	81:23	0:0	8	pts
op	81:27	0:0	8	!=
call	81:30	81:53	8	date_Get
arg	81:40	81:53	9	&p_sys->date
op	81:40	0:0	10	&
water	81:41	0:0	10	p_sys
op	81:46	0:0	10	->
water	81:48	0:0	10	date
stmts	82:12	84:12	7	
water	82:12	0:0	8	{
call	83:16	83:51	8	date_Set
arg	83:26	83:38	9	&p_sys->date
op	83:26	0:0	10	&
water	83:27	0:0	10	p_sys
op	83:32	0:0	10	->
water	83:34	0:0	10	date
arg	83:40	83:51	9	p_sys->pts
water	83:40	0:0	10	p_sys
op	83:45	0:0	10	->
water	83:47	0:0	10	pts
water	83:52	0:0	8	;
water	84:12	0:0	8	}
else	85:12	88:12	6
stmts	85:17	88:12	7	
if	85:17	88:12	8	(!date_Get (& p_sys -> date ))
cond	85:21	85:45	9	!date_Get (& p_sys -> date )
op	85:21	0:0	10	!
call	85:22	85:45	10	date_Get
arg	85:32	85:45	11	&p_sys->date
op	85:32	0:0	12	&
water	85:33	0:0	12	p_sys
op	85:38	0:0	12	->
water	85:40	0:0	12	date
stmts	86:12	88:12	9	
water	86:12	0:0	10	{
return	87:16	87:27	10	NULL
water	87:23	0:0	11	NULL
water	88:12	0:0	10	}
if	89:12	94:12	6	(! i_error && i_out_frames > 0)
cond	89:16	89:43	7	! i_error && i_out_frames > 0
op	89:16	0:0	8	!
water	89:17	0:0	8	i_error
op	89:25	0:0	8	&&
water	89:28	0:0	8	i_out_frames
op	89:41	0:0	8	>
water	89:43	0:0	8	0
stmts	90:12	94:12	7	
water	90:12	0:0	8	{
water	92:16	0:0	8	p_sys
op	92:21	0:0	8	->
water	92:23	0:0	8	i_out_frames
op	92:36	0:0	8	=
water	92:38	0:0	8	i_out_frames
water	92:50	0:0	8	;
water	93:16	0:0	8	p_sys
op	93:21	0:0	8	->
water	93:23	0:0	8	i_out
op	93:29	0:0	8	=
water	93:31	0:0	8	0
water	93:32	0:0	8	;
water	94:12	0:0	8	}
water	95:8	0:0	6	}
water	96:4	0:0	4	}
if	97:4	113:4	2	(p_sys -> i_out < p_sys -> i_out_frames)
cond	97:8	97:30	3	p_sys -> i_out < p_sys -> i_out_frames
water	97:8	0:0	4	p_sys
op	97:13	0:0	4	->
water	97:15	0:0	4	i_out
op	97:21	0:0	4	<
water	97:23	0:0	4	p_sys
op	97:28	0:0	4	->
water	97:30	0:0	4	i_out_frames
stmts	98:4	113:4	3	
water	98:4	0:0	4	{
decl	99:8	99:22	4	block_t	*p_out
decl	100:8	100:73	4	int	i_frames
op	100:22	0:0	4	=
call	100:24	100:72	5	__MIN
arg	100:31	100:65	6	p_sys->i_out_frames-p_sys->i_out
water	100:31	0:0	7	p_sys
op	100:36	0:0	7	->
water	100:38	0:0	7	i_out_frames
op	100:51	0:0	7	-
water	100:53	0:0	7	p_sys
op	100:58	0:0	7	->
water	100:60	0:0	7	i_out
arg	100:67	100:72	6	1000
water	100:67	0:0	7	1000
water	101:8	0:0	4	p_out
op	101:14	0:0	4	=
call	101:16	101:56	4	decoder_NewAudioBuffer
arg	101:40	101:45	5	p_dec
water	101:40	0:0	6	p_dec
arg	101:47	101:56	5	i_frames
water	101:47	0:0	6	i_frames
water	101:57	0:0	4	;
if	102:8	111:8	4	(p_out)
cond	102:12	102:12	5	p_out
water	102:12	0:0	6	p_out
stmts	103:8	111:8	5	
water	103:8	0:0	6	{
water	104:12	0:0	6	p_out
op	104:17	0:0	6	->
water	104:19	0:0	6	i_pts
op	104:25	0:0	6	=
call	104:27	104:50	6	date_Get
arg	104:37	104:50	7	&p_sys->date
op	104:37	0:0	8	&
water	104:38	0:0	8	p_sys
op	104:43	0:0	8	->
water	104:45	0:0	8	date
water	104:51	0:0	6	;
water	105:12	0:0	6	p_out
op	105:17	0:0	6	->
water	105:19	0:0	6	i_length
op	105:28	0:0	6	=
call	105:30	105:69	6	date_Increment
arg	105:46	105:58	7	&p_sys->date
op	105:46	0:0	8	&
water	105:47	0:0	8	p_sys
op	105:52	0:0	8	->
water	105:54	0:0	8	date
arg	105:60	105:69	7	i_frames
water	105:60	0:0	8	i_frames
op	106:30	0:0	6	-
water	106:32	0:0	6	p_out
op	106:37	0:0	6	->
water	106:39	0:0	6	i_pts
water	106:44	0:0	6	;
call	107:12	109:36	6	memcpy
arg	107:20	107:35	7	p_out->p_buffer
water	107:20	0:0	8	p_out
op	107:25	0:0	8	->
water	107:27	0:0	8	p_buffer
arg	108:20	108:90	7	&p_sys->out_buffer[2*p_sys->i_out*p_dec->fmt_out.audio.i_channels]
op	108:20	0:0	8	&
water	108:21	0:0	8	p_sys
op	108:26	0:0	8	->
water	108:28	0:0	8	out_buffer
op	108:38	0:0	8	[
water	108:39	0:0	8	2
op	108:41	0:0	8	*
water	108:43	0:0	8	p_sys
op	108:48	0:0	8	->
water	108:50	0:0	8	i_out
op	108:56	0:0	8	*
water	108:58	0:0	8	p_dec
op	108:63	0:0	8	->
water	108:65	0:0	8	fmt_out
op	108:72	0:0	8	.
water	108:73	0:0	8	audio
op	108:78	0:0	8	.
water	108:79	0:0	8	i_channels
op	108:89	0:0	8	]
arg	109:20	109:36	7	p_out->i_buffer
water	109:20	0:0	8	p_out
op	109:25	0:0	8	->
water	109:27	0:0	8	i_buffer
water	109:37	0:0	6	;
water	110:12	0:0	6	p_sys
op	110:17	0:0	6	->
water	110:19	0:0	6	i_out
op	110:25	0:0	6	+=
water	110:28	0:0	6	i_frames
water	110:36	0:0	6	;
water	111:8	0:0	6	}
return	112:8	112:20	4	p_out
water	112:15	0:0	5	p_out
water	113:4	0:0	4	}
return	114:4	114:15	2	NULL
water	114:11	0:0	3	NULL
