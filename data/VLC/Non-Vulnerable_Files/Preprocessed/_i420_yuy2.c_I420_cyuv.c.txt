func	2:0	112:0	0	static void	I420_cyuv
params	2:21	0:0	1	
param	2:23	2:41	2	filter_t *	p_filter
param	2:43	2:62	2	picture_t *	p_source
param	3:43	3:61	2	picture_t *	p_dest
stmnts	0:0	110:12	1	
decl	5:4	7:43	2	uint8_t	*p_line1
op	5:21	0:0	2	=
water	5:23	0:0	2	p_dest
op	5:29	0:0	2	->
water	5:31	0:0	2	p
op	5:32	0:0	2	->
water	5:34	0:0	2	p_pixels
op	5:43	0:0	2	+
water	6:23	0:0	2	p_dest
op	6:29	0:0	2	->
water	6:31	0:0	2	p
op	6:32	0:0	2	->
water	6:34	0:0	2	i_visible_lines
op	6:50	0:0	2	*
water	6:52	0:0	2	p_dest
op	6:58	0:0	2	->
water	6:60	0:0	2	p
op	6:61	0:0	2	->
water	6:63	0:0	2	i_pitch
op	7:23	0:0	2	+
water	7:25	0:0	2	p_dest
op	7:31	0:0	2	->
water	7:33	0:0	2	p
op	7:34	0:0	2	->
water	7:36	0:0	2	i_pitch
decl	8:4	9:70	2	uint8_t	*p_line2
op	8:21	0:0	2	=
water	8:23	0:0	2	p_dest
op	8:29	0:0	2	->
water	8:31	0:0	2	p
op	8:32	0:0	2	->
water	8:34	0:0	2	p_pixels
op	8:43	0:0	2	+
water	9:23	0:0	2	p_dest
op	9:29	0:0	2	->
water	9:31	0:0	2	p
op	9:32	0:0	2	->
water	9:34	0:0	2	i_visible_lines
op	9:50	0:0	2	*
water	9:52	0:0	2	p_dest
op	9:58	0:0	2	->
water	9:60	0:0	2	p
op	9:61	0:0	2	->
water	9:63	0:0	2	i_pitch
decl	10:4	10:45	2	uint8_t	*p_y1
water	10:17	0:0	2	,
decl	10:4	10:45	2	uint8_t	*p_y2
op	10:25	0:0	2	=
water	10:27	0:0	2	p_source
op	10:35	0:0	2	->
water	10:37	0:0	2	Y_PIXELS
decl	11:4	11:37	2	uint8_t	*p_u
op	11:17	0:0	2	=
water	11:19	0:0	2	p_source
op	11:27	0:0	2	->
water	11:29	0:0	2	U_PIXELS
decl	12:4	12:37	2	uint8_t	*p_v
op	12:17	0:0	2	=
water	12:19	0:0	2	p_source
op	12:27	0:0	2	->
water	12:29	0:0	2	V_PIXELS
decl	13:4	13:16	2	int	i_x
water	13:11	0:0	2	,
decl	13:4	13:16	2	int	i_y
decl	14:4	15:65	2	const int	i_source_margin
op	14:30	0:0	2	=
water	14:32	0:0	2	p_source
op	14:40	0:0	2	->
water	14:42	0:0	2	p
op	14:43	0:0	2	[
water	14:44	0:0	2	0
op	14:45	0:0	2	]
op	14:46	0:0	2	.
water	14:47	0:0	2	i_pitch
op	15:33	0:0	2	-
water	15:35	0:0	2	p_source
op	15:43	0:0	2	->
water	15:45	0:0	2	p
op	15:46	0:0	2	[
water	15:47	0:0	2	0
op	15:48	0:0	2	]
op	15:49	0:0	2	.
water	15:50	0:0	2	i_visible_pitch
decl	16:4	17:65	2	const int	i_source_margin_c
op	16:32	0:0	2	=
water	16:34	0:0	2	p_source
op	16:42	0:0	2	->
water	16:44	0:0	2	p
op	16:45	0:0	2	[
water	16:46	0:0	2	1
op	16:47	0:0	2	]
op	16:48	0:0	2	.
water	16:49	0:0	2	i_pitch
op	17:33	0:0	2	-
water	17:35	0:0	2	p_source
op	17:43	0:0	2	->
water	17:45	0:0	2	p
op	17:46	0:0	2	[
water	17:47	0:0	2	1
op	17:48	0:0	2	]
op	17:49	0:0	2	.
water	17:50	0:0	2	i_visible_pitch
decl	18:4	19:59	2	const int	i_dest_margin
op	18:28	0:0	2	=
water	18:30	0:0	2	p_dest
op	18:36	0:0	2	->
water	18:38	0:0	2	p
op	18:39	0:0	2	->
water	18:41	0:0	2	i_pitch
op	19:31	0:0	2	-
water	19:33	0:0	2	p_dest
op	19:39	0:0	2	->
water	19:41	0:0	2	p
op	19:42	0:0	2	->
water	19:44	0:0	2	i_visible_pitch
for	21:4	48:4	2	(i_y = p_filter -> fmt_in . video . i_height / 2 ;i_y --;)
forinit	21:9	21:51	3	i_y = p_filter -> fmt_in . video . i_height / 2 ;
water	21:9	0:0	4	i_y
op	21:13	0:0	4	=
water	21:15	0:0	4	p_filter
op	21:23	0:0	4	->
water	21:25	0:0	4	fmt_in
op	21:31	0:0	4	.
water	21:32	0:0	4	video
op	21:37	0:0	4	.
water	21:38	0:0	4	i_height
op	21:47	0:0	4	/
water	21:49	0:0	4	2
water	21:51	0:0	4	;
cond	21:53	21:56	3	i_y --
water	21:53	0:0	4	i_y
op	21:56	0:0	4	--
forexpr	0:0	0:0	3	
stmts	22:4	48:4	3	
water	22:4	0:0	4	{
water	23:8	0:0	4	p_line1
op	23:16	0:0	4	-=
water	23:19	0:0	4	3
op	23:21	0:0	4	*
water	23:23	0:0	4	p_dest
op	23:29	0:0	4	->
water	23:31	0:0	4	p
op	23:32	0:0	4	->
water	23:34	0:0	4	i_pitch
water	23:41	0:0	4	;
water	24:8	0:0	4	p_line2
op	24:16	0:0	4	-=
water	24:19	0:0	4	3
op	24:21	0:0	4	*
water	24:23	0:0	4	p_dest
op	24:29	0:0	4	->
water	24:31	0:0	4	p
op	24:32	0:0	4	->
water	24:34	0:0	4	i_pitch
water	24:41	0:0	4	;
water	25:8	0:0	4	p_y1
op	25:13	0:0	4	=
water	25:15	0:0	4	p_y2
water	25:19	0:0	4	;
water	26:8	0:0	4	p_y2
op	26:13	0:0	4	+=
water	26:16	0:0	4	p_source
op	26:24	0:0	4	->
water	26:26	0:0	4	p
op	26:27	0:0	4	[
water	26:28	0:0	4	Y_PLANE
op	26:35	0:0	4	]
op	26:36	0:0	4	.
water	26:37	0:0	4	i_pitch
water	26:44	0:0	4	;
for	27:8	37:8	4	(i_x = p_filter -> fmt_in . video . i_width / 8 ;i_x --;)
forinit	27:13	27:54	5	i_x = p_filter -> fmt_in . video . i_width / 8 ;
water	27:13	0:0	6	i_x
op	27:17	0:0	6	=
water	27:19	0:0	6	p_filter
op	27:27	0:0	6	->
water	27:29	0:0	6	fmt_in
op	27:35	0:0	6	.
water	27:36	0:0	6	video
op	27:41	0:0	6	.
water	27:42	0:0	6	i_width
op	27:50	0:0	6	/
water	27:52	0:0	6	8
water	27:54	0:0	6	;
cond	27:56	27:59	5	i_x --
water	27:56	0:0	6	i_x
op	27:59	0:0	6	--
forexpr	0:0	0:0	5	
stmts	28:8	37:8	5	
water	28:8	0:0	6	{
call	30:12	30:27	6	C_YUV420_UYVY
water	30:28	0:0	6	;
call	31:12	31:27	6	C_YUV420_UYVY
water	31:28	0:0	6	;
call	32:12	32:27	6	C_YUV420_UYVY
water	32:28	0:0	6	;
call	33:12	33:27	6	C_YUV420_UYVY
water	33:28	0:0	6	;
call	35:12	35:38	6	MMX_CALL
arg	35:22	35:38	7	MMX_YUV420_UYVY
water	35:22	0:0	8	MMX_YUV420_UYVY
water	35:39	0:0	6	;
water	37:8	0:0	6	}
for	38:8	41:8	4	(i_x = ( p_filter -> fmt_in . video . i_width % 8 ) / 2 ;i_x --;)
forinit	38:13	38:61	5	i_x = ( p_filter -> fmt_in . video . i_width % 8 ) / 2 ;
water	38:13	0:0	6	i_x
op	38:17	0:0	6	=
water	38:19	0:0	6	(
water	38:21	0:0	6	p_filter
op	38:29	0:0	6	->
water	38:31	0:0	6	fmt_in
op	38:37	0:0	6	.
water	38:38	0:0	6	video
op	38:43	0:0	6	.
water	38:44	0:0	6	i_width
op	38:52	0:0	6	%
water	38:54	0:0	6	8
water	38:56	0:0	6	)
op	38:58	0:0	6	/
water	38:60	0:0	6	2
water	38:61	0:0	6	;
cond	38:63	38:66	5	i_x --
water	38:63	0:0	6	i_x
op	38:66	0:0	6	--
forexpr	0:0	0:0	5	
stmts	39:8	41:8	5	
water	39:8	0:0	6	{
call	40:12	40:27	6	C_YUV420_UYVY
water	40:28	0:0	6	;
water	41:8	0:0	6	}
water	42:8	0:0	4	p_y1
op	42:13	0:0	4	+=
water	42:16	0:0	4	i_source_margin
water	42:31	0:0	4	;
water	43:8	0:0	4	p_y2
op	43:13	0:0	4	+=
water	43:16	0:0	4	i_source_margin
water	43:31	0:0	4	;
water	44:8	0:0	4	p_u
op	44:12	0:0	4	+=
water	44:15	0:0	4	i_source_margin_c
water	44:32	0:0	4	;
water	45:8	0:0	4	p_v
op	45:12	0:0	4	+=
water	45:15	0:0	4	i_source_margin_c
water	45:32	0:0	4	;
water	46:8	0:0	4	p_line1
op	46:16	0:0	4	+=
water	46:19	0:0	4	i_dest_margin
water	46:32	0:0	4	;
water	47:8	0:0	4	p_line2
op	47:16	0:0	4	+=
water	47:19	0:0	4	i_dest_margin
water	47:32	0:0	4	;
water	48:4	0:0	4	}
water	51:4	0:0	2	MMX_END
water	51:11	0:0	2	;
if	58:4	83:4	2	(0 == ( 15 & ( p_source -> p [ Y_PLANE ] . i_pitch | p_dest -> p -> i_pitch | ( ( intptr_t ) p_line2 | ( intptr_t ) p_y2 ) ) ))
cond	58:8	59:43	3	0 == ( 15 & ( p_source -> p [ Y_PLANE ] . i_pitch | p_dest -> p -> i_pitch | ( ( intptr_t ) p_line2 | ( intptr_t ) p_y2 ) ) )
water	58:8	0:0	4	0
op	58:10	0:0	4	==
water	58:13	0:0	4	(
water	58:14	0:0	4	15
op	58:17	0:0	4	&
water	58:19	0:0	4	(
water	58:20	0:0	4	p_source
op	58:28	0:0	4	->
water	58:30	0:0	4	p
op	58:31	0:0	4	[
water	58:32	0:0	4	Y_PLANE
op	58:39	0:0	4	]
op	58:40	0:0	4	.
water	58:41	0:0	4	i_pitch
op	58:48	0:0	4	|
water	58:49	0:0	4	p_dest
op	58:55	0:0	4	->
water	58:57	0:0	4	p
op	58:58	0:0	4	->
water	58:60	0:0	4	i_pitch
op	58:67	0:0	4	|
water	59:8	0:0	4	(
water	59:9	0:0	4	(
water	59:10	0:0	4	intptr_t
water	59:18	0:0	4	)
water	59:19	0:0	4	p_line2
op	59:26	0:0	4	|
water	59:27	0:0	4	(
water	59:28	0:0	4	intptr_t
water	59:36	0:0	4	)
water	59:37	0:0	4	p_y2
water	59:41	0:0	4	)
water	59:42	0:0	4	)
water	59:43	0:0	4	)
stmts	60:4	83:4	3	
water	60:4	0:0	4	{
for	62:8	82:8	4	(i_y = p_filter -> fmt_in . video . i_height / 2 ;i_y --;)
forinit	62:13	62:55	5	i_y = p_filter -> fmt_in . video . i_height / 2 ;
water	62:13	0:0	6	i_y
op	62:17	0:0	6	=
water	62:19	0:0	6	p_filter
op	62:27	0:0	6	->
water	62:29	0:0	6	fmt_in
op	62:35	0:0	6	.
water	62:36	0:0	6	video
op	62:41	0:0	6	.
water	62:42	0:0	6	i_height
op	62:51	0:0	6	/
water	62:53	0:0	6	2
water	62:55	0:0	6	;
cond	62:57	62:60	5	i_y --
water	62:57	0:0	6	i_y
op	62:60	0:0	6	--
forexpr	0:0	0:0	5	
stmts	63:8	82:8	5	
water	63:8	0:0	6	{
water	64:12	0:0	6	p_line1
op	64:20	0:0	6	=
water	64:22	0:0	6	p_line2
water	64:29	0:0	6	;
water	65:12	0:0	6	p_line2
op	65:20	0:0	6	+=
water	65:23	0:0	6	p_dest
op	65:29	0:0	6	->
water	65:31	0:0	6	p
op	65:32	0:0	6	->
water	65:34	0:0	6	i_pitch
water	65:41	0:0	6	;
water	66:12	0:0	6	p_y1
op	66:17	0:0	6	=
water	66:19	0:0	6	p_y2
water	66:23	0:0	6	;
water	67:12	0:0	6	p_y2
op	67:17	0:0	6	+=
water	67:20	0:0	6	p_source
op	67:28	0:0	6	->
water	67:30	0:0	6	p
op	67:31	0:0	6	[
water	67:32	0:0	6	Y_PLANE
op	67:39	0:0	6	]
op	67:40	0:0	6	.
water	67:41	0:0	6	i_pitch
water	67:48	0:0	6	;
for	68:12	71:12	6	(i_x = p_filter -> fmt_in . video . i_width / 16 ;i_x --;)
forinit	68:17	68:59	7	i_x = p_filter -> fmt_in . video . i_width / 16 ;
water	68:17	0:0	8	i_x
op	68:21	0:0	8	=
water	68:23	0:0	8	p_filter
op	68:31	0:0	8	->
water	68:33	0:0	8	fmt_in
op	68:39	0:0	8	.
water	68:40	0:0	8	video
op	68:45	0:0	8	.
water	68:46	0:0	8	i_width
op	68:54	0:0	8	/
water	68:56	0:0	8	16
water	68:59	0:0	8	;
cond	68:61	68:64	7	i_x --
water	68:61	0:0	8	i_x
op	68:64	0:0	8	--
forexpr	0:0	0:0	7	
stmts	69:12	71:12	7	
water	69:12	0:0	8	{
call	70:16	70:52	8	SSE2_CALL
arg	70:27	70:52	9	SSE2_YUV420_UYVY_ALIGNED
water	70:27	0:0	10	SSE2_YUV420_UYVY_ALIGNED
water	70:53	0:0	8	;
water	71:12	0:0	8	}
for	72:12	75:12	6	(i_x = ( p_filter -> fmt_in . video . i_width % 16 ) / 2 ;i_x --;)
forinit	72:17	72:66	7	i_x = ( p_filter -> fmt_in . video . i_width % 16 ) / 2 ;
water	72:17	0:0	8	i_x
op	72:21	0:0	8	=
water	72:23	0:0	8	(
water	72:25	0:0	8	p_filter
op	72:33	0:0	8	->
water	72:35	0:0	8	fmt_in
op	72:41	0:0	8	.
water	72:42	0:0	8	video
op	72:47	0:0	8	.
water	72:48	0:0	8	i_width
op	72:56	0:0	8	%
water	72:58	0:0	8	16
water	72:61	0:0	8	)
op	72:63	0:0	8	/
water	72:65	0:0	8	2
water	72:66	0:0	8	;
cond	72:68	72:71	7	i_x --
water	72:68	0:0	8	i_x
op	72:71	0:0	8	--
forexpr	0:0	0:0	7	
stmts	73:12	75:12	7	
water	73:12	0:0	8	{
call	74:16	74:31	8	C_YUV420_UYVY
water	74:32	0:0	8	;
water	75:12	0:0	8	}
water	76:12	0:0	6	p_y1
op	76:17	0:0	6	+=
water	76:20	0:0	6	i_source_margin
water	76:35	0:0	6	;
water	77:12	0:0	6	p_y2
op	77:17	0:0	6	+=
water	77:20	0:0	6	i_source_margin
water	77:35	0:0	6	;
water	78:12	0:0	6	p_u
op	78:16	0:0	6	+=
water	78:19	0:0	6	i_source_margin_c
water	78:36	0:0	6	;
water	79:12	0:0	6	p_v
op	79:16	0:0	6	+=
water	79:19	0:0	6	i_source_margin_c
water	79:36	0:0	6	;
water	80:12	0:0	6	p_line1
op	80:20	0:0	6	+=
water	80:23	0:0	6	i_dest_margin
water	80:36	0:0	6	;
water	81:12	0:0	6	p_line2
op	81:20	0:0	6	+=
water	81:23	0:0	6	i_dest_margin
water	81:36	0:0	6	;
water	82:8	0:0	6	}
water	83:4	0:0	4	}
else	84:4	108:4	2
stmts	85:4	108:4	3	
water	85:4	0:0	4	{
for	87:8	107:8	4	(i_y = p_filter -> fmt_in . video . i_height / 2 ;i_y --;)
forinit	87:13	87:55	5	i_y = p_filter -> fmt_in . video . i_height / 2 ;
water	87:13	0:0	6	i_y
op	87:17	0:0	6	=
water	87:19	0:0	6	p_filter
op	87:27	0:0	6	->
water	87:29	0:0	6	fmt_in
op	87:35	0:0	6	.
water	87:36	0:0	6	video
op	87:41	0:0	6	.
water	87:42	0:0	6	i_height
op	87:51	0:0	6	/
water	87:53	0:0	6	2
water	87:55	0:0	6	;
cond	87:57	87:60	5	i_y --
water	87:57	0:0	6	i_y
op	87:60	0:0	6	--
forexpr	0:0	0:0	5	
stmts	88:8	107:8	5	
water	88:8	0:0	6	{
water	89:12	0:0	6	p_line1
op	89:20	0:0	6	=
water	89:22	0:0	6	p_line2
water	89:29	0:0	6	;
water	90:12	0:0	6	p_line2
op	90:20	0:0	6	+=
water	90:23	0:0	6	p_dest
op	90:29	0:0	6	->
water	90:31	0:0	6	p
op	90:32	0:0	6	->
water	90:34	0:0	6	i_pitch
water	90:41	0:0	6	;
water	91:12	0:0	6	p_y1
op	91:17	0:0	6	=
water	91:19	0:0	6	p_y2
water	91:23	0:0	6	;
water	92:12	0:0	6	p_y2
op	92:17	0:0	6	+=
water	92:20	0:0	6	p_source
op	92:28	0:0	6	->
water	92:30	0:0	6	p
op	92:31	0:0	6	[
water	92:32	0:0	6	Y_PLANE
op	92:39	0:0	6	]
op	92:40	0:0	6	.
water	92:41	0:0	6	i_pitch
water	92:48	0:0	6	;
for	93:12	96:12	6	(i_x = p_filter -> fmt_in . video . i_width / 16 ;i_x --;)
forinit	93:17	93:59	7	i_x = p_filter -> fmt_in . video . i_width / 16 ;
water	93:17	0:0	8	i_x
op	93:21	0:0	8	=
water	93:23	0:0	8	p_filter
op	93:31	0:0	8	->
water	93:33	0:0	8	fmt_in
op	93:39	0:0	8	.
water	93:40	0:0	8	video
op	93:45	0:0	8	.
water	93:46	0:0	8	i_width
op	93:54	0:0	8	/
water	93:56	0:0	8	16
water	93:59	0:0	8	;
cond	93:61	93:64	7	i_x --
water	93:61	0:0	8	i_x
op	93:64	0:0	8	--
forexpr	0:0	0:0	7	
stmts	94:12	96:12	7	
water	94:12	0:0	8	{
call	95:16	95:54	8	SSE2_CALL
arg	95:27	95:54	9	SSE2_YUV420_UYVY_UNALIGNED
water	95:27	0:0	10	SSE2_YUV420_UYVY_UNALIGNED
water	95:55	0:0	8	;
water	96:12	0:0	8	}
for	97:12	100:12	6	(i_x = ( p_filter -> fmt_in . video . i_width % 16 ) / 2 ;i_x --;)
forinit	97:17	97:66	7	i_x = ( p_filter -> fmt_in . video . i_width % 16 ) / 2 ;
water	97:17	0:0	8	i_x
op	97:21	0:0	8	=
water	97:23	0:0	8	(
water	97:25	0:0	8	p_filter
op	97:33	0:0	8	->
water	97:35	0:0	8	fmt_in
op	97:41	0:0	8	.
water	97:42	0:0	8	video
op	97:47	0:0	8	.
water	97:48	0:0	8	i_width
op	97:56	0:0	8	%
water	97:58	0:0	8	16
water	97:61	0:0	8	)
op	97:63	0:0	8	/
water	97:65	0:0	8	2
water	97:66	0:0	8	;
cond	97:68	97:71	7	i_x --
water	97:68	0:0	8	i_x
op	97:71	0:0	8	--
forexpr	0:0	0:0	7	
stmts	98:12	100:12	7	
water	98:12	0:0	8	{
call	99:16	99:31	8	C_YUV420_UYVY
water	99:32	0:0	8	;
water	100:12	0:0	8	}
water	101:12	0:0	6	p_y1
op	101:17	0:0	6	+=
water	101:20	0:0	6	i_source_margin
water	101:35	0:0	6	;
water	102:12	0:0	6	p_y2
op	102:17	0:0	6	+=
water	102:20	0:0	6	i_source_margin
water	102:35	0:0	6	;
water	103:12	0:0	6	p_u
op	103:16	0:0	6	+=
water	103:19	0:0	6	i_source_margin_c
water	103:36	0:0	6	;
water	104:12	0:0	6	p_v
op	104:16	0:0	6	+=
water	104:19	0:0	6	i_source_margin_c
water	104:36	0:0	6	;
water	105:12	0:0	6	p_line1
op	105:20	0:0	6	+=
water	105:23	0:0	6	i_dest_margin
water	105:36	0:0	6	;
water	106:12	0:0	6	p_line2
op	106:20	0:0	6	+=
water	106:23	0:0	6	i_dest_margin
water	106:36	0:0	6	;
water	107:8	0:0	6	}
water	108:4	0:0	4	}
water	110:4	0:0	2	SSE2_END
water	110:12	0:0	2	;
