func	2:0	63:0	0	static void	HandleAudioConfig
params	2:29	0:0	1	
param	2:31	2:47	2	demux_t *	p_demux
param	2:49	2:70	2	const uint16_t *	p_anc
param	3:31	3:51	2	uint8_t	i_data_count
param	3:53	3:69	2	uint8_t	i_group
stmnts	0:0	62:4	1	
decl	5:4	5:39	2	demux_sys_t	*p_sys
op	5:23	0:0	2	=
water	5:25	0:0	2	p_demux
op	5:32	0:0	2	->
water	5:34	0:0	2	p_sys
if	6:4	10:4	2	(i_data_count != 18)
cond	6:9	6:25	3	i_data_count != 18
water	6:9	0:0	4	i_data_count
op	6:22	0:0	4	!=
water	6:25	0:0	4	18
stmts	7:4	10:4	3	
water	7:4	0:0	4	{
call	8:8	8:74	4	msg_Warn
arg	8:18	8:25	5	p_demux
water	8:18	0:0	6	p_demux
arg	8:27	8:64	5	"malformed audio config for group %u"
water	8:27	0:0	6	"malformed audio config for group %u"
arg	8:66	8:74	5	i_group
water	8:66	0:0	6	i_group
water	8:75	0:0	4	;
return	9:8	9:14	4	
water	10:4	0:0	4	}
for	11:4	62:4	2	( int i = 0 ;i < MAX_AUDIOS;i ++)
forinit	0:0	11:19	3	 int i = 0 ;
decl	11:10	11:19	4	int	i
op	11:16	0:0	4	=
water	11:18	0:0	4	0
cond	11:21	11:25	3	i < MAX_AUDIOS
water	11:21	0:0	4	i
op	11:23	0:0	4	<
water	11:25	0:0	4	MAX_AUDIOS
forexpr	11:37	11:38	3	i ++
water	11:37	0:0	4	i
op	11:38	0:0	4	++
stmts	12:4	62:4	3	
water	12:4	0:0	4	{
decl	13:8	13:50	4	sdi_audio_t	*p_audio
op	13:29	0:0	4	=
op	13:31	0:0	4	&
water	13:32	0:0	4	p_sys
op	13:37	0:0	4	->
water	13:39	0:0	4	p_audios
op	13:47	0:0	4	[
water	13:48	0:0	4	i
op	13:49	0:0	4	]
if	14:8	61:8	4	(p_audio -> i_group == i_group && p_audio -> p_es == NULL)
cond	14:13	14:61	5	p_audio -> i_group == i_group && p_audio -> p_es == NULL
water	14:13	0:0	6	p_audio
op	14:20	0:0	6	->
water	14:22	0:0	6	i_group
op	14:30	0:0	6	==
water	14:33	0:0	6	i_group
op	14:41	0:0	6	&&
water	14:44	0:0	6	p_audio
op	14:51	0:0	6	->
water	14:53	0:0	6	p_es
op	14:58	0:0	6	==
water	14:61	0:0	6	NULL
stmts	15:8	61:8	5	
water	15:8	0:0	6	{
decl	16:12	16:31	6	unsigned int	i_rate
if	17:12	32:12	6	(p_audio -> i_pair == 2)
cond	17:17	17:36	7	p_audio -> i_pair == 2
water	17:17	0:0	8	p_audio
op	17:24	0:0	8	->
water	17:26	0:0	8	i_pair
op	17:33	0:0	8	==
water	17:36	0:0	8	2
stmts	18:12	32:12	7	
water	18:12	0:0	8	{
water	19:16	0:0	8	i_rate
op	19:23	0:0	8	=
water	19:25	0:0	8	(
water	19:26	0:0	8	p_anc
op	19:31	0:0	8	[
water	19:32	0:0	8	2
op	19:33	0:0	8	]
op	19:35	0:0	8	&
water	19:37	0:0	8	0
water	19:38	0:0	8	xe0
water	19:41	0:0	8	)
op	19:43	0:0	8	>>
water	19:46	0:0	8	5
water	19:47	0:0	8	;
if	20:16	29:16	8	(p_anc [ 7 ] & 0 x1)
cond	20:21	20:33	9	p_anc [ 7 ] & 0 x1
water	20:21	0:0	10	p_anc
op	20:26	0:0	10	[
water	20:27	0:0	10	7
op	20:28	0:0	10	]
op	20:30	0:0	10	&
water	20:32	0:0	10	0
water	20:33	0:0	10	x1
stmts	21:16	29:16	9	
water	21:16	0:0	10	{
decl	22:20	24:67	10	uint32_t	i_tmp
op	22:35	0:0	10	=
water	22:37	0:0	10	(
water	22:38	0:0	10	(
water	22:39	0:0	10	p_anc
op	22:44	0:0	10	[
water	22:45	0:0	10	7
op	22:46	0:0	10	]
op	22:48	0:0	10	&
water	22:50	0:0	10	0
water	22:51	0:0	10	x1fe
water	22:55	0:0	10	)
op	22:57	0:0	10	>>
water	22:60	0:0	10	1
water	22:61	0:0	10	)
op	23:39	0:0	10	|
water	23:41	0:0	10	(
water	23:42	0:0	10	(
water	23:43	0:0	10	p_anc
op	23:48	0:0	10	[
water	23:49	0:0	10	8
op	23:50	0:0	10	]
op	23:52	0:0	10	&
water	23:54	0:0	10	0
water	23:55	0:0	10	x1ff
water	23:59	0:0	10	)
op	23:61	0:0	10	<<
water	23:64	0:0	10	8
water	23:65	0:0	10	)
op	24:39	0:0	10	|
water	24:41	0:0	10	(
water	24:42	0:0	10	(
water	24:43	0:0	10	p_anc
op	24:48	0:0	10	[
water	24:49	0:0	10	9
op	24:50	0:0	10	]
op	24:52	0:0	10	&
water	24:54	0:0	10	0
water	24:55	0:0	10	x1ff
water	24:59	0:0	10	)
op	24:61	0:0	10	<<
water	24:64	0:0	10	17
water	24:66	0:0	10	)
if	25:20	26:61	10	(p_anc [ 9 ] & 0 x80)
cond	25:25	25:37	11	p_anc [ 9 ] & 0 x80
water	25:25	0:0	12	p_anc
op	25:30	0:0	12	[
water	25:31	0:0	12	9
op	25:32	0:0	12	]
op	25:34	0:0	12	&
water	25:36	0:0	12	0
water	25:37	0:0	12	x80
stmts	26:24	26:61	11	
water	26:24	0:0	12	p_audio
op	26:31	0:0	12	->
water	26:33	0:0	12	i_delay
op	26:41	0:0	12	=
water	26:43	0:0	12	i_tmp
op	26:49	0:0	12	|
water	26:51	0:0	12	0
water	26:52	0:0	12	xfc000000
water	26:61	0:0	12	;
else	27:20	28:48	10
stmts	28:24	28:48	11	
water	28:24	0:0	12	p_audio
op	28:31	0:0	12	->
water	28:33	0:0	12	i_delay
op	28:41	0:0	12	=
water	28:43	0:0	12	i_tmp
water	28:48	0:0	12	;
water	29:16	0:0	10	}
if	30:16	31:75	8	(p_anc [ 13 ] & 0 x1)
cond	30:21	30:34	9	p_anc [ 13 ] & 0 x1
water	30:21	0:0	10	p_anc
op	30:26	0:0	10	[
water	30:27	0:0	10	13
op	30:29	0:0	10	]
op	30:31	0:0	10	&
water	30:33	0:0	10	0
water	30:34	0:0	10	x1
stmts	31:20	31:75	9	
call	31:20	31:74	10	msg_Warn
arg	31:30	31:37	11	p_demux
water	31:30	0:0	12	p_demux
arg	31:39	31:74	11	"asymetric audio is not supported"
water	31:39	0:0	12	"asymetric audio is not supported"
water	31:75	0:0	10	;
water	32:12	0:0	8	}
else	33:12	48:12	6
stmts	34:12	48:12	7	
water	34:12	0:0	8	{
water	35:16	0:0	8	i_rate
op	35:23	0:0	8	=
water	35:25	0:0	8	(
water	35:26	0:0	8	p_anc
op	35:31	0:0	8	[
water	35:32	0:0	8	2
op	35:33	0:0	8	]
op	35:35	0:0	8	&
water	35:37	0:0	8	0
water	35:38	0:0	8	xe
water	35:40	0:0	8	)
op	35:42	0:0	8	>>
water	35:45	0:0	8	1
water	35:46	0:0	8	;
if	36:16	45:16	8	(p_anc [ 4 ] & 0 x1)
cond	36:21	36:33	9	p_anc [ 4 ] & 0 x1
water	36:21	0:0	10	p_anc
op	36:26	0:0	10	[
water	36:27	0:0	10	4
op	36:28	0:0	10	]
op	36:30	0:0	10	&
water	36:32	0:0	10	0
water	36:33	0:0	10	x1
stmts	37:16	45:16	9	
water	37:16	0:0	10	{
decl	38:20	40:67	10	uint32_t	i_tmp
op	38:35	0:0	10	=
water	38:37	0:0	10	(
water	38:38	0:0	10	(
water	38:39	0:0	10	p_anc
op	38:44	0:0	10	[
water	38:45	0:0	10	4
op	38:46	0:0	10	]
op	38:48	0:0	10	&
water	38:50	0:0	10	0
water	38:51	0:0	10	x1fe
water	38:55	0:0	10	)
op	38:57	0:0	10	>>
water	38:60	0:0	10	1
water	38:61	0:0	10	)
op	39:39	0:0	10	|
water	39:41	0:0	10	(
water	39:42	0:0	10	(
water	39:43	0:0	10	p_anc
op	39:48	0:0	10	[
water	39:49	0:0	10	5
op	39:50	0:0	10	]
op	39:52	0:0	10	&
water	39:54	0:0	10	0
water	39:55	0:0	10	x1ff
water	39:59	0:0	10	)
op	39:61	0:0	10	<<
water	39:64	0:0	10	8
water	39:65	0:0	10	)
op	40:39	0:0	10	|
water	40:41	0:0	10	(
water	40:42	0:0	10	(
water	40:43	0:0	10	p_anc
op	40:48	0:0	10	[
water	40:49	0:0	10	6
op	40:50	0:0	10	]
op	40:52	0:0	10	&
water	40:54	0:0	10	0
water	40:55	0:0	10	x1ff
water	40:59	0:0	10	)
op	40:61	0:0	10	<<
water	40:64	0:0	10	17
water	40:66	0:0	10	)
if	41:20	42:61	10	(p_anc [ 6 ] & 0 x80)
cond	41:25	41:37	11	p_anc [ 6 ] & 0 x80
water	41:25	0:0	12	p_anc
op	41:30	0:0	12	[
water	41:31	0:0	12	6
op	41:32	0:0	12	]
op	41:34	0:0	12	&
water	41:36	0:0	12	0
water	41:37	0:0	12	x80
stmts	42:24	42:61	11	
water	42:24	0:0	12	p_audio
op	42:31	0:0	12	->
water	42:33	0:0	12	i_delay
op	42:41	0:0	12	=
water	42:43	0:0	12	i_tmp
op	42:49	0:0	12	|
water	42:51	0:0	12	0
water	42:52	0:0	12	xfc000000
water	42:61	0:0	12	;
else	43:20	44:48	10
stmts	44:24	44:48	11	
water	44:24	0:0	12	p_audio
op	44:31	0:0	12	->
water	44:33	0:0	12	i_delay
op	44:41	0:0	12	=
water	44:43	0:0	12	i_tmp
water	44:48	0:0	12	;
water	45:16	0:0	10	}
if	46:16	47:75	8	(p_anc [ 10 ] & 0 x1)
cond	46:21	46:34	9	p_anc [ 10 ] & 0 x1
water	46:21	0:0	10	p_anc
op	46:26	0:0	10	[
water	46:27	0:0	10	10
op	46:29	0:0	10	]
op	46:31	0:0	10	&
water	46:33	0:0	10	0
water	46:34	0:0	10	x1
stmts	47:20	47:75	9	
call	47:20	47:74	10	msg_Warn
arg	47:30	47:37	11	p_demux
water	47:30	0:0	12	p_demux
arg	47:39	47:74	11	"asymetric audio is not supported"
water	47:39	0:0	12	"asymetric audio is not supported"
water	47:75	0:0	10	;
water	48:12	0:0	8	}
switch	49:12	58:12	6	(i_rate)
cond	49:21	49:21	7	i_rate
water	49:21	0:0	8	i_rate
stmts	50:12	58:12	7	
water	50:12	0:0	8	{
label	51:12	51:18	8	case 0 :
water	51:20	0:0	8	p_audio
op	51:27	0:0	8	->
water	51:29	0:0	8	i_rate
op	51:36	0:0	8	=
water	51:38	0:0	8	48000
water	51:43	0:0	8	;
break	51:45	51:50	8	
label	52:12	52:18	8	case 1 :
water	52:20	0:0	8	p_audio
op	52:27	0:0	8	->
water	52:29	0:0	8	i_rate
op	52:36	0:0	8	=
water	52:38	0:0	8	44100
water	52:43	0:0	8	;
break	52:45	52:50	8	
label	53:12	53:18	8	case 2 :
water	53:20	0:0	8	p_audio
op	53:27	0:0	8	->
water	53:29	0:0	8	i_rate
op	53:36	0:0	8	=
water	53:38	0:0	8	32000
water	53:43	0:0	8	;
break	53:45	53:50	8	
label	54:12	54:19	8	default :
call	55:16	56:69	8	msg_Warn
arg	55:26	55:33	9	p_demux
water	55:26	0:0	10	p_demux
arg	55:35	55:70	9	"unknown rate for audio %u/%u (%u)"
water	55:35	0:0	10	"unknown rate for audio %u/%u (%u)"
arg	56:26	56:33	9	i_group
water	56:26	0:0	10	i_group
arg	56:35	56:60	9	p_sys->p_audios[i].i_pair
water	56:35	0:0	10	p_sys
op	56:40	0:0	10	->
water	56:42	0:0	10	p_audios
op	56:50	0:0	10	[
water	56:51	0:0	10	i
op	56:52	0:0	10	]
op	56:53	0:0	10	.
water	56:54	0:0	10	i_pair
arg	56:62	56:69	9	i_rate
water	56:62	0:0	10	i_rate
water	56:70	0:0	8	;
continue	57:16	57:24	8	
water	58:12	0:0	8	}
if	59:12	60:22	6	(InitAudio (p_demux ,p_audio ) != VLC_SUCCESS)
cond	59:16	59:49	7	InitAudio (p_demux ,p_audio ) != VLC_SUCCESS
call	59:16	59:44	8	InitAudio
arg	59:27	59:34	9	p_demux
water	59:27	0:0	10	p_demux
arg	59:36	59:44	9	p_audio
water	59:36	0:0	10	p_audio
op	59:46	0:0	8	!=
water	59:49	0:0	8	VLC_SUCCESS
stmts	60:16	60:22	7	
return	60:16	60:22	8	
water	61:8	0:0	6	}
water	62:4	0:0	4	}
