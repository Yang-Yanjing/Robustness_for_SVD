func	2:0	66:0	0	static int	Open
params	2:15	0:0	1	
param	2:17	2:38	2	vlc_object_t *	p_this
stmnts	0:0	65:22	1	
decl	4:4	4:60	2	video_splitter_t	*p_splitter
op	4:33	0:0	2	=
water	4:35	0:0	2	(
water	4:36	0:0	2	video_splitter_t
op	4:52	0:0	2	*
water	4:53	0:0	2	)
water	4:54	0:0	2	p_this
call	5:4	6:41	2	config_ChainParse
arg	5:23	5:33	3	p_splitter
water	5:23	0:0	4	p_splitter
arg	5:35	5:45	3	CFG_PREFIX
water	5:35	0:0	4	CFG_PREFIX
arg	5:47	5:66	3	ppsz_filter_options
water	5:47	0:0	4	ppsz_filter_options
arg	6:23	6:41	3	p_splitter->p_cfg
water	6:23	0:0	4	p_splitter
op	6:33	0:0	4	->
water	6:35	0:0	4	p_cfg
water	6:42	0:0	2	;
decl	7:4	8:79	2	char	*psz_clonelist
op	7:24	0:0	2	=
call	7:26	8:78	3	var_CreateGetNonEmptyString
arg	7:55	7:65	4	p_splitter
water	7:55	0:0	5	p_splitter
arg	8:55	8:78	4	CFG_PREFIX"vout-list"
water	8:55	0:0	5	CFG_PREFIX
water	8:66	0:0	5	"vout-list"
if	9:4	37:4	2	(psz_clonelist)
cond	9:8	9:8	3	psz_clonelist
water	9:8	0:0	4	psz_clonelist
stmts	10:4	37:4	3	
water	10:4	0:0	4	{
water	12:8	0:0	4	p_splitter
op	12:18	0:0	4	->
water	12:20	0:0	4	i_output
op	12:29	0:0	4	=
water	12:31	0:0	4	1
water	12:32	0:0	4	;
for	13:8	17:8	4	( int i = 0 ;psz_clonelist [ i ];i ++)
forinit	0:0	13:22	5	 int i = 0 ;
decl	13:13	13:22	6	int	i
op	13:19	0:0	6	=
water	13:21	0:0	6	0
cond	13:24	13:39	5	psz_clonelist [ i ]
water	13:24	0:0	6	psz_clonelist
op	13:37	0:0	6	[
water	13:38	0:0	6	i
op	13:39	0:0	6	]
forexpr	13:42	13:43	5	i ++
water	13:42	0:0	6	i
op	13:43	0:0	6	++
stmts	14:8	17:8	5	
water	14:8	0:0	6	{
if	15:12	16:38	6	(psz_clonelist [ i ] == VOUTSEPARATOR)
cond	15:16	15:36	7	psz_clonelist [ i ] == VOUTSEPARATOR
water	15:16	0:0	8	psz_clonelist
op	15:29	0:0	8	[
water	15:30	0:0	8	i
op	15:31	0:0	8	]
op	15:33	0:0	8	==
water	15:36	0:0	8	VOUTSEPARATOR
stmts	16:16	16:38	7	
water	16:16	0:0	8	p_splitter
op	16:26	0:0	8	->
water	16:28	0:0	8	i_output
op	16:36	0:0	8	++
water	16:38	0:0	8	;
water	17:8	0:0	6	}
water	19:8	0:0	4	p_splitter
op	19:18	0:0	4	->
water	19:20	0:0	4	p_output
op	19:29	0:0	4	=
call	19:31	20:69	4	calloc
arg	19:39	19:59	5	p_splitter->i_output
water	19:39	0:0	6	p_splitter
op	19:49	0:0	6	->
water	19:51	0:0	6	i_output
arg	20:39	20:69	5	sizeof(*p_splitter->p_output)
op	20:39	0:0	6	sizeof
water	20:45	0:0	6	(
op	20:46	0:0	6	*
water	20:47	0:0	6	p_splitter
op	20:57	0:0	6	->
water	20:59	0:0	6	p_output
water	20:67	0:0	6	)
water	20:70	0:0	4	;
if	21:8	25:8	4	(! p_splitter -> p_output)
cond	21:12	21:25	5	! p_splitter -> p_output
op	21:12	0:0	6	!
water	21:13	0:0	6	p_splitter
op	21:23	0:0	6	->
water	21:25	0:0	6	p_output
stmts	22:8	25:8	5	
water	22:8	0:0	6	{
call	23:12	23:32	6	free
arg	23:18	23:32	7	psz_clonelist
water	23:18	0:0	8	psz_clonelist
water	23:33	0:0	6	;
return	24:12	24:31	6	VLC_EGENERIC
water	24:19	0:0	7	VLC_EGENERIC
water	25:8	0:0	6	}
decl	27:8	27:37	4	char	*psz_tmp
op	27:22	0:0	4	=
water	27:24	0:0	4	psz_clonelist
for	28:8	35:8	4	( int i = 0 ;psz_tmp && * psz_tmp;i ++)
forinit	0:0	28:22	5	 int i = 0 ;
decl	28:13	28:22	6	int	i
op	28:19	0:0	6	=
water	28:21	0:0	6	0
cond	28:24	28:36	5	psz_tmp && * psz_tmp
water	28:24	0:0	6	psz_tmp
op	28:32	0:0	6	&&
op	28:35	0:0	6	*
water	28:36	0:0	6	psz_tmp
forexpr	28:45	28:46	5	i ++
water	28:45	0:0	6	i
op	28:46	0:0	6	++
stmts	29:8	35:8	5	
water	29:8	0:0	6	{
decl	30:12	30:60	6	char	*psz_new
op	30:26	0:0	6	=
call	30:28	30:59	7	strchr
arg	30:36	30:43	8	psz_tmp
water	30:36	0:0	9	psz_tmp
arg	30:45	30:59	8	VOUTSEPARATOR
water	30:45	0:0	9	VOUTSEPARATOR
if	31:12	32:33	6	(psz_new)
cond	31:16	31:16	7	psz_new
water	31:16	0:0	8	psz_new
stmts	32:16	32:33	7	
op	32:16	0:0	8	*
water	32:17	0:0	8	psz_new
op	32:24	0:0	8	++
op	32:27	0:0	8	=
water	32:29	0:0	8	'\0'
water	32:33	0:0	8	;
water	33:12	0:0	6	p_splitter
op	33:22	0:0	6	->
water	33:24	0:0	6	p_output
op	33:32	0:0	6	[
water	33:33	0:0	6	i
op	33:34	0:0	6	]
op	33:35	0:0	6	.
water	33:36	0:0	6	psz_module
op	33:47	0:0	6	=
call	33:49	33:65	6	strdup
arg	33:57	33:65	7	psz_tmp
water	33:57	0:0	8	psz_tmp
water	33:66	0:0	6	;
water	34:12	0:0	6	psz_tmp
op	34:20	0:0	6	=
water	34:22	0:0	6	psz_new
water	34:29	0:0	6	;
water	35:8	0:0	6	}
call	36:8	36:28	4	free
arg	36:14	36:28	5	psz_clonelist
water	36:14	0:0	6	psz_clonelist
water	36:29	0:0	4	;
water	37:4	0:0	4	}
else	38:4	51:4	2
stmts	39:4	51:4	3	
water	39:4	0:0	4	{
water	42:8	0:0	4	p_splitter
op	42:18	0:0	4	->
water	42:20	0:0	4	i_output
op	42:29	0:0	4	=
call	42:31	42:84	4	var_CreateGetInteger
arg	42:53	42:63	5	p_splitter
water	42:53	0:0	6	p_splitter
arg	42:65	42:84	5	CFG_PREFIX"count"
water	42:65	0:0	6	CFG_PREFIX
water	42:76	0:0	6	"count"
water	42:85	0:0	4	;
if	43:8	44:36	4	(p_splitter -> i_output <= 0)
cond	43:12	43:36	5	p_splitter -> i_output <= 0
water	43:12	0:0	6	p_splitter
op	43:22	0:0	6	->
water	43:24	0:0	6	i_output
op	43:33	0:0	6	<=
water	43:36	0:0	6	0
stmts	44:12	44:36	5	
water	44:12	0:0	6	p_splitter
op	44:22	0:0	6	->
water	44:24	0:0	6	i_output
op	44:33	0:0	6	=
water	44:35	0:0	6	1
water	44:36	0:0	6	;
water	45:8	0:0	4	p_splitter
op	45:18	0:0	4	->
water	45:20	0:0	4	p_output
op	45:29	0:0	4	=
call	45:31	46:69	4	calloc
arg	45:39	45:59	5	p_splitter->i_output
water	45:39	0:0	6	p_splitter
op	45:49	0:0	6	->
water	45:51	0:0	6	i_output
arg	46:39	46:69	5	sizeof(*p_splitter->p_output)
op	46:39	0:0	6	sizeof
water	46:45	0:0	6	(
op	46:46	0:0	6	*
water	46:47	0:0	6	p_splitter
op	46:57	0:0	6	->
water	46:59	0:0	6	p_output
water	46:67	0:0	6	)
water	46:70	0:0	4	;
if	47:8	48:31	4	(! p_splitter -> p_output)
cond	47:12	47:25	5	! p_splitter -> p_output
op	47:12	0:0	6	!
water	47:13	0:0	6	p_splitter
op	47:23	0:0	6	->
water	47:25	0:0	6	p_output
stmts	48:12	48:31	5	
return	48:12	48:31	6	VLC_EGENERIC
water	48:19	0:0	7	VLC_EGENERIC
for	49:8	50:53	4	( int i = 0 ;i < p_splitter -> i_output;i ++)
forinit	0:0	49:22	5	 int i = 0 ;
decl	49:13	49:22	6	int	i
op	49:19	0:0	6	=
water	49:21	0:0	6	0
cond	49:24	49:40	5	i < p_splitter -> i_output
water	49:24	0:0	6	i
op	49:26	0:0	6	<
water	49:28	0:0	6	p_splitter
op	49:38	0:0	6	->
water	49:40	0:0	6	i_output
forexpr	49:50	49:51	5	i ++
water	49:50	0:0	6	i
op	49:51	0:0	6	++
stmts	50:12	50:53	5	
water	50:12	0:0	6	p_splitter
op	50:22	0:0	6	->
water	50:24	0:0	6	p_output
op	50:32	0:0	6	[
water	50:33	0:0	6	i
op	50:34	0:0	6	]
op	50:35	0:0	6	.
water	50:36	0:0	6	psz_module
op	50:47	0:0	6	=
water	50:49	0:0	6	NULL
water	50:53	0:0	6	;
water	51:4	0:0	4	}
for	53:4	60:4	2	( int i = 0 ;i < p_splitter -> i_output;i ++)
forinit	0:0	53:18	3	 int i = 0 ;
decl	53:9	53:18	4	int	i
op	53:15	0:0	4	=
water	53:17	0:0	4	0
cond	53:20	53:36	3	i < p_splitter -> i_output
water	53:20	0:0	4	i
op	53:22	0:0	4	<
water	53:24	0:0	4	p_splitter
op	53:34	0:0	4	->
water	53:36	0:0	4	i_output
forexpr	53:46	53:47	3	i ++
water	53:46	0:0	4	i
op	53:47	0:0	4	++
stmts	54:4	60:4	3	
water	54:4	0:0	4	{
decl	55:8	55:65	4	video_splitter_output_t	*p_cfg
op	55:39	0:0	4	=
op	55:41	0:0	4	&
water	55:42	0:0	4	p_splitter
op	55:52	0:0	4	->
water	55:54	0:0	4	p_output
op	55:62	0:0	4	[
water	55:63	0:0	4	i
op	55:64	0:0	4	]
call	56:8	56:57	4	video_format_Copy
arg	56:27	56:38	5	&p_cfg->fmt
op	56:27	0:0	6	&
water	56:28	0:0	6	p_cfg
op	56:33	0:0	6	->
water	56:35	0:0	6	fmt
arg	56:40	56:57	5	&p_splitter->fmt
op	56:40	0:0	6	&
water	56:41	0:0	6	p_splitter
op	56:51	0:0	6	->
water	56:53	0:0	6	fmt
water	56:58	0:0	4	;
water	57:8	0:0	4	p_cfg
op	57:13	0:0	4	->
water	57:15	0:0	4	window
op	57:21	0:0	4	.
water	57:22	0:0	4	i_x
op	57:26	0:0	4	=
water	57:28	0:0	4	0
water	57:29	0:0	4	;
water	58:8	0:0	4	p_cfg
op	58:13	0:0	4	->
water	58:15	0:0	4	window
op	58:21	0:0	4	.
water	58:22	0:0	4	i_y
op	58:26	0:0	4	=
water	58:28	0:0	4	0
water	58:29	0:0	4	;
water	59:8	0:0	4	p_cfg
op	59:13	0:0	4	->
water	59:15	0:0	4	window
op	59:21	0:0	4	.
water	59:22	0:0	4	i_align
op	59:30	0:0	4	=
water	59:32	0:0	4	0
water	59:33	0:0	4	;
water	60:4	0:0	4	}
water	62:4	0:0	2	p_splitter
op	62:14	0:0	2	->
water	62:16	0:0	2	pf_filter
op	62:26	0:0	2	=
water	62:28	0:0	2	Filter
water	62:34	0:0	2	;
water	63:4	0:0	2	p_splitter
op	63:14	0:0	2	->
water	63:16	0:0	2	pf_mouse
op	63:26	0:0	2	=
water	63:28	0:0	2	NULL
water	63:32	0:0	2	;
call	64:4	64:70	2	msg_Dbg
arg	64:13	64:23	3	p_splitter
water	64:13	0:0	4	p_splitter
arg	64:25	64:47	3	"spawning %i clone(s)"
water	64:25	0:0	4	"spawning %i clone(s)"
arg	64:49	64:70	3	p_splitter->i_output
water	64:49	0:0	4	p_splitter
op	64:59	0:0	4	->
water	64:61	0:0	4	i_output
water	64:71	0:0	2	;
return	65:4	65:22	2	VLC_SUCCESS
water	65:11	0:0	3	VLC_SUCCESS
