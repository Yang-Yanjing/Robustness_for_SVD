func	2:0	103:0	0	static int	OpenEncoder
params	2:22	0:0	1	
param	2:24	2:45	2	vlc_object_t *	p_this
stmnts	0:0	102:22	1	
decl	4:4	4:42	2	encoder_t	*p_enc
op	4:21	0:0	2	=
water	4:23	0:0	2	(
water	4:24	0:0	2	encoder_t
op	4:34	0:0	2	*
water	4:35	0:0	2	)
water	4:36	0:0	2	p_this
decl	5:4	5:24	2	encoder_sys_t	*p_sys
decl	6:4	6:19	2	int	i_frequency
if	7:4	13:4	2	(p_enc -> fmt_out . i_codec != VLC_CODEC_MP2 && p_enc -> fmt_out . i_codec != VLC_CODEC_MPGA && p_enc -> fmt_out . i_codec !=VLC_FOURCC ('m' ,'p' ,'2' ,'a' ) && ! p_enc -> b_force)
cond	7:8	10:16	3	p_enc -> fmt_out . i_codec != VLC_CODEC_MP2 && p_enc -> fmt_out . i_codec != VLC_CODEC_MPGA && p_enc -> fmt_out . i_codec !=VLC_FOURCC ('m' ,'p' ,'2' ,'a' ) && ! p_enc -> b_force
water	7:8	0:0	4	p_enc
op	7:13	0:0	4	->
water	7:15	0:0	4	fmt_out
op	7:22	0:0	4	.
water	7:23	0:0	4	i_codec
op	7:31	0:0	4	!=
water	7:34	0:0	4	VLC_CODEC_MP2
op	7:48	0:0	4	&&
water	8:8	0:0	4	p_enc
op	8:13	0:0	4	->
water	8:15	0:0	4	fmt_out
op	8:22	0:0	4	.
water	8:23	0:0	4	i_codec
op	8:31	0:0	4	!=
water	8:34	0:0	4	VLC_CODEC_MPGA
op	8:49	0:0	4	&&
water	9:8	0:0	4	p_enc
op	9:13	0:0	4	->
water	9:15	0:0	4	fmt_out
op	9:22	0:0	4	.
water	9:23	0:0	4	i_codec
op	9:31	0:0	4	!=
call	9:34	9:65	4	VLC_FOURCC
arg	9:46	9:49	5	'm'
water	9:46	0:0	6	'm'
arg	9:51	9:54	5	'p'
water	9:51	0:0	6	'p'
arg	9:56	9:59	5	'2'
water	9:56	0:0	6	'2'
arg	9:61	9:65	5	'a'
water	9:61	0:0	6	'a'
op	9:67	0:0	4	&&
op	10:8	0:0	4	!
water	10:9	0:0	4	p_enc
op	10:14	0:0	4	->
water	10:16	0:0	4	b_force
stmts	11:4	13:4	3	
water	11:4	0:0	4	{
return	12:8	12:27	4	VLC_EGENERIC
water	12:15	0:0	5	VLC_EGENERIC
water	13:4	0:0	4	}
if	14:4	18:4	2	(p_enc -> fmt_in . audio . i_channels > 2)
cond	14:8	14:41	3	p_enc -> fmt_in . audio . i_channels > 2
water	14:8	0:0	4	p_enc
op	14:13	0:0	4	->
water	14:15	0:0	4	fmt_in
op	14:21	0:0	4	.
water	14:22	0:0	4	audio
op	14:27	0:0	4	.
water	14:28	0:0	4	i_channels
op	14:39	0:0	4	>
water	14:41	0:0	4	2
stmts	15:4	18:4	3	
water	15:4	0:0	4	{
call	16:8	16:55	4	msg_Err
arg	16:17	16:22	5	p_enc
water	16:17	0:0	6	p_enc
arg	16:24	16:55	5	"doesn't support > 2 channels"
water	16:24	0:0	6	"doesn't support > 2 channels"
water	16:56	0:0	4	;
return	17:8	17:27	4	VLC_EGENERIC
water	17:15	0:0	5	VLC_EGENERIC
water	18:4	0:0	4	}
for	19:4	23:4	2	(i_frequency = 0 ;i_frequency < 6;i_frequency ++)
forinit	19:10	19:25	3	i_frequency = 0 ;
water	19:10	0:0	4	i_frequency
op	19:22	0:0	4	=
water	19:24	0:0	4	0
water	19:25	0:0	4	;
cond	19:27	19:41	3	i_frequency < 6
water	19:27	0:0	4	i_frequency
op	19:39	0:0	4	<
water	19:41	0:0	4	6
forexpr	19:44	19:55	3	i_frequency ++
water	19:44	0:0	4	i_frequency
op	19:55	0:0	4	++
stmts	20:4	23:4	3	
water	20:4	0:0	4	{
if	21:8	22:17	4	(p_enc -> fmt_out . audio . i_rate == mpa_freq_tab [ i_frequency ])
cond	21:13	21:68	5	p_enc -> fmt_out . audio . i_rate == mpa_freq_tab [ i_frequency ]
water	21:13	0:0	6	p_enc
op	21:18	0:0	6	->
water	21:20	0:0	6	fmt_out
op	21:27	0:0	6	.
water	21:28	0:0	6	audio
op	21:33	0:0	6	.
water	21:34	0:0	6	i_rate
op	21:41	0:0	6	==
water	21:44	0:0	6	mpa_freq_tab
op	21:56	0:0	6	[
water	21:57	0:0	6	i_frequency
op	21:68	0:0	6	]
stmts	22:12	22:17	5	
break	22:12	22:17	6	
water	23:4	0:0	4	}
if	24:4	29:4	2	(i_frequency == 6)
cond	24:9	24:24	3	i_frequency == 6
water	24:9	0:0	4	i_frequency
op	24:21	0:0	4	==
water	24:24	0:0	4	6
stmts	25:4	29:4	3	
water	25:4	0:0	4	{
call	26:8	27:45	4	msg_Err
arg	26:17	26:22	5	p_enc
water	26:17	0:0	6	p_enc
arg	26:24	26:65	5	"MPEG audio doesn't support frequency=%d"
water	26:24	0:0	6	"MPEG audio doesn't support frequency=%d"
arg	27:17	27:45	5	p_enc->fmt_out.audio.i_rate
water	27:17	0:0	6	p_enc
op	27:22	0:0	6	->
water	27:24	0:0	6	fmt_out
op	27:31	0:0	6	.
water	27:32	0:0	6	audio
op	27:37	0:0	6	.
water	27:38	0:0	6	i_rate
water	27:46	0:0	4	;
return	28:8	28:27	4	VLC_EGENERIC
water	28:15	0:0	5	VLC_EGENERIC
water	29:4	0:0	4	}
if	31:4	32:25	2	(( p_sys = ( encoder_sys_t * )malloc (sizeof ( encoder_sys_t ) ) ) == NULL)
cond	31:8	31:70	3	( p_sys = ( encoder_sys_t * )malloc (sizeof ( encoder_sys_t ) ) ) == NULL
water	31:8	0:0	4	(
water	31:10	0:0	4	p_sys
op	31:16	0:0	4	=
water	31:18	0:0	4	(
water	31:19	0:0	4	encoder_sys_t
op	31:33	0:0	4	*
water	31:34	0:0	4	)
call	31:35	31:63	4	malloc
arg	31:42	31:63	5	sizeof(encoder_sys_t)
op	31:42	0:0	6	sizeof
water	31:48	0:0	6	(
water	31:49	0:0	6	encoder_sys_t
water	31:62	0:0	6	)
water	31:65	0:0	4	)
op	31:67	0:0	4	==
water	31:70	0:0	4	NULL
stmts	32:8	32:25	3	
return	32:8	32:25	4	VLC_ENOMEM
water	32:15	0:0	5	VLC_ENOMEM
water	33:4	0:0	2	p_enc
op	33:9	0:0	2	->
water	33:11	0:0	2	p_sys
op	33:17	0:0	2	=
water	33:19	0:0	2	p_sys
water	33:24	0:0	2	;
water	34:4	0:0	2	p_enc
op	34:9	0:0	2	->
water	34:11	0:0	2	fmt_in
op	34:17	0:0	2	.
water	34:18	0:0	2	i_codec
op	34:26	0:0	2	=
water	34:28	0:0	2	VLC_CODEC_S16N
water	34:42	0:0	2	;
water	35:4	0:0	2	p_enc
op	35:9	0:0	2	->
water	35:11	0:0	2	fmt_out
op	35:18	0:0	2	.
water	35:19	0:0	2	i_cat
op	35:25	0:0	2	=
water	35:27	0:0	2	AUDIO_ES
water	35:35	0:0	2	;
water	36:4	0:0	2	p_enc
op	36:9	0:0	2	->
water	36:11	0:0	2	fmt_out
op	36:18	0:0	2	.
water	36:19	0:0	2	i_codec
op	36:27	0:0	2	=
water	36:29	0:0	2	VLC_CODEC_MPGA
water	36:43	0:0	2	;
call	37:4	37:77	2	config_ChainParse
arg	37:23	37:28	3	p_enc
water	37:23	0:0	4	p_enc
arg	37:30	37:44	3	ENC_CFG_PREFIX
water	37:30	0:0	4	ENC_CFG_PREFIX
arg	37:46	37:62	3	ppsz_enc_options
water	37:46	0:0	4	ppsz_enc_options
arg	37:64	37:77	3	p_enc->p_cfg
water	37:64	0:0	4	p_enc
op	37:69	0:0	4	->
water	37:71	0:0	4	p_cfg
water	37:78	0:0	2	;
water	38:4	0:0	2	p_sys
op	38:9	0:0	2	->
water	38:11	0:0	2	p_twolame
op	38:21	0:0	2	=
call	38:23	38:36	2	twolame_init
water	38:37	0:0	2	;
call	40:4	40:77	2	twolame_set_in_samplerate
arg	40:31	40:47	3	p_sys->p_twolame
water	40:31	0:0	4	p_sys
op	40:36	0:0	4	->
water	40:38	0:0	4	p_twolame
arg	40:49	40:77	3	p_enc->fmt_out.audio.i_rate
water	40:49	0:0	4	p_enc
op	40:54	0:0	4	->
water	40:56	0:0	4	fmt_out
op	40:63	0:0	4	.
water	40:64	0:0	4	audio
op	40:69	0:0	4	.
water	40:70	0:0	4	i_rate
water	40:78	0:0	2	;
call	41:4	41:78	2	twolame_set_out_samplerate
arg	41:32	41:48	3	p_sys->p_twolame
water	41:32	0:0	4	p_sys
op	41:37	0:0	4	->
water	41:39	0:0	4	p_twolame
arg	41:50	41:78	3	p_enc->fmt_out.audio.i_rate
water	41:50	0:0	4	p_enc
op	41:55	0:0	4	->
water	41:57	0:0	4	fmt_out
op	41:64	0:0	4	.
water	41:65	0:0	4	audio
op	41:70	0:0	4	.
water	41:71	0:0	4	i_rate
water	41:79	0:0	2	;
if	42:4	49:4	2	(var_GetBool (p_enc ,ENC_CFG_PREFIX "vbr" ))
cond	42:8	42:49	3	var_GetBool (p_enc ,ENC_CFG_PREFIX "vbr" )
call	42:8	42:49	4	var_GetBool
arg	42:21	42:26	5	p_enc
water	42:21	0:0	6	p_enc
arg	42:28	42:49	5	ENC_CFG_PREFIX"vbr"
water	42:28	0:0	6	ENC_CFG_PREFIX
water	42:43	0:0	6	"vbr"
stmts	43:4	49:4	3	
water	43:4	0:0	4	{
decl	44:8	44:73	4	float	f_quality
op	44:24	0:0	4	=
call	44:26	44:72	5	var_GetFloat
arg	44:40	44:45	6	p_enc
water	44:40	0:0	7	p_enc
arg	44:47	44:72	6	ENC_CFG_PREFIX"quality"
water	44:47	0:0	7	ENC_CFG_PREFIX
water	44:62	0:0	7	"quality"
if	45:8	45:48	4	(f_quality > 50 . 0)
cond	45:13	45:28	5	f_quality > 50 . 0
water	45:13	0:0	6	f_quality
op	45:23	0:0	6	>
water	45:25	0:0	6	50
op	45:27	0:0	6	.
water	45:28	0:0	6	0
stmts	45:32	45:48	5	
water	45:32	0:0	6	f_quality
op	45:42	0:0	6	=
water	45:44	0:0	6	50
op	45:46	0:0	6	.
water	45:47	0:0	6	0
water	45:48	0:0	6	;
if	46:8	46:46	4	(f_quality < 0 . 0)
cond	46:13	46:27	5	f_quality < 0 . 0
water	46:13	0:0	6	f_quality
op	46:23	0:0	6	<
water	46:25	0:0	6	0
op	46:26	0:0	6	.
water	46:27	0:0	6	0
stmts	46:31	46:46	5	
water	46:31	0:0	6	f_quality
op	46:41	0:0	6	=
water	46:43	0:0	6	0
op	46:44	0:0	6	.
water	46:45	0:0	6	0
water	46:46	0:0	6	;
call	47:8	47:45	4	twolame_set_VBR
arg	47:25	47:41	5	p_sys->p_twolame
water	47:25	0:0	6	p_sys
op	47:30	0:0	6	->
water	47:32	0:0	6	p_twolame
arg	47:43	47:45	5	1
water	47:43	0:0	6	1
water	47:46	0:0	4	;
call	48:8	48:55	4	twolame_set_VBR_q
arg	48:27	48:43	5	p_sys->p_twolame
water	48:27	0:0	6	p_sys
op	48:32	0:0	6	->
water	48:34	0:0	6	p_twolame
arg	48:45	48:55	5	f_quality
water	48:45	0:0	6	f_quality
water	48:56	0:0	4	;
water	49:4	0:0	4	}
else	50:4	70:4	2
stmts	51:4	70:4	3	
water	51:4	0:0	4	{
decl	52:8	52:13	4	int	i
for	53:8	58:8	4	(i = 1 ;i < 14;i ++)
forinit	53:14	53:19	5	i = 1 ;
water	53:14	0:0	6	i
op	53:16	0:0	6	=
water	53:18	0:0	6	1
water	53:19	0:0	6	;
cond	53:21	53:25	5	i < 14
water	53:21	0:0	6	i
op	53:23	0:0	6	<
water	53:25	0:0	6	14
forexpr	53:29	53:30	5	i ++
water	53:29	0:0	6	i
op	53:30	0:0	6	++
stmts	54:8	58:8	5	
water	54:8	0:0	6	{
if	55:12	57:21	6	(p_enc -> fmt_out . i_bitrate / 1000 <= mpa_bitrate_tab [ i_frequency / 3 ] [ i ])
cond	55:17	56:55	7	p_enc -> fmt_out . i_bitrate / 1000 <= mpa_bitrate_tab [ i_frequency / 3 ] [ i ]
water	55:17	0:0	8	p_enc
op	55:22	0:0	8	->
water	55:24	0:0	8	fmt_out
op	55:31	0:0	8	.
water	55:32	0:0	8	i_bitrate
op	55:42	0:0	8	/
water	55:44	0:0	8	1000
op	56:18	0:0	8	<=
water	56:21	0:0	8	mpa_bitrate_tab
op	56:36	0:0	8	[
water	56:37	0:0	8	i_frequency
op	56:49	0:0	8	/
water	56:51	0:0	8	3
op	56:52	0:0	8	]
op	56:53	0:0	8	[
water	56:54	0:0	8	i
op	56:55	0:0	8	]
stmts	57:16	57:21	7	
break	57:16	57:21	8	
water	58:8	0:0	6	}
if	59:8	67:8	4	(p_enc -> fmt_out . i_bitrate / 1000 != mpa_bitrate_tab [ i_frequency / 3 ] [ i ])
cond	59:13	60:51	5	p_enc -> fmt_out . i_bitrate / 1000 != mpa_bitrate_tab [ i_frequency / 3 ] [ i ]
water	59:13	0:0	6	p_enc
op	59:18	0:0	6	->
water	59:20	0:0	6	fmt_out
op	59:27	0:0	6	.
water	59:28	0:0	6	i_bitrate
op	59:38	0:0	6	/
water	59:40	0:0	6	1000
op	60:14	0:0	6	!=
water	60:17	0:0	6	mpa_bitrate_tab
op	60:32	0:0	6	[
water	60:33	0:0	6	i_frequency
op	60:45	0:0	6	/
water	60:47	0:0	6	3
op	60:48	0:0	6	]
op	60:49	0:0	6	[
water	60:50	0:0	6	i
op	60:51	0:0	6	]
stmts	61:8	67:8	5	
water	61:8	0:0	6	{
call	62:12	64:65	6	msg_Warn
arg	62:22	62:27	7	p_enc
water	62:22	0:0	8	p_enc
arg	62:29	62:78	7	"MPEG audio doesn't support bitrate=%d, using %d"
water	62:29	0:0	8	"MPEG audio doesn't support bitrate=%d, using %d"
arg	63:22	63:46	7	p_enc->fmt_out.i_bitrate
water	63:22	0:0	8	p_enc
op	63:27	0:0	8	->
water	63:29	0:0	8	fmt_out
op	63:36	0:0	8	.
water	63:37	0:0	8	i_bitrate
arg	64:22	64:65	7	mpa_bitrate_tab[i_frequency/3][i]*1000
water	64:22	0:0	8	mpa_bitrate_tab
op	64:37	0:0	8	[
water	64:38	0:0	8	i_frequency
op	64:50	0:0	8	/
water	64:52	0:0	8	3
op	64:53	0:0	8	]
op	64:54	0:0	8	[
water	64:55	0:0	8	i
op	64:56	0:0	8	]
op	64:58	0:0	8	*
water	64:60	0:0	8	1000
water	64:66	0:0	6	;
water	65:12	0:0	6	p_enc
op	65:17	0:0	6	->
water	65:19	0:0	6	fmt_out
op	65:26	0:0	6	.
water	65:27	0:0	6	i_bitrate
op	65:37	0:0	6	=
water	65:39	0:0	6	mpa_bitrate_tab
op	65:54	0:0	6	[
water	65:55	0:0	6	i_frequency
op	65:67	0:0	6	/
water	65:69	0:0	6	3
op	65:70	0:0	6	]
op	65:71	0:0	6	[
water	65:72	0:0	6	i
op	65:73	0:0	6	]
op	66:40	0:0	6	*
water	66:42	0:0	6	1000
water	66:46	0:0	6	;
water	67:8	0:0	6	}
call	68:8	69:61	4	twolame_set_bitrate
arg	68:29	68:45	5	p_sys->p_twolame
water	68:29	0:0	6	p_sys
op	68:34	0:0	6	->
water	68:36	0:0	6	p_twolame
arg	69:29	69:61	5	p_enc->fmt_out.i_bitrate/1000
water	69:29	0:0	6	p_enc
op	69:34	0:0	6	->
water	69:36	0:0	6	fmt_out
op	69:43	0:0	6	.
water	69:44	0:0	6	i_bitrate
op	69:54	0:0	6	/
water	69:56	0:0	6	1000
water	69:62	0:0	4	;
water	70:4	0:0	4	}
if	71:4	75:4	2	(p_enc -> fmt_in . audio . i_channels == 1)
cond	71:9	71:43	3	p_enc -> fmt_in . audio . i_channels == 1
water	71:9	0:0	4	p_enc
op	71:14	0:0	4	->
water	71:16	0:0	4	fmt_in
op	71:22	0:0	4	.
water	71:23	0:0	4	audio
op	71:28	0:0	4	.
water	71:29	0:0	4	i_channels
op	71:40	0:0	4	==
water	71:43	0:0	4	1
stmts	72:4	75:4	3	
water	72:4	0:0	4	{
call	73:8	73:54	4	twolame_set_num_channels
arg	73:34	73:50	5	p_sys->p_twolame
water	73:34	0:0	6	p_sys
op	73:39	0:0	6	->
water	73:41	0:0	6	p_twolame
arg	73:52	73:54	5	1
water	73:52	0:0	6	1
water	73:55	0:0	4	;
call	74:8	74:57	4	twolame_set_mode
arg	74:26	74:42	5	p_sys->p_twolame
water	74:26	0:0	6	p_sys
op	74:31	0:0	6	->
water	74:33	0:0	6	p_twolame
arg	74:44	74:57	5	TWOLAME_MONO
water	74:44	0:0	6	TWOLAME_MONO
water	74:58	0:0	4	;
water	75:4	0:0	4	}
else	76:4	92:4	2
stmts	77:4	92:4	3	
water	77:4	0:0	4	{
call	78:8	78:54	4	twolame_set_num_channels
arg	78:34	78:50	5	p_sys->p_twolame
water	78:34	0:0	6	p_sys
op	78:39	0:0	6	->
water	78:41	0:0	6	p_twolame
arg	78:52	78:54	5	2
water	78:52	0:0	6	2
water	78:55	0:0	4	;
switch	79:8	91:8	4	(var_GetInteger (p_enc ,ENC_CFG_PREFIX "mode" ))
cond	79:16	79:61	5	var_GetInteger (p_enc ,ENC_CFG_PREFIX "mode" )
call	79:16	79:61	6	var_GetInteger
arg	79:32	79:37	7	p_enc
water	79:32	0:0	8	p_enc
arg	79:39	79:61	7	ENC_CFG_PREFIX"mode"
water	79:39	0:0	8	ENC_CFG_PREFIX
water	79:54	0:0	8	"mode"
stmts	80:8	91:8	5	
water	80:8	0:0	6	{
label	81:8	81:14	6	case 1 :
call	82:12	82:69	6	twolame_set_mode
arg	82:30	82:46	7	p_sys->p_twolame
water	82:30	0:0	8	p_sys
op	82:35	0:0	8	->
water	82:37	0:0	8	p_twolame
arg	82:48	82:69	7	TWOLAME_DUAL_CHANNEL
water	82:48	0:0	8	TWOLAME_DUAL_CHANNEL
water	82:70	0:0	6	;
break	83:12	83:17	6	
label	84:8	84:14	6	case 2 :
call	85:12	85:69	6	twolame_set_mode
arg	85:30	85:46	7	p_sys->p_twolame
water	85:30	0:0	8	p_sys
op	85:35	0:0	8	->
water	85:37	0:0	8	p_twolame
arg	85:48	85:69	7	TWOLAME_JOINT_STEREO
water	85:48	0:0	8	TWOLAME_JOINT_STEREO
water	85:70	0:0	6	;
break	86:12	86:17	6	
label	87:8	87:14	6	case 0 :
label	88:8	88:15	6	default :
call	89:12	89:63	6	twolame_set_mode
arg	89:30	89:46	7	p_sys->p_twolame
water	89:30	0:0	8	p_sys
op	89:35	0:0	8	->
water	89:37	0:0	8	p_twolame
arg	89:48	89:63	7	TWOLAME_STEREO
water	89:48	0:0	8	TWOLAME_STEREO
water	89:64	0:0	6	;
break	90:12	90:17	6	
water	91:8	0:0	6	}
water	92:4	0:0	4	}
call	93:4	94:72	2	twolame_set_psymodel
arg	93:26	93:42	3	p_sys->p_twolame
water	93:26	0:0	4	p_sys
op	93:31	0:0	4	->
water	93:33	0:0	4	p_twolame
arg	94:26	94:72	3	var_GetInteger(p_enc,ENC_CFG_PREFIX"psy")
call	94:26	94:70	4	var_GetInteger
arg	94:42	94:47	5	p_enc
water	94:42	0:0	6	p_enc
arg	94:49	94:70	5	ENC_CFG_PREFIX"psy"
water	94:49	0:0	6	ENC_CFG_PREFIX
water	94:64	0:0	6	"psy"
water	94:73	0:0	2	;
if	95:4	99:4	2	(twolame_init_params (p_sys -> p_twolame ))
cond	95:9	95:47	3	twolame_init_params (p_sys -> p_twolame )
call	95:9	95:47	4	twolame_init_params
arg	95:30	95:47	5	p_sys->p_twolame
water	95:30	0:0	6	p_sys
op	95:35	0:0	6	->
water	95:37	0:0	6	p_twolame
stmts	96:4	99:4	3	
water	96:4	0:0	4	{
call	97:8	97:56	4	msg_Err
arg	97:17	97:22	5	p_enc
water	97:17	0:0	6	p_enc
arg	97:24	97:56	5	"twolame initialization failed"
water	97:24	0:0	6	"twolame initialization failed"
water	97:57	0:0	4	;
return	98:8	98:28	4	-VLC_EGENERIC
op	98:15	0:0	5	-
water	98:16	0:0	5	VLC_EGENERIC
water	99:4	0:0	4	}
water	100:4	0:0	2	p_enc
op	100:9	0:0	2	->
water	100:11	0:0	2	pf_encode_audio
op	100:27	0:0	2	=
water	100:29	0:0	2	Encode
water	100:35	0:0	2	;
water	101:4	0:0	2	p_sys
op	101:9	0:0	2	->
water	101:11	0:0	2	i_nb_samples
op	101:24	0:0	2	=
water	101:26	0:0	2	0
water	101:27	0:0	2	;
return	102:4	102:22	2	VLC_SUCCESS
water	102:11	0:0	3	VLC_SUCCESS
