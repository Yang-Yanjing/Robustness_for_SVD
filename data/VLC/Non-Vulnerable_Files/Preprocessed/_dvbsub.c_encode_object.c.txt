func	2:0	68:0	0	static void	encode_object
params	2:25	0:0	1	
param	2:27	2:43	2	encoder_t *	p_enc
param	2:45	2:52	2	bs_t *	s
param	2:54	2:77	2	subpicture_t *	p_subpic
stmnts	0:0	67:4	1	
decl	4:4	4:39	2	encoder_sys_t	*p_sys
op	4:25	0:0	2	=
water	4:27	0:0	2	p_enc
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:33	2	subpicture_region_t	*p_region
decl	6:4	6:16	2	int	i_region
decl	7:4	7:52	2	int	i_length_pos
water	7:20	0:0	2	,
decl	7:4	7:52	2	int	i_update_pos
water	7:34	0:0	2	,
decl	7:4	7:52	2	int	i_pixel_data_pos
for	8:4	67:4	2	(i_region = 0 , p_region = p_subpic -> p_region ;p_region;p_region = p_region -> p_next , i_region ++)
forinit	8:9	8:52	3	i_region = 0 , p_region = p_subpic -> p_region ;
water	8:9	0:0	4	i_region
op	8:18	0:0	4	=
water	8:20	0:0	4	0
water	8:21	0:0	4	,
water	8:23	0:0	4	p_region
op	8:32	0:0	4	=
water	8:34	0:0	4	p_subpic
op	8:42	0:0	4	->
water	8:44	0:0	4	p_region
water	8:52	0:0	4	;
cond	8:54	8:54	3	p_region
water	8:54	0:0	4	p_region
forexpr	9:9	9:46	3	p_region = p_region -> p_next , i_region ++
water	9:9	0:0	4	p_region
op	9:18	0:0	4	=
water	9:20	0:0	4	p_region
op	9:28	0:0	4	->
water	9:30	0:0	4	p_next
water	9:36	0:0	4	,
water	9:38	0:0	4	i_region
op	9:46	0:0	4	++
stmts	10:4	67:4	3	
water	10:4	0:0	4	{
call	11:8	11:29	4	bs_write
arg	11:18	11:19	5	s
water	11:18	0:0	6	s
arg	11:21	11:22	5	8
water	11:21	0:0	6	8
arg	11:24	11:29	5	0x0f
water	11:24	0:0	6	0
water	11:25	0:0	6	x0f
water	11:30	0:0	4	;
call	12:8	12:46	4	bs_write
arg	12:18	12:19	5	s
water	12:18	0:0	6	s
arg	12:21	12:22	5	8
water	12:21	0:0	6	8
arg	12:24	12:46	5	DVBSUB_ST_OBJECT_DATA
water	12:24	0:0	6	DVBSUB_ST_OBJECT_DATA
water	12:47	0:0	4	;
call	13:8	13:27	4	bs_write
arg	13:18	13:19	5	s
water	13:18	0:0	6	s
arg	13:21	13:23	5	16
water	13:21	0:0	6	16
arg	13:25	13:27	5	1
water	13:25	0:0	6	1
water	13:28	0:0	4	;
water	14:8	0:0	4	i_length_pos
op	14:21	0:0	4	=
call	14:23	14:33	4	bs_pos
arg	14:31	14:33	5	s
water	14:31	0:0	6	s
water	14:34	0:0	4	;
call	15:8	15:27	4	bs_write
arg	15:18	15:19	5	s
water	15:18	0:0	6	s
arg	15:21	15:23	5	16
water	15:21	0:0	6	16
arg	15:25	15:27	5	0
water	15:25	0:0	6	0
water	15:28	0:0	4	;
call	16:8	16:34	4	bs_write
arg	16:18	16:19	5	s
water	16:18	0:0	6	s
arg	16:21	16:23	5	16
water	16:21	0:0	6	16
arg	16:25	16:34	5	i_region
water	16:25	0:0	6	i_region
water	16:35	0:0	4	;
call	17:8	17:46	4	bs_write
arg	17:18	17:19	5	s
water	17:18	0:0	6	s
arg	17:21	17:22	5	4
water	17:21	0:0	6	4
arg	17:24	17:46	5	p_sys->i_region_ver++
water	17:24	0:0	6	p_sys
op	17:29	0:0	6	->
water	17:31	0:0	6	i_region_ver
op	17:43	0:0	6	++
water	17:47	0:0	4	;
switch	19:8	30:8	4	(p_region -> fmt . i_chroma)
cond	19:16	19:30	5	p_region -> fmt . i_chroma
water	19:16	0:0	6	p_region
op	19:24	0:0	6	->
water	19:26	0:0	6	fmt
op	19:29	0:0	6	.
water	19:30	0:0	6	i_chroma
stmts	20:8	30:8	5	
water	20:8	0:0	6	{
label	21:8	21:27	6	case VLC_CODEC_YUVP :
call	22:12	22:30	6	bs_write
arg	22:22	22:23	7	s
water	22:22	0:0	8	s
arg	22:25	22:26	7	2
water	22:25	0:0	8	2
arg	22:28	22:30	7	0
water	22:28	0:0	8	0
water	22:31	0:0	6	;
break	23:12	23:17	6	
label	24:8	24:27	6	case VLC_CODEC_TEXT :
call	25:12	25:30	6	bs_write
arg	25:22	25:23	7	s
water	25:22	0:0	8	s
arg	25:25	25:26	7	2
water	25:25	0:0	8	2
arg	25:28	25:30	7	1
water	25:28	0:0	8	1
water	25:31	0:0	6	;
break	26:12	26:17	6	
label	27:8	27:15	6	default :
call	28:12	28:90	6	msg_Err
arg	28:21	28:26	7	p_enc
water	28:21	0:0	8	p_enc
arg	28:28	28:65	7	"FOURCC %d not supported by encoder."
water	28:28	0:0	8	"FOURCC %d not supported by encoder."
arg	28:67	28:90	7	p_region->fmt.i_chroma
water	28:67	0:0	8	p_region
op	28:75	0:0	8	->
water	28:77	0:0	8	fmt
op	28:80	0:0	8	.
water	28:81	0:0	8	i_chroma
water	28:91	0:0	6	;
continue	29:12	29:20	6	
water	30:8	0:0	6	}
call	31:8	31:26	4	bs_write
arg	31:18	31:19	5	s
water	31:18	0:0	6	s
arg	31:21	31:22	5	1
water	31:21	0:0	6	1
arg	31:24	31:26	5	0
water	31:24	0:0	6	0
water	31:27	0:0	4	;
call	32:8	32:26	4	bs_write
arg	32:18	32:19	5	s
water	32:18	0:0	6	s
arg	32:21	32:22	5	1
water	32:21	0:0	6	1
arg	32:24	32:26	5	0
water	32:24	0:0	6	0
water	32:27	0:0	4	;
if	33:8	47:8	4	(p_region -> fmt . i_chroma == VLC_CODEC_TEXT)
cond	33:12	33:38	5	p_region -> fmt . i_chroma == VLC_CODEC_TEXT
water	33:12	0:0	6	p_region
op	33:20	0:0	6	->
water	33:22	0:0	6	fmt
op	33:25	0:0	6	.
water	33:26	0:0	6	i_chroma
op	33:35	0:0	6	==
water	33:38	0:0	6	VLC_CODEC_TEXT
stmts	34:8	47:8	5	
water	34:8	0:0	6	{
decl	35:12	35:25	6	int	i_size
water	35:22	0:0	6	,
decl	35:12	35:25	6	int	i
if	36:12	36:46	6	(! p_region -> psz_text)
cond	36:16	36:27	7	! p_region -> psz_text
op	36:16	0:0	8	!
water	36:17	0:0	8	p_region
op	36:25	0:0	8	->
water	36:27	0:0	8	psz_text
stmts	36:38	36:46	7	
continue	36:38	36:46	8	
water	37:12	0:0	6	i_size
op	37:19	0:0	6	=
call	37:21	37:62	6	__MIN
arg	37:28	37:56	7	strlen(p_region->psz_text)
call	37:28	37:55	8	strlen
arg	37:36	37:55	9	p_region->psz_text
water	37:36	0:0	10	p_region
op	37:44	0:0	10	->
water	37:46	0:0	10	psz_text
arg	37:58	37:62	7	256
water	37:58	0:0	8	256
water	37:63	0:0	6	;
call	38:12	38:35	6	bs_write
arg	38:22	38:23	7	s
water	38:22	0:0	8	s
arg	38:25	38:26	7	8
water	38:25	0:0	8	8
arg	38:28	38:35	7	i_size
water	38:28	0:0	8	i_size
water	38:36	0:0	6	;
for	39:12	42:12	6	(i = 0 ;i < i_size;i ++)
forinit	39:17	39:22	7	i = 0 ;
water	39:17	0:0	8	i
op	39:19	0:0	8	=
water	39:21	0:0	8	0
water	39:22	0:0	8	;
cond	39:24	39:28	7	i < i_size
water	39:24	0:0	8	i
op	39:26	0:0	8	<
water	39:28	0:0	8	i_size
forexpr	39:36	39:37	7	i ++
water	39:36	0:0	8	i
op	39:37	0:0	8	++
stmts	40:12	42:12	7	
water	40:12	0:0	8	{
call	41:16	41:55	8	bs_write
arg	41:26	41:27	9	s
water	41:26	0:0	10	s
arg	41:29	41:31	9	16
water	41:29	0:0	10	16
arg	41:33	41:55	9	p_region->psz_text[i]
water	41:33	0:0	10	p_region
op	41:41	0:0	10	->
water	41:43	0:0	10	psz_text
op	41:51	0:0	10	[
water	41:52	0:0	10	i
op	41:53	0:0	10	]
water	41:56	0:0	8	;
water	42:12	0:0	8	}
call	44:12	45:52	6	SetWBE
arg	44:20	44:47	7	&s->p_start[i_length_pos/8]
op	44:20	0:0	8	&
water	44:21	0:0	8	s
op	44:22	0:0	8	->
water	44:24	0:0	8	p_start
op	44:31	0:0	8	[
water	44:32	0:0	8	i_length_pos
op	44:44	0:0	8	/
water	44:45	0:0	8	8
op	44:46	0:0	8	]
arg	45:20	45:52	7	(bs_pos(s)-i_length_pos)/8-2
water	45:20	0:0	8	(
call	45:21	45:29	8	bs_pos
arg	45:28	45:29	9	s
water	45:28	0:0	10	s
op	45:31	0:0	8	-
water	45:33	0:0	8	i_length_pos
water	45:45	0:0	8	)
op	45:46	0:0	8	/
water	45:47	0:0	8	8
op	45:49	0:0	8	-
water	45:50	0:0	8	2
water	45:53	0:0	6	;
continue	46:12	46:20	6	
water	47:8	0:0	6	}
water	49:8	0:0	4	i_update_pos
op	49:21	0:0	4	=
call	49:23	49:33	4	bs_pos
arg	49:31	49:33	5	s
water	49:31	0:0	6	s
water	49:34	0:0	4	;
call	50:8	50:27	4	bs_write
arg	50:18	50:19	5	s
water	50:18	0:0	6	s
arg	50:21	50:23	5	16
water	50:21	0:0	6	16
arg	50:25	50:27	5	0
water	50:25	0:0	6	0
water	50:28	0:0	4	;
call	51:8	51:27	4	bs_write
arg	51:18	51:19	5	s
water	51:18	0:0	6	s
arg	51:21	51:23	5	16
water	51:21	0:0	6	16
arg	51:25	51:27	5	0
water	51:25	0:0	6	0
water	51:28	0:0	4	;
water	53:8	0:0	4	i_pixel_data_pos
op	53:25	0:0	4	=
call	53:27	53:37	4	bs_pos
arg	53:35	53:37	5	s
water	53:35	0:0	6	s
water	53:38	0:0	4	;
call	54:8	54:52	4	encode_pixel_data
arg	54:27	54:32	5	p_enc
water	54:27	0:0	6	p_enc
arg	54:34	54:35	5	s
water	54:34	0:0	6	s
arg	54:37	54:45	5	p_region
water	54:37	0:0	6	p_region
arg	54:47	54:52	5	true
water	54:47	0:0	6	true
water	54:53	0:0	4	;
water	55:8	0:0	4	i_pixel_data_pos
op	55:25	0:0	4	=
water	55:27	0:0	4	(
call	55:29	55:39	4	bs_pos
arg	55:37	55:39	5	s
water	55:37	0:0	6	s
op	55:41	0:0	4	-
water	55:43	0:0	4	i_pixel_data_pos
water	55:60	0:0	4	)
op	55:62	0:0	4	/
water	55:64	0:0	4	8
water	55:65	0:0	4	;
call	56:8	56:62	4	SetWBE
arg	56:16	56:43	5	&s->p_start[i_update_pos/8]
op	56:16	0:0	6	&
water	56:17	0:0	6	s
op	56:18	0:0	6	->
water	56:20	0:0	6	p_start
op	56:27	0:0	6	[
water	56:28	0:0	6	i_update_pos
op	56:40	0:0	6	/
water	56:41	0:0	6	8
op	56:42	0:0	6	]
arg	56:45	56:62	5	i_pixel_data_pos
water	56:45	0:0	6	i_pixel_data_pos
water	56:63	0:0	4	;
water	58:8	0:0	4	i_pixel_data_pos
op	58:25	0:0	4	=
call	58:27	58:37	4	bs_pos
arg	58:35	58:37	5	s
water	58:35	0:0	6	s
water	58:38	0:0	4	;
call	59:8	59:53	4	encode_pixel_data
arg	59:27	59:32	5	p_enc
water	59:27	0:0	6	p_enc
arg	59:34	59:35	5	s
water	59:34	0:0	6	s
arg	59:37	59:45	5	p_region
water	59:37	0:0	6	p_region
arg	59:47	59:53	5	false
water	59:47	0:0	6	false
water	59:54	0:0	4	;
water	60:8	0:0	4	i_pixel_data_pos
op	60:25	0:0	4	=
water	60:27	0:0	4	(
call	60:29	60:39	4	bs_pos
arg	60:37	60:39	5	s
water	60:37	0:0	6	s
op	60:41	0:0	4	-
water	60:43	0:0	4	i_pixel_data_pos
water	60:60	0:0	4	)
op	60:62	0:0	4	/
water	60:64	0:0	4	8
water	60:65	0:0	4	;
call	61:8	61:64	4	SetWBE
arg	61:16	61:45	5	&s->p_start[i_update_pos/8+2]
op	61:16	0:0	6	&
water	61:17	0:0	6	s
op	61:18	0:0	6	->
water	61:20	0:0	6	p_start
op	61:27	0:0	6	[
water	61:28	0:0	6	i_update_pos
op	61:40	0:0	6	/
water	61:41	0:0	6	8
op	61:42	0:0	6	+
water	61:43	0:0	6	2
op	61:44	0:0	6	]
arg	61:47	61:64	5	i_pixel_data_pos
water	61:47	0:0	6	i_pixel_data_pos
water	61:65	0:0	4	;
call	63:8	63:22	4	bs_align_0
arg	63:20	63:22	5	s
water	63:20	0:0	6	s
water	63:23	0:0	4	;
if	64:8	64:50	4	(bs_pos (s ) % 16)
cond	64:12	64:26	5	bs_pos (s ) % 16
call	64:12	64:22	6	bs_pos
arg	64:20	64:22	7	s
water	64:20	0:0	8	s
op	64:24	0:0	6	%
water	64:26	0:0	6	16
stmts	64:31	64:50	5	
call	64:31	64:49	6	bs_write
arg	64:41	64:42	7	s
water	64:41	0:0	8	s
arg	64:44	64:45	7	8
water	64:44	0:0	8	8
arg	64:47	64:49	7	0
water	64:47	0:0	8	0
water	64:50	0:0	6	;
call	66:8	66:77	4	SetWBE
arg	66:16	66:43	5	&s->p_start[i_length_pos/8]
op	66:16	0:0	6	&
water	66:17	0:0	6	s
op	66:18	0:0	6	->
water	66:20	0:0	6	p_start
op	66:27	0:0	6	[
water	66:28	0:0	6	i_length_pos
op	66:40	0:0	6	/
water	66:41	0:0	6	8
op	66:42	0:0	6	]
arg	66:45	66:77	5	(bs_pos(s)-i_length_pos)/8-2
water	66:45	0:0	6	(
call	66:46	66:54	6	bs_pos
arg	66:53	66:54	7	s
water	66:53	0:0	8	s
op	66:56	0:0	6	-
water	66:58	0:0	6	i_length_pos
water	66:70	0:0	6	)
op	66:71	0:0	6	/
water	66:72	0:0	6	8
op	66:74	0:0	6	-
water	66:75	0:0	6	2
water	66:78	0:0	4	;
water	67:4	0:0	4	}
