func	2:0	40:0	0	static int	OpaquePage
params	2:21	0:0	1	
param	2:23	2:39	2	picture_t *	p_src
param	2:41	2:63	2	const vbi_page *	p_page
param	3:23	3:47	2	const video_format_t	fmt
param	3:49	3:62	2	bool	b_opaque
param	3:64	3:86	2	const int	text_offset
stmnts	0:0	39:22	1	
decl	5:4	5:24	2	unsigned int	x
water	5:21	0:0	2	,
decl	5:4	5:24	2	unsigned int	y
call	6:4	6:43	2	assert
arg	6:12	6:43	3	fmt.i_chroma==VLC_CODEC_RGBA
water	6:12	0:0	4	fmt
op	6:15	0:0	4	.
water	6:16	0:0	4	i_chroma
op	6:25	0:0	4	==
water	6:28	0:0	4	VLC_CODEC_RGBA
water	6:44	0:0	2	;
for	8:4	37:4	2	(y = 0 ;y < fmt . i_height;y ++)
forinit	8:9	8:14	3	y = 0 ;
water	8:9	0:0	4	y
op	8:11	0:0	4	=
water	8:13	0:0	4	0
water	8:14	0:0	4	;
cond	8:16	8:24	3	y < fmt . i_height
water	8:16	0:0	4	y
op	8:18	0:0	4	<
water	8:20	0:0	4	fmt
op	8:23	0:0	4	.
water	8:24	0:0	4	i_height
forexpr	8:34	8:35	3	y ++
water	8:34	0:0	4	y
op	8:35	0:0	4	++
stmts	9:4	37:4	3	
water	9:4	0:0	4	{
for	10:8	36:8	4	(x = 0 ;x < fmt . i_width;x ++)
forinit	10:13	10:18	5	x = 0 ;
water	10:13	0:0	6	x
op	10:15	0:0	6	=
water	10:17	0:0	6	0
water	10:18	0:0	6	;
cond	10:20	10:28	5	x < fmt . i_width
water	10:20	0:0	6	x
op	10:22	0:0	6	<
water	10:24	0:0	6	fmt
op	10:27	0:0	6	.
water	10:28	0:0	6	i_width
forexpr	10:37	10:38	5	x ++
water	10:37	0:0	6	x
op	10:38	0:0	6	++
stmts	11:8	36:8	5	
water	11:8	0:0	6	{
decl	12:12	12:107	6	const vbi_opacity	opacity
op	12:38	0:0	6	=
water	12:40	0:0	6	p_page
op	12:46	0:0	6	->
water	12:48	0:0	6	text
op	12:52	0:0	6	[
water	12:54	0:0	6	text_offset
op	12:66	0:0	6	+
water	12:68	0:0	6	y
op	12:69	0:0	6	/
water	12:70	0:0	6	10
op	12:73	0:0	6	*
water	12:75	0:0	6	p_page
op	12:81	0:0	6	->
water	12:83	0:0	6	columns
op	12:91	0:0	6	+
water	12:93	0:0	6	x
op	12:94	0:0	6	/
water	12:95	0:0	6	12
op	12:98	0:0	6	]
op	12:99	0:0	6	.
water	12:100	0:0	6	opacity
decl	13:12	13:105	6	const int	background
op	13:33	0:0	6	=
water	13:35	0:0	6	p_page
op	13:41	0:0	6	->
water	13:43	0:0	6	text
op	13:47	0:0	6	[
water	13:49	0:0	6	text_offset
op	13:61	0:0	6	+
water	13:63	0:0	6	y
op	13:64	0:0	6	/
water	13:65	0:0	6	10
op	13:68	0:0	6	*
water	13:70	0:0	6	p_page
op	13:76	0:0	6	->
water	13:78	0:0	6	columns
op	13:86	0:0	6	+
water	13:88	0:0	6	x
op	13:89	0:0	6	/
water	13:90	0:0	6	12
op	13:93	0:0	6	]
op	13:94	0:0	6	.
water	13:95	0:0	6	background
decl	14:12	14:91	6	uint32_t	*p_pixel
op	14:30	0:0	6	=
water	14:32	0:0	6	(
water	14:33	0:0	6	uint32_t
op	14:41	0:0	6	*
water	14:42	0:0	6	)
op	14:43	0:0	6	&
water	14:44	0:0	6	p_src
op	14:49	0:0	6	->
water	14:51	0:0	6	p
op	14:52	0:0	6	->
water	14:54	0:0	6	p_pixels
op	14:62	0:0	6	[
water	14:63	0:0	6	y
op	14:65	0:0	6	*
water	14:67	0:0	6	p_src
op	14:72	0:0	6	->
water	14:74	0:0	6	p
op	14:75	0:0	6	->
water	14:77	0:0	6	i_pitch
op	14:85	0:0	6	+
water	14:87	0:0	6	4
op	14:88	0:0	6	*
water	14:89	0:0	6	x
op	14:90	0:0	6	]
switch	15:12	35:12	6	(opacity)
cond	15:20	15:20	7	opacity
water	15:20	0:0	8	opacity
stmts	16:12	35:12	7	
water	16:12	0:0	8	{
label	18:12	18:38	8	case VBI_TRANSPARENT_SPACE :
op	19:16	0:0	8	*
water	19:17	0:0	8	p_pixel
op	19:25	0:0	8	=
water	19:27	0:0	8	0
water	19:28	0:0	8	;
break	20:16	20:21	8	
label	25:12	25:27	8	case VBI_OPAQUE :
label	27:12	27:37	8	case VBI_SEMI_TRANSPARENT :
if	28:16	29:25	8	(b_opaque)
cond	28:20	28:20	9	b_opaque
water	28:20	0:0	10	b_opaque
stmts	29:20	29:25	9	
break	29:20	29:25	10	
label	31:12	31:37	8	case VBI_TRANSPARENT_FULL :
if	32:16	33:32	8	(( * p_pixel ) == ( 0 xff000000 | p_page -> color_map [ background ] ))
cond	32:20	32:78	9	( * p_pixel ) == ( 0 xff000000 | p_page -> color_map [ background ] )
water	32:20	0:0	10	(
op	32:21	0:0	10	*
water	32:22	0:0	10	p_pixel
water	32:29	0:0	10	)
op	32:31	0:0	10	==
water	32:34	0:0	10	(
water	32:35	0:0	10	0
water	32:36	0:0	10	xff000000
op	32:46	0:0	10	|
water	32:48	0:0	10	p_page
op	32:54	0:0	10	->
water	32:56	0:0	10	color_map
op	32:65	0:0	10	[
water	32:66	0:0	10	background
op	32:76	0:0	10	]
water	32:78	0:0	10	)
stmts	33:20	33:32	9	
op	33:20	0:0	10	*
water	33:21	0:0	10	p_pixel
op	33:29	0:0	10	=
water	33:31	0:0	10	0
water	33:32	0:0	10	;
break	34:16	34:21	8	
water	35:12	0:0	8	}
water	36:8	0:0	6	}
water	37:4	0:0	4	}
return	39:4	39:22	2	VLC_SUCCESS
water	39:11	0:0	3	VLC_SUCCESS
