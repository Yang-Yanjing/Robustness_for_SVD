func	2:0	102:0	0	sdpplin_t *	sdpplin_parse
params	2:24	0:0	1	
param	2:25	2:43	2	access_t *	p_access
param	2:45	2:55	2	char *	data
stmnts	0:0	101:13	1	
decl	4:2	4:24	2	sdpplin_t	*desc
decl	5:2	5:26	2	sdpplin_stream_t	*stream
decl	6:2	6:23	2	char	*buf
decl	7:2	7:27	2	char	*decoded
decl	8:2	8:27	2	int	handled
water	9:2	0:0	2	desc
op	9:7	0:0	2	=
call	9:9	9:38	2	calloc
arg	9:17	9:18	3	1
water	9:17	0:0	4	1
arg	9:20	9:38	3	sizeof(sdpplin_t)
op	9:20	0:0	4	sizeof
water	9:26	0:0	4	(
water	9:27	0:0	4	sdpplin_t
water	9:36	0:0	4	)
water	9:39	0:0	2	;
if	10:2	11:15	2	(! desc)
cond	10:6	10:7	3	! desc
op	10:6	0:0	4	!
water	10:7	0:0	4	desc
stmts	11:4	11:15	3	
return	11:4	11:15	4	NULL
water	11:11	0:0	5	NULL
water	12:2	0:0	2	buf
op	12:6	0:0	2	=
call	12:8	12:23	2	malloc
arg	12:16	12:23	3	BUFLEN
water	12:16	0:0	4	BUFLEN
water	12:24	0:0	2	;
if	13:2	17:2	2	(! buf)
cond	13:6	13:7	3	! buf
op	13:6	0:0	4	!
water	13:7	0:0	4	buf
stmts	14:2	17:2	3	
water	14:2	0:0	4	{
call	15:4	15:15	4	free
arg	15:10	15:15	5	desc
water	15:10	0:0	6	desc
water	15:16	0:0	4	;
return	16:4	16:15	4	NULL
water	16:11	0:0	5	NULL
water	17:2	0:0	4	}
water	18:2	0:0	2	decoded
op	18:10	0:0	2	=
call	18:12	18:27	2	malloc
arg	18:20	18:27	3	BUFLEN
water	18:20	0:0	4	BUFLEN
water	18:28	0:0	2	;
if	19:2	24:2	2	(! decoded)
cond	19:6	19:7	3	! decoded
op	19:6	0:0	4	!
water	19:7	0:0	4	decoded
stmts	20:2	24:2	3	
water	20:2	0:0	4	{
call	21:4	21:14	4	free
arg	21:10	21:14	5	buf
water	21:10	0:0	6	buf
water	21:15	0:0	4	;
call	22:4	22:15	4	free
arg	22:10	22:15	5	desc
water	22:10	0:0	6	desc
water	22:16	0:0	4	;
return	23:4	23:15	4	NULL
water	23:11	0:0	5	NULL
water	24:2	0:0	4	}
water	25:2	0:0	2	desc
op	25:6	0:0	2	->
water	25:8	0:0	2	stream
op	25:15	0:0	2	=
water	25:17	0:0	2	NULL
water	25:21	0:0	2	;
while	26:2	98:2	2	(data && * data)
cond	26:9	26:18	3	data && * data
water	26:9	0:0	4	data
op	26:14	0:0	4	&&
op	26:17	0:0	4	*
water	26:18	0:0	4	data
stmts	26:24	98:2	3	
water	26:24	0:0	4	{
water	27:4	0:0	4	handled
op	27:11	0:0	4	=
water	27:12	0:0	4	0
water	27:13	0:0	4	;
if	28:4	41:4	4	(filter (p_access ,data ,"m=" ,& buf ,BUFLEN ))
cond	28:8	28:49	5	filter (p_access ,data ,"m=" ,& buf ,BUFLEN )
call	28:8	28:49	6	filter
arg	28:15	28:23	7	p_access
water	28:15	0:0	8	p_access
arg	28:25	28:29	7	data
water	28:25	0:0	8	data
arg	28:31	28:35	7	"m="
water	28:31	0:0	8	"m="
arg	28:37	28:41	7	&buf
op	28:37	0:0	8	&
water	28:38	0:0	8	buf
arg	28:43	28:49	7	BUFLEN
water	28:43	0:0	8	BUFLEN
stmts	28:52	41:4	5	
water	28:52	0:0	6	{
if	29:8	33:8	6	(! desc -> stream)
cond	29:13	29:20	7	! desc -> stream
op	29:13	0:0	8	!
water	29:14	0:0	8	desc
op	29:18	0:0	8	->
water	29:20	0:0	8	stream
stmts	29:29	33:8	7	
water	29:29	0:0	8	{
call	30:12	30:98	8	msg_Warn
arg	30:21	30:29	9	p_access
water	30:21	0:0	10	p_access
arg	30:31	30:98	9	"sdpplin.c: stream identifier found before stream count, skipping."
water	30:31	0:0	10	"sdpplin.c: stream identifier found before stream count, skipping."
water	30:99	0:0	8	;
water	31:12	0:0	8	data
op	31:17	0:0	8	=
call	31:19	31:26	8	nl
arg	31:22	31:26	9	data
water	31:22	0:0	10	data
water	31:27	0:0	8	;
continue	32:12	32:20	8	
water	33:8	0:0	8	}
water	34:8	0:0	6	stream
op	34:14	0:0	6	=
call	34:15	34:51	6	sdpplin_parse_stream
arg	34:36	34:44	7	p_access
water	34:36	0:0	8	p_access
arg	34:46	34:51	7	&data
op	34:46	0:0	8	&
water	34:47	0:0	8	data
water	34:52	0:0	6	;
call	35:8	35:72	6	msg_Dbg
arg	35:16	35:24	7	p_access
water	35:16	0:0	8	p_access
arg	35:26	35:53	7	"got data for stream id %u"
water	35:26	0:0	8	"got data for stream id %u"
arg	35:55	35:72	7	stream->stream_id
water	35:55	0:0	8	stream
op	35:61	0:0	8	->
water	35:63	0:0	8	stream_id
water	35:73	0:0	6	;
if	36:8	37:119	6	(stream -> stream_id >= desc -> stream_count)
cond	36:13	36:40	7	stream -> stream_id >= desc -> stream_count
water	36:13	0:0	8	stream
op	36:19	0:0	8	->
water	36:21	0:0	8	stream_id
op	36:31	0:0	8	>=
water	36:34	0:0	8	desc
op	36:38	0:0	8	->
water	36:40	0:0	8	stream_count
stmts	37:12	37:119	7	
call	37:12	37:118	8	msg_Warn
arg	37:21	37:29	9	p_access
water	37:21	0:0	10	p_access
arg	37:31	37:79	9	"stream id %u is greater than stream count %u\n"
water	37:31	0:0	10	"stream id %u is greater than stream count %u\n"
arg	37:81	37:98	9	stream->stream_id
water	37:81	0:0	10	stream
op	37:87	0:0	10	->
water	37:89	0:0	10	stream_id
arg	37:100	37:118	9	desc->stream_count
water	37:100	0:0	10	desc
op	37:104	0:0	10	->
water	37:106	0:0	10	stream_count
water	37:119	0:0	8	;
else	38:8	39:50	6
stmts	39:12	39:50	7	
water	39:12	0:0	8	desc
op	39:16	0:0	8	->
water	39:18	0:0	8	stream
op	39:24	0:0	8	[
water	39:25	0:0	8	stream
op	39:31	0:0	8	->
water	39:33	0:0	8	stream_id
op	39:42	0:0	8	]
op	39:43	0:0	8	=
water	39:44	0:0	8	stream
water	39:50	0:0	8	;
continue	40:8	40:16	6	
water	41:4	0:0	6	}
if	42:4	48:4	4	(filter (p_access ,data ,"a=Title:buffer;" ,& buf ,BUFLEN ))
cond	42:7	42:59	5	filter (p_access ,data ,"a=Title:buffer;" ,& buf ,BUFLEN )
call	42:7	42:59	6	filter
arg	42:14	42:22	7	p_access
water	42:14	0:0	8	p_access
arg	42:24	42:28	7	data
water	42:24	0:0	8	data
arg	42:29	42:46	7	"a=Title:buffer;"
water	42:29	0:0	8	"a=Title:buffer;"
arg	42:47	42:51	7	&buf
op	42:47	0:0	8	&
water	42:48	0:0	8	buf
arg	42:53	42:59	7	BUFLEN
water	42:53	0:0	8	BUFLEN
stmts	42:62	48:4	5	
water	42:62	0:0	6	{
water	43:6	0:0	6	desc
op	43:10	0:0	6	->
water	43:12	0:0	6	title
op	43:17	0:0	6	=
call	43:18	43:36	6	vlc_b64_decode
arg	43:33	43:36	7	buf
water	43:33	0:0	8	buf
water	43:37	0:0	6	;
if	44:6	47:6	6	(desc -> title)
cond	44:9	44:15	7	desc -> title
water	44:9	0:0	8	desc
op	44:13	0:0	8	->
water	44:15	0:0	8	title
stmts	44:22	47:6	7	
water	44:22	0:0	8	{
water	45:8	0:0	8	handled
op	45:15	0:0	8	=
water	45:16	0:0	8	1
water	45:17	0:0	8	;
water	46:8	0:0	8	data
op	46:12	0:0	8	=
call	46:13	46:20	8	nl
arg	46:16	46:20	9	data
water	46:16	0:0	10	data
water	46:21	0:0	8	;
water	47:6	0:0	8	}
water	48:4	0:0	6	}
if	49:4	55:4	4	(filter (p_access ,data ,"a=Author:buffer;" ,& buf ,BUFLEN ))
cond	49:7	49:60	5	filter (p_access ,data ,"a=Author:buffer;" ,& buf ,BUFLEN )
call	49:7	49:60	6	filter
arg	49:14	49:22	7	p_access
water	49:14	0:0	8	p_access
arg	49:24	49:28	7	data
water	49:24	0:0	8	data
arg	49:29	49:47	7	"a=Author:buffer;"
water	49:29	0:0	8	"a=Author:buffer;"
arg	49:48	49:52	7	&buf
op	49:48	0:0	8	&
water	49:49	0:0	8	buf
arg	49:54	49:60	7	BUFLEN
water	49:54	0:0	8	BUFLEN
stmts	49:63	55:4	5	
water	49:63	0:0	6	{
water	50:6	0:0	6	desc
op	50:10	0:0	6	->
water	50:12	0:0	6	author
op	50:18	0:0	6	=
call	50:19	50:37	6	vlc_b64_decode
arg	50:34	50:37	7	buf
water	50:34	0:0	8	buf
water	50:38	0:0	6	;
if	51:6	54:6	6	(desc -> author)
cond	51:9	51:15	7	desc -> author
water	51:9	0:0	8	desc
op	51:13	0:0	8	->
water	51:15	0:0	8	author
stmts	51:23	54:6	7	
water	51:23	0:0	8	{
water	52:8	0:0	8	handled
op	52:15	0:0	8	=
water	52:16	0:0	8	1
water	52:17	0:0	8	;
water	53:8	0:0	8	data
op	53:12	0:0	8	=
call	53:13	53:20	8	nl
arg	53:16	53:20	9	data
water	53:16	0:0	10	data
water	53:21	0:0	8	;
water	54:6	0:0	8	}
water	55:4	0:0	6	}
if	56:4	62:4	4	(filter (p_access ,data ,"a=Copyright:buffer;" ,& buf ,BUFLEN ))
cond	56:7	56:63	5	filter (p_access ,data ,"a=Copyright:buffer;" ,& buf ,BUFLEN )
call	56:7	56:63	6	filter
arg	56:14	56:22	7	p_access
water	56:14	0:0	8	p_access
arg	56:24	56:28	7	data
water	56:24	0:0	8	data
arg	56:29	56:50	7	"a=Copyright:buffer;"
water	56:29	0:0	8	"a=Copyright:buffer;"
arg	56:51	56:55	7	&buf
op	56:51	0:0	8	&
water	56:52	0:0	8	buf
arg	56:57	56:63	7	BUFLEN
water	56:57	0:0	8	BUFLEN
stmts	56:66	62:4	5	
water	56:66	0:0	6	{
water	57:6	0:0	6	desc
op	57:10	0:0	6	->
water	57:12	0:0	6	copyright
op	57:21	0:0	6	=
call	57:22	57:40	6	vlc_b64_decode
arg	57:37	57:40	7	buf
water	57:37	0:0	8	buf
water	57:41	0:0	6	;
if	58:6	61:6	6	(desc -> copyright)
cond	58:9	58:15	7	desc -> copyright
water	58:9	0:0	8	desc
op	58:13	0:0	8	->
water	58:15	0:0	8	copyright
stmts	58:26	61:6	7	
water	58:26	0:0	8	{
water	59:8	0:0	8	handled
op	59:15	0:0	8	=
water	59:16	0:0	8	1
water	59:17	0:0	8	;
water	60:8	0:0	8	data
op	60:12	0:0	8	=
call	60:13	60:20	8	nl
arg	60:16	60:20	9	data
water	60:16	0:0	10	data
water	60:21	0:0	8	;
water	61:6	0:0	8	}
water	62:4	0:0	6	}
if	63:4	69:4	4	(filter (p_access ,data ,"a=Abstract:buffer;" ,& buf ,BUFLEN ))
cond	63:7	63:62	5	filter (p_access ,data ,"a=Abstract:buffer;" ,& buf ,BUFLEN )
call	63:7	63:62	6	filter
arg	63:14	63:22	7	p_access
water	63:14	0:0	8	p_access
arg	63:24	63:28	7	data
water	63:24	0:0	8	data
arg	63:29	63:49	7	"a=Abstract:buffer;"
water	63:29	0:0	8	"a=Abstract:buffer;"
arg	63:50	63:54	7	&buf
op	63:50	0:0	8	&
water	63:51	0:0	8	buf
arg	63:56	63:62	7	BUFLEN
water	63:56	0:0	8	BUFLEN
stmts	63:65	69:4	5	
water	63:65	0:0	6	{
water	64:6	0:0	6	desc
op	64:10	0:0	6	->
water	64:12	0:0	6	abstract
op	64:20	0:0	6	=
call	64:21	64:39	6	vlc_b64_decode
arg	64:36	64:39	7	buf
water	64:36	0:0	8	buf
water	64:40	0:0	6	;
if	65:6	68:6	6	(desc -> abstract)
cond	65:9	65:15	7	desc -> abstract
water	65:9	0:0	8	desc
op	65:13	0:0	8	->
water	65:15	0:0	8	abstract
stmts	65:25	68:6	7	
water	65:25	0:0	8	{
water	66:8	0:0	8	handled
op	66:15	0:0	8	=
water	66:16	0:0	8	1
water	66:17	0:0	8	;
water	67:8	0:0	8	data
op	67:12	0:0	8	=
call	67:13	67:20	8	nl
arg	67:16	67:20	9	data
water	67:16	0:0	10	data
water	67:21	0:0	8	;
water	68:6	0:0	8	}
water	69:4	0:0	6	}
if	70:4	82:4	4	(filter (p_access ,data ,"a=StreamCount:integer;" ,& buf ,BUFLEN ))
cond	70:7	70:66	5	filter (p_access ,data ,"a=StreamCount:integer;" ,& buf ,BUFLEN )
call	70:7	70:66	6	filter
arg	70:14	70:22	7	p_access
water	70:14	0:0	8	p_access
arg	70:24	70:28	7	data
water	70:24	0:0	8	data
arg	70:29	70:53	7	"a=StreamCount:integer;"
water	70:29	0:0	8	"a=StreamCount:integer;"
arg	70:54	70:58	7	&buf
op	70:54	0:0	8	&
water	70:55	0:0	8	buf
arg	70:60	70:66	7	BUFLEN
water	70:60	0:0	8	BUFLEN
stmts	70:69	82:4	5	
water	70:69	0:0	6	{
decl	74:8	74:50	6	unsigned long	tmp
op	74:26	0:0	6	=
call	74:28	74:49	7	strtoul
arg	74:36	74:39	8	buf
water	74:36	0:0	9	buf
arg	74:41	74:45	8	NULL
water	74:41	0:0	9	NULL
arg	74:47	74:49	8	10
water	74:47	0:0	9	10
if	75:8	76:71	6	(tmp > UINT16_MAX)
cond	75:13	75:19	7	tmp > UINT16_MAX
water	75:13	0:0	8	tmp
op	75:17	0:0	8	>
water	75:19	0:0	8	UINT16_MAX
stmts	76:12	76:71	7	
call	76:12	76:70	8	msg_Warn
arg	76:21	76:29	9	p_access
water	76:21	0:0	10	p_access
arg	76:31	76:65	9	"stream count out of bound: %lu\n"
water	76:31	0:0	10	"stream count out of bound: %lu\n"
arg	76:67	76:70	9	tmp
water	76:67	0:0	10	tmp
water	76:71	0:0	8	;
else	77:8	78:36	6
stmts	78:12	78:36	7	
water	78:12	0:0	8	desc
op	78:16	0:0	8	->
water	78:18	0:0	8	stream_count
op	78:31	0:0	8	=
water	78:33	0:0	8	tmp
water	78:36	0:0	8	;
water	79:8	0:0	6	desc
op	79:12	0:0	6	->
water	79:14	0:0	6	stream
op	79:21	0:0	6	=
call	79:23	79:74	6	malloc
arg	79:30	79:74	7	sizeof(sdpplin_stream_t*)*desc->stream_count
op	79:30	0:0	8	sizeof
water	79:36	0:0	8	(
water	79:37	0:0	8	sdpplin_stream_t
op	79:53	0:0	8	*
water	79:54	0:0	8	)
op	79:55	0:0	8	*
water	79:56	0:0	8	desc
op	79:60	0:0	8	->
water	79:62	0:0	8	stream_count
water	79:75	0:0	6	;
water	80:8	0:0	6	handled
op	80:15	0:0	6	=
water	80:16	0:0	6	1
water	80:17	0:0	6	;
water	81:8	0:0	6	data
op	81:12	0:0	6	=
call	81:13	81:20	6	nl
arg	81:16	81:20	7	data
water	81:16	0:0	8	data
water	81:21	0:0	6	;
water	82:4	0:0	6	}
if	83:4	87:4	4	(filter (p_access ,data ,"a=Flags:integer;" ,& buf ,BUFLEN ))
cond	83:7	83:60	5	filter (p_access ,data ,"a=Flags:integer;" ,& buf ,BUFLEN )
call	83:7	83:60	6	filter
arg	83:14	83:22	7	p_access
water	83:14	0:0	8	p_access
arg	83:24	83:28	7	data
water	83:24	0:0	8	data
arg	83:29	83:47	7	"a=Flags:integer;"
water	83:29	0:0	8	"a=Flags:integer;"
arg	83:48	83:52	7	&buf
op	83:48	0:0	8	&
water	83:49	0:0	8	buf
arg	83:54	83:60	7	BUFLEN
water	83:54	0:0	8	BUFLEN
stmts	83:63	87:4	5	
water	83:63	0:0	6	{
water	84:6	0:0	6	desc
op	84:10	0:0	6	->
water	84:12	0:0	6	flags
op	84:17	0:0	6	=
call	84:18	84:26	6	atoi
arg	84:23	84:26	7	buf
water	84:23	0:0	8	buf
water	84:27	0:0	6	;
water	85:6	0:0	6	handled
op	85:13	0:0	6	=
water	85:14	0:0	6	1
water	85:15	0:0	6	;
water	86:6	0:0	6	data
op	86:10	0:0	6	=
call	86:11	86:18	6	nl
arg	86:14	86:18	7	data
water	86:14	0:0	8	data
water	86:19	0:0	6	;
water	87:4	0:0	6	}
if	88:4	97:4	4	(! handled)
cond	88:7	88:8	5	! handled
op	88:7	0:0	6	!
water	88:8	0:0	6	handled
stmts	88:17	97:4	5	
water	88:17	0:0	6	{
decl	90:6	90:33	6	int	len
op	90:14	0:0	6	=
call	90:16	90:32	7	line_length
arg	90:28	90:32	8	data
water	90:28	0:0	9	data
water	91:6	0:0	6	;
water	91:10	0:0	6	len
op	91:14	0:0	6	=
water	91:16	0:0	6	len
op	91:20	0:0	6	<
water	91:22	0:0	6	BUFLEN
water	91:29	0:0	6	?
water	91:31	0:0	6	len
water	91:35	0:0	6	:
water	91:37	0:0	6	BUFLEN
op	91:43	0:0	6	-
water	91:44	0:0	6	1
water	91:45	0:0	6	;
water	92:6	0:0	6	buf
op	92:9	0:0	6	[
water	92:10	0:0	6	len
op	92:13	0:0	6	]
op	92:15	0:0	6	=
water	92:17	0:0	6	'\0'
water	92:21	0:0	6	;
call	93:6	93:29	6	strncpy
arg	93:15	93:18	7	buf
water	93:15	0:0	8	buf
arg	93:20	93:24	7	data
water	93:20	0:0	8	data
arg	93:26	93:29	7	len
water	93:26	0:0	8	len
water	93:30	0:0	6	;
call	94:6	94:67	6	msg_Warn
arg	94:15	94:23	7	p_access
water	94:15	0:0	8	p_access
arg	94:25	94:62	7	"libreal: sdpplin: not handled: '%s'"
water	94:25	0:0	8	"libreal: sdpplin: not handled: '%s'"
arg	94:64	94:67	7	buf
water	94:64	0:0	8	buf
water	94:68	0:0	6	;
water	96:6	0:0	6	data
op	96:10	0:0	6	=
call	96:11	96:18	6	nl
arg	96:14	96:18	7	data
water	96:14	0:0	8	data
water	96:19	0:0	6	;
water	97:4	0:0	6	}
water	98:2	0:0	4	}
call	99:2	99:16	2	free
arg	99:8	99:16	3	decoded
water	99:8	0:0	4	decoded
water	99:17	0:0	2	;
call	100:2	100:12	2	free
arg	100:8	100:12	3	buf
water	100:8	0:0	4	buf
water	100:13	0:0	2	;
return	101:2	101:13	2	desc
water	101:9	0:0	3	desc
