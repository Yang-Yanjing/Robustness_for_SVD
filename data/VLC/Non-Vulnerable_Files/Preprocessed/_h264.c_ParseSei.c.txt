func	2:0	73:0	0	static void	ParseSei
params	2:20	0:0	1	
param	2:22	2:38	2	decoder_t *	p_dec
param	2:40	2:56	2	block_t *	p_frag
stmnts	0:0	72:18	1	
decl	4:4	4:39	2	decoder_sys_t	*p_sys
op	4:25	0:0	2	=
water	4:27	0:0	2	p_dec
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
decl	5:4	5:19	2	uint8_t	*pb_dec
decl	6:4	6:13	2	int	i_dec
call	8:4	8:82	2	CreateDecodedNAL
arg	8:22	8:29	3	&pb_dec
op	8:22	0:0	4	&
water	8:23	0:0	4	pb_dec
arg	8:31	8:37	3	&i_dec
op	8:31	0:0	4	&
water	8:32	0:0	4	i_dec
arg	8:39	8:59	3	&p_frag->p_buffer[5]
op	8:39	0:0	4	&
water	8:40	0:0	4	p_frag
op	8:46	0:0	4	->
water	8:48	0:0	4	p_buffer
op	8:56	0:0	4	[
water	8:57	0:0	4	5
op	8:58	0:0	4	]
arg	8:61	8:82	3	p_frag->i_buffer-5
water	8:61	0:0	4	p_frag
op	8:67	0:0	4	->
water	8:69	0:0	4	i_buffer
op	8:78	0:0	4	-
water	8:80	0:0	4	5
water	8:83	0:0	2	;
if	9:4	10:14	2	(! pb_dec)
cond	9:8	9:9	3	! pb_dec
op	9:8	0:0	4	!
water	9:9	0:0	4	pb_dec
stmts	10:8	10:14	3	
return	10:8	10:14	4	
for	12:4	71:4	2	( int i_used = 0 ;i_used + 1 < i_dec;)
forinit	0:0	12:23	3	 int i_used = 0 ;
decl	12:9	12:23	4	int	i_used
op	12:20	0:0	4	=
water	12:22	0:0	4	0
cond	12:25	12:36	3	i_used + 1 < i_dec
water	12:25	0:0	4	i_used
op	12:31	0:0	4	+
water	12:32	0:0	4	1
op	12:34	0:0	4	<
water	12:36	0:0	4	i_dec
forexpr	0:0	0:0	3	
stmts	13:4	71:4	3	
water	13:4	0:0	4	{
decl	15:8	15:22	4	int	i_type
op	15:19	0:0	4	=
water	15:21	0:0	4	0
while	16:8	22:8	4	(i_used + 1 < i_dec)
cond	16:15	16:26	5	i_used + 1 < i_dec
water	16:15	0:0	6	i_used
op	16:21	0:0	6	+
water	16:22	0:0	6	1
op	16:24	0:0	6	<
water	16:26	0:0	6	i_dec
stmts	17:8	22:8	5	
water	17:8	0:0	6	{
decl	18:12	18:47	6	const int	i_byte
op	18:29	0:0	6	=
water	18:31	0:0	6	pb_dec
op	18:37	0:0	6	[
water	18:38	0:0	6	i_used
op	18:44	0:0	6	++
op	18:46	0:0	6	]
water	19:12	0:0	6	i_type
op	19:19	0:0	6	+=
water	19:22	0:0	6	i_byte
water	19:28	0:0	6	;
if	20:12	21:21	6	(i_byte != 0 xff)
cond	20:16	20:27	7	i_byte != 0 xff
water	20:16	0:0	8	i_byte
op	20:23	0:0	8	!=
water	20:26	0:0	8	0
water	20:27	0:0	8	xff
stmts	21:16	21:21	7	
break	21:16	21:21	8	
water	22:8	0:0	6	}
decl	24:8	24:22	4	int	i_size
op	24:19	0:0	4	=
water	24:21	0:0	4	0
while	25:8	31:8	4	(i_used + 1 < i_dec)
cond	25:15	25:26	5	i_used + 1 < i_dec
water	25:15	0:0	6	i_used
op	25:21	0:0	6	+
water	25:22	0:0	6	1
op	25:24	0:0	6	<
water	25:26	0:0	6	i_dec
stmts	26:8	31:8	5	
water	26:8	0:0	6	{
decl	27:12	27:47	6	const int	i_byte
op	27:29	0:0	6	=
water	27:31	0:0	6	pb_dec
op	27:37	0:0	6	[
water	27:38	0:0	6	i_used
op	27:44	0:0	6	++
op	27:46	0:0	6	]
water	28:12	0:0	6	i_size
op	28:19	0:0	6	+=
water	28:22	0:0	6	i_byte
water	28:28	0:0	6	;
if	29:12	30:21	6	(i_byte != 0 xff)
cond	29:16	29:27	7	i_byte != 0 xff
water	29:16	0:0	8	i_byte
op	29:23	0:0	8	!=
water	29:26	0:0	8	0
water	29:27	0:0	8	xff
stmts	30:16	30:21	7	
break	30:16	30:21	8	
water	31:8	0:0	6	}
if	33:8	34:17	4	(i_used + i_size + 1 > i_dec)
cond	33:12	33:34	5	i_used + i_size + 1 > i_dec
water	33:12	0:0	6	i_used
op	33:19	0:0	6	+
water	33:21	0:0	6	i_size
op	33:28	0:0	6	+
water	33:30	0:0	6	1
op	33:32	0:0	6	>
water	33:34	0:0	6	i_dec
stmts	34:12	34:17	5	
break	34:12	34:17	6	
if	36:8	51:8	4	(i_type == 4)
cond	36:12	36:22	5	i_type == 4
water	36:12	0:0	6	i_type
op	36:19	0:0	6	==
water	36:22	0:0	6	4
stmts	37:8	51:8	5	
water	37:8	0:0	6	{
water	38:12	0:0	6	static
water	38:19	0:0	6	const
water	38:25	0:0	6	uint8_t
water	38:33	0:0	6	p_dvb1_data_start_code
op	38:55	0:0	6	[
op	38:56	0:0	6	]
op	38:58	0:0	6	=
water	38:60	0:0	6	{
water	39:16	0:0	6	0
water	39:17	0:0	6	xb5
water	39:20	0:0	6	,
water	40:16	0:0	6	0
water	40:17	0:0	6	x00
water	40:20	0:0	6	,
water	40:22	0:0	6	0
water	40:23	0:0	6	x31
water	40:26	0:0	6	,
water	41:16	0:0	6	0
water	41:17	0:0	6	x47
water	41:20	0:0	6	,
water	41:22	0:0	6	0
water	41:23	0:0	6	x41
water	41:26	0:0	6	,
water	41:28	0:0	6	0
water	41:29	0:0	6	x39
water	41:32	0:0	6	,
water	41:34	0:0	6	0
water	41:35	0:0	6	x34
water	42:12	0:0	6	}
water	42:13	0:0	6	;
decl	43:12	43:41	6	const int	i_t35
op	43:33	0:0	6	=
water	43:35	0:0	6	i_size
decl	44:12	44:50	6	const uint8_t	*p_t35
op	44:33	0:0	6	=
op	44:35	0:0	6	&
water	44:36	0:0	6	pb_dec
op	44:42	0:0	6	[
water	44:43	0:0	6	i_used
op	44:49	0:0	6	]
if	46:12	50:12	6	(i_t35 >= 5 && !memcmp (p_t35 ,p_dvb1_data_start_code ,sizeof ( p_dvb1_data_start_code ) ))
cond	46:16	47:87	7	i_t35 >= 5 && !memcmp (p_t35 ,p_dvb1_data_start_code ,sizeof ( p_dvb1_data_start_code ) )
water	46:16	0:0	8	i_t35
op	46:22	0:0	8	>=
water	46:25	0:0	8	5
op	46:27	0:0	8	&&
op	47:16	0:0	8	!
call	47:17	47:87	8	memcmp
arg	47:25	47:30	9	p_t35
water	47:25	0:0	10	p_t35
arg	47:32	47:54	9	p_dvb1_data_start_code
water	47:32	0:0	10	p_dvb1_data_start_code
arg	47:56	47:87	9	sizeof(p_dvb1_data_start_code)
op	47:56	0:0	10	sizeof
water	47:62	0:0	10	(
water	47:63	0:0	10	p_dvb1_data_start_code
water	47:85	0:0	10	)
stmts	48:12	50:12	7	
water	48:12	0:0	8	{
call	49:16	49:72	8	cc_Extract
arg	49:28	49:43	9	&p_sys->cc_next
op	49:28	0:0	10	&
water	49:29	0:0	10	p_sys
op	49:34	0:0	10	->
water	49:36	0:0	10	cc_next
arg	49:45	49:49	9	true
water	49:45	0:0	10	true
arg	49:51	49:60	9	&p_t35[3]
op	49:51	0:0	10	&
water	49:52	0:0	10	p_t35
op	49:57	0:0	10	[
water	49:58	0:0	10	3
op	49:59	0:0	10	]
arg	49:62	49:72	9	i_t35-3
water	49:62	0:0	10	i_t35
op	49:68	0:0	10	-
water	49:70	0:0	10	3
water	49:73	0:0	8	;
water	50:12	0:0	8	}
water	51:8	0:0	6	}
if	53:8	69:8	4	(i_type == 6)
cond	53:12	53:22	5	i_type == 6
water	53:12	0:0	6	i_type
op	53:19	0:0	6	==
water	53:22	0:0	6	6
stmts	54:8	69:8	5	
water	54:8	0:0	6	{
decl	55:12	55:18	6	bs_t	s
decl	56:12	56:41	6	const int	i_rec
op	56:33	0:0	6	=
water	56:35	0:0	6	i_size
decl	57:12	57:50	6	const uint8_t	*p_rec
op	57:33	0:0	6	=
op	57:35	0:0	6	&
water	57:36	0:0	6	pb_dec
op	57:42	0:0	6	[
water	57:43	0:0	6	i_used
op	57:49	0:0	6	]
call	58:12	58:38	6	bs_init
arg	58:21	58:23	7	&s
op	58:21	0:0	8	&
water	58:22	0:0	8	s
arg	58:25	58:30	7	p_rec
water	58:25	0:0	8	p_rec
arg	58:32	58:38	7	i_rec
water	58:32	0:0	8	i_rec
water	58:39	0:0	6	;
decl	59:12	59:52	6	int	i_recovery_frames
op	59:34	0:0	6	=
call	59:36	59:51	7	bs_read_ue
arg	59:48	59:51	8	&s
op	59:48	0:0	9	&
water	59:49	0:0	9	s
if	63:12	68:12	6	(! p_sys -> b_header)
cond	63:16	63:24	7	! p_sys -> b_header
op	63:16	0:0	8	!
water	63:17	0:0	8	p_sys
op	63:22	0:0	8	->
water	63:24	0:0	8	b_header
stmts	64:12	68:12	7	
water	64:12	0:0	8	{
call	65:16	65:97	8	msg_Dbg
arg	65:25	65:30	9	p_dec
water	65:25	0:0	10	p_dec
arg	65:32	65:77	9	"Seen SEI recovery point, %d recovery frames"
water	65:32	0:0	10	"Seen SEI recovery point, %d recovery frames"
arg	65:79	65:97	9	i_recovery_frames
water	65:79	0:0	10	i_recovery_frames
water	65:98	0:0	8	;
if	66:16	67:64	8	(p_sys -> i_recovery_frames == - 1 || i_recovery_frames < p_sys -> i_recovery_frames)
cond	66:21	66:82	9	p_sys -> i_recovery_frames == - 1 || i_recovery_frames < p_sys -> i_recovery_frames
water	66:21	0:0	10	p_sys
op	66:26	0:0	10	->
water	66:28	0:0	10	i_recovery_frames
op	66:46	0:0	10	==
op	66:49	0:0	10	-
water	66:50	0:0	10	1
op	66:52	0:0	10	||
water	66:55	0:0	10	i_recovery_frames
op	66:73	0:0	10	<
water	66:75	0:0	10	p_sys
op	66:80	0:0	10	->
water	66:82	0:0	10	i_recovery_frames
stmts	67:20	67:64	9	
water	67:20	0:0	10	p_sys
op	67:25	0:0	10	->
water	67:27	0:0	10	i_recovery_frames
op	67:45	0:0	10	=
water	67:47	0:0	10	i_recovery_frames
water	67:64	0:0	10	;
water	68:12	0:0	8	}
water	69:8	0:0	6	}
water	70:8	0:0	4	i_used
op	70:15	0:0	4	+=
water	70:18	0:0	4	i_size
water	70:24	0:0	4	;
water	71:4	0:0	4	}
call	72:4	72:17	2	free
arg	72:10	72:17	3	pb_dec
water	72:10	0:0	4	pb_dec
water	72:18	0:0	2	;
