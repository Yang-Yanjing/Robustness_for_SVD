func	2:0	182:0	0	static void *	Run
params	2:16	0:0	1	
param	2:17	2:27	2	void *	data
stmnts	0:0	181:15	1	
decl	4:4	4:41	2	intf_thread_t	*p_intf
op	4:35	0:0	2	=
water	4:37	0:0	2	data
decl	5:4	5:42	2	uint8_t	p_buffer[1024]
decl	6:4	6:51	2	int	canc
op	6:33	0:0	2	=
call	6:35	6:50	3	vlc_savecancel
decl	7:4	7:48	2	bool	b_handshaked
op	7:41	0:0	2	=
water	7:43	0:0	2	false
decl	9:4	9:46	2	mtime_t	next_exchange
op	9:42	0:0	2	=
op	9:44	0:0	2	-
water	9:45	0:0	2	1
decl	10:4	10:42	2	unsigned int	i_interval
op	10:39	0:0	2	=
water	10:41	0:0	2	0
decl	11:4	11:37	2	intf_sys_t	*p_sys
op	11:22	0:0	2	=
water	11:24	0:0	2	p_intf
op	11:30	0:0	2	->
water	11:32	0:0	2	p_sys
for	13:4	178:4	2	(;;)
forinit	13:9	13:9	3	;
water	13:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	14:4	178:4	3	
water	14:4	0:0	4	{
call	15:8	15:30	4	vlc_restorecancel
arg	15:26	15:30	5	canc
water	15:26	0:0	6	canc
water	15:31	0:0	4	;
call	16:8	16:35	4	vlc_mutex_lock
arg	16:23	16:35	5	&p_sys->lock
op	16:23	0:0	6	&
water	16:24	0:0	6	p_sys
op	16:29	0:0	6	->
water	16:31	0:0	6	lock
water	16:36	0:0	4	;
call	17:8	17:39	4	mutex_cleanup_push
arg	17:27	17:39	5	&p_sys->lock
op	17:27	0:0	6	&
water	17:28	0:0	6	p_sys
op	17:33	0:0	6	->
water	17:35	0:0	6	lock
water	17:40	0:0	4	;
do	18:8	19:53	4	(mdate ( ) < next_exchange)
cond	20:15	20:25	5	mdate ( ) < next_exchange
call	20:15	20:21	6	mdate
op	20:23	0:0	6	<
water	20:25	0:0	6	next_exchange
stmts	19:12	19:53	5	
call	19:12	19:52	6	vlc_cond_wait
arg	19:26	19:38	7	&p_sys->wait
op	19:26	0:0	8	&
water	19:27	0:0	8	p_sys
op	19:32	0:0	8	->
water	19:34	0:0	8	wait
arg	19:40	19:52	7	&p_sys->lock
op	19:40	0:0	8	&
water	19:41	0:0	8	p_sys
op	19:46	0:0	8	->
water	19:48	0:0	8	lock
water	19:53	0:0	6	;
water	20:39	0:0	4	;
call	21:8	21:24	4	vlc_cleanup_run
water	21:25	0:0	4	;
water	22:8	0:0	4	canc
op	22:13	0:0	4	=
call	22:15	22:30	4	vlc_savecancel
water	22:31	0:0	4	;
if	24:8	57:8	4	(! b_handshaked)
cond	24:12	24:13	5	! b_handshaked
op	24:12	0:0	6	!
water	24:13	0:0	6	b_handshaked
stmts	25:8	57:8	5	
water	25:8	0:0	6	{
call	26:12	26:58	6	msg_Dbg
arg	26:20	26:26	7	p_intf
water	26:20	0:0	8	p_intf
arg	26:28	26:58	7	"Handshaking with last.fm ..."
water	26:28	0:0	8	"Handshaking with last.fm ..."
water	26:59	0:0	6	;
switch	27:12	53:12	6	(Handshake (p_intf ))
cond	27:19	27:35	7	Handshake (p_intf )
call	27:19	27:35	8	Handshake
arg	27:29	27:35	9	p_intf
water	27:29	0:0	10	p_intf
stmts	28:12	53:12	7	
water	28:12	0:0	8	{
label	29:16	29:31	8	case VLC_ENOMEM :
goto	30:20	30:28	8	out
water	30:25	0:0	9	out
label	31:16	31:31	8	case VLC_ENOVAR :
call	33:20	37:76	8	dialog_Fatal
arg	33:33	33:39	9	p_intf
water	33:33	0:0	10	p_intf
arg	34:24	34:53	9	_("Last.fm username not set")
call	34:24	34:52	10	_
arg	34:26	34:52	11	"Last.fm username not set"
water	34:26	0:0	12	"Last.fm username not set"
arg	35:24	35:28	9	"%s"
water	35:24	0:0	10	"%s"
arg	35:30	37:76	9	_("Please set a username or disable the ""audioscrobbler plugin, and restart VLC.\n""Visit http://www.last.fm/join/ to get an account.")
call	35:30	37:75	10	_
arg	35:32	37:75	11	"Please set a username or disable the ""audioscrobbler plugin, and restart VLC.\n""Visit http://www.last.fm/join/ to get an account."
water	35:32	0:0	12	"Please set a username or disable the "
water	36:24	0:0	12	"audioscrobbler plugin, and restart VLC.\n"
water	37:24	0:0	12	"Visit http://www.last.fm/join/ to get an account."
water	37:77	0:0	8	;
goto	38:20	38:28	8	out
water	38:25	0:0	9	out
label	39:16	39:32	8	case VLC_SUCCESS :
call	40:20	40:61	8	msg_Dbg
arg	40:28	40:34	9	p_intf
water	40:28	0:0	10	p_intf
arg	40:36	40:61	9	"Handshake successful :)"
water	40:36	0:0	10	"Handshake successful :)"
water	40:62	0:0	8	;
water	41:20	0:0	8	b_handshaked
op	41:33	0:0	8	=
water	41:35	0:0	8	true
water	41:39	0:0	8	;
water	42:20	0:0	8	i_interval
op	42:31	0:0	8	=
water	42:33	0:0	8	0
water	42:34	0:0	8	;
water	43:20	0:0	8	next_exchange
op	43:34	0:0	8	=
call	43:36	43:42	8	mdate
water	43:43	0:0	8	;
break	44:20	44:25	8	
label	45:16	45:46	8	case VLC_AUDIOSCROBBLER_EFATAL :
call	46:20	46:49	8	msg_Warn
arg	46:29	46:35	9	p_intf
water	46:29	0:0	10	p_intf
arg	46:37	46:49	9	"Exiting..."
water	46:37	0:0	10	"Exiting..."
water	46:50	0:0	8	;
goto	47:20	47:28	8	out
water	47:25	0:0	9	out
label	48:16	48:33	8	case VLC_EGENERIC :
label	49:16	49:23	8	default :
call	51:20	51:62	8	HandleInterval
arg	51:35	51:49	9	&next_exchange
op	51:35	0:0	10	&
water	51:36	0:0	10	next_exchange
arg	51:51	51:62	9	&i_interval
op	51:51	0:0	10	&
water	51:52	0:0	10	i_interval
water	51:63	0:0	8	;
break	52:20	52:25	8	
water	53:12	0:0	8	}
if	55:12	56:24	6	(! b_handshaked)
cond	55:16	55:17	7	! b_handshaked
op	55:16	0:0	8	!
water	55:17	0:0	8	b_handshaked
stmts	56:16	56:24	7	
continue	56:16	56:24	8	
water	57:8	0:0	6	}
call	58:8	58:54	4	msg_Dbg
arg	58:16	58:22	5	p_intf
water	58:16	0:0	6	p_intf
arg	58:24	58:54	5	"Going to submit some data..."
water	58:24	0:0	6	"Going to submit some data..."
water	58:55	0:0	4	;
decl	59:8	59:24	4	char	*psz_submit
if	60:8	61:17	4	(asprintf (& psz_submit ,"s=%s" ,p_sys -> psz_auth_token ) == - 1)
cond	60:12	60:69	5	asprintf (& psz_submit ,"s=%s" ,p_sys -> psz_auth_token ) == - 1
call	60:12	60:63	6	asprintf
arg	60:21	60:32	7	&psz_submit
op	60:21	0:0	8	&
water	60:22	0:0	8	psz_submit
arg	60:34	60:40	7	"s=%s"
water	60:34	0:0	8	"s=%s"
arg	60:42	60:63	7	p_sys->psz_auth_token
water	60:42	0:0	8	p_sys
op	60:47	0:0	8	->
water	60:49	0:0	8	psz_auth_token
op	60:65	0:0	6	==
op	60:68	0:0	6	-
water	60:69	0:0	6	1
stmts	61:12	61:17	5	
break	61:12	61:17	6	
call	63:8	63:35	4	vlc_mutex_lock
arg	63:23	63:35	5	&p_sys->lock
op	63:23	0:0	6	&
water	63:24	0:0	6	p_sys
op	63:29	0:0	6	->
water	63:31	0:0	6	lock
water	63:36	0:0	4	;
decl	64:8	64:37	4	audioscrobbler_song_t	*p_song
for	65:8	104:8	4	( int i_song = 0 ;i_song < p_sys -> i_songs;i_song ++)
forinit	0:0	65:28	5	 int i_song = 0 ;
decl	65:13	65:28	6	int	i_song
op	65:24	0:0	6	=
water	65:26	0:0	6	0
cond	65:30	65:46	5	i_song < p_sys -> i_songs
water	65:30	0:0	6	i_song
op	65:37	0:0	6	<
water	65:39	0:0	6	p_sys
op	65:44	0:0	6	->
water	65:46	0:0	6	i_songs
forexpr	65:56	65:62	5	i_song ++
water	65:56	0:0	6	i_song
op	65:62	0:0	6	++
stmts	66:8	104:8	5	
water	66:8	0:0	6	{
decl	67:12	67:50	6	char	*psz_submit_song
water	67:33	0:0	6	,
decl	67:12	67:50	6	char	*psz_submit_tmp
water	68:12	0:0	6	p_song
op	68:19	0:0	6	=
op	68:21	0:0	6	&
water	68:22	0:0	6	p_sys
op	68:27	0:0	6	->
water	68:29	0:0	6	p_queue
op	68:36	0:0	6	[
water	68:37	0:0	6	i_song
op	68:43	0:0	6	]
water	68:44	0:0	6	;
if	69:12	92:12	6	(asprintf (& psz_submit_song ,"&a%%5B%d%%5D=%s" "&t%%5B%d%%5D=%s" "&i%%5B%d%%5D=%u" "&o%%5B%d%%5D=P" "&r%%5B%d%%5D=" "&l%%5B%d%%5D=%d" "&b%%5B%d%%5D=%s" "&n%%5B%d%%5D=%s" "&m%%5B%d%%5D=%s" ,i_song ,p_song -> psz_a ,i_song ,p_song -> psz_t ,i_song ,( unsigned ) p_song -> date ,i_song ,i_song ,i_song ,p_song -> i_l ,i_song ,p_song -> psz_b ,i_song ,p_song -> psz_n ,i_song ,p_song -> psz_m ) == - 1)
cond	69:16	88:17	7	asprintf (& psz_submit_song ,"&a%%5B%d%%5D=%s" "&t%%5B%d%%5D=%s" "&i%%5B%d%%5D=%u" "&o%%5B%d%%5D=P" "&r%%5B%d%%5D=" "&l%%5B%d%%5D=%d" "&b%%5B%d%%5D=%s" "&n%%5B%d%%5D=%s" "&m%%5B%d%%5D=%s" ,i_song ,p_song -> psz_a ,i_song ,p_song -> psz_t ,i_song ,( unsigned ) p_song -> date ,i_song ,i_song ,i_song ,p_song -> i_l ,i_song ,p_song -> psz_b ,i_song ,p_song -> psz_n ,i_song ,p_song -> psz_m ) == - 1
call	69:16	88:11	8	asprintf
arg	69:25	69:41	9	&psz_submit_song
op	69:25	0:0	10	&
water	69:26	0:0	10	psz_submit_song
arg	70:20	78:37	9	"&a%%5B%d%%5D=%s""&t%%5B%d%%5D=%s""&i%%5B%d%%5D=%u""&o%%5B%d%%5D=P""&r%%5B%d%%5D=""&l%%5B%d%%5D=%d""&b%%5B%d%%5D=%s""&n%%5B%d%%5D=%s""&m%%5B%d%%5D=%s"
water	70:20	0:0	10	"&a%%5B%d%%5D=%s"
water	71:20	0:0	10	"&t%%5B%d%%5D=%s"
water	72:20	0:0	10	"&i%%5B%d%%5D=%u"
water	73:20	0:0	10	"&o%%5B%d%%5D=P"
water	74:20	0:0	10	"&r%%5B%d%%5D="
water	75:20	0:0	10	"&l%%5B%d%%5D=%d"
water	76:20	0:0	10	"&b%%5B%d%%5D=%s"
water	77:20	0:0	10	"&n%%5B%d%%5D=%s"
water	78:20	0:0	10	"&m%%5B%d%%5D=%s"
arg	79:20	79:26	9	i_song
water	79:20	0:0	10	i_song
arg	79:28	79:41	9	p_song->psz_a
water	79:28	0:0	10	p_song
op	79:34	0:0	10	->
water	79:36	0:0	10	psz_a
arg	80:20	80:26	9	i_song
water	80:20	0:0	10	i_song
arg	80:28	80:41	9	p_song->psz_t
water	80:28	0:0	10	p_song
op	80:34	0:0	10	->
water	80:36	0:0	10	psz_t
arg	81:20	81:26	9	i_song
water	81:20	0:0	10	i_song
arg	81:28	81:50	9	(unsigned)p_song->date
water	81:28	0:0	10	(
water	81:29	0:0	10	unsigned
water	81:37	0:0	10	)
water	81:38	0:0	10	p_song
op	81:44	0:0	10	->
water	81:46	0:0	10	date
arg	82:20	82:26	9	i_song
water	82:20	0:0	10	i_song
arg	83:20	83:26	9	i_song
water	83:20	0:0	10	i_song
arg	84:20	84:26	9	i_song
water	84:20	0:0	10	i_song
arg	84:28	84:39	9	p_song->i_l
water	84:28	0:0	10	p_song
op	84:34	0:0	10	->
water	84:36	0:0	10	i_l
arg	85:20	85:26	9	i_song
water	85:20	0:0	10	i_song
arg	85:28	85:41	9	p_song->psz_b
water	85:28	0:0	10	p_song
op	85:34	0:0	10	->
water	85:36	0:0	10	psz_b
arg	86:20	86:26	9	i_song
water	86:20	0:0	10	i_song
arg	86:28	86:41	9	p_song->psz_n
water	86:28	0:0	10	p_song
op	86:34	0:0	10	->
water	86:36	0:0	10	psz_n
arg	87:20	87:26	9	i_song
water	87:20	0:0	10	i_song
arg	87:28	88:11	9	p_song->psz_m
water	87:28	0:0	10	p_song
op	87:34	0:0	10	->
water	87:36	0:0	10	psz_m
op	88:13	0:0	8	==
op	88:16	0:0	8	-
water	88:17	0:0	8	1
stmts	89:12	92:12	7	
water	89:12	0:0	8	{
call	90:16	90:45	8	vlc_mutex_unlock
arg	90:33	90:45	9	&p_sys->lock
op	90:33	0:0	10	&
water	90:34	0:0	10	p_sys
op	90:39	0:0	10	->
water	90:41	0:0	10	lock
water	90:46	0:0	8	;
goto	91:16	91:24	8	out
water	91:21	0:0	9	out
water	92:12	0:0	8	}
water	93:12	0:0	6	psz_submit_tmp
op	93:27	0:0	6	=
water	93:29	0:0	6	psz_submit
water	93:39	0:0	6	;
if	94:12	101:12	6	(asprintf (& psz_submit ,"%s%s" ,psz_submit_tmp ,psz_submit_song ) == - 1)
cond	94:16	95:57	7	asprintf (& psz_submit ,"%s%s" ,psz_submit_tmp ,psz_submit_song ) == - 1
call	94:16	95:51	8	asprintf
arg	94:25	94:36	9	&psz_submit
op	94:25	0:0	10	&
water	94:26	0:0	10	psz_submit
arg	94:38	94:44	9	"%s%s"
water	94:38	0:0	10	"%s%s"
arg	95:20	95:34	9	psz_submit_tmp
water	95:20	0:0	10	psz_submit_tmp
arg	95:36	95:51	9	psz_submit_song
water	95:36	0:0	10	psz_submit_song
op	95:53	0:0	8	==
op	95:56	0:0	8	-
water	95:57	0:0	8	1
stmts	96:12	101:12	7	
water	96:12	0:0	8	{
call	97:16	97:35	8	free
arg	97:21	97:35	9	psz_submit_tmp
water	97:21	0:0	10	psz_submit_tmp
water	97:36	0:0	8	;
call	98:16	98:36	8	free
arg	98:21	98:36	9	psz_submit_song
water	98:21	0:0	10	psz_submit_song
water	98:37	0:0	8	;
call	99:16	99:45	8	vlc_mutex_unlock
arg	99:33	99:45	9	&p_sys->lock
op	99:33	0:0	10	&
water	99:34	0:0	10	p_sys
op	99:39	0:0	10	->
water	99:41	0:0	10	lock
water	99:46	0:0	8	;
goto	100:16	100:24	8	out
water	100:21	0:0	9	out
water	101:12	0:0	8	}
call	102:12	102:32	6	free
arg	102:17	102:32	7	psz_submit_song
water	102:17	0:0	8	psz_submit_song
water	102:33	0:0	6	;
call	103:12	103:31	6	free
arg	103:17	103:31	7	psz_submit_tmp
water	103:17	0:0	8	psz_submit_tmp
water	103:32	0:0	6	;
water	104:8	0:0	6	}
call	105:8	105:37	4	vlc_mutex_unlock
arg	105:25	105:37	5	&p_sys->lock
op	105:25	0:0	6	&
water	105:26	0:0	6	p_sys
op	105:31	0:0	6	->
water	105:33	0:0	6	lock
water	105:38	0:0	4	;
decl	106:8	107:67	4	int	i_post_socket
op	106:26	0:0	4	=
call	106:28	107:66	5	net_ConnectTCP
arg	106:43	106:49	6	p_intf
water	106:43	0:0	7	p_intf
arg	106:51	106:79	6	p_sys->p_submit_url.psz_host
water	106:51	0:0	7	p_sys
op	106:56	0:0	7	->
water	106:58	0:0	7	p_submit_url
op	106:70	0:0	7	.
water	106:71	0:0	7	psz_host
arg	107:40	107:66	6	p_sys->p_submit_url.i_port
water	107:40	0:0	7	p_sys
op	107:45	0:0	7	->
water	107:47	0:0	7	p_submit_url
op	107:59	0:0	7	.
water	107:60	0:0	7	i_port
if	108:8	115:8	4	(i_post_socket == - 1)
cond	108:12	108:30	5	i_post_socket == - 1
water	108:12	0:0	6	i_post_socket
op	108:26	0:0	6	==
op	108:29	0:0	6	-
water	108:30	0:0	6	1
stmts	109:8	115:8	5	
water	109:8	0:0	6	{
call	111:12	111:54	6	HandleInterval
arg	111:27	111:41	7	&next_exchange
op	111:27	0:0	8	&
water	111:28	0:0	8	next_exchange
arg	111:43	111:54	7	&i_interval
op	111:43	0:0	8	&
water	111:44	0:0	8	i_interval
water	111:55	0:0	6	;
water	112:12	0:0	6	b_handshaked
op	112:25	0:0	6	=
water	112:27	0:0	6	false
water	112:32	0:0	6	;
call	113:12	113:27	6	free
arg	113:17	113:27	7	psz_submit
water	113:17	0:0	8	psz_submit
water	113:28	0:0	6	;
continue	114:12	114:20	6	
water	115:8	0:0	6	}
decl	117:8	130:8	4	int	i_net_ret
op	117:22	0:0	4	=
call	117:24	130:7	5	net_Printf
arg	117:35	117:41	6	p_intf
water	117:35	0:0	7	p_intf
arg	117:43	117:56	6	i_post_socket
water	117:43	0:0	7	i_post_socket
arg	117:58	117:62	6	NULL
water	117:58	0:0	7	NULL
arg	118:12	127:18	6	"POST %s HTTP/1.1\n""Accept-Encoding: identity\n""Content-length: %zu\n""Connection: close\n""Content-type: application/x-www-form-urlencoded\n""Host: %s\n""User-agent: VLC media player/"VERSION"\r\n""\r\n""%s\r\n""\r\n"
water	118:12	0:0	7	"POST %s HTTP/1.1\n"
water	119:12	0:0	7	"Accept-Encoding: identity\n"
water	120:12	0:0	7	"Content-length: %zu\n"
water	121:12	0:0	7	"Connection: close\n"
water	122:12	0:0	7	"Content-type: application/x-www-form-urlencoded\n"
water	123:12	0:0	7	"Host: %s\n"
water	124:12	0:0	7	"User-agent: VLC media player/"
water	124:43	0:0	7	VERSION
water	124:50	0:0	7	"\r\n"
water	125:12	0:0	7	"\r\n"
water	126:12	0:0	7	"%s\r\n"
water	127:12	0:0	7	"\r\n"
arg	128:12	128:40	6	p_sys->p_submit_url.psz_path
water	128:12	0:0	7	p_sys
op	128:17	0:0	7	->
water	128:19	0:0	7	p_submit_url
op	128:31	0:0	7	.
water	128:32	0:0	7	psz_path
arg	128:42	128:60	6	strlen(psz_submit)
call	128:42	128:59	7	strlen
arg	128:49	128:59	8	psz_submit
water	128:49	0:0	9	psz_submit
arg	129:12	129:40	6	p_sys->p_submit_url.psz_host
water	129:12	0:0	7	p_sys
op	129:17	0:0	7	->
water	129:19	0:0	7	p_submit_url
op	129:31	0:0	7	.
water	129:32	0:0	7	psz_host
arg	129:42	130:7	6	psz_submit
water	129:42	0:0	7	psz_submit
call	131:8	131:23	4	free
arg	131:13	131:23	5	psz_submit
water	131:13	0:0	6	psz_submit
water	131:24	0:0	4	;
if	132:8	138:8	4	(i_net_ret == - 1)
cond	132:12	132:26	5	i_net_ret == - 1
water	132:12	0:0	6	i_net_ret
op	132:22	0:0	6	==
op	132:25	0:0	6	-
water	132:26	0:0	6	1
stmts	133:8	138:8	5	
water	133:8	0:0	6	{
call	135:12	135:54	6	HandleInterval
arg	135:27	135:41	7	&next_exchange
op	135:27	0:0	8	&
water	135:28	0:0	8	next_exchange
arg	135:43	135:54	7	&i_interval
op	135:43	0:0	8	&
water	135:44	0:0	8	i_interval
water	135:55	0:0	6	;
water	136:12	0:0	6	b_handshaked
op	136:25	0:0	6	=
water	136:27	0:0	6	false
water	136:32	0:0	6	;
continue	137:12	137:20	6	
water	138:8	0:0	6	}
water	139:8	0:0	4	i_net_ret
op	139:18	0:0	4	=
call	139:20	140:57	4	net_Read
arg	139:29	139:35	5	p_intf
water	139:29	0:0	6	p_intf
arg	139:37	139:50	5	i_post_socket
water	139:37	0:0	6	i_post_socket
arg	139:52	139:56	5	NULL
water	139:52	0:0	6	NULL
arg	140:20	140:28	5	p_buffer
water	140:20	0:0	6	p_buffer
arg	140:30	140:50	5	sizeof(p_buffer)-1
op	140:30	0:0	6	sizeof
water	140:36	0:0	6	(
water	140:37	0:0	6	p_buffer
water	140:45	0:0	6	)
op	140:47	0:0	6	-
water	140:49	0:0	6	1
arg	140:52	140:57	5	false
water	140:52	0:0	6	false
water	140:58	0:0	4	;
if	141:8	145:8	4	(i_net_ret <= 0)
cond	141:12	141:25	5	i_net_ret <= 0
water	141:12	0:0	6	i_net_ret
op	141:22	0:0	6	<=
water	141:25	0:0	6	0
stmts	142:8	145:8	5	
water	142:8	0:0	6	{
continue	144:12	144:20	6	
water	145:8	0:0	6	}
call	146:8	146:31	4	net_Close
arg	146:18	146:31	5	i_post_socket
water	146:18	0:0	6	i_post_socket
water	146:32	0:0	4	;
water	147:8	0:0	4	p_buffer
op	147:16	0:0	4	[
water	147:17	0:0	4	i_net_ret
op	147:26	0:0	4	]
op	147:28	0:0	4	=
water	147:30	0:0	4	'\0'
water	147:34	0:0	4	;
decl	148:8	148:58	4	char	*failed
op	148:21	0:0	4	=
call	148:23	148:57	5	strstr
arg	148:30	148:47	6	(char*)p_buffer
water	148:30	0:0	7	(
water	148:31	0:0	7	char
op	148:36	0:0	7	*
water	148:37	0:0	7	)
water	148:39	0:0	7	p_buffer
arg	148:49	148:57	6	"FAILED"
water	148:49	0:0	7	"FAILED"
if	149:8	154:8	4	(failed)
cond	149:12	149:12	5	failed
water	149:12	0:0	6	failed
stmts	150:8	154:8	5	
water	150:8	0:0	6	{
call	151:12	151:41	6	msg_Warn
arg	151:21	151:27	7	p_intf
water	151:21	0:0	8	p_intf
arg	151:29	151:33	7	"%s"
water	151:29	0:0	8	"%s"
arg	151:35	151:41	7	failed
water	151:35	0:0	8	failed
water	151:42	0:0	6	;
call	152:12	152:54	6	HandleInterval
arg	152:27	152:41	7	&next_exchange
op	152:27	0:0	8	&
water	152:28	0:0	8	next_exchange
arg	152:43	152:54	7	&i_interval
op	152:43	0:0	8	&
water	152:44	0:0	8	i_interval
water	152:55	0:0	6	;
continue	153:12	153:20	6	
water	154:8	0:0	6	}
if	155:8	161:8	4	(strstr (( char * ) p_buffer ,"BADSESSION" ))
cond	155:12	155:50	5	strstr (( char * ) p_buffer ,"BADSESSION" )
call	155:12	155:50	6	strstr
arg	155:19	155:36	7	(char*)p_buffer
water	155:19	0:0	8	(
water	155:20	0:0	8	char
op	155:25	0:0	8	*
water	155:26	0:0	8	)
water	155:28	0:0	8	p_buffer
arg	155:38	155:50	7	"BADSESSION"
water	155:38	0:0	8	"BADSESSION"
stmts	156:8	161:8	5	
water	156:8	0:0	6	{
call	157:12	157:117	6	msg_Err
arg	157:20	157:26	7	p_intf
water	157:20	0:0	8	p_intf
arg	157:28	157:117	7	"Authentication failed (BADSESSION), are you connected to last.fm with another program ?"
water	157:28	0:0	8	"Authentication failed (BADSESSION), are you connected to last.fm with another program ?"
water	157:118	0:0	6	;
water	158:12	0:0	6	b_handshaked
op	158:25	0:0	6	=
water	158:27	0:0	6	false
water	158:32	0:0	6	;
call	159:12	159:54	6	HandleInterval
arg	159:27	159:41	7	&next_exchange
op	159:27	0:0	8	&
water	159:28	0:0	8	next_exchange
arg	159:43	159:54	7	&i_interval
op	159:43	0:0	8	&
water	159:44	0:0	8	i_interval
water	159:55	0:0	6	;
continue	160:12	160:20	6	
water	161:8	0:0	6	}
if	162:8	170:8	4	(strstr (( char * ) p_buffer ,"OK" ))
cond	162:12	162:42	5	strstr (( char * ) p_buffer ,"OK" )
call	162:12	162:42	6	strstr
arg	162:19	162:36	7	(char*)p_buffer
water	162:19	0:0	8	(
water	162:20	0:0	8	char
op	162:25	0:0	8	*
water	162:26	0:0	8	)
water	162:28	0:0	8	p_buffer
arg	162:38	162:42	7	"OK"
water	162:38	0:0	8	"OK"
stmts	163:8	170:8	5	
water	163:8	0:0	6	{
for	164:12	165:46	6	( int i = 0 ;i < p_sys -> i_songs;i ++)
forinit	0:0	164:26	7	 int i = 0 ;
decl	164:17	164:26	8	int	i
op	164:23	0:0	8	=
water	164:25	0:0	8	0
cond	164:28	164:39	7	i < p_sys -> i_songs
water	164:28	0:0	8	i
op	164:30	0:0	8	<
water	164:32	0:0	8	p_sys
op	164:37	0:0	8	->
water	164:39	0:0	8	i_songs
forexpr	164:48	164:49	7	i ++
water	164:48	0:0	8	i
op	164:49	0:0	8	++
stmts	165:16	165:46	7	
call	165:16	165:45	8	DeleteSong
arg	165:27	165:45	9	&p_sys->p_queue[i]
op	165:27	0:0	10	&
water	165:28	0:0	10	p_sys
op	165:33	0:0	10	->
water	165:35	0:0	10	p_queue
op	165:42	0:0	10	[
water	165:43	0:0	10	i
op	165:44	0:0	10	]
water	165:46	0:0	8	;
water	166:12	0:0	6	p_sys
op	166:17	0:0	6	->
water	166:19	0:0	6	i_songs
op	166:27	0:0	6	=
water	166:29	0:0	6	0
water	166:30	0:0	6	;
water	167:12	0:0	6	i_interval
op	167:23	0:0	6	=
water	167:25	0:0	6	0
water	167:26	0:0	6	;
water	168:12	0:0	6	next_exchange
op	168:26	0:0	6	=
call	168:28	168:34	6	mdate
water	168:35	0:0	6	;
call	169:12	169:52	6	msg_Dbg
arg	169:20	169:26	7	p_intf
water	169:20	0:0	8	p_intf
arg	169:28	169:52	7	"Submission successful!"
water	169:28	0:0	8	"Submission successful!"
water	169:53	0:0	6	;
water	170:8	0:0	6	}
else	171:8	177:8	4
stmts	172:8	177:8	5	
water	172:8	0:0	6	{
call	173:12	174:37	6	msg_Err
arg	173:20	173:26	7	p_intf
water	173:20	0:0	8	p_intf
arg	173:28	173:75	7	"Authentication failed, handshaking again (%s)"
water	173:28	0:0	8	"Authentication failed, handshaking again (%s)"
arg	174:29	174:37	7	p_buffer
water	174:29	0:0	8	p_buffer
water	174:38	0:0	6	;
water	175:12	0:0	6	b_handshaked
op	175:25	0:0	6	=
water	175:27	0:0	6	false
water	175:32	0:0	6	;
call	176:12	176:54	6	HandleInterval
arg	176:27	176:41	7	&next_exchange
op	176:27	0:0	8	&
water	176:28	0:0	8	next_exchange
arg	176:43	176:54	7	&i_interval
op	176:43	0:0	8	&
water	176:44	0:0	8	i_interval
water	176:55	0:0	6	;
water	177:8	0:0	6	}
water	178:4	0:0	4	}
label	179:0	179:3	2	out :
call	180:4	180:26	2	vlc_restorecancel
arg	180:22	180:26	3	canc
water	180:22	0:0	4	canc
water	180:27	0:0	2	;
return	181:4	181:15	2	NULL
water	181:11	0:0	3	NULL
