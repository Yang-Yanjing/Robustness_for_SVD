func	2:0	129:0	0	cam_t *	en50221_Init
params	2:19	0:0	1	
param	2:21	2:38	2	vlc_object_t *	obj
param	2:40	2:47	2	int	fd
stmnts	0:0	128:15	1	
decl	4:4	4:18	2	ca_caps_t	caps
call	5:4	5:36	2	memset
arg	5:12	5:17	3	&caps
op	5:12	0:0	4	&
water	5:13	0:0	4	caps
arg	5:19	5:20	3	0
water	5:19	0:0	4	0
arg	5:22	5:36	3	sizeof(caps)
op	5:22	0:0	4	sizeof
water	5:28	0:0	4	(
water	5:30	0:0	4	caps
water	5:35	0:0	4	)
water	5:37	0:0	2	;
if	6:4	10:4	2	(ioctl (fd ,CA_GET_CAP ,& caps ) < 0)
cond	6:8	6:41	3	ioctl (fd ,CA_GET_CAP ,& caps ) < 0
call	6:8	6:37	4	ioctl
arg	6:15	6:17	5	fd
water	6:15	0:0	6	fd
arg	6:19	6:29	5	CA_GET_CAP
water	6:19	0:0	6	CA_GET_CAP
arg	6:31	6:37	5	&caps
op	6:31	0:0	6	&
water	6:32	0:0	6	caps
op	6:39	0:0	4	<
water	6:41	0:0	4	0
stmts	7:4	10:4	3	
water	7:4	0:0	4	{
call	8:8	8:72	4	msg_Err
arg	8:17	8:20	5	obj
water	8:17	0:0	6	obj
arg	8:22	8:72	5	"CAMInit: ioctl() error getting CAM capabilities"
water	8:22	0:0	6	"CAMInit: ioctl() error getting CAM capabilities"
water	8:73	0:0	4	;
return	9:8	9:19	4	NULL
water	9:15	0:0	5	NULL
water	10:4	0:0	4	}
call	12:4	12:64	2	msg_Dbg
arg	12:13	12:16	3	obj
water	12:13	0:0	4	obj
arg	12:18	12:48	3	"CA interface with %d slot(s)"
water	12:18	0:0	4	"CA interface with %d slot(s)"
arg	12:50	12:64	3	caps.slot_num
water	12:50	0:0	4	caps
op	12:54	0:0	4	.
water	12:55	0:0	4	slot_num
water	12:65	0:0	2	;
if	13:4	14:55	2	(caps . slot_type & CA_CI)
cond	13:8	13:25	3	caps . slot_type & CA_CI
water	13:8	0:0	4	caps
op	13:12	0:0	4	.
water	13:13	0:0	4	slot_type
op	13:23	0:0	4	&
water	13:25	0:0	4	CA_CI
stmts	14:8	14:55	3	
call	14:8	14:54	4	msg_Dbg
arg	14:17	14:20	5	obj
water	14:17	0:0	6	obj
arg	14:22	14:54	5	" CI high level interface type"
water	14:22	0:0	6	" CI high level interface type"
water	14:55	0:0	4	;
if	15:4	16:61	2	(caps . slot_type & CA_CI_LINK)
cond	15:8	15:25	3	caps . slot_type & CA_CI_LINK
water	15:8	0:0	4	caps
op	15:12	0:0	4	.
water	15:13	0:0	4	slot_type
op	15:23	0:0	4	&
water	15:25	0:0	4	CA_CI_LINK
stmts	16:8	16:61	3	
call	16:8	16:60	4	msg_Dbg
arg	16:17	16:20	5	obj
water	16:17	0:0	6	obj
arg	16:22	16:60	5	" CI link layer level interface type"
water	16:22	0:0	6	" CI link layer level interface type"
water	16:61	0:0	4	;
if	17:4	18:82	2	(caps . slot_type & CA_CI_PHYS)
cond	17:8	17:25	3	caps . slot_type & CA_CI_PHYS
water	17:8	0:0	4	caps
op	17:12	0:0	4	.
water	17:13	0:0	4	slot_type
op	17:23	0:0	4	&
water	17:25	0:0	4	CA_CI_PHYS
stmts	18:8	18:82	3	
call	18:8	18:81	4	msg_Dbg
arg	18:17	18:20	5	obj
water	18:17	0:0	6	obj
arg	18:22	18:81	5	" CI physical layer level interface type (not supported) "
water	18:22	0:0	6	" CI physical layer level interface type (not supported) "
water	18:82	0:0	4	;
if	19:4	20:56	2	(caps . slot_type & CA_DESCR)
cond	19:8	19:25	3	caps . slot_type & CA_DESCR
water	19:8	0:0	4	caps
op	19:12	0:0	4	.
water	19:13	0:0	4	slot_type
op	19:23	0:0	4	&
water	19:25	0:0	4	CA_DESCR
stmts	20:8	20:56	3	
call	20:8	20:55	4	msg_Dbg
arg	20:17	20:20	5	obj
water	20:17	0:0	6	obj
arg	20:22	20:55	5	" built-in descrambler detected"
water	20:22	0:0	6	" built-in descrambler detected"
water	20:56	0:0	4	;
if	21:4	22:54	2	(caps . slot_type & CA_SC)
cond	21:8	21:25	3	caps . slot_type & CA_SC
water	21:8	0:0	4	caps
op	21:12	0:0	4	.
water	21:13	0:0	4	slot_type
op	21:23	0:0	4	&
water	21:25	0:0	4	CA_SC
stmts	22:8	22:54	3	
call	22:8	22:53	4	msg_Dbg
arg	22:17	22:20	5	obj
water	22:17	0:0	6	obj
arg	22:22	22:53	5	" simple smart card interface"
water	22:22	0:0	6	" simple smart card interface"
water	22:54	0:0	4	;
call	23:4	23:71	2	msg_Dbg
arg	23:13	23:16	3	obj
water	23:13	0:0	4	obj
arg	23:18	23:54	3	"%d available descrambler(s) (keys)"
water	23:18	0:0	4	"%d available descrambler(s) (keys)"
arg	23:56	23:71	3	caps.descr_num
water	23:56	0:0	4	caps
op	23:60	0:0	4	.
water	23:61	0:0	4	descr_num
water	23:72	0:0	2	;
if	24:4	25:58	2	(caps . descr_type & CA_ECD)
cond	24:8	24:26	3	caps . descr_type & CA_ECD
water	24:8	0:0	4	caps
op	24:12	0:0	4	.
water	24:13	0:0	4	descr_type
op	24:24	0:0	4	&
water	24:26	0:0	4	CA_ECD
stmts	25:8	25:58	3	
call	25:8	25:57	4	msg_Dbg
arg	25:17	25:20	5	obj
water	25:17	0:0	6	obj
arg	25:22	25:57	5	" ECD scrambling system supported"
water	25:22	0:0	6	" ECD scrambling system supported"
water	25:58	0:0	4	;
if	26:4	27:58	2	(caps . descr_type & CA_NDS)
cond	26:8	26:26	3	caps . descr_type & CA_NDS
water	26:8	0:0	4	caps
op	26:12	0:0	4	.
water	26:13	0:0	4	descr_type
op	26:24	0:0	4	&
water	26:26	0:0	4	CA_NDS
stmts	27:8	27:58	3	
call	27:8	27:57	4	msg_Dbg
arg	27:17	27:20	5	obj
water	27:17	0:0	6	obj
arg	27:22	27:57	5	" NDS scrambling system supported"
water	27:22	0:0	6	" NDS scrambling system supported"
water	27:58	0:0	4	;
if	28:4	29:58	2	(caps . descr_type & CA_DSS)
cond	28:8	28:26	3	caps . descr_type & CA_DSS
water	28:8	0:0	4	caps
op	28:12	0:0	4	.
water	28:13	0:0	4	descr_type
op	28:24	0:0	4	&
water	28:26	0:0	4	CA_DSS
stmts	29:8	29:58	3	
call	29:8	29:57	4	msg_Dbg
arg	29:17	29:20	5	obj
water	29:17	0:0	6	obj
arg	29:22	29:57	5	" DSS scrambling system supported"
water	29:22	0:0	6	" DSS scrambling system supported"
water	29:58	0:0	4	;
if	30:4	34:4	2	(caps . slot_num == 0)
cond	30:8	30:25	3	caps . slot_num == 0
water	30:8	0:0	4	caps
op	30:12	0:0	4	.
water	30:13	0:0	4	slot_num
op	30:22	0:0	4	==
water	30:25	0:0	4	0
stmts	31:4	34:4	3	
water	31:4	0:0	4	{
call	32:8	32:49	4	msg_Err
arg	32:17	32:20	5	obj
water	32:17	0:0	6	obj
arg	32:22	32:49	5	"CAM module without slots"
water	32:22	0:0	6	"CAM module without slots"
water	32:50	0:0	4	;
return	33:8	33:19	4	NULL
water	33:15	0:0	5	NULL
water	34:4	0:0	4	}
decl	35:4	35:48	2	cam_t	*p_cam
op	35:17	0:0	2	=
call	35:19	35:47	3	calloc
arg	35:27	35:28	4	1
water	35:27	0:0	5	1
arg	35:30	35:47	4	sizeof(*p_cam)
op	35:30	0:0	5	sizeof
water	35:36	0:0	5	(
op	35:38	0:0	5	*
water	35:39	0:0	5	p_cam
water	35:45	0:0	5	)
if	36:4	37:18	2	(unlikely (p_cam == NULL ))
cond	36:8	36:30	3	unlikely (p_cam == NULL )
call	36:8	36:30	4	unlikely
arg	36:17	36:30	5	p_cam==NULL
water	36:17	0:0	6	p_cam
op	36:23	0:0	6	==
water	36:26	0:0	6	NULL
stmts	37:8	37:18	3	
goto	37:8	37:18	4	error
water	37:13	0:0	5	error
water	38:4	0:0	2	p_cam
op	38:9	0:0	2	->
water	38:11	0:0	2	obj
op	38:15	0:0	2	=
water	38:17	0:0	2	obj
water	38:20	0:0	2	;
water	39:4	0:0	2	p_cam
op	39:9	0:0	2	->
water	39:11	0:0	2	fd
op	39:14	0:0	2	=
water	39:16	0:0	2	fd
water	39:18	0:0	2	;
if	40:4	55:4	2	(caps . slot_type & CA_CI_LINK)
cond	40:8	40:25	3	caps . slot_type & CA_CI_LINK
water	40:8	0:0	4	caps
op	40:12	0:0	4	.
water	40:13	0:0	4	slot_type
op	40:23	0:0	4	&
water	40:25	0:0	4	CA_CI_LINK
stmts	41:4	55:4	3	
water	41:4	0:0	4	{
water	42:8	0:0	4	p_cam
op	42:13	0:0	4	->
water	42:15	0:0	4	i_ca_type
op	42:25	0:0	4	=
water	42:27	0:0	4	CA_CI_LINK
water	42:37	0:0	4	;
for	43:8	50:8	4	(unsigned i_slot = 0 ;i_slot < p_cam -> i_nb_slots;i_slot ++)
forinit	43:14	43:33	5	unsigned i_slot = 0 ;
water	43:14	0:0	6	unsigned
water	43:23	0:0	6	i_slot
op	43:30	0:0	6	=
water	43:32	0:0	6	0
water	43:33	0:0	6	;
cond	43:35	43:51	5	i_slot < p_cam -> i_nb_slots
water	43:35	0:0	6	i_slot
op	43:42	0:0	6	<
water	43:44	0:0	6	p_cam
op	43:49	0:0	6	->
water	43:51	0:0	6	i_nb_slots
forexpr	43:63	43:69	5	i_slot ++
water	43:63	0:0	6	i_slot
op	43:69	0:0	6	++
stmts	44:8	50:8	5	
water	44:8	0:0	6	{
if	45:12	49:12	6	(ioctl (p_cam -> fd ,CA_RESET ,1 << i_slot ) != 0)
cond	45:17	45:61	7	ioctl (p_cam -> fd ,CA_RESET ,1 << i_slot ) != 0
call	45:17	45:56	8	ioctl
arg	45:24	45:33	9	p_cam->fd
water	45:24	0:0	10	p_cam
op	45:29	0:0	10	->
water	45:31	0:0	10	fd
arg	45:35	45:43	9	CA_RESET
water	45:35	0:0	10	CA_RESET
arg	45:45	45:56	9	1<<i_slot
water	45:45	0:0	10	1
op	45:47	0:0	10	<<
water	45:50	0:0	10	i_slot
op	45:58	0:0	8	!=
water	45:61	0:0	8	0
stmts	46:12	49:12	7	
water	46:12	0:0	8	{
call	47:16	48:32	8	msg_Err
arg	47:25	47:35	9	p_cam->obj
water	47:25	0:0	10	p_cam
op	47:30	0:0	10	->
water	47:32	0:0	10	obj
arg	47:37	47:75	9	"en50221_Init: couldn't reset slot %d"
water	47:37	0:0	10	"en50221_Init: couldn't reset slot %d"
arg	48:25	48:32	9	i_slot
water	48:25	0:0	10	i_slot
water	48:33	0:0	8	;
water	49:12	0:0	8	}
water	50:8	0:0	6	}
water	51:8	0:0	4	p_cam
op	51:13	0:0	4	->
water	51:15	0:0	4	i_timeout
op	51:25	0:0	4	=
water	51:27	0:0	4	CLOCK_FREQ
op	51:38	0:0	4	/
water	51:40	0:0	4	10
water	51:42	0:0	4	;
call	53:8	53:32	4	msleep
arg	53:16	53:32	5	CLOCK_FREQ/10
water	53:16	0:0	6	CLOCK_FREQ
op	53:27	0:0	6	/
water	53:29	0:0	6	10
water	53:33	0:0	4	;
water	54:8	0:0	4	p_cam
op	54:13	0:0	4	->
water	54:15	0:0	4	i_next_event
op	54:28	0:0	4	=
water	54:30	0:0	4	0
water	54:31	0:0	4	;
water	55:4	0:0	4	}
else	56:4	119:4	2
stmts	57:4	119:4	3	
if	57:4	119:4	4	(caps . slot_type & CA_CI)
cond	57:8	57:25	5	caps . slot_type & CA_CI
water	57:8	0:0	6	caps
op	57:12	0:0	6	.
water	57:13	0:0	6	slot_type
op	57:23	0:0	6	&
water	57:25	0:0	6	CA_CI
stmts	58:4	119:4	5	
water	58:4	0:0	6	{
water	59:8	0:0	6	p_cam
op	59:13	0:0	6	->
water	59:15	0:0	6	i_ca_type
op	59:25	0:0	6	=
water	59:27	0:0	6	CA_CI
water	59:32	0:0	6	;
decl	60:8	60:32	6	struct ca_slot_info	info
water	61:8	0:0	6	info
op	61:12	0:0	6	.
water	61:13	0:0	6	num
op	61:17	0:0	6	=
water	61:19	0:0	6	0
water	61:20	0:0	6	;
if	64:8	68:8	6	(ioctl (fd ,CA_GET_SLOT_INFO ,& info ) < 0)
cond	64:13	64:52	7	ioctl (fd ,CA_GET_SLOT_INFO ,& info ) < 0
call	64:13	64:48	8	ioctl
arg	64:20	64:22	9	fd
water	64:20	0:0	10	fd
arg	64:24	64:40	9	CA_GET_SLOT_INFO
water	64:24	0:0	10	CA_GET_SLOT_INFO
arg	64:42	64:48	9	&info
op	64:42	0:0	10	&
water	64:43	0:0	10	info
op	64:50	0:0	8	<
water	64:52	0:0	8	0
stmts	65:8	68:8	7	
water	65:8	0:0	8	{
call	66:12	66:76	8	msg_Err
arg	66:21	66:24	9	obj
water	66:21	0:0	10	obj
arg	66:26	66:52	9	"cannot get slot info: %s"
water	66:26	0:0	10	"cannot get slot info: %s"
arg	66:54	66:76	9	vlc_strerror_c(errno)
call	66:54	66:74	10	vlc_strerror_c
arg	66:69	66:74	11	errno
water	66:69	0:0	12	errno
water	66:77	0:0	8	;
goto	67:12	67:22	8	error
water	67:17	0:0	9	error
water	68:8	0:0	8	}
if	69:8	73:8	6	(info . flags == 0)
cond	69:12	69:26	7	info . flags == 0
water	69:12	0:0	8	info
op	69:16	0:0	8	.
water	69:17	0:0	8	flags
op	69:23	0:0	8	==
water	69:26	0:0	8	0
stmts	70:8	73:8	7	
water	70:8	0:0	8	{
call	71:12	71:44	8	msg_Err
arg	71:21	71:24	9	obj
water	71:21	0:0	10	obj
arg	71:26	71:44	9	"no CAM inserted"
water	71:26	0:0	10	"no CAM inserted"
water	71:45	0:0	8	;
goto	72:12	72:22	8	error
water	72:17	0:0	9	error
water	73:8	0:0	8	}
water	75:8	0:0	6	p_cam
op	75:13	0:0	6	->
water	75:15	0:0	6	p_sessions
op	75:25	0:0	6	[
water	75:27	0:0	6	0
op	75:29	0:0	6	]
op	75:30	0:0	6	.
water	75:31	0:0	6	i_resource_id
op	75:45	0:0	6	=
water	75:47	0:0	6	RI_CONDITIONAL_ACCESS_SUPPORT
water	75:76	0:0	6	;
decl	78:8	78:23	6	ca_msg_t	ca_msg
water	79:8	0:0	6	ca_msg
op	79:14	0:0	6	.
water	79:15	0:0	6	length
op	79:21	0:0	6	=
water	79:22	0:0	6	3
water	79:23	0:0	6	;
water	80:8	0:0	6	ca_msg
op	80:14	0:0	6	.
water	80:15	0:0	6	msg
op	80:18	0:0	6	[
water	80:19	0:0	6	0
op	80:20	0:0	6	]
op	80:22	0:0	6	=
water	80:24	0:0	6	(
water	80:26	0:0	6	AOT_APPLICATION_INFO
op	80:47	0:0	6	&
water	80:49	0:0	6	0
water	80:50	0:0	6	xFF0000
water	80:58	0:0	6	)
op	80:60	0:0	6	>>
water	80:63	0:0	6	16
water	80:65	0:0	6	;
water	81:8	0:0	6	ca_msg
op	81:14	0:0	6	.
water	81:15	0:0	6	msg
op	81:18	0:0	6	[
water	81:19	0:0	6	1
op	81:20	0:0	6	]
op	81:22	0:0	6	=
water	81:24	0:0	6	(
water	81:26	0:0	6	AOT_APPLICATION_INFO
op	81:47	0:0	6	&
water	81:49	0:0	6	0
water	81:50	0:0	6	x00FF00
water	81:58	0:0	6	)
op	81:60	0:0	6	>>
water	81:63	0:0	6	8
water	81:64	0:0	6	;
water	82:8	0:0	6	ca_msg
op	82:14	0:0	6	.
water	82:15	0:0	6	msg
op	82:18	0:0	6	[
water	82:19	0:0	6	2
op	82:20	0:0	6	]
op	82:22	0:0	6	=
water	82:24	0:0	6	(
water	82:26	0:0	6	AOT_APPLICATION_INFO
op	82:47	0:0	6	&
water	82:49	0:0	6	0
water	82:50	0:0	6	x0000FF
water	82:58	0:0	6	)
op	82:60	0:0	6	>>
water	82:63	0:0	6	0
water	82:64	0:0	6	;
call	83:8	83:39	6	memset
arg	83:16	83:30	7	&ca_msg.msg[3]
op	83:16	0:0	8	&
water	83:17	0:0	8	ca_msg
op	83:23	0:0	8	.
water	83:24	0:0	8	msg
op	83:27	0:0	8	[
water	83:28	0:0	8	3
op	83:29	0:0	8	]
arg	83:32	83:33	7	0
water	83:32	0:0	8	0
arg	83:35	83:39	7	253
water	83:35	0:0	8	253
water	83:40	0:0	6	;
call	84:8	84:62	6	APDUSend
arg	84:18	84:23	7	p_cam
water	84:18	0:0	8	p_cam
arg	84:25	84:26	7	1
water	84:25	0:0	8	1
arg	84:28	84:52	7	AOT_APPLICATION_INFO_ENQ
water	84:28	0:0	8	AOT_APPLICATION_INFO_ENQ
arg	84:54	84:58	7	NULL
water	84:54	0:0	8	NULL
arg	84:60	84:62	7	0
water	84:60	0:0	8	0
water	84:63	0:0	6	;
if	85:8	89:8	6	(ioctl (fd ,CA_GET_MSG ,& ca_msg ) < 0)
cond	85:13	85:48	7	ioctl (fd ,CA_GET_MSG ,& ca_msg ) < 0
call	85:13	85:44	8	ioctl
arg	85:20	85:22	9	fd
water	85:20	0:0	10	fd
arg	85:24	85:34	9	CA_GET_MSG
water	85:24	0:0	10	CA_GET_MSG
arg	85:36	85:44	9	&ca_msg
op	85:36	0:0	10	&
water	85:37	0:0	10	ca_msg
op	85:46	0:0	8	<
water	85:48	0:0	8	0
stmts	86:8	89:8	7	
water	86:8	0:0	8	{
call	87:12	87:65	8	msg_Err
arg	87:21	87:24	9	obj
water	87:21	0:0	10	obj
arg	87:26	87:65	9	"en50221_Init: failed getting message"
water	87:26	0:0	10	"en50221_Init: failed getting message"
water	87:66	0:0	8	;
goto	88:12	88:22	8	error
water	88:17	0:0	9	error
water	89:8	0:0	8	}
while	91:8	109:8	6	(ca_msg . msg [ 8 ] == 0 xff && ca_msg . msg [ 9 ] == 0 xff)
cond	91:15	91:58	7	ca_msg . msg [ 8 ] == 0 xff && ca_msg . msg [ 9 ] == 0 xff
water	91:15	0:0	8	ca_msg
op	91:21	0:0	8	.
water	91:22	0:0	8	msg
op	91:25	0:0	8	[
water	91:26	0:0	8	8
op	91:27	0:0	8	]
op	91:29	0:0	8	==
water	91:32	0:0	8	0
water	91:33	0:0	8	xff
op	91:37	0:0	8	&&
water	91:40	0:0	8	ca_msg
op	91:46	0:0	8	.
water	91:47	0:0	8	msg
op	91:50	0:0	8	[
water	91:51	0:0	8	9
op	91:52	0:0	8	]
op	91:54	0:0	8	==
water	91:57	0:0	8	0
water	91:58	0:0	8	xff
stmts	92:8	109:8	7	
water	92:8	0:0	8	{
if	93:12	94:26	8	(!vlc_object_alive (obj ))
cond	93:16	93:38	9	!vlc_object_alive (obj )
op	93:16	0:0	10	!
call	93:17	93:38	10	vlc_object_alive
arg	93:35	93:38	11	obj
water	93:35	0:0	12	obj
stmts	94:16	94:26	9	
goto	94:16	94:26	10	error
water	94:21	0:0	11	error
call	95:12	95:20	8	msleep
arg	95:19	95:20	9	1
water	95:19	0:0	10	1
water	95:21	0:0	8	;
call	96:12	96:45	8	msg_Dbg
arg	96:21	96:24	9	obj
water	96:21	0:0	10	obj
arg	96:26	96:45	9	"CAM: please wait"
water	96:26	0:0	10	"CAM: please wait"
water	96:46	0:0	8	;
call	97:12	97:66	8	APDUSend
arg	97:22	97:27	9	p_cam
water	97:22	0:0	10	p_cam
arg	97:29	97:30	9	1
water	97:29	0:0	10	1
arg	97:32	97:56	9	AOT_APPLICATION_INFO_ENQ
water	97:32	0:0	10	AOT_APPLICATION_INFO_ENQ
arg	97:58	97:62	9	NULL
water	97:58	0:0	10	NULL
arg	97:64	97:66	9	0
water	97:64	0:0	10	0
water	97:67	0:0	8	;
water	98:12	0:0	8	ca_msg
op	98:18	0:0	8	.
water	98:19	0:0	8	length
op	98:25	0:0	8	=
water	98:26	0:0	8	3
water	98:27	0:0	8	;
water	99:12	0:0	8	ca_msg
op	99:18	0:0	8	.
water	99:19	0:0	8	msg
op	99:22	0:0	8	[
water	99:23	0:0	8	0
op	99:24	0:0	8	]
op	99:26	0:0	8	=
water	99:28	0:0	8	(
water	99:30	0:0	8	AOT_APPLICATION_INFO
op	99:51	0:0	8	&
water	99:53	0:0	8	0
water	99:54	0:0	8	xFF0000
water	99:62	0:0	8	)
op	99:64	0:0	8	>>
water	99:67	0:0	8	16
water	99:69	0:0	8	;
water	100:12	0:0	8	ca_msg
op	100:18	0:0	8	.
water	100:19	0:0	8	msg
op	100:22	0:0	8	[
water	100:23	0:0	8	1
op	100:24	0:0	8	]
op	100:26	0:0	8	=
water	100:28	0:0	8	(
water	100:30	0:0	8	AOT_APPLICATION_INFO
op	100:51	0:0	8	&
water	100:53	0:0	8	0
water	100:54	0:0	8	x00FF00
water	100:62	0:0	8	)
op	100:64	0:0	8	>>
water	100:67	0:0	8	8
water	100:68	0:0	8	;
water	101:12	0:0	8	ca_msg
op	101:18	0:0	8	.
water	101:19	0:0	8	msg
op	101:22	0:0	8	[
water	101:23	0:0	8	2
op	101:24	0:0	8	]
op	101:26	0:0	8	=
water	101:28	0:0	8	(
water	101:30	0:0	8	AOT_APPLICATION_INFO
op	101:51	0:0	8	&
water	101:53	0:0	8	0
water	101:54	0:0	8	x0000FF
water	101:62	0:0	8	)
op	101:64	0:0	8	>>
water	101:67	0:0	8	0
water	101:68	0:0	8	;
call	102:12	102:43	8	memset
arg	102:20	102:34	9	&ca_msg.msg[3]
op	102:20	0:0	10	&
water	102:21	0:0	10	ca_msg
op	102:27	0:0	10	.
water	102:28	0:0	10	msg
op	102:31	0:0	10	[
water	102:32	0:0	10	3
op	102:33	0:0	10	]
arg	102:36	102:37	9	0
water	102:36	0:0	10	0
arg	102:39	102:43	9	253
water	102:39	0:0	10	253
water	102:44	0:0	8	;
if	103:12	107:12	8	(ioctl (fd ,CA_GET_MSG ,& ca_msg ) < 0)
cond	103:17	103:52	9	ioctl (fd ,CA_GET_MSG ,& ca_msg ) < 0
call	103:17	103:48	10	ioctl
arg	103:24	103:26	11	fd
water	103:24	0:0	12	fd
arg	103:28	103:38	11	CA_GET_MSG
water	103:28	0:0	12	CA_GET_MSG
arg	103:40	103:48	11	&ca_msg
op	103:40	0:0	12	&
water	103:41	0:0	12	ca_msg
op	103:50	0:0	10	<
water	103:52	0:0	10	0
stmts	104:12	107:12	9	
water	104:12	0:0	10	{
call	105:16	105:69	10	msg_Err
arg	105:25	105:28	11	obj
water	105:25	0:0	12	obj
arg	105:30	105:69	11	"en50221_Init: failed getting message"
water	105:30	0:0	12	"en50221_Init: failed getting message"
water	105:70	0:0	10	;
goto	106:16	106:26	10	error
water	106:21	0:0	11	error
water	107:12	0:0	10	}
call	108:12	108:131	8	msg_Dbg
arg	108:21	108:31	9	p_cam->obj
water	108:21	0:0	10	p_cam
op	108:26	0:0	10	->
water	108:28	0:0	10	obj
arg	108:33	108:74	9	"en50221_Init: Got length: %d, tag: 0x%x"
water	108:33	0:0	10	"en50221_Init: Got length: %d, tag: 0x%x"
arg	108:76	108:89	9	ca_msg.length
water	108:76	0:0	10	ca_msg
op	108:82	0:0	10	.
water	108:83	0:0	10	length
arg	108:91	108:131	9	APDUGetTag(ca_msg.msg,ca_msg.length)
call	108:91	108:129	10	APDUGetTag
arg	108:103	108:113	11	ca_msg.msg
water	108:103	0:0	12	ca_msg
op	108:109	0:0	12	.
water	108:110	0:0	12	msg
arg	108:115	108:129	11	ca_msg.length
water	108:115	0:0	12	ca_msg
op	108:121	0:0	12	.
water	108:122	0:0	12	length
water	108:132	0:0	8	;
water	109:8	0:0	8	}
if	111:8	115:8	6	(ca_msg . msg [ 8 ] == 0 xff && ca_msg . msg [ 9 ] == 0 xff)
cond	111:12	111:55	7	ca_msg . msg [ 8 ] == 0 xff && ca_msg . msg [ 9 ] == 0 xff
water	111:12	0:0	8	ca_msg
op	111:18	0:0	8	.
water	111:19	0:0	8	msg
op	111:22	0:0	8	[
water	111:23	0:0	8	8
op	111:24	0:0	8	]
op	111:26	0:0	8	==
water	111:29	0:0	8	0
water	111:30	0:0	8	xff
op	111:34	0:0	8	&&
water	111:37	0:0	8	ca_msg
op	111:43	0:0	8	.
water	111:44	0:0	8	msg
op	111:47	0:0	8	[
water	111:48	0:0	8	9
op	111:49	0:0	8	]
op	111:51	0:0	8	==
water	111:54	0:0	8	0
water	111:55	0:0	8	xff
stmts	112:8	115:8	7	
water	112:8	0:0	8	{
call	113:12	113:69	8	msg_Err
arg	113:21	113:24	9	obj
water	113:21	0:0	10	obj
arg	113:26	113:69	9	"CAM returns garbage as application info!"
water	113:26	0:0	10	"CAM returns garbage as application info!"
water	113:70	0:0	8	;
goto	114:12	114:22	8	error
water	114:17	0:0	9	error
water	115:8	0:0	8	}
call	117:8	118:50	6	msg_Dbg
arg	117:17	117:20	7	obj
water	117:17	0:0	8	obj
arg	117:22	117:50	7	"found CAM %s using id 0x%x"
water	117:22	0:0	8	"found CAM %s using id 0x%x"
arg	117:52	117:67	7	&ca_msg.msg[12]
op	117:52	0:0	8	&
water	117:53	0:0	8	ca_msg
op	117:59	0:0	8	.
water	117:60	0:0	8	msg
op	117:63	0:0	8	[
water	117:64	0:0	8	12
op	117:66	0:0	8	]
arg	118:17	118:50	7	(ca_msg.msg[8]<<8)|ca_msg.msg[9]
water	118:17	0:0	8	(
water	118:18	0:0	8	ca_msg
op	118:24	0:0	8	.
water	118:25	0:0	8	msg
op	118:28	0:0	8	[
water	118:29	0:0	8	8
op	118:30	0:0	8	]
op	118:31	0:0	8	<<
water	118:33	0:0	8	8
water	118:34	0:0	8	)
op	118:35	0:0	8	|
water	118:36	0:0	8	ca_msg
op	118:42	0:0	8	.
water	118:43	0:0	8	msg
op	118:46	0:0	8	[
water	118:47	0:0	8	9
op	118:48	0:0	8	]
water	118:51	0:0	6	;
water	119:4	0:0	6	}
else	120:4	124:4	2
stmts	121:4	124:4	3	
water	121:4	0:0	4	{
call	122:8	122:51	4	msg_Err
arg	122:17	122:20	5	obj
water	122:17	0:0	6	obj
arg	122:22	122:51	5	"CAM interface incompatible"
water	122:22	0:0	6	"CAM interface incompatible"
water	122:52	0:0	4	;
goto	123:8	123:18	4	error
water	123:13	0:0	5	error
water	124:4	0:0	4	}
return	125:4	125:16	2	p_cam
water	125:11	0:0	3	p_cam
label	126:0	126:5	2	error :
call	127:4	127:16	2	free
arg	127:10	127:16	3	p_cam
water	127:10	0:0	4	p_cam
water	127:17	0:0	2	;
return	128:4	128:15	2	NULL
water	128:11	0:0	3	NULL
