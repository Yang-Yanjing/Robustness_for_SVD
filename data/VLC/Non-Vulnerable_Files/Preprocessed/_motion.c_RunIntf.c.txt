func	2:0	59:0	0	static void *	RunIntf
params	2:20	0:0	1	
param	2:22	2:33	2	void *	data
stmnts	0:0	58:13	1	
decl	4:4	4:32	2	intf_thread_t	*p_intf
op	4:26	0:0	2	=
water	4:28	0:0	2	data
decl	5:4	5:18	2	int	i_oldx
op	5:15	0:0	2	=
water	5:17	0:0	2	0
for	6:4	57:4	2	(;;)
forinit	6:9	6:9	3	;
water	6:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	7:4	57:4	3	
water	7:4	0:0	4	{
decl	8:8	8:28	4	const char	*psz_type
decl	9:8	9:29	4	bool	b_change
op	9:22	0:0	4	=
water	9:24	0:0	4	false
call	12:8	12:32	4	msleep
arg	12:16	12:32	5	INTF_IDLE_SLEEP
water	12:16	0:0	6	INTF_IDLE_SLEEP
water	12:33	0:0	4	;
decl	13:8	13:35	4	int	canc
op	13:17	0:0	4	=
call	13:19	13:34	5	vlc_savecancel
decl	14:8	14:61	4	int	i_x
op	14:16	0:0	4	=
call	14:18	14:60	5	motion_get_angle
arg	14:36	14:60	6	p_intf->p_sys->p_motion
water	14:36	0:0	7	p_intf
op	14:42	0:0	7	->
water	14:44	0:0	7	p_sys
op	14:49	0:0	7	->
water	14:51	0:0	7	p_motion
if	15:8	19:8	4	(i_x < - HIGH_THRESHOLD && i_oldx > - LOW_THRESHOLD)
cond	15:12	15:47	5	i_x < - HIGH_THRESHOLD && i_oldx > - LOW_THRESHOLD
water	15:12	0:0	6	i_x
op	15:16	0:0	6	<
op	15:18	0:0	6	-
water	15:19	0:0	6	HIGH_THRESHOLD
op	15:34	0:0	6	&&
water	15:37	0:0	6	i_oldx
op	15:44	0:0	6	>
op	15:46	0:0	6	-
water	15:47	0:0	6	LOW_THRESHOLD
stmts	16:8	19:8	5	
water	16:8	0:0	6	{
water	17:12	0:0	6	b_change
op	17:21	0:0	6	=
water	17:23	0:0	6	true
water	17:27	0:0	6	;
water	18:12	0:0	6	psz_type
op	18:21	0:0	6	=
water	18:23	0:0	6	"90"
water	18:27	0:0	6	;
water	19:8	0:0	6	}
else	20:8	25:8	4
stmts	20:13	25:8	5	
if	20:13	25:8	6	(( i_x > - LOW_THRESHOLD && i_oldx < - HIGH_THRESHOLD ) || ( i_x < LOW_THRESHOLD && i_oldx > HIGH_THRESHOLD ))
cond	20:17	21:69	7	( i_x > - LOW_THRESHOLD && i_oldx < - HIGH_THRESHOLD ) || ( i_x < LOW_THRESHOLD && i_oldx > HIGH_THRESHOLD )
water	20:17	0:0	8	(
water	20:19	0:0	8	i_x
op	20:23	0:0	8	>
op	20:25	0:0	8	-
water	20:26	0:0	8	LOW_THRESHOLD
op	20:40	0:0	8	&&
water	20:43	0:0	8	i_oldx
op	20:50	0:0	8	<
op	20:52	0:0	8	-
water	20:53	0:0	8	HIGH_THRESHOLD
water	20:68	0:0	8	)
op	21:17	0:0	8	||
water	21:20	0:0	8	(
water	21:22	0:0	8	i_x
op	21:26	0:0	8	<
water	21:28	0:0	8	LOW_THRESHOLD
op	21:42	0:0	8	&&
water	21:45	0:0	8	i_oldx
op	21:52	0:0	8	>
water	21:54	0:0	8	HIGH_THRESHOLD
water	21:69	0:0	8	)
stmts	22:8	25:8	7	
water	22:8	0:0	8	{
water	23:12	0:0	8	b_change
op	23:21	0:0	8	=
water	23:23	0:0	8	true
water	23:27	0:0	8	;
water	24:12	0:0	8	psz_type
op	24:21	0:0	8	=
water	24:23	0:0	8	NULL
water	24:27	0:0	8	;
water	25:8	0:0	8	}
else	26:8	30:8	4
stmts	26:13	30:8	5	
if	26:13	30:8	6	(i_x > HIGH_THRESHOLD && i_oldx < LOW_THRESHOLD)
cond	26:17	26:50	7	i_x > HIGH_THRESHOLD && i_oldx < LOW_THRESHOLD
water	26:17	0:0	8	i_x
op	26:21	0:0	8	>
water	26:23	0:0	8	HIGH_THRESHOLD
op	26:38	0:0	8	&&
water	26:41	0:0	8	i_oldx
op	26:48	0:0	8	<
water	26:50	0:0	8	LOW_THRESHOLD
stmts	27:8	30:8	7	
water	27:8	0:0	8	{
water	28:12	0:0	8	b_change
op	28:21	0:0	8	=
water	28:23	0:0	8	true
water	28:27	0:0	8	;
water	29:12	0:0	8	psz_type
op	29:21	0:0	8	=
water	29:23	0:0	8	"270"
water	29:28	0:0	8	;
water	30:8	0:0	8	}
if	31:8	55:8	4	(b_change)
cond	31:12	31:12	5	b_change
water	31:12	0:0	6	b_change
stmts	32:8	55:8	5	
water	32:8	0:0	6	{
decl	34:12	34:63	6	input_thread_t	*p_input
op	34:36	0:0	6	=
call	34:38	34:62	7	pl_CurrentInput
arg	34:55	34:62	8	p_intf
water	34:55	0:0	9	p_intf
if	35:12	54:12	6	(p_input)
cond	35:16	35:16	7	p_input
water	35:16	0:0	8	p_input
stmts	36:12	54:12	7	
water	36:12	0:0	8	{
decl	37:16	37:37	8	vout_thread_t	*p_vout
water	38:16	0:0	8	p_vout
op	38:23	0:0	8	=
call	38:25	38:48	8	input_GetVout
arg	38:40	38:48	9	p_input
water	38:40	0:0	10	p_input
water	38:49	0:0	8	;
if	39:16	51:16	8	(p_vout)
cond	39:20	39:20	9	p_vout
water	39:20	0:0	10	p_vout
stmts	40:16	51:16	9	
water	40:16	0:0	10	{
if	41:20	45:20	10	(psz_type != NULL)
cond	41:24	41:36	11	psz_type != NULL
water	41:24	0:0	12	psz_type
op	41:33	0:0	12	!=
water	41:36	0:0	12	NULL
stmts	42:20	45:20	11	
water	42:20	0:0	12	{
call	43:24	43:77	12	var_Create
arg	43:36	43:42	13	p_vout
water	43:36	0:0	14	p_vout
arg	43:44	43:60	13	"transform-type"
water	43:44	0:0	14	"transform-type"
arg	43:62	43:77	13	VLC_VAR_STRING
water	43:62	0:0	14	VLC_VAR_STRING
water	43:78	0:0	12	;
call	44:24	44:74	12	var_SetString
arg	44:39	44:45	13	p_vout
water	44:39	0:0	14	p_vout
arg	44:47	44:63	13	"transform-type"
water	44:47	0:0	14	"transform-type"
arg	44:65	44:74	13	psz_type
water	44:65	0:0	14	psz_type
water	44:75	0:0	12	;
water	45:20	0:0	12	}
else	46:20	47:63	10
stmts	47:24	47:63	11	
call	47:24	47:62	12	var_Destroy
arg	47:37	47:43	13	p_vout
water	47:37	0:0	14	p_vout
arg	47:45	47:62	13	"transform-type"
water	47:45	0:0	14	"transform-type"
water	47:63	0:0	12	;
call	48:20	49:71	10	var_SetString
arg	48:35	48:41	11	p_vout
water	48:35	0:0	12	p_vout
arg	48:43	48:57	11	"video-filter"
water	48:43	0:0	12	"video-filter"
arg	49:35	49:71	11	psz_type!=NULL?"transform":""
water	49:35	0:0	12	psz_type
op	49:44	0:0	12	!=
water	49:47	0:0	12	NULL
water	49:52	0:0	12	?
water	49:54	0:0	12	"transform"
water	49:66	0:0	12	:
water	49:68	0:0	12	""
water	49:72	0:0	10	;
call	50:20	50:47	10	vlc_object_release
arg	50:40	50:47	11	p_vout
water	50:40	0:0	12	p_vout
water	50:48	0:0	10	;
water	51:16	0:0	10	}
call	52:16	52:44	8	vlc_object_release
arg	52:36	52:44	9	p_input
water	52:36	0:0	10	p_input
water	52:45	0:0	8	;
water	53:16	0:0	8	i_oldx
op	53:23	0:0	8	=
water	53:25	0:0	8	i_x
water	53:28	0:0	8	;
water	54:12	0:0	8	}
water	55:8	0:0	6	}
call	56:8	56:32	4	vlc_restorecancel
arg	56:27	56:32	5	canc
water	56:27	0:0	6	canc
water	56:33	0:0	4	;
water	57:4	0:0	4	}
call	58:4	58:12	2	assert
arg	58:11	58:12	3	0
water	58:11	0:0	4	0
water	58:13	0:0	2	;
