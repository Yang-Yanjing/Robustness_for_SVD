func	2:0	145:0	0	int	net_Connect
params	2:15	0:0	1	
param	2:17	2:37	2	vlc_object_t *	p_this
param	2:39	2:59	2	const char *	psz_host
param	2:61	2:71	2	int	i_port
param	3:17	3:25	2	int	type
param	3:27	3:37	2	int	proto
stmnts	0:0	144:19	1	
decl	5:4	5:33	2	const char	*psz_realhost
decl	6:4	6:30	2	char	*psz_socks
decl	7:4	7:45	2	int	i_realport
water	7:30	0:0	2	,
decl	7:4	7:45	2	int	i_handle
op	7:41	0:0	2	=
op	7:43	0:0	2	-
water	7:44	0:0	2	1
decl	8:4	8:43	2	int	evfd
op	8:13	0:0	2	=
call	8:15	8:42	3	vlc_object_waitpipe
arg	8:36	8:42	4	p_this
water	8:36	0:0	5	p_this
if	9:4	10:17	2	(evfd == - 1)
cond	9:8	9:17	3	evfd == - 1
water	9:8	0:0	4	evfd
op	9:13	0:0	4	==
op	9:16	0:0	4	-
water	9:17	0:0	4	1
stmts	10:8	10:17	3	
return	10:8	10:17	4	-1
op	10:15	0:0	5	-
water	10:16	0:0	5	1
water	11:4	0:0	2	psz_socks
op	11:14	0:0	2	=
call	11:16	11:51	2	var_InheritString
arg	11:35	11:41	3	p_this
water	11:35	0:0	4	p_this
arg	11:43	11:51	3	"socks"
water	11:43	0:0	4	"socks"
water	11:52	0:0	2	;
if	12:4	45:4	2	(psz_socks != NULL)
cond	12:8	12:21	3	psz_socks != NULL
water	12:8	0:0	4	psz_socks
op	12:18	0:0	4	!=
water	12:21	0:0	4	NULL
stmts	13:4	45:4	3	
water	13:4	0:0	4	{
decl	14:8	14:44	4	char	*psz
op	14:18	0:0	4	=
call	14:20	14:43	5	strchr
arg	14:28	14:37	6	psz_socks
water	14:28	0:0	7	psz_socks
arg	14:39	14:43	6	':'
water	14:39	0:0	7	':'
if	15:8	16:25	4	(psz)
cond	15:12	15:12	5	psz
water	15:12	0:0	6	psz
stmts	16:12	16:25	5	
op	16:12	0:0	6	*
water	16:13	0:0	6	psz
op	16:16	0:0	6	++
op	16:19	0:0	6	=
water	16:21	0:0	6	'\0'
water	16:25	0:0	6	;
water	17:8	0:0	4	psz_realhost
op	17:21	0:0	4	=
water	17:23	0:0	4	psz_socks
water	17:32	0:0	4	;
water	18:8	0:0	4	i_realport
op	18:19	0:0	4	=
water	18:21	0:0	4	(
water	18:23	0:0	4	psz
op	18:27	0:0	4	!=
water	18:30	0:0	4	NULL
water	18:35	0:0	4	)
water	18:37	0:0	4	?
call	18:39	18:49	4	atoi
arg	18:45	18:49	5	psz
water	18:45	0:0	6	psz
water	18:51	0:0	4	:
water	18:53	0:0	4	1080
water	18:57	0:0	4	;
call	19:8	21:34	4	msg_Dbg
arg	19:17	19:23	5	p_this
water	19:17	0:0	6	p_this
arg	19:25	20:33	5	"net: connecting to %s port %d (SOCKS) ""for %s port %d"
water	19:25	0:0	6	"net: connecting to %s port %d (SOCKS) "
water	20:17	0:0	6	"for %s port %d"
arg	20:35	20:47	5	psz_realhost
water	20:35	0:0	6	psz_realhost
arg	20:49	20:59	5	i_realport
water	20:49	0:0	6	i_realport
arg	21:17	21:25	5	psz_host
water	21:17	0:0	6	psz_host
arg	21:27	21:34	5	i_port
water	21:27	0:0	6	i_port
water	21:35	0:0	4	;
switch	23:8	33:8	4	(type)
cond	23:16	23:16	5	type
water	23:16	0:0	6	type
stmts	24:8	33:8	5	
water	24:8	0:0	6	{
label	25:12	25:18	6	case 0 :
water	26:16	0:0	6	type
op	26:21	0:0	6	=
water	26:23	0:0	6	SOCK_STREAM
water	26:34	0:0	6	;
label	27:12	27:28	6	case SOCK_STREAM :
break	28:16	28:21	6	
label	29:12	29:19	6	default :
call	30:16	30:75	6	msg_Err
arg	30:25	30:31	7	p_this
water	30:25	0:0	8	p_this
arg	30:33	30:75	7	"Socket type not supported through SOCKS"
water	30:33	0:0	8	"Socket type not supported through SOCKS"
water	30:76	0:0	6	;
call	31:16	31:32	6	free
arg	31:22	31:32	7	psz_socks
water	31:22	0:0	8	psz_socks
water	31:33	0:0	6	;
return	32:16	32:25	6	-1
op	32:23	0:0	7	-
water	32:24	0:0	7	1
water	33:8	0:0	6	}
switch	34:8	44:8	4	(proto)
cond	34:16	34:16	5	proto
water	34:16	0:0	6	proto
stmts	35:8	44:8	5	
water	35:8	0:0	6	{
label	36:12	36:18	6	case 0 :
water	37:16	0:0	6	proto
op	37:22	0:0	6	=
water	37:24	0:0	6	IPPROTO_TCP
water	37:35	0:0	6	;
label	38:12	38:28	6	case IPPROTO_TCP :
break	39:16	39:21	6	
label	40:12	40:19	6	default :
call	41:16	41:73	6	msg_Err
arg	41:25	41:31	7	p_this
water	41:25	0:0	8	p_this
arg	41:33	41:73	7	"Transport not supported through SOCKS"
water	41:33	0:0	8	"Transport not supported through SOCKS"
water	41:74	0:0	6	;
call	42:16	42:32	6	free
arg	42:22	42:32	7	psz_socks
water	42:22	0:0	8	psz_socks
water	42:33	0:0	6	;
return	43:16	43:25	6	-1
op	43:23	0:0	7	-
water	43:24	0:0	7	1
water	44:8	0:0	6	}
water	45:4	0:0	4	}
else	46:4	52:4	2
stmts	47:4	52:4	3	
water	47:4	0:0	4	{
water	48:8	0:0	4	psz_realhost
op	48:21	0:0	4	=
water	48:23	0:0	4	psz_host
water	48:31	0:0	4	;
water	49:8	0:0	4	i_realport
op	49:19	0:0	4	=
water	49:21	0:0	4	i_port
water	49:27	0:0	4	;
call	50:8	51:28	4	msg_Dbg
arg	50:17	50:23	5	p_this
water	50:17	0:0	6	p_this
arg	50:25	50:56	5	"net: connecting to %s port %d"
water	50:25	0:0	6	"net: connecting to %s port %d"
arg	50:58	50:70	5	psz_realhost
water	50:58	0:0	6	psz_realhost
arg	51:17	51:28	5	i_realport
water	51:17	0:0	6	i_realport
water	51:29	0:0	4	;
water	52:4	0:0	4	}
decl	53:4	57:11	2	struct addrinfo	hints
op	53:26	0:0	2	=
water	53:28	0:0	2	{
op	54:8	0:0	2	.
water	54:9	0:0	2	ai_socktype
op	54:21	0:0	2	=
water	54:23	0:0	2	type
water	54:27	0:0	2	,
op	55:8	0:0	2	.
water	55:9	0:0	2	ai_protocol
op	55:21	0:0	2	=
water	55:23	0:0	2	proto
water	55:28	0:0	2	,
op	56:8	0:0	2	.
water	56:9	0:0	2	ai_flags
op	56:18	0:0	2	=
water	56:20	0:0	2	AI_NUMERICSERV
op	56:35	0:0	2	|
water	56:37	0:0	2	AI_IDN
water	56:43	0:0	2	,
water	57:4	0:0	2	}
water	57:5	0:0	2	,
decl	53:4	57:11	2	struct addrinfo	*res
decl	58:4	58:70	2	int	val
op	58:12	0:0	2	=
call	58:14	58:69	3	vlc_getaddrinfo
arg	58:31	58:43	4	psz_realhost
water	58:31	0:0	5	psz_realhost
arg	58:45	58:55	4	i_realport
water	58:45	0:0	5	i_realport
arg	58:57	58:63	4	&hints
op	58:57	0:0	5	&
water	58:58	0:0	5	hints
arg	58:65	58:69	4	&res
op	58:65	0:0	5	&
water	58:66	0:0	5	res
if	59:4	65:4	2	(val)
cond	59:8	59:8	3	val
water	59:8	0:0	4	val
stmts	60:4	65:4	3	
water	60:4	0:0	4	{
call	61:8	62:47	4	msg_Err
arg	61:17	61:23	5	p_this
water	61:17	0:0	6	p_this
arg	61:25	61:57	5	"cannot resolve %s port %d : %s"
water	61:25	0:0	6	"cannot resolve %s port %d : %s"
arg	61:59	61:71	5	psz_realhost
water	61:59	0:0	6	psz_realhost
arg	62:17	62:27	5	i_realport
water	62:17	0:0	6	i_realport
arg	62:29	62:47	5	gai_strerror(val)
call	62:29	62:46	6	gai_strerror
arg	62:43	62:46	7	val
water	62:43	0:0	8	val
water	62:48	0:0	4	;
call	63:8	63:24	4	free
arg	63:14	63:24	5	psz_socks
water	63:14	0:0	6	psz_socks
water	63:25	0:0	4	;
return	64:8	64:17	4	-1
op	64:15	0:0	5	-
water	64:16	0:0	5	1
water	65:4	0:0	4	}
call	66:4	66:20	2	free
arg	66:10	66:20	3	psz_socks
water	66:10	0:0	4	psz_socks
water	66:21	0:0	2	;
decl	67:4	67:61	2	int	timeout
op	67:16	0:0	2	=
call	67:18	67:60	3	var_InheritInteger
arg	67:38	67:44	4	p_this
water	67:38	0:0	5	p_this
arg	67:46	67:60	4	"ipv4-timeout"
water	67:46	0:0	5	"ipv4-timeout"
if	68:4	69:20	2	(timeout < 0)
cond	68:8	68:18	3	timeout < 0
water	68:8	0:0	4	timeout
op	68:16	0:0	4	<
water	68:18	0:0	4	0
stmts	69:8	69:20	3	
water	69:8	0:0	4	timeout
op	69:16	0:0	4	=
op	69:18	0:0	4	-
water	69:19	0:0	4	1
water	69:20	0:0	4	;
for	70:4	125:4	2	( struct addrinfo * ptr = res ;ptr != NULL;ptr = ptr -> ai_next)
forinit	0:0	70:35	3	 struct addrinfo * ptr = res ;
decl	70:9	70:35	4	struct addrinfo	*ptr
op	70:30	0:0	4	=
water	70:32	0:0	4	res
cond	70:37	70:44	3	ptr != NULL
water	70:37	0:0	4	ptr
op	70:41	0:0	4	!=
water	70:44	0:0	4	NULL
forexpr	70:50	70:61	3	ptr = ptr -> ai_next
water	70:50	0:0	4	ptr
op	70:54	0:0	4	=
water	70:56	0:0	4	ptr
op	70:59	0:0	4	->
water	70:61	0:0	4	ai_next
stmts	71:4	125:4	3	
water	71:4	0:0	4	{
decl	72:8	73:65	4	int	fd
op	72:15	0:0	4	=
call	72:17	73:64	5	net_Socket
arg	72:29	72:35	6	p_this
water	72:29	0:0	7	p_this
arg	72:37	72:51	6	ptr->ai_family
water	72:37	0:0	7	ptr
op	72:40	0:0	7	->
water	72:42	0:0	7	ai_family
arg	73:29	73:45	6	ptr->ai_socktype
water	73:29	0:0	7	ptr
op	73:32	0:0	7	->
water	73:34	0:0	7	ai_socktype
arg	73:47	73:64	6	ptr->ai_protocol
water	73:47	0:0	7	ptr
op	73:50	0:0	7	->
water	73:52	0:0	7	ai_protocol
if	74:8	78:8	4	(fd == - 1)
cond	74:12	74:19	5	fd == - 1
water	74:12	0:0	6	fd
op	74:15	0:0	6	==
op	74:18	0:0	6	-
water	74:19	0:0	6	1
stmts	75:8	78:8	5	
water	75:8	0:0	6	{
call	76:12	76:75	6	msg_Dbg
arg	76:21	76:27	7	p_this
water	76:21	0:0	8	p_this
arg	76:29	76:47	7	"socket error: %s"
water	76:29	0:0	8	"socket error: %s"
arg	76:49	76:75	7	vlc_strerror_c(net_errno)
call	76:49	76:73	8	vlc_strerror_c
arg	76:64	76:73	9	net_errno
water	76:64	0:0	10	net_errno
water	76:76	0:0	6	;
continue	77:12	77:20	6	
water	78:8	0:0	6	}
if	79:8	118:8	4	(connect (fd ,ptr -> ai_addr ,ptr -> ai_addrlen ))
cond	79:12	79:55	5	connect (fd ,ptr -> ai_addr ,ptr -> ai_addrlen )
call	79:12	79:55	6	connect
arg	79:21	79:23	7	fd
water	79:21	0:0	8	fd
arg	79:25	79:37	7	ptr->ai_addr
water	79:25	0:0	8	ptr
op	79:28	0:0	8	->
water	79:30	0:0	8	ai_addr
arg	79:39	79:55	7	ptr->ai_addrlen
water	79:39	0:0	8	ptr
op	79:42	0:0	8	->
water	79:44	0:0	8	ai_addrlen
stmts	80:8	118:8	5	
water	80:8	0:0	6	{
decl	81:12	81:19	6	int	val
if	82:12	87:12	6	(net_errno != EINPROGRESS && net_errno != EINTR)
cond	82:16	82:57	7	net_errno != EINPROGRESS && net_errno != EINTR
water	82:16	0:0	8	net_errno
op	82:26	0:0	8	!=
water	82:29	0:0	8	EINPROGRESS
op	82:41	0:0	8	&&
water	82:44	0:0	8	net_errno
op	82:54	0:0	8	!=
water	82:57	0:0	8	EINTR
stmts	83:12	87:12	7	
water	83:12	0:0	8	{
call	84:16	85:51	8	msg_Err
arg	84:25	84:31	9	p_this
water	84:25	0:0	10	p_this
arg	84:33	84:56	9	"connection failed: %s"
water	84:33	0:0	10	"connection failed: %s"
arg	85:25	85:51	9	vlc_strerror_c(net_errno)
call	85:25	85:49	10	vlc_strerror_c
arg	85:40	85:49	11	net_errno
water	85:40	0:0	12	net_errno
water	85:52	0:0	8	;
goto	86:16	86:28	8	next_ai
water	86:21	0:0	9	next_ai
water	87:12	0:0	8	}
decl	88:12	91:13	6	struct pollfd	ufd[2]
op	88:33	0:0	6	=
water	88:35	0:0	6	{
water	89:16	0:0	6	{
op	89:18	0:0	6	.
water	89:19	0:0	6	fd
op	89:22	0:0	6	=
water	89:24	0:0	6	fd
water	89:26	0:0	6	,
op	89:30	0:0	6	.
water	89:31	0:0	6	events
op	89:38	0:0	6	=
water	89:40	0:0	6	POLLOUT
water	89:48	0:0	6	}
water	89:49	0:0	6	,
water	90:16	0:0	6	{
op	90:18	0:0	6	.
water	90:19	0:0	6	fd
op	90:22	0:0	6	=
water	90:24	0:0	6	evfd
water	90:28	0:0	6	,
op	90:30	0:0	6	.
water	90:31	0:0	6	events
op	90:38	0:0	6	=
water	90:40	0:0	6	POLLIN
water	90:47	0:0	6	}
water	90:48	0:0	6	,
water	91:12	0:0	6	}
do	92:12	94:73	6	(( val == - 1 ) && ( net_errno == EINTR ))
cond	95:19	95:53	7	( val == - 1 ) && ( net_errno == EINTR )
water	95:19	0:0	8	(
water	95:20	0:0	8	val
op	95:24	0:0	8	==
op	95:27	0:0	8	-
water	95:28	0:0	8	1
water	95:29	0:0	8	)
op	95:31	0:0	8	&&
water	95:34	0:0	8	(
water	95:35	0:0	8	net_errno
op	95:45	0:0	8	==
water	95:48	0:0	8	EINTR
water	95:53	0:0	8	)
stmts	94:16	94:73	7	
water	94:16	0:0	8	val
op	94:20	0:0	8	=
call	94:22	94:72	8	poll
arg	94:28	94:31	9	ufd
water	94:28	0:0	10	ufd
arg	94:33	94:63	9	sizeof(ufd)/sizeof(ufd[0])
op	94:33	0:0	10	sizeof
water	94:40	0:0	10	(
water	94:41	0:0	10	ufd
water	94:44	0:0	10	)
op	94:46	0:0	10	/
op	94:48	0:0	10	sizeof
water	94:55	0:0	10	(
water	94:56	0:0	10	ufd
op	94:59	0:0	10	[
water	94:60	0:0	10	0
op	94:61	0:0	10	]
water	94:62	0:0	10	)
arg	94:65	94:72	9	timeout
water	94:65	0:0	10	timeout
water	94:73	0:0	8	;
water	95:55	0:0	6	;
switch	96:12	108:12	6	(val)
cond	96:20	96:20	7	val
water	96:20	0:0	8	val
stmts	97:12	108:12	7	
water	97:12	0:0	8	{
water	98:17	0:0	8	case
op	98:22	0:0	8	-
water	98:23	0:0	8	1
water	98:24	0:0	8	:
call	99:21	100:55	8	msg_Err
arg	99:30	99:36	9	p_this
water	99:30	0:0	10	p_this
arg	99:38	99:57	9	"polling error: %s"
water	99:38	0:0	10	"polling error: %s"
arg	100:30	100:55	9	vlc_strerror_c(net_errno)
call	100:30	100:54	10	vlc_strerror_c
arg	100:45	100:54	11	net_errno
water	100:45	0:0	12	net_errno
water	100:56	0:0	8	;
goto	101:21	101:33	8	next_ai
water	101:26	0:0	9	next_ai
label	102:17	102:23	8	case 0 :
call	103:21	103:61	8	msg_Warn
arg	103:31	103:37	9	p_this
water	103:31	0:0	10	p_this
arg	103:39	103:61	9	"connection timed out"
water	103:39	0:0	10	"connection timed out"
water	103:62	0:0	8	;
goto	104:21	104:33	8	next_ai
water	104:26	0:0	9	next_ai
label	105:17	105:24	8	default :
if	106:21	107:37	8	(ufd [ 1 ] . revents)
cond	106:25	106:32	9	ufd [ 1 ] . revents
water	106:25	0:0	10	ufd
op	106:28	0:0	10	[
water	106:29	0:0	10	1
op	106:30	0:0	10	]
op	106:31	0:0	10	.
water	106:32	0:0	10	revents
stmts	107:25	107:37	9	
goto	107:25	107:37	10	next_ai
water	107:30	0:0	11	next_ai
water	108:12	0:0	8	}
if	111:12	117:12	6	(getsockopt (fd ,SOL_SOCKET ,SO_ERROR ,& val ,& ( socklen_t ) { sizeof ( val ) } ) || val)
cond	111:16	112:61	7	getsockopt (fd ,SOL_SOCKET ,SO_ERROR ,& val ,& ( socklen_t ) { sizeof ( val ) } ) || val
call	111:16	112:56	8	getsockopt
arg	111:28	111:30	9	fd
water	111:28	0:0	10	fd
arg	111:32	111:42	9	SOL_SOCKET
water	111:32	0:0	10	SOL_SOCKET
arg	111:44	111:52	9	SO_ERROR
water	111:44	0:0	10	SO_ERROR
arg	111:54	111:58	9	&val
op	111:54	0:0	10	&
water	111:55	0:0	10	val
arg	112:28	112:56	9	&(socklen_t){sizeof(val)}
op	112:28	0:0	10	&
water	112:29	0:0	10	(
water	112:30	0:0	10	socklen_t
water	112:39	0:0	10	)
water	112:40	0:0	10	{
op	112:42	0:0	10	sizeof
water	112:49	0:0	10	(
water	112:50	0:0	10	val
water	112:53	0:0	10	)
water	112:55	0:0	10	}
op	112:58	0:0	8	||
water	112:61	0:0	8	val
stmts	113:12	117:12	7	
water	113:12	0:0	8	{
call	114:16	115:44	8	msg_Err
arg	114:25	114:31	9	p_this
water	114:25	0:0	10	p_this
arg	114:33	114:56	9	"connection failed: %s"
water	114:33	0:0	10	"connection failed: %s"
arg	115:25	115:44	9	vlc_strerror_c(val)
call	115:25	115:43	10	vlc_strerror_c
arg	115:40	115:43	11	val
water	115:40	0:0	12	val
water	115:45	0:0	8	;
goto	116:16	116:28	8	next_ai
water	116:21	0:0	9	next_ai
water	117:12	0:0	8	}
water	118:8	0:0	6	}
call	119:8	119:66	4	msg_Dbg
arg	119:17	119:23	5	p_this
water	119:17	0:0	6	p_this
arg	119:25	119:61	5	"connection succeeded (socket = %d)"
water	119:25	0:0	6	"connection succeeded (socket = %d)"
arg	119:63	119:66	5	fd
water	119:63	0:0	6	fd
water	119:67	0:0	4	;
water	120:8	0:0	4	i_handle
op	120:17	0:0	4	=
water	120:19	0:0	4	fd
water	120:21	0:0	4	;
break	121:8	121:13	4	
label	122:0	122:7	4	next_ai :
call	123:8	123:22	4	net_Close
arg	123:19	123:22	5	fd
water	123:19	0:0	6	fd
water	123:23	0:0	4	;
continue	124:8	124:16	4	
water	125:4	0:0	4	}
call	126:4	126:22	2	freeaddrinfo
arg	126:18	126:22	3	res
water	126:18	0:0	4	res
water	126:23	0:0	2	;
if	127:4	128:17	2	(i_handle == - 1)
cond	127:8	127:21	3	i_handle == - 1
water	127:8	0:0	4	i_handle
op	127:17	0:0	4	==
op	127:20	0:0	4	-
water	127:21	0:0	4	1
stmts	128:8	128:17	3	
return	128:8	128:17	4	-1
op	128:15	0:0	5	-
water	128:16	0:0	5	1
if	129:4	143:4	2	(psz_socks != NULL)
cond	129:8	129:21	3	psz_socks != NULL
water	129:8	0:0	4	psz_socks
op	129:18	0:0	4	!=
water	129:21	0:0	4	NULL
stmts	130:4	143:4	3	
water	130:4	0:0	4	{
decl	132:8	132:66	4	char	*psz_user
op	132:23	0:0	4	=
call	132:25	132:65	5	var_InheritString
arg	132:44	132:50	6	p_this
water	132:44	0:0	7	p_this
arg	132:52	132:65	6	"socks-user"
water	132:52	0:0	7	"socks-user"
decl	133:8	133:65	4	char	*psz_pwd
op	133:23	0:0	4	=
call	133:25	133:64	5	var_InheritString
arg	133:44	133:50	6	p_this
water	133:44	0:0	7	p_this
arg	133:52	133:64	6	"socks-pwd"
water	133:52	0:0	7	"socks-pwd"
if	134:8	140:8	4	(SocksHandshakeTCP (p_this ,i_handle ,5 ,psz_user ,psz_pwd ,psz_host ,i_port ))
cond	134:12	135:48	5	SocksHandshakeTCP (p_this ,i_handle ,5 ,psz_user ,psz_pwd ,psz_host ,i_port )
call	134:12	135:48	6	SocksHandshakeTCP
arg	134:31	134:37	7	p_this
water	134:31	0:0	8	p_this
arg	134:39	134:47	7	i_handle
water	134:39	0:0	8	i_handle
arg	134:49	134:50	7	5
water	134:49	0:0	8	5
arg	134:52	134:60	7	psz_user
water	134:52	0:0	8	psz_user
arg	134:62	134:69	7	psz_pwd
water	134:62	0:0	8	psz_pwd
arg	135:31	135:39	7	psz_host
water	135:31	0:0	8	psz_host
arg	135:41	135:48	7	i_port
water	135:41	0:0	8	i_port
stmts	136:8	140:8	5	
water	136:8	0:0	6	{
call	137:12	137:54	6	msg_Err
arg	137:21	137:27	7	p_this
water	137:21	0:0	8	p_this
arg	137:29	137:54	7	"SOCKS handshake failed"
water	137:29	0:0	8	"SOCKS handshake failed"
water	137:55	0:0	6	;
call	138:12	138:32	6	net_Close
arg	138:23	138:32	7	i_handle
water	138:23	0:0	8	i_handle
water	138:33	0:0	6	;
water	139:12	0:0	6	i_handle
op	139:21	0:0	6	=
op	139:23	0:0	6	-
water	139:24	0:0	6	1
water	139:25	0:0	6	;
water	140:8	0:0	6	}
call	141:8	141:23	4	free
arg	141:14	141:23	5	psz_user
water	141:14	0:0	6	psz_user
water	141:24	0:0	4	;
call	142:8	142:22	4	free
arg	142:14	142:22	5	psz_pwd
water	142:14	0:0	6	psz_pwd
water	142:23	0:0	4	;
water	143:4	0:0	4	}
return	144:4	144:19	2	i_handle
water	144:11	0:0	3	i_handle
