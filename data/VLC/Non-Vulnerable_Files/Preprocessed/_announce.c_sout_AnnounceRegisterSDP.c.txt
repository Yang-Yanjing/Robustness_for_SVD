func	1:0	44:0	0	session_descriptor_t *	sout_AnnounceRegisterSDP
params	2:24	0:0	1	
param	2:26	2:43	2	vlc_object_t *	obj
param	2:45	2:64	2	const char *	psz_sdp
param	3:26	3:46	2	const char *	psz_dst
stmnts	0:0	43:15	1	
decl	5:4	5:70	2	session_descriptor_t	*p_session
op	5:36	0:0	2	=
call	5:38	5:69	3	calloc
arg	5:46	5:47	4	1
water	5:46	0:0	5	1
arg	5:49	5:69	4	sizeof(*p_session)
op	5:49	0:0	5	sizeof
water	5:56	0:0	5	(
op	5:57	0:0	5	*
water	5:58	0:0	5	p_session
water	5:67	0:0	5	)
if	6:4	7:19	2	(! p_session)
cond	6:8	6:9	3	! p_session
op	6:8	0:0	4	!
water	6:9	0:0	4	p_session
stmts	7:8	7:19	3	
return	7:8	7:19	4	NULL
water	7:15	0:0	5	NULL
water	8:4	0:0	2	p_session
op	8:13	0:0	2	->
water	8:15	0:0	2	psz_sdp
op	8:23	0:0	2	=
call	8:25	8:41	2	strdup
arg	8:33	8:41	3	psz_sdp
water	8:33	0:0	4	psz_sdp
water	8:42	0:0	2	;
decl	10:4	10:24	2	struct addrinfo	*res
if	11:4	17:4	2	(vlc_getaddrinfo (psz_dst ,0 ,NULL ,& res ) == 0)
cond	11:8	11:52	3	vlc_getaddrinfo (psz_dst ,0 ,NULL ,& res ) == 0
call	11:8	11:47	4	vlc_getaddrinfo
arg	11:25	11:32	5	psz_dst
water	11:25	0:0	6	psz_dst
arg	11:34	11:35	5	0
water	11:34	0:0	6	0
arg	11:37	11:41	5	NULL
water	11:37	0:0	6	NULL
arg	11:43	11:47	5	&res
op	11:43	0:0	6	&
water	11:44	0:0	6	res
op	11:49	0:0	4	==
water	11:52	0:0	4	0
stmts	12:4	17:4	3	
water	12:4	0:0	4	{
if	13:8	15:57	4	(res -> ai_addrlen <= sizeof ( p_session -> addr ))
cond	13:12	13:54	5	res -> ai_addrlen <= sizeof ( p_session -> addr )
water	13:12	0:0	6	res
op	13:15	0:0	6	->
water	13:17	0:0	6	ai_addrlen
op	13:28	0:0	6	<=
op	13:31	0:0	6	sizeof
water	13:38	0:0	6	(
water	13:39	0:0	6	p_session
op	13:48	0:0	6	->
water	13:50	0:0	6	addr
water	13:54	0:0	6	)
stmts	14:12	15:57	5	
call	14:12	15:56	6	memcpy
arg	14:20	14:36	7	&p_session->addr
op	14:20	0:0	8	&
water	14:21	0:0	8	p_session
op	14:30	0:0	8	->
water	14:32	0:0	8	addr
arg	14:38	14:50	7	res->ai_addr
water	14:38	0:0	8	res
op	14:41	0:0	8	->
water	14:43	0:0	8	ai_addr
arg	15:20	15:56	7	p_session->addrlen=res->ai_addrlen
water	15:20	0:0	8	p_session
op	15:29	0:0	8	->
water	15:31	0:0	8	addrlen
op	15:39	0:0	8	=
water	15:41	0:0	8	res
op	15:44	0:0	8	->
water	15:46	0:0	8	ai_addrlen
water	15:57	0:0	6	;
call	16:8	16:25	4	freeaddrinfo
arg	16:22	16:25	5	res
water	16:22	0:0	6	res
water	16:26	0:0	4	;
water	17:4	0:0	4	}
call	18:4	18:30	2	vlc_mutex_lock
arg	18:20	18:30	3	&sap_mutex
op	18:20	0:0	4	&
water	18:21	0:0	4	sap_mutex
water	18:31	0:0	2	;
decl	19:4	19:61	2	sap_handler_t	*p_sap
op	19:25	0:0	2	=
call	19:27	19:53	3	libvlc_priv
arg	19:40	19:53	4	obj->p_libvlc
water	19:40	0:0	5	obj
op	19:43	0:0	5	->
water	19:45	0:0	5	p_libvlc
op	19:54	0:0	2	->
water	19:56	0:0	2	p_sap
if	20:4	25:4	2	(p_sap == NULL)
cond	20:8	20:17	3	p_sap == NULL
water	20:8	0:0	4	p_sap
op	20:14	0:0	4	==
water	20:17	0:0	4	NULL
stmts	21:4	25:4	3	
water	21:4	0:0	4	{
water	22:8	0:0	4	p_sap
op	22:14	0:0	4	=
call	22:16	22:54	4	SAP_Create
arg	22:28	22:54	5	VLC_OBJECT(obj->p_libvlc)
call	22:28	22:53	6	VLC_OBJECT
arg	22:40	22:53	7	obj->p_libvlc
water	22:40	0:0	8	obj
op	22:43	0:0	8	->
water	22:45	0:0	8	p_libvlc
water	22:55	0:0	4	;
call	23:8	23:34	4	libvlc_priv
arg	23:21	23:34	5	obj->p_libvlc
water	23:21	0:0	6	obj
op	23:24	0:0	6	->
water	23:26	0:0	6	p_libvlc
op	23:35	0:0	4	->
water	23:37	0:0	4	p_sap
op	23:43	0:0	4	=
water	23:45	0:0	4	p_sap
water	23:50	0:0	4	;
call	24:8	24:69	4	vlc_object_set_destructor
arg	24:35	24:56	5	(vlc_object_t*)p_sap
water	24:35	0:0	6	(
water	24:36	0:0	6	vlc_object_t
op	24:49	0:0	6	*
water	24:50	0:0	6	)
water	24:51	0:0	6	p_sap
arg	24:58	24:69	5	sap_destroy
water	24:58	0:0	6	sap_destroy
water	24:70	0:0	4	;
water	25:4	0:0	4	}
else	26:4	27:47	2
stmts	27:8	27:47	3	
call	27:8	27:46	4	vlc_object_hold
arg	27:25	27:46	5	(vlc_object_t*)p_sap
water	27:25	0:0	6	(
water	27:26	0:0	6	vlc_object_t
op	27:39	0:0	6	*
water	27:40	0:0	6	)
water	27:41	0:0	6	p_sap
water	27:47	0:0	4	;
call	28:4	28:32	2	vlc_mutex_unlock
arg	28:22	28:32	3	&sap_mutex
op	28:22	0:0	4	&
water	28:23	0:0	4	sap_mutex
water	28:33	0:0	2	;
if	29:4	30:18	2	(p_sap == NULL)
cond	29:8	29:17	3	p_sap == NULL
water	29:8	0:0	4	p_sap
op	29:14	0:0	4	==
water	29:17	0:0	4	NULL
stmts	30:8	30:18	3	
goto	30:8	30:18	4	error
water	30:13	0:0	5	error
call	31:4	31:38	2	msg_Dbg
arg	31:13	31:16	3	obj
water	31:13	0:0	4	obj
arg	31:18	31:38	3	"adding SAP session"
water	31:18	0:0	4	"adding SAP session"
water	31:39	0:0	2	;
if	32:4	38:4	2	(SAP_Add (p_sap ,p_session ))
cond	32:8	32:33	3	SAP_Add (p_sap ,p_session )
call	32:8	32:33	4	SAP_Add
arg	32:17	32:22	5	p_sap
water	32:17	0:0	6	p_sap
arg	32:24	32:33	5	p_session
water	32:24	0:0	6	p_session
stmts	33:4	38:4	3	
water	33:4	0:0	4	{
call	34:8	34:34	4	vlc_mutex_lock
arg	34:24	34:34	5	&sap_mutex
op	34:24	0:0	6	&
water	34:25	0:0	6	sap_mutex
water	34:35	0:0	4	;
call	35:8	35:49	4	vlc_object_release
arg	35:28	35:49	5	(vlc_object_t*)p_sap
water	35:28	0:0	6	(
water	35:29	0:0	6	vlc_object_t
op	35:42	0:0	6	*
water	35:43	0:0	6	)
water	35:44	0:0	6	p_sap
water	35:50	0:0	4	;
call	36:8	36:36	4	vlc_mutex_unlock
arg	36:26	36:36	5	&sap_mutex
op	36:26	0:0	6	&
water	36:27	0:0	6	sap_mutex
water	36:37	0:0	4	;
goto	37:8	37:18	4	error
water	37:13	0:0	5	error
water	38:4	0:0	4	}
return	39:4	39:20	2	p_session
water	39:11	0:0	3	p_session
label	40:0	40:5	2	error :
call	41:4	41:28	2	free
arg	41:10	41:28	3	p_session->psz_sdp
water	41:10	0:0	4	p_session
op	41:19	0:0	4	->
water	41:21	0:0	4	psz_sdp
water	41:29	0:0	2	;
call	42:4	42:19	2	free
arg	42:10	42:19	3	p_session
water	42:10	0:0	4	p_session
water	42:20	0:0	2	;
return	43:4	43:15	2	NULL
water	43:11	0:0	3	NULL
