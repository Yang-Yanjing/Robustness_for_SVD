func	2:0	218:0	0	static int	HandleSDBuffer
params	2:25	0:0	1	
param	2:27	2:43	2	demux_t *	p_demux
param	2:45	2:62	2	uint8_t *	p_buffer
param	3:27	3:54	2	unsigned int	i_buffer_size
stmnts	0:0	217:22	1	
decl	5:4	5:39	2	demux_sys_t	*p_sys
op	5:23	0:0	2	=
water	5:25	0:0	2	p_demux
op	5:32	0:0	2	->
water	5:34	0:0	2	p_sys
decl	6:4	6:38	2	const uint8_t	*p_parser
op	6:28	0:0	2	=
water	6:30	0:0	2	p_buffer
decl	7:4	7:51	2	const uint8_t	*p_end
op	7:25	0:0	2	=
water	7:27	0:0	2	p_parser
op	7:36	0:0	2	+
water	7:38	0:0	2	i_buffer_size
decl	8:4	8:25	2	const uint8_t	*p_line
if	9:4	15:4	2	(p_sys -> i_state != STATE_SYNC && p_sys -> i_last_state_change <mdate ( ) - RESYNC_TIMEOUT)
cond	9:9	10:52	3	p_sys -> i_state != STATE_SYNC && p_sys -> i_last_state_change <mdate ( ) - RESYNC_TIMEOUT
water	9:9	0:0	4	p_sys
op	9:14	0:0	4	->
water	9:16	0:0	4	i_state
op	9:24	0:0	4	!=
water	9:27	0:0	4	STATE_SYNC
op	10:10	0:0	4	&&
water	10:13	0:0	4	p_sys
op	10:18	0:0	4	->
water	10:20	0:0	4	i_last_state_change
op	10:40	0:0	4	<
call	10:42	10:48	4	mdate
op	10:50	0:0	4	-
water	10:52	0:0	4	RESYNC_TIMEOUT
stmts	11:4	15:4	3	
water	11:4	0:0	4	{
water	12:8	0:0	4	p_sys
op	12:13	0:0	4	->
water	12:15	0:0	4	i_state
op	12:23	0:0	4	=
water	12:25	0:0	4	STATE_NOSYNC
water	12:37	0:0	4	;
water	13:8	0:0	4	p_sys
op	13:13	0:0	4	->
water	13:15	0:0	4	i_last_state_change
op	13:35	0:0	4	=
call	13:37	13:43	4	mdate
water	13:44	0:0	4	;
return	14:8	14:27	4	VLC_EGENERIC
water	14:15	0:0	5	VLC_EGENERIC
water	15:4	0:0	4	}
switch	16:4	216:4	2	(p_sys -> i_state)
cond	16:13	16:20	3	p_sys -> i_state
water	16:13	0:0	4	p_sys
op	16:18	0:0	4	->
water	16:20	0:0	4	i_state
stmts	17:4	216:4	3	
water	17:4	0:0	4	{
label	18:4	18:21	4	case STATE_NOSYNC :
label	19:4	19:11	4	default :
water	20:8	0:0	4	p_parser
op	20:17	0:0	4	=
call	20:19	20:74	4	FindReferenceCode
arg	20:38	20:56	5	FIELD_2_VBLANK_SAV
water	20:38	0:0	6	FIELD_2_VBLANK_SAV
arg	20:58	20:66	5	p_parser
water	20:58	0:0	6	p_parser
arg	20:68	20:74	5	p_end
water	20:68	0:0	6	p_end
water	20:75	0:0	4	;
if	21:8	22:17	4	(p_parser == NULL)
cond	21:13	21:25	5	p_parser == NULL
water	21:13	0:0	6	p_parser
op	21:22	0:0	6	==
water	21:25	0:0	6	NULL
stmts	22:12	22:17	5	
break	22:12	22:17	6	
water	23:8	0:0	4	p_sys
op	23:13	0:0	4	->
water	23:15	0:0	4	i_state
op	23:23	0:0	4	=
water	23:25	0:0	4	STATE_STARTSYNC
water	23:40	0:0	4	;
water	24:8	0:0	4	p_sys
op	24:13	0:0	4	->
water	24:15	0:0	4	i_last_state_change
op	24:35	0:0	4	=
call	24:37	24:43	4	mdate
water	24:44	0:0	4	;
label	25:4	25:24	4	case STATE_STARTSYNC :
water	26:8	0:0	4	p_parser
op	26:17	0:0	4	=
call	26:19	26:74	4	FindReferenceCode
arg	26:38	26:56	5	FIELD_1_VBLANK_EAV
water	26:38	0:0	6	FIELD_1_VBLANK_EAV
arg	26:58	26:66	5	p_parser
water	26:58	0:0	6	p_parser
arg	26:68	26:74	5	p_end
water	26:68	0:0	6	p_end
water	26:75	0:0	4	;
if	27:8	28:17	4	(p_parser == NULL)
cond	27:13	27:25	5	p_parser == NULL
water	27:13	0:0	6	p_parser
op	27:22	0:0	6	==
water	27:25	0:0	6	NULL
stmts	28:12	28:17	5	
break	28:12	28:17	6	
water	29:8	0:0	4	p_sys
op	29:13	0:0	4	->
water	29:15	0:0	4	i_anc_size
op	29:26	0:0	4	=
water	29:28	0:0	4	0
water	29:29	0:0	4	;
water	30:8	0:0	4	p_sys
op	30:13	0:0	4	->
water	30:15	0:0	4	i_state
op	30:23	0:0	4	=
water	30:25	0:0	4	STATE_ANCSYNC
water	30:38	0:0	4	;
water	31:8	0:0	4	p_sys
op	31:13	0:0	4	->
water	31:15	0:0	4	i_last_state_change
op	31:35	0:0	4	=
call	31:37	31:43	4	mdate
water	31:44	0:0	4	;
label	32:4	32:22	4	case STATE_ANCSYNC :
water	33:8	0:0	4	p_parser
op	33:17	0:0	4	=
call	33:19	34:71	4	CountReference
arg	33:35	33:53	5	&p_sys->i_anc_size
op	33:35	0:0	6	&
water	33:36	0:0	6	p_sys
op	33:41	0:0	6	->
water	33:43	0:0	6	i_anc_size
arg	34:35	34:53	5	FIELD_1_VBLANK_SAV
water	34:35	0:0	6	FIELD_1_VBLANK_SAV
arg	34:55	34:63	5	p_parser
water	34:55	0:0	6	p_parser
arg	34:65	34:71	5	p_end
water	34:65	0:0	6	p_end
water	34:72	0:0	4	;
if	35:8	36:17	4	(p_parser == NULL)
cond	35:13	35:25	5	p_parser == NULL
water	35:13	0:0	6	p_parser
op	35:22	0:0	6	==
water	35:25	0:0	6	NULL
stmts	36:12	36:17	5	
break	36:12	36:17	6	
water	37:8	0:0	4	p_sys
op	37:13	0:0	4	->
water	37:15	0:0	4	i_active_size
op	37:29	0:0	4	=
water	37:31	0:0	4	0
water	37:32	0:0	4	;
water	38:8	0:0	4	p_sys
op	38:13	0:0	4	->
water	38:15	0:0	4	i_state
op	38:23	0:0	4	=
water	38:25	0:0	4	STATE_LINESYNC
water	38:39	0:0	4	;
water	39:8	0:0	4	p_sys
op	39:13	0:0	4	->
water	39:15	0:0	4	i_last_state_change
op	39:35	0:0	4	=
call	39:37	39:43	4	mdate
water	39:44	0:0	4	;
label	40:4	40:23	4	case STATE_LINESYNC :
water	41:8	0:0	4	p_parser
op	41:17	0:0	4	=
call	41:19	42:71	4	CountReference
arg	41:35	41:56	5	&p_sys->i_active_size
op	41:35	0:0	6	&
water	41:36	0:0	6	p_sys
op	41:41	0:0	6	->
water	41:43	0:0	6	i_active_size
arg	42:35	42:53	5	FIELD_1_VBLANK_EAV
water	42:35	0:0	6	FIELD_1_VBLANK_EAV
arg	42:55	42:63	5	p_parser
water	42:55	0:0	6	p_parser
arg	42:65	42:71	5	p_end
water	42:65	0:0	6	p_end
water	42:72	0:0	4	;
if	43:8	44:17	4	(p_parser == NULL)
cond	43:13	43:25	5	p_parser == NULL
water	43:13	0:0	6	p_parser
op	43:22	0:0	6	==
water	43:25	0:0	6	NULL
stmts	44:12	44:17	5	
break	44:12	44:17	6	
water	45:8	0:0	4	p_sys
op	45:13	0:0	4	->
water	45:15	0:0	4	i_picture_size
op	45:30	0:0	4	=
water	45:32	0:0	4	p_sys
op	45:37	0:0	4	->
water	45:39	0:0	4	i_anc_size
op	45:50	0:0	4	+
water	45:52	0:0	4	p_sys
op	45:57	0:0	4	->
water	45:59	0:0	4	i_active_size
water	45:72	0:0	4	;
water	46:8	0:0	4	p_sys
op	46:13	0:0	4	->
water	46:15	0:0	4	i_state
op	46:23	0:0	4	=
water	46:25	0:0	4	STATE_ACTIVESYNC
water	46:41	0:0	4	;
water	47:8	0:0	4	p_sys
op	47:13	0:0	4	->
water	47:15	0:0	4	i_last_state_change
op	47:35	0:0	4	=
call	47:37	47:43	4	mdate
water	47:44	0:0	4	;
label	48:4	48:25	4	case STATE_ACTIVESYNC :
water	49:8	0:0	4	p_parser
op	49:17	0:0	4	=
call	49:19	50:71	4	CountReference
arg	49:35	49:57	5	&p_sys->i_picture_size
op	49:35	0:0	6	&
water	49:36	0:0	6	p_sys
op	49:41	0:0	6	->
water	49:43	0:0	6	i_picture_size
arg	50:35	50:53	5	FIELD_1_ACTIVE_EAV
water	50:35	0:0	6	FIELD_1_ACTIVE_EAV
arg	50:55	50:63	5	p_parser
water	50:55	0:0	6	p_parser
arg	50:65	50:71	5	p_end
water	50:65	0:0	6	p_end
water	50:72	0:0	4	;
if	51:8	52:17	4	(p_parser == NULL)
cond	51:13	51:25	5	p_parser == NULL
water	51:13	0:0	6	p_parser
op	51:22	0:0	6	==
water	51:25	0:0	6	NULL
stmts	52:12	52:17	5	
break	52:12	52:17	6	
water	53:8	0:0	4	p_sys
op	53:13	0:0	4	->
water	53:15	0:0	4	i_line_offset
op	53:29	0:0	4	=
water	53:31	0:0	4	p_sys
op	53:36	0:0	4	->
water	53:38	0:0	4	i_picture_size
op	54:29	0:0	4	/
water	54:31	0:0	4	(
water	54:32	0:0	4	p_sys
op	54:37	0:0	4	->
water	54:39	0:0	4	i_anc_size
op	54:50	0:0	4	+
water	54:52	0:0	4	p_sys
op	54:57	0:0	4	->
water	54:59	0:0	4	i_active_size
water	54:72	0:0	4	)
water	54:73	0:0	4	;
water	55:8	0:0	4	p_sys
op	55:13	0:0	4	->
water	55:15	0:0	4	i_state
op	55:23	0:0	4	=
water	55:25	0:0	4	STATE_VBLANKSYNC
water	55:41	0:0	4	;
water	56:8	0:0	4	p_sys
op	56:13	0:0	4	->
water	56:15	0:0	4	i_last_state_change
op	56:35	0:0	4	=
call	56:37	56:43	4	mdate
water	56:44	0:0	4	;
label	57:4	57:25	4	case STATE_VBLANKSYNC :
water	58:8	0:0	4	p_parser
op	58:17	0:0	4	=
call	58:19	59:71	4	CountReference
arg	58:35	58:57	5	&p_sys->i_picture_size
op	58:35	0:0	6	&
water	58:36	0:0	6	p_sys
op	58:41	0:0	6	->
water	58:43	0:0	6	i_picture_size
arg	59:35	59:53	5	FIELD_2_ACTIVE_EAV
water	59:35	0:0	6	FIELD_2_ACTIVE_EAV
arg	59:55	59:63	5	p_parser
water	59:55	0:0	6	p_parser
arg	59:65	59:71	5	p_end
water	59:65	0:0	6	p_end
water	59:72	0:0	4	;
if	60:8	61:17	4	(p_parser == NULL)
cond	60:13	60:25	5	p_parser == NULL
water	60:13	0:0	6	p_parser
op	60:22	0:0	6	==
water	60:25	0:0	6	NULL
stmts	61:12	61:17	5	
break	61:12	61:17	6	
water	62:8	0:0	4	p_sys
op	62:13	0:0	4	->
water	62:15	0:0	4	i_state
op	62:23	0:0	4	=
water	62:25	0:0	4	STATE_PICSYNC
water	62:38	0:0	4	;
water	63:8	0:0	4	p_sys
op	63:13	0:0	4	->
water	63:15	0:0	4	i_last_state_change
op	63:35	0:0	4	=
call	63:37	63:43	4	mdate
water	63:44	0:0	4	;
label	64:4	64:22	4	case STATE_PICSYNC :
water	65:8	0:0	4	p_parser
op	65:17	0:0	4	=
call	65:19	66:71	4	CountReference
arg	65:35	65:57	5	&p_sys->i_picture_size
op	65:35	0:0	6	&
water	65:36	0:0	6	p_sys
op	65:41	0:0	6	->
water	65:43	0:0	6	i_picture_size
arg	66:35	66:53	5	FIELD_1_VBLANK_EAV
water	66:35	0:0	6	FIELD_1_VBLANK_EAV
arg	66:55	66:63	5	p_parser
water	66:55	0:0	6	p_parser
arg	66:65	66:71	5	p_end
water	66:65	0:0	6	p_end
water	66:72	0:0	4	;
if	67:8	68:17	4	(p_parser == NULL)
cond	67:13	67:25	5	p_parser == NULL
water	67:13	0:0	6	p_parser
op	67:22	0:0	6	==
water	67:25	0:0	6	NULL
stmts	68:12	68:17	5	
break	68:12	68:17	6	
if	69:8	78:8	4	(p_sys -> i_picture_size % ( p_sys -> i_anc_size + p_sys -> i_active_size ))
cond	69:13	70:57	5	p_sys -> i_picture_size % ( p_sys -> i_anc_size + p_sys -> i_active_size )
water	69:13	0:0	6	p_sys
op	69:18	0:0	6	->
water	69:20	0:0	6	i_picture_size
op	70:14	0:0	6	%
water	70:16	0:0	6	(
water	70:17	0:0	6	p_sys
op	70:22	0:0	6	->
water	70:24	0:0	6	i_anc_size
op	70:35	0:0	6	+
water	70:37	0:0	6	p_sys
op	70:42	0:0	6	->
water	70:44	0:0	6	i_active_size
water	70:57	0:0	6	)
stmts	71:8	78:8	5	
water	71:8	0:0	6	{
call	72:12	74:65	6	msg_Warn
arg	72:22	72:29	7	p_demux
water	72:22	0:0	8	p_demux
arg	72:31	72:98	7	"wrong picture size (anc=%d active=%d total=%d offset=%d), syncing"
water	72:31	0:0	8	"wrong picture size (anc=%d active=%d total=%d offset=%d), syncing"
arg	73:17	73:34	7	p_sys->i_anc_size
water	73:17	0:0	8	p_sys
op	73:22	0:0	8	->
water	73:24	0:0	8	i_anc_size
arg	73:36	73:56	7	p_sys->i_active_size
water	73:36	0:0	8	p_sys
op	73:41	0:0	8	->
water	73:43	0:0	8	i_active_size
arg	74:17	74:38	7	p_sys->i_picture_size
water	74:17	0:0	8	p_sys
op	74:22	0:0	8	->
water	74:24	0:0	8	i_picture_size
arg	74:40	74:65	7	p_sys->i_line_offset+1
water	74:40	0:0	8	p_sys
op	74:45	0:0	8	->
water	74:47	0:0	8	i_line_offset
op	74:61	0:0	8	+
water	74:63	0:0	8	1
water	74:66	0:0	6	;
water	75:12	0:0	6	p_sys
op	75:17	0:0	6	->
water	75:19	0:0	6	i_state
op	75:27	0:0	6	=
water	75:29	0:0	6	STATE_NOSYNC
water	75:41	0:0	6	;
water	76:12	0:0	6	p_sys
op	76:17	0:0	6	->
water	76:19	0:0	6	i_last_state_change
op	76:39	0:0	6	=
call	76:41	76:47	6	mdate
water	76:48	0:0	6	;
break	77:12	77:17	6	
water	78:8	0:0	6	}
water	79:8	0:0	4	p_sys
op	79:13	0:0	4	->
water	79:15	0:0	4	i_nb_lines
op	79:26	0:0	4	=
water	79:28	0:0	4	p_sys
op	79:33	0:0	4	->
water	79:35	0:0	4	i_picture_size
op	80:29	0:0	4	/
water	80:31	0:0	4	(
water	80:32	0:0	4	p_sys
op	80:37	0:0	4	->
water	80:39	0:0	4	i_anc_size
op	80:50	0:0	4	+
water	80:52	0:0	4	p_sys
op	80:57	0:0	4	->
water	80:59	0:0	4	i_active_size
water	80:72	0:0	4	)
water	80:73	0:0	4	;
call	81:8	81:27	4	InitVideo
arg	81:19	81:27	5	p_demux
water	81:19	0:0	6	p_demux
water	81:28	0:0	4	;
call	82:8	85:61	4	msg_Dbg
arg	82:17	82:24	5	p_demux
water	82:17	0:0	6	p_demux
arg	83:17	83:69	5	"acquired sync, anc=%d active=%d lines=%d offset=%d"
water	83:17	0:0	6	"acquired sync, anc=%d active=%d lines=%d offset=%d"
arg	84:17	84:34	5	p_sys->i_anc_size
water	84:17	0:0	6	p_sys
op	84:22	0:0	6	->
water	84:24	0:0	6	i_anc_size
arg	84:36	84:56	5	p_sys->i_active_size
water	84:36	0:0	6	p_sys
op	84:41	0:0	6	->
water	84:43	0:0	6	i_active_size
arg	85:17	85:34	5	p_sys->i_nb_lines
water	85:17	0:0	6	p_sys
op	85:22	0:0	6	->
water	85:24	0:0	6	i_nb_lines
arg	85:36	85:61	5	p_sys->i_line_offset+1
water	85:36	0:0	6	p_sys
op	85:41	0:0	6	->
water	85:43	0:0	6	i_line_offset
op	85:57	0:0	6	+
water	85:59	0:0	6	1
water	85:62	0:0	4	;
water	86:8	0:0	4	p_sys
op	86:13	0:0	4	->
water	86:15	0:0	4	i_state
op	86:23	0:0	4	=
water	86:25	0:0	4	STATE_SYNC
water	86:35	0:0	4	;
if	87:8	91:8	4	(StartDecode (p_demux ) != VLC_SUCCESS)
cond	87:12	87:38	5	StartDecode (p_demux ) != VLC_SUCCESS
call	87:12	87:33	6	StartDecode
arg	87:25	87:33	7	p_demux
water	87:25	0:0	8	p_demux
op	87:35	0:0	6	!=
water	87:38	0:0	6	VLC_SUCCESS
stmts	88:8	91:8	5	
water	88:8	0:0	6	{
call	89:12	89:32	6	StopDecode
arg	89:24	89:32	7	p_demux
water	89:24	0:0	8	p_demux
water	89:33	0:0	6	;
return	90:12	90:29	6	VLC_ENOMEM
water	90:19	0:0	7	VLC_ENOMEM
water	91:8	0:0	6	}
water	92:8	0:0	4	p_sys
op	92:13	0:0	4	->
water	92:15	0:0	4	i_current_line
op	92:30	0:0	4	=
water	92:32	0:0	4	0
water	92:33	0:0	4	;
water	93:8	0:0	4	p_sys
op	93:13	0:0	4	->
water	93:15	0:0	4	p_line_buffer
op	93:29	0:0	4	=
call	93:31	94:63	4	malloc
arg	93:39	94:63	5	p_sys->i_anc_size+p_sys->i_active_size
water	93:39	0:0	6	p_sys
op	93:44	0:0	6	->
water	93:46	0:0	6	i_anc_size
op	94:40	0:0	6	+
water	94:42	0:0	6	p_sys
op	94:47	0:0	6	->
water	94:49	0:0	6	i_active_size
water	94:64	0:0	4	;
if	95:8	99:8	4	(! p_sys -> p_line_buffer)
cond	95:12	95:20	5	! p_sys -> p_line_buffer
op	95:12	0:0	6	!
water	95:13	0:0	6	p_sys
op	95:18	0:0	6	->
water	95:20	0:0	6	p_line_buffer
stmts	96:8	99:8	5	
water	96:8	0:0	6	{
call	97:12	97:32	6	StopDecode
arg	97:24	97:32	7	p_demux
water	97:24	0:0	8	p_demux
water	97:33	0:0	6	;
return	98:12	98:29	6	VLC_ENOMEM
water	98:19	0:0	7	VLC_ENOMEM
water	99:8	0:0	6	}
water	100:8	0:0	4	p_sys
op	100:13	0:0	4	->
water	100:15	0:0	4	i_line_buffer
op	100:29	0:0	4	=
water	100:31	0:0	4	0
water	100:32	0:0	4	;
label	101:4	101:19	4	case STATE_SYNC :
while	102:8	214:8	4	(( p_line =GetLine (p_demux ,& p_parser ,p_end ) ) != NULL)
cond	102:16	102:67	5	( p_line =GetLine (p_demux ,& p_parser ,p_end ) ) != NULL
water	102:16	0:0	6	(
water	102:17	0:0	6	p_line
op	102:24	0:0	6	=
call	102:26	102:61	6	GetLine
arg	102:35	102:42	7	p_demux
water	102:35	0:0	8	p_demux
arg	102:44	102:53	7	&p_parser
op	102:44	0:0	8	&
water	102:45	0:0	8	p_parser
arg	102:55	102:61	7	p_end
water	102:55	0:0	8	p_end
water	102:62	0:0	6	)
op	102:64	0:0	6	!=
water	102:67	0:0	6	NULL
stmts	103:8	214:8	5	
water	103:8	0:0	6	{
decl	104:12	105:64	6	bool	b_field
op	104:25	0:0	6	=
water	104:27	0:0	6	p_sys
op	104:32	0:0	6	->
water	104:34	0:0	6	b_hd
water	104:39	0:0	6	?
water	104:41	0:0	6	false
water	104:47	0:0	6	:
water	105:16	0:0	6	(
water	105:17	0:0	6	p_sys
op	105:22	0:0	6	->
water	105:24	0:0	6	i_current_line
op	105:39	0:0	6	>=
water	105:42	0:0	6	p_sys
op	105:47	0:0	6	->
water	105:49	0:0	6	i_nb_lines
op	105:60	0:0	6	/
water	105:62	0:0	6	2
water	105:63	0:0	6	)
decl	106:12	107:35	6	unsigned int	i_field_height
op	106:40	0:0	6	=
water	106:42	0:0	6	p_sys
op	106:47	0:0	6	->
water	106:49	0:0	6	b_hd
water	106:54	0:0	6	?
water	106:56	0:0	6	p_sys
op	106:61	0:0	6	->
water	106:63	0:0	6	i_height
water	106:72	0:0	6	:
water	107:16	0:0	6	p_sys
op	107:21	0:0	6	->
water	107:23	0:0	6	i_height
op	107:32	0:0	6	/
water	107:34	0:0	6	2
decl	108:12	110:37	6	unsigned int	i_field_line
op	108:38	0:0	6	=
water	108:40	0:0	6	b_field
water	108:48	0:0	6	?
water	109:16	0:0	6	p_sys
op	109:21	0:0	6	->
water	109:23	0:0	6	i_current_line
op	109:38	0:0	6	-
water	109:40	0:0	6	(
water	109:41	0:0	6	p_sys
op	109:46	0:0	6	->
water	109:48	0:0	6	i_nb_lines
op	109:59	0:0	6	+
water	109:61	0:0	6	1
water	109:62	0:0	6	)
op	109:64	0:0	6	/
water	109:66	0:0	6	2
water	109:68	0:0	6	:
water	110:16	0:0	6	p_sys
op	110:21	0:0	6	->
water	110:23	0:0	6	i_current_line
decl	111:12	112:69	6	bool	b_vbi
op	111:23	0:0	6	=
water	111:25	0:0	6	i_field_line
op	111:38	0:0	6	<
water	111:40	0:0	6	p_sys
op	111:45	0:0	6	->
water	111:47	0:0	6	i_line_offset
op	111:61	0:0	6	||
water	112:16	0:0	6	i_field_line
op	112:29	0:0	6	>=
water	112:32	0:0	6	p_sys
op	112:37	0:0	6	->
water	112:39	0:0	6	i_line_offset
op	112:53	0:0	6	+
water	112:55	0:0	6	i_field_height
decl	113:12	113:48	6	unsigned int	anc
op	113:29	0:0	6	=
water	113:31	0:0	6	p_sys
op	113:36	0:0	6	->
water	113:38	0:0	6	i_anc_size
if	114:12	137:12	6	(p_line [ 0 ] != 0 xff || p_line [ 1 ] != 0 x3 || p_line [ 2 ] != 0 x0 || p_line [ 3 ] != 0 x0 || p_line [ anc + 0 ] != 0 xff || p_line [ anc + 1 ] != 0 x3 || p_line [ anc + 2 ] != 0 x0 || p_line [ anc + 3 ] != 0 x0 || ( ! b_field && b_vbi && ( p_line [ 4 ] != FIELD_1_VBLANK_EAV || p_line [ anc + 4 ] != FIELD_1_VBLANK_SAV ) ) || ( ! b_field && ! b_vbi && ( p_line [ 4 ] != FIELD_1_ACTIVE_EAV || p_line [ anc + 4 ] != FIELD_1_ACTIVE_SAV ) ) || ( b_field && b_vbi && ( p_line [ 4 ] != FIELD_2_VBLANK_EAV || p_line [ anc + 4 ] != FIELD_2_VBLANK_SAV ) ) || ( b_field && ! b_vbi && ( p_line [ 4 ] != FIELD_2_ACTIVE_EAV || p_line [ anc + 4 ] != FIELD_2_ACTIVE_SAV ) ))
cond	114:17	129:59	7	p_line [ 0 ] != 0 xff || p_line [ 1 ] != 0 x3 || p_line [ 2 ] != 0 x0 || p_line [ 3 ] != 0 x0 || p_line [ anc + 0 ] != 0 xff || p_line [ anc + 1 ] != 0 x3 || p_line [ anc + 2 ] != 0 x0 || p_line [ anc + 3 ] != 0 x0 || ( ! b_field && b_vbi && ( p_line [ 4 ] != FIELD_1_VBLANK_EAV || p_line [ anc + 4 ] != FIELD_1_VBLANK_SAV ) ) || ( ! b_field && ! b_vbi && ( p_line [ 4 ] != FIELD_1_ACTIVE_EAV || p_line [ anc + 4 ] != FIELD_1_ACTIVE_SAV ) ) || ( b_field && b_vbi && ( p_line [ 4 ] != FIELD_2_VBLANK_EAV || p_line [ anc + 4 ] != FIELD_2_VBLANK_SAV ) ) || ( b_field && ! b_vbi && ( p_line [ 4 ] != FIELD_2_ACTIVE_EAV || p_line [ anc + 4 ] != FIELD_2_ACTIVE_SAV ) )
water	114:17	0:0	8	p_line
op	114:23	0:0	8	[
water	114:24	0:0	8	0
op	114:25	0:0	8	]
op	114:27	0:0	8	!=
water	114:30	0:0	8	0
water	114:31	0:0	8	xff
op	114:35	0:0	8	||
water	114:38	0:0	8	p_line
op	114:44	0:0	8	[
water	114:45	0:0	8	1
op	114:46	0:0	8	]
op	114:48	0:0	8	!=
water	114:51	0:0	8	0
water	114:52	0:0	8	x3
op	115:18	0:0	8	||
water	115:21	0:0	8	p_line
op	115:27	0:0	8	[
water	115:28	0:0	8	2
op	115:29	0:0	8	]
op	115:31	0:0	8	!=
water	115:34	0:0	8	0
water	115:35	0:0	8	x0
op	115:38	0:0	8	||
water	115:41	0:0	8	p_line
op	115:47	0:0	8	[
water	115:48	0:0	8	3
op	115:49	0:0	8	]
op	115:51	0:0	8	!=
water	115:54	0:0	8	0
water	115:55	0:0	8	x0
op	116:18	0:0	8	||
water	116:21	0:0	8	p_line
op	116:27	0:0	8	[
water	116:28	0:0	8	anc
op	116:31	0:0	8	+
water	116:32	0:0	8	0
op	116:33	0:0	8	]
op	116:35	0:0	8	!=
water	116:38	0:0	8	0
water	116:39	0:0	8	xff
op	116:43	0:0	8	||
water	116:46	0:0	8	p_line
op	116:52	0:0	8	[
water	116:53	0:0	8	anc
op	116:56	0:0	8	+
water	116:57	0:0	8	1
op	116:58	0:0	8	]
op	116:60	0:0	8	!=
water	116:63	0:0	8	0
water	116:64	0:0	8	x3
op	117:18	0:0	8	||
water	117:21	0:0	8	p_line
op	117:27	0:0	8	[
water	117:28	0:0	8	anc
op	117:31	0:0	8	+
water	117:32	0:0	8	2
op	117:33	0:0	8	]
op	117:35	0:0	8	!=
water	117:38	0:0	8	0
water	117:39	0:0	8	x0
op	117:42	0:0	8	||
water	117:45	0:0	8	p_line
op	117:51	0:0	8	[
water	117:52	0:0	8	anc
op	117:55	0:0	8	+
water	117:56	0:0	8	3
op	117:57	0:0	8	]
op	117:59	0:0	8	!=
water	117:62	0:0	8	0
water	117:63	0:0	8	x0
op	118:18	0:0	8	||
water	118:21	0:0	8	(
op	118:22	0:0	8	!
water	118:23	0:0	8	b_field
op	118:31	0:0	8	&&
water	118:34	0:0	8	b_vbi
op	118:40	0:0	8	&&
water	119:22	0:0	8	(
water	119:23	0:0	8	p_line
op	119:29	0:0	8	[
water	119:30	0:0	8	4
op	119:31	0:0	8	]
op	119:33	0:0	8	!=
water	119:36	0:0	8	FIELD_1_VBLANK_EAV
op	119:55	0:0	8	||
water	120:23	0:0	8	p_line
op	120:29	0:0	8	[
water	120:30	0:0	8	anc
op	120:33	0:0	8	+
water	120:34	0:0	8	4
op	120:35	0:0	8	]
op	120:37	0:0	8	!=
water	120:40	0:0	8	FIELD_1_VBLANK_SAV
water	120:58	0:0	8	)
water	120:59	0:0	8	)
op	121:18	0:0	8	||
water	121:21	0:0	8	(
op	121:22	0:0	8	!
water	121:23	0:0	8	b_field
op	121:31	0:0	8	&&
op	121:34	0:0	8	!
water	121:35	0:0	8	b_vbi
op	121:41	0:0	8	&&
water	122:22	0:0	8	(
water	122:23	0:0	8	p_line
op	122:29	0:0	8	[
water	122:30	0:0	8	4
op	122:31	0:0	8	]
op	122:33	0:0	8	!=
water	122:36	0:0	8	FIELD_1_ACTIVE_EAV
op	122:55	0:0	8	||
water	123:23	0:0	8	p_line
op	123:29	0:0	8	[
water	123:30	0:0	8	anc
op	123:33	0:0	8	+
water	123:34	0:0	8	4
op	123:35	0:0	8	]
op	123:37	0:0	8	!=
water	123:40	0:0	8	FIELD_1_ACTIVE_SAV
water	123:58	0:0	8	)
water	123:59	0:0	8	)
op	124:18	0:0	8	||
water	124:21	0:0	8	(
water	124:22	0:0	8	b_field
op	124:30	0:0	8	&&
water	124:33	0:0	8	b_vbi
op	124:39	0:0	8	&&
water	125:22	0:0	8	(
water	125:23	0:0	8	p_line
op	125:29	0:0	8	[
water	125:30	0:0	8	4
op	125:31	0:0	8	]
op	125:33	0:0	8	!=
water	125:36	0:0	8	FIELD_2_VBLANK_EAV
op	125:55	0:0	8	||
water	126:23	0:0	8	p_line
op	126:29	0:0	8	[
water	126:30	0:0	8	anc
op	126:33	0:0	8	+
water	126:34	0:0	8	4
op	126:35	0:0	8	]
op	126:37	0:0	8	!=
water	126:40	0:0	8	FIELD_2_VBLANK_SAV
water	126:58	0:0	8	)
water	126:59	0:0	8	)
op	127:18	0:0	8	||
water	127:21	0:0	8	(
water	127:22	0:0	8	b_field
op	127:30	0:0	8	&&
op	127:33	0:0	8	!
water	127:34	0:0	8	b_vbi
op	127:40	0:0	8	&&
water	128:22	0:0	8	(
water	128:23	0:0	8	p_line
op	128:29	0:0	8	[
water	128:30	0:0	8	4
op	128:31	0:0	8	]
op	128:33	0:0	8	!=
water	128:36	0:0	8	FIELD_2_ACTIVE_EAV
op	128:55	0:0	8	||
water	129:23	0:0	8	p_line
op	129:29	0:0	8	[
water	129:30	0:0	8	anc
op	129:33	0:0	8	+
water	129:34	0:0	8	4
op	129:35	0:0	8	]
op	129:37	0:0	8	!=
water	129:40	0:0	8	FIELD_2_ACTIVE_SAV
water	129:58	0:0	8	)
water	129:59	0:0	8	)
stmts	130:12	137:12	7	
water	130:12	0:0	8	{
call	131:16	132:78	8	msg_Warn
arg	131:26	131:33	9	p_demux
water	131:26	0:0	10	p_demux
arg	131:35	131:68	9	"lost sync line:%u SAV:%x EAV:%x"
water	131:35	0:0	10	"lost sync line:%u SAV:%x EAV:%x"
arg	132:26	132:51	9	p_sys->i_current_line+1
water	132:26	0:0	10	p_sys
op	132:31	0:0	10	->
water	132:33	0:0	10	i_current_line
op	132:48	0:0	10	+
water	132:50	0:0	10	1
arg	132:53	132:62	9	p_line[4]
water	132:53	0:0	10	p_line
op	132:59	0:0	10	[
water	132:60	0:0	10	4
op	132:61	0:0	10	]
arg	132:64	132:78	9	p_line[anc+4]
water	132:64	0:0	10	p_line
op	132:70	0:0	10	[
water	132:71	0:0	10	anc
op	132:74	0:0	10	+
water	132:75	0:0	10	4
op	132:76	0:0	10	]
water	132:79	0:0	8	;
call	133:16	133:36	8	StopDecode
arg	133:28	133:36	9	p_demux
water	133:28	0:0	10	p_demux
water	133:37	0:0	8	;
water	134:16	0:0	8	p_sys
op	134:21	0:0	8	->
water	134:23	0:0	8	i_state
op	134:31	0:0	8	=
water	134:33	0:0	8	STATE_NOSYNC
water	134:45	0:0	8	;
water	135:16	0:0	8	p_sys
op	135:21	0:0	8	->
water	135:23	0:0	8	i_last_state_change
op	135:43	0:0	8	=
call	135:45	135:51	8	mdate
water	135:52	0:0	8	;
break	136:16	136:21	8	
water	137:12	0:0	8	}
if	138:12	145:12	6	(HasAncillary (p_line + 5 ))
cond	138:17	138:42	7	HasAncillary (p_line + 5 )
call	138:17	138:42	8	HasAncillary
arg	138:31	138:42	9	p_line+5
water	138:31	0:0	10	p_line
op	138:38	0:0	10	+
water	138:40	0:0	10	5
stmts	139:12	145:12	7	
water	139:12	0:0	8	{
decl	141:16	141:74	8	unsigned int	i_anc_words
op	141:41	0:0	8	=
water	141:43	0:0	8	(
water	141:44	0:0	8	p_sys
op	141:49	0:0	8	->
water	141:51	0:0	8	i_anc_size
op	141:62	0:0	8	-
water	141:64	0:0	8	5
water	141:65	0:0	8	)
op	141:67	0:0	8	*
water	141:69	0:0	8	4
op	141:71	0:0	8	/
water	141:73	0:0	8	5
decl	142:16	142:43	8	uint16_t	p_anc[i_anc_words]
call	143:16	143:68	8	UnpackAnc
arg	143:27	143:37	9	p_line+5
water	143:27	0:0	10	p_line
op	143:34	0:0	10	+
water	143:36	0:0	10	5
arg	143:39	143:60	9	p_sys->i_anc_size-5
water	143:39	0:0	10	p_sys
op	143:44	0:0	10	->
water	143:46	0:0	10	i_anc_size
op	143:57	0:0	10	-
water	143:59	0:0	10	5
arg	143:62	143:68	9	p_anc
water	143:62	0:0	10	p_anc
water	143:69	0:0	8	;
call	144:16	144:61	8	HandleAncillary
arg	144:33	144:40	9	p_demux
water	144:33	0:0	10	p_demux
arg	144:42	144:47	9	p_anc
water	144:42	0:0	10	p_anc
arg	144:49	144:61	9	i_anc_words
water	144:49	0:0	10	i_anc_words
water	144:62	0:0	8	;
water	145:12	0:0	8	}
if	146:12	187:12	6	(! b_vbi)
cond	146:17	146:18	7	! b_vbi
op	146:17	0:0	8	!
water	146:18	0:0	8	b_vbi
stmts	147:12	187:12	7	
water	147:12	0:0	8	{
decl	148:16	149:74	8	unsigned int	i_active_field_line
op	148:49	0:0	8	=
water	148:51	0:0	8	i_field_line
op	149:52	0:0	8	-
water	149:54	0:0	8	p_sys
op	149:59	0:0	8	->
water	149:61	0:0	8	i_line_offset
decl	150:16	151:71	8	unsigned int	i_active_line
op	150:43	0:0	8	=
water	150:45	0:0	8	b_field
op	151:46	0:0	8	+
water	151:48	0:0	8	i_active_field_line
op	151:68	0:0	8	*
water	151:70	0:0	8	2
if	152:16	158:54	8	(! ( i_active_field_line % 2 ) && ! b_field)
cond	152:21	152:52	9	! ( i_active_field_line % 2 ) && ! b_field
op	152:21	0:0	10	!
water	152:22	0:0	10	(
water	152:23	0:0	10	i_active_field_line
op	152:43	0:0	10	%
water	152:45	0:0	10	2
water	152:46	0:0	10	)
op	152:48	0:0	10	&&
op	152:51	0:0	10	!
water	152:52	0:0	10	b_field
stmts	153:20	158:54	9	
call	153:20	158:53	10	Unpack01
arg	153:30	153:46	11	p_line+anc+5
water	153:30	0:0	12	p_line
op	153:37	0:0	12	+
water	153:39	0:0	12	anc
op	153:43	0:0	12	+
water	153:45	0:0	12	5
arg	153:48	153:72	11	p_sys->i_active_size-5
water	153:48	0:0	12	p_sys
op	153:53	0:0	12	->
water	153:55	0:0	12	i_active_size
op	153:69	0:0	12	-
water	153:71	0:0	12	5
arg	154:30	154:73	11	p_sys->p_y+p_sys->i_width*i_active_line
water	154:30	0:0	12	p_sys
op	154:35	0:0	12	->
water	154:37	0:0	12	p_y
op	154:41	0:0	12	+
water	154:43	0:0	12	p_sys
op	154:48	0:0	12	->
water	154:50	0:0	12	i_width
op	154:58	0:0	12	*
water	154:60	0:0	12	i_active_line
arg	155:30	156:52	11	p_sys->p_u+(p_sys->i_width/2)*(i_active_line/2)
water	155:30	0:0	12	p_sys
op	155:35	0:0	12	->
water	155:37	0:0	12	p_u
op	155:41	0:0	12	+
water	155:43	0:0	12	(
water	155:44	0:0	12	p_sys
op	155:49	0:0	12	->
water	155:51	0:0	12	i_width
op	155:59	0:0	12	/
water	155:61	0:0	12	2
water	155:62	0:0	12	)
op	156:31	0:0	12	*
water	156:33	0:0	12	(
water	156:34	0:0	12	i_active_line
op	156:48	0:0	12	/
water	156:50	0:0	12	2
water	156:51	0:0	12	)
arg	157:30	158:53	11	p_sys->p_v+(p_sys->i_width/2)*(i_active_line/2)
water	157:30	0:0	12	p_sys
op	157:35	0:0	12	->
water	157:37	0:0	12	p_v
op	157:41	0:0	12	+
water	157:43	0:0	12	(
water	157:44	0:0	12	p_sys
op	157:49	0:0	12	->
water	157:51	0:0	12	i_width
op	157:59	0:0	12	/
water	157:61	0:0	12	2
water	157:62	0:0	12	)
op	158:31	0:0	12	*
water	158:33	0:0	12	(
water	158:34	0:0	12	i_active_line
op	158:48	0:0	12	/
water	158:50	0:0	12	2
water	158:51	0:0	12	)
water	158:54	0:0	10	;
else	159:16	165:58	8
stmts	159:21	165:58	9	
if	159:21	165:58	10	(! ( i_active_field_line % 2 ))
cond	159:26	159:51	11	! ( i_active_field_line % 2 )
op	159:26	0:0	12	!
water	159:27	0:0	12	(
water	159:28	0:0	12	i_active_field_line
op	159:48	0:0	12	%
water	159:50	0:0	12	2
water	159:51	0:0	12	)
stmts	160:20	165:58	11	
call	160:20	165:57	12	Unpack01
arg	160:30	160:46	13	p_line+anc+5
water	160:30	0:0	14	p_line
op	160:37	0:0	14	+
water	160:39	0:0	14	anc
op	160:43	0:0	14	+
water	160:45	0:0	14	5
arg	160:48	160:72	13	p_sys->i_active_size-5
water	160:48	0:0	14	p_sys
op	160:53	0:0	14	->
water	160:55	0:0	14	i_active_size
op	160:69	0:0	14	-
water	160:71	0:0	14	5
arg	161:30	161:73	13	p_sys->p_y+p_sys->i_width*i_active_line
water	161:30	0:0	14	p_sys
op	161:35	0:0	14	->
water	161:37	0:0	14	p_y
op	161:41	0:0	14	+
water	161:43	0:0	14	p_sys
op	161:48	0:0	14	->
water	161:50	0:0	14	i_width
op	161:58	0:0	14	*
water	161:60	0:0	14	i_active_line
arg	162:30	163:56	13	p_sys->p_u+(p_sys->i_width/2)*(i_active_line/2+1)
water	162:30	0:0	14	p_sys
op	162:35	0:0	14	->
water	162:37	0:0	14	p_u
op	162:41	0:0	14	+
water	162:43	0:0	14	(
water	162:44	0:0	14	p_sys
op	162:49	0:0	14	->
water	162:51	0:0	14	i_width
op	162:59	0:0	14	/
water	162:61	0:0	14	2
water	162:62	0:0	14	)
op	163:31	0:0	14	*
water	163:33	0:0	14	(
water	163:34	0:0	14	i_active_line
op	163:48	0:0	14	/
water	163:50	0:0	14	2
op	163:52	0:0	14	+
water	163:54	0:0	14	1
water	163:55	0:0	14	)
arg	164:30	165:57	13	p_sys->p_v+(p_sys->i_width/2)*(i_active_line/2+1)
water	164:30	0:0	14	p_sys
op	164:35	0:0	14	->
water	164:37	0:0	14	p_v
op	164:41	0:0	14	+
water	164:43	0:0	14	(
water	164:44	0:0	14	p_sys
op	164:49	0:0	14	->
water	164:51	0:0	14	i_width
op	164:59	0:0	14	/
water	164:61	0:0	14	2
water	164:62	0:0	14	)
op	165:31	0:0	14	*
water	165:33	0:0	14	(
water	165:34	0:0	14	i_active_line
op	165:48	0:0	14	/
water	165:50	0:0	14	2
op	165:52	0:0	14	+
water	165:54	0:0	14	1
water	165:55	0:0	14	)
water	165:58	0:0	12	;
else	166:16	172:57	8
stmts	166:21	172:57	9	
if	166:21	172:57	10	(! b_field)
cond	166:26	166:27	11	! b_field
op	166:26	0:0	12	!
water	166:27	0:0	12	b_field
stmts	167:20	172:57	11	
call	167:20	172:56	12	Unpack2
arg	167:29	167:45	13	p_line+anc+5
water	167:29	0:0	14	p_line
op	167:36	0:0	14	+
water	167:38	0:0	14	anc
op	167:42	0:0	14	+
water	167:44	0:0	14	5
arg	167:47	167:71	13	p_sys->i_active_size-5
water	167:47	0:0	14	p_sys
op	167:52	0:0	14	->
water	167:54	0:0	14	i_active_size
op	167:68	0:0	14	-
water	167:70	0:0	14	5
arg	168:29	168:72	13	p_sys->p_y+p_sys->i_width*i_active_line
water	168:29	0:0	14	p_sys
op	168:34	0:0	14	->
water	168:36	0:0	14	p_y
op	168:40	0:0	14	+
water	168:42	0:0	14	p_sys
op	168:47	0:0	14	->
water	168:49	0:0	14	i_width
op	168:57	0:0	14	*
water	168:59	0:0	14	i_active_line
arg	169:29	170:55	13	p_sys->p_u+(p_sys->i_width/2)*(i_active_line/2-1)
water	169:29	0:0	14	p_sys
op	169:34	0:0	14	->
water	169:36	0:0	14	p_u
op	169:40	0:0	14	+
water	169:42	0:0	14	(
water	169:43	0:0	14	p_sys
op	169:48	0:0	14	->
water	169:50	0:0	14	i_width
op	169:58	0:0	14	/
water	169:60	0:0	14	2
water	169:61	0:0	14	)
op	170:30	0:0	14	*
water	170:32	0:0	14	(
water	170:33	0:0	14	i_active_line
op	170:47	0:0	14	/
water	170:49	0:0	14	2
op	170:51	0:0	14	-
water	170:53	0:0	14	1
water	170:54	0:0	14	)
arg	171:29	172:56	13	p_sys->p_v+(p_sys->i_width/2)*(i_active_line/2-1)
water	171:29	0:0	14	p_sys
op	171:34	0:0	14	->
water	171:36	0:0	14	p_v
op	171:40	0:0	14	+
water	171:42	0:0	14	(
water	171:43	0:0	14	p_sys
op	171:48	0:0	14	->
water	171:50	0:0	14	i_width
op	171:58	0:0	14	/
water	171:60	0:0	14	2
water	171:61	0:0	14	)
op	172:30	0:0	14	*
water	172:32	0:0	14	(
water	172:33	0:0	14	i_active_line
op	172:47	0:0	14	/
water	172:49	0:0	14	2
op	172:51	0:0	14	-
water	172:53	0:0	14	1
water	172:54	0:0	14	)
water	172:57	0:0	12	;
else	173:16	179:53	8
stmts	174:20	179:53	9	
call	174:20	179:52	10	Unpack3
arg	174:29	174:45	11	p_line+anc+5
water	174:29	0:0	12	p_line
op	174:36	0:0	12	+
water	174:38	0:0	12	anc
op	174:42	0:0	12	+
water	174:44	0:0	12	5
arg	174:47	174:71	11	p_sys->i_active_size-5
water	174:47	0:0	12	p_sys
op	174:52	0:0	12	->
water	174:54	0:0	12	i_active_size
op	174:68	0:0	12	-
water	174:70	0:0	12	5
arg	175:29	175:72	11	p_sys->p_y+p_sys->i_width*i_active_line
water	175:29	0:0	12	p_sys
op	175:34	0:0	12	->
water	175:36	0:0	12	p_y
op	175:40	0:0	12	+
water	175:42	0:0	12	p_sys
op	175:47	0:0	12	->
water	175:49	0:0	12	i_width
op	175:57	0:0	12	*
water	175:59	0:0	12	i_active_line
arg	176:29	177:51	11	p_sys->p_u+(p_sys->i_width/2)*(i_active_line/2)
water	176:29	0:0	12	p_sys
op	176:34	0:0	12	->
water	176:36	0:0	12	p_u
op	176:40	0:0	12	+
water	176:42	0:0	12	(
water	176:43	0:0	12	p_sys
op	176:48	0:0	12	->
water	176:50	0:0	12	i_width
op	176:58	0:0	12	/
water	176:60	0:0	12	2
water	176:61	0:0	12	)
op	177:30	0:0	12	*
water	177:32	0:0	12	(
water	177:33	0:0	12	i_active_line
op	177:47	0:0	12	/
water	177:49	0:0	12	2
water	177:50	0:0	12	)
arg	178:29	179:52	11	p_sys->p_v+(p_sys->i_width/2)*(i_active_line/2)
water	178:29	0:0	12	p_sys
op	178:34	0:0	12	->
water	178:36	0:0	12	p_v
op	178:40	0:0	12	+
water	178:42	0:0	12	(
water	178:43	0:0	12	p_sys
op	178:48	0:0	12	->
water	178:50	0:0	12	i_width
op	178:58	0:0	12	/
water	178:60	0:0	12	2
water	178:61	0:0	12	)
op	179:30	0:0	12	*
water	179:32	0:0	12	(
water	179:33	0:0	12	i_active_line
op	179:47	0:0	12	/
water	179:49	0:0	12	2
water	179:50	0:0	12	)
water	179:53	0:0	10	;
if	180:16	186:16	8	(p_sys -> b_vbi && p_sys -> i_height == 576 && p_sys -> i_current_line == p_sys -> i_line_offset)
cond	180:21	181:57	9	p_sys -> b_vbi && p_sys -> i_height == 576 && p_sys -> i_current_line == p_sys -> i_line_offset
water	180:21	0:0	10	p_sys
op	180:26	0:0	10	->
water	180:28	0:0	10	b_vbi
op	180:34	0:0	10	&&
water	180:37	0:0	10	p_sys
op	180:42	0:0	10	->
water	180:44	0:0	10	i_height
op	180:53	0:0	10	==
water	180:56	0:0	10	576
op	181:22	0:0	10	&&
water	181:25	0:0	10	p_sys
op	181:30	0:0	10	->
water	181:32	0:0	10	i_current_line
op	181:47	0:0	10	==
water	181:50	0:0	10	p_sys
op	181:55	0:0	10	->
water	181:57	0:0	10	i_line_offset
stmts	182:16	186:16	9	
water	182:16	0:0	10	{
call	184:20	185:51	10	UnpackVBI
arg	184:31	184:47	11	p_line+anc+5
water	184:31	0:0	12	p_line
op	184:38	0:0	12	+
water	184:40	0:0	12	anc
op	184:44	0:0	12	+
water	184:46	0:0	12	5
arg	184:49	184:73	11	p_sys->i_active_size-5
water	184:49	0:0	12	p_sys
op	184:54	0:0	12	->
water	184:56	0:0	12	i_active_size
op	184:70	0:0	12	-
water	184:72	0:0	12	5
arg	185:31	185:51	11	p_sys->p_wss_buffer
water	185:31	0:0	12	p_sys
op	185:36	0:0	12	->
water	185:38	0:0	12	p_wss_buffer
water	185:52	0:0	10	;
water	186:16	0:0	10	}
water	187:12	0:0	8	}
else	188:12	197:12	6
stmts	188:17	197:12	7	
if	188:17	197:12	8	(p_sys -> b_vbi && p_sys -> i_telx_count && i_field_line >= p_sys -> i_telx_line && i_field_line < p_sys -> i_telx_line + p_sys -> i_telx_count)
cond	188:22	191:47	9	p_sys -> b_vbi && p_sys -> i_telx_count && i_field_line >= p_sys -> i_telx_line && i_field_line < p_sys -> i_telx_line + p_sys -> i_telx_count
water	188:22	0:0	10	p_sys
op	188:27	0:0	10	->
water	188:29	0:0	10	b_vbi
op	188:35	0:0	10	&&
water	188:38	0:0	10	p_sys
op	188:43	0:0	10	->
water	188:45	0:0	10	i_telx_count
op	188:58	0:0	10	&&
water	189:22	0:0	10	i_field_line
op	189:35	0:0	10	>=
water	189:38	0:0	10	p_sys
op	189:43	0:0	10	->
water	189:45	0:0	10	i_telx_line
op	189:57	0:0	10	&&
water	190:22	0:0	10	i_field_line
op	190:35	0:0	10	<
water	190:37	0:0	10	p_sys
op	190:42	0:0	10	->
water	190:44	0:0	10	i_telx_line
op	191:38	0:0	10	+
water	191:40	0:0	10	p_sys
op	191:45	0:0	10	->
water	191:47	0:0	10	i_telx_count
stmts	192:12	197:12	9	
water	192:12	0:0	10	{
call	193:16	196:46	10	UnpackVBI
arg	193:27	193:43	11	p_line+anc+5
water	193:27	0:0	12	p_line
op	193:34	0:0	12	+
water	193:36	0:0	12	anc
op	193:40	0:0	12	+
water	193:42	0:0	12	5
arg	193:45	193:69	11	p_sys->i_active_size-5
water	193:45	0:0	12	p_sys
op	193:50	0:0	12	->
water	193:52	0:0	12	i_active_size
op	193:66	0:0	12	-
water	193:68	0:0	12	5
arg	194:20	196:46	11	&p_sys->p_telx_buffer[(i_field_line-p_sys->i_telx_line+b_field*p_sys->i_telx_count)*p_sys->i_width*2]
op	194:20	0:0	12	&
water	194:21	0:0	12	p_sys
op	194:26	0:0	12	->
water	194:28	0:0	12	p_telx_buffer
op	194:41	0:0	12	[
water	194:42	0:0	12	(
water	194:43	0:0	12	i_field_line
op	195:24	0:0	12	-
water	195:26	0:0	12	p_sys
op	195:31	0:0	12	->
water	195:33	0:0	12	i_telx_line
op	195:45	0:0	12	+
water	195:47	0:0	12	b_field
op	195:55	0:0	12	*
water	195:57	0:0	12	p_sys
op	195:62	0:0	12	->
water	195:64	0:0	12	i_telx_count
water	195:76	0:0	12	)
op	196:24	0:0	12	*
water	196:26	0:0	12	p_sys
op	196:31	0:0	12	->
water	196:33	0:0	12	i_width
op	196:41	0:0	12	*
water	196:43	0:0	12	2
op	196:44	0:0	12	]
water	196:47	0:0	10	;
water	197:12	0:0	10	}
else	198:12	206:12	6
stmts	198:17	206:12	7	
if	198:17	206:12	8	(b_vbi &&HasAncillary (p_line + anc + 5 ))
cond	198:22	198:62	9	b_vbi &&HasAncillary (p_line + anc + 5 )
water	198:22	0:0	10	b_vbi
op	198:28	0:0	10	&&
call	198:31	198:62	10	HasAncillary
arg	198:45	198:62	11	p_line+anc+5
water	198:45	0:0	12	p_line
op	198:52	0:0	12	+
water	198:54	0:0	12	anc
op	198:58	0:0	12	+
water	198:60	0:0	12	5
stmts	199:12	206:12	9	
water	199:12	0:0	10	{
decl	201:16	201:77	10	unsigned int	i_anc_words
op	201:41	0:0	10	=
water	201:43	0:0	10	(
water	201:44	0:0	10	p_sys
op	201:49	0:0	10	->
water	201:51	0:0	10	i_active_size
op	201:65	0:0	10	-
water	201:67	0:0	10	5
water	201:68	0:0	10	)
op	201:70	0:0	10	*
water	201:72	0:0	10	4
op	201:74	0:0	10	/
water	201:76	0:0	10	5
decl	202:16	202:43	10	uint16_t	p_anc[i_anc_words]
call	203:16	204:33	10	UnpackAnc
arg	203:27	203:37	11	p_line+5
water	203:27	0:0	12	p_line
op	203:34	0:0	12	+
water	203:36	0:0	12	5
arg	203:39	203:63	11	p_sys->i_active_size-5
water	203:39	0:0	12	p_sys
op	203:44	0:0	12	->
water	203:46	0:0	12	i_active_size
op	203:60	0:0	12	-
water	203:62	0:0	12	5
arg	204:27	204:33	11	p_anc
water	204:27	0:0	12	p_anc
water	204:34	0:0	10	;
call	205:16	205:61	10	HandleAncillary
arg	205:33	205:40	11	p_demux
water	205:33	0:0	12	p_demux
arg	205:42	205:47	11	p_anc
water	205:42	0:0	12	p_anc
arg	205:49	205:61	11	i_anc_words
water	205:49	0:0	12	i_anc_words
water	205:62	0:0	10	;
water	206:12	0:0	10	}
water	207:12	0:0	6	p_sys
op	207:17	0:0	6	->
water	207:19	0:0	6	i_current_line
op	207:33	0:0	6	++
water	207:35	0:0	6	;
if	208:12	213:12	6	(p_sys -> i_current_line == p_sys -> i_nb_lines)
cond	208:17	208:49	7	p_sys -> i_current_line == p_sys -> i_nb_lines
water	208:17	0:0	8	p_sys
op	208:22	0:0	8	->
water	208:24	0:0	8	i_current_line
op	208:39	0:0	8	==
water	208:42	0:0	8	p_sys
op	208:47	0:0	8	->
water	208:49	0:0	8	i_nb_lines
stmts	209:12	213:12	7	
water	209:12	0:0	8	{
water	210:16	0:0	8	p_sys
op	210:21	0:0	8	->
water	210:23	0:0	8	i_current_line
op	210:38	0:0	8	%=
water	210:41	0:0	8	p_sys
op	210:46	0:0	8	->
water	210:48	0:0	8	i_nb_lines
water	210:58	0:0	8	;
if	211:16	212:39	8	(DecodeFrame (p_demux ) != VLC_SUCCESS)
cond	211:20	211:46	9	DecodeFrame (p_demux ) != VLC_SUCCESS
call	211:20	211:41	10	DecodeFrame
arg	211:33	211:41	11	p_demux
water	211:33	0:0	12	p_demux
op	211:43	0:0	10	!=
water	211:46	0:0	10	VLC_SUCCESS
stmts	212:20	212:39	9	
return	212:20	212:39	10	VLC_EGENERIC
water	212:27	0:0	11	VLC_EGENERIC
water	213:12	0:0	8	}
water	214:8	0:0	6	}
break	215:8	215:13	4	
water	216:4	0:0	4	}
return	217:4	217:22	2	VLC_SUCCESS
water	217:11	0:0	3	VLC_SUCCESS
