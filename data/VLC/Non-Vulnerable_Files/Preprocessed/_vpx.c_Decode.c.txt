func	2:0	68:0	0	static picture_t *	Decode
params	2:24	0:0	1	
param	2:25	2:39	2	decoder_t *	dec
param	2:41	2:59	2	block_t * *	pp_block
stmnts	0:0	67:14	1	
decl	4:4	4:48	2	struct vpx_codec_ctx	*ctx
op	4:30	0:0	2	=
op	4:32	0:0	2	&
water	4:33	0:0	2	dec
op	4:36	0:0	2	->
water	4:38	0:0	2	p_sys
op	4:43	0:0	2	->
water	4:45	0:0	2	ctx
if	5:4	6:19	2	(! pp_block || ! * pp_block)
cond	5:8	5:23	3	! pp_block || ! * pp_block
op	5:8	0:0	4	!
water	5:9	0:0	4	pp_block
op	5:18	0:0	4	||
op	5:21	0:0	4	!
op	5:22	0:0	4	*
water	5:23	0:0	4	pp_block
stmts	6:8	6:19	3	
return	6:8	6:19	4	NULL
water	6:15	0:0	5	NULL
decl	7:4	7:30	2	block_t	*block
op	7:19	0:0	2	=
op	7:21	0:0	2	*
water	7:22	0:0	2	pp_block
if	8:4	9:19	2	(block -> i_flags & ( BLOCK_FLAG_DISCONTINUITY | BLOCK_FLAG_CORRUPTED ))
cond	8:8	8:71	3	block -> i_flags & ( BLOCK_FLAG_DISCONTINUITY | BLOCK_FLAG_CORRUPTED )
water	8:8	0:0	4	block
op	8:13	0:0	4	->
water	8:15	0:0	4	i_flags
op	8:23	0:0	4	&
water	8:25	0:0	4	(
water	8:26	0:0	4	BLOCK_FLAG_DISCONTINUITY
op	8:50	0:0	4	|
water	8:51	0:0	4	BLOCK_FLAG_CORRUPTED
water	8:71	0:0	4	)
stmts	9:8	9:19	3	
return	9:8	9:19	4	NULL
water	9:15	0:0	5	NULL
decl	11:4	11:47	2	mtime_t	*pkt_pts
op	11:21	0:0	2	=
call	11:23	11:46	3	malloc
arg	11:30	11:46	4	sizeof(*pkt_pts)
op	11:30	0:0	5	sizeof
water	11:36	0:0	5	(
op	11:37	0:0	5	*
water	11:38	0:0	5	pkt_pts
water	11:45	0:0	5	)
if	12:4	16:4	2	(! pkt_pts)
cond	12:8	12:9	3	! pkt_pts
op	12:8	0:0	4	!
water	12:9	0:0	4	pkt_pts
stmts	12:18	16:4	3	
water	12:18	0:0	4	{
call	13:8	13:27	4	block_Release
arg	13:22	13:27	5	block
water	13:22	0:0	6	block
water	13:28	0:0	4	;
op	14:8	0:0	4	*
water	14:9	0:0	4	pp_block
op	14:18	0:0	4	=
water	14:20	0:0	4	NULL
water	14:24	0:0	4	;
return	15:8	15:19	4	NULL
water	15:15	0:0	5	NULL
water	16:4	0:0	4	}
op	17:4	0:0	2	*
water	17:5	0:0	2	pkt_pts
op	17:13	0:0	2	=
water	17:15	0:0	2	block
op	17:20	0:0	2	->
water	17:22	0:0	2	i_pts
water	17:27	0:0	2	;
decl	18:4	18:23	2	vpx_codec_err_t	err
water	19:4	0:0	2	err
op	19:8	0:0	2	=
call	19:10	19:76	2	vpx_codec_decode
arg	19:27	19:30	3	ctx
water	19:27	0:0	4	ctx
arg	19:32	19:47	3	block->p_buffer
water	19:32	0:0	4	block
op	19:37	0:0	4	->
water	19:39	0:0	4	p_buffer
arg	19:49	19:64	3	block->i_buffer
water	19:49	0:0	4	block
op	19:54	0:0	4	->
water	19:56	0:0	4	i_buffer
arg	19:66	19:73	3	pkt_pts
water	19:66	0:0	4	pkt_pts
arg	19:75	19:76	3	0
water	19:75	0:0	4	0
water	19:77	0:0	2	;
call	20:4	20:23	2	block_Release
arg	20:18	20:23	3	block
water	20:18	0:0	4	block
water	20:24	0:0	2	;
op	21:4	0:0	2	*
water	21:5	0:0	2	pp_block
op	21:14	0:0	2	=
water	21:16	0:0	2	NULL
water	21:20	0:0	2	;
if	22:4	30:4	2	(err != VPX_CODEC_OK)
cond	22:8	22:15	3	err != VPX_CODEC_OK
water	22:8	0:0	4	err
op	22:12	0:0	4	!=
water	22:15	0:0	4	VPX_CODEC_OK
stmts	22:29	30:4	3	
water	22:29	0:0	4	{
call	23:8	23:20	4	free
arg	23:13	23:20	5	pkt_pts
water	23:13	0:0	6	pkt_pts
water	23:21	0:0	4	;
decl	24:8	24:49	4	const char	*error
op	24:27	0:0	4	=
call	24:29	24:48	5	vpx_codec_error
arg	24:45	24:48	6	ctx
water	24:45	0:0	7	ctx
decl	25:8	25:56	4	const char	*detail
op	25:27	0:0	4	=
call	25:29	25:55	5	vpx_codec_error_detail
arg	25:52	25:55	6	ctx
water	25:52	0:0	7	ctx
if	26:8	27:46	4	(! detail)
cond	26:12	26:13	5	! detail
op	26:12	0:0	6	!
water	26:13	0:0	6	detail
stmts	27:12	27:46	5	
water	27:12	0:0	6	detail
op	27:19	0:0	6	=
water	27:21	0:0	6	"no specific information"
water	27:46	0:0	6	;
call	28:8	28:69	4	msg_Err
arg	28:16	28:19	5	dec
water	28:16	0:0	6	dec
arg	28:21	28:54	5	"Failed to decode frame: %s (%s)"
water	28:21	0:0	6	"Failed to decode frame: %s (%s)"
arg	28:56	28:61	5	error
water	28:56	0:0	6	error
arg	28:63	28:69	5	detail
water	28:63	0:0	6	detail
water	28:70	0:0	4	;
return	29:8	29:19	4	NULL
water	29:15	0:0	5	NULL
water	30:4	0:0	4	}
decl	31:4	31:27	2	const void	*iter
op	31:21	0:0	2	=
water	31:23	0:0	2	NULL
decl	32:4	32:59	2	struct vpx_image	*img
op	32:26	0:0	2	=
call	32:28	32:58	3	vpx_codec_get_frame
arg	32:48	32:51	4	ctx
water	32:48	0:0	5	ctx
arg	32:53	32:58	4	&iter
op	32:53	0:0	5	&
water	32:54	0:0	5	iter
if	33:4	36:4	2	(! img)
cond	33:8	33:9	3	! img
op	33:8	0:0	4	!
water	33:9	0:0	4	img
stmts	33:14	36:4	3	
water	33:14	0:0	4	{
call	34:8	34:20	4	free
arg	34:13	34:20	5	pkt_pts
water	34:13	0:0	6	pkt_pts
water	34:21	0:0	4	;
return	35:8	35:19	4	NULL
water	35:15	0:0	5	NULL
water	36:4	0:0	4	}
water	38:4	0:0	2	pkt_pts
op	38:12	0:0	2	=
water	38:14	0:0	2	img
op	38:17	0:0	2	->
water	38:19	0:0	2	user_priv
water	38:28	0:0	2	;
decl	39:4	39:26	2	mtime_t	pts
op	39:16	0:0	2	=
op	39:18	0:0	2	*
water	39:19	0:0	2	pkt_pts
call	40:4	40:16	2	free
arg	40:9	40:16	3	pkt_pts
water	40:9	0:0	4	pkt_pts
water	40:17	0:0	2	;
if	41:4	44:4	2	(img -> fmt != VPX_IMG_FMT_I420)
cond	41:8	41:20	3	img -> fmt != VPX_IMG_FMT_I420
water	41:8	0:0	4	img
op	41:11	0:0	4	->
water	41:13	0:0	4	fmt
op	41:17	0:0	4	!=
water	41:20	0:0	4	VPX_IMG_FMT_I420
stmts	41:38	44:4	3	
water	41:38	0:0	4	{
call	42:8	42:65	4	msg_Err
arg	42:16	42:19	5	dec
water	42:16	0:0	6	dec
arg	42:21	42:55	5	"Unsupported output colorspace %d"
water	42:21	0:0	6	"Unsupported output colorspace %d"
arg	42:57	42:65	5	img->fmt
water	42:57	0:0	6	img
op	42:60	0:0	6	->
water	42:62	0:0	6	fmt
water	42:66	0:0	4	;
return	43:8	43:19	4	NULL
water	43:15	0:0	5	NULL
water	44:4	0:0	4	}
decl	45:4	45:43	2	video_format_t	*v
op	45:22	0:0	2	=
op	45:24	0:0	2	&
water	45:25	0:0	2	dec
op	45:28	0:0	2	->
water	45:30	0:0	2	fmt_out
op	45:37	0:0	2	.
water	45:38	0:0	2	video
if	46:4	49:4	2	(img -> d_w != v -> i_visible_width || img -> d_h != v -> i_visible_height)
cond	46:8	46:57	3	img -> d_w != v -> i_visible_width || img -> d_h != v -> i_visible_height
water	46:8	0:0	4	img
op	46:11	0:0	4	->
water	46:13	0:0	4	d_w
op	46:17	0:0	4	!=
water	46:20	0:0	4	v
op	46:21	0:0	4	->
water	46:23	0:0	4	i_visible_width
op	46:39	0:0	4	||
water	46:42	0:0	4	img
op	46:45	0:0	4	->
water	46:47	0:0	4	d_h
op	46:51	0:0	4	!=
water	46:54	0:0	4	v
op	46:55	0:0	4	->
water	46:57	0:0	4	i_visible_height
stmts	46:75	49:4	3	
water	46:75	0:0	4	{
water	47:8	0:0	4	v
op	47:9	0:0	4	->
water	47:11	0:0	4	i_visible_width
op	47:27	0:0	4	=
water	47:29	0:0	4	img
op	47:32	0:0	4	->
water	47:34	0:0	4	d_w
water	47:37	0:0	4	;
water	48:8	0:0	4	v
op	48:9	0:0	4	->
water	48:11	0:0	4	i_visible_height
op	48:28	0:0	4	=
water	48:30	0:0	4	img
op	48:33	0:0	4	->
water	48:35	0:0	4	d_h
water	48:38	0:0	4	;
water	49:4	0:0	4	}
decl	50:4	50:44	2	picture_t	*pic
op	50:19	0:0	2	=
call	50:21	50:43	3	decoder_NewPicture
arg	50:40	50:43	4	dec
water	50:40	0:0	5	dec
if	51:4	52:19	2	(! pic)
cond	51:8	51:9	3	! pic
op	51:8	0:0	4	!
water	51:9	0:0	4	pic
stmts	52:8	52:19	3	
return	52:8	52:19	4	NULL
water	52:15	0:0	5	NULL
for	53:4	64:4	2	( int plane = 0 ;plane < pic -> i_planes;plane ++)
forinit	0:0	53:22	3	 int plane = 0 ;
decl	53:9	53:22	4	int	plane
op	53:19	0:0	4	=
water	53:21	0:0	4	0
cond	53:24	53:37	3	plane < pic -> i_planes
water	53:24	0:0	4	plane
op	53:30	0:0	4	<
water	53:32	0:0	4	pic
op	53:35	0:0	4	->
water	53:37	0:0	4	i_planes
forexpr	53:47	53:52	3	plane ++
water	53:47	0:0	4	plane
op	53:52	0:0	4	++
stmts	53:57	64:4	3	
water	53:57	0:0	4	{
decl	54:8	54:41	4	uint8_t	*src
op	54:21	0:0	4	=
water	54:23	0:0	4	img
op	54:26	0:0	4	->
water	54:28	0:0	4	planes
op	54:34	0:0	4	[
water	54:35	0:0	4	plane
op	54:40	0:0	4	]
decl	55:8	55:45	4	uint8_t	*dst
op	55:21	0:0	4	=
water	55:23	0:0	4	pic
op	55:26	0:0	4	->
water	55:28	0:0	4	p
op	55:29	0:0	4	[
water	55:30	0:0	4	plane
op	55:35	0:0	4	]
op	55:36	0:0	4	.
water	55:37	0:0	4	p_pixels
decl	56:8	56:43	4	int	src_stride
op	56:23	0:0	4	=
water	56:25	0:0	4	img
op	56:28	0:0	4	->
water	56:30	0:0	4	stride
op	56:36	0:0	4	[
water	56:37	0:0	4	plane
op	56:42	0:0	4	]
decl	57:8	57:46	4	int	dst_stride
op	57:23	0:0	4	=
water	57:25	0:0	4	pic
op	57:28	0:0	4	->
water	57:30	0:0	4	p
op	57:31	0:0	4	[
water	57:32	0:0	4	plane
op	57:37	0:0	4	]
op	57:38	0:0	4	.
water	57:39	0:0	4	i_pitch
decl	58:8	58:50	4	int	size
op	58:17	0:0	4	=
call	58:19	58:49	5	__MIN
arg	58:26	58:36	6	src_stride
water	58:26	0:0	7	src_stride
arg	58:38	58:49	6	dst_stride
water	58:38	0:0	7	dst_stride
for	59:8	63:8	4	( int line = 0 ;line < pic -> p [ plane ] . i_visible_lines;line ++)
forinit	0:0	59:25	5	 int line = 0 ;
decl	59:13	59:25	6	int	line
op	59:22	0:0	6	=
water	59:24	0:0	6	0
cond	59:27	59:48	5	line < pic -> p [ plane ] . i_visible_lines
water	59:27	0:0	6	line
op	59:32	0:0	6	<
water	59:34	0:0	6	pic
op	59:37	0:0	6	->
water	59:39	0:0	6	p
op	59:40	0:0	6	[
water	59:41	0:0	6	plane
op	59:46	0:0	6	]
op	59:47	0:0	6	.
water	59:48	0:0	6	i_visible_lines
forexpr	59:65	59:69	5	line ++
water	59:65	0:0	6	line
op	59:69	0:0	6	++
stmts	59:74	63:8	5	
water	59:74	0:0	6	{
call	60:12	60:35	6	memcpy
arg	60:20	60:23	7	dst
water	60:20	0:0	8	dst
arg	60:25	60:28	7	src
water	60:25	0:0	8	src
arg	60:30	60:35	7	size
water	60:30	0:0	8	size
water	60:36	0:0	6	;
water	61:12	0:0	6	src
op	61:16	0:0	6	+=
water	61:19	0:0	6	src_stride
water	61:29	0:0	6	;
water	62:12	0:0	6	dst
op	62:16	0:0	6	+=
water	62:19	0:0	6	dst_stride
water	62:29	0:0	6	;
water	63:8	0:0	6	}
water	64:4	0:0	4	}
water	65:4	0:0	2	pic
op	65:7	0:0	2	->
water	65:9	0:0	2	b_progressive
op	65:23	0:0	2	=
water	65:25	0:0	2	true
water	65:29	0:0	2	;
water	66:4	0:0	2	pic
op	66:7	0:0	2	->
water	66:9	0:0	2	date
op	66:14	0:0	2	=
water	66:16	0:0	2	pts
water	66:19	0:0	2	;
return	67:4	67:14	2	pic
water	67:11	0:0	3	pic
