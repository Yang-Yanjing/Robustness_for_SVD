func	2:0	24:0	0	static int	Mouse
params	2:16	0:0	1	
param	2:18	2:46	2	video_splitter_t *	p_splitter
param	2:48	2:68	2	vlc_mouse_t *	p_mouse
param	3:18	3:29	2	int	i_index
param	4:18	4:42	2	const vlc_mouse_t *	p_old
param	4:44	4:69	2	const vlc_mouse_t *	p_new
stmnts	6:4	23:23	1	
call	6:4	6:20	2	VLC_UNUSED
arg	6:15	6:20	3	p_old
water	6:15	0:0	4	p_old
water	6:21	0:0	2	;
decl	7:4	7:51	2	video_splitter_sys_t	*p_sys
op	7:32	0:0	2	=
water	7:34	0:0	2	p_splitter
op	7:44	0:0	2	->
water	7:46	0:0	2	p_sys
for	8:4	21:4	2	( int y = 0 ;y < p_sys -> i_row;y ++)
forinit	0:0	8:18	3	 int y = 0 ;
decl	8:9	8:18	4	int	y
op	8:15	0:0	4	=
water	8:17	0:0	4	0
cond	8:20	8:31	3	y < p_sys -> i_row
water	8:20	0:0	4	y
op	8:22	0:0	4	<
water	8:24	0:0	4	p_sys
op	8:29	0:0	4	->
water	8:31	0:0	4	i_row
forexpr	8:38	8:39	3	y ++
water	8:38	0:0	4	y
op	8:39	0:0	4	++
stmts	9:4	21:4	3	
water	9:4	0:0	4	{
for	10:8	20:8	4	( int x = 0 ;x < p_sys -> i_col;x ++)
forinit	0:0	10:22	5	 int x = 0 ;
decl	10:13	10:22	6	int	x
op	10:19	0:0	6	=
water	10:21	0:0	6	0
cond	10:24	10:35	5	x < p_sys -> i_col
water	10:24	0:0	6	x
op	10:26	0:0	6	<
water	10:28	0:0	6	p_sys
op	10:33	0:0	6	->
water	10:35	0:0	6	i_col
forexpr	10:42	10:43	5	x ++
water	10:42	0:0	6	x
op	10:43	0:0	6	++
stmts	11:8	20:8	5	
water	11:8	0:0	6	{
decl	12:12	12:61	6	wall_output_t	*p_output
op	12:36	0:0	6	=
op	12:38	0:0	6	&
water	12:39	0:0	6	p_sys
op	12:44	0:0	6	->
water	12:46	0:0	6	pp_output
op	12:55	0:0	6	[
water	12:56	0:0	6	x
op	12:57	0:0	6	]
op	12:58	0:0	6	[
water	12:59	0:0	6	y
op	12:60	0:0	6	]
if	13:12	19:12	6	(p_output -> b_active && p_output -> i_output == i_index)
cond	13:16	13:60	7	p_output -> b_active && p_output -> i_output == i_index
water	13:16	0:0	8	p_output
op	13:24	0:0	8	->
water	13:26	0:0	8	b_active
op	13:35	0:0	8	&&
water	13:38	0:0	8	p_output
op	13:46	0:0	8	->
water	13:48	0:0	8	i_output
op	13:57	0:0	8	==
water	13:60	0:0	8	i_index
stmts	14:12	19:12	7	
water	14:12	0:0	8	{
op	15:16	0:0	8	*
water	15:17	0:0	8	p_mouse
op	15:25	0:0	8	=
op	15:27	0:0	8	*
water	15:28	0:0	8	p_new
water	15:33	0:0	8	;
water	16:16	0:0	8	p_mouse
op	16:23	0:0	8	->
water	16:25	0:0	8	i_x
op	16:29	0:0	8	+=
water	16:32	0:0	8	p_output
op	16:40	0:0	8	->
water	16:42	0:0	8	i_left
water	16:48	0:0	8	;
water	17:16	0:0	8	p_mouse
op	17:23	0:0	8	->
water	17:25	0:0	8	i_y
op	17:29	0:0	8	+=
water	17:32	0:0	8	p_output
op	17:40	0:0	8	->
water	17:42	0:0	8	i_top
water	17:47	0:0	8	;
return	18:16	18:34	8	VLC_SUCCESS
water	18:23	0:0	9	VLC_SUCCESS
water	19:12	0:0	8	}
water	20:8	0:0	6	}
water	21:4	0:0	4	}
call	22:4	22:12	2	assert
arg	22:11	22:12	3	0
water	22:11	0:0	4	0
water	22:13	0:0	2	;
return	23:4	23:23	2	VLC_EGENERIC
water	23:11	0:0	3	VLC_EGENERIC
decl	31:4	31:51	0	video_splitter_sys_t	*p_sys
op	31:32	0:0	0	=
water	31:34	0:0	0	p_splitter
op	31:44	0:0	0	->
water	31:46	0:0	0	p_sys
decl	32:9	32:18	0	int	y
op	32:15	0:0	0	=
water	32:17	0:0	0	0
decl	34:13	34:22	0	int	x
op	34:19	0:0	0	=
water	34:21	0:0	0	0
decl	36:12	36:61	0	wall_output_t	*p_output
op	36:36	0:0	0	=
op	36:38	0:0	0	&
water	36:39	0:0	0	p_sys
op	36:44	0:0	0	->
water	36:46	0:0	0	pp_output
op	36:55	0:0	0	[
water	36:56	0:0	0	x
op	36:57	0:0	0	]
op	36:58	0:0	0	[
water	36:59	0:0	0	y
op	36:60	0:0	0	]
