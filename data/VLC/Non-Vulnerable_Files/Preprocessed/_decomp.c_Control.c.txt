func	2:0	40:0	0	static int	Control
params	2:19	0:0	1	
param	2:20	2:36	2	stream_t *	stream
param	2:38	2:47	2	int	query
param	2:49	2:61	2	va_list	args
stmnts	0:0	39:22	1	
decl	4:4	4:39	2	stream_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	stream
op	4:32	0:0	2	->
water	4:34	0:0	2	p_sys
switch	5:4	38:4	2	(query)
cond	5:12	5:12	3	query
water	5:12	0:0	4	query
stmts	6:4	38:4	3	
water	6:4	0:0	4	{
label	7:8	7:28	4	case STREAM_CAN_SEEK :
label	8:8	8:32	4	case STREAM_CAN_FASTSEEK :
op	9:12	0:0	4	*
water	9:13	0:0	4	(
call	9:14	9:34	4	va_arg
arg	9:22	9:26	5	args
water	9:22	0:0	6	args
arg	9:28	9:34	5	bool*
water	9:28	0:0	6	bool
op	9:33	0:0	6	*
water	9:35	0:0	4	)
op	9:37	0:0	4	=
water	9:39	0:0	4	false
water	9:44	0:0	4	;
break	10:12	10:17	4	
label	11:8	11:29	4	case STREAM_CAN_PAUSE :
op	12:13	0:0	4	*
water	12:14	0:0	4	(
call	12:15	12:35	4	va_arg
arg	12:23	12:27	5	args
water	12:23	0:0	6	args
arg	12:29	12:35	5	bool*
water	12:29	0:0	6	bool
op	12:34	0:0	6	*
water	12:36	0:0	4	)
op	12:38	0:0	4	=
water	12:40	0:0	4	p_sys
op	12:45	0:0	4	->
water	12:47	0:0	4	can_pause
water	12:56	0:0	4	;
break	13:12	13:17	4	
label	14:8	14:36	4	case STREAM_CAN_CONTROL_PACE :
op	15:12	0:0	4	*
water	15:13	0:0	4	(
call	15:14	15:34	4	va_arg
arg	15:22	15:26	5	args
water	15:22	0:0	6	args
arg	15:28	15:34	5	bool*
water	15:28	0:0	6	bool
op	15:33	0:0	6	*
water	15:35	0:0	4	)
op	15:37	0:0	4	=
water	15:39	0:0	4	p_sys
op	15:44	0:0	4	->
water	15:46	0:0	4	can_pace
water	15:54	0:0	4	;
break	16:12	16:17	4	
label	17:8	17:32	4	case STREAM_GET_POSITION :
op	18:12	0:0	4	*
water	18:13	0:0	4	(
call	18:14	18:38	4	va_arg
arg	18:22	18:26	5	args
water	18:22	0:0	6	args
arg	18:28	18:38	5	uint64_t*
water	18:28	0:0	6	uint64_t
op	18:37	0:0	6	*
water	18:39	0:0	4	)
op	18:41	0:0	4	=
water	18:43	0:0	4	p_sys
op	18:48	0:0	4	->
water	18:50	0:0	4	offset
water	18:56	0:0	4	;
break	19:12	19:17	4	
label	20:8	20:28	4	case STREAM_GET_SIZE :
op	21:12	0:0	4	*
water	21:13	0:0	4	(
call	21:14	21:38	4	va_arg
arg	21:22	21:26	5	args
water	21:22	0:0	6	args
arg	21:28	21:38	5	uint64_t*
water	21:28	0:0	6	uint64_t
op	21:37	0:0	6	*
water	21:39	0:0	4	)
op	21:41	0:0	4	=
water	21:43	0:0	4	0
water	21:44	0:0	4	;
break	22:12	22:17	4	
label	23:8	23:33	4	case STREAM_GET_PTS_DELAY :
call	24:12	24:36	4	*va_arg
arg	24:21	24:25	5	args
water	24:21	0:0	6	args
arg	24:27	24:36	5	int64_t*
water	24:27	0:0	6	int64_t
op	24:35	0:0	6	*
op	24:38	0:0	4	=
water	24:40	0:0	4	p_sys
op	24:45	0:0	4	->
water	24:47	0:0	4	pts_delay
water	24:56	0:0	4	;
break	25:12	25:17	4	
label	26:8	26:35	4	case STREAM_SET_PAUSE_STATE :
water	27:8	0:0	4	{
decl	28:12	28:49	4	bool	paused
op	28:24	0:0	4	=
call	28:26	28:48	5	va_arg
arg	28:34	28:38	6	args
water	28:34	0:0	7	args
arg	28:40	28:48	6	unsigned
water	28:40	0:0	7	unsigned
call	29:12	29:40	4	vlc_mutex_lock
arg	29:28	29:40	5	&p_sys->lock
op	29:28	0:0	6	&
water	29:29	0:0	6	p_sys
op	29:34	0:0	6	->
water	29:36	0:0	6	lock
water	29:41	0:0	4	;
call	30:12	30:76	4	stream_Control
arg	30:28	30:44	5	stream->p_source
water	30:28	0:0	6	stream
op	30:34	0:0	6	->
water	30:36	0:0	6	p_source
arg	30:46	30:68	5	STREAM_SET_PAUSE_STATE
water	30:46	0:0	6	STREAM_SET_PAUSE_STATE
arg	30:70	30:76	5	paused
water	30:70	0:0	6	paused
water	30:77	0:0	4	;
water	31:12	0:0	4	p_sys
op	31:17	0:0	4	->
water	31:19	0:0	4	paused
op	31:26	0:0	4	=
water	31:28	0:0	4	paused
water	31:34	0:0	4	;
call	32:12	32:41	4	vlc_cond_signal
arg	32:29	32:41	5	&p_sys->wait
op	32:29	0:0	6	&
water	32:30	0:0	6	p_sys
op	32:35	0:0	6	->
water	32:37	0:0	6	wait
water	32:42	0:0	4	;
call	33:12	33:42	4	vlc_mutex_unlock
arg	33:30	33:42	5	&p_sys->lock
op	33:30	0:0	6	&
water	33:31	0:0	6	p_sys
op	33:36	0:0	6	->
water	33:38	0:0	6	lock
water	33:43	0:0	4	;
break	34:12	34:17	4	
water	35:8	0:0	4	}
label	36:8	36:15	4	default :
return	37:12	37:31	4	VLC_EGENERIC
water	37:19	0:0	5	VLC_EGENERIC
water	38:4	0:0	4	}
return	39:4	39:22	2	VLC_SUCCESS
water	39:11	0:0	3	VLC_SUCCESS
