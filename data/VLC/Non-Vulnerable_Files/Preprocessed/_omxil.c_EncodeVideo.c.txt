func	2:0	86:0	0	static block_t *	EncodeVideo
params	2:27	0:0	1	
param	2:29	2:45	2	encoder_t *	p_enc
param	2:47	2:64	2	picture_t *	p_pic
stmnts	0:0	85:15	1	
decl	4:4	4:42	2	decoder_t	*p_dec
op	4:21	0:0	2	=
water	4:23	0:0	2	(
water	4:25	0:0	2	decoder_t
op	4:35	0:0	2	*
water	4:36	0:0	2	)
water	4:37	0:0	2	p_enc
decl	5:4	5:39	2	decoder_sys_t	*p_sys
op	5:25	0:0	2	=
water	5:27	0:0	2	p_dec
op	5:32	0:0	2	->
water	5:34	0:0	2	p_sys
decl	6:4	6:27	2	OMX_ERRORTYPE	omx_error
decl	7:4	7:18	2	unsigned int	i
decl	8:4	8:34	2	OMX_BUFFERHEADERTYPE	*p_header
decl	9:4	9:24	2	block_t	*p_block
op	9:21	0:0	2	=
water	9:23	0:0	2	0
if	10:4	10:28	2	(! p_pic)
cond	10:8	10:9	3	! p_pic
op	10:8	0:0	4	!
water	10:9	0:0	4	p_pic
stmts	10:17	10:28	3	
return	10:17	10:28	4	NULL
water	10:24	0:0	5	NULL
if	12:4	16:4	2	(p_sys -> b_error)
cond	12:7	12:14	3	p_sys -> b_error
water	12:7	0:0	4	p_sys
op	12:12	0:0	4	->
water	12:14	0:0	4	b_error
stmts	13:4	16:4	3	
water	13:4	0:0	4	{
call	14:8	14:46	4	msg_Dbg
arg	14:16	14:21	5	p_dec
water	14:16	0:0	6	p_dec
arg	14:23	14:46	5	"error during encoding"
water	14:23	0:0	6	"error during encoding"
water	14:47	0:0	4	;
return	15:8	15:19	4	NULL
water	15:15	0:0	5	NULL
water	16:4	0:0	4	}
call	18:4	18:42	2	OMX_FIFO_GET
arg	18:17	18:32	3	&p_sys->in.fifo
op	18:17	0:0	4	&
water	18:18	0:0	4	p_sys
op	18:23	0:0	4	->
water	18:25	0:0	4	in
op	18:27	0:0	4	.
water	18:28	0:0	4	fifo
arg	18:34	18:42	3	p_header
water	18:34	0:0	4	p_header
water	18:43	0:0	2	;
if	19:4	42:4	2	(p_header)
cond	19:7	19:7	3	p_header
water	19:7	0:0	4	p_header
stmts	20:4	42:4	3	
water	20:4	0:0	4	{
if	23:8	27:8	4	(p_sys -> in . b_direct)
cond	23:11	23:21	5	p_sys -> in . b_direct
water	23:11	0:0	6	p_sys
op	23:16	0:0	6	->
water	23:18	0:0	6	in
op	23:20	0:0	6	.
water	23:21	0:0	6	b_direct
stmts	24:8	27:8	5	
water	24:8	0:0	6	{
water	25:12	0:0	6	p_header
op	25:20	0:0	6	->
water	25:22	0:0	6	pOutputPortPrivate
op	25:41	0:0	6	=
water	25:43	0:0	6	p_header
op	25:51	0:0	6	->
water	25:53	0:0	6	pBuffer
water	25:60	0:0	6	;
water	26:12	0:0	6	p_header
op	26:20	0:0	6	->
water	26:22	0:0	6	pBuffer
op	26:30	0:0	6	=
water	26:32	0:0	6	p_pic
op	26:37	0:0	6	->
water	26:39	0:0	6	p
op	26:40	0:0	6	[
water	26:41	0:0	6	0
op	26:42	0:0	6	]
op	26:43	0:0	6	.
water	26:44	0:0	6	p_pixels
water	26:52	0:0	6	;
water	27:8	0:0	6	}
else	28:8	31:8	4
stmts	29:8	31:8	5	
water	29:8	0:0	6	{
call	30:12	30:49	6	CopyVlcPicture
arg	30:27	30:32	7	p_dec
water	30:27	0:0	8	p_dec
arg	30:34	30:42	7	p_header
water	30:34	0:0	8	p_header
arg	30:44	30:49	7	p_pic
water	30:44	0:0	8	p_pic
water	30:50	0:0	6	;
water	31:8	0:0	6	}
water	32:8	0:0	4	p_header
op	32:16	0:0	4	->
water	32:18	0:0	4	nFilledLen
op	32:29	0:0	4	=
water	32:31	0:0	4	p_sys
op	32:36	0:0	4	->
water	32:38	0:0	4	in
op	32:40	0:0	4	.
water	32:41	0:0	4	i_frame_size
water	32:53	0:0	4	;
water	33:8	0:0	4	p_header
op	33:16	0:0	4	->
water	33:18	0:0	4	nOffset
op	33:26	0:0	4	=
water	33:28	0:0	4	0
water	33:29	0:0	4	;
water	34:8	0:0	4	p_header
op	34:16	0:0	4	->
water	34:18	0:0	4	nFlags
op	34:25	0:0	4	=
water	34:27	0:0	4	OMX_BUFFERFLAG_ENDOFFRAME
water	34:52	0:0	4	;
water	35:8	0:0	4	p_header
op	35:16	0:0	4	->
water	35:18	0:0	4	nTimeStamp
op	35:29	0:0	4	=
call	35:31	35:53	4	ToOmxTicks
arg	35:42	35:53	5	p_pic->date
water	35:42	0:0	6	p_pic
op	35:47	0:0	6	->
water	35:49	0:0	6	date
water	35:54	0:0	4	;
call	37:8	38:43	4	msg_Dbg
arg	37:17	37:22	5	p_dec
water	37:17	0:0	6	p_dec
arg	37:24	37:52	5	"EmptyThisBuffer %p, %p, %i"
water	37:24	0:0	6	"EmptyThisBuffer %p, %p, %i"
arg	37:54	37:62	5	p_header
water	37:54	0:0	6	p_header
arg	37:64	37:81	5	p_header->pBuffer
water	37:64	0:0	6	p_header
op	37:72	0:0	6	->
water	37:74	0:0	6	pBuffer
arg	38:17	38:43	5	(int)p_header->nFilledLen
water	38:17	0:0	6	(
water	38:18	0:0	6	int
water	38:21	0:0	6	)
water	38:22	0:0	6	p_header
op	38:30	0:0	6	->
water	38:32	0:0	6	nFilledLen
water	38:44	0:0	4	;
call	40:8	40:55	4	OMX_EmptyThisBuffer
arg	40:28	40:45	5	p_sys->omx_handle
water	40:28	0:0	6	p_sys
op	40:33	0:0	6	->
water	40:35	0:0	6	omx_handle
arg	40:47	40:55	5	p_header
water	40:47	0:0	6	p_header
water	40:56	0:0	4	;
water	41:8	0:0	4	p_sys
op	41:13	0:0	4	->
water	41:15	0:0	4	in
op	41:17	0:0	4	.
water	41:18	0:0	4	b_flushed
op	41:28	0:0	4	=
water	41:30	0:0	4	false
water	41:35	0:0	4	;
water	42:4	0:0	4	}
for	44:4	51:4	2	(i = 0 ;i < p_sys -> ports;i ++)
forinit	44:8	44:13	3	i = 0 ;
water	44:8	0:0	4	i
op	44:10	0:0	4	=
water	44:12	0:0	4	0
water	44:13	0:0	4	;
cond	44:15	44:26	3	i < p_sys -> ports
water	44:15	0:0	4	i
op	44:17	0:0	4	<
water	44:19	0:0	4	p_sys
op	44:24	0:0	4	->
water	44:26	0:0	4	ports
forexpr	44:33	44:34	3	i ++
water	44:33	0:0	4	i
op	44:34	0:0	4	++
stmts	45:4	51:4	3	
water	45:4	0:0	4	{
decl	46:8	46:44	4	OmxPort	*p_port
op	46:24	0:0	4	=
op	46:26	0:0	4	&
water	46:27	0:0	4	p_sys
op	46:32	0:0	4	->
water	46:34	0:0	4	p_ports
op	46:41	0:0	4	[
water	46:42	0:0	4	i
op	46:43	0:0	4	]
if	47:8	47:43	4	(! p_port -> b_reconfigure)
cond	47:11	47:20	5	! p_port -> b_reconfigure
op	47:11	0:0	6	!
water	47:12	0:0	6	p_port
op	47:18	0:0	6	->
water	47:20	0:0	6	b_reconfigure
stmts	47:35	47:43	5	
continue	47:35	47:43	6	
water	48:8	0:0	4	p_port
op	48:14	0:0	4	->
water	48:16	0:0	4	b_reconfigure
op	48:30	0:0	4	=
water	48:32	0:0	4	0
water	48:33	0:0	4	;
water	49:8	0:0	4	omx_error
op	49:18	0:0	4	=
call	49:20	49:49	4	PortReconfigure
arg	49:36	49:41	5	p_dec
water	49:36	0:0	6	p_dec
arg	49:43	49:49	5	p_port
water	49:43	0:0	6	p_port
water	49:50	0:0	4	;
call	50:8	50:55	4	CHECK_ERROR
arg	50:20	50:29	5	omx_error
water	50:20	0:0	6	omx_error
arg	50:31	50:55	5	"PortReconfigure failed"
water	50:31	0:0	6	"PortReconfigure failed"
water	50:56	0:0	4	;
water	51:4	0:0	4	}
while	53:4	80:4	2	(! p_block)
cond	53:10	53:11	3	! p_block
op	53:10	0:0	4	!
water	53:11	0:0	4	p_block
stmts	54:4	80:4	3	
water	54:4	0:0	4	{
call	55:8	55:47	4	OMX_FIFO_GET
arg	55:21	55:37	5	&p_sys->out.fifo
op	55:21	0:0	6	&
water	55:22	0:0	6	p_sys
op	55:27	0:0	6	->
water	55:29	0:0	6	out
op	55:32	0:0	6	.
water	55:33	0:0	6	fifo
arg	55:39	55:47	5	p_header
water	55:39	0:0	6	p_header
water	55:48	0:0	4	;
if	56:8	75:8	4	(p_header -> nFilledLen)
cond	56:11	56:21	5	p_header -> nFilledLen
water	56:11	0:0	6	p_header
op	56:19	0:0	6	->
water	56:21	0:0	6	nFilledLen
stmts	57:8	75:8	5	
water	57:8	0:0	6	{
if	58:12	62:12	6	(p_header -> nFlags & OMX_BUFFERFLAG_CODECCONFIG)
cond	58:15	58:34	7	p_header -> nFlags & OMX_BUFFERFLAG_CODECCONFIG
water	58:15	0:0	8	p_header
op	58:23	0:0	8	->
water	58:25	0:0	8	nFlags
op	58:32	0:0	8	&
water	58:34	0:0	8	OMX_BUFFERFLAG_CODECCONFIG
stmts	59:12	62:12	7	
water	59:12	0:0	8	{
call	61:16	61:84	8	msg_Dbg
arg	61:24	61:29	9	p_dec
water	61:24	0:0	10	p_dec
arg	61:31	61:57	9	"received codec config %i"
water	61:31	0:0	10	"received codec config %i"
arg	61:59	61:84	9	(int)p_header->nFilledLen
water	61:59	0:0	10	(
water	61:60	0:0	10	int
water	61:63	0:0	10	)
water	61:64	0:0	10	p_header
op	61:72	0:0	10	->
water	61:74	0:0	10	nFilledLen
water	61:85	0:0	8	;
water	62:12	0:0	8	}
water	63:12	0:0	6	p_block
op	63:20	0:0	6	=
water	63:22	0:0	6	p_header
op	63:30	0:0	6	->
water	63:32	0:0	6	pAppPrivate
water	63:43	0:0	6	;
if	64:12	70:12	6	(! p_block)
cond	64:15	64:16	7	! p_block
op	64:15	0:0	8	!
water	64:16	0:0	8	p_block
stmts	65:12	70:12	7	
water	65:12	0:0	8	{
water	68:16	0:0	8	p_block
op	68:24	0:0	8	=
call	68:26	68:60	8	block_Alloc
arg	68:39	68:60	9	p_header->nFilledLen
water	68:39	0:0	10	p_header
op	68:47	0:0	10	->
water	68:49	0:0	10	nFilledLen
water	68:61	0:0	8	;
call	69:16	69:82	8	memcpy
arg	69:23	69:40	9	p_block->p_buffer
water	69:23	0:0	10	p_block
op	69:30	0:0	10	->
water	69:32	0:0	10	p_buffer
arg	69:42	69:59	9	p_header->pBuffer
water	69:42	0:0	10	p_header
op	69:50	0:0	10	->
water	69:52	0:0	10	pBuffer
arg	69:61	69:82	9	p_header->nFilledLen
water	69:61	0:0	10	p_header
op	69:69	0:0	10	->
water	69:71	0:0	10	nFilledLen
water	69:83	0:0	8	;
water	70:12	0:0	8	}
water	71:12	0:0	6	p_block
op	71:19	0:0	6	->
water	71:21	0:0	6	i_buffer
op	71:30	0:0	6	=
water	71:32	0:0	6	p_header
op	71:40	0:0	6	->
water	71:42	0:0	6	nFilledLen
water	71:52	0:0	6	;
water	72:12	0:0	6	p_block
op	72:19	0:0	6	->
water	72:21	0:0	6	i_pts
op	72:27	0:0	6	=
water	72:29	0:0	6	p_block
op	72:36	0:0	6	->
water	72:38	0:0	6	i_dts
op	72:44	0:0	6	=
call	72:46	72:79	6	FromOmxTicks
arg	72:59	72:79	7	p_header->nTimeStamp
water	72:59	0:0	8	p_header
op	72:67	0:0	8	->
water	72:69	0:0	8	nTimeStamp
water	72:80	0:0	6	;
water	73:12	0:0	6	p_header
op	73:20	0:0	6	->
water	73:22	0:0	6	nFilledLen
op	73:33	0:0	6	=
water	73:35	0:0	6	0
water	73:36	0:0	6	;
water	74:12	0:0	6	p_header
op	74:20	0:0	6	->
water	74:22	0:0	6	pAppPrivate
op	74:34	0:0	6	=
water	74:36	0:0	6	0
water	74:37	0:0	6	;
water	75:8	0:0	6	}
call	77:8	77:77	4	msg_Dbg
arg	77:17	77:22	5	p_dec
water	77:17	0:0	6	p_dec
arg	77:24	77:47	5	"FillThisBuffer %p, %p"
water	77:24	0:0	6	"FillThisBuffer %p, %p"
arg	77:49	77:57	5	p_header
water	77:49	0:0	6	p_header
arg	77:59	77:77	5	p_header->pBuffer
water	77:59	0:0	6	p_header
op	77:67	0:0	6	->
water	77:69	0:0	6	pBuffer
water	77:78	0:0	4	;
call	79:8	79:54	4	OMX_FillThisBuffer
arg	79:27	79:44	5	p_sys->omx_handle
water	79:27	0:0	6	p_sys
op	79:32	0:0	6	->
water	79:34	0:0	6	omx_handle
arg	79:46	79:54	5	p_header
water	79:46	0:0	6	p_header
water	79:55	0:0	4	;
water	80:4	0:0	4	}
call	81:4	81:25	2	msg_Dbg
arg	81:12	81:17	3	p_dec
water	81:12	0:0	4	p_dec
arg	81:19	81:25	3	"done"
water	81:19	0:0	4	"done"
water	81:26	0:0	2	;
return	82:4	82:18	2	p_block
water	82:11	0:0	3	p_block
label	83:0	83:5	2	error :
water	84:4	0:0	2	p_sys
op	84:9	0:0	2	->
water	84:11	0:0	2	b_error
op	84:19	0:0	2	=
water	84:21	0:0	2	true
water	84:25	0:0	2	;
return	85:4	85:15	2	NULL
water	85:11	0:0	3	NULL
