func	1:0	104:0	0	int	getaddrinfo
params	2:12	0:0	1	
param	2:13	2:29	2	const char *	node
param	2:31	2:50	2	const char *	service
param	3:13	3:41	2	const struct addrinfo *	hints
param	3:43	3:64	2	struct addrinfo * *	res
stmnts	0:0	103:12	1	
decl	5:4	5:25	2	struct addrinfo	*info
decl	6:4	6:13	2	u_long	ip
decl	7:4	7:16	2	u_short	port
decl	8:4	8:31	2	int	protocol
op	8:17	0:0	2	=
water	8:19	0:0	2	0
water	8:20	0:0	2	,
decl	8:4	8:31	2	int	flags
op	8:28	0:0	2	=
water	8:30	0:0	2	0
decl	9:4	9:27	2	const char	*name
op	9:21	0:0	2	=
water	9:23	0:0	2	NULL
if	10:4	38:4	2	(hints != NULL)
cond	10:8	10:17	3	hints != NULL
water	10:8	0:0	4	hints
op	10:14	0:0	4	!=
water	10:17	0:0	4	NULL
stmts	11:4	38:4	3	
water	11:4	0:0	4	{
water	12:8	0:0	4	flags
op	12:14	0:0	4	=
water	12:16	0:0	4	hints
op	12:21	0:0	4	->
water	12:23	0:0	4	ai_flags
water	12:31	0:0	4	;
if	13:8	14:31	4	(flags & ~_AI_MASK)
cond	13:12	13:20	5	flags & ~_AI_MASK
water	13:12	0:0	6	flags
op	13:18	0:0	6	&
water	13:20	0:0	6	~_AI_MASK
stmts	14:12	14:31	5	
return	14:12	14:31	6	EAI_BADFLAGS
water	14:19	0:0	7	EAI_BADFLAGS
if	16:8	17:29	4	(hints -> ai_family && ( hints -> ai_family != AF_INET ))
cond	16:12	16:60	5	hints -> ai_family && ( hints -> ai_family != AF_INET )
water	16:12	0:0	6	hints
op	16:17	0:0	6	->
water	16:19	0:0	6	ai_family
op	16:29	0:0	6	&&
water	16:32	0:0	6	(
water	16:33	0:0	6	hints
op	16:38	0:0	6	->
water	16:40	0:0	6	ai_family
op	16:50	0:0	6	!=
water	16:53	0:0	6	AF_INET
water	16:60	0:0	6	)
stmts	17:12	17:29	5	
return	17:12	17:29	6	EAI_FAMILY
water	17:19	0:0	7	EAI_FAMILY
switch	19:8	34:8	4	(hints -> ai_socktype)
cond	19:16	19:23	5	hints -> ai_socktype
water	19:16	0:0	6	hints
op	19:21	0:0	6	->
water	19:23	0:0	6	ai_socktype
stmts	20:8	34:8	5	
water	20:8	0:0	6	{
label	21:12	21:28	6	case SOCK_STREAM :
water	22:16	0:0	6	protocol
op	22:25	0:0	6	=
water	22:27	0:0	6	IPPROTO_TCP
water	22:38	0:0	6	;
break	23:16	23:21	6	
label	24:12	24:27	6	case SOCK_DGRAM :
water	25:16	0:0	6	protocol
op	25:25	0:0	6	=
water	25:27	0:0	6	IPPROTO_UDP
water	25:38	0:0	6	;
break	26:16	26:21	6	
label	28:12	28:25	6	case SOCK_RAW :
label	30:12	30:18	6	case 0 :
break	31:16	31:21	6	
label	32:12	32:19	6	default :
return	33:16	33:35	6	EAI_SOCKTYPE
water	33:23	0:0	7	EAI_SOCKTYPE
water	34:8	0:0	6	}
if	35:8	37:30	4	(hints -> ai_protocol && protocol && ( protocol != hints -> ai_protocol ))
cond	35:12	36:43	5	hints -> ai_protocol && protocol && ( protocol != hints -> ai_protocol )
water	35:12	0:0	6	hints
op	35:17	0:0	6	->
water	35:19	0:0	6	ai_protocol
op	35:31	0:0	6	&&
water	35:34	0:0	6	protocol
op	36:9	0:0	6	&&
water	36:12	0:0	6	(
water	36:13	0:0	6	protocol
op	36:22	0:0	6	!=
water	36:25	0:0	6	hints
op	36:30	0:0	6	->
water	36:32	0:0	6	ai_protocol
water	36:43	0:0	6	)
stmts	37:12	37:30	5	
return	37:12	37:30	6	EAI_SERVICE
water	37:19	0:0	7	EAI_SERVICE
water	38:4	0:0	4	}
op	39:4	0:0	2	*
water	39:5	0:0	2	res
op	39:9	0:0	2	=
water	39:11	0:0	2	NULL
water	39:15	0:0	2	;
if	41:4	47:4	2	(node == NULL)
cond	41:8	41:16	3	node == NULL
water	41:8	0:0	4	node
op	41:13	0:0	4	==
water	41:16	0:0	4	NULL
stmts	42:4	47:4	3	
water	42:4	0:0	4	{
if	43:8	44:35	4	(flags & AI_PASSIVE)
cond	43:12	43:20	5	flags & AI_PASSIVE
water	43:12	0:0	6	flags
op	43:18	0:0	6	&
water	43:20	0:0	6	AI_PASSIVE
stmts	44:12	44:35	5	
water	44:12	0:0	6	ip
op	44:15	0:0	6	=
call	44:17	44:34	6	htonl
arg	44:24	44:34	7	INADDR_ANY
water	44:24	0:0	8	INADDR_ANY
water	44:35	0:0	6	;
else	45:8	46:40	4
stmts	46:12	46:40	5	
water	46:12	0:0	6	ip
op	46:15	0:0	6	=
call	46:17	46:39	6	htonl
arg	46:24	46:39	7	INADDR_LOOPBACK
water	46:24	0:0	8	INADDR_LOOPBACK
water	46:40	0:0	6	;
water	47:4	0:0	4	}
else	48:4	62:4	2
stmts	49:4	62:4	3	
if	49:4	62:4	4	(( ip =inet_addr (node ) ) == INADDR_NONE)
cond	49:8	49:35	5	( ip =inet_addr (node ) ) == INADDR_NONE
water	49:8	0:0	6	(
water	49:9	0:0	6	ip
op	49:12	0:0	6	=
call	49:14	49:29	6	inet_addr
arg	49:25	49:29	7	node
water	49:25	0:0	8	node
water	49:30	0:0	6	)
op	49:32	0:0	6	==
water	49:35	0:0	6	INADDR_NONE
stmts	50:4	62:4	5	
water	50:4	0:0	6	{
decl	51:8	51:36	6	struct hostent	*entry
op	51:30	0:0	6	=
water	51:32	0:0	6	NULL
if	53:8	54:40	6	(! ( flags & AI_NUMERICHOST ))
cond	53:12	53:36	7	! ( flags & AI_NUMERICHOST )
op	53:12	0:0	8	!
water	53:13	0:0	8	(
water	53:14	0:0	8	flags
op	53:20	0:0	8	&
water	53:22	0:0	8	AI_NUMERICHOST
water	53:36	0:0	8	)
stmts	54:12	54:40	7	
water	54:12	0:0	8	entry
op	54:18	0:0	8	=
call	54:20	54:39	8	gethostbyname
arg	54:35	54:39	9	node
water	54:35	0:0	10	node
water	54:40	0:0	8	;
if	55:8	56:43	6	(entry == NULL)
cond	55:12	55:21	7	entry == NULL
water	55:12	0:0	8	entry
op	55:18	0:0	8	==
water	55:21	0:0	8	NULL
stmts	56:12	56:43	7	
return	56:12	56:43	8	gai_error_from_herrno()
call	56:19	56:42	9	gai_error_from_herrno
if	57:8	58:29	6	(( entry -> h_length != 4 ) || ( entry -> h_addrtype != AF_INET ))
cond	57:12	57:67	7	( entry -> h_length != 4 ) || ( entry -> h_addrtype != AF_INET )
water	57:12	0:0	8	(
water	57:13	0:0	8	entry
op	57:18	0:0	8	->
water	57:20	0:0	8	h_length
op	57:29	0:0	8	!=
water	57:32	0:0	8	4
water	57:33	0:0	8	)
op	57:35	0:0	8	||
water	57:38	0:0	8	(
water	57:39	0:0	8	entry
op	57:44	0:0	8	->
water	57:46	0:0	8	h_addrtype
op	57:57	0:0	8	!=
water	57:60	0:0	8	AF_INET
water	57:67	0:0	8	)
stmts	58:12	58:29	7	
return	58:12	58:29	8	EAI_FAMILY
water	58:19	0:0	9	EAI_FAMILY
water	59:8	0:0	6	ip
op	59:11	0:0	6	=
op	59:13	0:0	6	*
water	59:14	0:0	6	(
water	59:15	0:0	6	(
water	59:16	0:0	6	u_long
op	59:23	0:0	6	*
water	59:24	0:0	6	)
water	59:26	0:0	6	entry
op	59:31	0:0	6	->
water	59:33	0:0	6	h_addr
water	59:39	0:0	6	)
water	59:40	0:0	6	;
if	60:8	61:32	6	(flags & AI_CANONNAME)
cond	60:12	60:20	7	flags & AI_CANONNAME
water	60:12	0:0	8	flags
op	60:18	0:0	8	&
water	60:20	0:0	8	AI_CANONNAME
stmts	61:12	61:32	7	
water	61:12	0:0	8	name
op	61:17	0:0	8	=
water	61:19	0:0	8	entry
op	61:24	0:0	8	->
water	61:26	0:0	8	h_name
water	61:32	0:0	8	;
water	62:4	0:0	6	}
if	63:4	64:19	2	(( flags & AI_CANONNAME ) && ( name == NULL ))
cond	63:8	63:47	3	( flags & AI_CANONNAME ) && ( name == NULL )
water	63:8	0:0	4	(
water	63:9	0:0	4	flags
op	63:15	0:0	4	&
water	63:17	0:0	4	AI_CANONNAME
water	63:29	0:0	4	)
op	63:31	0:0	4	&&
water	63:34	0:0	4	(
water	63:35	0:0	4	name
op	63:40	0:0	4	==
water	63:43	0:0	4	NULL
water	63:47	0:0	4	)
stmts	64:8	64:19	3	
water	64:8	0:0	4	name
op	64:13	0:0	4	=
water	64:15	0:0	4	node
water	64:19	0:0	4	;
if	66:4	67:16	2	(service == NULL)
cond	66:8	66:19	3	service == NULL
water	66:8	0:0	4	service
op	66:16	0:0	4	==
water	66:19	0:0	4	NULL
stmts	67:8	67:16	3	
water	67:8	0:0	4	port
op	67:13	0:0	4	=
water	67:15	0:0	4	0
water	67:16	0:0	4	;
else	68:4	76:4	2
stmts	69:4	76:4	3	
water	69:4	0:0	4	{
decl	70:8	70:23	4	unsigned long	d
decl	71:8	71:17	4	char	*end
water	72:8	0:0	4	d
op	72:10	0:0	4	=
call	72:12	72:37	4	strtoul
arg	72:21	72:28	5	service
water	72:21	0:0	6	service
arg	72:30	72:34	5	&end
op	72:30	0:0	6	&
water	72:31	0:0	6	end
arg	72:36	72:37	5	0
water	72:36	0:0	6	0
water	72:38	0:0	4	;
if	73:8	74:30	4	(end [ 0 ] || ( d > 65535 u ))
cond	73:12	73:33	5	end [ 0 ] || ( d > 65535 u )
water	73:12	0:0	6	end
op	73:15	0:0	6	[
water	73:16	0:0	6	0
op	73:17	0:0	6	]
op	73:19	0:0	6	||
water	73:22	0:0	6	(
water	73:23	0:0	6	d
op	73:25	0:0	6	>
water	73:27	0:0	6	65535
water	73:32	0:0	6	u
water	73:33	0:0	6	)
stmts	74:12	74:30	5	
return	74:12	74:30	6	EAI_SERVICE
water	74:19	0:0	7	EAI_SERVICE
water	75:8	0:0	4	port
op	75:13	0:0	4	=
call	75:15	75:32	4	htons
arg	75:22	75:32	5	(u_short)d
water	75:22	0:0	6	(
water	75:23	0:0	6	u_short
water	75:30	0:0	6	)
water	75:31	0:0	6	d
water	75:33	0:0	4	;
water	76:4	0:0	4	}
if	78:4	89:4	2	(( ! protocol ) || ( protocol == IPPROTO_UDP ))
cond	78:8	78:47	3	( ! protocol ) || ( protocol == IPPROTO_UDP )
water	78:8	0:0	4	(
op	78:9	0:0	4	!
water	78:10	0:0	4	protocol
water	78:18	0:0	4	)
op	78:20	0:0	4	||
water	78:23	0:0	4	(
water	78:24	0:0	4	protocol
op	78:33	0:0	4	==
water	78:36	0:0	4	IPPROTO_UDP
water	78:47	0:0	4	)
stmts	79:4	89:4	3	
water	79:4	0:0	4	{
water	80:8	0:0	4	info
op	80:13	0:0	4	=
call	80:15	80:68	4	makeipv4info
arg	80:29	80:39	5	SOCK_DGRAM
water	80:29	0:0	6	SOCK_DGRAM
arg	80:41	80:52	5	IPPROTO_UDP
water	80:41	0:0	6	IPPROTO_UDP
arg	80:54	80:56	5	ip
water	80:54	0:0	6	ip
arg	80:58	80:62	5	port
water	80:58	0:0	6	port
arg	80:64	80:68	5	name
water	80:64	0:0	6	name
water	80:69	0:0	4	;
if	81:8	85:8	4	(info == NULL)
cond	81:12	81:20	5	info == NULL
water	81:12	0:0	6	info
op	81:17	0:0	6	==
water	81:20	0:0	6	NULL
stmts	82:8	85:8	5	
water	82:8	0:0	6	{
water	83:12	0:0	6	errno
op	83:18	0:0	6	=
water	83:20	0:0	6	ENOMEM
water	83:26	0:0	6	;
return	84:12	84:29	6	EAI_SYSTEM
water	84:19	0:0	7	EAI_SYSTEM
water	85:8	0:0	6	}
if	86:8	87:40	4	(flags & AI_PASSIVE)
cond	86:12	86:20	5	flags & AI_PASSIVE
water	86:12	0:0	6	flags
op	86:18	0:0	6	&
water	86:20	0:0	6	AI_PASSIVE
stmts	87:12	87:40	5	
water	87:12	0:0	6	info
op	87:16	0:0	6	->
water	87:18	0:0	6	ai_flags
op	87:27	0:0	6	|=
water	87:30	0:0	6	AI_PASSIVE
water	87:40	0:0	6	;
op	88:8	0:0	4	*
water	88:9	0:0	4	res
op	88:13	0:0	4	=
water	88:15	0:0	4	info
water	88:19	0:0	4	;
water	89:4	0:0	4	}
if	90:4	102:4	2	(( ! protocol ) || ( protocol == IPPROTO_TCP ))
cond	90:8	90:47	3	( ! protocol ) || ( protocol == IPPROTO_TCP )
water	90:8	0:0	4	(
op	90:9	0:0	4	!
water	90:10	0:0	4	protocol
water	90:18	0:0	4	)
op	90:20	0:0	4	||
water	90:23	0:0	4	(
water	90:24	0:0	4	protocol
op	90:33	0:0	4	==
water	90:36	0:0	4	IPPROTO_TCP
water	90:47	0:0	4	)
stmts	91:4	102:4	3	
water	91:4	0:0	4	{
water	92:8	0:0	4	info
op	92:13	0:0	4	=
call	92:15	92:69	4	makeipv4info
arg	92:29	92:40	5	SOCK_STREAM
water	92:29	0:0	6	SOCK_STREAM
arg	92:42	92:53	5	IPPROTO_TCP
water	92:42	0:0	6	IPPROTO_TCP
arg	92:55	92:57	5	ip
water	92:55	0:0	6	ip
arg	92:59	92:63	5	port
water	92:59	0:0	6	port
arg	92:65	92:69	5	name
water	92:65	0:0	6	name
water	92:70	0:0	4	;
if	93:8	97:8	4	(info == NULL)
cond	93:12	93:20	5	info == NULL
water	93:12	0:0	6	info
op	93:17	0:0	6	==
water	93:20	0:0	6	NULL
stmts	94:8	97:8	5	
water	94:8	0:0	6	{
water	95:12	0:0	6	errno
op	95:18	0:0	6	=
water	95:20	0:0	6	ENOMEM
water	95:26	0:0	6	;
return	96:12	96:29	6	EAI_SYSTEM
water	96:19	0:0	7	EAI_SYSTEM
water	97:8	0:0	6	}
water	98:8	0:0	4	info
op	98:12	0:0	4	->
water	98:14	0:0	4	ai_next
op	98:22	0:0	4	=
op	98:24	0:0	4	*
water	98:25	0:0	4	res
water	98:28	0:0	4	;
if	99:8	100:40	4	(flags & AI_PASSIVE)
cond	99:12	99:20	5	flags & AI_PASSIVE
water	99:12	0:0	6	flags
op	99:18	0:0	6	&
water	99:20	0:0	6	AI_PASSIVE
stmts	100:12	100:40	5	
water	100:12	0:0	6	info
op	100:16	0:0	6	->
water	100:18	0:0	6	ai_flags
op	100:27	0:0	6	|=
water	100:30	0:0	6	AI_PASSIVE
water	100:40	0:0	6	;
op	101:8	0:0	4	*
water	101:9	0:0	4	res
op	101:13	0:0	4	=
water	101:15	0:0	4	info
water	101:19	0:0	4	;
water	102:4	0:0	4	}
return	103:4	103:12	2	0
water	103:11	0:0	3	0
