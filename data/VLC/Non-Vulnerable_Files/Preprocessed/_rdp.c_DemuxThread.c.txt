func	2:0	76:0	0	static void *	DemuxThread
params	2:24	0:0	1	
param	2:26	2:39	2	void *	p_data
stmnts	0:0	75:15	1	
decl	4:4	4:41	2	demux_t	*p_demux
op	4:21	0:0	2	=
water	4:23	0:0	2	(
water	4:24	0:0	2	demux_t
op	4:32	0:0	2	*
water	4:33	0:0	2	)
water	4:35	0:0	2	p_data
decl	5:4	5:39	2	demux_sys_t	*p_sys
op	5:23	0:0	2	=
water	5:25	0:0	2	p_demux
op	5:32	0:0	2	->
water	5:34	0:0	2	p_sys
water	6:4	0:0	2	p_sys
op	6:9	0:0	2	->
water	6:11	0:0	2	i_starttime
op	6:23	0:0	2	=
call	6:25	6:31	2	mdate
water	6:32	0:0	2	;
decl	7:4	7:65	2	mtime_t	i_next_frame_date
op	7:30	0:0	2	=
call	7:32	7:38	3	mdate
op	7:40	0:0	2	+
water	7:42	0:0	2	p_sys
op	7:47	0:0	2	->
water	7:49	0:0	2	i_frame_interval
decl	8:4	8:13	2	int	i_ret
for	9:4	74:4	2	(;;)
forinit	9:8	9:8	3	;
water	9:8	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	10:4	74:4	3	
water	10:4	0:0	4	{
water	11:8	0:0	4	i_ret
op	11:14	0:0	4	=
water	11:16	0:0	4	0
water	11:17	0:0	4	;
water	12:8	0:0	4	p_sys
op	12:13	0:0	4	->
water	12:15	0:0	4	i_cancel_state
op	12:30	0:0	4	=
call	12:32	12:47	4	vlc_savecancel
water	12:48	0:0	4	;
if	13:8	20:8	4	(freerdp_shall_disconnect (p_sys -> p_instance ))
cond	13:13	13:57	5	freerdp_shall_disconnect (p_sys -> p_instance )
call	13:13	13:57	6	freerdp_shall_disconnect
arg	13:39	13:57	7	p_sys->p_instance
water	13:39	0:0	8	p_sys
op	13:44	0:0	8	->
water	13:46	0:0	8	p_instance
stmts	14:8	20:8	5	
water	14:8	0:0	6	{
call	15:12	15:53	6	vlc_restorecancel
arg	15:31	15:53	7	p_sys->i_cancel_state
water	15:31	0:0	8	p_sys
op	15:36	0:0	8	->
water	15:38	0:0	8	i_cancel_state
water	15:54	0:0	6	;
call	16:12	16:59	6	msg_Warn
arg	16:22	16:29	7	p_demux
water	16:22	0:0	8	p_demux
arg	16:31	16:59	7	"RDP server closed session"
water	16:31	0:0	8	"RDP server closed session"
water	16:60	0:0	6	;
call	17:12	17:48	6	es_out_Del
arg	17:24	17:36	7	p_demux->out
water	17:24	0:0	8	p_demux
op	17:31	0:0	8	->
water	17:33	0:0	8	out
arg	17:38	17:48	7	p_sys->es
water	17:38	0:0	8	p_sys
op	17:43	0:0	8	->
water	17:45	0:0	8	es
water	17:49	0:0	6	;
water	18:12	0:0	6	p_sys
op	18:17	0:0	6	->
water	18:19	0:0	6	es
op	18:22	0:0	6	=
water	18:24	0:0	6	NULL
water	18:28	0:0	6	;
return	19:12	19:23	6	NULL
water	19:19	0:0	7	NULL
water	20:8	0:0	6	}
struct	21:8	28:8	4	<anonymous_21:8>
decl	23:12	23:37	5	void	*pp_rfds[RDP_MAX_FD]
decl	24:12	24:37	5	void	*pp_wfds[RDP_MAX_FD]
decl	25:12	25:21	5	int	i_nbr
decl	26:12	26:21	5	int	i_nbw
decl	27:12	27:42	5	struct pollfd	ufds[RDP_MAX_FD]
decl	21:8	28:13	4	<anonymous_21:8>	fds
water	29:8	0:0	4	fds
op	29:11	0:0	4	.
water	29:12	0:0	4	i_nbr
op	29:18	0:0	4	=
water	29:20	0:0	4	fds
op	29:23	0:0	4	.
water	29:24	0:0	4	i_nbw
op	29:30	0:0	4	=
water	29:32	0:0	4	0
water	29:33	0:0	4	;
if	30:8	35:8	4	(freerdp_get_fds (p_sys -> p_instance ,fds . pp_rfds ,& fds . i_nbr ,fds . pp_wfds ,& fds . i_nbw ) != true)
cond	30:13	31:59	5	freerdp_get_fds (p_sys -> p_instance ,fds . pp_rfds ,& fds . i_nbr ,fds . pp_wfds ,& fds . i_nbw ) != true
call	30:13	31:54	6	freerdp_get_fds
arg	30:30	30:47	7	p_sys->p_instance
water	30:30	0:0	8	p_sys
op	30:35	0:0	8	->
water	30:37	0:0	8	p_instance
arg	30:49	30:60	7	fds.pp_rfds
water	30:49	0:0	8	fds
op	30:52	0:0	8	.
water	30:53	0:0	8	pp_rfds
arg	30:62	30:72	7	&fds.i_nbr
op	30:62	0:0	8	&
water	30:63	0:0	8	fds
op	30:66	0:0	8	.
water	30:67	0:0	8	i_nbr
arg	31:30	31:41	7	fds.pp_wfds
water	31:30	0:0	8	fds
op	31:33	0:0	8	.
water	31:34	0:0	8	pp_wfds
arg	31:43	31:54	7	&fds.i_nbw
op	31:43	0:0	8	&
water	31:44	0:0	8	fds
op	31:47	0:0	8	.
water	31:48	0:0	8	i_nbw
op	31:56	0:0	6	!=
water	31:59	0:0	6	true
stmts	32:8	35:8	5	
water	32:8	0:0	6	{
call	33:12	33:53	6	vlc_restorecancel
arg	33:31	33:53	7	p_sys->i_cancel_state
water	33:31	0:0	8	p_sys
op	33:36	0:0	8	->
water	33:38	0:0	8	i_cancel_state
water	33:54	0:0	6	;
call	34:12	34:47	6	msg_Err
arg	34:21	34:28	7	p_demux
water	34:21	0:0	8	p_demux
arg	34:30	34:47	7	"cannot get FDS"
water	34:30	0:0	8	"cannot get FDS"
water	34:48	0:0	6	;
water	35:8	0:0	6	}
else	36:8	54:8	4
stmts	37:8	54:8	5	
if	37:8	54:8	6	(( fds . i_nbr + fds . i_nbw ) > 0 && p_sys -> es)
cond	37:13	37:51	7	( fds . i_nbr + fds . i_nbw ) > 0 && p_sys -> es
water	37:13	0:0	8	(
water	37:14	0:0	8	fds
op	37:17	0:0	8	.
water	37:18	0:0	8	i_nbr
op	37:24	0:0	8	+
water	37:26	0:0	8	fds
op	37:29	0:0	8	.
water	37:30	0:0	8	i_nbw
water	37:35	0:0	8	)
op	37:37	0:0	8	>
water	37:39	0:0	8	0
op	37:41	0:0	8	&&
water	37:44	0:0	8	p_sys
op	37:49	0:0	8	->
water	37:51	0:0	8	es
stmts	38:8	54:8	7	
water	38:8	0:0	8	{
call	39:12	39:53	8	vlc_restorecancel
arg	39:31	39:53	9	p_sys->i_cancel_state
water	39:31	0:0	10	p_sys
op	39:36	0:0	10	->
water	39:38	0:0	10	i_cancel_state
water	39:54	0:0	8	;
decl	40:12	40:27	8	int	i_count
op	40:24	0:0	8	=
water	40:26	0:0	8	0
for	41:12	46:12	8	( int i = 0 ;i < fds . i_nbr;i ++)
forinit	0:0	41:26	9	 int i = 0 ;
decl	41:17	41:26	10	int	i
op	41:23	0:0	10	=
water	41:25	0:0	10	0
cond	41:28	41:36	9	i < fds . i_nbr
water	41:28	0:0	10	i
op	41:30	0:0	10	<
water	41:32	0:0	10	fds
op	41:35	0:0	10	.
water	41:36	0:0	10	i_nbr
forexpr	41:43	41:44	9	i ++
water	41:43	0:0	10	i
op	41:44	0:0	10	++
stmts	42:12	46:12	9	
water	42:12	0:0	10	{
water	43:16	0:0	10	fds
op	43:19	0:0	10	.
water	43:20	0:0	10	ufds
op	43:24	0:0	10	[
water	43:26	0:0	10	i_count
op	43:34	0:0	10	]
op	43:35	0:0	10	.
water	43:36	0:0	10	fd
op	43:39	0:0	10	=
water	43:41	0:0	10	(
water	43:42	0:0	10	long
water	43:46	0:0	10	)
water	43:48	0:0	10	fds
op	43:51	0:0	10	.
water	43:52	0:0	10	pp_rfds
op	43:59	0:0	10	[
water	43:61	0:0	10	i
op	43:63	0:0	10	]
water	43:64	0:0	10	;
water	44:16	0:0	10	fds
op	44:19	0:0	10	.
water	44:20	0:0	10	ufds
op	44:24	0:0	10	[
water	44:26	0:0	10	i_count
op	44:34	0:0	10	]
op	44:35	0:0	10	.
water	44:36	0:0	10	events
op	44:43	0:0	10	=
water	44:45	0:0	10	POLLIN
water	44:52	0:0	10	;
water	45:16	0:0	10	fds
op	45:19	0:0	10	.
water	45:20	0:0	10	ufds
op	45:24	0:0	10	[
water	45:26	0:0	10	i_count
op	45:33	0:0	10	++
op	45:36	0:0	10	]
op	45:37	0:0	10	.
water	45:38	0:0	10	revents
op	45:46	0:0	10	=
water	45:48	0:0	10	0
water	45:49	0:0	10	;
water	46:12	0:0	10	}
for	47:12	52:12	8	( int i = 0 ;i < fds . i_nbw && i_count < RDP_MAX_FD;i ++)
forinit	0:0	47:26	9	 int i = 0 ;
decl	47:17	47:26	10	int	i
op	47:23	0:0	10	=
water	47:25	0:0	10	0
cond	47:28	47:55	9	i < fds . i_nbw && i_count < RDP_MAX_FD
water	47:28	0:0	10	i
op	47:30	0:0	10	<
water	47:32	0:0	10	fds
op	47:35	0:0	10	.
water	47:36	0:0	10	i_nbw
op	47:42	0:0	10	&&
water	47:45	0:0	10	i_count
op	47:53	0:0	10	<
water	47:55	0:0	10	RDP_MAX_FD
forexpr	47:67	47:68	9	i ++
water	47:67	0:0	10	i
op	47:68	0:0	10	++
stmts	48:12	52:12	9	
water	48:12	0:0	10	{
water	49:16	0:0	10	fds
op	49:19	0:0	10	.
water	49:20	0:0	10	ufds
op	49:24	0:0	10	[
water	49:26	0:0	10	i_count
op	49:34	0:0	10	]
op	49:35	0:0	10	.
water	49:36	0:0	10	fd
op	49:39	0:0	10	=
water	49:41	0:0	10	(
water	49:42	0:0	10	long
water	49:46	0:0	10	)
water	49:48	0:0	10	fds
op	49:51	0:0	10	.
water	49:52	0:0	10	pp_wfds
op	49:59	0:0	10	[
water	49:61	0:0	10	i
op	49:63	0:0	10	]
water	49:64	0:0	10	;
water	50:16	0:0	10	fds
op	50:19	0:0	10	.
water	50:20	0:0	10	ufds
op	50:24	0:0	10	[
water	50:26	0:0	10	i_count
op	50:34	0:0	10	]
op	50:35	0:0	10	.
water	50:36	0:0	10	events
op	50:43	0:0	10	=
water	50:45	0:0	10	POLLOUT
water	50:52	0:0	10	;
water	51:16	0:0	10	fds
op	51:19	0:0	10	.
water	51:20	0:0	10	ufds
op	51:24	0:0	10	[
water	51:26	0:0	10	i_count
op	51:33	0:0	10	++
op	51:36	0:0	10	]
op	51:37	0:0	10	.
water	51:38	0:0	10	revents
op	51:46	0:0	10	=
water	51:48	0:0	10	0
water	51:49	0:0	10	;
water	52:12	0:0	10	}
water	53:12	0:0	8	i_ret
op	53:18	0:0	8	=
call	53:20	53:78	8	poll
arg	53:26	53:34	9	fds.ufds
water	53:26	0:0	10	fds
op	53:29	0:0	10	.
water	53:30	0:0	10	ufds
arg	53:36	53:43	9	i_count
water	53:36	0:0	10	i_count
arg	53:45	53:78	9	p_sys->i_frame_interval*1000/2
water	53:45	0:0	10	p_sys
op	53:50	0:0	10	->
water	53:52	0:0	10	i_frame_interval
op	53:69	0:0	10	*
water	53:71	0:0	10	1000
op	53:75	0:0	10	/
water	53:76	0:0	10	2
water	53:79	0:0	8	;
water	54:8	0:0	8	}
else	54:10	56:8	4
stmts	54:15	56:8	5	
water	54:15	0:0	6	{
call	55:12	55:53	6	vlc_restorecancel
arg	55:31	55:53	7	p_sys->i_cancel_state
water	55:31	0:0	8	p_sys
op	55:36	0:0	8	->
water	55:38	0:0	8	i_cancel_state
water	55:54	0:0	6	;
water	56:8	0:0	6	}
call	57:8	57:33	4	mwait
arg	57:15	57:33	5	i_next_frame_date
water	57:15	0:0	6	i_next_frame_date
water	57:34	0:0	4	;
water	58:8	0:0	4	i_next_frame_date
op	58:26	0:0	4	+=
water	58:29	0:0	4	p_sys
op	58:34	0:0	4	->
water	58:36	0:0	4	i_frame_interval
water	58:52	0:0	4	;
if	59:8	73:8	4	(i_ret >= 0)
cond	59:13	59:22	5	i_ret >= 0
water	59:13	0:0	6	i_ret
op	59:19	0:0	6	>=
water	59:22	0:0	6	0
stmts	60:8	73:8	5	
water	60:8	0:0	6	{
water	62:12	0:0	6	p_sys
op	62:17	0:0	6	->
water	62:19	0:0	6	i_cancel_state
op	62:34	0:0	6	=
call	62:36	62:51	6	vlc_savecancel
water	62:52	0:0	6	;
call	63:12	63:49	6	freerdp_check_fds
arg	63:31	63:49	7	p_sys->p_instance
water	63:31	0:0	8	p_sys
op	63:36	0:0	8	->
water	63:38	0:0	8	p_instance
water	63:50	0:0	6	;
call	64:12	64:53	6	vlc_restorecancel
arg	64:31	64:53	7	p_sys->i_cancel_state
water	64:31	0:0	8	p_sys
op	64:36	0:0	8	->
water	64:38	0:0	8	i_cancel_state
water	64:54	0:0	6	;
decl	65:12	65:64	6	block_t	*p_block
op	65:29	0:0	6	=
call	65:31	65:63	7	block_Duplicate
arg	65:48	65:63	8	p_sys->p_block
water	65:48	0:0	9	p_sys
op	65:53	0:0	9	->
water	65:55	0:0	9	p_block
if	66:12	72:12	6	(likely (p_block && p_sys -> p_block ))
cond	66:16	66:50	7	likely (p_block && p_sys -> p_block )
call	66:16	66:50	8	likely
arg	66:24	66:50	9	p_block&&p_sys->p_block
water	66:24	0:0	10	p_block
op	66:32	0:0	10	&&
water	66:35	0:0	10	p_sys
op	66:40	0:0	10	->
water	66:42	0:0	10	p_block
stmts	67:12	72:12	7	
water	67:12	0:0	8	{
water	68:16	0:0	8	p_sys
op	68:21	0:0	8	->
water	68:23	0:0	8	p_block
op	68:30	0:0	8	->
water	68:32	0:0	8	i_dts
op	68:38	0:0	8	=
water	68:40	0:0	8	p_sys
op	68:45	0:0	8	->
water	68:47	0:0	8	p_block
op	68:54	0:0	8	->
water	68:56	0:0	8	i_pts
op	68:62	0:0	8	=
call	68:64	68:70	8	mdate
op	68:72	0:0	8	-
water	68:74	0:0	8	p_sys
op	68:79	0:0	8	->
water	68:81	0:0	8	i_starttime
water	68:92	0:0	8	;
call	69:16	69:84	8	es_out_Control
arg	69:32	69:44	9	p_demux->out
water	69:32	0:0	10	p_demux
op	69:39	0:0	10	->
water	69:41	0:0	10	out
arg	69:46	69:60	9	ES_OUT_SET_PCR
water	69:46	0:0	10	ES_OUT_SET_PCR
arg	69:62	69:84	9	p_sys->p_block->i_pts
water	69:62	0:0	10	p_sys
op	69:67	0:0	10	->
water	69:69	0:0	10	p_block
op	69:76	0:0	10	->
water	69:78	0:0	10	i_pts
water	69:85	0:0	8	;
call	70:16	70:69	8	es_out_Send
arg	70:29	70:41	9	p_demux->out
water	70:29	0:0	10	p_demux
op	70:36	0:0	10	->
water	70:38	0:0	10	out
arg	70:43	70:52	9	p_sys->es
water	70:43	0:0	10	p_sys
op	70:48	0:0	10	->
water	70:50	0:0	10	es
arg	70:54	70:69	9	p_sys->p_block
water	70:54	0:0	10	p_sys
op	70:59	0:0	10	->
water	70:61	0:0	10	p_block
water	70:70	0:0	8	;
water	71:16	0:0	8	p_sys
op	71:21	0:0	8	->
water	71:23	0:0	8	p_block
op	71:31	0:0	8	=
water	71:33	0:0	8	p_block
water	71:40	0:0	8	;
water	72:12	0:0	8	}
water	73:8	0:0	6	}
water	74:4	0:0	4	}
return	75:4	75:15	2	NULL
water	75:11	0:0	3	NULL
