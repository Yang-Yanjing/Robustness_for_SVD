func	2:0	71:0	0	static int	Mux
params	2:14	0:0	1	
param	2:16	2:34	2	sout_mux_t *	p_mux
stmnts	0:0	70:22	1	
decl	4:4	4:40	2	sout_mux_sys_t	*p_sys
op	4:26	0:0	2	=
water	4:28	0:0	2	p_mux
op	4:33	0:0	2	->
water	4:35	0:0	2	p_sys
for	5:4	69:4	2	(;;)
forinit	5:9	5:9	3	;
water	5:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	6:4	69:4	3	
water	6:4	0:0	4	{
decl	7:8	7:29	4	sout_input_t	*p_input
decl	8:8	8:29	4	ps_stream_t	*p_stream
decl	9:8	9:30	4	block_t	*p_ps
water	9:21	0:0	4	,
decl	9:8	9:30	4	block_t	*p_data
decl	10:8	10:28	4	mtime_t	i_dts
decl	12:8	12:60	4	int	i_stream
op	12:21	0:0	4	=
call	12:23	12:59	5	sout_MuxGetStream
arg	12:42	12:47	6	p_mux
water	12:42	0:0	7	p_mux
arg	12:49	12:50	6	1
water	12:49	0:0	7	1
arg	12:52	12:59	6	&i_dts
op	12:52	0:0	7	&
water	12:53	0:0	7	i_dts
if	13:8	16:8	4	(i_stream < 0)
cond	13:12	13:23	5	i_stream < 0
water	13:12	0:0	6	i_stream
op	13:21	0:0	6	<
water	13:23	0:0	6	0
stmts	14:8	16:8	5	
water	14:8	0:0	6	{
return	15:12	15:30	6	VLC_SUCCESS
water	15:19	0:0	7	VLC_SUCCESS
water	16:8	0:0	6	}
water	17:8	0:0	4	p_input
op	17:17	0:0	4	=
water	17:19	0:0	4	p_mux
op	17:24	0:0	4	->
water	17:26	0:0	4	pp_inputs
op	17:35	0:0	4	[
water	17:36	0:0	4	i_stream
op	17:44	0:0	4	]
water	17:45	0:0	4	;
water	18:8	0:0	4	p_stream
op	18:17	0:0	4	=
water	18:19	0:0	4	(
water	18:20	0:0	4	ps_stream_t
op	18:31	0:0	4	*
water	18:32	0:0	4	)
water	18:33	0:0	4	p_input
op	18:40	0:0	4	->
water	18:42	0:0	4	p_sys
water	18:47	0:0	4	;
water	19:8	0:0	4	p_ps
op	19:17	0:0	4	=
water	19:19	0:0	4	NULL
water	19:23	0:0	4	;
if	21:8	39:8	4	(p_sys -> i_pes_count % 30 == 0)
cond	21:12	21:39	5	p_sys -> i_pes_count % 30 == 0
water	21:12	0:0	6	p_sys
op	21:17	0:0	6	->
water	21:19	0:0	6	i_pes_count
op	21:31	0:0	6	%
water	21:33	0:0	6	30
op	21:36	0:0	6	==
water	21:39	0:0	6	0
stmts	22:8	39:8	5	
water	22:8	0:0	6	{
if	24:12	33:12	6	(p_sys -> i_instant_size && i_dts - p_sys -> i_instant_dts > 1000000)
cond	24:16	25:47	7	p_sys -> i_instant_size && i_dts - p_sys -> i_instant_dts > 1000000
water	24:16	0:0	8	p_sys
op	24:21	0:0	8	->
water	24:23	0:0	8	i_instant_size
op	24:38	0:0	8	&&
water	25:16	0:0	8	i_dts
op	25:22	0:0	8	-
water	25:24	0:0	8	p_sys
op	25:29	0:0	8	->
water	25:31	0:0	8	i_instant_dts
op	25:45	0:0	8	>
water	25:47	0:0	8	1000000
stmts	26:12	33:12	7	
water	26:12	0:0	8	{
decl	27:16	28:52	8	int64_t	i_instant_bitrate
op	27:42	0:0	8	=
water	27:44	0:0	8	p_sys
op	27:49	0:0	8	->
water	27:51	0:0	8	i_instant_size
op	27:66	0:0	8	*
water	27:68	0:0	8	8000000
op	27:76	0:0	8	/
water	28:20	0:0	8	(
water	28:22	0:0	8	i_dts
op	28:28	0:0	8	-
water	28:30	0:0	8	p_sys
op	28:35	0:0	8	->
water	28:37	0:0	8	i_instant_dts
water	28:51	0:0	8	)
water	29:16	0:0	8	p_sys
op	29:21	0:0	8	->
water	29:23	0:0	8	i_instant_bitrate
op	29:41	0:0	8	+=
water	29:44	0:0	8	i_instant_bitrate
water	29:61	0:0	8	;
water	30:16	0:0	8	p_sys
op	30:21	0:0	8	->
water	30:23	0:0	8	i_instant_bitrate
op	30:41	0:0	8	/=
water	30:44	0:0	8	2
water	30:45	0:0	8	;
water	31:16	0:0	8	p_sys
op	31:21	0:0	8	->
water	31:23	0:0	8	i_instant_size
op	31:38	0:0	8	=
water	31:40	0:0	8	0
water	31:41	0:0	8	;
water	32:16	0:0	8	p_sys
op	32:21	0:0	8	->
water	32:23	0:0	8	i_instant_dts
op	32:37	0:0	8	=
water	32:39	0:0	8	i_dts
water	32:44	0:0	8	;
water	33:12	0:0	8	}
else	34:12	37:12	6
stmts	34:17	37:12	7	
if	34:17	37:12	8	(! p_sys -> i_instant_size)
cond	34:21	34:29	9	! p_sys -> i_instant_size
op	34:21	0:0	10	!
water	34:22	0:0	10	p_sys
op	34:27	0:0	10	->
water	34:29	0:0	10	i_instant_size
stmts	35:12	37:12	9	
water	35:12	0:0	10	{
water	36:16	0:0	10	p_sys
op	36:21	0:0	10	->
water	36:23	0:0	10	i_instant_dts
op	36:37	0:0	10	=
water	36:39	0:0	10	i_dts
water	36:44	0:0	10	;
water	37:12	0:0	10	}
call	38:12	38:52	6	MuxWritePackHeader
arg	38:32	38:37	7	p_mux
water	38:32	0:0	8	p_mux
arg	38:39	38:44	7	&p_ps
op	38:39	0:0	8	&
water	38:40	0:0	8	p_ps
arg	38:46	38:52	7	i_dts
water	38:46	0:0	8	i_dts
water	38:53	0:0	6	;
water	39:8	0:0	6	}
if	41:8	50:8	4	(p_sys -> i_pes_count % 300 == 0)
cond	41:12	41:40	5	p_sys -> i_pes_count % 300 == 0
water	41:12	0:0	6	p_sys
op	41:17	0:0	6	->
water	41:19	0:0	6	i_pes_count
op	41:31	0:0	6	%
water	41:33	0:0	6	300
op	41:37	0:0	6	==
water	41:40	0:0	6	0
stmts	42:8	50:8	5	
water	42:8	0:0	6	{
decl	43:12	43:25	6	block_t	*p_pk
call	44:12	44:54	6	MuxWriteSystemHeader
arg	44:34	44:39	7	p_mux
water	44:34	0:0	8	p_mux
arg	44:41	44:46	7	&p_ps
op	44:41	0:0	8	&
water	44:42	0:0	8	p_ps
arg	44:48	44:54	7	i_dts
water	44:48	0:0	8	i_dts
water	44:55	0:0	6	;
for	46:12	49:12	6	(p_pk = p_ps ;p_pk != NULL;p_pk = p_pk -> p_next)
forinit	46:17	46:28	7	p_pk = p_ps ;
water	46:17	0:0	8	p_pk
op	46:22	0:0	8	=
water	46:24	0:0	8	p_ps
water	46:28	0:0	8	;
cond	46:30	46:38	7	p_pk != NULL
water	46:30	0:0	8	p_pk
op	46:35	0:0	8	!=
water	46:38	0:0	8	NULL
forexpr	46:44	46:57	7	p_pk = p_pk -> p_next
water	46:44	0:0	8	p_pk
op	46:49	0:0	8	=
water	46:51	0:0	8	p_pk
op	46:55	0:0	8	->
water	46:57	0:0	8	p_next
stmts	47:12	49:12	7	
water	47:12	0:0	8	{
water	48:16	0:0	8	p_pk
op	48:20	0:0	8	->
water	48:22	0:0	8	i_flags
op	48:30	0:0	8	|=
water	48:33	0:0	8	BLOCK_FLAG_HEADER
water	48:50	0:0	8	;
water	49:12	0:0	8	}
water	50:8	0:0	6	}
if	52:8	55:8	4	(p_sys -> b_mpeg2 && p_sys -> i_pes_count % 300 == 0)
cond	52:12	52:58	5	p_sys -> b_mpeg2 && p_sys -> i_pes_count % 300 == 0
water	52:12	0:0	6	p_sys
op	52:17	0:0	6	->
water	52:19	0:0	6	b_mpeg2
op	52:27	0:0	6	&&
water	52:30	0:0	6	p_sys
op	52:35	0:0	6	->
water	52:37	0:0	6	i_pes_count
op	52:49	0:0	6	%
water	52:51	0:0	6	300
op	52:55	0:0	6	==
water	52:58	0:0	6	0
stmts	53:8	55:8	5	
water	53:8	0:0	6	{
call	54:12	54:45	6	MuxWritePSM
arg	54:25	54:30	7	p_mux
water	54:25	0:0	8	p_mux
arg	54:32	54:37	7	&p_ps
op	54:32	0:0	8	&
water	54:33	0:0	8	p_ps
arg	54:39	54:45	7	i_dts
water	54:39	0:0	8	i_dts
water	54:46	0:0	6	;
water	55:8	0:0	6	}
water	57:8	0:0	4	p_data
op	57:15	0:0	4	=
call	57:17	57:48	4	block_FifoGet
arg	57:32	57:48	5	p_input->p_fifo
water	57:32	0:0	6	p_input
op	57:39	0:0	6	->
water	57:41	0:0	6	p_fifo
water	57:49	0:0	4	;
call	58:9	59:67	4	EStoPES
arg	58:19	58:26	5	&p_data
op	58:19	0:0	6	&
water	58:20	0:0	6	p_data
arg	58:28	58:34	5	p_data
water	58:28	0:0	6	p_data
arg	58:36	58:50	5	p_input->p_fmt
water	58:36	0:0	6	p_input
op	58:43	0:0	6	->
water	58:45	0:0	6	p_fmt
arg	58:52	58:73	5	p_stream->i_stream_id
water	58:52	0:0	6	p_stream
op	58:60	0:0	6	->
water	58:62	0:0	6	i_stream_id
arg	59:23	59:37	5	p_sys->b_mpeg2
water	59:23	0:0	6	p_sys
op	59:28	0:0	6	->
water	59:30	0:0	6	b_mpeg2
arg	59:39	59:40	5	0
water	59:39	0:0	6	0
arg	59:42	59:43	5	0
water	59:42	0:0	6	0
arg	59:45	59:67	5	p_sys->i_pes_max_size
water	59:45	0:0	6	p_sys
op	59:50	0:0	6	->
water	59:52	0:0	6	i_pes_max_size
water	59:68	0:0	4	;
call	60:8	60:41	4	block_ChainAppend
arg	60:27	60:32	5	&p_ps
op	60:27	0:0	6	&
water	60:28	0:0	6	p_ps
arg	60:34	60:41	5	p_data
water	60:34	0:0	6	p_data
water	60:42	0:0	4	;
for	62:8	65:8	4	(p_data = p_ps ;p_data;p_data = p_data -> p_next)
forinit	62:13	62:26	5	p_data = p_ps ;
water	62:13	0:0	6	p_data
op	62:20	0:0	6	=
water	62:22	0:0	6	p_ps
water	62:26	0:0	6	;
cond	62:28	62:28	5	p_data
water	62:28	0:0	6	p_data
forexpr	62:36	62:53	5	p_data = p_data -> p_next
water	62:36	0:0	6	p_data
op	62:43	0:0	6	=
water	62:45	0:0	6	p_data
op	62:51	0:0	6	->
water	62:53	0:0	6	p_next
stmts	63:8	65:8	5	
water	63:8	0:0	6	{
water	64:12	0:0	6	p_sys
op	64:17	0:0	6	->
water	64:19	0:0	6	i_instant_size
op	64:34	0:0	6	+=
water	64:37	0:0	6	p_data
op	64:43	0:0	6	->
water	64:45	0:0	6	i_buffer
water	64:53	0:0	6	;
water	65:8	0:0	6	}
call	66:8	66:51	4	sout_AccessOutWrite
arg	66:29	66:44	5	p_mux->p_access
water	66:29	0:0	6	p_mux
op	66:34	0:0	6	->
water	66:36	0:0	6	p_access
arg	66:46	66:51	5	p_ps
water	66:46	0:0	6	p_ps
water	66:52	0:0	4	;
water	68:8	0:0	4	p_sys
op	68:13	0:0	4	->
water	68:15	0:0	4	i_pes_count
op	68:26	0:0	4	++
water	68:28	0:0	4	;
water	69:4	0:0	4	}
return	70:4	70:22	2	VLC_SUCCESS
water	70:11	0:0	3	VLC_SUCCESS
