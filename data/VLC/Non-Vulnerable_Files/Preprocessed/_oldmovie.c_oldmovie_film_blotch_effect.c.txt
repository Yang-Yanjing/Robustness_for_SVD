func	2:0	32:0	0	static void	oldmovie_film_blotch_effect
params	2:39	0:0	1	
param	2:41	2:59	2	filter_t *	p_filter
param	2:61	2:82	2	picture_t *	p_pic_out
stmnts	0:0	31:4	1	
decl	4:4	4:41	2	filter_sys_t	*p_sys
op	4:24	0:0	2	=
water	4:26	0:0	2	p_filter
op	4:34	0:0	2	->
water	4:36	0:0	2	p_sys
if	7:4	31:4	2	(p_sys -> i_blotch_trigger <= p_sys -> i_cur_time)
cond	7:9	7:43	3	p_sys -> i_blotch_trigger <= p_sys -> i_cur_time
water	7:9	0:0	4	p_sys
op	7:14	0:0	4	->
water	7:16	0:0	4	i_blotch_trigger
op	7:33	0:0	4	<=
water	7:36	0:0	4	p_sys
op	7:41	0:0	4	->
water	7:43	0:0	4	i_cur_time
stmts	7:56	31:4	3	
water	7:56	0:0	4	{
decl	9:8	9:79	4	int32_t	i_bx
op	9:21	0:0	4	=
water	9:30	0:0	4	(
water	9:31	0:0	4	unsigned
water	9:39	0:0	4	)
call	9:40	9:52	5	vlc_mrand48
op	9:54	0:0	4	%
water	9:56	0:0	4	p_sys
op	9:61	0:0	4	->
water	9:63	0:0	4	i_width
op	9:70	0:0	4	[
water	9:71	0:0	4	Y_PLANE
op	9:78	0:0	4	]
decl	10:8	10:80	4	int32_t	i_by
op	10:21	0:0	4	=
water	10:30	0:0	4	(
water	10:31	0:0	4	unsigned
water	10:39	0:0	4	)
call	10:40	10:52	5	vlc_mrand48
op	10:54	0:0	4	%
water	10:56	0:0	4	p_sys
op	10:61	0:0	4	->
water	10:63	0:0	4	i_height
op	10:71	0:0	4	[
water	10:72	0:0	4	Y_PLANE
op	10:79	0:0	4	]
decl	11:8	11:100	4	int32_t	i_width
op	11:24	0:0	4	=
water	11:30	0:0	4	(
water	11:31	0:0	4	unsigned
water	11:39	0:0	4	)
call	11:40	11:52	5	vlc_mrand48
op	11:54	0:0	4	%
call	11:56	11:95	5	__MAX
arg	11:63	11:64	6	1
water	11:63	0:0	7	1
arg	11:66	11:95	6	p_sys->i_width[Y_PLANE]/10
water	11:66	0:0	7	p_sys
op	11:71	0:0	7	->
water	11:73	0:0	7	i_width
op	11:80	0:0	7	[
water	11:81	0:0	7	Y_PLANE
op	11:88	0:0	7	]
op	11:90	0:0	7	/
water	11:92	0:0	7	10
op	11:97	0:0	4	+
water	11:99	0:0	4	1
decl	12:8	12:63	4	int32_t	i_intensity
op	12:28	0:0	4	=
water	12:30	0:0	4	(
water	12:31	0:0	4	unsigned
water	12:39	0:0	4	)
call	12:40	12:52	5	vlc_mrand48
op	12:54	0:0	4	%
water	12:56	0:0	4	50
op	12:59	0:0	4	+
water	12:61	0:0	4	20
if	13:8	20:8	4	(( unsigned )vlc_mrand48 ( ) & 0 x01)
cond	13:13	13:40	5	( unsigned )vlc_mrand48 ( ) & 0 x01
water	13:13	0:0	6	(
water	13:14	0:0	6	unsigned
water	13:22	0:0	6	)
call	13:23	13:35	6	vlc_mrand48
op	13:37	0:0	6	&
water	13:39	0:0	6	0
water	13:40	0:0	6	x01
stmts	13:46	20:8	5	
water	13:46	0:0	6	{
for	15:12	19:83	6	( int32_t i_y = - i_width + 1 ;i_y < i_width;i_y ++)
forinit	0:0	15:44	7	 int32_t i_y = - i_width + 1 ;
decl	15:18	15:44	8	int32_t	i_y
op	15:30	0:0	8	=
op	15:32	0:0	8	-
water	15:33	0:0	8	i_width
op	15:41	0:0	8	+
water	15:43	0:0	8	1
cond	15:46	15:52	7	i_y < i_width
water	15:46	0:0	8	i_y
op	15:50	0:0	8	<
water	15:52	0:0	8	i_width
forexpr	15:61	15:64	7	i_y ++
water	15:61	0:0	8	i_y
op	15:64	0:0	8	++
stmts	16:16	19:83	7	
for	16:16	19:83	8	( int32_t i_x = - i_width + 1 ;i_x < i_width;i_x ++)
forinit	0:0	16:48	9	 int32_t i_x = - i_width + 1 ;
decl	16:22	16:48	10	int32_t	i_x
op	16:34	0:0	10	=
op	16:36	0:0	10	-
water	16:37	0:0	10	i_width
op	16:45	0:0	10	+
water	16:47	0:0	10	1
cond	16:50	16:56	9	i_x < i_width
water	16:50	0:0	10	i_x
op	16:54	0:0	10	<
water	16:56	0:0	10	i_width
forexpr	16:65	16:68	9	i_x ++
water	16:65	0:0	10	i_x
op	16:68	0:0	10	++
stmts	17:20	19:83	9	
if	17:20	19:83	10	(i_x * i_x + i_y * i_y <= i_width * i_width)
cond	17:25	17:60	11	i_x * i_x + i_y * i_y <= i_width * i_width
water	17:25	0:0	12	i_x
op	17:29	0:0	12	*
water	17:31	0:0	12	i_x
op	17:35	0:0	12	+
water	17:37	0:0	12	i_y
op	17:41	0:0	12	*
water	17:43	0:0	12	i_y
op	17:47	0:0	12	<=
water	17:50	0:0	12	i_width
op	17:58	0:0	12	*
water	17:60	0:0	12	i_width
stmts	18:24	19:83	11	
call	18:24	19:82	12	CHECK_N_DARKEN_PIXEL
arg	18:46	18:56	13	i_x+i_bx
water	18:46	0:0	14	i_x
op	18:50	0:0	14	+
water	18:52	0:0	14	i_bx
arg	18:58	18:68	13	i_y+i_by
water	18:58	0:0	14	i_y
op	18:62	0:0	14	+
water	18:64	0:0	14	i_by
arg	19:46	19:57	13	i_intensity
water	19:46	0:0	14	i_intensity
arg	19:59	19:82	13	&p_pic_out->p[Y_PLANE]
op	19:59	0:0	14	&
water	19:60	0:0	14	p_pic_out
op	19:69	0:0	14	->
water	19:71	0:0	14	p
op	19:72	0:0	14	[
water	19:73	0:0	14	Y_PLANE
op	19:80	0:0	14	]
water	19:83	0:0	12	;
water	20:8	0:0	6	}
else	20:10	27:8	4
stmts	20:15	27:8	5	
water	20:15	0:0	6	{
for	22:12	26:84	6	( int32_t i_y = - i_width + 1 ;i_y < i_width;i_y ++)
forinit	0:0	22:42	7	 int32_t i_y = - i_width + 1 ;
decl	22:18	22:42	8	int32_t	i_y
op	22:30	0:0	8	=
op	22:32	0:0	8	-
water	22:33	0:0	8	i_width
op	22:40	0:0	8	+
water	22:41	0:0	8	1
cond	22:44	22:50	7	i_y < i_width
water	22:44	0:0	8	i_y
op	22:48	0:0	8	<
water	22:50	0:0	8	i_width
forexpr	22:59	22:62	7	i_y ++
water	22:59	0:0	8	i_y
op	22:62	0:0	8	++
stmts	23:16	26:84	7	
for	23:16	26:84	8	( int32_t i_x = - i_width + 1 ;i_x < i_width;i_x ++)
forinit	0:0	23:46	9	 int32_t i_x = - i_width + 1 ;
decl	23:22	23:46	10	int32_t	i_x
op	23:34	0:0	10	=
op	23:36	0:0	10	-
water	23:37	0:0	10	i_width
op	23:44	0:0	10	+
water	23:45	0:0	10	1
cond	23:48	23:54	9	i_x < i_width
water	23:48	0:0	10	i_x
op	23:52	0:0	10	<
water	23:54	0:0	10	i_width
forexpr	23:63	23:66	9	i_x ++
water	23:63	0:0	10	i_x
op	23:66	0:0	10	++
stmts	24:20	26:84	9	
if	24:20	26:84	10	(i_x * i_x + i_y * i_y <= i_width * i_width)
cond	24:25	24:60	11	i_x * i_x + i_y * i_y <= i_width * i_width
water	24:25	0:0	12	i_x
op	24:29	0:0	12	*
water	24:31	0:0	12	i_x
op	24:35	0:0	12	+
water	24:37	0:0	12	i_y
op	24:41	0:0	12	*
water	24:43	0:0	12	i_y
op	24:47	0:0	12	<=
water	24:50	0:0	12	i_width
op	24:58	0:0	12	*
water	24:60	0:0	12	i_width
stmts	25:24	26:84	11	
call	25:24	26:83	12	CHECK_N_LIGHTEN_PIXEL
arg	25:47	25:57	13	i_x+i_bx
water	25:47	0:0	14	i_x
op	25:51	0:0	14	+
water	25:53	0:0	14	i_bx
arg	25:59	25:69	13	i_y+i_by
water	25:59	0:0	14	i_y
op	25:63	0:0	14	+
water	25:65	0:0	14	i_by
arg	26:47	26:58	13	i_intensity
water	26:47	0:0	14	i_intensity
arg	26:60	26:83	13	&p_pic_out->p[Y_PLANE]
op	26:60	0:0	14	&
water	26:61	0:0	14	p_pic_out
op	26:70	0:0	14	->
water	26:72	0:0	14	p
op	26:73	0:0	14	[
water	26:74	0:0	14	Y_PLANE
op	26:81	0:0	14	]
water	26:84	0:0	12	;
water	27:8	0:0	6	}
water	28:8	0:0	4	p_sys
op	28:13	0:0	4	->
water	28:15	0:0	4	i_blotch_trigger
op	28:32	0:0	4	=
water	28:34	0:0	4	p_sys
op	28:39	0:0	4	->
water	28:41	0:0	4	i_cur_time
op	29:32	0:0	4	+
water	29:34	0:0	4	(
water	29:35	0:0	4	uint64_t
water	29:43	0:0	4	)
call	29:44	29:56	4	vlc_mrand48
op	29:58	0:0	4	%
water	29:60	0:0	4	BLOTCH_GENERATOR_PERIOD
op	30:32	0:0	4	+
water	30:34	0:0	4	BLOTCH_GENERATOR_PERIOD
op	30:58	0:0	4	/
water	30:60	0:0	4	2
water	30:61	0:0	4	;
water	31:4	0:0	4	}
