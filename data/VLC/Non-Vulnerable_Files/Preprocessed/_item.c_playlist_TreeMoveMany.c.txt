func	2:0	26:0	0	int	playlist_TreeMoveMany
params	2:25	0:0	1	
param	2:27	2:49	2	playlist_t *	p_playlist
param	3:28	3:39	2	int	i_items
param	3:41	3:67	2	playlist_item_t * *	pp_items
param	4:28	4:51	2	playlist_item_t *	p_node
param	4:53	4:66	2	int	i_newpos
stmnts	6:4	25:22	1	
water	6:4	0:0	2	PL_ASSERT_LOCKED
water	6:20	0:0	2	;
if	7:4	7:55	2	(p_node -> i_children == - 1)
cond	7:9	7:32	3	p_node -> i_children == - 1
water	7:9	0:0	4	p_node
op	7:15	0:0	4	->
water	7:17	0:0	4	i_children
op	7:28	0:0	4	==
op	7:31	0:0	4	-
water	7:32	0:0	4	1
stmts	7:36	7:55	3	
return	7:36	7:55	4	VLC_EGENERIC
water	7:43	0:0	5	VLC_EGENERIC
decl	8:4	8:9	2	int	i
for	9:4	16:4	2	(i = 0 ;i < i_items;i ++)
forinit	9:9	9:14	3	i = 0 ;
water	9:9	0:0	4	i
op	9:11	0:0	4	=
water	9:13	0:0	4	0
water	9:14	0:0	4	;
cond	9:16	9:20	3	i < i_items
water	9:16	0:0	4	i
op	9:18	0:0	4	<
water	9:20	0:0	4	i_items
forexpr	9:29	9:30	3	i ++
water	9:29	0:0	4	i
op	9:30	0:0	4	++
stmts	10:4	16:4	3	
water	10:4	0:0	4	{
decl	11:8	11:45	4	playlist_item_t	*p_item
op	11:32	0:0	4	=
water	11:34	0:0	4	pp_items
op	11:42	0:0	4	[
water	11:43	0:0	4	i
op	11:44	0:0	4	]
decl	12:8	12:41	4	int	i_index
op	12:20	0:0	4	=
call	12:22	12:40	5	ItemIndex
arg	12:33	12:40	6	p_item
water	12:33	0:0	7	p_item
decl	13:8	13:52	4	playlist_item_t	*p_parent
op	13:34	0:0	4	=
water	13:36	0:0	4	p_item
op	13:42	0:0	4	->
water	13:44	0:0	4	p_parent
call	14:8	14:74	4	REMOVE_ELEM
arg	14:21	14:42	5	p_parent->pp_children
water	14:21	0:0	6	p_parent
op	14:29	0:0	6	->
water	14:31	0:0	6	pp_children
arg	14:44	14:64	5	p_parent->i_children
water	14:44	0:0	6	p_parent
op	14:52	0:0	6	->
water	14:54	0:0	6	i_children
arg	14:66	14:74	5	i_index
water	14:66	0:0	6	i_index
water	14:75	0:0	4	;
if	15:8	15:66	4	(p_parent == p_node && i_index < i_newpos)
cond	15:13	15:45	5	p_parent == p_node && i_index < i_newpos
water	15:13	0:0	6	p_parent
op	15:22	0:0	6	==
water	15:25	0:0	6	p_node
op	15:32	0:0	6	&&
water	15:35	0:0	6	i_index
op	15:43	0:0	6	<
water	15:45	0:0	6	i_newpos
stmts	15:56	15:66	5	
water	15:56	0:0	6	i_newpos
op	15:64	0:0	6	--
water	15:66	0:0	6	;
water	16:4	0:0	4	}
for	17:4	22:4	2	(i = i_items - 1 ;i >= 0;i --)
forinit	17:9	17:24	3	i = i_items - 1 ;
water	17:9	0:0	4	i
op	17:11	0:0	4	=
water	17:13	0:0	4	i_items
op	17:21	0:0	4	-
water	17:23	0:0	4	1
water	17:24	0:0	4	;
cond	17:26	17:31	3	i >= 0
water	17:26	0:0	4	i
op	17:28	0:0	4	>=
water	17:31	0:0	4	0
forexpr	17:34	17:35	3	i --
water	17:34	0:0	4	i
op	17:35	0:0	4	--
stmts	18:4	22:4	3	
water	18:4	0:0	4	{
decl	19:8	19:45	4	playlist_item_t	*p_item
op	19:32	0:0	4	=
water	19:34	0:0	4	pp_items
op	19:42	0:0	4	[
water	19:43	0:0	4	i
op	19:44	0:0	4	]
call	20:8	20:79	4	INSERT_ELEM
arg	20:21	20:40	5	p_node->pp_children
water	20:21	0:0	6	p_node
op	20:27	0:0	6	->
water	20:29	0:0	6	pp_children
arg	20:42	20:60	5	p_node->i_children
water	20:42	0:0	6	p_node
op	20:48	0:0	6	->
water	20:50	0:0	6	i_children
arg	20:62	20:70	5	i_newpos
water	20:62	0:0	6	i_newpos
arg	20:72	20:79	5	p_item
water	20:72	0:0	6	p_item
water	20:80	0:0	4	;
water	21:8	0:0	4	p_item
op	21:14	0:0	4	->
water	21:16	0:0	4	p_parent
op	21:25	0:0	4	=
water	21:27	0:0	4	p_node
water	21:33	0:0	4	;
water	22:4	0:0	4	}
call	23:4	23:24	2	pl_priv
arg	23:13	23:24	3	p_playlist
water	23:13	0:0	4	p_playlist
op	23:25	0:0	2	->
water	23:27	0:0	2	b_reset_currently_playing
op	23:53	0:0	2	=
water	23:55	0:0	2	true
water	23:59	0:0	2	;
call	24:4	24:52	2	vlc_cond_signal
arg	24:21	24:52	3	&pl_priv(p_playlist)->signal
call	24:21	24:42	4	&pl_priv
arg	24:31	24:42	5	p_playlist
water	24:31	0:0	6	p_playlist
op	24:43	0:0	4	->
water	24:45	0:0	4	signal
water	24:53	0:0	2	;
return	25:4	25:22	2	VLC_SUCCESS
water	25:11	0:0	3	VLC_SUCCESS
