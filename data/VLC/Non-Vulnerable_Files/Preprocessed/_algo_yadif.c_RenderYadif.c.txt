func	2:0	125:0	0	int	RenderYadif
params	2:15	0:0	1	
param	2:17	2:35	2	filter_t *	p_filter
param	2:37	2:53	2	picture_t *	p_dst
param	2:55	2:71	2	picture_t *	p_src
param	3:17	3:28	2	int	i_order
param	3:30	3:42	2	int	i_field
stmnts	5:4	124:4	1	
call	5:4	5:20	2	VLC_UNUSED
arg	5:15	5:20	3	p_src
water	5:15	0:0	4	p_src
water	5:21	0:0	2	;
decl	6:4	6:41	2	filter_sys_t	*p_sys
op	6:24	0:0	2	=
water	6:26	0:0	2	p_filter
op	6:34	0:0	2	->
water	6:36	0:0	2	p_sys
call	8:4	8:41	2	assert
arg	8:12	8:41	3	i_order>=0&&i_order<=2
water	8:12	0:0	4	i_order
op	8:20	0:0	4	>=
water	8:23	0:0	4	0
op	8:25	0:0	4	&&
water	8:28	0:0	4	i_order
op	8:36	0:0	4	<=
water	8:39	0:0	4	2
water	8:42	0:0	2	;
call	9:4	9:41	2	assert
arg	9:12	9:41	3	i_field==0||i_field==1
water	9:12	0:0	4	i_field
op	9:20	0:0	4	==
water	9:23	0:0	4	0
op	9:25	0:0	4	||
water	9:28	0:0	4	i_field
op	9:36	0:0	4	==
water	9:39	0:0	4	1
water	9:42	0:0	2	;
decl	11:4	11:44	2	picture_t	*p_prev
op	11:22	0:0	2	=
water	11:24	0:0	2	p_sys
op	11:29	0:0	2	->
water	11:31	0:0	2	pp_history
op	11:41	0:0	2	[
water	11:42	0:0	2	0
op	11:43	0:0	2	]
decl	12:4	12:44	2	picture_t	*p_cur
op	12:22	0:0	2	=
water	12:24	0:0	2	p_sys
op	12:29	0:0	2	->
water	12:31	0:0	2	pp_history
op	12:41	0:0	2	[
water	12:42	0:0	2	1
op	12:43	0:0	2	]
decl	13:4	13:44	2	picture_t	*p_next
op	13:22	0:0	2	=
water	13:24	0:0	2	p_sys
op	13:29	0:0	2	->
water	13:31	0:0	2	pp_history
op	13:41	0:0	2	[
water	13:42	0:0	2	2
op	13:43	0:0	2	]
decl	39:4	39:20	2	int	yadif_parity
if	40:4	41:40	2	(p_cur && p_cur -> i_nb_fields > 2)
cond	40:8	40:40	3	p_cur && p_cur -> i_nb_fields > 2
water	40:8	0:0	4	p_cur
op	40:15	0:0	4	&&
water	40:19	0:0	4	p_cur
op	40:24	0:0	4	->
water	40:26	0:0	4	i_nb_fields
op	40:38	0:0	4	>
water	40:40	0:0	4	2
stmts	41:8	41:40	3	
water	41:8	0:0	4	yadif_parity
op	41:21	0:0	4	=
water	41:23	0:0	4	(
water	41:24	0:0	4	i_order
op	41:32	0:0	4	+
water	41:34	0:0	4	1
water	41:35	0:0	4	)
op	41:37	0:0	4	%
water	41:39	0:0	4	3
water	41:40	0:0	4	;
else	43:4	44:40	2
stmts	44:8	44:40	3	
water	44:8	0:0	4	yadif_parity
op	44:21	0:0	4	=
water	44:23	0:0	4	(
water	44:24	0:0	4	i_order
op	44:32	0:0	4	+
water	44:34	0:0	4	1
water	44:35	0:0	4	)
op	44:37	0:0	4	%
water	44:39	0:0	4	2
water	44:40	0:0	4	;
if	46:4	111:4	2	(p_prev && p_cur && p_next)
cond	46:8	46:27	3	p_prev && p_cur && p_next
water	46:8	0:0	4	p_prev
op	46:15	0:0	4	&&
water	46:18	0:0	4	p_cur
op	46:24	0:0	4	&&
water	46:27	0:0	4	p_next
stmts	47:4	111:4	3	
water	47:4	0:0	4	{
call	49:8	49:21	4	void
arg	49:14	49:21	5	*filter
op	49:14	0:0	6	*
water	49:15	0:0	6	filter
water	49:22	0:0	4	(
water	49:23	0:0	4	uint8_t
op	49:31	0:0	4	*
water	49:32	0:0	4	dst
water	49:35	0:0	4	,
water	49:37	0:0	4	uint8_t
op	49:45	0:0	4	*
water	49:46	0:0	4	prev
water	49:50	0:0	4	,
water	49:52	0:0	4	uint8_t
op	49:60	0:0	4	*
water	49:61	0:0	4	cur
water	49:64	0:0	4	,
water	49:66	0:0	4	uint8_t
op	49:74	0:0	4	*
water	49:75	0:0	4	next
water	49:79	0:0	4	,
water	50:23	0:0	4	int
water	50:27	0:0	4	w
water	50:28	0:0	4	,
water	50:30	0:0	4	int
water	50:34	0:0	4	prefs
water	50:39	0:0	4	,
water	50:41	0:0	4	int
water	50:45	0:0	4	mrefs
water	50:50	0:0	4	,
water	50:52	0:0	4	int
water	50:56	0:0	4	parity
water	50:62	0:0	4	,
water	50:64	0:0	4	int
water	50:68	0:0	4	mode
water	50:72	0:0	4	)
water	50:73	0:0	4	;
if	52:8	53:44	4	(vlc_CPU_SSSE3 ( ))
cond	52:12	52:26	5	vlc_CPU_SSSE3 ( )
call	52:12	52:26	6	vlc_CPU_SSSE3
stmts	53:12	53:44	5	
water	53:12	0:0	6	filter
op	53:19	0:0	6	=
water	53:21	0:0	6	yadif_filter_line_ssse3
water	53:44	0:0	6	;
else	54:8	58:43	4
stmts	57:8	58:43	5	
if	57:8	58:43	6	(vlc_CPU_SSE2 ( ))
cond	57:12	57:25	7	vlc_CPU_SSE2 ( )
call	57:12	57:25	8	vlc_CPU_SSE2
stmts	58:12	58:43	7	
water	58:12	0:0	8	filter
op	58:19	0:0	8	=
water	58:21	0:0	8	yadif_filter_line_sse2
water	58:43	0:0	8	;
else	59:8	63:42	4
stmts	62:8	63:42	5	
if	62:8	63:42	6	(vlc_CPU_MMX ( ))
cond	62:12	62:24	7	vlc_CPU_MMX ( )
call	62:12	62:24	8	vlc_CPU_MMX
stmts	63:12	63:42	7	
water	63:12	0:0	8	filter
op	63:19	0:0	8	=
water	63:21	0:0	8	yadif_filter_line_mmx
water	63:42	0:0	8	;
else	64:8	66:40	4
stmts	66:12	66:40	5	
water	66:12	0:0	6	filter
op	66:19	0:0	6	=
water	66:21	0:0	6	yadif_filter_line_c
water	66:40	0:0	6	;
if	67:8	68:46	4	(p_sys -> chroma -> pixel_size == 2)
cond	67:12	67:41	5	p_sys -> chroma -> pixel_size == 2
water	67:12	0:0	6	p_sys
op	67:17	0:0	6	->
water	67:19	0:0	6	chroma
op	67:25	0:0	6	->
water	67:27	0:0	6	pixel_size
op	67:38	0:0	6	==
water	67:41	0:0	6	2
stmts	68:12	68:46	5	
water	68:12	0:0	6	filter
op	68:19	0:0	6	=
water	68:21	0:0	6	yadif_filter_line_c_16bit
water	68:46	0:0	6	;
for	69:8	108:8	4	( int n = 0 ;n < p_dst -> i_planes;n ++)
forinit	0:0	69:22	5	 int n = 0 ;
decl	69:13	69:22	6	int	n
op	69:19	0:0	6	=
water	69:21	0:0	6	0
cond	69:24	69:35	5	n < p_dst -> i_planes
water	69:24	0:0	6	n
op	69:26	0:0	6	<
water	69:28	0:0	6	p_dst
op	69:33	0:0	6	->
water	69:35	0:0	6	i_planes
forexpr	69:45	69:46	5	n ++
water	69:45	0:0	6	n
op	69:46	0:0	6	++
stmts	70:8	108:8	5	
water	70:8	0:0	6	{
decl	71:12	71:48	6	const plane_t	*prevp
op	71:33	0:0	6	=
op	71:35	0:0	6	&
water	71:36	0:0	6	p_prev
op	71:42	0:0	6	->
water	71:44	0:0	6	p
op	71:45	0:0	6	[
water	71:46	0:0	6	n
op	71:47	0:0	6	]
decl	72:12	72:47	6	const plane_t	*curp
op	72:33	0:0	6	=
op	72:35	0:0	6	&
water	72:36	0:0	6	p_cur
op	72:41	0:0	6	->
water	72:43	0:0	6	p
op	72:44	0:0	6	[
water	72:45	0:0	6	n
op	72:46	0:0	6	]
decl	73:12	73:48	6	const plane_t	*nextp
op	73:33	0:0	6	=
op	73:35	0:0	6	&
water	73:36	0:0	6	p_next
op	73:42	0:0	6	->
water	73:44	0:0	6	p
op	73:45	0:0	6	[
water	73:46	0:0	6	n
op	73:47	0:0	6	]
decl	74:12	74:47	6	plane_t	*dstp
op	74:33	0:0	6	=
op	74:35	0:0	6	&
water	74:36	0:0	6	p_dst
op	74:41	0:0	6	->
water	74:43	0:0	6	p
op	74:44	0:0	6	[
water	74:45	0:0	6	n
op	74:46	0:0	6	]
for	75:12	107:12	6	( int y = 1 ;y < dstp -> i_visible_lines - 1;y ++)
forinit	0:0	75:26	7	 int y = 1 ;
decl	75:17	75:26	8	int	y
op	75:23	0:0	8	=
water	75:25	0:0	8	1
cond	75:28	75:56	7	y < dstp -> i_visible_lines - 1
water	75:28	0:0	8	y
op	75:30	0:0	8	<
water	75:32	0:0	8	dstp
op	75:36	0:0	8	->
water	75:38	0:0	8	i_visible_lines
op	75:54	0:0	8	-
water	75:56	0:0	8	1
forexpr	75:59	75:60	7	y ++
water	75:59	0:0	8	y
op	75:60	0:0	8	++
stmts	76:12	107:12	7	
water	76:12	0:0	8	{
if	77:16	81:16	8	(( y % 2 ) == i_field || yadif_parity == 2)
cond	77:20	77:60	9	( y % 2 ) == i_field || yadif_parity == 2
water	77:20	0:0	10	(
water	77:21	0:0	10	y
op	77:23	0:0	10	%
water	77:25	0:0	10	2
water	77:26	0:0	10	)
op	77:28	0:0	10	==
water	77:31	0:0	10	i_field
op	77:40	0:0	10	||
water	77:44	0:0	10	yadif_parity
op	77:57	0:0	10	==
water	77:60	0:0	10	2
stmts	78:16	81:16	9	
water	78:16	0:0	10	{
call	79:20	80:90	10	memcpy
arg	79:28	79:62	11	&dstp->p_pixels[y*dstp->i_pitch]
op	79:28	0:0	12	&
water	79:29	0:0	12	dstp
op	79:33	0:0	12	->
water	79:35	0:0	12	p_pixels
op	79:43	0:0	12	[
water	79:44	0:0	12	y
op	79:46	0:0	12	*
water	79:48	0:0	12	dstp
op	79:52	0:0	12	->
water	79:54	0:0	12	i_pitch
op	79:61	0:0	12	]
arg	80:32	80:66	11	&curp->p_pixels[y*curp->i_pitch]
op	80:32	0:0	12	&
water	80:33	0:0	12	curp
op	80:37	0:0	12	->
water	80:39	0:0	12	p_pixels
op	80:47	0:0	12	[
water	80:48	0:0	12	y
op	80:50	0:0	12	*
water	80:52	0:0	12	curp
op	80:56	0:0	12	->
water	80:58	0:0	12	i_pitch
op	80:65	0:0	12	]
arg	80:68	80:90	11	dstp->i_visible_pitch
water	80:68	0:0	12	dstp
op	80:72	0:0	12	->
water	80:74	0:0	12	i_visible_pitch
water	80:91	0:0	10	;
water	81:16	0:0	10	}
else	82:16	97:16	8
stmts	83:16	97:16	9	
water	83:16	0:0	10	{
decl	84:20	84:28	10	int	mode
water	86:20	0:0	10	mode
op	86:25	0:0	10	=
water	86:27	0:0	10	(
water	86:28	0:0	10	y
op	86:30	0:0	10	>=
water	86:33	0:0	10	2
op	86:35	0:0	10	&&
water	86:38	0:0	10	y
op	86:40	0:0	10	<
water	86:42	0:0	10	dstp
op	86:46	0:0	10	->
water	86:48	0:0	10	i_visible_lines
op	86:64	0:0	10	-
water	86:66	0:0	10	2
water	86:67	0:0	10	)
water	86:69	0:0	10	?
water	86:71	0:0	10	0
water	86:73	0:0	10	:
water	86:75	0:0	10	2
water	86:76	0:0	10	;
call	87:20	87:95	10	assert
arg	87:28	87:95	11	prevp->i_pitch==curp->i_pitch&&curp->i_pitch==nextp->i_pitch
water	87:28	0:0	12	prevp
op	87:33	0:0	12	->
water	87:35	0:0	12	i_pitch
op	87:43	0:0	12	==
water	87:46	0:0	12	curp
op	87:50	0:0	12	->
water	87:52	0:0	12	i_pitch
op	87:60	0:0	12	&&
water	87:63	0:0	12	curp
op	87:67	0:0	12	->
water	87:69	0:0	12	i_pitch
op	87:77	0:0	12	==
water	87:80	0:0	12	nextp
op	87:85	0:0	12	->
water	87:87	0:0	12	i_pitch
water	87:96	0:0	10	;
call	88:20	96:33	10	filter
arg	88:28	88:62	11	&dstp->p_pixels[y*dstp->i_pitch]
op	88:28	0:0	12	&
water	88:29	0:0	12	dstp
op	88:33	0:0	12	->
water	88:35	0:0	12	p_pixels
op	88:43	0:0	12	[
water	88:44	0:0	12	y
op	88:46	0:0	12	*
water	88:48	0:0	12	dstp
op	88:52	0:0	12	->
water	88:54	0:0	12	i_pitch
op	88:61	0:0	12	]
arg	89:28	89:64	11	&prevp->p_pixels[y*prevp->i_pitch]
op	89:28	0:0	12	&
water	89:29	0:0	12	prevp
op	89:34	0:0	12	->
water	89:36	0:0	12	p_pixels
op	89:44	0:0	12	[
water	89:45	0:0	12	y
op	89:47	0:0	12	*
water	89:49	0:0	12	prevp
op	89:54	0:0	12	->
water	89:56	0:0	12	i_pitch
op	89:63	0:0	12	]
arg	90:28	90:62	11	&curp->p_pixels[y*curp->i_pitch]
op	90:28	0:0	12	&
water	90:29	0:0	12	curp
op	90:33	0:0	12	->
water	90:35	0:0	12	p_pixels
op	90:43	0:0	12	[
water	90:44	0:0	12	y
op	90:46	0:0	12	*
water	90:48	0:0	12	curp
op	90:52	0:0	12	->
water	90:54	0:0	12	i_pitch
op	90:61	0:0	12	]
arg	91:28	91:64	11	&nextp->p_pixels[y*nextp->i_pitch]
op	91:28	0:0	12	&
water	91:29	0:0	12	nextp
op	91:34	0:0	12	->
water	91:36	0:0	12	p_pixels
op	91:44	0:0	12	[
water	91:45	0:0	12	y
op	91:47	0:0	12	*
water	91:49	0:0	12	nextp
op	91:54	0:0	12	->
water	91:56	0:0	12	i_pitch
op	91:63	0:0	12	]
arg	92:28	92:49	11	dstp->i_visible_pitch
water	92:28	0:0	12	dstp
op	92:32	0:0	12	->
water	92:34	0:0	12	i_visible_pitch
arg	93:28	93:91	11	y<dstp->i_visible_lines-2?curp->i_pitch:-curp->i_pitch
water	93:28	0:0	12	y
op	93:30	0:0	12	<
water	93:32	0:0	12	dstp
op	93:36	0:0	12	->
water	93:38	0:0	12	i_visible_lines
op	93:54	0:0	12	-
water	93:56	0:0	12	2
water	93:59	0:0	12	?
water	93:61	0:0	12	curp
op	93:65	0:0	12	->
water	93:67	0:0	12	i_pitch
water	93:75	0:0	12	:
op	93:77	0:0	12	-
water	93:78	0:0	12	curp
op	93:82	0:0	12	->
water	93:84	0:0	12	i_pitch
arg	94:28	94:69	11	y-1?-curp->i_pitch:curp->i_pitch
water	94:28	0:0	12	y
op	94:31	0:0	12	-
water	94:33	0:0	12	1
water	94:36	0:0	12	?
op	94:39	0:0	12	-
water	94:40	0:0	12	curp
op	94:44	0:0	12	->
water	94:46	0:0	12	i_pitch
water	94:54	0:0	12	:
water	94:56	0:0	12	curp
op	94:60	0:0	12	->
water	94:62	0:0	12	i_pitch
arg	95:28	95:40	11	yadif_parity
water	95:28	0:0	12	yadif_parity
arg	96:28	96:33	11	mode
water	96:28	0:0	12	mode
water	96:34	0:0	10	;
water	97:16	0:0	10	}
if	99:16	102:45	8	(y == 1)
cond	99:20	99:25	9	y == 1
water	99:20	0:0	10	y
op	99:22	0:0	10	==
water	99:25	0:0	10	1
stmts	100:20	102:45	9	
call	100:20	102:44	10	memcpy
arg	100:27	100:65	11	&dstp->p_pixels[(y-1)*dstp->i_pitch]
op	100:27	0:0	12	&
water	100:28	0:0	12	dstp
op	100:32	0:0	12	->
water	100:34	0:0	12	p_pixels
op	100:42	0:0	12	[
water	100:43	0:0	12	(
water	100:44	0:0	12	y
op	100:45	0:0	12	-
water	100:46	0:0	12	1
water	100:47	0:0	12	)
op	100:49	0:0	12	*
water	100:51	0:0	12	dstp
op	100:55	0:0	12	->
water	100:57	0:0	12	i_pitch
op	100:64	0:0	12	]
arg	101:31	101:69	11	&dstp->p_pixels[y*dstp->i_pitch]
op	101:31	0:0	12	&
water	101:32	0:0	12	dstp
op	101:36	0:0	12	->
water	101:38	0:0	12	p_pixels
op	101:46	0:0	12	[
water	101:48	0:0	12	y
op	101:53	0:0	12	*
water	101:55	0:0	12	dstp
op	101:59	0:0	12	->
water	101:61	0:0	12	i_pitch
op	101:68	0:0	12	]
arg	102:31	102:44	11	dstp->i_pitch
water	102:31	0:0	12	dstp
op	102:35	0:0	12	->
water	102:37	0:0	12	i_pitch
water	102:45	0:0	10	;
else	103:16	106:45	8
stmts	103:21	106:45	9	
if	103:21	106:45	10	(y == dstp -> i_visible_lines - 2)
cond	103:25	103:54	11	y == dstp -> i_visible_lines - 2
water	103:25	0:0	12	y
op	103:27	0:0	12	==
water	103:30	0:0	12	dstp
op	103:34	0:0	12	->
water	103:36	0:0	12	i_visible_lines
op	103:52	0:0	12	-
water	103:54	0:0	12	2
stmts	104:20	106:45	11	
call	104:20	106:44	12	memcpy
arg	104:27	104:65	13	&dstp->p_pixels[(y+1)*dstp->i_pitch]
op	104:27	0:0	14	&
water	104:28	0:0	14	dstp
op	104:32	0:0	14	->
water	104:34	0:0	14	p_pixels
op	104:42	0:0	14	[
water	104:43	0:0	14	(
water	104:44	0:0	14	y
op	104:45	0:0	14	+
water	104:46	0:0	14	1
water	104:47	0:0	14	)
op	104:49	0:0	14	*
water	104:51	0:0	14	dstp
op	104:55	0:0	14	->
water	104:57	0:0	14	i_pitch
op	104:64	0:0	14	]
arg	105:31	105:69	13	&dstp->p_pixels[y*dstp->i_pitch]
op	105:31	0:0	14	&
water	105:32	0:0	14	dstp
op	105:36	0:0	14	->
water	105:38	0:0	14	p_pixels
op	105:46	0:0	14	[
water	105:48	0:0	14	y
op	105:53	0:0	14	*
water	105:55	0:0	14	dstp
op	105:59	0:0	14	->
water	105:61	0:0	14	i_pitch
op	105:68	0:0	14	]
arg	106:31	106:44	13	dstp->i_pitch
water	106:31	0:0	14	dstp
op	106:35	0:0	14	->
water	106:37	0:0	14	i_pitch
water	106:45	0:0	12	;
water	107:12	0:0	8	}
water	108:8	0:0	6	}
water	109:8	0:0	4	p_sys
op	109:13	0:0	4	->
water	109:15	0:0	4	i_frame_offset
op	109:30	0:0	4	=
water	109:32	0:0	4	1
water	109:33	0:0	4	;
return	110:8	110:26	4	VLC_SUCCESS
water	110:15	0:0	5	VLC_SUCCESS
water	111:4	0:0	4	}
else	112:4	119:4	2
stmts	112:9	119:4	3	
if	112:9	119:4	4	(! p_prev && ! p_cur && p_next)
cond	112:13	112:34	5	! p_prev && ! p_cur && p_next
op	112:13	0:0	6	!
water	112:14	0:0	6	p_prev
op	112:21	0:0	6	&&
op	112:24	0:0	6	!
water	112:25	0:0	6	p_cur
op	112:31	0:0	6	&&
water	112:34	0:0	6	p_next
stmts	113:4	119:4	5	
water	113:4	0:0	6	{
call	117:8	117:31	6	RenderX
arg	117:17	117:22	7	p_dst
water	117:17	0:0	8	p_dst
arg	117:24	117:31	7	p_next
water	117:24	0:0	8	p_next
water	117:32	0:0	6	;
return	118:8	118:26	6	VLC_SUCCESS
water	118:15	0:0	7	VLC_SUCCESS
water	119:4	0:0	6	}
else	120:4	124:4	2
stmts	121:4	124:4	3	
water	121:4	0:0	4	{
water	122:8	0:0	4	p_sys
op	122:13	0:0	4	->
water	122:15	0:0	4	i_frame_offset
op	122:30	0:0	4	=
water	122:32	0:0	4	1
water	122:33	0:0	4	;
return	123:8	123:27	4	VLC_EGENERIC
water	123:15	0:0	5	VLC_EGENERIC
water	124:4	0:0	4	}
