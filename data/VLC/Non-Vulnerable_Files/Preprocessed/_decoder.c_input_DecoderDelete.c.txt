func	2:0	27:0	0	void	input_DecoderDelete
params	2:24	0:0	1	
param	2:26	2:43	2	decoder_t *	p_dec
stmnts	0:0	26:26	1	
decl	4:4	4:49	2	decoder_owner_sys_t	*p_owner
op	4:33	0:0	2	=
water	4:35	0:0	2	p_dec
op	4:40	0:0	2	->
water	4:42	0:0	2	p_owner
call	5:4	5:32	2	vlc_cancel
arg	5:16	5:32	3	p_owner->thread
water	5:16	0:0	4	p_owner
op	5:23	0:0	4	->
water	5:25	0:0	4	thread
water	5:33	0:0	2	;
call	7:4	7:35	2	vlc_mutex_lock
arg	7:20	7:35	3	&p_owner->lock
op	7:20	0:0	4	&
water	7:21	0:0	4	p_owner
op	7:28	0:0	4	->
water	7:30	0:0	4	lock
water	7:36	0:0	2	;
decl	8:4	8:47	2	const bool	b_was_paused
op	8:28	0:0	2	=
water	8:30	0:0	2	p_owner
op	8:37	0:0	2	->
water	8:39	0:0	2	b_paused
water	9:4	0:0	2	p_owner
op	9:11	0:0	2	->
water	9:13	0:0	2	b_paused
op	9:22	0:0	2	=
water	9:24	0:0	2	false
water	9:29	0:0	2	;
water	10:4	0:0	2	p_owner
op	10:11	0:0	2	->
water	10:13	0:0	2	b_waiting
op	10:23	0:0	2	=
water	10:25	0:0	2	false
water	10:30	0:0	2	;
water	11:4	0:0	2	p_owner
op	11:11	0:0	2	->
water	11:13	0:0	2	b_flushing
op	11:24	0:0	2	=
water	11:26	0:0	2	true
water	11:30	0:0	2	;
water	12:4	0:0	2	p_owner
op	12:11	0:0	2	->
water	12:13	0:0	2	b_exit
op	12:20	0:0	2	=
water	12:22	0:0	2	true
water	12:26	0:0	2	;
call	13:4	13:44	2	vlc_cond_signal
arg	13:21	13:44	3	&p_owner->wait_request
op	13:21	0:0	4	&
water	13:22	0:0	4	p_owner
op	13:29	0:0	4	->
water	13:31	0:0	4	wait_request
water	13:45	0:0	2	;
call	14:4	14:37	2	vlc_mutex_unlock
arg	14:22	14:37	3	&p_owner->lock
op	14:22	0:0	4	&
water	14:23	0:0	4	p_owner
op	14:30	0:0	4	->
water	14:32	0:0	4	lock
water	14:38	0:0	2	;
call	15:4	15:36	2	vlc_join
arg	15:14	15:29	3	p_owner->thread
water	15:14	0:0	4	p_owner
op	15:21	0:0	4	->
water	15:23	0:0	4	thread
arg	15:31	15:36	3	NULL
water	15:31	0:0	4	NULL
water	15:37	0:0	2	;
water	16:4	0:0	2	p_owner
op	16:11	0:0	2	->
water	16:13	0:0	2	b_paused
op	16:22	0:0	2	=
water	16:24	0:0	2	b_was_paused
water	16:36	0:0	2	;
call	17:4	17:42	2	module_unneed
arg	17:19	17:24	3	p_dec
water	17:19	0:0	4	p_dec
arg	17:26	17:42	3	p_dec->p_module
water	17:26	0:0	4	p_dec
op	17:31	0:0	4	->
water	17:33	0:0	4	p_module
water	17:43	0:0	2	;
if	19:4	24:4	2	(p_dec -> p_owner -> cc . b_supported)
cond	19:8	19:27	3	p_dec -> p_owner -> cc . b_supported
water	19:8	0:0	4	p_dec
op	19:13	0:0	4	->
water	19:15	0:0	4	p_owner
op	19:22	0:0	4	->
water	19:24	0:0	4	cc
op	19:26	0:0	4	.
water	19:27	0:0	4	b_supported
stmts	20:4	24:4	3	
water	20:4	0:0	4	{
decl	21:8	21:13	4	int	i
for	22:8	23:54	4	(i = 0 ;i < 4;i ++)
forinit	22:13	22:18	5	i = 0 ;
water	22:13	0:0	6	i
op	22:15	0:0	6	=
water	22:17	0:0	6	0
water	22:18	0:0	6	;
cond	22:20	22:24	5	i < 4
water	22:20	0:0	6	i
op	22:22	0:0	6	<
water	22:24	0:0	6	4
forexpr	22:27	22:28	5	i ++
water	22:27	0:0	6	i
op	22:28	0:0	6	++
stmts	23:12	23:54	5	
call	23:12	23:53	6	input_DecoderSetCcState
arg	23:37	23:42	7	p_dec
water	23:37	0:0	8	p_dec
arg	23:44	23:49	7	false
water	23:44	0:0	8	false
arg	23:51	23:53	7	i
water	23:51	0:0	8	i
water	23:54	0:0	6	;
water	24:4	0:0	4	}
call	26:4	26:25	2	DeleteDecoder
arg	26:19	26:25	3	p_dec
water	26:19	0:0	4	p_dec
water	26:26	0:0	2	;
