func	1:0	175:0	0	static void	modifier_read_imp
params	2:17	0:0	1	
param	2:18	2:34	2	png_modifier *	pm
param	2:36	2:48	2	png_bytep	pb
param	2:50	2:63	2	png_size_t	st
stmnts	4:3	174:3	1	
while	4:3	174:3	2	(st > 0)
cond	4:10	4:15	3	st > 0
water	4:10	0:0	4	st
op	4:13	0:0	4	>
water	4:15	0:0	4	0
stmts	5:3	174:3	3	
water	5:3	0:0	4	{
decl	6:6	6:15	4	size_t	cb
decl	7:6	7:28	4	png_uint_32	len
water	7:21	0:0	4	,
decl	7:6	7:28	4	png_uint_32	chunk
decl	8:6	8:27	4	png_modification	*mod
if	9:6	163:6	4	(pm -> buffer_position >= pm -> buffer_count)
cond	9:10	9:37	5	pm -> buffer_position >= pm -> buffer_count
water	9:10	0:0	6	pm
op	9:12	0:0	6	->
water	9:14	0:0	6	buffer_position
op	9:30	0:0	6	>=
water	9:33	0:0	6	pm
op	9:35	0:0	6	->
water	9:37	0:0	6	buffer_count
stmts	9:51	163:6	5	
switch	9:51	163:6	6	(pm -> state)
cond	9:59	9:63	7	pm -> state
water	9:59	0:0	8	pm
op	9:61	0:0	8	->
water	9:63	0:0	8	state
stmts	10:6	163:6	7	
water	10:6	0:0	8	{
water	11:9	0:0	8	static
water	11:16	0:0	8	png_byte
water	11:25	0:0	8	sign
op	11:29	0:0	8	[
water	11:30	0:0	8	8
op	11:31	0:0	8	]
op	11:33	0:0	8	=
water	11:35	0:0	8	{
water	11:37	0:0	8	137
water	11:40	0:0	8	,
water	11:42	0:0	8	80
water	11:44	0:0	8	,
water	11:46	0:0	8	78
water	11:48	0:0	8	,
water	11:50	0:0	8	71
water	11:52	0:0	8	,
water	11:54	0:0	8	13
water	11:56	0:0	8	,
water	11:58	0:0	8	10
water	11:60	0:0	8	,
water	11:62	0:0	8	26
water	11:64	0:0	8	,
water	11:66	0:0	8	10
water	11:69	0:0	8	}
water	11:70	0:0	8	;
label	12:9	12:28	8	case modifier_start :
call	13:12	13:51	8	store_read_imp
arg	13:27	13:36	9	&pm->this
op	13:27	0:0	10	&
water	13:28	0:0	10	pm
op	13:30	0:0	10	->
water	13:32	0:0	10	this
arg	13:38	13:48	9	pm->buffer
water	13:38	0:0	10	pm
op	13:40	0:0	10	->
water	13:42	0:0	10	buffer
arg	13:50	13:51	9	8
water	13:50	0:0	10	8
water	13:52	0:0	8	;
water	14:12	0:0	8	pm
op	14:14	0:0	8	->
water	14:16	0:0	8	buffer_count
op	14:29	0:0	8	=
water	14:31	0:0	8	8
water	14:32	0:0	8	;
water	15:12	0:0	8	pm
op	15:14	0:0	8	->
water	15:16	0:0	8	buffer_position
op	15:32	0:0	8	=
water	15:34	0:0	8	0
water	15:35	0:0	8	;
if	16:12	17:70	8	(memcmp (pm -> buffer ,sign ,8 ) != 0)
cond	16:16	16:47	9	memcmp (pm -> buffer ,sign ,8 ) != 0
call	16:16	16:42	10	memcmp
arg	16:23	16:33	11	pm->buffer
water	16:23	0:0	12	pm
op	16:25	0:0	12	->
water	16:27	0:0	12	buffer
arg	16:35	16:39	11	sign
water	16:35	0:0	12	sign
arg	16:41	16:42	11	8
water	16:41	0:0	12	8
op	16:44	0:0	10	!=
water	16:47	0:0	10	0
stmts	17:15	17:70	9	
call	17:15	17:69	10	png_error
arg	17:25	17:39	11	pm->this.pread
water	17:25	0:0	12	pm
op	17:27	0:0	12	->
water	17:29	0:0	12	this
op	17:33	0:0	12	.
water	17:34	0:0	12	pread
arg	17:41	17:69	11	"invalid PNG file signature"
water	17:41	0:0	12	"invalid PNG file signature"
water	17:70	0:0	10	;
water	18:12	0:0	8	pm
op	18:14	0:0	8	->
water	18:16	0:0	8	state
op	18:22	0:0	8	=
water	18:24	0:0	8	modifier_signature
water	18:42	0:0	8	;
break	19:12	19:17	8	
label	20:9	20:32	8	case modifier_signature :
call	21:12	21:55	8	store_read_imp
arg	21:27	21:36	9	&pm->this
op	21:27	0:0	10	&
water	21:28	0:0	10	pm
op	21:30	0:0	10	->
water	21:32	0:0	10	this
arg	21:38	21:48	9	pm->buffer
water	21:38	0:0	10	pm
op	21:40	0:0	10	->
water	21:42	0:0	10	buffer
arg	21:50	21:55	9	13+12
water	21:50	0:0	10	13
op	21:52	0:0	10	+
water	21:53	0:0	10	12
water	21:56	0:0	8	;
water	22:12	0:0	8	pm
op	22:14	0:0	8	->
water	22:16	0:0	8	buffer_count
op	22:29	0:0	8	=
water	22:31	0:0	8	13
op	22:33	0:0	8	+
water	22:34	0:0	8	12
water	22:36	0:0	8	;
water	23:12	0:0	8	pm
op	23:14	0:0	8	->
water	23:16	0:0	8	buffer_position
op	23:32	0:0	8	=
water	23:34	0:0	8	0
water	23:35	0:0	8	;
if	24:12	26:56	8	(png_get_uint_32 (pm -> buffer ) != 13 ||png_get_uint_32 (pm -> buffer + 4 ) != CHUNK_IHDR)
cond	24:16	25:49	9	png_get_uint_32 (pm -> buffer ) != 13 ||png_get_uint_32 (pm -> buffer + 4 ) != CHUNK_IHDR
call	24:16	24:42	10	png_get_uint_32
arg	24:32	24:42	11	pm->buffer
water	24:32	0:0	12	pm
op	24:34	0:0	12	->
water	24:36	0:0	12	buffer
op	24:44	0:0	10	!=
water	24:47	0:0	10	13
op	24:50	0:0	10	||
call	25:16	25:44	10	png_get_uint_32
arg	25:32	25:44	11	pm->buffer+4
water	25:32	0:0	12	pm
op	25:34	0:0	12	->
water	25:36	0:0	12	buffer
op	25:42	0:0	12	+
water	25:43	0:0	12	4
op	25:46	0:0	10	!=
water	25:49	0:0	10	CHUNK_IHDR
stmts	26:15	26:56	9	
call	26:15	26:55	10	png_error
arg	26:25	26:39	11	pm->this.pread
water	26:25	0:0	12	pm
op	26:27	0:0	12	->
water	26:29	0:0	12	this
op	26:33	0:0	12	.
water	26:34	0:0	12	pread
arg	26:41	26:55	11	"invalid IHDR"
water	26:41	0:0	12	"invalid IHDR"
water	26:56	0:0	10	;
water	28:12	0:0	8	mod
op	28:16	0:0	8	=
water	28:18	0:0	8	pm
op	28:20	0:0	8	->
water	28:22	0:0	8	modifications
water	28:35	0:0	8	;
while	29:12	39:12	8	(mod != NULL)
cond	29:19	29:26	9	mod != NULL
water	29:19	0:0	10	mod
op	29:23	0:0	10	!=
water	29:26	0:0	10	NULL
stmts	30:12	39:12	9	
water	30:12	0:0	10	{
if	31:15	36:18	10	(mod -> chunk == CHUNK_IHDR && mod -> modify_fn &&( * mod -> modify_fn ) (pm ,mod ,0 ))
cond	31:19	32:47	11	mod -> chunk == CHUNK_IHDR && mod -> modify_fn &&( * mod -> modify_fn ) (pm ,mod ,0 )
water	31:19	0:0	12	mod
op	31:22	0:0	12	->
water	31:24	0:0	12	chunk
op	31:30	0:0	12	==
water	31:33	0:0	12	CHUNK_IHDR
op	31:44	0:0	12	&&
water	31:47	0:0	12	mod
op	31:50	0:0	12	->
water	31:52	0:0	12	modify_fn
op	31:62	0:0	12	&&
call	32:19	32:47	12	(*mod->modify_fn)
arg	32:37	32:39	13	pm
water	32:37	0:0	14	pm
arg	32:41	32:44	13	mod
water	32:41	0:0	14	mod
arg	32:46	32:47	13	0
water	32:46	0:0	14	0
stmts	33:18	36:18	11	
water	33:18	0:0	12	{
water	34:18	0:0	12	mod
op	34:21	0:0	12	->
water	34:23	0:0	12	modified
op	34:32	0:0	12	=
water	34:34	0:0	12	1
water	34:35	0:0	12	;
call	35:18	35:39	12	modifier_setbuffer
arg	35:37	35:39	13	pm
water	35:37	0:0	14	pm
water	35:40	0:0	12	;
water	36:18	0:0	12	}
water	38:15	0:0	10	mod
op	38:19	0:0	10	=
water	38:21	0:0	10	mod
op	38:24	0:0	10	->
water	38:26	0:0	10	next
water	38:30	0:0	10	;
water	39:12	0:0	10	}
water	41:12	0:0	8	pm
op	41:14	0:0	8	->
water	41:16	0:0	8	bit_depth
op	41:26	0:0	8	=
water	41:28	0:0	8	pm
op	41:30	0:0	8	->
water	41:32	0:0	8	buffer
op	41:38	0:0	8	[
water	41:39	0:0	8	8
op	41:40	0:0	8	+
water	41:41	0:0	8	8
op	41:42	0:0	8	]
water	41:43	0:0	8	;
water	42:12	0:0	8	pm
op	42:14	0:0	8	->
water	42:16	0:0	8	colour_type
op	42:28	0:0	8	=
water	42:30	0:0	8	pm
op	42:32	0:0	8	->
water	42:34	0:0	8	buffer
op	42:40	0:0	8	[
water	42:41	0:0	8	8
op	42:42	0:0	8	+
water	42:43	0:0	8	8
op	42:44	0:0	8	+
water	42:45	0:0	8	1
op	42:46	0:0	8	]
water	42:47	0:0	8	;
water	43:12	0:0	8	pm
op	43:14	0:0	8	->
water	43:16	0:0	8	state
op	43:22	0:0	8	=
water	43:24	0:0	8	modifier_IHDR
water	43:37	0:0	8	;
water	44:12	0:0	8	pm
op	44:14	0:0	8	->
water	44:16	0:0	8	flush
op	44:22	0:0	8	=
water	44:24	0:0	8	0
water	44:25	0:0	8	;
break	45:12	45:17	8	
label	46:9	46:27	8	case modifier_IHDR :
label	47:9	47:16	8	default :
if	52:12	60:12	8	(( cb = pm -> flush ) > 0)
cond	52:16	52:35	9	( cb = pm -> flush ) > 0
water	52:16	0:0	10	(
water	52:17	0:0	10	cb
op	52:20	0:0	10	=
water	52:22	0:0	10	pm
op	52:24	0:0	10	->
water	52:26	0:0	10	flush
water	52:31	0:0	10	)
op	52:33	0:0	10	>
water	52:35	0:0	10	0
stmts	53:12	60:12	9	
water	53:12	0:0	10	{
if	54:15	54:35	10	(cb > st)
cond	54:19	54:24	11	cb > st
water	54:19	0:0	12	cb
op	54:22	0:0	12	>
water	54:24	0:0	12	st
stmts	54:28	54:35	11	
water	54:28	0:0	12	cb
op	54:31	0:0	12	=
water	54:33	0:0	12	st
water	54:35	0:0	12	;
water	55:15	0:0	10	pm
op	55:17	0:0	10	->
water	55:19	0:0	10	flush
op	55:25	0:0	10	-=
water	55:28	0:0	10	cb
water	55:30	0:0	10	;
call	56:15	56:47	10	store_read_imp
arg	56:30	56:39	11	&pm->this
op	56:30	0:0	12	&
water	56:31	0:0	12	pm
op	56:33	0:0	12	->
water	56:35	0:0	12	this
arg	56:41	56:43	11	pb
water	56:41	0:0	12	pb
arg	56:45	56:47	11	cb
water	56:45	0:0	12	cb
water	56:48	0:0	10	;
water	57:15	0:0	10	pb
op	57:18	0:0	10	+=
water	57:21	0:0	10	cb
water	57:23	0:0	10	;
water	58:15	0:0	10	st
op	58:18	0:0	10	-=
water	58:21	0:0	10	cb
water	58:23	0:0	10	;
if	59:15	59:34	10	(st == 0)
cond	59:19	59:25	11	st == 0
water	59:19	0:0	12	st
op	59:22	0:0	12	==
water	59:25	0:0	12	0
stmts	59:28	59:34	11	
return	59:28	59:34	12	
water	60:12	0:0	10	}
if	64:12	70:12	8	(pm -> pending_chunk != 0)
cond	64:16	64:37	9	pm -> pending_chunk != 0
water	64:16	0:0	10	pm
op	64:18	0:0	10	->
water	64:20	0:0	10	pending_chunk
op	64:34	0:0	10	!=
water	64:37	0:0	10	0
stmts	65:12	70:12	9	
water	65:12	0:0	10	{
call	66:15	66:59	10	png_save_uint_32
arg	66:32	66:42	11	pm->buffer
water	66:32	0:0	12	pm
op	66:34	0:0	12	->
water	66:36	0:0	12	buffer
arg	66:44	66:59	11	pm->pending_len
water	66:44	0:0	12	pm
op	66:46	0:0	12	->
water	66:48	0:0	12	pending_len
water	66:60	0:0	10	;
call	67:15	67:63	10	png_save_uint_32
arg	67:32	67:44	11	pm->buffer+4
water	67:32	0:0	12	pm
op	67:34	0:0	12	->
water	67:36	0:0	12	buffer
op	67:42	0:0	12	+
water	67:43	0:0	12	4
arg	67:46	67:63	11	pm->pending_chunk
water	67:46	0:0	12	pm
op	67:48	0:0	12	->
water	67:50	0:0	12	pending_chunk
water	67:64	0:0	10	;
water	68:15	0:0	10	pm
op	68:17	0:0	10	->
water	68:19	0:0	10	pending_len
op	68:31	0:0	10	=
water	68:33	0:0	10	0
water	68:34	0:0	10	;
water	69:15	0:0	10	pm
op	69:17	0:0	10	->
water	69:19	0:0	10	pending_chunk
op	69:33	0:0	10	=
water	69:35	0:0	10	0
water	69:36	0:0	10	;
water	70:12	0:0	10	}
else	71:12	72:55	8
stmts	72:15	72:55	9	
call	72:15	72:54	10	store_read_imp
arg	72:30	72:39	11	&pm->this
op	72:30	0:0	12	&
water	72:31	0:0	12	pm
op	72:33	0:0	12	->
water	72:35	0:0	12	this
arg	72:41	72:51	11	pm->buffer
water	72:41	0:0	12	pm
op	72:43	0:0	12	->
water	72:45	0:0	12	buffer
arg	72:53	72:54	11	8
water	72:53	0:0	12	8
water	72:55	0:0	10	;
water	73:12	0:0	8	pm
op	73:14	0:0	8	->
water	73:16	0:0	8	buffer_count
op	73:29	0:0	8	=
water	73:31	0:0	8	8
water	73:32	0:0	8	;
water	74:12	0:0	8	pm
op	74:14	0:0	8	->
water	74:16	0:0	8	buffer_position
op	74:32	0:0	8	=
water	74:34	0:0	8	0
water	74:35	0:0	8	;
water	76:12	0:0	8	len
op	76:16	0:0	8	=
call	76:18	76:44	8	png_get_uint_32
arg	76:34	76:44	9	pm->buffer
water	76:34	0:0	10	pm
op	76:36	0:0	10	->
water	76:38	0:0	10	buffer
water	76:45	0:0	8	;
water	77:12	0:0	8	chunk
op	77:18	0:0	8	=
call	77:20	77:48	8	png_get_uint_32
arg	77:36	77:48	9	pm->buffer+4
water	77:36	0:0	10	pm
op	77:38	0:0	10	->
water	77:40	0:0	10	buffer
op	77:46	0:0	10	+
water	77:47	0:0	10	4
water	77:49	0:0	8	;
if	81:12	121:12	8	(chunk == CHUNK_PLTE || chunk == CHUNK_IDAT || chunk == CHUNK_IEND)
cond	81:16	82:25	9	chunk == CHUNK_PLTE || chunk == CHUNK_IDAT || chunk == CHUNK_IEND
water	81:16	0:0	10	chunk
op	81:22	0:0	10	==
water	81:25	0:0	10	CHUNK_PLTE
op	81:36	0:0	10	||
water	81:39	0:0	10	chunk
op	81:45	0:0	10	==
water	81:48	0:0	10	CHUNK_IDAT
op	81:59	0:0	10	||
water	82:16	0:0	10	chunk
op	82:22	0:0	10	==
water	82:25	0:0	10	CHUNK_IEND
stmts	83:12	121:12	9	
water	83:12	0:0	10	{
water	84:15	0:0	10	mod
op	84:19	0:0	10	=
water	84:21	0:0	10	pm
op	84:23	0:0	10	->
water	84:25	0:0	10	modifications
water	84:38	0:0	10	;
while	85:15	114:15	10	(mod != NULL)
cond	85:22	85:29	11	mod != NULL
water	85:22	0:0	12	mod
op	85:26	0:0	12	!=
water	85:29	0:0	12	NULL
stmts	86:15	114:15	11	
water	86:15	0:0	12	{
if	87:18	112:18	12	(( mod -> add == chunk || ( mod -> add == CHUNK_PLTE && chunk == CHUNK_IDAT ) ) && mod -> modify_fn != NULL && ! mod -> modified && ! mod -> added)
cond	87:22	89:72	13	( mod -> add == chunk || ( mod -> add == CHUNK_PLTE && chunk == CHUNK_IDAT ) ) && mod -> modify_fn != NULL && ! mod -> modified && ! mod -> added
water	87:22	0:0	14	(
water	87:23	0:0	14	mod
op	87:26	0:0	14	->
water	87:28	0:0	14	add
op	87:32	0:0	14	==
water	87:35	0:0	14	chunk
op	87:41	0:0	14	||
water	88:22	0:0	14	(
water	88:23	0:0	14	mod
op	88:26	0:0	14	->
water	88:28	0:0	14	add
op	88:32	0:0	14	==
water	88:35	0:0	14	CHUNK_PLTE
op	88:46	0:0	14	&&
water	88:49	0:0	14	chunk
op	88:55	0:0	14	==
water	88:58	0:0	14	CHUNK_IDAT
water	88:68	0:0	14	)
water	88:69	0:0	14	)
op	88:71	0:0	14	&&
water	89:22	0:0	14	mod
op	89:25	0:0	14	->
water	89:27	0:0	14	modify_fn
op	89:37	0:0	14	!=
water	89:40	0:0	14	NULL
op	89:45	0:0	14	&&
op	89:48	0:0	14	!
water	89:49	0:0	14	mod
op	89:52	0:0	14	->
water	89:54	0:0	14	modified
op	89:63	0:0	14	&&
op	89:66	0:0	14	!
water	89:67	0:0	14	mod
op	89:70	0:0	14	->
water	89:72	0:0	14	added
stmts	90:18	112:18	13	
water	90:18	0:0	14	{
water	94:21	0:0	14	mod
op	94:24	0:0	14	->
water	94:26	0:0	14	added
op	94:32	0:0	14	=
water	94:34	0:0	14	1
water	94:35	0:0	14	;
if	95:21	111:21	14	(( * mod -> modify_fn ) (pm ,mod ,1 ))
cond	95:25	95:54	15	( * mod -> modify_fn ) (pm ,mod ,1 )
call	95:25	95:54	16	(*mod->modify_fn)
arg	95:43	95:45	17	pm
water	95:43	0:0	18	pm
arg	95:47	95:50	17	mod
water	95:47	0:0	18	mod
arg	95:52	95:54	17	1
water	95:52	0:0	18	1
stmts	96:21	111:21	15	
water	96:21	0:0	16	{
if	98:24	99:49	16	(pm -> buffer_count > 0)
cond	98:28	98:47	17	pm -> buffer_count > 0
water	98:28	0:0	18	pm
op	98:30	0:0	18	->
water	98:32	0:0	18	buffer_count
op	98:45	0:0	18	>
water	98:47	0:0	18	0
stmts	99:27	99:49	17	
call	99:27	99:48	18	modifier_setbuffer
arg	99:46	99:48	19	pm
water	99:46	0:0	20	pm
water	99:49	0:0	18	;
else	100:24	104:27	16
stmts	101:27	104:27	17	
water	101:27	0:0	18	{
water	102:27	0:0	18	pm
op	102:29	0:0	18	->
water	102:31	0:0	18	buffer_position
op	102:47	0:0	18	=
water	102:49	0:0	18	0
water	102:50	0:0	18	;
water	103:27	0:0	18	mod
op	103:30	0:0	18	->
water	103:32	0:0	18	removed
op	103:40	0:0	18	=
water	103:42	0:0	18	1
water	103:43	0:0	18	;
water	104:27	0:0	18	}
water	108:24	0:0	16	pm
op	108:26	0:0	16	->
water	108:28	0:0	16	pending_len
op	108:40	0:0	16	=
water	108:42	0:0	16	len
water	108:45	0:0	16	;
water	109:24	0:0	16	pm
op	109:26	0:0	16	->
water	109:28	0:0	16	pending_chunk
op	109:42	0:0	16	=
water	109:44	0:0	16	chunk
water	109:49	0:0	16	;
break	110:24	110:29	16	
water	111:21	0:0	16	}
water	112:18	0:0	14	}
water	113:18	0:0	12	mod
op	113:22	0:0	12	=
water	113:24	0:0	12	mod
op	113:27	0:0	12	->
water	113:29	0:0	12	next
water	113:33	0:0	12	;
water	114:15	0:0	12	}
if	119:15	120:23	10	(mod != NULL)
cond	119:19	119:26	11	mod != NULL
water	119:19	0:0	12	mod
op	119:23	0:0	12	!=
water	119:26	0:0	12	NULL
stmts	120:18	120:23	11	
break	120:18	120:23	12	
water	121:12	0:0	10	}
if	126:12	158:12	8	(len + 12 <= sizeof pm -> buffer)
cond	126:16	126:37	9	len + 12 <= sizeof pm -> buffer
water	126:16	0:0	10	len
op	126:19	0:0	10	+
water	126:20	0:0	10	12
op	126:23	0:0	10	<=
op	126:26	0:0	10	sizeof
water	126:33	0:0	10	pm
op	126:35	0:0	10	->
water	126:37	0:0	10	buffer
stmts	127:12	158:12	9	
water	127:12	0:0	10	{
call	128:15	129:42	10	store_read_imp
arg	128:30	128:39	11	&pm->this
op	128:30	0:0	12	&
water	128:31	0:0	12	pm
op	128:33	0:0	12	->
water	128:35	0:0	12	this
arg	128:41	128:68	11	pm->buffer+pm->buffer_count
water	128:41	0:0	12	pm
op	128:43	0:0	12	->
water	128:45	0:0	12	buffer
op	128:51	0:0	12	+
water	128:52	0:0	12	pm
op	128:54	0:0	12	->
water	128:56	0:0	12	buffer_count
arg	129:19	129:42	11	len+12-pm->buffer_count
water	129:19	0:0	12	len
op	129:22	0:0	12	+
water	129:23	0:0	12	12
op	129:25	0:0	12	-
water	129:26	0:0	12	pm
op	129:28	0:0	12	->
water	129:30	0:0	12	buffer_count
water	129:43	0:0	10	;
water	130:15	0:0	10	pm
op	130:17	0:0	10	->
water	130:19	0:0	10	buffer_count
op	130:32	0:0	10	=
water	130:34	0:0	10	len
op	130:37	0:0	10	+
water	130:38	0:0	10	12
water	130:40	0:0	10	;
water	132:15	0:0	10	mod
op	132:19	0:0	10	=
water	132:21	0:0	10	pm
op	132:23	0:0	10	->
water	132:25	0:0	10	modifications
water	132:38	0:0	10	;
while	133:15	157:15	10	(mod != NULL)
cond	133:22	133:29	11	mod != NULL
water	133:22	0:0	12	mod
op	133:26	0:0	12	!=
water	133:29	0:0	12	NULL
stmts	134:15	157:15	11	
water	134:15	0:0	12	{
if	135:18	155:18	12	(mod -> chunk == chunk)
cond	135:22	135:36	13	mod -> chunk == chunk
water	135:22	0:0	14	mod
op	135:25	0:0	14	->
water	135:27	0:0	14	chunk
op	135:33	0:0	14	==
water	135:36	0:0	14	chunk
stmts	136:18	155:18	13	
water	136:18	0:0	14	{
if	137:21	143:21	14	(mod -> modify_fn == NULL)
cond	137:25	137:43	15	mod -> modify_fn == NULL
water	137:25	0:0	16	mod
op	137:28	0:0	16	->
water	137:30	0:0	16	modify_fn
op	137:40	0:0	16	==
water	137:43	0:0	16	NULL
stmts	138:21	143:21	15	
water	138:21	0:0	16	{
water	140:24	0:0	16	pm
op	140:26	0:0	16	->
water	140:28	0:0	16	buffer_count
op	140:41	0:0	16	=
water	140:43	0:0	16	pm
op	140:45	0:0	16	->
water	140:47	0:0	16	buffer_position
op	140:63	0:0	16	=
water	140:65	0:0	16	0
water	140:66	0:0	16	;
water	141:24	0:0	16	mod
op	141:27	0:0	16	->
water	141:29	0:0	16	removed
op	141:37	0:0	16	=
water	141:39	0:0	16	1
water	141:40	0:0	16	;
break	142:24	142:29	16	
water	143:21	0:0	16	}
else	144:21	154:21	14
stmts	144:26	154:21	15	
if	144:26	154:21	16	(( * mod -> modify_fn ) (pm ,mod ,0 ))
cond	144:30	144:58	17	( * mod -> modify_fn ) (pm ,mod ,0 )
call	144:30	144:58	18	(*mod->modify_fn)
arg	144:48	144:50	19	pm
water	144:48	0:0	20	pm
arg	144:52	144:55	19	mod
water	144:52	0:0	20	mod
arg	144:57	144:58	19	0
water	144:57	0:0	20	0
stmts	145:21	154:21	17	
water	145:21	0:0	18	{
water	146:24	0:0	18	mod
op	146:27	0:0	18	->
water	146:29	0:0	18	modified
op	146:38	0:0	18	=
water	146:40	0:0	18	1
water	146:41	0:0	18	;
if	148:24	152:24	18	(pm -> buffer_count == 0)
cond	148:28	148:48	19	pm -> buffer_count == 0
water	148:28	0:0	20	pm
op	148:30	0:0	20	->
water	148:32	0:0	20	buffer_count
op	148:45	0:0	20	==
water	148:48	0:0	20	0
stmts	149:24	152:24	19	
water	149:24	0:0	20	{
water	150:27	0:0	20	pm
op	150:29	0:0	20	->
water	150:31	0:0	20	buffer_position
op	150:47	0:0	20	=
water	150:49	0:0	20	0
water	150:50	0:0	20	;
break	151:27	151:32	20	
water	152:24	0:0	20	}
call	153:24	153:45	18	modifier_setbuffer
arg	153:43	153:45	19	pm
water	153:43	0:0	20	pm
water	153:46	0:0	18	;
water	154:21	0:0	18	}
water	155:18	0:0	14	}
water	156:18	0:0	12	mod
op	156:22	0:0	12	=
water	156:24	0:0	12	mod
op	156:27	0:0	12	->
water	156:29	0:0	12	next
water	156:33	0:0	12	;
water	157:15	0:0	12	}
water	158:12	0:0	10	}
else	159:12	160:52	8
stmts	160:15	160:52	9	
water	160:15	0:0	10	pm
op	160:17	0:0	10	->
water	160:19	0:0	10	flush
op	160:25	0:0	10	=
water	160:27	0:0	10	len
op	160:30	0:0	10	+
water	160:31	0:0	10	12
op	160:34	0:0	10	-
water	160:36	0:0	10	pm
op	160:38	0:0	10	->
water	160:40	0:0	10	buffer_count
water	160:52	0:0	10	;
break	162:12	162:17	8	
water	163:6	0:0	8	}
water	167:6	0:0	4	cb
op	167:9	0:0	4	=
water	167:11	0:0	4	pm
op	167:13	0:0	4	->
water	167:15	0:0	4	buffer_count
op	167:28	0:0	4	-
water	167:30	0:0	4	pm
op	167:32	0:0	4	->
water	167:34	0:0	4	buffer_position
water	167:49	0:0	4	;
if	168:6	169:16	4	(cb > st)
cond	168:10	168:15	5	cb > st
water	168:10	0:0	6	cb
op	168:13	0:0	6	>
water	168:15	0:0	6	st
stmts	169:9	169:16	5	
water	169:9	0:0	6	cb
op	169:12	0:0	6	=
water	169:14	0:0	6	st
water	169:16	0:0	6	;
call	170:6	170:53	4	memcpy
arg	170:13	170:15	5	pb
water	170:13	0:0	6	pb
arg	170:17	170:49	5	pm->buffer+pm->buffer_position
water	170:17	0:0	6	pm
op	170:19	0:0	6	->
water	170:21	0:0	6	buffer
op	170:28	0:0	6	+
water	170:30	0:0	6	pm
op	170:32	0:0	6	->
water	170:34	0:0	6	buffer_position
arg	170:51	170:53	5	cb
water	170:51	0:0	6	cb
water	170:54	0:0	4	;
water	171:6	0:0	4	st
op	171:9	0:0	4	-=
water	171:12	0:0	4	cb
water	171:14	0:0	4	;
water	172:6	0:0	4	pb
op	172:9	0:0	4	+=
water	172:12	0:0	4	cb
water	172:14	0:0	4	;
water	173:6	0:0	4	pm
op	173:8	0:0	4	->
water	173:10	0:0	4	buffer_position
op	173:26	0:0	4	+=
water	173:29	0:0	4	cb
water	173:31	0:0	4	;
water	174:3	0:0	4	}
