func	1:5	91:0	0	PNGCBAPI	count_zero_samples
params	2:18	0:0	1	
param	2:19	2:38	2	png_structp	png_ptr
param	2:40	2:62	2	png_row_infop	row_info
param	2:64	2:78	2	png_bytep	data
stmnts	0:0	90:4	1	
decl	4:3	4:22	2	png_bytep	dp
op	4:16	0:0	2	=
water	4:18	0:0	2	data
if	5:3	6:12	2	(png_ptr == NULL)
cond	5:7	5:18	3	png_ptr == NULL
water	5:7	0:0	4	png_ptr
op	5:15	0:0	4	==
water	5:18	0:0	4	NULL
stmts	6:6	6:12	3	
return	6:6	6:12	4	
if	16:4	62:4	2	(row_info -> color_type == 0 || row_info -> color_type == 3)
cond	16:8	16:61	3	row_info -> color_type == 0 || row_info -> color_type == 3
water	16:8	0:0	4	row_info
op	16:16	0:0	4	->
water	16:18	0:0	4	color_type
op	16:29	0:0	4	==
water	16:32	0:0	4	0
op	16:34	0:0	4	||
water	16:37	0:0	4	row_info
op	16:45	0:0	4	->
water	16:47	0:0	4	color_type
op	16:58	0:0	4	==
water	16:61	0:0	4	3
stmts	17:4	62:4	3	
water	17:4	0:0	4	{
decl	18:7	18:18	4	int	pos
op	18:15	0:0	4	=
water	18:17	0:0	4	0
decl	19:7	19:27	4	png_uint_32	n
water	19:20	0:0	4	,
decl	19:7	19:27	4	png_uint_32	nstop
for	20:7	61:7	4	(n = 0 , nstop = row_info -> width ;n < nstop;n ++)
forinit	20:12	20:40	5	n = 0 , nstop = row_info -> width ;
water	20:12	0:0	6	n
op	20:14	0:0	6	=
water	20:16	0:0	6	0
water	20:17	0:0	6	,
water	20:19	0:0	6	nstop
op	20:24	0:0	6	=
water	20:25	0:0	6	row_info
op	20:33	0:0	6	->
water	20:35	0:0	6	width
water	20:40	0:0	6	;
cond	20:42	20:44	5	n < nstop
water	20:42	0:0	6	n
op	20:43	0:0	6	<
water	20:44	0:0	6	nstop
forexpr	20:51	20:52	5	n ++
water	20:51	0:0	6	n
op	20:52	0:0	6	++
stmts	21:7	61:7	5	
water	21:7	0:0	6	{
if	22:10	31:10	6	(row_info -> bit_depth == 1)
cond	22:14	22:37	7	row_info -> bit_depth == 1
water	22:14	0:0	8	row_info
op	22:22	0:0	8	->
water	22:24	0:0	8	bit_depth
op	22:34	0:0	8	==
water	22:37	0:0	8	1
stmts	23:10	31:10	7	
water	23:10	0:0	8	{
if	24:13	25:30	8	(( ( * dp << pos ++ ) & 0 x80 ) == 0)
cond	24:17	24:45	9	( ( * dp << pos ++ ) & 0 x80 ) == 0
water	24:17	0:0	10	(
water	24:18	0:0	10	(
op	24:19	0:0	10	*
water	24:20	0:0	10	dp
op	24:23	0:0	10	<<
water	24:26	0:0	10	pos
op	24:29	0:0	10	++
water	24:32	0:0	10	)
op	24:34	0:0	10	&
water	24:36	0:0	10	0
water	24:37	0:0	10	x80
water	24:40	0:0	10	)
op	24:42	0:0	10	==
water	24:45	0:0	10	0
stmts	25:16	25:30	9	
water	25:16	0:0	10	zero_samples
op	25:28	0:0	10	++
water	25:30	0:0	10	;
if	26:13	30:13	8	(pos == 8)
cond	26:17	26:24	9	pos == 8
water	26:17	0:0	10	pos
op	26:21	0:0	10	==
water	26:24	0:0	10	8
stmts	27:13	30:13	9	
water	27:13	0:0	10	{
water	28:16	0:0	10	pos
op	28:20	0:0	10	=
water	28:22	0:0	10	0
water	28:23	0:0	10	;
water	29:16	0:0	10	dp
op	29:18	0:0	10	++
water	29:20	0:0	10	;
water	30:13	0:0	10	}
water	31:10	0:0	8	}
if	32:10	41:10	6	(row_info -> bit_depth == 2)
cond	32:14	32:37	7	row_info -> bit_depth == 2
water	32:14	0:0	8	row_info
op	32:22	0:0	8	->
water	32:24	0:0	8	bit_depth
op	32:34	0:0	8	==
water	32:37	0:0	8	2
stmts	33:10	41:10	7	
water	33:10	0:0	8	{
if	34:13	35:30	8	(( ( * dp << ( pos += 2 ) ) & 0 xc0 ) == 0)
cond	34:17	34:47	9	( ( * dp << ( pos += 2 ) ) & 0 xc0 ) == 0
water	34:17	0:0	10	(
water	34:18	0:0	10	(
op	34:19	0:0	10	*
water	34:20	0:0	10	dp
op	34:23	0:0	10	<<
water	34:26	0:0	10	(
water	34:27	0:0	10	pos
op	34:30	0:0	10	+=
water	34:32	0:0	10	2
water	34:33	0:0	10	)
water	34:34	0:0	10	)
op	34:36	0:0	10	&
water	34:38	0:0	10	0
water	34:39	0:0	10	xc0
water	34:42	0:0	10	)
op	34:44	0:0	10	==
water	34:47	0:0	10	0
stmts	35:16	35:30	9	
water	35:16	0:0	10	zero_samples
op	35:28	0:0	10	++
water	35:30	0:0	10	;
if	36:13	40:13	8	(pos == 8)
cond	36:17	36:24	9	pos == 8
water	36:17	0:0	10	pos
op	36:21	0:0	10	==
water	36:24	0:0	10	8
stmts	37:13	40:13	9	
water	37:13	0:0	10	{
water	38:16	0:0	10	pos
op	38:20	0:0	10	=
water	38:22	0:0	10	0
water	38:23	0:0	10	;
water	39:16	0:0	10	dp
op	39:18	0:0	10	++
water	39:20	0:0	10	;
water	40:13	0:0	10	}
water	41:10	0:0	8	}
if	42:10	51:10	6	(row_info -> bit_depth == 4)
cond	42:14	42:37	7	row_info -> bit_depth == 4
water	42:14	0:0	8	row_info
op	42:22	0:0	8	->
water	42:24	0:0	8	bit_depth
op	42:34	0:0	8	==
water	42:37	0:0	8	4
stmts	43:10	51:10	7	
water	43:10	0:0	8	{
if	44:13	45:30	8	(( ( * dp << ( pos += 4 ) ) & 0 xf0 ) == 0)
cond	44:17	44:47	9	( ( * dp << ( pos += 4 ) ) & 0 xf0 ) == 0
water	44:17	0:0	10	(
water	44:18	0:0	10	(
op	44:19	0:0	10	*
water	44:20	0:0	10	dp
op	44:23	0:0	10	<<
water	44:26	0:0	10	(
water	44:27	0:0	10	pos
op	44:30	0:0	10	+=
water	44:32	0:0	10	4
water	44:33	0:0	10	)
water	44:34	0:0	10	)
op	44:36	0:0	10	&
water	44:38	0:0	10	0
water	44:39	0:0	10	xf0
water	44:42	0:0	10	)
op	44:44	0:0	10	==
water	44:47	0:0	10	0
stmts	45:16	45:30	9	
water	45:16	0:0	10	zero_samples
op	45:28	0:0	10	++
water	45:30	0:0	10	;
if	46:13	50:13	8	(pos == 8)
cond	46:17	46:24	9	pos == 8
water	46:17	0:0	10	pos
op	46:21	0:0	10	==
water	46:24	0:0	10	8
stmts	47:13	50:13	9	
water	47:13	0:0	10	{
water	48:16	0:0	10	pos
op	48:20	0:0	10	=
water	48:22	0:0	10	0
water	48:23	0:0	10	;
water	49:16	0:0	10	dp
op	49:18	0:0	10	++
water	49:20	0:0	10	;
water	50:13	0:0	10	}
water	51:10	0:0	8	}
if	52:10	54:30	6	(row_info -> bit_depth == 8)
cond	52:14	52:37	7	row_info -> bit_depth == 8
water	52:14	0:0	8	row_info
op	52:22	0:0	8	->
water	52:24	0:0	8	bit_depth
op	52:34	0:0	8	==
water	52:37	0:0	8	8
stmts	53:13	54:30	7	
if	53:13	54:30	8	(* dp ++ == 0)
cond	53:17	53:26	9	* dp ++ == 0
op	53:17	0:0	10	*
water	53:18	0:0	10	dp
op	53:20	0:0	10	++
op	53:23	0:0	10	==
water	53:26	0:0	10	0
stmts	54:16	54:30	9	
water	54:16	0:0	10	zero_samples
op	54:28	0:0	10	++
water	54:30	0:0	10	;
if	55:10	60:10	6	(row_info -> bit_depth == 16)
cond	55:14	55:37	7	row_info -> bit_depth == 16
water	55:14	0:0	8	row_info
op	55:22	0:0	8	->
water	55:24	0:0	8	bit_depth
op	55:34	0:0	8	==
water	55:37	0:0	8	16
stmts	56:10	60:10	7	
water	56:10	0:0	8	{
if	57:13	58:30	8	(( * dp | * ( dp + 1 ) ) == 0)
cond	57:17	57:36	9	( * dp | * ( dp + 1 ) ) == 0
water	57:17	0:0	10	(
op	57:18	0:0	10	*
water	57:19	0:0	10	dp
op	57:22	0:0	10	|
op	57:24	0:0	10	*
water	57:25	0:0	10	(
water	57:26	0:0	10	dp
op	57:28	0:0	10	+
water	57:29	0:0	10	1
water	57:30	0:0	10	)
water	57:31	0:0	10	)
op	57:33	0:0	10	==
water	57:36	0:0	10	0
stmts	58:16	58:30	9	
water	58:16	0:0	10	zero_samples
op	58:28	0:0	10	++
water	58:30	0:0	10	;
water	59:13	0:0	8	dp
op	59:15	0:0	8	+=
water	59:17	0:0	8	2
water	59:18	0:0	8	;
water	60:10	0:0	8	}
water	61:7	0:0	6	}
water	62:4	0:0	4	}
else	63:4	90:4	2
stmts	64:4	90:4	3	
water	64:4	0:0	4	{
decl	65:7	65:27	4	png_uint_32	n
water	65:20	0:0	4	,
decl	65:7	65:27	4	png_uint_32	nstop
decl	66:7	66:18	4	int	channel
decl	67:7	67:46	4	int	color_channels
op	67:26	0:0	4	=
water	67:28	0:0	4	row_info
op	67:36	0:0	4	->
water	67:38	0:0	4	channels
if	68:7	68:52	4	(row_info -> color_type > 3)
cond	68:11	68:34	5	row_info -> color_type > 3
water	68:11	0:0	6	row_info
op	68:19	0:0	6	->
water	68:21	0:0	6	color_type
op	68:32	0:0	6	>
water	68:34	0:0	6	3
stmts	68:36	68:52	5	
water	68:36	0:0	6	color_channels
op	68:50	0:0	6	--
water	68:52	0:0	6	;
for	69:7	89:7	4	(n = 0 , nstop = row_info -> width ;n < nstop;n ++)
forinit	69:12	69:40	5	n = 0 , nstop = row_info -> width ;
water	69:12	0:0	6	n
op	69:14	0:0	6	=
water	69:16	0:0	6	0
water	69:17	0:0	6	,
water	69:19	0:0	6	nstop
op	69:24	0:0	6	=
water	69:25	0:0	6	row_info
op	69:33	0:0	6	->
water	69:35	0:0	6	width
water	69:40	0:0	6	;
cond	69:42	69:44	5	n < nstop
water	69:42	0:0	6	n
op	69:43	0:0	6	<
water	69:44	0:0	6	nstop
forexpr	69:51	69:52	5	n ++
water	69:51	0:0	6	n
op	69:52	0:0	6	++
stmts	70:7	89:7	5	
water	70:7	0:0	6	{
for	71:10	82:10	6	(channel = 0 ;channel < color_channels;channel ++)
forinit	71:15	71:26	7	channel = 0 ;
water	71:15	0:0	8	channel
op	71:23	0:0	8	=
water	71:25	0:0	8	0
water	71:26	0:0	8	;
cond	71:28	71:38	7	channel < color_channels
water	71:28	0:0	8	channel
op	71:36	0:0	8	<
water	71:38	0:0	8	color_channels
forexpr	71:54	71:61	7	channel ++
water	71:54	0:0	8	channel
op	71:61	0:0	8	++
stmts	72:10	82:10	7	
water	72:10	0:0	8	{
if	73:13	75:33	8	(row_info -> bit_depth == 8)
cond	73:17	73:40	9	row_info -> bit_depth == 8
water	73:17	0:0	10	row_info
op	73:25	0:0	10	->
water	73:27	0:0	10	bit_depth
op	73:37	0:0	10	==
water	73:40	0:0	10	8
stmts	74:16	75:33	9	
if	74:16	75:33	10	(* dp ++ == 0)
cond	74:20	74:29	11	* dp ++ == 0
op	74:20	0:0	12	*
water	74:21	0:0	12	dp
op	74:23	0:0	12	++
op	74:26	0:0	12	==
water	74:29	0:0	12	0
stmts	75:19	75:33	11	
water	75:19	0:0	12	zero_samples
op	75:31	0:0	12	++
water	75:33	0:0	12	;
if	76:13	81:13	8	(row_info -> bit_depth == 16)
cond	76:17	76:40	9	row_info -> bit_depth == 16
water	76:17	0:0	10	row_info
op	76:25	0:0	10	->
water	76:27	0:0	10	bit_depth
op	76:37	0:0	10	==
water	76:40	0:0	10	16
stmts	77:13	81:13	9	
water	77:13	0:0	10	{
if	78:16	79:33	10	(( * dp | * ( dp + 1 ) ) == 0)
cond	78:20	78:39	11	( * dp | * ( dp + 1 ) ) == 0
water	78:20	0:0	12	(
op	78:21	0:0	12	*
water	78:22	0:0	12	dp
op	78:25	0:0	12	|
op	78:27	0:0	12	*
water	78:28	0:0	12	(
water	78:29	0:0	12	dp
op	78:31	0:0	12	+
water	78:32	0:0	12	1
water	78:33	0:0	12	)
water	78:34	0:0	12	)
op	78:36	0:0	12	==
water	78:39	0:0	12	0
stmts	79:19	79:33	11	
water	79:19	0:0	12	zero_samples
op	79:31	0:0	12	++
water	79:33	0:0	12	;
water	80:16	0:0	10	dp
op	80:18	0:0	10	+=
water	80:20	0:0	10	2
water	80:21	0:0	10	;
water	81:13	0:0	10	}
water	82:10	0:0	8	}
if	83:10	88:10	6	(row_info -> color_type > 3)
cond	83:14	83:37	7	row_info -> color_type > 3
water	83:14	0:0	8	row_info
op	83:22	0:0	8	->
water	83:24	0:0	8	color_type
op	83:35	0:0	8	>
water	83:37	0:0	8	3
stmts	84:10	88:10	7	
water	84:10	0:0	8	{
water	85:13	0:0	8	dp
op	85:15	0:0	8	++
water	85:17	0:0	8	;
if	86:13	87:20	8	(row_info -> bit_depth == 16)
cond	86:17	86:40	9	row_info -> bit_depth == 16
water	86:17	0:0	10	row_info
op	86:25	0:0	10	->
water	86:27	0:0	10	bit_depth
op	86:37	0:0	10	==
water	86:40	0:0	10	16
stmts	87:16	87:20	9	
water	87:16	0:0	10	dp
op	87:18	0:0	10	++
water	87:20	0:0	10	;
water	88:10	0:0	8	}
water	89:7	0:0	6	}
water	90:4	0:0	4	}
