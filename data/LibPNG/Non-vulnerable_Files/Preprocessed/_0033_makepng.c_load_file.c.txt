func	1:0	83:0	0	static size_t	load_file
params	2:9	0:0	1	
param	2:10	2:30	2	png_const_charp	name
param	2:32	2:49	2	png_bytepp	result
stmnts	0:0	82:11	1	
decl	4:3	4:23	2	FILE	*fp
op	4:12	0:0	2	=
call	4:14	4:22	3	tmpfile
if	5:3	78:3	2	(fp != NULL)
cond	5:7	5:13	3	fp != NULL
water	5:7	0:0	4	fp
op	5:10	0:0	4	!=
water	5:13	0:0	4	NULL
stmts	6:3	78:3	3	
water	6:3	0:0	4	{
decl	7:6	7:34	4	FILE	*ip
op	7:15	0:0	4	=
call	7:17	7:33	5	fopen
arg	7:23	7:27	6	name
water	7:23	0:0	7	name
arg	7:29	7:33	6	"rb"
water	7:29	0:0	7	"rb"
if	8:6	71:6	4	(ip != NULL)
cond	8:10	8:16	5	ip != NULL
water	8:10	0:0	6	ip
op	8:13	0:0	6	!=
water	8:16	0:0	6	NULL
stmts	9:6	71:6	5	
water	9:6	0:0	6	{
decl	10:9	10:25	6	size_t	total
op	10:22	0:0	6	=
water	10:24	0:0	6	0
decl	11:9	11:15	6	int	ch
for	12:9	18:9	6	(;;)
forinit	12:14	12:14	7	;
water	12:14	0:0	8	;
cond	0:0	0:0	7	
forexpr	0:0	0:0	7	
stmts	13:9	18:9	7	
water	13:9	0:0	8	{
water	14:12	0:0	8	ch
op	14:15	0:0	8	=
call	14:17	14:24	8	getc
arg	14:22	14:24	9	ip
water	14:22	0:0	10	ip
water	14:25	0:0	8	;
if	15:12	15:32	8	(ch == EOF)
cond	15:16	15:22	9	ch == EOF
water	15:16	0:0	10	ch
op	15:19	0:0	10	==
water	15:22	0:0	10	EOF
stmts	15:27	15:32	9	
break	15:27	15:32	10	
call	16:12	16:23	8	putc
arg	16:17	16:19	9	ch
water	16:17	0:0	10	ch
arg	16:21	16:23	9	fp
water	16:21	0:0	10	fp
water	16:24	0:0	8	;
op	17:12	0:0	8	++
water	17:14	0:0	8	total
water	17:19	0:0	8	;
water	18:9	0:0	8	}
if	19:9	24:9	6	(ferror (ip ))
cond	19:13	19:22	7	ferror (ip )
call	19:13	19:22	8	ferror
arg	19:20	19:22	9	ip
water	19:20	0:0	10	ip
stmts	20:9	24:9	7	
water	20:9	0:0	8	{
call	21:12	21:23	8	perror
arg	21:19	21:23	9	name
water	21:19	0:0	10	name
water	21:24	0:0	8	;
call	22:12	22:52	8	fprintf
arg	22:20	22:26	9	stderr
water	22:20	0:0	10	stderr
arg	22:28	22:46	9	"%s: read error\n"
water	22:28	0:0	10	"%s: read error\n"
arg	22:48	22:52	9	name
water	22:48	0:0	10	name
water	22:53	0:0	8	;
water	23:12	0:0	8	(
water	23:13	0:0	8	void
water	23:17	0:0	8	)
call	23:18	23:27	8	fclose
arg	23:25	23:27	9	ip
water	23:25	0:0	10	ip
water	23:28	0:0	8	;
water	24:9	0:0	8	}
else	25:9	70:9	6
stmts	26:9	70:9	7	
water	26:9	0:0	8	{
water	27:12	0:0	8	(
water	27:13	0:0	8	void
water	27:17	0:0	8	)
call	27:18	27:27	8	fclose
arg	27:25	27:27	9	ip
water	27:25	0:0	10	ip
water	27:28	0:0	8	;
if	28:12	32:12	8	(ferror (fp ))
cond	28:16	28:25	9	ferror (fp )
call	28:16	28:25	10	ferror
arg	28:23	28:25	11	fp
water	28:23	0:0	12	fp
stmts	29:12	32:12	9	
water	29:12	0:0	10	{
call	30:15	30:38	10	perror
arg	30:22	30:38	11	"temporary file"
water	30:22	0:0	12	"temporary file"
water	30:39	0:0	10	;
call	31:15	31:61	10	fprintf
arg	31:23	31:29	11	stderr
water	31:23	0:0	12	stderr
arg	31:31	31:61	11	"temporary file write error\n"
water	31:31	0:0	12	"temporary file write error\n"
water	31:62	0:0	10	;
water	32:12	0:0	10	}
else	33:12	69:12	8
stmts	34:12	69:12	9	
water	34:12	0:0	10	{
call	35:15	35:24	10	rewind
arg	35:22	35:24	11	fp
water	35:22	0:0	12	fp
water	35:25	0:0	10	;
if	36:15	66:15	10	(total > 0)
cond	36:19	36:27	11	total > 0
water	36:19	0:0	12	total
op	36:25	0:0	12	>
water	36:27	0:0	12	0
stmts	37:15	66:15	11	
water	37:15	0:0	12	{
decl	41:18	41:55	12	png_bytep	data
op	41:33	0:0	12	=
call	41:35	41:54	13	malloc
arg	41:42	41:54	14	(total+3)&~3
water	41:42	0:0	15	(
water	41:43	0:0	15	total
op	41:48	0:0	15	+
water	41:49	0:0	15	3
water	41:50	0:0	15	)
op	41:51	0:0	15	&
water	41:52	0:0	15	~3
if	42:18	63:18	12	(data != NULL)
cond	42:22	42:30	13	data != NULL
water	42:22	0:0	14	data
op	42:27	0:0	14	!=
water	42:30	0:0	14	NULL
stmts	43:18	63:18	13	
water	43:18	0:0	14	{
decl	44:21	44:40	14	size_t	new_size
op	44:37	0:0	14	=
water	44:39	0:0	14	0
for	45:21	50:21	14	(;;)
forinit	45:26	45:26	15	;
water	45:26	0:0	16	;
cond	0:0	0:0	15	
forexpr	0:0	0:0	15	
stmts	46:21	50:21	15	
water	46:21	0:0	16	{
water	47:24	0:0	16	ch
op	47:27	0:0	16	=
call	47:29	47:36	16	getc
arg	47:34	47:36	17	fp
water	47:34	0:0	18	fp
water	47:37	0:0	16	;
if	48:24	48:44	16	(ch == EOF)
cond	48:28	48:34	17	ch == EOF
water	48:28	0:0	18	ch
op	48:31	0:0	18	==
water	48:34	0:0	18	EOF
stmts	48:39	48:44	17	
break	48:39	48:44	18	
water	49:24	0:0	16	data
op	49:28	0:0	16	[
water	49:29	0:0	16	new_size
op	49:37	0:0	16	++
op	49:39	0:0	16	]
op	49:41	0:0	16	=
water	49:43	0:0	16	(
water	49:44	0:0	16	png_byte
water	49:52	0:0	16	)
water	49:53	0:0	16	ch
water	49:55	0:0	16	;
water	50:21	0:0	16	}
if	51:21	56:21	14	(ferror (fp ) || new_size != total)
cond	51:25	51:51	15	ferror (fp ) || new_size != total
call	51:25	51:34	16	ferror
arg	51:32	51:34	17	fp
water	51:32	0:0	18	fp
op	51:36	0:0	16	||
water	51:39	0:0	16	new_size
op	51:48	0:0	16	!=
water	51:51	0:0	16	total
stmts	52:21	56:21	15	
water	52:21	0:0	16	{
call	53:24	53:47	16	perror
arg	53:31	53:47	17	"temporary file"
water	53:31	0:0	18	"temporary file"
water	53:48	0:0	16	;
call	54:24	54:69	16	fprintf
arg	54:32	54:38	17	stderr
water	54:32	0:0	18	stderr
arg	54:40	54:69	17	"temporary file read error\n"
water	54:40	0:0	18	"temporary file read error\n"
water	54:70	0:0	16	;
call	55:24	55:33	16	free
arg	55:29	55:33	17	data
water	55:29	0:0	18	data
water	55:34	0:0	16	;
water	56:21	0:0	16	}
else	57:21	62:21	14
stmts	58:21	62:21	15	
water	58:21	0:0	16	{
water	59:24	0:0	16	(
water	59:25	0:0	16	void
water	59:29	0:0	16	)
call	59:30	59:39	16	fclose
arg	59:37	59:39	17	fp
water	59:37	0:0	18	fp
water	59:40	0:0	16	;
op	60:24	0:0	16	*
water	60:25	0:0	16	result
op	60:32	0:0	16	=
water	60:34	0:0	16	data
water	60:38	0:0	16	;
return	61:24	61:36	16	total
water	61:31	0:0	17	total
water	62:21	0:0	16	}
water	63:18	0:0	14	}
else	64:18	65:78	12
stmts	65:21	65:78	13	
call	65:21	65:77	14	fprintf
arg	65:29	65:35	15	stderr
water	65:29	0:0	16	stderr
arg	65:37	65:71	15	"%s: out of memory loading file\n"
water	65:37	0:0	16	"%s: out of memory loading file\n"
arg	65:73	65:77	15	name
water	65:73	0:0	16	name
water	65:78	0:0	14	;
water	66:15	0:0	12	}
else	67:15	68:59	10
stmts	68:18	68:59	11	
call	68:18	68:58	12	fprintf
arg	68:26	68:32	13	stderr
water	68:26	0:0	14	stderr
arg	68:34	68:52	13	"%s: empty file\n"
water	68:34	0:0	14	"%s: empty file\n"
arg	68:54	68:58	13	name
water	68:54	0:0	14	name
water	68:59	0:0	12	;
water	69:12	0:0	10	}
water	70:9	0:0	8	}
water	71:6	0:0	6	}
else	72:6	76:6	4
stmts	73:6	76:6	5	
water	73:6	0:0	6	{
call	74:9	74:20	6	perror
arg	74:16	74:20	7	name
water	74:16	0:0	8	name
water	74:21	0:0	6	;
call	75:9	75:50	6	fprintf
arg	75:17	75:23	7	stderr
water	75:17	0:0	8	stderr
arg	75:25	75:44	7	"%s: open failed\n"
water	75:25	0:0	8	"%s: open failed\n"
arg	75:46	75:50	7	name
water	75:46	0:0	8	name
water	75:51	0:0	6	;
water	76:6	0:0	6	}
call	77:6	77:15	4	fclose
arg	77:13	77:15	5	fp
water	77:13	0:0	6	fp
water	77:16	0:0	4	;
water	78:3	0:0	4	}
else	79:3	80:75	2
stmts	80:6	80:75	3	
call	80:6	80:74	4	fprintf
arg	80:14	80:20	5	stderr
water	80:14	0:0	6	stderr
arg	80:22	80:68	5	"makepng: %s: could not open temporary file\n"
water	80:22	0:0	6	"makepng: %s: could not open temporary file\n"
arg	80:70	80:74	5	name
water	80:70	0:0	6	name
water	80:75	0:0	4	;
call	81:3	81:9	2	exit
arg	81:8	81:9	3	1
water	81:8	0:0	4	1
water	81:10	0:0	2	;
return	82:3	82:11	2	0
water	82:10	0:0	3	0
