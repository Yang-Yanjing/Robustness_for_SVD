func	2:0	53:0	0	BOOL	DisplayImage
params	2:18	0:0	1	
param	2:19	2:28	2	HWND	hwnd
param	2:30	2:42	2	BYTE * *	ppDib
param	3:8	3:23	2	BYTE * *	ppDiData
param	3:25	3:38	2	int	cxWinSize
param	3:40	3:53	2	int	cyWinSize
param	4:8	4:21	2	BYTE *	pbImage
param	4:23	4:36	2	int	cxImgSize
param	4:38	4:51	2	int	cyImgSize
param	4:53	4:69	2	int	cImgChannels
param	5:8	5:23	2	BOOL	bStretched
stmnts	0:0	52:15	1	
decl	7:4	7:45	2	BYTE	*pDib
op	7:37	0:0	2	=
op	7:39	0:0	2	*
water	7:40	0:0	2	ppDib
decl	8:4	8:51	2	BYTE	*pDiData
op	8:40	0:0	2	=
op	8:42	0:0	2	*
water	8:43	0:0	2	ppDiData
decl	10:4	10:37	2	BITMAPINFOHEADER	*pbmih
decl	11:4	11:43	2	WORD	wDIRowBytes
decl	12:4	12:52	2	png_color	bkgBlack
op	12:41	0:0	2	=
water	12:43	0:0	2	{
water	12:44	0:0	2	0
water	12:45	0:0	2	,
water	12:47	0:0	2	0
water	12:48	0:0	2	,
water	12:50	0:0	2	0
water	12:51	0:0	2	}
decl	13:4	13:58	2	png_color	bkgGray
op	13:41	0:0	2	=
water	13:43	0:0	2	{
water	13:44	0:0	2	127
water	13:47	0:0	2	,
water	13:49	0:0	2	127
water	13:52	0:0	2	,
water	13:54	0:0	2	127
water	13:57	0:0	2	}
decl	14:4	14:58	2	png_color	bkgWhite
op	14:41	0:0	2	=
water	14:43	0:0	2	{
water	14:44	0:0	2	255
water	14:47	0:0	2	,
water	14:49	0:0	2	255
water	14:52	0:0	2	,
water	14:54	0:0	2	255
water	14:57	0:0	2	}
water	16:4	0:0	2	wDIRowBytes
op	16:16	0:0	2	=
call	16:18	16:51	2	(WORD)
arg	16:26	16:51	3	(3*cxWinSize+3L)>>2
water	16:26	0:0	4	(
water	16:27	0:0	4	3
op	16:29	0:0	4	*
water	16:31	0:0	4	cxWinSize
op	16:41	0:0	4	+
water	16:43	0:0	4	3
water	16:44	0:0	4	L
water	16:45	0:0	4	)
op	16:47	0:0	4	>>
water	16:50	0:0	4	2
op	16:53	0:0	2	<<
water	16:56	0:0	2	2
water	16:57	0:0	2	;
if	17:4	21:4	2	(pDib)
cond	17:8	17:8	3	pDib
water	17:8	0:0	4	pDib
stmts	18:4	21:4	3	
water	18:4	0:0	4	{
call	19:8	19:18	4	free
arg	19:14	19:18	5	pDib
water	19:14	0:0	6	pDib
water	19:19	0:0	4	;
water	20:8	0:0	4	pDib
op	20:13	0:0	4	=
water	20:15	0:0	4	NULL
water	20:19	0:0	4	;
water	21:4	0:0	4	}
if	22:4	29:4	2	(! ( pDib = ( BYTE * )malloc (sizeof ( BITMAPINFOHEADER ) + wDIRowBytes * cyWinSize ) ))
cond	22:8	23:32	3	! ( pDib = ( BYTE * )malloc (sizeof ( BITMAPINFOHEADER ) + wDIRowBytes * cyWinSize ) )
op	22:8	0:0	4	!
water	22:9	0:0	4	(
water	22:10	0:0	4	pDib
op	22:15	0:0	4	=
water	22:17	0:0	4	(
water	22:18	0:0	4	BYTE
op	22:23	0:0	4	*
water	22:24	0:0	4	)
call	22:26	23:31	4	malloc
arg	22:34	23:31	5	sizeof(BITMAPINFOHEADER)+wDIRowBytes*cyWinSize
op	22:34	0:0	6	sizeof
water	22:40	0:0	6	(
water	22:41	0:0	6	BITMAPINFOHEADER
water	22:57	0:0	6	)
op	22:59	0:0	6	+
water	23:8	0:0	6	wDIRowBytes
op	23:20	0:0	6	*
water	23:22	0:0	6	cyWinSize
water	23:32	0:0	4	)
stmts	24:4	29:4	3	
water	24:4	0:0	4	{
call	25:8	26:50	4	MessageBox
arg	25:20	25:24	5	hwnd
water	25:20	0:0	6	hwnd
arg	25:26	25:68	5	TEXT("Error in displaying the PNG image")
call	25:26	25:67	6	TEXT
arg	25:32	25:67	7	"Error in displaying the PNG image"
water	25:32	0:0	8	"Error in displaying the PNG image"
arg	26:12	26:22	5	szProgName
water	26:12	0:0	6	szProgName
arg	26:24	26:50	5	MB_ICONEXCLAMATION|MB_OK
water	26:24	0:0	6	MB_ICONEXCLAMATION
op	26:43	0:0	6	|
water	26:45	0:0	6	MB_OK
water	26:51	0:0	4	;
op	27:8	0:0	4	*
water	27:9	0:0	4	ppDib
op	27:15	0:0	4	=
water	27:17	0:0	4	pDib
op	27:22	0:0	4	=
water	27:24	0:0	4	NULL
water	27:28	0:0	4	;
return	28:8	28:20	4	FALSE
water	28:15	0:0	5	FALSE
water	29:4	0:0	4	}
op	30:4	0:0	2	*
water	30:5	0:0	2	ppDib
op	30:11	0:0	2	=
water	30:13	0:0	2	pDib
water	30:17	0:0	2	;
call	31:4	31:45	2	memset
arg	31:12	31:16	3	pDib
water	31:12	0:0	4	pDib
arg	31:18	31:19	3	0
water	31:18	0:0	4	0
arg	31:21	31:45	3	sizeof(BITMAPINFOHEADER)
op	31:21	0:0	4	sizeof
water	31:27	0:0	4	(
water	31:28	0:0	4	BITMAPINFOHEADER
water	31:44	0:0	4	)
water	31:46	0:0	2	;
water	33:4	0:0	2	pbmih
op	33:10	0:0	2	=
water	33:12	0:0	2	(
water	33:13	0:0	2	BITMAPINFOHEADER
op	33:30	0:0	2	*
water	33:31	0:0	2	)
water	33:33	0:0	2	pDib
water	33:37	0:0	2	;
water	34:4	0:0	2	pbmih
op	34:9	0:0	2	->
water	34:11	0:0	2	biSize
op	34:18	0:0	2	=
op	34:20	0:0	2	sizeof
water	34:26	0:0	2	(
water	34:27	0:0	2	BITMAPINFOHEADER
water	34:43	0:0	2	)
water	34:44	0:0	2	;
water	35:4	0:0	2	pbmih
op	35:9	0:0	2	->
water	35:11	0:0	2	biWidth
op	35:19	0:0	2	=
water	35:21	0:0	2	cxWinSize
water	35:30	0:0	2	;
water	36:4	0:0	2	pbmih
op	36:9	0:0	2	->
water	36:11	0:0	2	biHeight
op	36:20	0:0	2	=
op	36:22	0:0	2	-
water	36:23	0:0	2	(
water	36:24	0:0	2	(
water	36:25	0:0	2	long
water	36:29	0:0	2	)
water	36:31	0:0	2	cyWinSize
water	36:40	0:0	2	)
water	36:41	0:0	2	;
water	37:4	0:0	2	pbmih
op	37:9	0:0	2	->
water	37:11	0:0	2	biPlanes
op	37:20	0:0	2	=
water	37:22	0:0	2	1
water	37:23	0:0	2	;
water	38:4	0:0	2	pbmih
op	38:9	0:0	2	->
water	38:11	0:0	2	biBitCount
op	38:22	0:0	2	=
water	38:24	0:0	2	24
water	38:26	0:0	2	;
water	39:4	0:0	2	pbmih
op	39:9	0:0	2	->
water	39:11	0:0	2	biCompression
op	39:25	0:0	2	=
water	39:27	0:0	2	0
water	39:28	0:0	2	;
water	40:4	0:0	2	pDiData
op	40:12	0:0	2	=
water	40:14	0:0	2	pDib
op	40:19	0:0	2	+
op	40:21	0:0	2	sizeof
water	40:27	0:0	2	(
water	40:28	0:0	2	BITMAPINFOHEADER
water	40:44	0:0	2	)
water	40:45	0:0	2	;
op	41:4	0:0	2	*
water	41:5	0:0	2	ppDiData
op	41:14	0:0	2	=
water	41:16	0:0	2	pDiData
water	41:23	0:0	2	;
call	43:4	43:45	2	InitBitmap
arg	43:16	43:23	3	pDiData
water	43:16	0:0	4	pDiData
arg	43:25	43:34	3	cxWinSize
water	43:25	0:0	4	cxWinSize
arg	43:36	43:45	3	cyWinSize
water	43:36	0:0	4	cyWinSize
water	43:46	0:0	2	;
if	45:4	51:4	2	(pbImage)
cond	45:8	45:8	3	pbImage
water	45:8	0:0	4	pbImage
stmts	46:4	51:4	3	
water	46:4	0:0	4	{
call	47:8	50:22	4	FillBitmap
arg	48:12	48:19	5	pDiData
water	48:12	0:0	6	pDiData
arg	48:21	48:30	5	cxWinSize
water	48:21	0:0	6	cxWinSize
arg	48:32	48:41	5	cyWinSize
water	48:32	0:0	6	cyWinSize
arg	49:12	49:19	5	pbImage
water	49:12	0:0	6	pbImage
arg	49:21	49:30	5	cxImgSize
water	49:21	0:0	6	cxImgSize
arg	49:32	49:41	5	cyImgSize
water	49:32	0:0	6	cyImgSize
arg	49:43	49:55	5	cImgChannels
water	49:43	0:0	6	cImgChannels
arg	50:12	50:22	5	bStretched
water	50:12	0:0	6	bStretched
water	50:23	0:0	4	;
water	51:4	0:0	4	}
return	52:4	52:15	2	TRUE
water	52:11	0:0	3	TRUE
