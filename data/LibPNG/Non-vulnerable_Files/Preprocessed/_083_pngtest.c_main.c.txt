func	1:0	239:0	0	int	main
params	2:4	0:0	1	
param	2:5	2:13	2	int	argc
param	2:15	2:27	2	char *	argv[]
stmnts	0:0	238:28	1	
decl	4:3	4:19	2	int	multiple
op	4:16	0:0	2	=
water	4:18	0:0	2	0
decl	5:3	5:17	2	int	ierror
op	5:14	0:0	2	=
water	5:16	0:0	2	0
call	6:3	6:74	2	fprintf
arg	6:11	6:17	3	STDERR
water	6:11	0:0	4	STDERR
arg	6:19	6:51	3	"\n Testing libpng version %s\n"
water	6:19	0:0	4	"\n Testing libpng version %s\n"
arg	6:53	6:74	3	PNG_LIBPNG_VER_STRING
water	6:53	0:0	4	PNG_LIBPNG_VER_STRING
water	6:75	0:0	2	;
call	7:3	7:62	2	fprintf
arg	7:11	7:17	3	STDERR
water	7:11	0:0	4	STDERR
arg	7:19	7:48	3	"   with zlib   version %s\n"
water	7:19	0:0	4	"   with zlib   version %s\n"
arg	7:50	7:62	3	ZLIB_VERSION
water	7:50	0:0	4	ZLIB_VERSION
water	7:63	0:0	2	;
call	8:3	8:48	2	fprintf
arg	8:11	8:17	3	STDERR
water	8:11	0:0	4	STDERR
arg	8:19	8:23	3	"%s"
water	8:19	0:0	4	"%s"
arg	8:25	8:48	3	png_get_copyright(NULL)
call	8:25	8:47	4	png_get_copyright
arg	8:43	8:47	5	NULL
water	8:43	0:0	6	NULL
water	8:49	0:0	2	;
call	10:3	12:34	2	fprintf
arg	10:11	10:17	3	STDERR
water	10:11	0:0	4	STDERR
arg	10:19	10:38	3	" library (%lu):%s"
water	10:19	0:0	4	" library (%lu):%s"
arg	11:6	11:48	3	(unsignedlong)png_access_version_number()
water	11:6	0:0	4	(
water	11:7	0:0	4	unsigned
water	11:16	0:0	4	long
water	11:20	0:0	4	)
call	11:21	11:47	4	png_access_version_number
arg	12:6	12:34	3	png_get_header_version(NULL)
call	12:6	12:33	4	png_get_header_version
arg	12:29	12:33	5	NULL
water	12:29	0:0	6	NULL
water	12:35	0:0	2	;
call	14:3	15:31	2	fprintf
arg	14:11	14:17	3	STDERR
water	14:11	0:0	4	STDERR
arg	14:19	14:38	3	" pngtest (%lu):%s"
water	14:19	0:0	4	" pngtest (%lu):%s"
arg	14:40	14:69	3	(unsignedlong)PNG_LIBPNG_VER
water	14:40	0:0	4	(
water	14:41	0:0	4	unsigned
water	14:50	0:0	4	long
water	14:54	0:0	4	)
water	14:55	0:0	4	PNG_LIBPNG_VER
arg	15:6	15:31	3	PNG_HEADER_VERSION_STRING
water	15:6	0:0	4	PNG_HEADER_VERSION_STRING
water	15:32	0:0	2	;
call	22:6	22:70	2	fprintf
arg	22:14	22:20	3	STDERR
water	22:14	0:0	4	STDERR
arg	22:22	22:70	3	" NOTE: Zlib compiled for max 64k, libpng not\n"
water	22:22	0:0	4	" NOTE: Zlib compiled for max 64k, libpng not\n"
water	22:71	0:0	2	;
call	26:6	26:70	2	fprintf
arg	26:14	26:20	3	STDERR
water	26:14	0:0	4	STDERR
arg	26:22	26:70	3	" NOTE: libpng compiled for max 64k, zlib not\n"
water	26:22	0:0	4	" NOTE: libpng compiled for max 64k, zlib not\n"
water	26:71	0:0	2	;
if	28:3	35:3	2	(strcmp (png_libpng_ver ,PNG_LIBPNG_VER_STRING ))
cond	28:7	28:51	3	strcmp (png_libpng_ver ,PNG_LIBPNG_VER_STRING )
call	28:7	28:51	4	strcmp
arg	28:14	28:28	5	png_libpng_ver
water	28:14	0:0	6	png_libpng_ver
arg	28:30	28:51	5	PNG_LIBPNG_VER_STRING
water	28:30	0:0	6	PNG_LIBPNG_VER_STRING
stmts	29:3	35:3	3	
water	29:3	0:0	4	{
call	30:6	31:68	4	fprintf
arg	30:14	30:20	5	STDERR
water	30:14	0:0	6	STDERR
arg	31:9	31:68	5	"Warning: versions are different between png.h and png.c\n"
water	31:9	0:0	6	"Warning: versions are different between png.h and png.c\n"
water	31:69	0:0	4	;
call	32:6	32:68	4	fprintf
arg	32:14	32:20	5	STDERR
water	32:14	0:0	6	STDERR
arg	32:22	32:45	5	"  png.h version: %s\n"
water	32:22	0:0	6	"  png.h version: %s\n"
arg	32:47	32:68	5	PNG_LIBPNG_VER_STRING
water	32:47	0:0	6	PNG_LIBPNG_VER_STRING
water	32:69	0:0	4	;
call	33:6	33:63	4	fprintf
arg	33:14	33:20	5	STDERR
water	33:14	0:0	6	STDERR
arg	33:22	33:47	5	"  png.c version: %s\n\n"
water	33:22	0:0	6	"  png.c version: %s\n\n"
arg	33:49	33:63	5	png_libpng_ver
water	33:49	0:0	6	png_libpng_ver
water	33:64	0:0	4	;
op	34:6	0:0	4	++
water	34:8	0:0	4	ierror
water	34:14	0:0	4	;
water	35:3	0:0	4	}
if	36:3	61:3	2	(argc > 1)
cond	36:7	36:14	3	argc > 1
water	36:7	0:0	4	argc
op	36:12	0:0	4	>
water	36:14	0:0	4	1
stmts	37:3	61:3	3	
water	37:3	0:0	4	{
if	38:6	42:6	4	(strcmp (argv [ 1 ] ,"-m" ) == 0)
cond	38:10	38:35	5	strcmp (argv [ 1 ] ,"-m" ) == 0
call	38:10	38:30	6	strcmp
arg	38:17	38:24	7	argv[1]
water	38:17	0:0	8	argv
op	38:21	0:0	8	[
water	38:22	0:0	8	1
op	38:23	0:0	8	]
arg	38:26	38:30	7	"-m"
water	38:26	0:0	8	"-m"
op	38:32	0:0	6	==
water	38:35	0:0	6	0
stmts	39:6	42:6	5	
water	39:6	0:0	6	{
water	40:9	0:0	6	multiple
op	40:18	0:0	6	=
water	40:20	0:0	6	1
water	40:21	0:0	6	;
water	41:9	0:0	6	status_dots_requested
op	41:31	0:0	6	=
water	41:33	0:0	6	0
water	41:34	0:0	6	;
water	42:6	0:0	6	}
else	43:6	49:6	4
stmts	43:11	49:6	5	
if	43:11	49:6	6	(strcmp (argv [ 1 ] ,"-mv" ) == 0 ||strcmp (argv [ 1 ] ,"-vm" ) == 0)
cond	43:15	44:41	7	strcmp (argv [ 1 ] ,"-mv" ) == 0 ||strcmp (argv [ 1 ] ,"-vm" ) == 0
call	43:15	43:36	8	strcmp
arg	43:22	43:29	9	argv[1]
water	43:22	0:0	10	argv
op	43:26	0:0	10	[
water	43:27	0:0	10	1
op	43:28	0:0	10	]
arg	43:31	43:36	9	"-mv"
water	43:31	0:0	10	"-mv"
op	43:38	0:0	8	==
water	43:41	0:0	8	0
op	43:43	0:0	8	||
call	44:15	44:36	8	strcmp
arg	44:22	44:29	9	argv[1]
water	44:22	0:0	10	argv
op	44:26	0:0	10	[
water	44:27	0:0	10	1
op	44:28	0:0	10	]
arg	44:31	44:36	9	"-vm"
water	44:31	0:0	10	"-vm"
op	44:38	0:0	8	==
water	44:41	0:0	8	0
stmts	45:6	49:6	7	
water	45:6	0:0	8	{
water	46:9	0:0	8	multiple
op	46:18	0:0	8	=
water	46:20	0:0	8	1
water	46:21	0:0	8	;
water	47:9	0:0	8	verbose
op	47:17	0:0	8	=
water	47:19	0:0	8	1
water	47:20	0:0	8	;
water	48:9	0:0	8	status_dots_requested
op	48:31	0:0	8	=
water	48:33	0:0	8	1
water	48:34	0:0	8	;
water	49:6	0:0	8	}
else	50:6	55:6	4
stmts	50:11	55:6	5	
if	50:11	55:6	6	(strcmp (argv [ 1 ] ,"-v" ) == 0)
cond	50:15	50:40	7	strcmp (argv [ 1 ] ,"-v" ) == 0
call	50:15	50:35	8	strcmp
arg	50:22	50:29	9	argv[1]
water	50:22	0:0	10	argv
op	50:26	0:0	10	[
water	50:27	0:0	10	1
op	50:28	0:0	10	]
arg	50:31	50:35	9	"-v"
water	50:31	0:0	10	"-v"
op	50:37	0:0	8	==
water	50:40	0:0	8	0
stmts	51:6	55:6	7	
water	51:6	0:0	8	{
water	52:9	0:0	8	verbose
op	52:17	0:0	8	=
water	52:19	0:0	8	1
water	52:20	0:0	8	;
water	53:9	0:0	8	status_dots_requested
op	53:31	0:0	8	=
water	53:33	0:0	8	1
water	53:34	0:0	8	;
water	54:9	0:0	8	inname
op	54:16	0:0	8	=
water	54:18	0:0	8	argv
op	54:22	0:0	8	[
water	54:23	0:0	8	2
op	54:24	0:0	8	]
water	54:25	0:0	8	;
water	55:6	0:0	8	}
else	56:6	60:6	4
stmts	57:6	60:6	5	
water	57:6	0:0	6	{
water	58:9	0:0	6	inname
op	58:16	0:0	6	=
water	58:18	0:0	6	argv
op	58:22	0:0	6	[
water	58:23	0:0	6	1
op	58:24	0:0	6	]
water	58:25	0:0	6	;
water	59:9	0:0	6	status_dots_requested
op	59:31	0:0	6	=
water	59:33	0:0	6	0
water	59:34	0:0	6	;
water	60:6	0:0	6	}
water	61:3	0:0	4	}
if	62:3	63:32	2	(! multiple && argc == 3 + verbose)
cond	62:7	62:32	3	! multiple && argc == 3 + verbose
op	62:7	0:0	4	!
water	62:8	0:0	4	multiple
op	62:17	0:0	4	&&
water	62:20	0:0	4	argc
op	62:25	0:0	4	==
water	62:28	0:0	4	3
op	62:30	0:0	4	+
water	62:32	0:0	4	verbose
stmts	63:5	63:32	3	
water	63:5	0:0	4	outname
op	63:13	0:0	4	=
water	63:15	0:0	4	argv
op	63:19	0:0	4	[
water	63:20	0:0	4	2
op	63:22	0:0	4	+
water	63:24	0:0	4	verbose
op	63:31	0:0	4	]
water	63:32	0:0	4	;
if	64:3	74:3	2	(( ! multiple && argc > 3 + verbose ) || ( multiple && argc < 2 ))
cond	64:7	64:65	3	( ! multiple && argc > 3 + verbose ) || ( multiple && argc < 2 )
water	64:7	0:0	4	(
op	64:8	0:0	4	!
water	64:9	0:0	4	multiple
op	64:18	0:0	4	&&
water	64:21	0:0	4	argc
op	64:26	0:0	4	>
water	64:28	0:0	4	3
op	64:30	0:0	4	+
water	64:32	0:0	4	verbose
water	64:39	0:0	4	)
op	64:41	0:0	4	||
water	64:44	0:0	4	(
water	64:45	0:0	4	multiple
op	64:54	0:0	4	&&
water	64:57	0:0	4	argc
op	64:62	0:0	4	<
water	64:64	0:0	4	2
water	64:65	0:0	4	)
stmts	65:3	74:3	3	
water	65:3	0:0	4	{
call	66:5	68:24	4	fprintf
arg	66:13	66:19	5	STDERR
water	66:13	0:0	6	STDERR
arg	67:7	67:69	5	"usage: %s [infile.png] [outfile.png]\n\t%s -m {infile.png}\n"
water	67:7	0:0	6	"usage: %s [infile.png] [outfile.png]\n\t%s -m {infile.png}\n"
arg	68:8	68:15	5	argv[0]
water	68:8	0:0	6	argv
op	68:12	0:0	6	[
water	68:13	0:0	6	0
op	68:14	0:0	6	]
arg	68:17	68:24	5	argv[0]
water	68:17	0:0	6	argv
op	68:21	0:0	6	[
water	68:22	0:0	6	0
op	68:23	0:0	6	]
water	68:25	0:0	4	;
call	69:5	70:74	4	fprintf
arg	69:13	69:19	5	STDERR
water	69:13	0:0	6	STDERR
arg	70:7	70:74	5	"  reads/writes one PNG file (without -m) or multiple files (-m)\n"
water	70:7	0:0	6	"  reads/writes one PNG file (without -m) or multiple files (-m)\n"
water	70:75	0:0	4	;
call	71:5	72:60	4	fprintf
arg	71:13	71:19	5	STDERR
water	71:13	0:0	6	STDERR
arg	72:7	72:51	5	"  with -m %s is used as a temporary file\n"
water	72:7	0:0	6	"  with -m %s is used as a temporary file\n"
arg	72:53	72:60	5	outname
water	72:53	0:0	6	outname
water	72:61	0:0	4	;
call	73:5	73:11	4	exit
arg	73:10	73:11	5	1
water	73:10	0:0	6	1
water	73:12	0:0	4	;
water	74:3	0:0	4	}
if	75:3	143:3	2	(multiple)
cond	75:7	75:7	3	multiple
water	75:7	0:0	4	multiple
stmts	76:3	143:3	3	
water	76:3	0:0	4	{
decl	77:6	77:11	4	int	i
decl	79:6	79:45	4	int	allocation_now
op	79:25	0:0	4	=
water	79:27	0:0	4	current_allocation
for	81:6	132:6	4	(i = 2 ;i < argc;++ i)
forinit	81:11	81:14	5	i = 2 ;
water	81:11	0:0	6	i
op	81:12	0:0	6	=
water	81:13	0:0	6	2
water	81:14	0:0	6	;
cond	81:16	81:18	5	i < argc
water	81:16	0:0	6	i
op	81:17	0:0	6	<
water	81:18	0:0	6	argc
forexpr	81:24	81:26	5	++ i
op	81:24	0:0	6	++
water	81:26	0:0	6	i
stmts	82:6	132:6	5	
water	82:6	0:0	6	{
decl	83:9	83:19	6	int	kerror
call	84:9	84:50	6	fprintf
arg	84:17	84:23	7	STDERR
water	84:17	0:0	8	STDERR
arg	84:25	84:41	7	"\n Testing %s:"
water	84:25	0:0	8	"\n Testing %s:"
arg	84:43	84:50	7	argv[i]
water	84:43	0:0	8	argv
op	84:47	0:0	8	[
water	84:48	0:0	8	i
op	84:49	0:0	8	]
water	84:51	0:0	6	;
water	85:9	0:0	6	kerror
op	85:16	0:0	6	=
call	85:18	85:48	6	test_one_file
arg	85:32	85:39	7	argv[i]
water	85:32	0:0	8	argv
op	85:36	0:0	8	[
water	85:37	0:0	8	i
op	85:38	0:0	8	]
arg	85:41	85:48	7	outname
water	85:41	0:0	8	outname
water	85:49	0:0	6	;
if	86:9	108:9	6	(kerror == 0)
cond	86:13	86:23	7	kerror == 0
water	86:13	0:0	8	kerror
op	86:20	0:0	8	==
water	86:23	0:0	8	0
stmts	87:9	108:9	7	
water	87:9	0:0	8	{
decl	89:12	89:17	8	int	k
call	92:12	93:42	8	fprintf
arg	92:20	92:26	9	STDERR
water	92:20	0:0	10	STDERR
arg	92:28	92:58	9	"\n PASS (%lu zero samples)\n"
water	92:28	0:0	10	"\n PASS (%lu zero samples)\n"
arg	93:15	93:42	9	(unsignedlong)zero_samples
water	93:15	0:0	10	(
water	93:16	0:0	10	unsigned
water	93:25	0:0	10	long
water	93:29	0:0	10	)
water	93:30	0:0	10	zero_samples
water	93:43	0:0	8	;
call	95:12	95:37	8	fprintf
arg	95:20	95:26	9	STDERR
water	95:20	0:0	10	STDERR
arg	95:28	95:37	9	" PASS\n"
water	95:28	0:0	10	" PASS\n"
water	95:38	0:0	8	;
for	98:12	101:55	8	(k = 0 ;k < 256;k ++)
forinit	98:17	98:22	9	k = 0 ;
water	98:17	0:0	10	k
op	98:19	0:0	10	=
water	98:21	0:0	10	0
water	98:22	0:0	10	;
cond	98:24	98:26	9	k < 256
water	98:24	0:0	10	k
op	98:25	0:0	10	<
water	98:26	0:0	10	256
forexpr	98:31	98:32	9	k ++
water	98:31	0:0	10	k
op	98:32	0:0	10	++
stmts	99:15	101:55	9	
if	99:15	101:55	10	(filters_used [ k ])
cond	99:19	99:33	11	filters_used [ k ]
water	99:19	0:0	12	filters_used
op	99:31	0:0	12	[
water	99:32	0:0	12	k
op	99:33	0:0	12	]
stmts	100:18	101:55	11	
call	100:18	101:54	12	fprintf
arg	100:26	100:32	13	STDERR
water	100:26	0:0	14	STDERR
arg	100:34	100:67	13	" Filter %d was used %lu times\n"
water	100:34	0:0	14	" Filter %d was used %lu times\n"
arg	101:21	101:22	13	k
water	101:21	0:0	14	k
arg	101:24	101:54	13	(unsignedlong)filters_used[k]
water	101:24	0:0	14	(
water	101:25	0:0	14	unsigned
water	101:34	0:0	14	long
water	101:38	0:0	14	)
water	101:39	0:0	14	filters_used
op	101:51	0:0	14	[
water	101:52	0:0	14	k
op	101:53	0:0	14	]
water	101:55	0:0	12	;
if	104:9	105:56	8	(tIME_chunk_present != 0)
cond	104:13	104:35	9	tIME_chunk_present != 0
water	104:13	0:0	10	tIME_chunk_present
op	104:32	0:0	10	!=
water	104:35	0:0	10	0
stmts	105:12	105:56	9	
call	105:12	105:55	10	fprintf
arg	105:20	105:26	11	STDERR
water	105:20	0:0	12	STDERR
arg	105:28	105:42	11	" tIME = %s\n"
water	105:28	0:0	12	" tIME = %s\n"
arg	105:44	105:55	11	tIME_string
water	105:44	0:0	12	tIME_string
water	105:56	0:0	10	;
water	106:9	0:0	8	tIME_chunk_present
op	106:28	0:0	8	=
water	106:30	0:0	8	0
water	106:31	0:0	8	;
water	108:9	0:0	8	}
else	109:9	113:9	6
stmts	110:9	113:9	7	
water	110:9	0:0	8	{
call	111:12	111:37	8	fprintf
arg	111:20	111:26	9	STDERR
water	111:20	0:0	10	STDERR
arg	111:28	111:37	9	" FAIL\n"
water	111:28	0:0	10	" FAIL\n"
water	111:38	0:0	8	;
water	112:12	0:0	8	ierror
op	112:19	0:0	8	+=
water	112:22	0:0	8	kerror
water	112:28	0:0	8	;
water	113:9	0:0	8	}
if	115:9	117:51	6	(allocation_now != current_allocation)
cond	115:13	115:31	7	allocation_now != current_allocation
water	115:13	0:0	8	allocation_now
op	115:28	0:0	8	!=
water	115:31	0:0	8	current_allocation
stmts	116:12	117:51	7	
call	116:12	117:50	8	fprintf
arg	116:20	116:26	9	STDERR
water	116:20	0:0	10	STDERR
arg	116:28	116:59	9	"MEMORY ERROR: %d bytes lost\n"
water	116:28	0:0	10	"MEMORY ERROR: %d bytes lost\n"
arg	117:15	117:50	9	current_allocation-allocation_now
water	117:15	0:0	10	current_allocation
op	117:34	0:0	10	-
water	117:36	0:0	10	allocation_now
water	117:51	0:0	8	;
if	118:9	130:9	6	(current_allocation != 0)
cond	118:13	118:35	7	current_allocation != 0
water	118:13	0:0	8	current_allocation
op	118:32	0:0	8	!=
water	118:35	0:0	8	0
stmts	119:9	130:9	7	
water	119:9	0:0	8	{
decl	120:12	120:45	8	memory_infop	pinfo
op	120:31	0:0	8	=
water	120:33	0:0	8	pinformation
call	121:12	122:33	8	fprintf
arg	121:20	121:26	9	STDERR
water	121:20	0:0	10	STDERR
arg	121:28	121:70	9	"MEMORY ERROR: %d bytes still allocated\n"
water	121:28	0:0	10	"MEMORY ERROR: %d bytes still allocated\n"
arg	122:15	122:33	9	current_allocation
water	122:15	0:0	10	current_allocation
water	122:34	0:0	8	;
while	123:12	129:12	8	(pinfo != NULL)
cond	123:19	123:28	9	pinfo != NULL
water	123:19	0:0	10	pinfo
op	123:25	0:0	10	!=
water	123:28	0:0	10	NULL
stmts	124:12	129:12	9	
water	124:12	0:0	10	{
call	125:15	127:45	10	fprintf
arg	125:23	125:29	11	STDERR
water	125:23	0:0	12	STDERR
arg	125:31	125:51	11	" %lu bytes at %x\n"
water	125:31	0:0	12	" %lu bytes at %x\n"
arg	126:17	126:43	11	(unsignedlong)pinfo->size
water	126:17	0:0	12	(
water	126:18	0:0	12	unsigned
water	126:27	0:0	12	long
water	126:31	0:0	12	)
water	126:32	0:0	12	pinfo
op	126:37	0:0	12	->
water	126:39	0:0	12	size
arg	127:17	127:45	11	(unsignedint)pinfo->pointer
water	127:17	0:0	12	(
water	127:18	0:0	12	unsigned
water	127:27	0:0	12	int
water	127:30	0:0	12	)
water	127:31	0:0	12	pinfo
op	127:36	0:0	12	->
water	127:38	0:0	12	pointer
water	127:46	0:0	10	;
water	128:15	0:0	10	pinfo
op	128:21	0:0	10	=
water	128:23	0:0	10	pinfo
op	128:28	0:0	10	->
water	128:30	0:0	10	next
water	128:34	0:0	10	;
water	129:12	0:0	10	}
water	130:9	0:0	8	}
water	132:6	0:0	6	}
call	134:9	135:30	4	fprintf
arg	134:17	134:23	5	STDERR
water	134:17	0:0	6	STDERR
arg	134:25	134:67	5	" Current memory allocation: %10d bytes\n"
water	134:25	0:0	6	" Current memory allocation: %10d bytes\n"
arg	135:12	135:30	5	current_allocation
water	135:12	0:0	6	current_allocation
water	135:31	0:0	4	;
call	136:9	137:30	4	fprintf
arg	136:17	136:23	5	STDERR
water	136:17	0:0	6	STDERR
arg	136:25	136:67	5	" Maximum memory allocation: %10d bytes\n"
water	136:25	0:0	6	" Maximum memory allocation: %10d bytes\n"
arg	137:12	137:30	5	maximum_allocation
water	137:12	0:0	6	maximum_allocation
water	137:31	0:0	4	;
call	138:9	139:28	4	fprintf
arg	138:17	138:23	5	STDERR
water	138:17	0:0	6	STDERR
arg	138:25	138:67	5	" Total   memory allocation: %10d bytes\n"
water	138:25	0:0	6	" Total   memory allocation: %10d bytes\n"
arg	139:12	139:28	5	total_allocation
water	139:12	0:0	6	total_allocation
water	139:29	0:0	4	;
call	140:9	141:27	4	fprintf
arg	140:17	140:23	5	STDERR
water	140:17	0:0	6	STDERR
arg	140:25	140:61	5	"     Number of allocations: %10d\n"
water	140:25	0:0	6	"     Number of allocations: %10d\n"
arg	141:12	141:27	5	num_allocations
water	141:12	0:0	6	num_allocations
water	141:28	0:0	4	;
water	143:3	0:0	4	}
else	144:3	220:3	2
stmts	145:3	220:3	3	
water	145:3	0:0	4	{
decl	146:6	146:11	4	int	i
for	147:6	209:7	4	(i = 0 ;i < 3;++ i)
forinit	147:11	147:16	5	i = 0 ;
water	147:11	0:0	6	i
op	147:13	0:0	6	=
water	147:15	0:0	6	0
water	147:16	0:0	6	;
cond	147:18	147:20	5	i < 3
water	147:18	0:0	6	i
op	147:19	0:0	6	<
water	147:20	0:0	6	3
forexpr	147:23	147:25	5	++ i
op	147:23	0:0	6	++
water	147:25	0:0	6	i
stmts	148:6	209:7	5	
water	148:6	0:0	6	{
decl	149:9	149:19	6	int	kerror
decl	151:9	151:48	6	int	allocation_now
op	151:28	0:0	6	=
water	151:30	0:0	6	current_allocation
if	153:9	154:37	6	(i == 1)
cond	153:13	153:18	7	i == 1
water	153:13	0:0	8	i
op	153:15	0:0	8	==
water	153:18	0:0	8	1
stmts	154:12	154:37	7	
water	154:12	0:0	8	status_dots_requested
op	154:34	0:0	8	=
water	154:36	0:0	8	1
water	154:37	0:0	8	;
else	155:9	156:37	6
stmts	155:14	156:37	7	
if	155:14	156:37	8	(verbose == 0)
cond	155:18	155:29	9	verbose == 0
water	155:18	0:0	10	verbose
op	155:26	0:0	10	==
water	155:29	0:0	10	0
stmts	156:12	156:37	9	
water	156:12	0:0	10	status_dots_requested
op	156:34	0:0	10	=
water	156:36	0:0	10	0
water	156:37	0:0	10	;
if	157:9	158:53	6	(i == 0 || verbose == 1 || ierror != 0)
cond	157:13	157:49	7	i == 0 || verbose == 1 || ierror != 0
water	157:13	0:0	8	i
op	157:15	0:0	8	==
water	157:18	0:0	8	0
op	157:20	0:0	8	||
water	157:23	0:0	8	verbose
op	157:31	0:0	8	==
water	157:34	0:0	8	1
op	157:36	0:0	8	||
water	157:39	0:0	8	ierror
op	157:46	0:0	8	!=
water	157:49	0:0	8	0
stmts	158:12	158:53	7	
call	158:12	158:52	8	fprintf
arg	158:20	158:26	9	STDERR
water	158:20	0:0	10	STDERR
arg	158:28	158:44	9	"\n Testing %s:"
water	158:28	0:0	10	"\n Testing %s:"
arg	158:46	158:52	9	inname
water	158:46	0:0	10	inname
water	158:53	0:0	8	;
water	159:9	0:0	6	kerror
op	159:16	0:0	6	=
call	159:18	159:47	6	test_one_file
arg	159:32	159:38	7	inname
water	159:32	0:0	8	inname
arg	159:40	159:47	7	outname
water	159:40	0:0	8	outname
water	159:48	0:0	6	;
if	160:9	184:9	6	(kerror == 0)
cond	160:13	160:23	7	kerror == 0
water	160:13	0:0	8	kerror
op	160:20	0:0	8	==
water	160:23	0:0	8	0
stmts	161:9	184:9	7	
water	161:9	0:0	8	{
if	162:12	183:12	8	(verbose == 1 || i == 2)
cond	162:16	162:37	9	verbose == 1 || i == 2
water	162:16	0:0	10	verbose
op	162:24	0:0	10	==
water	162:27	0:0	10	1
op	162:29	0:0	10	||
water	162:32	0:0	10	i
op	162:34	0:0	10	==
water	162:37	0:0	10	2
stmts	163:12	183:12	9	
water	163:12	0:0	10	{
decl	165:16	165:21	10	int	k
call	168:16	169:46	10	fprintf
arg	168:24	168:30	11	STDERR
water	168:24	0:0	12	STDERR
arg	168:32	168:62	11	"\n PASS (%lu zero samples)\n"
water	168:32	0:0	12	"\n PASS (%lu zero samples)\n"
arg	169:19	169:46	11	(unsignedlong)zero_samples
water	169:19	0:0	12	(
water	169:20	0:0	12	unsigned
water	169:29	0:0	12	long
water	169:33	0:0	12	)
water	169:34	0:0	12	zero_samples
water	169:47	0:0	10	;
call	171:16	171:41	10	fprintf
arg	171:24	171:30	11	STDERR
water	171:24	0:0	12	STDERR
arg	171:32	171:41	11	" PASS\n"
water	171:32	0:0	12	" PASS\n"
water	171:42	0:0	10	;
for	174:16	177:59	10	(k = 0 ;k < 256;k ++)
forinit	174:21	174:26	11	k = 0 ;
water	174:21	0:0	12	k
op	174:23	0:0	12	=
water	174:25	0:0	12	0
water	174:26	0:0	12	;
cond	174:28	174:30	11	k < 256
water	174:28	0:0	12	k
op	174:29	0:0	12	<
water	174:30	0:0	12	256
forexpr	174:35	174:36	11	k ++
water	174:35	0:0	12	k
op	174:36	0:0	12	++
stmts	175:19	177:59	11	
if	175:19	177:59	12	(filters_used [ k ])
cond	175:23	175:37	13	filters_used [ k ]
water	175:23	0:0	14	filters_used
op	175:35	0:0	14	[
water	175:36	0:0	14	k
op	175:37	0:0	14	]
stmts	176:22	177:59	13	
call	176:22	177:58	14	fprintf
arg	176:30	176:36	15	STDERR
water	176:30	0:0	16	STDERR
arg	176:38	176:71	15	" Filter %d was used %lu times\n"
water	176:38	0:0	16	" Filter %d was used %lu times\n"
arg	177:25	177:26	15	k
water	177:25	0:0	16	k
arg	177:28	177:58	15	(unsignedlong)filters_used[k]
water	177:28	0:0	16	(
water	177:29	0:0	16	unsigned
water	177:38	0:0	16	long
water	177:42	0:0	16	)
water	177:43	0:0	16	filters_used
op	177:55	0:0	16	[
water	177:56	0:0	16	k
op	177:57	0:0	16	]
water	177:59	0:0	14	;
if	180:13	181:60	10	(tIME_chunk_present != 0)
cond	180:17	180:39	11	tIME_chunk_present != 0
water	180:17	0:0	12	tIME_chunk_present
op	180:36	0:0	12	!=
water	180:39	0:0	12	0
stmts	181:16	181:60	11	
call	181:16	181:59	12	fprintf
arg	181:24	181:30	13	STDERR
water	181:24	0:0	14	STDERR
arg	181:32	181:46	13	" tIME = %s\n"
water	181:32	0:0	14	" tIME = %s\n"
arg	181:48	181:59	13	tIME_string
water	181:48	0:0	14	tIME_string
water	181:60	0:0	12	;
water	183:12	0:0	10	}
water	184:9	0:0	8	}
else	185:9	191:9	6
stmts	186:9	191:9	7	
water	186:9	0:0	8	{
if	187:12	188:56	8	(verbose == 0 && i != 2)
cond	187:16	187:37	9	verbose == 0 && i != 2
water	187:16	0:0	10	verbose
op	187:24	0:0	10	==
water	187:27	0:0	10	0
op	187:29	0:0	10	&&
water	187:32	0:0	10	i
op	187:34	0:0	10	!=
water	187:37	0:0	10	2
stmts	188:15	188:56	9	
call	188:15	188:55	10	fprintf
arg	188:23	188:29	11	STDERR
water	188:23	0:0	12	STDERR
arg	188:31	188:47	11	"\n Testing %s:"
water	188:31	0:0	12	"\n Testing %s:"
arg	188:49	188:55	11	inname
water	188:49	0:0	12	inname
water	188:56	0:0	10	;
call	189:12	189:37	8	fprintf
arg	189:20	189:26	9	STDERR
water	189:20	0:0	10	STDERR
arg	189:28	189:37	9	" FAIL\n"
water	189:28	0:0	10	" FAIL\n"
water	189:38	0:0	8	;
water	190:12	0:0	8	ierror
op	190:19	0:0	8	+=
water	190:22	0:0	8	kerror
water	190:28	0:0	8	;
water	191:9	0:0	8	}
if	193:9	195:51	6	(allocation_now != current_allocation)
cond	193:13	193:31	7	allocation_now != current_allocation
water	193:13	0:0	8	allocation_now
op	193:28	0:0	8	!=
water	193:31	0:0	8	current_allocation
stmts	194:13	195:51	7	
call	194:13	195:50	8	fprintf
arg	194:21	194:27	9	STDERR
water	194:21	0:0	10	STDERR
arg	194:29	194:60	9	"MEMORY ERROR: %d bytes lost\n"
water	194:29	0:0	10	"MEMORY ERROR: %d bytes lost\n"
arg	195:15	195:50	9	current_allocation-allocation_now
water	195:15	0:0	10	current_allocation
op	195:34	0:0	10	-
water	195:36	0:0	10	allocation_now
water	195:51	0:0	8	;
if	196:9	207:10	6	(current_allocation != 0)
cond	196:13	196:35	7	current_allocation != 0
water	196:13	0:0	8	current_allocation
op	196:32	0:0	8	!=
water	196:35	0:0	8	0
stmts	197:9	207:10	7	
water	197:9	0:0	8	{
decl	198:13	198:46	8	memory_infop	pinfo
op	198:32	0:0	8	=
water	198:34	0:0	8	pinformation
call	199:13	200:34	8	fprintf
arg	199:21	199:27	9	STDERR
water	199:21	0:0	10	STDERR
arg	199:29	199:71	9	"MEMORY ERROR: %d bytes still allocated\n"
water	199:29	0:0	10	"MEMORY ERROR: %d bytes still allocated\n"
arg	200:16	200:34	9	current_allocation
water	200:16	0:0	10	current_allocation
water	200:35	0:0	8	;
while	201:13	206:13	8	(pinfo != NULL)
cond	201:20	201:29	9	pinfo != NULL
water	201:20	0:0	10	pinfo
op	201:26	0:0	10	!=
water	201:29	0:0	10	NULL
stmts	202:13	206:13	9	
water	202:13	0:0	10	{
call	203:16	204:75	10	fprintf
arg	203:24	203:30	11	STDERR
water	203:24	0:0	12	STDERR
arg	203:32	203:52	11	" %lu bytes at %x\n"
water	203:32	0:0	12	" %lu bytes at %x\n"
arg	204:19	204:45	11	(unsignedlong)pinfo->size
water	204:19	0:0	12	(
water	204:20	0:0	12	unsigned
water	204:29	0:0	12	long
water	204:33	0:0	12	)
water	204:34	0:0	12	pinfo
op	204:39	0:0	12	->
water	204:41	0:0	12	size
arg	204:47	204:75	11	(unsignedint)pinfo->pointer
water	204:47	0:0	12	(
water	204:48	0:0	12	unsigned
water	204:57	0:0	12	int
water	204:60	0:0	12	)
water	204:61	0:0	12	pinfo
op	204:66	0:0	12	->
water	204:68	0:0	12	pointer
water	204:76	0:0	10	;
water	205:16	0:0	10	pinfo
op	205:22	0:0	10	=
water	205:24	0:0	10	pinfo
op	205:29	0:0	10	->
water	205:31	0:0	10	next
water	205:35	0:0	10	;
water	206:13	0:0	10	}
water	207:10	0:0	8	}
water	209:7	0:0	6	}
call	211:7	212:28	4	fprintf
arg	211:15	211:21	5	STDERR
water	211:15	0:0	6	STDERR
arg	211:23	211:65	5	" Current memory allocation: %10d bytes\n"
water	211:23	0:0	6	" Current memory allocation: %10d bytes\n"
arg	212:10	212:28	5	current_allocation
water	212:10	0:0	6	current_allocation
water	212:29	0:0	4	;
call	213:7	214:28	4	fprintf
arg	213:15	213:21	5	STDERR
water	213:15	0:0	6	STDERR
arg	213:23	213:65	5	" Maximum memory allocation: %10d bytes\n"
water	213:23	0:0	6	" Maximum memory allocation: %10d bytes\n"
arg	214:10	214:28	5	maximum_allocation
water	214:10	0:0	6	maximum_allocation
water	214:29	0:0	4	;
call	215:7	216:26	4	fprintf
arg	215:15	215:21	5	STDERR
water	215:15	0:0	6	STDERR
arg	215:23	215:65	5	" Total   memory allocation: %10d bytes\n"
water	215:23	0:0	6	" Total   memory allocation: %10d bytes\n"
arg	216:10	216:26	5	total_allocation
water	216:10	0:0	6	total_allocation
water	216:27	0:0	4	;
call	217:7	218:27	4	fprintf
arg	217:15	217:21	5	STDERR
water	217:15	0:0	6	STDERR
arg	217:23	217:59	5	"     Number of allocations: %10d\n"
water	217:23	0:0	6	"     Number of allocations: %10d\n"
arg	218:12	218:27	5	num_allocations
water	218:12	0:0	6	num_allocations
water	218:28	0:0	4	;
water	220:3	0:0	4	}
water	222:3	0:0	2	t_stop
op	222:10	0:0	2	=
water	222:12	0:0	2	(
water	222:13	0:0	2	float
water	222:18	0:0	2	)
call	222:19	222:25	2	clock
water	222:26	0:0	2	;
water	223:3	0:0	2	t_misc
op	223:10	0:0	2	+=
water	223:13	0:0	2	(
water	223:14	0:0	2	t_stop
op	223:21	0:0	2	-
water	223:23	0:0	2	t_start
water	223:30	0:0	2	)
water	223:31	0:0	2	;
water	224:3	0:0	2	t_start
op	224:11	0:0	2	=
water	224:13	0:0	2	t_stop
water	224:19	0:0	2	;
call	225:3	226:54	2	fprintf
arg	225:11	225:17	3	STDERR
water	225:11	0:0	4	STDERR
arg	225:19	225:50	3	" CPU time used = %.3f seconds"
water	225:19	0:0	4	" CPU time used = %.3f seconds"
arg	226:6	226:54	3	(t_misc+t_decode+t_encode)/(float)CLOCKS_PER_SEC
water	226:6	0:0	4	(
water	226:7	0:0	4	t_misc
op	226:13	0:0	4	+
water	226:14	0:0	4	t_decode
op	226:22	0:0	4	+
water	226:23	0:0	4	t_encode
water	226:31	0:0	4	)
op	226:32	0:0	4	/
water	226:33	0:0	4	(
water	226:34	0:0	4	float
water	226:39	0:0	4	)
water	226:40	0:0	4	CLOCKS_PER_SEC
water	226:55	0:0	2	;
call	227:3	228:36	2	fprintf
arg	227:11	227:17	3	STDERR
water	227:11	0:0	4	STDERR
arg	227:19	227:39	3	" (decoding %.3f,\n"
water	227:19	0:0	4	" (decoding %.3f,\n"
arg	228:6	228:36	3	t_decode/(float)CLOCKS_PER_SEC
water	228:6	0:0	4	t_decode
op	228:14	0:0	4	/
water	228:15	0:0	4	(
water	228:16	0:0	4	float
water	228:21	0:0	4	)
water	228:22	0:0	4	CLOCKS_PER_SEC
water	228:37	0:0	2	;
call	229:3	230:36	2	fprintf
arg	229:11	229:17	3	STDERR
water	229:11	0:0	4	STDERR
arg	229:19	229:44	3	"        encoding %.3f ,"
water	229:19	0:0	4	"        encoding %.3f ,"
arg	230:6	230:36	3	t_encode/(float)CLOCKS_PER_SEC
water	230:6	0:0	4	t_encode
op	230:14	0:0	4	/
water	230:15	0:0	4	(
water	230:16	0:0	4	float
water	230:21	0:0	4	)
water	230:22	0:0	4	CLOCKS_PER_SEC
water	230:37	0:0	2	;
call	231:3	232:34	2	fprintf
arg	231:11	231:17	3	STDERR
water	231:11	0:0	4	STDERR
arg	231:19	231:45	3	" other %.3f seconds)\n\n"
water	231:19	0:0	4	" other %.3f seconds)\n\n"
arg	232:6	232:34	3	t_misc/(float)CLOCKS_PER_SEC
water	232:6	0:0	4	t_misc
op	232:12	0:0	4	/
water	232:13	0:0	4	(
water	232:14	0:0	4	float
water	232:19	0:0	4	)
water	232:20	0:0	4	CLOCKS_PER_SEC
water	232:35	0:0	2	;
if	234:3	235:46	2	(ierror == 0)
cond	234:7	234:17	3	ierror == 0
water	234:7	0:0	4	ierror
op	234:14	0:0	4	==
water	234:17	0:0	4	0
stmts	235:6	235:46	3	
call	235:6	235:45	4	fprintf
arg	235:14	235:20	5	STDERR
water	235:14	0:0	6	STDERR
arg	235:22	235:45	5	" libpng passes test\n"
water	235:22	0:0	6	" libpng passes test\n"
water	235:46	0:0	4	;
else	236:3	237:45	2
stmts	237:6	237:45	3	
call	237:6	237:44	4	fprintf
arg	237:14	237:20	5	STDERR
water	237:14	0:0	6	STDERR
arg	237:22	237:44	5	" libpng FAILS test\n"
water	237:22	0:0	6	" libpng FAILS test\n"
water	237:45	0:0	4	;
return	238:3	238:28	2	(int)(ierror!=0)
call	238:10	238:27	3	(int)
arg	238:16	238:27	4	ierror!=0
water	238:16	0:0	5	ierror
op	238:23	0:0	5	!=
water	238:26	0:0	5	0
