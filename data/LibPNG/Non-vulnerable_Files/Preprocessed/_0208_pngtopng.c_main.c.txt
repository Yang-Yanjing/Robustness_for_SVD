func	2:0	56:0	0	int	main
params	2:8	0:0	1	
param	2:9	2:17	2	int	argc
param	2:19	2:36	2	const char * *	argv
stmnts	0:0	55:16	1	
decl	4:3	4:17	2	int	result
op	4:14	0:0	2	=
water	4:16	0:0	2	1
if	5:3	51:3	2	(argc == 3)
cond	5:7	5:15	3	argc == 3
water	5:7	0:0	4	argc
op	5:12	0:0	4	==
water	5:15	0:0	4	3
stmts	6:3	51:3	3	
water	6:3	0:0	4	{
decl	7:6	7:21	4	png_image	image
call	9:6	9:36	4	memset
arg	9:13	9:19	5	&image
op	9:13	0:0	6	&
water	9:14	0:0	6	image
arg	9:21	9:22	5	0
water	9:21	0:0	6	0
arg	9:24	9:36	5	sizeofimage
op	9:24	0:0	6	sizeof
water	9:31	0:0	6	image
water	9:37	0:0	4	;
water	10:6	0:0	4	image
op	10:11	0:0	4	.
water	10:12	0:0	4	version
op	10:20	0:0	4	=
water	10:22	0:0	4	PNG_IMAGE_VERSION
water	10:39	0:0	4	;
if	11:6	47:6	4	(png_image_begin_read_from_file (& image ,argv [ 1 ] ))
cond	11:10	11:56	5	png_image_begin_read_from_file (& image ,argv [ 1 ] )
call	11:10	11:56	6	png_image_begin_read_from_file
arg	11:41	11:47	7	&image
op	11:41	0:0	8	&
water	11:42	0:0	8	image
arg	11:49	11:56	7	argv[1]
water	11:49	0:0	8	argv
op	11:53	0:0	8	[
water	11:54	0:0	8	1
op	11:55	0:0	8	]
stmts	12:6	47:6	5	
water	12:6	0:0	6	{
decl	13:9	13:25	6	png_bytep	buffer
water	17:9	0:0	6	image
op	17:14	0:0	6	.
water	17:15	0:0	6	format
op	17:22	0:0	6	=
water	17:24	0:0	6	PNG_FORMAT_RGBA
water	17:39	0:0	6	;
water	18:9	0:0	6	buffer
op	18:16	0:0	6	=
call	18:18	18:46	6	malloc
arg	18:25	18:46	7	PNG_IMAGE_SIZE(image)
call	18:25	18:45	8	PNG_IMAGE_SIZE
arg	18:40	18:45	9	image
water	18:40	0:0	10	image
water	18:47	0:0	6	;
if	19:9	43:9	6	(buffer != NULL)
cond	19:13	19:23	7	buffer != NULL
water	19:13	0:0	8	buffer
op	19:20	0:0	8	!=
water	19:23	0:0	8	NULL
stmts	20:9	43:9	7	
water	20:9	0:0	8	{
if	21:12	32:12	8	(png_image_finish_read (& image ,NULL ,buffer ,0 ,NULL ))
cond	21:16	22:22	9	png_image_finish_read (& image ,NULL ,buffer ,0 ,NULL )
call	21:16	22:22	10	png_image_finish_read
arg	21:38	21:44	11	&image
op	21:38	0:0	12	&
water	21:39	0:0	12	image
arg	21:46	21:50	11	NULL
water	21:46	0:0	12	NULL
arg	21:52	21:58	11	buffer
water	21:52	0:0	12	buffer
arg	22:15	22:16	11	0
water	22:15	0:0	12	0
arg	22:18	22:22	11	NULL
water	22:18	0:0	12	NULL
stmts	23:12	32:12	9	
water	23:12	0:0	10	{
if	24:15	27:28	10	(png_image_write_to_file (& image ,argv [ 2 ] ,0 ,buffer ,0 ,NULL ))
cond	24:19	26:22	11	png_image_write_to_file (& image ,argv [ 2 ] ,0 ,buffer ,0 ,NULL )
call	24:19	26:22	12	png_image_write_to_file
arg	24:43	24:49	13	&image
op	24:43	0:0	14	&
water	24:44	0:0	14	image
arg	24:51	24:58	13	argv[2]
water	24:51	0:0	14	argv
op	24:55	0:0	14	[
water	24:56	0:0	14	2
op	24:57	0:0	14	]
arg	25:18	25:19	13	0
water	25:18	0:0	14	0
arg	25:21	25:27	13	buffer
water	25:21	0:0	14	buffer
arg	25:29	25:30	13	0
water	25:29	0:0	14	0
arg	26:18	26:22	13	NULL
water	26:18	0:0	14	NULL
stmts	27:18	27:28	11	
water	27:18	0:0	12	result
op	27:25	0:0	12	=
water	27:27	0:0	12	0
water	27:28	0:0	12	;
else	28:15	30:36	10
stmts	29:18	30:36	11	
call	29:18	30:35	12	fprintf
arg	29:26	29:32	13	stderr
water	29:26	0:0	14	stderr
arg	29:34	29:60	13	"pngtopng: write %s: %s\n"
water	29:34	0:0	14	"pngtopng: write %s: %s\n"
arg	29:62	29:69	13	argv[2]
water	29:62	0:0	14	argv
op	29:66	0:0	14	[
water	29:67	0:0	14	2
op	29:68	0:0	14	]
arg	30:22	30:35	13	image.message
water	30:22	0:0	14	image
op	30:27	0:0	14	.
water	30:28	0:0	14	message
water	30:36	0:0	12	;
call	31:15	31:26	10	free
arg	31:20	31:26	11	buffer
water	31:20	0:0	12	buffer
water	31:27	0:0	10	;
water	32:12	0:0	10	}
else	33:12	42:12	8
stmts	34:12	42:12	9	
water	34:12	0:0	10	{
call	35:15	36:32	10	fprintf
arg	35:23	35:29	11	stderr
water	35:23	0:0	12	stderr
arg	35:31	35:56	11	"pngtopng: read %s: %s\n"
water	35:31	0:0	12	"pngtopng: read %s: %s\n"
arg	35:58	35:65	11	argv[1]
water	35:58	0:0	12	argv
op	35:62	0:0	12	[
water	35:63	0:0	12	1
op	35:64	0:0	12	]
arg	36:19	36:32	11	image.message
water	36:19	0:0	12	image
op	36:24	0:0	12	.
water	36:25	0:0	12	message
water	36:33	0:0	10	;
call	41:15	41:36	10	png_image_free
arg	41:30	41:36	11	&image
op	41:30	0:0	12	&
water	41:31	0:0	12	image
water	41:37	0:0	10	;
water	42:12	0:0	10	}
water	43:9	0:0	8	}
else	44:9	46:52	6
stmts	45:12	46:52	7	
call	45:12	46:51	8	fprintf
arg	45:20	45:26	9	stderr
water	45:20	0:0	10	stderr
arg	45:28	45:66	9	"pngtopng: out of memory: %lu bytes\n"
water	45:28	0:0	10	"pngtopng: out of memory: %lu bytes\n"
arg	46:15	46:51	9	(unsignedlong)PNG_IMAGE_SIZE(image)
water	46:15	0:0	10	(
water	46:16	0:0	10	unsigned
water	46:25	0:0	10	long
water	46:29	0:0	10	)
call	46:30	46:50	10	PNG_IMAGE_SIZE
arg	46:45	46:50	11	image
water	46:45	0:0	12	image
water	46:52	0:0	8	;
water	47:6	0:0	6	}
else	48:6	50:70	4
stmts	50:9	50:70	5	
call	50:9	50:69	6	fprintf
arg	50:17	50:23	7	stderr
water	50:17	0:0	8	stderr
arg	50:25	50:45	7	"pngtopng: %s: %s\n"
water	50:25	0:0	8	"pngtopng: %s: %s\n"
arg	50:47	50:54	7	argv[1]
water	50:47	0:0	8	argv
op	50:51	0:0	8	[
water	50:52	0:0	8	1
op	50:53	0:0	8	]
arg	50:56	50:69	7	image.message
water	50:56	0:0	8	image
op	50:61	0:0	8	.
water	50:62	0:0	8	message
water	50:70	0:0	6	;
water	51:3	0:0	4	}
else	52:3	54:75	2
stmts	54:6	54:75	3	
call	54:6	54:74	4	fprintf
arg	54:14	54:20	5	stderr
water	54:14	0:0	6	stderr
arg	54:22	54:74	5	"pngtopng: usage: pngtopng input-file output-file\n"
water	54:22	0:0	6	"pngtopng: usage: pngtopng input-file output-file\n"
water	54:75	0:0	4	;
return	55:3	55:16	2	result
water	55:10	0:0	3	result
