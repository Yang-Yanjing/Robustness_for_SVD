func	1:0	22:0	0	static int	png_have_neon
params	2:13	0:0	1	
param	2:14	2:33	2	png_structp	png_ptr
stmnts	0:0	21:11	1	
decl	4:3	4:45	2	int	fd
op	4:10	0:0	2	=
call	4:12	4:44	3	open
arg	4:17	4:34	4	"/proc/self/auxv"
water	4:17	0:0	5	"/proc/self/auxv"
arg	4:36	4:44	4	O_RDONLY
water	4:36	0:0	5	O_RDONLY
decl	5:3	5:19	2	Elf32_auxv_t	aux
if	7:3	11:3	2	(fd == - 1)
cond	7:7	7:14	3	fd == - 1
water	7:7	0:0	4	fd
op	7:10	0:0	4	==
op	7:13	0:0	4	-
water	7:14	0:0	4	1
stmts	8:3	11:3	3	
water	8:3	0:0	4	{
call	9:6	9:56	4	png_warning
arg	9:18	9:25	5	png_ptr
water	9:18	0:0	6	png_ptr
arg	9:27	9:56	5	"/proc/self/auxv open failed"
water	9:27	0:0	6	"/proc/self/auxv open failed"
water	9:57	0:0	4	;
return	10:6	10:14	4	0
water	10:13	0:0	5	0
water	11:3	0:0	4	}
while	12:3	19:3	2	(safe_read (png_ptr ,fd ,& aux ,sizeof aux ) == sizeof aux)
cond	12:10	12:61	3	safe_read (png_ptr ,fd ,& aux ,sizeof aux ) == sizeof aux
call	12:10	12:49	4	safe_read
arg	12:20	12:27	5	png_ptr
water	12:20	0:0	6	png_ptr
arg	12:29	12:31	5	fd
water	12:29	0:0	6	fd
arg	12:33	12:37	5	&aux
op	12:33	0:0	6	&
water	12:34	0:0	6	aux
arg	12:39	12:49	5	sizeofaux
op	12:39	0:0	6	sizeof
water	12:46	0:0	6	aux
op	12:51	0:0	4	==
op	12:54	0:0	4	sizeof
water	12:61	0:0	4	aux
stmts	13:3	19:3	3	
water	13:3	0:0	4	{
if	14:6	18:6	4	(aux . a_type == AT_HWCAP && ( aux . a_un . a_val & HWCAP_NEON ) != 0)
cond	14:10	14:69	5	aux . a_type == AT_HWCAP && ( aux . a_un . a_val & HWCAP_NEON ) != 0
water	14:10	0:0	6	aux
op	14:13	0:0	6	.
water	14:14	0:0	6	a_type
op	14:21	0:0	6	==
water	14:24	0:0	6	AT_HWCAP
op	14:33	0:0	6	&&
water	14:36	0:0	6	(
water	14:37	0:0	6	aux
op	14:40	0:0	6	.
water	14:41	0:0	6	a_un
op	14:45	0:0	6	.
water	14:46	0:0	6	a_val
op	14:52	0:0	6	&
water	14:54	0:0	6	HWCAP_NEON
water	14:64	0:0	6	)
op	14:66	0:0	6	!=
water	14:69	0:0	6	0
stmts	15:6	18:6	5	
water	15:6	0:0	6	{
call	16:9	16:17	6	close
arg	16:15	16:17	7	fd
water	16:15	0:0	8	fd
water	16:18	0:0	6	;
return	17:9	17:17	6	1
water	17:16	0:0	7	1
water	18:6	0:0	6	}
water	19:3	0:0	4	}
call	20:3	20:11	2	close
arg	20:9	20:11	3	fd
water	20:9	0:0	4	fd
water	20:12	0:0	2	;
return	21:3	21:11	2	0
water	21:10	0:0	3	0
