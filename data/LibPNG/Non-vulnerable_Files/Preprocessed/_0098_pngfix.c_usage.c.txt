func	1:0	178:0	0	static void	usage
params	2:5	0:0	1	
param	2:6	2:22	2	const char *	prog
stmnts	0:0	177:12	1	
decl	5:3	5:11	2	size_t	i
water	6:3	0:0	2	static
water	6:10	0:0	2	const
water	6:16	0:0	2	char
op	6:21	0:0	2	*
water	6:22	0:0	2	usage_string
op	6:34	0:0	2	[
op	6:35	0:0	2	]
op	6:37	0:0	2	=
water	6:39	0:0	2	{
water	7:0	0:0	2	"  Tests, optimizes and optionally fixes the zlib header in PNG files."
water	7:71	0:0	2	,
water	8:0	0:0	2	"  Optionally, when fixing, strips ancilliary chunks from the file."
water	8:68	0:0	2	,
water	9:0	0:0	2	0
water	9:1	0:0	2	,
water	10:0	0:0	2	"OPTIONS"
water	10:9	0:0	2	,
water	11:0	0:0	2	"  OPERATION"
water	11:13	0:0	2	,
water	12:0	0:0	2	"      By default files are just checked for readability with a summary of the"
water	12:79	0:0	2	,
water	13:0	0:0	2	"      of zlib issues founds for each compressed chunk and the IDAT stream in"
water	13:78	0:0	2	,
water	14:0	0:0	2	"      the file."
water	14:17	0:0	2	,
water	15:0	0:0	2	"    --optimize (-o):"
water	15:22	0:0	2	,
water	16:0	0:0	2	"      Find the smallest deflate window size for the compressed data."
water	16:70	0:0	2	,
water	17:0	0:0	2	"    --strip=[none|crc|unsafe|unused|transform|color|all]:"
water	17:59	0:0	2	,
water	18:0	0:0	2	"        none (default):   Retain all chunks."
water	18:46	0:0	2	,
water	19:0	0:0	2	"        crc:    Remove chunks with a bad CRC."
water	19:47	0:0	2	,
water	20:0	0:0	2	"        unsafe: Remove chunks that may be unsafe to retain if the image data"
water	20:78	0:0	2	,
water	21:0	0:0	2	"                is modified.  This is set automatically if --max is given but"
water	21:79	0:0	2	,
water	22:0	0:0	2	"                may be cancelled by a later --strip=none."
water	22:59	0:0	2	,
water	23:0	0:0	2	"        unused: Remove chunks not used by libpng when decoding an image."
water	23:74	0:0	2	,
water	24:0	0:0	2	"                This retains any chunks that might be used by libpng image"
water	24:76	0:0	2	,
water	25:0	0:0	2	"                transformations."
water	25:34	0:0	2	,
water	26:0	0:0	2	"        transform: unused+bKGD."
water	26:33	0:0	2	,
water	27:0	0:0	2	"        color:  transform+iCCP and cHRM."
water	27:42	0:0	2	,
water	28:0	0:0	2	"        all:    color+gAMA and sRGB."
water	28:38	0:0	2	,
water	29:0	0:0	2	"      Only ancillary chunks are ever removed.  In addition the tRNS and sBIT"
water	29:78	0:0	2	,
water	30:0	0:0	2	"      chunks are never removed as they affect exact interpretation of the"
water	30:75	0:0	2	,
water	31:0	0:0	2	"      image pixel values.  The following known chunks are treated specially"
water	31:77	0:0	2	,
water	32:0	0:0	2	"      by the above options:"
water	32:29	0:0	2	,
water	33:0	0:0	2	"        gAMA, sRGB [all]: These specify the gamma encoding used for the pixel"
water	33:79	0:0	2	,
water	34:0	0:0	2	"            values."
water	34:21	0:0	2	,
water	35:0	0:0	2	"        cHRM, iCCP [color]: These specify how colors are encoded.  iCCP also"
water	35:78	0:0	2	,
water	36:0	0:0	2	"            specifies the exact encoding of a pixel value however in practice"
water	36:79	0:0	2	,
water	37:0	0:0	2	"            most programs will ignore it."
water	37:43	0:0	2	,
water	38:0	0:0	2	"        bKGD [transform]: This is used by libpng transforms."
water	39:0	0:0	2	"    --max=<number>:"
water	39:21	0:0	2	,
water	40:0	0:0	2	"      Use IDAT chunks sized <number>.  If no number is given the the IDAT"
water	40:75	0:0	2	,
water	41:0	0:0	2	"      chunks will be the maximum size permitted; 2^31-1 bytes.  If the option"
water	41:79	0:0	2	,
water	42:0	0:0	2	"      is omitted the original chunk sizes will not be changed.  When the"
water	42:74	0:0	2	,
water	43:0	0:0	2	"      option is given --strip=unsafe is set automatically, this may be"
water	43:72	0:0	2	,
water	44:0	0:0	2	"      cancelled if you know that all unknown unsafe-to-copy chunks really are"
water	44:79	0:0	2	,
water	45:0	0:0	2	"      safe to copy across an IDAT size change.  This is true of all chunks"
water	45:76	0:0	2	,
water	46:0	0:0	2	"      that have ever been formally proposed as PNG extensions."
water	46:64	0:0	2	,
water	47:0	0:0	2	"  MESSAGES"
water	47:12	0:0	2	,
water	48:0	0:0	2	"      By default the program only outputs summaries for each file."
water	48:68	0:0	2	,
water	49:0	0:0	2	"    --quiet (-q):"
water	49:19	0:0	2	,
water	50:0	0:0	2	"      Do not output the summaries except for files which cannot be read. With"
water	50:79	0:0	2	,
water	51:0	0:0	2	"      two --quiets these are not output either."
water	51:49	0:0	2	,
water	52:0	0:0	2	"    --errors (-e):"
water	52:20	0:0	2	,
water	53:0	0:0	2	"      Output errors from libpng and the program (except too-far-back)."
water	53:72	0:0	2	,
water	54:0	0:0	2	"    --warnings (-w):"
water	54:22	0:0	2	,
water	55:0	0:0	2	"      Output warnings from libpng."
water	55:36	0:0	2	,
water	56:0	0:0	2	"  OUTPUT"
water	56:10	0:0	2	,
water	57:0	0:0	2	"      By default nothing is written."
water	57:38	0:0	2	,
water	58:0	0:0	2	"    --out=<file>:"
water	58:19	0:0	2	,
water	59:0	0:0	2	"      Write the optimized/corrected version of the next PNG to <file>.  This"
water	59:78	0:0	2	,
water	60:0	0:0	2	"      overrides the following two options"
water	60:43	0:0	2	,
water	61:0	0:0	2	"    --suffix=<suffix>:"
water	61:24	0:0	2	,
water	62:0	0:0	2	"      Set --out=<name><suffix> for all following files unless overridden on"
water	62:77	0:0	2	,
water	63:0	0:0	2	"      a per-file basis by explicit --out."
water	63:43	0:0	2	,
water	64:0	0:0	2	"    --prefix=<prefix>:"
water	64:24	0:0	2	,
water	65:0	0:0	2	"      Set --out=<prefix><name> for all the following files unless overridden"
water	65:78	0:0	2	,
water	66:0	0:0	2	"      on a per-file basis by explicit --out."
water	66:46	0:0	2	,
water	67:0	0:0	2	"      These two options can be used together to produce a suffix and prefix."
water	67:78	0:0	2	,
water	68:0	0:0	2	"  INTERNAL OPTIONS"
water	68:20	0:0	2	,
water	71:0	0:0	2	"    --test:"
water	71:13	0:0	2	,
water	72:0	0:0	2	"      Test the PNG_MAXIMUM_INFLATE_WINDOW option.  Setting this disables"
water	72:74	0:0	2	,
water	73:0	0:0	2	"      output as this would produce a broken file."
water	73:51	0:0	2	,
water	76:0	0:0	2	0
water	76:1	0:0	2	,
water	77:0	0:0	2	"EXIT CODES"
water	77:12	0:0	2	,
water	78:0	0:0	2	"  *** SUBJECT TO CHANGE ***"
water	78:29	0:0	2	,
water	79:0	0:0	2	"  The program exit code is value in the range 0..127 holding a bit mask of"
water	79:76	0:0	2	,
water	80:0	0:0	2	"  the following codes.  Notice that the results for each file are combined"
water	80:76	0:0	2	,
water	81:0	0:0	2	"  together - check one file at a time to get a meaningful error code!"
water	81:71	0:0	2	,
water	82:0	0:0	2	"    0x01: The zlib too-far-back error existed in at least one chunk."
water	82:70	0:0	2	,
water	83:0	0:0	2	"    0x02: At least once chunk had a CRC error."
water	83:48	0:0	2	,
water	84:0	0:0	2	"    0x04: A chunk length was incorrect."
water	84:41	0:0	2	,
water	85:0	0:0	2	"    0x08: The file was truncated."
water	85:35	0:0	2	,
water	86:0	0:0	2	"  Errors less than 16 are potentially recoverable, for a single file if the"
water	86:77	0:0	2	,
water	87:0	0:0	2	"  exit code is less than 16 the file could be read (with corrections if a"
water	87:75	0:0	2	,
water	88:0	0:0	2	"  non-zero code is returned)."
water	88:31	0:0	2	,
water	89:0	0:0	2	"    0x10: The file could not be read, even with corrections."
water	89:62	0:0	2	,
water	90:0	0:0	2	"    0x20: The output file could not be written."
water	90:49	0:0	2	,
water	91:0	0:0	2	"    0x40: An unexpected, potentially internal, error occured."
water	91:63	0:0	2	,
water	92:0	0:0	2	"  If the command line arguments are incorrect the program exits with exit"
water	92:75	0:0	2	,
water	93:0	0:0	2	"  255.  Some older operating systems only support 7-bit exit codes, on those"
water	93:78	0:0	2	,
water	94:0	0:0	2	"  systems it is suggested that this program is first tested by supplying"
water	94:74	0:0	2	,
water	95:0	0:0	2	"  invalid arguments."
water	95:22	0:0	2	,
water	96:0	0:0	2	0
water	96:1	0:0	2	,
water	97:0	0:0	2	"DESCRIPTION"
water	97:13	0:0	2	,
water	98:0	0:0	2	"  "
water	98:5	0:0	2	PROGRAM_NAME
water	98:18	0:0	2	":"
water	98:21	0:0	2	,
water	99:0	0:0	2	"  checks each PNG file on the command line for errors.  By default errors are"
water	99:79	0:0	2	,
water	100:0	0:0	2	"  not output and the program just returns an exit code and prints a summary."
water	100:78	0:0	2	,
water	101:0	0:0	2	"  With the --quiet (-q) option the summaries are suppressed too and the"
water	101:73	0:0	2	,
water	102:0	0:0	2	"  program only outputs unexpected errors (internal errors and file open"
water	102:73	0:0	2	,
water	103:0	0:0	2	"  errors)."
water	103:12	0:0	2	,
water	104:0	0:0	2	"  Various known problems in PNG files are fixed while the file is being read"
water	104:78	0:0	2	,
water	105:0	0:0	2	"  The exit code says what problems were fixed.  In particular the zlib error:"
water	105:79	0:0	2	,
water	106:0	0:0	2	0
water	106:1	0:0	2	,
water	107:0	0:0	2	"        \"invalid distance too far back\""
water	107:43	0:0	2	,
water	108:0	0:0	2	0
water	108:1	0:0	2	,
water	109:0	0:0	2	"  caused by an incorrect optimization of a zlib stream is fixed in any"
water	109:72	0:0	2	,
water	110:0	0:0	2	"  compressed chunk in which it is encountered.  An integrity problem of the"
water	110:77	0:0	2	,
water	111:0	0:0	2	"  PNG stream caused by a bug in libpng which wrote an incorrect chunk length"
water	111:78	0:0	2	,
water	112:0	0:0	2	"  is also fixed.  Chunk CRC errors are automatically fixed up."
water	112:64	0:0	2	,
water	113:0	0:0	2	0
water	113:1	0:0	2	,
water	114:0	0:0	2	"  Setting one of the \"OUTPUT\" options causes the possibly modified file to"
water	114:78	0:0	2	,
water	115:0	0:0	2	"  be written to a new file."
water	115:29	0:0	2	,
water	116:0	0:0	2	0
water	116:1	0:0	2	,
water	117:0	0:0	2	"  Notice that some PNG files with the zlib optimization problem can still be"
water	117:78	0:0	2	,
water	118:0	0:0	2	"  read by libpng under some circumstances.  This program will still detect"
water	118:76	0:0	2	,
water	119:0	0:0	2	"  and, if requested, correct the error."
water	119:41	0:0	2	,
water	120:0	0:0	2	0
water	120:1	0:0	2	,
water	121:0	0:0	2	"  The program will reliably process all files on the command line unless"
water	121:74	0:0	2	,
water	122:0	0:0	2	"  either an invalid argument causes the usage message (this message) to be"
water	122:76	0:0	2	,
water	123:0	0:0	2	"  produced or the program crashes."
water	123:36	0:0	2	,
water	124:0	0:0	2	0
water	124:1	0:0	2	,
water	125:0	0:0	2	"  The summary lines describe issues encountered with the zlib compressed"
water	125:74	0:0	2	,
water	126:0	0:0	2	"  stream of a chunk.  They have the following format, which is SUBJECT TO"
water	126:75	0:0	2	,
water	127:0	0:0	2	"  CHANGE in the future:"
water	127:25	0:0	2	,
water	128:0	0:0	2	0
water	128:1	0:0	2	,
water	129:0	0:0	2	"     chunk reason comp-level p1 p2 p3 p4 file"
water	129:47	0:0	2	,
water	130:0	0:0	2	0
water	130:1	0:0	2	,
water	131:0	0:0	2	"  p1 through p4 vary according to the 'reason'.  There are always 8 space"
water	131:75	0:0	2	,
water	132:0	0:0	2	"  separated fields.  Reasons specific formats are:"
water	132:52	0:0	2	,
water	133:0	0:0	2	0
water	133:1	0:0	2	,
water	134:0	0:0	2	"     chunk ERR status code read-errno write-errno message file"
water	134:64	0:0	2	,
water	135:0	0:0	2	"     chunk SKP comp-level file-bits zlib-rc compressed message file"
water	135:69	0:0	2	,
water	136:0	0:0	2	"     chunk ??? comp-level file-bits ok-bits compressed uncompress file"
water	136:72	0:0	2	,
water	137:0	0:0	2	0
water	137:1	0:0	2	,
water	138:0	0:0	2	"  The various fields are"
water	138:26	0:0	2	,
water	139:0	0:0	2	0
water	139:1	0:0	2	,
water	140:0	0:0	2	"$1 chunk:      The chunk type of a chunk in the file or 'HEAD' if a problem"
water	140:77	0:0	2	,
water	141:0	0:0	2	"               is reported by libpng at the start of the IDAT stream."
water	141:71	0:0	2	,
water	142:0	0:0	2	"$2 reason:     One of:"
water	142:24	0:0	2	,
water	143:0	0:0	2	"          CHK: A zlib header checksum was detected and fixed."
water	143:63	0:0	2	,
water	144:0	0:0	2	"          TFB: The zlib too far back error was detected and fixed."
water	144:68	0:0	2	,
water	145:0	0:0	2	"          OK : No errors were detected in the zlib stream and optimization"
water	145:76	0:0	2	,
water	146:0	0:0	2	"               was not requested, or was not possible."
water	146:56	0:0	2	,
water	147:0	0:0	2	"          OPT: The zlib stream window bits value could be improved (and was)."
water	147:79	0:0	2	,
water	148:0	0:0	2	"          SKP: The chunk was skipped because of a zlib issue (zlib-rc) with"
water	148:77	0:0	2	,
water	149:0	0:0	2	"               explanation 'message'"
water	149:38	0:0	2	,
water	150:0	0:0	2	"          ERR: The read of the file was aborted.  The parameters explain why."
water	150:79	0:0	2	,
water	151:0	0:0	2	"$3 status:     For 'ERR' the accumulate status code from 'EXIT CODES' above."
water	151:78	0:0	2	,
water	152:0	0:0	2	"               This is printed as a 2 digit hexadecimal value"
water	152:63	0:0	2	,
water	153:0	0:0	2	"   comp-level: The recorded compression level (FLEVEL) of a zlib stream"
water	153:73	0:0	2	,
water	154:0	0:0	2	"               expressed as a string {supfast,stdfast,default,maximum}"
water	154:72	0:0	2	,
water	155:0	0:0	2	"$4 code:       The file exit code; where stop was called, as a fairly terse"
water	155:77	0:0	2	,
water	156:0	0:0	2	"               string {warning,libpng,zlib,invalid,read,write,unexpected}."
water	156:76	0:0	2	,
water	157:0	0:0	2	"   file-bits:  The zlib window bits recorded in the file."
water	157:59	0:0	2	,
water	158:0	0:0	2	"$5 read-errno: A system errno value from a read translated by strerror(3)."
water	158:76	0:0	2	,
water	159:0	0:0	2	"   zlib-rc:    A zlib return code as a string (see zlib.h)."
water	159:61	0:0	2	,
water	160:0	0:0	2	"   ok-bits:    The smallest zlib window bits value that works."
water	160:64	0:0	2	,
water	161:0	0:0	2	"$6 write-errno:A system errno value from a write translated by strerror(3)."
water	161:77	0:0	2	,
water	162:0	0:0	2	"   compressed: The count of compressed bytes in the zlib stream, when the"
water	162:75	0:0	2	,
water	163:0	0:0	2	"               reason is 'SKP'; this is a count of the bytes read from the"
water	163:76	0:0	2	,
water	164:0	0:0	2	"               stream when the fatal error was encountered."
water	164:61	0:0	2	,
water	165:0	0:0	2	"$7 message:    An error message (spaces replaced by _, as in all parameters),"
water	165:79	0:0	2	,
water	166:0	0:0	2	"   uncompress: The count of bytes from uncompressing the zlib stream; this"
water	166:76	0:0	2	,
water	167:0	0:0	2	"               may not be the same as the number of bytes in the image."
water	167:73	0:0	2	,
water	168:0	0:0	2	"$8 file:       The name of the file (this may contain spaces)."
water	168:64	0:0	2	,
water	169:0	0:0	2	}
water	169:1	0:0	2	;
call	170:3	170:59	2	fprintf
arg	170:11	170:17	3	stderr
water	170:11	0:0	4	stderr
arg	170:19	170:53	3	"Usage: %s {[options] png-file}\n"
water	170:19	0:0	4	"Usage: %s {[options] png-file}\n"
arg	170:55	170:59	3	prog
water	170:55	0:0	4	prog
water	170:60	0:0	2	;
for	171:3	176:3	2	(i = 0 ;i < ( sizeof usage_string ) / ( sizeof usage_string [ 0 ] );++ i)
forinit	171:8	171:11	3	i = 0 ;
water	171:8	0:0	4	i
op	171:9	0:0	4	=
water	171:10	0:0	4	0
water	171:11	0:0	4	;
cond	171:13	171:62	3	i < ( sizeof usage_string ) / ( sizeof usage_string [ 0 ] )
water	171:13	0:0	4	i
op	171:15	0:0	4	<
water	171:17	0:0	4	(
op	171:18	0:0	4	sizeof
water	171:25	0:0	4	usage_string
water	171:37	0:0	4	)
op	171:38	0:0	4	/
water	171:39	0:0	4	(
op	171:40	0:0	4	sizeof
water	171:47	0:0	4	usage_string
op	171:59	0:0	4	[
water	171:60	0:0	4	0
op	171:61	0:0	4	]
water	171:62	0:0	4	)
forexpr	171:65	171:67	3	++ i
op	171:65	0:0	4	++
water	171:67	0:0	4	i
stmts	172:3	176:3	3	
water	172:3	0:0	4	{
if	173:6	174:39	4	(usage_string [ i ] != 0)
cond	173:10	173:29	5	usage_string [ i ] != 0
water	173:10	0:0	6	usage_string
op	173:22	0:0	6	[
water	173:23	0:0	6	i
op	173:24	0:0	6	]
op	173:26	0:0	6	!=
water	173:29	0:0	6	0
stmts	174:9	174:39	5	
call	174:9	174:38	6	fputs
arg	174:15	174:30	7	usage_string[i]
water	174:15	0:0	8	usage_string
op	174:27	0:0	8	[
water	174:28	0:0	8	i
op	174:29	0:0	8	]
arg	174:32	174:38	7	stderr
water	174:32	0:0	8	stderr
water	174:39	0:0	6	;
call	175:6	175:24	4	fputc
arg	175:12	175:16	5	'\n'
water	175:12	0:0	6	'\n'
arg	175:18	175:24	5	stderr
water	175:18	0:0	6	stderr
water	175:25	0:0	4	;
water	176:3	0:0	4	}
call	177:3	177:11	2	exit
arg	177:8	177:11	3	255
water	177:8	0:0	4	255
water	177:12	0:0	2	;
