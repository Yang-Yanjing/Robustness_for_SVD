func	2:0	112:0	0	int	validation_muldiv
params	2:21	0:0	1	
param	2:22	2:31	2	int	count
param	2:33	2:41	2	int	argc
param	2:43	2:54	2	char * *	argv
stmnts	0:0	111:11	1	
decl	4:3	4:17	2	int	tested
op	4:14	0:0	2	=
water	4:16	0:0	2	0
decl	5:3	5:19	2	int	overflow
op	5:16	0:0	2	=
water	5:18	0:0	2	0
decl	6:3	6:16	2	int	error
op	6:13	0:0	2	=
water	6:15	0:0	2	0
decl	7:3	7:18	2	int	error64
op	7:15	0:0	2	=
water	7:17	0:0	2	0
decl	8:3	8:17	2	int	passed
op	8:14	0:0	2	=
water	8:16	0:0	2	0
decl	9:3	9:19	2	int	randbits
op	9:16	0:0	2	=
water	9:18	0:0	2	0
decl	10:3	10:25	2	png_uint_32	randbuffer
decl	11:3	11:20	2	png_fixed_point	a
decl	12:3	12:24	2	png_int_32	times
water	12:19	0:0	2	,
decl	12:3	12:24	2	png_int_32	div
while	13:3	17:6	2	(-- argc > 0)
cond	13:10	13:19	3	-- argc > 0
op	13:10	0:0	4	--
water	13:12	0:0	4	argc
op	13:17	0:0	4	>
water	13:19	0:0	4	0
stmts	14:6	17:6	3	
water	14:6	0:0	4	{
call	15:9	15:57	4	fprintf
arg	15:17	15:23	5	stderr
water	15:17	0:0	6	stderr
arg	15:25	15:48	5	"unknown argument %s\n"
water	15:25	0:0	6	"unknown argument %s\n"
arg	15:50	15:57	5	*++argv
op	15:50	0:0	6	*
op	15:51	0:0	6	++
water	15:53	0:0	6	argv
water	15:58	0:0	4	;
return	16:9	16:17	4	1
water	16:16	0:0	5	1
water	17:6	0:0	4	}
water	19:3	0:0	2	randbuffer
op	19:14	0:0	2	=
water	19:16	0:0	2	RAND_MAX
water	19:24	0:0	2	;
while	20:3	20:55	2	(randbuffer != 0)
cond	20:10	20:24	3	randbuffer != 0
water	20:10	0:0	4	randbuffer
op	20:21	0:0	4	!=
water	20:24	0:0	4	0
stmts	20:27	20:55	3	
op	20:27	0:0	4	++
water	20:29	0:0	4	randbits
water	20:37	0:0	4	,
water	20:39	0:0	4	randbuffer
op	20:50	0:0	4	>>=
water	20:54	0:0	4	1
water	20:55	0:0	4	;
call	21:3	21:72	2	printf
arg	21:10	21:62	3	"Using random number generator that makes %d bits\n"
water	21:10	0:0	4	"Using random number generator that makes %d bits\n"
arg	21:64	21:72	3	randbits
water	21:64	0:0	4	randbits
water	21:73	0:0	2	;
for	22:3	23:52	2	(div = 0 ;div < 32;div += randbits)
forinit	22:8	22:13	3	div = 0 ;
water	22:8	0:0	4	div
op	22:11	0:0	4	=
water	22:12	0:0	4	0
water	22:13	0:0	4	;
cond	22:15	22:19	3	div < 32
water	22:15	0:0	4	div
op	22:18	0:0	4	<
water	22:19	0:0	4	32
forexpr	22:23	22:30	3	div += randbits
water	22:23	0:0	4	div
op	22:27	0:0	4	+=
water	22:30	0:0	4	randbits
stmts	23:6	23:52	3	
water	23:6	0:0	4	randbuffer
op	23:17	0:0	4	=
water	23:19	0:0	4	(
water	23:20	0:0	4	randbuffer
op	23:31	0:0	4	<<
water	23:34	0:0	4	randbits
water	23:42	0:0	4	)
op	23:44	0:0	4	^
call	23:46	23:51	4	rand
water	23:52	0:0	4	;
water	24:3	0:0	2	a
op	24:5	0:0	2	=
water	24:7	0:0	2	0
water	24:8	0:0	2	;
water	25:3	0:0	2	times
op	25:9	0:0	2	=
water	25:11	0:0	2	div
op	25:15	0:0	2	=
water	25:17	0:0	2	0
water	25:18	0:0	2	;
do	26:3	107:3	2	(-- count > 0)
cond	108:10	108:20	3	-- count > 0
op	108:10	0:0	4	--
water	108:12	0:0	4	count
op	108:18	0:0	4	>
water	108:20	0:0	4	0
stmts	27:3	107:3	3	
water	27:3	0:0	4	{
decl	28:6	28:28	4	png_fixed_point	result
water	33:6	0:0	4	long
water	33:11	0:0	4	long
water	33:16	0:0	4	int
water	33:20	0:0	4	fp
water	33:22	0:0	4	,
water	33:24	0:0	4	fpround
water	33:31	0:0	4	;
decl	34:6	34:26	4	unsigned long	hi
water	34:22	0:0	4	,
decl	34:6	34:26	4	unsigned long	lo
decl	35:6	35:12	4	int	ok
water	39:6	0:0	4	{
decl	40:9	40:20	4	long	u1
water	40:16	0:0	4	,
decl	40:9	40:20	4	long	u2
decl	41:9	41:18	4	int	n
op	41:15	0:0	4	=
water	41:17	0:0	4	0
if	42:9	42:34	4	(a < 0)
cond	42:13	42:17	5	a < 0
water	42:13	0:0	6	a
op	42:15	0:0	6	<
water	42:17	0:0	6	0
stmts	42:20	42:34	5	
water	42:20	0:0	6	u1
op	42:23	0:0	6	=
op	42:25	0:0	6	-
water	42:26	0:0	6	a
water	42:27	0:0	6	,
water	42:29	0:0	6	n
op	42:31	0:0	6	=
water	42:33	0:0	6	1
water	42:34	0:0	6	;
else	42:36	42:47	4
stmts	42:41	42:47	5	
water	42:41	0:0	6	u1
op	42:44	0:0	6	=
water	42:46	0:0	6	a
water	42:47	0:0	6	;
if	43:9	43:43	4	(times < 0)
cond	43:13	43:21	5	times < 0
water	43:13	0:0	6	times
op	43:19	0:0	6	<
water	43:21	0:0	6	0
stmts	43:24	43:43	5	
water	43:24	0:0	6	u2
op	43:27	0:0	6	=
op	43:29	0:0	6	-
water	43:30	0:0	6	times
water	43:35	0:0	6	,
water	43:37	0:0	6	n
op	43:39	0:0	6	=
op	43:41	0:0	6	!
water	43:42	0:0	6	n
water	43:43	0:0	6	;
else	43:45	43:60	4
stmts	43:50	43:60	5	
water	43:50	0:0	6	u2
op	43:53	0:0	6	=
water	43:55	0:0	6	times
water	43:60	0:0	6	;
call	44:9	44:43	4	png_64bit_product
arg	44:27	44:29	5	u1
water	44:27	0:0	6	u1
arg	44:31	44:33	5	u2
water	44:31	0:0	6	u2
arg	44:35	44:38	5	&hi
op	44:35	0:0	6	&
water	44:36	0:0	6	hi
arg	44:40	44:43	5	&lo
op	44:40	0:0	6	&
water	44:41	0:0	6	lo
water	44:44	0:0	4	;
if	45:9	51:9	4	(n)
cond	45:13	45:13	5	n
water	45:13	0:0	6	n
stmts	46:9	51:9	5	
water	46:9	0:0	6	{
water	48:12	0:0	6	lo
op	48:15	0:0	6	=
water	48:17	0:0	6	(
water	48:18	0:0	6	(
water	48:19	0:0	6	~lo
water	48:22	0:0	6	)
op	48:24	0:0	6	+
water	48:26	0:0	6	1
water	48:27	0:0	6	)
op	48:29	0:0	6	&
water	48:31	0:0	6	0
water	48:32	0:0	6	xffffffff
water	48:41	0:0	6	;
water	49:12	0:0	6	hi
op	49:15	0:0	6	=
water	49:17	0:0	6	~hi
water	49:20	0:0	6	;
if	50:12	50:29	6	(lo == 0)
cond	50:16	50:22	7	lo == 0
water	50:16	0:0	8	lo
op	50:19	0:0	8	==
water	50:22	0:0	8	0
stmts	50:25	50:29	7	
op	50:25	0:0	8	++
water	50:27	0:0	8	hi
water	50:29	0:0	8	;
water	51:9	0:0	6	}
water	52:6	0:0	4	}
water	53:6	0:0	4	fp
op	53:9	0:0	4	=
water	53:11	0:0	4	a
water	53:12	0:0	4	;
water	54:6	0:0	4	fp
op	54:9	0:0	4	*=
water	54:12	0:0	4	times
water	54:17	0:0	4	;
if	55:6	60:6	4	(( fp & 0 xffffffff ) != lo || ( ( fp >> 32 ) & 0 xffffffff ) != hi)
cond	55:10	55:66	5	( fp & 0 xffffffff ) != lo || ( ( fp >> 32 ) & 0 xffffffff ) != hi
water	55:10	0:0	6	(
water	55:11	0:0	6	fp
op	55:14	0:0	6	&
water	55:16	0:0	6	0
water	55:17	0:0	6	xffffffff
water	55:26	0:0	6	)
op	55:28	0:0	6	!=
water	55:31	0:0	6	lo
op	55:34	0:0	6	||
water	55:37	0:0	6	(
water	55:38	0:0	6	(
water	55:39	0:0	6	fp
op	55:42	0:0	6	>>
water	55:45	0:0	6	32
water	55:47	0:0	6	)
op	55:49	0:0	6	&
water	55:51	0:0	6	0
water	55:52	0:0	6	xffffffff
water	55:61	0:0	6	)
op	55:63	0:0	6	!=
water	55:66	0:0	6	hi
stmts	56:6	60:6	5	
water	56:6	0:0	6	{
call	57:9	58:32	6	fprintf
arg	57:17	57:23	7	stderr
water	57:17	0:0	8	stderr
arg	57:25	57:76	7	"png_64bit_product %d * %d -> %lx|%.8lx not %llx\n"
water	57:25	0:0	8	"png_64bit_product %d * %d -> %lx|%.8lx not %llx\n"
arg	58:12	58:13	7	a
water	58:12	0:0	8	a
arg	58:15	58:20	7	times
water	58:15	0:0	8	times
arg	58:22	58:24	7	hi
water	58:22	0:0	8	hi
arg	58:26	58:28	7	lo
water	58:26	0:0	8	lo
arg	58:30	58:32	7	fp
water	58:30	0:0	8	fp
water	58:33	0:0	6	;
op	59:9	0:0	6	++
water	59:11	0:0	6	error64
water	59:18	0:0	6	;
water	60:6	0:0	6	}
if	61:6	74:6	4	(div != 0)
cond	61:10	61:17	5	div != 0
water	61:10	0:0	6	div
op	61:14	0:0	6	!=
water	61:17	0:0	6	0
stmts	62:6	74:6	5	
water	62:6	0:0	6	{
if	64:9	65:22	6	(( fp < 0 ) != ( div < 0 ))
cond	64:13	64:33	7	( fp < 0 ) != ( div < 0 )
water	64:13	0:0	8	(
water	64:14	0:0	8	fp
op	64:17	0:0	8	<
water	64:19	0:0	8	0
water	64:20	0:0	8	)
op	64:22	0:0	8	!=
water	64:25	0:0	8	(
water	64:26	0:0	8	div
op	64:30	0:0	8	<
water	64:32	0:0	8	0
water	64:33	0:0	8	)
stmts	65:11	65:22	7	
water	65:11	0:0	8	fp
op	65:14	0:0	8	-=
water	65:17	0:0	8	div
op	65:20	0:0	8	/
water	65:21	0:0	8	2
water	65:22	0:0	8	;
else	66:9	67:22	6
stmts	67:11	67:22	7	
water	67:11	0:0	8	fp
op	67:14	0:0	8	+=
water	67:17	0:0	8	div
op	67:20	0:0	8	/
water	67:21	0:0	8	2
water	67:22	0:0	8	;
water	68:9	0:0	6	fp
op	68:12	0:0	6	/=
water	68:15	0:0	6	div
water	68:18	0:0	6	;
water	69:9	0:0	6	fpround
op	69:17	0:0	6	=
water	69:19	0:0	6	fp
water	69:21	0:0	6	;
water	71:9	0:0	6	ok
op	71:12	0:0	6	=
water	71:14	0:0	6	fpround
op	71:22	0:0	6	<=
water	71:25	0:0	6	PNG_UINT_31_MAX
op	71:41	0:0	6	&&
water	72:14	0:0	6	fpround
op	72:22	0:0	6	>=
op	72:25	0:0	6	-
water	72:26	0:0	6	1
op	72:27	0:0	6	-
water	72:28	0:0	6	(
water	72:29	0:0	6	long
water	72:34	0:0	6	long
water	72:39	0:0	6	int
water	72:42	0:0	6	)
water	72:43	0:0	6	PNG_UINT_31_MAX
water	72:58	0:0	6	;
if	73:9	73:28	6	(! ok)
cond	73:13	73:14	7	! ok
op	73:13	0:0	8	!
water	73:14	0:0	8	ok
stmts	73:18	73:28	7	
op	73:18	0:0	8	++
water	73:20	0:0	8	overflow
water	73:28	0:0	8	;
water	74:6	0:0	6	}
else	75:6	76:40	4
stmts	76:8	76:40	5	
water	76:8	0:0	6	ok
op	76:11	0:0	6	=
water	76:13	0:0	6	0
water	76:14	0:0	6	,
op	76:16	0:0	6	++
water	76:18	0:0	6	overflow
water	76:26	0:0	6	,
water	76:28	0:0	6	fpround
op	76:36	0:0	6	=
water	76:38	0:0	6	fp
water	76:40	0:0	6	;
if	77:6	79:39	4	(verbose)
cond	77:10	77:10	5	verbose
water	77:10	0:0	6	verbose
stmts	78:9	79:39	5	
call	78:9	79:38	6	fprintf
arg	78:17	78:23	7	stderr
water	78:17	0:0	8	stderr
arg	78:25	78:59	7	"TEST %d * %d / %d -> %lld (%s)\n"
water	78:25	0:0	8	"TEST %d * %d / %d -> %lld (%s)\n"
arg	78:61	78:62	7	a
water	78:61	0:0	8	a
arg	78:64	78:69	7	times
water	78:64	0:0	8	times
arg	78:71	78:74	7	div
water	78:71	0:0	8	div
arg	79:12	79:14	7	fp
water	79:12	0:0	8	fp
arg	79:16	79:38	7	ok?"ok":"overflow"
water	79:16	0:0	8	ok
water	79:19	0:0	8	?
water	79:21	0:0	8	"ok"
water	79:26	0:0	8	:
water	79:28	0:0	8	"overflow"
water	79:39	0:0	6	;
op	80:6	0:0	4	++
water	80:8	0:0	4	tested
water	80:14	0:0	4	;
if	81:6	90:6	4	(png_muldiv (& result ,a ,times ,div ) != ok)
cond	81:10	81:48	5	png_muldiv (& result ,a ,times ,div ) != ok
call	81:10	81:43	6	png_muldiv
arg	81:21	81:28	7	&result
op	81:21	0:0	8	&
water	81:22	0:0	8	result
arg	81:30	81:31	7	a
water	81:30	0:0	8	a
arg	81:33	81:38	7	times
water	81:33	0:0	8	times
arg	81:40	81:43	7	div
water	81:40	0:0	8	div
op	81:45	0:0	6	!=
water	81:48	0:0	6	ok
stmts	82:6	90:6	5	
water	82:6	0:0	6	{
op	83:9	0:0	6	++
water	83:11	0:0	6	error
water	83:16	0:0	6	;
if	84:9	86:31	6	(ok)
cond	84:13	84:13	7	ok
water	84:13	0:0	8	ok
stmts	85:13	86:31	7	
call	85:13	86:30	8	fprintf
arg	85:21	85:27	9	stderr
water	85:21	0:0	10	stderr
arg	85:29	85:73	9	"%d * %d / %d -> overflow (expected %lld)\n"
water	85:29	0:0	10	"%d * %d / %d -> overflow (expected %lld)\n"
arg	85:75	85:76	9	a
water	85:75	0:0	10	a
arg	86:16	86:21	9	times
water	86:16	0:0	10	times
arg	86:23	86:26	9	div
water	86:23	0:0	10	div
arg	86:28	86:30	9	fp
water	86:28	0:0	10	fp
water	86:31	0:0	8	;
else	87:9	89:39	6
stmts	88:13	89:39	7	
call	88:13	89:38	8	fprintf
arg	88:21	88:27	9	stderr
water	88:21	0:0	10	stderr
arg	88:29	88:76	9	"%d * %d / %d -> %d (expected overflow %lld)\n"
water	88:29	0:0	10	"%d * %d / %d -> %d (expected overflow %lld)\n"
arg	88:78	88:79	9	a
water	88:78	0:0	10	a
arg	89:16	89:21	9	times
water	89:16	0:0	10	times
arg	89:23	89:26	9	div
water	89:23	0:0	10	div
arg	89:28	89:34	9	result
water	89:28	0:0	10	result
arg	89:36	89:38	9	fp
water	89:36	0:0	10	fp
water	89:39	0:0	8	;
water	90:6	0:0	6	}
else	91:6	96:6	4
stmts	91:11	96:6	5	
if	91:11	96:6	6	(ok && result != fpround)
cond	91:15	91:31	7	ok && result != fpround
water	91:15	0:0	8	ok
op	91:18	0:0	8	&&
water	91:21	0:0	8	result
op	91:28	0:0	8	!=
water	91:31	0:0	8	fpround
stmts	92:6	96:6	7	
water	92:6	0:0	8	{
op	93:9	0:0	8	++
water	93:11	0:0	8	error
water	93:16	0:0	8	;
call	94:9	95:14	8	fprintf
arg	94:17	94:23	9	stderr
water	94:17	0:0	10	stderr
arg	94:25	94:56	9	"%d * %d / %d -> %d not %lld\n"
water	94:25	0:0	10	"%d * %d / %d -> %d not %lld\n"
arg	94:58	94:59	9	a
water	94:58	0:0	10	a
arg	94:61	94:66	9	times
water	94:61	0:0	10	times
arg	94:68	94:71	9	div
water	94:68	0:0	10	div
arg	94:73	94:79	9	result
water	94:73	0:0	10	result
arg	95:12	95:14	9	fp
water	95:12	0:0	10	fp
water	95:15	0:0	8	;
water	96:6	0:0	8	}
else	97:6	98:17	4
stmts	98:9	98:17	5	
op	98:9	0:0	6	++
water	98:11	0:0	6	passed
water	98:17	0:0	6	;
water	103:6	0:0	4	a
op	103:8	0:0	4	+=
water	103:11	0:0	4	times
water	103:16	0:0	4	;
water	104:6	0:0	4	times
op	104:12	0:0	4	+=
water	104:15	0:0	4	div
water	104:18	0:0	4	;
water	105:6	0:0	4	div
op	105:10	0:0	4	=
water	105:12	0:0	4	randbuffer
water	105:22	0:0	4	;
water	106:6	0:0	4	randbuffer
op	106:17	0:0	4	=
water	106:19	0:0	4	(
water	106:20	0:0	4	randbuffer
op	106:31	0:0	4	<<
water	106:34	0:0	4	randbits
water	106:42	0:0	4	)
op	106:44	0:0	4	^
call	106:46	106:51	4	rand
water	106:52	0:0	4	;
water	107:3	0:0	4	}
water	108:22	0:0	2	;
call	109:3	110:59	2	printf
arg	109:10	110:17	3	"%d tests including %d overflows, %d passed, %d failed (%d 64 bit ""errors)\n"
water	109:10	0:0	4	"%d tests including %d overflows, %d passed, %d failed (%d 64 bit "
water	110:6	0:0	4	"errors)\n"
arg	110:19	110:25	3	tested
water	110:19	0:0	4	tested
arg	110:27	110:35	3	overflow
water	110:27	0:0	4	overflow
arg	110:37	110:43	3	passed
water	110:37	0:0	4	passed
arg	110:45	110:50	3	error
water	110:45	0:0	4	error
arg	110:52	110:59	3	error64
water	110:52	0:0	4	error64
water	110:60	0:0	2	;
return	111:3	111:11	2	0
water	111:10	0:0	3	0
