func	1:0	200:0	0	static void	generate_row
params	2:12	0:0	1	
param	2:13	2:26	2	png_bytep	row
param	2:28	2:43	2	size_t	rowbytes
param	2:45	2:59	2	unsigned int	y
param	2:61	2:75	2	int	color_type
param	3:3	3:16	2	int	bit_depth
param	3:18	3:45	2	png_const_bytep	gamma_table
param	3:47	3:58	2	double	conv
param	4:3	4:23	2	unsigned int *	colors
stmnts	0:0	199:3	1	
decl	6:3	6:77	2	png_uint_32	size_max
op	6:24	0:0	2	=
call	6:26	6:74	3	image_size_of_type
arg	6:45	6:55	4	color_type
water	6:45	0:0	5	color_type
arg	6:57	6:66	4	bit_depth
water	6:57	0:0	5	bit_depth
arg	6:68	6:74	4	colors
water	6:68	0:0	5	colors
op	6:75	0:0	2	-
water	6:76	0:0	2	1
decl	7:3	7:46	2	png_uint_32	depth_max
op	7:25	0:0	2	=
water	7:27	0:0	2	(
water	7:28	0:0	2	1
water	7:29	0:0	2	U
op	7:31	0:0	2	<<
water	7:34	0:0	2	bit_depth
water	7:43	0:0	2	)
op	7:44	0:0	2	-
water	7:45	0:0	2	1
if	8:3	118:3	2	(colors [ 0 ] == 0)
cond	8:7	8:20	3	colors [ 0 ] == 0
water	8:7	0:0	4	colors
op	8:13	0:0	4	[
water	8:14	0:0	4	0
op	8:15	0:0	4	]
op	8:17	0:0	4	==
water	8:20	0:0	4	0
stmts	8:23	118:3	3	
switch	8:23	118:3	4	(channels_of_type (color_type ))
cond	8:31	8:58	5	channels_of_type (color_type )
call	8:31	8:58	6	channels_of_type
arg	8:48	8:58	7	color_type
water	8:48	0:0	8	color_type
stmts	9:3	118:3	5	
water	9:3	0:0	6	{
label	13:6	13:12	6	case 1 :
water	14:9	0:0	6	{
decl	15:12	15:25	6	png_uint_32	x
decl	16:12	16:61	6	png_uint_32	base
op	16:29	0:0	6	=
water	16:31	0:0	6	2
op	16:32	0:0	6	*
water	16:33	0:0	6	size_max
op	16:42	0:0	6	-
call	16:44	16:60	7	abs
arg	16:48	16:60	8	2*y-size_max
water	16:48	0:0	9	2
op	16:49	0:0	9	*
water	16:50	0:0	9	y
op	16:51	0:0	9	-
water	16:52	0:0	9	size_max
for	17:12	25:12	6	(x = 0 ;x <= size_max;++ x)
forinit	17:17	17:20	7	x = 0 ;
water	17:17	0:0	8	x
op	17:18	0:0	8	=
water	17:19	0:0	8	0
water	17:20	0:0	8	;
cond	17:22	17:25	7	x <= size_max
water	17:22	0:0	8	x
op	17:23	0:0	8	<=
water	17:25	0:0	8	size_max
forexpr	17:35	17:37	7	++ x
op	17:35	0:0	8	++
water	17:37	0:0	8	x
stmts	18:12	25:12	7	
water	18:12	0:0	8	{
decl	19:15	19:58	8	png_uint_32	luma
op	19:32	0:0	8	=
water	19:34	0:0	8	base
op	19:39	0:0	8	-
call	19:41	19:57	9	abs
arg	19:45	19:57	10	2*x-size_max
water	19:45	0:0	11	2
op	19:46	0:0	11	*
water	19:47	0:0	11	x
op	19:48	0:0	11	-
water	19:49	0:0	11	size_max
water	23:15	0:0	8	luma
op	23:20	0:0	8	=
water	23:22	0:0	8	(
water	23:23	0:0	8	luma
op	23:27	0:0	8	*
water	23:28	0:0	8	depth_max
op	23:38	0:0	8	+
water	23:40	0:0	8	size_max
water	23:48	0:0	8	)
op	23:50	0:0	8	/
water	23:52	0:0	8	(
water	23:53	0:0	8	2
op	23:54	0:0	8	*
water	23:55	0:0	8	size_max
water	23:63	0:0	8	)
water	23:64	0:0	8	;
call	24:15	24:77	8	set_value
arg	24:25	24:28	9	row
water	24:25	0:0	10	row
arg	24:30	24:38	9	rowbytes
water	24:30	0:0	10	rowbytes
arg	24:40	24:41	9	x
water	24:40	0:0	10	x
arg	24:43	24:52	9	bit_depth
water	24:43	0:0	10	bit_depth
arg	24:54	24:58	9	luma
water	24:54	0:0	10	luma
arg	24:60	24:71	9	gamma_table
water	24:60	0:0	10	gamma_table
arg	24:73	24:77	9	conv
water	24:73	0:0	10	conv
water	24:78	0:0	8	;
water	25:12	0:0	8	}
water	26:9	0:0	6	}
break	27:9	27:14	6	
label	31:6	31:12	6	case 2 :
water	32:9	0:0	6	{
decl	33:12	33:79	6	png_uint_32	alpha
op	33:30	0:0	6	=
water	33:32	0:0	6	(
water	33:33	0:0	6	depth_max
op	33:43	0:0	6	*
water	33:45	0:0	6	y
op	33:47	0:0	6	*
water	33:49	0:0	6	2
op	33:51	0:0	6	+
water	33:53	0:0	6	size_max
water	33:61	0:0	6	)
op	33:63	0:0	6	/
water	33:65	0:0	6	(
water	33:66	0:0	6	2
op	33:68	0:0	6	*
water	33:70	0:0	6	size_max
water	33:78	0:0	6	)
decl	34:12	34:25	6	png_uint_32	x
for	35:12	42:12	6	(x = 0 ;x <= size_max;++ x)
forinit	35:17	35:20	7	x = 0 ;
water	35:17	0:0	8	x
op	35:18	0:0	8	=
water	35:19	0:0	8	0
water	35:20	0:0	8	;
cond	35:22	35:25	7	x <= size_max
water	35:22	0:0	8	x
op	35:23	0:0	8	<=
water	35:25	0:0	8	size_max
forexpr	35:35	35:37	7	++ x
op	35:35	0:0	8	++
water	35:37	0:0	8	x
stmts	36:12	42:12	7	
water	36:12	0:0	8	{
call	37:15	39:22	8	set_value
arg	37:25	37:28	9	row
water	37:25	0:0	10	row
arg	37:30	37:38	9	rowbytes
water	37:30	0:0	10	rowbytes
arg	37:40	37:43	9	2*x
water	37:40	0:0	10	2
op	37:41	0:0	10	*
water	37:42	0:0	10	x
arg	37:45	37:54	9	bit_depth
water	37:45	0:0	10	bit_depth
arg	38:18	38:65	9	(depth_max*x*2+size_max)/(2*size_max)
water	38:18	0:0	10	(
water	38:19	0:0	10	depth_max
op	38:29	0:0	10	*
water	38:31	0:0	10	x
op	38:33	0:0	10	*
water	38:35	0:0	10	2
op	38:37	0:0	10	+
water	38:39	0:0	10	size_max
water	38:47	0:0	10	)
op	38:49	0:0	10	/
water	38:51	0:0	10	(
water	38:52	0:0	10	2
op	38:54	0:0	10	*
water	38:56	0:0	10	size_max
water	38:64	0:0	10	)
arg	38:67	38:78	9	gamma_table
water	38:67	0:0	10	gamma_table
arg	39:18	39:22	9	conv
water	39:18	0:0	10	conv
water	39:23	0:0	8	;
call	40:15	41:22	8	set_value
arg	40:25	40:28	9	row
water	40:25	0:0	10	row
arg	40:30	40:38	9	rowbytes
water	40:30	0:0	10	rowbytes
arg	40:40	40:45	9	2*x+1
water	40:40	0:0	10	2
op	40:41	0:0	10	*
water	40:42	0:0	10	x
op	40:43	0:0	10	+
water	40:44	0:0	10	1
arg	40:47	40:56	9	bit_depth
water	40:47	0:0	10	bit_depth
arg	40:58	40:63	9	alpha
water	40:58	0:0	10	alpha
arg	40:65	40:76	9	gamma_table
water	40:65	0:0	10	gamma_table
arg	41:18	41:22	9	conv
water	41:18	0:0	10	conv
water	41:23	0:0	8	;
water	42:12	0:0	8	}
water	43:9	0:0	6	}
break	44:9	44:14	6	
label	48:6	48:12	6	case 3 :
water	49:9	0:0	6	{
decl	55:12	55:75	6	png_uint_32	Y
op	55:26	0:0	6	=
water	55:28	0:0	6	(
water	55:29	0:0	6	depth_max
op	55:39	0:0	6	*
water	55:41	0:0	6	y
op	55:43	0:0	6	*
water	55:45	0:0	6	2
op	55:47	0:0	6	+
water	55:49	0:0	6	size_max
water	55:57	0:0	6	)
op	55:59	0:0	6	/
water	55:61	0:0	6	(
water	55:62	0:0	6	2
op	55:64	0:0	6	*
water	55:66	0:0	6	size_max
water	55:74	0:0	6	)
decl	56:12	56:25	6	png_uint_32	x
for	64:12	74:12	6	(x = 0 ;x <= size_max;++ x)
forinit	64:17	64:20	7	x = 0 ;
water	64:17	0:0	8	x
op	64:18	0:0	8	=
water	64:19	0:0	8	0
water	64:20	0:0	8	;
cond	64:22	64:25	7	x <= size_max
water	64:22	0:0	8	x
op	64:23	0:0	8	<=
water	64:25	0:0	8	size_max
forexpr	64:35	64:37	7	++ x
op	64:35	0:0	8	++
water	64:37	0:0	8	x
stmts	65:12	74:12	7	
water	65:12	0:0	8	{
call	66:15	67:38	8	set_value
arg	66:25	66:28	9	row
water	66:25	0:0	10	row
arg	66:30	66:38	9	rowbytes
water	66:30	0:0	10	rowbytes
arg	66:40	66:45	9	3*x+0
water	66:40	0:0	10	3
op	66:41	0:0	10	*
water	66:42	0:0	10	x
op	66:43	0:0	10	+
water	66:44	0:0	10	0
arg	66:47	66:56	9	bit_depth
water	66:47	0:0	10	bit_depth
arg	66:59	66:60	9	Y
water	66:59	0:0	10	Y
arg	67:21	67:32	9	gamma_table
water	67:21	0:0	10	gamma_table
arg	67:34	67:38	9	conv
water	67:34	0:0	10	conv
water	67:39	0:0	8	;
call	68:15	70:35	8	set_value
arg	68:25	68:28	9	row
water	68:25	0:0	10	row
arg	68:30	68:38	9	rowbytes
water	68:30	0:0	10	rowbytes
arg	68:40	68:45	9	3*x+1
water	68:40	0:0	10	3
op	68:41	0:0	10	*
water	68:42	0:0	10	x
op	68:43	0:0	10	+
water	68:44	0:0	10	1
arg	68:47	68:56	9	bit_depth
water	68:47	0:0	10	bit_depth
arg	69:18	69:65	9	(depth_max*x*2+size_max)/(2*size_max)
water	69:18	0:0	10	(
water	69:19	0:0	10	depth_max
op	69:29	0:0	10	*
water	69:31	0:0	10	x
op	69:33	0:0	10	*
water	69:35	0:0	10	2
op	69:37	0:0	10	+
water	69:39	0:0	10	size_max
water	69:47	0:0	10	)
op	69:49	0:0	10	/
water	69:51	0:0	10	(
water	69:52	0:0	10	2
op	69:54	0:0	10	*
water	69:56	0:0	10	size_max
water	69:64	0:0	10	)
arg	70:18	70:29	9	gamma_table
water	70:18	0:0	10	gamma_table
arg	70:31	70:35	9	conv
water	70:31	0:0	10	conv
water	70:36	0:0	8	;
call	71:15	73:35	8	set_value
arg	71:25	71:28	9	row
water	71:25	0:0	10	row
arg	71:30	71:38	9	rowbytes
water	71:30	0:0	10	rowbytes
arg	71:40	71:45	9	3*x+2
water	71:40	0:0	10	3
op	71:41	0:0	10	*
water	71:42	0:0	10	x
op	71:43	0:0	10	+
water	71:44	0:0	10	2
arg	71:47	71:56	9	bit_depth
water	71:47	0:0	10	bit_depth
arg	72:18	72:57	9	(Y*x*2+size_max)/(2*size_max)
water	72:18	0:0	10	(
water	72:19	0:0	10	Y
op	72:21	0:0	10	*
water	72:23	0:0	10	x
op	72:25	0:0	10	*
water	72:27	0:0	10	2
op	72:29	0:0	10	+
water	72:31	0:0	10	size_max
water	72:39	0:0	10	)
op	72:41	0:0	10	/
water	72:43	0:0	10	(
water	72:44	0:0	10	2
op	72:46	0:0	10	*
water	72:48	0:0	10	size_max
water	72:56	0:0	10	)
arg	73:18	73:29	9	gamma_table
water	73:18	0:0	10	gamma_table
arg	73:31	73:35	9	conv
water	73:31	0:0	10	conv
water	73:36	0:0	8	;
water	74:12	0:0	8	}
water	75:9	0:0	6	}
break	76:9	76:14	6	
label	80:6	80:12	6	case 4 :
water	81:9	0:0	6	{
decl	88:12	88:75	6	png_uint_32	Y
op	88:26	0:0	6	=
water	88:28	0:0	6	(
water	88:29	0:0	6	depth_max
op	88:39	0:0	6	*
water	88:41	0:0	6	y
op	88:43	0:0	6	*
water	88:45	0:0	6	2
op	88:47	0:0	6	+
water	88:49	0:0	6	size_max
water	88:57	0:0	6	)
op	88:59	0:0	6	/
water	88:61	0:0	6	(
water	88:62	0:0	6	2
op	88:64	0:0	6	*
water	88:66	0:0	6	size_max
water	88:74	0:0	6	)
decl	89:12	89:25	6	png_uint_32	x
for	98:12	112:12	6	(x = 0 ;x <= size_max;++ x)
forinit	98:17	98:20	7	x = 0 ;
water	98:17	0:0	8	x
op	98:18	0:0	8	=
water	98:19	0:0	8	0
water	98:20	0:0	8	;
cond	98:22	98:25	7	x <= size_max
water	98:22	0:0	8	x
op	98:23	0:0	8	<=
water	98:25	0:0	8	size_max
forexpr	98:35	98:37	7	++ x
op	98:35	0:0	8	++
water	98:37	0:0	8	x
stmts	99:12	112:12	7	
water	99:12	0:0	8	{
call	100:15	102:35	8	set_value
arg	100:25	100:28	9	row
water	100:25	0:0	10	row
arg	100:30	100:38	9	rowbytes
water	100:30	0:0	10	rowbytes
arg	100:40	100:45	9	4*x+0
water	100:40	0:0	10	4
op	100:41	0:0	10	*
water	100:42	0:0	10	x
op	100:43	0:0	10	+
water	100:44	0:0	10	0
arg	100:47	100:56	9	bit_depth
water	100:47	0:0	10	bit_depth
arg	101:18	101:69	9	((depth_max-Y)*x*2+size_max)/(2*size_max)
water	101:18	0:0	10	(
water	101:19	0:0	10	(
water	101:20	0:0	10	depth_max
op	101:29	0:0	10	-
water	101:30	0:0	10	Y
water	101:31	0:0	10	)
op	101:33	0:0	10	*
water	101:35	0:0	10	x
op	101:37	0:0	10	*
water	101:39	0:0	10	2
op	101:41	0:0	10	+
water	101:43	0:0	10	size_max
water	101:51	0:0	10	)
op	101:53	0:0	10	/
water	101:55	0:0	10	(
water	101:56	0:0	10	2
op	101:58	0:0	10	*
water	101:60	0:0	10	size_max
water	101:68	0:0	10	)
arg	102:18	102:29	9	gamma_table
water	102:18	0:0	10	gamma_table
arg	102:31	102:35	9	conv
water	102:31	0:0	10	conv
water	102:36	0:0	8	;
call	103:15	105:35	8	set_value
arg	103:25	103:28	9	row
water	103:25	0:0	10	row
arg	103:30	103:38	9	rowbytes
water	103:30	0:0	10	rowbytes
arg	103:40	103:45	9	4*x+1
water	103:40	0:0	10	4
op	103:41	0:0	10	*
water	103:42	0:0	10	x
op	103:43	0:0	10	+
water	103:44	0:0	10	1
arg	103:47	103:56	9	bit_depth
water	103:47	0:0	10	bit_depth
arg	104:18	104:57	9	(Y*x*2+size_max)/(2*size_max)
water	104:18	0:0	10	(
water	104:19	0:0	10	Y
op	104:21	0:0	10	*
water	104:23	0:0	10	x
op	104:25	0:0	10	*
water	104:27	0:0	10	2
op	104:29	0:0	10	+
water	104:31	0:0	10	size_max
water	104:39	0:0	10	)
op	104:41	0:0	10	/
water	104:43	0:0	10	(
water	104:44	0:0	10	2
op	104:46	0:0	10	*
water	104:48	0:0	10	size_max
water	104:56	0:0	10	)
arg	105:18	105:29	9	gamma_table
water	105:18	0:0	10	gamma_table
arg	105:31	105:35	9	conv
water	105:31	0:0	10	conv
water	105:36	0:0	8	;
call	106:15	108:35	8	set_value
arg	106:25	106:28	9	row
water	106:25	0:0	10	row
arg	106:30	106:38	9	rowbytes
water	106:30	0:0	10	rowbytes
arg	106:40	106:45	9	4*x+2
water	106:40	0:0	10	4
op	106:41	0:0	10	*
water	106:42	0:0	10	x
op	106:43	0:0	10	+
water	106:44	0:0	10	2
arg	106:47	106:56	9	bit_depth
water	106:47	0:0	10	bit_depth
arg	107:18	107:61	9	Y-(Y*x*2+size_max)/(2*size_max)
water	107:18	0:0	10	Y
op	107:20	0:0	10	-
water	107:22	0:0	10	(
water	107:23	0:0	10	Y
op	107:25	0:0	10	*
water	107:27	0:0	10	x
op	107:29	0:0	10	*
water	107:31	0:0	10	2
op	107:33	0:0	10	+
water	107:35	0:0	10	size_max
water	107:43	0:0	10	)
op	107:45	0:0	10	/
water	107:47	0:0	10	(
water	107:48	0:0	10	2
op	107:50	0:0	10	*
water	107:52	0:0	10	size_max
water	107:60	0:0	10	)
arg	108:18	108:29	9	gamma_table
water	108:18	0:0	10	gamma_table
arg	108:31	108:35	9	conv
water	108:31	0:0	10	conv
water	108:36	0:0	8	;
call	109:15	111:35	8	set_value
arg	109:25	109:28	9	row
water	109:25	0:0	10	row
arg	109:30	109:38	9	rowbytes
water	109:30	0:0	10	rowbytes
arg	109:40	109:45	9	4*x+3
water	109:40	0:0	10	4
op	109:41	0:0	10	*
water	109:42	0:0	10	x
op	109:43	0:0	10	+
water	109:44	0:0	10	3
arg	109:47	109:56	9	bit_depth
water	109:47	0:0	10	bit_depth
arg	110:18	110:73	9	Y+((depth_max-Y)*x*2+size_max)/(2*size_max)
water	110:18	0:0	10	Y
op	110:20	0:0	10	+
water	110:22	0:0	10	(
water	110:23	0:0	10	(
water	110:24	0:0	10	depth_max
op	110:33	0:0	10	-
water	110:34	0:0	10	Y
water	110:35	0:0	10	)
op	110:37	0:0	10	*
water	110:39	0:0	10	x
op	110:41	0:0	10	*
water	110:43	0:0	10	2
op	110:45	0:0	10	+
water	110:47	0:0	10	size_max
water	110:55	0:0	10	)
op	110:57	0:0	10	/
water	110:59	0:0	10	(
water	110:60	0:0	10	2
op	110:62	0:0	10	*
water	110:64	0:0	10	size_max
water	110:72	0:0	10	)
arg	111:18	111:29	9	gamma_table
water	111:18	0:0	10	gamma_table
arg	111:31	111:35	9	conv
water	111:31	0:0	10	conv
water	111:36	0:0	8	;
water	112:12	0:0	8	}
water	113:9	0:0	6	}
break	114:9	114:14	6	
label	115:6	115:13	6	default :
call	116:9	116:64	6	fprintf
arg	116:17	116:23	7	stderr
water	116:17	0:0	8	stderr
arg	116:25	116:64	7	"makepng: internal bad channel count\n"
water	116:25	0:0	8	"makepng: internal bad channel count\n"
water	116:65	0:0	6	;
call	117:9	117:15	6	exit
arg	117:14	117:15	7	2
water	117:14	0:0	8	2
water	117:16	0:0	6	;
water	118:3	0:0	6	}
else	119:3	125:3	2
stmts	119:8	125:3	3	
if	119:8	125:3	4	(color_type & PNG_COLOR_MASK_PALETTE)
cond	119:12	119:25	5	color_type & PNG_COLOR_MASK_PALETTE
water	119:12	0:0	6	color_type
op	119:23	0:0	6	&
water	119:25	0:0	6	PNG_COLOR_MASK_PALETTE
stmts	120:3	125:3	5	
water	120:3	0:0	6	{
call	124:6	124:29	6	memset
arg	124:13	124:16	7	row
water	124:13	0:0	8	row
arg	124:18	124:19	7	0
water	124:18	0:0	8	0
arg	124:21	124:29	7	rowbytes
water	124:21	0:0	8	rowbytes
water	124:30	0:0	6	;
water	125:3	0:0	6	}
else	126:3	192:6	2
stmts	126:8	192:6	3	
if	126:8	192:6	4	(colors [ 0 ] ==channels_of_type (color_type ))
cond	126:12	126:52	5	colors [ 0 ] ==channels_of_type (color_type )
water	126:12	0:0	6	colors
op	126:18	0:0	6	[
water	126:19	0:0	6	0
op	126:20	0:0	6	]
op	126:22	0:0	6	==
call	126:25	126:52	6	channels_of_type
arg	126:42	126:52	7	color_type
water	126:42	0:0	8	color_type
stmts	127:6	192:6	5	
switch	127:6	192:6	6	(channels_of_type (color_type ))
cond	127:14	127:41	7	channels_of_type (color_type )
call	127:14	127:41	8	channels_of_type
arg	127:31	127:41	9	color_type
water	127:31	0:0	10	color_type
stmts	128:6	192:6	7	
water	128:6	0:0	8	{
label	129:9	129:15	8	case 1 :
water	130:12	0:0	8	{
decl	131:15	131:49	8	const png_uint_32	luma
op	131:38	0:0	8	=
water	131:40	0:0	8	colors
op	131:46	0:0	8	[
water	131:47	0:0	8	1
op	131:48	0:0	8	]
decl	132:15	132:28	8	png_uint_32	x
for	133:15	135:26	8	(x = 0 ;x <= size_max;++ x)
forinit	133:20	133:23	9	x = 0 ;
water	133:20	0:0	10	x
op	133:21	0:0	10	=
water	133:22	0:0	10	0
water	133:23	0:0	10	;
cond	133:25	133:28	9	x <= size_max
water	133:25	0:0	10	x
op	133:26	0:0	10	<=
water	133:28	0:0	10	size_max
forexpr	133:38	133:40	9	++ x
op	133:38	0:0	10	++
water	133:40	0:0	10	x
stmts	134:18	135:26	9	
call	134:18	135:25	10	set_value
arg	134:28	134:31	11	row
water	134:28	0:0	12	row
arg	134:33	134:41	11	rowbytes
water	134:33	0:0	12	rowbytes
arg	134:43	134:44	11	x
water	134:43	0:0	12	x
arg	134:46	134:55	11	bit_depth
water	134:46	0:0	12	bit_depth
arg	134:57	134:61	11	luma
water	134:57	0:0	12	luma
arg	134:63	134:74	11	gamma_table
water	134:63	0:0	12	gamma_table
arg	135:21	135:25	11	conv
water	135:21	0:0	12	conv
water	135:26	0:0	10	;
water	136:12	0:0	8	}
break	137:12	137:17	8	
label	138:9	138:15	8	case 2 :
water	139:12	0:0	8	{
decl	140:15	140:49	8	const png_uint_32	luma
op	140:38	0:0	8	=
water	140:40	0:0	8	colors
op	140:46	0:0	8	[
water	140:47	0:0	8	1
op	140:48	0:0	8	]
decl	141:15	141:50	8	const png_uint_32	alpha
op	141:39	0:0	8	=
water	141:41	0:0	8	colors
op	141:47	0:0	8	[
water	141:48	0:0	8	2
op	141:49	0:0	8	]
decl	142:15	142:28	8	png_uint_32	x
for	143:15	149:15	8	(x = 0 ;x < size_max;++ x)
forinit	143:20	143:23	9	x = 0 ;
water	143:20	0:0	10	x
op	143:21	0:0	10	=
water	143:22	0:0	10	0
water	143:23	0:0	10	;
cond	143:25	143:27	9	x < size_max
water	143:25	0:0	10	x
op	143:26	0:0	10	<
water	143:27	0:0	10	size_max
forexpr	143:37	143:39	9	++ x
op	143:37	0:0	10	++
water	143:39	0:0	10	x
stmts	144:15	149:15	9	
water	144:15	0:0	10	{
call	145:18	146:25	10	set_value
arg	145:28	145:31	11	row
water	145:28	0:0	12	row
arg	145:33	145:41	11	rowbytes
water	145:33	0:0	12	rowbytes
arg	145:43	145:46	11	2*x
water	145:43	0:0	12	2
op	145:44	0:0	12	*
water	145:45	0:0	12	x
arg	145:48	145:57	11	bit_depth
water	145:48	0:0	12	bit_depth
arg	145:59	145:63	11	luma
water	145:59	0:0	12	luma
arg	145:65	145:76	11	gamma_table
water	145:65	0:0	12	gamma_table
arg	146:21	146:25	11	conv
water	146:21	0:0	12	conv
water	146:26	0:0	10	;
call	147:18	148:25	10	set_value
arg	147:28	147:31	11	row
water	147:28	0:0	12	row
arg	147:33	147:41	11	rowbytes
water	147:33	0:0	12	rowbytes
arg	147:43	147:48	11	2*x+1
water	147:43	0:0	12	2
op	147:44	0:0	12	*
water	147:45	0:0	12	x
op	147:46	0:0	12	+
water	147:47	0:0	12	1
arg	147:50	147:59	11	bit_depth
water	147:50	0:0	12	bit_depth
arg	147:61	147:66	11	alpha
water	147:61	0:0	12	alpha
arg	147:68	147:79	11	gamma_table
water	147:68	0:0	12	gamma_table
arg	148:21	148:25	11	conv
water	148:21	0:0	12	conv
water	148:26	0:0	10	;
water	149:15	0:0	10	}
water	150:12	0:0	8	}
break	151:12	151:17	8	
label	152:9	152:15	8	case 3 :
water	153:12	0:0	8	{
decl	154:15	154:48	8	const png_uint_32	red
op	154:37	0:0	8	=
water	154:39	0:0	8	colors
op	154:45	0:0	8	[
water	154:46	0:0	8	1
op	154:47	0:0	8	]
decl	155:15	155:50	8	const png_uint_32	green
op	155:39	0:0	8	=
water	155:41	0:0	8	colors
op	155:47	0:0	8	[
water	155:48	0:0	8	2
op	155:49	0:0	8	]
decl	156:15	156:49	8	const png_uint_32	blue
op	156:38	0:0	8	=
water	156:40	0:0	8	colors
op	156:46	0:0	8	[
water	156:47	0:0	8	3
op	156:48	0:0	8	]
decl	157:15	157:28	8	png_uint_32	x
for	158:15	166:15	8	(x = 0 ;x <= size_max;++ x)
forinit	158:20	158:23	9	x = 0 ;
water	158:20	0:0	10	x
op	158:21	0:0	10	=
water	158:22	0:0	10	0
water	158:23	0:0	10	;
cond	158:25	158:28	9	x <= size_max
water	158:25	0:0	10	x
op	158:26	0:0	10	<=
water	158:28	0:0	10	size_max
forexpr	158:38	158:40	9	++ x
op	158:38	0:0	10	++
water	158:40	0:0	10	x
stmts	159:15	166:15	9	
water	159:15	0:0	10	{
call	160:18	161:25	10	set_value
arg	160:28	160:31	11	row
water	160:28	0:0	12	row
arg	160:33	160:41	11	rowbytes
water	160:33	0:0	12	rowbytes
arg	160:43	160:48	11	3*x+0
water	160:43	0:0	12	3
op	160:44	0:0	12	*
water	160:45	0:0	12	x
op	160:46	0:0	12	+
water	160:47	0:0	12	0
arg	160:50	160:59	11	bit_depth
water	160:50	0:0	12	bit_depth
arg	160:61	160:64	11	red
water	160:61	0:0	12	red
arg	160:66	160:77	11	gamma_table
water	160:66	0:0	12	gamma_table
arg	161:21	161:25	11	conv
water	161:21	0:0	12	conv
water	161:26	0:0	10	;
call	162:18	163:25	10	set_value
arg	162:28	162:31	11	row
water	162:28	0:0	12	row
arg	162:33	162:41	11	rowbytes
water	162:33	0:0	12	rowbytes
arg	162:43	162:48	11	3*x+1
water	162:43	0:0	12	3
op	162:44	0:0	12	*
water	162:45	0:0	12	x
op	162:46	0:0	12	+
water	162:47	0:0	12	1
arg	162:50	162:59	11	bit_depth
water	162:50	0:0	12	bit_depth
arg	162:61	162:66	11	green
water	162:61	0:0	12	green
arg	162:68	162:79	11	gamma_table
water	162:68	0:0	12	gamma_table
arg	163:21	163:25	11	conv
water	163:21	0:0	12	conv
water	163:26	0:0	10	;
call	164:18	165:25	10	set_value
arg	164:28	164:31	11	row
water	164:28	0:0	12	row
arg	164:33	164:41	11	rowbytes
water	164:33	0:0	12	rowbytes
arg	164:43	164:48	11	3*x+2
water	164:43	0:0	12	3
op	164:44	0:0	12	*
water	164:45	0:0	12	x
op	164:46	0:0	12	+
water	164:47	0:0	12	2
arg	164:50	164:59	11	bit_depth
water	164:50	0:0	12	bit_depth
arg	164:61	164:65	11	blue
water	164:61	0:0	12	blue
arg	164:67	164:78	11	gamma_table
water	164:67	0:0	12	gamma_table
arg	165:21	165:25	11	conv
water	165:21	0:0	12	conv
water	165:26	0:0	10	;
water	166:15	0:0	10	}
water	167:12	0:0	8	}
break	168:12	168:17	8	
label	169:9	169:15	8	case 4 :
water	170:12	0:0	8	{
decl	171:15	171:48	8	const png_uint_32	red
op	171:37	0:0	8	=
water	171:39	0:0	8	colors
op	171:45	0:0	8	[
water	171:46	0:0	8	1
op	171:47	0:0	8	]
decl	172:15	172:50	8	const png_uint_32	green
op	172:39	0:0	8	=
water	172:41	0:0	8	colors
op	172:47	0:0	8	[
water	172:48	0:0	8	2
op	172:49	0:0	8	]
decl	173:15	173:49	8	const png_uint_32	blue
op	173:38	0:0	8	=
water	173:40	0:0	8	colors
op	173:46	0:0	8	[
water	173:47	0:0	8	3
op	173:48	0:0	8	]
decl	174:15	174:50	8	const png_uint_32	alpha
op	174:39	0:0	8	=
water	174:41	0:0	8	colors
op	174:47	0:0	8	[
water	174:48	0:0	8	4
op	174:49	0:0	8	]
decl	175:15	175:28	8	png_uint_32	x
for	176:15	186:15	8	(x = 0 ;x <= size_max;++ x)
forinit	176:20	176:23	9	x = 0 ;
water	176:20	0:0	10	x
op	176:21	0:0	10	=
water	176:22	0:0	10	0
water	176:23	0:0	10	;
cond	176:25	176:28	9	x <= size_max
water	176:25	0:0	10	x
op	176:26	0:0	10	<=
water	176:28	0:0	10	size_max
forexpr	176:38	176:40	9	++ x
op	176:38	0:0	10	++
water	176:40	0:0	10	x
stmts	177:15	186:15	9	
water	177:15	0:0	10	{
call	178:18	179:25	10	set_value
arg	178:28	178:31	11	row
water	178:28	0:0	12	row
arg	178:33	178:41	11	rowbytes
water	178:33	0:0	12	rowbytes
arg	178:43	178:48	11	4*x+0
water	178:43	0:0	12	4
op	178:44	0:0	12	*
water	178:45	0:0	12	x
op	178:46	0:0	12	+
water	178:47	0:0	12	0
arg	178:50	178:59	11	bit_depth
water	178:50	0:0	12	bit_depth
arg	178:61	178:64	11	red
water	178:61	0:0	12	red
arg	178:66	178:77	11	gamma_table
water	178:66	0:0	12	gamma_table
arg	179:21	179:25	11	conv
water	179:21	0:0	12	conv
water	179:26	0:0	10	;
call	180:18	181:25	10	set_value
arg	180:28	180:31	11	row
water	180:28	0:0	12	row
arg	180:33	180:41	11	rowbytes
water	180:33	0:0	12	rowbytes
arg	180:43	180:48	11	4*x+1
water	180:43	0:0	12	4
op	180:44	0:0	12	*
water	180:45	0:0	12	x
op	180:46	0:0	12	+
water	180:47	0:0	12	1
arg	180:50	180:59	11	bit_depth
water	180:50	0:0	12	bit_depth
arg	180:61	180:66	11	green
water	180:61	0:0	12	green
arg	180:68	180:79	11	gamma_table
water	180:68	0:0	12	gamma_table
arg	181:21	181:25	11	conv
water	181:21	0:0	12	conv
water	181:26	0:0	10	;
call	182:18	183:25	10	set_value
arg	182:28	182:31	11	row
water	182:28	0:0	12	row
arg	182:33	182:41	11	rowbytes
water	182:33	0:0	12	rowbytes
arg	182:43	182:48	11	4*x+2
water	182:43	0:0	12	4
op	182:44	0:0	12	*
water	182:45	0:0	12	x
op	182:46	0:0	12	+
water	182:47	0:0	12	2
arg	182:50	182:59	11	bit_depth
water	182:50	0:0	12	bit_depth
arg	182:61	182:65	11	blue
water	182:61	0:0	12	blue
arg	182:67	182:78	11	gamma_table
water	182:67	0:0	12	gamma_table
arg	183:21	183:25	11	conv
water	183:21	0:0	12	conv
water	183:26	0:0	10	;
call	184:18	185:25	10	set_value
arg	184:28	184:31	11	row
water	184:28	0:0	12	row
arg	184:33	184:41	11	rowbytes
water	184:33	0:0	12	rowbytes
arg	184:43	184:48	11	4*x+3
water	184:43	0:0	12	4
op	184:44	0:0	12	*
water	184:45	0:0	12	x
op	184:46	0:0	12	+
water	184:47	0:0	12	3
arg	184:50	184:59	11	bit_depth
water	184:50	0:0	12	bit_depth
arg	184:61	184:66	11	alpha
water	184:61	0:0	12	alpha
arg	184:68	184:79	11	gamma_table
water	184:68	0:0	12	gamma_table
arg	185:21	185:25	11	conv
water	185:21	0:0	12	conv
water	185:26	0:0	10	;
water	186:15	0:0	10	}
water	187:12	0:0	8	}
break	188:9	188:14	8	
label	189:9	189:16	8	default :
call	190:12	190:67	8	fprintf
arg	190:20	190:26	9	stderr
water	190:20	0:0	10	stderr
arg	190:28	190:67	9	"makepng: internal bad channel count\n"
water	190:28	0:0	10	"makepng: internal bad channel count\n"
water	190:68	0:0	8	;
call	191:12	191:18	8	exit
arg	191:17	191:18	9	2
water	191:17	0:0	10	2
water	191:19	0:0	8	;
water	192:6	0:0	8	}
else	193:3	199:3	2
stmts	194:3	199:3	3	
water	194:3	0:0	4	{
call	195:6	197:48	4	fprintf
arg	195:14	195:20	5	stderr
water	195:14	0:0	6	stderr
arg	196:9	196:68	5	"makepng: --color: count(%u) does not match channels(%u)\n"
water	196:9	0:0	6	"makepng: --color: count(%u) does not match channels(%u)\n"
arg	197:9	197:18	5	colors[0]
water	197:9	0:0	6	colors
op	197:15	0:0	6	[
water	197:16	0:0	6	0
op	197:17	0:0	6	]
arg	197:20	197:48	5	channels_of_type(color_type)
call	197:20	197:47	6	channels_of_type
arg	197:37	197:47	7	color_type
water	197:37	0:0	8	color_type
water	197:49	0:0	4	;
call	198:6	198:12	4	exit
arg	198:11	198:12	5	1
water	198:11	0:0	6	1
water	198:13	0:0	4	;
water	199:3	0:0	4	}
