func	2:0	165:0	0	static int	check_one_character
params	2:30	0:0	1	
param	2:31	2:50	2	checkfp_command *	co
param	2:52	2:69	2	checkfp_control	c
param	2:71	2:77	2	int	ch
stmnts	0:0	164:11	1	
decl	6:3	6:23	2	png_size_t	index
op	6:20	0:0	2	=
water	6:22	0:0	2	0
decl	7:3	7:29	2	const char	test
op	7:19	0:0	2	=
water	7:21	0:0	2	(
water	7:22	0:0	2	char
water	7:26	0:0	2	)
water	7:27	0:0	2	ch
decl	8:3	8:78	2	const int	number_is_valid
op	8:29	0:0	2	=
call	8:31	8:77	3	png_check_fp_number
arg	8:51	8:56	4	&test
op	8:51	0:0	5	&
water	8:52	0:0	5	test
arg	8:58	8:59	4	1
water	8:58	0:0	5	1
arg	8:61	8:69	4	&c.state
op	8:61	0:0	5	&
water	8:62	0:0	5	c
op	8:63	0:0	5	.
water	8:64	0:0	5	state
arg	8:71	8:77	4	&index
op	8:71	0:0	5	&
water	8:72	0:0	5	index
decl	9:3	9:46	2	const int	character_accepted
op	9:32	0:0	2	=
water	9:34	0:0	2	(
water	9:35	0:0	2	index
op	9:41	0:0	2	==
water	9:44	0:0	2	1
water	9:45	0:0	2	)
if	10:3	11:19	2	(c . check_state != exponent &&isdigit (ch ) && ch != '0')
cond	10:7	10:57	3	c . check_state != exponent &&isdigit (ch ) && ch != '0'
water	10:7	0:0	4	c
op	10:8	0:0	4	.
water	10:9	0:0	4	check_state
op	10:21	0:0	4	!=
water	10:24	0:0	4	exponent
op	10:33	0:0	4	&&
call	10:36	10:46	4	isdigit
arg	10:44	10:46	5	ch
water	10:44	0:0	6	ch
op	10:48	0:0	4	&&
water	10:51	0:0	4	ch
op	10:54	0:0	4	!=
water	10:57	0:0	4	'0'
stmts	11:6	11:19	3	
water	11:6	0:0	4	c
op	11:7	0:0	4	.
water	11:8	0:0	4	is_zero
op	11:16	0:0	4	=
water	11:18	0:0	4	0
water	11:19	0:0	4	;
if	12:3	13:23	2	(c . check_state == start && c . at_start && ch == '-')
cond	12:7	12:53	3	c . check_state == start && c . at_start && ch == '-'
water	12:7	0:0	4	c
op	12:8	0:0	4	.
water	12:9	0:0	4	check_state
op	12:21	0:0	4	==
water	12:24	0:0	4	start
op	12:30	0:0	4	&&
water	12:33	0:0	4	c
op	12:34	0:0	4	.
water	12:35	0:0	4	at_start
op	12:44	0:0	4	&&
water	12:47	0:0	4	ch
op	12:50	0:0	4	==
water	12:53	0:0	4	'-'
stmts	13:6	13:23	3	
water	13:6	0:0	4	c
op	13:7	0:0	4	.
water	13:8	0:0	4	is_negative
op	13:20	0:0	4	=
water	13:22	0:0	4	1
water	13:23	0:0	4	;
if	14:3	15:40	2	(isprint (ch ))
cond	14:7	14:17	3	isprint (ch )
call	14:7	14:17	4	isprint
arg	14:15	14:17	5	ch
water	14:15	0:0	6	ch
stmts	15:6	15:40	3	
water	15:6	0:0	4	co
op	15:8	0:0	4	->
water	15:10	0:0	4	number
op	15:16	0:0	4	[
water	15:17	0:0	4	c
op	15:18	0:0	4	.
water	15:19	0:0	4	cnumber
op	15:26	0:0	4	++
op	15:28	0:0	4	]
op	15:30	0:0	4	=
water	15:32	0:0	4	(
water	15:33	0:0	4	char
water	15:37	0:0	4	)
water	15:38	0:0	4	ch
water	15:40	0:0	4	;
else	16:3	22:3	2
stmts	17:3	22:3	3	
water	17:3	0:0	4	{
water	18:6	0:0	4	co
op	18:8	0:0	4	->
water	18:10	0:0	4	number
op	18:16	0:0	4	[
water	18:17	0:0	4	c
op	18:18	0:0	4	.
water	18:19	0:0	4	cnumber
op	18:26	0:0	4	++
op	18:28	0:0	4	]
op	18:30	0:0	4	=
water	18:32	0:0	4	'<'
water	18:35	0:0	4	;
water	19:6	0:0	4	co
op	19:8	0:0	4	->
water	19:10	0:0	4	number
op	19:16	0:0	4	[
water	19:17	0:0	4	c
op	19:18	0:0	4	.
water	19:19	0:0	4	cnumber
op	19:26	0:0	4	++
op	19:28	0:0	4	]
op	19:30	0:0	4	=
water	19:32	0:0	4	hexdigits
op	19:41	0:0	4	[
water	19:42	0:0	4	(
water	19:43	0:0	4	ch
op	19:46	0:0	4	>>
water	19:49	0:0	4	4
water	19:50	0:0	4	)
op	19:52	0:0	4	&
water	19:54	0:0	4	0
water	19:55	0:0	4	xf
op	19:57	0:0	4	]
water	19:58	0:0	4	;
water	20:6	0:0	4	co
op	20:8	0:0	4	->
water	20:10	0:0	4	number
op	20:16	0:0	4	[
water	20:17	0:0	4	c
op	20:18	0:0	4	.
water	20:19	0:0	4	cnumber
op	20:26	0:0	4	++
op	20:28	0:0	4	]
op	20:30	0:0	4	=
water	20:32	0:0	4	hexdigits
op	20:41	0:0	4	[
water	20:42	0:0	4	ch
op	20:45	0:0	4	&
water	20:47	0:0	4	0
water	20:48	0:0	4	xf
op	20:50	0:0	4	]
water	20:51	0:0	4	;
water	21:6	0:0	4	co
op	21:8	0:0	4	->
water	21:10	0:0	4	number
op	21:16	0:0	4	[
water	21:17	0:0	4	c
op	21:18	0:0	4	.
water	21:19	0:0	4	cnumber
op	21:26	0:0	4	++
op	21:28	0:0	4	]
op	21:30	0:0	4	=
water	21:32	0:0	4	'>'
water	21:35	0:0	4	;
water	22:3	0:0	4	}
water	23:3	0:0	2	co
op	23:5	0:0	2	->
water	23:7	0:0	2	number
op	23:13	0:0	2	[
water	23:14	0:0	2	c
op	23:15	0:0	2	.
water	23:16	0:0	2	cnumber
op	23:23	0:0	2	]
op	23:25	0:0	2	=
water	23:27	0:0	2	0
water	23:28	0:0	2	;
if	24:3	25:41	2	(co -> verbose > 1)
cond	24:7	24:21	3	co -> verbose > 1
water	24:7	0:0	4	co
op	24:9	0:0	4	->
water	24:11	0:0	4	verbose
op	24:19	0:0	4	>
water	24:21	0:0	4	1
stmts	25:6	25:41	3	
call	25:6	25:40	4	fprintf
arg	25:14	25:20	5	stderr
water	25:14	0:0	6	stderr
arg	25:22	25:28	5	"%s\n"
water	25:22	0:0	6	"%s\n"
arg	25:30	25:40	5	co->number
water	25:30	0:0	6	co
op	25:32	0:0	6	->
water	25:34	0:0	6	number
water	25:41	0:0	4	;
if	26:3	32:3	2	(++ ( co -> ctimes ) == 1000000)
cond	26:7	26:25	3	++ ( co -> ctimes ) == 1000000
op	26:7	0:0	4	++
water	26:9	0:0	4	(
water	26:10	0:0	4	co
op	26:12	0:0	4	->
water	26:14	0:0	4	ctimes
water	26:20	0:0	4	)
op	26:22	0:0	4	==
water	26:25	0:0	4	1000000
stmts	27:3	32:3	3	
water	27:3	0:0	4	{
if	28:6	29:27	4	(co -> verbose == 1)
cond	28:10	28:25	5	co -> verbose == 1
water	28:10	0:0	6	co
op	28:12	0:0	6	->
water	28:14	0:0	6	verbose
op	28:22	0:0	6	==
water	28:25	0:0	6	1
stmts	29:9	29:27	5	
call	29:9	29:26	6	fputc
arg	29:15	29:18	7	'.'
water	29:15	0:0	8	'.'
arg	29:20	29:26	7	stderr
water	29:20	0:0	8	stderr
water	29:27	0:0	6	;
water	30:6	0:0	4	co
op	30:8	0:0	4	->
water	30:10	0:0	4	ctimes
op	30:17	0:0	4	=
water	30:19	0:0	4	0
water	30:20	0:0	4	;
op	31:6	0:0	4	++
water	31:8	0:0	4	(
water	31:9	0:0	4	co
op	31:11	0:0	4	->
water	31:13	0:0	4	cmillions
water	31:22	0:0	4	)
water	31:23	0:0	4	;
water	32:3	0:0	4	}
if	33:3	34:22	2	(! number_is_valid)
cond	33:7	33:8	3	! number_is_valid
op	33:7	0:0	4	!
water	33:8	0:0	4	number_is_valid
stmts	34:6	34:22	3	
op	34:6	0:0	4	++
water	34:8	0:0	4	(
water	34:9	0:0	4	co
op	34:11	0:0	4	->
water	34:13	0:0	4	cinvalid
water	34:21	0:0	4	)
water	34:22	0:0	4	;
if	35:3	36:23	2	(! character_accepted)
cond	35:7	35:8	3	! character_accepted
op	35:7	0:0	4	!
water	35:8	0:0	4	character_accepted
stmts	36:6	36:23	3	
op	36:6	0:0	4	++
water	36:8	0:0	4	(
water	36:9	0:0	4	co
op	36:11	0:0	4	->
water	36:13	0:0	4	cnoaccept
water	36:22	0:0	4	)
water	36:23	0:0	4	;
if	38:3	43:3	2	(index != 0 && index != 1)
cond	38:7	38:30	3	index != 0 && index != 1
water	38:7	0:0	4	index
op	38:13	0:0	4	!=
water	38:16	0:0	4	0
op	38:18	0:0	4	&&
water	38:21	0:0	4	index
op	38:27	0:0	4	!=
water	38:30	0:0	4	1
stmts	39:3	43:3	3	
water	39:3	0:0	4	{
call	40:6	41:29	4	fprintf
arg	40:14	40:20	5	stderr
water	40:14	0:0	6	stderr
arg	40:22	40:61	5	"%s: read beyond end of string (%lu)\n"
water	40:22	0:0	6	"%s: read beyond end of string (%lu)\n"
arg	40:63	40:73	5	co->number
water	40:63	0:0	6	co
op	40:65	0:0	6	->
water	40:67	0:0	6	number
arg	41:9	41:29	5	(unsignedlong)index
water	41:9	0:0	6	(
water	41:10	0:0	6	unsigned
water	41:19	0:0	6	long
water	41:23	0:0	6	)
water	41:24	0:0	6	index
water	41:30	0:0	4	;
return	42:6	42:14	4	0
water	42:13	0:0	5	0
water	43:3	0:0	4	}
if	47:3	52:3	2	(PNG_FP_IS_NEGATIVE (c . state ) != ( number_is_valid && ! c . is_zero && c . is_negative ))
cond	47:7	48:53	3	PNG_FP_IS_NEGATIVE (c . state ) != ( number_is_valid && ! c . is_zero && c . is_negative )
call	47:7	47:33	4	PNG_FP_IS_NEGATIVE
arg	47:26	47:33	5	c.state
water	47:26	0:0	6	c
op	47:27	0:0	6	.
water	47:28	0:0	6	state
op	47:35	0:0	4	!=
water	48:6	0:0	4	(
water	48:7	0:0	4	number_is_valid
op	48:23	0:0	4	&&
op	48:26	0:0	4	!
water	48:27	0:0	4	c
op	48:28	0:0	4	.
water	48:29	0:0	4	is_zero
op	48:37	0:0	4	&&
water	48:40	0:0	4	c
op	48:41	0:0	4	.
water	48:42	0:0	4	is_negative
water	48:53	0:0	4	)
stmts	49:3	52:3	3	
water	49:3	0:0	4	{
call	50:6	50:65	4	fprintf
arg	50:14	50:20	5	stderr
water	50:14	0:0	6	stderr
arg	50:22	50:53	5	"%s: negative when it is not\n"
water	50:22	0:0	6	"%s: negative when it is not\n"
arg	50:55	50:65	5	co->number
water	50:55	0:0	6	co
op	50:57	0:0	6	->
water	50:59	0:0	6	number
water	50:66	0:0	4	;
return	51:6	51:14	4	0
water	51:13	0:0	5	0
water	52:3	0:0	4	}
if	53:3	57:3	2	(PNG_FP_IS_ZERO (c . state ) != ( number_is_valid && c . is_zero ))
cond	53:7	53:63	3	PNG_FP_IS_ZERO (c . state ) != ( number_is_valid && c . is_zero )
call	53:7	53:29	4	PNG_FP_IS_ZERO
arg	53:22	53:29	5	c.state
water	53:22	0:0	6	c
op	53:23	0:0	6	.
water	53:24	0:0	6	state
op	53:31	0:0	4	!=
water	53:34	0:0	4	(
water	53:35	0:0	4	number_is_valid
op	53:51	0:0	4	&&
water	53:54	0:0	4	c
op	53:55	0:0	4	.
water	53:56	0:0	4	is_zero
water	53:63	0:0	4	)
stmts	54:3	57:3	3	
water	54:3	0:0	4	{
call	55:6	55:61	4	fprintf
arg	55:14	55:20	5	stderr
water	55:14	0:0	6	stderr
arg	55:22	55:49	5	"%s: zero when it is not\n"
water	55:22	0:0	6	"%s: zero when it is not\n"
arg	55:51	55:61	5	co->number
water	55:51	0:0	6	co
op	55:53	0:0	6	->
water	55:55	0:0	6	number
water	55:62	0:0	4	;
return	56:6	56:14	4	0
water	56:13	0:0	5	0
water	57:3	0:0	4	}
if	58:3	63:3	2	(PNG_FP_IS_POSITIVE (c . state ) != ( number_is_valid && ! c . is_zero && ! c . is_negative ))
cond	58:7	59:54	3	PNG_FP_IS_POSITIVE (c . state ) != ( number_is_valid && ! c . is_zero && ! c . is_negative )
call	58:7	58:33	4	PNG_FP_IS_POSITIVE
arg	58:26	58:33	5	c.state
water	58:26	0:0	6	c
op	58:27	0:0	6	.
water	58:28	0:0	6	state
op	58:35	0:0	4	!=
water	59:6	0:0	4	(
water	59:7	0:0	4	number_is_valid
op	59:23	0:0	4	&&
op	59:26	0:0	4	!
water	59:27	0:0	4	c
op	59:28	0:0	4	.
water	59:29	0:0	4	is_zero
op	59:37	0:0	4	&&
op	59:40	0:0	4	!
water	59:41	0:0	4	c
op	59:42	0:0	4	.
water	59:43	0:0	4	is_negative
water	59:54	0:0	4	)
stmts	60:3	63:3	3	
water	60:3	0:0	4	{
call	61:6	61:65	4	fprintf
arg	61:14	61:20	5	stderr
water	61:14	0:0	6	stderr
arg	61:22	61:53	5	"%s: positive when it is not\n"
water	61:22	0:0	6	"%s: positive when it is not\n"
arg	61:55	61:65	5	co->number
water	61:55	0:0	6	co
op	61:57	0:0	6	->
water	61:59	0:0	6	number
water	61:66	0:0	4	;
return	62:6	62:14	4	0
water	62:13	0:0	5	0
water	63:3	0:0	4	}
if	65:3	90:3	2	(isdigit (ch ))
cond	65:7	65:17	3	isdigit (ch )
call	65:7	65:17	4	isdigit
arg	65:15	65:17	5	ch
water	65:15	0:0	6	ch
stmts	66:3	90:3	3	
water	66:3	0:0	4	{
if	67:6	71:6	4	(! character_accepted)
cond	67:10	67:11	5	! character_accepted
op	67:10	0:0	6	!
water	67:11	0:0	6	character_accepted
stmts	68:6	71:6	5	
water	68:6	0:0	6	{
call	69:9	69:72	6	fprintf
arg	69:17	69:23	7	stderr
water	69:17	0:0	8	stderr
arg	69:25	69:56	7	"%s: digit '%c' not accepted\n"
water	69:25	0:0	8	"%s: digit '%c' not accepted\n"
arg	69:58	69:68	7	co->number
water	69:58	0:0	8	co
op	69:60	0:0	8	->
water	69:62	0:0	8	number
arg	69:70	69:72	7	ch
water	69:70	0:0	8	ch
water	69:73	0:0	6	;
return	70:9	70:17	6	0
water	70:16	0:0	7	0
water	71:6	0:0	6	}
if	72:6	77:6	4	(! number_is_valid)
cond	72:10	72:11	5	! number_is_valid
op	72:10	0:0	6	!
water	72:11	0:0	6	number_is_valid
stmts	73:6	77:6	5	
water	73:6	0:0	6	{
call	74:9	75:26	6	fprintf
arg	74:17	74:23	7	stderr
water	74:17	0:0	8	stderr
arg	74:25	74:70	7	"%s: saw a digit (%c) but number not valid\n"
water	74:25	0:0	8	"%s: saw a digit (%c) but number not valid\n"
arg	75:12	75:22	7	co->number
water	75:12	0:0	8	co
op	75:14	0:0	8	->
water	75:16	0:0	8	number
arg	75:24	75:26	7	ch
water	75:24	0:0	8	ch
water	75:27	0:0	6	;
return	76:9	76:17	6	0
water	76:16	0:0	7	0
water	77:6	0:0	6	}
op	78:6	0:0	4	++
water	78:8	0:0	4	c
op	78:9	0:0	4	.
water	78:10	0:0	4	cdigits_in_state
water	78:26	0:0	4	;
water	79:6	0:0	4	c
op	79:7	0:0	4	.
water	79:8	0:0	4	at_start
op	79:17	0:0	4	=
water	79:19	0:0	4	0
water	79:20	0:0	4	;
water	80:6	0:0	4	c
op	80:7	0:0	4	.
water	80:8	0:0	4	number_was_valid
op	80:25	0:0	4	=
water	80:27	0:0	4	1
water	80:28	0:0	4	;
if	85:6	86:43	4	(c . cdigits_in_state < 1)
cond	85:10	85:31	5	c . cdigits_in_state < 1
water	85:10	0:0	6	c
op	85:11	0:0	6	.
water	85:12	0:0	6	cdigits_in_state
op	85:29	0:0	6	<
water	85:31	0:0	6	1
stmts	86:9	86:43	5	
return	86:9	86:43	6	check_all_characters(co,c)
call	86:16	86:42	7	check_all_characters
arg	86:37	86:39	8	co
water	86:37	0:0	9	co
arg	86:41	86:42	8	c
water	86:41	0:0	9	c
else	87:6	89:50	4
stmts	88:9	89:50	5	
return	88:9	89:50	6	check_some_characters(co,c,state_characters[c.check_state].tests)
call	88:16	89:49	7	check_some_characters
arg	88:38	88:40	8	co
water	88:38	0:0	9	co
arg	88:42	88:43	8	c
water	88:42	0:0	9	c
arg	89:12	89:49	8	state_characters[c.check_state].tests
water	89:12	0:0	9	state_characters
op	89:28	0:0	9	[
water	89:29	0:0	9	c
op	89:30	0:0	9	.
water	89:31	0:0	9	check_state
op	89:42	0:0	9	]
op	89:43	0:0	9	.
water	89:44	0:0	9	tests
water	90:3	0:0	4	}
else	92:3	142:3	2
stmts	92:8	142:3	3	
if	92:8	142:3	4	(( ( ch == '+' || ch == '-' ) && c . check_state != fraction && c . at_start ) || ( ch == '.' && c . check_state == start ) || ( ( ch == 'e' || ch == 'E' ) && c . number_was_valid && c . check_state != exponent ))
cond	92:12	96:40	5	( ( ch == '+' || ch == '-' ) && c . check_state != fraction && c . at_start ) || ( ch == '.' && c . check_state == start ) || ( ( ch == 'e' || ch == 'E' ) && c . number_was_valid && c . check_state != exponent )
water	92:12	0:0	6	(
water	92:13	0:0	6	(
water	92:14	0:0	6	ch
op	92:17	0:0	6	==
water	92:20	0:0	6	'+'
op	92:24	0:0	6	||
water	92:27	0:0	6	ch
op	92:30	0:0	6	==
water	92:33	0:0	6	'-'
water	92:36	0:0	6	)
op	92:38	0:0	6	&&
water	92:41	0:0	6	c
op	92:42	0:0	6	.
water	92:43	0:0	6	check_state
op	92:55	0:0	6	!=
water	92:58	0:0	6	fraction
op	92:67	0:0	6	&&
water	93:15	0:0	6	c
op	93:16	0:0	6	.
water	93:17	0:0	6	at_start
water	93:25	0:0	6	)
op	93:27	0:0	6	||
water	94:12	0:0	6	(
water	94:13	0:0	6	ch
op	94:16	0:0	6	==
water	94:19	0:0	6	'.'
op	94:23	0:0	6	&&
water	94:26	0:0	6	c
op	94:27	0:0	6	.
water	94:28	0:0	6	check_state
op	94:40	0:0	6	==
water	94:43	0:0	6	start
water	94:48	0:0	6	)
op	94:50	0:0	6	||
water	95:12	0:0	6	(
water	95:13	0:0	6	(
water	95:14	0:0	6	ch
op	95:17	0:0	6	==
water	95:20	0:0	6	'e'
op	95:24	0:0	6	||
water	95:27	0:0	6	ch
op	95:30	0:0	6	==
water	95:33	0:0	6	'E'
water	95:36	0:0	6	)
op	95:38	0:0	6	&&
water	95:41	0:0	6	c
op	95:42	0:0	6	.
water	95:43	0:0	6	number_was_valid
op	95:60	0:0	6	&&
water	96:15	0:0	6	c
op	96:16	0:0	6	.
water	96:17	0:0	6	check_state
op	96:29	0:0	6	!=
water	96:32	0:0	6	exponent
water	96:40	0:0	6	)
stmts	97:3	142:3	5	
water	97:3	0:0	6	{
if	98:6	102:6	6	(! character_accepted)
cond	98:10	98:11	7	! character_accepted
op	98:10	0:0	8	!
water	98:11	0:0	8	character_accepted
stmts	99:6	102:6	7	
water	99:6	0:0	8	{
call	100:9	100:76	8	fprintf
arg	100:17	100:23	9	stderr
water	100:17	0:0	10	stderr
arg	100:25	100:60	9	"%s: character '%c' not accepted\n"
water	100:25	0:0	10	"%s: character '%c' not accepted\n"
arg	100:62	100:72	9	co->number
water	100:62	0:0	10	co
op	100:64	0:0	10	->
water	100:66	0:0	10	number
arg	100:74	100:76	9	ch
water	100:74	0:0	10	ch
water	100:77	0:0	8	;
return	101:9	101:17	8	0
water	101:16	0:0	9	0
water	102:6	0:0	8	}
if	104:6	109:6	6	(number_is_valid && ( c . check_state != start || ch != '.' ))
cond	104:10	104:65	7	number_is_valid && ( c . check_state != start || ch != '.' )
water	104:10	0:0	8	number_is_valid
op	104:26	0:0	8	&&
water	104:29	0:0	8	(
water	104:30	0:0	8	c
op	104:31	0:0	8	.
water	104:32	0:0	8	check_state
op	104:44	0:0	8	!=
water	104:47	0:0	8	start
op	104:53	0:0	8	||
water	104:56	0:0	8	ch
op	104:59	0:0	8	!=
water	104:62	0:0	8	'.'
water	104:65	0:0	8	)
stmts	105:6	109:6	7	
water	105:6	0:0	8	{
call	106:9	107:26	8	fprintf
arg	106:17	106:23	9	stderr
water	106:17	0:0	10	stderr
arg	106:25	106:70	9	"%s: saw a non-digit (%c) but number valid\n"
water	106:25	0:0	10	"%s: saw a non-digit (%c) but number valid\n"
arg	107:12	107:22	9	co->number
water	107:12	0:0	10	co
op	107:14	0:0	10	->
water	107:16	0:0	10	number
arg	107:24	107:26	9	ch
water	107:24	0:0	10	ch
water	107:27	0:0	8	;
return	108:9	108:17	8	0
water	108:16	0:0	9	0
water	109:6	0:0	8	}
water	110:6	0:0	6	c
op	110:7	0:0	6	.
water	110:8	0:0	6	number_was_valid
op	110:25	0:0	6	=
water	110:27	0:0	6	number_is_valid
water	110:42	0:0	6	;
if	115:6	122:6	6	(c . check_state == start && ch == '.')
cond	115:10	115:42	7	c . check_state == start && ch == '.'
water	115:10	0:0	8	c
op	115:11	0:0	8	.
water	115:12	0:0	8	check_state
op	115:24	0:0	8	==
water	115:27	0:0	8	start
op	115:33	0:0	8	&&
water	115:36	0:0	8	ch
op	115:39	0:0	8	==
water	115:42	0:0	8	'.'
stmts	116:6	122:6	7	
water	116:6	0:0	8	{
water	117:9	0:0	8	c
op	117:10	0:0	8	.
water	117:11	0:0	8	check_state
op	117:23	0:0	8	=
water	117:25	0:0	8	fraction
water	117:33	0:0	8	;
water	118:9	0:0	8	c
op	118:10	0:0	8	.
water	118:11	0:0	8	at_start
op	118:20	0:0	8	=
op	118:22	0:0	8	!
water	118:23	0:0	8	number_is_valid
water	118:38	0:0	8	;
water	119:9	0:0	8	c
op	119:10	0:0	8	.
water	119:11	0:0	8	cdigits_in_state
op	119:28	0:0	8	=
water	119:30	0:0	8	0
water	119:31	0:0	8	;
water	120:9	0:0	8	c
op	120:10	0:0	8	.
water	120:11	0:0	8	limit
op	120:17	0:0	8	=
water	120:19	0:0	8	co
op	120:21	0:0	8	->
water	120:23	0:0	8	limit
water	120:28	0:0	8	;
return	121:9	121:43	8	check_all_characters(co,c)
call	121:16	121:42	9	check_all_characters
arg	121:37	121:39	10	co
water	121:37	0:0	11	co
arg	121:41	121:42	10	c
water	121:41	0:0	11	c
water	122:6	0:0	8	}
else	123:6	130:6	6
stmts	123:11	130:6	7	
if	123:11	130:6	8	(c . check_state < exponent && ( ch == 'e' || ch == 'E' ))
cond	123:15	123:66	9	c . check_state < exponent && ( ch == 'e' || ch == 'E' )
water	123:15	0:0	10	c
op	123:16	0:0	10	.
water	123:17	0:0	10	check_state
op	123:29	0:0	10	<
water	123:31	0:0	10	exponent
op	123:40	0:0	10	&&
water	123:43	0:0	10	(
water	123:44	0:0	10	ch
op	123:47	0:0	10	==
water	123:50	0:0	10	'e'
op	123:54	0:0	10	||
water	123:57	0:0	10	ch
op	123:60	0:0	10	==
water	123:63	0:0	10	'E'
water	123:66	0:0	10	)
stmts	124:6	130:6	9	
water	124:6	0:0	10	{
water	125:9	0:0	10	c
op	125:10	0:0	10	.
water	125:11	0:0	10	check_state
op	125:23	0:0	10	=
water	125:25	0:0	10	exponent
water	125:33	0:0	10	;
water	126:9	0:0	10	c
op	126:10	0:0	10	.
water	126:11	0:0	10	at_start
op	126:20	0:0	10	=
water	126:22	0:0	10	1
water	126:23	0:0	10	;
water	127:9	0:0	10	c
op	127:10	0:0	10	.
water	127:11	0:0	10	cdigits_in_state
op	127:28	0:0	10	=
water	127:30	0:0	10	0
water	127:31	0:0	10	;
water	128:9	0:0	10	c
op	128:10	0:0	10	.
water	128:11	0:0	10	limit
op	128:17	0:0	10	=
water	128:19	0:0	10	co
op	128:21	0:0	10	->
water	128:23	0:0	10	limit
water	128:28	0:0	10	;
return	129:9	129:43	10	check_all_characters(co,c)
call	129:16	129:42	11	check_all_characters
arg	129:37	129:39	12	co
water	129:37	0:0	13	co
arg	129:41	129:42	12	c
water	129:41	0:0	13	c
water	130:6	0:0	10	}
else	132:6	141:6	6
stmts	133:6	141:6	7	
water	133:6	0:0	8	{
if	134:9	138:9	8	(ch != '-' && ch != '+')
cond	134:13	134:32	9	ch != '-' && ch != '+'
water	134:13	0:0	10	ch
op	134:16	0:0	10	!=
water	134:19	0:0	10	'-'
op	134:23	0:0	10	&&
water	134:26	0:0	10	ch
op	134:29	0:0	10	!=
water	134:32	0:0	10	'+'
stmts	135:9	138:9	9	
water	135:9	0:0	10	{
call	136:12	136:59	10	fprintf
arg	136:20	136:26	11	stderr
water	136:20	0:0	12	stderr
arg	136:28	136:59	11	"checkfp: internal error (1)\n"
water	136:28	0:0	12	"checkfp: internal error (1)\n"
water	136:60	0:0	10	;
return	137:12	137:20	10	0
water	137:19	0:0	11	0
water	138:9	0:0	10	}
water	139:9	0:0	8	c
op	139:10	0:0	8	.
water	139:11	0:0	8	at_start
op	139:20	0:0	8	=
water	139:22	0:0	8	0
water	139:23	0:0	8	;
return	140:9	140:43	8	check_all_characters(co,c)
call	140:16	140:42	9	check_all_characters
arg	140:37	140:39	10	co
water	140:37	0:0	11	co
arg	140:41	140:42	10	c
water	140:41	0:0	11	c
water	141:6	0:0	8	}
water	142:3	0:0	6	}
else	144:3	162:3	2
stmts	145:3	162:3	3	
water	145:3	0:0	4	{
if	146:6	151:6	4	(character_accepted)
cond	146:10	146:10	5	character_accepted
water	146:10	0:0	6	character_accepted
stmts	147:6	151:6	5	
water	147:6	0:0	6	{
call	148:9	149:18	6	fprintf
arg	148:17	148:23	7	stderr
water	148:17	0:0	8	stderr
arg	148:25	148:65	7	"%s: character '%c' [0x%.2x] accepted\n"
water	148:25	0:0	8	"%s: character '%c' [0x%.2x] accepted\n"
arg	148:67	148:77	7	co->number
water	148:67	0:0	8	co
op	148:69	0:0	8	->
water	148:71	0:0	8	number
arg	149:12	149:14	7	ch
water	149:12	0:0	8	ch
arg	149:16	149:18	7	ch
water	149:16	0:0	8	ch
water	149:19	0:0	6	;
return	150:9	150:17	6	0
water	150:16	0:0	7	0
water	151:6	0:0	6	}
if	152:6	158:6	4	(number_is_valid != c . number_was_valid)
cond	152:10	152:31	5	number_is_valid != c . number_was_valid
water	152:10	0:0	6	number_is_valid
op	152:26	0:0	6	!=
water	152:29	0:0	6	c
op	152:30	0:0	6	.
water	152:31	0:0	6	number_was_valid
stmts	153:6	158:6	5	
water	153:6	0:0	6	{
call	154:9	156:18	6	fprintf
arg	154:17	154:23	7	stderr
water	154:17	0:0	8	stderr
arg	155:12	155:67	7	"%s: character '%c' [0x%.2x] changed number validity\n"
water	155:12	0:0	8	"%s: character '%c' [0x%.2x] changed number validity\n"
arg	155:69	155:79	7	co->number
water	155:69	0:0	8	co
op	155:71	0:0	8	->
water	155:73	0:0	8	number
arg	156:12	156:14	7	ch
water	156:12	0:0	8	ch
arg	156:16	156:18	7	ch
water	156:16	0:0	8	ch
water	156:19	0:0	6	;
return	157:9	157:17	6	0
water	157:16	0:0	7	0
water	158:6	0:0	6	}
water	162:3	0:0	4	}
return	164:3	164:11	2	1
water	164:10	0:0	3	1
