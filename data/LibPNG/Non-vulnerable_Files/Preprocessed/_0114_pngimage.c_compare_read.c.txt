func	1:0	225:0	0	static int	compare_read
params	2:12	0:0	1	
param	2:13	2:31	2	struct display *	dp
param	2:33	2:55	2	int	applied_transforms
stmnts	0:0	224:11	1	
decl	5:3	5:18	2	size_t	rowbytes
decl	6:3	6:28	2	png_uint_32	width
water	6:20	0:0	2	,
decl	6:3	6:28	2	png_uint_32	height
decl	7:3	7:28	2	int	bit_depth
water	7:16	0:0	2	,
decl	7:3	7:28	2	int	color_type
decl	8:3	8:58	2	int	interlace_method
water	8:23	0:0	2	,
decl	8:3	8:58	2	int	compression_method
water	8:43	0:0	2	,
decl	8:3	8:58	2	int	filter_method
decl	9:3	9:23	2	const char	*e
op	9:17	0:0	2	=
water	9:19	0:0	2	NULL
call	10:3	11:73	2	png_get_IHDR
arg	10:16	10:27	3	dp->read_pp
water	10:16	0:0	4	dp
op	10:18	0:0	4	->
water	10:20	0:0	4	read_pp
arg	10:29	10:40	3	dp->read_ip
water	10:29	0:0	4	dp
op	10:31	0:0	4	->
water	10:33	0:0	4	read_ip
arg	10:42	10:48	3	&width
op	10:42	0:0	4	&
water	10:43	0:0	4	width
arg	10:50	10:57	3	&height
op	10:50	0:0	4	&
water	10:51	0:0	4	height
arg	10:59	10:69	3	&bit_depth
op	10:59	0:0	4	&
water	10:60	0:0	4	bit_depth
arg	11:6	11:17	3	&color_type
op	11:6	0:0	4	&
water	11:7	0:0	4	color_type
arg	11:19	11:36	3	&interlace_method
op	11:19	0:0	4	&
water	11:20	0:0	4	interlace_method
arg	11:38	11:57	3	&compression_method
op	11:38	0:0	4	&
water	11:39	0:0	4	compression_method
arg	11:59	11:73	3	&filter_method
op	11:59	0:0	4	&
water	11:60	0:0	4	filter_method
water	11:74	0:0	2	;
call	13:6	14:53	2	display_log
arg	13:18	13:20	3	dp
water	13:18	0:0	4	dp
arg	13:22	13:33	3	APP_WARNING
water	13:22	0:0	4	APP_WARNING
arg	13:35	14:32	3	"IHDR "(unsignedlong)dp->item
water	13:35	0:0	4	"IHDR "
water	14:9	0:0	4	(
water	14:10	0:0	4	unsigned
water	14:19	0:0	4	long
water	14:23	0:0	4	)
water	14:24	0:0	4	dp
op	14:26	0:0	4	->
water	14:28	0:0	4	item
arg	14:34	14:53	3	(unsignedlong)item
water	14:34	0:0	4	(
water	14:35	0:0	4	unsigned
water	14:44	0:0	4	long
water	14:48	0:0	4	)
water	14:49	0:0	4	item
water	14:54	0:0	2	,
water	14:56	0:0	2	e
op	14:58	0:0	2	=
call	16:3	16:10	2	C
arg	16:5	16:10	3	width
water	16:5	0:0	4	width
water	16:11	0:0	2	;
call	17:3	17:11	2	C
arg	17:5	17:11	3	height
water	17:5	0:0	4	height
water	17:12	0:0	2	;
call	18:3	18:14	2	C
arg	18:5	18:14	3	bit_depth
water	18:5	0:0	4	bit_depth
water	18:15	0:0	2	;
call	19:3	19:15	2	C
arg	19:5	19:15	3	color_type
water	19:5	0:0	4	color_type
water	19:16	0:0	2	;
call	20:3	20:21	2	C
arg	20:5	20:21	3	interlace_method
water	20:5	0:0	4	interlace_method
water	20:22	0:0	2	;
call	21:3	21:23	2	C
arg	21:5	21:23	3	compression_method
water	21:5	0:0	4	compression_method
water	21:24	0:0	2	;
call	22:3	22:18	2	C
arg	22:5	22:18	3	filter_method
water	22:5	0:0	4	filter_method
water	22:19	0:0	2	;
if	24:3	25:56	2	(e)
cond	24:7	24:7	3	e
water	24:7	0:0	4	e
stmts	25:6	25:56	3	
call	25:6	25:55	4	display_log
arg	25:18	25:20	5	dp
water	25:18	0:0	6	dp
arg	25:22	25:31	5	APP_ERROR
water	25:22	0:0	6	APP_ERROR
arg	25:33	25:52	5	"IHDR changed (%s)"
water	25:33	0:0	6	"IHDR changed (%s)"
arg	25:54	25:55	5	e
water	25:54	0:0	6	e
water	25:56	0:0	4	;
water	29:3	0:0	2	{
decl	30:6	31:60	2	unsigned long	chunks
op	30:27	0:0	2	=
call	31:9	31:59	3	png_get_valid
arg	31:23	31:34	4	dp->read_pp
water	31:23	0:0	5	dp
op	31:25	0:0	5	->
water	31:27	0:0	5	read_pp
arg	31:36	31:47	4	dp->read_ip
water	31:36	0:0	5	dp
op	31:38	0:0	5	->
water	31:40	0:0	5	read_ip
arg	31:49	31:59	4	0xffffffff
water	31:49	0:0	5	0
water	31:50	0:0	5	xffffffff
if	32:6	34:46	2	(chunks != dp -> chunks)
cond	32:10	32:24	3	chunks != dp -> chunks
water	32:10	0:0	4	chunks
op	32:17	0:0	4	!=
water	32:20	0:0	4	dp
op	32:22	0:0	4	->
water	32:24	0:0	4	chunks
stmts	33:9	34:46	3	
call	33:9	34:45	4	display_log
arg	33:21	33:23	5	dp
water	33:21	0:0	6	dp
arg	33:25	33:33	5	APP_FAIL
water	33:25	0:0	6	APP_FAIL
arg	33:35	33:75	5	"PNG chunks changed from 0x%lx to 0x%lx"
water	33:35	0:0	6	"PNG chunks changed from 0x%lx to 0x%lx"
arg	34:12	34:37	5	(unsignedlong)dp->chunks
water	34:12	0:0	6	(
water	34:13	0:0	6	unsigned
water	34:22	0:0	6	long
water	34:26	0:0	6	)
water	34:27	0:0	6	dp
op	34:29	0:0	6	->
water	34:31	0:0	6	chunks
arg	34:39	34:45	5	chunks
water	34:39	0:0	6	chunks
water	34:46	0:0	4	;
water	35:3	0:0	2	}
water	37:3	0:0	2	rowbytes
op	37:12	0:0	2	=
call	37:14	37:55	2	png_get_rowbytes
arg	37:31	37:42	3	dp->read_pp
water	37:31	0:0	4	dp
op	37:33	0:0	4	->
water	37:35	0:0	4	read_pp
arg	37:44	37:55	3	dp->read_ip
water	37:44	0:0	4	dp
op	37:46	0:0	4	->
water	37:48	0:0	4	read_ip
water	37:56	0:0	2	;
if	41:3	43:71	2	(rowbytes != dp -> original_rowbytes)
cond	41:7	41:23	3	rowbytes != dp -> original_rowbytes
water	41:7	0:0	4	rowbytes
op	41:16	0:0	4	!=
water	41:19	0:0	4	dp
op	41:21	0:0	4	->
water	41:23	0:0	4	original_rowbytes
stmts	42:6	43:71	3	
call	42:6	43:70	4	display_log
arg	42:18	42:20	5	dp
water	42:18	0:0	6	dp
arg	42:22	42:31	5	APP_ERROR
water	42:22	0:0	6	APP_ERROR
arg	42:33	42:71	5	"PNG rowbytes changed from %lu to %lu"
water	42:33	0:0	6	"PNG rowbytes changed from %lu to %lu"
arg	43:9	43:45	5	(unsignedlong)dp->original_rowbytes
water	43:9	0:0	6	(
water	43:10	0:0	6	unsigned
water	43:19	0:0	6	long
water	43:23	0:0	6	)
water	43:24	0:0	6	dp
op	43:26	0:0	6	->
water	43:28	0:0	6	original_rowbytes
arg	43:47	43:70	5	(unsignedlong)rowbytes
water	43:47	0:0	6	(
water	43:48	0:0	6	unsigned
water	43:57	0:0	6	long
water	43:61	0:0	6	)
water	43:62	0:0	6	rowbytes
water	43:71	0:0	4	;
water	47:3	0:0	2	{
decl	48:6	48:62	2	png_bytepp	rows
op	48:22	0:0	2	=
call	48:24	48:61	3	png_get_rows
arg	48:37	48:48	4	dp->read_pp
water	48:37	0:0	5	dp
op	48:39	0:0	5	->
water	48:41	0:0	5	read_pp
arg	48:50	48:61	4	dp->read_ip
water	48:50	0:0	5	dp
op	48:52	0:0	5	->
water	48:54	0:0	5	read_ip
decl	49:6	49:23	2	unsigned int	mask
if	50:6	57:6	2	(bit_depth < 8)
cond	50:10	50:22	3	bit_depth < 8
water	50:10	0:0	4	bit_depth
op	50:20	0:0	4	<
water	50:22	0:0	4	8
stmts	51:6	57:6	3	
water	51:6	0:0	4	{
water	56:9	0:0	4	mask
op	56:14	0:0	4	=
water	56:16	0:0	4	0
water	56:17	0:0	4	xff
op	56:21	0:0	4	&
water	56:23	0:0	4	(
water	56:24	0:0	4	0
water	56:25	0:0	4	xff00
op	56:31	0:0	4	>>
water	56:34	0:0	4	(
water	56:35	0:0	4	(
water	56:36	0:0	4	bit_depth
op	56:46	0:0	4	*
water	56:48	0:0	4	width
water	56:53	0:0	4	)
op	56:55	0:0	4	&
water	56:57	0:0	4	7
water	56:58	0:0	4	)
water	56:59	0:0	4	)
water	56:60	0:0	4	;
water	57:6	0:0	4	}
else	58:6	59:17	2
stmts	59:9	59:17	3	
water	59:9	0:0	4	mask
op	59:14	0:0	4	=
water	59:16	0:0	4	0
water	59:17	0:0	4	;
if	60:6	61:66	2	(rows == NULL)
cond	60:10	60:18	3	rows == NULL
water	60:10	0:0	4	rows
op	60:15	0:0	4	==
water	60:18	0:0	4	NULL
stmts	61:9	61:66	3	
call	61:9	61:65	4	display_log
arg	61:21	61:23	5	dp
water	61:21	0:0	6	dp
arg	61:25	61:35	5	LIBPNG_BUG
water	61:25	0:0	6	LIBPNG_BUG
arg	61:37	61:65	5	"png_get_rows returned NULL"
water	61:37	0:0	6	"png_get_rows returned NULL"
water	61:66	0:0	4	;
if	62:6	84:6	2	(( applied_transforms & PNG_TRANSFORM_SHIFT ) == 0 || ( dp -> active_transforms & PNG_TRANSFORM_SHIFT ) == 0 || color_type == PNG_COLOR_TYPE_PALETTE)
cond	62:10	64:23	3	( applied_transforms & PNG_TRANSFORM_SHIFT ) == 0 || ( dp -> active_transforms & PNG_TRANSFORM_SHIFT ) == 0 || color_type == PNG_COLOR_TYPE_PALETTE
water	62:10	0:0	4	(
water	62:11	0:0	4	applied_transforms
op	62:30	0:0	4	&
water	62:32	0:0	4	PNG_TRANSFORM_SHIFT
water	62:51	0:0	4	)
op	62:53	0:0	4	==
water	62:56	0:0	4	0
op	62:58	0:0	4	||
water	63:9	0:0	4	(
water	63:10	0:0	4	dp
op	63:12	0:0	4	->
water	63:14	0:0	4	active_transforms
op	63:32	0:0	4	&
water	63:34	0:0	4	PNG_TRANSFORM_SHIFT
water	63:53	0:0	4	)
op	63:55	0:0	4	==
water	63:58	0:0	4	0
op	63:60	0:0	4	||
water	64:9	0:0	4	color_type
op	64:20	0:0	4	==
water	64:23	0:0	4	PNG_COLOR_TYPE_PALETTE
stmts	65:6	84:6	3	
water	65:6	0:0	4	{
decl	66:9	66:24	4	unsigned long	y
for	67:9	83:9	4	(y = 0 ;y < height;++ y)
forinit	67:14	67:17	5	y = 0 ;
water	67:14	0:0	6	y
op	67:15	0:0	6	=
water	67:16	0:0	6	0
water	67:17	0:0	6	;
cond	67:19	67:21	5	y < height
water	67:19	0:0	6	y
op	67:20	0:0	6	<
water	67:21	0:0	6	height
forexpr	67:29	67:31	5	++ y
op	67:29	0:0	6	++
water	67:31	0:0	6	y
stmts	68:9	83:9	5	
water	68:9	0:0	6	{
decl	69:12	69:35	6	png_bytep	row
op	69:26	0:0	6	=
water	69:28	0:0	6	rows
op	69:32	0:0	6	[
water	69:33	0:0	6	y
op	69:34	0:0	6	]
decl	70:12	70:49	6	png_bytep	orig
op	70:27	0:0	6	=
water	70:29	0:0	6	dp
op	70:31	0:0	6	->
water	70:33	0:0	6	original_rows
op	70:46	0:0	6	[
water	70:47	0:0	6	y
op	70:48	0:0	6	]
if	71:12	82:12	6	(memcmp (row ,orig ,rowbytes - ( mask != 0 ) ) != 0 || ( mask != 0 && ( ( row [ rowbytes - 1 ] & mask ) != ( orig [ rowbytes - 1 ] & mask ) ) ))
cond	71:16	72:70	7	memcmp (row ,orig ,rowbytes - ( mask != 0 ) ) != 0 || ( mask != 0 && ( ( row [ rowbytes - 1 ] & mask ) != ( orig [ rowbytes - 1 ] & mask ) ) )
call	71:16	71:54	8	memcmp
arg	71:23	71:26	9	row
water	71:23	0:0	10	row
arg	71:28	71:32	9	orig
water	71:28	0:0	10	orig
arg	71:34	71:54	9	rowbytes-(mask!=0)
water	71:34	0:0	10	rowbytes
op	71:42	0:0	10	-
water	71:43	0:0	10	(
water	71:44	0:0	10	mask
op	71:49	0:0	10	!=
water	71:52	0:0	10	0
water	71:53	0:0	10	)
op	71:56	0:0	8	!=
water	71:59	0:0	8	0
op	71:61	0:0	8	||
water	71:64	0:0	8	(
water	71:65	0:0	8	mask
op	71:70	0:0	8	!=
water	71:73	0:0	8	0
op	71:75	0:0	8	&&
water	72:15	0:0	8	(
water	72:16	0:0	8	(
water	72:17	0:0	8	row
op	72:20	0:0	8	[
water	72:21	0:0	8	rowbytes
op	72:29	0:0	8	-
water	72:30	0:0	8	1
op	72:31	0:0	8	]
op	72:33	0:0	8	&
water	72:35	0:0	8	mask
water	72:39	0:0	8	)
op	72:41	0:0	8	!=
water	72:44	0:0	8	(
water	72:45	0:0	8	orig
op	72:49	0:0	8	[
water	72:50	0:0	8	rowbytes
op	72:58	0:0	8	-
water	72:59	0:0	8	1
op	72:60	0:0	8	]
op	72:62	0:0	8	&
water	72:64	0:0	8	mask
water	72:68	0:0	8	)
water	72:69	0:0	8	)
water	72:70	0:0	8	)
stmts	73:12	82:12	7	
water	73:12	0:0	8	{
decl	74:15	74:23	8	size_t	x
for	76:15	77:23	8	(x = 0 ;x < rowbytes - 1;++ x)
forinit	76:20	76:23	9	x = 0 ;
water	76:20	0:0	10	x
op	76:21	0:0	10	=
water	76:22	0:0	10	0
water	76:23	0:0	10	;
cond	76:25	76:36	9	x < rowbytes - 1
water	76:25	0:0	10	x
op	76:26	0:0	10	<
water	76:27	0:0	10	rowbytes
op	76:35	0:0	10	-
water	76:36	0:0	10	1
forexpr	76:39	76:41	9	++ x
op	76:39	0:0	10	++
water	76:41	0:0	10	x
stmts	76:44	77:23	9	
if	76:44	77:23	10	(row [ x ] != orig [ x ])
cond	76:48	76:64	11	row [ x ] != orig [ x ]
water	76:48	0:0	12	row
op	76:51	0:0	12	[
water	76:52	0:0	12	x
op	76:53	0:0	12	]
op	76:55	0:0	12	!=
water	76:58	0:0	12	orig
op	76:62	0:0	12	[
water	76:63	0:0	12	x
op	76:64	0:0	12	]
stmts	77:18	77:23	11	
break	77:18	77:23	12	
call	78:15	80:69	8	display_log
arg	78:27	78:29	9	dp
water	78:27	0:0	10	dp
arg	78:31	78:39	9	APP_FAIL
water	78:31	0:0	10	APP_FAIL
arg	79:18	79:58	9	"byte(%lu,%lu) changed 0x%.2x -> 0x%.2x"
water	79:18	0:0	10	"byte(%lu,%lu) changed 0x%.2x -> 0x%.2x"
arg	80:18	80:34	9	(unsignedlong)x
water	80:18	0:0	10	(
water	80:19	0:0	10	unsigned
water	80:28	0:0	10	long
water	80:32	0:0	10	)
water	80:33	0:0	10	x
arg	80:36	80:52	9	(unsignedlong)y
water	80:36	0:0	10	(
water	80:37	0:0	10	unsigned
water	80:46	0:0	10	long
water	80:50	0:0	10	)
water	80:51	0:0	10	y
arg	80:54	80:61	9	orig[x]
water	80:54	0:0	10	orig
op	80:58	0:0	10	[
water	80:59	0:0	10	x
op	80:60	0:0	10	]
arg	80:63	80:69	9	row[x]
water	80:63	0:0	10	row
op	80:66	0:0	10	[
water	80:67	0:0	10	x
op	80:68	0:0	10	]
water	80:70	0:0	8	;
return	81:15	81:23	8	0
water	81:22	0:0	9	0
water	82:12	0:0	8	}
water	83:9	0:0	6	}
water	84:6	0:0	4	}
else	85:6	222:6	2
stmts	86:6	222:6	3	
water	86:6	0:0	4	{
decl	87:9	87:24	4	unsigned long	y
decl	88:9	88:16	4	int	bpp
decl	90:9	90:29	4	png_byte	sig_bits[8]
decl	91:9	91:26	4	png_color_8p	sBIT
if	92:9	94:60	4	(png_get_sBIT (dp -> read_pp ,dp -> read_ip ,& sBIT ) != PNG_INFO_sBIT)
cond	92:13	92:62	5	png_get_sBIT (dp -> read_pp ,dp -> read_ip ,& sBIT ) != PNG_INFO_sBIT
call	92:13	92:57	6	png_get_sBIT
arg	92:26	92:37	7	dp->read_pp
water	92:26	0:0	8	dp
op	92:28	0:0	8	->
water	92:30	0:0	8	read_pp
arg	92:39	92:50	7	dp->read_ip
water	92:39	0:0	8	dp
op	92:41	0:0	8	->
water	92:43	0:0	8	read_ip
arg	92:52	92:57	7	&sBIT
op	92:52	0:0	8	&
water	92:53	0:0	8	sBIT
op	92:59	0:0	6	!=
water	92:62	0:0	6	PNG_INFO_sBIT
stmts	93:12	94:60	5	
call	93:12	94:59	6	display_log
arg	93:24	93:26	7	dp
water	93:24	0:0	8	dp
arg	93:28	93:42	7	INTERNAL_ERROR
water	93:28	0:0	8	INTERNAL_ERROR
arg	94:15	94:59	7	"active shift transform but no sBIT in file"
water	94:15	0:0	8	"active shift transform but no sBIT in file"
water	94:60	0:0	6	;
switch	95:9	125:9	4	(color_type)
cond	95:17	95:17	5	color_type
water	95:17	0:0	6	color_type
stmts	96:9	125:9	5	
water	96:9	0:0	6	{
label	97:12	97:36	6	case PNG_COLOR_TYPE_GRAY :
water	98:15	0:0	6	sig_bits
op	98:23	0:0	6	[
water	98:24	0:0	6	0
op	98:25	0:0	6	]
op	98:27	0:0	6	=
water	98:29	0:0	6	sBIT
op	98:33	0:0	6	->
water	98:35	0:0	6	gray
water	98:39	0:0	6	;
water	99:15	0:0	6	bpp
op	99:19	0:0	6	=
water	99:21	0:0	6	bit_depth
water	99:30	0:0	6	;
break	100:15	100:20	6	
label	101:12	101:34	6	case PNG_COLOR_TYPE_GA :
water	102:15	0:0	6	sig_bits
op	102:23	0:0	6	[
water	102:24	0:0	6	0
op	102:25	0:0	6	]
op	102:27	0:0	6	=
water	102:29	0:0	6	sBIT
op	102:33	0:0	6	->
water	102:35	0:0	6	gray
water	102:39	0:0	6	;
water	103:15	0:0	6	sig_bits
op	103:23	0:0	6	[
water	103:24	0:0	6	1
op	103:25	0:0	6	]
op	103:27	0:0	6	=
water	103:29	0:0	6	sBIT
op	103:33	0:0	6	->
water	103:35	0:0	6	alpha
water	103:40	0:0	6	;
water	104:15	0:0	6	bpp
op	104:19	0:0	6	=
water	104:21	0:0	6	2
op	104:23	0:0	6	*
water	104:25	0:0	6	bit_depth
water	104:34	0:0	6	;
break	105:15	105:20	6	
label	106:12	106:35	6	case PNG_COLOR_TYPE_RGB :
water	107:15	0:0	6	sig_bits
op	107:23	0:0	6	[
water	107:24	0:0	6	0
op	107:25	0:0	6	]
op	107:27	0:0	6	=
water	107:29	0:0	6	sBIT
op	107:33	0:0	6	->
water	107:35	0:0	6	red
water	107:38	0:0	6	;
water	108:15	0:0	6	sig_bits
op	108:23	0:0	6	[
water	108:24	0:0	6	1
op	108:25	0:0	6	]
op	108:27	0:0	6	=
water	108:29	0:0	6	sBIT
op	108:33	0:0	6	->
water	108:35	0:0	6	green
water	108:40	0:0	6	;
water	109:15	0:0	6	sig_bits
op	109:23	0:0	6	[
water	109:24	0:0	6	2
op	109:25	0:0	6	]
op	109:27	0:0	6	=
water	109:29	0:0	6	sBIT
op	109:33	0:0	6	->
water	109:35	0:0	6	blue
water	109:39	0:0	6	;
water	110:15	0:0	6	bpp
op	110:19	0:0	6	=
water	110:21	0:0	6	3
op	110:23	0:0	6	*
water	110:25	0:0	6	bit_depth
water	110:34	0:0	6	;
break	111:15	111:20	6	
label	112:12	112:36	6	case PNG_COLOR_TYPE_RGBA :
water	113:15	0:0	6	sig_bits
op	113:23	0:0	6	[
water	113:24	0:0	6	0
op	113:25	0:0	6	]
op	113:27	0:0	6	=
water	113:29	0:0	6	sBIT
op	113:33	0:0	6	->
water	113:35	0:0	6	red
water	113:38	0:0	6	;
water	114:15	0:0	6	sig_bits
op	114:23	0:0	6	[
water	114:24	0:0	6	1
op	114:25	0:0	6	]
op	114:27	0:0	6	=
water	114:29	0:0	6	sBIT
op	114:33	0:0	6	->
water	114:35	0:0	6	green
water	114:40	0:0	6	;
water	115:15	0:0	6	sig_bits
op	115:23	0:0	6	[
water	115:24	0:0	6	2
op	115:25	0:0	6	]
op	115:27	0:0	6	=
water	115:29	0:0	6	sBIT
op	115:33	0:0	6	->
water	115:35	0:0	6	blue
water	115:39	0:0	6	;
water	116:15	0:0	6	sig_bits
op	116:23	0:0	6	[
water	116:24	0:0	6	3
op	116:25	0:0	6	]
op	116:27	0:0	6	=
water	116:29	0:0	6	sBIT
op	116:33	0:0	6	->
water	116:35	0:0	6	alpha
water	116:40	0:0	6	;
water	117:15	0:0	6	bpp
op	117:19	0:0	6	=
water	117:21	0:0	6	4
op	117:23	0:0	6	*
water	117:25	0:0	6	bit_depth
water	117:34	0:0	6	;
break	118:15	118:20	6	
label	119:12	119:19	6	default :
call	120:15	121:28	6	display_log
arg	120:27	120:29	7	dp
water	120:27	0:0	8	dp
arg	120:31	120:43	7	LIBPNG_ERROR
water	120:31	0:0	8	LIBPNG_ERROR
arg	120:45	120:69	7	"invalid colour type %d"
water	120:45	0:0	8	"invalid colour type %d"
arg	121:18	121:28	7	color_type
water	121:18	0:0	8	color_type
water	121:29	0:0	6	;
water	123:15	0:0	6	bpp
op	123:19	0:0	6	=
water	123:21	0:0	6	0
water	123:22	0:0	6	;
break	124:15	124:20	6	
water	125:9	0:0	6	}
water	126:9	0:0	4	{
decl	127:12	127:17	4	int	b
for	128:12	138:12	4	(b = 0 ;8 * b < bpp;++ b)
forinit	128:17	128:20	5	b = 0 ;
water	128:17	0:0	6	b
op	128:18	0:0	6	=
water	128:19	0:0	6	0
water	128:20	0:0	6	;
cond	128:22	128:26	5	8 * b < bpp
water	128:22	0:0	6	8
op	128:23	0:0	6	*
water	128:24	0:0	6	b
op	128:25	0:0	6	<
water	128:26	0:0	6	bpp
forexpr	128:31	128:33	5	++ b
op	128:31	0:0	6	++
water	128:33	0:0	6	b
stmts	129:12	138:12	5	
water	129:12	0:0	6	{
if	134:15	137:47	6	(sig_bits [ b ] == 0 || sig_bits [ b ] > bit_depth)
cond	134:19	134:53	7	sig_bits [ b ] == 0 || sig_bits [ b ] > bit_depth
water	134:19	0:0	8	sig_bits
op	134:27	0:0	8	[
water	134:28	0:0	8	b
op	134:29	0:0	8	]
op	134:31	0:0	8	==
water	134:34	0:0	8	0
op	134:36	0:0	8	||
water	134:39	0:0	8	sig_bits
op	134:47	0:0	8	[
water	134:48	0:0	8	b
op	134:49	0:0	8	]
op	134:51	0:0	8	>
water	134:53	0:0	8	bit_depth
stmts	135:18	137:47	7	
call	135:18	137:46	8	display_log
arg	135:30	135:32	9	dp
water	135:30	0:0	10	dp
arg	135:34	135:44	9	LIBPNG_BUG
water	135:34	0:0	10	LIBPNG_BUG
arg	136:21	136:79	9	"invalid sBIT[%u]  value %d returned for PNG bit depth %d"
water	136:21	0:0	10	"invalid sBIT[%u]  value %d returned for PNG bit depth %d"
arg	137:21	137:22	9	b
water	137:21	0:0	10	b
arg	137:24	137:35	9	sig_bits[b]
water	137:24	0:0	10	sig_bits
op	137:32	0:0	10	[
water	137:33	0:0	10	b
op	137:34	0:0	10	]
arg	137:37	137:46	9	bit_depth
water	137:37	0:0	10	bit_depth
water	137:47	0:0	8	;
water	138:12	0:0	6	}
water	139:9	0:0	4	}
if	140:9	147:9	4	(bpp < 8 && bpp != bit_depth)
cond	140:13	140:31	5	bpp < 8 && bpp != bit_depth
water	140:13	0:0	6	bpp
op	140:17	0:0	6	<
water	140:19	0:0	6	8
op	140:21	0:0	6	&&
water	140:24	0:0	6	bpp
op	140:28	0:0	6	!=
water	140:31	0:0	6	bit_depth
stmts	141:9	147:9	5	
water	141:9	0:0	6	{
call	145:12	146:29	6	display_log
arg	145:24	145:26	7	dp
water	145:24	0:0	8	dp
arg	145:28	145:42	7	INTERNAL_ERROR
water	145:28	0:0	8	INTERNAL_ERROR
arg	145:44	145:77	7	"invalid bpp %u for bit_depth %u"
water	145:44	0:0	8	"invalid bpp %u for bit_depth %u"
arg	146:15	146:18	7	bpp
water	146:15	0:0	8	bpp
arg	146:20	146:29	7	bit_depth
water	146:20	0:0	8	bit_depth
water	146:30	0:0	6	;
water	147:9	0:0	6	}
switch	148:9	183:9	4	(bit_depth)
cond	148:17	148:17	5	bit_depth
water	148:17	0:0	6	bit_depth
stmts	149:9	183:9	5	
water	149:9	0:0	6	{
decl	150:12	150:17	6	int	b
label	151:12	151:19	6	case 16 :
for	152:15	157:15	6	(b = ( bpp >> 4 ) ;b > 0;)
forinit	152:20	152:34	7	b = ( bpp >> 4 ) ;
water	152:20	0:0	8	b
op	152:22	0:0	8	=
water	152:24	0:0	8	(
water	152:25	0:0	8	bpp
op	152:29	0:0	8	>>
water	152:32	0:0	8	4
water	152:33	0:0	8	)
water	152:34	0:0	8	;
cond	152:36	152:40	7	b > 0
water	152:36	0:0	8	b
op	152:38	0:0	8	>
water	152:40	0:0	8	0
forexpr	0:0	0:0	7	
stmts	153:15	157:15	7	
water	153:15	0:0	8	{
decl	154:18	154:78	8	unsigned int	sig
op	154:35	0:0	8	=
call	154:37	154:77	9	(unsignedint)
arg	154:52	154:77	10	0xffff0000>>sig_bits[b]
water	154:52	0:0	11	0
water	154:53	0:0	11	xffff0000
op	154:63	0:0	11	>>
water	154:66	0:0	11	sig_bits
op	154:74	0:0	11	[
water	154:75	0:0	11	b
op	154:76	0:0	11	]
water	155:18	0:0	8	sig_bits
op	155:26	0:0	8	[
water	155:27	0:0	8	2
op	155:28	0:0	8	*
water	155:29	0:0	8	b
op	155:30	0:0	8	+
water	155:31	0:0	8	1
op	155:32	0:0	8	]
op	155:34	0:0	8	=
water	155:36	0:0	8	(
water	155:37	0:0	8	png_byte
water	155:45	0:0	8	)
water	155:46	0:0	8	sig
water	155:49	0:0	8	;
water	156:18	0:0	8	sig_bits
op	156:26	0:0	8	[
water	156:27	0:0	8	2
op	156:28	0:0	8	*
water	156:29	0:0	8	b
op	156:30	0:0	8	+
water	156:31	0:0	8	0
op	156:32	0:0	8	]
op	156:34	0:0	8	=
call	156:36	156:55	8	(png_byte)
arg	156:47	156:55	9	sig>>8
water	156:47	0:0	10	sig
op	156:51	0:0	10	>>
water	156:54	0:0	10	8
water	156:56	0:0	8	;
water	157:15	0:0	8	}
break	158:15	158:20	6	
label	159:12	159:18	6	case 8 :
for	160:15	161:65	6	(b = 0 ;b * 8 < bpp;++ b)
forinit	160:20	160:23	7	b = 0 ;
water	160:20	0:0	8	b
op	160:21	0:0	8	=
water	160:22	0:0	8	0
water	160:23	0:0	8	;
cond	160:25	160:31	7	b * 8 < bpp
water	160:25	0:0	8	b
op	160:26	0:0	8	*
water	160:27	0:0	8	8
op	160:29	0:0	8	<
water	160:31	0:0	8	bpp
forexpr	160:36	160:38	7	++ b
op	160:36	0:0	8	++
water	160:38	0:0	8	b
stmts	161:18	161:65	7	
water	161:18	0:0	8	sig_bits
op	161:26	0:0	8	[
water	161:27	0:0	8	b
op	161:28	0:0	8	]
op	161:30	0:0	8	=
call	161:32	161:64	8	(png_byte)
arg	161:43	161:64	9	0xff00>>sig_bits[b]
water	161:43	0:0	10	0
water	161:44	0:0	10	xff00
op	161:50	0:0	10	>>
water	161:53	0:0	10	sig_bits
op	161:61	0:0	10	[
water	161:62	0:0	10	b
op	161:63	0:0	10	]
water	161:65	0:0	8	;
break	162:15	162:20	6	
label	163:12	163:18	6	case 1 :
water	165:15	0:0	6	sig_bits
op	165:23	0:0	6	[
water	165:24	0:0	6	0
op	165:25	0:0	6	]
op	165:27	0:0	6	=
water	165:29	0:0	6	0
water	165:30	0:0	6	xff
water	165:33	0:0	6	;
break	166:15	166:20	6	
label	167:12	167:18	6	case 2 :
water	169:15	0:0	6	b
op	169:17	0:0	6	=
water	169:19	0:0	6	0
water	169:20	0:0	6	x3
op	169:23	0:0	6	&
water	169:25	0:0	6	(
water	169:26	0:0	6	(
water	169:27	0:0	6	0
water	169:28	0:0	6	x3
op	169:30	0:0	6	<<
water	169:32	0:0	6	2
water	169:33	0:0	6	)
op	169:35	0:0	6	>>
water	169:38	0:0	6	sig_bits
op	169:46	0:0	6	[
water	169:47	0:0	6	0
op	169:48	0:0	6	]
water	169:49	0:0	6	)
water	169:50	0:0	6	;
water	170:15	0:0	6	b
op	170:17	0:0	6	|=
water	170:20	0:0	6	b
op	170:22	0:0	6	<<
water	170:25	0:0	6	2
water	170:26	0:0	6	;
water	171:15	0:0	6	b
op	171:17	0:0	6	|=
water	171:20	0:0	6	b
op	171:22	0:0	6	<<
water	171:25	0:0	6	4
water	171:26	0:0	6	;
water	172:15	0:0	6	sig_bits
op	172:23	0:0	6	[
water	172:24	0:0	6	0
op	172:25	0:0	6	]
op	172:27	0:0	6	=
water	172:29	0:0	6	(
water	172:30	0:0	6	png_byte
water	172:38	0:0	6	)
water	172:39	0:0	6	b
water	172:40	0:0	6	;
break	173:15	173:20	6	
label	174:12	174:18	6	case 4 :
water	176:15	0:0	6	b
op	176:17	0:0	6	=
water	176:19	0:0	6	0
water	176:20	0:0	6	xf
op	176:23	0:0	6	&
water	176:25	0:0	6	(
water	176:26	0:0	6	(
water	176:27	0:0	6	0
water	176:28	0:0	6	xf
op	176:31	0:0	6	<<
water	176:34	0:0	6	4
water	176:35	0:0	6	)
op	176:37	0:0	6	>>
water	176:40	0:0	6	sig_bits
op	176:48	0:0	6	[
water	176:49	0:0	6	0
op	176:50	0:0	6	]
water	176:51	0:0	6	)
water	176:52	0:0	6	;
water	177:15	0:0	6	b
op	177:17	0:0	6	|=
water	177:20	0:0	6	b
op	177:22	0:0	6	<<
water	177:25	0:0	6	4
water	177:26	0:0	6	;
water	178:15	0:0	6	sig_bits
op	178:23	0:0	6	[
water	178:24	0:0	6	0
op	178:25	0:0	6	]
op	178:27	0:0	6	=
water	178:29	0:0	6	(
water	178:30	0:0	6	png_byte
water	178:38	0:0	6	)
water	178:39	0:0	6	b
water	178:40	0:0	6	;
break	179:15	179:20	6	
label	180:12	180:19	6	default :
call	181:15	181:76	6	display_log
arg	181:27	181:29	7	dp
water	181:27	0:0	8	dp
arg	181:31	181:41	7	LIBPNG_BUG
water	181:31	0:0	8	LIBPNG_BUG
arg	181:43	181:65	7	"invalid bit depth %d"
water	181:43	0:0	8	"invalid bit depth %d"
arg	181:67	181:76	7	bit_depth
water	181:67	0:0	8	bit_depth
water	181:77	0:0	6	;
break	182:15	182:20	6	
water	183:9	0:0	6	}
water	187:9	0:0	4	bpp
op	187:13	0:0	4	=
water	187:15	0:0	4	(
water	187:16	0:0	4	bpp
op	187:19	0:0	4	+
water	187:20	0:0	4	7
water	187:21	0:0	4	)
op	187:23	0:0	4	>>
water	187:26	0:0	4	3
water	187:27	0:0	4	;
if	189:9	195:9	4	(mask != 0)
cond	189:13	189:21	5	mask != 0
water	189:13	0:0	6	mask
op	189:18	0:0	6	!=
water	189:21	0:0	6	0
stmts	190:9	195:9	5	
water	190:9	0:0	6	{
water	191:12	0:0	6	mask
op	191:17	0:0	6	&=
water	191:20	0:0	6	sig_bits
op	191:28	0:0	6	[
water	191:29	0:0	6	0
op	191:30	0:0	6	]
water	191:31	0:0	6	;
if	192:12	194:28	6	(bpp != 1 || mask == 0)
cond	192:16	192:36	7	bpp != 1 || mask == 0
water	192:16	0:0	8	bpp
op	192:20	0:0	8	!=
water	192:23	0:0	8	1
op	192:25	0:0	8	||
water	192:28	0:0	8	mask
op	192:33	0:0	8	==
water	192:36	0:0	8	0
stmts	193:15	194:28	7	
call	193:15	194:27	8	display_log
arg	193:27	193:29	9	dp
water	193:27	0:0	10	dp
arg	193:31	193:45	9	INTERNAL_ERROR
water	193:31	0:0	10	INTERNAL_ERROR
arg	193:47	193:78	9	"mask calculation error %u, %u"
water	193:47	0:0	10	"mask calculation error %u, %u"
arg	194:18	194:21	9	bpp
water	194:18	0:0	10	bpp
arg	194:23	194:27	9	mask
water	194:23	0:0	10	mask
water	194:28	0:0	8	;
water	195:9	0:0	6	}
for	196:9	221:9	4	(y = 0 ;y < height;++ y)
forinit	196:14	196:17	5	y = 0 ;
water	196:14	0:0	6	y
op	196:15	0:0	6	=
water	196:16	0:0	6	0
water	196:17	0:0	6	;
cond	196:19	196:21	5	y < height
water	196:19	0:0	6	y
op	196:20	0:0	6	<
water	196:21	0:0	6	height
forexpr	196:29	196:31	5	++ y
op	196:29	0:0	6	++
water	196:31	0:0	6	y
stmts	197:9	221:9	5	
water	197:9	0:0	6	{
decl	198:12	198:35	6	png_bytep	row
op	198:26	0:0	6	=
water	198:28	0:0	6	rows
op	198:32	0:0	6	[
water	198:33	0:0	6	y
op	198:34	0:0	6	]
decl	199:12	199:49	6	png_bytep	orig
op	199:27	0:0	6	=
water	199:29	0:0	6	dp
op	199:31	0:0	6	->
water	199:33	0:0	6	original_rows
op	199:46	0:0	6	[
water	199:47	0:0	6	y
op	199:48	0:0	6	]
decl	200:12	200:27	6	unsigned long	x
for	201:12	214:12	6	(x = 0 ;x < ( width - ( mask != 0 ) );++ x)
forinit	201:17	201:20	7	x = 0 ;
water	201:17	0:0	8	x
op	201:18	0:0	8	=
water	201:19	0:0	8	0
water	201:20	0:0	8	;
cond	201:22	201:40	7	x < ( width - ( mask != 0 ) )
water	201:22	0:0	8	x
op	201:23	0:0	8	<
water	201:24	0:0	8	(
water	201:25	0:0	8	width
op	201:30	0:0	8	-
water	201:31	0:0	8	(
water	201:32	0:0	8	mask
op	201:36	0:0	8	!=
water	201:38	0:0	8	0
water	201:39	0:0	8	)
water	201:40	0:0	8	)
forexpr	201:43	201:45	7	++ x
op	201:43	0:0	8	++
water	201:45	0:0	8	x
stmts	202:12	214:12	7	
water	202:12	0:0	8	{
decl	203:15	203:20	8	int	b
for	204:15	213:15	8	(b = 0 ;b < bpp;++ b)
forinit	204:20	204:23	9	b = 0 ;
water	204:20	0:0	10	b
op	204:21	0:0	10	=
water	204:22	0:0	10	0
water	204:23	0:0	10	;
cond	204:25	204:27	9	b < bpp
water	204:25	0:0	10	b
op	204:26	0:0	10	<
water	204:27	0:0	10	bpp
forexpr	204:32	204:34	9	++ b
op	204:32	0:0	10	++
water	204:34	0:0	10	b
stmts	205:15	213:15	9	
water	205:15	0:0	10	{
if	206:18	212:18	10	(( * row ++ & sig_bits [ b ] ) != ( * orig ++ & sig_bits [ b ] ))
cond	206:22	206:70	11	( * row ++ & sig_bits [ b ] ) != ( * orig ++ & sig_bits [ b ] )
water	206:22	0:0	12	(
op	206:23	0:0	12	*
water	206:24	0:0	12	row
op	206:27	0:0	12	++
op	206:30	0:0	12	&
water	206:32	0:0	12	sig_bits
op	206:40	0:0	12	[
water	206:41	0:0	12	b
op	206:42	0:0	12	]
water	206:43	0:0	12	)
op	206:45	0:0	12	!=
water	206:48	0:0	12	(
op	206:49	0:0	12	*
water	206:50	0:0	12	orig
op	206:54	0:0	12	++
op	206:57	0:0	12	&
water	206:59	0:0	12	sig_bits
op	206:67	0:0	12	[
water	206:68	0:0	12	b
op	206:69	0:0	12	]
water	206:70	0:0	12	)
stmts	207:18	212:18	11	
water	207:18	0:0	12	{
call	208:21	210:50	12	display_log
arg	208:33	208:35	13	dp
water	208:33	0:0	14	dp
arg	208:37	208:45	13	APP_FAIL
water	208:37	0:0	14	APP_FAIL
arg	209:24	209:78	13	"significant bits at (%lu[%u],%lu) changed %.2x->%.2x"
water	209:24	0:0	14	"significant bits at (%lu[%u],%lu) changed %.2x->%.2x"
arg	210:24	210:25	13	x
water	210:24	0:0	14	x
arg	210:27	210:28	13	b
water	210:27	0:0	14	b
arg	210:30	210:31	13	y
water	210:30	0:0	14	y
arg	210:33	210:41	13	orig[-1]
water	210:33	0:0	14	orig
op	210:37	0:0	14	[
op	210:38	0:0	14	-
water	210:39	0:0	14	1
op	210:40	0:0	14	]
arg	210:43	210:50	13	row[-1]
water	210:43	0:0	14	row
op	210:46	0:0	14	[
op	210:47	0:0	14	-
water	210:48	0:0	14	1
op	210:49	0:0	14	]
water	210:51	0:0	12	;
return	211:21	211:29	12	0
water	211:28	0:0	13	0
water	212:18	0:0	12	}
water	213:15	0:0	10	}
water	214:12	0:0	8	}
if	215:12	220:12	6	(mask != 0 && ( * row & mask ) != ( * orig & mask ))
cond	215:16	215:59	7	mask != 0 && ( * row & mask ) != ( * orig & mask )
water	215:16	0:0	8	mask
op	215:21	0:0	8	!=
water	215:24	0:0	8	0
op	215:26	0:0	8	&&
water	215:29	0:0	8	(
op	215:30	0:0	8	*
water	215:31	0:0	8	row
op	215:35	0:0	8	&
water	215:37	0:0	8	mask
water	215:41	0:0	8	)
op	215:43	0:0	8	!=
water	215:46	0:0	8	(
op	215:47	0:0	8	*
water	215:48	0:0	8	orig
op	215:53	0:0	8	&
water	215:55	0:0	8	mask
water	215:59	0:0	8	)
stmts	216:12	220:12	7	
water	216:12	0:0	8	{
call	217:15	218:68	8	display_log
arg	217:27	217:29	9	dp
water	217:27	0:0	10	dp
arg	217:31	217:39	9	APP_FAIL
water	217:31	0:0	10	APP_FAIL
arg	218:18	218:62	9	"significant bits at (%lu[end],%lu) changed"
water	218:18	0:0	10	"significant bits at (%lu[end],%lu) changed"
arg	218:64	218:65	9	x
water	218:64	0:0	10	x
arg	218:67	218:68	9	y
water	218:67	0:0	10	y
water	218:69	0:0	8	;
return	219:15	219:23	8	0
water	219:22	0:0	9	0
water	220:12	0:0	8	}
water	221:9	0:0	6	}
water	222:6	0:0	4	}
water	223:3	0:0	2	}
return	224:3	224:11	2	1
water	224:10	0:0	3	1
