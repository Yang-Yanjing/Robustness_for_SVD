func	1:0	176:0	0	int	main
params	2:4	0:0	1	
param	2:5	2:13	2	int	argc
param	2:15	2:26	2	char * *	argv
stmnts	0:0	175:3	1	
decl	4:3	4:20	2	FILE	*fp
op	4:12	0:0	2	=
water	4:14	0:0	2	stdout
decl	5:3	5:31	2	const char	*file_name
op	5:25	0:0	2	=
water	5:27	0:0	2	NULL
decl	6:3	6:21	2	int	color_type
op	6:18	0:0	2	=
water	6:20	0:0	2	8
decl	7:3	7:21	2	int	bit_depth
op	7:17	0:0	2	=
water	7:19	0:0	2	32
decl	8:3	8:25	2	unsigned int	colors[5]
decl	9:3	9:41	2	unsigned int	filters
op	9:24	0:0	2	=
water	9:26	0:0	2	PNG_ALL_FILTERS
decl	10:3	10:28	2	png_fixed_point	gamma
op	10:25	0:0	2	=
water	10:27	0:0	2	0
decl	11:3	11:35	2	chunk_insert	*head_insert
op	11:29	0:0	2	=
water	11:31	0:0	2	NULL
decl	12:3	12:43	2	chunk_insert	**insert_ptr
op	12:29	0:0	2	=
op	12:31	0:0	2	&
water	12:32	0:0	2	head_insert
call	13:3	13:34	2	memset
arg	13:10	13:16	3	colors
water	13:10	0:0	4	colors
arg	13:18	13:19	3	0
water	13:18	0:0	4	0
arg	13:21	13:34	3	sizeofcolors
op	13:21	0:0	4	sizeof
water	13:28	0:0	4	colors
water	13:35	0:0	2	;
while	14:3	131:3	2	(-- argc > 0)
cond	14:10	14:19	3	-- argc > 0
op	14:10	0:0	4	--
water	14:12	0:0	4	argc
op	14:17	0:0	4	>
water	14:19	0:0	4	0
stmts	15:3	131:3	3	
water	15:3	0:0	4	{
decl	16:6	16:25	4	char	*arg
op	16:16	0:0	4	=
op	16:18	0:0	4	*
op	16:19	0:0	4	++
water	16:21	0:0	4	argv
if	17:6	21:6	4	(strcmp (arg ,"--sRGB" ) == 0)
cond	17:10	17:35	5	strcmp (arg ,"--sRGB" ) == 0
call	17:10	17:30	6	strcmp
arg	17:17	17:20	7	arg
water	17:17	0:0	8	arg
arg	17:22	17:30	7	"--sRGB"
water	17:22	0:0	8	"--sRGB"
op	17:32	0:0	6	==
water	17:35	0:0	6	0
stmts	18:6	21:6	5	
water	18:6	0:0	6	{
water	19:9	0:0	6	gamma
op	19:15	0:0	6	=
water	19:17	0:0	6	PNG_DEFAULT_sRGB
water	19:33	0:0	6	;
continue	20:9	20:17	6	
water	21:6	0:0	6	}
if	22:6	26:6	4	(strcmp (arg ,"--linear" ) == 0)
cond	22:10	22:37	5	strcmp (arg ,"--linear" ) == 0
call	22:10	22:32	6	strcmp
arg	22:17	22:20	7	arg
water	22:17	0:0	8	arg
arg	22:22	22:32	7	"--linear"
water	22:22	0:0	8	"--linear"
op	22:34	0:0	6	==
water	22:37	0:0	6	0
stmts	23:6	26:6	5	
water	23:6	0:0	6	{
water	24:9	0:0	6	gamma
op	24:15	0:0	6	=
water	24:17	0:0	6	PNG_FP_1
water	24:25	0:0	6	;
continue	25:9	25:17	6	
water	26:6	0:0	6	}
if	27:6	31:6	4	(strcmp (arg ,"--1.8" ) == 0)
cond	27:10	27:34	5	strcmp (arg ,"--1.8" ) == 0
call	27:10	27:29	6	strcmp
arg	27:17	27:20	7	arg
water	27:17	0:0	8	arg
arg	27:22	27:29	7	"--1.8"
water	27:22	0:0	8	"--1.8"
op	27:31	0:0	6	==
water	27:34	0:0	6	0
stmts	28:6	31:6	5	
water	28:6	0:0	6	{
water	29:9	0:0	6	gamma
op	29:15	0:0	6	=
water	29:17	0:0	6	PNG_GAMMA_MAC_18
water	29:33	0:0	6	;
continue	30:9	30:17	6	
water	31:6	0:0	6	}
if	32:6	36:6	4	(strcmp (arg ,"--nofilters" ) == 0)
cond	32:10	32:40	5	strcmp (arg ,"--nofilters" ) == 0
call	32:10	32:35	6	strcmp
arg	32:17	32:20	7	arg
water	32:17	0:0	8	arg
arg	32:22	32:35	7	"--nofilters"
water	32:22	0:0	8	"--nofilters"
op	32:37	0:0	6	==
water	32:40	0:0	6	0
stmts	33:6	36:6	5	
water	33:6	0:0	6	{
water	34:9	0:0	6	filters
op	34:17	0:0	6	=
water	34:19	0:0	6	PNG_FILTER_NONE
water	34:34	0:0	6	;
continue	35:9	35:17	6	
water	36:6	0:0	6	}
if	37:6	41:6	4	(strncmp (arg ,"--color=" ,8 ) == 0)
cond	37:10	37:41	5	strncmp (arg ,"--color=" ,8 ) == 0
call	37:10	37:36	6	strncmp
arg	37:18	37:21	7	arg
water	37:18	0:0	8	arg
arg	37:23	37:33	7	"--color="
water	37:23	0:0	8	"--color="
arg	37:35	37:36	7	8
water	37:35	0:0	8	8
op	37:38	0:0	6	==
water	37:41	0:0	6	0
stmts	38:6	41:6	5	
water	38:6	0:0	6	{
call	39:10	39:35	6	parse_color
arg	39:22	39:27	7	arg+8
water	39:22	0:0	8	arg
op	39:25	0:0	8	+
water	39:26	0:0	8	8
arg	39:29	39:35	7	colors
water	39:29	0:0	8	colors
water	39:36	0:0	6	;
continue	40:10	40:18	6	
water	41:6	0:0	6	}
if	42:6	55:6	4	(argc >= 3 &&strcmp (arg ,"--insert" ) == 0)
cond	42:10	42:50	5	argc >= 3 &&strcmp (arg ,"--insert" ) == 0
water	42:10	0:0	6	argc
op	42:15	0:0	6	>=
water	42:18	0:0	6	3
op	42:20	0:0	6	&&
call	42:23	42:45	6	strcmp
arg	42:30	42:33	7	arg
water	42:30	0:0	8	arg
arg	42:35	42:45	7	"--insert"
water	42:35	0:0	8	"--insert"
op	42:47	0:0	6	==
water	42:50	0:0	6	0
stmts	43:6	55:6	5	
water	43:6	0:0	6	{
decl	44:9	44:39	6	png_const_charp	what
op	44:30	0:0	6	=
op	44:32	0:0	6	*
op	44:33	0:0	6	++
water	44:35	0:0	6	argv
decl	45:9	45:34	6	png_charp	param
op	45:25	0:0	6	=
op	45:27	0:0	6	*
op	45:28	0:0	6	++
water	45:30	0:0	6	argv
decl	46:9	46:33	6	chunk_insert	*new_insert
water	47:9	0:0	6	argc
op	47:14	0:0	6	-=
water	47:17	0:0	6	2
water	47:18	0:0	6	;
water	48:9	0:0	6	new_insert
op	48:20	0:0	6	=
call	48:22	48:45	6	find_insert
arg	48:34	48:38	7	what
water	48:34	0:0	8	what
arg	48:40	48:45	7	param
water	48:40	0:0	8	param
water	48:46	0:0	6	;
if	49:9	53:9	6	(new_insert != NULL)
cond	49:13	49:27	7	new_insert != NULL
water	49:13	0:0	8	new_insert
op	49:24	0:0	8	!=
water	49:27	0:0	8	NULL
stmts	50:9	53:9	7	
water	50:9	0:0	8	{
op	51:12	0:0	8	*
water	51:13	0:0	8	insert_ptr
op	51:24	0:0	8	=
water	51:26	0:0	8	new_insert
water	51:36	0:0	8	;
water	52:12	0:0	8	insert_ptr
op	52:23	0:0	8	=
op	52:25	0:0	8	&
water	52:26	0:0	8	new_insert
op	52:36	0:0	8	->
water	52:38	0:0	8	next
water	52:42	0:0	8	;
water	53:9	0:0	8	}
continue	54:9	54:17	6	
water	55:6	0:0	6	}
if	56:6	60:6	4	(arg [ 0 ] == '-')
cond	56:10	56:20	5	arg [ 0 ] == '-'
water	56:10	0:0	6	arg
op	56:13	0:0	6	[
water	56:14	0:0	6	0
op	56:15	0:0	6	]
op	56:17	0:0	6	==
water	56:20	0:0	6	'-'
stmts	57:6	60:6	5	
water	57:6	0:0	6	{
call	58:9	58:61	6	fprintf
arg	58:17	58:23	7	stderr
water	58:17	0:0	8	stderr
arg	58:25	58:56	7	"makepng: %s: invalid option\n"
water	58:25	0:0	8	"makepng: %s: invalid option\n"
arg	58:58	58:61	7	arg
water	58:58	0:0	8	arg
water	58:62	0:0	6	;
call	59:9	59:15	6	exit
arg	59:14	59:15	7	1
water	59:14	0:0	8	1
water	59:16	0:0	6	;
water	60:6	0:0	6	}
if	61:6	65:6	4	(strcmp (arg ,"palette" ) == 0)
cond	61:10	61:36	5	strcmp (arg ,"palette" ) == 0
call	61:10	61:31	6	strcmp
arg	61:17	61:20	7	arg
water	61:17	0:0	8	arg
arg	61:22	61:31	7	"palette"
water	61:22	0:0	8	"palette"
op	61:33	0:0	6	==
water	61:36	0:0	6	0
stmts	62:6	65:6	5	
water	62:6	0:0	6	{
water	63:9	0:0	6	color_type
op	63:20	0:0	6	=
water	63:22	0:0	6	PNG_COLOR_TYPE_PALETTE
water	63:44	0:0	6	;
continue	64:9	64:17	6	
water	65:6	0:0	6	}
if	66:6	80:6	4	(strncmp (arg ,"gray" ,4 ) == 0)
cond	66:10	66:37	5	strncmp (arg ,"gray" ,4 ) == 0
call	66:10	66:32	6	strncmp
arg	66:18	66:21	7	arg
water	66:18	0:0	8	arg
arg	66:23	66:29	7	"gray"
water	66:23	0:0	8	"gray"
arg	66:31	66:32	7	4
water	66:31	0:0	8	4
op	66:34	0:0	6	==
water	66:37	0:0	6	0
stmts	67:6	80:6	5	
water	67:6	0:0	6	{
if	68:9	72:9	6	(arg [ 4 ] == 0)
cond	68:13	68:23	7	arg [ 4 ] == 0
water	68:13	0:0	8	arg
op	68:16	0:0	8	[
water	68:17	0:0	8	4
op	68:18	0:0	8	]
op	68:20	0:0	8	==
water	68:23	0:0	8	0
stmts	69:9	72:9	7	
water	69:9	0:0	8	{
water	70:12	0:0	8	color_type
op	70:23	0:0	8	=
water	70:25	0:0	8	PNG_COLOR_TYPE_GRAY
water	70:44	0:0	8	;
continue	71:12	71:20	8	
water	72:9	0:0	8	}
else	73:9	79:9	6
stmts	73:14	79:9	7	
if	73:14	79:9	8	(strcmp (arg + 4 ,"a" ) == 0 ||strcmp (arg + 4 ,"alpha" ) == 0 ||strcmp (arg + 4 ,"-alpha" ) == 0)
cond	73:18	75:39	9	strcmp (arg + 4 ,"a" ) == 0 ||strcmp (arg + 4 ,"alpha" ) == 0 ||strcmp (arg + 4 ,"-alpha" ) == 0
call	73:18	73:35	10	strcmp
arg	73:25	73:30	11	arg+4
water	73:25	0:0	12	arg
op	73:28	0:0	12	+
water	73:29	0:0	12	4
arg	73:32	73:35	11	"a"
water	73:32	0:0	12	"a"
op	73:37	0:0	10	==
water	73:40	0:0	10	0
op	73:42	0:0	10	||
call	74:12	74:33	10	strcmp
arg	74:19	74:24	11	arg+4
water	74:19	0:0	12	arg
op	74:22	0:0	12	+
water	74:23	0:0	12	4
arg	74:26	74:33	11	"alpha"
water	74:26	0:0	12	"alpha"
op	74:35	0:0	10	==
water	74:38	0:0	10	0
op	74:40	0:0	10	||
call	75:12	75:34	10	strcmp
arg	75:19	75:24	11	arg+4
water	75:19	0:0	12	arg
op	75:22	0:0	12	+
water	75:23	0:0	12	4
arg	75:26	75:34	11	"-alpha"
water	75:26	0:0	12	"-alpha"
op	75:36	0:0	10	==
water	75:39	0:0	10	0
stmts	76:9	79:9	9	
water	76:9	0:0	10	{
water	77:12	0:0	10	color_type
op	77:23	0:0	10	=
water	77:25	0:0	10	PNG_COLOR_TYPE_GRAY_ALPHA
water	77:50	0:0	10	;
continue	78:12	78:20	10	
water	79:9	0:0	10	}
water	80:6	0:0	6	}
if	81:6	95:6	4	(strncmp (arg ,"rgb" ,3 ) == 0)
cond	81:10	81:36	5	strncmp (arg ,"rgb" ,3 ) == 0
call	81:10	81:31	6	strncmp
arg	81:18	81:21	7	arg
water	81:18	0:0	8	arg
arg	81:23	81:28	7	"rgb"
water	81:23	0:0	8	"rgb"
arg	81:30	81:31	7	3
water	81:30	0:0	8	3
op	81:33	0:0	6	==
water	81:36	0:0	6	0
stmts	82:6	95:6	5	
water	82:6	0:0	6	{
if	83:9	87:9	6	(arg [ 3 ] == 0)
cond	83:13	83:23	7	arg [ 3 ] == 0
water	83:13	0:0	8	arg
op	83:16	0:0	8	[
water	83:17	0:0	8	3
op	83:18	0:0	8	]
op	83:20	0:0	8	==
water	83:23	0:0	8	0
stmts	84:9	87:9	7	
water	84:9	0:0	8	{
water	85:12	0:0	8	color_type
op	85:23	0:0	8	=
water	85:25	0:0	8	PNG_COLOR_TYPE_RGB
water	85:43	0:0	8	;
continue	86:12	86:20	8	
water	87:9	0:0	8	}
else	88:9	94:9	6
stmts	88:14	94:9	7	
if	88:14	94:9	8	(strcmp (arg + 3 ,"a" ) == 0 ||strcmp (arg + 3 ,"alpha" ) == 0 ||strcmp (arg + 3 ,"-alpha" ) == 0)
cond	88:18	90:39	9	strcmp (arg + 3 ,"a" ) == 0 ||strcmp (arg + 3 ,"alpha" ) == 0 ||strcmp (arg + 3 ,"-alpha" ) == 0
call	88:18	88:35	10	strcmp
arg	88:25	88:30	11	arg+3
water	88:25	0:0	12	arg
op	88:28	0:0	12	+
water	88:29	0:0	12	3
arg	88:32	88:35	11	"a"
water	88:32	0:0	12	"a"
op	88:37	0:0	10	==
water	88:40	0:0	10	0
op	88:42	0:0	10	||
call	89:12	89:33	10	strcmp
arg	89:19	89:24	11	arg+3
water	89:19	0:0	12	arg
op	89:22	0:0	12	+
water	89:23	0:0	12	3
arg	89:26	89:33	11	"alpha"
water	89:26	0:0	12	"alpha"
op	89:35	0:0	10	==
water	89:38	0:0	10	0
op	89:40	0:0	10	||
call	90:12	90:34	10	strcmp
arg	90:19	90:24	11	arg+3
water	90:19	0:0	12	arg
op	90:22	0:0	12	+
water	90:23	0:0	12	3
arg	90:26	90:34	11	"-alpha"
water	90:26	0:0	12	"-alpha"
op	90:36	0:0	10	==
water	90:39	0:0	10	0
stmts	91:9	94:9	9	
water	91:9	0:0	10	{
water	92:12	0:0	10	color_type
op	92:23	0:0	10	=
water	92:25	0:0	10	PNG_COLOR_TYPE_RGB_ALPHA
water	92:49	0:0	10	;
continue	93:12	93:20	10	
water	94:9	0:0	10	}
water	95:6	0:0	6	}
if	96:6	106:6	4	(color_type == 8 &&isdigit (arg [ 0 ] ))
cond	96:10	96:43	5	color_type == 8 &&isdigit (arg [ 0 ] )
water	96:10	0:0	6	color_type
op	96:21	0:0	6	==
water	96:24	0:0	6	8
op	96:26	0:0	6	&&
call	96:29	96:43	6	isdigit
arg	96:37	96:43	7	arg[0]
water	96:37	0:0	8	arg
op	96:40	0:0	8	[
water	96:41	0:0	8	0
op	96:42	0:0	8	]
stmts	97:6	106:6	5	
water	97:6	0:0	6	{
water	98:9	0:0	6	color_type
op	98:20	0:0	6	=
call	98:22	98:30	6	atoi
arg	98:27	98:30	7	arg
water	98:27	0:0	8	arg
water	98:31	0:0	6	;
if	99:9	104:9	6	(color_type < 0 || color_type > 6 || color_type == 1 || color_type == 5)
cond	99:13	100:26	7	color_type < 0 || color_type > 6 || color_type == 1 || color_type == 5
water	99:13	0:0	8	color_type
op	99:24	0:0	8	<
water	99:26	0:0	8	0
op	99:28	0:0	8	||
water	99:31	0:0	8	color_type
op	99:42	0:0	8	>
water	99:44	0:0	8	6
op	99:46	0:0	8	||
water	99:49	0:0	8	color_type
op	99:60	0:0	8	==
water	99:63	0:0	8	1
op	99:65	0:0	8	||
water	100:12	0:0	8	color_type
op	100:23	0:0	8	==
water	100:26	0:0	8	5
stmts	101:9	104:9	7	
water	101:9	0:0	8	{
call	102:12	102:72	8	fprintf
arg	102:20	102:26	9	stderr
water	102:20	0:0	10	stderr
arg	102:28	102:67	9	"makepng: %s: not a valid color type\n"
water	102:28	0:0	10	"makepng: %s: not a valid color type\n"
arg	102:69	102:72	9	arg
water	102:69	0:0	10	arg
water	102:73	0:0	8	;
call	103:12	103:18	8	exit
arg	103:17	103:18	9	1
water	103:17	0:0	10	1
water	103:19	0:0	8	;
water	104:9	0:0	8	}
continue	105:9	105:17	6	
water	106:6	0:0	6	}
if	107:6	117:6	4	(bit_depth == 32 &&isdigit (arg [ 0 ] ))
cond	107:10	107:43	5	bit_depth == 32 &&isdigit (arg [ 0 ] )
water	107:10	0:0	6	bit_depth
op	107:20	0:0	6	==
water	107:23	0:0	6	32
op	107:26	0:0	6	&&
call	107:29	107:43	6	isdigit
arg	107:37	107:43	7	arg[0]
water	107:37	0:0	8	arg
op	107:40	0:0	8	[
water	107:41	0:0	8	0
op	107:42	0:0	8	]
stmts	108:6	117:6	5	
water	108:6	0:0	6	{
water	109:9	0:0	6	bit_depth
op	109:19	0:0	6	=
call	109:21	109:29	6	atoi
arg	109:26	109:29	7	arg
water	109:26	0:0	8	arg
water	109:30	0:0	6	;
if	110:9	115:9	6	(bit_depth <= 0 || bit_depth > 16 || ( bit_depth & - bit_depth ) != bit_depth)
cond	110:13	111:40	7	bit_depth <= 0 || bit_depth > 16 || ( bit_depth & - bit_depth ) != bit_depth
water	110:13	0:0	8	bit_depth
op	110:23	0:0	8	<=
water	110:26	0:0	8	0
op	110:28	0:0	8	||
water	110:31	0:0	8	bit_depth
op	110:41	0:0	8	>
water	110:43	0:0	8	16
op	110:46	0:0	8	||
water	111:12	0:0	8	(
water	111:13	0:0	8	bit_depth
op	111:23	0:0	8	&
op	111:25	0:0	8	-
water	111:26	0:0	8	bit_depth
water	111:35	0:0	8	)
op	111:37	0:0	8	!=
water	111:40	0:0	8	bit_depth
stmts	112:9	115:9	7	
water	112:9	0:0	8	{
call	113:12	113:71	8	fprintf
arg	113:20	113:26	9	stderr
water	113:20	0:0	10	stderr
arg	113:28	113:66	9	"makepng: %s: not a valid bit depth\n"
water	113:28	0:0	10	"makepng: %s: not a valid bit depth\n"
arg	113:68	113:71	9	arg
water	113:68	0:0	10	arg
water	113:72	0:0	8	;
call	114:12	114:18	8	exit
arg	114:17	114:18	9	1
water	114:17	0:0	10	1
water	114:19	0:0	8	;
water	115:9	0:0	8	}
continue	116:9	116:17	6	
water	117:6	0:0	6	}
if	118:6	128:6	4	(argc == 1)
cond	118:10	118:18	5	argc == 1
water	118:10	0:0	6	argc
op	118:15	0:0	6	==
water	118:18	0:0	6	1
stmts	119:6	128:6	5	
water	119:6	0:0	6	{
water	120:9	0:0	6	fp
op	120:12	0:0	6	=
call	120:14	120:29	6	fopen
arg	120:20	120:23	7	arg
water	120:20	0:0	8	arg
arg	120:25	120:29	7	"wb"
water	120:25	0:0	8	"wb"
water	120:30	0:0	6	;
if	121:9	125:9	6	(fp == NULL)
cond	121:13	121:19	7	fp == NULL
water	121:13	0:0	8	fp
op	121:16	0:0	8	==
water	121:19	0:0	8	NULL
stmts	122:9	125:9	7	
water	122:9	0:0	8	{
call	123:12	123:76	8	fprintf
arg	123:20	123:26	9	stderr
water	123:20	0:0	10	stderr
arg	123:28	123:54	9	"%s: %s: could not open\n"
water	123:28	0:0	10	"%s: %s: could not open\n"
arg	123:56	123:59	9	arg
water	123:56	0:0	10	arg
arg	123:61	123:76	9	strerror(errno)
call	123:61	123:75	10	strerror
arg	123:70	123:75	11	errno
water	123:70	0:0	12	errno
water	123:77	0:0	8	;
call	124:12	124:18	8	exit
arg	124:17	124:18	9	1
water	124:17	0:0	10	1
water	124:19	0:0	8	;
water	125:9	0:0	8	}
water	126:9	0:0	6	file_name
op	126:19	0:0	6	=
water	126:21	0:0	6	arg
water	126:24	0:0	6	;
continue	127:9	127:17	6	
water	128:6	0:0	6	}
call	129:6	129:60	4	fprintf
arg	129:14	129:20	5	stderr
water	129:14	0:0	6	stderr
arg	129:22	129:55	5	"makepng: %s: unknown argument\n"
water	129:22	0:0	6	"makepng: %s: unknown argument\n"
arg	129:57	129:60	5	arg
water	129:57	0:0	6	arg
water	129:61	0:0	4	;
call	130:6	130:12	4	exit
arg	130:11	130:12	5	1
water	130:11	0:0	6	1
water	130:13	0:0	4	;
water	131:3	0:0	4	}
if	132:3	138:3	2	(color_type == 8 || bit_depth == 32)
cond	132:7	132:39	3	color_type == 8 || bit_depth == 32
water	132:7	0:0	4	color_type
op	132:18	0:0	4	==
water	132:21	0:0	4	8
op	132:23	0:0	4	||
water	132:26	0:0	4	bit_depth
op	132:36	0:0	4	==
water	132:39	0:0	4	32
stmts	133:3	138:3	3	
water	133:3	0:0	4	{
call	134:6	136:65	4	fprintf
arg	134:14	134:20	5	stderr
water	134:14	0:0	6	stderr
arg	134:22	136:65	5	"usage: makepng [--sRGB|--linear|--1.8] ""[--color=...] color-type bit-depth [file-name]\n""  Make a test PNG file, by default writes to stdout.\n"
water	134:22	0:0	6	"usage: makepng [--sRGB|--linear|--1.8] "
water	135:9	0:0	6	"[--color=...] color-type bit-depth [file-name]\n"
water	136:9	0:0	6	"  Make a test PNG file, by default writes to stdout.\n"
water	136:66	0:0	4	;
call	137:6	137:12	4	exit
arg	137:11	137:12	5	1
water	137:11	0:0	6	1
water	137:13	0:0	4	;
water	138:3	0:0	4	}
water	140:3	0:0	2	{
decl	141:6	142:27	2	const unsigned int	lim
op	141:29	0:0	2	=
water	141:31	0:0	2	(
water	141:32	0:0	2	color_type
op	141:43	0:0	2	==
water	141:46	0:0	2	PNG_COLOR_TYPE_PALETTE
water	141:69	0:0	2	?
water	141:71	0:0	2	255
water	141:74	0:0	2	U
water	141:76	0:0	2	:
water	142:9	0:0	2	(
water	142:10	0:0	2	1
water	142:11	0:0	2	U
op	142:12	0:0	2	<<
water	142:14	0:0	2	bit_depth
water	142:23	0:0	2	)
op	142:24	0:0	2	-
water	142:25	0:0	2	1
water	142:26	0:0	2	)
decl	143:6	143:20	2	unsigned int	i
for	144:6	150:9	2	(i = 1 ;i <= colors [ 0 ];++ i)
forinit	144:11	144:14	3	i = 1 ;
water	144:11	0:0	4	i
op	144:12	0:0	4	=
water	144:13	0:0	4	1
water	144:14	0:0	4	;
cond	144:16	144:27	3	i <= colors [ 0 ]
water	144:16	0:0	4	i
op	144:17	0:0	4	<=
water	144:19	0:0	4	colors
op	144:25	0:0	4	[
water	144:26	0:0	4	0
op	144:27	0:0	4	]
forexpr	144:30	144:32	3	++ i
op	144:30	0:0	4	++
water	144:32	0:0	4	i
stmts	145:9	150:9	3	
if	145:9	150:9	4	(colors [ i ] > lim)
cond	145:13	145:25	5	colors [ i ] > lim
water	145:13	0:0	6	colors
op	145:19	0:0	6	[
water	145:20	0:0	6	i
op	145:21	0:0	6	]
op	145:23	0:0	6	>
water	145:25	0:0	6	lim
stmts	146:9	150:9	5	
water	146:9	0:0	6	{
call	147:12	148:29	6	fprintf
arg	147:20	147:26	7	stderr
water	147:20	0:0	8	stderr
arg	147:28	147:77	7	"makepng: --color=...: %u out of range [0..%u]\n"
water	147:28	0:0	8	"makepng: --color=...: %u out of range [0..%u]\n"
arg	148:15	148:24	7	colors[i]
water	148:15	0:0	8	colors
op	148:21	0:0	8	[
water	148:22	0:0	8	i
op	148:23	0:0	8	]
arg	148:26	148:29	7	lim
water	148:26	0:0	8	lim
water	148:30	0:0	6	;
call	149:12	149:18	6	exit
arg	149:17	149:18	7	1
water	149:17	0:0	8	1
water	149:19	0:0	6	;
water	150:9	0:0	6	}
water	151:3	0:0	2	}
if	155:3	168:3	2	(filters == PNG_ALL_FILTERS)
cond	155:7	155:18	3	filters == PNG_ALL_FILTERS
water	155:7	0:0	4	filters
op	155:15	0:0	4	==
water	155:18	0:0	4	PNG_ALL_FILTERS
stmts	156:3	168:3	3	
water	156:3	0:0	4	{
if	157:6	158:34	4	(( color_type & PNG_COLOR_MASK_PALETTE ) != 0 || bit_depth < 8)
cond	157:10	157:68	5	( color_type & PNG_COLOR_MASK_PALETTE ) != 0 || bit_depth < 8
water	157:10	0:0	6	(
water	157:11	0:0	6	color_type
op	157:22	0:0	6	&
water	157:24	0:0	6	PNG_COLOR_MASK_PALETTE
water	157:46	0:0	6	)
op	157:48	0:0	6	!=
water	157:51	0:0	6	0
op	157:53	0:0	6	||
water	157:56	0:0	6	bit_depth
op	157:66	0:0	6	<
water	157:68	0:0	6	8
stmts	158:9	158:34	5	
water	158:9	0:0	6	filters
op	158:17	0:0	6	=
water	158:19	0:0	6	PNG_FILTER_NONE
water	158:34	0:0	6	;
else	159:6	165:6	4
stmts	159:11	165:6	5	
if	159:11	165:6	6	(color_type & PNG_COLOR_MASK_COLOR)
cond	159:15	159:28	7	color_type & PNG_COLOR_MASK_COLOR
water	159:15	0:0	8	color_type
op	159:26	0:0	8	&
water	159:28	0:0	8	PNG_COLOR_MASK_COLOR
stmts	160:6	165:6	7	
water	160:6	0:0	8	{
if	161:9	162:58	8	(bit_depth == 8)
cond	161:13	161:26	9	bit_depth == 8
water	161:13	0:0	10	bit_depth
op	161:23	0:0	10	==
water	161:26	0:0	10	8
stmts	162:12	162:58	9	
water	162:12	0:0	10	filters
op	162:20	0:0	10	&=
op	162:23	0:0	10	~
water	162:24	0:0	10	(
water	162:25	0:0	10	PNG_FILTER_NONE
op	162:41	0:0	10	|
water	162:43	0:0	10	PNG_FILTER_AVG
water	162:57	0:0	10	)
water	162:58	0:0	10	;
else	163:9	164:55	8
stmts	164:12	164:55	9	
water	164:12	0:0	10	filters
op	164:20	0:0	10	=
water	164:22	0:0	10	PNG_FILTER_SUB
op	164:37	0:0	10	|
water	164:39	0:0	10	PNG_FILTER_PAETH
water	164:55	0:0	10	;
water	165:6	0:0	8	}
else	166:6	167:36	4
stmts	167:9	167:36	5	
water	167:9	0:0	6	filters
op	167:17	0:0	6	&=
water	167:20	0:0	6	~PNG_FILTER_NONE
water	167:36	0:0	6	;
water	168:3	0:0	4	}
water	169:3	0:0	2	{
decl	170:6	171:38	2	int	ret
op	170:14	0:0	2	=
call	170:16	171:37	3	write_png
arg	170:26	170:36	4	&file_name
op	170:26	0:0	5	&
water	170:27	0:0	5	file_name
arg	170:38	170:40	4	fp
water	170:38	0:0	5	fp
arg	170:42	170:52	4	color_type
water	170:42	0:0	5	color_type
arg	170:54	170:63	4	bit_depth
water	170:54	0:0	5	bit_depth
arg	170:65	170:70	4	gamma
water	170:65	0:0	5	gamma
arg	171:9	171:20	4	head_insert
water	171:9	0:0	5	head_insert
arg	171:22	171:29	4	filters
water	171:22	0:0	5	filters
arg	171:31	171:37	4	colors
water	171:31	0:0	5	colors
if	172:6	173:26	2	(ret != 0 && file_name != NULL)
cond	172:10	172:35	3	ret != 0 && file_name != NULL
water	172:10	0:0	4	ret
op	172:14	0:0	4	!=
water	172:17	0:0	4	0
op	172:19	0:0	4	&&
water	172:22	0:0	4	file_name
op	172:32	0:0	4	!=
water	172:35	0:0	4	NULL
stmts	173:9	173:26	3	
call	173:9	173:25	4	remove
arg	173:16	173:25	5	file_name
water	173:16	0:0	6	file_name
water	173:26	0:0	4	;
return	174:6	174:16	2	ret
water	174:13	0:0	3	ret
water	175:3	0:0	2	}
