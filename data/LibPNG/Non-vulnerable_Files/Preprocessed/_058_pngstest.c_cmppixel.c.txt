func	1:0	88:0	0	static int	cmppixel
params	2:8	0:0	1	
param	2:9	2:29	2	Transform *	transform
param	2:31	2:49	2	png_const_voidp	in
param	2:51	2:70	2	png_const_voidp	out
param	3:3	3:16	2	png_uint_32	x
param	3:18	3:31	2	png_uint_32	y
stmnts	0:0	87:79	1	
decl	5:3	5:13	2	int	maxerr
decl	6:3	6:25	2	png_const_charp	errmsg
decl	7:3	7:40	2	Pixel	pixel_in
water	7:17	0:0	2	,
decl	7:3	7:40	2	Pixel	pixel_calc
water	7:29	0:0	2	,
decl	7:3	7:40	2	Pixel	pixel_out
call	8:3	8:33	2	transform->in_gp
arg	8:20	8:29	3	&pixel_in
op	8:20	0:0	4	&
water	8:21	0:0	4	pixel_in
arg	8:31	8:33	3	in
water	8:31	0:0	4	in
water	8:34	0:0	2	;
if	9:3	10:73	2	(transform -> from_linear == NULL)
cond	9:7	9:33	3	transform -> from_linear == NULL
water	9:7	0:0	4	transform
op	9:16	0:0	4	->
water	9:18	0:0	4	from_linear
op	9:30	0:0	4	==
water	9:33	0:0	4	NULL
stmts	10:6	10:73	3	
call	10:6	10:72	4	transform->transform
arg	10:27	10:38	5	&pixel_calc
op	10:27	0:0	6	&
water	10:28	0:0	6	pixel_calc
arg	10:40	10:49	5	&pixel_in
op	10:40	0:0	6	&
water	10:41	0:0	6	pixel_in
arg	10:51	10:72	5	transform->background
water	10:51	0:0	6	transform
op	10:60	0:0	6	->
water	10:62	0:0	6	background
water	10:73	0:0	4	;
else	11:3	15:3	2
stmts	12:3	15:3	3	
water	12:3	0:0	4	{
call	13:6	13:71	4	transform->transform
arg	13:27	13:37	5	&pixel_out
op	13:27	0:0	6	&
water	13:28	0:0	6	pixel_out
arg	13:39	13:48	5	&pixel_in
op	13:39	0:0	6	&
water	13:40	0:0	6	pixel_in
arg	13:50	13:71	5	transform->background
water	13:50	0:0	6	transform
op	13:59	0:0	6	->
water	13:61	0:0	6	background
water	13:72	0:0	4	;
call	14:6	14:58	4	transform->from_linear
arg	14:29	14:40	5	&pixel_calc
op	14:29	0:0	6	&
water	14:30	0:0	6	pixel_calc
arg	14:42	14:52	5	&pixel_out
op	14:42	0:0	6	&
water	14:43	0:0	6	pixel_out
arg	14:54	14:58	5	NULL
water	14:54	0:0	6	NULL
water	14:59	0:0	4	;
water	15:3	0:0	4	}
call	16:3	16:36	2	transform->out_gp
arg	16:21	16:31	3	&pixel_out
op	16:21	0:0	4	&
water	16:22	0:0	4	pixel_out
arg	16:33	16:36	3	out
water	16:33	0:0	4	out
water	16:37	0:0	2	;
if	18:3	20:14	2	(pixel_calc . a == pixel_out . a && pixel_calc . r == pixel_out . r && pixel_calc . g == pixel_out . g && pixel_calc . b == pixel_out . b)
cond	18:7	19:63	3	pixel_calc . a == pixel_out . a && pixel_calc . r == pixel_out . r && pixel_calc . g == pixel_out . g && pixel_calc . b == pixel_out . b
water	18:7	0:0	4	pixel_calc
op	18:17	0:0	4	.
water	18:18	0:0	4	a
op	18:20	0:0	4	==
water	18:23	0:0	4	pixel_out
op	18:32	0:0	4	.
water	18:33	0:0	4	a
op	18:35	0:0	4	&&
water	18:38	0:0	4	pixel_calc
op	18:48	0:0	4	.
water	18:49	0:0	4	r
op	18:51	0:0	4	==
water	18:54	0:0	4	pixel_out
op	18:63	0:0	4	.
water	18:64	0:0	4	r
op	18:66	0:0	4	&&
water	19:6	0:0	4	pixel_calc
op	19:16	0:0	4	.
water	19:17	0:0	4	g
op	19:19	0:0	4	==
water	19:22	0:0	4	pixel_out
op	19:31	0:0	4	.
water	19:32	0:0	4	g
op	19:34	0:0	4	&&
water	19:37	0:0	4	pixel_calc
op	19:47	0:0	4	.
water	19:48	0:0	4	b
op	19:50	0:0	4	==
water	19:53	0:0	4	pixel_out
op	19:62	0:0	4	.
water	19:63	0:0	4	b
stmts	20:6	20:14	3	
return	20:6	20:14	4	1
water	20:13	0:0	5	1
if	25:3	26:14	2	(transform -> output_8bit && pixel_calc . a == 0 && pixel_out . a == 0)
cond	25:7	25:69	3	transform -> output_8bit && pixel_calc . a == 0 && pixel_out . a == 0
water	25:7	0:0	4	transform
op	25:16	0:0	4	->
water	25:18	0:0	4	output_8bit
op	25:30	0:0	4	&&
water	25:33	0:0	4	pixel_calc
op	25:43	0:0	4	.
water	25:44	0:0	4	a
op	25:46	0:0	4	==
water	25:49	0:0	4	0
op	25:51	0:0	4	&&
water	25:54	0:0	4	pixel_out
op	25:63	0:0	4	.
water	25:64	0:0	4	a
op	25:66	0:0	4	==
water	25:69	0:0	4	0
stmts	26:6	26:14	3	
return	26:6	26:14	4	1
water	26:13	0:0	5	1
water	30:3	0:0	2	errmsg
op	30:10	0:0	2	=
water	30:12	0:0	2	NULL
water	30:16	0:0	2	;
water	31:3	0:0	2	{
decl	32:6	32:47	2	int	err_a
op	32:16	0:0	2	=
call	32:18	32:46	3	abs
arg	32:22	32:46	4	pixel_calc.a-pixel_out.a
water	32:22	0:0	5	pixel_calc
op	32:32	0:0	5	.
water	32:33	0:0	5	a
op	32:34	0:0	5	-
water	32:35	0:0	5	pixel_out
op	32:44	0:0	5	.
water	32:45	0:0	5	a
if	33:6	40:6	2	(err_a > transform -> error [ 3 ])
cond	33:10	33:36	3	err_a > transform -> error [ 3 ]
water	33:10	0:0	4	err_a
op	33:16	0:0	4	>
water	33:18	0:0	4	transform
op	33:27	0:0	4	->
water	33:29	0:0	4	error
op	33:34	0:0	4	[
water	33:35	0:0	4	3
op	33:36	0:0	4	]
stmts	34:6	40:6	3	
water	34:6	0:0	4	{
if	36:9	37:52	4	(transform -> accumulate)
cond	36:13	36:24	5	transform -> accumulate
water	36:13	0:0	6	transform
op	36:22	0:0	6	->
water	36:24	0:0	6	accumulate
stmts	37:12	37:52	5	
water	37:12	0:0	6	transform
op	37:21	0:0	6	->
water	37:23	0:0	6	error
op	37:28	0:0	6	[
water	37:29	0:0	6	3
op	37:30	0:0	6	]
op	37:32	0:0	6	=
water	37:34	0:0	6	(
water	37:35	0:0	6	png_uint_16
water	37:46	0:0	6	)
water	37:47	0:0	6	err_a
water	37:52	0:0	6	;
else	38:9	39:28	4
stmts	39:12	39:28	5	
water	39:12	0:0	6	errmsg
op	39:19	0:0	6	=
water	39:21	0:0	6	"alpha"
water	39:28	0:0	6	;
water	40:6	0:0	4	}
water	41:3	0:0	2	}
if	45:3	47:14	2	(errmsg == NULL && transform -> output_8bit && ( pixel_calc . a == 0 || pixel_out . a == 0 ))
cond	45:7	46:44	3	errmsg == NULL && transform -> output_8bit && ( pixel_calc . a == 0 || pixel_out . a == 0 )
water	45:7	0:0	4	errmsg
op	45:14	0:0	4	==
water	45:17	0:0	4	NULL
op	45:22	0:0	4	&&
water	45:25	0:0	4	transform
op	45:34	0:0	4	->
water	45:36	0:0	4	output_8bit
op	45:48	0:0	4	&&
water	46:6	0:0	4	(
water	46:7	0:0	4	pixel_calc
op	46:17	0:0	4	.
water	46:18	0:0	4	a
op	46:20	0:0	4	==
water	46:23	0:0	4	0
op	46:25	0:0	4	||
water	46:28	0:0	4	pixel_out
op	46:37	0:0	4	.
water	46:38	0:0	4	a
op	46:40	0:0	4	==
water	46:43	0:0	4	0
water	46:44	0:0	4	)
stmts	47:6	47:14	3	
return	47:6	47:14	4	1
water	47:13	0:0	5	1
if	48:3	85:3	2	(errmsg == NULL)
cond	48:7	48:17	3	errmsg == NULL
water	48:7	0:0	4	errmsg
op	48:14	0:0	4	==
water	48:17	0:0	4	NULL
stmts	49:3	85:3	3	
water	49:3	0:0	4	{
decl	50:6	50:49	4	int	err_r
op	50:16	0:0	4	=
call	50:18	50:48	5	abs
arg	50:22	50:48	6	pixel_calc.r-pixel_out.r
water	50:22	0:0	7	pixel_calc
op	50:32	0:0	7	.
water	50:33	0:0	7	r
op	50:35	0:0	7	-
water	50:37	0:0	7	pixel_out
op	50:46	0:0	7	.
water	50:47	0:0	7	r
decl	51:6	51:49	4	int	err_g
op	51:16	0:0	4	=
call	51:18	51:48	5	abs
arg	51:22	51:48	6	pixel_calc.g-pixel_out.g
water	51:22	0:0	7	pixel_calc
op	51:32	0:0	7	.
water	51:33	0:0	7	g
op	51:35	0:0	7	-
water	51:37	0:0	7	pixel_out
op	51:46	0:0	7	.
water	51:47	0:0	7	g
decl	52:6	52:49	4	int	err_b
op	52:16	0:0	4	=
call	52:18	52:48	5	abs
arg	52:22	52:48	6	pixel_calc.b-pixel_out.b
water	52:22	0:0	7	pixel_calc
op	52:32	0:0	7	.
water	52:33	0:0	7	b
op	52:35	0:0	7	-
water	52:37	0:0	7	pixel_out
op	52:46	0:0	7	.
water	52:47	0:0	7	b
decl	53:6	53:15	4	int	limit
if	54:6	55:17	4	(( err_r | err_g | err_b ) == 0)
cond	54:10	54:37	5	( err_r | err_g | err_b ) == 0
water	54:10	0:0	6	(
water	54:11	0:0	6	err_r
op	54:17	0:0	6	|
water	54:19	0:0	6	err_g
op	54:25	0:0	6	|
water	54:27	0:0	6	err_b
water	54:32	0:0	6	)
op	54:34	0:0	6	==
water	54:37	0:0	6	0
stmts	55:9	55:17	5	
return	55:9	55:17	6	1
water	55:16	0:0	7	1
if	57:6	61:6	4	(pixel_in . a >= transform -> in_opaque)
cond	57:10	57:35	5	pixel_in . a >= transform -> in_opaque
water	57:10	0:0	6	pixel_in
op	57:18	0:0	6	.
water	57:19	0:0	6	a
op	57:21	0:0	6	>=
water	57:24	0:0	6	transform
op	57:33	0:0	6	->
water	57:35	0:0	6	in_opaque
stmts	58:6	61:6	5	
water	58:6	0:0	6	{
water	59:9	0:0	6	errmsg
op	59:16	0:0	6	=
water	59:18	0:0	6	"opaque component"
water	59:36	0:0	6	;
water	60:9	0:0	6	limit
op	60:15	0:0	6	=
water	60:17	0:0	6	2
water	60:18	0:0	6	;
water	61:6	0:0	6	}
else	62:6	66:6	4
stmts	62:11	66:6	5	
if	62:11	66:6	6	(pixel_in . a > 0)
cond	62:15	62:28	7	pixel_in . a > 0
water	62:15	0:0	8	pixel_in
op	62:23	0:0	8	.
water	62:24	0:0	8	a
op	62:26	0:0	8	>
water	62:28	0:0	8	0
stmts	63:6	66:6	7	
water	63:6	0:0	8	{
water	64:9	0:0	8	errmsg
op	64:16	0:0	8	=
water	64:18	0:0	8	"alpha component"
water	64:35	0:0	8	;
water	65:9	0:0	8	limit
op	65:15	0:0	8	=
water	65:17	0:0	8	1
water	65:18	0:0	8	;
water	66:6	0:0	8	}
else	67:6	71:6	4
stmts	68:6	71:6	5	
water	68:6	0:0	6	{
water	69:9	0:0	6	errmsg
op	69:16	0:0	6	=
water	69:18	0:0	6	"transparent component (background)"
water	69:54	0:0	6	;
water	70:9	0:0	6	limit
op	70:15	0:0	6	=
water	70:17	0:0	6	0
water	70:18	0:0	6	;
water	71:6	0:0	6	}
water	72:6	0:0	4	maxerr
op	72:13	0:0	4	=
water	72:15	0:0	4	err_r
water	72:20	0:0	4	;
if	73:6	73:40	4	(maxerr < err_g)
cond	73:10	73:19	5	maxerr < err_g
water	73:10	0:0	6	maxerr
op	73:17	0:0	6	<
water	73:19	0:0	6	err_g
stmts	73:26	73:40	5	
water	73:26	0:0	6	maxerr
op	73:33	0:0	6	=
water	73:35	0:0	6	err_g
water	73:40	0:0	6	;
if	74:6	74:40	4	(maxerr < err_b)
cond	74:10	74:19	5	maxerr < err_b
water	74:10	0:0	6	maxerr
op	74:17	0:0	6	<
water	74:19	0:0	6	err_b
stmts	74:26	74:40	5	
water	74:26	0:0	6	maxerr
op	74:33	0:0	6	=
water	74:35	0:0	6	err_b
water	74:40	0:0	6	;
if	75:6	76:17	4	(maxerr <= transform -> error [ limit ])
cond	75:10	75:42	5	maxerr <= transform -> error [ limit ]
water	75:10	0:0	6	maxerr
op	75:17	0:0	6	<=
water	75:20	0:0	6	transform
op	75:29	0:0	6	->
water	75:31	0:0	6	error
op	75:36	0:0	6	[
water	75:37	0:0	6	limit
op	75:42	0:0	6	]
stmts	76:9	76:17	5	
return	76:9	76:17	6	1
water	76:16	0:0	7	1
if	80:6	84:6	4	(transform -> accumulate)
cond	80:10	80:21	5	transform -> accumulate
water	80:10	0:0	6	transform
op	80:19	0:0	6	->
water	80:21	0:0	6	accumulate
stmts	81:6	84:6	5	
water	81:6	0:0	6	{
water	82:9	0:0	6	transform
op	82:18	0:0	6	->
water	82:20	0:0	6	error
op	82:25	0:0	6	[
water	82:26	0:0	6	limit
op	82:31	0:0	6	]
op	82:33	0:0	6	=
water	82:35	0:0	6	(
water	82:36	0:0	6	png_uint_16
water	82:47	0:0	6	)
water	82:48	0:0	6	maxerr
water	82:54	0:0	6	;
return	83:9	83:17	6	1
water	83:16	0:0	7	1
water	84:6	0:0	6	}
water	85:3	0:0	4	}
return	87:3	87:79	2	logpixel(transform,x,y,&pixel_in,&pixel_calc,&pixel_out,errmsg)
call	87:10	87:78	3	logpixel
arg	87:19	87:28	4	transform
water	87:19	0:0	5	transform
arg	87:30	87:31	4	x
water	87:30	0:0	5	x
arg	87:33	87:34	4	y
water	87:33	0:0	5	y
arg	87:36	87:45	4	&pixel_in
op	87:36	0:0	5	&
water	87:37	0:0	5	pixel_in
arg	87:47	87:58	4	&pixel_calc
op	87:47	0:0	5	&
water	87:48	0:0	5	pixel_calc
arg	87:60	87:70	4	&pixel_out
op	87:60	0:0	5	&
water	87:61	0:0	5	pixel_out
arg	87:72	87:78	4	errmsg
water	87:72	0:0	5	errmsg
