func	2:0	230:0	0	static void	rpng2_x_redisplay_image
params	2:35	0:0	1	
param	2:36	2:48	2	ulg	startcol
param	2:50	2:62	2	ulg	startrow
param	3:36	3:45	2	ulg	width
param	3:47	3:57	2	ulg	height
stmnts	0:0	229:4	1	
decl	5:4	5:36	2	uch	bg_red
op	5:17	0:0	2	=
water	5:19	0:0	2	rpng2_info
op	5:29	0:0	2	.
water	5:30	0:0	2	bg_red
decl	6:4	6:38	2	uch	bg_green
op	6:17	0:0	2	=
water	6:19	0:0	2	rpng2_info
op	6:29	0:0	2	.
water	6:30	0:0	2	bg_green
decl	7:4	7:37	2	uch	bg_blue
op	7:17	0:0	2	=
water	7:19	0:0	2	rpng2_info
op	7:29	0:0	2	.
water	7:30	0:0	2	bg_blue
decl	8:4	8:24	2	uch	*src
water	8:12	0:0	2	,
decl	8:4	8:24	2	uch	*src2
op	8:19	0:0	2	=
water	8:20	0:0	2	NULL
decl	9:4	9:14	2	char	*dest
decl	10:4	10:18	2	uch	r
water	10:9	0:0	2	,
decl	10:4	10:18	2	uch	g
water	10:12	0:0	2	,
decl	10:4	10:18	2	uch	b
water	10:15	0:0	2	,
decl	10:4	10:18	2	uch	a
decl	11:4	11:27	2	ulg	i
water	11:9	0:0	2	,
decl	11:4	11:27	2	ulg	row
water	11:14	0:0	2	,
decl	11:4	11:27	2	ulg	lastrow
op	11:24	0:0	2	=
water	11:26	0:0	2	0
decl	12:4	12:13	2	ulg	pixel
decl	13:4	13:48	2	int	ximage_rowbytes
op	13:24	0:0	2	=
water	13:26	0:0	2	ximage
op	13:32	0:0	2	->
water	13:34	0:0	2	bytes_per_line
water	14:4	0:0	2	Trace
water	14:9	0:0	2	(
water	14:10	0:0	2	(
water	14:11	0:0	2	stderr
water	14:17	0:0	2	,
water	14:19	0:0	2	"beginning display loop (image_channels == %d)\n"
water	14:68	0:0	2	,
water	15:6	0:0	2	rpng2_info
op	15:16	0:0	2	.
water	15:17	0:0	2	channels
water	15:25	0:0	2	)
water	15:26	0:0	2	)
water	16:4	0:0	2	Trace
water	16:9	0:0	2	(
water	16:10	0:0	2	(
water	16:11	0:0	2	stderr
water	16:17	0:0	2	,
water	16:19	0:0	2	"   (width = %ld, rowbytes = %d, ximage_rowbytes = %d)\n"
water	16:76	0:0	2	,
water	17:6	0:0	2	rpng2_info
op	17:16	0:0	2	.
water	17:17	0:0	2	width
water	17:22	0:0	2	,
water	17:24	0:0	2	rpng2_info
op	17:34	0:0	2	.
water	17:35	0:0	2	rowbytes
water	17:43	0:0	2	,
water	17:45	0:0	2	ximage_rowbytes
water	17:60	0:0	2	)
water	17:61	0:0	2	)
water	18:4	0:0	2	Trace
water	18:9	0:0	2	(
water	18:10	0:0	2	(
water	18:11	0:0	2	stderr
water	18:17	0:0	2	,
water	18:19	0:0	2	"   (bpp = %d)\n"
water	18:36	0:0	2	,
water	18:38	0:0	2	ximage
op	18:44	0:0	2	->
water	18:46	0:0	2	bits_per_pixel
water	18:60	0:0	2	)
water	18:61	0:0	2	)
water	19:4	0:0	2	Trace
water	19:9	0:0	2	(
water	19:10	0:0	2	(
water	19:11	0:0	2	stderr
water	19:17	0:0	2	,
water	19:19	0:0	2	"   (byte_order = %s)\n"
water	19:43	0:0	2	,
water	19:45	0:0	2	ximage
op	19:51	0:0	2	->
water	19:53	0:0	2	byte_order
op	19:64	0:0	2	==
water	19:67	0:0	2	MSBFirst
water	19:75	0:0	2	?
water	20:6	0:0	2	"MSBFirst"
water	20:17	0:0	2	:
water	20:19	0:0	2	(
water	20:20	0:0	2	ximage
op	20:26	0:0	2	->
water	20:28	0:0	2	byte_order
op	20:39	0:0	2	==
water	20:42	0:0	2	LSBFirst
water	20:50	0:0	2	?
water	20:52	0:0	2	"LSBFirst"
water	20:63	0:0	2	:
water	20:65	0:0	2	"unknown"
water	20:74	0:0	2	)
water	20:75	0:0	2	)
water	20:76	0:0	2	)
if	28:4	153:4	2	(depth == 24 || depth == 32)
cond	28:8	28:32	3	depth == 24 || depth == 32
water	28:8	0:0	4	depth
op	28:14	0:0	4	==
water	28:17	0:0	4	24
op	28:20	0:0	4	||
water	28:23	0:0	4	depth
op	28:29	0:0	4	==
water	28:32	0:0	4	32
stmts	28:36	153:4	3	
water	28:36	0:0	4	{
decl	29:8	29:28	4	ulg	red
water	29:15	0:0	4	,
decl	29:8	29:28	4	ulg	green
water	29:22	0:0	4	,
decl	29:8	29:28	4	ulg	blue
decl	30:8	30:40	4	int	bpp
op	30:16	0:0	4	=
water	30:18	0:0	4	ximage
op	30:24	0:0	4	->
water	30:26	0:0	4	bits_per_pixel
for	31:8	152:8	4	(lastrow = row = startrow ;row < startrow + height;++ row)
forinit	31:13	31:37	5	lastrow = row = startrow ;
water	31:13	0:0	6	lastrow
op	31:21	0:0	6	=
water	31:23	0:0	6	row
op	31:27	0:0	6	=
water	31:29	0:0	6	startrow
water	31:37	0:0	6	;
cond	31:40	31:55	5	row < startrow + height
water	31:40	0:0	6	row
op	31:44	0:0	6	<
water	31:46	0:0	6	startrow
op	31:54	0:0	6	+
water	31:55	0:0	6	height
forexpr	31:64	31:66	5	++ row
op	31:64	0:0	6	++
water	31:66	0:0	6	row
stmts	31:71	152:8	5	
water	31:71	0:0	6	{
water	32:12	0:0	6	src
op	32:16	0:0	6	=
water	32:18	0:0	6	rpng2_info
op	32:28	0:0	6	.
water	32:29	0:0	6	image_data
op	32:40	0:0	6	+
water	32:42	0:0	6	row
op	32:45	0:0	6	*
water	32:46	0:0	6	rpng2_info
op	32:56	0:0	6	.
water	32:57	0:0	6	rowbytes
water	32:65	0:0	6	;
if	33:12	34:48	6	(bg_image)
cond	33:16	33:16	7	bg_image
water	33:16	0:0	8	bg_image
stmts	34:16	34:48	7	
water	34:16	0:0	8	src2
op	34:21	0:0	8	=
water	34:23	0:0	8	bg_data
op	34:31	0:0	8	+
water	34:33	0:0	8	row
op	34:36	0:0	8	*
water	34:37	0:0	8	bg_rowbytes
water	34:48	0:0	8	;
water	35:12	0:0	6	dest
op	35:17	0:0	6	=
water	35:19	0:0	6	ximage
op	35:25	0:0	6	->
water	35:27	0:0	6	data
op	35:32	0:0	6	+
water	35:34	0:0	6	row
op	35:37	0:0	6	*
water	35:38	0:0	6	ximage_rowbytes
water	35:53	0:0	6	;
if	36:12	79:12	6	(rpng2_info . channels == 3)
cond	36:16	36:39	7	rpng2_info . channels == 3
water	36:16	0:0	8	rpng2_info
op	36:26	0:0	8	.
water	36:27	0:0	8	channels
op	36:36	0:0	8	==
water	36:39	0:0	8	3
stmts	36:42	79:12	7	
water	36:42	0:0	8	{
for	37:16	78:16	8	(i = rpng2_info . width ;i > 0;-- i)
forinit	37:21	37:41	9	i = rpng2_info . width ;
water	37:21	0:0	10	i
op	37:23	0:0	10	=
water	37:25	0:0	10	rpng2_info
op	37:35	0:0	10	.
water	37:36	0:0	10	width
water	37:41	0:0	10	;
cond	37:44	37:48	9	i > 0
water	37:44	0:0	10	i
op	37:46	0:0	10	>
water	37:48	0:0	10	0
forexpr	37:52	37:54	9	-- i
op	37:52	0:0	10	--
water	37:54	0:0	10	i
stmts	37:57	78:16	9	
water	37:57	0:0	10	{
water	38:20	0:0	10	red
op	38:26	0:0	10	=
op	38:28	0:0	10	*
water	38:29	0:0	10	src
op	38:32	0:0	10	++
water	38:34	0:0	10	;
water	39:20	0:0	10	green
op	39:26	0:0	10	=
op	39:28	0:0	10	*
water	39:29	0:0	10	src
op	39:32	0:0	10	++
water	39:34	0:0	10	;
water	40:20	0:0	10	blue
op	40:26	0:0	10	=
op	40:28	0:0	10	*
water	40:29	0:0	10	src
op	40:32	0:0	10	++
water	40:34	0:0	10	;
water	42:20	0:0	10	pixel
op	42:26	0:0	10	=
water	42:28	0:0	10	(
water	42:29	0:0	10	red
op	42:35	0:0	10	<<
water	42:38	0:0	10	RShift
water	42:44	0:0	10	)
op	42:46	0:0	10	|
water	43:28	0:0	10	(
water	43:29	0:0	10	green
op	43:35	0:0	10	<<
water	43:38	0:0	10	GShift
water	43:44	0:0	10	)
op	43:46	0:0	10	|
water	44:28	0:0	10	(
water	44:29	0:0	10	blue
op	44:35	0:0	10	<<
water	44:38	0:0	10	BShift
water	44:44	0:0	10	)
water	44:45	0:0	10	;
if	46:20	51:20	10	(bpp == 32)
cond	46:24	46:31	11	bpp == 32
water	46:24	0:0	12	bpp
op	46:28	0:0	12	==
water	46:31	0:0	12	32
stmts	46:35	51:20	11	
water	46:35	0:0	12	{
op	47:24	0:0	12	*
water	47:25	0:0	12	dest
op	47:29	0:0	12	++
op	47:32	0:0	12	=
call	47:34	47:61	12	(char)
arg	47:41	47:61	13	(pixel>>24)&0xff
water	47:41	0:0	14	(
water	47:42	0:0	14	pixel
op	47:48	0:0	14	>>
water	47:51	0:0	14	24
water	47:53	0:0	14	)
op	47:55	0:0	14	&
water	47:57	0:0	14	0
water	47:58	0:0	14	xff
water	47:62	0:0	12	;
op	48:24	0:0	12	*
water	48:25	0:0	12	dest
op	48:29	0:0	12	++
op	48:32	0:0	12	=
call	48:34	48:61	12	(char)
arg	48:41	48:61	13	(pixel>>16)&0xff
water	48:41	0:0	14	(
water	48:42	0:0	14	pixel
op	48:48	0:0	14	>>
water	48:51	0:0	14	16
water	48:53	0:0	14	)
op	48:55	0:0	14	&
water	48:57	0:0	14	0
water	48:58	0:0	14	xff
water	48:62	0:0	12	;
op	49:24	0:0	12	*
water	49:25	0:0	12	dest
op	49:29	0:0	12	++
op	49:32	0:0	12	=
call	49:34	49:61	12	(char)
arg	49:41	49:61	13	(pixel>>8)&0xff
water	49:41	0:0	14	(
water	49:42	0:0	14	pixel
op	49:48	0:0	14	>>
water	49:52	0:0	14	8
water	49:53	0:0	14	)
op	49:55	0:0	14	&
water	49:57	0:0	14	0
water	49:58	0:0	14	xff
water	49:62	0:0	12	;
op	50:24	0:0	12	*
water	50:25	0:0	12	dest
op	50:29	0:0	12	++
op	50:32	0:0	12	=
call	50:34	50:61	12	(char)
arg	50:42	50:61	13	pixel&0xff
water	50:42	0:0	14	pixel
op	50:55	0:0	14	&
water	50:57	0:0	14	0
water	50:58	0:0	14	xff
water	50:62	0:0	12	;
water	51:20	0:0	12	}
else	51:22	57:20	10
stmts	51:27	57:20	11	
water	51:27	0:0	12	{
op	54:24	0:0	12	*
water	54:25	0:0	12	dest
op	54:29	0:0	12	++
op	54:32	0:0	12	=
call	54:34	54:61	12	(char)
arg	54:41	54:61	13	(pixel>>16)&0xff
water	54:41	0:0	14	(
water	54:42	0:0	14	pixel
op	54:48	0:0	14	>>
water	54:51	0:0	14	16
water	54:53	0:0	14	)
op	54:55	0:0	14	&
water	54:57	0:0	14	0
water	54:58	0:0	14	xff
water	54:62	0:0	12	;
op	55:24	0:0	12	*
water	55:25	0:0	12	dest
op	55:29	0:0	12	++
op	55:32	0:0	12	=
call	55:34	55:61	12	(char)
arg	55:41	55:61	13	(pixel>>8)&0xff
water	55:41	0:0	14	(
water	55:42	0:0	14	pixel
op	55:48	0:0	14	>>
water	55:52	0:0	14	8
water	55:53	0:0	14	)
op	55:55	0:0	14	&
water	55:57	0:0	14	0
water	55:58	0:0	14	xff
water	55:62	0:0	12	;
op	56:24	0:0	12	*
water	56:25	0:0	12	dest
op	56:29	0:0	12	++
op	56:32	0:0	12	=
call	56:34	56:61	12	(char)
arg	56:42	56:61	13	pixel&0xff
water	56:42	0:0	14	pixel
op	56:55	0:0	14	&
water	56:57	0:0	14	0
water	56:58	0:0	14	xff
water	56:62	0:0	12	;
water	57:20	0:0	12	}
water	59:20	0:0	10	red
op	59:26	0:0	10	=
water	59:28	0:0	10	(
water	59:29	0:0	10	RShift
op	59:36	0:0	10	<
water	59:38	0:0	10	0
water	59:39	0:0	10	)
water	59:40	0:0	10	?
water	59:42	0:0	10	red
op	59:48	0:0	10	<<
water	59:51	0:0	10	(
op	59:52	0:0	10	-
water	59:53	0:0	10	RShift
water	59:59	0:0	10	)
water	59:61	0:0	10	:
water	59:63	0:0	10	red
op	59:69	0:0	10	>>
water	59:72	0:0	10	RShift
water	59:78	0:0	10	;
water	60:20	0:0	10	green
op	60:26	0:0	10	=
water	60:28	0:0	10	(
water	60:29	0:0	10	GShift
op	60:36	0:0	10	<
water	60:38	0:0	10	0
water	60:39	0:0	10	)
water	60:40	0:0	10	?
water	60:42	0:0	10	green
op	60:48	0:0	10	<<
water	60:51	0:0	10	(
op	60:52	0:0	10	-
water	60:53	0:0	10	GShift
water	60:59	0:0	10	)
water	60:61	0:0	10	:
water	60:63	0:0	10	green
op	60:69	0:0	10	>>
water	60:72	0:0	10	GShift
water	60:78	0:0	10	;
water	61:20	0:0	10	blue
op	61:26	0:0	10	=
water	61:28	0:0	10	(
water	61:29	0:0	10	BShift
op	61:36	0:0	10	<
water	61:38	0:0	10	0
water	61:39	0:0	10	)
water	61:40	0:0	10	?
water	61:42	0:0	10	blue
op	61:48	0:0	10	<<
water	61:51	0:0	10	(
op	61:52	0:0	10	-
water	61:53	0:0	10	BShift
water	61:59	0:0	10	)
water	61:61	0:0	10	:
water	61:63	0:0	10	blue
op	61:69	0:0	10	>>
water	61:72	0:0	10	BShift
water	61:78	0:0	10	;
water	62:20	0:0	10	pixel
op	62:26	0:0	10	=
water	62:28	0:0	10	(
water	62:29	0:0	10	red
op	62:33	0:0	10	&
water	62:35	0:0	10	RMask
water	62:40	0:0	10	)
op	62:42	0:0	10	|
water	62:44	0:0	10	(
water	62:45	0:0	10	green
op	62:51	0:0	10	&
water	62:53	0:0	10	GMask
water	62:58	0:0	10	)
op	62:60	0:0	10	|
water	62:62	0:0	10	(
water	62:63	0:0	10	blue
op	62:68	0:0	10	&
water	62:70	0:0	10	BMask
water	62:75	0:0	10	)
water	62:76	0:0	10	;
if	64:20	69:20	10	(bpp == 32)
cond	64:24	64:31	11	bpp == 32
water	64:24	0:0	12	bpp
op	64:28	0:0	12	==
water	64:31	0:0	12	32
stmts	64:35	69:20	11	
water	64:35	0:0	12	{
op	65:24	0:0	12	*
water	65:25	0:0	12	dest
op	65:29	0:0	12	++
op	65:32	0:0	12	=
call	65:34	65:61	12	(char)
arg	65:41	65:61	13	(pixel>>24)&0xff
water	65:41	0:0	14	(
water	65:42	0:0	14	pixel
op	65:48	0:0	14	>>
water	65:51	0:0	14	24
water	65:53	0:0	14	)
op	65:55	0:0	14	&
water	65:57	0:0	14	0
water	65:58	0:0	14	xff
water	65:62	0:0	12	;
op	66:24	0:0	12	*
water	66:25	0:0	12	dest
op	66:29	0:0	12	++
op	66:32	0:0	12	=
call	66:34	66:61	12	(char)
arg	66:41	66:61	13	(pixel>>16)&0xff
water	66:41	0:0	14	(
water	66:42	0:0	14	pixel
op	66:48	0:0	14	>>
water	66:51	0:0	14	16
water	66:53	0:0	14	)
op	66:55	0:0	14	&
water	66:57	0:0	14	0
water	66:58	0:0	14	xff
water	66:62	0:0	12	;
op	67:24	0:0	12	*
water	67:25	0:0	12	dest
op	67:29	0:0	12	++
op	67:32	0:0	12	=
call	67:34	67:61	12	(char)
arg	67:41	67:61	13	(pixel>>8)&0xff
water	67:41	0:0	14	(
water	67:42	0:0	14	pixel
op	67:48	0:0	14	>>
water	67:52	0:0	14	8
water	67:53	0:0	14	)
op	67:55	0:0	14	&
water	67:57	0:0	14	0
water	67:58	0:0	14	xff
water	67:62	0:0	12	;
op	68:24	0:0	12	*
water	68:25	0:0	12	dest
op	68:29	0:0	12	++
op	68:32	0:0	12	=
call	68:34	68:61	12	(char)
arg	68:42	68:61	13	pixel&0xff
water	68:42	0:0	14	pixel
op	68:55	0:0	14	&
water	68:57	0:0	14	0
water	68:58	0:0	14	xff
water	68:62	0:0	12	;
water	69:20	0:0	12	}
else	69:22	76:20	10
stmts	69:27	76:20	11	
water	69:27	0:0	12	{
op	73:24	0:0	12	*
water	73:25	0:0	12	dest
op	73:29	0:0	12	++
op	73:32	0:0	12	=
call	73:34	73:61	12	(char)
arg	73:41	73:61	13	(pixel>>16)&0xff
water	73:41	0:0	14	(
water	73:42	0:0	14	pixel
op	73:48	0:0	14	>>
water	73:51	0:0	14	16
water	73:53	0:0	14	)
op	73:55	0:0	14	&
water	73:57	0:0	14	0
water	73:58	0:0	14	xff
water	73:62	0:0	12	;
op	74:24	0:0	12	*
water	74:25	0:0	12	dest
op	74:29	0:0	12	++
op	74:32	0:0	12	=
call	74:34	74:61	12	(char)
arg	74:41	74:61	13	(pixel>>8)&0xff
water	74:41	0:0	14	(
water	74:42	0:0	14	pixel
op	74:48	0:0	14	>>
water	74:52	0:0	14	8
water	74:53	0:0	14	)
op	74:55	0:0	14	&
water	74:57	0:0	14	0
water	74:58	0:0	14	xff
water	74:62	0:0	12	;
op	75:24	0:0	12	*
water	75:25	0:0	12	dest
op	75:29	0:0	12	++
op	75:32	0:0	12	=
call	75:34	75:61	12	(char)
arg	75:42	75:61	13	pixel&0xff
water	75:42	0:0	14	pixel
op	75:55	0:0	14	&
water	75:57	0:0	14	0
water	75:58	0:0	14	xff
water	75:62	0:0	12	;
water	76:20	0:0	12	}
water	78:16	0:0	10	}
water	79:12	0:0	8	}
else	79:14	144:12	6
stmts	79:20	144:12	7	
water	79:20	0:0	8	{
for	80:16	143:16	8	(i = rpng2_info . width ;i > 0;-- i)
forinit	80:21	80:41	9	i = rpng2_info . width ;
water	80:21	0:0	10	i
op	80:23	0:0	10	=
water	80:25	0:0	10	rpng2_info
op	80:35	0:0	10	.
water	80:36	0:0	10	width
water	80:41	0:0	10	;
cond	80:44	80:48	9	i > 0
water	80:44	0:0	10	i
op	80:46	0:0	10	>
water	80:48	0:0	10	0
forexpr	80:52	80:54	9	-- i
op	80:52	0:0	10	--
water	80:54	0:0	10	i
stmts	80:57	143:16	9	
water	80:57	0:0	10	{
water	81:20	0:0	10	r
op	81:22	0:0	10	=
op	81:24	0:0	10	*
water	81:25	0:0	10	src
op	81:28	0:0	10	++
water	81:30	0:0	10	;
water	82:20	0:0	10	g
op	82:22	0:0	10	=
op	82:24	0:0	10	*
water	82:25	0:0	10	src
op	82:28	0:0	10	++
water	82:30	0:0	10	;
water	83:20	0:0	10	b
op	83:22	0:0	10	=
op	83:24	0:0	10	*
water	83:25	0:0	10	src
op	83:28	0:0	10	++
water	83:30	0:0	10	;
water	84:20	0:0	10	a
op	84:22	0:0	10	=
op	84:24	0:0	10	*
water	84:25	0:0	10	src
op	84:28	0:0	10	++
water	84:30	0:0	10	;
if	85:20	89:20	10	(bg_image)
cond	85:24	85:24	11	bg_image
water	85:24	0:0	12	bg_image
stmts	85:34	89:20	11	
water	85:34	0:0	12	{
water	86:24	0:0	12	bg_red
op	86:33	0:0	12	=
op	86:35	0:0	12	*
water	86:36	0:0	12	src2
op	86:40	0:0	12	++
water	86:42	0:0	12	;
water	87:24	0:0	12	bg_green
op	87:33	0:0	12	=
op	87:35	0:0	12	*
water	87:36	0:0	12	src2
op	87:40	0:0	12	++
water	87:42	0:0	12	;
water	88:24	0:0	12	bg_blue
op	88:33	0:0	12	=
op	88:35	0:0	12	*
water	88:36	0:0	12	src2
op	88:40	0:0	12	++
water	88:42	0:0	12	;
water	89:20	0:0	12	}
if	90:20	94:20	10	(a == 255)
cond	90:24	90:29	11	a == 255
water	90:24	0:0	12	a
op	90:26	0:0	12	==
water	90:29	0:0	12	255
stmts	90:34	94:20	11	
water	90:34	0:0	12	{
water	91:24	0:0	12	red
op	91:30	0:0	12	=
water	91:32	0:0	12	r
water	91:33	0:0	12	;
water	92:24	0:0	12	green
op	92:30	0:0	12	=
water	92:32	0:0	12	g
water	92:33	0:0	12	;
water	93:24	0:0	12	blue
op	93:30	0:0	12	=
water	93:32	0:0	12	b
water	93:33	0:0	12	;
water	94:20	0:0	12	}
else	94:22	98:20	10
stmts	94:27	98:20	11	
if	94:27	98:20	12	(a == 0)
cond	94:31	94:36	13	a == 0
water	94:31	0:0	14	a
op	94:33	0:0	14	==
water	94:36	0:0	14	0
stmts	94:39	98:20	13	
water	94:39	0:0	14	{
water	95:24	0:0	14	red
op	95:30	0:0	14	=
water	95:32	0:0	14	bg_red
water	95:38	0:0	14	;
water	96:24	0:0	14	green
op	96:30	0:0	14	=
water	96:32	0:0	14	bg_green
water	96:40	0:0	14	;
water	97:24	0:0	14	blue
op	97:30	0:0	14	=
water	97:32	0:0	14	bg_blue
water	97:39	0:0	14	;
water	98:20	0:0	14	}
else	98:22	105:20	10
stmts	98:27	105:20	11	
water	98:27	0:0	12	{
call	102:24	102:59	12	alpha_composite
arg	102:40	102:43	13	red
water	102:40	0:0	14	red
arg	102:47	102:48	13	r
water	102:47	0:0	14	r
arg	102:50	102:51	13	a
water	102:50	0:0	14	a
arg	102:53	102:59	13	bg_red
water	102:53	0:0	14	bg_red
water	102:60	0:0	12	;
call	103:24	103:61	12	alpha_composite
arg	103:40	103:45	13	green
water	103:40	0:0	14	green
arg	103:47	103:48	13	g
water	103:47	0:0	14	g
arg	103:50	103:51	13	a
water	103:50	0:0	14	a
arg	103:53	103:61	13	bg_green
water	103:53	0:0	14	bg_green
water	103:62	0:0	12	;
call	104:24	104:60	12	alpha_composite
arg	104:40	104:44	13	blue
water	104:40	0:0	14	blue
arg	104:47	104:48	13	b
water	104:47	0:0	14	b
arg	104:50	104:51	13	a
water	104:50	0:0	14	a
arg	104:53	104:60	13	bg_blue
water	104:53	0:0	14	bg_blue
water	104:61	0:0	12	;
water	105:20	0:0	12	}
water	107:20	0:0	10	pixel
op	107:26	0:0	10	=
water	107:28	0:0	10	(
water	107:29	0:0	10	red
op	107:35	0:0	10	<<
water	107:38	0:0	10	RShift
water	107:44	0:0	10	)
op	107:46	0:0	10	|
water	108:28	0:0	10	(
water	108:29	0:0	10	green
op	108:35	0:0	10	<<
water	108:38	0:0	10	GShift
water	108:44	0:0	10	)
op	108:46	0:0	10	|
water	109:28	0:0	10	(
water	109:29	0:0	10	blue
op	109:35	0:0	10	<<
water	109:38	0:0	10	BShift
water	109:44	0:0	10	)
water	109:45	0:0	10	;
if	111:20	116:20	10	(bpp == 32)
cond	111:24	111:31	11	bpp == 32
water	111:24	0:0	12	bpp
op	111:28	0:0	12	==
water	111:31	0:0	12	32
stmts	111:35	116:20	11	
water	111:35	0:0	12	{
op	112:24	0:0	12	*
water	112:25	0:0	12	dest
op	112:29	0:0	12	++
op	112:32	0:0	12	=
call	112:34	112:61	12	(char)
arg	112:41	112:61	13	(pixel>>24)&0xff
water	112:41	0:0	14	(
water	112:42	0:0	14	pixel
op	112:48	0:0	14	>>
water	112:51	0:0	14	24
water	112:53	0:0	14	)
op	112:55	0:0	14	&
water	112:57	0:0	14	0
water	112:58	0:0	14	xff
water	112:62	0:0	12	;
op	113:24	0:0	12	*
water	113:25	0:0	12	dest
op	113:29	0:0	12	++
op	113:32	0:0	12	=
call	113:34	113:61	12	(char)
arg	113:41	113:61	13	(pixel>>16)&0xff
water	113:41	0:0	14	(
water	113:42	0:0	14	pixel
op	113:48	0:0	14	>>
water	113:51	0:0	14	16
water	113:53	0:0	14	)
op	113:55	0:0	14	&
water	113:57	0:0	14	0
water	113:58	0:0	14	xff
water	113:62	0:0	12	;
op	114:24	0:0	12	*
water	114:25	0:0	12	dest
op	114:29	0:0	12	++
op	114:32	0:0	12	=
call	114:34	114:61	12	(char)
arg	114:41	114:61	13	(pixel>>8)&0xff
water	114:41	0:0	14	(
water	114:42	0:0	14	pixel
op	114:48	0:0	14	>>
water	114:52	0:0	14	8
water	114:53	0:0	14	)
op	114:55	0:0	14	&
water	114:57	0:0	14	0
water	114:58	0:0	14	xff
water	114:62	0:0	12	;
op	115:24	0:0	12	*
water	115:25	0:0	12	dest
op	115:29	0:0	12	++
op	115:32	0:0	12	=
call	115:34	115:61	12	(char)
arg	115:42	115:61	13	pixel&0xff
water	115:42	0:0	14	pixel
op	115:55	0:0	14	&
water	115:57	0:0	14	0
water	115:58	0:0	14	xff
water	115:62	0:0	12	;
water	116:20	0:0	12	}
else	116:22	122:20	10
stmts	116:27	122:20	11	
water	116:27	0:0	12	{
op	119:24	0:0	12	*
water	119:25	0:0	12	dest
op	119:29	0:0	12	++
op	119:32	0:0	12	=
call	119:34	119:61	12	(char)
arg	119:41	119:61	13	(pixel>>16)&0xff
water	119:41	0:0	14	(
water	119:42	0:0	14	pixel
op	119:48	0:0	14	>>
water	119:51	0:0	14	16
water	119:53	0:0	14	)
op	119:55	0:0	14	&
water	119:57	0:0	14	0
water	119:58	0:0	14	xff
water	119:62	0:0	12	;
op	120:24	0:0	12	*
water	120:25	0:0	12	dest
op	120:29	0:0	12	++
op	120:32	0:0	12	=
call	120:34	120:61	12	(char)
arg	120:41	120:61	13	(pixel>>8)&0xff
water	120:41	0:0	14	(
water	120:42	0:0	14	pixel
op	120:48	0:0	14	>>
water	120:52	0:0	14	8
water	120:53	0:0	14	)
op	120:55	0:0	14	&
water	120:57	0:0	14	0
water	120:58	0:0	14	xff
water	120:62	0:0	12	;
op	121:24	0:0	12	*
water	121:25	0:0	12	dest
op	121:29	0:0	12	++
op	121:32	0:0	12	=
call	121:34	121:61	12	(char)
arg	121:42	121:61	13	pixel&0xff
water	121:42	0:0	14	pixel
op	121:55	0:0	14	&
water	121:57	0:0	14	0
water	121:58	0:0	14	xff
water	121:62	0:0	12	;
water	122:20	0:0	12	}
water	124:20	0:0	10	red
op	124:26	0:0	10	=
water	124:28	0:0	10	(
water	124:29	0:0	10	RShift
op	124:36	0:0	10	<
water	124:38	0:0	10	0
water	124:39	0:0	10	)
water	124:40	0:0	10	?
water	124:42	0:0	10	red
op	124:48	0:0	10	<<
water	124:51	0:0	10	(
op	124:52	0:0	10	-
water	124:53	0:0	10	RShift
water	124:59	0:0	10	)
water	124:61	0:0	10	:
water	124:63	0:0	10	red
op	124:69	0:0	10	>>
water	124:72	0:0	10	RShift
water	124:78	0:0	10	;
water	125:20	0:0	10	green
op	125:26	0:0	10	=
water	125:28	0:0	10	(
water	125:29	0:0	10	GShift
op	125:36	0:0	10	<
water	125:38	0:0	10	0
water	125:39	0:0	10	)
water	125:40	0:0	10	?
water	125:42	0:0	10	green
op	125:48	0:0	10	<<
water	125:51	0:0	10	(
op	125:52	0:0	10	-
water	125:53	0:0	10	GShift
water	125:59	0:0	10	)
water	125:61	0:0	10	:
water	125:63	0:0	10	green
op	125:69	0:0	10	>>
water	125:72	0:0	10	GShift
water	125:78	0:0	10	;
water	126:20	0:0	10	blue
op	126:26	0:0	10	=
water	126:28	0:0	10	(
water	126:29	0:0	10	BShift
op	126:36	0:0	10	<
water	126:38	0:0	10	0
water	126:39	0:0	10	)
water	126:40	0:0	10	?
water	126:42	0:0	10	blue
op	126:48	0:0	10	<<
water	126:51	0:0	10	(
op	126:52	0:0	10	-
water	126:53	0:0	10	BShift
water	126:59	0:0	10	)
water	126:61	0:0	10	:
water	126:63	0:0	10	blue
op	126:69	0:0	10	>>
water	126:72	0:0	10	BShift
water	126:78	0:0	10	;
water	127:20	0:0	10	pixel
op	127:26	0:0	10	=
water	127:28	0:0	10	(
water	127:29	0:0	10	red
op	127:33	0:0	10	&
water	127:35	0:0	10	RMask
water	127:40	0:0	10	)
op	127:42	0:0	10	|
water	127:44	0:0	10	(
water	127:45	0:0	10	green
op	127:51	0:0	10	&
water	127:53	0:0	10	GMask
water	127:58	0:0	10	)
op	127:60	0:0	10	|
water	127:62	0:0	10	(
water	127:63	0:0	10	blue
op	127:68	0:0	10	&
water	127:70	0:0	10	BMask
water	127:75	0:0	10	)
water	127:76	0:0	10	;
if	129:20	134:20	10	(bpp == 32)
cond	129:24	129:31	11	bpp == 32
water	129:24	0:0	12	bpp
op	129:28	0:0	12	==
water	129:31	0:0	12	32
stmts	129:35	134:20	11	
water	129:35	0:0	12	{
op	130:24	0:0	12	*
water	130:25	0:0	12	dest
op	130:29	0:0	12	++
op	130:32	0:0	12	=
call	130:34	130:61	12	(char)
arg	130:41	130:61	13	(pixel>>24)&0xff
water	130:41	0:0	14	(
water	130:42	0:0	14	pixel
op	130:48	0:0	14	>>
water	130:51	0:0	14	24
water	130:53	0:0	14	)
op	130:55	0:0	14	&
water	130:57	0:0	14	0
water	130:58	0:0	14	xff
water	130:62	0:0	12	;
op	131:24	0:0	12	*
water	131:25	0:0	12	dest
op	131:29	0:0	12	++
op	131:32	0:0	12	=
call	131:34	131:61	12	(char)
arg	131:41	131:61	13	(pixel>>16)&0xff
water	131:41	0:0	14	(
water	131:42	0:0	14	pixel
op	131:48	0:0	14	>>
water	131:51	0:0	14	16
water	131:53	0:0	14	)
op	131:55	0:0	14	&
water	131:57	0:0	14	0
water	131:58	0:0	14	xff
water	131:62	0:0	12	;
op	132:24	0:0	12	*
water	132:25	0:0	12	dest
op	132:29	0:0	12	++
op	132:32	0:0	12	=
call	132:34	132:61	12	(char)
arg	132:41	132:61	13	(pixel>>8)&0xff
water	132:41	0:0	14	(
water	132:42	0:0	14	pixel
op	132:48	0:0	14	>>
water	132:52	0:0	14	8
water	132:53	0:0	14	)
op	132:55	0:0	14	&
water	132:57	0:0	14	0
water	132:58	0:0	14	xff
water	132:62	0:0	12	;
op	133:24	0:0	12	*
water	133:25	0:0	12	dest
op	133:29	0:0	12	++
op	133:32	0:0	12	=
call	133:34	133:61	12	(char)
arg	133:42	133:61	13	pixel&0xff
water	133:42	0:0	14	pixel
op	133:55	0:0	14	&
water	133:57	0:0	14	0
water	133:58	0:0	14	xff
water	133:62	0:0	12	;
water	134:20	0:0	12	}
else	134:22	141:20	10
stmts	134:27	141:20	11	
water	134:27	0:0	12	{
op	138:24	0:0	12	*
water	138:25	0:0	12	dest
op	138:29	0:0	12	++
op	138:32	0:0	12	=
call	138:34	138:61	12	(char)
arg	138:41	138:61	13	(pixel>>16)&0xff
water	138:41	0:0	14	(
water	138:42	0:0	14	pixel
op	138:48	0:0	14	>>
water	138:51	0:0	14	16
water	138:53	0:0	14	)
op	138:55	0:0	14	&
water	138:57	0:0	14	0
water	138:58	0:0	14	xff
water	138:62	0:0	12	;
op	139:24	0:0	12	*
water	139:25	0:0	12	dest
op	139:29	0:0	12	++
op	139:32	0:0	12	=
call	139:34	139:61	12	(char)
arg	139:41	139:61	13	(pixel>>8)&0xff
water	139:41	0:0	14	(
water	139:42	0:0	14	pixel
op	139:48	0:0	14	>>
water	139:52	0:0	14	8
water	139:53	0:0	14	)
op	139:55	0:0	14	&
water	139:57	0:0	14	0
water	139:58	0:0	14	xff
water	139:62	0:0	12	;
op	140:24	0:0	12	*
water	140:25	0:0	12	dest
op	140:29	0:0	12	++
op	140:32	0:0	12	=
call	140:34	140:61	12	(char)
arg	140:42	140:61	13	pixel&0xff
water	140:42	0:0	14	pixel
op	140:55	0:0	14	&
water	140:57	0:0	14	0
water	140:58	0:0	14	xff
water	140:62	0:0	12	;
water	141:20	0:0	12	}
water	143:16	0:0	10	}
water	144:12	0:0	8	}
if	146:12	151:12	6	(( ( row + 1 ) & 0 xf ) == 0)
cond	146:16	146:35	7	( ( row + 1 ) & 0 xf ) == 0
water	146:16	0:0	8	(
water	146:17	0:0	8	(
water	146:18	0:0	8	row
op	146:21	0:0	8	+
water	146:22	0:0	8	1
water	146:23	0:0	8	)
op	146:25	0:0	8	&
water	146:27	0:0	8	0
water	146:28	0:0	8	xf
water	146:30	0:0	8	)
op	146:32	0:0	8	==
water	146:35	0:0	8	0
stmts	146:38	151:12	7	
water	146:38	0:0	8	{
call	147:16	148:52	8	XPutImage
arg	147:26	147:33	9	display
water	147:26	0:0	10	display
arg	147:35	147:41	9	window
water	147:35	0:0	10	window
arg	147:43	147:45	9	gc
water	147:43	0:0	10	gc
arg	147:47	147:53	9	ximage
water	147:47	0:0	10	ximage
arg	147:55	147:56	9	0
water	147:55	0:0	10	0
arg	147:58	147:70	9	(int)lastrow
water	147:58	0:0	10	(
water	147:59	0:0	10	int
water	147:62	0:0	10	)
water	147:63	0:0	10	lastrow
arg	147:72	147:73	9	0
water	147:72	0:0	10	0
arg	148:18	148:30	9	(int)lastrow
water	148:18	0:0	10	(
water	148:19	0:0	10	int
water	148:22	0:0	10	)
water	148:23	0:0	10	lastrow
arg	148:32	148:48	9	rpng2_info.width
water	148:32	0:0	10	rpng2_info
op	148:42	0:0	10	.
water	148:43	0:0	10	width
arg	148:50	148:52	9	16
water	148:50	0:0	10	16
water	148:53	0:0	8	;
call	149:16	149:30	8	XFlush
arg	149:23	149:30	9	display
water	149:23	0:0	10	display
water	149:31	0:0	8	;
water	150:16	0:0	8	lastrow
op	150:24	0:0	8	=
water	150:26	0:0	8	row
op	150:30	0:0	8	+
water	150:32	0:0	8	1
water	150:33	0:0	8	;
water	151:12	0:0	8	}
water	152:8	0:0	6	}
water	153:4	0:0	4	}
else	153:6	221:4	2
stmts	153:11	221:4	3	
if	153:11	221:4	4	(depth == 16)
cond	153:15	153:24	5	depth == 16
water	153:15	0:0	6	depth
op	153:21	0:0	6	==
water	153:24	0:0	6	16
stmts	153:28	221:4	5	
water	153:28	0:0	6	{
decl	154:8	154:28	6	ush	red
water	154:15	0:0	6	,
decl	154:8	154:28	6	ush	green
water	154:22	0:0	6	,
decl	154:8	154:28	6	ush	blue
for	155:8	220:8	6	(lastrow = row = startrow ;row < startrow + height;++ row)
forinit	155:13	155:37	7	lastrow = row = startrow ;
water	155:13	0:0	8	lastrow
op	155:21	0:0	8	=
water	155:23	0:0	8	row
op	155:27	0:0	8	=
water	155:29	0:0	8	startrow
water	155:37	0:0	8	;
cond	155:40	155:55	7	row < startrow + height
water	155:40	0:0	8	row
op	155:44	0:0	8	<
water	155:46	0:0	8	startrow
op	155:54	0:0	8	+
water	155:55	0:0	8	height
forexpr	155:64	155:66	7	++ row
op	155:64	0:0	8	++
water	155:66	0:0	8	row
stmts	155:71	220:8	7	
water	155:71	0:0	8	{
water	156:12	0:0	8	src
op	156:16	0:0	8	=
water	156:18	0:0	8	rpng2_info
op	156:28	0:0	8	.
water	156:29	0:0	8	row_pointers
op	156:41	0:0	8	[
water	156:42	0:0	8	row
op	156:45	0:0	8	]
water	156:46	0:0	8	;
if	157:12	158:48	8	(bg_image)
cond	157:16	157:16	9	bg_image
water	157:16	0:0	10	bg_image
stmts	158:16	158:48	9	
water	158:16	0:0	10	src2
op	158:21	0:0	10	=
water	158:23	0:0	10	bg_data
op	158:31	0:0	10	+
water	158:33	0:0	10	row
op	158:36	0:0	10	*
water	158:37	0:0	10	bg_rowbytes
water	158:48	0:0	10	;
water	159:12	0:0	8	dest
op	159:17	0:0	8	=
water	159:19	0:0	8	ximage
op	159:25	0:0	8	->
water	159:27	0:0	8	data
op	159:32	0:0	8	+
water	159:34	0:0	8	row
op	159:37	0:0	8	*
water	159:38	0:0	8	ximage_rowbytes
water	159:53	0:0	8	;
if	160:12	175:12	8	(rpng2_info . channels == 3)
cond	160:16	160:39	9	rpng2_info . channels == 3
water	160:16	0:0	10	rpng2_info
op	160:26	0:0	10	.
water	160:27	0:0	10	channels
op	160:36	0:0	10	==
water	160:39	0:0	10	3
stmts	160:42	175:12	9	
water	160:42	0:0	10	{
for	161:16	174:16	10	(i = rpng2_info . width ;i > 0;-- i)
forinit	161:21	161:41	11	i = rpng2_info . width ;
water	161:21	0:0	12	i
op	161:23	0:0	12	=
water	161:25	0:0	12	rpng2_info
op	161:35	0:0	12	.
water	161:36	0:0	12	width
water	161:41	0:0	12	;
cond	161:44	161:48	11	i > 0
water	161:44	0:0	12	i
op	161:46	0:0	12	>
water	161:48	0:0	12	0
forexpr	161:52	161:54	11	-- i
op	161:52	0:0	12	--
water	161:54	0:0	12	i
stmts	161:57	174:16	11	
water	161:57	0:0	12	{
water	162:20	0:0	12	red
op	162:26	0:0	12	=
water	162:28	0:0	12	(
call	162:29	162:39	12	(ush)
arg	162:35	162:39	13	*src
op	162:35	0:0	14	*
water	162:36	0:0	14	src
op	162:41	0:0	12	<<
water	162:44	0:0	12	8
water	162:45	0:0	12	)
water	162:46	0:0	12	;
op	163:20	0:0	12	++
water	163:22	0:0	12	src
water	163:25	0:0	12	;
water	164:20	0:0	12	green
op	164:26	0:0	12	=
water	164:28	0:0	12	(
call	164:29	164:39	12	(ush)
arg	164:35	164:39	13	*src
op	164:35	0:0	14	*
water	164:36	0:0	14	src
op	164:41	0:0	12	<<
water	164:44	0:0	12	8
water	164:45	0:0	12	)
water	164:46	0:0	12	;
op	165:20	0:0	12	++
water	165:22	0:0	12	src
water	165:25	0:0	12	;
water	166:20	0:0	12	blue
op	166:26	0:0	12	=
water	166:28	0:0	12	(
call	166:29	166:39	12	(ush)
arg	166:35	166:39	13	*src
op	166:35	0:0	14	*
water	166:36	0:0	14	src
op	166:41	0:0	12	<<
water	166:44	0:0	12	8
water	166:45	0:0	12	)
water	166:46	0:0	12	;
op	167:20	0:0	12	++
water	167:22	0:0	12	src
water	167:25	0:0	12	;
water	168:20	0:0	12	pixel
op	168:26	0:0	12	=
water	168:28	0:0	12	(
water	168:29	0:0	12	(
water	168:30	0:0	12	red
op	168:36	0:0	12	>>
water	168:39	0:0	12	RShift
water	168:45	0:0	12	)
op	168:47	0:0	12	&
water	168:49	0:0	12	RMask
water	168:54	0:0	12	)
op	168:56	0:0	12	|
water	169:28	0:0	12	(
water	169:29	0:0	12	(
water	169:30	0:0	12	green
op	169:36	0:0	12	>>
water	169:39	0:0	12	GShift
water	169:45	0:0	12	)
op	169:47	0:0	12	&
water	169:49	0:0	12	GMask
water	169:54	0:0	12	)
op	169:56	0:0	12	|
water	170:28	0:0	12	(
water	170:29	0:0	12	(
water	170:30	0:0	12	blue
op	170:36	0:0	12	>>
water	170:39	0:0	12	BShift
water	170:45	0:0	12	)
op	170:47	0:0	12	&
water	170:49	0:0	12	BMask
water	170:54	0:0	12	)
water	170:55	0:0	12	;
op	172:20	0:0	12	*
water	172:21	0:0	12	dest
op	172:25	0:0	12	++
op	172:28	0:0	12	=
call	172:30	172:57	12	(char)
arg	172:37	172:57	13	(pixel>>8)&0xff
water	172:37	0:0	14	(
water	172:38	0:0	14	pixel
op	172:44	0:0	14	>>
water	172:48	0:0	14	8
water	172:49	0:0	14	)
op	172:51	0:0	14	&
water	172:53	0:0	14	0
water	172:54	0:0	14	xff
water	172:58	0:0	12	;
op	173:20	0:0	12	*
water	173:21	0:0	12	dest
op	173:25	0:0	12	++
op	173:28	0:0	12	=
call	173:30	173:57	12	(char)
arg	173:38	173:57	13	pixel&0xff
water	173:38	0:0	14	pixel
op	173:51	0:0	14	&
water	173:53	0:0	14	0
water	173:54	0:0	14	xff
water	173:58	0:0	12	;
water	174:16	0:0	12	}
water	175:12	0:0	10	}
else	175:14	212:12	8
stmts	175:20	212:12	9	
water	175:20	0:0	10	{
for	176:16	211:16	10	(i = rpng2_info . width ;i > 0;-- i)
forinit	176:21	176:41	11	i = rpng2_info . width ;
water	176:21	0:0	12	i
op	176:23	0:0	12	=
water	176:25	0:0	12	rpng2_info
op	176:35	0:0	12	.
water	176:36	0:0	12	width
water	176:41	0:0	12	;
cond	176:44	176:48	11	i > 0
water	176:44	0:0	12	i
op	176:46	0:0	12	>
water	176:48	0:0	12	0
forexpr	176:52	176:54	11	-- i
op	176:52	0:0	12	--
water	176:54	0:0	12	i
stmts	176:57	211:16	11	
water	176:57	0:0	12	{
water	177:20	0:0	12	r
op	177:22	0:0	12	=
op	177:24	0:0	12	*
water	177:25	0:0	12	src
op	177:28	0:0	12	++
water	177:30	0:0	12	;
water	178:20	0:0	12	g
op	178:22	0:0	12	=
op	178:24	0:0	12	*
water	178:25	0:0	12	src
op	178:28	0:0	12	++
water	178:30	0:0	12	;
water	179:20	0:0	12	b
op	179:22	0:0	12	=
op	179:24	0:0	12	*
water	179:25	0:0	12	src
op	179:28	0:0	12	++
water	179:30	0:0	12	;
water	180:20	0:0	12	a
op	180:22	0:0	12	=
op	180:24	0:0	12	*
water	180:25	0:0	12	src
op	180:28	0:0	12	++
water	180:30	0:0	12	;
if	181:20	185:20	12	(bg_image)
cond	181:24	181:24	13	bg_image
water	181:24	0:0	14	bg_image
stmts	181:34	185:20	13	
water	181:34	0:0	14	{
water	182:24	0:0	14	bg_red
op	182:33	0:0	14	=
op	182:35	0:0	14	*
water	182:36	0:0	14	src2
op	182:40	0:0	14	++
water	182:42	0:0	14	;
water	183:24	0:0	14	bg_green
op	183:33	0:0	14	=
op	183:35	0:0	14	*
water	183:36	0:0	14	src2
op	183:40	0:0	14	++
water	183:42	0:0	14	;
water	184:24	0:0	14	bg_blue
op	184:33	0:0	14	=
op	184:35	0:0	14	*
water	184:36	0:0	14	src2
op	184:40	0:0	14	++
water	184:42	0:0	14	;
water	185:20	0:0	14	}
if	186:20	190:20	12	(a == 255)
cond	186:24	186:29	13	a == 255
water	186:24	0:0	14	a
op	186:26	0:0	14	==
water	186:29	0:0	14	255
stmts	186:34	190:20	13	
water	186:34	0:0	14	{
water	187:24	0:0	14	red
op	187:30	0:0	14	=
water	187:32	0:0	14	(
water	187:33	0:0	14	(
water	187:34	0:0	14	ush
water	187:37	0:0	14	)
water	187:38	0:0	14	r
op	187:40	0:0	14	<<
water	187:43	0:0	14	8
water	187:44	0:0	14	)
water	187:45	0:0	14	;
water	188:24	0:0	14	green
op	188:30	0:0	14	=
water	188:32	0:0	14	(
water	188:33	0:0	14	(
water	188:34	0:0	14	ush
water	188:37	0:0	14	)
water	188:38	0:0	14	g
op	188:40	0:0	14	<<
water	188:43	0:0	14	8
water	188:44	0:0	14	)
water	188:45	0:0	14	;
water	189:24	0:0	14	blue
op	189:30	0:0	14	=
water	189:32	0:0	14	(
water	189:33	0:0	14	(
water	189:34	0:0	14	ush
water	189:37	0:0	14	)
water	189:38	0:0	14	b
op	189:40	0:0	14	<<
water	189:43	0:0	14	8
water	189:44	0:0	14	)
water	189:45	0:0	14	;
water	190:20	0:0	14	}
else	190:22	194:20	12
stmts	190:27	194:20	13	
if	190:27	194:20	14	(a == 0)
cond	190:31	190:36	15	a == 0
water	190:31	0:0	16	a
op	190:33	0:0	16	==
water	190:36	0:0	16	0
stmts	190:39	194:20	15	
water	190:39	0:0	16	{
water	191:24	0:0	16	red
op	191:30	0:0	16	=
water	191:32	0:0	16	(
water	191:33	0:0	16	(
water	191:34	0:0	16	ush
water	191:37	0:0	16	)
water	191:38	0:0	16	bg_red
op	191:47	0:0	16	<<
water	191:50	0:0	16	8
water	191:51	0:0	16	)
water	191:52	0:0	16	;
water	192:24	0:0	16	green
op	192:30	0:0	16	=
water	192:32	0:0	16	(
water	192:33	0:0	16	(
water	192:34	0:0	16	ush
water	192:37	0:0	16	)
water	192:38	0:0	16	bg_green
op	192:47	0:0	16	<<
water	192:50	0:0	16	8
water	192:51	0:0	16	)
water	192:52	0:0	16	;
water	193:24	0:0	16	blue
op	193:30	0:0	16	=
water	193:32	0:0	16	(
water	193:33	0:0	16	(
water	193:34	0:0	16	ush
water	193:37	0:0	16	)
water	193:38	0:0	16	bg_blue
op	193:47	0:0	16	<<
water	193:50	0:0	16	8
water	193:51	0:0	16	)
water	193:52	0:0	16	;
water	194:20	0:0	16	}
else	194:22	204:20	12
stmts	194:27	204:20	13	
water	194:27	0:0	14	{
call	198:24	198:55	14	alpha_composite
arg	198:40	198:41	15	r
water	198:40	0:0	16	r
arg	198:43	198:44	15	r
water	198:43	0:0	16	r
arg	198:46	198:47	15	a
water	198:46	0:0	16	a
arg	198:49	198:55	15	bg_red
water	198:49	0:0	16	bg_red
water	198:56	0:0	14	;
call	199:24	199:57	14	alpha_composite
arg	199:40	199:41	15	g
water	199:40	0:0	16	g
arg	199:43	199:44	15	g
water	199:43	0:0	16	g
arg	199:46	199:47	15	a
water	199:46	0:0	16	a
arg	199:49	199:57	15	bg_green
water	199:49	0:0	16	bg_green
water	199:58	0:0	14	;
call	200:24	200:56	14	alpha_composite
arg	200:40	200:41	15	b
water	200:40	0:0	16	b
arg	200:43	200:44	15	b
water	200:43	0:0	16	b
arg	200:46	200:47	15	a
water	200:46	0:0	16	a
arg	200:49	200:56	15	bg_blue
water	200:49	0:0	16	bg_blue
water	200:57	0:0	14	;
water	201:24	0:0	14	red
op	201:30	0:0	14	=
water	201:32	0:0	14	(
water	201:33	0:0	14	(
water	201:34	0:0	14	ush
water	201:37	0:0	14	)
water	201:38	0:0	14	r
op	201:40	0:0	14	<<
water	201:43	0:0	14	8
water	201:44	0:0	14	)
water	201:45	0:0	14	;
water	202:24	0:0	14	green
op	202:30	0:0	14	=
water	202:32	0:0	14	(
water	202:33	0:0	14	(
water	202:34	0:0	14	ush
water	202:37	0:0	14	)
water	202:38	0:0	14	g
op	202:40	0:0	14	<<
water	202:43	0:0	14	8
water	202:44	0:0	14	)
water	202:45	0:0	14	;
water	203:24	0:0	14	blue
op	203:30	0:0	14	=
water	203:32	0:0	14	(
water	203:33	0:0	14	(
water	203:34	0:0	14	ush
water	203:37	0:0	14	)
water	203:38	0:0	14	b
op	203:40	0:0	14	<<
water	203:43	0:0	14	8
water	203:44	0:0	14	)
water	203:45	0:0	14	;
water	204:20	0:0	14	}
water	205:20	0:0	12	pixel
op	205:26	0:0	12	=
water	205:28	0:0	12	(
water	205:29	0:0	12	(
water	205:30	0:0	12	red
op	205:36	0:0	12	>>
water	205:39	0:0	12	RShift
water	205:45	0:0	12	)
op	205:47	0:0	12	&
water	205:49	0:0	12	RMask
water	205:54	0:0	12	)
op	205:56	0:0	12	|
water	206:28	0:0	12	(
water	206:29	0:0	12	(
water	206:30	0:0	12	green
op	206:36	0:0	12	>>
water	206:39	0:0	12	GShift
water	206:45	0:0	12	)
op	206:47	0:0	12	&
water	206:49	0:0	12	GMask
water	206:54	0:0	12	)
op	206:56	0:0	12	|
water	207:28	0:0	12	(
water	207:29	0:0	12	(
water	207:30	0:0	12	blue
op	207:36	0:0	12	>>
water	207:39	0:0	12	BShift
water	207:45	0:0	12	)
op	207:47	0:0	12	&
water	207:49	0:0	12	BMask
water	207:54	0:0	12	)
water	207:55	0:0	12	;
op	209:20	0:0	12	*
water	209:21	0:0	12	dest
op	209:25	0:0	12	++
op	209:28	0:0	12	=
call	209:30	209:57	12	(char)
arg	209:37	209:57	13	(pixel>>8)&0xff
water	209:37	0:0	14	(
water	209:38	0:0	14	pixel
op	209:44	0:0	14	>>
water	209:48	0:0	14	8
water	209:49	0:0	14	)
op	209:51	0:0	14	&
water	209:53	0:0	14	0
water	209:54	0:0	14	xff
water	209:58	0:0	12	;
op	210:20	0:0	12	*
water	210:21	0:0	12	dest
op	210:25	0:0	12	++
op	210:28	0:0	12	=
call	210:30	210:57	12	(char)
arg	210:38	210:57	13	pixel&0xff
water	210:38	0:0	14	pixel
op	210:51	0:0	14	&
water	210:53	0:0	14	0
water	210:54	0:0	14	xff
water	210:58	0:0	12	;
water	211:16	0:0	12	}
water	212:12	0:0	10	}
if	214:12	219:12	8	(( ( row + 1 ) & 0 xf ) == 0)
cond	214:16	214:35	9	( ( row + 1 ) & 0 xf ) == 0
water	214:16	0:0	10	(
water	214:17	0:0	10	(
water	214:18	0:0	10	row
op	214:21	0:0	10	+
water	214:22	0:0	10	1
water	214:23	0:0	10	)
op	214:25	0:0	10	&
water	214:27	0:0	10	0
water	214:28	0:0	10	xf
water	214:30	0:0	10	)
op	214:32	0:0	10	==
water	214:35	0:0	10	0
stmts	214:38	219:12	9	
water	214:38	0:0	10	{
call	215:16	216:52	10	XPutImage
arg	215:26	215:33	11	display
water	215:26	0:0	12	display
arg	215:35	215:41	11	window
water	215:35	0:0	12	window
arg	215:43	215:45	11	gc
water	215:43	0:0	12	gc
arg	215:47	215:53	11	ximage
water	215:47	0:0	12	ximage
arg	215:55	215:56	11	0
water	215:55	0:0	12	0
arg	215:58	215:70	11	(int)lastrow
water	215:58	0:0	12	(
water	215:59	0:0	12	int
water	215:62	0:0	12	)
water	215:63	0:0	12	lastrow
arg	215:72	215:73	11	0
water	215:72	0:0	12	0
arg	216:18	216:30	11	(int)lastrow
water	216:18	0:0	12	(
water	216:19	0:0	12	int
water	216:22	0:0	12	)
water	216:23	0:0	12	lastrow
arg	216:32	216:48	11	rpng2_info.width
water	216:32	0:0	12	rpng2_info
op	216:42	0:0	12	.
water	216:43	0:0	12	width
arg	216:50	216:52	11	16
water	216:50	0:0	12	16
water	216:53	0:0	10	;
call	217:16	217:30	10	XFlush
arg	217:23	217:30	11	display
water	217:23	0:0	12	display
water	217:31	0:0	10	;
water	218:16	0:0	10	lastrow
op	218:24	0:0	10	=
water	218:26	0:0	10	row
op	218:30	0:0	10	+
water	218:32	0:0	10	1
water	218:33	0:0	10	;
water	219:12	0:0	10	}
water	220:8	0:0	8	}
water	221:4	0:0	6	}
else	221:6	223:4	2
stmts	221:12	223:4	3	
water	221:12	0:0	4	{
water	0:0	0:0	4	STATEMENTS
water	223:4	0:0	4	}
water	224:4	0:0	2	Trace
water	224:9	0:0	2	(
water	224:10	0:0	2	(
water	224:11	0:0	2	stderr
water	224:17	0:0	2	,
water	224:19	0:0	2	"calling final XPutImage()\n"
water	224:48	0:0	2	)
water	224:49	0:0	2	)
if	225:4	229:4	2	(lastrow < startrow + height)
cond	225:8	225:27	3	lastrow < startrow + height
water	225:8	0:0	4	lastrow
op	225:16	0:0	4	<
water	225:18	0:0	4	startrow
op	225:26	0:0	4	+
water	225:27	0:0	4	height
stmts	225:35	229:4	3	
water	225:35	0:0	4	{
call	226:8	227:67	4	XPutImage
arg	226:18	226:25	5	display
water	226:18	0:0	6	display
arg	226:27	226:33	5	window
water	226:27	0:0	6	window
arg	226:35	226:37	5	gc
water	226:35	0:0	6	gc
arg	226:39	226:45	5	ximage
water	226:39	0:0	6	ximage
arg	226:47	226:48	5	0
water	226:47	0:0	6	0
arg	226:50	226:62	5	(int)lastrow
water	226:50	0:0	6	(
water	226:51	0:0	6	int
water	226:54	0:0	6	)
water	226:55	0:0	6	lastrow
arg	226:64	226:65	5	0
water	226:64	0:0	6	0
arg	227:10	227:22	5	(int)lastrow
water	227:10	0:0	6	(
water	227:11	0:0	6	int
water	227:14	0:0	6	)
water	227:15	0:0	6	lastrow
arg	227:24	227:40	5	rpng2_info.width
water	227:24	0:0	6	rpng2_info
op	227:34	0:0	6	.
water	227:35	0:0	6	width
arg	227:42	227:67	5	rpng2_info.height-lastrow
water	227:42	0:0	6	rpng2_info
op	227:52	0:0	6	.
water	227:53	0:0	6	height
op	227:59	0:0	6	-
water	227:60	0:0	6	lastrow
water	227:68	0:0	4	;
call	228:8	228:22	4	XFlush
arg	228:15	228:22	5	display
water	228:15	0:0	6	display
water	228:23	0:0	4	;
water	229:4	0:0	4	}
