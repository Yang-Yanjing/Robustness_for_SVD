decl	1:7	1:26	0	int	global_showmode
func	2:4	306:0	0	WINAPI	WinMain
params	2:18	0:0	1	
param	2:19	2:34	2	HINSTANCE	hInst
param	2:36	2:55	2	HINSTANCE	hPrevInst
param	2:57	2:65	2	PSTR	cmd
param	2:67	2:79	2	int	showmode
stmnts	0:0	305:21	1	
decl	4:4	4:20	2	char	*args[1024]
decl	5:4	5:22	2	char	**argv
op	5:16	0:0	2	=
water	5:18	0:0	2	args
decl	6:4	6:30	2	char	*p
water	6:11	0:0	2	,
decl	6:4	6:30	2	char	*q
water	6:15	0:0	2	,
decl	6:4	6:30	2	char	*bgstr
op	6:24	0:0	2	=
water	6:26	0:0	2	NULL
decl	7:4	7:16	2	int	argc
op	7:13	0:0	2	=
water	7:15	0:0	2	0
decl	8:4	8:22	2	int	rc
water	8:10	0:0	2	,
decl	8:4	8:22	2	int	alen
water	8:16	0:0	2	,
decl	8:4	8:22	2	int	flen
decl	9:4	9:17	2	int	error
op	9:14	0:0	2	=
water	9:16	0:0	2	0
decl	10:4	10:22	2	int	timing
op	10:15	0:0	2	=
water	10:17	0:0	2	FALSE
decl	11:4	11:23	2	int	have_bg
op	11:16	0:0	2	=
water	11:18	0:0	2	FALSE
decl	12:4	12:23	2	double	LUT_exponent
decl	13:4	13:29	2	double	CRT_exponent
op	13:24	0:0	2	=
water	13:26	0:0	2	2
op	13:27	0:0	2	.
water	13:28	0:0	2	2
decl	14:4	14:35	2	double	default_display_exponent
decl	15:4	15:11	2	MSG	msg
water	19:4	0:0	2	global_hInst
op	19:17	0:0	2	=
water	19:19	0:0	2	hInst
water	19:24	0:0	2	;
water	20:4	0:0	2	global_showmode
op	20:20	0:0	2	=
water	20:22	0:0	2	showmode
water	20:30	0:0	2	;
water	21:4	0:0	2	filename
op	21:13	0:0	2	=
water	21:15	0:0	2	(
water	21:16	0:0	2	char
op	21:21	0:0	2	*
water	21:22	0:0	2	)
water	21:23	0:0	2	NULL
water	21:27	0:0	2	;
call	22:4	22:48	2	memset
arg	22:11	22:22	3	&rpng2_info
op	22:11	0:0	4	&
water	22:12	0:0	4	rpng2_info
arg	22:24	22:25	3	0
water	22:24	0:0	4	0
arg	22:27	22:48	3	sizeof(mainprog_info)
op	22:27	0:0	4	sizeof
water	22:33	0:0	4	(
water	22:34	0:0	4	mainprog_info
water	22:47	0:0	4	)
water	22:49	0:0	2	;
call	28:4	28:17	2	AllocConsole
water	28:18	0:0	2	;
call	29:4	29:34	2	freopen
arg	29:12	29:21	3	"CONOUT$"
water	29:12	0:0	4	"CONOUT$"
arg	29:23	29:26	3	"a"
water	29:23	0:0	4	"a"
arg	29:28	29:34	3	stderr
water	29:28	0:0	4	stderr
water	29:35	0:0	2	;
call	30:4	30:34	2	freopen
arg	30:12	30:21	3	"CONOUT$"
water	30:12	0:0	4	"CONOUT$"
arg	30:23	30:26	3	"a"
water	30:23	0:0	4	"a"
arg	30:28	30:34	3	stdout
water	30:28	0:0	4	stdout
water	30:35	0:0	2	;
water	40:4	0:0	2	LUT_exponent
op	40:17	0:0	2	=
water	40:19	0:0	2	1
op	40:20	0:0	2	.
water	40:21	0:0	2	0
op	40:23	0:0	2	/
water	40:25	0:0	2	2
op	40:26	0:0	2	.
water	40:27	0:0	2	2
water	40:28	0:0	2	;
water	46:4	0:0	2	LUT_exponent
op	46:17	0:0	2	=
water	46:19	0:0	2	1
op	46:20	0:0	2	.
water	46:21	0:0	2	0
op	46:23	0:0	2	/
water	46:25	0:0	2	1
op	46:26	0:0	2	.
water	46:27	0:0	2	7
water	46:28	0:0	2	;
water	49:4	0:0	2	infile
op	49:11	0:0	2	=
call	49:13	49:55	2	fopen
arg	49:19	49:50	3	"/etc/config/system.glGammaVal"
water	49:19	0:0	4	"/etc/config/system.glGammaVal"
arg	49:52	49:55	3	"r"
water	49:52	0:0	4	"r"
water	49:56	0:0	2	;
if	50:4	57:4	2	(infile)
cond	50:8	50:8	3	infile
water	50:8	0:0	4	infile
stmts	50:16	57:4	3	
water	50:16	0:0	4	{
decl	51:8	51:24	4	double	sgi_gamma
call	52:8	52:33	4	fgets
arg	52:14	52:21	5	tmpline
water	52:14	0:0	6	tmpline
arg	52:23	52:25	5	80
water	52:23	0:0	6	80
arg	52:27	52:33	5	infile
water	52:27	0:0	6	infile
water	52:34	0:0	4	;
call	53:8	53:21	4	fclose
arg	53:15	53:21	5	infile
water	53:15	0:0	6	infile
water	53:22	0:0	4	;
water	54:8	0:0	4	sgi_gamma
op	54:18	0:0	4	=
call	54:20	54:32	4	atof
arg	54:25	54:32	5	tmpline
water	54:25	0:0	6	tmpline
water	54:33	0:0	4	;
if	55:8	56:42	4	(sgi_gamma > 0 . 0)
cond	55:12	55:26	5	sgi_gamma > 0 . 0
water	55:12	0:0	6	sgi_gamma
op	55:22	0:0	6	>
water	55:24	0:0	6	0
op	55:25	0:0	6	.
water	55:26	0:0	6	0
stmts	56:12	56:42	5	
water	56:12	0:0	6	LUT_exponent
op	56:25	0:0	6	=
water	56:27	0:0	6	1
op	56:28	0:0	6	.
water	56:29	0:0	6	0
op	56:31	0:0	6	/
water	56:33	0:0	6	sgi_gamma
water	56:42	0:0	6	;
water	57:4	0:0	4	}
water	59:4	0:0	2	LUT_exponent
op	59:17	0:0	2	=
water	59:19	0:0	2	1
op	59:20	0:0	2	.
water	59:21	0:0	2	8
op	59:23	0:0	2	/
water	59:25	0:0	2	2
op	59:26	0:0	2	.
water	59:27	0:0	2	61
water	59:29	0:0	2	;
water	65:4	0:0	2	LUT_exponent
op	65:17	0:0	2	=
water	65:19	0:0	2	1
op	65:20	0:0	2	.
water	65:21	0:0	2	0
water	65:22	0:0	2	;
water	68:4	0:0	2	default_display_exponent
op	68:29	0:0	2	=
water	68:31	0:0	2	LUT_exponent
op	68:44	0:0	2	*
water	68:46	0:0	2	CRT_exponent
water	68:58	0:0	2	;
if	73:4	74:45	2	(( p =getenv ("SCREEN_GAMMA" ) ) != NULL)
cond	73:8	73:40	3	( p =getenv ("SCREEN_GAMMA" ) ) != NULL
water	73:8	0:0	4	(
water	73:9	0:0	4	p
op	73:11	0:0	4	=
call	73:13	73:34	4	getenv
arg	73:20	73:34	5	"SCREEN_GAMMA"
water	73:20	0:0	6	"SCREEN_GAMMA"
water	73:35	0:0	4	)
op	73:37	0:0	4	!=
water	73:40	0:0	4	NULL
stmts	74:8	74:45	3	
water	74:8	0:0	4	rpng2_info
op	74:18	0:0	4	.
water	74:19	0:0	4	display_exponent
op	74:36	0:0	4	=
call	74:38	74:44	4	atof
arg	74:43	74:44	5	p
water	74:43	0:0	6	p
water	74:45	0:0	4	;
else	75:4	76:62	2
stmts	76:8	76:62	3	
water	76:8	0:0	4	rpng2_info
op	76:18	0:0	4	.
water	76:19	0:0	4	display_exponent
op	76:36	0:0	4	=
water	76:38	0:0	4	default_display_exponent
water	76:62	0:0	4	;
water	80:4	0:0	2	argv
op	80:8	0:0	2	[
water	80:9	0:0	2	argc
op	80:13	0:0	2	++
op	80:15	0:0	2	]
op	80:17	0:0	2	=
water	80:19	0:0	2	PROGNAME
water	80:27	0:0	2	;
water	81:4	0:0	2	p
op	81:6	0:0	2	=
water	81:8	0:0	2	cmd
water	81:11	0:0	2	;
for	82:4	97:4	2	(;;)
forinit	82:9	82:9	3	;
water	82:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	82:13	97:4	3	
water	82:13	0:0	4	{
if	83:8	85:16	4	(* p == ' ')
cond	83:12	83:18	5	* p == ' '
op	83:12	0:0	6	*
water	83:13	0:0	6	p
op	83:15	0:0	6	==
water	83:18	0:0	6	' '
stmts	84:12	85:16	5	
while	84:12	85:16	6	(* ++ p == ' ')
cond	84:19	84:27	7	* ++ p == ' '
op	84:19	0:0	8	*
op	84:20	0:0	8	++
water	84:22	0:0	8	p
op	84:24	0:0	8	==
water	84:27	0:0	8	' '
stmts	85:16	85:16	7	
water	85:16	0:0	8	;
if	87:8	88:17	4	(* p == '\0')
cond	87:12	87:18	5	* p == '\0'
op	87:12	0:0	6	*
water	87:13	0:0	6	p
op	87:15	0:0	6	==
water	87:18	0:0	6	'\0'
stmts	88:12	88:17	5	
break	88:12	88:17	6	
water	89:8	0:0	4	argv
op	89:12	0:0	4	[
water	89:13	0:0	4	argc
op	89:17	0:0	4	++
op	89:19	0:0	4	]
op	89:21	0:0	4	=
water	89:23	0:0	4	q
op	89:25	0:0	4	=
water	89:27	0:0	4	p
water	89:28	0:0	4	;
while	90:8	91:15	4	(* q && * q != ' ')
cond	90:15	90:27	5	* q && * q != ' '
op	90:15	0:0	6	*
water	90:16	0:0	6	q
op	90:18	0:0	6	&&
op	90:21	0:0	6	*
water	90:22	0:0	6	q
op	90:24	0:0	6	!=
water	90:27	0:0	6	' '
stmts	91:12	91:15	5	
op	91:12	0:0	6	++
water	91:14	0:0	6	q
water	91:15	0:0	6	;
if	93:8	94:17	4	(* q == '\0')
cond	93:12	93:18	5	* q == '\0'
op	93:12	0:0	6	*
water	93:13	0:0	6	q
op	93:15	0:0	6	==
water	93:18	0:0	6	'\0'
stmts	94:12	94:17	5	
break	94:12	94:17	6	
op	95:8	0:0	4	*
water	95:9	0:0	4	q
op	95:11	0:0	4	=
water	95:13	0:0	4	'\0'
water	95:17	0:0	4	;
water	96:8	0:0	4	p
op	96:10	0:0	4	=
water	96:12	0:0	4	q
op	96:14	0:0	4	+
water	96:16	0:0	4	1
water	96:17	0:0	4	;
water	97:4	0:0	4	}
water	98:4	0:0	2	argv
op	98:8	0:0	2	[
water	98:9	0:0	2	argc
op	98:13	0:0	2	]
op	98:15	0:0	2	=
water	98:17	0:0	2	NULL
water	98:21	0:0	2	;
while	100:4	143:4	2	(* ++ argv && ! error)
cond	100:11	100:23	3	* ++ argv && ! error
op	100:11	0:0	4	*
op	100:12	0:0	4	++
water	100:14	0:0	4	argv
op	100:19	0:0	4	&&
op	100:22	0:0	4	!
water	100:23	0:0	4	error
stmts	100:30	143:4	3	
water	100:30	0:0	4	{
if	101:8	109:8	4	(!strncmp (* argv ,"-gamma" ,2 ))
cond	101:12	101:39	5	!strncmp (* argv ,"-gamma" ,2 )
op	101:12	0:0	6	!
call	101:13	101:39	6	strncmp
arg	101:21	101:26	7	*argv
op	101:21	0:0	8	*
water	101:22	0:0	8	argv
arg	101:28	101:36	7	"-gamma"
water	101:28	0:0	8	"-gamma"
arg	101:38	101:39	7	2
water	101:38	0:0	8	2
stmts	101:42	109:8	5	
water	101:42	0:0	6	{
if	102:12	103:23	6	(! * ++ argv)
cond	102:16	102:20	7	! * ++ argv
op	102:16	0:0	8	!
op	102:17	0:0	8	*
op	102:18	0:0	8	++
water	102:20	0:0	8	argv
stmts	103:16	103:23	7	
op	103:16	0:0	8	++
water	103:18	0:0	8	error
water	103:23	0:0	8	;
else	104:12	108:12	6
stmts	104:17	108:12	7	
water	104:17	0:0	8	{
water	105:16	0:0	8	rpng2_info
op	105:26	0:0	8	.
water	105:27	0:0	8	display_exponent
op	105:44	0:0	8	=
call	105:46	105:56	8	atof
arg	105:51	105:56	9	*argv
op	105:51	0:0	10	*
water	105:52	0:0	10	argv
water	105:57	0:0	8	;
if	106:16	107:27	8	(rpng2_info . display_exponent <= 0 . 0)
cond	106:20	106:53	9	rpng2_info . display_exponent <= 0 . 0
water	106:20	0:0	10	rpng2_info
op	106:30	0:0	10	.
water	106:31	0:0	10	display_exponent
op	106:48	0:0	10	<=
water	106:51	0:0	10	0
op	106:52	0:0	10	.
water	106:53	0:0	10	0
stmts	107:20	107:27	9	
op	107:20	0:0	10	++
water	107:22	0:0	10	error
water	107:27	0:0	10	;
water	108:12	0:0	8	}
water	109:8	0:0	6	}
else	109:10	121:8	4
stmts	109:15	121:8	5	
if	109:15	121:8	6	(!strncmp (* argv ,"-bgcolor" ,4 ))
cond	109:19	109:48	7	!strncmp (* argv ,"-bgcolor" ,4 )
op	109:19	0:0	8	!
call	109:20	109:48	8	strncmp
arg	109:28	109:33	9	*argv
op	109:28	0:0	10	*
water	109:29	0:0	10	argv
arg	109:35	109:45	9	"-bgcolor"
water	109:35	0:0	10	"-bgcolor"
arg	109:47	109:48	9	4
water	109:47	0:0	10	4
stmts	109:51	121:8	7	
water	109:51	0:0	8	{
if	110:12	111:23	8	(! * ++ argv)
cond	110:16	110:20	9	! * ++ argv
op	110:16	0:0	10	!
op	110:17	0:0	10	*
op	110:18	0:0	10	++
water	110:20	0:0	10	argv
stmts	111:16	111:23	9	
op	111:16	0:0	10	++
water	111:18	0:0	10	error
water	111:23	0:0	10	;
else	112:12	120:12	8
stmts	112:17	120:12	9	
water	112:17	0:0	10	{
water	113:16	0:0	10	bgstr
op	113:22	0:0	10	=
op	113:24	0:0	10	*
water	113:25	0:0	10	argv
water	113:29	0:0	10	;
if	114:16	115:27	10	(strlen (bgstr ) != 7 || bgstr [ 0 ] != '#')
cond	114:20	114:54	11	strlen (bgstr ) != 7 || bgstr [ 0 ] != '#'
call	114:20	114:32	12	strlen
arg	114:27	114:32	13	bgstr
water	114:27	0:0	14	bgstr
op	114:34	0:0	12	!=
water	114:37	0:0	12	7
op	114:39	0:0	12	||
water	114:42	0:0	12	bgstr
op	114:47	0:0	12	[
water	114:48	0:0	12	0
op	114:49	0:0	12	]
op	114:51	0:0	12	!=
water	114:54	0:0	12	'#'
stmts	115:20	115:27	11	
op	115:20	0:0	12	++
water	115:22	0:0	12	error
water	115:27	0:0	12	;
else	116:16	119:16	10
stmts	116:21	119:16	11	
water	116:21	0:0	12	{
water	117:20	0:0	12	have_bg
op	117:28	0:0	12	=
water	117:30	0:0	12	TRUE
water	117:34	0:0	12	;
water	118:20	0:0	12	bg_image
op	118:29	0:0	12	=
water	118:31	0:0	12	FALSE
water	118:36	0:0	12	;
water	119:16	0:0	12	}
water	120:12	0:0	10	}
water	121:8	0:0	8	}
else	121:10	133:8	4
stmts	121:15	133:8	5	
if	121:15	133:8	6	(!strncmp (* argv ,"-bgpat" ,4 ))
cond	121:19	121:46	7	!strncmp (* argv ,"-bgpat" ,4 )
op	121:19	0:0	8	!
call	121:20	121:46	8	strncmp
arg	121:28	121:33	9	*argv
op	121:28	0:0	10	*
water	121:29	0:0	10	argv
arg	121:35	121:43	9	"-bgpat"
water	121:35	0:0	10	"-bgpat"
arg	121:45	121:46	9	4
water	121:45	0:0	10	4
stmts	121:49	133:8	7	
water	121:49	0:0	8	{
if	122:12	123:23	8	(! * ++ argv)
cond	122:16	122:20	9	! * ++ argv
op	122:16	0:0	10	!
op	122:17	0:0	10	*
op	122:18	0:0	10	++
water	122:20	0:0	10	argv
stmts	123:16	123:23	9	
op	123:16	0:0	10	++
water	123:18	0:0	10	error
water	123:23	0:0	10	;
else	124:12	132:12	8
stmts	124:17	132:12	9	
water	124:17	0:0	10	{
water	125:16	0:0	10	pat
op	125:20	0:0	10	=
call	125:22	125:32	10	atoi
arg	125:27	125:32	11	*argv
op	125:27	0:0	12	*
water	125:28	0:0	12	argv
op	125:34	0:0	10	-
water	125:36	0:0	10	1
water	125:37	0:0	10	;
if	126:16	127:27	10	(pat < 0 || pat >= num_bgpat)
cond	126:20	126:38	11	pat < 0 || pat >= num_bgpat
water	126:20	0:0	12	pat
op	126:24	0:0	12	<
water	126:26	0:0	12	0
op	126:28	0:0	12	||
water	126:31	0:0	12	pat
op	126:35	0:0	12	>=
water	126:38	0:0	12	num_bgpat
stmts	127:20	127:27	11	
op	127:20	0:0	12	++
water	127:22	0:0	12	error
water	127:27	0:0	12	;
else	128:16	131:16	10
stmts	128:21	131:16	11	
water	128:21	0:0	12	{
water	129:20	0:0	12	bg_image
op	129:29	0:0	12	=
water	129:31	0:0	12	TRUE
water	129:35	0:0	12	;
water	130:20	0:0	12	have_bg
op	130:28	0:0	12	=
water	130:30	0:0	12	FALSE
water	130:35	0:0	12	;
water	131:16	0:0	12	}
water	132:12	0:0	10	}
water	133:8	0:0	8	}
else	133:10	135:8	4
stmts	133:15	135:8	5	
if	133:15	135:8	6	(!strncmp (* argv ,"-timing" ,2 ))
cond	133:19	133:47	7	!strncmp (* argv ,"-timing" ,2 )
op	133:19	0:0	8	!
call	133:20	133:47	8	strncmp
arg	133:28	133:33	9	*argv
op	133:28	0:0	10	*
water	133:29	0:0	10	argv
arg	133:35	133:44	9	"-timing"
water	133:35	0:0	10	"-timing"
arg	133:46	133:47	9	2
water	133:46	0:0	10	2
stmts	133:50	135:8	7	
water	133:50	0:0	8	{
water	134:12	0:0	8	timing
op	134:19	0:0	8	=
water	134:21	0:0	8	TRUE
water	134:25	0:0	8	;
water	135:8	0:0	8	}
else	135:10	142:8	4
stmts	135:15	142:8	5	
water	135:15	0:0	6	{
if	136:12	140:12	6	(* * argv != '-')
cond	136:16	136:26	7	* * argv != '-'
op	136:16	0:0	8	*
op	136:17	0:0	8	*
water	136:18	0:0	8	argv
op	136:23	0:0	8	!=
water	136:26	0:0	8	'-'
stmts	136:31	140:12	7	
water	136:31	0:0	8	{
water	137:16	0:0	8	filename
op	137:25	0:0	8	=
op	137:27	0:0	8	*
water	137:28	0:0	8	argv
water	137:32	0:0	8	;
if	138:16	139:27	8	(argv [ 1 ])
cond	138:20	138:26	9	argv [ 1 ]
water	138:20	0:0	10	argv
op	138:24	0:0	10	[
water	138:25	0:0	10	1
op	138:26	0:0	10	]
stmts	139:20	139:27	9	
op	139:20	0:0	10	++
water	139:22	0:0	10	error
water	139:27	0:0	10	;
water	140:12	0:0	8	}
else	140:14	141:23	6
stmts	141:16	141:23	7	
op	141:16	0:0	8	++
water	141:18	0:0	8	error
water	141:23	0:0	8	;
water	142:8	0:0	6	}
water	143:4	0:0	4	}
if	144:4	145:15	2	(! filename)
cond	144:8	144:9	3	! filename
op	144:8	0:0	4	!
water	144:9	0:0	4	filename
stmts	145:8	145:15	3	
op	145:8	0:0	4	++
water	145:10	0:0	4	error
water	145:15	0:0	4	;
if	147:4	186:4	2	(error)
cond	147:8	147:8	3	error
water	147:8	0:0	4	error
stmts	147:15	186:4	3	
water	147:15	0:0	4	{
decl	149:8	149:14	4	int	ch
call	151:8	151:70	4	fprintf
arg	151:16	151:22	5	stderr
water	151:16	0:0	6	stderr
arg	151:24	151:42	5	"\n%s %s:  %s\n\n"
water	151:24	0:0	6	"\n%s %s:  %s\n\n"
arg	151:44	151:52	5	PROGNAME
water	151:44	0:0	6	PROGNAME
arg	151:54	151:61	5	VERSION
water	151:54	0:0	6	VERSION
arg	151:63	151:70	5	appname
water	151:63	0:0	6	appname
water	151:71	0:0	4	;
call	152:8	152:30	4	readpng2_version_info
water	152:31	0:0	4	;
water	153:8	0:0	4	fprintf
water	153:15	0:0	4	(
water	153:16	0:0	4	stderr
water	153:22	0:0	4	,
water	153:24	0:0	4	"\n"
water	154:10	0:0	4	"Usage:  %s [-gamma exp] [-bgcolor bg | -bgpat pat] [-timing]\n"
water	155:10	0:0	4	"        %*s file.png\n\n"
water	156:10	0:0	4	"    exp \ttransfer-function exponent (``gamma'') of the display\n"
water	157:10	0:0	4	"\t\t  system in floating-point format (e.g., ``%.1f''); equal\n"
water	158:10	0:0	4	"\t\t  to the product of the lookup-table exponent (varies)\n"
water	159:10	0:0	4	"\t\t  and the CRT exponent (usually 2.2); must be positive\n"
water	160:10	0:0	4	"    bg  \tdesired background color in 7-character hex RGB format\n"
water	161:10	0:0	4	"\t\t  (e.g., ``#ff7700'' for orange:  same as HTML colors);\n"
water	162:10	0:0	4	"\t\t  used with transparent images; overrides -bgpat option\n"
water	163:10	0:0	4	"    pat \tdesired background pattern number (1-%d); used with\n"
water	164:10	0:0	4	"\t\t  transparent images; overrides -bgcolor option\n"
water	165:10	0:0	4	"    -timing\tenables delay for every block read, to simulate modem\n"
water	166:10	0:0	4	"\t\t  download of image (~36 Kbps)\n"
water	167:10	0:0	4	"\nPress Q, Esc or mouse button 1 after image is displayed to quit.\n"
water	169:10	0:0	4	"Press Q or Esc to quit this usage screen. "
water	169:54	0:0	4	,
water	171:10	0:0	4	,
water	173:10	0:0	4	PROGNAME
water	173:18	0:0	4	,
op	175:4	0:0	4	!
call	175:5	176:14	4	(defined(__CYGWIN__)||defined(__MINGW32__))
arg	176:11	176:14	5	int
water	176:11	0:0	6	int
call	176:15	176:30	4	strlen
arg	176:22	176:30	5	PROGNAME
water	176:22	0:0	6	PROGNAME
water	176:31	0:0	4	,
water	176:33	0:0	4	" "
water	176:36	0:0	4	,
water	178:10	0:0	4	(
water	178:11	0:0	4	int
water	178:14	0:0	4	)
call	178:15	178:30	4	strlen
arg	178:22	178:30	5	PROGNAME
water	178:22	0:0	6	PROGNAME
water	178:31	0:0	4	,
water	178:33	0:0	4	" "
water	178:36	0:0	4	,
water	178:38	0:0	4	default_display_exponent
water	178:62	0:0	4	,
water	178:64	0:0	4	num_bgpat
water	178:73	0:0	4	)
water	178:74	0:0	4	;
call	179:8	179:21	4	fflush
arg	179:15	179:21	5	stderr
water	179:15	0:0	6	stderr
water	179:22	0:0	4	;
do	181:8	182:25	4	(ch != 'q' && ch != 'Q' && ch != 0 x1B)
cond	183:15	183:48	5	ch != 'q' && ch != 'Q' && ch != 0 x1B
water	183:15	0:0	6	ch
op	183:18	0:0	6	!=
water	183:21	0:0	6	'q'
op	183:25	0:0	6	&&
water	183:28	0:0	6	ch
op	183:31	0:0	6	!=
water	183:34	0:0	6	'Q'
op	183:38	0:0	6	&&
water	183:41	0:0	6	ch
op	183:44	0:0	6	!=
water	183:47	0:0	6	0
water	183:48	0:0	6	x1B
stmts	182:12	182:25	5	
water	182:12	0:0	6	ch
op	182:15	0:0	6	=
call	182:17	182:24	6	_getch
water	182:25	0:0	6	;
water	183:52	0:0	4	;
call	185:8	185:14	4	exit
arg	185:13	185:14	5	1
water	185:13	0:0	6	1
water	185:15	0:0	4	;
water	186:4	0:0	4	}
if	187:4	190:4	2	(! ( infile =fopen (filename ,"rb" ) ))
cond	187:8	187:40	3	! ( infile =fopen (filename ,"rb" ) )
op	187:8	0:0	4	!
water	187:9	0:0	4	(
water	187:10	0:0	4	infile
op	187:17	0:0	4	=
call	187:19	187:39	4	fopen
arg	187:25	187:33	5	filename
water	187:25	0:0	6	filename
arg	187:35	187:39	5	"rb"
water	187:35	0:0	6	"rb"
water	187:40	0:0	4	)
stmts	187:43	190:4	3	
water	187:43	0:0	4	{
call	188:8	188:74	4	fprintf
arg	188:16	188:22	5	stderr
water	188:16	0:0	6	stderr
arg	188:24	188:64	5	PROGNAME":  can't open PNG file [%s]\n"
water	188:24	0:0	6	PROGNAME
water	188:33	0:0	6	":  can't open PNG file [%s]\n"
arg	188:66	188:74	5	filename
water	188:66	0:0	6	filename
water	188:75	0:0	4	;
op	189:8	0:0	4	++
water	189:10	0:0	4	error
water	189:15	0:0	4	;
water	190:4	0:0	4	}
else	190:6	215:4	2
stmts	190:11	215:4	3	
water	190:11	0:0	4	{
water	191:8	0:0	4	incount
op	191:16	0:0	4	=
call	191:18	191:51	4	fread
arg	191:24	191:29	5	inbuf
water	191:24	0:0	6	inbuf
arg	191:31	191:32	5	1
water	191:31	0:0	6	1
arg	191:34	191:43	5	INBUFSIZE
water	191:34	0:0	6	INBUFSIZE
arg	191:45	191:51	5	infile
water	191:45	0:0	6	infile
water	191:52	0:0	4	;
if	192:8	197:8	4	(incount < 8 || !readpng2_check_sig (inbuf ,8 ))
cond	192:12	192:55	5	incount < 8 || !readpng2_check_sig (inbuf ,8 )
water	192:12	0:0	6	incount
op	192:20	0:0	6	<
water	192:22	0:0	6	8
op	192:24	0:0	6	||
op	192:27	0:0	6	!
call	192:28	192:55	6	readpng2_check_sig
arg	192:47	192:52	7	inbuf
water	192:47	0:0	8	inbuf
arg	192:54	192:55	7	8
water	192:54	0:0	8	8
stmts	192:58	197:8	5	
water	192:58	0:0	6	{
call	193:12	195:22	6	fprintf
arg	193:20	193:26	7	stderr
water	193:20	0:0	8	stderr
arg	193:28	194:64	7	PROGNAME":  [%s] is not a PNG file: incorrect signature\n"
water	193:28	0:0	8	PROGNAME
water	194:14	0:0	8	":  [%s] is not a PNG file: incorrect signature\n"
arg	195:14	195:22	7	filename
water	195:14	0:0	8	filename
water	195:23	0:0	6	;
op	196:12	0:0	6	++
water	196:14	0:0	6	error
water	196:19	0:0	6	;
water	197:8	0:0	6	}
else	197:10	212:8	4
stmts	197:15	212:8	5	
if	197:15	212:8	6	(( rc =readpng2_init (& rpng2_info ) ) != 0)
cond	197:19	197:56	7	( rc =readpng2_init (& rpng2_info ) ) != 0
water	197:19	0:0	8	(
water	197:20	0:0	8	rc
op	197:23	0:0	8	=
call	197:25	197:50	8	readpng2_init
arg	197:39	197:50	9	&rpng2_info
op	197:39	0:0	10	&
water	197:40	0:0	10	rpng2_info
water	197:51	0:0	8	)
op	197:53	0:0	8	!=
water	197:56	0:0	8	0
stmts	197:59	212:8	7	
water	197:59	0:0	8	{
switch	198:12	210:12	8	(rc)
cond	198:20	198:20	9	rc
water	198:20	0:0	10	rc
stmts	198:24	210:12	9	
water	198:24	0:0	10	{
label	199:16	199:22	10	case 2 :
call	200:20	201:73	10	fprintf
arg	200:28	200:34	11	stderr
water	200:28	0:0	12	stderr
arg	200:36	201:63	11	PROGNAME":  [%s] has bad IHDR (libpng longjmp)\n"
water	200:36	0:0	12	PROGNAME
water	201:22	0:0	12	":  [%s] has bad IHDR (libpng longjmp)\n"
arg	201:65	201:73	11	filename
water	201:65	0:0	12	filename
water	201:74	0:0	10	;
break	202:20	202:25	10	
label	203:16	203:22	10	case 4 :
call	204:20	204:71	10	fprintf
arg	204:28	204:34	11	stderr
water	204:28	0:0	12	stderr
arg	204:36	204:71	11	PROGNAME":  insufficient memory\n"
water	204:36	0:0	12	PROGNAME
water	204:45	0:0	12	":  insufficient memory\n"
water	204:72	0:0	10	;
break	205:20	205:25	10	
label	206:16	206:23	10	default :
call	207:20	208:58	10	fprintf
arg	207:28	207:34	11	stderr
water	207:28	0:0	12	stderr
arg	207:36	208:58	11	PROGNAME":  unknown readpng2_init() error\n"
water	207:36	0:0	12	PROGNAME
water	208:22	0:0	12	":  unknown readpng2_init() error\n"
water	208:59	0:0	10	;
break	209:20	209:25	10	
water	210:12	0:0	10	}
op	211:12	0:0	8	++
water	211:14	0:0	8	error
water	211:19	0:0	8	;
water	212:8	0:0	8	}
if	213:8	214:26	4	(error)
cond	213:12	213:12	5	error
water	213:12	0:0	6	error
stmts	214:12	214:26	5	
call	214:12	214:25	6	fclose
arg	214:19	214:25	7	infile
water	214:19	0:0	8	infile
water	214:26	0:0	6	;
water	215:4	0:0	4	}
if	216:4	227:4	2	(error)
cond	216:8	216:8	3	error
water	216:8	0:0	4	error
stmts	216:15	227:4	3	
water	216:15	0:0	4	{
decl	218:8	218:14	4	int	ch
call	220:8	220:49	4	fprintf
arg	220:16	220:22	5	stderr
water	220:16	0:0	6	stderr
arg	220:24	220:49	5	PROGNAME":  aborting.\n"
water	220:24	0:0	6	PROGNAME
water	220:33	0:0	6	":  aborting.\n"
water	220:50	0:0	4	;
do	222:8	223:25	4	(ch != 'q' && ch != 'Q' && ch != 0 x1B)
cond	224:15	224:48	5	ch != 'q' && ch != 'Q' && ch != 0 x1B
water	224:15	0:0	6	ch
op	224:18	0:0	6	!=
water	224:21	0:0	6	'q'
op	224:25	0:0	6	&&
water	224:28	0:0	6	ch
op	224:31	0:0	6	!=
water	224:34	0:0	6	'Q'
op	224:38	0:0	6	&&
water	224:41	0:0	6	ch
op	224:44	0:0	6	!=
water	224:47	0:0	6	0
water	224:48	0:0	6	x1B
stmts	223:12	223:25	5	
water	223:12	0:0	6	ch
op	223:15	0:0	6	=
call	223:17	223:24	6	_getch
water	223:25	0:0	6	;
water	224:52	0:0	4	;
call	226:8	226:14	4	exit
arg	226:13	226:14	5	2
water	226:13	0:0	6	2
water	226:15	0:0	4	;
water	227:4	0:0	4	}
else	227:6	235:4	2
stmts	227:11	235:4	3	
water	227:11	0:0	4	{
call	228:8	228:68	4	fprintf
arg	228:16	228:22	5	stderr
water	228:16	0:0	6	stderr
arg	228:24	228:40	5	"\n%s %s:  %s\n"
water	228:24	0:0	6	"\n%s %s:  %s\n"
arg	228:42	228:50	5	PROGNAME
water	228:42	0:0	6	PROGNAME
arg	228:52	228:59	5	VERSION
water	228:52	0:0	6	VERSION
arg	228:61	228:68	5	appname
water	228:61	0:0	6	appname
water	228:69	0:0	4	;
call	230:8	232:18	4	fprintf
arg	230:16	230:22	5	stderr
water	230:16	0:0	6	stderr
arg	231:10	231:77	5	"\n   [console window:  closing this window will terminate %s]\n\n"
water	231:10	0:0	6	"\n   [console window:  closing this window will terminate %s]\n\n"
arg	232:10	232:18	5	PROGNAME
water	232:10	0:0	6	PROGNAME
water	232:19	0:0	4	;
call	234:8	234:21	4	fflush
arg	234:15	234:21	5	stderr
water	234:15	0:0	6	stderr
water	234:22	0:0	4	;
water	235:4	0:0	4	}
water	237:4	0:0	2	alen
op	237:9	0:0	2	=
call	237:11	237:25	2	strlen
arg	237:18	237:25	3	appname
water	237:18	0:0	4	appname
water	237:26	0:0	2	;
water	238:4	0:0	2	flen
op	238:9	0:0	2	=
call	238:11	238:26	2	strlen
arg	238:18	238:26	3	filename
water	238:18	0:0	4	filename
water	238:27	0:0	2	;
if	239:4	240:77	2	(alen + flen + 3 > 1023)
cond	239:8	239:26	3	alen + flen + 3 > 1023
water	239:8	0:0	4	alen
op	239:13	0:0	4	+
water	239:15	0:0	4	flen
op	239:20	0:0	4	+
water	239:22	0:0	4	3
op	239:24	0:0	4	>
water	239:26	0:0	4	1023
stmts	240:8	240:77	3	
call	240:8	240:76	4	sprintf
arg	240:16	240:24	5	titlebar
water	240:16	0:0	6	titlebar
arg	240:26	240:38	5	"%s:  ...%s"
water	240:26	0:0	6	"%s:  ...%s"
arg	240:40	240:47	5	appname
water	240:40	0:0	6	appname
arg	240:49	240:76	5	filename+(alen+flen+6-1023)
water	240:49	0:0	6	filename
op	240:57	0:0	6	+
water	240:58	0:0	6	(
water	240:59	0:0	6	alen
op	240:63	0:0	6	+
water	240:64	0:0	6	flen
op	240:68	0:0	6	+
water	240:69	0:0	6	6
op	240:70	0:0	6	-
water	240:71	0:0	6	1023
water	240:75	0:0	6	)
water	240:77	0:0	4	;
else	241:4	242:55	2
stmts	242:8	242:55	3	
call	242:8	242:54	4	sprintf
arg	242:16	242:24	5	titlebar
water	242:16	0:0	6	titlebar
arg	242:26	242:35	5	"%s:  %s"
water	242:26	0:0	6	"%s:  %s"
arg	242:37	242:44	5	appname
water	242:37	0:0	6	appname
arg	242:46	242:54	5	filename
water	242:46	0:0	6	filename
water	242:55	0:0	4	;
if	244:4	250:4	2	(have_bg)
cond	244:8	244:8	3	have_bg
water	244:8	0:0	4	have_bg
stmts	244:17	250:4	3	
water	244:17	0:0	4	{
water	245:8	0:0	4	unsigned
water	245:17	0:0	4	r
water	245:18	0:0	4	,
water	245:20	0:0	4	g
water	245:21	0:0	4	,
water	245:23	0:0	4	b
water	245:24	0:0	4	;
call	246:8	246:47	4	sscanf
arg	246:15	246:22	5	bgstr+1
water	246:15	0:0	6	bgstr
op	246:20	0:0	6	+
water	246:21	0:0	6	1
arg	246:24	246:35	5	"%2x%2x%2x"
water	246:24	0:0	6	"%2x%2x%2x"
arg	246:37	246:39	5	&r
op	246:37	0:0	6	&
water	246:38	0:0	6	r
arg	246:41	246:43	5	&g
op	246:41	0:0	6	&
water	246:42	0:0	6	g
arg	246:45	246:47	5	&b
op	246:45	0:0	6	&
water	246:46	0:0	6	b
water	246:48	0:0	4	;
water	247:8	0:0	4	rpng2_info
op	247:18	0:0	4	.
water	247:19	0:0	4	bg_red
op	247:28	0:0	4	=
water	247:30	0:0	4	(
water	247:31	0:0	4	uch
water	247:34	0:0	4	)
water	247:35	0:0	4	r
water	247:36	0:0	4	;
water	248:8	0:0	4	rpng2_info
op	248:18	0:0	4	.
water	248:19	0:0	4	bg_green
op	248:28	0:0	4	=
water	248:30	0:0	4	(
water	248:31	0:0	4	uch
water	248:34	0:0	4	)
water	248:35	0:0	4	g
water	248:36	0:0	4	;
water	249:8	0:0	4	rpng2_info
op	249:18	0:0	4	.
water	249:19	0:0	4	bg_blue
op	249:28	0:0	4	=
water	249:30	0:0	4	(
water	249:31	0:0	4	uch
water	249:34	0:0	4	)
water	249:35	0:0	4	b
water	249:36	0:0	4	;
water	250:4	0:0	4	}
else	250:6	251:38	2
stmts	251:8	251:38	3	
water	251:8	0:0	4	rpng2_info
op	251:18	0:0	4	.
water	251:19	0:0	4	need_bgcolor
op	251:32	0:0	4	=
water	251:34	0:0	4	TRUE
water	251:38	0:0	4	;
water	252:4	0:0	2	rpng2_info
op	252:14	0:0	2	.
water	252:15	0:0	2	state
op	252:21	0:0	2	=
water	252:23	0:0	2	kPreInit
water	252:31	0:0	2	;
water	253:4	0:0	2	rpng2_info
op	253:14	0:0	2	.
water	253:15	0:0	2	mainprog_init
op	253:29	0:0	2	=
water	253:31	0:0	2	rpng2_win_init
water	253:45	0:0	2	;
water	254:4	0:0	2	rpng2_info
op	254:14	0:0	2	.
water	254:15	0:0	2	mainprog_display_row
op	254:36	0:0	2	=
water	254:38	0:0	2	rpng2_win_display_row
water	254:59	0:0	2	;
water	255:4	0:0	2	rpng2_info
op	255:14	0:0	2	.
water	255:15	0:0	2	mainprog_finish_display
op	255:39	0:0	2	=
water	255:41	0:0	2	rpng2_win_finish_display
water	255:65	0:0	2	;
for	264:4	288:4	2	(;;)
forinit	264:9	264:9	3	;
water	264:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	264:13	288:4	3	
water	264:13	0:0	4	{
call	265:8	265:64	4	Trace
arg	265:14	265:64	5	(stderr,"about to call readpng2_decode_data()\n")
water	265:14	0:0	6	(
water	265:15	0:0	6	stderr
water	265:21	0:0	6	,
water	265:23	0:0	6	"about to call readpng2_decode_data()\n"
water	265:63	0:0	6	)
water	266:8	0:0	4	if
water	266:11	0:0	4	(
call	266:12	266:60	4	readpng2_decode_data
arg	266:33	266:44	5	&rpng2_info
op	266:33	0:0	6	&
water	266:34	0:0	6	rpng2_info
arg	266:46	266:51	5	inbuf
water	266:46	0:0	6	inbuf
arg	266:53	266:60	5	incount
water	266:53	0:0	6	incount
water	266:61	0:0	4	)
op	267:12	0:0	4	++
water	267:14	0:0	4	error
water	267:19	0:0	4	;
call	268:8	268:60	4	Trace
arg	268:14	268:60	5	(stderr,"done with readpng2_decode_data()\n")
water	268:14	0:0	6	(
water	268:15	0:0	6	stderr
water	268:21	0:0	6	,
water	268:23	0:0	6	"done with readpng2_decode_data()\n"
water	268:59	0:0	6	)
water	269:8	0:0	4	if
water	269:11	0:0	4	(
water	269:12	0:0	4	error
op	269:18	0:0	4	||
water	269:21	0:0	4	incount
op	269:29	0:0	4	!=
water	269:32	0:0	4	INBUFSIZE
op	269:42	0:0	4	||
water	269:45	0:0	4	rpng2_info
op	269:55	0:0	4	.
water	269:56	0:0	4	state
op	269:62	0:0	4	==
water	269:65	0:0	4	kDone
water	269:70	0:0	4	)
water	269:72	0:0	4	{
water	270:12	0:0	4	if
water	270:15	0:0	4	(
water	270:16	0:0	4	rpng2_info
op	270:26	0:0	4	.
water	270:27	0:0	4	state
op	270:33	0:0	4	==
water	270:36	0:0	4	kDone
water	270:41	0:0	4	)
water	270:43	0:0	4	{
call	271:16	271:59	4	Trace
arg	271:22	271:59	5	(stderr,"done decoding PNG image\n")
water	271:22	0:0	6	(
water	271:23	0:0	6	stderr
water	271:29	0:0	6	,
water	271:31	0:0	6	"done decoding PNG image\n"
water	271:58	0:0	6	)
water	272:12	0:0	4	}
water	272:14	0:0	4	else
water	272:19	0:0	4	if
water	272:22	0:0	4	(
call	272:23	272:36	4	ferror
arg	272:30	272:36	5	infile
water	272:30	0:0	6	infile
water	272:37	0:0	4	)
water	272:39	0:0	4	{
call	273:16	274:59	4	fprintf
arg	273:24	273:30	5	stderr
water	273:24	0:0	6	stderr
arg	273:32	274:59	5	PROGNAME":  error while reading PNG image file\n"
water	273:32	0:0	6	PROGNAME
water	274:18	0:0	6	":  error while reading PNG image file\n"
water	274:60	0:0	4	;
call	275:16	275:22	4	exit
arg	275:21	275:22	5	3
water	275:21	0:0	6	3
water	275:23	0:0	4	;
water	276:12	0:0	4	}
water	276:14	0:0	4	else
water	276:19	0:0	4	if
water	276:22	0:0	4	(
call	276:23	276:34	4	feof
arg	276:28	276:34	5	infile
water	276:28	0:0	6	infile
water	276:35	0:0	4	)
water	276:37	0:0	4	{
call	277:16	278:65	4	fprintf
arg	277:24	277:30	5	stderr
water	277:24	0:0	6	stderr
arg	277:32	278:65	5	PROGNAME":  end of file reached ""(unexpectedly) while reading PNG image file\n"
water	277:32	0:0	6	PROGNAME
water	277:41	0:0	6	":  end of file reached "
water	278:18	0:0	6	"(unexpectedly) while reading PNG image file\n"
water	278:66	0:0	4	;
call	279:16	279:22	4	exit
arg	279:21	279:22	5	3
water	279:21	0:0	6	3
water	279:23	0:0	4	;
water	280:12	0:0	4	}
water	280:14	0:0	4	else
water	280:20	0:0	4	{
water	282:12	0:0	4	}
water	283:12	0:0	4	break
water	283:17	0:0	4	;
water	284:8	0:0	4	}
water	285:8	0:0	4	if
water	285:11	0:0	4	(
water	285:12	0:0	4	timing
water	285:18	0:0	4	)
call	286:12	286:23	4	Sleep
arg	286:18	286:23	5	1000L
water	286:18	0:0	6	1000
water	286:22	0:0	6	L
water	286:24	0:0	4	;
water	287:8	0:0	4	incount
op	287:16	0:0	4	=
call	287:18	287:51	4	fread
arg	287:24	287:29	5	inbuf
water	287:24	0:0	6	inbuf
arg	287:31	287:32	5	1
water	287:31	0:0	6	1
arg	287:34	287:43	5	INBUFSIZE
water	287:34	0:0	6	INBUFSIZE
arg	287:45	287:51	5	infile
water	287:45	0:0	6	infile
water	287:52	0:0	4	;
water	288:4	0:0	4	}
call	290:4	290:17	2	fclose
arg	290:11	290:17	3	infile
water	290:11	0:0	4	infile
water	290:18	0:0	2	;
call	291:4	291:56	2	Trace
arg	291:10	291:56	3	(stderr,"about to call readpng2_cleanup()\n")
water	291:10	0:0	4	(
water	291:11	0:0	4	stderr
water	291:17	0:0	4	,
water	291:19	0:0	4	"about to call readpng2_cleanup()\n"
water	291:55	0:0	4	)
call	292:4	292:32	2	readpng2_cleanup
arg	292:21	292:32	3	&rpng2_info
op	292:21	0:0	4	&
water	292:22	0:0	4	rpng2_info
water	292:33	0:0	2	;
if	293:4	296:4	2	(error)
cond	293:8	293:8	3	error
water	293:8	0:0	4	error
stmts	293:15	296:4	3	
water	293:15	0:0	4	{
call	294:8	294:77	4	fprintf
arg	294:16	294:22	5	stderr
water	294:16	0:0	6	stderr
arg	294:24	294:77	5	PROGNAME":  libpng error while decoding PNG image\n"
water	294:24	0:0	6	PROGNAME
water	294:33	0:0	6	":  libpng error while decoding PNG image\n"
water	294:78	0:0	4	;
call	295:8	295:14	4	exit
arg	295:13	295:14	5	3
water	295:13	0:0	6	3
water	295:15	0:0	4	;
water	296:4	0:0	4	}
while	298:4	301:4	2	(GetMessage (& msg ,NULL ,0 ,0 ))
cond	298:11	298:38	3	GetMessage (& msg ,NULL ,0 ,0 )
call	298:11	298:38	4	GetMessage
arg	298:22	298:26	5	&msg
op	298:22	0:0	6	&
water	298:23	0:0	6	msg
arg	298:28	298:32	5	NULL
water	298:28	0:0	6	NULL
arg	298:34	298:35	5	0
water	298:34	0:0	6	0
arg	298:37	298:38	5	0
water	298:37	0:0	6	0
stmts	298:41	301:4	3	
water	298:41	0:0	4	{
call	299:8	299:29	4	TranslateMessage
arg	299:25	299:29	5	&msg
op	299:25	0:0	6	&
water	299:26	0:0	6	msg
water	299:30	0:0	4	;
call	300:8	300:28	4	DispatchMessage
arg	300:24	300:28	5	&msg
op	300:24	0:0	6	&
water	300:25	0:0	6	msg
water	300:29	0:0	4	;
water	301:4	0:0	4	}
call	303:4	303:57	2	Trace
arg	303:10	303:57	3	(stderr,"about to call rpng2_win_cleanup()\n")
water	303:10	0:0	4	(
water	303:11	0:0	4	stderr
water	303:17	0:0	4	,
water	303:19	0:0	4	"about to call rpng2_win_cleanup()\n"
water	303:56	0:0	4	)
call	304:4	304:22	2	rpng2_win_cleanup
water	304:23	0:0	2	;
return	305:4	305:21	2	msg.wParam
water	305:11	0:0	3	msg
op	305:14	0:0	3	.
water	305:15	0:0	3	wParam
