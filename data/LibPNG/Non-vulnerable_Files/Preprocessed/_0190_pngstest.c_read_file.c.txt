func	1:0	79:0	0	static int	read_file
params	2:9	0:0	1	
param	2:10	2:22	2	Image *	image
param	2:24	2:42	2	png_uint_32	format
param	2:44	2:71	2	png_const_colorp	background
stmnts	4:3	78:3	1	
call	4:3	4:47	2	memset
arg	4:10	4:23	3	&image->image
op	4:10	0:0	4	&
water	4:11	0:0	4	image
op	4:16	0:0	4	->
water	4:18	0:0	4	image
arg	4:25	4:26	3	0
water	4:25	0:0	4	0
arg	4:28	4:47	3	sizeofimage->image
op	4:28	0:0	4	sizeof
water	4:35	0:0	4	image
op	4:40	0:0	4	->
water	4:42	0:0	4	image
water	4:48	0:0	2	;
water	5:3	0:0	2	image
op	5:8	0:0	2	->
water	5:10	0:0	2	image
op	5:15	0:0	2	.
water	5:16	0:0	2	version
op	5:24	0:0	2	=
water	5:26	0:0	2	PNG_IMAGE_VERSION
water	5:43	0:0	2	;
if	6:3	11:3	2	(image -> input_memory != NULL)
cond	6:7	6:30	3	image -> input_memory != NULL
water	6:7	0:0	4	image
op	6:12	0:0	4	->
water	6:14	0:0	4	input_memory
op	6:27	0:0	4	!=
water	6:30	0:0	4	NULL
stmts	7:3	11:3	3	
water	7:3	0:0	4	{
if	8:6	10:70	4	(!png_image_begin_read_from_memory (& image -> image ,image -> input_memory ,image -> input_memory_size ))
cond	8:10	9:33	5	!png_image_begin_read_from_memory (& image -> image ,image -> input_memory ,image -> input_memory_size )
op	8:10	0:0	6	!
call	8:11	9:33	6	png_image_begin_read_from_memory
arg	8:44	8:57	7	&image->image
op	8:44	0:0	8	&
water	8:45	0:0	8	image
op	8:50	0:0	8	->
water	8:52	0:0	8	image
arg	8:59	8:78	7	image->input_memory
water	8:59	0:0	8	image
op	8:64	0:0	8	->
water	8:66	0:0	8	input_memory
arg	9:9	9:33	7	image->input_memory_size
water	9:9	0:0	8	image
op	9:14	0:0	8	->
water	9:16	0:0	8	input_memory_size
stmts	10:9	10:70	5	
return	10:9	10:70	6	logerror(image,"memory init: ",image->file_name,"")
call	10:16	10:69	7	logerror
arg	10:25	10:30	8	image
water	10:25	0:0	9	image
arg	10:32	10:47	8	"memory init: "
water	10:32	0:0	9	"memory init: "
arg	10:49	10:65	8	image->file_name
water	10:49	0:0	9	image
op	10:54	0:0	9	->
water	10:56	0:0	9	file_name
arg	10:67	10:69	8	""
water	10:67	0:0	9	""
water	11:3	0:0	4	}
else	13:6	17:6	2
stmts	13:11	17:6	3	
if	13:11	17:6	4	(image -> input_file != NULL)
cond	13:15	13:36	5	image -> input_file != NULL
water	13:15	0:0	6	image
op	13:20	0:0	6	->
water	13:22	0:0	6	input_file
op	13:33	0:0	6	!=
water	13:36	0:0	6	NULL
stmts	14:6	17:6	5	
water	14:6	0:0	6	{
if	15:9	16:72	6	(!png_image_begin_read_from_stdio (& image -> image ,image -> input_file ))
cond	15:13	15:78	7	!png_image_begin_read_from_stdio (& image -> image ,image -> input_file )
op	15:13	0:0	8	!
call	15:14	15:78	8	png_image_begin_read_from_stdio
arg	15:46	15:59	9	&image->image
op	15:46	0:0	10	&
water	15:47	0:0	10	image
op	15:52	0:0	10	->
water	15:54	0:0	10	image
arg	15:61	15:78	9	image->input_file
water	15:61	0:0	10	image
op	15:66	0:0	10	->
water	15:68	0:0	10	input_file
stmts	16:12	16:72	7	
return	16:12	16:72	8	logerror(image,"stdio init: ",image->file_name,"")
call	16:19	16:71	9	logerror
arg	16:28	16:33	10	image
water	16:28	0:0	11	image
arg	16:35	16:49	10	"stdio init: "
water	16:35	0:0	11	"stdio init: "
arg	16:51	16:67	10	image->file_name
water	16:51	0:0	11	image
op	16:56	0:0	11	->
water	16:58	0:0	11	file_name
arg	16:69	16:71	10	""
water	16:69	0:0	11	""
water	17:6	0:0	6	}
else	18:6	22:6	2
stmts	19:6	22:6	3	
water	19:6	0:0	4	{
if	20:9	21:71	4	(!png_image_begin_read_from_file (& image -> image ,image -> file_name ))
cond	20:13	20:76	5	!png_image_begin_read_from_file (& image -> image ,image -> file_name )
op	20:13	0:0	6	!
call	20:14	20:76	6	png_image_begin_read_from_file
arg	20:45	20:58	7	&image->image
op	20:45	0:0	8	&
water	20:46	0:0	8	image
op	20:51	0:0	8	->
water	20:53	0:0	8	image
arg	20:60	20:76	7	image->file_name
water	20:60	0:0	8	image
op	20:65	0:0	8	->
water	20:67	0:0	8	file_name
stmts	21:12	21:71	5	
return	21:12	21:71	6	logerror(image,"file init: ",image->file_name,"")
call	21:19	21:70	7	logerror
arg	21:28	21:33	8	image
water	21:28	0:0	9	image
arg	21:35	21:48	8	"file init: "
water	21:35	0:0	9	"file init: "
arg	21:50	21:66	8	image->file_name
water	21:50	0:0	9	image
op	21:55	0:0	9	->
water	21:57	0:0	9	file_name
arg	21:68	21:70	8	""
water	21:68	0:0	9	""
water	22:6	0:0	4	}
else	24:6	28:6	2
stmts	25:6	28:6	3	
water	25:6	0:0	4	{
return	26:9	27:33	4	logerror(image,"unsupported file/stdio init: ",image->file_name,"")
call	26:16	27:32	5	logerror
arg	26:25	26:30	6	image
water	26:25	0:0	7	image
arg	26:32	26:63	6	"unsupported file/stdio init: "
water	26:32	0:0	7	"unsupported file/stdio init: "
arg	27:12	27:28	6	image->file_name
water	27:12	0:0	7	image
op	27:17	0:0	7	->
water	27:19	0:0	7	file_name
arg	27:30	27:32	6	""
water	27:30	0:0	7	""
water	28:6	0:0	4	}
if	31:3	32:53	2	(image -> opts & sRGB_16BIT)
cond	31:7	31:21	3	image -> opts & sRGB_16BIT
water	31:7	0:0	4	image
op	31:12	0:0	4	->
water	31:14	0:0	4	opts
op	31:19	0:0	4	&
water	31:21	0:0	4	sRGB_16BIT
stmts	32:6	32:53	3	
water	32:6	0:0	4	image
op	32:11	0:0	4	->
water	32:13	0:0	4	image
op	32:18	0:0	4	.
water	32:19	0:0	4	flags
op	32:25	0:0	4	|=
water	32:28	0:0	4	PNG_IMAGE_FLAG_16BIT_sRGB
water	32:53	0:0	4	;
water	36:3	0:0	2	{
decl	37:6	37:16	2	int	result
decl	38:6	38:30	2	png_uint_32	image_format
water	40:6	0:0	2	image_format
op	40:19	0:0	2	=
water	40:21	0:0	2	image
op	40:26	0:0	2	->
water	40:28	0:0	2	image
op	40:33	0:0	2	.
water	40:34	0:0	2	format
water	40:40	0:0	2	;
if	41:6	55:6	2	(image -> opts & VERBOSE)
cond	41:10	41:24	3	image -> opts & VERBOSE
water	41:10	0:0	4	image
op	41:15	0:0	4	->
water	41:17	0:0	4	opts
op	41:22	0:0	4	&
water	41:24	0:0	4	VERBOSE
stmts	42:6	55:6	3	
water	42:6	0:0	4	{
call	43:9	48:62	4	printf
arg	43:16	43:39	5	"%s %lu x %lu %s -> %s"
water	43:16	0:0	6	"%s %lu x %lu %s -> %s"
arg	43:41	43:57	5	image->file_name
water	43:41	0:0	6	image
op	43:46	0:0	6	->
water	43:48	0:0	6	file_name
arg	44:12	44:45	5	(unsignedlong)image->image.width
water	44:12	0:0	6	(
water	44:13	0:0	6	unsigned
water	44:22	0:0	6	long
water	44:26	0:0	6	)
water	44:27	0:0	6	image
op	44:32	0:0	6	->
water	44:34	0:0	6	image
op	44:39	0:0	6	.
water	44:40	0:0	6	width
arg	45:12	45:46	5	(unsignedlong)image->image.height
water	45:12	0:0	6	(
water	45:13	0:0	6	unsigned
water	45:22	0:0	6	long
water	45:26	0:0	6	)
water	45:27	0:0	6	image
op	45:32	0:0	6	->
water	45:34	0:0	6	image
op	45:39	0:0	6	.
water	45:40	0:0	6	height
arg	46:12	46:52	5	format_names[image_format&FORMAT_MASK]
water	46:12	0:0	6	format_names
op	46:24	0:0	6	[
water	46:25	0:0	6	image_format
op	46:38	0:0	6	&
water	46:40	0:0	6	FORMAT_MASK
op	46:51	0:0	6	]
arg	47:12	48:62	5	(format&FORMAT_NO_CHANGE)!=0||image->image.format==format?"no change":format_names[format&FORMAT_MASK]
water	47:12	0:0	6	(
water	47:13	0:0	6	format
op	47:20	0:0	6	&
water	47:22	0:0	6	FORMAT_NO_CHANGE
water	47:38	0:0	6	)
op	47:40	0:0	6	!=
water	47:43	0:0	6	0
op	47:45	0:0	6	||
water	47:48	0:0	6	image
op	47:53	0:0	6	->
water	47:55	0:0	6	image
op	47:60	0:0	6	.
water	47:61	0:0	6	format
op	47:68	0:0	6	==
water	47:71	0:0	6	format
water	48:12	0:0	6	?
water	48:14	0:0	6	"no change"
water	48:26	0:0	6	:
water	48:28	0:0	6	format_names
op	48:40	0:0	6	[
water	48:41	0:0	6	format
op	48:48	0:0	6	&
water	48:50	0:0	6	FORMAT_MASK
op	48:61	0:0	6	]
water	48:63	0:0	4	;
if	49:9	51:51	4	(background != NULL)
cond	49:13	49:27	5	background != NULL
water	49:13	0:0	6	background
op	49:24	0:0	6	!=
water	49:27	0:0	6	NULL
stmts	50:12	51:51	5	
call	50:12	51:50	6	printf
arg	50:19	50:44	7	" background(%d,%d,%d)\n"
water	50:19	0:0	8	" background(%d,%d,%d)\n"
arg	50:46	50:61	7	background->red
water	50:46	0:0	8	background
op	50:56	0:0	8	->
water	50:58	0:0	8	red
arg	51:15	51:32	7	background->green
water	51:15	0:0	8	background
op	51:25	0:0	8	->
water	51:27	0:0	8	green
arg	51:34	51:50	7	background->blue
water	51:34	0:0	8	background
op	51:44	0:0	8	->
water	51:46	0:0	8	blue
water	51:51	0:0	6	;
else	52:9	53:24	4
stmts	53:12	53:24	5	
call	53:12	53:23	6	printf
arg	53:19	53:23	7	"\n"
water	53:19	0:0	8	"\n"
water	53:24	0:0	6	;
call	54:9	54:22	4	fflush
arg	54:16	54:22	5	stdout
water	54:16	0:0	6	stdout
water	54:23	0:0	4	;
water	55:6	0:0	4	}
if	60:6	67:6	2	(( format & FORMAT_NO_CHANGE ) != 0)
cond	60:10	60:41	3	( format & FORMAT_NO_CHANGE ) != 0
water	60:10	0:0	4	(
water	60:11	0:0	4	format
op	60:18	0:0	4	&
water	60:20	0:0	4	FORMAT_NO_CHANGE
water	60:36	0:0	4	)
op	60:38	0:0	4	!=
water	60:41	0:0	4	0
stmts	61:6	67:6	3	
water	61:6	0:0	4	{
if	62:9	64:77	4	(( format & PNG_FORMAT_FLAG_COLORMAP ) != 0 && ( image_format & PNG_FORMAT_FLAG_COLORMAP ) != 0)
cond	62:13	63:57	5	( format & PNG_FORMAT_FLAG_COLORMAP ) != 0 && ( image_format & PNG_FORMAT_FLAG_COLORMAP ) != 0
water	62:13	0:0	6	(
water	62:14	0:0	6	format
op	62:21	0:0	6	&
water	62:23	0:0	6	PNG_FORMAT_FLAG_COLORMAP
water	62:47	0:0	6	)
op	62:49	0:0	6	!=
water	62:52	0:0	6	0
op	62:54	0:0	6	&&
water	63:12	0:0	6	(
water	63:13	0:0	6	image_format
op	63:26	0:0	6	&
water	63:28	0:0	6	PNG_FORMAT_FLAG_COLORMAP
water	63:52	0:0	6	)
op	63:54	0:0	6	!=
water	63:57	0:0	6	0
stmts	64:12	64:77	5	
water	64:12	0:0	6	format
op	64:19	0:0	6	=
water	64:21	0:0	6	(
water	64:22	0:0	6	image_format
op	64:35	0:0	6	&
water	64:37	0:0	6	~BASE_FORMATS
water	64:50	0:0	6	)
op	64:52	0:0	6	|
water	64:54	0:0	6	(
water	64:55	0:0	6	format
op	64:62	0:0	6	&
water	64:64	0:0	6	BASE_FORMATS
water	64:76	0:0	6	)
water	64:77	0:0	6	;
else	65:9	66:33	4
stmts	66:12	66:33	5	
water	66:12	0:0	6	format
op	66:19	0:0	6	=
water	66:21	0:0	6	image_format
water	66:33	0:0	6	;
water	67:6	0:0	4	}
water	68:6	0:0	2	image
op	68:11	0:0	2	->
water	68:13	0:0	2	image
op	68:18	0:0	2	.
water	68:19	0:0	2	format
op	68:26	0:0	2	=
water	68:28	0:0	2	format
water	68:34	0:0	2	;
water	69:6	0:0	2	image
op	69:11	0:0	2	->
water	69:13	0:0	2	stride
op	69:20	0:0	2	=
call	69:22	69:55	2	PNG_IMAGE_ROW_STRIDE
arg	69:43	69:55	3	image->image
water	69:43	0:0	4	image
op	69:48	0:0	4	->
water	69:50	0:0	4	image
op	69:57	0:0	2	+
water	69:59	0:0	2	image
op	69:64	0:0	2	->
water	69:66	0:0	2	stride_extra
water	69:78	0:0	2	;
call	70:6	70:23	2	allocbuffer
arg	70:18	70:23	3	image
water	70:18	0:0	4	image
water	70:24	0:0	2	;
water	71:6	0:0	2	result
op	71:13	0:0	2	=
call	71:15	72:69	2	png_image_finish_read
arg	71:37	71:50	3	&image->image
op	71:37	0:0	4	&
water	71:38	0:0	4	image
op	71:43	0:0	4	->
water	71:45	0:0	4	image
arg	71:52	71:62	3	background
water	71:52	0:0	4	background
arg	72:9	72:25	3	image->buffer+16
water	72:9	0:0	4	image
op	72:14	0:0	4	->
water	72:16	0:0	4	buffer
op	72:22	0:0	4	+
water	72:23	0:0	4	16
arg	72:27	72:52	3	(png_int_32)image->stride
water	72:27	0:0	4	(
water	72:28	0:0	4	png_int_32
water	72:38	0:0	4	)
water	72:39	0:0	4	image
op	72:44	0:0	4	->
water	72:46	0:0	4	stride
arg	72:54	72:69	3	image->colormap
water	72:54	0:0	4	image
op	72:59	0:0	4	->
water	72:61	0:0	4	colormap
water	72:70	0:0	2	;
call	73:6	73:41	2	checkbuffer
arg	73:18	73:23	3	image
water	73:18	0:0	4	image
arg	73:25	73:41	3	image->file_name
water	73:25	0:0	4	image
op	73:30	0:0	4	->
water	73:32	0:0	4	file_name
water	73:42	0:0	2	;
if	74:6	75:34	2	(result)
cond	74:10	74:10	3	result
water	74:10	0:0	4	result
stmts	75:9	75:34	3	
return	75:9	75:34	4	checkopaque(image)
call	75:16	75:33	5	checkopaque
arg	75:28	75:33	6	image
water	75:28	0:0	7	image
else	76:6	77:76	2
stmts	77:9	77:76	3	
return	77:9	77:76	4	logerror(image,image->file_name,": image read failed","")
call	77:16	77:75	5	logerror
arg	77:25	77:30	6	image
water	77:25	0:0	7	image
arg	77:32	77:48	6	image->file_name
water	77:32	0:0	7	image
op	77:37	0:0	7	->
water	77:39	0:0	7	file_name
arg	77:50	77:71	6	": image read failed"
water	77:50	0:0	7	": image read failed"
arg	77:73	77:75	6	""
water	77:73	0:0	7	""
water	78:3	0:0	2	}
