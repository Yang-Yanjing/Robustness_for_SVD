func	1:0	166:0	0	static void	gamma_image_validate
params	2:20	0:0	1	
param	2:21	2:38	2	gamma_display *	dp
param	2:40	2:60	2	png_const_structp	pp
param	3:3	3:15	2	png_infop	pi
stmnts	6:3	165:29	1	
water	6:3	0:0	2	PNG_CONST
water	6:13	0:0	2	png_store
op	6:22	0:0	2	*
water	6:24	0:0	2	PNG_CONST
water	6:34	0:0	2	ps
op	6:37	0:0	2	=
water	6:39	0:0	2	dp
op	6:41	0:0	2	->
water	6:43	0:0	2	this
op	6:47	0:0	2	.
water	6:48	0:0	2	ps
water	6:50	0:0	2	;
water	7:3	0:0	2	PNG_CONST
water	7:13	0:0	2	png_byte
water	7:22	0:0	2	in_ct
op	7:28	0:0	2	=
water	7:30	0:0	2	dp
op	7:32	0:0	2	->
water	7:34	0:0	2	this
op	7:38	0:0	2	.
water	7:39	0:0	2	colour_type
water	7:50	0:0	2	;
water	8:3	0:0	2	PNG_CONST
water	8:13	0:0	2	png_byte
water	8:22	0:0	2	in_bd
op	8:28	0:0	2	=
water	8:30	0:0	2	dp
op	8:32	0:0	2	->
water	8:34	0:0	2	this
op	8:38	0:0	2	.
water	8:39	0:0	2	bit_depth
water	8:48	0:0	2	;
water	9:3	0:0	2	PNG_CONST
water	9:13	0:0	2	png_uint_32
water	9:25	0:0	2	w
op	9:27	0:0	2	=
water	9:29	0:0	2	dp
op	9:31	0:0	2	->
water	9:33	0:0	2	this
op	9:37	0:0	2	.
water	9:38	0:0	2	w
water	9:39	0:0	2	;
water	10:3	0:0	2	PNG_CONST
water	10:13	0:0	2	png_uint_32
water	10:25	0:0	2	h
op	10:27	0:0	2	=
water	10:29	0:0	2	dp
op	10:31	0:0	2	->
water	10:33	0:0	2	this
op	10:37	0:0	2	.
water	10:38	0:0	2	h
water	10:39	0:0	2	;
water	11:3	0:0	2	PNG_CONST
water	11:13	0:0	2	size_t
water	11:20	0:0	2	cbRow
op	11:26	0:0	2	=
water	11:28	0:0	2	dp
op	11:30	0:0	2	->
water	11:32	0:0	2	this
op	11:36	0:0	2	.
water	11:37	0:0	2	cbRow
water	11:42	0:0	2	;
water	12:3	0:0	2	PNG_CONST
water	12:13	0:0	2	png_byte
water	12:22	0:0	2	out_ct
op	12:29	0:0	2	=
call	12:31	12:56	2	png_get_color_type
arg	12:50	12:52	3	pp
water	12:50	0:0	4	pp
arg	12:54	12:56	3	pi
water	12:54	0:0	4	pi
water	12:57	0:0	2	;
water	13:3	0:0	2	PNG_CONST
water	13:13	0:0	2	png_byte
water	13:22	0:0	2	out_bd
op	13:29	0:0	2	=
call	13:31	13:55	2	png_get_bit_depth
arg	13:49	13:51	3	pp
water	13:49	0:0	4	pp
arg	13:53	13:55	3	pi
water	13:53	0:0	4	pi
water	13:56	0:0	2	;
water	53:3	0:0	2	PNG_CONST
water	53:13	0:0	2	unsigned
water	53:22	0:0	2	int
water	53:26	0:0	2	samples_per_pixel
op	53:44	0:0	2	=
water	53:46	0:0	2	(
water	53:47	0:0	2	out_ct
op	53:54	0:0	2	&
water	53:56	0:0	2	2
water	53:57	0:0	2	U
water	53:58	0:0	2	)
water	53:60	0:0	2	?
water	53:62	0:0	2	3
water	53:63	0:0	2	U
water	53:65	0:0	2	:
water	53:67	0:0	2	1
water	53:68	0:0	2	U
water	53:69	0:0	2	;
decl	54:3	54:17	2	int	processing
decl	55:3	55:16	2	png_uint_32	y
water	56:3	0:0	2	PNG_CONST
water	56:13	0:0	2	store_palette_entry
op	56:33	0:0	2	*
water	56:34	0:0	2	in_palette
op	56:45	0:0	2	=
water	56:47	0:0	2	dp
op	56:49	0:0	2	->
water	56:51	0:0	2	this
op	56:55	0:0	2	.
water	56:56	0:0	2	palette
water	56:63	0:0	2	;
water	57:3	0:0	2	PNG_CONST
water	57:13	0:0	2	int
water	57:17	0:0	2	in_is_transparent
op	57:35	0:0	2	=
water	57:37	0:0	2	dp
op	57:39	0:0	2	->
water	57:41	0:0	2	this
op	57:45	0:0	2	.
water	57:46	0:0	2	is_transparent
water	57:60	0:0	2	;
decl	58:3	58:24	2	int	out_npalette
op	58:20	0:0	2	=
op	58:22	0:0	2	-
water	58:23	0:0	2	1
decl	59:3	59:29	2	int	out_is_transparent
op	59:26	0:0	2	=
water	59:28	0:0	2	0
decl	60:3	60:28	2	store_palette	out_palette
decl	61:3	61:19	2	validate_info	vi
call	63:3	63:39	2	store_image_check
arg	63:21	63:32	3	dp->this.ps
water	63:21	0:0	4	dp
op	63:23	0:0	4	->
water	63:25	0:0	4	this
op	63:29	0:0	4	.
water	63:30	0:0	4	ps
arg	63:34	63:36	3	pp
water	63:34	0:0	4	pp
arg	63:38	63:39	3	0
water	63:38	0:0	4	0
water	63:40	0:0	2	;
call	67:3	67:71	2	init_validate_info
arg	67:22	67:25	3	&vi
op	67:22	0:0	4	&
water	67:23	0:0	4	vi
arg	67:27	67:29	3	dp
water	67:27	0:0	4	dp
arg	67:31	67:33	3	pp
water	67:31	0:0	4	pp
arg	67:35	67:51	3	in_ct==3?8:in_bd
water	67:35	0:0	4	in_ct
op	67:40	0:0	4	==
water	67:42	0:0	4	3
water	67:43	0:0	4	?
water	67:44	0:0	4	8
water	67:45	0:0	4	:
water	67:46	0:0	4	in_bd
arg	67:53	67:71	3	out_ct==3?8:out_bd
water	67:53	0:0	4	out_ct
op	67:59	0:0	4	==
water	67:61	0:0	4	3
water	67:62	0:0	4	?
water	67:63	0:0	4	8
water	67:64	0:0	4	:
water	67:65	0:0	4	out_bd
water	67:72	0:0	2	;
water	68:3	0:0	2	processing
op	68:14	0:0	2	=
water	68:16	0:0	2	(
water	68:17	0:0	2	vi
op	68:19	0:0	2	.
water	68:20	0:0	2	gamma_correction
op	68:37	0:0	2	>
water	68:39	0:0	2	0
op	68:41	0:0	2	&&
op	68:44	0:0	2	!
water	68:45	0:0	2	dp
op	68:47	0:0	2	->
water	68:49	0:0	2	threshold_test
water	68:63	0:0	2	)
op	69:6	0:0	2	||
water	69:9	0:0	2	in_bd
op	69:15	0:0	2	!=
water	69:18	0:0	2	out_bd
op	69:25	0:0	2	||
water	69:28	0:0	2	in_ct
op	69:34	0:0	2	!=
water	69:37	0:0	2	out_ct
op	69:44	0:0	2	||
water	69:47	0:0	2	vi
op	69:49	0:0	2	.
water	69:50	0:0	2	do_background
water	69:63	0:0	2	;
if	77:3	78:20	2	(in_ct == 3 && out_ct == 3)
cond	77:7	77:31	3	in_ct == 3 && out_ct == 3
water	77:7	0:0	4	in_ct
op	77:13	0:0	4	==
water	77:16	0:0	4	3
op	77:18	0:0	4	&&
water	77:21	0:0	4	out_ct
op	77:28	0:0	4	==
water	77:31	0:0	4	3
stmts	78:6	78:20	3	
water	78:6	0:0	4	processing
op	78:17	0:0	4	=
water	78:19	0:0	4	0
water	78:20	0:0	4	;
if	79:3	80:75	2	(processing && out_ct == 3)
cond	79:7	79:31	3	processing && out_ct == 3
water	79:7	0:0	4	processing
op	79:18	0:0	4	&&
water	79:21	0:0	4	out_ct
op	79:28	0:0	4	==
water	79:31	0:0	4	3
stmts	80:6	80:75	3	
water	80:6	0:0	4	out_is_transparent
op	80:25	0:0	4	=
call	80:27	80:74	4	read_palette
arg	80:40	80:51	5	out_palette
water	80:40	0:0	6	out_palette
arg	80:53	80:66	5	&out_npalette
op	80:53	0:0	6	&
water	80:54	0:0	6	out_npalette
arg	80:68	80:70	5	pp
water	80:68	0:0	6	pp
arg	80:72	80:74	5	pi
water	80:72	0:0	6	pi
water	80:75	0:0	4	;
for	81:3	164:3	2	(y = 0 ;y < h;++ y)
forinit	81:8	81:11	3	y = 0 ;
water	81:8	0:0	4	y
op	81:9	0:0	4	=
water	81:10	0:0	4	0
water	81:11	0:0	4	;
cond	81:13	81:15	3	y < h
water	81:13	0:0	4	y
op	81:14	0:0	4	<
water	81:15	0:0	4	h
forexpr	81:18	81:20	3	++ y
op	81:18	0:0	4	++
water	81:20	0:0	4	y
stmts	82:3	164:3	3	
water	82:3	0:0	4	{
decl	83:6	83:58	4	png_const_bytep	pRow
op	83:27	0:0	4	=
call	83:29	83:57	5	store_image_row
arg	83:45	83:47	6	ps
water	83:45	0:0	7	ps
arg	83:49	83:51	6	pp
water	83:49	0:0	7	pp
arg	83:53	83:54	6	0
water	83:53	0:0	7	0
arg	83:56	83:57	6	y
water	83:56	0:0	7	y
decl	84:6	84:35	4	png_byte	std[STANDARD_ROWMAX]
call	85:6	85:44	4	transform_row
arg	85:20	85:22	5	pp
water	85:20	0:0	6	pp
arg	85:24	85:27	5	std
water	85:24	0:0	6	std
arg	85:29	85:34	5	in_ct
water	85:29	0:0	6	in_ct
arg	85:36	85:41	5	in_bd
water	85:36	0:0	6	in_bd
arg	85:43	85:44	5	y
water	85:43	0:0	6	y
water	85:45	0:0	4	;
if	86:6	155:6	4	(processing)
cond	86:10	86:10	5	processing
water	86:10	0:0	6	processing
stmts	87:6	155:6	5	
water	87:6	0:0	6	{
decl	88:9	88:23	6	unsigned int	x
for	89:9	154:9	6	(x = 0 ;x < w;++ x)
forinit	89:14	89:17	7	x = 0 ;
water	89:14	0:0	8	x
op	89:15	0:0	8	=
water	89:16	0:0	8	0
water	89:17	0:0	8	;
cond	89:19	89:21	7	x < w
water	89:19	0:0	8	x
op	89:20	0:0	8	<
water	89:21	0:0	8	w
forexpr	89:24	89:26	7	++ x
op	89:24	0:0	8	++
water	89:26	0:0	8	x
stmts	90:9	154:9	7	
water	90:9	0:0	8	{
decl	91:12	91:28	8	double	alpha
op	91:25	0:0	8	=
water	91:27	0:0	8	1
water	93:12	0:0	8	PNG_CONST
water	93:22	0:0	8	unsigned
water	93:31	0:0	8	int
water	93:35	0:0	8	in_index
op	93:44	0:0	8	=
water	94:15	0:0	8	in_ct
op	94:21	0:0	8	==
water	94:24	0:0	8	3
water	94:26	0:0	8	?
call	94:28	94:54	8	sample
arg	94:35	94:38	9	std
water	94:35	0:0	10	std
arg	94:40	94:41	9	3
water	94:40	0:0	10	3
arg	94:43	94:48	9	in_bd
water	94:43	0:0	10	in_bd
arg	94:50	94:51	9	x
water	94:50	0:0	10	x
arg	94:53	94:54	9	0
water	94:53	0:0	10	0
water	94:56	0:0	8	:
water	94:58	0:0	8	256
water	94:61	0:0	8	;
water	95:12	0:0	8	PNG_CONST
water	95:22	0:0	8	unsigned
water	95:31	0:0	8	int
water	95:35	0:0	8	out_index
op	95:45	0:0	8	=
water	96:15	0:0	8	out_ct
op	96:22	0:0	8	==
water	96:25	0:0	8	3
water	96:27	0:0	8	?
call	96:29	96:56	8	sample
arg	96:36	96:39	9	std
water	96:36	0:0	10	std
arg	96:41	96:42	9	3
water	96:41	0:0	10	3
arg	96:44	96:50	9	out_bd
water	96:44	0:0	10	out_bd
arg	96:52	96:53	9	x
water	96:52	0:0	10	x
arg	96:55	96:56	9	0
water	96:55	0:0	10	0
water	96:58	0:0	8	:
water	96:60	0:0	8	256
water	96:63	0:0	8	;
if	100:12	126:12	8	(( in_ct & PNG_COLOR_MASK_ALPHA ) != 0 || ( in_ct == 3 && in_is_transparent ))
cond	100:16	101:32	9	( in_ct & PNG_COLOR_MASK_ALPHA ) != 0 || ( in_ct == 3 && in_is_transparent )
water	100:16	0:0	10	(
water	100:17	0:0	10	in_ct
op	100:23	0:0	10	&
water	100:25	0:0	10	PNG_COLOR_MASK_ALPHA
water	100:45	0:0	10	)
op	100:47	0:0	10	!=
water	100:50	0:0	10	0
op	100:52	0:0	10	||
water	100:55	0:0	10	(
water	100:56	0:0	10	in_ct
op	100:62	0:0	10	==
water	100:65	0:0	10	3
op	100:67	0:0	10	&&
water	101:15	0:0	10	in_is_transparent
water	101:32	0:0	10	)
stmts	102:12	126:12	9	
water	102:12	0:0	10	{
water	103:15	0:0	10	PNG_CONST
water	103:25	0:0	10	unsigned
water	103:34	0:0	10	int
water	103:38	0:0	10	input_alpha
op	103:50	0:0	10	=
water	103:52	0:0	10	in_ct
op	103:58	0:0	10	==
water	103:61	0:0	10	3
water	103:63	0:0	10	?
water	104:18	0:0	10	dp
op	104:20	0:0	10	->
water	104:22	0:0	10	this
op	104:26	0:0	10	.
water	104:27	0:0	10	palette
op	104:34	0:0	10	[
water	104:35	0:0	10	in_index
op	104:43	0:0	10	]
op	104:44	0:0	10	.
water	104:45	0:0	10	alpha
water	104:51	0:0	10	:
call	105:18	105:64	10	sample
arg	105:25	105:28	11	std
water	105:25	0:0	12	std
arg	105:30	105:35	11	in_ct
water	105:30	0:0	12	in_ct
arg	105:37	105:42	11	in_bd
water	105:37	0:0	12	in_bd
arg	105:44	105:45	11	x
water	105:44	0:0	12	x
arg	105:47	105:64	11	samples_per_pixel
water	105:47	0:0	12	samples_per_pixel
water	105:65	0:0	10	;
decl	106:15	106:49	10	unsigned int	output_alpha
op	106:41	0:0	10	=
water	106:43	0:0	10	65536
if	107:15	111:15	10	(out_ct == 3)
cond	107:19	107:29	11	out_ct == 3
water	107:19	0:0	12	out_ct
op	107:26	0:0	12	==
water	107:29	0:0	12	3
stmts	108:15	111:15	11	
water	108:15	0:0	12	{
if	109:18	110:64	12	(out_is_transparent)
cond	109:22	109:22	13	out_is_transparent
water	109:22	0:0	14	out_is_transparent
stmts	110:21	110:64	13	
water	110:21	0:0	14	output_alpha
op	110:34	0:0	14	=
water	110:36	0:0	14	out_palette
op	110:47	0:0	14	[
water	110:48	0:0	14	out_index
op	110:57	0:0	14	]
op	110:58	0:0	14	.
water	110:59	0:0	14	alpha
water	110:64	0:0	14	;
water	111:15	0:0	12	}
else	112:15	114:39	10
stmts	112:20	114:39	11	
if	112:20	114:39	12	(( out_ct & PNG_COLOR_MASK_ALPHA ) != 0)
cond	112:24	112:59	13	( out_ct & PNG_COLOR_MASK_ALPHA ) != 0
water	112:24	0:0	14	(
water	112:25	0:0	14	out_ct
op	112:32	0:0	14	&
water	112:34	0:0	14	PNG_COLOR_MASK_ALPHA
water	112:54	0:0	14	)
op	112:56	0:0	14	!=
water	112:59	0:0	14	0
stmts	113:18	114:39	13	
water	113:18	0:0	14	output_alpha
op	113:31	0:0	14	=
call	113:33	114:38	14	sample
arg	113:40	113:44	15	pRow
water	113:40	0:0	16	pRow
arg	113:46	113:52	15	out_ct
water	113:46	0:0	16	out_ct
arg	113:54	113:60	15	out_bd
water	113:54	0:0	16	out_bd
arg	113:62	113:63	15	x
water	113:62	0:0	16	x
arg	114:21	114:38	15	samples_per_pixel
water	114:21	0:0	16	samples_per_pixel
water	114:39	0:0	14	;
if	115:15	117:41	10	(output_alpha != 65536)
cond	115:19	115:35	11	output_alpha != 65536
water	115:19	0:0	12	output_alpha
op	115:32	0:0	12	!=
water	115:35	0:0	12	65536
stmts	116:18	117:41	11	
water	116:18	0:0	12	alpha
op	116:24	0:0	12	=
call	116:26	117:40	12	gamma_component_validate
arg	116:51	116:58	13	"alpha"
water	116:51	0:0	14	"alpha"
arg	116:60	116:63	13	&vi
op	116:60	0:0	14	&
water	116:61	0:0	14	vi
arg	116:65	116:76	13	input_alpha
water	116:65	0:0	14	input_alpha
arg	117:21	117:33	13	output_alpha
water	117:21	0:0	14	output_alpha
arg	117:35	117:37	13	-1
op	117:35	0:0	14	-
water	117:36	0:0	14	1
arg	117:39	117:40	13	0
water	117:39	0:0	14	0
water	117:41	0:0	12	;
else	118:15	125:15	10
stmts	119:15	125:15	11	
water	119:15	0:0	12	{
water	123:18	0:0	12	alpha
op	123:24	0:0	12	=
water	123:26	0:0	12	input_alpha
op	123:38	0:0	12	>>
water	123:41	0:0	12	vi
op	123:43	0:0	12	.
water	123:44	0:0	12	isbit_shift
water	123:55	0:0	12	;
water	124:18	0:0	12	alpha
op	124:24	0:0	12	/=
water	124:27	0:0	12	vi
op	124:29	0:0	12	.
water	124:30	0:0	12	sbit_max
water	124:38	0:0	12	;
water	125:15	0:0	12	}
water	126:12	0:0	10	}
if	128:12	132:36	8	(( in_ct & PNG_COLOR_MASK_COLOR ) == 0)
cond	128:16	128:50	9	( in_ct & PNG_COLOR_MASK_COLOR ) == 0
water	128:16	0:0	10	(
water	128:17	0:0	10	in_ct
op	128:23	0:0	10	&
water	128:25	0:0	10	PNG_COLOR_MASK_COLOR
water	128:45	0:0	10	)
op	128:47	0:0	10	==
water	128:50	0:0	10	0
stmts	129:15	132:36	9	
water	129:15	0:0	10	(
water	129:16	0:0	10	void
water	129:20	0:0	10	)
call	129:21	132:35	10	gamma_component_validate
arg	129:46	129:52	11	"gray"
water	129:46	0:0	12	"gray"
arg	129:54	129:57	11	&vi
op	129:54	0:0	12	&
water	129:55	0:0	12	vi
arg	130:18	130:49	11	sample(std,in_ct,in_bd,x,0)
call	130:18	130:48	12	sample
arg	130:25	130:28	13	std
water	130:25	0:0	14	std
arg	130:30	130:35	13	in_ct
water	130:30	0:0	14	in_ct
arg	130:37	130:42	13	in_bd
water	130:37	0:0	14	in_bd
arg	130:44	130:45	13	x
water	130:44	0:0	14	x
arg	130:47	130:48	13	0
water	130:47	0:0	14	0
arg	131:18	131:52	11	sample(pRow,out_ct,out_bd,x,0)
call	131:18	131:51	12	sample
arg	131:25	131:29	13	pRow
water	131:25	0:0	14	pRow
arg	131:31	131:37	13	out_ct
water	131:31	0:0	14	out_ct
arg	131:39	131:45	13	out_bd
water	131:39	0:0	14	out_bd
arg	131:47	131:48	13	x
water	131:47	0:0	14	x
arg	131:50	131:51	13	0
water	131:50	0:0	14	0
arg	131:54	131:59	11	alpha
water	131:54	0:0	12	alpha
arg	132:18	132:35	11	vi.background_red
water	132:18	0:0	12	vi
op	132:20	0:0	12	.
water	132:21	0:0	12	background_red
water	132:36	0:0	10	;
else	133:12	153:12	8
stmts	134:12	153:12	9	
water	134:12	0:0	10	{
water	135:15	0:0	10	(
water	135:16	0:0	10	void
water	135:20	0:0	10	)
call	135:21	140:42	10	gamma_component_validate
arg	135:46	135:51	11	"red"
water	135:46	0:0	12	"red"
arg	135:53	135:56	11	&vi
op	135:53	0:0	12	&
water	135:54	0:0	12	vi
arg	136:18	137:52	11	in_ct==3?in_palette[in_index].red:sample(std,in_ct,in_bd,x,0)
water	136:18	0:0	12	in_ct
op	136:24	0:0	12	==
water	136:27	0:0	12	3
water	136:29	0:0	12	?
water	136:31	0:0	12	in_palette
op	136:41	0:0	12	[
water	136:42	0:0	12	in_index
op	136:50	0:0	12	]
op	136:51	0:0	12	.
water	136:52	0:0	12	red
water	136:56	0:0	12	:
call	137:21	137:51	12	sample
arg	137:28	137:31	13	std
water	137:28	0:0	14	std
arg	137:33	137:38	13	in_ct
water	137:33	0:0	14	in_ct
arg	137:40	137:45	13	in_bd
water	137:40	0:0	14	in_bd
arg	137:47	137:48	13	x
water	137:47	0:0	14	x
arg	137:50	137:51	13	0
water	137:50	0:0	14	0
arg	138:18	139:55	11	out_ct==3?out_palette[out_index].red:sample(pRow,out_ct,out_bd,x,0)
water	138:18	0:0	12	out_ct
op	138:25	0:0	12	==
water	138:28	0:0	12	3
water	138:30	0:0	12	?
water	138:32	0:0	12	out_palette
op	138:43	0:0	12	[
water	138:44	0:0	12	out_index
op	138:53	0:0	12	]
op	138:54	0:0	12	.
water	138:55	0:0	12	red
water	138:59	0:0	12	:
call	139:21	139:54	12	sample
arg	139:28	139:32	13	pRow
water	139:28	0:0	14	pRow
arg	139:34	139:40	13	out_ct
water	139:34	0:0	14	out_ct
arg	139:42	139:48	13	out_bd
water	139:42	0:0	14	out_bd
arg	139:50	139:51	13	x
water	139:50	0:0	14	x
arg	139:53	139:54	13	0
water	139:53	0:0	14	0
arg	140:18	140:23	11	alpha
water	140:18	0:0	12	alpha
arg	140:25	140:42	11	vi.background_red
water	140:25	0:0	12	vi
op	140:27	0:0	12	.
water	140:28	0:0	12	background_red
water	140:43	0:0	10	;
water	141:15	0:0	10	(
water	141:16	0:0	10	void
water	141:20	0:0	10	)
call	141:21	146:44	10	gamma_component_validate
arg	141:46	141:53	11	"green"
water	141:46	0:0	12	"green"
arg	141:55	141:58	11	&vi
op	141:55	0:0	12	&
water	141:56	0:0	12	vi
arg	142:18	143:52	11	in_ct==3?in_palette[in_index].green:sample(std,in_ct,in_bd,x,1)
water	142:18	0:0	12	in_ct
op	142:24	0:0	12	==
water	142:27	0:0	12	3
water	142:29	0:0	12	?
water	142:31	0:0	12	in_palette
op	142:41	0:0	12	[
water	142:42	0:0	12	in_index
op	142:50	0:0	12	]
op	142:51	0:0	12	.
water	142:52	0:0	12	green
water	142:58	0:0	12	:
call	143:21	143:51	12	sample
arg	143:28	143:31	13	std
water	143:28	0:0	14	std
arg	143:33	143:38	13	in_ct
water	143:33	0:0	14	in_ct
arg	143:40	143:45	13	in_bd
water	143:40	0:0	14	in_bd
arg	143:47	143:48	13	x
water	143:47	0:0	14	x
arg	143:50	143:51	13	1
water	143:50	0:0	14	1
arg	144:18	145:55	11	out_ct==3?out_palette[out_index].green:sample(pRow,out_ct,out_bd,x,1)
water	144:18	0:0	12	out_ct
op	144:25	0:0	12	==
water	144:28	0:0	12	3
water	144:30	0:0	12	?
water	144:32	0:0	12	out_palette
op	144:43	0:0	12	[
water	144:44	0:0	12	out_index
op	144:53	0:0	12	]
op	144:54	0:0	12	.
water	144:55	0:0	12	green
water	144:61	0:0	12	:
call	145:21	145:54	12	sample
arg	145:28	145:32	13	pRow
water	145:28	0:0	14	pRow
arg	145:34	145:40	13	out_ct
water	145:34	0:0	14	out_ct
arg	145:42	145:48	13	out_bd
water	145:42	0:0	14	out_bd
arg	145:50	145:51	13	x
water	145:50	0:0	14	x
arg	145:53	145:54	13	1
water	145:53	0:0	14	1
arg	146:18	146:23	11	alpha
water	146:18	0:0	12	alpha
arg	146:25	146:44	11	vi.background_green
water	146:25	0:0	12	vi
op	146:27	0:0	12	.
water	146:28	0:0	12	background_green
water	146:45	0:0	10	;
water	147:15	0:0	10	(
water	147:16	0:0	10	void
water	147:20	0:0	10	)
call	147:21	152:43	10	gamma_component_validate
arg	147:46	147:52	11	"blue"
water	147:46	0:0	12	"blue"
arg	147:54	147:57	11	&vi
op	147:54	0:0	12	&
water	147:55	0:0	12	vi
arg	148:18	149:52	11	in_ct==3?in_palette[in_index].blue:sample(std,in_ct,in_bd,x,2)
water	148:18	0:0	12	in_ct
op	148:24	0:0	12	==
water	148:27	0:0	12	3
water	148:29	0:0	12	?
water	148:31	0:0	12	in_palette
op	148:41	0:0	12	[
water	148:42	0:0	12	in_index
op	148:50	0:0	12	]
op	148:51	0:0	12	.
water	148:52	0:0	12	blue
water	148:57	0:0	12	:
call	149:21	149:51	12	sample
arg	149:28	149:31	13	std
water	149:28	0:0	14	std
arg	149:33	149:38	13	in_ct
water	149:33	0:0	14	in_ct
arg	149:40	149:45	13	in_bd
water	149:40	0:0	14	in_bd
arg	149:47	149:48	13	x
water	149:47	0:0	14	x
arg	149:50	149:51	13	2
water	149:50	0:0	14	2
arg	150:18	151:55	11	out_ct==3?out_palette[out_index].blue:sample(pRow,out_ct,out_bd,x,2)
water	150:18	0:0	12	out_ct
op	150:25	0:0	12	==
water	150:28	0:0	12	3
water	150:30	0:0	12	?
water	150:32	0:0	12	out_palette
op	150:43	0:0	12	[
water	150:44	0:0	12	out_index
op	150:53	0:0	12	]
op	150:54	0:0	12	.
water	150:55	0:0	12	blue
water	150:60	0:0	12	:
call	151:21	151:54	12	sample
arg	151:28	151:32	13	pRow
water	151:28	0:0	14	pRow
arg	151:34	151:40	13	out_ct
water	151:34	0:0	14	out_ct
arg	151:42	151:48	13	out_bd
water	151:42	0:0	14	out_bd
arg	151:50	151:51	13	x
water	151:50	0:0	14	x
arg	151:53	151:54	13	2
water	151:53	0:0	14	2
arg	152:18	152:23	11	alpha
water	152:18	0:0	12	alpha
arg	152:25	152:43	11	vi.background_blue
water	152:25	0:0	12	vi
op	152:27	0:0	12	.
water	152:28	0:0	12	background_blue
water	152:44	0:0	10	;
water	153:12	0:0	10	}
water	154:9	0:0	8	}
water	155:6	0:0	6	}
else	156:6	163:6	4
stmts	156:11	163:6	5	
if	156:11	163:6	6	(memcmp (std ,pRow ,cbRow ) != 0)
cond	156:15	156:43	7	memcmp (std ,pRow ,cbRow ) != 0
call	156:15	156:38	8	memcmp
arg	156:22	156:25	9	std
water	156:22	0:0	10	std
arg	156:27	156:31	9	pRow
water	156:27	0:0	10	pRow
arg	156:33	156:38	9	cbRow
water	156:33	0:0	10	cbRow
op	156:40	0:0	8	!=
water	156:43	0:0	8	0
stmts	157:6	163:6	7	
water	157:6	0:0	8	{
decl	158:9	158:21	8	char	msg[64]
call	160:9	161:28	8	sprintf
arg	160:17	160:20	9	msg
water	160:17	0:0	10	msg
arg	160:22	160:62	9	"gamma: below threshold row %lu changed"
water	160:22	0:0	10	"gamma: below threshold row %lu changed"
arg	161:12	161:28	9	(unsignedlong)y
water	161:12	0:0	10	(
water	161:13	0:0	10	unsigned
water	161:22	0:0	10	long
water	161:26	0:0	10	)
water	161:27	0:0	10	y
water	161:29	0:0	8	;
call	162:9	162:26	8	png_error
arg	162:19	162:21	9	pp
water	162:19	0:0	10	pp
arg	162:23	162:26	9	msg
water	162:23	0:0	10	msg
water	162:27	0:0	8	;
water	163:6	0:0	8	}
water	164:3	0:0	4	}
water	165:3	0:0	2	dp
op	165:5	0:0	2	->
water	165:7	0:0	2	this
op	165:11	0:0	2	.
water	165:12	0:0	2	ps
op	165:14	0:0	2	->
water	165:16	0:0	2	validated
op	165:26	0:0	2	=
water	165:28	0:0	2	1
water	165:29	0:0	2	;
