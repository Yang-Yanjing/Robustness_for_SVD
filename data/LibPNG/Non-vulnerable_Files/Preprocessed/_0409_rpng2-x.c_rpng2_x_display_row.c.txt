func	2:0	200:0	0	static void	rpng2_x_display_row
params	2:31	0:0	1	
param	2:32	2:39	2	ulg	row
stmnts	0:0	199:4	1	
decl	4:4	4:36	2	uch	bg_red
op	4:17	0:0	2	=
water	4:19	0:0	2	rpng2_info
op	4:29	0:0	2	.
water	4:30	0:0	2	bg_red
decl	5:4	5:38	2	uch	bg_green
op	5:17	0:0	2	=
water	5:19	0:0	2	rpng2_info
op	5:29	0:0	2	.
water	5:30	0:0	2	bg_green
decl	6:4	6:37	2	uch	bg_blue
op	6:17	0:0	2	=
water	6:19	0:0	2	rpng2_info
op	6:29	0:0	2	.
water	6:30	0:0	2	bg_blue
decl	7:4	7:24	2	uch	*src
water	7:12	0:0	2	,
decl	7:4	7:24	2	uch	*src2
op	7:19	0:0	2	=
water	7:20	0:0	2	NULL
decl	8:4	8:14	2	char	*dest
decl	9:4	9:18	2	uch	r
water	9:9	0:0	2	,
decl	9:4	9:18	2	uch	g
water	9:12	0:0	2	,
decl	9:4	9:18	2	uch	b
water	9:15	0:0	2	,
decl	9:4	9:18	2	uch	a
decl	10:4	10:48	2	int	ximage_rowbytes
op	10:24	0:0	2	=
water	10:26	0:0	2	ximage
op	10:32	0:0	2	->
water	10:34	0:0	2	bytes_per_line
decl	11:4	11:16	2	ulg	i
water	11:9	0:0	2	,
decl	11:4	11:16	2	ulg	pixel
water	12:4	0:0	2	static
water	12:11	0:0	2	int
water	12:15	0:0	2	rows
op	12:19	0:0	2	=
water	12:20	0:0	2	0
water	12:21	0:0	2	,
water	12:23	0:0	2	prevpass
op	12:31	0:0	2	=
water	12:32	0:0	2	(
op	12:33	0:0	2	-
water	12:34	0:0	2	1
water	12:35	0:0	2	)
water	12:36	0:0	2	;
water	13:4	0:0	2	static
water	13:11	0:0	2	ulg
water	13:15	0:0	2	firstrow
water	13:23	0:0	2	;
call	19:4	19:55	2	Trace
arg	19:10	19:55	3	(stderr,"beginning rpng2_x_display_row()\n")
water	19:10	0:0	4	(
water	19:11	0:0	4	stderr
water	19:17	0:0	4	,
water	19:19	0:0	4	"beginning rpng2_x_display_row()\n"
water	19:54	0:0	4	)
water	20:4	0:0	2	if
water	20:7	0:0	2	(
water	20:8	0:0	2	rpng2_info
op	20:18	0:0	2	.
water	20:19	0:0	2	pass
op	20:24	0:0	2	!=
water	20:27	0:0	2	prevpass
water	20:35	0:0	2	)
water	20:37	0:0	2	{
water	21:8	0:0	2	if
water	21:11	0:0	2	(
water	21:12	0:0	2	pause_after_pass
op	21:29	0:0	2	&&
water	21:32	0:0	2	rpng2_info
op	21:42	0:0	2	.
water	21:43	0:0	2	pass
op	21:48	0:0	2	>
water	21:50	0:0	2	0
water	21:51	0:0	2	)
water	21:53	0:0	2	{
water	22:12	0:0	2	XEvent
water	22:19	0:0	2	e
water	22:20	0:0	2	;
water	23:12	0:0	2	KeySym
water	23:19	0:0	2	k
water	23:20	0:0	2	;
call	24:12	26:36	2	fprintf
arg	24:20	24:26	3	stderr
water	24:20	0:0	4	stderr
arg	25:14	25:77	3	"%s:  end of pass %d of 7; click in image window to continue\n"
water	25:14	0:0	4	"%s:  end of pass %d of 7; click in image window to continue\n"
arg	26:14	26:22	3	PROGNAME
water	26:14	0:0	4	PROGNAME
arg	26:24	26:36	3	prevpass+1
water	26:24	0:0	4	prevpass
op	26:33	0:0	4	+
water	26:35	0:0	4	1
water	26:37	0:0	2	;
water	27:12	0:0	2	do
call	28:16	28:38	2	XNextEvent
arg	28:27	28:34	3	display
water	28:27	0:0	4	display
arg	28:36	28:38	3	&e
op	28:36	0:0	4	&
water	28:37	0:0	4	e
water	28:39	0:0	2	;
water	29:12	0:0	2	while
water	29:18	0:0	2	(
op	29:19	0:0	2	!
call	29:20	29:28	2	QUIT
arg	29:25	29:26	3	e
water	29:25	0:0	4	e
arg	29:27	29:28	3	k
water	29:27	0:0	4	k
water	29:29	0:0	2	)
water	29:30	0:0	2	;
water	30:8	0:0	2	}
call	31:8	31:76	2	fprintf
arg	31:16	31:22	3	stderr
water	31:16	0:0	4	stderr
arg	31:24	31:45	3	"%s:  pass %d of 7\r"
water	31:24	0:0	4	"%s:  pass %d of 7\r"
arg	31:47	31:55	3	PROGNAME
water	31:47	0:0	4	PROGNAME
arg	31:57	31:76	3	rpng2_info.pass+1
water	31:57	0:0	4	rpng2_info
op	31:67	0:0	4	.
water	31:68	0:0	4	pass
op	31:73	0:0	4	+
water	31:75	0:0	4	1
water	31:77	0:0	2	;
call	32:8	32:21	2	fflush
arg	32:15	32:21	3	stderr
water	32:15	0:0	4	stderr
water	32:22	0:0	2	;
water	33:8	0:0	2	prevpass
op	33:17	0:0	2	=
water	33:19	0:0	2	rpng2_info
op	33:29	0:0	2	.
water	33:30	0:0	2	pass
water	33:34	0:0	2	;
water	34:4	0:0	2	}
water	35:4	0:0	2	if
water	35:7	0:0	2	(
water	35:8	0:0	2	rows
op	35:13	0:0	2	==
water	35:16	0:0	2	0
water	35:17	0:0	2	)
water	36:8	0:0	2	firstrow
op	36:17	0:0	2	=
water	36:19	0:0	2	row
water	36:22	0:0	2	;
op	37:4	0:0	2	++
water	37:6	0:0	2	rows
water	37:10	0:0	2	;
if	44:4	118:4	2	(depth == 24 || depth == 32)
cond	44:8	44:32	3	depth == 24 || depth == 32
water	44:8	0:0	4	depth
op	44:14	0:0	4	==
water	44:17	0:0	4	24
op	44:20	0:0	4	||
water	44:23	0:0	4	depth
op	44:29	0:0	4	==
water	44:32	0:0	4	32
stmts	44:36	118:4	3	
water	44:36	0:0	4	{
decl	45:8	45:28	4	ulg	red
water	45:15	0:0	4	,
decl	45:8	45:28	4	ulg	green
water	45:22	0:0	4	,
decl	45:8	45:28	4	ulg	blue
decl	46:8	46:40	4	int	bpp
op	46:16	0:0	4	=
water	46:18	0:0	4	ximage
op	46:24	0:0	4	->
water	46:26	0:0	4	bits_per_pixel
water	47:8	0:0	4	src
op	47:12	0:0	4	=
water	47:14	0:0	4	rpng2_info
op	47:24	0:0	4	.
water	47:25	0:0	4	image_data
op	47:36	0:0	4	+
water	47:38	0:0	4	row
op	47:41	0:0	4	*
water	47:42	0:0	4	rpng2_info
op	47:52	0:0	4	.
water	47:53	0:0	4	rowbytes
water	47:61	0:0	4	;
if	48:8	49:44	4	(bg_image)
cond	48:12	48:12	5	bg_image
water	48:12	0:0	6	bg_image
stmts	49:12	49:44	5	
water	49:12	0:0	6	src2
op	49:17	0:0	6	=
water	49:19	0:0	6	bg_data
op	49:27	0:0	6	+
water	49:29	0:0	6	row
op	49:32	0:0	6	*
water	49:33	0:0	6	bg_rowbytes
water	49:44	0:0	6	;
water	50:8	0:0	4	dest
op	50:13	0:0	4	=
water	50:15	0:0	4	ximage
op	50:21	0:0	4	->
water	50:23	0:0	4	data
op	50:28	0:0	4	+
water	50:30	0:0	4	row
op	50:33	0:0	4	*
water	50:34	0:0	4	ximage_rowbytes
water	50:49	0:0	4	;
if	51:8	73:8	4	(rpng2_info . channels == 3)
cond	51:12	51:35	5	rpng2_info . channels == 3
water	51:12	0:0	6	rpng2_info
op	51:22	0:0	6	.
water	51:23	0:0	6	channels
op	51:32	0:0	6	==
water	51:35	0:0	6	3
stmts	51:38	73:8	5	
water	51:38	0:0	6	{
for	52:12	72:12	6	(i = rpng2_info . width ;i > 0;-- i)
forinit	52:17	52:37	7	i = rpng2_info . width ;
water	52:17	0:0	8	i
op	52:19	0:0	8	=
water	52:21	0:0	8	rpng2_info
op	52:31	0:0	8	.
water	52:32	0:0	8	width
water	52:37	0:0	8	;
cond	52:40	52:44	7	i > 0
water	52:40	0:0	8	i
op	52:42	0:0	8	>
water	52:44	0:0	8	0
forexpr	52:48	52:50	7	-- i
op	52:48	0:0	8	--
water	52:50	0:0	8	i
stmts	52:53	72:12	7	
water	52:53	0:0	8	{
water	53:16	0:0	8	red
op	53:22	0:0	8	=
op	53:24	0:0	8	*
water	53:25	0:0	8	src
op	53:28	0:0	8	++
water	53:30	0:0	8	;
water	54:16	0:0	8	green
op	54:22	0:0	8	=
op	54:24	0:0	8	*
water	54:25	0:0	8	src
op	54:28	0:0	8	++
water	54:30	0:0	8	;
water	55:16	0:0	8	blue
op	55:22	0:0	8	=
op	55:24	0:0	8	*
water	55:25	0:0	8	src
op	55:28	0:0	8	++
water	55:30	0:0	8	;
water	56:16	0:0	8	pixel
op	56:22	0:0	8	=
water	56:24	0:0	8	(
water	56:25	0:0	8	red
op	56:31	0:0	8	<<
water	56:34	0:0	8	RShift
water	56:40	0:0	8	)
op	56:42	0:0	8	|
water	57:24	0:0	8	(
water	57:25	0:0	8	green
op	57:31	0:0	8	<<
water	57:34	0:0	8	GShift
water	57:40	0:0	8	)
op	57:42	0:0	8	|
water	58:24	0:0	8	(
water	58:25	0:0	8	blue
op	58:31	0:0	8	<<
water	58:34	0:0	8	BShift
water	58:40	0:0	8	)
water	58:41	0:0	8	;
if	60:16	65:16	8	(bpp == 32)
cond	60:20	60:27	9	bpp == 32
water	60:20	0:0	10	bpp
op	60:24	0:0	10	==
water	60:27	0:0	10	32
stmts	60:31	65:16	9	
water	60:31	0:0	10	{
op	61:20	0:0	10	*
water	61:21	0:0	10	dest
op	61:25	0:0	10	++
op	61:28	0:0	10	=
call	61:30	61:57	10	(char)
arg	61:37	61:57	11	(pixel>>24)&0xff
water	61:37	0:0	12	(
water	61:38	0:0	12	pixel
op	61:44	0:0	12	>>
water	61:47	0:0	12	24
water	61:49	0:0	12	)
op	61:51	0:0	12	&
water	61:53	0:0	12	0
water	61:54	0:0	12	xff
water	61:58	0:0	10	;
op	62:20	0:0	10	*
water	62:21	0:0	10	dest
op	62:25	0:0	10	++
op	62:28	0:0	10	=
call	62:30	62:57	10	(char)
arg	62:37	62:57	11	(pixel>>16)&0xff
water	62:37	0:0	12	(
water	62:38	0:0	12	pixel
op	62:44	0:0	12	>>
water	62:47	0:0	12	16
water	62:49	0:0	12	)
op	62:51	0:0	12	&
water	62:53	0:0	12	0
water	62:54	0:0	12	xff
water	62:58	0:0	10	;
op	63:20	0:0	10	*
water	63:21	0:0	10	dest
op	63:25	0:0	10	++
op	63:28	0:0	10	=
call	63:30	63:57	10	(char)
arg	63:37	63:57	11	(pixel>>8)&0xff
water	63:37	0:0	12	(
water	63:38	0:0	12	pixel
op	63:44	0:0	12	>>
water	63:48	0:0	12	8
water	63:49	0:0	12	)
op	63:51	0:0	12	&
water	63:53	0:0	12	0
water	63:54	0:0	12	xff
water	63:58	0:0	10	;
op	64:20	0:0	10	*
water	64:21	0:0	10	dest
op	64:25	0:0	10	++
op	64:28	0:0	10	=
call	64:30	64:57	10	(char)
arg	64:38	64:57	11	pixel&0xff
water	64:38	0:0	12	pixel
op	64:51	0:0	12	&
water	64:53	0:0	12	0
water	64:54	0:0	12	xff
water	64:58	0:0	10	;
water	65:16	0:0	10	}
else	65:18	71:16	8
stmts	65:23	71:16	9	
water	65:23	0:0	10	{
op	68:20	0:0	10	*
water	68:21	0:0	10	dest
op	68:25	0:0	10	++
op	68:28	0:0	10	=
call	68:30	68:57	10	(char)
arg	68:37	68:57	11	(pixel>>16)&0xff
water	68:37	0:0	12	(
water	68:38	0:0	12	pixel
op	68:44	0:0	12	>>
water	68:47	0:0	12	16
water	68:49	0:0	12	)
op	68:51	0:0	12	&
water	68:53	0:0	12	0
water	68:54	0:0	12	xff
water	68:58	0:0	10	;
op	69:20	0:0	10	*
water	69:21	0:0	10	dest
op	69:25	0:0	10	++
op	69:28	0:0	10	=
call	69:30	69:57	10	(char)
arg	69:37	69:57	11	(pixel>>8)&0xff
water	69:37	0:0	12	(
water	69:38	0:0	12	pixel
op	69:44	0:0	12	>>
water	69:48	0:0	12	8
water	69:49	0:0	12	)
op	69:51	0:0	12	&
water	69:53	0:0	12	0
water	69:54	0:0	12	xff
water	69:58	0:0	10	;
op	70:20	0:0	10	*
water	70:21	0:0	10	dest
op	70:25	0:0	10	++
op	70:28	0:0	10	=
call	70:30	70:57	10	(char)
arg	70:38	70:57	11	pixel&0xff
water	70:38	0:0	12	pixel
op	70:51	0:0	12	&
water	70:53	0:0	12	0
water	70:54	0:0	12	xff
water	70:58	0:0	10	;
water	71:16	0:0	10	}
water	72:12	0:0	8	}
water	73:8	0:0	6	}
else	73:10	117:8	4
stmts	73:16	117:8	5	
water	73:16	0:0	6	{
for	74:12	116:12	6	(i = rpng2_info . width ;i > 0;-- i)
forinit	74:17	74:37	7	i = rpng2_info . width ;
water	74:17	0:0	8	i
op	74:19	0:0	8	=
water	74:21	0:0	8	rpng2_info
op	74:31	0:0	8	.
water	74:32	0:0	8	width
water	74:37	0:0	8	;
cond	74:40	74:44	7	i > 0
water	74:40	0:0	8	i
op	74:42	0:0	8	>
water	74:44	0:0	8	0
forexpr	74:48	74:50	7	-- i
op	74:48	0:0	8	--
water	74:50	0:0	8	i
stmts	74:53	116:12	7	
water	74:53	0:0	8	{
water	75:16	0:0	8	r
op	75:18	0:0	8	=
op	75:20	0:0	8	*
water	75:21	0:0	8	src
op	75:24	0:0	8	++
water	75:26	0:0	8	;
water	76:16	0:0	8	g
op	76:18	0:0	8	=
op	76:20	0:0	8	*
water	76:21	0:0	8	src
op	76:24	0:0	8	++
water	76:26	0:0	8	;
water	77:16	0:0	8	b
op	77:18	0:0	8	=
op	77:20	0:0	8	*
water	77:21	0:0	8	src
op	77:24	0:0	8	++
water	77:26	0:0	8	;
water	78:16	0:0	8	a
op	78:18	0:0	8	=
op	78:20	0:0	8	*
water	78:21	0:0	8	src
op	78:24	0:0	8	++
water	78:26	0:0	8	;
if	79:16	83:16	8	(bg_image)
cond	79:20	79:20	9	bg_image
water	79:20	0:0	10	bg_image
stmts	79:30	83:16	9	
water	79:30	0:0	10	{
water	80:20	0:0	10	bg_red
op	80:29	0:0	10	=
op	80:31	0:0	10	*
water	80:32	0:0	10	src2
op	80:36	0:0	10	++
water	80:38	0:0	10	;
water	81:20	0:0	10	bg_green
op	81:29	0:0	10	=
op	81:31	0:0	10	*
water	81:32	0:0	10	src2
op	81:36	0:0	10	++
water	81:38	0:0	10	;
water	82:20	0:0	10	bg_blue
op	82:29	0:0	10	=
op	82:31	0:0	10	*
water	82:32	0:0	10	src2
op	82:36	0:0	10	++
water	82:38	0:0	10	;
water	83:16	0:0	10	}
if	84:16	88:16	8	(a == 255)
cond	84:20	84:25	9	a == 255
water	84:20	0:0	10	a
op	84:22	0:0	10	==
water	84:25	0:0	10	255
stmts	84:30	88:16	9	
water	84:30	0:0	10	{
water	85:20	0:0	10	red
op	85:26	0:0	10	=
water	85:28	0:0	10	r
water	85:29	0:0	10	;
water	86:20	0:0	10	green
op	86:26	0:0	10	=
water	86:28	0:0	10	g
water	86:29	0:0	10	;
water	87:20	0:0	10	blue
op	87:26	0:0	10	=
water	87:28	0:0	10	b
water	87:29	0:0	10	;
water	88:16	0:0	10	}
else	88:18	92:16	8
stmts	88:23	92:16	9	
if	88:23	92:16	10	(a == 0)
cond	88:27	88:32	11	a == 0
water	88:27	0:0	12	a
op	88:29	0:0	12	==
water	88:32	0:0	12	0
stmts	88:35	92:16	11	
water	88:35	0:0	12	{
water	89:20	0:0	12	red
op	89:26	0:0	12	=
water	89:28	0:0	12	bg_red
water	89:34	0:0	12	;
water	90:20	0:0	12	green
op	90:26	0:0	12	=
water	90:28	0:0	12	bg_green
water	90:36	0:0	12	;
water	91:20	0:0	12	blue
op	91:26	0:0	12	=
water	91:28	0:0	12	bg_blue
water	91:35	0:0	12	;
water	92:16	0:0	12	}
else	92:18	99:16	8
stmts	92:23	99:16	9	
water	92:23	0:0	10	{
call	96:20	96:55	10	alpha_composite
arg	96:36	96:39	11	red
water	96:36	0:0	12	red
arg	96:43	96:44	11	r
water	96:43	0:0	12	r
arg	96:46	96:47	11	a
water	96:46	0:0	12	a
arg	96:49	96:55	11	bg_red
water	96:49	0:0	12	bg_red
water	96:56	0:0	10	;
call	97:20	97:57	10	alpha_composite
arg	97:36	97:41	11	green
water	97:36	0:0	12	green
arg	97:43	97:44	11	g
water	97:43	0:0	12	g
arg	97:46	97:47	11	a
water	97:46	0:0	12	a
arg	97:49	97:57	11	bg_green
water	97:49	0:0	12	bg_green
water	97:58	0:0	10	;
call	98:20	98:56	10	alpha_composite
arg	98:36	98:40	11	blue
water	98:36	0:0	12	blue
arg	98:43	98:44	11	b
water	98:43	0:0	12	b
arg	98:46	98:47	11	a
water	98:46	0:0	12	a
arg	98:49	98:56	11	bg_blue
water	98:49	0:0	12	bg_blue
water	98:57	0:0	10	;
water	99:16	0:0	10	}
water	100:16	0:0	8	pixel
op	100:22	0:0	8	=
water	100:24	0:0	8	(
water	100:25	0:0	8	red
op	100:31	0:0	8	<<
water	100:34	0:0	8	RShift
water	100:40	0:0	8	)
op	100:42	0:0	8	|
water	101:24	0:0	8	(
water	101:25	0:0	8	green
op	101:31	0:0	8	<<
water	101:34	0:0	8	GShift
water	101:40	0:0	8	)
op	101:42	0:0	8	|
water	102:24	0:0	8	(
water	102:25	0:0	8	blue
op	102:31	0:0	8	<<
water	102:34	0:0	8	BShift
water	102:40	0:0	8	)
water	102:41	0:0	8	;
if	104:16	109:16	8	(bpp == 32)
cond	104:20	104:27	9	bpp == 32
water	104:20	0:0	10	bpp
op	104:24	0:0	10	==
water	104:27	0:0	10	32
stmts	104:31	109:16	9	
water	104:31	0:0	10	{
op	105:20	0:0	10	*
water	105:21	0:0	10	dest
op	105:25	0:0	10	++
op	105:28	0:0	10	=
call	105:30	105:57	10	(char)
arg	105:37	105:57	11	(pixel>>24)&0xff
water	105:37	0:0	12	(
water	105:38	0:0	12	pixel
op	105:44	0:0	12	>>
water	105:47	0:0	12	24
water	105:49	0:0	12	)
op	105:51	0:0	12	&
water	105:53	0:0	12	0
water	105:54	0:0	12	xff
water	105:58	0:0	10	;
op	106:20	0:0	10	*
water	106:21	0:0	10	dest
op	106:25	0:0	10	++
op	106:28	0:0	10	=
call	106:30	106:57	10	(char)
arg	106:37	106:57	11	(pixel>>16)&0xff
water	106:37	0:0	12	(
water	106:38	0:0	12	pixel
op	106:44	0:0	12	>>
water	106:47	0:0	12	16
water	106:49	0:0	12	)
op	106:51	0:0	12	&
water	106:53	0:0	12	0
water	106:54	0:0	12	xff
water	106:58	0:0	10	;
op	107:20	0:0	10	*
water	107:21	0:0	10	dest
op	107:25	0:0	10	++
op	107:28	0:0	10	=
call	107:30	107:57	10	(char)
arg	107:37	107:57	11	(pixel>>8)&0xff
water	107:37	0:0	12	(
water	107:38	0:0	12	pixel
op	107:44	0:0	12	>>
water	107:48	0:0	12	8
water	107:49	0:0	12	)
op	107:51	0:0	12	&
water	107:53	0:0	12	0
water	107:54	0:0	12	xff
water	107:58	0:0	10	;
op	108:20	0:0	10	*
water	108:21	0:0	10	dest
op	108:25	0:0	10	++
op	108:28	0:0	10	=
call	108:30	108:57	10	(char)
arg	108:38	108:57	11	pixel&0xff
water	108:38	0:0	12	pixel
op	108:51	0:0	12	&
water	108:53	0:0	12	0
water	108:54	0:0	12	xff
water	108:58	0:0	10	;
water	109:16	0:0	10	}
else	109:18	115:16	8
stmts	109:23	115:16	9	
water	109:23	0:0	10	{
op	112:20	0:0	10	*
water	112:21	0:0	10	dest
op	112:25	0:0	10	++
op	112:28	0:0	10	=
call	112:30	112:57	10	(char)
arg	112:37	112:57	11	(pixel>>16)&0xff
water	112:37	0:0	12	(
water	112:38	0:0	12	pixel
op	112:44	0:0	12	>>
water	112:47	0:0	12	16
water	112:49	0:0	12	)
op	112:51	0:0	12	&
water	112:53	0:0	12	0
water	112:54	0:0	12	xff
water	112:58	0:0	10	;
op	113:20	0:0	10	*
water	113:21	0:0	10	dest
op	113:25	0:0	10	++
op	113:28	0:0	10	=
call	113:30	113:57	10	(char)
arg	113:37	113:57	11	(pixel>>8)&0xff
water	113:37	0:0	12	(
water	113:38	0:0	12	pixel
op	113:44	0:0	12	>>
water	113:48	0:0	12	8
water	113:49	0:0	12	)
op	113:51	0:0	12	&
water	113:53	0:0	12	0
water	113:54	0:0	12	xff
water	113:58	0:0	10	;
op	114:20	0:0	10	*
water	114:21	0:0	10	dest
op	114:25	0:0	10	++
op	114:28	0:0	10	=
call	114:30	114:57	10	(char)
arg	114:38	114:57	11	pixel&0xff
water	114:38	0:0	12	pixel
op	114:51	0:0	12	&
water	114:53	0:0	12	0
water	114:54	0:0	12	xff
water	114:58	0:0	10	;
water	115:16	0:0	10	}
water	116:12	0:0	8	}
water	117:8	0:0	6	}
water	118:4	0:0	4	}
else	118:6	177:4	2
stmts	118:11	177:4	3	
if	118:11	177:4	4	(depth == 16)
cond	118:15	118:24	5	depth == 16
water	118:15	0:0	6	depth
op	118:21	0:0	6	==
water	118:24	0:0	6	16
stmts	118:28	177:4	5	
water	118:28	0:0	6	{
decl	119:8	119:28	6	ush	red
water	119:15	0:0	6	,
decl	119:8	119:28	6	ush	green
water	119:22	0:0	6	,
decl	119:8	119:28	6	ush	blue
water	120:8	0:0	6	src
op	120:12	0:0	6	=
water	120:14	0:0	6	rpng2_info
op	120:24	0:0	6	.
water	120:25	0:0	6	row_pointers
op	120:37	0:0	6	[
water	120:38	0:0	6	row
op	120:41	0:0	6	]
water	120:42	0:0	6	;
if	121:8	122:44	6	(bg_image)
cond	121:12	121:12	7	bg_image
water	121:12	0:0	8	bg_image
stmts	122:12	122:44	7	
water	122:12	0:0	8	src2
op	122:17	0:0	8	=
water	122:19	0:0	8	bg_data
op	122:27	0:0	8	+
water	122:29	0:0	8	row
op	122:32	0:0	8	*
water	122:33	0:0	8	bg_rowbytes
water	122:44	0:0	8	;
water	123:8	0:0	6	dest
op	123:13	0:0	6	=
water	123:15	0:0	6	ximage
op	123:21	0:0	6	->
water	123:23	0:0	6	data
op	123:28	0:0	6	+
water	123:30	0:0	6	row
op	123:33	0:0	6	*
water	123:34	0:0	6	ximage_rowbytes
water	123:49	0:0	6	;
if	124:8	139:8	6	(rpng2_info . channels == 3)
cond	124:12	124:35	7	rpng2_info . channels == 3
water	124:12	0:0	8	rpng2_info
op	124:22	0:0	8	.
water	124:23	0:0	8	channels
op	124:32	0:0	8	==
water	124:35	0:0	8	3
stmts	124:38	139:8	7	
water	124:38	0:0	8	{
for	125:12	138:12	8	(i = rpng2_info . width ;i > 0;-- i)
forinit	125:17	125:37	9	i = rpng2_info . width ;
water	125:17	0:0	10	i
op	125:19	0:0	10	=
water	125:21	0:0	10	rpng2_info
op	125:31	0:0	10	.
water	125:32	0:0	10	width
water	125:37	0:0	10	;
cond	125:40	125:44	9	i > 0
water	125:40	0:0	10	i
op	125:42	0:0	10	>
water	125:44	0:0	10	0
forexpr	125:48	125:50	9	-- i
op	125:48	0:0	10	--
water	125:50	0:0	10	i
stmts	125:53	138:12	9	
water	125:53	0:0	10	{
water	126:16	0:0	10	red
op	126:22	0:0	10	=
water	126:24	0:0	10	(
call	126:25	126:35	10	(ush)
arg	126:31	126:35	11	*src
op	126:31	0:0	12	*
water	126:32	0:0	12	src
op	126:37	0:0	10	<<
water	126:40	0:0	10	8
water	126:41	0:0	10	)
water	126:42	0:0	10	;
op	127:16	0:0	10	++
water	127:18	0:0	10	src
water	127:21	0:0	10	;
water	128:16	0:0	10	green
op	128:22	0:0	10	=
water	128:24	0:0	10	(
call	128:25	128:35	10	(ush)
arg	128:31	128:35	11	*src
op	128:31	0:0	12	*
water	128:32	0:0	12	src
op	128:37	0:0	10	<<
water	128:40	0:0	10	8
water	128:41	0:0	10	)
water	128:42	0:0	10	;
op	129:16	0:0	10	++
water	129:18	0:0	10	src
water	129:21	0:0	10	;
water	130:16	0:0	10	blue
op	130:22	0:0	10	=
water	130:24	0:0	10	(
call	130:25	130:35	10	(ush)
arg	130:31	130:35	11	*src
op	130:31	0:0	12	*
water	130:32	0:0	12	src
op	130:37	0:0	10	<<
water	130:40	0:0	10	8
water	130:41	0:0	10	)
water	130:42	0:0	10	;
op	131:16	0:0	10	++
water	131:18	0:0	10	src
water	131:21	0:0	10	;
water	132:16	0:0	10	pixel
op	132:22	0:0	10	=
water	132:24	0:0	10	(
water	132:25	0:0	10	(
water	132:26	0:0	10	red
op	132:32	0:0	10	>>
water	132:35	0:0	10	RShift
water	132:41	0:0	10	)
op	132:43	0:0	10	&
water	132:45	0:0	10	RMask
water	132:50	0:0	10	)
op	132:52	0:0	10	|
water	133:24	0:0	10	(
water	133:25	0:0	10	(
water	133:26	0:0	10	green
op	133:32	0:0	10	>>
water	133:35	0:0	10	GShift
water	133:41	0:0	10	)
op	133:43	0:0	10	&
water	133:45	0:0	10	GMask
water	133:50	0:0	10	)
op	133:52	0:0	10	|
water	134:24	0:0	10	(
water	134:25	0:0	10	(
water	134:26	0:0	10	blue
op	134:32	0:0	10	>>
water	134:35	0:0	10	BShift
water	134:41	0:0	10	)
op	134:43	0:0	10	&
water	134:45	0:0	10	BMask
water	134:50	0:0	10	)
water	134:51	0:0	10	;
op	136:16	0:0	10	*
water	136:17	0:0	10	dest
op	136:21	0:0	10	++
op	136:24	0:0	10	=
call	136:26	136:53	10	(char)
arg	136:33	136:53	11	(pixel>>8)&0xff
water	136:33	0:0	12	(
water	136:34	0:0	12	pixel
op	136:40	0:0	12	>>
water	136:44	0:0	12	8
water	136:45	0:0	12	)
op	136:47	0:0	12	&
water	136:49	0:0	12	0
water	136:50	0:0	12	xff
water	136:54	0:0	10	;
op	137:16	0:0	10	*
water	137:17	0:0	10	dest
op	137:21	0:0	10	++
op	137:24	0:0	10	=
call	137:26	137:53	10	(char)
arg	137:34	137:53	11	pixel&0xff
water	137:34	0:0	12	pixel
op	137:47	0:0	12	&
water	137:49	0:0	12	0
water	137:50	0:0	12	xff
water	137:54	0:0	10	;
water	138:12	0:0	10	}
water	139:8	0:0	8	}
else	139:10	176:8	6
stmts	139:16	176:8	7	
water	139:16	0:0	8	{
for	140:12	175:12	8	(i = rpng2_info . width ;i > 0;-- i)
forinit	140:17	140:37	9	i = rpng2_info . width ;
water	140:17	0:0	10	i
op	140:19	0:0	10	=
water	140:21	0:0	10	rpng2_info
op	140:31	0:0	10	.
water	140:32	0:0	10	width
water	140:37	0:0	10	;
cond	140:40	140:44	9	i > 0
water	140:40	0:0	10	i
op	140:42	0:0	10	>
water	140:44	0:0	10	0
forexpr	140:48	140:50	9	-- i
op	140:48	0:0	10	--
water	140:50	0:0	10	i
stmts	140:53	175:12	9	
water	140:53	0:0	10	{
water	141:16	0:0	10	r
op	141:18	0:0	10	=
op	141:20	0:0	10	*
water	141:21	0:0	10	src
op	141:24	0:0	10	++
water	141:26	0:0	10	;
water	142:16	0:0	10	g
op	142:18	0:0	10	=
op	142:20	0:0	10	*
water	142:21	0:0	10	src
op	142:24	0:0	10	++
water	142:26	0:0	10	;
water	143:16	0:0	10	b
op	143:18	0:0	10	=
op	143:20	0:0	10	*
water	143:21	0:0	10	src
op	143:24	0:0	10	++
water	143:26	0:0	10	;
water	144:16	0:0	10	a
op	144:18	0:0	10	=
op	144:20	0:0	10	*
water	144:21	0:0	10	src
op	144:24	0:0	10	++
water	144:26	0:0	10	;
if	145:16	149:16	10	(bg_image)
cond	145:20	145:20	11	bg_image
water	145:20	0:0	12	bg_image
stmts	145:30	149:16	11	
water	145:30	0:0	12	{
water	146:20	0:0	12	bg_red
op	146:29	0:0	12	=
op	146:31	0:0	12	*
water	146:32	0:0	12	src2
op	146:36	0:0	12	++
water	146:38	0:0	12	;
water	147:20	0:0	12	bg_green
op	147:29	0:0	12	=
op	147:31	0:0	12	*
water	147:32	0:0	12	src2
op	147:36	0:0	12	++
water	147:38	0:0	12	;
water	148:20	0:0	12	bg_blue
op	148:29	0:0	12	=
op	148:31	0:0	12	*
water	148:32	0:0	12	src2
op	148:36	0:0	12	++
water	148:38	0:0	12	;
water	149:16	0:0	12	}
if	150:16	154:16	10	(a == 255)
cond	150:20	150:25	11	a == 255
water	150:20	0:0	12	a
op	150:22	0:0	12	==
water	150:25	0:0	12	255
stmts	150:30	154:16	11	
water	150:30	0:0	12	{
water	151:20	0:0	12	red
op	151:26	0:0	12	=
water	151:28	0:0	12	(
water	151:29	0:0	12	(
water	151:30	0:0	12	ush
water	151:33	0:0	12	)
water	151:34	0:0	12	r
op	151:36	0:0	12	<<
water	151:39	0:0	12	8
water	151:40	0:0	12	)
water	151:41	0:0	12	;
water	152:20	0:0	12	green
op	152:26	0:0	12	=
water	152:28	0:0	12	(
water	152:29	0:0	12	(
water	152:30	0:0	12	ush
water	152:33	0:0	12	)
water	152:34	0:0	12	g
op	152:36	0:0	12	<<
water	152:39	0:0	12	8
water	152:40	0:0	12	)
water	152:41	0:0	12	;
water	153:20	0:0	12	blue
op	153:26	0:0	12	=
water	153:28	0:0	12	(
water	153:29	0:0	12	(
water	153:30	0:0	12	ush
water	153:33	0:0	12	)
water	153:34	0:0	12	b
op	153:36	0:0	12	<<
water	153:39	0:0	12	8
water	153:40	0:0	12	)
water	153:41	0:0	12	;
water	154:16	0:0	12	}
else	154:18	158:16	10
stmts	154:23	158:16	11	
if	154:23	158:16	12	(a == 0)
cond	154:27	154:32	13	a == 0
water	154:27	0:0	14	a
op	154:29	0:0	14	==
water	154:32	0:0	14	0
stmts	154:35	158:16	13	
water	154:35	0:0	14	{
water	155:20	0:0	14	red
op	155:26	0:0	14	=
water	155:28	0:0	14	(
water	155:29	0:0	14	(
water	155:30	0:0	14	ush
water	155:33	0:0	14	)
water	155:34	0:0	14	bg_red
op	155:43	0:0	14	<<
water	155:46	0:0	14	8
water	155:47	0:0	14	)
water	155:48	0:0	14	;
water	156:20	0:0	14	green
op	156:26	0:0	14	=
water	156:28	0:0	14	(
water	156:29	0:0	14	(
water	156:30	0:0	14	ush
water	156:33	0:0	14	)
water	156:34	0:0	14	bg_green
op	156:43	0:0	14	<<
water	156:46	0:0	14	8
water	156:47	0:0	14	)
water	156:48	0:0	14	;
water	157:20	0:0	14	blue
op	157:26	0:0	14	=
water	157:28	0:0	14	(
water	157:29	0:0	14	(
water	157:30	0:0	14	ush
water	157:33	0:0	14	)
water	157:34	0:0	14	bg_blue
op	157:43	0:0	14	<<
water	157:46	0:0	14	8
water	157:47	0:0	14	)
water	157:48	0:0	14	;
water	158:16	0:0	14	}
else	158:18	168:16	10
stmts	158:23	168:16	11	
water	158:23	0:0	12	{
call	162:20	162:51	12	alpha_composite
arg	162:36	162:37	13	r
water	162:36	0:0	14	r
arg	162:39	162:40	13	r
water	162:39	0:0	14	r
arg	162:42	162:43	13	a
water	162:42	0:0	14	a
arg	162:45	162:51	13	bg_red
water	162:45	0:0	14	bg_red
water	162:52	0:0	12	;
call	163:20	163:53	12	alpha_composite
arg	163:36	163:37	13	g
water	163:36	0:0	14	g
arg	163:39	163:40	13	g
water	163:39	0:0	14	g
arg	163:42	163:43	13	a
water	163:42	0:0	14	a
arg	163:45	163:53	13	bg_green
water	163:45	0:0	14	bg_green
water	163:54	0:0	12	;
call	164:20	164:52	12	alpha_composite
arg	164:36	164:37	13	b
water	164:36	0:0	14	b
arg	164:39	164:40	13	b
water	164:39	0:0	14	b
arg	164:42	164:43	13	a
water	164:42	0:0	14	a
arg	164:45	164:52	13	bg_blue
water	164:45	0:0	14	bg_blue
water	164:53	0:0	12	;
water	165:20	0:0	12	red
op	165:26	0:0	12	=
water	165:28	0:0	12	(
water	165:29	0:0	12	(
water	165:30	0:0	12	ush
water	165:33	0:0	12	)
water	165:34	0:0	12	r
op	165:36	0:0	12	<<
water	165:39	0:0	12	8
water	165:40	0:0	12	)
water	165:41	0:0	12	;
water	166:20	0:0	12	green
op	166:26	0:0	12	=
water	166:28	0:0	12	(
water	166:29	0:0	12	(
water	166:30	0:0	12	ush
water	166:33	0:0	12	)
water	166:34	0:0	12	g
op	166:36	0:0	12	<<
water	166:39	0:0	12	8
water	166:40	0:0	12	)
water	166:41	0:0	12	;
water	167:20	0:0	12	blue
op	167:26	0:0	12	=
water	167:28	0:0	12	(
water	167:29	0:0	12	(
water	167:30	0:0	12	ush
water	167:33	0:0	12	)
water	167:34	0:0	12	b
op	167:36	0:0	12	<<
water	167:39	0:0	12	8
water	167:40	0:0	12	)
water	167:41	0:0	12	;
water	168:16	0:0	12	}
water	169:16	0:0	10	pixel
op	169:22	0:0	10	=
water	169:24	0:0	10	(
water	169:25	0:0	10	(
water	169:26	0:0	10	red
op	169:32	0:0	10	>>
water	169:35	0:0	10	RShift
water	169:41	0:0	10	)
op	169:43	0:0	10	&
water	169:45	0:0	10	RMask
water	169:50	0:0	10	)
op	169:52	0:0	10	|
water	170:24	0:0	10	(
water	170:25	0:0	10	(
water	170:26	0:0	10	green
op	170:32	0:0	10	>>
water	170:35	0:0	10	GShift
water	170:41	0:0	10	)
op	170:43	0:0	10	&
water	170:45	0:0	10	GMask
water	170:50	0:0	10	)
op	170:52	0:0	10	|
water	171:24	0:0	10	(
water	171:25	0:0	10	(
water	171:26	0:0	10	blue
op	171:32	0:0	10	>>
water	171:35	0:0	10	BShift
water	171:41	0:0	10	)
op	171:43	0:0	10	&
water	171:45	0:0	10	BMask
water	171:50	0:0	10	)
water	171:51	0:0	10	;
op	173:16	0:0	10	*
water	173:17	0:0	10	dest
op	173:21	0:0	10	++
op	173:24	0:0	10	=
call	173:26	173:53	10	(char)
arg	173:33	173:53	11	(pixel>>8)&0xff
water	173:33	0:0	12	(
water	173:34	0:0	12	pixel
op	173:40	0:0	12	>>
water	173:44	0:0	12	8
water	173:45	0:0	12	)
op	173:47	0:0	12	&
water	173:49	0:0	12	0
water	173:50	0:0	12	xff
water	173:54	0:0	10	;
op	174:16	0:0	10	*
water	174:17	0:0	10	dest
op	174:21	0:0	10	++
op	174:24	0:0	10	=
call	174:26	174:53	10	(char)
arg	174:34	174:53	11	pixel&0xff
water	174:34	0:0	12	pixel
op	174:47	0:0	12	&
water	174:49	0:0	12	0
water	174:50	0:0	12	xff
water	174:54	0:0	10	;
water	175:12	0:0	10	}
water	176:8	0:0	8	}
water	177:4	0:0	6	}
else	177:6	179:4	2
stmts	177:12	179:4	3	
water	177:12	0:0	4	{
water	0:0	0:0	4	STATEMENTS
water	179:4	0:0	4	}
if	187:4	193:4	2	(demo_timing && ( row - firstrow >= 16 || row >= rpng2_info . height - 2 ))
cond	187:8	187:74	3	demo_timing && ( row - firstrow >= 16 || row >= rpng2_info . height - 2 )
water	187:8	0:0	4	demo_timing
op	187:20	0:0	4	&&
water	187:23	0:0	4	(
water	187:24	0:0	4	row
op	187:28	0:0	4	-
water	187:30	0:0	4	firstrow
op	187:39	0:0	4	>=
water	187:42	0:0	4	16
op	187:45	0:0	4	||
water	187:48	0:0	4	row
op	187:52	0:0	4	>=
water	187:55	0:0	4	rpng2_info
op	187:65	0:0	4	.
water	187:66	0:0	4	height
op	187:72	0:0	4	-
water	187:73	0:0	4	2
water	187:74	0:0	4	)
stmts	187:77	193:4	3	
water	187:77	0:0	4	{
call	188:8	189:61	4	XPutImage
arg	188:18	188:25	5	display
water	188:18	0:0	6	display
arg	188:27	188:33	5	window
water	188:27	0:0	6	window
arg	188:35	188:37	5	gc
water	188:35	0:0	6	gc
arg	188:39	188:45	5	ximage
water	188:39	0:0	6	ximage
arg	188:47	188:48	5	0
water	188:47	0:0	6	0
arg	188:50	188:63	5	(int)firstrow
water	188:50	0:0	6	(
water	188:51	0:0	6	int
water	188:54	0:0	6	)
water	188:55	0:0	6	firstrow
arg	188:65	188:66	5	0
water	188:65	0:0	6	0
arg	189:10	189:23	5	(int)firstrow
water	189:10	0:0	6	(
water	189:11	0:0	6	int
water	189:14	0:0	6	)
water	189:15	0:0	6	firstrow
arg	189:25	189:41	5	rpng2_info.width
water	189:25	0:0	6	rpng2_info
op	189:35	0:0	6	.
water	189:36	0:0	6	width
arg	189:43	189:61	5	row-firstrow+1
water	189:43	0:0	6	row
op	189:47	0:0	6	-
water	189:49	0:0	6	firstrow
op	189:58	0:0	6	+
water	189:60	0:0	6	1
water	189:62	0:0	4	;
call	190:8	190:22	4	XFlush
arg	190:15	190:22	5	display
water	190:15	0:0	6	display
water	190:23	0:0	4	;
water	191:8	0:0	4	rows
op	191:13	0:0	4	=
water	191:15	0:0	4	0
water	191:16	0:0	4	;
call	192:8	192:30	4	usleep
arg	192:15	192:30	5	usleep_duration
water	192:15	0:0	6	usleep_duration
water	192:31	0:0	4	;
water	193:4	0:0	4	}
else	193:6	199:4	2
stmts	194:4	199:4	3	
if	194:4	199:4	4	(! demo_timing && ( ( rows & 0 xf ) == 0 || row >= rpng2_info . height - 2 ))
cond	194:8	194:72	5	! demo_timing && ( ( rows & 0 xf ) == 0 || row >= rpng2_info . height - 2 )
op	194:8	0:0	6	!
water	194:9	0:0	6	demo_timing
op	194:21	0:0	6	&&
water	194:24	0:0	6	(
water	194:25	0:0	6	(
water	194:26	0:0	6	rows
op	194:31	0:0	6	&
water	194:33	0:0	6	0
water	194:34	0:0	6	xf
water	194:36	0:0	6	)
op	194:38	0:0	6	==
water	194:41	0:0	6	0
op	194:43	0:0	6	||
water	194:46	0:0	6	row
op	194:50	0:0	6	>=
water	194:53	0:0	6	rpng2_info
op	194:63	0:0	6	.
water	194:64	0:0	6	height
op	194:70	0:0	6	-
water	194:71	0:0	6	2
water	194:72	0:0	6	)
stmts	194:75	199:4	5	
water	194:75	0:0	6	{
call	195:8	196:61	6	XPutImage
arg	195:18	195:25	7	display
water	195:18	0:0	8	display
arg	195:27	195:33	7	window
water	195:27	0:0	8	window
arg	195:35	195:37	7	gc
water	195:35	0:0	8	gc
arg	195:39	195:45	7	ximage
water	195:39	0:0	8	ximage
arg	195:47	195:48	7	0
water	195:47	0:0	8	0
arg	195:50	195:63	7	(int)firstrow
water	195:50	0:0	8	(
water	195:51	0:0	8	int
water	195:54	0:0	8	)
water	195:55	0:0	8	firstrow
arg	195:65	195:66	7	0
water	195:65	0:0	8	0
arg	196:10	196:23	7	(int)firstrow
water	196:10	0:0	8	(
water	196:11	0:0	8	int
water	196:14	0:0	8	)
water	196:15	0:0	8	firstrow
arg	196:25	196:41	7	rpng2_info.width
water	196:25	0:0	8	rpng2_info
op	196:35	0:0	8	.
water	196:36	0:0	8	width
arg	196:43	196:61	7	row-firstrow+1
water	196:43	0:0	8	row
op	196:47	0:0	8	-
water	196:49	0:0	8	firstrow
op	196:58	0:0	8	+
water	196:60	0:0	8	1
water	196:62	0:0	6	;
call	197:8	197:22	6	XFlush
arg	197:15	197:22	7	display
water	197:15	0:0	8	display
water	197:23	0:0	6	;
water	198:8	0:0	6	rows
op	198:13	0:0	6	=
water	198:15	0:0	6	0
water	198:16	0:0	6	;
water	199:4	0:0	6	}
