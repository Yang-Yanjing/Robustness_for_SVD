func	1:0	37:0	0	static png_size_t	load_fake
params	2:9	0:0	1	
param	2:10	2:25	2	png_charp	param
param	2:27	2:45	2	png_bytepp	profile
stmnts	0:0	36:11	1	
decl	4:3	4:22	2	char	*endptr
op	4:16	0:0	2	=
water	4:18	0:0	2	NULL
water	5:3	0:0	2	unsigned
water	5:12	0:0	2	long
water	5:17	0:0	2	long
water	5:22	0:0	2	int
water	5:26	0:0	2	size
op	5:31	0:0	2	=
call	5:33	5:59	2	strtoull
arg	5:42	5:47	3	param
water	5:42	0:0	4	param
arg	5:49	5:56	3	&endptr
op	5:49	0:0	4	&
water	5:50	0:0	4	endptr
arg	5:58	5:59	3	0
water	5:58	0:0	4	0
water	5:60	0:0	2	;
if	7:3	35:3	2	(endptr != NULL && * endptr == '*')
cond	7:7	7:36	3	endptr != NULL && * endptr == '*'
water	7:7	0:0	4	endptr
op	7:14	0:0	4	!=
water	7:17	0:0	4	NULL
op	7:22	0:0	4	&&
op	7:25	0:0	4	*
water	7:26	0:0	4	endptr
op	7:33	0:0	4	==
water	7:36	0:0	4	'*'
stmts	8:3	35:3	3	
water	8:3	0:0	4	{
decl	9:6	9:35	4	size_t	len
op	9:17	0:0	4	=
call	9:19	9:34	5	strlen
arg	9:26	9:34	6	++endptr
op	9:26	0:0	7	++
water	9:28	0:0	7	endptr
decl	10:6	10:34	4	size_t	result
op	10:20	0:0	4	=
water	10:22	0:0	4	(
water	10:23	0:0	4	size_t
water	10:29	0:0	4	)
water	10:30	0:0	4	size
if	11:6	11:27	4	(len == 0)
cond	11:10	11:17	5	len == 0
water	11:10	0:0	6	len
op	11:14	0:0	6	==
water	11:17	0:0	6	0
stmts	11:20	11:27	5	
water	11:20	0:0	6	len
op	11:24	0:0	6	=
water	11:26	0:0	6	1
water	11:27	0:0	6	;
if	13:6	29:6	4	(result == size && ( * profile =malloc (result ) ) != NULL)
cond	13:10	13:59	5	result == size && ( * profile =malloc (result ) ) != NULL
water	13:10	0:0	6	result
op	13:17	0:0	6	==
water	13:20	0:0	6	size
op	13:25	0:0	6	&&
water	13:28	0:0	6	(
op	13:29	0:0	6	*
water	13:30	0:0	6	profile
op	13:38	0:0	6	=
call	13:40	13:53	6	malloc
arg	13:47	13:53	7	result
water	13:47	0:0	8	result
water	13:54	0:0	6	)
op	13:56	0:0	6	!=
water	13:59	0:0	6	NULL
stmts	14:6	29:6	5	
water	14:6	0:0	6	{
decl	15:9	15:33	6	png_bytep	out
op	15:23	0:0	6	=
op	15:25	0:0	6	*
water	15:26	0:0	6	profile
if	16:9	17:40	6	(len == 1)
cond	16:13	16:20	7	len == 1
water	16:13	0:0	8	len
op	16:17	0:0	8	==
water	16:20	0:0	8	1
stmts	17:12	17:40	7	
call	17:12	17:39	8	memset
arg	17:19	17:22	9	out
water	17:19	0:0	10	out
arg	17:24	17:31	9	*endptr
op	17:24	0:0	10	*
water	17:25	0:0	10	endptr
arg	17:33	17:39	9	result
water	17:33	0:0	10	result
water	17:40	0:0	8	;
else	18:9	27:9	6
stmts	19:9	27:9	7	
water	19:9	0:0	8	{
while	20:12	25:12	8	(size >= len)
cond	20:19	20:27	9	size >= len
water	20:19	0:0	10	size
op	20:24	0:0	10	>=
water	20:27	0:0	10	len
stmts	21:12	25:12	9	
water	21:12	0:0	10	{
call	22:15	22:38	10	memcpy
arg	22:22	22:25	11	out
water	22:22	0:0	12	out
arg	22:27	22:33	11	endptr
water	22:27	0:0	12	endptr
arg	22:35	22:38	11	len
water	22:35	0:0	12	len
water	22:39	0:0	10	;
water	23:15	0:0	10	out
op	23:19	0:0	10	+=
water	23:22	0:0	10	len
water	23:25	0:0	10	;
water	24:15	0:0	10	size
op	24:20	0:0	10	-=
water	24:23	0:0	10	len
water	24:26	0:0	10	;
water	25:12	0:0	10	}
call	26:12	26:36	8	memcpy
arg	26:19	26:22	9	out
water	26:19	0:0	10	out
arg	26:24	26:30	9	endptr
water	26:24	0:0	10	endptr
arg	26:32	26:36	9	size
water	26:32	0:0	10	size
water	26:37	0:0	8	;
water	27:9	0:0	8	}
return	28:9	28:22	6	result
water	28:16	0:0	7	result
water	29:6	0:0	6	}
else	30:6	34:6	4
stmts	31:6	34:6	5	
water	31:6	0:0	6	{
call	32:9	32:66	6	fprintf
arg	32:17	32:23	7	stderr
water	32:17	0:0	8	stderr
arg	32:25	32:59	7	"%s: size exceeds system limits\n"
water	32:25	0:0	8	"%s: size exceeds system limits\n"
arg	32:61	32:66	7	param
water	32:61	0:0	8	param
water	32:67	0:0	6	;
call	33:9	33:15	6	exit
arg	33:14	33:15	7	1
water	33:14	0:0	8	1
water	33:16	0:0	6	;
water	34:6	0:0	6	}
water	35:3	0:0	4	}
return	36:3	36:11	2	0
water	36:10	0:0	3	0
