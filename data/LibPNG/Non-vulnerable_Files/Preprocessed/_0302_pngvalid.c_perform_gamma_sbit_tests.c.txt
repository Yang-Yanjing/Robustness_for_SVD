func	2:0	33:0	0	static void	perform_gamma_sbit_tests
params	2:36	0:0	1	
param	2:37	2:53	2	png_modifier *	pm
stmnts	0:0	32:3	1	
decl	4:3	4:16	2	png_byte	sbit
for	9:3	32:3	2	(sbit = pm -> sbitlow ;sbit < ( 1 << READ_BDHI );++ sbit)
forinit	9:8	9:24	3	sbit = pm -> sbitlow ;
water	9:8	0:0	4	sbit
op	9:12	0:0	4	=
water	9:13	0:0	4	pm
op	9:15	0:0	4	->
water	9:17	0:0	4	sbitlow
water	9:24	0:0	4	;
cond	9:26	9:44	3	sbit < ( 1 << READ_BDHI )
water	9:26	0:0	4	sbit
op	9:30	0:0	4	<
water	9:31	0:0	4	(
water	9:32	0:0	4	1
op	9:33	0:0	4	<<
water	9:35	0:0	4	READ_BDHI
water	9:44	0:0	4	)
forexpr	9:47	9:49	3	++ sbit
op	9:47	0:0	4	++
water	9:49	0:0	4	sbit
stmts	10:3	32:3	3	
water	10:3	0:0	4	{
decl	11:6	11:45	4	png_byte	colour_type
op	11:27	0:0	4	=
water	11:29	0:0	4	0
water	11:30	0:0	4	,
decl	11:6	11:45	4	png_byte	bit_depth
op	11:42	0:0	4	=
water	11:44	0:0	4	0
decl	12:6	12:31	4	unsigned int	npalette
op	12:28	0:0	4	=
water	12:30	0:0	4	0
while	13:6	31:6	4	(next_format (& colour_type ,& bit_depth ,& npalette ,1 ))
cond	13:13	13:63	5	next_format (& colour_type ,& bit_depth ,& npalette ,1 )
call	13:13	13:63	6	next_format
arg	13:25	13:37	7	&colour_type
op	13:25	0:0	8	&
water	13:26	0:0	8	colour_type
arg	13:39	13:49	7	&bit_depth
op	13:39	0:0	8	&
water	13:40	0:0	8	bit_depth
arg	13:51	13:60	7	&npalette
op	13:51	0:0	8	&
water	13:52	0:0	8	npalette
arg	13:62	13:63	7	1
water	13:62	0:0	8	1
stmts	14:9	31:6	5	
if	14:9	31:6	6	(( colour_type & PNG_COLOR_MASK_ALPHA ) == 0 && ( ( colour_type == 3 && sbit < 8 ) || ( colour_type != 3 && sbit < bit_depth ) ))
cond	14:13	16:50	7	( colour_type & PNG_COLOR_MASK_ALPHA ) == 0 && ( ( colour_type == 3 && sbit < 8 ) || ( colour_type != 3 && sbit < bit_depth ) )
water	14:13	0:0	8	(
water	14:14	0:0	8	colour_type
op	14:26	0:0	8	&
water	14:28	0:0	8	PNG_COLOR_MASK_ALPHA
water	14:48	0:0	8	)
op	14:50	0:0	8	==
water	14:53	0:0	8	0
op	14:55	0:0	8	&&
water	15:12	0:0	8	(
water	15:13	0:0	8	(
water	15:14	0:0	8	colour_type
op	15:26	0:0	8	==
water	15:29	0:0	8	3
op	15:31	0:0	8	&&
water	15:34	0:0	8	sbit
op	15:39	0:0	8	<
water	15:41	0:0	8	8
water	15:42	0:0	8	)
op	15:44	0:0	8	||
water	16:12	0:0	8	(
water	16:13	0:0	8	colour_type
op	16:25	0:0	8	!=
water	16:28	0:0	8	3
op	16:30	0:0	8	&&
water	16:33	0:0	8	sbit
op	16:38	0:0	8	<
water	16:40	0:0	8	bit_depth
water	16:49	0:0	8	)
water	16:50	0:0	8	)
stmts	17:6	31:6	7	
water	17:6	0:0	8	{
decl	18:9	18:23	8	unsigned int	i
for	19:9	30:9	8	(i = 0 ;i < pm -> ngamma_tests;++ i)
forinit	19:14	19:17	9	i = 0 ;
water	19:14	0:0	10	i
op	19:15	0:0	10	=
water	19:16	0:0	10	0
water	19:17	0:0	10	;
cond	19:19	19:25	9	i < pm -> ngamma_tests
water	19:19	0:0	10	i
op	19:20	0:0	10	<
water	19:21	0:0	10	pm
op	19:23	0:0	10	->
water	19:25	0:0	10	ngamma_tests
forexpr	19:39	19:41	9	++ i
op	19:39	0:0	10	++
water	19:41	0:0	10	i
stmts	20:9	30:9	9	
water	20:9	0:0	10	{
decl	21:12	21:26	10	unsigned int	j
for	22:12	29:12	10	(j = 0 ;j < pm -> ngamma_tests;++ j)
forinit	22:17	22:20	11	j = 0 ;
water	22:17	0:0	12	j
op	22:18	0:0	12	=
water	22:19	0:0	12	0
water	22:20	0:0	12	;
cond	22:22	22:28	11	j < pm -> ngamma_tests
water	22:22	0:0	12	j
op	22:23	0:0	12	<
water	22:24	0:0	12	pm
op	22:26	0:0	12	->
water	22:28	0:0	12	ngamma_tests
forexpr	22:42	22:44	11	++ j
op	22:42	0:0	12	++
water	22:44	0:0	12	j
stmts	22:47	29:12	11	
if	22:47	29:12	12	(i != j)
cond	22:51	22:56	13	i != j
water	22:51	0:0	14	i
op	22:53	0:0	14	!=
water	22:56	0:0	14	j
stmts	23:12	29:12	13	
water	23:12	0:0	14	{
call	24:15	26:56	14	gamma_transform_test
arg	24:36	24:38	15	pm
water	24:36	0:0	16	pm
arg	24:40	24:51	15	colour_type
water	24:40	0:0	16	colour_type
arg	24:53	24:62	15	bit_depth
water	24:53	0:0	16	bit_depth
arg	24:64	24:72	15	npalette
water	24:64	0:0	16	npalette
arg	25:18	25:36	15	pm->interlace_type
water	25:18	0:0	16	pm
op	25:20	0:0	16	->
water	25:22	0:0	16	interlace_type
arg	25:38	25:53	15	1/pm->gammas[i]
water	25:38	0:0	16	1
op	25:39	0:0	16	/
water	25:40	0:0	16	pm
op	25:42	0:0	16	->
water	25:44	0:0	16	gammas
op	25:50	0:0	16	[
water	25:51	0:0	16	i
op	25:52	0:0	16	]
arg	25:55	25:68	15	pm->gammas[j]
water	25:55	0:0	16	pm
op	25:57	0:0	16	->
water	25:59	0:0	16	gammas
op	25:65	0:0	16	[
water	25:66	0:0	16	j
op	25:67	0:0	16	]
arg	26:18	26:22	15	sbit
water	26:18	0:0	16	sbit
arg	26:24	26:52	15	pm->use_input_precision_sbit
water	26:24	0:0	16	pm
op	26:26	0:0	16	->
water	26:28	0:0	16	use_input_precision_sbit
arg	26:54	26:56	15	0
water	26:54	0:0	16	0
water	26:57	0:0	14	;
if	27:15	28:24	14	(fail (pm ))
cond	27:19	27:26	15	fail (pm )
call	27:19	27:26	16	fail
arg	27:24	27:26	17	pm
water	27:24	0:0	18	pm
stmts	28:18	28:24	15	
return	28:18	28:24	16	
water	29:12	0:0	14	}
water	30:9	0:0	10	}
water	31:6	0:0	8	}
water	32:3	0:0	4	}
