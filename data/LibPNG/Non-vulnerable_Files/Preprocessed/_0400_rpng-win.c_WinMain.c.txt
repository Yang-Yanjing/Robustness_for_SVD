decl	1:7	1:23	0	HWND	global_hwnd
func	2:4	258:0	0	WINAPI	WinMain
params	2:18	0:0	1	
param	2:19	2:34	2	HINSTANCE	hInst
param	2:36	2:55	2	HINSTANCE	hPrevInst
param	2:57	2:65	2	PSTR	cmd
param	2:67	2:79	2	int	showmode
stmnts	0:0	257:21	1	
decl	4:4	4:20	2	char	*args[1024]
decl	5:4	5:30	2	char	*p
water	5:11	0:0	2	,
decl	5:4	5:30	2	char	*q
water	5:15	0:0	2	,
decl	5:4	5:30	2	char	**argv
op	5:24	0:0	2	=
water	5:26	0:0	2	args
decl	6:4	6:16	2	int	argc
op	6:13	0:0	2	=
water	6:15	0:0	2	0
decl	7:4	7:22	2	int	rc
water	7:10	0:0	2	,
decl	7:4	7:22	2	int	alen
water	7:16	0:0	2	,
decl	7:4	7:22	2	int	flen
decl	8:4	8:17	2	int	error
op	8:14	0:0	2	=
water	8:16	0:0	2	0
decl	9:4	9:23	2	int	have_bg
op	9:16	0:0	2	=
water	9:18	0:0	2	FALSE
decl	10:4	10:23	2	double	LUT_exponent
decl	11:4	11:29	2	double	CRT_exponent
op	11:24	0:0	2	=
water	11:26	0:0	2	2
op	11:27	0:0	2	.
water	11:28	0:0	2	2
decl	12:4	12:35	2	double	default_display_exponent
decl	13:4	13:11	2	MSG	msg
water	14:4	0:0	2	filename
op	14:13	0:0	2	=
water	14:15	0:0	2	(
water	14:16	0:0	2	char
op	14:21	0:0	2	*
water	14:22	0:0	2	)
water	14:23	0:0	2	NULL
water	14:27	0:0	2	;
call	20:4	20:17	2	AllocConsole
water	20:18	0:0	2	;
call	21:4	21:34	2	freopen
arg	21:12	21:21	3	"CONOUT$"
water	21:12	0:0	4	"CONOUT$"
arg	21:23	21:26	3	"a"
water	21:23	0:0	4	"a"
arg	21:28	21:34	3	stderr
water	21:28	0:0	4	stderr
water	21:35	0:0	2	;
call	22:4	22:34	2	freopen
arg	22:12	22:21	3	"CONOUT$"
water	22:12	0:0	4	"CONOUT$"
arg	22:23	22:26	3	"a"
water	22:23	0:0	4	"a"
arg	22:28	22:34	3	stdout
water	22:28	0:0	4	stdout
water	22:35	0:0	2	;
water	31:4	0:0	2	LUT_exponent
op	31:17	0:0	2	=
water	31:19	0:0	2	1
op	31:20	0:0	2	.
water	31:21	0:0	2	0
op	31:23	0:0	2	/
water	31:25	0:0	2	2
op	31:26	0:0	2	.
water	31:27	0:0	2	2
water	31:28	0:0	2	;
water	37:4	0:0	2	LUT_exponent
op	37:17	0:0	2	=
water	37:19	0:0	2	1
op	37:20	0:0	2	.
water	37:21	0:0	2	0
op	37:23	0:0	2	/
water	37:25	0:0	2	1
op	37:26	0:0	2	.
water	37:27	0:0	2	7
water	37:28	0:0	2	;
water	40:4	0:0	2	infile
op	40:11	0:0	2	=
call	40:13	40:55	2	fopen
arg	40:19	40:50	3	"/etc/config/system.glGammaVal"
water	40:19	0:0	4	"/etc/config/system.glGammaVal"
arg	40:52	40:55	3	"r"
water	40:52	0:0	4	"r"
water	40:56	0:0	2	;
if	41:4	48:4	2	(infile)
cond	41:8	41:8	3	infile
water	41:8	0:0	4	infile
stmts	41:16	48:4	3	
water	41:16	0:0	4	{
decl	42:8	42:24	4	double	sgi_gamma
call	43:8	43:33	4	fgets
arg	43:14	43:21	5	tmpline
water	43:14	0:0	6	tmpline
arg	43:23	43:25	5	80
water	43:23	0:0	6	80
arg	43:27	43:33	5	infile
water	43:27	0:0	6	infile
water	43:34	0:0	4	;
call	44:8	44:21	4	fclose
arg	44:15	44:21	5	infile
water	44:15	0:0	6	infile
water	44:22	0:0	4	;
water	45:8	0:0	4	sgi_gamma
op	45:18	0:0	4	=
call	45:20	45:32	4	atof
arg	45:25	45:32	5	tmpline
water	45:25	0:0	6	tmpline
water	45:33	0:0	4	;
if	46:8	47:42	4	(sgi_gamma > 0 . 0)
cond	46:12	46:26	5	sgi_gamma > 0 . 0
water	46:12	0:0	6	sgi_gamma
op	46:22	0:0	6	>
water	46:24	0:0	6	0
op	46:25	0:0	6	.
water	46:26	0:0	6	0
stmts	47:12	47:42	5	
water	47:12	0:0	6	LUT_exponent
op	47:25	0:0	6	=
water	47:27	0:0	6	1
op	47:28	0:0	6	.
water	47:29	0:0	6	0
op	47:31	0:0	6	/
water	47:33	0:0	6	sgi_gamma
water	47:42	0:0	6	;
water	48:4	0:0	4	}
water	50:4	0:0	2	LUT_exponent
op	50:17	0:0	2	=
water	50:19	0:0	2	1
op	50:20	0:0	2	.
water	50:21	0:0	2	8
op	50:23	0:0	2	/
water	50:25	0:0	2	2
op	50:26	0:0	2	.
water	50:27	0:0	2	61
water	50:29	0:0	2	;
water	56:4	0:0	2	LUT_exponent
op	56:17	0:0	2	=
water	56:19	0:0	2	1
op	56:20	0:0	2	.
water	56:21	0:0	2	0
water	56:22	0:0	2	;
water	59:4	0:0	2	default_display_exponent
op	59:29	0:0	2	=
water	59:31	0:0	2	LUT_exponent
op	59:44	0:0	2	*
water	59:46	0:0	2	CRT_exponent
water	59:58	0:0	2	;
if	64:4	65:34	2	(( p =getenv ("SCREEN_GAMMA" ) ) != NULL)
cond	64:8	64:40	3	( p =getenv ("SCREEN_GAMMA" ) ) != NULL
water	64:8	0:0	4	(
water	64:9	0:0	4	p
op	64:11	0:0	4	=
call	64:13	64:34	4	getenv
arg	64:20	64:34	5	"SCREEN_GAMMA"
water	64:20	0:0	6	"SCREEN_GAMMA"
water	64:35	0:0	4	)
op	64:37	0:0	4	!=
water	64:40	0:0	4	NULL
stmts	65:8	65:34	3	
water	65:8	0:0	4	display_exponent
op	65:25	0:0	4	=
call	65:27	65:33	4	atof
arg	65:32	65:33	5	p
water	65:32	0:0	6	p
water	65:34	0:0	4	;
else	66:4	67:51	2
stmts	67:8	67:51	3	
water	67:8	0:0	4	display_exponent
op	67:25	0:0	4	=
water	67:27	0:0	4	default_display_exponent
water	67:51	0:0	4	;
water	71:4	0:0	2	argv
op	71:8	0:0	2	[
water	71:9	0:0	2	argc
op	71:13	0:0	2	++
op	71:15	0:0	2	]
op	71:17	0:0	2	=
water	71:19	0:0	2	PROGNAME
water	71:27	0:0	2	;
water	72:4	0:0	2	p
op	72:6	0:0	2	=
water	72:8	0:0	2	cmd
water	72:11	0:0	2	;
for	73:4	88:4	2	(;;)
forinit	73:9	73:9	3	;
water	73:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	73:13	88:4	3	
water	73:13	0:0	4	{
if	74:8	76:16	4	(* p == ' ')
cond	74:12	74:18	5	* p == ' '
op	74:12	0:0	6	*
water	74:13	0:0	6	p
op	74:15	0:0	6	==
water	74:18	0:0	6	' '
stmts	75:12	76:16	5	
while	75:12	76:16	6	(* ++ p == ' ')
cond	75:19	75:27	7	* ++ p == ' '
op	75:19	0:0	8	*
op	75:20	0:0	8	++
water	75:22	0:0	8	p
op	75:24	0:0	8	==
water	75:27	0:0	8	' '
stmts	76:16	76:16	7	
water	76:16	0:0	8	;
if	78:8	79:17	4	(* p == '\0')
cond	78:12	78:18	5	* p == '\0'
op	78:12	0:0	6	*
water	78:13	0:0	6	p
op	78:15	0:0	6	==
water	78:18	0:0	6	'\0'
stmts	79:12	79:17	5	
break	79:12	79:17	6	
water	80:8	0:0	4	argv
op	80:12	0:0	4	[
water	80:13	0:0	4	argc
op	80:17	0:0	4	++
op	80:19	0:0	4	]
op	80:21	0:0	4	=
water	80:23	0:0	4	q
op	80:25	0:0	4	=
water	80:27	0:0	4	p
water	80:28	0:0	4	;
while	81:8	82:15	4	(* q && * q != ' ')
cond	81:15	81:27	5	* q && * q != ' '
op	81:15	0:0	6	*
water	81:16	0:0	6	q
op	81:18	0:0	6	&&
op	81:21	0:0	6	*
water	81:22	0:0	6	q
op	81:24	0:0	6	!=
water	81:27	0:0	6	' '
stmts	82:12	82:15	5	
op	82:12	0:0	6	++
water	82:14	0:0	6	q
water	82:15	0:0	6	;
if	84:8	85:17	4	(* q == '\0')
cond	84:12	84:18	5	* q == '\0'
op	84:12	0:0	6	*
water	84:13	0:0	6	q
op	84:15	0:0	6	==
water	84:18	0:0	6	'\0'
stmts	85:12	85:17	5	
break	85:12	85:17	6	
op	86:8	0:0	4	*
water	86:9	0:0	4	q
op	86:11	0:0	4	=
water	86:13	0:0	4	'\0'
water	86:17	0:0	4	;
water	87:8	0:0	4	p
op	87:10	0:0	4	=
water	87:12	0:0	4	q
op	87:14	0:0	4	+
water	87:16	0:0	4	1
water	87:17	0:0	4	;
water	88:4	0:0	4	}
water	89:4	0:0	2	argv
op	89:8	0:0	2	[
water	89:9	0:0	2	argc
op	89:13	0:0	2	]
op	89:15	0:0	2	=
water	89:17	0:0	2	NULL
water	89:21	0:0	2	;
while	91:4	118:4	2	(* ++ argv && ! error)
cond	91:11	91:23	3	* ++ argv && ! error
op	91:11	0:0	4	*
op	91:12	0:0	4	++
water	91:14	0:0	4	argv
op	91:19	0:0	4	&&
op	91:22	0:0	4	!
water	91:23	0:0	4	error
stmts	91:30	118:4	3	
water	91:30	0:0	4	{
if	92:8	100:8	4	(!strncmp (* argv ,"-gamma" ,2 ))
cond	92:12	92:39	5	!strncmp (* argv ,"-gamma" ,2 )
op	92:12	0:0	6	!
call	92:13	92:39	6	strncmp
arg	92:21	92:26	7	*argv
op	92:21	0:0	8	*
water	92:22	0:0	8	argv
arg	92:28	92:36	7	"-gamma"
water	92:28	0:0	8	"-gamma"
arg	92:38	92:39	7	2
water	92:38	0:0	8	2
stmts	92:42	100:8	5	
water	92:42	0:0	6	{
if	93:12	94:23	6	(! * ++ argv)
cond	93:16	93:20	7	! * ++ argv
op	93:16	0:0	8	!
op	93:17	0:0	8	*
op	93:18	0:0	8	++
water	93:20	0:0	8	argv
stmts	94:16	94:23	7	
op	94:16	0:0	8	++
water	94:18	0:0	8	error
water	94:23	0:0	8	;
else	95:12	99:12	6
stmts	95:17	99:12	7	
water	95:17	0:0	8	{
water	96:16	0:0	8	display_exponent
op	96:33	0:0	8	=
call	96:35	96:45	8	atof
arg	96:40	96:45	9	*argv
op	96:40	0:0	10	*
water	96:41	0:0	10	argv
water	96:46	0:0	8	;
if	97:16	98:27	8	(display_exponent <= 0 . 0)
cond	97:20	97:42	9	display_exponent <= 0 . 0
water	97:20	0:0	10	display_exponent
op	97:37	0:0	10	<=
water	97:40	0:0	10	0
op	97:41	0:0	10	.
water	97:42	0:0	10	0
stmts	98:20	98:27	9	
op	98:20	0:0	10	++
water	98:22	0:0	10	error
water	98:27	0:0	10	;
water	99:12	0:0	8	}
water	100:8	0:0	6	}
else	100:10	110:8	4
stmts	100:15	110:8	5	
if	100:15	110:8	6	(!strncmp (* argv ,"-bgcolor" ,2 ))
cond	100:19	100:48	7	!strncmp (* argv ,"-bgcolor" ,2 )
op	100:19	0:0	8	!
call	100:20	100:48	8	strncmp
arg	100:28	100:33	9	*argv
op	100:28	0:0	10	*
water	100:29	0:0	10	argv
arg	100:35	100:45	9	"-bgcolor"
water	100:35	0:0	10	"-bgcolor"
arg	100:47	100:48	9	2
water	100:47	0:0	10	2
stmts	100:51	110:8	7	
water	100:51	0:0	8	{
if	101:12	102:23	8	(! * ++ argv)
cond	101:16	101:20	9	! * ++ argv
op	101:16	0:0	10	!
op	101:17	0:0	10	*
op	101:18	0:0	10	++
water	101:20	0:0	10	argv
stmts	102:16	102:23	9	
op	102:16	0:0	10	++
water	102:18	0:0	10	error
water	102:23	0:0	10	;
else	103:12	109:12	8
stmts	103:17	109:12	9	
water	103:17	0:0	10	{
water	104:16	0:0	10	bgstr
op	104:22	0:0	10	=
op	104:24	0:0	10	*
water	104:25	0:0	10	argv
water	104:29	0:0	10	;
if	105:16	106:27	10	(strlen (bgstr ) != 7 || bgstr [ 0 ] != '#')
cond	105:20	105:54	11	strlen (bgstr ) != 7 || bgstr [ 0 ] != '#'
call	105:20	105:32	12	strlen
arg	105:27	105:32	13	bgstr
water	105:27	0:0	14	bgstr
op	105:34	0:0	12	!=
water	105:37	0:0	12	7
op	105:39	0:0	12	||
water	105:42	0:0	12	bgstr
op	105:47	0:0	12	[
water	105:48	0:0	12	0
op	105:49	0:0	12	]
op	105:51	0:0	12	!=
water	105:54	0:0	12	'#'
stmts	106:20	106:27	11	
op	106:20	0:0	12	++
water	106:22	0:0	12	error
water	106:27	0:0	12	;
else	107:16	108:34	10
stmts	108:20	108:34	11	
water	108:20	0:0	12	have_bg
op	108:28	0:0	12	=
water	108:30	0:0	12	TRUE
water	108:34	0:0	12	;
water	109:12	0:0	10	}
water	110:8	0:0	8	}
else	110:10	117:8	4
stmts	110:15	117:8	5	
water	110:15	0:0	6	{
if	111:12	115:12	6	(* * argv != '-')
cond	111:16	111:26	7	* * argv != '-'
op	111:16	0:0	8	*
op	111:17	0:0	8	*
water	111:18	0:0	8	argv
op	111:23	0:0	8	!=
water	111:26	0:0	8	'-'
stmts	111:31	115:12	7	
water	111:31	0:0	8	{
water	112:16	0:0	8	filename
op	112:25	0:0	8	=
op	112:27	0:0	8	*
water	112:28	0:0	8	argv
water	112:32	0:0	8	;
if	113:16	114:27	8	(argv [ 1 ])
cond	113:20	113:26	9	argv [ 1 ]
water	113:20	0:0	10	argv
op	113:24	0:0	10	[
water	113:25	0:0	10	1
op	113:26	0:0	10	]
stmts	114:20	114:27	9	
op	114:20	0:0	10	++
water	114:22	0:0	10	error
water	114:27	0:0	10	;
water	115:12	0:0	8	}
else	115:14	116:23	6
stmts	116:16	116:23	7	
op	116:16	0:0	8	++
water	116:18	0:0	8	error
water	116:23	0:0	8	;
water	117:8	0:0	6	}
water	118:4	0:0	4	}
if	119:4	120:15	2	(! filename)
cond	119:8	119:9	3	! filename
op	119:8	0:0	4	!
water	119:9	0:0	4	filename
stmts	120:8	120:15	3	
op	120:8	0:0	4	++
water	120:10	0:0	4	error
water	120:15	0:0	4	;
if	122:4	148:4	2	(error)
cond	122:8	122:8	3	error
water	122:8	0:0	4	error
stmts	122:15	148:4	3	
water	122:15	0:0	4	{
decl	124:8	124:14	4	int	ch
call	126:8	126:70	4	fprintf
arg	126:16	126:22	5	stderr
water	126:16	0:0	6	stderr
arg	126:24	126:42	5	"\n%s %s:  %s\n\n"
water	126:24	0:0	6	"\n%s %s:  %s\n\n"
arg	126:44	126:52	5	PROGNAME
water	126:44	0:0	6	PROGNAME
arg	126:54	126:61	5	VERSION
water	126:54	0:0	6	VERSION
arg	126:63	126:70	5	appname
water	126:63	0:0	6	appname
water	126:71	0:0	4	;
call	127:8	127:29	4	readpng_version_info
water	127:30	0:0	4	;
call	128:8	141:50	4	fprintf
arg	128:16	128:22	5	stderr
water	128:16	0:0	6	stderr
arg	128:24	141:14	5	"\n""Usage:  %s [-gamma exp] [-bgcolor bg] file.png\n""    exp \ttransfer-function exponent (``gamma'') of the display\n""\t\t  system in floating-point format (e.g., ``%.1f''); equal\n""\t\t  to the product of the lookup-table exponent (varies)\n""\t\t  and the CRT exponent (usually 2.2); must be positive\n""    bg  \tdesired background color in 7-character hex RGB format\n""\t\t  (e.g., ``#ff7700'' for orange:  same as HTML colors);\n""\t\t  used with transparent images\n""\nPress Q, Esc or mouse button 1 after image is displayed to quit.\n""Press Q or Esc to quit this usage screen.\n""\n"
water	128:24	0:0	6	"\n"
water	129:10	0:0	6	"Usage:  %s [-gamma exp] [-bgcolor bg] file.png\n"
water	130:10	0:0	6	"    exp \ttransfer-function exponent (``gamma'') of the display\n"
water	131:10	0:0	6	"\t\t  system in floating-point format (e.g., ``%.1f''); equal\n"
water	132:10	0:0	6	"\t\t  to the product of the lookup-table exponent (varies)\n"
water	133:10	0:0	6	"\t\t  and the CRT exponent (usually 2.2); must be positive\n"
water	134:10	0:0	6	"    bg  \tdesired background color in 7-character hex RGB format\n"
water	135:10	0:0	6	"\t\t  (e.g., ``#ff7700'' for orange:  same as HTML colors);\n"
water	136:10	0:0	6	"\t\t  used with transparent images\n"
water	137:10	0:0	6	"\nPress Q, Esc or mouse button 1 after image is displayed to quit.\n"
water	139:10	0:0	6	"Press Q or Esc to quit this usage screen.\n"
water	141:10	0:0	6	"\n"
arg	141:16	141:24	5	PROGNAME
water	141:16	0:0	6	PROGNAME
arg	141:26	141:50	5	default_display_exponent
water	141:26	0:0	6	default_display_exponent
water	141:51	0:0	4	;
do	143:8	144:25	4	(ch != 'q' && ch != 'Q' && ch != 0 x1B)
cond	145:15	145:48	5	ch != 'q' && ch != 'Q' && ch != 0 x1B
water	145:15	0:0	6	ch
op	145:18	0:0	6	!=
water	145:21	0:0	6	'q'
op	145:25	0:0	6	&&
water	145:28	0:0	6	ch
op	145:31	0:0	6	!=
water	145:34	0:0	6	'Q'
op	145:38	0:0	6	&&
water	145:41	0:0	6	ch
op	145:44	0:0	6	!=
water	145:47	0:0	6	0
water	145:48	0:0	6	x1B
stmts	144:12	144:25	5	
water	144:12	0:0	6	ch
op	144:15	0:0	6	=
call	144:17	144:24	6	_getch
water	144:25	0:0	6	;
water	145:52	0:0	4	;
call	147:8	147:14	4	exit
arg	147:13	147:14	5	1
water	147:13	0:0	6	1
water	147:15	0:0	4	;
water	148:4	0:0	4	}
if	149:4	152:4	2	(! ( infile =fopen (filename ,"rb" ) ))
cond	149:8	149:40	3	! ( infile =fopen (filename ,"rb" ) )
op	149:8	0:0	4	!
water	149:9	0:0	4	(
water	149:10	0:0	4	infile
op	149:17	0:0	4	=
call	149:19	149:39	4	fopen
arg	149:25	149:33	5	filename
water	149:25	0:0	6	filename
arg	149:35	149:39	5	"rb"
water	149:35	0:0	6	"rb"
water	149:40	0:0	4	)
stmts	149:43	152:4	3	
water	149:43	0:0	4	{
call	150:8	150:74	4	fprintf
arg	150:16	150:22	5	stderr
water	150:16	0:0	6	stderr
arg	150:24	150:64	5	PROGNAME":  can't open PNG file [%s]\n"
water	150:24	0:0	6	PROGNAME
water	150:33	0:0	6	":  can't open PNG file [%s]\n"
arg	150:66	150:74	5	filename
water	150:66	0:0	6	filename
water	150:75	0:0	4	;
op	151:8	0:0	4	++
water	151:10	0:0	4	error
water	151:15	0:0	4	;
water	152:4	0:0	4	}
else	152:6	176:4	2
stmts	152:11	176:4	3	
water	152:11	0:0	4	{
if	153:8	173:8	4	(( rc =readpng_init (infile ,& image_width ,& image_height ) ) != 0)
cond	153:12	153:72	5	( rc =readpng_init (infile ,& image_width ,& image_height ) ) != 0
water	153:12	0:0	6	(
water	153:13	0:0	6	rc
op	153:16	0:0	6	=
call	153:18	153:66	6	readpng_init
arg	153:31	153:37	7	infile
water	153:31	0:0	8	infile
arg	153:39	153:51	7	&image_width
op	153:39	0:0	8	&
water	153:40	0:0	8	image_width
arg	153:53	153:66	7	&image_height
op	153:53	0:0	8	&
water	153:54	0:0	8	image_height
water	153:67	0:0	6	)
op	153:69	0:0	6	!=
water	153:72	0:0	6	0
stmts	153:75	173:8	5	
water	153:75	0:0	6	{
switch	154:12	171:12	6	(rc)
cond	154:20	154:20	7	rc
water	154:20	0:0	8	rc
stmts	154:24	171:12	7	
water	154:24	0:0	8	{
label	155:16	155:22	8	case 1 :
call	156:20	158:30	8	fprintf
arg	156:28	156:34	9	stderr
water	156:28	0:0	10	stderr
arg	156:36	157:72	9	PROGNAME":  [%s] is not a PNG file: incorrect signature\n"
water	156:36	0:0	10	PROGNAME
water	157:22	0:0	10	":  [%s] is not a PNG file: incorrect signature\n"
arg	158:22	158:30	9	filename
water	158:22	0:0	10	filename
water	158:31	0:0	8	;
break	159:20	159:25	8	
label	160:16	160:22	8	case 2 :
call	161:20	162:73	8	fprintf
arg	161:28	161:34	9	stderr
water	161:28	0:0	10	stderr
arg	161:36	162:63	9	PROGNAME":  [%s] has bad IHDR (libpng longjmp)\n"
water	161:36	0:0	10	PROGNAME
water	162:22	0:0	10	":  [%s] has bad IHDR (libpng longjmp)\n"
arg	162:65	162:73	9	filename
water	162:65	0:0	10	filename
water	162:74	0:0	8	;
break	163:20	163:25	8	
label	164:16	164:22	8	case 4 :
call	165:20	165:71	8	fprintf
arg	165:28	165:34	9	stderr
water	165:28	0:0	10	stderr
arg	165:36	165:71	9	PROGNAME":  insufficient memory\n"
water	165:36	0:0	10	PROGNAME
water	165:45	0:0	10	":  insufficient memory\n"
water	165:72	0:0	8	;
break	166:20	166:25	8	
label	167:16	167:23	8	default :
call	168:20	169:57	8	fprintf
arg	168:28	168:34	9	stderr
water	168:28	0:0	10	stderr
arg	168:36	169:57	9	PROGNAME":  unknown readpng_init() error\n"
water	168:36	0:0	10	PROGNAME
water	169:22	0:0	10	":  unknown readpng_init() error\n"
water	169:58	0:0	8	;
break	170:20	170:25	8	
water	171:12	0:0	8	}
op	172:12	0:0	6	++
water	172:14	0:0	6	error
water	172:19	0:0	6	;
water	173:8	0:0	6	}
if	174:8	175:26	4	(error)
cond	174:12	174:12	5	error
water	174:12	0:0	6	error
stmts	175:12	175:26	5	
call	175:12	175:25	6	fclose
arg	175:19	175:25	7	infile
water	175:19	0:0	8	infile
water	175:26	0:0	6	;
water	176:4	0:0	4	}
if	177:4	188:4	2	(error)
cond	177:8	177:8	3	error
water	177:8	0:0	4	error
stmts	177:15	188:4	3	
water	177:15	0:0	4	{
decl	179:8	179:14	4	int	ch
call	181:8	181:49	4	fprintf
arg	181:16	181:22	5	stderr
water	181:16	0:0	6	stderr
arg	181:24	181:49	5	PROGNAME":  aborting.\n"
water	181:24	0:0	6	PROGNAME
water	181:33	0:0	6	":  aborting.\n"
water	181:50	0:0	4	;
do	183:8	184:25	4	(ch != 'q' && ch != 'Q' && ch != 0 x1B)
cond	185:15	185:48	5	ch != 'q' && ch != 'Q' && ch != 0 x1B
water	185:15	0:0	6	ch
op	185:18	0:0	6	!=
water	185:21	0:0	6	'q'
op	185:25	0:0	6	&&
water	185:28	0:0	6	ch
op	185:31	0:0	6	!=
water	185:34	0:0	6	'Q'
op	185:38	0:0	6	&&
water	185:41	0:0	6	ch
op	185:44	0:0	6	!=
water	185:47	0:0	6	0
water	185:48	0:0	6	x1B
stmts	184:12	184:25	5	
water	184:12	0:0	6	ch
op	184:15	0:0	6	=
call	184:17	184:24	6	_getch
water	184:25	0:0	6	;
water	185:52	0:0	4	;
call	187:8	187:14	4	exit
arg	187:13	187:14	5	2
water	187:13	0:0	6	2
water	187:15	0:0	4	;
water	188:4	0:0	4	}
else	188:6	195:4	2
stmts	188:11	195:4	3	
water	188:11	0:0	4	{
call	189:8	189:68	4	fprintf
arg	189:16	189:22	5	stderr
water	189:16	0:0	6	stderr
arg	189:24	189:40	5	"\n%s %s:  %s\n"
water	189:24	0:0	6	"\n%s %s:  %s\n"
arg	189:42	189:50	5	PROGNAME
water	189:42	0:0	6	PROGNAME
arg	189:52	189:59	5	VERSION
water	189:52	0:0	6	VERSION
arg	189:61	189:68	5	appname
water	189:61	0:0	6	appname
water	189:69	0:0	4	;
call	191:8	193:18	4	fprintf
arg	191:16	191:22	5	stderr
water	191:16	0:0	6	stderr
arg	192:10	192:77	5	"\n   [console window:  closing this window will terminate %s]\n\n"
water	192:10	0:0	6	"\n   [console window:  closing this window will terminate %s]\n\n"
arg	193:10	193:18	5	PROGNAME
water	193:10	0:0	6	PROGNAME
water	193:19	0:0	4	;
water	195:4	0:0	4	}
water	197:4	0:0	2	alen
op	197:9	0:0	2	=
call	197:11	197:25	2	strlen
arg	197:18	197:25	3	appname
water	197:18	0:0	4	appname
water	197:26	0:0	2	;
water	198:4	0:0	2	flen
op	198:9	0:0	2	=
call	198:11	198:26	2	strlen
arg	198:18	198:26	3	filename
water	198:18	0:0	4	filename
water	198:27	0:0	2	;
if	199:4	200:77	2	(alen + flen + 3 > 1023)
cond	199:8	199:26	3	alen + flen + 3 > 1023
water	199:8	0:0	4	alen
op	199:13	0:0	4	+
water	199:15	0:0	4	flen
op	199:20	0:0	4	+
water	199:22	0:0	4	3
op	199:24	0:0	4	>
water	199:26	0:0	4	1023
stmts	200:8	200:77	3	
call	200:8	200:76	4	sprintf
arg	200:16	200:24	5	titlebar
water	200:16	0:0	6	titlebar
arg	200:26	200:38	5	"%s:  ...%s"
water	200:26	0:0	6	"%s:  ...%s"
arg	200:40	200:47	5	appname
water	200:40	0:0	6	appname
arg	200:49	200:76	5	filename+(alen+flen+6-1023)
water	200:49	0:0	6	filename
op	200:57	0:0	6	+
water	200:58	0:0	6	(
water	200:59	0:0	6	alen
op	200:63	0:0	6	+
water	200:64	0:0	6	flen
op	200:68	0:0	6	+
water	200:69	0:0	6	6
op	200:70	0:0	6	-
water	200:71	0:0	6	1023
water	200:75	0:0	6	)
water	200:77	0:0	4	;
else	201:4	202:55	2
stmts	202:8	202:55	3	
call	202:8	202:54	4	sprintf
arg	202:16	202:24	5	titlebar
water	202:16	0:0	6	titlebar
arg	202:26	202:35	5	"%s:  %s"
water	202:26	0:0	6	"%s:  %s"
arg	202:37	202:44	5	appname
water	202:37	0:0	6	appname
arg	202:46	202:54	5	filename
water	202:46	0:0	6	filename
water	202:55	0:0	4	;
if	206:4	212:4	2	(have_bg)
cond	206:8	206:8	3	have_bg
water	206:8	0:0	4	have_bg
stmts	206:17	212:4	3	
water	206:17	0:0	4	{
water	207:8	0:0	4	unsigned
water	207:17	0:0	4	r
water	207:18	0:0	4	,
water	207:20	0:0	4	g
water	207:21	0:0	4	,
water	207:23	0:0	4	b
water	207:24	0:0	4	;
call	208:8	208:47	4	sscanf
arg	208:15	208:22	5	bgstr+1
water	208:15	0:0	6	bgstr
op	208:20	0:0	6	+
water	208:21	0:0	6	1
arg	208:24	208:35	5	"%2x%2x%2x"
water	208:24	0:0	6	"%2x%2x%2x"
arg	208:37	208:39	5	&r
op	208:37	0:0	6	&
water	208:38	0:0	6	r
arg	208:41	208:43	5	&g
op	208:41	0:0	6	&
water	208:42	0:0	6	g
arg	208:45	208:47	5	&b
op	208:45	0:0	6	&
water	208:46	0:0	6	b
water	208:48	0:0	4	;
water	209:8	0:0	4	bg_red
op	209:17	0:0	4	=
water	209:19	0:0	4	(
water	209:20	0:0	4	uch
water	209:23	0:0	4	)
water	209:24	0:0	4	r
water	209:25	0:0	4	;
water	210:8	0:0	4	bg_green
op	210:17	0:0	4	=
water	210:19	0:0	4	(
water	210:20	0:0	4	uch
water	210:23	0:0	4	)
water	210:24	0:0	4	g
water	210:25	0:0	4	;
water	211:8	0:0	4	bg_blue
op	211:17	0:0	4	=
water	211:19	0:0	4	(
water	211:20	0:0	4	uch
water	211:23	0:0	4	)
water	211:24	0:0	4	b
water	211:25	0:0	4	;
water	212:4	0:0	4	}
else	212:6	217:4	2
stmts	212:11	217:4	3	
if	212:11	217:4	4	(readpng_get_bgcolor (& bg_red ,& bg_green ,& bg_blue ) > 1)
cond	212:15	212:67	5	readpng_get_bgcolor (& bg_red ,& bg_green ,& bg_blue ) > 1
call	212:15	212:63	6	readpng_get_bgcolor
arg	212:35	212:42	7	&bg_red
op	212:35	0:0	8	&
water	212:36	0:0	8	bg_red
arg	212:44	212:53	7	&bg_green
op	212:44	0:0	8	&
water	212:45	0:0	8	bg_green
arg	212:55	212:63	7	&bg_blue
op	212:55	0:0	8	&
water	212:56	0:0	8	bg_blue
op	212:65	0:0	6	>
water	212:67	0:0	6	1
stmts	212:70	217:4	5	
water	212:70	0:0	6	{
call	213:8	213:28	6	readpng_cleanup
arg	213:24	213:28	7	TRUE
water	213:24	0:0	8	TRUE
water	213:29	0:0	6	;
call	214:8	215:65	6	fprintf
arg	214:16	214:22	7	stderr
water	214:16	0:0	8	stderr
arg	214:24	215:65	7	PROGNAME":  libpng error while checking for background color\n"
water	214:24	0:0	8	PROGNAME
water	215:10	0:0	8	":  libpng error while checking for background color\n"
water	215:66	0:0	6	;
call	216:8	216:14	6	exit
arg	216:13	216:14	7	2
water	216:13	0:0	8	2
water	216:15	0:0	6	;
water	217:4	0:0	6	}
if	220:4	221:15	2	(rpng_win_create_window (hInst ,showmode ))
cond	220:8	220:46	3	rpng_win_create_window (hInst ,showmode )
call	220:8	220:46	4	rpng_win_create_window
arg	220:31	220:36	5	hInst
water	220:31	0:0	6	hInst
arg	220:38	220:46	5	showmode
water	220:38	0:0	6	showmode
stmts	221:8	221:15	3	
call	221:8	221:14	4	exit
arg	221:13	221:14	5	2
water	221:13	0:0	6	2
water	221:15	0:0	4	;
call	223:4	223:51	2	Trace
arg	223:10	223:51	3	(stderr,"calling readpng_get_image()\n")
water	223:10	0:0	4	(
water	223:11	0:0	4	stderr
water	223:17	0:0	4	,
water	223:19	0:0	4	"calling readpng_get_image()\n"
water	223:50	0:0	4	)
water	224:4	0:0	2	image_data
op	224:15	0:0	2	=
call	224:17	225:21	2	readpng_get_image
arg	224:35	224:51	3	display_exponent
water	224:35	0:0	4	display_exponent
arg	224:53	224:68	3	&image_channels
op	224:53	0:0	4	&
water	224:54	0:0	4	image_channels
arg	225:6	225:21	3	&image_rowbytes
op	225:6	0:0	4	&
water	225:7	0:0	4	image_rowbytes
water	225:22	0:0	2	;
call	226:4	226:53	2	Trace
arg	226:10	226:53	3	(stderr,"done with readpng_get_image()\n")
water	226:10	0:0	4	(
water	226:11	0:0	4	stderr
water	226:17	0:0	4	,
water	226:19	0:0	4	"done with readpng_get_image()\n"
water	226:52	0:0	4	)
call	229:4	229:25	2	readpng_cleanup
arg	229:20	229:25	3	FALSE
water	229:20	0:0	4	FALSE
water	229:26	0:0	2	;
call	230:4	230:17	2	fclose
arg	230:11	230:17	3	infile
water	230:11	0:0	4	infile
water	230:18	0:0	2	;
if	231:4	234:4	2	(! image_data)
cond	231:8	231:9	3	! image_data
op	231:8	0:0	4	!
water	231:9	0:0	4	image_data
stmts	231:21	234:4	3	
water	231:21	0:0	4	{
call	232:8	232:66	4	fprintf
arg	232:16	232:22	5	stderr
water	232:16	0:0	6	stderr
arg	232:24	232:66	5	PROGNAME":  unable to decode PNG image\n"
water	232:24	0:0	6	PROGNAME
water	232:33	0:0	6	":  unable to decode PNG image\n"
water	232:67	0:0	4	;
call	233:8	233:14	4	exit
arg	233:13	233:14	5	3
water	233:13	0:0	6	3
water	233:15	0:0	4	;
water	234:4	0:0	4	}
call	236:4	236:56	2	Trace
arg	236:10	236:56	3	(stderr,"calling rpng_win_display_image()\n")
water	236:10	0:0	4	(
water	236:11	0:0	4	stderr
water	236:17	0:0	4	,
water	236:19	0:0	4	"calling rpng_win_display_image()\n"
water	236:55	0:0	4	)
water	237:4	0:0	2	if
water	237:7	0:0	2	(
call	237:8	237:31	2	rpng_win_display_image
water	237:32	0:0	2	)
water	237:34	0:0	2	{
call	238:8	238:23	2	free
arg	238:13	238:23	3	image_data
water	238:13	0:0	4	image_data
water	238:24	0:0	2	;
call	239:8	239:14	2	exit
arg	239:13	239:14	3	4
water	239:13	0:0	4	4
water	239:15	0:0	2	;
water	240:4	0:0	2	}
call	241:4	241:58	2	Trace
arg	241:10	241:58	3	(stderr,"done with rpng_win_display_image()\n")
water	241:10	0:0	4	(
water	241:11	0:0	4	stderr
water	241:17	0:0	4	,
water	241:19	0:0	4	"done with rpng_win_display_image()\n"
water	241:57	0:0	4	)
call	243:4	249:4	2	printf
arg	245:6	249:4	3	"Done.  Press Q, Esc or mouse button 1 (within image window) to quit.\n""Done.  Press mouse button 1 (within image window) to quit.\n"
water	245:6	0:0	4	"Done.  Press Q, Esc or mouse button 1 (within image window) to quit.\n"
water	247:6	0:0	4	"Done.  Press mouse button 1 (within image window) to quit.\n"
water	249:5	0:0	2	;
call	250:4	250:17	2	fflush
arg	250:11	250:17	3	stdout
water	250:11	0:0	4	stdout
water	250:18	0:0	2	;
while	251:4	254:4	2	(GetMessage (& msg ,NULL ,0 ,0 ))
cond	251:11	251:38	3	GetMessage (& msg ,NULL ,0 ,0 )
call	251:11	251:38	4	GetMessage
arg	251:22	251:26	5	&msg
op	251:22	0:0	6	&
water	251:23	0:0	6	msg
arg	251:28	251:32	5	NULL
water	251:28	0:0	6	NULL
arg	251:34	251:35	5	0
water	251:34	0:0	6	0
arg	251:37	251:38	5	0
water	251:37	0:0	6	0
stmts	251:41	254:4	3	
water	251:41	0:0	4	{
call	252:8	252:29	4	TranslateMessage
arg	252:25	252:29	5	&msg
op	252:25	0:0	6	&
water	252:26	0:0	6	msg
water	252:30	0:0	4	;
call	253:8	253:28	4	DispatchMessage
arg	253:24	253:28	5	&msg
op	253:24	0:0	6	&
water	253:25	0:0	6	msg
water	253:29	0:0	4	;
water	254:4	0:0	4	}
call	256:4	256:21	2	rpng_win_cleanup
water	256:22	0:0	2	;
return	257:4	257:21	2	msg.wParam
water	257:11	0:0	3	msg
op	257:14	0:0	3	.
water	257:15	0:0	3	wParam
