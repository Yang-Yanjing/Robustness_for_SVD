func	1:0	59:0	0	static void	print_pixel
params	2:11	0:0	1	
param	2:12	2:31	2	png_structp	png_ptr
param	2:33	2:51	2	png_infop	info_ptr
param	2:53	2:72	2	png_const_bytep	row
param	3:3	3:16	2	png_uint_32	x
stmnts	5:3	58:3	1	
water	5:3	0:0	2	PNG_CONST
water	5:13	0:0	2	unsigned
water	5:22	0:0	2	int
water	5:26	0:0	2	bit_depth
op	5:36	0:0	2	=
call	5:38	5:73	2	png_get_bit_depth
arg	5:56	5:63	3	png_ptr
water	5:56	0:0	4	png_ptr
arg	5:65	5:73	3	info_ptr
water	5:65	0:0	4	info_ptr
water	5:74	0:0	2	;
switch	6:3	58:3	2	(png_get_color_type (png_ptr ,info_ptr ))
cond	6:11	6:47	3	png_get_color_type (png_ptr ,info_ptr )
call	6:11	6:47	4	png_get_color_type
arg	6:30	6:37	5	png_ptr
water	6:30	0:0	6	png_ptr
arg	6:39	6:47	5	info_ptr
water	6:39	0:0	6	info_ptr
stmts	7:3	58:3	3	
water	7:3	0:0	4	{
label	8:6	8:30	4	case PNG_COLOR_TYPE_GRAY :
call	9:9	9:63	4	printf
arg	9:16	9:27	5	"GRAY %u\n"
water	9:16	0:0	6	"GRAY %u\n"
arg	9:29	9:63	5	component(row,x,0,bit_depth,1)
call	9:29	9:62	6	component
arg	9:39	9:42	7	row
water	9:39	0:0	8	row
arg	9:44	9:45	7	x
water	9:44	0:0	8	x
arg	9:47	9:48	7	0
water	9:47	0:0	8	0
arg	9:50	9:59	7	bit_depth
water	9:50	0:0	8	bit_depth
arg	9:61	9:62	7	1
water	9:61	0:0	8	1
water	9:64	0:0	4	;
return	10:9	10:15	4	
label	15:6	15:33	4	case PNG_COLOR_TYPE_PALETTE :
water	16:9	0:0	4	{
water	17:12	0:0	4	PNG_CONST
water	17:22	0:0	4	unsigned
water	17:31	0:0	4	int
water	17:35	0:0	4	index
op	17:41	0:0	4	=
call	17:43	17:76	4	component
arg	17:53	17:56	5	row
water	17:53	0:0	6	row
arg	17:58	17:59	5	x
water	17:58	0:0	6	x
arg	17:61	17:62	5	0
water	17:61	0:0	6	0
arg	17:64	17:73	5	bit_depth
water	17:64	0:0	6	bit_depth
arg	17:75	17:76	5	1
water	17:75	0:0	6	1
water	17:77	0:0	4	;
decl	18:12	18:37	4	png_colorp	palette
op	18:31	0:0	4	=
water	18:33	0:0	4	NULL
decl	19:12	19:31	4	int	num_palette
op	19:28	0:0	4	=
water	19:30	0:0	4	0
if	20:12	36:12	4	((png_get_PLTE (png_ptr ,info_ptr ,& palette ,& num_palette ) & PNG_INFO_PLTE ) && num_palette > 0 && palette != NULL)
cond	20:16	21:63	5	(png_get_PLTE (png_ptr ,info_ptr ,& palette ,& num_palette ) & PNG_INFO_PLTE ) && num_palette > 0 && palette != NULL
water	20:16	0:0	6	(
call	20:17	20:71	6	png_get_PLTE
arg	20:30	20:37	7	png_ptr
water	20:30	0:0	8	png_ptr
arg	20:39	20:47	7	info_ptr
water	20:39	0:0	8	info_ptr
arg	20:49	20:57	7	&palette
op	20:49	0:0	8	&
water	20:50	0:0	8	palette
arg	20:59	20:71	7	&num_palette
op	20:59	0:0	8	&
water	20:60	0:0	8	num_palette
op	20:73	0:0	6	&
water	21:15	0:0	6	PNG_INFO_PLTE
water	21:28	0:0	6	)
op	21:30	0:0	6	&&
water	21:33	0:0	6	num_palette
op	21:45	0:0	6	>
water	21:47	0:0	6	0
op	21:49	0:0	6	&&
water	21:52	0:0	6	palette
op	21:60	0:0	6	!=
water	21:63	0:0	6	NULL
stmts	22:12	36:12	5	
water	22:12	0:0	6	{
decl	23:15	23:43	6	png_bytep	trans_alpha
op	23:37	0:0	6	=
water	23:39	0:0	6	NULL
decl	24:15	24:32	6	int	num_trans
op	24:29	0:0	6	=
water	24:31	0:0	6	0
if	25:15	31:66	6	((png_get_tRNS (png_ptr ,info_ptr ,& trans_alpha ,& num_trans ,NULL ) & PNG_INFO_tRNS ) && num_trans > 0 && trans_alpha != NULL)
cond	25:19	27:33	7	(png_get_tRNS (png_ptr ,info_ptr ,& trans_alpha ,& num_trans ,NULL ) & PNG_INFO_tRNS ) && num_trans > 0 && trans_alpha != NULL
water	25:19	0:0	8	(
call	25:20	26:22	8	png_get_tRNS
arg	25:33	25:40	9	png_ptr
water	25:33	0:0	10	png_ptr
arg	25:42	25:50	9	info_ptr
water	25:42	0:0	10	info_ptr
arg	25:52	25:64	9	&trans_alpha
op	25:52	0:0	10	&
water	25:53	0:0	10	trans_alpha
arg	25:66	25:76	9	&num_trans
op	25:66	0:0	10	&
water	25:67	0:0	10	num_trans
arg	26:18	26:22	9	NULL
water	26:18	0:0	10	NULL
op	26:24	0:0	8	&
water	26:26	0:0	8	PNG_INFO_tRNS
water	26:39	0:0	8	)
op	26:41	0:0	8	&&
water	26:44	0:0	8	num_trans
op	26:54	0:0	8	>
water	26:56	0:0	8	0
op	26:58	0:0	8	&&
water	27:18	0:0	8	trans_alpha
op	27:30	0:0	8	!=
water	27:33	0:0	8	NULL
stmts	28:18	31:66	7	
call	28:18	31:65	8	printf
arg	28:25	28:53	9	"INDEXED %u = %d %d %d %d\n"
water	28:25	0:0	10	"INDEXED %u = %d %d %d %d\n"
arg	28:55	28:60	9	index
water	28:55	0:0	10	index
arg	29:21	29:39	9	palette[index].red
water	29:21	0:0	10	palette
op	29:28	0:0	10	[
water	29:29	0:0	10	index
op	29:34	0:0	10	]
op	29:35	0:0	10	.
water	29:36	0:0	10	red
arg	29:41	29:61	9	palette[index].green
water	29:41	0:0	10	palette
op	29:48	0:0	10	[
water	29:49	0:0	10	index
op	29:54	0:0	10	]
op	29:55	0:0	10	.
water	29:56	0:0	10	green
arg	30:21	30:40	9	palette[index].blue
water	30:21	0:0	10	palette
op	30:28	0:0	10	[
water	30:29	0:0	10	index
op	30:34	0:0	10	]
op	30:35	0:0	10	.
water	30:36	0:0	10	blue
arg	31:21	31:65	9	index<num_trans?trans_alpha[index]:255
water	31:21	0:0	10	index
op	31:27	0:0	10	<
water	31:29	0:0	10	num_trans
water	31:39	0:0	10	?
water	31:41	0:0	10	trans_alpha
op	31:52	0:0	10	[
water	31:53	0:0	10	index
op	31:58	0:0	10	]
water	31:60	0:0	10	:
water	31:62	0:0	10	255
water	31:66	0:0	8	;
else	32:15	35:41	6
stmts	33:18	35:41	7	
call	33:18	35:40	8	printf
arg	33:25	33:50	9	"INDEXED %u = %d %d %d\n"
water	33:25	0:0	10	"INDEXED %u = %d %d %d\n"
arg	33:52	33:57	9	index
water	33:52	0:0	10	index
arg	34:21	34:39	9	palette[index].red
water	34:21	0:0	10	palette
op	34:28	0:0	10	[
water	34:29	0:0	10	index
op	34:34	0:0	10	]
op	34:35	0:0	10	.
water	34:36	0:0	10	red
arg	34:41	34:61	9	palette[index].green
water	34:41	0:0	10	palette
op	34:48	0:0	10	[
water	34:49	0:0	10	index
op	34:54	0:0	10	]
op	34:55	0:0	10	.
water	34:56	0:0	10	green
arg	35:21	35:40	9	palette[index].blue
water	35:21	0:0	10	palette
op	35:28	0:0	10	[
water	35:29	0:0	10	index
op	35:34	0:0	10	]
op	35:35	0:0	10	.
water	35:36	0:0	10	blue
water	35:41	0:0	8	;
water	36:12	0:0	6	}
else	37:12	38:60	4
stmts	38:15	38:60	5	
call	38:15	38:59	6	printf
arg	38:22	38:52	7	"INDEXED %u = invalid index\n"
water	38:22	0:0	8	"INDEXED %u = invalid index\n"
arg	38:54	38:59	7	index
water	38:54	0:0	8	index
water	38:60	0:0	6	;
water	39:9	0:0	4	}
return	40:9	40:15	4	
label	41:6	41:29	4	case PNG_COLOR_TYPE_RGB :
call	42:9	44:46	4	printf
arg	42:16	42:32	5	"RGB %u %u %u\n"
water	42:16	0:0	6	"RGB %u %u %u\n"
arg	42:34	42:68	5	component(row,x,0,bit_depth,3)
call	42:34	42:67	6	component
arg	42:44	42:47	7	row
water	42:44	0:0	8	row
arg	42:49	42:50	7	x
water	42:49	0:0	8	x
arg	42:52	42:53	7	0
water	42:52	0:0	8	0
arg	42:55	42:64	7	bit_depth
water	42:55	0:0	8	bit_depth
arg	42:66	42:67	7	3
water	42:66	0:0	8	3
arg	43:12	43:46	5	component(row,x,1,bit_depth,3)
call	43:12	43:45	6	component
arg	43:22	43:25	7	row
water	43:22	0:0	8	row
arg	43:27	43:28	7	x
water	43:27	0:0	8	x
arg	43:30	43:31	7	1
water	43:30	0:0	8	1
arg	43:33	43:42	7	bit_depth
water	43:33	0:0	8	bit_depth
arg	43:44	43:45	7	3
water	43:44	0:0	8	3
arg	44:12	44:46	5	component(row,x,2,bit_depth,3)
call	44:12	44:45	6	component
arg	44:22	44:25	7	row
water	44:22	0:0	8	row
arg	44:27	44:28	7	x
water	44:27	0:0	8	x
arg	44:30	44:31	7	2
water	44:30	0:0	8	2
arg	44:33	44:42	7	bit_depth
water	44:33	0:0	8	bit_depth
arg	44:44	44:45	7	3
water	44:44	0:0	8	3
water	44:47	0:0	4	;
return	45:9	45:15	4	
label	46:6	46:36	4	case PNG_COLOR_TYPE_GRAY_ALPHA :
call	47:9	48:46	4	printf
arg	47:16	47:36	5	"GRAY+ALPHA %u %u\n"
water	47:16	0:0	6	"GRAY+ALPHA %u %u\n"
arg	47:38	47:72	5	component(row,x,0,bit_depth,2)
call	47:38	47:71	6	component
arg	47:48	47:51	7	row
water	47:48	0:0	8	row
arg	47:53	47:54	7	x
water	47:53	0:0	8	x
arg	47:56	47:57	7	0
water	47:56	0:0	8	0
arg	47:59	47:68	7	bit_depth
water	47:59	0:0	8	bit_depth
arg	47:70	47:71	7	2
water	47:70	0:0	8	2
arg	48:12	48:46	5	component(row,x,1,bit_depth,2)
call	48:12	48:45	6	component
arg	48:22	48:25	7	row
water	48:22	0:0	8	row
arg	48:27	48:28	7	x
water	48:27	0:0	8	x
arg	48:30	48:31	7	1
water	48:30	0:0	8	1
arg	48:33	48:42	7	bit_depth
water	48:33	0:0	8	bit_depth
arg	48:44	48:45	7	2
water	48:44	0:0	8	2
water	48:47	0:0	4	;
return	49:9	49:15	4	
label	50:6	50:35	4	case PNG_COLOR_TYPE_RGB_ALPHA :
call	51:9	54:46	4	printf
arg	51:16	51:36	5	"RGBA %u %u %u %u\n"
water	51:16	0:0	6	"RGBA %u %u %u %u\n"
arg	51:38	51:72	5	component(row,x,0,bit_depth,4)
call	51:38	51:71	6	component
arg	51:48	51:51	7	row
water	51:48	0:0	8	row
arg	51:53	51:54	7	x
water	51:53	0:0	8	x
arg	51:56	51:57	7	0
water	51:56	0:0	8	0
arg	51:59	51:68	7	bit_depth
water	51:59	0:0	8	bit_depth
arg	51:70	51:71	7	4
water	51:70	0:0	8	4
arg	52:12	52:46	5	component(row,x,1,bit_depth,4)
call	52:12	52:45	6	component
arg	52:22	52:25	7	row
water	52:22	0:0	8	row
arg	52:27	52:28	7	x
water	52:27	0:0	8	x
arg	52:30	52:31	7	1
water	52:30	0:0	8	1
arg	52:33	52:42	7	bit_depth
water	52:33	0:0	8	bit_depth
arg	52:44	52:45	7	4
water	52:44	0:0	8	4
arg	53:12	53:46	5	component(row,x,2,bit_depth,4)
call	53:12	53:45	6	component
arg	53:22	53:25	7	row
water	53:22	0:0	8	row
arg	53:27	53:28	7	x
water	53:27	0:0	8	x
arg	53:30	53:31	7	2
water	53:30	0:0	8	2
arg	53:33	53:42	7	bit_depth
water	53:33	0:0	8	bit_depth
arg	53:44	53:45	7	4
water	53:44	0:0	8	4
arg	54:12	54:46	5	component(row,x,3,bit_depth,4)
call	54:12	54:45	6	component
arg	54:22	54:25	7	row
water	54:22	0:0	8	row
arg	54:27	54:28	7	x
water	54:27	0:0	8	x
arg	54:30	54:31	7	3
water	54:30	0:0	8	3
arg	54:33	54:42	7	bit_depth
water	54:33	0:0	8	bit_depth
arg	54:44	54:45	7	4
water	54:44	0:0	8	4
water	54:47	0:0	4	;
return	55:9	55:15	4	
label	56:6	56:13	4	default :
call	57:9	57:48	4	png_error
arg	57:19	57:26	5	png_ptr
water	57:19	0:0	6	png_ptr
arg	57:28	57:48	5	"invalid color type"
water	57:28	0:0	6	"invalid color type"
water	57:49	0:0	4	;
water	58:3	0:0	4	}
