func	1:0	573:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	572:12	1	
decl	4:4	4:15	2	FILE	*keybd
decl	7:4	7:17	2	FILE	*tmpfile
decl	8:4	8:20	2	char	tmpline[80]
decl	10:4	10:37	2	char	*inname
op	10:17	0:0	2	=
water	10:19	0:0	2	NULL
water	10:23	0:0	2	,
decl	10:4	10:37	2	char	outname[256]
decl	11:4	11:34	2	char	*p
water	11:11	0:0	2	,
decl	11:4	11:34	2	char	pnmchar
water	11:20	0:0	2	,
decl	11:4	11:34	2	char	pnmline[256]
decl	12:4	12:32	2	char	*bgstr
water	12:15	0:0	2	,
decl	12:4	12:32	2	char	*textbuf
op	12:26	0:0	2	=
water	12:28	0:0	2	NULL
decl	13:4	13:16	2	ulg	rowbytes
decl	14:4	14:19	2	int	rc
water	14:10	0:0	2	,
decl	14:4	14:19	2	int	len
op	14:16	0:0	2	=
water	14:18	0:0	2	0
decl	15:4	15:17	2	int	error
op	15:14	0:0	2	=
water	15:16	0:0	2	0
decl	16:4	16:20	2	int	text
op	16:13	0:0	2	=
water	16:15	0:0	2	FALSE
decl	17:4	17:14	2	int	maxval
decl	18:4	18:23	2	double	LUT_exponent
decl	19:4	19:29	2	double	CRT_exponent
op	19:24	0:0	2	=
water	19:26	0:0	2	2
op	19:27	0:0	2	.
water	19:28	0:0	2	2
decl	20:4	20:35	2	double	default_display_exponent
decl	21:4	21:30	2	double	default_gamma
op	21:25	0:0	2	=
water	21:27	0:0	2	0
op	21:28	0:0	2	.
water	21:29	0:0	2	0
water	22:4	0:0	2	wpng_info
op	22:13	0:0	2	.
water	22:14	0:0	2	infile
op	22:21	0:0	2	=
water	22:23	0:0	2	NULL
water	22:27	0:0	2	;
water	23:4	0:0	2	wpng_info
op	23:13	0:0	2	.
water	23:14	0:0	2	outfile
op	23:22	0:0	2	=
water	23:24	0:0	2	NULL
water	23:28	0:0	2	;
water	24:4	0:0	2	wpng_info
op	24:13	0:0	2	.
water	24:14	0:0	2	image_data
op	24:25	0:0	2	=
water	24:27	0:0	2	NULL
water	24:31	0:0	2	;
water	25:4	0:0	2	wpng_info
op	25:13	0:0	2	.
water	25:14	0:0	2	row_pointers
op	25:27	0:0	2	=
water	25:29	0:0	2	NULL
water	25:33	0:0	2	;
water	26:4	0:0	2	wpng_info
op	26:13	0:0	2	.
water	26:14	0:0	2	filter
op	26:21	0:0	2	=
water	26:23	0:0	2	FALSE
water	26:28	0:0	2	;
water	27:4	0:0	2	wpng_info
op	27:13	0:0	2	.
water	27:14	0:0	2	interlaced
op	27:25	0:0	2	=
water	27:27	0:0	2	FALSE
water	27:32	0:0	2	;
water	28:4	0:0	2	wpng_info
op	28:13	0:0	2	.
water	28:14	0:0	2	have_bg
op	28:22	0:0	2	=
water	28:24	0:0	2	FALSE
water	28:29	0:0	2	;
water	29:4	0:0	2	wpng_info
op	29:13	0:0	2	.
water	29:14	0:0	2	have_time
op	29:24	0:0	2	=
water	29:26	0:0	2	FALSE
water	29:31	0:0	2	;
water	30:4	0:0	2	wpng_info
op	30:13	0:0	2	.
water	30:14	0:0	2	have_text
op	30:24	0:0	2	=
water	30:26	0:0	2	0
water	30:27	0:0	2	;
water	31:4	0:0	2	wpng_info
op	31:13	0:0	2	.
water	31:14	0:0	2	gamma
op	31:20	0:0	2	=
water	31:22	0:0	2	0
op	31:23	0:0	2	.
water	31:24	0:0	2	0
water	31:25	0:0	2	;
water	42:4	0:0	2	LUT_exponent
op	42:17	0:0	2	=
water	42:19	0:0	2	1
op	42:20	0:0	2	.
water	42:21	0:0	2	0
op	42:23	0:0	2	/
water	42:25	0:0	2	2
op	42:26	0:0	2	.
water	42:27	0:0	2	2
water	42:28	0:0	2	;
water	48:4	0:0	2	LUT_exponent
op	48:17	0:0	2	=
water	48:19	0:0	2	1
op	48:20	0:0	2	.
water	48:21	0:0	2	0
op	48:23	0:0	2	/
water	48:25	0:0	2	1
op	48:26	0:0	2	.
water	48:27	0:0	2	7
water	48:28	0:0	2	;
water	51:4	0:0	2	tmpfile
op	51:12	0:0	2	=
call	51:14	51:56	2	fopen
arg	51:20	51:51	3	"/etc/config/system.glGammaVal"
water	51:20	0:0	4	"/etc/config/system.glGammaVal"
arg	51:53	51:56	3	"r"
water	51:53	0:0	4	"r"
water	51:57	0:0	2	;
if	52:4	59:4	2	(tmpfile)
cond	52:8	52:8	3	tmpfile
water	52:8	0:0	4	tmpfile
stmts	52:17	59:4	3	
water	52:17	0:0	4	{
decl	53:8	53:24	4	double	sgi_gamma
call	54:8	54:34	4	fgets
arg	54:14	54:21	5	tmpline
water	54:14	0:0	6	tmpline
arg	54:23	54:25	5	80
water	54:23	0:0	6	80
arg	54:27	54:34	5	tmpfile
water	54:27	0:0	6	tmpfile
water	54:35	0:0	4	;
call	55:8	55:22	4	fclose
arg	55:15	55:22	5	tmpfile
water	55:15	0:0	6	tmpfile
water	55:23	0:0	4	;
water	56:8	0:0	4	sgi_gamma
op	56:18	0:0	4	=
call	56:20	56:32	4	atof
arg	56:25	56:32	5	tmpline
water	56:25	0:0	6	tmpline
water	56:33	0:0	4	;
if	57:8	58:42	4	(sgi_gamma > 0 . 0)
cond	57:12	57:26	5	sgi_gamma > 0 . 0
water	57:12	0:0	6	sgi_gamma
op	57:22	0:0	6	>
water	57:24	0:0	6	0
op	57:25	0:0	6	.
water	57:26	0:0	6	0
stmts	58:12	58:42	5	
water	58:12	0:0	6	LUT_exponent
op	58:25	0:0	6	=
water	58:27	0:0	6	1
op	58:28	0:0	6	.
water	58:29	0:0	6	0
op	58:31	0:0	6	/
water	58:33	0:0	6	sgi_gamma
water	58:42	0:0	6	;
water	59:4	0:0	4	}
water	61:4	0:0	2	LUT_exponent
op	61:17	0:0	2	=
water	61:19	0:0	2	1
op	61:20	0:0	2	.
water	61:21	0:0	2	8
op	61:23	0:0	2	/
water	61:25	0:0	2	2
op	61:26	0:0	2	.
water	61:27	0:0	2	61
water	61:29	0:0	2	;
water	67:4	0:0	2	LUT_exponent
op	67:17	0:0	2	=
water	67:19	0:0	2	1
op	67:20	0:0	2	.
water	67:21	0:0	2	0
water	67:22	0:0	2	;
water	70:4	0:0	2	default_display_exponent
op	70:29	0:0	2	=
water	70:31	0:0	2	LUT_exponent
op	70:44	0:0	2	*
water	70:46	0:0	2	CRT_exponent
water	70:58	0:0	2	;
if	75:4	79:4	2	(( p =getenv ("SCREEN_GAMMA" ) ) != NULL)
cond	75:8	75:40	3	( p =getenv ("SCREEN_GAMMA" ) ) != NULL
water	75:8	0:0	4	(
water	75:9	0:0	4	p
op	75:11	0:0	4	=
call	75:13	75:34	4	getenv
arg	75:20	75:34	5	"SCREEN_GAMMA"
water	75:20	0:0	6	"SCREEN_GAMMA"
water	75:35	0:0	4	)
op	75:37	0:0	4	!=
water	75:40	0:0	4	NULL
stmts	75:46	79:4	3	
water	75:46	0:0	4	{
decl	76:8	76:33	4	double	exponent
op	76:24	0:0	4	=
call	76:26	76:32	5	atof
arg	76:31	76:32	6	p
water	76:31	0:0	7	p
if	77:8	78:42	4	(exponent > 0 . 0)
cond	77:12	77:25	5	exponent > 0 . 0
water	77:12	0:0	6	exponent
op	77:21	0:0	6	>
water	77:23	0:0	6	0
op	77:24	0:0	6	.
water	77:25	0:0	6	0
stmts	78:12	78:42	5	
water	78:12	0:0	6	default_gamma
op	78:26	0:0	6	=
water	78:28	0:0	6	1
op	78:29	0:0	6	.
water	78:30	0:0	6	0
op	78:32	0:0	6	/
water	78:34	0:0	6	exponent
water	78:42	0:0	6	;
water	79:4	0:0	4	}
if	80:4	81:54	2	(default_gamma == 0 . 0)
cond	80:8	80:27	3	default_gamma == 0 . 0
water	80:8	0:0	4	default_gamma
op	80:22	0:0	4	==
water	80:25	0:0	4	0
op	80:26	0:0	4	.
water	80:27	0:0	4	0
stmts	81:8	81:54	3	
water	81:8	0:0	4	default_gamma
op	81:22	0:0	4	=
water	81:24	0:0	4	1
op	81:25	0:0	4	.
water	81:26	0:0	4	0
op	81:28	0:0	4	/
water	81:30	0:0	4	default_display_exponent
water	81:54	0:0	4	;
while	83:4	126:4	2	(* ++ argv && ! error)
cond	83:11	83:23	3	* ++ argv && ! error
op	83:11	0:0	4	*
op	83:12	0:0	4	++
water	83:14	0:0	4	argv
op	83:19	0:0	4	&&
op	83:22	0:0	4	!
water	83:23	0:0	4	error
stmts	83:30	126:4	3	
water	83:30	0:0	4	{
if	84:8	86:8	4	(!strncmp (* argv ,"-i" ,2 ))
cond	84:12	84:35	5	!strncmp (* argv ,"-i" ,2 )
op	84:12	0:0	6	!
call	84:13	84:35	6	strncmp
arg	84:21	84:26	7	*argv
op	84:21	0:0	8	*
water	84:22	0:0	8	argv
arg	84:28	84:32	7	"-i"
water	84:28	0:0	8	"-i"
arg	84:34	84:35	7	2
water	84:34	0:0	8	2
stmts	84:38	86:8	5	
water	84:38	0:0	6	{
water	85:12	0:0	6	wpng_info
op	85:21	0:0	6	.
water	85:22	0:0	6	interlaced
op	85:33	0:0	6	=
water	85:35	0:0	6	TRUE
water	85:39	0:0	6	;
water	86:8	0:0	6	}
else	86:10	89:8	4
stmts	86:15	89:8	5	
if	86:15	89:8	6	(!strncmp (* argv ,"-time" ,3 ))
cond	86:19	86:45	7	!strncmp (* argv ,"-time" ,3 )
op	86:19	0:0	8	!
call	86:20	86:45	8	strncmp
arg	86:28	86:33	9	*argv
op	86:28	0:0	10	*
water	86:29	0:0	10	argv
arg	86:35	86:42	9	"-time"
water	86:35	0:0	10	"-time"
arg	86:44	86:45	9	3
water	86:44	0:0	10	3
stmts	86:48	89:8	7	
water	86:48	0:0	8	{
water	87:12	0:0	8	wpng_info
op	87:21	0:0	8	.
water	87:22	0:0	8	modtime
op	87:30	0:0	8	=
call	87:32	87:41	8	time
arg	87:37	87:41	9	NULL
water	87:37	0:0	10	NULL
water	87:42	0:0	8	;
water	88:12	0:0	8	wpng_info
op	88:21	0:0	8	.
water	88:22	0:0	8	have_time
op	88:32	0:0	8	=
water	88:34	0:0	8	TRUE
water	88:38	0:0	8	;
water	89:8	0:0	8	}
else	89:10	91:8	4
stmts	89:15	91:8	5	
if	89:15	91:8	6	(!strncmp (* argv ,"-text" ,3 ))
cond	89:19	89:45	7	!strncmp (* argv ,"-text" ,3 )
op	89:19	0:0	8	!
call	89:20	89:45	8	strncmp
arg	89:28	89:33	9	*argv
op	89:28	0:0	10	*
water	89:29	0:0	10	argv
arg	89:35	89:42	9	"-text"
water	89:35	0:0	10	"-text"
arg	89:44	89:45	9	3
water	89:44	0:0	10	3
stmts	89:48	91:8	7	
water	89:48	0:0	8	{
water	90:12	0:0	8	text
op	90:17	0:0	8	=
water	90:19	0:0	8	TRUE
water	90:23	0:0	8	;
water	91:8	0:0	8	}
else	91:10	102:8	4
stmts	91:15	102:8	5	
if	91:15	102:8	6	(!strncmp (* argv ,"-gamma" ,2 ))
cond	91:19	91:46	7	!strncmp (* argv ,"-gamma" ,2 )
op	91:19	0:0	8	!
call	91:20	91:46	8	strncmp
arg	91:28	91:33	9	*argv
op	91:28	0:0	10	*
water	91:29	0:0	10	argv
arg	91:35	91:43	9	"-gamma"
water	91:35	0:0	10	"-gamma"
arg	91:45	91:46	9	2
water	91:45	0:0	10	2
stmts	91:49	102:8	7	
water	91:49	0:0	8	{
if	92:12	93:23	8	(! * ++ argv)
cond	92:16	92:20	9	! * ++ argv
op	92:16	0:0	10	!
op	92:17	0:0	10	*
op	92:18	0:0	10	++
water	92:20	0:0	10	argv
stmts	93:16	93:23	9	
op	93:16	0:0	10	++
water	93:18	0:0	10	error
water	93:23	0:0	10	;
else	94:12	101:12	8
stmts	94:17	101:12	9	
water	94:17	0:0	10	{
water	95:16	0:0	10	wpng_info
op	95:25	0:0	10	.
water	95:26	0:0	10	gamma
op	95:32	0:0	10	=
call	95:34	95:44	10	atof
arg	95:39	95:44	11	*argv
op	95:39	0:0	12	*
water	95:40	0:0	12	argv
water	95:45	0:0	10	;
if	96:16	97:27	10	(wpng_info . gamma <= 0 . 0)
cond	96:20	96:41	11	wpng_info . gamma <= 0 . 0
water	96:20	0:0	12	wpng_info
op	96:29	0:0	12	.
water	96:30	0:0	12	gamma
op	96:36	0:0	12	<=
water	96:39	0:0	12	0
op	96:40	0:0	12	.
water	96:41	0:0	12	0
stmts	97:20	97:27	11	
op	97:20	0:0	12	++
water	97:22	0:0	12	error
water	97:27	0:0	12	;
else	98:16	100:75	10
stmts	98:21	100:75	11	
if	98:21	100:75	12	(wpng_info . gamma > 1 . 01)
cond	98:25	98:45	13	wpng_info . gamma > 1 . 01
water	98:25	0:0	14	wpng_info
op	98:34	0:0	14	.
water	98:35	0:0	14	gamma
op	98:41	0:0	14	>
water	98:43	0:0	14	1
op	98:44	0:0	14	.
water	98:45	0:0	14	01
stmts	99:20	100:75	13	
call	99:20	100:74	14	fprintf
arg	99:28	99:34	15	stderr
water	99:28	0:0	16	stderr
arg	99:36	100:74	15	PROGNAME" warning:  file gammas are usually less than 1.0\n"
water	99:36	0:0	16	PROGNAME
water	100:22	0:0	16	" warning:  file gammas are usually less than 1.0\n"
water	100:75	0:0	14	;
water	101:12	0:0	10	}
water	102:8	0:0	8	}
else	102:10	118:8	4
stmts	102:15	118:8	5	
if	102:15	118:8	6	(!strncmp (* argv ,"-bgcolor" ,4 ))
cond	102:19	102:48	7	!strncmp (* argv ,"-bgcolor" ,4 )
op	102:19	0:0	8	!
call	102:20	102:48	8	strncmp
arg	102:28	102:33	9	*argv
op	102:28	0:0	10	*
water	102:29	0:0	10	argv
arg	102:35	102:45	9	"-bgcolor"
water	102:35	0:0	10	"-bgcolor"
arg	102:47	102:48	9	4
water	102:47	0:0	10	4
stmts	102:51	118:8	7	
water	102:51	0:0	8	{
if	103:12	104:23	8	(! * ++ argv)
cond	103:16	103:20	9	! * ++ argv
op	103:16	0:0	10	!
op	103:17	0:0	10	*
op	103:18	0:0	10	++
water	103:20	0:0	10	argv
stmts	104:16	104:23	9	
op	104:16	0:0	10	++
water	104:18	0:0	10	error
water	104:23	0:0	10	;
else	105:12	117:12	8
stmts	105:17	117:12	9	
water	105:17	0:0	10	{
water	106:16	0:0	10	bgstr
op	106:22	0:0	10	=
op	106:24	0:0	10	*
water	106:25	0:0	10	argv
water	106:29	0:0	10	;
if	107:16	108:27	10	(strlen (bgstr ) != 7 || bgstr [ 0 ] != '#')
cond	107:20	107:54	11	strlen (bgstr ) != 7 || bgstr [ 0 ] != '#'
call	107:20	107:32	12	strlen
arg	107:27	107:32	13	bgstr
water	107:27	0:0	14	bgstr
op	107:34	0:0	12	!=
water	107:37	0:0	12	7
op	107:39	0:0	12	||
water	107:42	0:0	12	bgstr
op	107:47	0:0	12	[
water	107:48	0:0	12	0
op	107:49	0:0	12	]
op	107:51	0:0	12	!=
water	107:54	0:0	12	'#'
stmts	108:20	108:27	11	
op	108:20	0:0	12	++
water	108:22	0:0	12	error
water	108:27	0:0	12	;
else	109:16	116:16	10
stmts	109:21	116:16	11	
water	109:21	0:0	12	{
water	110:20	0:0	12	unsigned
water	110:29	0:0	12	r
water	110:30	0:0	12	,
water	110:32	0:0	12	g
water	110:33	0:0	12	,
water	110:35	0:0	12	b
water	110:36	0:0	12	;
call	111:20	111:59	12	sscanf
arg	111:27	111:34	13	bgstr+1
water	111:27	0:0	14	bgstr
op	111:32	0:0	14	+
water	111:33	0:0	14	1
arg	111:36	111:47	13	"%2x%2x%2x"
water	111:36	0:0	14	"%2x%2x%2x"
arg	111:49	111:51	13	&r
op	111:49	0:0	14	&
water	111:50	0:0	14	r
arg	111:53	111:55	13	&g
op	111:53	0:0	14	&
water	111:54	0:0	14	g
arg	111:57	111:59	13	&b
op	111:57	0:0	14	&
water	111:58	0:0	14	b
water	111:60	0:0	12	;
water	112:20	0:0	12	wpng_info
op	112:29	0:0	12	.
water	112:30	0:0	12	bg_red
op	112:39	0:0	12	=
water	112:41	0:0	12	(
water	112:42	0:0	12	uch
water	112:45	0:0	12	)
water	112:46	0:0	12	r
water	112:47	0:0	12	;
water	113:20	0:0	12	wpng_info
op	113:29	0:0	12	.
water	113:30	0:0	12	bg_green
op	113:39	0:0	12	=
water	113:41	0:0	12	(
water	113:42	0:0	12	uch
water	113:45	0:0	12	)
water	113:46	0:0	12	g
water	113:47	0:0	12	;
water	114:20	0:0	12	wpng_info
op	114:29	0:0	12	.
water	114:30	0:0	12	bg_blue
op	114:39	0:0	12	=
water	114:41	0:0	12	(
water	114:42	0:0	12	uch
water	114:45	0:0	12	)
water	114:46	0:0	12	b
water	114:47	0:0	12	;
water	115:20	0:0	12	wpng_info
op	115:29	0:0	12	.
water	115:30	0:0	12	have_bg
op	115:38	0:0	12	=
water	115:40	0:0	12	TRUE
water	115:44	0:0	12	;
water	116:16	0:0	12	}
water	117:12	0:0	10	}
water	118:8	0:0	8	}
else	118:10	125:8	4
stmts	118:15	125:8	5	
water	118:15	0:0	6	{
if	119:12	123:12	6	(* * argv != '-')
cond	119:16	119:26	7	* * argv != '-'
op	119:16	0:0	8	*
op	119:17	0:0	8	*
water	119:18	0:0	8	argv
op	119:23	0:0	8	!=
water	119:26	0:0	8	'-'
stmts	119:31	123:12	7	
water	119:31	0:0	8	{
water	120:16	0:0	8	inname
op	120:23	0:0	8	=
op	120:25	0:0	8	*
water	120:26	0:0	8	argv
water	120:30	0:0	8	;
if	121:16	122:27	8	(argv [ 1 ])
cond	121:20	121:26	9	argv [ 1 ]
water	121:20	0:0	10	argv
op	121:24	0:0	10	[
water	121:25	0:0	10	1
op	121:26	0:0	10	]
stmts	122:20	122:27	9	
op	122:20	0:0	10	++
water	122:22	0:0	10	error
water	122:27	0:0	10	;
water	123:12	0:0	8	}
else	123:14	124:23	6
stmts	124:16	124:23	7	
op	124:16	0:0	8	++
water	124:18	0:0	8	error
water	124:23	0:0	8	;
water	125:8	0:0	6	}
water	126:4	0:0	4	}
if	128:4	152:4	2	(! inname)
cond	128:8	128:9	3	! inname
op	128:8	0:0	4	!
water	128:9	0:0	4	inname
stmts	128:17	152:4	3	
water	128:17	0:0	4	{
if	129:8	133:8	4	(isatty (0 ))
cond	129:12	129:20	5	isatty (0 )
call	129:12	129:20	6	isatty
arg	129:19	129:20	7	0
water	129:19	0:0	8	0
stmts	129:23	133:8	5	
water	129:23	0:0	6	{
call	130:12	131:77	6	fprintf
arg	130:20	130:26	7	stderr
water	130:20	0:0	8	stderr
arg	130:28	131:77	7	PROGNAME":  must give input filename or provide image data via stdin\n"
water	130:28	0:0	8	PROGNAME
water	131:14	0:0	8	":  must give input filename or provide image data via stdin\n"
water	131:78	0:0	6	;
op	132:12	0:0	6	++
water	132:14	0:0	6	error
water	132:19	0:0	6	;
water	133:8	0:0	6	}
else	133:10	151:8	4
stmts	133:15	151:8	5	
water	133:15	0:0	6	{
call	136:12	136:43	6	setmode
arg	136:20	136:33	7	fileno(stdin)
call	136:20	136:32	8	fileno
arg	136:27	136:32	9	stdin
water	136:27	0:0	10	stdin
arg	136:35	136:43	7	O_BINARY
water	136:35	0:0	8	O_BINARY
water	136:44	0:0	6	;
call	137:12	137:44	6	setmode
arg	137:20	137:34	7	fileno(stdout)
call	137:20	137:33	8	fileno
arg	137:27	137:33	9	stdout
water	137:27	0:0	10	stdout
arg	137:36	137:44	7	O_BINARY
water	137:36	0:0	8	O_BINARY
water	137:45	0:0	6	;
if	139:12	143:12	6	(( wpng_info . infile =fdopen (fileno (stdin ) ,"rb" ) ) == NULL)
cond	139:16	139:68	7	( wpng_info . infile =fdopen (fileno (stdin ) ,"rb" ) ) == NULL
water	139:16	0:0	8	(
water	139:17	0:0	8	wpng_info
op	139:26	0:0	8	.
water	139:27	0:0	8	infile
op	139:34	0:0	8	=
call	139:36	139:62	8	fdopen
arg	139:43	139:56	9	fileno(stdin)
call	139:43	139:55	10	fileno
arg	139:50	139:55	11	stdin
water	139:50	0:0	12	stdin
arg	139:58	139:62	9	"rb"
water	139:58	0:0	10	"rb"
water	139:63	0:0	8	)
op	139:65	0:0	8	==
water	139:68	0:0	8	NULL
stmts	139:74	143:12	7	
water	139:74	0:0	8	{
call	140:16	141:62	8	fprintf
arg	140:24	140:30	9	stderr
water	140:24	0:0	10	stderr
arg	140:32	141:62	9	PROGNAME":  unable to reopen stdin in binary mode\n"
water	140:32	0:0	10	PROGNAME
water	141:18	0:0	10	":  unable to reopen stdin in binary mode\n"
water	141:63	0:0	8	;
op	142:16	0:0	8	++
water	142:18	0:0	8	error
water	142:23	0:0	8	;
water	143:12	0:0	8	}
else	143:14	149:12	6
stmts	144:12	149:12	7	
if	144:12	149:12	8	(( wpng_info . outfile =fdopen (fileno (stdout ) ,"wb" ) ) == NULL)
cond	144:16	144:70	9	( wpng_info . outfile =fdopen (fileno (stdout ) ,"wb" ) ) == NULL
water	144:16	0:0	10	(
water	144:17	0:0	10	wpng_info
op	144:26	0:0	10	.
water	144:27	0:0	10	outfile
op	144:35	0:0	10	=
call	144:37	144:64	10	fdopen
arg	144:44	144:58	11	fileno(stdout)
call	144:44	144:57	12	fileno
arg	144:51	144:57	13	stdout
water	144:51	0:0	14	stdout
arg	144:60	144:64	11	"wb"
water	144:60	0:0	12	"wb"
water	144:65	0:0	10	)
op	144:67	0:0	10	==
water	144:70	0:0	10	NULL
stmts	144:76	149:12	9	
water	144:76	0:0	10	{
call	145:16	146:63	10	fprintf
arg	145:24	145:30	11	stderr
water	145:24	0:0	12	stderr
arg	145:32	146:63	11	PROGNAME":  unable to reopen stdout in binary mode\n"
water	145:32	0:0	12	PROGNAME
water	146:18	0:0	12	":  unable to reopen stdout in binary mode\n"
water	146:64	0:0	10	;
call	147:16	147:39	10	fclose
arg	147:23	147:39	11	wpng_info.infile
water	147:23	0:0	12	wpng_info
op	147:32	0:0	12	.
water	147:33	0:0	12	infile
water	147:40	0:0	10	;
op	148:16	0:0	10	++
water	148:18	0:0	10	error
water	148:23	0:0	10	;
water	149:12	0:0	10	}
else	149:14	150:39	6
stmts	150:16	150:39	7	
water	150:16	0:0	8	wpng_info
op	150:25	0:0	8	.
water	150:26	0:0	8	filter
op	150:33	0:0	8	=
water	150:35	0:0	8	TRUE
water	150:39	0:0	8	;
water	151:8	0:0	6	}
water	152:4	0:0	4	}
else	152:6	156:4	2
stmts	152:11	156:4	3	
if	152:11	156:4	4	(( len =strlen (inname ) ) > 250)
cond	152:15	152:40	5	( len =strlen (inname ) ) > 250
water	152:15	0:0	6	(
water	152:16	0:0	6	len
op	152:20	0:0	6	=
call	152:22	152:35	6	strlen
arg	152:29	152:35	7	inname
water	152:29	0:0	8	inname
water	152:36	0:0	6	)
op	152:38	0:0	6	>
water	152:40	0:0	6	250
stmts	152:45	156:4	5	
water	152:45	0:0	6	{
call	153:8	154:13	6	fprintf
arg	153:16	153:22	7	stderr
water	153:16	0:0	8	stderr
arg	153:24	153:77	7	PROGNAME":  input filename is too long [%d chars]\n"
water	153:24	0:0	8	PROGNAME
water	153:33	0:0	8	":  input filename is too long [%d chars]\n"
arg	154:10	154:13	7	len
water	154:10	0:0	8	len
water	154:14	0:0	6	;
op	155:8	0:0	6	++
water	155:10	0:0	6	error
water	155:15	0:0	6	;
water	156:4	0:0	6	}
else	156:6	159:4	2
stmts	156:11	159:4	3	
if	156:11	159:4	4	(! ( wpng_info . infile =fopen (inname ,"rb" ) ))
cond	156:15	156:55	5	! ( wpng_info . infile =fopen (inname ,"rb" ) )
op	156:15	0:0	6	!
water	156:16	0:0	6	(
water	156:17	0:0	6	wpng_info
op	156:26	0:0	6	.
water	156:27	0:0	6	infile
op	156:34	0:0	6	=
call	156:36	156:54	6	fopen
arg	156:42	156:48	7	inname
water	156:42	0:0	8	inname
arg	156:50	156:54	7	"rb"
water	156:50	0:0	8	"rb"
water	156:55	0:0	6	)
stmts	156:58	159:4	5	
water	156:58	0:0	6	{
call	157:8	157:74	6	fprintf
arg	157:16	157:22	7	stderr
water	157:16	0:0	8	stderr
arg	157:24	157:66	7	PROGNAME":  can't open input file [%s]\n"
water	157:24	0:0	8	PROGNAME
water	157:33	0:0	8	":  can't open input file [%s]\n"
arg	157:68	157:74	7	inname
water	157:68	0:0	8	inname
water	157:75	0:0	6	;
op	158:8	0:0	6	++
water	158:10	0:0	6	error
water	158:15	0:0	6	;
water	159:4	0:0	6	}
if	160:4	222:4	2	(! error)
cond	160:8	160:9	3	! error
op	160:8	0:0	4	!
water	160:9	0:0	4	error
stmts	160:16	222:4	3	
water	160:16	0:0	4	{
call	161:8	161:44	4	fgets
arg	161:14	161:21	5	pnmline
water	161:14	0:0	6	pnmline
arg	161:23	161:26	5	256
water	161:23	0:0	6	256
arg	161:28	161:44	5	wpng_info.infile
water	161:28	0:0	6	wpng_info
op	161:37	0:0	6	.
water	161:38	0:0	6	infile
water	161:45	0:0	4	;
if	162:8	169:8	4	(pnmline [ 0 ] != 'P' || ( ( pnmchar = pnmline [ 1 ] ) != '5' && pnmchar != '6' && pnmchar != '8' ))
cond	162:12	163:44	5	pnmline [ 0 ] != 'P' || ( ( pnmchar = pnmline [ 1 ] ) != '5' && pnmchar != '6' && pnmchar != '8' )
water	162:12	0:0	6	pnmline
op	162:19	0:0	6	[
water	162:20	0:0	6	0
op	162:21	0:0	6	]
op	162:23	0:0	6	!=
water	162:26	0:0	6	'P'
op	162:30	0:0	6	||
water	162:33	0:0	6	(
water	162:34	0:0	6	(
water	162:35	0:0	6	pnmchar
op	162:43	0:0	6	=
water	162:45	0:0	6	pnmline
op	162:52	0:0	6	[
water	162:53	0:0	6	1
op	162:54	0:0	6	]
water	162:55	0:0	6	)
op	162:57	0:0	6	!=
water	162:60	0:0	6	'5'
op	162:64	0:0	6	&&
water	163:12	0:0	6	pnmchar
op	163:20	0:0	6	!=
water	163:23	0:0	6	'6'
op	163:27	0:0	6	&&
water	163:30	0:0	6	pnmchar
op	163:38	0:0	6	!=
water	163:41	0:0	6	'8'
water	163:44	0:0	6	)
stmts	164:8	169:8	5	
water	164:8	0:0	6	{
call	165:12	167:20	6	fprintf
arg	165:20	165:26	7	stderr
water	165:20	0:0	8	stderr
arg	165:28	166:73	7	PROGNAME":  input file [%s] is not a binary PGM, PPM or PAM file\n"
water	165:28	0:0	8	PROGNAME
water	166:14	0:0	8	":  input file [%s] is not a binary PGM, PPM or PAM file\n"
arg	167:14	167:20	7	inname
water	167:14	0:0	8	inname
water	167:21	0:0	6	;
op	168:12	0:0	6	++
water	168:14	0:0	6	error
water	168:19	0:0	6	;
water	169:8	0:0	6	}
else	169:10	213:8	4
stmts	169:15	213:8	5	
water	169:15	0:0	6	{
water	170:12	0:0	6	wpng_info
op	170:21	0:0	6	.
water	170:22	0:0	6	pnmtype
op	170:30	0:0	6	=
call	170:32	170:51	6	(int)
arg	170:38	170:51	7	pnmchar-'0'
water	170:38	0:0	8	pnmchar
op	170:46	0:0	8	-
water	170:48	0:0	8	'0'
water	170:52	0:0	6	;
if	171:12	172:41	6	(wpng_info . pnmtype != 8)
cond	171:16	171:37	7	wpng_info . pnmtype != 8
water	171:16	0:0	8	wpng_info
op	171:25	0:0	8	.
water	171:26	0:0	8	pnmtype
op	171:34	0:0	8	!=
water	171:37	0:0	8	8
stmts	172:16	172:41	7	
water	172:16	0:0	8	wpng_info
op	172:25	0:0	8	.
water	172:26	0:0	8	have_bg
op	172:34	0:0	8	=
water	172:36	0:0	8	FALSE
water	172:41	0:0	8	;
do	173:12	175:12	6	(pnmline [ 0 ] == '#')
cond	175:21	175:35	7	pnmline [ 0 ] == '#'
water	175:21	0:0	8	pnmline
op	175:28	0:0	8	[
water	175:29	0:0	8	0
op	175:30	0:0	8	]
op	175:32	0:0	8	==
water	175:35	0:0	8	'#'
stmts	173:15	175:12	7	
water	173:15	0:0	8	{
call	174:16	174:52	8	fgets
arg	174:22	174:29	9	pnmline
water	174:22	0:0	10	pnmline
arg	174:31	174:34	9	256
water	174:31	0:0	10	256
arg	174:36	174:52	9	wpng_info.infile
water	174:36	0:0	10	wpng_info
op	174:45	0:0	10	.
water	174:46	0:0	10	infile
water	174:53	0:0	8	;
water	175:12	0:0	8	}
water	175:39	0:0	6	;
call	176:12	176:74	6	sscanf
arg	176:19	176:26	7	pnmline
water	176:19	0:0	8	pnmline
arg	176:28	176:37	7	"%ld %ld"
water	176:28	0:0	8	"%ld %ld"
arg	176:39	176:55	7	&wpng_info.width
op	176:39	0:0	8	&
water	176:40	0:0	8	wpng_info
op	176:49	0:0	8	.
water	176:50	0:0	8	width
arg	176:57	176:74	7	&wpng_info.height
op	176:57	0:0	8	&
water	176:58	0:0	8	wpng_info
op	176:67	0:0	8	.
water	176:68	0:0	8	height
water	176:75	0:0	6	;
do	177:12	179:12	6	(pnmline [ 0 ] == '#')
cond	179:21	179:35	7	pnmline [ 0 ] == '#'
water	179:21	0:0	8	pnmline
op	179:28	0:0	8	[
water	179:29	0:0	8	0
op	179:30	0:0	8	]
op	179:32	0:0	8	==
water	179:35	0:0	8	'#'
stmts	177:15	179:12	7	
water	177:15	0:0	8	{
call	178:16	178:52	8	fgets
arg	178:22	178:29	9	pnmline
water	178:22	0:0	10	pnmline
arg	178:31	178:34	9	256
water	178:31	0:0	10	256
arg	178:36	178:52	9	wpng_info.infile
water	178:36	0:0	10	wpng_info
op	178:45	0:0	10	.
water	178:46	0:0	10	infile
water	178:53	0:0	8	;
water	179:12	0:0	8	}
water	179:39	0:0	6	;
call	180:12	180:41	6	sscanf
arg	180:19	180:26	7	pnmline
water	180:19	0:0	8	pnmline
arg	180:28	180:32	7	"%d"
water	180:28	0:0	8	"%d"
arg	180:34	180:41	7	&maxval
op	180:34	0:0	8	&
water	180:35	0:0	8	maxval
water	180:42	0:0	6	;
if	181:12	187:12	6	(wpng_info . width <= 0 L || wpng_info . height <= 0 L || maxval != 255)
cond	181:16	182:26	7	wpng_info . width <= 0 L || wpng_info . height <= 0 L || maxval != 255
water	181:16	0:0	8	wpng_info
op	181:25	0:0	8	.
water	181:26	0:0	8	width
op	181:32	0:0	8	<=
water	181:35	0:0	8	0
water	181:36	0:0	8	L
op	181:38	0:0	8	||
water	181:41	0:0	8	wpng_info
op	181:50	0:0	8	.
water	181:51	0:0	8	height
op	181:58	0:0	8	<=
water	181:61	0:0	8	0
water	181:62	0:0	8	L
op	181:64	0:0	8	||
water	182:16	0:0	8	maxval
op	182:23	0:0	8	!=
water	182:26	0:0	8	255
stmts	183:12	187:12	7	
water	183:12	0:0	8	{
call	184:16	185:75	8	fprintf
arg	184:24	184:30	9	stderr
water	184:24	0:0	10	stderr
arg	184:32	185:75	9	PROGNAME":  only positive width/height, maxval == 255 allowed \n"
water	184:32	0:0	10	PROGNAME
water	185:18	0:0	10	":  only positive width/height, maxval == 255 allowed \n"
water	185:76	0:0	8	;
op	186:16	0:0	8	++
water	186:18	0:0	8	error
water	186:23	0:0	8	;
water	187:12	0:0	8	}
water	188:12	0:0	6	wpng_info
op	188:21	0:0	6	.
water	188:22	0:0	6	sample_depth
op	188:35	0:0	6	=
water	188:37	0:0	6	8
water	188:38	0:0	6	;
if	189:12	212:12	6	(! wpng_info . filter)
cond	189:16	189:27	7	! wpng_info . filter
op	189:16	0:0	8	!
water	189:17	0:0	8	wpng_info
op	189:26	0:0	8	.
water	189:27	0:0	8	filter
stmts	189:35	212:12	7	
water	189:35	0:0	8	{
if	191:16	196:16	8	(( p =strrchr (inname ,'.' ) ) == NULL || ( p - inname ) != ( len - 4 ))
cond	191:20	192:44	9	( p =strrchr (inname ,'.' ) ) == NULL || ( p - inname ) != ( len - 4 )
water	191:20	0:0	10	(
water	191:21	0:0	10	p
op	191:23	0:0	10	=
call	191:25	191:44	10	strrchr
arg	191:33	191:39	11	inname
water	191:33	0:0	12	inname
arg	191:41	191:44	11	'.'
water	191:41	0:0	12	'.'
water	191:45	0:0	10	)
op	191:47	0:0	10	==
water	191:50	0:0	10	NULL
op	191:55	0:0	10	||
water	192:20	0:0	10	(
water	192:21	0:0	10	p
op	192:23	0:0	10	-
water	192:25	0:0	10	inname
water	192:31	0:0	10	)
op	192:33	0:0	10	!=
water	192:36	0:0	10	(
water	192:37	0:0	10	len
op	192:41	0:0	10	-
water	192:43	0:0	10	4
water	192:44	0:0	10	)
stmts	193:16	196:16	9	
water	193:16	0:0	10	{
call	194:20	194:42	10	strcpy
arg	194:27	194:34	11	outname
water	194:27	0:0	12	outname
arg	194:36	194:42	11	inname
water	194:36	0:0	12	inname
water	194:43	0:0	10	;
call	195:20	195:46	10	strcpy
arg	195:27	195:38	11	outname+len
water	195:27	0:0	12	outname
op	195:34	0:0	12	+
water	195:35	0:0	12	len
arg	195:40	195:46	11	".png"
water	195:40	0:0	12	".png"
water	195:47	0:0	10	;
water	196:16	0:0	10	}
else	196:18	200:16	8
stmts	196:23	200:16	9	
water	196:23	0:0	10	{
water	197:20	0:0	10	len
op	197:24	0:0	10	-=
water	197:27	0:0	10	4
water	197:28	0:0	10	;
call	198:20	198:48	10	strncpy
arg	198:28	198:35	11	outname
water	198:28	0:0	12	outname
arg	198:37	198:43	11	inname
water	198:37	0:0	12	inname
arg	198:45	198:48	11	len
water	198:45	0:0	12	len
water	198:49	0:0	10	;
call	199:20	199:46	10	strcpy
arg	199:27	199:38	11	outname+len
water	199:27	0:0	12	outname
op	199:34	0:0	12	+
water	199:35	0:0	12	len
arg	199:40	199:46	11	".png"
water	199:40	0:0	12	".png"
water	199:47	0:0	10	;
water	200:16	0:0	10	}
if	202:16	207:16	8	(( wpng_info . outfile =fopen (outname ,"rb" ) ) != NULL)
cond	202:20	202:66	9	( wpng_info . outfile =fopen (outname ,"rb" ) ) != NULL
water	202:20	0:0	10	(
water	202:21	0:0	10	wpng_info
op	202:30	0:0	10	.
water	202:31	0:0	10	outfile
op	202:39	0:0	10	=
call	202:41	202:60	10	fopen
arg	202:47	202:54	11	outname
water	202:47	0:0	12	outname
arg	202:56	202:60	11	"rb"
water	202:56	0:0	12	"rb"
water	202:61	0:0	10	)
op	202:63	0:0	10	!=
water	202:66	0:0	10	NULL
stmts	202:72	207:16	9	
water	202:72	0:0	10	{
call	203:20	204:29	10	fprintf
arg	203:28	203:34	11	stderr
water	203:28	0:0	12	stderr
arg	203:36	203:75	11	PROGNAME":  output file exists [%s]\n"
water	203:36	0:0	12	PROGNAME
water	203:45	0:0	12	":  output file exists [%s]\n"
arg	204:22	204:29	11	outname
water	204:22	0:0	12	outname
water	204:30	0:0	10	;
call	205:20	205:44	10	fclose
arg	205:27	205:44	11	wpng_info.outfile
water	205:27	0:0	12	wpng_info
op	205:36	0:0	12	.
water	205:37	0:0	12	outfile
water	205:45	0:0	10	;
op	206:20	0:0	10	++
water	206:22	0:0	10	error
water	206:27	0:0	10	;
water	207:16	0:0	10	}
else	207:18	211:16	8
stmts	207:23	211:16	9	
if	207:23	211:16	10	(! ( wpng_info . outfile =fopen (outname ,"wb" ) ))
cond	207:27	207:69	11	! ( wpng_info . outfile =fopen (outname ,"wb" ) )
op	207:27	0:0	12	!
water	207:28	0:0	12	(
water	207:29	0:0	12	wpng_info
op	207:38	0:0	12	.
water	207:39	0:0	12	outfile
op	207:47	0:0	12	=
call	207:49	207:68	12	fopen
arg	207:55	207:62	13	outname
water	207:55	0:0	14	outname
arg	207:64	207:68	13	"wb"
water	207:64	0:0	14	"wb"
water	207:69	0:0	12	)
stmts	207:72	211:16	11	
water	207:72	0:0	12	{
call	208:20	209:29	12	fprintf
arg	208:28	208:34	13	stderr
water	208:28	0:0	14	stderr
arg	208:36	208:79	13	PROGNAME":  can't open output file [%s]\n"
water	208:36	0:0	14	PROGNAME
water	208:45	0:0	14	":  can't open output file [%s]\n"
arg	209:22	209:29	13	outname
water	209:22	0:0	14	outname
water	209:30	0:0	12	;
op	210:20	0:0	12	++
water	210:22	0:0	12	error
water	210:27	0:0	12	;
water	211:16	0:0	12	}
water	212:12	0:0	8	}
water	213:8	0:0	6	}
if	214:8	221:8	4	(error)
cond	214:12	214:12	5	error
water	214:12	0:0	6	error
stmts	214:19	221:8	5	
water	214:19	0:0	6	{
call	215:12	215:35	6	fclose
arg	215:19	215:35	7	wpng_info.infile
water	215:19	0:0	8	wpng_info
op	215:28	0:0	8	.
water	215:29	0:0	8	infile
water	215:36	0:0	6	;
water	216:12	0:0	6	wpng_info
op	216:21	0:0	6	.
water	216:22	0:0	6	infile
op	216:29	0:0	6	=
water	216:31	0:0	6	NULL
water	216:35	0:0	6	;
if	217:12	220:12	6	(wpng_info . filter)
cond	217:16	217:26	7	wpng_info . filter
water	217:16	0:0	8	wpng_info
op	217:25	0:0	8	.
water	217:26	0:0	8	filter
stmts	217:34	220:12	7	
water	217:34	0:0	8	{
call	218:16	218:40	8	fclose
arg	218:23	218:40	9	wpng_info.outfile
water	218:23	0:0	10	wpng_info
op	218:32	0:0	10	.
water	218:33	0:0	10	outfile
water	218:41	0:0	8	;
water	219:16	0:0	8	wpng_info
op	219:25	0:0	8	.
water	219:26	0:0	8	outfile
op	219:34	0:0	8	=
water	219:36	0:0	8	NULL
water	219:40	0:0	8	;
water	220:12	0:0	8	}
water	221:8	0:0	6	}
water	222:4	0:0	4	}
if	224:4	253:4	2	(error)
cond	224:8	224:8	3	error
water	224:8	0:0	4	error
stmts	224:15	253:4	3	
water	224:15	0:0	4	{
call	225:8	225:68	4	fprintf
arg	225:16	225:22	5	stderr
water	225:16	0:0	6	stderr
arg	225:24	225:40	5	"\n%s %s:  %s\n"
water	225:24	0:0	6	"\n%s %s:  %s\n"
arg	225:42	225:50	5	PROGNAME
water	225:42	0:0	6	PROGNAME
arg	225:52	225:59	5	VERSION
water	225:52	0:0	6	VERSION
arg	225:61	225:68	5	APPNAME
water	225:61	0:0	6	APPNAME
water	225:69	0:0	4	;
call	226:8	226:30	4	writepng_version_info
water	226:31	0:0	4	;
call	227:8	251:48	4	fprintf
arg	227:16	227:22	5	stderr
water	227:16	0:0	6	stderr
arg	227:24	251:13	5	"\n""Usage:  %s [-gamma exp] [-bgcolor bg] [-text] [-time] [-interlace] pnmfile\n""or: ... | %s [-gamma exp] [-bgcolor bg] [-text] [-time] [-interlace] | ...\n""    exp \ttransfer-function exponent (``gamma'') of the image in\n""\t\t  floating-point format (e.g., ``%.5f''); if image looks\n""\t\t  correct on given display system, image gamma is equal to\n""\t\t  inverse of display-system exponent, i.e., 1 / (LUT * CRT)\n""\t\t  (where LUT = lookup-table exponent and CRT = CRT exponent;\n""\t\t  first varies, second is usually 2.2, all are positive)\n""    bg  \tdesired background color for alpha-channel images, in\n""\t\t  7-character hex RGB format (e.g., ``#ff7700'' for orange:\n""\t\t  same as HTML colors)\n""    -text\tprompt interactively for text info (tEXt chunks)\n""    -time\tinclude a tIME chunk (last modification time)\n""    -interlace\twrite interlaced PNG image\n""\n""pnmfile or stdin must be a binary PGM (`P5'), PPM (`P6') or (extremely\n""unofficial and unsupported!) PAM (`P8') file.  Currently it is required\n""to have maxval == 255 (i.e., no scaling).  If pnmfile is specified, it\n""is converted to the corresponding PNG file with the same base name but a\n""``.png'' extension; files read from stdin are converted and sent to stdout.\n""The conversion is progressive (low memory usage) unless interlacing is\n""requested; in that case the whole image will be buffered in memory and\n""written in one call.\n""\n"
water	227:24	0:0	6	"\n"
water	228:0	0:0	6	"Usage:  %s [-gamma exp] [-bgcolor bg] [-text] [-time] [-interlace] pnmfile\n"
water	229:0	0:0	6	"or: ... | %s [-gamma exp] [-bgcolor bg] [-text] [-time] [-interlace] | ...\n"
water	230:9	0:0	6	"    exp \ttransfer-function exponent (``gamma'') of the image in\n"
water	231:9	0:0	6	"\t\t  floating-point format (e.g., ``%.5f''); if image looks\n"
water	232:9	0:0	6	"\t\t  correct on given display system, image gamma is equal to\n"
water	233:9	0:0	6	"\t\t  inverse of display-system exponent, i.e., 1 / (LUT * CRT)\n"
water	234:9	0:0	6	"\t\t  (where LUT = lookup-table exponent and CRT = CRT exponent;\n"
water	235:9	0:0	6	"\t\t  first varies, second is usually 2.2, all are positive)\n"
water	236:9	0:0	6	"    bg  \tdesired background color for alpha-channel images, in\n"
water	237:9	0:0	6	"\t\t  7-character hex RGB format (e.g., ``#ff7700'' for orange:\n"
water	238:9	0:0	6	"\t\t  same as HTML colors)\n"
water	239:9	0:0	6	"    -text\tprompt interactively for text info (tEXt chunks)\n"
water	240:9	0:0	6	"    -time\tinclude a tIME chunk (last modification time)\n"
water	241:9	0:0	6	"    -interlace\twrite interlaced PNG image\n"
water	242:9	0:0	6	"\n"
water	243:0	0:0	6	"pnmfile or stdin must be a binary PGM (`P5'), PPM (`P6') or (extremely\n"
water	244:0	0:0	6	"unofficial and unsupported!) PAM (`P8') file.  Currently it is required\n"
water	245:0	0:0	6	"to have maxval == 255 (i.e., no scaling).  If pnmfile is specified, it\n"
water	246:0	0:0	6	"is converted to the corresponding PNG file with the same base name but a\n"
water	247:0	0:0	6	"``.png'' extension; files read from stdin are converted and sent to stdout.\n"
water	248:0	0:0	6	"The conversion is progressive (low memory usage) unless interlacing is\n"
water	249:0	0:0	6	"requested; in that case the whole image will be buffered in memory and\n"
water	250:0	0:0	6	"written in one call.\n"
water	251:9	0:0	6	"\n"
arg	251:15	251:23	5	PROGNAME
water	251:15	0:0	6	PROGNAME
arg	251:25	251:33	5	PROGNAME
water	251:25	0:0	6	PROGNAME
arg	251:35	251:48	5	default_gamma
water	251:35	0:0	6	default_gamma
water	251:49	0:0	4	;
call	252:8	252:14	4	exit
arg	252:13	252:14	5	1
water	252:13	0:0	6	1
water	252:15	0:0	4	;
water	253:4	0:0	4	}
if	257:4	455:4	2	(text && ( keybd =fdopen (fileno (stderr ) ,"r" ) ) != NULL && ( textbuf = ( char * )malloc (( 5 + 9 ) * 75 ) ) != NULL)
cond	257:8	261:50	3	text && ( keybd =fdopen (fileno (stderr ) ,"r" ) ) != NULL && ( textbuf = ( char * )malloc (( 5 + 9 ) * 75 ) ) != NULL
water	257:8	0:0	4	text
op	257:13	0:0	4	&&
water	259:8	0:0	4	(
water	259:9	0:0	4	keybd
op	259:15	0:0	4	=
call	259:17	259:43	4	fdopen
arg	259:24	259:38	5	fileno(stderr)
call	259:24	259:37	6	fileno
arg	259:31	259:37	7	stderr
water	259:31	0:0	8	stderr
arg	259:40	259:43	5	"r"
water	259:40	0:0	6	"r"
water	259:44	0:0	4	)
op	259:46	0:0	4	!=
water	259:49	0:0	4	NULL
op	259:54	0:0	4	&&
water	261:8	0:0	4	(
water	261:9	0:0	4	textbuf
op	261:17	0:0	4	=
water	261:19	0:0	4	(
water	261:20	0:0	4	char
op	261:25	0:0	4	*
water	261:26	0:0	4	)
call	261:27	261:44	4	malloc
arg	261:34	261:44	5	(5+9)*75
water	261:34	0:0	6	(
water	261:35	0:0	6	5
op	261:37	0:0	6	+
water	261:39	0:0	6	9
water	261:40	0:0	6	)
op	261:41	0:0	6	*
water	261:42	0:0	6	75
water	261:45	0:0	4	)
op	261:47	0:0	4	!=
water	261:50	0:0	4	NULL
stmts	262:4	455:4	3	
water	262:4	0:0	4	{
decl	263:8	263:28	4	int	i
water	263:13	0:0	4	,
decl	263:8	263:28	4	int	valid
water	263:20	0:0	4	,
decl	263:8	263:28	4	int	result
call	264:8	265:68	4	fprintf
arg	264:16	264:22	5	stderr
water	264:16	0:0	6	stderr
arg	265:10	265:68	5	"Enter text info (no more than 72 characters per line);\n"
water	265:10	0:0	6	"Enter text info (no more than 72 characters per line);\n"
water	265:69	0:0	4	;
call	266:8	266:65	4	fprintf
arg	266:16	266:22	5	stderr
water	266:16	0:0	6	stderr
arg	266:24	266:65	5	"to skip a field, hit the <Enter> key.\n"
water	266:24	0:0	6	"to skip a field, hit the <Enter> key.\n"
water	266:66	0:0	4	;
do	268:8	296:8	4	(! valid)
cond	296:17	296:18	5	! valid
op	296:17	0:0	6	!
water	296:18	0:0	6	valid
stmts	268:11	296:8	5	
water	268:11	0:0	6	{
water	269:12	0:0	6	valid
op	269:18	0:0	6	=
water	269:20	0:0	6	TRUE
water	269:24	0:0	6	;
water	270:12	0:0	6	p
op	270:14	0:0	6	=
water	270:16	0:0	6	textbuf
op	270:24	0:0	6	+
water	270:26	0:0	6	TEXT_TITLE_OFFSET
water	270:43	0:0	6	;
call	271:12	271:39	6	fprintf
arg	271:20	271:26	7	stderr
water	271:20	0:0	8	stderr
arg	271:28	271:39	7	"  Title: "
water	271:28	0:0	8	"  Title: "
water	271:40	0:0	6	;
call	272:12	272:25	6	fflush
arg	272:19	272:25	7	stderr
water	272:19	0:0	8	stderr
water	272:26	0:0	6	;
if	273:12	295:12	6	(FGETS (p ,74 ,keybd ) && ( len =strlen (p ) ) > 1)
cond	273:16	273:59	7	FGETS (p ,74 ,keybd ) && ( len =strlen (p ) ) > 1
call	273:16	273:34	8	FGETS
arg	273:22	273:23	9	p
water	273:22	0:0	10	p
arg	273:25	273:27	9	74
water	273:25	0:0	10	74
arg	273:29	273:34	9	keybd
water	273:29	0:0	10	keybd
op	273:36	0:0	8	&&
water	273:39	0:0	8	(
water	273:40	0:0	8	len
op	273:44	0:0	8	=
call	273:46	273:54	8	strlen
arg	273:53	273:54	9	p
water	273:53	0:0	10	p
water	273:55	0:0	8	)
op	273:57	0:0	8	>
water	273:59	0:0	8	1
stmts	273:62	295:12	7	
water	273:62	0:0	8	{
if	274:16	275:35	8	(p [ len - 1 ] == '\n')
cond	274:20	274:32	9	p [ len - 1 ] == '\n'
water	274:20	0:0	10	p
op	274:21	0:0	10	[
water	274:22	0:0	10	len
op	274:25	0:0	10	-
water	274:26	0:0	10	1
op	274:27	0:0	10	]
op	274:29	0:0	10	==
water	274:32	0:0	10	'\n'
stmts	275:20	275:35	9	
water	275:20	0:0	10	p
op	275:21	0:0	10	[
op	275:22	0:0	10	--
water	275:24	0:0	10	len
op	275:27	0:0	10	]
op	275:29	0:0	10	=
water	275:31	0:0	10	'\0'
water	275:35	0:0	10	;
water	276:16	0:0	8	wpng_info
op	276:25	0:0	8	.
water	276:26	0:0	8	title
op	276:32	0:0	8	=
water	276:34	0:0	8	p
water	276:35	0:0	8	;
water	277:16	0:0	8	wpng_info
op	277:25	0:0	8	.
water	277:26	0:0	8	have_text
op	277:36	0:0	8	|=
water	277:39	0:0	8	TEXT_TITLE
water	277:49	0:0	8	;
if	278:16	294:16	8	(( result =wpng_isvalid_latin1 (( uch * ) p ,len ) ) >= 0)
cond	278:20	278:69	9	( result =wpng_isvalid_latin1 (( uch * ) p ,len ) ) >= 0
water	278:20	0:0	10	(
water	278:21	0:0	10	result
op	278:28	0:0	10	=
call	278:30	278:63	10	wpng_isvalid_latin1
arg	278:50	278:58	11	(uch*)p
water	278:50	0:0	12	(
water	278:51	0:0	12	uch
op	278:55	0:0	12	*
water	278:56	0:0	12	)
water	278:57	0:0	12	p
arg	278:60	278:63	11	len
water	278:60	0:0	12	len
water	278:64	0:0	10	)
op	278:66	0:0	10	>=
water	278:69	0:0	10	0
stmts	278:72	294:16	9	
water	278:72	0:0	10	{
call	279:20	283:30	10	fprintf
arg	279:28	279:34	11	stderr
water	279:28	0:0	12	stderr
arg	279:36	281:74	11	"    "PROGNAME" warning:  character code"" %u is %sdiscouraged by the PNG\n    specification ""[first occurrence was at character position #%d]\n"
water	279:36	0:0	12	"    "
water	279:43	0:0	12	PROGNAME
water	279:52	0:0	12	" warning:  character code"
water	280:22	0:0	12	" %u is %sdiscouraged by the PNG\n    specification "
water	281:22	0:0	12	"[first occurrence was at character position #%d]\n"
arg	282:22	282:41	11	(unsigned)p[result]
water	282:22	0:0	12	(
water	282:23	0:0	12	unsigned
water	282:31	0:0	12	)
water	282:32	0:0	12	p
op	282:33	0:0	12	[
water	282:34	0:0	12	result
op	282:40	0:0	12	]
arg	282:43	282:78	11	(p[result]==27)?"strongly ":""
water	282:43	0:0	12	(
water	282:44	0:0	12	p
op	282:45	0:0	12	[
water	282:46	0:0	12	result
op	282:52	0:0	12	]
op	282:54	0:0	12	==
water	282:57	0:0	12	27
water	282:59	0:0	12	)
water	282:60	0:0	12	?
water	282:62	0:0	12	"strongly "
water	282:74	0:0	12	:
water	282:76	0:0	12	""
arg	283:22	283:30	11	result+1
water	283:22	0:0	12	result
op	283:28	0:0	12	+
water	283:29	0:0	12	1
water	283:31	0:0	10	;
call	284:20	284:33	10	fflush
arg	284:27	284:33	11	stderr
water	284:27	0:0	12	stderr
water	284:34	0:0	10	;
water	286:20	0:0	10	wpng_info
op	286:29	0:0	10	.
water	286:30	0:0	10	have_text
op	286:40	0:0	10	&=
water	286:43	0:0	10	~TEXT_TITLE
water	286:54	0:0	10	;
water	287:20	0:0	10	valid
op	287:26	0:0	10	=
water	287:28	0:0	10	FALSE
water	287:33	0:0	10	;
if	289:20	292:20	10	(p [ result ] == 27)
cond	289:24	289:37	11	p [ result ] == 27
water	289:24	0:0	12	p
op	289:25	0:0	12	[
water	289:26	0:0	12	result
op	289:32	0:0	12	]
op	289:34	0:0	12	==
water	289:37	0:0	12	27
stmts	289:41	292:20	11	
water	289:41	0:0	12	{
water	290:24	0:0	12	wpng_info
op	290:33	0:0	12	.
water	290:34	0:0	12	have_text
op	290:44	0:0	12	&=
water	290:47	0:0	12	~TEXT_TITLE
water	290:58	0:0	12	;
water	291:24	0:0	12	valid
op	291:30	0:0	12	=
water	291:32	0:0	12	FALSE
water	291:37	0:0	12	;
water	292:20	0:0	12	}
water	294:16	0:0	10	}
water	295:12	0:0	8	}
water	296:8	0:0	6	}
water	296:24	0:0	4	;
do	297:8	325:8	4	(! valid)
cond	325:17	325:18	5	! valid
op	325:17	0:0	6	!
water	325:18	0:0	6	valid
stmts	297:11	325:8	5	
water	297:11	0:0	6	{
water	298:12	0:0	6	valid
op	298:18	0:0	6	=
water	298:20	0:0	6	TRUE
water	298:24	0:0	6	;
water	299:12	0:0	6	p
op	299:14	0:0	6	=
water	299:16	0:0	6	textbuf
op	299:24	0:0	6	+
water	299:26	0:0	6	TEXT_AUTHOR_OFFSET
water	299:44	0:0	6	;
call	300:12	300:40	6	fprintf
arg	300:20	300:26	7	stderr
water	300:20	0:0	8	stderr
arg	300:28	300:40	7	"  Author: "
water	300:28	0:0	8	"  Author: "
water	300:41	0:0	6	;
call	301:12	301:25	6	fflush
arg	301:19	301:25	7	stderr
water	301:19	0:0	8	stderr
water	301:26	0:0	6	;
if	302:12	324:12	6	(FGETS (p ,74 ,keybd ) && ( len =strlen (p ) ) > 1)
cond	302:16	302:59	7	FGETS (p ,74 ,keybd ) && ( len =strlen (p ) ) > 1
call	302:16	302:34	8	FGETS
arg	302:22	302:23	9	p
water	302:22	0:0	10	p
arg	302:25	302:27	9	74
water	302:25	0:0	10	74
arg	302:29	302:34	9	keybd
water	302:29	0:0	10	keybd
op	302:36	0:0	8	&&
water	302:39	0:0	8	(
water	302:40	0:0	8	len
op	302:44	0:0	8	=
call	302:46	302:54	8	strlen
arg	302:53	302:54	9	p
water	302:53	0:0	10	p
water	302:55	0:0	8	)
op	302:57	0:0	8	>
water	302:59	0:0	8	1
stmts	302:62	324:12	7	
water	302:62	0:0	8	{
if	303:16	304:35	8	(p [ len - 1 ] == '\n')
cond	303:20	303:32	9	p [ len - 1 ] == '\n'
water	303:20	0:0	10	p
op	303:21	0:0	10	[
water	303:22	0:0	10	len
op	303:25	0:0	10	-
water	303:26	0:0	10	1
op	303:27	0:0	10	]
op	303:29	0:0	10	==
water	303:32	0:0	10	'\n'
stmts	304:20	304:35	9	
water	304:20	0:0	10	p
op	304:21	0:0	10	[
op	304:22	0:0	10	--
water	304:24	0:0	10	len
op	304:27	0:0	10	]
op	304:29	0:0	10	=
water	304:31	0:0	10	'\0'
water	304:35	0:0	10	;
water	305:16	0:0	8	wpng_info
op	305:25	0:0	8	.
water	305:26	0:0	8	author
op	305:33	0:0	8	=
water	305:35	0:0	8	p
water	305:36	0:0	8	;
water	306:16	0:0	8	wpng_info
op	306:25	0:0	8	.
water	306:26	0:0	8	have_text
op	306:36	0:0	8	|=
water	306:39	0:0	8	TEXT_AUTHOR
water	306:50	0:0	8	;
if	307:16	323:16	8	(( result =wpng_isvalid_latin1 (( uch * ) p ,len ) ) >= 0)
cond	307:20	307:69	9	( result =wpng_isvalid_latin1 (( uch * ) p ,len ) ) >= 0
water	307:20	0:0	10	(
water	307:21	0:0	10	result
op	307:28	0:0	10	=
call	307:30	307:63	10	wpng_isvalid_latin1
arg	307:50	307:58	11	(uch*)p
water	307:50	0:0	12	(
water	307:51	0:0	12	uch
op	307:55	0:0	12	*
water	307:56	0:0	12	)
water	307:57	0:0	12	p
arg	307:60	307:63	11	len
water	307:60	0:0	12	len
water	307:64	0:0	10	)
op	307:66	0:0	10	>=
water	307:69	0:0	10	0
stmts	307:72	323:16	9	
water	307:72	0:0	10	{
call	308:20	312:30	10	fprintf
arg	308:28	308:34	11	stderr
water	308:28	0:0	12	stderr
arg	308:36	310:74	11	"    "PROGNAME" warning:  character code"" %u is %sdiscouraged by the PNG\n    specification ""[first occurrence was at character position #%d]\n"
water	308:36	0:0	12	"    "
water	308:43	0:0	12	PROGNAME
water	308:52	0:0	12	" warning:  character code"
water	309:22	0:0	12	" %u is %sdiscouraged by the PNG\n    specification "
water	310:22	0:0	12	"[first occurrence was at character position #%d]\n"
arg	311:22	311:41	11	(unsigned)p[result]
water	311:22	0:0	12	(
water	311:23	0:0	12	unsigned
water	311:31	0:0	12	)
water	311:32	0:0	12	p
op	311:33	0:0	12	[
water	311:34	0:0	12	result
op	311:40	0:0	12	]
arg	311:43	311:78	11	(p[result]==27)?"strongly ":""
water	311:43	0:0	12	(
water	311:44	0:0	12	p
op	311:45	0:0	12	[
water	311:46	0:0	12	result
op	311:52	0:0	12	]
op	311:54	0:0	12	==
water	311:57	0:0	12	27
water	311:59	0:0	12	)
water	311:60	0:0	12	?
water	311:62	0:0	12	"strongly "
water	311:74	0:0	12	:
water	311:76	0:0	12	""
arg	312:22	312:30	11	result+1
water	312:22	0:0	12	result
op	312:28	0:0	12	+
water	312:29	0:0	12	1
water	312:31	0:0	10	;
call	313:20	313:33	10	fflush
arg	313:27	313:33	11	stderr
water	313:27	0:0	12	stderr
water	313:34	0:0	10	;
water	315:20	0:0	10	wpng_info
op	315:29	0:0	10	.
water	315:30	0:0	10	have_text
op	315:40	0:0	10	&=
water	315:43	0:0	10	~TEXT_AUTHOR
water	315:55	0:0	10	;
water	316:20	0:0	10	valid
op	316:26	0:0	10	=
water	316:28	0:0	10	FALSE
water	316:33	0:0	10	;
if	318:20	321:20	10	(p [ result ] == 27)
cond	318:24	318:37	11	p [ result ] == 27
water	318:24	0:0	12	p
op	318:25	0:0	12	[
water	318:26	0:0	12	result
op	318:32	0:0	12	]
op	318:34	0:0	12	==
water	318:37	0:0	12	27
stmts	318:41	321:20	11	
water	318:41	0:0	12	{
water	319:24	0:0	12	wpng_info
op	319:33	0:0	12	.
water	319:34	0:0	12	have_text
op	319:44	0:0	12	&=
water	319:47	0:0	12	~TEXT_AUTHOR
water	319:59	0:0	12	;
water	320:24	0:0	12	valid
op	320:30	0:0	12	=
water	320:32	0:0	12	FALSE
water	320:37	0:0	12	;
water	321:20	0:0	12	}
water	323:16	0:0	10	}
water	324:12	0:0	8	}
water	325:8	0:0	6	}
water	325:24	0:0	4	;
do	326:8	364:8	4	(! valid)
cond	364:17	364:18	5	! valid
op	364:17	0:0	6	!
water	364:18	0:0	6	valid
stmts	326:11	364:8	5	
water	326:11	0:0	6	{
water	327:12	0:0	6	valid
op	327:18	0:0	6	=
water	327:20	0:0	6	TRUE
water	327:24	0:0	6	;
water	328:12	0:0	6	p
op	328:14	0:0	6	=
water	328:16	0:0	6	textbuf
op	328:24	0:0	6	+
water	328:26	0:0	6	TEXT_DESC_OFFSET
water	328:42	0:0	6	;
call	329:12	329:62	6	fprintf
arg	329:20	329:26	7	stderr
water	329:20	0:0	8	stderr
arg	329:28	329:62	7	"  Description (up to 9 lines):\n"
water	329:28	0:0	8	"  Description (up to 9 lines):\n"
water	329:63	0:0	6	;
for	330:12	337:12	6	(i = 1 ;i < 10;++ i)
forinit	330:17	330:22	7	i = 1 ;
water	330:17	0:0	8	i
op	330:19	0:0	8	=
water	330:21	0:0	8	1
water	330:22	0:0	8	;
cond	330:25	330:29	7	i < 10
water	330:25	0:0	8	i
op	330:27	0:0	8	<
water	330:29	0:0	8	10
forexpr	330:34	330:36	7	++ i
op	330:34	0:0	8	++
water	330:36	0:0	8	i
stmts	330:39	337:12	7	
water	330:39	0:0	8	{
call	331:16	331:46	8	fprintf
arg	331:24	331:30	9	stderr
water	331:24	0:0	10	stderr
arg	331:32	331:43	9	"    [%d] "
water	331:32	0:0	10	"    [%d] "
arg	331:45	331:46	9	i
water	331:45	0:0	10	i
water	331:47	0:0	8	;
call	332:16	332:29	8	fflush
arg	332:23	332:29	9	stderr
water	332:23	0:0	10	stderr
water	332:30	0:0	8	;
if	333:16	334:28	8	(FGETS (p ,74 ,keybd ) && ( len =strlen (p ) ) > 1)
cond	333:20	333:63	9	FGETS (p ,74 ,keybd ) && ( len =strlen (p ) ) > 1
call	333:20	333:38	10	FGETS
arg	333:26	333:27	11	p
water	333:26	0:0	12	p
arg	333:29	333:31	11	74
water	333:29	0:0	12	74
arg	333:33	333:38	11	keybd
water	333:33	0:0	12	keybd
op	333:40	0:0	10	&&
water	333:43	0:0	10	(
water	333:44	0:0	10	len
op	333:48	0:0	10	=
call	333:50	333:58	10	strlen
arg	333:57	333:58	11	p
water	333:57	0:0	12	p
water	333:59	0:0	10	)
op	333:61	0:0	10	>
water	333:63	0:0	10	1
stmts	334:20	334:28	9	
water	334:20	0:0	10	p
op	334:22	0:0	10	+=
water	334:25	0:0	10	len
water	334:28	0:0	10	;
else	335:16	336:25	8
stmts	336:20	336:25	9	
break	336:20	336:25	10	
water	337:12	0:0	8	}
if	338:12	363:12	6	(( len = p - ( textbuf + TEXT_DESC_OFFSET ) ) > 1)
cond	338:16	338:59	7	( len = p - ( textbuf + TEXT_DESC_OFFSET ) ) > 1
water	338:16	0:0	8	(
water	338:17	0:0	8	len
op	338:21	0:0	8	=
water	338:23	0:0	8	p
op	338:25	0:0	8	-
water	338:27	0:0	8	(
water	338:28	0:0	8	textbuf
op	338:36	0:0	8	+
water	338:38	0:0	8	TEXT_DESC_OFFSET
water	338:54	0:0	8	)
water	338:55	0:0	8	)
op	338:57	0:0	8	>
water	338:59	0:0	8	1
stmts	338:62	363:12	7	
water	338:62	0:0	8	{
if	339:16	342:16	8	(p [ - 1 ] == '\n')
cond	339:20	339:29	9	p [ - 1 ] == '\n'
water	339:20	0:0	10	p
op	339:21	0:0	10	[
op	339:22	0:0	10	-
water	339:23	0:0	10	1
op	339:24	0:0	10	]
op	339:26	0:0	10	==
water	339:29	0:0	10	'\n'
stmts	339:35	342:16	9	
water	339:35	0:0	10	{
water	340:20	0:0	10	p
op	340:21	0:0	10	[
op	340:22	0:0	10	-
water	340:23	0:0	10	1
op	340:24	0:0	10	]
op	340:26	0:0	10	=
water	340:28	0:0	10	'\0'
water	340:32	0:0	10	;
op	341:20	0:0	10	--
water	341:22	0:0	10	len
water	341:25	0:0	10	;
water	342:16	0:0	10	}
water	343:16	0:0	8	wpng_info
op	343:25	0:0	8	.
water	343:26	0:0	8	desc
op	343:31	0:0	8	=
water	343:33	0:0	8	textbuf
op	343:41	0:0	8	+
water	343:43	0:0	8	TEXT_DESC_OFFSET
water	343:59	0:0	8	;
water	344:16	0:0	8	wpng_info
op	344:25	0:0	8	.
water	344:26	0:0	8	have_text
op	344:36	0:0	8	|=
water	344:39	0:0	8	TEXT_DESC
water	344:48	0:0	8	;
water	345:16	0:0	8	p
op	345:18	0:0	8	=
water	345:20	0:0	8	textbuf
op	345:28	0:0	8	+
water	345:30	0:0	8	TEXT_DESC_OFFSET
water	345:46	0:0	8	;
if	346:16	362:16	8	(( result =wpng_isvalid_latin1 (( uch * ) p ,len ) ) >= 0)
cond	346:20	346:69	9	( result =wpng_isvalid_latin1 (( uch * ) p ,len ) ) >= 0
water	346:20	0:0	10	(
water	346:21	0:0	10	result
op	346:28	0:0	10	=
call	346:30	346:63	10	wpng_isvalid_latin1
arg	346:50	346:58	11	(uch*)p
water	346:50	0:0	12	(
water	346:51	0:0	12	uch
op	346:55	0:0	12	*
water	346:56	0:0	12	)
water	346:57	0:0	12	p
arg	346:60	346:63	11	len
water	346:60	0:0	12	len
water	346:64	0:0	10	)
op	346:66	0:0	10	>=
water	346:69	0:0	10	0
stmts	346:72	362:16	9	
water	346:72	0:0	10	{
call	347:20	351:30	10	fprintf
arg	347:28	347:34	11	stderr
water	347:28	0:0	12	stderr
arg	347:36	349:74	11	"    "PROGNAME" warning:  character code"" %u is %sdiscouraged by the PNG\n    specification ""[first occurrence was at character position #%d]\n"
water	347:36	0:0	12	"    "
water	347:43	0:0	12	PROGNAME
water	347:52	0:0	12	" warning:  character code"
water	348:22	0:0	12	" %u is %sdiscouraged by the PNG\n    specification "
water	349:22	0:0	12	"[first occurrence was at character position #%d]\n"
arg	350:22	350:41	11	(unsigned)p[result]
water	350:22	0:0	12	(
water	350:23	0:0	12	unsigned
water	350:31	0:0	12	)
water	350:32	0:0	12	p
op	350:33	0:0	12	[
water	350:34	0:0	12	result
op	350:40	0:0	12	]
arg	350:43	350:78	11	(p[result]==27)?"strongly ":""
water	350:43	0:0	12	(
water	350:44	0:0	12	p
op	350:45	0:0	12	[
water	350:46	0:0	12	result
op	350:52	0:0	12	]
op	350:54	0:0	12	==
water	350:57	0:0	12	27
water	350:59	0:0	12	)
water	350:60	0:0	12	?
water	350:62	0:0	12	"strongly "
water	350:74	0:0	12	:
water	350:76	0:0	12	""
arg	351:22	351:30	11	result+1
water	351:22	0:0	12	result
op	351:28	0:0	12	+
water	351:29	0:0	12	1
water	351:31	0:0	10	;
call	352:20	352:33	10	fflush
arg	352:27	352:33	11	stderr
water	352:27	0:0	12	stderr
water	352:34	0:0	10	;
water	354:20	0:0	10	wpng_info
op	354:29	0:0	10	.
water	354:30	0:0	10	have_text
op	354:40	0:0	10	&=
water	354:43	0:0	10	~TEXT_DESC
water	354:53	0:0	10	;
water	355:20	0:0	10	valid
op	355:26	0:0	10	=
water	355:28	0:0	10	FALSE
water	355:33	0:0	10	;
if	357:20	360:20	10	(p [ result ] == 27)
cond	357:24	357:37	11	p [ result ] == 27
water	357:24	0:0	12	p
op	357:25	0:0	12	[
water	357:26	0:0	12	result
op	357:32	0:0	12	]
op	357:34	0:0	12	==
water	357:37	0:0	12	27
stmts	357:41	360:20	11	
water	357:41	0:0	12	{
water	358:24	0:0	12	wpng_info
op	358:33	0:0	12	.
water	358:34	0:0	12	have_text
op	358:44	0:0	12	&=
water	358:47	0:0	12	~TEXT_DESC
water	358:57	0:0	12	;
water	359:24	0:0	12	valid
op	359:30	0:0	12	=
water	359:32	0:0	12	FALSE
water	359:37	0:0	12	;
water	360:20	0:0	12	}
water	362:16	0:0	10	}
water	363:12	0:0	8	}
water	364:8	0:0	6	}
water	364:24	0:0	4	;
do	365:8	393:8	4	(! valid)
cond	393:17	393:18	5	! valid
op	393:17	0:0	6	!
water	393:18	0:0	6	valid
stmts	365:11	393:8	5	
water	365:11	0:0	6	{
water	366:12	0:0	6	valid
op	366:18	0:0	6	=
water	366:20	0:0	6	TRUE
water	366:24	0:0	6	;
water	367:12	0:0	6	p
op	367:14	0:0	6	=
water	367:16	0:0	6	textbuf
op	367:24	0:0	6	+
water	367:26	0:0	6	TEXT_COPY_OFFSET
water	367:42	0:0	6	;
call	368:12	368:43	6	fprintf
arg	368:20	368:26	7	stderr
water	368:20	0:0	8	stderr
arg	368:28	368:43	7	"  Copyright: "
water	368:28	0:0	8	"  Copyright: "
water	368:44	0:0	6	;
call	369:12	369:25	6	fflush
arg	369:19	369:25	7	stderr
water	369:19	0:0	8	stderr
water	369:26	0:0	6	;
if	370:12	392:12	6	(FGETS (p ,74 ,keybd ) && ( len =strlen (p ) ) > 1)
cond	370:16	370:59	7	FGETS (p ,74 ,keybd ) && ( len =strlen (p ) ) > 1
call	370:16	370:34	8	FGETS
arg	370:22	370:23	9	p
water	370:22	0:0	10	p
arg	370:25	370:27	9	74
water	370:25	0:0	10	74
arg	370:29	370:34	9	keybd
water	370:29	0:0	10	keybd
op	370:36	0:0	8	&&
water	370:39	0:0	8	(
water	370:40	0:0	8	len
op	370:44	0:0	8	=
call	370:46	370:54	8	strlen
arg	370:53	370:54	9	p
water	370:53	0:0	10	p
water	370:55	0:0	8	)
op	370:57	0:0	8	>
water	370:59	0:0	8	1
stmts	370:62	392:12	7	
water	370:62	0:0	8	{
if	371:16	372:35	8	(p [ len - 1 ] == '\n')
cond	371:20	371:32	9	p [ len - 1 ] == '\n'
water	371:20	0:0	10	p
op	371:21	0:0	10	[
water	371:22	0:0	10	len
op	371:25	0:0	10	-
water	371:26	0:0	10	1
op	371:27	0:0	10	]
op	371:29	0:0	10	==
water	371:32	0:0	10	'\n'
stmts	372:20	372:35	9	
water	372:20	0:0	10	p
op	372:21	0:0	10	[
op	372:22	0:0	10	--
water	372:24	0:0	10	len
op	372:27	0:0	10	]
op	372:29	0:0	10	=
water	372:31	0:0	10	'\0'
water	372:35	0:0	10	;
water	373:16	0:0	8	wpng_info
op	373:25	0:0	8	.
water	373:26	0:0	8	copyright
op	373:36	0:0	8	=
water	373:38	0:0	8	p
water	373:39	0:0	8	;
water	374:16	0:0	8	wpng_info
op	374:25	0:0	8	.
water	374:26	0:0	8	have_text
op	374:36	0:0	8	|=
water	374:39	0:0	8	TEXT_COPY
water	374:48	0:0	8	;
if	375:16	391:16	8	(( result =wpng_isvalid_latin1 (( uch * ) p ,len ) ) >= 0)
cond	375:20	375:69	9	( result =wpng_isvalid_latin1 (( uch * ) p ,len ) ) >= 0
water	375:20	0:0	10	(
water	375:21	0:0	10	result
op	375:28	0:0	10	=
call	375:30	375:63	10	wpng_isvalid_latin1
arg	375:50	375:58	11	(uch*)p
water	375:50	0:0	12	(
water	375:51	0:0	12	uch
op	375:55	0:0	12	*
water	375:56	0:0	12	)
water	375:57	0:0	12	p
arg	375:60	375:63	11	len
water	375:60	0:0	12	len
water	375:64	0:0	10	)
op	375:66	0:0	10	>=
water	375:69	0:0	10	0
stmts	375:72	391:16	9	
water	375:72	0:0	10	{
call	376:20	380:30	10	fprintf
arg	376:28	376:34	11	stderr
water	376:28	0:0	12	stderr
arg	376:36	378:74	11	"    "PROGNAME" warning:  character code"" %u is %sdiscouraged by the PNG\n    specification ""[first occurrence was at character position #%d]\n"
water	376:36	0:0	12	"    "
water	376:43	0:0	12	PROGNAME
water	376:52	0:0	12	" warning:  character code"
water	377:22	0:0	12	" %u is %sdiscouraged by the PNG\n    specification "
water	378:22	0:0	12	"[first occurrence was at character position #%d]\n"
arg	379:22	379:41	11	(unsigned)p[result]
water	379:22	0:0	12	(
water	379:23	0:0	12	unsigned
water	379:31	0:0	12	)
water	379:32	0:0	12	p
op	379:33	0:0	12	[
water	379:34	0:0	12	result
op	379:40	0:0	12	]
arg	379:43	379:78	11	(p[result]==27)?"strongly ":""
water	379:43	0:0	12	(
water	379:44	0:0	12	p
op	379:45	0:0	12	[
water	379:46	0:0	12	result
op	379:52	0:0	12	]
op	379:54	0:0	12	==
water	379:57	0:0	12	27
water	379:59	0:0	12	)
water	379:60	0:0	12	?
water	379:62	0:0	12	"strongly "
water	379:74	0:0	12	:
water	379:76	0:0	12	""
arg	380:22	380:30	11	result+1
water	380:22	0:0	12	result
op	380:28	0:0	12	+
water	380:29	0:0	12	1
water	380:31	0:0	10	;
call	381:20	381:33	10	fflush
arg	381:27	381:33	11	stderr
water	381:27	0:0	12	stderr
water	381:34	0:0	10	;
water	383:20	0:0	10	wpng_info
op	383:29	0:0	10	.
water	383:30	0:0	10	have_text
op	383:40	0:0	10	&=
water	383:43	0:0	10	~TEXT_COPY
water	383:53	0:0	10	;
water	384:20	0:0	10	valid
op	384:26	0:0	10	=
water	384:28	0:0	10	FALSE
water	384:33	0:0	10	;
if	386:20	389:20	10	(p [ result ] == 27)
cond	386:24	386:37	11	p [ result ] == 27
water	386:24	0:0	12	p
op	386:25	0:0	12	[
water	386:26	0:0	12	result
op	386:32	0:0	12	]
op	386:34	0:0	12	==
water	386:37	0:0	12	27
stmts	386:41	389:20	11	
water	386:41	0:0	12	{
water	387:24	0:0	12	wpng_info
op	387:33	0:0	12	.
water	387:34	0:0	12	have_text
op	387:44	0:0	12	&=
water	387:47	0:0	12	~TEXT_COPY
water	387:57	0:0	12	;
water	388:24	0:0	12	valid
op	388:30	0:0	12	=
water	388:32	0:0	12	FALSE
water	388:37	0:0	12	;
water	389:20	0:0	12	}
water	391:16	0:0	10	}
water	392:12	0:0	8	}
water	393:8	0:0	6	}
water	393:24	0:0	4	;
do	394:8	422:8	4	(! valid)
cond	422:17	422:18	5	! valid
op	422:17	0:0	6	!
water	422:18	0:0	6	valid
stmts	394:11	422:8	5	
water	394:11	0:0	6	{
water	395:12	0:0	6	valid
op	395:18	0:0	6	=
water	395:20	0:0	6	TRUE
water	395:24	0:0	6	;
water	396:12	0:0	6	p
op	396:14	0:0	6	=
water	396:16	0:0	6	textbuf
op	396:24	0:0	6	+
water	396:26	0:0	6	TEXT_EMAIL_OFFSET
water	396:43	0:0	6	;
call	397:12	397:40	6	fprintf
arg	397:20	397:26	7	stderr
water	397:20	0:0	8	stderr
arg	397:28	397:40	7	"  E-mail: "
water	397:28	0:0	8	"  E-mail: "
water	397:41	0:0	6	;
call	398:12	398:25	6	fflush
arg	398:19	398:25	7	stderr
water	398:19	0:0	8	stderr
water	398:26	0:0	6	;
if	399:12	421:12	6	(FGETS (p ,74 ,keybd ) && ( len =strlen (p ) ) > 1)
cond	399:16	399:59	7	FGETS (p ,74 ,keybd ) && ( len =strlen (p ) ) > 1
call	399:16	399:34	8	FGETS
arg	399:22	399:23	9	p
water	399:22	0:0	10	p
arg	399:25	399:27	9	74
water	399:25	0:0	10	74
arg	399:29	399:34	9	keybd
water	399:29	0:0	10	keybd
op	399:36	0:0	8	&&
water	399:39	0:0	8	(
water	399:40	0:0	8	len
op	399:44	0:0	8	=
call	399:46	399:54	8	strlen
arg	399:53	399:54	9	p
water	399:53	0:0	10	p
water	399:55	0:0	8	)
op	399:57	0:0	8	>
water	399:59	0:0	8	1
stmts	399:62	421:12	7	
water	399:62	0:0	8	{
if	400:16	401:35	8	(p [ len - 1 ] == '\n')
cond	400:20	400:32	9	p [ len - 1 ] == '\n'
water	400:20	0:0	10	p
op	400:21	0:0	10	[
water	400:22	0:0	10	len
op	400:25	0:0	10	-
water	400:26	0:0	10	1
op	400:27	0:0	10	]
op	400:29	0:0	10	==
water	400:32	0:0	10	'\n'
stmts	401:20	401:35	9	
water	401:20	0:0	10	p
op	401:21	0:0	10	[
op	401:22	0:0	10	--
water	401:24	0:0	10	len
op	401:27	0:0	10	]
op	401:29	0:0	10	=
water	401:31	0:0	10	'\0'
water	401:35	0:0	10	;
water	402:16	0:0	8	wpng_info
op	402:25	0:0	8	.
water	402:26	0:0	8	email
op	402:32	0:0	8	=
water	402:34	0:0	8	p
water	402:35	0:0	8	;
water	403:16	0:0	8	wpng_info
op	403:25	0:0	8	.
water	403:26	0:0	8	have_text
op	403:36	0:0	8	|=
water	403:39	0:0	8	TEXT_EMAIL
water	403:49	0:0	8	;
if	404:16	420:16	8	(( result =wpng_isvalid_latin1 (( uch * ) p ,len ) ) >= 0)
cond	404:20	404:69	9	( result =wpng_isvalid_latin1 (( uch * ) p ,len ) ) >= 0
water	404:20	0:0	10	(
water	404:21	0:0	10	result
op	404:28	0:0	10	=
call	404:30	404:63	10	wpng_isvalid_latin1
arg	404:50	404:58	11	(uch*)p
water	404:50	0:0	12	(
water	404:51	0:0	12	uch
op	404:55	0:0	12	*
water	404:56	0:0	12	)
water	404:57	0:0	12	p
arg	404:60	404:63	11	len
water	404:60	0:0	12	len
water	404:64	0:0	10	)
op	404:66	0:0	10	>=
water	404:69	0:0	10	0
stmts	404:72	420:16	9	
water	404:72	0:0	10	{
call	405:20	409:30	10	fprintf
arg	405:28	405:34	11	stderr
water	405:28	0:0	12	stderr
arg	405:36	407:74	11	"    "PROGNAME" warning:  character code"" %u is %sdiscouraged by the PNG\n    specification ""[first occurrence was at character position #%d]\n"
water	405:36	0:0	12	"    "
water	405:43	0:0	12	PROGNAME
water	405:52	0:0	12	" warning:  character code"
water	406:22	0:0	12	" %u is %sdiscouraged by the PNG\n    specification "
water	407:22	0:0	12	"[first occurrence was at character position #%d]\n"
arg	408:22	408:41	11	(unsigned)p[result]
water	408:22	0:0	12	(
water	408:23	0:0	12	unsigned
water	408:31	0:0	12	)
water	408:32	0:0	12	p
op	408:33	0:0	12	[
water	408:34	0:0	12	result
op	408:40	0:0	12	]
arg	408:43	408:78	11	(p[result]==27)?"strongly ":""
water	408:43	0:0	12	(
water	408:44	0:0	12	p
op	408:45	0:0	12	[
water	408:46	0:0	12	result
op	408:52	0:0	12	]
op	408:54	0:0	12	==
water	408:57	0:0	12	27
water	408:59	0:0	12	)
water	408:60	0:0	12	?
water	408:62	0:0	12	"strongly "
water	408:74	0:0	12	:
water	408:76	0:0	12	""
arg	409:22	409:30	11	result+1
water	409:22	0:0	12	result
op	409:28	0:0	12	+
water	409:29	0:0	12	1
water	409:31	0:0	10	;
call	410:20	410:33	10	fflush
arg	410:27	410:33	11	stderr
water	410:27	0:0	12	stderr
water	410:34	0:0	10	;
water	412:20	0:0	10	wpng_info
op	412:29	0:0	10	.
water	412:30	0:0	10	have_text
op	412:40	0:0	10	&=
water	412:43	0:0	10	~TEXT_EMAIL
water	412:54	0:0	10	;
water	413:20	0:0	10	valid
op	413:26	0:0	10	=
water	413:28	0:0	10	FALSE
water	413:33	0:0	10	;
if	415:20	418:20	10	(p [ result ] == 27)
cond	415:24	415:37	11	p [ result ] == 27
water	415:24	0:0	12	p
op	415:25	0:0	12	[
water	415:26	0:0	12	result
op	415:32	0:0	12	]
op	415:34	0:0	12	==
water	415:37	0:0	12	27
stmts	415:41	418:20	11	
water	415:41	0:0	12	{
water	416:24	0:0	12	wpng_info
op	416:33	0:0	12	.
water	416:34	0:0	12	have_text
op	416:44	0:0	12	&=
water	416:47	0:0	12	~TEXT_EMAIL
water	416:58	0:0	12	;
water	417:24	0:0	12	valid
op	417:30	0:0	12	=
water	417:32	0:0	12	FALSE
water	417:37	0:0	12	;
water	418:20	0:0	12	}
water	420:16	0:0	10	}
water	421:12	0:0	8	}
water	422:8	0:0	6	}
water	422:24	0:0	4	;
do	423:8	451:8	4	(! valid)
cond	451:17	451:18	5	! valid
op	451:17	0:0	6	!
water	451:18	0:0	6	valid
stmts	423:11	451:8	5	
water	423:11	0:0	6	{
water	424:12	0:0	6	valid
op	424:18	0:0	6	=
water	424:20	0:0	6	TRUE
water	424:24	0:0	6	;
water	425:12	0:0	6	p
op	425:14	0:0	6	=
water	425:16	0:0	6	textbuf
op	425:24	0:0	6	+
water	425:26	0:0	6	TEXT_URL_OFFSET
water	425:41	0:0	6	;
call	426:12	426:37	6	fprintf
arg	426:20	426:26	7	stderr
water	426:20	0:0	8	stderr
arg	426:28	426:37	7	"  URL: "
water	426:28	0:0	8	"  URL: "
water	426:38	0:0	6	;
call	427:12	427:25	6	fflush
arg	427:19	427:25	7	stderr
water	427:19	0:0	8	stderr
water	427:26	0:0	6	;
if	428:12	450:12	6	(FGETS (p ,74 ,keybd ) && ( len =strlen (p ) ) > 1)
cond	428:16	428:59	7	FGETS (p ,74 ,keybd ) && ( len =strlen (p ) ) > 1
call	428:16	428:34	8	FGETS
arg	428:22	428:23	9	p
water	428:22	0:0	10	p
arg	428:25	428:27	9	74
water	428:25	0:0	10	74
arg	428:29	428:34	9	keybd
water	428:29	0:0	10	keybd
op	428:36	0:0	8	&&
water	428:39	0:0	8	(
water	428:40	0:0	8	len
op	428:44	0:0	8	=
call	428:46	428:54	8	strlen
arg	428:53	428:54	9	p
water	428:53	0:0	10	p
water	428:55	0:0	8	)
op	428:57	0:0	8	>
water	428:59	0:0	8	1
stmts	428:62	450:12	7	
water	428:62	0:0	8	{
if	429:16	430:35	8	(p [ len - 1 ] == '\n')
cond	429:20	429:32	9	p [ len - 1 ] == '\n'
water	429:20	0:0	10	p
op	429:21	0:0	10	[
water	429:22	0:0	10	len
op	429:25	0:0	10	-
water	429:26	0:0	10	1
op	429:27	0:0	10	]
op	429:29	0:0	10	==
water	429:32	0:0	10	'\n'
stmts	430:20	430:35	9	
water	430:20	0:0	10	p
op	430:21	0:0	10	[
op	430:22	0:0	10	--
water	430:24	0:0	10	len
op	430:27	0:0	10	]
op	430:29	0:0	10	=
water	430:31	0:0	10	'\0'
water	430:35	0:0	10	;
water	431:16	0:0	8	wpng_info
op	431:25	0:0	8	.
water	431:26	0:0	8	url
op	431:30	0:0	8	=
water	431:32	0:0	8	p
water	431:33	0:0	8	;
water	432:16	0:0	8	wpng_info
op	432:25	0:0	8	.
water	432:26	0:0	8	have_text
op	432:36	0:0	8	|=
water	432:39	0:0	8	TEXT_URL
water	432:47	0:0	8	;
if	433:16	449:16	8	(( result =wpng_isvalid_latin1 (( uch * ) p ,len ) ) >= 0)
cond	433:20	433:69	9	( result =wpng_isvalid_latin1 (( uch * ) p ,len ) ) >= 0
water	433:20	0:0	10	(
water	433:21	0:0	10	result
op	433:28	0:0	10	=
call	433:30	433:63	10	wpng_isvalid_latin1
arg	433:50	433:58	11	(uch*)p
water	433:50	0:0	12	(
water	433:51	0:0	12	uch
op	433:55	0:0	12	*
water	433:56	0:0	12	)
water	433:57	0:0	12	p
arg	433:60	433:63	11	len
water	433:60	0:0	12	len
water	433:64	0:0	10	)
op	433:66	0:0	10	>=
water	433:69	0:0	10	0
stmts	433:72	449:16	9	
water	433:72	0:0	10	{
call	434:20	438:30	10	fprintf
arg	434:28	434:34	11	stderr
water	434:28	0:0	12	stderr
arg	434:36	436:74	11	"    "PROGNAME" warning:  character code"" %u is %sdiscouraged by the PNG\n    specification ""[first occurrence was at character position #%d]\n"
water	434:36	0:0	12	"    "
water	434:43	0:0	12	PROGNAME
water	434:52	0:0	12	" warning:  character code"
water	435:22	0:0	12	" %u is %sdiscouraged by the PNG\n    specification "
water	436:22	0:0	12	"[first occurrence was at character position #%d]\n"
arg	437:22	437:41	11	(unsigned)p[result]
water	437:22	0:0	12	(
water	437:23	0:0	12	unsigned
water	437:31	0:0	12	)
water	437:32	0:0	12	p
op	437:33	0:0	12	[
water	437:34	0:0	12	result
op	437:40	0:0	12	]
arg	437:43	437:78	11	(p[result]==27)?"strongly ":""
water	437:43	0:0	12	(
water	437:44	0:0	12	p
op	437:45	0:0	12	[
water	437:46	0:0	12	result
op	437:52	0:0	12	]
op	437:54	0:0	12	==
water	437:57	0:0	12	27
water	437:59	0:0	12	)
water	437:60	0:0	12	?
water	437:62	0:0	12	"strongly "
water	437:74	0:0	12	:
water	437:76	0:0	12	""
arg	438:22	438:30	11	result+1
water	438:22	0:0	12	result
op	438:28	0:0	12	+
water	438:29	0:0	12	1
water	438:31	0:0	10	;
call	439:20	439:33	10	fflush
arg	439:27	439:33	11	stderr
water	439:27	0:0	12	stderr
water	439:34	0:0	10	;
water	441:20	0:0	10	wpng_info
op	441:29	0:0	10	.
water	441:30	0:0	10	have_text
op	441:40	0:0	10	&=
water	441:43	0:0	10	~TEXT_URL
water	441:52	0:0	10	;
water	442:20	0:0	10	valid
op	442:26	0:0	10	=
water	442:28	0:0	10	FALSE
water	442:33	0:0	10	;
if	444:20	447:20	10	(p [ result ] == 27)
cond	444:24	444:37	11	p [ result ] == 27
water	444:24	0:0	12	p
op	444:25	0:0	12	[
water	444:26	0:0	12	result
op	444:32	0:0	12	]
op	444:34	0:0	12	==
water	444:37	0:0	12	27
stmts	444:41	447:20	11	
water	444:41	0:0	12	{
water	445:24	0:0	12	wpng_info
op	445:33	0:0	12	.
water	445:34	0:0	12	have_text
op	445:44	0:0	12	&=
water	445:47	0:0	12	~TEXT_URL
water	445:56	0:0	12	;
water	446:24	0:0	12	valid
op	446:30	0:0	12	=
water	446:32	0:0	12	FALSE
water	446:37	0:0	12	;
water	447:20	0:0	12	}
water	449:16	0:0	10	}
water	450:12	0:0	8	}
water	451:8	0:0	6	}
water	451:24	0:0	4	;
call	453:8	453:20	4	fclose
arg	453:15	453:20	5	keybd
water	453:15	0:0	6	keybd
water	453:21	0:0	4	;
water	455:4	0:0	4	}
else	455:6	459:4	2
stmts	455:11	459:4	3	
if	455:11	459:4	4	(text)
cond	455:15	455:15	5	text
water	455:15	0:0	6	text
stmts	455:21	459:4	5	
water	455:21	0:0	6	{
call	456:8	456:74	6	fprintf
arg	456:16	456:22	7	stderr
water	456:16	0:0	8	stderr
arg	456:24	456:74	7	PROGNAME":  unable to allocate memory for text\n"
water	456:24	0:0	8	PROGNAME
water	456:33	0:0	8	":  unable to allocate memory for text\n"
water	456:75	0:0	6	;
water	457:8	0:0	6	text
op	457:13	0:0	6	=
water	457:15	0:0	6	FALSE
water	457:20	0:0	6	;
water	458:8	0:0	6	wpng_info
op	458:17	0:0	6	.
water	458:18	0:0	6	have_text
op	458:28	0:0	6	=
water	458:30	0:0	6	0
water	458:31	0:0	6	;
water	459:4	0:0	6	}
if	461:4	480:4	2	(( rc =writepng_init (& wpng_info ) ) != 0)
cond	461:8	461:44	3	( rc =writepng_init (& wpng_info ) ) != 0
water	461:8	0:0	4	(
water	461:9	0:0	4	rc
op	461:12	0:0	4	=
call	461:14	461:38	4	writepng_init
arg	461:28	461:38	5	&wpng_info
op	461:28	0:0	6	&
water	461:29	0:0	6	wpng_info
water	461:39	0:0	4	)
op	461:41	0:0	4	!=
water	461:44	0:0	4	0
stmts	461:47	480:4	3	
water	461:47	0:0	4	{
switch	462:8	478:8	4	(rc)
cond	462:16	462:16	5	rc
water	462:16	0:0	6	rc
stmts	462:20	478:8	5	
water	462:20	0:0	6	{
label	463:12	463:18	6	case 2 :
call	464:16	465:64	6	fprintf
arg	464:24	464:30	7	stderr
water	464:24	0:0	8	stderr
arg	464:32	465:64	7	PROGNAME":  libpng initialization problem (longjmp)\n"
water	464:32	0:0	8	PROGNAME
water	465:18	0:0	8	":  libpng initialization problem (longjmp)\n"
water	465:65	0:0	6	;
break	466:16	466:21	6	
label	467:12	467:18	6	case 4 :
call	468:16	468:67	6	fprintf
arg	468:24	468:30	7	stderr
water	468:24	0:0	8	stderr
arg	468:32	468:67	7	PROGNAME":  insufficient memory\n"
water	468:32	0:0	8	PROGNAME
water	468:41	0:0	8	":  insufficient memory\n"
water	468:68	0:0	6	;
break	469:16	469:21	6	
label	470:12	470:19	6	case 11 :
call	471:16	472:67	6	fprintf
arg	471:24	471:30	7	stderr
water	471:24	0:0	8	stderr
arg	471:32	472:67	7	PROGNAME":  internal logic error (unexpected PNM type)\n"
water	471:32	0:0	8	PROGNAME
water	472:18	0:0	8	":  internal logic error (unexpected PNM type)\n"
water	472:68	0:0	6	;
break	473:16	473:21	6	
label	474:12	474:19	6	default :
call	475:16	476:54	6	fprintf
arg	475:24	475:30	7	stderr
water	475:24	0:0	8	stderr
arg	475:32	476:54	7	PROGNAME":  unknown writepng_init() error\n"
water	475:32	0:0	8	PROGNAME
water	476:18	0:0	8	":  unknown writepng_init() error\n"
water	476:55	0:0	6	;
break	477:16	477:21	6	
water	478:8	0:0	6	}
call	479:8	479:15	4	exit
arg	479:13	479:15	5	rc
water	479:13	0:0	6	rc
water	479:16	0:0	4	;
water	480:4	0:0	4	}
if	483:4	486:4	2	(text && textbuf)
cond	483:8	483:16	3	text && textbuf
water	483:8	0:0	4	text
op	483:13	0:0	4	&&
water	483:16	0:0	4	textbuf
stmts	483:25	486:4	3	
water	483:25	0:0	4	{
call	484:8	484:20	4	free
arg	484:13	484:20	5	textbuf
water	484:13	0:0	6	textbuf
water	484:21	0:0	4	;
water	485:8	0:0	4	textbuf
op	485:16	0:0	4	=
water	485:18	0:0	4	NULL
water	485:22	0:0	4	;
water	486:4	0:0	4	}
if	490:4	491:34	2	(wpng_info . pnmtype == 5)
cond	490:8	490:29	3	wpng_info . pnmtype == 5
water	490:8	0:0	4	wpng_info
op	490:17	0:0	4	.
water	490:18	0:0	4	pnmtype
op	490:26	0:0	4	==
water	490:29	0:0	4	5
stmts	491:8	491:34	3	
water	491:8	0:0	4	rowbytes
op	491:17	0:0	4	=
water	491:19	0:0	4	wpng_info
op	491:28	0:0	4	.
water	491:29	0:0	4	width
water	491:34	0:0	4	;
else	492:4	493:38	2
stmts	492:9	493:38	3	
if	492:9	493:38	4	(wpng_info . pnmtype == 6)
cond	492:13	492:34	5	wpng_info . pnmtype == 6
water	492:13	0:0	6	wpng_info
op	492:22	0:0	6	.
water	492:23	0:0	6	pnmtype
op	492:31	0:0	6	==
water	492:34	0:0	6	6
stmts	493:8	493:38	5	
water	493:8	0:0	6	rowbytes
op	493:17	0:0	6	=
water	493:19	0:0	6	wpng_info
op	493:28	0:0	6	.
water	493:29	0:0	6	width
op	493:35	0:0	6	*
water	493:37	0:0	6	3
water	493:38	0:0	6	;
else	494:4	495:38	2
stmts	495:8	495:38	3	
water	495:8	0:0	4	rowbytes
op	495:17	0:0	4	=
water	495:19	0:0	4	wpng_info
op	495:28	0:0	4	.
water	495:29	0:0	4	width
op	495:35	0:0	4	*
water	495:37	0:0	4	4
water	495:38	0:0	4	;
call	498:4	498:46	2	fprintf
arg	498:12	498:18	3	stderr
water	498:12	0:0	4	stderr
arg	498:20	498:46	3	"Encoding image data...\n"
water	498:20	0:0	4	"Encoding image data...\n"
water	498:47	0:0	2	;
call	499:4	499:17	2	fflush
arg	499:11	499:17	3	stderr
water	499:11	0:0	4	stderr
water	499:18	0:0	2	;
if	500:4	527:4	2	(wpng_info . interlaced)
cond	500:8	500:18	3	wpng_info . interlaced
water	500:8	0:0	4	wpng_info
op	500:17	0:0	4	.
water	500:18	0:0	4	interlaced
stmts	500:30	527:4	3	
water	500:30	0:0	4	{
decl	501:8	501:14	4	long	i
decl	502:8	502:17	4	ulg	bytes
decl	503:8	503:53	4	ulg	image_bytes
op	503:24	0:0	4	=
water	503:26	0:0	4	rowbytes
op	503:35	0:0	4	*
water	503:37	0:0	4	wpng_info
op	503:46	0:0	4	.
water	503:47	0:0	4	height
water	504:8	0:0	4	wpng_info
op	504:17	0:0	4	.
water	504:18	0:0	4	image_data
op	504:29	0:0	4	=
water	504:31	0:0	4	(
water	504:32	0:0	4	uch
op	504:36	0:0	4	*
water	504:37	0:0	4	)
call	504:38	504:56	4	malloc
arg	504:45	504:56	5	image_bytes
water	504:45	0:0	6	image_bytes
water	504:57	0:0	4	;
water	505:8	0:0	4	wpng_info
op	505:17	0:0	4	.
water	505:18	0:0	4	row_pointers
op	505:31	0:0	4	=
water	505:33	0:0	4	(
water	505:34	0:0	4	uch
op	505:38	0:0	4	*
op	505:39	0:0	4	*
water	505:40	0:0	4	)
call	505:41	505:78	4	malloc
arg	505:48	505:78	5	wpng_info.height*sizeof(uch*)
water	505:48	0:0	6	wpng_info
op	505:57	0:0	6	.
water	505:58	0:0	6	height
op	505:64	0:0	6	*
op	505:65	0:0	6	sizeof
water	505:71	0:0	6	(
water	505:72	0:0	6	uch
op	505:76	0:0	6	*
water	505:77	0:0	6	)
water	505:79	0:0	4	;
if	506:8	511:8	4	(wpng_info . image_data == NULL || wpng_info . row_pointers == NULL)
cond	506:12	506:70	5	wpng_info . image_data == NULL || wpng_info . row_pointers == NULL
water	506:12	0:0	6	wpng_info
op	506:21	0:0	6	.
water	506:22	0:0	6	image_data
op	506:33	0:0	6	==
water	506:36	0:0	6	NULL
op	506:41	0:0	6	||
water	506:44	0:0	6	wpng_info
op	506:53	0:0	6	.
water	506:54	0:0	6	row_pointers
op	506:67	0:0	6	==
water	506:70	0:0	6	NULL
stmts	506:76	511:8	5	
water	506:76	0:0	6	{
call	507:12	507:78	6	fprintf
arg	507:20	507:26	7	stderr
water	507:20	0:0	8	stderr
arg	507:28	507:78	7	PROGNAME":  insufficient memory for image data\n"
water	507:28	0:0	8	PROGNAME
water	507:37	0:0	8	":  insufficient memory for image data\n"
water	507:79	0:0	6	;
call	508:12	508:39	6	writepng_cleanup
arg	508:29	508:39	7	&wpng_info
op	508:29	0:0	8	&
water	508:30	0:0	8	wpng_info
water	508:40	0:0	6	;
call	509:12	509:25	6	wpng_cleanup
water	509:26	0:0	6	;
call	510:12	510:18	6	exit
arg	510:17	510:18	7	5
water	510:17	0:0	8	5
water	510:19	0:0	6	;
water	511:8	0:0	6	}
for	512:8	513:73	4	(i = 0 ;i < wpng_info . height;++ i)
forinit	512:13	512:18	5	i = 0 ;
water	512:13	0:0	6	i
op	512:15	0:0	6	=
water	512:17	0:0	6	0
water	512:18	0:0	6	;
cond	512:21	512:35	5	i < wpng_info . height
water	512:21	0:0	6	i
op	512:23	0:0	6	<
water	512:25	0:0	6	wpng_info
op	512:34	0:0	6	.
water	512:35	0:0	6	height
forexpr	512:44	512:46	5	++ i
op	512:44	0:0	6	++
water	512:46	0:0	6	i
stmts	513:12	513:73	5	
water	513:12	0:0	6	wpng_info
op	513:21	0:0	6	.
water	513:22	0:0	6	row_pointers
op	513:34	0:0	6	[
water	513:35	0:0	6	i
op	513:36	0:0	6	]
op	513:38	0:0	6	=
water	513:40	0:0	6	wpng_info
op	513:49	0:0	6	.
water	513:50	0:0	6	image_data
op	513:61	0:0	6	+
water	513:63	0:0	6	i
op	513:64	0:0	6	*
water	513:65	0:0	6	rowbytes
water	513:73	0:0	6	;
water	514:8	0:0	4	bytes
op	514:14	0:0	4	=
call	514:16	514:76	4	fread
arg	514:22	514:42	5	wpng_info.image_data
water	514:22	0:0	6	wpng_info
op	514:31	0:0	6	.
water	514:32	0:0	6	image_data
arg	514:44	514:45	5	1
water	514:44	0:0	6	1
arg	514:47	514:58	5	image_bytes
water	514:47	0:0	6	image_bytes
arg	514:60	514:76	5	wpng_info.infile
water	514:60	0:0	6	wpng_info
op	514:69	0:0	6	.
water	514:70	0:0	6	infile
water	514:77	0:0	4	;
if	515:8	519:8	4	(bytes != image_bytes)
cond	515:12	515:21	5	bytes != image_bytes
water	515:12	0:0	6	bytes
op	515:18	0:0	6	!=
water	515:21	0:0	6	image_bytes
stmts	515:34	519:8	5	
water	515:34	0:0	6	{
call	516:12	517:32	6	fprintf
arg	516:20	516:26	7	stderr
water	516:20	0:0	8	stderr
arg	516:28	516:77	7	PROGNAME":  expected %lu bytes, got %lu bytes\n"
water	516:28	0:0	8	PROGNAME
water	516:37	0:0	8	":  expected %lu bytes, got %lu bytes\n"
arg	517:14	517:25	7	image_bytes
water	517:14	0:0	8	image_bytes
arg	517:27	517:32	7	bytes
water	517:27	0:0	8	bytes
water	517:33	0:0	6	;
call	518:12	518:53	6	fprintf
arg	518:20	518:26	7	stderr
water	518:20	0:0	8	stderr
arg	518:28	518:53	7	"  (continuing anyway)\n"
water	518:28	0:0	8	"  (continuing anyway)\n"
water	518:54	0:0	6	;
water	519:8	0:0	6	}
if	520:8	526:8	4	(writepng_encode_image (& wpng_info ) != 0)
cond	520:12	520:49	5	writepng_encode_image (& wpng_info ) != 0
call	520:12	520:44	6	writepng_encode_image
arg	520:34	520:44	7	&wpng_info
op	520:34	0:0	8	&
water	520:35	0:0	8	wpng_info
op	520:46	0:0	6	!=
water	520:49	0:0	6	0
stmts	520:52	526:8	5	
water	520:52	0:0	6	{
call	521:12	522:70	6	fprintf
arg	521:20	521:26	7	stderr
water	521:20	0:0	8	stderr
arg	521:28	522:70	7	PROGNAME":  libpng problem (longjmp) while writing image data\n"
water	521:28	0:0	8	PROGNAME
water	522:14	0:0	8	":  libpng problem (longjmp) while writing image data\n"
water	522:71	0:0	6	;
call	523:12	523:39	6	writepng_cleanup
arg	523:29	523:39	7	&wpng_info
op	523:29	0:0	8	&
water	523:30	0:0	8	wpng_info
water	523:40	0:0	6	;
call	524:12	524:25	6	wpng_cleanup
water	524:26	0:0	6	;
call	525:12	525:18	6	exit
arg	525:17	525:18	7	2
water	525:17	0:0	8	2
water	525:19	0:0	6	;
water	526:8	0:0	6	}
water	527:4	0:0	4	}
else	527:6	566:4	2
stmts	527:12	566:4	3	
water	527:12	0:0	4	{
decl	528:8	528:14	4	long	j
decl	529:8	529:17	4	ulg	bytes
water	530:8	0:0	4	wpng_info
op	530:17	0:0	4	.
water	530:18	0:0	4	image_data
op	530:29	0:0	4	=
water	530:31	0:0	4	(
water	530:32	0:0	4	uch
op	530:36	0:0	4	*
water	530:37	0:0	4	)
call	530:38	530:53	4	malloc
arg	530:45	530:53	5	rowbytes
water	530:45	0:0	6	rowbytes
water	530:54	0:0	4	;
if	531:8	536:8	4	(wpng_info . image_data == NULL)
cond	531:12	531:36	5	wpng_info . image_data == NULL
water	531:12	0:0	6	wpng_info
op	531:21	0:0	6	.
water	531:22	0:0	6	image_data
op	531:33	0:0	6	==
water	531:36	0:0	6	NULL
stmts	531:42	536:8	5	
water	531:42	0:0	6	{
call	532:12	532:76	6	fprintf
arg	532:20	532:26	7	stderr
water	532:20	0:0	8	stderr
arg	532:28	532:76	7	PROGNAME":  insufficient memory for row data\n"
water	532:28	0:0	8	PROGNAME
water	532:37	0:0	8	":  insufficient memory for row data\n"
water	532:77	0:0	6	;
call	533:12	533:39	6	writepng_cleanup
arg	533:29	533:39	7	&wpng_info
op	533:29	0:0	8	&
water	533:30	0:0	8	wpng_info
water	533:40	0:0	6	;
call	534:12	534:25	6	wpng_cleanup
water	534:26	0:0	6	;
call	535:12	535:18	6	exit
arg	535:17	535:18	7	5
water	535:17	0:0	8	5
water	535:19	0:0	6	;
water	536:8	0:0	6	}
water	537:8	0:0	4	error
op	537:14	0:0	4	=
water	537:16	0:0	4	0
water	537:17	0:0	4	;
for	538:8	554:8	4	(j = wpng_info . height ;j > 0 L;-- j)
forinit	538:13	538:33	5	j = wpng_info . height ;
water	538:13	0:0	6	j
op	538:15	0:0	6	=
water	538:17	0:0	6	wpng_info
op	538:26	0:0	6	.
water	538:27	0:0	6	height
water	538:33	0:0	6	;
cond	538:36	538:41	5	j > 0 L
water	538:36	0:0	6	j
op	538:38	0:0	6	>
water	538:40	0:0	6	0
water	538:41	0:0	6	L
forexpr	538:45	538:47	5	-- j
op	538:45	0:0	6	--
water	538:47	0:0	6	j
stmts	538:50	554:8	5	
water	538:50	0:0	6	{
water	539:12	0:0	6	bytes
op	539:18	0:0	6	=
call	539:20	539:77	6	fread
arg	539:26	539:46	7	wpng_info.image_data
water	539:26	0:0	8	wpng_info
op	539:35	0:0	8	.
water	539:36	0:0	8	image_data
arg	539:48	539:49	7	1
water	539:48	0:0	8	1
arg	539:51	539:59	7	rowbytes
water	539:51	0:0	8	rowbytes
arg	539:61	539:77	7	wpng_info.infile
water	539:61	0:0	8	wpng_info
op	539:70	0:0	8	.
water	539:71	0:0	8	infile
water	539:78	0:0	6	;
if	540:12	546:12	6	(bytes != rowbytes)
cond	540:16	540:25	7	bytes != rowbytes
water	540:16	0:0	8	bytes
op	540:22	0:0	8	!=
water	540:25	0:0	8	rowbytes
stmts	540:35	546:12	7	
water	540:35	0:0	8	{
call	541:16	543:43	8	fprintf
arg	541:24	541:30	9	stderr
water	541:24	0:0	10	stderr
arg	541:32	542:68	9	PROGNAME":  expected %lu bytes, got %lu bytes (row %ld)\n"
water	541:32	0:0	10	PROGNAME
water	542:18	0:0	10	":  expected %lu bytes, got %lu bytes (row %ld)\n"
arg	542:70	542:78	9	rowbytes
water	542:70	0:0	10	rowbytes
arg	543:18	543:23	9	bytes
water	543:18	0:0	10	bytes
arg	543:25	543:43	9	wpng_info.height-j
water	543:25	0:0	10	wpng_info
op	543:34	0:0	10	.
water	543:35	0:0	10	height
op	543:41	0:0	10	-
water	543:42	0:0	10	j
water	543:44	0:0	8	;
op	544:16	0:0	8	++
water	544:18	0:0	8	error
water	544:23	0:0	8	;
break	545:16	545:21	8	
water	546:12	0:0	8	}
if	547:12	553:12	6	(writepng_encode_row (& wpng_info ) != 0)
cond	547:16	547:51	7	writepng_encode_row (& wpng_info ) != 0
call	547:16	547:46	8	writepng_encode_row
arg	547:36	547:46	9	&wpng_info
op	547:36	0:0	10	&
water	547:37	0:0	10	wpng_info
op	547:48	0:0	8	!=
water	547:51	0:0	8	0
stmts	547:54	553:12	7	
water	547:54	0:0	8	{
call	548:16	550:36	8	fprintf
arg	548:24	548:30	9	stderr
water	548:24	0:0	10	stderr
arg	548:32	549:71	9	PROGNAME":  libpng problem (longjmp) while writing row %ld\n"
water	548:32	0:0	10	PROGNAME
water	549:18	0:0	10	":  libpng problem (longjmp) while writing row %ld\n"
arg	550:18	550:36	9	wpng_info.height-j
water	550:18	0:0	10	wpng_info
op	550:27	0:0	10	.
water	550:28	0:0	10	height
op	550:34	0:0	10	-
water	550:35	0:0	10	j
water	550:37	0:0	8	;
op	551:16	0:0	8	++
water	551:18	0:0	8	error
water	551:23	0:0	8	;
break	552:16	552:21	8	
water	553:12	0:0	8	}
water	554:8	0:0	6	}
if	555:8	559:8	4	(error)
cond	555:12	555:12	5	error
water	555:12	0:0	6	error
stmts	555:19	559:8	5	
water	555:19	0:0	6	{
call	556:12	556:39	6	writepng_cleanup
arg	556:29	556:39	7	&wpng_info
op	556:29	0:0	8	&
water	556:30	0:0	8	wpng_info
water	556:40	0:0	6	;
call	557:12	557:25	6	wpng_cleanup
water	557:26	0:0	6	;
call	558:12	558:18	6	exit
arg	558:17	558:18	7	2
water	558:17	0:0	8	2
water	558:19	0:0	6	;
water	559:8	0:0	6	}
if	560:8	565:8	4	(writepng_encode_finish (& wpng_info ) != 0)
cond	560:12	560:50	5	writepng_encode_finish (& wpng_info ) != 0
call	560:12	560:45	6	writepng_encode_finish
arg	560:35	560:45	7	&wpng_info
op	560:35	0:0	8	&
water	560:36	0:0	8	wpng_info
op	560:47	0:0	6	!=
water	560:50	0:0	6	0
stmts	560:53	565:8	5	
water	560:53	0:0	6	{
call	561:12	561:70	6	fprintf
arg	561:20	561:26	7	stderr
water	561:20	0:0	8	stderr
arg	561:28	561:70	7	PROGNAME":  error on final libpng call\n"
water	561:28	0:0	8	PROGNAME
water	561:37	0:0	8	":  error on final libpng call\n"
water	561:71	0:0	6	;
call	562:12	562:39	6	writepng_cleanup
arg	562:29	562:39	7	&wpng_info
op	562:29	0:0	8	&
water	562:30	0:0	8	wpng_info
water	562:40	0:0	6	;
call	563:12	563:25	6	wpng_cleanup
water	563:26	0:0	6	;
call	564:12	564:18	6	exit
arg	564:17	564:18	7	2
water	564:17	0:0	8	2
water	564:19	0:0	6	;
water	565:8	0:0	6	}
water	566:4	0:0	4	}
call	568:4	568:29	2	fprintf
arg	568:12	568:18	3	stderr
water	568:12	0:0	4	stderr
arg	568:20	568:29	3	"Done.\n"
water	568:20	0:0	4	"Done.\n"
water	568:30	0:0	2	;
call	569:4	569:17	2	fflush
arg	569:11	569:17	3	stderr
water	569:11	0:0	4	stderr
water	569:18	0:0	2	;
call	570:4	570:31	2	writepng_cleanup
arg	570:21	570:31	3	&wpng_info
op	570:21	0:0	4	&
water	570:22	0:0	4	wpng_info
water	570:32	0:0	2	;
call	571:4	571:17	2	wpng_cleanup
water	571:18	0:0	2	;
return	572:4	572:12	2	0
water	572:11	0:0	3	0
