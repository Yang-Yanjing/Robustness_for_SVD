func	2:0	207:0	0	static int	rpng2_x_create_window
params	2:32	0:0	1	
param	2:33	2:37	2	void
stmnts	0:0	206:12	1	
decl	4:4	4:36	2	ulg	bg_red
op	4:17	0:0	2	=
water	4:19	0:0	2	rpng2_info
op	4:29	0:0	2	.
water	4:30	0:0	2	bg_red
decl	5:4	5:38	2	ulg	bg_green
op	5:17	0:0	2	=
water	5:19	0:0	2	rpng2_info
op	5:29	0:0	2	.
water	5:30	0:0	2	bg_green
decl	6:4	6:37	2	ulg	bg_blue
op	6:17	0:0	2	=
water	6:19	0:0	2	rpng2_info
op	6:29	0:0	2	.
water	6:30	0:0	2	bg_blue
decl	7:4	7:21	2	ulg	bg_pixel
op	7:17	0:0	2	=
water	7:19	0:0	2	0
water	7:20	0:0	2	L
decl	8:4	8:16	2	ulg	attrmask
decl	9:4	9:29	2	int	need_colormap
op	9:22	0:0	2	=
water	9:24	0:0	2	FALSE
decl	10:4	10:19	2	int	screen
water	10:14	0:0	2	,
decl	10:4	10:19	2	int	pad
decl	11:4	11:14	2	uch	*xdata
decl	12:4	12:15	2	Window	root
decl	13:4	13:12	2	XEvent	e
decl	14:4	14:22	2	XGCValues	gcvalues
decl	15:4	15:29	2	XSetWindowAttributes	attr
decl	16:4	16:56	2	XTextProperty	windowName
water	16:28	0:0	2	,
decl	16:4	16:56	2	XTextProperty	*pWindowName
op	16:43	0:0	2	=
op	16:45	0:0	2	&
water	16:46	0:0	2	windowName
decl	17:4	17:50	2	XTextProperty	iconName
water	17:26	0:0	2	,
decl	17:4	17:50	2	XTextProperty	*pIconName
op	17:39	0:0	2	=
op	17:41	0:0	2	&
water	17:42	0:0	2	iconName
decl	18:4	18:27	2	XVisualInfo	visual_info
decl	19:4	19:26	2	XSizeHints	*size_hints
decl	20:4	20:22	2	XWMHints	*wm_hints
decl	21:4	21:27	2	XClassHint	*class_hints
call	22:4	22:57	2	Trace
arg	22:10	22:57	3	(stderr,"beginning rpng2_x_create_window()\n")
water	22:10	0:0	4	(
water	22:11	0:0	4	stderr
water	22:17	0:0	4	,
water	22:19	0:0	4	"beginning rpng2_x_create_window()\n"
water	22:56	0:0	4	)
water	23:4	0:0	2	screen
op	23:11	0:0	2	=
call	23:13	23:34	2	DefaultScreen
arg	23:27	23:34	3	display
water	23:27	0:0	4	display
water	23:35	0:0	2	;
water	24:4	0:0	2	depth
op	24:10	0:0	2	=
call	24:12	24:41	2	DisplayPlanes
arg	24:26	24:33	3	display
water	24:26	0:0	4	display
arg	24:35	24:41	3	screen
water	24:35	0:0	4	screen
water	24:42	0:0	2	;
water	25:4	0:0	2	root
op	25:9	0:0	2	=
call	25:11	25:37	2	RootWindow
arg	25:22	25:29	3	display
water	25:22	0:0	4	display
arg	25:31	25:37	3	screen
water	25:31	0:0	4	screen
water	25:38	0:0	2	;
call	27:4	27:30	2	XSynchronize
arg	27:17	27:24	3	display
water	27:17	0:0	4	display
arg	27:26	27:30	3	True
water	27:26	0:0	4	True
water	27:31	0:0	2	;
if	29:4	55:4	2	(depth != 16 && depth != 24 && depth != 32)
cond	29:8	29:47	3	depth != 16 && depth != 24 && depth != 32
water	29:8	0:0	4	depth
op	29:14	0:0	4	!=
water	29:17	0:0	4	16
op	29:20	0:0	4	&&
water	29:23	0:0	4	depth
op	29:29	0:0	4	!=
water	29:32	0:0	4	24
op	29:35	0:0	4	&&
water	29:38	0:0	4	depth
op	29:44	0:0	4	!=
water	29:47	0:0	4	32
stmts	29:51	55:4	3	
water	29:51	0:0	4	{
decl	30:8	30:31	4	int	visuals_matched
op	30:28	0:0	4	=
water	30:30	0:0	4	0
call	31:8	32:16	4	Trace
arg	31:14	32:16	5	(stderr,"default depth is %d:  checking other visuals\n",depth)
water	31:14	0:0	6	(
water	31:15	0:0	6	stderr
water	31:21	0:0	6	,
water	31:23	0:0	6	"default depth is %d:  checking other visuals\n"
water	31:71	0:0	6	,
water	32:10	0:0	6	depth
water	32:15	0:0	6	)
water	34:8	0:0	4	visual_info
op	34:19	0:0	4	.
water	34:20	0:0	4	screen
op	34:27	0:0	4	=
water	34:29	0:0	4	screen
water	34:35	0:0	4	;
water	35:8	0:0	4	visual_info
op	35:19	0:0	4	.
water	35:20	0:0	4	depth
op	35:26	0:0	4	=
water	35:28	0:0	4	24
water	35:30	0:0	4	;
water	36:8	0:0	4	visual_list
op	36:20	0:0	4	=
call	36:22	37:76	4	XGetVisualInfo
arg	36:37	36:44	5	display
water	36:37	0:0	6	display
arg	37:10	37:44	5	VisualScreenMask|VisualDepthMask
water	37:10	0:0	6	VisualScreenMask
op	37:27	0:0	6	|
water	37:29	0:0	6	VisualDepthMask
arg	37:46	37:58	5	&visual_info
op	37:46	0:0	6	&
water	37:47	0:0	6	visual_info
arg	37:60	37:76	5	&visuals_matched
op	37:60	0:0	6	&
water	37:61	0:0	6	visuals_matched
water	37:77	0:0	4	;
if	38:8	43:8	4	(visuals_matched == 0)
cond	38:12	38:31	5	visuals_matched == 0
water	38:12	0:0	6	visuals_matched
op	38:28	0:0	6	==
water	38:31	0:0	6	0
stmts	38:34	43:8	5	
water	38:34	0:0	6	{
call	40:12	41:46	6	fprintf
arg	40:20	40:26	7	stderr
water	40:20	0:0	8	stderr
arg	40:28	41:39	7	"default screen depth %d not supported, and no"" 24-bit visuals found\n"
water	40:28	0:0	8	"default screen depth %d not supported, and no"
water	41:14	0:0	8	" 24-bit visuals found\n"
arg	41:41	41:46	7	depth
water	41:41	0:0	8	depth
water	41:47	0:0	6	;
return	42:12	42:20	6	2
water	42:19	0:0	7	2
water	43:8	0:0	6	}
call	44:8	45:26	4	Trace
arg	44:14	45:26	5	(stderr,"XGetVisualInfo() returned %d 24-bit visuals\n",visuals_matched)
water	44:14	0:0	6	(
water	44:15	0:0	6	stderr
water	44:21	0:0	6	,
water	44:23	0:0	6	"XGetVisualInfo() returned %d 24-bit visuals\n"
water	44:70	0:0	6	,
water	45:10	0:0	6	visuals_matched
water	45:25	0:0	6	)
water	46:8	0:0	4	visual
op	46:15	0:0	4	=
water	46:17	0:0	4	visual_list
op	46:28	0:0	4	[
water	46:29	0:0	4	0
op	46:30	0:0	4	]
op	46:31	0:0	4	.
water	46:32	0:0	4	visual
water	46:38	0:0	4	;
water	47:8	0:0	4	depth
op	47:14	0:0	4	=
water	47:16	0:0	4	visual_list
op	47:27	0:0	4	[
water	47:28	0:0	4	0
op	47:29	0:0	4	]
op	47:30	0:0	4	.
water	47:31	0:0	4	depth
water	47:36	0:0	4	;
water	53:8	0:0	4	have_nondefault_visual
op	53:31	0:0	4	=
water	53:33	0:0	4	TRUE
water	53:37	0:0	4	;
water	54:8	0:0	4	need_colormap
op	54:22	0:0	4	=
water	54:24	0:0	4	TRUE
water	54:28	0:0	4	;
water	55:4	0:0	4	}
else	55:6	58:4	2
stmts	55:11	58:4	3	
water	55:11	0:0	4	{
call	56:8	56:72	4	XMatchVisualInfo
arg	56:25	56:32	5	display
water	56:25	0:0	6	display
arg	56:34	56:40	5	screen
water	56:34	0:0	6	screen
arg	56:42	56:47	5	depth
water	56:42	0:0	6	depth
arg	56:49	56:58	5	TrueColor
water	56:49	0:0	6	TrueColor
arg	56:60	56:72	5	&visual_info
op	56:60	0:0	6	&
water	56:61	0:0	6	visual_info
water	56:73	0:0	4	;
water	57:8	0:0	4	visual
op	57:15	0:0	4	=
water	57:17	0:0	4	visual_info
op	57:28	0:0	4	.
water	57:29	0:0	4	visual
water	57:35	0:0	4	;
water	58:4	0:0	4	}
water	59:4	0:0	2	RMask
op	59:10	0:0	2	=
water	59:12	0:0	2	visual
op	59:18	0:0	2	->
water	59:20	0:0	2	red_mask
water	59:28	0:0	2	;
water	60:4	0:0	2	GMask
op	60:10	0:0	2	=
water	60:12	0:0	2	visual
op	60:18	0:0	2	->
water	60:20	0:0	2	green_mask
water	60:30	0:0	2	;
water	61:4	0:0	2	BMask
op	61:10	0:0	2	=
water	61:12	0:0	2	visual
op	61:18	0:0	2	->
water	61:20	0:0	2	blue_mask
water	61:29	0:0	2	;
if	63:4	72:4	2	(depth == 8 || need_colormap)
cond	63:8	63:22	3	depth == 8 || need_colormap
water	63:8	0:0	4	depth
op	63:14	0:0	4	==
water	63:17	0:0	4	8
op	63:19	0:0	4	||
water	63:22	0:0	4	need_colormap
stmts	63:37	72:4	3	
water	63:37	0:0	4	{
water	64:8	0:0	4	colormap
op	64:17	0:0	4	=
call	64:19	64:67	4	XCreateColormap
arg	64:35	64:42	5	display
water	64:35	0:0	6	display
arg	64:44	64:48	5	root
water	64:44	0:0	6	root
arg	64:50	64:56	5	visual
water	64:50	0:0	6	visual
arg	64:58	64:67	5	AllocNone
water	64:58	0:0	6	AllocNone
water	64:68	0:0	4	;
if	65:8	68:8	4	(! colormap)
cond	65:12	65:13	5	! colormap
op	65:12	0:0	6	!
water	65:13	0:0	6	colormap
stmts	65:23	68:8	5	
water	65:23	0:0	6	{
call	66:12	66:56	6	fprintf
arg	66:20	66:26	7	stderr
water	66:20	0:0	8	stderr
arg	66:28	66:56	7	"XCreateColormap() failed\n"
water	66:28	0:0	8	"XCreateColormap() failed\n"
water	66:57	0:0	6	;
return	67:12	67:20	6	2
water	67:19	0:0	7	2
water	68:8	0:0	6	}
water	69:8	0:0	4	have_colormap
op	69:22	0:0	4	=
water	69:24	0:0	4	TRUE
water	69:28	0:0	4	;
if	70:8	71:28	4	(depth == 8)
cond	70:12	70:21	5	depth == 8
water	70:12	0:0	6	depth
op	70:18	0:0	6	==
water	70:21	0:0	6	8
stmts	71:12	71:28	5	
water	71:12	0:0	6	bg_image
op	71:21	0:0	6	=
water	71:23	0:0	6	FALSE
water	71:28	0:0	6	;
water	72:4	0:0	4	}
if	73:4	77:4	2	(depth == 15 || depth == 16)
cond	73:8	73:32	3	depth == 15 || depth == 16
water	73:8	0:0	4	depth
op	73:14	0:0	4	==
water	73:17	0:0	4	15
op	73:20	0:0	4	||
water	73:23	0:0	4	depth
op	73:29	0:0	4	==
water	73:32	0:0	4	16
stmts	73:36	77:4	3	
water	73:36	0:0	4	{
water	74:8	0:0	4	RShift
op	74:15	0:0	4	=
water	74:17	0:0	4	15
op	74:20	0:0	4	-
call	74:22	74:39	4	rpng2_x_msb
arg	74:34	74:39	5	RMask
water	74:34	0:0	6	RMask
water	74:40	0:0	4	;
water	75:8	0:0	4	GShift
op	75:15	0:0	4	=
water	75:17	0:0	4	15
op	75:20	0:0	4	-
call	75:22	75:39	4	rpng2_x_msb
arg	75:34	75:39	5	GMask
water	75:34	0:0	6	GMask
water	75:40	0:0	4	;
water	76:8	0:0	4	BShift
op	76:15	0:0	4	=
water	76:17	0:0	4	15
op	76:20	0:0	4	-
call	76:22	76:39	4	rpng2_x_msb
arg	76:34	76:39	5	BMask
water	76:34	0:0	6	BMask
water	76:40	0:0	4	;
water	77:4	0:0	4	}
else	77:6	81:4	2
stmts	77:11	81:4	3	
if	77:11	81:4	4	(depth > 16)
cond	77:15	77:23	5	depth > 16
water	77:15	0:0	6	depth
op	77:21	0:0	6	>
water	77:23	0:0	6	16
stmts	77:27	81:4	5	
water	77:27	0:0	6	{
water	78:8	0:0	6	RShift
op	78:15	0:0	6	=
call	78:17	78:34	6	rpng2_x_msb
arg	78:29	78:34	7	RMask
water	78:29	0:0	8	RMask
op	78:36	0:0	6	-
water	78:38	0:0	6	7
water	78:39	0:0	6	;
water	79:8	0:0	6	GShift
op	79:15	0:0	6	=
call	79:17	79:34	6	rpng2_x_msb
arg	79:29	79:34	7	GMask
water	79:29	0:0	8	GMask
op	79:36	0:0	6	-
water	79:38	0:0	6	7
water	79:39	0:0	6	;
water	80:8	0:0	6	BShift
op	80:15	0:0	6	=
call	80:17	80:34	6	rpng2_x_msb
arg	80:29	80:34	7	BMask
water	80:29	0:0	8	BMask
op	80:36	0:0	6	-
water	80:38	0:0	6	7
water	80:39	0:0	6	;
water	81:4	0:0	6	}
if	82:4	85:4	2	(depth >= 15 && ( RShift < 0 || GShift < 0 || BShift < 0 ))
cond	82:8	82:62	3	depth >= 15 && ( RShift < 0 || GShift < 0 || BShift < 0 )
water	82:8	0:0	4	depth
op	82:14	0:0	4	>=
water	82:17	0:0	4	15
op	82:20	0:0	4	&&
water	82:23	0:0	4	(
water	82:24	0:0	4	RShift
op	82:31	0:0	4	<
water	82:33	0:0	4	0
op	82:35	0:0	4	||
water	82:38	0:0	4	GShift
op	82:45	0:0	4	<
water	82:47	0:0	4	0
op	82:49	0:0	4	||
water	82:52	0:0	4	BShift
op	82:59	0:0	4	<
water	82:61	0:0	4	0
water	82:62	0:0	4	)
stmts	82:65	85:4	3	
water	82:65	0:0	4	{
call	83:8	83:77	4	fprintf
arg	83:16	83:22	5	stderr
water	83:16	0:0	6	stderr
arg	83:24	83:77	5	"rpng2 internal logic error:  negative X shift(s)!\n"
water	83:24	0:0	6	"rpng2 internal logic error:  negative X shift(s)!\n"
water	83:78	0:0	4	;
return	84:8	84:16	4	2
water	84:15	0:0	5	2
water	85:4	0:0	4	}
water	89:4	0:0	2	attr
op	89:8	0:0	2	.
water	89:9	0:0	2	backing_store
op	89:23	0:0	2	=
water	89:25	0:0	2	Always
water	89:31	0:0	2	;
water	90:4	0:0	2	attr
op	90:8	0:0	2	.
water	90:9	0:0	2	event_mask
op	90:20	0:0	2	=
water	90:22	0:0	2	ExposureMask
op	90:35	0:0	2	|
water	90:37	0:0	2	KeyPressMask
op	90:50	0:0	2	|
water	90:52	0:0	2	ButtonPressMask
water	90:67	0:0	2	;
water	91:4	0:0	2	attrmask
op	91:13	0:0	2	=
water	91:15	0:0	2	CWBackingStore
op	91:30	0:0	2	|
water	91:32	0:0	2	CWEventMask
water	91:43	0:0	2	;
if	92:4	97:4	2	(have_nondefault_visual)
cond	92:8	92:8	3	have_nondefault_visual
water	92:8	0:0	4	have_nondefault_visual
stmts	92:32	97:4	3	
water	92:32	0:0	4	{
water	93:8	0:0	4	attr
op	93:12	0:0	4	.
water	93:13	0:0	4	colormap
op	93:22	0:0	4	=
water	93:24	0:0	4	colormap
water	93:32	0:0	4	;
water	94:8	0:0	4	attr
op	94:12	0:0	4	.
water	94:13	0:0	4	background_pixel
op	94:30	0:0	4	=
water	94:32	0:0	4	0
water	94:33	0:0	4	;
water	95:8	0:0	4	attr
op	95:12	0:0	4	.
water	95:13	0:0	4	border_pixel
op	95:26	0:0	4	=
water	95:28	0:0	4	1
water	95:29	0:0	4	;
water	96:8	0:0	4	attrmask
op	96:17	0:0	4	|=
water	96:20	0:0	4	CWColormap
op	96:31	0:0	4	|
water	96:33	0:0	4	CWBackPixel
op	96:45	0:0	4	|
water	96:47	0:0	4	CWBorderPixel
water	96:60	0:0	4	;
water	97:4	0:0	4	}
water	98:4	0:0	2	window
op	98:11	0:0	2	=
call	98:13	99:71	2	XCreateWindow
arg	98:27	98:34	3	display
water	98:27	0:0	4	display
arg	98:36	98:40	3	root
water	98:36	0:0	4	root
arg	98:42	98:43	3	0
water	98:42	0:0	4	0
arg	98:45	98:46	3	0
water	98:45	0:0	4	0
arg	98:48	98:64	3	rpng2_info.width
water	98:48	0:0	4	rpng2_info
op	98:58	0:0	4	.
water	98:59	0:0	4	width
arg	99:6	99:23	3	rpng2_info.height
water	99:6	0:0	4	rpng2_info
op	99:16	0:0	4	.
water	99:17	0:0	4	height
arg	99:25	99:26	3	0
water	99:25	0:0	4	0
arg	99:28	99:33	3	depth
water	99:28	0:0	4	depth
arg	99:35	99:46	3	InputOutput
water	99:35	0:0	4	InputOutput
arg	99:48	99:54	3	visual
water	99:48	0:0	4	visual
arg	99:56	99:64	3	attrmask
water	99:56	0:0	4	attrmask
arg	99:66	99:71	3	&attr
op	99:66	0:0	4	&
water	99:67	0:0	4	attr
water	99:72	0:0	2	;
if	100:4	103:4	2	(window == None)
cond	100:8	100:18	3	window == None
water	100:8	0:0	4	window
op	100:15	0:0	4	==
water	100:18	0:0	4	None
stmts	100:24	103:4	3	
water	100:24	0:0	4	{
call	101:8	101:50	4	fprintf
arg	101:16	101:22	5	stderr
water	101:16	0:0	6	stderr
arg	101:24	101:50	5	"XCreateWindow() failed\n"
water	101:24	0:0	6	"XCreateWindow() failed\n"
water	101:51	0:0	4	;
return	102:8	102:16	4	2
water	102:15	0:0	5	2
water	103:4	0:0	4	}
else	103:6	104:26	2
stmts	104:8	104:26	3	
water	104:8	0:0	4	have_window
op	104:20	0:0	4	=
water	104:22	0:0	4	TRUE
water	104:26	0:0	4	;
if	105:4	106:53	2	(depth == 8)
cond	105:8	105:17	3	depth == 8
water	105:8	0:0	4	depth
op	105:14	0:0	4	==
water	105:17	0:0	4	8
stmts	106:8	106:53	3	
call	106:8	106:52	4	XSetWindowColormap
arg	106:27	106:34	5	display
water	106:27	0:0	6	display
arg	106:36	106:42	5	window
water	106:36	0:0	6	window
arg	106:44	106:52	5	colormap
water	106:44	0:0	6	colormap
water	106:53	0:0	4	;
if	107:4	108:26	2	(!XStringListToTextProperty (& window_name ,1 ,pWindowName ))
cond	107:8	107:63	3	!XStringListToTextProperty (& window_name ,1 ,pWindowName )
op	107:8	0:0	4	!
call	107:9	107:63	4	XStringListToTextProperty
arg	107:35	107:47	5	&window_name
op	107:35	0:0	6	&
water	107:36	0:0	6	window_name
arg	107:49	107:50	5	1
water	107:49	0:0	6	1
arg	107:52	107:63	5	pWindowName
water	107:52	0:0	6	pWindowName
stmts	108:8	108:26	3	
water	108:8	0:0	4	pWindowName
op	108:20	0:0	4	=
water	108:22	0:0	4	NULL
water	108:26	0:0	4	;
if	109:4	110:24	2	(!XStringListToTextProperty (& icon_name ,1 ,pIconName ))
cond	109:8	109:59	3	!XStringListToTextProperty (& icon_name ,1 ,pIconName )
op	109:8	0:0	4	!
call	109:9	109:59	4	XStringListToTextProperty
arg	109:35	109:45	5	&icon_name
op	109:35	0:0	6	&
water	109:36	0:0	6	icon_name
arg	109:47	109:48	5	1
water	109:47	0:0	6	1
arg	109:50	109:59	5	pIconName
water	109:50	0:0	6	pIconName
stmts	110:8	110:24	3	
water	110:8	0:0	4	pIconName
op	110:18	0:0	4	=
water	110:20	0:0	4	NULL
water	110:24	0:0	4	;
if	112:4	118:4	2	(( size_hints =XAllocSizeHints ( ) ) != NULL)
cond	112:8	112:44	3	( size_hints =XAllocSizeHints ( ) ) != NULL
water	112:8	0:0	4	(
water	112:9	0:0	4	size_hints
op	112:20	0:0	4	=
call	112:22	112:38	4	XAllocSizeHints
water	112:39	0:0	4	)
op	112:41	0:0	4	!=
water	112:44	0:0	4	NULL
stmts	112:50	118:4	3	
water	112:50	0:0	4	{
water	114:8	0:0	4	size_hints
op	114:18	0:0	4	->
water	114:20	0:0	4	flags
op	114:26	0:0	4	=
water	114:28	0:0	4	PMinSize
op	114:37	0:0	4	|
water	114:39	0:0	4	PMaxSize
water	114:47	0:0	4	;
water	115:8	0:0	4	size_hints
op	115:18	0:0	4	->
water	115:20	0:0	4	min_width
op	115:30	0:0	4	=
water	115:32	0:0	4	size_hints
op	115:42	0:0	4	->
water	115:44	0:0	4	max_width
op	115:54	0:0	4	=
water	115:56	0:0	4	(
water	115:57	0:0	4	int
water	115:60	0:0	4	)
water	115:61	0:0	4	rpng2_info
op	115:71	0:0	4	.
water	115:72	0:0	4	width
water	115:77	0:0	4	;
water	116:8	0:0	4	size_hints
op	116:18	0:0	4	->
water	116:20	0:0	4	min_height
op	116:31	0:0	4	=
water	116:33	0:0	4	size_hints
op	116:43	0:0	4	->
water	116:45	0:0	4	max_height
op	116:56	0:0	4	=
water	117:10	0:0	4	(
water	117:11	0:0	4	int
water	117:14	0:0	4	)
water	117:15	0:0	4	rpng2_info
op	117:25	0:0	4	.
water	117:26	0:0	4	height
water	117:32	0:0	4	;
water	118:4	0:0	4	}
if	119:4	124:4	2	(( wm_hints =XAllocWMHints ( ) ) != NULL)
cond	119:8	119:40	3	( wm_hints =XAllocWMHints ( ) ) != NULL
water	119:8	0:0	4	(
water	119:9	0:0	4	wm_hints
op	119:18	0:0	4	=
call	119:20	119:34	4	XAllocWMHints
water	119:35	0:0	4	)
op	119:37	0:0	4	!=
water	119:40	0:0	4	NULL
stmts	119:46	124:4	3	
water	119:46	0:0	4	{
water	120:8	0:0	4	wm_hints
op	120:16	0:0	4	->
water	120:18	0:0	4	initial_state
op	120:32	0:0	4	=
water	120:34	0:0	4	NormalState
water	120:45	0:0	4	;
water	121:8	0:0	4	wm_hints
op	121:16	0:0	4	->
water	121:18	0:0	4	input
op	121:24	0:0	4	=
water	121:26	0:0	4	True
water	121:30	0:0	4	;
water	123:8	0:0	4	wm_hints
op	123:16	0:0	4	->
water	123:18	0:0	4	flags
op	123:24	0:0	4	=
water	123:26	0:0	4	StateHint
op	123:36	0:0	4	|
water	123:38	0:0	4	InputHint
water	123:50	0:0	4	;
water	124:4	0:0	4	}
if	125:4	128:4	2	(( class_hints =XAllocClassHint ( ) ) != NULL)
cond	125:8	125:45	3	( class_hints =XAllocClassHint ( ) ) != NULL
water	125:8	0:0	4	(
water	125:9	0:0	4	class_hints
op	125:21	0:0	4	=
call	125:23	125:39	4	XAllocClassHint
water	125:40	0:0	4	)
op	125:42	0:0	4	!=
water	125:45	0:0	4	NULL
stmts	125:51	128:4	3	
water	125:51	0:0	4	{
water	126:8	0:0	4	class_hints
op	126:19	0:0	4	->
water	126:21	0:0	4	res_name
op	126:30	0:0	4	=
water	126:32	0:0	4	res_name
water	126:40	0:0	4	;
water	127:8	0:0	4	class_hints
op	127:19	0:0	4	->
water	127:21	0:0	4	res_class
op	127:31	0:0	4	=
water	127:33	0:0	4	res_class
water	127:42	0:0	4	;
water	128:4	0:0	4	}
call	129:4	130:39	2	XSetWMProperties
arg	129:21	129:28	3	display
water	129:21	0:0	4	display
arg	129:30	129:36	3	window
water	129:30	0:0	4	window
arg	129:38	129:49	3	pWindowName
water	129:38	0:0	4	pWindowName
arg	129:51	129:60	3	pIconName
water	129:51	0:0	4	pIconName
arg	129:62	129:66	3	NULL
water	129:62	0:0	4	NULL
arg	129:68	129:69	3	0
water	129:68	0:0	4	0
arg	130:6	130:16	3	size_hints
water	130:6	0:0	4	size_hints
arg	130:18	130:26	3	wm_hints
water	130:18	0:0	4	wm_hints
arg	130:28	130:39	3	class_hints
water	130:28	0:0	4	class_hints
water	130:40	0:0	2	;
if	132:4	133:32	2	(pWindowName)
cond	132:8	132:8	3	pWindowName
water	132:8	0:0	4	pWindowName
stmts	133:7	133:32	3	
call	133:7	133:31	4	XFree
arg	133:13	133:31	5	pWindowName->value
water	133:13	0:0	6	pWindowName
op	133:24	0:0	6	->
water	133:26	0:0	6	value
water	133:32	0:0	4	;
if	134:4	135:30	2	(pIconName)
cond	134:8	134:8	3	pIconName
water	134:8	0:0	4	pIconName
stmts	135:7	135:30	3	
call	135:7	135:29	4	XFree
arg	135:13	135:29	5	pIconName->value
water	135:13	0:0	6	pIconName
op	135:22	0:0	6	->
water	135:24	0:0	6	value
water	135:30	0:0	4	;
if	136:4	137:25	2	(size_hints)
cond	136:8	136:8	3	size_hints
water	136:8	0:0	4	size_hints
stmts	137:8	137:25	3	
call	137:8	137:24	4	XFree
arg	137:14	137:24	5	size_hints
water	137:14	0:0	6	size_hints
water	137:25	0:0	4	;
if	138:4	139:22	2	(wm_hints)
cond	138:8	138:8	3	wm_hints
water	138:8	0:0	4	wm_hints
stmts	139:7	139:22	3	
call	139:7	139:21	4	XFree
arg	139:13	139:21	5	wm_hints
water	139:13	0:0	6	wm_hints
water	139:22	0:0	4	;
if	140:4	141:25	2	(class_hints)
cond	140:8	140:8	3	class_hints
water	140:8	0:0	4	class_hints
stmts	141:7	141:25	3	
call	141:7	141:24	4	XFree
arg	141:13	141:24	5	class_hints
water	141:13	0:0	6	class_hints
water	141:25	0:0	4	;
call	142:4	142:30	2	XMapWindow
arg	142:15	142:22	3	display
water	142:15	0:0	4	display
arg	142:24	142:30	3	window
water	142:24	0:0	4	window
water	142:31	0:0	2	;
water	143:4	0:0	2	gc
op	143:7	0:0	2	=
call	143:9	143:48	2	XCreateGC
arg	143:19	143:26	3	display
water	143:19	0:0	4	display
arg	143:28	143:34	3	window
water	143:28	0:0	4	window
arg	143:36	143:37	3	0
water	143:36	0:0	4	0
arg	143:39	143:48	3	&gcvalues
op	143:39	0:0	4	&
water	143:40	0:0	4	gcvalues
water	143:49	0:0	2	;
water	144:4	0:0	2	have_gc
op	144:12	0:0	2	=
water	144:14	0:0	2	TRUE
water	144:18	0:0	2	;
if	148:4	151:4	2	(depth == 24 || depth == 32)
cond	148:8	148:32	3	depth == 24 || depth == 32
water	148:8	0:0	4	depth
op	148:14	0:0	4	==
water	148:17	0:0	4	24
op	148:20	0:0	4	||
water	148:23	0:0	4	depth
op	148:29	0:0	4	==
water	148:32	0:0	4	32
stmts	148:36	151:4	3	
water	148:36	0:0	4	{
water	149:8	0:0	4	xdata
op	149:14	0:0	4	=
water	149:16	0:0	4	(
water	149:17	0:0	4	uch
op	149:21	0:0	4	*
water	149:22	0:0	4	)
call	149:23	149:66	4	malloc
arg	149:30	149:66	5	4*rpng2_info.width*rpng2_info.height
water	149:30	0:0	6	4
op	149:31	0:0	6	*
water	149:32	0:0	6	rpng2_info
op	149:42	0:0	6	.
water	149:43	0:0	6	width
op	149:48	0:0	6	*
water	149:49	0:0	6	rpng2_info
op	149:59	0:0	6	.
water	149:60	0:0	6	height
water	149:67	0:0	4	;
water	150:8	0:0	4	pad
op	150:12	0:0	4	=
water	150:14	0:0	4	32
water	150:16	0:0	4	;
water	151:4	0:0	4	}
else	151:6	154:4	2
stmts	151:11	154:4	3	
if	151:11	154:4	4	(depth == 16)
cond	151:15	151:24	5	depth == 16
water	151:15	0:0	6	depth
op	151:21	0:0	6	==
water	151:24	0:0	6	16
stmts	151:28	154:4	5	
water	151:28	0:0	6	{
water	152:8	0:0	6	xdata
op	152:14	0:0	6	=
water	152:16	0:0	6	(
water	152:17	0:0	6	uch
op	152:21	0:0	6	*
water	152:22	0:0	6	)
call	152:23	152:66	6	malloc
arg	152:30	152:66	7	2*rpng2_info.width*rpng2_info.height
water	152:30	0:0	8	2
op	152:31	0:0	8	*
water	152:32	0:0	8	rpng2_info
op	152:42	0:0	8	.
water	152:43	0:0	8	width
op	152:48	0:0	8	*
water	152:49	0:0	8	rpng2_info
op	152:59	0:0	8	.
water	152:60	0:0	8	height
water	152:67	0:0	6	;
water	153:8	0:0	6	pad
op	153:12	0:0	6	=
water	153:14	0:0	6	16
water	153:16	0:0	6	;
water	154:4	0:0	6	}
else	154:6	157:4	2
stmts	154:12	157:4	3	
water	154:12	0:0	4	{
water	155:8	0:0	4	xdata
op	155:14	0:0	4	=
water	155:16	0:0	4	(
water	155:17	0:0	4	uch
op	155:21	0:0	4	*
water	155:22	0:0	4	)
call	155:23	155:64	4	malloc
arg	155:30	155:64	5	rpng2_info.width*rpng2_info.height
water	155:30	0:0	6	rpng2_info
op	155:40	0:0	6	.
water	155:41	0:0	6	width
op	155:46	0:0	6	*
water	155:47	0:0	6	rpng2_info
op	155:57	0:0	6	.
water	155:58	0:0	6	height
water	155:65	0:0	4	;
water	156:8	0:0	4	pad
op	156:12	0:0	4	=
water	156:14	0:0	4	8
water	156:15	0:0	4	;
water	157:4	0:0	4	}
if	158:4	161:4	2	(! xdata)
cond	158:8	158:9	3	! xdata
op	158:8	0:0	4	!
water	158:9	0:0	4	xdata
stmts	158:16	161:4	3	
water	158:16	0:0	4	{
call	159:8	159:71	4	fprintf
arg	159:16	159:22	5	stderr
water	159:16	0:0	6	stderr
arg	159:24	159:71	5	PROGNAME":  unable to allocate image memory\n"
water	159:24	0:0	6	PROGNAME
water	159:33	0:0	6	":  unable to allocate image memory\n"
water	159:72	0:0	4	;
return	160:8	160:16	4	4
water	160:15	0:0	5	4
water	161:4	0:0	4	}
water	162:4	0:0	2	ximage
op	162:11	0:0	2	=
call	162:13	163:64	2	XCreateImage
arg	162:26	162:33	3	display
water	162:26	0:0	4	display
arg	162:35	162:41	3	visual
water	162:35	0:0	4	visual
arg	162:43	162:48	3	depth
water	162:43	0:0	4	depth
arg	162:50	162:57	3	ZPixmap
water	162:50	0:0	4	ZPixmap
arg	162:59	162:60	3	0
water	162:59	0:0	4	0
arg	163:6	163:19	3	(char*)xdata
water	163:6	0:0	4	(
water	163:7	0:0	4	char
op	163:12	0:0	4	*
water	163:13	0:0	4	)
water	163:14	0:0	4	xdata
arg	163:21	163:37	3	rpng2_info.width
water	163:21	0:0	4	rpng2_info
op	163:31	0:0	4	.
water	163:32	0:0	4	width
arg	163:39	163:56	3	rpng2_info.height
water	163:39	0:0	4	rpng2_info
op	163:49	0:0	4	.
water	163:50	0:0	4	height
arg	163:58	163:61	3	pad
water	163:58	0:0	4	pad
arg	163:63	163:64	3	0
water	163:63	0:0	4	0
water	163:65	0:0	2	;
if	164:4	168:4	2	(! ximage)
cond	164:8	164:9	3	! ximage
op	164:8	0:0	4	!
water	164:9	0:0	4	ximage
stmts	164:17	168:4	3	
water	164:17	0:0	4	{
call	165:8	165:61	4	fprintf
arg	165:16	165:22	5	stderr
water	165:16	0:0	6	stderr
arg	165:24	165:61	5	PROGNAME":  XCreateImage() failed\n"
water	165:24	0:0	6	PROGNAME
water	165:33	0:0	6	":  XCreateImage() failed\n"
water	165:62	0:0	4	;
call	166:8	166:18	4	free
arg	166:13	166:18	5	xdata
water	166:13	0:0	6	xdata
water	166:19	0:0	4	;
return	167:8	167:16	4	3
water	167:15	0:0	5	3
water	168:4	0:0	4	}
water	175:4	0:0	2	ximage
op	175:10	0:0	2	->
water	175:12	0:0	2	byte_order
op	175:23	0:0	2	=
water	175:25	0:0	2	MSBFirst
water	175:33	0:0	2	;
if	181:4	182:31	2	(bg_image)
cond	181:8	181:8	3	bg_image
water	181:8	0:0	4	bg_image
stmts	182:8	182:31	3	
call	182:8	182:30	4	rpng2_x_load_bg_image
water	182:31	0:0	4	;
if	183:4	198:4	2	(! bg_image)
cond	183:8	183:9	3	! bg_image
op	183:8	0:0	4	!
water	183:9	0:0	4	bg_image
stmts	183:19	198:4	3	
water	183:19	0:0	4	{
if	184:8	188:8	4	(depth == 24 || depth == 32)
cond	184:12	184:36	5	depth == 24 || depth == 32
water	184:12	0:0	6	depth
op	184:18	0:0	6	==
water	184:21	0:0	6	24
op	184:24	0:0	6	||
water	184:27	0:0	6	depth
op	184:33	0:0	6	==
water	184:36	0:0	6	32
stmts	184:40	188:8	5	
water	184:40	0:0	6	{
water	185:12	0:0	6	bg_pixel
op	185:21	0:0	6	=
water	185:23	0:0	6	(
water	185:24	0:0	6	bg_red
op	185:33	0:0	6	<<
water	185:36	0:0	6	RShift
water	185:42	0:0	6	)
op	185:44	0:0	6	|
water	186:23	0:0	6	(
water	186:24	0:0	6	bg_green
op	186:33	0:0	6	<<
water	186:36	0:0	6	GShift
water	186:42	0:0	6	)
op	186:44	0:0	6	|
water	187:23	0:0	6	(
water	187:24	0:0	6	bg_blue
op	187:33	0:0	6	<<
water	187:36	0:0	6	BShift
water	187:42	0:0	6	)
water	187:43	0:0	6	;
water	188:8	0:0	6	}
else	188:10	192:8	4
stmts	188:15	192:8	5	
if	188:15	192:8	6	(depth == 16)
cond	188:19	188:28	7	depth == 16
water	188:19	0:0	8	depth
op	188:25	0:0	8	==
water	188:28	0:0	8	16
stmts	188:32	192:8	7	
water	188:32	0:0	8	{
water	189:12	0:0	8	bg_pixel
op	189:21	0:0	8	=
water	189:23	0:0	8	(
water	189:24	0:0	8	(
water	189:25	0:0	8	(
water	189:26	0:0	8	bg_red
op	189:35	0:0	8	<<
water	189:38	0:0	8	8
water	189:39	0:0	8	)
op	189:41	0:0	8	>>
water	189:44	0:0	8	RShift
water	189:50	0:0	8	)
op	189:52	0:0	8	&
water	189:54	0:0	8	RMask
water	189:59	0:0	8	)
op	189:61	0:0	8	|
water	190:23	0:0	8	(
water	190:24	0:0	8	(
water	190:25	0:0	8	(
water	190:26	0:0	8	bg_green
op	190:35	0:0	8	<<
water	190:38	0:0	8	8
water	190:39	0:0	8	)
op	190:41	0:0	8	>>
water	190:44	0:0	8	GShift
water	190:50	0:0	8	)
op	190:52	0:0	8	&
water	190:54	0:0	8	GMask
water	190:59	0:0	8	)
op	190:61	0:0	8	|
water	191:23	0:0	8	(
water	191:24	0:0	8	(
water	191:25	0:0	8	(
water	191:26	0:0	8	bg_blue
op	191:35	0:0	8	<<
water	191:38	0:0	8	8
water	191:39	0:0	8	)
op	191:41	0:0	8	>>
water	191:44	0:0	8	BShift
water	191:50	0:0	8	)
op	191:52	0:0	8	&
water	191:54	0:0	8	BMask
water	191:59	0:0	8	)
water	191:60	0:0	8	;
water	192:8	0:0	8	}
else	192:10	194:8	4
stmts	192:16	194:8	5	
water	192:16	0:0	6	{
water	0:0	0:0	6	STATEMENTS
water	194:8	0:0	6	}
call	195:8	195:44	4	XSetForeground
arg	195:23	195:30	5	display
water	195:23	0:0	6	display
arg	195:32	195:34	5	gc
water	195:32	0:0	6	gc
arg	195:36	195:44	5	bg_pixel
water	195:36	0:0	6	bg_pixel
water	195:45	0:0	4	;
call	196:8	197:27	4	XFillRectangle
arg	196:23	196:30	5	display
water	196:23	0:0	6	display
arg	196:32	196:38	5	window
water	196:32	0:0	6	window
arg	196:40	196:42	5	gc
water	196:40	0:0	6	gc
arg	196:44	196:45	5	0
water	196:44	0:0	6	0
arg	196:47	196:48	5	0
water	196:47	0:0	6	0
arg	196:50	196:66	5	rpng2_info.width
water	196:50	0:0	6	rpng2_info
op	196:60	0:0	6	.
water	196:61	0:0	6	width
arg	197:10	197:27	5	rpng2_info.height
water	197:10	0:0	6	rpng2_info
op	197:20	0:0	6	.
water	197:21	0:0	6	height
water	197:28	0:0	4	;
water	198:4	0:0	4	}
do	202:4	203:31	2	(e . type != Expose || e . xexpose . count)
cond	204:11	204:41	3	e . type != Expose || e . xexpose . count
water	204:11	0:0	4	e
op	204:12	0:0	4	.
water	204:13	0:0	4	type
op	204:18	0:0	4	!=
water	204:21	0:0	4	Expose
op	204:28	0:0	4	||
water	204:31	0:0	4	e
op	204:32	0:0	4	.
water	204:33	0:0	4	xexpose
op	204:40	0:0	4	.
water	204:41	0:0	4	count
stmts	203:8	203:31	3	
call	203:8	203:30	4	XNextEvent
arg	203:19	203:26	5	display
water	203:19	0:0	6	display
arg	203:28	203:30	5	&e
op	203:28	0:0	6	&
water	203:29	0:0	6	e
water	203:31	0:0	4	;
water	204:47	0:0	2	;
call	205:4	205:18	2	XFlush
arg	205:11	205:18	3	display
water	205:11	0:0	4	display
water	205:19	0:0	2	;
return	206:4	206:12	2	0
water	206:11	0:0	3	0
