func	1:0	125:0	0	static void	perform_gamma_test
params	2:18	0:0	1	
param	2:19	2:35	2	png_modifier *	pm
param	2:37	2:48	2	int	summary
stmnts	0:0	123:3	1	
decl	6:3	7:42	2	unsigned int	calculations_use_input_precision
op	6:49	0:0	2	=
water	7:6	0:0	2	pm
op	7:8	0:0	2	->
water	7:10	0:0	2	calculations_use_input_precision
decl	9:6	9:34	2	double	maxout8
op	9:21	0:0	2	=
water	9:23	0:0	2	pm
op	9:25	0:0	2	->
water	9:27	0:0	2	maxout8
if	12:3	17:3	2	(! pm -> this . speed && pm -> test_gamma_threshold)
cond	12:7	12:30	3	! pm -> this . speed && pm -> test_gamma_threshold
op	12:7	0:0	4	!
water	12:8	0:0	4	pm
op	12:10	0:0	4	->
water	12:12	0:0	4	this
op	12:16	0:0	4	.
water	12:17	0:0	4	speed
op	12:23	0:0	4	&&
water	12:26	0:0	4	pm
op	12:28	0:0	4	->
water	12:30	0:0	4	test_gamma_threshold
stmts	13:3	17:3	3	
water	13:3	0:0	4	{
call	14:6	14:38	4	perform_gamma_threshold_tests
arg	14:36	14:38	5	pm
water	14:36	0:0	6	pm
water	14:39	0:0	4	;
if	15:6	16:15	4	(fail (pm ))
cond	15:10	15:17	5	fail (pm )
call	15:10	15:17	6	fail
arg	15:15	15:17	7	pm
water	15:15	0:0	8	pm
stmts	16:9	16:15	5	
return	16:9	16:15	6	
water	17:3	0:0	4	}
if	19:3	50:3	2	(pm -> test_gamma_transform)
cond	19:7	19:11	3	pm -> test_gamma_transform
water	19:7	0:0	4	pm
op	19:9	0:0	4	->
water	19:11	0:0	4	test_gamma_transform
stmts	20:3	50:3	3	
water	20:3	0:0	4	{
if	21:6	36:6	4	(summary)
cond	21:10	21:10	5	summary
water	21:10	0:0	6	summary
stmts	22:6	36:6	5	
water	22:6	0:0	6	{
call	23:9	23:22	6	fflush
arg	23:16	23:22	7	stderr
water	23:16	0:0	8	stderr
water	23:23	0:0	6	;
call	24:9	24:52	6	printf
arg	24:16	24:52	7	"Gamma correction error summary\n\n"
water	24:16	0:0	8	"Gamma correction error summary\n\n"
water	24:53	0:0	6	;
call	25:9	25:78	6	printf
arg	25:16	25:78	7	"The printed value is the maximum error in the pixel values\n"
water	25:16	0:0	8	"The printed value is the maximum error in the pixel values\n"
water	25:79	0:0	6	;
call	26:9	26:78	6	printf
arg	26:16	26:78	7	"calculated by the libpng gamma correction code.  The error\n"
water	26:16	0:0	8	"calculated by the libpng gamma correction code.  The error\n"
water	26:79	0:0	6	;
call	27:9	27:76	6	printf
arg	27:16	27:76	7	"is calculated as the difference between the output pixel\n"
water	27:16	0:0	8	"is calculated as the difference between the output pixel\n"
water	27:77	0:0	6	;
call	28:9	28:74	6	printf
arg	28:16	28:74	7	"value (always an integer) and the ideal value from the\n"
water	28:16	0:0	8	"value (always an integer) and the ideal value from the\n"
water	28:75	0:0	6	;
call	29:9	29:70	6	printf
arg	29:16	29:70	7	"libpng specification (typically not an integer).\n\n"
water	29:16	0:0	8	"libpng specification (typically not an integer).\n\n"
water	29:71	0:0	6	;
call	30:9	30:75	6	printf
arg	30:16	30:75	7	"Expect this value to be less than .5 for 8 bit formats,\n"
water	30:16	0:0	8	"Expect this value to be less than .5 for 8 bit formats,\n"
water	30:76	0:0	6	;
call	31:9	31:78	6	printf
arg	31:16	31:78	7	"less than 1 for formats with fewer than 8 bits and a small\n"
water	31:16	0:0	8	"less than 1 for formats with fewer than 8 bits and a small\n"
water	31:79	0:0	6	;
call	32:9	32:74	6	printf
arg	32:16	32:74	7	"number (typically less than 5) for the 16 bit formats.\n"
water	32:16	0:0	8	"number (typically less than 5) for the 16 bit formats.\n"
water	32:75	0:0	6	;
call	33:9	33:72	6	printf
arg	33:16	33:72	7	"For performance reasons the value for 16 bit formats\n"
water	33:16	0:0	8	"For performance reasons the value for 16 bit formats\n"
water	33:73	0:0	6	;
call	34:9	34:73	6	printf
arg	34:16	34:73	7	"increases when the image file includes an sBIT chunk.\n"
water	34:16	0:0	8	"increases when the image file includes an sBIT chunk.\n"
water	34:74	0:0	6	;
call	35:9	35:22	6	fflush
arg	35:16	35:22	7	stdout
water	35:16	0:0	8	stdout
water	35:23	0:0	6	;
water	36:6	0:0	6	}
call	37:6	37:26	4	init_gamma_errors
arg	37:24	37:26	5	pm
water	37:24	0:0	6	pm
water	37:27	0:0	4	;
if	41:6	42:49	4	(pm -> test_gamma_expand16)
cond	41:10	41:14	5	pm -> test_gamma_expand16
water	41:10	0:0	6	pm
op	41:12	0:0	6	->
water	41:14	0:0	6	test_gamma_expand16
stmts	42:9	42:49	5	
water	42:9	0:0	6	pm
op	42:11	0:0	6	->
water	42:13	0:0	6	calculations_use_input_precision
op	42:46	0:0	6	=
water	42:48	0:0	6	1
water	42:49	0:0	6	;
call	43:6	43:38	4	perform_gamma_transform_tests
arg	43:36	43:38	5	pm
water	43:36	0:0	6	pm
water	43:39	0:0	4	;
if	44:6	45:49	4	(! calculations_use_input_precision)
cond	44:10	44:11	5	! calculations_use_input_precision
op	44:10	0:0	6	!
water	44:11	0:0	6	calculations_use_input_precision
stmts	45:9	45:49	5	
water	45:9	0:0	6	pm
op	45:11	0:0	6	->
water	45:13	0:0	6	calculations_use_input_precision
op	45:46	0:0	6	=
water	45:48	0:0	6	0
water	45:49	0:0	6	;
if	46:6	47:44	4	(summary)
cond	46:10	46:10	5	summary
water	46:10	0:0	6	summary
stmts	47:9	47:44	5	
call	47:9	47:43	6	summarize_gamma_errors
arg	47:32	47:34	7	pm
water	47:32	0:0	8	pm
arg	47:36	47:37	7	0
water	47:36	0:0	8	0
arg	47:39	47:40	7	1
water	47:39	0:0	8	1
arg	47:42	47:43	7	1
water	47:42	0:0	8	1
water	47:44	0:0	6	;
if	48:6	49:15	4	(fail (pm ))
cond	48:10	48:17	5	fail (pm )
call	48:10	48:17	6	fail
arg	48:15	48:17	7	pm
water	48:15	0:0	8	pm
stmts	49:9	49:15	5	
return	49:9	49:15	6	
water	50:3	0:0	4	}
if	52:3	60:3	2	(pm -> test_gamma_sbit)
cond	52:7	52:11	3	pm -> test_gamma_sbit
water	52:7	0:0	4	pm
op	52:9	0:0	4	->
water	52:11	0:0	4	test_gamma_sbit
stmts	53:3	60:3	3	
water	53:3	0:0	4	{
call	54:6	54:26	4	init_gamma_errors
arg	54:24	54:26	5	pm
water	54:24	0:0	6	pm
water	54:27	0:0	4	;
call	55:6	55:33	4	perform_gamma_sbit_tests
arg	55:31	55:33	5	pm
water	55:31	0:0	6	pm
water	55:34	0:0	4	;
if	56:6	57:64	4	(summary)
cond	56:10	56:10	5	summary
water	56:10	0:0	6	summary
stmts	57:9	57:64	5	
call	57:9	57:63	6	summarize_gamma_errors
arg	57:32	57:34	7	pm
water	57:32	0:0	8	pm
arg	57:36	57:42	7	"sBIT"
water	57:36	0:0	8	"sBIT"
arg	57:44	57:60	7	pm->sbitlow<8U
water	57:44	0:0	8	pm
op	57:46	0:0	8	->
water	57:48	0:0	8	sbitlow
op	57:56	0:0	8	<
water	57:58	0:0	8	8
water	57:59	0:0	8	U
arg	57:62	57:63	7	1
water	57:62	0:0	8	1
water	57:64	0:0	6	;
if	58:6	59:15	4	(fail (pm ))
cond	58:10	58:17	5	fail (pm )
call	58:10	58:17	6	fail
arg	58:15	58:17	7	pm
water	58:15	0:0	8	pm
stmts	59:9	59:15	5	
return	59:9	59:15	6	
water	60:3	0:0	4	}
if	62:3	77:3	2	(pm -> test_gamma_scale16)
cond	62:7	62:11	3	pm -> test_gamma_scale16
water	62:7	0:0	4	pm
op	62:9	0:0	4	->
water	62:11	0:0	4	test_gamma_scale16
stmts	63:3	77:3	3	
water	63:3	0:0	4	{
call	65:6	65:26	4	init_gamma_errors
arg	65:24	65:26	5	pm
water	65:24	0:0	6	pm
water	65:27	0:0	4	;
call	66:6	66:36	4	perform_gamma_scale16_tests
arg	66:34	66:36	5	pm
water	66:34	0:0	6	pm
water	66:37	0:0	4	;
if	67:6	74:6	4	(summary)
cond	67:10	67:10	5	summary
water	67:10	0:0	6	summary
stmts	68:6	74:6	5	
water	68:6	0:0	6	{
call	69:9	69:22	6	fflush
arg	69:16	69:22	7	stderr
water	69:16	0:0	8	stderr
water	69:23	0:0	6	;
call	70:9	70:66	6	printf
arg	70:16	70:66	7	"\nGamma correction with 16 to 8 bit reduction:\n"
water	70:16	0:0	8	"\nGamma correction with 16 to 8 bit reduction:\n"
water	70:67	0:0	6	;
call	71:9	71:58	6	printf
arg	71:16	71:39	7	" 16 bit gray:  %.5f\n"
water	71:16	0:0	8	" 16 bit gray:  %.5f\n"
arg	71:41	71:58	7	pm->error_gray_16
water	71:41	0:0	8	pm
op	71:43	0:0	8	->
water	71:45	0:0	8	error_gray_16
water	71:59	0:0	6	;
call	72:9	72:59	6	printf
arg	72:16	72:39	7	" 16 bit color: %.5f\n"
water	72:16	0:0	8	" 16 bit color: %.5f\n"
arg	72:41	72:59	7	pm->error_color_16
water	72:41	0:0	8	pm
op	72:43	0:0	8	->
water	72:45	0:0	8	error_color_16
water	72:60	0:0	6	;
call	73:9	73:22	6	fflush
arg	73:16	73:22	7	stdout
water	73:16	0:0	8	stdout
water	73:23	0:0	6	;
water	74:6	0:0	6	}
if	75:6	76:15	4	(fail (pm ))
cond	75:10	75:17	5	fail (pm )
call	75:10	75:17	6	fail
arg	75:15	75:17	7	pm
water	75:15	0:0	8	pm
stmts	76:9	76:15	5	
return	76:9	76:15	6	
water	77:3	0:0	4	}
if	80:3	100:3	2	(pm -> test_gamma_background)
cond	80:7	80:11	3	pm -> test_gamma_background
water	80:7	0:0	4	pm
op	80:9	0:0	4	->
water	80:11	0:0	4	test_gamma_background
stmts	81:3	100:3	3	
water	81:3	0:0	4	{
call	82:6	82:26	4	init_gamma_errors
arg	82:24	82:26	5	pm
water	82:24	0:0	6	pm
water	82:27	0:0	4	;
if	86:6	90:6	4	(pm -> test_gamma_expand16)
cond	86:10	86:14	5	pm -> test_gamma_expand16
water	86:10	0:0	6	pm
op	86:12	0:0	6	->
water	86:14	0:0	6	test_gamma_expand16
stmts	87:6	90:6	5	
water	87:6	0:0	6	{
water	88:9	0:0	6	pm
op	88:11	0:0	6	->
water	88:13	0:0	6	calculations_use_input_precision
op	88:46	0:0	6	=
water	88:48	0:0	6	1
water	88:49	0:0	6	;
water	89:9	0:0	6	pm
op	89:11	0:0	6	->
water	89:13	0:0	6	maxout8
op	89:21	0:0	6	=
op	89:23	0:0	6	.
water	89:24	0:0	6	499
water	89:27	0:0	6	;
water	90:6	0:0	6	}
call	91:6	92:32	4	perform_gamma_composition_tests
arg	91:38	91:40	5	pm
water	91:38	0:0	6	pm
arg	91:42	91:69	5	PNG_BACKGROUND_GAMMA_UNIQUE
water	91:42	0:0	6	PNG_BACKGROUND_GAMMA_UNIQUE
arg	92:9	92:32	5	pm->test_gamma_expand16
water	92:9	0:0	6	pm
op	92:11	0:0	6	->
water	92:13	0:0	6	test_gamma_expand16
water	92:33	0:0	4	;
if	93:6	94:49	4	(! calculations_use_input_precision)
cond	93:10	93:11	5	! calculations_use_input_precision
op	93:10	0:0	6	!
water	93:11	0:0	6	calculations_use_input_precision
stmts	94:9	94:49	5	
water	94:9	0:0	6	pm
op	94:11	0:0	6	->
water	94:13	0:0	6	calculations_use_input_precision
op	94:46	0:0	6	=
water	94:48	0:0	6	0
water	94:49	0:0	6	;
water	95:6	0:0	4	pm
op	95:8	0:0	4	->
water	95:10	0:0	4	maxout8
op	95:18	0:0	4	=
water	95:20	0:0	4	maxout8
water	95:27	0:0	4	;
if	96:6	97:55	4	(summary)
cond	96:10	96:10	5	summary
water	96:10	0:0	6	summary
stmts	97:9	97:55	5	
call	97:9	97:54	6	summarize_gamma_errors
arg	97:32	97:34	7	pm
water	97:32	0:0	8	pm
arg	97:36	97:48	7	"background"
water	97:36	0:0	8	"background"
arg	97:50	97:51	7	1
water	97:50	0:0	8	1
arg	97:53	97:54	7	0
water	97:53	0:0	8	0
water	97:55	0:0	6	;
if	98:6	99:15	4	(fail (pm ))
cond	98:10	98:17	5	fail (pm )
call	98:10	98:17	6	fail
arg	98:15	98:17	7	pm
water	98:15	0:0	8	pm
stmts	99:9	99:15	5	
return	99:9	99:15	6	
water	100:3	0:0	4	}
if	103:3	123:3	2	(pm -> test_gamma_alpha_mode)
cond	103:7	103:11	3	pm -> test_gamma_alpha_mode
water	103:7	0:0	4	pm
op	103:9	0:0	4	->
water	103:11	0:0	4	test_gamma_alpha_mode
stmts	104:3	123:3	3	
water	104:3	0:0	4	{
decl	105:6	105:23	4	int	do_background
call	106:6	106:26	4	init_gamma_errors
arg	106:24	106:26	5	pm
water	106:24	0:0	6	pm
water	106:27	0:0	4	;
if	110:6	111:49	4	(pm -> test_gamma_expand16)
cond	110:10	110:14	5	pm -> test_gamma_expand16
water	110:10	0:0	6	pm
op	110:12	0:0	6	->
water	110:14	0:0	6	test_gamma_expand16
stmts	111:9	111:49	5	
water	111:9	0:0	6	pm
op	111:11	0:0	6	->
water	111:13	0:0	6	calculations_use_input_precision
op	111:46	0:0	6	=
water	111:48	0:0	6	1
water	111:49	0:0	6	;
for	112:6	116:36	4	(do_background = ALPHA_MODE_OFFSET + PNG_ALPHA_STANDARD ;do_background <= ALPHA_MODE_OFFSET + PNG_ALPHA_BROKEN && !fail (pm );++ do_background)
forinit	112:11	112:65	5	do_background = ALPHA_MODE_OFFSET + PNG_ALPHA_STANDARD ;
water	112:11	0:0	6	do_background
op	112:25	0:0	6	=
water	112:27	0:0	6	ALPHA_MODE_OFFSET
op	112:45	0:0	6	+
water	112:47	0:0	6	PNG_ALPHA_STANDARD
water	112:65	0:0	6	;
cond	113:9	113:74	5	do_background <= ALPHA_MODE_OFFSET + PNG_ALPHA_BROKEN && !fail (pm )
water	113:9	0:0	6	do_background
op	113:23	0:0	6	<=
water	113:26	0:0	6	ALPHA_MODE_OFFSET
op	113:44	0:0	6	+
water	113:46	0:0	6	PNG_ALPHA_BROKEN
op	113:63	0:0	6	&&
op	113:66	0:0	6	!
call	113:67	113:74	6	fail
arg	113:72	113:74	7	pm
water	113:72	0:0	8	pm
forexpr	114:9	114:11	5	++ do_background
op	114:9	0:0	6	++
water	114:11	0:0	6	do_background
stmts	115:9	116:36	5	
call	115:9	116:35	6	perform_gamma_composition_tests
arg	115:41	115:43	7	pm
water	115:41	0:0	8	pm
arg	115:45	115:58	7	do_background
water	115:45	0:0	8	do_background
arg	116:12	116:35	7	pm->test_gamma_expand16
water	116:12	0:0	8	pm
op	116:14	0:0	8	->
water	116:16	0:0	8	test_gamma_expand16
water	116:36	0:0	6	;
if	117:6	118:49	4	(! calculations_use_input_precision)
cond	117:10	117:11	5	! calculations_use_input_precision
op	117:10	0:0	6	!
water	117:11	0:0	6	calculations_use_input_precision
stmts	118:9	118:49	5	
water	118:9	0:0	6	pm
op	118:11	0:0	6	->
water	118:13	0:0	6	calculations_use_input_precision
op	118:46	0:0	6	=
water	118:48	0:0	6	0
water	118:49	0:0	6	;
if	119:6	120:55	4	(summary)
cond	119:10	119:10	5	summary
water	119:10	0:0	6	summary
stmts	120:9	120:55	5	
call	120:9	120:54	6	summarize_gamma_errors
arg	120:32	120:34	7	pm
water	120:32	0:0	8	pm
arg	120:36	120:48	7	"alpha mode"
water	120:36	0:0	8	"alpha mode"
arg	120:50	120:51	7	1
water	120:50	0:0	8	1
arg	120:53	120:54	7	0
water	120:53	0:0	8	0
water	120:55	0:0	6	;
if	121:6	122:15	4	(fail (pm ))
cond	121:10	121:17	5	fail (pm )
call	121:10	121:17	6	fail
arg	121:15	121:17	7	pm
water	121:15	0:0	8	pm
stmts	122:9	122:15	5	
return	122:9	122:15	6	
water	123:3	0:0	4	}
