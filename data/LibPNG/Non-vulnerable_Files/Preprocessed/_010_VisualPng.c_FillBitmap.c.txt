func	2:0	135:0	0	BOOL	FillBitmap
params	2:16	0:0	1	
param	3:8	3:21	2	BYTE *	pDiData
param	3:23	3:36	2	int	cxWinSize
param	3:38	3:51	2	int	cyWinSize
param	4:8	4:21	2	BYTE *	pbImage
param	4:23	4:36	2	int	cxImgSize
param	4:38	4:51	2	int	cyImgSize
param	4:53	4:69	2	int	cImgChannels
param	5:8	5:23	2	BOOL	bStretched
stmnts	0:0	134:15	1	
decl	7:4	7:25	2	BYTE	*pStretchedImage
decl	8:4	8:14	2	BYTE	*pImg
decl	9:4	9:19	2	BYTE	*src
water	9:13	0:0	2	,
decl	9:4	9:19	2	BYTE	*dst
decl	10:4	10:19	2	BYTE	r
water	10:10	0:0	2	,
decl	10:4	10:19	2	BYTE	g
water	10:13	0:0	2	,
decl	10:4	10:19	2	BYTE	b
water	10:16	0:0	2	,
decl	10:4	10:19	2	BYTE	a
decl	11:4	11:29	2	const int	cDIChannels
op	11:26	0:0	2	=
water	11:28	0:0	2	3
decl	12:4	12:21	2	WORD	wImgRowBytes
decl	13:4	13:20	2	WORD	wDIRowBytes
decl	14:4	14:28	2	int	cxNewSize
water	14:17	0:0	2	,
decl	14:4	14:28	2	int	cyNewSize
decl	15:4	15:26	2	int	cxImgPos
water	15:16	0:0	2	,
decl	15:4	15:26	2	int	cyImgPos
decl	16:4	16:18	2	int	xImg
water	16:12	0:0	2	,
decl	16:4	16:18	2	int	yImg
decl	17:4	17:18	2	int	xWin
water	17:12	0:0	2	,
decl	17:4	17:18	2	int	yWin
decl	18:4	18:18	2	int	xOld
water	18:12	0:0	2	,
decl	18:4	18:18	2	int	yOld
decl	19:4	19:18	2	int	xNew
water	19:12	0:0	2	,
decl	19:4	19:18	2	int	yNew
if	20:4	95:4	2	(bStretched)
cond	20:8	20:8	3	bStretched
water	20:8	0:0	4	bStretched
stmts	21:4	95:4	3	
water	21:4	0:0	4	{
water	22:8	0:0	4	cxNewSize
op	22:18	0:0	4	=
water	22:20	0:0	4	cxWinSize
op	22:30	0:0	4	-
water	22:32	0:0	4	2
op	22:34	0:0	4	*
water	22:36	0:0	4	MARGIN
water	22:42	0:0	4	;
water	23:8	0:0	4	cyNewSize
op	23:18	0:0	4	=
water	23:20	0:0	4	cyWinSize
op	23:30	0:0	4	-
water	23:32	0:0	4	2
op	23:34	0:0	4	*
water	23:36	0:0	4	MARGIN
water	23:42	0:0	4	;
if	29:8	34:8	4	(( cyNewSize * cxImgSize ) > ( cyImgSize * cxNewSize ))
cond	29:12	29:60	5	( cyNewSize * cxImgSize ) > ( cyImgSize * cxNewSize )
water	29:12	0:0	6	(
water	29:13	0:0	6	cyNewSize
op	29:23	0:0	6	*
water	29:25	0:0	6	cxImgSize
water	29:34	0:0	6	)
op	29:36	0:0	6	>
water	29:38	0:0	6	(
water	29:39	0:0	6	cyImgSize
op	29:49	0:0	6	*
water	29:51	0:0	6	cxNewSize
water	29:60	0:0	6	)
stmts	30:8	34:8	5	
water	30:8	0:0	6	{
water	31:12	0:0	6	cyNewSize
op	31:22	0:0	6	=
water	31:24	0:0	6	cxNewSize
op	31:34	0:0	6	*
water	31:36	0:0	6	cyImgSize
op	31:46	0:0	6	/
water	31:48	0:0	6	cxImgSize
water	31:57	0:0	6	;
water	32:12	0:0	6	cxImgPos
op	32:21	0:0	6	=
water	32:23	0:0	6	MARGIN
water	32:29	0:0	6	;
water	33:12	0:0	6	cyImgPos
op	33:21	0:0	6	=
water	33:23	0:0	6	(
water	33:24	0:0	6	cyWinSize
op	33:34	0:0	6	-
water	33:36	0:0	6	cyNewSize
water	33:45	0:0	6	)
op	33:47	0:0	6	/
water	33:49	0:0	6	2
water	33:50	0:0	6	;
water	34:8	0:0	6	}
else	35:8	40:8	4
stmts	36:8	40:8	5	
water	36:8	0:0	6	{
water	37:12	0:0	6	cxNewSize
op	37:22	0:0	6	=
water	37:24	0:0	6	cyNewSize
op	37:34	0:0	6	*
water	37:36	0:0	6	cxImgSize
op	37:46	0:0	6	/
water	37:48	0:0	6	cyImgSize
water	37:57	0:0	6	;
water	38:12	0:0	6	cyImgPos
op	38:21	0:0	6	=
water	38:23	0:0	6	MARGIN
water	38:29	0:0	6	;
water	39:12	0:0	6	cxImgPos
op	39:21	0:0	6	=
water	39:23	0:0	6	(
water	39:24	0:0	6	cxWinSize
op	39:34	0:0	6	-
water	39:36	0:0	6	cxNewSize
water	39:45	0:0	6	)
op	39:47	0:0	6	/
water	39:49	0:0	6	2
water	39:50	0:0	6	;
water	40:8	0:0	6	}
water	41:8	0:0	4	pStretchedImage
op	41:24	0:0	4	=
call	41:26	41:70	4	malloc
arg	41:34	41:70	5	cImgChannels*cxNewSize*cyNewSize
water	41:34	0:0	6	cImgChannels
op	41:47	0:0	6	*
water	41:49	0:0	6	cxNewSize
op	41:59	0:0	6	*
water	41:61	0:0	6	cyNewSize
water	41:71	0:0	4	;
water	42:8	0:0	4	pImg
op	42:13	0:0	4	=
water	42:15	0:0	4	pStretchedImage
water	42:30	0:0	4	;
for	43:8	62:8	4	(yNew = 0 ;yNew < cyNewSize;yNew ++)
forinit	43:13	43:21	5	yNew = 0 ;
water	43:13	0:0	6	yNew
op	43:18	0:0	6	=
water	43:20	0:0	6	0
water	43:21	0:0	6	;
cond	43:23	43:30	5	yNew < cyNewSize
water	43:23	0:0	6	yNew
op	43:28	0:0	6	<
water	43:30	0:0	6	cyNewSize
forexpr	43:41	43:45	5	yNew ++
water	43:41	0:0	6	yNew
op	43:45	0:0	6	++
stmts	44:8	62:8	5	
water	44:8	0:0	6	{
water	45:12	0:0	6	yOld
op	45:17	0:0	6	=
water	45:19	0:0	6	yNew
op	45:24	0:0	6	*
water	45:26	0:0	6	cyImgSize
op	45:36	0:0	6	/
water	45:38	0:0	6	cyNewSize
water	45:47	0:0	6	;
for	46:12	61:12	6	(xNew = 0 ;xNew < cxNewSize;xNew ++)
forinit	46:17	46:25	7	xNew = 0 ;
water	46:17	0:0	8	xNew
op	46:22	0:0	8	=
water	46:24	0:0	8	0
water	46:25	0:0	8	;
cond	46:27	46:34	7	xNew < cxNewSize
water	46:27	0:0	8	xNew
op	46:32	0:0	8	<
water	46:34	0:0	8	cxNewSize
forexpr	46:45	46:49	7	xNew ++
water	46:45	0:0	8	xNew
op	46:49	0:0	8	++
stmts	47:12	61:12	7	
water	47:12	0:0	8	{
water	48:16	0:0	8	xOld
op	48:21	0:0	8	=
water	48:23	0:0	8	xNew
op	48:28	0:0	8	*
water	48:30	0:0	8	cxImgSize
op	48:40	0:0	8	/
water	48:42	0:0	8	cxNewSize
water	48:51	0:0	8	;
water	49:16	0:0	8	r
op	49:18	0:0	8	=
op	49:20	0:0	8	*
water	49:21	0:0	8	(
water	49:22	0:0	8	pbImage
op	49:30	0:0	8	+
water	49:32	0:0	8	cImgChannels
op	49:45	0:0	8	*
water	49:47	0:0	8	(
water	49:48	0:0	8	(
water	49:49	0:0	8	yOld
op	49:54	0:0	8	*
water	49:56	0:0	8	cxImgSize
water	49:65	0:0	8	)
op	49:67	0:0	8	+
water	49:69	0:0	8	xOld
water	49:73	0:0	8	)
op	49:75	0:0	8	+
water	49:77	0:0	8	0
water	49:78	0:0	8	)
water	49:79	0:0	8	;
water	50:16	0:0	8	g
op	50:18	0:0	8	=
op	50:20	0:0	8	*
water	50:21	0:0	8	(
water	50:22	0:0	8	pbImage
op	50:30	0:0	8	+
water	50:32	0:0	8	cImgChannels
op	50:45	0:0	8	*
water	50:47	0:0	8	(
water	50:48	0:0	8	(
water	50:49	0:0	8	yOld
op	50:54	0:0	8	*
water	50:56	0:0	8	cxImgSize
water	50:65	0:0	8	)
op	50:67	0:0	8	+
water	50:69	0:0	8	xOld
water	50:73	0:0	8	)
op	50:75	0:0	8	+
water	50:77	0:0	8	1
water	50:78	0:0	8	)
water	50:79	0:0	8	;
water	51:16	0:0	8	b
op	51:18	0:0	8	=
op	51:20	0:0	8	*
water	51:21	0:0	8	(
water	51:22	0:0	8	pbImage
op	51:30	0:0	8	+
water	51:32	0:0	8	cImgChannels
op	51:45	0:0	8	*
water	51:47	0:0	8	(
water	51:48	0:0	8	(
water	51:49	0:0	8	yOld
op	51:54	0:0	8	*
water	51:56	0:0	8	cxImgSize
water	51:65	0:0	8	)
op	51:67	0:0	8	+
water	51:69	0:0	8	xOld
water	51:73	0:0	8	)
op	51:75	0:0	8	+
water	51:77	0:0	8	2
water	51:78	0:0	8	)
water	51:79	0:0	8	;
op	52:16	0:0	8	*
water	52:17	0:0	8	pImg
op	52:21	0:0	8	++
op	52:24	0:0	8	=
water	52:26	0:0	8	r
water	52:27	0:0	8	;
op	53:16	0:0	8	*
water	53:17	0:0	8	pImg
op	53:21	0:0	8	++
op	53:24	0:0	8	=
water	53:26	0:0	8	g
water	53:27	0:0	8	;
op	54:16	0:0	8	*
water	54:17	0:0	8	pImg
op	54:21	0:0	8	++
op	54:24	0:0	8	=
water	54:26	0:0	8	b
water	54:27	0:0	8	;
if	55:16	60:16	8	(cImgChannels == 4)
cond	55:20	55:36	9	cImgChannels == 4
water	55:20	0:0	10	cImgChannels
op	55:33	0:0	10	==
water	55:36	0:0	10	4
stmts	56:16	60:16	9	
water	56:16	0:0	10	{
water	57:20	0:0	10	a
op	57:22	0:0	10	=
op	57:24	0:0	10	*
water	57:25	0:0	10	(
water	57:26	0:0	10	pbImage
op	57:34	0:0	10	+
water	57:36	0:0	10	cImgChannels
op	57:49	0:0	10	*
water	57:51	0:0	10	(
water	57:52	0:0	10	(
water	57:53	0:0	10	yOld
op	57:58	0:0	10	*
water	57:60	0:0	10	cxImgSize
water	57:69	0:0	10	)
op	57:71	0:0	10	+
water	57:73	0:0	10	xOld
water	57:77	0:0	10	)
op	58:24	0:0	10	+
water	58:26	0:0	10	3
water	58:27	0:0	10	)
water	58:28	0:0	10	;
op	59:20	0:0	10	*
water	59:21	0:0	10	pImg
op	59:25	0:0	10	++
op	59:28	0:0	10	=
water	59:30	0:0	10	a
water	59:31	0:0	10	;
water	60:16	0:0	10	}
water	61:12	0:0	8	}
water	62:8	0:0	6	}
water	64:8	0:0	4	wImgRowBytes
op	64:21	0:0	4	=
water	64:23	0:0	4	cImgChannels
op	64:36	0:0	4	*
water	64:38	0:0	4	cxNewSize
water	64:47	0:0	4	;
water	65:8	0:0	4	wDIRowBytes
op	65:20	0:0	4	=
call	65:22	65:65	4	(WORD)
arg	65:30	65:65	5	(cDIChannels*cxWinSize+3L)>>2
water	65:30	0:0	6	(
water	65:31	0:0	6	cDIChannels
op	65:43	0:0	6	*
water	65:45	0:0	6	cxWinSize
op	65:55	0:0	6	+
water	65:57	0:0	6	3
water	65:58	0:0	6	L
water	65:59	0:0	6	)
op	65:61	0:0	6	>>
water	65:64	0:0	6	2
op	65:67	0:0	4	<<
water	65:70	0:0	4	2
water	65:71	0:0	4	;
for	67:8	88:8	4	(yImg = 0 , yWin = cyImgPos ;yImg < cyNewSize;yImg ++ , yWin ++)
forinit	67:13	67:38	5	yImg = 0 , yWin = cyImgPos ;
water	67:13	0:0	6	yImg
op	67:18	0:0	6	=
water	67:20	0:0	6	0
water	67:21	0:0	6	,
water	67:23	0:0	6	yWin
op	67:28	0:0	6	=
water	67:30	0:0	6	cyImgPos
water	67:38	0:0	6	;
cond	67:40	67:47	5	yImg < cyNewSize
water	67:40	0:0	6	yImg
op	67:45	0:0	6	<
water	67:47	0:0	6	cyNewSize
forexpr	67:58	67:70	5	yImg ++ , yWin ++
water	67:58	0:0	6	yImg
op	67:62	0:0	6	++
water	67:64	0:0	6	,
water	67:66	0:0	6	yWin
op	67:70	0:0	6	++
stmts	68:8	88:8	5	
water	68:8	0:0	6	{
if	69:12	70:21	6	(yWin >= cyWinSize - cyImgPos)
cond	69:16	69:36	7	yWin >= cyWinSize - cyImgPos
water	69:16	0:0	8	yWin
op	69:21	0:0	8	>=
water	69:24	0:0	8	cyWinSize
op	69:34	0:0	8	-
water	69:36	0:0	8	cyImgPos
stmts	70:16	70:21	7	
break	70:16	70:21	8	
water	71:12	0:0	6	src
op	71:16	0:0	6	=
water	71:18	0:0	6	pStretchedImage
op	71:34	0:0	6	+
water	71:36	0:0	6	yImg
op	71:41	0:0	6	*
water	71:43	0:0	6	wImgRowBytes
water	71:55	0:0	6	;
water	72:12	0:0	6	dst
op	72:16	0:0	6	=
water	72:18	0:0	6	pDiData
op	72:26	0:0	6	+
water	72:28	0:0	6	yWin
op	72:33	0:0	6	*
water	72:35	0:0	6	wDIRowBytes
op	72:47	0:0	6	+
water	72:49	0:0	6	cxImgPos
op	72:58	0:0	6	*
water	72:60	0:0	6	cDIChannels
water	72:71	0:0	6	;
for	73:12	87:12	6	(xImg = 0 , xWin = cxImgPos ;xImg < cxNewSize;xImg ++ , xWin ++)
forinit	73:17	73:42	7	xImg = 0 , xWin = cxImgPos ;
water	73:17	0:0	8	xImg
op	73:22	0:0	8	=
water	73:24	0:0	8	0
water	73:25	0:0	8	,
water	73:27	0:0	8	xWin
op	73:32	0:0	8	=
water	73:34	0:0	8	cxImgPos
water	73:42	0:0	8	;
cond	73:44	73:51	7	xImg < cxNewSize
water	73:44	0:0	8	xImg
op	73:49	0:0	8	<
water	73:51	0:0	8	cxNewSize
forexpr	73:62	73:74	7	xImg ++ , xWin ++
water	73:62	0:0	8	xImg
op	73:66	0:0	8	++
water	73:68	0:0	8	,
water	73:70	0:0	8	xWin
op	73:74	0:0	8	++
stmts	74:12	87:12	7	
water	74:12	0:0	8	{
if	75:16	76:25	8	(xWin >= cxWinSize - cxImgPos)
cond	75:20	75:40	9	xWin >= cxWinSize - cxImgPos
water	75:20	0:0	10	xWin
op	75:25	0:0	10	>=
water	75:28	0:0	10	cxWinSize
op	75:38	0:0	10	-
water	75:40	0:0	10	cxImgPos
stmts	76:20	76:25	9	
break	76:20	76:25	10	
water	77:16	0:0	8	r
op	77:18	0:0	8	=
op	77:20	0:0	8	*
water	77:21	0:0	8	src
op	77:24	0:0	8	++
water	77:26	0:0	8	;
water	78:16	0:0	8	g
op	78:18	0:0	8	=
op	78:20	0:0	8	*
water	78:21	0:0	8	src
op	78:24	0:0	8	++
water	78:26	0:0	8	;
water	79:16	0:0	8	b
op	79:18	0:0	8	=
op	79:20	0:0	8	*
water	79:21	0:0	8	src
op	79:24	0:0	8	++
water	79:26	0:0	8	;
op	80:16	0:0	8	*
water	80:17	0:0	8	dst
op	80:20	0:0	8	++
op	80:23	0:0	8	=
water	80:25	0:0	8	b
water	80:26	0:0	8	;
op	81:16	0:0	8	*
water	81:17	0:0	8	dst
op	81:20	0:0	8	++
op	81:23	0:0	8	=
water	81:25	0:0	8	g
water	81:26	0:0	8	;
op	82:16	0:0	8	*
water	82:17	0:0	8	dst
op	82:20	0:0	8	++
op	82:23	0:0	8	=
water	82:25	0:0	8	r
water	82:26	0:0	8	;
if	83:16	86:16	8	(cImgChannels == 4)
cond	83:20	83:36	9	cImgChannels == 4
water	83:20	0:0	10	cImgChannels
op	83:33	0:0	10	==
water	83:36	0:0	10	4
stmts	84:16	86:16	9	
water	84:16	0:0	10	{
water	85:20	0:0	10	a
op	85:22	0:0	10	=
op	85:24	0:0	10	*
water	85:25	0:0	10	src
op	85:28	0:0	10	++
water	85:30	0:0	10	;
water	86:16	0:0	10	}
water	87:12	0:0	8	}
water	88:8	0:0	6	}
if	90:8	94:8	4	(pStretchedImage != NULL)
cond	90:12	90:31	5	pStretchedImage != NULL
water	90:12	0:0	6	pStretchedImage
op	90:28	0:0	6	!=
water	90:31	0:0	6	NULL
stmts	91:8	94:8	5	
water	91:8	0:0	6	{
call	92:12	92:33	6	free
arg	92:18	92:33	7	pStretchedImage
water	92:18	0:0	8	pStretchedImage
water	92:34	0:0	6	;
water	93:12	0:0	6	pStretchedImage
op	93:28	0:0	6	=
water	93:30	0:0	6	NULL
water	93:34	0:0	6	;
water	94:8	0:0	6	}
water	95:4	0:0	4	}
else	97:4	133:4	2
stmts	98:4	133:4	3	
water	98:4	0:0	4	{
water	100:8	0:0	4	cxImgPos
op	100:17	0:0	4	=
water	100:19	0:0	4	(
water	100:20	0:0	4	cxWinSize
op	100:30	0:0	4	-
water	100:32	0:0	4	cxImgSize
water	100:41	0:0	4	)
op	100:43	0:0	4	/
water	100:45	0:0	4	2
water	100:46	0:0	4	;
water	101:8	0:0	4	cyImgPos
op	101:17	0:0	4	=
water	101:19	0:0	4	(
water	101:20	0:0	4	cyWinSize
op	101:30	0:0	4	-
water	101:32	0:0	4	cyImgSize
water	101:41	0:0	4	)
op	101:43	0:0	4	/
water	101:45	0:0	4	2
water	101:46	0:0	4	;
if	103:8	104:29	4	(cxImgPos < MARGIN)
cond	103:12	103:23	5	cxImgPos < MARGIN
water	103:12	0:0	6	cxImgPos
op	103:21	0:0	6	<
water	103:23	0:0	6	MARGIN
stmts	104:12	104:29	5	
water	104:12	0:0	6	cxImgPos
op	104:21	0:0	6	=
water	104:23	0:0	6	MARGIN
water	104:29	0:0	6	;
if	105:8	106:29	4	(cyImgPos < MARGIN)
cond	105:12	105:23	5	cyImgPos < MARGIN
water	105:12	0:0	6	cyImgPos
op	105:21	0:0	6	<
water	105:23	0:0	6	MARGIN
stmts	106:12	106:29	5	
water	106:12	0:0	6	cyImgPos
op	106:21	0:0	6	=
water	106:23	0:0	6	MARGIN
water	106:29	0:0	6	;
water	108:8	0:0	4	wImgRowBytes
op	108:21	0:0	4	=
water	108:23	0:0	4	cImgChannels
op	108:36	0:0	4	*
water	108:38	0:0	4	cxImgSize
water	108:47	0:0	4	;
water	109:8	0:0	4	wDIRowBytes
op	109:20	0:0	4	=
call	109:22	109:65	4	(WORD)
arg	109:30	109:65	5	(cDIChannels*cxWinSize+3L)>>2
water	109:30	0:0	6	(
water	109:31	0:0	6	cDIChannels
op	109:43	0:0	6	*
water	109:45	0:0	6	cxWinSize
op	109:55	0:0	6	+
water	109:57	0:0	6	3
water	109:58	0:0	6	L
water	109:59	0:0	6	)
op	109:61	0:0	6	>>
water	109:64	0:0	6	2
op	109:67	0:0	4	<<
water	109:70	0:0	4	2
water	109:71	0:0	4	;
for	111:8	132:8	4	(yImg = 0 , yWin = cyImgPos ;yImg < cyImgSize;yImg ++ , yWin ++)
forinit	111:13	111:38	5	yImg = 0 , yWin = cyImgPos ;
water	111:13	0:0	6	yImg
op	111:18	0:0	6	=
water	111:20	0:0	6	0
water	111:21	0:0	6	,
water	111:23	0:0	6	yWin
op	111:28	0:0	6	=
water	111:30	0:0	6	cyImgPos
water	111:38	0:0	6	;
cond	111:40	111:47	5	yImg < cyImgSize
water	111:40	0:0	6	yImg
op	111:45	0:0	6	<
water	111:47	0:0	6	cyImgSize
forexpr	111:58	111:70	5	yImg ++ , yWin ++
water	111:58	0:0	6	yImg
op	111:62	0:0	6	++
water	111:64	0:0	6	,
water	111:66	0:0	6	yWin
op	111:70	0:0	6	++
stmts	112:8	132:8	5	
water	112:8	0:0	6	{
if	113:12	114:21	6	(yWin >= cyWinSize - MARGIN)
cond	113:16	113:36	7	yWin >= cyWinSize - MARGIN
water	113:16	0:0	8	yWin
op	113:21	0:0	8	>=
water	113:24	0:0	8	cyWinSize
op	113:34	0:0	8	-
water	113:36	0:0	8	MARGIN
stmts	114:16	114:21	7	
break	114:16	114:21	8	
water	115:12	0:0	6	src
op	115:16	0:0	6	=
water	115:18	0:0	6	pbImage
op	115:26	0:0	6	+
water	115:28	0:0	6	yImg
op	115:33	0:0	6	*
water	115:35	0:0	6	wImgRowBytes
water	115:47	0:0	6	;
water	116:12	0:0	6	dst
op	116:16	0:0	6	=
water	116:18	0:0	6	pDiData
op	116:26	0:0	6	+
water	116:28	0:0	6	yWin
op	116:33	0:0	6	*
water	116:35	0:0	6	wDIRowBytes
op	116:47	0:0	6	+
water	116:49	0:0	6	cxImgPos
op	116:58	0:0	6	*
water	116:60	0:0	6	cDIChannels
water	116:71	0:0	6	;
for	117:12	131:12	6	(xImg = 0 , xWin = cxImgPos ;xImg < cxImgSize;xImg ++ , xWin ++)
forinit	117:17	117:42	7	xImg = 0 , xWin = cxImgPos ;
water	117:17	0:0	8	xImg
op	117:22	0:0	8	=
water	117:24	0:0	8	0
water	117:25	0:0	8	,
water	117:27	0:0	8	xWin
op	117:32	0:0	8	=
water	117:34	0:0	8	cxImgPos
water	117:42	0:0	8	;
cond	117:44	117:51	7	xImg < cxImgSize
water	117:44	0:0	8	xImg
op	117:49	0:0	8	<
water	117:51	0:0	8	cxImgSize
forexpr	117:62	117:74	7	xImg ++ , xWin ++
water	117:62	0:0	8	xImg
op	117:66	0:0	8	++
water	117:68	0:0	8	,
water	117:70	0:0	8	xWin
op	117:74	0:0	8	++
stmts	118:12	131:12	7	
water	118:12	0:0	8	{
if	119:16	120:25	8	(xWin >= cxWinSize - MARGIN)
cond	119:20	119:40	9	xWin >= cxWinSize - MARGIN
water	119:20	0:0	10	xWin
op	119:25	0:0	10	>=
water	119:28	0:0	10	cxWinSize
op	119:38	0:0	10	-
water	119:40	0:0	10	MARGIN
stmts	120:20	120:25	9	
break	120:20	120:25	10	
water	121:16	0:0	8	r
op	121:18	0:0	8	=
op	121:20	0:0	8	*
water	121:21	0:0	8	src
op	121:24	0:0	8	++
water	121:26	0:0	8	;
water	122:16	0:0	8	g
op	122:18	0:0	8	=
op	122:20	0:0	8	*
water	122:21	0:0	8	src
op	122:24	0:0	8	++
water	122:26	0:0	8	;
water	123:16	0:0	8	b
op	123:18	0:0	8	=
op	123:20	0:0	8	*
water	123:21	0:0	8	src
op	123:24	0:0	8	++
water	123:26	0:0	8	;
op	124:16	0:0	8	*
water	124:17	0:0	8	dst
op	124:20	0:0	8	++
op	124:23	0:0	8	=
water	124:25	0:0	8	b
water	124:26	0:0	8	;
op	125:16	0:0	8	*
water	125:17	0:0	8	dst
op	125:20	0:0	8	++
op	125:23	0:0	8	=
water	125:25	0:0	8	g
water	125:26	0:0	8	;
op	126:16	0:0	8	*
water	126:17	0:0	8	dst
op	126:20	0:0	8	++
op	126:23	0:0	8	=
water	126:25	0:0	8	r
water	126:26	0:0	8	;
if	127:16	130:16	8	(cImgChannels == 4)
cond	127:20	127:36	9	cImgChannels == 4
water	127:20	0:0	10	cImgChannels
op	127:33	0:0	10	==
water	127:36	0:0	10	4
stmts	128:16	130:16	9	
water	128:16	0:0	10	{
water	129:20	0:0	10	a
op	129:22	0:0	10	=
op	129:24	0:0	10	*
water	129:25	0:0	10	src
op	129:28	0:0	10	++
water	129:30	0:0	10	;
water	130:16	0:0	10	}
water	131:12	0:0	8	}
water	132:8	0:0	6	}
water	133:4	0:0	4	}
return	134:4	134:15	2	TRUE
water	134:11	0:0	3	TRUE
