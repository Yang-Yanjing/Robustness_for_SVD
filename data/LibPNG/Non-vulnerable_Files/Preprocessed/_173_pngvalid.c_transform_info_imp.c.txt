func	1:0	107:0	0	static void	transform_info_imp
params	2:18	0:0	1	
param	2:19	2:40	2	transform_display *	dp
param	2:42	2:56	2	png_structp	pp
param	2:58	2:70	2	png_infop	pi
stmnts	5:3	106:3	1	
call	5:3	5:40	2	standard_info_part1
arg	5:23	5:32	3	&dp->this
op	5:23	0:0	4	&
water	5:24	0:0	4	dp
op	5:26	0:0	4	->
water	5:28	0:0	4	this
arg	5:34	5:36	3	pp
water	5:34	0:0	4	pp
arg	5:38	5:40	3	pi
water	5:38	0:0	4	pi
water	5:41	0:0	2	;
call	7:3	7:57	2	dp->transform_list->set
arg	7:27	7:45	3	dp->transform_list
water	7:27	0:0	4	dp
op	7:29	0:0	4	->
water	7:31	0:0	4	transform_list
arg	7:47	7:49	3	dp
water	7:47	0:0	4	dp
arg	7:51	7:53	3	pp
water	7:51	0:0	4	pp
arg	7:55	7:57	3	pi
water	7:55	0:0	4	pi
water	7:58	0:0	2	;
water	9:3	0:0	2	{
decl	10:6	10:38	2	int	i
op	10:12	0:0	2	=
water	10:14	0:0	2	dp
op	10:16	0:0	2	->
water	10:18	0:0	2	this
op	10:22	0:0	2	.
water	10:23	0:0	2	use_update_info
do	12:6	13:37	2	(-- i > 0)
cond	14:13	14:19	3	-- i > 0
op	14:13	0:0	4	--
water	14:15	0:0	4	i
op	14:17	0:0	4	>
water	14:19	0:0	4	0
stmts	13:9	13:37	3	
call	13:9	13:36	4	png_read_update_info
arg	13:30	13:32	5	pp
water	13:30	0:0	6	pp
arg	13:34	13:36	5	pi
water	13:34	0:0	6	pi
water	13:37	0:0	4	;
water	14:21	0:0	2	;
water	15:3	0:0	2	}
call	17:3	17:43	2	standard_info_part2
arg	17:23	17:32	3	&dp->this
op	17:23	0:0	4	&
water	17:24	0:0	4	dp
op	17:26	0:0	4	->
water	17:28	0:0	4	this
arg	17:34	17:36	3	pp
water	17:34	0:0	4	pp
arg	17:38	17:40	3	pi
water	17:38	0:0	4	pi
arg	17:42	17:43	3	1
water	17:42	0:0	4	1
water	17:44	0:0	2	;
water	19:3	0:0	2	dp
op	19:5	0:0	2	->
water	19:7	0:0	2	output_colour_type
op	19:26	0:0	2	=
call	19:28	19:53	2	png_get_color_type
arg	19:47	19:49	3	pp
water	19:47	0:0	4	pp
arg	19:51	19:53	3	pi
water	19:51	0:0	4	pi
water	19:54	0:0	2	;
water	20:3	0:0	2	dp
op	20:5	0:0	2	->
water	20:7	0:0	2	output_bit_depth
op	20:24	0:0	2	=
call	20:26	20:50	2	png_get_bit_depth
arg	20:44	20:46	3	pp
water	20:44	0:0	4	pp
arg	20:48	20:50	3	pi
water	20:48	0:0	4	pi
water	20:51	0:0	2	;
switch	25:3	50:3	2	(dp -> output_colour_type)
cond	25:11	25:15	3	dp -> output_colour_type
water	25:11	0:0	4	dp
op	25:13	0:0	4	->
water	25:15	0:0	4	output_colour_type
stmts	26:3	50:3	3	
water	26:3	0:0	4	{
label	27:3	27:30	4	case PNG_COLOR_TYPE_PALETTE :
if	28:6	28:46	4	(dp -> output_bit_depth > 8)
cond	28:10	28:33	5	dp -> output_bit_depth > 8
water	28:10	0:0	6	dp
op	28:12	0:0	6	->
water	28:14	0:0	6	output_bit_depth
op	28:31	0:0	6	>
water	28:33	0:0	6	8
stmts	28:36	28:46	5	
goto	28:36	28:46	6	error
water	28:41	0:0	7	error
label	30:3	30:27	4	case PNG_COLOR_TYPE_GRAY :
if	31:6	33:14	4	(dp -> output_bit_depth == 1 || dp -> output_bit_depth == 2 || dp -> output_bit_depth == 4)
cond	31:10	32:33	5	dp -> output_bit_depth == 1 || dp -> output_bit_depth == 2 || dp -> output_bit_depth == 4
water	31:10	0:0	6	dp
op	31:12	0:0	6	->
water	31:14	0:0	6	output_bit_depth
op	31:31	0:0	6	==
water	31:34	0:0	6	1
op	31:36	0:0	6	||
water	31:39	0:0	6	dp
op	31:41	0:0	6	->
water	31:43	0:0	6	output_bit_depth
op	31:60	0:0	6	==
water	31:63	0:0	6	2
op	31:65	0:0	6	||
water	32:9	0:0	6	dp
op	32:11	0:0	6	->
water	32:13	0:0	6	output_bit_depth
op	32:30	0:0	6	==
water	32:33	0:0	6	4
stmts	33:9	33:14	5	
break	33:9	33:14	6	
label	35:3	35:10	4	default :
if	36:6	37:14	4	(dp -> output_bit_depth == 8 || dp -> output_bit_depth == 16)
cond	36:10	36:63	5	dp -> output_bit_depth == 8 || dp -> output_bit_depth == 16
water	36:10	0:0	6	dp
op	36:12	0:0	6	->
water	36:14	0:0	6	output_bit_depth
op	36:31	0:0	6	==
water	36:34	0:0	6	8
op	36:36	0:0	6	||
water	36:39	0:0	6	dp
op	36:41	0:0	6	->
water	36:43	0:0	6	output_bit_depth
op	36:60	0:0	6	==
water	36:63	0:0	6	16
stmts	37:9	37:14	5	
break	37:9	37:14	6	
label	39:3	39:8	4	error :
water	40:6	0:0	4	{
decl	41:9	41:26	4	char	message[128]
decl	42:9	42:19	4	size_t	pos
water	43:9	0:0	4	pos
op	43:13	0:0	4	=
call	43:15	44:51	4	safecat
arg	43:23	43:30	5	message
water	43:23	0:0	6	message
arg	43:32	43:46	5	sizeofmessage
op	43:32	0:0	6	sizeof
water	43:39	0:0	6	message
arg	43:48	43:49	5	0
water	43:48	0:0	6	0
arg	44:12	44:51	5	"invalid final bit depth: colour type("
water	44:12	0:0	6	"invalid final bit depth: colour type("
water	44:52	0:0	4	;
water	45:9	0:0	4	pos
op	45:13	0:0	4	=
call	45:15	45:76	4	safecatn
arg	45:24	45:31	5	message
water	45:24	0:0	6	message
arg	45:33	45:47	5	sizeofmessage
op	45:33	0:0	6	sizeof
water	45:40	0:0	6	message
arg	45:49	45:52	5	pos
water	45:49	0:0	6	pos
arg	45:54	45:76	5	dp->output_colour_type
water	45:54	0:0	6	dp
op	45:56	0:0	6	->
water	45:58	0:0	6	output_colour_type
water	45:77	0:0	4	;
water	46:9	0:0	4	pos
op	46:13	0:0	4	=
call	46:15	46:73	4	safecat
arg	46:23	46:30	5	message
water	46:23	0:0	6	message
arg	46:32	46:46	5	sizeofmessage
op	46:32	0:0	6	sizeof
water	46:39	0:0	6	message
arg	46:48	46:51	5	pos
water	46:48	0:0	6	pos
arg	46:53	46:73	5	") with bit depth: "
water	46:53	0:0	6	") with bit depth: "
water	46:74	0:0	4	;
water	47:9	0:0	4	pos
op	47:13	0:0	4	=
call	47:15	47:74	4	safecatn
arg	47:24	47:31	5	message
water	47:24	0:0	6	message
arg	47:33	47:47	5	sizeofmessage
op	47:33	0:0	6	sizeof
water	47:40	0:0	6	message
arg	47:49	47:52	5	pos
water	47:49	0:0	6	pos
arg	47:54	47:74	5	dp->output_bit_depth
water	47:54	0:0	6	dp
op	47:56	0:0	6	->
water	47:58	0:0	6	output_bit_depth
water	47:75	0:0	4	;
call	48:9	48:30	4	png_error
arg	48:19	48:21	5	pp
water	48:19	0:0	6	pp
arg	48:23	48:30	5	message
water	48:23	0:0	6	message
water	48:31	0:0	4	;
water	49:6	0:0	4	}
water	50:3	0:0	4	}
water	54:3	0:0	2	{
decl	55:6	55:28	2	image_pixel	test_pixel
call	56:6	56:46	2	memset
arg	56:13	56:24	3	&test_pixel
op	56:13	0:0	4	&
water	56:14	0:0	4	test_pixel
arg	56:26	56:27	3	0
water	56:26	0:0	4	0
arg	56:29	56:46	3	sizeoftest_pixel
op	56:29	0:0	4	sizeof
water	56:36	0:0	4	test_pixel
water	56:47	0:0	2	;
water	57:6	0:0	2	test_pixel
op	57:16	0:0	2	.
water	57:17	0:0	2	colour_type
op	57:29	0:0	2	=
water	57:31	0:0	2	dp
op	57:33	0:0	2	->
water	57:35	0:0	2	this
op	57:39	0:0	2	.
water	57:40	0:0	2	colour_type
water	57:51	0:0	2	;
water	58:6	0:0	2	test_pixel
op	58:16	0:0	2	.
water	58:17	0:0	2	bit_depth
op	58:27	0:0	2	=
water	58:29	0:0	2	dp
op	58:31	0:0	2	->
water	58:33	0:0	2	this
op	58:37	0:0	2	.
water	58:38	0:0	2	bit_depth
water	58:47	0:0	2	;
if	59:6	60:36	2	(test_pixel . colour_type == PNG_COLOR_TYPE_PALETTE)
cond	59:10	59:36	3	test_pixel . colour_type == PNG_COLOR_TYPE_PALETTE
water	59:10	0:0	4	test_pixel
op	59:20	0:0	4	.
water	59:21	0:0	4	colour_type
op	59:33	0:0	4	==
water	59:36	0:0	4	PNG_COLOR_TYPE_PALETTE
stmts	60:9	60:36	3	
water	60:9	0:0	4	test_pixel
op	60:19	0:0	4	.
water	60:20	0:0	4	sample_depth
op	60:33	0:0	4	=
water	60:35	0:0	4	8
water	60:36	0:0	4	;
else	61:6	62:55	2
stmts	62:9	62:55	3	
water	62:9	0:0	4	test_pixel
op	62:19	0:0	4	.
water	62:20	0:0	4	sample_depth
op	62:33	0:0	4	=
water	62:35	0:0	4	test_pixel
op	62:45	0:0	4	.
water	62:46	0:0	4	bit_depth
water	62:55	0:0	4	;
water	66:6	0:0	2	test_pixel
op	66:16	0:0	2	.
water	66:17	0:0	2	have_tRNS
op	66:27	0:0	2	=
water	66:29	0:0	2	dp
op	66:31	0:0	2	->
water	66:33	0:0	2	this
op	66:37	0:0	2	.
water	66:38	0:0	2	is_transparent
water	66:52	0:0	2	;
water	67:6	0:0	2	test_pixel
op	67:16	0:0	2	.
water	67:17	0:0	2	red_sBIT
op	67:26	0:0	2	=
water	67:28	0:0	2	test_pixel
op	67:38	0:0	2	.
water	67:39	0:0	2	green_sBIT
op	67:50	0:0	2	=
water	67:52	0:0	2	test_pixel
op	67:62	0:0	2	.
water	67:63	0:0	2	blue_sBIT
op	67:73	0:0	2	=
water	68:9	0:0	2	test_pixel
op	68:19	0:0	2	.
water	68:20	0:0	2	alpha_sBIT
op	68:31	0:0	2	=
water	68:33	0:0	2	test_pixel
op	68:43	0:0	2	.
water	68:44	0:0	2	sample_depth
water	68:56	0:0	2	;
call	69:6	69:69	2	dp->transform_list->mod
arg	69:30	69:48	3	dp->transform_list
water	69:30	0:0	4	dp
op	69:32	0:0	4	->
water	69:34	0:0	4	transform_list
arg	69:50	69:61	3	&test_pixel
op	69:50	0:0	4	&
water	69:51	0:0	4	test_pixel
arg	69:63	69:65	3	pp
water	69:63	0:0	4	pp
arg	69:67	69:69	3	dp
water	69:67	0:0	4	dp
water	69:70	0:0	2	;
if	70:6	78:6	2	(test_pixel . colour_type != dp -> output_colour_type)
cond	70:10	70:40	3	test_pixel . colour_type != dp -> output_colour_type
water	70:10	0:0	4	test_pixel
op	70:20	0:0	4	.
water	70:21	0:0	4	colour_type
op	70:33	0:0	4	!=
water	70:36	0:0	4	dp
op	70:38	0:0	4	->
water	70:40	0:0	4	output_colour_type
stmts	71:6	78:6	3	
water	71:6	0:0	4	{
decl	72:9	72:26	4	char	message[128]
decl	73:9	73:73	4	size_t	pos
op	73:20	0:0	4	=
call	73:22	73:72	5	safecat
arg	73:30	73:37	6	message
water	73:30	0:0	7	message
arg	73:39	73:53	6	sizeofmessage
op	73:39	0:0	7	sizeof
water	73:46	0:0	7	message
arg	73:55	73:56	6	0
water	73:55	0:0	7	0
arg	73:58	73:72	6	"colour type "
water	73:58	0:0	7	"colour type "
water	74:9	0:0	4	pos
op	74:13	0:0	4	=
call	74:15	74:76	4	safecatn
arg	74:24	74:31	5	message
water	74:24	0:0	6	message
arg	74:33	74:47	5	sizeofmessage
op	74:33	0:0	6	sizeof
water	74:40	0:0	6	message
arg	74:49	74:52	5	pos
water	74:49	0:0	6	pos
arg	74:54	74:76	5	dp->output_colour_type
water	74:54	0:0	6	dp
op	74:56	0:0	6	->
water	74:58	0:0	6	output_colour_type
water	74:77	0:0	4	;
water	75:9	0:0	4	pos
op	75:13	0:0	4	=
call	75:15	75:65	4	safecat
arg	75:23	75:30	5	message
water	75:23	0:0	6	message
arg	75:32	75:46	5	sizeofmessage
op	75:32	0:0	6	sizeof
water	75:39	0:0	6	message
arg	75:48	75:51	5	pos
water	75:48	0:0	6	pos
arg	75:53	75:65	5	" expected "
water	75:53	0:0	6	" expected "
water	75:66	0:0	4	;
water	76:9	0:0	4	pos
op	76:13	0:0	4	=
call	76:15	76:76	4	safecatn
arg	76:24	76:31	5	message
water	76:24	0:0	6	message
arg	76:33	76:47	5	sizeofmessage
op	76:33	0:0	6	sizeof
water	76:40	0:0	6	message
arg	76:49	76:52	5	pos
water	76:49	0:0	6	pos
arg	76:54	76:76	5	test_pixel.colour_type
water	76:54	0:0	6	test_pixel
op	76:64	0:0	6	.
water	76:65	0:0	6	colour_type
water	76:77	0:0	4	;
call	77:9	77:30	4	png_error
arg	77:19	77:21	5	pp
water	77:19	0:0	6	pp
arg	77:23	77:30	5	message
water	77:23	0:0	6	message
water	77:31	0:0	4	;
water	78:6	0:0	4	}
if	79:6	87:6	2	(test_pixel . bit_depth != dp -> output_bit_depth)
cond	79:10	79:38	3	test_pixel . bit_depth != dp -> output_bit_depth
water	79:10	0:0	4	test_pixel
op	79:20	0:0	4	.
water	79:21	0:0	4	bit_depth
op	79:31	0:0	4	!=
water	79:34	0:0	4	dp
op	79:36	0:0	4	->
water	79:38	0:0	4	output_bit_depth
stmts	80:6	87:6	3	
water	80:6	0:0	4	{
decl	81:9	81:26	4	char	message[128]
decl	82:9	82:71	4	size_t	pos
op	82:20	0:0	4	=
call	82:22	82:70	5	safecat
arg	82:30	82:37	6	message
water	82:30	0:0	7	message
arg	82:39	82:53	6	sizeofmessage
op	82:39	0:0	7	sizeof
water	82:46	0:0	7	message
arg	82:55	82:56	6	0
water	82:55	0:0	7	0
arg	82:58	82:70	6	"bit depth "
water	82:58	0:0	7	"bit depth "
water	83:9	0:0	4	pos
op	83:13	0:0	4	=
call	83:15	83:74	4	safecatn
arg	83:24	83:31	5	message
water	83:24	0:0	6	message
arg	83:33	83:47	5	sizeofmessage
op	83:33	0:0	6	sizeof
water	83:40	0:0	6	message
arg	83:49	83:52	5	pos
water	83:49	0:0	6	pos
arg	83:54	83:74	5	dp->output_bit_depth
water	83:54	0:0	6	dp
op	83:56	0:0	6	->
water	83:58	0:0	6	output_bit_depth
water	83:75	0:0	4	;
water	84:9	0:0	4	pos
op	84:13	0:0	4	=
call	84:15	84:65	4	safecat
arg	84:23	84:30	5	message
water	84:23	0:0	6	message
arg	84:32	84:46	5	sizeofmessage
op	84:32	0:0	6	sizeof
water	84:39	0:0	6	message
arg	84:48	84:51	5	pos
water	84:48	0:0	6	pos
arg	84:53	84:65	5	" expected "
water	84:53	0:0	6	" expected "
water	84:66	0:0	4	;
water	85:9	0:0	4	pos
op	85:13	0:0	4	=
call	85:15	85:74	4	safecatn
arg	85:24	85:31	5	message
water	85:24	0:0	6	message
arg	85:33	85:47	5	sizeofmessage
op	85:33	0:0	6	sizeof
water	85:40	0:0	6	message
arg	85:49	85:52	5	pos
water	85:49	0:0	6	pos
arg	85:54	85:74	5	test_pixel.bit_depth
water	85:54	0:0	6	test_pixel
op	85:64	0:0	6	.
water	85:65	0:0	6	bit_depth
water	85:75	0:0	4	;
call	86:9	86:30	4	png_error
arg	86:19	86:21	5	pp
water	86:19	0:0	6	pp
arg	86:23	86:30	5	message
water	86:23	0:0	6	message
water	86:31	0:0	4	;
water	87:6	0:0	4	}
if	91:6	95:6	2	(test_pixel . colour_type == PNG_COLOR_TYPE_PALETTE)
cond	91:10	91:36	3	test_pixel . colour_type == PNG_COLOR_TYPE_PALETTE
water	91:10	0:0	4	test_pixel
op	91:20	0:0	4	.
water	91:21	0:0	4	colour_type
op	91:33	0:0	4	==
water	91:36	0:0	4	PNG_COLOR_TYPE_PALETTE
stmts	92:6	95:6	3	
water	92:6	0:0	4	{
if	93:9	94:75	4	(test_pixel . sample_depth != 8)
cond	93:13	93:40	5	test_pixel . sample_depth != 8
water	93:13	0:0	6	test_pixel
op	93:23	0:0	6	.
water	93:24	0:0	6	sample_depth
op	93:37	0:0	6	!=
water	93:40	0:0	6	8
stmts	94:12	94:75	5	
call	94:12	94:74	6	png_error
arg	94:22	94:24	7	pp
water	94:22	0:0	8	pp
arg	94:26	94:74	7	"pngvalid: internal: palette sample depth not 8"
water	94:26	0:0	8	"pngvalid: internal: palette sample depth not 8"
water	94:75	0:0	6	;
water	95:6	0:0	4	}
else	96:6	105:6	2
stmts	96:11	105:6	3	
if	96:11	105:6	4	(test_pixel . sample_depth != dp -> output_bit_depth)
cond	96:15	96:46	5	test_pixel . sample_depth != dp -> output_bit_depth
water	96:15	0:0	6	test_pixel
op	96:25	0:0	6	.
water	96:26	0:0	6	sample_depth
op	96:39	0:0	6	!=
water	96:42	0:0	6	dp
op	96:44	0:0	6	->
water	96:46	0:0	6	output_bit_depth
stmts	97:6	105:6	5	
water	97:6	0:0	6	{
decl	98:9	98:26	6	char	message[128]
decl	99:9	100:38	6	size_t	pos
op	99:20	0:0	6	=
call	99:22	100:37	7	safecat
arg	99:30	99:37	8	message
water	99:30	0:0	9	message
arg	99:39	99:53	8	sizeofmessage
op	99:39	0:0	9	sizeof
water	99:46	0:0	9	message
arg	99:55	99:56	8	0
water	99:55	0:0	9	0
arg	100:12	100:37	8	"internal: sample depth "
water	100:12	0:0	9	"internal: sample depth "
water	101:9	0:0	6	pos
op	101:13	0:0	6	=
call	101:15	101:74	6	safecatn
arg	101:24	101:31	7	message
water	101:24	0:0	8	message
arg	101:33	101:47	7	sizeofmessage
op	101:33	0:0	8	sizeof
water	101:40	0:0	8	message
arg	101:49	101:52	7	pos
water	101:49	0:0	8	pos
arg	101:54	101:74	7	dp->output_bit_depth
water	101:54	0:0	8	dp
op	101:56	0:0	8	->
water	101:58	0:0	8	output_bit_depth
water	101:75	0:0	6	;
water	102:9	0:0	6	pos
op	102:13	0:0	6	=
call	102:15	102:65	6	safecat
arg	102:23	102:30	7	message
water	102:23	0:0	8	message
arg	102:32	102:46	7	sizeofmessage
op	102:32	0:0	8	sizeof
water	102:39	0:0	8	message
arg	102:48	102:51	7	pos
water	102:48	0:0	8	pos
arg	102:53	102:65	7	" expected "
water	102:53	0:0	8	" expected "
water	102:66	0:0	6	;
water	103:9	0:0	6	pos
op	103:13	0:0	6	=
call	103:15	103:77	6	safecatn
arg	103:24	103:31	7	message
water	103:24	0:0	8	message
arg	103:33	103:47	7	sizeofmessage
op	103:33	0:0	8	sizeof
water	103:40	0:0	8	message
arg	103:49	103:52	7	pos
water	103:49	0:0	8	pos
arg	103:54	103:77	7	test_pixel.sample_depth
water	103:54	0:0	8	test_pixel
op	103:64	0:0	8	.
water	103:65	0:0	8	sample_depth
water	103:78	0:0	6	;
call	104:9	104:30	6	png_error
arg	104:19	104:21	7	pp
water	104:19	0:0	8	pp
arg	104:23	104:30	7	message
water	104:23	0:0	8	message
water	104:31	0:0	6	;
water	105:6	0:0	6	}
water	106:3	0:0	2	}
