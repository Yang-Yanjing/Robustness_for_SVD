decl	1:7	1:26	0	int	have_gc
op	1:19	0:0	0	=
water	1:21	0:0	0	FALSE
func	2:0	388:0	0	int	main
params	2:8	0:0	1	
param	2:9	2:17	2	int	argc
param	2:19	2:30	2	char * *	argv
stmnts	0:0	387:12	1	
decl	5:4	5:20	2	char	tmpline[80]
decl	7:4	7:26	2	char	*p
water	7:11	0:0	2	,
decl	7:4	7:26	2	char	*bgstr
op	7:20	0:0	2	=
water	7:22	0:0	2	NULL
decl	8:4	8:22	2	int	rc
water	8:10	0:0	2	,
decl	8:4	8:22	2	int	alen
water	8:16	0:0	2	,
decl	8:4	8:22	2	int	flen
decl	9:4	9:17	2	int	error
op	9:14	0:0	2	=
water	9:16	0:0	2	0
decl	10:4	10:22	2	int	timing
op	10:15	0:0	2	=
water	10:17	0:0	2	FALSE
decl	11:4	11:23	2	int	have_bg
op	11:16	0:0	2	=
water	11:18	0:0	2	FALSE
decl	13:4	13:20	2	int	loop
op	13:13	0:0	2	=
water	13:15	0:0	2	FALSE
decl	14:4	14:27	2	long	loop_interval
op	14:23	0:0	2	=
op	14:25	0:0	2	-
water	14:26	0:0	2	1
decl	16:4	16:23	2	double	LUT_exponent
decl	17:4	17:29	2	double	CRT_exponent
op	17:24	0:0	2	=
water	17:26	0:0	2	2
op	17:27	0:0	2	.
water	17:28	0:0	2	2
decl	18:4	18:35	2	double	default_display_exponent
decl	19:4	19:12	2	XEvent	e
decl	20:4	20:12	2	KeySym	k
water	24:4	0:0	2	displayname
op	24:16	0:0	2	=
water	24:18	0:0	2	(
water	24:19	0:0	2	char
op	24:24	0:0	2	*
water	24:25	0:0	2	)
water	24:26	0:0	2	NULL
water	24:30	0:0	2	;
water	25:4	0:0	2	filename
op	25:13	0:0	2	=
water	25:15	0:0	2	(
water	25:16	0:0	2	char
op	25:21	0:0	2	*
water	25:22	0:0	2	)
water	25:23	0:0	2	NULL
water	25:27	0:0	2	;
call	26:4	26:48	2	memset
arg	26:11	26:22	3	&rpng2_info
op	26:11	0:0	4	&
water	26:12	0:0	4	rpng2_info
arg	26:24	26:25	3	0
water	26:24	0:0	4	0
arg	26:27	26:48	3	sizeof(mainprog_info)
op	26:27	0:0	4	sizeof
water	26:33	0:0	4	(
water	26:34	0:0	4	mainprog_info
water	26:47	0:0	4	)
water	26:49	0:0	2	;
water	34:4	0:0	2	LUT_exponent
op	34:17	0:0	2	=
water	34:19	0:0	2	1
op	34:20	0:0	2	.
water	34:21	0:0	2	0
op	34:23	0:0	2	/
water	34:25	0:0	2	2
op	34:26	0:0	2	.
water	34:27	0:0	2	2
water	34:28	0:0	2	;
water	40:4	0:0	2	LUT_exponent
op	40:17	0:0	2	=
water	40:19	0:0	2	1
op	40:20	0:0	2	.
water	40:21	0:0	2	0
op	40:23	0:0	2	/
water	40:25	0:0	2	1
op	40:26	0:0	2	.
water	40:27	0:0	2	7
water	40:28	0:0	2	;
water	43:4	0:0	2	infile
op	43:11	0:0	2	=
call	43:13	43:55	2	fopen
arg	43:19	43:50	3	"/etc/config/system.glGammaVal"
water	43:19	0:0	4	"/etc/config/system.glGammaVal"
arg	43:52	43:55	3	"r"
water	43:52	0:0	4	"r"
water	43:56	0:0	2	;
if	44:4	51:4	2	(infile)
cond	44:8	44:8	3	infile
water	44:8	0:0	4	infile
stmts	44:16	51:4	3	
water	44:16	0:0	4	{
decl	45:8	45:24	4	double	sgi_gamma
call	46:8	46:33	4	fgets
arg	46:14	46:21	5	tmpline
water	46:14	0:0	6	tmpline
arg	46:23	46:25	5	80
water	46:23	0:0	6	80
arg	46:27	46:33	5	infile
water	46:27	0:0	6	infile
water	46:34	0:0	4	;
call	47:8	47:21	4	fclose
arg	47:15	47:21	5	infile
water	47:15	0:0	6	infile
water	47:22	0:0	4	;
water	48:8	0:0	4	sgi_gamma
op	48:18	0:0	4	=
call	48:20	48:32	4	atof
arg	48:25	48:32	5	tmpline
water	48:25	0:0	6	tmpline
water	48:33	0:0	4	;
if	49:8	50:42	4	(sgi_gamma > 0 . 0)
cond	49:12	49:26	5	sgi_gamma > 0 . 0
water	49:12	0:0	6	sgi_gamma
op	49:22	0:0	6	>
water	49:24	0:0	6	0
op	49:25	0:0	6	.
water	49:26	0:0	6	0
stmts	50:12	50:42	5	
water	50:12	0:0	6	LUT_exponent
op	50:25	0:0	6	=
water	50:27	0:0	6	1
op	50:28	0:0	6	.
water	50:29	0:0	6	0
op	50:31	0:0	6	/
water	50:33	0:0	6	sgi_gamma
water	50:42	0:0	6	;
water	51:4	0:0	4	}
water	53:4	0:0	2	LUT_exponent
op	53:17	0:0	2	=
water	53:19	0:0	2	1
op	53:20	0:0	2	.
water	53:21	0:0	2	8
op	53:23	0:0	2	/
water	53:25	0:0	2	2
op	53:26	0:0	2	.
water	53:27	0:0	2	61
water	53:29	0:0	2	;
water	59:4	0:0	2	LUT_exponent
op	59:17	0:0	2	=
water	59:19	0:0	2	1
op	59:20	0:0	2	.
water	59:21	0:0	2	0
water	59:22	0:0	2	;
water	62:4	0:0	2	default_display_exponent
op	62:29	0:0	2	=
water	62:31	0:0	2	LUT_exponent
op	62:44	0:0	2	*
water	62:46	0:0	2	CRT_exponent
water	62:58	0:0	2	;
if	67:4	68:45	2	(( p =getenv ("SCREEN_GAMMA" ) ) != NULL)
cond	67:8	67:40	3	( p =getenv ("SCREEN_GAMMA" ) ) != NULL
water	67:8	0:0	4	(
water	67:9	0:0	4	p
op	67:11	0:0	4	=
call	67:13	67:34	4	getenv
arg	67:20	67:34	5	"SCREEN_GAMMA"
water	67:20	0:0	6	"SCREEN_GAMMA"
water	67:35	0:0	4	)
op	67:37	0:0	4	!=
water	67:40	0:0	4	NULL
stmts	68:8	68:45	3	
water	68:8	0:0	4	rpng2_info
op	68:18	0:0	4	.
water	68:19	0:0	4	display_exponent
op	68:36	0:0	4	=
call	68:38	68:44	4	atof
arg	68:43	68:44	5	p
water	68:43	0:0	6	p
water	68:45	0:0	4	;
else	69:4	70:62	2
stmts	70:8	70:62	3	
water	70:8	0:0	4	rpng2_info
op	70:18	0:0	4	.
water	70:19	0:0	4	display_exponent
op	70:36	0:0	4	=
water	70:38	0:0	4	default_display_exponent
water	70:62	0:0	4	;
while	72:4	142:4	2	(* ++ argv && ! error)
cond	72:11	72:23	3	* ++ argv && ! error
op	72:11	0:0	4	*
op	72:12	0:0	4	++
water	72:14	0:0	4	argv
op	72:19	0:0	4	&&
op	72:22	0:0	4	!
water	72:23	0:0	4	error
stmts	72:30	142:4	3	
water	72:30	0:0	4	{
if	73:8	78:8	4	(!strncmp (* argv ,"-display" ,2 ))
cond	73:12	73:41	5	!strncmp (* argv ,"-display" ,2 )
op	73:12	0:0	6	!
call	73:13	73:41	6	strncmp
arg	73:21	73:26	7	*argv
op	73:21	0:0	8	*
water	73:22	0:0	8	argv
arg	73:28	73:38	7	"-display"
water	73:28	0:0	8	"-display"
arg	73:40	73:41	7	2
water	73:40	0:0	8	2
stmts	73:44	78:8	5	
water	73:44	0:0	6	{
if	74:12	75:23	6	(! * ++ argv)
cond	74:16	74:20	7	! * ++ argv
op	74:16	0:0	8	!
op	74:17	0:0	8	*
op	74:18	0:0	8	++
water	74:20	0:0	8	argv
stmts	75:16	75:23	7	
op	75:16	0:0	8	++
water	75:18	0:0	8	error
water	75:23	0:0	8	;
else	76:12	77:35	6
stmts	77:16	77:35	7	
water	77:16	0:0	8	displayname
op	77:28	0:0	8	=
op	77:30	0:0	8	*
water	77:31	0:0	8	argv
water	77:35	0:0	8	;
water	78:8	0:0	6	}
else	78:10	86:8	4
stmts	78:15	86:8	5	
if	78:15	86:8	6	(!strncmp (* argv ,"-gamma" ,2 ))
cond	78:19	78:46	7	!strncmp (* argv ,"-gamma" ,2 )
op	78:19	0:0	8	!
call	78:20	78:46	8	strncmp
arg	78:28	78:33	9	*argv
op	78:28	0:0	10	*
water	78:29	0:0	10	argv
arg	78:35	78:43	9	"-gamma"
water	78:35	0:0	10	"-gamma"
arg	78:45	78:46	9	2
water	78:45	0:0	10	2
stmts	78:49	86:8	7	
water	78:49	0:0	8	{
if	79:12	80:23	8	(! * ++ argv)
cond	79:16	79:20	9	! * ++ argv
op	79:16	0:0	10	!
op	79:17	0:0	10	*
op	79:18	0:0	10	++
water	79:20	0:0	10	argv
stmts	80:16	80:23	9	
op	80:16	0:0	10	++
water	80:18	0:0	10	error
water	80:23	0:0	10	;
else	81:12	85:12	8
stmts	81:17	85:12	9	
water	81:17	0:0	10	{
water	82:16	0:0	10	rpng2_info
op	82:26	0:0	10	.
water	82:27	0:0	10	display_exponent
op	82:44	0:0	10	=
call	82:46	82:56	10	atof
arg	82:51	82:56	11	*argv
op	82:51	0:0	12	*
water	82:52	0:0	12	argv
water	82:57	0:0	10	;
if	83:16	84:27	10	(rpng2_info . display_exponent <= 0 . 0)
cond	83:20	83:53	11	rpng2_info . display_exponent <= 0 . 0
water	83:20	0:0	12	rpng2_info
op	83:30	0:0	12	.
water	83:31	0:0	12	display_exponent
op	83:48	0:0	12	<=
water	83:51	0:0	12	0
op	83:52	0:0	12	.
water	83:53	0:0	12	0
stmts	84:20	84:27	11	
op	84:20	0:0	12	++
water	84:22	0:0	12	error
water	84:27	0:0	12	;
water	85:12	0:0	10	}
water	86:8	0:0	8	}
else	86:10	98:8	4
stmts	86:15	98:8	5	
if	86:15	98:8	6	(!strncmp (* argv ,"-bgcolor" ,4 ))
cond	86:19	86:48	7	!strncmp (* argv ,"-bgcolor" ,4 )
op	86:19	0:0	8	!
call	86:20	86:48	8	strncmp
arg	86:28	86:33	9	*argv
op	86:28	0:0	10	*
water	86:29	0:0	10	argv
arg	86:35	86:45	9	"-bgcolor"
water	86:35	0:0	10	"-bgcolor"
arg	86:47	86:48	9	4
water	86:47	0:0	10	4
stmts	86:51	98:8	7	
water	86:51	0:0	8	{
if	87:12	88:23	8	(! * ++ argv)
cond	87:16	87:20	9	! * ++ argv
op	87:16	0:0	10	!
op	87:17	0:0	10	*
op	87:18	0:0	10	++
water	87:20	0:0	10	argv
stmts	88:16	88:23	9	
op	88:16	0:0	10	++
water	88:18	0:0	10	error
water	88:23	0:0	10	;
else	89:12	97:12	8
stmts	89:17	97:12	9	
water	89:17	0:0	10	{
water	90:16	0:0	10	bgstr
op	90:22	0:0	10	=
op	90:24	0:0	10	*
water	90:25	0:0	10	argv
water	90:29	0:0	10	;
if	91:16	92:27	10	(strlen (bgstr ) != 7 || bgstr [ 0 ] != '#')
cond	91:20	91:54	11	strlen (bgstr ) != 7 || bgstr [ 0 ] != '#'
call	91:20	91:32	12	strlen
arg	91:27	91:32	13	bgstr
water	91:27	0:0	14	bgstr
op	91:34	0:0	12	!=
water	91:37	0:0	12	7
op	91:39	0:0	12	||
water	91:42	0:0	12	bgstr
op	91:47	0:0	12	[
water	91:48	0:0	12	0
op	91:49	0:0	12	]
op	91:51	0:0	12	!=
water	91:54	0:0	12	'#'
stmts	92:20	92:27	11	
op	92:20	0:0	12	++
water	92:22	0:0	12	error
water	92:27	0:0	12	;
else	93:16	96:16	10
stmts	93:21	96:16	11	
water	93:21	0:0	12	{
water	94:20	0:0	12	have_bg
op	94:28	0:0	12	=
water	94:30	0:0	12	TRUE
water	94:34	0:0	12	;
water	95:20	0:0	12	bg_image
op	95:29	0:0	12	=
water	95:31	0:0	12	FALSE
water	95:36	0:0	12	;
water	96:16	0:0	12	}
water	97:12	0:0	10	}
water	98:8	0:0	8	}
else	98:10	109:8	4
stmts	98:15	109:8	5	
if	98:15	109:8	6	(!strncmp (* argv ,"-bgpat" ,4 ))
cond	98:19	98:46	7	!strncmp (* argv ,"-bgpat" ,4 )
op	98:19	0:0	8	!
call	98:20	98:46	8	strncmp
arg	98:28	98:33	9	*argv
op	98:28	0:0	10	*
water	98:29	0:0	10	argv
arg	98:35	98:43	9	"-bgpat"
water	98:35	0:0	10	"-bgpat"
arg	98:45	98:46	9	4
water	98:45	0:0	10	4
stmts	98:49	109:8	7	
water	98:49	0:0	8	{
if	99:12	100:23	8	(! * ++ argv)
cond	99:16	99:20	9	! * ++ argv
op	99:16	0:0	10	!
op	99:17	0:0	10	*
op	99:18	0:0	10	++
water	99:20	0:0	10	argv
stmts	100:16	100:23	9	
op	100:16	0:0	10	++
water	100:18	0:0	10	error
water	100:23	0:0	10	;
else	101:12	108:12	8
stmts	101:17	108:12	9	
water	101:17	0:0	10	{
water	102:16	0:0	10	pat
op	102:20	0:0	10	=
call	102:22	102:32	10	atoi
arg	102:27	102:32	11	*argv
op	102:27	0:0	12	*
water	102:28	0:0	12	argv
water	102:33	0:0	10	;
if	103:16	106:16	10	(pat >= 0 && pat < num_bgpat)
cond	103:20	103:38	11	pat >= 0 && pat < num_bgpat
water	103:20	0:0	12	pat
op	103:24	0:0	12	>=
water	103:27	0:0	12	0
op	103:29	0:0	12	&&
water	103:32	0:0	12	pat
op	103:36	0:0	12	<
water	103:38	0:0	12	num_bgpat
stmts	103:49	106:16	11	
water	103:49	0:0	12	{
water	104:20	0:0	12	bg_image
op	104:29	0:0	12	=
water	104:31	0:0	12	TRUE
water	104:35	0:0	12	;
water	105:20	0:0	12	have_bg
op	105:28	0:0	12	=
water	105:30	0:0	12	FALSE
water	105:35	0:0	12	;
water	106:16	0:0	12	}
else	106:18	107:27	10
stmts	107:20	107:27	11	
op	107:20	0:0	12	++
water	107:22	0:0	12	error
water	107:27	0:0	12	;
water	108:12	0:0	10	}
water	109:8	0:0	8	}
else	109:10	116:8	4
stmts	109:15	116:8	5	
if	109:15	116:8	6	(!strncmp (* argv ,"-usleep" ,2 ))
cond	109:19	109:47	7	!strncmp (* argv ,"-usleep" ,2 )
op	109:19	0:0	8	!
call	109:20	109:47	8	strncmp
arg	109:28	109:33	9	*argv
op	109:28	0:0	10	*
water	109:29	0:0	10	argv
arg	109:35	109:44	9	"-usleep"
water	109:35	0:0	10	"-usleep"
arg	109:46	109:47	9	2
water	109:46	0:0	10	2
stmts	109:50	116:8	7	
water	109:50	0:0	8	{
if	110:12	111:23	8	(! * ++ argv)
cond	110:16	110:20	9	! * ++ argv
op	110:16	0:0	10	!
op	110:17	0:0	10	*
op	110:18	0:0	10	++
water	110:20	0:0	10	argv
stmts	111:16	111:23	9	
op	111:16	0:0	10	++
water	111:18	0:0	10	error
water	111:23	0:0	10	;
else	112:12	115:12	8
stmts	112:17	115:12	9	
water	112:17	0:0	10	{
water	113:16	0:0	10	usleep_duration
op	113:32	0:0	10	=
water	113:34	0:0	10	(
water	113:35	0:0	10	ulg
water	113:38	0:0	10	)
call	113:39	113:49	10	atol
arg	113:44	113:49	11	*argv
op	113:44	0:0	12	*
water	113:45	0:0	12	argv
water	113:50	0:0	10	;
water	114:16	0:0	10	demo_timing
op	114:28	0:0	10	=
water	114:30	0:0	10	TRUE
water	114:34	0:0	10	;
water	115:12	0:0	10	}
water	116:8	0:0	8	}
else	116:10	118:8	4
stmts	116:15	118:8	5	
if	116:15	118:8	6	(!strncmp (* argv ,"-pause" ,2 ))
cond	116:19	116:46	7	!strncmp (* argv ,"-pause" ,2 )
op	116:19	0:0	8	!
call	116:20	116:46	8	strncmp
arg	116:28	116:33	9	*argv
op	116:28	0:0	10	*
water	116:29	0:0	10	argv
arg	116:35	116:43	9	"-pause"
water	116:35	0:0	10	"-pause"
arg	116:45	116:46	9	2
water	116:45	0:0	10	2
stmts	116:49	118:8	7	
water	116:49	0:0	8	{
water	117:12	0:0	8	pause_after_pass
op	117:29	0:0	8	=
water	117:31	0:0	8	TRUE
water	117:35	0:0	8	;
water	118:8	0:0	8	}
else	118:10	121:8	4
stmts	118:15	121:8	5	
if	118:15	121:8	6	(!strncmp (* argv ,"-timing" ,2 ))
cond	118:19	118:47	7	!strncmp (* argv ,"-timing" ,2 )
op	118:19	0:0	8	!
call	118:20	118:47	8	strncmp
arg	118:28	118:33	9	*argv
op	118:28	0:0	10	*
water	118:29	0:0	10	argv
arg	118:35	118:44	9	"-timing"
water	118:35	0:0	10	"-timing"
arg	118:46	118:47	9	2
water	118:46	0:0	10	2
stmts	118:50	121:8	7	
water	118:50	0:0	8	{
water	119:12	0:0	8	timing
op	119:19	0:0	8	=
water	119:21	0:0	8	TRUE
water	119:25	0:0	8	;
water	121:8	0:0	8	}
else	121:10	134:8	4
stmts	121:15	134:8	5	
if	121:15	134:8	6	(!strncmp (* argv ,"-loop" ,2 ))
cond	121:19	121:45	7	!strncmp (* argv ,"-loop" ,2 )
op	121:19	0:0	8	!
call	121:20	121:45	8	strncmp
arg	121:28	121:33	9	*argv
op	121:28	0:0	10	*
water	121:29	0:0	10	argv
arg	121:35	121:42	9	"-loop"
water	121:35	0:0	10	"-loop"
arg	121:44	121:45	9	2
water	121:44	0:0	10	2
stmts	121:48	134:8	7	
water	121:48	0:0	8	{
water	122:12	0:0	8	loop
op	122:17	0:0	8	=
water	122:19	0:0	8	TRUE
water	122:23	0:0	8	;
if	123:12	124:33	8	(! argv [ 1 ] || !is_number (argv [ 1 ] ))
cond	123:16	123:46	9	! argv [ 1 ] || !is_number (argv [ 1 ] )
op	123:16	0:0	10	!
water	123:17	0:0	10	argv
op	123:21	0:0	10	[
water	123:22	0:0	10	1
op	123:23	0:0	10	]
op	123:25	0:0	10	||
op	123:28	0:0	10	!
call	123:29	123:46	10	is_number
arg	123:39	123:46	11	argv[1]
water	123:39	0:0	12	argv
op	123:43	0:0	12	[
water	123:44	0:0	12	1
op	123:45	0:0	12	]
stmts	124:16	124:33	9	
water	124:16	0:0	10	loop_interval
op	124:30	0:0	10	=
water	124:32	0:0	10	2
water	124:33	0:0	10	;
else	125:12	132:12	8
stmts	125:17	132:12	9	
water	125:17	0:0	10	{
op	126:16	0:0	10	++
water	126:18	0:0	10	argv
water	126:22	0:0	10	;
water	127:16	0:0	10	loop_interval
op	127:30	0:0	10	=
call	127:32	127:42	10	atol
arg	127:37	127:42	11	*argv
op	127:37	0:0	12	*
water	127:38	0:0	12	argv
water	127:43	0:0	10	;
if	128:16	129:37	10	(loop_interval < 0)
cond	128:20	128:36	11	loop_interval < 0
water	128:20	0:0	12	loop_interval
op	128:34	0:0	12	<
water	128:36	0:0	12	0
stmts	129:20	129:37	11	
water	129:20	0:0	12	loop_interval
op	129:34	0:0	12	=
water	129:36	0:0	12	2
water	129:37	0:0	12	;
else	130:16	131:42	10
stmts	130:21	131:42	11	
if	130:21	131:42	12	(loop_interval > 100000)
cond	130:25	130:41	13	loop_interval > 100000
water	130:25	0:0	14	loop_interval
op	130:39	0:0	14	>
water	130:41	0:0	14	100000
stmts	131:20	131:42	13	
water	131:20	0:0	14	loop_interval
op	131:34	0:0	14	=
water	131:36	0:0	14	100000
water	131:42	0:0	14	;
water	132:12	0:0	10	}
water	134:8	0:0	8	}
else	134:10	141:8	4
stmts	134:15	141:8	5	
water	134:15	0:0	6	{
if	135:12	139:12	6	(* * argv != '-')
cond	135:16	135:26	7	* * argv != '-'
op	135:16	0:0	8	*
op	135:17	0:0	8	*
water	135:18	0:0	8	argv
op	135:23	0:0	8	!=
water	135:26	0:0	8	'-'
stmts	135:31	139:12	7	
water	135:31	0:0	8	{
water	136:16	0:0	8	filename
op	136:25	0:0	8	=
op	136:27	0:0	8	*
water	136:28	0:0	8	argv
water	136:32	0:0	8	;
if	137:16	138:27	8	(argv [ 1 ])
cond	137:20	137:26	9	argv [ 1 ]
water	137:20	0:0	10	argv
op	137:24	0:0	10	[
water	137:25	0:0	10	1
op	137:26	0:0	10	]
stmts	138:20	138:27	9	
op	138:20	0:0	10	++
water	138:22	0:0	10	error
water	138:27	0:0	10	;
water	139:12	0:0	8	}
else	139:14	140:23	6
stmts	140:16	140:23	7	
op	140:16	0:0	8	++
water	140:18	0:0	8	error
water	140:23	0:0	8	;
water	141:8	0:0	6	}
water	142:4	0:0	4	}
if	143:4	144:15	2	(! filename)
cond	143:8	143:9	3	! filename
op	143:8	0:0	4	!
water	143:9	0:0	4	filename
stmts	144:8	144:15	3	
op	144:8	0:0	4	++
water	144:10	0:0	4	error
water	144:15	0:0	4	;
if	146:4	181:4	2	(error)
cond	146:8	146:8	3	error
water	146:8	0:0	4	error
stmts	146:15	181:4	3	
water	146:15	0:0	4	{
call	147:8	147:70	4	fprintf
arg	147:16	147:22	5	stderr
water	147:16	0:0	6	stderr
arg	147:24	147:42	5	"\n%s %s:  %s\n\n"
water	147:24	0:0	6	"\n%s %s:  %s\n\n"
arg	147:44	147:52	5	PROGNAME
water	147:44	0:0	6	PROGNAME
arg	147:54	147:61	5	VERSION
water	147:54	0:0	6	VERSION
arg	147:63	147:70	5	appname
water	147:63	0:0	6	appname
water	147:71	0:0	4	;
call	148:8	148:30	4	readpng2_version_info
water	148:31	0:0	4	;
call	149:8	179:75	4	fprintf
arg	149:16	149:22	5	stderr
water	149:16	0:0	6	stderr
arg	149:24	178:14	5	"\n""Usage:  %s [-display xdpy] [-gamma exp] [-bgcolor bg | -bgpat pat]\n""        %*s [-usleep dur | -timing] [-pause] [-loop [sec]] file.png\n\n""        %*s [-usleep dur | -timing] [-pause] file.png\n\n""    xdpy\tname of the target X display (e.g., ``hostname:0'')\n""    exp \ttransfer-function exponent (``gamma'') of the display\n""\t\t  system in floating-point format (e.g., ``%.1f''); equal\n""\t\t  to the product of the lookup-table exponent (varies)\n""\t\t  and the CRT exponent (usually 2.2); must be positive\n""    bg  \tdesired background color in 7-character hex RGB format\n""\t\t  (e.g., ``#ff7700'' for orange:  same as HTML colors);\n""\t\t  used with transparent images; overrides -bgpat\n""    pat \tdesired background pattern number (0-%d); used with\n""\t\t  transparent images; overrides -bgcolor\n""    -loop\tloops through background images after initial display\n""\t\t  is complete (depends on -bgpat)\n""    sec \tseconds to display each background image (default = 2)\n""    dur \tduration in microseconds to wait after displaying each\n""\t\t  row (for demo purposes)\n""    -timing\tenables delay for every block read, to simulate modem\n""\t\t  download of image (~36 Kbps)\n""    -pause\tpauses after displaying each pass until mouse clicked\n""\nPress Q, Esc or mouse button 1 (within image window, after image\n""is displayed) to quit.\n""\n"
water	149:24	0:0	6	"\n"
water	150:10	0:0	6	"Usage:  %s [-display xdpy] [-gamma exp] [-bgcolor bg | -bgpat pat]\n"
water	152:10	0:0	6	"        %*s [-usleep dur | -timing] [-pause] [-loop [sec]] file.png\n\n"
water	154:10	0:0	6	"        %*s [-usleep dur | -timing] [-pause] file.png\n\n"
water	156:10	0:0	6	"    xdpy\tname of the target X display (e.g., ``hostname:0'')\n"
water	157:10	0:0	6	"    exp \ttransfer-function exponent (``gamma'') of the display\n"
water	158:10	0:0	6	"\t\t  system in floating-point format (e.g., ``%.1f''); equal\n"
water	159:10	0:0	6	"\t\t  to the product of the lookup-table exponent (varies)\n"
water	160:10	0:0	6	"\t\t  and the CRT exponent (usually 2.2); must be positive\n"
water	161:10	0:0	6	"    bg  \tdesired background color in 7-character hex RGB format\n"
water	162:10	0:0	6	"\t\t  (e.g., ``#ff7700'' for orange:  same as HTML colors);\n"
water	163:10	0:0	6	"\t\t  used with transparent images; overrides -bgpat\n"
water	164:10	0:0	6	"    pat \tdesired background pattern number (0-%d); used with\n"
water	165:10	0:0	6	"\t\t  transparent images; overrides -bgcolor\n"
water	167:10	0:0	6	"    -loop\tloops through background images after initial display\n"
water	168:10	0:0	6	"\t\t  is complete (depends on -bgpat)\n"
water	169:10	0:0	6	"    sec \tseconds to display each background image (default = 2)\n"
water	171:10	0:0	6	"    dur \tduration in microseconds to wait after displaying each\n"
water	172:10	0:0	6	"\t\t  row (for demo purposes)\n"
water	173:10	0:0	6	"    -timing\tenables delay for every block read, to simulate modem\n"
water	174:10	0:0	6	"\t\t  download of image (~36 Kbps)\n"
water	175:10	0:0	6	"    -pause\tpauses after displaying each pass until mouse clicked\n"
water	176:10	0:0	6	"\nPress Q, Esc or mouse button 1 (within image window, after image\n"
water	177:10	0:0	6	"is displayed) to quit.\n"
water	178:10	0:0	6	"\n"
arg	178:16	178:24	5	PROGNAME
water	178:16	0:0	6	PROGNAME
arg	179:10	179:31	5	(int)strlen(PROGNAME)
water	179:10	0:0	6	(
water	179:11	0:0	6	int
water	179:14	0:0	6	)
call	179:15	179:30	6	strlen
arg	179:22	179:30	7	PROGNAME
water	179:22	0:0	8	PROGNAME
arg	179:33	179:36	5	" "
water	179:33	0:0	6	" "
arg	179:38	179:62	5	default_display_exponent
water	179:38	0:0	6	default_display_exponent
arg	179:64	179:75	5	num_bgpat-1
water	179:64	0:0	6	num_bgpat
op	179:73	0:0	6	-
water	179:74	0:0	6	1
water	179:76	0:0	4	;
call	180:8	180:14	4	exit
arg	180:13	180:14	5	1
water	180:13	0:0	6	1
water	180:15	0:0	4	;
water	181:4	0:0	4	}
if	182:4	185:4	2	(! ( infile =fopen (filename ,"rb" ) ))
cond	182:8	182:40	3	! ( infile =fopen (filename ,"rb" ) )
op	182:8	0:0	4	!
water	182:9	0:0	4	(
water	182:10	0:0	4	infile
op	182:17	0:0	4	=
call	182:19	182:39	4	fopen
arg	182:25	182:33	5	filename
water	182:25	0:0	6	filename
arg	182:35	182:39	5	"rb"
water	182:35	0:0	6	"rb"
water	182:40	0:0	4	)
stmts	182:43	185:4	3	
water	182:43	0:0	4	{
call	183:8	183:74	4	fprintf
arg	183:16	183:22	5	stderr
water	183:16	0:0	6	stderr
arg	183:24	183:64	5	PROGNAME":  can't open PNG file [%s]\n"
water	183:24	0:0	6	PROGNAME
water	183:33	0:0	6	":  can't open PNG file [%s]\n"
arg	183:66	183:74	5	filename
water	183:66	0:0	6	filename
water	183:75	0:0	4	;
op	184:8	0:0	4	++
water	184:10	0:0	4	error
water	184:15	0:0	4	;
water	185:4	0:0	4	}
else	185:6	219:4	2
stmts	185:11	219:4	3	
water	185:11	0:0	4	{
water	186:8	0:0	4	incount
op	186:16	0:0	4	=
call	186:18	186:51	4	fread
arg	186:24	186:29	5	inbuf
water	186:24	0:0	6	inbuf
arg	186:31	186:32	5	1
water	186:31	0:0	6	1
arg	186:34	186:43	5	INBUFSIZE
water	186:34	0:0	6	INBUFSIZE
arg	186:45	186:51	5	infile
water	186:45	0:0	6	infile
water	186:52	0:0	4	;
if	187:8	192:8	4	(incount < 8 || !readpng2_check_sig (inbuf ,8 ))
cond	187:12	187:55	5	incount < 8 || !readpng2_check_sig (inbuf ,8 )
water	187:12	0:0	6	incount
op	187:20	0:0	6	<
water	187:22	0:0	6	8
op	187:24	0:0	6	||
op	187:27	0:0	6	!
call	187:28	187:55	6	readpng2_check_sig
arg	187:47	187:52	7	inbuf
water	187:47	0:0	8	inbuf
arg	187:54	187:55	7	8
water	187:54	0:0	8	8
stmts	187:58	192:8	5	
water	187:58	0:0	6	{
call	188:12	190:22	6	fprintf
arg	188:20	188:26	7	stderr
water	188:20	0:0	8	stderr
arg	188:28	189:64	7	PROGNAME":  [%s] is not a PNG file: incorrect signature\n"
water	188:28	0:0	8	PROGNAME
water	189:14	0:0	8	":  [%s] is not a PNG file: incorrect signature\n"
arg	190:14	190:22	7	filename
water	190:14	0:0	8	filename
water	190:23	0:0	6	;
op	191:12	0:0	6	++
water	191:14	0:0	6	error
water	191:19	0:0	6	;
water	192:8	0:0	6	}
else	192:10	207:8	4
stmts	192:15	207:8	5	
if	192:15	207:8	6	(( rc =readpng2_init (& rpng2_info ) ) != 0)
cond	192:19	192:56	7	( rc =readpng2_init (& rpng2_info ) ) != 0
water	192:19	0:0	8	(
water	192:20	0:0	8	rc
op	192:23	0:0	8	=
call	192:25	192:50	8	readpng2_init
arg	192:39	192:50	9	&rpng2_info
op	192:39	0:0	10	&
water	192:40	0:0	10	rpng2_info
water	192:51	0:0	8	)
op	192:53	0:0	8	!=
water	192:56	0:0	8	0
stmts	192:59	207:8	7	
water	192:59	0:0	8	{
switch	193:12	205:12	8	(rc)
cond	193:20	193:20	9	rc
water	193:20	0:0	10	rc
stmts	193:24	205:12	9	
water	193:24	0:0	10	{
label	194:16	194:22	10	case 2 :
call	195:20	196:73	10	fprintf
arg	195:28	195:34	11	stderr
water	195:28	0:0	12	stderr
arg	195:36	196:63	11	PROGNAME":  [%s] has bad IHDR (libpng longjmp)\n"
water	195:36	0:0	12	PROGNAME
water	196:22	0:0	12	":  [%s] has bad IHDR (libpng longjmp)\n"
arg	196:65	196:73	11	filename
water	196:65	0:0	12	filename
water	196:74	0:0	10	;
break	197:20	197:25	10	
label	198:16	198:22	10	case 4 :
call	199:20	199:71	10	fprintf
arg	199:28	199:34	11	stderr
water	199:28	0:0	12	stderr
arg	199:36	199:71	11	PROGNAME":  insufficient memory\n"
water	199:36	0:0	12	PROGNAME
water	199:45	0:0	12	":  insufficient memory\n"
water	199:72	0:0	10	;
break	200:20	200:25	10	
label	201:16	201:23	10	default :
call	202:20	203:58	10	fprintf
arg	202:28	202:34	11	stderr
water	202:28	0:0	12	stderr
arg	202:36	203:58	11	PROGNAME":  unknown readpng2_init() error\n"
water	202:36	0:0	12	PROGNAME
water	203:22	0:0	12	":  unknown readpng2_init() error\n"
water	203:59	0:0	10	;
break	204:20	204:25	10	
water	205:12	0:0	10	}
op	206:12	0:0	8	++
water	206:14	0:0	8	error
water	206:19	0:0	8	;
water	207:8	0:0	8	}
else	207:10	216:8	4
stmts	207:15	216:8	5	
water	207:15	0:0	6	{
call	208:12	208:60	6	Trace
arg	208:18	208:60	7	(stderr,"about to call XOpenDisplay()\n")
water	208:18	0:0	8	(
water	208:19	0:0	8	stderr
water	208:25	0:0	8	,
water	208:27	0:0	8	"about to call XOpenDisplay()\n"
water	208:59	0:0	8	)
water	209:12	0:0	6	display
op	209:20	0:0	6	=
call	209:22	209:46	6	XOpenDisplay
arg	209:35	209:46	7	displayname
water	209:35	0:0	8	displayname
water	209:47	0:0	6	;
if	210:12	215:12	6	(! display)
cond	210:16	210:17	7	! display
op	210:16	0:0	8	!
water	210:17	0:0	8	display
stmts	210:26	215:12	7	
water	210:26	0:0	8	{
call	211:16	211:44	8	readpng2_cleanup
arg	211:33	211:44	9	&rpng2_info
op	211:33	0:0	10	&
water	211:34	0:0	10	rpng2_info
water	211:45	0:0	8	;
call	212:16	213:54	8	fprintf
arg	212:24	212:30	9	stderr
water	212:24	0:0	10	stderr
arg	212:32	212:73	9	PROGNAME":  can't open X display [%s]\n"
water	212:32	0:0	10	PROGNAME
water	212:41	0:0	10	":  can't open X display [%s]\n"
arg	213:18	213:54	9	displayname?displayname:"default"
water	213:18	0:0	10	displayname
water	213:29	0:0	10	?
water	213:31	0:0	10	displayname
water	213:43	0:0	10	:
water	213:45	0:0	10	"default"
water	213:55	0:0	8	;
op	214:16	0:0	8	++
water	214:18	0:0	8	error
water	214:23	0:0	8	;
water	215:12	0:0	8	}
water	216:8	0:0	6	}
if	217:8	218:26	4	(error)
cond	217:12	217:12	5	error
water	217:12	0:0	6	error
stmts	218:12	218:26	5	
call	218:12	218:25	6	fclose
arg	218:19	218:25	7	infile
water	218:19	0:0	8	infile
water	218:26	0:0	6	;
water	219:4	0:0	4	}
if	220:4	223:4	2	(error)
cond	220:8	220:8	3	error
water	220:8	0:0	4	error
stmts	220:15	223:4	3	
water	220:15	0:0	4	{
call	221:8	221:49	4	fprintf
arg	221:16	221:22	5	stderr
water	221:16	0:0	6	stderr
arg	221:24	221:49	5	PROGNAME":  aborting.\n"
water	221:24	0:0	6	PROGNAME
water	221:33	0:0	6	":  aborting.\n"
water	221:50	0:0	4	;
call	222:8	222:14	4	exit
arg	222:13	222:14	5	2
water	222:13	0:0	6	2
water	222:15	0:0	4	;
water	223:4	0:0	4	}
water	225:4	0:0	2	alen
op	225:9	0:0	2	=
call	225:11	225:25	2	strlen
arg	225:18	225:25	3	appname
water	225:18	0:0	4	appname
water	225:26	0:0	2	;
water	226:4	0:0	2	flen
op	226:9	0:0	2	=
call	226:11	226:26	2	strlen
arg	226:18	226:26	3	filename
water	226:18	0:0	4	filename
water	226:27	0:0	2	;
if	227:4	228:77	2	(alen + flen + 3 > 1023)
cond	227:8	227:26	3	alen + flen + 3 > 1023
water	227:8	0:0	4	alen
op	227:13	0:0	4	+
water	227:15	0:0	4	flen
op	227:20	0:0	4	+
water	227:22	0:0	4	3
op	227:24	0:0	4	>
water	227:26	0:0	4	1023
stmts	228:8	228:77	3	
call	228:8	228:76	4	sprintf
arg	228:16	228:24	5	titlebar
water	228:16	0:0	6	titlebar
arg	228:26	228:38	5	"%s:  ...%s"
water	228:26	0:0	6	"%s:  ...%s"
arg	228:40	228:47	5	appname
water	228:40	0:0	6	appname
arg	228:49	228:76	5	filename+(alen+flen+6-1023)
water	228:49	0:0	6	filename
op	228:57	0:0	6	+
water	228:58	0:0	6	(
water	228:59	0:0	6	alen
op	228:63	0:0	6	+
water	228:64	0:0	6	flen
op	228:68	0:0	6	+
water	228:69	0:0	6	6
op	228:70	0:0	6	-
water	228:71	0:0	6	1023
water	228:75	0:0	6	)
water	228:77	0:0	4	;
else	229:4	230:55	2
stmts	230:8	230:55	3	
call	230:8	230:54	4	sprintf
arg	230:16	230:24	5	titlebar
water	230:16	0:0	6	titlebar
arg	230:26	230:35	5	"%s:  %s"
water	230:26	0:0	6	"%s:  %s"
arg	230:37	230:44	5	appname
water	230:37	0:0	6	appname
arg	230:46	230:54	5	filename
water	230:46	0:0	6	filename
water	230:55	0:0	4	;
if	232:4	238:4	2	(have_bg)
cond	232:8	232:8	3	have_bg
water	232:8	0:0	4	have_bg
stmts	232:17	238:4	3	
water	232:17	0:0	4	{
water	233:8	0:0	4	unsigned
water	233:17	0:0	4	r
water	233:18	0:0	4	,
water	233:20	0:0	4	g
water	233:21	0:0	4	,
water	233:23	0:0	4	b
water	233:24	0:0	4	;
call	234:8	234:47	4	sscanf
arg	234:15	234:22	5	bgstr+1
water	234:15	0:0	6	bgstr
op	234:20	0:0	6	+
water	234:21	0:0	6	1
arg	234:24	234:35	5	"%2x%2x%2x"
water	234:24	0:0	6	"%2x%2x%2x"
arg	234:37	234:39	5	&r
op	234:37	0:0	6	&
water	234:38	0:0	6	r
arg	234:41	234:43	5	&g
op	234:41	0:0	6	&
water	234:42	0:0	6	g
arg	234:45	234:47	5	&b
op	234:45	0:0	6	&
water	234:46	0:0	6	b
water	234:48	0:0	4	;
water	235:8	0:0	4	rpng2_info
op	235:18	0:0	4	.
water	235:19	0:0	4	bg_red
op	235:28	0:0	4	=
water	235:30	0:0	4	(
water	235:31	0:0	4	uch
water	235:34	0:0	4	)
water	235:35	0:0	4	r
water	235:36	0:0	4	;
water	236:8	0:0	4	rpng2_info
op	236:18	0:0	4	.
water	236:19	0:0	4	bg_green
op	236:28	0:0	4	=
water	236:30	0:0	4	(
water	236:31	0:0	4	uch
water	236:34	0:0	4	)
water	236:35	0:0	4	g
water	236:36	0:0	4	;
water	237:8	0:0	4	rpng2_info
op	237:18	0:0	4	.
water	237:19	0:0	4	bg_blue
op	237:28	0:0	4	=
water	237:30	0:0	4	(
water	237:31	0:0	4	uch
water	237:34	0:0	4	)
water	237:35	0:0	4	b
water	237:36	0:0	4	;
water	238:4	0:0	4	}
else	238:6	239:38	2
stmts	239:8	239:38	3	
water	239:8	0:0	4	rpng2_info
op	239:18	0:0	4	.
water	239:19	0:0	4	need_bgcolor
op	239:32	0:0	4	=
water	239:34	0:0	4	TRUE
water	239:38	0:0	4	;
water	240:4	0:0	2	rpng2_info
op	240:14	0:0	2	.
water	240:15	0:0	2	state
op	240:21	0:0	2	=
water	240:23	0:0	2	kPreInit
water	240:31	0:0	2	;
water	241:4	0:0	2	rpng2_info
op	241:14	0:0	2	.
water	241:15	0:0	2	mainprog_init
op	241:29	0:0	2	=
water	241:31	0:0	2	rpng2_x_init
water	241:43	0:0	2	;
water	242:4	0:0	2	rpng2_info
op	242:14	0:0	2	.
water	242:15	0:0	2	mainprog_display_row
op	242:36	0:0	2	=
water	242:38	0:0	2	rpng2_x_display_row
water	242:57	0:0	2	;
water	243:4	0:0	2	rpng2_info
op	243:14	0:0	2	.
water	243:15	0:0	2	mainprog_finish_display
op	243:39	0:0	2	=
water	243:41	0:0	2	rpng2_x_finish_display
water	243:63	0:0	2	;
for	252:4	276:4	2	(;;)
forinit	252:9	252:9	3	;
water	252:9	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	252:13	276:4	3	
water	252:13	0:0	4	{
call	253:8	253:64	4	Trace
arg	253:14	253:64	5	(stderr,"about to call readpng2_decode_data()\n")
water	253:14	0:0	6	(
water	253:15	0:0	6	stderr
water	253:21	0:0	6	,
water	253:23	0:0	6	"about to call readpng2_decode_data()\n"
water	253:63	0:0	6	)
water	254:8	0:0	4	if
water	254:11	0:0	4	(
call	254:12	254:60	4	readpng2_decode_data
arg	254:33	254:44	5	&rpng2_info
op	254:33	0:0	6	&
water	254:34	0:0	6	rpng2_info
arg	254:46	254:51	5	inbuf
water	254:46	0:0	6	inbuf
arg	254:53	254:60	5	incount
water	254:53	0:0	6	incount
water	254:61	0:0	4	)
op	255:12	0:0	4	++
water	255:14	0:0	4	error
water	255:19	0:0	4	;
call	256:8	256:60	4	Trace
arg	256:14	256:60	5	(stderr,"done with readpng2_decode_data()\n")
water	256:14	0:0	6	(
water	256:15	0:0	6	stderr
water	256:21	0:0	6	,
water	256:23	0:0	6	"done with readpng2_decode_data()\n"
water	256:59	0:0	6	)
water	257:8	0:0	4	if
water	257:11	0:0	4	(
water	257:12	0:0	4	error
op	257:18	0:0	4	||
water	257:21	0:0	4	incount
op	257:29	0:0	4	!=
water	257:32	0:0	4	INBUFSIZE
op	257:42	0:0	4	||
water	257:45	0:0	4	rpng2_info
op	257:55	0:0	4	.
water	257:56	0:0	4	state
op	257:62	0:0	4	==
water	257:65	0:0	4	kDone
water	257:70	0:0	4	)
water	257:72	0:0	4	{
water	258:12	0:0	4	if
water	258:15	0:0	4	(
water	258:16	0:0	4	rpng2_info
op	258:26	0:0	4	.
water	258:27	0:0	4	state
op	258:33	0:0	4	==
water	258:36	0:0	4	kDone
water	258:41	0:0	4	)
water	258:43	0:0	4	{
call	259:16	259:59	4	Trace
arg	259:22	259:59	5	(stderr,"done decoding PNG image\n")
water	259:22	0:0	6	(
water	259:23	0:0	6	stderr
water	259:29	0:0	6	,
water	259:31	0:0	6	"done decoding PNG image\n"
water	259:58	0:0	6	)
water	260:12	0:0	4	}
water	260:14	0:0	4	else
water	260:19	0:0	4	if
water	260:22	0:0	4	(
call	260:23	260:36	4	ferror
arg	260:30	260:36	5	infile
water	260:30	0:0	6	infile
water	260:37	0:0	4	)
water	260:39	0:0	4	{
call	261:16	262:59	4	fprintf
arg	261:24	261:30	5	stderr
water	261:24	0:0	6	stderr
arg	261:32	262:59	5	PROGNAME":  error while reading PNG image file\n"
water	261:32	0:0	6	PROGNAME
water	262:18	0:0	6	":  error while reading PNG image file\n"
water	262:60	0:0	4	;
call	263:16	263:22	4	exit
arg	263:21	263:22	5	3
water	263:21	0:0	6	3
water	263:23	0:0	4	;
water	264:12	0:0	4	}
water	264:14	0:0	4	else
water	264:19	0:0	4	if
water	264:22	0:0	4	(
call	264:23	264:34	4	feof
arg	264:28	264:34	5	infile
water	264:28	0:0	6	infile
water	264:35	0:0	4	)
water	264:37	0:0	4	{
call	265:16	266:65	4	fprintf
arg	265:24	265:30	5	stderr
water	265:24	0:0	6	stderr
arg	265:32	266:65	5	PROGNAME":  end of file reached ""(unexpectedly) while reading PNG image file\n"
water	265:32	0:0	6	PROGNAME
water	265:41	0:0	6	":  end of file reached "
water	266:18	0:0	6	"(unexpectedly) while reading PNG image file\n"
water	266:66	0:0	4	;
call	267:16	267:22	4	exit
arg	267:21	267:22	5	3
water	267:21	0:0	6	3
water	267:23	0:0	4	;
water	268:12	0:0	4	}
water	268:14	0:0	4	else
water	268:20	0:0	4	{
water	270:12	0:0	4	}
water	271:12	0:0	4	break
water	271:17	0:0	4	;
water	272:8	0:0	4	}
water	273:8	0:0	4	if
water	273:11	0:0	4	(
water	273:12	0:0	4	timing
water	273:18	0:0	4	)
call	274:12	274:19	4	sleep
arg	274:18	274:19	5	1
water	274:18	0:0	6	1
water	274:20	0:0	4	;
water	275:8	0:0	4	incount
op	275:16	0:0	4	=
call	275:18	275:51	4	fread
arg	275:24	275:29	5	inbuf
water	275:24	0:0	6	inbuf
arg	275:31	275:32	5	1
water	275:31	0:0	6	1
arg	275:34	275:43	5	INBUFSIZE
water	275:34	0:0	6	INBUFSIZE
arg	275:45	275:51	5	infile
water	275:45	0:0	6	infile
water	275:52	0:0	4	;
water	276:4	0:0	4	}
call	278:4	278:17	2	fclose
arg	278:11	278:17	3	infile
water	278:11	0:0	4	infile
water	278:18	0:0	2	;
call	279:4	279:56	2	Trace
arg	279:10	279:56	3	(stderr,"about to call readpng2_cleanup()\n")
water	279:10	0:0	4	(
water	279:11	0:0	4	stderr
water	279:17	0:0	4	,
water	279:19	0:0	4	"about to call readpng2_cleanup()\n"
water	279:55	0:0	4	)
call	280:4	280:32	2	readpng2_cleanup
arg	280:21	280:32	3	&rpng2_info
op	280:21	0:0	4	&
water	280:22	0:0	4	rpng2_info
water	280:33	0:0	2	;
if	281:4	284:4	2	(error)
cond	281:8	281:8	3	error
water	281:8	0:0	4	error
stmts	281:15	284:4	3	
water	281:15	0:0	4	{
call	282:8	282:77	4	fprintf
arg	282:16	282:22	5	stderr
water	282:16	0:0	6	stderr
arg	282:24	282:77	5	PROGNAME":  libpng error while decoding PNG image\n"
water	282:24	0:0	6	PROGNAME
water	282:33	0:0	6	":  libpng error while decoding PNG image\n"
water	282:78	0:0	4	;
call	283:8	283:14	4	exit
arg	283:13	283:14	5	3
water	283:13	0:0	6	3
water	283:15	0:0	4	;
water	284:4	0:0	4	}
if	286:4	367:4	2	(loop && bg_image)
cond	286:8	286:16	3	loop && bg_image
water	286:8	0:0	4	loop
op	286:13	0:0	4	&&
water	286:16	0:0	4	bg_image
stmts	286:26	367:4	3	
water	286:26	0:0	4	{
call	287:8	287:62	4	Trace
arg	287:14	287:62	5	(stderr,"entering -loop loop (FEATURE_LOOP)\n")
water	287:14	0:0	6	(
water	287:15	0:0	6	stderr
water	287:21	0:0	6	,
water	287:23	0:0	6	"entering -loop loop (FEATURE_LOOP)\n"
water	287:61	0:0	6	)
water	288:8	0:0	4	for
water	288:12	0:0	4	(
water	288:13	0:0	4	;
water	288:14	0:0	4	;
water	288:15	0:0	4	)
water	288:17	0:0	4	{
decl	289:12	289:28	4	int	i
water	289:17	0:0	4	,
decl	289:12	289:28	4	int	use_sleep
decl	290:12	290:36	4	struct timeval	now
water	290:30	0:0	4	,
decl	290:12	290:36	4	struct timeval	then
if	292:12	295:12	4	(gettimeofday (& then ,NULL ) == 0)
cond	292:16	292:45	5	gettimeofday (& then ,NULL ) == 0
call	292:16	292:40	6	gettimeofday
arg	292:29	292:34	7	&then
op	292:29	0:0	8	&
water	292:30	0:0	8	then
arg	292:36	292:40	7	NULL
water	292:36	0:0	8	NULL
op	292:42	0:0	6	==
water	292:45	0:0	6	0
stmts	292:48	295:12	5	
water	292:48	0:0	6	{
water	293:16	0:0	6	then
op	293:20	0:0	6	.
water	293:21	0:0	6	tv_sec
op	293:28	0:0	6	+=
water	293:31	0:0	6	loop_interval
water	293:44	0:0	6	;
water	294:16	0:0	6	use_sleep
op	294:26	0:0	6	=
water	294:28	0:0	6	FALSE
water	294:33	0:0	6	;
water	295:12	0:0	6	}
else	295:14	296:32	4
stmts	296:16	296:32	5	
water	296:16	0:0	6	use_sleep
op	296:26	0:0	6	=
water	296:28	0:0	6	TRUE
water	296:32	0:0	6	;
if	299:12	301:25	4	(XCheckMaskEvent (display ,KeyPressMask | ButtonPressMask ,& e ))
cond	299:16	299:75	5	XCheckMaskEvent (display ,KeyPressMask | ButtonPressMask ,& e )
call	299:16	299:75	6	XCheckMaskEvent
arg	299:32	299:39	7	display
water	299:32	0:0	8	display
arg	299:41	299:71	7	KeyPressMask|ButtonPressMask
water	299:41	0:0	8	KeyPressMask
op	299:54	0:0	8	|
water	299:56	0:0	8	ButtonPressMask
arg	299:73	299:75	7	&e
op	299:73	0:0	8	&
water	299:74	0:0	8	e
stmts	300:16	301:25	5	
if	300:16	301:25	6	(QUIT (e ,k ))
cond	300:20	300:28	7	QUIT (e ,k )
call	300:20	300:28	8	QUIT
arg	300:25	300:26	9	e
water	300:25	0:0	10	e
arg	300:27	300:28	9	k
water	300:27	0:0	10	k
stmts	301:20	301:25	7	
break	301:20	301:25	8	
if	303:12	304:23	4	(++ pat >= num_bgpat)
cond	303:16	303:25	5	++ pat >= num_bgpat
op	303:16	0:0	6	++
water	303:18	0:0	6	pat
op	303:22	0:0	6	>=
water	303:25	0:0	6	num_bgpat
stmts	304:16	304:23	5	
water	304:16	0:0	6	pat
op	304:20	0:0	6	=
water	304:22	0:0	6	0
water	304:23	0:0	6	;
call	305:12	305:36	4	rpng2_x_reload_bg_image
water	305:37	0:0	4	;
if	307:12	315:12	4	(use_sleep ||gettimeofday (& now ,NULL ) != 0)
cond	307:16	307:57	5	use_sleep ||gettimeofday (& now ,NULL ) != 0
water	307:16	0:0	6	use_sleep
op	307:26	0:0	6	||
call	307:29	307:52	6	gettimeofday
arg	307:42	307:46	7	&now
op	307:42	0:0	8	&
water	307:43	0:0	8	now
arg	307:48	307:52	7	NULL
water	307:48	0:0	8	NULL
op	307:54	0:0	6	!=
water	307:57	0:0	6	0
stmts	307:60	315:12	5	
water	307:60	0:0	6	{
for	308:16	314:16	6	(i = loop_interval ;i > 0;-- i)
forinit	308:21	308:38	7	i = loop_interval ;
water	308:21	0:0	8	i
op	308:23	0:0	8	=
water	308:25	0:0	8	loop_interval
water	308:38	0:0	8	;
cond	308:41	308:45	7	i > 0
water	308:41	0:0	8	i
op	308:43	0:0	8	>
water	308:45	0:0	8	0
forexpr	308:49	308:51	7	-- i
op	308:49	0:0	8	--
water	308:51	0:0	8	i
stmts	308:54	314:16	7	
water	308:54	0:0	8	{
call	309:20	309:27	8	sleep
arg	309:26	309:27	9	1
water	309:26	0:0	10	1
water	309:28	0:0	8	;
if	311:20	313:29	8	(XCheckMaskEvent (display ,KeyPressMask | ButtonPressMask ,& e ) &&QUIT (e ,k ))
cond	311:24	312:39	9	XCheckMaskEvent (display ,KeyPressMask | ButtonPressMask ,& e ) &&QUIT (e ,k )
call	311:24	312:26	10	XCheckMaskEvent
arg	311:40	311:47	11	display
water	311:40	0:0	12	display
arg	311:49	311:79	11	KeyPressMask|ButtonPressMask
water	311:49	0:0	12	KeyPressMask
op	311:62	0:0	12	|
water	311:64	0:0	12	ButtonPressMask
arg	312:24	312:26	11	&e
op	312:24	0:0	12	&
water	312:25	0:0	12	e
op	312:28	0:0	10	&&
call	312:31	312:39	10	QUIT
arg	312:36	312:37	11	e
water	312:36	0:0	12	e
arg	312:38	312:39	11	k
water	312:38	0:0	12	k
stmts	313:24	313:29	9	
break	313:24	313:29	10	
water	314:16	0:0	8	}
water	315:12	0:0	6	}
else	315:14	362:12	4
stmts	315:19	362:12	5	
water	315:19	0:0	6	{
if	317:16	361:16	6	(now . tv_sec < then . tv_sec || ( now . tv_sec == then . tv_sec && now . tv_usec < then . tv_usec ))
cond	317:20	318:76	7	now . tv_sec < then . tv_sec || ( now . tv_sec == then . tv_sec && now . tv_usec < then . tv_usec )
water	317:20	0:0	8	now
op	317:23	0:0	8	.
water	317:24	0:0	8	tv_sec
op	317:31	0:0	8	<
water	317:33	0:0	8	then
op	317:37	0:0	8	.
water	317:38	0:0	8	tv_sec
op	317:45	0:0	8	||
water	318:20	0:0	8	(
water	318:21	0:0	8	now
op	318:24	0:0	8	.
water	318:25	0:0	8	tv_sec
op	318:32	0:0	8	==
water	318:35	0:0	8	then
op	318:39	0:0	8	.
water	318:40	0:0	8	tv_sec
op	318:47	0:0	8	&&
water	318:50	0:0	8	now
op	318:53	0:0	8	.
water	318:54	0:0	8	tv_usec
op	318:62	0:0	8	<
water	318:64	0:0	8	then
op	318:68	0:0	8	.
water	318:69	0:0	8	tv_usec
water	318:76	0:0	8	)
stmts	319:16	361:16	7	
water	319:16	0:0	8	{
decl	320:20	320:36	8	int	quit
op	320:29	0:0	8	=
water	320:31	0:0	8	FALSE
decl	321:20	321:65	8	long	seconds_to_go
op	321:39	0:0	8	=
water	321:41	0:0	8	then
op	321:45	0:0	8	.
water	321:46	0:0	8	tv_sec
op	321:53	0:0	8	-
water	321:55	0:0	8	now
op	321:58	0:0	8	.
water	321:59	0:0	8	tv_sec
decl	322:20	322:36	8	long	usleep_usec
while	328:20	349:20	8	(seconds_to_go -- > 1)
cond	328:27	328:45	9	seconds_to_go -- > 1
water	328:27	0:0	10	seconds_to_go
op	328:40	0:0	10	--
op	328:43	0:0	10	>
water	328:45	0:0	10	1
stmts	328:48	349:20	9	
water	328:48	0:0	10	{
decl	329:24	329:44	10	int	seconds_done
op	329:41	0:0	10	=
water	329:43	0:0	10	0
for	330:24	338:24	10	(i = seconds_to_go ;i > 0 && ! quit;-- i)
forinit	330:29	330:46	11	i = seconds_to_go ;
water	330:29	0:0	12	i
op	330:31	0:0	12	=
water	330:33	0:0	12	seconds_to_go
water	330:46	0:0	12	;
cond	330:49	330:59	11	i > 0 && ! quit
water	330:49	0:0	12	i
op	330:51	0:0	12	>
water	330:53	0:0	12	0
op	330:55	0:0	12	&&
op	330:58	0:0	12	!
water	330:59	0:0	12	quit
forexpr	330:66	330:68	11	-- i
op	330:66	0:0	12	--
water	330:68	0:0	12	i
stmts	330:71	338:24	11	
water	330:71	0:0	12	{
call	331:28	331:35	12	sleep
arg	331:34	331:35	13	1
water	331:34	0:0	14	1
water	331:36	0:0	12	;
if	333:28	335:43	12	(XCheckMaskEvent (display ,KeyPressMask | ButtonPressMask ,& e ) &&QUIT (e ,k ))
cond	333:32	334:64	13	XCheckMaskEvent (display ,KeyPressMask | ButtonPressMask ,& e ) &&QUIT (e ,k )
call	333:32	334:51	14	XCheckMaskEvent
arg	333:48	333:55	15	display
water	333:48	0:0	16	display
arg	333:57	334:47	15	KeyPressMask|ButtonPressMask
water	333:57	0:0	16	KeyPressMask
op	333:70	0:0	16	|
water	334:32	0:0	16	ButtonPressMask
arg	334:49	334:51	15	&e
op	334:49	0:0	16	&
water	334:50	0:0	16	e
op	334:53	0:0	14	&&
call	334:56	334:64	14	QUIT
arg	334:61	334:62	15	e
water	334:61	0:0	16	e
arg	334:63	334:64	15	k
water	334:63	0:0	16	k
stmts	335:32	335:43	13	
water	335:32	0:0	14	quit
op	335:37	0:0	14	=
water	335:39	0:0	14	TRUE
water	335:43	0:0	14	;
if	336:28	337:37	12	(++ seconds_done > 1000)
cond	336:32	336:49	13	++ seconds_done > 1000
op	336:32	0:0	14	++
water	336:34	0:0	14	seconds_done
op	336:47	0:0	14	>
water	336:49	0:0	14	1000
stmts	337:32	337:37	13	
break	337:32	337:37	14	
water	338:24	0:0	12	}
if	339:24	340:33	10	(quit)
cond	339:28	339:28	11	quit
water	339:28	0:0	12	quit
stmts	340:28	340:33	11	
break	340:28	340:33	12	
if	343:24	347:24	10	(gettimeofday (& now ,NULL ) == 0)
cond	343:28	343:56	11	gettimeofday (& now ,NULL ) == 0
call	343:28	343:51	12	gettimeofday
arg	343:41	343:45	13	&now
op	343:41	0:0	14	&
water	343:42	0:0	14	now
arg	343:47	343:51	13	NULL
water	343:47	0:0	14	NULL
op	343:53	0:0	12	==
water	343:56	0:0	12	0
stmts	343:59	347:24	11	
water	343:59	0:0	12	{
if	344:28	345:37	12	(now . tv_sec >= then . tv_sec)
cond	344:32	344:51	13	now . tv_sec >= then . tv_sec
water	344:32	0:0	14	now
op	344:35	0:0	14	.
water	344:36	0:0	14	tv_sec
op	344:43	0:0	14	>=
water	344:46	0:0	14	then
op	344:50	0:0	14	.
water	344:51	0:0	14	tv_sec
stmts	345:32	345:37	13	
break	345:32	345:37	14	
water	346:28	0:0	12	seconds_to_go
op	346:42	0:0	12	=
water	346:44	0:0	12	then
op	346:48	0:0	12	.
water	346:49	0:0	12	tv_sec
op	346:56	0:0	12	-
water	346:58	0:0	12	now
op	346:61	0:0	12	.
water	346:62	0:0	12	tv_sec
water	346:68	0:0	12	;
water	347:24	0:0	12	}
else	347:26	348:43	10
stmts	348:28	348:43	11	
op	348:28	0:0	12	++
water	348:30	0:0	12	seconds_to_go
water	348:43	0:0	12	;
water	349:20	0:0	10	}
if	350:20	351:29	8	(quit)
cond	350:24	350:24	9	quit
water	350:24	0:0	10	quit
stmts	351:24	351:29	9	
break	351:24	351:29	10	
if	355:20	360:20	8	(gettimeofday (& now ,NULL ) == 0)
cond	355:24	355:52	9	gettimeofday (& now ,NULL ) == 0
call	355:24	355:47	10	gettimeofday
arg	355:37	355:41	11	&now
op	355:37	0:0	12	&
water	355:38	0:0	12	now
arg	355:43	355:47	11	NULL
water	355:43	0:0	12	NULL
op	355:49	0:0	10	==
water	355:52	0:0	10	0
stmts	355:55	360:20	9	
water	355:55	0:0	10	{
water	356:24	0:0	10	usleep_usec
op	356:36	0:0	10	=
water	356:38	0:0	10	1000000
water	356:45	0:0	10	L
op	356:46	0:0	10	*
water	356:47	0:0	10	(
water	356:48	0:0	10	then
op	356:52	0:0	10	.
water	356:53	0:0	10	tv_sec
op	356:60	0:0	10	-
water	356:62	0:0	10	now
op	356:65	0:0	10	.
water	356:66	0:0	10	tv_sec
water	356:72	0:0	10	)
op	356:74	0:0	10	+
water	357:26	0:0	10	then
op	357:30	0:0	10	.
water	357:31	0:0	10	tv_usec
op	357:39	0:0	10	-
water	357:41	0:0	10	now
op	357:44	0:0	10	.
water	357:45	0:0	10	tv_usec
water	357:52	0:0	10	;
if	358:24	359:52	10	(usleep_usec > 0)
cond	358:28	358:42	11	usleep_usec > 0
water	358:28	0:0	12	usleep_usec
op	358:40	0:0	12	>
water	358:42	0:0	12	0
stmts	359:28	359:52	11	
call	359:28	359:51	12	usleep
arg	359:35	359:51	13	(ulg)usleep_usec
water	359:35	0:0	14	(
water	359:36	0:0	14	ulg
water	359:39	0:0	14	)
water	359:40	0:0	14	usleep_usec
water	359:52	0:0	12	;
water	360:20	0:0	10	}
water	361:16	0:0	8	}
water	362:12	0:0	6	}
call	365:12	365:78	4	rpng2_x_redisplay_image
arg	365:37	365:38	5	0
water	365:37	0:0	6	0
arg	365:40	365:41	5	0
water	365:40	0:0	6	0
arg	365:43	365:59	5	rpng2_info.width
water	365:43	0:0	6	rpng2_info
op	365:53	0:0	6	.
water	365:54	0:0	6	width
arg	365:61	365:78	5	rpng2_info.height
water	365:61	0:0	6	rpng2_info
op	365:71	0:0	6	.
water	365:72	0:0	6	height
water	365:79	0:0	4	;
water	366:8	0:0	4	}
water	367:4	0:0	4	}
else	367:6	379:4	2
stmts	370:4	379:4	3	
if	370:4	379:4	4	(rpng2_info . state >= kWindowInit)
cond	370:8	370:28	5	rpng2_info . state >= kWindowInit
water	370:8	0:0	6	rpng2_info
op	370:18	0:0	6	.
water	370:19	0:0	6	state
op	370:25	0:0	6	>=
water	370:28	0:0	6	kWindowInit
stmts	370:41	379:4	5	
water	370:41	0:0	6	{
call	371:8	371:67	6	Trace
arg	371:14	371:67	7	(stderr,"entering final wait-for-quit-event loop\n")
water	371:14	0:0	8	(
water	371:15	0:0	8	stderr
water	371:21	0:0	8	,
water	371:23	0:0	8	"entering final wait-for-quit-event loop\n"
water	371:66	0:0	8	)
water	372:8	0:0	6	do
water	372:11	0:0	6	{
call	373:12	373:34	6	XNextEvent
arg	373:23	373:30	7	display
water	373:23	0:0	8	display
arg	373:32	373:34	7	&e
op	373:32	0:0	8	&
water	373:33	0:0	8	e
water	373:35	0:0	6	;
water	374:12	0:0	6	if
water	374:15	0:0	6	(
water	374:16	0:0	6	e
op	374:17	0:0	6	.
water	374:18	0:0	6	type
op	374:23	0:0	6	==
water	374:26	0:0	6	Expose
water	374:32	0:0	6	)
water	374:34	0:0	6	{
water	375:16	0:0	6	XExposeEvent
op	375:29	0:0	6	*
water	375:30	0:0	6	ex
op	375:33	0:0	6	=
water	375:35	0:0	6	(
water	375:36	0:0	6	XExposeEvent
op	375:49	0:0	6	*
water	375:50	0:0	6	)
op	375:51	0:0	6	&
water	375:52	0:0	6	e
water	375:53	0:0	6	;
call	376:16	376:76	6	rpng2_x_redisplay_image
arg	376:41	376:46	7	ex->x
water	376:41	0:0	8	ex
op	376:43	0:0	8	->
water	376:45	0:0	8	x
arg	376:48	376:53	7	ex->y
water	376:48	0:0	8	ex
op	376:50	0:0	8	->
water	376:52	0:0	8	y
arg	376:55	376:64	7	ex->width
water	376:55	0:0	8	ex
op	376:57	0:0	8	->
water	376:59	0:0	8	width
arg	376:66	376:76	7	ex->height
water	376:66	0:0	8	ex
op	376:68	0:0	8	->
water	376:70	0:0	8	height
water	376:77	0:0	6	;
water	377:12	0:0	6	}
water	378:8	0:0	6	}
water	378:10	0:0	6	while
water	378:16	0:0	6	(
op	378:17	0:0	6	!
call	378:18	378:26	6	QUIT
arg	378:23	378:24	7	e
water	378:23	0:0	8	e
arg	378:25	378:26	7	k
water	378:25	0:0	8	k
water	378:27	0:0	6	)
water	378:28	0:0	6	;
water	379:4	0:0	6	}
else	379:6	383:4	2
stmts	379:11	383:4	3	
water	379:11	0:0	4	{
call	380:8	381:54	4	fprintf
arg	380:16	380:22	5	stderr
water	380:16	0:0	6	stderr
arg	380:24	381:54	5	PROGNAME":  init callback never called:  probable ""libpng error while decoding PNG metadata\n"
water	380:24	0:0	6	PROGNAME
water	380:33	0:0	6	":  init callback never called:  probable "
water	381:10	0:0	6	"libpng error while decoding PNG metadata\n"
water	381:55	0:0	4	;
call	382:8	382:14	4	exit
arg	382:13	382:14	5	4
water	382:13	0:0	6	4
water	382:15	0:0	4	;
water	383:4	0:0	4	}
call	385:4	385:55	2	Trace
arg	385:10	385:55	3	(stderr,"about to call rpng2_x_cleanup()\n")
water	385:10	0:0	4	(
water	385:11	0:0	4	stderr
water	385:17	0:0	4	,
water	385:19	0:0	4	"about to call rpng2_x_cleanup()\n"
water	385:54	0:0	4	)
call	386:4	386:20	2	rpng2_x_cleanup
water	386:21	0:0	2	;
return	387:4	387:12	2	0
water	387:11	0:0	3	0
