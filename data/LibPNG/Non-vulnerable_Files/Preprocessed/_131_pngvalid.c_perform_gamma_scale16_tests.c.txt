func	2:0	47:0	0	static void	perform_gamma_scale16_tests
params	2:39	0:0	1	
param	2:40	2:56	2	png_modifier *	pm
stmnts	0:0	46:3	1	
decl	16:3	16:20	2	unsigned int	i
water	16:17	0:0	2	,
decl	16:3	16:20	2	unsigned int	j
for	17:3	46:3	2	(i = 0 ;i < pm -> ngamma_tests;++ i)
forinit	17:8	17:11	3	i = 0 ;
water	17:8	0:0	4	i
op	17:9	0:0	4	=
water	17:10	0:0	4	0
water	17:11	0:0	4	;
cond	17:13	17:19	3	i < pm -> ngamma_tests
water	17:13	0:0	4	i
op	17:14	0:0	4	<
water	17:15	0:0	4	pm
op	17:17	0:0	4	->
water	17:19	0:0	4	ngamma_tests
forexpr	17:33	17:35	3	++ i
op	17:33	0:0	4	++
water	17:35	0:0	4	i
stmts	18:3	46:3	3	
water	18:3	0:0	4	{
for	19:6	45:6	4	(j = 0 ;j < pm -> ngamma_tests;++ j)
forinit	19:11	19:14	5	j = 0 ;
water	19:11	0:0	6	j
op	19:12	0:0	6	=
water	19:13	0:0	6	0
water	19:14	0:0	6	;
cond	19:16	19:22	5	j < pm -> ngamma_tests
water	19:16	0:0	6	j
op	19:17	0:0	6	<
water	19:18	0:0	6	pm
op	19:20	0:0	6	->
water	19:22	0:0	6	ngamma_tests
forexpr	19:36	19:38	5	++ j
op	19:36	0:0	6	++
water	19:38	0:0	6	j
stmts	20:6	45:6	5	
water	20:6	0:0	6	{
if	21:9	44:9	6	(i != j &&fabs (pm -> gammas [ j ] / pm -> gammas [ i ] - 1 ) >= PNG_GAMMA_THRESHOLD)
cond	21:13	22:52	7	i != j &&fabs (pm -> gammas [ j ] / pm -> gammas [ i ] - 1 ) >= PNG_GAMMA_THRESHOLD
water	21:13	0:0	8	i
op	21:15	0:0	8	!=
water	21:18	0:0	8	j
op	21:20	0:0	8	&&
call	22:13	22:47	8	fabs
arg	22:18	22:47	9	pm->gammas[j]/pm->gammas[i]-1
water	22:18	0:0	10	pm
op	22:20	0:0	10	->
water	22:22	0:0	10	gammas
op	22:28	0:0	10	[
water	22:29	0:0	10	j
op	22:30	0:0	10	]
op	22:31	0:0	10	/
water	22:32	0:0	10	pm
op	22:34	0:0	10	->
water	22:36	0:0	10	gammas
op	22:42	0:0	10	[
water	22:43	0:0	10	i
op	22:44	0:0	10	]
op	22:45	0:0	10	-
water	22:46	0:0	10	1
op	22:49	0:0	8	>=
water	22:52	0:0	8	PNG_GAMMA_THRESHOLD
stmts	23:9	44:9	7	
water	23:9	0:0	8	{
call	24:12	26:48	8	gamma_transform_test
arg	24:33	24:35	9	pm
water	24:33	0:0	10	pm
arg	24:37	24:38	9	0
water	24:37	0:0	10	0
arg	24:40	24:42	9	16
water	24:40	0:0	10	16
arg	24:44	24:45	9	0
water	24:44	0:0	10	0
arg	24:47	24:65	9	pm->interlace_type
water	24:47	0:0	10	pm
op	24:49	0:0	10	->
water	24:51	0:0	10	interlace_type
arg	25:15	25:30	9	1/pm->gammas[i]
water	25:15	0:0	10	1
op	25:16	0:0	10	/
water	25:17	0:0	10	pm
op	25:19	0:0	10	->
water	25:21	0:0	10	gammas
op	25:27	0:0	10	[
water	25:28	0:0	10	i
op	25:29	0:0	10	]
arg	25:32	25:45	9	pm->gammas[j]
water	25:32	0:0	10	pm
op	25:34	0:0	10	->
water	25:36	0:0	10	gammas
op	25:42	0:0	10	[
water	25:43	0:0	10	j
op	25:44	0:0	10	]
arg	25:47	25:59	9	SBIT_16_TO_8
water	25:47	0:0	10	SBIT_16_TO_8
arg	26:15	26:44	9	pm->use_input_precision_16to8
water	26:15	0:0	10	pm
op	26:17	0:0	10	->
water	26:19	0:0	10	use_input_precision_16to8
arg	26:46	26:48	9	1
water	26:46	0:0	10	1
water	26:49	0:0	8	;
if	27:12	28:21	8	(fail (pm ))
cond	27:16	27:23	9	fail (pm )
call	27:16	27:23	10	fail
arg	27:21	27:23	11	pm
water	27:21	0:0	12	pm
stmts	28:15	28:21	9	
return	28:15	28:21	10	
call	29:12	31:48	8	gamma_transform_test
arg	29:33	29:35	9	pm
water	29:33	0:0	10	pm
arg	29:37	29:38	9	2
water	29:37	0:0	10	2
arg	29:40	29:42	9	16
water	29:40	0:0	10	16
arg	29:44	29:45	9	0
water	29:44	0:0	10	0
arg	29:47	29:65	9	pm->interlace_type
water	29:47	0:0	10	pm
op	29:49	0:0	10	->
water	29:51	0:0	10	interlace_type
arg	30:15	30:30	9	1/pm->gammas[i]
water	30:15	0:0	10	1
op	30:16	0:0	10	/
water	30:17	0:0	10	pm
op	30:19	0:0	10	->
water	30:21	0:0	10	gammas
op	30:27	0:0	10	[
water	30:28	0:0	10	i
op	30:29	0:0	10	]
arg	30:32	30:45	9	pm->gammas[j]
water	30:32	0:0	10	pm
op	30:34	0:0	10	->
water	30:36	0:0	10	gammas
op	30:42	0:0	10	[
water	30:43	0:0	10	j
op	30:44	0:0	10	]
arg	30:47	30:59	9	SBIT_16_TO_8
water	30:47	0:0	10	SBIT_16_TO_8
arg	31:15	31:44	9	pm->use_input_precision_16to8
water	31:15	0:0	10	pm
op	31:17	0:0	10	->
water	31:19	0:0	10	use_input_precision_16to8
arg	31:46	31:48	9	1
water	31:46	0:0	10	1
water	31:49	0:0	8	;
if	32:12	33:21	8	(fail (pm ))
cond	32:16	32:23	9	fail (pm )
call	32:16	32:23	10	fail
arg	32:21	32:23	11	pm
water	32:21	0:0	12	pm
stmts	33:15	33:21	9	
return	33:15	33:21	10	
call	34:12	36:48	8	gamma_transform_test
arg	34:33	34:35	9	pm
water	34:33	0:0	10	pm
arg	34:37	34:38	9	4
water	34:37	0:0	10	4
arg	34:40	34:42	9	16
water	34:40	0:0	10	16
arg	34:44	34:45	9	0
water	34:44	0:0	10	0
arg	34:47	34:65	9	pm->interlace_type
water	34:47	0:0	10	pm
op	34:49	0:0	10	->
water	34:51	0:0	10	interlace_type
arg	35:15	35:30	9	1/pm->gammas[i]
water	35:15	0:0	10	1
op	35:16	0:0	10	/
water	35:17	0:0	10	pm
op	35:19	0:0	10	->
water	35:21	0:0	10	gammas
op	35:27	0:0	10	[
water	35:28	0:0	10	i
op	35:29	0:0	10	]
arg	35:32	35:45	9	pm->gammas[j]
water	35:32	0:0	10	pm
op	35:34	0:0	10	->
water	35:36	0:0	10	gammas
op	35:42	0:0	10	[
water	35:43	0:0	10	j
op	35:44	0:0	10	]
arg	35:47	35:59	9	SBIT_16_TO_8
water	35:47	0:0	10	SBIT_16_TO_8
arg	36:15	36:44	9	pm->use_input_precision_16to8
water	36:15	0:0	10	pm
op	36:17	0:0	10	->
water	36:19	0:0	10	use_input_precision_16to8
arg	36:46	36:48	9	1
water	36:46	0:0	10	1
water	36:49	0:0	8	;
if	37:12	38:21	8	(fail (pm ))
cond	37:16	37:23	9	fail (pm )
call	37:16	37:23	10	fail
arg	37:21	37:23	11	pm
water	37:21	0:0	12	pm
stmts	38:15	38:21	9	
return	38:15	38:21	10	
call	39:12	41:48	8	gamma_transform_test
arg	39:33	39:35	9	pm
water	39:33	0:0	10	pm
arg	39:37	39:38	9	6
water	39:37	0:0	10	6
arg	39:40	39:42	9	16
water	39:40	0:0	10	16
arg	39:44	39:45	9	0
water	39:44	0:0	10	0
arg	39:47	39:65	9	pm->interlace_type
water	39:47	0:0	10	pm
op	39:49	0:0	10	->
water	39:51	0:0	10	interlace_type
arg	40:15	40:30	9	1/pm->gammas[i]
water	40:15	0:0	10	1
op	40:16	0:0	10	/
water	40:17	0:0	10	pm
op	40:19	0:0	10	->
water	40:21	0:0	10	gammas
op	40:27	0:0	10	[
water	40:28	0:0	10	i
op	40:29	0:0	10	]
arg	40:32	40:45	9	pm->gammas[j]
water	40:32	0:0	10	pm
op	40:34	0:0	10	->
water	40:36	0:0	10	gammas
op	40:42	0:0	10	[
water	40:43	0:0	10	j
op	40:44	0:0	10	]
arg	40:47	40:59	9	SBIT_16_TO_8
water	40:47	0:0	10	SBIT_16_TO_8
arg	41:15	41:44	9	pm->use_input_precision_16to8
water	41:15	0:0	10	pm
op	41:17	0:0	10	->
water	41:19	0:0	10	use_input_precision_16to8
arg	41:46	41:48	9	1
water	41:46	0:0	10	1
water	41:49	0:0	8	;
if	42:12	43:21	8	(fail (pm ))
cond	42:16	42:23	9	fail (pm )
call	42:16	42:23	10	fail
arg	42:21	42:23	11	pm
water	42:21	0:0	12	pm
stmts	43:15	43:21	9	
return	43:15	43:21	10	
water	44:9	0:0	8	}
water	45:6	0:0	6	}
water	46:3	0:0	4	}
