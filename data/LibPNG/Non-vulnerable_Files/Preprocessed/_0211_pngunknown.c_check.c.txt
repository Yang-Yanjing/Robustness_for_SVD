func	1:0	163:0	0	static int	check
params	2:5	0:0	1	
param	2:6	2:14	2	FILE *	fp
param	2:16	2:24	2	int	argc
param	2:26	2:43	2	const char * *	argv
param	2:45	2:63	2	png_uint_32p	flags
param	3:3	3:13	2	display *	d
param	3:15	3:31	2	int	set_callback
stmnts	0:0	162:17	1	
decl	5:3	5:24	2	int	i
water	5:8	0:0	2	,
decl	5:3	5:24	2	int	npasses
water	5:17	0:0	2	,
decl	5:3	5:24	2	int	ipass
decl	6:3	6:21	2	png_uint_32	height
water	7:3	0:0	2	d
op	7:4	0:0	2	->
water	7:6	0:0	2	keep
op	7:11	0:0	2	=
water	7:13	0:0	2	PNG_HANDLE_CHUNK_AS_DEFAULT
water	7:40	0:0	2	;
water	8:3	0:0	2	d
op	8:4	0:0	2	->
water	8:6	0:0	2	before_IDAT
op	8:18	0:0	2	=
water	8:20	0:0	2	0
water	8:21	0:0	2	;
water	9:3	0:0	2	d
op	9:4	0:0	2	->
water	9:6	0:0	2	after_IDAT
op	9:17	0:0	2	=
water	9:19	0:0	2	0
water	9:20	0:0	2	;
water	13:3	0:0	2	d
op	13:4	0:0	2	->
water	13:6	0:0	2	png_ptr
op	13:14	0:0	2	=
call	13:16	14:13	2	png_create_read_struct
arg	13:39	13:60	3	PNG_LIBPNG_VER_STRING
water	13:39	0:0	4	PNG_LIBPNG_VER_STRING
arg	13:62	13:63	3	d
water	13:62	0:0	4	d
arg	13:65	13:70	3	error
water	13:65	0:0	4	error
arg	14:6	14:13	3	warning
water	14:6	0:0	4	warning
water	14:14	0:0	2	;
if	15:3	21:3	2	(d -> png_ptr == NULL)
cond	15:7	15:21	3	d -> png_ptr == NULL
water	15:7	0:0	4	d
op	15:8	0:0	4	->
water	15:10	0:0	4	png_ptr
op	15:18	0:0	4	==
water	15:21	0:0	4	NULL
stmts	16:3	21:3	3	
water	16:3	0:0	4	{
call	17:6	18:16	4	fprintf
arg	17:14	17:20	5	stderr
water	17:14	0:0	6	stderr
arg	17:22	17:63	5	"%s(%s): could not allocate png struct\n"
water	17:22	0:0	6	"%s(%s): could not allocate png struct\n"
arg	17:65	17:72	5	d->file
water	17:65	0:0	6	d
op	17:66	0:0	6	->
water	17:68	0:0	6	file
arg	18:9	18:16	5	d->test
water	18:9	0:0	6	d
op	18:10	0:0	6	->
water	18:12	0:0	6	test
water	18:17	0:0	4	;
call	20:6	20:12	4	exit
arg	20:11	20:12	5	1
water	20:11	0:0	6	1
water	20:13	0:0	4	;
water	21:3	0:0	4	}
water	22:3	0:0	2	d
op	22:4	0:0	2	->
water	22:6	0:0	2	info_ptr
op	22:15	0:0	2	=
call	22:17	22:50	2	png_create_info_struct
arg	22:40	22:50	3	d->png_ptr
water	22:40	0:0	4	d
op	22:41	0:0	4	->
water	22:43	0:0	4	png_ptr
water	22:51	0:0	2	;
water	23:3	0:0	2	d
op	23:4	0:0	2	->
water	23:6	0:0	2	end_ptr
op	23:14	0:0	2	=
call	23:16	23:49	2	png_create_info_struct
arg	23:39	23:49	3	d->png_ptr
water	23:39	0:0	4	d
op	23:40	0:0	4	->
water	23:42	0:0	4	png_ptr
water	23:50	0:0	2	;
if	24:3	30:3	2	(d -> info_ptr == NULL || d -> end_ptr == NULL)
cond	24:7	24:44	3	d -> info_ptr == NULL || d -> end_ptr == NULL
water	24:7	0:0	4	d
op	24:8	0:0	4	->
water	24:10	0:0	4	info_ptr
op	24:19	0:0	4	==
water	24:22	0:0	4	NULL
op	24:27	0:0	4	||
water	24:30	0:0	4	d
op	24:31	0:0	4	->
water	24:33	0:0	4	end_ptr
op	24:41	0:0	4	==
water	24:44	0:0	4	NULL
stmts	25:3	30:3	3	
water	25:3	0:0	4	{
call	26:6	27:16	4	fprintf
arg	26:14	26:20	5	stderr
water	26:14	0:0	6	stderr
arg	26:22	26:61	5	"%s(%s): could not allocate png info\n"
water	26:22	0:0	6	"%s(%s): could not allocate png info\n"
arg	26:63	26:70	5	d->file
water	26:63	0:0	6	d
op	26:64	0:0	6	->
water	26:66	0:0	6	file
arg	27:9	27:16	5	d->test
water	27:9	0:0	6	d
op	27:10	0:0	6	->
water	27:12	0:0	6	test
water	27:17	0:0	4	;
call	28:6	28:21	4	clean_display
arg	28:20	28:21	5	d
water	28:20	0:0	6	d
water	28:22	0:0	4	;
call	29:6	29:12	4	exit
arg	29:11	29:12	5	1
water	29:11	0:0	6	1
water	29:13	0:0	4	;
water	30:3	0:0	4	}
call	31:3	31:29	2	png_init_io
arg	31:15	31:25	3	d->png_ptr
water	31:15	0:0	4	d
op	31:16	0:0	4	->
water	31:18	0:0	4	png_ptr
arg	31:27	31:29	3	fp
water	31:27	0:0	4	fp
water	31:30	0:0	2	;
if	36:6	37:65	2	(set_callback)
cond	36:10	36:10	3	set_callback
water	36:10	0:0	4	set_callback
stmts	37:9	37:65	3	
call	37:9	37:64	4	png_set_read_user_chunk_fn
arg	37:36	37:46	5	d->png_ptr
water	37:36	0:0	6	d
op	37:37	0:0	6	->
water	37:39	0:0	6	png_ptr
arg	37:48	37:49	5	d
water	37:48	0:0	6	d
arg	37:51	37:64	5	read_callback
water	37:51	0:0	6	read_callback
water	37:65	0:0	4	;
call	39:6	39:25	2	UNUSED
arg	39:13	39:25	3	set_callback
water	39:13	0:0	4	set_callback
water	45:3	0:0	2	for
water	45:7	0:0	2	(
water	45:8	0:0	2	i
op	45:9	0:0	2	=
water	45:10	0:0	2	0
water	45:11	0:0	2	;
water	45:13	0:0	2	i
op	45:14	0:0	2	<
water	45:15	0:0	2	argc
water	45:19	0:0	2	;
op	45:21	0:0	2	++
water	45:23	0:0	2	i
water	45:24	0:0	2	)
water	46:3	0:0	2	{
water	47:6	0:0	2	const
water	47:12	0:0	2	char
op	47:17	0:0	2	*
water	47:18	0:0	2	equals
op	47:25	0:0	2	=
call	47:27	47:46	2	strchr
arg	47:34	47:41	3	argv[i]
water	47:34	0:0	4	argv
op	47:38	0:0	4	[
water	47:39	0:0	4	i
op	47:40	0:0	4	]
arg	47:43	47:46	3	'='
water	47:43	0:0	4	'='
water	47:47	0:0	2	;
water	48:6	0:0	2	if
water	48:9	0:0	2	(
water	48:10	0:0	2	equals
op	48:17	0:0	2	!=
water	48:20	0:0	2	NULL
water	48:24	0:0	2	)
water	49:6	0:0	2	{
water	50:9	0:0	2	int
water	50:13	0:0	2	chunk
water	50:18	0:0	2	,
water	50:20	0:0	2	option
water	50:26	0:0	2	;
water	51:9	0:0	2	if
water	51:12	0:0	2	(
call	51:13	51:39	2	strcmp
arg	51:20	51:28	3	equals+1
water	51:20	0:0	4	equals
op	51:26	0:0	4	+
water	51:27	0:0	4	1
arg	51:30	51:39	3	"default"
water	51:30	0:0	4	"default"
op	51:41	0:0	2	==
water	51:44	0:0	2	0
water	51:45	0:0	2	)
water	52:12	0:0	2	option
op	52:19	0:0	2	=
water	52:21	0:0	2	PNG_HANDLE_CHUNK_AS_DEFAULT
water	52:48	0:0	2	;
water	53:9	0:0	2	else
water	53:14	0:0	2	if
water	53:17	0:0	2	(
call	53:18	53:44	2	strcmp
arg	53:25	53:33	3	equals+1
water	53:25	0:0	4	equals
op	53:31	0:0	4	+
water	53:32	0:0	4	1
arg	53:35	53:44	3	"discard"
water	53:35	0:0	4	"discard"
op	53:46	0:0	2	==
water	53:49	0:0	2	0
water	53:50	0:0	2	)
water	54:12	0:0	2	option
op	54:19	0:0	2	=
water	54:21	0:0	2	PNG_HANDLE_CHUNK_NEVER
water	54:43	0:0	2	;
water	55:9	0:0	2	else
water	55:14	0:0	2	if
water	55:17	0:0	2	(
call	55:18	55:44	2	strcmp
arg	55:25	55:33	3	equals+1
water	55:25	0:0	4	equals
op	55:31	0:0	4	+
water	55:32	0:0	4	1
arg	55:35	55:44	3	"if-safe"
water	55:35	0:0	4	"if-safe"
op	55:46	0:0	2	==
water	55:49	0:0	2	0
water	55:50	0:0	2	)
water	56:12	0:0	2	option
op	56:19	0:0	2	=
water	56:21	0:0	2	PNG_HANDLE_CHUNK_IF_SAFE
water	56:45	0:0	2	;
water	57:9	0:0	2	else
water	57:14	0:0	2	if
water	57:17	0:0	2	(
call	57:18	57:41	2	strcmp
arg	57:25	57:33	3	equals+1
water	57:25	0:0	4	equals
op	57:31	0:0	4	+
water	57:32	0:0	4	1
arg	57:35	57:41	3	"save"
water	57:35	0:0	4	"save"
op	57:43	0:0	2	==
water	57:46	0:0	2	0
water	57:47	0:0	2	)
water	58:12	0:0	2	option
op	58:19	0:0	2	=
water	58:21	0:0	2	PNG_HANDLE_CHUNK_ALWAYS
water	58:44	0:0	2	;
water	59:9	0:0	2	else
water	60:9	0:0	2	{
call	61:12	62:31	2	fprintf
arg	61:20	61:26	3	stderr
water	61:20	0:0	4	stderr
arg	61:28	61:69	3	"%s(%s): %s: unrecognized chunk option\n"
water	61:28	0:0	4	"%s(%s): %s: unrecognized chunk option\n"
arg	61:71	61:78	3	d->file
water	61:71	0:0	4	d
op	61:72	0:0	4	->
water	61:74	0:0	4	file
arg	62:15	62:22	3	d->test
water	62:15	0:0	4	d
op	62:16	0:0	4	->
water	62:18	0:0	4	test
arg	62:24	62:31	3	argv[i]
water	62:24	0:0	4	argv
op	62:28	0:0	4	[
water	62:29	0:0	4	i
op	62:30	0:0	4	]
water	62:32	0:0	2	;
call	63:12	63:26	2	display_exit
arg	63:25	63:26	3	d
water	63:25	0:0	4	d
water	63:27	0:0	2	;
water	64:9	0:0	2	}
water	65:9	0:0	2	switch
water	65:16	0:0	2	(
water	65:17	0:0	2	equals
op	65:24	0:0	2	-
water	65:26	0:0	2	argv
op	65:30	0:0	2	[
water	65:31	0:0	2	i
op	65:32	0:0	2	]
water	65:33	0:0	2	)
water	66:9	0:0	2	{
water	67:12	0:0	2	case
water	67:17	0:0	2	4
water	67:18	0:0	2	:
water	68:15	0:0	2	chunk
op	68:21	0:0	2	=
call	68:23	68:35	2	find
arg	68:28	68:35	3	argv[i]
water	68:28	0:0	4	argv
op	68:32	0:0	4	[
water	68:33	0:0	4	i
op	68:34	0:0	4	]
water	68:36	0:0	2	;
water	69:15	0:0	2	if
water	69:18	0:0	2	(
water	69:19	0:0	2	chunk
op	69:25	0:0	2	>=
water	69:28	0:0	2	0
water	69:29	0:0	2	)
water	70:15	0:0	2	{
water	76:18	0:0	2	png_byte
water	76:27	0:0	2	name
op	76:31	0:0	2	[
water	76:32	0:0	2	5
op	76:33	0:0	2	]
water	76:34	0:0	2	;
call	77:18	77:56	2	memcpy
arg	77:25	77:29	3	name
water	77:25	0:0	4	name
arg	77:31	77:53	3	chunk_info[chunk].name
water	77:31	0:0	4	chunk_info
op	77:41	0:0	4	[
water	77:42	0:0	4	chunk
op	77:47	0:0	4	]
op	77:48	0:0	4	.
water	77:49	0:0	4	name
arg	77:55	77:56	3	5
water	77:55	0:0	4	5
water	77:57	0:0	2	;
call	78:18	78:73	2	png_set_keep_unknown_chunks
arg	78:46	78:56	3	d->png_ptr
water	78:46	0:0	4	d
op	78:47	0:0	4	->
water	78:49	0:0	4	png_ptr
arg	78:58	78:64	3	option
water	78:58	0:0	4	option
arg	78:66	78:70	3	name
water	78:66	0:0	4	name
arg	78:72	78:73	3	1
water	78:72	0:0	4	1
water	78:74	0:0	2	;
water	79:18	0:0	2	chunk_info
op	79:28	0:0	2	[
water	79:29	0:0	2	chunk
op	79:34	0:0	2	]
op	79:35	0:0	2	.
water	79:36	0:0	2	keep
op	79:41	0:0	2	=
water	79:43	0:0	2	option
water	79:49	0:0	2	;
water	80:18	0:0	2	continue
water	80:26	0:0	2	;
water	81:15	0:0	2	}
water	82:15	0:0	2	break
water	82:20	0:0	2	;
water	83:12	0:0	2	case
water	83:17	0:0	2	7
water	83:18	0:0	2	:
water	84:15	0:0	2	if
water	84:18	0:0	2	(
call	84:19	84:47	2	memcmp
arg	84:26	84:33	3	argv[i]
water	84:26	0:0	4	argv
op	84:30	0:0	4	[
water	84:31	0:0	4	i
op	84:32	0:0	4	]
arg	84:35	84:44	3	"default"
water	84:35	0:0	4	"default"
arg	84:46	84:47	3	7
water	84:46	0:0	4	7
op	84:49	0:0	2	==
water	84:52	0:0	2	0
water	84:53	0:0	2	)
water	85:15	0:0	2	{
call	86:18	86:73	2	png_set_keep_unknown_chunks
arg	86:46	86:56	3	d->png_ptr
water	86:46	0:0	4	d
op	86:47	0:0	4	->
water	86:49	0:0	4	png_ptr
arg	86:58	86:64	3	option
water	86:58	0:0	4	option
arg	86:66	86:70	3	NULL
water	86:66	0:0	4	NULL
arg	86:72	86:73	3	0
water	86:72	0:0	4	0
water	86:74	0:0	2	;
water	87:18	0:0	2	d
op	87:19	0:0	2	->
water	87:21	0:0	2	keep
op	87:26	0:0	2	=
water	87:28	0:0	2	option
water	87:34	0:0	2	;
water	88:18	0:0	2	continue
water	88:26	0:0	2	;
water	89:15	0:0	2	}
water	90:15	0:0	2	break
water	90:20	0:0	2	;
water	91:12	0:0	2	case
water	91:17	0:0	2	3
water	91:18	0:0	2	:
water	92:15	0:0	2	if
water	92:18	0:0	2	(
call	92:19	92:43	2	memcmp
arg	92:26	92:33	3	argv[i]
water	92:26	0:0	4	argv
op	92:30	0:0	4	[
water	92:31	0:0	4	i
op	92:32	0:0	4	]
arg	92:35	92:40	3	"all"
water	92:35	0:0	4	"all"
arg	92:42	92:43	3	3
water	92:42	0:0	4	3
op	92:45	0:0	2	==
water	92:48	0:0	2	0
water	92:49	0:0	2	)
water	93:15	0:0	2	{
call	94:18	94:74	2	png_set_keep_unknown_chunks
arg	94:46	94:56	3	d->png_ptr
water	94:46	0:0	4	d
op	94:47	0:0	4	->
water	94:49	0:0	4	png_ptr
arg	94:58	94:64	3	option
water	94:58	0:0	4	option
arg	94:66	94:70	3	NULL
water	94:66	0:0	4	NULL
arg	94:72	94:74	3	-1
op	94:72	0:0	4	-
water	94:73	0:0	4	1
water	94:75	0:0	2	;
water	95:18	0:0	2	d
op	95:19	0:0	2	->
water	95:21	0:0	2	keep
op	95:26	0:0	2	=
water	95:28	0:0	2	option
water	95:34	0:0	2	;
water	96:18	0:0	2	for
water	96:22	0:0	2	(
water	96:23	0:0	2	chunk
op	96:29	0:0	2	=
water	96:31	0:0	2	0
water	96:32	0:0	2	;
water	96:34	0:0	2	chunk
op	96:40	0:0	2	<
water	96:42	0:0	2	NINFO
water	96:47	0:0	2	;
op	96:49	0:0	2	++
water	96:51	0:0	2	chunk
water	96:56	0:0	2	)
water	97:21	0:0	2	if
water	97:24	0:0	2	(
water	97:25	0:0	2	chunk_info
op	97:35	0:0	2	[
water	97:36	0:0	2	chunk
op	97:41	0:0	2	]
op	97:42	0:0	2	.
water	97:43	0:0	2	all
water	97:46	0:0	2	)
water	98:24	0:0	2	chunk_info
op	98:34	0:0	2	[
water	98:35	0:0	2	chunk
op	98:40	0:0	2	]
op	98:41	0:0	2	.
water	98:42	0:0	2	keep
op	98:47	0:0	2	=
water	98:49	0:0	2	option
water	98:55	0:0	2	;
water	99:18	0:0	2	continue
water	99:26	0:0	2	;
water	100:15	0:0	2	}
water	101:15	0:0	2	break
water	101:20	0:0	2	;
water	102:12	0:0	2	default
water	102:19	0:0	2	:
water	103:15	0:0	2	break
water	103:20	0:0	2	;
water	104:9	0:0	2	}
water	105:6	0:0	2	}
call	106:6	107:25	2	fprintf
arg	106:14	106:20	3	stderr
water	106:14	0:0	4	stderr
arg	106:22	106:65	3	"%s(%s): %s: unrecognized chunk argument\n"
water	106:22	0:0	4	"%s(%s): %s: unrecognized chunk argument\n"
arg	106:67	106:74	3	d->file
water	106:67	0:0	4	d
op	106:68	0:0	4	->
water	106:70	0:0	4	file
arg	107:9	107:16	3	d->test
water	107:9	0:0	4	d
op	107:10	0:0	4	->
water	107:12	0:0	4	test
arg	107:18	107:25	3	argv[i]
water	107:18	0:0	4	argv
op	107:22	0:0	4	[
water	107:23	0:0	4	i
op	107:24	0:0	4	]
water	107:26	0:0	2	;
call	108:6	108:20	2	display_exit
arg	108:19	108:20	3	d
water	108:19	0:0	4	d
water	108:21	0:0	2	;
water	109:3	0:0	2	}
call	110:3	110:40	2	png_read_info
arg	110:17	110:27	3	d->png_ptr
water	110:17	0:0	4	d
op	110:18	0:0	4	->
water	110:20	0:0	4	png_ptr
arg	110:29	110:40	3	d->info_ptr
water	110:29	0:0	4	d
op	110:30	0:0	4	->
water	110:32	0:0	4	info_ptr
water	110:41	0:0	2	;
switch	111:3	124:3	2	(png_get_interlace_type (d -> png_ptr ,d -> info_ptr ))
cond	111:11	111:57	3	png_get_interlace_type (d -> png_ptr ,d -> info_ptr )
call	111:11	111:57	4	png_get_interlace_type
arg	111:34	111:44	5	d->png_ptr
water	111:34	0:0	6	d
op	111:35	0:0	6	->
water	111:37	0:0	6	png_ptr
arg	111:46	111:57	5	d->info_ptr
water	111:46	0:0	6	d
op	111:47	0:0	6	->
water	111:49	0:0	6	info_ptr
stmts	112:3	124:3	3	
water	112:3	0:0	4	{
label	113:6	113:29	4	case PNG_INTERLACE_NONE :
water	114:9	0:0	4	npasses
op	114:17	0:0	4	=
water	114:19	0:0	4	1
water	114:20	0:0	4	;
break	115:9	115:14	4	
label	116:6	116:30	4	case PNG_INTERLACE_ADAM7 :
water	117:9	0:0	4	npasses
op	117:17	0:0	4	=
water	117:19	0:0	4	PNG_INTERLACE_ADAM7_PASSES
water	117:45	0:0	4	;
break	118:9	118:14	4	
label	119:6	119:13	4	default :
call	121:9	121:77	4	fprintf
arg	121:17	121:23	5	stderr
water	121:17	0:0	6	stderr
arg	121:25	121:59	5	"%s(%s): invalid interlace type\n"
water	121:25	0:0	6	"%s(%s): invalid interlace type\n"
arg	121:61	121:68	5	d->file
water	121:61	0:0	6	d
op	121:62	0:0	6	->
water	121:64	0:0	6	file
arg	121:70	121:77	5	d->test
water	121:70	0:0	6	d
op	121:71	0:0	6	->
water	121:73	0:0	6	test
water	121:78	0:0	4	;
call	122:9	122:24	4	clean_display
arg	122:23	122:24	5	d
water	122:23	0:0	6	d
water	122:25	0:0	4	;
call	123:9	123:15	4	exit
arg	123:14	123:15	5	1
water	123:14	0:0	6	1
water	123:16	0:0	4	;
water	124:3	0:0	4	}
if	128:3	152:3	2	(chunk_info [ 0 ] . keep == PNG_HANDLE_CHUNK_AS_DEFAULT)
cond	128:7	128:29	3	chunk_info [ 0 ] . keep == PNG_HANDLE_CHUNK_AS_DEFAULT
water	128:7	0:0	4	chunk_info
op	128:17	0:0	4	[
water	128:18	0:0	4	0
op	128:19	0:0	4	]
op	128:20	0:0	4	.
water	128:21	0:0	4	keep
op	128:26	0:0	4	==
water	128:29	0:0	4	PNG_HANDLE_CHUNK_AS_DEFAULT
stmts	129:3	152:3	3	
water	129:3	0:0	4	{
call	130:6	130:37	4	png_start_read_image
arg	130:27	130:37	5	d->png_ptr
water	130:27	0:0	6	d
op	130:28	0:0	6	->
water	130:30	0:0	6	png_ptr
water	130:38	0:0	4	;
water	131:6	0:0	4	height
op	131:13	0:0	4	=
call	131:15	131:59	4	png_get_image_height
arg	131:36	131:46	5	d->png_ptr
water	131:36	0:0	6	d
op	131:37	0:0	6	->
water	131:39	0:0	6	png_ptr
arg	131:48	131:59	5	d->info_ptr
water	131:48	0:0	6	d
op	131:49	0:0	6	->
water	131:51	0:0	6	info_ptr
water	131:60	0:0	4	;
if	132:6	145:6	4	(npasses > 1)
cond	132:10	132:20	5	npasses > 1
water	132:10	0:0	6	npasses
op	132:18	0:0	6	>
water	132:20	0:0	6	1
stmts	133:6	145:6	5	
water	133:6	0:0	6	{
decl	134:9	134:73	6	png_uint_32	width
op	134:27	0:0	6	=
call	134:29	134:72	7	png_get_image_width
arg	134:49	134:59	8	d->png_ptr
water	134:49	0:0	9	d
op	134:50	0:0	9	->
water	134:52	0:0	9	png_ptr
arg	134:61	134:72	8	d->info_ptr
water	134:61	0:0	9	d
op	134:62	0:0	9	->
water	134:64	0:0	9	info_ptr
for	135:9	144:9	6	(ipass = 0 ;ipass < npasses;++ ipass)
forinit	135:14	135:21	7	ipass = 0 ;
water	135:14	0:0	8	ipass
op	135:19	0:0	8	=
water	135:20	0:0	8	0
water	135:21	0:0	8	;
cond	135:23	135:29	7	ipass < npasses
water	135:23	0:0	8	ipass
op	135:28	0:0	8	<
water	135:29	0:0	8	npasses
forexpr	135:38	135:40	7	++ ipass
op	135:38	0:0	8	++
water	135:40	0:0	8	ipass
stmts	136:9	144:9	7	
water	136:9	0:0	8	{
decl	137:12	137:59	8	png_uint_32	wPass
op	137:30	0:0	8	=
call	137:32	137:58	9	PNG_PASS_COLS
arg	137:46	137:51	10	width
water	137:46	0:0	11	width
arg	137:53	137:58	10	ipass
water	137:53	0:0	11	ipass
if	138:12	143:12	8	(wPass > 0)
cond	138:16	138:24	9	wPass > 0
water	138:16	0:0	10	wPass
op	138:22	0:0	10	>
water	138:24	0:0	10	0
stmts	139:12	143:12	9	
water	139:12	0:0	10	{
decl	140:15	140:28	10	png_uint_32	y
for	141:15	142:54	10	(y = 0 ;y < height;++ y)
forinit	141:20	141:23	11	y = 0 ;
water	141:20	0:0	12	y
op	141:21	0:0	12	=
water	141:22	0:0	12	0
water	141:23	0:0	12	;
cond	141:25	141:27	11	y < height
water	141:25	0:0	12	y
op	141:26	0:0	12	<
water	141:27	0:0	12	height
forexpr	141:35	141:37	11	++ y
op	141:35	0:0	12	++
water	141:37	0:0	12	y
stmts	141:40	142:54	11	
if	141:40	142:54	12	(PNG_ROW_IN_INTERLACE_PASS (y ,ipass ))
cond	141:44	141:78	13	PNG_ROW_IN_INTERLACE_PASS (y ,ipass )
call	141:44	141:78	14	PNG_ROW_IN_INTERLACE_PASS
arg	141:70	141:71	15	y
water	141:70	0:0	16	y
arg	141:73	141:78	15	ipass
water	141:73	0:0	16	ipass
stmts	142:18	142:54	13	
call	142:18	142:53	14	png_read_row
arg	142:31	142:41	15	d->png_ptr
water	142:31	0:0	16	d
op	142:32	0:0	16	->
water	142:34	0:0	16	png_ptr
arg	142:43	142:47	15	NULL
water	142:43	0:0	16	NULL
arg	142:49	142:53	15	NULL
water	142:49	0:0	16	NULL
water	142:54	0:0	14	;
water	143:12	0:0	10	}
water	144:9	0:0	8	}
water	145:6	0:0	6	}
else	146:6	151:6	4
stmts	147:6	151:6	5	
water	147:6	0:0	6	{
decl	148:9	148:22	6	png_uint_32	y
for	149:9	150:48	6	(y = 0 ;y < height;++ y)
forinit	149:14	149:17	7	y = 0 ;
water	149:14	0:0	8	y
op	149:15	0:0	8	=
water	149:16	0:0	8	0
water	149:17	0:0	8	;
cond	149:19	149:21	7	y < height
water	149:19	0:0	8	y
op	149:20	0:0	8	<
water	149:21	0:0	8	height
forexpr	149:29	149:31	7	++ y
op	149:29	0:0	8	++
water	149:31	0:0	8	y
stmts	150:12	150:48	7	
call	150:12	150:47	8	png_read_row
arg	150:25	150:35	9	d->png_ptr
water	150:25	0:0	10	d
op	150:26	0:0	10	->
water	150:28	0:0	10	png_ptr
arg	150:37	150:41	9	NULL
water	150:37	0:0	10	NULL
arg	150:43	150:47	9	NULL
water	150:43	0:0	10	NULL
water	150:48	0:0	8	;
water	151:6	0:0	6	}
water	152:3	0:0	4	}
call	153:3	153:38	2	png_read_end
arg	153:16	153:26	3	d->png_ptr
water	153:16	0:0	4	d
op	153:17	0:0	4	->
water	153:19	0:0	4	png_ptr
arg	153:28	153:38	3	d->end_ptr
water	153:28	0:0	4	d
op	153:29	0:0	4	->
water	153:31	0:0	4	end_ptr
water	153:39	0:0	2	;
water	154:3	0:0	2	flags
op	154:8	0:0	2	[
water	154:9	0:0	2	0
op	154:10	0:0	2	]
op	154:12	0:0	2	=
call	154:14	154:38	2	get_valid
arg	154:24	154:25	3	d
water	154:24	0:0	4	d
arg	154:27	154:38	3	d->info_ptr
water	154:27	0:0	4	d
op	154:28	0:0	4	->
water	154:30	0:0	4	info_ptr
water	154:39	0:0	2	;
water	155:3	0:0	2	flags
op	155:8	0:0	2	[
water	155:9	0:0	2	1
op	155:10	0:0	2	]
op	155:12	0:0	2	=
call	155:14	155:43	2	get_unknown
arg	155:26	155:27	3	d
water	155:26	0:0	4	d
arg	155:29	155:40	3	d->info_ptr
water	155:29	0:0	4	d
op	155:30	0:0	4	->
water	155:32	0:0	4	info_ptr
arg	155:42	155:43	3	0
water	155:42	0:0	4	0
water	155:44	0:0	2	;
water	157:3	0:0	2	flags
op	157:8	0:0	2	[
water	157:9	0:0	2	chunk_info
op	157:19	0:0	2	[
water	157:20	0:0	2	0
op	157:21	0:0	2	]
op	157:22	0:0	2	.
water	157:23	0:0	2	keep
op	157:28	0:0	2	!=
water	157:31	0:0	2	PNG_HANDLE_CHUNK_AS_DEFAULT
op	157:58	0:0	2	]
op	157:60	0:0	2	|=
water	158:6	0:0	2	PNG_INFO_IDAT
water	158:19	0:0	2	;
water	159:3	0:0	2	flags
op	159:8	0:0	2	[
water	159:9	0:0	2	2
op	159:10	0:0	2	]
op	159:12	0:0	2	=
call	159:14	159:37	2	get_valid
arg	159:24	159:25	3	d
water	159:24	0:0	4	d
arg	159:27	159:37	3	d->end_ptr
water	159:27	0:0	4	d
op	159:28	0:0	4	->
water	159:30	0:0	4	end_ptr
water	159:38	0:0	2	;
water	160:3	0:0	2	flags
op	160:8	0:0	2	[
water	160:9	0:0	2	3
op	160:10	0:0	2	]
op	160:12	0:0	2	=
call	160:14	160:42	2	get_unknown
arg	160:26	160:27	3	d
water	160:26	0:0	4	d
arg	160:29	160:39	3	d->end_ptr
water	160:29	0:0	4	d
op	160:30	0:0	4	->
water	160:32	0:0	4	end_ptr
arg	160:41	160:42	3	1
water	160:41	0:0	4	1
water	160:43	0:0	2	;
call	161:3	161:18	2	clean_display
arg	161:17	161:18	3	d
water	161:17	0:0	4	d
water	161:19	0:0	2	;
return	162:3	162:17	2	d->keep
water	162:10	0:0	3	d
op	162:11	0:0	3	->
water	162:13	0:0	3	keep
