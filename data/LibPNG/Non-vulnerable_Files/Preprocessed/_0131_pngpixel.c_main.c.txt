func	2:0	198:0	0	int	main
params	2:8	0:0	1	
param	2:9	2:17	2	int	argc
param	2:19	2:36	2	const char * *	argv
stmnts	0:0	197:16	1	
decl	10:3	10:26	2	volatile int	result
op	10:23	0:0	2	=
water	10:25	0:0	2	1
if	11:3	193:3	2	(argc == 4)
cond	11:7	11:15	3	argc == 4
water	11:7	0:0	4	argc
op	11:12	0:0	4	==
water	11:15	0:0	4	4
stmts	12:3	193:3	3	
water	12:3	0:0	4	{
decl	13:6	13:28	4	long	x
op	13:13	0:0	4	=
call	13:15	13:27	5	atol
arg	13:20	13:27	6	argv[1]
water	13:20	0:0	7	argv
op	13:24	0:0	7	[
water	13:25	0:0	7	1
op	13:26	0:0	7	]
decl	14:6	14:28	4	long	y
op	14:13	0:0	4	=
call	14:15	14:27	5	atol
arg	14:20	14:27	6	argv[2]
water	14:20	0:0	7	argv
op	14:24	0:0	7	[
water	14:25	0:0	7	2
op	14:26	0:0	7	]
decl	15:6	15:36	4	FILE	*f
op	15:14	0:0	4	=
call	15:16	15:35	5	fopen
arg	15:22	15:29	6	argv[3]
water	15:22	0:0	7	argv
op	15:26	0:0	7	[
water	15:27	0:0	7	3
op	15:28	0:0	7	]
arg	15:31	15:35	6	"rb"
water	15:31	0:0	7	"rb"
decl	16:6	16:35	4	volatile png_bytep	row
op	16:29	0:0	4	=
water	16:31	0:0	4	NULL
if	17:6	190:6	4	(f != NULL)
cond	17:10	17:15	5	f != NULL
water	17:10	0:0	6	f
op	17:12	0:0	6	!=
water	17:15	0:0	6	NULL
stmts	18:6	190:6	5	
water	18:6	0:0	6	{
decl	25:9	26:29	6	png_structp	png_ptr
op	25:29	0:0	6	=
call	25:31	26:28	7	png_create_read_struct
arg	25:54	25:75	8	PNG_LIBPNG_VER_STRING
water	25:54	0:0	9	PNG_LIBPNG_VER_STRING
arg	26:12	26:16	8	NULL
water	26:12	0:0	9	NULL
arg	26:18	26:22	8	NULL
water	26:18	0:0	9	NULL
arg	26:24	26:28	8	NULL
water	26:24	0:0	9	NULL
if	27:9	187:9	6	(png_ptr != NULL)
cond	27:13	27:24	7	png_ptr != NULL
water	27:13	0:0	8	png_ptr
op	27:21	0:0	8	!=
water	27:24	0:0	8	NULL
stmts	28:9	187:9	7	
water	28:9	0:0	8	{
decl	29:12	29:64	8	png_infop	info_ptr
op	29:31	0:0	8	=
call	29:33	29:63	9	png_create_info_struct
arg	29:56	29:63	10	png_ptr
water	29:56	0:0	11	png_ptr
if	30:12	183:12	8	(info_ptr != NULL)
cond	30:16	30:28	9	info_ptr != NULL
water	30:16	0:0	10	info_ptr
op	30:25	0:0	10	!=
water	30:28	0:0	10	NULL
stmts	31:12	183:12	9	
water	31:12	0:0	10	{
if	36:15	163:15	10	(setjmp (png_jmpbuf (png_ptr ) ) == 0)
cond	36:19	36:50	11	setjmp (png_jmpbuf (png_ptr ) ) == 0
call	36:19	36:45	12	setjmp
arg	36:26	36:45	13	png_jmpbuf(png_ptr)
call	36:26	36:44	14	png_jmpbuf
arg	36:37	36:44	15	png_ptr
water	36:37	0:0	16	png_ptr
op	36:47	0:0	12	==
water	36:50	0:0	12	0
stmts	37:15	163:15	11	
water	37:15	0:0	12	{
decl	38:18	38:43	12	png_uint_32	width
water	38:35	0:0	12	,
decl	38:18	38:43	12	png_uint_32	height
decl	39:18	40:54	12	int	bit_depth
water	39:31	0:0	12	,
decl	39:18	40:54	12	int	color_type
water	39:43	0:0	12	,
decl	39:18	40:54	12	int	interlace_method
water	39:61	0:0	12	,
decl	39:18	40:54	12	int	compression_method
water	40:39	0:0	12	,
decl	39:18	40:54	12	int	filter_method
decl	41:18	41:35	12	png_bytep	row_tmp
call	48:18	48:40	12	png_init_io
arg	48:30	48:37	13	png_ptr
water	48:30	0:0	14	png_ptr
arg	48:39	48:40	13	f
water	48:39	0:0	14	f
water	48:41	0:0	12	;
call	52:18	52:49	12	png_read_info
arg	52:32	52:39	13	png_ptr
water	52:32	0:0	14	png_ptr
arg	52:41	52:49	13	info_ptr
water	52:41	0:0	14	info_ptr
water	52:50	0:0	12	;
water	58:18	0:0	12	row
op	58:22	0:0	12	=
call	58:24	59:30	12	png_malloc
arg	58:35	58:42	13	png_ptr
water	58:35	0:0	14	png_ptr
arg	58:44	59:30	13	png_get_rowbytes(png_ptr,info_ptr)
call	58:44	59:29	14	png_get_rowbytes
arg	58:61	58:68	15	png_ptr
water	58:61	0:0	16	png_ptr
arg	59:21	59:29	15	info_ptr
water	59:21	0:0	16	info_ptr
water	59:31	0:0	12	;
water	63:18	0:0	12	row_tmp
op	63:26	0:0	12	=
water	63:28	0:0	12	row
water	63:31	0:0	12	;
if	68:18	160:18	12	(png_get_IHDR (png_ptr ,info_ptr ,& width ,& height ,& bit_depth ,& color_type ,& interlace_method ,& compression_method ,& filter_method ))
cond	68:22	70:56	13	png_get_IHDR (png_ptr ,info_ptr ,& width ,& height ,& bit_depth ,& color_type ,& interlace_method ,& compression_method ,& filter_method )
call	68:22	70:56	14	png_get_IHDR
arg	68:35	68:42	15	png_ptr
water	68:35	0:0	16	png_ptr
arg	68:44	68:52	15	info_ptr
water	68:44	0:0	16	info_ptr
arg	68:54	68:60	15	&width
op	68:54	0:0	16	&
water	68:55	0:0	16	width
arg	68:62	68:69	15	&height
op	68:62	0:0	16	&
water	68:63	0:0	16	height
arg	69:21	69:31	15	&bit_depth
op	69:21	0:0	16	&
water	69:22	0:0	16	bit_depth
arg	69:33	69:44	15	&color_type
op	69:33	0:0	16	&
water	69:34	0:0	16	color_type
arg	69:46	69:63	15	&interlace_method
op	69:46	0:0	16	&
water	69:47	0:0	16	interlace_method
arg	70:21	70:40	15	&compression_method
op	70:21	0:0	16	&
water	70:22	0:0	16	compression_method
arg	70:42	70:56	15	&filter_method
op	70:42	0:0	16	&
water	70:43	0:0	16	filter_method
stmts	71:18	160:18	13	
water	71:18	0:0	14	{
decl	72:21	72:37	14	int	passes
water	72:31	0:0	14	,
decl	72:21	72:37	14	int	pass
switch	78:21	88:21	14	(interlace_method)
cond	78:29	78:29	15	interlace_method
water	78:29	0:0	16	interlace_method
stmts	79:21	88:21	15	
water	79:21	0:0	16	{
label	80:24	80:47	16	case PNG_INTERLACE_NONE :
water	81:27	0:0	16	passes
op	81:34	0:0	16	=
water	81:36	0:0	16	1
water	81:37	0:0	16	;
break	82:27	82:32	16	
label	83:24	83:48	16	case PNG_INTERLACE_ADAM7 :
water	84:27	0:0	16	passes
op	84:34	0:0	16	=
water	84:36	0:0	16	PNG_INTERLACE_ADAM7_PASSES
water	84:62	0:0	16	;
break	85:27	85:32	16	
label	86:24	86:31	16	default :
call	87:27	87:75	16	png_error
arg	87:37	87:44	17	png_ptr
water	87:37	0:0	18	png_ptr
arg	87:46	87:75	17	"pngpixel: unknown interlace"
water	87:46	0:0	18	"pngpixel: unknown interlace"
water	87:76	0:0	16	;
water	88:21	0:0	16	}
call	90:21	90:49	14	png_start_read_image
arg	90:42	90:49	15	png_ptr
water	90:42	0:0	16	png_ptr
water	90:50	0:0	14	;
for	91:21	155:21	14	(pass = 0 ;pass < passes;++ pass)
forinit	91:26	91:32	15	pass = 0 ;
water	91:26	0:0	16	pass
op	91:30	0:0	16	=
water	91:31	0:0	16	0
water	91:32	0:0	16	;
cond	91:34	91:39	15	pass < passes
water	91:34	0:0	16	pass
op	91:38	0:0	16	<
water	91:39	0:0	16	passes
forexpr	91:47	91:49	15	++ pass
op	91:47	0:0	16	++
water	91:49	0:0	16	pass
stmts	92:21	155:21	15	
water	92:21	0:0	16	{
decl	93:24	93:64	16	png_uint_32	ystart
water	93:42	0:0	16	,
decl	93:24	93:64	16	png_uint_32	xstart
water	93:50	0:0	16	,
decl	93:24	93:64	16	png_uint_32	ystep
water	93:57	0:0	16	,
decl	93:24	93:64	16	png_uint_32	xstep
decl	94:24	94:38	16	png_uint_32	py
if	95:24	114:24	16	(interlace_method == PNG_INTERLACE_ADAM7)
cond	95:28	95:48	17	interlace_method == PNG_INTERLACE_ADAM7
water	95:28	0:0	18	interlace_method
op	95:45	0:0	18	==
water	95:48	0:0	18	PNG_INTERLACE_ADAM7
stmts	96:24	114:24	17	
water	96:24	0:0	18	{
if	104:27	105:38	18	(PNG_PASS_COLS (width ,pass ) == 0)
cond	104:31	104:61	19	PNG_PASS_COLS (width ,pass ) == 0
call	104:31	104:56	20	PNG_PASS_COLS
arg	104:45	104:50	21	width
water	104:45	0:0	22	width
arg	104:52	104:56	21	pass
water	104:52	0:0	22	pass
op	104:58	0:0	20	==
water	104:61	0:0	20	0
stmts	105:30	105:38	19	
continue	105:30	105:38	20	
water	110:27	0:0	18	xstart
op	110:34	0:0	18	=
call	110:36	110:59	18	PNG_PASS_START_COL
arg	110:55	110:59	19	pass
water	110:55	0:0	20	pass
water	110:60	0:0	18	;
water	111:27	0:0	18	ystart
op	111:34	0:0	18	=
call	111:36	111:59	18	PNG_PASS_START_ROW
arg	111:55	111:59	19	pass
water	111:55	0:0	20	pass
water	111:60	0:0	18	;
water	112:27	0:0	18	xstep
op	112:33	0:0	18	=
call	112:35	112:59	18	PNG_PASS_COL_OFFSET
arg	112:55	112:59	19	pass
water	112:55	0:0	20	pass
water	112:60	0:0	18	;
water	113:27	0:0	18	ystep
op	113:33	0:0	18	=
call	113:35	113:59	18	PNG_PASS_ROW_OFFSET
arg	113:55	113:59	19	pass
water	113:55	0:0	20	pass
water	113:60	0:0	18	;
water	114:24	0:0	18	}
else	115:24	119:24	16
stmts	116:24	119:24	17	
water	116:24	0:0	18	{
water	117:27	0:0	18	ystart
op	117:34	0:0	18	=
water	117:36	0:0	18	xstart
op	117:43	0:0	18	=
water	117:45	0:0	18	0
water	117:46	0:0	18	;
water	118:27	0:0	18	ystep
op	118:33	0:0	18	=
water	118:35	0:0	18	xstep
op	118:41	0:0	18	=
water	118:43	0:0	18	1
water	118:44	0:0	18	;
water	119:24	0:0	18	}
for	124:24	154:24	16	(py = ystart ;py < height;py += ystep)
forinit	124:29	124:40	17	py = ystart ;
water	124:29	0:0	18	py
op	124:32	0:0	18	=
water	124:34	0:0	18	ystart
water	124:40	0:0	18	;
cond	124:42	124:47	17	py < height
water	124:42	0:0	18	py
op	124:45	0:0	18	<
water	124:47	0:0	18	height
forexpr	124:55	124:61	17	py += ystep
water	124:55	0:0	18	py
op	124:58	0:0	18	+=
water	124:61	0:0	18	ystep
stmts	125:24	154:24	17	
water	125:24	0:0	18	{
decl	126:27	126:46	18	png_uint_32	px
water	126:41	0:0	18	,
decl	126:27	126:46	18	png_uint_32	ppx
call	137:27	137:62	18	png_read_row
arg	137:40	137:47	19	png_ptr
water	137:40	0:0	20	png_ptr
arg	137:49	137:56	19	row_tmp
water	137:49	0:0	20	row_tmp
arg	137:58	137:62	19	NULL
water	137:58	0:0	20	NULL
water	137:63	0:0	18	;
if	142:27	153:27	18	(y == py)
cond	142:31	142:36	19	y == py
water	142:31	0:0	20	y
op	142:33	0:0	20	==
water	142:36	0:0	20	py
stmts	142:40	153:27	19	
for	142:40	153:27	20	(px = xstart , ppx = 0 ;px < width;px += xstep , ++ ppx)
forinit	142:45	142:65	21	px = xstart , ppx = 0 ;
water	142:45	0:0	22	px
op	142:48	0:0	22	=
water	142:50	0:0	22	xstart
water	142:56	0:0	22	,
water	142:58	0:0	22	ppx
op	142:62	0:0	22	=
water	142:64	0:0	22	0
water	142:65	0:0	22	;
cond	143:30	143:35	21	px < width
water	143:30	0:0	22	px
op	143:33	0:0	22	<
water	143:35	0:0	22	width
forexpr	143:42	143:57	21	px += xstep , ++ ppx
water	143:42	0:0	22	px
op	143:45	0:0	22	+=
water	143:48	0:0	22	xstep
water	143:53	0:0	22	,
op	143:55	0:0	22	++
water	143:57	0:0	22	ppx
stmts	143:62	153:27	21	
if	143:62	153:27	22	(x == px)
cond	143:66	143:71	23	x == px
water	143:66	0:0	24	x
op	143:68	0:0	24	==
water	143:71	0:0	24	px
stmts	144:27	153:27	23	
water	144:27	0:0	24	{
call	148:30	148:73	24	print_pixel
arg	148:42	148:49	25	png_ptr
water	148:42	0:0	26	png_ptr
arg	148:51	148:59	25	info_ptr
water	148:51	0:0	26	info_ptr
arg	148:61	148:68	25	row_tmp
water	148:61	0:0	26	row_tmp
arg	148:70	148:73	25	ppx
water	148:70	0:0	26	ppx
water	148:74	0:0	24	;
goto	152:30	152:48	24	pass_loop_end
water	152:35	0:0	25	pass_loop_end
water	153:27	0:0	24	}
water	154:24	0:0	18	}
water	155:21	0:0	16	}
label	157:18	157:31	14	pass_loop_end :
water	158:21	0:0	14	row
op	158:25	0:0	14	=
water	158:27	0:0	14	NULL
water	158:31	0:0	14	;
call	159:21	159:46	14	png_free
arg	159:30	159:37	15	png_ptr
water	159:30	0:0	16	png_ptr
arg	159:39	159:46	15	row_tmp
water	159:39	0:0	16	row_tmp
water	159:47	0:0	14	;
water	160:18	0:0	14	}
else	161:18	162:72	12
stmts	162:21	162:72	13	
call	162:21	162:71	14	png_error
arg	162:31	162:38	15	png_ptr
water	162:31	0:0	16	png_ptr
arg	162:40	162:71	15	"pngpixel: png_get_IHDR failed"
water	162:40	0:0	16	"pngpixel: png_get_IHDR failed"
water	162:72	0:0	14	;
water	163:15	0:0	12	}
else	164:15	181:15	10
stmts	165:15	181:15	11	
water	165:15	0:0	12	{
if	170:18	180:18	12	(row != NULL)
cond	170:22	170:29	13	row != NULL
water	170:22	0:0	14	row
op	170:26	0:0	14	!=
water	170:29	0:0	14	NULL
stmts	171:18	180:18	13	
water	171:18	0:0	14	{
decl	177:21	177:44	14	png_bytep	row_tmp
op	177:39	0:0	14	=
water	177:41	0:0	14	row
water	178:21	0:0	14	row
op	178:25	0:0	14	=
water	178:27	0:0	14	NULL
water	178:31	0:0	14	;
call	179:21	179:46	14	png_free
arg	179:30	179:37	15	png_ptr
water	179:30	0:0	16	png_ptr
arg	179:39	179:46	15	row_tmp
water	179:39	0:0	16	row_tmp
water	179:47	0:0	14	;
water	180:18	0:0	14	}
water	181:15	0:0	12	}
call	182:15	182:57	10	png_destroy_info_struct
arg	182:39	182:46	11	png_ptr
water	182:39	0:0	12	png_ptr
arg	182:48	182:57	11	&info_ptr
op	182:48	0:0	12	&
water	182:49	0:0	12	info_ptr
water	182:58	0:0	10	;
water	183:12	0:0	10	}
else	184:12	185:79	8
stmts	185:15	185:79	9	
call	185:15	185:78	10	fprintf
arg	185:23	185:29	11	stderr
water	185:23	0:0	12	stderr
arg	185:31	185:78	11	"pngpixel: out of memory allocating png_info\n"
water	185:31	0:0	12	"pngpixel: out of memory allocating png_info\n"
water	185:79	0:0	10	;
call	186:12	186:56	8	png_destroy_read_struct
arg	186:36	186:44	9	&png_ptr
op	186:36	0:0	10	&
water	186:37	0:0	10	png_ptr
arg	186:46	186:50	9	NULL
water	186:46	0:0	10	NULL
arg	186:52	186:56	9	NULL
water	186:52	0:0	10	NULL
water	186:57	0:0	8	;
water	187:9	0:0	8	}
else	188:9	189:78	6
stmts	189:12	189:78	7	
call	189:12	189:77	8	fprintf
arg	189:20	189:26	9	stderr
water	189:20	0:0	10	stderr
arg	189:28	189:77	9	"pngpixel: out of memory allocating png_struct\n"
water	189:28	0:0	10	"pngpixel: out of memory allocating png_struct\n"
water	189:78	0:0	8	;
water	190:6	0:0	6	}
else	191:6	192:72	4
stmts	192:9	192:72	5	
call	192:9	192:71	6	fprintf
arg	192:17	192:23	7	stderr
water	192:17	0:0	8	stderr
arg	192:25	192:62	7	"pngpixel: %s: could not open file\n"
water	192:25	0:0	8	"pngpixel: %s: could not open file\n"
arg	192:64	192:71	7	argv[3]
water	192:64	0:0	8	argv
op	192:68	0:0	8	[
water	192:69	0:0	8	3
op	192:70	0:0	8	]
water	192:72	0:0	6	;
water	193:3	0:0	4	}
else	194:3	196:65	2
stmts	196:6	196:65	3	
call	196:6	196:64	4	fprintf
arg	196:14	196:20	5	stderr
water	196:14	0:0	6	stderr
arg	196:22	196:64	5	"pngpixel: usage: pngpixel x y png-file\n"
water	196:22	0:0	6	"pngpixel: usage: pngpixel x y png-file\n"
water	196:65	0:0	4	;
return	197:3	197:16	2	result
water	197:10	0:0	3	result
