func	1:0	295:0	0	static int	compare_two_images
params	2:18	0:0	1	
param	2:19	2:27	2	Image *	a
param	2:29	2:37	2	Image *	b
param	2:39	2:53	2	int	via_linear
param	3:3	3:30	2	png_const_colorp	background
stmnts	0:0	294:11	1	
decl	5:3	5:32	2	ptrdiff_t	stridea
op	5:21	0:0	2	=
water	5:23	0:0	2	a
op	5:24	0:0	2	->
water	5:26	0:0	2	stride
decl	6:3	6:32	2	ptrdiff_t	strideb
op	6:21	0:0	2	=
water	6:23	0:0	2	b
op	6:24	0:0	2	->
water	6:26	0:0	2	stride
decl	7:3	7:38	2	png_const_bytep	rowa
op	7:24	0:0	2	=
water	7:26	0:0	2	a
op	7:27	0:0	2	->
water	7:29	0:0	2	buffer
op	7:35	0:0	2	+
water	7:36	0:0	2	16
decl	8:3	8:38	2	png_const_bytep	rowb
op	8:24	0:0	2	=
water	8:26	0:0	2	b
op	8:27	0:0	2	->
water	8:29	0:0	2	buffer
op	8:35	0:0	2	+
water	8:36	0:0	2	16
decl	9:3	9:43	2	const png_uint_32	width
op	9:27	0:0	2	=
water	9:29	0:0	2	a
op	9:30	0:0	2	->
water	9:32	0:0	2	image
op	9:37	0:0	2	.
water	9:38	0:0	2	width
decl	10:3	10:45	2	const png_uint_32	height
op	10:28	0:0	2	=
water	10:30	0:0	2	a
op	10:31	0:0	2	->
water	10:33	0:0	2	image
op	10:38	0:0	2	.
water	10:39	0:0	2	height
decl	11:3	11:46	2	const png_uint_32	formata
op	11:29	0:0	2	=
water	11:31	0:0	2	a
op	11:32	0:0	2	->
water	11:34	0:0	2	image
op	11:39	0:0	2	.
water	11:40	0:0	2	format
decl	12:3	12:46	2	const png_uint_32	formatb
op	12:29	0:0	2	=
water	12:31	0:0	2	b
op	12:32	0:0	2	->
water	12:34	0:0	2	image
op	12:39	0:0	2	.
water	12:40	0:0	2	format
decl	13:3	13:63	2	const unsigned int	a_sample
op	13:31	0:0	2	=
call	13:33	13:62	3	PNG_IMAGE_SAMPLE_SIZE
arg	13:55	13:62	4	formata
water	13:55	0:0	5	formata
decl	14:3	14:63	2	const unsigned int	b_sample
op	14:31	0:0	2	=
call	14:33	14:62	3	PNG_IMAGE_SAMPLE_SIZE
arg	14:55	14:62	4	formatb
water	14:55	0:0	5	formatb
decl	15:3	15:33	2	int	alpha_added
water	15:18	0:0	2	,
decl	15:3	15:33	2	int	alpha_removed
decl	16:3	16:16	2	int	bchannels
decl	17:3	17:14	2	int	btoa[4]
decl	18:3	18:16	2	png_uint_32	y
decl	19:3	19:15	2	Transform	tr
if	21:3	23:22	2	(width != b -> image . width || height != b -> image . height)
cond	21:7	21:53	3	width != b -> image . width || height != b -> image . height
water	21:7	0:0	4	width
op	21:13	0:0	4	!=
water	21:16	0:0	4	b
op	21:17	0:0	4	->
water	21:19	0:0	4	image
op	21:24	0:0	4	.
water	21:25	0:0	4	width
op	21:31	0:0	4	||
water	21:34	0:0	4	height
op	21:41	0:0	4	!=
water	21:44	0:0	4	b
op	21:45	0:0	4	->
water	21:47	0:0	4	image
op	21:52	0:0	4	.
water	21:53	0:0	4	height
stmts	22:6	23:22	3	
return	22:6	23:22	4	logerror(a,a->file_name,": width x height changed: ",b->file_name)
call	22:13	23:21	5	logerror
arg	22:22	22:23	6	a
water	22:22	0:0	7	a
arg	22:25	22:37	6	a->file_name
water	22:25	0:0	7	a
op	22:26	0:0	7	->
water	22:28	0:0	7	file_name
arg	22:39	22:67	6	": width x height changed: "
water	22:39	0:0	7	": width x height changed: "
arg	23:9	23:21	6	b->file_name
water	23:9	0:0	7	b
op	23:10	0:0	7	->
water	23:12	0:0	7	file_name
call	25:3	25:59	2	transform_from_formats
arg	25:26	25:29	3	&tr
op	25:26	0:0	4	&
water	25:27	0:0	4	tr
arg	25:31	25:32	3	a
water	25:31	0:0	4	a
arg	25:34	25:35	3	b
water	25:34	0:0	4	b
arg	25:37	25:47	3	background
water	25:37	0:0	4	background
arg	25:49	25:59	3	via_linear
water	25:49	0:0	4	via_linear
water	25:60	0:0	2	;
if	27:3	29:18	2	(! ( formata & PNG_FORMAT_FLAG_COLORMAP ) && ( formata & PNG_FORMAT_FLAG_LINEAR ))
cond	27:7	28:39	3	! ( formata & PNG_FORMAT_FLAG_COLORMAP ) && ( formata & PNG_FORMAT_FLAG_LINEAR )
op	27:7	0:0	4	!
water	27:8	0:0	4	(
water	27:9	0:0	4	formata
op	27:17	0:0	4	&
water	27:19	0:0	4	PNG_FORMAT_FLAG_COLORMAP
water	27:43	0:0	4	)
op	27:45	0:0	4	&&
water	28:6	0:0	4	(
water	28:7	0:0	4	formata
op	28:15	0:0	4	&
water	28:17	0:0	4	PNG_FORMAT_FLAG_LINEAR
water	28:39	0:0	4	)
stmts	29:6	29:18	3	
water	29:6	0:0	4	stridea
op	29:14	0:0	4	*=
water	29:17	0:0	4	2
water	29:18	0:0	4	;
if	30:3	32:18	2	(! ( formatb & PNG_FORMAT_FLAG_COLORMAP ) && ( formatb & PNG_FORMAT_FLAG_LINEAR ))
cond	30:7	31:39	3	! ( formatb & PNG_FORMAT_FLAG_COLORMAP ) && ( formatb & PNG_FORMAT_FLAG_LINEAR )
op	30:7	0:0	4	!
water	30:8	0:0	4	(
water	30:9	0:0	4	formatb
op	30:17	0:0	4	&
water	30:19	0:0	4	PNG_FORMAT_FLAG_COLORMAP
water	30:43	0:0	4	)
op	30:45	0:0	4	&&
water	31:6	0:0	4	(
water	31:7	0:0	4	formatb
op	31:15	0:0	4	&
water	31:17	0:0	4	PNG_FORMAT_FLAG_LINEAR
water	31:39	0:0	4	)
stmts	32:6	32:18	3	
water	32:6	0:0	4	strideb
op	32:14	0:0	4	*=
water	32:17	0:0	4	2
water	32:18	0:0	4	;
if	33:3	33:51	2	(stridea < 0)
cond	33:7	33:17	3	stridea < 0
water	33:7	0:0	4	stridea
op	33:15	0:0	4	<
water	33:17	0:0	4	0
stmts	33:20	33:51	3	
water	33:20	0:0	4	rowa
op	33:25	0:0	4	+=
water	33:28	0:0	4	(
water	33:29	0:0	4	height
op	33:35	0:0	4	-
water	33:36	0:0	4	1
water	33:37	0:0	4	)
op	33:39	0:0	4	*
water	33:41	0:0	4	(
op	33:42	0:0	4	-
water	33:43	0:0	4	stridea
water	33:50	0:0	4	)
water	33:51	0:0	4	;
if	34:3	34:51	2	(strideb < 0)
cond	34:7	34:17	3	strideb < 0
water	34:7	0:0	4	strideb
op	34:15	0:0	4	<
water	34:17	0:0	4	0
stmts	34:20	34:51	3	
water	34:20	0:0	4	rowb
op	34:25	0:0	4	+=
water	34:28	0:0	4	(
water	34:29	0:0	4	height
op	34:35	0:0	4	-
water	34:36	0:0	4	1
water	34:37	0:0	4	)
op	34:39	0:0	4	*
water	34:41	0:0	4	(
op	34:42	0:0	4	-
water	34:43	0:0	4	strideb
water	34:50	0:0	4	)
water	34:51	0:0	4	;
if	40:3	149:3	2	(formata & formatb & PNG_FORMAT_FLAG_COLORMAP)
cond	40:7	40:27	3	formata & formatb & PNG_FORMAT_FLAG_COLORMAP
water	40:7	0:0	4	formata
op	40:15	0:0	4	&
water	40:17	0:0	4	formatb
op	40:25	0:0	4	&
water	40:27	0:0	4	PNG_FORMAT_FLAG_COLORMAP
stmts	41:3	149:3	3	
water	41:3	0:0	4	{
decl	43:6	43:30	4	png_const_bytep	ppa
water	43:25	0:0	4	,
decl	43:6	43:30	4	png_const_bytep	ppb
decl	44:6	44:15	4	int	match
decl	45:6	45:46	4	png_byte	in_use[256]
water	45:26	0:0	4	,
decl	45:6	45:46	4	png_byte	amax
op	45:33	0:0	4	=
water	45:35	0:0	4	0
water	45:36	0:0	4	,
decl	45:6	45:46	4	png_byte	bmax
op	45:43	0:0	4	=
water	45:45	0:0	4	0
call	46:6	46:37	4	memset
arg	46:13	46:19	5	in_use
water	46:13	0:0	6	in_use
arg	46:21	46:22	5	0
water	46:21	0:0	6	0
arg	46:24	46:37	5	sizeofin_use
op	46:24	0:0	6	sizeof
water	46:31	0:0	6	in_use
water	46:38	0:0	4	;
water	47:6	0:0	4	ppa
op	47:10	0:0	4	=
water	47:12	0:0	4	rowa
water	47:16	0:0	4	;
water	48:6	0:0	4	ppb
op	48:10	0:0	4	=
water	48:12	0:0	4	rowb
water	48:16	0:0	4	;
for	53:6	68:6	4	(y = 0 , match = 1 ;y < height && match;++ y , ppa += stridea , ppb += strideb)
forinit	53:11	53:23	5	y = 0 , match = 1 ;
water	53:11	0:0	6	y
op	53:12	0:0	6	=
water	53:13	0:0	6	0
water	53:14	0:0	6	,
water	53:16	0:0	6	match
op	53:21	0:0	6	=
water	53:22	0:0	6	1
water	53:23	0:0	6	;
cond	53:25	53:37	5	y < height && match
water	53:25	0:0	6	y
op	53:26	0:0	6	<
water	53:27	0:0	6	height
op	53:34	0:0	6	&&
water	53:37	0:0	6	match
forexpr	53:44	53:72	5	++ y , ppa += stridea , ppb += strideb
op	53:44	0:0	6	++
water	53:46	0:0	6	y
water	53:47	0:0	6	,
water	53:49	0:0	6	ppa
op	53:53	0:0	6	+=
water	53:56	0:0	6	stridea
water	53:63	0:0	6	,
water	53:65	0:0	6	ppb
op	53:69	0:0	6	+=
water	53:72	0:0	6	strideb
stmts	54:6	68:6	5	
water	54:6	0:0	6	{
decl	55:9	55:22	6	png_uint_32	x
for	56:9	67:9	6	(x = 0 ;x < width;++ x)
forinit	56:14	56:17	7	x = 0 ;
water	56:14	0:0	8	x
op	56:15	0:0	8	=
water	56:16	0:0	8	0
water	56:17	0:0	8	;
cond	56:19	56:21	7	x < width
water	56:19	0:0	8	x
op	56:20	0:0	8	<
water	56:21	0:0	8	width
forexpr	56:28	56:30	7	++ x
op	56:28	0:0	8	++
water	56:30	0:0	8	x
stmts	57:9	67:9	7	
water	57:9	0:0	8	{
decl	58:12	58:34	8	png_byte	bval
op	58:26	0:0	8	=
water	58:28	0:0	8	ppb
op	58:31	0:0	8	[
water	58:32	0:0	8	x
op	58:33	0:0	8	]
decl	59:12	59:34	8	png_byte	aval
op	59:26	0:0	8	=
water	59:28	0:0	8	ppa
op	59:31	0:0	8	[
water	59:32	0:0	8	x
op	59:33	0:0	8	]
if	60:12	61:26	8	(bval > bmax)
cond	60:16	60:23	9	bval > bmax
water	60:16	0:0	10	bval
op	60:21	0:0	10	>
water	60:23	0:0	10	bmax
stmts	61:15	61:26	9	
water	61:15	0:0	10	bmax
op	61:20	0:0	10	=
water	61:22	0:0	10	bval
water	61:26	0:0	10	;
if	62:12	63:24	8	(bval != aval)
cond	62:16	62:24	9	bval != aval
water	62:16	0:0	10	bval
op	62:21	0:0	10	!=
water	62:24	0:0	10	aval
stmts	63:15	63:24	9	
water	63:15	0:0	10	match
op	63:21	0:0	10	=
water	63:23	0:0	10	0
water	63:24	0:0	10	;
water	64:12	0:0	8	in_use
op	64:18	0:0	8	[
water	64:19	0:0	8	aval
op	64:23	0:0	8	]
op	64:25	0:0	8	=
water	64:27	0:0	8	1
water	64:28	0:0	8	;
if	65:12	66:26	8	(aval > amax)
cond	65:16	65:23	9	aval > amax
water	65:16	0:0	10	aval
op	65:21	0:0	10	>
water	65:23	0:0	10	amax
stmts	66:15	66:26	9	
water	66:15	0:0	10	amax
op	66:20	0:0	10	=
water	66:22	0:0	10	aval
water	66:26	0:0	10	;
water	67:9	0:0	8	}
water	68:6	0:0	6	}
if	70:6	124:6	4	(match)
cond	70:10	70:10	5	match
water	70:10	0:0	6	match
stmts	71:6	124:6	5	
water	71:6	0:0	6	{
decl	75:9	75:62	6	png_const_bytep	a_cmap
op	75:32	0:0	6	=
water	75:34	0:0	6	(
water	75:35	0:0	6	png_const_bytep
water	75:50	0:0	6	)
water	75:51	0:0	6	a
op	75:52	0:0	6	->
water	75:54	0:0	6	colormap
decl	76:9	76:62	6	png_const_bytep	b_cmap
op	76:32	0:0	6	=
water	76:34	0:0	6	(
water	76:35	0:0	6	png_const_bytep
water	76:50	0:0	6	)
water	76:51	0:0	6	b
op	76:52	0:0	6	->
water	76:54	0:0	6	colormap
decl	77:9	77:23	6	int	result
op	77:20	0:0	6	=
water	77:22	0:0	6	1
water	79:9	0:0	6	tr
op	79:11	0:0	6	.
water	79:12	0:0	6	is_palette
op	79:23	0:0	6	=
water	79:25	0:0	6	1
water	79:26	0:0	6	;
for	80:9	113:9	6	(y = 0 ;y < 256;++ y , a_cmap += a_sample , b_cmap += b_sample)
forinit	80:14	80:17	7	y = 0 ;
water	80:14	0:0	8	y
op	80:15	0:0	8	=
water	80:16	0:0	8	0
water	80:17	0:0	8	;
cond	80:19	80:21	7	y < 256
water	80:19	0:0	8	y
op	80:20	0:0	8	<
water	80:21	0:0	8	256
forexpr	80:26	80:61	7	++ y , a_cmap += a_sample , b_cmap += b_sample
op	80:26	0:0	8	++
water	80:28	0:0	8	y
water	80:29	0:0	8	,
water	80:31	0:0	8	a_cmap
op	80:38	0:0	8	+=
water	80:41	0:0	8	a_sample
water	80:49	0:0	8	,
water	80:51	0:0	8	b_cmap
op	80:58	0:0	8	+=
water	80:61	0:0	8	b_sample
stmts	81:12	113:9	7	
if	81:12	113:9	8	(in_use [ y ])
cond	81:16	81:24	9	in_use [ y ]
water	81:16	0:0	10	in_use
op	81:22	0:0	10	[
water	81:23	0:0	10	y
op	81:24	0:0	10	]
stmts	82:9	113:9	9	
water	82:9	0:0	10	{
if	88:12	98:12	10	(y >= a -> image . colormap_entries)
cond	88:16	88:30	11	y >= a -> image . colormap_entries
water	88:16	0:0	12	y
op	88:18	0:0	12	>=
water	88:21	0:0	12	a
op	88:22	0:0	12	->
water	88:24	0:0	12	image
op	88:29	0:0	12	.
water	88:30	0:0	12	colormap_entries
stmts	89:12	98:12	11	
water	89:12	0:0	12	{
if	90:15	96:15	12	(( a -> opts & ACCUMULATE ) == 0)
cond	90:19	90:45	13	( a -> opts & ACCUMULATE ) == 0
water	90:19	0:0	14	(
water	90:20	0:0	14	a
op	90:21	0:0	14	->
water	90:23	0:0	14	opts
op	90:28	0:0	14	&
water	90:30	0:0	14	ACCUMULATE
water	90:40	0:0	14	)
op	90:42	0:0	14	==
water	90:45	0:0	14	0
stmts	91:15	96:15	13	
water	91:15	0:0	14	{
decl	92:18	92:32	14	char	pindex[9]
call	93:18	94:61	14	sprintf
arg	93:26	93:32	15	pindex
water	93:26	0:0	16	pindex
arg	93:34	93:44	15	"%lu[%lu]"
water	93:34	0:0	16	"%lu[%lu]"
arg	93:46	93:62	15	(unsignedlong)y
water	93:46	0:0	16	(
water	93:47	0:0	16	unsigned
water	93:56	0:0	16	long
water	93:60	0:0	16	)
water	93:61	0:0	16	y
arg	94:21	94:61	15	(unsignedlong)a->image.colormap_entries
water	94:21	0:0	16	(
water	94:22	0:0	16	unsigned
water	94:31	0:0	16	long
water	94:35	0:0	16	)
water	94:36	0:0	16	a
op	94:37	0:0	16	->
water	94:39	0:0	16	image
op	94:44	0:0	16	.
water	94:45	0:0	16	colormap_entries
water	94:62	0:0	14	;
call	95:18	95:73	14	logerror
arg	95:27	95:28	15	a
water	95:27	0:0	16	a
arg	95:30	95:42	15	a->file_name
water	95:30	0:0	16	a
op	95:31	0:0	16	->
water	95:33	0:0	16	file_name
arg	95:44	95:65	15	": bad pixel index: "
water	95:44	0:0	16	": bad pixel index: "
arg	95:67	95:73	15	pindex
water	95:67	0:0	16	pindex
water	95:74	0:0	14	;
water	96:15	0:0	14	}
water	97:15	0:0	12	result
op	97:22	0:0	12	=
water	97:24	0:0	12	0
water	97:25	0:0	12	;
water	98:12	0:0	12	}
else	99:12	109:12	10
stmts	99:17	109:12	11	
if	99:17	109:12	12	(y >= b -> image . colormap_entries)
cond	99:21	99:35	13	y >= b -> image . colormap_entries
water	99:21	0:0	14	y
op	99:23	0:0	14	>=
water	99:26	0:0	14	b
op	99:27	0:0	14	->
water	99:29	0:0	14	image
op	99:34	0:0	14	.
water	99:35	0:0	14	colormap_entries
stmts	100:12	109:12	13	
water	100:12	0:0	14	{
if	101:15	107:18	14	(( a -> opts & ACCUMULATE ) == 0)
cond	101:19	101:45	15	( a -> opts & ACCUMULATE ) == 0
water	101:19	0:0	16	(
water	101:20	0:0	16	a
op	101:21	0:0	16	->
water	101:23	0:0	16	opts
op	101:28	0:0	16	&
water	101:30	0:0	16	ACCUMULATE
water	101:40	0:0	16	)
op	101:42	0:0	16	==
water	101:45	0:0	16	0
stmts	102:18	107:18	15	
water	102:18	0:0	16	{
decl	103:18	103:32	16	char	pindex[9]
call	104:18	105:61	16	sprintf
arg	104:26	104:32	17	pindex
water	104:26	0:0	18	pindex
arg	104:34	104:44	17	"%lu[%lu]"
water	104:34	0:0	18	"%lu[%lu]"
arg	104:46	104:62	17	(unsignedlong)y
water	104:46	0:0	18	(
water	104:47	0:0	18	unsigned
water	104:56	0:0	18	long
water	104:60	0:0	18	)
water	104:61	0:0	18	y
arg	105:21	105:61	17	(unsignedlong)b->image.colormap_entries
water	105:21	0:0	18	(
water	105:22	0:0	18	unsigned
water	105:31	0:0	18	long
water	105:35	0:0	18	)
water	105:36	0:0	18	b
op	105:37	0:0	18	->
water	105:39	0:0	18	image
op	105:44	0:0	18	.
water	105:45	0:0	18	colormap_entries
water	105:62	0:0	16	;
call	106:18	106:73	16	logerror
arg	106:27	106:28	17	b
water	106:27	0:0	18	b
arg	106:30	106:42	17	b->file_name
water	106:30	0:0	18	b
op	106:31	0:0	18	->
water	106:33	0:0	18	file_name
arg	106:44	106:65	17	": bad pixel index: "
water	106:44	0:0	18	": bad pixel index: "
arg	106:67	106:73	17	pindex
water	106:67	0:0	18	pindex
water	106:74	0:0	16	;
water	107:18	0:0	16	}
water	108:15	0:0	14	result
op	108:22	0:0	14	=
water	108:24	0:0	14	0
water	108:25	0:0	14	;
water	109:12	0:0	14	}
else	111:12	112:25	10
stmts	111:17	112:25	11	
if	111:17	112:25	12	(!cmppixel (& tr ,a_cmap ,b_cmap ,0 ,y ))
cond	111:21	111:56	13	!cmppixel (& tr ,a_cmap ,b_cmap ,0 ,y )
op	111:21	0:0	14	!
call	111:22	111:56	14	cmppixel
arg	111:31	111:34	15	&tr
op	111:31	0:0	16	&
water	111:32	0:0	16	tr
arg	111:36	111:42	15	a_cmap
water	111:36	0:0	16	a_cmap
arg	111:44	111:50	15	b_cmap
water	111:44	0:0	16	b_cmap
arg	111:52	111:53	15	0
water	111:52	0:0	16	0
arg	111:55	111:56	15	y
water	111:55	0:0	16	y
stmts	112:15	112:25	13	
water	112:15	0:0	14	result
op	112:22	0:0	14	=
water	112:24	0:0	14	0
water	112:25	0:0	14	;
water	113:9	0:0	10	}
if	115:9	122:9	6	(a -> opts & ACCUMULATE)
cond	115:13	115:23	7	a -> opts & ACCUMULATE
water	115:13	0:0	8	a
op	115:14	0:0	8	->
water	115:16	0:0	8	opts
op	115:21	0:0	8	&
water	115:23	0:0	8	ACCUMULATE
stmts	116:9	122:9	7	
water	116:9	0:0	8	{
water	117:12	0:0	8	tr
op	117:14	0:0	8	.
water	117:15	0:0	8	error_ptr
op	117:24	0:0	8	[
water	117:25	0:0	8	0
op	117:26	0:0	8	]
op	117:28	0:0	8	=
water	117:30	0:0	8	tr
op	117:32	0:0	8	.
water	117:33	0:0	8	error
op	117:38	0:0	8	[
water	117:39	0:0	8	0
op	117:40	0:0	8	]
water	117:41	0:0	8	;
water	118:12	0:0	8	tr
op	118:14	0:0	8	.
water	118:15	0:0	8	error_ptr
op	118:24	0:0	8	[
water	118:25	0:0	8	1
op	118:26	0:0	8	]
op	118:28	0:0	8	=
water	118:30	0:0	8	tr
op	118:32	0:0	8	.
water	118:33	0:0	8	error
op	118:38	0:0	8	[
water	118:39	0:0	8	1
op	118:40	0:0	8	]
water	118:41	0:0	8	;
water	119:12	0:0	8	tr
op	119:14	0:0	8	.
water	119:15	0:0	8	error_ptr
op	119:24	0:0	8	[
water	119:25	0:0	8	2
op	119:26	0:0	8	]
op	119:28	0:0	8	=
water	119:30	0:0	8	tr
op	119:32	0:0	8	.
water	119:33	0:0	8	error
op	119:38	0:0	8	[
water	119:39	0:0	8	2
op	119:40	0:0	8	]
water	119:41	0:0	8	;
water	120:12	0:0	8	tr
op	120:14	0:0	8	.
water	120:15	0:0	8	error_ptr
op	120:24	0:0	8	[
water	120:25	0:0	8	3
op	120:26	0:0	8	]
op	120:28	0:0	8	=
water	120:30	0:0	8	tr
op	120:32	0:0	8	.
water	120:33	0:0	8	error
op	120:38	0:0	8	[
water	120:39	0:0	8	3
op	120:40	0:0	8	]
water	120:41	0:0	8	;
water	121:12	0:0	8	result
op	121:19	0:0	8	=
water	121:21	0:0	8	1
water	121:22	0:0	8	;
water	122:9	0:0	8	}
return	123:9	123:22	6	result
water	123:16	0:0	7	result
water	124:6	0:0	6	}
else	129:6	148:6	4
stmts	129:11	148:6	5	
if	129:11	148:6	6	(( a -> opts & ACCUMULATE ) == 0)
cond	129:15	129:41	7	( a -> opts & ACCUMULATE ) == 0
water	129:15	0:0	8	(
water	129:16	0:0	8	a
op	129:17	0:0	8	->
water	129:19	0:0	8	opts
op	129:24	0:0	8	&
water	129:26	0:0	8	ACCUMULATE
water	129:36	0:0	8	)
op	129:38	0:0	8	==
water	129:41	0:0	8	0
stmts	130:6	148:6	7	
water	130:6	0:0	8	{
if	134:9	140:9	8	(amax >= a -> image . colormap_entries)
cond	134:13	134:30	9	amax >= a -> image . colormap_entries
water	134:13	0:0	10	amax
op	134:18	0:0	10	>=
water	134:21	0:0	10	a
op	134:22	0:0	10	->
water	134:24	0:0	10	image
op	134:29	0:0	10	.
water	134:30	0:0	10	colormap_entries
stmts	135:9	140:9	9	
water	135:9	0:0	10	{
decl	136:12	136:26	10	char	pindex[9]
call	137:12	138:55	10	sprintf
arg	137:20	137:26	11	pindex
water	137:20	0:0	12	pindex
arg	137:28	137:37	11	"%d[%lu]"
water	137:28	0:0	12	"%d[%lu]"
arg	137:39	137:43	11	amax
water	137:39	0:0	12	amax
arg	138:15	138:55	11	(unsignedlong)a->image.colormap_entries
water	138:15	0:0	12	(
water	138:16	0:0	12	unsigned
water	138:25	0:0	12	long
water	138:29	0:0	12	)
water	138:30	0:0	12	a
op	138:31	0:0	12	->
water	138:33	0:0	12	image
op	138:38	0:0	12	.
water	138:39	0:0	12	colormap_entries
water	138:56	0:0	10	;
return	139:12	139:75	10	logerror(a,a->file_name,": bad pixel index: ",pindex)
call	139:19	139:74	11	logerror
arg	139:28	139:29	12	a
water	139:28	0:0	13	a
arg	139:31	139:43	12	a->file_name
water	139:31	0:0	13	a
op	139:32	0:0	13	->
water	139:34	0:0	13	file_name
arg	139:45	139:66	12	": bad pixel index: "
water	139:45	0:0	13	": bad pixel index: "
arg	139:68	139:74	12	pindex
water	139:68	0:0	13	pindex
water	140:9	0:0	10	}
else	141:9	147:9	8
stmts	141:14	147:9	9	
if	141:14	147:9	10	(bmax >= b -> image . colormap_entries)
cond	141:18	141:35	11	bmax >= b -> image . colormap_entries
water	141:18	0:0	12	bmax
op	141:23	0:0	12	>=
water	141:26	0:0	12	b
op	141:27	0:0	12	->
water	141:29	0:0	12	image
op	141:34	0:0	12	.
water	141:35	0:0	12	colormap_entries
stmts	142:9	147:9	11	
water	142:9	0:0	12	{
decl	143:12	143:26	12	char	pindex[9]
call	144:12	145:55	12	sprintf
arg	144:20	144:26	13	pindex
water	144:20	0:0	14	pindex
arg	144:28	144:37	13	"%d[%lu]"
water	144:28	0:0	14	"%d[%lu]"
arg	144:39	144:43	13	bmax
water	144:39	0:0	14	bmax
arg	145:15	145:55	13	(unsignedlong)b->image.colormap_entries
water	145:15	0:0	14	(
water	145:16	0:0	14	unsigned
water	145:25	0:0	14	long
water	145:29	0:0	14	)
water	145:30	0:0	14	b
op	145:31	0:0	14	->
water	145:33	0:0	14	image
op	145:38	0:0	14	.
water	145:39	0:0	14	colormap_entries
water	145:56	0:0	12	;
return	146:12	146:75	12	logerror(b,b->file_name,": bad pixel index: ",pindex)
call	146:19	146:74	13	logerror
arg	146:28	146:29	14	b
water	146:28	0:0	15	b
arg	146:31	146:43	14	b->file_name
water	146:31	0:0	15	b
op	146:32	0:0	15	->
water	146:34	0:0	15	file_name
arg	146:45	146:66	14	": bad pixel index: "
water	146:45	0:0	15	": bad pixel index: "
arg	146:68	146:74	14	pindex
water	146:68	0:0	15	pindex
water	147:9	0:0	12	}
water	148:6	0:0	8	}
water	149:3	0:0	4	}
if	165:3	206:3	2	(! ( ( ( formata ^ formatb ) & PNG_FORMAT_FLAG_LINEAR ) | ( formata & ( formatb ^ PNG_FORMAT_FLAG_COLOR ) & PNG_FORMAT_FLAG_COLOR ) ))
cond	165:7	166:75	3	! ( ( ( formata ^ formatb ) & PNG_FORMAT_FLAG_LINEAR ) | ( formata & ( formatb ^ PNG_FORMAT_FLAG_COLOR ) & PNG_FORMAT_FLAG_COLOR ) )
op	165:7	0:0	4	!
water	165:8	0:0	4	(
water	165:9	0:0	4	(
water	165:10	0:0	4	(
water	165:11	0:0	4	formata
op	165:19	0:0	4	^
water	165:21	0:0	4	formatb
water	165:28	0:0	4	)
op	165:30	0:0	4	&
water	165:32	0:0	4	PNG_FORMAT_FLAG_LINEAR
water	165:54	0:0	4	)
op	165:56	0:0	4	|
water	166:6	0:0	4	(
water	166:7	0:0	4	formata
op	166:15	0:0	4	&
water	166:17	0:0	4	(
water	166:18	0:0	4	formatb
op	166:26	0:0	4	^
water	166:28	0:0	4	PNG_FORMAT_FLAG_COLOR
water	166:49	0:0	4	)
op	166:51	0:0	4	&
water	166:53	0:0	4	PNG_FORMAT_FLAG_COLOR
water	166:74	0:0	4	)
water	166:75	0:0	4	)
stmts	167:3	206:3	3	
water	167:3	0:0	4	{
decl	169:6	170:30	4	const png_uint_32	alpha_changed
op	169:38	0:0	4	=
water	169:40	0:0	4	(
water	169:41	0:0	4	formata
op	169:49	0:0	4	^
water	169:51	0:0	4	formatb
water	169:58	0:0	4	)
op	169:60	0:0	4	&
water	170:9	0:0	4	PNG_FORMAT_FLAG_ALPHA
water	174:6	0:0	4	alpha_removed
op	174:20	0:0	4	=
water	174:22	0:0	4	(
water	174:23	0:0	4	formata
op	174:31	0:0	4	&
water	174:33	0:0	4	alpha_changed
water	174:46	0:0	4	)
op	174:48	0:0	4	!=
water	174:51	0:0	4	0
water	174:52	0:0	4	;
water	176:6	0:0	4	alpha_added
op	176:18	0:0	4	=
water	176:20	0:0	4	(
water	176:21	0:0	4	formatb
op	176:29	0:0	4	&
water	176:31	0:0	4	alpha_changed
water	176:44	0:0	4	)
op	176:46	0:0	4	!=
water	176:49	0:0	4	0
water	176:50	0:0	4	;
water	182:6	0:0	4	{
decl	183:9	183:14	4	int	i
decl	184:9	184:25	4	png_byte	aloc[4]
decl	185:9	185:25	4	png_byte	bloc[4]
water	192:9	0:0	4	(
water	192:10	0:0	4	void
water	192:14	0:0	4	)
call	192:15	192:42	4	component_loc
arg	192:29	192:33	5	aloc
water	192:29	0:0	6	aloc
arg	192:35	192:42	5	formata
water	192:35	0:0	6	formata
water	192:43	0:0	4	;
water	193:9	0:0	4	bchannels
op	193:19	0:0	4	=
call	193:21	193:48	4	component_loc
arg	193:35	193:39	5	bloc
water	193:35	0:0	6	bloc
arg	193:41	193:48	5	formatb
water	193:41	0:0	6	formatb
water	193:49	0:0	4	;
for	195:9	196:35	4	(i = 0 ;i < 4;++ i)
forinit	195:14	195:17	5	i = 0 ;
water	195:14	0:0	6	i
op	195:15	0:0	6	=
water	195:16	0:0	6	0
water	195:17	0:0	6	;
cond	195:19	195:21	5	i < 4
water	195:19	0:0	6	i
op	195:20	0:0	6	<
water	195:21	0:0	6	4
forexpr	195:24	195:26	5	++ i
op	195:24	0:0	6	++
water	195:26	0:0	6	i
stmts	195:29	196:35	5	
if	195:29	196:35	6	(bloc [ i ] < 4)
cond	195:33	195:43	7	bloc [ i ] < 4
water	195:33	0:0	8	bloc
op	195:37	0:0	8	[
water	195:38	0:0	8	i
op	195:39	0:0	8	]
op	195:41	0:0	8	<
water	195:43	0:0	8	4
stmts	196:12	196:35	7	
water	196:12	0:0	8	btoa
op	196:16	0:0	8	[
water	196:17	0:0	8	bloc
op	196:21	0:0	8	[
water	196:22	0:0	8	i
op	196:23	0:0	8	]
op	196:24	0:0	8	]
op	196:26	0:0	8	=
water	196:28	0:0	8	aloc
op	196:32	0:0	8	[
water	196:33	0:0	8	i
op	196:34	0:0	8	]
water	196:35	0:0	8	;
if	197:9	198:33	4	(alpha_added)
cond	197:13	197:13	5	alpha_added
water	197:13	0:0	6	alpha_added
stmts	198:12	198:33	5	
water	198:12	0:0	6	alpha_added
op	198:24	0:0	6	=
water	198:26	0:0	6	bloc
op	198:30	0:0	6	[
water	198:31	0:0	6	0
op	198:32	0:0	6	]
water	198:33	0:0	6	;
else	199:9	200:27	4
stmts	200:12	200:27	5	
water	200:12	0:0	6	alpha_added
op	200:24	0:0	6	=
water	200:26	0:0	6	4
water	200:27	0:0	6	;
if	201:9	202:35	4	(alpha_removed)
cond	201:13	201:13	5	alpha_removed
water	201:13	0:0	6	alpha_removed
stmts	202:12	202:35	5	
water	202:12	0:0	6	alpha_removed
op	202:26	0:0	6	=
water	202:28	0:0	6	aloc
op	202:32	0:0	6	[
water	202:33	0:0	6	0
op	202:34	0:0	6	]
water	202:35	0:0	6	;
else	203:9	204:29	4
stmts	204:12	204:29	5	
water	204:12	0:0	6	alpha_removed
op	204:26	0:0	6	=
water	204:28	0:0	6	4
water	204:29	0:0	6	;
water	205:6	0:0	4	}
water	206:3	0:0	4	}
else	207:3	215:3	2
stmts	208:3	215:3	3	
water	208:3	0:0	4	{
water	212:6	0:0	4	bchannels
op	212:16	0:0	4	=
water	212:18	0:0	4	0
water	212:19	0:0	4	;
water	213:6	0:0	4	alpha_removed
op	213:20	0:0	4	=
water	213:22	0:0	4	alpha_added
op	213:34	0:0	4	=
water	213:36	0:0	4	4
water	213:37	0:0	4	;
water	214:6	0:0	4	btoa
op	214:10	0:0	4	[
water	214:11	0:0	4	3
op	214:12	0:0	4	]
op	214:14	0:0	4	=
water	214:16	0:0	4	btoa
op	214:20	0:0	4	[
water	214:21	0:0	4	2
op	214:22	0:0	4	]
op	214:24	0:0	4	=
water	214:26	0:0	4	btoa
op	214:30	0:0	4	[
water	214:31	0:0	4	1
op	214:32	0:0	4	]
op	214:34	0:0	4	=
water	214:36	0:0	4	btoa
op	214:40	0:0	4	[
water	214:41	0:0	4	0
op	214:42	0:0	4	]
op	214:44	0:0	4	=
water	214:46	0:0	4	4
water	214:47	0:0	4	;
water	215:3	0:0	4	}
for	216:3	285:3	2	(y = 0 ;y < height;++ y , rowa += stridea , rowb += strideb)
forinit	216:8	216:11	3	y = 0 ;
water	216:8	0:0	4	y
op	216:9	0:0	4	=
water	216:10	0:0	4	0
water	216:11	0:0	4	;
cond	216:13	216:15	3	y < height
water	216:13	0:0	4	y
op	216:14	0:0	4	<
water	216:15	0:0	4	height
forexpr	216:23	216:53	3	++ y , rowa += stridea , rowb += strideb
op	216:23	0:0	4	++
water	216:25	0:0	4	y
water	216:26	0:0	4	,
water	216:28	0:0	4	rowa
op	216:33	0:0	4	+=
water	216:36	0:0	4	stridea
water	216:43	0:0	4	,
water	216:45	0:0	4	rowb
op	216:50	0:0	4	+=
water	216:53	0:0	4	strideb
stmts	217:3	285:3	3	
water	217:3	0:0	4	{
decl	218:6	218:30	4	png_const_bytep	ppa
water	218:25	0:0	4	,
decl	218:6	218:30	4	png_const_bytep	ppb
decl	219:6	219:19	4	png_uint_32	x
for	220:6	284:6	4	(x = 0 , ppa = rowa , ppb = rowb ;x < width;++ x)
forinit	220:11	220:34	5	x = 0 , ppa = rowa , ppb = rowb ;
water	220:11	0:0	6	x
op	220:12	0:0	6	=
water	220:13	0:0	6	0
water	220:14	0:0	6	,
water	220:16	0:0	6	ppa
op	220:19	0:0	6	=
water	220:20	0:0	6	rowa
water	220:24	0:0	6	,
water	220:26	0:0	6	ppb
op	220:29	0:0	6	=
water	220:30	0:0	6	rowb
water	220:34	0:0	6	;
cond	220:36	220:38	5	x < width
water	220:36	0:0	6	x
op	220:37	0:0	6	<
water	220:38	0:0	6	width
forexpr	220:45	220:47	5	++ x
op	220:45	0:0	6	++
water	220:47	0:0	6	x
stmts	221:6	284:6	5	
water	221:6	0:0	6	{
decl	222:9	222:33	6	png_const_bytep	psa
water	222:28	0:0	6	,
decl	222:9	222:33	6	png_const_bytep	psb
if	223:9	224:66	6	(formata & PNG_FORMAT_FLAG_COLORMAP)
cond	223:13	223:23	7	formata & PNG_FORMAT_FLAG_COLORMAP
water	223:13	0:0	8	formata
op	223:21	0:0	8	&
water	223:23	0:0	8	PNG_FORMAT_FLAG_COLORMAP
stmts	224:12	224:66	7	
water	224:12	0:0	8	psa
op	224:16	0:0	8	=
water	224:18	0:0	8	(
water	224:19	0:0	8	png_const_bytep
water	224:34	0:0	8	)
water	224:35	0:0	8	a
op	224:36	0:0	8	->
water	224:38	0:0	8	colormap
op	224:47	0:0	8	+
water	224:49	0:0	8	a_sample
op	224:58	0:0	8	*
op	224:60	0:0	8	*
water	224:61	0:0	8	ppa
op	224:64	0:0	8	++
water	224:66	0:0	8	;
else	225:9	226:38	6
stmts	226:12	226:38	7	
water	226:12	0:0	8	psa
op	226:16	0:0	8	=
water	226:18	0:0	8	ppa
water	226:21	0:0	8	,
water	226:23	0:0	8	ppa
op	226:27	0:0	8	+=
water	226:30	0:0	8	a_sample
water	226:38	0:0	8	;
if	227:9	228:66	6	(formatb & PNG_FORMAT_FLAG_COLORMAP)
cond	227:13	227:23	7	formatb & PNG_FORMAT_FLAG_COLORMAP
water	227:13	0:0	8	formatb
op	227:21	0:0	8	&
water	227:23	0:0	8	PNG_FORMAT_FLAG_COLORMAP
stmts	228:12	228:66	7	
water	228:12	0:0	8	psb
op	228:16	0:0	8	=
water	228:18	0:0	8	(
water	228:19	0:0	8	png_const_bytep
water	228:34	0:0	8	)
water	228:35	0:0	8	b
op	228:36	0:0	8	->
water	228:38	0:0	8	colormap
op	228:47	0:0	8	+
water	228:49	0:0	8	b_sample
op	228:58	0:0	8	*
op	228:60	0:0	8	*
water	228:61	0:0	8	ppb
op	228:64	0:0	8	++
water	228:66	0:0	8	;
else	229:9	230:38	6
stmts	230:12	230:38	7	
water	230:12	0:0	8	psb
op	230:16	0:0	8	=
water	230:18	0:0	8	ppb
water	230:21	0:0	8	,
water	230:23	0:0	8	ppb
op	230:27	0:0	8	+=
water	230:30	0:0	8	b_sample
water	230:38	0:0	8	;
if	232:9	278:9	6	(bchannels)
cond	232:13	232:13	7	bchannels
water	232:13	0:0	8	bchannels
stmts	233:9	278:9	7	
water	233:9	0:0	8	{
if	240:12	259:12	8	(formatb & PNG_FORMAT_FLAG_LINEAR)
cond	240:16	240:26	9	formatb & PNG_FORMAT_FLAG_LINEAR
water	240:16	0:0	10	formatb
op	240:24	0:0	10	&
water	240:26	0:0	10	PNG_FORMAT_FLAG_LINEAR
stmts	241:12	259:12	9	
water	241:12	0:0	10	{
decl	242:15	242:79	10	png_const_uint_16p	pua
op	242:38	0:0	10	=
call	242:40	242:78	11	aligncastconst
arg	242:55	242:73	12	png_const_uint_16p
water	242:55	0:0	13	png_const_uint_16p
arg	242:75	242:78	12	psa
water	242:75	0:0	13	psa
decl	243:15	243:79	10	png_const_uint_16p	pub
op	243:38	0:0	10	=
call	243:40	243:78	11	aligncastconst
arg	243:55	243:73	12	png_const_uint_16p
water	243:55	0:0	13	png_const_uint_16p
arg	243:75	243:78	12	psb
water	243:75	0:0	13	psb
switch	244:15	258:15	10	(bchannels)
cond	244:23	244:23	11	bchannels
water	244:23	0:0	12	bchannels
stmts	245:15	258:15	11	
water	245:15	0:0	12	{
label	246:18	246:24	12	case 4 :
if	247:21	247:54	12	(pua [ btoa [ 3 ] ] != pub [ 3 ])
cond	247:25	247:46	13	pua [ btoa [ 3 ] ] != pub [ 3 ]
water	247:25	0:0	14	pua
op	247:28	0:0	14	[
water	247:29	0:0	14	btoa
op	247:33	0:0	14	[
water	247:34	0:0	14	3
op	247:35	0:0	14	]
op	247:36	0:0	14	]
op	247:38	0:0	14	!=
water	247:41	0:0	14	pub
op	247:44	0:0	14	[
water	247:45	0:0	14	3
op	247:46	0:0	14	]
stmts	247:49	247:54	13	
break	247:49	247:54	14	
label	248:18	248:24	12	case 3 :
if	249:21	249:54	12	(pua [ btoa [ 2 ] ] != pub [ 2 ])
cond	249:25	249:46	13	pua [ btoa [ 2 ] ] != pub [ 2 ]
water	249:25	0:0	14	pua
op	249:28	0:0	14	[
water	249:29	0:0	14	btoa
op	249:33	0:0	14	[
water	249:34	0:0	14	2
op	249:35	0:0	14	]
op	249:36	0:0	14	]
op	249:38	0:0	14	!=
water	249:41	0:0	14	pub
op	249:44	0:0	14	[
water	249:45	0:0	14	2
op	249:46	0:0	14	]
stmts	249:49	249:54	13	
break	249:49	249:54	14	
label	250:18	250:24	12	case 2 :
if	251:21	251:54	12	(pua [ btoa [ 1 ] ] != pub [ 1 ])
cond	251:25	251:46	13	pua [ btoa [ 1 ] ] != pub [ 1 ]
water	251:25	0:0	14	pua
op	251:28	0:0	14	[
water	251:29	0:0	14	btoa
op	251:33	0:0	14	[
water	251:34	0:0	14	1
op	251:35	0:0	14	]
op	251:36	0:0	14	]
op	251:38	0:0	14	!=
water	251:41	0:0	14	pub
op	251:44	0:0	14	[
water	251:45	0:0	14	1
op	251:46	0:0	14	]
stmts	251:49	251:54	13	
break	251:49	251:54	14	
label	252:18	252:24	12	case 1 :
if	253:21	253:54	12	(pua [ btoa [ 0 ] ] != pub [ 0 ])
cond	253:25	253:46	13	pua [ btoa [ 0 ] ] != pub [ 0 ]
water	253:25	0:0	14	pua
op	253:28	0:0	14	[
water	253:29	0:0	14	btoa
op	253:33	0:0	14	[
water	253:34	0:0	14	0
op	253:35	0:0	14	]
op	253:36	0:0	14	]
op	253:38	0:0	14	!=
water	253:41	0:0	14	pub
op	253:44	0:0	14	[
water	253:45	0:0	14	0
op	253:46	0:0	14	]
stmts	253:49	253:54	13	
break	253:49	253:54	14	
if	254:21	254:77	12	(alpha_added != 4 && pub [ alpha_added ] != 65535)
cond	254:25	254:65	13	alpha_added != 4 && pub [ alpha_added ] != 65535
water	254:25	0:0	14	alpha_added
op	254:37	0:0	14	!=
water	254:40	0:0	14	4
op	254:42	0:0	14	&&
water	254:45	0:0	14	pub
op	254:48	0:0	14	[
water	254:49	0:0	14	alpha_added
op	254:60	0:0	14	]
op	254:62	0:0	14	!=
water	254:65	0:0	14	65535
stmts	254:72	254:77	13	
break	254:72	254:77	14	
continue	255:21	255:29	12	
label	256:18	256:25	12	default :
break	257:21	257:26	12	
water	258:15	0:0	12	}
water	259:12	0:0	10	}
else	260:12	277:12	8
stmts	260:17	277:12	9	
if	260:17	277:12	10	(alpha_removed == 4 || psa [ alpha_removed ] == 255)
cond	260:21	260:65	11	alpha_removed == 4 || psa [ alpha_removed ] == 255
water	260:21	0:0	12	alpha_removed
op	260:35	0:0	12	==
water	260:38	0:0	12	4
op	260:40	0:0	12	||
water	260:43	0:0	12	psa
op	260:46	0:0	12	[
water	260:47	0:0	12	alpha_removed
op	260:60	0:0	12	]
op	260:62	0:0	12	==
water	260:65	0:0	12	255
stmts	261:12	277:12	11	
water	261:12	0:0	12	{
switch	262:15	276:15	12	(bchannels)
cond	262:23	262:23	13	bchannels
water	262:23	0:0	14	bchannels
stmts	263:15	276:15	13	
water	263:15	0:0	14	{
label	264:18	264:24	14	case 4 :
if	265:21	265:54	14	(psa [ btoa [ 3 ] ] != psb [ 3 ])
cond	265:25	265:46	15	psa [ btoa [ 3 ] ] != psb [ 3 ]
water	265:25	0:0	16	psa
op	265:28	0:0	16	[
water	265:29	0:0	16	btoa
op	265:33	0:0	16	[
water	265:34	0:0	16	3
op	265:35	0:0	16	]
op	265:36	0:0	16	]
op	265:38	0:0	16	!=
water	265:41	0:0	16	psb
op	265:44	0:0	16	[
water	265:45	0:0	16	3
op	265:46	0:0	16	]
stmts	265:49	265:54	15	
break	265:49	265:54	16	
label	266:18	266:24	14	case 3 :
if	267:21	267:54	14	(psa [ btoa [ 2 ] ] != psb [ 2 ])
cond	267:25	267:46	15	psa [ btoa [ 2 ] ] != psb [ 2 ]
water	267:25	0:0	16	psa
op	267:28	0:0	16	[
water	267:29	0:0	16	btoa
op	267:33	0:0	16	[
water	267:34	0:0	16	2
op	267:35	0:0	16	]
op	267:36	0:0	16	]
op	267:38	0:0	16	!=
water	267:41	0:0	16	psb
op	267:44	0:0	16	[
water	267:45	0:0	16	2
op	267:46	0:0	16	]
stmts	267:49	267:54	15	
break	267:49	267:54	16	
label	268:18	268:24	14	case 2 :
if	269:21	269:54	14	(psa [ btoa [ 1 ] ] != psb [ 1 ])
cond	269:25	269:46	15	psa [ btoa [ 1 ] ] != psb [ 1 ]
water	269:25	0:0	16	psa
op	269:28	0:0	16	[
water	269:29	0:0	16	btoa
op	269:33	0:0	16	[
water	269:34	0:0	16	1
op	269:35	0:0	16	]
op	269:36	0:0	16	]
op	269:38	0:0	16	!=
water	269:41	0:0	16	psb
op	269:44	0:0	16	[
water	269:45	0:0	16	1
op	269:46	0:0	16	]
stmts	269:49	269:54	15	
break	269:49	269:54	16	
label	270:18	270:24	14	case 1 :
if	271:21	271:54	14	(psa [ btoa [ 0 ] ] != psb [ 0 ])
cond	271:25	271:46	15	psa [ btoa [ 0 ] ] != psb [ 0 ]
water	271:25	0:0	16	psa
op	271:28	0:0	16	[
water	271:29	0:0	16	btoa
op	271:33	0:0	16	[
water	271:34	0:0	16	0
op	271:35	0:0	16	]
op	271:36	0:0	16	]
op	271:38	0:0	16	!=
water	271:41	0:0	16	psb
op	271:44	0:0	16	[
water	271:45	0:0	16	0
op	271:46	0:0	16	]
stmts	271:49	271:54	15	
break	271:49	271:54	16	
if	272:21	272:75	14	(alpha_added != 4 && psb [ alpha_added ] != 255)
cond	272:25	272:65	15	alpha_added != 4 && psb [ alpha_added ] != 255
water	272:25	0:0	16	alpha_added
op	272:37	0:0	16	!=
water	272:40	0:0	16	4
op	272:42	0:0	16	&&
water	272:45	0:0	16	psb
op	272:48	0:0	16	[
water	272:49	0:0	16	alpha_added
op	272:60	0:0	16	]
op	272:62	0:0	16	!=
water	272:65	0:0	16	255
stmts	272:70	272:75	15	
break	272:70	272:75	16	
continue	273:21	273:29	14	
label	274:18	274:25	14	default :
break	275:21	275:26	14	
water	276:15	0:0	14	}
water	277:12	0:0	12	}
water	278:9	0:0	8	}
if	282:9	283:20	6	(!cmppixel (& tr ,psa ,psb ,x ,y ) && ( a -> opts & KEEP_GOING ) == 0)
cond	282:13	282:73	7	!cmppixel (& tr ,psa ,psb ,x ,y ) && ( a -> opts & KEEP_GOING ) == 0
op	282:13	0:0	8	!
call	282:14	282:42	8	cmppixel
arg	282:23	282:26	9	&tr
op	282:23	0:0	10	&
water	282:24	0:0	10	tr
arg	282:28	282:31	9	psa
water	282:28	0:0	10	psa
arg	282:33	282:36	9	psb
water	282:33	0:0	10	psb
arg	282:38	282:39	9	x
water	282:38	0:0	10	x
arg	282:41	282:42	9	y
water	282:41	0:0	10	y
op	282:44	0:0	8	&&
water	282:47	0:0	8	(
water	282:48	0:0	8	a
op	282:49	0:0	8	->
water	282:51	0:0	8	opts
op	282:56	0:0	8	&
water	282:58	0:0	8	KEEP_GOING
water	282:68	0:0	8	)
op	282:70	0:0	8	==
water	282:73	0:0	8	0
stmts	283:12	283:20	7	
return	283:12	283:20	8	0
water	283:19	0:0	9	0
water	284:6	0:0	6	}
water	285:3	0:0	4	}
if	287:3	293:3	2	(a -> opts & ACCUMULATE)
cond	287:7	287:17	3	a -> opts & ACCUMULATE
water	287:7	0:0	4	a
op	287:8	0:0	4	->
water	287:10	0:0	4	opts
op	287:15	0:0	4	&
water	287:17	0:0	4	ACCUMULATE
stmts	288:3	293:3	3	
water	288:3	0:0	4	{
water	289:6	0:0	4	tr
op	289:8	0:0	4	.
water	289:9	0:0	4	error_ptr
op	289:18	0:0	4	[
water	289:19	0:0	4	0
op	289:20	0:0	4	]
op	289:22	0:0	4	=
water	289:24	0:0	4	tr
op	289:26	0:0	4	.
water	289:27	0:0	4	error
op	289:32	0:0	4	[
water	289:33	0:0	4	0
op	289:34	0:0	4	]
water	289:35	0:0	4	;
water	290:6	0:0	4	tr
op	290:8	0:0	4	.
water	290:9	0:0	4	error_ptr
op	290:18	0:0	4	[
water	290:19	0:0	4	1
op	290:20	0:0	4	]
op	290:22	0:0	4	=
water	290:24	0:0	4	tr
op	290:26	0:0	4	.
water	290:27	0:0	4	error
op	290:32	0:0	4	[
water	290:33	0:0	4	1
op	290:34	0:0	4	]
water	290:35	0:0	4	;
water	291:6	0:0	4	tr
op	291:8	0:0	4	.
water	291:9	0:0	4	error_ptr
op	291:18	0:0	4	[
water	291:19	0:0	4	2
op	291:20	0:0	4	]
op	291:22	0:0	4	=
water	291:24	0:0	4	tr
op	291:26	0:0	4	.
water	291:27	0:0	4	error
op	291:32	0:0	4	[
water	291:33	0:0	4	2
op	291:34	0:0	4	]
water	291:35	0:0	4	;
water	292:6	0:0	4	tr
op	292:8	0:0	4	.
water	292:9	0:0	4	error_ptr
op	292:18	0:0	4	[
water	292:19	0:0	4	3
op	292:20	0:0	4	]
op	292:22	0:0	4	=
water	292:24	0:0	4	tr
op	292:26	0:0	4	.
water	292:27	0:0	4	error
op	292:32	0:0	4	[
water	292:33	0:0	4	3
op	292:34	0:0	4	]
water	292:35	0:0	4	;
water	293:3	0:0	4	}
return	294:3	294:11	2	1
water	294:10	0:0	3	1
