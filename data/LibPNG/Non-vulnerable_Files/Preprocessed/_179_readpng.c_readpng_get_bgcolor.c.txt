func	2:0	36:0	0	int	readpng_get_bgcolor
params	2:23	0:0	1	
param	2:24	2:32	2	uch *	red
param	2:34	2:44	2	uch *	green
param	2:46	2:55	2	uch *	blue
stmnts	0:0	35:12	1	
decl	4:4	4:29	2	png_color_16p	pBackground
if	7:4	10:4	2	(setjmp (png_jmpbuf (png_ptr ) ))
cond	7:8	7:34	3	setjmp (png_jmpbuf (png_ptr ) )
call	7:8	7:34	4	setjmp
arg	7:15	7:34	5	png_jmpbuf(png_ptr)
call	7:15	7:33	6	png_jmpbuf
arg	7:26	7:33	7	png_ptr
water	7:26	0:0	8	png_ptr
stmts	7:37	10:4	3	
water	7:37	0:0	4	{
call	8:8	8:57	4	png_destroy_read_struct
arg	8:32	8:40	5	&png_ptr
op	8:32	0:0	6	&
water	8:33	0:0	6	png_ptr
arg	8:42	8:51	5	&info_ptr
op	8:42	0:0	6	&
water	8:43	0:0	6	info_ptr
arg	8:53	8:57	5	NULL
water	8:53	0:0	6	NULL
water	8:58	0:0	4	;
return	9:8	9:16	4	2
water	9:15	0:0	5	2
water	10:4	0:0	4	}
if	11:4	12:16	2	(!png_get_valid (png_ptr ,info_ptr ,PNG_INFO_bKGD ))
cond	11:8	11:55	3	!png_get_valid (png_ptr ,info_ptr ,PNG_INFO_bKGD )
op	11:8	0:0	4	!
call	11:9	11:55	4	png_get_valid
arg	11:23	11:30	5	png_ptr
water	11:23	0:0	6	png_ptr
arg	11:32	11:40	5	info_ptr
water	11:32	0:0	6	info_ptr
arg	11:42	11:55	5	PNG_INFO_bKGD
water	11:42	0:0	6	PNG_INFO_bKGD
stmts	12:8	12:16	3	
return	12:8	12:16	4	1
water	12:15	0:0	5	1
call	16:4	16:48	2	png_get_bKGD
arg	16:17	16:24	3	png_ptr
water	16:17	0:0	4	png_ptr
arg	16:26	16:34	3	info_ptr
water	16:26	0:0	4	info_ptr
arg	16:36	16:48	3	&pBackground
op	16:36	0:0	4	&
water	16:37	0:0	4	pBackground
water	16:49	0:0	2	;
if	19:4	23:4	2	(bit_depth == 16)
cond	19:8	19:21	3	bit_depth == 16
water	19:8	0:0	4	bit_depth
op	19:18	0:0	4	==
water	19:21	0:0	4	16
stmts	19:25	23:4	3	
water	19:25	0:0	4	{
op	20:8	0:0	4	*
water	20:9	0:0	4	red
op	20:15	0:0	4	=
water	20:17	0:0	4	pBackground
op	20:28	0:0	4	->
water	20:30	0:0	4	red
op	20:36	0:0	4	>>
water	20:39	0:0	4	8
water	20:40	0:0	4	;
op	21:8	0:0	4	*
water	21:9	0:0	4	green
op	21:15	0:0	4	=
water	21:17	0:0	4	pBackground
op	21:28	0:0	4	->
water	21:30	0:0	4	green
op	21:36	0:0	4	>>
water	21:39	0:0	4	8
water	21:40	0:0	4	;
op	22:8	0:0	4	*
water	22:9	0:0	4	blue
op	22:15	0:0	4	=
water	22:17	0:0	4	pBackground
op	22:28	0:0	4	->
water	22:30	0:0	4	blue
op	22:36	0:0	4	>>
water	22:39	0:0	4	8
water	22:40	0:0	4	;
water	23:4	0:0	4	}
else	23:6	30:4	2
stmts	23:11	30:4	3	
if	23:11	30:4	4	(color_type == PNG_COLOR_TYPE_GRAY && bit_depth < 8)
cond	23:15	23:64	5	color_type == PNG_COLOR_TYPE_GRAY && bit_depth < 8
water	23:15	0:0	6	color_type
op	23:26	0:0	6	==
water	23:29	0:0	6	PNG_COLOR_TYPE_GRAY
op	23:49	0:0	6	&&
water	23:52	0:0	6	bit_depth
op	23:62	0:0	6	<
water	23:64	0:0	6	8
stmts	23:67	30:4	5	
water	23:67	0:0	6	{
if	24:8	25:62	6	(bit_depth == 1)
cond	24:12	24:25	7	bit_depth == 1
water	24:12	0:0	8	bit_depth
op	24:22	0:0	8	==
water	24:25	0:0	8	1
stmts	25:12	25:62	7	
op	25:12	0:0	8	*
water	25:13	0:0	8	red
op	25:17	0:0	8	=
op	25:19	0:0	8	*
water	25:20	0:0	8	green
op	25:26	0:0	8	=
op	25:28	0:0	8	*
water	25:29	0:0	8	blue
op	25:34	0:0	8	=
water	25:36	0:0	8	pBackground
op	25:47	0:0	8	->
water	25:49	0:0	8	gray
water	25:53	0:0	8	?
water	25:55	0:0	8	255
water	25:59	0:0	8	:
water	25:61	0:0	8	0
water	25:62	0:0	8	;
else	26:8	27:63	6
stmts	26:13	27:63	7	
if	26:13	27:63	8	(bit_depth == 2)
cond	26:17	26:30	9	bit_depth == 2
water	26:17	0:0	10	bit_depth
op	26:27	0:0	10	==
water	26:30	0:0	10	2
stmts	27:12	27:63	9	
op	27:12	0:0	10	*
water	27:13	0:0	10	red
op	27:17	0:0	10	=
op	27:19	0:0	10	*
water	27:20	0:0	10	green
op	27:26	0:0	10	=
op	27:28	0:0	10	*
water	27:29	0:0	10	blue
op	27:34	0:0	10	=
water	27:36	0:0	10	(
water	27:37	0:0	10	255
op	27:40	0:0	10	/
water	27:41	0:0	10	3
water	27:42	0:0	10	)
op	27:44	0:0	10	*
water	27:46	0:0	10	pBackground
op	27:57	0:0	10	->
water	27:59	0:0	10	gray
water	27:63	0:0	10	;
else	28:8	29:64	6
stmts	29:12	29:64	7	
op	29:12	0:0	8	*
water	29:13	0:0	8	red
op	29:17	0:0	8	=
op	29:19	0:0	8	*
water	29:20	0:0	8	green
op	29:26	0:0	8	=
op	29:28	0:0	8	*
water	29:29	0:0	8	blue
op	29:34	0:0	8	=
water	29:36	0:0	8	(
water	29:37	0:0	8	255
op	29:40	0:0	8	/
water	29:41	0:0	8	15
water	29:43	0:0	8	)
op	29:45	0:0	8	*
water	29:47	0:0	8	pBackground
op	29:58	0:0	8	->
water	29:60	0:0	8	gray
water	29:64	0:0	8	;
water	30:4	0:0	6	}
else	30:6	34:4	2
stmts	30:11	34:4	3	
water	30:11	0:0	4	{
op	31:8	0:0	4	*
water	31:9	0:0	4	red
op	31:15	0:0	4	=
water	31:17	0:0	4	(
water	31:18	0:0	4	uch
water	31:21	0:0	4	)
water	31:22	0:0	4	pBackground
op	31:33	0:0	4	->
water	31:35	0:0	4	red
water	31:38	0:0	4	;
op	32:8	0:0	4	*
water	32:9	0:0	4	green
op	32:15	0:0	4	=
water	32:17	0:0	4	(
water	32:18	0:0	4	uch
water	32:21	0:0	4	)
water	32:22	0:0	4	pBackground
op	32:33	0:0	4	->
water	32:35	0:0	4	green
water	32:40	0:0	4	;
op	33:8	0:0	4	*
water	33:9	0:0	4	blue
op	33:15	0:0	4	=
water	33:17	0:0	4	(
water	33:18	0:0	4	uch
water	33:21	0:0	4	)
water	33:22	0:0	4	pBackground
op	33:33	0:0	4	->
water	33:35	0:0	4	blue
water	33:39	0:0	4	;
water	34:4	0:0	4	}
return	35:4	35:12	2	0
water	35:11	0:0	3	0
