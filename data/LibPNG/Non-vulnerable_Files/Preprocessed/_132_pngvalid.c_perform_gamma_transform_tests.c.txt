func	2:0	20:0	0	static void	perform_gamma_transform_tests
params	2:41	0:0	1	
param	2:42	2:58	2	png_modifier *	pm
stmnts	0:0	19:3	1	
decl	4:3	4:27	2	png_byte	colour_type
op	4:24	0:0	2	=
water	4:26	0:0	2	0
decl	5:3	5:25	2	png_byte	bit_depth
op	5:22	0:0	2	=
water	5:24	0:0	2	0
decl	6:3	6:34	2	unsigned int	palette_number
op	6:31	0:0	2	=
water	6:33	0:0	2	0
while	7:3	19:3	2	(next_format (& colour_type ,& bit_depth ,& palette_number ,1 ))
cond	7:10	7:66	3	next_format (& colour_type ,& bit_depth ,& palette_number ,1 )
call	7:10	7:66	4	next_format
arg	7:22	7:34	5	&colour_type
op	7:22	0:0	6	&
water	7:23	0:0	6	colour_type
arg	7:36	7:46	5	&bit_depth
op	7:36	0:0	6	&
water	7:37	0:0	6	bit_depth
arg	7:48	7:63	5	&palette_number
op	7:48	0:0	6	&
water	7:49	0:0	6	palette_number
arg	7:65	7:66	5	1
water	7:65	0:0	6	1
stmts	8:3	19:3	3	
water	8:3	0:0	4	{
decl	9:6	9:23	4	unsigned int	i
water	9:20	0:0	4	,
decl	9:6	9:23	4	unsigned int	j
for	10:6	18:9	4	(i = 0 ;i < pm -> ngamma_tests;++ i)
forinit	10:11	10:14	5	i = 0 ;
water	10:11	0:0	6	i
op	10:12	0:0	6	=
water	10:13	0:0	6	0
water	10:14	0:0	6	;
cond	10:16	10:22	5	i < pm -> ngamma_tests
water	10:16	0:0	6	i
op	10:17	0:0	6	<
water	10:18	0:0	6	pm
op	10:20	0:0	6	->
water	10:22	0:0	6	ngamma_tests
forexpr	10:36	10:38	5	++ i
op	10:36	0:0	6	++
water	10:38	0:0	6	i
stmts	10:41	18:9	5	
for	10:41	18:9	6	(j = 0 ;j < pm -> ngamma_tests;++ j)
forinit	10:46	10:49	7	j = 0 ;
water	10:46	0:0	8	j
op	10:47	0:0	8	=
water	10:48	0:0	8	0
water	10:49	0:0	8	;
cond	10:51	10:57	7	j < pm -> ngamma_tests
water	10:51	0:0	8	j
op	10:52	0:0	8	<
water	10:53	0:0	8	pm
op	10:55	0:0	8	->
water	10:57	0:0	8	ngamma_tests
forexpr	10:71	10:73	7	++ j
op	10:71	0:0	8	++
water	10:73	0:0	8	j
stmts	11:9	18:9	7	
if	11:9	18:9	8	(i != j)
cond	11:13	11:18	9	i != j
water	11:13	0:0	10	i
op	11:15	0:0	10	!=
water	11:18	0:0	10	j
stmts	12:9	18:9	9	
water	12:9	0:0	10	{
call	13:12	15:42	10	gamma_transform_test
arg	13:33	13:35	11	pm
water	13:33	0:0	12	pm
arg	13:37	13:48	11	colour_type
water	13:37	0:0	12	colour_type
arg	13:50	13:59	11	bit_depth
water	13:50	0:0	12	bit_depth
arg	13:61	13:75	11	palette_number
water	13:61	0:0	12	palette_number
arg	14:15	14:33	11	pm->interlace_type
water	14:15	0:0	12	pm
op	14:17	0:0	12	->
water	14:19	0:0	12	interlace_type
arg	14:35	14:50	11	1/pm->gammas[i]
water	14:35	0:0	12	1
op	14:36	0:0	12	/
water	14:37	0:0	12	pm
op	14:39	0:0	12	->
water	14:41	0:0	12	gammas
op	14:47	0:0	12	[
water	14:48	0:0	12	i
op	14:49	0:0	12	]
arg	14:52	14:65	11	pm->gammas[j]
water	14:52	0:0	12	pm
op	14:54	0:0	12	->
water	14:56	0:0	12	gammas
op	14:62	0:0	12	[
water	14:63	0:0	12	j
op	14:64	0:0	12	]
arg	14:67	14:68	11	0
water	14:67	0:0	12	0
arg	15:15	15:38	11	pm->use_input_precision
water	15:15	0:0	12	pm
op	15:17	0:0	12	->
water	15:19	0:0	12	use_input_precision
arg	15:40	15:42	11	0
water	15:40	0:0	12	0
water	15:43	0:0	10	;
if	16:12	17:21	10	(fail (pm ))
cond	16:16	16:23	11	fail (pm )
call	16:16	16:23	12	fail
arg	16:21	16:23	13	pm
water	16:21	0:0	14	pm
stmts	17:15	17:21	11	
return	17:15	17:21	12	
water	18:9	0:0	10	}
water	19:3	0:0	4	}
