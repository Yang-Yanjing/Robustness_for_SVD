decl	1:7	1:22	0	int	verbose
op	1:19	0:0	0	=
water	1:21	0:0	0	0
func	2:0	175:0	0	int	validation_ascii_to_fp
params	2:26	0:0	1	
param	2:27	2:36	2	int	count
param	2:38	2:46	2	int	argc
param	2:48	2:59	2	char * *	argv
stmnts	0:0	174:11	1	
decl	4:3	4:21	2	int	showall
op	4:18	0:0	2	=
water	4:20	0:0	2	0
decl	5:3	5:21	2	double	max_error
op	5:19	0:0	2	=
water	5:20	0:0	2	2
decl	6:3	6:26	2	double	max_error_abs
op	6:23	0:0	2	=
water	6:24	0:0	2	17
decl	7:3	7:17	2	double	max
op	7:14	0:0	2	=
water	7:16	0:0	2	0
decl	8:3	8:21	2	double	max_abs
op	8:18	0:0	2	=
water	8:20	0:0	2	0
decl	9:3	9:18	2	double	test
op	9:15	0:0	2	=
water	9:17	0:0	2	0
decl	10:3	10:23	2	int	precision
op	10:20	0:0	2	=
water	10:22	0:0	2	5
decl	11:3	11:23	2	int	nonfinite
op	11:20	0:0	2	=
water	11:22	0:0	2	0
decl	12:3	12:20	2	int	finite
op	12:17	0:0	2	=
water	12:19	0:0	2	0
decl	13:3	13:16	2	int	ok
op	13:13	0:0	2	=
water	13:15	0:0	2	0
decl	14:3	14:23	2	int	failcount
op	14:20	0:0	2	=
water	14:22	0:0	2	0
decl	15:3	15:24	2	int	minorarith
op	15:21	0:0	2	=
water	15:23	0:0	2	0
while	16:3	18:20	2	(-- argc > 0)
cond	16:10	16:19	3	-- argc > 0
op	16:10	0:0	4	--
water	16:12	0:0	4	argc
op	16:17	0:0	4	>
water	16:19	0:0	4	0
stmts	17:6	18:20	3	
if	17:6	18:20	4	(strcmp (* ++ argv ,"-a" ) == 0)
cond	17:10	17:35	5	strcmp (* ++ argv ,"-a" ) == 0
call	17:10	17:30	6	strcmp
arg	17:17	17:24	7	*++argv
op	17:17	0:0	8	*
op	17:18	0:0	8	++
water	17:20	0:0	8	argv
arg	17:26	17:30	7	"-a"
water	17:26	0:0	8	"-a"
op	17:32	0:0	6	==
water	17:35	0:0	6	0
stmts	18:9	18:20	5	
water	18:9	0:0	6	showall
op	18:17	0:0	6	=
water	18:19	0:0	6	1
water	18:20	0:0	6	;
else	19:6	23:6	2
stmts	19:11	23:6	3	
if	19:11	23:6	4	(strcmp (* argv ,"-e" ) == 0 && argc > 0)
cond	19:15	19:50	5	strcmp (* argv ,"-e" ) == 0 && argc > 0
call	19:15	19:33	6	strcmp
arg	19:22	19:27	7	*argv
op	19:22	0:0	8	*
water	19:23	0:0	8	argv
arg	19:29	19:33	7	"-e"
water	19:29	0:0	8	"-e"
op	19:35	0:0	6	==
water	19:38	0:0	6	0
op	19:40	0:0	6	&&
water	19:43	0:0	6	argc
op	19:48	0:0	6	>
water	19:50	0:0	6	0
stmts	20:6	23:6	5	
water	20:6	0:0	6	{
op	21:9	0:0	6	--
water	21:11	0:0	6	argc
water	21:15	0:0	6	;
water	22:9	0:0	6	max_error
op	22:19	0:0	6	=
call	22:21	22:33	6	atof
arg	22:26	22:33	7	*++argv
op	22:26	0:0	8	*
op	22:27	0:0	8	++
water	22:29	0:0	8	argv
water	22:34	0:0	6	;
water	23:6	0:0	6	}
else	24:6	28:6	2
stmts	24:11	28:6	3	
if	24:11	28:6	4	(strcmp (* argv ,"-E" ) == 0 && argc > 0)
cond	24:15	24:50	5	strcmp (* argv ,"-E" ) == 0 && argc > 0
call	24:15	24:33	6	strcmp
arg	24:22	24:27	7	*argv
op	24:22	0:0	8	*
water	24:23	0:0	8	argv
arg	24:29	24:33	7	"-E"
water	24:29	0:0	8	"-E"
op	24:35	0:0	6	==
water	24:38	0:0	6	0
op	24:40	0:0	6	&&
water	24:43	0:0	6	argc
op	24:48	0:0	6	>
water	24:50	0:0	6	0
stmts	25:6	28:6	5	
water	25:6	0:0	6	{
op	26:9	0:0	6	--
water	26:11	0:0	6	argc
water	26:15	0:0	6	;
water	27:9	0:0	6	max_error_abs
op	27:23	0:0	6	=
call	27:25	27:37	6	atof
arg	27:30	27:37	7	*++argv
op	27:30	0:0	8	*
op	27:31	0:0	8	++
water	27:33	0:0	8	argv
water	27:38	0:0	6	;
water	28:6	0:0	6	}
else	29:6	33:6	2
stmts	30:6	33:6	3	
water	30:6	0:0	4	{
call	31:9	31:55	4	fprintf
arg	31:17	31:23	5	stderr
water	31:17	0:0	6	stderr
arg	31:25	31:48	5	"unknown argument %s\n"
water	31:25	0:0	6	"unknown argument %s\n"
arg	31:50	31:55	5	*argv
op	31:50	0:0	6	*
water	31:51	0:0	6	argv
water	31:56	0:0	4	;
return	32:9	32:17	4	1
water	32:16	0:0	5	1
water	33:6	0:0	4	}
do	34:3	168:3	2	(-- count)
cond	169:10	169:12	3	-- count
op	169:10	0:0	4	--
water	169:12	0:0	4	count
stmts	35:3	168:3	3	
water	35:3	0:0	4	{
decl	36:6	36:22	4	png_size_t	index
decl	37:6	37:27	4	int	state
water	37:15	0:0	4	,
decl	37:6	37:27	4	int	failed
op	37:24	0:0	4	=
water	37:26	0:0	4	0
decl	38:6	38:21	4	char	buffer[64]
if	39:6	40:17	4	(isfinite (test ))
cond	39:10	39:23	5	isfinite (test )
call	39:10	39:23	6	isfinite
arg	39:19	39:23	7	test
water	39:19	0:0	8	test
stmts	40:9	40:17	5	
op	40:9	0:0	6	++
water	40:11	0:0	6	finite
water	40:17	0:0	6	;
else	41:6	42:20	4
stmts	42:9	42:20	5	
op	42:9	0:0	6	++
water	42:11	0:0	6	nonfinite
water	42:20	0:0	6	;
if	43:6	44:63	4	(verbose)
cond	43:10	43:10	5	verbose
water	43:10	0:0	6	verbose
stmts	44:9	44:63	5	
call	44:9	44:62	6	fprintf
arg	44:17	44:23	7	stderr
water	44:17	0:0	8	stderr
arg	44:25	44:36	7	"%.*g %d\n"
water	44:25	0:0	8	"%.*g %d\n"
arg	44:38	44:45	7	DBL_DIG
water	44:38	0:0	8	DBL_DIG
arg	44:47	44:51	7	test
water	44:47	0:0	8	test
arg	44:53	44:62	7	precision
water	44:53	0:0	8	precision
water	44:63	0:0	6	;
call	46:6	46:38	4	memset
arg	46:13	46:19	5	buffer
water	46:13	0:0	6	buffer
arg	46:21	46:23	5	71
water	46:21	0:0	6	71
arg	46:25	46:38	5	sizeofbuffer
op	46:25	0:0	6	sizeof
water	46:32	0:0	6	buffer
water	46:39	0:0	4	;
call	47:6	47:64	4	png_ascii_from_fp
arg	47:24	47:25	5	0
water	47:24	0:0	6	0
arg	47:27	47:33	5	buffer
water	47:27	0:0	6	buffer
arg	47:35	47:47	5	precision+10
water	47:35	0:0	6	precision
op	47:44	0:0	6	+
water	47:45	0:0	6	10
arg	47:49	47:53	5	test
water	47:49	0:0	6	test
arg	47:55	47:64	5	precision
water	47:55	0:0	6	precision
water	47:65	0:0	4	;
if	51:6	56:6	4	(buffer [ precision + 7 ] != 71)
cond	51:10	51:33	5	buffer [ precision + 7 ] != 71
water	51:10	0:0	6	buffer
op	51:16	0:0	6	[
water	51:17	0:0	6	precision
op	51:26	0:0	6	+
water	51:27	0:0	6	7
op	51:28	0:0	6	]
op	51:30	0:0	6	!=
water	51:33	0:0	6	71
stmts	52:6	56:6	5	
water	52:6	0:0	6	{
call	53:9	54:60	6	fprintf
arg	53:17	53:23	7	stderr
water	53:17	0:0	8	stderr
arg	53:25	53:64	7	"%g[%d] -> '%s'[%lu] buffer overflow\n"
water	53:25	0:0	8	"%g[%d] -> '%s'[%lu] buffer overflow\n"
arg	53:66	53:70	7	test
water	53:66	0:0	8	test
arg	54:12	54:21	7	precision
water	54:12	0:0	8	precision
arg	54:23	54:29	7	buffer
water	54:23	0:0	8	buffer
arg	54:31	54:60	7	(unsignedlong)strlen(buffer)
water	54:31	0:0	8	(
water	54:32	0:0	8	unsigned
water	54:41	0:0	8	long
water	54:45	0:0	8	)
call	54:46	54:59	8	strlen
arg	54:53	54:59	9	buffer
water	54:53	0:0	10	buffer
water	54:61	0:0	6	;
water	55:9	0:0	6	failed
op	55:16	0:0	6	=
water	55:18	0:0	6	1
water	55:19	0:0	6	;
water	56:6	0:0	6	}
water	60:6	0:0	4	state
op	60:12	0:0	4	=
water	60:14	0:0	4	0
water	60:15	0:0	4	;
water	61:6	0:0	4	index
op	61:12	0:0	4	=
water	61:14	0:0	4	0
water	61:15	0:0	4	;
if	62:6	72:6	4	(!isfinite (test ))
cond	62:10	62:24	5	!isfinite (test )
op	62:10	0:0	6	!
call	62:11	62:24	6	isfinite
arg	62:20	62:24	7	test
water	62:20	0:0	8	test
stmts	63:6	72:6	5	
water	63:6	0:0	6	{
if	65:9	71:9	6	(test >= 0 &&strcmp (buffer ,"inf" ) || test < 0 &&strcmp (buffer ,"-inf" ))
cond	65:13	66:47	7	test >= 0 &&strcmp (buffer ,"inf" ) || test < 0 &&strcmp (buffer ,"-inf" )
water	65:13	0:0	8	test
op	65:18	0:0	8	>=
water	65:21	0:0	8	0
op	65:23	0:0	8	&&
call	65:26	65:46	8	strcmp
arg	65:33	65:39	9	buffer
water	65:33	0:0	10	buffer
arg	65:41	65:46	9	"inf"
water	65:41	0:0	10	"inf"
op	65:48	0:0	8	||
water	66:13	0:0	8	test
op	66:18	0:0	8	<
water	66:21	0:0	8	0
op	66:23	0:0	8	&&
call	66:26	66:47	8	strcmp
arg	66:33	66:39	9	buffer
water	66:33	0:0	10	buffer
arg	66:41	66:47	9	"-inf"
water	66:41	0:0	10	"-inf"
stmts	67:9	71:9	7	
water	67:9	0:0	8	{
call	68:12	69:32	8	fprintf
arg	68:20	68:26	9	stderr
water	68:20	0:0	10	stderr
arg	68:28	68:65	9	"%g[%d] -> '%s' but expected 'inf'\n"
water	68:28	0:0	10	"%g[%d] -> '%s' but expected 'inf'\n"
arg	68:67	68:71	9	test
water	68:67	0:0	10	test
arg	69:15	69:24	9	precision
water	69:15	0:0	10	precision
arg	69:26	69:32	9	buffer
water	69:26	0:0	10	buffer
water	69:33	0:0	8	;
water	70:12	0:0	8	failed
op	70:19	0:0	8	=
water	70:21	0:0	8	1
water	70:22	0:0	8	;
water	71:9	0:0	8	}
water	72:6	0:0	6	}
else	73:6	79:6	4
stmts	73:11	79:6	5	
if	73:11	79:6	6	(!png_check_fp_number (buffer ,precision + 10 ,& state ,& index ) || buffer [ index ] != 0)
cond	73:15	74:27	7	!png_check_fp_number (buffer ,precision + 10 ,& state ,& index ) || buffer [ index ] != 0
op	73:15	0:0	8	!
call	73:16	73:72	8	png_check_fp_number
arg	73:36	73:42	9	buffer
water	73:36	0:0	10	buffer
arg	73:44	73:56	9	precision+10
water	73:44	0:0	10	precision
op	73:53	0:0	10	+
water	73:54	0:0	10	10
arg	73:58	73:64	9	&state
op	73:58	0:0	10	&
water	73:59	0:0	10	state
arg	73:66	73:72	9	&index
op	73:66	0:0	10	&
water	73:67	0:0	10	index
op	73:74	0:0	8	||
water	74:10	0:0	8	buffer
op	74:16	0:0	8	[
water	74:17	0:0	8	index
op	74:22	0:0	8	]
op	74:24	0:0	8	!=
water	74:27	0:0	8	0
stmts	75:6	79:6	7	
water	75:6	0:0	8	{
call	76:9	77:41	8	fprintf
arg	76:17	76:23	9	stderr
water	76:17	0:0	10	stderr
arg	76:25	76:69	9	"%g[%d] -> '%s' but has bad format ('%c')\n"
water	76:25	0:0	10	"%g[%d] -> '%s' but has bad format ('%c')\n"
arg	76:71	76:75	9	test
water	76:71	0:0	10	test
arg	77:9	77:18	9	precision
water	77:9	0:0	10	precision
arg	77:20	77:26	9	buffer
water	77:20	0:0	10	buffer
arg	77:28	77:41	9	buffer[index]
water	77:28	0:0	10	buffer
op	77:34	0:0	10	[
water	77:35	0:0	10	index
op	77:40	0:0	10	]
water	77:42	0:0	8	;
water	78:9	0:0	8	failed
op	78:16	0:0	8	=
water	78:18	0:0	8	1
water	78:19	0:0	8	;
water	79:6	0:0	8	}
else	80:6	87:6	4
stmts	80:11	87:6	5	
if	80:11	87:6	6	(PNG_FP_IS_NEGATIVE (state ) && ! ( test < 0 ))
cond	80:15	80:54	7	PNG_FP_IS_NEGATIVE (state ) && ! ( test < 0 )
call	80:15	80:39	8	PNG_FP_IS_NEGATIVE
arg	80:34	80:39	9	state
water	80:34	0:0	10	state
op	80:41	0:0	8	&&
op	80:44	0:0	8	!
water	80:45	0:0	8	(
water	80:46	0:0	8	test
op	80:51	0:0	8	<
water	80:53	0:0	8	0
water	80:54	0:0	8	)
stmts	81:6	87:6	7	
water	81:6	0:0	8	{
call	82:9	83:35	8	fprintf
arg	82:17	82:23	9	stderr
water	82:17	0:0	10	stderr
arg	82:25	82:78	9	"%g[%d] -> '%s' but negative value not so reported\n"
water	82:25	0:0	10	"%g[%d] -> '%s' but negative value not so reported\n"
arg	83:12	83:16	9	test
water	83:12	0:0	10	test
arg	83:18	83:27	9	precision
water	83:18	0:0	10	precision
arg	83:29	83:35	9	buffer
water	83:29	0:0	10	buffer
water	83:36	0:0	8	;
water	84:9	0:0	8	failed
op	84:16	0:0	8	=
water	84:18	0:0	8	1
water	84:19	0:0	8	;
call	85:9	85:38	8	assert
arg	85:16	85:38	9	!PNG_FP_IS_ZERO(state)
op	85:16	0:0	10	!
call	85:17	85:37	10	PNG_FP_IS_ZERO
arg	85:32	85:37	11	state
water	85:32	0:0	12	state
water	85:39	0:0	8	;
call	86:9	86:42	8	assert
arg	86:16	86:42	9	!PNG_FP_IS_POSITIVE(state)
op	86:16	0:0	10	!
call	86:17	86:41	10	PNG_FP_IS_POSITIVE
arg	86:36	86:41	11	state
water	86:36	0:0	12	state
water	86:43	0:0	8	;
water	87:6	0:0	8	}
else	88:6	95:6	4
stmts	88:11	95:6	5	
if	88:11	95:6	6	(PNG_FP_IS_ZERO (state ) && ! ( test == 0 ))
cond	88:15	88:51	7	PNG_FP_IS_ZERO (state ) && ! ( test == 0 )
call	88:15	88:35	8	PNG_FP_IS_ZERO
arg	88:30	88:35	9	state
water	88:30	0:0	10	state
op	88:37	0:0	8	&&
op	88:40	0:0	8	!
water	88:41	0:0	8	(
water	88:42	0:0	8	test
op	88:47	0:0	8	==
water	88:50	0:0	8	0
water	88:51	0:0	8	)
stmts	89:6	95:6	7	
water	89:6	0:0	8	{
call	90:9	91:35	8	fprintf
arg	90:17	90:23	9	stderr
water	90:17	0:0	10	stderr
arg	90:25	90:74	9	"%g[%d] -> '%s' but zero value not so reported\n"
water	90:25	0:0	10	"%g[%d] -> '%s' but zero value not so reported\n"
arg	91:12	91:16	9	test
water	91:12	0:0	10	test
arg	91:18	91:27	9	precision
water	91:18	0:0	10	precision
arg	91:29	91:35	9	buffer
water	91:29	0:0	10	buffer
water	91:36	0:0	8	;
water	92:9	0:0	8	failed
op	92:16	0:0	8	=
water	92:18	0:0	8	1
water	92:19	0:0	8	;
call	93:9	93:42	8	assert
arg	93:16	93:42	9	!PNG_FP_IS_NEGATIVE(state)
op	93:16	0:0	10	!
call	93:17	93:41	10	PNG_FP_IS_NEGATIVE
arg	93:36	93:41	11	state
water	93:36	0:0	12	state
water	93:43	0:0	8	;
call	94:9	94:42	8	assert
arg	94:16	94:42	9	!PNG_FP_IS_POSITIVE(state)
op	94:16	0:0	10	!
call	94:17	94:41	10	PNG_FP_IS_POSITIVE
arg	94:36	94:41	11	state
water	94:36	0:0	12	state
water	94:43	0:0	8	;
water	95:6	0:0	8	}
else	96:6	103:6	4
stmts	96:11	103:6	5	
if	96:11	103:6	6	(PNG_FP_IS_POSITIVE (state ) && ! ( test > 0 ))
cond	96:15	96:54	7	PNG_FP_IS_POSITIVE (state ) && ! ( test > 0 )
call	96:15	96:39	8	PNG_FP_IS_POSITIVE
arg	96:34	96:39	9	state
water	96:34	0:0	10	state
op	96:41	0:0	8	&&
op	96:44	0:0	8	!
water	96:45	0:0	8	(
water	96:46	0:0	8	test
op	96:51	0:0	8	>
water	96:53	0:0	8	0
water	96:54	0:0	8	)
stmts	97:6	103:6	7	
water	97:6	0:0	8	{
call	98:9	99:35	8	fprintf
arg	98:17	98:23	9	stderr
water	98:17	0:0	10	stderr
arg	98:25	98:77	9	"%g[%d] -> '%s' but postive value not so reported\n"
water	98:25	0:0	10	"%g[%d] -> '%s' but postive value not so reported\n"
arg	99:12	99:16	9	test
water	99:12	0:0	10	test
arg	99:18	99:27	9	precision
water	99:18	0:0	10	precision
arg	99:29	99:35	9	buffer
water	99:29	0:0	10	buffer
water	99:36	0:0	8	;
water	100:9	0:0	8	failed
op	100:16	0:0	8	=
water	100:18	0:0	8	1
water	100:19	0:0	8	;
call	101:9	101:42	8	assert
arg	101:16	101:42	9	!PNG_FP_IS_NEGATIVE(state)
op	101:16	0:0	10	!
call	101:17	101:41	10	PNG_FP_IS_NEGATIVE
arg	101:36	101:41	11	state
water	101:36	0:0	12	state
water	101:43	0:0	8	;
call	102:9	102:38	8	assert
arg	102:16	102:38	9	!PNG_FP_IS_ZERO(state)
op	102:16	0:0	10	!
call	102:17	102:37	10	PNG_FP_IS_ZERO
arg	102:32	102:37	11	state
water	102:32	0:0	12	state
water	102:39	0:0	8	;
water	103:6	0:0	8	}
else	104:6	142:6	4
stmts	105:6	142:6	5	
water	105:6	0:0	6	{
decl	107:9	107:34	6	double	out
op	107:20	0:0	6	=
call	107:22	107:33	7	atof
arg	107:27	107:33	8	buffer
water	107:27	0:0	9	buffer
decl	108:9	108:48	6	double	change
op	108:23	0:0	6	=
call	108:25	108:47	7	fabs
arg	108:30	108:47	8	(out-test)/test
water	108:30	0:0	9	(
water	108:31	0:0	9	out
op	108:35	0:0	9	-
water	108:37	0:0	9	test
water	108:41	0:0	9	)
op	108:42	0:0	9	/
water	108:43	0:0	9	test
decl	109:9	110:61	6	double	allow
op	109:22	0:0	6	=
op	109:24	0:0	6	.
water	109:25	0:0	6	5
op	109:26	0:0	6	/
call	109:27	110:60	7	pow
arg	109:31	109:33	8	10
water	109:31	0:0	9	10
arg	110:12	110:60	8	(precision>=DBL_DIG)?DBL_DIG-1:precision-1
water	110:12	0:0	9	(
water	110:13	0:0	9	precision
op	110:23	0:0	9	>=
water	110:26	0:0	9	DBL_DIG
water	110:33	0:0	9	)
water	110:35	0:0	9	?
water	110:37	0:0	9	DBL_DIG
op	110:44	0:0	9	-
water	110:45	0:0	9	1
water	110:47	0:0	9	:
water	110:49	0:0	9	precision
op	110:58	0:0	9	-
water	110:59	0:0	9	1
if	118:9	141:9	6	(change >= allow && (isfinite (out ) ||fabs (test / DBL_MAX ) <= 1 - allow ))
cond	118:13	119:42	7	change >= allow && (isfinite (out ) ||fabs (test / DBL_MAX ) <= 1 - allow )
water	118:13	0:0	8	change
op	118:20	0:0	8	>=
water	118:23	0:0	8	allow
op	118:29	0:0	8	&&
water	118:32	0:0	8	(
call	118:33	118:45	8	isfinite
arg	118:42	118:45	9	out
water	118:42	0:0	10	out
op	118:47	0:0	8	||
call	119:13	119:30	8	fabs
arg	119:18	119:30	9	test/DBL_MAX
water	119:18	0:0	10	test
op	119:22	0:0	10	/
water	119:23	0:0	10	DBL_MAX
op	119:32	0:0	8	<=
water	119:35	0:0	8	1
op	119:36	0:0	8	-
water	119:37	0:0	8	allow
water	119:42	0:0	8	)
stmts	120:9	141:9	7	
water	120:9	0:0	8	{
decl	121:12	121:79	8	double	percent
op	121:27	0:0	8	=
water	121:29	0:0	8	(
water	121:30	0:0	8	precision
op	121:40	0:0	8	>=
water	121:43	0:0	8	DBL_DIG
water	121:50	0:0	8	)
water	121:52	0:0	8	?
water	121:54	0:0	8	max_error_abs
water	121:68	0:0	8	:
water	121:70	0:0	8	max_error
decl	122:12	122:52	8	double	allowp
op	122:26	0:0	8	=
water	122:28	0:0	8	(
water	122:29	0:0	8	change
op	122:35	0:0	8	-
water	122:36	0:0	8	allow
water	122:41	0:0	8	)
op	122:42	0:0	8	*
water	122:43	0:0	8	100
op	122:46	0:0	8	/
water	122:47	0:0	8	allow
if	123:12	126:12	8	(precision >= DBL_DIG)
cond	123:16	123:29	9	precision >= DBL_DIG
water	123:16	0:0	10	precision
op	123:26	0:0	10	>=
water	123:29	0:0	10	DBL_DIG
stmts	124:12	126:12	9	
water	124:12	0:0	10	{
if	125:15	125:53	10	(max_abs < allowp)
cond	125:19	125:29	11	max_abs < allowp
water	125:19	0:0	12	max_abs
op	125:27	0:0	12	<
water	125:29	0:0	12	allowp
stmts	125:37	125:53	11	
water	125:37	0:0	12	max_abs
op	125:45	0:0	12	=
water	125:47	0:0	12	allowp
water	125:53	0:0	12	;
water	126:12	0:0	10	}
else	127:12	130:12	8
stmts	128:12	130:12	9	
water	128:12	0:0	10	{
if	129:15	129:45	10	(max < allowp)
cond	129:19	129:25	11	max < allowp
water	129:19	0:0	12	max
op	129:23	0:0	12	<
water	129:25	0:0	12	allowp
stmts	129:33	129:45	11	
water	129:33	0:0	12	max
op	129:37	0:0	12	=
water	129:39	0:0	12	allowp
water	129:45	0:0	12	;
water	130:12	0:0	10	}
if	131:12	138:12	8	(showall || allowp >= percent)
cond	131:16	131:37	9	showall || allowp >= percent
water	131:16	0:0	10	showall
op	131:24	0:0	10	||
water	131:27	0:0	10	allowp
op	131:34	0:0	10	>=
water	131:37	0:0	10	percent
stmts	132:12	138:12	9	
water	132:12	0:0	10	{
call	133:15	136:36	10	fprintf
arg	133:23	133:29	11	stderr
water	133:23	0:0	12	stderr
arg	134:18	134:78	11	"%.*g[%d] -> '%s' -> %.*g number changed (%g > %g (%d%%))\n"
water	134:18	0:0	12	"%.*g[%d] -> '%s' -> %.*g number changed (%g > %g (%d%%))\n"
arg	135:18	135:25	11	DBL_DIG
water	135:18	0:0	12	DBL_DIG
arg	135:27	135:31	11	test
water	135:27	0:0	12	test
arg	135:33	135:42	11	precision
water	135:33	0:0	12	precision
arg	135:44	135:50	11	buffer
water	135:44	0:0	12	buffer
arg	135:52	135:59	11	DBL_DIG
water	135:52	0:0	12	DBL_DIG
arg	135:61	135:64	11	out
water	135:61	0:0	12	out
arg	135:66	135:72	11	change
water	135:66	0:0	12	change
arg	135:74	135:79	11	allow
water	135:74	0:0	12	allow
arg	136:18	136:36	11	(int)round(allowp)
water	136:18	0:0	12	(
water	136:19	0:0	12	int
water	136:22	0:0	12	)
call	136:23	136:35	12	round
arg	136:29	136:35	13	allowp
water	136:29	0:0	14	allowp
water	136:37	0:0	10	;
water	137:15	0:0	10	failed
op	137:22	0:0	10	=
water	137:24	0:0	10	1
water	137:25	0:0	10	;
water	138:12	0:0	10	}
else	139:12	140:27	8
stmts	140:15	140:27	9	
op	140:15	0:0	10	++
water	140:17	0:0	10	minorarith
water	140:27	0:0	10	;
water	141:9	0:0	8	}
water	142:6	0:0	6	}
if	143:6	144:20	4	(failed)
cond	143:10	143:10	5	failed
water	143:10	0:0	6	failed
stmts	144:9	144:20	5	
op	144:9	0:0	6	++
water	144:11	0:0	6	failcount
water	144:20	0:0	6	;
else	145:6	146:13	4
stmts	146:9	146:13	5	
op	146:9	0:0	6	++
water	146:11	0:0	6	ok
water	146:13	0:0	6	;
label	147:0	147:4	4	skip :
water	149:6	0:0	4	precision
op	149:16	0:0	4	=
call	149:18	149:23	4	rand
water	149:24	0:0	4	;
if	150:6	150:37	4	(precision & 1)
cond	150:10	150:22	5	precision & 1
water	150:10	0:0	6	precision
op	150:20	0:0	6	&
water	150:22	0:0	6	1
stmts	150:25	150:37	5	
water	150:25	0:0	6	test
op	150:30	0:0	6	=
op	150:32	0:0	6	-
water	150:33	0:0	6	test
water	150:37	0:0	6	;
water	151:6	0:0	4	precision
op	151:16	0:0	4	>>=
water	151:20	0:0	4	1
water	151:21	0:0	4	;
if	153:6	154:27	4	(test == 0 || !isfinite (test ))
cond	153:10	153:37	5	test == 0 || !isfinite (test )
water	153:10	0:0	6	test
op	153:15	0:0	6	==
water	153:18	0:0	6	0
op	153:20	0:0	6	||
op	153:23	0:0	6	!
call	153:24	153:37	6	isfinite
arg	153:33	153:37	7	test
water	153:33	0:0	8	test
stmts	154:9	154:27	5	
water	154:9	0:0	6	test
op	154:14	0:0	6	=
water	154:16	0:0	6	precision
op	154:25	0:0	6	+
water	154:26	0:0	6	1
water	154:27	0:0	6	;
else	155:6	163:6	4
stmts	156:6	163:6	5	
water	156:6	0:0	6	{
decl	158:9	158:77	6	int	exponent
op	158:22	0:0	6	=
water	158:24	0:0	6	precision
op	158:34	0:0	6	%
water	158:36	0:0	6	(
water	158:37	0:0	6	DBL_MAX_EXP
op	158:49	0:0	6	-
water	158:51	0:0	6	DBL_MIN_EXP
water	158:62	0:0	6	)
op	158:64	0:0	6	+
water	158:66	0:0	6	DBL_MIN_EXP
decl	159:9	159:16	6	int	tmp
water	160:9	0:0	6	test
op	160:14	0:0	6	=
call	160:16	160:41	6	frexp
arg	160:22	160:35	7	test*rand()
water	160:22	0:0	8	test
call	160:27	160:34	8	*rand
arg	160:37	160:41	7	&tmp
op	160:37	0:0	8	&
water	160:38	0:0	8	tmp
water	160:42	0:0	6	;
water	161:9	0:0	6	test
op	161:14	0:0	6	=
call	161:16	161:36	6	ldexp
arg	161:22	161:26	7	test
water	161:22	0:0	8	test
arg	161:28	161:36	7	exponent
water	161:28	0:0	8	exponent
water	161:37	0:0	6	;
water	162:9	0:0	6	precision
op	162:19	0:0	6	>>=
water	162:23	0:0	6	8
water	162:24	0:0	6	;
water	163:6	0:0	6	}
water	167:6	0:0	4	precision
op	167:16	0:0	4	=
water	167:18	0:0	4	(
water	167:19	0:0	4	precision
op	167:29	0:0	4	&
water	167:31	0:0	4	0
water	167:32	0:0	4	x1f
water	167:35	0:0	4	)
op	167:37	0:0	4	+
water	167:39	0:0	4	1
water	167:40	0:0	4	;
water	168:3	0:0	4	}
water	169:18	0:0	2	;
call	170:3	171:73	2	printf
arg	170:10	171:27	3	"Tested %d finite values, %d non-finite, %d OK (%d failed) %d minor ""arithmetic errors\n"
water	170:10	0:0	4	"Tested %d finite values, %d non-finite, %d OK (%d failed) %d minor "
water	171:6	0:0	4	"arithmetic errors\n"
arg	171:29	171:35	3	finite
water	171:29	0:0	4	finite
arg	171:37	171:46	3	nonfinite
water	171:37	0:0	4	nonfinite
arg	171:48	171:50	3	ok
water	171:48	0:0	4	ok
arg	171:52	171:61	3	failcount
water	171:52	0:0	4	failcount
arg	171:63	171:73	3	minorarith
water	171:63	0:0	4	minorarith
water	171:74	0:0	2	;
call	172:3	172:71	2	printf
arg	172:10	172:53	3	" Error with >=%d digit precision %.2f%%\n"
water	172:10	0:0	4	" Error with >=%d digit precision %.2f%%\n"
arg	172:55	172:62	3	DBL_DIG
water	172:55	0:0	4	DBL_DIG
arg	172:64	172:71	3	max_abs
water	172:64	0:0	4	max_abs
water	172:72	0:0	2	;
call	173:3	173:67	2	printf
arg	173:10	173:53	3	" Error with < %d digit precision %.2f%%\n"
water	173:10	0:0	4	" Error with < %d digit precision %.2f%%\n"
arg	173:55	173:62	3	DBL_DIG
water	173:55	0:0	4	DBL_DIG
arg	173:64	173:67	3	max
water	173:64	0:0	4	max
water	173:68	0:0	2	;
return	174:3	174:11	2	0
water	174:10	0:0	3	0
