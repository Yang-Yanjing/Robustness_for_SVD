func	1:0	29:0	0	static unsigned int	sample
params	2:6	0:0	1	
param	2:7	2:26	2	png_const_bytep	row
param	2:28	2:48	2	png_byte	colour_type
param	2:50	2:68	2	png_byte	bit_depth
param	3:4	3:17	2	png_uint_32	x
param	3:19	3:44	2	unsigned int	sample_index
stmnts	0:0	28:67	1	
decl	5:3	5:32	2	png_uint_32	bit_index
water	5:24	0:0	2	,
decl	5:3	5:32	2	png_uint_32	result
water	7:3	0:0	2	x
op	7:5	0:0	2	*=
water	7:8	0:0	2	bit_depth
water	7:17	0:0	2	;
water	8:3	0:0	2	bit_index
op	8:13	0:0	2	=
water	8:15	0:0	2	x
water	8:16	0:0	2	;
if	9:3	18:3	2	(( colour_type & 1 ) == 0)
cond	9:7	9:28	3	( colour_type & 1 ) == 0
water	9:7	0:0	4	(
water	9:8	0:0	4	colour_type
op	9:20	0:0	4	&
water	9:22	0:0	4	1
water	9:23	0:0	4	)
op	9:25	0:0	4	==
water	9:28	0:0	4	0
stmts	10:3	18:3	3	
water	10:3	0:0	4	{
if	11:6	12:23	4	(colour_type & 2)
cond	11:10	11:24	5	colour_type & 2
water	11:10	0:0	6	colour_type
op	11:22	0:0	6	&
water	11:24	0:0	6	2
stmts	12:9	12:23	5	
water	12:9	0:0	6	bit_index
op	12:19	0:0	6	*=
water	12:22	0:0	6	3
water	12:23	0:0	6	;
if	13:6	14:23	4	(colour_type & 4)
cond	13:10	13:24	5	colour_type & 4
water	13:10	0:0	6	colour_type
op	13:22	0:0	6	&
water	13:24	0:0	6	4
stmts	14:9	14:23	5	
water	14:9	0:0	6	bit_index
op	14:19	0:0	6	+=
water	14:22	0:0	6	x
water	14:23	0:0	6	;
if	16:6	17:46	4	(colour_type & ( 2 + 4 ))
cond	16:10	16:28	5	colour_type & ( 2 + 4 )
water	16:10	0:0	6	colour_type
op	16:22	0:0	6	&
water	16:24	0:0	6	(
water	16:25	0:0	6	2
op	16:26	0:0	6	+
water	16:27	0:0	6	4
water	16:28	0:0	6	)
stmts	17:9	17:46	5	
water	17:9	0:0	6	bit_index
op	17:19	0:0	6	+=
water	17:22	0:0	6	sample_index
op	17:35	0:0	6	*
water	17:37	0:0	6	bit_depth
water	17:46	0:0	6	;
water	18:3	0:0	4	}
water	20:3	0:0	2	row
op	20:7	0:0	2	+=
water	20:10	0:0	2	bit_index
op	20:20	0:0	2	>>
water	20:23	0:0	2	3
water	20:24	0:0	2	;
water	21:3	0:0	2	result
op	21:10	0:0	2	=
op	21:12	0:0	2	*
water	21:13	0:0	2	row
water	21:16	0:0	2	;
if	22:3	23:19	2	(bit_depth == 8)
cond	22:7	22:20	3	bit_depth == 8
water	22:7	0:0	4	bit_depth
op	22:17	0:0	4	==
water	22:20	0:0	4	8
stmts	23:6	23:19	3	
return	23:6	23:19	4	result
water	23:13	0:0	5	result
else	24:3	25:35	2
stmts	24:8	25:35	3	
if	24:8	25:35	4	(bit_depth > 8)
cond	24:12	24:24	5	bit_depth > 8
water	24:12	0:0	6	bit_depth
op	24:22	0:0	6	>
water	24:24	0:0	6	8
stmts	25:6	25:35	5	
return	25:6	25:35	6	(result<<8)+*++row
water	25:13	0:0	7	(
water	25:14	0:0	7	result
op	25:21	0:0	7	<<
water	25:24	0:0	7	8
water	25:25	0:0	7	)
op	25:27	0:0	7	+
op	25:29	0:0	7	*
op	25:30	0:0	7	++
water	25:32	0:0	7	row
water	27:3	0:0	2	bit_index
op	27:13	0:0	2	&=
water	27:16	0:0	2	7
water	27:17	0:0	2	;
return	28:3	28:67	2	(result>>(8-bit_index-bit_depth))&((1U<<bit_depth)-1)
water	28:10	0:0	3	(
water	28:11	0:0	3	result
op	28:18	0:0	3	>>
water	28:21	0:0	3	(
water	28:22	0:0	3	8
op	28:23	0:0	3	-
water	28:24	0:0	3	bit_index
op	28:33	0:0	3	-
water	28:34	0:0	3	bit_depth
water	28:43	0:0	3	)
water	28:44	0:0	3	)
op	28:46	0:0	3	&
water	28:48	0:0	3	(
water	28:49	0:0	3	(
water	28:50	0:0	3	1
water	28:51	0:0	3	U
op	28:52	0:0	3	<<
water	28:54	0:0	3	bit_depth
water	28:63	0:0	3	)
op	28:64	0:0	3	-
water	28:65	0:0	3	1
water	28:66	0:0	3	)
