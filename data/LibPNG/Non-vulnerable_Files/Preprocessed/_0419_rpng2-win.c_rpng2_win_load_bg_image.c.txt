func	2:0	209:0	0	static int	rpng2_win_load_bg_image
stmnts	0:0	208:12	1	
decl	4:4	4:19	2	uch	*src
water	4:12	0:0	2	,
decl	4:4	4:19	2	uch	*dest
decl	5:4	5:30	2	uch	r1
water	5:10	0:0	2	,
decl	5:4	5:30	2	uch	r2
water	5:14	0:0	2	,
decl	5:4	5:30	2	uch	g1
water	5:18	0:0	2	,
decl	5:4	5:30	2	uch	g2
water	5:22	0:0	2	,
decl	5:4	5:30	2	uch	b1
water	5:26	0:0	2	,
decl	5:4	5:30	2	uch	b2
decl	6:4	6:54	2	uch	r1_inv
water	6:14	0:0	2	,
decl	6:4	6:54	2	uch	r2_inv
water	6:22	0:0	2	,
decl	6:4	6:54	2	uch	g1_inv
water	6:30	0:0	2	,
decl	6:4	6:54	2	uch	g2_inv
water	6:38	0:0	2	,
decl	6:4	6:54	2	uch	b1_inv
water	6:46	0:0	2	,
decl	6:4	6:54	2	uch	b2_inv
decl	7:4	7:20	2	int	k
water	7:9	0:0	2	,
decl	7:4	7:20	2	int	hmax
water	7:15	0:0	2	,
decl	7:4	7:20	2	int	max
decl	8:4	8:42	2	int	xidx
water	8:12	0:0	2	,
decl	8:4	8:42	2	int	yidx
water	8:18	0:0	2	,
decl	8:4	8:42	2	int	yidx_max
op	8:29	0:0	2	=
water	8:31	0:0	2	(
water	8:32	0:0	2	bgscale
op	8:39	0:0	2	-
water	8:40	0:0	2	1
water	8:41	0:0	2	)
decl	9:4	9:47	2	int	even_odd_vert
water	9:21	0:0	2	,
decl	9:4	9:47	2	int	even_odd_horiz
water	9:37	0:0	2	,
decl	9:4	9:47	2	int	even_odd
decl	10:4	10:48	2	int	invert_gradient2
op	10:25	0:0	2	=
water	10:27	0:0	2	(
water	10:28	0:0	2	bg
op	10:30	0:0	2	[
water	10:31	0:0	2	pat
op	10:34	0:0	2	]
op	10:35	0:0	2	.
water	10:36	0:0	2	type
op	10:41	0:0	2	&
water	10:43	0:0	2	0
water	10:44	0:0	2	x08
water	10:47	0:0	2	)
decl	11:4	11:21	2	int	invert_column
decl	12:4	12:14	2	ulg	i
water	12:9	0:0	2	,
decl	12:4	12:14	2	ulg	row
water	17:4	0:0	2	bg_rowbytes
op	17:16	0:0	2	=
water	17:18	0:0	2	3
op	17:20	0:0	2	*
water	17:22	0:0	2	rpng2_info
op	17:32	0:0	2	.
water	17:33	0:0	2	width
water	17:38	0:0	2	;
water	18:4	0:0	2	bg_data
op	18:12	0:0	2	=
water	18:14	0:0	2	(
water	18:15	0:0	2	uch
op	18:19	0:0	2	*
water	18:20	0:0	2	)
call	18:21	18:59	2	malloc
arg	18:28	18:59	3	bg_rowbytes*rpng2_info.height
water	18:28	0:0	4	bg_rowbytes
op	18:40	0:0	4	*
water	18:42	0:0	4	rpng2_info
op	18:52	0:0	4	.
water	18:53	0:0	4	height
water	18:60	0:0	2	;
if	19:4	24:4	2	(! bg_data)
cond	19:8	19:9	3	! bg_data
op	19:8	0:0	4	!
water	19:9	0:0	4	bg_data
stmts	19:18	24:4	3	
water	19:18	0:0	4	{
call	20:8	21:63	4	fprintf
arg	20:16	20:22	5	stderr
water	20:16	0:0	6	stderr
arg	20:24	21:63	5	PROGNAME":  unable to allocate memory for background image\n"
water	20:24	0:0	6	PROGNAME
water	21:10	0:0	6	":  unable to allocate memory for background image\n"
water	21:64	0:0	4	;
water	22:8	0:0	4	bg_image
op	22:17	0:0	4	=
water	22:19	0:0	4	0
water	22:20	0:0	4	;
return	23:8	23:16	4	1
water	23:15	0:0	5	1
water	24:4	0:0	4	}
if	29:4	92:4	2	(( bg [ pat ] . type & 0 x07 ) == 0)
cond	29:8	29:33	3	( bg [ pat ] . type & 0 x07 ) == 0
water	29:8	0:0	4	(
water	29:9	0:0	4	bg
op	29:11	0:0	4	[
water	29:12	0:0	4	pat
op	29:15	0:0	4	]
op	29:16	0:0	4	.
water	29:17	0:0	4	type
op	29:22	0:0	4	&
water	29:24	0:0	4	0
water	29:25	0:0	4	x07
water	29:28	0:0	4	)
op	29:30	0:0	4	==
water	29:33	0:0	4	0
stmts	29:36	92:4	3	
water	29:36	0:0	4	{
decl	30:8	30:45	4	uch	r1_min
op	30:20	0:0	4	=
water	30:22	0:0	4	rgb
op	30:25	0:0	4	[
water	30:26	0:0	4	bg
op	30:28	0:0	4	[
water	30:29	0:0	4	pat
op	30:32	0:0	4	]
op	30:33	0:0	4	.
water	30:34	0:0	4	rgb1_min
op	30:42	0:0	4	]
op	30:43	0:0	4	.
water	30:44	0:0	4	r
decl	31:8	31:45	4	uch	g1_min
op	31:20	0:0	4	=
water	31:22	0:0	4	rgb
op	31:25	0:0	4	[
water	31:26	0:0	4	bg
op	31:28	0:0	4	[
water	31:29	0:0	4	pat
op	31:32	0:0	4	]
op	31:33	0:0	4	.
water	31:34	0:0	4	rgb1_min
op	31:42	0:0	4	]
op	31:43	0:0	4	.
water	31:44	0:0	4	g
decl	32:8	32:45	4	uch	b1_min
op	32:20	0:0	4	=
water	32:22	0:0	4	rgb
op	32:25	0:0	4	[
water	32:26	0:0	4	bg
op	32:28	0:0	4	[
water	32:29	0:0	4	pat
op	32:32	0:0	4	]
op	32:33	0:0	4	.
water	32:34	0:0	4	rgb1_min
op	32:42	0:0	4	]
op	32:43	0:0	4	.
water	32:44	0:0	4	b
decl	33:8	33:45	4	uch	r2_min
op	33:20	0:0	4	=
water	33:22	0:0	4	rgb
op	33:25	0:0	4	[
water	33:26	0:0	4	bg
op	33:28	0:0	4	[
water	33:29	0:0	4	pat
op	33:32	0:0	4	]
op	33:33	0:0	4	.
water	33:34	0:0	4	rgb2_min
op	33:42	0:0	4	]
op	33:43	0:0	4	.
water	33:44	0:0	4	r
decl	34:8	34:45	4	uch	g2_min
op	34:20	0:0	4	=
water	34:22	0:0	4	rgb
op	34:25	0:0	4	[
water	34:26	0:0	4	bg
op	34:28	0:0	4	[
water	34:29	0:0	4	pat
op	34:32	0:0	4	]
op	34:33	0:0	4	.
water	34:34	0:0	4	rgb2_min
op	34:42	0:0	4	]
op	34:43	0:0	4	.
water	34:44	0:0	4	g
decl	35:8	35:45	4	uch	b2_min
op	35:20	0:0	4	=
water	35:22	0:0	4	rgb
op	35:25	0:0	4	[
water	35:26	0:0	4	bg
op	35:28	0:0	4	[
water	35:29	0:0	4	pat
op	35:32	0:0	4	]
op	35:33	0:0	4	.
water	35:34	0:0	4	rgb2_min
op	35:42	0:0	4	]
op	35:43	0:0	4	.
water	35:44	0:0	4	b
decl	36:8	36:54	4	int	r1_diff
op	36:20	0:0	4	=
water	36:22	0:0	4	rgb
op	36:25	0:0	4	[
water	36:26	0:0	4	bg
op	36:28	0:0	4	[
water	36:29	0:0	4	pat
op	36:32	0:0	4	]
op	36:33	0:0	4	.
water	36:34	0:0	4	rgb1_max
op	36:42	0:0	4	]
op	36:43	0:0	4	.
water	36:44	0:0	4	r
op	36:46	0:0	4	-
water	36:48	0:0	4	r1_min
decl	37:8	37:54	4	int	g1_diff
op	37:20	0:0	4	=
water	37:22	0:0	4	rgb
op	37:25	0:0	4	[
water	37:26	0:0	4	bg
op	37:28	0:0	4	[
water	37:29	0:0	4	pat
op	37:32	0:0	4	]
op	37:33	0:0	4	.
water	37:34	0:0	4	rgb1_max
op	37:42	0:0	4	]
op	37:43	0:0	4	.
water	37:44	0:0	4	g
op	37:46	0:0	4	-
water	37:48	0:0	4	g1_min
decl	38:8	38:54	4	int	b1_diff
op	38:20	0:0	4	=
water	38:22	0:0	4	rgb
op	38:25	0:0	4	[
water	38:26	0:0	4	bg
op	38:28	0:0	4	[
water	38:29	0:0	4	pat
op	38:32	0:0	4	]
op	38:33	0:0	4	.
water	38:34	0:0	4	rgb1_max
op	38:42	0:0	4	]
op	38:43	0:0	4	.
water	38:44	0:0	4	b
op	38:46	0:0	4	-
water	38:48	0:0	4	b1_min
decl	39:8	39:54	4	int	r2_diff
op	39:20	0:0	4	=
water	39:22	0:0	4	rgb
op	39:25	0:0	4	[
water	39:26	0:0	4	bg
op	39:28	0:0	4	[
water	39:29	0:0	4	pat
op	39:32	0:0	4	]
op	39:33	0:0	4	.
water	39:34	0:0	4	rgb2_max
op	39:42	0:0	4	]
op	39:43	0:0	4	.
water	39:44	0:0	4	r
op	39:46	0:0	4	-
water	39:48	0:0	4	r2_min
decl	40:8	40:54	4	int	g2_diff
op	40:20	0:0	4	=
water	40:22	0:0	4	rgb
op	40:25	0:0	4	[
water	40:26	0:0	4	bg
op	40:28	0:0	4	[
water	40:29	0:0	4	pat
op	40:32	0:0	4	]
op	40:33	0:0	4	.
water	40:34	0:0	4	rgb2_max
op	40:42	0:0	4	]
op	40:43	0:0	4	.
water	40:44	0:0	4	g
op	40:46	0:0	4	-
water	40:48	0:0	4	g2_min
decl	41:8	41:54	4	int	b2_diff
op	41:20	0:0	4	=
water	41:22	0:0	4	rgb
op	41:25	0:0	4	[
water	41:26	0:0	4	bg
op	41:28	0:0	4	[
water	41:29	0:0	4	pat
op	41:32	0:0	4	]
op	41:33	0:0	4	.
water	41:34	0:0	4	rgb2_max
op	41:42	0:0	4	]
op	41:43	0:0	4	.
water	41:44	0:0	4	b
op	41:46	0:0	4	-
water	41:48	0:0	4	b2_min
for	42:8	87:8	4	(row = 0 ;row < rpng2_info . height;++ row)
forinit	42:13	42:20	5	row = 0 ;
water	42:13	0:0	6	row
op	42:17	0:0	6	=
water	42:19	0:0	6	0
water	42:20	0:0	6	;
cond	42:23	42:40	5	row < rpng2_info . height
water	42:23	0:0	6	row
op	42:27	0:0	6	<
water	42:29	0:0	6	rpng2_info
op	42:39	0:0	6	.
water	42:40	0:0	6	height
forexpr	42:49	42:51	5	++ row
op	42:49	0:0	6	++
water	42:51	0:0	6	row
stmts	42:56	87:8	5	
water	42:56	0:0	6	{
water	43:12	0:0	6	yidx
op	43:17	0:0	6	=
water	43:19	0:0	6	row
op	43:23	0:0	6	%
water	43:25	0:0	6	bgscale
water	43:32	0:0	6	;
water	44:12	0:0	6	even_odd_vert
op	44:26	0:0	6	=
water	44:28	0:0	6	(
water	44:29	0:0	6	row
op	44:33	0:0	6	/
water	44:35	0:0	6	bgscale
water	44:42	0:0	6	)
op	44:44	0:0	6	&
water	44:46	0:0	6	1
water	44:47	0:0	6	;
water	45:12	0:0	6	r1
op	45:15	0:0	6	=
water	45:17	0:0	6	r1_min
op	45:24	0:0	6	+
water	45:26	0:0	6	(
water	45:27	0:0	6	r1_diff
op	45:35	0:0	6	*
water	45:37	0:0	6	yidx
water	45:41	0:0	6	)
op	45:43	0:0	6	/
water	45:45	0:0	6	yidx_max
water	45:53	0:0	6	;
water	46:12	0:0	6	g1
op	46:15	0:0	6	=
water	46:17	0:0	6	g1_min
op	46:24	0:0	6	+
water	46:26	0:0	6	(
water	46:27	0:0	6	g1_diff
op	46:35	0:0	6	*
water	46:37	0:0	6	yidx
water	46:41	0:0	6	)
op	46:43	0:0	6	/
water	46:45	0:0	6	yidx_max
water	46:53	0:0	6	;
water	47:12	0:0	6	b1
op	47:15	0:0	6	=
water	47:17	0:0	6	b1_min
op	47:24	0:0	6	+
water	47:26	0:0	6	(
water	47:27	0:0	6	b1_diff
op	47:35	0:0	6	*
water	47:37	0:0	6	yidx
water	47:41	0:0	6	)
op	47:43	0:0	6	/
water	47:45	0:0	6	yidx_max
water	47:53	0:0	6	;
water	48:12	0:0	6	r1_inv
op	48:19	0:0	6	=
water	48:21	0:0	6	r1_min
op	48:28	0:0	6	+
water	48:30	0:0	6	(
water	48:31	0:0	6	r1_diff
op	48:39	0:0	6	*
water	48:41	0:0	6	(
water	48:42	0:0	6	yidx_max
op	48:50	0:0	6	-
water	48:51	0:0	6	yidx
water	48:55	0:0	6	)
water	48:56	0:0	6	)
op	48:58	0:0	6	/
water	48:60	0:0	6	yidx_max
water	48:68	0:0	6	;
water	49:12	0:0	6	g1_inv
op	49:19	0:0	6	=
water	49:21	0:0	6	g1_min
op	49:28	0:0	6	+
water	49:30	0:0	6	(
water	49:31	0:0	6	g1_diff
op	49:39	0:0	6	*
water	49:41	0:0	6	(
water	49:42	0:0	6	yidx_max
op	49:50	0:0	6	-
water	49:51	0:0	6	yidx
water	49:55	0:0	6	)
water	49:56	0:0	6	)
op	49:58	0:0	6	/
water	49:60	0:0	6	yidx_max
water	49:68	0:0	6	;
water	50:12	0:0	6	b1_inv
op	50:19	0:0	6	=
water	50:21	0:0	6	b1_min
op	50:28	0:0	6	+
water	50:30	0:0	6	(
water	50:31	0:0	6	b1_diff
op	50:39	0:0	6	*
water	50:41	0:0	6	(
water	50:42	0:0	6	yidx_max
op	50:50	0:0	6	-
water	50:51	0:0	6	yidx
water	50:55	0:0	6	)
water	50:56	0:0	6	)
op	50:58	0:0	6	/
water	50:60	0:0	6	yidx_max
water	50:68	0:0	6	;
water	51:12	0:0	6	r2
op	51:15	0:0	6	=
water	51:17	0:0	6	r2_min
op	51:24	0:0	6	+
water	51:26	0:0	6	(
water	51:27	0:0	6	r2_diff
op	51:35	0:0	6	*
water	51:37	0:0	6	yidx
water	51:41	0:0	6	)
op	51:43	0:0	6	/
water	51:45	0:0	6	yidx_max
water	51:53	0:0	6	;
water	52:12	0:0	6	g2
op	52:15	0:0	6	=
water	52:17	0:0	6	g2_min
op	52:24	0:0	6	+
water	52:26	0:0	6	(
water	52:27	0:0	6	g2_diff
op	52:35	0:0	6	*
water	52:37	0:0	6	yidx
water	52:41	0:0	6	)
op	52:43	0:0	6	/
water	52:45	0:0	6	yidx_max
water	52:53	0:0	6	;
water	53:12	0:0	6	b2
op	53:15	0:0	6	=
water	53:17	0:0	6	b2_min
op	53:24	0:0	6	+
water	53:26	0:0	6	(
water	53:27	0:0	6	b2_diff
op	53:35	0:0	6	*
water	53:37	0:0	6	yidx
water	53:41	0:0	6	)
op	53:43	0:0	6	/
water	53:45	0:0	6	yidx_max
water	53:53	0:0	6	;
water	54:12	0:0	6	r2_inv
op	54:19	0:0	6	=
water	54:21	0:0	6	r2_min
op	54:28	0:0	6	+
water	54:30	0:0	6	(
water	54:31	0:0	6	r2_diff
op	54:39	0:0	6	*
water	54:41	0:0	6	(
water	54:42	0:0	6	yidx_max
op	54:50	0:0	6	-
water	54:51	0:0	6	yidx
water	54:55	0:0	6	)
water	54:56	0:0	6	)
op	54:58	0:0	6	/
water	54:60	0:0	6	yidx_max
water	54:68	0:0	6	;
water	55:12	0:0	6	g2_inv
op	55:19	0:0	6	=
water	55:21	0:0	6	g2_min
op	55:28	0:0	6	+
water	55:30	0:0	6	(
water	55:31	0:0	6	g2_diff
op	55:39	0:0	6	*
water	55:41	0:0	6	(
water	55:42	0:0	6	yidx_max
op	55:50	0:0	6	-
water	55:51	0:0	6	yidx
water	55:55	0:0	6	)
water	55:56	0:0	6	)
op	55:58	0:0	6	/
water	55:60	0:0	6	yidx_max
water	55:68	0:0	6	;
water	56:12	0:0	6	b2_inv
op	56:19	0:0	6	=
water	56:21	0:0	6	b2_min
op	56:28	0:0	6	+
water	56:30	0:0	6	(
water	56:31	0:0	6	b2_diff
op	56:39	0:0	6	*
water	56:41	0:0	6	(
water	56:42	0:0	6	yidx_max
op	56:50	0:0	6	-
water	56:51	0:0	6	yidx
water	56:55	0:0	6	)
water	56:56	0:0	6	)
op	56:58	0:0	6	/
water	56:60	0:0	6	yidx_max
water	56:68	0:0	6	;
water	57:12	0:0	6	dest
op	57:17	0:0	6	=
water	57:19	0:0	6	bg_data
op	57:27	0:0	6	+
water	57:29	0:0	6	row
op	57:32	0:0	6	*
water	57:33	0:0	6	bg_rowbytes
water	57:44	0:0	6	;
for	58:12	86:12	6	(i = 0 ;i < rpng2_info . width;++ i)
forinit	58:17	58:22	7	i = 0 ;
water	58:17	0:0	8	i
op	58:19	0:0	8	=
water	58:21	0:0	8	0
water	58:22	0:0	8	;
cond	58:25	58:40	7	i < rpng2_info . width
water	58:25	0:0	8	i
op	58:27	0:0	8	<
water	58:29	0:0	8	rpng2_info
op	58:39	0:0	8	.
water	58:40	0:0	8	width
forexpr	58:48	58:50	7	++ i
op	58:48	0:0	8	++
water	58:50	0:0	8	i
stmts	58:53	86:12	7	
water	58:53	0:0	8	{
water	59:16	0:0	8	even_odd_horiz
op	59:31	0:0	8	=
water	59:33	0:0	8	(
water	59:34	0:0	8	i
op	59:36	0:0	8	/
water	59:38	0:0	8	bgscale
water	59:45	0:0	8	)
op	59:47	0:0	8	&
water	59:49	0:0	8	1
water	59:50	0:0	8	;
water	60:16	0:0	8	even_odd
op	60:25	0:0	8	=
water	60:27	0:0	8	even_odd_vert
op	60:41	0:0	8	^
water	60:43	0:0	8	even_odd_horiz
water	60:57	0:0	8	;
water	61:16	0:0	8	invert_column
op	61:30	0:0	8	=
water	62:18	0:0	8	(
water	62:19	0:0	8	even_odd_horiz
op	62:34	0:0	8	&&
water	62:37	0:0	8	(
water	62:38	0:0	8	bg
op	62:40	0:0	8	[
water	62:41	0:0	8	pat
op	62:44	0:0	8	]
op	62:45	0:0	8	.
water	62:46	0:0	8	type
op	62:51	0:0	8	&
water	62:53	0:0	8	0
water	62:54	0:0	8	x10
water	62:57	0:0	8	)
water	62:58	0:0	8	)
water	62:59	0:0	8	;
if	63:16	73:16	8	(even_odd == 0)
cond	63:20	63:32	9	even_odd == 0
water	63:20	0:0	10	even_odd
op	63:29	0:0	10	==
water	63:32	0:0	10	0
stmts	63:35	73:16	9	
water	63:35	0:0	10	{
if	64:20	68:20	10	(invert_column)
cond	64:24	64:24	11	invert_column
water	64:24	0:0	12	invert_column
stmts	64:39	68:20	11	
water	64:39	0:0	12	{
op	65:24	0:0	12	*
water	65:25	0:0	12	dest
op	65:29	0:0	12	++
op	65:32	0:0	12	=
water	65:34	0:0	12	r1_inv
water	65:40	0:0	12	;
op	66:24	0:0	12	*
water	66:25	0:0	12	dest
op	66:29	0:0	12	++
op	66:32	0:0	12	=
water	66:34	0:0	12	g1_inv
water	66:40	0:0	12	;
op	67:24	0:0	12	*
water	67:25	0:0	12	dest
op	67:29	0:0	12	++
op	67:32	0:0	12	=
water	67:34	0:0	12	b1_inv
water	67:40	0:0	12	;
water	68:20	0:0	12	}
else	68:22	72:20	10
stmts	68:27	72:20	11	
water	68:27	0:0	12	{
op	69:24	0:0	12	*
water	69:25	0:0	12	dest
op	69:29	0:0	12	++
op	69:32	0:0	12	=
water	69:34	0:0	12	r1
water	69:36	0:0	12	;
op	70:24	0:0	12	*
water	70:25	0:0	12	dest
op	70:29	0:0	12	++
op	70:32	0:0	12	=
water	70:34	0:0	12	g1
water	70:36	0:0	12	;
op	71:24	0:0	12	*
water	71:25	0:0	12	dest
op	71:29	0:0	12	++
op	71:32	0:0	12	=
water	71:34	0:0	12	b1
water	71:36	0:0	12	;
water	72:20	0:0	12	}
water	73:16	0:0	10	}
else	73:18	85:16	8
stmts	73:23	85:16	9	
water	73:23	0:0	10	{
if	74:20	80:20	10	(( invert_column && invert_gradient2 ) || ( ! invert_column && ! invert_gradient2 ))
cond	74:24	75:60	11	( invert_column && invert_gradient2 ) || ( ! invert_column && ! invert_gradient2 )
water	74:24	0:0	12	(
water	74:25	0:0	12	invert_column
op	74:39	0:0	12	&&
water	74:42	0:0	12	invert_gradient2
water	74:58	0:0	12	)
op	74:60	0:0	12	||
water	75:24	0:0	12	(
op	75:25	0:0	12	!
water	75:26	0:0	12	invert_column
op	75:40	0:0	12	&&
op	75:43	0:0	12	!
water	75:44	0:0	12	invert_gradient2
water	75:60	0:0	12	)
stmts	76:20	80:20	11	
water	76:20	0:0	12	{
op	77:24	0:0	12	*
water	77:25	0:0	12	dest
op	77:29	0:0	12	++
op	77:32	0:0	12	=
water	77:34	0:0	12	r2
water	77:36	0:0	12	;
op	78:24	0:0	12	*
water	78:25	0:0	12	dest
op	78:29	0:0	12	++
op	78:32	0:0	12	=
water	78:34	0:0	12	g2
water	78:36	0:0	12	;
op	79:24	0:0	12	*
water	79:25	0:0	12	dest
op	79:29	0:0	12	++
op	79:32	0:0	12	=
water	79:34	0:0	12	b2
water	79:36	0:0	12	;
water	80:20	0:0	12	}
else	80:22	84:20	10
stmts	80:27	84:20	11	
water	80:27	0:0	12	{
op	81:24	0:0	12	*
water	81:25	0:0	12	dest
op	81:29	0:0	12	++
op	81:32	0:0	12	=
water	81:34	0:0	12	r2_inv
water	81:40	0:0	12	;
op	82:24	0:0	12	*
water	82:25	0:0	12	dest
op	82:29	0:0	12	++
op	82:32	0:0	12	=
water	82:34	0:0	12	g2_inv
water	82:40	0:0	12	;
op	83:24	0:0	12	*
water	83:25	0:0	12	dest
op	83:29	0:0	12	++
op	83:32	0:0	12	=
water	83:34	0:0	12	b2_inv
water	83:40	0:0	12	;
water	84:20	0:0	12	}
water	85:16	0:0	10	}
water	86:12	0:0	8	}
water	87:8	0:0	6	}
water	92:4	0:0	4	}
else	92:6	121:4	2
stmts	92:11	121:4	3	
if	92:11	121:4	4	(( bg [ pat ] . type & 0 x07 ) == 1)
cond	92:15	92:40	5	( bg [ pat ] . type & 0 x07 ) == 1
water	92:15	0:0	6	(
water	92:16	0:0	6	bg
op	92:18	0:0	6	[
water	92:19	0:0	6	pat
op	92:22	0:0	6	]
op	92:23	0:0	6	.
water	92:24	0:0	6	type
op	92:29	0:0	6	&
water	92:31	0:0	6	0
water	92:32	0:0	6	x07
water	92:35	0:0	6	)
op	92:37	0:0	6	==
water	92:40	0:0	6	1
stmts	92:43	121:4	5	
water	92:43	0:0	6	{
water	93:8	0:0	6	hmax
op	93:13	0:0	6	=
water	93:15	0:0	6	(
water	93:16	0:0	6	bgscale
op	93:23	0:0	6	-
water	93:24	0:0	6	1
water	93:25	0:0	6	)
op	93:26	0:0	6	/
water	93:27	0:0	6	2
water	93:28	0:0	6	;
water	94:8	0:0	6	max
op	94:12	0:0	6	=
water	94:14	0:0	6	2
op	94:15	0:0	6	*
water	94:16	0:0	6	hmax
water	94:20	0:0	6	;
water	95:8	0:0	6	r1
op	95:11	0:0	6	=
water	95:13	0:0	6	rgb
op	95:16	0:0	6	[
water	95:17	0:0	6	bg
op	95:19	0:0	6	[
water	95:20	0:0	6	pat
op	95:23	0:0	6	]
op	95:24	0:0	6	.
water	95:25	0:0	6	rgb1_max
op	95:33	0:0	6	]
op	95:34	0:0	6	.
water	95:35	0:0	6	r
water	95:36	0:0	6	;
water	96:8	0:0	6	g1
op	96:11	0:0	6	=
water	96:13	0:0	6	rgb
op	96:16	0:0	6	[
water	96:17	0:0	6	bg
op	96:19	0:0	6	[
water	96:20	0:0	6	pat
op	96:23	0:0	6	]
op	96:24	0:0	6	.
water	96:25	0:0	6	rgb1_max
op	96:33	0:0	6	]
op	96:34	0:0	6	.
water	96:35	0:0	6	g
water	96:36	0:0	6	;
water	97:8	0:0	6	b1
op	97:11	0:0	6	=
water	97:13	0:0	6	rgb
op	97:16	0:0	6	[
water	97:17	0:0	6	bg
op	97:19	0:0	6	[
water	97:20	0:0	6	pat
op	97:23	0:0	6	]
op	97:24	0:0	6	.
water	97:25	0:0	6	rgb1_max
op	97:33	0:0	6	]
op	97:34	0:0	6	.
water	97:35	0:0	6	b
water	97:36	0:0	6	;
water	98:8	0:0	6	r2
op	98:11	0:0	6	=
water	98:13	0:0	6	rgb
op	98:16	0:0	6	[
water	98:17	0:0	6	bg
op	98:19	0:0	6	[
water	98:20	0:0	6	pat
op	98:23	0:0	6	]
op	98:24	0:0	6	.
water	98:25	0:0	6	rgb2_max
op	98:33	0:0	6	]
op	98:34	0:0	6	.
water	98:35	0:0	6	r
water	98:36	0:0	6	;
water	99:8	0:0	6	g2
op	99:11	0:0	6	=
water	99:13	0:0	6	rgb
op	99:16	0:0	6	[
water	99:17	0:0	6	bg
op	99:19	0:0	6	[
water	99:20	0:0	6	pat
op	99:23	0:0	6	]
op	99:24	0:0	6	.
water	99:25	0:0	6	rgb2_max
op	99:33	0:0	6	]
op	99:34	0:0	6	.
water	99:35	0:0	6	g
water	99:36	0:0	6	;
water	100:8	0:0	6	b2
op	100:11	0:0	6	=
water	100:13	0:0	6	rgb
op	100:16	0:0	6	[
water	100:17	0:0	6	bg
op	100:19	0:0	6	[
water	100:20	0:0	6	pat
op	100:23	0:0	6	]
op	100:24	0:0	6	.
water	100:25	0:0	6	rgb2_max
op	100:33	0:0	6	]
op	100:34	0:0	6	.
water	100:35	0:0	6	b
water	100:36	0:0	6	;
for	101:8	115:8	6	(row = 0 ;row < rpng2_info . height;++ row)
forinit	101:13	101:20	7	row = 0 ;
water	101:13	0:0	8	row
op	101:17	0:0	8	=
water	101:19	0:0	8	0
water	101:20	0:0	8	;
cond	101:23	101:40	7	row < rpng2_info . height
water	101:23	0:0	8	row
op	101:27	0:0	8	<
water	101:29	0:0	8	rpng2_info
op	101:39	0:0	8	.
water	101:40	0:0	8	height
forexpr	101:49	101:51	7	++ row
op	101:49	0:0	8	++
water	101:51	0:0	8	row
stmts	101:56	115:8	7	
water	101:56	0:0	8	{
water	102:12	0:0	8	yidx
op	102:17	0:0	8	=
water	102:19	0:0	8	row
op	102:23	0:0	8	%
water	102:25	0:0	8	bgscale
water	102:32	0:0	8	;
if	103:12	104:39	8	(yidx > hmax)
cond	103:16	103:23	9	yidx > hmax
water	103:16	0:0	10	yidx
op	103:21	0:0	10	>
water	103:23	0:0	10	hmax
stmts	104:16	104:39	9	
water	104:16	0:0	10	yidx
op	104:21	0:0	10	=
water	104:23	0:0	10	bgscale
op	104:30	0:0	10	-
water	104:31	0:0	10	1
op	104:33	0:0	10	-
water	104:35	0:0	10	yidx
water	104:39	0:0	10	;
water	105:12	0:0	8	dest
op	105:17	0:0	8	=
water	105:19	0:0	8	bg_data
op	105:27	0:0	8	+
water	105:29	0:0	8	row
op	105:32	0:0	8	*
water	105:33	0:0	8	bg_rowbytes
water	105:44	0:0	8	;
for	106:12	114:12	8	(i = 0 ;i < rpng2_info . width;++ i)
forinit	106:17	106:22	9	i = 0 ;
water	106:17	0:0	10	i
op	106:19	0:0	10	=
water	106:21	0:0	10	0
water	106:22	0:0	10	;
cond	106:25	106:40	9	i < rpng2_info . width
water	106:25	0:0	10	i
op	106:27	0:0	10	<
water	106:29	0:0	10	rpng2_info
op	106:39	0:0	10	.
water	106:40	0:0	10	width
forexpr	106:48	106:50	9	++ i
op	106:48	0:0	10	++
water	106:50	0:0	10	i
stmts	106:53	114:12	9	
water	106:53	0:0	10	{
water	107:16	0:0	10	xidx
op	107:21	0:0	10	=
water	107:23	0:0	10	i
op	107:25	0:0	10	%
water	107:27	0:0	10	bgscale
water	107:34	0:0	10	;
if	108:16	109:43	10	(xidx > hmax)
cond	108:20	108:27	11	xidx > hmax
water	108:20	0:0	12	xidx
op	108:25	0:0	12	>
water	108:27	0:0	12	hmax
stmts	109:20	109:43	11	
water	109:20	0:0	12	xidx
op	109:25	0:0	12	=
water	109:27	0:0	12	bgscale
op	109:34	0:0	12	-
water	109:35	0:0	12	1
op	109:37	0:0	12	-
water	109:39	0:0	12	xidx
water	109:43	0:0	12	;
water	110:16	0:0	10	k
op	110:18	0:0	10	=
water	110:20	0:0	10	xidx
op	110:25	0:0	10	+
water	110:27	0:0	10	yidx
water	110:31	0:0	10	;
op	111:16	0:0	10	*
water	111:17	0:0	10	dest
op	111:21	0:0	10	++
op	111:24	0:0	10	=
water	111:26	0:0	10	(
water	111:27	0:0	10	k
op	111:28	0:0	10	*
water	111:29	0:0	10	r1
op	111:32	0:0	10	+
water	111:34	0:0	10	(
water	111:35	0:0	10	max
op	111:38	0:0	10	-
water	111:39	0:0	10	k
water	111:40	0:0	10	)
op	111:41	0:0	10	*
water	111:42	0:0	10	r2
water	111:44	0:0	10	)
op	111:46	0:0	10	/
water	111:48	0:0	10	max
water	111:51	0:0	10	;
op	112:16	0:0	10	*
water	112:17	0:0	10	dest
op	112:21	0:0	10	++
op	112:24	0:0	10	=
water	112:26	0:0	10	(
water	112:27	0:0	10	k
op	112:28	0:0	10	*
water	112:29	0:0	10	g1
op	112:32	0:0	10	+
water	112:34	0:0	10	(
water	112:35	0:0	10	max
op	112:38	0:0	10	-
water	112:39	0:0	10	k
water	112:40	0:0	10	)
op	112:41	0:0	10	*
water	112:42	0:0	10	g2
water	112:44	0:0	10	)
op	112:46	0:0	10	/
water	112:48	0:0	10	max
water	112:51	0:0	10	;
op	113:16	0:0	10	*
water	113:17	0:0	10	dest
op	113:21	0:0	10	++
op	113:24	0:0	10	=
water	113:26	0:0	10	(
water	113:27	0:0	10	k
op	113:28	0:0	10	*
water	113:29	0:0	10	b1
op	113:32	0:0	10	+
water	113:34	0:0	10	(
water	113:35	0:0	10	max
op	113:38	0:0	10	-
water	113:39	0:0	10	k
water	113:40	0:0	10	)
op	113:41	0:0	10	*
water	113:42	0:0	10	b2
water	113:44	0:0	10	)
op	113:46	0:0	10	/
water	113:48	0:0	10	max
water	113:51	0:0	10	;
water	114:12	0:0	10	}
water	115:8	0:0	8	}
water	121:4	0:0	6	}
else	121:6	191:4	2
stmts	121:11	191:4	3	
if	121:11	191:4	4	(( bg [ pat ] . type & 0 x07 ) == 2)
cond	121:15	121:40	5	( bg [ pat ] . type & 0 x07 ) == 2
water	121:15	0:0	6	(
water	121:16	0:0	6	bg
op	121:18	0:0	6	[
water	121:19	0:0	6	pat
op	121:22	0:0	6	]
op	121:23	0:0	6	.
water	121:24	0:0	6	type
op	121:29	0:0	6	&
water	121:31	0:0	6	0
water	121:32	0:0	6	x07
water	121:35	0:0	6	)
op	121:37	0:0	6	==
water	121:40	0:0	6	2
stmts	121:43	191:4	5	
water	121:43	0:0	6	{
decl	122:8	122:14	6	uch	ch
decl	123:8	123:38	6	int	ii
water	123:14	0:0	6	,
decl	123:8	123:38	6	int	x
water	123:17	0:0	6	,
decl	123:8	123:38	6	int	y
water	123:20	0:0	6	,
decl	123:8	123:38	6	int	hw
water	123:24	0:0	6	,
decl	123:8	123:38	6	int	hh
water	123:28	0:0	6	,
decl	123:8	123:38	6	int	grayspot
decl	124:8	124:54	6	double	freq
water	124:19	0:0	6	,
decl	124:8	124:54	6	double	rotate
water	124:27	0:0	6	,
decl	124:8	124:54	6	double	saturate
water	124:37	0:0	6	,
decl	124:8	124:54	6	double	gray
water	124:43	0:0	6	,
decl	124:8	124:54	6	double	intensity
decl	125:8	125:52	6	double	angle
op	125:20	0:0	6	=
water	125:21	0:0	6	0
op	125:22	0:0	6	.
water	125:23	0:0	6	0
water	125:24	0:0	6	,
decl	125:8	125:52	6	double	aoffset
op	125:33	0:0	6	=
water	125:34	0:0	6	0
op	125:35	0:0	6	.
water	125:36	0:0	6	0
water	125:37	0:0	6	,
decl	125:8	125:52	6	double	maxDist
water	125:46	0:0	6	,
decl	125:8	125:52	6	double	dist
decl	126:8	126:66	6	double	red
op	126:18	0:0	6	=
water	126:19	0:0	6	0
op	126:20	0:0	6	.
water	126:21	0:0	6	0
water	126:22	0:0	6	,
decl	126:8	126:66	6	double	green
op	126:29	0:0	6	=
water	126:30	0:0	6	0
op	126:31	0:0	6	.
water	126:32	0:0	6	0
water	126:33	0:0	6	,
decl	126:8	126:66	6	double	blue
op	126:39	0:0	6	=
water	126:40	0:0	6	0
op	126:41	0:0	6	.
water	126:42	0:0	6	0
water	126:43	0:0	6	,
decl	126:8	126:66	6	double	hue
water	126:48	0:0	6	,
decl	126:8	126:66	6	double	s
water	126:51	0:0	6	,
decl	126:8	126:66	6	double	v
water	126:54	0:0	6	,
decl	126:8	126:66	6	double	f
water	126:57	0:0	6	,
decl	126:8	126:66	6	double	p
water	126:60	0:0	6	,
decl	126:8	126:66	6	double	q
water	126:63	0:0	6	,
decl	126:8	126:66	6	double	t
call	127:8	128:18	6	fprintf
arg	127:16	127:22	7	stderr
water	127:16	0:0	8	stderr
arg	127:24	127:61	7	"%s:  computing radial background..."
water	127:24	0:0	8	"%s:  computing radial background..."
arg	128:10	128:18	7	PROGNAME
water	128:10	0:0	8	PROGNAME
water	128:19	0:0	6	;
call	129:8	129:21	6	fflush
arg	129:15	129:21	7	stderr
water	129:15	0:0	8	stderr
water	129:22	0:0	6	;
water	130:8	0:0	6	hh
op	130:11	0:0	6	=
water	130:13	0:0	6	rpng2_info
op	130:23	0:0	6	.
water	130:24	0:0	6	height
op	130:31	0:0	6	/
water	130:33	0:0	6	2
water	130:34	0:0	6	;
water	131:8	0:0	6	hw
op	131:11	0:0	6	=
water	131:13	0:0	6	rpng2_info
op	131:23	0:0	6	.
water	131:24	0:0	6	width
op	131:30	0:0	6	/
water	131:32	0:0	6	2
water	131:33	0:0	6	;
water	139:8	0:0	6	angle
op	139:14	0:0	6	=
call	139:16	139:38	6	CLIP
arg	139:21	139:26	7	angle
water	139:21	0:0	8	angle
arg	139:28	139:31	7	0.0
water	139:28	0:0	8	0
op	139:29	0:0	8	.
water	139:30	0:0	8	0
arg	139:33	139:38	7	360.0
water	139:33	0:0	8	360
op	139:36	0:0	8	.
water	139:37	0:0	8	0
water	139:39	0:0	6	;
water	140:8	0:0	6	grayspot
op	140:17	0:0	6	=
call	140:19	140:53	6	CLIP
arg	140:24	140:39	7	bg[pat].bg_gray
water	140:24	0:0	8	bg
op	140:26	0:0	8	[
water	140:27	0:0	8	pat
op	140:30	0:0	8	]
op	140:31	0:0	8	.
water	140:32	0:0	8	bg_gray
arg	140:41	140:42	7	1
water	140:41	0:0	8	1
arg	140:44	140:53	7	(hh+hw)
water	140:44	0:0	8	(
water	140:45	0:0	8	hh
op	140:48	0:0	8	+
water	140:50	0:0	8	hw
water	140:52	0:0	8	)
water	140:54	0:0	6	;
water	141:8	0:0	6	freq
op	141:13	0:0	6	=
call	141:15	141:47	6	MAX
arg	141:19	141:42	7	(double)bg[pat].bg_freq
water	141:19	0:0	8	(
water	141:20	0:0	8	double
water	141:26	0:0	8	)
water	141:27	0:0	8	bg
op	141:29	0:0	8	[
water	141:30	0:0	8	pat
op	141:33	0:0	8	]
op	141:34	0:0	8	.
water	141:35	0:0	8	bg_freq
arg	141:44	141:47	7	0.0
water	141:44	0:0	8	0
op	141:45	0:0	8	.
water	141:46	0:0	8	0
water	141:48	0:0	6	;
water	142:8	0:0	6	saturate
op	142:17	0:0	6	=
water	142:19	0:0	6	(
water	142:20	0:0	6	double
water	142:26	0:0	6	)
water	142:27	0:0	6	bg
op	142:29	0:0	6	[
water	142:30	0:0	6	pat
op	142:33	0:0	6	]
op	142:34	0:0	6	.
water	142:35	0:0	6	bg_bsat
op	142:43	0:0	6	*
water	142:45	0:0	6	0
op	142:46	0:0	6	.
water	142:47	0:0	6	1
water	142:48	0:0	6	;
water	143:8	0:0	6	rotate
op	143:15	0:0	6	=
water	143:17	0:0	6	(
water	143:18	0:0	6	double
water	143:24	0:0	6	)
water	143:25	0:0	6	bg
op	143:27	0:0	6	[
water	143:28	0:0	6	pat
op	143:31	0:0	6	]
op	143:32	0:0	6	.
water	143:33	0:0	6	bg_brot
op	143:41	0:0	6	*
water	143:43	0:0	6	0
op	143:44	0:0	6	.
water	143:45	0:0	6	1
water	143:46	0:0	6	;
water	144:8	0:0	6	gray
op	144:13	0:0	6	=
water	144:15	0:0	6	0
op	144:16	0:0	6	.
water	144:17	0:0	6	0
water	144:18	0:0	6	;
water	145:8	0:0	6	intensity
op	145:18	0:0	6	=
water	145:20	0:0	6	0
op	145:21	0:0	6	.
water	145:22	0:0	6	0
water	145:23	0:0	6	;
water	146:8	0:0	6	maxDist
op	146:16	0:0	6	=
call	146:18	146:44	6	(double)
arg	146:27	146:44	7	(hw*hw)+(hh*hh)
water	146:27	0:0	8	(
water	146:28	0:0	8	hw
op	146:30	0:0	8	*
water	146:31	0:0	8	hw
water	146:33	0:0	8	)
op	146:35	0:0	8	+
water	146:37	0:0	8	(
water	146:38	0:0	8	hh
op	146:40	0:0	8	*
water	146:41	0:0	8	hh
water	146:43	0:0	8	)
water	146:45	0:0	6	;
for	147:8	188:8	6	(row = 0 ;row < rpng2_info . height;++ row)
forinit	147:13	147:20	7	row = 0 ;
water	147:13	0:0	8	row
op	147:17	0:0	8	=
water	147:19	0:0	8	0
water	147:20	0:0	8	;
cond	147:23	147:40	7	row < rpng2_info . height
water	147:23	0:0	8	row
op	147:27	0:0	8	<
water	147:29	0:0	8	rpng2_info
op	147:39	0:0	8	.
water	147:40	0:0	8	height
forexpr	147:49	147:51	7	++ row
op	147:49	0:0	8	++
water	147:51	0:0	8	row
stmts	147:56	188:8	7	
water	147:56	0:0	8	{
water	148:12	0:0	8	y
op	148:14	0:0	8	=
water	148:16	0:0	8	row
op	148:20	0:0	8	-
water	148:22	0:0	8	hh
water	148:24	0:0	8	;
water	149:12	0:0	8	dest
op	149:17	0:0	8	=
water	149:19	0:0	8	bg_data
op	149:27	0:0	8	+
water	149:29	0:0	8	row
op	149:32	0:0	8	*
water	149:33	0:0	8	bg_rowbytes
water	149:44	0:0	8	;
for	150:12	187:12	8	(i = 0 ;i < rpng2_info . width;++ i)
forinit	150:17	150:22	9	i = 0 ;
water	150:17	0:0	10	i
op	150:19	0:0	10	=
water	150:21	0:0	10	0
water	150:22	0:0	10	;
cond	150:25	150:40	9	i < rpng2_info . width
water	150:25	0:0	10	i
op	150:27	0:0	10	<
water	150:29	0:0	10	rpng2_info
op	150:39	0:0	10	.
water	150:40	0:0	10	width
forexpr	150:48	150:50	9	++ i
op	150:48	0:0	10	++
water	150:50	0:0	10	i
stmts	150:53	187:12	9	
water	150:53	0:0	10	{
water	151:16	0:0	10	x
op	151:18	0:0	10	=
water	151:20	0:0	10	i
op	151:22	0:0	10	-
water	151:24	0:0	10	hw
water	151:26	0:0	10	;
water	152:16	0:0	10	angle
op	152:22	0:0	10	=
water	152:24	0:0	10	(
water	152:25	0:0	10	x
op	152:27	0:0	10	==
water	152:30	0:0	10	0
water	152:31	0:0	10	)
water	152:32	0:0	10	?
water	152:34	0:0	10	PI_2
water	152:39	0:0	10	:
call	152:41	152:67	10	atan
arg	152:46	152:67	11	(double)y/(double)x
water	152:46	0:0	12	(
water	152:47	0:0	12	double
water	152:53	0:0	12	)
water	152:54	0:0	12	y
op	152:56	0:0	12	/
water	152:58	0:0	12	(
water	152:59	0:0	12	double
water	152:65	0:0	12	)
water	152:66	0:0	12	x
water	152:68	0:0	10	;
water	153:16	0:0	10	gray
op	153:21	0:0	10	=
water	153:23	0:0	10	(
water	153:24	0:0	10	double
water	153:30	0:0	10	)
call	153:31	153:49	10	MAX
arg	153:35	153:41	11	ABS(y)
call	153:35	153:40	12	ABS
arg	153:39	153:40	13	y
water	153:39	0:0	14	y
arg	153:43	153:49	11	ABS(x)
call	153:43	153:48	12	ABS
arg	153:47	153:48	13	x
water	153:47	0:0	14	x
op	153:51	0:0	10	/
water	153:53	0:0	10	grayspot
water	153:61	0:0	10	;
water	154:16	0:0	10	gray
op	154:21	0:0	10	=
call	154:23	154:36	10	MIN
arg	154:27	154:30	11	1.0
water	154:27	0:0	12	1
op	154:28	0:0	12	.
water	154:29	0:0	12	0
arg	154:32	154:36	11	gray
water	154:32	0:0	12	gray
water	154:37	0:0	10	;
water	155:16	0:0	10	dist
op	155:21	0:0	10	=
call	155:23	155:45	10	(double)
arg	155:32	155:45	11	(x*x)+(y*y)
water	155:32	0:0	12	(
water	155:33	0:0	12	x
op	155:34	0:0	12	*
water	155:35	0:0	12	x
water	155:36	0:0	12	)
op	155:38	0:0	12	+
water	155:40	0:0	12	(
water	155:41	0:0	12	y
op	155:42	0:0	12	*
water	155:43	0:0	12	y
water	155:44	0:0	12	)
op	155:47	0:0	10	/
water	155:49	0:0	10	maxDist
water	155:56	0:0	10	;
water	156:16	0:0	10	intensity
op	156:26	0:0	10	=
call	156:28	156:63	10	cos
arg	156:32	156:63	11	(angle+(rotate*dist*PI))*freq
water	156:32	0:0	12	(
water	156:33	0:0	12	angle
op	156:38	0:0	12	+
water	156:39	0:0	12	(
water	156:40	0:0	12	rotate
op	156:46	0:0	12	*
water	156:47	0:0	12	dist
op	156:51	0:0	12	*
water	156:52	0:0	12	PI
water	156:54	0:0	12	)
water	156:55	0:0	12	)
op	156:57	0:0	12	*
water	156:59	0:0	12	freq
op	156:65	0:0	10	*
water	157:18	0:0	10	gray
op	157:23	0:0	10	*
water	157:25	0:0	10	saturate
water	157:33	0:0	10	;
water	158:16	0:0	10	intensity
op	158:26	0:0	10	=
water	158:28	0:0	10	(
call	158:29	158:56	10	MAX
arg	158:33	158:51	11	MIN(intensity,1.0)
call	158:33	158:50	12	MIN
arg	158:37	158:46	13	intensity
water	158:37	0:0	14	intensity
arg	158:47	158:50	13	1.0
water	158:47	0:0	14	1
op	158:48	0:0	14	.
water	158:49	0:0	14	0
arg	158:52	158:56	11	-1.0
op	158:52	0:0	12	-
water	158:53	0:0	12	1
op	158:54	0:0	12	.
water	158:55	0:0	12	0
op	158:58	0:0	10	+
water	158:60	0:0	10	1
op	158:61	0:0	10	.
water	158:62	0:0	10	0
water	158:63	0:0	10	)
op	158:65	0:0	10	*
water	158:67	0:0	10	0
op	158:68	0:0	10	.
water	158:69	0:0	10	5
water	158:70	0:0	10	;
water	159:16	0:0	10	hue
op	159:20	0:0	10	=
water	159:22	0:0	10	(
water	159:23	0:0	10	angle
op	159:29	0:0	10	+
water	159:31	0:0	10	PI
water	159:33	0:0	10	)
op	159:35	0:0	10	*
water	159:37	0:0	10	INV_PI_360
op	159:48	0:0	10	+
water	159:50	0:0	10	aoffset
water	159:57	0:0	10	;
water	160:16	0:0	10	s
op	160:18	0:0	10	=
water	160:20	0:0	10	gray
op	160:25	0:0	10	*
water	160:27	0:0	10	(
call	160:28	160:50	10	(double)
arg	160:37	160:50	11	ABS(x)+ABS(y)
call	160:37	160:42	12	ABS
arg	160:41	160:42	13	x
water	160:41	0:0	14	x
op	160:43	0:0	12	+
call	160:44	160:49	12	ABS
arg	160:48	160:49	13	y
water	160:48	0:0	14	y
op	160:52	0:0	10	/
call	160:54	160:70	10	(double)
arg	160:63	160:70	11	hw+hh
water	160:63	0:0	12	hw
op	160:66	0:0	12	+
water	160:68	0:0	12	hh
water	160:71	0:0	10	)
water	160:72	0:0	10	;
water	161:16	0:0	10	s
op	161:18	0:0	10	=
call	161:20	161:39	10	MIN
arg	161:24	161:34	11	MAX(s,0.0)
call	161:24	161:33	12	MAX
arg	161:28	161:29	13	s
water	161:28	0:0	14	s
arg	161:30	161:33	13	0.0
water	161:30	0:0	14	0
op	161:31	0:0	14	.
water	161:32	0:0	14	0
arg	161:36	161:39	11	1.0
water	161:36	0:0	12	1
op	161:37	0:0	12	.
water	161:38	0:0	12	0
water	161:40	0:0	10	;
water	162:16	0:0	10	v
op	162:18	0:0	10	=
call	162:20	162:47	10	MIN
arg	162:24	162:42	11	MAX(intensity,0.0)
call	162:24	162:41	12	MAX
arg	162:28	162:37	13	intensity
water	162:28	0:0	14	intensity
arg	162:38	162:41	13	0.0
water	162:38	0:0	14	0
op	162:39	0:0	14	.
water	162:40	0:0	14	0
arg	162:44	162:47	11	1.0
water	162:44	0:0	12	1
op	162:45	0:0	12	.
water	162:46	0:0	12	0
water	162:48	0:0	10	;
if	163:16	168:16	10	(s == 0 . 0)
cond	163:20	163:27	11	s == 0 . 0
water	163:20	0:0	12	s
op	163:22	0:0	12	==
water	163:25	0:0	12	0
op	163:26	0:0	12	.
water	163:27	0:0	12	0
stmts	163:30	168:16	11	
water	163:30	0:0	12	{
water	164:20	0:0	12	ch
op	164:23	0:0	12	=
call	164:25	164:40	12	(uch)
arg	164:31	164:40	13	v*255.0
water	164:31	0:0	14	v
op	164:33	0:0	14	*
water	164:35	0:0	14	255
op	164:38	0:0	14	.
water	164:39	0:0	14	0
water	164:41	0:0	12	;
op	165:20	0:0	12	*
water	165:21	0:0	12	dest
op	165:25	0:0	12	++
op	165:28	0:0	12	=
water	165:30	0:0	12	ch
water	165:32	0:0	12	;
op	166:20	0:0	12	*
water	166:21	0:0	12	dest
op	166:25	0:0	12	++
op	166:28	0:0	12	=
water	166:30	0:0	12	ch
water	166:32	0:0	12	;
op	167:20	0:0	12	*
water	167:21	0:0	12	dest
op	167:25	0:0	12	++
op	167:28	0:0	12	=
water	167:30	0:0	12	ch
water	167:32	0:0	12	;
water	168:16	0:0	12	}
else	168:18	186:16	10
stmts	168:23	186:16	11	
water	168:23	0:0	12	{
if	169:20	170:61	12	(( hue < 0 . 0 ) || ( hue >= 360 . 0 ))
cond	169:24	169:52	13	( hue < 0 . 0 ) || ( hue >= 360 . 0 )
water	169:24	0:0	14	(
water	169:25	0:0	14	hue
op	169:29	0:0	14	<
water	169:31	0:0	14	0
op	169:32	0:0	14	.
water	169:33	0:0	14	0
water	169:34	0:0	14	)
op	169:36	0:0	14	||
water	169:39	0:0	14	(
water	169:40	0:0	14	hue
op	169:44	0:0	14	>=
water	169:47	0:0	14	360
op	169:50	0:0	14	.
water	169:51	0:0	14	0
water	169:52	0:0	14	)
stmts	170:24	170:61	13	
water	170:24	0:0	14	hue
op	170:28	0:0	14	-=
water	170:31	0:0	14	(
water	170:32	0:0	14	(
call	170:33	170:50	14	(int)
arg	170:39	170:50	15	hue/360.0
water	170:39	0:0	16	hue
op	170:43	0:0	16	/
water	170:45	0:0	16	360
op	170:48	0:0	16	.
water	170:49	0:0	16	0
water	170:51	0:0	14	)
op	170:53	0:0	14	*
water	170:55	0:0	14	360
op	170:58	0:0	14	.
water	170:59	0:0	14	0
water	170:60	0:0	14	)
water	170:61	0:0	14	;
water	171:20	0:0	12	hue
op	171:24	0:0	12	/=
water	171:27	0:0	12	60
op	171:29	0:0	12	.
water	171:30	0:0	12	0
water	171:31	0:0	12	;
water	172:20	0:0	12	ii
op	172:23	0:0	12	=
water	172:25	0:0	12	(
water	172:26	0:0	12	int
water	172:29	0:0	12	)
water	172:30	0:0	12	hue
water	172:33	0:0	12	;
water	173:20	0:0	12	f
op	173:22	0:0	12	=
water	173:24	0:0	12	hue
op	173:28	0:0	12	-
water	173:30	0:0	12	(
water	173:31	0:0	12	double
water	173:37	0:0	12	)
water	173:38	0:0	12	ii
water	173:40	0:0	12	;
water	174:20	0:0	12	p
op	174:22	0:0	12	=
water	174:24	0:0	12	(
water	174:25	0:0	12	1
op	174:26	0:0	12	.
water	174:27	0:0	12	0
op	174:29	0:0	12	-
water	174:31	0:0	12	s
water	174:32	0:0	12	)
op	174:34	0:0	12	*
water	174:36	0:0	12	v
water	174:37	0:0	12	;
water	175:20	0:0	12	q
op	175:22	0:0	12	=
water	175:24	0:0	12	(
water	175:25	0:0	12	1
op	175:26	0:0	12	.
water	175:27	0:0	12	0
op	175:29	0:0	12	-
water	175:31	0:0	12	(
water	175:32	0:0	12	s
op	175:34	0:0	12	*
water	175:36	0:0	12	f
water	175:37	0:0	12	)
water	175:38	0:0	12	)
op	175:40	0:0	12	*
water	175:42	0:0	12	v
water	175:43	0:0	12	;
water	176:20	0:0	12	t
op	176:22	0:0	12	=
water	176:24	0:0	12	(
water	176:25	0:0	12	1
op	176:26	0:0	12	.
water	176:27	0:0	12	0
op	176:29	0:0	12	-
water	176:31	0:0	12	(
water	176:32	0:0	12	s
op	176:34	0:0	12	*
water	176:36	0:0	12	(
water	176:37	0:0	12	1
op	176:38	0:0	12	.
water	176:39	0:0	12	0
op	176:41	0:0	12	-
water	176:43	0:0	12	f
water	176:44	0:0	12	)
water	176:45	0:0	12	)
water	176:46	0:0	12	)
op	176:48	0:0	12	*
water	176:50	0:0	12	v
water	176:51	0:0	12	;
if	177:20	177:70	12	(ii == 0)
cond	177:29	177:35	13	ii == 0
water	177:29	0:0	14	ii
op	177:32	0:0	14	==
water	177:35	0:0	14	0
stmts	177:38	177:70	13	
water	177:38	0:0	14	{
water	177:40	0:0	14	red
op	177:44	0:0	14	=
water	177:46	0:0	14	v
water	177:47	0:0	14	;
water	177:49	0:0	14	green
op	177:55	0:0	14	=
water	177:57	0:0	14	t
water	177:58	0:0	14	;
water	177:60	0:0	14	blue
op	177:65	0:0	14	=
water	177:67	0:0	14	p
water	177:68	0:0	14	;
water	177:70	0:0	14	}
else	178:20	178:70	12
stmts	178:25	178:70	13	
if	178:25	178:70	14	(ii == 1)
cond	178:29	178:35	15	ii == 1
water	178:29	0:0	16	ii
op	178:32	0:0	16	==
water	178:35	0:0	16	1
stmts	178:38	178:70	15	
water	178:38	0:0	16	{
water	178:40	0:0	16	red
op	178:44	0:0	16	=
water	178:46	0:0	16	q
water	178:47	0:0	16	;
water	178:49	0:0	16	green
op	178:55	0:0	16	=
water	178:57	0:0	16	v
water	178:58	0:0	16	;
water	178:60	0:0	16	blue
op	178:65	0:0	16	=
water	178:67	0:0	16	p
water	178:68	0:0	16	;
water	178:70	0:0	16	}
else	179:20	179:70	12
stmts	179:25	179:70	13	
if	179:25	179:70	14	(ii == 2)
cond	179:29	179:35	15	ii == 2
water	179:29	0:0	16	ii
op	179:32	0:0	16	==
water	179:35	0:0	16	2
stmts	179:38	179:70	15	
water	179:38	0:0	16	{
water	179:40	0:0	16	red
op	179:44	0:0	16	=
water	179:46	0:0	16	p
water	179:47	0:0	16	;
water	179:49	0:0	16	green
op	179:55	0:0	16	=
water	179:57	0:0	16	v
water	179:58	0:0	16	;
water	179:60	0:0	16	blue
op	179:65	0:0	16	=
water	179:67	0:0	16	t
water	179:68	0:0	16	;
water	179:70	0:0	16	}
else	180:20	180:70	12
stmts	180:25	180:70	13	
if	180:25	180:70	14	(ii == 3)
cond	180:29	180:35	15	ii == 3
water	180:29	0:0	16	ii
op	180:32	0:0	16	==
water	180:35	0:0	16	3
stmts	180:38	180:70	15	
water	180:38	0:0	16	{
water	180:40	0:0	16	red
op	180:44	0:0	16	=
water	180:46	0:0	16	p
water	180:47	0:0	16	;
water	180:49	0:0	16	green
op	180:55	0:0	16	=
water	180:57	0:0	16	q
water	180:58	0:0	16	;
water	180:60	0:0	16	blue
op	180:65	0:0	16	=
water	180:67	0:0	16	v
water	180:68	0:0	16	;
water	180:70	0:0	16	}
else	181:20	181:70	12
stmts	181:25	181:70	13	
if	181:25	181:70	14	(ii == 4)
cond	181:29	181:35	15	ii == 4
water	181:29	0:0	16	ii
op	181:32	0:0	16	==
water	181:35	0:0	16	4
stmts	181:38	181:70	15	
water	181:38	0:0	16	{
water	181:40	0:0	16	red
op	181:44	0:0	16	=
water	181:46	0:0	16	t
water	181:47	0:0	16	;
water	181:49	0:0	16	green
op	181:55	0:0	16	=
water	181:57	0:0	16	p
water	181:58	0:0	16	;
water	181:60	0:0	16	blue
op	181:65	0:0	16	=
water	181:67	0:0	16	v
water	181:68	0:0	16	;
water	181:70	0:0	16	}
else	182:20	182:70	12
stmts	182:25	182:70	13	
if	182:25	182:70	14	(ii == 5)
cond	182:29	182:35	15	ii == 5
water	182:29	0:0	16	ii
op	182:32	0:0	16	==
water	182:35	0:0	16	5
stmts	182:38	182:70	15	
water	182:38	0:0	16	{
water	182:40	0:0	16	red
op	182:44	0:0	16	=
water	182:46	0:0	16	v
water	182:47	0:0	16	;
water	182:49	0:0	16	green
op	182:55	0:0	16	=
water	182:57	0:0	16	p
water	182:58	0:0	16	;
water	182:60	0:0	16	blue
op	182:65	0:0	16	=
water	182:67	0:0	16	q
water	182:68	0:0	16	;
water	182:70	0:0	16	}
op	183:20	0:0	12	*
water	183:21	0:0	12	dest
op	183:25	0:0	12	++
op	183:28	0:0	12	=
call	183:30	183:47	12	(uch)
arg	183:36	183:47	13	red*255.0
water	183:36	0:0	14	red
op	183:40	0:0	14	*
water	183:42	0:0	14	255
op	183:45	0:0	14	.
water	183:46	0:0	14	0
water	183:48	0:0	12	;
op	184:20	0:0	12	*
water	184:21	0:0	12	dest
op	184:25	0:0	12	++
op	184:28	0:0	12	=
call	184:30	184:49	12	(uch)
arg	184:36	184:49	13	green*255.0
water	184:36	0:0	14	green
op	184:42	0:0	14	*
water	184:44	0:0	14	255
op	184:47	0:0	14	.
water	184:48	0:0	14	0
water	184:50	0:0	12	;
op	185:20	0:0	12	*
water	185:21	0:0	12	dest
op	185:25	0:0	12	++
op	185:28	0:0	12	=
call	185:30	185:48	12	(uch)
arg	185:36	185:48	13	blue*255.0
water	185:36	0:0	14	blue
op	185:41	0:0	14	*
water	185:43	0:0	14	255
op	185:46	0:0	14	.
water	185:47	0:0	14	0
water	185:49	0:0	12	;
water	186:16	0:0	12	}
water	187:12	0:0	10	}
water	188:8	0:0	8	}
call	189:8	189:33	6	fprintf
arg	189:16	189:22	7	stderr
water	189:16	0:0	8	stderr
arg	189:24	189:33	7	"done.\n"
water	189:24	0:0	8	"done.\n"
water	189:34	0:0	6	;
call	190:8	190:21	6	fflush
arg	190:15	190:21	7	stderr
water	190:15	0:0	8	stderr
water	190:22	0:0	6	;
water	191:4	0:0	6	}
for	196:4	207:4	2	(row = 0 ;row < rpng2_info . height;++ row)
forinit	196:9	196:16	3	row = 0 ;
water	196:9	0:0	4	row
op	196:13	0:0	4	=
water	196:15	0:0	4	0
water	196:16	0:0	4	;
cond	196:19	196:36	3	row < rpng2_info . height
water	196:19	0:0	4	row
op	196:23	0:0	4	<
water	196:25	0:0	4	rpng2_info
op	196:35	0:0	4	.
water	196:36	0:0	4	height
forexpr	196:45	196:47	3	++ row
op	196:45	0:0	4	++
water	196:47	0:0	4	row
stmts	196:52	207:4	3	
water	196:52	0:0	4	{
water	197:8	0:0	4	src
op	197:12	0:0	4	=
water	197:14	0:0	4	bg_data
op	197:22	0:0	4	+
water	197:24	0:0	4	row
op	197:27	0:0	4	*
water	197:28	0:0	4	bg_rowbytes
water	197:39	0:0	4	;
water	198:8	0:0	4	dest
op	198:13	0:0	4	=
water	198:15	0:0	4	wimage_data
op	198:27	0:0	4	+
water	198:29	0:0	4	row
op	198:32	0:0	4	*
water	198:33	0:0	4	wimage_rowbytes
water	198:48	0:0	4	;
for	199:8	206:8	4	(i = rpng2_info . width ;i > 0;-- i)
forinit	199:13	199:33	5	i = rpng2_info . width ;
water	199:13	0:0	6	i
op	199:15	0:0	6	=
water	199:17	0:0	6	rpng2_info
op	199:27	0:0	6	.
water	199:28	0:0	6	width
water	199:33	0:0	6	;
cond	199:36	199:40	5	i > 0
water	199:36	0:0	6	i
op	199:38	0:0	6	>
water	199:40	0:0	6	0
forexpr	199:44	199:46	5	-- i
op	199:44	0:0	6	--
water	199:46	0:0	6	i
stmts	199:49	206:8	5	
water	199:49	0:0	6	{
water	200:12	0:0	6	r1
op	200:15	0:0	6	=
op	200:17	0:0	6	*
water	200:18	0:0	6	src
op	200:21	0:0	6	++
water	200:23	0:0	6	;
water	201:12	0:0	6	g1
op	201:15	0:0	6	=
op	201:17	0:0	6	*
water	201:18	0:0	6	src
op	201:21	0:0	6	++
water	201:23	0:0	6	;
water	202:12	0:0	6	b1
op	202:15	0:0	6	=
op	202:17	0:0	6	*
water	202:18	0:0	6	src
op	202:21	0:0	6	++
water	202:23	0:0	6	;
op	203:12	0:0	6	*
water	203:13	0:0	6	dest
op	203:17	0:0	6	++
op	203:20	0:0	6	=
water	203:22	0:0	6	b1
water	203:24	0:0	6	;
op	204:12	0:0	6	*
water	204:13	0:0	6	dest
op	204:17	0:0	6	++
op	204:20	0:0	6	=
water	204:22	0:0	6	g1
water	204:24	0:0	6	;
op	205:12	0:0	6	*
water	205:13	0:0	6	dest
op	205:17	0:0	6	++
op	205:20	0:0	6	=
water	205:22	0:0	6	r1
water	205:24	0:0	6	;
water	206:8	0:0	6	}
water	207:4	0:0	4	}
return	208:4	208:12	2	0
water	208:11	0:0	3	0
