func	1:0	52:0	0	static int	next_format
params	2:11	0:0	1	
param	2:12	2:33	2	png_bytep	colour_type
param	2:35	2:54	2	png_bytep	bit_depth
param	3:3	3:31	2	unsigned int *	palette_number
param	3:33	3:54	2	int	no_low_depth_gray
stmnts	5:3	51:3	1	
if	5:3	14:3	2	(* bit_depth == 0)
cond	5:7	5:21	3	* bit_depth == 0
op	5:7	0:0	4	*
water	5:8	0:0	4	bit_depth
op	5:18	0:0	4	==
water	5:21	0:0	4	0
stmts	6:3	14:3	3	
water	6:3	0:0	4	{
op	7:6	0:0	4	*
water	7:7	0:0	4	colour_type
op	7:19	0:0	4	=
water	7:21	0:0	4	0
water	7:22	0:0	4	;
if	8:6	9:23	4	(no_low_depth_gray)
cond	8:10	8:10	5	no_low_depth_gray
water	8:10	0:0	6	no_low_depth_gray
stmts	9:9	9:23	5	
op	9:9	0:0	6	*
water	9:10	0:0	6	bit_depth
op	9:20	0:0	6	=
water	9:22	0:0	6	8
water	9:23	0:0	6	;
else	10:6	11:23	4
stmts	11:9	11:23	5	
op	11:9	0:0	6	*
water	11:10	0:0	6	bit_depth
op	11:20	0:0	6	=
water	11:22	0:0	6	1
water	11:23	0:0	6	;
op	12:6	0:0	4	*
water	12:7	0:0	4	palette_number
op	12:22	0:0	4	=
water	12:24	0:0	4	0
water	12:25	0:0	4	;
return	13:6	13:14	4	1
water	13:13	0:0	5	1
water	14:3	0:0	4	}
if	15:3	21:3	2	(* colour_type == 3)
cond	15:7	15:23	3	* colour_type == 3
op	15:7	0:0	4	*
water	15:8	0:0	4	colour_type
op	15:20	0:0	4	==
water	15:23	0:0	4	3
stmts	16:3	21:3	3	
water	16:3	0:0	4	{
if	18:6	19:17	4	(++ * palette_number <PALETTE_COUNT (* bit_depth ))
cond	18:10	18:54	5	++ * palette_number <PALETTE_COUNT (* bit_depth )
op	18:10	0:0	6	++
op	18:12	0:0	6	*
water	18:13	0:0	6	palette_number
op	18:28	0:0	6	<
call	18:30	18:54	6	PALETTE_COUNT
arg	18:44	18:54	7	*bit_depth
op	18:44	0:0	8	*
water	18:45	0:0	8	bit_depth
stmts	19:9	19:17	5	
return	19:9	19:17	6	1
water	19:16	0:0	7	1
op	20:6	0:0	4	*
water	20:7	0:0	4	palette_number
op	20:22	0:0	4	=
water	20:24	0:0	4	0
water	20:25	0:0	4	;
water	21:3	0:0	4	}
op	22:3	0:0	2	*
water	22:4	0:0	2	bit_depth
op	22:14	0:0	2	=
call	22:16	22:42	2	(png_byte)
arg	22:27	22:42	3	*bit_depth<<1
op	22:27	0:0	4	*
water	22:28	0:0	4	bit_depth
op	22:38	0:0	4	<<
water	22:41	0:0	4	1
water	22:43	0:0	2	;
if	24:3	29:14	2	(* bit_depth <= 8 || ( * colour_type != 3 && * bit_depth <= 16 ))
cond	24:7	26:50	3	* bit_depth <= 8 || ( * colour_type != 3 && * bit_depth <= 16 )
op	24:7	0:0	4	*
water	24:8	0:0	4	bit_depth
op	24:18	0:0	4	<=
water	24:21	0:0	4	8
op	26:9	0:0	4	||
water	26:12	0:0	4	(
op	26:13	0:0	4	*
water	26:14	0:0	4	colour_type
op	26:26	0:0	4	!=
water	26:29	0:0	4	3
op	26:31	0:0	4	&&
op	26:34	0:0	4	*
water	26:35	0:0	4	bit_depth
op	26:45	0:0	4	<=
water	26:48	0:0	4	16
water	26:50	0:0	4	)
stmts	29:6	29:14	3	
return	29:6	29:14	4	1
water	29:13	0:0	5	1
switch	31:3	51:3	2	(* colour_type)
cond	31:11	31:12	3	* colour_type
op	31:11	0:0	4	*
water	31:12	0:0	4	colour_type
stmts	32:3	51:3	3	
water	32:3	0:0	4	{
label	33:6	33:12	4	case 0 :
op	34:9	0:0	4	*
water	34:10	0:0	4	colour_type
op	34:22	0:0	4	=
water	34:24	0:0	4	2
water	34:25	0:0	4	;
op	35:9	0:0	4	*
water	35:10	0:0	4	bit_depth
op	35:20	0:0	4	=
water	35:22	0:0	4	8
water	35:23	0:0	4	;
return	36:9	36:17	4	1
water	36:16	0:0	5	1
label	37:6	37:12	4	case 2 :
op	38:9	0:0	4	*
water	38:10	0:0	4	colour_type
op	38:22	0:0	4	=
water	38:24	0:0	4	3
water	38:25	0:0	4	;
op	39:9	0:0	4	*
water	39:10	0:0	4	bit_depth
op	39:20	0:0	4	=
water	39:22	0:0	4	1
water	39:23	0:0	4	;
return	40:9	40:17	4	1
water	40:16	0:0	5	1
label	41:6	41:12	4	case 3 :
op	42:9	0:0	4	*
water	42:10	0:0	4	colour_type
op	42:22	0:0	4	=
water	42:24	0:0	4	4
water	42:25	0:0	4	;
op	43:9	0:0	4	*
water	43:10	0:0	4	bit_depth
op	43:20	0:0	4	=
water	43:22	0:0	4	8
water	43:23	0:0	4	;
return	44:9	44:17	4	1
water	44:16	0:0	5	1
label	45:6	45:12	4	case 4 :
op	46:9	0:0	4	*
water	46:10	0:0	4	colour_type
op	46:22	0:0	4	=
water	46:24	0:0	4	6
water	46:25	0:0	4	;
op	47:9	0:0	4	*
water	47:10	0:0	4	bit_depth
op	47:20	0:0	4	=
water	47:22	0:0	4	8
water	47:23	0:0	4	;
return	48:9	48:17	4	1
water	48:16	0:0	5	1
label	49:6	49:13	4	default :
return	50:9	50:17	4	0
water	50:16	0:0	5	0
water	51:3	0:0	4	}
