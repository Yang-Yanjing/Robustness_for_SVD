func	2:0	283:0	0	BOOL	pnm2png
params	2:13	0:0	1	
param	2:14	2:28	2	FILE *	pnm_file
param	2:30	2:44	2	FILE *	png_file
param	2:46	2:62	2	FILE *	alpha_file
param	2:64	2:78	2	BOOL	interlace
param	3:5	3:15	2	BOOL	alpha
stmnts	0:0	282:13	1	
decl	5:2	5:31	2	png_struct	*png_ptr
op	5:25	0:0	2	=
water	5:27	0:0	2	NULL
decl	6:2	6:32	2	png_info	*info_ptr
op	6:26	0:0	2	=
water	6:28	0:0	2	NULL
decl	7:2	7:34	2	png_byte	*png_pixels
op	7:28	0:0	2	=
water	7:30	0:0	2	NULL
decl	8:2	8:37	2	png_byte	**row_pointers
op	8:31	0:0	2	=
water	8:33	0:0	2	NULL
decl	9:2	9:31	2	png_byte	*pix_ptr
op	9:25	0:0	2	=
water	9:27	0:0	2	NULL
decl	10:2	10:34	2	volatile png_uint_32	row_bytes
decl	11:2	11:30	2	char	type_token[16]
decl	12:2	12:31	2	char	width_token[16]
decl	13:2	13:32	2	char	height_token[16]
decl	14:2	14:32	2	char	maxval_token[16]
decl	15:2	15:35	2	volatile int	color_type
decl	16:2	16:46	2	unsigned long	ul_width
op	16:26	0:0	2	=
water	16:27	0:0	2	0
water	16:28	0:0	2	,
decl	16:2	16:46	2	unsigned long	ul_alpha_width
op	16:44	0:0	2	=
water	16:45	0:0	2	0
decl	17:2	17:48	2	unsigned long	ul_height
op	17:27	0:0	2	=
water	17:28	0:0	2	0
water	17:29	0:0	2	,
decl	17:2	17:48	2	unsigned long	ul_alpha_height
op	17:46	0:0	2	=
water	17:47	0:0	2	0
decl	18:2	18:29	2	unsigned long	ul_maxval
op	18:27	0:0	2	=
water	18:28	0:0	2	0
decl	19:2	19:38	2	volatile png_uint_32	width
water	19:30	0:0	2	,
decl	19:2	19:38	2	volatile png_uint_32	height
decl	20:2	20:50	2	volatile png_uint_32	alpha_width
water	20:36	0:0	2	,
decl	20:2	20:50	2	volatile png_uint_32	alpha_height
decl	21:2	21:22	2	png_uint_32	maxval
decl	22:2	22:38	2	volatile int	bit_depth
op	22:35	0:0	2	=
water	22:37	0:0	2	0
decl	23:2	23:24	2	int	channels
decl	24:2	24:31	2	int	alpha_depth
op	24:28	0:0	2	=
water	24:30	0:0	2	0
decl	25:2	25:29	2	int	alpha_present
decl	26:2	26:24	2	int	row
water	26:19	0:0	2	,
decl	26:2	26:24	2	int	col
decl	27:2	27:38	2	BOOL	raw
water	27:19	0:0	2	,
decl	27:2	27:38	2	BOOL	alpha_raw
op	27:31	0:0	2	=
water	27:33	0:0	2	FALSE
decl	29:2	29:37	2	BOOL	packed_bitmap
op	29:30	0:0	2	=
water	29:32	0:0	2	FALSE
decl	31:2	31:21	2	png_uint_32	tmp16
decl	32:2	32:17	2	int	i
call	34:2	34:32	2	get_token
arg	34:12	34:20	3	pnm_file
water	34:12	0:0	4	pnm_file
arg	34:22	34:32	3	type_token
water	34:22	0:0	4	type_token
water	34:33	0:0	2	;
if	35:2	38:2	2	(type_token [ 0 ] != 'P')
cond	35:6	35:23	3	type_token [ 0 ] != 'P'
water	35:6	0:0	4	type_token
op	35:16	0:0	4	[
water	35:17	0:0	4	0
op	35:18	0:0	4	]
op	35:20	0:0	4	!=
water	35:23	0:0	4	'P'
stmts	36:2	38:2	3	
water	36:2	0:0	4	{
return	37:4	37:16	4	FALSE
water	37:11	0:0	5	FALSE
water	38:2	0:0	4	}
else	39:2	56:2	2
stmts	39:7	56:2	3	
if	39:7	56:2	4	(( type_token [ 1 ] == '1' ) || ( type_token [ 1 ] == '4' ))
cond	39:11	39:58	5	( type_token [ 1 ] == '1' ) || ( type_token [ 1 ] == '4' )
water	39:11	0:0	6	(
water	39:12	0:0	6	type_token
op	39:22	0:0	6	[
water	39:23	0:0	6	1
op	39:24	0:0	6	]
op	39:26	0:0	6	==
water	39:29	0:0	6	'1'
water	39:32	0:0	6	)
op	39:34	0:0	6	||
water	39:37	0:0	6	(
water	39:38	0:0	6	type_token
op	39:48	0:0	6	[
water	39:49	0:0	6	1
op	39:50	0:0	6	]
op	39:52	0:0	6	==
water	39:55	0:0	6	'4'
water	39:58	0:0	6	)
stmts	40:2	56:2	5	
water	40:2	0:0	6	{
water	42:4	0:0	6	raw
op	42:8	0:0	6	=
water	42:10	0:0	6	(
water	42:11	0:0	6	type_token
op	42:21	0:0	6	[
water	42:22	0:0	6	1
op	42:23	0:0	6	]
op	42:25	0:0	6	==
water	42:28	0:0	6	'4'
water	42:31	0:0	6	)
water	42:32	0:0	6	;
water	43:4	0:0	6	color_type
op	43:15	0:0	6	=
water	43:17	0:0	6	PNG_COLOR_TYPE_GRAY
water	43:36	0:0	6	;
call	44:4	44:35	6	get_token
arg	44:14	44:22	7	pnm_file
water	44:14	0:0	8	pnm_file
arg	44:24	44:35	7	width_token
water	44:24	0:0	8	width_token
water	44:36	0:0	6	;
call	45:4	45:41	6	sscanf
arg	45:12	45:23	7	width_token
water	45:12	0:0	8	width_token
arg	45:25	45:30	7	"%lu"
water	45:25	0:0	8	"%lu"
arg	45:32	45:41	7	&ul_width
op	45:32	0:0	8	&
water	45:33	0:0	8	ul_width
water	45:42	0:0	6	;
water	46:4	0:0	6	width
op	46:10	0:0	6	=
water	46:12	0:0	6	(
water	46:13	0:0	6	png_uint_32
water	46:24	0:0	6	)
water	46:26	0:0	6	ul_width
water	46:34	0:0	6	;
call	47:4	47:36	6	get_token
arg	47:14	47:22	7	pnm_file
water	47:14	0:0	8	pnm_file
arg	47:24	47:36	7	height_token
water	47:24	0:0	8	height_token
water	47:37	0:0	6	;
call	48:4	48:43	6	sscanf
arg	48:12	48:24	7	height_token
water	48:12	0:0	8	height_token
arg	48:26	48:31	7	"%lu"
water	48:26	0:0	8	"%lu"
arg	48:33	48:43	7	&ul_height
op	48:33	0:0	8	&
water	48:34	0:0	8	ul_height
water	48:44	0:0	6	;
water	49:4	0:0	6	height
op	49:11	0:0	6	=
water	49:13	0:0	6	(
water	49:14	0:0	6	png_uint_32
water	49:25	0:0	6	)
water	49:27	0:0	6	ul_height
water	49:36	0:0	6	;
water	50:4	0:0	6	bit_depth
op	50:14	0:0	6	=
water	50:16	0:0	6	1
water	50:17	0:0	6	;
water	51:4	0:0	6	packed_bitmap
op	51:18	0:0	6	=
water	51:20	0:0	6	TRUE
water	51:24	0:0	6	;
call	53:4	53:78	6	fprintf
arg	53:13	53:19	7	stderr
water	53:13	0:0	8	stderr
arg	53:21	53:78	7	"PNM2PNG built without PNG_WRITE_INVERT_SUPPORTED and \n"
water	53:21	0:0	8	"PNM2PNG built without PNG_WRITE_INVERT_SUPPORTED and \n"
water	53:79	0:0	6	;
call	54:4	54:78	6	fprintf
arg	54:13	54:19	7	stderr
water	54:13	0:0	8	stderr
arg	54:21	54:78	7	"PNG_WRITE_PACK_SUPPORTED can't read PBM (P1,P4) files\n"
water	54:21	0:0	8	"PNG_WRITE_PACK_SUPPORTED can't read PBM (P1,P4) files\n"
water	54:79	0:0	6	;
water	56:2	0:0	6	}
else	57:2	80:2	2
stmts	57:7	80:2	3	
if	57:7	80:2	4	(( type_token [ 1 ] == '2' ) || ( type_token [ 1 ] == '5' ))
cond	57:11	57:58	5	( type_token [ 1 ] == '2' ) || ( type_token [ 1 ] == '5' )
water	57:11	0:0	6	(
water	57:12	0:0	6	type_token
op	57:22	0:0	6	[
water	57:23	0:0	6	1
op	57:24	0:0	6	]
op	57:26	0:0	6	==
water	57:29	0:0	6	'2'
water	57:32	0:0	6	)
op	57:34	0:0	6	||
water	57:37	0:0	6	(
water	57:38	0:0	6	type_token
op	57:48	0:0	6	[
water	57:49	0:0	6	1
op	57:50	0:0	6	]
op	57:52	0:0	6	==
water	57:55	0:0	6	'5'
water	57:58	0:0	6	)
stmts	58:2	80:2	5	
water	58:2	0:0	6	{
water	59:4	0:0	6	raw
op	59:8	0:0	6	=
water	59:10	0:0	6	(
water	59:11	0:0	6	type_token
op	59:21	0:0	6	[
water	59:22	0:0	6	1
op	59:23	0:0	6	]
op	59:25	0:0	6	==
water	59:28	0:0	6	'5'
water	59:31	0:0	6	)
water	59:32	0:0	6	;
water	60:4	0:0	6	color_type
op	60:15	0:0	6	=
water	60:17	0:0	6	PNG_COLOR_TYPE_GRAY
water	60:36	0:0	6	;
call	61:4	61:35	6	get_token
arg	61:14	61:22	7	pnm_file
water	61:14	0:0	8	pnm_file
arg	61:24	61:35	7	width_token
water	61:24	0:0	8	width_token
water	61:36	0:0	6	;
call	62:4	62:41	6	sscanf
arg	62:12	62:23	7	width_token
water	62:12	0:0	8	width_token
arg	62:25	62:30	7	"%lu"
water	62:25	0:0	8	"%lu"
arg	62:32	62:41	7	&ul_width
op	62:32	0:0	8	&
water	62:33	0:0	8	ul_width
water	62:42	0:0	6	;
water	63:4	0:0	6	width
op	63:10	0:0	6	=
water	63:12	0:0	6	(
water	63:13	0:0	6	png_uint_32
water	63:24	0:0	6	)
water	63:26	0:0	6	ul_width
water	63:34	0:0	6	;
call	64:4	64:36	6	get_token
arg	64:14	64:22	7	pnm_file
water	64:14	0:0	8	pnm_file
arg	64:24	64:36	7	height_token
water	64:24	0:0	8	height_token
water	64:37	0:0	6	;
call	65:4	65:43	6	sscanf
arg	65:12	65:24	7	height_token
water	65:12	0:0	8	height_token
arg	65:26	65:31	7	"%lu"
water	65:26	0:0	8	"%lu"
arg	65:33	65:43	7	&ul_height
op	65:33	0:0	8	&
water	65:34	0:0	8	ul_height
water	65:44	0:0	6	;
water	66:4	0:0	6	height
op	66:11	0:0	6	=
water	66:13	0:0	6	(
water	66:14	0:0	6	png_uint_32
water	66:25	0:0	6	)
water	66:27	0:0	6	ul_height
water	66:36	0:0	6	;
call	67:4	67:36	6	get_token
arg	67:14	67:22	7	pnm_file
water	67:14	0:0	8	pnm_file
arg	67:24	67:36	7	maxval_token
water	67:24	0:0	8	maxval_token
water	67:37	0:0	6	;
call	68:4	68:43	6	sscanf
arg	68:12	68:24	7	maxval_token
water	68:12	0:0	8	maxval_token
arg	68:26	68:31	7	"%lu"
water	68:26	0:0	8	"%lu"
arg	68:33	68:43	7	&ul_maxval
op	68:33	0:0	8	&
water	68:34	0:0	8	ul_maxval
water	68:44	0:0	6	;
water	69:4	0:0	6	maxval
op	69:11	0:0	6	=
water	69:13	0:0	6	(
water	69:14	0:0	6	png_uint_32
water	69:25	0:0	6	)
water	69:27	0:0	6	ul_maxval
water	69:36	0:0	6	;
if	70:4	71:19	6	(maxval <= 1)
cond	70:8	70:18	7	maxval <= 1
water	70:8	0:0	8	maxval
op	70:15	0:0	8	<=
water	70:18	0:0	8	1
stmts	71:6	71:19	7	
water	71:6	0:0	8	bit_depth
op	71:16	0:0	8	=
water	71:18	0:0	8	1
water	71:19	0:0	8	;
else	72:4	73:19	6
stmts	72:9	73:19	7	
if	72:9	73:19	8	(maxval <= 3)
cond	72:13	72:23	9	maxval <= 3
water	72:13	0:0	10	maxval
op	72:20	0:0	10	<=
water	72:23	0:0	10	3
stmts	73:6	73:19	9	
water	73:6	0:0	10	bit_depth
op	73:16	0:0	10	=
water	73:18	0:0	10	2
water	73:19	0:0	10	;
else	74:4	75:19	6
stmts	74:9	75:19	7	
if	74:9	75:19	8	(maxval <= 15)
cond	74:13	74:23	9	maxval <= 15
water	74:13	0:0	10	maxval
op	74:20	0:0	10	<=
water	74:23	0:0	10	15
stmts	75:6	75:19	9	
water	75:6	0:0	10	bit_depth
op	75:16	0:0	10	=
water	75:18	0:0	10	4
water	75:19	0:0	10	;
else	76:4	77:19	6
stmts	76:9	77:19	7	
if	76:9	77:19	8	(maxval <= 255)
cond	76:13	76:23	9	maxval <= 255
water	76:13	0:0	10	maxval
op	76:20	0:0	10	<=
water	76:23	0:0	10	255
stmts	77:6	77:19	9	
water	77:6	0:0	10	bit_depth
op	77:16	0:0	10	=
water	77:18	0:0	10	8
water	77:19	0:0	10	;
else	78:4	79:20	6
stmts	79:6	79:20	7	
water	79:6	0:0	8	bit_depth
op	79:16	0:0	8	=
water	79:18	0:0	8	16
water	79:20	0:0	8	;
water	80:2	0:0	6	}
else	81:2	104:2	2
stmts	81:7	104:2	3	
if	81:7	104:2	4	(( type_token [ 1 ] == '3' ) || ( type_token [ 1 ] == '6' ))
cond	81:11	81:58	5	( type_token [ 1 ] == '3' ) || ( type_token [ 1 ] == '6' )
water	81:11	0:0	6	(
water	81:12	0:0	6	type_token
op	81:22	0:0	6	[
water	81:23	0:0	6	1
op	81:24	0:0	6	]
op	81:26	0:0	6	==
water	81:29	0:0	6	'3'
water	81:32	0:0	6	)
op	81:34	0:0	6	||
water	81:37	0:0	6	(
water	81:38	0:0	6	type_token
op	81:48	0:0	6	[
water	81:49	0:0	6	1
op	81:50	0:0	6	]
op	81:52	0:0	6	==
water	81:55	0:0	6	'6'
water	81:58	0:0	6	)
stmts	82:2	104:2	5	
water	82:2	0:0	6	{
water	83:4	0:0	6	raw
op	83:8	0:0	6	=
water	83:10	0:0	6	(
water	83:11	0:0	6	type_token
op	83:21	0:0	6	[
water	83:22	0:0	6	1
op	83:23	0:0	6	]
op	83:25	0:0	6	==
water	83:28	0:0	6	'6'
water	83:31	0:0	6	)
water	83:32	0:0	6	;
water	84:4	0:0	6	color_type
op	84:15	0:0	6	=
water	84:17	0:0	6	PNG_COLOR_TYPE_RGB
water	84:35	0:0	6	;
call	85:4	85:35	6	get_token
arg	85:14	85:22	7	pnm_file
water	85:14	0:0	8	pnm_file
arg	85:24	85:35	7	width_token
water	85:24	0:0	8	width_token
water	85:36	0:0	6	;
call	86:4	86:41	6	sscanf
arg	86:12	86:23	7	width_token
water	86:12	0:0	8	width_token
arg	86:25	86:30	7	"%lu"
water	86:25	0:0	8	"%lu"
arg	86:32	86:41	7	&ul_width
op	86:32	0:0	8	&
water	86:33	0:0	8	ul_width
water	86:42	0:0	6	;
water	87:4	0:0	6	width
op	87:10	0:0	6	=
water	87:12	0:0	6	(
water	87:13	0:0	6	png_uint_32
water	87:24	0:0	6	)
water	87:26	0:0	6	ul_width
water	87:34	0:0	6	;
call	88:4	88:36	6	get_token
arg	88:14	88:22	7	pnm_file
water	88:14	0:0	8	pnm_file
arg	88:24	88:36	7	height_token
water	88:24	0:0	8	height_token
water	88:37	0:0	6	;
call	89:4	89:43	6	sscanf
arg	89:12	89:24	7	height_token
water	89:12	0:0	8	height_token
arg	89:26	89:31	7	"%lu"
water	89:26	0:0	8	"%lu"
arg	89:33	89:43	7	&ul_height
op	89:33	0:0	8	&
water	89:34	0:0	8	ul_height
water	89:44	0:0	6	;
water	90:4	0:0	6	height
op	90:11	0:0	6	=
water	90:13	0:0	6	(
water	90:14	0:0	6	png_uint_32
water	90:25	0:0	6	)
water	90:27	0:0	6	ul_height
water	90:36	0:0	6	;
call	91:4	91:36	6	get_token
arg	91:14	91:22	7	pnm_file
water	91:14	0:0	8	pnm_file
arg	91:24	91:36	7	maxval_token
water	91:24	0:0	8	maxval_token
water	91:37	0:0	6	;
call	92:4	92:43	6	sscanf
arg	92:12	92:24	7	maxval_token
water	92:12	0:0	8	maxval_token
arg	92:26	92:31	7	"%lu"
water	92:26	0:0	8	"%lu"
arg	92:33	92:43	7	&ul_maxval
op	92:33	0:0	8	&
water	92:34	0:0	8	ul_maxval
water	92:44	0:0	6	;
water	93:4	0:0	6	maxval
op	93:11	0:0	6	=
water	93:13	0:0	6	(
water	93:14	0:0	6	png_uint_32
water	93:25	0:0	6	)
water	93:27	0:0	6	ul_maxval
water	93:36	0:0	6	;
if	94:4	95:19	6	(maxval <= 1)
cond	94:8	94:18	7	maxval <= 1
water	94:8	0:0	8	maxval
op	94:15	0:0	8	<=
water	94:18	0:0	8	1
stmts	95:6	95:19	7	
water	95:6	0:0	8	bit_depth
op	95:16	0:0	8	=
water	95:18	0:0	8	1
water	95:19	0:0	8	;
else	96:4	97:19	6
stmts	96:9	97:19	7	
if	96:9	97:19	8	(maxval <= 3)
cond	96:13	96:23	9	maxval <= 3
water	96:13	0:0	10	maxval
op	96:20	0:0	10	<=
water	96:23	0:0	10	3
stmts	97:6	97:19	9	
water	97:6	0:0	10	bit_depth
op	97:16	0:0	10	=
water	97:18	0:0	10	2
water	97:19	0:0	10	;
else	98:4	99:19	6
stmts	98:9	99:19	7	
if	98:9	99:19	8	(maxval <= 15)
cond	98:13	98:23	9	maxval <= 15
water	98:13	0:0	10	maxval
op	98:20	0:0	10	<=
water	98:23	0:0	10	15
stmts	99:6	99:19	9	
water	99:6	0:0	10	bit_depth
op	99:16	0:0	10	=
water	99:18	0:0	10	4
water	99:19	0:0	10	;
else	100:4	101:19	6
stmts	100:9	101:19	7	
if	100:9	101:19	8	(maxval <= 255)
cond	100:13	100:23	9	maxval <= 255
water	100:13	0:0	10	maxval
op	100:20	0:0	10	<=
water	100:23	0:0	10	255
stmts	101:6	101:19	9	
water	101:6	0:0	10	bit_depth
op	101:16	0:0	10	=
water	101:18	0:0	10	8
water	101:19	0:0	10	;
else	102:4	103:20	6
stmts	103:6	103:20	7	
water	103:6	0:0	8	bit_depth
op	103:16	0:0	8	=
water	103:18	0:0	8	16
water	103:20	0:0	8	;
water	104:2	0:0	6	}
else	105:2	108:2	2
stmts	106:2	108:2	3	
water	106:2	0:0	4	{
return	107:4	107:16	4	FALSE
water	107:11	0:0	5	FALSE
water	108:2	0:0	4	}
if	110:2	154:2	2	(alpha)
cond	110:6	110:6	3	alpha
water	110:6	0:0	4	alpha
stmts	111:2	154:2	3	
water	111:2	0:0	4	{
if	112:4	113:44	4	(color_type == PNG_COLOR_TYPE_GRAY)
cond	112:8	112:22	5	color_type == PNG_COLOR_TYPE_GRAY
water	112:8	0:0	6	color_type
op	112:19	0:0	6	==
water	112:22	0:0	6	PNG_COLOR_TYPE_GRAY
stmts	113:6	113:44	5	
water	113:6	0:0	6	color_type
op	113:17	0:0	6	=
water	113:19	0:0	6	PNG_COLOR_TYPE_GRAY_ALPHA
water	113:44	0:0	6	;
if	114:4	115:43	4	(color_type == PNG_COLOR_TYPE_RGB)
cond	114:8	114:22	5	color_type == PNG_COLOR_TYPE_RGB
water	114:8	0:0	6	color_type
op	114:19	0:0	6	==
water	114:22	0:0	6	PNG_COLOR_TYPE_RGB
stmts	115:6	115:43	5	
water	115:6	0:0	6	color_type
op	115:17	0:0	6	=
water	115:19	0:0	6	PNG_COLOR_TYPE_RGB_ALPHA
water	115:43	0:0	6	;
call	116:4	116:36	4	get_token
arg	116:14	116:24	5	alpha_file
water	116:14	0:0	6	alpha_file
arg	116:26	116:36	5	type_token
water	116:26	0:0	6	type_token
water	116:37	0:0	4	;
if	117:4	120:4	4	(type_token [ 0 ] != 'P')
cond	117:8	117:25	5	type_token [ 0 ] != 'P'
water	117:8	0:0	6	type_token
op	117:18	0:0	6	[
water	117:19	0:0	6	0
op	117:20	0:0	6	]
op	117:22	0:0	6	!=
water	117:25	0:0	6	'P'
stmts	118:4	120:4	5	
water	118:4	0:0	6	{
return	119:6	119:18	6	FALSE
water	119:13	0:0	7	FALSE
water	120:4	0:0	6	}
else	121:4	149:4	4
stmts	121:9	149:4	5	
if	121:9	149:4	6	(( type_token [ 1 ] == '2' ) || ( type_token [ 1 ] == '5' ))
cond	121:13	121:60	7	( type_token [ 1 ] == '2' ) || ( type_token [ 1 ] == '5' )
water	121:13	0:0	8	(
water	121:14	0:0	8	type_token
op	121:24	0:0	8	[
water	121:25	0:0	8	1
op	121:26	0:0	8	]
op	121:28	0:0	8	==
water	121:31	0:0	8	'2'
water	121:34	0:0	8	)
op	121:36	0:0	8	||
water	121:39	0:0	8	(
water	121:40	0:0	8	type_token
op	121:50	0:0	8	[
water	121:51	0:0	8	1
op	121:52	0:0	8	]
op	121:54	0:0	8	==
water	121:57	0:0	8	'5'
water	121:60	0:0	8	)
stmts	122:4	149:4	7	
water	122:4	0:0	8	{
water	123:6	0:0	8	alpha_raw
op	123:16	0:0	8	=
water	123:18	0:0	8	(
water	123:19	0:0	8	type_token
op	123:29	0:0	8	[
water	123:30	0:0	8	1
op	123:31	0:0	8	]
op	123:33	0:0	8	==
water	123:36	0:0	8	'5'
water	123:39	0:0	8	)
water	123:40	0:0	8	;
call	124:6	124:39	8	get_token
arg	124:16	124:26	9	alpha_file
water	124:16	0:0	10	alpha_file
arg	124:28	124:39	9	width_token
water	124:28	0:0	10	width_token
water	124:40	0:0	8	;
call	125:6	125:49	8	sscanf
arg	125:14	125:25	9	width_token
water	125:14	0:0	10	width_token
arg	125:27	125:32	9	"%lu"
water	125:27	0:0	10	"%lu"
arg	125:34	125:49	9	&ul_alpha_width
op	125:34	0:0	10	&
water	125:35	0:0	10	ul_alpha_width
water	125:50	0:0	8	;
water	126:6	0:0	8	alpha_width
op	126:17	0:0	8	=
water	126:18	0:0	8	(
water	126:19	0:0	8	png_uint_32
water	126:30	0:0	8	)
water	126:32	0:0	8	ul_alpha_width
water	126:46	0:0	8	;
if	127:6	128:20	8	(alpha_width != width)
cond	127:10	127:25	9	alpha_width != width
water	127:10	0:0	10	alpha_width
op	127:22	0:0	10	!=
water	127:25	0:0	10	width
stmts	128:8	128:20	9	
return	128:8	128:20	10	FALSE
water	128:15	0:0	11	FALSE
call	129:6	129:40	8	get_token
arg	129:16	129:26	9	alpha_file
water	129:16	0:0	10	alpha_file
arg	129:28	129:40	9	height_token
water	129:28	0:0	10	height_token
water	129:41	0:0	8	;
call	130:6	130:51	8	sscanf
arg	130:14	130:26	9	height_token
water	130:14	0:0	10	height_token
arg	130:28	130:33	9	"%lu"
water	130:28	0:0	10	"%lu"
arg	130:35	130:51	9	&ul_alpha_height
op	130:35	0:0	10	&
water	130:36	0:0	10	ul_alpha_height
water	130:52	0:0	8	;
water	131:6	0:0	8	alpha_height
op	131:19	0:0	8	=
water	131:21	0:0	8	(
water	131:22	0:0	8	png_uint_32
water	131:33	0:0	8	)
water	131:35	0:0	8	ul_alpha_height
water	131:50	0:0	8	;
if	132:6	133:20	8	(alpha_height != height)
cond	132:10	132:26	9	alpha_height != height
water	132:10	0:0	10	alpha_height
op	132:23	0:0	10	!=
water	132:26	0:0	10	height
stmts	133:8	133:20	9	
return	133:8	133:20	10	FALSE
water	133:15	0:0	11	FALSE
call	134:6	134:40	8	get_token
arg	134:16	134:26	9	alpha_file
water	134:16	0:0	10	alpha_file
arg	134:28	134:40	9	maxval_token
water	134:28	0:0	10	maxval_token
water	134:41	0:0	8	;
call	135:6	135:45	8	sscanf
arg	135:14	135:26	9	maxval_token
water	135:14	0:0	10	maxval_token
arg	135:28	135:33	9	"%lu"
water	135:28	0:0	10	"%lu"
arg	135:35	135:45	9	&ul_maxval
op	135:35	0:0	10	&
water	135:36	0:0	10	ul_maxval
water	135:46	0:0	8	;
water	136:6	0:0	8	maxval
op	136:13	0:0	8	=
water	136:15	0:0	8	(
water	136:16	0:0	8	png_uint_32
water	136:27	0:0	8	)
water	136:29	0:0	8	ul_maxval
water	136:38	0:0	8	;
if	137:6	138:23	8	(maxval <= 1)
cond	137:10	137:20	9	maxval <= 1
water	137:10	0:0	10	maxval
op	137:17	0:0	10	<=
water	137:20	0:0	10	1
stmts	138:8	138:23	9	
water	138:8	0:0	10	alpha_depth
op	138:20	0:0	10	=
water	138:22	0:0	10	1
water	138:23	0:0	10	;
else	139:6	140:23	8
stmts	139:11	140:23	9	
if	139:11	140:23	10	(maxval <= 3)
cond	139:15	139:25	11	maxval <= 3
water	139:15	0:0	12	maxval
op	139:22	0:0	12	<=
water	139:25	0:0	12	3
stmts	140:8	140:23	11	
water	140:8	0:0	12	alpha_depth
op	140:20	0:0	12	=
water	140:22	0:0	12	2
water	140:23	0:0	12	;
else	141:6	142:23	8
stmts	141:11	142:23	9	
if	141:11	142:23	10	(maxval <= 15)
cond	141:15	141:25	11	maxval <= 15
water	141:15	0:0	12	maxval
op	141:22	0:0	12	<=
water	141:25	0:0	12	15
stmts	142:8	142:23	11	
water	142:8	0:0	12	alpha_depth
op	142:20	0:0	12	=
water	142:22	0:0	12	4
water	142:23	0:0	12	;
else	143:6	144:23	8
stmts	143:11	144:23	9	
if	143:11	144:23	10	(maxval <= 255)
cond	143:15	143:25	11	maxval <= 255
water	143:15	0:0	12	maxval
op	143:22	0:0	12	<=
water	143:25	0:0	12	255
stmts	144:8	144:23	11	
water	144:8	0:0	12	alpha_depth
op	144:20	0:0	12	=
water	144:22	0:0	12	8
water	144:23	0:0	12	;
else	145:6	146:24	8
stmts	146:8	146:24	9	
water	146:8	0:0	10	alpha_depth
op	146:20	0:0	10	=
water	146:22	0:0	10	16
water	146:24	0:0	10	;
if	147:6	148:20	8	(alpha_depth != bit_depth)
cond	147:10	147:25	9	alpha_depth != bit_depth
water	147:10	0:0	10	alpha_depth
op	147:22	0:0	10	!=
water	147:25	0:0	10	bit_depth
stmts	148:8	148:20	9	
return	148:8	148:20	10	FALSE
water	148:15	0:0	11	FALSE
water	149:4	0:0	8	}
else	150:4	153:4	4
stmts	151:4	153:4	5	
water	151:4	0:0	6	{
return	152:6	152:18	6	FALSE
water	152:13	0:0	7	FALSE
water	153:4	0:0	6	}
water	154:2	0:0	4	}
if	156:2	157:16	2	(color_type == PNG_COLOR_TYPE_GRAY)
cond	156:6	156:20	3	color_type == PNG_COLOR_TYPE_GRAY
water	156:6	0:0	4	color_type
op	156:17	0:0	4	==
water	156:20	0:0	4	PNG_COLOR_TYPE_GRAY
stmts	157:4	157:16	3	
water	157:4	0:0	4	channels
op	157:13	0:0	4	=
water	157:15	0:0	4	1
water	157:16	0:0	4	;
else	158:2	159:16	2
stmts	158:7	159:16	3	
if	158:7	159:16	4	(color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
cond	158:11	158:25	5	color_type == PNG_COLOR_TYPE_GRAY_ALPHA
water	158:11	0:0	6	color_type
op	158:22	0:0	6	==
water	158:25	0:0	6	PNG_COLOR_TYPE_GRAY_ALPHA
stmts	159:4	159:16	5	
water	159:4	0:0	6	channels
op	159:13	0:0	6	=
water	159:15	0:0	6	2
water	159:16	0:0	6	;
else	160:2	161:16	2
stmts	160:7	161:16	3	
if	160:7	161:16	4	(color_type == PNG_COLOR_TYPE_RGB)
cond	160:11	160:25	5	color_type == PNG_COLOR_TYPE_RGB
water	160:11	0:0	6	color_type
op	160:22	0:0	6	==
water	160:25	0:0	6	PNG_COLOR_TYPE_RGB
stmts	161:4	161:16	5	
water	161:4	0:0	6	channels
op	161:13	0:0	6	=
water	161:15	0:0	6	3
water	161:16	0:0	6	;
else	162:2	163:16	2
stmts	162:7	163:16	3	
if	162:7	163:16	4	(color_type == PNG_COLOR_TYPE_RGB_ALPHA)
cond	162:11	162:25	5	color_type == PNG_COLOR_TYPE_RGB_ALPHA
water	162:11	0:0	6	color_type
op	162:22	0:0	6	==
water	162:25	0:0	6	PNG_COLOR_TYPE_RGB_ALPHA
stmts	163:4	163:16	5	
water	163:4	0:0	6	channels
op	163:13	0:0	6	=
water	163:15	0:0	6	4
water	163:16	0:0	6	;
else	164:2	165:16	2
stmts	165:4	165:16	3	
water	165:4	0:0	4	channels
op	165:13	0:0	4	=
water	165:15	0:0	4	0
water	165:16	0:0	4	;
water	166:2	0:0	2	alpha_present
op	166:16	0:0	2	=
water	166:18	0:0	2	(
water	166:19	0:0	2	channels
op	166:28	0:0	2	-
water	166:30	0:0	2	1
water	166:31	0:0	2	)
op	166:33	0:0	2	%
water	166:35	0:0	2	2
water	166:36	0:0	2	;
if	168:2	170:54	2	(packed_bitmap)
cond	168:6	168:6	3	packed_bitmap
water	168:6	0:0	4	packed_bitmap
stmts	170:4	170:54	3	
water	170:4	0:0	4	row_bytes
op	170:14	0:0	4	=
water	170:16	0:0	4	(
water	170:17	0:0	4	width
op	170:23	0:0	4	*
water	170:25	0:0	4	channels
op	170:34	0:0	4	*
water	170:36	0:0	4	bit_depth
op	170:46	0:0	4	+
water	170:48	0:0	4	7
water	170:49	0:0	4	)
op	170:51	0:0	4	/
water	170:53	0:0	4	8
water	170:54	0:0	4	;
else	171:2	174:61	2
stmts	174:4	174:61	3	
water	174:4	0:0	4	row_bytes
op	174:14	0:0	4	=
water	174:16	0:0	4	width
op	174:22	0:0	4	*
water	174:24	0:0	4	channels
op	174:33	0:0	4	*
water	174:35	0:0	4	(
water	174:36	0:0	4	(
water	174:37	0:0	4	bit_depth
op	174:47	0:0	4	<=
water	174:50	0:0	4	8
water	174:51	0:0	4	)
water	174:53	0:0	4	?
water	174:55	0:0	4	1
water	174:57	0:0	4	:
water	174:59	0:0	4	2
water	174:60	0:0	4	)
water	174:61	0:0	4	;
if	175:2	177:16	2	(( png_pixels = ( png_byte * )malloc (row_bytes * height * sizeof ( png_byte ) ) ) == NULL)
cond	175:6	176:57	3	( png_pixels = ( png_byte * )malloc (row_bytes * height * sizeof ( png_byte ) ) ) == NULL
water	175:6	0:0	4	(
water	175:7	0:0	4	png_pixels
op	175:18	0:0	4	=
water	175:20	0:0	4	(
water	175:21	0:0	4	png_byte
op	175:30	0:0	4	*
water	175:31	0:0	4	)
call	176:5	176:51	4	malloc
arg	176:13	176:51	5	row_bytes*height*sizeof(png_byte)
water	176:13	0:0	6	row_bytes
op	176:23	0:0	6	*
water	176:25	0:0	6	height
op	176:32	0:0	6	*
op	176:34	0:0	6	sizeof
water	176:41	0:0	6	(
water	176:42	0:0	6	png_byte
water	176:50	0:0	6	)
water	176:52	0:0	4	)
op	176:54	0:0	4	==
water	176:57	0:0	4	NULL
stmts	177:4	177:16	3	
return	177:4	177:16	4	FALSE
water	177:11	0:0	5	FALSE
water	179:2	0:0	2	pix_ptr
op	179:10	0:0	2	=
water	179:12	0:0	2	png_pixels
water	179:22	0:0	2	;
for	180:2	224:2	2	(row = 0 ;row < ( int ) height;row ++)
forinit	180:7	180:14	3	row = 0 ;
water	180:7	0:0	4	row
op	180:11	0:0	4	=
water	180:13	0:0	4	0
water	180:14	0:0	4	;
cond	180:16	180:28	3	row < ( int ) height
water	180:16	0:0	4	row
op	180:20	0:0	4	<
water	180:22	0:0	4	(
water	180:23	0:0	4	int
water	180:26	0:0	4	)
water	180:28	0:0	4	height
forexpr	180:36	180:39	3	row ++
water	180:36	0:0	4	row
op	180:39	0:0	4	++
stmts	181:2	224:2	3	
water	181:2	0:0	4	{
if	183:4	187:4	4	(packed_bitmap)
cond	183:8	183:8	5	packed_bitmap
water	183:8	0:0	6	packed_bitmap
stmts	183:23	187:4	5	
water	183:23	0:0	6	{
for	184:6	186:43	6	(i = 0 ;i < ( int ) row_bytes;i ++)
forinit	184:11	184:16	7	i = 0 ;
water	184:11	0:0	8	i
op	184:13	0:0	8	=
water	184:15	0:0	8	0
water	184:16	0:0	8	;
cond	184:18	184:28	7	i < ( int ) row_bytes
water	184:18	0:0	8	i
op	184:20	0:0	8	<
water	184:22	0:0	8	(
water	184:23	0:0	8	int
water	184:26	0:0	8	)
water	184:28	0:0	8	row_bytes
forexpr	184:39	184:40	7	i ++
water	184:39	0:0	8	i
op	184:40	0:0	8	++
stmts	186:8	186:43	7	
op	186:8	0:0	8	*
water	186:9	0:0	8	pix_ptr
op	186:16	0:0	8	++
op	186:19	0:0	8	=
call	186:21	186:42	8	get_data
arg	186:31	186:39	9	pnm_file
water	186:31	0:0	10	pnm_file
arg	186:41	186:42	9	8
water	186:41	0:0	10	8
water	186:43	0:0	8	;
water	187:4	0:0	6	}
else	187:6	223:4	4
stmts	189:4	223:4	5	
water	189:4	0:0	6	{
for	190:6	222:6	6	(col = 0 ;col < ( int ) width;col ++)
forinit	190:11	190:18	7	col = 0 ;
water	190:11	0:0	8	col
op	190:15	0:0	8	=
water	190:17	0:0	8	0
water	190:18	0:0	8	;
cond	190:20	190:32	7	col < ( int ) width
water	190:20	0:0	8	col
op	190:24	0:0	8	<
water	190:26	0:0	8	(
water	190:27	0:0	8	int
water	190:30	0:0	8	)
water	190:32	0:0	8	width
forexpr	190:39	190:42	7	col ++
water	190:39	0:0	8	col
op	190:42	0:0	8	++
stmts	191:6	222:6	7	
water	191:6	0:0	8	{
for	192:8	207:8	8	(i = 0 ;i < ( channels - alpha_present );i ++)
forinit	192:13	192:18	9	i = 0 ;
water	192:13	0:0	10	i
op	192:15	0:0	10	=
water	192:17	0:0	10	0
water	192:18	0:0	10	;
cond	192:20	192:49	9	i < ( channels - alpha_present )
water	192:20	0:0	10	i
op	192:22	0:0	10	<
water	192:24	0:0	10	(
water	192:25	0:0	10	channels
op	192:34	0:0	10	-
water	192:36	0:0	10	alpha_present
water	192:49	0:0	10	)
forexpr	192:52	192:53	9	i ++
water	192:52	0:0	10	i
op	192:53	0:0	10	++
stmts	193:8	207:8	9	
water	193:8	0:0	10	{
if	194:10	195:55	10	(raw)
cond	194:14	194:14	11	raw
water	194:14	0:0	12	raw
stmts	195:12	195:55	11	
op	195:12	0:0	12	*
water	195:13	0:0	12	pix_ptr
op	195:20	0:0	12	++
op	195:23	0:0	12	=
call	195:25	195:54	12	get_data
arg	195:35	195:43	13	pnm_file
water	195:35	0:0	14	pnm_file
arg	195:45	195:54	13	bit_depth
water	195:45	0:0	14	bit_depth
water	195:55	0:0	12	;
else	196:10	198:58	10
stmts	197:12	198:58	11	
if	197:12	198:58	12	(bit_depth <= 8)
cond	197:16	197:29	13	bit_depth <= 8
water	197:16	0:0	14	bit_depth
op	197:26	0:0	14	<=
water	197:29	0:0	14	8
stmts	198:14	198:58	13	
op	198:14	0:0	14	*
water	198:15	0:0	14	pix_ptr
op	198:22	0:0	14	++
op	198:25	0:0	14	=
call	198:27	198:57	14	get_value
arg	198:38	198:46	15	pnm_file
water	198:38	0:0	16	pnm_file
arg	198:48	198:57	15	bit_depth
water	198:48	0:0	16	bit_depth
water	198:58	0:0	14	;
else	199:12	206:12	10
stmts	200:12	206:12	11	
water	200:12	0:0	12	{
water	201:14	0:0	12	tmp16
op	201:20	0:0	12	=
call	201:22	201:52	12	get_value
arg	201:33	201:41	13	pnm_file
water	201:33	0:0	14	pnm_file
arg	201:43	201:52	13	bit_depth
water	201:43	0:0	14	bit_depth
water	201:53	0:0	12	;
op	202:14	0:0	12	*
water	202:15	0:0	12	pix_ptr
op	202:23	0:0	12	=
call	202:25	202:56	12	(png_byte)
arg	202:37	202:56	13	(tmp16>>8)&0xFF
water	202:37	0:0	14	(
water	202:38	0:0	14	tmp16
op	202:44	0:0	14	>>
water	202:47	0:0	14	8
water	202:48	0:0	14	)
op	202:50	0:0	14	&
water	202:52	0:0	14	0
water	202:53	0:0	14	xFF
water	202:57	0:0	12	;
water	203:14	0:0	12	pix_ptr
op	203:21	0:0	12	++
water	203:23	0:0	12	;
op	204:14	0:0	12	*
water	204:15	0:0	12	pix_ptr
op	204:23	0:0	12	=
call	204:25	204:49	12	(png_byte)
arg	204:37	204:49	13	tmp16&0xFF
water	204:37	0:0	14	tmp16
op	204:43	0:0	14	&
water	204:45	0:0	14	0
water	204:46	0:0	14	xFF
water	204:50	0:0	12	;
water	205:14	0:0	12	pix_ptr
op	205:21	0:0	12	++
water	205:23	0:0	12	;
water	206:12	0:0	12	}
water	207:8	0:0	10	}
if	208:8	221:8	8	(alpha)
cond	208:12	208:12	9	alpha
water	208:12	0:0	10	alpha
stmts	209:8	221:8	9	
water	209:8	0:0	10	{
if	210:10	211:59	10	(alpha_raw)
cond	210:14	210:14	11	alpha_raw
water	210:14	0:0	12	alpha_raw
stmts	211:12	211:59	11	
op	211:12	0:0	12	*
water	211:13	0:0	12	pix_ptr
op	211:20	0:0	12	++
op	211:23	0:0	12	=
call	211:25	211:58	12	get_data
arg	211:35	211:45	13	alpha_file
water	211:35	0:0	14	alpha_file
arg	211:47	211:58	13	alpha_depth
water	211:47	0:0	14	alpha_depth
water	211:59	0:0	12	;
else	212:10	214:60	10
stmts	213:12	214:60	11	
if	213:12	214:60	12	(alpha_depth <= 8)
cond	213:16	213:31	13	alpha_depth <= 8
water	213:16	0:0	14	alpha_depth
op	213:28	0:0	14	<=
water	213:31	0:0	14	8
stmts	214:14	214:60	13	
op	214:14	0:0	14	*
water	214:15	0:0	14	pix_ptr
op	214:22	0:0	14	++
op	214:25	0:0	14	=
call	214:27	214:59	14	get_value
arg	214:38	214:48	15	alpha_file
water	214:38	0:0	16	alpha_file
arg	214:50	214:59	15	bit_depth
water	214:50	0:0	16	bit_depth
water	214:60	0:0	14	;
else	215:12	220:12	10
stmts	216:12	220:12	11	
water	216:12	0:0	12	{
water	217:14	0:0	12	tmp16
op	217:20	0:0	12	=
call	217:22	217:54	12	get_value
arg	217:33	217:43	13	alpha_file
water	217:33	0:0	14	alpha_file
arg	217:45	217:54	13	bit_depth
water	217:45	0:0	14	bit_depth
water	217:55	0:0	12	;
op	218:14	0:0	12	*
water	218:15	0:0	12	pix_ptr
op	218:22	0:0	12	++
op	218:25	0:0	12	=
call	218:27	218:58	12	(png_byte)
arg	218:39	218:58	13	(tmp16>>8)&0xFF
water	218:39	0:0	14	(
water	218:40	0:0	14	tmp16
op	218:46	0:0	14	>>
water	218:49	0:0	14	8
water	218:50	0:0	14	)
op	218:52	0:0	14	&
water	218:54	0:0	14	0
water	218:55	0:0	14	xFF
water	218:59	0:0	12	;
op	219:14	0:0	12	*
water	219:15	0:0	12	pix_ptr
op	219:22	0:0	12	++
op	219:25	0:0	12	=
call	219:27	219:51	12	(png_byte)
arg	219:39	219:51	13	tmp16&0xFF
water	219:39	0:0	14	tmp16
op	219:45	0:0	14	&
water	219:47	0:0	14	0
water	219:48	0:0	14	xFF
water	219:52	0:0	12	;
water	220:12	0:0	12	}
water	221:8	0:0	10	}
water	222:6	0:0	8	}
water	223:4	0:0	6	}
water	224:2	0:0	4	}
water	226:2	0:0	2	png_ptr
op	226:10	0:0	2	=
call	226:12	227:10	2	png_create_write_struct
arg	226:37	226:61	3	png_get_libpng_ver(NULL)
call	226:37	226:60	4	png_get_libpng_ver
arg	226:56	226:60	5	NULL
water	226:56	0:0	6	NULL
arg	226:63	226:67	3	NULL
water	226:63	0:0	4	NULL
arg	226:69	226:73	3	NULL
water	226:69	0:0	4	NULL
arg	227:6	227:10	3	NULL
water	227:6	0:0	4	NULL
water	227:11	0:0	2	;
if	228:2	231:2	2	(! png_ptr)
cond	228:6	228:7	3	! png_ptr
op	228:6	0:0	4	!
water	228:7	0:0	4	png_ptr
stmts	229:2	231:2	3	
water	229:2	0:0	4	{
return	230:4	230:16	4	FALSE
water	230:11	0:0	5	FALSE
water	231:2	0:0	4	}
water	232:2	0:0	2	info_ptr
op	232:11	0:0	2	=
call	232:13	232:44	2	png_create_info_struct
arg	232:37	232:44	3	png_ptr
water	232:37	0:0	4	png_ptr
water	232:45	0:0	2	;
if	233:2	237:2	2	(! info_ptr)
cond	233:6	233:7	3	! info_ptr
op	233:6	0:0	4	!
water	233:7	0:0	4	info_ptr
stmts	234:2	237:2	3	
water	234:2	0:0	4	{
call	235:4	235:57	4	png_destroy_write_struct
arg	235:30	235:38	5	&png_ptr
op	235:30	0:0	6	&
water	235:31	0:0	6	png_ptr
arg	235:40	235:57	5	(png_infopp)NULL
water	235:40	0:0	6	(
water	235:41	0:0	6	png_infopp
water	235:51	0:0	6	)
water	235:53	0:0	6	NULL
water	235:58	0:0	4	;
return	236:4	236:16	4	FALSE
water	236:11	0:0	5	FALSE
water	237:2	0:0	4	}
if	239:2	243:2	2	(packed_bitmap == TRUE)
cond	239:6	239:23	3	packed_bitmap == TRUE
water	239:6	0:0	4	packed_bitmap
op	239:20	0:0	4	==
water	239:23	0:0	4	TRUE
stmts	240:2	243:2	3	
water	240:2	0:0	4	{
call	241:4	241:28	4	png_set_packing
arg	241:21	241:28	5	png_ptr
water	241:21	0:0	6	png_ptr
water	241:29	0:0	4	;
call	242:4	242:32	4	png_set_invert_mono
arg	242:25	242:32	5	png_ptr
water	242:25	0:0	6	png_ptr
water	242:33	0:0	4	;
water	243:2	0:0	4	}
if	246:2	250:2	2	(setjmp (png_jmpbuf (png_ptr ) ))
cond	246:6	246:33	3	setjmp (png_jmpbuf (png_ptr ) )
call	246:6	246:33	4	setjmp
arg	246:14	246:33	5	png_jmpbuf(png_ptr)
call	246:14	246:32	6	png_jmpbuf
arg	246:25	246:32	7	png_ptr
water	246:25	0:0	8	png_ptr
stmts	247:2	250:2	3	
water	247:2	0:0	4	{
call	248:4	248:57	4	png_destroy_write_struct
arg	248:30	248:38	5	&png_ptr
op	248:30	0:0	6	&
water	248:31	0:0	6	png_ptr
arg	248:40	248:57	5	(png_infopp)NULL
water	248:40	0:0	6	(
water	248:41	0:0	6	png_infopp
water	248:51	0:0	6	)
water	248:53	0:0	6	NULL
water	248:58	0:0	4	;
return	249:4	249:16	4	FALSE
water	249:11	0:0	5	FALSE
water	250:2	0:0	4	}
call	252:2	252:32	2	png_init_io
arg	252:15	252:22	3	png_ptr
water	252:15	0:0	4	png_ptr
arg	252:24	252:32	3	png_file
water	252:24	0:0	4	png_file
water	252:33	0:0	2	;
call	254:2	256:51	2	png_set_IHDR
arg	254:16	254:23	3	png_ptr
water	254:16	0:0	4	png_ptr
arg	254:25	254:33	3	info_ptr
water	254:25	0:0	4	info_ptr
arg	254:35	254:40	3	width
water	254:35	0:0	4	width
arg	254:42	254:48	3	height
water	254:42	0:0	4	height
arg	254:50	254:59	3	bit_depth
water	254:50	0:0	4	bit_depth
arg	254:61	254:71	3	color_type
water	254:61	0:0	4	color_type
arg	255:4	255:59	3	(!interlace)?PNG_INTERLACE_NONE:PNG_INTERLACE_ADAM7
water	255:4	0:0	4	(
op	255:5	0:0	4	!
water	255:6	0:0	4	interlace
water	255:15	0:0	4	)
water	255:17	0:0	4	?
water	255:19	0:0	4	PNG_INTERLACE_NONE
water	255:38	0:0	4	:
water	255:40	0:0	4	PNG_INTERLACE_ADAM7
arg	256:4	256:29	3	PNG_COMPRESSION_TYPE_BASE
water	256:4	0:0	4	PNG_COMPRESSION_TYPE_BASE
arg	256:31	256:51	3	PNG_FILTER_TYPE_BASE
water	256:31	0:0	4	PNG_FILTER_TYPE_BASE
water	256:52	0:0	2	;
call	258:2	258:35	2	png_write_info
arg	258:18	258:25	3	png_ptr
water	258:18	0:0	4	png_ptr
arg	258:27	258:35	3	info_ptr
water	258:27	0:0	4	info_ptr
water	258:36	0:0	2	;
if	260:2	268:2	2	(row_pointers == ( unsigned char * * ) NULL)
cond	260:6	260:40	3	row_pointers == ( unsigned char * * ) NULL
water	260:6	0:0	4	row_pointers
op	260:19	0:0	4	==
water	260:22	0:0	4	(
water	260:23	0:0	4	unsigned
water	260:32	0:0	4	char
op	260:36	0:0	4	*
op	260:37	0:0	4	*
water	260:38	0:0	4	)
water	260:40	0:0	4	NULL
stmts	261:2	268:2	3	
water	261:2	0:0	4	{
if	262:4	267:4	4	(( row_pointers = ( png_byte * * )malloc (height * sizeof ( png_bytep ) ) ) == NULL)
cond	262:8	263:49	5	( row_pointers = ( png_byte * * )malloc (height * sizeof ( png_bytep ) ) ) == NULL
water	262:8	0:0	6	(
water	262:9	0:0	6	row_pointers
op	262:22	0:0	6	=
water	262:24	0:0	6	(
water	262:25	0:0	6	png_byte
op	262:34	0:0	6	*
op	262:35	0:0	6	*
water	262:36	0:0	6	)
call	263:8	263:43	6	malloc
arg	263:16	263:43	7	height*sizeof(png_bytep)
water	263:16	0:0	8	height
op	263:23	0:0	8	*
op	263:25	0:0	8	sizeof
water	263:32	0:0	8	(
water	263:33	0:0	8	png_bytep
water	263:42	0:0	8	)
water	263:44	0:0	6	)
op	263:46	0:0	6	==
water	263:49	0:0	6	NULL
stmts	264:4	267:4	5	
water	264:4	0:0	6	{
call	265:6	265:59	6	png_destroy_write_struct
arg	265:32	265:40	7	&png_ptr
op	265:32	0:0	8	&
water	265:33	0:0	8	png_ptr
arg	265:42	265:59	7	(png_infopp)NULL
water	265:42	0:0	8	(
water	265:43	0:0	8	png_infopp
water	265:53	0:0	8	)
water	265:55	0:0	8	NULL
water	265:60	0:0	6	;
return	266:6	266:18	6	FALSE
water	266:13	0:0	7	FALSE
water	267:4	0:0	6	}
water	268:2	0:0	4	}
for	270:2	271:48	2	(i = 0 ;i < ( int ) height;i ++)
forinit	270:7	270:12	3	i = 0 ;
water	270:7	0:0	4	i
op	270:9	0:0	4	=
water	270:11	0:0	4	0
water	270:12	0:0	4	;
cond	270:14	270:24	3	i < ( int ) height
water	270:14	0:0	4	i
op	270:16	0:0	4	<
water	270:18	0:0	4	(
water	270:19	0:0	4	int
water	270:22	0:0	4	)
water	270:24	0:0	4	height
forexpr	270:32	270:33	3	i ++
water	270:32	0:0	4	i
op	270:33	0:0	4	++
stmts	271:4	271:48	3	
water	271:4	0:0	4	row_pointers
op	271:16	0:0	4	[
water	271:17	0:0	4	i
op	271:18	0:0	4	]
op	271:20	0:0	4	=
water	271:22	0:0	4	png_pixels
op	271:33	0:0	4	+
water	271:35	0:0	4	i
op	271:37	0:0	4	*
water	271:39	0:0	4	row_bytes
water	271:48	0:0	4	;
call	273:2	273:40	2	png_write_image
arg	273:19	273:26	3	png_ptr
water	273:19	0:0	4	png_ptr
arg	273:28	273:40	3	row_pointers
water	273:28	0:0	4	row_pointers
water	273:41	0:0	2	;
call	275:2	275:34	2	png_write_end
arg	275:17	275:24	3	png_ptr
water	275:17	0:0	4	png_ptr
arg	275:26	275:34	3	info_ptr
water	275:26	0:0	4	info_ptr
water	275:35	0:0	2	;
call	277:2	277:55	2	png_destroy_write_struct
arg	277:28	277:36	3	&png_ptr
op	277:28	0:0	4	&
water	277:29	0:0	4	png_ptr
arg	277:38	277:55	3	(png_infopp)NULL
water	277:38	0:0	4	(
water	277:39	0:0	4	png_infopp
water	277:49	0:0	4	)
water	277:51	0:0	4	NULL
water	277:56	0:0	2	;
if	278:2	279:23	2	(row_pointers != ( unsigned char * * ) NULL)
cond	278:6	278:40	3	row_pointers != ( unsigned char * * ) NULL
water	278:6	0:0	4	row_pointers
op	278:19	0:0	4	!=
water	278:22	0:0	4	(
water	278:23	0:0	4	unsigned
water	278:32	0:0	4	char
op	278:36	0:0	4	*
op	278:37	0:0	4	*
water	278:38	0:0	4	)
water	278:40	0:0	4	NULL
stmts	279:4	279:23	3	
call	279:4	279:22	4	free
arg	279:10	279:22	5	row_pointers
water	279:10	0:0	6	row_pointers
water	279:23	0:0	4	;
if	280:2	281:21	2	(png_pixels != ( unsigned char * ) NULL)
cond	280:6	280:37	3	png_pixels != ( unsigned char * ) NULL
water	280:6	0:0	4	png_pixels
op	280:17	0:0	4	!=
water	280:20	0:0	4	(
water	280:21	0:0	4	unsigned
water	280:30	0:0	4	char
op	280:34	0:0	4	*
water	280:35	0:0	4	)
water	280:37	0:0	4	NULL
stmts	281:4	281:21	3	
call	281:4	281:20	4	free
arg	281:10	281:20	5	png_pixels
water	281:10	0:0	6	png_pixels
water	281:21	0:0	4	;
return	282:2	282:13	2	TRUE
water	282:9	0:0	3	TRUE
