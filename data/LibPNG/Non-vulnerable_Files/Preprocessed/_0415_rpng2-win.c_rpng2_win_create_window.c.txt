func	2:0	118:0	0	static int	rpng2_win_create_window
stmnts	0:0	117:12	1	
decl	4:4	4:36	2	uch	bg_red
op	4:17	0:0	2	=
water	4:19	0:0	2	rpng2_info
op	4:29	0:0	2	.
water	4:30	0:0	2	bg_red
decl	5:4	5:38	2	uch	bg_green
op	5:17	0:0	2	=
water	5:19	0:0	2	rpng2_info
op	5:29	0:0	2	.
water	5:30	0:0	2	bg_green
decl	6:4	6:37	2	uch	bg_blue
op	6:17	0:0	2	=
water	6:19	0:0	2	rpng2_info
op	6:29	0:0	2	.
water	6:30	0:0	2	bg_blue
decl	7:4	7:13	2	uch	*dest
decl	8:4	8:33	2	int	extra_width
water	8:19	0:0	2	,
decl	8:4	8:33	2	int	extra_height
decl	9:4	9:12	2	ulg	i
water	9:9	0:0	2	,
decl	9:4	9:12	2	ulg	j
decl	10:4	10:23	2	WNDCLASSEX	wndclass
decl	11:4	11:13	2	RECT	rect
water	16:4	0:0	2	wimage_rowbytes
op	16:20	0:0	2	=
water	16:22	0:0	2	(
water	16:23	0:0	2	(
water	16:24	0:0	2	3
op	16:25	0:0	2	*
water	16:26	0:0	2	rpng2_info
op	16:36	0:0	2	.
water	16:37	0:0	2	width
op	16:43	0:0	2	+
water	16:45	0:0	2	3
water	16:46	0:0	2	L
water	16:47	0:0	2	)
op	16:49	0:0	2	>>
water	16:52	0:0	2	2
water	16:53	0:0	2	)
op	16:55	0:0	2	<<
water	16:58	0:0	2	2
water	16:59	0:0	2	;
if	17:4	21:4	2	(! ( dib = ( uch * )malloc (sizeof ( BITMAPINFOHEADER ) + wimage_rowbytes * rpng2_info . height ) ))
cond	17:8	18:64	3	! ( dib = ( uch * )malloc (sizeof ( BITMAPINFOHEADER ) + wimage_rowbytes * rpng2_info . height ) )
op	17:8	0:0	4	!
water	17:9	0:0	4	(
water	17:10	0:0	4	dib
op	17:14	0:0	4	=
water	17:16	0:0	4	(
water	17:17	0:0	4	uch
op	17:21	0:0	4	*
water	17:22	0:0	4	)
call	17:23	18:63	4	malloc
arg	17:30	18:63	5	sizeof(BITMAPINFOHEADER)+wimage_rowbytes*rpng2_info.height
op	17:30	0:0	6	sizeof
water	17:36	0:0	6	(
water	17:37	0:0	6	BITMAPINFOHEADER
water	17:53	0:0	6	)
op	17:55	0:0	6	+
water	18:30	0:0	6	wimage_rowbytes
op	18:45	0:0	6	*
water	18:46	0:0	6	rpng2_info
op	18:56	0:0	6	.
water	18:57	0:0	6	height
water	18:64	0:0	4	)
stmts	19:4	21:4	3	
water	19:4	0:0	4	{
return	20:8	20:16	4	4
water	20:15	0:0	5	4
water	21:4	0:0	4	}
call	28:4	28:43	2	memset
arg	28:11	28:14	3	dib
water	28:11	0:0	4	dib
arg	28:16	28:17	3	0
water	28:16	0:0	4	0
arg	28:19	28:43	3	sizeof(BITMAPINFOHEADER)
op	28:19	0:0	4	sizeof
water	28:25	0:0	4	(
water	28:26	0:0	4	BITMAPINFOHEADER
water	28:42	0:0	4	)
water	28:44	0:0	2	;
water	29:4	0:0	2	bmih
op	29:9	0:0	2	=
water	29:11	0:0	2	(
water	29:12	0:0	2	BITMAPINFOHEADER
op	29:29	0:0	2	*
water	29:30	0:0	2	)
water	29:31	0:0	2	dib
water	29:34	0:0	2	;
water	30:4	0:0	2	bmih
op	30:8	0:0	2	->
water	30:10	0:0	2	biSize
op	30:17	0:0	2	=
op	30:19	0:0	2	sizeof
water	30:25	0:0	2	(
water	30:26	0:0	2	BITMAPINFOHEADER
water	30:42	0:0	2	)
water	30:43	0:0	2	;
water	31:4	0:0	2	bmih
op	31:8	0:0	2	->
water	31:10	0:0	2	biWidth
op	31:18	0:0	2	=
water	31:20	0:0	2	rpng2_info
op	31:30	0:0	2	.
water	31:31	0:0	2	width
water	31:36	0:0	2	;
water	32:4	0:0	2	bmih
op	32:8	0:0	2	->
water	32:10	0:0	2	biHeight
op	32:19	0:0	2	=
op	32:21	0:0	2	-
water	32:22	0:0	2	(
water	32:23	0:0	2	(
water	32:24	0:0	2	long
water	32:28	0:0	2	)
water	32:29	0:0	2	rpng2_info
op	32:39	0:0	2	.
water	32:40	0:0	2	height
water	32:46	0:0	2	)
water	32:47	0:0	2	;
water	33:4	0:0	2	bmih
op	33:8	0:0	2	->
water	33:10	0:0	2	biPlanes
op	33:19	0:0	2	=
water	33:21	0:0	2	1
water	33:22	0:0	2	;
water	34:4	0:0	2	bmih
op	34:8	0:0	2	->
water	34:10	0:0	2	biBitCount
op	34:21	0:0	2	=
water	34:23	0:0	2	24
water	34:25	0:0	2	;
water	35:4	0:0	2	bmih
op	35:8	0:0	2	->
water	35:10	0:0	2	biCompression
op	35:24	0:0	2	=
water	35:26	0:0	2	0
water	35:27	0:0	2	;
water	36:4	0:0	2	wimage_data
op	36:16	0:0	2	=
water	36:18	0:0	2	dib
op	36:22	0:0	2	+
op	36:24	0:0	2	sizeof
water	36:30	0:0	2	(
water	36:31	0:0	2	BITMAPINFOHEADER
water	36:47	0:0	2	)
water	36:48	0:0	2	;
if	42:4	44:4	2	(bg_image)
cond	42:8	42:8	3	bg_image
water	42:8	0:0	4	bg_image
stmts	42:18	44:4	3	
water	42:18	0:0	4	{
call	43:8	43:64	4	memset
arg	43:15	43:26	5	wimage_data
water	43:15	0:0	6	wimage_data
arg	43:28	43:29	5	0
water	43:28	0:0	6	0
arg	43:31	43:64	5	wimage_rowbytes*rpng2_info.height
water	43:31	0:0	6	wimage_rowbytes
op	43:46	0:0	6	*
water	43:47	0:0	6	rpng2_info
op	43:57	0:0	6	.
water	43:58	0:0	6	height
water	43:65	0:0	4	;
water	44:4	0:0	4	}
else	44:6	53:4	2
stmts	44:11	53:4	3	
water	44:11	0:0	4	{
for	45:8	52:8	4	(j = 0 ;j < rpng2_info . height;++ j)
forinit	45:13	45:18	5	j = 0 ;
water	45:13	0:0	6	j
op	45:15	0:0	6	=
water	45:17	0:0	6	0
water	45:18	0:0	6	;
cond	45:21	45:36	5	j < rpng2_info . height
water	45:21	0:0	6	j
op	45:23	0:0	6	<
water	45:25	0:0	6	rpng2_info
op	45:35	0:0	6	.
water	45:36	0:0	6	height
forexpr	45:45	45:47	5	++ j
op	45:45	0:0	6	++
water	45:47	0:0	6	j
stmts	45:50	52:8	5	
water	45:50	0:0	6	{
water	46:12	0:0	6	dest
op	46:17	0:0	6	=
water	46:19	0:0	6	wimage_data
op	46:31	0:0	6	+
water	46:33	0:0	6	j
op	46:34	0:0	6	*
water	46:35	0:0	6	wimage_rowbytes
water	46:50	0:0	6	;
for	47:12	51:12	6	(i = rpng2_info . width ;i > 0;-- i)
forinit	47:17	47:37	7	i = rpng2_info . width ;
water	47:17	0:0	8	i
op	47:19	0:0	8	=
water	47:21	0:0	8	rpng2_info
op	47:31	0:0	8	.
water	47:32	0:0	8	width
water	47:37	0:0	8	;
cond	47:40	47:44	7	i > 0
water	47:40	0:0	8	i
op	47:42	0:0	8	>
water	47:44	0:0	8	0
forexpr	47:48	47:50	7	-- i
op	47:48	0:0	8	--
water	47:50	0:0	8	i
stmts	47:53	51:12	7	
water	47:53	0:0	8	{
op	48:16	0:0	8	*
water	48:17	0:0	8	dest
op	48:21	0:0	8	++
op	48:24	0:0	8	=
water	48:26	0:0	8	bg_blue
water	48:33	0:0	8	;
op	49:16	0:0	8	*
water	49:17	0:0	8	dest
op	49:21	0:0	8	++
op	49:24	0:0	8	=
water	49:26	0:0	8	bg_green
water	49:34	0:0	8	;
op	50:16	0:0	8	*
water	50:17	0:0	8	dest
op	50:21	0:0	8	++
op	50:24	0:0	8	=
water	50:26	0:0	8	bg_red
water	50:32	0:0	8	;
water	51:12	0:0	8	}
water	52:8	0:0	6	}
water	53:4	0:0	4	}
call	57:4	57:41	2	memset
arg	57:11	57:20	3	&wndclass
op	57:11	0:0	4	&
water	57:12	0:0	4	wndclass
arg	57:22	57:23	3	0
water	57:22	0:0	4	0
arg	57:25	57:41	3	sizeof(wndclass)
op	57:25	0:0	4	sizeof
water	57:31	0:0	4	(
water	57:32	0:0	4	wndclass
water	57:40	0:0	4	)
water	57:42	0:0	2	;
water	58:4	0:0	2	wndclass
op	58:12	0:0	2	.
water	58:13	0:0	2	cbSize
op	58:20	0:0	2	=
op	58:22	0:0	2	sizeof
water	58:28	0:0	2	(
water	58:29	0:0	2	wndclass
water	58:37	0:0	2	)
water	58:38	0:0	2	;
water	59:4	0:0	2	wndclass
op	59:12	0:0	2	.
water	59:13	0:0	2	style
op	59:19	0:0	2	=
water	59:21	0:0	2	CS_HREDRAW
op	59:32	0:0	2	|
water	59:34	0:0	2	CS_VREDRAW
water	59:44	0:0	2	;
water	60:4	0:0	2	wndclass
op	60:12	0:0	2	.
water	60:13	0:0	2	lpfnWndProc
op	60:25	0:0	2	=
water	60:27	0:0	2	rpng2_win_wndproc
water	60:44	0:0	2	;
water	61:4	0:0	2	wndclass
op	61:12	0:0	2	.
water	61:13	0:0	2	hInstance
op	61:23	0:0	2	=
water	61:25	0:0	2	global_hInst
water	61:37	0:0	2	;
water	62:4	0:0	2	wndclass
op	62:12	0:0	2	.
water	62:13	0:0	2	hIcon
op	62:19	0:0	2	=
call	62:21	62:51	2	LoadIcon
arg	62:30	62:34	3	NULL
water	62:30	0:0	4	NULL
arg	62:36	62:51	3	IDI_APPLICATION
water	62:36	0:0	4	IDI_APPLICATION
water	62:52	0:0	2	;
water	63:4	0:0	2	wndclass
op	63:12	0:0	2	.
water	63:13	0:0	2	hCursor
op	63:21	0:0	2	=
call	63:23	63:49	2	LoadCursor
arg	63:34	63:38	3	NULL
water	63:34	0:0	4	NULL
arg	63:40	63:49	3	IDC_ARROW
water	63:40	0:0	4	IDC_ARROW
water	63:50	0:0	2	;
water	64:4	0:0	2	wndclass
op	64:12	0:0	2	.
water	64:13	0:0	2	hbrBackground
op	64:27	0:0	2	=
water	64:29	0:0	2	(
water	64:30	0:0	2	HBRUSH
water	64:36	0:0	2	)
call	64:37	64:64	2	GetStockObject
arg	64:52	64:64	3	DKGRAY_BRUSH
water	64:52	0:0	4	DKGRAY_BRUSH
water	64:65	0:0	2	;
water	65:4	0:0	2	wndclass
op	65:12	0:0	2	.
water	65:13	0:0	2	lpszMenuName
op	65:26	0:0	2	=
water	65:28	0:0	2	NULL
water	65:32	0:0	2	;
water	66:4	0:0	2	wndclass
op	66:12	0:0	2	.
water	66:13	0:0	2	lpszClassName
op	66:27	0:0	2	=
water	66:29	0:0	2	progname
water	66:37	0:0	2	;
water	67:4	0:0	2	wndclass
op	67:12	0:0	2	.
water	67:13	0:0	2	hIconSm
op	67:21	0:0	2	=
call	67:23	67:53	2	LoadIcon
arg	67:32	67:36	3	NULL
water	67:32	0:0	4	NULL
arg	67:38	67:53	3	IDI_APPLICATION
water	67:38	0:0	4	IDI_APPLICATION
water	67:54	0:0	2	;
call	68:4	68:29	2	RegisterClassEx
arg	68:20	68:29	3	&wndclass
op	68:20	0:0	4	&
water	68:21	0:0	4	wndclass
water	68:30	0:0	2	;
water	72:4	0:0	2	extra_width
op	72:17	0:0	2	=
water	72:19	0:0	2	2
op	72:20	0:0	2	*
water	72:21	0:0	2	(
call	72:22	72:50	2	GetSystemMetrics
arg	72:39	72:50	3	SM_CXBORDER
water	72:39	0:0	4	SM_CXBORDER
op	72:52	0:0	2	+
call	73:22	73:52	2	GetSystemMetrics
arg	73:39	73:52	3	SM_CXDLGFRAME
water	73:39	0:0	4	SM_CXDLGFRAME
water	73:53	0:0	2	)
water	73:54	0:0	2	;
water	74:4	0:0	2	extra_height
op	74:17	0:0	2	=
water	74:19	0:0	2	2
op	74:20	0:0	2	*
water	74:21	0:0	2	(
call	74:22	74:50	2	GetSystemMetrics
arg	74:39	74:50	3	SM_CYBORDER
water	74:39	0:0	4	SM_CYBORDER
op	74:52	0:0	2	+
call	75:22	75:52	2	GetSystemMetrics
arg	75:39	75:52	3	SM_CYDLGFRAME
water	75:39	0:0	4	SM_CYDLGFRAME
water	75:53	0:0	2	)
op	75:55	0:0	2	+
call	76:22	76:51	2	GetSystemMetrics
arg	76:39	76:51	3	SM_CYCAPTION
water	76:39	0:0	4	SM_CYCAPTION
water	76:52	0:0	2	;
water	77:4	0:0	2	global_hwnd
op	77:16	0:0	2	=
call	77:18	79:68	2	CreateWindow
arg	77:31	77:39	3	progname
water	77:31	0:0	4	progname
arg	77:41	77:49	3	titlebar
water	77:41	0:0	4	titlebar
arg	77:51	77:70	3	WS_OVERLAPPEDWINDOW
water	77:51	0:0	4	WS_OVERLAPPEDWINDOW
arg	78:6	78:19	3	CW_USEDEFAULT
water	78:6	0:0	4	CW_USEDEFAULT
arg	78:21	78:34	3	CW_USEDEFAULT
water	78:21	0:0	4	CW_USEDEFAULT
arg	78:36	78:64	3	rpng2_info.width+extra_width
water	78:36	0:0	4	rpng2_info
op	78:46	0:0	4	.
water	78:47	0:0	4	width
op	78:52	0:0	4	+
water	78:53	0:0	4	extra_width
arg	79:6	79:36	3	rpng2_info.height+extra_height
water	79:6	0:0	4	rpng2_info
op	79:16	0:0	4	.
water	79:17	0:0	4	height
op	79:23	0:0	4	+
water	79:24	0:0	4	extra_height
arg	79:38	79:42	3	NULL
water	79:38	0:0	4	NULL
arg	79:44	79:48	3	NULL
water	79:44	0:0	4	NULL
arg	79:50	79:62	3	global_hInst
water	79:50	0:0	4	global_hInst
arg	79:64	79:68	3	NULL
water	79:64	0:0	4	NULL
water	79:69	0:0	2	;
call	80:4	80:43	2	ShowWindow
arg	80:15	80:26	3	global_hwnd
water	80:15	0:0	4	global_hwnd
arg	80:28	80:43	3	global_showmode
water	80:28	0:0	4	global_showmode
water	80:44	0:0	2	;
call	81:4	81:28	2	UpdateWindow
arg	81:17	81:28	3	global_hwnd
water	81:17	0:0	4	global_hwnd
water	81:29	0:0	2	;
if	86:4	100:4	2	(bg_image)
cond	86:8	86:8	3	bg_image
water	86:8	0:0	4	bg_image
stmts	86:18	100:4	3	
water	86:18	0:0	4	{
water	87:8	0:0	4	static
water	87:15	0:0	4	const
water	87:21	0:0	4	char
op	87:26	0:0	4	*
water	87:27	0:0	4	msg
op	87:31	0:0	4	=
water	87:33	0:0	4	"Computing background image..."
water	87:64	0:0	4	;
decl	88:8	88:35	4	int	x
water	88:13	0:0	4	,
decl	88:8	88:35	4	int	y
water	88:16	0:0	4	,
decl	88:8	88:35	4	int	len
op	88:22	0:0	4	=
call	88:24	88:34	5	strlen
arg	88:31	88:34	6	msg
water	88:31	0:0	7	msg
decl	89:8	89:36	4	HDC	hdc
op	89:16	0:0	4	=
call	89:18	89:35	5	GetDC
arg	89:24	89:35	6	global_hwnd
water	89:24	0:0	7	global_hwnd
decl	90:8	90:21	4	TEXTMETRIC	tm
call	91:8	91:31	4	GetTextMetrics
arg	91:23	91:26	5	hdc
water	91:23	0:0	6	hdc
arg	91:28	91:31	5	&tm
op	91:28	0:0	6	&
water	91:29	0:0	6	tm
water	91:32	0:0	4	;
water	92:8	0:0	4	x
op	92:10	0:0	4	=
water	92:12	0:0	4	(
water	92:13	0:0	4	rpng2_info
op	92:23	0:0	4	.
water	92:24	0:0	4	width
op	92:30	0:0	4	-
water	92:32	0:0	4	len
op	92:35	0:0	4	*
water	92:36	0:0	4	tm
op	92:38	0:0	4	.
water	92:39	0:0	4	tmAveCharWidth
water	92:53	0:0	4	)
op	92:54	0:0	4	/
water	92:55	0:0	4	2
water	92:56	0:0	4	;
water	93:8	0:0	4	y
op	93:10	0:0	4	=
water	93:12	0:0	4	(
water	93:13	0:0	4	rpng2_info
op	93:23	0:0	4	.
water	93:24	0:0	4	height
op	93:31	0:0	4	-
water	93:33	0:0	4	tm
op	93:35	0:0	4	.
water	93:36	0:0	4	tmHeight
water	93:44	0:0	4	)
op	93:45	0:0	4	/
water	93:46	0:0	4	2
water	93:47	0:0	4	;
call	94:8	94:34	4	SetBkMode
arg	94:18	94:21	5	hdc
water	94:18	0:0	6	hdc
arg	94:23	94:34	5	TRANSPARENT
water	94:23	0:0	6	TRANSPARENT
water	94:35	0:0	4	;
call	95:8	95:58	4	SetTextColor
arg	95:21	95:24	5	hdc
water	95:21	0:0	6	hdc
arg	95:26	95:58	5	GetSysColor(COLOR_HIGHLIGHTTEXT)
call	95:26	95:57	6	GetSysColor
arg	95:38	95:57	7	COLOR_HIGHLIGHTTEXT
water	95:38	0:0	8	COLOR_HIGHLIGHTTEXT
water	95:59	0:0	4	;
call	97:8	97:65	4	TextOut
arg	97:16	97:19	5	hdc
water	97:16	0:0	6	hdc
arg	97:21	97:37	5	((x<0)?0:x)
water	97:21	0:0	6	(
water	97:22	0:0	6	(
water	97:23	0:0	6	x
op	97:25	0:0	6	<
water	97:27	0:0	6	0
water	97:28	0:0	6	)
water	97:29	0:0	6	?
water	97:31	0:0	6	0
water	97:33	0:0	6	:
water	97:35	0:0	6	x
water	97:36	0:0	6	)
arg	97:39	97:55	5	((y<0)?0:y)
water	97:39	0:0	6	(
water	97:40	0:0	6	(
water	97:41	0:0	6	y
op	97:43	0:0	6	<
water	97:45	0:0	6	0
water	97:46	0:0	6	)
water	97:47	0:0	6	?
water	97:49	0:0	6	0
water	97:51	0:0	6	:
water	97:53	0:0	6	y
water	97:54	0:0	6	)
arg	97:57	97:60	5	msg
water	97:57	0:0	6	msg
arg	97:62	97:65	5	len
water	97:62	0:0	6	len
water	97:66	0:0	4	;
call	98:8	98:34	4	ReleaseDC
arg	98:18	98:29	5	global_hwnd
water	98:18	0:0	6	global_hwnd
arg	98:31	98:34	5	hdc
water	98:31	0:0	6	hdc
water	98:35	0:0	4	;
call	99:8	99:32	4	rpng2_win_load_bg_image
water	99:33	0:0	4	;
water	100:4	0:0	4	}
if	101:4	110:4	2	(! bg_image)
cond	101:8	101:9	3	! bg_image
op	101:8	0:0	4	!
water	101:9	0:0	4	bg_image
stmts	101:19	110:4	3	
water	101:19	0:0	4	{
for	102:8	109:8	4	(j = 0 ;j < rpng2_info . height;++ j)
forinit	102:13	102:18	5	j = 0 ;
water	102:13	0:0	6	j
op	102:15	0:0	6	=
water	102:17	0:0	6	0
water	102:18	0:0	6	;
cond	102:21	102:36	5	j < rpng2_info . height
water	102:21	0:0	6	j
op	102:23	0:0	6	<
water	102:25	0:0	6	rpng2_info
op	102:35	0:0	6	.
water	102:36	0:0	6	height
forexpr	102:45	102:47	5	++ j
op	102:45	0:0	6	++
water	102:47	0:0	6	j
stmts	102:50	109:8	5	
water	102:50	0:0	6	{
water	103:12	0:0	6	dest
op	103:17	0:0	6	=
water	103:19	0:0	6	wimage_data
op	103:31	0:0	6	+
water	103:33	0:0	6	j
op	103:34	0:0	6	*
water	103:35	0:0	6	wimage_rowbytes
water	103:50	0:0	6	;
for	104:12	108:12	6	(i = rpng2_info . width ;i > 0;-- i)
forinit	104:17	104:37	7	i = rpng2_info . width ;
water	104:17	0:0	8	i
op	104:19	0:0	8	=
water	104:21	0:0	8	rpng2_info
op	104:31	0:0	8	.
water	104:32	0:0	8	width
water	104:37	0:0	8	;
cond	104:40	104:44	7	i > 0
water	104:40	0:0	8	i
op	104:42	0:0	8	>
water	104:44	0:0	8	0
forexpr	104:48	104:50	7	-- i
op	104:48	0:0	8	--
water	104:50	0:0	8	i
stmts	104:53	108:12	7	
water	104:53	0:0	8	{
op	105:16	0:0	8	*
water	105:17	0:0	8	dest
op	105:21	0:0	8	++
op	105:24	0:0	8	=
water	105:26	0:0	8	bg_blue
water	105:33	0:0	8	;
op	106:16	0:0	8	*
water	106:17	0:0	8	dest
op	106:21	0:0	8	++
op	106:24	0:0	8	=
water	106:26	0:0	8	bg_green
water	106:34	0:0	8	;
op	107:16	0:0	8	*
water	107:17	0:0	8	dest
op	107:21	0:0	8	++
op	107:24	0:0	8	=
water	107:26	0:0	8	bg_red
water	107:32	0:0	8	;
water	108:12	0:0	8	}
water	109:8	0:0	6	}
water	110:4	0:0	4	}
water	111:4	0:0	2	rect
op	111:8	0:0	2	.
water	111:9	0:0	2	left
op	111:14	0:0	2	=
water	111:16	0:0	2	0
water	111:17	0:0	2	L
water	111:18	0:0	2	;
water	112:4	0:0	2	rect
op	112:8	0:0	2	.
water	112:9	0:0	2	top
op	112:13	0:0	2	=
water	112:15	0:0	2	0
water	112:16	0:0	2	L
water	112:17	0:0	2	;
water	113:4	0:0	2	rect
op	113:8	0:0	2	.
water	113:9	0:0	2	right
op	113:15	0:0	2	=
water	113:17	0:0	2	(
water	113:18	0:0	2	LONG
water	113:22	0:0	2	)
water	113:23	0:0	2	rpng2_info
op	113:33	0:0	2	.
water	113:34	0:0	2	width
water	113:39	0:0	2	;
water	114:4	0:0	2	rect
op	114:8	0:0	2	.
water	114:9	0:0	2	bottom
op	114:16	0:0	2	=
water	114:18	0:0	2	(
water	114:19	0:0	2	LONG
water	114:23	0:0	2	)
water	114:24	0:0	2	rpng2_info
op	114:34	0:0	2	.
water	114:35	0:0	2	height
water	114:41	0:0	2	;
call	115:4	115:44	2	InvalidateRect
arg	115:19	115:30	3	global_hwnd
water	115:19	0:0	4	global_hwnd
arg	115:32	115:37	3	&rect
op	115:32	0:0	4	&
water	115:33	0:0	4	rect
arg	115:39	115:44	3	FALSE
water	115:39	0:0	4	FALSE
water	115:45	0:0	2	;
call	116:4	116:28	2	UpdateWindow
arg	116:17	116:28	3	global_hwnd
water	116:17	0:0	4	global_hwnd
water	116:29	0:0	2	;
return	117:4	117:12	2	0
water	117:11	0:0	3	0
