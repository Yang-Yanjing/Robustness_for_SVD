func	2:0	145:0	0	int	validation_gamma
params	2:20	0:0	1	
param	2:21	2:29	2	int	argc
param	2:31	2:42	2	char * *	argv
stmnts	0:0	144:11	1	
decl	4:3	4:79	2	double	gamma[9]
op	4:19	0:0	2	=
water	4:21	0:0	2	{
water	4:23	0:0	2	2
op	4:24	0:0	2	.
water	4:25	0:0	2	2
water	4:26	0:0	2	,
water	4:28	0:0	2	1
op	4:29	0:0	2	.
water	4:30	0:0	2	8
water	4:31	0:0	2	,
water	4:33	0:0	2	1
op	4:34	0:0	2	.
water	4:35	0:0	2	52
water	4:37	0:0	2	,
water	4:39	0:0	2	1
op	4:40	0:0	2	.
water	4:41	0:0	2	45
water	4:43	0:0	2	,
water	4:45	0:0	2	1
op	4:46	0:0	2	.
water	4:47	0:0	2	,
water	4:49	0:0	2	1
op	4:50	0:0	2	/
water	4:51	0:0	2	1
op	4:52	0:0	2	.
water	4:53	0:0	2	45
water	4:55	0:0	2	,
water	4:57	0:0	2	1
op	4:58	0:0	2	/
water	4:59	0:0	2	1
op	4:60	0:0	2	.
water	4:61	0:0	2	52
water	4:63	0:0	2	,
water	4:65	0:0	2	1
op	4:66	0:0	2	/
water	4:67	0:0	2	1
op	4:68	0:0	2	.
water	4:69	0:0	2	8
water	4:70	0:0	2	,
water	4:72	0:0	2	1
op	4:73	0:0	2	/
water	4:74	0:0	2	2
op	4:75	0:0	2	.
water	4:76	0:0	2	2
water	4:78	0:0	2	}
decl	5:3	5:16	2	double	maxerr
decl	6:3	6:31	2	int	i
water	6:8	0:0	2	,
decl	6:3	6:31	2	int	silent
op	6:16	0:0	2	=
water	6:17	0:0	2	0
water	6:18	0:0	2	,
decl	6:3	6:31	2	int	onlygamma
op	6:29	0:0	2	=
water	6:30	0:0	2	0
while	8:3	10:19	2	(-- argc > 0)
cond	8:10	8:19	3	-- argc > 0
op	8:10	0:0	4	--
water	8:12	0:0	4	argc
op	8:17	0:0	4	>
water	8:19	0:0	4	0
stmts	9:6	10:19	3	
if	9:6	10:19	4	(strcmp (* ++ argv ,"-s" ) == 0)
cond	9:10	9:35	5	strcmp (* ++ argv ,"-s" ) == 0
call	9:10	9:30	6	strcmp
arg	9:17	9:24	7	*++argv
op	9:17	0:0	8	*
op	9:18	0:0	8	++
water	9:20	0:0	8	argv
arg	9:26	9:30	7	"-s"
water	9:26	0:0	8	"-s"
op	9:32	0:0	6	==
water	9:35	0:0	6	0
stmts	10:9	10:19	5	
water	10:9	0:0	6	silent
op	10:16	0:0	6	=
water	10:18	0:0	6	1
water	10:19	0:0	6	;
else	11:6	12:22	2
stmts	11:11	12:22	3	
if	11:11	12:22	4	(strcmp (* argv ,"-g" ) == 0)
cond	11:15	11:38	5	strcmp (* argv ,"-g" ) == 0
call	11:15	11:33	6	strcmp
arg	11:22	11:27	7	*argv
op	11:22	0:0	8	*
water	11:23	0:0	8	argv
arg	11:29	11:33	7	"-g"
water	11:29	0:0	8	"-g"
op	11:35	0:0	6	==
water	11:38	0:0	6	0
stmts	12:9	12:22	5	
water	12:9	0:0	6	onlygamma
op	12:19	0:0	6	=
water	12:21	0:0	6	1
water	12:22	0:0	6	;
else	13:6	17:6	2
stmts	14:6	17:6	3	
water	14:6	0:0	4	{
call	15:9	15:55	4	fprintf
arg	15:17	15:23	5	stderr
water	15:17	0:0	6	stderr
arg	15:25	15:48	5	"unknown argument %s\n"
water	15:25	0:0	6	"unknown argument %s\n"
arg	15:50	15:55	5	*argv
op	15:50	0:0	6	*
water	15:51	0:0	6	argv
water	15:56	0:0	4	;
return	16:9	16:17	4	1
water	16:16	0:0	5	1
water	17:6	0:0	4	}
if	18:3	102:3	2	(! onlygamma)
cond	18:7	18:8	3	! onlygamma
op	18:7	0:0	4	!
water	18:8	0:0	4	onlygamma
stmts	19:3	102:3	3	
water	19:3	0:0	4	{
water	21:6	0:0	4	maxerr
op	21:13	0:0	4	=
water	21:15	0:0	4	0
water	21:16	0:0	4	;
for	22:6	34:6	4	(i = 0 ;i < 256;++ i)
forinit	22:11	22:14	5	i = 0 ;
water	22:11	0:0	6	i
op	22:12	0:0	6	=
water	22:13	0:0	6	0
water	22:14	0:0	6	;
cond	22:16	22:18	5	i < 256
water	22:16	0:0	6	i
op	22:17	0:0	6	<
water	22:18	0:0	6	256
forexpr	22:23	22:25	5	++ i
op	22:23	0:0	6	++
water	22:25	0:0	6	i
stmts	23:6	34:6	5	
water	23:6	0:0	6	{
decl	24:9	24:52	6	double	correct
op	24:24	0:0	6	=
op	24:26	0:0	6	-
call	24:27	24:37	7	log
arg	24:31	24:37	8	i/255.
water	24:31	0:0	9	i
op	24:32	0:0	9	/
water	24:33	0:0	9	255
op	24:36	0:0	9	.
op	24:38	0:0	6	/
call	24:39	24:45	7	log
arg	24:43	24:45	8	2.
water	24:43	0:0	9	2
op	24:44	0:0	9	.
op	24:46	0:0	6	*
water	24:47	0:0	6	65536
decl	25:9	25:48	6	double	error
op	25:22	0:0	6	=
call	25:24	25:37	7	png_log8bit
arg	25:36	25:37	8	i
water	25:36	0:0	9	i
op	25:39	0:0	6	-
water	25:41	0:0	6	correct
if	26:9	27:32	6	(i != 0 &&fabs (error ) > maxerr)
cond	26:13	26:37	7	i != 0 &&fabs (error ) > maxerr
water	26:13	0:0	8	i
op	26:15	0:0	8	!=
water	26:18	0:0	8	0
op	26:20	0:0	8	&&
call	26:23	26:33	8	fabs
arg	26:28	26:33	9	error
water	26:28	0:0	10	error
op	26:35	0:0	8	>
water	26:37	0:0	8	maxerr
stmts	27:12	27:32	7	
water	27:12	0:0	8	maxerr
op	27:19	0:0	8	=
call	27:21	27:31	8	fabs
arg	27:26	27:31	9	error
water	27:26	0:0	10	error
water	27:32	0:0	8	;
if	28:9	33:9	6	(i == 0 &&png_log8bit (i ) != 0 xffffffff || i != 0 &&png_log8bit (i ) !=floor (correct + . 5 ))
cond	28:13	29:57	7	i == 0 &&png_log8bit (i ) != 0 xffffffff || i != 0 &&png_log8bit (i ) !=floor (correct + . 5 )
water	28:13	0:0	8	i
op	28:15	0:0	8	==
water	28:18	0:0	8	0
op	28:20	0:0	8	&&
call	28:23	28:36	8	png_log8bit
arg	28:35	28:36	9	i
water	28:35	0:0	10	i
op	28:38	0:0	8	!=
water	28:41	0:0	8	0
water	28:42	0:0	8	xffffffff
op	28:52	0:0	8	||
water	29:13	0:0	8	i
op	29:15	0:0	8	!=
water	29:18	0:0	8	0
op	29:20	0:0	8	&&
call	29:23	29:36	8	png_log8bit
arg	29:35	29:36	9	i
water	29:35	0:0	10	i
op	29:38	0:0	8	!=
call	29:41	29:57	8	floor
arg	29:47	29:57	9	correct+.5
water	29:47	0:0	10	correct
op	29:54	0:0	10	+
op	29:55	0:0	10	.
water	29:56	0:0	10	5
stmts	30:9	33:9	7	
water	30:9	0:0	8	{
call	31:12	32:41	8	fprintf
arg	31:20	31:26	9	stderr
water	31:20	0:0	10	stderr
arg	31:28	31:72	9	"8 bit log error: %d: got %u, expected %f\n"
water	31:28	0:0	10	"8 bit log error: %d: got %u, expected %f\n"
arg	32:15	32:16	9	i
water	32:15	0:0	10	i
arg	32:18	32:32	9	png_log8bit(i)
call	32:18	32:31	10	png_log8bit
arg	32:30	32:31	11	i
water	32:30	0:0	12	i
arg	32:34	32:41	9	correct
water	32:34	0:0	10	correct
water	32:42	0:0	8	;
water	33:9	0:0	8	}
water	34:6	0:0	6	}
if	35:6	36:57	4	(! silent)
cond	35:10	35:11	5	! silent
op	35:10	0:0	6	!
water	35:11	0:0	6	silent
stmts	36:9	36:57	5	
call	36:9	36:56	6	printf
arg	36:16	36:48	7	"maximum 8 bit log error = %f\n"
water	36:16	0:0	8	"maximum 8 bit log error = %f\n"
arg	36:50	36:56	7	maxerr
water	36:50	0:0	8	maxerr
water	36:57	0:0	6	;
water	37:6	0:0	4	maxerr
op	37:13	0:0	4	=
water	37:15	0:0	4	0
water	37:16	0:0	4	;
for	38:6	53:6	4	(i = 0 ;i < 65536;++ i)
forinit	38:11	38:14	5	i = 0 ;
water	38:11	0:0	6	i
op	38:12	0:0	6	=
water	38:13	0:0	6	0
water	38:14	0:0	6	;
cond	38:16	38:18	5	i < 65536
water	38:16	0:0	6	i
op	38:17	0:0	6	<
water	38:18	0:0	6	65536
forexpr	38:25	38:27	5	++ i
op	38:25	0:0	6	++
water	38:27	0:0	6	i
stmts	39:6	53:6	5	
water	39:6	0:0	6	{
decl	40:9	40:54	6	double	correct
op	40:24	0:0	6	=
op	40:26	0:0	6	-
call	40:27	40:39	7	log
arg	40:31	40:39	8	i/65535.
water	40:31	0:0	9	i
op	40:32	0:0	9	/
water	40:33	0:0	9	65535
op	40:38	0:0	9	.
op	40:40	0:0	6	/
call	40:41	40:47	7	log
arg	40:45	40:47	8	2.
water	40:45	0:0	9	2
op	40:46	0:0	9	.
op	40:48	0:0	6	*
water	40:49	0:0	6	65536
decl	41:9	41:49	6	double	error
op	41:22	0:0	6	=
call	41:24	41:38	7	png_log16bit
arg	41:37	41:38	8	i
water	41:37	0:0	9	i
op	41:40	0:0	6	-
water	41:42	0:0	6	correct
if	42:9	43:32	6	(i != 0 &&fabs (error ) > maxerr)
cond	42:13	42:37	7	i != 0 &&fabs (error ) > maxerr
water	42:13	0:0	8	i
op	42:15	0:0	8	!=
water	42:18	0:0	8	0
op	42:20	0:0	8	&&
call	42:23	42:33	8	fabs
arg	42:28	42:33	9	error
water	42:28	0:0	10	error
op	42:35	0:0	8	>
water	42:37	0:0	8	maxerr
stmts	43:12	43:32	7	
water	43:12	0:0	8	maxerr
op	43:19	0:0	8	=
call	43:21	43:31	8	fabs
arg	43:26	43:31	9	error
water	43:26	0:0	10	error
water	43:32	0:0	8	;
if	44:9	52:9	6	(i == 0 &&png_log16bit (i ) != 0 xffffffff || i != 0 &&png_log16bit (i ) !=floor (correct + . 5 ))
cond	44:13	45:58	7	i == 0 &&png_log16bit (i ) != 0 xffffffff || i != 0 &&png_log16bit (i ) !=floor (correct + . 5 )
water	44:13	0:0	8	i
op	44:15	0:0	8	==
water	44:18	0:0	8	0
op	44:20	0:0	8	&&
call	44:23	44:37	8	png_log16bit
arg	44:36	44:37	9	i
water	44:36	0:0	10	i
op	44:39	0:0	8	!=
water	44:42	0:0	8	0
water	44:43	0:0	8	xffffffff
op	44:53	0:0	8	||
water	45:13	0:0	8	i
op	45:15	0:0	8	!=
water	45:18	0:0	8	0
op	45:20	0:0	8	&&
call	45:23	45:37	8	png_log16bit
arg	45:36	45:37	9	i
water	45:36	0:0	10	i
op	45:39	0:0	8	!=
call	45:42	45:58	8	floor
arg	45:48	45:58	9	correct+.5
water	45:48	0:0	10	correct
op	45:55	0:0	10	+
op	45:56	0:0	10	.
water	45:57	0:0	10	5
stmts	46:9	52:9	7	
water	46:9	0:0	8	{
if	47:12	51:12	8	(error > . 68)
cond	47:16	47:25	9	error > . 68
water	47:16	0:0	10	error
op	47:22	0:0	10	>
op	47:24	0:0	10	.
water	47:25	0:0	10	68
stmts	48:12	51:12	9	
water	48:12	0:0	10	{
call	49:15	50:68	10	fprintf
arg	49:23	49:29	11	stderr
water	49:23	0:0	12	stderr
arg	49:31	50:32	11	"16 bit log error: %d: got %u, expected %f"" error: %f\n"
water	49:31	0:0	12	"16 bit log error: %d: got %u, expected %f"
water	50:18	0:0	12	" error: %f\n"
arg	50:34	50:35	11	i
water	50:34	0:0	12	i
arg	50:37	50:52	11	png_log16bit(i)
call	50:37	50:51	12	png_log16bit
arg	50:50	50:51	13	i
water	50:50	0:0	14	i
arg	50:54	50:61	11	correct
water	50:54	0:0	12	correct
arg	50:63	50:68	11	error
water	50:63	0:0	12	error
water	50:69	0:0	10	;
water	51:12	0:0	10	}
water	52:9	0:0	8	}
water	53:6	0:0	6	}
if	54:6	55:58	4	(! silent)
cond	54:10	54:11	5	! silent
op	54:10	0:0	6	!
water	54:11	0:0	6	silent
stmts	55:9	55:58	5	
call	55:9	55:57	6	printf
arg	55:16	55:49	7	"maximum 16 bit log error = %f\n"
water	55:16	0:0	8	"maximum 16 bit log error = %f\n"
arg	55:51	55:57	7	maxerr
water	55:51	0:0	8	maxerr
water	55:58	0:0	6	;
water	57:6	0:0	4	maxerr
op	57:13	0:0	4	=
water	57:15	0:0	4	0
water	57:16	0:0	4	;
for	58:6	69:6	4	(i = 0 ;i <= 0 xfffff;++ i)
forinit	58:11	58:14	5	i = 0 ;
water	58:11	0:0	6	i
op	58:12	0:0	6	=
water	58:13	0:0	6	0
water	58:14	0:0	6	;
cond	58:16	58:20	5	i <= 0 xfffff
water	58:16	0:0	6	i
op	58:17	0:0	6	<=
water	58:19	0:0	6	0
water	58:20	0:0	6	xfffff
forexpr	58:28	58:30	5	++ i
op	58:28	0:0	6	++
water	58:30	0:0	6	i
stmts	59:6	69:6	5	
water	59:6	0:0	6	{
decl	60:9	60:69	6	double	correct
op	60:24	0:0	6	=
call	60:26	60:49	7	exp
arg	60:30	60:49	8	-i/65536.*log(2.)
op	60:30	0:0	9	-
water	60:31	0:0	9	i
op	60:32	0:0	9	/
water	60:33	0:0	9	65536
op	60:38	0:0	9	.
call	60:40	60:48	9	*log
arg	60:46	60:48	10	2.
water	60:46	0:0	11	2
op	60:47	0:0	11	.
op	60:51	0:0	6	*
water	60:53	0:0	6	(
water	60:54	0:0	6	65536
op	60:59	0:0	6	.
op	60:61	0:0	6	*
water	60:63	0:0	6	65536
water	60:68	0:0	6	)
decl	61:9	61:44	6	double	error
op	61:22	0:0	6	=
call	61:24	61:33	7	png_exp
arg	61:32	61:33	8	i
water	61:32	0:0	9	i
op	61:35	0:0	6	-
water	61:37	0:0	6	correct
if	62:9	63:32	6	(fabs (error ) > maxerr)
cond	62:13	62:27	7	fabs (error ) > maxerr
call	62:13	62:23	8	fabs
arg	62:18	62:23	9	error
water	62:18	0:0	10	error
op	62:25	0:0	8	>
water	62:27	0:0	8	maxerr
stmts	63:12	63:32	7	
water	63:12	0:0	8	maxerr
op	63:19	0:0	8	=
call	63:21	63:31	8	fabs
arg	63:26	63:31	9	error
water	63:26	0:0	10	error
water	63:32	0:0	8	;
if	64:9	68:9	6	(fabs (error ) > 1883)
cond	64:13	64:27	7	fabs (error ) > 1883
call	64:13	64:23	8	fabs
arg	64:18	64:23	9	error
water	64:18	0:0	10	error
op	64:25	0:0	8	>
water	64:27	0:0	8	1883
stmts	65:9	68:9	7	
water	65:9	0:0	8	{
call	66:12	67:63	8	fprintf
arg	66:20	66:26	9	stderr
water	66:20	0:0	10	stderr
arg	66:28	67:32	9	"32 bit exp error: %d: got %u, expected %f"" error: %f\n"
water	66:28	0:0	10	"32 bit exp error: %d: got %u, expected %f"
water	67:18	0:0	10	" error: %f\n"
arg	67:34	67:35	9	i
water	67:34	0:0	10	i
arg	67:37	67:47	9	png_exp(i)
call	67:37	67:46	10	png_exp
arg	67:45	67:46	11	i
water	67:45	0:0	12	i
arg	67:49	67:56	9	correct
water	67:49	0:0	10	correct
arg	67:58	67:63	9	error
water	67:58	0:0	10	error
water	67:64	0:0	8	;
water	68:9	0:0	8	}
water	69:6	0:0	6	}
if	70:6	71:58	4	(! silent)
cond	70:10	70:11	5	! silent
op	70:10	0:0	6	!
water	70:11	0:0	6	silent
stmts	71:9	71:58	5	
call	71:9	71:57	6	printf
arg	71:16	71:49	7	"maximum 32 bit exp error = %f\n"
water	71:16	0:0	8	"maximum 32 bit exp error = %f\n"
arg	71:51	71:57	7	maxerr
water	71:51	0:0	8	maxerr
water	71:58	0:0	6	;
water	72:6	0:0	4	maxerr
op	72:13	0:0	4	=
water	72:15	0:0	4	0
water	72:16	0:0	4	;
for	73:6	84:6	4	(i = 0 ;i <= 0 xfffff;++ i)
forinit	73:11	73:14	5	i = 0 ;
water	73:11	0:0	6	i
op	73:12	0:0	6	=
water	73:13	0:0	6	0
water	73:14	0:0	6	;
cond	73:16	73:20	5	i <= 0 xfffff
water	73:16	0:0	6	i
op	73:17	0:0	6	<=
water	73:19	0:0	6	0
water	73:20	0:0	6	xfffff
forexpr	73:28	73:30	5	++ i
op	73:28	0:0	6	++
water	73:30	0:0	6	i
stmts	74:6	84:6	5	
water	74:6	0:0	6	{
decl	75:9	75:56	6	double	correct
op	75:24	0:0	6	=
call	75:26	75:49	7	exp
arg	75:30	75:49	8	-i/65536.*log(2.)
op	75:30	0:0	9	-
water	75:31	0:0	9	i
op	75:32	0:0	9	/
water	75:33	0:0	9	65536
op	75:38	0:0	9	.
call	75:40	75:48	9	*log
arg	75:46	75:48	10	2.
water	75:46	0:0	11	2
op	75:47	0:0	11	.
op	75:51	0:0	6	*
water	75:53	0:0	6	255
decl	76:9	76:48	6	double	error
op	76:22	0:0	6	=
call	76:24	76:37	7	png_exp8bit
arg	76:36	76:37	8	i
water	76:36	0:0	9	i
op	76:39	0:0	6	-
water	76:41	0:0	6	correct
if	77:9	78:32	6	(fabs (error ) > maxerr)
cond	77:13	77:27	7	fabs (error ) > maxerr
call	77:13	77:23	8	fabs
arg	77:18	77:23	9	error
water	77:18	0:0	10	error
op	77:25	0:0	8	>
water	77:27	0:0	8	maxerr
stmts	78:12	78:32	7	
water	78:12	0:0	8	maxerr
op	78:19	0:0	8	=
call	78:21	78:31	8	fabs
arg	78:26	78:31	9	error
water	78:26	0:0	10	error
water	78:32	0:0	8	;
if	79:9	83:9	6	(fabs (error ) > . 50002)
cond	79:13	79:28	7	fabs (error ) > . 50002
call	79:13	79:23	8	fabs
arg	79:18	79:23	9	error
water	79:18	0:0	10	error
op	79:25	0:0	8	>
op	79:27	0:0	8	.
water	79:28	0:0	8	50002
stmts	80:9	83:9	7	
water	80:9	0:0	8	{
call	81:12	82:67	8	fprintf
arg	81:20	81:26	9	stderr
water	81:20	0:0	10	stderr
arg	81:28	82:32	9	"8 bit exp error: %d: got %u, expected %f"" error: %f\n"
water	81:28	0:0	10	"8 bit exp error: %d: got %u, expected %f"
water	82:18	0:0	10	" error: %f\n"
arg	82:34	82:35	9	i
water	82:34	0:0	10	i
arg	82:37	82:51	9	png_exp8bit(i)
call	82:37	82:50	10	png_exp8bit
arg	82:49	82:50	11	i
water	82:49	0:0	12	i
arg	82:53	82:60	9	correct
water	82:53	0:0	10	correct
arg	82:62	82:67	9	error
water	82:62	0:0	10	error
water	82:68	0:0	8	;
water	83:9	0:0	8	}
water	84:6	0:0	6	}
if	85:6	86:57	4	(! silent)
cond	85:10	85:11	5	! silent
op	85:10	0:0	6	!
water	85:11	0:0	6	silent
stmts	86:9	86:57	5	
call	86:9	86:56	6	printf
arg	86:16	86:48	7	"maximum 8 bit exp error = %f\n"
water	86:16	0:0	8	"maximum 8 bit exp error = %f\n"
arg	86:50	86:56	7	maxerr
water	86:50	0:0	8	maxerr
water	86:57	0:0	6	;
water	87:6	0:0	4	maxerr
op	87:13	0:0	4	=
water	87:15	0:0	4	0
water	87:16	0:0	4	;
for	88:6	99:6	4	(i = 0 ;i <= 0 xfffff;++ i)
forinit	88:11	88:14	5	i = 0 ;
water	88:11	0:0	6	i
op	88:12	0:0	6	=
water	88:13	0:0	6	0
water	88:14	0:0	6	;
cond	88:16	88:20	5	i <= 0 xfffff
water	88:16	0:0	6	i
op	88:17	0:0	6	<=
water	88:19	0:0	6	0
water	88:20	0:0	6	xfffff
forexpr	88:28	88:30	5	++ i
op	88:28	0:0	6	++
water	88:30	0:0	6	i
stmts	89:6	99:6	5	
water	89:6	0:0	6	{
decl	90:9	90:58	6	double	correct
op	90:24	0:0	6	=
call	90:26	90:49	7	exp
arg	90:30	90:49	8	-i/65536.*log(2.)
op	90:30	0:0	9	-
water	90:31	0:0	9	i
op	90:32	0:0	9	/
water	90:33	0:0	9	65536
op	90:38	0:0	9	.
call	90:40	90:48	9	*log
arg	90:46	90:48	10	2.
water	90:46	0:0	11	2
op	90:47	0:0	11	.
op	90:51	0:0	6	*
water	90:53	0:0	6	65535
decl	91:9	91:49	6	double	error
op	91:22	0:0	6	=
call	91:24	91:38	7	png_exp16bit
arg	91:37	91:38	8	i
water	91:37	0:0	9	i
op	91:40	0:0	6	-
water	91:42	0:0	6	correct
if	92:9	93:32	6	(fabs (error ) > maxerr)
cond	92:13	92:27	7	fabs (error ) > maxerr
call	92:13	92:23	8	fabs
arg	92:18	92:23	9	error
water	92:18	0:0	10	error
op	92:25	0:0	8	>
water	92:27	0:0	8	maxerr
stmts	93:12	93:32	7	
water	93:12	0:0	8	maxerr
op	93:19	0:0	8	=
call	93:21	93:31	8	fabs
arg	93:26	93:31	9	error
water	93:26	0:0	10	error
water	93:32	0:0	8	;
if	94:9	98:9	6	(fabs (error ) > . 524)
cond	94:13	94:28	7	fabs (error ) > . 524
call	94:13	94:23	8	fabs
arg	94:18	94:23	9	error
water	94:18	0:0	10	error
op	94:25	0:0	8	>
op	94:27	0:0	8	.
water	94:28	0:0	8	524
stmts	95:9	98:9	7	
water	95:9	0:0	8	{
call	96:12	97:68	8	fprintf
arg	96:20	96:26	9	stderr
water	96:20	0:0	10	stderr
arg	96:28	97:32	9	"16 bit exp error: %d: got %u, expected %f"" error: %f\n"
water	96:28	0:0	10	"16 bit exp error: %d: got %u, expected %f"
water	97:18	0:0	10	" error: %f\n"
arg	97:34	97:35	9	i
water	97:34	0:0	10	i
arg	97:37	97:52	9	png_exp16bit(i)
call	97:37	97:51	10	png_exp16bit
arg	97:50	97:51	11	i
water	97:50	0:0	12	i
arg	97:54	97:61	9	correct
water	97:54	0:0	10	correct
arg	97:63	97:68	9	error
water	97:63	0:0	10	error
water	97:69	0:0	8	;
water	98:9	0:0	8	}
water	99:6	0:0	6	}
if	100:6	101:58	4	(! silent)
cond	100:10	100:11	5	! silent
op	100:10	0:0	6	!
water	100:11	0:0	6	silent
stmts	101:9	101:58	5	
call	101:9	101:57	6	printf
arg	101:16	101:49	7	"maximum 16 bit exp error = %f\n"
water	101:16	0:0	8	"maximum 16 bit exp error = %f\n"
arg	101:51	101:57	7	maxerr
water	101:51	0:0	8	maxerr
water	101:58	0:0	6	;
water	102:3	0:0	4	}
for	104:3	143:3	2	(i = 0 ;i < 9;++ i)
forinit	104:8	104:11	3	i = 0 ;
water	104:8	0:0	4	i
op	104:9	0:0	4	=
water	104:10	0:0	4	0
water	104:11	0:0	4	;
cond	104:13	104:15	3	i < 9
water	104:13	0:0	4	i
op	104:14	0:0	4	<
water	104:15	0:0	4	9
forexpr	104:18	104:20	3	++ i
op	104:18	0:0	4	++
water	104:20	0:0	4	i
stmts	105:3	143:3	3	
water	105:3	0:0	4	{
water	106:6	0:0	4	unsigned
water	106:15	0:0	4	j
water	106:16	0:0	4	;
decl	107:6	107:25	4	double	g
op	107:15	0:0	4	=
water	107:17	0:0	4	gamma
op	107:22	0:0	4	[
water	107:23	0:0	4	i
op	107:24	0:0	4	]
decl	108:6	108:52	4	png_fixed_point	gfp
op	108:26	0:0	4	=
call	108:28	108:51	5	floor
arg	108:34	108:51	6	g*PNG_FP_1+.5
water	108:34	0:0	7	g
op	108:36	0:0	7	*
water	108:38	0:0	7	PNG_FP_1
op	108:47	0:0	7	+
op	108:49	0:0	7	.
water	108:50	0:0	7	5
if	109:6	110:37	4	(! silent)
cond	109:10	109:11	5	! silent
op	109:10	0:0	6	!
water	109:11	0:0	6	silent
stmts	110:9	110:37	5	
call	110:9	110:36	6	printf
arg	110:16	110:33	7	"Test gamma %f\n"
water	110:16	0:0	8	"Test gamma %f\n"
arg	110:35	110:36	7	g
water	110:35	0:0	8	g
water	110:37	0:0	6	;
water	111:6	0:0	4	maxerr
op	111:13	0:0	4	=
water	111:15	0:0	4	0
water	111:16	0:0	4	;
for	112:6	124:6	4	(j = 0 ;j < 256;++ j)
forinit	112:11	112:14	5	j = 0 ;
water	112:11	0:0	6	j
op	112:12	0:0	6	=
water	112:13	0:0	6	0
water	112:14	0:0	6	;
cond	112:16	112:18	5	j < 256
water	112:16	0:0	6	j
op	112:17	0:0	6	<
water	112:18	0:0	6	256
forexpr	112:23	112:25	5	++ j
op	112:23	0:0	6	++
water	112:25	0:0	6	j
stmts	113:6	124:6	5	
water	113:6	0:0	6	{
decl	114:9	114:46	6	double	correct
op	114:24	0:0	6	=
call	114:26	114:39	7	pow
arg	114:30	114:36	8	j/255.
water	114:30	0:0	9	j
op	114:31	0:0	9	/
water	114:32	0:0	9	255
op	114:35	0:0	9	.
arg	114:38	114:39	8	g
water	114:38	0:0	9	g
op	114:41	0:0	6	*
water	114:43	0:0	6	255
decl	115:9	115:54	6	png_byte	out
op	115:22	0:0	6	=
call	115:24	115:53	7	png_gamma_8bit_correct
arg	115:47	115:48	8	j
water	115:47	0:0	9	j
arg	115:50	115:53	8	gfp
water	115:50	0:0	9	gfp
decl	116:9	116:37	6	double	error
op	116:22	0:0	6	=
water	116:24	0:0	6	out
op	116:28	0:0	6	-
water	116:30	0:0	6	correct
if	117:9	118:32	6	(fabs (error ) > maxerr)
cond	117:13	117:27	7	fabs (error ) > maxerr
call	117:13	117:23	8	fabs
arg	117:18	117:23	9	error
water	117:18	0:0	10	error
op	117:25	0:0	8	>
water	117:27	0:0	8	maxerr
stmts	118:12	118:32	7	
water	118:12	0:0	8	maxerr
op	118:19	0:0	8	=
call	118:21	118:31	8	fabs
arg	118:26	118:31	9	error
water	118:26	0:0	10	error
water	118:32	0:0	8	;
if	119:9	123:9	6	(out !=floor (correct + . 5 ))
cond	119:13	119:36	7	out !=floor (correct + . 5 )
water	119:13	0:0	8	out
op	119:17	0:0	8	!=
call	119:20	119:36	8	floor
arg	119:26	119:36	9	correct+.5
water	119:26	0:0	10	correct
op	119:33	0:0	10	+
op	119:34	0:0	10	.
water	119:35	0:0	10	5
stmts	120:9	123:9	7	
water	120:9	0:0	8	{
call	121:12	122:40	8	fprintf
arg	121:20	121:26	9	stderr
water	121:20	0:0	10	stderr
arg	121:28	121:73	9	"8bit %d ^ %f: got %d expected %f error %f\n"
water	121:28	0:0	10	"8bit %d ^ %f: got %d expected %f error %f\n"
arg	122:15	122:16	9	j
water	122:15	0:0	10	j
arg	122:18	122:19	9	g
water	122:18	0:0	10	g
arg	122:21	122:24	9	out
water	122:21	0:0	10	out
arg	122:26	122:33	9	correct
water	122:26	0:0	10	correct
arg	122:35	122:40	9	error
water	122:35	0:0	10	error
water	122:41	0:0	8	;
water	123:9	0:0	8	}
water	124:6	0:0	6	}
if	125:6	126:64	4	(! silent)
cond	125:10	125:11	5	! silent
op	125:10	0:0	6	!
water	125:11	0:0	6	silent
stmts	126:9	126:64	5	
call	126:9	126:63	6	printf
arg	126:16	126:52	7	"gamma %f: maximum 8 bit error %f\n"
water	126:16	0:0	8	"gamma %f: maximum 8 bit error %f\n"
arg	126:54	126:55	7	g
water	126:54	0:0	8	g
arg	126:57	126:63	7	maxerr
water	126:57	0:0	8	maxerr
water	126:64	0:0	6	;
water	127:6	0:0	4	maxerr
op	127:13	0:0	4	=
water	127:15	0:0	4	0
water	127:16	0:0	4	;
for	128:6	140:6	4	(j = 0 ;j < 65536;++ j)
forinit	128:11	128:14	5	j = 0 ;
water	128:11	0:0	6	j
op	128:12	0:0	6	=
water	128:13	0:0	6	0
water	128:14	0:0	6	;
cond	128:16	128:18	5	j < 65536
water	128:16	0:0	6	j
op	128:17	0:0	6	<
water	128:18	0:0	6	65536
forexpr	128:25	128:27	5	++ j
op	128:25	0:0	6	++
water	128:27	0:0	6	j
stmts	129:6	140:6	5	
water	129:6	0:0	6	{
decl	130:9	130:50	6	double	correct
op	130:24	0:0	6	=
call	130:26	130:41	7	pow
arg	130:30	130:38	8	j/65535.
water	130:30	0:0	9	j
op	130:31	0:0	9	/
water	130:32	0:0	9	65535
op	130:37	0:0	9	.
arg	130:40	130:41	8	g
water	130:40	0:0	9	g
op	130:43	0:0	6	*
water	130:45	0:0	6	65535
decl	131:9	131:58	6	png_uint_16	out
op	131:25	0:0	6	=
call	131:27	131:57	7	png_gamma_16bit_correct
arg	131:51	131:52	8	j
water	131:51	0:0	9	j
arg	131:54	131:57	8	gfp
water	131:54	0:0	9	gfp
decl	132:9	132:37	6	double	error
op	132:22	0:0	6	=
water	132:24	0:0	6	out
op	132:28	0:0	6	-
water	132:30	0:0	6	correct
if	133:9	134:32	6	(fabs (error ) > maxerr)
cond	133:13	133:27	7	fabs (error ) > maxerr
call	133:13	133:23	8	fabs
arg	133:18	133:23	9	error
water	133:18	0:0	10	error
op	133:25	0:0	8	>
water	133:27	0:0	8	maxerr
stmts	134:12	134:32	7	
water	134:12	0:0	8	maxerr
op	134:19	0:0	8	=
call	134:21	134:31	8	fabs
arg	134:26	134:31	9	error
water	134:26	0:0	10	error
water	134:32	0:0	8	;
if	135:9	139:9	6	(fabs (error ) > 1 . 62)
cond	135:13	135:29	7	fabs (error ) > 1 . 62
call	135:13	135:23	8	fabs
arg	135:18	135:23	9	error
water	135:18	0:0	10	error
op	135:25	0:0	8	>
water	135:27	0:0	8	1
op	135:28	0:0	8	.
water	135:29	0:0	8	62
stmts	136:9	139:9	7	
water	136:9	0:0	8	{
call	137:12	138:40	8	fprintf
arg	137:20	137:26	9	stderr
water	137:20	0:0	10	stderr
arg	137:28	137:74	9	"16bit %d ^ %f: got %d expected %f error %f\n"
water	137:28	0:0	10	"16bit %d ^ %f: got %d expected %f error %f\n"
arg	138:15	138:16	9	j
water	138:15	0:0	10	j
arg	138:18	138:19	9	g
water	138:18	0:0	10	g
arg	138:21	138:24	9	out
water	138:21	0:0	10	out
arg	138:26	138:33	9	correct
water	138:26	0:0	10	correct
arg	138:35	138:40	9	error
water	138:35	0:0	10	error
water	138:41	0:0	8	;
water	139:9	0:0	8	}
water	140:6	0:0	6	}
if	141:6	142:65	4	(! silent)
cond	141:10	141:11	5	! silent
op	141:10	0:0	6	!
water	141:11	0:0	6	silent
stmts	142:9	142:65	5	
call	142:9	142:64	6	printf
arg	142:16	142:53	7	"gamma %f: maximum 16 bit error %f\n"
water	142:16	0:0	8	"gamma %f: maximum 16 bit error %f\n"
arg	142:55	142:56	7	g
water	142:55	0:0	8	g
arg	142:58	142:64	7	maxerr
water	142:58	0:0	8	maxerr
water	142:65	0:0	6	;
water	143:3	0:0	4	}
return	144:3	144:11	2	0
water	144:10	0:0	3	0
