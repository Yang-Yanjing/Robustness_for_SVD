func	2:0	260:0	0	static int	rpng2_x_load_bg_image
params	2:32	0:0	1	
param	2:33	2:37	2	void
stmnts	0:0	259:12	1	
decl	4:4	4:12	2	uch	*src
decl	5:4	5:14	2	char	*dest
decl	6:4	6:30	2	uch	r1
water	6:10	0:0	2	,
decl	6:4	6:30	2	uch	r2
water	6:14	0:0	2	,
decl	6:4	6:30	2	uch	g1
water	6:18	0:0	2	,
decl	6:4	6:30	2	uch	g2
water	6:22	0:0	2	,
decl	6:4	6:30	2	uch	b1
water	6:26	0:0	2	,
decl	6:4	6:30	2	uch	b2
decl	7:4	7:54	2	uch	r1_inv
water	7:14	0:0	2	,
decl	7:4	7:54	2	uch	r2_inv
water	7:22	0:0	2	,
decl	7:4	7:54	2	uch	g1_inv
water	7:30	0:0	2	,
decl	7:4	7:54	2	uch	g2_inv
water	7:38	0:0	2	,
decl	7:4	7:54	2	uch	b1_inv
water	7:46	0:0	2	,
decl	7:4	7:54	2	uch	b2_inv
decl	8:4	8:20	2	int	k
water	8:9	0:0	2	,
decl	8:4	8:20	2	int	hmax
water	8:15	0:0	2	,
decl	8:4	8:20	2	int	max
decl	9:4	9:28	2	int	xidx
water	9:12	0:0	2	,
decl	9:4	9:28	2	int	yidx
water	9:18	0:0	2	,
decl	9:4	9:28	2	int	yidx_max
decl	10:4	10:47	2	int	even_odd_vert
water	10:21	0:0	2	,
decl	10:4	10:47	2	int	even_odd_horiz
water	10:37	0:0	2	,
decl	10:4	10:47	2	int	even_odd
decl	11:4	11:48	2	int	invert_gradient2
op	11:25	0:0	2	=
water	11:27	0:0	2	(
water	11:28	0:0	2	bg
op	11:30	0:0	2	[
water	11:31	0:0	2	pat
op	11:34	0:0	2	]
op	11:35	0:0	2	.
water	11:36	0:0	2	type
op	11:41	0:0	2	&
water	11:43	0:0	2	0
water	11:44	0:0	2	x08
water	11:47	0:0	2	)
decl	12:4	12:21	2	int	invert_column
decl	13:4	13:48	2	int	ximage_rowbytes
op	13:24	0:0	2	=
water	13:26	0:0	2	ximage
op	13:32	0:0	2	->
water	13:34	0:0	2	bytes_per_line
decl	14:4	14:14	2	ulg	i
water	14:9	0:0	2	,
decl	14:4	14:14	2	ulg	row
decl	15:4	15:13	2	ulg	pixel
water	20:4	0:0	2	bg_rowbytes
op	20:16	0:0	2	=
water	20:18	0:0	2	3
op	20:20	0:0	2	*
water	20:22	0:0	2	rpng2_info
op	20:32	0:0	2	.
water	20:33	0:0	2	width
water	20:38	0:0	2	;
water	21:4	0:0	2	bg_data
op	21:12	0:0	2	=
water	21:14	0:0	2	(
water	21:15	0:0	2	uch
op	21:19	0:0	2	*
water	21:20	0:0	2	)
call	21:21	21:59	2	malloc
arg	21:28	21:59	3	bg_rowbytes*rpng2_info.height
water	21:28	0:0	4	bg_rowbytes
op	21:40	0:0	4	*
water	21:42	0:0	4	rpng2_info
op	21:52	0:0	4	.
water	21:53	0:0	4	height
water	21:60	0:0	2	;
if	22:4	27:4	2	(! bg_data)
cond	22:8	22:9	3	! bg_data
op	22:8	0:0	4	!
water	22:9	0:0	4	bg_data
stmts	22:18	27:4	3	
water	22:18	0:0	4	{
call	23:8	24:63	4	fprintf
arg	23:16	23:22	5	stderr
water	23:16	0:0	6	stderr
arg	23:24	24:63	5	PROGNAME":  unable to allocate memory for background image\n"
water	23:24	0:0	6	PROGNAME
water	24:10	0:0	6	":  unable to allocate memory for background image\n"
water	24:64	0:0	4	;
water	25:8	0:0	4	bg_image
op	25:17	0:0	4	=
water	25:19	0:0	4	0
water	25:20	0:0	4	;
return	26:8	26:16	4	1
water	26:15	0:0	5	1
water	27:4	0:0	4	}
water	28:4	0:0	2	bgscale
op	28:12	0:0	2	=
water	28:14	0:0	2	(
water	28:15	0:0	2	pat
op	28:19	0:0	2	==
water	28:22	0:0	2	0
water	28:23	0:0	2	)
water	28:24	0:0	2	?
water	28:26	0:0	2	8
water	28:28	0:0	2	:
water	28:30	0:0	2	bgscale_default
water	28:45	0:0	2	;
water	29:4	0:0	2	yidx_max
op	29:13	0:0	2	=
water	29:15	0:0	2	bgscale
op	29:23	0:0	2	-
water	29:25	0:0	2	1
water	29:26	0:0	2	;
if	34:4	97:4	2	(( bg [ pat ] . type & 0 x07 ) == 0)
cond	34:8	34:33	3	( bg [ pat ] . type & 0 x07 ) == 0
water	34:8	0:0	4	(
water	34:9	0:0	4	bg
op	34:11	0:0	4	[
water	34:12	0:0	4	pat
op	34:15	0:0	4	]
op	34:16	0:0	4	.
water	34:17	0:0	4	type
op	34:22	0:0	4	&
water	34:24	0:0	4	0
water	34:25	0:0	4	x07
water	34:28	0:0	4	)
op	34:30	0:0	4	==
water	34:33	0:0	4	0
stmts	34:36	97:4	3	
water	34:36	0:0	4	{
decl	35:8	35:45	4	uch	r1_min
op	35:20	0:0	4	=
water	35:22	0:0	4	rgb
op	35:25	0:0	4	[
water	35:26	0:0	4	bg
op	35:28	0:0	4	[
water	35:29	0:0	4	pat
op	35:32	0:0	4	]
op	35:33	0:0	4	.
water	35:34	0:0	4	rgb1_min
op	35:42	0:0	4	]
op	35:43	0:0	4	.
water	35:44	0:0	4	r
decl	36:8	36:45	4	uch	g1_min
op	36:20	0:0	4	=
water	36:22	0:0	4	rgb
op	36:25	0:0	4	[
water	36:26	0:0	4	bg
op	36:28	0:0	4	[
water	36:29	0:0	4	pat
op	36:32	0:0	4	]
op	36:33	0:0	4	.
water	36:34	0:0	4	rgb1_min
op	36:42	0:0	4	]
op	36:43	0:0	4	.
water	36:44	0:0	4	g
decl	37:8	37:45	4	uch	b1_min
op	37:20	0:0	4	=
water	37:22	0:0	4	rgb
op	37:25	0:0	4	[
water	37:26	0:0	4	bg
op	37:28	0:0	4	[
water	37:29	0:0	4	pat
op	37:32	0:0	4	]
op	37:33	0:0	4	.
water	37:34	0:0	4	rgb1_min
op	37:42	0:0	4	]
op	37:43	0:0	4	.
water	37:44	0:0	4	b
decl	38:8	38:45	4	uch	r2_min
op	38:20	0:0	4	=
water	38:22	0:0	4	rgb
op	38:25	0:0	4	[
water	38:26	0:0	4	bg
op	38:28	0:0	4	[
water	38:29	0:0	4	pat
op	38:32	0:0	4	]
op	38:33	0:0	4	.
water	38:34	0:0	4	rgb2_min
op	38:42	0:0	4	]
op	38:43	0:0	4	.
water	38:44	0:0	4	r
decl	39:8	39:45	4	uch	g2_min
op	39:20	0:0	4	=
water	39:22	0:0	4	rgb
op	39:25	0:0	4	[
water	39:26	0:0	4	bg
op	39:28	0:0	4	[
water	39:29	0:0	4	pat
op	39:32	0:0	4	]
op	39:33	0:0	4	.
water	39:34	0:0	4	rgb2_min
op	39:42	0:0	4	]
op	39:43	0:0	4	.
water	39:44	0:0	4	g
decl	40:8	40:45	4	uch	b2_min
op	40:20	0:0	4	=
water	40:22	0:0	4	rgb
op	40:25	0:0	4	[
water	40:26	0:0	4	bg
op	40:28	0:0	4	[
water	40:29	0:0	4	pat
op	40:32	0:0	4	]
op	40:33	0:0	4	.
water	40:34	0:0	4	rgb2_min
op	40:42	0:0	4	]
op	40:43	0:0	4	.
water	40:44	0:0	4	b
decl	41:8	41:54	4	int	r1_diff
op	41:20	0:0	4	=
water	41:22	0:0	4	rgb
op	41:25	0:0	4	[
water	41:26	0:0	4	bg
op	41:28	0:0	4	[
water	41:29	0:0	4	pat
op	41:32	0:0	4	]
op	41:33	0:0	4	.
water	41:34	0:0	4	rgb1_max
op	41:42	0:0	4	]
op	41:43	0:0	4	.
water	41:44	0:0	4	r
op	41:46	0:0	4	-
water	41:48	0:0	4	r1_min
decl	42:8	42:54	4	int	g1_diff
op	42:20	0:0	4	=
water	42:22	0:0	4	rgb
op	42:25	0:0	4	[
water	42:26	0:0	4	bg
op	42:28	0:0	4	[
water	42:29	0:0	4	pat
op	42:32	0:0	4	]
op	42:33	0:0	4	.
water	42:34	0:0	4	rgb1_max
op	42:42	0:0	4	]
op	42:43	0:0	4	.
water	42:44	0:0	4	g
op	42:46	0:0	4	-
water	42:48	0:0	4	g1_min
decl	43:8	43:54	4	int	b1_diff
op	43:20	0:0	4	=
water	43:22	0:0	4	rgb
op	43:25	0:0	4	[
water	43:26	0:0	4	bg
op	43:28	0:0	4	[
water	43:29	0:0	4	pat
op	43:32	0:0	4	]
op	43:33	0:0	4	.
water	43:34	0:0	4	rgb1_max
op	43:42	0:0	4	]
op	43:43	0:0	4	.
water	43:44	0:0	4	b
op	43:46	0:0	4	-
water	43:48	0:0	4	b1_min
decl	44:8	44:54	4	int	r2_diff
op	44:20	0:0	4	=
water	44:22	0:0	4	rgb
op	44:25	0:0	4	[
water	44:26	0:0	4	bg
op	44:28	0:0	4	[
water	44:29	0:0	4	pat
op	44:32	0:0	4	]
op	44:33	0:0	4	.
water	44:34	0:0	4	rgb2_max
op	44:42	0:0	4	]
op	44:43	0:0	4	.
water	44:44	0:0	4	r
op	44:46	0:0	4	-
water	44:48	0:0	4	r2_min
decl	45:8	45:54	4	int	g2_diff
op	45:20	0:0	4	=
water	45:22	0:0	4	rgb
op	45:25	0:0	4	[
water	45:26	0:0	4	bg
op	45:28	0:0	4	[
water	45:29	0:0	4	pat
op	45:32	0:0	4	]
op	45:33	0:0	4	.
water	45:34	0:0	4	rgb2_max
op	45:42	0:0	4	]
op	45:43	0:0	4	.
water	45:44	0:0	4	g
op	45:46	0:0	4	-
water	45:48	0:0	4	g2_min
decl	46:8	46:54	4	int	b2_diff
op	46:20	0:0	4	=
water	46:22	0:0	4	rgb
op	46:25	0:0	4	[
water	46:26	0:0	4	bg
op	46:28	0:0	4	[
water	46:29	0:0	4	pat
op	46:32	0:0	4	]
op	46:33	0:0	4	.
water	46:34	0:0	4	rgb2_max
op	46:42	0:0	4	]
op	46:43	0:0	4	.
water	46:44	0:0	4	b
op	46:46	0:0	4	-
water	46:48	0:0	4	b2_min
for	47:8	92:8	4	(row = 0 ;row < rpng2_info . height;++ row)
forinit	47:13	47:20	5	row = 0 ;
water	47:13	0:0	6	row
op	47:17	0:0	6	=
water	47:19	0:0	6	0
water	47:20	0:0	6	;
cond	47:23	47:40	5	row < rpng2_info . height
water	47:23	0:0	6	row
op	47:27	0:0	6	<
water	47:29	0:0	6	rpng2_info
op	47:39	0:0	6	.
water	47:40	0:0	6	height
forexpr	47:49	47:51	5	++ row
op	47:49	0:0	6	++
water	47:51	0:0	6	row
stmts	47:56	92:8	5	
water	47:56	0:0	6	{
water	48:12	0:0	6	yidx
op	48:17	0:0	6	=
call	48:19	48:38	6	(int)
arg	48:25	48:38	7	row%bgscale
water	48:25	0:0	8	row
op	48:29	0:0	8	%
water	48:31	0:0	8	bgscale
water	48:39	0:0	6	;
water	49:12	0:0	6	even_odd_vert
op	49:26	0:0	6	=
call	49:28	49:53	6	(int)
arg	49:34	49:53	7	(row/bgscale)&1
water	49:34	0:0	8	(
water	49:35	0:0	8	row
op	49:39	0:0	8	/
water	49:41	0:0	8	bgscale
water	49:48	0:0	8	)
op	49:50	0:0	8	&
water	49:52	0:0	8	1
water	49:54	0:0	6	;
water	50:12	0:0	6	r1
op	50:15	0:0	6	=
water	50:17	0:0	6	r1_min
op	50:24	0:0	6	+
water	50:26	0:0	6	(
water	50:27	0:0	6	r1_diff
op	50:35	0:0	6	*
water	50:37	0:0	6	yidx
water	50:41	0:0	6	)
op	50:43	0:0	6	/
water	50:45	0:0	6	yidx_max
water	50:53	0:0	6	;
water	51:12	0:0	6	g1
op	51:15	0:0	6	=
water	51:17	0:0	6	g1_min
op	51:24	0:0	6	+
water	51:26	0:0	6	(
water	51:27	0:0	6	g1_diff
op	51:35	0:0	6	*
water	51:37	0:0	6	yidx
water	51:41	0:0	6	)
op	51:43	0:0	6	/
water	51:45	0:0	6	yidx_max
water	51:53	0:0	6	;
water	52:12	0:0	6	b1
op	52:15	0:0	6	=
water	52:17	0:0	6	b1_min
op	52:24	0:0	6	+
water	52:26	0:0	6	(
water	52:27	0:0	6	b1_diff
op	52:35	0:0	6	*
water	52:37	0:0	6	yidx
water	52:41	0:0	6	)
op	52:43	0:0	6	/
water	52:45	0:0	6	yidx_max
water	52:53	0:0	6	;
water	53:12	0:0	6	r1_inv
op	53:19	0:0	6	=
water	53:21	0:0	6	r1_min
op	53:28	0:0	6	+
water	53:30	0:0	6	(
water	53:31	0:0	6	r1_diff
op	53:39	0:0	6	*
water	53:41	0:0	6	(
water	53:42	0:0	6	yidx_max
op	53:50	0:0	6	-
water	53:51	0:0	6	yidx
water	53:55	0:0	6	)
water	53:56	0:0	6	)
op	53:58	0:0	6	/
water	53:60	0:0	6	yidx_max
water	53:68	0:0	6	;
water	54:12	0:0	6	g1_inv
op	54:19	0:0	6	=
water	54:21	0:0	6	g1_min
op	54:28	0:0	6	+
water	54:30	0:0	6	(
water	54:31	0:0	6	g1_diff
op	54:39	0:0	6	*
water	54:41	0:0	6	(
water	54:42	0:0	6	yidx_max
op	54:50	0:0	6	-
water	54:51	0:0	6	yidx
water	54:55	0:0	6	)
water	54:56	0:0	6	)
op	54:58	0:0	6	/
water	54:60	0:0	6	yidx_max
water	54:68	0:0	6	;
water	55:12	0:0	6	b1_inv
op	55:19	0:0	6	=
water	55:21	0:0	6	b1_min
op	55:28	0:0	6	+
water	55:30	0:0	6	(
water	55:31	0:0	6	b1_diff
op	55:39	0:0	6	*
water	55:41	0:0	6	(
water	55:42	0:0	6	yidx_max
op	55:50	0:0	6	-
water	55:51	0:0	6	yidx
water	55:55	0:0	6	)
water	55:56	0:0	6	)
op	55:58	0:0	6	/
water	55:60	0:0	6	yidx_max
water	55:68	0:0	6	;
water	56:12	0:0	6	r2
op	56:15	0:0	6	=
water	56:17	0:0	6	r2_min
op	56:24	0:0	6	+
water	56:26	0:0	6	(
water	56:27	0:0	6	r2_diff
op	56:35	0:0	6	*
water	56:37	0:0	6	yidx
water	56:41	0:0	6	)
op	56:43	0:0	6	/
water	56:45	0:0	6	yidx_max
water	56:53	0:0	6	;
water	57:12	0:0	6	g2
op	57:15	0:0	6	=
water	57:17	0:0	6	g2_min
op	57:24	0:0	6	+
water	57:26	0:0	6	(
water	57:27	0:0	6	g2_diff
op	57:35	0:0	6	*
water	57:37	0:0	6	yidx
water	57:41	0:0	6	)
op	57:43	0:0	6	/
water	57:45	0:0	6	yidx_max
water	57:53	0:0	6	;
water	58:12	0:0	6	b2
op	58:15	0:0	6	=
water	58:17	0:0	6	b2_min
op	58:24	0:0	6	+
water	58:26	0:0	6	(
water	58:27	0:0	6	b2_diff
op	58:35	0:0	6	*
water	58:37	0:0	6	yidx
water	58:41	0:0	6	)
op	58:43	0:0	6	/
water	58:45	0:0	6	yidx_max
water	58:53	0:0	6	;
water	59:12	0:0	6	r2_inv
op	59:19	0:0	6	=
water	59:21	0:0	6	r2_min
op	59:28	0:0	6	+
water	59:30	0:0	6	(
water	59:31	0:0	6	r2_diff
op	59:39	0:0	6	*
water	59:41	0:0	6	(
water	59:42	0:0	6	yidx_max
op	59:50	0:0	6	-
water	59:51	0:0	6	yidx
water	59:55	0:0	6	)
water	59:56	0:0	6	)
op	59:58	0:0	6	/
water	59:60	0:0	6	yidx_max
water	59:68	0:0	6	;
water	60:12	0:0	6	g2_inv
op	60:19	0:0	6	=
water	60:21	0:0	6	g2_min
op	60:28	0:0	6	+
water	60:30	0:0	6	(
water	60:31	0:0	6	g2_diff
op	60:39	0:0	6	*
water	60:41	0:0	6	(
water	60:42	0:0	6	yidx_max
op	60:50	0:0	6	-
water	60:51	0:0	6	yidx
water	60:55	0:0	6	)
water	60:56	0:0	6	)
op	60:58	0:0	6	/
water	60:60	0:0	6	yidx_max
water	60:68	0:0	6	;
water	61:12	0:0	6	b2_inv
op	61:19	0:0	6	=
water	61:21	0:0	6	b2_min
op	61:28	0:0	6	+
water	61:30	0:0	6	(
water	61:31	0:0	6	b2_diff
op	61:39	0:0	6	*
water	61:41	0:0	6	(
water	61:42	0:0	6	yidx_max
op	61:50	0:0	6	-
water	61:51	0:0	6	yidx
water	61:55	0:0	6	)
water	61:56	0:0	6	)
op	61:58	0:0	6	/
water	61:60	0:0	6	yidx_max
water	61:68	0:0	6	;
water	62:12	0:0	6	dest
op	62:17	0:0	6	=
water	62:19	0:0	6	(
water	62:20	0:0	6	char
op	62:25	0:0	6	*
water	62:26	0:0	6	)
water	62:27	0:0	6	bg_data
op	62:35	0:0	6	+
water	62:37	0:0	6	row
op	62:40	0:0	6	*
water	62:41	0:0	6	bg_rowbytes
water	62:52	0:0	6	;
for	63:12	91:12	6	(i = 0 ;i < rpng2_info . width;++ i)
forinit	63:17	63:22	7	i = 0 ;
water	63:17	0:0	8	i
op	63:19	0:0	8	=
water	63:21	0:0	8	0
water	63:22	0:0	8	;
cond	63:25	63:40	7	i < rpng2_info . width
water	63:25	0:0	8	i
op	63:27	0:0	8	<
water	63:29	0:0	8	rpng2_info
op	63:39	0:0	8	.
water	63:40	0:0	8	width
forexpr	63:48	63:50	7	++ i
op	63:48	0:0	8	++
water	63:50	0:0	8	i
stmts	63:53	91:12	7	
water	63:53	0:0	8	{
water	64:16	0:0	8	even_odd_horiz
op	64:31	0:0	8	=
call	64:33	64:56	8	(int)
arg	64:39	64:56	9	(i/bgscale)&1
water	64:39	0:0	10	(
water	64:40	0:0	10	i
op	64:42	0:0	10	/
water	64:44	0:0	10	bgscale
water	64:51	0:0	10	)
op	64:53	0:0	10	&
water	64:55	0:0	10	1
water	64:57	0:0	8	;
water	65:16	0:0	8	even_odd
op	65:25	0:0	8	=
water	65:27	0:0	8	even_odd_vert
op	65:41	0:0	8	^
water	65:43	0:0	8	even_odd_horiz
water	65:57	0:0	8	;
water	66:16	0:0	8	invert_column
op	66:30	0:0	8	=
water	67:18	0:0	8	(
water	67:19	0:0	8	even_odd_horiz
op	67:34	0:0	8	&&
water	67:37	0:0	8	(
water	67:38	0:0	8	bg
op	67:40	0:0	8	[
water	67:41	0:0	8	pat
op	67:44	0:0	8	]
op	67:45	0:0	8	.
water	67:46	0:0	8	type
op	67:51	0:0	8	&
water	67:53	0:0	8	0
water	67:54	0:0	8	x10
water	67:57	0:0	8	)
water	67:58	0:0	8	)
water	67:59	0:0	8	;
if	68:16	78:16	8	(even_odd == 0)
cond	68:20	68:32	9	even_odd == 0
water	68:20	0:0	10	even_odd
op	68:29	0:0	10	==
water	68:32	0:0	10	0
stmts	68:35	78:16	9	
water	68:35	0:0	10	{
if	69:20	73:20	10	(invert_column)
cond	69:24	69:24	11	invert_column
water	69:24	0:0	12	invert_column
stmts	69:39	73:20	11	
water	69:39	0:0	12	{
op	70:24	0:0	12	*
water	70:25	0:0	12	dest
op	70:29	0:0	12	++
op	70:32	0:0	12	=
water	70:34	0:0	12	r1_inv
water	70:40	0:0	12	;
op	71:24	0:0	12	*
water	71:25	0:0	12	dest
op	71:29	0:0	12	++
op	71:32	0:0	12	=
water	71:34	0:0	12	g1_inv
water	71:40	0:0	12	;
op	72:24	0:0	12	*
water	72:25	0:0	12	dest
op	72:29	0:0	12	++
op	72:32	0:0	12	=
water	72:34	0:0	12	b1_inv
water	72:40	0:0	12	;
water	73:20	0:0	12	}
else	73:22	77:20	10
stmts	73:27	77:20	11	
water	73:27	0:0	12	{
op	74:24	0:0	12	*
water	74:25	0:0	12	dest
op	74:29	0:0	12	++
op	74:32	0:0	12	=
water	74:34	0:0	12	r1
water	74:36	0:0	12	;
op	75:24	0:0	12	*
water	75:25	0:0	12	dest
op	75:29	0:0	12	++
op	75:32	0:0	12	=
water	75:34	0:0	12	g1
water	75:36	0:0	12	;
op	76:24	0:0	12	*
water	76:25	0:0	12	dest
op	76:29	0:0	12	++
op	76:32	0:0	12	=
water	76:34	0:0	12	b1
water	76:36	0:0	12	;
water	77:20	0:0	12	}
water	78:16	0:0	10	}
else	78:18	90:16	8
stmts	78:23	90:16	9	
water	78:23	0:0	10	{
if	79:20	85:20	10	(( invert_column && invert_gradient2 ) || ( ! invert_column && ! invert_gradient2 ))
cond	79:24	80:60	11	( invert_column && invert_gradient2 ) || ( ! invert_column && ! invert_gradient2 )
water	79:24	0:0	12	(
water	79:25	0:0	12	invert_column
op	79:39	0:0	12	&&
water	79:42	0:0	12	invert_gradient2
water	79:58	0:0	12	)
op	79:60	0:0	12	||
water	80:24	0:0	12	(
op	80:25	0:0	12	!
water	80:26	0:0	12	invert_column
op	80:40	0:0	12	&&
op	80:43	0:0	12	!
water	80:44	0:0	12	invert_gradient2
water	80:60	0:0	12	)
stmts	81:20	85:20	11	
water	81:20	0:0	12	{
op	82:24	0:0	12	*
water	82:25	0:0	12	dest
op	82:29	0:0	12	++
op	82:32	0:0	12	=
water	82:34	0:0	12	r2
water	82:36	0:0	12	;
op	83:24	0:0	12	*
water	83:25	0:0	12	dest
op	83:29	0:0	12	++
op	83:32	0:0	12	=
water	83:34	0:0	12	g2
water	83:36	0:0	12	;
op	84:24	0:0	12	*
water	84:25	0:0	12	dest
op	84:29	0:0	12	++
op	84:32	0:0	12	=
water	84:34	0:0	12	b2
water	84:36	0:0	12	;
water	85:20	0:0	12	}
else	85:22	89:20	10
stmts	85:27	89:20	11	
water	85:27	0:0	12	{
op	86:24	0:0	12	*
water	86:25	0:0	12	dest
op	86:29	0:0	12	++
op	86:32	0:0	12	=
water	86:34	0:0	12	r2_inv
water	86:40	0:0	12	;
op	87:24	0:0	12	*
water	87:25	0:0	12	dest
op	87:29	0:0	12	++
op	87:32	0:0	12	=
water	87:34	0:0	12	g2_inv
water	87:40	0:0	12	;
op	88:24	0:0	12	*
water	88:25	0:0	12	dest
op	88:29	0:0	12	++
op	88:32	0:0	12	=
water	88:34	0:0	12	b2_inv
water	88:40	0:0	12	;
water	89:20	0:0	12	}
water	90:16	0:0	10	}
water	91:12	0:0	8	}
water	92:8	0:0	6	}
water	97:4	0:0	4	}
else	97:6	126:4	2
stmts	97:11	126:4	3	
if	97:11	126:4	4	(( bg [ pat ] . type & 0 x07 ) == 1)
cond	97:15	97:40	5	( bg [ pat ] . type & 0 x07 ) == 1
water	97:15	0:0	6	(
water	97:16	0:0	6	bg
op	97:18	0:0	6	[
water	97:19	0:0	6	pat
op	97:22	0:0	6	]
op	97:23	0:0	6	.
water	97:24	0:0	6	type
op	97:29	0:0	6	&
water	97:31	0:0	6	0
water	97:32	0:0	6	x07
water	97:35	0:0	6	)
op	97:37	0:0	6	==
water	97:40	0:0	6	1
stmts	97:43	126:4	5	
water	97:43	0:0	6	{
water	98:8	0:0	6	hmax
op	98:13	0:0	6	=
water	98:15	0:0	6	(
water	98:16	0:0	6	bgscale
op	98:23	0:0	6	-
water	98:24	0:0	6	1
water	98:25	0:0	6	)
op	98:26	0:0	6	/
water	98:27	0:0	6	2
water	98:28	0:0	6	;
water	99:8	0:0	6	max
op	99:12	0:0	6	=
water	99:14	0:0	6	2
op	99:15	0:0	6	*
water	99:16	0:0	6	hmax
water	99:20	0:0	6	;
water	100:8	0:0	6	r1
op	100:11	0:0	6	=
water	100:13	0:0	6	rgb
op	100:16	0:0	6	[
water	100:17	0:0	6	bg
op	100:19	0:0	6	[
water	100:20	0:0	6	pat
op	100:23	0:0	6	]
op	100:24	0:0	6	.
water	100:25	0:0	6	rgb1_max
op	100:33	0:0	6	]
op	100:34	0:0	6	.
water	100:35	0:0	6	r
water	100:36	0:0	6	;
water	101:8	0:0	6	g1
op	101:11	0:0	6	=
water	101:13	0:0	6	rgb
op	101:16	0:0	6	[
water	101:17	0:0	6	bg
op	101:19	0:0	6	[
water	101:20	0:0	6	pat
op	101:23	0:0	6	]
op	101:24	0:0	6	.
water	101:25	0:0	6	rgb1_max
op	101:33	0:0	6	]
op	101:34	0:0	6	.
water	101:35	0:0	6	g
water	101:36	0:0	6	;
water	102:8	0:0	6	b1
op	102:11	0:0	6	=
water	102:13	0:0	6	rgb
op	102:16	0:0	6	[
water	102:17	0:0	6	bg
op	102:19	0:0	6	[
water	102:20	0:0	6	pat
op	102:23	0:0	6	]
op	102:24	0:0	6	.
water	102:25	0:0	6	rgb1_max
op	102:33	0:0	6	]
op	102:34	0:0	6	.
water	102:35	0:0	6	b
water	102:36	0:0	6	;
water	103:8	0:0	6	r2
op	103:11	0:0	6	=
water	103:13	0:0	6	rgb
op	103:16	0:0	6	[
water	103:17	0:0	6	bg
op	103:19	0:0	6	[
water	103:20	0:0	6	pat
op	103:23	0:0	6	]
op	103:24	0:0	6	.
water	103:25	0:0	6	rgb2_max
op	103:33	0:0	6	]
op	103:34	0:0	6	.
water	103:35	0:0	6	r
water	103:36	0:0	6	;
water	104:8	0:0	6	g2
op	104:11	0:0	6	=
water	104:13	0:0	6	rgb
op	104:16	0:0	6	[
water	104:17	0:0	6	bg
op	104:19	0:0	6	[
water	104:20	0:0	6	pat
op	104:23	0:0	6	]
op	104:24	0:0	6	.
water	104:25	0:0	6	rgb2_max
op	104:33	0:0	6	]
op	104:34	0:0	6	.
water	104:35	0:0	6	g
water	104:36	0:0	6	;
water	105:8	0:0	6	b2
op	105:11	0:0	6	=
water	105:13	0:0	6	rgb
op	105:16	0:0	6	[
water	105:17	0:0	6	bg
op	105:19	0:0	6	[
water	105:20	0:0	6	pat
op	105:23	0:0	6	]
op	105:24	0:0	6	.
water	105:25	0:0	6	rgb2_max
op	105:33	0:0	6	]
op	105:34	0:0	6	.
water	105:35	0:0	6	b
water	105:36	0:0	6	;
for	106:8	120:8	6	(row = 0 ;row < rpng2_info . height;++ row)
forinit	106:13	106:20	7	row = 0 ;
water	106:13	0:0	8	row
op	106:17	0:0	8	=
water	106:19	0:0	8	0
water	106:20	0:0	8	;
cond	106:23	106:40	7	row < rpng2_info . height
water	106:23	0:0	8	row
op	106:27	0:0	8	<
water	106:29	0:0	8	rpng2_info
op	106:39	0:0	8	.
water	106:40	0:0	8	height
forexpr	106:49	106:51	7	++ row
op	106:49	0:0	8	++
water	106:51	0:0	8	row
stmts	106:56	120:8	7	
water	106:56	0:0	8	{
water	107:12	0:0	8	yidx
op	107:17	0:0	8	=
call	107:19	107:38	8	(int)
arg	107:25	107:38	9	row%bgscale
water	107:25	0:0	10	row
op	107:29	0:0	10	%
water	107:31	0:0	10	bgscale
water	107:39	0:0	8	;
if	108:12	109:39	8	(yidx > hmax)
cond	108:16	108:23	9	yidx > hmax
water	108:16	0:0	10	yidx
op	108:21	0:0	10	>
water	108:23	0:0	10	hmax
stmts	109:16	109:39	9	
water	109:16	0:0	10	yidx
op	109:21	0:0	10	=
water	109:23	0:0	10	bgscale
op	109:30	0:0	10	-
water	109:31	0:0	10	1
op	109:33	0:0	10	-
water	109:35	0:0	10	yidx
water	109:39	0:0	10	;
water	110:12	0:0	8	dest
op	110:17	0:0	8	=
water	110:19	0:0	8	(
water	110:20	0:0	8	char
op	110:25	0:0	8	*
water	110:26	0:0	8	)
water	110:27	0:0	8	bg_data
op	110:35	0:0	8	+
water	110:37	0:0	8	row
op	110:40	0:0	8	*
water	110:41	0:0	8	bg_rowbytes
water	110:52	0:0	8	;
for	111:12	119:12	8	(i = 0 ;i < rpng2_info . width;++ i)
forinit	111:17	111:22	9	i = 0 ;
water	111:17	0:0	10	i
op	111:19	0:0	10	=
water	111:21	0:0	10	0
water	111:22	0:0	10	;
cond	111:25	111:40	9	i < rpng2_info . width
water	111:25	0:0	10	i
op	111:27	0:0	10	<
water	111:29	0:0	10	rpng2_info
op	111:39	0:0	10	.
water	111:40	0:0	10	width
forexpr	111:48	111:50	9	++ i
op	111:48	0:0	10	++
water	111:50	0:0	10	i
stmts	111:53	119:12	9	
water	111:53	0:0	10	{
water	112:16	0:0	10	xidx
op	112:21	0:0	10	=
call	112:23	112:40	10	(int)
arg	112:29	112:40	11	i%bgscale
water	112:29	0:0	12	i
op	112:31	0:0	12	%
water	112:33	0:0	12	bgscale
water	112:41	0:0	10	;
if	113:16	114:43	10	(xidx > hmax)
cond	113:20	113:27	11	xidx > hmax
water	113:20	0:0	12	xidx
op	113:25	0:0	12	>
water	113:27	0:0	12	hmax
stmts	114:20	114:43	11	
water	114:20	0:0	12	xidx
op	114:25	0:0	12	=
water	114:27	0:0	12	bgscale
op	114:34	0:0	12	-
water	114:35	0:0	12	1
op	114:37	0:0	12	-
water	114:39	0:0	12	xidx
water	114:43	0:0	12	;
water	115:16	0:0	10	k
op	115:18	0:0	10	=
water	115:20	0:0	10	xidx
op	115:25	0:0	10	+
water	115:27	0:0	10	yidx
water	115:31	0:0	10	;
op	116:16	0:0	10	*
water	116:17	0:0	10	dest
op	116:21	0:0	10	++
op	116:24	0:0	10	=
water	116:26	0:0	10	(
water	116:27	0:0	10	k
op	116:28	0:0	10	*
water	116:29	0:0	10	r1
op	116:32	0:0	10	+
water	116:34	0:0	10	(
water	116:35	0:0	10	max
op	116:38	0:0	10	-
water	116:39	0:0	10	k
water	116:40	0:0	10	)
op	116:41	0:0	10	*
water	116:42	0:0	10	r2
water	116:44	0:0	10	)
op	116:46	0:0	10	/
water	116:48	0:0	10	max
water	116:51	0:0	10	;
op	117:16	0:0	10	*
water	117:17	0:0	10	dest
op	117:21	0:0	10	++
op	117:24	0:0	10	=
water	117:26	0:0	10	(
water	117:27	0:0	10	k
op	117:28	0:0	10	*
water	117:29	0:0	10	g1
op	117:32	0:0	10	+
water	117:34	0:0	10	(
water	117:35	0:0	10	max
op	117:38	0:0	10	-
water	117:39	0:0	10	k
water	117:40	0:0	10	)
op	117:41	0:0	10	*
water	117:42	0:0	10	g2
water	117:44	0:0	10	)
op	117:46	0:0	10	/
water	117:48	0:0	10	max
water	117:51	0:0	10	;
op	118:16	0:0	10	*
water	118:17	0:0	10	dest
op	118:21	0:0	10	++
op	118:24	0:0	10	=
water	118:26	0:0	10	(
water	118:27	0:0	10	k
op	118:28	0:0	10	*
water	118:29	0:0	10	b1
op	118:32	0:0	10	+
water	118:34	0:0	10	(
water	118:35	0:0	10	max
op	118:38	0:0	10	-
water	118:39	0:0	10	k
water	118:40	0:0	10	)
op	118:41	0:0	10	*
water	118:42	0:0	10	b2
water	118:44	0:0	10	)
op	118:46	0:0	10	/
water	118:48	0:0	10	max
water	118:51	0:0	10	;
water	119:12	0:0	10	}
water	120:8	0:0	8	}
water	126:4	0:0	6	}
else	126:6	196:4	2
stmts	126:11	196:4	3	
if	126:11	196:4	4	(( bg [ pat ] . type & 0 x07 ) == 2)
cond	126:15	126:40	5	( bg [ pat ] . type & 0 x07 ) == 2
water	126:15	0:0	6	(
water	126:16	0:0	6	bg
op	126:18	0:0	6	[
water	126:19	0:0	6	pat
op	126:22	0:0	6	]
op	126:23	0:0	6	.
water	126:24	0:0	6	type
op	126:29	0:0	6	&
water	126:31	0:0	6	0
water	126:32	0:0	6	x07
water	126:35	0:0	6	)
op	126:37	0:0	6	==
water	126:40	0:0	6	2
stmts	126:43	196:4	5	
water	126:43	0:0	6	{
decl	127:8	127:14	6	uch	ch
decl	128:8	128:38	6	int	ii
water	128:14	0:0	6	,
decl	128:8	128:38	6	int	x
water	128:17	0:0	6	,
decl	128:8	128:38	6	int	y
water	128:20	0:0	6	,
decl	128:8	128:38	6	int	hw
water	128:24	0:0	6	,
decl	128:8	128:38	6	int	hh
water	128:28	0:0	6	,
decl	128:8	128:38	6	int	grayspot
decl	129:8	129:54	6	double	freq
water	129:19	0:0	6	,
decl	129:8	129:54	6	double	rotate
water	129:27	0:0	6	,
decl	129:8	129:54	6	double	saturate
water	129:37	0:0	6	,
decl	129:8	129:54	6	double	gray
water	129:43	0:0	6	,
decl	129:8	129:54	6	double	intensity
decl	130:8	130:52	6	double	angle
op	130:20	0:0	6	=
water	130:21	0:0	6	0
op	130:22	0:0	6	.
water	130:23	0:0	6	0
water	130:24	0:0	6	,
decl	130:8	130:52	6	double	aoffset
op	130:33	0:0	6	=
water	130:34	0:0	6	0
op	130:35	0:0	6	.
water	130:36	0:0	6	0
water	130:37	0:0	6	,
decl	130:8	130:52	6	double	maxDist
water	130:46	0:0	6	,
decl	130:8	130:52	6	double	dist
decl	131:8	131:66	6	double	red
op	131:18	0:0	6	=
water	131:19	0:0	6	0
op	131:20	0:0	6	.
water	131:21	0:0	6	0
water	131:22	0:0	6	,
decl	131:8	131:66	6	double	green
op	131:29	0:0	6	=
water	131:30	0:0	6	0
op	131:31	0:0	6	.
water	131:32	0:0	6	0
water	131:33	0:0	6	,
decl	131:8	131:66	6	double	blue
op	131:39	0:0	6	=
water	131:40	0:0	6	0
op	131:41	0:0	6	.
water	131:42	0:0	6	0
water	131:43	0:0	6	,
decl	131:8	131:66	6	double	hue
water	131:48	0:0	6	,
decl	131:8	131:66	6	double	s
water	131:51	0:0	6	,
decl	131:8	131:66	6	double	v
water	131:54	0:0	6	,
decl	131:8	131:66	6	double	f
water	131:57	0:0	6	,
decl	131:8	131:66	6	double	p
water	131:60	0:0	6	,
decl	131:8	131:66	6	double	q
water	131:63	0:0	6	,
decl	131:8	131:66	6	double	t
call	132:8	133:18	6	fprintf
arg	132:16	132:22	7	stderr
water	132:16	0:0	8	stderr
arg	132:24	132:61	7	"%s:  computing radial background..."
water	132:24	0:0	8	"%s:  computing radial background..."
arg	133:10	133:18	7	PROGNAME
water	133:10	0:0	8	PROGNAME
water	133:19	0:0	6	;
call	134:8	134:21	6	fflush
arg	134:15	134:21	7	stderr
water	134:15	0:0	8	stderr
water	134:22	0:0	6	;
water	135:8	0:0	6	hh
op	135:11	0:0	6	=
call	135:13	135:40	6	(int)
arg	135:19	135:40	7	rpng2_info.height/2
water	135:19	0:0	8	rpng2_info
op	135:29	0:0	8	.
water	135:30	0:0	8	height
op	135:37	0:0	8	/
water	135:39	0:0	8	2
water	135:41	0:0	6	;
water	136:8	0:0	6	hw
op	136:11	0:0	6	=
call	136:13	136:39	6	(int)
arg	136:19	136:39	7	rpng2_info.width/2
water	136:19	0:0	8	rpng2_info
op	136:29	0:0	8	.
water	136:30	0:0	8	width
op	136:36	0:0	8	/
water	136:38	0:0	8	2
water	136:40	0:0	6	;
water	144:8	0:0	6	angle
op	144:14	0:0	6	=
call	144:16	144:38	6	CLIP
arg	144:21	144:26	7	angle
water	144:21	0:0	8	angle
arg	144:28	144:31	7	0.0
water	144:28	0:0	8	0
op	144:29	0:0	8	.
water	144:30	0:0	8	0
arg	144:33	144:38	7	360.0
water	144:33	0:0	8	360
op	144:36	0:0	8	.
water	144:37	0:0	8	0
water	144:39	0:0	6	;
water	145:8	0:0	6	grayspot
op	145:17	0:0	6	=
call	145:19	145:53	6	CLIP
arg	145:24	145:39	7	bg[pat].bg_gray
water	145:24	0:0	8	bg
op	145:26	0:0	8	[
water	145:27	0:0	8	pat
op	145:30	0:0	8	]
op	145:31	0:0	8	.
water	145:32	0:0	8	bg_gray
arg	145:41	145:42	7	1
water	145:41	0:0	8	1
arg	145:44	145:53	7	(hh+hw)
water	145:44	0:0	8	(
water	145:45	0:0	8	hh
op	145:48	0:0	8	+
water	145:50	0:0	8	hw
water	145:52	0:0	8	)
water	145:54	0:0	6	;
water	146:8	0:0	6	freq
op	146:13	0:0	6	=
call	146:15	146:47	6	MAX
arg	146:19	146:42	7	(double)bg[pat].bg_freq
water	146:19	0:0	8	(
water	146:20	0:0	8	double
water	146:26	0:0	8	)
water	146:27	0:0	8	bg
op	146:29	0:0	8	[
water	146:30	0:0	8	pat
op	146:33	0:0	8	]
op	146:34	0:0	8	.
water	146:35	0:0	8	bg_freq
arg	146:44	146:47	7	0.0
water	146:44	0:0	8	0
op	146:45	0:0	8	.
water	146:46	0:0	8	0
water	146:48	0:0	6	;
water	147:8	0:0	6	saturate
op	147:17	0:0	6	=
water	147:19	0:0	6	(
water	147:20	0:0	6	double
water	147:26	0:0	6	)
water	147:27	0:0	6	bg
op	147:29	0:0	6	[
water	147:30	0:0	6	pat
op	147:33	0:0	6	]
op	147:34	0:0	6	.
water	147:35	0:0	6	bg_bsat
op	147:43	0:0	6	*
water	147:45	0:0	6	0
op	147:46	0:0	6	.
water	147:47	0:0	6	1
water	147:48	0:0	6	;
water	148:8	0:0	6	rotate
op	148:15	0:0	6	=
water	148:17	0:0	6	(
water	148:18	0:0	6	double
water	148:24	0:0	6	)
water	148:25	0:0	6	bg
op	148:27	0:0	6	[
water	148:28	0:0	6	pat
op	148:31	0:0	6	]
op	148:32	0:0	6	.
water	148:33	0:0	6	bg_brot
op	148:41	0:0	6	*
water	148:43	0:0	6	0
op	148:44	0:0	6	.
water	148:45	0:0	6	1
water	148:46	0:0	6	;
water	149:8	0:0	6	gray
op	149:13	0:0	6	=
water	149:15	0:0	6	0
op	149:16	0:0	6	.
water	149:17	0:0	6	0
water	149:18	0:0	6	;
water	150:8	0:0	6	intensity
op	150:18	0:0	6	=
water	150:20	0:0	6	0
op	150:21	0:0	6	.
water	150:22	0:0	6	0
water	150:23	0:0	6	;
water	151:8	0:0	6	maxDist
op	151:16	0:0	6	=
call	151:18	151:44	6	(double)
arg	151:27	151:44	7	(hw*hw)+(hh*hh)
water	151:27	0:0	8	(
water	151:28	0:0	8	hw
op	151:30	0:0	8	*
water	151:31	0:0	8	hw
water	151:33	0:0	8	)
op	151:35	0:0	8	+
water	151:37	0:0	8	(
water	151:38	0:0	8	hh
op	151:40	0:0	8	*
water	151:41	0:0	8	hh
water	151:43	0:0	8	)
water	151:45	0:0	6	;
for	152:8	193:8	6	(row = 0 ;row < rpng2_info . height;++ row)
forinit	152:13	152:20	7	row = 0 ;
water	152:13	0:0	8	row
op	152:17	0:0	8	=
water	152:19	0:0	8	0
water	152:20	0:0	8	;
cond	152:23	152:40	7	row < rpng2_info . height
water	152:23	0:0	8	row
op	152:27	0:0	8	<
water	152:29	0:0	8	rpng2_info
op	152:39	0:0	8	.
water	152:40	0:0	8	height
forexpr	152:49	152:51	7	++ row
op	152:49	0:0	8	++
water	152:51	0:0	8	row
stmts	152:56	193:8	7	
water	152:56	0:0	8	{
water	153:12	0:0	8	y
op	153:14	0:0	8	=
call	153:16	153:30	8	(int)
arg	153:22	153:30	9	row-hh
water	153:22	0:0	10	row
op	153:26	0:0	10	-
water	153:28	0:0	10	hh
water	153:31	0:0	8	;
water	154:12	0:0	8	dest
op	154:17	0:0	8	=
water	154:19	0:0	8	(
water	154:20	0:0	8	char
op	154:25	0:0	8	*
water	154:26	0:0	8	)
water	154:27	0:0	8	bg_data
op	154:35	0:0	8	+
water	154:37	0:0	8	row
op	154:40	0:0	8	*
water	154:41	0:0	8	bg_rowbytes
water	154:52	0:0	8	;
for	155:12	192:12	8	(i = 0 ;i < rpng2_info . width;++ i)
forinit	155:17	155:22	9	i = 0 ;
water	155:17	0:0	10	i
op	155:19	0:0	10	=
water	155:21	0:0	10	0
water	155:22	0:0	10	;
cond	155:25	155:40	9	i < rpng2_info . width
water	155:25	0:0	10	i
op	155:27	0:0	10	<
water	155:29	0:0	10	rpng2_info
op	155:39	0:0	10	.
water	155:40	0:0	10	width
forexpr	155:48	155:50	9	++ i
op	155:48	0:0	10	++
water	155:50	0:0	10	i
stmts	155:53	192:12	9	
water	155:53	0:0	10	{
water	156:16	0:0	10	x
op	156:18	0:0	10	=
call	156:20	156:32	10	(int)
arg	156:26	156:32	11	i-hw
water	156:26	0:0	12	i
op	156:28	0:0	12	-
water	156:30	0:0	12	hw
water	156:33	0:0	10	;
water	157:16	0:0	10	angle
op	157:22	0:0	10	=
water	157:24	0:0	10	(
water	157:25	0:0	10	x
op	157:27	0:0	10	==
water	157:30	0:0	10	0
water	157:31	0:0	10	)
water	157:32	0:0	10	?
water	157:34	0:0	10	PI_2
water	157:39	0:0	10	:
call	157:41	157:67	10	atan
arg	157:46	157:67	11	(double)y/(double)x
water	157:46	0:0	12	(
water	157:47	0:0	12	double
water	157:53	0:0	12	)
water	157:54	0:0	12	y
op	157:56	0:0	12	/
water	157:58	0:0	12	(
water	157:59	0:0	12	double
water	157:65	0:0	12	)
water	157:66	0:0	12	x
water	157:68	0:0	10	;
water	158:16	0:0	10	gray
op	158:21	0:0	10	=
water	158:23	0:0	10	(
water	158:24	0:0	10	double
water	158:30	0:0	10	)
call	158:31	158:49	10	MAX
arg	158:35	158:41	11	ABS(y)
call	158:35	158:40	12	ABS
arg	158:39	158:40	13	y
water	158:39	0:0	14	y
arg	158:43	158:49	11	ABS(x)
call	158:43	158:48	12	ABS
arg	158:47	158:48	13	x
water	158:47	0:0	14	x
op	158:51	0:0	10	/
water	158:53	0:0	10	grayspot
water	158:61	0:0	10	;
water	159:16	0:0	10	gray
op	159:21	0:0	10	=
call	159:23	159:36	10	MIN
arg	159:27	159:30	11	1.0
water	159:27	0:0	12	1
op	159:28	0:0	12	.
water	159:29	0:0	12	0
arg	159:32	159:36	11	gray
water	159:32	0:0	12	gray
water	159:37	0:0	10	;
water	160:16	0:0	10	dist
op	160:21	0:0	10	=
call	160:23	160:45	10	(double)
arg	160:32	160:45	11	(x*x)+(y*y)
water	160:32	0:0	12	(
water	160:33	0:0	12	x
op	160:34	0:0	12	*
water	160:35	0:0	12	x
water	160:36	0:0	12	)
op	160:38	0:0	12	+
water	160:40	0:0	12	(
water	160:41	0:0	12	y
op	160:42	0:0	12	*
water	160:43	0:0	12	y
water	160:44	0:0	12	)
op	160:47	0:0	10	/
water	160:49	0:0	10	maxDist
water	160:56	0:0	10	;
water	161:16	0:0	10	intensity
op	161:26	0:0	10	=
call	161:28	161:63	10	cos
arg	161:32	161:63	11	(angle+(rotate*dist*PI))*freq
water	161:32	0:0	12	(
water	161:33	0:0	12	angle
op	161:38	0:0	12	+
water	161:39	0:0	12	(
water	161:40	0:0	12	rotate
op	161:46	0:0	12	*
water	161:47	0:0	12	dist
op	161:51	0:0	12	*
water	161:52	0:0	12	PI
water	161:54	0:0	12	)
water	161:55	0:0	12	)
op	161:57	0:0	12	*
water	161:59	0:0	12	freq
op	161:65	0:0	10	*
water	162:18	0:0	10	gray
op	162:23	0:0	10	*
water	162:25	0:0	10	saturate
water	162:33	0:0	10	;
water	163:16	0:0	10	intensity
op	163:26	0:0	10	=
water	163:28	0:0	10	(
call	163:29	163:56	10	MAX
arg	163:33	163:51	11	MIN(intensity,1.0)
call	163:33	163:50	12	MIN
arg	163:37	163:46	13	intensity
water	163:37	0:0	14	intensity
arg	163:47	163:50	13	1.0
water	163:47	0:0	14	1
op	163:48	0:0	14	.
water	163:49	0:0	14	0
arg	163:52	163:56	11	-1.0
op	163:52	0:0	12	-
water	163:53	0:0	12	1
op	163:54	0:0	12	.
water	163:55	0:0	12	0
op	163:58	0:0	10	+
water	163:60	0:0	10	1
op	163:61	0:0	10	.
water	163:62	0:0	10	0
water	163:63	0:0	10	)
op	163:65	0:0	10	*
water	163:67	0:0	10	0
op	163:68	0:0	10	.
water	163:69	0:0	10	5
water	163:70	0:0	10	;
water	164:16	0:0	10	hue
op	164:20	0:0	10	=
water	164:22	0:0	10	(
water	164:23	0:0	10	angle
op	164:29	0:0	10	+
water	164:31	0:0	10	PI
water	164:33	0:0	10	)
op	164:35	0:0	10	*
water	164:37	0:0	10	INV_PI_360
op	164:48	0:0	10	+
water	164:50	0:0	10	aoffset
water	164:57	0:0	10	;
water	165:16	0:0	10	s
op	165:18	0:0	10	=
water	165:20	0:0	10	gray
op	165:25	0:0	10	*
water	165:27	0:0	10	(
call	165:28	165:50	10	(double)
arg	165:37	165:50	11	ABS(x)+ABS(y)
call	165:37	165:42	12	ABS
arg	165:41	165:42	13	x
water	165:41	0:0	14	x
op	165:43	0:0	12	+
call	165:44	165:49	12	ABS
arg	165:48	165:49	13	y
water	165:48	0:0	14	y
op	165:52	0:0	10	/
call	165:54	165:70	10	(double)
arg	165:63	165:70	11	hw+hh
water	165:63	0:0	12	hw
op	165:66	0:0	12	+
water	165:68	0:0	12	hh
water	165:71	0:0	10	)
water	165:72	0:0	10	;
water	166:16	0:0	10	s
op	166:18	0:0	10	=
call	166:20	166:39	10	MIN
arg	166:24	166:34	11	MAX(s,0.0)
call	166:24	166:33	12	MAX
arg	166:28	166:29	13	s
water	166:28	0:0	14	s
arg	166:30	166:33	13	0.0
water	166:30	0:0	14	0
op	166:31	0:0	14	.
water	166:32	0:0	14	0
arg	166:36	166:39	11	1.0
water	166:36	0:0	12	1
op	166:37	0:0	12	.
water	166:38	0:0	12	0
water	166:40	0:0	10	;
water	167:16	0:0	10	v
op	167:18	0:0	10	=
call	167:20	167:47	10	MIN
arg	167:24	167:42	11	MAX(intensity,0.0)
call	167:24	167:41	12	MAX
arg	167:28	167:37	13	intensity
water	167:28	0:0	14	intensity
arg	167:38	167:41	13	0.0
water	167:38	0:0	14	0
op	167:39	0:0	14	.
water	167:40	0:0	14	0
arg	167:44	167:47	11	1.0
water	167:44	0:0	12	1
op	167:45	0:0	12	.
water	167:46	0:0	12	0
water	167:48	0:0	10	;
if	168:16	173:16	10	(s == 0 . 0)
cond	168:20	168:27	11	s == 0 . 0
water	168:20	0:0	12	s
op	168:22	0:0	12	==
water	168:25	0:0	12	0
op	168:26	0:0	12	.
water	168:27	0:0	12	0
stmts	168:30	173:16	11	
water	168:30	0:0	12	{
water	169:20	0:0	12	ch
op	169:23	0:0	12	=
call	169:25	169:40	12	(uch)
arg	169:31	169:40	13	v*255.0
water	169:31	0:0	14	v
op	169:33	0:0	14	*
water	169:35	0:0	14	255
op	169:38	0:0	14	.
water	169:39	0:0	14	0
water	169:41	0:0	12	;
op	170:20	0:0	12	*
water	170:21	0:0	12	dest
op	170:25	0:0	12	++
op	170:28	0:0	12	=
water	170:30	0:0	12	ch
water	170:32	0:0	12	;
op	171:20	0:0	12	*
water	171:21	0:0	12	dest
op	171:25	0:0	12	++
op	171:28	0:0	12	=
water	171:30	0:0	12	ch
water	171:32	0:0	12	;
op	172:20	0:0	12	*
water	172:21	0:0	12	dest
op	172:25	0:0	12	++
op	172:28	0:0	12	=
water	172:30	0:0	12	ch
water	172:32	0:0	12	;
water	173:16	0:0	12	}
else	173:18	191:16	10
stmts	173:23	191:16	11	
water	173:23	0:0	12	{
if	174:20	175:61	12	(( hue < 0 . 0 ) || ( hue >= 360 . 0 ))
cond	174:24	174:52	13	( hue < 0 . 0 ) || ( hue >= 360 . 0 )
water	174:24	0:0	14	(
water	174:25	0:0	14	hue
op	174:29	0:0	14	<
water	174:31	0:0	14	0
op	174:32	0:0	14	.
water	174:33	0:0	14	0
water	174:34	0:0	14	)
op	174:36	0:0	14	||
water	174:39	0:0	14	(
water	174:40	0:0	14	hue
op	174:44	0:0	14	>=
water	174:47	0:0	14	360
op	174:50	0:0	14	.
water	174:51	0:0	14	0
water	174:52	0:0	14	)
stmts	175:24	175:61	13	
water	175:24	0:0	14	hue
op	175:28	0:0	14	-=
water	175:31	0:0	14	(
water	175:32	0:0	14	(
call	175:33	175:50	14	(int)
arg	175:39	175:50	15	hue/360.0
water	175:39	0:0	16	hue
op	175:43	0:0	16	/
water	175:45	0:0	16	360
op	175:48	0:0	16	.
water	175:49	0:0	16	0
water	175:51	0:0	14	)
op	175:53	0:0	14	*
water	175:55	0:0	14	360
op	175:58	0:0	14	.
water	175:59	0:0	14	0
water	175:60	0:0	14	)
water	175:61	0:0	14	;
water	176:20	0:0	12	hue
op	176:24	0:0	12	/=
water	176:27	0:0	12	60
op	176:29	0:0	12	.
water	176:30	0:0	12	0
water	176:31	0:0	12	;
water	177:20	0:0	12	ii
op	177:23	0:0	12	=
water	177:25	0:0	12	(
water	177:26	0:0	12	int
water	177:29	0:0	12	)
water	177:30	0:0	12	hue
water	177:33	0:0	12	;
water	178:20	0:0	12	f
op	178:22	0:0	12	=
water	178:24	0:0	12	hue
op	178:28	0:0	12	-
water	178:30	0:0	12	(
water	178:31	0:0	12	double
water	178:37	0:0	12	)
water	178:38	0:0	12	ii
water	178:40	0:0	12	;
water	179:20	0:0	12	p
op	179:22	0:0	12	=
water	179:24	0:0	12	(
water	179:25	0:0	12	1
op	179:26	0:0	12	.
water	179:27	0:0	12	0
op	179:29	0:0	12	-
water	179:31	0:0	12	s
water	179:32	0:0	12	)
op	179:34	0:0	12	*
water	179:36	0:0	12	v
water	179:37	0:0	12	;
water	180:20	0:0	12	q
op	180:22	0:0	12	=
water	180:24	0:0	12	(
water	180:25	0:0	12	1
op	180:26	0:0	12	.
water	180:27	0:0	12	0
op	180:29	0:0	12	-
water	180:31	0:0	12	(
water	180:32	0:0	12	s
op	180:34	0:0	12	*
water	180:36	0:0	12	f
water	180:37	0:0	12	)
water	180:38	0:0	12	)
op	180:40	0:0	12	*
water	180:42	0:0	12	v
water	180:43	0:0	12	;
water	181:20	0:0	12	t
op	181:22	0:0	12	=
water	181:24	0:0	12	(
water	181:25	0:0	12	1
op	181:26	0:0	12	.
water	181:27	0:0	12	0
op	181:29	0:0	12	-
water	181:31	0:0	12	(
water	181:32	0:0	12	s
op	181:34	0:0	12	*
water	181:36	0:0	12	(
water	181:37	0:0	12	1
op	181:38	0:0	12	.
water	181:39	0:0	12	0
op	181:41	0:0	12	-
water	181:43	0:0	12	f
water	181:44	0:0	12	)
water	181:45	0:0	12	)
water	181:46	0:0	12	)
op	181:48	0:0	12	*
water	181:50	0:0	12	v
water	181:51	0:0	12	;
if	182:20	182:70	12	(ii == 0)
cond	182:29	182:35	13	ii == 0
water	182:29	0:0	14	ii
op	182:32	0:0	14	==
water	182:35	0:0	14	0
stmts	182:38	182:70	13	
water	182:38	0:0	14	{
water	182:40	0:0	14	red
op	182:44	0:0	14	=
water	182:46	0:0	14	v
water	182:47	0:0	14	;
water	182:49	0:0	14	green
op	182:55	0:0	14	=
water	182:57	0:0	14	t
water	182:58	0:0	14	;
water	182:60	0:0	14	blue
op	182:65	0:0	14	=
water	182:67	0:0	14	p
water	182:68	0:0	14	;
water	182:70	0:0	14	}
else	183:20	183:70	12
stmts	183:25	183:70	13	
if	183:25	183:70	14	(ii == 1)
cond	183:29	183:35	15	ii == 1
water	183:29	0:0	16	ii
op	183:32	0:0	16	==
water	183:35	0:0	16	1
stmts	183:38	183:70	15	
water	183:38	0:0	16	{
water	183:40	0:0	16	red
op	183:44	0:0	16	=
water	183:46	0:0	16	q
water	183:47	0:0	16	;
water	183:49	0:0	16	green
op	183:55	0:0	16	=
water	183:57	0:0	16	v
water	183:58	0:0	16	;
water	183:60	0:0	16	blue
op	183:65	0:0	16	=
water	183:67	0:0	16	p
water	183:68	0:0	16	;
water	183:70	0:0	16	}
else	184:20	184:70	12
stmts	184:25	184:70	13	
if	184:25	184:70	14	(ii == 2)
cond	184:29	184:35	15	ii == 2
water	184:29	0:0	16	ii
op	184:32	0:0	16	==
water	184:35	0:0	16	2
stmts	184:38	184:70	15	
water	184:38	0:0	16	{
water	184:40	0:0	16	red
op	184:44	0:0	16	=
water	184:46	0:0	16	p
water	184:47	0:0	16	;
water	184:49	0:0	16	green
op	184:55	0:0	16	=
water	184:57	0:0	16	v
water	184:58	0:0	16	;
water	184:60	0:0	16	blue
op	184:65	0:0	16	=
water	184:67	0:0	16	t
water	184:68	0:0	16	;
water	184:70	0:0	16	}
else	185:20	185:70	12
stmts	185:25	185:70	13	
if	185:25	185:70	14	(ii == 3)
cond	185:29	185:35	15	ii == 3
water	185:29	0:0	16	ii
op	185:32	0:0	16	==
water	185:35	0:0	16	3
stmts	185:38	185:70	15	
water	185:38	0:0	16	{
water	185:40	0:0	16	red
op	185:44	0:0	16	=
water	185:46	0:0	16	p
water	185:47	0:0	16	;
water	185:49	0:0	16	green
op	185:55	0:0	16	=
water	185:57	0:0	16	q
water	185:58	0:0	16	;
water	185:60	0:0	16	blue
op	185:65	0:0	16	=
water	185:67	0:0	16	v
water	185:68	0:0	16	;
water	185:70	0:0	16	}
else	186:20	186:70	12
stmts	186:25	186:70	13	
if	186:25	186:70	14	(ii == 4)
cond	186:29	186:35	15	ii == 4
water	186:29	0:0	16	ii
op	186:32	0:0	16	==
water	186:35	0:0	16	4
stmts	186:38	186:70	15	
water	186:38	0:0	16	{
water	186:40	0:0	16	red
op	186:44	0:0	16	=
water	186:46	0:0	16	t
water	186:47	0:0	16	;
water	186:49	0:0	16	green
op	186:55	0:0	16	=
water	186:57	0:0	16	p
water	186:58	0:0	16	;
water	186:60	0:0	16	blue
op	186:65	0:0	16	=
water	186:67	0:0	16	v
water	186:68	0:0	16	;
water	186:70	0:0	16	}
else	187:20	187:70	12
stmts	187:25	187:70	13	
if	187:25	187:70	14	(ii == 5)
cond	187:29	187:35	15	ii == 5
water	187:29	0:0	16	ii
op	187:32	0:0	16	==
water	187:35	0:0	16	5
stmts	187:38	187:70	15	
water	187:38	0:0	16	{
water	187:40	0:0	16	red
op	187:44	0:0	16	=
water	187:46	0:0	16	v
water	187:47	0:0	16	;
water	187:49	0:0	16	green
op	187:55	0:0	16	=
water	187:57	0:0	16	p
water	187:58	0:0	16	;
water	187:60	0:0	16	blue
op	187:65	0:0	16	=
water	187:67	0:0	16	q
water	187:68	0:0	16	;
water	187:70	0:0	16	}
op	188:20	0:0	12	*
water	188:21	0:0	12	dest
op	188:25	0:0	12	++
op	188:28	0:0	12	=
call	188:30	188:47	12	(uch)
arg	188:36	188:47	13	red*255.0
water	188:36	0:0	14	red
op	188:40	0:0	14	*
water	188:42	0:0	14	255
op	188:45	0:0	14	.
water	188:46	0:0	14	0
water	188:48	0:0	12	;
op	189:20	0:0	12	*
water	189:21	0:0	12	dest
op	189:25	0:0	12	++
op	189:28	0:0	12	=
call	189:30	189:49	12	(uch)
arg	189:36	189:49	13	green*255.0
water	189:36	0:0	14	green
op	189:42	0:0	14	*
water	189:44	0:0	14	255
op	189:47	0:0	14	.
water	189:48	0:0	14	0
water	189:50	0:0	12	;
op	190:20	0:0	12	*
water	190:21	0:0	12	dest
op	190:25	0:0	12	++
op	190:28	0:0	12	=
call	190:30	190:48	12	(uch)
arg	190:36	190:48	13	blue*255.0
water	190:36	0:0	14	blue
op	190:41	0:0	14	*
water	190:43	0:0	14	255
op	190:46	0:0	14	.
water	190:47	0:0	14	0
water	190:49	0:0	12	;
water	191:16	0:0	12	}
water	192:12	0:0	10	}
water	193:8	0:0	8	}
call	194:8	194:33	6	fprintf
arg	194:16	194:22	7	stderr
water	194:16	0:0	8	stderr
arg	194:24	194:33	7	"done.\n"
water	194:24	0:0	8	"done.\n"
water	194:34	0:0	6	;
call	195:8	195:21	6	fflush
arg	195:15	195:21	7	stderr
water	195:15	0:0	8	stderr
water	195:22	0:0	6	;
water	196:4	0:0	6	}
if	200:4	237:4	2	(depth == 24 || depth == 32)
cond	200:8	200:32	3	depth == 24 || depth == 32
water	200:8	0:0	4	depth
op	200:14	0:0	4	==
water	200:17	0:0	4	24
op	200:20	0:0	4	||
water	200:23	0:0	4	depth
op	200:29	0:0	4	==
water	200:32	0:0	4	32
stmts	200:36	237:4	3	
water	200:36	0:0	4	{
decl	201:8	201:28	4	ulg	red
water	201:15	0:0	4	,
decl	201:8	201:28	4	ulg	green
water	201:22	0:0	4	,
decl	201:8	201:28	4	ulg	blue
decl	202:8	202:40	4	int	bpp
op	202:16	0:0	4	=
water	202:18	0:0	4	ximage
op	202:24	0:0	4	->
water	202:26	0:0	4	bits_per_pixel
for	203:8	236:8	4	(row = 0 ;row < rpng2_info . height;++ row)
forinit	203:13	203:20	5	row = 0 ;
water	203:13	0:0	6	row
op	203:17	0:0	6	=
water	203:19	0:0	6	0
water	203:20	0:0	6	;
cond	203:23	203:40	5	row < rpng2_info . height
water	203:23	0:0	6	row
op	203:27	0:0	6	<
water	203:29	0:0	6	rpng2_info
op	203:39	0:0	6	.
water	203:40	0:0	6	height
forexpr	203:49	203:51	5	++ row
op	203:49	0:0	6	++
water	203:51	0:0	6	row
stmts	203:56	236:8	5	
water	203:56	0:0	6	{
water	204:12	0:0	6	src
op	204:16	0:0	6	=
water	204:18	0:0	6	bg_data
op	204:26	0:0	6	+
water	204:28	0:0	6	row
op	204:31	0:0	6	*
water	204:32	0:0	6	bg_rowbytes
water	204:43	0:0	6	;
water	205:12	0:0	6	dest
op	205:17	0:0	6	=
water	205:19	0:0	6	ximage
op	205:25	0:0	6	->
water	205:27	0:0	6	data
op	205:32	0:0	6	+
water	205:34	0:0	6	row
op	205:37	0:0	6	*
water	205:38	0:0	6	ximage_rowbytes
water	205:53	0:0	6	;
if	206:12	220:12	6	(bpp == 32)
cond	206:16	206:23	7	bpp == 32
water	206:16	0:0	8	bpp
op	206:20	0:0	8	==
water	206:23	0:0	8	32
stmts	206:27	220:12	7	
water	206:27	0:0	8	{
for	207:16	219:16	8	(i = rpng2_info . width ;i > 0;-- i)
forinit	207:21	207:41	9	i = rpng2_info . width ;
water	207:21	0:0	10	i
op	207:23	0:0	10	=
water	207:25	0:0	10	rpng2_info
op	207:35	0:0	10	.
water	207:36	0:0	10	width
water	207:41	0:0	10	;
cond	207:44	207:48	9	i > 0
water	207:44	0:0	10	i
op	207:46	0:0	10	>
water	207:48	0:0	10	0
forexpr	207:52	207:54	9	-- i
op	207:52	0:0	10	--
water	207:54	0:0	10	i
stmts	207:57	219:16	9	
water	207:57	0:0	10	{
water	208:20	0:0	10	red
op	208:26	0:0	10	=
op	208:28	0:0	10	*
water	208:29	0:0	10	src
op	208:32	0:0	10	++
water	208:34	0:0	10	;
water	209:20	0:0	10	green
op	209:26	0:0	10	=
op	209:28	0:0	10	*
water	209:29	0:0	10	src
op	209:32	0:0	10	++
water	209:34	0:0	10	;
water	210:20	0:0	10	blue
op	210:26	0:0	10	=
op	210:28	0:0	10	*
water	210:29	0:0	10	src
op	210:32	0:0	10	++
water	210:34	0:0	10	;
water	211:20	0:0	10	pixel
op	211:26	0:0	10	=
water	211:28	0:0	10	(
water	211:29	0:0	10	red
op	211:35	0:0	10	<<
water	211:38	0:0	10	RShift
water	211:44	0:0	10	)
op	211:46	0:0	10	|
water	212:28	0:0	10	(
water	212:29	0:0	10	green
op	212:35	0:0	10	<<
water	212:38	0:0	10	GShift
water	212:44	0:0	10	)
op	212:46	0:0	10	|
water	213:28	0:0	10	(
water	213:29	0:0	10	blue
op	213:35	0:0	10	<<
water	213:38	0:0	10	BShift
water	213:44	0:0	10	)
water	213:45	0:0	10	;
op	215:20	0:0	10	*
water	215:21	0:0	10	dest
op	215:25	0:0	10	++
op	215:28	0:0	10	=
call	215:30	215:57	10	(char)
arg	215:37	215:57	11	(pixel>>24)&0xff
water	215:37	0:0	12	(
water	215:38	0:0	12	pixel
op	215:44	0:0	12	>>
water	215:47	0:0	12	24
water	215:49	0:0	12	)
op	215:51	0:0	12	&
water	215:53	0:0	12	0
water	215:54	0:0	12	xff
water	215:58	0:0	10	;
op	216:20	0:0	10	*
water	216:21	0:0	10	dest
op	216:25	0:0	10	++
op	216:28	0:0	10	=
call	216:30	216:57	10	(char)
arg	216:37	216:57	11	(pixel>>16)&0xff
water	216:37	0:0	12	(
water	216:38	0:0	12	pixel
op	216:44	0:0	12	>>
water	216:47	0:0	12	16
water	216:49	0:0	12	)
op	216:51	0:0	12	&
water	216:53	0:0	12	0
water	216:54	0:0	12	xff
water	216:58	0:0	10	;
op	217:20	0:0	10	*
water	217:21	0:0	10	dest
op	217:25	0:0	10	++
op	217:28	0:0	10	=
call	217:30	217:57	10	(char)
arg	217:37	217:57	11	(pixel>>8)&0xff
water	217:37	0:0	12	(
water	217:38	0:0	12	pixel
op	217:44	0:0	12	>>
water	217:48	0:0	12	8
water	217:49	0:0	12	)
op	217:51	0:0	12	&
water	217:53	0:0	12	0
water	217:54	0:0	12	xff
water	217:58	0:0	10	;
op	218:20	0:0	10	*
water	218:21	0:0	10	dest
op	218:25	0:0	10	++
op	218:28	0:0	10	=
call	218:30	218:57	10	(char)
arg	218:38	218:57	11	pixel&0xff
water	218:38	0:0	12	pixel
op	218:51	0:0	12	&
water	218:53	0:0	12	0
water	218:54	0:0	12	xff
water	218:58	0:0	10	;
water	219:16	0:0	10	}
water	220:12	0:0	8	}
else	220:14	235:12	6
stmts	220:19	235:12	7	
water	220:19	0:0	8	{
for	221:16	234:16	8	(i = rpng2_info . width ;i > 0;-- i)
forinit	221:21	221:41	9	i = rpng2_info . width ;
water	221:21	0:0	10	i
op	221:23	0:0	10	=
water	221:25	0:0	10	rpng2_info
op	221:35	0:0	10	.
water	221:36	0:0	10	width
water	221:41	0:0	10	;
cond	221:44	221:48	9	i > 0
water	221:44	0:0	10	i
op	221:46	0:0	10	>
water	221:48	0:0	10	0
forexpr	221:52	221:54	9	-- i
op	221:52	0:0	10	--
water	221:54	0:0	10	i
stmts	221:57	234:16	9	
water	221:57	0:0	10	{
water	222:20	0:0	10	red
op	222:26	0:0	10	=
op	222:28	0:0	10	*
water	222:29	0:0	10	src
op	222:32	0:0	10	++
water	222:34	0:0	10	;
water	223:20	0:0	10	green
op	223:26	0:0	10	=
op	223:28	0:0	10	*
water	223:29	0:0	10	src
op	223:32	0:0	10	++
water	223:34	0:0	10	;
water	224:20	0:0	10	blue
op	224:26	0:0	10	=
op	224:28	0:0	10	*
water	224:29	0:0	10	src
op	224:32	0:0	10	++
water	224:34	0:0	10	;
water	225:20	0:0	10	pixel
op	225:26	0:0	10	=
water	225:28	0:0	10	(
water	225:29	0:0	10	red
op	225:35	0:0	10	<<
water	225:38	0:0	10	RShift
water	225:44	0:0	10	)
op	225:46	0:0	10	|
water	226:28	0:0	10	(
water	226:29	0:0	10	green
op	226:35	0:0	10	<<
water	226:38	0:0	10	GShift
water	226:44	0:0	10	)
op	226:46	0:0	10	|
water	227:28	0:0	10	(
water	227:29	0:0	10	blue
op	227:35	0:0	10	<<
water	227:38	0:0	10	BShift
water	227:44	0:0	10	)
water	227:45	0:0	10	;
op	231:20	0:0	10	*
water	231:21	0:0	10	dest
op	231:25	0:0	10	++
op	231:28	0:0	10	=
call	231:30	231:57	10	(char)
arg	231:37	231:57	11	(pixel>>16)&0xff
water	231:37	0:0	12	(
water	231:38	0:0	12	pixel
op	231:44	0:0	12	>>
water	231:47	0:0	12	16
water	231:49	0:0	12	)
op	231:51	0:0	12	&
water	231:53	0:0	12	0
water	231:54	0:0	12	xff
water	231:58	0:0	10	;
op	232:20	0:0	10	*
water	232:21	0:0	10	dest
op	232:25	0:0	10	++
op	232:28	0:0	10	=
call	232:30	232:57	10	(char)
arg	232:37	232:57	11	(pixel>>8)&0xff
water	232:37	0:0	12	(
water	232:38	0:0	12	pixel
op	232:44	0:0	12	>>
water	232:48	0:0	12	8
water	232:49	0:0	12	)
op	232:51	0:0	12	&
water	232:53	0:0	12	0
water	232:54	0:0	12	xff
water	232:58	0:0	10	;
op	233:20	0:0	10	*
water	233:21	0:0	10	dest
op	233:25	0:0	10	++
op	233:28	0:0	10	=
call	233:30	233:57	10	(char)
arg	233:38	233:57	11	pixel&0xff
water	233:38	0:0	12	pixel
op	233:51	0:0	12	&
water	233:53	0:0	12	0
water	233:54	0:0	12	xff
water	233:58	0:0	10	;
water	234:16	0:0	10	}
water	235:12	0:0	8	}
water	236:8	0:0	6	}
water	237:4	0:0	4	}
else	237:6	254:4	2
stmts	237:11	254:4	3	
if	237:11	254:4	4	(depth == 16)
cond	237:15	237:24	5	depth == 16
water	237:15	0:0	6	depth
op	237:21	0:0	6	==
water	237:24	0:0	6	16
stmts	237:28	254:4	5	
water	237:28	0:0	6	{
decl	238:8	238:28	6	ush	red
water	238:15	0:0	6	,
decl	238:8	238:28	6	ush	green
water	238:22	0:0	6	,
decl	238:8	238:28	6	ush	blue
for	239:8	253:8	6	(row = 0 ;row < rpng2_info . height;++ row)
forinit	239:13	239:20	7	row = 0 ;
water	239:13	0:0	8	row
op	239:17	0:0	8	=
water	239:19	0:0	8	0
water	239:20	0:0	8	;
cond	239:23	239:40	7	row < rpng2_info . height
water	239:23	0:0	8	row
op	239:27	0:0	8	<
water	239:29	0:0	8	rpng2_info
op	239:39	0:0	8	.
water	239:40	0:0	8	height
forexpr	239:49	239:51	7	++ row
op	239:49	0:0	8	++
water	239:51	0:0	8	row
stmts	239:56	253:8	7	
water	239:56	0:0	8	{
water	240:12	0:0	8	src
op	240:16	0:0	8	=
water	240:18	0:0	8	bg_data
op	240:26	0:0	8	+
water	240:28	0:0	8	row
op	240:31	0:0	8	*
water	240:32	0:0	8	bg_rowbytes
water	240:43	0:0	8	;
water	241:12	0:0	8	dest
op	241:17	0:0	8	=
water	241:19	0:0	8	ximage
op	241:25	0:0	8	->
water	241:27	0:0	8	data
op	241:32	0:0	8	+
water	241:34	0:0	8	row
op	241:37	0:0	8	*
water	241:38	0:0	8	ximage_rowbytes
water	241:53	0:0	8	;
for	242:12	252:12	8	(i = rpng2_info . width ;i > 0;-- i)
forinit	242:17	242:37	9	i = rpng2_info . width ;
water	242:17	0:0	10	i
op	242:19	0:0	10	=
water	242:21	0:0	10	rpng2_info
op	242:31	0:0	10	.
water	242:32	0:0	10	width
water	242:37	0:0	10	;
cond	242:40	242:44	9	i > 0
water	242:40	0:0	10	i
op	242:42	0:0	10	>
water	242:44	0:0	10	0
forexpr	242:48	242:50	9	-- i
op	242:48	0:0	10	--
water	242:50	0:0	10	i
stmts	242:53	252:12	9	
water	242:53	0:0	10	{
water	243:16	0:0	10	red
op	243:22	0:0	10	=
water	243:24	0:0	10	(
call	243:25	243:35	10	(ush)
arg	243:31	243:35	11	*src
op	243:31	0:0	12	*
water	243:32	0:0	12	src
op	243:37	0:0	10	<<
water	243:40	0:0	10	8
water	243:41	0:0	10	)
water	243:42	0:0	10	;
op	243:45	0:0	10	++
water	243:47	0:0	10	src
water	243:50	0:0	10	;
water	244:16	0:0	10	green
op	244:22	0:0	10	=
water	244:24	0:0	10	(
call	244:25	244:35	10	(ush)
arg	244:31	244:35	11	*src
op	244:31	0:0	12	*
water	244:32	0:0	12	src
op	244:37	0:0	10	<<
water	244:40	0:0	10	8
water	244:41	0:0	10	)
water	244:42	0:0	10	;
op	244:45	0:0	10	++
water	244:47	0:0	10	src
water	244:50	0:0	10	;
water	245:16	0:0	10	blue
op	245:22	0:0	10	=
water	245:24	0:0	10	(
call	245:25	245:35	10	(ush)
arg	245:31	245:35	11	*src
op	245:31	0:0	12	*
water	245:32	0:0	12	src
op	245:37	0:0	10	<<
water	245:40	0:0	10	8
water	245:41	0:0	10	)
water	245:42	0:0	10	;
op	245:45	0:0	10	++
water	245:47	0:0	10	src
water	245:50	0:0	10	;
water	246:16	0:0	10	pixel
op	246:22	0:0	10	=
water	246:24	0:0	10	(
water	246:25	0:0	10	(
water	246:26	0:0	10	red
op	246:32	0:0	10	>>
water	246:35	0:0	10	RShift
water	246:41	0:0	10	)
op	246:43	0:0	10	&
water	246:45	0:0	10	RMask
water	246:50	0:0	10	)
op	246:52	0:0	10	|
water	247:24	0:0	10	(
water	247:25	0:0	10	(
water	247:26	0:0	10	green
op	247:32	0:0	10	>>
water	247:35	0:0	10	GShift
water	247:41	0:0	10	)
op	247:43	0:0	10	&
water	247:45	0:0	10	GMask
water	247:50	0:0	10	)
op	247:52	0:0	10	|
water	248:24	0:0	10	(
water	248:25	0:0	10	(
water	248:26	0:0	10	blue
op	248:32	0:0	10	>>
water	248:35	0:0	10	BShift
water	248:41	0:0	10	)
op	248:43	0:0	10	&
water	248:45	0:0	10	BMask
water	248:50	0:0	10	)
water	248:51	0:0	10	;
op	250:16	0:0	10	*
water	250:17	0:0	10	dest
op	250:21	0:0	10	++
op	250:24	0:0	10	=
call	250:26	250:53	10	(char)
arg	250:33	250:53	11	(pixel>>8)&0xff
water	250:33	0:0	12	(
water	250:34	0:0	12	pixel
op	250:40	0:0	12	>>
water	250:44	0:0	12	8
water	250:45	0:0	12	)
op	250:47	0:0	12	&
water	250:49	0:0	12	0
water	250:50	0:0	12	xff
water	250:54	0:0	10	;
op	251:16	0:0	10	*
water	251:17	0:0	10	dest
op	251:21	0:0	10	++
op	251:24	0:0	10	=
call	251:26	251:53	10	(char)
arg	251:34	251:53	11	pixel&0xff
water	251:34	0:0	12	pixel
op	251:47	0:0	12	&
water	251:49	0:0	12	0
water	251:50	0:0	12	xff
water	251:54	0:0	10	;
water	252:12	0:0	10	}
water	253:8	0:0	8	}
water	254:4	0:0	6	}
else	254:6	256:4	2
stmts	254:12	256:4	3	
water	254:12	0:0	4	{
water	0:0	0:0	4	STATEMENTS
water	256:4	0:0	4	}
call	257:4	258:23	2	XPutImage
arg	257:14	257:21	3	display
water	257:14	0:0	4	display
arg	257:23	257:29	3	window
water	257:23	0:0	4	window
arg	257:31	257:33	3	gc
water	257:31	0:0	4	gc
arg	257:35	257:41	3	ximage
water	257:35	0:0	4	ximage
arg	257:43	257:44	3	0
water	257:43	0:0	4	0
arg	257:46	257:47	3	0
water	257:46	0:0	4	0
arg	257:49	257:50	3	0
water	257:49	0:0	4	0
arg	257:52	257:53	3	0
water	257:52	0:0	4	0
arg	257:55	257:71	3	rpng2_info.width
water	257:55	0:0	4	rpng2_info
op	257:65	0:0	4	.
water	257:66	0:0	4	width
arg	258:6	258:23	3	rpng2_info.height
water	258:6	0:0	4	rpng2_info
op	258:16	0:0	4	.
water	258:17	0:0	4	height
water	258:24	0:0	2	;
return	259:4	259:12	2	0
water	259:11	0:0	3	0
