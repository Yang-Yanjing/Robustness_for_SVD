func	1:0	131:0	0	static void	transform_image_validate
params	2:24	0:0	1	
param	2:25	2:46	2	transform_display *	dp
param	2:48	2:68	2	png_const_structp	pp
param	3:3	3:15	2	png_infop	pi
stmnts	6:3	130:29	1	
water	6:3	0:0	2	PNG_CONST
water	6:13	0:0	2	png_store
op	6:22	0:0	2	*
water	6:24	0:0	2	PNG_CONST
water	6:34	0:0	2	ps
op	6:37	0:0	2	=
water	6:39	0:0	2	dp
op	6:41	0:0	2	->
water	6:43	0:0	2	this
op	6:47	0:0	2	.
water	6:48	0:0	2	ps
water	6:50	0:0	2	;
water	7:3	0:0	2	PNG_CONST
water	7:13	0:0	2	png_byte
water	7:22	0:0	2	in_ct
op	7:28	0:0	2	=
water	7:30	0:0	2	dp
op	7:32	0:0	2	->
water	7:34	0:0	2	this
op	7:38	0:0	2	.
water	7:39	0:0	2	colour_type
water	7:50	0:0	2	;
water	8:3	0:0	2	PNG_CONST
water	8:13	0:0	2	png_byte
water	8:22	0:0	2	in_bd
op	8:28	0:0	2	=
water	8:30	0:0	2	dp
op	8:32	0:0	2	->
water	8:34	0:0	2	this
op	8:38	0:0	2	.
water	8:39	0:0	2	bit_depth
water	8:48	0:0	2	;
water	9:3	0:0	2	PNG_CONST
water	9:13	0:0	2	png_uint_32
water	9:25	0:0	2	w
op	9:27	0:0	2	=
water	9:29	0:0	2	dp
op	9:31	0:0	2	->
water	9:33	0:0	2	this
op	9:37	0:0	2	.
water	9:38	0:0	2	w
water	9:39	0:0	2	;
water	10:3	0:0	2	PNG_CONST
water	10:13	0:0	2	png_uint_32
water	10:25	0:0	2	h
op	10:27	0:0	2	=
water	10:29	0:0	2	dp
op	10:31	0:0	2	->
water	10:33	0:0	2	this
op	10:37	0:0	2	.
water	10:38	0:0	2	h
water	10:39	0:0	2	;
water	11:3	0:0	2	PNG_CONST
water	11:13	0:0	2	png_byte
water	11:22	0:0	2	out_ct
op	11:29	0:0	2	=
water	11:31	0:0	2	dp
op	11:33	0:0	2	->
water	11:35	0:0	2	output_colour_type
water	11:53	0:0	2	;
water	12:3	0:0	2	PNG_CONST
water	12:13	0:0	2	png_byte
water	12:22	0:0	2	out_bd
op	12:29	0:0	2	=
water	12:31	0:0	2	dp
op	12:33	0:0	2	->
water	12:35	0:0	2	output_bit_depth
water	12:51	0:0	2	;
water	13:3	0:0	2	PNG_CONST
water	13:13	0:0	2	png_byte
water	13:22	0:0	2	sample_depth
op	13:35	0:0	2	=
call	13:37	14:41	2	(png_byte)
arg	13:48	14:41	3	out_ct==PNG_COLOR_TYPE_PALETTE?8:out_bd
water	13:48	0:0	4	out_ct
op	13:55	0:0	4	==
water	14:6	0:0	4	PNG_COLOR_TYPE_PALETTE
water	14:29	0:0	4	?
water	14:31	0:0	4	8
water	14:33	0:0	4	:
water	14:35	0:0	4	out_bd
water	14:42	0:0	2	;
water	15:3	0:0	2	PNG_CONST
water	15:13	0:0	2	png_byte
water	15:22	0:0	2	red_sBIT
op	15:31	0:0	2	=
water	15:33	0:0	2	dp
op	15:35	0:0	2	->
water	15:37	0:0	2	this
op	15:41	0:0	2	.
water	15:42	0:0	2	red_sBIT
water	15:50	0:0	2	;
water	16:3	0:0	2	PNG_CONST
water	16:13	0:0	2	png_byte
water	16:22	0:0	2	green_sBIT
op	16:33	0:0	2	=
water	16:35	0:0	2	dp
op	16:37	0:0	2	->
water	16:39	0:0	2	this
op	16:43	0:0	2	.
water	16:44	0:0	2	green_sBIT
water	16:54	0:0	2	;
water	17:3	0:0	2	PNG_CONST
water	17:13	0:0	2	png_byte
water	17:22	0:0	2	blue_sBIT
op	17:32	0:0	2	=
water	17:34	0:0	2	dp
op	17:36	0:0	2	->
water	17:38	0:0	2	this
op	17:42	0:0	2	.
water	17:43	0:0	2	blue_sBIT
water	17:52	0:0	2	;
water	18:3	0:0	2	PNG_CONST
water	18:13	0:0	2	png_byte
water	18:22	0:0	2	alpha_sBIT
op	18:33	0:0	2	=
water	18:35	0:0	2	dp
op	18:37	0:0	2	->
water	18:39	0:0	2	this
op	18:43	0:0	2	.
water	18:44	0:0	2	alpha_sBIT
water	18:54	0:0	2	;
water	19:3	0:0	2	PNG_CONST
water	19:13	0:0	2	int
water	19:17	0:0	2	have_tRNS
op	19:27	0:0	2	=
water	19:29	0:0	2	dp
op	19:31	0:0	2	->
water	19:33	0:0	2	this
op	19:37	0:0	2	.
water	19:38	0:0	2	is_transparent
water	19:52	0:0	2	;
decl	20:3	20:28	2	double	digitization_error
decl	21:3	21:28	2	store_palette	out_palette
decl	22:3	22:16	2	png_uint_32	y
call	23:3	23:12	2	UNUSED
arg	23:10	23:12	3	pi
water	23:10	0:0	4	pi
call	25:3	25:39	2	store_image_check
arg	25:21	25:32	3	dp->this.ps
water	25:21	0:0	4	dp
op	25:23	0:0	4	->
water	25:25	0:0	4	this
op	25:29	0:0	4	.
water	25:30	0:0	4	ps
arg	25:34	25:36	3	pp
water	25:34	0:0	4	pp
arg	25:38	25:39	3	0
water	25:38	0:0	4	0
water	25:40	0:0	2	;
if	29:3	39:3	2	(out_ct == PNG_COLOR_TYPE_PALETTE)
cond	29:7	29:17	3	out_ct == PNG_COLOR_TYPE_PALETTE
water	29:7	0:0	4	out_ct
op	29:14	0:0	4	==
water	29:17	0:0	4	PNG_COLOR_TYPE_PALETTE
stmts	30:3	39:3	3	
water	30:3	0:0	4	{
decl	34:6	34:25	4	int	npalette
op	34:19	0:0	4	=
water	34:21	0:0	4	(
op	34:22	0:0	4	-
water	34:23	0:0	4	1
water	34:24	0:0	4	)
water	35:6	0:0	4	(
water	35:7	0:0	4	void
water	35:11	0:0	4	)
call	35:12	35:55	4	read_palette
arg	35:25	35:36	5	out_palette
water	35:25	0:0	6	out_palette
arg	35:38	35:47	5	&npalette
op	35:38	0:0	6	&
water	35:39	0:0	6	npalette
arg	35:49	35:51	5	pp
water	35:49	0:0	6	pp
arg	35:53	35:55	5	pi
water	35:53	0:0	6	pi
water	35:56	0:0	4	;
if	36:6	37:59	4	(npalette != dp -> this . npalette)
cond	36:10	36:31	5	npalette != dp -> this . npalette
water	36:10	0:0	6	npalette
op	36:19	0:0	6	!=
water	36:22	0:0	6	dp
op	36:24	0:0	6	->
water	36:26	0:0	6	this
op	36:30	0:0	6	.
water	36:31	0:0	6	npalette
stmts	37:9	37:59	5	
call	37:9	37:58	6	png_error
arg	37:19	37:21	7	pp
water	37:19	0:0	8	pp
arg	37:23	37:58	7	"unexpected change in palette size"
water	37:23	0:0	8	"unexpected change in palette size"
water	37:59	0:0	6	;
water	38:6	0:0	4	digitization_error
op	38:25	0:0	4	=
op	38:27	0:0	4	.
water	38:28	0:0	4	5
water	38:29	0:0	4	;
water	39:3	0:0	4	}
else	40:3	60:3	2
stmts	41:3	60:3	3	
water	41:3	0:0	4	{
decl	42:6	42:30	4	png_byte	in_sample_depth
call	43:6	43:50	4	memset
arg	43:13	43:24	5	out_palette
water	43:13	0:0	6	out_palette
arg	43:26	43:30	5	0x5e
water	43:26	0:0	6	0
water	43:27	0:0	6	x5e
arg	43:32	43:50	5	sizeofout_palette
op	43:32	0:0	6	sizeof
water	43:39	0:0	6	out_palette
water	43:51	0:0	4	;
if	48:6	49:28	4	(in_ct == PNG_COLOR_TYPE_PALETTE || in_bd < 16)
cond	48:10	48:53	5	in_ct == PNG_COLOR_TYPE_PALETTE || in_bd < 16
water	48:10	0:0	6	in_ct
op	48:16	0:0	6	==
water	48:19	0:0	6	PNG_COLOR_TYPE_PALETTE
op	48:42	0:0	6	||
water	48:45	0:0	6	in_bd
op	48:51	0:0	6	<
water	48:53	0:0	6	16
stmts	49:9	49:28	5	
water	49:9	0:0	6	in_sample_depth
op	49:25	0:0	6	=
water	49:27	0:0	6	8
water	49:28	0:0	6	;
else	50:6	51:32	4
stmts	51:9	51:32	5	
water	51:9	0:0	6	in_sample_depth
op	51:25	0:0	6	=
water	51:27	0:0	6	in_bd
water	51:32	0:0	6	;
if	52:6	54:32	4	(sample_depth != 16 || in_sample_depth > 8 || ! dp -> pm -> calculations_use_input_precision)
cond	52:10	53:18	5	sample_depth != 16 || in_sample_depth > 8 || ! dp -> pm -> calculations_use_input_precision
water	52:10	0:0	6	sample_depth
op	52:23	0:0	6	!=
water	52:26	0:0	6	16
op	52:29	0:0	6	||
water	52:32	0:0	6	in_sample_depth
op	52:48	0:0	6	>
water	52:50	0:0	6	8
op	52:52	0:0	6	||
op	53:9	0:0	6	!
water	53:10	0:0	6	dp
op	53:12	0:0	6	->
water	53:14	0:0	6	pm
op	53:16	0:0	6	->
water	53:18	0:0	6	calculations_use_input_precision
stmts	54:9	54:32	5	
water	54:9	0:0	6	digitization_error
op	54:28	0:0	6	=
op	54:30	0:0	6	.
water	54:31	0:0	6	5
water	54:32	0:0	6	;
else	58:6	59:38	4
stmts	59:9	59:38	5	
water	59:9	0:0	6	digitization_error
op	59:28	0:0	6	=
op	59:30	0:0	6	.
water	59:31	0:0	6	5
op	59:33	0:0	6	*
water	59:35	0:0	6	257
water	59:38	0:0	6	;
water	60:3	0:0	4	}
for	61:3	128:3	2	(y = 0 ;y < h;++ y)
forinit	61:8	61:11	3	y = 0 ;
water	61:8	0:0	4	y
op	61:9	0:0	4	=
water	61:10	0:0	4	0
water	61:11	0:0	4	;
cond	61:13	61:15	3	y < h
water	61:13	0:0	4	y
op	61:14	0:0	4	<
water	61:15	0:0	4	h
forexpr	61:18	61:20	3	++ y
op	61:18	0:0	4	++
water	61:20	0:0	4	y
stmts	62:3	128:3	3	
water	62:3	0:0	4	{
water	63:6	0:0	4	png_const_bytep
water	63:22	0:0	4	PNG_CONST
water	63:32	0:0	4	pRow
op	63:37	0:0	4	=
call	63:39	63:67	4	store_image_row
arg	63:55	63:57	5	ps
water	63:55	0:0	6	ps
arg	63:59	63:61	5	pp
water	63:59	0:0	6	pp
arg	63:63	63:64	5	0
water	63:63	0:0	6	0
arg	63:66	63:67	5	y
water	63:66	0:0	6	y
water	63:68	0:0	4	;
decl	64:6	64:19	4	png_uint_32	x
decl	66:6	66:35	4	png_byte	std[STANDARD_ROWMAX]
call	67:6	67:44	4	transform_row
arg	67:20	67:22	5	pp
water	67:20	0:0	6	pp
arg	67:24	67:27	5	std
water	67:24	0:0	6	std
arg	67:29	67:34	5	in_ct
water	67:29	0:0	6	in_ct
arg	67:36	67:41	5	in_bd
water	67:36	0:0	6	in_bd
arg	67:43	67:44	5	y
water	67:43	0:0	6	y
water	67:45	0:0	4	;
for	71:6	127:6	4	(x = 0 ;x < w;++ x)
forinit	71:11	71:14	5	x = 0 ;
water	71:11	0:0	6	x
op	71:12	0:0	6	=
water	71:13	0:0	6	0
water	71:14	0:0	6	;
cond	71:16	71:18	5	x < w
water	71:16	0:0	6	x
op	71:17	0:0	6	<
water	71:18	0:0	6	w
forexpr	71:21	71:23	5	++ x
op	71:21	0:0	6	++
water	71:23	0:0	6	x
stmts	72:6	127:6	5	
water	72:6	0:0	6	{
decl	73:9	73:40	6	image_pixel	in_pixel
water	73:29	0:0	6	,
decl	73:9	73:40	6	image_pixel	out_pixel
decl	74:9	74:32	6	unsigned int	r
water	74:23	0:0	6	,
decl	74:9	74:32	6	unsigned int	g
water	74:26	0:0	6	,
decl	74:9	74:32	6	unsigned int	b
water	74:29	0:0	6	,
decl	74:9	74:32	6	unsigned int	a
call	76:9	76:75	6	image_pixel_init
arg	76:26	76:35	7	&in_pixel
op	76:26	0:0	8	&
water	76:27	0:0	8	in_pixel
arg	76:37	76:40	7	std
water	76:37	0:0	8	std
arg	76:42	76:47	7	in_ct
water	76:42	0:0	8	in_ct
arg	76:49	76:54	7	in_bd
water	76:49	0:0	8	in_bd
arg	76:56	76:57	7	x
water	76:56	0:0	8	x
arg	76:59	76:75	7	dp->this.palette
water	76:59	0:0	8	dp
op	76:61	0:0	8	->
water	76:63	0:0	8	this
op	76:67	0:0	8	.
water	76:68	0:0	8	palette
water	76:76	0:0	6	;
water	77:9	0:0	6	in_pixel
op	77:17	0:0	6	.
water	77:18	0:0	6	red_sBIT
op	77:27	0:0	6	=
water	77:29	0:0	6	red_sBIT
water	77:37	0:0	6	;
water	78:9	0:0	6	in_pixel
op	78:17	0:0	6	.
water	78:18	0:0	6	green_sBIT
op	78:29	0:0	6	=
water	78:31	0:0	6	green_sBIT
water	78:41	0:0	6	;
water	79:9	0:0	6	in_pixel
op	79:17	0:0	6	.
water	79:18	0:0	6	blue_sBIT
op	79:28	0:0	6	=
water	79:30	0:0	6	blue_sBIT
water	79:39	0:0	6	;
water	80:9	0:0	6	in_pixel
op	80:17	0:0	6	.
water	80:18	0:0	6	alpha_sBIT
op	80:29	0:0	6	=
water	80:31	0:0	6	alpha_sBIT
water	80:41	0:0	6	;
water	81:9	0:0	6	in_pixel
op	81:17	0:0	6	.
water	81:18	0:0	6	have_tRNS
op	81:28	0:0	6	=
water	81:30	0:0	6	have_tRNS
water	81:39	0:0	6	;
water	83:9	0:0	6	r
op	83:11	0:0	6	=
water	83:13	0:0	6	in_pixel
op	83:21	0:0	6	.
water	83:22	0:0	6	red
water	83:25	0:0	6	;
water	84:9	0:0	6	g
op	84:11	0:0	6	=
water	84:13	0:0	6	in_pixel
op	84:21	0:0	6	.
water	84:22	0:0	6	green
water	84:27	0:0	6	;
water	85:9	0:0	6	b
op	85:11	0:0	6	=
water	85:13	0:0	6	in_pixel
op	85:21	0:0	6	.
water	85:22	0:0	6	blue
water	85:26	0:0	6	;
water	86:9	0:0	6	a
op	86:11	0:0	6	=
water	86:13	0:0	6	in_pixel
op	86:21	0:0	6	.
water	86:22	0:0	6	alpha
water	86:27	0:0	6	;
call	87:9	87:70	6	dp->transform_list->mod
arg	87:33	87:51	7	dp->transform_list
water	87:33	0:0	8	dp
op	87:35	0:0	8	->
water	87:37	0:0	8	transform_list
arg	87:53	87:62	7	&in_pixel
op	87:53	0:0	8	&
water	87:54	0:0	8	in_pixel
arg	87:64	87:66	7	pp
water	87:64	0:0	8	pp
arg	87:68	87:70	7	dp
water	87:68	0:0	8	dp
water	87:71	0:0	6	;
call	91:9	91:74	6	image_pixel_init
arg	91:26	91:36	7	&out_pixel
op	91:26	0:0	8	&
water	91:27	0:0	8	out_pixel
arg	91:38	91:42	7	pRow
water	91:38	0:0	8	pRow
arg	91:44	91:50	7	out_ct
water	91:44	0:0	8	out_ct
arg	91:52	91:58	7	out_bd
water	91:52	0:0	8	out_bd
arg	91:60	91:61	7	x
water	91:60	0:0	8	x
arg	91:63	91:74	7	out_palette
water	91:63	0:0	8	out_palette
water	91:75	0:0	6	;
if	95:9	100:9	6	(in_ct == PNG_COLOR_TYPE_PALETTE && out_ct == PNG_COLOR_TYPE_PALETTE)
cond	95:13	96:22	7	in_ct == PNG_COLOR_TYPE_PALETTE && out_ct == PNG_COLOR_TYPE_PALETTE
water	95:13	0:0	8	in_ct
op	95:19	0:0	8	==
water	95:22	0:0	8	PNG_COLOR_TYPE_PALETTE
op	95:45	0:0	8	&&
water	96:12	0:0	8	out_ct
op	96:19	0:0	8	==
water	96:22	0:0	8	PNG_COLOR_TYPE_PALETTE
stmts	97:9	100:9	7	
water	97:9	0:0	8	{
if	98:12	99:68	8	(in_pixel . palette_index != out_pixel . palette_index)
cond	98:16	98:52	9	in_pixel . palette_index != out_pixel . palette_index
water	98:16	0:0	10	in_pixel
op	98:24	0:0	10	.
water	98:25	0:0	10	palette_index
op	98:39	0:0	10	!=
water	98:42	0:0	10	out_pixel
op	98:51	0:0	10	.
water	98:52	0:0	10	palette_index
stmts	99:15	99:68	9	
call	99:15	99:67	10	png_error
arg	99:25	99:27	11	pp
water	99:25	0:0	12	pp
arg	99:29	99:67	11	"unexpected transformed palette index"
water	99:29	0:0	12	"unexpected transformed palette index"
water	99:68	0:0	10	;
water	100:9	0:0	8	}
if	104:9	108:34	6	(in_pixel . red != out_pixel . red)
cond	104:13	104:39	7	in_pixel . red != out_pixel . red
water	104:13	0:0	8	in_pixel
op	104:21	0:0	8	.
water	104:22	0:0	8	red
op	104:26	0:0	8	!=
water	104:29	0:0	8	out_pixel
op	104:38	0:0	8	.
water	104:39	0:0	8	red
stmts	105:12	108:34	7	
call	105:12	108:33	8	transform_range_check
arg	105:34	105:36	9	pp
water	105:34	0:0	10	pp
arg	105:38	105:39	9	r
water	105:38	0:0	10	r
arg	105:41	105:42	9	g
water	105:41	0:0	10	g
arg	105:44	105:45	9	b
water	105:44	0:0	10	b
arg	105:47	105:48	9	a
water	105:47	0:0	10	a
arg	105:50	105:62	9	in_pixel.red
water	105:50	0:0	10	in_pixel
op	105:58	0:0	10	.
water	105:59	0:0	10	red
arg	105:64	105:77	9	in_pixel.redf
water	105:64	0:0	10	in_pixel
op	105:72	0:0	10	.
water	105:73	0:0	10	redf
arg	106:15	106:28	9	out_pixel.red
water	106:15	0:0	10	out_pixel
op	106:24	0:0	10	.
water	106:25	0:0	10	red
arg	106:30	106:42	9	sample_depth
water	106:30	0:0	10	sample_depth
arg	106:44	106:57	9	in_pixel.rede
water	106:44	0:0	10	in_pixel
op	106:52	0:0	10	.
water	106:53	0:0	10	rede
arg	107:15	107:65	9	dp->pm->limit+1./(2*((1U<<in_pixel.red_sBIT)-1))
water	107:15	0:0	10	dp
op	107:17	0:0	10	->
water	107:19	0:0	10	pm
op	107:21	0:0	10	->
water	107:23	0:0	10	limit
op	107:29	0:0	10	+
water	107:31	0:0	10	1
op	107:32	0:0	10	.
op	107:33	0:0	10	/
water	107:34	0:0	10	(
water	107:35	0:0	10	2
op	107:36	0:0	10	*
water	107:37	0:0	10	(
water	107:38	0:0	10	(
water	107:39	0:0	10	1
water	107:40	0:0	10	U
op	107:41	0:0	10	<<
water	107:43	0:0	10	in_pixel
op	107:51	0:0	10	.
water	107:52	0:0	10	red_sBIT
water	107:60	0:0	10	)
op	107:61	0:0	10	-
water	107:62	0:0	10	1
water	107:63	0:0	10	)
water	107:64	0:0	10	)
arg	107:67	107:77	9	"red/gray"
water	107:67	0:0	10	"red/gray"
arg	108:15	108:33	9	digitization_error
water	108:15	0:0	10	digitization_error
water	108:34	0:0	8	;
if	109:9	114:34	6	(( out_ct & PNG_COLOR_MASK_COLOR ) != 0 && in_pixel . green != out_pixel . green)
cond	109:13	110:40	7	( out_ct & PNG_COLOR_MASK_COLOR ) != 0 && in_pixel . green != out_pixel . green
water	109:13	0:0	8	(
water	109:14	0:0	8	out_ct
op	109:21	0:0	8	&
water	109:23	0:0	8	PNG_COLOR_MASK_COLOR
water	109:43	0:0	8	)
op	109:45	0:0	8	!=
water	109:48	0:0	8	0
op	109:50	0:0	8	&&
water	110:12	0:0	8	in_pixel
op	110:20	0:0	8	.
water	110:21	0:0	8	green
op	110:27	0:0	8	!=
water	110:30	0:0	8	out_pixel
op	110:39	0:0	8	.
water	110:40	0:0	8	green
stmts	111:12	114:34	7	
call	111:12	114:33	8	transform_range_check
arg	111:34	111:36	9	pp
water	111:34	0:0	10	pp
arg	111:38	111:39	9	r
water	111:38	0:0	10	r
arg	111:41	111:42	9	g
water	111:41	0:0	10	g
arg	111:44	111:45	9	b
water	111:44	0:0	10	b
arg	111:47	111:48	9	a
water	111:47	0:0	10	a
arg	111:50	111:64	9	in_pixel.green
water	111:50	0:0	10	in_pixel
op	111:58	0:0	10	.
water	111:59	0:0	10	green
arg	112:15	112:30	9	in_pixel.greenf
water	112:15	0:0	10	in_pixel
op	112:23	0:0	10	.
water	112:24	0:0	10	greenf
arg	112:32	112:47	9	out_pixel.green
water	112:32	0:0	10	out_pixel
op	112:41	0:0	10	.
water	112:42	0:0	10	green
arg	112:49	112:61	9	sample_depth
water	112:49	0:0	10	sample_depth
arg	112:63	112:78	9	in_pixel.greene
water	112:63	0:0	10	in_pixel
op	112:71	0:0	10	.
water	112:72	0:0	10	greene
arg	113:15	113:67	9	dp->pm->limit+1./(2*((1U<<in_pixel.green_sBIT)-1))
water	113:15	0:0	10	dp
op	113:17	0:0	10	->
water	113:19	0:0	10	pm
op	113:21	0:0	10	->
water	113:23	0:0	10	limit
op	113:29	0:0	10	+
water	113:31	0:0	10	1
op	113:32	0:0	10	.
op	113:33	0:0	10	/
water	113:34	0:0	10	(
water	113:35	0:0	10	2
op	113:36	0:0	10	*
water	113:37	0:0	10	(
water	113:38	0:0	10	(
water	113:39	0:0	10	1
water	113:40	0:0	10	U
op	113:41	0:0	10	<<
water	113:43	0:0	10	in_pixel
op	113:51	0:0	10	.
water	113:52	0:0	10	green_sBIT
water	113:62	0:0	10	)
op	113:63	0:0	10	-
water	113:64	0:0	10	1
water	113:65	0:0	10	)
water	113:66	0:0	10	)
arg	113:69	113:76	9	"green"
water	113:69	0:0	10	"green"
arg	114:15	114:33	9	digitization_error
water	114:15	0:0	10	digitization_error
water	114:34	0:0	8	;
if	115:9	120:34	6	(( out_ct & PNG_COLOR_MASK_COLOR ) != 0 && in_pixel . blue != out_pixel . blue)
cond	115:13	116:39	7	( out_ct & PNG_COLOR_MASK_COLOR ) != 0 && in_pixel . blue != out_pixel . blue
water	115:13	0:0	8	(
water	115:14	0:0	8	out_ct
op	115:21	0:0	8	&
water	115:23	0:0	8	PNG_COLOR_MASK_COLOR
water	115:43	0:0	8	)
op	115:45	0:0	8	!=
water	115:48	0:0	8	0
op	115:50	0:0	8	&&
water	116:12	0:0	8	in_pixel
op	116:20	0:0	8	.
water	116:21	0:0	8	blue
op	116:26	0:0	8	!=
water	116:29	0:0	8	out_pixel
op	116:38	0:0	8	.
water	116:39	0:0	8	blue
stmts	117:12	120:34	7	
call	117:12	120:33	8	transform_range_check
arg	117:34	117:36	9	pp
water	117:34	0:0	10	pp
arg	117:38	117:39	9	r
water	117:38	0:0	10	r
arg	117:41	117:42	9	g
water	117:41	0:0	10	g
arg	117:44	117:45	9	b
water	117:44	0:0	10	b
arg	117:47	117:48	9	a
water	117:47	0:0	10	a
arg	117:50	117:63	9	in_pixel.blue
water	117:50	0:0	10	in_pixel
op	117:58	0:0	10	.
water	117:59	0:0	10	blue
arg	117:65	117:79	9	in_pixel.bluef
water	117:65	0:0	10	in_pixel
op	117:73	0:0	10	.
water	117:74	0:0	10	bluef
arg	118:15	118:29	9	out_pixel.blue
water	118:15	0:0	10	out_pixel
op	118:24	0:0	10	.
water	118:25	0:0	10	blue
arg	118:31	118:43	9	sample_depth
water	118:31	0:0	10	sample_depth
arg	118:45	118:59	9	in_pixel.bluee
water	118:45	0:0	10	in_pixel
op	118:53	0:0	10	.
water	118:54	0:0	10	bluee
arg	119:15	119:66	9	dp->pm->limit+1./(2*((1U<<in_pixel.blue_sBIT)-1))
water	119:15	0:0	10	dp
op	119:17	0:0	10	->
water	119:19	0:0	10	pm
op	119:21	0:0	10	->
water	119:23	0:0	10	limit
op	119:29	0:0	10	+
water	119:31	0:0	10	1
op	119:32	0:0	10	.
op	119:33	0:0	10	/
water	119:34	0:0	10	(
water	119:35	0:0	10	2
op	119:36	0:0	10	*
water	119:37	0:0	10	(
water	119:38	0:0	10	(
water	119:39	0:0	10	1
water	119:40	0:0	10	U
op	119:41	0:0	10	<<
water	119:43	0:0	10	in_pixel
op	119:51	0:0	10	.
water	119:52	0:0	10	blue_sBIT
water	119:61	0:0	10	)
op	119:62	0:0	10	-
water	119:63	0:0	10	1
water	119:64	0:0	10	)
water	119:65	0:0	10	)
arg	119:68	119:74	9	"blue"
water	119:68	0:0	10	"blue"
arg	120:15	120:33	9	digitization_error
water	120:15	0:0	10	digitization_error
water	120:34	0:0	8	;
if	121:9	126:34	6	(( out_ct & PNG_COLOR_MASK_ALPHA ) != 0 && in_pixel . alpha != out_pixel . alpha)
cond	121:13	122:40	7	( out_ct & PNG_COLOR_MASK_ALPHA ) != 0 && in_pixel . alpha != out_pixel . alpha
water	121:13	0:0	8	(
water	121:14	0:0	8	out_ct
op	121:21	0:0	8	&
water	121:23	0:0	8	PNG_COLOR_MASK_ALPHA
water	121:43	0:0	8	)
op	121:45	0:0	8	!=
water	121:48	0:0	8	0
op	121:50	0:0	8	&&
water	122:12	0:0	8	in_pixel
op	122:20	0:0	8	.
water	122:21	0:0	8	alpha
op	122:27	0:0	8	!=
water	122:30	0:0	8	out_pixel
op	122:39	0:0	8	.
water	122:40	0:0	8	alpha
stmts	123:12	126:34	7	
call	123:12	126:33	8	transform_range_check
arg	123:34	123:36	9	pp
water	123:34	0:0	10	pp
arg	123:38	123:39	9	r
water	123:38	0:0	10	r
arg	123:41	123:42	9	g
water	123:41	0:0	10	g
arg	123:44	123:45	9	b
water	123:44	0:0	10	b
arg	123:47	123:48	9	a
water	123:47	0:0	10	a
arg	123:50	123:64	9	in_pixel.alpha
water	123:50	0:0	10	in_pixel
op	123:58	0:0	10	.
water	123:59	0:0	10	alpha
arg	124:15	124:30	9	in_pixel.alphaf
water	124:15	0:0	10	in_pixel
op	124:23	0:0	10	.
water	124:24	0:0	10	alphaf
arg	124:32	124:47	9	out_pixel.alpha
water	124:32	0:0	10	out_pixel
op	124:41	0:0	10	.
water	124:42	0:0	10	alpha
arg	124:49	124:61	9	sample_depth
water	124:49	0:0	10	sample_depth
arg	124:63	124:78	9	in_pixel.alphae
water	124:63	0:0	10	in_pixel
op	124:71	0:0	10	.
water	124:72	0:0	10	alphae
arg	125:15	125:67	9	dp->pm->limit+1./(2*((1U<<in_pixel.alpha_sBIT)-1))
water	125:15	0:0	10	dp
op	125:17	0:0	10	->
water	125:19	0:0	10	pm
op	125:21	0:0	10	->
water	125:23	0:0	10	limit
op	125:29	0:0	10	+
water	125:31	0:0	10	1
op	125:32	0:0	10	.
op	125:33	0:0	10	/
water	125:34	0:0	10	(
water	125:35	0:0	10	2
op	125:36	0:0	10	*
water	125:37	0:0	10	(
water	125:38	0:0	10	(
water	125:39	0:0	10	1
water	125:40	0:0	10	U
op	125:41	0:0	10	<<
water	125:43	0:0	10	in_pixel
op	125:51	0:0	10	.
water	125:52	0:0	10	alpha_sBIT
water	125:62	0:0	10	)
op	125:63	0:0	10	-
water	125:64	0:0	10	1
water	125:65	0:0	10	)
water	125:66	0:0	10	)
arg	125:69	125:76	9	"alpha"
water	125:69	0:0	10	"alpha"
arg	126:15	126:33	9	digitization_error
water	126:15	0:0	10	digitization_error
water	126:34	0:0	8	;
water	127:6	0:0	6	}
water	128:3	0:0	4	}
water	130:3	0:0	2	dp
op	130:5	0:0	2	->
water	130:7	0:0	2	this
op	130:11	0:0	2	.
water	130:12	0:0	2	ps
op	130:14	0:0	2	->
water	130:16	0:0	2	validated
op	130:26	0:0	2	=
water	130:28	0:0	2	1
water	130:29	0:0	2	;
