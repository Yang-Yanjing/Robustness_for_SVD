func	1:0	308:0	0	int	main
params	2:4	0:0	1	
param	2:5	2:13	2	int	argc
param	2:15	2:26	2	char * *	argv
stmnts	0:0	307:11	1	
decl	4:3	4:29	2	unsigned int	i
water	4:17	0:0	2	,
decl	4:3	4:29	2	unsigned int	i16
water	4:22	0:0	2	,
decl	4:3	4:29	2	unsigned int	ibase
decl	5:3	5:23	2	double	min_error
op	5:20	0:0	2	=
water	5:22	0:0	2	0
decl	6:3	6:23	2	double	max_error
op	6:20	0:0	2	=
water	6:22	0:0	2	0
decl	7:3	7:25	2	double	min_error16
op	7:22	0:0	2	=
water	7:24	0:0	2	0
decl	8:3	8:25	2	double	max_error16
op	8:22	0:0	2	=
water	8:24	0:0	2	0
decl	9:3	9:16	2	double	adjust
decl	10:3	10:60	2	double	adjust_lo
op	10:20	0:0	2	=
water	10:22	0:0	2	0
op	10:23	0:0	2	.
water	10:24	0:0	2	4
water	10:25	0:0	2	,
decl	10:3	10:60	2	double	adjust_hi
op	10:37	0:0	2	=
water	10:39	0:0	2	0
op	10:40	0:0	2	.
water	10:41	0:0	2	6
water	10:42	0:0	2	,
decl	10:3	10:60	2	double	adjust_mid
op	10:55	0:0	2	=
water	10:57	0:0	2	0
op	10:58	0:0	2	.
water	10:59	0:0	2	5
decl	11:3	11:48	2	unsigned int	ec_lo
op	11:22	0:0	2	=
water	11:24	0:0	2	0
water	11:25	0:0	2	,
decl	11:3	11:48	2	unsigned int	ec_hi
op	11:33	0:0	2	=
water	11:35	0:0	2	0
water	11:36	0:0	2	,
decl	11:3	11:48	2	unsigned int	ec_mid
op	11:45	0:0	2	=
water	11:47	0:0	2	0
decl	12:3	12:31	2	unsigned int	error_count
op	12:28	0:0	2	=
water	12:30	0:0	2	0
decl	13:3	13:33	2	unsigned int	error_count16
op	13:30	0:0	2	=
water	13:32	0:0	2	0
decl	14:3	14:20	2	int	test_only
op	14:17	0:0	2	=
water	14:19	0:0	2	0
if	15:3	16:48	2	(argc > 1)
cond	15:7	15:14	3	argc > 1
water	15:7	0:0	4	argc
op	15:12	0:0	4	>
water	15:14	0:0	4	1
stmts	16:6	16:48	3	
water	16:6	0:0	4	test_only
op	16:16	0:0	4	=
call	16:18	16:42	4	strcmp
arg	16:25	16:33	5	"--test"
water	16:25	0:0	6	"--test"
arg	16:35	16:42	5	argv[1]
water	16:35	0:0	6	argv
op	16:39	0:0	6	[
water	16:40	0:0	6	1
op	16:41	0:0	6	]
op	16:44	0:0	4	==
water	16:47	0:0	4	0
water	16:48	0:0	4	;
for	18:3	21:3	2	(i = 0 ;i < 256;++ i)
forinit	18:8	18:11	3	i = 0 ;
water	18:8	0:0	4	i
op	18:9	0:0	4	=
water	18:10	0:0	4	0
water	18:11	0:0	4	;
cond	18:13	18:15	3	i < 256
water	18:13	0:0	4	i
op	18:14	0:0	4	<
water	18:15	0:0	4	256
forexpr	18:20	18:22	3	++ i
op	18:20	0:0	4	++
water	18:22	0:0	4	i
stmts	19:3	21:3	3	
water	19:3	0:0	4	{
water	20:6	0:0	4	png_sRGB_table
op	20:20	0:0	4	[
water	20:21	0:0	4	i
op	20:22	0:0	4	]
op	20:24	0:0	4	=
call	20:26	20:35	4	invsRGB
arg	20:34	20:35	5	i
water	20:34	0:0	6	i
water	20:36	0:0	4	;
water	21:3	0:0	4	}
for	25:3	113:3	2	(;;)
forinit	25:8	25:8	3	;
water	25:8	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	26:3	113:3	3	
water	26:3	0:0	4	{
if	27:6	28:27	4	(ec_lo == 0)
cond	27:10	27:19	5	ec_lo == 0
water	27:10	0:0	6	ec_lo
op	27:16	0:0	6	==
water	27:19	0:0	6	0
stmts	28:9	28:27	5	
water	28:9	0:0	6	adjust
op	28:16	0:0	6	=
water	28:18	0:0	6	adjust_lo
water	28:27	0:0	6	;
else	29:6	30:27	4
stmts	29:11	30:27	5	
if	29:11	30:27	6	(ec_hi == 0)
cond	29:15	29:24	7	ec_hi == 0
water	29:15	0:0	8	ec_hi
op	29:21	0:0	8	==
water	29:24	0:0	8	0
stmts	30:9	30:27	7	
water	30:9	0:0	8	adjust
op	30:16	0:0	8	=
water	30:18	0:0	8	adjust_hi
water	30:27	0:0	8	;
else	31:6	32:28	4
stmts	31:11	32:28	5	
if	31:11	32:28	6	(ec_mid == 0)
cond	31:15	31:25	7	ec_mid == 0
water	31:15	0:0	8	ec_mid
op	31:22	0:0	8	==
water	31:25	0:0	8	0
stmts	32:9	32:28	7	
water	32:9	0:0	8	adjust
op	32:16	0:0	8	=
water	32:18	0:0	8	adjust_mid
water	32:28	0:0	8	;
else	33:6	34:44	4
stmts	33:11	34:44	5	
if	33:11	34:44	6	(ec_mid < ec_hi)
cond	33:15	33:24	7	ec_mid < ec_hi
water	33:15	0:0	8	ec_mid
op	33:22	0:0	8	<
water	33:24	0:0	8	ec_hi
stmts	34:9	34:44	7	
water	34:9	0:0	8	adjust
op	34:16	0:0	8	=
water	34:18	0:0	8	(
water	34:19	0:0	8	adjust_mid
op	34:30	0:0	8	+
water	34:32	0:0	8	adjust_hi
water	34:41	0:0	8	)
op	34:42	0:0	8	/
water	34:43	0:0	8	2
water	34:44	0:0	8	;
else	35:6	36:44	4
stmts	35:11	36:44	5	
if	35:11	36:44	6	(ec_mid < ec_lo)
cond	35:15	35:24	7	ec_mid < ec_lo
water	35:15	0:0	8	ec_mid
op	35:22	0:0	8	<
water	35:24	0:0	8	ec_lo
stmts	36:9	36:44	7	
water	36:9	0:0	8	adjust
op	36:16	0:0	8	=
water	36:18	0:0	8	(
water	36:19	0:0	8	adjust_mid
op	36:30	0:0	8	+
water	36:32	0:0	8	adjust_lo
water	36:41	0:0	8	)
op	36:42	0:0	8	/
water	36:43	0:0	8	2
water	36:44	0:0	8	;
else	37:6	41:6	4
stmts	38:6	41:6	5	
water	38:6	0:0	6	{
call	39:9	39:78	6	fprintf
arg	39:17	39:23	7	stderr
water	39:17	0:0	8	stderr
arg	39:25	39:56	7	"not reached: %u .. %u .. %u\n"
water	39:25	0:0	8	"not reached: %u .. %u .. %u\n"
arg	39:58	39:63	7	ec_lo
water	39:58	0:0	8	ec_lo
arg	39:65	39:71	7	ec_mid
water	39:65	0:0	8	ec_mid
arg	39:73	39:78	7	ec_hi
water	39:73	0:0	8	ec_hi
water	39:79	0:0	6	;
call	40:9	40:15	6	exit
arg	40:14	40:15	7	1
water	40:14	0:0	8	1
water	40:16	0:0	6	;
water	41:6	0:0	6	}
for	43:6	64:6	4	(i = 0 ;i <= 511;++ i)
forinit	43:11	43:14	5	i = 0 ;
water	43:11	0:0	6	i
op	43:12	0:0	6	=
water	43:13	0:0	6	0
water	43:14	0:0	6	;
cond	43:16	43:19	5	i <= 511
water	43:16	0:0	6	i
op	43:17	0:0	6	<=
water	43:19	0:0	6	511
forexpr	43:24	43:26	5	++ i
op	43:24	0:0	6	++
water	43:26	0:0	6	i
stmts	44:6	64:6	5	
water	44:6	0:0	6	{
decl	45:9	45:40	6	double	lo
op	45:19	0:0	6	=
water	45:21	0:0	6	255
call	45:25	45:39	7	*sRGB
arg	45:32	45:39	8	i<<15
water	45:32	0:0	9	i
op	45:34	0:0	9	<<
water	45:37	0:0	9	15
decl	46:9	46:44	6	double	hi
op	46:19	0:0	6	=
water	46:21	0:0	6	255
call	46:25	46:43	7	*sRGB
arg	46:32	46:43	8	(i+1)<<15
water	46:32	0:0	9	(
water	46:33	0:0	9	i
op	46:34	0:0	9	+
water	46:35	0:0	9	1
water	46:36	0:0	9	)
op	46:38	0:0	9	<<
water	46:41	0:0	9	15
decl	47:9	47:26	6	unsigned int	calc
water	48:9	0:0	6	calc
op	48:14	0:0	6	=
call	48:16	48:43	6	nearbyint
arg	48:26	48:43	7	(lo+adjust)*256
water	48:26	0:0	8	(
water	48:27	0:0	8	lo
op	48:29	0:0	8	+
water	48:30	0:0	8	adjust
water	48:36	0:0	8	)
op	48:38	0:0	8	*
water	48:40	0:0	8	256
water	48:44	0:0	6	;
if	49:9	54:9	6	(calc > 65535)
cond	49:13	49:20	7	calc > 65535
water	49:13	0:0	8	calc
op	49:18	0:0	8	>
water	49:20	0:0	8	65535
stmts	50:9	54:9	7	
water	50:9	0:0	8	{
call	51:12	52:19	8	fprintf
arg	51:20	51:26	9	stderr
water	51:20	0:0	10	stderr
arg	51:28	51:64	9	"table[%d][0]: overflow %08x (%d)\n"
water	51:28	0:0	10	"table[%d][0]: overflow %08x (%d)\n"
arg	51:66	51:67	9	i
water	51:66	0:0	10	i
arg	51:69	51:73	9	calc
water	51:69	0:0	10	calc
arg	52:15	52:19	9	calc
water	52:15	0:0	10	calc
water	52:20	0:0	8	;
call	53:12	53:18	8	exit
arg	53:17	53:18	9	1
water	53:17	0:0	10	1
water	53:19	0:0	8	;
water	54:9	0:0	8	}
water	55:9	0:0	6	png_sRGB_base
op	55:22	0:0	6	[
water	55:23	0:0	6	i
op	55:24	0:0	6	]
op	55:26	0:0	6	=
water	55:28	0:0	6	calc
water	55:32	0:0	6	;
water	56:9	0:0	6	calc
op	56:14	0:0	6	=
call	56:16	56:38	6	nearbyint
arg	56:26	56:38	7	(hi-lo)*32
water	56:26	0:0	8	(
water	56:27	0:0	8	hi
op	56:29	0:0	8	-
water	56:30	0:0	8	lo
water	56:32	0:0	8	)
op	56:34	0:0	8	*
water	56:36	0:0	8	32
water	56:39	0:0	6	;
if	57:9	62:9	6	(calc > 255)
cond	57:13	57:20	7	calc > 255
water	57:13	0:0	8	calc
op	57:18	0:0	8	>
water	57:20	0:0	8	255
stmts	58:9	62:9	7	
water	58:9	0:0	8	{
call	59:12	60:19	8	fprintf
arg	59:20	59:26	9	stderr
water	59:20	0:0	10	stderr
arg	59:28	59:64	9	"table[%d][1]: overflow %08x (%d)\n"
water	59:28	0:0	10	"table[%d][1]: overflow %08x (%d)\n"
arg	59:66	59:67	9	i
water	59:66	0:0	10	i
arg	59:69	59:73	9	calc
water	59:69	0:0	10	calc
arg	60:15	60:19	9	calc
water	60:15	0:0	10	calc
water	60:20	0:0	8	;
call	61:12	61:18	8	exit
arg	61:17	61:18	9	1
water	61:17	0:0	10	1
water	61:19	0:0	8	;
water	62:9	0:0	8	}
water	63:9	0:0	6	png_sRGB_delta
op	63:23	0:0	6	[
water	63:24	0:0	6	i
op	63:25	0:0	6	]
op	63:27	0:0	6	=
water	63:29	0:0	6	calc
water	63:33	0:0	6	;
water	64:6	0:0	6	}
water	66:6	0:0	4	error_count16
op	66:20	0:0	4	=
water	66:22	0:0	4	0
water	66:23	0:0	4	;
for	67:6	74:6	4	(i16 = 0 ;i16 <= 65535;++ i16)
forinit	67:11	67:16	5	i16 = 0 ;
water	67:11	0:0	6	i16
op	67:14	0:0	6	=
water	67:15	0:0	6	0
water	67:16	0:0	6	;
cond	67:18	67:25	5	i16 <= 65535
water	67:18	0:0	6	i16
op	67:22	0:0	6	<=
water	67:25	0:0	6	65535
forexpr	67:32	67:34	5	++ i16
op	67:32	0:0	6	++
water	67:34	0:0	6	i16
stmts	68:6	74:6	5	
water	68:6	0:0	6	{
decl	69:9	69:33	6	unsigned int	i
op	69:24	0:0	6	=
water	69:26	0:0	6	255
op	69:29	0:0	6	*
water	69:30	0:0	6	i16
decl	70:9	70:53	6	unsigned int	iexact
op	70:29	0:0	6	=
call	70:31	70:52	7	nearbyint
arg	70:41	70:52	8	255*sRGB(i)
water	70:41	0:0	9	255
call	70:44	70:51	9	*sRGB
arg	70:50	70:51	10	i
water	70:50	0:0	11	i
decl	71:9	71:53	6	unsigned int	icalc
op	71:28	0:0	6	=
call	71:30	71:52	7	PNG_sRGB_FROM_LINEAR
arg	71:51	71:52	8	i
water	71:51	0:0	9	i
if	72:9	73:27	6	(icalc != iexact)
cond	72:13	72:22	7	icalc != iexact
water	72:13	0:0	8	icalc
op	72:19	0:0	8	!=
water	72:22	0:0	8	iexact
stmts	73:12	73:27	7	
op	73:12	0:0	8	++
water	73:14	0:0	8	error_count16
water	73:27	0:0	8	;
water	74:6	0:0	6	}
if	76:6	77:30	4	(ec_lo == 0)
cond	76:10	76:19	5	ec_lo == 0
water	76:10	0:0	6	ec_lo
op	76:16	0:0	6	==
water	76:19	0:0	6	0
stmts	77:9	77:30	5	
water	77:9	0:0	6	ec_lo
op	77:15	0:0	6	=
water	77:17	0:0	6	error_count16
water	77:30	0:0	6	;
else	78:6	79:30	4
stmts	78:11	79:30	5	
if	78:11	79:30	6	(ec_hi == 0)
cond	78:15	78:24	7	ec_hi == 0
water	78:15	0:0	8	ec_hi
op	78:21	0:0	8	==
water	78:24	0:0	8	0
stmts	79:9	79:30	7	
water	79:9	0:0	8	ec_hi
op	79:15	0:0	8	=
water	79:17	0:0	8	error_count16
water	79:30	0:0	8	;
else	80:6	85:6	4
stmts	80:11	85:6	5	
if	80:11	85:6	6	(ec_mid == 0)
cond	80:15	80:25	7	ec_mid == 0
water	80:15	0:0	8	ec_mid
op	80:22	0:0	8	==
water	80:25	0:0	8	0
stmts	81:6	85:6	7	
water	81:6	0:0	8	{
water	82:9	0:0	8	ec_mid
op	82:16	0:0	8	=
water	82:18	0:0	8	error_count16
water	82:31	0:0	8	;
call	83:9	84:17	8	printf
arg	83:16	83:62	9	"/* initial error counts: %u .. %u .. %u */\n"
water	83:16	0:0	10	"/* initial error counts: %u .. %u .. %u */\n"
arg	83:64	83:69	9	ec_lo
water	83:64	0:0	10	ec_lo
arg	83:71	83:77	9	ec_mid
water	83:71	0:0	10	ec_mid
arg	84:12	84:17	9	ec_hi
water	84:12	0:0	10	ec_hi
water	84:18	0:0	8	;
water	85:6	0:0	8	}
else	86:6	92:6	4
stmts	86:11	92:6	5	
if	86:11	92:6	6	(error_count16 < ec_mid)
cond	86:15	86:31	7	error_count16 < ec_mid
water	86:15	0:0	8	error_count16
op	86:29	0:0	8	<
water	86:31	0:0	8	ec_mid
stmts	87:6	92:6	7	
water	87:6	0:0	8	{
call	88:9	89:25	8	printf
arg	88:16	88:53	9	"/* adjust (mid ): %f: %u -> %u */\n"
water	88:16	0:0	10	"/* adjust (mid ): %f: %u -> %u */\n"
arg	88:55	88:61	9	adjust
water	88:55	0:0	10	adjust
arg	88:63	88:69	9	ec_mid
water	88:63	0:0	10	ec_mid
arg	89:12	89:25	9	error_count16
water	89:12	0:0	10	error_count16
water	89:26	0:0	8	;
water	90:9	0:0	8	ec_mid
op	90:16	0:0	8	=
water	90:18	0:0	8	error_count16
water	90:31	0:0	8	;
water	91:9	0:0	8	adjust_mid
op	91:20	0:0	8	=
water	91:22	0:0	8	adjust
water	91:28	0:0	8	;
water	92:6	0:0	8	}
else	93:6	99:6	4
stmts	93:11	99:6	5	
if	93:11	99:6	6	(adjust < adjust_mid && error_count16 < ec_lo)
cond	93:15	93:54	7	adjust < adjust_mid && error_count16 < ec_lo
water	93:15	0:0	8	adjust
op	93:22	0:0	8	<
water	93:24	0:0	8	adjust_mid
op	93:35	0:0	8	&&
water	93:38	0:0	8	error_count16
op	93:52	0:0	8	<
water	93:54	0:0	8	ec_lo
stmts	94:6	99:6	7	
water	94:6	0:0	8	{
call	95:9	96:25	8	printf
arg	95:16	95:53	9	"/* adjust (low ): %f: %u -> %u */\n"
water	95:16	0:0	10	"/* adjust (low ): %f: %u -> %u */\n"
arg	95:55	95:61	9	adjust
water	95:55	0:0	10	adjust
arg	95:63	95:68	9	ec_lo
water	95:63	0:0	10	ec_lo
arg	96:12	96:25	9	error_count16
water	96:12	0:0	10	error_count16
water	96:26	0:0	8	;
water	97:9	0:0	8	ec_lo
op	97:15	0:0	8	=
water	97:17	0:0	8	error_count16
water	97:30	0:0	8	;
water	98:9	0:0	8	adjust_lo
op	98:19	0:0	8	=
water	98:21	0:0	8	adjust
water	98:27	0:0	8	;
water	99:6	0:0	8	}
else	100:6	106:6	4
stmts	100:11	106:6	5	
if	100:11	106:6	6	(adjust > adjust_mid && error_count16 < ec_hi)
cond	100:15	100:54	7	adjust > adjust_mid && error_count16 < ec_hi
water	100:15	0:0	8	adjust
op	100:22	0:0	8	>
water	100:24	0:0	8	adjust_mid
op	100:35	0:0	8	&&
water	100:38	0:0	8	error_count16
op	100:52	0:0	8	<
water	100:54	0:0	8	ec_hi
stmts	101:6	106:6	7	
water	101:6	0:0	8	{
call	102:9	103:25	8	printf
arg	102:16	102:53	9	"/* adjust (high): %f: %u -> %u */\n"
water	102:16	0:0	10	"/* adjust (high): %f: %u -> %u */\n"
arg	102:55	102:61	9	adjust
water	102:55	0:0	10	adjust
arg	102:63	102:68	9	ec_hi
water	102:63	0:0	10	ec_hi
arg	103:12	103:25	9	error_count16
water	103:12	0:0	10	error_count16
water	103:26	0:0	8	;
water	104:9	0:0	8	ec_hi
op	104:15	0:0	8	=
water	104:17	0:0	8	error_count16
water	104:30	0:0	8	;
water	105:9	0:0	8	adjust_hi
op	105:19	0:0	8	=
water	105:21	0:0	8	adjust
water	105:27	0:0	8	;
water	106:6	0:0	8	}
else	107:6	112:6	4
stmts	108:6	112:6	5	
water	108:6	0:0	6	{
water	109:9	0:0	6	adjust
op	109:16	0:0	6	=
water	109:18	0:0	6	adjust_mid
water	109:28	0:0	6	;
call	110:9	110:56	6	printf
arg	110:16	110:40	7	"/* adjust: %f: %u */\n"
water	110:16	0:0	8	"/* adjust: %f: %u */\n"
arg	110:42	110:48	7	adjust
water	110:42	0:0	8	adjust
arg	110:50	110:56	7	ec_mid
water	110:50	0:0	8	ec_mid
water	110:57	0:0	6	;
break	111:9	111:14	6	
water	112:6	0:0	6	}
water	113:3	0:0	4	}
for	117:3	197:3	2	(ibase = 0 ;ibase < 65536;ibase += 128)
forinit	117:8	117:15	3	ibase = 0 ;
water	117:8	0:0	4	ibase
op	117:13	0:0	4	=
water	117:14	0:0	4	0
water	117:15	0:0	4	;
cond	117:17	117:23	3	ibase < 65536
water	117:17	0:0	4	ibase
op	117:22	0:0	4	<
water	117:23	0:0	4	65536
forexpr	117:30	117:37	3	ibase += 128
water	117:30	0:0	4	ibase
op	117:35	0:0	4	+=
water	117:37	0:0	4	128
stmts	118:3	197:3	3	
water	118:3	0:0	4	{
decl	119:6	119:75	4	png_uint_16	base
op	119:23	0:0	4	=
water	119:25	0:0	4	png_sRGB_base
op	119:38	0:0	4	[
water	119:39	0:0	4	ibase
op	119:45	0:0	4	>>
water	119:48	0:0	4	7
op	119:49	0:0	4	]
water	119:50	0:0	4	,
decl	119:6	119:75	4	png_uint_16	trybase
op	119:60	0:0	4	=
water	119:62	0:0	4	base
water	119:66	0:0	4	,
decl	119:6	119:75	4	png_uint_16	ob
op	119:70	0:0	4	=
water	119:71	0:0	4	base
decl	120:6	120:77	4	png_byte	delta
op	120:21	0:0	4	=
water	120:23	0:0	4	png_sRGB_delta
op	120:37	0:0	4	[
water	120:38	0:0	4	ibase
op	120:44	0:0	4	>>
water	120:47	0:0	4	7
op	120:48	0:0	4	]
water	120:49	0:0	4	,
decl	120:6	120:77	4	png_byte	trydelta
op	120:60	0:0	4	=
water	120:62	0:0	4	delta
water	120:67	0:0	4	,
decl	120:6	120:77	4	png_byte	od
op	120:71	0:0	4	=
water	120:72	0:0	4	delta
decl	121:6	121:34	4	unsigned int	ecbase
op	121:26	0:0	4	=
water	121:28	0:0	4	0
water	121:29	0:0	4	,
decl	121:6	121:34	4	unsigned int	eco
for	122:6	186:6	4	(;;)
forinit	122:11	122:11	5	;
water	122:11	0:0	6	;
cond	0:0	0:0	5	
forexpr	0:0	0:0	5	
stmts	123:6	186:6	5	
water	123:6	0:0	6	{
water	124:9	0:0	6	png_sRGB_base
op	124:22	0:0	6	[
water	124:23	0:0	6	ibase
op	124:29	0:0	6	>>
water	124:32	0:0	6	7
op	124:33	0:0	6	]
op	124:35	0:0	6	=
water	124:37	0:0	6	trybase
water	124:44	0:0	6	;
water	125:9	0:0	6	png_sRGB_delta
op	125:23	0:0	6	[
water	125:24	0:0	6	ibase
op	125:30	0:0	6	>>
water	125:33	0:0	6	7
op	125:34	0:0	6	]
op	125:36	0:0	6	=
water	125:38	0:0	6	trydelta
water	125:46	0:0	6	;
water	127:9	0:0	6	error_count16
op	127:23	0:0	6	=
water	127:25	0:0	6	0
water	127:26	0:0	6	;
for	128:9	135:9	6	(i16 = ibase ;i16 < ibase + 128;++ i16)
forinit	128:14	128:23	7	i16 = ibase ;
water	128:14	0:0	8	i16
op	128:17	0:0	8	=
water	128:18	0:0	8	ibase
water	128:23	0:0	8	;
cond	128:25	128:37	7	i16 < ibase + 128
water	128:25	0:0	8	i16
op	128:29	0:0	8	<
water	128:31	0:0	8	ibase
op	128:36	0:0	8	+
water	128:37	0:0	8	128
forexpr	128:42	128:44	7	++ i16
op	128:42	0:0	8	++
water	128:44	0:0	8	i16
stmts	129:9	135:9	7	
water	129:9	0:0	8	{
decl	130:12	130:36	8	unsigned int	i
op	130:27	0:0	8	=
water	130:29	0:0	8	255
op	130:32	0:0	8	*
water	130:33	0:0	8	i16
decl	131:12	131:56	8	unsigned int	iexact
op	131:32	0:0	8	=
call	131:34	131:55	9	nearbyint
arg	131:44	131:55	10	255*sRGB(i)
water	131:44	0:0	11	255
call	131:47	131:54	11	*sRGB
arg	131:53	131:54	12	i
water	131:53	0:0	13	i
decl	132:12	132:56	8	unsigned int	icalc
op	132:31	0:0	8	=
call	132:33	132:55	9	PNG_sRGB_FROM_LINEAR
arg	132:54	132:55	10	i
water	132:54	0:0	11	i
if	133:12	134:30	8	(icalc != iexact)
cond	133:16	133:25	9	icalc != iexact
water	133:16	0:0	10	icalc
op	133:22	0:0	10	!=
water	133:25	0:0	10	iexact
stmts	134:15	134:30	9	
op	134:15	0:0	10	++
water	134:17	0:0	10	error_count16
water	134:30	0:0	10	;
water	135:9	0:0	8	}
if	136:9	137:17	6	(error_count16 == 0)
cond	136:13	136:30	7	error_count16 == 0
water	136:13	0:0	8	error_count16
op	136:27	0:0	8	==
water	136:30	0:0	8	0
stmts	137:12	137:17	7	
break	137:12	137:17	8	
if	138:9	142:9	6	(ecbase == 0)
cond	138:13	138:23	7	ecbase == 0
water	138:13	0:0	8	ecbase
op	138:20	0:0	8	==
water	138:23	0:0	8	0
stmts	139:9	142:9	7	
water	139:9	0:0	8	{
water	140:12	0:0	8	eco
op	140:16	0:0	8	=
water	140:18	0:0	8	ecbase
op	140:25	0:0	8	=
water	140:27	0:0	8	error_count16
water	140:40	0:0	8	;
op	141:12	0:0	8	++
water	141:14	0:0	8	trybase
water	141:21	0:0	8	;
water	142:9	0:0	8	}
else	143:9	171:9	6
stmts	143:14	171:9	7	
if	143:14	171:9	8	(error_count16 < ecbase)
cond	143:18	143:34	9	error_count16 < ecbase
water	143:18	0:0	10	error_count16
op	143:32	0:0	10	<
water	143:34	0:0	10	ecbase
stmts	144:9	171:9	9	
water	144:9	0:0	10	{
if	145:12	149:12	10	(trybase > base)
cond	145:16	145:26	11	trybase > base
water	145:16	0:0	12	trybase
op	145:24	0:0	12	>
water	145:26	0:0	12	base
stmts	146:12	149:12	11	
water	146:12	0:0	12	{
water	147:15	0:0	12	base
op	147:20	0:0	12	=
water	147:22	0:0	12	trybase
water	147:29	0:0	12	;
op	148:15	0:0	12	++
water	148:17	0:0	12	trybase
water	148:24	0:0	12	;
water	149:12	0:0	12	}
else	150:12	154:12	10
stmts	150:17	154:12	11	
if	150:17	154:12	12	(trybase < base)
cond	150:21	150:31	13	trybase < base
water	150:21	0:0	14	trybase
op	150:29	0:0	14	<
water	150:31	0:0	14	base
stmts	151:12	154:12	13	
water	151:12	0:0	14	{
water	152:15	0:0	14	base
op	152:20	0:0	14	=
water	152:22	0:0	14	trybase
water	152:29	0:0	14	;
op	153:15	0:0	14	--
water	153:17	0:0	14	trybase
water	153:24	0:0	14	;
water	154:12	0:0	14	}
else	155:12	159:12	10
stmts	155:17	159:12	11	
if	155:17	159:12	12	(trydelta > delta)
cond	155:21	155:32	13	trydelta > delta
water	155:21	0:0	14	trydelta
op	155:30	0:0	14	>
water	155:32	0:0	14	delta
stmts	156:12	159:12	13	
water	156:12	0:0	14	{
water	157:15	0:0	14	delta
op	157:21	0:0	14	=
water	157:23	0:0	14	trydelta
water	157:31	0:0	14	;
op	158:15	0:0	14	++
water	158:17	0:0	14	trydelta
water	158:25	0:0	14	;
water	159:12	0:0	14	}
else	160:12	164:12	10
stmts	160:17	164:12	11	
if	160:17	164:12	12	(trydelta < delta)
cond	160:21	160:32	13	trydelta < delta
water	160:21	0:0	14	trydelta
op	160:30	0:0	14	<
water	160:32	0:0	14	delta
stmts	161:12	164:12	13	
water	161:12	0:0	14	{
water	162:15	0:0	14	delta
op	162:21	0:0	14	=
water	162:23	0:0	14	trydelta
water	162:31	0:0	14	;
op	163:15	0:0	14	--
water	163:17	0:0	14	trydelta
water	163:25	0:0	14	;
water	164:12	0:0	14	}
else	165:12	169:12	10
stmts	166:12	169:12	11	
water	166:12	0:0	12	{
call	167:15	167:55	12	fprintf
arg	167:23	167:29	13	stderr
water	167:23	0:0	14	stderr
arg	167:31	167:55	13	"makesRGB: impossible\n"
water	167:31	0:0	14	"makesRGB: impossible\n"
water	167:56	0:0	12	;
call	168:15	168:21	12	exit
arg	168:20	168:21	13	1
water	168:20	0:0	14	1
water	168:22	0:0	12	;
water	169:12	0:0	12	}
water	170:12	0:0	10	ecbase
op	170:19	0:0	10	=
water	170:21	0:0	10	error_count16
water	170:34	0:0	10	;
water	171:9	0:0	10	}
else	172:9	185:9	6
stmts	173:9	185:9	7	
water	173:9	0:0	8	{
if	174:12	175:31	8	(trybase > base)
cond	174:16	174:26	9	trybase > base
water	174:16	0:0	10	trybase
op	174:24	0:0	10	>
water	174:26	0:0	10	base
stmts	175:15	175:31	9	
water	175:15	0:0	10	trybase
op	175:23	0:0	10	=
water	175:25	0:0	10	base
op	175:29	0:0	10	-
water	175:30	0:0	10	1
water	175:31	0:0	10	;
else	176:12	180:12	8
stmts	176:17	180:12	9	
if	176:17	180:12	10	(trybase < base)
cond	176:21	176:31	11	trybase < base
water	176:21	0:0	12	trybase
op	176:29	0:0	12	<
water	176:31	0:0	12	base
stmts	177:12	180:12	11	
water	177:12	0:0	12	{
water	178:15	0:0	12	trybase
op	178:23	0:0	12	=
water	178:25	0:0	12	base
water	178:29	0:0	12	;
op	179:15	0:0	12	++
water	179:17	0:0	12	trydelta
water	179:25	0:0	12	;
water	180:12	0:0	12	}
else	181:12	182:33	8
stmts	181:17	182:33	9	
if	181:17	182:33	10	(trydelta > delta)
cond	181:21	181:32	11	trydelta > delta
water	181:21	0:0	12	trydelta
op	181:30	0:0	12	>
water	181:32	0:0	12	delta
stmts	182:15	182:33	11	
water	182:15	0:0	12	trydelta
op	182:24	0:0	12	=
water	182:26	0:0	12	delta
op	182:31	0:0	12	-
water	182:32	0:0	12	1
water	182:33	0:0	12	;
else	183:12	184:20	8
stmts	183:17	184:20	9	
if	183:17	184:20	10	(trydelta < delta)
cond	183:21	183:32	11	trydelta < delta
water	183:21	0:0	12	trydelta
op	183:30	0:0	12	<
water	183:32	0:0	12	delta
stmts	184:15	184:20	11	
break	184:15	184:20	12	
water	185:9	0:0	8	}
water	186:6	0:0	6	}
water	187:6	0:0	4	png_sRGB_base
op	187:19	0:0	4	[
water	187:20	0:0	4	ibase
op	187:26	0:0	4	>>
water	187:29	0:0	4	7
op	187:30	0:0	4	]
op	187:32	0:0	4	=
water	187:34	0:0	4	base
water	187:38	0:0	4	;
water	188:6	0:0	4	png_sRGB_delta
op	188:20	0:0	4	[
water	188:21	0:0	4	ibase
op	188:27	0:0	4	>>
water	188:30	0:0	4	7
op	188:31	0:0	4	]
op	188:33	0:0	4	=
water	188:35	0:0	4	delta
water	188:40	0:0	4	;
if	189:6	193:6	4	(base != ob || delta != od)
cond	189:10	189:33	5	base != ob || delta != od
water	189:10	0:0	6	base
op	189:15	0:0	6	!=
water	189:18	0:0	6	ob
op	189:21	0:0	6	||
water	189:24	0:0	6	delta
op	189:30	0:0	6	!=
water	189:33	0:0	6	od
stmts	190:6	193:6	5	
water	190:6	0:0	6	{
call	191:9	192:54	6	printf
arg	191:16	191:70	7	"/* table[%u]={%u,%u} -> {%u,%u} %u -> %u errors */\n"
water	191:16	0:0	8	"/* table[%u]={%u,%u} -> {%u,%u} %u -> %u errors */\n"
arg	192:12	192:20	7	ibase>>7
water	192:12	0:0	8	ibase
op	192:17	0:0	8	>>
water	192:19	0:0	8	7
arg	192:22	192:24	7	ob
water	192:22	0:0	8	ob
arg	192:26	192:28	7	od
water	192:26	0:0	8	od
arg	192:30	192:34	7	base
water	192:30	0:0	8	base
arg	192:36	192:41	7	delta
water	192:36	0:0	8	delta
arg	192:43	192:46	7	eco
water	192:43	0:0	8	eco
arg	192:48	192:54	7	ecbase
water	192:48	0:0	8	ecbase
water	192:55	0:0	6	;
water	193:6	0:0	6	}
else	194:6	196:19	4
stmts	194:11	196:19	5	
if	194:11	196:19	6	(0)
cond	194:15	194:15	7	0
water	194:15	0:0	8	0
stmts	195:9	196:19	7	
call	195:9	196:18	8	printf
arg	195:16	195:53	9	"/* table[%u]={%u,%u} %u errors */\n"
water	195:16	0:0	10	"/* table[%u]={%u,%u} %u errors */\n"
arg	195:55	195:63	9	ibase>>7
water	195:55	0:0	10	ibase
op	195:60	0:0	10	>>
water	195:62	0:0	10	7
arg	195:65	195:67	9	ob
water	195:65	0:0	10	ob
arg	195:69	195:71	9	od
water	195:69	0:0	10	od
arg	196:12	196:18	9	ecbase
water	196:12	0:0	10	ecbase
water	196:19	0:0	8	;
water	197:3	0:0	4	}
water	199:3	0:0	2	min_error
op	199:13	0:0	2	=
op	199:15	0:0	2	-
op	199:16	0:0	2	.
water	199:17	0:0	2	4999
water	199:21	0:0	2	;
water	200:3	0:0	2	max_error
op	200:13	0:0	2	=
op	200:15	0:0	2	.
water	200:16	0:0	2	4999
water	200:20	0:0	2	;
water	201:3	0:0	2	error_count
op	201:15	0:0	2	=
water	201:17	0:0	2	0
water	201:18	0:0	2	;
for	202:3	222:3	2	(i = 0 ;i <= max_input;++ i)
forinit	202:8	202:11	3	i = 0 ;
water	202:8	0:0	4	i
op	202:9	0:0	4	=
water	202:10	0:0	4	0
water	202:11	0:0	4	;
cond	202:13	202:18	3	i <= max_input
water	202:13	0:0	4	i
op	202:15	0:0	4	<=
water	202:18	0:0	4	max_input
forexpr	202:29	202:31	3	++ i
op	202:29	0:0	4	++
water	202:31	0:0	4	i
stmts	203:3	222:3	3	
water	203:3	0:0	4	{
decl	204:6	204:50	4	unsigned int	iexact
op	204:26	0:0	4	=
call	204:28	204:49	5	nearbyint
arg	204:38	204:49	6	255*sRGB(i)
water	204:38	0:0	7	255
call	204:41	204:48	7	*sRGB
arg	204:47	204:48	8	i
water	204:47	0:0	9	i
decl	205:6	205:50	4	unsigned int	icalc
op	205:25	0:0	4	=
call	205:27	205:49	5	PNG_sRGB_FROM_LINEAR
arg	205:48	205:49	6	i
water	205:48	0:0	7	i
if	206:6	221:6	4	(icalc != iexact)
cond	206:10	206:19	5	icalc != iexact
water	206:10	0:0	6	icalc
op	206:16	0:0	6	!=
water	206:19	0:0	6	iexact
stmts	207:6	221:6	5	
water	207:6	0:0	6	{
decl	208:9	208:41	6	double	err
op	208:20	0:0	6	=
water	208:22	0:0	6	255
call	208:25	208:32	7	*sRGB
arg	208:31	208:32	8	i
water	208:31	0:0	9	i
op	208:34	0:0	6	-
water	208:36	0:0	6	icalc
if	209:9	215:9	6	(err > ( max_error + . 001 ) || err < ( min_error - . 001 ))
cond	209:13	209:60	7	err > ( max_error + . 001 ) || err < ( min_error - . 001 )
water	209:13	0:0	8	err
op	209:17	0:0	8	>
water	209:19	0:0	8	(
water	209:20	0:0	8	max_error
op	209:29	0:0	8	+
op	209:30	0:0	8	.
water	209:31	0:0	8	001
water	209:34	0:0	8	)
op	209:36	0:0	8	||
water	209:39	0:0	8	err
op	209:43	0:0	8	<
water	209:45	0:0	8	(
water	209:46	0:0	8	min_error
op	209:55	0:0	8	-
op	209:56	0:0	8	.
water	209:57	0:0	8	001
water	209:60	0:0	8	)
stmts	210:9	215:9	7	
water	210:9	0:0	8	{
call	211:12	214:41	8	printf
arg	212:15	212:79	9	"/* 0x%08x: exact: %3d, got: %3d [tables: %08x, %08x] (%f) */\n"
water	212:15	0:0	10	"/* 0x%08x: exact: %3d, got: %3d [tables: %08x, %08x] (%f) */\n"
arg	213:15	213:16	9	i
water	213:15	0:0	10	i
arg	213:18	213:24	9	iexact
water	213:18	0:0	10	iexact
arg	213:26	213:31	9	icalc
water	213:26	0:0	10	icalc
arg	213:33	213:53	9	png_sRGB_base[i>>15]
water	213:33	0:0	10	png_sRGB_base
op	213:46	0:0	10	[
water	213:47	0:0	10	i
op	213:48	0:0	10	>>
water	213:50	0:0	10	15
op	213:52	0:0	10	]
arg	214:15	214:36	9	png_sRGB_delta[i>>15]
water	214:15	0:0	10	png_sRGB_delta
op	214:29	0:0	10	[
water	214:30	0:0	10	i
op	214:31	0:0	10	>>
water	214:33	0:0	10	15
op	214:35	0:0	10	]
arg	214:38	214:41	9	err
water	214:38	0:0	10	err
water	214:42	0:0	8	;
water	215:9	0:0	8	}
op	216:9	0:0	6	++
water	216:11	0:0	6	error_count
water	216:22	0:0	6	;
if	217:9	218:27	6	(err > max_error)
cond	217:13	217:19	7	err > max_error
water	217:13	0:0	8	err
op	217:17	0:0	8	>
water	217:19	0:0	8	max_error
stmts	218:12	218:27	7	
water	218:12	0:0	8	max_error
op	218:22	0:0	8	=
water	218:24	0:0	8	err
water	218:27	0:0	8	;
else	219:9	220:27	6
stmts	219:14	220:27	7	
if	219:14	220:27	8	(err < min_error)
cond	219:18	219:24	9	err < min_error
water	219:18	0:0	10	err
op	219:22	0:0	10	<
water	219:24	0:0	10	min_error
stmts	220:12	220:27	9	
water	220:12	0:0	10	min_error
op	220:22	0:0	10	=
water	220:24	0:0	10	err
water	220:27	0:0	10	;
water	221:6	0:0	6	}
water	222:3	0:0	4	}
water	226:3	0:0	2	error_count16
op	226:17	0:0	2	=
water	226:19	0:0	2	0
water	226:20	0:0	2	;
water	227:3	0:0	2	max_error16
op	227:15	0:0	2	=
water	227:17	0:0	2	0
water	227:18	0:0	2	;
water	228:3	0:0	2	min_error16
op	228:15	0:0	2	=
water	228:17	0:0	2	0
water	228:18	0:0	2	;
for	229:3	248:3	2	(i16 = 0 ;i16 <= 65535;++ i16)
forinit	229:8	229:13	3	i16 = 0 ;
water	229:8	0:0	4	i16
op	229:11	0:0	4	=
water	229:12	0:0	4	0
water	229:13	0:0	4	;
cond	229:15	229:22	3	i16 <= 65535
water	229:15	0:0	4	i16
op	229:19	0:0	4	<=
water	229:22	0:0	4	65535
forexpr	229:29	229:31	3	++ i16
op	229:29	0:0	4	++
water	229:31	0:0	4	i16
stmts	230:3	248:3	3	
water	230:3	0:0	4	{
decl	231:6	231:30	4	unsigned int	i
op	231:21	0:0	4	=
water	231:23	0:0	4	255
op	231:26	0:0	4	*
water	231:27	0:0	4	i16
decl	232:6	232:50	4	unsigned int	iexact
op	232:26	0:0	4	=
call	232:28	232:49	5	nearbyint
arg	232:38	232:49	6	255*sRGB(i)
water	232:38	0:0	7	255
call	232:41	232:48	7	*sRGB
arg	232:47	232:48	8	i
water	232:47	0:0	9	i
decl	233:6	233:50	4	unsigned int	icalc
op	233:25	0:0	4	=
call	233:27	233:49	5	PNG_sRGB_FROM_LINEAR
arg	233:48	233:49	6	i
water	233:48	0:0	7	i
if	234:6	247:6	4	(icalc != iexact)
cond	234:10	234:19	5	icalc != iexact
water	234:10	0:0	6	icalc
op	234:16	0:0	6	!=
water	234:19	0:0	6	iexact
stmts	235:6	247:6	5	
water	235:6	0:0	6	{
decl	236:9	236:41	6	double	err
op	236:20	0:0	6	=
water	236:22	0:0	6	255
call	236:25	236:32	7	*sRGB
arg	236:31	236:32	8	i
water	236:31	0:0	9	i
op	236:34	0:0	6	-
water	236:36	0:0	6	icalc
op	237:9	0:0	6	++
water	237:11	0:0	6	error_count16
water	237:24	0:0	6	;
if	238:9	239:29	6	(err > max_error16)
cond	238:13	238:19	7	err > max_error16
water	238:13	0:0	8	err
op	238:17	0:0	8	>
water	238:19	0:0	8	max_error16
stmts	239:12	239:29	7	
water	239:12	0:0	8	max_error16
op	239:24	0:0	8	=
water	239:26	0:0	8	err
water	239:29	0:0	8	;
else	240:9	241:29	6
stmts	240:14	241:29	7	
if	240:14	241:29	8	(err < min_error16)
cond	240:18	240:24	9	err < min_error16
water	240:18	0:0	10	err
op	240:22	0:0	10	<
water	240:24	0:0	10	min_error16
stmts	241:12	241:29	9	
water	241:12	0:0	10	min_error16
op	241:24	0:0	10	=
water	241:26	0:0	10	err
water	241:29	0:0	10	;
if	242:9	246:42	6	(abs (icalc - iexact ) > 1)
cond	242:13	242:35	7	abs (icalc - iexact ) > 1
call	242:13	242:31	8	abs
arg	242:17	242:31	9	icalc-iexact
water	242:17	0:0	10	icalc
op	242:23	0:0	10	-
water	242:25	0:0	10	iexact
op	242:33	0:0	8	>
water	242:35	0:0	8	1
stmts	243:12	246:42	7	
call	243:12	246:41	8	printf
arg	244:15	244:79	9	"/* 0x%04x: exact: %3d, got: %3d [tables: %08x, %08x] (%f) */\n"
water	244:15	0:0	10	"/* 0x%04x: exact: %3d, got: %3d [tables: %08x, %08x] (%f) */\n"
arg	245:15	245:18	9	i16
water	245:15	0:0	10	i16
arg	245:20	245:26	9	iexact
water	245:20	0:0	10	iexact
arg	245:28	245:33	9	icalc
water	245:28	0:0	10	icalc
arg	245:35	245:55	9	png_sRGB_base[i>>15]
water	245:35	0:0	10	png_sRGB_base
op	245:48	0:0	10	[
water	245:49	0:0	10	i
op	245:50	0:0	10	>>
water	245:52	0:0	10	15
op	245:54	0:0	10	]
arg	246:15	246:36	9	png_sRGB_delta[i>>15]
water	246:15	0:0	10	png_sRGB_delta
op	246:29	0:0	10	[
water	246:30	0:0	10	i
op	246:31	0:0	10	>>
water	246:33	0:0	10	15
op	246:35	0:0	10	]
arg	246:38	246:41	9	err
water	246:38	0:0	10	err
water	246:42	0:0	8	;
water	247:6	0:0	6	}
water	248:3	0:0	4	}
for	250:3	266:3	2	(i16 = 0 ;i16 <= 255;++ i16)
forinit	250:8	250:13	3	i16 = 0 ;
water	250:8	0:0	4	i16
op	250:11	0:0	4	=
water	250:12	0:0	4	0
water	250:13	0:0	4	;
cond	250:15	250:22	3	i16 <= 255
water	250:15	0:0	4	i16
op	250:19	0:0	4	<=
water	250:22	0:0	4	255
forexpr	250:27	250:29	3	++ i16
op	250:27	0:0	4	++
water	250:29	0:0	4	i16
stmts	251:3	266:3	3	
water	251:3	0:0	4	{
decl	252:6	252:48	4	unsigned int	i
op	252:21	0:0	4	=
water	252:23	0:0	4	255
op	252:27	0:0	4	*
water	252:29	0:0	4	png_sRGB_table
op	252:43	0:0	4	[
water	252:44	0:0	4	i16
op	252:47	0:0	4	]
decl	253:6	253:50	4	unsigned int	iexact
op	253:26	0:0	4	=
call	253:28	253:49	5	nearbyint
arg	253:38	253:49	6	255*sRGB(i)
water	253:38	0:0	7	255
call	253:41	253:48	7	*sRGB
arg	253:47	253:48	8	i
water	253:47	0:0	9	i
decl	254:6	254:50	4	unsigned int	icalc
op	254:25	0:0	4	=
call	254:27	254:49	5	PNG_sRGB_FROM_LINEAR
arg	254:48	254:49	6	i
water	254:48	0:0	7	i
if	255:6	259:6	4	(i16 != iexact)
cond	255:10	255:17	5	i16 != iexact
water	255:10	0:0	6	i16
op	255:14	0:0	6	!=
water	255:17	0:0	6	iexact
stmts	256:6	259:6	5	
water	256:6	0:0	6	{
call	257:9	257:72	6	fprintf
arg	257:17	257:23	7	stderr
water	257:17	0:0	8	stderr
arg	257:25	257:59	7	"8-bit rounding error: %d -> %d\n"
water	257:25	0:0	8	"8-bit rounding error: %d -> %d\n"
arg	257:61	257:64	7	i16
water	257:61	0:0	8	i16
arg	257:66	257:72	7	iexact
water	257:66	0:0	8	iexact
water	257:73	0:0	6	;
call	258:9	258:15	6	exit
arg	258:14	258:15	7	1
water	258:14	0:0	8	1
water	258:16	0:0	6	;
water	259:6	0:0	6	}
if	260:6	265:6	4	(icalc != i16)
cond	260:10	260:19	5	icalc != i16
water	260:10	0:0	6	icalc
op	260:16	0:0	6	!=
water	260:19	0:0	6	i16
stmts	261:6	265:6	5	
water	261:6	0:0	6	{
decl	262:9	262:36	6	double	finv
op	262:21	0:0	6	=
call	262:23	262:35	7	finvsRGB
arg	262:32	262:35	8	i16
water	262:32	0:0	9	i16
call	263:9	264:45	6	printf
arg	263:16	263:67	7	"/* 8-bit roundtrip error: %d -> %f -> %d(%f) */\n"
water	263:16	0:0	8	"/* 8-bit roundtrip error: %d -> %f -> %d(%f) */\n"
arg	264:12	264:15	7	i16
water	264:12	0:0	8	i16
arg	264:17	264:21	7	finv
water	264:17	0:0	8	finv
arg	264:23	264:28	7	icalc
water	264:23	0:0	8	icalc
arg	264:30	264:45	7	fsRGB(255*finv)
call	264:30	264:44	8	fsRGB
arg	264:36	264:44	9	255*finv
water	264:36	0:0	10	255
op	264:39	0:0	10	*
water	264:40	0:0	10	finv
water	264:46	0:0	6	;
water	265:6	0:0	6	}
water	266:3	0:0	4	}
call	267:3	268:69	2	printf
arg	267:10	267:65	3	"/* error: %g - %g, %u (%g%%) of readings inexact */\n"
water	267:10	0:0	4	"/* error: %g - %g, %u (%g%%) of readings inexact */\n"
arg	268:6	268:15	3	min_error
water	268:6	0:0	4	min_error
arg	268:17	268:26	3	max_error
water	268:17	0:0	4	max_error
arg	268:28	268:39	3	error_count
water	268:28	0:0	4	error_count
arg	268:41	268:69	3	(100.*error_count)/max_input
water	268:41	0:0	4	(
water	268:42	0:0	4	100
op	268:45	0:0	4	.
op	268:46	0:0	4	*
water	268:47	0:0	4	error_count
water	268:58	0:0	4	)
op	268:59	0:0	4	/
water	268:60	0:0	4	max_input
water	268:70	0:0	2	;
call	269:3	270:73	2	printf
arg	269:10	269:72	3	"/* 16-bit error: %g - %g, %u (%g%%) of readings inexact */\n"
water	269:10	0:0	4	"/* 16-bit error: %g - %g, %u (%g%%) of readings inexact */\n"
arg	270:6	270:17	3	min_error16
water	270:6	0:0	4	min_error16
arg	270:19	270:30	3	max_error16
water	270:19	0:0	4	max_error16
arg	270:32	270:45	3	error_count16
water	270:32	0:0	4	error_count16
arg	270:47	270:73	3	(100.*error_count16)/65535
water	270:47	0:0	4	(
water	270:48	0:0	4	100
op	270:51	0:0	4	.
op	270:52	0:0	4	*
water	270:53	0:0	4	error_count16
water	270:66	0:0	4	)
op	270:67	0:0	4	/
water	270:68	0:0	4	65535
water	270:74	0:0	2	;
if	271:3	306:3	2	(! test_only)
cond	271:7	271:8	3	! test_only
op	271:7	0:0	4	!
water	271:8	0:0	4	test_only
stmts	272:3	306:3	3	
water	272:3	0:0	4	{
call	273:6	273:66	4	printf
arg	273:13	273:66	5	"PNG_CONST png_uint_16 png_sRGB_table[256] =\n{\n   "
water	273:13	0:0	6	"PNG_CONST png_uint_16 png_sRGB_table[256] =\n{\n   "
water	273:67	0:0	4	;
for	274:6	282:6	4	(i = 0 ;i < 255;)
forinit	274:11	274:14	5	i = 0 ;
water	274:11	0:0	6	i
op	274:12	0:0	6	=
water	274:13	0:0	6	0
water	274:14	0:0	6	;
cond	274:16	274:18	5	i < 255
water	274:16	0:0	6	i
op	274:17	0:0	6	<
water	274:18	0:0	6	255
forexpr	0:0	0:0	5	
stmts	275:6	282:6	5	
water	275:6	0:0	6	{
do	276:9	279:9	6	(( i & 0 x7 ) != 0 && i < 255)
cond	280:16	280:36	7	( i & 0 x7 ) != 0 && i < 255
water	280:16	0:0	8	(
water	280:17	0:0	8	i
op	280:19	0:0	8	&
water	280:21	0:0	8	0
water	280:22	0:0	8	x7
water	280:24	0:0	8	)
op	280:26	0:0	8	!=
water	280:29	0:0	8	0
op	280:31	0:0	8	&&
water	280:34	0:0	8	i
op	280:35	0:0	8	<
water	280:36	0:0	8	255
stmts	277:9	279:9	7	
water	277:9	0:0	8	{
call	278:12	278:45	8	printf
arg	278:19	278:24	9	"%d,"
water	278:19	0:0	10	"%d,"
arg	278:26	278:45	9	png_sRGB_table[i++]
water	278:26	0:0	10	png_sRGB_table
op	278:40	0:0	10	[
water	278:41	0:0	10	i
op	278:42	0:0	10	++
op	278:44	0:0	10	]
water	278:46	0:0	8	;
water	279:9	0:0	8	}
water	280:40	0:0	6	;
if	281:9	281:35	6	(i < 255)
cond	281:13	281:15	7	i < 255
water	281:13	0:0	8	i
op	281:14	0:0	8	<
water	281:15	0:0	8	255
stmts	281:20	281:35	7	
call	281:20	281:34	8	printf
arg	281:27	281:34	9	"\n   "
water	281:27	0:0	10	"\n   "
water	281:35	0:0	8	;
water	282:6	0:0	6	}
call	283:6	283:44	4	printf
arg	283:13	283:25	5	"%d\n};\n\n"
water	283:13	0:0	6	"%d\n};\n\n"
arg	283:27	283:44	5	png_sRGB_table[i]
water	283:27	0:0	6	png_sRGB_table
op	283:41	0:0	6	[
water	283:42	0:0	6	i
op	283:43	0:0	6	]
water	283:45	0:0	4	;
call	284:6	284:65	4	printf
arg	284:13	284:65	5	"PNG_CONST png_uint_16 png_sRGB_base[512] =\n{\n   "
water	284:13	0:0	6	"PNG_CONST png_uint_16 png_sRGB_base[512] =\n{\n   "
water	284:66	0:0	4	;
for	285:6	293:6	4	(i = 0 ;i < 511;)
forinit	285:11	285:14	5	i = 0 ;
water	285:11	0:0	6	i
op	285:12	0:0	6	=
water	285:13	0:0	6	0
water	285:14	0:0	6	;
cond	285:16	285:18	5	i < 511
water	285:16	0:0	6	i
op	285:17	0:0	6	<
water	285:18	0:0	6	511
forexpr	0:0	0:0	5	
stmts	286:6	293:6	5	
water	286:6	0:0	6	{
do	287:9	290:9	6	(( i & 0 x7 ) != 0 && i < 511)
cond	291:16	291:36	7	( i & 0 x7 ) != 0 && i < 511
water	291:16	0:0	8	(
water	291:17	0:0	8	i
op	291:19	0:0	8	&
water	291:21	0:0	8	0
water	291:22	0:0	8	x7
water	291:24	0:0	8	)
op	291:26	0:0	8	!=
water	291:29	0:0	8	0
op	291:31	0:0	8	&&
water	291:34	0:0	8	i
op	291:35	0:0	8	<
water	291:36	0:0	8	511
stmts	288:9	290:9	7	
water	288:9	0:0	8	{
call	289:12	289:44	8	printf
arg	289:19	289:24	9	"%d,"
water	289:19	0:0	10	"%d,"
arg	289:26	289:44	9	png_sRGB_base[i++]
water	289:26	0:0	10	png_sRGB_base
op	289:39	0:0	10	[
water	289:40	0:0	10	i
op	289:41	0:0	10	++
op	289:43	0:0	10	]
water	289:45	0:0	8	;
water	290:9	0:0	8	}
water	291:40	0:0	6	;
if	292:9	292:35	6	(i < 511)
cond	292:13	292:15	7	i < 511
water	292:13	0:0	8	i
op	292:14	0:0	8	<
water	292:15	0:0	8	511
stmts	292:20	292:35	7	
call	292:20	292:34	8	printf
arg	292:27	292:34	9	"\n   "
water	292:27	0:0	10	"\n   "
water	292:35	0:0	8	;
water	293:6	0:0	6	}
call	294:6	294:43	4	printf
arg	294:13	294:25	5	"%d\n};\n\n"
water	294:13	0:0	6	"%d\n};\n\n"
arg	294:27	294:43	5	png_sRGB_base[i]
water	294:27	0:0	6	png_sRGB_base
op	294:40	0:0	6	[
water	294:41	0:0	6	i
op	294:42	0:0	6	]
water	294:44	0:0	4	;
call	295:6	295:63	4	printf
arg	295:13	295:63	5	"PNG_CONST png_byte png_sRGB_delta[512] =\n{\n   "
water	295:13	0:0	6	"PNG_CONST png_byte png_sRGB_delta[512] =\n{\n   "
water	295:64	0:0	4	;
for	296:6	304:6	4	(i = 0 ;i < 511;)
forinit	296:11	296:14	5	i = 0 ;
water	296:11	0:0	6	i
op	296:12	0:0	6	=
water	296:13	0:0	6	0
water	296:14	0:0	6	;
cond	296:16	296:18	5	i < 511
water	296:16	0:0	6	i
op	296:17	0:0	6	<
water	296:18	0:0	6	511
forexpr	0:0	0:0	5	
stmts	297:6	304:6	5	
water	297:6	0:0	6	{
do	298:9	301:9	6	(( i & 0 xf ) != 0 && i < 511)
cond	302:16	302:36	7	( i & 0 xf ) != 0 && i < 511
water	302:16	0:0	8	(
water	302:17	0:0	8	i
op	302:19	0:0	8	&
water	302:21	0:0	8	0
water	302:22	0:0	8	xf
water	302:24	0:0	8	)
op	302:26	0:0	8	!=
water	302:29	0:0	8	0
op	302:31	0:0	8	&&
water	302:34	0:0	8	i
op	302:35	0:0	8	<
water	302:36	0:0	8	511
stmts	299:9	301:9	7	
water	299:9	0:0	8	{
call	300:12	300:45	8	printf
arg	300:19	300:24	9	"%d,"
water	300:19	0:0	10	"%d,"
arg	300:26	300:45	9	png_sRGB_delta[i++]
water	300:26	0:0	10	png_sRGB_delta
op	300:40	0:0	10	[
water	300:41	0:0	10	i
op	300:42	0:0	10	++
op	300:44	0:0	10	]
water	300:46	0:0	8	;
water	301:9	0:0	8	}
water	302:40	0:0	6	;
if	303:9	303:35	6	(i < 511)
cond	303:13	303:15	7	i < 511
water	303:13	0:0	8	i
op	303:14	0:0	8	<
water	303:15	0:0	8	511
stmts	303:20	303:35	7	
call	303:20	303:34	8	printf
arg	303:27	303:34	9	"\n   "
water	303:27	0:0	10	"\n   "
water	303:35	0:0	8	;
water	304:6	0:0	6	}
call	305:6	305:44	4	printf
arg	305:13	305:25	5	"%d\n};\n\n"
water	305:13	0:0	6	"%d\n};\n\n"
arg	305:27	305:44	5	png_sRGB_delta[i]
water	305:27	0:0	6	png_sRGB_delta
op	305:41	0:0	6	[
water	305:42	0:0	6	i
op	305:43	0:0	6	]
water	305:45	0:0	4	;
water	306:3	0:0	4	}
return	307:3	307:11	2	0
water	307:10	0:0	3	0
