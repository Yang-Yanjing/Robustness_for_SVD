D:\postGraduate\code\function_representation_learning\Data\LibPNG\vulnerable_Files\vulnerable_functions\cve-2011-3048.c line 180:6 mismatched character '<EOF>' expecting '\n'
func	2:0	179:0	0	int	png_set_text_2
params	3:14	0:0	1	
param	3:15	3:34	2	png_structp	png_ptr
param	3:36	3:54	2	png_infop	info_ptr
param	4:4	4:28	2	png_const_textp	text_ptr
param	4:30	4:42	2	int	num_text
stmnts	0:0	178:12	1	
decl	6:3	6:8	2	int	i
call	8:3	10:53	2	png_debug1
arg	8:14	8:15	3	1
water	8:14	0:0	4	1
arg	8:17	8:41	3	"in %s storage function"
water	8:17	0:0	4	"in %s storage function"
arg	8:43	10:53	3	((png_ptr==NULL||png_ptr->chunk_name[0]=='\0')?"text":(png_const_charp)png_ptr->chunk_name)
water	8:43	0:0	4	(
water	8:44	0:0	4	(
water	8:45	0:0	4	png_ptr
op	8:53	0:0	4	==
water	8:56	0:0	4	NULL
op	8:61	0:0	4	||
water	9:7	0:0	4	png_ptr
op	9:14	0:0	4	->
water	9:16	0:0	4	chunk_name
op	9:26	0:0	4	[
water	9:27	0:0	4	0
op	9:28	0:0	4	]
op	9:30	0:0	4	==
water	9:33	0:0	4	'\0'
water	9:37	0:0	4	)
water	9:39	0:0	4	?
water	10:7	0:0	4	"text"
water	10:14	0:0	4	:
water	10:16	0:0	4	(
water	10:17	0:0	4	png_const_charp
water	10:32	0:0	4	)
water	10:33	0:0	4	png_ptr
op	10:40	0:0	4	->
water	10:42	0:0	4	chunk_name
water	10:52	0:0	4	)
water	10:54	0:0	2	;
if	12:3	13:15	2	(png_ptr == NULL || info_ptr == NULL || num_text == 0)
cond	12:7	12:58	3	png_ptr == NULL || info_ptr == NULL || num_text == 0
water	12:7	0:0	4	png_ptr
op	12:15	0:0	4	==
water	12:18	0:0	4	NULL
op	12:23	0:0	4	||
water	12:26	0:0	4	info_ptr
op	12:35	0:0	4	==
water	12:38	0:0	4	NULL
op	12:43	0:0	4	||
water	12:46	0:0	4	num_text
op	12:55	0:0	4	==
water	12:58	0:0	4	0
stmts	13:6	13:15	3	
return	13:6	13:15	4	(0)
water	13:12	0:0	5	(
water	13:13	0:0	5	0
water	13:14	0:0	5	)
if	18:3	55:3	2	(info_ptr -> num_text + num_text > info_ptr -> max_text)
cond	18:7	18:49	3	info_ptr -> num_text + num_text > info_ptr -> max_text
water	18:7	0:0	4	info_ptr
op	18:15	0:0	4	->
water	18:17	0:0	4	num_text
op	18:26	0:0	4	+
water	18:28	0:0	4	num_text
op	18:37	0:0	4	>
water	18:39	0:0	4	info_ptr
op	18:47	0:0	4	->
water	18:49	0:0	4	max_text
stmts	19:3	55:3	3	
water	19:3	0:0	4	{
if	20:6	40:6	4	(info_ptr -> text != NULL)
cond	20:10	20:28	5	info_ptr -> text != NULL
water	20:10	0:0	6	info_ptr
op	20:18	0:0	6	->
water	20:20	0:0	6	text
op	20:25	0:0	6	!=
water	20:28	0:0	6	NULL
stmts	21:6	40:6	5	
water	21:6	0:0	6	{
decl	22:9	22:27	6	png_textp	old_text
decl	23:9	23:20	6	int	old_max
water	25:9	0:0	6	old_max
op	25:17	0:0	6	=
water	25:19	0:0	6	info_ptr
op	25:27	0:0	6	->
water	25:29	0:0	6	max_text
water	25:37	0:0	6	;
water	26:9	0:0	6	info_ptr
op	26:17	0:0	6	->
water	26:19	0:0	6	max_text
op	26:28	0:0	6	=
water	26:30	0:0	6	info_ptr
op	26:38	0:0	6	->
water	26:40	0:0	6	num_text
op	26:49	0:0	6	+
water	26:51	0:0	6	num_text
op	26:60	0:0	6	+
water	26:62	0:0	6	8
water	26:63	0:0	6	;
water	27:9	0:0	6	old_text
op	27:18	0:0	6	=
water	27:20	0:0	6	info_ptr
op	27:28	0:0	6	->
water	27:30	0:0	6	text
water	27:34	0:0	6	;
water	28:9	0:0	6	info_ptr
op	28:17	0:0	6	->
water	28:19	0:0	6	text
op	28:24	0:0	6	=
water	28:26	0:0	6	(
water	28:27	0:0	6	png_textp
water	28:36	0:0	6	)
call	28:37	29:67	6	png_malloc_warn
arg	28:53	28:60	7	png_ptr
water	28:53	0:0	8	png_ptr
arg	29:12	29:67	7	(png_size_t)(info_ptr->max_text*png_sizeof(png_text))
call	29:12	29:66	8	(png_size_t)
arg	29:25	29:66	9	info_ptr->max_text*png_sizeof(png_text)
water	29:25	0:0	10	info_ptr
op	29:33	0:0	10	->
water	29:35	0:0	10	max_text
call	29:44	29:65	10	*png_sizeof
arg	29:57	29:65	11	png_text
water	29:57	0:0	12	png_text
water	29:68	0:0	6	;
if	31:9	35:9	6	(info_ptr -> text == NULL)
cond	31:13	31:31	7	info_ptr -> text == NULL
water	31:13	0:0	8	info_ptr
op	31:21	0:0	8	->
water	31:23	0:0	8	text
op	31:28	0:0	8	==
water	31:31	0:0	8	NULL
stmts	32:9	35:9	7	
water	32:9	0:0	8	{
call	33:12	33:38	8	png_free
arg	33:21	33:28	9	png_ptr
water	33:21	0:0	10	png_ptr
arg	33:30	33:38	9	old_text
water	33:30	0:0	10	old_text
water	33:39	0:0	8	;
return	34:12	34:21	8	(1)
water	34:18	0:0	9	(
water	34:19	0:0	9	1
water	34:20	0:0	9	)
water	35:9	0:0	8	}
call	37:9	38:34	6	png_memcpy
arg	37:20	37:34	7	info_ptr->text
water	37:20	0:0	8	info_ptr
op	37:28	0:0	8	->
water	37:30	0:0	8	text
arg	37:36	37:44	7	old_text
water	37:36	0:0	8	old_text
arg	37:46	38:34	7	(png_size_t)(old_max*png_sizeof(png_text))
call	37:46	38:33	8	(png_size_t)
arg	37:59	38:33	9	old_max*png_sizeof(png_text)
water	37:59	0:0	10	old_max
call	37:67	38:32	10	*png_sizeof
arg	38:24	38:32	11	png_text
water	38:24	0:0	12	png_text
water	38:35	0:0	6	;
call	39:9	39:35	6	png_free
arg	39:18	39:25	7	png_ptr
water	39:18	0:0	8	png_ptr
arg	39:27	39:35	7	old_text
water	39:27	0:0	8	old_text
water	39:36	0:0	6	;
water	40:6	0:0	6	}
else	42:6	51:6	4
stmts	43:6	51:6	5	
water	43:6	0:0	6	{
water	44:9	0:0	6	info_ptr
op	44:17	0:0	6	->
water	44:19	0:0	6	max_text
op	44:28	0:0	6	=
water	44:30	0:0	6	num_text
op	44:39	0:0	6	+
water	44:41	0:0	6	8
water	44:42	0:0	6	;
water	45:9	0:0	6	info_ptr
op	45:17	0:0	6	->
water	45:19	0:0	6	num_text
op	45:28	0:0	6	=
water	45:30	0:0	6	0
water	45:31	0:0	6	;
water	46:9	0:0	6	info_ptr
op	46:17	0:0	6	->
water	46:19	0:0	6	text
op	46:24	0:0	6	=
water	46:26	0:0	6	(
water	46:27	0:0	6	png_textp
water	46:36	0:0	6	)
call	46:37	47:68	6	png_malloc_warn
arg	46:53	46:60	7	png_ptr
water	46:53	0:0	8	png_ptr
arg	47:13	47:68	7	(png_size_t)(info_ptr->max_text*png_sizeof(png_text))
call	47:13	47:67	8	(png_size_t)
arg	47:26	47:67	9	info_ptr->max_text*png_sizeof(png_text)
water	47:26	0:0	10	info_ptr
op	47:34	0:0	10	->
water	47:36	0:0	10	max_text
call	47:45	47:66	10	*png_sizeof
arg	47:58	47:66	11	png_text
water	47:58	0:0	12	png_text
water	47:69	0:0	6	;
if	48:9	49:21	6	(info_ptr -> text == NULL)
cond	48:13	48:31	7	info_ptr -> text == NULL
water	48:13	0:0	8	info_ptr
op	48:21	0:0	8	->
water	48:23	0:0	8	text
op	48:28	0:0	8	==
water	48:31	0:0	8	NULL
stmts	49:12	49:21	7	
return	49:12	49:21	8	(1)
water	49:18	0:0	9	(
water	49:19	0:0	9	1
water	49:20	0:0	9	)
water	50:9	0:0	6	info_ptr
op	50:17	0:0	6	->
water	50:19	0:0	6	free_me
op	50:27	0:0	6	|=
water	50:30	0:0	6	PNG_FREE_TEXT
water	50:43	0:0	6	;
water	51:6	0:0	6	}
call	53:6	54:28	4	png_debug1
arg	53:17	53:18	5	3
water	53:17	0:0	6	3
arg	53:20	53:61	5	"allocated %d entries for info_ptr->text"
water	53:20	0:0	6	"allocated %d entries for info_ptr->text"
arg	54:10	54:28	5	info_ptr->max_text
water	54:10	0:0	6	info_ptr
op	54:18	0:0	6	->
water	54:20	0:0	6	max_text
water	54:29	0:0	4	;
water	55:3	0:0	4	}
for	56:3	177:3	2	(i = 0 ;i < num_text;i ++)
forinit	56:8	56:13	3	i = 0 ;
water	56:8	0:0	4	i
op	56:10	0:0	4	=
water	56:12	0:0	4	0
water	56:13	0:0	4	;
cond	56:15	56:19	3	i < num_text
water	56:15	0:0	4	i
op	56:17	0:0	4	<
water	56:19	0:0	4	num_text
forexpr	56:29	56:30	3	i ++
water	56:29	0:0	4	i
op	56:30	0:0	4	++
stmts	57:3	177:3	3	
water	57:3	0:0	4	{
decl	58:6	58:37	4	png_size_t	text_length
water	58:28	0:0	4	,
decl	58:6	58:37	4	png_size_t	key_len
decl	59:6	59:39	4	png_size_t	lang_len
water	59:25	0:0	4	,
decl	59:6	59:39	4	png_size_t	lang_key_len
decl	60:6	60:61	4	png_textp	textp
op	60:22	0:0	4	=
op	60:24	0:0	4	&
water	60:25	0:0	4	(
water	60:26	0:0	4	info_ptr
op	60:34	0:0	4	->
water	60:36	0:0	4	text
op	60:40	0:0	4	[
water	60:41	0:0	4	info_ptr
op	60:49	0:0	4	->
water	60:51	0:0	4	num_text
op	60:59	0:0	4	]
water	60:60	0:0	4	)
if	62:6	63:18	4	(text_ptr [ i ] . key == NULL)
cond	62:10	62:29	5	text_ptr [ i ] . key == NULL
water	62:10	0:0	6	text_ptr
op	62:18	0:0	6	[
water	62:19	0:0	6	i
op	62:20	0:0	6	]
op	62:21	0:0	6	.
water	62:22	0:0	6	key
op	62:26	0:0	6	==
water	62:29	0:0	6	NULL
stmts	63:10	63:18	5	
continue	63:10	63:18	6	
if	65:6	70:6	4	(text_ptr [ i ] . compression < PNG_TEXT_COMPRESSION_NONE || text_ptr [ i ] . compression >= PNG_TEXT_COMPRESSION_LAST)
cond	65:10	66:37	5	text_ptr [ i ] . compression < PNG_TEXT_COMPRESSION_NONE || text_ptr [ i ] . compression >= PNG_TEXT_COMPRESSION_LAST
water	65:10	0:0	6	text_ptr
op	65:18	0:0	6	[
water	65:19	0:0	6	i
op	65:20	0:0	6	]
op	65:21	0:0	6	.
water	65:22	0:0	6	compression
op	65:34	0:0	6	<
water	65:36	0:0	6	PNG_TEXT_COMPRESSION_NONE
op	65:62	0:0	6	||
water	66:10	0:0	6	text_ptr
op	66:18	0:0	6	[
water	66:19	0:0	6	i
op	66:20	0:0	6	]
op	66:21	0:0	6	.
water	66:22	0:0	6	compression
op	66:34	0:0	6	>=
water	66:37	0:0	6	PNG_TEXT_COMPRESSION_LAST
stmts	67:6	70:6	5	
water	67:6	0:0	6	{
call	68:9	68:69	6	png_warning
arg	68:21	68:28	7	png_ptr
water	68:21	0:0	8	png_ptr
arg	68:30	68:69	7	"text compression mode is out of range"
water	68:30	0:0	8	"text compression mode is out of range"
water	68:70	0:0	6	;
continue	69:9	69:17	6	
water	70:6	0:0	6	}
water	72:6	0:0	4	key_len
op	72:14	0:0	4	=
call	72:16	72:42	4	png_strlen
arg	72:27	72:42	5	text_ptr[i].key
water	72:27	0:0	6	text_ptr
op	72:35	0:0	6	[
water	72:36	0:0	6	i
op	72:37	0:0	6	]
op	72:38	0:0	6	.
water	72:39	0:0	6	key
water	72:43	0:0	4	;
if	74:6	78:6	4	(text_ptr [ i ] . compression <= 0)
cond	74:10	74:37	5	text_ptr [ i ] . compression <= 0
water	74:10	0:0	6	text_ptr
op	74:18	0:0	6	[
water	74:19	0:0	6	i
op	74:20	0:0	6	]
op	74:21	0:0	6	.
water	74:22	0:0	6	compression
op	74:34	0:0	6	<=
water	74:37	0:0	6	0
stmts	75:6	78:6	5	
water	75:6	0:0	6	{
water	76:9	0:0	6	lang_len
op	76:18	0:0	6	=
water	76:20	0:0	6	0
water	76:21	0:0	6	;
water	77:9	0:0	6	lang_key_len
op	77:22	0:0	6	=
water	77:24	0:0	6	0
water	77:25	0:0	6	;
water	78:6	0:0	6	}
else	80:6	96:6	4
stmts	82:6	96:6	5	
water	82:6	0:0	6	{
if	85:9	86:51	6	(text_ptr [ i ] . lang != NULL)
cond	85:13	85:33	7	text_ptr [ i ] . lang != NULL
water	85:13	0:0	8	text_ptr
op	85:21	0:0	8	[
water	85:22	0:0	8	i
op	85:23	0:0	8	]
op	85:24	0:0	8	.
water	85:25	0:0	8	lang
op	85:30	0:0	8	!=
water	85:33	0:0	8	NULL
stmts	86:12	86:51	7	
water	86:12	0:0	8	lang_len
op	86:21	0:0	8	=
call	86:23	86:50	8	png_strlen
arg	86:34	86:50	9	text_ptr[i].lang
water	86:34	0:0	10	text_ptr
op	86:42	0:0	10	[
water	86:43	0:0	10	i
op	86:44	0:0	10	]
op	86:45	0:0	10	.
water	86:46	0:0	10	lang
water	86:51	0:0	8	;
else	88:9	89:24	6
stmts	89:12	89:24	7	
water	89:12	0:0	8	lang_len
op	89:21	0:0	8	=
water	89:23	0:0	8	0
water	89:24	0:0	8	;
if	91:9	92:59	6	(text_ptr [ i ] . lang_key != NULL)
cond	91:13	91:37	7	text_ptr [ i ] . lang_key != NULL
water	91:13	0:0	8	text_ptr
op	91:21	0:0	8	[
water	91:22	0:0	8	i
op	91:23	0:0	8	]
op	91:24	0:0	8	.
water	91:25	0:0	8	lang_key
op	91:34	0:0	8	!=
water	91:37	0:0	8	NULL
stmts	92:12	92:59	7	
water	92:12	0:0	8	lang_key_len
op	92:25	0:0	8	=
call	92:27	92:58	8	png_strlen
arg	92:38	92:58	9	text_ptr[i].lang_key
water	92:38	0:0	10	text_ptr
op	92:46	0:0	10	[
water	92:47	0:0	10	i
op	92:48	0:0	10	]
op	92:49	0:0	10	.
water	92:50	0:0	10	lang_key
water	92:59	0:0	8	;
else	94:9	95:28	6
stmts	95:12	95:28	7	
water	95:12	0:0	8	lang_key_len
op	95:25	0:0	8	=
water	95:27	0:0	8	0
water	95:28	0:0	8	;
water	96:6	0:0	6	}
water	98:6	0:0	4	{
call	99:9	99:56	4	png_warning
arg	99:21	99:28	5	png_ptr
water	99:21	0:0	6	png_ptr
arg	99:30	99:56	5	"iTXt chunk not supported"
water	99:30	0:0	6	"iTXt chunk not supported"
water	99:57	0:0	4	;
continue	100:9	100:17	4	
water	101:6	0:0	4	}
if	104:6	114:6	4	(text_ptr [ i ] . text == NULL || text_ptr [ i ] . text [ 0 ] == '\0')
cond	104:10	104:61	5	text_ptr [ i ] . text == NULL || text_ptr [ i ] . text [ 0 ] == '\0'
water	104:10	0:0	6	text_ptr
op	104:18	0:0	6	[
water	104:19	0:0	6	i
op	104:20	0:0	6	]
op	104:21	0:0	6	.
water	104:22	0:0	6	text
op	104:27	0:0	6	==
water	104:30	0:0	6	NULL
op	104:35	0:0	6	||
water	104:38	0:0	6	text_ptr
op	104:46	0:0	6	[
water	104:47	0:0	6	i
op	104:48	0:0	6	]
op	104:49	0:0	6	.
water	104:50	0:0	6	text
op	104:54	0:0	6	[
water	104:55	0:0	6	0
op	104:56	0:0	6	]
op	104:58	0:0	6	==
water	104:61	0:0	6	'\0'
stmts	105:6	114:6	5	
water	105:6	0:0	6	{
water	106:9	0:0	6	text_length
op	106:21	0:0	6	=
water	106:23	0:0	6	0
water	106:24	0:0	6	;
if	108:9	109:58	6	(text_ptr [ i ] . compression > 0)
cond	108:13	108:39	7	text_ptr [ i ] . compression > 0
water	108:13	0:0	8	text_ptr
op	108:21	0:0	8	[
water	108:22	0:0	8	i
op	108:23	0:0	8	]
op	108:24	0:0	8	.
water	108:25	0:0	8	compression
op	108:37	0:0	8	>
water	108:39	0:0	8	0
stmts	109:12	109:58	7	
water	109:12	0:0	8	textp
op	109:17	0:0	8	->
water	109:19	0:0	8	compression
op	109:31	0:0	8	=
water	109:33	0:0	8	PNG_ITXT_COMPRESSION_NONE
water	109:58	0:0	8	;
else	111:9	113:58	6
stmts	113:12	113:58	7	
water	113:12	0:0	8	textp
op	113:17	0:0	8	->
water	113:19	0:0	8	compression
op	113:31	0:0	8	=
water	113:33	0:0	8	PNG_TEXT_COMPRESSION_NONE
water	113:58	0:0	8	;
water	114:6	0:0	6	}
else	116:6	120:6	4
stmts	117:6	120:6	5	
water	117:6	0:0	6	{
water	118:9	0:0	6	text_length
op	118:21	0:0	6	=
call	118:23	118:50	6	png_strlen
arg	118:34	118:50	7	text_ptr[i].text
water	118:34	0:0	8	text_ptr
op	118:42	0:0	8	[
water	118:43	0:0	8	i
op	118:44	0:0	8	]
op	118:45	0:0	8	.
water	118:46	0:0	8	text
water	118:51	0:0	6	;
water	119:9	0:0	6	textp
op	119:14	0:0	6	->
water	119:16	0:0	6	compression
op	119:28	0:0	6	=
water	119:30	0:0	6	text_ptr
op	119:38	0:0	6	[
water	119:39	0:0	6	i
op	119:40	0:0	6	]
op	119:41	0:0	6	.
water	119:42	0:0	6	compression
water	119:53	0:0	6	;
water	120:6	0:0	6	}
water	122:6	0:0	4	textp
op	122:11	0:0	4	->
water	122:13	0:0	4	key
op	122:17	0:0	4	=
water	122:19	0:0	4	(
water	122:20	0:0	4	png_charp
water	122:29	0:0	4	)
call	122:30	124:63	4	png_malloc_warn
arg	122:46	122:53	5	png_ptr
water	122:46	0:0	6	png_ptr
arg	123:10	124:63	5	(png_size_t)(key_len+text_length+lang_len+lang_key_len+4)
call	123:10	124:62	6	(png_size_t)
arg	124:11	124:62	7	key_len+text_length+lang_len+lang_key_len+4
water	124:11	0:0	8	key_len
op	124:19	0:0	8	+
water	124:21	0:0	8	text_length
op	124:33	0:0	8	+
water	124:35	0:0	8	lang_len
op	124:44	0:0	8	+
water	124:46	0:0	8	lang_key_len
op	124:59	0:0	8	+
water	124:61	0:0	8	4
water	124:64	0:0	4	;
if	126:6	127:18	4	(textp -> key == NULL)
cond	126:10	126:24	5	textp -> key == NULL
water	126:10	0:0	6	textp
op	126:15	0:0	6	->
water	126:17	0:0	6	key
op	126:21	0:0	6	==
water	126:24	0:0	6	NULL
stmts	127:9	127:18	5	
return	127:9	127:18	6	(1)
water	127:15	0:0	7	(
water	127:16	0:0	7	1
water	127:17	0:0	7	)
call	129:6	132:20	4	png_debug2
arg	129:17	129:18	5	2
water	129:17	0:0	6	2
arg	129:20	129:63	5	"Allocated %lu bytes at %p in png_set_text"
water	129:20	0:0	6	"Allocated %lu bytes at %p in png_set_text"
arg	130:10	131:63	5	(unsignedlong)(png_uint_32)(key_len+lang_len+lang_key_len+text_length+4)
call	130:10	130:37	6	(unsignedlong)
arg	130:26	130:37	7	png_uint_32
water	130:26	0:0	8	png_uint_32
water	131:10	0:0	6	(
water	131:11	0:0	6	key_len
op	131:19	0:0	6	+
water	131:21	0:0	6	lang_len
op	131:30	0:0	6	+
water	131:32	0:0	6	lang_key_len
op	131:45	0:0	6	+
water	131:47	0:0	6	text_length
op	131:59	0:0	6	+
water	131:61	0:0	6	4
water	131:62	0:0	6	)
arg	132:10	132:20	5	textp->key
water	132:10	0:0	6	textp
op	132:15	0:0	6	->
water	132:17	0:0	6	key
water	132:21	0:0	4	;
call	134:6	134:66	4	png_memcpy
arg	134:17	134:27	5	textp->key
water	134:17	0:0	6	textp
op	134:22	0:0	6	->
water	134:24	0:0	6	key
arg	134:29	134:44	5	text_ptr[i].key
water	134:29	0:0	6	text_ptr
op	134:37	0:0	6	[
water	134:38	0:0	6	i
op	134:39	0:0	6	]
op	134:40	0:0	6	.
water	134:41	0:0	6	key
arg	134:45	134:66	5	(png_size_t)(key_len)
call	134:45	134:65	6	(png_size_t)
arg	134:58	134:65	7	key_len
water	134:58	0:0	8	key_len
water	134:67	0:0	4	;
op	135:6	0:0	4	*
water	135:7	0:0	4	(
water	135:8	0:0	4	textp
op	135:13	0:0	4	->
water	135:15	0:0	4	key
op	135:19	0:0	4	+
water	135:21	0:0	4	key_len
water	135:28	0:0	4	)
op	135:30	0:0	4	=
water	135:32	0:0	4	'\0'
water	135:36	0:0	4	;
if	137:6	146:6	4	(text_ptr [ i ] . compression > 0)
cond	137:10	137:36	5	text_ptr [ i ] . compression > 0
water	137:10	0:0	6	text_ptr
op	137:18	0:0	6	[
water	137:19	0:0	6	i
op	137:20	0:0	6	]
op	137:21	0:0	6	.
water	137:22	0:0	6	compression
op	137:34	0:0	6	>
water	137:36	0:0	6	0
stmts	138:6	146:6	5	
water	138:6	0:0	6	{
water	139:9	0:0	6	textp
op	139:14	0:0	6	->
water	139:16	0:0	6	lang
op	139:21	0:0	6	=
water	139:23	0:0	6	textp
op	139:28	0:0	6	->
water	139:30	0:0	6	key
op	139:34	0:0	6	+
water	139:36	0:0	6	key_len
op	139:44	0:0	6	+
water	139:46	0:0	6	1
water	139:47	0:0	6	;
call	140:9	140:59	6	png_memcpy
arg	140:20	140:31	7	textp->lang
water	140:20	0:0	8	textp
op	140:25	0:0	8	->
water	140:27	0:0	8	lang
arg	140:33	140:49	7	text_ptr[i].lang
water	140:33	0:0	8	text_ptr
op	140:41	0:0	8	[
water	140:42	0:0	8	i
op	140:43	0:0	8	]
op	140:44	0:0	8	.
water	140:45	0:0	8	lang
arg	140:51	140:59	7	lang_len
water	140:51	0:0	8	lang_len
water	140:60	0:0	6	;
op	141:9	0:0	6	*
water	141:10	0:0	6	(
water	141:11	0:0	6	textp
op	141:16	0:0	6	->
water	141:18	0:0	6	lang
op	141:23	0:0	6	+
water	141:25	0:0	6	lang_len
water	141:33	0:0	6	)
op	141:35	0:0	6	=
water	141:37	0:0	6	'\0'
water	141:41	0:0	6	;
water	142:9	0:0	6	textp
op	142:14	0:0	6	->
water	142:16	0:0	6	lang_key
op	142:25	0:0	6	=
water	142:27	0:0	6	textp
op	142:32	0:0	6	->
water	142:34	0:0	6	lang
op	142:39	0:0	6	+
water	142:41	0:0	6	lang_len
op	142:50	0:0	6	+
water	142:52	0:0	6	1
water	142:53	0:0	6	;
call	143:9	143:71	6	png_memcpy
arg	143:20	143:35	7	textp->lang_key
water	143:20	0:0	8	textp
op	143:25	0:0	8	->
water	143:27	0:0	8	lang_key
arg	143:37	143:57	7	text_ptr[i].lang_key
water	143:37	0:0	8	text_ptr
op	143:45	0:0	8	[
water	143:46	0:0	8	i
op	143:47	0:0	8	]
op	143:48	0:0	8	.
water	143:49	0:0	8	lang_key
arg	143:59	143:71	7	lang_key_len
water	143:59	0:0	8	lang_key_len
water	143:72	0:0	6	;
op	144:9	0:0	6	*
water	144:10	0:0	6	(
water	144:11	0:0	6	textp
op	144:16	0:0	6	->
water	144:18	0:0	6	lang_key
op	144:27	0:0	6	+
water	144:29	0:0	6	lang_key_len
water	144:41	0:0	6	)
op	144:43	0:0	6	=
water	144:45	0:0	6	'\0'
water	144:49	0:0	6	;
water	145:9	0:0	6	textp
op	145:14	0:0	6	->
water	145:16	0:0	6	text
op	145:21	0:0	6	=
water	145:23	0:0	6	textp
op	145:28	0:0	6	->
water	145:30	0:0	6	lang_key
op	145:39	0:0	6	+
water	145:41	0:0	6	lang_key_len
op	145:54	0:0	6	+
water	145:56	0:0	6	1
water	145:57	0:0	6	;
water	146:6	0:0	6	}
else	148:6	153:6	4
stmts	149:6	153:6	5	
water	149:6	0:0	6	{
water	150:9	0:0	6	textp
op	150:14	0:0	6	->
water	150:16	0:0	6	lang
op	150:20	0:0	6	=
water	150:21	0:0	6	NULL
water	150:25	0:0	6	;
water	151:9	0:0	6	textp
op	151:14	0:0	6	->
water	151:16	0:0	6	lang_key
op	151:24	0:0	6	=
water	151:25	0:0	6	NULL
water	151:29	0:0	6	;
water	152:9	0:0	6	textp
op	152:14	0:0	6	->
water	152:16	0:0	6	text
op	152:21	0:0	6	=
water	152:23	0:0	6	textp
op	152:28	0:0	6	->
water	152:30	0:0	6	key
op	152:34	0:0	6	+
water	152:36	0:0	6	key_len
op	152:44	0:0	6	+
water	152:46	0:0	6	1
water	152:47	0:0	6	;
water	153:6	0:0	6	}
if	155:6	157:39	4	(text_length)
cond	155:10	155:10	5	text_length
water	155:10	0:0	6	text_length
stmts	156:9	157:39	5	
call	156:9	157:38	6	png_memcpy
arg	156:20	156:31	7	textp->text
water	156:20	0:0	8	textp
op	156:25	0:0	8	->
water	156:27	0:0	8	text
arg	156:33	156:49	7	text_ptr[i].text
water	156:33	0:0	8	text_ptr
op	156:41	0:0	8	[
water	156:42	0:0	8	i
op	156:43	0:0	8	]
op	156:44	0:0	8	.
water	156:45	0:0	8	text
arg	157:13	157:38	7	(png_size_t)(text_length)
call	157:13	157:37	8	(png_size_t)
arg	157:26	157:37	9	text_length
water	157:26	0:0	10	text_length
water	157:39	0:0	6	;
op	159:6	0:0	4	*
water	159:7	0:0	4	(
water	159:8	0:0	4	textp
op	159:13	0:0	4	->
water	159:15	0:0	4	text
op	159:20	0:0	4	+
water	159:22	0:0	4	text_length
water	159:33	0:0	4	)
op	159:35	0:0	4	=
water	159:37	0:0	4	'\0'
water	159:41	0:0	4	;
if	162:6	166:6	4	(textp -> compression > 0)
cond	162:10	162:31	5	textp -> compression > 0
water	162:10	0:0	6	textp
op	162:15	0:0	6	->
water	162:17	0:0	6	compression
op	162:29	0:0	6	>
water	162:31	0:0	6	0
stmts	163:6	166:6	5	
water	163:6	0:0	6	{
water	164:9	0:0	6	textp
op	164:14	0:0	6	->
water	164:16	0:0	6	text_length
op	164:28	0:0	6	=
water	164:30	0:0	6	0
water	164:31	0:0	6	;
water	165:9	0:0	6	textp
op	165:14	0:0	6	->
water	165:16	0:0	6	itxt_length
op	165:28	0:0	6	=
water	165:30	0:0	6	text_length
water	165:41	0:0	6	;
water	166:6	0:0	6	}
else	168:6	173:6	4
stmts	170:6	173:6	5	
water	170:6	0:0	6	{
water	171:9	0:0	6	textp
op	171:14	0:0	6	->
water	171:16	0:0	6	text_length
op	171:28	0:0	6	=
water	171:30	0:0	6	text_length
water	171:41	0:0	6	;
water	172:9	0:0	6	textp
op	172:14	0:0	6	->
water	172:16	0:0	6	itxt_length
op	172:28	0:0	6	=
water	172:30	0:0	6	0
water	172:31	0:0	6	;
water	173:6	0:0	6	}
water	175:6	0:0	4	info_ptr
op	175:14	0:0	4	->
water	175:16	0:0	4	num_text
op	175:24	0:0	4	++
water	175:26	0:0	4	;
call	176:6	176:67	4	png_debug1
arg	176:17	176:18	5	3
water	176:17	0:0	6	3
arg	176:20	176:47	5	"transferred text chunk %d"
water	176:20	0:0	6	"transferred text chunk %d"
arg	176:49	176:67	5	info_ptr->num_text
water	176:49	0:0	6	info_ptr
op	176:57	0:0	6	->
water	176:59	0:0	6	num_text
water	176:68	0:0	4	;
water	177:3	0:0	4	}
return	178:3	178:12	2	(0)
water	178:9	0:0	3	(
water	178:10	0:0	3	0
water	178:11	0:0	3	)
