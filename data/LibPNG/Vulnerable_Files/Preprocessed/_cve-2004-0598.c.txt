D:\postGraduate\code\function_representation_learning\Data\LibPNG\vulnerable_Files\vulnerable_functions\cve-2004-0598.c line 113:6 mismatched character '<EOF>' expecting '\n'
func	2:0	112:0	0	void	png_handle_iCCP
params	3:15	0:0	1	
param	3:16	3:35	2	png_structp	png_ptr
param	3:37	3:55	2	png_infop	info_ptr
param	3:57	3:75	2	png_uint_32	length
stmnts	0:0	111:31	1	
decl	6:3	6:22	2	png_charp	chunkdata
decl	7:3	7:28	2	png_byte	compression_type
decl	8:3	8:15	2	png_bytep	pC
decl	9:3	9:20	2	png_charp	profile
decl	10:3	10:23	2	png_uint_32	skip
op	10:20	0:0	2	=
water	10:22	0:0	2	0
decl	11:3	11:43	2	png_uint_32	profile_size
water	11:27	0:0	2	,
decl	11:3	11:43	2	png_uint_32	profile_length
decl	12:3	12:49	2	png_size_t	slength
water	12:21	0:0	2	,
decl	12:3	12:49	2	png_size_t	prefix_length
water	12:36	0:0	2	,
decl	12:3	12:49	2	png_size_t	data_length
call	14:3	14:38	2	png_debug
arg	14:13	14:14	3	1
water	14:13	0:0	4	1
arg	14:16	14:38	3	"in png_handle_iCCP\n"
water	14:16	0:0	4	"in png_handle_iCCP\n"
water	14:39	0:0	2	;
if	16:3	17:52	2	(! ( png_ptr -> mode & PNG_HAVE_IHDR ))
cond	16:7	16:38	3	! ( png_ptr -> mode & PNG_HAVE_IHDR )
op	16:7	0:0	4	!
water	16:8	0:0	4	(
water	16:9	0:0	4	png_ptr
op	16:16	0:0	4	->
water	16:18	0:0	4	mode
op	16:23	0:0	4	&
water	16:25	0:0	4	PNG_HAVE_IHDR
water	16:38	0:0	4	)
stmts	17:6	17:52	3	
call	17:6	17:51	4	png_error
arg	17:16	17:23	5	png_ptr
water	17:16	0:0	6	png_ptr
arg	17:25	17:51	5	"Missing IHDR before iCCP"
water	17:25	0:0	6	"Missing IHDR before iCCP"
water	17:52	0:0	4	;
else	18:3	23:3	2
stmts	18:8	23:3	3	
if	18:8	23:3	4	(png_ptr -> mode & PNG_HAVE_IDAT)
cond	18:12	18:28	5	png_ptr -> mode & PNG_HAVE_IDAT
water	18:12	0:0	6	png_ptr
op	18:19	0:0	6	->
water	18:21	0:0	6	mode
op	18:26	0:0	6	&
water	18:28	0:0	6	PNG_HAVE_IDAT
stmts	19:3	23:3	5	
water	19:3	0:0	6	{
call	20:6	20:52	6	png_warning
arg	20:18	20:25	7	png_ptr
water	20:18	0:0	8	png_ptr
arg	20:27	20:52	7	"Invalid iCCP after IDAT"
water	20:27	0:0	8	"Invalid iCCP after IDAT"
water	20:53	0:0	6	;
call	21:6	21:36	6	png_crc_finish
arg	21:21	21:28	7	png_ptr
water	21:21	0:0	8	png_ptr
arg	21:30	21:36	7	length
water	21:30	0:0	8	length
water	21:37	0:0	6	;
return	22:6	22:12	6	
water	23:3	0:0	6	}
else	24:3	26:53	2
stmts	24:8	26:53	3	
if	24:8	26:53	4	(png_ptr -> mode & PNG_HAVE_PLTE)
cond	24:12	24:28	5	png_ptr -> mode & PNG_HAVE_PLTE
water	24:12	0:0	6	png_ptr
op	24:19	0:0	6	->
water	24:21	0:0	6	mode
op	24:26	0:0	6	&
water	24:28	0:0	6	PNG_HAVE_PLTE
stmts	26:6	26:53	5	
call	26:6	26:52	6	png_warning
arg	26:18	26:25	7	png_ptr
water	26:18	0:0	8	png_ptr
arg	26:27	26:52	7	"Out of place iCCP chunk"
water	26:27	0:0	8	"Out of place iCCP chunk"
water	26:53	0:0	6	;
if	28:3	33:3	2	(info_ptr != NULL && ( info_ptr -> valid & PNG_INFO_iCCP ))
cond	28:7	28:59	3	info_ptr != NULL && ( info_ptr -> valid & PNG_INFO_iCCP )
water	28:7	0:0	4	info_ptr
op	28:16	0:0	4	!=
water	28:19	0:0	4	NULL
op	28:24	0:0	4	&&
water	28:27	0:0	4	(
water	28:28	0:0	4	info_ptr
op	28:36	0:0	4	->
water	28:38	0:0	4	valid
op	28:44	0:0	4	&
water	28:46	0:0	4	PNG_INFO_iCCP
water	28:59	0:0	4	)
stmts	29:3	33:3	3	
water	29:3	0:0	4	{
call	30:6	30:49	4	png_warning
arg	30:18	30:25	5	png_ptr
water	30:18	0:0	6	png_ptr
arg	30:27	30:49	5	"Duplicate iCCP chunk"
water	30:27	0:0	6	"Duplicate iCCP chunk"
water	30:50	0:0	4	;
call	31:6	31:36	4	png_crc_finish
arg	31:21	31:28	5	png_ptr
water	31:21	0:0	6	png_ptr
arg	31:30	31:36	5	length
water	31:30	0:0	6	length
water	31:37	0:0	4	;
return	32:6	32:12	4	
water	33:3	0:0	4	}
if	36:3	41:3	2	(length > ( png_uint_32 ) 65535 L)
cond	36:7	36:34	3	length > ( png_uint_32 ) 65535 L
water	36:7	0:0	4	length
op	36:14	0:0	4	>
water	36:16	0:0	4	(
water	36:17	0:0	4	png_uint_32
water	36:28	0:0	4	)
water	36:29	0:0	4	65535
water	36:34	0:0	4	L
stmts	37:3	41:3	3	
water	37:3	0:0	4	{
call	38:6	38:66	4	png_warning
arg	38:18	38:25	5	png_ptr
water	38:18	0:0	6	png_ptr
arg	38:27	38:66	5	"iCCP chunk too large to fit in memory"
water	38:27	0:0	6	"iCCP chunk too large to fit in memory"
water	38:67	0:0	4	;
water	39:6	0:0	4	skip
op	39:11	0:0	4	=
water	39:13	0:0	4	length
op	39:20	0:0	4	-
water	39:22	0:0	4	(
water	39:23	0:0	4	png_uint_32
water	39:34	0:0	4	)
water	39:35	0:0	4	65535
water	39:40	0:0	4	L
water	39:41	0:0	4	;
water	40:6	0:0	4	length
op	40:13	0:0	4	=
water	40:15	0:0	4	(
water	40:16	0:0	4	png_uint_32
water	40:27	0:0	4	)
water	40:28	0:0	4	65535
water	40:33	0:0	4	L
water	40:34	0:0	4	;
water	41:3	0:0	4	}
water	44:3	0:0	2	chunkdata
op	44:13	0:0	2	=
water	44:15	0:0	2	(
water	44:16	0:0	2	png_charp
water	44:25	0:0	2	)
call	44:26	44:56	2	png_malloc
arg	44:37	44:44	3	png_ptr
water	44:37	0:0	4	png_ptr
arg	44:46	44:56	3	length+1
water	44:46	0:0	4	length
op	44:53	0:0	4	+
water	44:55	0:0	4	1
water	44:57	0:0	2	;
water	45:3	0:0	2	slength
op	45:11	0:0	2	=
water	45:13	0:0	2	(
water	45:14	0:0	2	png_size_t
water	45:24	0:0	2	)
water	45:25	0:0	2	length
water	45:31	0:0	2	;
call	46:3	46:54	2	png_crc_read
arg	46:16	46:23	3	png_ptr
water	46:16	0:0	4	png_ptr
arg	46:25	46:45	3	(png_bytep)chunkdata
water	46:25	0:0	4	(
water	46:26	0:0	4	png_bytep
water	46:35	0:0	4	)
water	46:36	0:0	4	chunkdata
arg	46:47	46:54	3	slength
water	46:47	0:0	4	slength
water	46:55	0:0	2	;
if	48:3	52:3	2	(png_crc_finish (png_ptr ,skip ))
cond	48:7	48:35	3	png_crc_finish (png_ptr ,skip )
call	48:7	48:35	4	png_crc_finish
arg	48:22	48:29	5	png_ptr
water	48:22	0:0	6	png_ptr
arg	48:31	48:35	5	skip
water	48:31	0:0	6	skip
stmts	49:3	52:3	3	
water	49:3	0:0	4	{
call	50:6	50:33	4	png_free
arg	50:15	50:22	5	png_ptr
water	50:15	0:0	6	png_ptr
arg	50:24	50:33	5	chunkdata
water	50:24	0:0	6	chunkdata
water	50:34	0:0	4	;
return	51:6	51:12	4	
water	52:3	0:0	4	}
water	54:3	0:0	2	chunkdata
op	54:12	0:0	2	[
water	54:13	0:0	2	slength
op	54:20	0:0	2	]
op	54:22	0:0	2	=
water	54:24	0:0	2	0
water	54:25	0:0	2	x00
water	54:28	0:0	2	;
for	56:3	57:7	2	(profile = chunkdata ;* profile;profile ++)
forinit	56:8	56:27	3	profile = chunkdata ;
water	56:8	0:0	4	profile
op	56:16	0:0	4	=
water	56:18	0:0	4	chunkdata
water	56:27	0:0	4	;
cond	56:29	56:30	3	* profile
op	56:29	0:0	4	*
water	56:30	0:0	4	profile
forexpr	56:39	56:46	3	profile ++
water	56:39	0:0	4	profile
op	56:46	0:0	4	++
stmts	57:7	57:7	3	
water	57:7	0:0	4	;
op	59:3	0:0	2	++
water	59:5	0:0	2	profile
water	59:12	0:0	2	;
if	63:3	68:3	2	(profile >= chunkdata + slength - 1)
cond	63:8	63:41	3	profile >= chunkdata + slength - 1
water	63:8	0:0	4	profile
op	63:16	0:0	4	>=
water	63:19	0:0	4	chunkdata
op	63:29	0:0	4	+
water	63:31	0:0	4	slength
op	63:39	0:0	4	-
water	63:41	0:0	4	1
stmts	64:3	68:3	3	
water	64:3	0:0	4	{
call	65:6	65:33	4	png_free
arg	65:15	65:22	5	png_ptr
water	65:15	0:0	6	png_ptr
arg	65:24	65:33	5	chunkdata
water	65:24	0:0	6	chunkdata
water	65:34	0:0	4	;
call	66:6	66:49	4	png_warning
arg	66:18	66:25	5	png_ptr
water	66:18	0:0	6	png_ptr
arg	66:27	66:49	5	"Malformed iCCP chunk"
water	66:27	0:0	6	"Malformed iCCP chunk"
water	66:50	0:0	4	;
return	67:6	67:12	4	
water	68:3	0:0	4	}
water	71:3	0:0	2	compression_type
op	71:20	0:0	2	=
op	71:22	0:0	2	*
water	71:23	0:0	2	profile
op	71:30	0:0	2	++
water	71:32	0:0	2	;
if	72:3	77:3	2	(compression_type)
cond	72:7	72:7	3	compression_type
water	72:7	0:0	4	compression_type
stmts	73:3	77:3	3	
water	73:3	0:0	4	{
call	74:6	74:76	4	png_warning
arg	74:18	74:25	5	png_ptr
water	74:18	0:0	6	png_ptr
arg	74:27	74:76	5	"Ignoring nonzero compression type in iCCP chunk"
water	74:27	0:0	6	"Ignoring nonzero compression type in iCCP chunk"
water	74:77	0:0	4	;
water	75:6	0:0	4	compression_type
op	75:22	0:0	4	=
water	75:23	0:0	4	0
water	75:24	0:0	4	x00
water	75:27	0:0	4	;
water	77:3	0:0	4	}
water	79:3	0:0	2	prefix_length
op	79:17	0:0	2	=
water	79:19	0:0	2	profile
op	79:27	0:0	2	-
water	79:29	0:0	2	chunkdata
water	79:38	0:0	2	;
water	80:3	0:0	2	chunkdata
op	80:13	0:0	2	=
call	80:15	81:72	2	png_decompress_chunk
arg	80:36	80:43	3	png_ptr
water	80:36	0:0	4	png_ptr
arg	80:45	80:61	3	compression_type
water	80:45	0:0	4	compression_type
arg	80:63	80:72	3	chunkdata
water	80:63	0:0	4	chunkdata
arg	81:36	81:43	3	slength
water	81:36	0:0	4	slength
arg	81:45	81:58	3	prefix_length
water	81:45	0:0	4	prefix_length
arg	81:60	81:72	3	&data_length
op	81:60	0:0	4	&
water	81:61	0:0	4	data_length
water	81:73	0:0	2	;
water	83:3	0:0	2	profile_length
op	83:18	0:0	2	=
water	83:20	0:0	2	data_length
op	83:32	0:0	2	-
water	83:34	0:0	2	prefix_length
water	83:47	0:0	2	;
if	85:3	90:3	2	(prefix_length > data_length || profile_length < 4)
cond	85:8	85:56	3	prefix_length > data_length || profile_length < 4
water	85:8	0:0	4	prefix_length
op	85:22	0:0	4	>
water	85:24	0:0	4	data_length
op	85:36	0:0	4	||
water	85:39	0:0	4	profile_length
op	85:54	0:0	4	<
water	85:56	0:0	4	4
stmts	86:3	90:3	3	
water	86:3	0:0	4	{
call	87:6	87:33	4	png_free
arg	87:15	87:22	5	png_ptr
water	87:15	0:0	6	png_ptr
arg	87:24	87:33	5	chunkdata
water	87:24	0:0	6	chunkdata
water	87:34	0:0	4	;
call	88:6	88:71	4	png_warning
arg	88:18	88:25	5	png_ptr
water	88:18	0:0	6	png_ptr
arg	88:27	88:71	5	"Profile size field missing from iCCP chunk"
water	88:27	0:0	6	"Profile size field missing from iCCP chunk"
water	88:72	0:0	4	;
return	89:6	89:12	4	
water	90:3	0:0	4	}
water	93:3	0:0	2	pC
op	93:6	0:0	2	=
call	93:8	93:43	2	(png_bytep)
arg	93:20	93:43	3	chunkdata+prefix_length
water	93:20	0:0	4	chunkdata
op	93:29	0:0	4	+
water	93:30	0:0	4	prefix_length
water	93:44	0:0	2	;
water	94:3	0:0	2	profile_size
op	94:16	0:0	2	=
water	94:18	0:0	2	(
water	94:19	0:0	2	(
op	94:20	0:0	2	*
water	94:21	0:0	2	(
water	94:22	0:0	2	pC
water	94:26	0:0	2	)
water	94:27	0:0	2	)
op	94:28	0:0	2	<<
water	94:30	0:0	2	24
water	94:32	0:0	2	)
op	94:34	0:0	2	|
water	95:18	0:0	2	(
water	95:19	0:0	2	(
op	95:20	0:0	2	*
water	95:21	0:0	2	(
water	95:22	0:0	2	pC
op	95:24	0:0	2	+
water	95:25	0:0	2	1
water	95:26	0:0	2	)
water	95:27	0:0	2	)
op	95:28	0:0	2	<<
water	95:30	0:0	2	16
water	95:32	0:0	2	)
op	95:34	0:0	2	|
water	96:18	0:0	2	(
water	96:19	0:0	2	(
op	96:20	0:0	2	*
water	96:21	0:0	2	(
water	96:22	0:0	2	pC
op	96:24	0:0	2	+
water	96:25	0:0	2	2
water	96:26	0:0	2	)
water	96:27	0:0	2	)
op	96:28	0:0	2	<<
water	96:31	0:0	2	8
water	96:32	0:0	2	)
op	96:34	0:0	2	|
water	97:18	0:0	2	(
water	97:19	0:0	2	(
op	97:20	0:0	2	*
water	97:21	0:0	2	(
water	97:22	0:0	2	pC
op	97:24	0:0	2	+
water	97:25	0:0	2	3
water	97:26	0:0	2	)
water	97:27	0:0	2	)
water	97:32	0:0	2	)
water	97:33	0:0	2	;
if	99:3	100:35	2	(profile_size < profile_length)
cond	99:6	99:21	3	profile_size < profile_length
water	99:6	0:0	4	profile_size
op	99:19	0:0	4	<
water	99:21	0:0	4	profile_length
stmts	100:6	100:35	3	
water	100:6	0:0	4	profile_length
op	100:21	0:0	4	=
water	100:23	0:0	4	profile_size
water	100:35	0:0	4	;
if	102:3	107:3	2	(profile_size > profile_length)
cond	102:6	102:21	3	profile_size > profile_length
water	102:6	0:0	4	profile_size
op	102:19	0:0	4	>
water	102:21	0:0	4	profile_length
stmts	103:3	107:3	3	
water	103:3	0:0	4	{
call	104:6	104:33	4	png_free
arg	104:15	104:22	5	png_ptr
water	104:15	0:0	6	png_ptr
arg	104:24	104:33	5	chunkdata
water	104:24	0:0	6	chunkdata
water	104:34	0:0	4	;
call	105:6	105:61	4	png_warning
arg	105:18	105:25	5	png_ptr
water	105:18	0:0	6	png_ptr
arg	105:27	105:61	5	"Ignoring truncated iCCP profile."
water	105:27	0:0	6	"Ignoring truncated iCCP profile."
water	105:62	0:0	4	;
return	106:6	106:12	4	
water	107:3	0:0	4	}
call	109:3	110:57	2	png_set_iCCP
arg	109:16	109:23	3	png_ptr
water	109:16	0:0	4	png_ptr
arg	109:25	109:33	3	info_ptr
water	109:25	0:0	4	info_ptr
arg	109:35	109:44	3	chunkdata
water	109:35	0:0	4	chunkdata
arg	109:46	109:62	3	compression_type
water	109:46	0:0	4	compression_type
arg	110:16	110:41	3	chunkdata+prefix_length
water	110:16	0:0	4	chunkdata
op	110:26	0:0	4	+
water	110:28	0:0	4	prefix_length
arg	110:43	110:57	3	profile_length
water	110:43	0:0	4	profile_length
water	110:58	0:0	2	;
call	111:3	111:30	2	png_free
arg	111:12	111:19	3	png_ptr
water	111:12	0:0	4	png_ptr
arg	111:21	111:30	3	chunkdata
water	111:21	0:0	4	chunkdata
water	111:31	0:0	2	;
