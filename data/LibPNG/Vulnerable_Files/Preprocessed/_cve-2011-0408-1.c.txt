func	2:0	150:0	0	void	png_do_expand_palette
params	3:21	0:0	1	
param	3:22	3:44	2	png_row_infop	row_info
param	3:46	3:59	2	png_bytep	row
param	4:3	4:27	2	png_const_colorp	palette
param	4:29	4:56	2	png_const_bytep	trans_alpha
param	4:58	4:71	2	int	num_trans
stmnts	0:0	149:3	1	
decl	6:3	6:19	2	int	shift
water	6:12	0:0	2	,
decl	6:3	6:19	2	int	value
decl	7:3	7:19	2	png_bytep	sp
water	7:15	0:0	2	,
decl	7:3	7:19	2	png_bytep	dp
decl	8:3	8:16	2	png_uint_32	i
decl	9:3	9:40	2	png_uint_32	row_width
op	9:24	0:0	2	=
water	9:25	0:0	2	row_info
op	9:33	0:0	2	->
water	9:35	0:0	2	width
call	11:3	11:42	2	png_debug
arg	11:13	11:14	3	1
water	11:13	0:0	4	1
arg	11:16	11:42	3	"in png_do_expand_palette"
water	11:16	0:0	4	"in png_do_expand_palette"
water	11:43	0:0	2	;
if	13:3	149:3	2	(row_info -> color_type == PNG_COLOR_TYPE_PALETTE)
cond	13:7	13:31	3	row_info -> color_type == PNG_COLOR_TYPE_PALETTE
water	13:7	0:0	4	row_info
op	13:15	0:0	4	->
water	13:17	0:0	4	color_type
op	13:28	0:0	4	==
water	13:31	0:0	4	PNG_COLOR_TYPE_PALETTE
stmts	14:3	149:3	3	
water	14:3	0:0	4	{
if	15:6	98:6	4	(row_info -> bit_depth < 8)
cond	15:10	15:32	5	row_info -> bit_depth < 8
water	15:10	0:0	6	row_info
op	15:18	0:0	6	->
water	15:20	0:0	6	bit_depth
op	15:30	0:0	6	<
water	15:32	0:0	6	8
stmts	16:6	98:6	5	
water	16:6	0:0	6	{
switch	17:9	94:9	6	(row_info -> bit_depth)
cond	17:17	17:27	7	row_info -> bit_depth
water	17:17	0:0	8	row_info
op	17:25	0:0	8	->
water	17:27	0:0	8	bit_depth
stmts	18:9	94:9	7	
water	18:9	0:0	8	{
label	19:12	19:18	8	case 1 :
water	20:12	0:0	8	{
water	21:15	0:0	8	sp
op	21:18	0:0	8	=
water	21:20	0:0	8	row
op	21:24	0:0	8	+
call	21:26	21:59	8	(png_size_t)
arg	21:39	21:59	9	(row_width-1)>>3
water	21:39	0:0	10	(
water	21:40	0:0	10	row_width
op	21:50	0:0	10	-
water	21:52	0:0	10	1
water	21:53	0:0	10	)
op	21:55	0:0	10	>>
water	21:58	0:0	10	3
water	21:60	0:0	8	;
water	22:15	0:0	8	dp
op	22:18	0:0	8	=
water	22:20	0:0	8	row
op	22:24	0:0	8	+
water	22:26	0:0	8	(
water	22:27	0:0	8	png_size_t
water	22:37	0:0	8	)
water	22:38	0:0	8	row_width
op	22:48	0:0	8	-
water	22:50	0:0	8	1
water	22:51	0:0	8	;
water	23:15	0:0	8	shift
op	23:21	0:0	8	=
water	23:23	0:0	8	7
op	23:25	0:0	8	-
call	23:27	23:55	8	(int)
arg	23:33	23:55	9	(row_width+7)&0x07
water	23:33	0:0	10	(
water	23:34	0:0	10	row_width
op	23:44	0:0	10	+
water	23:46	0:0	10	7
water	23:47	0:0	10	)
op	23:49	0:0	10	&
water	23:51	0:0	10	0
water	23:52	0:0	10	x07
water	23:56	0:0	8	;
for	24:15	42:15	8	(i = 0 ;i < row_width;i ++)
forinit	24:20	24:25	9	i = 0 ;
water	24:20	0:0	10	i
op	24:22	0:0	10	=
water	24:24	0:0	10	0
water	24:25	0:0	10	;
cond	24:27	24:31	9	i < row_width
water	24:27	0:0	10	i
op	24:29	0:0	10	<
water	24:31	0:0	10	row_width
forexpr	24:42	24:43	9	i ++
water	24:42	0:0	10	i
op	24:43	0:0	10	++
stmts	25:15	42:15	9	
water	25:15	0:0	10	{
if	26:18	27:28	10	(( * sp >> shift ) & 0 x01)
cond	26:22	26:40	11	( * sp >> shift ) & 0 x01
water	26:22	0:0	12	(
op	26:23	0:0	12	*
water	26:24	0:0	12	sp
op	26:27	0:0	12	>>
water	26:30	0:0	12	shift
water	26:35	0:0	12	)
op	26:37	0:0	12	&
water	26:39	0:0	12	0
water	26:40	0:0	12	x01
stmts	27:21	27:28	11	
op	27:21	0:0	12	*
water	27:22	0:0	12	dp
op	27:25	0:0	12	=
water	27:27	0:0	12	1
water	27:28	0:0	12	;
else	29:18	30:28	10
stmts	30:21	30:28	11	
op	30:21	0:0	12	*
water	30:22	0:0	12	dp
op	30:25	0:0	12	=
water	30:27	0:0	12	0
water	30:28	0:0	12	;
if	32:18	36:18	10	(shift == 7)
cond	32:22	32:31	11	shift == 7
water	32:22	0:0	12	shift
op	32:28	0:0	12	==
water	32:31	0:0	12	7
stmts	33:18	36:18	11	
water	33:18	0:0	12	{
water	34:21	0:0	12	shift
op	34:27	0:0	12	=
water	34:29	0:0	12	0
water	34:30	0:0	12	;
water	35:21	0:0	12	sp
op	35:23	0:0	12	--
water	35:25	0:0	12	;
water	36:18	0:0	12	}
else	38:18	39:28	10
stmts	39:21	39:28	11	
water	39:21	0:0	12	shift
op	39:26	0:0	12	++
water	39:28	0:0	12	;
water	41:18	0:0	10	dp
op	41:20	0:0	10	--
water	41:22	0:0	10	;
water	42:15	0:0	10	}
break	43:15	43:20	8	
water	44:12	0:0	8	}
label	46:12	46:18	8	case 2 :
water	47:12	0:0	8	{
water	48:15	0:0	8	sp
op	48:18	0:0	8	=
water	48:20	0:0	8	row
op	48:24	0:0	8	+
call	48:26	48:59	8	(png_size_t)
arg	48:39	48:59	9	(row_width-1)>>2
water	48:39	0:0	10	(
water	48:40	0:0	10	row_width
op	48:50	0:0	10	-
water	48:52	0:0	10	1
water	48:53	0:0	10	)
op	48:55	0:0	10	>>
water	48:58	0:0	10	2
water	48:60	0:0	8	;
water	49:15	0:0	8	dp
op	49:18	0:0	8	=
water	49:20	0:0	8	row
op	49:24	0:0	8	+
water	49:26	0:0	8	(
water	49:27	0:0	8	png_size_t
water	49:37	0:0	8	)
water	49:38	0:0	8	row_width
op	49:48	0:0	8	-
water	49:50	0:0	8	1
water	49:51	0:0	8	;
water	50:15	0:0	8	shift
op	50:21	0:0	8	=
call	50:23	50:64	8	(int)
arg	50:29	50:64	9	(3-((row_width+3)&0x03))<<1
water	50:29	0:0	10	(
water	50:30	0:0	10	3
op	50:32	0:0	10	-
water	50:34	0:0	10	(
water	50:35	0:0	10	(
water	50:36	0:0	10	row_width
op	50:46	0:0	10	+
water	50:48	0:0	10	3
water	50:49	0:0	10	)
op	50:51	0:0	10	&
water	50:53	0:0	10	0
water	50:54	0:0	10	x03
water	50:57	0:0	10	)
water	50:58	0:0	10	)
op	50:60	0:0	10	<<
water	50:63	0:0	10	1
water	50:65	0:0	8	;
for	51:15	65:15	8	(i = 0 ;i < row_width;i ++)
forinit	51:20	51:25	9	i = 0 ;
water	51:20	0:0	10	i
op	51:22	0:0	10	=
water	51:24	0:0	10	0
water	51:25	0:0	10	;
cond	51:27	51:31	9	i < row_width
water	51:27	0:0	10	i
op	51:29	0:0	10	<
water	51:31	0:0	10	row_width
forexpr	51:42	51:43	9	i ++
water	51:42	0:0	10	i
op	51:43	0:0	10	++
stmts	52:15	65:15	9	
water	52:15	0:0	10	{
water	53:18	0:0	10	value
op	53:24	0:0	10	=
water	53:26	0:0	10	(
op	53:27	0:0	10	*
water	53:28	0:0	10	sp
op	53:31	0:0	10	>>
water	53:34	0:0	10	shift
water	53:39	0:0	10	)
op	53:41	0:0	10	&
water	53:43	0:0	10	0
water	53:44	0:0	10	x03
water	53:47	0:0	10	;
op	54:18	0:0	10	*
water	54:19	0:0	10	dp
op	54:22	0:0	10	=
water	54:24	0:0	10	(
water	54:25	0:0	10	png_byte
water	54:33	0:0	10	)
water	54:34	0:0	10	value
water	54:39	0:0	10	;
if	55:18	59:18	10	(shift == 6)
cond	55:22	55:31	11	shift == 6
water	55:22	0:0	12	shift
op	55:28	0:0	12	==
water	55:31	0:0	12	6
stmts	56:18	59:18	11	
water	56:18	0:0	12	{
water	57:21	0:0	12	shift
op	57:27	0:0	12	=
water	57:29	0:0	12	0
water	57:30	0:0	12	;
water	58:21	0:0	12	sp
op	58:23	0:0	12	--
water	58:25	0:0	12	;
water	59:18	0:0	12	}
else	61:18	62:31	10
stmts	62:21	62:31	11	
water	62:21	0:0	12	shift
op	62:27	0:0	12	+=
water	62:30	0:0	12	2
water	62:31	0:0	12	;
water	64:18	0:0	10	dp
op	64:20	0:0	10	--
water	64:22	0:0	10	;
water	65:15	0:0	10	}
break	66:15	66:20	8	
water	67:12	0:0	8	}
label	69:12	69:18	8	case 4 :
water	70:12	0:0	8	{
water	71:15	0:0	8	sp
op	71:18	0:0	8	=
water	71:20	0:0	8	row
op	71:24	0:0	8	+
call	71:26	71:59	8	(png_size_t)
arg	71:39	71:59	9	(row_width-1)>>1
water	71:39	0:0	10	(
water	71:40	0:0	10	row_width
op	71:50	0:0	10	-
water	71:52	0:0	10	1
water	71:53	0:0	10	)
op	71:55	0:0	10	>>
water	71:58	0:0	10	1
water	71:60	0:0	8	;
water	72:15	0:0	8	dp
op	72:18	0:0	8	=
water	72:20	0:0	8	row
op	72:24	0:0	8	+
water	72:26	0:0	8	(
water	72:27	0:0	8	png_size_t
water	72:37	0:0	8	)
water	72:38	0:0	8	row_width
op	72:48	0:0	8	-
water	72:50	0:0	8	1
water	72:51	0:0	8	;
water	73:15	0:0	8	shift
op	73:21	0:0	8	=
call	73:23	73:52	8	(int)
arg	73:29	73:52	9	(row_width&0x01)<<2
water	73:29	0:0	10	(
water	73:30	0:0	10	row_width
op	73:40	0:0	10	&
water	73:42	0:0	10	0
water	73:43	0:0	10	x01
water	73:46	0:0	10	)
op	73:48	0:0	10	<<
water	73:51	0:0	10	2
water	73:53	0:0	8	;
for	74:15	88:15	8	(i = 0 ;i < row_width;i ++)
forinit	74:20	74:25	9	i = 0 ;
water	74:20	0:0	10	i
op	74:22	0:0	10	=
water	74:24	0:0	10	0
water	74:25	0:0	10	;
cond	74:27	74:31	9	i < row_width
water	74:27	0:0	10	i
op	74:29	0:0	10	<
water	74:31	0:0	10	row_width
forexpr	74:42	74:43	9	i ++
water	74:42	0:0	10	i
op	74:43	0:0	10	++
stmts	75:15	88:15	9	
water	75:15	0:0	10	{
water	76:18	0:0	10	value
op	76:24	0:0	10	=
water	76:26	0:0	10	(
op	76:27	0:0	10	*
water	76:28	0:0	10	sp
op	76:31	0:0	10	>>
water	76:34	0:0	10	shift
water	76:39	0:0	10	)
op	76:41	0:0	10	&
water	76:43	0:0	10	0
water	76:44	0:0	10	x0f
water	76:47	0:0	10	;
op	77:18	0:0	10	*
water	77:19	0:0	10	dp
op	77:22	0:0	10	=
water	77:24	0:0	10	(
water	77:25	0:0	10	png_byte
water	77:33	0:0	10	)
water	77:34	0:0	10	value
water	77:39	0:0	10	;
if	78:18	82:18	10	(shift == 4)
cond	78:22	78:31	11	shift == 4
water	78:22	0:0	12	shift
op	78:28	0:0	12	==
water	78:31	0:0	12	4
stmts	79:18	82:18	11	
water	79:18	0:0	12	{
water	80:21	0:0	12	shift
op	80:27	0:0	12	=
water	80:29	0:0	12	0
water	80:30	0:0	12	;
water	81:21	0:0	12	sp
op	81:23	0:0	12	--
water	81:25	0:0	12	;
water	82:18	0:0	12	}
else	84:18	85:31	10
stmts	85:21	85:31	11	
water	85:21	0:0	12	shift
op	85:27	0:0	12	+=
water	85:30	0:0	12	4
water	85:31	0:0	12	;
water	87:18	0:0	10	dp
op	87:20	0:0	10	--
water	87:22	0:0	10	;
water	88:15	0:0	10	}
break	89:15	89:20	8	
water	90:12	0:0	8	}
label	92:12	92:19	8	default :
break	93:15	93:20	8	
water	94:9	0:0	8	}
water	95:9	0:0	6	row_info
op	95:17	0:0	6	->
water	95:19	0:0	6	bit_depth
op	95:29	0:0	6	=
water	95:31	0:0	6	8
water	95:32	0:0	6	;
water	96:9	0:0	6	row_info
op	96:17	0:0	6	->
water	96:19	0:0	6	pixel_depth
op	96:31	0:0	6	=
water	96:33	0:0	6	8
water	96:34	0:0	6	;
water	97:9	0:0	6	row_info
op	97:17	0:0	6	->
water	97:19	0:0	6	rowbytes
op	97:28	0:0	6	=
water	97:30	0:0	6	row_width
water	97:39	0:0	6	;
water	98:6	0:0	6	}
else	100:6	148:6	4
stmts	100:11	148:6	5	
if	100:11	148:6	6	(row_info -> bit_depth == 8)
cond	100:15	100:38	7	row_info -> bit_depth == 8
water	100:15	0:0	8	row_info
op	100:23	0:0	8	->
water	100:25	0:0	8	bit_depth
op	100:35	0:0	8	==
water	100:38	0:0	8	8
stmts	101:6	148:6	7	
water	101:6	0:0	8	{
water	102:9	0:0	8	{
if	103:12	126:12	8	(trans_alpha != NULL)
cond	103:16	103:31	9	trans_alpha != NULL
water	103:16	0:0	10	trans_alpha
op	103:28	0:0	10	!=
water	103:31	0:0	10	NULL
stmts	104:12	126:12	9	
water	104:12	0:0	10	{
water	105:15	0:0	10	sp
op	105:18	0:0	10	=
water	105:20	0:0	10	row
op	105:24	0:0	10	+
water	105:26	0:0	10	(
water	105:27	0:0	10	png_size_t
water	105:37	0:0	10	)
water	105:38	0:0	10	row_width
op	105:48	0:0	10	-
water	105:50	0:0	10	1
water	105:51	0:0	10	;
water	106:15	0:0	10	dp
op	106:18	0:0	10	=
water	106:20	0:0	10	row
op	106:24	0:0	10	+
call	106:26	106:53	10	(png_size_t)
arg	106:39	106:53	11	row_width<<2
water	106:39	0:0	12	row_width
op	106:49	0:0	12	<<
water	106:52	0:0	12	2
op	106:55	0:0	10	-
water	106:57	0:0	10	1
water	106:58	0:0	10	;
for	108:15	120:15	10	(i = 0 ;i < row_width;i ++)
forinit	108:20	108:25	11	i = 0 ;
water	108:20	0:0	12	i
op	108:22	0:0	12	=
water	108:24	0:0	12	0
water	108:25	0:0	12	;
cond	108:27	108:31	11	i < row_width
water	108:27	0:0	12	i
op	108:29	0:0	12	<
water	108:31	0:0	12	row_width
forexpr	108:42	108:43	11	i ++
water	108:42	0:0	12	i
op	108:43	0:0	12	++
stmts	109:15	120:15	11	
water	109:15	0:0	12	{
if	110:18	111:33	12	(( int ) (* sp ) >= num_trans)
cond	110:22	110:36	13	( int ) (* sp ) >= num_trans
call	110:22	110:31	14	(int)
arg	110:28	110:31	15	*sp
op	110:28	0:0	16	*
water	110:29	0:0	16	sp
op	110:33	0:0	14	>=
water	110:36	0:0	14	num_trans
stmts	111:21	111:33	13	
op	111:21	0:0	14	*
water	111:22	0:0	14	dp
op	111:24	0:0	14	--
op	111:27	0:0	14	=
water	111:29	0:0	14	0
water	111:30	0:0	14	xff
water	111:33	0:0	14	;
else	113:18	114:45	12
stmts	114:21	114:45	13	
op	114:21	0:0	14	*
water	114:22	0:0	14	dp
op	114:24	0:0	14	--
op	114:27	0:0	14	=
water	114:29	0:0	14	trans_alpha
op	114:40	0:0	14	[
op	114:41	0:0	14	*
water	114:42	0:0	14	sp
op	114:44	0:0	14	]
water	114:45	0:0	14	;
op	116:18	0:0	12	*
water	116:19	0:0	12	dp
op	116:21	0:0	12	--
op	116:24	0:0	12	=
water	116:26	0:0	12	palette
op	116:33	0:0	12	[
op	116:34	0:0	12	*
water	116:35	0:0	12	sp
op	116:37	0:0	12	]
op	116:38	0:0	12	.
water	116:39	0:0	12	blue
water	116:43	0:0	12	;
op	117:18	0:0	12	*
water	117:19	0:0	12	dp
op	117:21	0:0	12	--
op	117:24	0:0	12	=
water	117:26	0:0	12	palette
op	117:33	0:0	12	[
op	117:34	0:0	12	*
water	117:35	0:0	12	sp
op	117:37	0:0	12	]
op	117:38	0:0	12	.
water	117:39	0:0	12	green
water	117:44	0:0	12	;
op	118:18	0:0	12	*
water	118:19	0:0	12	dp
op	118:21	0:0	12	--
op	118:24	0:0	12	=
water	118:26	0:0	12	palette
op	118:33	0:0	12	[
op	118:34	0:0	12	*
water	118:35	0:0	12	sp
op	118:37	0:0	12	]
op	118:38	0:0	12	.
water	118:39	0:0	12	red
water	118:42	0:0	12	;
water	119:18	0:0	12	sp
op	119:20	0:0	12	--
water	119:22	0:0	12	;
water	120:15	0:0	12	}
water	121:15	0:0	10	row_info
op	121:23	0:0	10	->
water	121:25	0:0	10	bit_depth
op	121:35	0:0	10	=
water	121:37	0:0	10	8
water	121:38	0:0	10	;
water	122:15	0:0	10	row_info
op	122:23	0:0	10	->
water	122:25	0:0	10	pixel_depth
op	122:37	0:0	10	=
water	122:39	0:0	10	32
water	122:41	0:0	10	;
water	123:15	0:0	10	row_info
op	123:23	0:0	10	->
water	123:25	0:0	10	rowbytes
op	123:34	0:0	10	=
water	123:36	0:0	10	row_width
op	123:46	0:0	10	*
water	123:48	0:0	10	4
water	123:49	0:0	10	;
water	124:15	0:0	10	row_info
op	124:23	0:0	10	->
water	124:25	0:0	10	color_type
op	124:36	0:0	10	=
water	124:38	0:0	10	6
water	124:39	0:0	10	;
water	125:15	0:0	10	row_info
op	125:23	0:0	10	->
water	125:25	0:0	10	channels
op	125:34	0:0	10	=
water	125:36	0:0	10	4
water	125:37	0:0	10	;
water	126:12	0:0	10	}
else	128:12	146:12	8
stmts	129:12	146:12	9	
water	129:12	0:0	10	{
water	130:15	0:0	10	sp
op	130:18	0:0	10	=
water	130:20	0:0	10	row
op	130:24	0:0	10	+
water	130:26	0:0	10	(
water	130:27	0:0	10	png_size_t
water	130:37	0:0	10	)
water	130:38	0:0	10	row_width
op	130:48	0:0	10	-
water	130:50	0:0	10	1
water	130:51	0:0	10	;
water	131:15	0:0	10	dp
op	131:18	0:0	10	=
water	131:20	0:0	10	row
op	131:24	0:0	10	+
call	131:26	131:52	10	(png_size_t)
arg	131:39	131:52	11	row_width*3
water	131:39	0:0	12	row_width
op	131:49	0:0	12	*
water	131:51	0:0	12	3
op	131:54	0:0	10	-
water	131:56	0:0	10	1
water	131:57	0:0	10	;
for	133:15	139:15	10	(i = 0 ;i < row_width;i ++)
forinit	133:20	133:25	11	i = 0 ;
water	133:20	0:0	12	i
op	133:22	0:0	12	=
water	133:24	0:0	12	0
water	133:25	0:0	12	;
cond	133:27	133:31	11	i < row_width
water	133:27	0:0	12	i
op	133:29	0:0	12	<
water	133:31	0:0	12	row_width
forexpr	133:42	133:43	11	i ++
water	133:42	0:0	12	i
op	133:43	0:0	12	++
stmts	134:15	139:15	11	
water	134:15	0:0	12	{
op	135:18	0:0	12	*
water	135:19	0:0	12	dp
op	135:21	0:0	12	--
op	135:24	0:0	12	=
water	135:26	0:0	12	palette
op	135:33	0:0	12	[
op	135:34	0:0	12	*
water	135:35	0:0	12	sp
op	135:37	0:0	12	]
op	135:38	0:0	12	.
water	135:39	0:0	12	blue
water	135:43	0:0	12	;
op	136:18	0:0	12	*
water	136:19	0:0	12	dp
op	136:21	0:0	12	--
op	136:24	0:0	12	=
water	136:26	0:0	12	palette
op	136:33	0:0	12	[
op	136:34	0:0	12	*
water	136:35	0:0	12	sp
op	136:37	0:0	12	]
op	136:38	0:0	12	.
water	136:39	0:0	12	green
water	136:44	0:0	12	;
op	137:18	0:0	12	*
water	137:19	0:0	12	dp
op	137:21	0:0	12	--
op	137:24	0:0	12	=
water	137:26	0:0	12	palette
op	137:33	0:0	12	[
op	137:34	0:0	12	*
water	137:35	0:0	12	sp
op	137:37	0:0	12	]
op	137:38	0:0	12	.
water	137:39	0:0	12	red
water	137:42	0:0	12	;
water	138:18	0:0	12	sp
op	138:20	0:0	12	--
water	138:22	0:0	12	;
water	139:15	0:0	12	}
water	141:15	0:0	10	row_info
op	141:23	0:0	10	->
water	141:25	0:0	10	bit_depth
op	141:35	0:0	10	=
water	141:37	0:0	10	8
water	141:38	0:0	10	;
water	142:15	0:0	10	row_info
op	142:23	0:0	10	->
water	142:25	0:0	10	pixel_depth
op	142:37	0:0	10	=
water	142:39	0:0	10	24
water	142:41	0:0	10	;
water	143:15	0:0	10	row_info
op	143:23	0:0	10	->
water	143:25	0:0	10	rowbytes
op	143:34	0:0	10	=
water	143:36	0:0	10	row_width
op	143:46	0:0	10	*
water	143:48	0:0	10	3
water	143:49	0:0	10	;
water	144:15	0:0	10	row_info
op	144:23	0:0	10	->
water	144:25	0:0	10	color_type
op	144:36	0:0	10	=
water	144:38	0:0	10	2
water	144:39	0:0	10	;
water	145:15	0:0	10	row_info
op	145:23	0:0	10	->
water	145:25	0:0	10	channels
op	145:34	0:0	10	=
water	145:36	0:0	10	3
water	145:37	0:0	10	;
water	146:12	0:0	10	}
water	147:9	0:0	8	}
water	148:6	0:0	8	}
water	149:3	0:0	4	}
