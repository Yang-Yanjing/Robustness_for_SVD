D:\postGraduate\code\function_representation_learning\Data\LibPNG\vulnerable_Files\vulnerable_functions\cve-2004-0597-2.c line 62:6 mismatched character '<EOF>' expecting '\n'
func	2:0	61:0	0	void	png_handle_sBIT
params	3:15	0:0	1	
param	3:16	3:35	2	png_structp	png_ptr
param	3:37	3:55	2	png_infop	info_ptr
param	3:57	3:75	2	png_uint_32	length
stmnts	0:0	60:55	1	
decl	5:3	5:21	2	png_size_t	truelen
decl	6:3	6:18	2	png_byte	buf[4]
call	8:3	8:38	2	png_debug
arg	8:13	8:14	3	1
water	8:13	0:0	4	1
arg	8:16	8:38	3	"in png_handle_sBIT\n"
water	8:16	0:0	4	"in png_handle_sBIT\n"
water	8:39	0:0	2	;
water	10:3	0:0	2	buf
op	10:6	0:0	2	[
water	10:7	0:0	2	0
op	10:8	0:0	2	]
op	10:10	0:0	2	=
water	10:12	0:0	2	buf
op	10:15	0:0	2	[
water	10:16	0:0	2	1
op	10:17	0:0	2	]
op	10:19	0:0	2	=
water	10:21	0:0	2	buf
op	10:24	0:0	2	[
water	10:25	0:0	2	2
op	10:26	0:0	2	]
op	10:28	0:0	2	=
water	10:30	0:0	2	buf
op	10:33	0:0	2	[
water	10:34	0:0	2	3
op	10:35	0:0	2	]
op	10:37	0:0	2	=
water	10:39	0:0	2	0
water	10:40	0:0	2	;
if	12:3	13:52	2	(! ( png_ptr -> mode & PNG_HAVE_IHDR ))
cond	12:7	12:38	3	! ( png_ptr -> mode & PNG_HAVE_IHDR )
op	12:7	0:0	4	!
water	12:8	0:0	4	(
water	12:9	0:0	4	png_ptr
op	12:16	0:0	4	->
water	12:18	0:0	4	mode
op	12:23	0:0	4	&
water	12:25	0:0	4	PNG_HAVE_IHDR
water	12:38	0:0	4	)
stmts	13:6	13:52	3	
call	13:6	13:51	4	png_error
arg	13:16	13:23	5	png_ptr
water	13:16	0:0	6	png_ptr
arg	13:25	13:51	5	"Missing IHDR before sBIT"
water	13:25	0:0	6	"Missing IHDR before sBIT"
water	13:52	0:0	4	;
else	14:3	19:3	2
stmts	14:8	19:3	3	
if	14:8	19:3	4	(png_ptr -> mode & PNG_HAVE_IDAT)
cond	14:12	14:28	5	png_ptr -> mode & PNG_HAVE_IDAT
water	14:12	0:0	6	png_ptr
op	14:19	0:0	6	->
water	14:21	0:0	6	mode
op	14:26	0:0	6	&
water	14:28	0:0	6	PNG_HAVE_IDAT
stmts	15:3	19:3	5	
water	15:3	0:0	6	{
call	16:6	16:52	6	png_warning
arg	16:18	16:25	7	png_ptr
water	16:18	0:0	8	png_ptr
arg	16:27	16:52	7	"Invalid sBIT after IDAT"
water	16:27	0:0	8	"Invalid sBIT after IDAT"
water	16:53	0:0	6	;
call	17:6	17:36	6	png_crc_finish
arg	17:21	17:28	7	png_ptr
water	17:21	0:0	8	png_ptr
arg	17:30	17:36	7	length
water	17:30	0:0	8	length
water	17:37	0:0	6	;
return	18:6	18:12	6	
water	19:3	0:0	6	}
else	20:3	24:3	2
stmts	20:8	24:3	3	
if	20:8	24:3	4	(png_ptr -> mode & PNG_HAVE_PLTE)
cond	20:12	20:28	5	png_ptr -> mode & PNG_HAVE_PLTE
water	20:12	0:0	6	png_ptr
op	20:19	0:0	6	->
water	20:21	0:0	6	mode
op	20:26	0:0	6	&
water	20:28	0:0	6	PNG_HAVE_PLTE
stmts	21:3	24:3	5	
water	21:3	0:0	6	{
call	23:6	23:52	6	png_warning
arg	23:18	23:25	7	png_ptr
water	23:18	0:0	8	png_ptr
arg	23:27	23:52	7	"Out of place sBIT chunk"
water	23:27	0:0	8	"Out of place sBIT chunk"
water	23:53	0:0	6	;
water	24:3	0:0	6	}
else	25:3	30:3	2
stmts	25:8	30:3	3	
if	25:8	30:3	4	(info_ptr != NULL && info_ptr -> valid & PNG_INFO_sBIT)
cond	25:12	25:50	5	info_ptr != NULL && info_ptr -> valid & PNG_INFO_sBIT
water	25:12	0:0	6	info_ptr
op	25:21	0:0	6	!=
water	25:24	0:0	6	NULL
op	25:29	0:0	6	&&
water	25:32	0:0	6	info_ptr
op	25:40	0:0	6	->
water	25:42	0:0	6	valid
op	25:48	0:0	6	&
water	25:50	0:0	6	PNG_INFO_sBIT
stmts	26:3	30:3	5	
water	26:3	0:0	6	{
call	27:6	27:49	6	png_warning
arg	27:18	27:25	7	png_ptr
water	27:18	0:0	8	png_ptr
arg	27:27	27:49	7	"Duplicate sBIT chunk"
water	27:27	0:0	8	"Duplicate sBIT chunk"
water	27:50	0:0	6	;
call	28:6	28:36	6	png_crc_finish
arg	28:21	28:28	7	png_ptr
water	28:21	0:0	8	png_ptr
arg	28:30	28:36	7	length
water	28:30	0:0	8	length
water	28:37	0:0	6	;
return	29:6	29:12	6	
water	30:3	0:0	6	}
if	32:3	33:17	2	(png_ptr -> color_type == PNG_COLOR_TYPE_PALETTE)
cond	32:7	32:30	3	png_ptr -> color_type == PNG_COLOR_TYPE_PALETTE
water	32:7	0:0	4	png_ptr
op	32:14	0:0	4	->
water	32:16	0:0	4	color_type
op	32:27	0:0	4	==
water	32:30	0:0	4	PNG_COLOR_TYPE_PALETTE
stmts	33:6	33:17	3	
water	33:6	0:0	4	truelen
op	33:14	0:0	4	=
water	33:16	0:0	4	3
water	33:17	0:0	4	;
else	34:3	35:45	2
stmts	35:6	35:45	3	
water	35:6	0:0	4	truelen
op	35:14	0:0	4	=
water	35:16	0:0	4	(
water	35:17	0:0	4	png_size_t
water	35:27	0:0	4	)
water	35:28	0:0	4	png_ptr
op	35:35	0:0	4	->
water	35:37	0:0	4	channels
water	35:45	0:0	4	;
if	37:3	42:3	2	(length != truelen)
cond	37:7	37:17	3	length != truelen
water	37:7	0:0	4	length
op	37:14	0:0	4	!=
water	37:17	0:0	4	truelen
stmts	38:3	42:3	3	
water	38:3	0:0	4	{
call	39:6	39:56	4	png_warning
arg	39:18	39:25	5	png_ptr
water	39:18	0:0	6	png_ptr
arg	39:27	39:56	5	"Incorrect sBIT chunk length"
water	39:27	0:0	6	"Incorrect sBIT chunk length"
water	39:57	0:0	4	;
call	40:6	40:36	4	png_crc_finish
arg	40:21	40:28	5	png_ptr
water	40:21	0:0	6	png_ptr
arg	40:30	40:36	5	length
water	40:30	0:0	6	length
water	40:37	0:0	4	;
return	41:6	41:12	4	
water	42:3	0:0	4	}
call	44:3	44:37	2	png_crc_read
arg	44:16	44:23	3	png_ptr
water	44:16	0:0	4	png_ptr
arg	44:25	44:28	3	buf
water	44:25	0:0	4	buf
arg	44:30	44:37	3	truelen
water	44:30	0:0	4	truelen
water	44:38	0:0	2	;
if	45:3	46:12	2	(png_crc_finish (png_ptr ,0 ))
cond	45:7	45:32	3	png_crc_finish (png_ptr ,0 )
call	45:7	45:32	4	png_crc_finish
arg	45:22	45:29	5	png_ptr
water	45:22	0:0	6	png_ptr
arg	45:31	45:32	5	0
water	45:31	0:0	6	0
stmts	46:6	46:12	3	
return	46:6	46:12	4	
if	48:3	54:3	2	(png_ptr -> color_type & PNG_COLOR_MASK_COLOR)
cond	48:7	48:29	3	png_ptr -> color_type & PNG_COLOR_MASK_COLOR
water	48:7	0:0	4	png_ptr
op	48:14	0:0	4	->
water	48:16	0:0	4	color_type
op	48:27	0:0	4	&
water	48:29	0:0	4	PNG_COLOR_MASK_COLOR
stmts	49:3	54:3	3	
water	49:3	0:0	4	{
water	50:6	0:0	4	png_ptr
op	50:13	0:0	4	->
water	50:15	0:0	4	sig_bit
op	50:22	0:0	4	.
water	50:23	0:0	4	red
op	50:27	0:0	4	=
water	50:29	0:0	4	buf
op	50:32	0:0	4	[
water	50:33	0:0	4	0
op	50:34	0:0	4	]
water	50:35	0:0	4	;
water	51:6	0:0	4	png_ptr
op	51:13	0:0	4	->
water	51:15	0:0	4	sig_bit
op	51:22	0:0	4	.
water	51:23	0:0	4	green
op	51:29	0:0	4	=
water	51:31	0:0	4	buf
op	51:34	0:0	4	[
water	51:35	0:0	4	1
op	51:36	0:0	4	]
water	51:37	0:0	4	;
water	52:6	0:0	4	png_ptr
op	52:13	0:0	4	->
water	52:15	0:0	4	sig_bit
op	52:22	0:0	4	.
water	52:23	0:0	4	blue
op	52:28	0:0	4	=
water	52:30	0:0	4	buf
op	52:33	0:0	4	[
water	52:34	0:0	4	2
op	52:35	0:0	4	]
water	52:36	0:0	4	;
water	53:6	0:0	4	png_ptr
op	53:13	0:0	4	->
water	53:15	0:0	4	sig_bit
op	53:22	0:0	4	.
water	53:23	0:0	4	alpha
op	53:29	0:0	4	=
water	53:31	0:0	4	buf
op	53:34	0:0	4	[
water	53:35	0:0	4	3
op	53:36	0:0	4	]
water	53:37	0:0	4	;
water	54:3	0:0	4	}
else	55:3	59:3	2
stmts	56:3	59:3	3	
water	56:3	0:0	4	{
water	57:6	0:0	4	png_ptr
op	57:13	0:0	4	->
water	57:15	0:0	4	sig_bit
op	57:22	0:0	4	.
water	57:23	0:0	4	gray
op	57:28	0:0	4	=
water	57:30	0:0	4	buf
op	57:33	0:0	4	[
water	57:34	0:0	4	0
op	57:35	0:0	4	]
water	57:36	0:0	4	;
water	58:6	0:0	4	png_ptr
op	58:13	0:0	4	->
water	58:15	0:0	4	sig_bit
op	58:22	0:0	4	.
water	58:23	0:0	4	alpha
op	58:29	0:0	4	=
water	58:31	0:0	4	buf
op	58:34	0:0	4	[
water	58:35	0:0	4	1
op	58:36	0:0	4	]
water	58:37	0:0	4	;
water	59:3	0:0	4	}
call	60:3	60:54	2	png_set_sBIT
arg	60:16	60:23	3	png_ptr
water	60:16	0:0	4	png_ptr
arg	60:25	60:33	3	info_ptr
water	60:25	0:0	4	info_ptr
arg	60:35	60:54	3	&(png_ptr->sig_bit)
op	60:35	0:0	4	&
water	60:36	0:0	4	(
water	60:37	0:0	4	png_ptr
op	60:44	0:0	4	->
water	60:46	0:0	4	sig_bit
water	60:53	0:0	4	)
water	60:55	0:0	2	;
