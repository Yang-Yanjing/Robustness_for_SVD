D:\postGraduate\code\function_representation_learning\Data\LibPNG\vulnerable_Files\vulnerable_functions\cve-2010-0205.c line 159:6 mismatched character '<EOF>' expecting '\n'
func	2:0	158:0	0	png_charp	png_decompress_chunk
params	3:20	0:0	1	
param	3:21	3:40	2	png_structp	png_ptr
param	3:42	3:55	2	int	comp_type
param	4:30	4:49	2	png_charp	chunkdata
param	4:51	4:73	2	png_size_t	chunklength
param	5:30	5:52	2	png_size_t	prefix_size
param	5:54	5:75	2	png_size_t *	newlength
stmnts	7:3	157:19	1	
water	7:3	0:0	2	static
water	7:10	0:0	2	char
water	7:15	0:0	2	msg
op	7:18	0:0	2	[
op	7:19	0:0	2	]
op	7:21	0:0	2	=
water	7:23	0:0	2	"Error decoding compressed text"
water	7:55	0:0	2	;
decl	8:3	8:17	2	png_charp	text
decl	9:3	9:23	2	png_size_t	text_size
if	11:3	141:3	2	(comp_type == PNG_COMPRESSION_TYPE_BASE)
cond	11:7	11:20	3	comp_type == PNG_COMPRESSION_TYPE_BASE
water	11:7	0:0	4	comp_type
op	11:17	0:0	4	==
water	11:20	0:0	4	PNG_COMPRESSION_TYPE_BASE
stmts	12:3	141:3	3	
water	12:3	0:0	4	{
decl	13:6	13:20	4	int	ret
op	13:14	0:0	4	=
water	13:16	0:0	4	Z_OK
water	14:6	0:0	4	png_ptr
op	14:13	0:0	4	->
water	14:15	0:0	4	zstream
op	14:22	0:0	4	.
water	14:23	0:0	4	next_in
op	14:31	0:0	4	=
call	14:33	14:68	4	(png_bytep)
arg	14:45	14:68	5	chunkdata+prefix_size
water	14:45	0:0	6	chunkdata
op	14:55	0:0	6	+
water	14:57	0:0	6	prefix_size
water	14:69	0:0	4	;
water	15:6	0:0	4	png_ptr
op	15:13	0:0	4	->
water	15:15	0:0	4	zstream
op	15:22	0:0	4	.
water	15:23	0:0	4	avail_in
op	15:32	0:0	4	=
call	15:34	15:66	4	(uInt)
arg	15:41	15:66	5	chunklength-prefix_size
water	15:41	0:0	6	chunklength
op	15:53	0:0	6	-
water	15:55	0:0	6	prefix_size
water	15:67	0:0	4	;
water	16:6	0:0	4	png_ptr
op	16:13	0:0	4	->
water	16:15	0:0	4	zstream
op	16:22	0:0	4	.
water	16:23	0:0	4	next_out
op	16:32	0:0	4	=
water	16:34	0:0	4	png_ptr
op	16:41	0:0	4	->
water	16:43	0:0	4	zbuf
water	16:47	0:0	4	;
water	17:6	0:0	4	png_ptr
op	17:13	0:0	4	->
water	17:15	0:0	4	zstream
op	17:22	0:0	4	.
water	17:23	0:0	4	avail_out
op	17:33	0:0	4	=
water	17:35	0:0	4	(
water	17:36	0:0	4	uInt
water	17:40	0:0	4	)
water	17:41	0:0	4	png_ptr
op	17:48	0:0	4	->
water	17:50	0:0	4	zbuf_size
water	17:59	0:0	4	;
water	19:6	0:0	4	text_size
op	19:16	0:0	4	=
water	19:18	0:0	4	0
water	19:19	0:0	4	;
water	20:6	0:0	4	text
op	20:11	0:0	4	=
water	20:13	0:0	4	NULL
water	20:17	0:0	4	;
while	22:6	101:6	4	(png_ptr -> zstream . avail_in)
cond	22:13	22:30	5	png_ptr -> zstream . avail_in
water	22:13	0:0	6	png_ptr
op	22:20	0:0	6	->
water	22:22	0:0	6	zstream
op	22:29	0:0	6	.
water	22:30	0:0	6	avail_in
stmts	23:6	101:6	5	
water	23:6	0:0	6	{
water	24:9	0:0	6	ret
op	24:13	0:0	6	=
call	24:15	24:57	6	inflate
arg	24:23	24:40	7	&png_ptr->zstream
op	24:23	0:0	8	&
water	24:24	0:0	8	png_ptr
op	24:31	0:0	8	->
water	24:33	0:0	8	zstream
arg	24:42	24:57	7	Z_PARTIAL_FLUSH
water	24:42	0:0	8	Z_PARTIAL_FLUSH
water	24:58	0:0	6	;
if	25:9	54:9	6	(ret != Z_OK && ret != Z_STREAM_END)
cond	25:13	25:35	7	ret != Z_OK && ret != Z_STREAM_END
water	25:13	0:0	8	ret
op	25:17	0:0	8	!=
water	25:20	0:0	8	Z_OK
op	25:25	0:0	8	&&
water	25:28	0:0	8	ret
op	25:32	0:0	8	!=
water	25:35	0:0	8	Z_STREAM_END
stmts	26:9	54:9	7	
water	26:9	0:0	8	{
if	27:12	28:57	8	(png_ptr -> zstream . msg != NULL)
cond	27:16	27:40	9	png_ptr -> zstream . msg != NULL
water	27:16	0:0	10	png_ptr
op	27:23	0:0	10	->
water	27:25	0:0	10	zstream
op	27:32	0:0	10	.
water	27:33	0:0	10	msg
op	27:37	0:0	10	!=
water	27:40	0:0	10	NULL
stmts	28:15	28:57	9	
call	28:15	28:56	10	png_warning
arg	28:27	28:34	11	png_ptr
water	28:27	0:0	12	png_ptr
arg	28:36	28:56	11	png_ptr->zstream.msg
water	28:36	0:0	12	png_ptr
op	28:43	0:0	12	->
water	28:45	0:0	12	zstream
op	28:52	0:0	12	.
water	28:53	0:0	12	msg
water	28:57	0:0	10	;
else	29:12	30:40	8
stmts	30:15	30:40	9	
call	30:15	30:39	10	png_warning
arg	30:27	30:34	11	png_ptr
water	30:27	0:0	12	png_ptr
arg	30:36	30:39	11	msg
water	30:36	0:0	12	msg
water	30:40	0:0	10	;
call	31:12	31:42	8	inflateReset
arg	31:25	31:42	9	&png_ptr->zstream
op	31:25	0:0	10	&
water	31:26	0:0	10	png_ptr
op	31:33	0:0	10	->
water	31:35	0:0	10	zstream
water	31:43	0:0	8	;
water	32:12	0:0	8	png_ptr
op	32:19	0:0	8	->
water	32:21	0:0	8	zstream
op	32:28	0:0	8	.
water	32:29	0:0	8	avail_in
op	32:38	0:0	8	=
water	32:40	0:0	8	0
water	32:41	0:0	8	;
if	34:12	44:12	8	(text == NULL)
cond	34:16	34:25	9	text == NULL
water	34:16	0:0	10	text
op	34:21	0:0	10	==
water	34:25	0:0	10	NULL
stmts	35:12	44:12	9	
water	35:12	0:0	10	{
water	36:15	0:0	10	text_size
op	36:25	0:0	10	=
water	36:27	0:0	10	prefix_size
op	36:39	0:0	10	+
call	36:41	36:55	10	png_sizeof
arg	36:52	36:55	11	msg
water	36:52	0:0	12	msg
op	36:57	0:0	10	+
water	36:59	0:0	10	1
water	36:60	0:0	10	;
water	37:15	0:0	10	text
op	37:20	0:0	10	=
water	37:22	0:0	10	(
water	37:23	0:0	10	png_charp
water	37:32	0:0	10	)
call	37:33	37:67	10	png_malloc_warn
arg	37:49	37:56	11	png_ptr
water	37:49	0:0	12	png_ptr
arg	37:58	37:67	11	text_size
water	37:58	0:0	12	text_size
water	37:68	0:0	10	;
if	38:15	42:17	10	(text == NULL)
cond	38:19	38:28	11	text == NULL
water	38:19	0:0	12	text
op	38:24	0:0	12	==
water	38:28	0:0	12	NULL
stmts	39:17	42:17	11	
water	39:17	0:0	12	{
call	40:20	40:46	12	png_free
arg	40:29	40:36	13	png_ptr
water	40:29	0:0	14	png_ptr
arg	40:37	40:46	13	chunkdata
water	40:37	0:0	14	chunkdata
water	40:47	0:0	12	;
call	41:20	41:77	12	png_error
arg	41:30	41:37	13	png_ptr
water	41:30	0:0	14	png_ptr
arg	41:38	41:77	13	"Not enough memory to decompress chunk"
water	41:38	0:0	14	"Not enough memory to decompress chunk"
water	41:78	0:0	12	;
water	42:17	0:0	12	}
call	43:15	43:54	10	png_memcpy
arg	43:26	43:30	11	text
water	43:26	0:0	12	text
arg	43:32	43:41	11	chunkdata
water	43:32	0:0	12	chunkdata
arg	43:43	43:54	11	prefix_size
water	43:43	0:0	12	prefix_size
water	43:55	0:0	10	;
water	44:12	0:0	10	}
water	46:12	0:0	8	text
op	46:16	0:0	8	[
water	46:17	0:0	8	text_size
op	46:27	0:0	8	-
water	46:29	0:0	8	1
op	46:30	0:0	8	]
op	46:32	0:0	8	=
water	46:34	0:0	8	0
water	46:35	0:0	8	x00
water	46:38	0:0	8	;
water	49:12	0:0	8	text_size
op	49:22	0:0	8	=
call	49:24	49:73	8	(png_size_t)
arg	49:37	49:73	9	chunklength-(text-chunkdata)-1
water	49:37	0:0	10	chunklength
op	49:49	0:0	10	-
water	49:51	0:0	10	(
water	49:52	0:0	10	text
op	49:57	0:0	10	-
water	49:59	0:0	10	chunkdata
water	49:68	0:0	10	)
op	49:70	0:0	10	-
water	49:72	0:0	10	1
water	49:74	0:0	8	;
water	50:12	0:0	8	text_size
op	50:22	0:0	8	=
call	50:24	50:38	8	png_sizeof
arg	50:35	50:38	9	msg
water	50:35	0:0	10	msg
op	50:40	0:0	8	>
water	50:42	0:0	8	text_size
water	50:52	0:0	8	?
water	50:54	0:0	8	text_size
water	50:64	0:0	8	:
call	51:15	51:29	8	png_sizeof
arg	51:26	51:29	9	msg
water	51:26	0:0	10	msg
water	51:30	0:0	8	;
call	52:12	52:61	8	png_memcpy
arg	52:23	52:41	9	text+prefix_size
water	52:23	0:0	10	text
op	52:28	0:0	10	+
water	52:30	0:0	10	prefix_size
arg	52:43	52:46	9	msg
water	52:43	0:0	10	msg
arg	52:48	52:61	9	text_size+1
water	52:48	0:0	10	text_size
op	52:58	0:0	10	+
water	52:60	0:0	10	1
water	52:62	0:0	8	;
break	53:12	53:17	8	
water	54:9	0:0	8	}
if	55:9	100:9	6	(! png_ptr -> zstream . avail_out || ret == Z_STREAM_END)
cond	55:13	55:51	7	! png_ptr -> zstream . avail_out || ret == Z_STREAM_END
op	55:13	0:0	8	!
water	55:14	0:0	8	png_ptr
op	55:21	0:0	8	->
water	55:23	0:0	8	zstream
op	55:30	0:0	8	.
water	55:31	0:0	8	avail_out
op	55:41	0:0	8	||
water	55:44	0:0	8	ret
op	55:48	0:0	8	==
water	55:51	0:0	8	Z_STREAM_END
stmts	56:9	100:9	7	
water	56:9	0:0	8	{
if	57:12	71:12	8	(text == NULL)
cond	57:16	57:24	9	text == NULL
water	57:16	0:0	10	text
op	57:21	0:0	10	==
water	57:24	0:0	10	NULL
stmts	58:12	71:12	9	
water	58:12	0:0	10	{
water	59:15	0:0	10	text_size
op	59:25	0:0	10	=
water	59:27	0:0	10	prefix_size
op	59:39	0:0	10	+
water	60:19	0:0	10	png_ptr
op	60:26	0:0	10	->
water	60:28	0:0	10	zbuf_size
op	60:38	0:0	10	-
water	60:40	0:0	10	png_ptr
op	60:47	0:0	10	->
water	60:49	0:0	10	zstream
op	60:56	0:0	10	.
water	60:57	0:0	10	avail_out
water	60:66	0:0	10	;
water	61:15	0:0	10	text
op	61:20	0:0	10	=
water	61:22	0:0	10	(
water	61:23	0:0	10	png_charp
water	61:32	0:0	10	)
call	61:33	61:71	10	png_malloc_warn
arg	61:49	61:56	11	png_ptr
water	61:49	0:0	12	png_ptr
arg	61:58	61:71	11	text_size+1
water	61:58	0:0	12	text_size
op	61:68	0:0	12	+
water	61:70	0:0	12	1
water	61:72	0:0	10	;
if	62:15	66:17	10	(text == NULL)
cond	62:19	62:28	11	text == NULL
water	62:19	0:0	12	text
op	62:24	0:0	12	==
water	62:28	0:0	12	NULL
stmts	63:17	66:17	11	
water	63:17	0:0	12	{
call	64:20	64:46	12	png_free
arg	64:29	64:36	13	png_ptr
water	64:29	0:0	14	png_ptr
arg	64:37	64:46	13	chunkdata
water	64:37	0:0	14	chunkdata
water	64:47	0:0	12	;
call	65:20	65:78	12	png_error
arg	65:30	65:37	13	png_ptr
water	65:30	0:0	14	png_ptr
arg	65:38	65:78	13	"Not enough memory to decompress chunk."
water	65:38	0:0	14	"Not enough memory to decompress chunk."
water	65:79	0:0	12	;
water	66:17	0:0	12	}
call	67:15	68:43	10	png_memcpy
arg	67:26	67:44	11	text+prefix_size
water	67:26	0:0	12	text
op	67:31	0:0	12	+
water	67:33	0:0	12	prefix_size
arg	67:46	67:59	11	png_ptr->zbuf
water	67:46	0:0	12	png_ptr
op	67:53	0:0	12	->
water	67:55	0:0	12	zbuf
arg	68:20	68:43	11	text_size-prefix_size
water	68:20	0:0	12	text_size
op	68:30	0:0	12	-
water	68:32	0:0	12	prefix_size
water	68:44	0:0	10	;
call	69:15	69:54	10	png_memcpy
arg	69:26	69:30	11	text
water	69:26	0:0	12	text
arg	69:32	69:41	11	chunkdata
water	69:32	0:0	12	chunkdata
arg	69:43	69:54	11	prefix_size
water	69:43	0:0	12	prefix_size
water	69:55	0:0	10	;
op	70:15	0:0	10	*
water	70:16	0:0	10	(
water	70:17	0:0	10	text
op	70:22	0:0	10	+
water	70:24	0:0	10	text_size
water	70:33	0:0	10	)
op	70:35	0:0	10	=
water	70:37	0:0	10	0
water	70:38	0:0	10	x00
water	70:41	0:0	10	;
water	71:12	0:0	10	}
else	72:12	92:12	8
stmts	73:12	92:12	9	
water	73:12	0:0	10	{
decl	74:15	74:28	10	png_charp	tmp
water	76:15	0:0	10	tmp
op	76:19	0:0	10	=
water	76:21	0:0	10	text
water	76:25	0:0	10	;
water	77:15	0:0	10	text
op	77:20	0:0	10	=
water	77:22	0:0	10	(
water	77:23	0:0	10	png_charp
water	77:32	0:0	10	)
call	77:33	79:70	10	png_malloc_warn
arg	77:49	77:56	11	png_ptr
water	77:49	0:0	12	png_ptr
arg	78:18	79:70	11	(png_uint_32)(text_size+png_ptr->zbuf_size-png_ptr->zstream.avail_out+1)
call	78:18	79:69	12	(png_uint_32)
arg	78:32	79:69	13	text_size+png_ptr->zbuf_size-png_ptr->zstream.avail_out+1
water	78:32	0:0	14	text_size
op	78:42	0:0	14	+
water	79:18	0:0	14	png_ptr
op	79:25	0:0	14	->
water	79:27	0:0	14	zbuf_size
op	79:37	0:0	14	-
water	79:39	0:0	14	png_ptr
op	79:46	0:0	14	->
water	79:48	0:0	14	zstream
op	79:55	0:0	14	.
water	79:56	0:0	14	avail_out
op	79:66	0:0	14	+
water	79:68	0:0	14	1
water	79:71	0:0	10	;
if	80:15	85:15	10	(text == NULL)
cond	80:19	80:27	11	text == NULL
water	80:19	0:0	12	text
op	80:24	0:0	12	==
water	80:27	0:0	12	NULL
stmts	81:15	85:15	11	
water	81:15	0:0	12	{
call	82:18	82:39	12	png_free
arg	82:27	82:34	13	png_ptr
water	82:27	0:0	14	png_ptr
arg	82:36	82:39	13	tmp
water	82:36	0:0	14	tmp
water	82:40	0:0	12	;
call	83:18	83:45	12	png_free
arg	83:27	83:34	13	png_ptr
water	83:27	0:0	14	png_ptr
arg	83:36	83:45	13	chunkdata
water	83:36	0:0	14	chunkdata
water	83:46	0:0	12	;
call	84:18	84:77	12	png_error
arg	84:28	84:35	13	png_ptr
water	84:28	0:0	14	png_ptr
arg	84:36	84:77	13	"Not enough memory to decompress chunk.."
water	84:36	0:0	14	"Not enough memory to decompress chunk.."
water	84:78	0:0	12	;
water	85:15	0:0	12	}
call	86:15	86:46	10	png_memcpy
arg	86:26	86:30	11	text
water	86:26	0:0	12	text
arg	86:32	86:35	11	tmp
water	86:32	0:0	12	tmp
arg	86:37	86:46	11	text_size
water	86:37	0:0	12	text_size
water	86:47	0:0	10	;
call	87:15	87:36	10	png_free
arg	87:24	87:31	11	png_ptr
water	87:24	0:0	12	png_ptr
arg	87:33	87:36	11	tmp
water	87:33	0:0	12	tmp
water	87:37	0:0	10	;
call	88:15	89:67	10	png_memcpy
arg	88:26	88:42	11	text+text_size
water	88:26	0:0	12	text
op	88:31	0:0	12	+
water	88:33	0:0	12	text_size
arg	88:44	88:57	11	png_ptr->zbuf
water	88:44	0:0	12	png_ptr
op	88:51	0:0	12	->
water	88:53	0:0	12	zbuf
arg	89:18	89:67	11	(png_ptr->zbuf_size-png_ptr->zstream.avail_out)
water	89:18	0:0	12	(
water	89:19	0:0	12	png_ptr
op	89:26	0:0	12	->
water	89:28	0:0	12	zbuf_size
op	89:38	0:0	12	-
water	89:40	0:0	12	png_ptr
op	89:47	0:0	12	->
water	89:49	0:0	12	zstream
op	89:56	0:0	12	.
water	89:57	0:0	12	avail_out
water	89:66	0:0	12	)
water	89:68	0:0	10	;
water	90:15	0:0	10	text_size
op	90:25	0:0	10	+=
water	90:28	0:0	10	png_ptr
op	90:35	0:0	10	->
water	90:37	0:0	10	zbuf_size
op	90:47	0:0	10	-
water	90:49	0:0	10	png_ptr
op	90:56	0:0	10	->
water	90:58	0:0	10	zstream
op	90:65	0:0	10	.
water	90:66	0:0	10	avail_out
water	90:75	0:0	10	;
op	91:15	0:0	10	*
water	91:16	0:0	10	(
water	91:17	0:0	10	text
op	91:22	0:0	10	+
water	91:24	0:0	10	text_size
water	91:33	0:0	10	)
op	91:35	0:0	10	=
water	91:37	0:0	10	0
water	91:38	0:0	10	x00
water	91:41	0:0	10	;
water	92:12	0:0	10	}
if	93:12	94:20	8	(ret == Z_STREAM_END)
cond	93:16	93:23	9	ret == Z_STREAM_END
water	93:16	0:0	10	ret
op	93:20	0:0	10	==
water	93:23	0:0	10	Z_STREAM_END
stmts	94:15	94:20	9	
break	94:15	94:20	10	
else	95:12	99:12	8
stmts	96:12	99:12	9	
water	96:12	0:0	10	{
water	97:15	0:0	10	png_ptr
op	97:22	0:0	10	->
water	97:24	0:0	10	zstream
op	97:31	0:0	10	.
water	97:32	0:0	10	next_out
op	97:41	0:0	10	=
water	97:43	0:0	10	png_ptr
op	97:50	0:0	10	->
water	97:52	0:0	10	zbuf
water	97:56	0:0	10	;
water	98:15	0:0	10	png_ptr
op	98:22	0:0	10	->
water	98:24	0:0	10	zstream
op	98:31	0:0	10	.
water	98:32	0:0	10	avail_out
op	98:42	0:0	10	=
water	98:44	0:0	10	(
water	98:45	0:0	10	uInt
water	98:49	0:0	10	)
water	98:50	0:0	10	png_ptr
op	98:57	0:0	10	->
water	98:59	0:0	10	zbuf_size
water	98:68	0:0	10	;
water	99:12	0:0	10	}
water	100:9	0:0	8	}
water	101:6	0:0	6	}
if	102:6	133:6	4	(ret != Z_STREAM_END)
cond	102:10	102:17	5	ret != Z_STREAM_END
water	102:10	0:0	6	ret
op	102:14	0:0	6	!=
water	102:17	0:0	6	Z_STREAM_END
stmts	103:6	133:6	5	
water	103:6	0:0	6	{
decl	105:9	105:22	6	char	umsg[50]
if	107:9	109:36	6	(ret == Z_BUF_ERROR)
cond	107:13	107:20	7	ret == Z_BUF_ERROR
water	107:13	0:0	8	ret
op	107:17	0:0	8	==
water	107:20	0:0	8	Z_BUF_ERROR
stmts	108:12	109:36	7	
call	108:12	109:35	8	sprintf
arg	108:20	108:24	9	umsg
water	108:20	0:0	10	umsg
arg	108:25	108:76	9	"Buffer error in compressed datastream in %s chunk"
water	108:25	0:0	10	"Buffer error in compressed datastream in %s chunk"
arg	109:16	109:35	9	png_ptr->chunk_name
water	109:16	0:0	10	png_ptr
op	109:23	0:0	10	->
water	109:25	0:0	10	chunk_name
water	109:36	0:0	8	;
else	110:9	112:36	6
stmts	110:14	112:36	7	
if	110:14	112:36	8	(ret == Z_DATA_ERROR)
cond	110:18	110:25	9	ret == Z_DATA_ERROR
water	110:18	0:0	10	ret
op	110:22	0:0	10	==
water	110:25	0:0	10	Z_DATA_ERROR
stmts	111:12	112:36	9	
call	111:12	112:35	10	sprintf
arg	111:20	111:24	11	umsg
water	111:20	0:0	12	umsg
arg	111:25	111:74	11	"Data error in compressed datastream in %s chunk"
water	111:25	0:0	12	"Data error in compressed datastream in %s chunk"
arg	112:16	112:35	11	png_ptr->chunk_name
water	112:16	0:0	12	png_ptr
op	112:23	0:0	12	->
water	112:25	0:0	12	chunk_name
water	112:36	0:0	10	;
else	113:9	115:36	6
stmts	114:12	115:36	7	
call	114:12	115:35	8	sprintf
arg	114:20	114:24	9	umsg
water	114:20	0:0	10	umsg
arg	114:25	114:71	9	"Incomplete compressed datastream in %s chunk"
water	114:25	0:0	10	"Incomplete compressed datastream in %s chunk"
arg	115:16	115:35	9	png_ptr->chunk_name
water	115:16	0:0	10	png_ptr
op	115:23	0:0	10	->
water	115:25	0:0	10	chunk_name
water	115:36	0:0	8	;
call	116:9	116:34	6	png_warning
arg	116:21	116:28	7	png_ptr
water	116:21	0:0	8	png_ptr
arg	116:30	116:34	7	umsg
water	116:30	0:0	8	umsg
water	116:35	0:0	6	;
call	118:9	119:71	6	png_warning
arg	118:21	118:28	7	png_ptr
water	118:21	0:0	8	png_ptr
arg	119:12	119:71	7	"Incomplete compressed datastream in chunk other than IDAT"
water	119:12	0:0	8	"Incomplete compressed datastream in chunk other than IDAT"
water	119:72	0:0	6	;
water	121:9	0:0	6	text_size
op	121:18	0:0	6	=
water	121:19	0:0	6	prefix_size
water	121:30	0:0	6	;
if	122:9	131:9	6	(text == NULL)
cond	122:13	122:22	7	text == NULL
water	122:13	0:0	8	text
op	122:18	0:0	8	==
water	122:22	0:0	8	NULL
stmts	123:9	131:9	7	
water	123:9	0:0	8	{
water	124:12	0:0	8	text
op	124:17	0:0	8	=
water	124:19	0:0	8	(
water	124:20	0:0	8	png_charp
water	124:29	0:0	8	)
call	124:30	124:66	8	png_malloc_warn
arg	124:46	124:53	9	png_ptr
water	124:46	0:0	10	png_ptr
arg	124:55	124:66	9	text_size+1
water	124:55	0:0	10	text_size
op	124:64	0:0	10	+
water	124:65	0:0	10	1
water	124:67	0:0	8	;
if	125:12	129:14	8	(text == NULL)
cond	125:16	125:24	9	text == NULL
water	125:16	0:0	10	text
op	125:21	0:0	10	==
water	125:24	0:0	10	NULL
stmts	126:14	129:14	9	
water	126:14	0:0	10	{
call	127:16	127:43	10	png_free
arg	127:25	127:32	11	png_ptr
water	127:25	0:0	12	png_ptr
arg	127:34	127:43	11	chunkdata
water	127:34	0:0	12	chunkdata
water	127:44	0:0	10	;
call	128:16	128:63	10	png_error
arg	128:26	128:33	11	png_ptr
water	128:26	0:0	12	png_ptr
arg	128:34	128:63	11	"Not enough memory for text."
water	128:34	0:0	12	"Not enough memory for text."
water	128:64	0:0	10	;
water	129:14	0:0	10	}
call	130:12	130:51	8	png_memcpy
arg	130:23	130:27	9	text
water	130:23	0:0	10	text
arg	130:29	130:38	9	chunkdata
water	130:29	0:0	10	chunkdata
arg	130:40	130:51	9	prefix_size
water	130:40	0:0	10	prefix_size
water	130:52	0:0	8	;
water	131:9	0:0	8	}
op	132:9	0:0	6	*
water	132:10	0:0	6	(
water	132:11	0:0	6	text
op	132:16	0:0	6	+
water	132:18	0:0	6	text_size
water	132:27	0:0	6	)
op	132:29	0:0	6	=
water	132:31	0:0	6	0
water	132:32	0:0	6	x00
water	132:35	0:0	6	;
water	133:6	0:0	6	}
call	135:6	135:36	4	inflateReset
arg	135:19	135:36	5	&png_ptr->zstream
op	135:19	0:0	6	&
water	135:20	0:0	6	png_ptr
op	135:27	0:0	6	->
water	135:29	0:0	6	zstream
water	135:37	0:0	4	;
water	136:6	0:0	4	png_ptr
op	136:13	0:0	4	->
water	136:15	0:0	4	zstream
op	136:22	0:0	4	.
water	136:23	0:0	4	avail_in
op	136:32	0:0	4	=
water	136:34	0:0	4	0
water	136:35	0:0	4	;
call	138:6	138:33	4	png_free
arg	138:15	138:22	5	png_ptr
water	138:15	0:0	6	png_ptr
arg	138:24	138:33	5	chunkdata
water	138:24	0:0	6	chunkdata
water	138:34	0:0	4	;
water	139:6	0:0	4	chunkdata
op	139:16	0:0	4	=
water	139:18	0:0	4	text
water	139:22	0:0	4	;
op	140:6	0:0	4	*
water	140:7	0:0	4	newlength
op	140:16	0:0	4	=
water	140:17	0:0	4	text_size
water	140:26	0:0	4	;
water	141:3	0:0	4	}
else	142:3	155:3	2
stmts	143:3	155:3	3	
water	143:3	0:0	4	{
decl	145:6	145:19	4	char	umsg[50]
call	147:6	147:65	4	sprintf
arg	147:14	147:18	5	umsg
water	147:14	0:0	6	umsg
arg	147:20	147:54	5	"Unknown zTXt compression type %d"
water	147:20	0:0	6	"Unknown zTXt compression type %d"
arg	147:56	147:65	5	comp_type
water	147:56	0:0	6	comp_type
water	147:66	0:0	4	;
call	148:6	148:31	4	png_warning
arg	148:18	148:25	5	png_ptr
water	148:18	0:0	6	png_ptr
arg	148:27	148:31	5	umsg
water	148:27	0:0	6	umsg
water	148:32	0:0	4	;
call	150:6	150:58	4	png_warning
arg	150:18	150:25	5	png_ptr
water	150:18	0:0	6	png_ptr
arg	150:27	150:58	5	"Unknown zTXt compression type"
water	150:27	0:0	6	"Unknown zTXt compression type"
water	150:59	0:0	4	;
op	153:6	0:0	4	*
water	153:7	0:0	4	(
water	153:8	0:0	4	chunkdata
op	153:18	0:0	4	+
water	153:20	0:0	4	prefix_size
water	153:31	0:0	4	)
op	153:33	0:0	4	=
water	153:35	0:0	4	0
water	153:36	0:0	4	x00
water	153:39	0:0	4	;
op	154:6	0:0	4	*
water	154:7	0:0	4	newlength
op	154:16	0:0	4	=
water	154:17	0:0	4	prefix_size
water	154:28	0:0	4	;
water	155:3	0:0	4	}
return	157:3	157:19	2	chunkdata
water	157:10	0:0	3	chunkdata
