D:\postGraduate\code\function_representation_learning\Data\LibPNG\vulnerable_Files\vulnerable_functions\cve-2007-5629-3.c line 106:6 mismatched character '<EOF>' expecting '\n'
func	2:0	105:0	0	void	png_handle_iTXt
params	3:15	0:0	1	
param	3:16	3:35	2	png_structp	png_ptr
param	3:37	3:55	2	png_infop	info_ptr
param	3:57	3:75	2	png_uint_32	length
stmnts	0:0	104:67	1	
decl	5:3	5:21	2	png_textp	text_ptr
decl	6:3	6:22	2	png_charp	chunkdata
decl	7:3	7:38	2	png_charp	key
water	7:16	0:0	2	,
decl	7:3	7:38	2	png_charp	lang
water	7:22	0:0	2	,
decl	7:3	7:38	2	png_charp	text
water	7:28	0:0	2	,
decl	7:3	7:38	2	png_charp	lang_key
decl	8:3	8:16	2	int	comp_flag
decl	9:3	9:20	2	int	comp_type
op	9:17	0:0	2	=
water	9:19	0:0	2	0
decl	10:3	10:10	2	int	ret
decl	11:3	11:43	2	png_size_t	slength
water	11:21	0:0	2	,
decl	11:3	11:43	2	png_size_t	prefix_len
water	11:33	0:0	2	,
decl	11:3	11:43	2	png_size_t	data_len
call	13:3	13:38	2	png_debug
arg	13:13	13:14	3	1
water	13:13	0:0	4	1
arg	13:16	13:38	3	"in png_handle_iTXt\n"
water	13:16	0:0	4	"in png_handle_iTXt\n"
water	13:39	0:0	2	;
if	15:3	16:52	2	(! ( png_ptr -> mode & PNG_HAVE_IHDR ))
cond	15:7	15:38	3	! ( png_ptr -> mode & PNG_HAVE_IHDR )
op	15:7	0:0	4	!
water	15:8	0:0	4	(
water	15:9	0:0	4	png_ptr
op	15:16	0:0	4	->
water	15:18	0:0	4	mode
op	15:23	0:0	4	&
water	15:25	0:0	4	PNG_HAVE_IHDR
water	15:38	0:0	4	)
stmts	16:6	16:52	3	
call	16:6	16:51	4	png_error
arg	16:16	16:23	5	png_ptr
water	16:16	0:0	6	png_ptr
arg	16:25	16:51	5	"Missing IHDR before iTXt"
water	16:25	0:0	6	"Missing IHDR before iTXt"
water	16:52	0:0	4	;
if	18:3	19:37	2	(png_ptr -> mode & PNG_HAVE_IDAT)
cond	18:7	18:23	3	png_ptr -> mode & PNG_HAVE_IDAT
water	18:7	0:0	4	png_ptr
op	18:14	0:0	4	->
water	18:16	0:0	4	mode
op	18:21	0:0	4	&
water	18:23	0:0	4	PNG_HAVE_IDAT
stmts	19:6	19:37	3	
water	19:6	0:0	4	png_ptr
op	19:13	0:0	4	->
water	19:15	0:0	4	mode
op	19:20	0:0	4	|=
water	19:23	0:0	4	PNG_AFTER_IDAT
water	19:37	0:0	4	;
if	24:3	29:3	2	(length > ( png_uint_32 ) 65535 L)
cond	24:7	24:34	3	length > ( png_uint_32 ) 65535 L
water	24:7	0:0	4	length
op	24:14	0:0	4	>
water	24:16	0:0	4	(
water	24:17	0:0	4	png_uint_32
water	24:28	0:0	4	)
water	24:29	0:0	4	65535
water	24:34	0:0	4	L
stmts	25:3	29:3	3	
water	25:3	0:0	4	{
call	26:5	26:64	4	png_warning
arg	26:17	26:24	5	png_ptr
water	26:17	0:0	6	png_ptr
arg	26:25	26:64	5	"iTXt chunk too large to fit in memory"
water	26:25	0:0	6	"iTXt chunk too large to fit in memory"
water	26:65	0:0	4	;
call	27:5	27:35	4	png_crc_finish
arg	27:20	27:27	5	png_ptr
water	27:20	0:0	6	png_ptr
arg	27:29	27:35	5	length
water	27:29	0:0	6	length
water	27:36	0:0	4	;
return	28:5	28:11	4	
water	29:3	0:0	4	}
water	32:3	0:0	2	chunkdata
op	32:13	0:0	2	=
water	32:15	0:0	2	(
water	32:16	0:0	2	png_charp
water	32:25	0:0	2	)
call	32:26	32:61	2	png_malloc_warn
arg	32:42	32:49	3	png_ptr
water	32:42	0:0	4	png_ptr
arg	32:51	32:61	3	length+1
water	32:51	0:0	4	length
op	32:58	0:0	4	+
water	32:60	0:0	4	1
water	32:62	0:0	2	;
if	33:3	37:3	2	(chunkdata == NULL)
cond	33:7	33:20	3	chunkdata == NULL
water	33:7	0:0	4	chunkdata
op	33:17	0:0	4	==
water	33:20	0:0	4	NULL
stmts	34:3	37:3	3	
water	34:3	0:0	4	{
call	35:5	35:60	4	png_warning
arg	35:17	35:24	5	png_ptr
water	35:17	0:0	6	png_ptr
arg	35:26	35:60	5	"No memory to process iTXt chunk."
water	35:26	0:0	6	"No memory to process iTXt chunk."
water	35:61	0:0	4	;
return	36:5	36:11	4	
water	37:3	0:0	4	}
water	38:3	0:0	2	slength
op	38:11	0:0	2	=
water	38:13	0:0	2	(
water	38:14	0:0	2	png_size_t
water	38:24	0:0	2	)
water	38:25	0:0	2	length
water	38:31	0:0	2	;
call	39:3	39:54	2	png_crc_read
arg	39:16	39:23	3	png_ptr
water	39:16	0:0	4	png_ptr
arg	39:25	39:45	3	(png_bytep)chunkdata
water	39:25	0:0	4	(
water	39:26	0:0	4	png_bytep
water	39:35	0:0	4	)
water	39:36	0:0	4	chunkdata
arg	39:47	39:54	3	slength
water	39:47	0:0	4	slength
water	39:55	0:0	2	;
if	40:3	44:3	2	(png_crc_finish (png_ptr ,0 ))
cond	40:7	40:32	3	png_crc_finish (png_ptr ,0 )
call	40:7	40:32	4	png_crc_finish
arg	40:22	40:29	5	png_ptr
water	40:22	0:0	6	png_ptr
arg	40:31	40:32	5	0
water	40:31	0:0	6	0
stmts	41:3	44:3	3	
water	41:3	0:0	4	{
call	42:6	42:33	4	png_free
arg	42:15	42:22	5	png_ptr
water	42:15	0:0	6	png_ptr
arg	42:24	42:33	5	chunkdata
water	42:24	0:0	6	chunkdata
water	42:34	0:0	4	;
return	43:6	43:12	4	
water	44:3	0:0	4	}
water	46:3	0:0	2	chunkdata
op	46:12	0:0	2	[
water	46:13	0:0	2	slength
op	46:20	0:0	2	]
op	46:22	0:0	2	=
water	46:24	0:0	2	0
water	46:25	0:0	2	x00
water	46:28	0:0	2	;
for	48:3	49:7	2	(lang = chunkdata ;* lang;lang ++)
forinit	48:8	48:24	3	lang = chunkdata ;
water	48:8	0:0	4	lang
op	48:13	0:0	4	=
water	48:15	0:0	4	chunkdata
water	48:24	0:0	4	;
cond	48:26	48:27	3	* lang
op	48:26	0:0	4	*
water	48:27	0:0	4	lang
forexpr	48:33	48:37	3	lang ++
water	48:33	0:0	4	lang
op	48:37	0:0	4	++
stmts	49:7	49:7	3	
water	49:7	0:0	4	;
water	50:3	0:0	2	lang
op	50:7	0:0	2	++
water	50:9	0:0	2	;
if	56:3	60:3	2	(lang >= chunkdata + slength)
cond	56:7	56:27	3	lang >= chunkdata + slength
water	56:7	0:0	4	lang
op	56:12	0:0	4	>=
water	56:15	0:0	4	chunkdata
op	56:25	0:0	4	+
water	56:27	0:0	4	slength
stmts	57:3	60:3	3	
water	57:3	0:0	4	{
water	58:6	0:0	4	comp_flag
op	58:16	0:0	4	=
water	58:18	0:0	4	PNG_TEXT_COMPRESSION_NONE
water	58:43	0:0	4	;
call	59:6	59:51	4	png_warning
arg	59:18	59:25	5	png_ptr
water	59:18	0:0	6	png_ptr
arg	59:27	59:51	5	"Zero length iTXt chunk"
water	59:27	0:0	6	"Zero length iTXt chunk"
water	59:52	0:0	4	;
water	60:3	0:0	4	}
else	61:3	65:3	2
stmts	62:3	65:3	3	
water	62:3	0:0	4	{
water	63:7	0:0	4	comp_flag
op	63:17	0:0	4	=
op	63:19	0:0	4	*
water	63:20	0:0	4	lang
op	63:24	0:0	4	++
water	63:26	0:0	4	;
water	64:7	0:0	4	comp_type
op	64:17	0:0	4	=
op	64:19	0:0	4	*
water	64:20	0:0	4	lang
op	64:24	0:0	4	++
water	64:26	0:0	4	;
water	65:3	0:0	4	}
for	67:3	68:7	2	(lang_key = lang ;* lang_key;lang_key ++)
forinit	67:8	67:23	3	lang_key = lang ;
water	67:8	0:0	4	lang_key
op	67:17	0:0	4	=
water	67:19	0:0	4	lang
water	67:23	0:0	4	;
cond	67:25	67:26	3	* lang_key
op	67:25	0:0	4	*
water	67:26	0:0	4	lang_key
forexpr	67:36	67:44	3	lang_key ++
water	67:36	0:0	4	lang_key
op	67:44	0:0	4	++
stmts	68:7	68:7	3	
water	68:7	0:0	4	;
water	69:3	0:0	2	lang_key
op	69:11	0:0	2	++
water	69:13	0:0	2	;
for	71:3	72:7	2	(text = lang_key ;* text;text ++)
forinit	71:8	71:23	3	text = lang_key ;
water	71:8	0:0	4	text
op	71:13	0:0	4	=
water	71:15	0:0	4	lang_key
water	71:23	0:0	4	;
cond	71:25	71:26	3	* text
op	71:25	0:0	4	*
water	71:26	0:0	4	text
forexpr	71:32	71:36	3	text ++
water	71:32	0:0	4	text
op	71:36	0:0	4	++
stmts	72:7	72:7	3	
water	72:7	0:0	4	;
water	73:3	0:0	2	text
op	73:7	0:0	2	++
water	73:9	0:0	2	;
water	75:3	0:0	2	prefix_len
op	75:14	0:0	2	=
water	75:16	0:0	2	text
op	75:21	0:0	2	-
water	75:23	0:0	2	chunkdata
water	75:32	0:0	2	;
water	77:3	0:0	2	key
op	77:6	0:0	2	=
water	77:7	0:0	2	chunkdata
water	77:16	0:0	2	;
if	78:3	80:48	2	(comp_flag)
cond	78:7	78:7	3	comp_flag
water	78:7	0:0	4	comp_flag
stmts	79:7	80:48	3	
water	79:7	0:0	4	chunkdata
op	79:17	0:0	4	=
call	79:19	80:47	4	png_decompress_chunk
arg	79:40	79:47	5	png_ptr
water	79:40	0:0	6	png_ptr
arg	79:49	79:58	5	comp_type
water	79:49	0:0	6	comp_type
arg	79:60	79:69	5	chunkdata
water	79:60	0:0	6	chunkdata
arg	80:10	80:24	5	(size_t)length
water	80:10	0:0	6	(
water	80:11	0:0	6	size_t
water	80:17	0:0	6	)
water	80:18	0:0	6	length
arg	80:26	80:36	5	prefix_len
water	80:26	0:0	6	prefix_len
arg	80:38	80:47	5	&data_len
op	80:38	0:0	6	&
water	80:39	0:0	6	data_len
water	80:48	0:0	4	;
else	81:3	82:50	2
stmts	82:7	82:50	3	
water	82:7	0:0	4	data_len
op	82:15	0:0	4	=
call	82:16	82:49	4	png_strlen
arg	82:27	82:49	5	chunkdata+prefix_len
water	82:27	0:0	6	chunkdata
op	82:37	0:0	6	+
water	82:39	0:0	6	prefix_len
water	82:50	0:0	4	;
water	83:3	0:0	2	text_ptr
op	83:12	0:0	2	=
water	83:14	0:0	2	(
water	83:15	0:0	2	png_textp
water	83:24	0:0	2	)
call	83:25	84:39	2	png_malloc_warn
arg	83:41	83:48	3	png_ptr
water	83:41	0:0	4	png_ptr
arg	84:6	84:39	3	(png_uint_32)png_sizeof(png_text)
water	84:6	0:0	4	(
water	84:7	0:0	4	png_uint_32
water	84:18	0:0	4	)
call	84:19	84:38	4	png_sizeof
arg	84:30	84:38	5	png_text
water	84:30	0:0	6	png_text
water	84:40	0:0	2	;
if	85:3	90:3	2	(text_ptr == NULL)
cond	85:7	85:19	3	text_ptr == NULL
water	85:7	0:0	4	text_ptr
op	85:16	0:0	4	==
water	85:19	0:0	4	NULL
stmts	86:3	90:3	3	
water	86:3	0:0	4	{
call	87:5	87:67	4	png_warning
arg	87:17	87:24	5	png_ptr
water	87:17	0:0	6	png_ptr
arg	87:25	87:67	5	"Not enough memory to process iTXt chunk."
water	87:25	0:0	6	"Not enough memory to process iTXt chunk."
water	87:68	0:0	4	;
call	88:5	88:32	4	png_free
arg	88:14	88:21	5	png_ptr
water	88:14	0:0	6	png_ptr
arg	88:23	88:32	5	chunkdata
water	88:23	0:0	6	chunkdata
water	88:33	0:0	4	;
return	89:5	89:11	4	
water	90:3	0:0	4	}
water	91:3	0:0	2	text_ptr
op	91:11	0:0	2	->
water	91:13	0:0	2	compression
op	91:25	0:0	2	=
water	91:27	0:0	2	(
water	91:28	0:0	2	int
water	91:31	0:0	2	)
water	91:32	0:0	2	comp_flag
op	91:42	0:0	2	+
water	91:44	0:0	2	1
water	91:45	0:0	2	;
water	92:3	0:0	2	text_ptr
op	92:11	0:0	2	->
water	92:13	0:0	2	lang_key
op	92:22	0:0	2	=
water	92:24	0:0	2	chunkdata
op	92:33	0:0	2	+
water	92:34	0:0	2	(
water	92:35	0:0	2	lang_key
op	92:43	0:0	2	-
water	92:44	0:0	2	key
water	92:47	0:0	2	)
water	92:48	0:0	2	;
water	93:3	0:0	2	text_ptr
op	93:11	0:0	2	->
water	93:13	0:0	2	lang
op	93:18	0:0	2	=
water	93:20	0:0	2	chunkdata
op	93:29	0:0	2	+
water	93:30	0:0	2	(
water	93:31	0:0	2	lang
op	93:35	0:0	2	-
water	93:36	0:0	2	key
water	93:39	0:0	2	)
water	93:40	0:0	2	;
water	94:3	0:0	2	text_ptr
op	94:11	0:0	2	->
water	94:13	0:0	2	itxt_length
op	94:25	0:0	2	=
water	94:27	0:0	2	data_len
water	94:35	0:0	2	;
water	95:3	0:0	2	text_ptr
op	95:11	0:0	2	->
water	95:13	0:0	2	text_length
op	95:25	0:0	2	=
water	95:27	0:0	2	0
water	95:28	0:0	2	;
water	96:3	0:0	2	text_ptr
op	96:11	0:0	2	->
water	96:13	0:0	2	key
op	96:17	0:0	2	=
water	96:19	0:0	2	chunkdata
water	96:28	0:0	2	;
water	97:3	0:0	2	text_ptr
op	97:11	0:0	2	->
water	97:13	0:0	2	text
op	97:18	0:0	2	=
water	97:20	0:0	2	chunkdata
op	97:30	0:0	2	+
water	97:32	0:0	2	prefix_len
water	97:42	0:0	2	;
water	99:3	0:0	2	ret
op	99:6	0:0	2	=
call	99:7	99:52	2	png_set_text_2
arg	99:22	99:29	3	png_ptr
water	99:22	0:0	4	png_ptr
arg	99:31	99:39	3	info_ptr
water	99:31	0:0	4	info_ptr
arg	99:41	99:49	3	text_ptr
water	99:41	0:0	4	text_ptr
arg	99:51	99:52	3	1
water	99:51	0:0	4	1
water	99:53	0:0	2	;
call	101:3	101:29	2	png_free
arg	101:12	101:19	3	png_ptr
water	101:12	0:0	4	png_ptr
arg	101:21	101:29	3	text_ptr
water	101:21	0:0	4	text_ptr
water	101:30	0:0	2	;
call	102:3	102:30	2	png_free
arg	102:12	102:19	3	png_ptr
water	102:12	0:0	4	png_ptr
arg	102:21	102:30	3	chunkdata
water	102:21	0:0	4	chunkdata
water	102:31	0:0	2	;
if	103:3	104:67	2	(ret)
cond	103:7	103:7	3	ret
water	103:7	0:0	4	ret
stmts	104:5	104:67	3	
call	104:5	104:66	4	png_error
arg	104:15	104:22	5	png_ptr
water	104:15	0:0	6	png_ptr
arg	104:24	104:66	5	"Insufficient memory to store iTXt chunk."
water	104:24	0:0	6	"Insufficient memory to store iTXt chunk."
water	104:67	0:0	4	;
