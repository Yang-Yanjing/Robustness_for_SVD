D:\postGraduate\code\function_representation_learning\Data\LibPNG\vulnerable_Files\vulnerable_functions\cve-2007-2445.c line 91:6 mismatched character '<EOF>' expecting '\n'
func	2:0	90:0	0	void	png_handle_tRNS
params	3:15	0:0	1	
param	3:16	3:35	2	png_structp	png_ptr
param	3:37	3:55	2	png_infop	info_ptr
param	3:57	3:75	2	png_uint_32	length
stmnts	0:0	89:31	1	
decl	5:3	5:43	2	png_byte	readbuf[PNG_MAX_PALETTE_LENGTH]
call	7:3	7:38	2	png_debug
arg	7:13	7:14	3	1
water	7:13	0:0	4	1
arg	7:16	7:38	3	"in png_handle_tRNS\n"
water	7:16	0:0	4	"in png_handle_tRNS\n"
water	7:39	0:0	2	;
if	9:3	10:52	2	(! ( png_ptr -> mode & PNG_HAVE_IHDR ))
cond	9:7	9:38	3	! ( png_ptr -> mode & PNG_HAVE_IHDR )
op	9:7	0:0	4	!
water	9:8	0:0	4	(
water	9:9	0:0	4	png_ptr
op	9:16	0:0	4	->
water	9:18	0:0	4	mode
op	9:23	0:0	4	&
water	9:25	0:0	4	PNG_HAVE_IHDR
water	9:38	0:0	4	)
stmts	10:6	10:52	3	
call	10:6	10:51	4	png_error
arg	10:16	10:23	5	png_ptr
water	10:16	0:0	6	png_ptr
arg	10:25	10:51	5	"Missing IHDR before tRNS"
water	10:25	0:0	6	"Missing IHDR before tRNS"
water	10:52	0:0	4	;
else	11:3	16:3	2
stmts	11:8	16:3	3	
if	11:8	16:3	4	(png_ptr -> mode & PNG_HAVE_IDAT)
cond	11:12	11:28	5	png_ptr -> mode & PNG_HAVE_IDAT
water	11:12	0:0	6	png_ptr
op	11:19	0:0	6	->
water	11:21	0:0	6	mode
op	11:26	0:0	6	&
water	11:28	0:0	6	PNG_HAVE_IDAT
stmts	12:3	16:3	5	
water	12:3	0:0	6	{
call	13:6	13:52	6	png_warning
arg	13:18	13:25	7	png_ptr
water	13:18	0:0	8	png_ptr
arg	13:27	13:52	7	"Invalid tRNS after IDAT"
water	13:27	0:0	8	"Invalid tRNS after IDAT"
water	13:53	0:0	6	;
call	14:6	14:36	6	png_crc_finish
arg	14:21	14:28	7	png_ptr
water	14:21	0:0	8	png_ptr
arg	14:30	14:36	7	length
water	14:30	0:0	8	length
water	14:37	0:0	6	;
return	15:6	15:12	6	
water	16:3	0:0	6	}
else	17:3	22:3	2
stmts	17:8	22:3	3	
if	17:8	22:3	4	(info_ptr != NULL && ( info_ptr -> valid & PNG_INFO_tRNS ))
cond	17:12	17:64	5	info_ptr != NULL && ( info_ptr -> valid & PNG_INFO_tRNS )
water	17:12	0:0	6	info_ptr
op	17:21	0:0	6	!=
water	17:24	0:0	6	NULL
op	17:29	0:0	6	&&
water	17:32	0:0	6	(
water	17:33	0:0	6	info_ptr
op	17:41	0:0	6	->
water	17:43	0:0	6	valid
op	17:49	0:0	6	&
water	17:51	0:0	6	PNG_INFO_tRNS
water	17:64	0:0	6	)
stmts	18:3	22:3	5	
water	18:3	0:0	6	{
call	19:6	19:49	6	png_warning
arg	19:18	19:25	7	png_ptr
water	19:18	0:0	8	png_ptr
arg	19:27	19:49	7	"Duplicate tRNS chunk"
water	19:27	0:0	8	"Duplicate tRNS chunk"
water	19:50	0:0	6	;
call	20:6	20:36	6	png_crc_finish
arg	20:21	20:28	7	png_ptr
water	20:21	0:0	8	png_ptr
arg	20:30	20:36	7	length
water	20:30	0:0	8	length
water	20:37	0:0	6	;
return	21:6	21:12	6	
water	22:3	0:0	6	}
if	24:3	38:3	2	(png_ptr -> color_type == PNG_COLOR_TYPE_GRAY)
cond	24:7	24:30	3	png_ptr -> color_type == PNG_COLOR_TYPE_GRAY
water	24:7	0:0	4	png_ptr
op	24:14	0:0	4	->
water	24:16	0:0	4	color_type
op	24:27	0:0	4	==
water	24:30	0:0	4	PNG_COLOR_TYPE_GRAY
stmts	25:3	38:3	3	
water	25:3	0:0	4	{
decl	26:6	26:21	4	png_byte	buf[2]
if	28:6	33:6	4	(length != 2)
cond	28:10	28:20	5	length != 2
water	28:10	0:0	6	length
op	28:17	0:0	6	!=
water	28:20	0:0	6	2
stmts	29:6	33:6	5	
water	29:6	0:0	6	{
call	30:9	30:59	6	png_warning
arg	30:21	30:28	7	png_ptr
water	30:21	0:0	8	png_ptr
arg	30:30	30:59	7	"Incorrect tRNS chunk length"
water	30:30	0:0	8	"Incorrect tRNS chunk length"
water	30:60	0:0	6	;
call	31:9	31:39	6	png_crc_finish
arg	31:24	31:31	7	png_ptr
water	31:24	0:0	8	png_ptr
arg	31:33	31:39	7	length
water	31:33	0:0	8	length
water	31:40	0:0	6	;
return	32:9	32:15	6	
water	33:6	0:0	6	}
call	35:6	35:34	4	png_crc_read
arg	35:19	35:26	5	png_ptr
water	35:19	0:0	6	png_ptr
arg	35:28	35:31	5	buf
water	35:28	0:0	6	buf
arg	35:33	35:34	5	2
water	35:33	0:0	6	2
water	35:35	0:0	4	;
water	36:6	0:0	4	png_ptr
op	36:13	0:0	4	->
water	36:15	0:0	4	num_trans
op	36:25	0:0	4	=
water	36:27	0:0	4	1
water	36:28	0:0	4	;
water	37:6	0:0	4	png_ptr
op	37:13	0:0	4	->
water	37:15	0:0	4	trans_values
op	37:27	0:0	4	.
water	37:28	0:0	4	gray
op	37:33	0:0	4	=
call	37:35	37:54	4	png_get_uint_16
arg	37:51	37:54	5	buf
water	37:51	0:0	6	buf
water	37:55	0:0	4	;
water	38:3	0:0	4	}
else	39:3	54:3	2
stmts	39:8	54:3	3	
if	39:8	54:3	4	(png_ptr -> color_type == PNG_COLOR_TYPE_RGB)
cond	39:12	39:35	5	png_ptr -> color_type == PNG_COLOR_TYPE_RGB
water	39:12	0:0	6	png_ptr
op	39:19	0:0	6	->
water	39:21	0:0	6	color_type
op	39:32	0:0	6	==
water	39:35	0:0	6	PNG_COLOR_TYPE_RGB
stmts	40:3	54:3	5	
water	40:3	0:0	6	{
decl	41:6	41:21	6	png_byte	buf[6]
if	43:6	48:6	6	(length != 6)
cond	43:10	43:20	7	length != 6
water	43:10	0:0	8	length
op	43:17	0:0	8	!=
water	43:20	0:0	8	6
stmts	44:6	48:6	7	
water	44:6	0:0	8	{
call	45:9	45:59	8	png_warning
arg	45:21	45:28	9	png_ptr
water	45:21	0:0	10	png_ptr
arg	45:30	45:59	9	"Incorrect tRNS chunk length"
water	45:30	0:0	10	"Incorrect tRNS chunk length"
water	45:60	0:0	8	;
call	46:9	46:39	8	png_crc_finish
arg	46:24	46:31	9	png_ptr
water	46:24	0:0	10	png_ptr
arg	46:33	46:39	9	length
water	46:33	0:0	10	length
water	46:40	0:0	8	;
return	47:9	47:15	8	
water	48:6	0:0	8	}
call	49:6	49:51	6	png_crc_read
arg	49:19	49:26	7	png_ptr
water	49:19	0:0	8	png_ptr
arg	49:28	49:31	7	buf
water	49:28	0:0	8	buf
arg	49:33	49:51	7	(png_size_t)length
water	49:33	0:0	8	(
water	49:34	0:0	8	png_size_t
water	49:44	0:0	8	)
water	49:45	0:0	8	length
water	49:52	0:0	6	;
water	50:6	0:0	6	png_ptr
op	50:13	0:0	6	->
water	50:15	0:0	6	num_trans
op	50:25	0:0	6	=
water	50:27	0:0	6	1
water	50:28	0:0	6	;
water	51:6	0:0	6	png_ptr
op	51:13	0:0	6	->
water	51:15	0:0	6	trans_values
op	51:27	0:0	6	.
water	51:28	0:0	6	red
op	51:32	0:0	6	=
call	51:34	51:53	6	png_get_uint_16
arg	51:50	51:53	7	buf
water	51:50	0:0	8	buf
water	51:54	0:0	6	;
water	52:6	0:0	6	png_ptr
op	52:13	0:0	6	->
water	52:15	0:0	6	trans_values
op	52:27	0:0	6	.
water	52:28	0:0	6	green
op	52:34	0:0	6	=
call	52:36	52:59	6	png_get_uint_16
arg	52:52	52:59	7	buf+2
water	52:52	0:0	8	buf
op	52:56	0:0	8	+
water	52:58	0:0	8	2
water	52:60	0:0	6	;
water	53:6	0:0	6	png_ptr
op	53:13	0:0	6	->
water	53:15	0:0	6	trans_values
op	53:27	0:0	6	.
water	53:28	0:0	6	blue
op	53:33	0:0	6	=
call	53:35	53:58	6	png_get_uint_16
arg	53:51	53:58	7	buf+4
water	53:51	0:0	8	buf
op	53:55	0:0	8	+
water	53:57	0:0	8	4
water	53:59	0:0	6	;
water	54:3	0:0	6	}
else	55:3	77:3	2
stmts	55:8	77:3	3	
if	55:8	77:3	4	(png_ptr -> color_type == PNG_COLOR_TYPE_PALETTE)
cond	55:12	55:35	5	png_ptr -> color_type == PNG_COLOR_TYPE_PALETTE
water	55:12	0:0	6	png_ptr
op	55:19	0:0	6	->
water	55:21	0:0	6	color_type
op	55:32	0:0	6	==
water	55:35	0:0	6	PNG_COLOR_TYPE_PALETTE
stmts	56:3	77:3	5	
water	56:3	0:0	6	{
if	57:6	61:6	6	(! ( png_ptr -> mode & PNG_HAVE_PLTE ))
cond	57:10	57:41	7	! ( png_ptr -> mode & PNG_HAVE_PLTE )
op	57:10	0:0	8	!
water	57:11	0:0	8	(
water	57:12	0:0	8	png_ptr
op	57:19	0:0	8	->
water	57:21	0:0	8	mode
op	57:26	0:0	8	&
water	57:28	0:0	8	PNG_HAVE_PLTE
water	57:41	0:0	8	)
stmts	58:6	61:6	7	
water	58:6	0:0	8	{
call	60:9	60:56	8	png_warning
arg	60:21	60:28	9	png_ptr
water	60:21	0:0	10	png_ptr
arg	60:30	60:56	9	"Missing PLTE before tRNS"
water	60:30	0:0	10	"Missing PLTE before tRNS"
water	60:57	0:0	8	;
water	61:6	0:0	8	}
if	62:6	68:6	6	(length > ( png_uint_32 ) png_ptr -> num_palette || length > PNG_MAX_PALETTE_LENGTH)
cond	62:10	63:19	7	length > ( png_uint_32 ) png_ptr -> num_palette || length > PNG_MAX_PALETTE_LENGTH
water	62:10	0:0	8	length
op	62:17	0:0	8	>
water	62:19	0:0	8	(
water	62:20	0:0	8	png_uint_32
water	62:31	0:0	8	)
water	62:32	0:0	8	png_ptr
op	62:39	0:0	8	->
water	62:41	0:0	8	num_palette
op	62:53	0:0	8	||
water	63:10	0:0	8	length
op	63:17	0:0	8	>
water	63:19	0:0	8	PNG_MAX_PALETTE_LENGTH
stmts	64:6	68:6	7	
water	64:6	0:0	8	{
call	65:9	65:59	8	png_warning
arg	65:21	65:28	9	png_ptr
water	65:21	0:0	10	png_ptr
arg	65:30	65:59	9	"Incorrect tRNS chunk length"
water	65:30	0:0	10	"Incorrect tRNS chunk length"
water	65:60	0:0	8	;
call	66:9	66:39	8	png_crc_finish
arg	66:24	66:31	9	png_ptr
water	66:24	0:0	10	png_ptr
arg	66:33	66:39	9	length
water	66:33	0:0	10	length
water	66:40	0:0	8	;
return	67:9	67:15	8	
water	68:6	0:0	8	}
if	69:6	74:6	6	(length == 0)
cond	69:10	69:20	7	length == 0
water	69:10	0:0	8	length
op	69:17	0:0	8	==
water	69:20	0:0	8	0
stmts	70:6	74:6	7	
water	70:6	0:0	8	{
call	71:9	71:54	8	png_warning
arg	71:21	71:28	9	png_ptr
water	71:21	0:0	10	png_ptr
arg	71:30	71:54	9	"Zero length tRNS chunk"
water	71:30	0:0	10	"Zero length tRNS chunk"
water	71:55	0:0	8	;
call	72:9	72:39	8	png_crc_finish
arg	72:24	72:31	9	png_ptr
water	72:24	0:0	10	png_ptr
arg	72:33	72:39	9	length
water	72:33	0:0	10	length
water	72:40	0:0	8	;
return	73:9	73:15	8	
water	74:6	0:0	8	}
call	75:6	75:55	6	png_crc_read
arg	75:19	75:26	7	png_ptr
water	75:19	0:0	8	png_ptr
arg	75:28	75:35	7	readbuf
water	75:28	0:0	8	readbuf
arg	75:37	75:55	7	(png_size_t)length
water	75:37	0:0	8	(
water	75:38	0:0	8	png_size_t
water	75:48	0:0	8	)
water	75:49	0:0	8	length
water	75:56	0:0	6	;
water	76:6	0:0	6	png_ptr
op	76:13	0:0	6	->
water	76:15	0:0	6	num_trans
op	76:25	0:0	6	=
water	76:27	0:0	6	(
water	76:28	0:0	6	png_uint_16
water	76:39	0:0	6	)
water	76:40	0:0	6	length
water	76:46	0:0	6	;
water	77:3	0:0	6	}
else	78:3	83:3	2
stmts	79:3	83:3	3	
water	79:3	0:0	4	{
call	80:6	80:70	4	png_warning
arg	80:18	80:25	5	png_ptr
water	80:18	0:0	6	png_ptr
arg	80:27	80:70	5	"tRNS chunk not allowed with alpha channel"
water	80:27	0:0	6	"tRNS chunk not allowed with alpha channel"
water	80:71	0:0	4	;
call	81:6	81:36	4	png_crc_finish
arg	81:21	81:28	5	png_ptr
water	81:21	0:0	6	png_ptr
arg	81:30	81:36	5	length
water	81:30	0:0	6	length
water	81:37	0:0	4	;
return	82:6	82:12	4	
water	83:3	0:0	4	}
if	85:3	86:12	2	(png_crc_finish (png_ptr ,0 ))
cond	85:7	85:32	3	png_crc_finish (png_ptr ,0 )
call	85:7	85:32	4	png_crc_finish
arg	85:22	85:29	5	png_ptr
water	85:22	0:0	6	png_ptr
arg	85:31	85:32	5	0
water	85:31	0:0	6	0
stmts	86:6	86:12	3	
return	86:6	86:12	4	
call	88:3	89:30	2	png_set_tRNS
arg	88:16	88:23	3	png_ptr
water	88:16	0:0	4	png_ptr
arg	88:25	88:33	3	info_ptr
water	88:25	0:0	4	info_ptr
arg	88:35	88:42	3	readbuf
water	88:35	0:0	4	readbuf
arg	88:44	88:62	3	png_ptr->num_trans
water	88:44	0:0	4	png_ptr
op	88:51	0:0	4	->
water	88:53	0:0	4	num_trans
arg	89:6	89:30	3	&(png_ptr->trans_values)
op	89:6	0:0	4	&
water	89:7	0:0	4	(
water	89:8	0:0	4	png_ptr
op	89:15	0:0	4	->
water	89:17	0:0	4	trans_values
water	89:29	0:0	4	)
water	89:31	0:0	2	;
