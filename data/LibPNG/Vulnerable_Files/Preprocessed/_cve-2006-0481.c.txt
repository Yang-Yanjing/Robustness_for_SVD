func	2:0	149:0	0	void	png_do_strip_filler
params	3:19	0:0	1	
param	3:20	3:42	2	png_row_infop	row_info
param	3:44	3:57	2	png_bytep	row
param	3:59	3:76	2	png_uint_32	flags
stmnts	5:3	148:3	1	
call	5:3	5:42	2	png_debug
arg	5:13	5:14	3	1
water	5:13	0:0	4	1
arg	5:16	5:42	3	"in png_do_strip_filler\n"
water	5:16	0:0	4	"in png_do_strip_filler\n"
water	5:43	0:0	2	;
if	7:3	148:3	2	(row != NULL && row_info != NULL)
cond	7:7	7:34	3	row != NULL && row_info != NULL
water	7:7	0:0	4	row
op	7:11	0:0	4	!=
water	7:14	0:0	4	NULL
op	7:19	0:0	4	&&
water	7:22	0:0	4	row_info
op	7:31	0:0	4	!=
water	7:34	0:0	4	NULL
stmts	9:3	148:3	3	
water	9:3	0:0	4	{
decl	10:6	10:22	4	png_bytep	sp
op	10:18	0:0	4	=
water	10:19	0:0	4	row
decl	11:6	11:22	4	png_bytep	dp
op	11:18	0:0	4	=
water	11:19	0:0	4	row
decl	12:6	12:43	4	png_uint_32	row_width
op	12:27	0:0	4	=
water	12:28	0:0	4	row_info
op	12:36	0:0	4	->
water	12:38	0:0	4	width
decl	13:6	13:19	4	png_uint_32	i
if	15:6	93:6	4	(row_info -> color_type == PNG_COLOR_TYPE_RGB && row_info -> channels == 4)
cond	15:10	16:31	5	row_info -> color_type == PNG_COLOR_TYPE_RGB && row_info -> channels == 4
water	15:10	0:0	6	row_info
op	15:18	0:0	6	->
water	15:20	0:0	6	color_type
op	15:31	0:0	6	==
water	15:34	0:0	6	PNG_COLOR_TYPE_RGB
op	15:53	0:0	6	&&
water	16:9	0:0	6	row_info
op	16:17	0:0	6	->
water	16:19	0:0	6	channels
op	16:28	0:0	6	==
water	16:31	0:0	6	4
stmts	17:6	93:6	5	
water	17:6	0:0	6	{
if	18:9	45:9	6	(row_info -> bit_depth == 8)
cond	18:13	18:36	7	row_info -> bit_depth == 8
water	18:13	0:0	8	row_info
op	18:21	0:0	8	->
water	18:23	0:0	8	bit_depth
op	18:33	0:0	8	==
water	18:36	0:0	8	8
stmts	19:9	45:9	7	
water	19:9	0:0	8	{
if	21:12	31:12	8	(flags & PNG_FLAG_FILLER_AFTER)
cond	21:16	21:24	9	flags & PNG_FLAG_FILLER_AFTER
water	21:16	0:0	10	flags
op	21:22	0:0	10	&
water	21:24	0:0	10	PNG_FLAG_FILLER_AFTER
stmts	22:12	31:12	9	
water	22:12	0:0	10	{
water	23:15	0:0	10	dp
op	23:17	0:0	10	+=
water	23:19	0:0	10	3
water	23:20	0:0	10	;
water	23:22	0:0	10	sp
op	23:24	0:0	10	+=
water	23:26	0:0	10	4
water	23:27	0:0	10	;
for	24:15	30:15	10	(i = 1 ;i < row_width;i ++)
forinit	24:20	24:25	11	i = 1 ;
water	24:20	0:0	12	i
op	24:22	0:0	12	=
water	24:24	0:0	12	1
water	24:25	0:0	12	;
cond	24:27	24:31	11	i < row_width
water	24:27	0:0	12	i
op	24:29	0:0	12	<
water	24:31	0:0	12	row_width
forexpr	24:42	24:43	11	i ++
water	24:42	0:0	12	i
op	24:43	0:0	12	++
stmts	25:15	30:15	11	
water	25:15	0:0	12	{
op	26:18	0:0	12	*
water	26:19	0:0	12	dp
op	26:21	0:0	12	++
op	26:24	0:0	12	=
op	26:26	0:0	12	*
water	26:27	0:0	12	sp
op	26:29	0:0	12	++
water	26:31	0:0	12	;
op	27:18	0:0	12	*
water	27:19	0:0	12	dp
op	27:21	0:0	12	++
op	27:24	0:0	12	=
op	27:26	0:0	12	*
water	27:27	0:0	12	sp
op	27:29	0:0	12	++
water	27:31	0:0	12	;
op	28:18	0:0	12	*
water	28:19	0:0	12	dp
op	28:21	0:0	12	++
op	28:24	0:0	12	=
op	28:26	0:0	12	*
water	28:27	0:0	12	sp
op	28:29	0:0	12	++
water	28:31	0:0	12	;
water	29:18	0:0	12	sp
op	29:20	0:0	12	++
water	29:22	0:0	12	;
water	30:15	0:0	12	}
water	31:12	0:0	10	}
else	33:12	42:12	8
stmts	34:12	42:12	9	
water	34:12	0:0	10	{
for	35:15	41:15	10	(i = 0 ;i < row_width;i ++)
forinit	35:20	35:25	11	i = 0 ;
water	35:20	0:0	12	i
op	35:22	0:0	12	=
water	35:24	0:0	12	0
water	35:25	0:0	12	;
cond	35:27	35:31	11	i < row_width
water	35:27	0:0	12	i
op	35:29	0:0	12	<
water	35:31	0:0	12	row_width
forexpr	35:42	35:43	11	i ++
water	35:42	0:0	12	i
op	35:43	0:0	12	++
stmts	36:15	41:15	11	
water	36:15	0:0	12	{
water	37:18	0:0	12	sp
op	37:20	0:0	12	++
water	37:22	0:0	12	;
op	38:18	0:0	12	*
water	38:19	0:0	12	dp
op	38:21	0:0	12	++
op	38:24	0:0	12	=
op	38:26	0:0	12	*
water	38:27	0:0	12	sp
op	38:29	0:0	12	++
water	38:31	0:0	12	;
op	39:18	0:0	12	*
water	39:19	0:0	12	dp
op	39:21	0:0	12	++
op	39:24	0:0	12	=
op	39:26	0:0	12	*
water	39:27	0:0	12	sp
op	39:29	0:0	12	++
water	39:31	0:0	12	;
op	40:18	0:0	12	*
water	40:19	0:0	12	dp
op	40:21	0:0	12	++
op	40:24	0:0	12	=
op	40:26	0:0	12	*
water	40:27	0:0	12	sp
op	40:29	0:0	12	++
water	40:31	0:0	12	;
water	41:15	0:0	12	}
water	42:12	0:0	10	}
water	43:12	0:0	8	row_info
op	43:20	0:0	8	->
water	43:22	0:0	8	pixel_depth
op	43:34	0:0	8	=
water	43:36	0:0	8	24
water	43:38	0:0	8	;
water	44:12	0:0	8	row_info
op	44:20	0:0	8	->
water	44:22	0:0	8	rowbytes
op	44:31	0:0	8	=
water	44:33	0:0	8	row_width
op	44:43	0:0	8	*
water	44:45	0:0	8	3
water	44:46	0:0	8	;
water	45:9	0:0	8	}
else	46:9	91:9	6
stmts	47:9	91:9	7	
water	47:9	0:0	8	{
if	48:12	68:12	8	(flags & PNG_FLAG_FILLER_AFTER)
cond	48:16	48:24	9	flags & PNG_FLAG_FILLER_AFTER
water	48:16	0:0	10	flags
op	48:22	0:0	10	&
water	48:24	0:0	10	PNG_FLAG_FILLER_AFTER
stmts	49:12	68:12	9	
water	49:12	0:0	10	{
water	51:15	0:0	10	sp
op	51:18	0:0	10	+=
water	51:21	0:0	10	8
water	51:22	0:0	10	;
water	51:24	0:0	10	dp
op	51:27	0:0	10	+=
water	51:30	0:0	10	6
water	51:31	0:0	10	;
for	52:15	67:15	10	(i = 1 ;i < row_width;i ++)
forinit	52:20	52:25	11	i = 1 ;
water	52:20	0:0	12	i
op	52:22	0:0	12	=
water	52:24	0:0	12	1
water	52:25	0:0	12	;
cond	52:27	52:31	11	i < row_width
water	52:27	0:0	12	i
op	52:29	0:0	12	<
water	52:31	0:0	12	row_width
forexpr	52:42	52:43	11	i ++
water	52:42	0:0	12	i
op	52:43	0:0	12	++
stmts	53:15	67:15	11	
water	53:15	0:0	12	{
op	60:18	0:0	12	*
water	60:19	0:0	12	dp
op	60:21	0:0	12	++
op	60:24	0:0	12	=
op	60:26	0:0	12	*
water	60:27	0:0	12	sp
op	60:29	0:0	12	++
water	60:31	0:0	12	;
op	61:18	0:0	12	*
water	61:19	0:0	12	dp
op	61:21	0:0	12	++
op	61:24	0:0	12	=
op	61:26	0:0	12	*
water	61:27	0:0	12	sp
op	61:29	0:0	12	++
water	61:31	0:0	12	;
op	62:18	0:0	12	*
water	62:19	0:0	12	dp
op	62:21	0:0	12	++
op	62:24	0:0	12	=
op	62:26	0:0	12	*
water	62:27	0:0	12	sp
op	62:29	0:0	12	++
water	62:31	0:0	12	;
op	63:18	0:0	12	*
water	63:19	0:0	12	dp
op	63:21	0:0	12	++
op	63:24	0:0	12	=
op	63:26	0:0	12	*
water	63:27	0:0	12	sp
op	63:29	0:0	12	++
water	63:31	0:0	12	;
op	64:18	0:0	12	*
water	64:19	0:0	12	dp
op	64:21	0:0	12	++
op	64:24	0:0	12	=
op	64:26	0:0	12	*
water	64:27	0:0	12	sp
op	64:29	0:0	12	++
water	64:31	0:0	12	;
op	65:18	0:0	12	*
water	65:19	0:0	12	dp
op	65:21	0:0	12	++
op	65:24	0:0	12	=
op	65:26	0:0	12	*
water	65:27	0:0	12	sp
op	65:29	0:0	12	++
water	65:31	0:0	12	;
water	66:18	0:0	12	sp
op	66:21	0:0	12	+=
water	66:24	0:0	12	2
water	66:25	0:0	12	;
water	67:15	0:0	12	}
water	68:12	0:0	10	}
else	69:12	88:12	8
stmts	70:12	88:12	9	
water	70:12	0:0	10	{
for	72:15	87:15	10	(i = 0 ;i < row_width;i ++)
forinit	72:20	72:25	11	i = 0 ;
water	72:20	0:0	12	i
op	72:22	0:0	12	=
water	72:24	0:0	12	0
water	72:25	0:0	12	;
cond	72:27	72:31	11	i < row_width
water	72:27	0:0	12	i
op	72:29	0:0	12	<
water	72:31	0:0	12	row_width
forexpr	72:42	72:43	11	i ++
water	72:42	0:0	12	i
op	72:43	0:0	12	++
stmts	73:15	87:15	11	
water	73:15	0:0	12	{
water	80:18	0:0	12	sp
op	80:20	0:0	12	+=
water	80:22	0:0	12	2
water	80:23	0:0	12	;
op	81:18	0:0	12	*
water	81:19	0:0	12	dp
op	81:21	0:0	12	++
op	81:24	0:0	12	=
op	81:26	0:0	12	*
water	81:27	0:0	12	sp
op	81:29	0:0	12	++
water	81:31	0:0	12	;
op	82:18	0:0	12	*
water	82:19	0:0	12	dp
op	82:21	0:0	12	++
op	82:24	0:0	12	=
op	82:26	0:0	12	*
water	82:27	0:0	12	sp
op	82:29	0:0	12	++
water	82:31	0:0	12	;
op	83:18	0:0	12	*
water	83:19	0:0	12	dp
op	83:21	0:0	12	++
op	83:24	0:0	12	=
op	83:26	0:0	12	*
water	83:27	0:0	12	sp
op	83:29	0:0	12	++
water	83:31	0:0	12	;
op	84:18	0:0	12	*
water	84:19	0:0	12	dp
op	84:21	0:0	12	++
op	84:24	0:0	12	=
op	84:26	0:0	12	*
water	84:27	0:0	12	sp
op	84:29	0:0	12	++
water	84:31	0:0	12	;
op	85:18	0:0	12	*
water	85:19	0:0	12	dp
op	85:21	0:0	12	++
op	85:24	0:0	12	=
op	85:26	0:0	12	*
water	85:27	0:0	12	sp
op	85:29	0:0	12	++
water	85:31	0:0	12	;
op	86:18	0:0	12	*
water	86:19	0:0	12	dp
op	86:21	0:0	12	++
op	86:24	0:0	12	=
op	86:26	0:0	12	*
water	86:27	0:0	12	sp
op	86:29	0:0	12	++
water	86:31	0:0	12	;
water	87:15	0:0	12	}
water	88:12	0:0	10	}
water	89:12	0:0	8	row_info
op	89:20	0:0	8	->
water	89:22	0:0	8	pixel_depth
op	89:34	0:0	8	=
water	89:36	0:0	8	48
water	89:38	0:0	8	;
water	90:12	0:0	8	row_info
op	90:20	0:0	8	->
water	90:22	0:0	8	rowbytes
op	90:31	0:0	8	=
water	90:33	0:0	8	row_width
op	90:43	0:0	8	*
water	90:45	0:0	8	6
water	90:46	0:0	8	;
water	91:9	0:0	8	}
water	92:9	0:0	6	row_info
op	92:17	0:0	6	->
water	92:19	0:0	6	channels
op	92:28	0:0	6	=
water	92:30	0:0	6	3
water	92:31	0:0	6	;
water	93:6	0:0	6	}
else	94:6	147:6	4
stmts	94:11	147:6	5	
if	94:11	147:6	6	(row_info -> color_type == PNG_COLOR_TYPE_GRAY && row_info -> channels == 2)
cond	94:15	95:32	7	row_info -> color_type == PNG_COLOR_TYPE_GRAY && row_info -> channels == 2
water	94:15	0:0	8	row_info
op	94:23	0:0	8	->
water	94:25	0:0	8	color_type
op	94:36	0:0	8	==
water	94:39	0:0	8	PNG_COLOR_TYPE_GRAY
op	94:59	0:0	8	&&
water	95:10	0:0	8	row_info
op	95:18	0:0	8	->
water	95:20	0:0	8	channels
op	95:29	0:0	8	==
water	95:32	0:0	8	2
stmts	96:6	147:6	7	
water	96:6	0:0	8	{
if	97:9	119:9	8	(row_info -> bit_depth == 8)
cond	97:13	97:36	9	row_info -> bit_depth == 8
water	97:13	0:0	10	row_info
op	97:21	0:0	10	->
water	97:23	0:0	10	bit_depth
op	97:33	0:0	10	==
water	97:36	0:0	10	8
stmts	98:9	119:9	9	
water	98:9	0:0	10	{
if	100:12	107:12	10	(flags & PNG_FLAG_FILLER_AFTER)
cond	100:16	100:24	11	flags & PNG_FLAG_FILLER_AFTER
water	100:16	0:0	12	flags
op	100:22	0:0	12	&
water	100:24	0:0	12	PNG_FLAG_FILLER_AFTER
stmts	101:12	107:12	11	
water	101:12	0:0	12	{
for	102:15	106:15	12	(i = 0 ;i < row_width;i ++)
forinit	102:20	102:25	13	i = 0 ;
water	102:20	0:0	14	i
op	102:22	0:0	14	=
water	102:24	0:0	14	0
water	102:25	0:0	14	;
cond	102:27	102:31	13	i < row_width
water	102:27	0:0	14	i
op	102:29	0:0	14	<
water	102:31	0:0	14	row_width
forexpr	102:42	102:43	13	i ++
water	102:42	0:0	14	i
op	102:43	0:0	14	++
stmts	103:15	106:15	13	
water	103:15	0:0	14	{
op	104:18	0:0	14	*
water	104:19	0:0	14	dp
op	104:21	0:0	14	++
op	104:24	0:0	14	=
op	104:26	0:0	14	*
water	104:27	0:0	14	sp
op	104:29	0:0	14	++
water	104:31	0:0	14	;
water	105:18	0:0	14	sp
op	105:20	0:0	14	++
water	105:22	0:0	14	;
water	106:15	0:0	14	}
water	107:12	0:0	12	}
else	109:12	116:12	10
stmts	110:12	116:12	11	
water	110:12	0:0	12	{
for	111:15	115:15	12	(i = 0 ;i < row_width;i ++)
forinit	111:20	111:25	13	i = 0 ;
water	111:20	0:0	14	i
op	111:22	0:0	14	=
water	111:24	0:0	14	0
water	111:25	0:0	14	;
cond	111:27	111:31	13	i < row_width
water	111:27	0:0	14	i
op	111:29	0:0	14	<
water	111:31	0:0	14	row_width
forexpr	111:42	111:43	13	i ++
water	111:42	0:0	14	i
op	111:43	0:0	14	++
stmts	112:15	115:15	13	
water	112:15	0:0	14	{
water	113:18	0:0	14	sp
op	113:20	0:0	14	++
water	113:22	0:0	14	;
op	114:18	0:0	14	*
water	114:19	0:0	14	dp
op	114:21	0:0	14	++
op	114:24	0:0	14	=
op	114:26	0:0	14	*
water	114:27	0:0	14	sp
op	114:29	0:0	14	++
water	114:31	0:0	14	;
water	115:15	0:0	14	}
water	116:12	0:0	12	}
water	117:12	0:0	10	row_info
op	117:20	0:0	10	->
water	117:22	0:0	10	pixel_depth
op	117:34	0:0	10	=
water	117:36	0:0	10	8
water	117:37	0:0	10	;
water	118:12	0:0	10	row_info
op	118:20	0:0	10	->
water	118:22	0:0	10	rowbytes
op	118:31	0:0	10	=
water	118:33	0:0	10	row_width
water	118:42	0:0	10	;
water	119:9	0:0	10	}
else	120:9	145:9	8
stmts	121:9	145:9	9	
water	121:9	0:0	10	{
if	122:12	132:12	10	(flags & PNG_FLAG_FILLER_AFTER)
cond	122:16	122:24	11	flags & PNG_FLAG_FILLER_AFTER
water	122:16	0:0	12	flags
op	122:22	0:0	12	&
water	122:24	0:0	12	PNG_FLAG_FILLER_AFTER
stmts	123:12	132:12	11	
water	123:12	0:0	12	{
water	125:15	0:0	12	sp
op	125:18	0:0	12	+=
water	125:21	0:0	12	4
water	125:22	0:0	12	;
water	125:24	0:0	12	dp
op	125:27	0:0	12	+=
water	125:30	0:0	12	2
water	125:31	0:0	12	;
for	126:15	131:15	12	(i = 1 ;i < row_width;i ++)
forinit	126:20	126:25	13	i = 1 ;
water	126:20	0:0	14	i
op	126:22	0:0	14	=
water	126:24	0:0	14	1
water	126:25	0:0	14	;
cond	126:27	126:31	13	i < row_width
water	126:27	0:0	14	i
op	126:29	0:0	14	<
water	126:31	0:0	14	row_width
forexpr	126:42	126:43	13	i ++
water	126:42	0:0	14	i
op	126:43	0:0	14	++
stmts	127:15	131:15	13	
water	127:15	0:0	14	{
op	128:18	0:0	14	*
water	128:19	0:0	14	dp
op	128:21	0:0	14	++
op	128:24	0:0	14	=
op	128:26	0:0	14	*
water	128:27	0:0	14	sp
op	128:29	0:0	14	++
water	128:31	0:0	14	;
op	129:18	0:0	14	*
water	129:19	0:0	14	dp
op	129:21	0:0	14	++
op	129:24	0:0	14	=
op	129:26	0:0	14	*
water	129:27	0:0	14	sp
op	129:29	0:0	14	++
water	129:31	0:0	14	;
water	130:18	0:0	14	sp
op	130:21	0:0	14	+=
water	130:24	0:0	14	2
water	130:25	0:0	14	;
water	131:15	0:0	14	}
water	132:12	0:0	12	}
else	133:12	142:12	10
stmts	134:12	142:12	11	
water	134:12	0:0	12	{
for	136:15	141:15	12	(i = 0 ;i < row_width;i ++)
forinit	136:20	136:25	13	i = 0 ;
water	136:20	0:0	14	i
op	136:22	0:0	14	=
water	136:24	0:0	14	0
water	136:25	0:0	14	;
cond	136:27	136:31	13	i < row_width
water	136:27	0:0	14	i
op	136:29	0:0	14	<
water	136:31	0:0	14	row_width
forexpr	136:42	136:43	13	i ++
water	136:42	0:0	14	i
op	136:43	0:0	14	++
stmts	137:15	141:15	13	
water	137:15	0:0	14	{
water	138:18	0:0	14	sp
op	138:21	0:0	14	+=
water	138:24	0:0	14	2
water	138:25	0:0	14	;
op	139:18	0:0	14	*
water	139:19	0:0	14	dp
op	139:21	0:0	14	++
op	139:24	0:0	14	=
op	139:26	0:0	14	*
water	139:27	0:0	14	sp
op	139:29	0:0	14	++
water	139:31	0:0	14	;
op	140:18	0:0	14	*
water	140:19	0:0	14	dp
op	140:21	0:0	14	++
op	140:24	0:0	14	=
op	140:26	0:0	14	*
water	140:27	0:0	14	sp
op	140:29	0:0	14	++
water	140:31	0:0	14	;
water	141:15	0:0	14	}
water	142:12	0:0	12	}
water	143:12	0:0	10	row_info
op	143:20	0:0	10	->
water	143:22	0:0	10	pixel_depth
op	143:34	0:0	10	=
water	143:36	0:0	10	16
water	143:38	0:0	10	;
water	144:12	0:0	10	row_info
op	144:20	0:0	10	->
water	144:22	0:0	10	rowbytes
op	144:31	0:0	10	=
water	144:33	0:0	10	row_width
op	144:43	0:0	10	*
water	144:45	0:0	10	2
water	144:46	0:0	10	;
water	145:9	0:0	10	}
water	146:9	0:0	8	row_info
op	146:17	0:0	8	->
water	146:19	0:0	8	channels
op	146:28	0:0	8	=
water	146:30	0:0	8	1
water	146:31	0:0	8	;
water	147:6	0:0	8	}
water	148:3	0:0	4	}
