D:\postGraduate\code\function_representation_learning\Data\LibPNG\vulnerable_Files\vulnerable_functions\cve-2004-0599-1.c line 139:7 mismatched character '<EOF>' expecting '\n'
func	2:0	138:0	0	void	png_handle_sPLT
params	3:15	0:0	1	
param	3:16	3:35	2	png_structp	png_ptr
param	3:37	3:55	2	png_infop	info_ptr
param	3:57	3:75	2	png_uint_32	length
stmnts	0:0	137:41	1	
decl	6:3	6:22	2	png_bytep	chunkdata
decl	7:3	7:24	2	png_bytep	entry_start
decl	8:3	8:25	2	png_sPLT_t	new_palette
decl	10:3	10:21	2	png_sPLT_entryp	pp
decl	12:3	12:33	2	int	data_length
water	12:18	0:0	2	,
decl	12:3	12:33	2	int	entry_size
water	12:30	0:0	2	,
decl	12:3	12:33	2	int	i
decl	13:3	13:23	2	png_uint_32	skip
op	13:20	0:0	2	=
water	13:22	0:0	2	0
decl	14:3	14:21	2	png_size_t	slength
call	16:3	16:38	2	png_debug
arg	16:13	16:14	3	1
water	16:13	0:0	4	1
arg	16:16	16:38	3	"in png_handle_sPLT\n"
water	16:16	0:0	4	"in png_handle_sPLT\n"
water	16:39	0:0	2	;
if	18:3	19:52	2	(! ( png_ptr -> mode & PNG_HAVE_IHDR ))
cond	18:7	18:38	3	! ( png_ptr -> mode & PNG_HAVE_IHDR )
op	18:7	0:0	4	!
water	18:8	0:0	4	(
water	18:9	0:0	4	png_ptr
op	18:16	0:0	4	->
water	18:18	0:0	4	mode
op	18:23	0:0	4	&
water	18:25	0:0	4	PNG_HAVE_IHDR
water	18:38	0:0	4	)
stmts	19:6	19:52	3	
call	19:6	19:51	4	png_error
arg	19:16	19:23	5	png_ptr
water	19:16	0:0	6	png_ptr
arg	19:25	19:51	5	"Missing IHDR before sPLT"
water	19:25	0:0	6	"Missing IHDR before sPLT"
water	19:52	0:0	4	;
else	20:3	25:3	2
stmts	20:8	25:3	3	
if	20:8	25:3	4	(png_ptr -> mode & PNG_HAVE_IDAT)
cond	20:12	20:28	5	png_ptr -> mode & PNG_HAVE_IDAT
water	20:12	0:0	6	png_ptr
op	20:19	0:0	6	->
water	20:21	0:0	6	mode
op	20:26	0:0	6	&
water	20:28	0:0	6	PNG_HAVE_IDAT
stmts	21:3	25:3	5	
water	21:3	0:0	6	{
call	22:6	22:52	6	png_warning
arg	22:18	22:25	7	png_ptr
water	22:18	0:0	8	png_ptr
arg	22:27	22:52	7	"Invalid sPLT after IDAT"
water	22:27	0:0	8	"Invalid sPLT after IDAT"
water	22:53	0:0	6	;
call	23:6	23:36	6	png_crc_finish
arg	23:21	23:28	7	png_ptr
water	23:21	0:0	8	png_ptr
arg	23:30	23:36	7	length
water	23:30	0:0	8	length
water	23:37	0:0	6	;
return	24:6	24:12	6	
water	25:3	0:0	6	}
if	28:3	33:3	2	(length > ( png_uint_32 ) 65535 L)
cond	28:7	28:34	3	length > ( png_uint_32 ) 65535 L
water	28:7	0:0	4	length
op	28:14	0:0	4	>
water	28:16	0:0	4	(
water	28:17	0:0	4	png_uint_32
water	28:28	0:0	4	)
water	28:29	0:0	4	65535
water	28:34	0:0	4	L
stmts	29:3	33:3	3	
water	29:3	0:0	4	{
call	30:6	30:66	4	png_warning
arg	30:18	30:25	5	png_ptr
water	30:18	0:0	6	png_ptr
arg	30:27	30:66	5	"sPLT chunk too large to fit in memory"
water	30:27	0:0	6	"sPLT chunk too large to fit in memory"
water	30:67	0:0	4	;
water	31:6	0:0	4	skip
op	31:11	0:0	4	=
water	31:13	0:0	4	length
op	31:20	0:0	4	-
water	31:22	0:0	4	(
water	31:23	0:0	4	png_uint_32
water	31:34	0:0	4	)
water	31:35	0:0	4	65535
water	31:40	0:0	4	L
water	31:41	0:0	4	;
water	32:6	0:0	4	length
op	32:13	0:0	4	=
water	32:15	0:0	4	(
water	32:16	0:0	4	png_uint_32
water	32:27	0:0	4	)
water	32:28	0:0	4	65535
water	32:33	0:0	4	L
water	32:34	0:0	4	;
water	33:3	0:0	4	}
water	36:3	0:0	2	chunkdata
op	36:13	0:0	2	=
water	36:15	0:0	2	(
water	36:16	0:0	2	png_bytep
water	36:25	0:0	2	)
call	36:26	36:56	2	png_malloc
arg	36:37	36:44	3	png_ptr
water	36:37	0:0	4	png_ptr
arg	36:46	36:56	3	length+1
water	36:46	0:0	4	length
op	36:53	0:0	4	+
water	36:55	0:0	4	1
water	36:57	0:0	2	;
water	37:3	0:0	2	slength
op	37:11	0:0	2	=
water	37:13	0:0	2	(
water	37:14	0:0	2	png_size_t
water	37:24	0:0	2	)
water	37:25	0:0	2	length
water	37:31	0:0	2	;
call	38:3	38:54	2	png_crc_read
arg	38:16	38:23	3	png_ptr
water	38:16	0:0	4	png_ptr
arg	38:25	38:45	3	(png_bytep)chunkdata
water	38:25	0:0	4	(
water	38:26	0:0	4	png_bytep
water	38:35	0:0	4	)
water	38:36	0:0	4	chunkdata
arg	38:47	38:54	3	slength
water	38:47	0:0	4	slength
water	38:55	0:0	2	;
if	40:3	44:3	2	(png_crc_finish (png_ptr ,skip ))
cond	40:7	40:35	3	png_crc_finish (png_ptr ,skip )
call	40:7	40:35	4	png_crc_finish
arg	40:22	40:29	5	png_ptr
water	40:22	0:0	6	png_ptr
arg	40:31	40:35	5	skip
water	40:31	0:0	6	skip
stmts	41:3	44:3	3	
water	41:3	0:0	4	{
call	42:6	42:33	4	png_free
arg	42:15	42:22	5	png_ptr
water	42:15	0:0	6	png_ptr
arg	42:24	42:33	5	chunkdata
water	42:24	0:0	6	chunkdata
water	42:34	0:0	4	;
return	43:6	43:12	4	
water	44:3	0:0	4	}
water	46:3	0:0	2	chunkdata
op	46:12	0:0	2	[
water	46:13	0:0	2	slength
op	46:20	0:0	2	]
op	46:22	0:0	2	=
water	46:24	0:0	2	0
water	46:25	0:0	2	x00
water	46:28	0:0	2	;
for	48:3	49:7	2	(entry_start = chunkdata ;* entry_start;entry_start ++)
forinit	48:8	48:31	3	entry_start = chunkdata ;
water	48:8	0:0	4	entry_start
op	48:20	0:0	4	=
water	48:22	0:0	4	chunkdata
water	48:31	0:0	4	;
cond	48:33	48:34	3	* entry_start
op	48:33	0:0	4	*
water	48:34	0:0	4	entry_start
forexpr	48:47	48:58	3	entry_start ++
water	48:47	0:0	4	entry_start
op	48:58	0:0	4	++
stmts	49:7	49:7	3	
water	49:7	0:0	4	;
op	50:3	0:0	2	++
water	50:5	0:0	2	entry_start
water	50:16	0:0	2	;
if	53:3	58:3	2	(entry_start > chunkdata + slength - 2)
cond	53:7	53:43	3	entry_start > chunkdata + slength - 2
water	53:7	0:0	4	entry_start
op	53:19	0:0	4	>
water	53:21	0:0	4	chunkdata
op	53:31	0:0	4	+
water	53:33	0:0	4	slength
op	53:41	0:0	4	-
water	53:43	0:0	4	2
stmts	54:3	58:3	3	
water	54:3	0:0	4	{
call	55:6	55:33	4	png_free
arg	55:15	55:22	5	png_ptr
water	55:15	0:0	6	png_ptr
arg	55:24	55:33	5	chunkdata
water	55:24	0:0	6	chunkdata
water	55:34	0:0	4	;
call	56:6	56:49	4	png_warning
arg	56:18	56:25	5	png_ptr
water	56:18	0:0	6	png_ptr
arg	56:27	56:49	5	"malformed sPLT chunk"
water	56:27	0:0	6	"malformed sPLT chunk"
water	56:50	0:0	4	;
return	57:6	57:12	4	
water	58:3	0:0	4	}
water	60:3	0:0	2	new_palette
op	60:14	0:0	2	.
water	60:15	0:0	2	depth
op	60:21	0:0	2	=
op	60:23	0:0	2	*
water	60:24	0:0	2	entry_start
op	60:35	0:0	2	++
water	60:37	0:0	2	;
water	61:3	0:0	2	entry_size
op	61:14	0:0	2	=
water	61:16	0:0	2	(
water	61:17	0:0	2	new_palette
op	61:28	0:0	2	.
water	61:29	0:0	2	depth
op	61:35	0:0	2	==
water	61:38	0:0	2	8
water	61:40	0:0	2	?
water	61:42	0:0	2	6
water	61:44	0:0	2	:
water	61:46	0:0	2	10
water	61:48	0:0	2	)
water	61:49	0:0	2	;
water	62:3	0:0	2	data_length
op	62:15	0:0	2	=
water	62:17	0:0	2	(
water	62:18	0:0	2	slength
op	62:26	0:0	2	-
water	62:28	0:0	2	(
water	62:29	0:0	2	entry_start
op	62:41	0:0	2	-
water	62:43	0:0	2	chunkdata
water	62:52	0:0	2	)
water	62:53	0:0	2	)
water	62:54	0:0	2	;
if	65:3	70:3	2	(data_length % entry_size)
cond	65:7	65:21	3	data_length % entry_size
water	65:7	0:0	4	data_length
op	65:19	0:0	4	%
water	65:21	0:0	4	entry_size
stmts	66:3	70:3	3	
water	66:3	0:0	4	{
call	67:6	67:33	4	png_free
arg	67:15	67:22	5	png_ptr
water	67:15	0:0	6	png_ptr
arg	67:24	67:33	5	chunkdata
water	67:24	0:0	6	chunkdata
water	67:34	0:0	4	;
call	68:6	68:54	4	png_warning
arg	68:18	68:25	5	png_ptr
water	68:18	0:0	6	png_ptr
arg	68:27	68:54	5	"sPLT chunk has bad length"
water	68:27	0:0	6	"sPLT chunk has bad length"
water	68:55	0:0	4	;
return	69:6	69:12	4	
water	70:3	0:0	4	}
water	72:3	0:0	2	new_palette
op	72:14	0:0	2	.
water	72:15	0:0	2	nentries
op	72:24	0:0	2	=
call	72:26	72:65	2	(png_int_32)
arg	72:41	72:65	3	data_length/entry_size
water	72:41	0:0	4	data_length
op	72:53	0:0	4	/
water	72:55	0:0	4	entry_size
water	72:66	0:0	2	;
if	73:3	78:3	2	(( png_uint_32 ) new_palette . nentries >( png_uint_32 ) (PNG_SIZE_MAX /png_sizeof (png_sPLT_entry ) ))
cond	73:7	74:33	3	( png_uint_32 ) new_palette . nentries >( png_uint_32 ) (PNG_SIZE_MAX /png_sizeof (png_sPLT_entry ) )
water	73:7	0:0	4	(
water	73:8	0:0	4	png_uint_32
water	73:19	0:0	4	)
water	73:21	0:0	4	new_palette
op	73:32	0:0	4	.
water	73:33	0:0	4	nentries
op	73:42	0:0	4	>
call	73:44	74:33	4	(png_uint_32)
arg	73:59	74:33	5	PNG_SIZE_MAX/png_sizeof(png_sPLT_entry)
water	73:59	0:0	6	PNG_SIZE_MAX
op	73:72	0:0	6	/
call	74:7	74:32	6	png_sizeof
arg	74:18	74:32	7	png_sPLT_entry
water	74:18	0:0	8	png_sPLT_entry
stmts	75:3	78:3	3	
water	75:3	0:0	4	{
call	76:7	76:49	4	png_warning
arg	76:19	76:26	5	png_ptr
water	76:19	0:0	6	png_ptr
arg	76:28	76:49	5	"sPLT chunk too long"
water	76:28	0:0	6	"sPLT chunk too long"
water	76:50	0:0	4	;
return	77:7	77:13	4	
water	78:3	0:0	4	}
water	79:3	0:0	2	new_palette
op	79:14	0:0	2	.
water	79:15	0:0	2	entries
op	79:23	0:0	2	=
water	79:25	0:0	2	(
water	79:26	0:0	2	png_sPLT_entryp
water	79:41	0:0	2	)
call	79:42	80:65	2	png_malloc_warn
arg	80:7	80:14	3	png_ptr
water	80:7	0:0	4	png_ptr
arg	80:16	80:65	3	new_palette.nentries*png_sizeof(png_sPLT_entry)
water	80:16	0:0	4	new_palette
op	80:27	0:0	4	.
water	80:28	0:0	4	nentries
call	80:37	80:64	4	*png_sizeof
arg	80:50	80:64	5	png_sPLT_entry
water	80:50	0:0	6	png_sPLT_entry
water	80:66	0:0	2	;
if	81:3	85:3	2	(new_palette . entries == NULL)
cond	81:7	81:30	3	new_palette . entries == NULL
water	81:7	0:0	4	new_palette
op	81:18	0:0	4	.
water	81:19	0:0	4	entries
op	81:27	0:0	4	==
water	81:30	0:0	4	NULL
stmts	82:3	85:3	3	
water	82:3	0:0	4	{
call	83:7	83:65	4	png_warning
arg	83:19	83:26	5	png_ptr
water	83:19	0:0	6	png_ptr
arg	83:28	83:65	5	"sPLT chunk requires too much memory"
water	83:28	0:0	6	"sPLT chunk requires too much memory"
water	83:66	0:0	4	;
return	84:7	84:13	4	
water	85:3	0:0	4	}
for	88:3	107:3	2	(i = 0 ;i < new_palette . nentries;i ++)
forinit	88:8	88:13	3	i = 0 ;
water	88:8	0:0	4	i
op	88:10	0:0	4	=
water	88:12	0:0	4	0
water	88:13	0:0	4	;
cond	88:15	88:31	3	i < new_palette . nentries
water	88:15	0:0	4	i
op	88:17	0:0	4	<
water	88:19	0:0	4	new_palette
op	88:30	0:0	4	.
water	88:31	0:0	4	nentries
forexpr	88:41	88:42	3	i ++
water	88:41	0:0	4	i
op	88:42	0:0	4	++
stmts	89:3	107:3	3	
water	89:3	0:0	4	{
decl	90:6	90:50	4	png_sPLT_entryp	pp
op	90:25	0:0	4	=
water	90:27	0:0	4	new_palette
op	90:38	0:0	4	.
water	90:39	0:0	4	entries
op	90:47	0:0	4	+
water	90:49	0:0	4	i
if	92:6	98:6	4	(new_palette . depth == 8)
cond	92:10	92:31	5	new_palette . depth == 8
water	92:10	0:0	6	new_palette
op	92:21	0:0	6	.
water	92:22	0:0	6	depth
op	92:28	0:0	6	==
water	92:31	0:0	6	8
stmts	93:6	98:6	5	
water	93:6	0:0	6	{
water	94:10	0:0	6	pp
op	94:12	0:0	6	->
water	94:14	0:0	6	red
op	94:18	0:0	6	=
op	94:20	0:0	6	*
water	94:21	0:0	6	entry_start
op	94:32	0:0	6	++
water	94:34	0:0	6	;
water	95:10	0:0	6	pp
op	95:12	0:0	6	->
water	95:14	0:0	6	green
op	95:20	0:0	6	=
op	95:22	0:0	6	*
water	95:23	0:0	6	entry_start
op	95:34	0:0	6	++
water	95:36	0:0	6	;
water	96:10	0:0	6	pp
op	96:12	0:0	6	->
water	96:14	0:0	6	blue
op	96:19	0:0	6	=
op	96:21	0:0	6	*
water	96:22	0:0	6	entry_start
op	96:33	0:0	6	++
water	96:35	0:0	6	;
water	97:10	0:0	6	pp
op	97:12	0:0	6	->
water	97:14	0:0	6	alpha
op	97:20	0:0	6	=
op	97:22	0:0	6	*
water	97:23	0:0	6	entry_start
op	97:34	0:0	6	++
water	97:36	0:0	6	;
water	98:6	0:0	6	}
else	99:6	105:6	4
stmts	100:6	105:6	5	
water	100:6	0:0	6	{
water	101:10	0:0	6	pp
op	101:12	0:0	6	->
water	101:14	0:0	6	red
op	101:20	0:0	6	=
call	101:22	101:49	6	png_get_uint_16
arg	101:38	101:49	7	entry_start
water	101:38	0:0	8	entry_start
water	101:50	0:0	6	;
water	101:52	0:0	6	entry_start
op	101:64	0:0	6	+=
water	101:67	0:0	6	2
water	101:68	0:0	6	;
water	102:10	0:0	6	pp
op	102:12	0:0	6	->
water	102:14	0:0	6	green
op	102:20	0:0	6	=
call	102:22	102:49	6	png_get_uint_16
arg	102:38	102:49	7	entry_start
water	102:38	0:0	8	entry_start
water	102:50	0:0	6	;
water	102:52	0:0	6	entry_start
op	102:64	0:0	6	+=
water	102:67	0:0	6	2
water	102:68	0:0	6	;
water	103:10	0:0	6	pp
op	103:12	0:0	6	->
water	103:14	0:0	6	blue
op	103:20	0:0	6	=
call	103:22	103:49	6	png_get_uint_16
arg	103:38	103:49	7	entry_start
water	103:38	0:0	8	entry_start
water	103:50	0:0	6	;
water	103:52	0:0	6	entry_start
op	103:64	0:0	6	+=
water	103:67	0:0	6	2
water	103:68	0:0	6	;
water	104:10	0:0	6	pp
op	104:12	0:0	6	->
water	104:14	0:0	6	alpha
op	104:20	0:0	6	=
call	104:22	104:49	6	png_get_uint_16
arg	104:38	104:49	7	entry_start
water	104:38	0:0	8	entry_start
water	104:50	0:0	6	;
water	104:52	0:0	6	entry_start
op	104:64	0:0	6	+=
water	104:67	0:0	6	2
water	104:68	0:0	6	;
water	105:6	0:0	6	}
water	106:6	0:0	4	pp
op	106:8	0:0	4	->
water	106:10	0:0	4	frequency
op	106:20	0:0	4	=
call	106:22	106:49	4	png_get_uint_16
arg	106:38	106:49	5	entry_start
water	106:38	0:0	6	entry_start
water	106:50	0:0	4	;
water	106:52	0:0	4	entry_start
op	106:64	0:0	4	+=
water	106:67	0:0	4	2
water	106:68	0:0	4	;
water	107:3	0:0	4	}
water	109:3	0:0	2	pp
op	109:6	0:0	2	=
water	109:8	0:0	2	new_palette
op	109:19	0:0	2	.
water	109:20	0:0	2	entries
water	109:27	0:0	2	;
for	110:3	128:3	2	(i = 0 ;i < new_palette . nentries;i ++)
forinit	110:8	110:13	3	i = 0 ;
water	110:8	0:0	4	i
op	110:10	0:0	4	=
water	110:12	0:0	4	0
water	110:13	0:0	4	;
cond	110:15	110:31	3	i < new_palette . nentries
water	110:15	0:0	4	i
op	110:17	0:0	4	<
water	110:19	0:0	4	new_palette
op	110:30	0:0	4	.
water	110:31	0:0	4	nentries
forexpr	110:41	110:42	3	i ++
water	110:41	0:0	4	i
op	110:42	0:0	4	++
stmts	111:3	128:3	3	
water	111:3	0:0	4	{
if	113:6	119:6	4	(new_palette . depth == 8)
cond	113:10	113:31	5	new_palette . depth == 8
water	113:10	0:0	6	new_palette
op	113:21	0:0	6	.
water	113:22	0:0	6	depth
op	113:28	0:0	6	==
water	113:31	0:0	6	8
stmts	114:6	119:6	5	
water	114:6	0:0	6	{
water	115:10	0:0	6	pp
op	115:12	0:0	6	[
water	115:13	0:0	6	i
op	115:14	0:0	6	]
op	115:15	0:0	6	.
water	115:16	0:0	6	red
op	115:22	0:0	6	=
op	115:24	0:0	6	*
water	115:25	0:0	6	entry_start
op	115:36	0:0	6	++
water	115:38	0:0	6	;
water	116:10	0:0	6	pp
op	116:12	0:0	6	[
water	116:13	0:0	6	i
op	116:14	0:0	6	]
op	116:15	0:0	6	.
water	116:16	0:0	6	green
op	116:22	0:0	6	=
op	116:24	0:0	6	*
water	116:25	0:0	6	entry_start
op	116:36	0:0	6	++
water	116:38	0:0	6	;
water	117:10	0:0	6	pp
op	117:12	0:0	6	[
water	117:13	0:0	6	i
op	117:14	0:0	6	]
op	117:15	0:0	6	.
water	117:16	0:0	6	blue
op	117:22	0:0	6	=
op	117:24	0:0	6	*
water	117:25	0:0	6	entry_start
op	117:36	0:0	6	++
water	117:38	0:0	6	;
water	118:10	0:0	6	pp
op	118:12	0:0	6	[
water	118:13	0:0	6	i
op	118:14	0:0	6	]
op	118:15	0:0	6	.
water	118:16	0:0	6	alpha
op	118:22	0:0	6	=
op	118:24	0:0	6	*
water	118:25	0:0	6	entry_start
op	118:36	0:0	6	++
water	118:38	0:0	6	;
water	119:6	0:0	6	}
else	120:6	126:6	4
stmts	121:6	126:6	5	
water	121:6	0:0	6	{
water	122:10	0:0	6	pp
op	122:12	0:0	6	[
water	122:13	0:0	6	i
op	122:14	0:0	6	]
op	122:15	0:0	6	.
water	122:16	0:0	6	red
op	122:22	0:0	6	=
call	122:24	122:51	6	png_get_uint_16
arg	122:40	122:51	7	entry_start
water	122:40	0:0	8	entry_start
water	122:52	0:0	6	;
water	122:54	0:0	6	entry_start
op	122:66	0:0	6	+=
water	122:69	0:0	6	2
water	122:70	0:0	6	;
water	123:10	0:0	6	pp
op	123:12	0:0	6	[
water	123:13	0:0	6	i
op	123:14	0:0	6	]
op	123:15	0:0	6	.
water	123:16	0:0	6	green
op	123:22	0:0	6	=
call	123:24	123:51	6	png_get_uint_16
arg	123:40	123:51	7	entry_start
water	123:40	0:0	8	entry_start
water	123:52	0:0	6	;
water	123:54	0:0	6	entry_start
op	123:66	0:0	6	+=
water	123:69	0:0	6	2
water	123:70	0:0	6	;
water	124:10	0:0	6	pp
op	124:12	0:0	6	[
water	124:13	0:0	6	i
op	124:14	0:0	6	]
op	124:15	0:0	6	.
water	124:16	0:0	6	blue
op	124:22	0:0	6	=
call	124:24	124:51	6	png_get_uint_16
arg	124:40	124:51	7	entry_start
water	124:40	0:0	8	entry_start
water	124:52	0:0	6	;
water	124:54	0:0	6	entry_start
op	124:66	0:0	6	+=
water	124:69	0:0	6	2
water	124:70	0:0	6	;
water	125:10	0:0	6	pp
op	125:12	0:0	6	[
water	125:13	0:0	6	i
op	125:14	0:0	6	]
op	125:15	0:0	6	.
water	125:16	0:0	6	alpha
op	125:22	0:0	6	=
call	125:24	125:51	6	png_get_uint_16
arg	125:40	125:51	7	entry_start
water	125:40	0:0	8	entry_start
water	125:52	0:0	6	;
water	125:54	0:0	6	entry_start
op	125:66	0:0	6	+=
water	125:69	0:0	6	2
water	125:70	0:0	6	;
water	126:6	0:0	6	}
water	127:6	0:0	4	pp
op	127:8	0:0	4	->
water	127:10	0:0	4	frequency
op	127:20	0:0	4	=
call	127:22	127:49	4	png_get_uint_16
arg	127:38	127:49	5	entry_start
water	127:38	0:0	6	entry_start
water	127:50	0:0	4	;
water	127:52	0:0	4	entry_start
op	127:64	0:0	4	+=
water	127:67	0:0	4	2
water	127:68	0:0	4	;
water	128:3	0:0	4	}
water	132:3	0:0	2	new_palette
op	132:14	0:0	2	.
water	132:15	0:0	2	name
op	132:20	0:0	2	=
water	132:22	0:0	2	(
water	132:23	0:0	2	png_charp
water	132:32	0:0	2	)
water	132:33	0:0	2	chunkdata
water	132:42	0:0	2	;
call	134:3	134:50	2	png_set_sPLT
arg	134:16	134:23	3	png_ptr
water	134:16	0:0	4	png_ptr
arg	134:25	134:33	3	info_ptr
water	134:25	0:0	4	info_ptr
arg	134:35	134:47	3	&new_palette
op	134:35	0:0	4	&
water	134:36	0:0	4	new_palette
arg	134:49	134:50	3	1
water	134:49	0:0	4	1
water	134:51	0:0	2	;
call	136:3	136:30	2	png_free
arg	136:12	136:19	3	png_ptr
water	136:12	0:0	4	png_ptr
arg	136:21	136:30	3	chunkdata
water	136:21	0:0	4	chunkdata
water	136:31	0:0	2	;
call	137:3	137:40	2	png_free
arg	137:12	137:19	3	png_ptr
water	137:12	0:0	4	png_ptr
arg	137:21	137:40	3	new_palette.entries
water	137:21	0:0	4	new_palette
op	137:32	0:0	4	.
water	137:33	0:0	4	entries
water	137:41	0:0	2	;
