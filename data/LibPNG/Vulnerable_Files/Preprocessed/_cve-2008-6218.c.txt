D:\postGraduate\code\function_representation_learning\Data\LibPNG\vulnerable_Files\vulnerable_functions\cve-2008-6218.c line 77:6 mismatched character '<EOF>' expecting '\n'
func	2:0	76:0	0	void	png_handle_tEXt
params	3:15	0:0	1	
param	3:16	3:35	2	png_structp	png_ptr
param	3:37	3:55	2	png_infop	info_ptr
param	3:57	3:75	2	png_uint_32	length
stmnts	0:0	75:71	1	
decl	5:3	5:21	2	png_textp	text_ptr
decl	6:3	6:16	2	png_charp	key
decl	7:3	7:17	2	png_charp	text
decl	8:3	8:23	2	png_uint_32	skip
op	8:20	0:0	2	=
water	8:22	0:0	2	0
decl	9:3	9:21	2	png_size_t	slength
decl	10:3	10:10	2	int	ret
call	12:3	12:38	2	png_debug
arg	12:13	12:14	3	1
water	12:13	0:0	4	1
arg	12:16	12:38	3	"in png_handle_tEXt\n"
water	12:16	0:0	4	"in png_handle_tEXt\n"
water	12:39	0:0	2	;
if	14:3	15:52	2	(! ( png_ptr -> mode & PNG_HAVE_IHDR ))
cond	14:7	14:38	3	! ( png_ptr -> mode & PNG_HAVE_IHDR )
op	14:7	0:0	4	!
water	14:8	0:0	4	(
water	14:9	0:0	4	png_ptr
op	14:16	0:0	4	->
water	14:18	0:0	4	mode
op	14:23	0:0	4	&
water	14:25	0:0	4	PNG_HAVE_IHDR
water	14:38	0:0	4	)
stmts	15:6	15:52	3	
call	15:6	15:51	4	png_error
arg	15:16	15:23	5	png_ptr
water	15:16	0:0	6	png_ptr
arg	15:25	15:51	5	"Missing IHDR before tEXt"
water	15:25	0:0	6	"Missing IHDR before tEXt"
water	15:52	0:0	4	;
if	17:3	18:37	2	(png_ptr -> mode & PNG_HAVE_IDAT)
cond	17:7	17:23	3	png_ptr -> mode & PNG_HAVE_IDAT
water	17:7	0:0	4	png_ptr
op	17:14	0:0	4	->
water	17:16	0:0	4	mode
op	17:21	0:0	4	&
water	17:23	0:0	4	PNG_HAVE_IDAT
stmts	18:6	18:37	3	
water	18:6	0:0	4	png_ptr
op	18:13	0:0	4	->
water	18:15	0:0	4	mode
op	18:20	0:0	4	|=
water	18:23	0:0	4	PNG_AFTER_IDAT
water	18:37	0:0	4	;
if	21:3	26:3	2	(length > ( png_uint_32 ) 65535 L)
cond	21:7	21:34	3	length > ( png_uint_32 ) 65535 L
water	21:7	0:0	4	length
op	21:14	0:0	4	>
water	21:16	0:0	4	(
water	21:17	0:0	4	png_uint_32
water	21:28	0:0	4	)
water	21:29	0:0	4	65535
water	21:34	0:0	4	L
stmts	22:3	26:3	3	
water	22:3	0:0	4	{
call	23:6	23:66	4	png_warning
arg	23:18	23:25	5	png_ptr
water	23:18	0:0	6	png_ptr
arg	23:27	23:66	5	"tEXt chunk too large to fit in memory"
water	23:27	0:0	6	"tEXt chunk too large to fit in memory"
water	23:67	0:0	4	;
water	24:6	0:0	4	skip
op	24:11	0:0	4	=
water	24:13	0:0	4	length
op	24:20	0:0	4	-
water	24:22	0:0	4	(
water	24:23	0:0	4	png_uint_32
water	24:34	0:0	4	)
water	24:35	0:0	4	65535
water	24:40	0:0	4	L
water	24:41	0:0	4	;
water	25:6	0:0	4	length
op	25:13	0:0	4	=
water	25:15	0:0	4	(
water	25:16	0:0	4	png_uint_32
water	25:27	0:0	4	)
water	25:28	0:0	4	65535
water	25:33	0:0	4	L
water	25:34	0:0	4	;
water	26:3	0:0	4	}
water	29:3	0:0	2	key
op	29:7	0:0	2	=
water	29:9	0:0	2	(
water	29:10	0:0	2	png_charp
water	29:19	0:0	2	)
call	29:20	29:55	2	png_malloc_warn
arg	29:36	29:43	3	png_ptr
water	29:36	0:0	4	png_ptr
arg	29:45	29:55	3	length+1
water	29:45	0:0	4	length
op	29:52	0:0	4	+
water	29:54	0:0	4	1
water	29:56	0:0	2	;
if	30:3	34:3	2	(key == NULL)
cond	30:7	30:14	3	key == NULL
water	30:7	0:0	4	key
op	30:11	0:0	4	==
water	30:14	0:0	4	NULL
stmts	31:3	34:3	3	
water	31:3	0:0	4	{
call	32:5	32:60	4	png_warning
arg	32:17	32:24	5	png_ptr
water	32:17	0:0	6	png_ptr
arg	32:26	32:60	5	"No memory to process text chunk."
water	32:26	0:0	6	"No memory to process text chunk."
water	32:61	0:0	4	;
return	33:5	33:11	4	
water	34:3	0:0	4	}
water	35:3	0:0	2	slength
op	35:11	0:0	2	=
water	35:13	0:0	2	(
water	35:14	0:0	2	png_size_t
water	35:24	0:0	2	)
water	35:25	0:0	2	length
water	35:31	0:0	2	;
call	36:3	36:48	2	png_crc_read
arg	36:16	36:23	3	png_ptr
water	36:16	0:0	4	png_ptr
arg	36:25	36:39	3	(png_bytep)key
water	36:25	0:0	4	(
water	36:26	0:0	4	png_bytep
water	36:35	0:0	4	)
water	36:36	0:0	4	key
arg	36:41	36:48	3	slength
water	36:41	0:0	4	slength
water	36:49	0:0	2	;
if	38:3	42:3	2	(png_crc_finish (png_ptr ,skip ))
cond	38:7	38:35	3	png_crc_finish (png_ptr ,skip )
call	38:7	38:35	4	png_crc_finish
arg	38:22	38:29	5	png_ptr
water	38:22	0:0	6	png_ptr
arg	38:31	38:35	5	skip
water	38:31	0:0	6	skip
stmts	39:3	42:3	3	
water	39:3	0:0	4	{
call	40:6	40:27	4	png_free
arg	40:15	40:22	5	png_ptr
water	40:15	0:0	6	png_ptr
arg	40:24	40:27	5	key
water	40:24	0:0	6	key
water	40:28	0:0	4	;
return	41:6	41:12	4	
water	42:3	0:0	4	}
water	44:3	0:0	2	key
op	44:6	0:0	2	[
water	44:7	0:0	2	slength
op	44:14	0:0	2	]
op	44:16	0:0	2	=
water	44:18	0:0	2	0
water	44:19	0:0	2	x00
water	44:22	0:0	2	;
for	46:3	47:7	2	(text = key ;* text;text ++)
forinit	46:8	46:18	3	text = key ;
water	46:8	0:0	4	text
op	46:13	0:0	4	=
water	46:15	0:0	4	key
water	46:18	0:0	4	;
cond	46:20	46:21	3	* text
op	46:20	0:0	4	*
water	46:21	0:0	4	text
forexpr	46:27	46:31	3	text ++
water	46:27	0:0	4	text
op	46:31	0:0	4	++
stmts	47:7	47:7	3	
water	47:7	0:0	4	;
if	49:3	50:12	2	(text != key + slength)
cond	49:7	49:21	3	text != key + slength
water	49:7	0:0	4	text
op	49:12	0:0	4	!=
water	49:15	0:0	4	key
op	49:19	0:0	4	+
water	49:21	0:0	4	slength
stmts	50:6	50:12	3	
water	50:6	0:0	4	text
op	50:10	0:0	4	++
water	50:12	0:0	4	;
water	52:3	0:0	2	text_ptr
op	52:12	0:0	2	=
water	52:14	0:0	2	(
water	52:15	0:0	2	png_textp
water	52:24	0:0	2	)
call	52:25	53:39	2	png_malloc_warn
arg	52:41	52:48	3	png_ptr
water	52:41	0:0	4	png_ptr
arg	53:6	53:39	3	(png_uint_32)png_sizeof(png_text)
water	53:6	0:0	4	(
water	53:7	0:0	4	png_uint_32
water	53:18	0:0	4	)
call	53:19	53:38	4	png_sizeof
arg	53:30	53:38	5	png_text
water	53:30	0:0	6	png_text
water	53:40	0:0	2	;
if	54:3	59:3	2	(text_ptr == NULL)
cond	54:7	54:19	3	text_ptr == NULL
water	54:7	0:0	4	text_ptr
op	54:16	0:0	4	==
water	54:19	0:0	4	NULL
stmts	55:3	59:3	3	
water	55:3	0:0	4	{
call	56:5	56:68	4	png_warning
arg	56:17	56:24	5	png_ptr
water	56:17	0:0	6	png_ptr
arg	56:26	56:68	5	"Not enough memory to process text chunk."
water	56:26	0:0	6	"Not enough memory to process text chunk."
water	56:69	0:0	4	;
call	57:5	57:26	4	png_free
arg	57:14	57:21	5	png_ptr
water	57:14	0:0	6	png_ptr
arg	57:23	57:26	5	key
water	57:23	0:0	6	key
water	57:27	0:0	4	;
return	58:5	58:11	4	
water	59:3	0:0	4	}
water	60:3	0:0	2	text_ptr
op	60:11	0:0	2	->
water	60:13	0:0	2	compression
op	60:25	0:0	2	=
water	60:27	0:0	2	PNG_TEXT_COMPRESSION_NONE
water	60:52	0:0	2	;
water	61:3	0:0	2	text_ptr
op	61:11	0:0	2	->
water	61:13	0:0	2	key
op	61:17	0:0	2	=
water	61:19	0:0	2	key
water	61:22	0:0	2	;
water	63:3	0:0	2	text_ptr
op	63:11	0:0	2	->
water	63:13	0:0	2	lang
op	63:18	0:0	2	=
water	63:20	0:0	2	NULL
water	63:24	0:0	2	;
water	64:3	0:0	2	text_ptr
op	64:11	0:0	2	->
water	64:13	0:0	2	lang_key
op	64:22	0:0	2	=
water	64:24	0:0	2	NULL
water	64:28	0:0	2	;
water	65:3	0:0	2	text_ptr
op	65:11	0:0	2	->
water	65:13	0:0	2	itxt_length
op	65:25	0:0	2	=
water	65:27	0:0	2	0
water	65:28	0:0	2	;
water	67:3	0:0	2	text_ptr
op	67:11	0:0	2	->
water	67:13	0:0	2	text
op	67:18	0:0	2	=
water	67:20	0:0	2	text
water	67:24	0:0	2	;
water	68:3	0:0	2	text_ptr
op	68:11	0:0	2	->
water	68:13	0:0	2	text_length
op	68:25	0:0	2	=
call	68:27	68:42	2	png_strlen
arg	68:38	68:42	3	text
water	68:38	0:0	4	text
water	68:43	0:0	2	;
water	70:3	0:0	2	ret
op	70:7	0:0	2	=
call	70:9	70:54	2	png_set_text_2
arg	70:24	70:31	3	png_ptr
water	70:24	0:0	4	png_ptr
arg	70:33	70:41	3	info_ptr
water	70:33	0:0	4	info_ptr
arg	70:43	70:51	3	text_ptr
water	70:43	0:0	4	text_ptr
arg	70:53	70:54	3	1
water	70:53	0:0	4	1
water	70:55	0:0	2	;
call	72:3	72:24	2	png_free
arg	72:12	72:19	3	png_ptr
water	72:12	0:0	4	png_ptr
arg	72:21	72:24	3	key
water	72:21	0:0	4	key
water	72:25	0:0	2	;
call	73:3	73:29	2	png_free
arg	73:12	73:19	3	png_ptr
water	73:12	0:0	4	png_ptr
arg	73:21	73:29	3	text_ptr
water	73:21	0:0	4	text_ptr
water	73:30	0:0	2	;
if	74:3	75:71	2	(ret)
cond	74:7	74:7	3	ret
water	74:7	0:0	4	ret
stmts	75:5	75:71	3	
call	75:5	75:70	4	png_warning
arg	75:17	75:24	5	png_ptr
water	75:17	0:0	6	png_ptr
arg	75:26	75:70	5	"Insufficient memory to process text chunk."
water	75:26	0:0	6	"Insufficient memory to process text chunk."
water	75:71	0:0	4	;
