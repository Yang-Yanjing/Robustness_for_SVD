D:\postGraduate\code\function_representation_learning\Data\LibPNG\vulnerable_Files\vulnerable_functions\cve-2004-0597-1.c line 86:6 mismatched character '<EOF>' expecting '\n'
func	2:0	85:0	0	void	png_handle_tRNS
params	3:15	0:0	1	
param	3:16	3:35	2	png_structp	png_ptr
param	3:37	3:55	2	png_infop	info_ptr
param	3:57	3:75	2	png_uint_32	length
stmnts	5:3	84:31	1	
call	5:3	5:38	2	png_debug
arg	5:13	5:14	3	1
water	5:13	0:0	4	1
arg	5:16	5:38	3	"in png_handle_tRNS\n"
water	5:16	0:0	4	"in png_handle_tRNS\n"
water	5:39	0:0	2	;
if	7:3	8:52	2	(! ( png_ptr -> mode & PNG_HAVE_IHDR ))
cond	7:7	7:38	3	! ( png_ptr -> mode & PNG_HAVE_IHDR )
op	7:7	0:0	4	!
water	7:8	0:0	4	(
water	7:9	0:0	4	png_ptr
op	7:16	0:0	4	->
water	7:18	0:0	4	mode
op	7:23	0:0	4	&
water	7:25	0:0	4	PNG_HAVE_IHDR
water	7:38	0:0	4	)
stmts	8:6	8:52	3	
call	8:6	8:51	4	png_error
arg	8:16	8:23	5	png_ptr
water	8:16	0:0	6	png_ptr
arg	8:25	8:51	5	"Missing IHDR before tRNS"
water	8:25	0:0	6	"Missing IHDR before tRNS"
water	8:52	0:0	4	;
else	9:3	14:3	2
stmts	9:8	14:3	3	
if	9:8	14:3	4	(png_ptr -> mode & PNG_HAVE_IDAT)
cond	9:12	9:28	5	png_ptr -> mode & PNG_HAVE_IDAT
water	9:12	0:0	6	png_ptr
op	9:19	0:0	6	->
water	9:21	0:0	6	mode
op	9:26	0:0	6	&
water	9:28	0:0	6	PNG_HAVE_IDAT
stmts	10:3	14:3	5	
water	10:3	0:0	6	{
call	11:6	11:52	6	png_warning
arg	11:18	11:25	7	png_ptr
water	11:18	0:0	8	png_ptr
arg	11:27	11:52	7	"Invalid tRNS after IDAT"
water	11:27	0:0	8	"Invalid tRNS after IDAT"
water	11:53	0:0	6	;
call	12:6	12:36	6	png_crc_finish
arg	12:21	12:28	7	png_ptr
water	12:21	0:0	8	png_ptr
arg	12:30	12:36	7	length
water	12:30	0:0	8	length
water	12:37	0:0	6	;
return	13:6	13:12	6	
water	14:3	0:0	6	}
else	15:3	20:3	2
stmts	15:8	20:3	3	
if	15:8	20:3	4	(info_ptr != NULL && info_ptr -> valid & PNG_INFO_tRNS)
cond	15:12	15:50	5	info_ptr != NULL && info_ptr -> valid & PNG_INFO_tRNS
water	15:12	0:0	6	info_ptr
op	15:21	0:0	6	!=
water	15:24	0:0	6	NULL
op	15:29	0:0	6	&&
water	15:32	0:0	6	info_ptr
op	15:40	0:0	6	->
water	15:42	0:0	6	valid
op	15:48	0:0	6	&
water	15:50	0:0	6	PNG_INFO_tRNS
stmts	16:3	20:3	5	
water	16:3	0:0	6	{
call	17:6	17:49	6	png_warning
arg	17:18	17:25	7	png_ptr
water	17:18	0:0	8	png_ptr
arg	17:27	17:49	7	"Duplicate tRNS chunk"
water	17:27	0:0	8	"Duplicate tRNS chunk"
water	17:50	0:0	6	;
call	18:6	18:36	6	png_crc_finish
arg	18:21	18:28	7	png_ptr
water	18:21	0:0	8	png_ptr
arg	18:30	18:36	7	length
water	18:30	0:0	8	length
water	18:37	0:0	6	;
return	19:6	19:12	6	
water	20:3	0:0	6	}
if	22:3	40:3	2	(png_ptr -> color_type == PNG_COLOR_TYPE_PALETTE)
cond	22:7	22:30	3	png_ptr -> color_type == PNG_COLOR_TYPE_PALETTE
water	22:7	0:0	4	png_ptr
op	22:14	0:0	4	->
water	22:16	0:0	4	color_type
op	22:27	0:0	4	==
water	22:30	0:0	4	PNG_COLOR_TYPE_PALETTE
stmts	23:3	40:3	3	
water	23:3	0:0	4	{
if	24:6	28:6	4	(! ( png_ptr -> mode & PNG_HAVE_PLTE ))
cond	24:10	24:41	5	! ( png_ptr -> mode & PNG_HAVE_PLTE )
op	24:10	0:0	6	!
water	24:11	0:0	6	(
water	24:12	0:0	6	png_ptr
op	24:19	0:0	6	->
water	24:21	0:0	6	mode
op	24:26	0:0	6	&
water	24:28	0:0	6	PNG_HAVE_PLTE
water	24:41	0:0	6	)
stmts	25:6	28:6	5	
water	25:6	0:0	6	{
call	27:9	27:56	6	png_warning
arg	27:21	27:28	7	png_ptr
water	27:21	0:0	8	png_ptr
arg	27:30	27:56	7	"Missing PLTE before tRNS"
water	27:30	0:0	8	"Missing PLTE before tRNS"
water	27:57	0:0	6	;
water	28:6	0:0	6	}
else	29:6	34:6	4
stmts	29:11	34:6	5	
if	29:11	34:6	6	(length > png_ptr -> num_palette)
cond	29:15	29:33	7	length > png_ptr -> num_palette
water	29:15	0:0	8	length
op	29:22	0:0	8	>
water	29:24	0:0	8	png_ptr
op	29:31	0:0	8	->
water	29:33	0:0	8	num_palette
stmts	30:6	34:6	7	
water	30:6	0:0	8	{
call	31:9	31:59	8	png_warning
arg	31:21	31:28	9	png_ptr
water	31:21	0:0	10	png_ptr
arg	31:30	31:59	9	"Incorrect tRNS chunk length"
water	31:30	0:0	10	"Incorrect tRNS chunk length"
water	31:60	0:0	8	;
call	32:9	32:39	8	png_crc_finish
arg	32:24	32:31	9	png_ptr
water	32:24	0:0	10	png_ptr
arg	32:33	32:39	9	length
water	32:33	0:0	10	length
water	32:40	0:0	8	;
return	33:9	33:15	8	
water	34:6	0:0	8	}
water	36:6	0:0	4	png_ptr
op	36:13	0:0	4	->
water	36:15	0:0	4	trans
op	36:21	0:0	4	=
water	36:23	0:0	4	(
water	36:24	0:0	4	png_bytep
water	36:33	0:0	4	)
call	36:34	36:60	4	png_malloc
arg	36:45	36:52	5	png_ptr
water	36:45	0:0	6	png_ptr
arg	36:54	36:60	5	length
water	36:54	0:0	6	length
water	36:61	0:0	4	;
water	37:6	0:0	4	png_ptr
op	37:13	0:0	4	->
water	37:15	0:0	4	flags
op	37:21	0:0	4	|=
water	37:24	0:0	4	PNG_FLAG_FREE_TRANS
water	37:43	0:0	4	;
call	38:6	38:62	4	png_crc_read
arg	38:19	38:26	5	png_ptr
water	38:19	0:0	6	png_ptr
arg	38:28	38:42	5	png_ptr->trans
water	38:28	0:0	6	png_ptr
op	38:35	0:0	6	->
water	38:37	0:0	6	trans
arg	38:44	38:62	5	(png_size_t)length
water	38:44	0:0	6	(
water	38:45	0:0	6	png_size_t
water	38:55	0:0	6	)
water	38:56	0:0	6	length
water	38:63	0:0	4	;
water	39:6	0:0	4	png_ptr
op	39:13	0:0	4	->
water	39:15	0:0	4	num_trans
op	39:25	0:0	4	=
water	39:27	0:0	4	(
water	39:28	0:0	4	png_uint_16
water	39:39	0:0	4	)
water	39:40	0:0	4	length
water	39:46	0:0	4	;
water	40:3	0:0	4	}
else	41:3	57:3	2
stmts	41:8	57:3	3	
if	41:8	57:3	4	(png_ptr -> color_type == PNG_COLOR_TYPE_RGB)
cond	41:12	41:35	5	png_ptr -> color_type == PNG_COLOR_TYPE_RGB
water	41:12	0:0	6	png_ptr
op	41:19	0:0	6	->
water	41:21	0:0	6	color_type
op	41:32	0:0	6	==
water	41:35	0:0	6	PNG_COLOR_TYPE_RGB
stmts	42:3	57:3	5	
water	42:3	0:0	6	{
decl	43:6	43:21	6	png_byte	buf[6]
if	45:6	50:6	6	(length != 6)
cond	45:10	45:20	7	length != 6
water	45:10	0:0	8	length
op	45:17	0:0	8	!=
water	45:20	0:0	8	6
stmts	46:6	50:6	7	
water	46:6	0:0	8	{
call	47:9	47:59	8	png_warning
arg	47:21	47:28	9	png_ptr
water	47:21	0:0	10	png_ptr
arg	47:30	47:59	9	"Incorrect tRNS chunk length"
water	47:30	0:0	10	"Incorrect tRNS chunk length"
water	47:60	0:0	8	;
call	48:9	48:39	8	png_crc_finish
arg	48:24	48:31	9	png_ptr
water	48:24	0:0	10	png_ptr
arg	48:33	48:39	9	length
water	48:33	0:0	10	length
water	48:40	0:0	8	;
return	49:9	49:15	8	
water	50:6	0:0	8	}
call	52:6	52:51	6	png_crc_read
arg	52:19	52:26	7	png_ptr
water	52:19	0:0	8	png_ptr
arg	52:28	52:31	7	buf
water	52:28	0:0	8	buf
arg	52:33	52:51	7	(png_size_t)length
water	52:33	0:0	8	(
water	52:34	0:0	8	png_size_t
water	52:44	0:0	8	)
water	52:45	0:0	8	length
water	52:52	0:0	6	;
water	53:6	0:0	6	png_ptr
op	53:13	0:0	6	->
water	53:15	0:0	6	num_trans
op	53:25	0:0	6	=
water	53:27	0:0	6	1
water	53:28	0:0	6	;
water	54:6	0:0	6	png_ptr
op	54:13	0:0	6	->
water	54:15	0:0	6	trans_values
op	54:27	0:0	6	.
water	54:28	0:0	6	red
op	54:32	0:0	6	=
call	54:34	54:53	6	png_get_uint_16
arg	54:50	54:53	7	buf
water	54:50	0:0	8	buf
water	54:54	0:0	6	;
water	55:6	0:0	6	png_ptr
op	55:13	0:0	6	->
water	55:15	0:0	6	trans_values
op	55:27	0:0	6	.
water	55:28	0:0	6	green
op	55:34	0:0	6	=
call	55:36	55:59	6	png_get_uint_16
arg	55:52	55:59	7	buf+2
water	55:52	0:0	8	buf
op	55:56	0:0	8	+
water	55:58	0:0	8	2
water	55:60	0:0	6	;
water	56:6	0:0	6	png_ptr
op	56:13	0:0	6	->
water	56:15	0:0	6	trans_values
op	56:27	0:0	6	.
water	56:28	0:0	6	blue
op	56:33	0:0	6	=
call	56:35	56:58	6	png_get_uint_16
arg	56:51	56:58	7	buf+4
water	56:51	0:0	8	buf
op	56:55	0:0	8	+
water	56:57	0:0	8	4
water	56:59	0:0	6	;
water	57:3	0:0	6	}
else	58:3	72:3	2
stmts	58:8	72:3	3	
if	58:8	72:3	4	(png_ptr -> color_type == PNG_COLOR_TYPE_GRAY)
cond	58:12	58:35	5	png_ptr -> color_type == PNG_COLOR_TYPE_GRAY
water	58:12	0:0	6	png_ptr
op	58:19	0:0	6	->
water	58:21	0:0	6	color_type
op	58:32	0:0	6	==
water	58:35	0:0	6	PNG_COLOR_TYPE_GRAY
stmts	59:3	72:3	5	
water	59:3	0:0	6	{
decl	60:6	60:21	6	png_byte	buf[6]
if	62:6	67:6	6	(length != 2)
cond	62:10	62:20	7	length != 2
water	62:10	0:0	8	length
op	62:17	0:0	8	!=
water	62:20	0:0	8	2
stmts	63:6	67:6	7	
water	63:6	0:0	8	{
call	64:9	64:59	8	png_warning
arg	64:21	64:28	9	png_ptr
water	64:21	0:0	10	png_ptr
arg	64:30	64:59	9	"Incorrect tRNS chunk length"
water	64:30	0:0	10	"Incorrect tRNS chunk length"
water	64:60	0:0	8	;
call	65:9	65:39	8	png_crc_finish
arg	65:24	65:31	9	png_ptr
water	65:24	0:0	10	png_ptr
arg	65:33	65:39	9	length
water	65:33	0:0	10	length
water	65:40	0:0	8	;
return	66:9	66:15	8	
water	67:6	0:0	8	}
call	69:6	69:34	6	png_crc_read
arg	69:19	69:26	7	png_ptr
water	69:19	0:0	8	png_ptr
arg	69:28	69:31	7	buf
water	69:28	0:0	8	buf
arg	69:33	69:34	7	2
water	69:33	0:0	8	2
water	69:35	0:0	6	;
water	70:6	0:0	6	png_ptr
op	70:13	0:0	6	->
water	70:15	0:0	6	num_trans
op	70:25	0:0	6	=
water	70:27	0:0	6	1
water	70:28	0:0	6	;
water	71:6	0:0	6	png_ptr
op	71:13	0:0	6	->
water	71:15	0:0	6	trans_values
op	71:27	0:0	6	.
water	71:28	0:0	6	gray
op	71:33	0:0	6	=
call	71:35	71:54	6	png_get_uint_16
arg	71:51	71:54	7	buf
water	71:51	0:0	8	buf
water	71:55	0:0	6	;
water	72:3	0:0	6	}
else	73:3	78:3	2
stmts	74:3	78:3	3	
water	74:3	0:0	4	{
call	75:6	75:70	4	png_warning
arg	75:18	75:25	5	png_ptr
water	75:18	0:0	6	png_ptr
arg	75:27	75:70	5	"tRNS chunk not allowed with alpha channel"
water	75:27	0:0	6	"tRNS chunk not allowed with alpha channel"
water	75:71	0:0	4	;
call	76:6	76:36	4	png_crc_finish
arg	76:21	76:28	5	png_ptr
water	76:21	0:0	6	png_ptr
arg	76:30	76:36	5	length
water	76:30	0:0	6	length
water	76:37	0:0	4	;
return	77:6	77:12	4	
water	78:3	0:0	4	}
if	80:3	81:12	2	(png_crc_finish (png_ptr ,0 ))
cond	80:7	80:32	3	png_crc_finish (png_ptr ,0 )
call	80:7	80:32	4	png_crc_finish
arg	80:22	80:29	5	png_ptr
water	80:22	0:0	6	png_ptr
arg	80:31	80:32	5	0
water	80:31	0:0	6	0
stmts	81:6	81:12	3	
return	81:6	81:12	4	
call	83:3	84:30	2	png_set_tRNS
arg	83:16	83:23	3	png_ptr
water	83:16	0:0	4	png_ptr
arg	83:25	83:33	3	info_ptr
water	83:25	0:0	4	info_ptr
arg	83:35	83:49	3	png_ptr->trans
water	83:35	0:0	4	png_ptr
op	83:42	0:0	4	->
water	83:44	0:0	4	trans
arg	83:51	83:69	3	png_ptr->num_trans
water	83:51	0:0	4	png_ptr
op	83:58	0:0	4	->
water	83:60	0:0	4	num_trans
arg	84:6	84:30	3	&(png_ptr->trans_values)
op	84:6	0:0	4	&
water	84:7	0:0	4	(
water	84:8	0:0	4	png_ptr
op	84:15	0:0	4	->
water	84:17	0:0	4	trans_values
water	84:29	0:0	4	)
water	84:31	0:0	2	;
