func	2:0	119:0	0	static int	gtTileSeparate
params	3:14	0:0	1	
param	3:15	3:33	2	TIFFRGBAImage *	img
param	3:35	3:49	2	uint32 *	raster
param	3:51	3:59	2	uint32	w
param	3:61	3:69	2	uint32	h
stmnts	0:0	118:13	1	
decl	5:1	5:21	2	TIFF	*tif
op	5:11	0:0	2	=
water	5:13	0:0	2	img
op	5:16	0:0	2	->
water	5:18	0:0	2	tif
decl	6:1	6:44	2	tileSeparateRoutine	put
op	6:25	0:0	2	=
water	6:27	0:0	2	img
op	6:30	0:0	2	->
water	6:32	0:0	2	put
op	6:35	0:0	2	.
water	6:36	0:0	2	separate
decl	7:1	7:31	2	uint32	col
water	7:11	0:0	2	,
decl	7:1	7:31	2	uint32	row
water	7:16	0:0	2	,
decl	7:1	7:31	2	uint32	y
water	7:19	0:0	2	,
decl	7:1	7:31	2	uint32	rowstoread
decl	8:1	8:11	2	uint32	pos
decl	9:1	9:14	2	uint32	tw
water	9:10	0:0	2	,
decl	9:1	9:14	2	uint32	th
decl	10:1	10:19	2	unsigned char	*buf
decl	11:1	11:18	2	unsigned char	*p0
decl	12:1	12:18	2	unsigned char	*p1
decl	13:1	13:18	2	unsigned char	*p2
decl	14:1	14:18	2	unsigned char	*pa
decl	15:1	15:17	2	tsize_t	tilesize
decl	16:1	16:23	2	int32	fromskew
water	16:15	0:0	2	,
decl	16:1	16:23	2	int32	toskew
decl	17:1	17:23	2	int	alpha
op	17:11	0:0	2	=
water	17:13	0:0	2	img
op	17:16	0:0	2	->
water	17:18	0:0	2	alpha
decl	18:1	18:12	2	uint32	nrow
decl	19:1	19:18	2	int	ret
op	19:9	0:0	2	=
water	19:11	0:0	2	1
water	19:12	0:0	2	,
decl	19:1	19:18	2	int	flip
water	21:1	0:0	2	tilesize
op	21:10	0:0	2	=
call	21:12	21:28	2	TIFFTileSize
arg	21:25	21:28	3	tif
water	21:25	0:0	4	tif
water	21:29	0:0	2	;
water	22:1	0:0	2	buf
op	22:5	0:0	2	=
water	22:7	0:0	2	(
water	22:8	0:0	2	unsigned
water	22:17	0:0	2	char
op	22:21	0:0	2	*
water	22:22	0:0	2	)
call	22:24	22:56	2	_TIFFmalloc
arg	22:36	22:56	3	(alpha?4:3)*tilesize
water	22:36	0:0	4	(
water	22:37	0:0	4	alpha
water	22:42	0:0	4	?
water	22:43	0:0	4	4
water	22:44	0:0	4	:
water	22:45	0:0	4	3
water	22:46	0:0	4	)
op	22:47	0:0	4	*
water	22:48	0:0	4	tilesize
water	22:57	0:0	2	;
if	23:1	26:1	2	(buf == 0)
cond	23:5	23:12	3	buf == 0
water	23:5	0:0	4	buf
op	23:9	0:0	4	==
water	23:12	0:0	4	0
stmts	23:15	26:1	3	
water	23:15	0:0	4	{
call	24:2	24:81	4	TIFFErrorExt
arg	24:15	24:34	5	tif->tif_clientdata
water	24:15	0:0	6	tif
op	24:18	0:0	6	->
water	24:20	0:0	6	tif_clientdata
arg	24:36	24:53	5	TIFFFileName(tif)
call	24:36	24:52	6	TIFFFileName
arg	24:49	24:52	7	tif
water	24:49	0:0	8	tif
arg	24:55	24:81	5	"No space for tile buffer"
water	24:55	0:0	6	"No space for tile buffer"
water	24:82	0:0	4	;
return	25:2	25:12	4	(0)
water	25:9	0:0	5	(
water	25:10	0:0	5	0
water	25:11	0:0	5	)
water	26:1	0:0	4	}
call	27:1	27:41	2	_TIFFmemset
arg	27:13	27:16	3	buf
water	27:13	0:0	4	buf
arg	27:18	27:19	3	0
water	27:18	0:0	4	0
arg	27:21	27:41	3	(alpha?4:3)*tilesize
water	27:21	0:0	4	(
water	27:22	0:0	4	alpha
water	27:27	0:0	4	?
water	27:28	0:0	4	4
water	27:29	0:0	4	:
water	27:30	0:0	4	3
water	27:31	0:0	4	)
op	27:32	0:0	4	*
water	27:33	0:0	4	tilesize
water	27:42	0:0	2	;
water	28:1	0:0	2	p0
op	28:4	0:0	2	=
water	28:6	0:0	2	buf
water	28:9	0:0	2	;
water	29:1	0:0	2	p1
op	29:4	0:0	2	=
water	29:6	0:0	2	p0
op	29:9	0:0	2	+
water	29:11	0:0	2	tilesize
water	29:19	0:0	2	;
water	30:1	0:0	2	p2
op	30:4	0:0	2	=
water	30:6	0:0	2	p1
op	30:9	0:0	2	+
water	30:11	0:0	2	tilesize
water	30:19	0:0	2	;
water	31:1	0:0	2	pa
op	31:4	0:0	2	=
water	31:6	0:0	2	(
water	31:7	0:0	2	alpha
water	31:12	0:0	2	?
water	31:13	0:0	2	(
water	31:14	0:0	2	p2
op	31:16	0:0	2	+
water	31:17	0:0	2	tilesize
water	31:25	0:0	2	)
water	31:26	0:0	2	:
water	31:27	0:0	2	NULL
water	31:31	0:0	2	)
water	31:32	0:0	2	;
call	32:1	32:41	2	TIFFGetField
arg	32:14	32:17	3	tif
water	32:14	0:0	4	tif
arg	32:19	32:36	3	TIFFTAG_TILEWIDTH
water	32:19	0:0	4	TIFFTAG_TILEWIDTH
arg	32:38	32:41	3	&tw
op	32:38	0:0	4	&
water	32:39	0:0	4	tw
water	32:42	0:0	2	;
call	33:1	33:42	2	TIFFGetField
arg	33:14	33:17	3	tif
water	33:14	0:0	4	tif
arg	33:19	33:37	3	TIFFTAG_TILELENGTH
water	33:19	0:0	4	TIFFTAG_TILELENGTH
arg	33:39	33:42	3	&th
op	33:39	0:0	4	&
water	33:40	0:0	4	th
water	33:43	0:0	2	;
water	35:1	0:0	2	flip
op	35:6	0:0	2	=
call	35:8	35:26	2	setorientation
arg	35:23	35:26	3	img
water	35:23	0:0	4	img
water	35:27	0:0	2	;
if	36:1	39:1	2	(flip & FLIP_VERTICALLY)
cond	36:5	36:12	3	flip & FLIP_VERTICALLY
water	36:5	0:0	4	flip
op	36:10	0:0	4	&
water	36:12	0:0	4	FLIP_VERTICALLY
stmts	36:29	39:1	3	
water	36:29	0:0	4	{
water	37:2	0:0	4	y
op	37:4	0:0	4	=
water	37:6	0:0	4	h
op	37:8	0:0	4	-
water	37:10	0:0	4	1
water	37:11	0:0	4	;
water	38:2	0:0	4	toskew
op	38:9	0:0	4	=
op	38:11	0:0	4	-
call	38:12	38:26	4	(int32)
arg	38:20	38:26	5	tw+w
water	38:20	0:0	6	tw
op	38:23	0:0	6	+
water	38:25	0:0	6	w
water	38:27	0:0	4	;
water	39:1	0:0	4	}
else	40:1	43:1	2
stmts	40:6	43:1	3	
water	40:6	0:0	4	{
water	41:2	0:0	4	y
op	41:4	0:0	4	=
water	41:6	0:0	4	0
water	41:7	0:0	4	;
water	42:2	0:0	4	toskew
op	42:9	0:0	4	=
op	42:11	0:0	4	-
call	42:12	42:26	4	(int32)
arg	42:20	42:26	5	tw-w
water	42:20	0:0	6	tw
op	42:23	0:0	6	-
water	42:25	0:0	6	w
water	42:27	0:0	4	;
water	43:1	0:0	4	}
for	45:1	99:1	2	(row = 0 ;row < h;row += nrow)
forinit	45:6	45:13	3	row = 0 ;
water	45:6	0:0	4	row
op	45:10	0:0	4	=
water	45:12	0:0	4	0
water	45:13	0:0	4	;
cond	45:15	45:21	3	row < h
water	45:15	0:0	4	row
op	45:19	0:0	4	<
water	45:21	0:0	4	h
forexpr	45:24	45:31	3	row += nrow
water	45:24	0:0	4	row
op	45:28	0:0	4	+=
water	45:31	0:0	4	nrow
stmts	46:1	99:1	3	
water	46:1	0:0	4	{
water	47:2	0:0	4	rowstoread
op	47:13	0:0	4	=
water	47:15	0:0	4	th
op	47:18	0:0	4	-
water	47:20	0:0	4	(
water	47:21	0:0	4	row
op	47:25	0:0	4	+
water	47:27	0:0	4	img
op	47:30	0:0	4	->
water	47:32	0:0	4	row_offset
water	47:42	0:0	4	)
op	47:44	0:0	4	%
water	47:46	0:0	4	th
water	47:48	0:0	4	;
water	48:2	0:0	4	nrow
op	48:7	0:0	4	=
water	48:9	0:0	4	(
water	48:10	0:0	4	row
op	48:14	0:0	4	+
water	48:16	0:0	4	rowstoread
op	48:27	0:0	4	>
water	48:29	0:0	4	h
water	48:31	0:0	4	?
water	48:33	0:0	4	h
op	48:35	0:0	4	-
water	48:37	0:0	4	row
water	48:41	0:0	4	:
water	48:43	0:0	4	rowstoread
water	48:53	0:0	4	)
water	48:54	0:0	4	;
for	49:2	96:2	4	(col = 0 ;col < w;col += tw)
forinit	49:7	49:14	5	col = 0 ;
water	49:7	0:0	6	col
op	49:11	0:0	6	=
water	49:13	0:0	6	0
water	49:14	0:0	6	;
cond	49:16	49:22	5	col < w
water	49:16	0:0	6	col
op	49:20	0:0	6	<
water	49:22	0:0	6	w
forexpr	49:25	49:32	5	col += tw
water	49:25	0:0	6	col
op	49:29	0:0	6	+=
water	49:32	0:0	6	tw
stmts	50:2	96:2	5	
water	50:2	0:0	6	{
if	51:3	56:3	6	(TIFFReadTile (tif ,p0 ,col + img -> col_offset ,row + img -> row_offset ,0 ,0 ) < 0 && img -> stoponerr)
cond	51:7	52:44	7	TIFFReadTile (tif ,p0 ,col + img -> col_offset ,row + img -> row_offset ,0 ,0 ) < 0 && img -> stoponerr
call	51:7	52:30	8	TIFFReadTile
arg	51:20	51:23	9	tif
water	51:20	0:0	10	tif
arg	51:25	51:27	9	p0
water	51:25	0:0	10	p0
arg	51:29	51:48	9	col+img->col_offset
water	51:29	0:0	10	col
op	51:32	0:0	10	+
water	51:33	0:0	10	img
op	51:36	0:0	10	->
water	51:38	0:0	10	col_offset
arg	52:7	52:26	9	row+img->row_offset
water	52:7	0:0	10	row
op	52:10	0:0	10	+
water	52:11	0:0	10	img
op	52:14	0:0	10	->
water	52:16	0:0	10	row_offset
arg	52:27	52:28	9	0
water	52:27	0:0	10	0
arg	52:29	52:30	9	0
water	52:29	0:0	10	0
op	52:32	0:0	8	<
water	52:34	0:0	8	0
op	52:36	0:0	8	&&
water	52:39	0:0	8	img
op	52:42	0:0	8	->
water	52:44	0:0	8	stoponerr
stmts	53:3	56:3	7	
water	53:3	0:0	8	{
water	54:4	0:0	8	ret
op	54:8	0:0	8	=
water	54:10	0:0	8	0
water	54:11	0:0	8	;
break	55:4	55:9	8	
water	56:3	0:0	8	}
if	57:3	62:3	6	(TIFFReadTile (tif ,p1 ,col + img -> col_offset ,row + img -> row_offset ,0 ,1 ) < 0 && img -> stoponerr)
cond	57:7	58:44	7	TIFFReadTile (tif ,p1 ,col + img -> col_offset ,row + img -> row_offset ,0 ,1 ) < 0 && img -> stoponerr
call	57:7	58:30	8	TIFFReadTile
arg	57:20	57:23	9	tif
water	57:20	0:0	10	tif
arg	57:25	57:27	9	p1
water	57:25	0:0	10	p1
arg	57:29	57:48	9	col+img->col_offset
water	57:29	0:0	10	col
op	57:32	0:0	10	+
water	57:33	0:0	10	img
op	57:36	0:0	10	->
water	57:38	0:0	10	col_offset
arg	58:7	58:26	9	row+img->row_offset
water	58:7	0:0	10	row
op	58:10	0:0	10	+
water	58:11	0:0	10	img
op	58:14	0:0	10	->
water	58:16	0:0	10	row_offset
arg	58:27	58:28	9	0
water	58:27	0:0	10	0
arg	58:29	58:30	9	1
water	58:29	0:0	10	1
op	58:32	0:0	8	<
water	58:34	0:0	8	0
op	58:36	0:0	8	&&
water	58:39	0:0	8	img
op	58:42	0:0	8	->
water	58:44	0:0	8	stoponerr
stmts	59:3	62:3	7	
water	59:3	0:0	8	{
water	60:4	0:0	8	ret
op	60:8	0:0	8	=
water	60:10	0:0	8	0
water	60:11	0:0	8	;
break	61:4	61:9	8	
water	62:3	0:0	8	}
if	63:3	68:3	6	(TIFFReadTile (tif ,p2 ,col + img -> col_offset ,row + img -> row_offset ,0 ,2 ) < 0 && img -> stoponerr)
cond	63:7	64:44	7	TIFFReadTile (tif ,p2 ,col + img -> col_offset ,row + img -> row_offset ,0 ,2 ) < 0 && img -> stoponerr
call	63:7	64:30	8	TIFFReadTile
arg	63:20	63:23	9	tif
water	63:20	0:0	10	tif
arg	63:25	63:27	9	p2
water	63:25	0:0	10	p2
arg	63:29	63:48	9	col+img->col_offset
water	63:29	0:0	10	col
op	63:32	0:0	10	+
water	63:33	0:0	10	img
op	63:36	0:0	10	->
water	63:38	0:0	10	col_offset
arg	64:7	64:26	9	row+img->row_offset
water	64:7	0:0	10	row
op	64:10	0:0	10	+
water	64:11	0:0	10	img
op	64:14	0:0	10	->
water	64:16	0:0	10	row_offset
arg	64:27	64:28	9	0
water	64:27	0:0	10	0
arg	64:29	64:30	9	2
water	64:29	0:0	10	2
op	64:32	0:0	8	<
water	64:34	0:0	8	0
op	64:36	0:0	8	&&
water	64:39	0:0	8	img
op	64:42	0:0	8	->
water	64:44	0:0	8	stoponerr
stmts	65:3	68:3	7	
water	65:3	0:0	8	{
water	66:4	0:0	8	ret
op	66:8	0:0	8	=
water	66:10	0:0	8	0
water	66:11	0:0	8	;
break	67:4	67:9	8	
water	68:3	0:0	8	}
if	69:3	77:3	6	(alpha)
cond	69:7	69:7	7	alpha
water	69:7	0:0	8	alpha
stmts	70:3	77:3	7	
water	70:3	0:0	8	{
if	71:4	76:4	8	(TIFFReadTile (tif ,pa ,col + img -> col_offset ,row + img -> row_offset ,0 ,3 ) < 0 && img -> stoponerr)
cond	71:8	72:45	9	TIFFReadTile (tif ,pa ,col + img -> col_offset ,row + img -> row_offset ,0 ,3 ) < 0 && img -> stoponerr
call	71:8	72:31	10	TIFFReadTile
arg	71:21	71:24	11	tif
water	71:21	0:0	12	tif
arg	71:25	71:27	11	pa
water	71:25	0:0	12	pa
arg	71:28	71:47	11	col+img->col_offset
water	71:28	0:0	12	col
op	71:31	0:0	12	+
water	71:32	0:0	12	img
op	71:35	0:0	12	->
water	71:37	0:0	12	col_offset
arg	72:8	72:27	11	row+img->row_offset
water	72:8	0:0	12	row
op	72:11	0:0	12	+
water	72:12	0:0	12	img
op	72:15	0:0	12	->
water	72:17	0:0	12	row_offset
arg	72:28	72:29	11	0
water	72:28	0:0	12	0
arg	72:30	72:31	11	3
water	72:30	0:0	12	3
op	72:33	0:0	10	<
water	72:35	0:0	10	0
op	72:37	0:0	10	&&
water	72:40	0:0	10	img
op	72:43	0:0	10	->
water	72:45	0:0	10	stoponerr
stmts	73:4	76:4	9	
water	73:4	0:0	10	{
water	74:5	0:0	10	ret
op	74:9	0:0	10	=
water	74:11	0:0	10	0
water	74:12	0:0	10	;
break	75:5	75:10	10	
water	76:4	0:0	10	}
water	77:3	0:0	8	}
water	79:3	0:0	6	pos
op	79:7	0:0	6	=
water	79:9	0:0	6	(
water	79:10	0:0	6	(
water	79:11	0:0	6	row
op	79:14	0:0	6	+
water	79:15	0:0	6	img
op	79:18	0:0	6	->
water	79:20	0:0	6	row_offset
water	79:30	0:0	6	)
op	79:32	0:0	6	%
water	79:34	0:0	6	th
water	79:36	0:0	6	)
call	79:38	79:59	6	*TIFFTileRowSize
arg	79:56	79:59	7	tif
water	79:56	0:0	8	tif
water	79:60	0:0	6	;
if	81:3	92:3	6	(col + tw > w)
cond	81:7	81:18	7	col + tw > w
water	81:7	0:0	8	col
op	81:11	0:0	8	+
water	81:13	0:0	8	tw
op	81:16	0:0	8	>
water	81:18	0:0	8	w
stmts	82:3	92:3	7	
water	82:3	0:0	8	{
decl	87:4	87:25	8	uint32	npix
op	87:16	0:0	8	=
water	87:18	0:0	8	w
op	87:20	0:0	8	-
water	87:22	0:0	8	col
water	88:4	0:0	8	fromskew
op	88:13	0:0	8	=
water	88:15	0:0	8	tw
op	88:18	0:0	8	-
water	88:20	0:0	8	npix
water	88:24	0:0	8	;
call	89:4	91:59	8	(*put)
arg	89:11	89:14	9	img
water	89:11	0:0	10	img
arg	89:16	89:30	9	raster+y*w+col
water	89:16	0:0	10	raster
op	89:22	0:0	10	+
water	89:23	0:0	10	y
op	89:24	0:0	10	*
water	89:25	0:0	10	w
op	89:26	0:0	10	+
water	89:27	0:0	10	col
arg	89:32	89:35	9	col
water	89:32	0:0	10	col
arg	89:37	89:38	9	y
water	89:37	0:0	10	y
arg	90:8	90:12	9	npix
water	90:8	0:0	10	npix
arg	90:14	90:18	9	nrow
water	90:14	0:0	10	nrow
arg	90:20	90:28	9	fromskew
water	90:20	0:0	10	fromskew
arg	90:30	90:47	9	toskew+fromskew
water	90:30	0:0	10	toskew
op	90:37	0:0	10	+
water	90:39	0:0	10	fromskew
arg	91:8	91:16	9	p0+pos
water	91:8	0:0	10	p0
op	91:11	0:0	10	+
water	91:13	0:0	10	pos
arg	91:18	91:26	9	p1+pos
water	91:18	0:0	10	p1
op	91:21	0:0	10	+
water	91:23	0:0	10	pos
arg	91:28	91:36	9	p2+pos
water	91:28	0:0	10	p2
op	91:31	0:0	10	+
water	91:33	0:0	10	pos
arg	91:38	91:59	9	(alpha?(pa+pos):NULL)
water	91:38	0:0	10	(
water	91:39	0:0	10	alpha
water	91:44	0:0	10	?
water	91:45	0:0	10	(
water	91:46	0:0	10	pa
op	91:48	0:0	10	+
water	91:49	0:0	10	pos
water	91:52	0:0	10	)
water	91:53	0:0	10	:
water	91:54	0:0	10	NULL
water	91:58	0:0	10	)
water	91:60	0:0	8	;
water	92:3	0:0	8	}
else	92:5	95:3	6
stmts	92:10	95:3	7	
water	92:10	0:0	8	{
call	93:4	94:80	8	(*put)
arg	93:11	93:14	9	img
water	93:11	0:0	10	img
arg	93:16	93:30	9	raster+y*w+col
water	93:16	0:0	10	raster
op	93:22	0:0	10	+
water	93:23	0:0	10	y
op	93:24	0:0	10	*
water	93:25	0:0	10	w
op	93:26	0:0	10	+
water	93:27	0:0	10	col
arg	93:32	93:35	9	col
water	93:32	0:0	10	col
arg	93:37	93:38	9	y
water	93:37	0:0	10	y
arg	94:8	94:10	9	tw
water	94:8	0:0	10	tw
arg	94:12	94:16	9	nrow
water	94:12	0:0	10	nrow
arg	94:18	94:19	9	0
water	94:18	0:0	10	0
arg	94:21	94:27	9	toskew
water	94:21	0:0	10	toskew
arg	94:29	94:37	9	p0+pos
water	94:29	0:0	10	p0
op	94:32	0:0	10	+
water	94:34	0:0	10	pos
arg	94:39	94:47	9	p1+pos
water	94:39	0:0	10	p1
op	94:42	0:0	10	+
water	94:44	0:0	10	pos
arg	94:49	94:57	9	p2+pos
water	94:49	0:0	10	p2
op	94:52	0:0	10	+
water	94:54	0:0	10	pos
arg	94:59	94:80	9	(alpha?(pa+pos):NULL)
water	94:59	0:0	10	(
water	94:60	0:0	10	alpha
water	94:65	0:0	10	?
water	94:66	0:0	10	(
water	94:67	0:0	10	pa
op	94:69	0:0	10	+
water	94:70	0:0	10	pos
water	94:73	0:0	10	)
water	94:74	0:0	10	:
water	94:75	0:0	10	NULL
water	94:79	0:0	10	)
water	94:81	0:0	8	;
water	95:3	0:0	8	}
water	96:2	0:0	6	}
water	98:2	0:0	4	y
op	98:4	0:0	4	+=
water	98:7	0:0	4	(
water	98:8	0:0	4	flip
op	98:13	0:0	4	&
water	98:15	0:0	4	FLIP_VERTICALLY
water	98:31	0:0	4	?
op	98:32	0:0	4	-
water	98:33	0:0	4	(
water	98:34	0:0	4	int32
water	98:39	0:0	4	)
water	98:41	0:0	4	nrow
water	98:46	0:0	4	:
water	98:48	0:0	4	(
water	98:49	0:0	4	int32
water	98:54	0:0	4	)
water	98:56	0:0	4	nrow
water	98:60	0:0	4	)
water	98:61	0:0	4	;
water	99:1	0:0	4	}
if	101:1	115:1	2	(flip & FLIP_HORIZONTALLY)
cond	101:5	101:12	3	flip & FLIP_HORIZONTALLY
water	101:5	0:0	4	flip
op	101:10	0:0	4	&
water	101:12	0:0	4	FLIP_HORIZONTALLY
stmts	101:31	115:1	3	
water	101:31	0:0	4	{
decl	102:2	102:13	4	uint32	line
for	104:2	114:2	4	(line = 0 ;line < h;line ++)
forinit	104:7	104:15	5	line = 0 ;
water	104:7	0:0	6	line
op	104:12	0:0	6	=
water	104:14	0:0	6	0
water	104:15	0:0	6	;
cond	104:17	104:24	5	line < h
water	104:17	0:0	6	line
op	104:22	0:0	6	<
water	104:24	0:0	6	h
forexpr	104:27	104:31	5	line ++
water	104:27	0:0	6	line
op	104:31	0:0	6	++
stmts	104:35	114:2	5	
water	104:35	0:0	6	{
decl	105:3	105:37	6	uint32	*left
op	105:16	0:0	6	=
water	105:18	0:0	6	raster
op	105:25	0:0	6	+
water	105:27	0:0	6	(
water	105:28	0:0	6	line
op	105:33	0:0	6	*
water	105:35	0:0	6	w
water	105:36	0:0	6	)
decl	106:3	106:31	6	uint32	*right
op	106:17	0:0	6	=
water	106:19	0:0	6	left
op	106:24	0:0	6	+
water	106:26	0:0	6	w
op	106:28	0:0	6	-
water	106:30	0:0	6	1
while	108:3	113:3	6	(left < right)
cond	108:11	108:18	7	left < right
water	108:11	0:0	8	left
op	108:16	0:0	8	<
water	108:18	0:0	8	right
stmts	108:26	113:3	7	
water	108:26	0:0	8	{
decl	109:4	109:23	8	uint32	temp
op	109:16	0:0	8	=
op	109:18	0:0	8	*
water	109:19	0:0	8	left
op	110:4	0:0	8	*
water	110:5	0:0	8	left
op	110:10	0:0	8	=
op	110:12	0:0	8	*
water	110:13	0:0	8	right
water	110:18	0:0	8	;
op	111:4	0:0	8	*
water	111:5	0:0	8	right
op	111:11	0:0	8	=
water	111:13	0:0	8	temp
water	111:17	0:0	8	;
water	112:4	0:0	8	left
op	112:8	0:0	8	++
water	112:10	0:0	8	,
water	112:12	0:0	8	right
op	112:17	0:0	8	--
water	112:19	0:0	8	;
water	113:3	0:0	8	}
water	114:2	0:0	6	}
water	115:1	0:0	4	}
call	117:1	117:14	2	_TIFFfree
arg	117:11	117:14	3	buf
water	117:11	0:0	4	buf
water	117:15	0:0	2	;
return	118:1	118:13	2	(ret)
water	118:8	0:0	3	(
water	118:9	0:0	3	ret
water	118:12	0:0	3	)
