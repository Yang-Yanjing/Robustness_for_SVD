func	1:0	198:0	0	static int	LZWDecodeCompat
params	2:15	0:0	1	
param	2:16	2:25	2	TIFF *	tif
param	2:27	2:37	2	uint8 *	op0
param	2:39	2:52	2	tmsize_t	occ0
param	2:54	2:62	2	uint16	s
stmnts	4:1	197:11	1	
water	4:1	0:0	2	static
water	4:8	0:0	2	const
water	4:14	0:0	2	char
water	4:19	0:0	2	module
op	4:25	0:0	2	[
op	4:26	0:0	2	]
op	4:28	0:0	2	=
water	4:30	0:0	2	"LZWDecodeCompat"
water	4:47	0:0	2	;
decl	5:1	5:38	2	LZWCodecState	*sp
op	5:19	0:0	2	=
call	5:21	5:37	3	DecoderState
arg	5:34	5:37	4	tif
water	5:34	0:0	5	tif
decl	6:1	6:23	2	char	*op
op	6:10	0:0	2	=
water	6:12	0:0	2	(
water	6:13	0:0	2	char
op	6:17	0:0	2	*
water	6:18	0:0	2	)
water	6:20	0:0	2	op0
decl	7:1	7:23	2	long	occ
op	7:10	0:0	2	=
water	7:12	0:0	2	(
water	7:13	0:0	2	long
water	7:17	0:0	2	)
water	7:19	0:0	2	occ0
decl	8:1	8:9	2	char	*tp
decl	9:1	9:18	2	unsigned char	*bp
decl	10:1	10:16	2	int	code
water	10:9	0:0	2	,
decl	10:1	10:16	2	int	nbits
decl	11:1	11:35	2	long	nextbits
water	11:14	0:0	2	,
decl	11:1	11:35	2	long	nextdata
water	11:24	0:0	2	,
decl	11:1	11:35	2	long	nbitsmask
decl	12:1	12:48	2	code_t	*codep
water	12:14	0:0	2	,
decl	12:1	12:48	2	code_t	*free_entp
water	12:26	0:0	2	,
decl	12:1	12:48	2	code_t	*maxcodep
water	12:37	0:0	2	,
decl	12:1	12:48	2	code_t	*oldcodep
water	14:1	0:0	2	(
water	14:2	0:0	2	void
water	14:6	0:0	2	)
water	14:8	0:0	2	s
water	14:9	0:0	2	;
call	15:1	15:18	2	assert
arg	15:8	15:18	3	sp!=NULL
water	15:8	0:0	4	sp
op	15:11	0:0	4	!=
water	15:14	0:0	4	NULL
water	15:19	0:0	2	;
if	20:1	21:19	2	(( tmsize_t ) occ != occ0)
cond	20:5	20:23	3	( tmsize_t ) occ != occ0
water	20:5	0:0	4	(
water	20:6	0:0	4	tmsize_t
water	20:14	0:0	4	)
water	20:16	0:0	4	occ
op	20:20	0:0	4	!=
water	20:23	0:0	4	occ0
stmts	21:9	21:19	3	
return	21:9	21:19	4	(0)
water	21:16	0:0	5	(
water	21:17	0:0	5	0
water	21:18	0:0	5	)
if	26:1	60:1	2	(sp -> dec_restart)
cond	26:5	26:9	3	sp -> dec_restart
water	26:5	0:0	4	sp
op	26:7	0:0	4	->
water	26:9	0:0	4	dec_restart
stmts	26:22	60:1	3	
water	26:22	0:0	4	{
decl	27:2	27:14	4	long	residue
water	29:2	0:0	4	codep
op	29:8	0:0	4	=
water	29:10	0:0	4	sp
op	29:12	0:0	4	->
water	29:14	0:0	4	dec_codep
water	29:23	0:0	4	;
water	30:2	0:0	4	residue
op	30:10	0:0	4	=
water	30:12	0:0	4	codep
op	30:17	0:0	4	->
water	30:19	0:0	4	length
op	30:26	0:0	4	-
water	30:28	0:0	4	sp
op	30:30	0:0	4	->
water	30:32	0:0	4	dec_restart
water	30:43	0:0	4	;
if	31:2	48:2	4	(residue > occ)
cond	31:6	31:16	5	residue > occ
water	31:6	0:0	6	residue
op	31:14	0:0	6	>
water	31:16	0:0	6	occ
stmts	31:21	48:2	5	
water	31:21	0:0	6	{
water	38:3	0:0	6	sp
op	38:5	0:0	6	->
water	38:7	0:0	6	dec_restart
op	38:19	0:0	6	+=
water	38:22	0:0	6	occ
water	38:25	0:0	6	;
do	39:3	41:3	6	(-- residue > occ)
cond	41:12	41:24	7	-- residue > occ
op	41:12	0:0	8	--
water	41:14	0:0	8	residue
op	41:22	0:0	8	>
water	41:24	0:0	8	occ
stmts	39:6	41:3	7	
water	39:6	0:0	8	{
water	40:4	0:0	8	codep
op	40:10	0:0	8	=
water	40:12	0:0	8	codep
op	40:17	0:0	8	->
water	40:19	0:0	8	next
water	40:23	0:0	8	;
water	41:3	0:0	8	}
water	41:28	0:0	6	;
water	42:3	0:0	6	tp
op	42:6	0:0	6	=
water	42:8	0:0	6	op
op	42:11	0:0	6	+
water	42:13	0:0	6	occ
water	42:16	0:0	6	;
do	43:3	46:3	6	(-- occ)
cond	46:12	46:14	7	-- occ
op	46:12	0:0	8	--
water	46:14	0:0	8	occ
stmts	43:6	46:3	7	
water	43:6	0:0	8	{
op	44:4	0:0	8	*
op	44:5	0:0	8	--
water	44:7	0:0	8	tp
op	44:10	0:0	8	=
water	44:12	0:0	8	codep
op	44:17	0:0	8	->
water	44:19	0:0	8	value
water	44:24	0:0	8	;
water	45:4	0:0	8	codep
op	45:10	0:0	8	=
water	45:12	0:0	8	codep
op	45:17	0:0	8	->
water	45:19	0:0	8	next
water	45:23	0:0	8	;
water	46:3	0:0	8	}
water	46:18	0:0	6	;
return	47:3	47:13	6	(1)
water	47:10	0:0	7	(
water	47:11	0:0	7	1
water	47:12	0:0	7	)
water	48:2	0:0	6	}
water	52:2	0:0	4	op
op	52:5	0:0	4	+=
water	52:8	0:0	4	residue
water	52:15	0:0	4	;
water	53:2	0:0	4	occ
op	53:6	0:0	4	-=
water	53:9	0:0	4	residue
water	53:16	0:0	4	;
water	54:2	0:0	4	tp
op	54:5	0:0	4	=
water	54:7	0:0	4	op
water	54:9	0:0	4	;
do	55:2	58:2	4	(-- residue)
cond	58:11	58:13	5	-- residue
op	58:11	0:0	6	--
water	58:13	0:0	6	residue
stmts	55:5	58:2	5	
water	55:5	0:0	6	{
op	56:3	0:0	6	*
op	56:4	0:0	6	--
water	56:6	0:0	6	tp
op	56:9	0:0	6	=
water	56:11	0:0	6	codep
op	56:16	0:0	6	->
water	56:18	0:0	6	value
water	56:23	0:0	6	;
water	57:3	0:0	6	codep
op	57:9	0:0	6	=
water	57:11	0:0	6	codep
op	57:16	0:0	6	->
water	57:18	0:0	6	next
water	57:22	0:0	6	;
water	58:2	0:0	6	}
water	58:21	0:0	4	;
water	59:2	0:0	4	sp
op	59:4	0:0	4	->
water	59:6	0:0	4	dec_restart
op	59:18	0:0	4	=
water	59:20	0:0	4	0
water	59:21	0:0	4	;
water	60:1	0:0	4	}
water	62:1	0:0	2	bp
op	62:4	0:0	2	=
water	62:6	0:0	2	(
water	62:7	0:0	2	unsigned
water	62:16	0:0	2	char
op	62:21	0:0	2	*
water	62:22	0:0	2	)
water	62:23	0:0	2	tif
op	62:26	0:0	2	->
water	62:28	0:0	2	tif_rawcp
water	62:37	0:0	2	;
water	64:1	0:0	2	sp
op	64:3	0:0	2	->
water	64:5	0:0	2	dec_bitsleft
op	64:18	0:0	2	=
water	64:20	0:0	2	(
water	64:21	0:0	2	(
water	64:22	0:0	2	(
water	64:23	0:0	2	uint64
water	64:29	0:0	2	)
water	64:30	0:0	2	tif
op	64:33	0:0	2	->
water	64:35	0:0	2	tif_rawcc
water	64:44	0:0	2	)
op	64:46	0:0	2	<<
water	64:49	0:0	2	3
water	64:50	0:0	2	)
water	64:51	0:0	2	;
water	66:1	0:0	2	nbits
op	66:7	0:0	2	=
water	66:9	0:0	2	sp
op	66:11	0:0	2	->
water	66:13	0:0	2	lzw_nbits
water	66:22	0:0	2	;
water	67:1	0:0	2	nextdata
op	67:10	0:0	2	=
water	67:12	0:0	2	sp
op	67:14	0:0	2	->
water	67:16	0:0	2	lzw_nextdata
water	67:28	0:0	2	;
water	68:1	0:0	2	nextbits
op	68:10	0:0	2	=
water	68:12	0:0	2	sp
op	68:14	0:0	2	->
water	68:16	0:0	2	lzw_nextbits
water	68:28	0:0	2	;
water	69:1	0:0	2	nbitsmask
op	69:11	0:0	2	=
water	69:13	0:0	2	sp
op	69:15	0:0	2	->
water	69:17	0:0	2	dec_nbitsmask
water	69:30	0:0	2	;
water	70:1	0:0	2	oldcodep
op	70:10	0:0	2	=
water	70:12	0:0	2	sp
op	70:14	0:0	2	->
water	70:16	0:0	2	dec_oldcodep
water	70:28	0:0	2	;
water	71:1	0:0	2	free_entp
op	71:11	0:0	2	=
water	71:13	0:0	2	sp
op	71:15	0:0	2	->
water	71:17	0:0	2	dec_free_entp
water	71:30	0:0	2	;
water	72:1	0:0	2	maxcodep
op	72:10	0:0	2	=
water	72:12	0:0	2	sp
op	72:14	0:0	2	->
water	72:16	0:0	2	dec_maxcodep
water	72:28	0:0	2	;
while	74:1	173:1	2	(occ > 0)
cond	74:8	74:14	3	occ > 0
water	74:8	0:0	4	occ
op	74:12	0:0	4	>
water	74:14	0:0	4	0
stmts	74:17	173:1	3	
water	74:17	0:0	4	{
call	75:2	75:47	4	NextCode
arg	75:11	75:14	5	tif
water	75:11	0:0	6	tif
arg	75:16	75:18	5	sp
water	75:16	0:0	6	sp
arg	75:20	75:22	5	bp
water	75:20	0:0	6	bp
arg	75:24	75:28	5	code
water	75:24	0:0	6	code
arg	75:30	75:47	5	GetNextCodeCompat
water	75:30	0:0	6	GetNextCodeCompat
water	75:48	0:0	4	;
if	76:2	77:8	4	(code == CODE_EOI)
cond	76:6	76:14	5	code == CODE_EOI
water	76:6	0:0	6	code
op	76:11	0:0	6	==
water	76:14	0:0	6	CODE_EOI
stmts	77:3	77:8	5	
break	77:3	77:8	6	
if	78:2	100:2	4	(code == CODE_CLEAR)
cond	78:6	78:14	5	code == CODE_CLEAR
water	78:6	0:0	6	code
op	78:11	0:0	6	==
water	78:14	0:0	6	CODE_CLEAR
stmts	78:26	100:2	5	
water	78:26	0:0	6	{
do	79:3	87:3	6	(code == CODE_CLEAR)
cond	87:12	87:20	7	code == CODE_CLEAR
water	87:12	0:0	8	code
op	87:17	0:0	8	==
water	87:20	0:0	8	CODE_CLEAR
stmts	79:6	87:3	7	
water	79:6	0:0	8	{
water	80:4	0:0	8	free_entp
op	80:14	0:0	8	=
water	80:16	0:0	8	sp
op	80:18	0:0	8	->
water	80:20	0:0	8	dec_codetab
op	80:32	0:0	8	+
water	80:34	0:0	8	CODE_FIRST
water	80:44	0:0	8	;
call	81:4	82:47	8	_TIFFmemset
arg	81:16	81:25	9	free_entp
water	81:16	0:0	10	free_entp
arg	81:27	81:28	9	0
water	81:27	0:0	10	0
arg	82:9	82:47	9	(CSIZE-CODE_FIRST)*sizeof(code_t)
water	82:9	0:0	10	(
water	82:10	0:0	10	CSIZE
op	82:16	0:0	10	-
water	82:18	0:0	10	CODE_FIRST
water	82:28	0:0	10	)
op	82:30	0:0	10	*
op	82:32	0:0	10	sizeof
water	82:39	0:0	10	(
water	82:40	0:0	10	code_t
water	82:46	0:0	10	)
water	82:48	0:0	8	;
water	83:4	0:0	8	nbits
op	83:10	0:0	8	=
water	83:12	0:0	8	BITS_MIN
water	83:20	0:0	8	;
water	84:4	0:0	8	nbitsmask
op	84:14	0:0	8	=
call	84:16	84:32	8	MAXCODE
arg	84:24	84:32	9	BITS_MIN
water	84:24	0:0	10	BITS_MIN
water	84:33	0:0	8	;
water	85:4	0:0	8	maxcodep
op	85:13	0:0	8	=
water	85:15	0:0	8	sp
op	85:17	0:0	8	->
water	85:19	0:0	8	dec_codetab
op	85:31	0:0	8	+
water	85:33	0:0	8	nbitsmask
water	85:42	0:0	8	;
call	86:4	86:49	8	NextCode
arg	86:13	86:16	9	tif
water	86:13	0:0	10	tif
arg	86:18	86:20	9	sp
water	86:18	0:0	10	sp
arg	86:22	86:24	9	bp
water	86:22	0:0	10	bp
arg	86:26	86:30	9	code
water	86:26	0:0	10	code
arg	86:32	86:49	9	GetNextCodeCompat
water	86:32	0:0	10	GetNextCodeCompat
water	86:50	0:0	8	;
water	87:3	0:0	8	}
water	87:31	0:0	6	;
if	88:3	89:9	6	(code == CODE_EOI)
cond	88:7	88:15	7	code == CODE_EOI
water	88:7	0:0	8	code
op	88:12	0:0	8	==
water	88:15	0:0	8	CODE_EOI
stmts	89:4	89:9	7	
break	89:4	89:9	8	
if	90:3	95:3	6	(code > CODE_CLEAR)
cond	90:7	90:14	7	code > CODE_CLEAR
water	90:7	0:0	8	code
op	90:12	0:0	8	>
water	90:14	0:0	8	CODE_CLEAR
stmts	90:26	95:3	7	
water	90:26	0:0	8	{
call	91:4	93:22	8	TIFFErrorExt
arg	91:17	91:36	9	tif->tif_clientdata
water	91:17	0:0	10	tif
op	91:20	0:0	10	->
water	91:22	0:0	10	tif_clientdata
arg	91:38	91:51	9	tif->tif_name
water	91:38	0:0	10	tif
op	91:41	0:0	10	->
water	91:43	0:0	10	tif_name
arg	92:4	92:51	9	"LZWDecode: Corrupted LZW table at scanline %d"
water	92:4	0:0	10	"LZWDecode: Corrupted LZW table at scanline %d"
arg	93:10	93:22	9	tif->tif_row
water	93:10	0:0	10	tif
op	93:13	0:0	10	->
water	93:15	0:0	10	tif_row
water	93:23	0:0	8	;
return	94:4	94:14	8	(0)
water	94:11	0:0	9	(
water	94:12	0:0	9	0
water	94:13	0:0	9	)
water	95:3	0:0	8	}
op	96:3	0:0	6	*
water	96:4	0:0	6	op
op	96:6	0:0	6	++
op	96:9	0:0	6	=
water	96:11	0:0	6	(
water	96:12	0:0	6	char
water	96:16	0:0	6	)
water	96:17	0:0	6	code
water	96:21	0:0	6	;
water	97:3	0:0	6	occ
op	97:6	0:0	6	--
water	97:8	0:0	6	;
water	98:3	0:0	6	oldcodep
op	98:12	0:0	6	=
water	98:14	0:0	6	sp
op	98:16	0:0	6	->
water	98:18	0:0	6	dec_codetab
op	98:30	0:0	6	+
water	98:32	0:0	6	code
water	98:36	0:0	6	;
continue	99:3	99:11	6	
water	100:2	0:0	6	}
water	101:2	0:0	4	codep
op	101:8	0:0	4	=
water	101:10	0:0	4	sp
op	101:12	0:0	4	->
water	101:14	0:0	4	dec_codetab
op	101:26	0:0	4	+
water	101:28	0:0	4	code
water	101:32	0:0	4	;
if	106:2	111:2	4	(free_entp < & sp -> dec_codetab [ 0 ] || free_entp >= & sp -> dec_codetab [ CSIZE ])
cond	106:6	107:41	5	free_entp < & sp -> dec_codetab [ 0 ] || free_entp >= & sp -> dec_codetab [ CSIZE ]
water	106:6	0:0	6	free_entp
op	106:16	0:0	6	<
op	106:18	0:0	6	&
water	106:19	0:0	6	sp
op	106:21	0:0	6	->
water	106:23	0:0	6	dec_codetab
op	106:34	0:0	6	[
water	106:35	0:0	6	0
op	106:36	0:0	6	]
op	106:38	0:0	6	||
water	107:6	0:0	6	free_entp
op	107:16	0:0	6	>=
op	107:19	0:0	6	&
water	107:20	0:0	6	sp
op	107:22	0:0	6	->
water	107:24	0:0	6	dec_codetab
op	107:35	0:0	6	[
water	107:36	0:0	6	CSIZE
op	107:41	0:0	6	]
stmts	107:44	111:2	5	
water	107:44	0:0	6	{
call	108:3	109:57	6	TIFFErrorExt
arg	108:16	108:35	7	tif->tif_clientdata
water	108:16	0:0	8	tif
op	108:19	0:0	8	->
water	108:21	0:0	8	tif_clientdata
arg	108:37	108:43	7	module
water	108:37	0:0	8	module
arg	109:7	109:43	7	"Corrupted LZW table at scanline %d"
water	109:7	0:0	8	"Corrupted LZW table at scanline %d"
arg	109:45	109:57	7	tif->tif_row
water	109:45	0:0	8	tif
op	109:48	0:0	8	->
water	109:50	0:0	8	tif_row
water	109:58	0:0	6	;
return	110:3	110:13	6	(0)
water	110:10	0:0	7	(
water	110:11	0:0	7	0
water	110:12	0:0	7	)
water	111:2	0:0	6	}
water	113:2	0:0	4	free_entp
op	113:11	0:0	4	->
water	113:13	0:0	4	next
op	113:18	0:0	4	=
water	113:20	0:0	4	oldcodep
water	113:28	0:0	4	;
if	114:2	119:2	4	(free_entp -> next < & sp -> dec_codetab [ 0 ] || free_entp -> next >= & sp -> dec_codetab [ CSIZE ])
cond	114:6	115:47	5	free_entp -> next < & sp -> dec_codetab [ 0 ] || free_entp -> next >= & sp -> dec_codetab [ CSIZE ]
water	114:6	0:0	6	free_entp
op	114:15	0:0	6	->
water	114:17	0:0	6	next
op	114:22	0:0	6	<
op	114:24	0:0	6	&
water	114:25	0:0	6	sp
op	114:27	0:0	6	->
water	114:29	0:0	6	dec_codetab
op	114:40	0:0	6	[
water	114:41	0:0	6	0
op	114:42	0:0	6	]
op	114:44	0:0	6	||
water	115:6	0:0	6	free_entp
op	115:15	0:0	6	->
water	115:17	0:0	6	next
op	115:22	0:0	6	>=
op	115:25	0:0	6	&
water	115:26	0:0	6	sp
op	115:28	0:0	6	->
water	115:30	0:0	6	dec_codetab
op	115:41	0:0	6	[
water	115:42	0:0	6	CSIZE
op	115:47	0:0	6	]
stmts	115:50	119:2	5	
water	115:50	0:0	6	{
call	116:3	117:57	6	TIFFErrorExt
arg	116:16	116:35	7	tif->tif_clientdata
water	116:16	0:0	8	tif
op	116:19	0:0	8	->
water	116:21	0:0	8	tif_clientdata
arg	116:37	116:43	7	module
water	116:37	0:0	8	module
arg	117:7	117:43	7	"Corrupted LZW table at scanline %d"
water	117:7	0:0	8	"Corrupted LZW table at scanline %d"
arg	117:45	117:57	7	tif->tif_row
water	117:45	0:0	8	tif
op	117:48	0:0	8	->
water	117:50	0:0	8	tif_row
water	117:58	0:0	6	;
return	118:3	118:13	6	(0)
water	118:10	0:0	7	(
water	118:11	0:0	7	0
water	118:12	0:0	7	)
water	119:2	0:0	6	}
water	120:2	0:0	4	free_entp
op	120:11	0:0	4	->
water	120:13	0:0	4	firstchar
op	120:23	0:0	4	=
water	120:25	0:0	4	free_entp
op	120:34	0:0	4	->
water	120:36	0:0	4	next
op	120:40	0:0	4	->
water	120:42	0:0	4	firstchar
water	120:51	0:0	4	;
water	121:2	0:0	4	free_entp
op	121:11	0:0	4	->
water	121:13	0:0	4	length
op	121:20	0:0	4	=
water	121:22	0:0	4	free_entp
op	121:31	0:0	4	->
water	121:33	0:0	4	next
op	121:37	0:0	4	->
water	121:39	0:0	4	length
op	121:45	0:0	4	+
water	121:46	0:0	4	1
water	121:47	0:0	4	;
water	122:2	0:0	4	free_entp
op	122:11	0:0	4	->
water	122:13	0:0	4	value
op	122:19	0:0	4	=
water	122:21	0:0	4	(
water	122:22	0:0	4	codep
op	122:28	0:0	4	<
water	122:30	0:0	4	free_entp
water	122:39	0:0	4	)
water	122:41	0:0	4	?
water	123:6	0:0	4	codep
op	123:11	0:0	4	->
water	123:13	0:0	4	firstchar
water	123:23	0:0	4	:
water	123:25	0:0	4	free_entp
op	123:34	0:0	4	->
water	123:36	0:0	4	firstchar
water	123:45	0:0	4	;
if	124:2	129:2	4	(++ free_entp > maxcodep)
cond	124:6	124:20	5	++ free_entp > maxcodep
op	124:6	0:0	6	++
water	124:8	0:0	6	free_entp
op	124:18	0:0	6	>
water	124:20	0:0	6	maxcodep
stmts	124:30	129:2	5	
water	124:30	0:0	6	{
if	125:3	126:20	6	(++ nbits > BITS_MAX)
cond	125:7	125:17	7	++ nbits > BITS_MAX
op	125:7	0:0	8	++
water	125:9	0:0	8	nbits
op	125:15	0:0	8	>
water	125:17	0:0	8	BITS_MAX
stmts	126:4	126:20	7	
water	126:4	0:0	8	nbits
op	126:10	0:0	8	=
water	126:12	0:0	8	BITS_MAX
water	126:20	0:0	8	;
water	127:3	0:0	6	nbitsmask
op	127:13	0:0	6	=
call	127:15	127:28	6	MAXCODE
arg	127:23	127:28	7	nbits
water	127:23	0:0	8	nbits
water	127:29	0:0	6	;
water	128:3	0:0	6	maxcodep
op	128:12	0:0	6	=
water	128:14	0:0	6	sp
op	128:16	0:0	6	->
water	128:18	0:0	6	dec_codetab
op	128:30	0:0	6	+
water	128:32	0:0	6	nbitsmask
water	128:41	0:0	6	;
water	129:2	0:0	6	}
water	130:2	0:0	4	oldcodep
op	130:11	0:0	4	=
water	130:13	0:0	4	codep
water	130:18	0:0	4	;
if	131:2	169:2	4	(code >= 256)
cond	131:6	131:14	5	code >= 256
water	131:6	0:0	6	code
op	131:11	0:0	6	>=
water	131:14	0:0	6	256
stmts	131:19	169:2	5	
water	131:19	0:0	6	{
if	136:3	142:3	6	(codep -> length == 0)
cond	136:6	136:23	7	codep -> length == 0
water	136:6	0:0	8	codep
op	136:11	0:0	8	->
water	136:13	0:0	8	length
op	136:20	0:0	8	==
water	136:23	0:0	8	0
stmts	136:26	142:3	7	
water	136:26	0:0	8	{
call	137:4	140:20	8	TIFFErrorExt
arg	137:17	137:36	9	tif->tif_clientdata
water	137:17	0:0	10	tif
op	137:20	0:0	10	->
water	137:22	0:0	10	tif_clientdata
arg	137:38	137:44	9	module
water	137:38	0:0	10	module
arg	138:8	139:56	9	"Wrong length of decoded ""string: data probably corrupted at scanline %d"
water	138:8	0:0	10	"Wrong length of decoded "
water	139:8	0:0	10	"string: data probably corrupted at scanline %d"
arg	140:8	140:20	9	tif->tif_row
water	140:8	0:0	10	tif
op	140:11	0:0	10	->
water	140:13	0:0	10	tif_row
water	140:21	0:0	8	;
return	141:4	141:14	8	(0)
water	141:11	0:0	9	(
water	141:12	0:0	9	0
water	141:13	0:0	9	)
water	142:3	0:0	8	}
if	143:3	161:3	6	(codep -> length > occ)
cond	143:7	143:23	7	codep -> length > occ
water	143:7	0:0	8	codep
op	143:12	0:0	8	->
water	143:14	0:0	8	length
op	143:21	0:0	8	>
water	143:23	0:0	8	occ
stmts	143:28	161:3	7	
water	143:28	0:0	8	{
water	150:4	0:0	8	sp
op	150:6	0:0	8	->
water	150:8	0:0	8	dec_codep
op	150:18	0:0	8	=
water	150:20	0:0	8	codep
water	150:25	0:0	8	;
do	151:4	153:4	8	(codep -> length > occ)
cond	153:13	153:29	9	codep -> length > occ
water	153:13	0:0	10	codep
op	153:18	0:0	10	->
water	153:20	0:0	10	length
op	153:27	0:0	10	>
water	153:29	0:0	10	occ
stmts	151:7	153:4	9	
water	151:7	0:0	10	{
water	152:5	0:0	10	codep
op	152:11	0:0	10	=
water	152:13	0:0	10	codep
op	152:18	0:0	10	->
water	152:20	0:0	10	next
water	152:24	0:0	10	;
water	153:4	0:0	10	}
water	153:33	0:0	8	;
water	154:4	0:0	8	sp
op	154:6	0:0	8	->
water	154:8	0:0	8	dec_restart
op	154:20	0:0	8	=
water	154:22	0:0	8	occ
water	154:25	0:0	8	;
water	155:4	0:0	8	tp
op	155:7	0:0	8	=
water	155:9	0:0	8	op
op	155:12	0:0	8	+
water	155:14	0:0	8	occ
water	155:17	0:0	8	;
do	156:4	159:4	8	(-- occ)
cond	159:14	159:16	9	-- occ
op	159:14	0:0	10	--
water	159:16	0:0	10	occ
stmts	156:8	159:4	9	
water	156:8	0:0	10	{
op	157:5	0:0	10	*
op	157:6	0:0	10	--
water	157:8	0:0	10	tp
op	157:11	0:0	10	=
water	157:13	0:0	10	codep
op	157:18	0:0	10	->
water	157:20	0:0	10	value
water	157:25	0:0	10	;
water	158:5	0:0	10	codep
op	158:11	0:0	10	=
water	158:13	0:0	10	codep
op	158:18	0:0	10	->
water	158:20	0:0	10	next
water	158:24	0:0	10	;
water	159:4	0:0	10	}
water	159:20	0:0	8	;
break	160:4	160:9	8	
water	161:3	0:0	8	}
call	162:3	162:30	6	assert
arg	162:10	162:30	7	occ>=codep->length
water	162:10	0:0	8	occ
op	162:14	0:0	8	>=
water	162:17	0:0	8	codep
op	162:22	0:0	8	->
water	162:24	0:0	8	length
water	162:31	0:0	6	;
water	163:3	0:0	6	op
op	163:6	0:0	6	+=
water	163:9	0:0	6	codep
op	163:14	0:0	6	->
water	163:16	0:0	6	length
water	163:22	0:0	6	;
water	164:3	0:0	6	occ
op	164:7	0:0	6	-=
water	164:10	0:0	6	codep
op	164:15	0:0	6	->
water	164:17	0:0	6	length
water	164:23	0:0	6	;
water	165:3	0:0	6	tp
op	165:6	0:0	6	=
water	165:8	0:0	6	op
water	165:10	0:0	6	;
do	166:3	168:3	6	(( codep = codep -> next ) != NULL)
cond	168:12	168:37	7	( codep = codep -> next ) != NULL
water	168:12	0:0	8	(
water	168:13	0:0	8	codep
op	168:19	0:0	8	=
water	168:21	0:0	8	codep
op	168:26	0:0	8	->
water	168:28	0:0	8	next
water	168:32	0:0	8	)
op	168:34	0:0	8	!=
water	168:37	0:0	8	NULL
stmts	166:6	168:3	7	
water	166:6	0:0	8	{
op	167:4	0:0	8	*
op	167:5	0:0	8	--
water	167:7	0:0	8	tp
op	167:10	0:0	8	=
water	167:12	0:0	8	codep
op	167:17	0:0	8	->
water	167:19	0:0	8	value
water	167:24	0:0	8	;
water	168:3	0:0	8	}
water	168:43	0:0	6	;
water	169:2	0:0	6	}
else	169:4	172:2	4
stmts	169:9	172:2	5	
water	169:9	0:0	6	{
op	170:3	0:0	6	*
water	170:4	0:0	6	op
op	170:6	0:0	6	++
op	170:9	0:0	6	=
water	170:11	0:0	6	(
water	170:12	0:0	6	char
water	170:16	0:0	6	)
water	170:17	0:0	6	code
water	170:21	0:0	6	;
water	171:3	0:0	6	occ
op	171:6	0:0	6	--
water	171:8	0:0	6	;
water	172:2	0:0	6	}
water	173:1	0:0	4	}
water	175:1	0:0	2	tif
op	175:4	0:0	2	->
water	175:6	0:0	2	tif_rawcc
op	175:16	0:0	2	-=
call	175:19	175:60	2	(tmsize_t)
arg	175:31	175:60	3	(uint8*)bp-tif->tif_rawcp
water	175:31	0:0	4	(
water	175:32	0:0	4	uint8
op	175:37	0:0	4	*
water	175:38	0:0	4	)
water	175:40	0:0	4	bp
op	175:43	0:0	4	-
water	175:45	0:0	4	tif
op	175:48	0:0	4	->
water	175:50	0:0	4	tif_rawcp
water	175:61	0:0	2	;
water	176:1	0:0	2	tif
op	176:4	0:0	2	->
water	176:6	0:0	2	tif_rawcp
op	176:16	0:0	2	=
water	176:18	0:0	2	(
water	176:19	0:0	2	uint8
op	176:24	0:0	2	*
water	176:25	0:0	2	)
water	176:27	0:0	2	bp
water	176:29	0:0	2	;
water	177:1	0:0	2	sp
op	177:3	0:0	2	->
water	177:5	0:0	2	lzw_nbits
op	177:15	0:0	2	=
water	177:17	0:0	2	(
water	177:18	0:0	2	unsigned
water	177:27	0:0	2	short
water	177:32	0:0	2	)
water	177:33	0:0	2	nbits
water	177:38	0:0	2	;
water	178:1	0:0	2	sp
op	178:3	0:0	2	->
water	178:5	0:0	2	lzw_nextdata
op	178:18	0:0	2	=
water	178:20	0:0	2	nextdata
water	178:28	0:0	2	;
water	179:1	0:0	2	sp
op	179:3	0:0	2	->
water	179:5	0:0	2	lzw_nextbits
op	179:18	0:0	2	=
water	179:20	0:0	2	nextbits
water	179:28	0:0	2	;
water	180:1	0:0	2	sp
op	180:3	0:0	2	->
water	180:5	0:0	2	dec_nbitsmask
op	180:19	0:0	2	=
water	180:21	0:0	2	nbitsmask
water	180:30	0:0	2	;
water	181:1	0:0	2	sp
op	181:3	0:0	2	->
water	181:5	0:0	2	dec_oldcodep
op	181:18	0:0	2	=
water	181:20	0:0	2	oldcodep
water	181:28	0:0	2	;
water	182:1	0:0	2	sp
op	182:3	0:0	2	->
water	182:5	0:0	2	dec_free_entp
op	182:19	0:0	2	=
water	182:21	0:0	2	free_entp
water	182:30	0:0	2	;
water	183:1	0:0	2	sp
op	183:3	0:0	2	->
water	183:5	0:0	2	dec_maxcodep
op	183:18	0:0	2	=
water	183:20	0:0	2	maxcodep
water	183:28	0:0	2	;
if	185:1	196:1	2	(occ > 0)
cond	185:5	185:11	3	occ > 0
water	185:5	0:0	4	occ
op	185:9	0:0	4	>
water	185:11	0:0	4	0
stmts	185:14	196:1	3	
water	185:14	0:0	4	{
call	187:2	189:44	4	TIFFErrorExt
arg	187:15	187:34	5	tif->tif_clientdata
water	187:15	0:0	6	tif
op	187:18	0:0	6	->
water	187:20	0:0	6	tif_clientdata
arg	187:36	187:42	5	module
water	187:36	0:0	6	module
arg	188:3	188:55	5	"Not enough data at scanline %d (short %I64d bytes)"
water	188:3	0:0	6	"Not enough data at scanline %d (short %I64d bytes)"
arg	189:8	189:20	5	tif->tif_row
water	189:8	0:0	6	tif
op	189:11	0:0	6	->
water	189:13	0:0	6	tif_row
arg	189:22	189:44	5	(unsigned__int64)occ
water	189:22	0:0	6	(
water	189:23	0:0	6	unsigned
water	189:32	0:0	6	__int64
water	189:39	0:0	6	)
water	189:41	0:0	6	occ
water	189:45	0:0	4	;
call	191:2	193:46	4	TIFFErrorExt
arg	191:15	191:34	5	tif->tif_clientdata
water	191:15	0:0	6	tif
op	191:18	0:0	6	->
water	191:20	0:0	6	tif_clientdata
arg	191:36	191:42	5	module
water	191:36	0:0	6	module
arg	192:3	192:54	5	"Not enough data at scanline %d (short %llu bytes)"
water	192:3	0:0	6	"Not enough data at scanline %d (short %llu bytes)"
arg	193:8	193:20	5	tif->tif_row
water	193:8	0:0	6	tif
op	193:11	0:0	6	->
water	193:13	0:0	6	tif_row
arg	193:22	193:46	5	(unsignedlonglong)occ
water	193:22	0:0	6	(
water	193:23	0:0	6	unsigned
water	193:32	0:0	6	long
water	193:37	0:0	6	long
water	193:41	0:0	6	)
water	193:43	0:0	6	occ
water	193:47	0:0	4	;
return	195:2	195:12	4	(0)
water	195:9	0:0	5	(
water	195:10	0:0	5	0
water	195:11	0:0	5	)
water	196:1	0:0	4	}
return	197:1	197:11	2	(1)
water	197:8	0:0	3	(
water	197:9	0:0	3	1
water	197:10	0:0	3	)
