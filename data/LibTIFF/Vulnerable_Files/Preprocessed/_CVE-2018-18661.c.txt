func	1:0	220:0	0	static int	LZWDecode
params	2:9	0:0	1	
param	2:10	2:19	2	TIFF *	tif
param	2:21	2:31	2	uint8 *	op0
param	2:33	2:46	2	tmsize_t	occ0
param	2:48	2:56	2	uint16	s
stmnts	4:1	219:11	1	
water	4:1	0:0	2	static
water	4:8	0:0	2	const
water	4:14	0:0	2	char
water	4:19	0:0	2	module
op	4:25	0:0	2	[
op	4:26	0:0	2	]
op	4:28	0:0	2	=
water	4:30	0:0	2	"LZWDecode"
water	4:41	0:0	2	;
decl	5:1	5:38	2	LZWCodecState	*sp
op	5:19	0:0	2	=
call	5:21	5:37	3	DecoderState
arg	5:34	5:37	4	tif
water	5:34	0:0	5	tif
decl	6:1	6:23	2	char	*op
op	6:10	0:0	2	=
water	6:12	0:0	2	(
water	6:13	0:0	2	char
op	6:17	0:0	2	*
water	6:18	0:0	2	)
water	6:20	0:0	2	op0
decl	7:1	7:23	2	long	occ
op	7:10	0:0	2	=
water	7:12	0:0	2	(
water	7:13	0:0	2	long
water	7:17	0:0	2	)
water	7:19	0:0	2	occ0
decl	8:1	8:9	2	char	*tp
decl	9:1	9:18	2	unsigned char	*bp
decl	10:1	10:13	2	hcode_t	code
decl	11:1	11:8	2	int	len
decl	12:1	12:32	2	long	nbits
water	12:11	0:0	2	,
decl	12:1	12:32	2	long	nextbits
water	12:21	0:0	2	,
decl	12:1	12:32	2	long	nbitsmask
decl	13:8	13:30	2	unsigned long	nextdata
decl	14:1	14:48	2	code_t	*codep
water	14:14	0:0	2	,
decl	14:1	14:48	2	code_t	*free_entp
water	14:26	0:0	2	,
decl	14:1	14:48	2	code_t	*maxcodep
water	14:37	0:0	2	,
decl	14:1	14:48	2	code_t	*oldcodep
water	16:1	0:0	2	(
water	16:2	0:0	2	void
water	16:6	0:0	2	)
water	16:8	0:0	2	s
water	16:9	0:0	2	;
call	17:1	17:18	2	assert
arg	17:8	17:18	3	sp!=NULL
water	17:8	0:0	4	sp
op	17:11	0:0	4	!=
water	17:14	0:0	4	NULL
water	17:19	0:0	2	;
call	18:8	18:38	2	assert
arg	18:15	18:38	3	sp->dec_codetab!=NULL
water	18:15	0:0	4	sp
op	18:17	0:0	4	->
water	18:19	0:0	4	dec_codetab
op	18:31	0:0	4	!=
water	18:34	0:0	4	NULL
water	18:39	0:0	2	;
if	23:1	24:19	2	(( tmsize_t ) occ != occ0)
cond	23:5	23:23	3	( tmsize_t ) occ != occ0
water	23:5	0:0	4	(
water	23:6	0:0	4	tmsize_t
water	23:14	0:0	4	)
water	23:16	0:0	4	occ
op	23:20	0:0	4	!=
water	23:23	0:0	4	occ0
stmts	24:9	24:19	3	
return	24:9	24:19	4	(0)
water	24:16	0:0	5	(
water	24:17	0:0	5	0
water	24:18	0:0	5	)
if	28:1	67:1	2	(sp -> dec_restart)
cond	28:5	28:9	3	sp -> dec_restart
water	28:5	0:0	4	sp
op	28:7	0:0	4	->
water	28:9	0:0	4	dec_restart
stmts	28:22	67:1	3	
water	28:22	0:0	4	{
decl	29:2	29:14	4	long	residue
water	31:2	0:0	4	codep
op	31:8	0:0	4	=
water	31:10	0:0	4	sp
op	31:12	0:0	4	->
water	31:14	0:0	4	dec_codep
water	31:23	0:0	4	;
water	32:2	0:0	4	residue
op	32:10	0:0	4	=
water	32:12	0:0	4	codep
op	32:17	0:0	4	->
water	32:19	0:0	4	length
op	32:26	0:0	4	-
water	32:28	0:0	4	sp
op	32:30	0:0	4	->
water	32:32	0:0	4	dec_restart
water	32:43	0:0	4	;
if	33:2	52:2	4	(residue > occ)
cond	33:6	33:16	5	residue > occ
water	33:6	0:0	6	residue
op	33:14	0:0	6	>
water	33:16	0:0	6	occ
stmts	33:21	52:2	5	
water	33:21	0:0	6	{
water	40:3	0:0	6	sp
op	40:5	0:0	6	->
water	40:7	0:0	6	dec_restart
op	40:19	0:0	6	+=
water	40:22	0:0	6	occ
water	40:25	0:0	6	;
do	41:3	43:3	6	(-- residue > occ && codep)
cond	43:12	43:31	7	-- residue > occ && codep
op	43:12	0:0	8	--
water	43:14	0:0	8	residue
op	43:22	0:0	8	>
water	43:24	0:0	8	occ
op	43:28	0:0	8	&&
water	43:31	0:0	8	codep
stmts	41:6	43:3	7	
water	41:6	0:0	8	{
water	42:4	0:0	8	codep
op	42:10	0:0	8	=
water	42:12	0:0	8	codep
op	42:17	0:0	8	->
water	42:19	0:0	8	next
water	42:23	0:0	8	;
water	43:3	0:0	8	}
water	43:37	0:0	6	;
if	44:3	50:3	6	(codep)
cond	44:7	44:7	7	codep
water	44:7	0:0	8	codep
stmts	44:14	50:3	7	
water	44:14	0:0	8	{
water	45:4	0:0	8	tp
op	45:7	0:0	8	=
water	45:9	0:0	8	op
op	45:12	0:0	8	+
water	45:14	0:0	8	occ
water	45:17	0:0	8	;
do	46:4	49:4	8	(-- occ && codep)
cond	49:13	49:22	9	-- occ && codep
op	49:13	0:0	10	--
water	49:15	0:0	10	occ
op	49:19	0:0	10	&&
water	49:22	0:0	10	codep
stmts	46:7	49:4	9	
water	46:7	0:0	10	{
op	47:5	0:0	10	*
op	47:6	0:0	10	--
water	47:8	0:0	10	tp
op	47:11	0:0	10	=
water	47:13	0:0	10	codep
op	47:18	0:0	10	->
water	47:20	0:0	10	value
water	47:25	0:0	10	;
water	48:5	0:0	10	codep
op	48:11	0:0	10	=
water	48:13	0:0	10	codep
op	48:18	0:0	10	->
water	48:20	0:0	10	next
water	48:24	0:0	10	;
water	49:4	0:0	10	}
water	49:28	0:0	8	;
water	50:3	0:0	8	}
return	51:3	51:13	6	(1)
water	51:10	0:0	7	(
water	51:11	0:0	7	1
water	51:12	0:0	7	)
water	52:2	0:0	6	}
water	56:2	0:0	4	op
op	56:5	0:0	4	+=
water	56:8	0:0	4	residue
water	56:15	0:0	4	;
water	57:2	0:0	4	occ
op	57:6	0:0	4	-=
water	57:9	0:0	4	residue
water	57:16	0:0	4	;
water	58:2	0:0	4	tp
op	58:5	0:0	4	=
water	58:7	0:0	4	op
water	58:9	0:0	4	;
do	59:2	65:2	4	(-- residue && codep)
cond	65:11	65:24	5	-- residue && codep
op	65:11	0:0	6	--
water	65:13	0:0	6	residue
op	65:21	0:0	6	&&
water	65:24	0:0	6	codep
stmts	59:5	65:2	5	
water	59:5	0:0	6	{
decl	60:3	60:8	6	int	t
op	61:3	0:0	6	--
water	61:5	0:0	6	tp
water	61:7	0:0	6	;
water	62:3	0:0	6	t
op	62:5	0:0	6	=
water	62:7	0:0	6	codep
op	62:12	0:0	6	->
water	62:14	0:0	6	value
water	62:19	0:0	6	;
water	63:3	0:0	6	codep
op	63:9	0:0	6	=
water	63:11	0:0	6	codep
op	63:16	0:0	6	->
water	63:18	0:0	6	next
water	63:22	0:0	6	;
op	64:3	0:0	6	*
water	64:4	0:0	6	tp
op	64:7	0:0	6	=
water	64:9	0:0	6	(
water	64:10	0:0	6	char
water	64:14	0:0	6	)
water	64:15	0:0	6	t
water	64:16	0:0	6	;
water	65:2	0:0	6	}
water	65:30	0:0	4	;
water	66:2	0:0	4	sp
op	66:4	0:0	4	->
water	66:6	0:0	4	dec_restart
op	66:18	0:0	4	=
water	66:20	0:0	4	0
water	66:21	0:0	4	;
water	67:1	0:0	4	}
water	69:1	0:0	2	bp
op	69:4	0:0	2	=
water	69:6	0:0	2	(
water	69:7	0:0	2	unsigned
water	69:16	0:0	2	char
op	69:21	0:0	2	*
water	69:22	0:0	2	)
water	69:23	0:0	2	tif
op	69:26	0:0	2	->
water	69:28	0:0	2	tif_rawcp
water	69:37	0:0	2	;
water	71:1	0:0	2	sp
op	71:3	0:0	2	->
water	71:5	0:0	2	dec_bitsleft
op	71:18	0:0	2	=
water	71:20	0:0	2	(
water	71:21	0:0	2	(
water	71:22	0:0	2	(
water	71:23	0:0	2	uint64
water	71:29	0:0	2	)
water	71:30	0:0	2	tif
op	71:33	0:0	2	->
water	71:35	0:0	2	tif_rawcc
water	71:44	0:0	2	)
op	71:46	0:0	2	<<
water	71:49	0:0	2	3
water	71:50	0:0	2	)
water	71:51	0:0	2	;
water	73:1	0:0	2	nbits
op	73:7	0:0	2	=
water	73:9	0:0	2	sp
op	73:11	0:0	2	->
water	73:13	0:0	2	lzw_nbits
water	73:22	0:0	2	;
water	74:1	0:0	2	nextdata
op	74:10	0:0	2	=
water	74:12	0:0	2	sp
op	74:14	0:0	2	->
water	74:16	0:0	2	lzw_nextdata
water	74:28	0:0	2	;
water	75:1	0:0	2	nextbits
op	75:10	0:0	2	=
water	75:12	0:0	2	sp
op	75:14	0:0	2	->
water	75:16	0:0	2	lzw_nextbits
water	75:28	0:0	2	;
water	76:1	0:0	2	nbitsmask
op	76:11	0:0	2	=
water	76:13	0:0	2	sp
op	76:15	0:0	2	->
water	76:17	0:0	2	dec_nbitsmask
water	76:30	0:0	2	;
water	77:1	0:0	2	oldcodep
op	77:10	0:0	2	=
water	77:12	0:0	2	sp
op	77:14	0:0	2	->
water	77:16	0:0	2	dec_oldcodep
water	77:28	0:0	2	;
water	78:1	0:0	2	free_entp
op	78:11	0:0	2	=
water	78:13	0:0	2	sp
op	78:15	0:0	2	->
water	78:17	0:0	2	dec_free_entp
water	78:30	0:0	2	;
water	79:1	0:0	2	maxcodep
op	79:10	0:0	2	=
water	79:12	0:0	2	sp
op	79:14	0:0	2	->
water	79:16	0:0	2	dec_maxcodep
water	79:28	0:0	2	;
while	81:1	195:1	2	(occ > 0)
cond	81:8	81:14	3	occ > 0
water	81:8	0:0	4	occ
op	81:12	0:0	4	>
water	81:14	0:0	4	0
stmts	81:17	195:1	3	
water	81:17	0:0	4	{
call	82:2	82:41	4	NextCode
arg	82:11	82:14	5	tif
water	82:11	0:0	6	tif
arg	82:16	82:18	5	sp
water	82:16	0:0	6	sp
arg	82:20	82:22	5	bp
water	82:20	0:0	6	bp
arg	82:24	82:28	5	code
water	82:24	0:0	6	code
arg	82:30	82:41	5	GetNextCode
water	82:30	0:0	6	GetNextCode
water	82:42	0:0	4	;
if	83:2	84:8	4	(code == CODE_EOI)
cond	83:6	83:14	5	code == CODE_EOI
water	83:6	0:0	6	code
op	83:11	0:0	6	==
water	83:14	0:0	6	CODE_EOI
stmts	84:3	84:8	5	
break	84:3	84:8	6	
if	85:2	107:2	4	(code == CODE_CLEAR)
cond	85:6	85:14	5	code == CODE_CLEAR
water	85:6	0:0	6	code
op	85:11	0:0	6	==
water	85:14	0:0	6	CODE_CLEAR
stmts	85:26	107:2	5	
water	85:26	0:0	6	{
do	86:3	94:3	6	(code == CODE_CLEAR)
cond	94:12	94:20	7	code == CODE_CLEAR
water	94:12	0:0	8	code
op	94:17	0:0	8	==
water	94:20	0:0	8	CODE_CLEAR
stmts	86:6	94:3	7	
water	86:6	0:0	8	{
water	87:4	0:0	8	free_entp
op	87:14	0:0	8	=
water	87:16	0:0	8	sp
op	87:18	0:0	8	->
water	87:20	0:0	8	dec_codetab
op	87:32	0:0	8	+
water	87:34	0:0	8	CODE_FIRST
water	87:44	0:0	8	;
call	88:4	89:47	8	_TIFFmemset
arg	88:16	88:25	9	free_entp
water	88:16	0:0	10	free_entp
arg	88:27	88:28	9	0
water	88:27	0:0	10	0
arg	89:9	89:47	9	(CSIZE-CODE_FIRST)*sizeof(code_t)
water	89:9	0:0	10	(
water	89:10	0:0	10	CSIZE
op	89:16	0:0	10	-
water	89:18	0:0	10	CODE_FIRST
water	89:28	0:0	10	)
op	89:30	0:0	10	*
op	89:32	0:0	10	sizeof
water	89:39	0:0	10	(
water	89:40	0:0	10	code_t
water	89:46	0:0	10	)
water	89:48	0:0	8	;
water	90:4	0:0	8	nbits
op	90:10	0:0	8	=
water	90:12	0:0	8	BITS_MIN
water	90:20	0:0	8	;
water	91:4	0:0	8	nbitsmask
op	91:14	0:0	8	=
call	91:16	91:32	8	MAXCODE
arg	91:24	91:32	9	BITS_MIN
water	91:24	0:0	10	BITS_MIN
water	91:33	0:0	8	;
water	92:4	0:0	8	maxcodep
op	92:13	0:0	8	=
water	92:15	0:0	8	sp
op	92:17	0:0	8	->
water	92:19	0:0	8	dec_codetab
op	92:31	0:0	8	+
water	92:33	0:0	8	nbitsmask
op	92:42	0:0	8	-
water	92:43	0:0	8	1
water	92:44	0:0	8	;
call	93:4	93:43	8	NextCode
arg	93:13	93:16	9	tif
water	93:13	0:0	10	tif
arg	93:18	93:20	9	sp
water	93:18	0:0	10	sp
arg	93:22	93:24	9	bp
water	93:22	0:0	10	bp
arg	93:26	93:30	9	code
water	93:26	0:0	10	code
arg	93:32	93:43	9	GetNextCode
water	93:32	0:0	10	GetNextCode
water	93:44	0:0	8	;
water	94:3	0:0	8	}
water	94:31	0:0	6	;
if	95:3	96:9	6	(code == CODE_EOI)
cond	95:7	95:15	7	code == CODE_EOI
water	95:7	0:0	8	code
op	95:12	0:0	8	==
water	95:15	0:0	8	CODE_EOI
stmts	96:4	96:9	7	
break	96:4	96:9	8	
if	97:3	102:3	6	(code > CODE_CLEAR)
cond	97:7	97:14	7	code > CODE_CLEAR
water	97:7	0:0	8	code
op	97:12	0:0	8	>
water	97:14	0:0	8	CODE_CLEAR
stmts	97:26	102:3	7	
water	97:26	0:0	8	{
call	98:4	100:22	8	TIFFErrorExt
arg	98:17	98:36	9	tif->tif_clientdata
water	98:17	0:0	10	tif
op	98:20	0:0	10	->
water	98:22	0:0	10	tif_clientdata
arg	98:38	98:51	9	tif->tif_name
water	98:38	0:0	10	tif
op	98:41	0:0	10	->
water	98:43	0:0	10	tif_name
arg	99:4	99:51	9	"LZWDecode: Corrupted LZW table at scanline %d"
water	99:4	0:0	10	"LZWDecode: Corrupted LZW table at scanline %d"
arg	100:10	100:22	9	tif->tif_row
water	100:10	0:0	10	tif
op	100:13	0:0	10	->
water	100:15	0:0	10	tif_row
water	100:23	0:0	8	;
return	101:4	101:14	8	(0)
water	101:11	0:0	9	(
water	101:12	0:0	9	0
water	101:13	0:0	9	)
water	102:3	0:0	8	}
op	103:3	0:0	6	*
water	103:4	0:0	6	op
op	103:6	0:0	6	++
op	103:9	0:0	6	=
water	103:11	0:0	6	(
water	103:12	0:0	6	char
water	103:16	0:0	6	)
water	103:17	0:0	6	code
water	103:21	0:0	6	;
water	104:3	0:0	6	occ
op	104:6	0:0	6	--
water	104:8	0:0	6	;
water	105:3	0:0	6	oldcodep
op	105:12	0:0	6	=
water	105:14	0:0	6	sp
op	105:16	0:0	6	->
water	105:18	0:0	6	dec_codetab
op	105:30	0:0	6	+
water	105:32	0:0	6	code
water	105:36	0:0	6	;
continue	106:3	106:11	6	
water	107:2	0:0	6	}
water	108:2	0:0	4	codep
op	108:8	0:0	4	=
water	108:10	0:0	4	sp
op	108:12	0:0	4	->
water	108:14	0:0	4	dec_codetab
op	108:26	0:0	4	+
water	108:28	0:0	4	code
water	108:32	0:0	4	;
if	113:2	119:2	4	(free_entp < & sp -> dec_codetab [ 0 ] || free_entp >= & sp -> dec_codetab [ CSIZE ])
cond	113:6	114:41	5	free_entp < & sp -> dec_codetab [ 0 ] || free_entp >= & sp -> dec_codetab [ CSIZE ]
water	113:6	0:0	6	free_entp
op	113:16	0:0	6	<
op	113:18	0:0	6	&
water	113:19	0:0	6	sp
op	113:21	0:0	6	->
water	113:23	0:0	6	dec_codetab
op	113:34	0:0	6	[
water	113:35	0:0	6	0
op	113:36	0:0	6	]
op	113:38	0:0	6	||
water	114:6	0:0	6	free_entp
op	114:16	0:0	6	>=
op	114:19	0:0	6	&
water	114:20	0:0	6	sp
op	114:22	0:0	6	->
water	114:24	0:0	6	dec_codetab
op	114:35	0:0	6	[
water	114:36	0:0	6	CSIZE
op	114:41	0:0	6	]
stmts	114:44	119:2	5	
water	114:44	0:0	6	{
call	115:3	117:19	6	TIFFErrorExt
arg	115:16	115:35	7	tif->tif_clientdata
water	115:16	0:0	8	tif
op	115:19	0:0	8	->
water	115:21	0:0	8	tif_clientdata
arg	115:37	115:43	7	module
water	115:37	0:0	8	module
arg	116:7	116:43	7	"Corrupted LZW table at scanline %d"
water	116:7	0:0	8	"Corrupted LZW table at scanline %d"
arg	117:7	117:19	7	tif->tif_row
water	117:7	0:0	8	tif
op	117:10	0:0	8	->
water	117:12	0:0	8	tif_row
water	117:20	0:0	6	;
return	118:3	118:13	6	(0)
water	118:10	0:0	7	(
water	118:11	0:0	7	0
water	118:12	0:0	7	)
water	119:2	0:0	6	}
water	121:2	0:0	4	free_entp
op	121:11	0:0	4	->
water	121:13	0:0	4	next
op	121:18	0:0	4	=
water	121:20	0:0	4	oldcodep
water	121:28	0:0	4	;
if	122:2	128:2	4	(free_entp -> next < & sp -> dec_codetab [ 0 ] || free_entp -> next >= & sp -> dec_codetab [ CSIZE ])
cond	122:6	123:47	5	free_entp -> next < & sp -> dec_codetab [ 0 ] || free_entp -> next >= & sp -> dec_codetab [ CSIZE ]
water	122:6	0:0	6	free_entp
op	122:15	0:0	6	->
water	122:17	0:0	6	next
op	122:22	0:0	6	<
op	122:24	0:0	6	&
water	122:25	0:0	6	sp
op	122:27	0:0	6	->
water	122:29	0:0	6	dec_codetab
op	122:40	0:0	6	[
water	122:41	0:0	6	0
op	122:42	0:0	6	]
op	122:44	0:0	6	||
water	123:6	0:0	6	free_entp
op	123:15	0:0	6	->
water	123:17	0:0	6	next
op	123:22	0:0	6	>=
op	123:25	0:0	6	&
water	123:26	0:0	6	sp
op	123:28	0:0	6	->
water	123:30	0:0	6	dec_codetab
op	123:41	0:0	6	[
water	123:42	0:0	6	CSIZE
op	123:47	0:0	6	]
stmts	123:50	128:2	5	
water	123:50	0:0	6	{
call	124:3	126:19	6	TIFFErrorExt
arg	124:16	124:35	7	tif->tif_clientdata
water	124:16	0:0	8	tif
op	124:19	0:0	8	->
water	124:21	0:0	8	tif_clientdata
arg	124:37	124:43	7	module
water	124:37	0:0	8	module
arg	125:7	125:43	7	"Corrupted LZW table at scanline %d"
water	125:7	0:0	8	"Corrupted LZW table at scanline %d"
arg	126:7	126:19	7	tif->tif_row
water	126:7	0:0	8	tif
op	126:10	0:0	8	->
water	126:12	0:0	8	tif_row
water	126:20	0:0	6	;
return	127:3	127:13	6	(0)
water	127:10	0:0	7	(
water	127:11	0:0	7	0
water	127:12	0:0	7	)
water	128:2	0:0	6	}
water	129:2	0:0	4	free_entp
op	129:11	0:0	4	->
water	129:13	0:0	4	firstchar
op	129:23	0:0	4	=
water	129:25	0:0	4	free_entp
op	129:34	0:0	4	->
water	129:36	0:0	4	next
op	129:40	0:0	4	->
water	129:42	0:0	4	firstchar
water	129:51	0:0	4	;
water	130:2	0:0	4	free_entp
op	130:11	0:0	4	->
water	130:13	0:0	4	length
op	130:20	0:0	4	=
water	130:22	0:0	4	free_entp
op	130:31	0:0	4	->
water	130:33	0:0	4	next
op	130:37	0:0	4	->
water	130:39	0:0	4	length
op	130:45	0:0	4	+
water	130:46	0:0	4	1
water	130:47	0:0	4	;
water	131:2	0:0	4	free_entp
op	131:11	0:0	4	->
water	131:13	0:0	4	value
op	131:19	0:0	4	=
water	131:21	0:0	4	(
water	131:22	0:0	4	codep
op	131:28	0:0	4	<
water	131:30	0:0	4	free_entp
water	131:39	0:0	4	)
water	131:41	0:0	4	?
water	132:6	0:0	4	codep
op	132:11	0:0	4	->
water	132:13	0:0	4	firstchar
water	132:23	0:0	4	:
water	132:25	0:0	4	free_entp
op	132:34	0:0	4	->
water	132:36	0:0	4	firstchar
water	132:45	0:0	4	;
if	133:2	138:2	4	(++ free_entp > maxcodep)
cond	133:6	133:20	5	++ free_entp > maxcodep
op	133:6	0:0	6	++
water	133:8	0:0	6	free_entp
op	133:18	0:0	6	>
water	133:20	0:0	6	maxcodep
stmts	133:30	138:2	5	
water	133:30	0:0	6	{
if	134:3	135:20	6	(++ nbits > BITS_MAX)
cond	134:7	134:17	7	++ nbits > BITS_MAX
op	134:7	0:0	8	++
water	134:9	0:0	8	nbits
op	134:15	0:0	8	>
water	134:17	0:0	8	BITS_MAX
stmts	135:4	135:20	7	
water	135:4	0:0	8	nbits
op	135:10	0:0	8	=
water	135:12	0:0	8	BITS_MAX
water	135:20	0:0	8	;
water	136:3	0:0	6	nbitsmask
op	136:13	0:0	6	=
call	136:15	136:28	6	MAXCODE
arg	136:23	136:28	7	nbits
water	136:23	0:0	8	nbits
water	136:29	0:0	6	;
water	137:3	0:0	6	maxcodep
op	137:12	0:0	6	=
water	137:14	0:0	6	sp
op	137:16	0:0	6	->
water	137:18	0:0	6	dec_codetab
op	137:30	0:0	6	+
water	137:32	0:0	6	nbitsmask
op	137:41	0:0	6	-
water	137:42	0:0	6	1
water	137:43	0:0	6	;
water	138:2	0:0	6	}
water	139:2	0:0	4	oldcodep
op	139:11	0:0	4	=
water	139:13	0:0	4	codep
water	139:18	0:0	4	;
if	140:2	191:2	4	(code >= 256)
cond	140:6	140:14	5	code >= 256
water	140:6	0:0	6	code
op	140:11	0:0	6	>=
water	140:14	0:0	6	256
stmts	140:19	191:2	5	
water	140:19	0:0	6	{
if	145:3	151:3	6	(codep -> length == 0)
cond	145:6	145:23	7	codep -> length == 0
water	145:6	0:0	8	codep
op	145:11	0:0	8	->
water	145:13	0:0	8	length
op	145:20	0:0	8	==
water	145:23	0:0	8	0
stmts	145:26	151:3	7	
water	145:26	0:0	8	{
call	146:4	149:20	8	TIFFErrorExt
arg	146:17	146:36	9	tif->tif_clientdata
water	146:17	0:0	10	tif
op	146:20	0:0	10	->
water	146:22	0:0	10	tif_clientdata
arg	146:38	146:44	9	module
water	146:38	0:0	10	module
arg	147:8	148:48	9	"Wrong length of decoded string: ""data probably corrupted at scanline %d"
water	147:8	0:0	10	"Wrong length of decoded string: "
water	148:8	0:0	10	"data probably corrupted at scanline %d"
arg	149:8	149:20	9	tif->tif_row
water	149:8	0:0	10	tif
op	149:11	0:0	10	->
water	149:13	0:0	10	tif_row
water	149:21	0:0	8	;
return	150:4	150:14	8	(0)
water	150:11	0:0	9	(
water	150:12	0:0	9	0
water	150:13	0:0	9	)
water	151:3	0:0	8	}
if	152:3	174:3	6	(codep -> length > occ)
cond	152:7	152:23	7	codep -> length > occ
water	152:7	0:0	8	codep
op	152:12	0:0	8	->
water	152:14	0:0	8	length
op	152:21	0:0	8	>
water	152:23	0:0	8	occ
stmts	152:28	174:3	7	
water	152:28	0:0	8	{
water	159:4	0:0	8	sp
op	159:6	0:0	8	->
water	159:8	0:0	8	dec_codep
op	159:18	0:0	8	=
water	159:20	0:0	8	codep
water	159:25	0:0	8	;
do	160:4	162:4	8	(codep && codep -> length > occ)
cond	162:13	162:38	9	codep && codep -> length > occ
water	162:13	0:0	10	codep
op	162:19	0:0	10	&&
water	162:22	0:0	10	codep
op	162:27	0:0	10	->
water	162:29	0:0	10	length
op	162:36	0:0	10	>
water	162:38	0:0	10	occ
stmts	160:7	162:4	9	
water	160:7	0:0	10	{
water	161:5	0:0	10	codep
op	161:11	0:0	10	=
water	161:13	0:0	10	codep
op	161:18	0:0	10	->
water	161:20	0:0	10	next
water	161:24	0:0	10	;
water	162:4	0:0	10	}
water	162:42	0:0	8	;
if	163:4	172:4	8	(codep)
cond	163:8	163:8	9	codep
water	163:8	0:0	10	codep
stmts	163:15	172:4	9	
water	163:15	0:0	10	{
water	164:5	0:0	10	sp
op	164:7	0:0	10	->
water	164:9	0:0	10	dec_restart
op	164:21	0:0	10	=
water	164:23	0:0	10	(
water	164:24	0:0	10	long
water	164:28	0:0	10	)
water	164:29	0:0	10	occ
water	164:32	0:0	10	;
water	165:5	0:0	10	tp
op	165:8	0:0	10	=
water	165:10	0:0	10	op
op	165:13	0:0	10	+
water	165:15	0:0	10	occ
water	165:18	0:0	10	;
do	166:5	169:5	10	(-- occ && codep)
cond	169:15	169:24	11	-- occ && codep
op	169:15	0:0	12	--
water	169:17	0:0	12	occ
op	169:21	0:0	12	&&
water	169:24	0:0	12	codep
stmts	166:9	169:5	11	
water	166:9	0:0	12	{
op	167:6	0:0	12	*
op	167:7	0:0	12	--
water	167:9	0:0	12	tp
op	167:12	0:0	12	=
water	167:14	0:0	12	codep
op	167:19	0:0	12	->
water	167:21	0:0	12	value
water	167:26	0:0	12	;
water	168:6	0:0	12	codep
op	168:12	0:0	12	=
water	168:14	0:0	12	codep
op	168:19	0:0	12	->
water	168:21	0:0	12	next
water	168:25	0:0	12	;
water	169:5	0:0	12	}
water	169:30	0:0	10	;
if	170:5	171:27	10	(codep)
cond	170:9	170:9	11	codep
water	170:9	0:0	12	codep
stmts	171:6	171:27	11	
call	171:6	171:26	12	codeLoop
arg	171:15	171:18	13	tif
water	171:15	0:0	14	tif
arg	171:20	171:26	13	module
water	171:20	0:0	14	module
water	171:27	0:0	12	;
water	172:4	0:0	10	}
break	173:4	173:9	8	
water	174:3	0:0	8	}
water	175:3	0:0	6	len
op	175:7	0:0	6	=
water	175:9	0:0	6	codep
op	175:14	0:0	6	->
water	175:16	0:0	6	length
water	175:22	0:0	6	;
water	176:3	0:0	6	tp
op	176:6	0:0	6	=
water	176:8	0:0	6	op
op	176:11	0:0	6	+
water	176:13	0:0	6	len
water	176:16	0:0	6	;
do	177:3	183:3	6	(codep && tp > op)
cond	183:12	183:26	7	codep && tp > op
water	183:12	0:0	8	codep
op	183:18	0:0	8	&&
water	183:21	0:0	8	tp
op	183:24	0:0	8	>
water	183:26	0:0	8	op
stmts	177:6	183:3	7	
water	177:6	0:0	8	{
decl	178:4	178:9	8	int	t
op	179:4	0:0	8	--
water	179:6	0:0	8	tp
water	179:8	0:0	8	;
water	180:4	0:0	8	t
op	180:6	0:0	8	=
water	180:8	0:0	8	codep
op	180:13	0:0	8	->
water	180:15	0:0	8	value
water	180:20	0:0	8	;
water	181:4	0:0	8	codep
op	181:10	0:0	8	=
water	181:12	0:0	8	codep
op	181:17	0:0	8	->
water	181:19	0:0	8	next
water	181:23	0:0	8	;
op	182:4	0:0	8	*
water	182:5	0:0	8	tp
op	182:8	0:0	8	=
water	182:10	0:0	8	(
water	182:11	0:0	8	char
water	182:15	0:0	8	)
water	182:16	0:0	8	t
water	182:17	0:0	8	;
water	183:3	0:0	8	}
water	183:29	0:0	6	;
if	184:3	187:3	6	(codep)
cond	184:7	184:7	7	codep
water	184:7	0:0	8	codep
stmts	184:14	187:3	7	
water	184:14	0:0	8	{
call	185:7	185:27	8	codeLoop
arg	185:16	185:19	9	tif
water	185:16	0:0	10	tif
arg	185:21	185:27	9	module
water	185:21	0:0	10	module
water	185:28	0:0	8	;
break	186:7	186:12	8	
water	187:3	0:0	8	}
call	188:3	188:20	6	assert
arg	188:10	188:20	7	occ>=len
water	188:10	0:0	8	occ
op	188:14	0:0	8	>=
water	188:17	0:0	8	len
water	188:21	0:0	6	;
water	189:3	0:0	6	op
op	189:6	0:0	6	+=
water	189:9	0:0	6	len
water	189:12	0:0	6	;
water	190:3	0:0	6	occ
op	190:7	0:0	6	-=
water	190:10	0:0	6	len
water	190:13	0:0	6	;
water	191:2	0:0	6	}
else	191:4	194:2	4
stmts	191:9	194:2	5	
water	191:9	0:0	6	{
op	192:3	0:0	6	*
water	192:4	0:0	6	op
op	192:6	0:0	6	++
op	192:9	0:0	6	=
water	192:11	0:0	6	(
water	192:12	0:0	6	char
water	192:16	0:0	6	)
water	192:17	0:0	6	code
water	192:21	0:0	6	;
water	193:3	0:0	6	occ
op	193:6	0:0	6	--
water	193:8	0:0	6	;
water	194:2	0:0	6	}
water	195:1	0:0	4	}
water	197:1	0:0	2	tif
op	197:4	0:0	2	->
water	197:6	0:0	2	tif_rawcc
op	197:16	0:0	2	-=
call	197:19	197:60	2	(tmsize_t)
arg	197:31	197:60	3	(uint8*)bp-tif->tif_rawcp
water	197:31	0:0	4	(
water	197:32	0:0	4	uint8
op	197:37	0:0	4	*
water	197:38	0:0	4	)
water	197:40	0:0	4	bp
op	197:43	0:0	4	-
water	197:45	0:0	4	tif
op	197:48	0:0	4	->
water	197:50	0:0	4	tif_rawcp
water	197:61	0:0	2	;
water	198:1	0:0	2	tif
op	198:4	0:0	2	->
water	198:6	0:0	2	tif_rawcp
op	198:16	0:0	2	=
water	198:18	0:0	2	(
water	198:19	0:0	2	uint8
op	198:24	0:0	2	*
water	198:25	0:0	2	)
water	198:27	0:0	2	bp
water	198:29	0:0	2	;
water	199:1	0:0	2	sp
op	199:3	0:0	2	->
water	199:5	0:0	2	lzw_nbits
op	199:15	0:0	2	=
water	199:17	0:0	2	(
water	199:18	0:0	2	unsigned
water	199:27	0:0	2	short
water	199:32	0:0	2	)
water	199:34	0:0	2	nbits
water	199:39	0:0	2	;
water	200:1	0:0	2	sp
op	200:3	0:0	2	->
water	200:5	0:0	2	lzw_nextdata
op	200:18	0:0	2	=
water	200:20	0:0	2	nextdata
water	200:28	0:0	2	;
water	201:1	0:0	2	sp
op	201:3	0:0	2	->
water	201:5	0:0	2	lzw_nextbits
op	201:18	0:0	2	=
water	201:20	0:0	2	nextbits
water	201:28	0:0	2	;
water	202:1	0:0	2	sp
op	202:3	0:0	2	->
water	202:5	0:0	2	dec_nbitsmask
op	202:19	0:0	2	=
water	202:21	0:0	2	nbitsmask
water	202:30	0:0	2	;
water	203:1	0:0	2	sp
op	203:3	0:0	2	->
water	203:5	0:0	2	dec_oldcodep
op	203:18	0:0	2	=
water	203:20	0:0	2	oldcodep
water	203:28	0:0	2	;
water	204:1	0:0	2	sp
op	204:3	0:0	2	->
water	204:5	0:0	2	dec_free_entp
op	204:19	0:0	2	=
water	204:21	0:0	2	free_entp
water	204:30	0:0	2	;
water	205:1	0:0	2	sp
op	205:3	0:0	2	->
water	205:5	0:0	2	dec_maxcodep
op	205:18	0:0	2	=
water	205:20	0:0	2	maxcodep
water	205:28	0:0	2	;
if	207:1	218:1	2	(occ > 0)
cond	207:5	207:11	3	occ > 0
water	207:5	0:0	4	occ
op	207:9	0:0	4	>
water	207:11	0:0	4	0
stmts	207:14	218:1	3	
water	207:14	0:0	4	{
call	209:2	211:44	4	TIFFErrorExt
arg	209:15	209:34	5	tif->tif_clientdata
water	209:15	0:0	6	tif
op	209:18	0:0	6	->
water	209:20	0:0	6	tif_clientdata
arg	209:36	209:42	5	module
water	209:36	0:0	6	module
arg	210:3	210:55	5	"Not enough data at scanline %d (short %I64d bytes)"
water	210:3	0:0	6	"Not enough data at scanline %d (short %I64d bytes)"
arg	211:8	211:20	5	tif->tif_row
water	211:8	0:0	6	tif
op	211:11	0:0	6	->
water	211:13	0:0	6	tif_row
arg	211:22	211:44	5	(unsigned__int64)occ
water	211:22	0:0	6	(
water	211:23	0:0	6	unsigned
water	211:32	0:0	6	__int64
water	211:39	0:0	6	)
water	211:41	0:0	6	occ
water	211:45	0:0	4	;
call	213:2	215:46	4	TIFFErrorExt
arg	213:15	213:34	5	tif->tif_clientdata
water	213:15	0:0	6	tif
op	213:18	0:0	6	->
water	213:20	0:0	6	tif_clientdata
arg	213:36	213:42	5	module
water	213:36	0:0	6	module
arg	214:3	214:54	5	"Not enough data at scanline %d (short %llu bytes)"
water	214:3	0:0	6	"Not enough data at scanline %d (short %llu bytes)"
arg	215:8	215:20	5	tif->tif_row
water	215:8	0:0	6	tif
op	215:11	0:0	6	->
water	215:13	0:0	6	tif_row
arg	215:22	215:46	5	(unsignedlonglong)occ
water	215:22	0:0	6	(
water	215:23	0:0	6	unsigned
water	215:32	0:0	6	long
water	215:37	0:0	6	long
water	215:41	0:0	6	)
water	215:43	0:0	6	occ
water	215:47	0:0	4	;
return	217:2	217:12	4	(0)
water	217:9	0:0	5	(
water	217:10	0:0	5	0
water	217:11	0:0	5	)
water	218:1	0:0	4	}
return	219:1	219:11	2	(1)
water	219:8	0:0	3	(
water	219:9	0:0	3	1
water	219:10	0:0	3	)
