func	2:0	186:0	0	static int	LZWDecode
params	3:9	0:0	1	
param	3:10	3:19	2	TIFF *	tif
param	3:21	3:33	2	tidata_t	op0
param	3:35	3:47	2	tsize_t	occ0
param	3:49	3:60	2	tsample_t	s
stmnts	0:0	185:11	1	
decl	5:1	5:38	2	LZWCodecState	*sp
op	5:19	0:0	2	=
call	5:21	5:37	3	DecoderState
arg	5:34	5:37	4	tif
water	5:34	0:0	5	tif
decl	6:1	6:23	2	char	*op
op	6:10	0:0	2	=
water	6:12	0:0	2	(
water	6:13	0:0	2	char
op	6:17	0:0	2	*
water	6:18	0:0	2	)
water	6:20	0:0	2	op0
decl	7:1	7:23	2	long	occ
op	7:10	0:0	2	=
water	7:12	0:0	2	(
water	7:13	0:0	2	long
water	7:17	0:0	2	)
water	7:19	0:0	2	occ0
decl	8:1	8:9	2	char	*tp
decl	9:1	9:18	2	unsigned char	*bp
decl	10:1	10:13	2	hcode_t	code
decl	11:1	11:8	2	int	len
decl	12:1	12:42	2	long	nbits
water	12:11	0:0	2	,
decl	12:1	12:42	2	long	nextbits
water	12:21	0:0	2	,
decl	12:1	12:42	2	long	nextdata
water	12:31	0:0	2	,
decl	12:1	12:42	2	long	nbitsmask
decl	13:1	13:48	2	code_t	*codep
water	13:14	0:0	2	,
decl	13:1	13:48	2	code_t	*free_entp
water	13:26	0:0	2	,
decl	13:1	13:48	2	code_t	*maxcodep
water	13:37	0:0	2	,
decl	13:1	13:48	2	code_t	*oldcodep
water	15:1	0:0	2	(
water	15:2	0:0	2	void
water	15:6	0:0	2	)
water	15:8	0:0	2	s
water	15:9	0:0	2	;
call	16:1	16:18	2	assert
arg	16:8	16:18	3	sp!=NULL
water	16:8	0:0	4	sp
op	16:11	0:0	4	!=
water	16:14	0:0	4	NULL
water	16:19	0:0	2	;
if	20:1	58:1	2	(sp -> dec_restart)
cond	20:5	20:9	3	sp -> dec_restart
water	20:5	0:0	4	sp
op	20:7	0:0	4	->
water	20:9	0:0	4	dec_restart
stmts	20:22	58:1	3	
water	20:22	0:0	4	{
decl	21:2	21:14	4	long	residue
water	23:2	0:0	4	codep
op	23:8	0:0	4	=
water	23:10	0:0	4	sp
op	23:12	0:0	4	->
water	23:14	0:0	4	dec_codep
water	23:23	0:0	4	;
water	24:2	0:0	4	residue
op	24:10	0:0	4	=
water	24:12	0:0	4	codep
op	24:17	0:0	4	->
water	24:19	0:0	4	length
op	24:26	0:0	4	-
water	24:28	0:0	4	sp
op	24:30	0:0	4	->
water	24:32	0:0	4	dec_restart
water	24:43	0:0	4	;
if	25:2	44:2	4	(residue > occ)
cond	25:6	25:16	5	residue > occ
water	25:6	0:0	6	residue
op	25:14	0:0	6	>
water	25:16	0:0	6	occ
stmts	25:21	44:2	5	
water	25:21	0:0	6	{
water	32:3	0:0	6	sp
op	32:5	0:0	6	->
water	32:7	0:0	6	dec_restart
op	32:19	0:0	6	+=
water	32:22	0:0	6	occ
water	32:25	0:0	6	;
do	33:3	35:3	6	(-- residue > occ && codep)
cond	35:12	35:31	7	-- residue > occ && codep
op	35:12	0:0	8	--
water	35:14	0:0	8	residue
op	35:22	0:0	8	>
water	35:24	0:0	8	occ
op	35:28	0:0	8	&&
water	35:31	0:0	8	codep
stmts	33:6	35:3	7	
water	33:6	0:0	8	{
water	34:4	0:0	8	codep
op	34:10	0:0	8	=
water	34:12	0:0	8	codep
op	34:17	0:0	8	->
water	34:19	0:0	8	next
water	34:23	0:0	8	;
water	35:3	0:0	8	}
water	35:37	0:0	6	;
if	36:3	42:3	6	(codep)
cond	36:7	36:7	7	codep
water	36:7	0:0	8	codep
stmts	36:14	42:3	7	
water	36:14	0:0	8	{
water	37:4	0:0	8	tp
op	37:7	0:0	8	=
water	37:9	0:0	8	op
op	37:12	0:0	8	+
water	37:14	0:0	8	occ
water	37:17	0:0	8	;
do	38:4	41:4	8	(-- occ && codep)
cond	41:13	41:22	9	-- occ && codep
op	41:13	0:0	10	--
water	41:15	0:0	10	occ
op	41:19	0:0	10	&&
water	41:22	0:0	10	codep
stmts	38:7	41:4	9	
water	38:7	0:0	10	{
op	39:5	0:0	10	*
op	39:6	0:0	10	--
water	39:8	0:0	10	tp
op	39:11	0:0	10	=
water	39:13	0:0	10	codep
op	39:18	0:0	10	->
water	39:20	0:0	10	value
water	39:25	0:0	10	;
water	40:5	0:0	10	codep
op	40:11	0:0	10	=
water	40:13	0:0	10	codep
op	40:18	0:0	10	->
water	40:20	0:0	10	next
water	40:24	0:0	10	;
water	41:4	0:0	10	}
water	41:28	0:0	8	;
water	42:3	0:0	8	}
return	43:3	43:13	6	(1)
water	43:10	0:0	7	(
water	43:11	0:0	7	1
water	43:12	0:0	7	)
water	44:2	0:0	6	}
water	48:2	0:0	4	op
op	48:5	0:0	4	+=
water	48:8	0:0	4	residue
water	48:15	0:0	4	,
water	48:17	0:0	4	occ
op	48:21	0:0	4	-=
water	48:24	0:0	4	residue
water	48:31	0:0	4	;
water	49:2	0:0	4	tp
op	49:5	0:0	4	=
water	49:7	0:0	4	op
water	49:9	0:0	4	;
do	50:2	56:2	4	(-- residue && codep)
cond	56:11	56:24	5	-- residue && codep
op	56:11	0:0	6	--
water	56:13	0:0	6	residue
op	56:21	0:0	6	&&
water	56:24	0:0	6	codep
stmts	50:5	56:2	5	
water	50:5	0:0	6	{
decl	51:3	51:8	6	int	t
op	52:3	0:0	6	--
water	52:5	0:0	6	tp
water	52:7	0:0	6	;
water	53:3	0:0	6	t
op	53:5	0:0	6	=
water	53:7	0:0	6	codep
op	53:12	0:0	6	->
water	53:14	0:0	6	value
water	53:19	0:0	6	;
water	54:3	0:0	6	codep
op	54:9	0:0	6	=
water	54:11	0:0	6	codep
op	54:16	0:0	6	->
water	54:18	0:0	6	next
water	54:22	0:0	6	;
op	55:3	0:0	6	*
water	55:4	0:0	6	tp
op	55:7	0:0	6	=
water	55:9	0:0	6	t
water	55:10	0:0	6	;
water	56:2	0:0	6	}
water	56:30	0:0	4	;
water	57:2	0:0	4	sp
op	57:4	0:0	4	->
water	57:6	0:0	4	dec_restart
op	57:18	0:0	4	=
water	57:20	0:0	4	0
water	57:21	0:0	4	;
water	58:1	0:0	4	}
water	60:1	0:0	2	bp
op	60:4	0:0	2	=
water	60:6	0:0	2	(
water	60:7	0:0	2	unsigned
water	60:16	0:0	2	char
op	60:21	0:0	2	*
water	60:22	0:0	2	)
water	60:23	0:0	2	tif
op	60:26	0:0	2	->
water	60:28	0:0	2	tif_rawcp
water	60:37	0:0	2	;
water	61:1	0:0	2	nbits
op	61:7	0:0	2	=
water	61:9	0:0	2	sp
op	61:11	0:0	2	->
water	61:13	0:0	2	lzw_nbits
water	61:22	0:0	2	;
water	62:1	0:0	2	nextdata
op	62:10	0:0	2	=
water	62:12	0:0	2	sp
op	62:14	0:0	2	->
water	62:16	0:0	2	lzw_nextdata
water	62:28	0:0	2	;
water	63:1	0:0	2	nextbits
op	63:10	0:0	2	=
water	63:12	0:0	2	sp
op	63:14	0:0	2	->
water	63:16	0:0	2	lzw_nextbits
water	63:28	0:0	2	;
water	64:1	0:0	2	nbitsmask
op	64:11	0:0	2	=
water	64:13	0:0	2	sp
op	64:15	0:0	2	->
water	64:17	0:0	2	dec_nbitsmask
water	64:30	0:0	2	;
water	65:1	0:0	2	oldcodep
op	65:10	0:0	2	=
water	65:12	0:0	2	sp
op	65:14	0:0	2	->
water	65:16	0:0	2	dec_oldcodep
water	65:28	0:0	2	;
water	66:1	0:0	2	free_entp
op	66:11	0:0	2	=
water	66:13	0:0	2	sp
op	66:15	0:0	2	->
water	66:17	0:0	2	dec_free_entp
water	66:30	0:0	2	;
water	67:1	0:0	2	maxcodep
op	67:10	0:0	2	=
water	67:12	0:0	2	sp
op	67:14	0:0	2	->
water	67:16	0:0	2	dec_maxcodep
water	67:28	0:0	2	;
while	69:1	168:1	2	(occ > 0)
cond	69:8	69:14	3	occ > 0
water	69:8	0:0	4	occ
op	69:12	0:0	4	>
water	69:14	0:0	4	0
stmts	69:17	168:1	3	
water	69:17	0:0	4	{
call	70:2	70:41	4	NextCode
arg	70:11	70:14	5	tif
water	70:11	0:0	6	tif
arg	70:16	70:18	5	sp
water	70:16	0:0	6	sp
arg	70:20	70:22	5	bp
water	70:20	0:0	6	bp
arg	70:24	70:28	5	code
water	70:24	0:0	6	code
arg	70:30	70:41	5	GetNextCode
water	70:30	0:0	6	GetNextCode
water	70:42	0:0	4	;
if	71:2	72:8	4	(code == CODE_EOI)
cond	71:6	71:14	5	code == CODE_EOI
water	71:6	0:0	6	code
op	71:11	0:0	6	==
water	71:14	0:0	6	CODE_EOI
stmts	72:3	72:8	5	
break	72:3	72:8	6	
if	73:2	84:2	4	(code == CODE_CLEAR)
cond	73:6	73:14	5	code == CODE_CLEAR
water	73:6	0:0	6	code
op	73:11	0:0	6	==
water	73:14	0:0	6	CODE_CLEAR
stmts	73:26	84:2	5	
water	73:26	0:0	6	{
water	74:3	0:0	6	free_entp
op	74:13	0:0	6	=
water	74:15	0:0	6	sp
op	74:17	0:0	6	->
water	74:19	0:0	6	dec_codetab
op	74:31	0:0	6	+
water	74:33	0:0	6	CODE_FIRST
water	74:43	0:0	6	;
water	75:3	0:0	6	nbits
op	75:9	0:0	6	=
water	75:11	0:0	6	BITS_MIN
water	75:19	0:0	6	;
water	76:3	0:0	6	nbitsmask
op	76:13	0:0	6	=
call	76:15	76:31	6	MAXCODE
arg	76:23	76:31	7	BITS_MIN
water	76:23	0:0	8	BITS_MIN
water	76:32	0:0	6	;
water	77:3	0:0	6	maxcodep
op	77:12	0:0	6	=
water	77:14	0:0	6	sp
op	77:16	0:0	6	->
water	77:18	0:0	6	dec_codetab
op	77:30	0:0	6	+
water	77:32	0:0	6	nbitsmask
op	77:41	0:0	6	-
water	77:42	0:0	6	1
water	77:43	0:0	6	;
call	78:3	78:42	6	NextCode
arg	78:12	78:15	7	tif
water	78:12	0:0	8	tif
arg	78:17	78:19	7	sp
water	78:17	0:0	8	sp
arg	78:21	78:23	7	bp
water	78:21	0:0	8	bp
arg	78:25	78:29	7	code
water	78:25	0:0	8	code
arg	78:31	78:42	7	GetNextCode
water	78:31	0:0	8	GetNextCode
water	78:43	0:0	6	;
if	79:3	80:9	6	(code == CODE_EOI)
cond	79:7	79:15	7	code == CODE_EOI
water	79:7	0:0	8	code
op	79:12	0:0	8	==
water	79:15	0:0	8	CODE_EOI
stmts	80:4	80:9	7	
break	80:4	80:9	8	
op	81:3	0:0	6	*
water	81:4	0:0	6	op
op	81:6	0:0	6	++
op	81:9	0:0	6	=
water	81:11	0:0	6	(
water	81:12	0:0	6	char
water	81:16	0:0	6	)
water	81:17	0:0	6	code
water	81:21	0:0	6	,
water	81:23	0:0	6	occ
op	81:26	0:0	6	--
water	81:28	0:0	6	;
water	82:3	0:0	6	oldcodep
op	82:12	0:0	6	=
water	82:14	0:0	6	sp
op	82:16	0:0	6	->
water	82:18	0:0	6	dec_codetab
op	82:30	0:0	6	+
water	82:32	0:0	6	code
water	82:36	0:0	6	;
continue	83:3	83:11	6	
water	84:2	0:0	6	}
water	85:2	0:0	4	codep
op	85:8	0:0	4	=
water	85:10	0:0	4	sp
op	85:12	0:0	4	->
water	85:14	0:0	4	dec_codetab
op	85:26	0:0	4	+
water	85:28	0:0	4	code
water	85:32	0:0	4	;
if	90:2	96:2	4	(free_entp < & sp -> dec_codetab [ 0 ] || free_entp >= & sp -> dec_codetab [ CSIZE ])
cond	90:6	91:38	5	free_entp < & sp -> dec_codetab [ 0 ] || free_entp >= & sp -> dec_codetab [ CSIZE ]
water	90:6	0:0	6	free_entp
op	90:16	0:0	6	<
op	90:18	0:0	6	&
water	90:19	0:0	6	sp
op	90:21	0:0	6	->
water	90:23	0:0	6	dec_codetab
op	90:34	0:0	6	[
water	90:35	0:0	6	0
op	90:36	0:0	6	]
op	90:38	0:0	6	||
water	91:3	0:0	6	free_entp
op	91:13	0:0	6	>=
op	91:16	0:0	6	&
water	91:17	0:0	6	sp
op	91:19	0:0	6	->
water	91:21	0:0	6	dec_codetab
op	91:32	0:0	6	[
water	91:33	0:0	6	CSIZE
op	91:38	0:0	6	]
stmts	91:41	96:2	5	
water	91:41	0:0	6	{
call	92:3	94:15	6	TIFFErrorExt
arg	92:16	92:35	7	tif->tif_clientdata
water	92:16	0:0	8	tif
op	92:19	0:0	8	->
water	92:21	0:0	8	tif_clientdata
arg	92:37	92:50	7	tif->tif_name
water	92:37	0:0	8	tif
op	92:40	0:0	8	->
water	92:42	0:0	8	tif_name
arg	93:3	93:50	7	"LZWDecode: Corrupted LZW table at scanline %d"
water	93:3	0:0	8	"LZWDecode: Corrupted LZW table at scanline %d"
arg	94:3	94:15	7	tif->tif_row
water	94:3	0:0	8	tif
op	94:6	0:0	8	->
water	94:8	0:0	8	tif_row
water	94:16	0:0	6	;
return	95:3	95:13	6	(0)
water	95:10	0:0	7	(
water	95:11	0:0	7	0
water	95:12	0:0	7	)
water	96:2	0:0	6	}
water	98:2	0:0	4	free_entp
op	98:11	0:0	4	->
water	98:13	0:0	4	next
op	98:18	0:0	4	=
water	98:20	0:0	4	oldcodep
water	98:28	0:0	4	;
if	99:2	105:2	4	(free_entp -> next < & sp -> dec_codetab [ 0 ] || free_entp -> next >= & sp -> dec_codetab [ CSIZE ])
cond	99:6	100:44	5	free_entp -> next < & sp -> dec_codetab [ 0 ] || free_entp -> next >= & sp -> dec_codetab [ CSIZE ]
water	99:6	0:0	6	free_entp
op	99:15	0:0	6	->
water	99:17	0:0	6	next
op	99:22	0:0	6	<
op	99:24	0:0	6	&
water	99:25	0:0	6	sp
op	99:27	0:0	6	->
water	99:29	0:0	6	dec_codetab
op	99:40	0:0	6	[
water	99:41	0:0	6	0
op	99:42	0:0	6	]
op	99:44	0:0	6	||
water	100:3	0:0	6	free_entp
op	100:12	0:0	6	->
water	100:14	0:0	6	next
op	100:19	0:0	6	>=
op	100:22	0:0	6	&
water	100:23	0:0	6	sp
op	100:25	0:0	6	->
water	100:27	0:0	6	dec_codetab
op	100:38	0:0	6	[
water	100:39	0:0	6	CSIZE
op	100:44	0:0	6	]
stmts	100:47	105:2	5	
water	100:47	0:0	6	{
call	101:3	103:15	6	TIFFErrorExt
arg	101:16	101:35	7	tif->tif_clientdata
water	101:16	0:0	8	tif
op	101:19	0:0	8	->
water	101:21	0:0	8	tif_clientdata
arg	101:37	101:50	7	tif->tif_name
water	101:37	0:0	8	tif
op	101:40	0:0	8	->
water	101:42	0:0	8	tif_name
arg	102:3	102:50	7	"LZWDecode: Corrupted LZW table at scanline %d"
water	102:3	0:0	8	"LZWDecode: Corrupted LZW table at scanline %d"
arg	103:3	103:15	7	tif->tif_row
water	103:3	0:0	8	tif
op	103:6	0:0	8	->
water	103:8	0:0	8	tif_row
water	103:16	0:0	6	;
return	104:3	104:13	6	(0)
water	104:10	0:0	7	(
water	104:11	0:0	7	0
water	104:12	0:0	7	)
water	105:2	0:0	6	}
water	106:2	0:0	4	free_entp
op	106:11	0:0	4	->
water	106:13	0:0	4	firstchar
op	106:23	0:0	4	=
water	106:25	0:0	4	free_entp
op	106:34	0:0	4	->
water	106:36	0:0	4	next
op	106:40	0:0	4	->
water	106:42	0:0	4	firstchar
water	106:51	0:0	4	;
water	107:2	0:0	4	free_entp
op	107:11	0:0	4	->
water	107:13	0:0	4	length
op	107:20	0:0	4	=
water	107:22	0:0	4	free_entp
op	107:31	0:0	4	->
water	107:33	0:0	4	next
op	107:37	0:0	4	->
water	107:39	0:0	4	length
op	107:45	0:0	4	+
water	107:46	0:0	4	1
water	107:47	0:0	4	;
water	108:2	0:0	4	free_entp
op	108:11	0:0	4	->
water	108:13	0:0	4	value
op	108:19	0:0	4	=
water	108:21	0:0	4	(
water	108:22	0:0	4	codep
op	108:28	0:0	4	<
water	108:30	0:0	4	free_entp
water	108:39	0:0	4	)
water	108:41	0:0	4	?
water	109:6	0:0	4	codep
op	109:11	0:0	4	->
water	109:13	0:0	4	firstchar
water	109:23	0:0	4	:
water	109:25	0:0	4	free_entp
op	109:34	0:0	4	->
water	109:36	0:0	4	firstchar
water	109:45	0:0	4	;
if	110:2	115:2	4	(++ free_entp > maxcodep)
cond	110:6	110:20	5	++ free_entp > maxcodep
op	110:6	0:0	6	++
water	110:8	0:0	6	free_entp
op	110:18	0:0	6	>
water	110:20	0:0	6	maxcodep
stmts	110:30	115:2	5	
water	110:30	0:0	6	{
if	111:3	112:20	6	(++ nbits > BITS_MAX)
cond	111:7	111:17	7	++ nbits > BITS_MAX
op	111:7	0:0	8	++
water	111:9	0:0	8	nbits
op	111:15	0:0	8	>
water	111:17	0:0	8	BITS_MAX
stmts	112:4	112:20	7	
water	112:4	0:0	8	nbits
op	112:10	0:0	8	=
water	112:12	0:0	8	BITS_MAX
water	112:20	0:0	8	;
water	113:3	0:0	6	nbitsmask
op	113:13	0:0	6	=
call	113:15	113:28	6	MAXCODE
arg	113:23	113:28	7	nbits
water	113:23	0:0	8	nbits
water	113:29	0:0	6	;
water	114:3	0:0	6	maxcodep
op	114:12	0:0	6	=
water	114:14	0:0	6	sp
op	114:16	0:0	6	->
water	114:18	0:0	6	dec_codetab
op	114:30	0:0	6	+
water	114:32	0:0	6	nbitsmask
op	114:41	0:0	6	-
water	114:42	0:0	6	1
water	114:43	0:0	6	;
water	115:2	0:0	6	}
water	116:2	0:0	4	oldcodep
op	116:11	0:0	4	=
water	116:13	0:0	4	codep
water	116:18	0:0	4	;
if	117:2	166:2	4	(code >= 256)
cond	117:6	117:14	5	code >= 256
water	117:6	0:0	6	code
op	117:11	0:0	6	>=
water	117:14	0:0	6	256
stmts	117:19	166:2	5	
water	117:19	0:0	6	{
if	122:3	128:3	6	(codep -> length == 0)
cond	122:6	122:23	7	codep -> length == 0
water	122:6	0:0	8	codep
op	122:11	0:0	8	->
water	122:13	0:0	8	length
op	122:20	0:0	8	==
water	122:23	0:0	8	0
stmts	122:26	128:3	7	
water	122:26	0:0	8	{
call	123:4	126:19	8	TIFFErrorExt
arg	123:17	123:36	9	tif->tif_clientdata
water	123:17	0:0	10	tif
op	123:20	0:0	10	->
water	123:22	0:0	10	tif_clientdata
arg	123:38	123:51	9	tif->tif_name
water	123:38	0:0	10	tif
op	123:41	0:0	10	->
water	123:43	0:0	10	tif_name
arg	124:11	125:47	9	"LZWDecode: Wrong length of decoded string: ""data probably corrupted at scanline %d"
water	124:11	0:0	10	"LZWDecode: Wrong length of decoded string: "
water	125:7	0:0	10	"data probably corrupted at scanline %d"
arg	126:7	126:19	9	tif->tif_row
water	126:7	0:0	10	tif
op	126:10	0:0	10	->
water	126:12	0:0	10	tif_row
water	126:20	0:0	8	;
return	127:7	127:17	8	(0)
water	127:14	0:0	9	(
water	127:15	0:0	9	0
water	127:16	0:0	9	)
water	128:3	0:0	8	}
if	129:3	151:3	6	(codep -> length > occ)
cond	129:7	129:23	7	codep -> length > occ
water	129:7	0:0	8	codep
op	129:12	0:0	8	->
water	129:14	0:0	8	length
op	129:21	0:0	8	>
water	129:23	0:0	8	occ
stmts	129:28	151:3	7	
water	129:28	0:0	8	{
water	136:4	0:0	8	sp
op	136:6	0:0	8	->
water	136:8	0:0	8	dec_codep
op	136:18	0:0	8	=
water	136:20	0:0	8	codep
water	136:25	0:0	8	;
do	137:4	139:4	8	(codep && codep -> length > occ)
cond	139:13	139:38	9	codep && codep -> length > occ
water	139:13	0:0	10	codep
op	139:19	0:0	10	&&
water	139:22	0:0	10	codep
op	139:27	0:0	10	->
water	139:29	0:0	10	length
op	139:36	0:0	10	>
water	139:38	0:0	10	occ
stmts	137:7	139:4	9	
water	137:7	0:0	10	{
water	138:5	0:0	10	codep
op	138:11	0:0	10	=
water	138:13	0:0	10	codep
op	138:18	0:0	10	->
water	138:20	0:0	10	next
water	138:24	0:0	10	;
water	139:4	0:0	10	}
water	139:42	0:0	8	;
if	140:4	149:4	8	(codep)
cond	140:8	140:8	9	codep
water	140:8	0:0	10	codep
stmts	140:15	149:4	9	
water	140:15	0:0	10	{
water	141:5	0:0	10	sp
op	141:7	0:0	10	->
water	141:9	0:0	10	dec_restart
op	141:21	0:0	10	=
water	141:23	0:0	10	occ
water	141:26	0:0	10	;
water	142:5	0:0	10	tp
op	142:8	0:0	10	=
water	142:10	0:0	10	op
op	142:13	0:0	10	+
water	142:15	0:0	10	occ
water	142:18	0:0	10	;
do	143:5	146:5	10	(-- occ && codep)
cond	146:15	146:24	11	-- occ && codep
op	146:15	0:0	12	--
water	146:17	0:0	12	occ
op	146:21	0:0	12	&&
water	146:24	0:0	12	codep
stmts	143:9	146:5	11	
water	143:9	0:0	12	{
op	144:6	0:0	12	*
op	144:7	0:0	12	--
water	144:9	0:0	12	tp
op	144:12	0:0	12	=
water	144:14	0:0	12	codep
op	144:19	0:0	12	->
water	144:21	0:0	12	value
water	144:26	0:0	12	;
water	145:6	0:0	12	codep
op	145:12	0:0	12	=
water	145:14	0:0	12	codep
op	145:19	0:0	12	->
water	145:21	0:0	12	next
water	145:25	0:0	12	;
water	146:5	0:0	12	}
water	146:30	0:0	10	;
if	147:5	148:19	10	(codep)
cond	147:9	147:9	11	codep
water	147:9	0:0	12	codep
stmts	148:6	148:19	11	
call	148:6	148:18	12	codeLoop
arg	148:15	148:18	13	tif
water	148:15	0:0	14	tif
water	148:19	0:0	12	;
water	149:4	0:0	10	}
break	150:4	150:9	8	
water	151:3	0:0	8	}
water	152:3	0:0	6	len
op	152:7	0:0	6	=
water	152:9	0:0	6	codep
op	152:14	0:0	6	->
water	152:16	0:0	6	length
water	152:22	0:0	6	;
water	153:3	0:0	6	tp
op	153:6	0:0	6	=
water	153:8	0:0	6	op
op	153:11	0:0	6	+
water	153:13	0:0	6	len
water	153:16	0:0	6	;
do	154:3	160:3	6	(codep && tp > op)
cond	160:12	160:26	7	codep && tp > op
water	160:12	0:0	8	codep
op	160:18	0:0	8	&&
water	160:21	0:0	8	tp
op	160:24	0:0	8	>
water	160:26	0:0	8	op
stmts	154:6	160:3	7	
water	154:6	0:0	8	{
decl	155:4	155:9	8	int	t
op	156:4	0:0	8	--
water	156:6	0:0	8	tp
water	156:8	0:0	8	;
water	157:4	0:0	8	t
op	157:6	0:0	8	=
water	157:8	0:0	8	codep
op	157:13	0:0	8	->
water	157:15	0:0	8	value
water	157:20	0:0	8	;
water	158:4	0:0	8	codep
op	158:10	0:0	8	=
water	158:12	0:0	8	codep
op	158:17	0:0	8	->
water	158:19	0:0	8	next
water	158:23	0:0	8	;
op	159:4	0:0	8	*
water	159:5	0:0	8	tp
op	159:8	0:0	8	=
water	159:10	0:0	8	t
water	159:11	0:0	8	;
water	160:3	0:0	8	}
water	160:29	0:0	6	;
if	161:3	164:3	6	(codep)
cond	161:7	161:7	7	codep
water	161:7	0:0	8	codep
stmts	161:14	164:3	7	
water	161:14	0:0	8	{
call	162:7	162:19	8	codeLoop
arg	162:16	162:19	9	tif
water	162:16	0:0	10	tif
water	162:20	0:0	8	;
break	163:7	163:12	8	
water	164:3	0:0	8	}
water	165:3	0:0	6	op
op	165:6	0:0	6	+=
water	165:9	0:0	6	len
water	165:12	0:0	6	,
water	165:14	0:0	6	occ
op	165:18	0:0	6	-=
water	165:21	0:0	6	len
water	165:24	0:0	6	;
water	166:2	0:0	6	}
else	166:4	167:28	4
stmts	167:3	167:28	5	
op	167:3	0:0	6	*
water	167:4	0:0	6	op
op	167:6	0:0	6	++
op	167:9	0:0	6	=
water	167:11	0:0	6	(
water	167:12	0:0	6	char
water	167:16	0:0	6	)
water	167:17	0:0	6	code
water	167:21	0:0	6	,
water	167:23	0:0	6	occ
op	167:26	0:0	6	--
water	167:28	0:0	6	;
water	168:1	0:0	4	}
water	170:1	0:0	2	tif
op	170:4	0:0	2	->
water	170:6	0:0	2	tif_rawcp
op	170:16	0:0	2	=
water	170:18	0:0	2	(
water	170:19	0:0	2	tidata_t
water	170:27	0:0	2	)
water	170:29	0:0	2	bp
water	170:31	0:0	2	;
water	171:1	0:0	2	sp
op	171:3	0:0	2	->
water	171:5	0:0	2	lzw_nbits
op	171:15	0:0	2	=
water	171:17	0:0	2	(
water	171:18	0:0	2	unsigned
water	171:27	0:0	2	short
water	171:32	0:0	2	)
water	171:34	0:0	2	nbits
water	171:39	0:0	2	;
water	172:1	0:0	2	sp
op	172:3	0:0	2	->
water	172:5	0:0	2	lzw_nextdata
op	172:18	0:0	2	=
water	172:20	0:0	2	nextdata
water	172:28	0:0	2	;
water	173:1	0:0	2	sp
op	173:3	0:0	2	->
water	173:5	0:0	2	lzw_nextbits
op	173:18	0:0	2	=
water	173:20	0:0	2	nextbits
water	173:28	0:0	2	;
water	174:1	0:0	2	sp
op	174:3	0:0	2	->
water	174:5	0:0	2	dec_nbitsmask
op	174:19	0:0	2	=
water	174:21	0:0	2	nbitsmask
water	174:30	0:0	2	;
water	175:1	0:0	2	sp
op	175:3	0:0	2	->
water	175:5	0:0	2	dec_oldcodep
op	175:18	0:0	2	=
water	175:20	0:0	2	oldcodep
water	175:28	0:0	2	;
water	176:1	0:0	2	sp
op	176:3	0:0	2	->
water	176:5	0:0	2	dec_free_entp
op	176:19	0:0	2	=
water	176:21	0:0	2	free_entp
water	176:30	0:0	2	;
water	177:1	0:0	2	sp
op	177:3	0:0	2	->
water	177:5	0:0	2	dec_maxcodep
op	177:18	0:0	2	=
water	177:20	0:0	2	maxcodep
water	177:28	0:0	2	;
if	179:1	184:1	2	(occ > 0)
cond	179:5	179:11	3	occ > 0
water	179:5	0:0	4	occ
op	179:9	0:0	4	>
water	179:11	0:0	4	0
stmts	179:14	184:1	3	
water	179:14	0:0	4	{
call	180:2	182:23	4	TIFFErrorExt
arg	180:15	180:34	5	tif->tif_clientdata
water	180:15	0:0	6	tif
op	180:18	0:0	6	->
water	180:20	0:0	6	tif_clientdata
arg	180:36	180:49	5	tif->tif_name
water	180:36	0:0	6	tif
op	180:39	0:0	6	->
water	180:41	0:0	6	tif_name
arg	181:2	181:62	5	"LZWDecode: Not enough data at scanline %d (short %d bytes)"
water	181:2	0:0	6	"LZWDecode: Not enough data at scanline %d (short %d bytes)"
arg	182:6	182:18	5	tif->tif_row
water	182:6	0:0	6	tif
op	182:9	0:0	6	->
water	182:11	0:0	6	tif_row
arg	182:20	182:23	5	occ
water	182:20	0:0	6	occ
water	182:24	0:0	4	;
return	183:2	183:12	4	(0)
water	183:9	0:0	5	(
water	183:10	0:0	5	0
water	183:11	0:0	5	)
water	184:1	0:0	4	}
return	185:1	185:11	2	(1)
water	185:8	0:0	3	(
water	185:9	0:0	3	1
water	185:10	0:0	3	)
