func	1:0	98:2	0	static int	combineSeparateTileSamples16bits
params	2:33	0:0	1	
param	2:34	2:45	2	uint8 *	in[]
param	2:47	2:57	2	uint8 *	out
param	2:59	2:70	2	uint32	cols
param	3:34	3:45	2	uint32	rows
param	3:47	3:64	2	uint32	imagewidth
param	4:34	4:43	2	uint32	tw
param	4:45	4:55	2	uint16	spp
param	4:57	4:67	2	uint16	bps
param	5:28	5:42	2	FILE *	dumpfile
param	5:44	5:54	2	int	format
param	5:56	5:65	2	int	level
stmnts	0:0	97:12	1	
decl	7:2	7:23	2	int	ready_bits
op	7:20	0:0	2	=
water	7:22	0:0	2	0
decl	8:2	8:33	2	uint32	src_rowsize
water	8:20	0:0	2	,
decl	8:2	8:33	2	uint32	dst_rowsize
decl	9:2	9:31	2	uint32	bit_offset
water	9:19	0:0	2	,
decl	9:2	9:31	2	uint32	src_offset
decl	10:2	10:44	2	uint32	row
water	10:12	0:0	2	,
decl	10:2	10:44	2	uint32	col
water	10:17	0:0	2	,
decl	10:2	10:44	2	uint32	src_byte
op	10:28	0:0	2	=
water	10:30	0:0	2	0
water	10:31	0:0	2	,
decl	10:2	10:44	2	uint32	src_bit
op	10:41	0:0	2	=
water	10:43	0:0	2	0
decl	11:2	11:36	2	uint16	maskbits
op	11:18	0:0	2	=
water	11:20	0:0	2	0
water	11:21	0:0	2	,
decl	11:2	11:36	2	uint16	matchbits
op	11:33	0:0	2	=
water	11:35	0:0	2	0
decl	12:2	12:29	2	uint16	buff1
op	12:15	0:0	2	=
water	12:17	0:0	2	0
water	12:18	0:0	2	,
decl	12:2	12:29	2	uint16	buff2
op	12:26	0:0	2	=
water	12:28	0:0	2	0
decl	13:2	13:21	2	uint8	bytebuff
op	13:18	0:0	2	=
water	13:20	0:0	2	0
decl	14:2	14:13	2	tsample_t	s
decl	15:2	15:28	2	unsigned char	*src
op	15:21	0:0	2	=
water	15:23	0:0	2	in
op	15:25	0:0	2	[
water	15:26	0:0	2	0
op	15:27	0:0	2	]
decl	16:2	16:26	2	unsigned char	*dst
op	16:21	0:0	2	=
water	16:23	0:0	2	out
decl	17:2	17:26	2	char	action[8]
if	18:2	22:4	2	(( src == NULL ) || ( dst == NULL ))
cond	18:6	18:35	3	( src == NULL ) || ( dst == NULL )
water	18:6	0:0	4	(
water	18:7	0:0	4	src
op	18:11	0:0	4	==
water	18:14	0:0	4	NULL
water	18:18	0:0	4	)
op	18:20	0:0	4	||
water	18:23	0:0	4	(
water	18:24	0:0	4	dst
op	18:28	0:0	4	==
water	18:31	0:0	4	NULL
water	18:35	0:0	4	)
stmts	19:4	22:4	3	
water	19:4	0:0	4	{
call	20:4	20:81	4	TIFFError
arg	20:14	20:48	5	"combineSeparateTileSamples16bits"
water	20:14	0:0	6	"combineSeparateTileSamples16bits"
arg	20:49	20:81	5	"Invalid input or output buffer"
water	20:49	0:0	6	"Invalid input or output buffer"
water	20:82	0:0	4	;
return	21:4	21:14	4	(1)
water	21:11	0:0	5	(
water	21:12	0:0	5	1
water	21:13	0:0	5	)
water	22:4	0:0	4	}
water	23:2	0:0	2	src_rowsize
op	23:14	0:0	2	=
water	23:16	0:0	2	(
water	23:17	0:0	2	(
water	23:18	0:0	2	bps
op	23:22	0:0	2	*
water	23:24	0:0	2	tw
water	23:26	0:0	2	)
op	23:28	0:0	2	+
water	23:30	0:0	2	7
water	23:31	0:0	2	)
op	23:33	0:0	2	/
water	23:35	0:0	2	8
water	23:36	0:0	2	;
water	24:2	0:0	2	dst_rowsize
op	24:14	0:0	2	=
water	24:16	0:0	2	(
water	24:17	0:0	2	(
water	24:18	0:0	2	imagewidth
op	24:29	0:0	2	*
water	24:31	0:0	2	bps
op	24:35	0:0	2	*
water	24:37	0:0	2	spp
water	24:40	0:0	2	)
op	24:42	0:0	2	+
water	24:44	0:0	2	7
water	24:45	0:0	2	)
op	24:47	0:0	2	/
water	24:49	0:0	2	8
water	24:50	0:0	2	;
water	25:2	0:0	2	maskbits
op	25:11	0:0	2	=
water	25:13	0:0	2	(
water	25:14	0:0	2	uint16
water	25:20	0:0	2	)
op	25:21	0:0	2	-
water	25:22	0:0	2	1
op	25:24	0:0	2	>>
water	25:27	0:0	2	(
water	25:28	0:0	2	16
op	25:31	0:0	2	-
water	25:33	0:0	2	bps
water	25:36	0:0	2	)
water	25:37	0:0	2	;
for	26:2	96:4	2	(row = 0 ;row < rows;row ++)
forinit	26:7	26:14	3	row = 0 ;
water	26:7	0:0	4	row
op	26:11	0:0	4	=
water	26:13	0:0	4	0
water	26:14	0:0	4	;
cond	26:16	26:22	3	row < rows
water	26:16	0:0	4	row
op	26:20	0:0	4	<
water	26:22	0:0	4	rows
forexpr	26:28	26:31	3	row ++
water	26:28	0:0	4	row
op	26:31	0:0	4	++
stmts	27:4	96:4	3	
water	27:4	0:0	4	{
water	28:4	0:0	4	ready_bits
op	28:15	0:0	4	=
water	28:17	0:0	4	0
water	28:18	0:0	4	;
water	29:4	0:0	4	buff1
op	29:10	0:0	4	=
water	29:12	0:0	4	buff2
op	29:18	0:0	4	=
water	29:20	0:0	4	0
water	29:21	0:0	4	;
water	30:4	0:0	4	dst
op	30:8	0:0	4	=
water	30:10	0:0	4	out
op	30:14	0:0	4	+
water	30:16	0:0	4	(
water	30:17	0:0	4	row
op	30:21	0:0	4	*
water	30:23	0:0	4	dst_rowsize
water	30:34	0:0	4	)
water	30:35	0:0	4	;
water	31:4	0:0	4	src_offset
op	31:15	0:0	4	=
water	31:17	0:0	4	row
op	31:21	0:0	4	*
water	31:23	0:0	4	src_rowsize
water	31:34	0:0	4	;
for	32:4	77:6	4	(col = 0 ;col < cols;col ++)
forinit	32:9	32:16	5	col = 0 ;
water	32:9	0:0	6	col
op	32:13	0:0	6	=
water	32:15	0:0	6	0
water	32:16	0:0	6	;
cond	32:18	32:24	5	col < cols
water	32:18	0:0	6	col
op	32:22	0:0	6	<
water	32:24	0:0	6	cols
forexpr	32:30	32:33	5	col ++
water	32:30	0:0	6	col
op	32:33	0:0	6	++
stmts	33:6	77:6	5	
water	33:6	0:0	6	{
water	35:6	0:0	6	bit_offset
op	35:17	0:0	6	=
water	35:19	0:0	6	col
op	35:23	0:0	6	*
water	35:25	0:0	6	bps
water	35:28	0:0	6	;
water	36:6	0:0	6	src_byte
op	36:15	0:0	6	=
water	36:17	0:0	6	bit_offset
op	36:28	0:0	6	/
water	36:30	0:0	6	8
water	36:31	0:0	6	;
water	37:6	0:0	6	src_bit
op	37:15	0:0	6	=
water	37:17	0:0	6	bit_offset
op	37:28	0:0	6	%
water	37:30	0:0	6	8
water	37:31	0:0	6	;
water	38:6	0:0	6	matchbits
op	38:16	0:0	6	=
water	38:18	0:0	6	maskbits
op	38:27	0:0	6	<<
water	38:30	0:0	6	(
water	38:31	0:0	6	16
op	38:34	0:0	6	-
water	38:36	0:0	6	src_bit
op	38:44	0:0	6	-
water	38:46	0:0	6	bps
water	38:49	0:0	6	)
water	38:50	0:0	6	;
for	39:6	76:1	6	(s = 0 ;( s < spp ) && ( s < MAX_SAMPLES );s ++)
forinit	39:11	39:16	7	s = 0 ;
water	39:11	0:0	8	s
op	39:13	0:0	8	=
water	39:15	0:0	8	0
water	39:16	0:0	8	;
cond	39:18	39:47	7	( s < spp ) && ( s < MAX_SAMPLES )
water	39:18	0:0	8	(
water	39:19	0:0	8	s
op	39:21	0:0	8	<
water	39:23	0:0	8	spp
water	39:26	0:0	8	)
op	39:28	0:0	8	&&
water	39:31	0:0	8	(
water	39:32	0:0	8	s
op	39:34	0:0	8	<
water	39:36	0:0	8	MAX_SAMPLES
water	39:47	0:0	8	)
forexpr	39:50	39:51	7	s ++
water	39:50	0:0	8	s
op	39:51	0:0	8	++
stmts	40:8	76:1	7	
water	40:8	0:0	8	{
water	41:1	0:0	8	src
op	41:5	0:0	8	=
water	41:7	0:0	8	in
op	41:9	0:0	8	[
water	41:10	0:0	8	s
op	41:11	0:0	8	]
op	41:13	0:0	8	+
water	41:15	0:0	8	src_offset
op	41:26	0:0	8	+
water	41:28	0:0	8	src_byte
water	41:36	0:0	8	;
if	42:8	43:40	8	(little_endian)
cond	42:12	42:12	9	little_endian
water	42:12	0:0	10	little_endian
stmts	43:10	43:40	9	
water	43:10	0:0	10	buff1
op	43:16	0:0	10	=
water	43:18	0:0	10	(
water	43:19	0:0	10	src
op	43:22	0:0	10	[
water	43:23	0:0	10	0
op	43:24	0:0	10	]
op	43:26	0:0	10	<<
water	43:29	0:0	10	8
water	43:30	0:0	10	)
op	43:32	0:0	10	|
water	43:34	0:0	10	src
op	43:37	0:0	10	[
water	43:38	0:0	10	1
op	43:39	0:0	10	]
water	43:40	0:0	10	;
else	44:8	45:40	8
stmts	45:10	45:40	9	
water	45:10	0:0	10	buff1
op	45:16	0:0	10	=
water	45:18	0:0	10	(
water	45:19	0:0	10	src
op	45:22	0:0	10	[
water	45:23	0:0	10	1
op	45:24	0:0	10	]
op	45:26	0:0	10	<<
water	45:29	0:0	10	8
water	45:30	0:0	10	)
op	45:32	0:0	10	|
water	45:34	0:0	10	src
op	45:37	0:0	10	[
water	45:38	0:0	10	0
op	45:39	0:0	10	]
water	45:40	0:0	10	;
water	46:1	0:0	8	buff1
op	46:7	0:0	8	=
water	46:9	0:0	8	(
water	46:10	0:0	8	buff1
op	46:16	0:0	8	&
water	46:18	0:0	8	matchbits
water	46:27	0:0	8	)
op	46:29	0:0	8	<<
water	46:32	0:0	8	(
water	46:33	0:0	8	src_bit
water	46:40	0:0	8	)
water	46:41	0:0	8	;
if	48:1	56:3	8	(ready_bits >= 8)
cond	48:5	48:19	9	ready_bits >= 8
water	48:5	0:0	10	ready_bits
op	48:16	0:0	10	>=
water	48:19	0:0	10	8
stmts	49:3	56:3	9	
water	49:3	0:0	10	{
water	50:5	0:0	10	bytebuff
op	50:14	0:0	10	=
water	50:16	0:0	10	(
water	50:17	0:0	10	buff2
op	50:23	0:0	10	>>
water	50:26	0:0	10	8
water	50:27	0:0	10	)
water	50:28	0:0	10	;
op	51:5	0:0	10	*
water	51:6	0:0	10	dst
op	51:9	0:0	10	++
op	51:12	0:0	10	=
water	51:14	0:0	10	bytebuff
water	51:22	0:0	10	;
water	52:5	0:0	10	ready_bits
op	52:16	0:0	10	-=
water	52:19	0:0	10	8
water	52:20	0:0	10	;
water	54:5	0:0	10	buff2
op	54:11	0:0	10	=
water	54:13	0:0	10	(
water	54:14	0:0	10	(
water	54:15	0:0	10	buff2
op	54:21	0:0	10	<<
water	54:24	0:0	10	8
water	54:25	0:0	10	)
op	54:27	0:0	10	|
water	54:29	0:0	10	(
water	54:30	0:0	10	buff1
op	54:36	0:0	10	>>
water	54:39	0:0	10	ready_bits
water	54:49	0:0	10	)
water	54:50	0:0	10	)
water	54:51	0:0	10	;
call	55:5	55:28	10	strcpy
arg	55:13	55:19	11	action
water	55:13	0:0	12	action
arg	55:21	55:28	11	"Flush"
water	55:21	0:0	12	"Flush"
water	55:29	0:0	10	;
water	56:3	0:0	10	}
else	57:1	62:3	8
stmts	58:3	62:3	9	
water	58:3	0:0	10	{
water	59:5	0:0	10	bytebuff
op	59:14	0:0	10	=
water	59:16	0:0	10	0
water	59:17	0:0	10	;
water	60:5	0:0	10	buff2
op	60:11	0:0	10	=
water	60:13	0:0	10	(
water	60:14	0:0	10	buff2
op	60:20	0:0	10	|
water	60:22	0:0	10	(
water	60:23	0:0	10	buff1
op	60:29	0:0	10	>>
water	60:32	0:0	10	ready_bits
water	60:42	0:0	10	)
water	60:43	0:0	10	)
water	60:44	0:0	10	;
call	61:5	61:29	10	strcpy
arg	61:13	61:19	11	action
water	61:13	0:0	12	action
arg	61:21	61:29	11	"Update"
water	61:21	0:0	12	"Update"
water	61:30	0:0	10	;
water	62:3	0:0	10	}
water	63:1	0:0	8	ready_bits
op	63:12	0:0	8	+=
water	63:15	0:0	8	bps
water	63:18	0:0	8	;
if	64:1	75:3	8	(( dumpfile != NULL ) && ( level == 3 ))
cond	64:5	64:38	9	( dumpfile != NULL ) && ( level == 3 )
water	64:5	0:0	10	(
water	64:6	0:0	10	dumpfile
op	64:15	0:0	10	!=
water	64:18	0:0	10	NULL
water	64:22	0:0	10	)
op	64:24	0:0	10	&&
water	64:27	0:0	10	(
water	64:28	0:0	10	level
op	64:34	0:0	10	==
water	64:37	0:0	10	3
water	64:38	0:0	10	)
stmts	65:3	75:3	9	
water	65:3	0:0	10	{
call	66:3	68:58	10	dump_info
arg	66:14	66:22	11	dumpfile
water	66:14	0:0	12	dumpfile
arg	66:24	66:30	11	format
water	66:24	0:0	12	format
arg	66:32	66:34	11	""
water	66:32	0:0	12	""
arg	67:9	67:92	11	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
water	67:9	0:0	12	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
arg	68:9	68:16	11	row+1
water	68:9	0:0	12	row
op	68:13	0:0	12	+
water	68:15	0:0	12	1
arg	68:18	68:25	11	col+1
water	68:18	0:0	12	col
op	68:22	0:0	12	+
water	68:24	0:0	12	1
arg	68:27	68:28	11	s
water	68:27	0:0	12	s
arg	68:30	68:38	11	src_byte
water	68:30	0:0	12	src_byte
arg	68:40	68:47	11	src_bit
water	68:40	0:0	12	src_bit
arg	68:49	68:58	11	dst-out
water	68:49	0:0	12	dst
op	68:53	0:0	12	-
water	68:55	0:0	12	out
water	68:59	0:0	10	;
call	69:3	69:56	10	dump_short
arg	69:15	69:23	11	dumpfile
water	69:15	0:0	12	dumpfile
arg	69:25	69:31	11	format
water	69:25	0:0	12	format
arg	69:33	69:45	11	"Match bits"
water	69:33	0:0	12	"Match bits"
arg	69:47	69:56	11	matchbits
water	69:47	0:0	12	matchbits
water	69:57	0:0	10	;
call	70:3	70:53	10	dump_data
arg	70:15	70:23	11	dumpfile
water	70:15	0:0	12	dumpfile
arg	70:25	70:31	11	format
water	70:25	0:0	12	format
arg	70:33	70:45	11	"Src   bits"
water	70:33	0:0	12	"Src   bits"
arg	70:47	70:50	11	src
water	70:47	0:0	12	src
arg	70:52	70:53	11	2
water	70:52	0:0	12	2
water	70:54	0:0	10	;
call	71:3	71:52	10	dump_short
arg	71:15	71:23	11	dumpfile
water	71:15	0:0	12	dumpfile
arg	71:25	71:31	11	format
water	71:25	0:0	12	format
arg	71:33	71:45	11	"Buff1 bits"
water	71:33	0:0	12	"Buff1 bits"
arg	71:47	71:52	11	buff1
water	71:47	0:0	12	buff1
water	71:53	0:0	10	;
call	72:3	72:52	10	dump_short
arg	72:15	72:23	11	dumpfile
water	72:15	0:0	12	dumpfile
arg	72:25	72:31	11	format
water	72:25	0:0	12	format
arg	72:33	72:45	11	"Buff2 bits"
water	72:33	0:0	12	"Buff2 bits"
arg	72:47	72:52	11	buff2
water	72:47	0:0	12	buff2
water	72:53	0:0	10	;
call	73:3	73:55	10	dump_byte
arg	73:15	73:23	11	dumpfile
water	73:15	0:0	12	dumpfile
arg	73:25	73:31	11	format
water	73:25	0:0	12	format
arg	73:33	73:45	11	"Write byte"
water	73:33	0:0	12	"Write byte"
arg	73:47	73:55	11	bytebuff
water	73:47	0:0	12	bytebuff
water	73:56	0:0	10	;
call	74:3	74:77	10	dump_info
arg	74:15	74:23	11	dumpfile
water	74:15	0:0	12	dumpfile
arg	74:25	74:31	11	format
water	74:25	0:0	12	format
arg	74:33	74:35	11	""
water	74:33	0:0	12	""
arg	74:36	74:57	11	"Ready bits:  %d, %s"
water	74:36	0:0	12	"Ready bits:  %d, %s"
arg	74:59	74:69	11	ready_bits
water	74:59	0:0	12	ready_bits
arg	74:71	74:77	11	action
water	74:71	0:0	12	action
water	74:78	0:0	10	;
water	75:3	0:0	10	}
water	76:1	0:0	8	}
water	77:6	0:0	6	}
if	79:4	90:6	4	(ready_bits > 0)
cond	79:8	79:21	5	ready_bits > 0
water	79:8	0:0	6	ready_bits
op	79:19	0:0	6	>
water	79:21	0:0	6	0
stmts	80:6	90:6	5	
water	80:6	0:0	6	{
water	81:6	0:0	6	bytebuff
op	81:15	0:0	6	=
water	81:17	0:0	6	(
water	81:18	0:0	6	buff2
op	81:24	0:0	6	>>
water	81:27	0:0	6	8
water	81:28	0:0	6	)
water	81:29	0:0	6	;
op	82:6	0:0	6	*
water	82:7	0:0	6	dst
op	82:10	0:0	6	++
op	82:13	0:0	6	=
water	82:15	0:0	6	bytebuff
water	82:23	0:0	6	;
if	83:6	89:1	6	(( dumpfile != NULL ) && ( level == 3 ))
cond	83:10	83:43	7	( dumpfile != NULL ) && ( level == 3 )
water	83:10	0:0	8	(
water	83:11	0:0	8	dumpfile
op	83:20	0:0	8	!=
water	83:23	0:0	8	NULL
water	83:27	0:0	8	)
op	83:29	0:0	8	&&
water	83:32	0:0	8	(
water	83:33	0:0	8	level
op	83:39	0:0	8	==
water	83:42	0:0	8	3
water	83:43	0:0	8	)
stmts	84:1	89:1	7	
water	84:1	0:0	8	{
call	85:1	87:55	8	dump_info
arg	85:12	85:20	9	dumpfile
water	85:12	0:0	10	dumpfile
arg	85:22	85:28	9	format
water	85:22	0:0	10	format
arg	85:30	85:32	9	""
water	85:30	0:0	10	""
arg	86:9	86:80	9	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
water	86:9	0:0	10	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
arg	87:9	87:16	9	row+1
water	87:9	0:0	10	row
op	87:13	0:0	10	+
water	87:15	0:0	10	1
arg	87:18	87:25	9	col+1
water	87:18	0:0	10	col
op	87:22	0:0	10	+
water	87:24	0:0	10	1
arg	87:27	87:35	9	src_byte
water	87:27	0:0	10	src_byte
arg	87:37	87:44	9	src_bit
water	87:37	0:0	10	src_bit
arg	87:46	87:55	9	dst-out
water	87:46	0:0	10	dst
op	87:50	0:0	10	-
water	87:52	0:0	10	out
water	87:56	0:0	8	;
call	88:1	88:52	8	dump_byte
arg	88:12	88:20	9	dumpfile
water	88:12	0:0	10	dumpfile
arg	88:22	88:28	9	format
water	88:22	0:0	10	format
arg	88:30	88:42	9	"Final bits"
water	88:30	0:0	10	"Final bits"
arg	88:44	88:52	9	bytebuff
water	88:44	0:0	10	bytebuff
water	88:53	0:0	8	;
water	89:1	0:0	8	}
water	90:6	0:0	6	}
if	91:4	95:6	4	(( dumpfile != NULL ) && ( level == 2 ))
cond	91:8	91:41	5	( dumpfile != NULL ) && ( level == 2 )
water	91:8	0:0	6	(
water	91:9	0:0	6	dumpfile
op	91:18	0:0	6	!=
water	91:21	0:0	6	NULL
water	91:25	0:0	6	)
op	91:27	0:0	6	&&
water	91:30	0:0	6	(
water	91:31	0:0	6	level
op	91:37	0:0	6	==
water	91:40	0:0	6	2
water	91:41	0:0	6	)
stmts	92:6	95:6	5	
water	92:6	0:0	6	{
call	93:6	93:83	6	dump_info
arg	93:17	93:25	7	dumpfile
water	93:17	0:0	8	dumpfile
arg	93:27	93:33	7	format
water	93:27	0:0	8	format
arg	93:35	93:69	7	"combineSeparateTileSamples16bits"
water	93:35	0:0	8	"combineSeparateTileSamples16bits"
arg	93:70	93:83	7	"Output data"
water	93:70	0:0	8	"Output data"
water	93:84	0:0	6	;
call	94:6	94:82	6	dump_buffer
arg	94:18	94:26	7	dumpfile
water	94:18	0:0	8	dumpfile
arg	94:28	94:34	7	format
water	94:28	0:0	8	format
arg	94:36	94:37	7	1
water	94:36	0:0	8	1
arg	94:39	94:50	7	dst_rowsize
water	94:39	0:0	8	dst_rowsize
arg	94:52	94:55	7	row
water	94:52	0:0	8	row
arg	94:57	94:82	7	out+(row*dst_rowsize)
water	94:57	0:0	8	out
op	94:61	0:0	8	+
water	94:63	0:0	8	(
water	94:64	0:0	8	row
op	94:68	0:0	8	*
water	94:70	0:0	8	dst_rowsize
water	94:81	0:0	8	)
water	94:83	0:0	6	;
water	95:6	0:0	6	}
water	96:4	0:0	4	}
return	97:2	97:12	2	(0)
water	97:9	0:0	3	(
water	97:10	0:0	3	0
water	97:11	0:0	3	)
