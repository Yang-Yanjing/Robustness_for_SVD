func	2:0	26:2	0	static int	dump_buffer
params	2:23	0:0	1	
param	2:24	2:38	2	FILE *	dumpfile
param	2:40	2:50	2	int	format
param	2:52	2:63	2	uint32	rows
param	2:65	2:77	2	uint32	width
param	3:17	3:27	2	uint32	row
param	3:29	3:48	2	unsigned char *	buff
stmnts	0:0	25:12	1	
decl	5:2	5:10	2	int	j
water	5:7	0:0	2	,
decl	5:2	5:10	2	int	k
decl	6:2	6:10	2	uint32	i
decl	7:2	7:26	2	unsigned char	*dump_ptr
if	8:2	12:4	2	(dumpfile == NULL)
cond	8:6	8:18	3	dumpfile == NULL
water	8:6	0:0	4	dumpfile
op	8:15	0:0	4	==
water	8:18	0:0	4	NULL
stmts	9:4	12:4	3	
water	9:4	0:0	4	{
call	10:4	10:55	4	TIFFError
arg	10:15	10:17	5	""
water	10:15	0:0	6	""
arg	10:19	10:55	5	"Invalid FILE pointer for dump file"
water	10:19	0:0	6	"Invalid FILE pointer for dump file"
water	10:56	0:0	4	;
return	11:4	11:14	4	(1)
water	11:11	0:0	5	(
water	11:12	0:0	5	1
water	11:13	0:0	5	)
water	12:4	0:0	4	}
for	13:2	24:4	2	(i = 0 ;i < rows;i ++)
forinit	13:7	13:12	3	i = 0 ;
water	13:7	0:0	4	i
op	13:9	0:0	4	=
water	13:11	0:0	4	0
water	13:12	0:0	4	;
cond	13:14	13:18	3	i < rows
water	13:14	0:0	4	i
op	13:16	0:0	4	<
water	13:18	0:0	4	rows
forexpr	13:24	13:25	3	i ++
water	13:24	0:0	4	i
op	13:25	0:0	4	++
stmts	14:4	24:4	3	
water	14:4	0:0	4	{
water	15:4	0:0	4	dump_ptr
op	15:13	0:0	4	=
water	15:15	0:0	4	buff
op	15:20	0:0	4	+
water	15:22	0:0	4	(
water	15:23	0:0	4	i
op	15:25	0:0	4	*
water	15:27	0:0	4	width
water	15:32	0:0	4	)
water	15:33	0:0	4	;
if	16:4	19:42	4	(format == DUMP_TEXT)
cond	16:8	16:18	5	format == DUMP_TEXT
water	16:8	0:0	6	format
op	16:15	0:0	6	==
water	16:18	0:0	6	DUMP_TEXT
stmts	17:6	19:42	5	
call	17:6	19:41	6	dump_info
arg	17:17	17:25	7	dumpfile
water	17:17	0:0	8	dumpfile
arg	17:27	17:33	7	format
water	17:27	0:0	8	format
arg	17:35	17:37	7	""
water	17:35	0:0	8	""
arg	18:17	18:49	7	"Row %4d, %d bytes at offset %d"
water	18:17	0:0	8	"Row %4d, %d bytes at offset %d"
arg	19:10	19:21	7	row+i+1
water	19:10	0:0	8	row
op	19:14	0:0	8	+
water	19:16	0:0	8	i
op	19:18	0:0	8	+
water	19:20	0:0	8	1
arg	19:23	19:28	7	width
water	19:23	0:0	8	width
arg	19:30	19:41	7	row*width
water	19:30	0:0	8	row
op	19:34	0:0	8	*
water	19:36	0:0	8	width
water	19:42	0:0	6	;
for	20:4	21:52	4	(j = 0 , k = width ;k >= 10;j += 10 , k -= 10 , dump_ptr += 10)
forinit	20:9	20:25	5	j = 0 , k = width ;
water	20:9	0:0	6	j
op	20:11	0:0	6	=
water	20:13	0:0	6	0
water	20:14	0:0	6	,
water	20:16	0:0	6	k
op	20:18	0:0	6	=
water	20:20	0:0	6	width
water	20:25	0:0	6	;
cond	20:27	20:32	5	k >= 10
water	20:27	0:0	6	k
op	20:29	0:0	6	>=
water	20:32	0:0	6	10
forexpr	20:36	20:66	5	j += 10 , k -= 10 , dump_ptr += 10
water	20:36	0:0	6	j
op	20:38	0:0	6	+=
water	20:41	0:0	6	10
water	20:43	0:0	6	,
water	20:45	0:0	6	k
op	20:47	0:0	6	-=
water	20:50	0:0	6	10
water	20:52	0:0	6	,
water	20:54	0:0	6	dump_ptr
op	20:63	0:0	6	+=
water	20:66	0:0	6	10
stmts	21:6	21:52	5	
call	21:6	21:51	6	dump_data
arg	21:17	21:25	7	dumpfile
water	21:17	0:0	8	dumpfile
arg	21:27	21:33	7	format
water	21:27	0:0	8	format
arg	21:35	21:37	7	""
water	21:35	0:0	8	""
arg	21:39	21:47	7	dump_ptr
water	21:39	0:0	8	dump_ptr
arg	21:49	21:51	7	10
water	21:49	0:0	8	10
water	21:52	0:0	6	;
if	22:4	23:51	4	(k > 0)
cond	22:8	22:12	5	k > 0
water	22:8	0:0	6	k
op	22:10	0:0	6	>
water	22:12	0:0	6	0
stmts	23:6	23:51	5	
call	23:6	23:50	6	dump_data
arg	23:17	23:25	7	dumpfile
water	23:17	0:0	8	dumpfile
arg	23:27	23:33	7	format
water	23:27	0:0	8	format
arg	23:35	23:37	7	""
water	23:35	0:0	8	""
arg	23:39	23:47	7	dump_ptr
water	23:39	0:0	8	dump_ptr
arg	23:49	23:50	7	k
water	23:49	0:0	8	k
water	23:51	0:0	6	;
water	24:4	0:0	4	}
return	25:2	25:12	2	(0)
water	25:9	0:0	3	(
water	25:10	0:0	3	0
water	25:11	0:0	3	)
