func	1:0	78:2	0	static int	extractContigSamples16bits
params	2:27	0:0	1	
param	2:28	2:37	2	uint8 *	in
param	2:39	2:49	2	uint8 *	out
param	2:51	2:62	2	uint32	cols
param	3:28	3:44	2	tsample_t	sample
param	3:46	3:56	2	uint16	spp
param	3:58	3:68	2	uint16	bps
param	4:28	4:43	2	tsample_t	count
param	4:45	4:57	2	uint32	start
param	4:59	4:69	2	uint32	end
stmnts	0:0	77:12	1	
decl	6:2	6:35	2	int	ready_bits
op	6:20	0:0	2	=
water	6:22	0:0	2	0
water	6:23	0:0	2	,
decl	6:2	6:35	2	int	sindex
op	6:32	0:0	2	=
water	6:34	0:0	2	0
decl	7:2	7:43	2	uint32	col
water	7:12	0:0	2	,
decl	7:2	7:43	2	uint32	src_byte
water	7:22	0:0	2	,
decl	7:2	7:43	2	uint32	src_bit
water	7:31	0:0	2	,
decl	7:2	7:43	2	uint32	bit_offset
decl	8:2	8:36	2	uint16	maskbits
op	8:18	0:0	2	=
water	8:20	0:0	2	0
water	8:21	0:0	2	,
decl	8:2	8:36	2	uint16	matchbits
op	8:33	0:0	2	=
water	8:35	0:0	2	0
decl	9:2	9:29	2	uint16	buff1
op	9:15	0:0	2	=
water	9:17	0:0	2	0
water	9:18	0:0	2	,
decl	9:2	9:29	2	uint16	buff2
op	9:26	0:0	2	=
water	9:28	0:0	2	0
decl	10:2	10:21	2	uint8	bytebuff
op	10:18	0:0	2	=
water	10:20	0:0	2	0
decl	11:2	11:17	2	uint8	*src
op	11:13	0:0	2	=
water	11:15	0:0	2	in
decl	12:2	12:18	2	uint8	*dst
op	12:13	0:0	2	=
water	12:15	0:0	2	out
if	13:2	17:4	2	(( src == NULL ) || ( dst == NULL ))
cond	13:6	13:35	3	( src == NULL ) || ( dst == NULL )
water	13:6	0:0	4	(
water	13:7	0:0	4	src
op	13:11	0:0	4	==
water	13:14	0:0	4	NULL
water	13:18	0:0	4	)
op	13:20	0:0	4	||
water	13:23	0:0	4	(
water	13:24	0:0	4	dst
op	13:28	0:0	4	==
water	13:31	0:0	4	NULL
water	13:35	0:0	4	)
stmts	14:4	17:4	3	
water	14:4	0:0	4	{
call	15:4	15:75	4	TIFFError
arg	15:14	15:42	5	"extractContigSamples16bits"
water	15:14	0:0	6	"extractContigSamples16bits"
arg	15:43	15:75	5	"Invalid input or output buffer"
water	15:43	0:0	6	"Invalid input or output buffer"
water	15:76	0:0	4	;
return	16:4	16:14	4	(1)
water	16:11	0:0	5	(
water	16:12	0:0	5	1
water	16:13	0:0	5	)
water	17:4	0:0	4	}
if	18:2	23:4	2	(( start > end ) || ( start > cols ))
cond	18:6	18:36	3	( start > end ) || ( start > cols )
water	18:6	0:0	4	(
water	18:7	0:0	4	start
op	18:13	0:0	4	>
water	18:15	0:0	4	end
water	18:18	0:0	4	)
op	18:20	0:0	4	||
water	18:23	0:0	4	(
water	18:24	0:0	4	start
op	18:30	0:0	4	>
water	18:32	0:0	4	cols
water	18:36	0:0	4	)
stmts	19:4	23:4	3	
water	19:4	0:0	4	{
call	20:4	21:61	4	TIFFError
arg	20:15	20:43	5	"extractContigSamples16bits"
water	20:15	0:0	6	"extractContigSamples16bits"
arg	21:15	21:54	5	"Invalid start column value %d ignored"
water	21:15	0:0	6	"Invalid start column value %d ignored"
arg	21:56	21:61	5	start
water	21:56	0:0	6	start
water	21:62	0:0	4	;
water	22:4	0:0	4	start
op	22:10	0:0	4	=
water	22:12	0:0	4	0
water	22:13	0:0	4	;
water	23:4	0:0	4	}
if	24:2	29:4	2	(( end == 0 ) || ( end > cols ))
cond	24:6	24:31	3	( end == 0 ) || ( end > cols )
water	24:6	0:0	4	(
water	24:7	0:0	4	end
op	24:11	0:0	4	==
water	24:14	0:0	4	0
water	24:15	0:0	4	)
op	24:17	0:0	4	||
water	24:20	0:0	4	(
water	24:21	0:0	4	end
op	24:25	0:0	4	>
water	24:27	0:0	4	cols
water	24:31	0:0	4	)
stmts	25:4	29:4	3	
water	25:4	0:0	4	{
call	26:4	27:57	4	TIFFError
arg	26:15	26:43	5	"extractContigSamples16bits"
water	26:15	0:0	6	"extractContigSamples16bits"
arg	27:15	27:52	5	"Invalid end column value %d ignored"
water	27:15	0:0	6	"Invalid end column value %d ignored"
arg	27:54	27:57	5	end
water	27:54	0:0	6	end
water	27:58	0:0	4	;
water	28:4	0:0	4	end
op	28:8	0:0	4	=
water	28:10	0:0	4	cols
water	28:14	0:0	4	;
water	29:4	0:0	4	}
water	30:2	0:0	2	ready_bits
op	30:13	0:0	2	=
water	30:15	0:0	2	0
water	30:16	0:0	2	;
water	31:2	0:0	2	maskbits
op	31:11	0:0	2	=
water	31:13	0:0	2	(
water	31:14	0:0	2	uint16
water	31:20	0:0	2	)
op	31:21	0:0	2	-
water	31:22	0:0	2	1
op	31:24	0:0	2	>>
water	31:27	0:0	2	(
water	31:28	0:0	2	16
op	31:31	0:0	2	-
water	31:33	0:0	2	bps
water	31:36	0:0	2	)
water	31:37	0:0	2	;
for	32:2	69:4	2	(col = start ;col < end;col ++)
forinit	32:7	32:18	3	col = start ;
water	32:7	0:0	4	col
op	32:11	0:0	4	=
water	32:13	0:0	4	start
water	32:18	0:0	4	;
cond	32:20	32:26	3	col < end
water	32:20	0:0	4	col
op	32:24	0:0	4	<
water	32:26	0:0	4	end
forexpr	32:31	32:34	3	col ++
water	32:31	0:0	4	col
op	32:34	0:0	4	++
stmts	33:4	69:4	3	
water	33:4	0:0	4	{
water	34:4	0:0	4	bit_offset
op	34:15	0:0	4	=
water	34:17	0:0	4	col
op	34:21	0:0	4	*
water	34:23	0:0	4	bps
op	34:27	0:0	4	*
water	34:29	0:0	4	spp
water	34:32	0:0	4	;
for	35:4	68:6	4	(sindex = sample ;( sindex < spp ) && ( sindex < ( sample + count ) );sindex ++)
forinit	35:9	35:24	5	sindex = sample ;
water	35:9	0:0	6	sindex
op	35:16	0:0	6	=
water	35:18	0:0	6	sample
water	35:24	0:0	6	;
cond	35:26	35:70	5	( sindex < spp ) && ( sindex < ( sample + count ) )
water	35:26	0:0	6	(
water	35:27	0:0	6	sindex
op	35:34	0:0	6	<
water	35:36	0:0	6	spp
water	35:39	0:0	6	)
op	35:41	0:0	6	&&
water	35:44	0:0	6	(
water	35:45	0:0	6	sindex
op	35:52	0:0	6	<
water	35:54	0:0	6	(
water	35:55	0:0	6	sample
op	35:62	0:0	6	+
water	35:64	0:0	6	count
water	35:69	0:0	6	)
water	35:70	0:0	6	)
forexpr	35:73	35:79	5	sindex ++
water	35:73	0:0	6	sindex
op	35:79	0:0	6	++
stmts	36:6	68:6	5	
water	36:6	0:0	6	{
if	37:6	41:8	6	(sindex == 0)
cond	37:10	37:20	7	sindex == 0
water	37:10	0:0	8	sindex
op	37:17	0:0	8	==
water	37:20	0:0	8	0
stmts	38:8	41:8	7	
water	38:8	0:0	8	{
water	39:8	0:0	8	src_byte
op	39:17	0:0	8	=
water	39:19	0:0	8	bit_offset
op	39:30	0:0	8	/
water	39:32	0:0	8	8
water	39:33	0:0	8	;
water	40:8	0:0	8	src_bit
op	40:17	0:0	8	=
water	40:19	0:0	8	bit_offset
op	40:30	0:0	8	%
water	40:32	0:0	8	8
water	40:33	0:0	8	;
water	41:8	0:0	8	}
else	42:6	46:8	6
stmts	43:8	46:8	7	
water	43:8	0:0	8	{
water	44:8	0:0	8	src_byte
op	44:17	0:0	8	=
water	44:19	0:0	8	(
water	44:20	0:0	8	bit_offset
op	44:31	0:0	8	+
water	44:33	0:0	8	(
water	44:34	0:0	8	sindex
op	44:41	0:0	8	*
water	44:43	0:0	8	bps
water	44:46	0:0	8	)
water	44:47	0:0	8	)
op	44:49	0:0	8	/
water	44:51	0:0	8	8
water	44:52	0:0	8	;
water	45:8	0:0	8	src_bit
op	45:17	0:0	8	=
water	45:19	0:0	8	(
water	45:20	0:0	8	bit_offset
op	45:31	0:0	8	+
water	45:33	0:0	8	(
water	45:34	0:0	8	sindex
op	45:41	0:0	8	*
water	45:43	0:0	8	bps
water	45:46	0:0	8	)
water	45:47	0:0	8	)
op	45:49	0:0	8	%
water	45:51	0:0	8	8
water	45:52	0:0	8	;
water	46:8	0:0	8	}
water	47:6	0:0	6	src
op	47:10	0:0	6	=
water	47:12	0:0	6	in
op	47:15	0:0	6	+
water	47:17	0:0	6	src_byte
water	47:25	0:0	6	;
water	48:6	0:0	6	matchbits
op	48:16	0:0	6	=
water	48:18	0:0	6	maskbits
op	48:27	0:0	6	<<
water	48:30	0:0	6	(
water	48:31	0:0	6	16
op	48:34	0:0	6	-
water	48:36	0:0	6	src_bit
op	48:44	0:0	6	-
water	48:46	0:0	6	bps
water	48:49	0:0	6	)
water	48:50	0:0	6	;
if	49:6	50:38	6	(little_endian)
cond	49:10	49:10	7	little_endian
water	49:10	0:0	8	little_endian
stmts	50:8	50:38	7	
water	50:8	0:0	8	buff1
op	50:14	0:0	8	=
water	50:16	0:0	8	(
water	50:17	0:0	8	src
op	50:20	0:0	8	[
water	50:21	0:0	8	0
op	50:22	0:0	8	]
op	50:24	0:0	8	<<
water	50:27	0:0	8	8
water	50:28	0:0	8	)
op	50:30	0:0	8	|
water	50:32	0:0	8	src
op	50:35	0:0	8	[
water	50:36	0:0	8	1
op	50:37	0:0	8	]
water	50:38	0:0	8	;
else	51:6	52:38	6
stmts	52:8	52:38	7	
water	52:8	0:0	8	buff1
op	52:14	0:0	8	=
water	52:16	0:0	8	(
water	52:17	0:0	8	src
op	52:20	0:0	8	[
water	52:21	0:0	8	1
op	52:22	0:0	8	]
op	52:24	0:0	8	<<
water	52:27	0:0	8	8
water	52:28	0:0	8	)
op	52:30	0:0	8	|
water	52:32	0:0	8	src
op	52:35	0:0	8	[
water	52:36	0:0	8	0
op	52:37	0:0	8	]
water	52:38	0:0	8	;
water	53:6	0:0	6	buff1
op	53:12	0:0	6	=
water	53:14	0:0	6	(
water	53:15	0:0	6	buff1
op	53:21	0:0	6	&
water	53:23	0:0	6	matchbits
water	53:32	0:0	6	)
op	53:34	0:0	6	<<
water	53:37	0:0	6	(
water	53:38	0:0	6	src_bit
water	53:45	0:0	6	)
water	53:46	0:0	6	;
if	54:6	58:8	6	(ready_bits < 8)
cond	54:10	54:23	7	ready_bits < 8
water	54:10	0:0	8	ready_bits
op	54:21	0:0	8	<
water	54:23	0:0	8	8
stmts	55:8	58:8	7	
water	55:8	0:0	8	{
water	56:8	0:0	8	bytebuff
op	56:17	0:0	8	=
water	56:19	0:0	8	0
water	56:20	0:0	8	;
water	57:8	0:0	8	buff2
op	57:14	0:0	8	=
water	57:16	0:0	8	(
water	57:17	0:0	8	buff2
op	57:23	0:0	8	|
water	57:25	0:0	8	(
water	57:26	0:0	8	buff1
op	57:32	0:0	8	>>
water	57:35	0:0	8	ready_bits
water	57:45	0:0	8	)
water	57:46	0:0	8	)
water	57:47	0:0	8	;
water	58:8	0:0	8	}
else	59:6	66:8	6
stmts	60:8	66:8	7	
water	60:8	0:0	8	{
water	61:8	0:0	8	bytebuff
op	61:17	0:0	8	=
water	61:19	0:0	8	(
water	61:20	0:0	8	buff2
op	61:26	0:0	8	>>
water	61:29	0:0	8	8
water	61:30	0:0	8	)
water	61:31	0:0	8	;
op	62:8	0:0	8	*
water	62:9	0:0	8	dst
op	62:12	0:0	8	++
op	62:15	0:0	8	=
water	62:17	0:0	8	bytebuff
water	62:25	0:0	8	;
water	63:8	0:0	8	ready_bits
op	63:19	0:0	8	-=
water	63:22	0:0	8	8
water	63:23	0:0	8	;
water	65:8	0:0	8	buff2
op	65:14	0:0	8	=
water	65:16	0:0	8	(
water	65:17	0:0	8	(
water	65:18	0:0	8	buff2
op	65:24	0:0	8	<<
water	65:27	0:0	8	8
water	65:28	0:0	8	)
op	65:30	0:0	8	|
water	65:32	0:0	8	(
water	65:33	0:0	8	buff1
op	65:39	0:0	8	>>
water	65:42	0:0	8	ready_bits
water	65:52	0:0	8	)
water	65:53	0:0	8	)
water	65:54	0:0	8	;
water	66:8	0:0	8	}
water	67:6	0:0	6	ready_bits
op	67:17	0:0	6	+=
water	67:20	0:0	6	bps
water	67:23	0:0	6	;
water	68:6	0:0	6	}
water	69:4	0:0	4	}
while	71:2	76:4	2	(ready_bits > 0)
cond	71:9	71:22	3	ready_bits > 0
water	71:9	0:0	4	ready_bits
op	71:20	0:0	4	>
water	71:22	0:0	4	0
stmts	72:4	76:4	3	
water	72:4	0:0	4	{
water	73:4	0:0	4	bytebuff
op	73:13	0:0	4	=
water	73:15	0:0	4	(
water	73:16	0:0	4	buff2
op	73:22	0:0	4	>>
water	73:25	0:0	4	8
water	73:26	0:0	4	)
water	73:27	0:0	4	;
op	74:4	0:0	4	*
water	74:5	0:0	4	dst
op	74:8	0:0	4	++
op	74:11	0:0	4	=
water	74:13	0:0	4	bytebuff
water	74:21	0:0	4	;
water	75:4	0:0	4	ready_bits
op	75:15	0:0	4	-=
water	75:18	0:0	4	8
water	75:19	0:0	4	;
water	76:4	0:0	4	}
return	77:2	77:12	2	(0)
water	77:9	0:0	3	(
water	77:10	0:0	3	0
water	77:11	0:0	3	)
