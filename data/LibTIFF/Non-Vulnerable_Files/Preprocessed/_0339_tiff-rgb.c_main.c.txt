func	1:0	137:0	0	int	main
params	1:8	0:0	1	
param	1:9	1:17	2	int	argc
param	1:19	1:30	2	char * *	argv
stmnts	0:0	136:11	1	
decl	3:4	3:37	2	char	*input_file
op	3:31	0:0	2	=
water	3:33	0:0	2	NULL
decl	4:4	4:44	2	double	image_gamma
op	4:32	0:0	2	=
water	4:34	0:0	2	TIFF_GAMMA
decl	5:4	5:24	2	int	i
water	5:21	0:0	2	,
decl	5:4	5:24	2	int	j
decl	6:4	6:23	2	TIFF	*tif
decl	7:4	7:29	2	unsigned char	*scan_line
decl	8:4	8:60	2	uint16	red[CMSIZE]
water	8:31	0:0	2	,
decl	8:4	8:60	2	uint16	green[CMSIZE]
water	8:46	0:0	2	,
decl	8:4	8:60	2	uint16	blue[CMSIZE]
decl	9:4	9:32	2	float	refblackwhite[2*3]
water	10:4	0:0	2	programName
op	10:16	0:0	2	=
water	10:18	0:0	2	argv
op	10:22	0:0	2	[
water	10:23	0:0	2	0
op	10:24	0:0	2	]
water	10:25	0:0	2	;
switch	11:4	25:4	2	(argc)
cond	11:12	11:12	3	argc
water	11:12	0:0	4	argc
stmts	11:18	25:4	3	
water	11:18	0:0	4	{
label	12:4	12:10	4	case 2 :
water	13:8	0:0	4	image_gamma
op	13:20	0:0	4	=
water	13:22	0:0	4	TIFF_GAMMA
water	13:32	0:0	4	;
water	14:8	0:0	4	input_file
op	14:19	0:0	4	=
water	14:21	0:0	4	argv
op	14:25	0:0	4	[
water	14:26	0:0	4	1
op	14:27	0:0	4	]
water	14:28	0:0	4	;
break	15:8	15:13	4	
label	16:4	16:10	4	case 4 :
if	17:8	20:8	4	(!strcmp (argv [ 1 ] ,"-gamma" ))
cond	17:12	17:37	5	!strcmp (argv [ 1 ] ,"-gamma" )
op	17:12	0:0	6	!
call	17:13	17:37	6	strcmp
arg	17:20	17:27	7	argv[1]
water	17:20	0:0	8	argv
op	17:24	0:0	8	[
water	17:25	0:0	8	1
op	17:26	0:0	8	]
arg	17:29	17:37	7	"-gamma"
water	17:29	0:0	8	"-gamma"
stmts	17:40	20:8	5	
water	17:40	0:0	6	{
water	18:12	0:0	6	image_gamma
op	18:24	0:0	6	=
call	18:26	18:38	6	atof
arg	18:31	18:38	7	argv[2]
water	18:31	0:0	8	argv
op	18:35	0:0	8	[
water	18:36	0:0	8	2
op	18:37	0:0	8	]
water	18:39	0:0	6	;
water	19:12	0:0	6	input_file
op	19:23	0:0	6	=
water	19:25	0:0	6	argv
op	19:29	0:0	6	[
water	19:30	0:0	6	3
op	19:31	0:0	6	]
water	19:32	0:0	6	;
water	20:8	0:0	6	}
else	20:10	21:19	4
stmts	21:12	21:19	5	
call	21:12	21:18	6	Usage
water	21:19	0:0	6	;
break	22:8	22:13	4	
label	23:4	23:11	4	default :
call	24:8	24:14	4	Usage
water	24:15	0:0	4	;
water	25:4	0:0	4	}
for	26:4	34:4	2	(i = 0 ;i < CMSIZE;i ++)
forinit	26:9	26:14	3	i = 0 ;
water	26:9	0:0	4	i
op	26:11	0:0	4	=
water	26:13	0:0	4	0
water	26:14	0:0	4	;
cond	26:16	26:20	3	i < CMSIZE
water	26:16	0:0	4	i
op	26:18	0:0	4	<
water	26:20	0:0	4	CMSIZE
forexpr	26:28	26:29	3	i ++
water	26:28	0:0	4	i
op	26:29	0:0	4	++
stmts	26:33	34:4	3	
water	26:33	0:0	4	{
if	27:8	28:43	4	(i == 0)
cond	27:12	27:17	5	i == 0
water	27:12	0:0	6	i
op	27:14	0:0	6	==
water	27:17	0:0	6	0
stmts	28:12	28:43	5	
water	28:12	0:0	6	red
op	28:15	0:0	6	[
water	28:16	0:0	6	i
op	28:17	0:0	6	]
op	28:19	0:0	6	=
water	28:21	0:0	6	green
op	28:26	0:0	6	[
water	28:27	0:0	6	i
op	28:28	0:0	6	]
op	28:30	0:0	6	=
water	28:32	0:0	6	blue
op	28:36	0:0	6	[
water	28:37	0:0	6	i
op	28:38	0:0	6	]
op	28:40	0:0	6	=
water	28:42	0:0	6	0
water	28:43	0:0	6	;
else	29:8	33:8	4
stmts	29:13	33:8	5	
water	29:13	0:0	6	{
water	30:12	0:0	6	red
op	30:15	0:0	6	[
water	30:16	0:0	6	i
op	30:17	0:0	6	]
op	30:19	0:0	6	=
call	30:21	30:72	6	ROUND
arg	30:27	30:72	7	(pow(i/255.0,1.0/image_gamma)*65535.0)
water	30:27	0:0	8	(
call	30:28	30:60	8	pow
arg	30:32	30:41	9	i/255.0
water	30:32	0:0	10	i
op	30:34	0:0	10	/
water	30:36	0:0	10	255
op	30:39	0:0	10	.
water	30:40	0:0	10	0
arg	30:43	30:60	9	1.0/image_gamma
water	30:43	0:0	10	1
op	30:44	0:0	10	.
water	30:45	0:0	10	0
op	30:47	0:0	10	/
water	30:49	0:0	10	image_gamma
op	30:62	0:0	8	*
water	30:64	0:0	8	65535
op	30:69	0:0	8	.
water	30:70	0:0	8	0
water	30:71	0:0	8	)
water	30:73	0:0	6	;
water	31:12	0:0	6	green
op	31:17	0:0	6	[
water	31:18	0:0	6	i
op	31:19	0:0	6	]
op	31:21	0:0	6	=
call	31:23	31:74	6	ROUND
arg	31:29	31:74	7	(pow(i/255.0,1.0/image_gamma)*65535.0)
water	31:29	0:0	8	(
call	31:30	31:62	8	pow
arg	31:34	31:43	9	i/255.0
water	31:34	0:0	10	i
op	31:36	0:0	10	/
water	31:38	0:0	10	255
op	31:41	0:0	10	.
water	31:42	0:0	10	0
arg	31:45	31:62	9	1.0/image_gamma
water	31:45	0:0	10	1
op	31:46	0:0	10	.
water	31:47	0:0	10	0
op	31:49	0:0	10	/
water	31:51	0:0	10	image_gamma
op	31:64	0:0	8	*
water	31:66	0:0	8	65535
op	31:71	0:0	8	.
water	31:72	0:0	8	0
water	31:73	0:0	8	)
water	31:75	0:0	6	;
water	32:12	0:0	6	blue
op	32:16	0:0	6	[
water	32:17	0:0	6	i
op	32:18	0:0	6	]
op	32:20	0:0	6	=
call	32:22	32:73	6	ROUND
arg	32:28	32:73	7	(pow(i/255.0,1.0/image_gamma)*65535.0)
water	32:28	0:0	8	(
call	32:29	32:61	8	pow
arg	32:33	32:42	9	i/255.0
water	32:33	0:0	10	i
op	32:35	0:0	10	/
water	32:37	0:0	10	255
op	32:40	0:0	10	.
water	32:41	0:0	10	0
arg	32:44	32:61	9	1.0/image_gamma
water	32:44	0:0	10	1
op	32:45	0:0	10	.
water	32:46	0:0	10	0
op	32:48	0:0	10	/
water	32:50	0:0	10	image_gamma
op	32:63	0:0	8	*
water	32:65	0:0	8	65535
op	32:70	0:0	8	.
water	32:71	0:0	8	0
water	32:72	0:0	8	)
water	32:74	0:0	6	;
water	33:8	0:0	6	}
water	34:4	0:0	4	}
water	35:4	0:0	2	refblackwhite
op	35:17	0:0	2	[
water	35:18	0:0	2	0
op	35:19	0:0	2	]
op	35:21	0:0	2	=
water	35:23	0:0	2	0
op	35:24	0:0	2	.
water	35:25	0:0	2	0
water	35:26	0:0	2	;
water	35:28	0:0	2	refblackwhite
op	35:41	0:0	2	[
water	35:42	0:0	2	1
op	35:43	0:0	2	]
op	35:45	0:0	2	=
water	35:47	0:0	2	255
op	35:50	0:0	2	.
water	35:51	0:0	2	0
water	35:52	0:0	2	;
water	36:4	0:0	2	refblackwhite
op	36:17	0:0	2	[
water	36:18	0:0	2	2
op	36:19	0:0	2	]
op	36:21	0:0	2	=
water	36:23	0:0	2	0
op	36:24	0:0	2	.
water	36:25	0:0	2	0
water	36:26	0:0	2	;
water	36:28	0:0	2	refblackwhite
op	36:41	0:0	2	[
water	36:42	0:0	2	3
op	36:43	0:0	2	]
op	36:45	0:0	2	=
water	36:47	0:0	2	255
op	36:50	0:0	2	.
water	36:51	0:0	2	0
water	36:52	0:0	2	;
water	37:4	0:0	2	refblackwhite
op	37:17	0:0	2	[
water	37:18	0:0	2	4
op	37:19	0:0	2	]
op	37:21	0:0	2	=
water	37:23	0:0	2	0
op	37:24	0:0	2	.
water	37:25	0:0	2	0
water	37:26	0:0	2	;
water	37:28	0:0	2	refblackwhite
op	37:41	0:0	2	[
water	37:42	0:0	2	5
op	37:43	0:0	2	]
op	37:45	0:0	2	=
water	37:47	0:0	2	255
op	37:50	0:0	2	.
water	37:51	0:0	2	0
water	37:52	0:0	2	;
if	38:4	41:4	2	(( tif =TIFFOpen (input_file ,"w" ) ) == NULL)
cond	38:8	38:45	3	( tif =TIFFOpen (input_file ,"w" ) ) == NULL
water	38:8	0:0	4	(
water	38:9	0:0	4	tif
op	38:13	0:0	4	=
call	38:15	38:39	4	TIFFOpen
arg	38:24	38:34	5	input_file
water	38:24	0:0	6	input_file
arg	38:36	38:39	5	"w"
water	38:36	0:0	6	"w"
water	38:40	0:0	4	)
op	38:42	0:0	4	==
water	38:45	0:0	4	NULL
stmts	38:51	41:4	3	
water	38:51	0:0	4	{
call	39:8	39:68	4	fprintf
arg	39:16	39:22	5	stderr
water	39:16	0:0	6	stderr
arg	39:24	39:56	5	"can't open %s as a TIFF file\n"
water	39:24	0:0	6	"can't open %s as a TIFF file\n"
arg	39:58	39:68	5	input_file
water	39:58	0:0	6	input_file
water	39:69	0:0	4	;
call	40:8	40:14	4	exit
arg	40:13	40:14	5	0
water	40:13	0:0	6	0
water	40:15	0:0	4	;
water	41:4	0:0	4	}
call	42:4	42:47	2	TIFFSetField
arg	42:17	42:20	3	tif
water	42:17	0:0	4	tif
arg	42:22	42:40	3	TIFFTAG_IMAGEWIDTH
water	42:22	0:0	4	TIFFTAG_IMAGEWIDTH
arg	42:42	42:47	3	WIDTH
water	42:42	0:0	4	WIDTH
water	42:48	0:0	2	;
call	43:4	43:49	2	TIFFSetField
arg	43:17	43:20	3	tif
water	43:17	0:0	4	tif
arg	43:22	43:41	3	TIFFTAG_IMAGELENGTH
water	43:22	0:0	4	TIFFTAG_IMAGELENGTH
arg	43:43	43:49	3	HEIGHT
water	43:43	0:0	4	HEIGHT
water	43:50	0:0	2	;
call	44:4	44:46	2	TIFFSetField
arg	44:17	44:20	3	tif
water	44:17	0:0	4	tif
arg	44:22	44:43	3	TIFFTAG_BITSPERSAMPLE
water	44:22	0:0	4	TIFFTAG_BITSPERSAMPLE
arg	44:45	44:46	3	8
water	44:45	0:0	4	8
water	44:47	0:0	2	;
call	45:4	45:59	2	TIFFSetField
arg	45:17	45:20	3	tif
water	45:17	0:0	4	tif
arg	45:22	45:41	3	TIFFTAG_COMPRESSION
water	45:22	0:0	4	TIFFTAG_COMPRESSION
arg	45:43	45:59	3	COMPRESSION_NONE
water	45:43	0:0	4	COMPRESSION_NONE
water	45:60	0:0	2	;
call	46:4	46:58	2	TIFFSetField
arg	46:17	46:20	3	tif
water	46:17	0:0	4	tif
arg	46:22	46:41	3	TIFFTAG_PHOTOMETRIC
water	46:22	0:0	4	TIFFTAG_PHOTOMETRIC
arg	46:43	46:58	3	PHOTOMETRIC_RGB
water	46:43	0:0	4	PHOTOMETRIC_RGB
water	46:59	0:0	2	;
call	47:4	47:48	2	TIFFSetField
arg	47:17	47:20	3	tif
water	47:17	0:0	4	tif
arg	47:22	47:45	3	TIFFTAG_SAMPLESPERPIXEL
water	47:22	0:0	4	TIFFTAG_SAMPLESPERPIXEL
arg	47:47	47:48	3	3
water	47:47	0:0	4	3
water	47:49	0:0	2	;
call	48:4	48:45	2	TIFFSetField
arg	48:17	48:20	3	tif
water	48:17	0:0	4	tif
arg	48:22	48:42	3	TIFFTAG_ROWSPERSTRIP
water	48:22	0:0	4	TIFFTAG_ROWSPERSTRIP
arg	48:44	48:45	3	1
water	48:44	0:0	4	1
water	48:46	0:0	2	;
call	49:4	49:63	2	TIFFSetField
arg	49:17	49:20	3	tif
water	49:17	0:0	4	tif
arg	49:22	49:42	3	TIFFTAG_PLANARCONFIG
water	49:22	0:0	4	TIFFTAG_PLANARCONFIG
arg	49:44	49:63	3	PLANARCONFIG_CONTIG
water	49:44	0:0	4	PLANARCONFIG_CONTIG
water	49:64	0:0	2	;
call	50:4	50:58	2	TIFFSetField
arg	50:17	50:20	3	tif
water	50:17	0:0	4	tif
arg	50:22	50:44	3	TIFFTAG_RESOLUTIONUNIT
water	50:22	0:0	4	TIFFTAG_RESOLUTIONUNIT
arg	50:46	50:58	3	RESUNIT_NONE
water	50:46	0:0	4	RESUNIT_NONE
water	50:59	0:0	2	;
call	52:4	52:56	2	TIFFSetField
arg	52:17	52:20	3	tif
water	52:17	0:0	4	tif
arg	52:22	52:40	3	TIFFTAG_WHITEPOINT
water	52:22	0:0	4	TIFFTAG_WHITEPOINT
arg	52:42	52:48	3	whitex
water	52:42	0:0	4	whitex
arg	52:50	52:56	3	whitey
water	52:50	0:0	4	whitey
water	52:57	0:0	2	;
call	53:4	53:62	2	TIFFSetField
arg	53:17	53:20	3	tif
water	53:17	0:0	4	tif
arg	53:22	53:51	3	TIFFTAG_PRIMARYCHROMATICITIES
water	53:22	0:0	4	TIFFTAG_PRIMARYCHROMATICITIES
arg	53:53	53:62	3	primaries
water	53:53	0:0	4	primaries
water	53:63	0:0	2	;
call	55:4	55:64	2	TIFFSetField
arg	55:17	55:20	3	tif
water	55:17	0:0	4	tif
arg	55:22	55:49	3	TIFFTAG_REFERENCEBLACKWHITE
water	55:22	0:0	4	TIFFTAG_REFERENCEBLACKWHITE
arg	55:51	55:64	3	refblackwhite
water	55:51	0:0	4	refblackwhite
water	55:65	0:0	2	;
call	56:4	56:64	2	TIFFSetField
arg	56:17	56:20	3	tif
water	56:17	0:0	4	tif
arg	56:22	56:46	3	TIFFTAG_TRANSFERFUNCTION
water	56:22	0:0	4	TIFFTAG_TRANSFERFUNCTION
arg	56:48	56:51	3	red
water	56:48	0:0	4	red
arg	56:53	56:58	3	green
water	56:53	0:0	4	green
arg	56:60	56:64	3	blue
water	56:60	0:0	4	blue
water	56:65	0:0	2	;
water	57:4	0:0	2	scan_line
op	57:14	0:0	2	=
water	57:16	0:0	2	(
water	57:17	0:0	2	unsigned
water	57:26	0:0	2	char
op	57:31	0:0	2	*
water	57:32	0:0	2	)
call	57:34	57:50	2	malloc
arg	57:41	57:50	3	WIDTH*3
water	57:41	0:0	4	WIDTH
op	57:47	0:0	4	*
water	57:49	0:0	4	3
water	57:51	0:0	2	;
for	58:4	95:4	2	(i = 0 ;i < 255;i ++)
forinit	58:9	58:14	3	i = 0 ;
water	58:9	0:0	4	i
op	58:11	0:0	4	=
water	58:13	0:0	4	0
water	58:14	0:0	4	;
cond	58:16	58:20	3	i < 255
water	58:16	0:0	4	i
op	58:18	0:0	4	<
water	58:20	0:0	4	255
forexpr	58:25	58:26	3	i ++
water	58:25	0:0	4	i
op	58:26	0:0	4	++
stmts	58:30	95:4	3	
water	58:30	0:0	4	{
for	59:8	63:8	4	(j = 0 ;j < 75;j ++)
forinit	59:13	59:18	5	j = 0 ;
water	59:13	0:0	6	j
op	59:15	0:0	6	=
water	59:17	0:0	6	0
water	59:18	0:0	6	;
cond	59:20	59:24	5	j < 75
water	59:20	0:0	6	j
op	59:22	0:0	6	<
water	59:24	0:0	6	75
forexpr	59:28	59:29	5	j ++
water	59:28	0:0	6	j
op	59:29	0:0	6	++
stmts	59:33	63:8	5	
water	59:33	0:0	6	{
water	60:13	0:0	6	scan_line
op	60:22	0:0	6	[
water	60:23	0:0	6	j
op	60:25	0:0	6	*
water	60:27	0:0	6	3
op	60:28	0:0	6	]
op	60:30	0:0	6	=
water	60:32	0:0	6	255
water	60:35	0:0	6	;
water	61:13	0:0	6	scan_line
op	61:22	0:0	6	[
water	61:23	0:0	6	(
water	61:24	0:0	6	j
op	61:26	0:0	6	*
water	61:28	0:0	6	3
water	61:29	0:0	6	)
op	61:31	0:0	6	+
water	61:33	0:0	6	1
op	61:34	0:0	6	]
op	61:36	0:0	6	=
water	61:38	0:0	6	255
op	61:42	0:0	6	-
water	61:44	0:0	6	i
water	61:45	0:0	6	;
water	62:13	0:0	6	scan_line
op	62:22	0:0	6	[
water	62:23	0:0	6	(
water	62:24	0:0	6	j
op	62:26	0:0	6	*
water	62:28	0:0	6	3
water	62:29	0:0	6	)
op	62:31	0:0	6	+
water	62:33	0:0	6	2
op	62:34	0:0	6	]
op	62:36	0:0	6	=
water	62:38	0:0	6	255
op	62:42	0:0	6	-
water	62:44	0:0	6	i
water	62:45	0:0	6	;
water	63:8	0:0	6	}
for	64:8	68:8	4	(j = 75 ;j < 150;j ++)
forinit	64:13	64:19	5	j = 75 ;
water	64:13	0:0	6	j
op	64:15	0:0	6	=
water	64:17	0:0	6	75
water	64:19	0:0	6	;
cond	64:21	64:25	5	j < 150
water	64:21	0:0	6	j
op	64:23	0:0	6	<
water	64:25	0:0	6	150
forexpr	64:30	64:31	5	j ++
water	64:30	0:0	6	j
op	64:31	0:0	6	++
stmts	64:35	68:8	5	
water	64:35	0:0	6	{
water	65:13	0:0	6	scan_line
op	65:22	0:0	6	[
water	65:23	0:0	6	j
op	65:25	0:0	6	*
water	65:27	0:0	6	3
op	65:28	0:0	6	]
op	65:30	0:0	6	=
water	65:32	0:0	6	255
op	65:36	0:0	6	-
water	65:38	0:0	6	i
water	65:39	0:0	6	;
water	66:13	0:0	6	scan_line
op	66:22	0:0	6	[
water	66:23	0:0	6	(
water	66:24	0:0	6	j
op	66:26	0:0	6	*
water	66:28	0:0	6	3
water	66:29	0:0	6	)
op	66:31	0:0	6	+
water	66:33	0:0	6	1
op	66:34	0:0	6	]
op	66:36	0:0	6	=
water	66:38	0:0	6	255
water	66:41	0:0	6	;
water	67:13	0:0	6	scan_line
op	67:22	0:0	6	[
water	67:23	0:0	6	(
water	67:24	0:0	6	j
op	67:26	0:0	6	*
water	67:28	0:0	6	3
water	67:29	0:0	6	)
op	67:31	0:0	6	+
water	67:33	0:0	6	2
op	67:34	0:0	6	]
op	67:36	0:0	6	=
water	67:38	0:0	6	255
op	67:42	0:0	6	-
water	67:44	0:0	6	i
water	67:45	0:0	6	;
water	68:8	0:0	6	}
for	69:8	73:8	4	(j = 150 ;j < 225;j ++)
forinit	69:13	69:20	5	j = 150 ;
water	69:13	0:0	6	j
op	69:15	0:0	6	=
water	69:17	0:0	6	150
water	69:20	0:0	6	;
cond	69:22	69:26	5	j < 225
water	69:22	0:0	6	j
op	69:24	0:0	6	<
water	69:26	0:0	6	225
forexpr	69:31	69:32	5	j ++
water	69:31	0:0	6	j
op	69:32	0:0	6	++
stmts	69:36	73:8	5	
water	69:36	0:0	6	{
water	70:13	0:0	6	scan_line
op	70:22	0:0	6	[
water	70:23	0:0	6	j
op	70:25	0:0	6	*
water	70:27	0:0	6	3
op	70:28	0:0	6	]
op	70:30	0:0	6	=
water	70:32	0:0	6	255
op	70:36	0:0	6	-
water	70:38	0:0	6	i
water	70:39	0:0	6	;
water	71:13	0:0	6	scan_line
op	71:22	0:0	6	[
water	71:23	0:0	6	(
water	71:24	0:0	6	j
op	71:26	0:0	6	*
water	71:28	0:0	6	3
water	71:29	0:0	6	)
op	71:31	0:0	6	+
water	71:33	0:0	6	1
op	71:34	0:0	6	]
op	71:36	0:0	6	=
water	71:38	0:0	6	255
op	71:42	0:0	6	-
water	71:44	0:0	6	i
water	71:45	0:0	6	;
water	72:13	0:0	6	scan_line
op	72:22	0:0	6	[
water	72:23	0:0	6	(
water	72:24	0:0	6	j
op	72:26	0:0	6	*
water	72:28	0:0	6	3
water	72:29	0:0	6	)
op	72:31	0:0	6	+
water	72:33	0:0	6	2
op	72:34	0:0	6	]
op	72:36	0:0	6	=
water	72:38	0:0	6	255
water	72:41	0:0	6	;
water	73:8	0:0	6	}
for	74:8	78:8	4	(j = 225 ;j < 300;j ++)
forinit	74:13	74:20	5	j = 225 ;
water	74:13	0:0	6	j
op	74:15	0:0	6	=
water	74:17	0:0	6	225
water	74:20	0:0	6	;
cond	74:22	74:26	5	j < 300
water	74:22	0:0	6	j
op	74:24	0:0	6	<
water	74:26	0:0	6	300
forexpr	74:31	74:32	5	j ++
water	74:31	0:0	6	j
op	74:32	0:0	6	++
stmts	74:36	78:8	5	
water	74:36	0:0	6	{
water	75:13	0:0	6	scan_line
op	75:22	0:0	6	[
water	75:23	0:0	6	j
op	75:25	0:0	6	*
water	75:27	0:0	6	3
op	75:28	0:0	6	]
op	75:30	0:0	6	=
water	75:32	0:0	6	(
water	75:33	0:0	6	i
op	75:35	0:0	6	-
water	75:37	0:0	6	1
water	75:38	0:0	6	)
op	75:40	0:0	6	/
water	75:42	0:0	6	2
water	75:43	0:0	6	;
water	76:13	0:0	6	scan_line
op	76:22	0:0	6	[
water	76:23	0:0	6	(
water	76:24	0:0	6	j
op	76:26	0:0	6	*
water	76:28	0:0	6	3
water	76:29	0:0	6	)
op	76:31	0:0	6	+
water	76:33	0:0	6	1
op	76:34	0:0	6	]
op	76:36	0:0	6	=
water	76:38	0:0	6	(
water	76:39	0:0	6	i
op	76:41	0:0	6	-
water	76:43	0:0	6	1
water	76:44	0:0	6	)
op	76:46	0:0	6	/
water	76:48	0:0	6	2
water	76:49	0:0	6	;
water	77:13	0:0	6	scan_line
op	77:22	0:0	6	[
water	77:23	0:0	6	(
water	77:24	0:0	6	j
op	77:26	0:0	6	*
water	77:28	0:0	6	3
water	77:29	0:0	6	)
op	77:31	0:0	6	+
water	77:33	0:0	6	2
op	77:34	0:0	6	]
op	77:36	0:0	6	=
water	77:38	0:0	6	(
water	77:39	0:0	6	i
op	77:41	0:0	6	-
water	77:43	0:0	6	1
water	77:44	0:0	6	)
op	77:46	0:0	6	/
water	77:48	0:0	6	2
water	77:49	0:0	6	;
water	78:8	0:0	6	}
for	79:8	83:8	4	(j = 300 ;j < 375;j ++)
forinit	79:13	79:20	5	j = 300 ;
water	79:13	0:0	6	j
op	79:15	0:0	6	=
water	79:17	0:0	6	300
water	79:20	0:0	6	;
cond	79:22	79:26	5	j < 375
water	79:22	0:0	6	j
op	79:24	0:0	6	<
water	79:26	0:0	6	375
forexpr	79:31	79:32	5	j ++
water	79:31	0:0	6	j
op	79:32	0:0	6	++
stmts	79:36	83:8	5	
water	79:36	0:0	6	{
water	80:13	0:0	6	scan_line
op	80:22	0:0	6	[
water	80:23	0:0	6	j
op	80:25	0:0	6	*
water	80:27	0:0	6	3
op	80:28	0:0	6	]
op	80:30	0:0	6	=
water	80:32	0:0	6	255
op	80:36	0:0	6	-
water	80:38	0:0	6	i
water	80:39	0:0	6	;
water	81:13	0:0	6	scan_line
op	81:22	0:0	6	[
water	81:23	0:0	6	(
water	81:24	0:0	6	j
op	81:26	0:0	6	*
water	81:28	0:0	6	3
water	81:29	0:0	6	)
op	81:31	0:0	6	+
water	81:33	0:0	6	1
op	81:34	0:0	6	]
op	81:36	0:0	6	=
water	81:38	0:0	6	255
water	81:41	0:0	6	;
water	82:13	0:0	6	scan_line
op	82:22	0:0	6	[
water	82:23	0:0	6	(
water	82:24	0:0	6	j
op	82:26	0:0	6	*
water	82:28	0:0	6	3
water	82:29	0:0	6	)
op	82:31	0:0	6	+
water	82:33	0:0	6	2
op	82:34	0:0	6	]
op	82:36	0:0	6	=
water	82:38	0:0	6	255
water	82:41	0:0	6	;
water	83:8	0:0	6	}
for	84:8	88:8	4	(j = 375 ;j < 450;j ++)
forinit	84:13	84:20	5	j = 375 ;
water	84:13	0:0	6	j
op	84:15	0:0	6	=
water	84:17	0:0	6	375
water	84:20	0:0	6	;
cond	84:22	84:26	5	j < 450
water	84:22	0:0	6	j
op	84:24	0:0	6	<
water	84:26	0:0	6	450
forexpr	84:31	84:32	5	j ++
water	84:31	0:0	6	j
op	84:32	0:0	6	++
stmts	84:36	88:8	5	
water	84:36	0:0	6	{
water	85:13	0:0	6	scan_line
op	85:22	0:0	6	[
water	85:23	0:0	6	j
op	85:25	0:0	6	*
water	85:27	0:0	6	3
op	85:28	0:0	6	]
op	85:30	0:0	6	=
water	85:32	0:0	6	255
water	85:35	0:0	6	;
water	86:13	0:0	6	scan_line
op	86:22	0:0	6	[
water	86:23	0:0	6	(
water	86:24	0:0	6	j
op	86:26	0:0	6	*
water	86:28	0:0	6	3
water	86:29	0:0	6	)
op	86:31	0:0	6	+
water	86:33	0:0	6	1
op	86:34	0:0	6	]
op	86:36	0:0	6	=
water	86:38	0:0	6	255
op	86:42	0:0	6	-
water	86:44	0:0	6	i
water	86:45	0:0	6	;
water	87:13	0:0	6	scan_line
op	87:22	0:0	6	[
water	87:23	0:0	6	(
water	87:24	0:0	6	j
op	87:26	0:0	6	*
water	87:28	0:0	6	3
water	87:29	0:0	6	)
op	87:31	0:0	6	+
water	87:33	0:0	6	2
op	87:34	0:0	6	]
op	87:36	0:0	6	=
water	87:38	0:0	6	255
water	87:41	0:0	6	;
water	88:8	0:0	6	}
for	89:8	93:8	4	(j = 450 ;j < 525;j ++)
forinit	89:13	89:20	5	j = 450 ;
water	89:13	0:0	6	j
op	89:15	0:0	6	=
water	89:17	0:0	6	450
water	89:20	0:0	6	;
cond	89:22	89:26	5	j < 525
water	89:22	0:0	6	j
op	89:24	0:0	6	<
water	89:26	0:0	6	525
forexpr	89:31	89:32	5	j ++
water	89:31	0:0	6	j
op	89:32	0:0	6	++
stmts	89:36	93:8	5	
water	89:36	0:0	6	{
water	90:13	0:0	6	scan_line
op	90:22	0:0	6	[
water	90:23	0:0	6	j
op	90:25	0:0	6	*
water	90:27	0:0	6	3
op	90:28	0:0	6	]
op	90:30	0:0	6	=
water	90:32	0:0	6	255
water	90:35	0:0	6	;
water	91:13	0:0	6	scan_line
op	91:22	0:0	6	[
water	91:23	0:0	6	(
water	91:24	0:0	6	j
op	91:26	0:0	6	*
water	91:28	0:0	6	3
water	91:29	0:0	6	)
op	91:31	0:0	6	+
water	91:33	0:0	6	1
op	91:34	0:0	6	]
op	91:36	0:0	6	=
water	91:38	0:0	6	255
water	91:41	0:0	6	;
water	92:13	0:0	6	scan_line
op	92:22	0:0	6	[
water	92:23	0:0	6	(
water	92:24	0:0	6	j
op	92:26	0:0	6	*
water	92:28	0:0	6	3
water	92:29	0:0	6	)
op	92:31	0:0	6	+
water	92:33	0:0	6	2
op	92:34	0:0	6	]
op	92:36	0:0	6	=
water	92:38	0:0	6	255
op	92:42	0:0	6	-
water	92:44	0:0	6	i
water	92:45	0:0	6	;
water	93:8	0:0	6	}
call	94:8	94:46	4	TIFFWriteScanline
arg	94:26	94:29	5	tif
water	94:26	0:0	6	tif
arg	94:31	94:40	5	scan_line
water	94:31	0:0	6	scan_line
arg	94:42	94:43	5	i
water	94:42	0:0	6	i
arg	94:45	94:46	5	0
water	94:45	0:0	6	0
water	94:47	0:0	4	;
water	95:4	0:0	4	}
for	96:4	133:4	2	(i = 255 ;i < 512;i ++)
forinit	96:9	96:16	3	i = 255 ;
water	96:9	0:0	4	i
op	96:11	0:0	4	=
water	96:13	0:0	4	255
water	96:16	0:0	4	;
cond	96:18	96:22	3	i < 512
water	96:18	0:0	4	i
op	96:20	0:0	4	<
water	96:22	0:0	4	512
forexpr	96:27	96:28	3	i ++
water	96:27	0:0	4	i
op	96:28	0:0	4	++
stmts	96:32	133:4	3	
water	96:32	0:0	4	{
for	97:8	101:8	4	(j = 0 ;j < 75;j ++)
forinit	97:13	97:18	5	j = 0 ;
water	97:13	0:0	6	j
op	97:15	0:0	6	=
water	97:17	0:0	6	0
water	97:18	0:0	6	;
cond	97:20	97:24	5	j < 75
water	97:20	0:0	6	j
op	97:22	0:0	6	<
water	97:24	0:0	6	75
forexpr	97:28	97:29	5	j ++
water	97:28	0:0	6	j
op	97:29	0:0	6	++
stmts	97:33	101:8	5	
water	97:33	0:0	6	{
water	98:13	0:0	6	scan_line
op	98:22	0:0	6	[
water	98:23	0:0	6	j
op	98:25	0:0	6	*
water	98:27	0:0	6	3
op	98:28	0:0	6	]
op	98:30	0:0	6	=
water	98:32	0:0	6	i
water	98:33	0:0	6	;
water	99:13	0:0	6	scan_line
op	99:22	0:0	6	[
water	99:23	0:0	6	(
water	99:24	0:0	6	j
op	99:26	0:0	6	*
water	99:28	0:0	6	3
water	99:29	0:0	6	)
op	99:31	0:0	6	+
water	99:33	0:0	6	1
op	99:34	0:0	6	]
op	99:36	0:0	6	=
water	99:38	0:0	6	0
water	99:39	0:0	6	;
water	100:13	0:0	6	scan_line
op	100:22	0:0	6	[
water	100:23	0:0	6	(
water	100:24	0:0	6	j
op	100:26	0:0	6	*
water	100:28	0:0	6	3
water	100:29	0:0	6	)
op	100:31	0:0	6	+
water	100:33	0:0	6	2
op	100:34	0:0	6	]
op	100:36	0:0	6	=
water	100:38	0:0	6	0
water	100:39	0:0	6	;
water	101:8	0:0	6	}
for	102:8	106:8	4	(j = 75 ;j < 150;j ++)
forinit	102:13	102:19	5	j = 75 ;
water	102:13	0:0	6	j
op	102:15	0:0	6	=
water	102:17	0:0	6	75
water	102:19	0:0	6	;
cond	102:21	102:25	5	j < 150
water	102:21	0:0	6	j
op	102:23	0:0	6	<
water	102:25	0:0	6	150
forexpr	102:30	102:31	5	j ++
water	102:30	0:0	6	j
op	102:31	0:0	6	++
stmts	102:35	106:8	5	
water	102:35	0:0	6	{
water	103:13	0:0	6	scan_line
op	103:22	0:0	6	[
water	103:23	0:0	6	j
op	103:25	0:0	6	*
water	103:27	0:0	6	3
op	103:28	0:0	6	]
op	103:30	0:0	6	=
water	103:32	0:0	6	0
water	103:33	0:0	6	;
water	104:13	0:0	6	scan_line
op	104:22	0:0	6	[
water	104:23	0:0	6	(
water	104:24	0:0	6	j
op	104:26	0:0	6	*
water	104:28	0:0	6	3
water	104:29	0:0	6	)
op	104:31	0:0	6	+
water	104:33	0:0	6	1
op	104:34	0:0	6	]
op	104:36	0:0	6	=
water	104:38	0:0	6	i
water	104:39	0:0	6	;
water	105:13	0:0	6	scan_line
op	105:22	0:0	6	[
water	105:23	0:0	6	(
water	105:24	0:0	6	j
op	105:26	0:0	6	*
water	105:28	0:0	6	3
water	105:29	0:0	6	)
op	105:31	0:0	6	+
water	105:33	0:0	6	2
op	105:34	0:0	6	]
op	105:36	0:0	6	=
water	105:38	0:0	6	0
water	105:39	0:0	6	;
water	106:8	0:0	6	}
for	107:8	111:8	4	(j = 150 ;j < 225;j ++)
forinit	107:13	107:20	5	j = 150 ;
water	107:13	0:0	6	j
op	107:15	0:0	6	=
water	107:17	0:0	6	150
water	107:20	0:0	6	;
cond	107:22	107:26	5	j < 225
water	107:22	0:0	6	j
op	107:24	0:0	6	<
water	107:26	0:0	6	225
forexpr	107:31	107:32	5	j ++
water	107:31	0:0	6	j
op	107:32	0:0	6	++
stmts	107:36	111:8	5	
water	107:36	0:0	6	{
water	108:13	0:0	6	scan_line
op	108:22	0:0	6	[
water	108:23	0:0	6	j
op	108:25	0:0	6	*
water	108:27	0:0	6	3
op	108:28	0:0	6	]
op	108:30	0:0	6	=
water	108:32	0:0	6	0
water	108:33	0:0	6	;
water	109:13	0:0	6	scan_line
op	109:22	0:0	6	[
water	109:23	0:0	6	(
water	109:24	0:0	6	j
op	109:26	0:0	6	*
water	109:28	0:0	6	3
water	109:29	0:0	6	)
op	109:31	0:0	6	+
water	109:33	0:0	6	1
op	109:34	0:0	6	]
op	109:36	0:0	6	=
water	109:38	0:0	6	0
water	109:39	0:0	6	;
water	110:13	0:0	6	scan_line
op	110:22	0:0	6	[
water	110:23	0:0	6	(
water	110:24	0:0	6	j
op	110:26	0:0	6	*
water	110:28	0:0	6	3
water	110:29	0:0	6	)
op	110:31	0:0	6	+
water	110:33	0:0	6	2
op	110:34	0:0	6	]
op	110:36	0:0	6	=
water	110:38	0:0	6	i
water	110:39	0:0	6	;
water	111:8	0:0	6	}
for	112:8	116:8	4	(j = 225 ;j < 300;j ++)
forinit	112:13	112:20	5	j = 225 ;
water	112:13	0:0	6	j
op	112:15	0:0	6	=
water	112:17	0:0	6	225
water	112:20	0:0	6	;
cond	112:22	112:26	5	j < 300
water	112:22	0:0	6	j
op	112:24	0:0	6	<
water	112:26	0:0	6	300
forexpr	112:31	112:32	5	j ++
water	112:31	0:0	6	j
op	112:32	0:0	6	++
stmts	112:36	116:8	5	
water	112:36	0:0	6	{
water	113:13	0:0	6	scan_line
op	113:22	0:0	6	[
water	113:23	0:0	6	j
op	113:25	0:0	6	*
water	113:27	0:0	6	3
op	113:28	0:0	6	]
op	113:30	0:0	6	=
water	113:32	0:0	6	(
water	113:33	0:0	6	i
op	113:35	0:0	6	-
water	113:37	0:0	6	1
water	113:38	0:0	6	)
op	113:40	0:0	6	/
water	113:42	0:0	6	2
water	113:43	0:0	6	;
water	114:13	0:0	6	scan_line
op	114:22	0:0	6	[
water	114:23	0:0	6	(
water	114:24	0:0	6	j
op	114:26	0:0	6	*
water	114:28	0:0	6	3
water	114:29	0:0	6	)
op	114:31	0:0	6	+
water	114:33	0:0	6	1
op	114:34	0:0	6	]
op	114:36	0:0	6	=
water	114:38	0:0	6	(
water	114:39	0:0	6	i
op	114:41	0:0	6	-
water	114:43	0:0	6	1
water	114:44	0:0	6	)
op	114:46	0:0	6	/
water	114:48	0:0	6	2
water	114:49	0:0	6	;
water	115:13	0:0	6	scan_line
op	115:22	0:0	6	[
water	115:23	0:0	6	(
water	115:24	0:0	6	j
op	115:26	0:0	6	*
water	115:28	0:0	6	3
water	115:29	0:0	6	)
op	115:31	0:0	6	+
water	115:33	0:0	6	2
op	115:34	0:0	6	]
op	115:36	0:0	6	=
water	115:38	0:0	6	(
water	115:39	0:0	6	i
op	115:41	0:0	6	-
water	115:43	0:0	6	1
water	115:44	0:0	6	)
op	115:46	0:0	6	/
water	115:48	0:0	6	2
water	115:49	0:0	6	;
water	116:8	0:0	6	}
for	117:8	121:8	4	(j = 300 ;j < 375;j ++)
forinit	117:13	117:20	5	j = 300 ;
water	117:13	0:0	6	j
op	117:15	0:0	6	=
water	117:17	0:0	6	300
water	117:20	0:0	6	;
cond	117:22	117:26	5	j < 375
water	117:22	0:0	6	j
op	117:24	0:0	6	<
water	117:26	0:0	6	375
forexpr	117:31	117:32	5	j ++
water	117:31	0:0	6	j
op	117:32	0:0	6	++
stmts	117:36	121:8	5	
water	117:36	0:0	6	{
water	118:13	0:0	6	scan_line
op	118:22	0:0	6	[
water	118:23	0:0	6	j
op	118:25	0:0	6	*
water	118:27	0:0	6	3
op	118:28	0:0	6	]
op	118:30	0:0	6	=
water	118:32	0:0	6	0
water	118:33	0:0	6	;
water	119:13	0:0	6	scan_line
op	119:22	0:0	6	[
water	119:23	0:0	6	(
water	119:24	0:0	6	j
op	119:26	0:0	6	*
water	119:28	0:0	6	3
water	119:29	0:0	6	)
op	119:31	0:0	6	+
water	119:33	0:0	6	1
op	119:34	0:0	6	]
op	119:36	0:0	6	=
water	119:38	0:0	6	i
water	119:39	0:0	6	;
water	120:13	0:0	6	scan_line
op	120:22	0:0	6	[
water	120:23	0:0	6	(
water	120:24	0:0	6	j
op	120:26	0:0	6	*
water	120:28	0:0	6	3
water	120:29	0:0	6	)
op	120:31	0:0	6	+
water	120:33	0:0	6	2
op	120:34	0:0	6	]
op	120:36	0:0	6	=
water	120:38	0:0	6	i
water	120:39	0:0	6	;
water	121:8	0:0	6	}
for	122:8	126:8	4	(j = 375 ;j < 450;j ++)
forinit	122:13	122:20	5	j = 375 ;
water	122:13	0:0	6	j
op	122:15	0:0	6	=
water	122:17	0:0	6	375
water	122:20	0:0	6	;
cond	122:22	122:26	5	j < 450
water	122:22	0:0	6	j
op	122:24	0:0	6	<
water	122:26	0:0	6	450
forexpr	122:31	122:32	5	j ++
water	122:31	0:0	6	j
op	122:32	0:0	6	++
stmts	122:36	126:8	5	
water	122:36	0:0	6	{
water	123:13	0:0	6	scan_line
op	123:22	0:0	6	[
water	123:23	0:0	6	j
op	123:25	0:0	6	*
water	123:27	0:0	6	3
op	123:28	0:0	6	]
op	123:30	0:0	6	=
water	123:32	0:0	6	i
water	123:33	0:0	6	;
water	124:13	0:0	6	scan_line
op	124:22	0:0	6	[
water	124:23	0:0	6	(
water	124:24	0:0	6	j
op	124:26	0:0	6	*
water	124:28	0:0	6	3
water	124:29	0:0	6	)
op	124:31	0:0	6	+
water	124:33	0:0	6	1
op	124:34	0:0	6	]
op	124:36	0:0	6	=
water	124:38	0:0	6	0
water	124:39	0:0	6	;
water	125:13	0:0	6	scan_line
op	125:22	0:0	6	[
water	125:23	0:0	6	(
water	125:24	0:0	6	j
op	125:26	0:0	6	*
water	125:28	0:0	6	3
water	125:29	0:0	6	)
op	125:31	0:0	6	+
water	125:33	0:0	6	2
op	125:34	0:0	6	]
op	125:36	0:0	6	=
water	125:38	0:0	6	i
water	125:39	0:0	6	;
water	126:8	0:0	6	}
for	127:8	131:8	4	(j = 450 ;j < 525;j ++)
forinit	127:13	127:20	5	j = 450 ;
water	127:13	0:0	6	j
op	127:15	0:0	6	=
water	127:17	0:0	6	450
water	127:20	0:0	6	;
cond	127:22	127:26	5	j < 525
water	127:22	0:0	6	j
op	127:24	0:0	6	<
water	127:26	0:0	6	525
forexpr	127:31	127:32	5	j ++
water	127:31	0:0	6	j
op	127:32	0:0	6	++
stmts	127:36	131:8	5	
water	127:36	0:0	6	{
water	128:13	0:0	6	scan_line
op	128:22	0:0	6	[
water	128:23	0:0	6	j
op	128:25	0:0	6	*
water	128:27	0:0	6	3
op	128:28	0:0	6	]
op	128:30	0:0	6	=
water	128:32	0:0	6	i
water	128:33	0:0	6	;
water	129:13	0:0	6	scan_line
op	129:22	0:0	6	[
water	129:23	0:0	6	(
water	129:24	0:0	6	j
op	129:26	0:0	6	*
water	129:28	0:0	6	3
water	129:29	0:0	6	)
op	129:31	0:0	6	+
water	129:33	0:0	6	1
op	129:34	0:0	6	]
op	129:36	0:0	6	=
water	129:38	0:0	6	i
water	129:39	0:0	6	;
water	130:13	0:0	6	scan_line
op	130:22	0:0	6	[
water	130:23	0:0	6	(
water	130:24	0:0	6	j
op	130:26	0:0	6	*
water	130:28	0:0	6	3
water	130:29	0:0	6	)
op	130:31	0:0	6	+
water	130:33	0:0	6	2
op	130:34	0:0	6	]
op	130:36	0:0	6	=
water	130:38	0:0	6	0
water	130:39	0:0	6	;
water	131:8	0:0	6	}
call	132:8	132:46	4	TIFFWriteScanline
arg	132:26	132:29	5	tif
water	132:26	0:0	6	tif
arg	132:31	132:40	5	scan_line
water	132:31	0:0	6	scan_line
arg	132:42	132:43	5	i
water	132:42	0:0	6	i
arg	132:45	132:46	5	0
water	132:45	0:0	6	0
water	132:47	0:0	4	;
water	133:4	0:0	4	}
call	134:4	134:18	2	free
arg	134:9	134:18	3	scan_line
water	134:9	0:0	4	scan_line
water	134:19	0:0	2	;
call	135:4	135:17	2	TIFFClose
arg	135:14	135:17	3	tif
water	135:14	0:0	4	tif
water	135:18	0:0	2	;
call	136:4	136:10	2	exit
arg	136:9	136:10	3	0
water	136:9	0:0	4	0
water	136:11	0:0	2	;
