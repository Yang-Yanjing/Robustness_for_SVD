func	1:0	161:0	0	int	main
params	2:4	0:0	1	
param	2:5	2:13	2	int	argc
param	2:15	2:27	2	char *	argv[]
stmnts	0:0	160:11	1	
decl	4:1	4:31	2	uint16	defconfig
op	4:18	0:0	2	=
water	4:20	0:0	2	(
water	4:21	0:0	2	uint16
water	4:27	0:0	2	)
op	4:29	0:0	2	-
water	4:30	0:0	2	1
decl	5:1	5:24	2	uint16	deffillorder
op	5:21	0:0	2	=
water	5:23	0:0	2	0
decl	6:1	6:34	2	uint32	deftilewidth
op	6:21	0:0	2	=
water	6:23	0:0	2	(
water	6:24	0:0	2	uint32
water	6:30	0:0	2	)
op	6:32	0:0	2	-
water	6:33	0:0	2	1
decl	7:1	7:35	2	uint32	deftilelength
op	7:22	0:0	2	=
water	7:24	0:0	2	(
water	7:25	0:0	2	uint32
water	7:31	0:0	2	)
op	7:33	0:0	2	-
water	7:34	0:0	2	1
decl	8:1	8:36	2	uint32	defrowsperstrip
op	8:24	0:0	2	=
water	8:26	0:0	2	(
water	8:27	0:0	2	uint32
water	8:33	0:0	2	)
water	8:35	0:0	2	0
decl	9:1	9:18	2	uint64	diroff
op	9:15	0:0	2	=
water	9:17	0:0	2	0
decl	10:1	10:9	2	TIFF	*in
decl	11:1	11:10	2	TIFF	*out
decl	12:1	12:14	2	char	mode[10]
decl	13:1	13:16	2	char	*mp
op	13:10	0:0	2	=
water	13:12	0:0	2	mode
decl	14:1	14:6	2	int	c
water	16:1	0:0	2	extern
water	16:8	0:0	2	int
water	16:12	0:0	2	optind
water	16:18	0:0	2	;
water	17:1	0:0	2	extern
water	17:8	0:0	2	char
op	17:12	0:0	2	*
water	17:14	0:0	2	optarg
water	17:20	0:0	2	;
op	19:1	0:0	2	*
water	19:2	0:0	2	mp
op	19:4	0:0	2	++
op	19:7	0:0	2	=
water	19:9	0:0	2	'w'
water	19:12	0:0	2	;
op	20:1	0:0	2	*
water	20:2	0:0	2	mp
op	20:5	0:0	2	=
water	20:7	0:0	2	'\0'
water	20:11	0:0	2	;
while	21:1	115:2	2	(( c =getopt (argc ,argv ,",:b:c:f:l:o:p:r:w:aistBLMC8x" ) ) != - 1)
cond	21:8	21:69	3	( c =getopt (argc ,argv ,",:b:c:f:l:o:p:r:w:aistBLMC8x" ) ) != - 1
water	21:8	0:0	4	(
water	21:9	0:0	4	c
op	21:11	0:0	4	=
call	21:13	21:62	4	getopt
arg	21:20	21:24	5	argc
water	21:20	0:0	6	argc
arg	21:26	21:30	5	argv
water	21:26	0:0	6	argv
arg	21:32	21:62	5	",:b:c:f:l:o:p:r:w:aistBLMC8x"
water	21:32	0:0	6	",:b:c:f:l:o:p:r:w:aistBLMC8x"
water	21:63	0:0	4	)
op	21:65	0:0	4	!=
op	21:68	0:0	4	-
water	21:69	0:0	4	1
stmts	22:2	115:2	3	
switch	22:2	115:2	4	(c)
cond	22:10	22:10	5	c
water	22:10	0:0	6	c
stmts	22:13	115:2	5	
water	22:13	0:0	6	{
water	23:2	0:0	6	case
water	23:7	0:0	6	','
water	23:10	0:0	6	:
water	24:3	0:0	6	if
water	24:6	0:0	6	(
water	24:7	0:0	6	optarg
op	24:13	0:0	6	[
water	24:14	0:0	6	0
op	24:15	0:0	6	]
op	24:17	0:0	6	!=
water	24:20	0:0	6	'='
water	24:23	0:0	6	)
call	24:25	24:31	6	usage
water	24:32	0:0	6	;
water	25:3	0:0	6	comma
op	25:9	0:0	6	=
water	25:11	0:0	6	optarg
op	25:17	0:0	6	[
water	25:18	0:0	6	1
op	25:19	0:0	6	]
water	25:20	0:0	6	;
break	26:3	26:8	6	
water	27:2	0:0	6	case
water	27:7	0:0	6	'b'
water	27:10	0:0	6	:
water	28:3	0:0	6	if
water	28:6	0:0	6	(
water	28:7	0:0	6	bias
water	28:11	0:0	6	)
water	28:13	0:0	6	{
call	29:4	29:57	6	fputs
arg	29:11	29:49	7	"Only 1 bias image may be specified\n"
water	29:11	0:0	8	"Only 1 bias image may be specified\n"
arg	29:51	29:57	7	stderr
water	29:51	0:0	8	stderr
water	29:58	0:0	6	;
call	30:4	30:12	6	exit
arg	30:10	30:12	7	-2
op	30:10	0:0	8	-
water	30:11	0:0	8	2
water	30:13	0:0	6	;
water	31:3	0:0	6	}
water	32:3	0:0	6	{
water	33:4	0:0	6	uint16
water	33:11	0:0	6	samples
op	33:19	0:0	6	=
water	33:21	0:0	6	(
water	33:22	0:0	6	uint16
water	33:28	0:0	6	)
op	33:30	0:0	6	-
water	33:31	0:0	6	1
water	33:32	0:0	6	;
water	34:4	0:0	6	char
op	34:9	0:0	6	*
op	34:10	0:0	6	*
water	34:11	0:0	6	biasFn
op	34:18	0:0	6	=
op	34:20	0:0	6	&
water	34:21	0:0	6	optarg
water	34:27	0:0	6	;
water	35:4	0:0	6	bias
op	35:9	0:0	6	=
call	35:11	35:31	6	openSrcImage
arg	35:25	35:31	7	biasFn
water	35:25	0:0	8	biasFn
water	35:32	0:0	6	;
water	36:4	0:0	6	if
water	36:7	0:0	6	(
op	36:8	0:0	6	!
water	36:9	0:0	6	bias
water	36:13	0:0	6	)
call	36:15	36:23	6	exit
arg	36:21	36:23	7	-5
op	36:21	0:0	8	-
water	36:22	0:0	8	5
water	36:24	0:0	6	;
water	37:4	0:0	6	if
water	37:7	0:0	6	(
call	37:8	37:25	6	TIFFIsTiled
arg	37:21	37:25	7	bias
water	37:21	0:0	8	bias
water	37:26	0:0	6	)
water	37:28	0:0	6	{
call	38:5	38:62	6	fputs
arg	38:12	38:54	7	"Bias image must be organized in strips\n"
water	38:12	0:0	8	"Bias image must be organized in strips\n"
arg	38:56	38:62	7	stderr
water	38:56	0:0	8	stderr
water	38:63	0:0	6	;
call	39:5	39:13	6	exit
arg	39:11	39:13	7	-7
op	39:11	0:0	8	-
water	39:12	0:0	8	7
water	39:14	0:0	6	;
water	40:4	0:0	6	}
call	41:4	41:56	6	TIFFGetField
arg	41:17	41:21	7	bias
water	41:17	0:0	8	bias
arg	41:23	41:46	7	TIFFTAG_SAMPLESPERPIXEL
water	41:23	0:0	8	TIFFTAG_SAMPLESPERPIXEL
arg	41:48	41:56	7	&samples
op	41:48	0:0	8	&
water	41:49	0:0	8	samples
water	41:57	0:0	6	;
water	42:4	0:0	6	if
water	42:7	0:0	6	(
water	42:8	0:0	6	samples
op	42:16	0:0	6	!=
water	42:19	0:0	6	1
water	42:20	0:0	6	)
water	42:22	0:0	6	{
call	43:5	43:53	6	fputs
arg	43:12	43:45	7	"Bias image must be monochrome\n"
water	43:12	0:0	8	"Bias image must be monochrome\n"
arg	43:47	43:53	7	stderr
water	43:47	0:0	8	stderr
water	43:54	0:0	6	;
call	44:5	44:13	6	exit
arg	44:11	44:13	7	-7
op	44:11	0:0	8	-
water	44:12	0:0	8	7
water	44:14	0:0	6	;
water	45:4	0:0	6	}
water	46:3	0:0	6	}
water	47:3	0:0	6	break
water	47:8	0:0	6	;
water	48:2	0:0	6	case
water	48:7	0:0	6	'a'
water	48:10	0:0	6	:
water	49:3	0:0	6	mode
op	49:7	0:0	6	[
water	49:8	0:0	6	0
op	49:9	0:0	6	]
op	49:11	0:0	6	=
water	49:13	0:0	6	'a'
water	49:16	0:0	6	;
break	50:3	50:8	6	
water	51:2	0:0	6	case
water	51:7	0:0	6	'c'
water	51:10	0:0	6	:
water	52:3	0:0	6	if
water	52:6	0:0	6	(
op	52:7	0:0	6	!
call	52:8	52:37	6	processCompressOptions
arg	52:31	52:37	7	optarg
water	52:31	0:0	8	optarg
water	52:38	0:0	6	)
call	53:4	53:10	6	usage
water	53:11	0:0	6	;
break	54:3	54:8	6	
water	55:2	0:0	6	case
water	55:7	0:0	6	'f'
water	55:10	0:0	6	:
water	56:3	0:0	6	if
water	56:6	0:0	6	(
call	56:7	56:30	6	streq
arg	56:13	56:19	7	optarg
water	56:13	0:0	8	optarg
arg	56:21	56:30	7	"lsb2msb"
water	56:21	0:0	8	"lsb2msb"
water	56:31	0:0	6	)
water	57:4	0:0	6	deffillorder
op	57:17	0:0	6	=
water	57:19	0:0	6	FILLORDER_LSB2MSB
water	57:36	0:0	6	;
else	58:3	59:36	6
stmts	58:8	59:36	7	
if	58:8	59:36	8	(streq (optarg ,"msb2lsb" ))
cond	58:12	58:35	9	streq (optarg ,"msb2lsb" )
call	58:12	58:35	10	streq
arg	58:18	58:24	11	optarg
water	58:18	0:0	12	optarg
arg	58:26	58:35	11	"msb2lsb"
water	58:26	0:0	12	"msb2lsb"
stmts	59:4	59:36	9	
water	59:4	0:0	10	deffillorder
op	59:17	0:0	10	=
water	59:19	0:0	10	FILLORDER_MSB2LSB
water	59:36	0:0	10	;
else	60:3	61:11	6
stmts	61:4	61:11	7	
call	61:4	61:10	8	usage
water	61:11	0:0	8	;
break	62:3	62:8	6	
water	63:2	0:0	6	case
water	63:7	0:0	6	'i'
water	63:10	0:0	6	:
water	64:3	0:0	6	ignore
op	64:10	0:0	6	=
water	64:12	0:0	6	TRUE
water	64:16	0:0	6	;
break	65:3	65:8	6	
water	66:2	0:0	6	case
water	66:7	0:0	6	'l'
water	66:10	0:0	6	:
water	67:3	0:0	6	outtiled
op	67:12	0:0	6	=
water	67:14	0:0	6	TRUE
water	67:18	0:0	6	;
water	68:3	0:0	6	deftilelength
op	68:17	0:0	6	=
call	68:19	68:30	6	atoi
arg	68:24	68:30	7	optarg
water	68:24	0:0	8	optarg
water	68:31	0:0	6	;
break	69:3	69:8	6	
water	70:2	0:0	6	case
water	70:7	0:0	6	'o'
water	70:10	0:0	6	:
water	71:3	0:0	6	diroff
op	71:10	0:0	6	=
call	71:12	71:35	6	strtoul
arg	71:20	71:26	7	optarg
water	71:20	0:0	8	optarg
arg	71:28	71:32	7	NULL
water	71:28	0:0	8	NULL
arg	71:34	71:35	7	0
water	71:34	0:0	8	0
water	71:36	0:0	6	;
break	72:3	72:8	6	
water	73:2	0:0	6	case
water	73:7	0:0	6	'p'
water	73:10	0:0	6	:
water	74:3	0:0	6	if
water	74:6	0:0	6	(
call	74:7	74:31	6	streq
arg	74:13	74:19	7	optarg
water	74:13	0:0	8	optarg
arg	74:21	74:31	7	"separate"
water	74:21	0:0	8	"separate"
water	74:32	0:0	6	)
water	75:4	0:0	6	defconfig
op	75:14	0:0	6	=
water	75:16	0:0	6	PLANARCONFIG_SEPARATE
water	75:37	0:0	6	;
else	76:3	77:35	6
stmts	76:8	77:35	7	
if	76:8	77:35	8	(streq (optarg ,"contig" ))
cond	76:12	76:34	9	streq (optarg ,"contig" )
call	76:12	76:34	10	streq
arg	76:18	76:24	11	optarg
water	76:18	0:0	12	optarg
arg	76:26	76:34	11	"contig"
water	76:26	0:0	12	"contig"
stmts	77:4	77:35	9	
water	77:4	0:0	10	defconfig
op	77:14	0:0	10	=
water	77:16	0:0	10	PLANARCONFIG_CONTIG
water	77:35	0:0	10	;
else	78:3	79:11	6
stmts	79:4	79:11	7	
call	79:4	79:10	8	usage
water	79:11	0:0	8	;
break	80:3	80:8	6	
water	81:2	0:0	6	case
water	81:7	0:0	6	'r'
water	81:10	0:0	6	:
water	82:3	0:0	6	defrowsperstrip
op	82:19	0:0	6	=
call	82:21	82:32	6	atol
arg	82:26	82:32	7	optarg
water	82:26	0:0	8	optarg
water	82:33	0:0	6	;
break	83:3	83:8	6	
water	84:2	0:0	6	case
water	84:7	0:0	6	's'
water	84:10	0:0	6	:
water	85:3	0:0	6	outtiled
op	85:12	0:0	6	=
water	85:14	0:0	6	FALSE
water	85:19	0:0	6	;
break	86:3	86:8	6	
water	87:2	0:0	6	case
water	87:7	0:0	6	't'
water	87:10	0:0	6	:
water	88:3	0:0	6	outtiled
op	88:12	0:0	6	=
water	88:14	0:0	6	TRUE
water	88:18	0:0	6	;
break	89:3	89:8	6	
water	90:2	0:0	6	case
water	90:7	0:0	6	'w'
water	90:10	0:0	6	:
water	91:3	0:0	6	outtiled
op	91:12	0:0	6	=
water	91:14	0:0	6	TRUE
water	91:18	0:0	6	;
water	92:3	0:0	6	deftilewidth
op	92:16	0:0	6	=
call	92:18	92:29	6	atoi
arg	92:23	92:29	7	optarg
water	92:23	0:0	8	optarg
water	92:30	0:0	6	;
break	93:3	93:8	6	
water	94:2	0:0	6	case
water	94:7	0:0	6	'B'
water	94:10	0:0	6	:
op	95:3	0:0	6	*
water	95:4	0:0	6	mp
op	95:6	0:0	6	++
op	95:9	0:0	6	=
water	95:11	0:0	6	'b'
water	95:14	0:0	6	;
op	95:16	0:0	6	*
water	95:17	0:0	6	mp
op	95:20	0:0	6	=
water	95:22	0:0	6	'\0'
water	95:26	0:0	6	;
break	96:3	96:8	6	
water	97:2	0:0	6	case
water	97:7	0:0	6	'L'
water	97:10	0:0	6	:
op	98:3	0:0	6	*
water	98:4	0:0	6	mp
op	98:6	0:0	6	++
op	98:9	0:0	6	=
water	98:11	0:0	6	'l'
water	98:14	0:0	6	;
op	98:16	0:0	6	*
water	98:17	0:0	6	mp
op	98:20	0:0	6	=
water	98:22	0:0	6	'\0'
water	98:26	0:0	6	;
break	99:3	99:8	6	
water	100:2	0:0	6	case
water	100:7	0:0	6	'M'
water	100:10	0:0	6	:
op	101:3	0:0	6	*
water	101:4	0:0	6	mp
op	101:6	0:0	6	++
op	101:9	0:0	6	=
water	101:11	0:0	6	'm'
water	101:14	0:0	6	;
op	101:16	0:0	6	*
water	101:17	0:0	6	mp
op	101:20	0:0	6	=
water	101:22	0:0	6	'\0'
water	101:26	0:0	6	;
break	102:3	102:8	6	
water	103:2	0:0	6	case
water	103:7	0:0	6	'C'
water	103:10	0:0	6	:
op	104:3	0:0	6	*
water	104:4	0:0	6	mp
op	104:6	0:0	6	++
op	104:9	0:0	6	=
water	104:11	0:0	6	'c'
water	104:14	0:0	6	;
op	104:16	0:0	6	*
water	104:17	0:0	6	mp
op	104:20	0:0	6	=
water	104:22	0:0	6	'\0'
water	104:26	0:0	6	;
break	105:3	105:8	6	
water	106:2	0:0	6	case
water	106:7	0:0	6	'8'
water	106:10	0:0	6	:
op	107:3	0:0	6	*
water	107:4	0:0	6	mp
op	107:6	0:0	6	++
op	107:9	0:0	6	=
water	107:11	0:0	6	'8'
water	107:14	0:0	6	;
op	107:16	0:0	6	*
water	107:17	0:0	6	mp
op	107:20	0:0	6	=
water	107:22	0:0	6	'\0'
water	107:26	0:0	6	;
break	108:3	108:8	6	
water	109:2	0:0	6	case
water	109:7	0:0	6	'x'
water	109:10	0:0	6	:
water	110:3	0:0	6	pageInSeq
op	110:13	0:0	6	=
water	110:15	0:0	6	1
water	110:16	0:0	6	;
break	111:3	111:8	6	
water	112:2	0:0	6	case
water	112:7	0:0	6	'?'
water	112:10	0:0	6	:
call	113:3	113:9	6	usage
water	113:10	0:0	6	;
water	115:2	0:0	6	}
if	116:1	117:9	2	(argc - optind < 2)
cond	116:5	116:21	3	argc - optind < 2
water	116:5	0:0	4	argc
op	116:10	0:0	4	-
water	116:12	0:0	4	optind
op	116:19	0:0	4	<
water	116:21	0:0	4	2
stmts	117:2	117:9	3	
call	117:2	117:8	4	usage
water	117:9	0:0	4	;
water	118:1	0:0	2	out
op	118:5	0:0	2	=
call	118:7	118:34	2	TIFFOpen
arg	118:16	118:28	3	argv[argc-1]
water	118:16	0:0	4	argv
op	118:20	0:0	4	[
water	118:21	0:0	4	argc
op	118:25	0:0	4	-
water	118:26	0:0	4	1
op	118:27	0:0	4	]
arg	118:30	118:34	3	mode
water	118:30	0:0	4	mode
water	118:35	0:0	2	;
if	119:1	120:13	2	(out == NULL)
cond	119:5	119:12	3	out == NULL
water	119:5	0:0	4	out
op	119:9	0:0	4	==
water	119:12	0:0	4	NULL
stmts	120:2	120:13	3	
return	120:2	120:13	4	(-2)
water	120:9	0:0	5	(
op	120:10	0:0	5	-
water	120:11	0:0	5	2
water	120:12	0:0	5	)
if	121:1	122:14	2	(( argc - optind ) == 2)
cond	121:5	121:24	3	( argc - optind ) == 2
water	121:5	0:0	4	(
water	121:6	0:0	4	argc
op	121:11	0:0	4	-
water	121:13	0:0	4	optind
water	121:19	0:0	4	)
op	121:21	0:0	4	==
water	121:24	0:0	4	2
stmts	122:2	122:14	3	
water	122:2	0:0	4	pageNum
op	122:10	0:0	4	=
op	122:12	0:0	4	-
water	122:13	0:0	4	1
water	122:14	0:0	4	;
for	123:1	158:1	2	(;optind < argc - 1;optind ++)
forinit	123:6	123:6	3	;
water	123:6	0:0	4	;
cond	123:8	123:22	3	optind < argc - 1
water	123:8	0:0	4	optind
op	123:15	0:0	4	<
water	123:17	0:0	4	argc
op	123:21	0:0	4	-
water	123:22	0:0	4	1
forexpr	123:26	123:32	3	optind ++
water	123:26	0:0	4	optind
op	123:32	0:0	4	++
stmts	123:36	158:1	3	
water	123:36	0:0	4	{
decl	124:2	124:34	4	char	*imageCursor
op	124:20	0:0	4	=
water	124:22	0:0	4	argv
op	124:26	0:0	4	[
water	124:27	0:0	4	optind
op	124:33	0:0	4	]
water	125:2	0:0	4	in
op	125:5	0:0	4	=
call	125:7	125:33	4	openSrcImage
arg	125:21	125:33	5	&imageCursor
op	125:21	0:0	6	&
water	125:22	0:0	6	imageCursor
water	125:34	0:0	4	;
if	126:2	129:2	4	(in == NULL)
cond	126:6	126:12	5	in == NULL
water	126:6	0:0	6	in
op	126:9	0:0	6	==
water	126:12	0:0	6	NULL
stmts	126:18	129:2	5	
water	126:18	0:0	6	{
water	127:3	0:0	6	(
water	127:4	0:0	6	void
water	127:8	0:0	6	)
call	127:10	127:23	6	TIFFClose
arg	127:20	127:23	7	out
water	127:20	0:0	8	out
water	127:24	0:0	6	;
return	128:3	128:14	6	(-3)
water	128:10	0:0	7	(
op	128:11	0:0	7	-
water	128:12	0:0	7	3
water	128:13	0:0	7	)
water	129:2	0:0	6	}
if	130:2	136:2	4	(diroff != 0 && !TIFFSetSubDirectory (in ,diroff ))
cond	130:6	130:52	5	diroff != 0 && !TIFFSetSubDirectory (in ,diroff )
water	130:6	0:0	6	diroff
op	130:13	0:0	6	!=
water	130:16	0:0	6	0
op	130:18	0:0	6	&&
op	130:21	0:0	6	!
call	130:22	130:52	6	TIFFSetSubDirectory
arg	130:42	130:44	7	in
water	130:42	0:0	8	in
arg	130:46	130:52	7	diroff
water	130:46	0:0	8	diroff
stmts	130:55	136:2	5	
water	130:55	0:0	6	{
call	131:3	132:67	6	TIFFError
arg	131:13	131:29	7	TIFFFileName(in)
call	131:13	131:28	8	TIFFFileName
arg	131:26	131:28	9	in
water	131:26	0:0	10	in
arg	132:7	132:59	7	"Error, setting subdirectory at "TIFF_UINT64_FORMAT
water	132:7	0:0	8	"Error, setting subdirectory at "
water	132:41	0:0	8	TIFF_UINT64_FORMAT
arg	132:61	132:67	7	diroff
water	132:61	0:0	8	diroff
water	132:68	0:0	6	;
water	133:3	0:0	6	(
water	133:4	0:0	6	void
water	133:8	0:0	6	)
call	133:10	133:22	6	TIFFClose
arg	133:20	133:22	7	in
water	133:20	0:0	8	in
water	133:23	0:0	6	;
water	134:3	0:0	6	(
water	134:4	0:0	6	void
water	134:8	0:0	6	)
call	134:10	134:23	6	TIFFClose
arg	134:20	134:23	7	out
water	134:20	0:0	8	out
water	134:24	0:0	6	;
return	135:3	135:13	6	(1)
water	135:10	0:0	7	(
water	135:11	0:0	7	1
water	135:12	0:0	7	)
water	136:2	0:0	6	}
for	137:2	156:2	4	(;;)
forinit	137:7	137:7	5	;
water	137:7	0:0	6	;
cond	0:0	0:0	5	
forexpr	0:0	0:0	5	
stmts	137:11	156:2	5	
water	137:11	0:0	6	{
water	138:3	0:0	6	config
op	138:10	0:0	6	=
water	138:12	0:0	6	defconfig
water	138:21	0:0	6	;
water	139:3	0:0	6	compression
op	139:15	0:0	6	=
water	139:17	0:0	6	defcompression
water	139:31	0:0	6	;
water	140:3	0:0	6	predictor
op	140:13	0:0	6	=
water	140:15	0:0	6	defpredictor
water	140:27	0:0	6	;
water	141:24	0:0	6	preset
op	141:31	0:0	6	=
water	141:33	0:0	6	defpreset
water	141:42	0:0	6	;
water	142:3	0:0	6	fillorder
op	142:13	0:0	6	=
water	142:15	0:0	6	deffillorder
water	142:27	0:0	6	;
water	143:3	0:0	6	rowsperstrip
op	143:16	0:0	6	=
water	143:18	0:0	6	defrowsperstrip
water	143:33	0:0	6	;
water	144:3	0:0	6	tilewidth
op	144:13	0:0	6	=
water	144:15	0:0	6	deftilewidth
water	144:27	0:0	6	;
water	145:3	0:0	6	tilelength
op	145:14	0:0	6	=
water	145:16	0:0	6	deftilelength
water	145:29	0:0	6	;
water	146:3	0:0	6	g3opts
op	146:10	0:0	6	=
water	146:12	0:0	6	defg3opts
water	146:21	0:0	6	;
if	147:3	151:3	6	(!tiffcp (in ,out ) || !TIFFWriteDirectory (out ))
cond	147:7	147:50	7	!tiffcp (in ,out ) || !TIFFWriteDirectory (out )
op	147:7	0:0	8	!
call	147:8	147:22	8	tiffcp
arg	147:15	147:17	9	in
water	147:15	0:0	10	in
arg	147:19	147:22	9	out
water	147:19	0:0	10	out
op	147:24	0:0	8	||
op	147:27	0:0	8	!
call	147:28	147:50	8	TIFFWriteDirectory
arg	147:47	147:50	9	out
water	147:47	0:0	10	out
stmts	147:53	151:3	7	
water	147:53	0:0	8	{
water	148:4	0:0	8	(
water	148:5	0:0	8	void
water	148:9	0:0	8	)
call	148:11	148:23	8	TIFFClose
arg	148:21	148:23	9	in
water	148:21	0:0	10	in
water	148:24	0:0	8	;
water	149:4	0:0	8	(
water	149:5	0:0	8	void
water	149:9	0:0	8	)
call	149:11	149:24	8	TIFFClose
arg	149:21	149:24	9	out
water	149:21	0:0	10	out
water	149:25	0:0	8	;
return	150:4	150:14	8	(1)
water	150:11	0:0	9	(
water	150:12	0:0	9	1
water	150:13	0:0	9	)
water	151:3	0:0	8	}
if	152:3	154:3	6	(imageCursor)
cond	152:7	152:7	7	imageCursor
water	152:7	0:0	8	imageCursor
stmts	152:20	154:3	7	
water	152:20	0:0	8	{
if	153:4	153:46	8	(!nextSrcImage (in ,& imageCursor ))
cond	153:8	153:38	9	!nextSrcImage (in ,& imageCursor )
op	153:8	0:0	10	!
call	153:9	153:38	10	nextSrcImage
arg	153:22	153:24	11	in
water	153:22	0:0	12	in
arg	153:26	153:38	11	&imageCursor
op	153:26	0:0	12	&
water	153:27	0:0	12	imageCursor
stmts	153:41	153:46	9	
break	153:41	153:46	10	
water	154:3	0:0	8	}
else	154:4	155:37	6
stmts	155:4	155:37	7	
if	155:4	155:37	8	(!TIFFReadDirectory (in ))
cond	155:8	155:29	9	!TIFFReadDirectory (in )
op	155:8	0:0	10	!
call	155:9	155:29	10	TIFFReadDirectory
arg	155:27	155:29	11	in
water	155:27	0:0	12	in
stmts	155:32	155:37	9	
break	155:32	155:37	10	
water	156:2	0:0	6	}
water	157:2	0:0	4	(
water	157:3	0:0	4	void
water	157:7	0:0	4	)
call	157:9	157:21	4	TIFFClose
arg	157:19	157:21	5	in
water	157:19	0:0	6	in
water	157:22	0:0	4	;
water	158:1	0:0	4	}
water	159:1	0:0	2	(
water	159:2	0:0	2	void
water	159:6	0:0	2	)
call	159:8	159:21	2	TIFFClose
arg	159:18	159:21	3	out
water	159:18	0:0	4	out
water	159:22	0:0	2	;
return	160:1	160:11	2	(0)
water	160:8	0:0	3	(
water	160:9	0:0	3	0
water	160:10	0:0	3	)
