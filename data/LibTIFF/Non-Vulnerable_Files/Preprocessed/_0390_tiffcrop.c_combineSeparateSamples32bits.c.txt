func	1:0	119:2	0	static int	combineSeparateSamples32bits
params	2:29	0:0	1	
param	2:30	2:41	2	uint8 *	in[]
param	2:43	2:53	2	uint8 *	out
param	2:55	2:66	2	uint32	cols
param	3:30	3:41	2	uint32	rows
param	3:43	3:53	2	uint16	spp
param	3:55	3:65	2	uint16	bps
param	4:23	4:37	2	FILE *	dumpfile
param	4:39	4:49	2	int	format
param	4:51	4:60	2	int	level
stmnts	0:0	118:12	1	
decl	6:2	6:24	2	int	ready_bits
op	6:20	0:0	2	=
water	6:22	0:0	2	0
decl	7:2	7:57	2	uint32	src_rowsize
water	7:20	0:0	2	,
decl	7:2	7:57	2	uint32	dst_rowsize
water	7:33	0:0	2	,
decl	7:2	7:57	2	uint32	bit_offset
water	7:45	0:0	2	,
decl	7:2	7:57	2	uint32	src_offset
decl	8:2	8:34	2	uint32	src_byte
op	8:18	0:0	2	=
water	8:20	0:0	2	0
water	8:21	0:0	2	,
decl	8:2	8:34	2	uint32	src_bit
op	8:31	0:0	2	=
water	8:33	0:0	2	0
decl	9:2	9:17	2	uint32	row
water	9:12	0:0	2	,
decl	9:2	9:17	2	uint32	col
decl	10:2	10:37	2	uint32	longbuff1
op	10:19	0:0	2	=
water	10:21	0:0	2	0
water	10:22	0:0	2	,
decl	10:2	10:37	2	uint32	longbuff2
op	10:34	0:0	2	=
water	10:36	0:0	2	0
decl	11:2	11:36	2	uint64	maskbits
op	11:18	0:0	2	=
water	11:20	0:0	2	0
water	11:21	0:0	2	,
decl	11:2	11:36	2	uint64	matchbits
op	11:33	0:0	2	=
water	11:35	0:0	2	0
decl	12:2	12:40	2	uint64	buff1
op	12:15	0:0	2	=
water	12:17	0:0	2	0
water	12:18	0:0	2	,
decl	12:2	12:40	2	uint64	buff2
op	12:26	0:0	2	=
water	12:28	0:0	2	0
water	12:29	0:0	2	,
decl	12:2	12:40	2	uint64	buff3
op	12:37	0:0	2	=
water	12:39	0:0	2	0
decl	13:2	13:67	2	uint8	bytebuff1
op	13:19	0:0	2	=
water	13:21	0:0	2	0
water	13:22	0:0	2	,
decl	13:2	13:67	2	uint8	bytebuff2
op	13:34	0:0	2	=
water	13:36	0:0	2	0
water	13:37	0:0	2	,
decl	13:2	13:67	2	uint8	bytebuff3
op	13:49	0:0	2	=
water	13:51	0:0	2	0
water	13:52	0:0	2	,
decl	13:2	13:67	2	uint8	bytebuff4
op	13:64	0:0	2	=
water	13:66	0:0	2	0
decl	14:2	14:13	2	tsample_t	s
decl	15:2	15:28	2	unsigned char	*src
op	15:21	0:0	2	=
water	15:23	0:0	2	in
op	15:25	0:0	2	[
water	15:26	0:0	2	0
op	15:27	0:0	2	]
decl	16:2	16:26	2	unsigned char	*dst
op	16:21	0:0	2	=
water	16:23	0:0	2	out
decl	17:2	17:26	2	char	action[8]
if	18:2	22:4	2	(( src == NULL ) || ( dst == NULL ))
cond	18:6	18:35	3	( src == NULL ) || ( dst == NULL )
water	18:6	0:0	4	(
water	18:7	0:0	4	src
op	18:11	0:0	4	==
water	18:14	0:0	4	NULL
water	18:18	0:0	4	)
op	18:20	0:0	4	||
water	18:23	0:0	4	(
water	18:24	0:0	4	dst
op	18:28	0:0	4	==
water	18:31	0:0	4	NULL
water	18:35	0:0	4	)
stmts	19:4	22:4	3	
water	19:4	0:0	4	{
call	20:4	20:77	4	TIFFError
arg	20:14	20:44	5	"combineSeparateSamples32bits"
water	20:14	0:0	6	"combineSeparateSamples32bits"
arg	20:45	20:77	5	"Invalid input or output buffer"
water	20:45	0:0	6	"Invalid input or output buffer"
water	20:78	0:0	4	;
return	21:4	21:14	4	(1)
water	21:11	0:0	5	(
water	21:12	0:0	5	1
water	21:13	0:0	5	)
water	22:4	0:0	4	}
water	24:2	0:0	2	src_rowsize
op	24:14	0:0	2	=
water	24:16	0:0	2	(
water	24:17	0:0	2	(
water	24:18	0:0	2	bps
op	24:22	0:0	2	*
water	24:24	0:0	2	cols
water	24:28	0:0	2	)
op	24:30	0:0	2	+
water	24:32	0:0	2	7
water	24:33	0:0	2	)
op	24:35	0:0	2	/
water	24:37	0:0	2	8
water	24:38	0:0	2	;
water	25:2	0:0	2	dst_rowsize
op	25:14	0:0	2	=
water	25:16	0:0	2	(
water	25:17	0:0	2	(
water	25:18	0:0	2	bps
op	25:22	0:0	2	*
water	25:24	0:0	2	cols
op	25:29	0:0	2	*
water	25:31	0:0	2	spp
water	25:34	0:0	2	)
op	25:36	0:0	2	+
water	25:38	0:0	2	7
water	25:39	0:0	2	)
op	25:41	0:0	2	/
water	25:43	0:0	2	8
water	25:44	0:0	2	;
water	26:2	0:0	2	maskbits
op	26:11	0:0	2	=
water	26:14	0:0	2	(
water	26:15	0:0	2	uint64
water	26:21	0:0	2	)
op	26:22	0:0	2	-
water	26:23	0:0	2	1
op	26:25	0:0	2	>>
water	26:28	0:0	2	(
water	26:30	0:0	2	64
op	26:33	0:0	2	-
water	26:35	0:0	2	bps
water	26:38	0:0	2	)
water	26:39	0:0	2	;
for	28:2	117:4	2	(row = 0 ;row < rows;row ++)
forinit	28:7	28:14	3	row = 0 ;
water	28:7	0:0	4	row
op	28:11	0:0	4	=
water	28:13	0:0	4	0
water	28:14	0:0	4	;
cond	28:16	28:22	3	row < rows
water	28:16	0:0	4	row
op	28:20	0:0	4	<
water	28:22	0:0	4	rows
forexpr	28:28	28:31	3	row ++
water	28:28	0:0	4	row
op	28:31	0:0	4	++
stmts	29:4	117:4	3	
water	29:4	0:0	4	{
water	30:4	0:0	4	ready_bits
op	30:15	0:0	4	=
water	30:17	0:0	4	0
water	30:18	0:0	4	;
water	31:4	0:0	4	buff1
op	31:10	0:0	4	=
water	31:12	0:0	4	buff2
op	31:18	0:0	4	=
water	31:20	0:0	4	0
water	31:21	0:0	4	;
water	32:4	0:0	4	dst
op	32:8	0:0	4	=
water	32:10	0:0	4	out
op	32:14	0:0	4	+
water	32:16	0:0	4	(
water	32:17	0:0	4	row
op	32:21	0:0	4	*
water	32:23	0:0	4	dst_rowsize
water	32:34	0:0	4	)
water	32:35	0:0	4	;
water	33:4	0:0	4	src_offset
op	33:15	0:0	4	=
water	33:17	0:0	4	row
op	33:21	0:0	4	*
water	33:23	0:0	4	src_rowsize
water	33:34	0:0	4	;
for	34:4	91:6	4	(col = 0 ;col < cols;col ++)
forinit	34:9	34:16	5	col = 0 ;
water	34:9	0:0	6	col
op	34:13	0:0	6	=
water	34:15	0:0	6	0
water	34:16	0:0	6	;
cond	34:18	34:24	5	col < cols
water	34:18	0:0	6	col
op	34:22	0:0	6	<
water	34:24	0:0	6	cols
forexpr	34:30	34:33	5	col ++
water	34:30	0:0	6	col
op	34:33	0:0	6	++
stmts	35:6	91:6	5	
water	35:6	0:0	6	{
water	37:6	0:0	6	bit_offset
op	37:17	0:0	6	=
water	37:19	0:0	6	col
op	37:23	0:0	6	*
water	37:25	0:0	6	bps
water	37:28	0:0	6	;
water	38:6	0:0	6	src_byte
op	38:15	0:0	6	=
water	38:17	0:0	6	bit_offset
op	38:28	0:0	6	/
water	38:30	0:0	6	8
water	38:31	0:0	6	;
water	39:6	0:0	6	src_bit
op	39:15	0:0	6	=
water	39:17	0:0	6	bit_offset
op	39:28	0:0	6	%
water	39:30	0:0	6	8
water	39:31	0:0	6	;
water	40:6	0:0	6	matchbits
op	40:16	0:0	6	=
water	40:18	0:0	6	maskbits
op	40:27	0:0	6	<<
water	40:30	0:0	6	(
water	40:31	0:0	6	64
op	40:34	0:0	6	-
water	40:36	0:0	6	src_bit
op	40:44	0:0	6	-
water	40:46	0:0	6	bps
water	40:49	0:0	6	)
water	40:50	0:0	6	;
for	41:6	90:1	6	(s = 0 ;( s < spp ) && ( s < MAX_SAMPLES );s ++)
forinit	41:11	41:16	7	s = 0 ;
water	41:11	0:0	8	s
op	41:13	0:0	8	=
water	41:15	0:0	8	0
water	41:16	0:0	8	;
cond	41:18	41:47	7	( s < spp ) && ( s < MAX_SAMPLES )
water	41:18	0:0	8	(
water	41:19	0:0	8	s
op	41:21	0:0	8	<
water	41:23	0:0	8	spp
water	41:26	0:0	8	)
op	41:28	0:0	8	&&
water	41:31	0:0	8	(
water	41:32	0:0	8	s
op	41:34	0:0	8	<
water	41:36	0:0	8	MAX_SAMPLES
water	41:47	0:0	8	)
forexpr	41:50	41:51	7	s ++
water	41:50	0:0	8	s
op	41:51	0:0	8	++
stmts	42:1	90:1	7	
water	42:1	0:0	8	{
water	43:1	0:0	8	src
op	43:5	0:0	8	=
water	43:7	0:0	8	in
op	43:9	0:0	8	[
water	43:10	0:0	8	s
op	43:11	0:0	8	]
op	43:13	0:0	8	+
water	43:15	0:0	8	src_offset
op	43:26	0:0	8	+
water	43:28	0:0	8	src_byte
water	43:36	0:0	8	;
if	44:1	48:3	8	(little_endian)
cond	44:5	44:5	9	little_endian
water	44:5	0:0	10	little_endian
stmts	45:3	48:3	9	
water	45:3	0:0	10	{
water	46:3	0:0	10	longbuff1
op	46:13	0:0	10	=
water	46:15	0:0	10	(
water	46:16	0:0	10	src
op	46:19	0:0	10	[
water	46:20	0:0	10	0
op	46:21	0:0	10	]
op	46:23	0:0	10	<<
water	46:26	0:0	10	24
water	46:28	0:0	10	)
op	46:30	0:0	10	|
water	46:32	0:0	10	(
water	46:33	0:0	10	src
op	46:36	0:0	10	[
water	46:37	0:0	10	1
op	46:38	0:0	10	]
op	46:40	0:0	10	<<
water	46:43	0:0	10	16
water	46:45	0:0	10	)
op	46:47	0:0	10	|
water	46:49	0:0	10	(
water	46:50	0:0	10	src
op	46:53	0:0	10	[
water	46:54	0:0	10	2
op	46:55	0:0	10	]
op	46:57	0:0	10	<<
water	46:60	0:0	10	8
water	46:61	0:0	10	)
op	46:63	0:0	10	|
water	46:65	0:0	10	src
op	46:68	0:0	10	[
water	46:69	0:0	10	3
op	46:70	0:0	10	]
water	46:71	0:0	10	;
water	47:10	0:0	10	longbuff2
op	47:20	0:0	10	=
water	47:22	0:0	10	longbuff1
water	47:31	0:0	10	;
water	48:3	0:0	10	}
else	49:1	53:3	8
stmts	50:3	53:3	9	
water	50:3	0:0	10	{
water	51:3	0:0	10	longbuff1
op	51:13	0:0	10	=
water	51:15	0:0	10	(
water	51:16	0:0	10	src
op	51:19	0:0	10	[
water	51:20	0:0	10	3
op	51:21	0:0	10	]
op	51:23	0:0	10	<<
water	51:26	0:0	10	24
water	51:28	0:0	10	)
op	51:30	0:0	10	|
water	51:32	0:0	10	(
water	51:33	0:0	10	src
op	51:36	0:0	10	[
water	51:37	0:0	10	2
op	51:38	0:0	10	]
op	51:40	0:0	10	<<
water	51:43	0:0	10	16
water	51:45	0:0	10	)
op	51:47	0:0	10	|
water	51:49	0:0	10	(
water	51:50	0:0	10	src
op	51:53	0:0	10	[
water	51:54	0:0	10	1
op	51:55	0:0	10	]
op	51:57	0:0	10	<<
water	51:60	0:0	10	8
water	51:61	0:0	10	)
op	51:63	0:0	10	|
water	51:65	0:0	10	src
op	51:68	0:0	10	[
water	51:69	0:0	10	0
op	51:70	0:0	10	]
water	51:71	0:0	10	;
water	52:10	0:0	10	longbuff2
op	52:20	0:0	10	=
water	52:22	0:0	10	longbuff1
water	52:31	0:0	10	;
water	53:3	0:0	10	}
water	54:1	0:0	8	buff3
op	54:7	0:0	8	=
water	54:9	0:0	8	(
water	54:10	0:0	8	(
water	54:11	0:0	8	uint64
water	54:17	0:0	8	)
water	54:18	0:0	8	longbuff1
op	54:28	0:0	8	<<
water	54:31	0:0	8	32
water	54:33	0:0	8	)
op	54:35	0:0	8	|
water	54:37	0:0	8	longbuff2
water	54:46	0:0	8	;
water	55:1	0:0	8	buff1
op	55:7	0:0	8	=
water	55:9	0:0	8	(
water	55:10	0:0	8	buff3
op	55:16	0:0	8	&
water	55:18	0:0	8	matchbits
water	55:27	0:0	8	)
op	55:29	0:0	8	<<
water	55:32	0:0	8	(
water	55:33	0:0	8	src_bit
water	55:40	0:0	8	)
water	55:41	0:0	8	;
if	57:1	71:3	8	(ready_bits >= 32)
cond	57:5	57:19	9	ready_bits >= 32
water	57:5	0:0	10	ready_bits
op	57:16	0:0	10	>=
water	57:19	0:0	10	32
stmts	58:3	71:3	9	
water	58:3	0:0	10	{
water	59:3	0:0	10	bytebuff1
op	59:13	0:0	10	=
water	59:15	0:0	10	(
water	59:16	0:0	10	buff2
op	59:22	0:0	10	>>
water	59:25	0:0	10	56
water	59:27	0:0	10	)
water	59:28	0:0	10	;
op	60:3	0:0	10	*
water	60:4	0:0	10	dst
op	60:7	0:0	10	++
op	60:10	0:0	10	=
water	60:12	0:0	10	bytebuff1
water	60:21	0:0	10	;
water	61:3	0:0	10	bytebuff2
op	61:13	0:0	10	=
water	61:15	0:0	10	(
water	61:16	0:0	10	buff2
op	61:22	0:0	10	>>
water	61:25	0:0	10	48
water	61:27	0:0	10	)
water	61:28	0:0	10	;
op	62:3	0:0	10	*
water	62:4	0:0	10	dst
op	62:7	0:0	10	++
op	62:10	0:0	10	=
water	62:12	0:0	10	bytebuff2
water	62:21	0:0	10	;
water	63:3	0:0	10	bytebuff3
op	63:13	0:0	10	=
water	63:15	0:0	10	(
water	63:16	0:0	10	buff2
op	63:22	0:0	10	>>
water	63:25	0:0	10	40
water	63:27	0:0	10	)
water	63:28	0:0	10	;
op	64:3	0:0	10	*
water	64:4	0:0	10	dst
op	64:7	0:0	10	++
op	64:10	0:0	10	=
water	64:12	0:0	10	bytebuff3
water	64:21	0:0	10	;
water	65:3	0:0	10	bytebuff4
op	65:13	0:0	10	=
water	65:15	0:0	10	(
water	65:16	0:0	10	buff2
op	65:22	0:0	10	>>
water	65:25	0:0	10	32
water	65:27	0:0	10	)
water	65:28	0:0	10	;
op	66:3	0:0	10	*
water	66:4	0:0	10	dst
op	66:7	0:0	10	++
op	66:10	0:0	10	=
water	66:12	0:0	10	bytebuff4
water	66:21	0:0	10	;
water	67:3	0:0	10	ready_bits
op	67:14	0:0	10	-=
water	67:17	0:0	10	32
water	67:19	0:0	10	;
water	69:3	0:0	10	buff2
op	69:9	0:0	10	=
water	69:11	0:0	10	(
water	69:12	0:0	10	(
water	69:13	0:0	10	buff2
op	69:19	0:0	10	<<
water	69:22	0:0	10	32
water	69:24	0:0	10	)
op	69:26	0:0	10	|
water	69:28	0:0	10	(
water	69:29	0:0	10	buff1
op	69:35	0:0	10	>>
water	69:38	0:0	10	ready_bits
water	69:48	0:0	10	)
water	69:49	0:0	10	)
water	69:50	0:0	10	;
call	70:3	70:26	10	strcpy
arg	70:11	70:17	11	action
water	70:11	0:0	12	action
arg	70:19	70:26	11	"Flush"
water	70:19	0:0	12	"Flush"
water	70:27	0:0	10	;
water	71:3	0:0	10	}
else	72:1	77:3	8
stmts	73:3	77:3	9	
water	73:3	0:0	10	{
water	74:3	0:0	10	bytebuff1
op	74:13	0:0	10	=
water	74:15	0:0	10	bytebuff2
op	74:25	0:0	10	=
water	74:27	0:0	10	bytebuff3
op	74:37	0:0	10	=
water	74:39	0:0	10	bytebuff4
op	74:49	0:0	10	=
water	74:51	0:0	10	0
water	74:52	0:0	10	;
water	75:3	0:0	10	buff2
op	75:9	0:0	10	=
water	75:11	0:0	10	(
water	75:12	0:0	10	buff2
op	75:18	0:0	10	|
water	75:20	0:0	10	(
water	75:21	0:0	10	buff1
op	75:27	0:0	10	>>
water	75:30	0:0	10	ready_bits
water	75:40	0:0	10	)
water	75:41	0:0	10	)
water	75:42	0:0	10	;
call	76:3	76:27	10	strcpy
arg	76:11	76:17	11	action
water	76:11	0:0	12	action
arg	76:19	76:27	11	"Update"
water	76:19	0:0	12	"Update"
water	76:28	0:0	10	;
water	77:3	0:0	10	}
water	78:1	0:0	8	ready_bits
op	78:12	0:0	8	+=
water	78:15	0:0	8	bps
water	78:18	0:0	8	;
if	79:1	89:3	8	(( dumpfile != NULL ) && ( level == 3 ))
cond	79:5	79:38	9	( dumpfile != NULL ) && ( level == 3 )
water	79:5	0:0	10	(
water	79:6	0:0	10	dumpfile
op	79:15	0:0	10	!=
water	79:18	0:0	10	NULL
water	79:22	0:0	10	)
op	79:24	0:0	10	&&
water	79:27	0:0	10	(
water	79:28	0:0	10	level
op	79:34	0:0	10	==
water	79:37	0:0	10	3
water	79:38	0:0	10	)
stmts	80:3	89:3	9	
water	80:3	0:0	10	{
call	81:3	83:56	10	dump_info
arg	81:14	81:22	11	dumpfile
water	81:14	0:0	12	dumpfile
arg	81:24	81:30	11	format
water	81:24	0:0	12	format
arg	81:32	81:34	11	""
water	81:32	0:0	12	""
arg	82:7	82:89	11	"Row %3d, Col %3d, Sample %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
water	82:7	0:0	12	"Row %3d, Col %3d, Sample %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
arg	83:7	83:14	11	row+1
water	83:7	0:0	12	row
op	83:11	0:0	12	+
water	83:13	0:0	12	1
arg	83:16	83:23	11	col+1
water	83:16	0:0	12	col
op	83:20	0:0	12	+
water	83:22	0:0	12	1
arg	83:25	83:26	11	s
water	83:25	0:0	12	s
arg	83:28	83:36	11	src_byte
water	83:28	0:0	12	src_byte
arg	83:38	83:45	11	src_bit
water	83:38	0:0	12	src_bit
arg	83:47	83:56	11	dst-out
water	83:47	0:0	12	dst
op	83:51	0:0	12	-
water	83:53	0:0	12	out
water	83:57	0:0	10	;
call	84:3	84:56	10	dump_wide
arg	84:14	84:22	11	dumpfile
water	84:14	0:0	12	dumpfile
arg	84:24	84:30	11	format
water	84:24	0:0	12	format
arg	84:32	84:45	11	"Match bits "
water	84:32	0:0	12	"Match bits "
arg	84:47	84:56	11	matchbits
water	84:47	0:0	12	matchbits
water	84:57	0:0	10	;
call	85:3	85:53	10	dump_data
arg	85:14	85:22	11	dumpfile
water	85:14	0:0	12	dumpfile
arg	85:24	85:30	11	format
water	85:24	0:0	12	format
arg	85:32	85:45	11	"Src   bits "
water	85:32	0:0	12	"Src   bits "
arg	85:47	85:50	11	src
water	85:47	0:0	12	src
arg	85:52	85:53	11	8
water	85:52	0:0	12	8
water	85:54	0:0	10	;
call	86:3	86:52	10	dump_wide
arg	86:14	86:22	11	dumpfile
water	86:14	0:0	12	dumpfile
arg	86:24	86:30	11	format
water	86:24	0:0	12	format
arg	86:32	86:45	11	"Buff1 bits "
water	86:32	0:0	12	"Buff1 bits "
arg	86:47	86:52	11	buff1
water	86:47	0:0	12	buff1
water	86:53	0:0	10	;
call	87:3	87:52	10	dump_wide
arg	87:14	87:22	11	dumpfile
water	87:14	0:0	12	dumpfile
arg	87:24	87:30	11	format
water	87:24	0:0	12	format
arg	87:32	87:45	11	"Buff2 bits "
water	87:32	0:0	12	"Buff2 bits "
arg	87:47	87:52	11	buff2
water	87:47	0:0	12	buff2
water	87:53	0:0	10	;
call	88:3	88:78	10	dump_info
arg	88:14	88:22	11	dumpfile
water	88:14	0:0	12	dumpfile
arg	88:24	88:30	11	format
water	88:24	0:0	12	format
arg	88:32	88:34	11	""
water	88:32	0:0	12	""
arg	88:36	88:58	11	"Ready bits:   %d, %s"
water	88:36	0:0	12	"Ready bits:   %d, %s"
arg	88:60	88:70	11	ready_bits
water	88:60	0:0	12	ready_bits
arg	88:72	88:78	11	action
water	88:72	0:0	12	action
water	88:79	0:0	10	;
water	89:3	0:0	10	}
water	90:1	0:0	8	}
water	91:6	0:0	6	}
while	92:4	98:6	4	(ready_bits > 0)
cond	92:11	92:24	5	ready_bits > 0
water	92:11	0:0	6	ready_bits
op	92:22	0:0	6	>
water	92:24	0:0	6	0
stmts	93:6	98:6	5	
water	93:6	0:0	6	{
water	94:6	0:0	6	bytebuff1
op	94:16	0:0	6	=
water	94:18	0:0	6	(
water	94:19	0:0	6	buff2
op	94:25	0:0	6	>>
water	94:28	0:0	6	56
water	94:30	0:0	6	)
water	94:31	0:0	6	;
op	95:6	0:0	6	*
water	95:7	0:0	6	dst
op	95:10	0:0	6	++
op	95:13	0:0	6	=
water	95:15	0:0	6	bytebuff1
water	95:24	0:0	6	;
water	96:6	0:0	6	buff2
op	96:12	0:0	6	=
water	96:14	0:0	6	(
water	96:15	0:0	6	buff2
op	96:21	0:0	6	<<
water	96:24	0:0	6	8
water	96:25	0:0	6	)
water	96:26	0:0	6	;
water	97:6	0:0	6	ready_bits
op	97:17	0:0	6	-=
water	97:20	0:0	6	8
water	97:21	0:0	6	;
water	98:6	0:0	6	}
if	99:4	111:6	4	(( dumpfile != NULL ) && ( level == 3 ))
cond	99:8	99:41	5	( dumpfile != NULL ) && ( level == 3 )
water	99:8	0:0	6	(
water	99:9	0:0	6	dumpfile
op	99:18	0:0	6	!=
water	99:21	0:0	6	NULL
water	99:25	0:0	6	)
op	99:27	0:0	6	&&
water	99:30	0:0	6	(
water	99:31	0:0	6	level
op	99:37	0:0	6	==
water	99:40	0:0	6	3
water	99:41	0:0	6	)
stmts	100:6	111:6	5	
water	100:6	0:0	6	{
call	101:6	103:49	6	dump_info
arg	101:17	101:25	7	dumpfile
water	101:17	0:0	8	dumpfile
arg	101:27	101:33	7	format
water	101:27	0:0	8	format
arg	101:35	101:37	7	""
water	101:35	0:0	8	""
arg	102:10	102:81	7	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
water	102:10	0:0	8	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
arg	103:3	103:10	7	row+1
water	103:3	0:0	8	row
op	103:7	0:0	8	+
water	103:9	0:0	8	1
arg	103:12	103:19	7	col+1
water	103:12	0:0	8	col
op	103:16	0:0	8	+
water	103:18	0:0	8	1
arg	103:21	103:29	7	src_byte
water	103:21	0:0	8	src_byte
arg	103:31	103:38	7	src_bit
water	103:31	0:0	8	src_bit
arg	103:40	103:49	7	dst-out
water	103:40	0:0	8	dst
op	103:44	0:0	8	-
water	103:46	0:0	8	out
water	103:50	0:0	6	;
call	104:6	104:59	6	dump_long
arg	104:17	104:25	7	dumpfile
water	104:17	0:0	8	dumpfile
arg	104:27	104:33	7	format
water	104:27	0:0	8	format
arg	104:35	104:48	7	"Match bits "
water	104:35	0:0	8	"Match bits "
arg	104:50	104:59	7	matchbits
water	104:50	0:0	8	matchbits
water	104:60	0:0	6	;
call	105:6	105:56	6	dump_data
arg	105:17	105:25	7	dumpfile
water	105:17	0:0	8	dumpfile
arg	105:27	105:33	7	format
water	105:27	0:0	8	format
arg	105:35	105:48	7	"Src   bits "
water	105:35	0:0	8	"Src   bits "
arg	105:50	105:53	7	src
water	105:50	0:0	8	src
arg	105:55	105:56	7	4
water	105:55	0:0	8	4
water	105:57	0:0	6	;
call	106:6	106:55	6	dump_long
arg	106:17	106:25	7	dumpfile
water	106:17	0:0	8	dumpfile
arg	106:27	106:33	7	format
water	106:27	0:0	8	format
arg	106:35	106:48	7	"Buff1 bits "
water	106:35	0:0	8	"Buff1 bits "
arg	106:50	106:55	7	buff1
water	106:50	0:0	8	buff1
water	106:56	0:0	6	;
call	107:6	107:55	6	dump_long
arg	107:17	107:25	7	dumpfile
water	107:17	0:0	8	dumpfile
arg	107:27	107:33	7	format
water	107:27	0:0	8	format
arg	107:35	107:48	7	"Buff2 bits "
water	107:35	0:0	8	"Buff2 bits "
arg	107:50	107:55	7	buff2
water	107:50	0:0	8	buff2
water	107:56	0:0	6	;
call	108:6	108:59	6	dump_byte
arg	108:17	108:25	7	dumpfile
water	108:17	0:0	8	dumpfile
arg	108:27	108:33	7	format
water	108:27	0:0	8	format
arg	108:35	108:48	7	"Write bits1"
water	108:35	0:0	8	"Write bits1"
arg	108:50	108:59	7	bytebuff1
water	108:50	0:0	8	bytebuff1
water	108:60	0:0	6	;
call	109:6	109:59	6	dump_byte
arg	109:17	109:25	7	dumpfile
water	109:17	0:0	8	dumpfile
arg	109:27	109:33	7	format
water	109:27	0:0	8	format
arg	109:35	109:48	7	"Write bits2"
water	109:35	0:0	8	"Write bits2"
arg	109:50	109:59	7	bytebuff2
water	109:50	0:0	8	bytebuff2
water	109:60	0:0	6	;
call	110:6	110:69	6	dump_info
arg	110:17	110:25	7	dumpfile
water	110:17	0:0	8	dumpfile
arg	110:27	110:33	7	format
water	110:27	0:0	8	format
arg	110:35	110:37	7	""
water	110:35	0:0	8	""
arg	110:39	110:57	7	"Ready bits:  %2d"
water	110:39	0:0	8	"Ready bits:  %2d"
arg	110:59	110:69	7	ready_bits
water	110:59	0:0	8	ready_bits
water	110:70	0:0	6	;
water	111:6	0:0	6	}
if	112:4	116:6	4	(( dumpfile != NULL ) && ( level == 2 ))
cond	112:8	112:41	5	( dumpfile != NULL ) && ( level == 2 )
water	112:8	0:0	6	(
water	112:9	0:0	6	dumpfile
op	112:18	0:0	6	!=
water	112:21	0:0	6	NULL
water	112:25	0:0	6	)
op	112:27	0:0	6	&&
water	112:30	0:0	6	(
water	112:31	0:0	6	level
op	112:37	0:0	6	==
water	112:40	0:0	6	2
water	112:41	0:0	6	)
stmts	113:6	116:6	5	
water	113:6	0:0	6	{
call	114:6	114:79	6	dump_info
arg	114:17	114:25	7	dumpfile
water	114:17	0:0	8	dumpfile
arg	114:27	114:33	7	format
water	114:27	0:0	8	format
arg	114:35	114:65	7	"combineSeparateSamples32bits"
water	114:35	0:0	8	"combineSeparateSamples32bits"
arg	114:66	114:79	7	"Output data"
water	114:66	0:0	8	"Output data"
water	114:80	0:0	6	;
call	115:6	115:60	6	dump_buffer
arg	115:18	115:26	7	dumpfile
water	115:18	0:0	8	dumpfile
arg	115:28	115:34	7	format
water	115:28	0:0	8	format
arg	115:36	115:37	7	1
water	115:36	0:0	8	1
arg	115:39	115:50	7	dst_rowsize
water	115:39	0:0	8	dst_rowsize
arg	115:52	115:55	7	row
water	115:52	0:0	8	row
arg	115:57	115:60	7	out
water	115:57	0:0	8	out
water	115:61	0:0	6	;
water	116:6	0:0	6	}
water	117:4	0:0	4	}
return	118:2	118:12	2	(0)
water	118:9	0:0	3	(
water	118:10	0:0	3	0
water	118:11	0:0	3	)
