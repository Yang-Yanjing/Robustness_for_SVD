func	1:0	97:2	0	static int	rotateContigSamples32bits
params	2:25	0:0	1	
param	2:26	2:41	2	uint16	rotation
param	2:43	2:53	2	uint16	spp
param	2:55	2:65	2	uint16	bps
param	2:67	2:79	2	uint32	width
param	3:26	3:39	2	uint32	length
param	3:43	3:53	2	uint32	col
param	3:55	3:65	2	uint8 *	src
param	3:67	3:77	2	uint8 *	dst
stmnts	0:0	96:12	1	
decl	5:2	5:24	2	int	ready_bits
op	5:20	0:0	2	=
water	5:22	0:0	2	0
decl	7:2	7:33	2	uint32	row
water	7:12	0:0	2	,
decl	7:2	7:33	2	uint32	rowsize
water	7:21	0:0	2	,
decl	7:2	7:33	2	uint32	bit_offset
decl	8:2	8:26	2	uint32	src_byte
water	8:17	0:0	2	,
decl	8:2	8:26	2	uint32	src_bit
decl	9:2	9:37	2	uint32	longbuff1
op	9:19	0:0	2	=
water	9:21	0:0	2	0
water	9:22	0:0	2	,
decl	9:2	9:37	2	uint32	longbuff2
op	9:34	0:0	2	=
water	9:36	0:0	2	0
decl	10:2	10:36	2	uint64	maskbits
op	10:18	0:0	2	=
water	10:20	0:0	2	0
water	10:21	0:0	2	,
decl	10:2	10:36	2	uint64	matchbits
op	10:33	0:0	2	=
water	10:35	0:0	2	0
decl	11:2	11:40	2	uint64	buff1
op	11:15	0:0	2	=
water	11:17	0:0	2	0
water	11:18	0:0	2	,
decl	11:2	11:40	2	uint64	buff2
op	11:26	0:0	2	=
water	11:28	0:0	2	0
water	11:29	0:0	2	,
decl	11:2	11:40	2	uint64	buff3
op	11:37	0:0	2	=
water	11:39	0:0	2	0
decl	12:2	12:67	2	uint8	bytebuff1
op	12:19	0:0	2	=
water	12:21	0:0	2	0
water	12:22	0:0	2	,
decl	12:2	12:67	2	uint8	bytebuff2
op	12:34	0:0	2	=
water	12:36	0:0	2	0
water	12:37	0:0	2	,
decl	12:2	12:67	2	uint8	bytebuff3
op	12:49	0:0	2	=
water	12:51	0:0	2	0
water	12:52	0:0	2	,
decl	12:2	12:67	2	uint8	bytebuff4
op	12:64	0:0	2	=
water	12:66	0:0	2	0
decl	13:2	13:15	2	uint8	*next
decl	14:2	14:18	2	tsample_t	sample
if	15:2	19:4	2	(( src == NULL ) || ( dst == NULL ))
cond	15:6	15:35	3	( src == NULL ) || ( dst == NULL )
water	15:6	0:0	4	(
water	15:7	0:0	4	src
op	15:11	0:0	4	==
water	15:14	0:0	4	NULL
water	15:18	0:0	4	)
op	15:20	0:0	4	||
water	15:23	0:0	4	(
water	15:24	0:0	4	dst
op	15:28	0:0	4	==
water	15:31	0:0	4	NULL
water	15:35	0:0	4	)
stmts	16:4	19:4	3	
water	16:4	0:0	4	{
call	17:4	17:77	4	TIFFError
arg	17:14	17:41	5	"rotateContigSamples24bits"
water	17:14	0:0	6	"rotateContigSamples24bits"
arg	17:42	17:77	5	"Invalid src or destination buffer"
water	17:42	0:0	6	"Invalid src or destination buffer"
water	17:78	0:0	4	;
return	18:4	18:14	4	(1)
water	18:11	0:0	5	(
water	18:12	0:0	5	1
water	18:13	0:0	5	)
water	19:4	0:0	4	}
water	26:2	0:0	2	rowsize
op	26:10	0:0	2	=
water	26:12	0:0	2	(
water	26:13	0:0	2	(
water	26:14	0:0	2	bps
op	26:18	0:0	2	*
water	26:20	0:0	2	spp
op	26:24	0:0	2	*
water	26:26	0:0	2	width
water	26:31	0:0	2	)
op	26:33	0:0	2	+
water	26:35	0:0	2	7
water	26:36	0:0	2	)
op	26:38	0:0	2	/
water	26:40	0:0	2	8
water	26:41	0:0	2	;
water	27:2	0:0	2	ready_bits
op	27:13	0:0	2	=
water	27:15	0:0	2	0
water	27:16	0:0	2	;
water	28:2	0:0	2	maskbits
op	28:11	0:0	2	=
water	28:14	0:0	2	(
water	28:15	0:0	2	uint64
water	28:21	0:0	2	)
op	28:22	0:0	2	-
water	28:23	0:0	2	1
op	28:25	0:0	2	>>
water	28:28	0:0	2	(
water	28:29	0:0	2	64
op	28:32	0:0	2	-
water	28:34	0:0	2	bps
water	28:37	0:0	2	)
water	28:38	0:0	2	;
water	29:2	0:0	2	buff1
op	29:8	0:0	2	=
water	29:10	0:0	2	buff2
op	29:16	0:0	2	=
water	29:18	0:0	2	0
water	29:19	0:0	2	;
for	30:2	88:4	2	(row = 0 ;row < length;row ++)
forinit	30:7	30:14	3	row = 0 ;
water	30:7	0:0	4	row
op	30:11	0:0	4	=
water	30:13	0:0	4	0
water	30:14	0:0	4	;
cond	30:16	30:22	3	row < length
water	30:16	0:0	4	row
op	30:20	0:0	4	<
water	30:22	0:0	4	length
forexpr	30:30	30:33	3	row ++
water	30:30	0:0	4	row
op	30:33	0:0	4	++
stmts	31:4	88:4	3	
water	31:4	0:0	4	{
water	32:4	0:0	4	bit_offset
op	32:15	0:0	4	=
water	32:17	0:0	4	col
op	32:21	0:0	4	*
water	32:23	0:0	4	bps
op	32:27	0:0	4	*
water	32:29	0:0	4	spp
water	32:32	0:0	4	;
for	33:4	87:6	4	(sample = 0 ;sample < spp;sample ++)
forinit	33:9	33:19	5	sample = 0 ;
water	33:9	0:0	6	sample
op	33:16	0:0	6	=
water	33:18	0:0	6	0
water	33:19	0:0	6	;
cond	33:21	33:30	5	sample < spp
water	33:21	0:0	6	sample
op	33:28	0:0	6	<
water	33:30	0:0	6	spp
forexpr	33:35	33:41	5	sample ++
water	33:35	0:0	6	sample
op	33:41	0:0	6	++
stmts	34:6	87:6	5	
water	34:6	0:0	6	{
if	35:6	39:8	6	(sample == 0)
cond	35:10	35:20	7	sample == 0
water	35:10	0:0	8	sample
op	35:17	0:0	8	==
water	35:20	0:0	8	0
stmts	36:8	39:8	7	
water	36:8	0:0	8	{
water	37:8	0:0	8	src_byte
op	37:17	0:0	8	=
water	37:19	0:0	8	bit_offset
op	37:30	0:0	8	/
water	37:32	0:0	8	8
water	37:33	0:0	8	;
water	38:8	0:0	8	src_bit
op	38:17	0:0	8	=
water	38:19	0:0	8	bit_offset
op	38:30	0:0	8	%
water	38:32	0:0	8	8
water	38:33	0:0	8	;
water	39:8	0:0	8	}
else	40:6	44:8	6
stmts	41:8	44:8	7	
water	41:8	0:0	8	{
water	42:8	0:0	8	src_byte
op	42:17	0:0	8	=
water	42:19	0:0	8	(
water	42:20	0:0	8	bit_offset
op	42:31	0:0	8	+
water	42:33	0:0	8	(
water	42:34	0:0	8	sample
op	42:41	0:0	8	*
water	42:43	0:0	8	bps
water	42:46	0:0	8	)
water	42:47	0:0	8	)
op	42:49	0:0	8	/
water	42:51	0:0	8	8
water	42:52	0:0	8	;
water	43:8	0:0	8	src_bit
op	43:17	0:0	8	=
water	43:19	0:0	8	(
water	43:20	0:0	8	bit_offset
op	43:31	0:0	8	+
water	43:33	0:0	8	(
water	43:34	0:0	8	sample
op	43:41	0:0	8	*
water	43:43	0:0	8	bps
water	43:46	0:0	8	)
water	43:47	0:0	8	)
op	43:49	0:0	8	%
water	43:51	0:0	8	8
water	43:52	0:0	8	;
water	44:8	0:0	8	}
switch	45:6	53:8	6	(rotation)
cond	45:14	45:14	7	rotation
water	45:14	0:0	8	rotation
stmts	46:1	53:8	7	
water	46:1	0:0	8	{
label	47:8	47:16	8	case 90 :
water	47:18	0:0	8	next
op	47:23	0:0	8	=
water	47:25	0:0	8	src
op	47:29	0:0	8	+
water	47:31	0:0	8	src_byte
op	47:40	0:0	8	-
water	47:42	0:0	8	(
water	47:43	0:0	8	row
op	47:47	0:0	8	*
water	47:49	0:0	8	rowsize
water	47:56	0:0	8	)
water	47:57	0:0	8	;
break	48:18	48:23	8	
label	49:8	49:16	8	case 270 :
water	49:18	0:0	8	next
op	49:23	0:0	8	=
water	49:25	0:0	8	src
op	49:29	0:0	8	+
water	49:31	0:0	8	src_byte
op	49:40	0:0	8	+
water	49:42	0:0	8	(
water	49:43	0:0	8	row
op	49:47	0:0	8	*
water	49:49	0:0	8	rowsize
water	49:56	0:0	8	)
water	49:57	0:0	8	;
break	50:11	50:16	8	
label	51:1	51:8	8	default :
call	51:11	51:80	8	TIFFError
arg	51:21	51:47	9	"rotateContigSamples8bits"
water	51:21	0:0	10	"rotateContigSamples8bits"
arg	51:49	51:70	9	"Invalid rotation %d"
water	51:49	0:0	10	"Invalid rotation %d"
arg	51:72	51:80	9	rotation
water	51:72	0:0	10	rotation
water	51:81	0:0	8	;
return	52:18	52:28	8	(1)
water	52:25	0:0	9	(
water	52:26	0:0	9	1
water	52:27	0:0	9	)
water	53:8	0:0	8	}
water	54:6	0:0	6	matchbits
op	54:16	0:0	6	=
water	54:18	0:0	6	maskbits
op	54:27	0:0	6	<<
water	54:30	0:0	6	(
water	54:31	0:0	6	64
op	54:34	0:0	6	-
water	54:36	0:0	6	src_bit
op	54:44	0:0	6	-
water	54:46	0:0	6	bps
water	54:49	0:0	6	)
water	54:50	0:0	6	;
if	55:6	59:8	6	(little_endian)
cond	55:10	55:10	7	little_endian
water	55:10	0:0	8	little_endian
stmts	56:8	59:8	7	
water	56:8	0:0	8	{
water	57:1	0:0	8	longbuff1
op	57:11	0:0	8	=
water	57:13	0:0	8	(
water	57:14	0:0	8	next
op	57:18	0:0	8	[
water	57:19	0:0	8	0
op	57:20	0:0	8	]
op	57:22	0:0	8	<<
water	57:25	0:0	8	24
water	57:27	0:0	8	)
op	57:29	0:0	8	|
water	57:31	0:0	8	(
water	57:32	0:0	8	next
op	57:36	0:0	8	[
water	57:37	0:0	8	1
op	57:38	0:0	8	]
op	57:40	0:0	8	<<
water	57:43	0:0	8	16
water	57:45	0:0	8	)
op	57:47	0:0	8	|
water	57:49	0:0	8	(
water	57:50	0:0	8	next
op	57:54	0:0	8	[
water	57:55	0:0	8	2
op	57:56	0:0	8	]
op	57:58	0:0	8	<<
water	57:61	0:0	8	8
water	57:62	0:0	8	)
op	57:64	0:0	8	|
water	57:66	0:0	8	next
op	57:70	0:0	8	[
water	57:71	0:0	8	3
op	57:72	0:0	8	]
water	57:73	0:0	8	;
water	58:8	0:0	8	longbuff2
op	58:18	0:0	8	=
water	58:20	0:0	8	longbuff1
water	58:29	0:0	8	;
water	59:8	0:0	8	}
else	60:6	64:1	6
stmts	61:8	64:1	7	
water	61:8	0:0	8	{
water	62:1	0:0	8	longbuff1
op	62:11	0:0	8	=
water	62:13	0:0	8	(
water	62:14	0:0	8	next
op	62:18	0:0	8	[
water	62:19	0:0	8	3
op	62:20	0:0	8	]
op	62:22	0:0	8	<<
water	62:25	0:0	8	24
water	62:27	0:0	8	)
op	62:29	0:0	8	|
water	62:31	0:0	8	(
water	62:32	0:0	8	next
op	62:36	0:0	8	[
water	62:37	0:0	8	2
op	62:38	0:0	8	]
op	62:40	0:0	8	<<
water	62:43	0:0	8	16
water	62:45	0:0	8	)
op	62:47	0:0	8	|
water	62:49	0:0	8	(
water	62:50	0:0	8	next
op	62:54	0:0	8	[
water	62:55	0:0	8	1
op	62:56	0:0	8	]
op	62:58	0:0	8	<<
water	62:61	0:0	8	8
water	62:62	0:0	8	)
op	62:64	0:0	8	|
water	62:66	0:0	8	next
op	62:70	0:0	8	[
water	62:71	0:0	8	0
op	62:72	0:0	8	]
water	62:73	0:0	8	;
water	63:8	0:0	8	longbuff2
op	63:18	0:0	8	=
water	63:20	0:0	8	longbuff1
water	63:29	0:0	8	;
water	64:1	0:0	8	}
water	65:6	0:0	6	buff3
op	65:12	0:0	6	=
water	65:14	0:0	6	(
water	65:15	0:0	6	(
water	65:16	0:0	6	uint64
water	65:22	0:0	6	)
water	65:23	0:0	6	longbuff1
op	65:33	0:0	6	<<
water	65:36	0:0	6	32
water	65:38	0:0	6	)
op	65:40	0:0	6	|
water	65:42	0:0	6	longbuff2
water	65:51	0:0	6	;
water	66:6	0:0	6	buff1
op	66:12	0:0	6	=
water	66:14	0:0	6	(
water	66:15	0:0	6	buff3
op	66:21	0:0	6	&
water	66:23	0:0	6	matchbits
water	66:32	0:0	6	)
op	66:34	0:0	6	<<
water	66:37	0:0	6	(
water	66:38	0:0	6	src_bit
water	66:45	0:0	6	)
water	66:46	0:0	6	;
if	67:6	71:8	6	(ready_bits < 32)
cond	67:10	67:23	7	ready_bits < 32
water	67:10	0:0	8	ready_bits
op	67:21	0:0	8	<
water	67:23	0:0	8	32
stmts	68:8	71:8	7	
water	68:8	0:0	8	{
water	69:8	0:0	8	bytebuff1
op	69:18	0:0	8	=
water	69:20	0:0	8	bytebuff2
op	69:30	0:0	8	=
water	69:32	0:0	8	bytebuff3
op	69:42	0:0	8	=
water	69:44	0:0	8	bytebuff4
op	69:54	0:0	8	=
water	69:56	0:0	8	0
water	69:57	0:0	8	;
water	70:8	0:0	8	buff2
op	70:14	0:0	8	=
water	70:16	0:0	8	(
water	70:17	0:0	8	buff2
op	70:23	0:0	8	|
water	70:25	0:0	8	(
water	70:26	0:0	8	buff1
op	70:32	0:0	8	>>
water	70:35	0:0	8	ready_bits
water	70:45	0:0	8	)
water	70:46	0:0	8	)
water	70:47	0:0	8	;
water	71:8	0:0	8	}
else	72:6	85:8	6
stmts	73:8	85:8	7	
water	73:8	0:0	8	{
water	74:8	0:0	8	bytebuff1
op	74:18	0:0	8	=
water	74:20	0:0	8	(
water	74:21	0:0	8	buff2
op	74:27	0:0	8	>>
water	74:30	0:0	8	56
water	74:32	0:0	8	)
water	74:33	0:0	8	;
op	75:8	0:0	8	*
water	75:9	0:0	8	dst
op	75:12	0:0	8	++
op	75:15	0:0	8	=
water	75:17	0:0	8	bytebuff1
water	75:26	0:0	8	;
water	76:8	0:0	8	bytebuff2
op	76:18	0:0	8	=
water	76:20	0:0	8	(
water	76:21	0:0	8	buff2
op	76:27	0:0	8	>>
water	76:30	0:0	8	48
water	76:32	0:0	8	)
water	76:33	0:0	8	;
op	77:8	0:0	8	*
water	77:9	0:0	8	dst
op	77:12	0:0	8	++
op	77:15	0:0	8	=
water	77:17	0:0	8	bytebuff2
water	77:26	0:0	8	;
water	78:8	0:0	8	bytebuff3
op	78:18	0:0	8	=
water	78:20	0:0	8	(
water	78:21	0:0	8	buff2
op	78:27	0:0	8	>>
water	78:30	0:0	8	40
water	78:32	0:0	8	)
water	78:33	0:0	8	;
op	79:8	0:0	8	*
water	79:9	0:0	8	dst
op	79:12	0:0	8	++
op	79:15	0:0	8	=
water	79:17	0:0	8	bytebuff3
water	79:26	0:0	8	;
water	80:8	0:0	8	bytebuff4
op	80:18	0:0	8	=
water	80:20	0:0	8	(
water	80:21	0:0	8	buff2
op	80:27	0:0	8	>>
water	80:30	0:0	8	32
water	80:32	0:0	8	)
water	80:33	0:0	8	;
op	81:8	0:0	8	*
water	81:9	0:0	8	dst
op	81:12	0:0	8	++
op	81:15	0:0	8	=
water	81:17	0:0	8	bytebuff4
water	81:26	0:0	8	;
water	82:8	0:0	8	ready_bits
op	82:19	0:0	8	-=
water	82:22	0:0	8	32
water	82:24	0:0	8	;
water	84:8	0:0	8	buff2
op	84:14	0:0	8	=
water	84:16	0:0	8	(
water	84:17	0:0	8	(
water	84:18	0:0	8	buff2
op	84:24	0:0	8	<<
water	84:27	0:0	8	32
water	84:29	0:0	8	)
op	84:31	0:0	8	|
water	84:33	0:0	8	(
water	84:34	0:0	8	buff1
op	84:40	0:0	8	>>
water	84:43	0:0	8	ready_bits
water	84:53	0:0	8	)
water	84:54	0:0	8	)
water	84:55	0:0	8	;
water	85:8	0:0	8	}
water	86:6	0:0	6	ready_bits
op	86:17	0:0	6	+=
water	86:20	0:0	6	bps
water	86:23	0:0	6	;
water	87:6	0:0	6	}
water	88:4	0:0	4	}
while	89:2	95:4	2	(ready_bits > 0)
cond	89:9	89:22	3	ready_bits > 0
water	89:9	0:0	4	ready_bits
op	89:20	0:0	4	>
water	89:22	0:0	4	0
stmts	90:4	95:4	3	
water	90:4	0:0	4	{
water	91:4	0:0	4	bytebuff1
op	91:14	0:0	4	=
water	91:16	0:0	4	(
water	91:17	0:0	4	buff2
op	91:23	0:0	4	>>
water	91:26	0:0	4	56
water	91:28	0:0	4	)
water	91:29	0:0	4	;
op	92:4	0:0	4	*
water	92:5	0:0	4	dst
op	92:8	0:0	4	++
op	92:11	0:0	4	=
water	92:13	0:0	4	bytebuff1
water	92:22	0:0	4	;
water	93:4	0:0	4	buff2
op	93:10	0:0	4	=
water	93:12	0:0	4	(
water	93:13	0:0	4	buff2
op	93:19	0:0	4	<<
water	93:22	0:0	4	8
water	93:23	0:0	4	)
water	93:24	0:0	4	;
water	94:4	0:0	4	ready_bits
op	94:15	0:0	4	-=
water	94:18	0:0	4	8
water	94:19	0:0	4	;
water	95:4	0:0	4	}
return	96:2	96:12	2	(0)
water	96:9	0:0	3	(
water	96:10	0:0	3	0
water	96:11	0:0	3	)
