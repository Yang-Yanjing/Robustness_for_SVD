func	1:0	266:2	0	int	main
params	2:4	0:0	1	
param	2:5	2:13	2	int	argc
param	2:15	2:27	2	char *	argv[]
stmnts	5:2	265:12	1	
water	5:2	0:0	2	extern
water	5:9	0:0	2	int
water	5:13	0:0	2	optind
water	5:19	0:0	2	;
decl	7:2	7:32	2	uint16	defconfig
op	7:19	0:0	2	=
water	7:21	0:0	2	(
water	7:22	0:0	2	uint16
water	7:28	0:0	2	)
op	7:30	0:0	2	-
water	7:31	0:0	2	1
decl	8:2	8:25	2	uint16	deffillorder
op	8:22	0:0	2	=
water	8:24	0:0	2	0
decl	9:2	9:34	2	uint32	deftilewidth
op	9:22	0:0	2	=
water	9:24	0:0	2	(
water	9:25	0:0	2	uint32
water	9:31	0:0	2	)
water	9:33	0:0	2	0
decl	10:2	10:35	2	uint32	deftilelength
op	10:23	0:0	2	=
water	10:25	0:0	2	(
water	10:26	0:0	2	uint32
water	10:32	0:0	2	)
water	10:34	0:0	2	0
decl	11:2	11:37	2	uint32	defrowsperstrip
op	11:25	0:0	2	=
water	11:27	0:0	2	(
water	11:28	0:0	2	uint32
water	11:34	0:0	2	)
water	11:36	0:0	2	0
decl	12:2	12:19	2	uint32	dirnum
op	12:16	0:0	2	=
water	12:18	0:0	2	0
decl	13:2	13:17	2	TIFF	*in
op	13:11	0:0	2	=
water	13:13	0:0	2	NULL
decl	14:2	14:18	2	TIFF	*out
op	14:12	0:0	2	=
water	14:14	0:0	2	NULL
decl	15:2	15:16	2	char	mode[10]
decl	16:2	16:17	2	char	*mp
op	16:11	0:0	2	=
water	16:13	0:0	2	mode
decl	18:2	18:25	2	struct image_data	image
decl	19:2	19:24	2	struct crop_mask	crop
decl	20:2	20:24	2	struct pagedef	page
decl	21:2	21:42	2	struct pageseg	sections[MAX_SECTIONS]
decl	22:2	22:43	2	struct buffinfo	seg_buffs[MAX_SECTIONS]
decl	23:2	23:24	2	struct dump_opts	dump
decl	24:2	24:36	2	unsigned char	*read_buff
op	24:30	0:0	2	=
water	24:32	0:0	2	NULL
decl	25:2	25:36	2	unsigned char	*crop_buff
op	25:30	0:0	2	=
water	25:32	0:0	2	NULL
decl	26:2	26:36	2	unsigned char	*sect_buff
op	26:30	0:0	2	=
water	26:32	0:0	2	NULL
decl	27:2	27:36	2	unsigned char	*sect_src
op	27:30	0:0	2	=
water	27:32	0:0	2	NULL
decl	28:2	28:41	2	unsigned int	imagelist[MAX_IMAGES+1]
decl	29:2	29:32	2	unsigned int	image_count
op	29:29	0:0	2	=
water	29:31	0:0	2	0
decl	30:2	30:32	2	unsigned int	dump_images
op	30:29	0:0	2	=
water	30:31	0:0	2	0
decl	31:2	31:32	2	unsigned int	next_image
op	31:29	0:0	2	=
water	31:31	0:0	2	0
decl	32:2	32:32	2	unsigned int	next_page
op	32:29	0:0	2	=
water	32:31	0:0	2	0
decl	33:2	33:32	2	unsigned int	total_pages
op	33:29	0:0	2	=
water	33:31	0:0	2	0
decl	34:2	34:32	2	unsigned int	total_images
op	34:29	0:0	2	=
water	34:31	0:0	2	0
decl	35:2	35:36	2	unsigned int	end_of_input
op	35:29	0:0	2	=
water	35:31	0:0	2	FALSE
decl	36:2	36:20	2	int	seg
water	36:12	0:0	2	,
decl	36:2	36:20	2	int	length
decl	37:2	37:36	2	char	temp_filename[PATH_MAX+1]
water	38:2	0:0	2	little_endian
op	38:16	0:0	2	=
op	38:18	0:0	2	*
water	38:19	0:0	2	(
water	38:20	0:0	2	(
water	38:21	0:0	2	unsigned
water	38:30	0:0	2	char
op	38:35	0:0	2	*
water	38:36	0:0	2	)
op	38:37	0:0	2	&
water	38:38	0:0	2	little_endian
water	38:51	0:0	2	)
op	38:53	0:0	2	&
water	38:55	0:0	2	'1'
water	38:58	0:0	2	;
call	39:2	39:22	2	initImageData
arg	39:16	39:22	3	&image
op	39:16	0:0	4	&
water	39:17	0:0	4	image
water	39:23	0:0	2	;
call	40:2	40:21	2	initCropMasks
arg	40:16	40:21	3	&crop
op	40:16	0:0	4	&
water	40:17	0:0	4	crop
water	40:22	0:0	2	;
call	41:2	41:42	2	initPageSetup
arg	41:16	41:21	3	&page
op	41:16	0:0	4	&
water	41:17	0:0	4	page
arg	41:23	41:31	3	sections
water	41:23	0:0	4	sections
arg	41:33	41:42	3	seg_buffs
water	41:33	0:0	4	seg_buffs
water	41:43	0:0	2	;
call	42:2	42:23	2	initDumpOptions
arg	42:18	42:23	3	&dump
op	42:18	0:0	4	&
water	42:19	0:0	4	dump
water	42:24	0:0	2	;
call	43:2	45:61	2	process_command_opts
arg	43:24	43:28	3	argc
water	43:24	0:0	4	argc
arg	43:30	43:34	3	argv
water	43:30	0:0	4	argv
arg	43:36	43:38	3	mp
water	43:36	0:0	4	mp
arg	43:40	43:44	3	mode
water	43:40	0:0	4	mode
arg	43:46	43:53	3	&dirnum
op	43:46	0:0	4	&
water	43:47	0:0	4	dirnum
arg	43:55	43:65	3	&defconfig
op	43:55	0:0	4	&
water	43:56	0:0	4	defconfig
arg	44:24	44:37	3	&deffillorder
op	44:24	0:0	4	&
water	44:25	0:0	4	deffillorder
arg	44:39	44:52	3	&deftilewidth
op	44:39	0:0	4	&
water	44:40	0:0	4	deftilewidth
arg	44:54	44:68	3	&deftilelength
op	44:54	0:0	4	&
water	44:55	0:0	4	deftilelength
arg	44:70	44:86	3	&defrowsperstrip
op	44:70	0:0	4	&
water	44:71	0:0	4	defrowsperstrip
arg	45:17	45:22	3	&crop
op	45:17	0:0	4	&
water	45:18	0:0	4	crop
arg	45:24	45:29	3	&page
op	45:24	0:0	4	&
water	45:25	0:0	4	page
arg	45:31	45:36	3	&dump
op	45:31	0:0	4	&
water	45:32	0:0	4	dump
arg	45:38	45:47	3	imagelist
water	45:38	0:0	4	imagelist
arg	45:49	45:61	3	&image_count
op	45:49	0:0	4	&
water	45:50	0:0	4	image_count
water	45:62	0:0	2	;
if	46:2	47:11	2	(argc - optind < 2)
cond	46:6	46:22	3	argc - optind < 2
water	46:6	0:0	4	argc
op	46:11	0:0	4	-
water	46:13	0:0	4	optind
op	46:20	0:0	4	<
water	46:22	0:0	4	2
stmts	47:4	47:11	3	
call	47:4	47:10	4	usage
water	47:11	0:0	4	;
if	48:2	49:16	2	(( argc - optind ) == 2)
cond	48:6	48:25	3	( argc - optind ) == 2
water	48:6	0:0	4	(
water	48:7	0:0	4	argc
op	48:12	0:0	4	-
water	48:14	0:0	4	optind
water	48:20	0:0	4	)
op	48:22	0:0	4	==
water	48:25	0:0	4	2
stmts	49:4	49:16	3	
water	49:4	0:0	4	pageNum
op	49:12	0:0	4	=
op	49:14	0:0	4	-
water	49:15	0:0	4	1
water	49:16	0:0	4	;
else	50:2	51:20	2
stmts	51:4	51:20	3	
water	51:4	0:0	4	total_images
op	51:17	0:0	4	=
water	51:19	0:0	4	0
water	51:20	0:0	4	;
while	53:2	243:4	2	(optind < argc - 1)
cond	53:9	53:25	3	optind < argc - 1
water	53:9	0:0	4	optind
op	53:16	0:0	4	<
water	53:18	0:0	4	argc
op	53:23	0:0	4	-
water	53:25	0:0	4	1
stmts	54:4	243:4	3	
water	54:4	0:0	4	{
water	55:4	0:0	4	in
op	55:7	0:0	4	=
call	55:9	55:36	4	TIFFOpen
arg	55:19	55:31	5	argv[optind]
water	55:19	0:0	6	argv
op	55:23	0:0	6	[
water	55:24	0:0	6	optind
op	55:30	0:0	6	]
arg	55:33	55:36	5	"r"
water	55:33	0:0	6	"r"
water	55:37	0:0	4	;
if	56:4	57:17	4	(in == NULL)
cond	56:8	56:14	5	in == NULL
water	56:8	0:0	6	in
op	56:11	0:0	6	==
water	56:14	0:0	6	NULL
stmts	57:6	57:17	5	
return	57:6	57:17	6	(-3)
water	57:13	0:0	7	(
op	57:14	0:0	7	-
water	57:15	0:0	7	3
water	57:16	0:0	7	)
water	59:4	0:0	4	total_images
op	59:17	0:0	4	=
call	59:19	59:45	4	TIFFNumberOfDirectories
arg	59:43	59:45	5	in
water	59:43	0:0	6	in
water	59:46	0:0	4	;
if	60:4	64:6	4	(image_count == 0)
cond	60:8	60:23	5	image_count == 0
water	60:8	0:0	6	image_count
op	60:20	0:0	6	==
water	60:23	0:0	6	0
stmts	61:6	64:6	5	
water	61:6	0:0	6	{
water	62:6	0:0	6	dirnum
op	62:13	0:0	6	=
water	62:15	0:0	6	0
water	62:16	0:0	6	;
water	63:6	0:0	6	total_pages
op	63:18	0:0	6	=
water	63:20	0:0	6	total_images
water	63:32	0:0	6	;
water	64:6	0:0	6	}
else	65:4	75:6	4
stmts	66:6	75:6	5	
water	66:6	0:0	6	{
water	67:6	0:0	6	dirnum
op	67:13	0:0	6	=
call	67:15	67:49	6	(tdir_t)
arg	67:24	67:49	7	imagelist[next_image]-1
water	67:24	0:0	8	imagelist
op	67:33	0:0	8	[
water	67:34	0:0	8	next_image
op	67:44	0:0	8	]
op	67:46	0:0	8	-
water	67:48	0:0	8	1
water	67:50	0:0	6	;
water	68:6	0:0	6	next_image
op	68:16	0:0	6	++
water	68:18	0:0	6	;
if	72:6	73:27	6	(image_count > total_images)
cond	72:10	72:25	7	image_count > total_images
water	72:10	0:0	8	image_count
op	72:22	0:0	8	>
water	72:25	0:0	8	total_images
stmts	73:1	73:27	7	
water	73:1	0:0	8	image_count
op	73:13	0:0	8	=
water	73:15	0:0	8	total_images
water	73:27	0:0	8	;
water	74:6	0:0	6	total_pages
op	74:18	0:0	6	=
water	74:20	0:0	6	image_count
water	74:31	0:0	6	;
water	75:6	0:0	6	}
if	77:4	78:31	4	(dirnum == ( MAX_IMAGES - 1 ))
cond	77:8	77:33	5	dirnum == ( MAX_IMAGES - 1 )
water	77:8	0:0	6	dirnum
op	77:15	0:0	6	==
water	77:18	0:0	6	(
water	77:19	0:0	6	MAX_IMAGES
op	77:30	0:0	6	-
water	77:32	0:0	6	1
water	77:33	0:0	6	)
stmts	78:6	78:31	5	
water	78:6	0:0	6	dirnum
op	78:13	0:0	6	=
water	78:15	0:0	6	total_images
op	78:28	0:0	6	-
water	78:30	0:0	6	1
water	78:31	0:0	6	;
if	79:4	87:6	4	(dirnum > ( total_images ))
cond	79:8	79:30	5	dirnum > ( total_images )
water	79:8	0:0	6	dirnum
op	79:15	0:0	6	>
water	79:17	0:0	6	(
water	79:18	0:0	6	total_images
water	79:30	0:0	6	)
stmts	80:6	87:6	5	
water	80:6	0:0	6	{
call	81:6	83:32	6	TIFFError
arg	81:17	81:33	7	TIFFFileName(in)
call	81:17	81:32	8	TIFFFileName
arg	81:30	81:32	9	in
water	81:30	0:0	10	in
arg	82:6	82:61	7	"Invalid image number %d, File contains only %d images"
water	82:6	0:0	8	"Invalid image number %d, File contains only %d images"
arg	83:3	83:18	7	(int)dirnum+1
water	83:3	0:0	8	(
water	83:4	0:0	8	int
water	83:7	0:0	8	)
water	83:8	0:0	8	dirnum
op	83:15	0:0	8	+
water	83:17	0:0	8	1
arg	83:20	83:32	7	total_images
water	83:20	0:0	8	total_images
water	83:33	0:0	6	;
if	84:6	85:29	6	(out != NULL)
cond	84:10	84:17	7	out != NULL
water	84:10	0:0	8	out
op	84:14	0:0	8	!=
water	84:17	0:0	8	NULL
stmts	85:8	85:29	7	
water	85:8	0:0	8	(
water	85:9	0:0	8	void
water	85:13	0:0	8	)
call	85:15	85:28	8	TIFFClose
arg	85:25	85:28	9	out
water	85:25	0:0	10	out
water	85:29	0:0	8	;
return	86:6	86:16	6	(1)
water	86:13	0:0	7	(
water	86:14	0:0	7	1
water	86:15	0:0	7	)
water	87:6	0:0	6	}
if	88:4	94:6	4	(dirnum != 0 && !TIFFSetDirectory (in ,( tdir_t ) dirnum ))
cond	88:8	88:59	5	dirnum != 0 && !TIFFSetDirectory (in ,( tdir_t ) dirnum )
water	88:8	0:0	6	dirnum
op	88:15	0:0	6	!=
water	88:18	0:0	6	0
op	88:20	0:0	6	&&
op	88:23	0:0	6	!
call	88:24	88:59	6	TIFFSetDirectory
arg	88:41	88:43	7	in
water	88:41	0:0	8	in
arg	88:45	88:59	7	(tdir_t)dirnum
water	88:45	0:0	8	(
water	88:46	0:0	8	tdir_t
water	88:52	0:0	8	)
water	88:53	0:0	8	dirnum
stmts	89:6	94:6	5	
water	89:6	0:0	6	{
call	90:6	90:76	6	TIFFError
arg	90:16	90:32	7	TIFFFileName(in)
call	90:16	90:31	8	TIFFFileName
arg	90:29	90:31	9	in
water	90:29	0:0	10	in
arg	90:33	90:68	7	"Error, setting subdirectory at %d"
water	90:33	0:0	8	"Error, setting subdirectory at %d"
arg	90:70	90:76	7	dirnum
water	90:70	0:0	8	dirnum
water	90:77	0:0	6	;
if	91:6	92:29	6	(out != NULL)
cond	91:10	91:17	7	out != NULL
water	91:10	0:0	8	out
op	91:14	0:0	8	!=
water	91:17	0:0	8	NULL
stmts	92:8	92:29	7	
water	92:8	0:0	8	(
water	92:9	0:0	8	void
water	92:13	0:0	8	)
call	92:15	92:28	8	TIFFClose
arg	92:25	92:28	9	out
water	92:25	0:0	10	out
water	92:29	0:0	8	;
return	93:6	93:16	6	(1)
water	93:13	0:0	7	(
water	93:14	0:0	7	1
water	93:15	0:0	7	)
water	94:6	0:0	6	}
water	95:4	0:0	4	end_of_input
op	95:17	0:0	4	=
water	95:19	0:0	4	FALSE
water	95:24	0:0	4	;
while	96:4	240:6	4	(end_of_input == FALSE)
cond	96:11	96:27	5	end_of_input == FALSE
water	96:11	0:0	6	end_of_input
op	96:24	0:0	6	==
water	96:27	0:0	6	FALSE
stmts	97:6	240:6	5	
water	97:6	0:0	6	{
water	98:6	0:0	6	config
op	98:13	0:0	6	=
water	98:15	0:0	6	defconfig
water	98:24	0:0	6	;
water	99:6	0:0	6	compression
op	99:18	0:0	6	=
water	99:20	0:0	6	defcompression
water	99:34	0:0	6	;
water	100:6	0:0	6	predictor
op	100:16	0:0	6	=
water	100:18	0:0	6	defpredictor
water	100:30	0:0	6	;
water	101:6	0:0	6	fillorder
op	101:16	0:0	6	=
water	101:18	0:0	6	deffillorder
water	101:30	0:0	6	;
water	102:6	0:0	6	rowsperstrip
op	102:19	0:0	6	=
water	102:21	0:0	6	defrowsperstrip
water	102:36	0:0	6	;
water	103:6	0:0	6	tilewidth
op	103:16	0:0	6	=
water	103:18	0:0	6	deftilewidth
water	103:30	0:0	6	;
water	104:6	0:0	6	tilelength
op	104:17	0:0	6	=
water	104:19	0:0	6	deftilelength
water	104:32	0:0	6	;
water	105:6	0:0	6	g3opts
op	105:13	0:0	6	=
water	105:15	0:0	6	defg3opts
water	105:24	0:0	6	;
if	106:6	146:8	6	(dump . format != DUMP_NONE)
cond	106:10	106:25	7	dump . format != DUMP_NONE
water	106:10	0:0	8	dump
op	106:14	0:0	8	.
water	106:15	0:0	8	format
op	106:22	0:0	8	!=
water	106:25	0:0	8	DUMP_NONE
stmts	107:8	146:8	7	
water	107:8	0:0	8	{
water	109:1	0:0	8	dump_images
op	109:12	0:0	8	++
water	109:14	0:0	8	;
water	110:8	0:0	8	length
op	110:15	0:0	8	=
call	110:17	110:39	8	strlen
arg	110:24	110:39	9	dump.infilename
water	110:24	0:0	10	dump
op	110:28	0:0	10	.
water	110:29	0:0	10	infilename
water	110:40	0:0	8	;
if	111:8	127:10	8	(length > 0)
cond	111:12	111:21	9	length > 0
water	111:12	0:0	10	length
op	111:19	0:0	10	>
water	111:21	0:0	10	0
stmts	112:10	127:10	9	
water	112:10	0:0	10	{
if	113:10	114:32	10	(dump . infile != NULL)
cond	113:14	113:29	11	dump . infile != NULL
water	113:14	0:0	12	dump
op	113:18	0:0	12	.
water	113:19	0:0	12	infile
op	113:26	0:0	12	!=
water	113:29	0:0	12	NULL
stmts	114:12	114:32	11	
call	114:12	114:31	12	fclose
arg	114:20	114:31	13	dump.infile
water	114:20	0:0	14	dump
op	114:24	0:0	14	.
water	114:25	0:0	14	infile
water	114:32	0:0	12	;
call	117:10	119:60	10	snprintf
arg	117:19	117:32	11	temp_filename
water	117:19	0:0	12	temp_filename
arg	117:34	117:55	11	sizeof(temp_filename)
op	117:34	0:0	12	sizeof
water	117:40	0:0	12	(
water	117:41	0:0	12	temp_filename
water	117:54	0:0	12	)
arg	117:57	117:74	11	"%s-read-%03d.%s"
water	117:57	0:0	12	"%s-read-%03d.%s"
arg	118:5	118:20	11	dump.infilename
water	118:5	0:0	12	dump
op	118:9	0:0	12	.
water	118:10	0:0	12	infilename
arg	118:22	118:33	11	dump_images
water	118:22	0:0	12	dump_images
arg	119:18	119:60	11	(dump.format==DUMP_TEXT)?"txt":"raw"
water	119:18	0:0	12	(
water	119:19	0:0	12	dump
op	119:23	0:0	12	.
water	119:24	0:0	12	format
op	119:31	0:0	12	==
water	119:34	0:0	12	DUMP_TEXT
water	119:43	0:0	12	)
water	119:45	0:0	12	?
water	119:47	0:0	12	"txt"
water	119:53	0:0	12	:
water	119:55	0:0	12	"raw"
water	119:61	0:0	10	;
if	120:10	124:12	10	(( dump . infile =fopen (temp_filename ,dump . mode ) ) == NULL)
cond	120:14	120:65	11	( dump . infile =fopen (temp_filename ,dump . mode ) ) == NULL
water	120:14	0:0	12	(
water	120:15	0:0	12	dump
op	120:19	0:0	12	.
water	120:20	0:0	12	infile
op	120:27	0:0	12	=
call	120:29	120:59	12	fopen
arg	120:35	120:48	13	temp_filename
water	120:35	0:0	14	temp_filename
arg	120:50	120:59	13	dump.mode
water	120:50	0:0	14	dump
op	120:54	0:0	14	.
water	120:55	0:0	14	mode
water	120:60	0:0	12	)
op	120:62	0:0	12	==
water	120:65	0:0	12	NULL
stmts	121:12	124:12	11	
water	121:12	0:0	12	{
call	122:5	122:75	12	TIFFError
arg	122:16	122:54	13	"Unable to open dump file for writing"
water	122:16	0:0	14	"Unable to open dump file for writing"
arg	122:56	122:60	13	"%s"
water	122:56	0:0	14	"%s"
arg	122:62	122:75	13	temp_filename
water	122:62	0:0	14	temp_filename
water	122:76	0:0	12	;
call	123:5	123:13	12	exit
arg	123:11	123:13	13	-1
op	123:11	0:0	14	-
water	123:12	0:0	14	1
water	123:14	0:0	12	;
water	124:12	0:0	12	}
call	125:10	126:49	10	dump_info
arg	125:20	125:31	11	dump.infile
water	125:20	0:0	12	dump
op	125:24	0:0	12	.
water	125:25	0:0	12	infile
arg	125:33	125:44	11	dump.format
water	125:33	0:0	12	dump
op	125:37	0:0	12	.
water	125:38	0:0	12	format
arg	125:46	125:61	11	"Reading image"
water	125:46	0:0	12	"Reading image"
arg	125:62	125:74	11	"%d from %s"
water	125:62	0:0	12	"%d from %s"
arg	126:20	126:31	11	dump_images
water	126:20	0:0	12	dump_images
arg	126:33	126:49	11	TIFFFileName(in)
call	126:33	126:48	12	TIFFFileName
arg	126:46	126:48	13	in
water	126:46	0:0	14	in
water	126:50	0:0	10	;
water	127:10	0:0	10	}
water	128:8	0:0	8	length
op	128:15	0:0	8	=
call	128:17	128:40	8	strlen
arg	128:24	128:40	9	dump.outfilename
water	128:24	0:0	10	dump
op	128:28	0:0	10	.
water	128:29	0:0	10	outfilename
water	128:41	0:0	8	;
if	129:8	145:10	8	(length > 0)
cond	129:12	129:21	9	length > 0
water	129:12	0:0	10	length
op	129:19	0:0	10	>
water	129:21	0:0	10	0
stmts	130:10	145:10	9	
water	130:10	0:0	10	{
if	131:10	132:33	10	(dump . outfile != NULL)
cond	131:14	131:30	11	dump . outfile != NULL
water	131:14	0:0	12	dump
op	131:18	0:0	12	.
water	131:19	0:0	12	outfile
op	131:27	0:0	12	!=
water	131:30	0:0	12	NULL
stmts	132:12	132:33	11	
call	132:12	132:32	12	fclose
arg	132:20	132:32	13	dump.outfile
water	132:20	0:0	14	dump
op	132:24	0:0	14	.
water	132:25	0:0	14	outfile
water	132:33	0:0	12	;
call	135:10	137:60	10	snprintf
arg	135:19	135:32	11	temp_filename
water	135:19	0:0	12	temp_filename
arg	135:34	135:55	11	sizeof(temp_filename)
op	135:34	0:0	12	sizeof
water	135:40	0:0	12	(
water	135:41	0:0	12	temp_filename
water	135:54	0:0	12	)
arg	135:57	135:75	11	"%s-write-%03d.%s"
water	135:57	0:0	12	"%s-write-%03d.%s"
arg	136:5	136:21	11	dump.outfilename
water	136:5	0:0	12	dump
op	136:9	0:0	12	.
water	136:10	0:0	12	outfilename
arg	136:23	136:34	11	dump_images
water	136:23	0:0	12	dump_images
arg	137:18	137:60	11	(dump.format==DUMP_TEXT)?"txt":"raw"
water	137:18	0:0	12	(
water	137:19	0:0	12	dump
op	137:23	0:0	12	.
water	137:24	0:0	12	format
op	137:31	0:0	12	==
water	137:34	0:0	12	DUMP_TEXT
water	137:43	0:0	12	)
water	137:45	0:0	12	?
water	137:47	0:0	12	"txt"
water	137:53	0:0	12	:
water	137:55	0:0	12	"raw"
water	137:61	0:0	10	;
if	138:10	142:12	10	(( dump . outfile =fopen (temp_filename ,dump . mode ) ) == NULL)
cond	138:14	138:66	11	( dump . outfile =fopen (temp_filename ,dump . mode ) ) == NULL
water	138:14	0:0	12	(
water	138:15	0:0	12	dump
op	138:19	0:0	12	.
water	138:20	0:0	12	outfile
op	138:28	0:0	12	=
call	138:30	138:60	12	fopen
arg	138:36	138:49	13	temp_filename
water	138:36	0:0	14	temp_filename
arg	138:51	138:60	13	dump.mode
water	138:51	0:0	14	dump
op	138:55	0:0	14	.
water	138:56	0:0	14	mode
water	138:61	0:0	12	)
op	138:63	0:0	12	==
water	138:66	0:0	12	NULL
stmts	139:12	142:12	11	
water	139:12	0:0	12	{
call	140:7	140:77	12	TIFFError
arg	140:18	140:56	13	"Unable to open dump file for writing"
water	140:18	0:0	14	"Unable to open dump file for writing"
arg	140:58	140:62	13	"%s"
water	140:58	0:0	14	"%s"
arg	140:64	140:77	13	temp_filename
water	140:64	0:0	14	temp_filename
water	140:78	0:0	12	;
call	141:5	141:13	12	exit
arg	141:11	141:13	13	-1
op	141:11	0:0	14	-
water	141:12	0:0	14	1
water	141:14	0:0	12	;
water	142:12	0:0	12	}
call	143:10	144:49	10	dump_info
arg	143:20	143:32	11	dump.outfile
water	143:20	0:0	12	dump
op	143:24	0:0	12	.
water	143:25	0:0	12	outfile
arg	143:34	143:45	11	dump.format
water	143:34	0:0	12	dump
op	143:38	0:0	12	.
water	143:39	0:0	12	format
arg	143:47	143:62	11	"Writing image"
water	143:47	0:0	12	"Writing image"
arg	143:63	143:75	11	"%d from %s"
water	143:63	0:0	12	"%d from %s"
arg	144:20	144:31	11	dump_images
water	144:20	0:0	12	dump_images
arg	144:33	144:49	11	TIFFFileName(in)
call	144:33	144:48	12	TIFFFileName
arg	144:46	144:48	13	in
water	144:46	0:0	14	in
water	144:50	0:0	10	;
water	145:10	0:0	10	}
water	146:8	0:0	8	}
if	147:6	148:92	6	(dump . debug)
cond	147:10	147:15	7	dump . debug
water	147:10	0:0	8	dump
op	147:14	0:0	8	.
water	147:15	0:0	8	debug
stmts	148:9	148:92	7	
call	148:9	148:91	8	TIFFError
arg	148:19	148:25	9	"main"
water	148:19	0:0	10	"main"
arg	148:27	148:66	9	"Reading image %4d of %4d total pages."
water	148:27	0:0	10	"Reading image %4d of %4d total pages."
arg	148:68	148:78	9	dirnum+1
water	148:68	0:0	10	dirnum
op	148:75	0:0	10	+
water	148:77	0:0	10	1
arg	148:80	148:91	9	total_pages
water	148:80	0:0	10	total_pages
water	148:92	0:0	8	;
if	149:6	153:8	6	(loadImage (in ,& image ,& dump ,& read_buff ))
cond	149:10	149:49	7	loadImage (in ,& image ,& dump ,& read_buff )
call	149:10	149:49	8	loadImage
arg	149:20	149:22	9	in
water	149:20	0:0	10	in
arg	149:24	149:30	9	&image
op	149:24	0:0	10	&
water	149:25	0:0	10	image
arg	149:32	149:37	9	&dump
op	149:32	0:0	10	&
water	149:33	0:0	10	dump
arg	149:39	149:49	9	&read_buff
op	149:39	0:0	10	&
water	149:40	0:0	10	read_buff
stmts	150:8	153:8	7	
water	150:8	0:0	8	{
call	151:8	151:55	8	TIFFError
arg	151:18	151:24	9	"main"
water	151:18	0:0	10	"main"
arg	151:26	151:55	9	"Unable to load source image"
water	151:26	0:0	10	"Unable to load source image"
water	151:56	0:0	8	;
call	152:8	152:16	8	exit
arg	152:14	152:16	9	-1
op	152:14	0:0	10	-
water	152:15	0:0	10	1
water	152:17	0:0	8	;
water	153:8	0:0	8	}
if	156:6	160:8	6	(image . adjustments != 0)
cond	156:10	156:31	7	image . adjustments != 0
water	156:10	0:0	8	image
op	156:15	0:0	8	.
water	156:16	0:0	8	adjustments
op	156:28	0:0	8	!=
water	156:31	0:0	8	0
stmts	157:8	160:8	7	
water	157:8	0:0	8	{
if	158:1	159:61	8	(correct_orientation (& image ,& read_buff ))
cond	158:5	158:43	9	correct_orientation (& image ,& read_buff )
call	158:5	158:43	10	correct_orientation
arg	158:25	158:31	11	&image
op	158:25	0:0	12	&
water	158:26	0:0	12	image
arg	158:33	158:43	11	&read_buff
op	158:33	0:0	12	&
water	158:34	0:0	12	read_buff
stmts	159:5	159:61	9	
call	159:5	159:60	10	TIFFError
arg	159:15	159:21	11	"main"
water	159:15	0:0	12	"main"
arg	159:23	159:60	11	"Unable to correct image orientation"
water	159:23	0:0	12	"Unable to correct image orientation"
water	159:61	0:0	10	;
water	160:8	0:0	8	}
if	161:6	165:1	6	(getCropOffsets (& image ,& crop ,& dump ))
cond	161:10	161:45	7	getCropOffsets (& image ,& crop ,& dump )
call	161:10	161:45	8	getCropOffsets
arg	161:25	161:31	9	&image
op	161:25	0:0	10	&
water	161:26	0:0	10	image
arg	161:33	161:38	9	&crop
op	161:33	0:0	10	&
water	161:34	0:0	10	crop
arg	161:40	161:45	9	&dump
op	161:40	0:0	10	&
water	161:41	0:0	10	dump
stmts	162:8	165:1	7	
water	162:8	0:0	8	{
call	163:8	163:57	8	TIFFError
arg	163:18	163:24	9	"main"
water	163:18	0:0	10	"main"
arg	163:26	163:57	9	"Unable to define crop regions"
water	163:26	0:0	10	"Unable to define crop regions"
water	163:58	0:0	8	;
call	164:8	164:16	8	exit
arg	164:14	164:16	9	-1
op	164:14	0:0	10	-
water	164:15	0:0	10	1
water	164:17	0:0	8	;
water	165:1	0:0	8	}
if	166:6	173:1	6	(crop . selections > 0)
cond	166:10	166:28	7	crop . selections > 0
water	166:10	0:0	8	crop
op	166:14	0:0	8	.
water	166:15	0:0	8	selections
op	166:26	0:0	8	>
water	166:28	0:0	8	0
stmts	167:8	173:1	7	
water	167:8	0:0	8	{
if	168:8	172:3	8	(processCropSelections (& image ,& crop ,& read_buff ,seg_buffs ))
cond	168:12	168:70	9	processCropSelections (& image ,& crop ,& read_buff ,seg_buffs )
call	168:12	168:70	10	processCropSelections
arg	168:34	168:40	11	&image
op	168:34	0:0	12	&
water	168:35	0:0	12	image
arg	168:42	168:47	11	&crop
op	168:42	0:0	12	&
water	168:43	0:0	12	crop
arg	168:49	168:59	11	&read_buff
op	168:49	0:0	12	&
water	168:50	0:0	12	read_buff
arg	168:61	168:70	11	seg_buffs
water	168:61	0:0	12	seg_buffs
stmts	169:10	172:3	9	
water	169:10	0:0	10	{
call	170:10	170:64	10	TIFFError
arg	170:20	170:26	11	"main"
water	170:20	0:0	12	"main"
arg	170:28	170:64	11	"Unable to process image selections"
water	170:28	0:0	12	"Unable to process image selections"
water	170:65	0:0	10	;
call	171:10	171:18	10	exit
arg	171:16	171:18	11	-1
op	171:16	0:0	12	-
water	171:17	0:0	12	1
water	171:19	0:0	10	;
water	172:3	0:0	10	}
water	173:1	0:0	8	}
else	174:6	181:1	6
stmts	175:8	181:1	7	
water	175:8	0:0	8	{
if	176:8	180:3	8	(createCroppedImage (& image ,& crop ,& read_buff ,& crop_buff ))
cond	176:12	176:68	9	createCroppedImage (& image ,& crop ,& read_buff ,& crop_buff )
call	176:12	176:68	10	createCroppedImage
arg	176:31	176:37	11	&image
op	176:31	0:0	12	&
water	176:32	0:0	12	image
arg	176:39	176:44	11	&crop
op	176:39	0:0	12	&
water	176:40	0:0	12	crop
arg	176:46	176:56	11	&read_buff
op	176:46	0:0	12	&
water	176:47	0:0	12	read_buff
arg	176:58	176:68	11	&crop_buff
op	176:58	0:0	12	&
water	176:59	0:0	12	crop_buff
stmts	177:10	180:3	9	
water	177:10	0:0	10	{
call	178:10	178:59	10	TIFFError
arg	178:20	178:26	11	"main"
water	178:20	0:0	12	"main"
arg	178:28	178:59	11	"Unable to create output image"
water	178:28	0:0	12	"Unable to create output image"
water	178:60	0:0	10	;
call	179:10	179:18	10	exit
arg	179:16	179:18	11	-1
op	179:16	0:0	12	-
water	179:17	0:0	12	1
water	179:19	0:0	10	;
water	180:3	0:0	10	}
water	181:1	0:0	8	}
if	182:6	201:1	6	(page . mode == PAGE_MODE_NONE)
cond	182:10	182:23	7	page . mode == PAGE_MODE_NONE
water	182:10	0:0	8	page
op	182:14	0:0	8	.
water	182:15	0:0	8	mode
op	182:20	0:0	8	==
water	182:23	0:0	8	PAGE_MODE_NONE
stmts	183:8	201:1	7	
water	183:8	0:0	8	{
if	184:8	188:10	8	(crop . selections > 0)
cond	184:12	184:30	9	crop . selections > 0
water	184:12	0:0	10	crop
op	184:16	0:0	10	.
water	184:17	0:0	10	selections
op	184:28	0:0	10	>
water	184:30	0:0	10	0
stmts	185:10	188:10	9	
water	185:10	0:0	10	{
call	186:3	187:69	10	writeSelections
arg	186:19	186:21	11	in
water	186:19	0:0	12	in
arg	186:23	186:27	11	&out
op	186:23	0:0	12	&
water	186:24	0:0	12	out
arg	186:29	186:34	11	&crop
op	186:29	0:0	12	&
water	186:30	0:0	12	crop
arg	186:36	186:42	11	&image
op	186:36	0:0	12	&
water	186:37	0:0	12	image
arg	186:44	186:49	11	&dump
op	186:44	0:0	12	&
water	186:45	0:0	12	dump
arg	186:51	186:60	11	seg_buffs
water	186:51	0:0	12	seg_buffs
arg	187:26	187:28	11	mp
water	187:26	0:0	12	mp
arg	187:30	187:44	11	argv[argc-1]
water	187:30	0:0	12	argv
op	187:34	0:0	12	[
water	187:35	0:0	12	argc
op	187:40	0:0	12	-
water	187:42	0:0	12	1
op	187:43	0:0	12	]
arg	187:46	187:56	11	&next_page
op	187:46	0:0	12	&
water	187:47	0:0	12	next_page
arg	187:58	187:69	11	total_pages
water	187:58	0:0	12	total_pages
water	187:70	0:0	10	;
water	188:10	0:0	10	}
else	189:1	200:10	8
stmts	190:10	200:10	9	
water	190:10	0:0	10	{
if	191:3	193:21	10	(update_output_file (& out ,mp ,crop . exp_mode ,argv [ argc - 1 ] ,& next_page ))
cond	191:7	192:44	11	update_output_file (& out ,mp ,crop . exp_mode ,argv [ argc - 1 ] ,& next_page )
call	191:7	192:44	12	update_output_file
arg	191:27	191:31	13	&out
op	191:27	0:0	14	&
water	191:28	0:0	14	out
arg	191:33	191:35	13	mp
water	191:33	0:0	14	mp
arg	191:37	191:50	13	crop.exp_mode
water	191:37	0:0	14	crop
op	191:41	0:0	14	.
water	191:42	0:0	14	exp_mode
arg	191:52	191:66	13	argv[argc-1]
water	191:52	0:0	14	argv
op	191:56	0:0	14	[
water	191:57	0:0	14	argc
op	191:62	0:0	14	-
water	191:64	0:0	14	1
op	191:65	0:0	14	]
arg	192:34	192:44	13	&next_page
op	192:34	0:0	14	&
water	192:35	0:0	14	next_page
stmts	193:13	193:21	11	
call	193:13	193:20	12	exit
arg	193:19	193:20	13	1
water	193:19	0:0	14	1
water	193:21	0:0	12	;
if	194:10	199:5	10	(writeCroppedImage (in ,out ,& image ,& dump ,crop . combined_width ,crop . combined_length ,crop_buff ,next_page ,total_pages ))
cond	194:14	195:87	11	writeCroppedImage (in ,out ,& image ,& dump ,crop . combined_width ,crop . combined_length ,crop_buff ,next_page ,total_pages )
call	194:14	195:87	12	writeCroppedImage
arg	194:32	194:34	13	in
water	194:32	0:0	14	in
arg	194:36	194:39	13	out
water	194:36	0:0	14	out
arg	194:41	194:47	13	&image
op	194:41	0:0	14	&
water	194:42	0:0	14	image
arg	194:49	194:54	13	&dump
op	194:49	0:0	14	&
water	194:50	0:0	14	dump
arg	194:55	194:74	13	crop.combined_width
water	194:55	0:0	14	crop
op	194:59	0:0	14	.
water	194:60	0:0	14	combined_width
arg	195:32	195:52	13	crop.combined_length
water	195:32	0:0	14	crop
op	195:36	0:0	14	.
water	195:37	0:0	14	combined_length
arg	195:54	195:63	13	crop_buff
water	195:54	0:0	14	crop_buff
arg	195:65	195:74	13	next_page
water	195:65	0:0	14	next_page
arg	195:76	195:87	13	total_pages
water	195:76	0:0	14	total_pages
stmts	196:12	199:5	11	
water	196:12	0:0	12	{
call	197:13	197:58	12	TIFFError
arg	197:23	197:29	13	"main"
water	197:23	0:0	14	"main"
arg	197:31	197:58	13	"Unable to write new image"
water	197:31	0:0	14	"Unable to write new image"
water	197:59	0:0	12	;
call	198:13	198:21	12	exit
arg	198:19	198:21	13	-1
op	198:19	0:0	14	-
water	198:20	0:0	14	1
water	198:22	0:0	12	;
water	199:5	0:0	12	}
water	200:10	0:0	10	}
water	201:1	0:0	8	}
else	202:6	227:8	6
stmts	203:8	227:8	7	
water	203:8	0:0	8	{
if	207:1	208:23	8	(crop_buff != NULL)
cond	207:5	207:18	9	crop_buff != NULL
water	207:5	0:0	10	crop_buff
op	207:15	0:0	10	!=
water	207:18	0:0	10	NULL
stmts	208:3	208:23	9	
water	208:3	0:0	10	sect_src
op	208:12	0:0	10	=
water	208:14	0:0	10	crop_buff
water	208:23	0:0	10	;
else	209:8	210:30	8
stmts	210:10	210:30	9	
water	210:10	0:0	10	sect_src
op	210:19	0:0	10	=
water	210:21	0:0	10	read_buff
water	210:30	0:0	10	;
if	212:8	216:3	8	(computeOutputPixelOffsets (& crop ,& image ,& page ,sections ,& dump ))
cond	212:12	212:75	9	computeOutputPixelOffsets (& crop ,& image ,& page ,sections ,& dump )
call	212:12	212:75	10	computeOutputPixelOffsets
arg	212:38	212:43	11	&crop
op	212:38	0:0	12	&
water	212:39	0:0	12	crop
arg	212:45	212:51	11	&image
op	212:45	0:0	12	&
water	212:46	0:0	12	image
arg	212:53	212:58	11	&page
op	212:53	0:0	12	&
water	212:54	0:0	12	page
arg	212:60	212:68	11	sections
water	212:60	0:0	12	sections
arg	212:70	212:75	11	&dump
op	212:70	0:0	12	&
water	212:71	0:0	12	dump
stmts	213:10	216:3	9	
water	213:10	0:0	10	{
call	214:10	214:67	10	TIFFError
arg	214:20	214:26	11	"main"
water	214:20	0:0	12	"main"
arg	214:28	214:67	11	"Unable to compute output section data"
water	214:28	0:0	12	"Unable to compute output section data"
water	214:68	0:0	10	;
call	215:10	215:18	10	exit
arg	215:16	215:18	11	-1
op	215:16	0:0	12	-
water	215:17	0:0	12	1
water	215:19	0:0	10	;
water	216:3	0:0	10	}
if	220:1	221:18	8	(update_output_file (& out ,mp ,crop . exp_mode ,argv [ argc - 1 ] ,& next_page ))
cond	220:5	220:76	9	update_output_file (& out ,mp ,crop . exp_mode ,argv [ argc - 1 ] ,& next_page )
call	220:5	220:76	10	update_output_file
arg	220:25	220:29	11	&out
op	220:25	0:0	12	&
water	220:26	0:0	12	out
arg	220:31	220:33	11	mp
water	220:31	0:0	12	mp
arg	220:35	220:48	11	crop.exp_mode
water	220:35	0:0	12	crop
op	220:39	0:0	12	.
water	220:40	0:0	12	exp_mode
arg	220:50	220:64	11	argv[argc-1]
water	220:50	0:0	12	argv
op	220:54	0:0	12	[
water	220:55	0:0	12	argc
op	220:60	0:0	12	-
water	220:62	0:0	12	1
op	220:63	0:0	12	]
arg	220:66	220:76	11	&next_page
op	220:66	0:0	12	&
water	220:67	0:0	12	next_page
stmts	221:10	221:18	9	
call	221:10	221:17	10	exit
arg	221:16	221:17	11	1
water	221:16	0:0	12	1
water	221:18	0:0	10	;
if	222:1	226:3	8	(writeImageSections (in ,out ,& image ,& page ,sections ,& dump ,sect_src ,& sect_buff ))
cond	222:5	222:85	9	writeImageSections (in ,out ,& image ,& page ,sections ,& dump ,sect_src ,& sect_buff )
call	222:5	222:85	10	writeImageSections
arg	222:24	222:26	11	in
water	222:24	0:0	12	in
arg	222:28	222:31	11	out
water	222:28	0:0	12	out
arg	222:33	222:39	11	&image
op	222:33	0:0	12	&
water	222:34	0:0	12	image
arg	222:41	222:46	11	&page
op	222:41	0:0	12	&
water	222:42	0:0	12	page
arg	222:48	222:56	11	sections
water	222:48	0:0	12	sections
arg	222:58	222:63	11	&dump
op	222:58	0:0	12	&
water	222:59	0:0	12	dump
arg	222:65	222:73	11	sect_src
water	222:65	0:0	12	sect_src
arg	222:75	222:85	11	&sect_buff
op	222:75	0:0	12	&
water	222:76	0:0	12	sect_buff
stmts	223:10	226:3	9	
water	223:10	0:0	10	{
call	224:10	224:60	10	TIFFError
arg	224:20	224:26	11	"main"
water	224:20	0:0	12	"main"
arg	224:28	224:60	11	"Unable to write image sections"
water	224:28	0:0	12	"Unable to write image sections"
water	224:61	0:0	10	;
call	225:10	225:18	10	exit
arg	225:16	225:18	11	-1
op	225:16	0:0	12	-
water	225:17	0:0	12	1
water	225:19	0:0	10	;
water	226:3	0:0	10	}
water	227:8	0:0	8	}
if	229:6	230:16	6	(image_count == 0)
cond	229:10	229:25	7	image_count == 0
water	229:10	0:0	8	image_count
op	229:22	0:0	8	==
water	229:25	0:0	8	0
stmts	230:8	230:16	7	
water	230:8	0:0	8	dirnum
op	230:14	0:0	8	++
water	230:16	0:0	8	;
else	231:6	235:8	6
stmts	232:8	235:8	7	
water	232:8	0:0	8	{
water	233:1	0:0	8	dirnum
op	233:8	0:0	8	=
call	233:10	233:44	8	(tdir_t)
arg	233:19	233:44	9	imagelist[next_image]-1
water	233:19	0:0	10	imagelist
op	233:28	0:0	10	[
water	233:29	0:0	10	next_image
op	233:39	0:0	10	]
op	233:41	0:0	10	-
water	233:43	0:0	10	1
water	233:45	0:0	8	;
water	234:8	0:0	8	next_image
op	234:18	0:0	8	++
water	234:20	0:0	8	;
water	235:8	0:0	8	}
if	236:6	237:48	6	(dirnum == MAX_IMAGES - 1)
cond	236:10	236:33	7	dirnum == MAX_IMAGES - 1
water	236:10	0:0	8	dirnum
op	236:17	0:0	8	==
water	236:20	0:0	8	MAX_IMAGES
op	236:31	0:0	8	-
water	236:33	0:0	8	1
stmts	237:8	237:48	7	
water	237:8	0:0	8	dirnum
op	237:15	0:0	8	=
call	237:17	237:43	8	TIFFNumberOfDirectories
arg	237:41	237:43	9	in
water	237:41	0:0	10	in
op	237:45	0:0	8	-
water	237:47	0:0	8	1
water	237:48	0:0	8	;
if	238:6	239:27	6	(!TIFFSetDirectory (in ,( tdir_t ) dirnum ))
cond	238:10	238:46	7	!TIFFSetDirectory (in ,( tdir_t ) dirnum )
op	238:10	0:0	8	!
call	238:11	238:46	8	TIFFSetDirectory
arg	238:28	238:30	9	in
water	238:28	0:0	10	in
arg	238:32	238:46	9	(tdir_t)dirnum
water	238:32	0:0	10	(
water	238:33	0:0	10	tdir_t
water	238:39	0:0	10	)
water	238:40	0:0	10	dirnum
stmts	239:8	239:27	7	
water	239:8	0:0	8	end_of_input
op	239:21	0:0	8	=
water	239:23	0:0	8	TRUE
water	239:27	0:0	8	;
water	240:6	0:0	6	}
call	241:4	241:16	4	TIFFClose
arg	241:14	241:16	5	in
water	241:14	0:0	6	in
water	241:17	0:0	4	;
water	242:4	0:0	4	optind
op	242:10	0:0	4	++
water	242:12	0:0	4	;
water	243:4	0:0	4	}
if	245:2	246:24	2	(read_buff)
cond	245:6	245:6	3	read_buff
water	245:6	0:0	4	read_buff
stmts	246:4	246:24	3	
call	246:4	246:23	4	_TIFFfree
arg	246:14	246:23	5	read_buff
water	246:14	0:0	6	read_buff
water	246:24	0:0	4	;
if	247:2	248:24	2	(crop_buff)
cond	247:6	247:6	3	crop_buff
water	247:6	0:0	4	crop_buff
stmts	248:4	248:24	3	
call	248:4	248:23	4	_TIFFfree
arg	248:14	248:23	5	crop_buff
water	248:14	0:0	6	crop_buff
water	248:24	0:0	4	;
if	249:2	250:24	2	(sect_buff)
cond	249:6	249:6	3	sect_buff
water	249:6	0:0	4	sect_buff
stmts	250:4	250:24	3	
call	250:4	250:23	4	_TIFFfree
arg	250:14	250:23	5	sect_buff
water	250:14	0:0	6	sect_buff
water	250:24	0:0	4	;
for	252:2	253:37	2	(seg = 0 ;seg < crop . selections;seg ++)
forinit	252:7	252:14	3	seg = 0 ;
water	252:7	0:0	4	seg
op	252:11	0:0	4	=
water	252:13	0:0	4	0
water	252:14	0:0	4	;
cond	252:16	252:27	3	seg < crop . selections
water	252:16	0:0	4	seg
op	252:20	0:0	4	<
water	252:22	0:0	4	crop
op	252:26	0:0	4	.
water	252:27	0:0	4	selections
forexpr	252:39	252:42	3	seg ++
water	252:39	0:0	4	seg
op	252:42	0:0	4	++
stmts	253:4	253:37	3	
call	253:4	253:36	4	_TIFFfree
arg	253:15	253:36	5	seg_buffs[seg].buffer
water	253:15	0:0	6	seg_buffs
op	253:24	0:0	6	[
water	253:25	0:0	6	seg
op	253:28	0:0	6	]
op	253:29	0:0	6	.
water	253:30	0:0	6	buffer
water	253:37	0:0	4	;
if	254:2	263:4	2	(dump . format != DUMP_NONE)
cond	254:6	254:21	3	dump . format != DUMP_NONE
water	254:6	0:0	4	dump
op	254:10	0:0	4	.
water	254:11	0:0	4	format
op	254:18	0:0	4	!=
water	254:21	0:0	4	DUMP_NONE
stmts	255:4	263:4	3	
water	255:4	0:0	4	{
if	256:4	257:25	4	(dump . infile != NULL)
cond	256:8	256:23	5	dump . infile != NULL
water	256:8	0:0	6	dump
op	256:12	0:0	6	.
water	256:13	0:0	6	infile
op	256:20	0:0	6	!=
water	256:23	0:0	6	NULL
stmts	257:5	257:25	5	
call	257:5	257:24	6	fclose
arg	257:13	257:24	7	dump.infile
water	257:13	0:0	8	dump
op	257:17	0:0	8	.
water	257:18	0:0	8	infile
water	257:25	0:0	6	;
if	258:4	262:6	4	(dump . outfile != NULL)
cond	258:8	258:24	5	dump . outfile != NULL
water	258:8	0:0	6	dump
op	258:12	0:0	6	.
water	258:13	0:0	6	outfile
op	258:21	0:0	6	!=
water	258:24	0:0	6	NULL
stmts	259:6	262:6	5	
water	259:6	0:0	6	{
call	260:6	260:89	6	dump_info
arg	260:17	260:29	7	dump.outfile
water	260:17	0:0	8	dump
op	260:21	0:0	8	.
water	260:22	0:0	8	outfile
arg	260:31	260:42	7	dump.format
water	260:31	0:0	8	dump
op	260:35	0:0	8	.
water	260:36	0:0	8	format
arg	260:44	260:46	7	""
water	260:44	0:0	8	""
arg	260:48	260:70	7	"Completed run for %s"
water	260:48	0:0	8	"Completed run for %s"
arg	260:72	260:89	7	TIFFFileName(out)
call	260:72	260:88	8	TIFFFileName
arg	260:85	260:88	9	out
water	260:85	0:0	10	out
water	260:90	0:0	6	;
call	261:6	261:26	6	fclose
arg	261:14	261:26	7	dump.outfile
water	261:14	0:0	8	dump
op	261:18	0:0	8	.
water	261:19	0:0	8	outfile
water	261:27	0:0	6	;
water	262:6	0:0	6	}
water	263:4	0:0	4	}
call	264:2	264:15	2	TIFFClose
arg	264:12	264:15	3	out
water	264:12	0:0	4	out
water	264:16	0:0	2	;
return	265:2	265:12	2	(0)
water	265:9	0:0	3	(
water	265:10	0:0	3	0
water	265:11	0:0	3	)
