func	1:0	110:2	0	static int	combineSeparateTileSamples24bits
params	2:33	0:0	1	
param	2:34	2:45	2	uint8 *	in[]
param	2:47	2:57	2	uint8 *	out
param	2:59	2:70	2	uint32	cols
param	3:34	3:45	2	uint32	rows
param	3:47	3:64	2	uint32	imagewidth
param	4:34	4:43	2	uint32	tw
param	4:45	4:55	2	uint16	spp
param	4:57	4:67	2	uint16	bps
param	5:28	5:42	2	FILE *	dumpfile
param	5:44	5:54	2	int	format
param	5:56	5:65	2	int	level
stmnts	0:0	109:12	1	
decl	7:2	7:23	2	int	ready_bits
op	7:20	0:0	2	=
water	7:22	0:0	2	0
decl	8:2	8:33	2	uint32	src_rowsize
water	8:20	0:0	2	,
decl	8:2	8:33	2	uint32	dst_rowsize
decl	9:2	9:31	2	uint32	bit_offset
water	9:19	0:0	2	,
decl	9:2	9:31	2	uint32	src_offset
decl	10:2	10:44	2	uint32	row
water	10:12	0:0	2	,
decl	10:2	10:44	2	uint32	col
water	10:17	0:0	2	,
decl	10:2	10:44	2	uint32	src_byte
op	10:28	0:0	2	=
water	10:30	0:0	2	0
water	10:31	0:0	2	,
decl	10:2	10:44	2	uint32	src_bit
op	10:41	0:0	2	=
water	10:43	0:0	2	0
decl	11:2	11:36	2	uint32	maskbits
op	11:18	0:0	2	=
water	11:20	0:0	2	0
water	11:21	0:0	2	,
decl	11:2	11:36	2	uint32	matchbits
op	11:33	0:0	2	=
water	11:35	0:0	2	0
decl	12:2	12:29	2	uint32	buff1
op	12:15	0:0	2	=
water	12:17	0:0	2	0
water	12:18	0:0	2	,
decl	12:2	12:29	2	uint32	buff2
op	12:26	0:0	2	=
water	12:28	0:0	2	0
decl	13:2	13:37	2	uint8	bytebuff1
op	13:19	0:0	2	=
water	13:21	0:0	2	0
water	13:22	0:0	2	,
decl	13:2	13:37	2	uint8	bytebuff2
op	13:34	0:0	2	=
water	13:36	0:0	2	0
decl	14:2	14:13	2	tsample_t	s
decl	15:2	15:28	2	unsigned char	*src
op	15:21	0:0	2	=
water	15:23	0:0	2	in
op	15:25	0:0	2	[
water	15:26	0:0	2	0
op	15:27	0:0	2	]
decl	16:2	16:26	2	unsigned char	*dst
op	16:21	0:0	2	=
water	16:23	0:0	2	out
decl	17:2	17:26	2	char	action[8]
if	18:2	22:4	2	(( src == NULL ) || ( dst == NULL ))
cond	18:6	18:35	3	( src == NULL ) || ( dst == NULL )
water	18:6	0:0	4	(
water	18:7	0:0	4	src
op	18:11	0:0	4	==
water	18:14	0:0	4	NULL
water	18:18	0:0	4	)
op	18:20	0:0	4	||
water	18:23	0:0	4	(
water	18:24	0:0	4	dst
op	18:28	0:0	4	==
water	18:31	0:0	4	NULL
water	18:35	0:0	4	)
stmts	19:4	22:4	3	
water	19:4	0:0	4	{
call	20:4	20:81	4	TIFFError
arg	20:14	20:48	5	"combineSeparateTileSamples24bits"
water	20:14	0:0	6	"combineSeparateTileSamples24bits"
arg	20:49	20:81	5	"Invalid input or output buffer"
water	20:49	0:0	6	"Invalid input or output buffer"
water	20:82	0:0	4	;
return	21:4	21:14	4	(1)
water	21:11	0:0	5	(
water	21:12	0:0	5	1
water	21:13	0:0	5	)
water	22:4	0:0	4	}
water	23:2	0:0	2	src_rowsize
op	23:14	0:0	2	=
water	23:16	0:0	2	(
water	23:17	0:0	2	(
water	23:18	0:0	2	bps
op	23:22	0:0	2	*
water	23:24	0:0	2	tw
water	23:26	0:0	2	)
op	23:28	0:0	2	+
water	23:30	0:0	2	7
water	23:31	0:0	2	)
op	23:33	0:0	2	/
water	23:35	0:0	2	8
water	23:36	0:0	2	;
water	24:2	0:0	2	dst_rowsize
op	24:14	0:0	2	=
water	24:16	0:0	2	(
water	24:17	0:0	2	(
water	24:18	0:0	2	imagewidth
op	24:29	0:0	2	*
water	24:31	0:0	2	bps
op	24:35	0:0	2	*
water	24:37	0:0	2	spp
water	24:40	0:0	2	)
op	24:42	0:0	2	+
water	24:44	0:0	2	7
water	24:45	0:0	2	)
op	24:47	0:0	2	/
water	24:49	0:0	2	8
water	24:50	0:0	2	;
water	25:2	0:0	2	maskbits
op	25:11	0:0	2	=
water	25:14	0:0	2	(
water	25:15	0:0	2	uint32
water	25:21	0:0	2	)
op	25:22	0:0	2	-
water	25:23	0:0	2	1
op	25:25	0:0	2	>>
water	25:28	0:0	2	(
water	25:30	0:0	2	32
op	25:33	0:0	2	-
water	25:35	0:0	2	bps
water	25:38	0:0	2	)
water	25:39	0:0	2	;
for	26:2	108:4	2	(row = 0 ;row < rows;row ++)
forinit	26:7	26:14	3	row = 0 ;
water	26:7	0:0	4	row
op	26:11	0:0	4	=
water	26:13	0:0	4	0
water	26:14	0:0	4	;
cond	26:16	26:22	3	row < rows
water	26:16	0:0	4	row
op	26:20	0:0	4	<
water	26:22	0:0	4	rows
forexpr	26:28	26:31	3	row ++
water	26:28	0:0	4	row
op	26:31	0:0	4	++
stmts	27:4	108:4	3	
water	27:4	0:0	4	{
water	28:4	0:0	4	ready_bits
op	28:15	0:0	4	=
water	28:17	0:0	4	0
water	28:18	0:0	4	;
water	29:4	0:0	4	buff1
op	29:10	0:0	4	=
water	29:12	0:0	4	buff2
op	29:18	0:0	4	=
water	29:20	0:0	4	0
water	29:21	0:0	4	;
water	30:4	0:0	4	dst
op	30:8	0:0	4	=
water	30:10	0:0	4	out
op	30:14	0:0	4	+
water	30:16	0:0	4	(
water	30:17	0:0	4	row
op	30:21	0:0	4	*
water	30:23	0:0	4	dst_rowsize
water	30:34	0:0	4	)
water	30:35	0:0	4	;
water	31:4	0:0	4	src_offset
op	31:15	0:0	4	=
water	31:17	0:0	4	row
op	31:21	0:0	4	*
water	31:23	0:0	4	src_rowsize
water	31:34	0:0	4	;
for	32:4	80:6	4	(col = 0 ;col < cols;col ++)
forinit	32:9	32:16	5	col = 0 ;
water	32:9	0:0	6	col
op	32:13	0:0	6	=
water	32:15	0:0	6	0
water	32:16	0:0	6	;
cond	32:18	32:24	5	col < cols
water	32:18	0:0	6	col
op	32:22	0:0	6	<
water	32:24	0:0	6	cols
forexpr	32:30	32:33	5	col ++
water	32:30	0:0	6	col
op	32:33	0:0	6	++
stmts	33:6	80:6	5	
water	33:6	0:0	6	{
water	35:6	0:0	6	bit_offset
op	35:17	0:0	6	=
water	35:19	0:0	6	col
op	35:23	0:0	6	*
water	35:25	0:0	6	bps
water	35:28	0:0	6	;
water	36:6	0:0	6	src_byte
op	36:15	0:0	6	=
water	36:17	0:0	6	bit_offset
op	36:28	0:0	6	/
water	36:30	0:0	6	8
water	36:31	0:0	6	;
water	37:6	0:0	6	src_bit
op	37:15	0:0	6	=
water	37:17	0:0	6	bit_offset
op	37:28	0:0	6	%
water	37:30	0:0	6	8
water	37:31	0:0	6	;
water	38:6	0:0	6	matchbits
op	38:16	0:0	6	=
water	38:18	0:0	6	maskbits
op	38:27	0:0	6	<<
water	38:30	0:0	6	(
water	38:31	0:0	6	32
op	38:34	0:0	6	-
water	38:36	0:0	6	src_bit
op	38:44	0:0	6	-
water	38:46	0:0	6	bps
water	38:49	0:0	6	)
water	38:50	0:0	6	;
for	39:6	79:1	6	(s = 0 ;( s < spp ) && ( s < MAX_SAMPLES );s ++)
forinit	39:11	39:16	7	s = 0 ;
water	39:11	0:0	8	s
op	39:13	0:0	8	=
water	39:15	0:0	8	0
water	39:16	0:0	8	;
cond	39:18	39:47	7	( s < spp ) && ( s < MAX_SAMPLES )
water	39:18	0:0	8	(
water	39:19	0:0	8	s
op	39:21	0:0	8	<
water	39:23	0:0	8	spp
water	39:26	0:0	8	)
op	39:28	0:0	8	&&
water	39:31	0:0	8	(
water	39:32	0:0	8	s
op	39:34	0:0	8	<
water	39:36	0:0	8	MAX_SAMPLES
water	39:47	0:0	8	)
forexpr	39:50	39:51	7	s ++
water	39:50	0:0	8	s
op	39:51	0:0	8	++
stmts	40:8	79:1	7	
water	40:8	0:0	8	{
water	41:1	0:0	8	src
op	41:5	0:0	8	=
water	41:7	0:0	8	in
op	41:9	0:0	8	[
water	41:10	0:0	8	s
op	41:11	0:0	8	]
op	41:13	0:0	8	+
water	41:15	0:0	8	src_offset
op	41:26	0:0	8	+
water	41:28	0:0	8	src_byte
water	41:36	0:0	8	;
if	42:8	43:67	8	(little_endian)
cond	42:12	42:12	9	little_endian
water	42:12	0:0	10	little_endian
stmts	43:3	43:67	9	
water	43:3	0:0	10	buff1
op	43:9	0:0	10	=
water	43:11	0:0	10	(
water	43:12	0:0	10	src
op	43:15	0:0	10	[
water	43:16	0:0	10	0
op	43:17	0:0	10	]
op	43:19	0:0	10	<<
water	43:22	0:0	10	24
water	43:24	0:0	10	)
op	43:26	0:0	10	|
water	43:28	0:0	10	(
water	43:29	0:0	10	src
op	43:32	0:0	10	[
water	43:33	0:0	10	1
op	43:34	0:0	10	]
op	43:36	0:0	10	<<
water	43:39	0:0	10	16
water	43:41	0:0	10	)
op	43:43	0:0	10	|
water	43:45	0:0	10	(
water	43:46	0:0	10	src
op	43:49	0:0	10	[
water	43:50	0:0	10	2
op	43:51	0:0	10	]
op	43:53	0:0	10	<<
water	43:56	0:0	10	8
water	43:57	0:0	10	)
op	43:59	0:0	10	|
water	43:61	0:0	10	src
op	43:64	0:0	10	[
water	43:65	0:0	10	3
op	43:66	0:0	10	]
water	43:67	0:0	10	;
else	44:8	45:67	8
stmts	45:3	45:67	9	
water	45:3	0:0	10	buff1
op	45:9	0:0	10	=
water	45:11	0:0	10	(
water	45:12	0:0	10	src
op	45:15	0:0	10	[
water	45:16	0:0	10	3
op	45:17	0:0	10	]
op	45:19	0:0	10	<<
water	45:22	0:0	10	24
water	45:24	0:0	10	)
op	45:26	0:0	10	|
water	45:28	0:0	10	(
water	45:29	0:0	10	src
op	45:32	0:0	10	[
water	45:33	0:0	10	2
op	45:34	0:0	10	]
op	45:36	0:0	10	<<
water	45:39	0:0	10	16
water	45:41	0:0	10	)
op	45:43	0:0	10	|
water	45:45	0:0	10	(
water	45:46	0:0	10	src
op	45:49	0:0	10	[
water	45:50	0:0	10	1
op	45:51	0:0	10	]
op	45:53	0:0	10	<<
water	45:56	0:0	10	8
water	45:57	0:0	10	)
op	45:59	0:0	10	|
water	45:61	0:0	10	src
op	45:64	0:0	10	[
water	45:65	0:0	10	0
op	45:66	0:0	10	]
water	45:67	0:0	10	;
water	46:1	0:0	8	buff1
op	46:7	0:0	8	=
water	46:9	0:0	8	(
water	46:10	0:0	8	buff1
op	46:16	0:0	8	&
water	46:18	0:0	8	matchbits
water	46:27	0:0	8	)
op	46:29	0:0	8	<<
water	46:32	0:0	8	(
water	46:33	0:0	8	src_bit
water	46:40	0:0	8	)
water	46:41	0:0	8	;
if	48:1	58:3	8	(ready_bits >= 16)
cond	48:5	48:19	9	ready_bits >= 16
water	48:5	0:0	10	ready_bits
op	48:16	0:0	10	>=
water	48:19	0:0	10	16
stmts	49:3	58:3	9	
water	49:3	0:0	10	{
water	50:5	0:0	10	bytebuff1
op	50:15	0:0	10	=
water	50:17	0:0	10	(
water	50:18	0:0	10	buff2
op	50:24	0:0	10	>>
water	50:27	0:0	10	24
water	50:29	0:0	10	)
water	50:30	0:0	10	;
op	51:5	0:0	10	*
water	51:6	0:0	10	dst
op	51:9	0:0	10	++
op	51:12	0:0	10	=
water	51:14	0:0	10	bytebuff1
water	51:23	0:0	10	;
water	52:5	0:0	10	bytebuff2
op	52:15	0:0	10	=
water	52:17	0:0	10	(
water	52:18	0:0	10	buff2
op	52:24	0:0	10	>>
water	52:27	0:0	10	16
water	52:29	0:0	10	)
water	52:30	0:0	10	;
op	53:5	0:0	10	*
water	53:6	0:0	10	dst
op	53:9	0:0	10	++
op	53:12	0:0	10	=
water	53:14	0:0	10	bytebuff2
water	53:23	0:0	10	;
water	54:5	0:0	10	ready_bits
op	54:16	0:0	10	-=
water	54:19	0:0	10	16
water	54:21	0:0	10	;
water	56:5	0:0	10	buff2
op	56:11	0:0	10	=
water	56:13	0:0	10	(
water	56:14	0:0	10	(
water	56:15	0:0	10	buff2
op	56:21	0:0	10	<<
water	56:24	0:0	10	16
water	56:26	0:0	10	)
op	56:28	0:0	10	|
water	56:30	0:0	10	(
water	56:31	0:0	10	buff1
op	56:37	0:0	10	>>
water	56:40	0:0	10	ready_bits
water	56:50	0:0	10	)
water	56:51	0:0	10	)
water	56:52	0:0	10	;
call	57:5	57:28	10	strcpy
arg	57:13	57:19	11	action
water	57:13	0:0	12	action
arg	57:21	57:28	11	"Flush"
water	57:21	0:0	12	"Flush"
water	57:29	0:0	10	;
water	58:3	0:0	10	}
else	59:1	64:3	8
stmts	60:3	64:3	9	
water	60:3	0:0	10	{
water	61:5	0:0	10	bytebuff1
op	61:15	0:0	10	=
water	61:17	0:0	10	bytebuff2
op	61:27	0:0	10	=
water	61:29	0:0	10	0
water	61:30	0:0	10	;
water	62:5	0:0	10	buff2
op	62:11	0:0	10	=
water	62:13	0:0	10	(
water	62:14	0:0	10	buff2
op	62:20	0:0	10	|
water	62:22	0:0	10	(
water	62:23	0:0	10	buff1
op	62:29	0:0	10	>>
water	62:32	0:0	10	ready_bits
water	62:42	0:0	10	)
water	62:43	0:0	10	)
water	62:44	0:0	10	;
call	63:5	63:29	10	strcpy
arg	63:13	63:19	11	action
water	63:13	0:0	12	action
arg	63:21	63:29	11	"Update"
water	63:21	0:0	12	"Update"
water	63:30	0:0	10	;
water	64:3	0:0	10	}
water	65:1	0:0	8	ready_bits
op	65:12	0:0	8	+=
water	65:15	0:0	8	bps
water	65:18	0:0	8	;
if	66:1	78:3	8	(( dumpfile != NULL ) && ( level == 3 ))
cond	66:5	66:38	9	( dumpfile != NULL ) && ( level == 3 )
water	66:5	0:0	10	(
water	66:6	0:0	10	dumpfile
op	66:15	0:0	10	!=
water	66:18	0:0	10	NULL
water	66:22	0:0	10	)
op	66:24	0:0	10	&&
water	66:27	0:0	10	(
water	66:28	0:0	10	level
op	66:34	0:0	10	==
water	66:37	0:0	10	3
water	66:38	0:0	10	)
stmts	67:3	78:3	9	
water	67:3	0:0	10	{
call	68:3	70:58	10	dump_info
arg	68:14	68:22	11	dumpfile
water	68:14	0:0	12	dumpfile
arg	68:24	68:30	11	format
water	68:24	0:0	12	format
arg	68:32	68:34	11	""
water	68:32	0:0	12	""
arg	69:9	69:92	11	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
water	69:9	0:0	12	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
arg	70:9	70:16	11	row+1
water	70:9	0:0	12	row
op	70:13	0:0	12	+
water	70:15	0:0	12	1
arg	70:18	70:25	11	col+1
water	70:18	0:0	12	col
op	70:22	0:0	12	+
water	70:24	0:0	12	1
arg	70:27	70:28	11	s
water	70:27	0:0	12	s
arg	70:30	70:38	11	src_byte
water	70:30	0:0	12	src_byte
arg	70:40	70:47	11	src_bit
water	70:40	0:0	12	src_bit
arg	70:49	70:58	11	dst-out
water	70:49	0:0	12	dst
op	70:53	0:0	12	-
water	70:55	0:0	12	out
water	70:59	0:0	10	;
call	71:3	71:56	10	dump_long
arg	71:14	71:22	11	dumpfile
water	71:14	0:0	12	dumpfile
arg	71:24	71:30	11	format
water	71:24	0:0	12	format
arg	71:32	71:45	11	"Match bits "
water	71:32	0:0	12	"Match bits "
arg	71:47	71:56	11	matchbits
water	71:47	0:0	12	matchbits
water	71:57	0:0	10	;
call	72:3	72:53	10	dump_data
arg	72:14	72:22	11	dumpfile
water	72:14	0:0	12	dumpfile
arg	72:24	72:30	11	format
water	72:24	0:0	12	format
arg	72:32	72:45	11	"Src   bits "
water	72:32	0:0	12	"Src   bits "
arg	72:47	72:50	11	src
water	72:47	0:0	12	src
arg	72:52	72:53	11	4
water	72:52	0:0	12	4
water	72:54	0:0	10	;
call	73:3	73:52	10	dump_long
arg	73:14	73:22	11	dumpfile
water	73:14	0:0	12	dumpfile
arg	73:24	73:30	11	format
water	73:24	0:0	12	format
arg	73:32	73:45	11	"Buff1 bits "
water	73:32	0:0	12	"Buff1 bits "
arg	73:47	73:52	11	buff1
water	73:47	0:0	12	buff1
water	73:53	0:0	10	;
call	74:3	74:52	10	dump_long
arg	74:14	74:22	11	dumpfile
water	74:14	0:0	12	dumpfile
arg	74:24	74:30	11	format
water	74:24	0:0	12	format
arg	74:32	74:45	11	"Buff2 bits "
water	74:32	0:0	12	"Buff2 bits "
arg	74:47	74:52	11	buff2
water	74:47	0:0	12	buff2
water	74:53	0:0	10	;
call	75:3	75:56	10	dump_byte
arg	75:14	75:22	11	dumpfile
water	75:14	0:0	12	dumpfile
arg	75:24	75:30	11	format
water	75:24	0:0	12	format
arg	75:32	75:45	11	"Write bits1"
water	75:32	0:0	12	"Write bits1"
arg	75:47	75:56	11	bytebuff1
water	75:47	0:0	12	bytebuff1
water	75:57	0:0	10	;
call	76:3	76:56	10	dump_byte
arg	76:14	76:22	11	dumpfile
water	76:14	0:0	12	dumpfile
arg	76:24	76:30	11	format
water	76:24	0:0	12	format
arg	76:32	76:45	11	"Write bits2"
water	76:32	0:0	12	"Write bits2"
arg	76:47	76:56	11	bytebuff2
water	76:47	0:0	12	bytebuff2
water	76:57	0:0	10	;
call	77:3	77:77	10	dump_info
arg	77:14	77:22	11	dumpfile
water	77:14	0:0	12	dumpfile
arg	77:24	77:30	11	format
water	77:24	0:0	12	format
arg	77:32	77:34	11	""
water	77:32	0:0	12	""
arg	77:35	77:57	11	"Ready bits:   %d, %s"
water	77:35	0:0	12	"Ready bits:   %d, %s"
arg	77:59	77:69	11	ready_bits
water	77:59	0:0	12	ready_bits
arg	77:71	77:77	11	action
water	77:71	0:0	12	action
water	77:78	0:0	10	;
water	78:3	0:0	10	}
water	79:1	0:0	8	}
water	80:6	0:0	6	}
while	82:4	89:6	4	(ready_bits > 0)
cond	82:11	82:24	5	ready_bits > 0
water	82:11	0:0	6	ready_bits
op	82:22	0:0	6	>
water	82:24	0:0	6	0
stmts	83:6	89:6	5	
water	83:6	0:0	6	{
water	84:1	0:0	6	bytebuff1
op	84:11	0:0	6	=
water	84:13	0:0	6	(
water	84:14	0:0	6	buff2
op	84:20	0:0	6	>>
water	84:23	0:0	6	24
water	84:25	0:0	6	)
water	84:26	0:0	6	;
op	85:1	0:0	6	*
water	85:2	0:0	6	dst
op	85:5	0:0	6	++
op	85:8	0:0	6	=
water	85:10	0:0	6	bytebuff1
water	85:19	0:0	6	;
water	86:1	0:0	6	buff2
op	86:7	0:0	6	=
water	86:9	0:0	6	(
water	86:10	0:0	6	buff2
op	86:16	0:0	6	<<
water	86:19	0:0	6	8
water	86:20	0:0	6	)
water	86:21	0:0	6	;
water	87:1	0:0	6	bytebuff2
op	87:11	0:0	6	=
water	87:13	0:0	6	bytebuff1
water	87:22	0:0	6	;
water	88:1	0:0	6	ready_bits
op	88:12	0:0	6	-=
water	88:15	0:0	6	8
water	88:16	0:0	6	;
water	89:6	0:0	6	}
if	90:4	102:6	4	(( dumpfile != NULL ) && ( level == 3 ))
cond	90:8	90:41	5	( dumpfile != NULL ) && ( level == 3 )
water	90:8	0:0	6	(
water	90:9	0:0	6	dumpfile
op	90:18	0:0	6	!=
water	90:21	0:0	6	NULL
water	90:25	0:0	6	)
op	90:27	0:0	6	&&
water	90:30	0:0	6	(
water	90:31	0:0	6	level
op	90:37	0:0	6	==
water	90:40	0:0	6	3
water	90:41	0:0	6	)
stmts	91:6	102:6	5	
water	91:6	0:0	6	{
call	92:6	94:51	6	dump_info
arg	92:17	92:25	7	dumpfile
water	92:17	0:0	8	dumpfile
arg	92:27	92:33	7	format
water	92:27	0:0	8	format
arg	92:35	92:37	7	""
water	92:35	0:0	8	""
arg	93:5	93:76	7	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
water	93:5	0:0	8	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
arg	94:5	94:12	7	row+1
water	94:5	0:0	8	row
op	94:9	0:0	8	+
water	94:11	0:0	8	1
arg	94:14	94:21	7	col+1
water	94:14	0:0	8	col
op	94:18	0:0	8	+
water	94:20	0:0	8	1
arg	94:23	94:31	7	src_byte
water	94:23	0:0	8	src_byte
arg	94:33	94:40	7	src_bit
water	94:33	0:0	8	src_bit
arg	94:42	94:51	7	dst-out
water	94:42	0:0	8	dst
op	94:46	0:0	8	-
water	94:48	0:0	8	out
water	94:52	0:0	6	;
call	95:6	95:59	6	dump_long
arg	95:17	95:25	7	dumpfile
water	95:17	0:0	8	dumpfile
arg	95:27	95:33	7	format
water	95:27	0:0	8	format
arg	95:35	95:48	7	"Match bits "
water	95:35	0:0	8	"Match bits "
arg	95:50	95:59	7	matchbits
water	95:50	0:0	8	matchbits
water	95:60	0:0	6	;
call	96:6	96:56	6	dump_data
arg	96:17	96:25	7	dumpfile
water	96:17	0:0	8	dumpfile
arg	96:27	96:33	7	format
water	96:27	0:0	8	format
arg	96:35	96:48	7	"Src   bits "
water	96:35	0:0	8	"Src   bits "
arg	96:50	96:53	7	src
water	96:50	0:0	8	src
arg	96:55	96:56	7	4
water	96:55	0:0	8	4
water	96:57	0:0	6	;
call	97:6	97:55	6	dump_long
arg	97:17	97:25	7	dumpfile
water	97:17	0:0	8	dumpfile
arg	97:27	97:33	7	format
water	97:27	0:0	8	format
arg	97:35	97:48	7	"Buff1 bits "
water	97:35	0:0	8	"Buff1 bits "
arg	97:50	97:55	7	buff1
water	97:50	0:0	8	buff1
water	97:56	0:0	6	;
call	98:6	98:55	6	dump_long
arg	98:17	98:25	7	dumpfile
water	98:17	0:0	8	dumpfile
arg	98:27	98:33	7	format
water	98:27	0:0	8	format
arg	98:35	98:48	7	"Buff2 bits "
water	98:35	0:0	8	"Buff2 bits "
arg	98:50	98:55	7	buff2
water	98:50	0:0	8	buff2
water	98:56	0:0	6	;
call	99:6	99:59	6	dump_byte
arg	99:17	99:25	7	dumpfile
water	99:17	0:0	8	dumpfile
arg	99:27	99:33	7	format
water	99:27	0:0	8	format
arg	99:35	99:48	7	"Write bits1"
water	99:35	0:0	8	"Write bits1"
arg	99:50	99:59	7	bytebuff1
water	99:50	0:0	8	bytebuff1
water	99:60	0:0	6	;
call	100:6	100:59	6	dump_byte
arg	100:17	100:25	7	dumpfile
water	100:17	0:0	8	dumpfile
arg	100:27	100:33	7	format
water	100:27	0:0	8	format
arg	100:35	100:48	7	"Write bits2"
water	100:35	0:0	8	"Write bits2"
arg	100:50	100:59	7	bytebuff2
water	100:50	0:0	8	bytebuff2
water	100:60	0:0	6	;
call	101:6	101:69	6	dump_info
arg	101:17	101:25	7	dumpfile
water	101:17	0:0	8	dumpfile
arg	101:27	101:33	7	format
water	101:27	0:0	8	format
arg	101:35	101:37	7	""
water	101:35	0:0	8	""
arg	101:39	101:57	7	"Ready bits:  %2d"
water	101:39	0:0	8	"Ready bits:  %2d"
arg	101:59	101:69	7	ready_bits
water	101:59	0:0	8	ready_bits
water	101:70	0:0	6	;
water	102:6	0:0	6	}
if	103:4	107:6	4	(( dumpfile != NULL ) && ( level == 2 ))
cond	103:8	103:41	5	( dumpfile != NULL ) && ( level == 2 )
water	103:8	0:0	6	(
water	103:9	0:0	6	dumpfile
op	103:18	0:0	6	!=
water	103:21	0:0	6	NULL
water	103:25	0:0	6	)
op	103:27	0:0	6	&&
water	103:30	0:0	6	(
water	103:31	0:0	6	level
op	103:37	0:0	6	==
water	103:40	0:0	6	2
water	103:41	0:0	6	)
stmts	104:6	107:6	5	
water	104:6	0:0	6	{
call	105:6	105:83	6	dump_info
arg	105:17	105:25	7	dumpfile
water	105:17	0:0	8	dumpfile
arg	105:27	105:33	7	format
water	105:27	0:0	8	format
arg	105:35	105:69	7	"combineSeparateTileSamples24bits"
water	105:35	0:0	8	"combineSeparateTileSamples24bits"
arg	105:70	105:83	7	"Output data"
water	105:70	0:0	8	"Output data"
water	105:84	0:0	6	;
call	106:6	106:82	6	dump_buffer
arg	106:18	106:26	7	dumpfile
water	106:18	0:0	8	dumpfile
arg	106:28	106:34	7	format
water	106:28	0:0	8	format
arg	106:36	106:37	7	1
water	106:36	0:0	8	1
arg	106:39	106:50	7	dst_rowsize
water	106:39	0:0	8	dst_rowsize
arg	106:52	106:55	7	row
water	106:52	0:0	8	row
arg	106:57	106:82	7	out+(row*dst_rowsize)
water	106:57	0:0	8	out
op	106:61	0:0	8	+
water	106:63	0:0	8	(
water	106:64	0:0	8	row
op	106:68	0:0	8	*
water	106:70	0:0	8	dst_rowsize
water	106:81	0:0	8	)
water	106:83	0:0	6	;
water	107:6	0:0	6	}
water	108:4	0:0	4	}
return	109:2	109:12	2	(0)
water	109:9	0:0	3	(
water	109:10	0:0	3	0
water	109:11	0:0	3	)
