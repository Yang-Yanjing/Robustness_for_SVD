func	1:0	71:2	0	static int	extractContigSamplesToBuffer
params	2:28	0:0	1	
param	2:29	2:39	2	uint8 *	out
param	2:41	2:50	2	uint8 *	in
param	2:52	2:63	2	uint32	rows
param	2:65	2:76	2	uint32	cols
param	3:24	3:40	2	tsample_t	sample
param	3:42	3:52	2	uint16	spp
param	3:54	3:64	2	uint16	bps
param	4:29	4:51	2	struct dump_opts *	dump
stmnts	0:0	70:12	1	
decl	6:2	6:55	2	int	shift_width
water	6:20	0:0	2	,
decl	6:2	6:55	2	int	bytes_per_sample
water	6:38	0:0	2	,
decl	6:2	6:55	2	int	bytes_per_pixel
decl	7:2	7:52	2	uint32	src_rowsize
water	7:20	0:0	2	,
decl	7:2	7:52	2	uint32	src_offset
water	7:32	0:0	2	,
decl	7:2	7:52	2	uint32	row
water	7:37	0:0	2	,
decl	7:2	7:52	2	uint32	first_col
op	7:49	0:0	2	=
water	7:51	0:0	2	0
decl	8:2	8:32	2	uint32	dst_rowsize
water	8:20	0:0	2	,
decl	8:2	8:32	2	uint32	dst_offset
decl	9:2	9:21	2	tsample_t	count
op	9:18	0:0	2	=
water	9:20	0:0	2	1
decl	10:2	10:18	2	uint8	*src
water	10:12	0:0	2	,
decl	10:2	10:18	2	uint8	*dst
water	11:2	0:0	2	bytes_per_sample
op	11:19	0:0	2	=
water	11:21	0:0	2	(
water	11:22	0:0	2	bps
op	11:26	0:0	2	+
water	11:28	0:0	2	7
water	11:29	0:0	2	)
op	11:31	0:0	2	/
water	11:33	0:0	2	8
water	11:34	0:0	2	;
water	12:2	0:0	2	bytes_per_pixel
op	12:19	0:0	2	=
water	12:21	0:0	2	(
water	12:22	0:0	2	(
water	12:23	0:0	2	bps
op	12:27	0:0	2	*
water	12:29	0:0	2	spp
water	12:32	0:0	2	)
op	12:34	0:0	2	+
water	12:36	0:0	2	7
water	12:37	0:0	2	)
op	12:39	0:0	2	/
water	12:41	0:0	2	8
water	12:42	0:0	2	;
if	13:2	14:19	2	(( bps % 8 ) == 0)
cond	13:6	13:19	3	( bps % 8 ) == 0
water	13:6	0:0	4	(
water	13:7	0:0	4	bps
op	13:11	0:0	4	%
water	13:13	0:0	4	8
water	13:14	0:0	4	)
op	13:16	0:0	4	==
water	13:19	0:0	4	0
stmts	14:4	14:19	3	
water	14:4	0:0	4	shift_width
op	14:16	0:0	4	=
water	14:18	0:0	4	0
water	14:19	0:0	4	;
else	15:2	21:4	2
stmts	16:4	21:4	3	
water	16:4	0:0	4	{
if	17:4	18:35	4	(bytes_per_pixel < ( bytes_per_sample + 1 ))
cond	17:8	17:47	5	bytes_per_pixel < ( bytes_per_sample + 1 )
water	17:8	0:0	6	bytes_per_pixel
op	17:24	0:0	6	<
water	17:26	0:0	6	(
water	17:27	0:0	6	bytes_per_sample
op	17:44	0:0	6	+
water	17:46	0:0	6	1
water	17:47	0:0	6	)
stmts	18:6	18:35	5	
water	18:6	0:0	6	shift_width
op	18:18	0:0	6	=
water	18:20	0:0	6	bytes_per_pixel
water	18:35	0:0	6	;
else	19:4	20:40	4
stmts	20:6	20:40	5	
water	20:6	0:0	6	shift_width
op	20:18	0:0	6	=
water	20:20	0:0	6	bytes_per_sample
op	20:37	0:0	6	+
water	20:39	0:0	6	1
water	20:40	0:0	6	;
water	21:4	0:0	4	}
water	22:2	0:0	2	src_rowsize
op	22:14	0:0	2	=
water	22:16	0:0	2	(
water	22:17	0:0	2	(
water	22:18	0:0	2	bps
op	22:22	0:0	2	*
water	22:24	0:0	2	spp
op	22:28	0:0	2	*
water	22:30	0:0	2	cols
water	22:34	0:0	2	)
op	22:36	0:0	2	+
water	22:38	0:0	2	7
water	22:39	0:0	2	)
op	22:41	0:0	2	/
water	22:43	0:0	2	8
water	22:44	0:0	2	;
water	23:2	0:0	2	dst_rowsize
op	23:14	0:0	2	=
water	23:16	0:0	2	(
water	23:17	0:0	2	(
water	23:18	0:0	2	bps
op	23:22	0:0	2	*
water	23:24	0:0	2	cols
water	23:28	0:0	2	)
op	23:30	0:0	2	+
water	23:32	0:0	2	7
water	23:33	0:0	2	)
op	23:35	0:0	2	/
water	23:37	0:0	2	8
water	23:38	0:0	2	;
if	24:2	28:4	2	(( dump -> outfile != NULL ) && ( dump -> level == 4 ))
cond	24:6	24:50	3	( dump -> outfile != NULL ) && ( dump -> level == 4 )
water	24:6	0:0	4	(
water	24:7	0:0	4	dump
op	24:11	0:0	4	->
water	24:13	0:0	4	outfile
op	24:21	0:0	4	!=
water	24:24	0:0	4	NULL
water	24:28	0:0	4	)
op	24:30	0:0	4	&&
water	24:33	0:0	4	(
water	24:34	0:0	4	dump
op	24:38	0:0	4	->
water	24:40	0:0	4	level
op	24:46	0:0	4	==
water	24:49	0:0	4	4
water	24:50	0:0	4	)
stmts	25:4	28:4	3	
water	25:4	0:0	4	{
call	26:4	27:58	4	dump_info
arg	26:16	26:29	5	dump->outfile
water	26:16	0:0	6	dump
op	26:20	0:0	6	->
water	26:22	0:0	6	outfile
arg	26:31	26:43	5	dump->format
water	26:31	0:0	6	dump
op	26:35	0:0	6	->
water	26:37	0:0	6	format
arg	26:45	26:75	5	"extractContigSamplesToBuffer"
water	26:45	0:0	6	"extractContigSamplesToBuffer"
arg	27:16	27:36	5	"Sample %d, %d rows"
water	27:16	0:0	6	"Sample %d, %d rows"
arg	27:38	27:48	5	sample+1
water	27:38	0:0	6	sample
op	27:45	0:0	6	+
water	27:47	0:0	6	1
arg	27:50	27:58	5	rows+1
water	27:50	0:0	6	rows
op	27:55	0:0	6	+
water	27:57	0:0	6	1
water	27:59	0:0	4	;
water	28:4	0:0	4	}
for	29:2	69:4	2	(row = 0 ;row < rows;row ++)
forinit	29:7	29:14	3	row = 0 ;
water	29:7	0:0	4	row
op	29:11	0:0	4	=
water	29:13	0:0	4	0
water	29:14	0:0	4	;
cond	29:16	29:22	3	row < rows
water	29:16	0:0	4	row
op	29:20	0:0	4	<
water	29:22	0:0	4	rows
forexpr	29:28	29:31	3	row ++
water	29:28	0:0	4	row
op	29:31	0:0	4	++
stmts	30:4	69:4	3	
water	30:4	0:0	4	{
water	31:4	0:0	4	src_offset
op	31:15	0:0	4	=
water	31:17	0:0	4	row
op	31:21	0:0	4	*
water	31:23	0:0	4	src_rowsize
water	31:34	0:0	4	;
water	32:4	0:0	4	dst_offset
op	32:15	0:0	4	=
water	32:17	0:0	4	row
op	32:21	0:0	4	*
water	32:23	0:0	4	dst_rowsize
water	32:34	0:0	4	;
water	33:4	0:0	4	src
op	33:8	0:0	4	=
water	33:10	0:0	4	in
op	33:13	0:0	4	+
water	33:15	0:0	4	src_offset
water	33:25	0:0	4	;
water	34:4	0:0	4	dst
op	34:8	0:0	4	=
water	34:10	0:0	4	out
op	34:14	0:0	4	+
water	34:16	0:0	4	dst_offset
water	34:26	0:0	4	;
switch	36:4	66:6	4	(shift_width)
cond	36:12	36:12	5	shift_width
water	36:12	0:0	6	shift_width
stmts	37:6	66:6	5	
water	37:6	0:0	6	{
label	38:6	38:12	6	case 0 :
if	38:14	40:26	6	(extractContigSamplesBytes (src ,dst ,cols ,sample ,spp ,bps ,count ,first_col ,cols ))
cond	38:18	39:78	7	extractContigSamplesBytes (src ,dst ,cols ,sample ,spp ,bps ,count ,first_col ,cols )
call	38:18	39:78	8	extractContigSamplesBytes
arg	38:45	38:48	9	src
water	38:45	0:0	10	src
arg	38:50	38:53	9	dst
water	38:50	0:0	10	dst
arg	38:55	38:59	9	cols
water	38:55	0:0	10	cols
arg	38:61	38:67	9	sample
water	38:61	0:0	10	sample
arg	39:45	39:48	9	spp
water	39:45	0:0	10	spp
arg	39:50	39:53	9	bps
water	39:50	0:0	10	bps
arg	39:56	39:61	9	count
water	39:56	0:0	10	count
arg	39:63	39:72	9	first_col
water	39:63	0:0	10	first_col
arg	39:74	39:78	9	cols
water	39:74	0:0	10	cols
stmts	40:16	40:26	7	
return	40:16	40:26	8	(1)
water	40:23	0:0	9	(
water	40:24	0:0	9	1
water	40:25	0:0	9	)
break	41:8	41:13	6	
label	42:6	42:12	6	case 1 :
if	42:14	48:2	6	(bps == 1)
cond	42:18	42:25	7	bps == 1
water	42:18	0:0	8	bps
op	42:22	0:0	8	==
water	42:25	0:0	8	1
stmts	43:16	48:2	7	
water	43:16	0:0	8	{
if	44:16	46:21	8	(extractContigSamples8bits (src ,dst ,cols ,sample ,spp ,bps ,count ,first_col ,cols ))
cond	44:20	45:79	9	extractContigSamples8bits (src ,dst ,cols ,sample ,spp ,bps ,count ,first_col ,cols )
call	44:20	45:79	10	extractContigSamples8bits
arg	44:47	44:50	11	src
water	44:47	0:0	12	src
arg	44:52	44:55	11	dst
water	44:52	0:0	12	dst
arg	44:57	44:61	11	cols
water	44:57	0:0	12	cols
arg	44:63	44:69	11	sample
water	44:63	0:0	12	sample
arg	45:47	45:50	11	spp
water	45:47	0:0	12	spp
arg	45:52	45:55	11	bps
water	45:52	0:0	12	bps
arg	45:57	45:62	11	count
water	45:57	0:0	12	count
arg	45:64	45:73	11	first_col
water	45:64	0:0	12	first_col
arg	45:75	45:79	11	cols
water	45:75	0:0	12	cols
stmts	46:11	46:21	9	
return	46:11	46:21	10	(1)
water	46:18	0:0	11	(
water	46:19	0:0	11	1
water	46:20	0:0	11	)
break	47:9	47:14	8	
water	48:2	0:0	8	}
else	49:7	52:20	6
stmts	50:17	52:20	7	
if	50:17	52:20	8	(extractContigSamples16bits (src ,dst ,cols ,sample ,spp ,bps ,count ,first_col ,cols ))
cond	50:21	51:81	9	extractContigSamples16bits (src ,dst ,cols ,sample ,spp ,bps ,count ,first_col ,cols )
call	50:21	51:81	10	extractContigSamples16bits
arg	50:49	50:52	11	src
water	50:49	0:0	12	src
arg	50:54	50:57	11	dst
water	50:54	0:0	12	dst
arg	50:59	50:63	11	cols
water	50:59	0:0	12	cols
arg	50:65	50:71	11	sample
water	50:65	0:0	12	sample
arg	51:49	51:52	11	spp
water	51:49	0:0	12	spp
arg	51:54	51:57	11	bps
water	51:54	0:0	12	bps
arg	51:59	51:64	11	count
water	51:59	0:0	12	count
arg	51:66	51:75	11	first_col
water	51:66	0:0	12	first_col
arg	51:77	51:81	11	cols
water	51:77	0:0	12	cols
stmts	52:10	52:20	9	
return	52:10	52:20	10	(1)
water	52:17	0:0	11	(
water	52:18	0:0	11	1
water	52:19	0:0	11	)
break	53:7	53:12	6	
label	54:6	54:12	6	case 2 :
if	54:14	56:20	6	(extractContigSamples24bits (src ,dst ,cols ,sample ,spp ,bps ,count ,first_col ,cols ))
cond	54:18	55:79	7	extractContigSamples24bits (src ,dst ,cols ,sample ,spp ,bps ,count ,first_col ,cols )
call	54:18	55:79	8	extractContigSamples24bits
arg	54:46	54:49	9	src
water	54:46	0:0	10	src
arg	54:51	54:54	9	dst
water	54:51	0:0	10	dst
arg	54:56	54:60	9	cols
water	54:56	0:0	10	cols
arg	54:62	54:68	9	sample
water	54:62	0:0	10	sample
arg	55:46	55:49	9	spp
water	55:46	0:0	10	spp
arg	55:51	55:54	9	bps
water	55:51	0:0	10	bps
arg	55:57	55:62	9	count
water	55:57	0:0	10	count
arg	55:64	55:73	9	first_col
water	55:64	0:0	10	first_col
arg	55:75	55:79	9	cols
water	55:75	0:0	10	cols
stmts	56:10	56:20	7	
return	56:10	56:20	8	(1)
water	56:17	0:0	9	(
water	56:18	0:0	9	1
water	56:19	0:0	9	)
break	57:7	57:12	6	
label	58:6	58:12	6	case 3 :
label	59:6	59:12	6	case 4 :
label	60:6	60:12	6	case 5 :
if	60:14	62:20	6	(extractContigSamples32bits (src ,dst ,cols ,sample ,spp ,bps ,count ,first_col ,cols ))
cond	60:18	61:79	7	extractContigSamples32bits (src ,dst ,cols ,sample ,spp ,bps ,count ,first_col ,cols )
call	60:18	61:79	8	extractContigSamples32bits
arg	60:46	60:49	9	src
water	60:46	0:0	10	src
arg	60:51	60:54	9	dst
water	60:51	0:0	10	dst
arg	60:56	60:60	9	cols
water	60:56	0:0	10	cols
arg	60:62	60:68	9	sample
water	60:62	0:0	10	sample
arg	61:46	61:49	9	spp
water	61:46	0:0	10	spp
arg	61:51	61:54	9	bps
water	61:51	0:0	10	bps
arg	61:57	61:62	9	count
water	61:57	0:0	10	count
arg	61:64	61:73	9	first_col
water	61:64	0:0	10	first_col
arg	61:75	61:79	9	cols
water	61:75	0:0	10	cols
stmts	62:10	62:20	7	
return	62:10	62:20	8	(1)
water	62:17	0:0	9	(
water	62:18	0:0	9	1
water	62:19	0:0	9	)
break	63:7	63:12	6	
label	64:6	64:13	6	default :
call	64:15	64:90	6	TIFFError
arg	64:26	64:56	7	"extractContigSamplesToBuffer"
water	64:26	0:0	8	"extractContigSamplesToBuffer"
arg	64:58	64:85	7	"Unsupported bit depth: %d"
water	64:58	0:0	8	"Unsupported bit depth: %d"
arg	64:87	64:90	7	bps
water	64:87	0:0	8	bps
water	64:91	0:0	6	;
return	65:8	65:18	6	(1)
water	65:15	0:0	7	(
water	65:16	0:0	7	1
water	65:17	0:0	7	)
water	66:6	0:0	6	}
if	67:4	68:72	4	(( dump -> outfile != NULL ) && ( dump -> level == 4 ))
cond	67:8	67:52	5	( dump -> outfile != NULL ) && ( dump -> level == 4 )
water	67:8	0:0	6	(
water	67:9	0:0	6	dump
op	67:13	0:0	6	->
water	67:15	0:0	6	outfile
op	67:23	0:0	6	!=
water	67:26	0:0	6	NULL
water	67:30	0:0	6	)
op	67:32	0:0	6	&&
water	67:35	0:0	6	(
water	67:36	0:0	6	dump
op	67:40	0:0	6	->
water	67:42	0:0	6	level
op	67:48	0:0	6	==
water	67:51	0:0	6	4
water	67:52	0:0	6	)
stmts	68:6	68:72	5	
call	68:6	68:71	6	dump_buffer
arg	68:18	68:31	7	dump->outfile
water	68:18	0:0	8	dump
op	68:22	0:0	8	->
water	68:24	0:0	8	outfile
arg	68:33	68:45	7	dump->format
water	68:33	0:0	8	dump
op	68:37	0:0	8	->
water	68:39	0:0	8	format
arg	68:47	68:48	7	1
water	68:47	0:0	8	1
arg	68:50	68:61	7	dst_rowsize
water	68:50	0:0	8	dst_rowsize
arg	68:63	68:66	7	row
water	68:63	0:0	8	row
arg	68:68	68:71	7	dst
water	68:68	0:0	8	dst
water	68:72	0:0	6	;
water	69:4	0:0	4	}
return	70:2	70:12	2	(0)
water	70:9	0:0	3	(
water	70:10	0:0	3	0
water	70:11	0:0	3	)
