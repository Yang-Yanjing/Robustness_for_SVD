func	1:0	47:0	0	int	main
params	2:4	0:0	1	
param	2:5	2:13	2	int	argc
param	2:15	2:26	2	char * *	argv
stmnts	0:0	46:14	1	
decl	4:4	4:15	2	int	R
water	4:9	0:0	2	,
decl	4:4	4:15	2	int	G
water	4:12	0:0	2	,
decl	4:4	4:15	2	int	B
if	5:4	12:4	2	(argc > 1)
cond	5:8	5:15	3	argc > 1
water	5:8	0:0	4	argc
op	5:13	0:0	4	>
water	5:15	0:0	4	1
stmts	5:18	12:4	3	
water	5:18	0:0	4	{
water	6:1	0:0	4	refBlackWhite
op	6:14	0:0	4	[
water	6:15	0:0	4	0
op	6:16	0:0	4	]
op	6:18	0:0	4	=
water	6:20	0:0	4	16
water	6:22	0:0	4	;
water	7:1	0:0	4	refBlackWhite
op	7:14	0:0	4	[
water	7:15	0:0	4	1
op	7:16	0:0	4	]
op	7:18	0:0	4	=
water	7:20	0:0	4	235
water	7:23	0:0	4	;
water	8:1	0:0	4	refBlackWhite
op	8:14	0:0	4	[
water	8:15	0:0	4	2
op	8:16	0:0	4	]
op	8:18	0:0	4	=
water	8:20	0:0	4	128
water	8:23	0:0	4	;
water	9:1	0:0	4	refBlackWhite
op	9:14	0:0	4	[
water	9:15	0:0	4	3
op	9:16	0:0	4	]
op	9:18	0:0	4	=
water	9:20	0:0	4	240
water	9:23	0:0	4	;
water	10:1	0:0	4	refBlackWhite
op	10:14	0:0	4	[
water	10:15	0:0	4	4
op	10:16	0:0	4	]
op	10:18	0:0	4	=
water	10:20	0:0	4	128
water	10:23	0:0	4	;
water	11:1	0:0	4	refBlackWhite
op	11:14	0:0	4	[
water	11:15	0:0	4	5
op	11:16	0:0	4	]
op	11:18	0:0	4	=
water	11:20	0:0	4	240
water	11:23	0:0	4	;
water	12:4	0:0	4	}
water	13:4	0:0	2	D3
op	13:7	0:0	2	=
water	13:9	0:0	2	2
op	13:11	0:0	2	-
water	13:13	0:0	2	2
op	13:14	0:0	2	*
water	13:15	0:0	2	LumaRed
water	13:22	0:0	2	;
water	14:4	0:0	2	D4
op	14:7	0:0	2	=
water	14:9	0:0	2	2
op	14:11	0:0	2	-
water	14:13	0:0	2	2
op	14:14	0:0	2	*
water	14:15	0:0	2	LumaBlue
water	14:23	0:0	2	;
water	15:4	0:0	2	D1
op	15:7	0:0	2	=
water	15:9	0:0	2	1
op	15:10	0:0	2	.
op	15:12	0:0	2	/
water	15:14	0:0	2	D3
water	15:16	0:0	2	;
water	16:4	0:0	2	D2
op	16:7	0:0	2	=
water	16:9	0:0	2	1
op	16:10	0:0	2	.
op	16:12	0:0	2	/
water	16:14	0:0	2	D4
water	16:16	0:0	2	;
water	17:4	0:0	2	D5
op	17:7	0:0	2	=
water	17:9	0:0	2	D3
op	17:11	0:0	2	*
water	17:12	0:0	2	LumaRed
op	17:20	0:0	2	/
water	17:22	0:0	2	LumaGreen
water	17:31	0:0	2	;
water	18:4	0:0	2	D6
op	18:7	0:0	2	=
water	18:9	0:0	2	D4
op	18:11	0:0	2	*
water	18:12	0:0	2	LumaBlue
op	18:21	0:0	2	/
water	18:23	0:0	2	LumaGreen
water	18:32	0:0	2	;
call	19:4	19:20	2	setupLumaTables
water	19:21	0:0	2	;
for	20:4	37:4	2	(R = 0 ;R < 256;R ++)
forinit	20:9	20:14	3	R = 0 ;
water	20:9	0:0	4	R
op	20:11	0:0	4	=
water	20:13	0:0	4	0
water	20:14	0:0	4	;
cond	20:16	20:20	3	R < 256
water	20:16	0:0	4	R
op	20:18	0:0	4	<
water	20:20	0:0	4	256
forexpr	20:25	20:26	3	R ++
water	20:25	0:0	4	R
op	20:26	0:0	4	++
stmts	20:30	37:4	3	
water	20:30	0:0	4	{
for	21:1	23:16	4	(G = 0 ;G < 256;G ++)
forinit	21:6	21:11	5	G = 0 ;
water	21:6	0:0	6	G
op	21:8	0:0	6	=
water	21:10	0:0	6	0
water	21:11	0:0	6	;
cond	21:13	21:17	5	G < 256
water	21:13	0:0	6	G
op	21:15	0:0	6	<
water	21:17	0:0	6	256
forexpr	21:22	21:23	5	G ++
water	21:22	0:0	6	G
op	21:23	0:0	6	++
stmts	22:5	23:16	5	
for	22:5	23:16	6	(B = 0 ;B < 256;B ++)
forinit	22:10	22:15	7	B = 0 ;
water	22:10	0:0	8	B
op	22:12	0:0	8	=
water	22:14	0:0	8	0
water	22:15	0:0	8	;
cond	22:17	22:21	7	B < 256
water	22:17	0:0	8	B
op	22:19	0:0	8	<
water	22:21	0:0	8	256
forexpr	22:26	22:27	7	B ++
water	22:26	0:0	8	B
op	22:27	0:0	8	++
stmts	23:2	23:16	7	
call	23:2	23:15	8	check
arg	23:8	23:9	9	R
water	23:8	0:0	10	R
arg	23:11	23:12	9	G
water	23:11	0:0	10	G
arg	23:14	23:15	9	B
water	23:14	0:0	10	B
water	23:16	0:0	8	;
call	24:1	31:1	4	printf
arg	24:8	25:5	5	"[%3u] c %u/%u b %u/%u (R %u/%d/%u G %u/%d/%u B %u/%d/%u)\n"
water	24:8	0:0	6	"[%3u] c %u/%u b %u/%u (R %u/%d/%u G %u/%d/%u B %u/%d/%u)\n"
arg	25:7	26:5	5	R
water	25:7	0:0	6	R
arg	26:7	26:26	5	eCodes-preveCodes
water	26:7	0:0	6	eCodes
op	26:14	0:0	6	-
water	26:16	0:0	6	preveCodes
arg	26:28	27:5	5	eCodes
water	26:28	0:0	6	eCodes
arg	27:7	27:24	5	eBits-preveBits
water	27:7	0:0	6	eBits
op	27:13	0:0	6	-
water	27:15	0:0	6	preveBits
arg	27:26	28:5	5	eBits
water	27:26	0:0	6	eBits
arg	28:7	28:36	5	abs(AbseRtotal-preveRtotal)
call	28:7	28:35	6	abs
arg	28:11	28:35	7	AbseRtotal-preveRtotal
water	28:11	0:0	8	AbseRtotal
op	28:22	0:0	8	-
water	28:24	0:0	8	preveRtotal
arg	28:38	28:46	5	eRtotal
water	28:38	0:0	6	eRtotal
arg	28:48	29:5	5	AbseRtotal
water	28:48	0:0	6	AbseRtotal
arg	29:7	29:36	5	abs(AbseGtotal-preveGtotal)
call	29:7	29:35	6	abs
arg	29:11	29:35	7	AbseGtotal-preveGtotal
water	29:11	0:0	8	AbseGtotal
op	29:22	0:0	8	-
water	29:24	0:0	8	preveGtotal
arg	29:38	29:46	5	eGtotal
water	29:38	0:0	6	eGtotal
arg	29:48	30:5	5	AbseGtotal
water	29:48	0:0	6	AbseGtotal
arg	30:7	30:36	5	abs(AbseBtotal-preveBtotal)
call	30:7	30:35	6	abs
arg	30:11	30:35	7	AbseBtotal-preveBtotal
water	30:11	0:0	8	AbseBtotal
op	30:22	0:0	8	-
water	30:24	0:0	8	preveBtotal
arg	30:38	30:46	5	eBtotal
water	30:38	0:0	6	eBtotal
arg	30:48	31:1	5	AbseBtotal
water	30:48	0:0	6	AbseBtotal
water	31:2	0:0	4	;
water	32:1	0:0	4	preveRtotal
op	32:13	0:0	4	=
water	32:15	0:0	4	AbseRtotal
water	32:25	0:0	4	;
water	33:1	0:0	4	preveGtotal
op	33:13	0:0	4	=
water	33:15	0:0	4	AbseGtotal
water	33:25	0:0	4	;
water	34:1	0:0	4	preveBtotal
op	34:13	0:0	4	=
water	34:15	0:0	4	AbseBtotal
water	34:25	0:0	4	;
water	35:1	0:0	4	preveCodes
op	35:12	0:0	4	=
water	35:14	0:0	4	eCodes
water	35:20	0:0	4	;
water	36:1	0:0	4	preveBits
op	36:11	0:0	4	=
water	36:13	0:0	4	eBits
water	36:18	0:0	4	;
water	37:4	0:0	4	}
call	38:4	38:42	2	printf
arg	38:11	38:29	3	"%u total codes\n"
water	38:11	0:0	4	"%u total codes\n"
arg	38:31	38:42	3	256*256*256
water	38:31	0:0	4	256
op	38:34	0:0	4	*
water	38:35	0:0	4	256
op	38:38	0:0	4	*
water	38:39	0:0	4	256
water	38:43	0:0	2	;
call	39:4	45:4	2	printf
arg	39:11	40:1	3	"total error: %u codes %u bits (R %d/%u G %d/%u B %d/%u)\n"
water	39:11	0:0	4	"total error: %u codes %u bits (R %d/%u G %d/%u B %d/%u)\n"
arg	40:3	41:1	3	eCodes
water	40:3	0:0	4	eCodes
arg	41:3	42:1	3	eBits
water	41:3	0:0	4	eBits
arg	42:3	42:11	3	eRtotal
water	42:3	0:0	4	eRtotal
arg	42:13	43:1	3	AbseRtotal
water	42:13	0:0	4	AbseRtotal
arg	43:3	43:11	3	eGtotal
water	43:3	0:0	4	eGtotal
arg	43:13	44:1	3	AbseGtotal
water	43:13	0:0	4	AbseGtotal
arg	44:3	44:11	3	eBtotal
water	44:3	0:0	4	eBtotal
arg	44:13	45:4	3	AbseBtotal
water	44:13	0:0	4	AbseBtotal
water	45:5	0:0	2	;
return	46:4	46:14	2	(0)
water	46:11	0:0	3	(
water	46:12	0:0	3	0
water	46:13	0:0	3	)
