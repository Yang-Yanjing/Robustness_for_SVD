func	1:0	78:2	0	static int	extractContigSamplesShifted16bits
params	2:34	0:0	1	
param	2:35	2:44	2	uint8 *	in
param	2:46	2:56	2	uint8 *	out
param	2:58	2:69	2	uint32	cols
param	3:35	3:51	2	tsample_t	sample
param	3:53	3:63	2	uint16	spp
param	3:65	3:75	2	uint16	bps
param	4:16	4:31	2	tsample_t	count
param	4:33	4:45	2	uint32	start
param	4:47	4:57	2	uint32	end
param	5:29	5:38	2	int	shift
stmnts	0:0	77:12	1	
decl	7:2	7:35	2	int	ready_bits
op	7:20	0:0	2	=
water	7:22	0:0	2	0
water	7:23	0:0	2	,
decl	7:2	7:35	2	int	sindex
op	7:32	0:0	2	=
water	7:34	0:0	2	0
decl	8:2	8:43	2	uint32	col
water	8:12	0:0	2	,
decl	8:2	8:43	2	uint32	src_byte
water	8:22	0:0	2	,
decl	8:2	8:43	2	uint32	src_bit
water	8:31	0:0	2	,
decl	8:2	8:43	2	uint32	bit_offset
decl	9:2	9:36	2	uint16	maskbits
op	9:18	0:0	2	=
water	9:20	0:0	2	0
water	9:21	0:0	2	,
decl	9:2	9:36	2	uint16	matchbits
op	9:33	0:0	2	=
water	9:35	0:0	2	0
decl	10:2	10:29	2	uint16	buff1
op	10:15	0:0	2	=
water	10:17	0:0	2	0
water	10:18	0:0	2	,
decl	10:2	10:29	2	uint16	buff2
op	10:26	0:0	2	=
water	10:28	0:0	2	0
decl	11:2	11:21	2	uint8	bytebuff
op	11:18	0:0	2	=
water	11:20	0:0	2	0
decl	12:2	12:17	2	uint8	*src
op	12:13	0:0	2	=
water	12:15	0:0	2	in
decl	13:2	13:18	2	uint8	*dst
op	13:13	0:0	2	=
water	13:15	0:0	2	out
if	14:2	18:4	2	(( src == NULL ) || ( dst == NULL ))
cond	14:6	14:35	3	( src == NULL ) || ( dst == NULL )
water	14:6	0:0	4	(
water	14:7	0:0	4	src
op	14:11	0:0	4	==
water	14:14	0:0	4	NULL
water	14:18	0:0	4	)
op	14:20	0:0	4	||
water	14:23	0:0	4	(
water	14:24	0:0	4	dst
op	14:28	0:0	4	==
water	14:31	0:0	4	NULL
water	14:35	0:0	4	)
stmts	15:4	18:4	3	
water	15:4	0:0	4	{
call	16:4	16:82	4	TIFFError
arg	16:14	16:49	5	"extractContigSamplesShifted16bits"
water	16:14	0:0	6	"extractContigSamplesShifted16bits"
arg	16:50	16:82	5	"Invalid input or output buffer"
water	16:50	0:0	6	"Invalid input or output buffer"
water	16:83	0:0	4	;
return	17:4	17:14	4	(1)
water	17:11	0:0	5	(
water	17:12	0:0	5	1
water	17:13	0:0	5	)
water	18:4	0:0	4	}
if	19:2	24:4	2	(( start > end ) || ( start > cols ))
cond	19:6	19:36	3	( start > end ) || ( start > cols )
water	19:6	0:0	4	(
water	19:7	0:0	4	start
op	19:13	0:0	4	>
water	19:15	0:0	4	end
water	19:18	0:0	4	)
op	19:20	0:0	4	||
water	19:23	0:0	4	(
water	19:24	0:0	4	start
op	19:30	0:0	4	>
water	19:32	0:0	4	cols
water	19:36	0:0	4	)
stmts	20:4	24:4	3	
water	20:4	0:0	4	{
call	21:4	22:61	4	TIFFError
arg	21:15	21:50	5	"extractContigSamplesShifted16bits"
water	21:15	0:0	6	"extractContigSamplesShifted16bits"
arg	22:15	22:54	5	"Invalid start column value %d ignored"
water	22:15	0:0	6	"Invalid start column value %d ignored"
arg	22:56	22:61	5	start
water	22:56	0:0	6	start
water	22:62	0:0	4	;
water	23:4	0:0	4	start
op	23:10	0:0	4	=
water	23:12	0:0	4	0
water	23:13	0:0	4	;
water	24:4	0:0	4	}
if	25:2	30:4	2	(( end == 0 ) || ( end > cols ))
cond	25:6	25:31	3	( end == 0 ) || ( end > cols )
water	25:6	0:0	4	(
water	25:7	0:0	4	end
op	25:11	0:0	4	==
water	25:14	0:0	4	0
water	25:15	0:0	4	)
op	25:17	0:0	4	||
water	25:20	0:0	4	(
water	25:21	0:0	4	end
op	25:25	0:0	4	>
water	25:27	0:0	4	cols
water	25:31	0:0	4	)
stmts	26:4	30:4	3	
water	26:4	0:0	4	{
call	27:4	28:57	4	TIFFError
arg	27:15	27:50	5	"extractContigSamplesShifted16bits"
water	27:15	0:0	6	"extractContigSamplesShifted16bits"
arg	28:15	28:52	5	"Invalid end column value %d ignored"
water	28:15	0:0	6	"Invalid end column value %d ignored"
arg	28:54	28:57	5	end
water	28:54	0:0	6	end
water	28:58	0:0	4	;
water	29:4	0:0	4	end
op	29:8	0:0	4	=
water	29:10	0:0	4	cols
water	29:14	0:0	4	;
water	30:4	0:0	4	}
water	31:2	0:0	2	ready_bits
op	31:13	0:0	2	=
water	31:15	0:0	2	shift
water	31:20	0:0	2	;
water	32:2	0:0	2	maskbits
op	32:11	0:0	2	=
water	32:13	0:0	2	(
water	32:14	0:0	2	uint16
water	32:20	0:0	2	)
op	32:21	0:0	2	-
water	32:22	0:0	2	1
op	32:24	0:0	2	>>
water	32:27	0:0	2	(
water	32:28	0:0	2	16
op	32:31	0:0	2	-
water	32:33	0:0	2	bps
water	32:36	0:0	2	)
water	32:37	0:0	2	;
for	33:2	69:4	2	(col = start ;col < end;col ++)
forinit	33:7	33:18	3	col = start ;
water	33:7	0:0	4	col
op	33:11	0:0	4	=
water	33:13	0:0	4	start
water	33:18	0:0	4	;
cond	33:20	33:26	3	col < end
water	33:20	0:0	4	col
op	33:24	0:0	4	<
water	33:26	0:0	4	end
forexpr	33:31	33:34	3	col ++
water	33:31	0:0	4	col
op	33:34	0:0	4	++
stmts	34:4	69:4	3	
water	34:4	0:0	4	{
water	35:4	0:0	4	bit_offset
op	35:15	0:0	4	=
water	35:17	0:0	4	col
op	35:21	0:0	4	*
water	35:23	0:0	4	bps
op	35:27	0:0	4	*
water	35:29	0:0	4	spp
water	35:32	0:0	4	;
for	36:4	68:6	4	(sindex = sample ;( sindex < spp ) && ( sindex < ( sample + count ) );sindex ++)
forinit	36:9	36:24	5	sindex = sample ;
water	36:9	0:0	6	sindex
op	36:16	0:0	6	=
water	36:18	0:0	6	sample
water	36:24	0:0	6	;
cond	36:26	36:70	5	( sindex < spp ) && ( sindex < ( sample + count ) )
water	36:26	0:0	6	(
water	36:27	0:0	6	sindex
op	36:34	0:0	6	<
water	36:36	0:0	6	spp
water	36:39	0:0	6	)
op	36:41	0:0	6	&&
water	36:44	0:0	6	(
water	36:45	0:0	6	sindex
op	36:52	0:0	6	<
water	36:54	0:0	6	(
water	36:55	0:0	6	sample
op	36:62	0:0	6	+
water	36:64	0:0	6	count
water	36:69	0:0	6	)
water	36:70	0:0	6	)
forexpr	36:73	36:79	5	sindex ++
water	36:73	0:0	6	sindex
op	36:79	0:0	6	++
stmts	37:6	68:6	5	
water	37:6	0:0	6	{
if	38:6	42:8	6	(sindex == 0)
cond	38:10	38:20	7	sindex == 0
water	38:10	0:0	8	sindex
op	38:17	0:0	8	==
water	38:20	0:0	8	0
stmts	39:8	42:8	7	
water	39:8	0:0	8	{
water	40:8	0:0	8	src_byte
op	40:17	0:0	8	=
water	40:19	0:0	8	bit_offset
op	40:30	0:0	8	/
water	40:32	0:0	8	8
water	40:33	0:0	8	;
water	41:8	0:0	8	src_bit
op	41:17	0:0	8	=
water	41:19	0:0	8	bit_offset
op	41:30	0:0	8	%
water	41:32	0:0	8	8
water	41:33	0:0	8	;
water	42:8	0:0	8	}
else	43:6	47:8	6
stmts	44:8	47:8	7	
water	44:8	0:0	8	{
water	45:8	0:0	8	src_byte
op	45:17	0:0	8	=
water	45:19	0:0	8	(
water	45:20	0:0	8	bit_offset
op	45:31	0:0	8	+
water	45:33	0:0	8	(
water	45:34	0:0	8	sindex
op	45:41	0:0	8	*
water	45:43	0:0	8	bps
water	45:46	0:0	8	)
water	45:47	0:0	8	)
op	45:49	0:0	8	/
water	45:51	0:0	8	8
water	45:52	0:0	8	;
water	46:8	0:0	8	src_bit
op	46:17	0:0	8	=
water	46:19	0:0	8	(
water	46:20	0:0	8	bit_offset
op	46:31	0:0	8	+
water	46:33	0:0	8	(
water	46:34	0:0	8	sindex
op	46:41	0:0	8	*
water	46:43	0:0	8	bps
water	46:46	0:0	8	)
water	46:47	0:0	8	)
op	46:49	0:0	8	%
water	46:51	0:0	8	8
water	46:52	0:0	8	;
water	47:8	0:0	8	}
water	48:6	0:0	6	src
op	48:10	0:0	6	=
water	48:12	0:0	6	in
op	48:15	0:0	6	+
water	48:17	0:0	6	src_byte
water	48:25	0:0	6	;
water	49:6	0:0	6	matchbits
op	49:16	0:0	6	=
water	49:18	0:0	6	maskbits
op	49:27	0:0	6	<<
water	49:30	0:0	6	(
water	49:31	0:0	6	16
op	49:34	0:0	6	-
water	49:36	0:0	6	src_bit
op	49:44	0:0	6	-
water	49:46	0:0	6	bps
water	49:49	0:0	6	)
water	49:50	0:0	6	;
if	50:6	51:38	6	(little_endian)
cond	50:10	50:10	7	little_endian
water	50:10	0:0	8	little_endian
stmts	51:8	51:38	7	
water	51:8	0:0	8	buff1
op	51:14	0:0	8	=
water	51:16	0:0	8	(
water	51:17	0:0	8	src
op	51:20	0:0	8	[
water	51:21	0:0	8	0
op	51:22	0:0	8	]
op	51:24	0:0	8	<<
water	51:27	0:0	8	8
water	51:28	0:0	8	)
op	51:30	0:0	8	|
water	51:32	0:0	8	src
op	51:35	0:0	8	[
water	51:36	0:0	8	1
op	51:37	0:0	8	]
water	51:38	0:0	8	;
else	52:6	53:38	6
stmts	53:8	53:38	7	
water	53:8	0:0	8	buff1
op	53:14	0:0	8	=
water	53:16	0:0	8	(
water	53:17	0:0	8	src
op	53:20	0:0	8	[
water	53:21	0:0	8	1
op	53:22	0:0	8	]
op	53:24	0:0	8	<<
water	53:27	0:0	8	8
water	53:28	0:0	8	)
op	53:30	0:0	8	|
water	53:32	0:0	8	src
op	53:35	0:0	8	[
water	53:36	0:0	8	0
op	53:37	0:0	8	]
water	53:38	0:0	8	;
if	54:6	55:51	6	(( col == start ) && ( sindex == sample ))
cond	54:10	54:45	7	( col == start ) && ( sindex == sample )
water	54:10	0:0	8	(
water	54:11	0:0	8	col
op	54:15	0:0	8	==
water	54:18	0:0	8	start
water	54:23	0:0	8	)
op	54:25	0:0	8	&&
water	54:28	0:0	8	(
water	54:29	0:0	8	sindex
op	54:36	0:0	8	==
water	54:39	0:0	8	sample
water	54:45	0:0	8	)
stmts	55:8	55:51	7	
water	55:8	0:0	8	buff2
op	55:14	0:0	8	=
water	55:16	0:0	8	buff1
op	55:22	0:0	8	&
water	55:24	0:0	8	(
water	55:25	0:0	8	(
water	55:26	0:0	8	uint16
water	55:32	0:0	8	)
op	55:33	0:0	8	-
water	55:34	0:0	8	1
water	55:35	0:0	8	)
op	55:37	0:0	8	<<
water	55:40	0:0	8	(
water	55:41	0:0	8	8
op	55:43	0:0	8	-
water	55:45	0:0	8	shift
water	55:50	0:0	8	)
water	55:51	0:0	8	;
water	56:6	0:0	6	buff1
op	56:12	0:0	6	=
water	56:14	0:0	6	(
water	56:15	0:0	6	buff1
op	56:21	0:0	6	&
water	56:23	0:0	6	matchbits
water	56:32	0:0	6	)
op	56:34	0:0	6	<<
water	56:37	0:0	6	(
water	56:38	0:0	6	src_bit
water	56:45	0:0	6	)
water	56:46	0:0	6	;
if	57:6	58:45	6	(ready_bits < 8)
cond	57:10	57:23	7	ready_bits < 8
water	57:10	0:0	8	ready_bits
op	57:21	0:0	8	<
water	57:23	0:0	8	8
stmts	58:8	58:45	7	
water	58:8	0:0	8	buff2
op	58:14	0:0	8	=
water	58:16	0:0	8	buff2
op	58:22	0:0	8	|
water	58:24	0:0	8	(
water	58:25	0:0	8	buff1
op	58:31	0:0	8	>>
water	58:34	0:0	8	ready_bits
water	58:44	0:0	8	)
water	58:45	0:0	8	;
else	59:6	66:8	6
stmts	60:8	66:8	7	
water	60:8	0:0	8	{
water	61:8	0:0	8	bytebuff
op	61:17	0:0	8	=
water	61:19	0:0	8	(
water	61:20	0:0	8	buff2
op	61:26	0:0	8	>>
water	61:29	0:0	8	8
water	61:30	0:0	8	)
water	61:31	0:0	8	;
op	62:8	0:0	8	*
water	62:9	0:0	8	dst
op	62:12	0:0	8	++
op	62:15	0:0	8	=
water	62:17	0:0	8	bytebuff
water	62:25	0:0	8	;
water	63:8	0:0	8	ready_bits
op	63:19	0:0	8	-=
water	63:22	0:0	8	8
water	63:23	0:0	8	;
water	65:8	0:0	8	buff2
op	65:14	0:0	8	=
water	65:16	0:0	8	(
water	65:17	0:0	8	(
water	65:18	0:0	8	buff2
op	65:24	0:0	8	<<
water	65:27	0:0	8	8
water	65:28	0:0	8	)
op	65:30	0:0	8	|
water	65:32	0:0	8	(
water	65:33	0:0	8	buff1
op	65:39	0:0	8	>>
water	65:42	0:0	8	ready_bits
water	65:52	0:0	8	)
water	65:53	0:0	8	)
water	65:54	0:0	8	;
water	66:8	0:0	8	}
water	67:6	0:0	6	ready_bits
op	67:17	0:0	6	+=
water	67:20	0:0	6	bps
water	67:23	0:0	6	;
water	68:6	0:0	6	}
water	69:4	0:0	4	}
while	71:2	76:4	2	(ready_bits > 0)
cond	71:9	71:22	3	ready_bits > 0
water	71:9	0:0	4	ready_bits
op	71:20	0:0	4	>
water	71:22	0:0	4	0
stmts	72:4	76:4	3	
water	72:4	0:0	4	{
water	73:4	0:0	4	bytebuff
op	73:13	0:0	4	=
water	73:15	0:0	4	(
water	73:16	0:0	4	buff2
op	73:22	0:0	4	>>
water	73:25	0:0	4	8
water	73:26	0:0	4	)
water	73:27	0:0	4	;
op	74:4	0:0	4	*
water	74:5	0:0	4	dst
op	74:8	0:0	4	++
op	74:11	0:0	4	=
water	74:13	0:0	4	bytebuff
water	74:21	0:0	4	;
water	75:4	0:0	4	ready_bits
op	75:15	0:0	4	-=
water	75:18	0:0	4	8
water	75:19	0:0	4	;
water	76:4	0:0	4	}
return	77:2	77:12	2	(0)
water	77:9	0:0	3	(
water	77:10	0:0	3	0
water	77:11	0:0	3	)
