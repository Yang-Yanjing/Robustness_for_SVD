func	1:0	70:2	0	static int	extractContigSamplesToTileBuffer
params	2:32	0:0	1	
param	2:33	2:43	2	uint8 *	out
param	2:45	2:54	2	uint8 *	in
param	2:56	2:67	2	uint32	rows
param	2:69	2:80	2	uint32	cols
param	3:28	3:45	2	uint32	imagewidth
param	3:47	3:63	2	uint32	tilewidth
param	3:65	3:81	2	tsample_t	sample
param	4:5	4:17	2	uint16	count
param	4:19	4:29	2	uint16	spp
param	4:31	4:41	2	uint16	bps
param	4:43	4:65	2	struct dump_opts *	dump
stmnts	0:0	69:12	1	
decl	6:2	6:55	2	int	shift_width
water	6:20	0:0	2	,
decl	6:2	6:55	2	int	bytes_per_sample
water	6:38	0:0	2	,
decl	6:2	6:55	2	int	bytes_per_pixel
decl	7:2	7:37	2	uint32	src_rowsize
water	7:20	0:0	2	,
decl	7:2	7:37	2	uint32	src_offset
water	7:32	0:0	2	,
decl	7:2	7:37	2	uint32	row
decl	8:2	8:32	2	uint32	dst_rowsize
water	8:20	0:0	2	,
decl	8:2	8:32	2	uint32	dst_offset
decl	9:2	9:18	2	uint8	*src
water	9:12	0:0	2	,
decl	9:2	9:18	2	uint8	*dst
water	10:2	0:0	2	bytes_per_sample
op	10:19	0:0	2	=
water	10:21	0:0	2	(
water	10:22	0:0	2	bps
op	10:26	0:0	2	+
water	10:28	0:0	2	7
water	10:29	0:0	2	)
op	10:31	0:0	2	/
water	10:33	0:0	2	8
water	10:34	0:0	2	;
water	11:2	0:0	2	bytes_per_pixel
op	11:19	0:0	2	=
water	11:21	0:0	2	(
water	11:22	0:0	2	(
water	11:23	0:0	2	bps
op	11:27	0:0	2	*
water	11:29	0:0	2	spp
water	11:32	0:0	2	)
op	11:34	0:0	2	+
water	11:36	0:0	2	7
water	11:37	0:0	2	)
op	11:39	0:0	2	/
water	11:41	0:0	2	8
water	11:42	0:0	2	;
if	12:2	13:19	2	(( bps % 8 ) == 0)
cond	12:6	12:19	3	( bps % 8 ) == 0
water	12:6	0:0	4	(
water	12:7	0:0	4	bps
op	12:11	0:0	4	%
water	12:13	0:0	4	8
water	12:14	0:0	4	)
op	12:16	0:0	4	==
water	12:19	0:0	4	0
stmts	13:4	13:19	3	
water	13:4	0:0	4	shift_width
op	13:16	0:0	4	=
water	13:18	0:0	4	0
water	13:19	0:0	4	;
else	14:2	20:4	2
stmts	15:4	20:4	3	
water	15:4	0:0	4	{
if	16:4	17:35	4	(bytes_per_pixel < ( bytes_per_sample + 1 ))
cond	16:8	16:47	5	bytes_per_pixel < ( bytes_per_sample + 1 )
water	16:8	0:0	6	bytes_per_pixel
op	16:24	0:0	6	<
water	16:26	0:0	6	(
water	16:27	0:0	6	bytes_per_sample
op	16:44	0:0	6	+
water	16:46	0:0	6	1
water	16:47	0:0	6	)
stmts	17:6	17:35	5	
water	17:6	0:0	6	shift_width
op	17:18	0:0	6	=
water	17:20	0:0	6	bytes_per_pixel
water	17:35	0:0	6	;
else	18:4	19:40	4
stmts	19:6	19:40	5	
water	19:6	0:0	6	shift_width
op	19:18	0:0	6	=
water	19:20	0:0	6	bytes_per_sample
op	19:37	0:0	6	+
water	19:39	0:0	6	1
water	19:40	0:0	6	;
water	20:4	0:0	4	}
if	21:2	25:4	2	(( dump -> outfile != NULL ) && ( dump -> level == 4 ))
cond	21:6	21:50	3	( dump -> outfile != NULL ) && ( dump -> level == 4 )
water	21:6	0:0	4	(
water	21:7	0:0	4	dump
op	21:11	0:0	4	->
water	21:13	0:0	4	outfile
op	21:21	0:0	4	!=
water	21:24	0:0	4	NULL
water	21:28	0:0	4	)
op	21:30	0:0	4	&&
water	21:33	0:0	4	(
water	21:34	0:0	4	dump
op	21:38	0:0	4	->
water	21:40	0:0	4	level
op	21:46	0:0	4	==
water	21:49	0:0	4	4
water	21:50	0:0	4	)
stmts	22:4	25:4	3	
water	22:4	0:0	4	{
call	23:4	24:58	4	dump_info
arg	23:16	23:29	5	dump->outfile
water	23:16	0:0	6	dump
op	23:20	0:0	6	->
water	23:22	0:0	6	outfile
arg	23:31	23:43	5	dump->format
water	23:31	0:0	6	dump
op	23:35	0:0	6	->
water	23:37	0:0	6	format
arg	23:45	23:79	5	"extractContigSamplesToTileBuffer"
water	23:45	0:0	6	"extractContigSamplesToTileBuffer"
arg	24:16	24:36	5	"Sample %d, %d rows"
water	24:16	0:0	6	"Sample %d, %d rows"
arg	24:38	24:48	5	sample+1
water	24:38	0:0	6	sample
op	24:45	0:0	6	+
water	24:47	0:0	6	1
arg	24:50	24:58	5	rows+1
water	24:50	0:0	6	rows
op	24:55	0:0	6	+
water	24:57	0:0	6	1
water	24:59	0:0	4	;
water	25:4	0:0	4	}
water	26:2	0:0	2	src_rowsize
op	26:14	0:0	2	=
water	26:16	0:0	2	(
water	26:17	0:0	2	(
water	26:18	0:0	2	bps
op	26:22	0:0	2	*
water	26:24	0:0	2	spp
op	26:28	0:0	2	*
water	26:30	0:0	2	imagewidth
water	26:40	0:0	2	)
op	26:42	0:0	2	+
water	26:44	0:0	2	7
water	26:45	0:0	2	)
op	26:47	0:0	2	/
water	26:49	0:0	2	8
water	26:50	0:0	2	;
water	27:2	0:0	2	dst_rowsize
op	27:14	0:0	2	=
water	27:16	0:0	2	(
water	27:17	0:0	2	(
water	27:18	0:0	2	bps
op	27:22	0:0	2	*
water	27:24	0:0	2	tilewidth
op	27:34	0:0	2	*
water	27:36	0:0	2	count
water	27:41	0:0	2	)
op	27:43	0:0	2	+
water	27:45	0:0	2	7
water	27:46	0:0	2	)
op	27:48	0:0	2	/
water	27:50	0:0	2	8
water	27:51	0:0	2	;
for	28:2	68:4	2	(row = 0 ;row < rows;row ++)
forinit	28:7	28:14	3	row = 0 ;
water	28:7	0:0	4	row
op	28:11	0:0	4	=
water	28:13	0:0	4	0
water	28:14	0:0	4	;
cond	28:16	28:22	3	row < rows
water	28:16	0:0	4	row
op	28:20	0:0	4	<
water	28:22	0:0	4	rows
forexpr	28:28	28:31	3	row ++
water	28:28	0:0	4	row
op	28:31	0:0	4	++
stmts	29:4	68:4	3	
water	29:4	0:0	4	{
water	30:4	0:0	4	src_offset
op	30:15	0:0	4	=
water	30:17	0:0	4	row
op	30:21	0:0	4	*
water	30:23	0:0	4	src_rowsize
water	30:34	0:0	4	;
water	31:4	0:0	4	dst_offset
op	31:15	0:0	4	=
water	31:17	0:0	4	row
op	31:21	0:0	4	*
water	31:23	0:0	4	dst_rowsize
water	31:34	0:0	4	;
water	32:4	0:0	4	src
op	32:8	0:0	4	=
water	32:10	0:0	4	in
op	32:13	0:0	4	+
water	32:15	0:0	4	src_offset
water	32:25	0:0	4	;
water	33:4	0:0	4	dst
op	33:8	0:0	4	=
water	33:10	0:0	4	out
op	33:14	0:0	4	+
water	33:16	0:0	4	dst_offset
water	33:26	0:0	4	;
switch	35:4	65:6	4	(shift_width)
cond	35:12	35:12	5	shift_width
water	35:12	0:0	6	shift_width
stmts	36:6	65:6	5	
water	36:6	0:0	6	{
label	37:6	37:12	6	case 0 :
if	37:14	39:26	6	(extractContigSamplesBytes (src ,dst ,cols ,sample ,spp ,bps ,count ,0 ,cols ))
cond	37:18	38:70	7	extractContigSamplesBytes (src ,dst ,cols ,sample ,spp ,bps ,count ,0 ,cols )
call	37:18	38:70	8	extractContigSamplesBytes
arg	37:45	37:48	9	src
water	37:45	0:0	10	src
arg	37:50	37:53	9	dst
water	37:50	0:0	10	dst
arg	37:55	37:59	9	cols
water	37:55	0:0	10	cols
arg	37:61	37:67	9	sample
water	37:61	0:0	10	sample
arg	38:45	38:48	9	spp
water	38:45	0:0	10	spp
arg	38:50	38:53	9	bps
water	38:50	0:0	10	bps
arg	38:56	38:61	9	count
water	38:56	0:0	10	count
arg	38:63	38:64	9	0
water	38:63	0:0	10	0
arg	38:66	38:70	9	cols
water	38:66	0:0	10	cols
stmts	39:16	39:26	7	
return	39:16	39:26	8	(1)
water	39:23	0:0	9	(
water	39:24	0:0	9	1
water	39:25	0:0	9	)
break	40:8	40:13	6	
label	41:6	41:12	6	case 1 :
if	41:14	47:2	6	(bps == 1)
cond	41:18	41:25	7	bps == 1
water	41:18	0:0	8	bps
op	41:22	0:0	8	==
water	41:25	0:0	8	1
stmts	42:16	47:2	7	
water	42:16	0:0	8	{
if	43:16	45:21	8	(extractContigSamples8bits (src ,dst ,cols ,sample ,spp ,bps ,count ,0 ,cols ))
cond	43:20	44:71	9	extractContigSamples8bits (src ,dst ,cols ,sample ,spp ,bps ,count ,0 ,cols )
call	43:20	44:71	10	extractContigSamples8bits
arg	43:47	43:50	11	src
water	43:47	0:0	12	src
arg	43:52	43:55	11	dst
water	43:52	0:0	12	dst
arg	43:57	43:61	11	cols
water	43:57	0:0	12	cols
arg	43:63	43:69	11	sample
water	43:63	0:0	12	sample
arg	44:47	44:50	11	spp
water	44:47	0:0	12	spp
arg	44:52	44:55	11	bps
water	44:52	0:0	12	bps
arg	44:57	44:62	11	count
water	44:57	0:0	12	count
arg	44:64	44:65	11	0
water	44:64	0:0	12	0
arg	44:67	44:71	11	cols
water	44:67	0:0	12	cols
stmts	45:11	45:21	9	
return	45:11	45:21	10	(1)
water	45:18	0:0	11	(
water	45:19	0:0	11	1
water	45:20	0:0	11	)
break	46:9	46:14	8	
water	47:2	0:0	8	}
else	48:7	51:20	6
stmts	49:17	51:20	7	
if	49:17	51:20	8	(extractContigSamples16bits (src ,dst ,cols ,sample ,spp ,bps ,count ,0 ,cols ))
cond	49:21	50:73	9	extractContigSamples16bits (src ,dst ,cols ,sample ,spp ,bps ,count ,0 ,cols )
call	49:21	50:73	10	extractContigSamples16bits
arg	49:49	49:52	11	src
water	49:49	0:0	12	src
arg	49:54	49:57	11	dst
water	49:54	0:0	12	dst
arg	49:59	49:63	11	cols
water	49:59	0:0	12	cols
arg	49:65	49:71	11	sample
water	49:65	0:0	12	sample
arg	50:49	50:52	11	spp
water	50:49	0:0	12	spp
arg	50:54	50:57	11	bps
water	50:54	0:0	12	bps
arg	50:59	50:64	11	count
water	50:59	0:0	12	count
arg	50:66	50:67	11	0
water	50:66	0:0	12	0
arg	50:69	50:73	11	cols
water	50:69	0:0	12	cols
stmts	51:10	51:20	9	
return	51:10	51:20	10	(1)
water	51:17	0:0	11	(
water	51:18	0:0	11	1
water	51:19	0:0	11	)
break	52:7	52:12	6	
label	53:6	53:12	6	case 2 :
if	53:14	55:20	6	(extractContigSamples24bits (src ,dst ,cols ,sample ,spp ,bps ,count ,0 ,cols ))
cond	53:18	54:71	7	extractContigSamples24bits (src ,dst ,cols ,sample ,spp ,bps ,count ,0 ,cols )
call	53:18	54:71	8	extractContigSamples24bits
arg	53:46	53:49	9	src
water	53:46	0:0	10	src
arg	53:51	53:54	9	dst
water	53:51	0:0	10	dst
arg	53:56	53:60	9	cols
water	53:56	0:0	10	cols
arg	53:62	53:68	9	sample
water	53:62	0:0	10	sample
arg	54:46	54:49	9	spp
water	54:46	0:0	10	spp
arg	54:51	54:54	9	bps
water	54:51	0:0	10	bps
arg	54:57	54:62	9	count
water	54:57	0:0	10	count
arg	54:64	54:65	9	0
water	54:64	0:0	10	0
arg	54:67	54:71	9	cols
water	54:67	0:0	10	cols
stmts	55:10	55:20	7	
return	55:10	55:20	8	(1)
water	55:17	0:0	9	(
water	55:18	0:0	9	1
water	55:19	0:0	9	)
break	56:7	56:12	6	
label	57:6	57:12	6	case 3 :
label	58:6	58:12	6	case 4 :
label	59:6	59:12	6	case 5 :
if	59:14	61:20	6	(extractContigSamples32bits (src ,dst ,cols ,sample ,spp ,bps ,count ,0 ,cols ))
cond	59:18	60:71	7	extractContigSamples32bits (src ,dst ,cols ,sample ,spp ,bps ,count ,0 ,cols )
call	59:18	60:71	8	extractContigSamples32bits
arg	59:46	59:49	9	src
water	59:46	0:0	10	src
arg	59:51	59:54	9	dst
water	59:51	0:0	10	dst
arg	59:56	59:60	9	cols
water	59:56	0:0	10	cols
arg	59:62	59:68	9	sample
water	59:62	0:0	10	sample
arg	60:46	60:49	9	spp
water	60:46	0:0	10	spp
arg	60:51	60:54	9	bps
water	60:51	0:0	10	bps
arg	60:57	60:62	9	count
water	60:57	0:0	10	count
arg	60:64	60:65	9	0
water	60:64	0:0	10	0
arg	60:67	60:71	9	cols
water	60:67	0:0	10	cols
stmts	61:10	61:20	7	
return	61:10	61:20	8	(1)
water	61:17	0:0	9	(
water	61:18	0:0	9	1
water	61:19	0:0	9	)
break	62:7	62:12	6	
label	63:6	63:13	6	default :
call	63:15	63:94	6	TIFFError
arg	63:26	63:60	7	"extractContigSamplesToTileBuffer"
water	63:26	0:0	8	"extractContigSamplesToTileBuffer"
arg	63:62	63:89	7	"Unsupported bit depth: %d"
water	63:62	0:0	8	"Unsupported bit depth: %d"
arg	63:91	63:94	7	bps
water	63:91	0:0	8	bps
water	63:95	0:0	6	;
return	64:8	64:18	6	(1)
water	64:15	0:0	7	(
water	64:16	0:0	7	1
water	64:17	0:0	7	)
water	65:6	0:0	6	}
if	66:4	67:72	4	(( dump -> outfile != NULL ) && ( dump -> level == 4 ))
cond	66:8	66:52	5	( dump -> outfile != NULL ) && ( dump -> level == 4 )
water	66:8	0:0	6	(
water	66:9	0:0	6	dump
op	66:13	0:0	6	->
water	66:15	0:0	6	outfile
op	66:23	0:0	6	!=
water	66:26	0:0	6	NULL
water	66:30	0:0	6	)
op	66:32	0:0	6	&&
water	66:35	0:0	6	(
water	66:36	0:0	6	dump
op	66:40	0:0	6	->
water	66:42	0:0	6	level
op	66:48	0:0	6	==
water	66:51	0:0	6	4
water	66:52	0:0	6	)
stmts	67:6	67:72	5	
call	67:6	67:71	6	dump_buffer
arg	67:18	67:31	7	dump->outfile
water	67:18	0:0	8	dump
op	67:22	0:0	8	->
water	67:24	0:0	8	outfile
arg	67:33	67:45	7	dump->format
water	67:33	0:0	8	dump
op	67:37	0:0	8	->
water	67:39	0:0	8	format
arg	67:47	67:48	7	1
water	67:47	0:0	8	1
arg	67:50	67:61	7	dst_rowsize
water	67:50	0:0	8	dst_rowsize
arg	67:63	67:66	7	row
water	67:63	0:0	8	row
arg	67:68	67:71	7	dst
water	67:68	0:0	8	dst
water	67:72	0:0	6	;
water	68:4	0:0	4	}
return	69:2	69:12	2	(0)
water	69:9	0:0	3	(
water	69:10	0:0	3	0
water	69:11	0:0	3	)
