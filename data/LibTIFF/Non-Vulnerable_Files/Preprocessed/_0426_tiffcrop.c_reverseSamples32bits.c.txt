func	1:0	91:2	0	static int	reverseSamples32bits
params	2:21	0:0	1	
param	2:22	2:32	2	uint16	spp
param	2:34	2:44	2	uint16	bps
param	2:46	2:58	2	uint32	width
param	3:22	3:34	2	uint8 *	ibuff
param	3:36	3:48	2	uint8 *	obuff
stmnts	0:0	90:12	1	
decl	5:2	5:24	2	int	ready_bits
op	5:20	0:0	2	=
water	5:22	0:0	2	0
decl	7:2	7:19	2	uint32	bit_offset
decl	8:2	8:35	2	uint32	src_byte
op	8:18	0:0	2	=
water	8:20	0:0	2	0
water	8:21	0:0	2	,
decl	8:2	8:35	2	uint32	high_bit
op	8:32	0:0	2	=
water	8:34	0:0	2	0
decl	9:2	9:12	2	uint32	col
decl	10:2	10:37	2	uint32	longbuff1
op	10:19	0:0	2	=
water	10:21	0:0	2	0
water	10:22	0:0	2	,
decl	10:2	10:37	2	uint32	longbuff2
op	10:34	0:0	2	=
water	10:36	0:0	2	0
decl	11:2	11:38	2	uint64	mask_bits
op	11:19	0:0	2	=
water	11:21	0:0	2	0
water	11:22	0:0	2	,
decl	11:2	11:38	2	uint64	match_bits
op	11:35	0:0	2	=
water	11:37	0:0	2	0
decl	12:2	12:40	2	uint64	buff1
op	12:15	0:0	2	=
water	12:17	0:0	2	0
water	12:18	0:0	2	,
decl	12:2	12:40	2	uint64	buff2
op	12:26	0:0	2	=
water	12:28	0:0	2	0
water	12:29	0:0	2	,
decl	12:2	12:40	2	uint64	buff3
op	12:37	0:0	2	=
water	12:39	0:0	2	0
decl	13:2	13:67	2	uint8	bytebuff1
op	13:19	0:0	2	=
water	13:21	0:0	2	0
water	13:22	0:0	2	,
decl	13:2	13:67	2	uint8	bytebuff2
op	13:34	0:0	2	=
water	13:36	0:0	2	0
water	13:37	0:0	2	,
decl	13:2	13:67	2	uint8	bytebuff3
op	13:49	0:0	2	=
water	13:51	0:0	2	0
water	13:52	0:0	2	,
decl	13:2	13:67	2	uint8	bytebuff4
op	13:64	0:0	2	=
water	13:66	0:0	2	0
decl	14:2	14:20	2	unsigned char	*src
decl	15:2	15:20	2	unsigned char	*dst
decl	16:2	16:18	2	tsample_t	sample
if	17:2	21:4	2	(( ibuff == NULL ) || ( obuff == NULL ))
cond	17:6	17:39	3	( ibuff == NULL ) || ( obuff == NULL )
water	17:6	0:0	4	(
water	17:7	0:0	4	ibuff
op	17:13	0:0	4	==
water	17:16	0:0	4	NULL
water	17:20	0:0	4	)
op	17:22	0:0	4	||
water	17:25	0:0	4	(
water	17:26	0:0	4	obuff
op	17:32	0:0	4	==
water	17:35	0:0	4	NULL
water	17:39	0:0	4	)
stmts	18:4	21:4	3	
water	18:4	0:0	4	{
call	19:4	19:67	4	TIFFError
arg	19:14	19:36	5	"reverseSamples32bits"
water	19:14	0:0	6	"reverseSamples32bits"
arg	19:37	19:67	5	"Invalid image or work buffer"
water	19:37	0:0	6	"Invalid image or work buffer"
water	19:68	0:0	4	;
return	20:4	20:14	4	(1)
water	20:11	0:0	5	(
water	20:12	0:0	5	1
water	20:13	0:0	5	)
water	21:4	0:0	4	}
water	22:2	0:0	2	ready_bits
op	22:13	0:0	2	=
water	22:15	0:0	2	0
water	22:16	0:0	2	;
water	23:2	0:0	2	mask_bits
op	23:12	0:0	2	=
water	23:15	0:0	2	(
water	23:16	0:0	2	uint64
water	23:22	0:0	2	)
op	23:23	0:0	2	-
water	23:24	0:0	2	1
op	23:26	0:0	2	>>
water	23:29	0:0	2	(
water	23:30	0:0	2	64
op	23:33	0:0	2	-
water	23:35	0:0	2	bps
water	23:38	0:0	2	)
water	23:39	0:0	2	;
water	24:2	0:0	2	dst
op	24:6	0:0	2	=
water	24:8	0:0	2	obuff
water	24:13	0:0	2	;
for	31:2	82:4	2	(col = width ;col > 0;col --)
forinit	31:7	31:18	3	col = width ;
water	31:7	0:0	4	col
op	31:11	0:0	4	=
water	31:13	0:0	4	width
water	31:18	0:0	4	;
cond	31:20	31:26	3	col > 0
water	31:20	0:0	4	col
op	31:24	0:0	4	>
water	31:26	0:0	4	0
forexpr	31:29	31:32	3	col --
water	31:29	0:0	4	col
op	31:32	0:0	4	--
stmts	32:4	82:4	3	
water	32:4	0:0	4	{
water	34:4	0:0	4	bit_offset
op	34:15	0:0	4	=
water	34:17	0:0	4	(
water	34:18	0:0	4	col
op	34:22	0:0	4	-
water	34:24	0:0	4	1
water	34:25	0:0	4	)
op	34:27	0:0	4	*
water	34:29	0:0	4	bps
op	34:33	0:0	4	*
water	34:35	0:0	4	spp
water	34:38	0:0	4	;
for	35:4	81:6	4	(sample = 0 ;sample < spp;sample ++)
forinit	35:9	35:19	5	sample = 0 ;
water	35:9	0:0	6	sample
op	35:16	0:0	6	=
water	35:18	0:0	6	0
water	35:19	0:0	6	;
cond	35:21	35:30	5	sample < spp
water	35:21	0:0	6	sample
op	35:28	0:0	6	<
water	35:30	0:0	6	spp
forexpr	35:35	35:41	5	sample ++
water	35:35	0:0	6	sample
op	35:41	0:0	6	++
stmts	36:6	81:6	5	
water	36:6	0:0	6	{
if	37:6	41:8	6	(sample == 0)
cond	37:10	37:20	7	sample == 0
water	37:10	0:0	8	sample
op	37:17	0:0	8	==
water	37:20	0:0	8	0
stmts	38:8	41:8	7	
water	38:8	0:0	8	{
water	39:8	0:0	8	src_byte
op	39:17	0:0	8	=
water	39:19	0:0	8	bit_offset
op	39:30	0:0	8	/
water	39:32	0:0	8	8
water	39:33	0:0	8	;
water	40:8	0:0	8	high_bit
op	40:18	0:0	8	=
water	40:20	0:0	8	bit_offset
op	40:31	0:0	8	%
water	40:33	0:0	8	8
water	40:34	0:0	8	;
water	41:8	0:0	8	}
else	42:6	46:8	6
stmts	43:8	46:8	7	
water	43:8	0:0	8	{
water	44:8	0:0	8	src_byte
op	44:17	0:0	8	=
water	44:19	0:0	8	(
water	44:20	0:0	8	bit_offset
op	44:31	0:0	8	+
water	44:33	0:0	8	(
water	44:34	0:0	8	sample
op	44:41	0:0	8	*
water	44:43	0:0	8	bps
water	44:46	0:0	8	)
water	44:47	0:0	8	)
op	44:49	0:0	8	/
water	44:51	0:0	8	8
water	44:52	0:0	8	;
water	45:8	0:0	8	high_bit
op	45:18	0:0	8	=
water	45:20	0:0	8	(
water	45:21	0:0	8	bit_offset
op	45:32	0:0	8	+
water	45:34	0:0	8	(
water	45:35	0:0	8	sample
op	45:42	0:0	8	*
water	45:44	0:0	8	bps
water	45:47	0:0	8	)
water	45:48	0:0	8	)
op	45:50	0:0	8	%
water	45:52	0:0	8	8
water	45:53	0:0	8	;
water	46:8	0:0	8	}
water	47:6	0:0	6	src
op	47:10	0:0	6	=
water	47:12	0:0	6	ibuff
op	47:18	0:0	6	+
water	47:20	0:0	6	src_byte
water	47:28	0:0	6	;
water	48:6	0:0	6	match_bits
op	48:17	0:0	6	=
water	48:19	0:0	6	mask_bits
op	48:29	0:0	6	<<
water	48:32	0:0	6	(
water	48:33	0:0	6	64
op	48:36	0:0	6	-
water	48:38	0:0	6	high_bit
op	48:47	0:0	6	-
water	48:49	0:0	6	bps
water	48:52	0:0	6	)
water	48:53	0:0	6	;
if	49:6	53:8	6	(little_endian)
cond	49:10	49:10	7	little_endian
water	49:10	0:0	8	little_endian
stmts	50:8	53:8	7	
water	50:8	0:0	8	{
water	51:1	0:0	8	longbuff1
op	51:11	0:0	8	=
water	51:13	0:0	8	(
water	51:14	0:0	8	src
op	51:17	0:0	8	[
water	51:18	0:0	8	0
op	51:19	0:0	8	]
op	51:21	0:0	8	<<
water	51:24	0:0	8	24
water	51:26	0:0	8	)
op	51:28	0:0	8	|
water	51:30	0:0	8	(
water	51:31	0:0	8	src
op	51:34	0:0	8	[
water	51:35	0:0	8	1
op	51:36	0:0	8	]
op	51:38	0:0	8	<<
water	51:41	0:0	8	16
water	51:43	0:0	8	)
op	51:45	0:0	8	|
water	51:47	0:0	8	(
water	51:48	0:0	8	src
op	51:51	0:0	8	[
water	51:52	0:0	8	2
op	51:53	0:0	8	]
op	51:55	0:0	8	<<
water	51:58	0:0	8	8
water	51:59	0:0	8	)
op	51:61	0:0	8	|
water	51:63	0:0	8	src
op	51:66	0:0	8	[
water	51:67	0:0	8	3
op	51:68	0:0	8	]
water	51:69	0:0	8	;
water	52:8	0:0	8	longbuff2
op	52:18	0:0	8	=
water	52:20	0:0	8	longbuff1
water	52:29	0:0	8	;
water	53:8	0:0	8	}
else	54:6	58:1	6
stmts	55:8	58:1	7	
water	55:8	0:0	8	{
water	56:1	0:0	8	longbuff1
op	56:11	0:0	8	=
water	56:13	0:0	8	(
water	56:14	0:0	8	src
op	56:17	0:0	8	[
water	56:18	0:0	8	3
op	56:19	0:0	8	]
op	56:21	0:0	8	<<
water	56:24	0:0	8	24
water	56:26	0:0	8	)
op	56:28	0:0	8	|
water	56:30	0:0	8	(
water	56:31	0:0	8	src
op	56:34	0:0	8	[
water	56:35	0:0	8	2
op	56:36	0:0	8	]
op	56:38	0:0	8	<<
water	56:41	0:0	8	16
water	56:43	0:0	8	)
op	56:45	0:0	8	|
water	56:47	0:0	8	(
water	56:48	0:0	8	src
op	56:51	0:0	8	[
water	56:52	0:0	8	1
op	56:53	0:0	8	]
op	56:55	0:0	8	<<
water	56:58	0:0	8	8
water	56:59	0:0	8	)
op	56:61	0:0	8	|
water	56:63	0:0	8	src
op	56:66	0:0	8	[
water	56:67	0:0	8	0
op	56:68	0:0	8	]
water	56:69	0:0	8	;
water	57:8	0:0	8	longbuff2
op	57:18	0:0	8	=
water	57:20	0:0	8	longbuff1
water	57:29	0:0	8	;
water	58:1	0:0	8	}
water	59:6	0:0	6	buff3
op	59:12	0:0	6	=
water	59:14	0:0	6	(
water	59:15	0:0	6	(
water	59:16	0:0	6	uint64
water	59:22	0:0	6	)
water	59:23	0:0	6	longbuff1
op	59:33	0:0	6	<<
water	59:36	0:0	6	32
water	59:38	0:0	6	)
op	59:40	0:0	6	|
water	59:42	0:0	6	longbuff2
water	59:51	0:0	6	;
water	60:6	0:0	6	buff1
op	60:12	0:0	6	=
water	60:14	0:0	6	(
water	60:15	0:0	6	buff3
op	60:21	0:0	6	&
water	60:23	0:0	6	match_bits
water	60:33	0:0	6	)
op	60:35	0:0	6	<<
water	60:38	0:0	6	(
water	60:39	0:0	6	high_bit
water	60:47	0:0	6	)
water	60:48	0:0	6	;
if	61:6	65:8	6	(ready_bits < 32)
cond	61:10	61:23	7	ready_bits < 32
water	61:10	0:0	8	ready_bits
op	61:21	0:0	8	<
water	61:23	0:0	8	32
stmts	62:8	65:8	7	
water	62:8	0:0	8	{
water	63:8	0:0	8	bytebuff1
op	63:18	0:0	8	=
water	63:20	0:0	8	bytebuff2
op	63:30	0:0	8	=
water	63:32	0:0	8	bytebuff3
op	63:42	0:0	8	=
water	63:44	0:0	8	bytebuff4
op	63:54	0:0	8	=
water	63:56	0:0	8	0
water	63:57	0:0	8	;
water	64:8	0:0	8	buff2
op	64:14	0:0	8	=
water	64:16	0:0	8	(
water	64:17	0:0	8	buff2
op	64:23	0:0	8	|
water	64:25	0:0	8	(
water	64:26	0:0	8	buff1
op	64:32	0:0	8	>>
water	64:35	0:0	8	ready_bits
water	64:45	0:0	8	)
water	64:46	0:0	8	)
water	64:47	0:0	8	;
water	65:8	0:0	8	}
else	66:6	79:8	6
stmts	67:8	79:8	7	
water	67:8	0:0	8	{
water	68:8	0:0	8	bytebuff1
op	68:18	0:0	8	=
water	68:20	0:0	8	(
water	68:21	0:0	8	buff2
op	68:27	0:0	8	>>
water	68:30	0:0	8	56
water	68:32	0:0	8	)
water	68:33	0:0	8	;
op	69:8	0:0	8	*
water	69:9	0:0	8	dst
op	69:12	0:0	8	++
op	69:15	0:0	8	=
water	69:17	0:0	8	bytebuff1
water	69:26	0:0	8	;
water	70:8	0:0	8	bytebuff2
op	70:18	0:0	8	=
water	70:20	0:0	8	(
water	70:21	0:0	8	buff2
op	70:27	0:0	8	>>
water	70:30	0:0	8	48
water	70:32	0:0	8	)
water	70:33	0:0	8	;
op	71:8	0:0	8	*
water	71:9	0:0	8	dst
op	71:12	0:0	8	++
op	71:15	0:0	8	=
water	71:17	0:0	8	bytebuff2
water	71:26	0:0	8	;
water	72:8	0:0	8	bytebuff3
op	72:18	0:0	8	=
water	72:20	0:0	8	(
water	72:21	0:0	8	buff2
op	72:27	0:0	8	>>
water	72:30	0:0	8	40
water	72:32	0:0	8	)
water	72:33	0:0	8	;
op	73:8	0:0	8	*
water	73:9	0:0	8	dst
op	73:12	0:0	8	++
op	73:15	0:0	8	=
water	73:17	0:0	8	bytebuff3
water	73:26	0:0	8	;
water	74:8	0:0	8	bytebuff4
op	74:18	0:0	8	=
water	74:20	0:0	8	(
water	74:21	0:0	8	buff2
op	74:27	0:0	8	>>
water	74:30	0:0	8	32
water	74:32	0:0	8	)
water	74:33	0:0	8	;
op	75:8	0:0	8	*
water	75:9	0:0	8	dst
op	75:12	0:0	8	++
op	75:15	0:0	8	=
water	75:17	0:0	8	bytebuff4
water	75:26	0:0	8	;
water	76:8	0:0	8	ready_bits
op	76:19	0:0	8	-=
water	76:22	0:0	8	32
water	76:24	0:0	8	;
water	78:8	0:0	8	buff2
op	78:14	0:0	8	=
water	78:16	0:0	8	(
water	78:17	0:0	8	(
water	78:18	0:0	8	buff2
op	78:24	0:0	8	<<
water	78:27	0:0	8	32
water	78:29	0:0	8	)
op	78:31	0:0	8	|
water	78:33	0:0	8	(
water	78:34	0:0	8	buff1
op	78:40	0:0	8	>>
water	78:43	0:0	8	ready_bits
water	78:53	0:0	8	)
water	78:54	0:0	8	)
water	78:55	0:0	8	;
water	79:8	0:0	8	}
water	80:6	0:0	6	ready_bits
op	80:17	0:0	6	+=
water	80:20	0:0	6	bps
water	80:23	0:0	6	;
water	81:6	0:0	6	}
water	82:4	0:0	4	}
while	83:2	89:4	2	(ready_bits > 0)
cond	83:9	83:22	3	ready_bits > 0
water	83:9	0:0	4	ready_bits
op	83:20	0:0	4	>
water	83:22	0:0	4	0
stmts	84:4	89:4	3	
water	84:4	0:0	4	{
water	85:4	0:0	4	bytebuff1
op	85:14	0:0	4	=
water	85:16	0:0	4	(
water	85:17	0:0	4	buff2
op	85:23	0:0	4	>>
water	85:26	0:0	4	56
water	85:28	0:0	4	)
water	85:29	0:0	4	;
op	86:4	0:0	4	*
water	86:5	0:0	4	dst
op	86:8	0:0	4	++
op	86:11	0:0	4	=
water	86:13	0:0	4	bytebuff1
water	86:22	0:0	4	;
water	87:4	0:0	4	buff2
op	87:10	0:0	4	=
water	87:12	0:0	4	(
water	87:13	0:0	4	buff2
op	87:19	0:0	4	<<
water	87:22	0:0	4	8
water	87:23	0:0	4	)
water	87:24	0:0	4	;
water	88:4	0:0	4	ready_bits
op	88:15	0:0	4	-=
water	88:18	0:0	4	8
water	88:19	0:0	4	;
water	89:4	0:0	4	}
return	90:2	90:12	2	(0)
water	90:9	0:0	3	(
water	90:10	0:0	3	0
water	90:11	0:0	3	)
