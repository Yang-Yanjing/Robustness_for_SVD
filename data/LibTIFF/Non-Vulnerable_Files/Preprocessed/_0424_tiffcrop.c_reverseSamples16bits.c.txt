func	1:0	68:2	0	static int	reverseSamples16bits
params	2:21	0:0	1	
param	2:22	2:32	2	uint16	spp
param	2:34	2:44	2	uint16	bps
param	2:46	2:58	2	uint32	width
param	3:22	3:34	2	uint8 *	ibuff
param	3:36	3:48	2	uint8 *	obuff
stmnts	0:0	67:12	1	
decl	5:2	5:25	2	int	ready_bits
op	5:22	0:0	2	=
water	5:24	0:0	2	0
decl	6:2	6:14	2	uint32	col
decl	7:2	7:37	2	uint32	src_byte
op	7:20	0:0	2	=
water	7:22	0:0	2	0
water	7:23	0:0	2	,
decl	7:2	7:37	2	uint32	high_bit
op	7:34	0:0	2	=
water	7:36	0:0	2	0
decl	8:2	8:25	2	uint32	bit_offset
op	8:22	0:0	2	=
water	8:24	0:0	2	0
decl	9:2	9:40	2	uint16	match_bits
op	9:22	0:0	2	=
water	9:24	0:0	2	0
water	9:25	0:0	2	,
decl	9:2	9:40	2	uint16	mask_bits
op	9:37	0:0	2	=
water	9:39	0:0	2	0
decl	10:2	10:31	2	uint16	buff1
op	10:17	0:0	2	=
water	10:19	0:0	2	0
water	10:20	0:0	2	,
decl	10:2	10:31	2	uint16	buff2
op	10:28	0:0	2	=
water	10:30	0:0	2	0
decl	11:2	11:23	2	uint8	bytebuff
op	11:20	0:0	2	=
water	11:22	0:0	2	0
decl	12:2	12:20	2	unsigned char	*src
decl	13:2	13:20	2	unsigned char	*dst
decl	14:2	14:18	2	tsample_t	sample
if	15:2	19:4	2	(( ibuff == NULL ) || ( obuff == NULL ))
cond	15:6	15:39	3	( ibuff == NULL ) || ( obuff == NULL )
water	15:6	0:0	4	(
water	15:7	0:0	4	ibuff
op	15:13	0:0	4	==
water	15:16	0:0	4	NULL
water	15:20	0:0	4	)
op	15:22	0:0	4	||
water	15:25	0:0	4	(
water	15:26	0:0	4	obuff
op	15:32	0:0	4	==
water	15:35	0:0	4	NULL
water	15:39	0:0	4	)
stmts	16:4	19:4	3	
water	16:4	0:0	4	{
call	17:4	17:66	4	TIFFError
arg	17:14	17:35	5	"reverseSample16bits"
water	17:14	0:0	6	"reverseSample16bits"
arg	17:36	17:66	5	"Invalid image or work buffer"
water	17:36	0:0	6	"Invalid image or work buffer"
water	17:67	0:0	4	;
return	18:4	18:14	4	(1)
water	18:11	0:0	5	(
water	18:12	0:0	5	1
water	18:13	0:0	5	)
water	19:4	0:0	4	}
water	20:2	0:0	2	ready_bits
op	20:13	0:0	2	=
water	20:15	0:0	2	0
water	20:16	0:0	2	;
water	21:2	0:0	2	mask_bits
op	21:12	0:0	2	=
water	21:15	0:0	2	(
water	21:16	0:0	2	uint16
water	21:22	0:0	2	)
op	21:23	0:0	2	-
water	21:24	0:0	2	1
op	21:26	0:0	2	>>
water	21:29	0:0	2	(
water	21:30	0:0	2	16
op	21:33	0:0	2	-
water	21:35	0:0	2	bps
water	21:38	0:0	2	)
water	21:39	0:0	2	;
water	22:2	0:0	2	dst
op	22:6	0:0	2	=
water	22:8	0:0	2	obuff
water	22:13	0:0	2	;
for	23:2	61:4	2	(col = width ;col > 0;col --)
forinit	23:7	23:18	3	col = width ;
water	23:7	0:0	4	col
op	23:11	0:0	4	=
water	23:13	0:0	4	width
water	23:18	0:0	4	;
cond	23:20	23:26	3	col > 0
water	23:20	0:0	4	col
op	23:24	0:0	4	>
water	23:26	0:0	4	0
forexpr	23:29	23:32	3	col --
water	23:29	0:0	4	col
op	23:32	0:0	4	--
stmts	24:4	61:4	3	
water	24:4	0:0	4	{
water	26:4	0:0	4	bit_offset
op	26:15	0:0	4	=
water	26:17	0:0	4	(
water	26:18	0:0	4	col
op	26:22	0:0	4	-
water	26:24	0:0	4	1
water	26:25	0:0	4	)
op	26:27	0:0	4	*
water	26:29	0:0	4	bps
op	26:33	0:0	4	*
water	26:35	0:0	4	spp
water	26:38	0:0	4	;
for	27:4	60:6	4	(sample = 0 ;sample < spp;sample ++)
forinit	27:9	27:19	5	sample = 0 ;
water	27:9	0:0	6	sample
op	27:16	0:0	6	=
water	27:18	0:0	6	0
water	27:19	0:0	6	;
cond	27:21	27:30	5	sample < spp
water	27:21	0:0	6	sample
op	27:28	0:0	6	<
water	27:30	0:0	6	spp
forexpr	27:35	27:41	5	sample ++
water	27:35	0:0	6	sample
op	27:41	0:0	6	++
stmts	28:6	60:6	5	
water	28:6	0:0	6	{
if	29:6	33:8	6	(sample == 0)
cond	29:10	29:20	7	sample == 0
water	29:10	0:0	8	sample
op	29:17	0:0	8	==
water	29:20	0:0	8	0
stmts	30:8	33:8	7	
water	30:8	0:0	8	{
water	31:8	0:0	8	src_byte
op	31:17	0:0	8	=
water	31:19	0:0	8	bit_offset
op	31:30	0:0	8	/
water	31:32	0:0	8	8
water	31:33	0:0	8	;
water	32:8	0:0	8	high_bit
op	32:18	0:0	8	=
water	32:20	0:0	8	bit_offset
op	32:31	0:0	8	%
water	32:33	0:0	8	8
water	32:34	0:0	8	;
water	33:8	0:0	8	}
else	34:6	38:8	6
stmts	35:8	38:8	7	
water	35:8	0:0	8	{
water	36:8	0:0	8	src_byte
op	36:17	0:0	8	=
water	36:19	0:0	8	(
water	36:20	0:0	8	bit_offset
op	36:31	0:0	8	+
water	36:33	0:0	8	(
water	36:34	0:0	8	sample
op	36:41	0:0	8	*
water	36:43	0:0	8	bps
water	36:46	0:0	8	)
water	36:47	0:0	8	)
op	36:49	0:0	8	/
water	36:51	0:0	8	8
water	36:52	0:0	8	;
water	37:8	0:0	8	high_bit
op	37:18	0:0	8	=
water	37:20	0:0	8	(
water	37:21	0:0	8	bit_offset
op	37:32	0:0	8	+
water	37:34	0:0	8	(
water	37:35	0:0	8	sample
op	37:42	0:0	8	*
water	37:44	0:0	8	bps
water	37:47	0:0	8	)
water	37:48	0:0	8	)
op	37:50	0:0	8	%
water	37:52	0:0	8	8
water	37:53	0:0	8	;
water	38:8	0:0	8	}
water	39:6	0:0	6	src
op	39:10	0:0	6	=
water	39:12	0:0	6	ibuff
op	39:18	0:0	6	+
water	39:20	0:0	6	src_byte
water	39:28	0:0	6	;
water	40:6	0:0	6	match_bits
op	40:17	0:0	6	=
water	40:19	0:0	6	mask_bits
op	40:29	0:0	6	<<
water	40:32	0:0	6	(
water	40:33	0:0	6	16
op	40:36	0:0	6	-
water	40:38	0:0	6	high_bit
op	40:47	0:0	6	-
water	40:49	0:0	6	bps
water	40:52	0:0	6	)
water	40:53	0:0	6	;
if	41:6	42:38	6	(little_endian)
cond	41:10	41:10	7	little_endian
water	41:10	0:0	8	little_endian
stmts	42:8	42:38	7	
water	42:8	0:0	8	buff1
op	42:14	0:0	8	=
water	42:16	0:0	8	(
water	42:17	0:0	8	src
op	42:20	0:0	8	[
water	42:21	0:0	8	0
op	42:22	0:0	8	]
op	42:24	0:0	8	<<
water	42:27	0:0	8	8
water	42:28	0:0	8	)
op	42:30	0:0	8	|
water	42:32	0:0	8	src
op	42:35	0:0	8	[
water	42:36	0:0	8	1
op	42:37	0:0	8	]
water	42:38	0:0	8	;
else	43:6	44:38	6
stmts	44:8	44:38	7	
water	44:8	0:0	8	buff1
op	44:14	0:0	8	=
water	44:16	0:0	8	(
water	44:17	0:0	8	src
op	44:20	0:0	8	[
water	44:21	0:0	8	1
op	44:22	0:0	8	]
op	44:24	0:0	8	<<
water	44:27	0:0	8	8
water	44:28	0:0	8	)
op	44:30	0:0	8	|
water	44:32	0:0	8	src
op	44:35	0:0	8	[
water	44:36	0:0	8	0
op	44:37	0:0	8	]
water	44:38	0:0	8	;
water	45:6	0:0	6	buff1
op	45:12	0:0	6	=
water	45:14	0:0	6	(
water	45:15	0:0	6	buff1
op	45:21	0:0	6	&
water	45:23	0:0	6	match_bits
water	45:33	0:0	6	)
op	45:35	0:0	6	<<
water	45:38	0:0	6	(
water	45:39	0:0	6	high_bit
water	45:47	0:0	6	)
water	45:48	0:0	6	;
if	46:6	50:8	6	(ready_bits < 8)
cond	46:10	46:23	7	ready_bits < 8
water	46:10	0:0	8	ready_bits
op	46:21	0:0	8	<
water	46:23	0:0	8	8
stmts	47:8	50:8	7	
water	47:8	0:0	8	{
water	48:8	0:0	8	bytebuff
op	48:17	0:0	8	=
water	48:19	0:0	8	0
water	48:20	0:0	8	;
water	49:8	0:0	8	buff2
op	49:14	0:0	8	=
water	49:16	0:0	8	(
water	49:17	0:0	8	buff2
op	49:23	0:0	8	|
water	49:25	0:0	8	(
water	49:26	0:0	8	buff1
op	49:32	0:0	8	>>
water	49:35	0:0	8	ready_bits
water	49:45	0:0	8	)
water	49:46	0:0	8	)
water	49:47	0:0	8	;
water	50:8	0:0	8	}
else	51:6	58:8	6
stmts	52:8	58:8	7	
water	52:8	0:0	8	{
water	53:8	0:0	8	bytebuff
op	53:17	0:0	8	=
water	53:19	0:0	8	(
water	53:20	0:0	8	buff2
op	53:26	0:0	8	>>
water	53:29	0:0	8	8
water	53:30	0:0	8	)
water	53:31	0:0	8	;
op	54:8	0:0	8	*
water	54:9	0:0	8	dst
op	54:12	0:0	8	++
op	54:15	0:0	8	=
water	54:17	0:0	8	bytebuff
water	54:25	0:0	8	;
water	55:8	0:0	8	ready_bits
op	55:19	0:0	8	-=
water	55:22	0:0	8	8
water	55:23	0:0	8	;
water	57:8	0:0	8	buff2
op	57:14	0:0	8	=
water	57:16	0:0	8	(
water	57:17	0:0	8	(
water	57:18	0:0	8	buff2
op	57:24	0:0	8	<<
water	57:27	0:0	8	8
water	57:28	0:0	8	)
op	57:30	0:0	8	|
water	57:32	0:0	8	(
water	57:33	0:0	8	buff1
op	57:39	0:0	8	>>
water	57:42	0:0	8	ready_bits
water	57:52	0:0	8	)
water	57:53	0:0	8	)
water	57:54	0:0	8	;
water	58:8	0:0	8	}
water	59:6	0:0	6	ready_bits
op	59:17	0:0	6	+=
water	59:20	0:0	6	bps
water	59:23	0:0	6	;
water	60:6	0:0	6	}
water	61:4	0:0	4	}
if	62:2	66:4	2	(ready_bits > 0)
cond	62:6	62:19	3	ready_bits > 0
water	62:6	0:0	4	ready_bits
op	62:17	0:0	4	>
water	62:19	0:0	4	0
stmts	63:4	66:4	3	
water	63:4	0:0	4	{
water	64:4	0:0	4	bytebuff
op	64:13	0:0	4	=
water	64:15	0:0	4	(
water	64:16	0:0	4	buff2
op	64:22	0:0	4	>>
water	64:25	0:0	4	8
water	64:26	0:0	4	)
water	64:27	0:0	4	;
op	65:4	0:0	4	*
water	65:5	0:0	4	dst
op	65:8	0:0	4	++
op	65:11	0:0	4	=
water	65:13	0:0	4	bytebuff
water	65:21	0:0	4	;
water	66:4	0:0	4	}
return	67:2	67:12	2	(0)
water	67:9	0:0	3	(
water	67:10	0:0	3	0
water	67:11	0:0	3	)
