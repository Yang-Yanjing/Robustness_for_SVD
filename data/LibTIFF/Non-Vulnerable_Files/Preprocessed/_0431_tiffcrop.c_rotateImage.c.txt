func	1:0	269:2	0	static int	rotateImage
params	2:11	0:0	1	
param	2:12	2:27	2	uint16	rotation
param	2:29	2:53	2	struct image_data *	image
param	2:55	2:72	2	uint32 *	img_width
param	3:12	3:30	2	uint32 *	img_length
param	3:32	3:57	2	unsigned char * *	ibuff_ptr
stmnts	0:0	268:12	1	
decl	5:2	5:22	2	int	shift_width
decl	6:2	6:44	2	uint32	bytes_per_pixel
water	6:26	0:0	2	,
decl	6:2	6:44	2	uint32	bytes_per_sample
decl	7:2	7:47	2	uint32	row
water	7:14	0:0	2	,
decl	7:2	7:47	2	uint32	rowsize
water	7:23	0:0	2	,
decl	7:2	7:47	2	uint32	src_offset
water	7:35	0:0	2	,
decl	7:2	7:47	2	uint32	dst_offset
decl	8:2	8:32	2	uint32	i
water	8:12	0:0	2	,
decl	8:2	8:32	2	uint32	col
water	8:17	0:0	2	,
decl	8:2	8:32	2	uint32	width
water	8:24	0:0	2	,
decl	8:2	8:32	2	uint32	length
decl	9:2	9:52	2	uint32	colsize
water	9:18	0:0	2	,
decl	9:2	9:52	2	uint32	buffsize
water	9:28	0:0	2	,
decl	9:2	9:52	2	uint32	col_offset
water	9:40	0:0	2	,
decl	9:2	9:52	2	uint32	pix_offset
decl	10:2	10:22	2	unsigned char	*ibuff
decl	11:2	11:20	2	unsigned char	*src
decl	12:2	12:20	2	unsigned char	*dst
decl	13:2	13:19	2	uint16	spp
water	13:14	0:0	2	,
decl	13:2	13:19	2	uint16	bps
decl	14:2	14:19	2	float	res_temp
decl	15:2	15:29	2	unsigned char	*rbuff
op	15:23	0:0	2	=
water	15:25	0:0	2	NULL
water	16:2	0:0	2	width
op	16:9	0:0	2	=
op	16:11	0:0	2	*
water	16:12	0:0	2	img_width
water	16:21	0:0	2	;
water	17:2	0:0	2	length
op	17:9	0:0	2	=
op	17:11	0:0	2	*
water	17:12	0:0	2	img_length
water	17:22	0:0	2	;
water	18:2	0:0	2	spp
op	18:6	0:0	2	=
water	18:8	0:0	2	image
op	18:13	0:0	2	->
water	18:15	0:0	2	spp
water	18:18	0:0	2	;
water	19:2	0:0	2	bps
op	19:6	0:0	2	=
water	19:8	0:0	2	image
op	19:13	0:0	2	->
water	19:15	0:0	2	bps
water	19:18	0:0	2	;
water	20:2	0:0	2	rowsize
op	20:10	0:0	2	=
water	20:12	0:0	2	(
water	20:13	0:0	2	(
water	20:14	0:0	2	bps
op	20:18	0:0	2	*
water	20:20	0:0	2	spp
op	20:24	0:0	2	*
water	20:26	0:0	2	width
water	20:31	0:0	2	)
op	20:33	0:0	2	+
water	20:35	0:0	2	7
water	20:36	0:0	2	)
op	20:38	0:0	2	/
water	20:40	0:0	2	8
water	20:41	0:0	2	;
water	21:2	0:0	2	colsize
op	21:10	0:0	2	=
water	21:12	0:0	2	(
water	21:13	0:0	2	(
water	21:14	0:0	2	bps
op	21:18	0:0	2	*
water	21:20	0:0	2	spp
op	21:24	0:0	2	*
water	21:26	0:0	2	length
water	21:32	0:0	2	)
op	21:34	0:0	2	+
water	21:36	0:0	2	7
water	21:37	0:0	2	)
op	21:39	0:0	2	/
water	21:41	0:0	2	8
water	21:42	0:0	2	;
if	22:2	23:36	2	(( colsize * width ) > ( rowsize * length ))
cond	22:6	22:43	3	( colsize * width ) > ( rowsize * length )
water	22:6	0:0	4	(
water	22:7	0:0	4	colsize
op	22:15	0:0	4	*
water	22:17	0:0	4	width
water	22:22	0:0	4	)
op	22:24	0:0	4	>
water	22:26	0:0	4	(
water	22:27	0:0	4	rowsize
op	22:35	0:0	4	*
water	22:37	0:0	4	length
water	22:43	0:0	4	)
stmts	23:4	23:36	3	
water	23:4	0:0	4	buffsize
op	23:13	0:0	4	=
water	23:15	0:0	4	(
water	23:16	0:0	4	colsize
op	23:24	0:0	4	+
water	23:26	0:0	4	1
water	23:27	0:0	4	)
op	23:29	0:0	4	*
water	23:31	0:0	4	width
water	23:36	0:0	4	;
else	24:2	25:37	2
stmts	25:4	25:37	3	
water	25:4	0:0	4	buffsize
op	25:13	0:0	4	=
water	25:15	0:0	4	(
water	25:16	0:0	4	rowsize
op	25:24	0:0	4	+
water	25:26	0:0	4	1
water	25:27	0:0	4	)
op	25:29	0:0	4	*
water	25:31	0:0	4	length
water	25:37	0:0	4	;
water	26:2	0:0	2	bytes_per_sample
op	26:19	0:0	2	=
water	26:21	0:0	2	(
water	26:22	0:0	2	bps
op	26:26	0:0	2	+
water	26:28	0:0	2	7
water	26:29	0:0	2	)
op	26:31	0:0	2	/
water	26:33	0:0	2	8
water	26:34	0:0	2	;
water	27:2	0:0	2	bytes_per_pixel
op	27:19	0:0	2	=
water	27:21	0:0	2	(
water	27:22	0:0	2	(
water	27:23	0:0	2	bps
op	27:27	0:0	2	*
water	27:29	0:0	2	spp
water	27:32	0:0	2	)
op	27:34	0:0	2	+
water	27:36	0:0	2	7
water	27:37	0:0	2	)
op	27:39	0:0	2	/
water	27:41	0:0	2	8
water	27:42	0:0	2	;
if	28:2	29:33	2	(bytes_per_pixel < ( bytes_per_sample + 1 ))
cond	28:6	28:45	3	bytes_per_pixel < ( bytes_per_sample + 1 )
water	28:6	0:0	4	bytes_per_pixel
op	28:22	0:0	4	<
water	28:24	0:0	4	(
water	28:25	0:0	4	bytes_per_sample
op	28:42	0:0	4	+
water	28:44	0:0	4	1
water	28:45	0:0	4	)
stmts	29:4	29:33	3	
water	29:4	0:0	4	shift_width
op	29:16	0:0	4	=
water	29:18	0:0	4	bytes_per_pixel
water	29:33	0:0	4	;
else	30:2	31:38	2
stmts	31:4	31:38	3	
water	31:4	0:0	4	shift_width
op	31:16	0:0	4	=
water	31:18	0:0	4	bytes_per_sample
op	31:35	0:0	4	+
water	31:37	0:0	4	1
water	31:38	0:0	4	;
switch	32:2	41:4	2	(rotation)
cond	32:10	32:10	3	rotation
water	32:10	0:0	4	rotation
stmts	33:4	41:4	3	
water	33:4	0:0	4	{
label	34:4	34:10	4	case 0 :
label	35:4	35:12	4	case 360 :
return	35:14	35:24	4	(0)
water	35:21	0:0	5	(
water	35:22	0:0	5	0
water	35:23	0:0	5	)
label	36:4	36:11	4	case 90 :
label	37:4	37:12	4	case 180 :
label	38:4	38:12	4	case 270 :
break	38:14	38:19	4	
label	39:4	39:11	4	default :
call	39:14	39:76	4	TIFFError
arg	39:24	39:37	5	"rotateImage"
water	39:24	0:0	6	"rotateImage"
arg	39:39	39:66	5	"Invalid rotation angle %d"
water	39:39	0:0	6	"Invalid rotation angle %d"
arg	39:68	39:76	5	rotation
water	39:68	0:0	6	rotation
water	39:77	0:0	4	;
return	40:14	40:25	4	(-1)
water	40:21	0:0	5	(
op	40:22	0:0	5	-
water	40:23	0:0	5	1
water	40:24	0:0	5	)
water	41:4	0:0	4	}
if	42:2	46:4	2	(! ( rbuff = ( unsigned char * )_TIFFmalloc (buffsize ) ))
cond	42:6	42:54	3	! ( rbuff = ( unsigned char * )_TIFFmalloc (buffsize ) )
op	42:6	0:0	4	!
water	42:7	0:0	4	(
water	42:8	0:0	4	rbuff
op	42:14	0:0	4	=
water	42:16	0:0	4	(
water	42:17	0:0	4	unsigned
water	42:26	0:0	4	char
op	42:31	0:0	4	*
water	42:32	0:0	4	)
call	42:33	42:53	4	_TIFFmalloc
arg	42:45	42:53	5	buffsize
water	42:45	0:0	6	buffsize
water	42:54	0:0	4	)
stmts	43:4	46:4	3	
water	43:4	0:0	4	{
call	44:4	44:88	4	TIFFError
arg	44:14	44:27	5	"rotateImage"
water	44:14	0:0	6	"rotateImage"
arg	44:29	44:78	5	"Unable to allocate rotation buffer of %1u bytes"
water	44:29	0:0	6	"Unable to allocate rotation buffer of %1u bytes"
arg	44:80	44:88	5	buffsize
water	44:80	0:0	6	buffsize
water	44:89	0:0	4	;
return	45:4	45:15	4	(-1)
water	45:11	0:0	5	(
op	45:12	0:0	5	-
water	45:13	0:0	5	1
water	45:14	0:0	5	)
water	46:4	0:0	4	}
call	47:2	47:35	2	_TIFFmemset
arg	47:14	47:19	3	rbuff
water	47:14	0:0	4	rbuff
arg	47:21	47:25	3	'\0'
water	47:21	0:0	4	'\0'
arg	47:27	47:35	3	buffsize
water	47:27	0:0	4	buffsize
water	47:36	0:0	2	;
water	48:2	0:0	2	ibuff
op	48:8	0:0	2	=
op	48:10	0:0	2	*
water	48:11	0:0	2	ibuff_ptr
water	48:20	0:0	2	;
switch	49:2	267:4	2	(rotation)
cond	49:10	49:10	3	rotation
water	49:10	0:0	4	rotation
stmts	50:4	267:4	3	
water	50:4	0:0	4	{
label	51:4	51:12	4	case 180 :
if	51:14	66:16	4	(( bps % 8 ) == 0)
cond	51:18	51:31	5	( bps % 8 ) == 0
water	51:18	0:0	6	(
water	51:19	0:0	6	bps
op	51:23	0:0	6	%
water	51:25	0:0	6	8
water	51:26	0:0	6	)
op	51:28	0:0	6	==
water	51:31	0:0	6	0
stmts	52:16	66:16	5	
water	52:16	0:0	6	{
water	53:16	0:0	6	src
op	53:20	0:0	6	=
water	53:22	0:0	6	ibuff
water	53:27	0:0	6	;
water	54:16	0:0	6	pix_offset
op	54:27	0:0	6	=
water	54:29	0:0	6	(
water	54:30	0:0	6	spp
op	54:34	0:0	6	*
water	54:36	0:0	6	bps
water	54:39	0:0	6	)
op	54:41	0:0	6	/
water	54:43	0:0	6	8
water	54:44	0:0	6	;
for	55:16	65:19	6	(row = 0 ;row < length;row ++)
forinit	55:21	55:28	7	row = 0 ;
water	55:21	0:0	8	row
op	55:25	0:0	8	=
water	55:27	0:0	8	0
water	55:28	0:0	8	;
cond	55:30	55:36	7	row < length
water	55:30	0:0	8	row
op	55:34	0:0	8	<
water	55:36	0:0	8	length
forexpr	55:44	55:47	7	row ++
water	55:44	0:0	8	row
op	55:47	0:0	8	++
stmts	56:19	65:19	7	
water	56:19	0:0	8	{
water	57:5	0:0	8	dst_offset
op	57:16	0:0	8	=
water	57:18	0:0	8	(
water	57:19	0:0	8	length
op	57:26	0:0	8	-
water	57:28	0:0	8	row
op	57:32	0:0	8	-
water	57:34	0:0	8	1
water	57:35	0:0	8	)
op	57:37	0:0	8	*
water	57:39	0:0	8	rowsize
water	57:46	0:0	8	;
for	58:19	64:21	8	(col = 0 ;col < width;col ++)
forinit	58:24	58:31	9	col = 0 ;
water	58:24	0:0	10	col
op	58:28	0:0	10	=
water	58:30	0:0	10	0
water	58:31	0:0	10	;
cond	58:33	58:39	9	col < width
water	58:33	0:0	10	col
op	58:37	0:0	10	<
water	58:39	0:0	10	width
forexpr	58:46	58:49	9	col ++
water	58:46	0:0	10	col
op	58:49	0:0	10	++
stmts	59:21	64:21	9	
water	59:21	0:0	10	{
water	60:7	0:0	10	col_offset
op	60:18	0:0	10	=
water	60:20	0:0	10	(
water	60:21	0:0	10	width
op	60:27	0:0	10	-
water	60:29	0:0	10	col
op	60:33	0:0	10	-
water	60:35	0:0	10	1
water	60:36	0:0	10	)
op	60:38	0:0	10	*
water	60:40	0:0	10	pix_offset
water	60:50	0:0	10	;
water	61:21	0:0	10	dst
op	61:25	0:0	10	=
water	61:27	0:0	10	rbuff
op	61:33	0:0	10	+
water	61:35	0:0	10	dst_offset
op	61:46	0:0	10	+
water	61:48	0:0	10	col_offset
water	61:58	0:0	10	;
for	62:7	63:24	10	(i = 0 ;i < bytes_per_pixel;i ++)
forinit	62:12	62:17	11	i = 0 ;
water	62:12	0:0	12	i
op	62:14	0:0	12	=
water	62:16	0:0	12	0
water	62:17	0:0	12	;
cond	62:19	62:24	11	i < bytes_per_pixel
water	62:19	0:0	12	i
op	62:22	0:0	12	<
water	62:24	0:0	12	bytes_per_pixel
forexpr	62:41	62:42	11	i ++
water	62:41	0:0	12	i
op	62:42	0:0	12	++
stmts	63:9	63:24	11	
op	63:9	0:0	12	*
water	63:10	0:0	12	dst
op	63:13	0:0	12	++
op	63:16	0:0	12	=
op	63:18	0:0	12	*
water	63:19	0:0	12	src
op	63:22	0:0	12	++
water	63:24	0:0	12	;
water	64:21	0:0	10	}
water	65:19	0:0	8	}
water	66:16	0:0	6	}
else	67:7	111:2	4
stmts	68:16	111:2	5	
water	68:16	0:0	6	{
for	69:16	110:4	6	(row = 0 ;row < length;row ++)
forinit	69:21	69:28	7	row = 0 ;
water	69:21	0:0	8	row
op	69:25	0:0	8	=
water	69:27	0:0	8	0
water	69:28	0:0	8	;
cond	69:30	69:36	7	row < length
water	69:30	0:0	8	row
op	69:34	0:0	8	<
water	69:36	0:0	8	length
forexpr	69:44	69:47	7	row ++
water	69:44	0:0	8	row
op	69:47	0:0	8	++
stmts	70:18	110:4	7	
water	70:18	0:0	8	{
water	71:4	0:0	8	src_offset
op	71:15	0:0	8	=
water	71:17	0:0	8	row
op	71:21	0:0	8	*
water	71:23	0:0	8	rowsize
water	71:30	0:0	8	;
water	72:4	0:0	8	dst_offset
op	72:15	0:0	8	=
water	72:17	0:0	8	(
water	72:18	0:0	8	length
op	72:25	0:0	8	-
water	72:27	0:0	8	row
op	72:31	0:0	8	-
water	72:33	0:0	8	1
water	72:34	0:0	8	)
op	72:36	0:0	8	*
water	72:38	0:0	8	rowsize
water	72:45	0:0	8	;
water	73:4	0:0	8	src
op	73:8	0:0	8	=
water	73:10	0:0	8	ibuff
op	73:16	0:0	8	+
water	73:18	0:0	8	src_offset
water	73:28	0:0	8	;
water	74:18	0:0	8	dst
op	74:22	0:0	8	=
water	74:24	0:0	8	rbuff
op	74:30	0:0	8	+
water	74:32	0:0	8	dst_offset
water	74:42	0:0	8	;
switch	75:18	109:20	8	(shift_width)
cond	75:26	75:26	9	shift_width
water	75:26	0:0	10	shift_width
stmts	76:20	109:20	9	
water	76:20	0:0	10	{
label	77:20	77:26	10	case 1 :
if	77:28	85:30	10	(bps == 1)
cond	77:32	77:39	11	bps == 1
water	77:32	0:0	12	bps
op	77:36	0:0	12	==
water	77:39	0:0	12	1
stmts	78:9	85:30	11	
water	78:9	0:0	12	{
if	79:30	83:32	12	(reverseSamples8bits (spp ,bps ,width ,src ,dst ))
cond	79:34	79:79	13	reverseSamples8bits (spp ,bps ,width ,src ,dst )
call	79:34	79:79	14	reverseSamples8bits
arg	79:54	79:57	15	spp
water	79:54	0:0	16	spp
arg	79:59	79:62	15	bps
water	79:59	0:0	16	bps
arg	79:64	79:69	15	width
water	79:64	0:0	16	width
arg	79:71	79:74	15	src
water	79:71	0:0	16	src
arg	79:76	79:79	15	dst
water	79:76	0:0	16	dst
stmts	80:32	83:32	13	
water	80:32	0:0	14	{
call	81:18	81:33	14	_TIFFfree
arg	81:28	81:33	15	rbuff
water	81:28	0:0	16	rbuff
water	81:34	0:0	14	;
return	82:32	82:43	14	(-1)
water	82:39	0:0	15	(
op	82:40	0:0	15	-
water	82:41	0:0	15	1
water	82:42	0:0	15	)
water	83:32	0:0	14	}
break	84:30	84:35	12	
water	85:30	0:0	12	}
if	86:28	90:30	10	(reverseSamples16bits (spp ,bps ,width ,src ,dst ))
cond	86:32	86:78	11	reverseSamples16bits (spp ,bps ,width ,src ,dst )
call	86:32	86:78	12	reverseSamples16bits
arg	86:53	86:56	13	spp
water	86:53	0:0	14	spp
arg	86:58	86:61	13	bps
water	86:58	0:0	14	bps
arg	86:63	86:68	13	width
water	86:63	0:0	14	width
arg	86:70	86:73	13	src
water	86:70	0:0	14	src
arg	86:75	86:78	13	dst
water	86:75	0:0	14	dst
stmts	87:30	90:30	11	
water	87:30	0:0	12	{
call	88:16	88:31	12	_TIFFfree
arg	88:26	88:31	13	rbuff
water	88:26	0:0	14	rbuff
water	88:32	0:0	12	;
return	89:30	89:41	12	(-1)
water	89:37	0:0	13	(
op	89:38	0:0	13	-
water	89:39	0:0	13	1
water	89:40	0:0	13	)
water	90:30	0:0	12	}
break	91:29	91:34	10	
label	92:20	92:26	10	case 2 :
if	92:28	96:30	10	(reverseSamples24bits (spp ,bps ,width ,src ,dst ))
cond	92:32	92:78	11	reverseSamples24bits (spp ,bps ,width ,src ,dst )
call	92:32	92:78	12	reverseSamples24bits
arg	92:53	92:56	13	spp
water	92:53	0:0	14	spp
arg	92:58	92:61	13	bps
water	92:58	0:0	14	bps
arg	92:63	92:68	13	width
water	92:63	0:0	14	width
arg	92:70	92:73	13	src
water	92:70	0:0	14	src
arg	92:75	92:78	13	dst
water	92:75	0:0	14	dst
stmts	93:30	96:30	11	
water	93:30	0:0	12	{
call	94:16	94:31	12	_TIFFfree
arg	94:26	94:31	13	rbuff
water	94:26	0:0	14	rbuff
water	94:32	0:0	12	;
return	95:30	95:41	12	(-1)
water	95:37	0:0	13	(
op	95:38	0:0	13	-
water	95:39	0:0	13	1
water	95:40	0:0	13	)
water	96:30	0:0	12	}
break	97:29	97:34	10	
label	98:20	98:26	10	case 3 :
label	99:20	99:26	10	case 4 :
label	100:20	100:26	10	case 5 :
if	100:28	104:30	10	(reverseSamples32bits (spp ,bps ,width ,src ,dst ))
cond	100:32	100:78	11	reverseSamples32bits (spp ,bps ,width ,src ,dst )
call	100:32	100:78	12	reverseSamples32bits
arg	100:53	100:56	13	spp
water	100:53	0:0	14	spp
arg	100:58	100:61	13	bps
water	100:58	0:0	14	bps
arg	100:63	100:68	13	width
water	100:63	0:0	14	width
arg	100:70	100:73	13	src
water	100:70	0:0	14	src
arg	100:75	100:78	13	dst
water	100:75	0:0	14	dst
stmts	101:30	104:30	11	
water	101:30	0:0	12	{
call	102:16	102:31	12	_TIFFfree
arg	102:26	102:31	13	rbuff
water	102:26	0:0	14	rbuff
water	102:32	0:0	12	;
return	103:30	103:41	12	(-1)
water	103:37	0:0	13	(
op	103:38	0:0	13	-
water	103:39	0:0	13	1
water	103:40	0:0	13	)
water	104:30	0:0	12	}
break	105:29	105:34	10	
label	106:20	106:27	10	default :
call	106:29	106:84	10	TIFFError
arg	106:39	106:52	11	"rotateImage"
water	106:39	0:0	12	"rotateImage"
arg	106:53	106:79	11	"Unsupported bit depth %d"
water	106:53	0:0	12	"Unsupported bit depth %d"
arg	106:81	106:84	11	bps
water	106:81	0:0	12	bps
water	106:85	0:0	10	;
call	107:15	107:30	10	_TIFFfree
arg	107:25	107:30	11	rbuff
water	107:25	0:0	12	rbuff
water	107:31	0:0	10	;
return	108:29	108:40	10	(-1)
water	108:36	0:0	11	(
op	108:37	0:0	11	-
water	108:38	0:0	11	1
water	108:39	0:0	11	)
water	109:20	0:0	10	}
water	110:4	0:0	8	}
water	111:2	0:0	6	}
call	112:14	112:29	4	_TIFFfree
arg	112:24	112:29	5	ibuff
water	112:24	0:0	6	ibuff
water	112:30	0:0	4	;
op	113:14	0:0	4	*
water	113:15	0:0	4	(
water	113:16	0:0	4	ibuff_ptr
water	113:25	0:0	4	)
op	113:27	0:0	4	=
water	113:29	0:0	4	rbuff
water	113:34	0:0	4	;
break	114:14	114:19	4	
label	115:4	115:11	4	case 90 :
if	115:14	130:2	4	(( bps % 8 ) == 0)
cond	115:18	115:31	5	( bps % 8 ) == 0
water	115:18	0:0	6	(
water	115:19	0:0	6	bps
op	115:23	0:0	6	%
water	115:25	0:0	6	8
water	115:26	0:0	6	)
op	115:28	0:0	6	==
water	115:31	0:0	6	0
stmts	116:16	130:2	5	
water	116:16	0:0	6	{
for	117:16	129:4	6	(col = 0 ;col < width;col ++)
forinit	117:21	117:28	7	col = 0 ;
water	117:21	0:0	8	col
op	117:25	0:0	8	=
water	117:27	0:0	8	0
water	117:28	0:0	8	;
cond	117:30	117:36	7	col < width
water	117:30	0:0	8	col
op	117:34	0:0	8	<
water	117:36	0:0	8	width
forexpr	117:43	117:46	7	col ++
water	117:43	0:0	8	col
op	117:46	0:0	8	++
stmts	118:18	129:4	7	
water	118:18	0:0	8	{
water	119:4	0:0	8	src_offset
op	119:15	0:0	8	=
water	119:17	0:0	8	(
water	119:18	0:0	8	(
water	119:19	0:0	8	length
op	119:26	0:0	8	-
water	119:28	0:0	8	1
water	119:29	0:0	8	)
op	119:31	0:0	8	*
water	119:33	0:0	8	rowsize
water	119:40	0:0	8	)
op	119:42	0:0	8	+
water	119:44	0:0	8	(
water	119:45	0:0	8	col
op	119:49	0:0	8	*
water	119:51	0:0	8	bytes_per_pixel
water	119:66	0:0	8	)
water	119:67	0:0	8	;
water	120:18	0:0	8	dst_offset
op	120:29	0:0	8	=
water	120:31	0:0	8	col
op	120:35	0:0	8	*
water	120:37	0:0	8	colsize
water	120:44	0:0	8	;
water	121:4	0:0	8	src
op	121:8	0:0	8	=
water	121:10	0:0	8	ibuff
op	121:16	0:0	8	+
water	121:18	0:0	8	src_offset
water	121:28	0:0	8	;
water	122:4	0:0	8	dst
op	122:8	0:0	8	=
water	122:10	0:0	8	rbuff
op	122:16	0:0	8	+
water	122:18	0:0	8	dst_offset
water	122:28	0:0	8	;
for	123:18	128:20	8	(row = length ;row > 0;row --)
forinit	123:23	123:35	9	row = length ;
water	123:23	0:0	10	row
op	123:27	0:0	10	=
water	123:29	0:0	10	length
water	123:35	0:0	10	;
cond	123:37	123:43	9	row > 0
water	123:37	0:0	10	row
op	123:41	0:0	10	>
water	123:43	0:0	10	0
forexpr	123:46	123:49	9	row --
water	123:46	0:0	10	row
op	123:49	0:0	10	--
stmts	124:20	128:20	9	
water	124:20	0:0	10	{
for	125:20	126:41	10	(i = 0 ;i < bytes_per_pixel;i ++)
forinit	125:25	125:30	11	i = 0 ;
water	125:25	0:0	12	i
op	125:27	0:0	12	=
water	125:29	0:0	12	0
water	125:30	0:0	12	;
cond	125:32	125:36	11	i < bytes_per_pixel
water	125:32	0:0	12	i
op	125:34	0:0	12	<
water	125:36	0:0	12	bytes_per_pixel
forexpr	125:53	125:54	11	i ++
water	125:53	0:0	12	i
op	125:54	0:0	12	++
stmts	126:22	126:41	11	
op	126:22	0:0	12	*
water	126:23	0:0	12	dst
op	126:26	0:0	12	++
op	126:29	0:0	12	=
op	126:31	0:0	12	*
water	126:32	0:0	12	(
water	126:33	0:0	12	src
op	126:37	0:0	12	+
water	126:39	0:0	12	i
water	126:40	0:0	12	)
water	126:41	0:0	12	;
water	127:6	0:0	10	src
op	127:10	0:0	10	-=
water	127:13	0:0	10	rowsize
water	127:20	0:0	10	;
water	128:20	0:0	10	}
water	129:4	0:0	8	}
water	130:2	0:0	6	}
else	131:14	179:2	4
stmts	132:16	179:2	5	
water	132:16	0:0	6	{
for	133:16	178:4	6	(col = 0 ;col < width;col ++)
forinit	133:21	133:28	7	col = 0 ;
water	133:21	0:0	8	col
op	133:25	0:0	8	=
water	133:27	0:0	8	0
water	133:28	0:0	8	;
cond	133:30	133:36	7	col < width
water	133:30	0:0	8	col
op	133:34	0:0	8	<
water	133:36	0:0	8	width
forexpr	133:43	133:46	7	col ++
water	133:43	0:0	8	col
op	133:46	0:0	8	++
stmts	134:18	178:4	7	
water	134:18	0:0	8	{
water	135:4	0:0	8	src_offset
op	135:15	0:0	8	=
water	135:17	0:0	8	(
water	135:18	0:0	8	length
op	135:25	0:0	8	-
water	135:27	0:0	8	1
water	135:28	0:0	8	)
op	135:30	0:0	8	*
water	135:32	0:0	8	rowsize
water	135:39	0:0	8	;
water	136:18	0:0	8	dst_offset
op	136:29	0:0	8	=
water	136:31	0:0	8	col
op	136:35	0:0	8	*
water	136:37	0:0	8	colsize
water	136:44	0:0	8	;
water	137:4	0:0	8	src
op	137:8	0:0	8	=
water	137:10	0:0	8	ibuff
op	137:16	0:0	8	+
water	137:18	0:0	8	src_offset
water	137:28	0:0	8	;
water	138:4	0:0	8	dst
op	138:8	0:0	8	=
water	138:10	0:0	8	rbuff
op	138:16	0:0	8	+
water	138:18	0:0	8	dst_offset
water	138:28	0:0	8	;
switch	139:18	177:6	8	(shift_width)
cond	139:26	139:26	9	shift_width
water	139:26	0:0	10	shift_width
stmts	140:20	177:6	9	
water	140:20	0:0	10	{
label	141:20	141:26	10	case 1 :
if	141:28	150:30	10	(bps == 1)
cond	141:32	141:39	11	bps == 1
water	141:32	0:0	12	bps
op	141:36	0:0	12	==
water	141:39	0:0	12	1
stmts	142:9	150:30	11	
water	142:9	0:0	12	{
if	143:30	148:32	12	(rotateContigSamples8bits (rotation ,spp ,bps ,width ,length ,col ,src ,dst ))
cond	143:34	144:46	13	rotateContigSamples8bits (rotation ,spp ,bps ,width ,length ,col ,src ,dst )
call	143:34	144:46	14	rotateContigSamples8bits
arg	143:59	143:67	15	rotation
water	143:59	0:0	16	rotation
arg	143:69	143:72	15	spp
water	143:69	0:0	16	spp
arg	143:74	143:77	15	bps
water	143:74	0:0	16	bps
arg	143:79	143:84	15	width
water	143:79	0:0	16	width
arg	144:25	144:31	15	length
water	144:25	0:0	16	length
arg	144:33	144:36	15	col
water	144:33	0:0	16	col
arg	144:38	144:41	15	src
water	144:38	0:0	16	src
arg	144:43	144:46	15	dst
water	144:43	0:0	16	dst
stmts	145:32	148:32	13	
water	145:32	0:0	14	{
call	146:18	146:33	14	_TIFFfree
arg	146:28	146:33	15	rbuff
water	146:28	0:0	16	rbuff
water	146:34	0:0	14	;
return	147:32	147:43	14	(-1)
water	147:39	0:0	15	(
op	147:40	0:0	15	-
water	147:41	0:0	15	1
water	147:42	0:0	15	)
water	148:32	0:0	14	}
break	149:30	149:35	12	
water	150:30	0:0	12	}
if	151:28	156:16	10	(rotateContigSamples16bits (rotation ,spp ,bps ,width ,length ,col ,src ,dst ))
cond	151:32	152:46	11	rotateContigSamples16bits (rotation ,spp ,bps ,width ,length ,col ,src ,dst )
call	151:32	152:46	12	rotateContigSamples16bits
arg	151:58	151:66	13	rotation
water	151:58	0:0	14	rotation
arg	151:68	151:71	13	spp
water	151:68	0:0	14	spp
arg	151:73	151:76	13	bps
water	151:73	0:0	14	bps
arg	151:78	151:83	13	width
water	151:78	0:0	14	width
arg	152:25	152:31	13	length
water	152:25	0:0	14	length
arg	152:33	152:36	13	col
water	152:33	0:0	14	col
arg	152:38	152:41	13	src
water	152:38	0:0	14	src
arg	152:43	152:46	13	dst
water	152:43	0:0	14	dst
stmts	153:30	156:16	11	
water	153:30	0:0	12	{
call	154:23	154:38	12	_TIFFfree
arg	154:33	154:38	13	rbuff
water	154:33	0:0	14	rbuff
water	154:39	0:0	12	;
return	155:30	155:41	12	(-1)
water	155:37	0:0	13	(
op	155:38	0:0	13	-
water	155:39	0:0	13	1
water	155:40	0:0	13	)
water	156:16	0:0	12	}
break	157:14	157:19	10	
label	158:20	158:26	10	case 2 :
if	158:28	163:30	10	(rotateContigSamples24bits (rotation ,spp ,bps ,width ,length ,col ,src ,dst ))
cond	158:32	159:44	11	rotateContigSamples24bits (rotation ,spp ,bps ,width ,length ,col ,src ,dst )
call	158:32	159:44	12	rotateContigSamples24bits
arg	158:58	158:66	13	rotation
water	158:58	0:0	14	rotation
arg	158:68	158:71	13	spp
water	158:68	0:0	14	spp
arg	158:73	158:76	13	bps
water	158:73	0:0	14	bps
arg	158:78	158:83	13	width
water	158:78	0:0	14	width
arg	159:23	159:29	13	length
water	159:23	0:0	14	length
arg	159:31	159:34	13	col
water	159:31	0:0	14	col
arg	159:36	159:39	13	src
water	159:36	0:0	14	src
arg	159:41	159:44	13	dst
water	159:41	0:0	14	dst
stmts	160:30	163:30	11	
water	160:30	0:0	12	{
call	161:16	161:31	12	_TIFFfree
arg	161:26	161:31	13	rbuff
water	161:26	0:0	14	rbuff
water	161:32	0:0	12	;
return	162:30	162:41	12	(-1)
water	162:37	0:0	13	(
op	162:38	0:0	13	-
water	162:39	0:0	13	1
water	162:40	0:0	13	)
water	163:30	0:0	12	}
break	164:29	164:34	10	
label	165:20	165:26	10	case 3 :
label	166:20	166:26	10	case 4 :
label	167:20	167:26	10	case 5 :
if	167:28	172:30	10	(rotateContigSamples32bits (rotation ,spp ,bps ,width ,length ,col ,src ,dst ))
cond	167:32	168:44	11	rotateContigSamples32bits (rotation ,spp ,bps ,width ,length ,col ,src ,dst )
call	167:32	168:44	12	rotateContigSamples32bits
arg	167:58	167:66	13	rotation
water	167:58	0:0	14	rotation
arg	167:68	167:71	13	spp
water	167:68	0:0	14	spp
arg	167:73	167:76	13	bps
water	167:73	0:0	14	bps
arg	167:78	167:83	13	width
water	167:78	0:0	14	width
arg	168:23	168:29	13	length
water	168:23	0:0	14	length
arg	168:31	168:34	13	col
water	168:31	0:0	14	col
arg	168:36	168:39	13	src
water	168:36	0:0	14	src
arg	168:41	168:44	13	dst
water	168:41	0:0	14	dst
stmts	169:30	172:30	11	
water	169:30	0:0	12	{
call	170:16	170:31	12	_TIFFfree
arg	170:26	170:31	13	rbuff
water	170:26	0:0	14	rbuff
water	170:32	0:0	12	;
return	171:30	171:41	12	(-1)
water	171:37	0:0	13	(
op	171:38	0:0	13	-
water	171:39	0:0	13	1
water	171:40	0:0	13	)
water	172:30	0:0	12	}
break	173:29	173:34	10	
label	174:20	174:27	10	default :
call	174:29	174:84	10	TIFFError
arg	174:39	174:52	11	"rotateImage"
water	174:39	0:0	12	"rotateImage"
arg	174:53	174:79	11	"Unsupported bit depth %d"
water	174:53	0:0	12	"Unsupported bit depth %d"
arg	174:81	174:84	11	bps
water	174:81	0:0	12	bps
water	174:85	0:0	10	;
call	175:15	175:30	10	_TIFFfree
arg	175:25	175:30	11	rbuff
water	175:25	0:0	12	rbuff
water	175:31	0:0	10	;
return	176:29	176:40	10	(-1)
water	176:36	0:0	11	(
op	176:37	0:0	11	-
water	176:38	0:0	11	1
water	176:39	0:0	11	)
water	177:6	0:0	10	}
water	178:4	0:0	8	}
water	179:2	0:0	6	}
call	180:14	180:29	4	_TIFFfree
arg	180:24	180:29	5	ibuff
water	180:24	0:0	6	ibuff
water	180:30	0:0	4	;
op	181:14	0:0	4	*
water	181:15	0:0	4	(
water	181:16	0:0	4	ibuff_ptr
water	181:25	0:0	4	)
op	181:27	0:0	4	=
water	181:29	0:0	4	rbuff
water	181:34	0:0	4	;
op	182:14	0:0	4	*
water	182:15	0:0	4	img_width
op	182:25	0:0	4	=
water	182:27	0:0	4	length
water	182:33	0:0	4	;
op	183:14	0:0	4	*
water	183:15	0:0	4	img_length
op	183:26	0:0	4	=
water	183:28	0:0	4	width
water	183:33	0:0	4	;
water	184:14	0:0	4	image
op	184:19	0:0	4	->
water	184:21	0:0	4	width
op	184:27	0:0	4	=
water	184:29	0:0	4	length
water	184:35	0:0	4	;
water	185:14	0:0	4	image
op	185:19	0:0	4	->
water	185:21	0:0	4	length
op	185:28	0:0	4	=
water	185:30	0:0	4	width
water	185:35	0:0	4	;
water	186:14	0:0	4	res_temp
op	186:23	0:0	4	=
water	186:25	0:0	4	image
op	186:30	0:0	4	->
water	186:32	0:0	4	xres
water	186:36	0:0	4	;
water	187:14	0:0	4	image
op	187:19	0:0	4	->
water	187:21	0:0	4	xres
op	187:26	0:0	4	=
water	187:28	0:0	4	image
op	187:33	0:0	4	->
water	187:35	0:0	4	yres
water	187:39	0:0	4	;
water	188:14	0:0	4	image
op	188:19	0:0	4	->
water	188:21	0:0	4	yres
op	188:26	0:0	4	=
water	188:28	0:0	4	res_temp
water	188:36	0:0	4	;
break	189:7	189:12	4	
label	190:4	190:12	4	case 270 :
if	190:14	205:2	4	(( bps % 8 ) == 0)
cond	190:18	190:31	5	( bps % 8 ) == 0
water	190:18	0:0	6	(
water	190:19	0:0	6	bps
op	190:23	0:0	6	%
water	190:25	0:0	6	8
water	190:26	0:0	6	)
op	190:28	0:0	6	==
water	190:31	0:0	6	0
stmts	191:16	205:2	5	
water	191:16	0:0	6	{
for	192:16	204:4	6	(col = 0 ;col < width;col ++)
forinit	192:21	192:28	7	col = 0 ;
water	192:21	0:0	8	col
op	192:25	0:0	8	=
water	192:27	0:0	8	0
water	192:28	0:0	8	;
cond	192:30	192:36	7	col < width
water	192:30	0:0	8	col
op	192:34	0:0	8	<
water	192:36	0:0	8	width
forexpr	192:43	192:46	7	col ++
water	192:43	0:0	8	col
op	192:46	0:0	8	++
stmts	193:18	204:4	7	
water	193:18	0:0	8	{
water	194:4	0:0	8	src_offset
op	194:15	0:0	8	=
water	194:17	0:0	8	col
op	194:21	0:0	8	*
water	194:23	0:0	8	bytes_per_pixel
water	194:38	0:0	8	;
water	195:18	0:0	8	dst_offset
op	195:29	0:0	8	=
water	195:31	0:0	8	(
water	195:32	0:0	8	width
op	195:38	0:0	8	-
water	195:40	0:0	8	col
op	195:44	0:0	8	-
water	195:46	0:0	8	1
water	195:47	0:0	8	)
op	195:49	0:0	8	*
water	195:51	0:0	8	colsize
water	195:58	0:0	8	;
water	196:4	0:0	8	src
op	196:8	0:0	8	=
water	196:10	0:0	8	ibuff
op	196:16	0:0	8	+
water	196:18	0:0	8	src_offset
water	196:28	0:0	8	;
water	197:4	0:0	8	dst
op	197:8	0:0	8	=
water	197:10	0:0	8	rbuff
op	197:16	0:0	8	+
water	197:18	0:0	8	dst_offset
water	197:28	0:0	8	;
for	198:18	203:20	8	(row = length ;row > 0;row --)
forinit	198:23	198:35	9	row = length ;
water	198:23	0:0	10	row
op	198:27	0:0	10	=
water	198:29	0:0	10	length
water	198:35	0:0	10	;
cond	198:37	198:43	9	row > 0
water	198:37	0:0	10	row
op	198:41	0:0	10	>
water	198:43	0:0	10	0
forexpr	198:46	198:49	9	row --
water	198:46	0:0	10	row
op	198:49	0:0	10	--
stmts	199:20	203:20	9	
water	199:20	0:0	10	{
for	200:20	201:41	10	(i = 0 ;i < bytes_per_pixel;i ++)
forinit	200:25	200:30	11	i = 0 ;
water	200:25	0:0	12	i
op	200:27	0:0	12	=
water	200:29	0:0	12	0
water	200:30	0:0	12	;
cond	200:32	200:36	11	i < bytes_per_pixel
water	200:32	0:0	12	i
op	200:34	0:0	12	<
water	200:36	0:0	12	bytes_per_pixel
forexpr	200:53	200:54	11	i ++
water	200:53	0:0	12	i
op	200:54	0:0	12	++
stmts	201:22	201:41	11	
op	201:22	0:0	12	*
water	201:23	0:0	12	dst
op	201:26	0:0	12	++
op	201:29	0:0	12	=
op	201:31	0:0	12	*
water	201:32	0:0	12	(
water	201:33	0:0	12	src
op	201:37	0:0	12	+
water	201:39	0:0	12	i
water	201:40	0:0	12	)
water	201:41	0:0	12	;
water	202:6	0:0	10	src
op	202:10	0:0	10	+=
water	202:13	0:0	10	rowsize
water	202:20	0:0	10	;
water	203:20	0:0	10	}
water	204:4	0:0	8	}
water	205:2	0:0	6	}
else	206:14	254:2	4
stmts	207:16	254:2	5	
water	207:16	0:0	6	{
for	208:16	253:4	6	(col = 0 ;col < width;col ++)
forinit	208:21	208:28	7	col = 0 ;
water	208:21	0:0	8	col
op	208:25	0:0	8	=
water	208:27	0:0	8	0
water	208:28	0:0	8	;
cond	208:30	208:36	7	col < width
water	208:30	0:0	8	col
op	208:34	0:0	8	<
water	208:36	0:0	8	width
forexpr	208:43	208:46	7	col ++
water	208:43	0:0	8	col
op	208:46	0:0	8	++
stmts	209:18	253:4	7	
water	209:18	0:0	8	{
water	210:4	0:0	8	src_offset
op	210:15	0:0	8	=
water	210:17	0:0	8	0
water	210:18	0:0	8	;
water	211:18	0:0	8	dst_offset
op	211:29	0:0	8	=
water	211:31	0:0	8	(
water	211:32	0:0	8	width
op	211:38	0:0	8	-
water	211:40	0:0	8	col
op	211:44	0:0	8	-
water	211:46	0:0	8	1
water	211:47	0:0	8	)
op	211:49	0:0	8	*
water	211:51	0:0	8	colsize
water	211:58	0:0	8	;
water	212:4	0:0	8	src
op	212:8	0:0	8	=
water	212:10	0:0	8	ibuff
op	212:16	0:0	8	+
water	212:18	0:0	8	src_offset
water	212:28	0:0	8	;
water	213:4	0:0	8	dst
op	213:8	0:0	8	=
water	213:10	0:0	8	rbuff
op	213:16	0:0	8	+
water	213:18	0:0	8	dst_offset
water	213:28	0:0	8	;
switch	214:18	252:6	8	(shift_width)
cond	214:26	214:26	9	shift_width
water	214:26	0:0	10	shift_width
stmts	215:20	252:6	9	
water	215:20	0:0	10	{
label	216:20	216:26	10	case 1 :
if	216:28	225:30	10	(bps == 1)
cond	216:32	216:39	11	bps == 1
water	216:32	0:0	12	bps
op	216:36	0:0	12	==
water	216:39	0:0	12	1
stmts	217:9	225:30	11	
water	217:9	0:0	12	{
if	218:30	223:32	12	(rotateContigSamples8bits (rotation ,spp ,bps ,width ,length ,col ,src ,dst ))
cond	218:34	219:46	13	rotateContigSamples8bits (rotation ,spp ,bps ,width ,length ,col ,src ,dst )
call	218:34	219:46	14	rotateContigSamples8bits
arg	218:59	218:67	15	rotation
water	218:59	0:0	16	rotation
arg	218:69	218:72	15	spp
water	218:69	0:0	16	spp
arg	218:74	218:77	15	bps
water	218:74	0:0	16	bps
arg	218:79	218:84	15	width
water	218:79	0:0	16	width
arg	219:25	219:31	15	length
water	219:25	0:0	16	length
arg	219:33	219:36	15	col
water	219:33	0:0	16	col
arg	219:38	219:41	15	src
water	219:38	0:0	16	src
arg	219:43	219:46	15	dst
water	219:43	0:0	16	dst
stmts	220:32	223:32	13	
water	220:32	0:0	14	{
call	221:18	221:33	14	_TIFFfree
arg	221:28	221:33	15	rbuff
water	221:28	0:0	16	rbuff
water	221:34	0:0	14	;
return	222:32	222:43	14	(-1)
water	222:39	0:0	15	(
op	222:40	0:0	15	-
water	222:41	0:0	15	1
water	222:42	0:0	15	)
water	223:32	0:0	14	}
break	224:30	224:35	12	
water	225:30	0:0	12	}
if	226:28	231:16	10	(rotateContigSamples16bits (rotation ,spp ,bps ,width ,length ,col ,src ,dst ))
cond	226:32	227:46	11	rotateContigSamples16bits (rotation ,spp ,bps ,width ,length ,col ,src ,dst )
call	226:32	227:46	12	rotateContigSamples16bits
arg	226:58	226:66	13	rotation
water	226:58	0:0	14	rotation
arg	226:68	226:71	13	spp
water	226:68	0:0	14	spp
arg	226:73	226:76	13	bps
water	226:73	0:0	14	bps
arg	226:78	226:83	13	width
water	226:78	0:0	14	width
arg	227:25	227:31	13	length
water	227:25	0:0	14	length
arg	227:33	227:36	13	col
water	227:33	0:0	14	col
arg	227:38	227:41	13	src
water	227:38	0:0	14	src
arg	227:43	227:46	13	dst
water	227:43	0:0	14	dst
stmts	228:30	231:16	11	
water	228:30	0:0	12	{
call	229:23	229:38	12	_TIFFfree
arg	229:33	229:38	13	rbuff
water	229:33	0:0	14	rbuff
water	229:39	0:0	12	;
return	230:30	230:41	12	(-1)
water	230:37	0:0	13	(
op	230:38	0:0	13	-
water	230:39	0:0	13	1
water	230:40	0:0	13	)
water	231:16	0:0	12	}
break	232:14	232:19	10	
label	233:20	233:26	10	case 2 :
if	233:28	238:30	10	(rotateContigSamples24bits (rotation ,spp ,bps ,width ,length ,col ,src ,dst ))
cond	233:32	234:44	11	rotateContigSamples24bits (rotation ,spp ,bps ,width ,length ,col ,src ,dst )
call	233:32	234:44	12	rotateContigSamples24bits
arg	233:58	233:66	13	rotation
water	233:58	0:0	14	rotation
arg	233:68	233:71	13	spp
water	233:68	0:0	14	spp
arg	233:73	233:76	13	bps
water	233:73	0:0	14	bps
arg	233:78	233:83	13	width
water	233:78	0:0	14	width
arg	234:23	234:29	13	length
water	234:23	0:0	14	length
arg	234:31	234:34	13	col
water	234:31	0:0	14	col
arg	234:36	234:39	13	src
water	234:36	0:0	14	src
arg	234:41	234:44	13	dst
water	234:41	0:0	14	dst
stmts	235:30	238:30	11	
water	235:30	0:0	12	{
call	236:16	236:31	12	_TIFFfree
arg	236:26	236:31	13	rbuff
water	236:26	0:0	14	rbuff
water	236:32	0:0	12	;
return	237:30	237:41	12	(-1)
water	237:37	0:0	13	(
op	237:38	0:0	13	-
water	237:39	0:0	13	1
water	237:40	0:0	13	)
water	238:30	0:0	12	}
break	239:29	239:34	10	
label	240:20	240:26	10	case 3 :
label	241:20	241:26	10	case 4 :
label	242:20	242:26	10	case 5 :
if	242:28	247:30	10	(rotateContigSamples32bits (rotation ,spp ,bps ,width ,length ,col ,src ,dst ))
cond	242:32	243:44	11	rotateContigSamples32bits (rotation ,spp ,bps ,width ,length ,col ,src ,dst )
call	242:32	243:44	12	rotateContigSamples32bits
arg	242:58	242:66	13	rotation
water	242:58	0:0	14	rotation
arg	242:68	242:71	13	spp
water	242:68	0:0	14	spp
arg	242:73	242:76	13	bps
water	242:73	0:0	14	bps
arg	242:78	242:83	13	width
water	242:78	0:0	14	width
arg	243:23	243:29	13	length
water	243:23	0:0	14	length
arg	243:31	243:34	13	col
water	243:31	0:0	14	col
arg	243:36	243:39	13	src
water	243:36	0:0	14	src
arg	243:41	243:44	13	dst
water	243:41	0:0	14	dst
stmts	244:30	247:30	11	
water	244:30	0:0	12	{
call	245:16	245:31	12	_TIFFfree
arg	245:26	245:31	13	rbuff
water	245:26	0:0	14	rbuff
water	245:32	0:0	12	;
return	246:30	246:41	12	(-1)
water	246:37	0:0	13	(
op	246:38	0:0	13	-
water	246:39	0:0	13	1
water	246:40	0:0	13	)
water	247:30	0:0	12	}
break	248:29	248:34	10	
label	249:20	249:27	10	default :
call	249:29	249:84	10	TIFFError
arg	249:39	249:52	11	"rotateImage"
water	249:39	0:0	12	"rotateImage"
arg	249:53	249:79	11	"Unsupported bit depth %d"
water	249:53	0:0	12	"Unsupported bit depth %d"
arg	249:81	249:84	11	bps
water	249:81	0:0	12	bps
water	249:85	0:0	10	;
call	250:15	250:30	10	_TIFFfree
arg	250:25	250:30	11	rbuff
water	250:25	0:0	12	rbuff
water	250:31	0:0	10	;
return	251:29	251:40	10	(-1)
water	251:36	0:0	11	(
op	251:37	0:0	11	-
water	251:38	0:0	11	1
water	251:39	0:0	11	)
water	252:6	0:0	10	}
water	253:4	0:0	8	}
water	254:2	0:0	6	}
call	255:14	255:29	4	_TIFFfree
arg	255:24	255:29	5	ibuff
water	255:24	0:0	6	ibuff
water	255:30	0:0	4	;
op	256:14	0:0	4	*
water	256:15	0:0	4	(
water	256:16	0:0	4	ibuff_ptr
water	256:25	0:0	4	)
op	256:27	0:0	4	=
water	256:29	0:0	4	rbuff
water	256:34	0:0	4	;
op	257:14	0:0	4	*
water	257:15	0:0	4	img_width
op	257:25	0:0	4	=
water	257:27	0:0	4	length
water	257:33	0:0	4	;
op	258:14	0:0	4	*
water	258:15	0:0	4	img_length
op	258:26	0:0	4	=
water	258:28	0:0	4	width
water	258:33	0:0	4	;
water	259:14	0:0	4	image
op	259:19	0:0	4	->
water	259:21	0:0	4	width
op	259:27	0:0	4	=
water	259:29	0:0	4	length
water	259:35	0:0	4	;
water	260:14	0:0	4	image
op	260:19	0:0	4	->
water	260:21	0:0	4	length
op	260:28	0:0	4	=
water	260:30	0:0	4	width
water	260:35	0:0	4	;
water	261:14	0:0	4	res_temp
op	261:23	0:0	4	=
water	261:25	0:0	4	image
op	261:30	0:0	4	->
water	261:32	0:0	4	xres
water	261:36	0:0	4	;
water	262:14	0:0	4	image
op	262:19	0:0	4	->
water	262:21	0:0	4	xres
op	262:26	0:0	4	=
water	262:28	0:0	4	image
op	262:33	0:0	4	->
water	262:35	0:0	4	yres
water	262:39	0:0	4	;
water	263:14	0:0	4	image
op	263:19	0:0	4	->
water	263:21	0:0	4	yres
op	263:26	0:0	4	=
water	263:28	0:0	4	res_temp
water	263:36	0:0	4	;
break	264:14	264:19	4	
label	265:4	265:11	4	default :
break	266:14	266:19	4	
water	267:4	0:0	4	}
return	268:2	268:12	2	(0)
water	268:9	0:0	3	(
water	268:10	0:0	3	0
water	268:11	0:0	3	)
