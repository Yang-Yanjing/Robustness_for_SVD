func	1:0	211:2	0	static int	processCropSelections
params	2:21	0:0	1	
param	2:22	2:46	2	struct image_data *	image
param	2:48	2:70	2	struct crop_mask *	crop
param	3:22	3:51	2	unsigned char * *	read_buff_ptr
param	3:53	3:80	2	struct buffinfo	seg_buffs[]
stmnts	0:0	210:12	1	
decl	5:2	5:13	2	int	i
decl	6:2	6:52	2	uint32	width
water	6:17	0:0	2	,
decl	6:2	6:52	2	uint32	length
water	6:25	0:0	2	,
decl	6:2	6:52	2	uint32	total_width
water	6:38	0:0	2	,
decl	6:2	6:52	2	uint32	total_length
decl	7:2	7:20	2	tsize_t	cropsize
decl	8:2	8:34	2	unsigned char	*crop_buff
op	8:28	0:0	2	=
water	8:30	0:0	2	NULL
decl	9:2	9:34	2	unsigned char	*read_buff
op	9:28	0:0	2	=
water	9:30	0:0	2	NULL
decl	10:2	10:34	2	unsigned char	*next_buff
op	10:28	0:0	2	=
water	10:30	0:0	2	NULL
decl	11:2	11:29	2	tsize_t	prev_cropsize
op	11:26	0:0	2	=
water	11:28	0:0	2	0
water	12:2	0:0	2	read_buff
op	12:12	0:0	2	=
op	12:14	0:0	2	*
water	12:15	0:0	2	read_buff_ptr
water	12:28	0:0	2	;
if	13:2	105:4	2	(crop -> img_mode == COMPOSITE_IMAGES)
cond	13:6	13:24	3	crop -> img_mode == COMPOSITE_IMAGES
water	13:6	0:0	4	crop
op	13:10	0:0	4	->
water	13:12	0:0	4	img_mode
op	13:21	0:0	4	==
water	13:24	0:0	4	COMPOSITE_IMAGES
stmts	14:4	105:4	3	
water	14:4	0:0	4	{
water	15:4	0:0	4	cropsize
op	15:13	0:0	4	=
water	15:15	0:0	4	crop
op	15:19	0:0	4	->
water	15:21	0:0	4	bufftotal
water	15:30	0:0	4	;
water	16:4	0:0	4	crop_buff
op	16:14	0:0	4	=
water	16:16	0:0	4	seg_buffs
op	16:25	0:0	4	[
water	16:26	0:0	4	0
op	16:27	0:0	4	]
op	16:28	0:0	4	.
water	16:29	0:0	4	buffer
water	16:35	0:0	4	;
if	17:4	18:56	4	(! crop_buff)
cond	17:8	17:9	5	! crop_buff
op	17:8	0:0	6	!
water	17:9	0:0	6	crop_buff
stmts	18:6	18:56	5	
water	18:6	0:0	6	crop_buff
op	18:16	0:0	6	=
water	18:18	0:0	6	(
water	18:19	0:0	6	unsigned
water	18:28	0:0	6	char
op	18:33	0:0	6	*
water	18:34	0:0	6	)
call	18:35	18:55	6	_TIFFmalloc
arg	18:47	18:55	7	cropsize
water	18:47	0:0	8	cropsize
water	18:56	0:0	6	;
else	19:4	33:6	4
stmts	20:6	33:6	5	
water	20:6	0:0	6	{
water	21:6	0:0	6	prev_cropsize
op	21:20	0:0	6	=
water	21:22	0:0	6	seg_buffs
op	21:31	0:0	6	[
water	21:32	0:0	6	0
op	21:33	0:0	6	]
op	21:34	0:0	6	.
water	21:35	0:0	6	size
water	21:39	0:0	6	;
if	22:6	32:8	6	(prev_cropsize < cropsize)
cond	22:10	22:26	7	prev_cropsize < cropsize
water	22:10	0:0	8	prev_cropsize
op	22:24	0:0	8	<
water	22:26	0:0	8	cropsize
stmts	23:8	32:8	7	
water	23:8	0:0	8	{
water	24:8	0:0	8	next_buff
op	24:18	0:0	8	=
call	24:20	24:52	8	_TIFFrealloc
arg	24:33	24:42	9	crop_buff
water	24:33	0:0	10	crop_buff
arg	24:44	24:52	9	cropsize
water	24:44	0:0	10	cropsize
water	24:53	0:0	8	;
if	25:8	29:10	8	(! next_buff)
cond	25:12	25:14	9	! next_buff
op	25:12	0:0	10	!
water	25:14	0:0	10	next_buff
stmts	26:10	29:10	9	
water	26:10	0:0	10	{
call	27:10	27:30	10	_TIFFfree
arg	27:21	27:30	11	crop_buff
water	27:21	0:0	12	crop_buff
water	27:31	0:0	10	;
water	28:10	0:0	10	crop_buff
op	28:20	0:0	10	=
water	28:22	0:0	10	(
water	28:23	0:0	10	unsigned
water	28:32	0:0	10	char
op	28:37	0:0	10	*
water	28:38	0:0	10	)
call	28:39	28:59	10	_TIFFmalloc
arg	28:51	28:59	11	cropsize
water	28:51	0:0	12	cropsize
water	28:60	0:0	10	;
water	29:10	0:0	10	}
else	30:8	31:31	8
stmts	31:10	31:31	9	
water	31:10	0:0	10	crop_buff
op	31:20	0:0	10	=
water	31:22	0:0	10	next_buff
water	31:31	0:0	10	;
water	32:8	0:0	8	}
water	33:6	0:0	6	}
if	34:4	38:6	4	(! crop_buff)
cond	34:8	34:9	5	! crop_buff
op	34:8	0:0	6	!
water	34:9	0:0	6	crop_buff
stmts	35:6	38:6	5	
water	35:6	0:0	6	{
call	36:6	36:84	6	TIFFError
arg	36:16	36:39	7	"processCropSelections"
water	36:16	0:0	8	"processCropSelections"
arg	36:41	36:84	7	"Unable to allocate/reallocate crop buffer"
water	36:41	0:0	8	"Unable to allocate/reallocate crop buffer"
water	36:85	0:0	6	;
return	37:6	37:17	6	(-1)
water	37:13	0:0	7	(
op	37:14	0:0	7	-
water	37:15	0:0	7	1
water	37:16	0:0	7	)
water	38:6	0:0	6	}
call	39:4	39:38	4	_TIFFmemset
arg	39:16	39:25	5	crop_buff
water	39:16	0:0	6	crop_buff
arg	39:27	39:28	5	0
water	39:27	0:0	6	0
arg	39:30	39:38	5	cropsize
water	39:30	0:0	6	cropsize
water	39:39	0:0	4	;
water	40:4	0:0	4	seg_buffs
op	40:13	0:0	4	[
water	40:14	0:0	4	0
op	40:15	0:0	4	]
op	40:16	0:0	4	.
water	40:17	0:0	4	buffer
op	40:24	0:0	4	=
water	40:26	0:0	4	crop_buff
water	40:35	0:0	4	;
water	41:4	0:0	4	seg_buffs
op	41:13	0:0	4	[
water	41:14	0:0	4	0
op	41:15	0:0	4	]
op	41:16	0:0	4	.
water	41:17	0:0	4	size
op	41:22	0:0	4	=
water	41:24	0:0	4	cropsize
water	41:32	0:0	4	;
if	43:4	44:16	4	(extractCompositeRegions (image ,crop ,read_buff ,crop_buff ) != 0)
cond	43:8	43:70	5	extractCompositeRegions (image ,crop ,read_buff ,crop_buff ) != 0
call	43:8	43:65	6	extractCompositeRegions
arg	43:32	43:37	7	image
water	43:32	0:0	8	image
arg	43:39	43:43	7	crop
water	43:39	0:0	8	crop
arg	43:45	43:54	7	read_buff
water	43:45	0:0	8	read_buff
arg	43:56	43:65	7	crop_buff
water	43:56	0:0	8	crop_buff
op	43:67	0:0	6	!=
water	43:70	0:0	6	0
stmts	44:6	44:16	5	
return	44:6	44:16	6	(1)
water	44:13	0:0	7	(
water	44:14	0:0	7	1
water	44:15	0:0	7	)
if	45:4	80:6	4	(crop -> crop_mode & CROP_INVERT)
cond	45:8	45:26	5	crop -> crop_mode & CROP_INVERT
water	45:8	0:0	6	crop
op	45:12	0:0	6	->
water	45:14	0:0	6	crop_mode
op	45:24	0:0	6	&
water	45:26	0:0	6	CROP_INVERT
stmts	46:6	80:6	5	
water	46:6	0:0	6	{
switch	47:6	79:8	6	(crop -> photometric)
cond	47:14	47:20	7	crop -> photometric
water	47:14	0:0	8	crop
op	47:18	0:0	8	->
water	47:20	0:0	8	photometric
stmts	48:8	79:8	7	
water	48:8	0:0	8	{
label	50:8	50:35	8	case PHOTOMETRIC_MINISWHITE :
label	51:8	51:35	8	case PHOTOMETRIC_MINISBLACK :
water	52:6	0:0	8	image
op	52:11	0:0	8	->
water	52:13	0:0	8	photometric
op	52:25	0:0	8	=
water	52:27	0:0	8	crop
op	52:31	0:0	8	->
water	52:33	0:0	8	photometric
water	52:44	0:0	8	;
break	53:6	53:11	8	
label	54:8	54:29	8	case INVERT_DATA_ONLY :
label	55:8	55:32	8	case INVERT_DATA_AND_TAG :
if	56:13	62:15	8	(invertImage (image -> photometric ,image -> spp ,image -> bps ,crop -> combined_width ,crop -> combined_length ,crop_buff ))
cond	56:17	57:83	9	invertImage (image -> photometric ,image -> spp ,image -> bps ,crop -> combined_width ,crop -> combined_length ,crop_buff )
call	56:17	57:83	10	invertImage
arg	56:29	56:47	11	image->photometric
water	56:29	0:0	12	image
op	56:34	0:0	12	->
water	56:36	0:0	12	photometric
arg	56:49	56:59	11	image->spp
water	56:49	0:0	12	image
op	56:54	0:0	12	->
water	56:56	0:0	12	spp
arg	56:61	56:71	11	image->bps
water	56:61	0:0	12	image
op	56:66	0:0	12	->
water	56:68	0:0	12	bps
arg	57:29	57:49	11	crop->combined_width
water	57:29	0:0	12	crop
op	57:33	0:0	12	->
water	57:35	0:0	12	combined_width
arg	57:51	57:72	11	crop->combined_length
water	57:51	0:0	12	crop
op	57:55	0:0	12	->
water	57:57	0:0	12	combined_length
arg	57:74	57:83	11	crop_buff
water	57:74	0:0	12	crop_buff
stmts	58:15	62:15	9	
water	58:15	0:0	10	{
call	59:15	60:76	10	TIFFError
arg	59:25	59:48	11	"processCropSelections"
water	59:25	0:0	12	"processCropSelections"
arg	60:25	60:76	11	"Failed to invert colorspace for composite regions"
water	60:25	0:0	12	"Failed to invert colorspace for composite regions"
water	60:77	0:0	10	;
return	61:15	61:26	10	(-1)
water	61:22	0:0	11	(
op	61:23	0:0	11	-
water	61:24	0:0	11	1
water	61:25	0:0	11	)
water	62:15	0:0	10	}
if	63:13	76:8	8	(crop -> photometric == INVERT_DATA_AND_TAG)
cond	63:17	63:38	9	crop -> photometric == INVERT_DATA_AND_TAG
water	63:17	0:0	10	crop
op	63:21	0:0	10	->
water	63:23	0:0	10	photometric
op	63:35	0:0	10	==
water	63:38	0:0	10	INVERT_DATA_AND_TAG
stmts	64:15	76:8	9	
water	64:15	0:0	10	{
switch	65:15	75:10	10	(image -> photometric)
cond	65:23	65:30	11	image -> photometric
water	65:23	0:0	12	image
op	65:28	0:0	12	->
water	65:30	0:0	12	photometric
stmts	66:17	75:10	11	
water	66:17	0:0	12	{
label	67:17	67:44	12	case PHOTOMETRIC_MINISWHITE :
water	68:16	0:0	12	image
op	68:21	0:0	12	->
water	68:23	0:0	12	photometric
op	68:35	0:0	12	=
water	68:37	0:0	12	PHOTOMETRIC_MINISBLACK
water	68:59	0:0	12	;
break	69:15	69:20	12	
label	70:17	70:44	12	case PHOTOMETRIC_MINISBLACK :
water	71:16	0:0	12	image
op	71:21	0:0	12	->
water	71:23	0:0	12	photometric
op	71:35	0:0	12	=
water	71:37	0:0	12	PHOTOMETRIC_MINISWHITE
water	71:59	0:0	12	;
break	72:15	72:20	12	
label	73:17	73:24	12	default :
break	74:15	74:20	12	
water	75:10	0:0	12	}
water	76:8	0:0	10	}
break	77:13	77:18	8	
label	78:8	78:15	8	default :
break	78:17	78:22	8	
water	79:8	0:0	8	}
water	80:6	0:0	6	}
if	82:4	91:6	4	(crop -> crop_mode & CROP_MIRROR)
cond	82:8	82:26	5	crop -> crop_mode & CROP_MIRROR
water	82:8	0:0	6	crop
op	82:12	0:0	6	->
water	82:14	0:0	6	crop_mode
op	82:24	0:0	6	&
water	82:26	0:0	6	CROP_MIRROR
stmts	83:6	91:6	5	
water	83:6	0:0	6	{
if	84:6	90:8	6	(mirrorImage (image -> spp ,image -> bps ,crop -> mirror ,crop -> combined_width ,crop -> combined_length ,crop_buff ))
cond	84:10	85:76	7	mirrorImage (image -> spp ,image -> bps ,crop -> mirror ,crop -> combined_width ,crop -> combined_length ,crop_buff )
call	84:10	85:76	8	mirrorImage
arg	84:22	84:32	9	image->spp
water	84:22	0:0	10	image
op	84:27	0:0	10	->
water	84:29	0:0	10	spp
arg	84:34	84:44	9	image->bps
water	84:34	0:0	10	image
op	84:39	0:0	10	->
water	84:41	0:0	10	bps
arg	84:46	84:58	9	crop->mirror
water	84:46	0:0	10	crop
op	84:50	0:0	10	->
water	84:52	0:0	10	mirror
arg	85:22	85:42	9	crop->combined_width
water	85:22	0:0	10	crop
op	85:26	0:0	10	->
water	85:28	0:0	10	combined_width
arg	85:44	85:65	9	crop->combined_length
water	85:44	0:0	10	crop
op	85:48	0:0	10	->
water	85:50	0:0	10	combined_length
arg	85:67	85:76	9	crop_buff
water	85:67	0:0	10	crop_buff
stmts	86:8	90:8	7	
water	86:8	0:0	8	{
call	87:8	88:74	8	TIFFError
arg	87:18	87:41	9	"processCropSelections"
water	87:18	0:0	10	"processCropSelections"
arg	87:43	87:82	9	"Failed to mirror composite regions %s"
water	87:43	0:0	10	"Failed to mirror composite regions %s"
arg	88:10	88:74	9	(crop->rotation==MIRROR_HORIZ)?"horizontally":"vertically"
water	88:10	0:0	10	(
water	88:11	0:0	10	crop
op	88:15	0:0	10	->
water	88:17	0:0	10	rotation
op	88:26	0:0	10	==
water	88:29	0:0	10	MIRROR_HORIZ
water	88:41	0:0	10	)
water	88:43	0:0	10	?
water	88:45	0:0	10	"horizontally"
water	88:60	0:0	10	:
water	88:62	0:0	10	"vertically"
water	88:75	0:0	8	;
return	89:8	89:19	8	(-1)
water	89:15	0:0	9	(
op	89:16	0:0	9	-
water	89:17	0:0	9	1
water	89:18	0:0	9	)
water	90:8	0:0	8	}
water	91:6	0:0	6	}
if	92:4	104:6	4	(crop -> crop_mode & CROP_ROTATE)
cond	92:8	92:26	5	crop -> crop_mode & CROP_ROTATE
water	92:8	0:0	6	crop
op	92:12	0:0	6	->
water	92:14	0:0	6	crop_mode
op	92:24	0:0	6	&
water	92:26	0:0	6	CROP_ROTATE
stmts	93:6	104:6	5	
water	93:6	0:0	6	{
if	94:6	100:8	6	(rotateImage (crop -> rotation ,image ,& crop -> combined_width ,& crop -> combined_length ,& crop_buff ))
cond	94:10	95:56	7	rotateImage (crop -> rotation ,image ,& crop -> combined_width ,& crop -> combined_length ,& crop_buff )
call	94:10	95:56	8	rotateImage
arg	94:22	94:36	9	crop->rotation
water	94:22	0:0	10	crop
op	94:26	0:0	10	->
water	94:28	0:0	10	rotation
arg	94:38	94:43	9	image
water	94:38	0:0	10	image
arg	94:45	94:66	9	&crop->combined_width
op	94:45	0:0	10	&
water	94:46	0:0	10	crop
op	94:50	0:0	10	->
water	94:52	0:0	10	combined_width
arg	95:22	95:44	9	&crop->combined_length
op	95:22	0:0	10	&
water	95:23	0:0	10	crop
op	95:27	0:0	10	->
water	95:29	0:0	10	combined_length
arg	95:46	95:56	9	&crop_buff
op	95:46	0:0	10	&
water	95:47	0:0	10	crop_buff
stmts	96:8	100:8	7	
water	96:8	0:0	8	{
call	97:8	98:84	8	TIFFError
arg	97:18	97:41	9	"processCropSelections"
water	97:18	0:0	10	"processCropSelections"
arg	98:18	98:68	9	"Failed to rotate composite regions by %d degrees"
water	98:18	0:0	10	"Failed to rotate composite regions by %d degrees"
arg	98:70	98:84	9	crop->rotation
water	98:70	0:0	10	crop
op	98:74	0:0	10	->
water	98:76	0:0	10	rotation
water	98:85	0:0	8	;
return	99:8	99:19	8	(-1)
water	99:15	0:0	9	(
op	99:16	0:0	9	-
water	99:17	0:0	9	1
water	99:18	0:0	9	)
water	100:8	0:0	8	}
water	101:6	0:0	6	seg_buffs
op	101:15	0:0	6	[
water	101:16	0:0	6	0
op	101:17	0:0	6	]
op	101:18	0:0	6	.
water	101:19	0:0	6	buffer
op	101:26	0:0	6	=
water	101:28	0:0	6	crop_buff
water	101:37	0:0	6	;
water	102:6	0:0	6	seg_buffs
op	102:15	0:0	6	[
water	102:16	0:0	6	0
op	102:17	0:0	6	]
op	102:18	0:0	6	.
water	102:19	0:0	6	size
op	102:24	0:0	6	=
water	102:26	0:0	6	(
water	102:27	0:0	6	(
water	102:28	0:0	6	(
water	102:29	0:0	6	crop
op	102:33	0:0	6	->
water	102:35	0:0	6	combined_width
op	102:50	0:0	6	*
water	102:52	0:0	6	image
op	102:57	0:0	6	->
water	102:59	0:0	6	bps
op	102:63	0:0	6	+
water	102:65	0:0	6	7
water	102:67	0:0	6	)
op	102:69	0:0	6	/
water	102:71	0:0	6	8
water	102:72	0:0	6	)
op	103:28	0:0	6	*
water	103:30	0:0	6	image
op	103:35	0:0	6	->
water	103:37	0:0	6	spp
water	103:40	0:0	6	)
op	103:42	0:0	6	*
water	103:44	0:0	6	crop
op	103:48	0:0	6	->
water	103:50	0:0	6	combined_length
water	103:65	0:0	6	;
water	104:6	0:0	6	}
water	105:4	0:0	4	}
else	106:2	209:4	2
stmts	107:4	209:4	3	
water	107:4	0:0	4	{
water	108:4	0:0	4	total_width
op	108:16	0:0	4	=
water	108:18	0:0	4	total_length
op	108:31	0:0	4	=
water	108:33	0:0	4	0
water	108:34	0:0	4	;
for	109:4	208:6	4	(i = 0 ;i < crop -> selections;i ++)
forinit	109:9	109:14	5	i = 0 ;
water	109:9	0:0	6	i
op	109:11	0:0	6	=
water	109:13	0:0	6	0
water	109:14	0:0	6	;
cond	109:16	109:26	5	i < crop -> selections
water	109:16	0:0	6	i
op	109:18	0:0	6	<
water	109:20	0:0	6	crop
op	109:24	0:0	6	->
water	109:26	0:0	6	selections
forexpr	109:38	109:39	5	i ++
water	109:38	0:0	6	i
op	109:39	0:0	6	++
stmts	110:6	208:6	5	
water	110:6	0:0	6	{
water	111:6	0:0	6	cropsize
op	111:15	0:0	6	=
water	111:17	0:0	6	crop
op	111:21	0:0	6	->
water	111:23	0:0	6	bufftotal
water	111:32	0:0	6	;
water	112:6	0:0	6	crop_buff
op	112:16	0:0	6	=
water	112:18	0:0	6	seg_buffs
op	112:27	0:0	6	[
water	112:28	0:0	6	i
op	112:29	0:0	6	]
op	112:30	0:0	6	.
water	112:31	0:0	6	buffer
water	112:37	0:0	6	;
if	113:6	114:58	6	(! crop_buff)
cond	113:10	113:11	7	! crop_buff
op	113:10	0:0	8	!
water	113:11	0:0	8	crop_buff
stmts	114:8	114:58	7	
water	114:8	0:0	8	crop_buff
op	114:18	0:0	8	=
water	114:20	0:0	8	(
water	114:21	0:0	8	unsigned
water	114:30	0:0	8	char
op	114:35	0:0	8	*
water	114:36	0:0	8	)
call	114:37	114:57	8	_TIFFmalloc
arg	114:49	114:57	9	cropsize
water	114:49	0:0	10	cropsize
water	114:58	0:0	8	;
else	115:6	129:8	6
stmts	116:8	129:8	7	
water	116:8	0:0	8	{
water	117:8	0:0	8	prev_cropsize
op	117:22	0:0	8	=
water	117:24	0:0	8	seg_buffs
op	117:33	0:0	8	[
water	117:34	0:0	8	0
op	117:35	0:0	8	]
op	117:36	0:0	8	.
water	117:37	0:0	8	size
water	117:41	0:0	8	;
if	118:8	128:10	8	(prev_cropsize < cropsize)
cond	118:12	118:28	9	prev_cropsize < cropsize
water	118:12	0:0	10	prev_cropsize
op	118:26	0:0	10	<
water	118:28	0:0	10	cropsize
stmts	119:10	128:10	9	
water	119:10	0:0	10	{
water	120:10	0:0	10	next_buff
op	120:20	0:0	10	=
call	120:22	120:54	10	_TIFFrealloc
arg	120:35	120:44	11	crop_buff
water	120:35	0:0	12	crop_buff
arg	120:46	120:54	11	cropsize
water	120:46	0:0	12	cropsize
water	120:55	0:0	10	;
if	121:10	125:12	10	(! next_buff)
cond	121:14	121:16	11	! next_buff
op	121:14	0:0	12	!
water	121:16	0:0	12	next_buff
stmts	122:12	125:12	11	
water	122:12	0:0	12	{
call	123:12	123:32	12	_TIFFfree
arg	123:23	123:32	13	crop_buff
water	123:23	0:0	14	crop_buff
water	123:33	0:0	12	;
water	124:12	0:0	12	crop_buff
op	124:22	0:0	12	=
water	124:24	0:0	12	(
water	124:25	0:0	12	unsigned
water	124:34	0:0	12	char
op	124:39	0:0	12	*
water	124:40	0:0	12	)
call	124:41	124:61	12	_TIFFmalloc
arg	124:53	124:61	13	cropsize
water	124:53	0:0	14	cropsize
water	124:62	0:0	12	;
water	125:12	0:0	12	}
else	126:10	127:33	10
stmts	127:12	127:33	11	
water	127:12	0:0	12	crop_buff
op	127:22	0:0	12	=
water	127:24	0:0	12	next_buff
water	127:33	0:0	12	;
water	128:10	0:0	10	}
water	129:8	0:0	8	}
if	130:6	134:8	6	(! crop_buff)
cond	130:10	130:11	7	! crop_buff
op	130:10	0:0	8	!
water	130:11	0:0	8	crop_buff
stmts	131:8	134:8	7	
water	131:8	0:0	8	{
call	132:8	132:86	8	TIFFError
arg	132:18	132:41	9	"processCropSelections"
water	132:18	0:0	10	"processCropSelections"
arg	132:43	132:86	9	"Unable to allocate/reallocate crop buffer"
water	132:43	0:0	10	"Unable to allocate/reallocate crop buffer"
water	132:87	0:0	8	;
return	133:8	133:19	8	(-1)
water	133:15	0:0	9	(
op	133:16	0:0	9	-
water	133:17	0:0	9	1
water	133:18	0:0	9	)
water	134:8	0:0	8	}
call	135:6	135:40	6	_TIFFmemset
arg	135:18	135:27	7	crop_buff
water	135:18	0:0	8	crop_buff
arg	135:29	135:30	7	0
water	135:29	0:0	8	0
arg	135:32	135:40	7	cropsize
water	135:32	0:0	8	cropsize
water	135:41	0:0	6	;
water	136:6	0:0	6	seg_buffs
op	136:15	0:0	6	[
water	136:16	0:0	6	i
op	136:17	0:0	6	]
op	136:18	0:0	6	.
water	136:19	0:0	6	buffer
op	136:26	0:0	6	=
water	136:28	0:0	6	crop_buff
water	136:37	0:0	6	;
water	137:6	0:0	6	seg_buffs
op	137:15	0:0	6	[
water	137:16	0:0	6	i
op	137:17	0:0	6	]
op	137:18	0:0	6	.
water	137:19	0:0	6	size
op	137:24	0:0	6	=
water	137:26	0:0	6	cropsize
water	137:34	0:0	6	;
if	138:6	142:8	6	(extractSeparateRegion (image ,crop ,read_buff ,crop_buff ,i ))
cond	138:10	138:68	7	extractSeparateRegion (image ,crop ,read_buff ,crop_buff ,i )
call	138:10	138:68	8	extractSeparateRegion
arg	138:32	138:37	9	image
water	138:32	0:0	10	image
arg	138:39	138:43	9	crop
water	138:39	0:0	10	crop
arg	138:45	138:54	9	read_buff
water	138:45	0:0	10	read_buff
arg	138:56	138:65	9	crop_buff
water	138:56	0:0	10	crop_buff
arg	138:67	138:68	9	i
water	138:67	0:0	10	i
stmts	139:8	142:8	7	
water	139:8	0:0	8	{
call	140:1	140:87	8	TIFFError
arg	140:11	140:34	9	"processCropSelections"
water	140:11	0:0	10	"processCropSelections"
arg	140:36	140:84	9	"Unable to extract cropped region %d from image"
water	140:36	0:0	10	"Unable to extract cropped region %d from image"
arg	140:86	140:87	9	i
water	140:86	0:0	10	i
water	140:88	0:0	8	;
return	141:8	141:19	8	(-1)
water	141:15	0:0	9	(
op	141:16	0:0	9	-
water	141:17	0:0	9	1
water	141:18	0:0	9	)
water	142:8	0:0	8	}
water	143:6	0:0	6	width
op	143:13	0:0	6	=
water	143:15	0:0	6	crop
op	143:19	0:0	6	->
water	143:21	0:0	6	regionlist
op	143:31	0:0	6	[
water	143:32	0:0	6	i
op	143:33	0:0	6	]
op	143:34	0:0	6	.
water	143:35	0:0	6	width
water	143:40	0:0	6	;
water	144:6	0:0	6	length
op	144:13	0:0	6	=
water	144:15	0:0	6	crop
op	144:19	0:0	6	->
water	144:21	0:0	6	regionlist
op	144:31	0:0	6	[
water	144:32	0:0	6	i
op	144:33	0:0	6	]
op	144:34	0:0	6	.
water	144:35	0:0	6	length
water	144:41	0:0	6	;
if	145:6	180:8	6	(crop -> crop_mode & CROP_INVERT)
cond	145:10	145:28	7	crop -> crop_mode & CROP_INVERT
water	145:10	0:0	8	crop
op	145:14	0:0	8	->
water	145:16	0:0	8	crop_mode
op	145:26	0:0	8	&
water	145:28	0:0	8	CROP_INVERT
stmts	146:8	180:8	7	
water	146:8	0:0	8	{
switch	147:8	179:10	8	(crop -> photometric)
cond	147:16	147:22	9	crop -> photometric
water	147:16	0:0	10	crop
op	147:20	0:0	10	->
water	147:22	0:0	10	photometric
stmts	148:10	179:10	9	
water	148:10	0:0	10	{
label	150:10	150:37	10	case PHOTOMETRIC_MINISWHITE :
label	151:10	151:37	10	case PHOTOMETRIC_MINISBLACK :
water	152:8	0:0	10	image
op	152:13	0:0	10	->
water	152:15	0:0	10	photometric
op	152:27	0:0	10	=
water	152:29	0:0	10	crop
op	152:33	0:0	10	->
water	152:35	0:0	10	photometric
water	152:46	0:0	10	;
break	153:8	153:13	10	
label	154:10	154:31	10	case INVERT_DATA_ONLY :
label	155:10	155:34	10	case INVERT_DATA_AND_TAG :
if	156:15	162:17	10	(invertImage (image -> photometric ,image -> spp ,image -> bps ,width ,length ,crop_buff ))
cond	156:19	157:55	11	invertImage (image -> photometric ,image -> spp ,image -> bps ,width ,length ,crop_buff )
call	156:19	157:55	12	invertImage
arg	156:31	156:49	13	image->photometric
water	156:31	0:0	14	image
op	156:36	0:0	14	->
water	156:38	0:0	14	photometric
arg	156:51	156:61	13	image->spp
water	156:51	0:0	14	image
op	156:56	0:0	14	->
water	156:58	0:0	14	spp
arg	156:63	156:73	13	image->bps
water	156:63	0:0	14	image
op	156:68	0:0	14	->
water	156:70	0:0	14	bps
arg	157:31	157:36	13	width
water	157:31	0:0	14	width
arg	157:38	157:44	13	length
water	157:38	0:0	14	length
arg	157:46	157:55	13	crop_buff
water	157:46	0:0	14	crop_buff
stmts	158:17	162:17	11	
water	158:17	0:0	12	{
call	159:17	160:67	12	TIFFError
arg	159:27	159:50	13	"processCropSelections"
water	159:27	0:0	14	"processCropSelections"
arg	160:27	160:67	13	"Failed to invert colorspace for region"
water	160:27	0:0	14	"Failed to invert colorspace for region"
water	160:68	0:0	12	;
return	161:17	161:28	12	(-1)
water	161:24	0:0	13	(
op	161:25	0:0	13	-
water	161:26	0:0	13	1
water	161:27	0:0	13	)
water	162:17	0:0	12	}
if	163:15	176:10	10	(crop -> photometric == INVERT_DATA_AND_TAG)
cond	163:19	163:40	11	crop -> photometric == INVERT_DATA_AND_TAG
water	163:19	0:0	12	crop
op	163:23	0:0	12	->
water	163:25	0:0	12	photometric
op	163:37	0:0	12	==
water	163:40	0:0	12	INVERT_DATA_AND_TAG
stmts	164:17	176:10	11	
water	164:17	0:0	12	{
switch	165:17	175:12	12	(image -> photometric)
cond	165:25	165:32	13	image -> photometric
water	165:25	0:0	14	image
op	165:30	0:0	14	->
water	165:32	0:0	14	photometric
stmts	166:19	175:12	13	
water	166:19	0:0	14	{
label	167:19	167:46	14	case PHOTOMETRIC_MINISWHITE :
water	168:18	0:0	14	image
op	168:23	0:0	14	->
water	168:25	0:0	14	photometric
op	168:37	0:0	14	=
water	168:39	0:0	14	PHOTOMETRIC_MINISBLACK
water	168:61	0:0	14	;
break	169:17	169:22	14	
label	170:19	170:46	14	case PHOTOMETRIC_MINISBLACK :
water	171:18	0:0	14	image
op	171:23	0:0	14	->
water	171:25	0:0	14	photometric
op	171:37	0:0	14	=
water	171:39	0:0	14	PHOTOMETRIC_MINISWHITE
water	171:61	0:0	14	;
break	172:17	172:22	14	
label	173:19	173:26	14	default :
break	174:17	174:22	14	
water	175:12	0:0	14	}
water	176:10	0:0	12	}
break	177:15	177:20	10	
label	178:10	178:17	10	default :
break	178:19	178:24	10	
water	179:10	0:0	10	}
water	180:8	0:0	8	}
if	181:6	190:8	6	(crop -> crop_mode & CROP_MIRROR)
cond	181:10	181:28	7	crop -> crop_mode & CROP_MIRROR
water	181:10	0:0	8	crop
op	181:14	0:0	8	->
water	181:16	0:0	8	crop_mode
op	181:26	0:0	8	&
water	181:28	0:0	8	CROP_MIRROR
stmts	182:8	190:8	7	
water	182:8	0:0	8	{
if	183:8	189:10	8	(mirrorImage (image -> spp ,image -> bps ,crop -> mirror ,width ,length ,crop_buff ))
cond	183:12	184:48	9	mirrorImage (image -> spp ,image -> bps ,crop -> mirror ,width ,length ,crop_buff )
call	183:12	184:48	10	mirrorImage
arg	183:24	183:34	11	image->spp
water	183:24	0:0	12	image
op	183:29	0:0	12	->
water	183:31	0:0	12	spp
arg	183:36	183:46	11	image->bps
water	183:36	0:0	12	image
op	183:41	0:0	12	->
water	183:43	0:0	12	bps
arg	183:48	183:60	11	crop->mirror
water	183:48	0:0	12	crop
op	183:52	0:0	12	->
water	183:54	0:0	12	mirror
arg	184:24	184:29	11	width
water	184:24	0:0	12	width
arg	184:31	184:37	11	length
water	184:31	0:0	12	length
arg	184:39	184:48	11	crop_buff
water	184:39	0:0	12	crop_buff
stmts	185:10	189:10	9	
water	185:10	0:0	10	{
call	186:10	187:76	10	TIFFError
arg	186:20	186:43	11	"processCropSelections"
water	186:20	0:0	12	"processCropSelections"
arg	186:45	186:78	11	"Failed to mirror crop region %s"
water	186:45	0:0	12	"Failed to mirror crop region %s"
arg	187:12	187:76	11	(crop->rotation==MIRROR_HORIZ)?"horizontally":"vertically"
water	187:12	0:0	12	(
water	187:13	0:0	12	crop
op	187:17	0:0	12	->
water	187:19	0:0	12	rotation
op	187:28	0:0	12	==
water	187:31	0:0	12	MIRROR_HORIZ
water	187:43	0:0	12	)
water	187:45	0:0	12	?
water	187:47	0:0	12	"horizontally"
water	187:62	0:0	12	:
water	187:64	0:0	12	"vertically"
water	187:77	0:0	10	;
return	188:10	188:21	10	(-1)
water	188:17	0:0	11	(
op	188:18	0:0	11	-
water	188:19	0:0	11	1
water	188:20	0:0	11	)
water	189:10	0:0	10	}
water	190:8	0:0	8	}
if	191:6	207:8	6	(crop -> crop_mode & CROP_ROTATE)
cond	191:10	191:28	7	crop -> crop_mode & CROP_ROTATE
water	191:10	0:0	8	crop
op	191:14	0:0	8	->
water	191:16	0:0	8	crop_mode
op	191:26	0:0	8	&
water	191:28	0:0	8	CROP_ROTATE
stmts	192:8	207:8	7	
water	192:8	0:0	8	{
if	193:1	199:10	8	(rotateImage (crop -> rotation ,image ,& crop -> regionlist [ i ] . width ,& crop -> regionlist [ i ] . length ,& crop_buff ))
cond	193:5	194:42	9	rotateImage (crop -> rotation ,image ,& crop -> regionlist [ i ] . width ,& crop -> regionlist [ i ] . length ,& crop_buff )
call	193:5	194:42	10	rotateImage
arg	193:17	193:31	11	crop->rotation
water	193:17	0:0	12	crop
op	193:21	0:0	12	->
water	193:23	0:0	12	rotation
arg	193:33	193:38	11	image
water	193:33	0:0	12	image
arg	193:40	193:66	11	&crop->regionlist[i].width
op	193:40	0:0	12	&
water	193:41	0:0	12	crop
op	193:45	0:0	12	->
water	193:47	0:0	12	regionlist
op	193:57	0:0	12	[
water	193:58	0:0	12	i
op	193:59	0:0	12	]
op	193:60	0:0	12	.
water	193:61	0:0	12	width
arg	194:3	194:30	11	&crop->regionlist[i].length
op	194:3	0:0	12	&
water	194:4	0:0	12	crop
op	194:8	0:0	12	->
water	194:10	0:0	12	regionlist
op	194:20	0:0	12	[
water	194:21	0:0	12	i
op	194:22	0:0	12	]
op	194:23	0:0	12	.
water	194:24	0:0	12	length
arg	194:32	194:42	11	&crop_buff
op	194:32	0:0	12	&
water	194:33	0:0	12	crop_buff
stmts	195:10	199:10	9	
water	195:10	0:0	10	{
call	196:10	197:80	10	TIFFError
arg	196:20	196:43	11	"processCropSelections"
water	196:20	0:0	12	"processCropSelections"
arg	197:20	197:64	11	"Failed to rotate crop region by %d degrees"
water	197:20	0:0	12	"Failed to rotate crop region by %d degrees"
arg	197:66	197:80	11	crop->rotation
water	197:66	0:0	12	crop
op	197:70	0:0	12	->
water	197:72	0:0	12	rotation
water	197:81	0:0	10	;
return	198:10	198:21	10	(-1)
water	198:17	0:0	11	(
op	198:18	0:0	11	-
water	198:19	0:0	11	1
water	198:20	0:0	11	)
water	199:10	0:0	10	}
water	200:8	0:0	8	total_width
op	200:21	0:0	8	+=
water	200:24	0:0	8	crop
op	200:28	0:0	8	->
water	200:30	0:0	8	regionlist
op	200:40	0:0	8	[
water	200:41	0:0	8	i
op	200:42	0:0	8	]
op	200:43	0:0	8	.
water	200:44	0:0	8	width
water	200:49	0:0	8	;
water	201:8	0:0	8	total_length
op	201:21	0:0	8	+=
water	201:24	0:0	8	crop
op	201:28	0:0	8	->
water	201:30	0:0	8	regionlist
op	201:40	0:0	8	[
water	201:41	0:0	8	i
op	201:42	0:0	8	]
op	201:43	0:0	8	.
water	201:44	0:0	8	length
water	201:50	0:0	8	;
water	202:8	0:0	8	crop
op	202:12	0:0	8	->
water	202:14	0:0	8	combined_width
op	202:29	0:0	8	=
water	202:31	0:0	8	total_width
water	202:42	0:0	8	;
water	203:8	0:0	8	crop
op	203:12	0:0	8	->
water	203:14	0:0	8	combined_length
op	203:30	0:0	8	=
water	203:32	0:0	8	total_length
water	203:44	0:0	8	;
water	204:8	0:0	8	seg_buffs
op	204:17	0:0	8	[
water	204:18	0:0	8	i
op	204:19	0:0	8	]
op	204:20	0:0	8	.
water	204:21	0:0	8	buffer
op	204:28	0:0	8	=
water	204:30	0:0	8	crop_buff
water	204:39	0:0	8	;
water	205:8	0:0	8	seg_buffs
op	205:17	0:0	8	[
water	205:18	0:0	8	i
op	205:19	0:0	8	]
op	205:20	0:0	8	.
water	205:21	0:0	8	size
op	205:26	0:0	8	=
water	205:28	0:0	8	(
water	205:29	0:0	8	(
water	205:30	0:0	8	(
water	205:31	0:0	8	crop
op	205:35	0:0	8	->
water	205:37	0:0	8	regionlist
op	205:47	0:0	8	[
water	205:48	0:0	8	i
op	205:49	0:0	8	]
op	205:50	0:0	8	.
water	205:51	0:0	8	width
op	205:57	0:0	8	*
water	205:59	0:0	8	image
op	205:64	0:0	8	->
water	205:66	0:0	8	bps
op	205:70	0:0	8	+
water	205:72	0:0	8	7
water	205:74	0:0	8	)
op	205:76	0:0	8	/
water	205:78	0:0	8	8
water	205:79	0:0	8	)
op	206:31	0:0	8	*
water	206:33	0:0	8	image
op	206:38	0:0	8	->
water	206:40	0:0	8	spp
water	206:43	0:0	8	)
op	206:45	0:0	8	*
water	206:47	0:0	8	crop
op	206:51	0:0	8	->
water	206:53	0:0	8	regionlist
op	206:63	0:0	8	[
water	206:64	0:0	8	i
op	206:65	0:0	8	]
op	206:66	0:0	8	.
water	206:67	0:0	8	length
water	206:73	0:0	8	;
water	207:8	0:0	8	}
water	208:6	0:0	6	}
water	209:4	0:0	4	}
return	210:2	210:12	2	(0)
water	210:9	0:0	3	(
water	210:10	0:0	3	0
water	210:11	0:0	3	)
