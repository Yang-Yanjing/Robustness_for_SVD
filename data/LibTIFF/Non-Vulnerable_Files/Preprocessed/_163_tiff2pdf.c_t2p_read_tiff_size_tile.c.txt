func	1:0	63:0	0	void	t2p_read_tiff_size_tile
params	1:28	0:0	1	
param	1:29	1:37	2	T2P *	t2p
param	1:39	1:50	2	TIFF *	input
param	1:52	1:64	2	ttile_t	tile
stmnts	0:0	62:7	1	
decl	2:1	2:19	2	uint64	*tbc
op	2:13	0:0	2	=
water	2:15	0:0	2	NULL
decl	3:1	3:14	2	uint16	edge
op	3:12	0:0	2	=
water	3:13	0:0	2	0
decl	5:1	5:19	2	unsigned char	*jpt
decl	7:8	7:16	2	uint64	k
water	8:1	0:0	2	edge
op	8:6	0:0	2	|=
call	8:9	8:68	2	t2p_tile_is_right_edge
arg	8:32	8:62	3	t2p->tiff_tiles[t2p->pdf_page]
water	8:32	0:0	4	t2p
op	8:35	0:0	4	->
water	8:37	0:0	4	tiff_tiles
op	8:47	0:0	4	[
water	8:48	0:0	4	t2p
op	8:51	0:0	4	->
water	8:53	0:0	4	pdf_page
op	8:61	0:0	4	]
arg	8:64	8:68	3	tile
water	8:64	0:0	4	tile
water	8:69	0:0	2	;
water	9:1	0:0	2	edge
op	9:6	0:0	2	|=
call	9:9	9:69	2	t2p_tile_is_bottom_edge
arg	9:33	9:63	3	t2p->tiff_tiles[t2p->pdf_page]
water	9:33	0:0	4	t2p
op	9:36	0:0	4	->
water	9:38	0:0	4	tiff_tiles
op	9:48	0:0	4	[
water	9:49	0:0	4	t2p
op	9:52	0:0	4	->
water	9:54	0:0	4	pdf_page
op	9:62	0:0	4	]
arg	9:65	9:69	3	tile
water	9:65	0:0	4	tile
water	9:70	0:0	2	;
if	10:1	48:1	2	(t2p -> pdf_transcode == T2P_TRANSCODE_RAW)
cond	10:4	10:24	3	t2p -> pdf_transcode == T2P_TRANSCODE_RAW
water	10:4	0:0	4	t2p
op	10:7	0:0	4	->
water	10:9	0:0	4	pdf_transcode
op	10:22	0:0	4	==
water	10:24	0:0	4	T2P_TRANSCODE_RAW
stmts	10:42	48:1	3	
water	10:42	0:0	4	{
if	11:2	22:2	4	(edge && ! ( t2p -> pdf_compression == T2P_COMPRESS_JPEG ))
cond	11:5	13:46	5	edge && ! ( t2p -> pdf_compression == T2P_COMPRESS_JPEG )
water	11:5	0:0	6	edge
op	13:2	0:0	6	&&
op	13:5	0:0	6	!
water	13:6	0:0	6	(
water	13:7	0:0	6	t2p
op	13:10	0:0	6	->
water	13:12	0:0	6	pdf_compression
op	13:27	0:0	6	==
water	13:29	0:0	6	T2P_COMPRESS_JPEG
water	13:46	0:0	6	)
stmts	15:3	22:2	5	
water	15:3	0:0	6	{
water	16:3	0:0	6	t2p
op	16:6	0:0	6	->
water	16:8	0:0	6	tiff_datasize
op	16:21	0:0	6	=
call	16:22	16:40	6	TIFFTileSize
arg	16:35	16:40	7	input
water	16:35	0:0	8	input
water	16:41	0:0	6	;
if	17:3	20:3	6	(t2p -> tiff_datasize == 0)
cond	17:7	17:29	7	t2p -> tiff_datasize == 0
water	17:7	0:0	8	t2p
op	17:10	0:0	8	->
water	17:12	0:0	8	tiff_datasize
op	17:26	0:0	8	==
water	17:29	0:0	8	0
stmts	17:32	20:3	7	
water	17:32	0:0	8	{
water	19:4	0:0	8	t2p
op	19:7	0:0	8	->
water	19:9	0:0	8	t2p_error
op	19:19	0:0	8	=
water	19:21	0:0	8	T2P_ERR_ERROR
water	19:34	0:0	8	;
water	20:3	0:0	8	}
return	21:3	21:9	6	
water	22:2	0:0	6	}
else	22:4	47:2	4
stmts	22:9	47:2	5	
water	22:9	0:0	6	{
call	23:3	23:51	6	TIFFGetField
arg	23:16	23:21	7	input
water	23:16	0:0	8	input
arg	23:23	23:45	7	TIFFTAG_TILEBYTECOUNTS
water	23:23	0:0	8	TIFFTAG_TILEBYTECOUNTS
arg	23:47	23:51	7	&tbc
op	23:47	0:0	8	&
water	23:48	0:0	8	tbc
water	23:52	0:0	6	;
water	24:3	0:0	6	k
op	24:4	0:0	6	=
water	24:5	0:0	6	tbc
op	24:8	0:0	6	[
water	24:9	0:0	6	tile
op	24:13	0:0	6	]
water	24:14	0:0	6	;
if	26:3	28:3	6	(t2p -> tiff_compression == COMPRESSION_OJPEG)
cond	26:6	26:29	7	t2p -> tiff_compression == COMPRESSION_OJPEG
water	26:6	0:0	8	t2p
op	26:9	0:0	8	->
water	26:11	0:0	8	tiff_compression
op	26:27	0:0	8	==
water	26:29	0:0	8	COMPRESSION_OJPEG
stmts	26:47	28:3	7	
water	26:47	0:0	8	{
water	27:6	0:0	8	k
op	27:8	0:0	8	=
call	27:10	27:33	8	checkAdd64
arg	27:21	27:22	9	k
water	27:21	0:0	10	k
arg	27:24	27:28	9	2048
water	27:24	0:0	10	2048
arg	27:30	27:33	9	t2p
water	27:30	0:0	10	t2p
water	27:34	0:0	8	;
water	28:3	0:0	8	}
if	31:3	39:3	6	(t2p -> tiff_compression == COMPRESSION_JPEG)
cond	31:6	31:29	7	t2p -> tiff_compression == COMPRESSION_JPEG
water	31:6	0:0	8	t2p
op	31:9	0:0	8	->
water	31:11	0:0	8	tiff_compression
op	31:27	0:0	8	==
water	31:29	0:0	8	COMPRESSION_JPEG
stmts	31:47	39:3	7	
water	31:47	0:0	8	{
decl	32:4	32:20	8	uint32	count
op	32:17	0:0	8	=
water	32:19	0:0	8	0
if	33:4	38:4	8	(TIFFGetField (input ,TIFFTAG_JPEGTABLES ,& count ,& jpt ) != 0)
cond	33:7	33:62	9	TIFFGetField (input ,TIFFTAG_JPEGTABLES ,& count ,& jpt ) != 0
call	33:7	33:59	10	TIFFGetField
arg	33:20	33:25	11	input
water	33:20	0:0	12	input
arg	33:27	33:45	11	TIFFTAG_JPEGTABLES
water	33:27	0:0	12	TIFFTAG_JPEGTABLES
arg	33:47	33:53	11	&count
op	33:47	0:0	12	&
water	33:48	0:0	12	count
arg	33:55	33:59	11	&jpt
op	33:55	0:0	12	&
water	33:56	0:0	12	jpt
op	33:60	0:0	10	!=
water	33:62	0:0	10	0
stmts	33:64	38:4	9	
water	33:64	0:0	10	{
if	34:5	37:5	10	(count > 4)
cond	34:8	34:16	11	count > 4
water	34:8	0:0	12	count
op	34:14	0:0	12	>
water	34:16	0:0	12	4
stmts	34:18	37:5	11	
water	34:18	0:0	12	{
water	35:6	0:0	12	k
op	35:8	0:0	12	=
call	35:10	35:34	12	checkAdd64
arg	35:21	35:22	13	k
water	35:21	0:0	14	k
arg	35:24	35:29	13	count
water	35:24	0:0	14	count
arg	35:31	35:34	13	t2p
water	35:31	0:0	14	t2p
water	35:35	0:0	12	;
water	36:6	0:0	12	k
op	36:8	0:0	12	-=
water	36:11	0:0	12	2
water	36:12	0:0	12	;
water	37:5	0:0	12	}
water	38:4	0:0	10	}
water	39:3	0:0	8	}
water	41:3	0:0	6	t2p
op	41:6	0:0	6	->
water	41:8	0:0	6	tiff_datasize
op	41:22	0:0	6	=
water	41:24	0:0	6	(
water	41:25	0:0	6	tsize_t
water	41:32	0:0	6	)
water	41:34	0:0	6	k
water	41:35	0:0	6	;
if	42:3	45:3	6	(( uint64 ) t2p -> tiff_datasize != k)
cond	42:7	42:38	7	( uint64 ) t2p -> tiff_datasize != k
water	42:7	0:0	8	(
water	42:8	0:0	8	uint64
water	42:14	0:0	8	)
water	42:16	0:0	8	t2p
op	42:19	0:0	8	->
water	42:21	0:0	8	tiff_datasize
op	42:35	0:0	8	!=
water	42:38	0:0	8	k
stmts	42:41	45:3	7	
water	42:41	0:0	8	{
call	43:4	43:49	8	TIFFError
arg	43:14	43:29	9	TIFF2PDF_MODULE
water	43:14	0:0	10	TIFF2PDF_MODULE
arg	43:31	43:49	9	"Integer overflow"
water	43:31	0:0	10	"Integer overflow"
water	43:50	0:0	8	;
water	44:4	0:0	8	t2p
op	44:7	0:0	8	->
water	44:9	0:0	8	t2p_error
op	44:19	0:0	8	=
water	44:21	0:0	8	T2P_ERR_ERROR
water	44:34	0:0	8	;
water	45:3	0:0	8	}
return	46:3	46:9	6	
water	47:2	0:0	6	}
water	48:1	0:0	4	}
water	49:1	0:0	2	k
op	49:3	0:0	2	=
call	49:5	49:23	2	TIFFTileSize
arg	49:18	49:23	3	input
water	49:18	0:0	4	input
water	49:24	0:0	2	;
if	50:1	52:1	2	(t2p -> tiff_planar == PLANARCONFIG_SEPARATE)
cond	50:4	50:22	3	t2p -> tiff_planar == PLANARCONFIG_SEPARATE
water	50:4	0:0	4	t2p
op	50:7	0:0	4	->
water	50:9	0:0	4	tiff_planar
op	50:20	0:0	4	==
water	50:22	0:0	4	PLANARCONFIG_SEPARATE
stmts	50:44	52:1	3	
water	50:44	0:0	4	{
water	51:2	0:0	4	k
op	51:4	0:0	4	=
call	51:6	51:55	4	checkMultiply64
arg	51:22	51:23	5	k
water	51:22	0:0	6	k
arg	51:25	51:50	5	t2p->tiff_samplesperpixel
water	51:25	0:0	6	t2p
op	51:28	0:0	6	->
water	51:30	0:0	6	tiff_samplesperpixel
arg	51:52	51:55	5	t2p
water	51:52	0:0	6	t2p
water	51:56	0:0	4	;
water	52:1	0:0	4	}
if	53:1	56:1	2	(k == 0)
cond	53:5	53:10	3	k == 0
water	53:5	0:0	4	k
op	53:7	0:0	4	==
water	53:10	0:0	4	0
stmts	53:13	56:1	3	
water	53:13	0:0	4	{
water	55:2	0:0	4	t2p
op	55:5	0:0	4	->
water	55:7	0:0	4	t2p_error
op	55:17	0:0	4	=
water	55:19	0:0	4	T2P_ERR_ERROR
water	55:32	0:0	4	;
water	56:1	0:0	4	}
water	57:1	0:0	2	t2p
op	57:4	0:0	2	->
water	57:6	0:0	2	tiff_datasize
op	57:20	0:0	2	=
water	57:22	0:0	2	(
water	57:23	0:0	2	tsize_t
water	57:30	0:0	2	)
water	57:32	0:0	2	k
water	57:33	0:0	2	;
if	58:1	61:1	2	(( uint64 ) t2p -> tiff_datasize != k)
cond	58:5	58:36	3	( uint64 ) t2p -> tiff_datasize != k
water	58:5	0:0	4	(
water	58:6	0:0	4	uint64
water	58:12	0:0	4	)
water	58:14	0:0	4	t2p
op	58:17	0:0	4	->
water	58:19	0:0	4	tiff_datasize
op	58:33	0:0	4	!=
water	58:36	0:0	4	k
stmts	58:39	61:1	3	
water	58:39	0:0	4	{
call	59:2	59:47	4	TIFFError
arg	59:12	59:27	5	TIFF2PDF_MODULE
water	59:12	0:0	6	TIFF2PDF_MODULE
arg	59:29	59:47	5	"Integer overflow"
water	59:29	0:0	6	"Integer overflow"
water	59:48	0:0	4	;
water	60:2	0:0	4	t2p
op	60:5	0:0	4	->
water	60:7	0:0	4	t2p_error
op	60:17	0:0	4	=
water	60:19	0:0	4	T2P_ERR_ERROR
water	60:32	0:0	4	;
water	61:1	0:0	4	}
return	62:1	62:7	2	
