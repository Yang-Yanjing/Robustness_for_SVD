func	1:0	86:2	0	static int	extractContigSamplesShifted24bits
params	2:34	0:0	1	
param	2:35	2:44	2	uint8 *	in
param	2:46	2:56	2	uint8 *	out
param	2:58	2:69	2	uint32	cols
param	3:29	3:45	2	tsample_t	sample
param	3:47	3:57	2	uint16	spp
param	3:59	3:69	2	uint16	bps
param	4:35	4:50	2	tsample_t	count
param	4:52	4:64	2	uint32	start
param	4:66	4:76	2	uint32	end
param	5:28	5:37	2	int	shift
stmnts	0:0	85:12	1	
decl	7:2	7:35	2	int	ready_bits
op	7:20	0:0	2	=
water	7:22	0:0	2	0
water	7:23	0:0	2	,
decl	7:2	7:35	2	int	sindex
op	7:32	0:0	2	=
water	7:34	0:0	2	0
decl	8:2	8:43	2	uint32	col
water	8:12	0:0	2	,
decl	8:2	8:43	2	uint32	src_byte
water	8:22	0:0	2	,
decl	8:2	8:43	2	uint32	src_bit
water	8:31	0:0	2	,
decl	8:2	8:43	2	uint32	bit_offset
decl	9:2	9:36	2	uint32	maskbits
op	9:18	0:0	2	=
water	9:20	0:0	2	0
water	9:21	0:0	2	,
decl	9:2	9:36	2	uint32	matchbits
op	9:33	0:0	2	=
water	9:35	0:0	2	0
decl	10:2	10:29	2	uint32	buff1
op	10:15	0:0	2	=
water	10:17	0:0	2	0
water	10:18	0:0	2	,
decl	10:2	10:29	2	uint32	buff2
op	10:26	0:0	2	=
water	10:28	0:0	2	0
decl	11:2	11:37	2	uint8	bytebuff1
op	11:19	0:0	2	=
water	11:21	0:0	2	0
water	11:22	0:0	2	,
decl	11:2	11:37	2	uint8	bytebuff2
op	11:34	0:0	2	=
water	11:36	0:0	2	0
decl	12:2	12:17	2	uint8	*src
op	12:13	0:0	2	=
water	12:15	0:0	2	in
decl	13:2	13:18	2	uint8	*dst
op	13:13	0:0	2	=
water	13:15	0:0	2	out
if	14:2	18:4	2	(( in == NULL ) || ( out == NULL ))
cond	14:6	14:34	3	( in == NULL ) || ( out == NULL )
water	14:6	0:0	4	(
water	14:7	0:0	4	in
op	14:10	0:0	4	==
water	14:13	0:0	4	NULL
water	14:17	0:0	4	)
op	14:19	0:0	4	||
water	14:22	0:0	4	(
water	14:23	0:0	4	out
op	14:27	0:0	4	==
water	14:30	0:0	4	NULL
water	14:34	0:0	4	)
stmts	15:4	18:4	3	
water	15:4	0:0	4	{
call	16:4	16:82	4	TIFFError
arg	16:14	16:49	5	"extractContigSamplesShifted24bits"
water	16:14	0:0	6	"extractContigSamplesShifted24bits"
arg	16:50	16:82	5	"Invalid input or output buffer"
water	16:50	0:0	6	"Invalid input or output buffer"
water	16:83	0:0	4	;
return	17:4	17:14	4	(1)
water	17:11	0:0	5	(
water	17:12	0:0	5	1
water	17:13	0:0	5	)
water	18:4	0:0	4	}
if	19:2	24:4	2	(( start > end ) || ( start > cols ))
cond	19:6	19:36	3	( start > end ) || ( start > cols )
water	19:6	0:0	4	(
water	19:7	0:0	4	start
op	19:13	0:0	4	>
water	19:15	0:0	4	end
water	19:18	0:0	4	)
op	19:20	0:0	4	||
water	19:23	0:0	4	(
water	19:24	0:0	4	start
op	19:30	0:0	4	>
water	19:32	0:0	4	cols
water	19:36	0:0	4	)
stmts	20:4	24:4	3	
water	20:4	0:0	4	{
call	21:4	22:61	4	TIFFError
arg	21:15	21:50	5	"extractContigSamplesShifted24bits"
water	21:15	0:0	6	"extractContigSamplesShifted24bits"
arg	22:15	22:54	5	"Invalid start column value %d ignored"
water	22:15	0:0	6	"Invalid start column value %d ignored"
arg	22:56	22:61	5	start
water	22:56	0:0	6	start
water	22:62	0:0	4	;
water	23:4	0:0	4	start
op	23:10	0:0	4	=
water	23:12	0:0	4	0
water	23:13	0:0	4	;
water	24:4	0:0	4	}
if	25:2	30:4	2	(( end == 0 ) || ( end > cols ))
cond	25:6	25:31	3	( end == 0 ) || ( end > cols )
water	25:6	0:0	4	(
water	25:7	0:0	4	end
op	25:11	0:0	4	==
water	25:14	0:0	4	0
water	25:15	0:0	4	)
op	25:17	0:0	4	||
water	25:20	0:0	4	(
water	25:21	0:0	4	end
op	25:25	0:0	4	>
water	25:27	0:0	4	cols
water	25:31	0:0	4	)
stmts	26:4	30:4	3	
water	26:4	0:0	4	{
call	27:4	28:57	4	TIFFError
arg	27:15	27:50	5	"extractContigSamplesShifted24bits"
water	27:15	0:0	6	"extractContigSamplesShifted24bits"
arg	28:15	28:52	5	"Invalid end column value %d ignored"
water	28:15	0:0	6	"Invalid end column value %d ignored"
arg	28:54	28:57	5	end
water	28:54	0:0	6	end
water	28:58	0:0	4	;
water	29:4	0:0	4	end
op	29:8	0:0	4	=
water	29:10	0:0	4	cols
water	29:14	0:0	4	;
water	30:4	0:0	4	}
water	31:2	0:0	2	ready_bits
op	31:13	0:0	2	=
water	31:15	0:0	2	shift
water	31:20	0:0	2	;
water	32:2	0:0	2	maskbits
op	32:11	0:0	2	=
water	32:14	0:0	2	(
water	32:15	0:0	2	uint32
water	32:21	0:0	2	)
op	32:22	0:0	2	-
water	32:23	0:0	2	1
op	32:25	0:0	2	>>
water	32:28	0:0	2	(
water	32:30	0:0	2	32
op	32:33	0:0	2	-
water	32:35	0:0	2	bps
water	32:38	0:0	2	)
water	32:39	0:0	2	;
for	33:2	75:4	2	(col = start ;col < end;col ++)
forinit	33:7	33:18	3	col = start ;
water	33:7	0:0	4	col
op	33:11	0:0	4	=
water	33:13	0:0	4	start
water	33:18	0:0	4	;
cond	33:20	33:26	3	col < end
water	33:20	0:0	4	col
op	33:24	0:0	4	<
water	33:26	0:0	4	end
forexpr	33:31	33:34	3	col ++
water	33:31	0:0	4	col
op	33:34	0:0	4	++
stmts	34:4	75:4	3	
water	34:4	0:0	4	{
water	36:4	0:0	4	bit_offset
op	36:15	0:0	4	=
water	36:17	0:0	4	col
op	36:21	0:0	4	*
water	36:23	0:0	4	bps
op	36:27	0:0	4	*
water	36:29	0:0	4	spp
water	36:32	0:0	4	;
for	37:4	74:6	4	(sindex = sample ;( sindex < spp ) && ( sindex < ( sample + count ) );sindex ++)
forinit	37:9	37:24	5	sindex = sample ;
water	37:9	0:0	6	sindex
op	37:16	0:0	6	=
water	37:18	0:0	6	sample
water	37:24	0:0	6	;
cond	37:26	37:70	5	( sindex < spp ) && ( sindex < ( sample + count ) )
water	37:26	0:0	6	(
water	37:27	0:0	6	sindex
op	37:34	0:0	6	<
water	37:36	0:0	6	spp
water	37:39	0:0	6	)
op	37:41	0:0	6	&&
water	37:44	0:0	6	(
water	37:45	0:0	6	sindex
op	37:52	0:0	6	<
water	37:54	0:0	6	(
water	37:55	0:0	6	sample
op	37:62	0:0	6	+
water	37:64	0:0	6	count
water	37:69	0:0	6	)
water	37:70	0:0	6	)
forexpr	37:73	37:79	5	sindex ++
water	37:73	0:0	6	sindex
op	37:79	0:0	6	++
stmts	38:6	74:6	5	
water	38:6	0:0	6	{
if	39:6	43:8	6	(sindex == 0)
cond	39:10	39:20	7	sindex == 0
water	39:10	0:0	8	sindex
op	39:17	0:0	8	==
water	39:20	0:0	8	0
stmts	40:8	43:8	7	
water	40:8	0:0	8	{
water	41:8	0:0	8	src_byte
op	41:17	0:0	8	=
water	41:19	0:0	8	bit_offset
op	41:30	0:0	8	/
water	41:32	0:0	8	8
water	41:33	0:0	8	;
water	42:8	0:0	8	src_bit
op	42:17	0:0	8	=
water	42:19	0:0	8	bit_offset
op	42:30	0:0	8	%
water	42:32	0:0	8	8
water	42:33	0:0	8	;
water	43:8	0:0	8	}
else	44:6	48:8	6
stmts	45:8	48:8	7	
water	45:8	0:0	8	{
water	46:8	0:0	8	src_byte
op	46:17	0:0	8	=
water	46:19	0:0	8	(
water	46:20	0:0	8	bit_offset
op	46:31	0:0	8	+
water	46:33	0:0	8	(
water	46:34	0:0	8	sindex
op	46:41	0:0	8	*
water	46:43	0:0	8	bps
water	46:46	0:0	8	)
water	46:47	0:0	8	)
op	46:49	0:0	8	/
water	46:51	0:0	8	8
water	46:52	0:0	8	;
water	47:8	0:0	8	src_bit
op	47:17	0:0	8	=
water	47:19	0:0	8	(
water	47:20	0:0	8	bit_offset
op	47:31	0:0	8	+
water	47:33	0:0	8	(
water	47:34	0:0	8	sindex
op	47:41	0:0	8	*
water	47:43	0:0	8	bps
water	47:46	0:0	8	)
water	47:47	0:0	8	)
op	47:49	0:0	8	%
water	47:51	0:0	8	8
water	47:52	0:0	8	;
water	48:8	0:0	8	}
water	49:6	0:0	6	src
op	49:10	0:0	6	=
water	49:12	0:0	6	in
op	49:15	0:0	6	+
water	49:17	0:0	6	src_byte
water	49:25	0:0	6	;
water	50:6	0:0	6	matchbits
op	50:16	0:0	6	=
water	50:18	0:0	6	maskbits
op	50:27	0:0	6	<<
water	50:30	0:0	6	(
water	50:31	0:0	6	32
op	50:34	0:0	6	-
water	50:36	0:0	6	src_bit
op	50:44	0:0	6	-
water	50:46	0:0	6	bps
water	50:49	0:0	6	)
water	50:50	0:0	6	;
if	51:6	52:65	6	(little_endian)
cond	51:10	51:10	7	little_endian
water	51:10	0:0	8	little_endian
stmts	52:1	52:65	7	
water	52:1	0:0	8	buff1
op	52:7	0:0	8	=
water	52:9	0:0	8	(
water	52:10	0:0	8	src
op	52:13	0:0	8	[
water	52:14	0:0	8	0
op	52:15	0:0	8	]
op	52:17	0:0	8	<<
water	52:20	0:0	8	24
water	52:22	0:0	8	)
op	52:24	0:0	8	|
water	52:26	0:0	8	(
water	52:27	0:0	8	src
op	52:30	0:0	8	[
water	52:31	0:0	8	1
op	52:32	0:0	8	]
op	52:34	0:0	8	<<
water	52:37	0:0	8	16
water	52:39	0:0	8	)
op	52:41	0:0	8	|
water	52:43	0:0	8	(
water	52:44	0:0	8	src
op	52:47	0:0	8	[
water	52:48	0:0	8	2
op	52:49	0:0	8	]
op	52:51	0:0	8	<<
water	52:54	0:0	8	8
water	52:55	0:0	8	)
op	52:57	0:0	8	|
water	52:59	0:0	8	src
op	52:62	0:0	8	[
water	52:63	0:0	8	3
op	52:64	0:0	8	]
water	52:65	0:0	8	;
else	53:6	54:65	6
stmts	54:1	54:65	7	
water	54:1	0:0	8	buff1
op	54:7	0:0	8	=
water	54:9	0:0	8	(
water	54:10	0:0	8	src
op	54:13	0:0	8	[
water	54:14	0:0	8	3
op	54:15	0:0	8	]
op	54:17	0:0	8	<<
water	54:20	0:0	8	24
water	54:22	0:0	8	)
op	54:24	0:0	8	|
water	54:26	0:0	8	(
water	54:27	0:0	8	src
op	54:30	0:0	8	[
water	54:31	0:0	8	2
op	54:32	0:0	8	]
op	54:34	0:0	8	<<
water	54:37	0:0	8	16
water	54:39	0:0	8	)
op	54:41	0:0	8	|
water	54:43	0:0	8	(
water	54:44	0:0	8	src
op	54:47	0:0	8	[
water	54:48	0:0	8	1
op	54:49	0:0	8	]
op	54:51	0:0	8	<<
water	54:54	0:0	8	8
water	54:55	0:0	8	)
op	54:57	0:0	8	|
water	54:59	0:0	8	src
op	54:62	0:0	8	[
water	54:63	0:0	8	0
op	54:64	0:0	8	]
water	54:65	0:0	8	;
if	55:6	56:52	6	(( col == start ) && ( sindex == sample ))
cond	55:10	55:45	7	( col == start ) && ( sindex == sample )
water	55:10	0:0	8	(
water	55:11	0:0	8	col
op	55:15	0:0	8	==
water	55:18	0:0	8	start
water	55:23	0:0	8	)
op	55:25	0:0	8	&&
water	55:28	0:0	8	(
water	55:29	0:0	8	sindex
op	55:36	0:0	8	==
water	55:39	0:0	8	sample
water	55:45	0:0	8	)
stmts	56:8	56:52	7	
water	56:8	0:0	8	buff2
op	56:14	0:0	8	=
water	56:16	0:0	8	buff1
op	56:22	0:0	8	&
water	56:24	0:0	8	(
water	56:25	0:0	8	(
water	56:26	0:0	8	uint32
water	56:32	0:0	8	)
op	56:33	0:0	8	-
water	56:34	0:0	8	1
water	56:35	0:0	8	)
op	56:37	0:0	8	<<
water	56:40	0:0	8	(
water	56:41	0:0	8	16
op	56:44	0:0	8	-
water	56:46	0:0	8	shift
water	56:51	0:0	8	)
water	56:52	0:0	8	;
water	57:6	0:0	6	buff1
op	57:12	0:0	6	=
water	57:14	0:0	6	(
water	57:15	0:0	6	buff1
op	57:21	0:0	6	&
water	57:23	0:0	6	matchbits
water	57:32	0:0	6	)
op	57:34	0:0	6	<<
water	57:37	0:0	6	(
water	57:38	0:0	6	src_bit
water	57:45	0:0	6	)
water	57:46	0:0	6	;
if	58:6	62:8	6	(ready_bits < 16)
cond	58:10	58:23	7	ready_bits < 16
water	58:10	0:0	8	ready_bits
op	58:21	0:0	8	<
water	58:23	0:0	8	16
stmts	59:8	62:8	7	
water	59:8	0:0	8	{
water	60:8	0:0	8	bytebuff1
op	60:18	0:0	8	=
water	60:20	0:0	8	bytebuff2
op	60:30	0:0	8	=
water	60:32	0:0	8	0
water	60:33	0:0	8	;
water	61:8	0:0	8	buff2
op	61:14	0:0	8	=
water	61:16	0:0	8	(
water	61:17	0:0	8	buff2
op	61:23	0:0	8	|
water	61:25	0:0	8	(
water	61:26	0:0	8	buff1
op	61:32	0:0	8	>>
water	61:35	0:0	8	ready_bits
water	61:45	0:0	8	)
water	61:46	0:0	8	)
water	61:47	0:0	8	;
water	62:8	0:0	8	}
else	63:6	72:8	6
stmts	64:8	72:8	7	
water	64:8	0:0	8	{
water	65:8	0:0	8	bytebuff1
op	65:18	0:0	8	=
water	65:20	0:0	8	(
water	65:21	0:0	8	buff2
op	65:27	0:0	8	>>
water	65:30	0:0	8	24
water	65:32	0:0	8	)
water	65:33	0:0	8	;
op	66:8	0:0	8	*
water	66:9	0:0	8	dst
op	66:12	0:0	8	++
op	66:15	0:0	8	=
water	66:17	0:0	8	bytebuff1
water	66:26	0:0	8	;
water	67:8	0:0	8	bytebuff2
op	67:18	0:0	8	=
water	67:20	0:0	8	(
water	67:21	0:0	8	buff2
op	67:27	0:0	8	>>
water	67:30	0:0	8	16
water	67:32	0:0	8	)
water	67:33	0:0	8	;
op	68:8	0:0	8	*
water	68:9	0:0	8	dst
op	68:12	0:0	8	++
op	68:15	0:0	8	=
water	68:17	0:0	8	bytebuff2
water	68:26	0:0	8	;
water	69:8	0:0	8	ready_bits
op	69:19	0:0	8	-=
water	69:22	0:0	8	16
water	69:24	0:0	8	;
water	71:8	0:0	8	buff2
op	71:14	0:0	8	=
water	71:16	0:0	8	(
water	71:17	0:0	8	(
water	71:18	0:0	8	buff2
op	71:24	0:0	8	<<
water	71:27	0:0	8	16
water	71:29	0:0	8	)
op	71:31	0:0	8	|
water	71:33	0:0	8	(
water	71:34	0:0	8	buff1
op	71:40	0:0	8	>>
water	71:43	0:0	8	ready_bits
water	71:53	0:0	8	)
water	71:54	0:0	8	)
water	71:55	0:0	8	;
water	72:8	0:0	8	}
water	73:6	0:0	6	ready_bits
op	73:17	0:0	6	+=
water	73:20	0:0	6	bps
water	73:23	0:0	6	;
water	74:6	0:0	6	}
water	75:4	0:0	4	}
while	77:2	84:4	2	(ready_bits > 0)
cond	77:9	77:22	3	ready_bits > 0
water	77:9	0:0	4	ready_bits
op	77:20	0:0	4	>
water	77:22	0:0	4	0
stmts	78:4	84:4	3	
water	78:4	0:0	4	{
water	79:4	0:0	4	bytebuff1
op	79:14	0:0	4	=
water	79:16	0:0	4	(
water	79:17	0:0	4	buff2
op	79:23	0:0	4	>>
water	79:26	0:0	4	24
water	79:28	0:0	4	)
water	79:29	0:0	4	;
op	80:4	0:0	4	*
water	80:5	0:0	4	dst
op	80:8	0:0	4	++
op	80:11	0:0	4	=
water	80:13	0:0	4	bytebuff1
water	80:22	0:0	4	;
water	81:4	0:0	4	buff2
op	81:10	0:0	4	=
water	81:12	0:0	4	(
water	81:13	0:0	4	buff2
op	81:19	0:0	4	<<
water	81:22	0:0	4	8
water	81:23	0:0	4	)
water	81:24	0:0	4	;
water	82:4	0:0	4	bytebuff2
op	82:14	0:0	4	=
water	82:16	0:0	4	bytebuff1
water	82:25	0:0	4	;
water	83:4	0:0	4	ready_bits
op	83:15	0:0	4	-=
water	83:18	0:0	4	8
water	83:19	0:0	4	;
water	84:4	0:0	4	}
return	85:2	85:12	2	(0)
water	85:9	0:0	3	(
water	85:10	0:0	3	0
water	85:11	0:0	3	)
