func	1:0	90:2	0	static int	combineSeparateSamples8bits
params	2:28	0:0	1	
param	2:29	2:40	2	uint8 *	in[]
param	2:42	2:52	2	uint8 *	out
param	2:54	2:65	2	uint32	cols
param	3:28	3:39	2	uint32	rows
param	3:41	3:51	2	uint16	spp
param	3:53	3:63	2	uint16	bps
param	4:22	4:36	2	FILE *	dumpfile
param	4:38	4:48	2	int	format
param	4:50	4:59	2	int	level
stmnts	0:0	89:12	1	
decl	6:2	6:23	2	int	ready_bits
op	6:20	0:0	2	=
water	6:22	0:0	2	0
decl	8:2	8:45	2	uint32	src_rowsize
water	8:20	0:0	2	,
decl	8:2	8:45	2	uint32	dst_rowsize
water	8:33	0:0	2	,
decl	8:2	8:45	2	uint32	src_offset
decl	9:2	9:19	2	uint32	bit_offset
decl	10:2	10:44	2	uint32	row
water	10:12	0:0	2	,
decl	10:2	10:44	2	uint32	col
water	10:17	0:0	2	,
decl	10:2	10:44	2	uint32	src_byte
op	10:28	0:0	2	=
water	10:30	0:0	2	0
water	10:31	0:0	2	,
decl	10:2	10:44	2	uint32	src_bit
op	10:41	0:0	2	=
water	10:43	0:0	2	0
decl	11:2	11:36	2	uint8	maskbits
op	11:18	0:0	2	=
water	11:20	0:0	2	0
water	11:21	0:0	2	,
decl	11:2	11:36	2	uint8	matchbits
op	11:33	0:0	2	=
water	11:35	0:0	2	0
decl	12:2	12:29	2	uint8	buff1
op	12:15	0:0	2	=
water	12:17	0:0	2	0
water	12:18	0:0	2	,
decl	12:2	12:29	2	uint8	buff2
op	12:26	0:0	2	=
water	12:28	0:0	2	0
decl	13:2	13:13	2	tsample_t	s
decl	14:2	14:28	2	unsigned char	*src
op	14:21	0:0	2	=
water	14:23	0:0	2	in
op	14:25	0:0	2	[
water	14:26	0:0	2	0
op	14:27	0:0	2	]
decl	15:2	15:26	2	unsigned char	*dst
op	15:21	0:0	2	=
water	15:23	0:0	2	out
decl	16:2	16:27	2	char	action[32]
if	17:2	21:4	2	(( src == NULL ) || ( dst == NULL ))
cond	17:6	17:35	3	( src == NULL ) || ( dst == NULL )
water	17:6	0:0	4	(
water	17:7	0:0	4	src
op	17:11	0:0	4	==
water	17:14	0:0	4	NULL
water	17:18	0:0	4	)
op	17:20	0:0	4	||
water	17:23	0:0	4	(
water	17:24	0:0	4	dst
op	17:28	0:0	4	==
water	17:31	0:0	4	NULL
water	17:35	0:0	4	)
stmts	18:4	21:4	3	
water	18:4	0:0	4	{
call	19:4	19:76	4	TIFFError
arg	19:14	19:43	5	"combineSeparateSamples8bits"
water	19:14	0:0	6	"combineSeparateSamples8bits"
arg	19:44	19:76	5	"Invalid input or output buffer"
water	19:44	0:0	6	"Invalid input or output buffer"
water	19:77	0:0	4	;
return	20:4	20:14	4	(1)
water	20:11	0:0	5	(
water	20:12	0:0	5	1
water	20:13	0:0	5	)
water	21:4	0:0	4	}
water	23:2	0:0	2	src_rowsize
op	23:14	0:0	2	=
water	23:16	0:0	2	(
water	23:17	0:0	2	(
water	23:18	0:0	2	bps
op	23:22	0:0	2	*
water	23:24	0:0	2	cols
water	23:28	0:0	2	)
op	23:30	0:0	2	+
water	23:32	0:0	2	7
water	23:33	0:0	2	)
op	23:35	0:0	2	/
water	23:37	0:0	2	8
water	23:38	0:0	2	;
water	24:2	0:0	2	dst_rowsize
op	24:14	0:0	2	=
water	24:16	0:0	2	(
water	24:17	0:0	2	(
water	24:18	0:0	2	bps
op	24:22	0:0	2	*
water	24:24	0:0	2	cols
op	24:29	0:0	2	*
water	24:31	0:0	2	spp
water	24:34	0:0	2	)
op	24:36	0:0	2	+
water	24:38	0:0	2	7
water	24:39	0:0	2	)
op	24:41	0:0	2	/
water	24:43	0:0	2	8
water	24:44	0:0	2	;
water	25:2	0:0	2	maskbits
op	25:11	0:0	2	=
water	25:14	0:0	2	(
water	25:15	0:0	2	uint8
water	25:20	0:0	2	)
op	25:21	0:0	2	-
water	25:22	0:0	2	1
op	25:24	0:0	2	>>
water	25:27	0:0	2	(
water	25:29	0:0	2	8
op	25:31	0:0	2	-
water	25:33	0:0	2	bps
water	25:36	0:0	2	)
water	25:37	0:0	2	;
for	26:2	88:4	2	(row = 0 ;row < rows;row ++)
forinit	26:7	26:14	3	row = 0 ;
water	26:7	0:0	4	row
op	26:11	0:0	4	=
water	26:13	0:0	4	0
water	26:14	0:0	4	;
cond	26:16	26:22	3	row < rows
water	26:16	0:0	4	row
op	26:20	0:0	4	<
water	26:22	0:0	4	rows
forexpr	26:28	26:31	3	row ++
water	26:28	0:0	4	row
op	26:31	0:0	4	++
stmts	27:4	88:4	3	
water	27:4	0:0	4	{
water	28:4	0:0	4	ready_bits
op	28:15	0:0	4	=
water	28:17	0:0	4	0
water	28:18	0:0	4	;
water	29:4	0:0	4	buff1
op	29:10	0:0	4	=
water	29:12	0:0	4	buff2
op	29:18	0:0	4	=
water	29:20	0:0	4	0
water	29:21	0:0	4	;
water	30:4	0:0	4	dst
op	30:8	0:0	4	=
water	30:10	0:0	4	out
op	30:14	0:0	4	+
water	30:16	0:0	4	(
water	30:17	0:0	4	row
op	30:21	0:0	4	*
water	30:23	0:0	4	dst_rowsize
water	30:34	0:0	4	)
water	30:35	0:0	4	;
water	31:4	0:0	4	src_offset
op	31:15	0:0	4	=
water	31:17	0:0	4	row
op	31:21	0:0	4	*
water	31:23	0:0	4	src_rowsize
water	31:34	0:0	4	;
for	32:4	70:6	4	(col = 0 ;col < cols;col ++)
forinit	32:9	32:16	5	col = 0 ;
water	32:9	0:0	6	col
op	32:13	0:0	6	=
water	32:15	0:0	6	0
water	32:16	0:0	6	;
cond	32:18	32:24	5	col < cols
water	32:18	0:0	6	col
op	32:22	0:0	6	<
water	32:24	0:0	6	cols
forexpr	32:30	32:33	5	col ++
water	32:30	0:0	6	col
op	32:33	0:0	6	++
stmts	33:6	70:6	5	
water	33:6	0:0	6	{
water	35:6	0:0	6	bit_offset
op	35:17	0:0	6	=
water	35:19	0:0	6	col
op	35:23	0:0	6	*
water	35:25	0:0	6	bps
water	35:28	0:0	6	;
water	36:6	0:0	6	src_byte
op	36:15	0:0	6	=
water	36:17	0:0	6	bit_offset
op	36:28	0:0	6	/
water	36:30	0:0	6	8
water	36:31	0:0	6	;
water	37:6	0:0	6	src_bit
op	37:15	0:0	6	=
water	37:17	0:0	6	bit_offset
op	37:28	0:0	6	%
water	37:30	0:0	6	8
water	37:31	0:0	6	;
water	38:6	0:0	6	matchbits
op	38:16	0:0	6	=
water	38:18	0:0	6	maskbits
op	38:27	0:0	6	<<
water	38:30	0:0	6	(
water	38:31	0:0	6	8
op	38:33	0:0	6	-
water	38:35	0:0	6	src_bit
op	38:43	0:0	6	-
water	38:45	0:0	6	bps
water	38:48	0:0	6	)
water	38:49	0:0	6	;
for	40:6	69:8	6	(s = 0 ;( s < spp ) && ( s < MAX_SAMPLES );s ++)
forinit	40:11	40:16	7	s = 0 ;
water	40:11	0:0	8	s
op	40:13	0:0	8	=
water	40:15	0:0	8	0
water	40:16	0:0	8	;
cond	40:18	40:47	7	( s < spp ) && ( s < MAX_SAMPLES )
water	40:18	0:0	8	(
water	40:19	0:0	8	s
op	40:21	0:0	8	<
water	40:23	0:0	8	spp
water	40:26	0:0	8	)
op	40:28	0:0	8	&&
water	40:31	0:0	8	(
water	40:32	0:0	8	s
op	40:34	0:0	8	<
water	40:36	0:0	8	MAX_SAMPLES
water	40:47	0:0	8	)
forexpr	40:50	40:51	7	s ++
water	40:50	0:0	8	s
op	40:51	0:0	8	++
stmts	41:8	69:8	7	
water	41:8	0:0	8	{
water	42:1	0:0	8	src
op	42:5	0:0	8	=
water	42:7	0:0	8	in
op	42:9	0:0	8	[
water	42:10	0:0	8	s
op	42:11	0:0	8	]
op	42:13	0:0	8	+
water	42:15	0:0	8	src_offset
op	42:26	0:0	8	+
water	42:28	0:0	8	src_byte
water	42:36	0:0	8	;
water	43:8	0:0	8	buff1
op	43:14	0:0	8	=
water	43:16	0:0	8	(
water	43:17	0:0	8	(
op	43:18	0:0	8	*
water	43:19	0:0	8	src
water	43:22	0:0	8	)
op	43:24	0:0	8	&
water	43:26	0:0	8	matchbits
water	43:35	0:0	8	)
op	43:37	0:0	8	<<
water	43:40	0:0	8	(
water	43:41	0:0	8	src_bit
water	43:48	0:0	8	)
water	43:49	0:0	8	;
if	45:8	51:10	8	(ready_bits >= 8)
cond	45:12	45:26	9	ready_bits >= 8
water	45:12	0:0	10	ready_bits
op	45:23	0:0	10	>=
water	45:26	0:0	10	8
stmts	46:10	51:10	9	
water	46:10	0:0	10	{
op	47:10	0:0	10	*
water	47:11	0:0	10	dst
op	47:14	0:0	10	++
op	47:17	0:0	10	=
water	47:19	0:0	10	buff2
water	47:24	0:0	10	;
water	48:10	0:0	10	buff2
op	48:16	0:0	10	=
water	48:18	0:0	10	buff1
water	48:23	0:0	10	;
water	49:10	0:0	10	ready_bits
op	49:21	0:0	10	-=
water	49:24	0:0	10	8
water	49:25	0:0	10	;
call	50:10	50:33	10	strcpy
arg	50:18	50:24	11	action
water	50:18	0:0	12	action
arg	50:26	50:33	11	"Flush"
water	50:26	0:0	12	"Flush"
water	50:34	0:0	10	;
water	51:10	0:0	10	}
else	52:8	56:10	8
stmts	53:10	56:10	9	
water	53:10	0:0	10	{
water	54:10	0:0	10	buff2
op	54:16	0:0	10	=
water	54:18	0:0	10	(
water	54:19	0:0	10	buff2
op	54:25	0:0	10	|
water	54:27	0:0	10	(
water	54:28	0:0	10	buff1
op	54:34	0:0	10	>>
water	54:37	0:0	10	ready_bits
water	54:47	0:0	10	)
water	54:48	0:0	10	)
water	54:49	0:0	10	;
call	55:10	55:34	10	strcpy
arg	55:18	55:24	11	action
water	55:18	0:0	12	action
arg	55:26	55:34	11	"Update"
water	55:26	0:0	12	"Update"
water	55:35	0:0	10	;
water	56:10	0:0	10	}
water	57:8	0:0	8	ready_bits
op	57:19	0:0	8	+=
water	57:22	0:0	8	bps
water	57:25	0:0	8	;
if	58:8	68:3	8	(( dumpfile != NULL ) && ( level == 3 ))
cond	58:12	58:45	9	( dumpfile != NULL ) && ( level == 3 )
water	58:12	0:0	10	(
water	58:13	0:0	10	dumpfile
op	58:22	0:0	10	!=
water	58:25	0:0	10	NULL
water	58:29	0:0	10	)
op	58:31	0:0	10	&&
water	58:34	0:0	10	(
water	58:35	0:0	10	level
op	58:41	0:0	10	==
water	58:44	0:0	10	3
water	58:45	0:0	10	)
stmts	59:10	68:3	9	
water	59:10	0:0	10	{
call	60:10	62:54	10	dump_info
arg	60:21	60:29	11	dumpfile
water	60:21	0:0	12	dumpfile
arg	60:31	60:37	11	format
water	60:31	0:0	12	format
arg	60:39	60:41	11	""
water	60:39	0:0	12	""
arg	61:19	61:102	11	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
water	61:19	0:0	12	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
arg	62:5	62:12	11	row+1
water	62:5	0:0	12	row
op	62:9	0:0	12	+
water	62:11	0:0	12	1
arg	62:14	62:21	11	col+1
water	62:14	0:0	12	col
op	62:18	0:0	12	+
water	62:20	0:0	12	1
arg	62:23	62:24	11	s
water	62:23	0:0	12	s
arg	62:26	62:34	11	src_byte
water	62:26	0:0	12	src_byte
arg	62:36	62:43	11	src_bit
water	62:36	0:0	12	src_bit
arg	62:45	62:54	11	dst-out
water	62:45	0:0	12	dst
op	62:49	0:0	12	-
water	62:51	0:0	12	out
water	62:55	0:0	10	;
call	63:10	63:62	10	dump_byte
arg	63:21	63:29	11	dumpfile
water	63:21	0:0	12	dumpfile
arg	63:31	63:37	11	format
water	63:31	0:0	12	format
arg	63:39	63:51	11	"Match bits"
water	63:39	0:0	12	"Match bits"
arg	63:53	63:62	11	matchbits
water	63:53	0:0	12	matchbits
water	63:63	0:0	10	;
call	64:10	64:57	10	dump_byte
arg	64:21	64:29	11	dumpfile
water	64:21	0:0	12	dumpfile
arg	64:31	64:37	11	format
water	64:31	0:0	12	format
arg	64:39	64:51	11	"Src   bits"
water	64:39	0:0	12	"Src   bits"
arg	64:53	64:57	11	*src
op	64:53	0:0	12	*
water	64:54	0:0	12	src
water	64:58	0:0	10	;
call	65:10	65:58	10	dump_byte
arg	65:21	65:29	11	dumpfile
water	65:21	0:0	12	dumpfile
arg	65:31	65:37	11	format
water	65:31	0:0	12	format
arg	65:39	65:51	11	"Buff1 bits"
water	65:39	0:0	12	"Buff1 bits"
arg	65:53	65:58	11	buff1
water	65:53	0:0	12	buff1
water	65:59	0:0	10	;
call	66:10	66:58	10	dump_byte
arg	66:21	66:29	11	dumpfile
water	66:21	0:0	12	dumpfile
arg	66:31	66:37	11	format
water	66:31	0:0	12	format
arg	66:39	66:51	11	"Buff2 bits"
water	66:39	0:0	12	"Buff2 bits"
arg	66:53	66:58	11	buff2
water	66:53	0:0	12	buff2
water	66:59	0:0	10	;
call	67:10	67:54	10	dump_info
arg	67:21	67:29	11	dumpfile
water	67:21	0:0	12	dumpfile
arg	67:31	67:37	11	format
water	67:31	0:0	12	format
arg	67:39	67:41	11	""
water	67:39	0:0	12	""
arg	67:42	67:46	11	"%s"
water	67:42	0:0	12	"%s"
arg	67:48	67:54	11	action
water	67:48	0:0	12	action
water	67:55	0:0	10	;
water	68:3	0:0	10	}
water	69:8	0:0	8	}
water	70:6	0:0	6	}
if	71:4	82:6	4	(ready_bits > 0)
cond	71:8	71:21	5	ready_bits > 0
water	71:8	0:0	6	ready_bits
op	71:19	0:0	6	>
water	71:21	0:0	6	0
stmts	72:6	82:6	5	
water	72:6	0:0	6	{
water	73:6	0:0	6	buff1
op	73:12	0:0	6	=
water	73:14	0:0	6	(
water	73:15	0:0	6	buff2
op	73:21	0:0	6	&
water	73:23	0:0	6	(
water	73:24	0:0	6	(
water	73:25	0:0	6	unsigned
water	73:34	0:0	6	int
water	73:37	0:0	6	)
water	73:38	0:0	6	255
op	73:42	0:0	6	<<
water	73:45	0:0	6	(
water	73:46	0:0	6	8
op	73:48	0:0	6	-
water	73:50	0:0	6	ready_bits
water	73:60	0:0	6	)
water	73:61	0:0	6	)
water	73:62	0:0	6	)
water	73:63	0:0	6	;
op	74:6	0:0	6	*
water	74:7	0:0	6	dst
op	74:10	0:0	6	++
op	74:13	0:0	6	=
water	74:15	0:0	6	buff1
water	74:20	0:0	6	;
if	75:6	81:8	6	(( dumpfile != NULL ) && ( level == 3 ))
cond	75:10	75:43	7	( dumpfile != NULL ) && ( level == 3 )
water	75:10	0:0	8	(
water	75:11	0:0	8	dumpfile
op	75:20	0:0	8	!=
water	75:23	0:0	8	NULL
water	75:27	0:0	8	)
op	75:29	0:0	8	&&
water	75:32	0:0	8	(
water	75:33	0:0	8	level
op	75:39	0:0	8	==
water	75:42	0:0	8	3
water	75:43	0:0	8	)
stmts	76:8	81:8	7	
water	76:8	0:0	8	{
call	77:8	79:56	8	dump_info
arg	77:19	77:27	9	dumpfile
water	77:19	0:0	10	dumpfile
arg	77:29	77:35	9	format
water	77:29	0:0	10	format
arg	77:37	77:39	9	""
water	77:37	0:0	10	""
arg	78:10	78:81	9	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
water	78:10	0:0	10	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
arg	79:10	79:17	9	row+1
water	79:10	0:0	10	row
op	79:14	0:0	10	+
water	79:16	0:0	10	1
arg	79:19	79:26	9	col+1
water	79:19	0:0	10	col
op	79:23	0:0	10	+
water	79:25	0:0	10	1
arg	79:28	79:36	9	src_byte
water	79:28	0:0	10	src_byte
arg	79:38	79:45	9	src_bit
water	79:38	0:0	10	src_bit
arg	79:47	79:56	9	dst-out
water	79:47	0:0	10	dst
op	79:51	0:0	10	-
water	79:53	0:0	10	out
water	79:57	0:0	8	;
call	80:17	80:65	8	dump_byte
arg	80:28	80:36	9	dumpfile
water	80:28	0:0	10	dumpfile
arg	80:38	80:44	9	format
water	80:38	0:0	10	format
arg	80:46	80:58	9	"Final bits"
water	80:46	0:0	10	"Final bits"
arg	80:60	80:65	9	buff1
water	80:60	0:0	10	buff1
water	80:66	0:0	8	;
water	81:8	0:0	8	}
water	82:6	0:0	6	}
if	83:4	87:6	4	(( dumpfile != NULL ) && ( level >= 2 ))
cond	83:8	83:41	5	( dumpfile != NULL ) && ( level >= 2 )
water	83:8	0:0	6	(
water	83:9	0:0	6	dumpfile
op	83:18	0:0	6	!=
water	83:21	0:0	6	NULL
water	83:25	0:0	6	)
op	83:27	0:0	6	&&
water	83:30	0:0	6	(
water	83:31	0:0	6	level
op	83:37	0:0	6	>=
water	83:40	0:0	6	2
water	83:41	0:0	6	)
stmts	84:6	87:6	5	
water	84:6	0:0	6	{
call	85:6	85:78	6	dump_info
arg	85:17	85:25	7	dumpfile
water	85:17	0:0	8	dumpfile
arg	85:27	85:33	7	format
water	85:27	0:0	8	format
arg	85:35	85:64	7	"combineSeparateSamples8bits"
water	85:35	0:0	8	"combineSeparateSamples8bits"
arg	85:65	85:78	7	"Output data"
water	85:65	0:0	8	"Output data"
water	85:79	0:0	6	;
call	86:6	86:82	6	dump_buffer
arg	86:18	86:26	7	dumpfile
water	86:18	0:0	8	dumpfile
arg	86:28	86:34	7	format
water	86:28	0:0	8	format
arg	86:36	86:37	7	1
water	86:36	0:0	8	1
arg	86:39	86:50	7	dst_rowsize
water	86:39	0:0	8	dst_rowsize
arg	86:52	86:55	7	row
water	86:52	0:0	8	row
arg	86:57	86:82	7	out+(row*dst_rowsize)
water	86:57	0:0	8	out
op	86:61	0:0	8	+
water	86:63	0:0	8	(
water	86:64	0:0	8	row
op	86:68	0:0	8	*
water	86:70	0:0	8	dst_rowsize
water	86:81	0:0	8	)
water	86:83	0:0	6	;
water	87:6	0:0	6	}
water	88:4	0:0	4	}
return	89:2	89:12	2	(0)
water	89:9	0:0	3	(
water	89:10	0:0	3	0
water	89:11	0:0	3	)
