func	1:0	73:0	0	static int	LZWPreDecode
params	2:12	0:0	1	
param	2:13	2:22	2	TIFF *	tif
param	2:24	2:32	2	uint16	s
stmnts	4:1	72:11	1	
water	4:1	0:0	2	static
water	4:8	0:0	2	const
water	4:14	0:0	2	char
water	4:19	0:0	2	module
op	4:25	0:0	2	[
op	4:26	0:0	2	]
op	4:28	0:0	2	=
water	4:30	0:0	2	"LZWPreDecode"
water	4:44	0:0	2	;
decl	5:1	5:38	2	LZWCodecState	*sp
op	5:19	0:0	2	=
call	5:21	5:37	3	DecoderState
arg	5:34	5:37	4	tif
water	5:34	0:0	5	tif
water	6:1	0:0	2	(
water	6:2	0:0	2	void
water	6:6	0:0	2	)
water	6:8	0:0	2	s
water	6:9	0:0	2	;
call	7:1	7:18	2	assert
arg	7:8	7:18	3	sp!=NULL
water	7:8	0:0	4	sp
op	7:11	0:0	4	!=
water	7:14	0:0	4	NULL
water	7:19	0:0	2	;
if	8:1	13:8	2	(sp -> dec_codetab == NULL)
cond	8:5	8:24	3	sp -> dec_codetab == NULL
water	8:5	0:0	4	sp
op	8:7	0:0	4	->
water	8:9	0:0	4	dec_codetab
op	8:21	0:0	4	==
water	8:24	0:0	4	NULL
stmts	9:8	13:8	3	
water	9:8	0:0	4	{
call	10:12	10:38	4	tif->tif_setupdecode
arg	10:34	10:38	5	tif
water	10:34	0:0	6	tif
water	10:39	0:0	4	;
if	11:5	12:12	4	(sp -> dec_codetab == NULL)
cond	11:9	11:28	5	sp -> dec_codetab == NULL
water	11:9	0:0	6	sp
op	11:11	0:0	6	->
water	11:13	0:0	6	dec_codetab
op	11:25	0:0	6	==
water	11:28	0:0	6	NULL
stmts	12:2	12:12	5	
return	12:2	12:12	6	(0)
water	12:9	0:0	7	(
water	12:10	0:0	7	0
water	12:11	0:0	7	)
water	13:8	0:0	4	}
if	17:1	49:1	2	(tif -> tif_rawdata [ 0 ] == 0 && ( tif -> tif_rawdata [ 1 ] & 0 x1 ))
cond	17:5	17:59	3	tif -> tif_rawdata [ 0 ] == 0 && ( tif -> tif_rawdata [ 1 ] & 0 x1 )
water	17:5	0:0	4	tif
op	17:8	0:0	4	->
water	17:10	0:0	4	tif_rawdata
op	17:21	0:0	4	[
water	17:22	0:0	4	0
op	17:23	0:0	4	]
op	17:25	0:0	4	==
water	17:28	0:0	4	0
op	17:30	0:0	4	&&
water	17:33	0:0	4	(
water	17:34	0:0	4	tif
op	17:37	0:0	4	->
water	17:39	0:0	4	tif_rawdata
op	17:50	0:0	4	[
water	17:51	0:0	4	1
op	17:52	0:0	4	]
op	17:54	0:0	4	&
water	17:56	0:0	4	0
water	17:57	0:0	4	x1
water	17:59	0:0	4	)
stmts	17:62	49:1	3	
water	17:62	0:0	4	{
if	19:2	39:2	4	(! sp -> dec_decode)
cond	19:6	19:11	5	! sp -> dec_decode
op	19:6	0:0	6	!
water	19:7	0:0	6	sp
op	19:9	0:0	6	->
water	19:11	0:0	6	dec_decode
stmts	19:23	39:2	5	
water	19:23	0:0	6	{
call	20:3	21:42	6	TIFFWarningExt
arg	20:18	20:37	7	tif->tif_clientdata
water	20:18	0:0	8	tif
op	20:21	0:0	8	->
water	20:23	0:0	8	tif_clientdata
arg	20:39	20:45	7	module
water	20:39	0:0	8	module
arg	21:7	21:42	7	"Old-style LZW codes, convert file"
water	21:7	0:0	8	"Old-style LZW codes, convert file"
water	21:43	0:0	6	;
water	29:3	0:0	6	tif
op	29:6	0:0	6	->
water	29:8	0:0	6	tif_decoderow
op	29:22	0:0	6	=
water	29:24	0:0	6	LZWDecodeCompat
water	29:39	0:0	6	;
water	30:3	0:0	6	tif
op	30:6	0:0	6	->
water	30:8	0:0	6	tif_decodestrip
op	30:24	0:0	6	=
water	30:26	0:0	6	LZWDecodeCompat
water	30:41	0:0	6	;
water	31:3	0:0	6	tif
op	31:6	0:0	6	->
water	31:8	0:0	6	tif_decodetile
op	31:23	0:0	6	=
water	31:25	0:0	6	LZWDecodeCompat
water	31:40	0:0	6	;
call	37:3	37:30	6	(*tif->tif_setupdecode)
arg	37:27	37:30	7	tif
water	37:27	0:0	8	tif
water	37:31	0:0	6	;
water	38:3	0:0	6	sp
op	38:5	0:0	6	->
water	38:7	0:0	6	dec_decode
op	38:18	0:0	6	=
water	38:20	0:0	6	LZWDecodeCompat
water	38:35	0:0	6	;
water	39:2	0:0	6	}
water	40:2	0:0	4	sp
op	40:4	0:0	4	->
water	40:6	0:0	4	lzw_maxcode
op	40:18	0:0	4	=
call	40:20	40:36	4	MAXCODE
arg	40:28	40:36	5	BITS_MIN
water	40:28	0:0	6	BITS_MIN
water	40:37	0:0	4	;
if	42:2	46:2	4	(! sp -> dec_decode)
cond	42:6	42:11	5	! sp -> dec_decode
op	42:6	0:0	6	!
water	42:7	0:0	6	sp
op	42:9	0:0	6	->
water	42:11	0:0	6	dec_decode
stmts	42:23	46:2	5	
water	42:23	0:0	6	{
call	43:3	44:42	6	TIFFErrorExt
arg	43:16	43:35	7	tif->tif_clientdata
water	43:16	0:0	8	tif
op	43:19	0:0	8	->
water	43:21	0:0	8	tif_clientdata
arg	43:37	43:43	7	module
water	43:37	0:0	8	module
arg	44:7	44:42	7	"Old-style LZW codes not supported"
water	44:7	0:0	8	"Old-style LZW codes not supported"
water	44:43	0:0	6	;
water	45:3	0:0	6	sp
op	45:5	0:0	6	->
water	45:7	0:0	6	dec_decode
op	45:18	0:0	6	=
water	45:20	0:0	6	LZWDecode
water	45:29	0:0	6	;
water	46:2	0:0	6	}
return	47:2	47:12	4	(0)
water	47:9	0:0	5	(
water	47:10	0:0	5	0
water	47:11	0:0	5	)
water	49:1	0:0	4	}
else	49:3	52:1	2
stmts	49:8	52:1	3	
water	49:8	0:0	4	{
water	50:2	0:0	4	sp
op	50:4	0:0	4	->
water	50:6	0:0	4	lzw_maxcode
op	50:18	0:0	4	=
call	50:20	50:36	4	MAXCODE
arg	50:28	50:36	5	BITS_MIN
water	50:28	0:0	6	BITS_MIN
op	50:37	0:0	4	-
water	50:38	0:0	4	1
water	50:39	0:0	4	;
water	51:2	0:0	4	sp
op	51:4	0:0	4	->
water	51:6	0:0	4	dec_decode
op	51:17	0:0	4	=
water	51:19	0:0	4	LZWDecode
water	51:28	0:0	4	;
water	52:1	0:0	4	}
water	53:1	0:0	2	sp
op	53:3	0:0	2	->
water	53:5	0:0	2	lzw_nbits
op	53:15	0:0	2	=
water	53:17	0:0	2	BITS_MIN
water	53:25	0:0	2	;
water	54:1	0:0	2	sp
op	54:3	0:0	2	->
water	54:5	0:0	2	lzw_nextbits
op	54:18	0:0	2	=
water	54:20	0:0	2	0
water	54:21	0:0	2	;
water	55:1	0:0	2	sp
op	55:3	0:0	2	->
water	55:5	0:0	2	lzw_nextdata
op	55:18	0:0	2	=
water	55:20	0:0	2	0
water	55:21	0:0	2	;
water	56:1	0:0	2	sp
op	56:3	0:0	2	->
water	56:5	0:0	2	dec_restart
op	56:17	0:0	2	=
water	56:19	0:0	2	0
water	56:20	0:0	2	;
water	57:1	0:0	2	sp
op	57:3	0:0	2	->
water	57:5	0:0	2	dec_nbitsmask
op	57:19	0:0	2	=
call	57:21	57:37	2	MAXCODE
arg	57:29	57:37	3	BITS_MIN
water	57:29	0:0	4	BITS_MIN
water	57:38	0:0	2	;
water	59:1	0:0	2	sp
op	59:3	0:0	2	->
water	59:5	0:0	2	dec_bitsleft
op	59:18	0:0	2	=
water	59:20	0:0	2	0
water	59:21	0:0	2	;
water	61:1	0:0	2	sp
op	61:3	0:0	2	->
water	61:5	0:0	2	dec_free_entp
op	61:19	0:0	2	=
water	61:21	0:0	2	sp
op	61:23	0:0	2	->
water	61:25	0:0	2	dec_codetab
op	61:37	0:0	2	+
water	61:39	0:0	2	CODE_FIRST
water	61:49	0:0	2	;
call	69:1	69:69	2	_TIFFmemset
arg	69:13	69:30	3	sp->dec_free_entp
water	69:13	0:0	4	sp
op	69:15	0:0	4	->
water	69:17	0:0	4	dec_free_entp
arg	69:32	69:33	3	0
water	69:32	0:0	4	0
arg	69:35	69:69	3	(CSIZE-CODE_FIRST)*sizeof(code_t)
water	69:35	0:0	4	(
water	69:36	0:0	4	CSIZE
op	69:41	0:0	4	-
water	69:42	0:0	4	CODE_FIRST
water	69:52	0:0	4	)
op	69:53	0:0	4	*
op	69:54	0:0	4	sizeof
water	69:61	0:0	4	(
water	69:62	0:0	4	code_t
water	69:68	0:0	4	)
water	69:70	0:0	2	;
water	70:1	0:0	2	sp
op	70:3	0:0	2	->
water	70:5	0:0	2	dec_oldcodep
op	70:18	0:0	2	=
op	70:20	0:0	2	&
water	70:21	0:0	2	sp
op	70:23	0:0	2	->
water	70:25	0:0	2	dec_codetab
op	70:36	0:0	2	[
op	70:37	0:0	2	-
water	70:38	0:0	2	1
op	70:39	0:0	2	]
water	70:40	0:0	2	;
water	71:1	0:0	2	sp
op	71:3	0:0	2	->
water	71:5	0:0	2	dec_maxcodep
op	71:18	0:0	2	=
op	71:20	0:0	2	&
water	71:21	0:0	2	sp
op	71:23	0:0	2	->
water	71:25	0:0	2	dec_codetab
op	71:36	0:0	2	[
water	71:37	0:0	2	sp
op	71:39	0:0	2	->
water	71:41	0:0	2	dec_nbitsmask
op	71:54	0:0	2	-
water	71:55	0:0	2	1
op	71:56	0:0	2	]
water	71:57	0:0	2	;
return	72:1	72:11	2	(1)
water	72:8	0:0	3	(
water	72:9	0:0	3	1
water	72:10	0:0	3	)
