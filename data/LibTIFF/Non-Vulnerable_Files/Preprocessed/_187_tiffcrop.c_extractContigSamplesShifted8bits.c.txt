func	1:0	72:2	0	static int	extractContigSamplesShifted8bits
params	2:33	0:0	1	
param	2:34	2:43	2	uint8 *	in
param	2:45	2:55	2	uint8 *	out
param	2:57	2:68	2	uint32	cols
param	3:34	3:50	2	tsample_t	sample
param	3:52	3:62	2	uint16	spp
param	3:64	3:74	2	uint16	bps
param	4:13	4:28	2	tsample_t	count
param	4:30	4:42	2	uint32	start
param	4:44	4:54	2	uint32	end
param	5:28	5:37	2	int	shift
stmnts	0:0	71:12	1	
decl	7:2	7:35	2	int	ready_bits
op	7:20	0:0	2	=
water	7:22	0:0	2	0
water	7:23	0:0	2	,
decl	7:2	7:35	2	int	sindex
op	7:32	0:0	2	=
water	7:34	0:0	2	0
decl	8:2	8:43	2	uint32	col
water	8:12	0:0	2	,
decl	8:2	8:43	2	uint32	src_byte
water	8:22	0:0	2	,
decl	8:2	8:43	2	uint32	src_bit
water	8:31	0:0	2	,
decl	8:2	8:43	2	uint32	bit_offset
decl	9:2	9:36	2	uint8	maskbits
op	9:18	0:0	2	=
water	9:20	0:0	2	0
water	9:21	0:0	2	,
decl	9:2	9:36	2	uint8	matchbits
op	9:33	0:0	2	=
water	9:35	0:0	2	0
decl	10:2	10:29	2	uint8	buff1
op	10:15	0:0	2	=
water	10:17	0:0	2	0
water	10:18	0:0	2	,
decl	10:2	10:29	2	uint8	buff2
op	10:26	0:0	2	=
water	10:28	0:0	2	0
decl	11:2	11:17	2	uint8	*src
op	11:13	0:0	2	=
water	11:15	0:0	2	in
decl	12:2	12:18	2	uint8	*dst
op	12:13	0:0	2	=
water	12:15	0:0	2	out
if	13:2	17:4	2	(( src == NULL ) || ( dst == NULL ))
cond	13:6	13:35	3	( src == NULL ) || ( dst == NULL )
water	13:6	0:0	4	(
water	13:7	0:0	4	src
op	13:11	0:0	4	==
water	13:14	0:0	4	NULL
water	13:18	0:0	4	)
op	13:20	0:0	4	||
water	13:23	0:0	4	(
water	13:24	0:0	4	dst
op	13:28	0:0	4	==
water	13:31	0:0	4	NULL
water	13:35	0:0	4	)
stmts	14:4	17:4	3	
water	14:4	0:0	4	{
call	15:4	15:81	4	TIFFError
arg	15:14	15:48	5	"extractContigSamplesShifted8bits"
water	15:14	0:0	6	"extractContigSamplesShifted8bits"
arg	15:49	15:81	5	"Invalid input or output buffer"
water	15:49	0:0	6	"Invalid input or output buffer"
water	15:82	0:0	4	;
return	16:4	16:14	4	(1)
water	16:11	0:0	5	(
water	16:12	0:0	5	1
water	16:13	0:0	5	)
water	17:4	0:0	4	}
if	18:2	23:4	2	(( start > end ) || ( start > cols ))
cond	18:6	18:36	3	( start > end ) || ( start > cols )
water	18:6	0:0	4	(
water	18:7	0:0	4	start
op	18:13	0:0	4	>
water	18:15	0:0	4	end
water	18:18	0:0	4	)
op	18:20	0:0	4	||
water	18:23	0:0	4	(
water	18:24	0:0	4	start
op	18:30	0:0	4	>
water	18:32	0:0	4	cols
water	18:36	0:0	4	)
stmts	19:4	23:4	3	
water	19:4	0:0	4	{
call	20:4	21:61	4	TIFFError
arg	20:15	20:49	5	"extractContigSamplesShifted8bits"
water	20:15	0:0	6	"extractContigSamplesShifted8bits"
arg	21:15	21:54	5	"Invalid start column value %d ignored"
water	21:15	0:0	6	"Invalid start column value %d ignored"
arg	21:56	21:61	5	start
water	21:56	0:0	6	start
water	21:62	0:0	4	;
water	22:4	0:0	4	start
op	22:10	0:0	4	=
water	22:12	0:0	4	0
water	22:13	0:0	4	;
water	23:4	0:0	4	}
if	24:2	29:4	2	(( end == 0 ) || ( end > cols ))
cond	24:6	24:31	3	( end == 0 ) || ( end > cols )
water	24:6	0:0	4	(
water	24:7	0:0	4	end
op	24:11	0:0	4	==
water	24:14	0:0	4	0
water	24:15	0:0	4	)
op	24:17	0:0	4	||
water	24:20	0:0	4	(
water	24:21	0:0	4	end
op	24:25	0:0	4	>
water	24:27	0:0	4	cols
water	24:31	0:0	4	)
stmts	25:4	29:4	3	
water	25:4	0:0	4	{
call	26:4	27:57	4	TIFFError
arg	26:15	26:49	5	"extractContigSamplesShifted8bits"
water	26:15	0:0	6	"extractContigSamplesShifted8bits"
arg	27:15	27:52	5	"Invalid end column value %d ignored"
water	27:15	0:0	6	"Invalid end column value %d ignored"
arg	27:54	27:57	5	end
water	27:54	0:0	6	end
water	27:58	0:0	4	;
water	28:4	0:0	4	end
op	28:8	0:0	4	=
water	28:10	0:0	4	cols
water	28:14	0:0	4	;
water	29:4	0:0	4	}
water	30:2	0:0	2	ready_bits
op	30:13	0:0	2	=
water	30:15	0:0	2	shift
water	30:20	0:0	2	;
water	31:2	0:0	2	maskbits
op	31:11	0:0	2	=
water	31:14	0:0	2	(
water	31:15	0:0	2	uint8
water	31:20	0:0	2	)
op	31:21	0:0	2	-
water	31:22	0:0	2	1
op	31:24	0:0	2	>>
water	31:27	0:0	2	(
water	31:29	0:0	2	8
op	31:31	0:0	2	-
water	31:33	0:0	2	bps
water	31:36	0:0	2	)
water	31:37	0:0	2	;
water	32:2	0:0	2	buff1
op	32:8	0:0	2	=
water	32:10	0:0	2	buff2
op	32:16	0:0	2	=
water	32:18	0:0	2	0
water	32:19	0:0	2	;
for	33:2	64:4	2	(col = start ;col < end;col ++)
forinit	33:7	33:18	3	col = start ;
water	33:7	0:0	4	col
op	33:11	0:0	4	=
water	33:13	0:0	4	start
water	33:18	0:0	4	;
cond	33:20	33:26	3	col < end
water	33:20	0:0	4	col
op	33:24	0:0	4	<
water	33:26	0:0	4	end
forexpr	33:31	33:34	3	col ++
water	33:31	0:0	4	col
op	33:34	0:0	4	++
stmts	34:4	64:4	3	
water	34:4	0:0	4	{
water	35:4	0:0	4	bit_offset
op	35:15	0:0	4	=
water	35:17	0:0	4	col
op	35:21	0:0	4	*
water	35:23	0:0	4	bps
op	35:27	0:0	4	*
water	35:29	0:0	4	spp
water	35:32	0:0	4	;
for	36:4	63:6	4	(sindex = sample ;( sindex < spp ) && ( sindex < ( sample + count ) );sindex ++)
forinit	36:9	36:24	5	sindex = sample ;
water	36:9	0:0	6	sindex
op	36:16	0:0	6	=
water	36:18	0:0	6	sample
water	36:24	0:0	6	;
cond	36:26	36:70	5	( sindex < spp ) && ( sindex < ( sample + count ) )
water	36:26	0:0	6	(
water	36:27	0:0	6	sindex
op	36:34	0:0	6	<
water	36:36	0:0	6	spp
water	36:39	0:0	6	)
op	36:41	0:0	6	&&
water	36:44	0:0	6	(
water	36:45	0:0	6	sindex
op	36:52	0:0	6	<
water	36:54	0:0	6	(
water	36:55	0:0	6	sample
op	36:62	0:0	6	+
water	36:64	0:0	6	count
water	36:69	0:0	6	)
water	36:70	0:0	6	)
forexpr	36:73	36:79	5	sindex ++
water	36:73	0:0	6	sindex
op	36:79	0:0	6	++
stmts	37:6	63:6	5	
water	37:6	0:0	6	{
if	38:6	42:8	6	(sindex == 0)
cond	38:10	38:20	7	sindex == 0
water	38:10	0:0	8	sindex
op	38:17	0:0	8	==
water	38:20	0:0	8	0
stmts	39:8	42:8	7	
water	39:8	0:0	8	{
water	40:8	0:0	8	src_byte
op	40:17	0:0	8	=
water	40:19	0:0	8	bit_offset
op	40:30	0:0	8	/
water	40:32	0:0	8	8
water	40:33	0:0	8	;
water	41:8	0:0	8	src_bit
op	41:17	0:0	8	=
water	41:19	0:0	8	bit_offset
op	41:30	0:0	8	%
water	41:32	0:0	8	8
water	41:33	0:0	8	;
water	42:8	0:0	8	}
else	43:6	47:8	6
stmts	44:8	47:8	7	
water	44:8	0:0	8	{
water	45:8	0:0	8	src_byte
op	45:17	0:0	8	=
water	45:19	0:0	8	(
water	45:20	0:0	8	bit_offset
op	45:31	0:0	8	+
water	45:33	0:0	8	(
water	45:34	0:0	8	sindex
op	45:41	0:0	8	*
water	45:43	0:0	8	bps
water	45:46	0:0	8	)
water	45:47	0:0	8	)
op	45:49	0:0	8	/
water	45:51	0:0	8	8
water	45:52	0:0	8	;
water	46:8	0:0	8	src_bit
op	46:17	0:0	8	=
water	46:19	0:0	8	(
water	46:20	0:0	8	bit_offset
op	46:31	0:0	8	+
water	46:33	0:0	8	(
water	46:34	0:0	8	sindex
op	46:41	0:0	8	*
water	46:43	0:0	8	bps
water	46:46	0:0	8	)
water	46:47	0:0	8	)
op	46:49	0:0	8	%
water	46:51	0:0	8	8
water	46:52	0:0	8	;
water	47:8	0:0	8	}
water	48:6	0:0	6	src
op	48:10	0:0	6	=
water	48:12	0:0	6	in
op	48:15	0:0	6	+
water	48:17	0:0	6	src_byte
water	48:25	0:0	6	;
water	49:6	0:0	6	matchbits
op	49:16	0:0	6	=
water	49:18	0:0	6	maskbits
op	49:27	0:0	6	<<
water	49:30	0:0	6	(
water	49:31	0:0	6	8
op	49:33	0:0	6	-
water	49:35	0:0	6	src_bit
op	49:43	0:0	6	-
water	49:45	0:0	6	bps
water	49:48	0:0	6	)
water	49:49	0:0	6	;
water	50:6	0:0	6	buff1
op	50:12	0:0	6	=
water	50:14	0:0	6	(
water	50:15	0:0	6	(
op	50:16	0:0	6	*
water	50:17	0:0	6	src
water	50:20	0:0	6	)
op	50:22	0:0	6	&
water	50:24	0:0	6	matchbits
water	50:33	0:0	6	)
op	50:35	0:0	6	<<
water	50:38	0:0	6	(
water	50:39	0:0	6	src_bit
water	50:46	0:0	6	)
water	50:47	0:0	6	;
if	51:6	52:45	6	(( col == start ) && ( sindex == sample ))
cond	51:10	51:45	7	( col == start ) && ( sindex == sample )
water	51:10	0:0	8	(
water	51:11	0:0	8	col
op	51:15	0:0	8	==
water	51:18	0:0	8	start
water	51:23	0:0	8	)
op	51:25	0:0	8	&&
water	51:28	0:0	8	(
water	51:29	0:0	8	sindex
op	51:36	0:0	8	==
water	51:39	0:0	8	sample
water	51:45	0:0	8	)
stmts	52:8	52:45	7	
water	52:8	0:0	8	buff2
op	52:14	0:0	8	=
op	52:16	0:0	8	*
water	52:17	0:0	8	src
op	52:21	0:0	8	&
water	52:23	0:0	8	(
water	52:24	0:0	8	(
water	52:25	0:0	8	uint8
water	52:30	0:0	8	)
op	52:31	0:0	8	-
water	52:32	0:0	8	1
water	52:33	0:0	8	)
op	52:35	0:0	8	<<
water	52:38	0:0	8	(
water	52:39	0:0	8	shift
water	52:44	0:0	8	)
water	52:45	0:0	8	;
if	54:6	59:8	6	(ready_bits >= 8)
cond	54:10	54:24	7	ready_bits >= 8
water	54:10	0:0	8	ready_bits
op	54:21	0:0	8	>=
water	54:24	0:0	8	8
stmts	55:8	59:8	7	
water	55:8	0:0	8	{
op	56:8	0:0	8	*
water	56:9	0:0	8	dst
op	56:12	0:0	8	++
op	56:15	0:0	8	|=
water	56:18	0:0	8	buff2
water	56:23	0:0	8	;
water	57:8	0:0	8	buff2
op	57:14	0:0	8	=
water	57:16	0:0	8	buff1
water	57:21	0:0	8	;
water	58:8	0:0	8	ready_bits
op	58:19	0:0	8	-=
water	58:22	0:0	8	8
water	58:23	0:0	8	;
water	59:8	0:0	8	}
else	60:6	61:38	6
stmts	61:1	61:38	7	
water	61:1	0:0	8	buff2
op	61:7	0:0	8	=
water	61:9	0:0	8	buff2
op	61:15	0:0	8	|
water	61:17	0:0	8	(
water	61:18	0:0	8	buff1
op	61:24	0:0	8	>>
water	61:27	0:0	8	ready_bits
water	61:37	0:0	8	)
water	61:38	0:0	8	;
water	62:6	0:0	6	ready_bits
op	62:17	0:0	6	+=
water	62:20	0:0	6	bps
water	62:23	0:0	6	;
water	63:6	0:0	6	}
water	64:4	0:0	4	}
while	65:2	70:4	2	(ready_bits > 0)
cond	65:9	65:22	3	ready_bits > 0
water	65:9	0:0	4	ready_bits
op	65:20	0:0	4	>
water	65:22	0:0	4	0
stmts	66:4	70:4	3	
water	66:4	0:0	4	{
water	67:4	0:0	4	buff1
op	67:10	0:0	4	=
water	67:12	0:0	4	(
water	67:13	0:0	4	buff2
op	67:19	0:0	4	&
water	67:21	0:0	4	(
water	67:22	0:0	4	(
water	67:23	0:0	4	unsigned
water	67:32	0:0	4	int
water	67:35	0:0	4	)
water	67:36	0:0	4	255
op	67:40	0:0	4	<<
water	67:43	0:0	4	(
water	67:44	0:0	4	8
op	67:46	0:0	4	-
water	67:48	0:0	4	ready_bits
water	67:58	0:0	4	)
water	67:59	0:0	4	)
water	67:60	0:0	4	)
water	67:61	0:0	4	;
op	68:4	0:0	4	*
water	68:5	0:0	4	dst
op	68:8	0:0	4	++
op	68:11	0:0	4	=
water	68:13	0:0	4	buff1
water	68:18	0:0	4	;
water	69:4	0:0	4	ready_bits
op	69:15	0:0	4	-=
water	69:18	0:0	4	8
water	69:19	0:0	4	;
water	70:4	0:0	4	}
return	71:2	71:12	2	(0)
water	71:9	0:0	3	(
water	71:10	0:0	3	0
water	71:11	0:0	3	)
