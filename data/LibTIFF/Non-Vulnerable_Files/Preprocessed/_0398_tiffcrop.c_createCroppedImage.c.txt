func	1:0	105:2	0	static int	createCroppedImage
params	2:18	0:0	1	
param	2:19	2:43	2	struct image_data *	image
param	2:45	2:67	2	struct crop_mask *	crop
param	3:19	3:48	2	unsigned char * *	read_buff_ptr
param	3:50	3:79	2	unsigned char * *	crop_buff_ptr
stmnts	0:0	104:12	1	
decl	5:2	5:20	2	tsize_t	cropsize
decl	6:2	6:34	2	unsigned char	*read_buff
op	6:28	0:0	2	=
water	6:30	0:0	2	NULL
decl	7:2	7:34	2	unsigned char	*crop_buff
op	7:28	0:0	2	=
water	7:30	0:0	2	NULL
decl	8:2	8:34	2	unsigned char	*new_buff
op	8:28	0:0	2	=
water	8:30	0:0	2	NULL
water	9:2	0:0	2	static
water	9:12	0:0	2	tsize_t
water	9:21	0:0	2	prev_cropsize
op	9:35	0:0	2	=
water	9:37	0:0	2	0
water	9:38	0:0	2	;
water	10:2	0:0	2	read_buff
op	10:12	0:0	2	=
op	10:14	0:0	2	*
water	10:15	0:0	2	read_buff_ptr
water	10:28	0:0	2	;
water	12:2	0:0	2	crop_buff
op	12:12	0:0	2	=
water	12:14	0:0	2	read_buff
water	12:23	0:0	2	;
op	13:2	0:0	2	*
water	13:3	0:0	2	crop_buff_ptr
op	13:17	0:0	2	=
water	13:19	0:0	2	read_buff
water	13:28	0:0	2	;
water	14:2	0:0	2	crop
op	14:6	0:0	2	->
water	14:8	0:0	2	combined_width
op	14:23	0:0	2	=
water	14:25	0:0	2	image
op	14:30	0:0	2	->
water	14:32	0:0	2	width
water	14:37	0:0	2	;
water	15:2	0:0	2	crop
op	15:6	0:0	2	->
water	15:8	0:0	2	combined_length
op	15:24	0:0	2	=
water	15:26	0:0	2	image
op	15:31	0:0	2	->
water	15:33	0:0	2	length
water	15:39	0:0	2	;
water	16:2	0:0	2	cropsize
op	16:11	0:0	2	=
water	16:13	0:0	2	crop
op	16:17	0:0	2	->
water	16:19	0:0	2	bufftotal
water	16:28	0:0	2	;
water	17:2	0:0	2	crop_buff
op	17:12	0:0	2	=
op	17:14	0:0	2	*
water	17:15	0:0	2	crop_buff_ptr
water	17:28	0:0	2	;
if	18:2	24:4	2	(! crop_buff)
cond	18:6	18:7	3	! crop_buff
op	18:6	0:0	4	!
water	18:7	0:0	4	crop_buff
stmts	19:4	24:4	3	
water	19:4	0:0	4	{
water	20:4	0:0	4	crop_buff
op	20:14	0:0	4	=
water	20:16	0:0	4	(
water	20:17	0:0	4	unsigned
water	20:26	0:0	4	char
op	20:31	0:0	4	*
water	20:32	0:0	4	)
call	20:33	20:53	4	_TIFFmalloc
arg	20:45	20:53	5	cropsize
water	20:45	0:0	6	cropsize
water	20:54	0:0	4	;
op	21:4	0:0	4	*
water	21:5	0:0	4	crop_buff_ptr
op	21:19	0:0	4	=
water	21:21	0:0	4	crop_buff
water	21:30	0:0	4	;
call	22:4	22:38	4	_TIFFmemset
arg	22:16	22:25	5	crop_buff
water	22:16	0:0	6	crop_buff
arg	22:27	22:28	5	0
water	22:27	0:0	6	0
arg	22:30	22:38	5	cropsize
water	22:30	0:0	6	cropsize
water	22:39	0:0	4	;
water	23:4	0:0	4	prev_cropsize
op	23:18	0:0	4	=
water	23:20	0:0	4	cropsize
water	23:28	0:0	4	;
water	24:4	0:0	4	}
else	25:2	39:4	2
stmts	26:4	39:4	3	
water	26:4	0:0	4	{
if	27:4	38:6	4	(prev_cropsize < cropsize)
cond	27:8	27:24	5	prev_cropsize < cropsize
water	27:8	0:0	6	prev_cropsize
op	27:22	0:0	6	<
water	27:24	0:0	6	cropsize
stmts	28:6	38:6	5	
water	28:6	0:0	6	{
water	29:6	0:0	6	new_buff
op	29:15	0:0	6	=
call	29:17	29:49	6	_TIFFrealloc
arg	29:30	29:39	7	crop_buff
water	29:30	0:0	8	crop_buff
arg	29:41	29:49	7	cropsize
water	29:41	0:0	8	cropsize
water	29:50	0:0	6	;
if	30:6	34:8	6	(! new_buff)
cond	30:10	30:11	7	! new_buff
op	30:10	0:0	8	!
water	30:11	0:0	8	new_buff
stmts	31:8	34:8	7	
water	31:8	0:0	8	{
call	32:1	32:16	8	free
arg	32:7	32:16	9	crop_buff
water	32:7	0:0	10	crop_buff
water	32:17	0:0	8	;
water	33:8	0:0	8	crop_buff
op	33:18	0:0	8	=
water	33:20	0:0	8	(
water	33:21	0:0	8	unsigned
water	33:30	0:0	8	char
op	33:35	0:0	8	*
water	33:36	0:0	8	)
call	33:37	33:57	8	_TIFFmalloc
arg	33:49	33:57	9	cropsize
water	33:49	0:0	10	cropsize
water	33:58	0:0	8	;
water	34:8	0:0	8	}
else	35:6	36:28	6
stmts	36:8	36:28	7	
water	36:8	0:0	8	crop_buff
op	36:18	0:0	8	=
water	36:20	0:0	8	new_buff
water	36:28	0:0	8	;
call	37:6	37:40	6	_TIFFmemset
arg	37:18	37:27	7	crop_buff
water	37:18	0:0	8	crop_buff
arg	37:29	37:30	7	0
water	37:29	0:0	8	0
arg	37:32	37:40	7	cropsize
water	37:32	0:0	8	cropsize
water	37:41	0:0	6	;
water	38:6	0:0	6	}
water	39:4	0:0	4	}
if	40:2	44:4	2	(! crop_buff)
cond	40:6	40:7	3	! crop_buff
op	40:6	0:0	4	!
water	40:7	0:0	4	crop_buff
stmts	41:4	44:4	3	
water	41:4	0:0	4	{
call	42:4	42:79	4	TIFFError
arg	42:14	42:34	5	"createCroppedImage"
water	42:14	0:0	6	"createCroppedImage"
arg	42:36	42:79	5	"Unable to allocate/reallocate crop buffer"
water	42:36	0:0	6	"Unable to allocate/reallocate crop buffer"
water	42:80	0:0	4	;
return	43:4	43:15	4	(-1)
water	43:11	0:0	5	(
op	43:12	0:0	5	-
water	43:13	0:0	5	1
water	43:14	0:0	5	)
water	44:4	0:0	4	}
op	45:2	0:0	2	*
water	45:3	0:0	2	crop_buff_ptr
op	45:17	0:0	2	=
water	45:19	0:0	2	crop_buff
water	45:28	0:0	2	;
if	46:2	81:4	2	(crop -> crop_mode & CROP_INVERT)
cond	46:6	46:24	3	crop -> crop_mode & CROP_INVERT
water	46:6	0:0	4	crop
op	46:10	0:0	4	->
water	46:12	0:0	4	crop_mode
op	46:22	0:0	4	&
water	46:24	0:0	4	CROP_INVERT
stmts	47:4	81:4	3	
water	47:4	0:0	4	{
switch	48:4	80:6	4	(crop -> photometric)
cond	48:12	48:18	5	crop -> photometric
water	48:12	0:0	6	crop
op	48:16	0:0	6	->
water	48:18	0:0	6	photometric
stmts	49:6	80:6	5	
water	49:6	0:0	6	{
label	51:6	51:33	6	case PHOTOMETRIC_MINISWHITE :
label	52:6	52:33	6	case PHOTOMETRIC_MINISBLACK :
water	53:4	0:0	6	image
op	53:9	0:0	6	->
water	53:11	0:0	6	photometric
op	53:23	0:0	6	=
water	53:25	0:0	6	crop
op	53:29	0:0	6	->
water	53:31	0:0	6	photometric
water	53:42	0:0	6	;
break	54:4	54:9	6	
label	55:6	55:27	6	case INVERT_DATA_ONLY :
label	56:6	56:30	6	case INVERT_DATA_AND_TAG :
if	57:11	63:13	6	(invertImage (image -> photometric ,image -> spp ,image -> bps ,crop -> combined_width ,crop -> combined_length ,crop_buff ))
cond	57:15	58:81	7	invertImage (image -> photometric ,image -> spp ,image -> bps ,crop -> combined_width ,crop -> combined_length ,crop_buff )
call	57:15	58:81	8	invertImage
arg	57:27	57:45	9	image->photometric
water	57:27	0:0	10	image
op	57:32	0:0	10	->
water	57:34	0:0	10	photometric
arg	57:47	57:57	9	image->spp
water	57:47	0:0	10	image
op	57:52	0:0	10	->
water	57:54	0:0	10	spp
arg	57:59	57:69	9	image->bps
water	57:59	0:0	10	image
op	57:64	0:0	10	->
water	57:66	0:0	10	bps
arg	58:27	58:47	9	crop->combined_width
water	58:27	0:0	10	crop
op	58:31	0:0	10	->
water	58:33	0:0	10	combined_width
arg	58:49	58:70	9	crop->combined_length
water	58:49	0:0	10	crop
op	58:53	0:0	10	->
water	58:55	0:0	10	combined_length
arg	58:72	58:81	9	crop_buff
water	58:72	0:0	10	crop_buff
stmts	59:13	63:13	7	
water	59:13	0:0	8	{
call	60:13	61:83	8	TIFFError
arg	60:23	60:43	9	"createCroppedImage"
water	60:23	0:0	10	"createCroppedImage"
arg	61:23	61:83	9	"Failed to invert colorspace for image or cropped selection"
water	61:23	0:0	10	"Failed to invert colorspace for image or cropped selection"
water	61:84	0:0	8	;
return	62:13	62:24	8	(-1)
water	62:20	0:0	9	(
op	62:21	0:0	9	-
water	62:22	0:0	9	1
water	62:23	0:0	9	)
water	63:13	0:0	8	}
if	64:11	77:6	6	(crop -> photometric == INVERT_DATA_AND_TAG)
cond	64:15	64:36	7	crop -> photometric == INVERT_DATA_AND_TAG
water	64:15	0:0	8	crop
op	64:19	0:0	8	->
water	64:21	0:0	8	photometric
op	64:33	0:0	8	==
water	64:36	0:0	8	INVERT_DATA_AND_TAG
stmts	65:13	77:6	7	
water	65:13	0:0	8	{
switch	66:13	76:8	8	(image -> photometric)
cond	66:21	66:28	9	image -> photometric
water	66:21	0:0	10	image
op	66:26	0:0	10	->
water	66:28	0:0	10	photometric
stmts	67:15	76:8	9	
water	67:15	0:0	10	{
label	68:15	68:42	10	case PHOTOMETRIC_MINISWHITE :
water	69:14	0:0	10	image
op	69:19	0:0	10	->
water	69:21	0:0	10	photometric
op	69:33	0:0	10	=
water	69:35	0:0	10	PHOTOMETRIC_MINISBLACK
water	69:57	0:0	10	;
break	70:13	70:18	10	
label	71:15	71:42	10	case PHOTOMETRIC_MINISBLACK :
water	72:14	0:0	10	image
op	72:19	0:0	10	->
water	72:21	0:0	10	photometric
op	72:33	0:0	10	=
water	72:35	0:0	10	PHOTOMETRIC_MINISWHITE
water	72:57	0:0	10	;
break	73:13	73:18	10	
label	74:15	74:22	10	default :
break	75:13	75:18	10	
water	76:8	0:0	10	}
water	77:6	0:0	8	}
break	78:11	78:16	6	
label	79:6	79:13	6	default :
break	79:15	79:20	6	
water	80:6	0:0	6	}
water	81:4	0:0	4	}
if	82:2	91:4	2	(crop -> crop_mode & CROP_MIRROR)
cond	82:6	82:24	3	crop -> crop_mode & CROP_MIRROR
water	82:6	0:0	4	crop
op	82:10	0:0	4	->
water	82:12	0:0	4	crop_mode
op	82:22	0:0	4	&
water	82:24	0:0	4	CROP_MIRROR
stmts	83:4	91:4	3	
water	83:4	0:0	4	{
if	84:4	90:6	4	(mirrorImage (image -> spp ,image -> bps ,crop -> mirror ,crop -> combined_width ,crop -> combined_length ,crop_buff ))
cond	84:8	85:74	5	mirrorImage (image -> spp ,image -> bps ,crop -> mirror ,crop -> combined_width ,crop -> combined_length ,crop_buff )
call	84:8	85:74	6	mirrorImage
arg	84:20	84:30	7	image->spp
water	84:20	0:0	8	image
op	84:25	0:0	8	->
water	84:27	0:0	8	spp
arg	84:32	84:42	7	image->bps
water	84:32	0:0	8	image
op	84:37	0:0	8	->
water	84:39	0:0	8	bps
arg	84:44	84:56	7	crop->mirror
water	84:44	0:0	8	crop
op	84:48	0:0	8	->
water	84:50	0:0	8	mirror
arg	85:20	85:40	7	crop->combined_width
water	85:20	0:0	8	crop
op	85:24	0:0	8	->
water	85:26	0:0	8	combined_width
arg	85:42	85:63	7	crop->combined_length
water	85:42	0:0	8	crop
op	85:46	0:0	8	->
water	85:48	0:0	8	combined_length
arg	85:65	85:74	7	crop_buff
water	85:65	0:0	8	crop_buff
stmts	86:6	90:6	5	
water	86:6	0:0	6	{
call	87:6	88:72	6	TIFFError
arg	87:16	87:36	7	"createCroppedImage"
water	87:16	0:0	8	"createCroppedImage"
arg	87:38	87:86	7	"Failed to mirror image or cropped selection %s"
water	87:38	0:0	8	"Failed to mirror image or cropped selection %s"
arg	88:8	88:72	7	(crop->rotation==MIRROR_HORIZ)?"horizontally":"vertically"
water	88:8	0:0	8	(
water	88:9	0:0	8	crop
op	88:13	0:0	8	->
water	88:15	0:0	8	rotation
op	88:24	0:0	8	==
water	88:27	0:0	8	MIRROR_HORIZ
water	88:39	0:0	8	)
water	88:41	0:0	8	?
water	88:43	0:0	8	"horizontally"
water	88:58	0:0	8	:
water	88:60	0:0	8	"vertically"
water	88:73	0:0	6	;
return	89:6	89:17	6	(-1)
water	89:13	0:0	7	(
op	89:14	0:0	7	-
water	89:15	0:0	7	1
water	89:16	0:0	7	)
water	90:6	0:0	6	}
water	91:4	0:0	4	}
if	92:2	101:4	2	(crop -> crop_mode & CROP_ROTATE)
cond	92:6	92:24	3	crop -> crop_mode & CROP_ROTATE
water	92:6	0:0	4	crop
op	92:10	0:0	4	->
water	92:12	0:0	4	crop_mode
op	92:22	0:0	4	&
water	92:24	0:0	4	CROP_ROTATE
stmts	93:4	101:4	3	
water	93:4	0:0	4	{
if	94:4	100:6	4	(rotateImage (crop -> rotation ,image ,& crop -> combined_width ,& crop -> combined_length ,crop_buff_ptr ))
cond	94:8	95:57	5	rotateImage (crop -> rotation ,image ,& crop -> combined_width ,& crop -> combined_length ,crop_buff_ptr )
call	94:8	95:57	6	rotateImage
arg	94:20	94:34	7	crop->rotation
water	94:20	0:0	8	crop
op	94:24	0:0	8	->
water	94:26	0:0	8	rotation
arg	94:36	94:41	7	image
water	94:36	0:0	8	image
arg	94:43	94:64	7	&crop->combined_width
op	94:43	0:0	8	&
water	94:44	0:0	8	crop
op	94:48	0:0	8	->
water	94:50	0:0	8	combined_width
arg	95:20	95:42	7	&crop->combined_length
op	95:20	0:0	8	&
water	95:21	0:0	8	crop
op	95:25	0:0	8	->
water	95:27	0:0	8	combined_length
arg	95:44	95:57	7	crop_buff_ptr
water	95:44	0:0	8	crop_buff_ptr
stmts	96:6	100:6	5	
water	96:6	0:0	6	{
call	97:6	98:91	6	TIFFError
arg	97:16	97:36	7	"createCroppedImage"
water	97:16	0:0	8	"createCroppedImage"
arg	98:16	98:75	7	"Failed to rotate image or cropped selection by %d degrees"
water	98:16	0:0	8	"Failed to rotate image or cropped selection by %d degrees"
arg	98:77	98:91	7	crop->rotation
water	98:77	0:0	8	crop
op	98:81	0:0	8	->
water	98:83	0:0	8	rotation
water	98:92	0:0	6	;
return	99:6	99:17	6	(-1)
water	99:13	0:0	7	(
op	99:14	0:0	7	-
water	99:15	0:0	7	1
water	99:16	0:0	7	)
water	100:6	0:0	6	}
water	101:4	0:0	4	}
if	102:2	103:25	2	(crop_buff == read_buff)
cond	102:6	102:19	3	crop_buff == read_buff
water	102:6	0:0	4	crop_buff
op	102:16	0:0	4	==
water	102:19	0:0	4	read_buff
stmts	103:4	103:25	3	
op	103:4	0:0	4	*
water	103:5	0:0	4	read_buff_ptr
op	103:19	0:0	4	=
water	103:21	0:0	4	NULL
water	103:25	0:0	4	;
return	104:2	104:12	2	(0)
water	104:9	0:0	3	(
water	104:10	0:0	3	0
water	104:11	0:0	3	)
