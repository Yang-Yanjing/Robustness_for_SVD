func	1:0	28:0	0	static int	PixarLogPostEncode
params	2:18	0:0	1	
param	2:19	2:28	2	TIFF *	tif
stmnts	4:1	27:11	1	
water	4:1	0:0	2	static
water	4:8	0:0	2	const
water	4:14	0:0	2	char
water	4:19	0:0	2	module
op	4:25	0:0	2	[
op	4:26	0:0	2	]
op	4:28	0:0	2	=
water	4:30	0:0	2	"PixarLogPostEncode"
water	4:50	0:0	2	;
decl	5:1	5:38	2	PixarLogState	*sp
op	5:19	0:0	2	=
call	5:21	5:37	3	EncoderState
arg	5:34	5:37	4	tif
water	5:34	0:0	5	tif
decl	6:1	6:10	2	int	state
water	7:1	0:0	2	sp
op	7:3	0:0	2	->
water	7:5	0:0	2	stream
op	7:11	0:0	2	.
water	7:12	0:0	2	avail_in
op	7:21	0:0	2	=
water	7:23	0:0	2	0
water	7:24	0:0	2	;
do	8:1	26:1	2	(state != Z_STREAM_END)
cond	26:10	26:19	3	state != Z_STREAM_END
water	26:10	0:0	4	state
op	26:16	0:0	4	!=
water	26:19	0:0	4	Z_STREAM_END
stmts	8:4	26:1	3	
water	8:4	0:0	4	{
water	9:2	0:0	4	state
op	9:8	0:0	4	=
call	9:10	9:39	4	deflate
arg	9:18	9:29	5	&sp->stream
op	9:18	0:0	6	&
water	9:19	0:0	6	sp
op	9:21	0:0	6	->
water	9:23	0:0	6	stream
arg	9:31	9:39	5	Z_FINISH
water	9:31	0:0	6	Z_FINISH
water	9:40	0:0	4	;
switch	10:2	25:2	4	(state)
cond	10:10	10:10	5	state
water	10:10	0:0	6	state
stmts	10:17	25:2	5	
water	10:17	0:0	6	{
label	11:2	11:19	6	case Z_STREAM_END :
label	12:2	12:11	6	case Z_OK :
if	13:6	19:6	6	(( tmsize_t ) sp -> stream . avail_out != tif -> tif_rawdatasize)
cond	13:10	13:49	7	( tmsize_t ) sp -> stream . avail_out != tif -> tif_rawdatasize
water	13:10	0:0	8	(
water	13:11	0:0	8	tmsize_t
water	13:19	0:0	8	)
water	13:20	0:0	8	sp
op	13:22	0:0	8	->
water	13:24	0:0	8	stream
op	13:30	0:0	8	.
water	13:31	0:0	8	avail_out
op	13:41	0:0	8	!=
water	13:44	0:0	8	tif
op	13:47	0:0	8	->
water	13:49	0:0	8	tif_rawdatasize
stmts	13:66	19:6	7	
water	13:66	0:0	8	{
water	14:7	0:0	8	tif
op	14:10	0:0	8	->
water	14:12	0:0	8	tif_rawcc
op	14:22	0:0	8	=
water	15:4	0:0	8	tif
op	15:7	0:0	8	->
water	15:9	0:0	8	tif_rawdatasize
op	15:25	0:0	8	-
water	15:27	0:0	8	sp
op	15:29	0:0	8	->
water	15:31	0:0	8	stream
op	15:37	0:0	8	.
water	15:38	0:0	8	avail_out
water	15:47	0:0	8	;
call	16:7	16:25	8	TIFFFlushData1
arg	16:22	16:25	9	tif
water	16:22	0:0	10	tif
water	16:26	0:0	8	;
water	17:7	0:0	8	sp
op	17:9	0:0	8	->
water	17:11	0:0	8	stream
op	17:17	0:0	8	.
water	17:18	0:0	8	next_out
op	17:27	0:0	8	=
water	17:29	0:0	8	tif
op	17:32	0:0	8	->
water	17:34	0:0	8	tif_rawdata
water	17:45	0:0	8	;
water	18:7	0:0	8	sp
op	18:9	0:0	8	->
water	18:11	0:0	8	stream
op	18:17	0:0	8	.
water	18:18	0:0	8	avail_out
op	18:28	0:0	8	=
water	18:30	0:0	8	(
water	18:31	0:0	8	uInt
water	18:35	0:0	8	)
water	18:37	0:0	8	tif
op	18:40	0:0	8	->
water	18:42	0:0	8	tif_rawdatasize
water	18:57	0:0	8	;
water	19:6	0:0	8	}
break	20:6	20:11	6	
label	21:2	21:9	6	default :
call	22:3	23:45	6	TIFFErrorExt
arg	22:16	22:35	7	tif->tif_clientdata
water	22:16	0:0	8	tif
op	22:19	0:0	8	->
water	22:21	0:0	8	tif_clientdata
arg	22:37	22:43	7	module
water	22:37	0:0	8	module
arg	22:45	22:61	7	"ZLib error: %s"
water	22:45	0:0	8	"ZLib error: %s"
arg	23:3	23:45	7	sp->stream.msg?sp->stream.msg:"(null)"
water	23:3	0:0	8	sp
op	23:5	0:0	8	->
water	23:7	0:0	8	stream
op	23:13	0:0	8	.
water	23:14	0:0	8	msg
water	23:18	0:0	8	?
water	23:20	0:0	8	sp
op	23:22	0:0	8	->
water	23:24	0:0	8	stream
op	23:30	0:0	8	.
water	23:31	0:0	8	msg
water	23:35	0:0	8	:
water	23:37	0:0	8	"(null)"
water	23:46	0:0	6	;
return	24:6	24:16	6	(0)
water	24:13	0:0	7	(
water	24:14	0:0	7	0
water	24:15	0:0	7	)
water	25:2	0:0	6	}
water	26:1	0:0	4	}
water	26:32	0:0	2	;
return	27:1	27:11	2	(1)
water	27:8	0:0	3	(
water	27:9	0:0	3	1
water	27:10	0:0	3	)
