func	1:0	95:2	0	static int	extractContigSamples32bits
params	2:27	0:0	1	
param	2:28	2:37	2	uint8 *	in
param	2:39	2:49	2	uint8 *	out
param	2:51	2:62	2	uint32	cols
param	3:28	3:44	2	tsample_t	sample
param	3:46	3:56	2	uint16	spp
param	3:58	3:68	2	uint16	bps
param	4:8	4:23	2	tsample_t	count
param	4:25	4:37	2	uint32	start
param	4:39	4:49	2	uint32	end
stmnts	0:0	94:12	1	
decl	6:2	6:36	2	int	ready_bits
op	6:20	0:0	2	=
water	6:22	0:0	2	0
water	6:23	0:0	2	,
decl	6:2	6:36	2	int	sindex
op	6:32	0:0	2	=
water	6:34	0:0	2	0
decl	7:2	7:43	2	uint32	col
water	7:12	0:0	2	,
decl	7:2	7:43	2	uint32	src_byte
water	7:22	0:0	2	,
decl	7:2	7:43	2	uint32	src_bit
water	7:31	0:0	2	,
decl	7:2	7:43	2	uint32	bit_offset
decl	8:2	8:37	2	uint32	longbuff1
op	8:19	0:0	2	=
water	8:21	0:0	2	0
water	8:22	0:0	2	,
decl	8:2	8:37	2	uint32	longbuff2
op	8:34	0:0	2	=
water	8:36	0:0	2	0
decl	9:2	9:36	2	uint64	maskbits
op	9:18	0:0	2	=
water	9:20	0:0	2	0
water	9:21	0:0	2	,
decl	9:2	9:36	2	uint64	matchbits
op	9:33	0:0	2	=
water	9:35	0:0	2	0
decl	10:2	10:40	2	uint64	buff1
op	10:15	0:0	2	=
water	10:17	0:0	2	0
water	10:18	0:0	2	,
decl	10:2	10:40	2	uint64	buff2
op	10:26	0:0	2	=
water	10:28	0:0	2	0
water	10:29	0:0	2	,
decl	10:2	10:40	2	uint64	buff3
op	10:37	0:0	2	=
water	10:39	0:0	2	0
decl	11:2	11:67	2	uint8	bytebuff1
op	11:19	0:0	2	=
water	11:21	0:0	2	0
water	11:22	0:0	2	,
decl	11:2	11:67	2	uint8	bytebuff2
op	11:34	0:0	2	=
water	11:36	0:0	2	0
water	11:37	0:0	2	,
decl	11:2	11:67	2	uint8	bytebuff3
op	11:49	0:0	2	=
water	11:51	0:0	2	0
water	11:52	0:0	2	,
decl	11:2	11:67	2	uint8	bytebuff4
op	11:64	0:0	2	=
water	11:66	0:0	2	0
decl	12:2	12:17	2	uint8	*src
op	12:13	0:0	2	=
water	12:15	0:0	2	in
decl	13:2	13:18	2	uint8	*dst
op	13:13	0:0	2	=
water	13:15	0:0	2	out
if	14:2	18:4	2	(( in == NULL ) || ( out == NULL ))
cond	14:6	14:34	3	( in == NULL ) || ( out == NULL )
water	14:6	0:0	4	(
water	14:7	0:0	4	in
op	14:10	0:0	4	==
water	14:13	0:0	4	NULL
water	14:17	0:0	4	)
op	14:19	0:0	4	||
water	14:22	0:0	4	(
water	14:23	0:0	4	out
op	14:27	0:0	4	==
water	14:30	0:0	4	NULL
water	14:34	0:0	4	)
stmts	15:4	18:4	3	
water	15:4	0:0	4	{
call	16:4	16:75	4	TIFFError
arg	16:14	16:42	5	"extractContigSamples32bits"
water	16:14	0:0	6	"extractContigSamples32bits"
arg	16:43	16:75	5	"Invalid input or output buffer"
water	16:43	0:0	6	"Invalid input or output buffer"
water	16:76	0:0	4	;
return	17:4	17:14	4	(1)
water	17:11	0:0	5	(
water	17:12	0:0	5	1
water	17:13	0:0	5	)
water	18:4	0:0	4	}
if	19:2	24:4	2	(( start > end ) || ( start > cols ))
cond	19:6	19:36	3	( start > end ) || ( start > cols )
water	19:6	0:0	4	(
water	19:7	0:0	4	start
op	19:13	0:0	4	>
water	19:15	0:0	4	end
water	19:18	0:0	4	)
op	19:20	0:0	4	||
water	19:23	0:0	4	(
water	19:24	0:0	4	start
op	19:30	0:0	4	>
water	19:32	0:0	4	cols
water	19:36	0:0	4	)
stmts	20:4	24:4	3	
water	20:4	0:0	4	{
call	21:4	22:61	4	TIFFError
arg	21:15	21:43	5	"extractContigSamples32bits"
water	21:15	0:0	6	"extractContigSamples32bits"
arg	22:15	22:54	5	"Invalid start column value %d ignored"
water	22:15	0:0	6	"Invalid start column value %d ignored"
arg	22:56	22:61	5	start
water	22:56	0:0	6	start
water	22:62	0:0	4	;
water	23:4	0:0	4	start
op	23:10	0:0	4	=
water	23:12	0:0	4	0
water	23:13	0:0	4	;
water	24:4	0:0	4	}
if	25:2	30:4	2	(( end == 0 ) || ( end > cols ))
cond	25:6	25:31	3	( end == 0 ) || ( end > cols )
water	25:6	0:0	4	(
water	25:7	0:0	4	end
op	25:11	0:0	4	==
water	25:14	0:0	4	0
water	25:15	0:0	4	)
op	25:17	0:0	4	||
water	25:20	0:0	4	(
water	25:21	0:0	4	end
op	25:25	0:0	4	>
water	25:27	0:0	4	cols
water	25:31	0:0	4	)
stmts	26:4	30:4	3	
water	26:4	0:0	4	{
call	27:4	28:57	4	TIFFError
arg	27:15	27:43	5	"extractContigSamples32bits"
water	27:15	0:0	6	"extractContigSamples32bits"
arg	28:15	28:52	5	"Invalid end column value %d ignored"
water	28:15	0:0	6	"Invalid end column value %d ignored"
arg	28:54	28:57	5	end
water	28:54	0:0	6	end
water	28:58	0:0	4	;
water	29:4	0:0	4	end
op	29:8	0:0	4	=
water	29:10	0:0	4	cols
water	29:14	0:0	4	;
water	30:4	0:0	4	}
water	32:2	0:0	2	ready_bits
op	32:13	0:0	2	=
water	32:15	0:0	2	0
water	32:16	0:0	2	;
water	33:2	0:0	2	maskbits
op	33:11	0:0	2	=
water	33:14	0:0	2	(
water	33:15	0:0	2	uint64
water	33:21	0:0	2	)
op	33:22	0:0	2	-
water	33:23	0:0	2	1
op	33:25	0:0	2	>>
water	33:28	0:0	2	(
water	33:30	0:0	2	64
op	33:33	0:0	2	-
water	33:35	0:0	2	bps
water	33:38	0:0	2	)
water	33:39	0:0	2	;
for	34:2	86:4	2	(col = start ;col < end;col ++)
forinit	34:7	34:18	3	col = start ;
water	34:7	0:0	4	col
op	34:11	0:0	4	=
water	34:13	0:0	4	start
water	34:18	0:0	4	;
cond	34:20	34:26	3	col < end
water	34:20	0:0	4	col
op	34:24	0:0	4	<
water	34:26	0:0	4	end
forexpr	34:31	34:34	3	col ++
water	34:31	0:0	4	col
op	34:34	0:0	4	++
stmts	35:4	86:4	3	
water	35:4	0:0	4	{
water	37:4	0:0	4	bit_offset
op	37:15	0:0	4	=
water	37:17	0:0	4	col
op	37:21	0:0	4	*
water	37:23	0:0	4	bps
op	37:27	0:0	4	*
water	37:29	0:0	4	spp
water	37:32	0:0	4	;
for	38:4	85:6	4	(sindex = sample ;( sindex < spp ) && ( sindex < ( sample + count ) );sindex ++)
forinit	38:9	38:24	5	sindex = sample ;
water	38:9	0:0	6	sindex
op	38:16	0:0	6	=
water	38:18	0:0	6	sample
water	38:24	0:0	6	;
cond	38:26	38:70	5	( sindex < spp ) && ( sindex < ( sample + count ) )
water	38:26	0:0	6	(
water	38:27	0:0	6	sindex
op	38:34	0:0	6	<
water	38:36	0:0	6	spp
water	38:39	0:0	6	)
op	38:41	0:0	6	&&
water	38:44	0:0	6	(
water	38:45	0:0	6	sindex
op	38:52	0:0	6	<
water	38:54	0:0	6	(
water	38:55	0:0	6	sample
op	38:62	0:0	6	+
water	38:64	0:0	6	count
water	38:69	0:0	6	)
water	38:70	0:0	6	)
forexpr	38:73	38:79	5	sindex ++
water	38:73	0:0	6	sindex
op	38:79	0:0	6	++
stmts	39:6	85:6	5	
water	39:6	0:0	6	{
if	40:6	44:8	6	(sindex == 0)
cond	40:10	40:20	7	sindex == 0
water	40:10	0:0	8	sindex
op	40:17	0:0	8	==
water	40:20	0:0	8	0
stmts	41:8	44:8	7	
water	41:8	0:0	8	{
water	42:8	0:0	8	src_byte
op	42:17	0:0	8	=
water	42:19	0:0	8	bit_offset
op	42:30	0:0	8	/
water	42:32	0:0	8	8
water	42:33	0:0	8	;
water	43:8	0:0	8	src_bit
op	43:17	0:0	8	=
water	43:19	0:0	8	bit_offset
op	43:30	0:0	8	%
water	43:32	0:0	8	8
water	43:33	0:0	8	;
water	44:8	0:0	8	}
else	45:6	49:8	6
stmts	46:8	49:8	7	
water	46:8	0:0	8	{
water	47:8	0:0	8	src_byte
op	47:17	0:0	8	=
water	47:19	0:0	8	(
water	47:20	0:0	8	bit_offset
op	47:31	0:0	8	+
water	47:33	0:0	8	(
water	47:34	0:0	8	sindex
op	47:41	0:0	8	*
water	47:43	0:0	8	bps
water	47:46	0:0	8	)
water	47:47	0:0	8	)
op	47:49	0:0	8	/
water	47:51	0:0	8	8
water	47:52	0:0	8	;
water	48:8	0:0	8	src_bit
op	48:17	0:0	8	=
water	48:19	0:0	8	(
water	48:20	0:0	8	bit_offset
op	48:31	0:0	8	+
water	48:33	0:0	8	(
water	48:34	0:0	8	sindex
op	48:41	0:0	8	*
water	48:43	0:0	8	bps
water	48:46	0:0	8	)
water	48:47	0:0	8	)
op	48:49	0:0	8	%
water	48:51	0:0	8	8
water	48:52	0:0	8	;
water	49:8	0:0	8	}
water	50:6	0:0	6	src
op	50:10	0:0	6	=
water	50:12	0:0	6	in
op	50:15	0:0	6	+
water	50:17	0:0	6	src_byte
water	50:25	0:0	6	;
water	51:6	0:0	6	matchbits
op	51:16	0:0	6	=
water	51:18	0:0	6	maskbits
op	51:27	0:0	6	<<
water	51:30	0:0	6	(
water	51:31	0:0	6	64
op	51:34	0:0	6	-
water	51:36	0:0	6	src_bit
op	51:44	0:0	6	-
water	51:46	0:0	6	bps
water	51:49	0:0	6	)
water	51:50	0:0	6	;
if	52:6	56:8	6	(little_endian)
cond	52:10	52:10	7	little_endian
water	52:10	0:0	8	little_endian
stmts	53:8	56:8	7	
water	53:8	0:0	8	{
water	54:1	0:0	8	longbuff1
op	54:11	0:0	8	=
water	54:13	0:0	8	(
water	54:14	0:0	8	src
op	54:17	0:0	8	[
water	54:18	0:0	8	0
op	54:19	0:0	8	]
op	54:21	0:0	8	<<
water	54:24	0:0	8	24
water	54:26	0:0	8	)
op	54:28	0:0	8	|
water	54:30	0:0	8	(
water	54:31	0:0	8	src
op	54:34	0:0	8	[
water	54:35	0:0	8	1
op	54:36	0:0	8	]
op	54:38	0:0	8	<<
water	54:41	0:0	8	16
water	54:43	0:0	8	)
op	54:46	0:0	8	|
water	54:48	0:0	8	(
water	54:49	0:0	8	src
op	54:52	0:0	8	[
water	54:53	0:0	8	2
op	54:54	0:0	8	]
op	54:56	0:0	8	<<
water	54:59	0:0	8	8
water	54:60	0:0	8	)
op	54:62	0:0	8	|
water	54:64	0:0	8	src
op	54:67	0:0	8	[
water	54:68	0:0	8	3
op	54:69	0:0	8	]
water	54:70	0:0	8	;
water	55:1	0:0	8	longbuff2
op	55:11	0:0	8	=
water	55:13	0:0	8	longbuff1
water	55:22	0:0	8	;
water	56:8	0:0	8	}
else	57:6	61:1	6
stmts	58:8	61:1	7	
water	58:8	0:0	8	{
water	59:1	0:0	8	longbuff1
op	59:11	0:0	8	=
water	59:13	0:0	8	(
water	59:14	0:0	8	src
op	59:17	0:0	8	[
water	59:18	0:0	8	3
op	59:19	0:0	8	]
op	59:21	0:0	8	<<
water	59:24	0:0	8	24
water	59:26	0:0	8	)
op	59:28	0:0	8	|
water	59:30	0:0	8	(
water	59:31	0:0	8	src
op	59:34	0:0	8	[
water	59:35	0:0	8	2
op	59:36	0:0	8	]
op	59:38	0:0	8	<<
water	59:41	0:0	8	16
water	59:43	0:0	8	)
op	59:45	0:0	8	|
water	59:47	0:0	8	(
water	59:48	0:0	8	src
op	59:51	0:0	8	[
water	59:52	0:0	8	1
op	59:53	0:0	8	]
op	59:55	0:0	8	<<
water	59:58	0:0	8	8
water	59:59	0:0	8	)
op	59:61	0:0	8	|
water	59:63	0:0	8	src
op	59:66	0:0	8	[
water	59:67	0:0	8	0
op	59:68	0:0	8	]
water	59:69	0:0	8	;
water	60:1	0:0	8	longbuff2
op	60:11	0:0	8	=
water	60:13	0:0	8	longbuff1
water	60:22	0:0	8	;
water	61:1	0:0	8	}
water	62:6	0:0	6	buff3
op	62:12	0:0	6	=
water	62:14	0:0	6	(
water	62:15	0:0	6	(
water	62:16	0:0	6	uint64
water	62:22	0:0	6	)
water	62:23	0:0	6	longbuff1
op	62:33	0:0	6	<<
water	62:36	0:0	6	32
water	62:38	0:0	6	)
op	62:40	0:0	6	|
water	62:42	0:0	6	longbuff2
water	62:51	0:0	6	;
water	63:6	0:0	6	buff1
op	63:12	0:0	6	=
water	63:14	0:0	6	(
water	63:15	0:0	6	buff3
op	63:21	0:0	6	&
water	63:23	0:0	6	matchbits
water	63:32	0:0	6	)
op	63:34	0:0	6	<<
water	63:37	0:0	6	(
water	63:38	0:0	6	src_bit
water	63:45	0:0	6	)
water	63:46	0:0	6	;
if	65:6	78:8	6	(ready_bits >= 32)
cond	65:10	65:24	7	ready_bits >= 32
water	65:10	0:0	8	ready_bits
op	65:21	0:0	8	>=
water	65:24	0:0	8	32
stmts	66:8	78:8	7	
water	66:8	0:0	8	{
water	67:8	0:0	8	bytebuff1
op	67:18	0:0	8	=
water	67:20	0:0	8	(
water	67:21	0:0	8	buff2
op	67:27	0:0	8	>>
water	67:30	0:0	8	56
water	67:32	0:0	8	)
water	67:33	0:0	8	;
op	68:8	0:0	8	*
water	68:9	0:0	8	dst
op	68:12	0:0	8	++
op	68:15	0:0	8	=
water	68:17	0:0	8	bytebuff1
water	68:26	0:0	8	;
water	69:8	0:0	8	bytebuff2
op	69:18	0:0	8	=
water	69:20	0:0	8	(
water	69:21	0:0	8	buff2
op	69:27	0:0	8	>>
water	69:30	0:0	8	48
water	69:32	0:0	8	)
water	69:33	0:0	8	;
op	70:8	0:0	8	*
water	70:9	0:0	8	dst
op	70:12	0:0	8	++
op	70:15	0:0	8	=
water	70:17	0:0	8	bytebuff2
water	70:26	0:0	8	;
water	71:8	0:0	8	bytebuff3
op	71:18	0:0	8	=
water	71:20	0:0	8	(
water	71:21	0:0	8	buff2
op	71:27	0:0	8	>>
water	71:30	0:0	8	40
water	71:32	0:0	8	)
water	71:33	0:0	8	;
op	72:8	0:0	8	*
water	72:9	0:0	8	dst
op	72:12	0:0	8	++
op	72:15	0:0	8	=
water	72:17	0:0	8	bytebuff3
water	72:26	0:0	8	;
water	73:8	0:0	8	bytebuff4
op	73:18	0:0	8	=
water	73:20	0:0	8	(
water	73:21	0:0	8	buff2
op	73:27	0:0	8	>>
water	73:30	0:0	8	32
water	73:32	0:0	8	)
water	73:33	0:0	8	;
op	74:8	0:0	8	*
water	74:9	0:0	8	dst
op	74:12	0:0	8	++
op	74:15	0:0	8	=
water	74:17	0:0	8	bytebuff4
water	74:26	0:0	8	;
water	75:8	0:0	8	ready_bits
op	75:19	0:0	8	-=
water	75:22	0:0	8	32
water	75:24	0:0	8	;
water	77:8	0:0	8	buff2
op	77:14	0:0	8	=
water	77:16	0:0	8	(
water	77:17	0:0	8	(
water	77:18	0:0	8	buff2
op	77:24	0:0	8	<<
water	77:27	0:0	8	32
water	77:29	0:0	8	)
op	77:31	0:0	8	|
water	77:33	0:0	8	(
water	77:34	0:0	8	buff1
op	77:40	0:0	8	>>
water	77:43	0:0	8	ready_bits
water	77:53	0:0	8	)
water	77:54	0:0	8	)
water	77:55	0:0	8	;
water	78:8	0:0	8	}
else	79:6	83:8	6
stmts	80:8	83:8	7	
water	80:8	0:0	8	{
water	81:8	0:0	8	bytebuff1
op	81:18	0:0	8	=
water	81:20	0:0	8	bytebuff2
op	81:30	0:0	8	=
water	81:32	0:0	8	bytebuff3
op	81:42	0:0	8	=
water	81:44	0:0	8	bytebuff4
op	81:54	0:0	8	=
water	81:56	0:0	8	0
water	81:57	0:0	8	;
water	82:8	0:0	8	buff2
op	82:14	0:0	8	=
water	82:16	0:0	8	(
water	82:17	0:0	8	buff2
op	82:23	0:0	8	|
water	82:25	0:0	8	(
water	82:26	0:0	8	buff1
op	82:32	0:0	8	>>
water	82:35	0:0	8	ready_bits
water	82:45	0:0	8	)
water	82:46	0:0	8	)
water	82:47	0:0	8	;
water	83:8	0:0	8	}
water	84:6	0:0	6	ready_bits
op	84:17	0:0	6	+=
water	84:20	0:0	6	bps
water	84:23	0:0	6	;
water	85:6	0:0	6	}
water	86:4	0:0	4	}
while	87:2	93:4	2	(ready_bits > 0)
cond	87:9	87:22	3	ready_bits > 0
water	87:9	0:0	4	ready_bits
op	87:20	0:0	4	>
water	87:22	0:0	4	0
stmts	88:4	93:4	3	
water	88:4	0:0	4	{
water	89:4	0:0	4	bytebuff1
op	89:14	0:0	4	=
water	89:16	0:0	4	(
water	89:17	0:0	4	buff2
op	89:23	0:0	4	>>
water	89:26	0:0	4	56
water	89:28	0:0	4	)
water	89:29	0:0	4	;
op	90:4	0:0	4	*
water	90:5	0:0	4	dst
op	90:8	0:0	4	++
op	90:11	0:0	4	=
water	90:13	0:0	4	bytebuff1
water	90:22	0:0	4	;
water	91:4	0:0	4	buff2
op	91:10	0:0	4	=
water	91:12	0:0	4	(
water	91:13	0:0	4	buff2
op	91:19	0:0	4	<<
water	91:22	0:0	4	8
water	91:23	0:0	4	)
water	91:24	0:0	4	;
water	92:4	0:0	4	ready_bits
op	92:15	0:0	4	-=
water	92:18	0:0	4	8
water	92:19	0:0	4	;
water	93:4	0:0	4	}
return	94:2	94:12	2	(0)
water	94:9	0:0	3	(
water	94:10	0:0	3	0
water	94:11	0:0	3	)
