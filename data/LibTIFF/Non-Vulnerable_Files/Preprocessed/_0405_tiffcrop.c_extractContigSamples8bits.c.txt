func	1:0	69:2	0	static int	extractContigSamples8bits
params	2:26	0:0	1	
param	2:27	2:36	2	uint8 *	in
param	2:38	2:48	2	uint8 *	out
param	2:50	2:61	2	uint32	cols
param	3:27	3:43	2	tsample_t	sample
param	3:45	3:55	2	uint16	spp
param	3:57	3:67	2	uint16	bps
param	4:27	4:42	2	tsample_t	count
param	4:44	4:56	2	uint32	start
param	4:58	4:68	2	uint32	end
stmnts	0:0	68:12	1	
decl	6:2	6:35	2	int	ready_bits
op	6:20	0:0	2	=
water	6:22	0:0	2	0
water	6:23	0:0	2	,
decl	6:2	6:35	2	int	sindex
op	6:32	0:0	2	=
water	6:34	0:0	2	0
decl	7:2	7:43	2	uint32	col
water	7:12	0:0	2	,
decl	7:2	7:43	2	uint32	src_byte
water	7:22	0:0	2	,
decl	7:2	7:43	2	uint32	src_bit
water	7:31	0:0	2	,
decl	7:2	7:43	2	uint32	bit_offset
decl	8:2	8:36	2	uint8	maskbits
op	8:18	0:0	2	=
water	8:20	0:0	2	0
water	8:21	0:0	2	,
decl	8:2	8:36	2	uint8	matchbits
op	8:33	0:0	2	=
water	8:35	0:0	2	0
decl	9:2	9:29	2	uint8	buff1
op	9:15	0:0	2	=
water	9:17	0:0	2	0
water	9:18	0:0	2	,
decl	9:2	9:29	2	uint8	buff2
op	9:26	0:0	2	=
water	9:28	0:0	2	0
decl	10:2	10:17	2	uint8	*src
op	10:13	0:0	2	=
water	10:15	0:0	2	in
decl	11:2	11:18	2	uint8	*dst
op	11:13	0:0	2	=
water	11:15	0:0	2	out
if	12:2	16:4	2	(( src == NULL ) || ( dst == NULL ))
cond	12:6	12:35	3	( src == NULL ) || ( dst == NULL )
water	12:6	0:0	4	(
water	12:7	0:0	4	src
op	12:11	0:0	4	==
water	12:14	0:0	4	NULL
water	12:18	0:0	4	)
op	12:20	0:0	4	||
water	12:23	0:0	4	(
water	12:24	0:0	4	dst
op	12:28	0:0	4	==
water	12:31	0:0	4	NULL
water	12:35	0:0	4	)
stmts	13:4	16:4	3	
water	13:4	0:0	4	{
call	14:4	14:74	4	TIFFError
arg	14:14	14:41	5	"extractContigSamples8bits"
water	14:14	0:0	6	"extractContigSamples8bits"
arg	14:42	14:74	5	"Invalid input or output buffer"
water	14:42	0:0	6	"Invalid input or output buffer"
water	14:75	0:0	4	;
return	15:4	15:14	4	(1)
water	15:11	0:0	5	(
water	15:12	0:0	5	1
water	15:13	0:0	5	)
water	16:4	0:0	4	}
if	17:2	22:4	2	(( start > end ) || ( start > cols ))
cond	17:6	17:36	3	( start > end ) || ( start > cols )
water	17:6	0:0	4	(
water	17:7	0:0	4	start
op	17:13	0:0	4	>
water	17:15	0:0	4	end
water	17:18	0:0	4	)
op	17:20	0:0	4	||
water	17:23	0:0	4	(
water	17:24	0:0	4	start
op	17:30	0:0	4	>
water	17:32	0:0	4	cols
water	17:36	0:0	4	)
stmts	18:4	22:4	3	
water	18:4	0:0	4	{
call	19:4	20:61	4	TIFFError
arg	19:15	19:42	5	"extractContigSamples8bits"
water	19:15	0:0	6	"extractContigSamples8bits"
arg	20:15	20:54	5	"Invalid start column value %d ignored"
water	20:15	0:0	6	"Invalid start column value %d ignored"
arg	20:56	20:61	5	start
water	20:56	0:0	6	start
water	20:62	0:0	4	;
water	21:4	0:0	4	start
op	21:10	0:0	4	=
water	21:12	0:0	4	0
water	21:13	0:0	4	;
water	22:4	0:0	4	}
if	23:2	28:4	2	(( end == 0 ) || ( end > cols ))
cond	23:6	23:31	3	( end == 0 ) || ( end > cols )
water	23:6	0:0	4	(
water	23:7	0:0	4	end
op	23:11	0:0	4	==
water	23:14	0:0	4	0
water	23:15	0:0	4	)
op	23:17	0:0	4	||
water	23:20	0:0	4	(
water	23:21	0:0	4	end
op	23:25	0:0	4	>
water	23:27	0:0	4	cols
water	23:31	0:0	4	)
stmts	24:4	28:4	3	
water	24:4	0:0	4	{
call	25:4	26:57	4	TIFFError
arg	25:15	25:42	5	"extractContigSamples8bits"
water	25:15	0:0	6	"extractContigSamples8bits"
arg	26:15	26:52	5	"Invalid end column value %d ignored"
water	26:15	0:0	6	"Invalid end column value %d ignored"
arg	26:54	26:57	5	end
water	26:54	0:0	6	end
water	26:58	0:0	4	;
water	27:4	0:0	4	end
op	27:8	0:0	4	=
water	27:10	0:0	4	cols
water	27:14	0:0	4	;
water	28:4	0:0	4	}
water	29:2	0:0	2	ready_bits
op	29:13	0:0	2	=
water	29:15	0:0	2	0
water	29:16	0:0	2	;
water	30:2	0:0	2	maskbits
op	30:11	0:0	2	=
water	30:14	0:0	2	(
water	30:15	0:0	2	uint8
water	30:20	0:0	2	)
op	30:21	0:0	2	-
water	30:22	0:0	2	1
op	30:24	0:0	2	>>
water	30:27	0:0	2	(
water	30:29	0:0	2	8
op	30:31	0:0	2	-
water	30:33	0:0	2	bps
water	30:36	0:0	2	)
water	30:37	0:0	2	;
water	31:2	0:0	2	buff1
op	31:8	0:0	2	=
water	31:10	0:0	2	buff2
op	31:16	0:0	2	=
water	31:18	0:0	2	0
water	31:19	0:0	2	;
for	32:2	61:4	2	(col = start ;col < end;col ++)
forinit	32:7	32:18	3	col = start ;
water	32:7	0:0	4	col
op	32:11	0:0	4	=
water	32:13	0:0	4	start
water	32:18	0:0	4	;
cond	32:20	32:26	3	col < end
water	32:20	0:0	4	col
op	32:24	0:0	4	<
water	32:26	0:0	4	end
forexpr	32:31	32:34	3	col ++
water	32:31	0:0	4	col
op	32:34	0:0	4	++
stmts	33:4	61:4	3	
water	33:4	0:0	4	{
water	34:4	0:0	4	bit_offset
op	34:15	0:0	4	=
water	34:17	0:0	4	col
op	34:21	0:0	4	*
water	34:23	0:0	4	bps
op	34:27	0:0	4	*
water	34:29	0:0	4	spp
water	34:32	0:0	4	;
for	35:4	60:6	4	(sindex = sample ;( sindex < spp ) && ( sindex < ( sample + count ) );sindex ++)
forinit	35:9	35:24	5	sindex = sample ;
water	35:9	0:0	6	sindex
op	35:16	0:0	6	=
water	35:18	0:0	6	sample
water	35:24	0:0	6	;
cond	35:26	35:70	5	( sindex < spp ) && ( sindex < ( sample + count ) )
water	35:26	0:0	6	(
water	35:27	0:0	6	sindex
op	35:34	0:0	6	<
water	35:36	0:0	6	spp
water	35:39	0:0	6	)
op	35:41	0:0	6	&&
water	35:44	0:0	6	(
water	35:45	0:0	6	sindex
op	35:52	0:0	6	<
water	35:54	0:0	6	(
water	35:55	0:0	6	sample
op	35:62	0:0	6	+
water	35:64	0:0	6	count
water	35:69	0:0	6	)
water	35:70	0:0	6	)
forexpr	35:73	35:79	5	sindex ++
water	35:73	0:0	6	sindex
op	35:79	0:0	6	++
stmts	36:6	60:6	5	
water	36:6	0:0	6	{
if	37:6	41:8	6	(sindex == 0)
cond	37:10	37:20	7	sindex == 0
water	37:10	0:0	8	sindex
op	37:17	0:0	8	==
water	37:20	0:0	8	0
stmts	38:8	41:8	7	
water	38:8	0:0	8	{
water	39:8	0:0	8	src_byte
op	39:17	0:0	8	=
water	39:19	0:0	8	bit_offset
op	39:30	0:0	8	/
water	39:32	0:0	8	8
water	39:33	0:0	8	;
water	40:8	0:0	8	src_bit
op	40:17	0:0	8	=
water	40:19	0:0	8	bit_offset
op	40:30	0:0	8	%
water	40:32	0:0	8	8
water	40:33	0:0	8	;
water	41:8	0:0	8	}
else	42:6	46:8	6
stmts	43:8	46:8	7	
water	43:8	0:0	8	{
water	44:8	0:0	8	src_byte
op	44:17	0:0	8	=
water	44:19	0:0	8	(
water	44:20	0:0	8	bit_offset
op	44:31	0:0	8	+
water	44:33	0:0	8	(
water	44:34	0:0	8	sindex
op	44:41	0:0	8	*
water	44:43	0:0	8	bps
water	44:46	0:0	8	)
water	44:47	0:0	8	)
op	44:49	0:0	8	/
water	44:51	0:0	8	8
water	44:52	0:0	8	;
water	45:8	0:0	8	src_bit
op	45:17	0:0	8	=
water	45:19	0:0	8	(
water	45:20	0:0	8	bit_offset
op	45:31	0:0	8	+
water	45:33	0:0	8	(
water	45:34	0:0	8	sindex
op	45:41	0:0	8	*
water	45:43	0:0	8	bps
water	45:46	0:0	8	)
water	45:47	0:0	8	)
op	45:49	0:0	8	%
water	45:51	0:0	8	8
water	45:52	0:0	8	;
water	46:8	0:0	8	}
water	47:6	0:0	6	src
op	47:10	0:0	6	=
water	47:12	0:0	6	in
op	47:15	0:0	6	+
water	47:17	0:0	6	src_byte
water	47:25	0:0	6	;
water	48:6	0:0	6	matchbits
op	48:16	0:0	6	=
water	48:18	0:0	6	maskbits
op	48:27	0:0	6	<<
water	48:30	0:0	6	(
water	48:31	0:0	6	8
op	48:33	0:0	6	-
water	48:35	0:0	6	src_bit
op	48:43	0:0	6	-
water	48:45	0:0	6	bps
water	48:48	0:0	6	)
water	48:49	0:0	6	;
water	49:6	0:0	6	buff1
op	49:12	0:0	6	=
water	49:14	0:0	6	(
water	49:15	0:0	6	(
op	49:16	0:0	6	*
water	49:17	0:0	6	src
water	49:20	0:0	6	)
op	49:22	0:0	6	&
water	49:24	0:0	6	matchbits
water	49:33	0:0	6	)
op	49:35	0:0	6	<<
water	49:38	0:0	6	(
water	49:39	0:0	6	src_bit
water	49:46	0:0	6	)
water	49:47	0:0	6	;
if	51:6	56:8	6	(ready_bits >= 8)
cond	51:10	51:24	7	ready_bits >= 8
water	51:10	0:0	8	ready_bits
op	51:21	0:0	8	>=
water	51:24	0:0	8	8
stmts	52:8	56:8	7	
water	52:8	0:0	8	{
op	53:8	0:0	8	*
water	53:9	0:0	8	dst
op	53:12	0:0	8	++
op	53:15	0:0	8	=
water	53:17	0:0	8	buff2
water	53:22	0:0	8	;
water	54:8	0:0	8	buff2
op	54:14	0:0	8	=
water	54:16	0:0	8	buff1
water	54:21	0:0	8	;
water	55:8	0:0	8	ready_bits
op	55:19	0:0	8	-=
water	55:22	0:0	8	8
water	55:23	0:0	8	;
water	56:8	0:0	8	}
else	57:6	58:47	6
stmts	58:8	58:47	7	
water	58:8	0:0	8	buff2
op	58:14	0:0	8	=
water	58:16	0:0	8	(
water	58:17	0:0	8	buff2
op	58:23	0:0	8	|
water	58:25	0:0	8	(
water	58:26	0:0	8	buff1
op	58:32	0:0	8	>>
water	58:35	0:0	8	ready_bits
water	58:45	0:0	8	)
water	58:46	0:0	8	)
water	58:47	0:0	8	;
water	59:6	0:0	6	ready_bits
op	59:17	0:0	6	+=
water	59:20	0:0	6	bps
water	59:23	0:0	6	;
water	60:6	0:0	6	}
water	61:4	0:0	4	}
while	62:2	67:4	2	(ready_bits > 0)
cond	62:9	62:22	3	ready_bits > 0
water	62:9	0:0	4	ready_bits
op	62:20	0:0	4	>
water	62:22	0:0	4	0
stmts	63:4	67:4	3	
water	63:4	0:0	4	{
water	64:4	0:0	4	buff1
op	64:10	0:0	4	=
water	64:12	0:0	4	(
water	64:13	0:0	4	buff2
op	64:19	0:0	4	&
water	64:21	0:0	4	(
water	64:22	0:0	4	(
water	64:23	0:0	4	unsigned
water	64:32	0:0	4	int
water	64:35	0:0	4	)
water	64:36	0:0	4	255
op	64:40	0:0	4	<<
water	64:43	0:0	4	(
water	64:44	0:0	4	8
op	64:46	0:0	4	-
water	64:48	0:0	4	ready_bits
water	64:58	0:0	4	)
water	64:59	0:0	4	)
water	64:60	0:0	4	)
water	64:61	0:0	4	;
op	65:4	0:0	4	*
water	65:5	0:0	4	dst
op	65:8	0:0	4	++
op	65:11	0:0	4	=
water	65:13	0:0	4	buff1
water	65:18	0:0	4	;
water	66:4	0:0	4	ready_bits
op	66:15	0:0	4	-=
water	66:18	0:0	4	8
water	66:19	0:0	4	;
water	67:4	0:0	4	}
return	68:2	68:12	2	(0)
water	68:9	0:0	3	(
water	68:10	0:0	3	0
water	68:11	0:0	3	)
