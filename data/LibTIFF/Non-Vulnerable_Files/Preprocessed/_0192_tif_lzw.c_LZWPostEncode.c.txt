func	1:0	43:0	0	static int	LZWPostEncode
params	2:13	0:0	1	
param	2:14	2:23	2	TIFF *	tif
stmnts	4:1	42:11	1	
water	4:1	0:0	2	register
water	4:10	0:0	2	LZWCodecState
op	4:24	0:0	2	*
water	4:25	0:0	2	sp
op	4:28	0:0	2	=
call	4:30	4:46	2	EncoderState
arg	4:43	4:46	3	tif
water	4:43	0:0	4	tif
water	4:47	0:0	2	;
decl	5:1	5:27	2	uint8	*op
op	5:11	0:0	2	=
water	5:13	0:0	2	tif
op	5:16	0:0	2	->
water	5:18	0:0	2	tif_rawcp
decl	6:1	6:33	2	long	nextbits
op	6:15	0:0	2	=
water	6:17	0:0	2	sp
op	6:19	0:0	2	->
water	6:21	0:0	2	lzw_nextbits
decl	7:1	7:42	2	unsigned long	nextdata
op	7:24	0:0	2	=
water	7:26	0:0	2	sp
op	7:28	0:0	2	->
water	7:30	0:0	2	lzw_nextdata
decl	8:1	8:33	2	long	outcount
op	8:15	0:0	2	=
water	8:17	0:0	2	sp
op	8:19	0:0	2	->
water	8:21	0:0	2	enc_outcount
decl	9:1	9:26	2	int	nbits
op	9:11	0:0	2	=
water	9:13	0:0	2	sp
op	9:15	0:0	2	->
water	9:17	0:0	2	lzw_nbits
if	10:1	15:1	2	(op > sp -> enc_rawlimit)
cond	10:5	10:14	3	op > sp -> enc_rawlimit
water	10:5	0:0	4	op
op	10:8	0:0	4	>
water	10:10	0:0	4	sp
op	10:12	0:0	4	->
water	10:14	0:0	4	enc_rawlimit
stmts	10:28	15:1	3	
water	10:28	0:0	4	{
water	11:2	0:0	4	tif
op	11:5	0:0	4	->
water	11:7	0:0	4	tif_rawcc
op	11:17	0:0	4	=
call	11:19	11:51	4	(tmsize_t)
arg	11:30	11:51	5	op-tif->tif_rawdata
water	11:30	0:0	6	op
op	11:33	0:0	6	-
water	11:35	0:0	6	tif
op	11:38	0:0	6	->
water	11:40	0:0	6	tif_rawdata
water	11:52	0:0	4	;
if	12:2	13:28	4	(!TIFFFlushData1 (tif ))
cond	12:6	12:25	5	!TIFFFlushData1 (tif )
op	12:6	0:0	6	!
call	12:7	12:25	6	TIFFFlushData1
arg	12:22	12:25	7	tif
water	12:22	0:0	8	tif
stmts	13:20	13:28	5	
return	13:20	13:28	6	0
water	13:27	0:0	7	0
water	14:2	0:0	4	op
op	14:5	0:0	4	=
water	14:7	0:0	4	tif
op	14:10	0:0	4	->
water	14:12	0:0	4	tif_rawdata
water	14:23	0:0	4	;
water	15:1	0:0	4	}
if	16:1	36:1	2	(sp -> enc_oldcode != ( hcode_t ) - 1)
cond	16:5	16:35	3	sp -> enc_oldcode != ( hcode_t ) - 1
water	16:5	0:0	4	sp
op	16:7	0:0	4	->
water	16:9	0:0	4	enc_oldcode
op	16:21	0:0	4	!=
water	16:24	0:0	4	(
water	16:25	0:0	4	hcode_t
water	16:32	0:0	4	)
op	16:34	0:0	4	-
water	16:35	0:0	4	1
stmts	16:38	36:1	3	
water	16:38	0:0	4	{
decl	17:16	17:47	4	int	free_ent
op	17:29	0:0	4	=
water	17:31	0:0	4	sp
op	17:33	0:0	4	->
water	17:35	0:0	4	lzw_free_ent
call	18:2	18:33	4	PutNextCode
arg	18:14	18:16	5	op
water	18:14	0:0	6	op
arg	18:18	18:33	5	sp->enc_oldcode
water	18:18	0:0	6	sp
op	18:20	0:0	6	->
water	18:22	0:0	6	enc_oldcode
water	18:34	0:0	4	;
water	19:2	0:0	4	sp
op	19:4	0:0	4	->
water	19:6	0:0	4	enc_oldcode
op	19:18	0:0	4	=
water	19:20	0:0	4	(
water	19:21	0:0	4	hcode_t
water	19:28	0:0	4	)
op	19:30	0:0	4	-
water	19:31	0:0	4	1
water	19:32	0:0	4	;
water	20:16	0:0	4	free_ent
op	20:25	0:0	4	++
water	20:27	0:0	4	;
if	21:16	26:16	4	(free_ent == CODE_MAX - 1)
cond	21:20	21:41	5	free_ent == CODE_MAX - 1
water	21:20	0:0	6	free_ent
op	21:29	0:0	6	==
water	21:32	0:0	6	CODE_MAX
op	21:40	0:0	6	-
water	21:41	0:0	6	1
stmts	21:44	26:16	5	
water	21:44	0:0	6	{
water	23:24	0:0	6	outcount
op	23:33	0:0	6	=
water	23:35	0:0	6	0
water	23:36	0:0	6	;
call	24:24	24:50	6	PutNextCode
arg	24:36	24:38	7	op
water	24:36	0:0	8	op
arg	24:40	24:50	7	CODE_CLEAR
water	24:40	0:0	8	CODE_CLEAR
water	24:51	0:0	6	;
water	25:24	0:0	6	nbits
op	25:30	0:0	6	=
water	25:32	0:0	6	BITS_MIN
water	25:40	0:0	6	;
water	26:16	0:0	6	}
else	26:18	35:16	4
stmts	26:23	35:16	5	
water	26:23	0:0	6	{
if	31:24	34:24	6	(free_ent > sp -> lzw_maxcode)
cond	31:28	31:43	7	free_ent > sp -> lzw_maxcode
water	31:28	0:0	8	free_ent
op	31:37	0:0	8	>
water	31:39	0:0	8	sp
op	31:41	0:0	8	->
water	31:43	0:0	8	lzw_maxcode
stmts	31:56	34:24	7	
water	31:56	0:0	8	{
water	32:32	0:0	8	nbits
op	32:37	0:0	8	++
water	32:39	0:0	8	;
call	33:32	33:56	8	assert
arg	33:39	33:56	9	nbits<=BITS_MAX
water	33:39	0:0	10	nbits
op	33:45	0:0	10	<=
water	33:48	0:0	10	BITS_MAX
water	33:57	0:0	8	;
water	34:24	0:0	8	}
water	35:16	0:0	6	}
water	36:1	0:0	4	}
call	37:1	37:25	2	PutNextCode
arg	37:13	37:15	3	op
water	37:13	0:0	4	op
arg	37:17	37:25	3	CODE_EOI
water	37:17	0:0	4	CODE_EOI
water	37:26	0:0	2	;
if	39:1	40:58	2	(nextbits > 0)
cond	39:5	39:16	3	nextbits > 0
water	39:5	0:0	4	nextbits
op	39:14	0:0	4	>
water	39:16	0:0	4	0
stmts	40:2	40:58	3	
op	40:2	0:0	4	*
water	40:3	0:0	4	op
op	40:5	0:0	4	++
op	40:8	0:0	4	=
call	40:10	40:57	4	(unsignedchar)
arg	40:26	40:57	5	(nextdata<<(8-nextbits))&0xff
water	40:26	0:0	6	(
water	40:27	0:0	6	nextdata
op	40:36	0:0	6	<<
water	40:39	0:0	6	(
water	40:40	0:0	6	8
op	40:41	0:0	6	-
water	40:42	0:0	6	nextbits
water	40:50	0:0	6	)
water	40:51	0:0	6	)
op	40:52	0:0	6	&
water	40:53	0:0	6	0
water	40:54	0:0	6	xff
water	40:58	0:0	4	;
water	41:1	0:0	2	tif
op	41:4	0:0	2	->
water	41:6	0:0	2	tif_rawcc
op	41:16	0:0	2	=
call	41:18	41:50	2	(tmsize_t)
arg	41:29	41:50	3	op-tif->tif_rawdata
water	41:29	0:0	4	op
op	41:32	0:0	4	-
water	41:34	0:0	4	tif
op	41:37	0:0	4	->
water	41:39	0:0	4	tif_rawdata
water	41:51	0:0	2	;
return	42:1	42:11	2	(1)
water	42:8	0:0	3	(
water	42:9	0:0	3	1
water	42:10	0:0	3	)
