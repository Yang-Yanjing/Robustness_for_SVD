func	1:0	83:2	0	static int	extractContigSamples24bits
params	2:27	0:0	1	
param	2:28	2:37	2	uint8 *	in
param	2:39	2:49	2	uint8 *	out
param	2:51	2:62	2	uint32	cols
param	3:22	3:38	2	tsample_t	sample
param	3:40	3:50	2	uint16	spp
param	3:52	3:62	2	uint16	bps
param	4:28	4:43	2	tsample_t	count
param	4:45	4:57	2	uint32	start
param	4:59	4:69	2	uint32	end
stmnts	0:0	82:12	1	
decl	6:2	6:35	2	int	ready_bits
op	6:20	0:0	2	=
water	6:22	0:0	2	0
water	6:23	0:0	2	,
decl	6:2	6:35	2	int	sindex
op	6:32	0:0	2	=
water	6:34	0:0	2	0
decl	7:2	7:43	2	uint32	col
water	7:12	0:0	2	,
decl	7:2	7:43	2	uint32	src_byte
water	7:22	0:0	2	,
decl	7:2	7:43	2	uint32	src_bit
water	7:31	0:0	2	,
decl	7:2	7:43	2	uint32	bit_offset
decl	8:2	8:36	2	uint32	maskbits
op	8:18	0:0	2	=
water	8:20	0:0	2	0
water	8:21	0:0	2	,
decl	8:2	8:36	2	uint32	matchbits
op	8:33	0:0	2	=
water	8:35	0:0	2	0
decl	9:2	9:29	2	uint32	buff1
op	9:15	0:0	2	=
water	9:17	0:0	2	0
water	9:18	0:0	2	,
decl	9:2	9:29	2	uint32	buff2
op	9:26	0:0	2	=
water	9:28	0:0	2	0
decl	10:2	10:37	2	uint8	bytebuff1
op	10:19	0:0	2	=
water	10:21	0:0	2	0
water	10:22	0:0	2	,
decl	10:2	10:37	2	uint8	bytebuff2
op	10:34	0:0	2	=
water	10:36	0:0	2	0
decl	11:2	11:17	2	uint8	*src
op	11:13	0:0	2	=
water	11:15	0:0	2	in
decl	12:2	12:18	2	uint8	*dst
op	12:13	0:0	2	=
water	12:15	0:0	2	out
if	13:2	17:4	2	(( in == NULL ) || ( out == NULL ))
cond	13:6	13:34	3	( in == NULL ) || ( out == NULL )
water	13:6	0:0	4	(
water	13:7	0:0	4	in
op	13:10	0:0	4	==
water	13:13	0:0	4	NULL
water	13:17	0:0	4	)
op	13:19	0:0	4	||
water	13:22	0:0	4	(
water	13:23	0:0	4	out
op	13:27	0:0	4	==
water	13:30	0:0	4	NULL
water	13:34	0:0	4	)
stmts	14:4	17:4	3	
water	14:4	0:0	4	{
call	15:4	15:75	4	TIFFError
arg	15:14	15:42	5	"extractContigSamples24bits"
water	15:14	0:0	6	"extractContigSamples24bits"
arg	15:43	15:75	5	"Invalid input or output buffer"
water	15:43	0:0	6	"Invalid input or output buffer"
water	15:76	0:0	4	;
return	16:4	16:14	4	(1)
water	16:11	0:0	5	(
water	16:12	0:0	5	1
water	16:13	0:0	5	)
water	17:4	0:0	4	}
if	18:2	23:4	2	(( start > end ) || ( start > cols ))
cond	18:6	18:36	3	( start > end ) || ( start > cols )
water	18:6	0:0	4	(
water	18:7	0:0	4	start
op	18:13	0:0	4	>
water	18:15	0:0	4	end
water	18:18	0:0	4	)
op	18:20	0:0	4	||
water	18:23	0:0	4	(
water	18:24	0:0	4	start
op	18:30	0:0	4	>
water	18:32	0:0	4	cols
water	18:36	0:0	4	)
stmts	19:4	23:4	3	
water	19:4	0:0	4	{
call	20:4	21:61	4	TIFFError
arg	20:15	20:43	5	"extractContigSamples24bits"
water	20:15	0:0	6	"extractContigSamples24bits"
arg	21:15	21:54	5	"Invalid start column value %d ignored"
water	21:15	0:0	6	"Invalid start column value %d ignored"
arg	21:56	21:61	5	start
water	21:56	0:0	6	start
water	21:62	0:0	4	;
water	22:4	0:0	4	start
op	22:10	0:0	4	=
water	22:12	0:0	4	0
water	22:13	0:0	4	;
water	23:4	0:0	4	}
if	24:2	29:4	2	(( end == 0 ) || ( end > cols ))
cond	24:6	24:31	3	( end == 0 ) || ( end > cols )
water	24:6	0:0	4	(
water	24:7	0:0	4	end
op	24:11	0:0	4	==
water	24:14	0:0	4	0
water	24:15	0:0	4	)
op	24:17	0:0	4	||
water	24:20	0:0	4	(
water	24:21	0:0	4	end
op	24:25	0:0	4	>
water	24:27	0:0	4	cols
water	24:31	0:0	4	)
stmts	25:4	29:4	3	
water	25:4	0:0	4	{
call	26:4	27:57	4	TIFFError
arg	26:15	26:43	5	"extractContigSamples24bits"
water	26:15	0:0	6	"extractContigSamples24bits"
arg	27:15	27:52	5	"Invalid end column value %d ignored"
water	27:15	0:0	6	"Invalid end column value %d ignored"
arg	27:54	27:57	5	end
water	27:54	0:0	6	end
water	27:58	0:0	4	;
water	28:4	0:0	4	end
op	28:8	0:0	4	=
water	28:10	0:0	4	cols
water	28:14	0:0	4	;
water	29:4	0:0	4	}
water	30:2	0:0	2	ready_bits
op	30:13	0:0	2	=
water	30:15	0:0	2	0
water	30:16	0:0	2	;
water	31:2	0:0	2	maskbits
op	31:11	0:0	2	=
water	31:14	0:0	2	(
water	31:15	0:0	2	uint32
water	31:21	0:0	2	)
op	31:22	0:0	2	-
water	31:23	0:0	2	1
op	31:25	0:0	2	>>
water	31:28	0:0	2	(
water	31:30	0:0	2	32
op	31:33	0:0	2	-
water	31:35	0:0	2	bps
water	31:38	0:0	2	)
water	31:39	0:0	2	;
for	32:2	72:4	2	(col = start ;col < end;col ++)
forinit	32:7	32:18	3	col = start ;
water	32:7	0:0	4	col
op	32:11	0:0	4	=
water	32:13	0:0	4	start
water	32:18	0:0	4	;
cond	32:20	32:26	3	col < end
water	32:20	0:0	4	col
op	32:24	0:0	4	<
water	32:26	0:0	4	end
forexpr	32:31	32:34	3	col ++
water	32:31	0:0	4	col
op	32:34	0:0	4	++
stmts	33:4	72:4	3	
water	33:4	0:0	4	{
water	35:4	0:0	4	bit_offset
op	35:15	0:0	4	=
water	35:17	0:0	4	col
op	35:21	0:0	4	*
water	35:23	0:0	4	bps
op	35:27	0:0	4	*
water	35:29	0:0	4	spp
water	35:32	0:0	4	;
for	36:4	71:6	4	(sindex = sample ;( sindex < spp ) && ( sindex < ( sample + count ) );sindex ++)
forinit	36:9	36:24	5	sindex = sample ;
water	36:9	0:0	6	sindex
op	36:16	0:0	6	=
water	36:18	0:0	6	sample
water	36:24	0:0	6	;
cond	36:26	36:70	5	( sindex < spp ) && ( sindex < ( sample + count ) )
water	36:26	0:0	6	(
water	36:27	0:0	6	sindex
op	36:34	0:0	6	<
water	36:36	0:0	6	spp
water	36:39	0:0	6	)
op	36:41	0:0	6	&&
water	36:44	0:0	6	(
water	36:45	0:0	6	sindex
op	36:52	0:0	6	<
water	36:54	0:0	6	(
water	36:55	0:0	6	sample
op	36:62	0:0	6	+
water	36:64	0:0	6	count
water	36:69	0:0	6	)
water	36:70	0:0	6	)
forexpr	36:73	36:79	5	sindex ++
water	36:73	0:0	6	sindex
op	36:79	0:0	6	++
stmts	37:6	71:6	5	
water	37:6	0:0	6	{
if	38:6	42:8	6	(sindex == 0)
cond	38:10	38:20	7	sindex == 0
water	38:10	0:0	8	sindex
op	38:17	0:0	8	==
water	38:20	0:0	8	0
stmts	39:8	42:8	7	
water	39:8	0:0	8	{
water	40:8	0:0	8	src_byte
op	40:17	0:0	8	=
water	40:19	0:0	8	bit_offset
op	40:30	0:0	8	/
water	40:32	0:0	8	8
water	40:33	0:0	8	;
water	41:8	0:0	8	src_bit
op	41:17	0:0	8	=
water	41:19	0:0	8	bit_offset
op	41:30	0:0	8	%
water	41:32	0:0	8	8
water	41:33	0:0	8	;
water	42:8	0:0	8	}
else	43:6	47:8	6
stmts	44:8	47:8	7	
water	44:8	0:0	8	{
water	45:8	0:0	8	src_byte
op	45:17	0:0	8	=
water	45:19	0:0	8	(
water	45:20	0:0	8	bit_offset
op	45:31	0:0	8	+
water	45:33	0:0	8	(
water	45:34	0:0	8	sindex
op	45:41	0:0	8	*
water	45:43	0:0	8	bps
water	45:46	0:0	8	)
water	45:47	0:0	8	)
op	45:49	0:0	8	/
water	45:51	0:0	8	8
water	45:52	0:0	8	;
water	46:8	0:0	8	src_bit
op	46:17	0:0	8	=
water	46:19	0:0	8	(
water	46:20	0:0	8	bit_offset
op	46:31	0:0	8	+
water	46:33	0:0	8	(
water	46:34	0:0	8	sindex
op	46:41	0:0	8	*
water	46:43	0:0	8	bps
water	46:46	0:0	8	)
water	46:47	0:0	8	)
op	46:49	0:0	8	%
water	46:51	0:0	8	8
water	46:52	0:0	8	;
water	47:8	0:0	8	}
water	48:6	0:0	6	src
op	48:10	0:0	6	=
water	48:12	0:0	6	in
op	48:15	0:0	6	+
water	48:17	0:0	6	src_byte
water	48:25	0:0	6	;
water	49:6	0:0	6	matchbits
op	49:16	0:0	6	=
water	49:18	0:0	6	maskbits
op	49:27	0:0	6	<<
water	49:30	0:0	6	(
water	49:31	0:0	6	32
op	49:34	0:0	6	-
water	49:36	0:0	6	src_bit
op	49:44	0:0	6	-
water	49:46	0:0	6	bps
water	49:49	0:0	6	)
water	49:50	0:0	6	;
if	50:6	51:65	6	(little_endian)
cond	50:10	50:10	7	little_endian
water	50:10	0:0	8	little_endian
stmts	51:1	51:65	7	
water	51:1	0:0	8	buff1
op	51:7	0:0	8	=
water	51:9	0:0	8	(
water	51:10	0:0	8	src
op	51:13	0:0	8	[
water	51:14	0:0	8	0
op	51:15	0:0	8	]
op	51:17	0:0	8	<<
water	51:20	0:0	8	24
water	51:22	0:0	8	)
op	51:24	0:0	8	|
water	51:26	0:0	8	(
water	51:27	0:0	8	src
op	51:30	0:0	8	[
water	51:31	0:0	8	1
op	51:32	0:0	8	]
op	51:34	0:0	8	<<
water	51:37	0:0	8	16
water	51:39	0:0	8	)
op	51:41	0:0	8	|
water	51:43	0:0	8	(
water	51:44	0:0	8	src
op	51:47	0:0	8	[
water	51:48	0:0	8	2
op	51:49	0:0	8	]
op	51:51	0:0	8	<<
water	51:54	0:0	8	8
water	51:55	0:0	8	)
op	51:57	0:0	8	|
water	51:59	0:0	8	src
op	51:62	0:0	8	[
water	51:63	0:0	8	3
op	51:64	0:0	8	]
water	51:65	0:0	8	;
else	52:6	53:65	6
stmts	53:1	53:65	7	
water	53:1	0:0	8	buff1
op	53:7	0:0	8	=
water	53:9	0:0	8	(
water	53:10	0:0	8	src
op	53:13	0:0	8	[
water	53:14	0:0	8	3
op	53:15	0:0	8	]
op	53:17	0:0	8	<<
water	53:20	0:0	8	24
water	53:22	0:0	8	)
op	53:24	0:0	8	|
water	53:26	0:0	8	(
water	53:27	0:0	8	src
op	53:30	0:0	8	[
water	53:31	0:0	8	2
op	53:32	0:0	8	]
op	53:34	0:0	8	<<
water	53:37	0:0	8	16
water	53:39	0:0	8	)
op	53:41	0:0	8	|
water	53:43	0:0	8	(
water	53:44	0:0	8	src
op	53:47	0:0	8	[
water	53:48	0:0	8	1
op	53:49	0:0	8	]
op	53:51	0:0	8	<<
water	53:54	0:0	8	8
water	53:55	0:0	8	)
op	53:57	0:0	8	|
water	53:59	0:0	8	src
op	53:62	0:0	8	[
water	53:63	0:0	8	0
op	53:64	0:0	8	]
water	53:65	0:0	8	;
water	54:6	0:0	6	buff1
op	54:12	0:0	6	=
water	54:14	0:0	6	(
water	54:15	0:0	6	buff1
op	54:21	0:0	6	&
water	54:23	0:0	6	matchbits
water	54:32	0:0	6	)
op	54:34	0:0	6	<<
water	54:37	0:0	6	(
water	54:38	0:0	6	src_bit
water	54:45	0:0	6	)
water	54:46	0:0	6	;
if	55:6	59:8	6	(ready_bits < 16)
cond	55:10	55:23	7	ready_bits < 16
water	55:10	0:0	8	ready_bits
op	55:21	0:0	8	<
water	55:23	0:0	8	16
stmts	56:8	59:8	7	
water	56:8	0:0	8	{
water	57:8	0:0	8	bytebuff1
op	57:18	0:0	8	=
water	57:20	0:0	8	bytebuff2
op	57:30	0:0	8	=
water	57:32	0:0	8	0
water	57:33	0:0	8	;
water	58:8	0:0	8	buff2
op	58:14	0:0	8	=
water	58:16	0:0	8	(
water	58:17	0:0	8	buff2
op	58:23	0:0	8	|
water	58:25	0:0	8	(
water	58:26	0:0	8	buff1
op	58:32	0:0	8	>>
water	58:35	0:0	8	ready_bits
water	58:45	0:0	8	)
water	58:46	0:0	8	)
water	58:47	0:0	8	;
water	59:8	0:0	8	}
else	60:6	69:8	6
stmts	61:8	69:8	7	
water	61:8	0:0	8	{
water	62:8	0:0	8	bytebuff1
op	62:18	0:0	8	=
water	62:20	0:0	8	(
water	62:21	0:0	8	buff2
op	62:27	0:0	8	>>
water	62:30	0:0	8	24
water	62:32	0:0	8	)
water	62:33	0:0	8	;
op	63:8	0:0	8	*
water	63:9	0:0	8	dst
op	63:12	0:0	8	++
op	63:15	0:0	8	=
water	63:17	0:0	8	bytebuff1
water	63:26	0:0	8	;
water	64:8	0:0	8	bytebuff2
op	64:18	0:0	8	=
water	64:20	0:0	8	(
water	64:21	0:0	8	buff2
op	64:27	0:0	8	>>
water	64:30	0:0	8	16
water	64:32	0:0	8	)
water	64:33	0:0	8	;
op	65:8	0:0	8	*
water	65:9	0:0	8	dst
op	65:12	0:0	8	++
op	65:15	0:0	8	=
water	65:17	0:0	8	bytebuff2
water	65:26	0:0	8	;
water	66:8	0:0	8	ready_bits
op	66:19	0:0	8	-=
water	66:22	0:0	8	16
water	66:24	0:0	8	;
water	68:8	0:0	8	buff2
op	68:14	0:0	8	=
water	68:16	0:0	8	(
water	68:17	0:0	8	(
water	68:18	0:0	8	buff2
op	68:24	0:0	8	<<
water	68:27	0:0	8	16
water	68:29	0:0	8	)
op	68:31	0:0	8	|
water	68:33	0:0	8	(
water	68:34	0:0	8	buff1
op	68:40	0:0	8	>>
water	68:43	0:0	8	ready_bits
water	68:53	0:0	8	)
water	68:54	0:0	8	)
water	68:55	0:0	8	;
water	69:8	0:0	8	}
water	70:6	0:0	6	ready_bits
op	70:17	0:0	6	+=
water	70:20	0:0	6	bps
water	70:23	0:0	6	;
water	71:6	0:0	6	}
water	72:4	0:0	4	}
while	74:2	81:4	2	(ready_bits > 0)
cond	74:9	74:22	3	ready_bits > 0
water	74:9	0:0	4	ready_bits
op	74:20	0:0	4	>
water	74:22	0:0	4	0
stmts	75:4	81:4	3	
water	75:4	0:0	4	{
water	76:4	0:0	4	bytebuff1
op	76:14	0:0	4	=
water	76:16	0:0	4	(
water	76:17	0:0	4	buff2
op	76:23	0:0	4	>>
water	76:26	0:0	4	24
water	76:28	0:0	4	)
water	76:29	0:0	4	;
op	77:4	0:0	4	*
water	77:5	0:0	4	dst
op	77:8	0:0	4	++
op	77:11	0:0	4	=
water	77:13	0:0	4	bytebuff1
water	77:22	0:0	4	;
water	78:4	0:0	4	buff2
op	78:10	0:0	4	=
water	78:12	0:0	4	(
water	78:13	0:0	4	buff2
op	78:19	0:0	4	<<
water	78:22	0:0	4	8
water	78:23	0:0	4	)
water	78:24	0:0	4	;
water	79:4	0:0	4	bytebuff2
op	79:14	0:0	4	=
water	79:16	0:0	4	bytebuff1
water	79:25	0:0	4	;
water	80:4	0:0	4	ready_bits
op	80:15	0:0	4	-=
water	80:18	0:0	4	8
water	80:19	0:0	4	;
water	81:4	0:0	4	}
return	82:2	82:12	2	(0)
water	82:9	0:0	3	(
water	82:10	0:0	3	0
water	82:11	0:0	3	)
