func	1:0	58:2	0	static int	reverseSamples8bits
params	2:20	0:0	1	
param	2:21	2:31	2	uint16	spp
param	2:33	2:43	2	uint16	bps
param	2:45	2:57	2	uint32	width
param	3:21	3:33	2	uint8 *	ibuff
param	3:35	3:47	2	uint8 *	obuff
stmnts	0:0	57:12	1	
decl	5:2	5:25	2	int	ready_bits
op	5:22	0:0	2	=
water	5:24	0:0	2	0
decl	6:2	6:14	2	uint32	col
decl	7:2	7:28	2	uint32	src_byte
water	7:19	0:0	2	,
decl	7:2	7:28	2	uint32	src_bit
decl	8:2	8:25	2	uint32	bit_offset
op	8:22	0:0	2	=
water	8:24	0:0	2	0
decl	9:2	9:40	2	uint8	match_bits
op	9:22	0:0	2	=
water	9:24	0:0	2	0
water	9:25	0:0	2	,
decl	9:2	9:40	2	uint8	mask_bits
op	9:37	0:0	2	=
water	9:39	0:0	2	0
decl	10:2	10:31	2	uint8	buff1
op	10:17	0:0	2	=
water	10:19	0:0	2	0
water	10:20	0:0	2	,
decl	10:2	10:31	2	uint8	buff2
op	10:28	0:0	2	=
water	10:30	0:0	2	0
decl	11:2	11:20	2	unsigned char	*src
decl	12:2	12:20	2	unsigned char	*dst
decl	13:2	13:18	2	tsample_t	sample
if	14:2	18:4	2	(( ibuff == NULL ) || ( obuff == NULL ))
cond	14:6	14:39	3	( ibuff == NULL ) || ( obuff == NULL )
water	14:6	0:0	4	(
water	14:7	0:0	4	ibuff
op	14:13	0:0	4	==
water	14:16	0:0	4	NULL
water	14:20	0:0	4	)
op	14:22	0:0	4	||
water	14:25	0:0	4	(
water	14:26	0:0	4	obuff
op	14:32	0:0	4	==
water	14:35	0:0	4	NULL
water	14:39	0:0	4	)
stmts	15:4	18:4	3	
water	15:4	0:0	4	{
call	16:4	16:66	4	TIFFError
arg	16:14	16:35	5	"reverseSamples8bits"
water	16:14	0:0	6	"reverseSamples8bits"
arg	16:36	16:66	5	"Invalid image or work buffer"
water	16:36	0:0	6	"Invalid image or work buffer"
water	16:67	0:0	4	;
return	17:4	17:14	4	(1)
water	17:11	0:0	5	(
water	17:12	0:0	5	1
water	17:13	0:0	5	)
water	18:4	0:0	4	}
water	19:2	0:0	2	ready_bits
op	19:13	0:0	2	=
water	19:15	0:0	2	0
water	19:16	0:0	2	;
water	20:2	0:0	2	mask_bits
op	20:12	0:0	2	=
water	20:15	0:0	2	(
water	20:16	0:0	2	uint8
water	20:21	0:0	2	)
op	20:22	0:0	2	-
water	20:23	0:0	2	1
op	20:25	0:0	2	>>
water	20:28	0:0	2	(
water	20:30	0:0	2	8
op	20:32	0:0	2	-
water	20:34	0:0	2	bps
water	20:37	0:0	2	)
water	20:38	0:0	2	;
water	21:2	0:0	2	dst
op	21:6	0:0	2	=
water	21:8	0:0	2	obuff
water	21:13	0:0	2	;
for	22:2	51:4	2	(col = width ;col > 0;col --)
forinit	22:7	22:18	3	col = width ;
water	22:7	0:0	4	col
op	22:11	0:0	4	=
water	22:13	0:0	4	width
water	22:18	0:0	4	;
cond	22:20	22:26	3	col > 0
water	22:20	0:0	4	col
op	22:24	0:0	4	>
water	22:26	0:0	4	0
forexpr	22:29	22:32	3	col --
water	22:29	0:0	4	col
op	22:32	0:0	4	--
stmts	23:4	51:4	3	
water	23:4	0:0	4	{
water	25:4	0:0	4	bit_offset
op	25:15	0:0	4	=
water	25:17	0:0	4	(
water	25:18	0:0	4	col
op	25:22	0:0	4	-
water	25:24	0:0	4	1
water	25:25	0:0	4	)
op	25:27	0:0	4	*
water	25:29	0:0	4	bps
op	25:33	0:0	4	*
water	25:35	0:0	4	spp
water	25:38	0:0	4	;
for	26:4	50:6	4	(sample = 0 ;sample < spp;sample ++)
forinit	26:9	26:19	5	sample = 0 ;
water	26:9	0:0	6	sample
op	26:16	0:0	6	=
water	26:18	0:0	6	0
water	26:19	0:0	6	;
cond	26:21	26:30	5	sample < spp
water	26:21	0:0	6	sample
op	26:28	0:0	6	<
water	26:30	0:0	6	spp
forexpr	26:35	26:41	5	sample ++
water	26:35	0:0	6	sample
op	26:41	0:0	6	++
stmts	27:6	50:6	5	
water	27:6	0:0	6	{
if	28:6	32:8	6	(sample == 0)
cond	28:10	28:20	7	sample == 0
water	28:10	0:0	8	sample
op	28:17	0:0	8	==
water	28:20	0:0	8	0
stmts	29:8	32:8	7	
water	29:8	0:0	8	{
water	30:8	0:0	8	src_byte
op	30:17	0:0	8	=
water	30:19	0:0	8	bit_offset
op	30:30	0:0	8	/
water	30:32	0:0	8	8
water	30:33	0:0	8	;
water	31:8	0:0	8	src_bit
op	31:17	0:0	8	=
water	31:19	0:0	8	bit_offset
op	31:30	0:0	8	%
water	31:32	0:0	8	8
water	31:33	0:0	8	;
water	32:8	0:0	8	}
else	33:6	37:8	6
stmts	34:8	37:8	7	
water	34:8	0:0	8	{
water	35:8	0:0	8	src_byte
op	35:17	0:0	8	=
water	35:19	0:0	8	(
water	35:20	0:0	8	bit_offset
op	35:31	0:0	8	+
water	35:33	0:0	8	(
water	35:34	0:0	8	sample
op	35:41	0:0	8	*
water	35:43	0:0	8	bps
water	35:46	0:0	8	)
water	35:47	0:0	8	)
op	35:49	0:0	8	/
water	35:51	0:0	8	8
water	35:52	0:0	8	;
water	36:8	0:0	8	src_bit
op	36:17	0:0	8	=
water	36:19	0:0	8	(
water	36:20	0:0	8	bit_offset
op	36:31	0:0	8	+
water	36:33	0:0	8	(
water	36:34	0:0	8	sample
op	36:41	0:0	8	*
water	36:43	0:0	8	bps
water	36:46	0:0	8	)
water	36:47	0:0	8	)
op	36:49	0:0	8	%
water	36:51	0:0	8	8
water	36:52	0:0	8	;
water	37:8	0:0	8	}
water	38:6	0:0	6	src
op	38:10	0:0	6	=
water	38:12	0:0	6	ibuff
op	38:18	0:0	6	+
water	38:20	0:0	6	src_byte
water	38:28	0:0	6	;
water	39:6	0:0	6	match_bits
op	39:17	0:0	6	=
water	39:19	0:0	6	mask_bits
op	39:29	0:0	6	<<
water	39:32	0:0	6	(
water	39:33	0:0	6	8
op	39:35	0:0	6	-
water	39:37	0:0	6	src_bit
op	39:45	0:0	6	-
water	39:47	0:0	6	bps
water	39:50	0:0	6	)
water	39:51	0:0	6	;
water	40:6	0:0	6	buff1
op	40:12	0:0	6	=
water	40:14	0:0	6	(
water	40:15	0:0	6	(
op	40:16	0:0	6	*
water	40:17	0:0	6	src
water	40:20	0:0	6	)
op	40:22	0:0	6	&
water	40:24	0:0	6	match_bits
water	40:34	0:0	6	)
op	40:36	0:0	6	<<
water	40:39	0:0	6	(
water	40:40	0:0	6	src_bit
water	40:47	0:0	6	)
water	40:48	0:0	6	;
if	41:6	42:47	6	(ready_bits < 8)
cond	41:10	41:23	7	ready_bits < 8
water	41:10	0:0	8	ready_bits
op	41:21	0:0	8	<
water	41:23	0:0	8	8
stmts	42:8	42:47	7	
water	42:8	0:0	8	buff2
op	42:14	0:0	8	=
water	42:16	0:0	8	(
water	42:17	0:0	8	buff2
op	42:23	0:0	8	|
water	42:25	0:0	8	(
water	42:26	0:0	8	buff1
op	42:32	0:0	8	>>
water	42:35	0:0	8	ready_bits
water	42:45	0:0	8	)
water	42:46	0:0	8	)
water	42:47	0:0	8	;
else	43:6	48:8	6
stmts	44:8	48:8	7	
water	44:8	0:0	8	{
op	45:8	0:0	8	*
water	45:9	0:0	8	dst
op	45:12	0:0	8	++
op	45:15	0:0	8	=
water	45:17	0:0	8	buff2
water	45:22	0:0	8	;
water	46:8	0:0	8	buff2
op	46:14	0:0	8	=
water	46:16	0:0	8	buff1
water	46:21	0:0	8	;
water	47:8	0:0	8	ready_bits
op	47:19	0:0	8	-=
water	47:22	0:0	8	8
water	47:23	0:0	8	;
water	48:8	0:0	8	}
water	49:6	0:0	6	ready_bits
op	49:17	0:0	6	+=
water	49:20	0:0	6	bps
water	49:23	0:0	6	;
water	50:6	0:0	6	}
water	51:4	0:0	4	}
if	52:2	56:4	2	(ready_bits > 0)
cond	52:6	52:19	3	ready_bits > 0
water	52:6	0:0	4	ready_bits
op	52:17	0:0	4	>
water	52:19	0:0	4	0
stmts	53:4	56:4	3	
water	53:4	0:0	4	{
water	54:4	0:0	4	buff1
op	54:10	0:0	4	=
water	54:12	0:0	4	(
water	54:13	0:0	4	buff2
op	54:19	0:0	4	&
water	54:21	0:0	4	(
water	54:22	0:0	4	(
water	54:23	0:0	4	unsigned
water	54:32	0:0	4	int
water	54:35	0:0	4	)
water	54:36	0:0	4	255
op	54:40	0:0	4	<<
water	54:43	0:0	4	(
water	54:44	0:0	4	8
op	54:46	0:0	4	-
water	54:48	0:0	4	ready_bits
water	54:58	0:0	4	)
water	54:59	0:0	4	)
water	54:60	0:0	4	)
water	54:61	0:0	4	;
op	55:4	0:0	4	*
water	55:5	0:0	4	dst
op	55:8	0:0	4	++
op	55:11	0:0	4	=
water	55:13	0:0	4	buff1
water	55:18	0:0	4	;
water	56:4	0:0	4	}
return	57:2	57:12	2	(0)
water	57:9	0:0	3	(
water	57:10	0:0	3	0
water	57:11	0:0	3	)
