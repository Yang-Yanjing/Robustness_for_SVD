func	1:0	89:2	0	static int	combineSeparateTileSamples8bits
params	2:32	0:0	1	
param	2:33	2:44	2	uint8 *	in[]
param	2:46	2:56	2	uint8 *	out
param	2:58	2:69	2	uint32	cols
param	3:33	3:44	2	uint32	rows
param	3:46	3:63	2	uint32	imagewidth
param	4:33	4:42	2	uint32	tw
param	4:44	4:54	2	uint16	spp
param	4:56	4:66	2	uint16	bps
param	5:27	5:41	2	FILE *	dumpfile
param	5:43	5:53	2	int	format
param	5:55	5:64	2	int	level
stmnts	0:0	88:12	1	
decl	7:2	7:23	2	int	ready_bits
op	7:20	0:0	2	=
water	7:22	0:0	2	0
decl	8:2	8:45	2	uint32	src_rowsize
water	8:20	0:0	2	,
decl	8:2	8:45	2	uint32	dst_rowsize
water	8:33	0:0	2	,
decl	8:2	8:45	2	uint32	src_offset
decl	9:2	9:19	2	uint32	bit_offset
decl	10:2	10:44	2	uint32	row
water	10:12	0:0	2	,
decl	10:2	10:44	2	uint32	col
water	10:17	0:0	2	,
decl	10:2	10:44	2	uint32	src_byte
op	10:28	0:0	2	=
water	10:30	0:0	2	0
water	10:31	0:0	2	,
decl	10:2	10:44	2	uint32	src_bit
op	10:41	0:0	2	=
water	10:43	0:0	2	0
decl	11:2	11:36	2	uint8	maskbits
op	11:18	0:0	2	=
water	11:20	0:0	2	0
water	11:21	0:0	2	,
decl	11:2	11:36	2	uint8	matchbits
op	11:33	0:0	2	=
water	11:35	0:0	2	0
decl	12:2	12:29	2	uint8	buff1
op	12:15	0:0	2	=
water	12:17	0:0	2	0
water	12:18	0:0	2	,
decl	12:2	12:29	2	uint8	buff2
op	12:26	0:0	2	=
water	12:28	0:0	2	0
decl	13:2	13:13	2	tsample_t	s
decl	14:2	14:28	2	unsigned char	*src
op	14:21	0:0	2	=
water	14:23	0:0	2	in
op	14:25	0:0	2	[
water	14:26	0:0	2	0
op	14:27	0:0	2	]
decl	15:2	15:26	2	unsigned char	*dst
op	15:21	0:0	2	=
water	15:23	0:0	2	out
decl	16:2	16:27	2	char	action[32]
if	17:2	21:4	2	(( src == NULL ) || ( dst == NULL ))
cond	17:6	17:35	3	( src == NULL ) || ( dst == NULL )
water	17:6	0:0	4	(
water	17:7	0:0	4	src
op	17:11	0:0	4	==
water	17:14	0:0	4	NULL
water	17:18	0:0	4	)
op	17:20	0:0	4	||
water	17:23	0:0	4	(
water	17:24	0:0	4	dst
op	17:28	0:0	4	==
water	17:31	0:0	4	NULL
water	17:35	0:0	4	)
stmts	18:4	21:4	3	
water	18:4	0:0	4	{
call	19:4	19:80	4	TIFFError
arg	19:14	19:47	5	"combineSeparateTileSamples8bits"
water	19:14	0:0	6	"combineSeparateTileSamples8bits"
arg	19:48	19:80	5	"Invalid input or output buffer"
water	19:48	0:0	6	"Invalid input or output buffer"
water	19:81	0:0	4	;
return	20:4	20:14	4	(1)
water	20:11	0:0	5	(
water	20:12	0:0	5	1
water	20:13	0:0	5	)
water	21:4	0:0	4	}
water	22:2	0:0	2	src_rowsize
op	22:14	0:0	2	=
water	22:16	0:0	2	(
water	22:17	0:0	2	(
water	22:18	0:0	2	bps
op	22:22	0:0	2	*
water	22:24	0:0	2	tw
water	22:26	0:0	2	)
op	22:28	0:0	2	+
water	22:30	0:0	2	7
water	22:31	0:0	2	)
op	22:33	0:0	2	/
water	22:35	0:0	2	8
water	22:36	0:0	2	;
water	23:2	0:0	2	dst_rowsize
op	23:14	0:0	2	=
water	23:16	0:0	2	(
water	23:17	0:0	2	(
water	23:18	0:0	2	imagewidth
op	23:29	0:0	2	*
water	23:31	0:0	2	bps
op	23:35	0:0	2	*
water	23:37	0:0	2	spp
water	23:40	0:0	2	)
op	23:42	0:0	2	+
water	23:44	0:0	2	7
water	23:45	0:0	2	)
op	23:47	0:0	2	/
water	23:49	0:0	2	8
water	23:50	0:0	2	;
water	24:2	0:0	2	maskbits
op	24:11	0:0	2	=
water	24:14	0:0	2	(
water	24:15	0:0	2	uint8
water	24:20	0:0	2	)
op	24:21	0:0	2	-
water	24:22	0:0	2	1
op	24:24	0:0	2	>>
water	24:27	0:0	2	(
water	24:29	0:0	2	8
op	24:31	0:0	2	-
water	24:33	0:0	2	bps
water	24:36	0:0	2	)
water	24:37	0:0	2	;
for	25:2	87:4	2	(row = 0 ;row < rows;row ++)
forinit	25:7	25:14	3	row = 0 ;
water	25:7	0:0	4	row
op	25:11	0:0	4	=
water	25:13	0:0	4	0
water	25:14	0:0	4	;
cond	25:16	25:22	3	row < rows
water	25:16	0:0	4	row
op	25:20	0:0	4	<
water	25:22	0:0	4	rows
forexpr	25:28	25:31	3	row ++
water	25:28	0:0	4	row
op	25:31	0:0	4	++
stmts	26:4	87:4	3	
water	26:4	0:0	4	{
water	27:4	0:0	4	ready_bits
op	27:15	0:0	4	=
water	27:17	0:0	4	0
water	27:18	0:0	4	;
water	28:4	0:0	4	buff1
op	28:10	0:0	4	=
water	28:12	0:0	4	buff2
op	28:18	0:0	4	=
water	28:20	0:0	4	0
water	28:21	0:0	4	;
water	29:4	0:0	4	dst
op	29:8	0:0	4	=
water	29:10	0:0	4	out
op	29:14	0:0	4	+
water	29:16	0:0	4	(
water	29:17	0:0	4	row
op	29:21	0:0	4	*
water	29:23	0:0	4	dst_rowsize
water	29:34	0:0	4	)
water	29:35	0:0	4	;
water	30:4	0:0	4	src_offset
op	30:15	0:0	4	=
water	30:17	0:0	4	row
op	30:21	0:0	4	*
water	30:23	0:0	4	src_rowsize
water	30:34	0:0	4	;
for	31:4	69:6	4	(col = 0 ;col < cols;col ++)
forinit	31:9	31:16	5	col = 0 ;
water	31:9	0:0	6	col
op	31:13	0:0	6	=
water	31:15	0:0	6	0
water	31:16	0:0	6	;
cond	31:18	31:24	5	col < cols
water	31:18	0:0	6	col
op	31:22	0:0	6	<
water	31:24	0:0	6	cols
forexpr	31:30	31:33	5	col ++
water	31:30	0:0	6	col
op	31:33	0:0	6	++
stmts	32:6	69:6	5	
water	32:6	0:0	6	{
water	34:6	0:0	6	bit_offset
op	34:17	0:0	6	=
water	34:19	0:0	6	col
op	34:23	0:0	6	*
water	34:25	0:0	6	bps
water	34:28	0:0	6	;
water	35:6	0:0	6	src_byte
op	35:15	0:0	6	=
water	35:17	0:0	6	bit_offset
op	35:28	0:0	6	/
water	35:30	0:0	6	8
water	35:31	0:0	6	;
water	36:6	0:0	6	src_bit
op	36:15	0:0	6	=
water	36:17	0:0	6	bit_offset
op	36:28	0:0	6	%
water	36:30	0:0	6	8
water	36:31	0:0	6	;
water	37:6	0:0	6	matchbits
op	37:16	0:0	6	=
water	37:18	0:0	6	maskbits
op	37:27	0:0	6	<<
water	37:30	0:0	6	(
water	37:31	0:0	6	8
op	37:33	0:0	6	-
water	37:35	0:0	6	src_bit
op	37:43	0:0	6	-
water	37:45	0:0	6	bps
water	37:48	0:0	6	)
water	37:49	0:0	6	;
for	39:6	68:8	6	(s = 0 ;( s < spp ) && ( s < MAX_SAMPLES );s ++)
forinit	39:11	39:16	7	s = 0 ;
water	39:11	0:0	8	s
op	39:13	0:0	8	=
water	39:15	0:0	8	0
water	39:16	0:0	8	;
cond	39:18	39:47	7	( s < spp ) && ( s < MAX_SAMPLES )
water	39:18	0:0	8	(
water	39:19	0:0	8	s
op	39:21	0:0	8	<
water	39:23	0:0	8	spp
water	39:26	0:0	8	)
op	39:28	0:0	8	&&
water	39:31	0:0	8	(
water	39:32	0:0	8	s
op	39:34	0:0	8	<
water	39:36	0:0	8	MAX_SAMPLES
water	39:47	0:0	8	)
forexpr	39:50	39:51	7	s ++
water	39:50	0:0	8	s
op	39:51	0:0	8	++
stmts	40:8	68:8	7	
water	40:8	0:0	8	{
water	41:1	0:0	8	src
op	41:5	0:0	8	=
water	41:7	0:0	8	in
op	41:9	0:0	8	[
water	41:10	0:0	8	s
op	41:11	0:0	8	]
op	41:13	0:0	8	+
water	41:15	0:0	8	src_offset
op	41:26	0:0	8	+
water	41:28	0:0	8	src_byte
water	41:36	0:0	8	;
water	42:8	0:0	8	buff1
op	42:14	0:0	8	=
water	42:16	0:0	8	(
water	42:17	0:0	8	(
op	42:18	0:0	8	*
water	42:19	0:0	8	src
water	42:22	0:0	8	)
op	42:24	0:0	8	&
water	42:26	0:0	8	matchbits
water	42:35	0:0	8	)
op	42:37	0:0	8	<<
water	42:40	0:0	8	(
water	42:41	0:0	8	src_bit
water	42:48	0:0	8	)
water	42:49	0:0	8	;
if	44:8	50:10	8	(ready_bits >= 8)
cond	44:12	44:26	9	ready_bits >= 8
water	44:12	0:0	10	ready_bits
op	44:23	0:0	10	>=
water	44:26	0:0	10	8
stmts	45:10	50:10	9	
water	45:10	0:0	10	{
op	46:10	0:0	10	*
water	46:11	0:0	10	dst
op	46:14	0:0	10	++
op	46:17	0:0	10	=
water	46:19	0:0	10	buff2
water	46:24	0:0	10	;
water	47:10	0:0	10	buff2
op	47:16	0:0	10	=
water	47:18	0:0	10	buff1
water	47:23	0:0	10	;
water	48:10	0:0	10	ready_bits
op	48:21	0:0	10	-=
water	48:24	0:0	10	8
water	48:25	0:0	10	;
call	49:10	49:33	10	strcpy
arg	49:18	49:24	11	action
water	49:18	0:0	12	action
arg	49:26	49:33	11	"Flush"
water	49:26	0:0	12	"Flush"
water	49:34	0:0	10	;
water	50:10	0:0	10	}
else	51:8	55:10	8
stmts	52:10	55:10	9	
water	52:10	0:0	10	{
water	53:10	0:0	10	buff2
op	53:16	0:0	10	=
water	53:18	0:0	10	(
water	53:19	0:0	10	buff2
op	53:25	0:0	10	|
water	53:27	0:0	10	(
water	53:28	0:0	10	buff1
op	53:34	0:0	10	>>
water	53:37	0:0	10	ready_bits
water	53:47	0:0	10	)
water	53:48	0:0	10	)
water	53:49	0:0	10	;
call	54:10	54:34	10	strcpy
arg	54:18	54:24	11	action
water	54:18	0:0	12	action
arg	54:26	54:34	11	"Update"
water	54:26	0:0	12	"Update"
water	54:35	0:0	10	;
water	55:10	0:0	10	}
water	56:8	0:0	8	ready_bits
op	56:19	0:0	8	+=
water	56:22	0:0	8	bps
water	56:25	0:0	8	;
if	57:8	67:3	8	(( dumpfile != NULL ) && ( level == 3 ))
cond	57:12	57:45	9	( dumpfile != NULL ) && ( level == 3 )
water	57:12	0:0	10	(
water	57:13	0:0	10	dumpfile
op	57:22	0:0	10	!=
water	57:25	0:0	10	NULL
water	57:29	0:0	10	)
op	57:31	0:0	10	&&
water	57:34	0:0	10	(
water	57:35	0:0	10	level
op	57:41	0:0	10	==
water	57:44	0:0	10	3
water	57:45	0:0	10	)
stmts	58:10	67:3	9	
water	58:10	0:0	10	{
call	59:10	61:54	10	dump_info
arg	59:21	59:29	11	dumpfile
water	59:21	0:0	12	dumpfile
arg	59:31	59:37	11	format
water	59:31	0:0	12	format
arg	59:39	59:41	11	""
water	59:39	0:0	12	""
arg	60:19	60:102	11	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
water	60:19	0:0	12	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
arg	61:5	61:12	11	row+1
water	61:5	0:0	12	row
op	61:9	0:0	12	+
water	61:11	0:0	12	1
arg	61:14	61:21	11	col+1
water	61:14	0:0	12	col
op	61:18	0:0	12	+
water	61:20	0:0	12	1
arg	61:23	61:24	11	s
water	61:23	0:0	12	s
arg	61:26	61:34	11	src_byte
water	61:26	0:0	12	src_byte
arg	61:36	61:43	11	src_bit
water	61:36	0:0	12	src_bit
arg	61:45	61:54	11	dst-out
water	61:45	0:0	12	dst
op	61:49	0:0	12	-
water	61:51	0:0	12	out
water	61:55	0:0	10	;
call	62:10	62:62	10	dump_byte
arg	62:21	62:29	11	dumpfile
water	62:21	0:0	12	dumpfile
arg	62:31	62:37	11	format
water	62:31	0:0	12	format
arg	62:39	62:51	11	"Match bits"
water	62:39	0:0	12	"Match bits"
arg	62:53	62:62	11	matchbits
water	62:53	0:0	12	matchbits
water	62:63	0:0	10	;
call	63:10	63:57	10	dump_byte
arg	63:21	63:29	11	dumpfile
water	63:21	0:0	12	dumpfile
arg	63:31	63:37	11	format
water	63:31	0:0	12	format
arg	63:39	63:51	11	"Src   bits"
water	63:39	0:0	12	"Src   bits"
arg	63:53	63:57	11	*src
op	63:53	0:0	12	*
water	63:54	0:0	12	src
water	63:58	0:0	10	;
call	64:10	64:58	10	dump_byte
arg	64:21	64:29	11	dumpfile
water	64:21	0:0	12	dumpfile
arg	64:31	64:37	11	format
water	64:31	0:0	12	format
arg	64:39	64:51	11	"Buff1 bits"
water	64:39	0:0	12	"Buff1 bits"
arg	64:53	64:58	11	buff1
water	64:53	0:0	12	buff1
water	64:59	0:0	10	;
call	65:10	65:58	10	dump_byte
arg	65:21	65:29	11	dumpfile
water	65:21	0:0	12	dumpfile
arg	65:31	65:37	11	format
water	65:31	0:0	12	format
arg	65:39	65:51	11	"Buff2 bits"
water	65:39	0:0	12	"Buff2 bits"
arg	65:53	65:58	11	buff2
water	65:53	0:0	12	buff2
water	65:59	0:0	10	;
call	66:10	66:54	10	dump_info
arg	66:21	66:29	11	dumpfile
water	66:21	0:0	12	dumpfile
arg	66:31	66:37	11	format
water	66:31	0:0	12	format
arg	66:39	66:41	11	""
water	66:39	0:0	12	""
arg	66:42	66:46	11	"%s"
water	66:42	0:0	12	"%s"
arg	66:48	66:54	11	action
water	66:48	0:0	12	action
water	66:55	0:0	10	;
water	67:3	0:0	10	}
water	68:8	0:0	8	}
water	69:6	0:0	6	}
if	70:4	81:6	4	(ready_bits > 0)
cond	70:8	70:21	5	ready_bits > 0
water	70:8	0:0	6	ready_bits
op	70:19	0:0	6	>
water	70:21	0:0	6	0
stmts	71:6	81:6	5	
water	71:6	0:0	6	{
water	72:6	0:0	6	buff1
op	72:12	0:0	6	=
water	72:14	0:0	6	(
water	72:15	0:0	6	buff2
op	72:21	0:0	6	&
water	72:23	0:0	6	(
water	72:24	0:0	6	(
water	72:25	0:0	6	unsigned
water	72:34	0:0	6	int
water	72:37	0:0	6	)
water	72:38	0:0	6	255
op	72:42	0:0	6	<<
water	72:45	0:0	6	(
water	72:46	0:0	6	8
op	72:48	0:0	6	-
water	72:50	0:0	6	ready_bits
water	72:60	0:0	6	)
water	72:61	0:0	6	)
water	72:62	0:0	6	)
water	72:63	0:0	6	;
op	73:6	0:0	6	*
water	73:7	0:0	6	dst
op	73:10	0:0	6	++
op	73:13	0:0	6	=
water	73:15	0:0	6	buff1
water	73:20	0:0	6	;
if	74:6	80:8	6	(( dumpfile != NULL ) && ( level == 3 ))
cond	74:10	74:43	7	( dumpfile != NULL ) && ( level == 3 )
water	74:10	0:0	8	(
water	74:11	0:0	8	dumpfile
op	74:20	0:0	8	!=
water	74:23	0:0	8	NULL
water	74:27	0:0	8	)
op	74:29	0:0	8	&&
water	74:32	0:0	8	(
water	74:33	0:0	8	level
op	74:39	0:0	8	==
water	74:42	0:0	8	3
water	74:43	0:0	8	)
stmts	75:8	80:8	7	
water	75:8	0:0	8	{
call	76:8	78:56	8	dump_info
arg	76:19	76:27	9	dumpfile
water	76:19	0:0	10	dumpfile
arg	76:29	76:35	9	format
water	76:29	0:0	10	format
arg	76:37	76:39	9	""
water	76:37	0:0	10	""
arg	77:10	77:81	9	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
water	77:10	0:0	10	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
arg	78:10	78:17	9	row+1
water	78:10	0:0	10	row
op	78:14	0:0	10	+
water	78:16	0:0	10	1
arg	78:19	78:26	9	col+1
water	78:19	0:0	10	col
op	78:23	0:0	10	+
water	78:25	0:0	10	1
arg	78:28	78:36	9	src_byte
water	78:28	0:0	10	src_byte
arg	78:38	78:45	9	src_bit
water	78:38	0:0	10	src_bit
arg	78:47	78:56	9	dst-out
water	78:47	0:0	10	dst
op	78:51	0:0	10	-
water	78:53	0:0	10	out
water	78:57	0:0	8	;
call	79:17	79:65	8	dump_byte
arg	79:28	79:36	9	dumpfile
water	79:28	0:0	10	dumpfile
arg	79:38	79:44	9	format
water	79:38	0:0	10	format
arg	79:46	79:58	9	"Final bits"
water	79:46	0:0	10	"Final bits"
arg	79:60	79:65	9	buff1
water	79:60	0:0	10	buff1
water	79:66	0:0	8	;
water	80:8	0:0	8	}
water	81:6	0:0	6	}
if	82:4	86:6	4	(( dumpfile != NULL ) && ( level >= 2 ))
cond	82:8	82:41	5	( dumpfile != NULL ) && ( level >= 2 )
water	82:8	0:0	6	(
water	82:9	0:0	6	dumpfile
op	82:18	0:0	6	!=
water	82:21	0:0	6	NULL
water	82:25	0:0	6	)
op	82:27	0:0	6	&&
water	82:30	0:0	6	(
water	82:31	0:0	6	level
op	82:37	0:0	6	>=
water	82:40	0:0	6	2
water	82:41	0:0	6	)
stmts	83:6	86:6	5	
water	83:6	0:0	6	{
call	84:6	84:82	6	dump_info
arg	84:17	84:25	7	dumpfile
water	84:17	0:0	8	dumpfile
arg	84:27	84:33	7	format
water	84:27	0:0	8	format
arg	84:35	84:68	7	"combineSeparateTileSamples8bits"
water	84:35	0:0	8	"combineSeparateTileSamples8bits"
arg	84:69	84:82	7	"Output data"
water	84:69	0:0	8	"Output data"
water	84:83	0:0	6	;
call	85:6	85:82	6	dump_buffer
arg	85:18	85:26	7	dumpfile
water	85:18	0:0	8	dumpfile
arg	85:28	85:34	7	format
water	85:28	0:0	8	format
arg	85:36	85:37	7	1
water	85:36	0:0	8	1
arg	85:39	85:50	7	dst_rowsize
water	85:39	0:0	8	dst_rowsize
arg	85:52	85:55	7	row
water	85:52	0:0	8	row
arg	85:57	85:82	7	out+(row*dst_rowsize)
water	85:57	0:0	8	out
op	85:61	0:0	8	+
water	85:63	0:0	8	(
water	85:64	0:0	8	row
op	85:68	0:0	8	*
water	85:70	0:0	8	dst_rowsize
water	85:81	0:0	8	)
water	85:83	0:0	6	;
water	86:6	0:0	6	}
water	87:4	0:0	4	}
return	88:2	88:12	2	(0)
water	88:9	0:0	3	(
water	88:10	0:0	3	0
water	88:11	0:0	3	)
