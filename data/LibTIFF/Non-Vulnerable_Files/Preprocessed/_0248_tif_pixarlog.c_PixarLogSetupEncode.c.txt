func	1:0	32:0	0	static int	PixarLogSetupEncode
params	2:19	0:0	1	
param	2:20	2:29	2	TIFF *	tif
stmnts	4:1	31:1	1	
water	4:1	0:0	2	static
water	4:8	0:0	2	const
water	4:14	0:0	2	char
water	4:19	0:0	2	module
op	4:25	0:0	2	[
op	4:26	0:0	2	]
op	4:28	0:0	2	=
water	4:30	0:0	2	"PixarLogSetupEncode"
water	4:51	0:0	2	;
decl	5:1	5:34	2	TIFFDirectory	*td
op	5:19	0:0	2	=
op	5:21	0:0	2	&
water	5:22	0:0	2	tif
op	5:25	0:0	2	->
water	5:27	0:0	2	tif_dir
decl	6:1	6:38	2	PixarLogState	*sp
op	6:19	0:0	2	=
call	6:21	6:37	3	EncoderState
arg	6:34	6:37	4	tif
water	6:34	0:0	5	tif
decl	7:1	7:19	2	tmsize_t	tbuf_size
call	8:1	8:18	2	assert
arg	8:8	8:18	3	sp!=NULL
water	8:8	0:0	4	sp
op	8:11	0:0	4	!=
water	8:14	0:0	4	NULL
water	8:19	0:0	2	;
water	10:1	0:0	2	sp
op	10:3	0:0	2	->
water	10:5	0:0	2	stride
op	10:12	0:0	2	=
water	10:14	0:0	2	(
water	10:15	0:0	2	td
op	10:17	0:0	2	->
water	10:19	0:0	2	td_planarconfig
op	10:35	0:0	2	==
water	10:38	0:0	2	PLANARCONFIG_CONTIG
water	10:58	0:0	2	?
water	11:5	0:0	2	td
op	11:7	0:0	2	->
water	11:9	0:0	2	td_samplesperpixel
water	11:28	0:0	2	:
water	11:30	0:0	2	1
water	11:31	0:0	2	)
water	11:32	0:0	2	;
water	12:1	0:0	2	tbuf_size
op	12:11	0:0	2	=
call	12:13	13:46	2	multiply_ms
arg	12:25	13:30	3	multiply_ms(multiply_ms(sp->stride,td->td_imagewidth),td->td_rowsperstrip)
call	12:25	13:29	4	multiply_ms
arg	12:37	12:79	5	multiply_ms(sp->stride,td->td_imagewidth)
call	12:37	12:78	6	multiply_ms
arg	12:49	12:59	7	sp->stride
water	12:49	0:0	8	sp
op	12:51	0:0	8	->
water	12:53	0:0	8	stride
arg	12:61	12:78	7	td->td_imagewidth
water	12:61	0:0	8	td
op	12:63	0:0	8	->
water	12:65	0:0	8	td_imagewidth
arg	13:10	13:29	5	td->td_rowsperstrip
water	13:10	0:0	6	td
op	13:12	0:0	6	->
water	13:14	0:0	6	td_rowsperstrip
arg	13:32	13:46	3	sizeof(uint16)
op	13:32	0:0	4	sizeof
water	13:38	0:0	4	(
water	13:39	0:0	4	uint16
water	13:45	0:0	4	)
water	13:47	0:0	2	;
if	14:1	15:12	2	(tbuf_size == 0)
cond	14:5	14:18	3	tbuf_size == 0
water	14:5	0:0	4	tbuf_size
op	14:15	0:0	4	==
water	14:18	0:0	4	0
stmts	15:2	15:12	3	
return	15:2	15:12	4	(0)
water	15:9	0:0	5	(
water	15:10	0:0	5	0
water	15:11	0:0	5	)
water	16:1	0:0	2	sp
op	16:3	0:0	2	->
water	16:5	0:0	2	tbuf
op	16:10	0:0	2	=
water	16:12	0:0	2	(
water	16:13	0:0	2	uint16
op	16:20	0:0	2	*
water	16:21	0:0	2	)
call	16:23	16:44	2	_TIFFmalloc
arg	16:35	16:44	3	tbuf_size
water	16:35	0:0	4	tbuf_size
water	16:45	0:0	2	;
if	17:1	18:12	2	(sp -> tbuf == NULL)
cond	17:5	17:17	3	sp -> tbuf == NULL
water	17:5	0:0	4	sp
op	17:7	0:0	4	->
water	17:9	0:0	4	tbuf
op	17:14	0:0	4	==
water	17:17	0:0	4	NULL
stmts	18:2	18:12	3	
return	18:2	18:12	4	(0)
water	18:9	0:0	5	(
water	18:10	0:0	5	0
water	18:11	0:0	5	)
if	19:1	20:45	2	(sp -> user_datafmt == PIXARLOGDATAFMT_UNKNOWN)
cond	19:5	19:25	3	sp -> user_datafmt == PIXARLOGDATAFMT_UNKNOWN
water	19:5	0:0	4	sp
op	19:7	0:0	4	->
water	19:9	0:0	4	user_datafmt
op	19:22	0:0	4	==
water	19:25	0:0	4	PIXARLOGDATAFMT_UNKNOWN
stmts	20:2	20:45	3	
water	20:2	0:0	4	sp
op	20:4	0:0	4	->
water	20:6	0:0	4	user_datafmt
op	20:19	0:0	4	=
call	20:21	20:44	4	PixarLogGuessDataFmt
arg	20:42	20:44	5	td
water	20:42	0:0	6	td
water	20:45	0:0	4	;
if	21:1	24:1	2	(sp -> user_datafmt == PIXARLOGDATAFMT_UNKNOWN)
cond	21:5	21:25	3	sp -> user_datafmt == PIXARLOGDATAFMT_UNKNOWN
water	21:5	0:0	4	sp
op	21:7	0:0	4	->
water	21:9	0:0	4	user_datafmt
op	21:22	0:0	4	==
water	21:25	0:0	4	PIXARLOGDATAFMT_UNKNOWN
stmts	21:50	24:1	3	
water	21:50	0:0	4	{
call	22:2	22:125	4	TIFFErrorExt
arg	22:15	22:34	5	tif->tif_clientdata
water	22:15	0:0	6	tif
op	22:18	0:0	6	->
water	22:20	0:0	6	tif_clientdata
arg	22:36	22:42	5	module
water	22:36	0:0	6	module
arg	22:44	22:103	5	"PixarLog compression can't handle %d bit linear encodings"
water	22:44	0:0	6	"PixarLog compression can't handle %d bit linear encodings"
arg	22:105	22:125	5	td->td_bitspersample
water	22:105	0:0	6	td
op	22:107	0:0	6	->
water	22:109	0:0	6	td_bitspersample
water	22:126	0:0	4	;
return	23:2	23:12	4	(0)
water	23:9	0:0	5	(
water	23:10	0:0	5	0
water	23:11	0:0	5	)
water	24:1	0:0	4	}
if	25:1	28:1	2	(deflateInit (& sp -> stream ,sp -> quality ) != Z_OK)
cond	25:5	25:46	3	deflateInit (& sp -> stream ,sp -> quality ) != Z_OK
call	25:5	25:41	4	deflateInit
arg	25:17	25:28	5	&sp->stream
op	25:17	0:0	6	&
water	25:18	0:0	6	sp
op	25:20	0:0	6	->
water	25:22	0:0	6	stream
arg	25:30	25:41	5	sp->quality
water	25:30	0:0	6	sp
op	25:32	0:0	6	->
water	25:34	0:0	6	quality
op	25:43	0:0	4	!=
water	25:46	0:0	4	Z_OK
stmts	25:52	28:1	3	
water	25:52	0:0	4	{
call	26:2	26:92	4	TIFFErrorExt
arg	26:15	26:34	5	tif->tif_clientdata
water	26:15	0:0	6	tif
op	26:18	0:0	6	->
water	26:20	0:0	6	tif_clientdata
arg	26:36	26:42	5	module
water	26:36	0:0	6	module
arg	26:44	26:48	5	"%s"
water	26:44	0:0	6	"%s"
arg	26:50	26:92	5	sp->stream.msg?sp->stream.msg:"(null)"
water	26:50	0:0	6	sp
op	26:52	0:0	6	->
water	26:54	0:0	6	stream
op	26:60	0:0	6	.
water	26:61	0:0	6	msg
water	26:65	0:0	6	?
water	26:67	0:0	6	sp
op	26:69	0:0	6	->
water	26:71	0:0	6	stream
op	26:77	0:0	6	.
water	26:78	0:0	6	msg
water	26:82	0:0	6	:
water	26:84	0:0	6	"(null)"
water	26:93	0:0	4	;
return	27:2	27:12	4	(0)
water	27:9	0:0	5	(
water	27:10	0:0	5	0
water	27:11	0:0	5	)
water	28:1	0:0	4	}
else	28:3	31:1	2
stmts	28:8	31:1	3	
water	28:8	0:0	4	{
water	29:2	0:0	4	sp
op	29:4	0:0	4	->
water	29:6	0:0	4	state
op	29:12	0:0	4	|=
water	29:15	0:0	4	PLSTATE_INIT
water	29:27	0:0	4	;
return	30:2	30:12	4	(1)
water	30:9	0:0	5	(
water	30:10	0:0	5	1
water	30:11	0:0	5	)
water	31:1	0:0	4	}
