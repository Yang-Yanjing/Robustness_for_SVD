func	1:0	40:0	0	static int	Fax3Encode2DRow
params	2:15	0:0	1	
param	2:16	2:25	2	TIFF *	tif
param	2:27	2:44	2	unsigned char *	bp
param	2:46	2:63	2	unsigned char *	rp
param	2:65	2:76	2	uint32	bits
stmnts	0:0	38:11	1	
decl	5:8	5:21	2	uint32	a0
op	5:18	0:0	2	=
water	5:20	0:0	2	0
decl	6:1	6:63	2	uint32	a1
op	6:11	0:0	2	=
water	6:13	0:0	2	(
call	6:14	6:25	3	PIXEL
arg	6:20	6:22	4	bp
water	6:20	0:0	5	bp
arg	6:24	6:25	4	0
water	6:24	0:0	5	0
op	6:27	0:0	2	!=
water	6:30	0:0	2	0
water	6:32	0:0	2	?
water	6:34	0:0	2	0
water	6:36	0:0	2	:
call	6:38	6:61	3	finddiff
arg	6:47	6:49	4	bp
water	6:47	0:0	5	bp
arg	6:51	6:52	4	0
water	6:51	0:0	5	0
arg	6:54	6:58	4	bits
water	6:54	0:0	5	bits
arg	6:60	6:61	4	0
water	6:60	0:0	5	0
water	6:62	0:0	2	)
decl	7:1	7:63	2	uint32	b1
op	7:11	0:0	2	=
water	7:13	0:0	2	(
call	7:14	7:25	3	PIXEL
arg	7:20	7:22	4	rp
water	7:20	0:0	5	rp
arg	7:24	7:25	4	0
water	7:24	0:0	5	0
op	7:27	0:0	2	!=
water	7:30	0:0	2	0
water	7:32	0:0	2	?
water	7:34	0:0	2	0
water	7:36	0:0	2	:
call	7:38	7:61	3	finddiff
arg	7:47	7:49	4	rp
water	7:47	0:0	5	rp
arg	7:51	7:52	4	0
water	7:51	0:0	5	0
arg	7:54	7:58	4	bits
water	7:54	0:0	5	bits
arg	7:60	7:61	4	0
water	7:60	0:0	5	0
water	7:62	0:0	2	)
decl	8:1	8:14	2	uint32	a2
water	8:10	0:0	2	,
decl	8:1	8:14	2	uint32	b2
for	9:1	37:1	2	(;;)
forinit	9:6	9:6	3	;
water	9:6	0:0	4	;
cond	0:0	0:0	3	
forexpr	0:0	0:0	3	
stmts	9:10	37:1	3	
water	9:10	0:0	4	{
water	10:2	0:0	4	b2
op	10:5	0:0	4	=
call	10:7	10:43	4	finddiff2
arg	10:17	10:19	5	rp
water	10:17	0:0	6	rp
arg	10:21	10:23	5	b1
water	10:21	0:0	6	b1
arg	10:25	10:29	5	bits
water	10:25	0:0	6	bits
arg	10:31	10:43	5	PIXEL(rp,b1)
call	10:31	10:42	6	PIXEL
arg	10:37	10:39	7	rp
water	10:37	0:0	8	rp
arg	10:40	10:42	7	b1
water	10:40	0:0	8	b1
water	10:44	0:0	4	;
if	11:2	28:2	4	(b2 >= a1)
cond	11:6	11:12	5	b2 >= a1
water	11:6	0:0	6	b2
op	11:9	0:0	6	>=
water	11:12	0:0	6	a1
stmts	11:16	28:2	5	
water	11:16	0:0	6	{
decl	12:3	12:20	6	int32	d
op	12:11	0:0	6	=
water	12:13	0:0	6	b1
op	12:16	0:0	6	-
water	12:18	0:0	6	a1
if	13:3	24:3	6	(! ( - 3 <= d && d <= 3 ))
cond	13:7	13:26	7	! ( - 3 <= d && d <= 3 )
op	13:7	0:0	8	!
water	13:8	0:0	8	(
op	13:9	0:0	8	-
water	13:10	0:0	8	3
op	13:12	0:0	8	<=
water	13:15	0:0	8	d
op	13:17	0:0	8	&&
water	13:20	0:0	8	d
op	13:22	0:0	8	<=
water	13:25	0:0	8	3
water	13:26	0:0	8	)
stmts	13:29	24:3	7	
water	13:29	0:0	8	{
water	14:4	0:0	8	a2
op	14:7	0:0	8	=
call	14:9	14:45	8	finddiff2
arg	14:19	14:21	9	bp
water	14:19	0:0	10	bp
arg	14:23	14:25	9	a1
water	14:23	0:0	10	a1
arg	14:27	14:31	9	bits
water	14:27	0:0	10	bits
arg	14:33	14:45	9	PIXEL(bp,a1)
call	14:33	14:44	10	PIXEL
arg	14:39	14:41	11	bp
water	14:39	0:0	12	bp
arg	14:42	14:44	11	a1
water	14:42	0:0	12	a1
water	14:46	0:0	8	;
call	15:4	15:27	8	putcode
arg	15:12	15:15	9	tif
water	15:12	0:0	10	tif
arg	15:17	15:27	9	&horizcode
op	15:17	0:0	10	&
water	15:18	0:0	10	horizcode
water	15:28	0:0	8	;
if	16:4	19:4	8	(a0 + a1 == 0 ||PIXEL (bp ,a0 ) == 0)
cond	16:8	16:39	9	a0 + a1 == 0 ||PIXEL (bp ,a0 ) == 0
water	16:8	0:0	10	a0
op	16:10	0:0	10	+
water	16:11	0:0	10	a1
op	16:14	0:0	10	==
water	16:17	0:0	10	0
op	16:19	0:0	10	||
call	16:22	16:34	10	PIXEL
arg	16:28	16:30	11	bp
water	16:28	0:0	12	bp
arg	16:32	16:34	11	a0
water	16:32	0:0	12	a0
op	16:36	0:0	10	==
water	16:39	0:0	10	0
stmts	16:42	19:4	9	
water	16:42	0:0	10	{
call	17:5	17:42	10	putspan
arg	17:13	17:16	11	tif
water	17:13	0:0	12	tif
arg	17:18	17:23	11	a1-a0
water	17:18	0:0	12	a1
op	17:20	0:0	12	-
water	17:21	0:0	12	a0
arg	17:25	17:42	11	TIFFFaxWhiteCodes
water	17:25	0:0	12	TIFFFaxWhiteCodes
water	17:43	0:0	10	;
call	18:5	18:42	10	putspan
arg	18:13	18:16	11	tif
water	18:13	0:0	12	tif
arg	18:18	18:23	11	a2-a1
water	18:18	0:0	12	a2
op	18:20	0:0	12	-
water	18:21	0:0	12	a1
arg	18:25	18:42	11	TIFFFaxBlackCodes
water	18:25	0:0	12	TIFFFaxBlackCodes
water	18:43	0:0	10	;
water	19:4	0:0	10	}
else	19:6	22:4	8
stmts	19:11	22:4	9	
water	19:11	0:0	10	{
call	20:5	20:42	10	putspan
arg	20:13	20:16	11	tif
water	20:13	0:0	12	tif
arg	20:18	20:23	11	a1-a0
water	20:18	0:0	12	a1
op	20:20	0:0	12	-
water	20:21	0:0	12	a0
arg	20:25	20:42	11	TIFFFaxBlackCodes
water	20:25	0:0	12	TIFFFaxBlackCodes
water	20:43	0:0	10	;
call	21:5	21:42	10	putspan
arg	21:13	21:16	11	tif
water	21:13	0:0	12	tif
arg	21:18	21:23	11	a2-a1
water	21:18	0:0	12	a2
op	21:20	0:0	12	-
water	21:21	0:0	12	a1
arg	21:25	21:42	11	TIFFFaxWhiteCodes
water	21:25	0:0	12	TIFFFaxWhiteCodes
water	21:43	0:0	10	;
water	22:4	0:0	10	}
water	23:4	0:0	8	a0
op	23:7	0:0	8	=
water	23:9	0:0	8	a2
water	23:11	0:0	8	;
water	24:3	0:0	8	}
else	24:5	27:3	6
stmts	24:10	27:3	7	
water	24:10	0:0	8	{
call	25:4	25:29	8	putcode
arg	25:12	25:15	9	tif
water	25:12	0:0	10	tif
arg	25:17	25:29	9	&vcodes[d+3]
op	25:17	0:0	10	&
water	25:18	0:0	10	vcodes
op	25:24	0:0	10	[
water	25:25	0:0	10	d
op	25:26	0:0	10	+
water	25:27	0:0	10	3
op	25:28	0:0	10	]
water	25:30	0:0	8	;
water	26:4	0:0	8	a0
op	26:7	0:0	8	=
water	26:9	0:0	8	a1
water	26:11	0:0	8	;
water	27:3	0:0	8	}
water	28:2	0:0	6	}
else	28:4	31:2	4
stmts	28:9	31:2	5	
water	28:9	0:0	6	{
call	29:3	29:25	6	putcode
arg	29:11	29:14	7	tif
water	29:11	0:0	8	tif
arg	29:16	29:25	7	&passcode
op	29:16	0:0	8	&
water	29:17	0:0	8	passcode
water	29:26	0:0	6	;
water	30:3	0:0	6	a0
op	30:6	0:0	6	=
water	30:8	0:0	6	b2
water	30:10	0:0	6	;
water	31:2	0:0	6	}
if	32:2	33:8	4	(a0 >= bits)
cond	32:6	32:12	5	a0 >= bits
water	32:6	0:0	6	a0
op	32:9	0:0	6	>=
water	32:12	0:0	6	bits
stmts	33:3	33:8	5	
break	33:3	33:8	6	
water	34:2	0:0	4	a1
op	34:5	0:0	4	=
call	34:7	34:42	4	finddiff
arg	34:16	34:18	5	bp
water	34:16	0:0	6	bp
arg	34:20	34:22	5	a0
water	34:20	0:0	6	a0
arg	34:24	34:28	5	bits
water	34:24	0:0	6	bits
arg	34:30	34:42	5	PIXEL(bp,a0)
call	34:30	34:41	6	PIXEL
arg	34:36	34:38	7	bp
water	34:36	0:0	8	bp
arg	34:39	34:41	7	a0
water	34:39	0:0	8	a0
water	34:43	0:0	4	;
water	35:2	0:0	4	b1
op	35:5	0:0	4	=
call	35:7	35:43	4	finddiff
arg	35:16	35:18	5	rp
water	35:16	0:0	6	rp
arg	35:20	35:22	5	a0
water	35:20	0:0	6	a0
arg	35:24	35:28	5	bits
water	35:24	0:0	6	bits
arg	35:30	35:43	5	!PIXEL(bp,a0)
op	35:30	0:0	6	!
call	35:31	35:42	6	PIXEL
arg	35:37	35:39	7	bp
water	35:37	0:0	8	bp
arg	35:40	35:42	7	a0
water	35:40	0:0	8	a0
water	35:44	0:0	4	;
water	36:2	0:0	4	b1
op	36:5	0:0	4	=
call	36:7	36:42	4	finddiff
arg	36:16	36:18	5	rp
water	36:16	0:0	6	rp
arg	36:20	36:22	5	b1
water	36:20	0:0	6	b1
arg	36:24	36:28	5	bits
water	36:24	0:0	6	bits
arg	36:30	36:42	5	PIXEL(bp,a0)
call	36:30	36:41	6	PIXEL
arg	36:36	36:38	7	bp
water	36:36	0:0	8	bp
arg	36:39	36:41	7	a0
water	36:39	0:0	8	a0
water	36:43	0:0	4	;
water	37:1	0:0	4	}
return	38:1	38:11	2	(1)
water	38:8	0:0	3	(
water	38:9	0:0	3	1
water	38:10	0:0	3	)
