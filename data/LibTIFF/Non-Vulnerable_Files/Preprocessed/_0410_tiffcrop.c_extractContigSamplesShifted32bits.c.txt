func	1:0	97:2	0	static int	extractContigSamplesShifted32bits
params	2:34	0:0	1	
param	2:35	2:44	2	uint8 *	in
param	2:46	2:56	2	uint8 *	out
param	2:58	2:69	2	uint32	cols
param	3:35	3:51	2	tsample_t	sample
param	3:53	3:63	2	uint16	spp
param	3:65	3:75	2	uint16	bps
param	4:15	4:30	2	tsample_t	count
param	4:32	4:44	2	uint32	start
param	4:46	4:56	2	uint32	end
param	5:28	5:37	2	int	shift
stmnts	0:0	96:12	1	
decl	7:2	7:36	2	int	ready_bits
op	7:20	0:0	2	=
water	7:22	0:0	2	0
water	7:23	0:0	2	,
decl	7:2	7:36	2	int	sindex
op	7:32	0:0	2	=
water	7:34	0:0	2	0
decl	8:2	8:43	2	uint32	col
water	8:12	0:0	2	,
decl	8:2	8:43	2	uint32	src_byte
water	8:22	0:0	2	,
decl	8:2	8:43	2	uint32	src_bit
water	8:31	0:0	2	,
decl	8:2	8:43	2	uint32	bit_offset
decl	9:2	9:37	2	uint32	longbuff1
op	9:19	0:0	2	=
water	9:21	0:0	2	0
water	9:22	0:0	2	,
decl	9:2	9:37	2	uint32	longbuff2
op	9:34	0:0	2	=
water	9:36	0:0	2	0
decl	10:2	10:36	2	uint64	maskbits
op	10:18	0:0	2	=
water	10:20	0:0	2	0
water	10:21	0:0	2	,
decl	10:2	10:36	2	uint64	matchbits
op	10:33	0:0	2	=
water	10:35	0:0	2	0
decl	11:2	11:40	2	uint64	buff1
op	11:15	0:0	2	=
water	11:17	0:0	2	0
water	11:18	0:0	2	,
decl	11:2	11:40	2	uint64	buff2
op	11:26	0:0	2	=
water	11:28	0:0	2	0
water	11:29	0:0	2	,
decl	11:2	11:40	2	uint64	buff3
op	11:37	0:0	2	=
water	11:39	0:0	2	0
decl	12:2	12:67	2	uint8	bytebuff1
op	12:19	0:0	2	=
water	12:21	0:0	2	0
water	12:22	0:0	2	,
decl	12:2	12:67	2	uint8	bytebuff2
op	12:34	0:0	2	=
water	12:36	0:0	2	0
water	12:37	0:0	2	,
decl	12:2	12:67	2	uint8	bytebuff3
op	12:49	0:0	2	=
water	12:51	0:0	2	0
water	12:52	0:0	2	,
decl	12:2	12:67	2	uint8	bytebuff4
op	12:64	0:0	2	=
water	12:66	0:0	2	0
decl	13:2	13:17	2	uint8	*src
op	13:13	0:0	2	=
water	13:15	0:0	2	in
decl	14:2	14:18	2	uint8	*dst
op	14:13	0:0	2	=
water	14:15	0:0	2	out
if	15:2	19:4	2	(( in == NULL ) || ( out == NULL ))
cond	15:6	15:34	3	( in == NULL ) || ( out == NULL )
water	15:6	0:0	4	(
water	15:7	0:0	4	in
op	15:10	0:0	4	==
water	15:13	0:0	4	NULL
water	15:17	0:0	4	)
op	15:19	0:0	4	||
water	15:22	0:0	4	(
water	15:23	0:0	4	out
op	15:27	0:0	4	==
water	15:30	0:0	4	NULL
water	15:34	0:0	4	)
stmts	16:4	19:4	3	
water	16:4	0:0	4	{
call	17:4	17:82	4	TIFFError
arg	17:14	17:49	5	"extractContigSamplesShifted32bits"
water	17:14	0:0	6	"extractContigSamplesShifted32bits"
arg	17:50	17:82	5	"Invalid input or output buffer"
water	17:50	0:0	6	"Invalid input or output buffer"
water	17:83	0:0	4	;
return	18:4	18:14	4	(1)
water	18:11	0:0	5	(
water	18:12	0:0	5	1
water	18:13	0:0	5	)
water	19:4	0:0	4	}
if	20:2	25:4	2	(( start > end ) || ( start > cols ))
cond	20:6	20:36	3	( start > end ) || ( start > cols )
water	20:6	0:0	4	(
water	20:7	0:0	4	start
op	20:13	0:0	4	>
water	20:15	0:0	4	end
water	20:18	0:0	4	)
op	20:20	0:0	4	||
water	20:23	0:0	4	(
water	20:24	0:0	4	start
op	20:30	0:0	4	>
water	20:32	0:0	4	cols
water	20:36	0:0	4	)
stmts	21:4	25:4	3	
water	21:4	0:0	4	{
call	22:4	23:61	4	TIFFError
arg	22:15	22:50	5	"extractContigSamplesShifted32bits"
water	22:15	0:0	6	"extractContigSamplesShifted32bits"
arg	23:15	23:54	5	"Invalid start column value %d ignored"
water	23:15	0:0	6	"Invalid start column value %d ignored"
arg	23:56	23:61	5	start
water	23:56	0:0	6	start
water	23:62	0:0	4	;
water	24:4	0:0	4	start
op	24:10	0:0	4	=
water	24:12	0:0	4	0
water	24:13	0:0	4	;
water	25:4	0:0	4	}
if	26:2	31:4	2	(( end == 0 ) || ( end > cols ))
cond	26:6	26:31	3	( end == 0 ) || ( end > cols )
water	26:6	0:0	4	(
water	26:7	0:0	4	end
op	26:11	0:0	4	==
water	26:14	0:0	4	0
water	26:15	0:0	4	)
op	26:17	0:0	4	||
water	26:20	0:0	4	(
water	26:21	0:0	4	end
op	26:25	0:0	4	>
water	26:27	0:0	4	cols
water	26:31	0:0	4	)
stmts	27:4	31:4	3	
water	27:4	0:0	4	{
call	28:4	29:57	4	TIFFError
arg	28:15	28:50	5	"extractContigSamplesShifted32bits"
water	28:15	0:0	6	"extractContigSamplesShifted32bits"
arg	29:15	29:52	5	"Invalid end column value %d ignored"
water	29:15	0:0	6	"Invalid end column value %d ignored"
arg	29:54	29:57	5	end
water	29:54	0:0	6	end
water	29:58	0:0	4	;
water	30:4	0:0	4	end
op	30:8	0:0	4	=
water	30:10	0:0	4	cols
water	30:14	0:0	4	;
water	31:4	0:0	4	}
water	33:2	0:0	2	ready_bits
op	33:13	0:0	2	=
water	33:15	0:0	2	shift
water	33:20	0:0	2	;
water	34:2	0:0	2	maskbits
op	34:11	0:0	2	=
water	34:14	0:0	2	(
water	34:15	0:0	2	uint64
water	34:21	0:0	2	)
op	34:22	0:0	2	-
water	34:23	0:0	2	1
op	34:25	0:0	2	>>
water	34:28	0:0	2	(
water	34:30	0:0	2	64
op	34:33	0:0	2	-
water	34:35	0:0	2	bps
water	34:38	0:0	2	)
water	34:39	0:0	2	;
for	35:2	88:4	2	(col = start ;col < end;col ++)
forinit	35:7	35:18	3	col = start ;
water	35:7	0:0	4	col
op	35:11	0:0	4	=
water	35:13	0:0	4	start
water	35:18	0:0	4	;
cond	35:20	35:26	3	col < end
water	35:20	0:0	4	col
op	35:24	0:0	4	<
water	35:26	0:0	4	end
forexpr	35:31	35:34	3	col ++
water	35:31	0:0	4	col
op	35:34	0:0	4	++
stmts	36:4	88:4	3	
water	36:4	0:0	4	{
water	38:4	0:0	4	bit_offset
op	38:15	0:0	4	=
water	38:17	0:0	4	col
op	38:21	0:0	4	*
water	38:23	0:0	4	bps
op	38:27	0:0	4	*
water	38:29	0:0	4	spp
water	38:32	0:0	4	;
for	39:4	87:6	4	(sindex = sample ;( sindex < spp ) && ( sindex < ( sample + count ) );sindex ++)
forinit	39:9	39:24	5	sindex = sample ;
water	39:9	0:0	6	sindex
op	39:16	0:0	6	=
water	39:18	0:0	6	sample
water	39:24	0:0	6	;
cond	39:26	39:70	5	( sindex < spp ) && ( sindex < ( sample + count ) )
water	39:26	0:0	6	(
water	39:27	0:0	6	sindex
op	39:34	0:0	6	<
water	39:36	0:0	6	spp
water	39:39	0:0	6	)
op	39:41	0:0	6	&&
water	39:44	0:0	6	(
water	39:45	0:0	6	sindex
op	39:52	0:0	6	<
water	39:54	0:0	6	(
water	39:55	0:0	6	sample
op	39:62	0:0	6	+
water	39:64	0:0	6	count
water	39:69	0:0	6	)
water	39:70	0:0	6	)
forexpr	39:73	39:79	5	sindex ++
water	39:73	0:0	6	sindex
op	39:79	0:0	6	++
stmts	40:6	87:6	5	
water	40:6	0:0	6	{
if	41:6	45:8	6	(sindex == 0)
cond	41:10	41:20	7	sindex == 0
water	41:10	0:0	8	sindex
op	41:17	0:0	8	==
water	41:20	0:0	8	0
stmts	42:8	45:8	7	
water	42:8	0:0	8	{
water	43:8	0:0	8	src_byte
op	43:17	0:0	8	=
water	43:19	0:0	8	bit_offset
op	43:30	0:0	8	/
water	43:32	0:0	8	8
water	43:33	0:0	8	;
water	44:8	0:0	8	src_bit
op	44:17	0:0	8	=
water	44:19	0:0	8	bit_offset
op	44:30	0:0	8	%
water	44:32	0:0	8	8
water	44:33	0:0	8	;
water	45:8	0:0	8	}
else	46:6	50:8	6
stmts	47:8	50:8	7	
water	47:8	0:0	8	{
water	48:8	0:0	8	src_byte
op	48:17	0:0	8	=
water	48:19	0:0	8	(
water	48:20	0:0	8	bit_offset
op	48:31	0:0	8	+
water	48:33	0:0	8	(
water	48:34	0:0	8	sindex
op	48:41	0:0	8	*
water	48:43	0:0	8	bps
water	48:46	0:0	8	)
water	48:47	0:0	8	)
op	48:49	0:0	8	/
water	48:51	0:0	8	8
water	48:52	0:0	8	;
water	49:8	0:0	8	src_bit
op	49:17	0:0	8	=
water	49:19	0:0	8	(
water	49:20	0:0	8	bit_offset
op	49:31	0:0	8	+
water	49:33	0:0	8	(
water	49:34	0:0	8	sindex
op	49:41	0:0	8	*
water	49:43	0:0	8	bps
water	49:46	0:0	8	)
water	49:47	0:0	8	)
op	49:49	0:0	8	%
water	49:51	0:0	8	8
water	49:52	0:0	8	;
water	50:8	0:0	8	}
water	51:6	0:0	6	src
op	51:10	0:0	6	=
water	51:12	0:0	6	in
op	51:15	0:0	6	+
water	51:17	0:0	6	src_byte
water	51:25	0:0	6	;
water	52:6	0:0	6	matchbits
op	52:16	0:0	6	=
water	52:18	0:0	6	maskbits
op	52:27	0:0	6	<<
water	52:30	0:0	6	(
water	52:31	0:0	6	64
op	52:34	0:0	6	-
water	52:36	0:0	6	src_bit
op	52:44	0:0	6	-
water	52:46	0:0	6	bps
water	52:49	0:0	6	)
water	52:50	0:0	6	;
if	53:6	57:8	6	(little_endian)
cond	53:10	53:10	7	little_endian
water	53:10	0:0	8	little_endian
stmts	54:8	57:8	7	
water	54:8	0:0	8	{
water	55:1	0:0	8	longbuff1
op	55:11	0:0	8	=
water	55:13	0:0	8	(
water	55:14	0:0	8	src
op	55:17	0:0	8	[
water	55:18	0:0	8	0
op	55:19	0:0	8	]
op	55:21	0:0	8	<<
water	55:24	0:0	8	24
water	55:26	0:0	8	)
op	55:28	0:0	8	|
water	55:30	0:0	8	(
water	55:31	0:0	8	src
op	55:34	0:0	8	[
water	55:35	0:0	8	1
op	55:36	0:0	8	]
op	55:38	0:0	8	<<
water	55:41	0:0	8	16
water	55:43	0:0	8	)
op	55:45	0:0	8	|
water	55:47	0:0	8	(
water	55:48	0:0	8	src
op	55:51	0:0	8	[
water	55:52	0:0	8	2
op	55:53	0:0	8	]
op	55:55	0:0	8	<<
water	55:58	0:0	8	8
water	55:59	0:0	8	)
op	55:61	0:0	8	|
water	55:63	0:0	8	src
op	55:66	0:0	8	[
water	55:67	0:0	8	3
op	55:68	0:0	8	]
water	55:69	0:0	8	;
water	56:1	0:0	8	longbuff2
op	56:11	0:0	8	=
water	56:13	0:0	8	longbuff1
water	56:22	0:0	8	;
water	57:8	0:0	8	}
else	58:6	62:1	6
stmts	59:8	62:1	7	
water	59:8	0:0	8	{
water	60:1	0:0	8	longbuff1
op	60:11	0:0	8	=
water	60:13	0:0	8	(
water	60:14	0:0	8	src
op	60:17	0:0	8	[
water	60:18	0:0	8	3
op	60:19	0:0	8	]
op	60:21	0:0	8	<<
water	60:24	0:0	8	24
water	60:26	0:0	8	)
op	60:28	0:0	8	|
water	60:30	0:0	8	(
water	60:31	0:0	8	src
op	60:34	0:0	8	[
water	60:35	0:0	8	2
op	60:36	0:0	8	]
op	60:38	0:0	8	<<
water	60:41	0:0	8	16
water	60:43	0:0	8	)
op	60:45	0:0	8	|
water	60:47	0:0	8	(
water	60:48	0:0	8	src
op	60:51	0:0	8	[
water	60:52	0:0	8	1
op	60:53	0:0	8	]
op	60:55	0:0	8	<<
water	60:58	0:0	8	8
water	60:59	0:0	8	)
op	60:61	0:0	8	|
water	60:63	0:0	8	src
op	60:66	0:0	8	[
water	60:67	0:0	8	0
op	60:68	0:0	8	]
water	60:69	0:0	8	;
water	61:1	0:0	8	longbuff2
op	61:11	0:0	8	=
water	61:13	0:0	8	longbuff1
water	61:22	0:0	8	;
water	62:1	0:0	8	}
water	63:6	0:0	6	buff3
op	63:12	0:0	6	=
water	63:14	0:0	6	(
water	63:15	0:0	6	(
water	63:16	0:0	6	uint64
water	63:22	0:0	6	)
water	63:23	0:0	6	longbuff1
op	63:33	0:0	6	<<
water	63:36	0:0	6	32
water	63:38	0:0	6	)
op	63:40	0:0	6	|
water	63:42	0:0	6	longbuff2
water	63:51	0:0	6	;
if	64:6	65:52	6	(( col == start ) && ( sindex == sample ))
cond	64:10	64:45	7	( col == start ) && ( sindex == sample )
water	64:10	0:0	8	(
water	64:11	0:0	8	col
op	64:15	0:0	8	==
water	64:18	0:0	8	start
water	64:23	0:0	8	)
op	64:25	0:0	8	&&
water	64:28	0:0	8	(
water	64:29	0:0	8	sindex
op	64:36	0:0	8	==
water	64:39	0:0	8	sample
water	64:45	0:0	8	)
stmts	65:8	65:52	7	
water	65:8	0:0	8	buff2
op	65:14	0:0	8	=
water	65:16	0:0	8	buff3
op	65:22	0:0	8	&
water	65:24	0:0	8	(
water	65:25	0:0	8	(
water	65:26	0:0	8	uint64
water	65:32	0:0	8	)
op	65:33	0:0	8	-
water	65:34	0:0	8	1
water	65:35	0:0	8	)
op	65:37	0:0	8	<<
water	65:40	0:0	8	(
water	65:41	0:0	8	32
op	65:44	0:0	8	-
water	65:46	0:0	8	shift
water	65:51	0:0	8	)
water	65:52	0:0	8	;
water	66:6	0:0	6	buff1
op	66:12	0:0	6	=
water	66:14	0:0	6	(
water	66:15	0:0	6	buff3
op	66:21	0:0	6	&
water	66:23	0:0	6	matchbits
water	66:32	0:0	6	)
op	66:34	0:0	6	<<
water	66:37	0:0	6	(
water	66:38	0:0	6	src_bit
water	66:45	0:0	6	)
water	66:46	0:0	6	;
if	67:6	71:8	6	(ready_bits < 32)
cond	67:10	67:23	7	ready_bits < 32
water	67:10	0:0	8	ready_bits
op	67:21	0:0	8	<
water	67:23	0:0	8	32
stmts	68:8	71:8	7	
water	68:8	0:0	8	{
water	69:8	0:0	8	bytebuff1
op	69:18	0:0	8	=
water	69:20	0:0	8	bytebuff2
op	69:30	0:0	8	=
water	69:32	0:0	8	bytebuff3
op	69:42	0:0	8	=
water	69:44	0:0	8	bytebuff4
op	69:54	0:0	8	=
water	69:56	0:0	8	0
water	69:57	0:0	8	;
water	70:8	0:0	8	buff2
op	70:14	0:0	8	=
water	70:16	0:0	8	(
water	70:17	0:0	8	buff2
op	70:23	0:0	8	|
water	70:25	0:0	8	(
water	70:26	0:0	8	buff1
op	70:32	0:0	8	>>
water	70:35	0:0	8	ready_bits
water	70:45	0:0	8	)
water	70:46	0:0	8	)
water	70:47	0:0	8	;
water	71:8	0:0	8	}
else	72:6	85:8	6
stmts	73:8	85:8	7	
water	73:8	0:0	8	{
water	74:8	0:0	8	bytebuff1
op	74:18	0:0	8	=
water	74:20	0:0	8	(
water	74:21	0:0	8	buff2
op	74:27	0:0	8	>>
water	74:30	0:0	8	56
water	74:32	0:0	8	)
water	74:33	0:0	8	;
op	75:8	0:0	8	*
water	75:9	0:0	8	dst
op	75:12	0:0	8	++
op	75:15	0:0	8	=
water	75:17	0:0	8	bytebuff1
water	75:26	0:0	8	;
water	76:8	0:0	8	bytebuff2
op	76:18	0:0	8	=
water	76:20	0:0	8	(
water	76:21	0:0	8	buff2
op	76:27	0:0	8	>>
water	76:30	0:0	8	48
water	76:32	0:0	8	)
water	76:33	0:0	8	;
op	77:8	0:0	8	*
water	77:9	0:0	8	dst
op	77:12	0:0	8	++
op	77:15	0:0	8	=
water	77:17	0:0	8	bytebuff2
water	77:26	0:0	8	;
water	78:8	0:0	8	bytebuff3
op	78:18	0:0	8	=
water	78:20	0:0	8	(
water	78:21	0:0	8	buff2
op	78:27	0:0	8	>>
water	78:30	0:0	8	40
water	78:32	0:0	8	)
water	78:33	0:0	8	;
op	79:8	0:0	8	*
water	79:9	0:0	8	dst
op	79:12	0:0	8	++
op	79:15	0:0	8	=
water	79:17	0:0	8	bytebuff3
water	79:26	0:0	8	;
water	80:8	0:0	8	bytebuff4
op	80:18	0:0	8	=
water	80:20	0:0	8	(
water	80:21	0:0	8	buff2
op	80:27	0:0	8	>>
water	80:30	0:0	8	32
water	80:32	0:0	8	)
water	80:33	0:0	8	;
op	81:8	0:0	8	*
water	81:9	0:0	8	dst
op	81:12	0:0	8	++
op	81:15	0:0	8	=
water	81:17	0:0	8	bytebuff4
water	81:26	0:0	8	;
water	82:8	0:0	8	ready_bits
op	82:19	0:0	8	-=
water	82:22	0:0	8	32
water	82:24	0:0	8	;
water	84:8	0:0	8	buff2
op	84:14	0:0	8	=
water	84:16	0:0	8	(
water	84:17	0:0	8	(
water	84:18	0:0	8	buff2
op	84:24	0:0	8	<<
water	84:27	0:0	8	32
water	84:29	0:0	8	)
op	84:31	0:0	8	|
water	84:33	0:0	8	(
water	84:34	0:0	8	buff1
op	84:40	0:0	8	>>
water	84:43	0:0	8	ready_bits
water	84:53	0:0	8	)
water	84:54	0:0	8	)
water	84:55	0:0	8	;
water	85:8	0:0	8	}
water	86:6	0:0	6	ready_bits
op	86:17	0:0	6	+=
water	86:20	0:0	6	bps
water	86:23	0:0	6	;
water	87:6	0:0	6	}
water	88:4	0:0	4	}
while	89:2	95:4	2	(ready_bits > 0)
cond	89:9	89:22	3	ready_bits > 0
water	89:9	0:0	4	ready_bits
op	89:20	0:0	4	>
water	89:22	0:0	4	0
stmts	90:4	95:4	3	
water	90:4	0:0	4	{
water	91:4	0:0	4	bytebuff1
op	91:14	0:0	4	=
water	91:16	0:0	4	(
water	91:17	0:0	4	buff2
op	91:23	0:0	4	>>
water	91:26	0:0	4	56
water	91:28	0:0	4	)
water	91:29	0:0	4	;
op	92:4	0:0	4	*
water	92:5	0:0	4	dst
op	92:8	0:0	4	++
op	92:11	0:0	4	=
water	92:13	0:0	4	bytebuff1
water	92:22	0:0	4	;
water	93:4	0:0	4	buff2
op	93:10	0:0	4	=
water	93:12	0:0	4	(
water	93:13	0:0	4	buff2
op	93:19	0:0	4	<<
water	93:22	0:0	4	8
water	93:23	0:0	4	)
water	93:24	0:0	4	;
water	94:4	0:0	4	ready_bits
op	94:15	0:0	4	-=
water	94:18	0:0	4	8
water	94:19	0:0	4	;
water	95:4	0:0	4	}
return	96:2	96:12	2	(0)
water	96:9	0:0	3	(
water	96:10	0:0	3	0
water	96:11	0:0	3	)
