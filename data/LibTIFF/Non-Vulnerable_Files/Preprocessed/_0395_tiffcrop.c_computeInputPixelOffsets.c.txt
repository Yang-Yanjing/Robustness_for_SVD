func	1:0	250:2	0	static int	computeInputPixelOffsets
params	2:24	0:0	1	
param	2:25	2:47	2	struct crop_mask *	crop
param	2:49	2:73	2	struct image_data *	image
param	3:25	3:43	2	struct offset *	off
stmnts	0:0	249:12	1	
decl	5:2	5:14	2	double	scale
decl	6:2	6:18	2	float	xres
water	6:12	0:0	2	,
decl	6:2	6:18	2	float	yres
decl	9:2	9:43	2	uint32	tmargin
water	9:16	0:0	2	,
decl	9:2	9:43	2	uint32	bmargin
water	9:25	0:0	2	,
decl	9:2	9:43	2	uint32	lmargin
water	9:34	0:0	2	,
decl	9:2	9:43	2	uint32	rmargin
decl	10:2	10:21	2	uint32	startx
water	10:15	0:0	2	,
decl	10:2	10:21	2	uint32	endx
decl	11:2	11:21	2	uint32	starty
water	11:15	0:0	2	,
decl	11:2	11:21	2	uint32	endy
decl	12:2	12:47	2	uint32	width
water	12:14	0:0	2	,
decl	12:2	12:47	2	uint32	length
water	12:22	0:0	2	,
decl	12:2	12:47	2	uint32	crop_width
water	12:34	0:0	2	,
decl	12:2	12:47	2	uint32	crop_length
decl	13:2	13:60	2	uint32	i
water	13:10	0:0	2	,
decl	13:2	13:60	2	uint32	max_width
water	13:21	0:0	2	,
decl	13:2	13:60	2	uint32	max_length
water	13:33	0:0	2	,
decl	13:2	13:60	2	uint32	zwidth
water	13:41	0:0	2	,
decl	13:2	13:60	2	uint32	zlength
water	13:50	0:0	2	,
decl	13:2	13:60	2	uint32	buffsize
decl	14:2	14:23	2	uint32	x1
water	14:11	0:0	2	,
decl	14:2	14:23	2	uint32	x2
water	14:15	0:0	2	,
decl	14:2	14:23	2	uint32	y1
water	14:19	0:0	2	,
decl	14:2	14:23	2	uint32	y2
if	15:2	19:4	2	(image -> res_unit != RESUNIT_INCH && image -> res_unit != RESUNIT_CENTIMETER)
cond	15:6	15:60	3	image -> res_unit != RESUNIT_INCH && image -> res_unit != RESUNIT_CENTIMETER
water	15:6	0:0	4	image
op	15:11	0:0	4	->
water	15:13	0:0	4	res_unit
op	15:22	0:0	4	!=
water	15:25	0:0	4	RESUNIT_INCH
op	15:38	0:0	4	&&
water	15:41	0:0	4	image
op	15:46	0:0	4	->
water	15:48	0:0	4	res_unit
op	15:57	0:0	4	!=
water	15:60	0:0	4	RESUNIT_CENTIMETER
stmts	16:4	19:4	3	
water	16:4	0:0	4	{
water	17:4	0:0	4	xres
op	17:9	0:0	4	=
water	17:11	0:0	4	1
op	17:12	0:0	4	.
water	17:13	0:0	4	0
water	17:14	0:0	4	;
water	18:4	0:0	4	yres
op	18:9	0:0	4	=
water	18:11	0:0	4	1
op	18:12	0:0	4	.
water	18:13	0:0	4	0
water	18:14	0:0	4	;
water	19:4	0:0	4	}
else	20:2	33:4	2
stmts	21:4	33:4	3	
water	21:4	0:0	4	{
if	22:4	30:6	4	(( ( image -> xres == 0 ) || ( image -> yres == 0 ) ) && ( crop -> res_unit != RESUNIT_NONE ) && ( ( crop -> crop_mode & CROP_REGIONS ) || ( crop -> crop_mode & CROP_MARGINS ) || ( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH ) ))
cond	22:8	25:69	5	( ( image -> xres == 0 ) || ( image -> yres == 0 ) ) && ( crop -> res_unit != RESUNIT_NONE ) && ( ( crop -> crop_mode & CROP_REGIONS ) || ( crop -> crop_mode & CROP_MARGINS ) || ( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH ) )
water	22:8	0:0	6	(
water	22:9	0:0	6	(
water	22:10	0:0	6	image
op	22:15	0:0	6	->
water	22:17	0:0	6	xres
op	22:22	0:0	6	==
water	22:25	0:0	6	0
water	22:26	0:0	6	)
op	22:28	0:0	6	||
water	22:31	0:0	6	(
water	22:32	0:0	6	image
op	22:37	0:0	6	->
water	22:39	0:0	6	yres
op	22:44	0:0	6	==
water	22:47	0:0	6	0
water	22:48	0:0	6	)
water	22:49	0:0	6	)
op	22:51	0:0	6	&&
water	23:9	0:0	6	(
water	23:10	0:0	6	crop
op	23:14	0:0	6	->
water	23:16	0:0	6	res_unit
op	23:25	0:0	6	!=
water	23:28	0:0	6	RESUNIT_NONE
water	23:40	0:0	6	)
op	23:42	0:0	6	&&
water	24:1	0:0	6	(
water	24:2	0:0	6	(
water	24:3	0:0	6	crop
op	24:7	0:0	6	->
water	24:9	0:0	6	crop_mode
op	24:19	0:0	6	&
water	24:21	0:0	6	CROP_REGIONS
water	24:33	0:0	6	)
op	24:35	0:0	6	||
water	24:38	0:0	6	(
water	24:39	0:0	6	crop
op	24:43	0:0	6	->
water	24:45	0:0	6	crop_mode
op	24:55	0:0	6	&
water	24:57	0:0	6	CROP_MARGINS
water	24:69	0:0	6	)
op	24:71	0:0	6	||
water	25:3	0:0	6	(
water	25:4	0:0	6	crop
op	25:8	0:0	6	->
water	25:10	0:0	6	crop_mode
op	25:20	0:0	6	&
water	25:22	0:0	6	CROP_LENGTH
water	25:33	0:0	6	)
op	25:36	0:0	6	||
water	25:39	0:0	6	(
water	25:40	0:0	6	crop
op	25:44	0:0	6	->
water	25:46	0:0	6	crop_mode
op	25:56	0:0	6	&
water	25:58	0:0	6	CROP_WIDTH
water	25:68	0:0	6	)
water	25:69	0:0	6	)
stmts	26:6	30:6	5	
water	26:6	0:0	6	{
call	27:6	27:116	6	TIFFError
arg	27:16	27:42	7	"computeInputPixelOffsets"
water	27:16	0:0	8	"computeInputPixelOffsets"
arg	27:44	27:116	7	"Cannot compute margins or fixed size sections without image resolution"
water	27:44	0:0	8	"Cannot compute margins or fixed size sections without image resolution"
water	27:117	0:0	6	;
call	28:6	28:83	6	TIFFError
arg	28:16	28:42	7	"computeInputPixelOffsets"
water	28:16	0:0	8	"computeInputPixelOffsets"
arg	28:44	28:83	7	"Specify units in pixels and try again"
water	28:44	0:0	8	"Specify units in pixels and try again"
water	28:84	0:0	6	;
return	29:6	29:17	6	(-1)
water	29:13	0:0	7	(
op	29:14	0:0	7	-
water	29:15	0:0	7	1
water	29:16	0:0	7	)
water	30:6	0:0	6	}
water	31:4	0:0	4	xres
op	31:9	0:0	4	=
water	31:11	0:0	4	image
op	31:16	0:0	4	->
water	31:18	0:0	4	xres
water	31:22	0:0	4	;
water	32:4	0:0	4	yres
op	32:9	0:0	4	=
water	32:11	0:0	4	image
op	32:16	0:0	4	->
water	32:18	0:0	4	yres
water	32:22	0:0	4	;
water	33:4	0:0	4	}
water	35:2	0:0	2	scale
op	35:8	0:0	2	=
water	35:10	0:0	2	1
op	35:11	0:0	2	.
water	35:12	0:0	2	0
water	35:13	0:0	2	;
switch	36:2	48:4	2	(crop -> res_unit)
cond	36:10	36:16	3	crop -> res_unit
water	36:10	0:0	4	crop
op	36:14	0:0	4	->
water	36:16	0:0	4	res_unit
stmts	36:26	48:4	3	
water	36:26	0:0	4	{
label	37:4	37:27	4	case RESUNIT_CENTIMETER :
if	38:9	39:20	4	(image -> res_unit == RESUNIT_INCH)
cond	38:13	38:32	5	image -> res_unit == RESUNIT_INCH
water	38:13	0:0	6	image
op	38:18	0:0	6	->
water	38:20	0:0	6	res_unit
op	38:29	0:0	6	==
water	38:32	0:0	6	RESUNIT_INCH
stmts	39:4	39:20	5	
water	39:4	0:0	6	scale
op	39:10	0:0	6	=
water	39:12	0:0	6	1
op	39:13	0:0	6	.
water	39:14	0:0	6	0
op	39:15	0:0	6	/
water	39:16	0:0	6	2
op	39:17	0:0	6	.
water	39:18	0:0	6	54
water	39:20	0:0	6	;
break	40:2	40:7	4	
label	41:4	41:21	4	case RESUNIT_INCH :
if	42:2	43:18	4	(image -> res_unit == RESUNIT_CENTIMETER)
cond	42:6	42:25	5	image -> res_unit == RESUNIT_CENTIMETER
water	42:6	0:0	6	image
op	42:11	0:0	6	->
water	42:13	0:0	6	res_unit
op	42:22	0:0	6	==
water	42:25	0:0	6	RESUNIT_CENTIMETER
stmts	43:6	43:18	5	
water	43:6	0:0	6	scale
op	43:12	0:0	6	=
water	43:14	0:0	6	2
op	43:15	0:0	6	.
water	43:16	0:0	6	54
water	43:18	0:0	6	;
break	44:2	44:7	4	
label	45:4	45:21	4	case RESUNIT_NONE :
label	46:4	46:11	4	default :
break	47:4	47:9	4	
water	48:4	0:0	4	}
if	49:2	113:4	2	(crop -> crop_mode & CROP_REGIONS)
cond	49:6	49:24	3	crop -> crop_mode & CROP_REGIONS
water	49:6	0:0	4	crop
op	49:10	0:0	4	->
water	49:12	0:0	4	crop_mode
op	49:22	0:0	4	&
water	49:24	0:0	4	CROP_REGIONS
stmts	50:4	113:4	3	
water	50:4	0:0	4	{
water	51:4	0:0	4	max_width
op	51:14	0:0	4	=
water	51:16	0:0	4	max_length
op	51:27	0:0	4	=
water	51:29	0:0	4	0
water	51:30	0:0	4	;
for	52:4	111:6	4	(i = 0 ;i < crop -> regions;i ++)
forinit	52:9	52:14	5	i = 0 ;
water	52:9	0:0	6	i
op	52:11	0:0	6	=
water	52:13	0:0	6	0
water	52:14	0:0	6	;
cond	52:16	52:26	5	i < crop -> regions
water	52:16	0:0	6	i
op	52:18	0:0	6	<
water	52:20	0:0	6	crop
op	52:24	0:0	6	->
water	52:26	0:0	6	regions
forexpr	52:35	52:36	5	i ++
water	52:35	0:0	6	i
op	52:36	0:0	6	++
stmts	53:6	111:6	5	
water	53:6	0:0	6	{
if	54:6	60:8	6	(( crop -> res_unit == RESUNIT_INCH ) || ( crop -> res_unit == RESUNIT_CENTIMETER ))
cond	54:10	54:83	7	( crop -> res_unit == RESUNIT_INCH ) || ( crop -> res_unit == RESUNIT_CENTIMETER )
water	54:10	0:0	8	(
water	54:11	0:0	8	crop
op	54:15	0:0	8	->
water	54:17	0:0	8	res_unit
op	54:26	0:0	8	==
water	54:29	0:0	8	RESUNIT_INCH
water	54:41	0:0	8	)
op	54:43	0:0	8	||
water	54:46	0:0	8	(
water	54:47	0:0	8	crop
op	54:51	0:0	8	->
water	54:53	0:0	8	res_unit
op	54:62	0:0	8	==
water	54:65	0:0	8	RESUNIT_CENTIMETER
water	54:83	0:0	8	)
stmts	55:8	60:8	7	
water	55:8	0:0	8	{
water	56:1	0:0	8	x1
op	56:4	0:0	8	=
call	56:6	56:50	8	(uint32)
arg	56:16	56:50	9	crop->corners[i].X1*scale*xres
water	56:16	0:0	10	crop
op	56:20	0:0	10	->
water	56:22	0:0	10	corners
op	56:29	0:0	10	[
water	56:30	0:0	10	i
op	56:31	0:0	10	]
op	56:32	0:0	10	.
water	56:33	0:0	10	X1
op	56:36	0:0	10	*
water	56:38	0:0	10	scale
op	56:44	0:0	10	*
water	56:46	0:0	10	xres
water	56:51	0:0	8	;
water	57:1	0:0	8	x2
op	57:4	0:0	8	=
call	57:6	57:50	8	(uint32)
arg	57:16	57:50	9	crop->corners[i].X2*scale*xres
water	57:16	0:0	10	crop
op	57:20	0:0	10	->
water	57:22	0:0	10	corners
op	57:29	0:0	10	[
water	57:30	0:0	10	i
op	57:31	0:0	10	]
op	57:32	0:0	10	.
water	57:33	0:0	10	X2
op	57:36	0:0	10	*
water	57:38	0:0	10	scale
op	57:44	0:0	10	*
water	57:46	0:0	10	xres
water	57:51	0:0	8	;
water	58:1	0:0	8	y1
op	58:4	0:0	8	=
call	58:6	58:50	8	(uint32)
arg	58:16	58:50	9	crop->corners[i].Y1*scale*yres
water	58:16	0:0	10	crop
op	58:20	0:0	10	->
water	58:22	0:0	10	corners
op	58:29	0:0	10	[
water	58:30	0:0	10	i
op	58:31	0:0	10	]
op	58:32	0:0	10	.
water	58:33	0:0	10	Y1
op	58:36	0:0	10	*
water	58:38	0:0	10	scale
op	58:44	0:0	10	*
water	58:46	0:0	10	yres
water	58:51	0:0	8	;
water	59:1	0:0	8	y2
op	59:4	0:0	8	=
call	59:6	59:50	8	(uint32)
arg	59:16	59:50	9	crop->corners[i].Y2*scale*yres
water	59:16	0:0	10	crop
op	59:20	0:0	10	->
water	59:22	0:0	10	corners
op	59:29	0:0	10	[
water	59:30	0:0	10	i
op	59:31	0:0	10	]
op	59:32	0:0	10	.
water	59:33	0:0	10	Y2
op	59:36	0:0	10	*
water	59:38	0:0	10	scale
op	59:44	0:0	10	*
water	59:46	0:0	10	yres
water	59:51	0:0	8	;
water	60:8	0:0	8	}
else	61:6	67:1	6
stmts	62:8	67:1	7	
water	62:8	0:0	8	{
water	63:1	0:0	8	x1
op	63:4	0:0	8	=
call	63:6	63:35	8	(uint32)
arg	63:16	63:35	9	crop->corners[i].X1
water	63:16	0:0	10	crop
op	63:20	0:0	10	->
water	63:22	0:0	10	corners
op	63:29	0:0	10	[
water	63:30	0:0	10	i
op	63:31	0:0	10	]
op	63:32	0:0	10	.
water	63:33	0:0	10	X1
water	63:36	0:0	8	;
water	64:1	0:0	8	x2
op	64:4	0:0	8	=
call	64:6	64:35	8	(uint32)
arg	64:16	64:35	9	crop->corners[i].X2
water	64:16	0:0	10	crop
op	64:20	0:0	10	->
water	64:22	0:0	10	corners
op	64:29	0:0	10	[
water	64:30	0:0	10	i
op	64:31	0:0	10	]
op	64:32	0:0	10	.
water	64:33	0:0	10	X2
water	64:36	0:0	8	;
water	65:1	0:0	8	y1
op	65:4	0:0	8	=
call	65:6	65:35	8	(uint32)
arg	65:16	65:35	9	crop->corners[i].Y1
water	65:16	0:0	10	crop
op	65:20	0:0	10	->
water	65:22	0:0	10	corners
op	65:29	0:0	10	[
water	65:30	0:0	10	i
op	65:31	0:0	10	]
op	65:32	0:0	10	.
water	65:33	0:0	10	Y1
water	65:36	0:0	8	;
water	66:1	0:0	8	y2
op	66:4	0:0	8	=
call	66:6	66:35	8	(uint32)
arg	66:16	66:35	9	crop->corners[i].Y2
water	66:16	0:0	10	crop
op	66:20	0:0	10	->
water	66:22	0:0	10	corners
op	66:29	0:0	10	[
water	66:30	0:0	10	i
op	66:31	0:0	10	]
op	66:32	0:0	10	.
water	66:33	0:0	10	Y2
water	66:36	0:0	8	;
water	67:1	0:0	8	}
if	68:6	69:34	6	(x1 < 1)
cond	68:10	68:15	7	x1 < 1
water	68:10	0:0	8	x1
op	68:13	0:0	8	<
water	68:15	0:0	8	1
stmts	69:8	69:34	7	
water	69:8	0:0	8	crop
op	69:12	0:0	8	->
water	69:14	0:0	8	regionlist
op	69:24	0:0	8	[
water	69:25	0:0	8	i
op	69:26	0:0	8	]
op	69:27	0:0	8	.
water	69:28	0:0	8	x1
op	69:31	0:0	8	=
water	69:33	0:0	8	0
water	69:34	0:0	8	;
else	70:6	71:50	6
stmts	71:8	71:50	7	
water	71:8	0:0	8	crop
op	71:12	0:0	8	->
water	71:14	0:0	8	regionlist
op	71:24	0:0	8	[
water	71:25	0:0	8	i
op	71:26	0:0	8	]
op	71:27	0:0	8	.
water	71:28	0:0	8	x1
op	71:31	0:0	8	=
call	71:33	71:49	8	(uint32)
arg	71:43	71:49	9	x1-1
water	71:43	0:0	10	x1
op	71:46	0:0	10	-
water	71:48	0:0	10	1
water	71:50	0:0	8	;
if	72:6	73:49	6	(x2 > image -> width - 1)
cond	72:10	72:30	7	x2 > image -> width - 1
water	72:10	0:0	8	x2
op	72:13	0:0	8	>
water	72:15	0:0	8	image
op	72:20	0:0	8	->
water	72:22	0:0	8	width
op	72:28	0:0	8	-
water	72:30	0:0	8	1
stmts	73:8	73:49	7	
water	73:8	0:0	8	crop
op	73:12	0:0	8	->
water	73:14	0:0	8	regionlist
op	73:24	0:0	8	[
water	73:25	0:0	8	i
op	73:26	0:0	8	]
op	73:27	0:0	8	.
water	73:28	0:0	8	x2
op	73:31	0:0	8	=
water	73:33	0:0	8	image
op	73:38	0:0	8	->
water	73:40	0:0	8	width
op	73:46	0:0	8	-
water	73:48	0:0	8	1
water	73:49	0:0	8	;
else	74:6	75:50	6
stmts	75:8	75:50	7	
water	75:8	0:0	8	crop
op	75:12	0:0	8	->
water	75:14	0:0	8	regionlist
op	75:24	0:0	8	[
water	75:25	0:0	8	i
op	75:26	0:0	8	]
op	75:27	0:0	8	.
water	75:28	0:0	8	x2
op	75:31	0:0	8	=
call	75:33	75:49	8	(uint32)
arg	75:43	75:49	9	x2-1
water	75:43	0:0	10	x2
op	75:46	0:0	10	-
water	75:48	0:0	10	1
water	75:50	0:0	8	;
water	76:6	0:0	6	zwidth
op	76:14	0:0	6	=
water	76:16	0:0	6	crop
op	76:20	0:0	6	->
water	76:22	0:0	6	regionlist
op	76:32	0:0	6	[
water	76:33	0:0	6	i
op	76:34	0:0	6	]
op	76:35	0:0	6	.
water	76:36	0:0	6	x2
op	76:39	0:0	6	-
water	76:41	0:0	6	crop
op	76:45	0:0	6	->
water	76:47	0:0	6	regionlist
op	76:57	0:0	6	[
water	76:58	0:0	6	i
op	76:59	0:0	6	]
op	76:60	0:0	6	.
water	76:61	0:0	6	x1
op	76:64	0:0	6	+
water	76:66	0:0	6	1
water	76:67	0:0	6	;
if	77:6	78:34	6	(y1 < 1)
cond	77:10	77:15	7	y1 < 1
water	77:10	0:0	8	y1
op	77:13	0:0	8	<
water	77:15	0:0	8	1
stmts	78:8	78:34	7	
water	78:8	0:0	8	crop
op	78:12	0:0	8	->
water	78:14	0:0	8	regionlist
op	78:24	0:0	8	[
water	78:25	0:0	8	i
op	78:26	0:0	8	]
op	78:27	0:0	8	.
water	78:28	0:0	8	y1
op	78:31	0:0	8	=
water	78:33	0:0	8	0
water	78:34	0:0	8	;
else	79:6	80:50	6
stmts	80:8	80:50	7	
water	80:8	0:0	8	crop
op	80:12	0:0	8	->
water	80:14	0:0	8	regionlist
op	80:24	0:0	8	[
water	80:25	0:0	8	i
op	80:26	0:0	8	]
op	80:27	0:0	8	.
water	80:28	0:0	8	y1
op	80:31	0:0	8	=
call	80:33	80:49	8	(uint32)
arg	80:43	80:49	9	y1-1
water	80:43	0:0	10	y1
op	80:46	0:0	10	-
water	80:48	0:0	10	1
water	80:50	0:0	8	;
if	81:6	82:50	6	(y2 > image -> length - 1)
cond	81:10	81:31	7	y2 > image -> length - 1
water	81:10	0:0	8	y2
op	81:13	0:0	8	>
water	81:15	0:0	8	image
op	81:20	0:0	8	->
water	81:22	0:0	8	length
op	81:29	0:0	8	-
water	81:31	0:0	8	1
stmts	82:8	82:50	7	
water	82:8	0:0	8	crop
op	82:12	0:0	8	->
water	82:14	0:0	8	regionlist
op	82:24	0:0	8	[
water	82:25	0:0	8	i
op	82:26	0:0	8	]
op	82:27	0:0	8	.
water	82:28	0:0	8	y2
op	82:31	0:0	8	=
water	82:33	0:0	8	image
op	82:38	0:0	8	->
water	82:40	0:0	8	length
op	82:47	0:0	8	-
water	82:49	0:0	8	1
water	82:50	0:0	8	;
else	83:6	84:50	6
stmts	84:8	84:50	7	
water	84:8	0:0	8	crop
op	84:12	0:0	8	->
water	84:14	0:0	8	regionlist
op	84:24	0:0	8	[
water	84:25	0:0	8	i
op	84:26	0:0	8	]
op	84:27	0:0	8	.
water	84:28	0:0	8	y2
op	84:31	0:0	8	=
call	84:33	84:49	8	(uint32)
arg	84:43	84:49	9	y2-1
water	84:43	0:0	10	y2
op	84:46	0:0	10	-
water	84:48	0:0	10	1
water	84:50	0:0	8	;
water	85:6	0:0	6	zlength
op	85:14	0:0	6	=
water	85:16	0:0	6	crop
op	85:20	0:0	6	->
water	85:22	0:0	6	regionlist
op	85:32	0:0	6	[
water	85:33	0:0	6	i
op	85:34	0:0	6	]
op	85:35	0:0	6	.
water	85:36	0:0	6	y2
op	85:39	0:0	6	-
water	85:41	0:0	6	crop
op	85:45	0:0	6	->
water	85:47	0:0	6	regionlist
op	85:57	0:0	6	[
water	85:58	0:0	6	i
op	85:59	0:0	6	]
op	85:60	0:0	6	.
water	85:61	0:0	6	y1
op	85:64	0:0	6	+
water	85:66	0:0	6	1
water	85:67	0:0	6	;
if	86:6	87:26	6	(zwidth > max_width)
cond	86:10	86:19	7	zwidth > max_width
water	86:10	0:0	8	zwidth
op	86:17	0:0	8	>
water	86:19	0:0	8	max_width
stmts	87:8	87:26	7	
water	87:8	0:0	8	max_width
op	87:18	0:0	8	=
water	87:20	0:0	8	zwidth
water	87:26	0:0	8	;
if	88:6	89:28	6	(zlength > max_length)
cond	88:10	88:20	7	zlength > max_length
water	88:10	0:0	8	zlength
op	88:18	0:0	8	>
water	88:20	0:0	8	max_length
stmts	89:8	89:28	7	
water	89:8	0:0	8	max_length
op	89:19	0:0	8	=
water	89:21	0:0	8	zlength
water	89:28	0:0	8	;
water	90:6	0:0	6	buffsize
op	90:15	0:0	6	=
call	90:17	91:72	6	(uint32)
arg	91:11	91:72	7	((zwidth*image->bps*image->spp+7)/8)*(zlength+1)
water	91:11	0:0	8	(
water	91:12	0:0	8	(
water	91:13	0:0	8	zwidth
op	91:20	0:0	8	*
water	91:22	0:0	8	image
op	91:27	0:0	8	->
water	91:29	0:0	8	bps
op	91:33	0:0	8	*
water	91:35	0:0	8	image
op	91:40	0:0	8	->
water	91:42	0:0	8	spp
op	91:46	0:0	8	+
water	91:48	0:0	8	7
water	91:50	0:0	8	)
op	91:52	0:0	8	/
water	91:54	0:0	8	8
water	91:55	0:0	8	)
op	91:57	0:0	8	*
water	91:59	0:0	8	(
water	91:60	0:0	8	zlength
op	91:68	0:0	8	+
water	91:70	0:0	8	1
water	91:71	0:0	8	)
water	91:73	0:0	6	;
water	92:6	0:0	6	crop
op	92:10	0:0	6	->
water	92:12	0:0	6	regionlist
op	92:22	0:0	6	[
water	92:23	0:0	6	i
op	92:24	0:0	6	]
op	92:25	0:0	6	.
water	92:26	0:0	6	buffsize
op	92:35	0:0	6	=
water	92:37	0:0	6	buffsize
water	92:45	0:0	6	;
water	93:6	0:0	6	crop
op	93:10	0:0	6	->
water	93:12	0:0	6	bufftotal
op	93:22	0:0	6	+=
water	93:25	0:0	6	buffsize
water	93:33	0:0	6	;
if	94:6	110:1	6	(crop -> img_mode == COMPOSITE_IMAGES)
cond	94:10	94:28	7	crop -> img_mode == COMPOSITE_IMAGES
water	94:10	0:0	8	crop
op	94:14	0:0	8	->
water	94:16	0:0	8	img_mode
op	94:25	0:0	8	==
water	94:28	0:0	8	COMPOSITE_IMAGES
stmts	95:8	110:1	7	
water	95:8	0:0	8	{
switch	96:8	109:10	8	(crop -> edge_ref)
cond	96:16	96:22	9	crop -> edge_ref
water	96:16	0:0	10	crop
op	96:20	0:0	10	->
water	96:22	0:0	10	edge_ref
stmts	97:10	109:10	9	
water	97:10	0:0	10	{
label	98:10	98:24	10	case EDGE_LEFT :
label	99:10	99:25	10	case EDGE_RIGHT :
water	100:15	0:0	10	crop
op	100:19	0:0	10	->
water	100:21	0:0	10	combined_length
op	100:37	0:0	10	=
water	100:39	0:0	10	zlength
water	100:46	0:0	10	;
water	101:15	0:0	10	crop
op	101:19	0:0	10	->
water	101:21	0:0	10	combined_width
op	101:36	0:0	10	+=
water	101:39	0:0	10	zwidth
water	101:45	0:0	10	;
break	102:15	102:20	10	
label	103:10	103:26	10	case EDGE_BOTTOM :
label	104:10	104:23	10	case EDGE_TOP :
label	105:10	105:17	10	default :
water	106:15	0:0	10	crop
op	106:19	0:0	10	->
water	106:21	0:0	10	combined_width
op	106:36	0:0	10	=
water	106:38	0:0	10	zwidth
water	106:44	0:0	10	;
water	107:15	0:0	10	crop
op	107:19	0:0	10	->
water	107:21	0:0	10	combined_length
op	107:37	0:0	10	+=
water	107:40	0:0	10	zlength
water	107:47	0:0	10	;
break	108:8	108:13	10	
water	109:10	0:0	10	}
water	110:1	0:0	8	}
water	111:6	0:0	6	}
return	112:4	112:14	4	(0)
water	112:11	0:0	5	(
water	112:12	0:0	5	0
water	112:13	0:0	5	)
water	113:4	0:0	4	}
if	117:2	147:4	2	(crop -> crop_mode & CROP_MARGINS)
cond	117:6	117:24	3	crop -> crop_mode & CROP_MARGINS
water	117:6	0:0	4	crop
op	117:10	0:0	4	->
water	117:12	0:0	4	crop_mode
op	117:22	0:0	4	&
water	117:24	0:0	4	CROP_MARGINS
stmts	118:4	147:4	3	
water	118:4	0:0	4	{
if	119:4	125:6	4	(crop -> res_unit != RESUNIT_INCH && crop -> res_unit != RESUNIT_CENTIMETER)
cond	119:8	119:60	5	crop -> res_unit != RESUNIT_INCH && crop -> res_unit != RESUNIT_CENTIMETER
water	119:8	0:0	6	crop
op	119:12	0:0	6	->
water	119:14	0:0	6	res_unit
op	119:23	0:0	6	!=
water	119:26	0:0	6	RESUNIT_INCH
op	119:39	0:0	6	&&
water	119:42	0:0	6	crop
op	119:46	0:0	6	->
water	119:48	0:0	6	res_unit
op	119:57	0:0	6	!=
water	119:60	0:0	6	RESUNIT_CENTIMETER
stmts	120:6	125:6	5	
water	120:6	0:0	6	{
water	121:6	0:0	6	tmargin
op	121:14	0:0	6	=
call	121:16	121:41	6	(uint32)
arg	121:25	121:41	7	crop->margins[0]
water	121:25	0:0	8	crop
op	121:29	0:0	8	->
water	121:31	0:0	8	margins
op	121:38	0:0	8	[
water	121:39	0:0	8	0
op	121:40	0:0	8	]
water	121:42	0:0	6	;
water	122:6	0:0	6	lmargin
op	122:14	0:0	6	=
call	122:16	122:41	6	(uint32)
arg	122:25	122:41	7	crop->margins[1]
water	122:25	0:0	8	crop
op	122:29	0:0	8	->
water	122:31	0:0	8	margins
op	122:38	0:0	8	[
water	122:39	0:0	8	1
op	122:40	0:0	8	]
water	122:42	0:0	6	;
water	123:6	0:0	6	bmargin
op	123:14	0:0	6	=
call	123:16	123:41	6	(uint32)
arg	123:25	123:41	7	crop->margins[2]
water	123:25	0:0	8	crop
op	123:29	0:0	8	->
water	123:31	0:0	8	margins
op	123:38	0:0	8	[
water	123:39	0:0	8	2
op	123:40	0:0	8	]
water	123:42	0:0	6	;
water	124:6	0:0	6	rmargin
op	124:14	0:0	6	=
call	124:16	124:41	6	(uint32)
arg	124:25	124:41	7	crop->margins[3]
water	124:25	0:0	8	crop
op	124:29	0:0	8	->
water	124:31	0:0	8	margins
op	124:38	0:0	8	[
water	124:39	0:0	8	3
op	124:40	0:0	8	]
water	124:42	0:0	6	;
water	125:6	0:0	6	}
else	126:4	132:6	4
stmts	127:6	132:6	5	
water	127:6	0:0	6	{
water	128:6	0:0	6	tmargin
op	128:14	0:0	6	=
call	128:16	128:56	6	(uint32)
arg	128:25	128:56	7	crop->margins[0]*scale*yres
water	128:25	0:0	8	crop
op	128:29	0:0	8	->
water	128:31	0:0	8	margins
op	128:38	0:0	8	[
water	128:39	0:0	8	0
op	128:40	0:0	8	]
op	128:42	0:0	8	*
water	128:44	0:0	8	scale
op	128:50	0:0	8	*
water	128:52	0:0	8	yres
water	128:57	0:0	6	;
water	129:6	0:0	6	lmargin
op	129:14	0:0	6	=
call	129:16	129:56	6	(uint32)
arg	129:25	129:56	7	crop->margins[1]*scale*xres
water	129:25	0:0	8	crop
op	129:29	0:0	8	->
water	129:31	0:0	8	margins
op	129:38	0:0	8	[
water	129:39	0:0	8	1
op	129:40	0:0	8	]
op	129:42	0:0	8	*
water	129:44	0:0	8	scale
op	129:50	0:0	8	*
water	129:52	0:0	8	xres
water	129:57	0:0	6	;
water	130:6	0:0	6	bmargin
op	130:14	0:0	6	=
call	130:16	130:56	6	(uint32)
arg	130:25	130:56	7	crop->margins[2]*scale*yres
water	130:25	0:0	8	crop
op	130:29	0:0	8	->
water	130:31	0:0	8	margins
op	130:38	0:0	8	[
water	130:39	0:0	8	2
op	130:40	0:0	8	]
op	130:42	0:0	8	*
water	130:44	0:0	8	scale
op	130:50	0:0	8	*
water	130:52	0:0	8	yres
water	130:57	0:0	6	;
water	131:6	0:0	6	rmargin
op	131:14	0:0	6	=
call	131:16	131:56	6	(uint32)
arg	131:25	131:56	7	crop->margins[3]*scale*xres
water	131:25	0:0	8	crop
op	131:29	0:0	8	->
water	131:31	0:0	8	margins
op	131:38	0:0	8	[
water	131:39	0:0	8	3
op	131:40	0:0	8	]
op	131:42	0:0	8	*
water	131:44	0:0	8	scale
op	131:50	0:0	8	*
water	131:52	0:0	8	xres
water	131:57	0:0	6	;
water	132:6	0:0	6	}
if	133:4	139:6	4	(( lmargin + rmargin ) > image -> width)
cond	133:8	133:37	5	( lmargin + rmargin ) > image -> width
water	133:8	0:0	6	(
water	133:9	0:0	6	lmargin
op	133:17	0:0	6	+
water	133:19	0:0	6	rmargin
water	133:26	0:0	6	)
op	133:28	0:0	6	>
water	133:30	0:0	6	image
op	133:35	0:0	6	->
water	133:37	0:0	6	width
stmts	134:6	139:6	5	
water	134:6	0:0	6	{
call	135:6	135:96	6	TIFFError
arg	135:16	135:42	7	"computeInputPixelOffsets"
water	135:16	0:0	8	"computeInputPixelOffsets"
arg	135:44	135:96	7	"Combined left and right margins exceed image width"
water	135:44	0:0	8	"Combined left and right margins exceed image width"
water	135:97	0:0	6	;
water	136:6	0:0	6	lmargin
op	136:14	0:0	6	=
water	136:16	0:0	6	(
water	136:17	0:0	6	uint32
water	136:23	0:0	6	)
water	136:25	0:0	6	0
water	136:26	0:0	6	;
water	137:6	0:0	6	rmargin
op	137:14	0:0	6	=
water	137:16	0:0	6	(
water	137:17	0:0	6	uint32
water	137:23	0:0	6	)
water	137:25	0:0	6	0
water	137:26	0:0	6	;
return	138:6	138:17	6	(-1)
water	138:13	0:0	7	(
op	138:14	0:0	7	-
water	138:15	0:0	7	1
water	138:16	0:0	7	)
water	139:6	0:0	6	}
if	140:4	146:6	4	(( tmargin + bmargin ) > image -> length)
cond	140:8	140:37	5	( tmargin + bmargin ) > image -> length
water	140:8	0:0	6	(
water	140:9	0:0	6	tmargin
op	140:17	0:0	6	+
water	140:19	0:0	6	bmargin
water	140:26	0:0	6	)
op	140:28	0:0	6	>
water	140:30	0:0	6	image
op	140:35	0:0	6	->
water	140:37	0:0	6	length
stmts	141:6	146:6	5	
water	141:6	0:0	6	{
call	142:6	142:97	6	TIFFError
arg	142:16	142:42	7	"computeInputPixelOffsets"
water	142:16	0:0	8	"computeInputPixelOffsets"
arg	142:44	142:97	7	"Combined top and bottom margins exceed image length"
water	142:44	0:0	8	"Combined top and bottom margins exceed image length"
water	142:98	0:0	6	;
water	143:6	0:0	6	tmargin
op	143:14	0:0	6	=
water	143:16	0:0	6	(
water	143:17	0:0	6	uint32
water	143:23	0:0	6	)
water	143:25	0:0	6	0
water	143:26	0:0	6	;
water	144:6	0:0	6	bmargin
op	144:14	0:0	6	=
water	144:16	0:0	6	(
water	144:17	0:0	6	uint32
water	144:23	0:0	6	)
water	144:25	0:0	6	0
water	144:26	0:0	6	;
return	145:6	145:17	6	(-1)
water	145:13	0:0	7	(
op	145:14	0:0	7	-
water	145:15	0:0	7	1
water	145:16	0:0	7	)
water	146:6	0:0	6	}
water	147:4	0:0	4	}
else	148:2	154:4	2
stmts	149:4	154:4	3	
water	149:4	0:0	4	{
water	150:4	0:0	4	tmargin
op	150:12	0:0	4	=
water	150:14	0:0	4	(
water	150:15	0:0	4	uint32
water	150:21	0:0	4	)
water	150:23	0:0	4	0
water	150:24	0:0	4	;
water	151:4	0:0	4	lmargin
op	151:12	0:0	4	=
water	151:14	0:0	4	(
water	151:15	0:0	4	uint32
water	151:21	0:0	4	)
water	151:23	0:0	4	0
water	151:24	0:0	4	;
water	152:4	0:0	4	bmargin
op	152:12	0:0	4	=
water	152:14	0:0	4	(
water	152:15	0:0	4	uint32
water	152:21	0:0	4	)
water	152:23	0:0	4	0
water	152:24	0:0	4	;
water	153:4	0:0	4	rmargin
op	153:12	0:0	4	=
water	153:14	0:0	4	(
water	153:15	0:0	4	uint32
water	153:21	0:0	4	)
water	153:23	0:0	4	0
water	153:24	0:0	4	;
water	154:4	0:0	4	}
if	156:2	166:4	2	(crop -> res_unit != RESUNIT_INCH && crop -> res_unit != RESUNIT_CENTIMETER)
cond	156:6	156:58	3	crop -> res_unit != RESUNIT_INCH && crop -> res_unit != RESUNIT_CENTIMETER
water	156:6	0:0	4	crop
op	156:10	0:0	4	->
water	156:12	0:0	4	res_unit
op	156:21	0:0	4	!=
water	156:24	0:0	4	RESUNIT_INCH
op	156:37	0:0	4	&&
water	156:40	0:0	4	crop
op	156:44	0:0	4	->
water	156:46	0:0	4	res_unit
op	156:55	0:0	4	!=
water	156:58	0:0	4	RESUNIT_CENTIMETER
stmts	157:4	166:4	3	
water	157:4	0:0	4	{
if	158:4	159:33	4	(crop -> crop_mode & CROP_WIDTH)
cond	158:8	158:26	5	crop -> crop_mode & CROP_WIDTH
water	158:8	0:0	6	crop
op	158:12	0:0	6	->
water	158:14	0:0	6	crop_mode
op	158:24	0:0	6	&
water	158:26	0:0	6	CROP_WIDTH
stmts	159:6	159:33	5	
water	159:6	0:0	6	width
op	159:12	0:0	6	=
water	159:14	0:0	6	(
water	159:15	0:0	6	uint32
water	159:21	0:0	6	)
water	159:22	0:0	6	crop
op	159:26	0:0	6	->
water	159:28	0:0	6	width
water	159:33	0:0	6	;
else	160:4	161:46	4
stmts	161:6	161:46	5	
water	161:6	0:0	6	width
op	161:12	0:0	6	=
water	161:14	0:0	6	image
op	161:19	0:0	6	->
water	161:21	0:0	6	width
op	161:27	0:0	6	-
water	161:29	0:0	6	lmargin
op	161:37	0:0	6	-
water	161:39	0:0	6	rmargin
water	161:46	0:0	6	;
if	162:4	163:36	4	(crop -> crop_mode & CROP_LENGTH)
cond	162:8	162:26	5	crop -> crop_mode & CROP_LENGTH
water	162:8	0:0	6	crop
op	162:12	0:0	6	->
water	162:14	0:0	6	crop_mode
op	162:24	0:0	6	&
water	162:26	0:0	6	CROP_LENGTH
stmts	163:6	163:36	5	
water	163:6	0:0	6	length
op	163:14	0:0	6	=
water	163:16	0:0	6	(
water	163:17	0:0	6	uint32
water	163:23	0:0	6	)
water	163:24	0:0	6	crop
op	163:28	0:0	6	->
water	163:30	0:0	6	length
water	163:36	0:0	6	;
else	164:4	165:48	4
stmts	165:6	165:48	5	
water	165:6	0:0	6	length
op	165:13	0:0	6	=
water	165:15	0:0	6	image
op	165:20	0:0	6	->
water	165:22	0:0	6	length
op	165:29	0:0	6	-
water	165:31	0:0	6	tmargin
op	165:39	0:0	6	-
water	165:41	0:0	6	bmargin
water	165:48	0:0	6	;
water	166:4	0:0	4	}
else	167:2	177:4	2
stmts	168:4	177:4	3	
water	168:4	0:0	4	{
if	169:4	170:57	4	(crop -> crop_mode & CROP_WIDTH)
cond	169:8	169:26	5	crop -> crop_mode & CROP_WIDTH
water	169:8	0:0	6	crop
op	169:12	0:0	6	->
water	169:14	0:0	6	crop_mode
op	169:24	0:0	6	&
water	169:26	0:0	6	CROP_WIDTH
stmts	170:6	170:57	5	
water	170:6	0:0	6	width
op	170:12	0:0	6	=
call	170:14	170:56	6	(uint32)
arg	170:23	170:56	7	crop->width*scale*image->xres
water	170:23	0:0	8	crop
op	170:27	0:0	8	->
water	170:29	0:0	8	width
op	170:35	0:0	8	*
water	170:37	0:0	8	scale
op	170:43	0:0	8	*
water	170:45	0:0	8	image
op	170:50	0:0	8	->
water	170:52	0:0	8	xres
water	170:57	0:0	6	;
else	171:4	172:46	4
stmts	172:6	172:46	5	
water	172:6	0:0	6	width
op	172:12	0:0	6	=
water	172:14	0:0	6	image
op	172:19	0:0	6	->
water	172:21	0:0	6	width
op	172:27	0:0	6	-
water	172:29	0:0	6	lmargin
op	172:37	0:0	6	-
water	172:39	0:0	6	rmargin
water	172:46	0:0	6	;
if	173:4	174:60	4	(crop -> crop_mode & CROP_LENGTH)
cond	173:8	173:26	5	crop -> crop_mode & CROP_LENGTH
water	173:8	0:0	6	crop
op	173:12	0:0	6	->
water	173:14	0:0	6	crop_mode
op	173:24	0:0	6	&
water	173:26	0:0	6	CROP_LENGTH
stmts	174:6	174:60	5	
water	174:6	0:0	6	length
op	174:14	0:0	6	=
call	174:16	174:59	6	(uint32)
arg	174:25	174:59	7	crop->length*scale*image->yres
water	174:25	0:0	8	crop
op	174:29	0:0	8	->
water	174:31	0:0	8	length
op	174:38	0:0	8	*
water	174:40	0:0	8	scale
op	174:46	0:0	8	*
water	174:48	0:0	8	image
op	174:53	0:0	8	->
water	174:55	0:0	8	yres
water	174:60	0:0	6	;
else	175:4	176:48	4
stmts	176:6	176:48	5	
water	176:6	0:0	6	length
op	176:13	0:0	6	=
water	176:15	0:0	6	image
op	176:20	0:0	6	->
water	176:22	0:0	6	length
op	176:29	0:0	6	-
water	176:31	0:0	6	tmargin
op	176:39	0:0	6	-
water	176:41	0:0	6	bmargin
water	176:48	0:0	6	;
water	177:4	0:0	4	}
water	178:2	0:0	2	off
op	178:5	0:0	2	->
water	178:7	0:0	2	tmargin
op	178:15	0:0	2	=
water	178:17	0:0	2	tmargin
water	178:24	0:0	2	;
water	179:2	0:0	2	off
op	179:5	0:0	2	->
water	179:7	0:0	2	bmargin
op	179:15	0:0	2	=
water	179:17	0:0	2	bmargin
water	179:24	0:0	2	;
water	180:2	0:0	2	off
op	180:5	0:0	2	->
water	180:7	0:0	2	lmargin
op	180:15	0:0	2	=
water	180:17	0:0	2	lmargin
water	180:24	0:0	2	;
water	181:2	0:0	2	off
op	181:5	0:0	2	->
water	181:7	0:0	2	rmargin
op	181:15	0:0	2	=
water	181:17	0:0	2	rmargin
water	181:24	0:0	2	;
switch	185:2	224:4	2	(crop -> edge_ref)
cond	185:10	185:16	3	crop -> edge_ref
water	185:10	0:0	4	crop
op	185:14	0:0	4	->
water	185:16	0:0	4	edge_ref
stmts	185:26	224:4	3	
water	185:26	0:0	4	{
label	186:4	186:20	4	case EDGE_BOTTOM :
water	187:9	0:0	4	startx
op	187:16	0:0	4	=
water	187:18	0:0	4	lmargin
water	187:25	0:0	4	;
if	188:9	189:44	4	(( startx + width ) >= ( image -> width - rmargin ))
cond	188:13	188:56	5	( startx + width ) >= ( image -> width - rmargin )
water	188:13	0:0	6	(
water	188:14	0:0	6	startx
op	188:21	0:0	6	+
water	188:23	0:0	6	width
water	188:28	0:0	6	)
op	188:30	0:0	6	>=
water	188:33	0:0	6	(
water	188:34	0:0	6	image
op	188:39	0:0	6	->
water	188:41	0:0	6	width
op	188:47	0:0	6	-
water	188:49	0:0	6	rmargin
water	188:56	0:0	6	)
stmts	189:11	189:44	5	
water	189:11	0:0	6	endx
op	189:16	0:0	6	=
water	189:18	0:0	6	image
op	189:23	0:0	6	->
water	189:25	0:0	6	width
op	189:31	0:0	6	-
water	189:33	0:0	6	rmargin
op	189:41	0:0	6	-
water	189:43	0:0	6	1
water	189:44	0:0	6	;
else	190:9	191:36	4
stmts	191:11	191:36	5	
water	191:11	0:0	6	endx
op	191:16	0:0	6	=
water	191:18	0:0	6	startx
op	191:25	0:0	6	+
water	191:27	0:0	6	width
op	191:33	0:0	6	-
water	191:35	0:0	6	1
water	191:36	0:0	6	;
water	192:9	0:0	4	endy
op	192:14	0:0	4	=
water	192:16	0:0	4	image
op	192:21	0:0	4	->
water	192:23	0:0	4	length
op	192:30	0:0	4	-
water	192:32	0:0	4	bmargin
op	192:40	0:0	4	-
water	192:42	0:0	4	1
water	192:43	0:0	4	;
if	193:9	194:27	4	(( endy - length ) <= tmargin)
cond	193:13	193:32	5	( endy - length ) <= tmargin
water	193:13	0:0	6	(
water	193:14	0:0	6	endy
op	193:19	0:0	6	-
water	193:21	0:0	6	length
water	193:27	0:0	6	)
op	193:29	0:0	6	<=
water	193:32	0:0	6	tmargin
stmts	194:11	194:27	5	
water	194:11	0:0	6	starty
op	194:18	0:0	6	=
water	194:20	0:0	6	tmargin
water	194:27	0:0	6	;
else	195:9	196:37	4
stmts	196:11	196:37	5	
water	196:11	0:0	6	starty
op	196:18	0:0	6	=
water	196:20	0:0	6	endy
op	196:25	0:0	6	-
water	196:27	0:0	6	length
op	196:34	0:0	6	+
water	196:36	0:0	6	1
water	196:37	0:0	6	;
break	197:9	197:14	4	
label	198:4	198:19	4	case EDGE_RIGHT :
water	199:9	0:0	4	endx
op	199:14	0:0	4	=
water	199:16	0:0	4	image
op	199:21	0:0	4	->
water	199:23	0:0	4	width
op	199:29	0:0	4	-
water	199:31	0:0	4	rmargin
op	199:39	0:0	4	-
water	199:41	0:0	4	1
water	199:42	0:0	4	;
if	200:9	201:27	4	(( endx - width ) <= lmargin)
cond	200:13	200:31	5	( endx - width ) <= lmargin
water	200:13	0:0	6	(
water	200:14	0:0	6	endx
op	200:19	0:0	6	-
water	200:21	0:0	6	width
water	200:26	0:0	6	)
op	200:28	0:0	6	<=
water	200:31	0:0	6	lmargin
stmts	201:11	201:27	5	
water	201:11	0:0	6	startx
op	201:18	0:0	6	=
water	201:20	0:0	6	lmargin
water	201:27	0:0	6	;
else	202:9	203:36	4
stmts	203:11	203:36	5	
water	203:11	0:0	6	startx
op	203:18	0:0	6	=
water	203:20	0:0	6	endx
op	203:25	0:0	6	-
water	203:27	0:0	6	width
op	203:33	0:0	6	+
water	203:35	0:0	6	1
water	203:36	0:0	6	;
water	204:9	0:0	4	starty
op	204:16	0:0	4	=
water	204:18	0:0	4	tmargin
water	204:25	0:0	4	;
if	205:9	206:45	4	(( starty + length ) >= ( image -> length - bmargin ))
cond	205:13	205:58	5	( starty + length ) >= ( image -> length - bmargin )
water	205:13	0:0	6	(
water	205:14	0:0	6	starty
op	205:21	0:0	6	+
water	205:23	0:0	6	length
water	205:29	0:0	6	)
op	205:31	0:0	6	>=
water	205:34	0:0	6	(
water	205:35	0:0	6	image
op	205:40	0:0	6	->
water	205:42	0:0	6	length
op	205:49	0:0	6	-
water	205:51	0:0	6	bmargin
water	205:58	0:0	6	)
stmts	206:11	206:45	5	
water	206:11	0:0	6	endy
op	206:16	0:0	6	=
water	206:18	0:0	6	image
op	206:23	0:0	6	->
water	206:25	0:0	6	length
op	206:32	0:0	6	-
water	206:34	0:0	6	bmargin
op	206:42	0:0	6	-
water	206:44	0:0	6	1
water	206:45	0:0	6	;
else	207:9	208:37	4
stmts	208:11	208:37	5	
water	208:11	0:0	6	endy
op	208:16	0:0	6	=
water	208:18	0:0	6	starty
op	208:25	0:0	6	+
water	208:27	0:0	6	length
op	208:34	0:0	6	-
water	208:36	0:0	6	1
water	208:37	0:0	6	;
break	209:9	209:14	4	
label	210:4	210:17	4	case EDGE_TOP :
label	211:4	211:18	4	case EDGE_LEFT :
label	212:4	212:11	4	default :
water	213:9	0:0	4	startx
op	213:16	0:0	4	=
water	213:18	0:0	4	lmargin
water	213:25	0:0	4	;
if	214:9	215:44	4	(( startx + width ) >= ( image -> width - rmargin ))
cond	214:13	214:56	5	( startx + width ) >= ( image -> width - rmargin )
water	214:13	0:0	6	(
water	214:14	0:0	6	startx
op	214:21	0:0	6	+
water	214:23	0:0	6	width
water	214:28	0:0	6	)
op	214:30	0:0	6	>=
water	214:33	0:0	6	(
water	214:34	0:0	6	image
op	214:39	0:0	6	->
water	214:41	0:0	6	width
op	214:47	0:0	6	-
water	214:49	0:0	6	rmargin
water	214:56	0:0	6	)
stmts	215:11	215:44	5	
water	215:11	0:0	6	endx
op	215:16	0:0	6	=
water	215:18	0:0	6	image
op	215:23	0:0	6	->
water	215:25	0:0	6	width
op	215:31	0:0	6	-
water	215:33	0:0	6	rmargin
op	215:41	0:0	6	-
water	215:43	0:0	6	1
water	215:44	0:0	6	;
else	216:9	217:36	4
stmts	217:11	217:36	5	
water	217:11	0:0	6	endx
op	217:16	0:0	6	=
water	217:18	0:0	6	startx
op	217:25	0:0	6	+
water	217:27	0:0	6	width
op	217:33	0:0	6	-
water	217:35	0:0	6	1
water	217:36	0:0	6	;
water	218:9	0:0	4	starty
op	218:16	0:0	4	=
water	218:18	0:0	4	tmargin
water	218:25	0:0	4	;
if	219:9	220:45	4	(( starty + length ) >= ( image -> length - bmargin ))
cond	219:13	219:58	5	( starty + length ) >= ( image -> length - bmargin )
water	219:13	0:0	6	(
water	219:14	0:0	6	starty
op	219:21	0:0	6	+
water	219:23	0:0	6	length
water	219:29	0:0	6	)
op	219:31	0:0	6	>=
water	219:34	0:0	6	(
water	219:35	0:0	6	image
op	219:40	0:0	6	->
water	219:42	0:0	6	length
op	219:49	0:0	6	-
water	219:51	0:0	6	bmargin
water	219:58	0:0	6	)
stmts	220:11	220:45	5	
water	220:11	0:0	6	endy
op	220:16	0:0	6	=
water	220:18	0:0	6	image
op	220:23	0:0	6	->
water	220:25	0:0	6	length
op	220:32	0:0	6	-
water	220:34	0:0	6	bmargin
op	220:42	0:0	6	-
water	220:44	0:0	6	1
water	220:45	0:0	6	;
else	221:9	222:37	4
stmts	222:11	222:37	5	
water	222:11	0:0	6	endy
op	222:16	0:0	6	=
water	222:18	0:0	6	starty
op	222:25	0:0	6	+
water	222:27	0:0	6	length
op	222:34	0:0	6	-
water	222:36	0:0	6	1
water	222:37	0:0	6	;
break	223:9	223:14	4	
water	224:4	0:0	4	}
water	225:2	0:0	2	off
op	225:5	0:0	2	->
water	225:7	0:0	2	startx
op	225:14	0:0	2	=
water	225:16	0:0	2	startx
water	225:22	0:0	2	;
water	226:2	0:0	2	off
op	226:5	0:0	2	->
water	226:7	0:0	2	starty
op	226:14	0:0	2	=
water	226:16	0:0	2	starty
water	226:22	0:0	2	;
water	227:2	0:0	2	off
op	227:5	0:0	2	->
water	227:7	0:0	2	endx
op	227:14	0:0	2	=
water	227:16	0:0	2	endx
water	227:20	0:0	2	;
water	228:2	0:0	2	off
op	228:5	0:0	2	->
water	228:7	0:0	2	endy
op	228:14	0:0	2	=
water	228:16	0:0	2	endy
water	228:20	0:0	2	;
water	229:2	0:0	2	crop_width
op	229:14	0:0	2	=
water	229:16	0:0	2	endx
op	229:21	0:0	2	-
water	229:23	0:0	2	startx
op	229:30	0:0	2	+
water	229:32	0:0	2	1
water	229:33	0:0	2	;
water	230:2	0:0	2	crop_length
op	230:14	0:0	2	=
water	230:16	0:0	2	endy
op	230:21	0:0	2	-
water	230:23	0:0	2	starty
op	230:30	0:0	2	+
water	230:32	0:0	2	1
water	230:33	0:0	2	;
if	231:2	236:4	2	(crop_width <= 0)
cond	231:6	231:20	3	crop_width <= 0
water	231:6	0:0	4	crop_width
op	231:17	0:0	4	<=
water	231:20	0:0	4	0
stmts	232:4	236:4	3	
water	232:4	0:0	4	{
call	233:4	234:78	4	TIFFError
arg	233:14	233:40	5	"computeInputPixelOffsets"
water	233:14	0:0	6	"computeInputPixelOffsets"
arg	234:15	234:78	5	"Invalid left/right margins and /or image crop width requested"
water	234:15	0:0	6	"Invalid left/right margins and /or image crop width requested"
water	234:79	0:0	4	;
return	235:4	235:15	4	(-1)
water	235:11	0:0	5	(
op	235:12	0:0	5	-
water	235:13	0:0	5	1
water	235:14	0:0	5	)
water	236:4	0:0	4	}
if	237:2	238:29	2	(crop_width > image -> width)
cond	237:6	237:26	3	crop_width > image -> width
water	237:6	0:0	4	crop_width
op	237:17	0:0	4	>
water	237:19	0:0	4	image
op	237:24	0:0	4	->
water	237:26	0:0	4	width
stmts	238:4	238:29	3	
water	238:4	0:0	4	crop_width
op	238:15	0:0	4	=
water	238:17	0:0	4	image
op	238:22	0:0	4	->
water	238:24	0:0	4	width
water	238:29	0:0	4	;
if	239:2	244:4	2	(crop_length <= 0)
cond	239:6	239:21	3	crop_length <= 0
water	239:6	0:0	4	crop_length
op	239:18	0:0	4	<=
water	239:21	0:0	4	0
stmts	240:4	244:4	3	
water	240:4	0:0	4	{
call	241:4	242:78	4	TIFFError
arg	241:14	241:40	5	"computeInputPixelOffsets"
water	241:14	0:0	6	"computeInputPixelOffsets"
arg	242:14	242:78	5	"Invalid top/bottom margins and /or image crop length requested"
water	242:14	0:0	6	"Invalid top/bottom margins and /or image crop length requested"
water	242:79	0:0	4	;
return	243:4	243:15	4	(-1)
water	243:11	0:0	5	(
op	243:12	0:0	5	-
water	243:13	0:0	5	1
water	243:14	0:0	5	)
water	244:4	0:0	4	}
if	245:2	246:31	2	(crop_length > image -> length)
cond	245:6	245:27	3	crop_length > image -> length
water	245:6	0:0	4	crop_length
op	245:18	0:0	4	>
water	245:20	0:0	4	image
op	245:25	0:0	4	->
water	245:27	0:0	4	length
stmts	246:4	246:31	3	
water	246:4	0:0	4	crop_length
op	246:16	0:0	4	=
water	246:18	0:0	4	image
op	246:23	0:0	4	->
water	246:25	0:0	4	length
water	246:31	0:0	4	;
water	247:2	0:0	2	off
op	247:5	0:0	2	->
water	247:7	0:0	2	crop_width
op	247:18	0:0	2	=
water	247:20	0:0	2	crop_width
water	247:30	0:0	2	;
water	248:2	0:0	2	off
op	248:5	0:0	2	->
water	248:7	0:0	2	crop_length
op	248:19	0:0	2	=
water	248:21	0:0	2	crop_length
water	248:32	0:0	2	;
return	249:2	249:12	2	(0)
water	249:9	0:0	3	(
water	249:10	0:0	3	0
water	249:11	0:0	3	)
