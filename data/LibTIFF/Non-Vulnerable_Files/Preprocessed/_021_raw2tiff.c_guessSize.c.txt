func	1:0	68:0	0	static int	guessSize
params	2:9	0:0	1	
param	2:10	2:16	2	int	fd
param	2:18	2:36	2	TIFFDataType	dtype
param	2:38	2:52	2	off_t	hdr_size
param	2:54	2:67	2	uint32	nbands
param	3:3	3:11	2	int	swab
param	3:13	3:26	2	uint32 *	width
param	3:28	3:42	2	uint32 *	length
stmnts	0:0	67:9	1	
decl	5:1	5:25	2	const float	longt
op	5:19	0:0	2	=
water	5:21	0:0	2	40
op	5:23	0:0	2	.
water	5:24	0:0	2	0
decl	6:1	6:22	2	char	*buf1
water	6:15	0:0	2	,
decl	6:1	6:22	2	char	*buf2
decl	7:1	7:21	2	struct stat	filestat
decl	8:1	8:41	2	uint32	w
water	8:13	0:0	2	,
decl	8:1	8:41	2	uint32	h
water	8:16	0:0	2	,
decl	8:1	8:41	2	uint32	scanlinesize
water	8:30	0:0	2	,
decl	8:1	8:41	2	uint32	imagesize
decl	9:1	9:40	2	uint32	depth
op	9:18	0:0	2	=
call	9:20	9:39	3	TIFFDataWidth
arg	9:34	9:39	4	dtype
water	9:34	0:0	5	dtype
decl	10:1	10:28	2	float	cor_coef
op	10:20	0:0	2	=
water	10:22	0:0	2	0
water	10:23	0:0	2	,
decl	10:1	10:28	2	float	tmp
call	11:1	11:20	2	fstat
arg	11:7	11:9	3	fd
water	11:7	0:0	4	fd
arg	11:11	11:20	3	&filestat
op	11:11	0:0	4	&
water	11:12	0:0	4	filestat
water	11:21	0:0	2	;
if	12:1	15:1	2	(filestat . st_size < hdr_size)
cond	12:5	12:24	3	filestat . st_size < hdr_size
water	12:5	0:0	4	filestat
op	12:13	0:0	4	.
water	12:14	0:0	4	st_size
op	12:22	0:0	4	<
water	12:24	0:0	4	hdr_size
stmts	12:34	15:1	3	
water	12:34	0:0	4	{
call	13:2	13:54	4	fprintf
arg	13:10	13:16	5	stderr
water	13:10	0:0	6	stderr
arg	13:18	13:54	5	"Too large header size specified.\n"
water	13:18	0:0	6	"Too large header size specified.\n"
water	13:55	0:0	4	;
return	14:2	14:11	4	-1
op	14:9	0:0	5	-
water	14:10	0:0	5	1
water	15:1	0:0	4	}
water	16:1	0:0	2	imagesize
op	16:11	0:0	2	=
water	16:13	0:0	2	(
water	16:14	0:0	2	filestat
op	16:22	0:0	2	.
water	16:23	0:0	2	st_size
op	16:31	0:0	2	-
water	16:33	0:0	2	hdr_size
water	16:41	0:0	2	)
op	16:43	0:0	2	/
water	16:45	0:0	2	nbands
op	16:52	0:0	2	/
water	16:54	0:0	2	depth
water	16:59	0:0	2	;
if	17:1	23:1	2	(* width != 0 && * length == 0)
cond	17:5	17:31	3	* width != 0 && * length == 0
op	17:5	0:0	4	*
water	17:6	0:0	4	width
op	17:12	0:0	4	!=
water	17:15	0:0	4	0
op	17:17	0:0	4	&&
op	17:20	0:0	4	*
water	17:21	0:0	4	length
op	17:28	0:0	4	==
water	17:31	0:0	4	0
stmts	17:34	23:1	3	
water	17:34	0:0	4	{
call	18:2	18:52	4	fprintf
arg	18:10	18:16	5	stderr
water	18:10	0:0	6	stderr
arg	18:18	18:52	5	"Image height is not specified.\n"
water	18:18	0:0	6	"Image height is not specified.\n"
water	18:53	0:0	4	;
op	19:2	0:0	4	*
water	19:3	0:0	4	length
op	19:10	0:0	4	=
water	19:12	0:0	4	imagesize
op	19:22	0:0	4	/
op	19:24	0:0	4	*
water	19:25	0:0	4	width
water	19:30	0:0	4	;
call	20:2	21:25	4	fprintf
arg	20:10	20:16	5	stderr
water	20:10	0:0	6	stderr
arg	20:18	20:47	5	"Height is guessed as %lu.\n"
water	20:18	0:0	6	"Height is guessed as %lu.\n"
arg	21:3	21:25	5	(unsignedlong)*length
water	21:3	0:0	6	(
water	21:4	0:0	6	unsigned
water	21:13	0:0	6	long
water	21:17	0:0	6	)
op	21:18	0:0	6	*
water	21:19	0:0	6	length
water	21:26	0:0	4	;
return	22:2	22:10	4	1
water	22:9	0:0	5	1
water	23:1	0:0	4	}
else	23:3	29:1	2
stmts	23:8	29:1	3	
if	23:8	29:1	4	(* width == 0 && * length != 0)
cond	23:12	23:38	5	* width == 0 && * length != 0
op	23:12	0:0	6	*
water	23:13	0:0	6	width
op	23:19	0:0	6	==
water	23:22	0:0	6	0
op	23:24	0:0	6	&&
op	23:27	0:0	6	*
water	23:28	0:0	6	length
op	23:35	0:0	6	!=
water	23:38	0:0	6	0
stmts	23:41	29:1	5	
water	23:41	0:0	6	{
call	24:2	24:51	6	fprintf
arg	24:10	24:16	7	stderr
water	24:10	0:0	8	stderr
arg	24:18	24:51	7	"Image width is not specified.\n"
water	24:18	0:0	8	"Image width is not specified.\n"
water	24:52	0:0	6	;
op	25:2	0:0	6	*
water	25:3	0:0	6	width
op	25:9	0:0	6	=
water	25:11	0:0	6	imagesize
op	25:21	0:0	6	/
op	25:23	0:0	6	*
water	25:24	0:0	6	length
water	25:30	0:0	6	;
call	26:2	27:24	6	fprintf
arg	26:10	26:16	7	stderr
water	26:10	0:0	8	stderr
arg	26:18	26:46	7	"Width is guessed as %lu.\n"
water	26:18	0:0	8	"Width is guessed as %lu.\n"
arg	27:3	27:24	7	(unsignedlong)*width
water	27:3	0:0	8	(
water	27:4	0:0	8	unsigned
water	27:13	0:0	8	long
water	27:17	0:0	8	)
op	27:18	0:0	8	*
water	27:19	0:0	8	width
water	27:25	0:0	6	;
return	28:2	28:10	6	1
water	28:9	0:0	7	1
water	29:1	0:0	6	}
else	29:3	61:1	2
stmts	29:8	61:1	3	
if	29:8	61:1	4	(* width == 0 && * length == 0)
cond	29:12	29:38	5	* width == 0 && * length == 0
op	29:12	0:0	6	*
water	29:13	0:0	6	width
op	29:19	0:0	6	==
water	29:22	0:0	6	0
op	29:24	0:0	6	&&
op	29:27	0:0	6	*
water	29:28	0:0	6	length
op	29:35	0:0	6	==
water	29:38	0:0	6	0
stmts	29:41	61:1	5	
water	29:41	0:0	6	{
call	30:2	30:63	6	fprintf
arg	30:10	30:16	7	stderr
water	30:10	0:0	8	stderr
arg	30:18	30:63	7	"Image width and height are not specified.\n"
water	30:18	0:0	8	"Image width and height are not specified.\n"
water	30:64	0:0	6	;
for	31:2	56:2	6	(w = ( uint32 )sqrt (imagesize / longt ) ;w <sqrt (imagesize * longt );w ++)
forinit	31:7	31:43	7	w = ( uint32 )sqrt (imagesize / longt ) ;
water	31:7	0:0	8	w
op	31:9	0:0	8	=
water	31:11	0:0	8	(
water	31:12	0:0	8	uint32
water	31:18	0:0	8	)
call	31:20	31:42	8	sqrt
arg	31:25	31:42	9	imagesize/longt
water	31:25	0:0	10	imagesize
op	31:35	0:0	10	/
water	31:37	0:0	10	longt
water	31:43	0:0	8	;
cond	32:7	32:33	7	w <sqrt (imagesize * longt )
water	32:7	0:0	8	w
op	32:9	0:0	8	<
call	32:11	32:33	8	sqrt
arg	32:16	32:33	9	imagesize*longt
water	32:16	0:0	10	imagesize
op	32:26	0:0	10	*
water	32:28	0:0	10	longt
forexpr	33:7	33:8	7	w ++
water	33:7	0:0	8	w
op	33:8	0:0	8	++
stmts	33:12	56:2	7	
water	33:12	0:0	8	{
if	34:3	55:3	8	(imagesize % w == 0)
cond	34:7	34:24	9	imagesize % w == 0
water	34:7	0:0	10	imagesize
op	34:17	0:0	10	%
water	34:19	0:0	10	w
op	34:21	0:0	10	==
water	34:24	0:0	10	0
stmts	34:27	55:3	9	
water	34:27	0:0	10	{
water	35:4	0:0	10	scanlinesize
op	35:17	0:0	10	=
water	35:19	0:0	10	w
op	35:21	0:0	10	*
water	35:23	0:0	10	depth
water	35:28	0:0	10	;
water	36:4	0:0	10	buf1
op	36:9	0:0	10	=
call	36:11	36:35	10	_TIFFmalloc
arg	36:23	36:35	11	scanlinesize
water	36:23	0:0	12	scanlinesize
water	36:36	0:0	10	;
water	37:4	0:0	10	buf2
op	37:9	0:0	10	=
call	37:11	37:35	10	_TIFFmalloc
arg	37:23	37:35	11	scanlinesize
water	37:23	0:0	12	scanlinesize
water	37:36	0:0	10	;
water	38:4	0:0	10	h
op	38:6	0:0	10	=
water	38:8	0:0	10	imagesize
op	38:18	0:0	10	/
water	38:20	0:0	10	w
water	38:21	0:0	10	;
call	39:4	40:18	10	lseek
arg	39:10	39:12	11	fd
water	39:10	0:0	12	fd
arg	39:14	39:48	11	hdr_size+(int)(h/2)*scanlinesize
water	39:14	0:0	12	hdr_size
op	39:23	0:0	12	+
call	39:25	39:34	12	(int)
arg	39:31	39:34	13	h/2
water	39:31	0:0	14	h
op	39:32	0:0	14	/
water	39:33	0:0	14	2
op	39:35	0:0	12	*
water	39:36	0:0	12	scanlinesize
arg	40:10	40:18	11	SEEK_SET
water	40:10	0:0	12	SEEK_SET
water	40:19	0:0	10	;
call	41:4	41:31	10	read
arg	41:9	41:11	11	fd
water	41:9	0:0	12	fd
arg	41:13	41:17	11	buf1
water	41:13	0:0	12	buf1
arg	41:19	41:31	11	scanlinesize
water	41:19	0:0	12	scanlinesize
water	41:32	0:0	10	;
call	42:4	42:31	10	read
arg	42:9	42:11	11	fd
water	42:9	0:0	12	fd
arg	42:13	42:17	11	buf2
water	42:13	0:0	12	buf2
arg	42:19	42:31	11	scanlinesize
water	42:19	0:0	12	scanlinesize
water	42:32	0:0	10	;
if	43:4	46:4	10	(swab)
cond	43:8	43:8	11	swab
water	43:8	0:0	12	swab
stmts	43:14	46:4	11	
water	43:14	0:0	12	{
call	44:5	44:39	12	swapBytesInScanline
arg	44:25	44:29	13	buf1
water	44:25	0:0	14	buf1
arg	44:31	44:32	13	w
water	44:31	0:0	14	w
arg	44:34	44:39	13	dtype
water	44:34	0:0	14	dtype
water	44:40	0:0	12	;
call	45:5	45:39	12	swapBytesInScanline
arg	45:25	45:29	13	buf2
water	45:25	0:0	14	buf2
arg	45:31	45:32	13	w
water	45:31	0:0	14	w
arg	45:34	45:39	13	dtype
water	45:34	0:0	14	dtype
water	45:40	0:0	12	;
water	46:4	0:0	12	}
water	47:4	0:0	10	tmp
op	47:8	0:0	10	=
water	47:10	0:0	10	(
water	47:11	0:0	10	float
water	47:16	0:0	10	)
call	47:18	48:23	10	fabs
arg	47:23	48:23	11	correlation(buf1,buf2,w,dtype)
call	47:23	48:22	12	correlation
arg	47:35	47:39	13	buf1
water	47:35	0:0	14	buf1
arg	47:41	47:45	13	buf2
water	47:41	0:0	14	buf2
arg	48:14	48:15	13	w
water	48:14	0:0	14	w
arg	48:17	48:22	13	dtype
water	48:17	0:0	14	dtype
water	48:24	0:0	10	;
if	49:4	52:4	10	(tmp > cor_coef)
cond	49:8	49:14	11	tmp > cor_coef
water	49:8	0:0	12	tmp
op	49:12	0:0	12	>
water	49:14	0:0	12	cor_coef
stmts	49:24	52:4	11	
water	49:24	0:0	12	{
water	50:5	0:0	12	cor_coef
op	50:14	0:0	12	=
water	50:16	0:0	12	tmp
water	50:19	0:0	12	;
op	51:5	0:0	12	*
water	51:6	0:0	12	width
op	51:12	0:0	12	=
water	51:14	0:0	12	w
water	51:15	0:0	12	,
op	51:17	0:0	12	*
water	51:18	0:0	12	length
op	51:25	0:0	12	=
water	51:27	0:0	12	h
water	51:28	0:0	12	;
water	52:4	0:0	12	}
call	53:4	53:18	10	_TIFFfree
arg	53:14	53:18	11	buf1
water	53:14	0:0	12	buf1
water	53:19	0:0	10	;
call	54:4	54:18	10	_TIFFfree
arg	54:14	54:18	11	buf2
water	54:14	0:0	12	buf2
water	54:19	0:0	10	;
water	55:3	0:0	10	}
water	56:2	0:0	8	}
call	57:2	59:48	6	fprintf
arg	57:10	57:16	7	stderr
water	57:10	0:0	8	stderr
arg	58:3	58:57	7	"Width is guessed as %lu, height is guessed as %lu.\n"
water	58:3	0:0	8	"Width is guessed as %lu, height is guessed as %lu.\n"
arg	59:3	59:24	7	(unsignedlong)*width
water	59:3	0:0	8	(
water	59:4	0:0	8	unsigned
water	59:13	0:0	8	long
water	59:17	0:0	8	)
op	59:18	0:0	8	*
water	59:19	0:0	8	width
arg	59:26	59:48	7	(unsignedlong)*length
water	59:26	0:0	8	(
water	59:27	0:0	8	unsigned
water	59:36	0:0	8	long
water	59:40	0:0	8	)
op	59:41	0:0	8	*
water	59:42	0:0	8	length
water	59:49	0:0	6	;
return	60:2	60:10	6	1
water	60:9	0:0	7	1
water	61:1	0:0	6	}
else	61:3	66:1	2
stmts	61:8	66:1	3	
water	61:8	0:0	4	{
if	62:2	65:2	4	(filestat . st_size <( off_t ) (hdr_size + ( * width ) * ( * length ) * nbands * depth ))
cond	62:6	62:71	5	filestat . st_size <( off_t ) (hdr_size + ( * width ) * ( * length ) * nbands * depth )
water	62:6	0:0	6	filestat
op	62:14	0:0	6	.
water	62:15	0:0	6	st_size
op	62:22	0:0	6	<
call	62:23	62:71	6	(off_t)
arg	62:31	62:71	7	hdr_size+(*width)*(*length)*nbands*depth
water	62:31	0:0	8	hdr_size
op	62:39	0:0	8	+
water	62:40	0:0	8	(
op	62:41	0:0	8	*
water	62:42	0:0	8	width
water	62:47	0:0	8	)
op	62:48	0:0	8	*
water	62:49	0:0	8	(
op	62:50	0:0	8	*
water	62:51	0:0	8	length
water	62:57	0:0	8	)
op	62:58	0:0	8	*
water	62:59	0:0	8	nbands
op	62:65	0:0	8	*
water	62:66	0:0	8	depth
stmts	62:74	65:2	5	
water	62:74	0:0	6	{
call	63:3	63:44	6	fprintf
arg	63:11	63:17	7	stderr
water	63:11	0:0	8	stderr
arg	63:19	63:44	7	"Input file too small.\n"
water	63:19	0:0	8	"Input file too small.\n"
water	63:45	0:0	6	;
return	64:2	64:11	6	-1
op	64:9	0:0	7	-
water	64:10	0:0	7	1
water	65:2	0:0	6	}
water	66:1	0:0	4	}
return	67:1	67:9	2	1
water	67:8	0:0	3	1
